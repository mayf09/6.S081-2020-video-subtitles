1
00:00:01,920 --> 00:00:04,309

all right um

2
00:00:04,309 --> 00:00:04,319
all right um
 

3
00:00:04,319 --> 00:00:08,710
all right um
welcome to six s081 operating systems

4
00:00:08,710 --> 00:00:08,720
welcome to six s081 operating systems
 

5
00:00:08,720 --> 00:00:11,190
welcome to six s081 operating systems
um i'm robert i'll be co-lecturing with

6
00:00:11,190 --> 00:00:11,200
um i'm robert i'll be co-lecturing with
 

7
00:00:11,200 --> 00:00:12,789
um i'm robert i'll be co-lecturing with
franz

8
00:00:12,789 --> 00:00:12,799
franz
 

9
00:00:12,799 --> 00:00:17,189
franz
and david and nicholas for the tas

10
00:00:17,189 --> 00:00:17,199
and david and nicholas for the tas
 

11
00:00:17,199 --> 00:00:19,109
and david and nicholas for the tas
please during these zoom lectures ask

12
00:00:19,109 --> 00:00:19,119
please during these zoom lectures ask
 

13
00:00:19,119 --> 00:00:20,630
please during these zoom lectures ask
questions you can either

14
00:00:20,630 --> 00:00:20,640
questions you can either
 

15
00:00:20,640 --> 00:00:24,070
questions you can either
interrupt me by audio or enter something

16
00:00:24,070 --> 00:00:24,080
interrupt me by audio or enter something
 

17
00:00:24,080 --> 00:00:26,310
interrupt me by audio or enter something
into the chat window and

18
00:00:26,310 --> 00:00:26,320
into the chat window and
 

19
00:00:26,320 --> 00:00:27,670
into the chat window and
one of the staff will see an ask

20
00:00:27,670 --> 00:00:27,680
one of the staff will see an ask
 

21
00:00:27,680 --> 00:00:30,710
one of the staff will see an ask
question for you and by the way we'll be

22
00:00:30,710 --> 00:00:30,720
question for you and by the way we'll be
 

23
00:00:30,720 --> 00:00:32,310
question for you and by the way we'll be
recording these lectures

24
00:00:32,310 --> 00:00:32,320
recording these lectures
 

25
00:00:32,320 --> 00:00:33,750
recording these lectures
and we'll post the recordings later so

26
00:00:33,750 --> 00:00:33,760
and we'll post the recordings later so
 

27
00:00:33,760 --> 00:00:36,069
and we'll post the recordings later so
you can review them or for

28
00:00:36,069 --> 00:00:36,079
you can review them or for
 

29
00:00:36,079 --> 00:00:38,150
you can review them or for
people who can't make this time so they

30
00:00:38,150 --> 00:00:38,160
people who can't make this time so they
 

31
00:00:38,160 --> 00:00:40,549
people who can't make this time so they
can never like see the lectures

32
00:00:40,549 --> 00:00:40,559
can never like see the lectures
 

33
00:00:40,559 --> 00:00:43,750
can never like see the lectures
all right i want to start by um

34
00:00:43,750 --> 00:00:43,760
all right i want to start by um
 

35
00:00:43,760 --> 00:00:44,950
all right i want to start by um
laying out some of the goals of the

36
00:00:44,950 --> 00:00:44,960
laying out some of the goals of the
 

37
00:00:44,960 --> 00:00:46,950
laying out some of the goals of the
course so

38
00:00:46,950 --> 00:00:46,960
course so
 

39
00:00:46,960 --> 00:00:50,790
course so
number one is to um understand

40
00:00:50,790 --> 00:00:50,800
number one is to um understand
 

41
00:00:50,800 --> 00:00:54,069
number one is to um understand
uh the design and implementation of

42
00:00:54,069 --> 00:00:54,079
uh the design and implementation of
 

43
00:00:54,079 --> 00:00:55,430
uh the design and implementation of
operating systems

44
00:00:55,430 --> 00:00:55,440
operating systems
 

45
00:00:55,440 --> 00:00:58,869
operating systems
and you know the uh

46
00:00:58,869 --> 00:00:58,879
and you know the uh
 

47
00:00:58,879 --> 00:01:01,189
and you know the uh
design is sort of high-level structure

48
00:01:01,189 --> 00:01:01,199
design is sort of high-level structure
 

49
00:01:01,199 --> 00:01:03,349
design is sort of high-level structure
and implementation is really about what

50
00:01:03,349 --> 00:01:03,359
and implementation is really about what
 

51
00:01:03,359 --> 00:01:04,469
and implementation is really about what
the code looks like

52
00:01:04,469 --> 00:01:04,479
the code looks like
 

53
00:01:04,479 --> 00:01:05,990
the code looks like
and we'll be spending a lot of time with

54
00:01:05,990 --> 00:01:06,000
and we'll be spending a lot of time with
 

55
00:01:06,000 --> 00:01:08,149
and we'll be spending a lot of time with
both um

56
00:01:08,149 --> 00:01:08,159
both um
 

57
00:01:08,159 --> 00:01:11,429
both um
and in the interest of

58
00:01:11,429 --> 00:01:11,439
and in the interest of
 

59
00:01:11,439 --> 00:01:12,710
and in the interest of
getting a deep understanding of what's

60
00:01:12,710 --> 00:01:12,720
getting a deep understanding of what's
 

61
00:01:12,720 --> 00:01:15,910
getting a deep understanding of what's
going on you'll get hands-on experience

62
00:01:15,910 --> 00:01:15,920
going on you'll get hands-on experience
 

63
00:01:15,920 --> 00:01:21,670
going on you'll get hands-on experience
with a small

64
00:01:21,670 --> 00:01:21,680

 

65
00:01:21,680 --> 00:01:23,749

with a small operating system the xv6

66
00:01:23,749 --> 00:01:23,759
with a small operating system the xv6
 

67
00:01:23,759 --> 00:01:26,870
with a small operating system the xv6
operating system

68
00:01:26,870 --> 00:01:26,880

 

69
00:01:26,880 --> 00:01:28,870

and in addition to actually looking at

70
00:01:28,870 --> 00:01:28,880
and in addition to actually looking at
 

71
00:01:28,880 --> 00:01:30,310
and in addition to actually looking at
an existing operating system

72
00:01:30,310 --> 00:01:30,320
an existing operating system
 

73
00:01:30,320 --> 00:01:33,830
an existing operating system
you'll be in the labs get a bunch of

74
00:01:33,830 --> 00:01:33,840
you'll be in the labs get a bunch of
 

75
00:01:33,840 --> 00:01:34,550
you'll be in the labs get a bunch of
experience

76
00:01:34,550 --> 00:01:34,560
experience
 

77
00:01:34,560 --> 00:01:36,789
experience
extending the operating system modifying

78
00:01:36,789 --> 00:01:36,799
extending the operating system modifying
 

79
00:01:36,799 --> 00:01:38,230
extending the operating system modifying
improving its behavior

80
00:01:38,230 --> 00:01:38,240
improving its behavior
 

81
00:01:38,240 --> 00:01:41,270
improving its behavior
and writing system software that um it

82
00:01:41,270 --> 00:01:41,280
and writing system software that um it
 

83
00:01:41,280 --> 00:01:43,109
and writing system software that um it
uses the operating system

84
00:01:43,109 --> 00:01:43,119
uses the operating system
 

85
00:01:43,119 --> 00:01:46,550
uses the operating system
interfaces if it works an application

86
00:01:46,550 --> 00:01:46,560
interfaces if it works an application
 

87
00:01:46,560 --> 00:01:48,550
interfaces if it works an application
so um so this is what you're going to be

88
00:01:48,550 --> 00:01:48,560
so um so this is what you're going to be
 

89
00:01:48,560 --> 00:01:52,870
so um so this is what you're going to be
doing in the course

90
00:01:52,870 --> 00:01:52,880

 

91
00:01:52,880 --> 00:01:55,350

we're also interested in what the

92
00:01:55,350 --> 00:01:55,360
we're also interested in what the
 

93
00:01:55,360 --> 00:01:56,950
we're also interested in what the
purpose of the operating system itself

94
00:01:56,950 --> 00:01:56,960
purpose of the operating system itself
 

95
00:01:56,960 --> 00:02:00,870
purpose of the operating system itself
is as well as of the course

96
00:02:00,870 --> 00:02:00,880

 

97
00:02:00,880 --> 00:02:03,749

so for that i have a sort of list of a

98
00:02:03,749 --> 00:02:03,759
so for that i have a sort of list of a
 

99
00:02:03,759 --> 00:02:05,510
so for that i have a sort of list of a
couple of things which

100
00:02:05,510 --> 00:02:05,520
couple of things which
 

101
00:02:05,520 --> 00:02:07,910
couple of things which
um you know there's lots of operating

102
00:02:07,910 --> 00:02:07,920
um you know there's lots of operating
 

103
00:02:07,920 --> 00:02:08,550
um you know there's lots of operating
system

104
00:02:08,550 --> 00:02:08,560
system
 

105
00:02:08,560 --> 00:02:10,630
system
different operating systems out there

106
00:02:10,630 --> 00:02:10,640
different operating systems out there
 

107
00:02:10,640 --> 00:02:12,710
different operating systems out there
they typically have a common set of

108
00:02:12,710 --> 00:02:12,720
they typically have a common set of
 

109
00:02:12,720 --> 00:02:16,150
they typically have a common set of
purposes

110
00:02:16,150 --> 00:02:16,160

 

111
00:02:16,160 --> 00:02:21,510

one of them is to abstract the hardware

112
00:02:21,510 --> 00:02:21,520
one of them is to abstract the hardware
 

113
00:02:21,520 --> 00:02:23,670
one of them is to abstract the hardware
um that is you know what you're given

114
00:02:23,670 --> 00:02:23,680
um that is you know what you're given
 

115
00:02:23,680 --> 00:02:25,350
um that is you know what you're given
typically as a kind of starting point is

116
00:02:25,350 --> 00:02:25,360
typically as a kind of starting point is
 

117
00:02:25,360 --> 00:02:27,030
typically as a kind of starting point is
you buy a computer a computer as a cpu

118
00:02:27,030 --> 00:02:27,040
you buy a computer a computer as a cpu
 

119
00:02:27,040 --> 00:02:27,910
you buy a computer a computer as a cpu
in memory

120
00:02:27,910 --> 00:02:27,920
in memory
 

121
00:02:27,920 --> 00:02:30,949
in memory
but that's a very low level uh set of

122
00:02:30,949 --> 00:02:30,959
but that's a very low level uh set of
 

123
00:02:30,959 --> 00:02:31,750
but that's a very low level uh set of
resources

124
00:02:31,750 --> 00:02:31,760
resources
 

125
00:02:31,760 --> 00:02:33,750
resources
it's fantastic to have much higher level

126
00:02:33,750 --> 00:02:33,760
it's fantastic to have much higher level
 

127
00:02:33,760 --> 00:02:35,990
it's fantastic to have much higher level
um interfaces and abstractions that

128
00:02:35,990 --> 00:02:36,000
um interfaces and abstractions that
 

129
00:02:36,000 --> 00:02:38,070
um interfaces and abstractions that
applications can use

130
00:02:38,070 --> 00:02:38,080
applications can use
 

131
00:02:38,080 --> 00:02:41,030
applications can use
such as processes or file systems both

132
00:02:41,030 --> 00:02:41,040
such as processes or file systems both
 

133
00:02:41,040 --> 00:02:41,910
such as processes or file systems both
for convenience

134
00:02:41,910 --> 00:02:41,920
for convenience
 

135
00:02:41,920 --> 00:02:44,949
for convenience
and for portability another very

136
00:02:44,949 --> 00:02:44,959
and for portability another very
 

137
00:02:44,959 --> 00:02:46,229
and for portability another very
important

138
00:02:46,229 --> 00:02:46,239
important
 

139
00:02:46,239 --> 00:02:48,150
important
task of an operating system is to

140
00:02:48,150 --> 00:02:48,160
task of an operating system is to
 

141
00:02:48,160 --> 00:02:50,150
task of an operating system is to
multiplex the hardware

142
00:02:50,150 --> 00:02:50,160
multiplex the hardware
 

143
00:02:50,160 --> 00:02:53,030
multiplex the hardware
among many applications you might be

144
00:02:53,030 --> 00:02:53,040
among many applications you might be
 

145
00:02:53,040 --> 00:02:53,589
among many applications you might be
running

146
00:02:53,589 --> 00:02:53,599
running
 

147
00:02:53,599 --> 00:02:57,190
running
a text editor and a compiler or

148
00:02:57,190 --> 00:02:57,200
a text editor and a compiler or
 

149
00:02:57,200 --> 00:03:00,550
a text editor and a compiler or
maybe multiple different database

150
00:03:00,550 --> 00:03:00,560
maybe multiple different database
 

151
00:03:00,560 --> 00:03:01,910
maybe multiple different database
servers or something on your operating

152
00:03:01,910 --> 00:03:01,920
servers or something on your operating
 

153
00:03:01,920 --> 00:03:02,390
servers or something on your operating
system

154
00:03:02,390 --> 00:03:02,400
system
 

155
00:03:02,400 --> 00:03:03,910
system
it's fantastic to be able to have the

156
00:03:03,910 --> 00:03:03,920
it's fantastic to be able to have the
 

157
00:03:03,920 --> 00:03:05,750
it's fantastic to be able to have the
operating system run both of them at the

158
00:03:05,750 --> 00:03:05,760
operating system run both of them at the
 

159
00:03:05,760 --> 00:03:07,750
operating system run both of them at the
same time or all the things are going on

160
00:03:07,750 --> 00:03:07,760
same time or all the things are going on
 

161
00:03:07,760 --> 00:03:08,710
same time or all the things are going on
at the same time

162
00:03:08,710 --> 00:03:08,720
at the same time
 

163
00:03:08,720 --> 00:03:11,670
at the same time
without having them interfere that's

164
00:03:11,670 --> 00:03:11,680
without having them interfere that's
 

165
00:03:11,680 --> 00:03:13,910
without having them interfere that's
often called multiplexing

166
00:03:13,910 --> 00:03:13,920
often called multiplexing
 

167
00:03:13,920 --> 00:03:16,309
often called multiplexing
um because there may be a lot of things

168
00:03:16,309 --> 00:03:16,319
um because there may be a lot of things
 

169
00:03:16,319 --> 00:03:17,670
um because there may be a lot of things
happening on the operating system at the

170
00:03:17,670 --> 00:03:17,680
happening on the operating system at the
 

171
00:03:17,680 --> 00:03:19,270
happening on the operating system at the
same time it's it's critical that they

172
00:03:19,270 --> 00:03:19,280
same time it's it's critical that they
 

173
00:03:19,280 --> 00:03:20,550
same time it's it's critical that they
not interfere

174
00:03:20,550 --> 00:03:20,560
not interfere
 

175
00:03:20,560 --> 00:03:23,509
not interfere
unintentionally even if they have bugs

176
00:03:23,509 --> 00:03:23,519
unintentionally even if they have bugs
 

177
00:03:23,519 --> 00:03:24,470
unintentionally even if they have bugs
and that's

178
00:03:24,470 --> 00:03:24,480
and that's
 

179
00:03:24,480 --> 00:03:30,229
and that's
a task is called isolation the idea that

180
00:03:30,229 --> 00:03:30,239

 

181
00:03:30,239 --> 00:03:31,910

different activities should not be

182
00:03:31,910 --> 00:03:31,920
different activities should not be
 

183
00:03:31,920 --> 00:03:33,509
different activities should not be
allowed to interfere on the other hand

184
00:03:33,509 --> 00:03:33,519
allowed to interfere on the other hand
 

185
00:03:33,519 --> 00:03:35,030
allowed to interfere on the other hand
there are times when

186
00:03:35,030 --> 00:03:35,040
there are times when
 

187
00:03:35,040 --> 00:03:36,390
there are times when
different activities would like to

188
00:03:36,390 --> 00:03:36,400
different activities would like to
 

189
00:03:36,400 --> 00:03:38,149
different activities would like to
interfere we'd like to interact or

190
00:03:38,149 --> 00:03:38,159
interfere we'd like to interact or
 

191
00:03:38,159 --> 00:03:39,190
interfere we'd like to interact or
cooperate so

192
00:03:39,190 --> 00:03:39,200
cooperate so
 

193
00:03:39,200 --> 00:03:41,190
cooperate so
for example if i create a file with a

194
00:03:41,190 --> 00:03:41,200
for example if i create a file with a
 

195
00:03:41,200 --> 00:03:42,229
for example if i create a file with a
text editor

196
00:03:42,229 --> 00:03:42,239
text editor
 

197
00:03:42,239 --> 00:03:43,830
text editor
and i'd like my compiler to read the

198
00:03:43,830 --> 00:03:43,840
and i'd like my compiler to read the
 

199
00:03:43,840 --> 00:03:46,550
and i'd like my compiler to read the
file we definitely want to allow that

200
00:03:46,550 --> 00:03:46,560
file we definitely want to allow that
 

201
00:03:46,560 --> 00:03:48,070
file we definitely want to allow that
kind of sharing

202
00:03:48,070 --> 00:03:48,080
kind of sharing
 

203
00:03:48,080 --> 00:03:51,350
kind of sharing
so we want to allow sharing when it's

204
00:03:51,350 --> 00:03:51,360
so we want to allow sharing when it's
 

205
00:03:51,360 --> 00:03:55,670
so we want to allow sharing when it's
sort of what the user has in mind um

206
00:03:55,670 --> 00:03:55,680
sort of what the user has in mind um
 

207
00:03:55,680 --> 00:03:58,229
sort of what the user has in mind um
but in many circumstances the user

208
00:03:58,229 --> 00:03:58,239
but in many circumstances the user
 

209
00:03:58,239 --> 00:03:59,670
but in many circumstances the user
doesn't want sharing maybe you're logged

210
00:03:59,670 --> 00:03:59,680
doesn't want sharing maybe you're logged
 

211
00:03:59,680 --> 00:03:59,990
doesn't want sharing maybe you're logged
into

212
00:03:59,990 --> 00:04:00,000
into
 

213
00:04:00,000 --> 00:04:02,470
into
a time sharing machine like athena and

214
00:04:02,470 --> 00:04:02,480
a time sharing machine like athena and
 

215
00:04:02,480 --> 00:04:03,830
a time sharing machine like athena and
you don't want other people to read your

216
00:04:03,830 --> 00:04:03,840
you don't want other people to read your
 

217
00:04:03,840 --> 00:04:04,869
you don't want other people to read your
files

218
00:04:04,869 --> 00:04:04,879
files
 

219
00:04:04,879 --> 00:04:06,390
files
so we also need as well as sharing we

220
00:04:06,390 --> 00:04:06,400
so we also need as well as sharing we
 

221
00:04:06,400 --> 00:04:09,670
so we also need as well as sharing we
want to not share when we don't want to

222
00:04:09,670 --> 00:04:09,680
want to not share when we don't want to
 

223
00:04:09,680 --> 00:04:11,670
want to not share when we don't want to
which we could call security or a

224
00:04:11,670 --> 00:04:11,680
which we could call security or a
 

225
00:04:11,680 --> 00:04:13,030
which we could call security or a
permission system

226
00:04:13,030 --> 00:04:13,040
permission system
 

227
00:04:13,040 --> 00:04:16,629
permission system
or an access control system

228
00:04:16,629 --> 00:04:16,639

 

229
00:04:16,639 --> 00:04:17,990

another thing that people value in

230
00:04:17,990 --> 00:04:18,000
another thing that people value in
 

231
00:04:18,000 --> 00:04:19,909
another thing that people value in
operating systems is if you spend a lot

232
00:04:19,909 --> 00:04:19,919
operating systems is if you spend a lot
 

233
00:04:19,919 --> 00:04:21,749
operating systems is if you spend a lot
of money on hardware on a computer

234
00:04:21,749 --> 00:04:21,759
of money on hardware on a computer
 

235
00:04:21,759 --> 00:04:23,350
of money on hardware on a computer
you'd like your application to be able

236
00:04:23,350 --> 00:04:23,360
you'd like your application to be able
 

237
00:04:23,360 --> 00:04:25,670
you'd like your application to be able
to get the sort of full performance

238
00:04:25,670 --> 00:04:25,680
to get the sort of full performance
 

239
00:04:25,680 --> 00:04:27,830
to get the sort of full performance
that the hardware ought to be able to

240
00:04:27,830 --> 00:04:27,840
that the hardware ought to be able to
 

241
00:04:27,840 --> 00:04:29,590
that the hardware ought to be able to
provide

242
00:04:29,590 --> 00:04:29,600
provide
 

243
00:04:29,600 --> 00:04:31,430
provide
and you know a lot of that is just

244
00:04:31,430 --> 00:04:31,440
and you know a lot of that is just
 

245
00:04:31,440 --> 00:04:34,070
and you know a lot of that is just
application programming

246
00:04:34,070 --> 00:04:34,080
application programming
 

247
00:04:34,080 --> 00:04:36,469
application programming
but inevitably unfortunately some of it

248
00:04:36,469 --> 00:04:36,479
but inevitably unfortunately some of it
 

249
00:04:36,479 --> 00:04:38,469
but inevitably unfortunately some of it
is the operating system has to make sure

250
00:04:38,469 --> 00:04:38,479
is the operating system has to make sure
 

251
00:04:38,479 --> 00:04:38,950
is the operating system has to make sure
that

252
00:04:38,950 --> 00:04:38,960
that
 

253
00:04:38,960 --> 00:04:42,710
that
whatever services it provides

254
00:04:42,710 --> 00:04:42,720
whatever services it provides
 

255
00:04:42,720 --> 00:04:44,629
whatever services it provides
don't get in the way of applications

256
00:04:44,629 --> 00:04:44,639
don't get in the way of applications
 

257
00:04:44,639 --> 00:04:46,150
don't get in the way of applications
getting high performance

258
00:04:46,150 --> 00:04:46,160
getting high performance
 

259
00:04:46,160 --> 00:04:47,749
getting high performance
so you want to at least not get in the

260
00:04:47,749 --> 00:04:47,759
so you want to at least not get in the
 

261
00:04:47,759 --> 00:04:49,830
so you want to at least not get in the
way and maybe even help

262
00:04:49,830 --> 00:04:49,840
way and maybe even help
 

263
00:04:49,840 --> 00:04:56,710
way and maybe even help
applications achieve good performance

264
00:04:56,710 --> 00:04:56,720
applications achieve good performance
 

265
00:04:56,720 --> 00:05:00,870
applications achieve good performance
finally with most operating systems

266
00:05:00,870 --> 00:05:00,880
finally with most operating systems
 

267
00:05:00,880 --> 00:05:02,150
finally with most operating systems
have to support a wide range of

268
00:05:02,150 --> 00:05:02,160
have to support a wide range of
 

269
00:05:02,160 --> 00:05:03,510
have to support a wide range of
different applications maybe it's a

270
00:05:03,510 --> 00:05:03,520
different applications maybe it's a
 

271
00:05:03,520 --> 00:05:04,230
different applications maybe it's a
laptop

272
00:05:04,230 --> 00:05:04,240
laptop
 

273
00:05:04,240 --> 00:05:06,710
laptop
running a text editor maybe it's running

274
00:05:06,710 --> 00:05:06,720
running a text editor maybe it's running
 

275
00:05:06,720 --> 00:05:07,749
running a text editor maybe it's running
games

276
00:05:07,749 --> 00:05:07,759
games
 

277
00:05:07,759 --> 00:05:09,350
games
maybe your operating system needs to

278
00:05:09,350 --> 00:05:09,360
maybe your operating system needs to
 

279
00:05:09,360 --> 00:05:11,590
maybe your operating system needs to
support database servers or

280
00:05:11,590 --> 00:05:11,600
support database servers or
 

281
00:05:11,600 --> 00:05:14,150
support database servers or
cloud computation and usually because

282
00:05:14,150 --> 00:05:14,160
cloud computation and usually because
 

283
00:05:14,160 --> 00:05:15,670
cloud computation and usually because
operating systems are

284
00:05:15,670 --> 00:05:15,680
operating systems are
 

285
00:05:15,680 --> 00:05:18,790
operating systems are
quite expensive to design and build

286
00:05:18,790 --> 00:05:18,800
quite expensive to design and build
 

287
00:05:18,800 --> 00:05:20,230
quite expensive to design and build
people use the same operating systems

288
00:05:20,230 --> 00:05:20,240
people use the same operating systems
 

289
00:05:20,240 --> 00:05:22,310
people use the same operating systems
for many different tasks like linux for

290
00:05:22,310 --> 00:05:22,320
for many different tasks like linux for
 

291
00:05:22,320 --> 00:05:22,950
for many different tasks like linux for
example which

292
00:05:22,950 --> 00:05:22,960
example which
 

293
00:05:22,960 --> 00:05:25,189
example which
i'm sure many of you are running is used

294
00:05:25,189 --> 00:05:25,199
i'm sure many of you are running is used
 

295
00:05:25,199 --> 00:05:27,110
i'm sure many of you are running is used
in all of the situations i mentioned so

296
00:05:27,110 --> 00:05:27,120
in all of the situations i mentioned so
 

297
00:05:27,120 --> 00:05:28,469
in all of the situations i mentioned so
the same operating system really has to

298
00:05:28,469 --> 00:05:28,479
the same operating system really has to
 

299
00:05:28,479 --> 00:05:29,670
the same operating system really has to
be able to support

300
00:05:29,670 --> 00:05:29,680
be able to support
 

301
00:05:29,680 --> 00:05:36,790
be able to support
a range of often quite different uses

302
00:05:36,790 --> 00:05:36,800

 

303
00:05:36,800 --> 00:05:39,749

so we're hoping to be able to support um

304
00:05:39,749 --> 00:05:39,759
so we're hoping to be able to support um
 

305
00:05:39,759 --> 00:05:41,110
so we're hoping to be able to support um
sort of all these different goals

306
00:05:41,110 --> 00:05:41,120
sort of all these different goals
 

307
00:05:41,120 --> 00:05:44,629
sort of all these different goals
uh simultaneously um and we'll hear more

308
00:05:44,629 --> 00:05:44,639
uh simultaneously um and we'll hear more
 

309
00:05:44,639 --> 00:05:45,510
uh simultaneously um and we'll hear more
about all of them

310
00:05:45,510 --> 00:05:45,520
about all of them
 

311
00:05:45,520 --> 00:05:48,950
about all of them
during the course all right uh operating

312
00:05:48,950 --> 00:05:48,960
during the course all right uh operating
 

313
00:05:48,960 --> 00:05:49,670
during the course all right uh operating
systems

314
00:05:49,670 --> 00:05:49,680
systems
 

315
00:05:49,680 --> 00:05:53,110
systems
uh sort of people worked out a set of um

316
00:05:53,110 --> 00:05:53,120
uh sort of people worked out a set of um
 

317
00:05:53,120 --> 00:05:56,070
uh sort of people worked out a set of um
design ideas over the decades that have

318
00:05:56,070 --> 00:05:56,080
design ideas over the decades that have
 

319
00:05:56,080 --> 00:05:57,189
design ideas over the decades that have
worked pretty well

320
00:05:57,189 --> 00:05:57,199
worked pretty well
 

321
00:05:57,199 --> 00:06:00,070
worked pretty well
sort of ways of organizing things and

322
00:06:00,070 --> 00:06:00,080
sort of ways of organizing things and
 

323
00:06:00,080 --> 00:06:04,830
sort of ways of organizing things and
i'm going to lay out for you the sort of

324
00:06:04,830 --> 00:06:04,840

 

325
00:06:04,840 --> 00:06:06,150

classic

326
00:06:06,150 --> 00:06:06,160
classic
 

327
00:06:06,160 --> 00:06:08,550
classic
organization it's a sort of standard

328
00:06:08,550 --> 00:06:08,560
organization it's a sort of standard
 

329
00:06:08,560 --> 00:06:09,270
organization it's a sort of standard
deal for

330
00:06:09,270 --> 00:06:09,280
deal for
 

331
00:06:09,280 --> 00:06:13,350
deal for
uh for this course and

332
00:06:13,350 --> 00:06:13,360
uh for this course and
 

333
00:06:13,360 --> 00:06:16,230
uh for this course and
um is actually quite common around for

334
00:06:16,230 --> 00:06:16,240
um is actually quite common around for
 

335
00:06:16,240 --> 00:06:17,749
um is actually quite common around for
many operating systems so this is sort

336
00:06:17,749 --> 00:06:17,759
many operating systems so this is sort
 

337
00:06:17,759 --> 00:06:18,150
many operating systems so this is sort
of

338
00:06:18,150 --> 00:06:18,160
of
 

339
00:06:18,160 --> 00:06:21,830
of
you know os internal organization or

340
00:06:21,830 --> 00:06:21,840
you know os internal organization or
 

341
00:06:21,840 --> 00:06:25,189
you know os internal organization or
um the way i think about it is a

342
00:06:25,189 --> 00:06:25,199
um the way i think about it is a
 

343
00:06:25,199 --> 00:06:28,230
um the way i think about it is a
in terms of a draw a box for the

344
00:06:28,230 --> 00:06:28,240
in terms of a draw a box for the
 

345
00:06:28,240 --> 00:06:29,110
in terms of a draw a box for the
computer

346
00:06:29,110 --> 00:06:29,120
computer
 

347
00:06:29,120 --> 00:06:32,150
computer
um the computer sort of

348
00:06:32,150 --> 00:06:32,160
um the computer sort of
 

349
00:06:32,160 --> 00:06:33,749
um the computer sort of
comes with a bunch of hardware resources

350
00:06:33,749 --> 00:06:33,759
comes with a bunch of hardware resources
 

351
00:06:33,759 --> 00:06:34,950
comes with a bunch of hardware resources
which i'll put at the bottom maybe

352
00:06:34,950 --> 00:06:34,960
which i'll put at the bottom maybe
 

353
00:06:34,960 --> 00:06:35,909
which i'll put at the bottom maybe
there's cpu

354
00:06:35,909 --> 00:06:35,919
there's cpu
 

355
00:06:35,919 --> 00:06:39,270
there's cpu
and ram and a disk for storage

356
00:06:39,270 --> 00:06:39,280
and ram and a disk for storage
 

357
00:06:39,280 --> 00:06:42,230
and ram and a disk for storage
and maybe a network interface so this

358
00:06:42,230 --> 00:06:42,240
and maybe a network interface so this
 

359
00:06:42,240 --> 00:06:43,510
and maybe a network interface so this
sort of hardware that's

360
00:06:43,510 --> 00:06:43,520
sort of hardware that's
 

361
00:06:43,520 --> 00:06:47,350
sort of hardware that's
the lowest layer um so if at the top

362
00:06:47,350 --> 00:06:47,360
the lowest layer um so if at the top
 

363
00:06:47,360 --> 00:06:49,589
the lowest layer um so if at the top
we want to run various applications

364
00:06:49,589 --> 00:06:49,599
we want to run various applications
 

365
00:06:49,599 --> 00:06:51,670
we want to run various applications
maybe a text editor i happen to use

366
00:06:51,670 --> 00:06:51,680
maybe a text editor i happen to use
 

367
00:06:51,680 --> 00:06:53,909
maybe a text editor i happen to use
vi as a text editor if you're going to

368
00:06:53,909 --> 00:06:53,919
vi as a text editor if you're going to
 

369
00:06:53,919 --> 00:06:55,350
vi as a text editor if you're going to
run a c compiler

370
00:06:55,350 --> 00:06:55,360
run a c compiler
 

371
00:06:55,360 --> 00:06:58,469
run a c compiler
say cc you know if you run lots of other

372
00:06:58,469 --> 00:06:58,479
say cc you know if you run lots of other
 

373
00:06:58,479 --> 00:06:59,830
say cc you know if you run lots of other
things we're going to talk a lot today

374
00:06:59,830 --> 00:06:59,840
things we're going to talk a lot today
 

375
00:06:59,840 --> 00:07:02,870
things we're going to talk a lot today
about the shell which is the

376
00:07:02,870 --> 00:07:02,880
about the shell which is the
 

377
00:07:02,880 --> 00:07:04,870
about the shell which is the
command line interface so we have all

378
00:07:04,870 --> 00:07:04,880
command line interface so we have all
 

379
00:07:04,880 --> 00:07:05,830
command line interface so we have all
these different programs that are

380
00:07:05,830 --> 00:07:05,840
these different programs that are
 

381
00:07:05,840 --> 00:07:07,749
these different programs that are
running

382
00:07:07,749 --> 00:07:07,759
running
 

383
00:07:07,759 --> 00:07:10,550
running
and this is the sort of world in which

384
00:07:10,550 --> 00:07:10,560
and this is the sort of world in which
 

385
00:07:10,560 --> 00:07:12,390
and this is the sort of world in which
applications run is usually called user

386
00:07:12,390 --> 00:07:12,400
applications run is usually called user
 

387
00:07:12,400 --> 00:07:14,550
applications run is usually called user
space

388
00:07:14,550 --> 00:07:14,560
space
 

389
00:07:14,560 --> 00:07:16,870
space
and as distinct from that there's a

390
00:07:16,870 --> 00:07:16,880
and as distinct from that there's a
 

391
00:07:16,880 --> 00:07:19,430
and as distinct from that there's a
single program

392
00:07:19,430 --> 00:07:19,440
single program
 

393
00:07:19,440 --> 00:07:21,270
single program
um a special program that's always

394
00:07:21,270 --> 00:07:21,280
um a special program that's always
 

395
00:07:21,280 --> 00:07:23,749
um a special program that's always
running called the kernel and the kernel

396
00:07:23,749 --> 00:07:23,759
running called the kernel and the kernel
 

397
00:07:23,759 --> 00:07:24,629
running called the kernel and the kernel
is sort of the

398
00:07:24,629 --> 00:07:24,639
is sort of the
 

399
00:07:24,639 --> 00:07:26,469
is sort of the
guardian of the resources of the

400
00:07:26,469 --> 00:07:26,479
guardian of the resources of the
 

401
00:07:26,479 --> 00:07:27,990
guardian of the resources of the
computer it's what first

402
00:07:27,990 --> 00:07:28,000
computer it's what first
 

403
00:07:28,000 --> 00:07:30,629
computer it's what first
boots up you turn on the computer

404
00:07:30,629 --> 00:07:30,639
boots up you turn on the computer
 

405
00:07:30,639 --> 00:07:33,589
boots up you turn on the computer
there's just one of it it maintains data

406
00:07:33,589 --> 00:07:33,599
there's just one of it it maintains data
 

407
00:07:33,599 --> 00:07:35,589
there's just one of it it maintains data
to help it manage each of these

408
00:07:35,589 --> 00:07:35,599
to help it manage each of these
 

409
00:07:35,599 --> 00:07:37,350
to help it manage each of these
processes and the kernel also maintains

410
00:07:37,350 --> 00:07:37,360
processes and the kernel also maintains
 

411
00:07:37,360 --> 00:07:40,070
processes and the kernel also maintains
lots of data structures to help it

412
00:07:40,070 --> 00:07:40,080
lots of data structures to help it
 

413
00:07:40,080 --> 00:07:43,350
lots of data structures to help it
interface and all the different kinds of

414
00:07:43,350 --> 00:07:43,360
interface and all the different kinds of
 

415
00:07:43,360 --> 00:07:45,029
interface and all the different kinds of
hardware that

416
00:07:45,029 --> 00:07:45,039
hardware that
 

417
00:07:45,039 --> 00:07:49,350
hardware that
uh these user programs need to use

418
00:07:49,350 --> 00:07:49,360
uh these user programs need to use
 

419
00:07:49,360 --> 00:07:51,350
uh these user programs need to use
the kernel also has built in a bunch of

420
00:07:51,350 --> 00:07:51,360
the kernel also has built in a bunch of
 

421
00:07:51,360 --> 00:07:53,510
the kernel also has built in a bunch of
services um

422
00:07:53,510 --> 00:07:53,520
services um
 

423
00:07:53,520 --> 00:07:55,990
services um
and so for example there's typically a

424
00:07:55,990 --> 00:07:56,000
and so for example there's typically a
 

425
00:07:56,000 --> 00:07:59,189
and so for example there's typically a
file system implementation inside the

426
00:07:59,189 --> 00:07:59,199
file system implementation inside the
 

427
00:07:59,199 --> 00:08:00,070
file system implementation inside the
kernel that

428
00:08:00,070 --> 00:08:00,080
kernel that
 

429
00:08:00,080 --> 00:08:02,710
kernel that
implements things like file names and

430
00:08:02,710 --> 00:08:02,720
implements things like file names and
 

431
00:08:02,720 --> 00:08:03,670
implements things like file names and
file contents

432
00:08:03,670 --> 00:08:03,680
file contents
 

433
00:08:03,680 --> 00:08:06,469
file contents
and directories and understands how to

434
00:08:06,469 --> 00:08:06,479
and directories and understands how to
 

435
00:08:06,479 --> 00:08:06,950
and directories and understands how to
store

436
00:08:06,950 --> 00:08:06,960
store
 

437
00:08:06,960 --> 00:08:08,869
store
the files in the disk so your programs

438
00:08:08,869 --> 00:08:08,879
the files in the disk so your programs
 

439
00:08:08,879 --> 00:08:10,309
the files in the disk so your programs
are going to talk to the files inside

440
00:08:10,309 --> 00:08:10,319
are going to talk to the files inside
 

441
00:08:10,319 --> 00:08:11,990
are going to talk to the files inside
the kernel and the file system

442
00:08:11,990 --> 00:08:12,000
the kernel and the file system
 

443
00:08:12,000 --> 00:08:13,430
the kernel and the file system
implementation is going to

444
00:08:13,430 --> 00:08:13,440
implementation is going to
 

445
00:08:13,440 --> 00:08:17,749
implementation is going to
talk to the disk and in this course

446
00:08:17,749 --> 00:08:17,759
talk to the disk and in this course
 

447
00:08:17,759 --> 00:08:19,830
talk to the disk and in this course
what we mostly focus on is all the

448
00:08:19,830 --> 00:08:19,840
what we mostly focus on is all the
 

449
00:08:19,840 --> 00:08:21,350
what we mostly focus on is all the
things that have to happen inside the

450
00:08:21,350 --> 00:08:21,360
things that have to happen inside the
 

451
00:08:21,360 --> 00:08:22,469
things that have to happen inside the
kernel

452
00:08:22,469 --> 00:08:22,479
kernel
 

453
00:08:22,479 --> 00:08:24,550
kernel
and on the interfaces between user

454
00:08:24,550 --> 00:08:24,560
and on the interfaces between user
 

455
00:08:24,560 --> 00:08:27,430
and on the interfaces between user
programs and the kernel

456
00:08:27,430 --> 00:08:27,440
programs and the kernel
 

457
00:08:27,440 --> 00:08:29,189
programs and the kernel
as well as the sort of structure of the

458
00:08:29,189 --> 00:08:29,199
as well as the sort of structure of the
 

459
00:08:29,199 --> 00:08:30,550
as well as the sort of structure of the
software

460
00:08:30,550 --> 00:08:30,560
software
 

461
00:08:30,560 --> 00:08:34,230
software
inside the kernel so we care a lot about

462
00:08:34,230 --> 00:08:34,240
inside the kernel so we care a lot about
 

463
00:08:34,240 --> 00:08:34,949
inside the kernel so we care a lot about
these

464
00:08:34,949 --> 00:08:34,959
these
 

465
00:08:34,959 --> 00:08:37,230
these
services inside the kernel

466
00:08:37,230 --> 00:08:37,240
services inside the kernel
 

467
00:08:37,240 --> 00:08:38,469
services inside the kernel
[Music]

468
00:08:38,469 --> 00:08:38,479
[Music]
 

469
00:08:38,479 --> 00:08:39,829
[Music]
one of them is the file system i

470
00:08:39,829 --> 00:08:39,839
one of them is the file system i
 

471
00:08:39,839 --> 00:08:43,029
one of them is the file system i
mentioned there's also uh

472
00:08:43,029 --> 00:08:43,039
mentioned there's also uh
 

473
00:08:43,039 --> 00:08:44,949
mentioned there's also uh
management of processes each of these

474
00:08:44,949 --> 00:08:44,959
management of processes each of these
 

475
00:08:44,959 --> 00:08:46,230
management of processes each of these
running programs

476
00:08:46,230 --> 00:08:46,240
running programs
 

477
00:08:46,240 --> 00:08:47,829
running programs
is called a process and it has things

478
00:08:47,829 --> 00:08:47,839
is called a process and it has things
 

479
00:08:47,839 --> 00:08:50,070
is called a process and it has things
like its own memory for example

480
00:08:50,070 --> 00:08:50,080
like its own memory for example
 

481
00:08:50,080 --> 00:08:53,590
like its own memory for example
as well as a share of the cpu time

482
00:08:53,590 --> 00:08:53,600
as well as a share of the cpu time
 

483
00:08:53,600 --> 00:08:56,790
as well as a share of the cpu time
so kernel manages

484
00:08:56,790 --> 00:08:56,800
so kernel manages
 

485
00:08:56,800 --> 00:09:00,150
so kernel manages
processes as a kernel service

486
00:09:00,150 --> 00:09:00,160
processes as a kernel service
 

487
00:09:00,160 --> 00:09:01,990
processes as a kernel service
[Music]

488
00:09:01,990 --> 00:09:02,000
[Music]
 

489
00:09:02,000 --> 00:09:05,030
[Music]
the kernel manages the allocation of

490
00:09:05,030 --> 00:09:05,040
the kernel manages the allocation of
 

491
00:09:05,040 --> 00:09:07,030
the kernel manages the allocation of
memory the different processes need

492
00:09:07,030 --> 00:09:07,040
memory the different processes need
 

493
00:09:07,040 --> 00:09:11,110
memory the different processes need
different amounts of memory the kernel

494
00:09:11,110 --> 00:09:11,120

 

495
00:09:11,120 --> 00:09:13,509

multiplexes and divides up the memory

496
00:09:13,509 --> 00:09:13,519
multiplexes and divides up the memory
 

497
00:09:13,519 --> 00:09:16,310
multiplexes and divides up the memory
allocates the memory

498
00:09:16,310 --> 00:09:16,320
allocates the memory
 

499
00:09:16,320 --> 00:09:22,230
allocates the memory
among all the different processes

500
00:09:22,230 --> 00:09:22,240
among all the different processes
 

501
00:09:22,240 --> 00:09:25,670
among all the different processes
um the kernel as i mentioned

502
00:09:25,670 --> 00:09:25,680
um the kernel as i mentioned
 

503
00:09:25,680 --> 00:09:27,030
um the kernel as i mentioned
influenced the file system file system

504
00:09:27,030 --> 00:09:27,040
influenced the file system file system
 

505
00:09:27,040 --> 00:09:28,790
influenced the file system file system
really comes in two or three

506
00:09:28,790 --> 00:09:28,800
really comes in two or three
 

507
00:09:28,800 --> 00:09:31,509
really comes in two or three
logical or a bunch of logical parts but

508
00:09:31,509 --> 00:09:31,519
logical or a bunch of logical parts but
 

509
00:09:31,519 --> 00:09:33,350
logical or a bunch of logical parts but
for now we can think of it in terms of

510
00:09:33,350 --> 00:09:33,360
for now we can think of it in terms of
 

511
00:09:33,360 --> 00:09:35,190
for now we can think of it in terms of
managing file content that's what's

512
00:09:35,190 --> 00:09:35,200
managing file content that's what's
 

513
00:09:35,200 --> 00:09:38,949
managing file content that's what's
inside files figuring out where on disk

514
00:09:38,949 --> 00:09:38,959
inside files figuring out where on disk
 

515
00:09:38,959 --> 00:09:40,870
inside files figuring out where on disk
each file's content ought to live the

516
00:09:40,870 --> 00:09:40,880
each file's content ought to live the
 

517
00:09:40,880 --> 00:09:42,710
each file's content ought to live the
file system also somewhat separately

518
00:09:42,710 --> 00:09:42,720
file system also somewhat separately
 

519
00:09:42,720 --> 00:09:45,030
file system also somewhat separately
manages a name space each file has a

520
00:09:45,030 --> 00:09:45,040
manages a name space each file has a
 

521
00:09:45,040 --> 00:09:45,829
manages a name space each file has a
name

522
00:09:45,829 --> 00:09:45,839
name
 

523
00:09:45,839 --> 00:09:48,870
name
and there's a hierarchy of directories

524
00:09:48,870 --> 00:09:48,880
and there's a hierarchy of directories
 

525
00:09:48,880 --> 00:09:50,470
and there's a hierarchy of directories
every directory has a bunch of files in

526
00:09:50,470 --> 00:09:50,480
every directory has a bunch of files in
 

527
00:09:50,480 --> 00:09:52,230
every directory has a bunch of files in
it all that's managed

528
00:09:52,230 --> 00:09:52,240
it all that's managed
 

529
00:09:52,240 --> 00:09:55,030
it all that's managed
by the file system there's typically

530
00:09:55,030 --> 00:09:55,040
by the file system there's typically
 

531
00:09:55,040 --> 00:09:57,269
by the file system there's typically
some sort of security arrangement

532
00:09:57,269 --> 00:09:57,279
some sort of security arrangement
 

533
00:09:57,279 --> 00:10:01,590
some sort of security arrangement
maybe we'll call it access control

534
00:10:01,590 --> 00:10:01,600

 

535
00:10:01,600 --> 00:10:03,509

by which the colonel decides that you

536
00:10:03,509 --> 00:10:03,519
by which the colonel decides that you
 

537
00:10:03,519 --> 00:10:06,230
by which the colonel decides that you
know when a given process wants to read

538
00:10:06,230 --> 00:10:06,240
know when a given process wants to read
 

539
00:10:06,240 --> 00:10:07,829
know when a given process wants to read
use some resource maybe read something

540
00:10:07,829 --> 00:10:07,839
use some resource maybe read something
 

541
00:10:07,839 --> 00:10:09,430
use some resource maybe read something
from the disk or use some memory

542
00:10:09,430 --> 00:10:09,440
from the disk or use some memory
 

543
00:10:09,440 --> 00:10:11,110
from the disk or use some memory
the access control machinery inside the

544
00:10:11,110 --> 00:10:11,120
the access control machinery inside the
 

545
00:10:11,120 --> 00:10:12,790
the access control machinery inside the
kernel is what gets to decide yes is

546
00:10:12,790 --> 00:10:12,800
kernel is what gets to decide yes is
 

547
00:10:12,800 --> 00:10:14,150
kernel is what gets to decide yes is
that allowed is that not allowed

548
00:10:14,150 --> 00:10:14,160
that allowed is that not allowed
 

549
00:10:14,160 --> 00:10:15,590
that allowed is that not allowed
and that can get pretty complicated if

550
00:10:15,590 --> 00:10:15,600
and that can get pretty complicated if
 

551
00:10:15,600 --> 00:10:17,350
and that can get pretty complicated if
we're talking about time sharing systems

552
00:10:17,350 --> 00:10:17,360
we're talking about time sharing systems
 

553
00:10:17,360 --> 00:10:19,350
we're talking about time sharing systems
like athena systems where there's

554
00:10:19,350 --> 00:10:19,360
like athena systems where there's
 

555
00:10:19,360 --> 00:10:21,190
like athena systems where there's
you know each of these processes may be

556
00:10:21,190 --> 00:10:21,200
you know each of these processes may be
 

557
00:10:21,200 --> 00:10:22,870
you know each of these processes may be
run by a different user and

558
00:10:22,870 --> 00:10:22,880
run by a different user and
 

559
00:10:22,880 --> 00:10:24,870
run by a different user and
have different access control rules

560
00:10:24,870 --> 00:10:24,880
have different access control rules
 

561
00:10:24,880 --> 00:10:26,230
have different access control rules
applied to what it's allowed

562
00:10:26,230 --> 00:10:26,240
applied to what it's allowed
 

563
00:10:26,240 --> 00:10:29,910
applied to what it's allowed
to get at and in a real

564
00:10:29,910 --> 00:10:29,920
to get at and in a real
 

565
00:10:29,920 --> 00:10:31,670
to get at and in a real
full-blown operating system there's

566
00:10:31,670 --> 00:10:31,680
full-blown operating system there's
 

567
00:10:31,680 --> 00:10:33,910
full-blown operating system there's
turns out to be many many other services

568
00:10:33,910 --> 00:10:33,920
turns out to be many many other services
 

569
00:10:33,920 --> 00:10:35,750
turns out to be many many other services
you know there's typically some way for

570
00:10:35,750 --> 00:10:35,760
you know there's typically some way for
 

571
00:10:35,760 --> 00:10:37,269
you know there's typically some way for
different processes to talk to each

572
00:10:37,269 --> 00:10:37,279
different processes to talk to each
 

573
00:10:37,279 --> 00:10:37,590
different processes to talk to each
other

574
00:10:37,590 --> 00:10:37,600
other
 

575
00:10:37,600 --> 00:10:40,230
other
called inter-process communication

576
00:10:40,230 --> 00:10:40,240
called inter-process communication
 

577
00:10:40,240 --> 00:10:41,750
called inter-process communication
there's typically a whole bunch of

578
00:10:41,750 --> 00:10:41,760
there's typically a whole bunch of
 

579
00:10:41,760 --> 00:10:43,509
there's typically a whole bunch of
software associated with the network

580
00:10:43,509 --> 00:10:43,519
software associated with the network
 

581
00:10:43,519 --> 00:10:46,710
software associated with the network
things like the tcp ip protocols for

582
00:10:46,710 --> 00:10:46,720
things like the tcp ip protocols for
 

583
00:10:46,720 --> 00:10:49,910
things like the tcp ip protocols for
talking in the network

584
00:10:49,910 --> 00:10:49,920

 

585
00:10:49,920 --> 00:10:51,590

there's typically support for sound

586
00:10:51,590 --> 00:10:51,600
there's typically support for sound
 

587
00:10:51,600 --> 00:10:53,910
there's typically support for sound
cards there may be drivers for hundreds

588
00:10:53,910 --> 00:10:53,920
cards there may be drivers for hundreds
 

589
00:10:53,920 --> 00:10:55,350
cards there may be drivers for hundreds
of different disks and hundreds of

590
00:10:55,350 --> 00:10:55,360
of different disks and hundreds of
 

591
00:10:55,360 --> 00:10:56,470
of different disks and hundreds of
different network cards

592
00:10:56,470 --> 00:10:56,480
different network cards
 

593
00:10:56,480 --> 00:10:58,069
different network cards
so in a full blown operating system

594
00:10:58,069 --> 00:10:58,079
so in a full blown operating system
 

595
00:10:58,079 --> 00:11:00,230
so in a full blown operating system
there's a huge amount of stuff here and

596
00:11:00,230 --> 00:11:00,240
there's a huge amount of stuff here and
 

597
00:11:00,240 --> 00:11:01,990
there's a huge amount of stuff here and
this may run to millions of lines of

598
00:11:01,990 --> 00:11:02,000
this may run to millions of lines of
 

599
00:11:02,000 --> 00:11:02,790
this may run to millions of lines of
code

600
00:11:02,790 --> 00:11:02,800
code
 

601
00:11:02,800 --> 00:11:06,230
code
inside the kernel

602
00:11:06,230 --> 00:11:06,240

 

603
00:11:06,240 --> 00:11:07,430

so that's sort of a quick overview of

604
00:11:07,430 --> 00:11:07,440
so that's sort of a quick overview of
 

605
00:11:07,440 --> 00:11:09,590
so that's sort of a quick overview of
what's inside the kernel

606
00:11:09,590 --> 00:11:09,600
what's inside the kernel
 

607
00:11:09,600 --> 00:11:11,269
what's inside the kernel
we're also interested in how

608
00:11:11,269 --> 00:11:11,279
we're also interested in how
 

609
00:11:11,279 --> 00:11:13,350
we're also interested in how
applications interact with the kernel

610
00:11:13,350 --> 00:11:13,360
applications interact with the kernel
 

611
00:11:13,360 --> 00:11:19,030
applications interact with the kernel
and what that interface looks like

612
00:11:19,030 --> 00:11:19,040

 

613
00:11:19,040 --> 00:11:22,790

the

614
00:11:22,790 --> 00:11:22,800

 

615
00:11:22,800 --> 00:11:26,630

usual so this is the api

616
00:11:26,630 --> 00:11:26,640
usual so this is the api
 

617
00:11:26,640 --> 00:11:30,550
usual so this is the api
for the kernel

618
00:11:30,550 --> 00:11:30,560

 

619
00:11:30,560 --> 00:11:33,110

how applications get at the kernel

620
00:11:33,110 --> 00:11:33,120
how applications get at the kernel
 

621
00:11:33,120 --> 00:11:34,310
how applications get at the kernel
typically that's done with something

622
00:11:34,310 --> 00:11:34,320
typically that's done with something
 

623
00:11:34,320 --> 00:11:36,069
typically that's done with something
called system calls and these are things

624
00:11:36,069 --> 00:11:36,079
called system calls and these are things
 

625
00:11:36,079 --> 00:11:36,550
called system calls and these are things
that

626
00:11:36,550 --> 00:11:36,560
that
 

627
00:11:36,560 --> 00:11:39,829
that
look like function calls that programs

628
00:11:39,829 --> 00:11:39,839
look like function calls that programs
 

629
00:11:39,839 --> 00:11:41,190
look like function calls that programs
can make

630
00:11:41,190 --> 00:11:41,200
can make
 

631
00:11:41,200 --> 00:11:43,990
can make
but actually jump into the kernel and

632
00:11:43,990 --> 00:11:44,000
but actually jump into the kernel and
 

633
00:11:44,000 --> 00:11:45,110
but actually jump into the kernel and
execute a

634
00:11:45,110 --> 00:11:45,120
execute a
 

635
00:11:45,120 --> 00:11:46,630
execute a
system called implementation in the

636
00:11:46,630 --> 00:11:46,640
system called implementation in the
 

637
00:11:46,640 --> 00:11:48,310
system called implementation in the
kernel i'll talk a

638
00:11:48,310 --> 00:11:48,320
kernel i'll talk a
 

639
00:11:48,320 --> 00:11:49,750
kernel i'll talk a
bunch about that in the latter part of

640
00:11:49,750 --> 00:11:49,760
bunch about that in the latter part of
 

641
00:11:49,760 --> 00:11:52,069
bunch about that in the latter part of
this lecture for now just to give you a

642
00:11:52,069 --> 00:11:52,079
this lecture for now just to give you a
 

643
00:11:52,079 --> 00:11:53,190
this lecture for now just to give you a
flavor here

644
00:11:53,190 --> 00:11:53,200
flavor here
 

645
00:11:53,200 --> 00:11:54,870
flavor here
what a couple of different system calls

646
00:11:54,870 --> 00:11:54,880
what a couple of different system calls
 

647
00:11:54,880 --> 00:11:56,629
what a couple of different system calls
might look like in the source code

648
00:11:56,629 --> 00:11:56,639
might look like in the source code
 

649
00:11:56,639 --> 00:12:00,230
might look like in the source code
of an application

650
00:12:00,230 --> 00:12:00,240

 

651
00:12:00,240 --> 00:12:02,230

one might be that if you want if an

652
00:12:02,230 --> 00:12:02,240
one might be that if you want if an
 

653
00:12:02,240 --> 00:12:04,310
one might be that if you want if an
application wants to open a file

654
00:12:04,310 --> 00:12:04,320
application wants to open a file
 

655
00:12:04,320 --> 00:12:07,350
application wants to open a file
it make it calls the open system call

656
00:12:07,350 --> 00:12:07,360
it make it calls the open system call
 

657
00:12:07,360 --> 00:12:09,350
it make it calls the open system call
and tells the open system called the

658
00:12:09,350 --> 00:12:09,360
and tells the open system called the
 

659
00:12:09,360 --> 00:12:10,629
and tells the open system called the
name of the file

660
00:12:10,629 --> 00:12:10,639
name of the file
 

661
00:12:10,639 --> 00:12:12,710
name of the file
so maybe it wants to open a file for

662
00:12:12,710 --> 00:12:12,720
so maybe it wants to open a file for
 

663
00:12:12,720 --> 00:12:13,829
so maybe it wants to open a file for
writing called

664
00:12:13,829 --> 00:12:13,839
writing called
 

665
00:12:13,839 --> 00:12:15,590
writing called
out and it would be an extra argument

666
00:12:15,590 --> 00:12:15,600
out and it would be an extra argument
 

667
00:12:15,600 --> 00:12:17,670
out and it would be an extra argument
here saying one in this case saying i

668
00:12:17,670 --> 00:12:17,680
here saying one in this case saying i
 

669
00:12:17,680 --> 00:12:18,949
here saying one in this case saying i
want to write that file

670
00:12:18,949 --> 00:12:18,959
want to write that file
 

671
00:12:18,959 --> 00:12:20,629
want to write that file
and so this thing that looks like a

672
00:12:20,629 --> 00:12:20,639
and so this thing that looks like a
 

673
00:12:20,639 --> 00:12:22,550
and so this thing that looks like a
function call

674
00:12:22,550 --> 00:12:22,560
function call
 

675
00:12:22,560 --> 00:12:24,150
function call
if opens the system calls actually

676
00:12:24,150 --> 00:12:24,160
if opens the system calls actually
 

677
00:12:24,160 --> 00:12:26,389
if opens the system calls actually
special code that jumps into the kernel

678
00:12:26,389 --> 00:12:26,399
special code that jumps into the kernel
 

679
00:12:26,399 --> 00:12:27,670
special code that jumps into the kernel
and the kernel can retrieve these

680
00:12:27,670 --> 00:12:27,680
and the kernel can retrieve these
 

681
00:12:27,680 --> 00:12:28,629
and the kernel can retrieve these
arguments

682
00:12:28,629 --> 00:12:28,639
arguments
 

683
00:12:28,639 --> 00:12:30,310
arguments
execute some kernel code that implements

684
00:12:30,310 --> 00:12:30,320
execute some kernel code that implements
 

685
00:12:30,320 --> 00:12:32,310
execute some kernel code that implements
open maybe talks to the disk

686
00:12:32,310 --> 00:12:32,320
open maybe talks to the disk
 

687
00:12:32,320 --> 00:12:34,150
open maybe talks to the disk
and then returns a value and that's this

688
00:12:34,150 --> 00:12:34,160
and then returns a value and that's this
 

689
00:12:34,160 --> 00:12:36,069
and then returns a value and that's this
file descriptor

690
00:12:36,069 --> 00:12:36,079
file descriptor
 

691
00:12:36,079 --> 00:12:39,030
file descriptor
as fd stands for file descriptor which

692
00:12:39,030 --> 00:12:39,040
as fd stands for file descriptor which
 

693
00:12:39,040 --> 00:12:39,430
as fd stands for file descriptor which
is

694
00:12:39,430 --> 00:12:39,440
is
 

695
00:12:39,440 --> 00:12:41,110
is
the program can then use as sort of a

696
00:12:41,110 --> 00:12:41,120
the program can then use as sort of a
 

697
00:12:41,120 --> 00:12:42,629
the program can then use as sort of a
handle to refer

698
00:12:42,629 --> 00:12:42,639
handle to refer
 

699
00:12:42,639 --> 00:12:45,829
handle to refer
to this open file

700
00:12:45,829 --> 00:12:45,839
to this open file
 

701
00:12:45,839 --> 00:12:48,230
to this open file
if you want to write to a file the

702
00:12:48,230 --> 00:12:48,240
if you want to write to a file the
 

703
00:12:48,240 --> 00:12:49,269
if you want to write to a file the
system called

704
00:12:49,269 --> 00:12:49,279
system called
 

705
00:12:49,279 --> 00:12:51,509
system called
to do that is called write you have to

706
00:12:51,509 --> 00:12:51,519
to do that is called write you have to
 

707
00:12:51,519 --> 00:12:53,269
to do that is called write you have to
pass it one of these file descriptors

708
00:12:53,269 --> 00:12:53,279
pass it one of these file descriptors
 

709
00:12:53,279 --> 00:12:55,750
pass it one of these file descriptors
the same as was returned by open

710
00:12:55,750 --> 00:12:55,760
the same as was returned by open
 

711
00:12:55,760 --> 00:12:57,990
the same as was returned by open
um these are now arguments that are

712
00:12:57,990 --> 00:12:58,000
um these are now arguments that are
 

713
00:12:58,000 --> 00:12:59,750
um these are now arguments that are
passed in the system call

714
00:12:59,750 --> 00:12:59,760
passed in the system call
 

715
00:12:59,760 --> 00:13:02,150
passed in the system call
from the program into the kernel you

716
00:13:02,150 --> 00:13:02,160
from the program into the kernel you
 

717
00:13:02,160 --> 00:13:03,829
from the program into the kernel you
give it a pointer

718
00:13:03,829 --> 00:13:03,839
give it a pointer
 

719
00:13:03,839 --> 00:13:06,550
give it a pointer
to a buffer of characters so an easy way

720
00:13:06,550 --> 00:13:06,560
to a buffer of characters so an easy way
 

721
00:13:06,560 --> 00:13:07,430
to a buffer of characters so an easy way
to do that in the c

722
00:13:07,430 --> 00:13:07,440
to do that in the c
 

723
00:13:07,440 --> 00:13:08,710
to do that in the c
programming language which these

724
00:13:08,710 --> 00:13:08,720
programming language which these
 

725
00:13:08,720 --> 00:13:10,710
programming language which these
examples are written by is the double

726
00:13:10,710 --> 00:13:10,720
examples are written by is the double
 

727
00:13:10,720 --> 00:13:12,550
examples are written by is the double
quotes and then

728
00:13:12,550 --> 00:13:12,560
quotes and then
 

729
00:13:12,560 --> 00:13:14,949
quotes and then
the string the bytes of the string this

730
00:13:14,949 --> 00:13:14,959
the string the bytes of the string this
 

731
00:13:14,959 --> 00:13:17,110
the string the bytes of the string this
backslash n is a new line

732
00:13:17,110 --> 00:13:17,120
backslash n is a new line
 

733
00:13:17,120 --> 00:13:18,870
backslash n is a new line
and the third argument is the count of

734
00:13:18,870 --> 00:13:18,880
and the third argument is the count of
 

735
00:13:18,880 --> 00:13:20,870
and the third argument is the count of
characters

736
00:13:20,870 --> 00:13:20,880
characters
 

737
00:13:20,880 --> 00:13:22,389
characters
that you want to write and so this

738
00:13:22,389 --> 00:13:22,399
that you want to write and so this
 

739
00:13:22,399 --> 00:13:24,550
that you want to write and so this
really gets point passed as an address

740
00:13:24,550 --> 00:13:24,560
really gets point passed as an address
 

741
00:13:24,560 --> 00:13:25,750
really gets point passed as an address
in memory

742
00:13:25,750 --> 00:13:25,760
in memory
 

743
00:13:25,760 --> 00:13:27,110
in memory
so you're telling the kernel look please

744
00:13:27,110 --> 00:13:27,120
so you're telling the kernel look please
 

745
00:13:27,120 --> 00:13:29,509
so you're telling the kernel look please
write six bytes from this address

746
00:13:29,509 --> 00:13:29,519
write six bytes from this address
 

747
00:13:29,519 --> 00:13:31,670
write six bytes from this address
to the file that this file descriptor

748
00:13:31,670 --> 00:13:31,680
to the file that this file descriptor
 

749
00:13:31,680 --> 00:13:34,230
to the file that this file descriptor
refers to

750
00:13:34,230 --> 00:13:34,240
refers to
 

751
00:13:34,240 --> 00:13:36,389
refers to
a much more exciting uh system call that

752
00:13:36,389 --> 00:13:36,399
a much more exciting uh system call that
 

753
00:13:36,399 --> 00:13:39,110
a much more exciting uh system call that
you encounter is the fork system call

754
00:13:39,110 --> 00:13:39,120
you encounter is the fork system call
 

755
00:13:39,120 --> 00:13:41,430
you encounter is the fork system call
fork is the system call that creates a

756
00:13:41,430 --> 00:13:41,440
fork is the system call that creates a
 

757
00:13:41,440 --> 00:13:42,550
fork is the system call that creates a
new process

758
00:13:42,550 --> 00:13:42,560
new process
 

759
00:13:42,560 --> 00:13:46,069
new process
um and it returns actually creates a

760
00:13:46,069 --> 00:13:46,079
um and it returns actually creates a
 

761
00:13:46,079 --> 00:13:48,230
um and it returns actually creates a
process that's identical to the caller

762
00:13:48,230 --> 00:13:48,240
process that's identical to the caller
 

763
00:13:48,240 --> 00:13:51,509
process that's identical to the caller
and fork returns the an identifier the

764
00:13:51,509 --> 00:13:51,519
and fork returns the an identifier the
 

765
00:13:51,519 --> 00:13:54,710
and fork returns the an identifier the
process identifier or pid

766
00:13:54,710 --> 00:13:54,720
process identifier or pid
 

767
00:13:54,720 --> 00:13:55,990
process identifier or pid
of the new process it's actually a

768
00:13:55,990 --> 00:13:56,000
of the new process it's actually a
 

769
00:13:56,000 --> 00:13:57,189
of the new process it's actually a
little more complicated than that and

770
00:13:57,189 --> 00:13:57,199
little more complicated than that and
 

771
00:13:57,199 --> 00:13:58,069
little more complicated than that and
we'll

772
00:13:58,069 --> 00:13:58,079
we'll
 

773
00:13:58,079 --> 00:14:01,509
we'll
hear more about this so again these are

774
00:14:01,509 --> 00:14:01,519
hear more about this so again these are
 

775
00:14:01,519 --> 00:14:04,389
hear more about this so again these are
all look like function calls

776
00:14:04,389 --> 00:14:04,399
all look like function calls
 

777
00:14:04,399 --> 00:14:05,829
all look like function calls
but the system calls are special because

778
00:14:05,829 --> 00:14:05,839
but the system calls are special because
 

779
00:14:05,839 --> 00:14:08,310
but the system calls are special because
they jump into the kernel

780
00:14:08,310 --> 00:14:08,320
they jump into the kernel
 

781
00:14:08,320 --> 00:14:15,670
they jump into the kernel
that's just taste i'll see more later

782
00:14:15,670 --> 00:14:15,680

 

783
00:14:15,680 --> 00:14:19,189

well that is a sort of quick overview um

784
00:14:19,189 --> 00:14:19,199
well that is a sort of quick overview um
 

785
00:14:19,199 --> 00:14:22,870
well that is a sort of quick overview um
i want to just mention why i find

786
00:14:22,870 --> 00:14:22,880
i want to just mention why i find
 

787
00:14:22,880 --> 00:14:25,189
i want to just mention why i find
operating the study of operating systems

788
00:14:25,189 --> 00:14:25,199
operating the study of operating systems
 

789
00:14:25,199 --> 00:14:26,389
operating the study of operating systems
to be

790
00:14:26,389 --> 00:14:26,399
to be
 

791
00:14:26,399 --> 00:14:32,629
to be
both challenging and interesting

792
00:14:32,629 --> 00:14:32,639

 

793
00:14:32,639 --> 00:14:36,389

why you know why it's maybe worth

794
00:14:36,389 --> 00:14:36,399

 

795
00:14:36,399 --> 00:14:37,829

intellectually worth taking a course in

796
00:14:37,829 --> 00:14:37,839
intellectually worth taking a course in
 

797
00:14:37,839 --> 00:14:40,550
intellectually worth taking a course in
this area so one reason why it's hard is

798
00:14:40,550 --> 00:14:40,560
this area so one reason why it's hard is
 

799
00:14:40,560 --> 00:14:41,350
this area so one reason why it's hard is
that the

800
00:14:41,350 --> 00:14:41,360
that the
 

801
00:14:41,360 --> 00:14:43,910
that the
environment's unforgiving the

802
00:14:43,910 --> 00:14:43,920
environment's unforgiving the
 

803
00:14:43,920 --> 00:14:45,350
environment's unforgiving the
programming environment inside the

804
00:14:45,350 --> 00:14:45,360
programming environment inside the
 

805
00:14:45,360 --> 00:14:47,110
programming environment inside the
kernel is unforgiving because

806
00:14:47,110 --> 00:14:47,120
kernel is unforgiving because
 

807
00:14:47,120 --> 00:14:50,550
kernel is unforgiving because
you're

808
00:14:50,550 --> 00:14:50,560

 

809
00:14:50,560 --> 00:14:51,829

you're when you're programming when

810
00:14:51,829 --> 00:14:51,839
you're when you're programming when
 

811
00:14:51,839 --> 00:14:53,350
you're when you're programming when
you're modifying the kernel or extending

812
00:14:53,350 --> 00:14:53,360
you're modifying the kernel or extending
 

813
00:14:53,360 --> 00:14:54,790
you're modifying the kernel or extending
the kernel writing a new operating

814
00:14:54,790 --> 00:14:54,800
the kernel writing a new operating
 

815
00:14:54,800 --> 00:14:55,750
the kernel writing a new operating
system kernel

816
00:14:55,750 --> 00:14:55,760
system kernel
 

817
00:14:55,760 --> 00:14:57,750
system kernel
you're providing the infrastructure that

818
00:14:57,750 --> 00:14:57,760
you're providing the infrastructure that
 

819
00:14:57,760 --> 00:14:59,509
you're providing the infrastructure that
everybody else assumes is already

820
00:14:59,509 --> 00:14:59,519
everybody else assumes is already
 

821
00:14:59,519 --> 00:15:01,430
everybody else assumes is already
present to run their programs

822
00:15:01,430 --> 00:15:01,440
present to run their programs
 

823
00:15:01,440 --> 00:15:02,790
present to run their programs
right and everybody else gets an

824
00:15:02,790 --> 00:15:02,800
right and everybody else gets an
 

825
00:15:02,800 --> 00:15:04,150
right and everybody else gets an
operating system under their program

826
00:15:04,150 --> 00:15:04,160
operating system under their program
 

827
00:15:04,160 --> 00:15:05,990
operating system under their program
when they write ordinary application

828
00:15:05,990 --> 00:15:06,000
when they write ordinary application
 

829
00:15:06,000 --> 00:15:07,269
when they write ordinary application
programs but

830
00:15:07,269 --> 00:15:07,279
programs but
 

831
00:15:07,279 --> 00:15:09,189
programs but
when we build operating systems what we

832
00:15:09,189 --> 00:15:09,199
when we build operating systems what we
 

833
00:15:09,199 --> 00:15:11,350
when we build operating systems what we
get is the hardware underneath

834
00:15:11,350 --> 00:15:11,360
get is the hardware underneath
 

835
00:15:11,360 --> 00:15:13,990
get is the hardware underneath
our operating system which turns out to

836
00:15:13,990 --> 00:15:14,000
our operating system which turns out to
 

837
00:15:14,000 --> 00:15:14,470
our operating system which turns out to
be

838
00:15:14,470 --> 00:15:14,480
be
 

839
00:15:14,480 --> 00:15:15,910
be
more difficult to deal with in this

840
00:15:15,910 --> 00:15:15,920
more difficult to deal with in this
 

841
00:15:15,920 --> 00:15:18,389
more difficult to deal with in this
course we

842
00:15:18,389 --> 00:15:18,399
course we
 

843
00:15:18,399 --> 00:15:20,389
course we
we get to use a hardware simulator

844
00:15:20,389 --> 00:15:20,399
we get to use a hardware simulator
 

845
00:15:20,399 --> 00:15:22,710
we get to use a hardware simulator
called qmu

846
00:15:22,710 --> 00:15:22,720
called qmu
 

847
00:15:22,720 --> 00:15:25,350
called qmu
that you know simulates a cpu and a

848
00:15:25,350 --> 00:15:25,360
that you know simulates a cpu and a
 

849
00:15:25,360 --> 00:15:26,790
that you know simulates a cpu and a
computer and that makes life a little

850
00:15:26,790 --> 00:15:26,800
computer and that makes life a little
 

851
00:15:26,800 --> 00:15:27,509
computer and that makes life a little
bit better but

852
00:15:27,509 --> 00:15:27,519
bit better but
 

853
00:15:27,519 --> 00:15:29,829
bit better but
it's it's still a kind of a difficult

854
00:15:29,829 --> 00:15:29,839
it's it's still a kind of a difficult
 

855
00:15:29,839 --> 00:15:32,230
it's it's still a kind of a difficult
environment to program it

856
00:15:32,230 --> 00:15:32,240
environment to program it
 

857
00:15:32,240 --> 00:15:33,430
environment to program it
another reason why it's hard and

858
00:15:33,430 --> 00:15:33,440
another reason why it's hard and
 

859
00:15:33,440 --> 00:15:35,110
another reason why it's hard and
interesting is because if you're

860
00:15:35,110 --> 00:15:35,120
interesting is because if you're
 

861
00:15:35,120 --> 00:15:36,790
interesting is because if you're
designing an operating system you have

862
00:15:36,790 --> 00:15:36,800
designing an operating system you have
 

863
00:15:36,800 --> 00:15:38,829
designing an operating system you have
to satisfy a bunch of

864
00:15:38,829 --> 00:15:38,839
to satisfy a bunch of
 

865
00:15:38,839 --> 00:15:41,350
to satisfy a bunch of
tensions that require real design

866
00:15:41,350 --> 00:15:41,360
tensions that require real design
 

867
00:15:41,360 --> 00:15:41,910
tensions that require real design
thought

868
00:15:41,910 --> 00:15:41,920
thought
 

869
00:15:41,920 --> 00:15:44,389
thought
so one is that you'd like your operating

870
00:15:44,389 --> 00:15:44,399
so one is that you'd like your operating
 

871
00:15:44,399 --> 00:15:47,430
so one is that you'd like your operating
system to be both efficient

872
00:15:47,430 --> 00:15:47,440
system to be both efficient
 

873
00:15:47,440 --> 00:15:49,030
system to be both efficient
which often means that it sort of

874
00:15:49,030 --> 00:15:49,040
which often means that it sort of
 

875
00:15:49,040 --> 00:15:50,629
which often means that it sort of
operates at a low level close to the

876
00:15:50,629 --> 00:15:50,639
operates at a low level close to the
 

877
00:15:50,639 --> 00:15:51,670
operates at a low level close to the
hardware

878
00:15:51,670 --> 00:15:51,680
hardware
 

879
00:15:51,680 --> 00:15:54,310
hardware
but for ease of use and because real

880
00:15:54,310 --> 00:15:54,320
but for ease of use and because real
 

881
00:15:54,320 --> 00:15:56,389
but for ease of use and because real
live people have to write programs

882
00:15:56,389 --> 00:15:56,399
live people have to write programs
 

883
00:15:56,399 --> 00:15:58,310
live people have to write programs
that use your operating system we'd like

884
00:15:58,310 --> 00:15:58,320
that use your operating system we'd like
 

885
00:15:58,320 --> 00:16:00,069
that use your operating system we'd like
it also to be

886
00:16:00,069 --> 00:16:00,079
it also to be
 

887
00:16:00,079 --> 00:16:03,269
it also to be
provide abstract high-level portable

888
00:16:03,269 --> 00:16:03,279
provide abstract high-level portable
 

889
00:16:03,279 --> 00:16:04,069
provide abstract high-level portable
interfaces

890
00:16:04,069 --> 00:16:04,079
interfaces
 

891
00:16:04,079 --> 00:16:05,990
interfaces
and it's a neat trick to provide

892
00:16:05,990 --> 00:16:06,000
and it's a neat trick to provide
 

893
00:16:06,000 --> 00:16:08,230
and it's a neat trick to provide
abstract interfaces that are simple

894
00:16:08,230 --> 00:16:08,240
abstract interfaces that are simple
 

895
00:16:08,240 --> 00:16:10,150
abstract interfaces that are simple
um affordable but that are also

896
00:16:10,150 --> 00:16:10,160
um affordable but that are also
 

897
00:16:10,160 --> 00:16:12,550
um affordable but that are also
efficient

898
00:16:12,550 --> 00:16:12,560
efficient
 

899
00:16:12,560 --> 00:16:14,710
efficient
another tension is that we'd like to

900
00:16:14,710 --> 00:16:14,720
another tension is that we'd like to
 

901
00:16:14,720 --> 00:16:16,870
another tension is that we'd like to
provide a very powerful

902
00:16:16,870 --> 00:16:16,880
provide a very powerful
 

903
00:16:16,880 --> 00:16:18,790
provide a very powerful
operating system services so that the

904
00:16:18,790 --> 00:16:18,800
operating system services so that the
 

905
00:16:18,800 --> 00:16:20,470
operating system services so that the
operating system can shoulder a lot of

906
00:16:20,470 --> 00:16:20,480
operating system can shoulder a lot of
 

907
00:16:20,480 --> 00:16:22,949
operating system can shoulder a lot of
the burden

908
00:16:22,949 --> 00:16:22,959
the burden
 

909
00:16:22,959 --> 00:16:24,790
the burden
of running programs we'd like to

910
00:16:24,790 --> 00:16:24,800
of running programs we'd like to
 

911
00:16:24,800 --> 00:16:26,069
of running programs we'd like to
powerful

912
00:16:26,069 --> 00:16:26,079
powerful
 

913
00:16:26,079 --> 00:16:29,430
powerful
operating system services

914
00:16:29,430 --> 00:16:29,440
operating system services
 

915
00:16:29,440 --> 00:16:31,910
operating system services
but we also want to have simple

916
00:16:31,910 --> 00:16:31,920
but we also want to have simple
 

917
00:16:31,920 --> 00:16:35,110
but we also want to have simple
interfaces

918
00:16:35,110 --> 00:16:35,120

 

919
00:16:35,120 --> 00:16:37,509

that is we don't want tremendously

920
00:16:37,509 --> 00:16:37,519
that is we don't want tremendously
 

921
00:16:37,519 --> 00:16:39,350
that is we don't want tremendously
complex hard to understand interfaces

922
00:16:39,350 --> 00:16:39,360
complex hard to understand interfaces
 

923
00:16:39,360 --> 00:16:41,509
complex hard to understand interfaces
for programmers to use because

924
00:16:41,509 --> 00:16:41,519
for programmers to use because
 

925
00:16:41,519 --> 00:16:42,629
for programmers to use because
they're not going to understand them and

926
00:16:42,629 --> 00:16:42,639
they're not going to understand them and
 

927
00:16:42,639 --> 00:16:45,829
they're not going to understand them and
they may find it hard to use

928
00:16:45,829 --> 00:16:45,839
they may find it hard to use
 

929
00:16:45,839 --> 00:16:48,949
they may find it hard to use
um so this is really simple api and so

930
00:16:48,949 --> 00:16:48,959
um so this is really simple api and so
 

931
00:16:48,959 --> 00:16:52,310
um so this is really simple api and so
this is possible to do to provide simple

932
00:16:52,310 --> 00:16:52,320
this is possible to do to provide simple
 

933
00:16:52,320 --> 00:16:55,749
this is possible to do to provide simple
interfaces that have powerful machinery

934
00:16:55,749 --> 00:16:55,759
interfaces that have powerful machinery
 

935
00:16:55,759 --> 00:16:57,350
interfaces that have powerful machinery
inside them and so we'll always be

936
00:16:57,350 --> 00:16:57,360
inside them and so we'll always be
 

937
00:16:57,360 --> 00:16:58,629
inside them and so we'll always be
searching for

938
00:16:58,629 --> 00:16:58,639
searching for
 

939
00:16:58,639 --> 00:17:02,949
searching for
sort of simple interfaces that provide

940
00:17:02,949 --> 00:17:02,959
sort of simple interfaces that provide
 

941
00:17:02,959 --> 00:17:05,669
sort of simple interfaces that provide
powerful services hey robert we have a

942
00:17:05,669 --> 00:17:05,679
powerful services hey robert we have a
 

943
00:17:05,679 --> 00:17:07,189
powerful services hey robert we have a
question in the chat

944
00:17:07,189 --> 00:17:07,199
question in the chat
 

945
00:17:07,199 --> 00:17:09,510
question in the chat
uh what is unique slash different about

946
00:17:09,510 --> 00:17:09,520
uh what is unique slash different about
 

947
00:17:09,520 --> 00:17:11,669
uh what is unique slash different about
saying system calls jump into the kernel

948
00:17:11,669 --> 00:17:11,679
saying system calls jump into the kernel
 

949
00:17:11,679 --> 00:17:13,669
saying system calls jump into the kernel
i.e as opposed to a standard function

950
00:17:13,669 --> 00:17:13,679
i.e as opposed to a standard function
 

951
00:17:13,679 --> 00:17:18,069
i.e as opposed to a standard function
call that jumps to another function

952
00:17:18,069 --> 00:17:18,079
call that jumps to another function
 

953
00:17:18,079 --> 00:17:21,909
call that jumps to another function
well the colonel has the kernels um

954
00:17:21,909 --> 00:17:21,919
well the colonel has the kernels um
 

955
00:17:21,919 --> 00:17:23,750
well the colonel has the kernels um
a piece of code that's always resident

956
00:17:23,750 --> 00:17:23,760
a piece of code that's always resident
 

957
00:17:23,760 --> 00:17:25,669
a piece of code that's always resident
that has special privileges

958
00:17:25,669 --> 00:17:25,679
that has special privileges
 

959
00:17:25,679 --> 00:17:28,230
that has special privileges
that were that because it booted the

960
00:17:28,230 --> 00:17:28,240
that were that because it booted the
 

961
00:17:28,240 --> 00:17:29,990
that were that because it booted the
machine booted the kernel

962
00:17:29,990 --> 00:17:30,000
machine booted the kernel
 

963
00:17:30,000 --> 00:17:31,990
machine booted the kernel
um the kernel has special inter

964
00:17:31,990 --> 00:17:32,000
um the kernel has special inter
 

965
00:17:32,000 --> 00:17:34,230
um the kernel has special inter
privileges that can get directly at

966
00:17:34,230 --> 00:17:34,240
privileges that can get directly at
 

967
00:17:34,240 --> 00:17:35,909
privileges that can get directly at
all kinds of hardware like the disk

968
00:17:35,909 --> 00:17:35,919
all kinds of hardware like the disk
 

969
00:17:35,919 --> 00:17:38,470
all kinds of hardware like the disk
device that ordinary user programs can't

970
00:17:38,470 --> 00:17:38,480
device that ordinary user programs can't
 

971
00:17:38,480 --> 00:17:39,190
device that ordinary user programs can't
get at

972
00:17:39,190 --> 00:17:39,200
get at
 

973
00:17:39,200 --> 00:17:40,710
get at
so if you make a fun an ordinary

974
00:17:40,710 --> 00:17:40,720
so if you make a fun an ordinary
 

975
00:17:40,720 --> 00:17:43,830
so if you make a fun an ordinary
function call um

976
00:17:43,830 --> 00:17:43,840
function call um
 

977
00:17:43,840 --> 00:17:45,510
function call um
the the function you're calling doesn't

978
00:17:45,510 --> 00:17:45,520
the the function you're calling doesn't
 

979
00:17:45,520 --> 00:17:47,270
the the function you're calling doesn't
get it just doesn't get any special

980
00:17:47,270 --> 00:17:47,280
get it just doesn't get any special
 

981
00:17:47,280 --> 00:17:49,350
get it just doesn't get any special
privileges with respect to the hardware

982
00:17:49,350 --> 00:17:49,360
privileges with respect to the hardware
 

983
00:17:49,360 --> 00:17:50,789
privileges with respect to the hardware
whereas if you make a system call into

984
00:17:50,789 --> 00:17:50,799
whereas if you make a system call into
 

985
00:17:50,799 --> 00:17:52,789
whereas if you make a system call into
the kernel um

986
00:17:52,789 --> 00:17:52,799
the kernel um
 

987
00:17:52,799 --> 00:17:54,549
the kernel um
we'll talk about how this works but that

988
00:17:54,549 --> 00:17:54,559
we'll talk about how this works but that
 

989
00:17:54,559 --> 00:17:56,310
we'll talk about how this works but that
ends up um

990
00:17:56,310 --> 00:17:56,320
ends up um
 

991
00:17:56,320 --> 00:17:57,990
ends up um
as it when it jumps into when the system

992
00:17:57,990 --> 00:17:58,000
as it when it jumps into when the system
 

993
00:17:58,000 --> 00:17:59,909
as it when it jumps into when the system
call jumps into the kernel

994
00:17:59,909 --> 00:17:59,919
call jumps into the kernel
 

995
00:17:59,919 --> 00:18:01,590
call jumps into the kernel
the system call implementation in the

996
00:18:01,590 --> 00:18:01,600
the system call implementation in the
 

997
00:18:01,600 --> 00:18:02,950
the system call implementation in the
kernel then gets all these special

998
00:18:02,950 --> 00:18:02,960
kernel then gets all these special
 

999
00:18:02,960 --> 00:18:04,150
kernel then gets all these special
privileges so that it

1000
00:18:04,150 --> 00:18:04,160
privileges so that it
 

1001
00:18:04,160 --> 00:18:07,590
privileges so that it
it can modify all kinds of

1002
00:18:07,590 --> 00:18:07,600
it can modify all kinds of
 

1003
00:18:07,600 --> 00:18:10,789
it can modify all kinds of
sensitive and protected uh hardware

1004
00:18:10,789 --> 00:18:10,799
sensitive and protected uh hardware
 

1005
00:18:10,799 --> 00:18:12,310
sensitive and protected uh hardware
resources like for example getting

1006
00:18:12,310 --> 00:18:12,320
resources like for example getting
 

1007
00:18:12,320 --> 00:18:13,350
resources like for example getting
directly at the

1008
00:18:13,350 --> 00:18:13,360
directly at the
 

1009
00:18:13,360 --> 00:18:17,029
directly at the
hard disk we'll see a lot more detail

1010
00:18:17,029 --> 00:18:17,039
hard disk we'll see a lot more detail
 

1011
00:18:17,039 --> 00:18:17,830
hard disk we'll see a lot more detail
for all this

1012
00:18:17,830 --> 00:18:17,840
for all this
 

1013
00:18:17,840 --> 00:18:21,110
for all this
uh shortly okay so

1014
00:18:21,110 --> 00:18:21,120
uh shortly okay so
 

1015
00:18:21,120 --> 00:18:23,430
uh shortly okay so
a final tension that we wanna that all

1016
00:18:23,430 --> 00:18:23,440
a final tension that we wanna that all
 

1017
00:18:23,440 --> 00:18:25,190
a final tension that we wanna that all
operating systems need to satisfy is you

1018
00:18:25,190 --> 00:18:25,200
operating systems need to satisfy is you
 

1019
00:18:25,200 --> 00:18:26,950
operating systems need to satisfy is you
wanna give programs as much flexibility

1020
00:18:26,950 --> 00:18:26,960
wanna give programs as much flexibility
 

1021
00:18:26,960 --> 00:18:28,310
wanna give programs as much flexibility
as you can you don't want to constrain

1022
00:18:28,310 --> 00:18:28,320
as you can you don't want to constrain
 

1023
00:18:28,320 --> 00:18:33,029
as you can you don't want to constrain
them so you want to have very flexible

1024
00:18:33,029 --> 00:18:33,039

 

1025
00:18:33,039 --> 00:18:35,029

interfaces but you do need to constrain

1026
00:18:35,029 --> 00:18:35,039
interfaces but you do need to constrain
 

1027
00:18:35,039 --> 00:18:36,630
interfaces but you do need to constrain
programs somewhat because you absolutely

1028
00:18:36,630 --> 00:18:36,640
programs somewhat because you absolutely
 

1029
00:18:36,640 --> 00:18:39,590
programs somewhat because you absolutely
have to have some notion of security

1030
00:18:39,590 --> 00:18:39,600
have to have some notion of security
 

1031
00:18:39,600 --> 00:18:43,430
have to have some notion of security
you can't you we'd love for programs to

1032
00:18:43,430 --> 00:18:43,440
you can't you we'd love for programs to
 

1033
00:18:43,440 --> 00:18:44,870
you can't you we'd love for programs to
give programmers complete freedom but it

1034
00:18:44,870 --> 00:18:44,880
give programmers complete freedom but it
 

1035
00:18:44,880 --> 00:18:46,070
give programmers complete freedom but it
can't be complete can't be really

1036
00:18:46,070 --> 00:18:46,080
can't be complete can't be really
 

1037
00:18:46,080 --> 00:18:46,870
can't be complete can't be really
complete

1038
00:18:46,870 --> 00:18:46,880
complete
 

1039
00:18:46,880 --> 00:18:48,630
complete
because we don't want programs to get

1040
00:18:48,630 --> 00:18:48,640
because we don't want programs to get
 

1041
00:18:48,640 --> 00:18:50,390
because we don't want programs to get
directly at the hardware or to interfere

1042
00:18:50,390 --> 00:18:50,400
directly at the hardware or to interfere
 

1043
00:18:50,400 --> 00:18:51,430
directly at the hardware or to interfere
with other programs

1044
00:18:51,430 --> 00:18:51,440
with other programs
 

1045
00:18:51,440 --> 00:18:54,230
with other programs
or to sort of be able to interfere with

1046
00:18:54,230 --> 00:18:54,240
or to sort of be able to interfere with
 

1047
00:18:54,240 --> 00:18:55,590
or to sort of be able to interfere with
the operation of the

1048
00:18:55,590 --> 00:18:55,600
the operation of the
 

1049
00:18:55,600 --> 00:19:00,070
the operation of the
operating system itself so these are all

1050
00:19:00,070 --> 00:19:00,080
operating system itself so these are all
 

1051
00:19:00,080 --> 00:19:02,710
operating system itself so these are all
you know it's possible to do a good job

1052
00:19:02,710 --> 00:19:02,720
you know it's possible to do a good job
 

1053
00:19:02,720 --> 00:19:04,310
you know it's possible to do a good job
and we'll talk a lot about it but

1054
00:19:04,310 --> 00:19:04,320
and we'll talk a lot about it but
 

1055
00:19:04,320 --> 00:19:05,830
and we'll talk a lot about it but
it's always a bit of a puzzle to provide

1056
00:19:05,830 --> 00:19:05,840
it's always a bit of a puzzle to provide
 

1057
00:19:05,840 --> 00:19:08,230
it's always a bit of a puzzle to provide
sort of both of these

1058
00:19:08,230 --> 00:19:08,240
sort of both of these
 

1059
00:19:08,240 --> 00:19:11,750
sort of both of these
the properties in both of these columns

1060
00:19:11,750 --> 00:19:11,760
the properties in both of these columns
 

1061
00:19:11,760 --> 00:19:13,669
the properties in both of these columns
another thing that makes os design hard

1062
00:19:13,669 --> 00:19:13,679
another thing that makes os design hard
 

1063
00:19:13,679 --> 00:19:14,789
another thing that makes os design hard
and interesting is that

1064
00:19:14,789 --> 00:19:14,799
and interesting is that
 

1065
00:19:14,799 --> 00:19:16,310
and interesting is that
operating systems provide a lot of

1066
00:19:16,310 --> 00:19:16,320
operating systems provide a lot of
 

1067
00:19:16,320 --> 00:19:17,990
operating systems provide a lot of
features and a lot of services but they

1068
00:19:17,990 --> 00:19:18,000
features and a lot of services but they
 

1069
00:19:18,000 --> 00:19:20,150
features and a lot of services but they
actually tend to interact

1070
00:19:20,150 --> 00:19:20,160
actually tend to interact
 

1071
00:19:20,160 --> 00:19:22,070
actually tend to interact
and sometimes in odd ways they require a

1072
00:19:22,070 --> 00:19:22,080
and sometimes in odd ways they require a
 

1073
00:19:22,080 --> 00:19:23,909
and sometimes in odd ways they require a
lot of thought so even in the simple

1074
00:19:23,909 --> 00:19:23,919
lot of thought so even in the simple
 

1075
00:19:23,919 --> 00:19:26,710
lot of thought so even in the simple
examples i gave

1076
00:19:26,710 --> 00:19:26,720
examples i gave
 

1077
00:19:26,720 --> 00:19:28,789
examples i gave
with open and fork those two interact

1078
00:19:28,789 --> 00:19:28,799
with open and fork those two interact
 

1079
00:19:28,799 --> 00:19:31,270
with open and fork those two interact
actually if a program

1080
00:19:31,270 --> 00:19:31,280
actually if a program
 

1081
00:19:31,280 --> 00:19:32,950
actually if a program
allocates a file descriptor with the

1082
00:19:32,950 --> 00:19:32,960
allocates a file descriptor with the
 

1083
00:19:32,960 --> 00:19:34,630
allocates a file descriptor with the
open system call

1084
00:19:34,630 --> 00:19:34,640
open system call
 

1085
00:19:34,640 --> 00:19:37,669
open system call
and then that same program

1086
00:19:37,669 --> 00:19:37,679
and then that same program
 

1087
00:19:37,679 --> 00:19:41,190
and then that same program
forks and the semantics of fork

1088
00:19:41,190 --> 00:19:41,200
forks and the semantics of fork
 

1089
00:19:41,200 --> 00:19:42,950
forks and the semantics of fork
just turn out to be that you create a

1090
00:19:42,950 --> 00:19:42,960
just turn out to be that you create a
 

1091
00:19:42,960 --> 00:19:44,950
just turn out to be that you create a
new process that's a copy of the current

1092
00:19:44,950 --> 00:19:44,960
new process that's a copy of the current
 

1093
00:19:44,960 --> 00:19:45,830
new process that's a copy of the current
process

1094
00:19:45,830 --> 00:19:45,840
process
 

1095
00:19:45,840 --> 00:19:49,669
process
this file descriptor you opened

1096
00:19:49,669 --> 00:19:49,679

 

1097
00:19:49,679 --> 00:19:51,590

if that's truly to be a copy this file

1098
00:19:51,590 --> 00:19:51,600
if that's truly to be a copy this file
 

1099
00:19:51,600 --> 00:19:52,870
if that's truly to be a copy this file
descriptor still has to

1100
00:19:52,870 --> 00:19:52,880
descriptor still has to
 

1101
00:19:52,880 --> 00:19:56,150
descriptor still has to
um be present and usable in the child

1102
00:19:56,150 --> 00:19:56,160
um be present and usable in the child
 

1103
00:19:56,160 --> 00:19:58,310
um be present and usable in the child
and you know so that's to be thought

1104
00:19:58,310 --> 00:19:58,320
and you know so that's to be thought
 

1105
00:19:58,320 --> 00:20:00,070
and you know so that's to be thought
through that is the files the open and

1106
00:20:00,070 --> 00:20:00,080
through that is the files the open and
 

1107
00:20:00,080 --> 00:20:01,750
through that is the files the open and
filed scripters interact with fork in

1108
00:20:01,750 --> 00:20:01,760
filed scripters interact with fork in
 

1109
00:20:01,760 --> 00:20:03,750
filed scripters interact with fork in
this interesting way

1110
00:20:03,750 --> 00:20:03,760
this interesting way
 

1111
00:20:03,760 --> 00:20:05,830
this interesting way
and somebody has to figure out oh should

1112
00:20:05,830 --> 00:20:05,840
and somebody has to figure out oh should
 

1113
00:20:05,840 --> 00:20:06,950
and somebody has to figure out oh should
the child be able to

1114
00:20:06,950 --> 00:20:06,960
the child be able to
 

1115
00:20:06,960 --> 00:20:09,430
the child be able to
get at the file descriptors created

1116
00:20:09,430 --> 00:20:09,440
get at the file descriptors created
 

1117
00:20:09,440 --> 00:20:10,789
get at the file descriptors created
before fork was called

1118
00:20:10,789 --> 00:20:10,799
before fork was called
 

1119
00:20:10,799 --> 00:20:12,630
before fork was called
and the answer happens to be yes in the

1120
00:20:12,630 --> 00:20:12,640
and the answer happens to be yes in the
 

1121
00:20:12,640 --> 00:20:17,029
and the answer happens to be yes in the
operating systems we're going to look at

1122
00:20:17,029 --> 00:20:17,039

 

1123
00:20:17,039 --> 00:20:18,870

all right and so other things that are

1124
00:20:18,870 --> 00:20:18,880
all right and so other things that are
 

1125
00:20:18,880 --> 00:20:20,310
all right and so other things that are
turned out to be interesting

1126
00:20:20,310 --> 00:20:20,320
turned out to be interesting
 

1127
00:20:20,320 --> 00:20:21,990
turned out to be interesting
i already mentioned that operating

1128
00:20:21,990 --> 00:20:22,000
i already mentioned that operating
 

1129
00:20:22,000 --> 00:20:23,990
i already mentioned that operating
systems have to cater to a wide variety

1130
00:20:23,990 --> 00:20:24,000
systems have to cater to a wide variety
 

1131
00:20:24,000 --> 00:20:24,950
systems have to cater to a wide variety
of uses

1132
00:20:24,950 --> 00:20:24,960
of uses
 

1133
00:20:24,960 --> 00:20:28,070
of uses
the same os used both for database

1134
00:20:28,070 --> 00:20:28,080
the same os used both for database
 

1135
00:20:28,080 --> 00:20:31,510
the same os used both for database
servers and and smartphones for example

1136
00:20:31,510 --> 00:20:31,520
servers and and smartphones for example
 

1137
00:20:31,520 --> 00:20:35,190
servers and and smartphones for example
and operating systems as time goes on

1138
00:20:35,190 --> 00:20:35,200
and operating systems as time goes on
 

1139
00:20:35,200 --> 00:20:37,909
and operating systems as time goes on
the hardware that you run the hardware

1140
00:20:37,909 --> 00:20:37,919
the hardware that you run the hardware
 

1141
00:20:37,919 --> 00:20:40,390
the hardware that you run the hardware
you get with typical computers changes

1142
00:20:40,390 --> 00:20:40,400
you get with typical computers changes
 

1143
00:20:40,400 --> 00:20:42,710
you get with typical computers changes
maybe you get super fast ssd storage

1144
00:20:42,710 --> 00:20:42,720
maybe you get super fast ssd storage
 

1145
00:20:42,720 --> 00:20:44,310
maybe you get super fast ssd storage
instead of mechanical hard drives for

1146
00:20:44,310 --> 00:20:44,320
instead of mechanical hard drives for
 

1147
00:20:44,320 --> 00:20:45,510
instead of mechanical hard drives for
example

1148
00:20:45,510 --> 00:20:45,520
example
 

1149
00:20:45,520 --> 00:20:48,870
example
about 15 years ago multi-core computers

1150
00:20:48,870 --> 00:20:48,880
about 15 years ago multi-core computers
 

1151
00:20:48,880 --> 00:20:51,350
about 15 years ago multi-core computers
went from being rare curiosities to

1152
00:20:51,350 --> 00:20:51,360
went from being rare curiosities to
 

1153
00:20:51,360 --> 00:20:51,909
went from being rare curiosities to
being

1154
00:20:51,909 --> 00:20:51,919
being
 

1155
00:20:51,919 --> 00:20:55,669
being
pervasive and recently we've seen you

1156
00:20:55,669 --> 00:20:55,679
pervasive and recently we've seen you
 

1157
00:20:55,679 --> 00:20:57,669
pervasive and recently we've seen you
know order of magnitude speedups in how

1158
00:20:57,669 --> 00:20:57,679
know order of magnitude speedups in how
 

1159
00:20:57,679 --> 00:20:59,110
know order of magnitude speedups in how
fast networks operate

1160
00:20:59,110 --> 00:20:59,120
fast networks operate
 

1161
00:20:59,120 --> 00:21:02,870
fast networks operate
and so all these require rethinks um

1162
00:21:02,870 --> 00:21:02,880
and so all these require rethinks um
 

1163
00:21:02,880 --> 00:21:04,549
and so all these require rethinks um
periodically of how operating systems

1164
00:21:04,549 --> 00:21:04,559
periodically of how operating systems
 

1165
00:21:04,559 --> 00:21:06,470
periodically of how operating systems
are designed

1166
00:21:06,470 --> 00:21:06,480
are designed
 

1167
00:21:06,480 --> 00:21:10,870
are designed
now um so so those are those are sort of

1168
00:21:10,870 --> 00:21:10,880
now um so so those are those are sort of
 

1169
00:21:10,880 --> 00:21:12,070
now um so so those are those are sort of
intellectually why you might take the

1170
00:21:12,070 --> 00:21:12,080
intellectually why you might take the
 

1171
00:21:12,080 --> 00:21:13,430
intellectually why you might take the
course there's also some even more

1172
00:21:13,430 --> 00:21:13,440
course there's also some even more
 

1173
00:21:13,440 --> 00:21:16,149
course there's also some even more
practical reasons why you might be glad

1174
00:21:16,149 --> 00:21:16,159
practical reasons why you might be glad
 

1175
00:21:16,159 --> 00:21:18,549
practical reasons why you might be glad
to have taken this course one is if

1176
00:21:18,549 --> 00:21:18,559
to have taken this course one is if
 

1177
00:21:18,559 --> 00:21:20,149
to have taken this course one is if
you're interested in what happens inside

1178
00:21:20,149 --> 00:21:20,159
you're interested in what happens inside
 

1179
00:21:20,159 --> 00:21:21,510
you're interested in what happens inside
computers what goes on under

1180
00:21:21,510 --> 00:21:21,520
computers what goes on under
 

1181
00:21:21,520 --> 00:21:24,310
computers what goes on under
and saw under the hood sort of in secret

1182
00:21:24,310 --> 00:21:24,320
and saw under the hood sort of in secret
 

1183
00:21:24,320 --> 00:21:25,830
and saw under the hood sort of in secret
when you turn on your computer

1184
00:21:25,830 --> 00:21:25,840
when you turn on your computer
 

1185
00:21:25,840 --> 00:21:27,990
when you turn on your computer
this is a good course to take similarly

1186
00:21:27,990 --> 00:21:28,000
this is a good course to take similarly
 

1187
00:21:28,000 --> 00:21:30,070
this is a good course to take similarly
if you like infrastructure that is if if

1188
00:21:30,070 --> 00:21:30,080
if you like infrastructure that is if if
 

1189
00:21:30,080 --> 00:21:30,710
if you like infrastructure that is if if
you enjoy

1190
00:21:30,710 --> 00:21:30,720
you enjoy
 

1191
00:21:30,720 --> 00:21:33,830
you enjoy
building uh sort of services that other

1192
00:21:33,830 --> 00:21:33,840
building uh sort of services that other
 

1193
00:21:33,840 --> 00:21:36,390
building uh sort of services that other
programs can then use

1194
00:21:36,390 --> 00:21:36,400
programs can then use
 

1195
00:21:36,400 --> 00:21:38,070
programs can then use
this is of course essentially all about

1196
00:21:38,070 --> 00:21:38,080
this is of course essentially all about
 

1197
00:21:38,080 --> 00:21:39,750
this is of course essentially all about
infrastructure because that's that's

1198
00:21:39,750 --> 00:21:39,760
infrastructure because that's that's
 

1199
00:21:39,760 --> 00:21:42,390
infrastructure because that's that's
what operating systems are

1200
00:21:42,390 --> 00:21:42,400
what operating systems are
 

1201
00:21:42,400 --> 00:21:43,909
what operating systems are
if you ever need to spend a lot of time

1202
00:21:43,909 --> 00:21:43,919
if you ever need to spend a lot of time
 

1203
00:21:43,919 --> 00:21:45,510
if you ever need to spend a lot of time
tracking down bugs in

1204
00:21:45,510 --> 00:21:45,520
tracking down bugs in
 

1205
00:21:45,520 --> 00:21:47,350
tracking down bugs in
application code or tracking down

1206
00:21:47,350 --> 00:21:47,360
application code or tracking down
 

1207
00:21:47,360 --> 00:21:48,789
application code or tracking down
security problems

1208
00:21:48,789 --> 00:21:48,799
security problems
 

1209
00:21:48,799 --> 00:21:51,350
security problems
often that um involves understanding

1210
00:21:51,350 --> 00:21:51,360
often that um involves understanding
 

1211
00:21:51,360 --> 00:21:52,950
often that um involves understanding
what was going on inside the operating

1212
00:21:52,950 --> 00:21:52,960
what was going on inside the operating
 

1213
00:21:52,960 --> 00:21:53,590
what was going on inside the operating
system

1214
00:21:53,590 --> 00:21:53,600
system
 

1215
00:21:53,600 --> 00:21:54,870
system
because it's ultimately the operating

1216
00:21:54,870 --> 00:21:54,880
because it's ultimately the operating
 

1217
00:21:54,880 --> 00:21:57,669
because it's ultimately the operating
system that enforces a lot of security

1218
00:21:57,669 --> 00:21:57,679
system that enforces a lot of security
 

1219
00:21:57,679 --> 00:21:58,710
system that enforces a lot of security
and

1220
00:21:58,710 --> 00:21:58,720
and
 

1221
00:21:58,720 --> 00:22:00,310
and
when things go wrong it's sort of the

1222
00:22:00,310 --> 00:22:00,320
when things go wrong it's sort of the
 

1223
00:22:00,320 --> 00:22:01,669
when things go wrong it's sort of the
operating system that has to pick up the

1224
00:22:01,669 --> 00:22:01,679
operating system that has to pick up the
 

1225
00:22:01,679 --> 00:22:02,470
operating system that has to pick up the
pieces so

1226
00:22:02,470 --> 00:22:02,480
pieces so
 

1227
00:22:02,480 --> 00:22:05,110
pieces so
that's often involved in uh tracking

1228
00:22:05,110 --> 00:22:05,120
that's often involved in uh tracking
 

1229
00:22:05,120 --> 00:22:06,149
that's often involved in uh tracking
down bugs

1230
00:22:06,149 --> 00:22:06,159
down bugs
 

1231
00:22:06,159 --> 00:22:08,870
down bugs
and finally yes two more questions from

1232
00:22:08,870 --> 00:22:08,880
and finally yes two more questions from
 

1233
00:22:08,880 --> 00:22:09,909
and finally yes two more questions from
the chat so

1234
00:22:09,909 --> 00:22:09,919
the chat so
 

1235
00:22:09,919 --> 00:22:11,430
the chat so
the first is how important is it for

1236
00:22:11,430 --> 00:22:11,440
the first is how important is it for
 

1237
00:22:11,440 --> 00:22:13,430
the first is how important is it for
application developers to truly deeply

1238
00:22:13,430 --> 00:22:13,440
application developers to truly deeply
 

1239
00:22:13,440 --> 00:22:15,029
application developers to truly deeply
understand the operating systems they're

1240
00:22:15,029 --> 00:22:15,039
understand the operating systems they're
 

1241
00:22:15,039 --> 00:22:16,950
understand the operating systems they're
developing their applications for

1242
00:22:16,950 --> 00:22:16,960
developing their applications for
 

1243
00:22:16,960 --> 00:22:19,909
developing their applications for
do they necessarily need to be experts

1244
00:22:19,909 --> 00:22:19,919
do they necessarily need to be experts
 

1245
00:22:19,919 --> 00:22:21,590
do they necessarily need to be experts
you don't have to be an expert but if

1246
00:22:21,590 --> 00:22:21,600
you don't have to be an expert but if
 

1247
00:22:21,600 --> 00:22:22,549
you don't have to be an expert but if
you spend

1248
00:22:22,549 --> 00:22:22,559
you spend
 

1249
00:22:22,559 --> 00:22:24,710
you spend
um a lot of time developing and

1250
00:22:24,710 --> 00:22:24,720
um a lot of time developing and
 

1251
00:22:24,720 --> 00:22:26,630
um a lot of time developing and
maintaining and debugging applications

1252
00:22:26,630 --> 00:22:26,640
maintaining and debugging applications
 

1253
00:22:26,640 --> 00:22:28,950
maintaining and debugging applications
you'll eventually end up knowing a lot

1254
00:22:28,950 --> 00:22:28,960
you'll eventually end up knowing a lot
 

1255
00:22:28,960 --> 00:22:30,230
you'll eventually end up knowing a lot
about the operating system

1256
00:22:30,230 --> 00:22:30,240
about the operating system
 

1257
00:22:30,240 --> 00:22:32,470
about the operating system
whether you whether you meant to or not

1258
00:22:32,470 --> 00:22:32,480
whether you whether you meant to or not
 

1259
00:22:32,480 --> 00:22:34,070
whether you whether you meant to or not
it just

1260
00:22:34,070 --> 00:22:34,080
it just
 

1261
00:22:34,080 --> 00:22:36,630
it just
it just comes up and you're often forced

1262
00:22:36,630 --> 00:22:36,640
it just comes up and you're often forced
 

1263
00:22:36,640 --> 00:22:39,590
it just comes up and you're often forced
to understand

1264
00:22:39,590 --> 00:22:39,600

 

1265
00:22:39,600 --> 00:22:41,750

and the second question is do high-level

1266
00:22:41,750 --> 00:22:41,760
and the second question is do high-level
 

1267
00:22:41,760 --> 00:22:43,029
and the second question is do high-level
programming languages like

1268
00:22:43,029 --> 00:22:43,039
programming languages like
 

1269
00:22:43,039 --> 00:22:45,430
programming languages like
python use system calls directly are

1270
00:22:45,430 --> 00:22:45,440
python use system calls directly are
 

1271
00:22:45,440 --> 00:22:46,390
python use system calls directly are
there built-ins

1272
00:22:46,390 --> 00:22:46,400
there built-ins
 

1273
00:22:46,400 --> 00:22:48,950
there built-ins
slash wrappers for convenience a lot of

1274
00:22:48,950 --> 00:22:48,960
slash wrappers for convenience a lot of
 

1275
00:22:48,960 --> 00:22:50,470
slash wrappers for convenience a lot of
high-level languages are

1276
00:22:50,470 --> 00:22:50,480
high-level languages are
 

1277
00:22:50,480 --> 00:22:53,430
high-level languages are
sort of at one remove from system calls

1278
00:22:53,430 --> 00:22:53,440
sort of at one remove from system calls
 

1279
00:22:53,440 --> 00:22:56,789
sort of at one remove from system calls
that's absolutely true so

1280
00:22:56,789 --> 00:22:56,799

 

1281
00:22:56,799 --> 00:22:59,270

partially because a lot of languages

1282
00:22:59,270 --> 00:22:59,280
partially because a lot of languages
 

1283
00:22:59,280 --> 00:23:00,390
partially because a lot of languages
want to provide

1284
00:23:00,390 --> 00:23:00,400
want to provide
 

1285
00:23:00,400 --> 00:23:02,789
want to provide
portable a portable environment that

1286
00:23:02,789 --> 00:23:02,799
portable a portable environment that
 

1287
00:23:02,799 --> 00:23:03,990
portable a portable environment that
works on many different operating

1288
00:23:03,990 --> 00:23:04,000
works on many different operating
 

1289
00:23:04,000 --> 00:23:05,990
works on many different operating
systems so they can't necessarily commit

1290
00:23:05,990 --> 00:23:06,000
systems so they can't necessarily commit
 

1291
00:23:06,000 --> 00:23:08,310
systems so they can't necessarily commit
to the specific system calls of any one

1292
00:23:08,310 --> 00:23:08,320
to the specific system calls of any one
 

1293
00:23:08,320 --> 00:23:09,909
to the specific system calls of any one
operating system

1294
00:23:09,909 --> 00:23:09,919
operating system
 

1295
00:23:09,919 --> 00:23:12,789
operating system
um so i'm the answer the question i

1296
00:23:12,789 --> 00:23:12,799
um so i'm the answer the question i
 

1297
00:23:12,799 --> 00:23:14,470
um so i'm the answer the question i
think is if you use python

1298
00:23:14,470 --> 00:23:14,480
think is if you use python
 

1299
00:23:14,480 --> 00:23:17,590
think is if you use python
uh you're somewhat insulated from the

1300
00:23:17,590 --> 00:23:17,600
uh you're somewhat insulated from the
 

1301
00:23:17,600 --> 00:23:18,870
uh you're somewhat insulated from the
system call interface you know

1302
00:23:18,870 --> 00:23:18,880
system call interface you know
 

1303
00:23:18,880 --> 00:23:20,789
system call interface you know
internally of course python makes

1304
00:23:20,789 --> 00:23:20,799
internally of course python makes
 

1305
00:23:20,799 --> 00:23:22,310
internally of course python makes
has to make system calls to get its work

1306
00:23:22,310 --> 00:23:22,320
has to make system calls to get its work
 

1307
00:23:22,320 --> 00:23:24,390
has to make system calls to get its work
done and

1308
00:23:24,390 --> 00:23:24,400
done and
 

1309
00:23:24,400 --> 00:23:25,830
done and
certainly in python and many other

1310
00:23:25,830 --> 00:23:25,840
certainly in python and many other
 

1311
00:23:25,840 --> 00:23:27,909
certainly in python and many other
languages there is usually a way to get

1312
00:23:27,909 --> 00:23:27,919
languages there is usually a way to get
 

1313
00:23:27,919 --> 00:23:31,029
languages there is usually a way to get
directly at the system calls of whatever

1314
00:23:31,029 --> 00:23:31,039
directly at the system calls of whatever
 

1315
00:23:31,039 --> 00:23:31,510
directly at the system calls of whatever
your

1316
00:23:31,510 --> 00:23:31,520
your
 

1317
00:23:31,520 --> 00:23:35,430
your
operating system you're running on

1318
00:23:35,430 --> 00:23:35,440
operating system you're running on
 

1319
00:23:35,440 --> 00:23:37,110
operating system you're running on
and folks for questions you can just

1320
00:23:37,110 --> 00:23:37,120
and folks for questions you can just
 

1321
00:23:37,120 --> 00:23:38,630
and folks for questions you can just
feel free to jump in yourself and ask

1322
00:23:38,630 --> 00:23:38,640
feel free to jump in yourself and ask
 

1323
00:23:38,640 --> 00:23:39,750
feel free to jump in yourself and ask
questions you don't need to go through

1324
00:23:39,750 --> 00:23:39,760
questions you don't need to go through
 

1325
00:23:39,760 --> 00:23:43,350
questions you don't need to go through
the chat

1326
00:23:43,350 --> 00:23:43,360

 

1327
00:23:43,360 --> 00:23:46,710

okay um all right

1328
00:23:46,710 --> 00:23:46,720
okay um all right
 

1329
00:23:46,720 --> 00:23:50,549
okay um all right
sorry um

1330
00:23:50,549 --> 00:23:50,559
sorry um
 

1331
00:23:50,559 --> 00:23:51,990
sorry um
i'm going to spend a couple of minutes

1332
00:23:51,990 --> 00:23:52,000
i'm going to spend a couple of minutes
 

1333
00:23:52,000 --> 00:23:53,750
i'm going to spend a couple of minutes
now talking about

1334
00:23:53,750 --> 00:23:53,760
now talking about
 

1335
00:23:53,760 --> 00:23:57,029
now talking about
the class structure of

1336
00:23:57,029 --> 00:23:57,039
the class structure of
 

1337
00:23:57,039 --> 00:24:01,110
the class structure of
6 s081

1338
00:24:01,110 --> 00:24:01,120
6 s081
 

1339
00:24:01,120 --> 00:24:04,149
6 s081
before switching back to actual

1340
00:24:04,149 --> 00:24:04,159
before switching back to actual
 

1341
00:24:04,159 --> 00:24:05,430
before switching back to actual
technical content

1342
00:24:05,430 --> 00:24:05,440
technical content
 

1343
00:24:05,440 --> 00:24:07,750
technical content
so the uh there's a website for the

1344
00:24:07,750 --> 00:24:07,760
so the uh there's a website for the
 

1345
00:24:07,760 --> 00:24:09,350
so the uh there's a website for the
course which i don't want to write out

1346
00:24:09,350 --> 00:24:09,360
course which i don't want to write out
 

1347
00:24:09,360 --> 00:24:10,230
course which i don't want to write out
just now but it's

1348
00:24:10,230 --> 00:24:10,240
just now but it's
 

1349
00:24:10,240 --> 00:24:12,789
just now but it's
um you can find it by looking for 6s 081

1350
00:24:12,789 --> 00:24:12,799
um you can find it by looking for 6s 081
 

1351
00:24:12,799 --> 00:24:14,230
um you can find it by looking for 6s 081
on google

1352
00:24:14,230 --> 00:24:14,240
on google
 

1353
00:24:14,240 --> 00:24:19,830
on google
and the website um has

1354
00:24:19,830 --> 00:24:19,840
and the website um has
 

1355
00:24:19,840 --> 00:24:23,909
and the website um has
um the schedule uh

1356
00:24:23,909 --> 00:24:23,919
um the schedule uh
 

1357
00:24:23,919 --> 00:24:26,230
um the schedule uh
it has the assignments on the schedule

1358
00:24:26,230 --> 00:24:26,240
it has the assignments on the schedule
 

1359
00:24:26,240 --> 00:24:28,710
it has the assignments on the schedule
it has the lab assignments

1360
00:24:28,710 --> 00:24:28,720
it has the lab assignments
 

1361
00:24:28,720 --> 00:24:30,870
it has the lab assignments
um and it has the sort of information

1362
00:24:30,870 --> 00:24:30,880
um and it has the sort of information
 

1363
00:24:30,880 --> 00:24:31,990
um and it has the sort of information
about course structure like

1364
00:24:31,990 --> 00:24:32,000
about course structure like
 

1365
00:24:32,000 --> 00:24:35,909
about course structure like
the grading policy on it the other big

1366
00:24:35,909 --> 00:24:35,919
the grading policy on it the other big
 

1367
00:24:35,919 --> 00:24:37,830
the grading policy on it the other big
resource you're gonna want to keep track

1368
00:24:37,830 --> 00:24:37,840
resource you're gonna want to keep track
 

1369
00:24:37,840 --> 00:24:40,230
resource you're gonna want to keep track
of is piazza

1370
00:24:40,230 --> 00:24:40,240
of is piazza
 

1371
00:24:40,240 --> 00:24:41,830
of is piazza
i guess everybody who's here got here by

1372
00:24:41,830 --> 00:24:41,840
i guess everybody who's here got here by
 

1373
00:24:41,840 --> 00:24:43,909
i guess everybody who's here got here by
the way piazza but

1374
00:24:43,909 --> 00:24:43,919
the way piazza but
 

1375
00:24:43,919 --> 00:24:47,510
the way piazza but
as well as so we use piazza really for

1376
00:24:47,510 --> 00:24:47,520
as well as so we use piazza really for
 

1377
00:24:47,520 --> 00:24:48,710
as well as so we use piazza really for
two main things one is

1378
00:24:48,710 --> 00:24:48,720
two main things one is
 

1379
00:24:48,720 --> 00:24:50,230
two main things one is
as a way of people to be able to ask

1380
00:24:50,230 --> 00:24:50,240
as a way of people to be able to ask
 

1381
00:24:50,240 --> 00:24:53,350
as a way of people to be able to ask
questions about the lab assignments and

1382
00:24:53,350 --> 00:24:53,360
questions about the lab assignments and
 

1383
00:24:53,360 --> 00:24:55,830
questions about the lab assignments and
uh course staff will try to answer these

1384
00:24:55,830 --> 00:24:55,840
uh course staff will try to answer these
 

1385
00:24:55,840 --> 00:24:56,470
uh course staff will try to answer these
questions but

1386
00:24:56,470 --> 00:24:56,480
questions but
 

1387
00:24:56,480 --> 00:24:57,990
questions but
you should feel absolutely free to

1388
00:24:57,990 --> 00:24:58,000
you should feel absolutely free to
 

1389
00:24:58,000 --> 00:25:00,630
you should feel absolutely free to
answer each other's questions as well

1390
00:25:00,630 --> 00:25:00,640
answer each other's questions as well
 

1391
00:25:00,640 --> 00:25:01,830
answer each other's questions as well
and the other big thing that happens on

1392
00:25:01,830 --> 00:25:01,840
and the other big thing that happens on
 

1393
00:25:01,840 --> 00:25:03,510
and the other big thing that happens on
piazza if there's announcements if

1394
00:25:03,510 --> 00:25:03,520
piazza if there's announcements if
 

1395
00:25:03,520 --> 00:25:04,630
piazza if there's announcements if
there's any announcements about the

1396
00:25:04,630 --> 00:25:04,640
there's any announcements about the
 

1397
00:25:04,640 --> 00:25:05,909
there's any announcements about the
course

1398
00:25:05,909 --> 00:25:05,919
course
 

1399
00:25:05,919 --> 00:25:07,669
course
we'll put the announcements on piazza so

1400
00:25:07,669 --> 00:25:07,679
we'll put the announcements on piazza so
 

1401
00:25:07,679 --> 00:25:09,110
we'll put the announcements on piazza so
you should keep an eye on piazza for

1402
00:25:09,110 --> 00:25:09,120
you should keep an eye on piazza for
 

1403
00:25:09,120 --> 00:25:11,110
you should keep an eye on piazza for
announcements even if

1404
00:25:11,110 --> 00:25:11,120
announcements even if
 

1405
00:25:11,120 --> 00:25:16,630
announcements even if
you're not using it for lab help

1406
00:25:16,630 --> 00:25:16,640

 

1407
00:25:16,640 --> 00:25:18,470

the one of the big parts of the course

1408
00:25:18,470 --> 00:25:18,480
the one of the big parts of the course
 

1409
00:25:18,480 --> 00:25:21,990
the one of the big parts of the course
is that these lectures

1410
00:25:21,990 --> 00:25:22,000

 

1411
00:25:22,000 --> 00:25:25,590

the lectures will

1412
00:25:25,590 --> 00:25:25,600
the lectures will
 

1413
00:25:25,600 --> 00:25:30,230
the lectures will
cover basic ideas in operating systems

1414
00:25:30,230 --> 00:25:30,240
cover basic ideas in operating systems
 

1415
00:25:30,240 --> 00:25:31,990
cover basic ideas in operating systems
some of the lectures will be devoted to

1416
00:25:31,990 --> 00:25:32,000
some of the lectures will be devoted to
 

1417
00:25:32,000 --> 00:25:33,510
some of the lectures will be devoted to
detailed

1418
00:25:33,510 --> 00:25:33,520
detailed
 

1419
00:25:33,520 --> 00:25:36,789
detailed
study of the code in xv6 which is our

1420
00:25:36,789 --> 00:25:36,799
study of the code in xv6 which is our
 

1421
00:25:36,799 --> 00:25:39,350
study of the code in xv6 which is our
small teaching operating system

1422
00:25:39,350 --> 00:25:39,360
small teaching operating system
 

1423
00:25:39,360 --> 00:25:41,510
small teaching operating system
and so talk about how it works we'll

1424
00:25:41,510 --> 00:25:41,520
and so talk about how it works we'll
 

1425
00:25:41,520 --> 00:25:43,110
and so talk about how it works we'll
look at the code and sort of show the

1426
00:25:43,110 --> 00:25:43,120
look at the code and sort of show the
 

1427
00:25:43,120 --> 00:25:45,750
look at the code and sort of show the
code executing during lectures

1428
00:25:45,750 --> 00:25:45,760
code executing during lectures
 

1429
00:25:45,760 --> 00:25:47,350
code executing during lectures
and in addition before many of the

1430
00:25:47,350 --> 00:25:47,360
and in addition before many of the
 

1431
00:25:47,360 --> 00:25:48,870
and in addition before many of the
lectures there'll be assignments

1432
00:25:48,870 --> 00:25:48,880
lectures there'll be assignments
 

1433
00:25:48,880 --> 00:25:51,510
lectures there'll be assignments
reading assignments from a book that

1434
00:25:51,510 --> 00:25:51,520
reading assignments from a book that
 

1435
00:25:51,520 --> 00:25:52,710
reading assignments from a book that
sort of describes how

1436
00:25:52,710 --> 00:25:52,720
sort of describes how
 

1437
00:25:52,720 --> 00:25:55,510
sort of describes how
xv6 operates and why it's designed that

1438
00:25:55,510 --> 00:25:55,520
xv6 operates and why it's designed that
 

1439
00:25:55,520 --> 00:25:56,630
xv6 operates and why it's designed that
way

1440
00:25:56,630 --> 00:25:56,640
way
 

1441
00:25:56,640 --> 00:25:57,990
way
so you should do the readings before the

1442
00:25:57,990 --> 00:25:58,000
so you should do the readings before the
 

1443
00:25:58,000 --> 00:26:00,549
so you should do the readings before the
class so that you'll understand

1444
00:26:00,549 --> 00:26:00,559
class so that you'll understand
 

1445
00:26:00,559 --> 00:26:02,789
class so that you'll understand
the discussion in the class some of the

1446
00:26:02,789 --> 00:26:02,799
the discussion in the class some of the
 

1447
00:26:02,799 --> 00:26:04,230
the discussion in the class some of the
lectures are devoted to

1448
00:26:04,230 --> 00:26:04,240
lectures are devoted to
 

1449
00:26:04,240 --> 00:26:07,110
lectures are devoted to
background to help you do the labs sort

1450
00:26:07,110 --> 00:26:07,120
background to help you do the labs sort
 

1451
00:26:07,120 --> 00:26:09,830
background to help you do the labs sort
of explanations about c works of how the

1452
00:26:09,830 --> 00:26:09,840
of explanations about c works of how the
 

1453
00:26:09,840 --> 00:26:11,990
of explanations about c works of how the
risc 5 which is the microprocessor that

1454
00:26:11,990 --> 00:26:12,000
risc 5 which is the microprocessor that
 

1455
00:26:12,000 --> 00:26:13,669
risc 5 which is the microprocessor that
we'll be using

1456
00:26:13,669 --> 00:26:13,679
we'll be using
 

1457
00:26:13,679 --> 00:26:16,149
we'll be using
that you'll find helpful in in

1458
00:26:16,149 --> 00:26:16,159
that you'll find helpful in in
 

1459
00:26:16,159 --> 00:26:17,669
that you'll find helpful in in
understanding how to do the labs

1460
00:26:17,669 --> 00:26:17,679
understanding how to do the labs
 

1461
00:26:17,679 --> 00:26:20,149
understanding how to do the labs
and towards the end of the course i will

1462
00:26:20,149 --> 00:26:20,159
and towards the end of the course i will
 

1463
00:26:20,159 --> 00:26:21,750
and towards the end of the course i will
spend some lectures

1464
00:26:21,750 --> 00:26:21,760
spend some lectures
 

1465
00:26:21,760 --> 00:26:24,310
spend some lectures
discussing some operating system papers

1466
00:26:24,310 --> 00:26:24,320
discussing some operating system papers
 

1467
00:26:24,320 --> 00:26:25,029
discussing some operating system papers
um

1468
00:26:25,029 --> 00:26:25,039
um
 

1469
00:26:25,039 --> 00:26:26,950
um
research papers and and some classic

1470
00:26:26,950 --> 00:26:26,960
research papers and and some classic
 

1471
00:26:26,960 --> 00:26:28,310
research papers and and some classic
papers in the field

1472
00:26:28,310 --> 00:26:28,320
papers in the field
 

1473
00:26:28,320 --> 00:26:30,310
papers in the field
which uh you know we'll ask that you

1474
00:26:30,310 --> 00:26:30,320
which uh you know we'll ask that you
 

1475
00:26:30,320 --> 00:26:31,510
which uh you know we'll ask that you
read before the lectures and then we'll

1476
00:26:31,510 --> 00:26:31,520
read before the lectures and then we'll
 

1477
00:26:31,520 --> 00:26:33,110
read before the lectures and then we'll
sort of talk about the

1478
00:26:33,110 --> 00:26:33,120
sort of talk about the
 

1479
00:26:33,120 --> 00:26:35,510
sort of talk about the
papers in during the lecture for all the

1480
00:26:35,510 --> 00:26:35,520
papers in during the lecture for all the
 

1481
00:26:35,520 --> 00:26:37,269
papers in during the lecture for all the
lectures or almost all the lectures

1482
00:26:37,269 --> 00:26:37,279
lectures or almost all the lectures
 

1483
00:26:37,279 --> 00:26:39,269
lectures or almost all the lectures
we ask that you submit a question about

1484
00:26:39,269 --> 00:26:39,279
we ask that you submit a question about
 

1485
00:26:39,279 --> 00:26:40,950
we ask that you submit a question about
the reading

1486
00:26:40,950 --> 00:26:40,960
the reading
 

1487
00:26:40,960 --> 00:26:44,310
the reading
for the lecture before the actual time

1488
00:26:44,310 --> 00:26:44,320
for the lecture before the actual time
 

1489
00:26:44,320 --> 00:26:45,190
for the lecture before the actual time
of the lecture

1490
00:26:45,190 --> 00:26:45,200
of the lecture
 

1491
00:26:45,200 --> 00:26:47,669
of the lecture
which many or all of you did for this

1492
00:26:47,669 --> 00:26:47,679
which many or all of you did for this
 

1493
00:26:47,679 --> 00:26:49,750
which many or all of you did for this
lecture for which thank you

1494
00:26:49,750 --> 00:26:49,760
lecture for which thank you
 

1495
00:26:49,760 --> 00:26:51,269
lecture for which thank you
and we will read those questions to help

1496
00:26:51,269 --> 00:26:51,279
and we will read those questions to help
 

1497
00:26:51,279 --> 00:26:53,190
and we will read those questions to help
us

1498
00:26:53,190 --> 00:26:53,200
us
 

1499
00:26:53,200 --> 00:26:55,269
us
guide us about what to talk about and

1500
00:26:55,269 --> 00:26:55,279
guide us about what to talk about and
 

1501
00:26:55,279 --> 00:26:56,470
guide us about what to talk about and
we'll try to answer

1502
00:26:56,470 --> 00:26:56,480
we'll try to answer
 

1503
00:26:56,480 --> 00:26:57,909
we'll try to answer
as many of the questions as we can

1504
00:26:57,909 --> 00:26:57,919
as many of the questions as we can
 

1505
00:26:57,919 --> 00:26:59,750
as many of the questions as we can
although there's rarely time

1506
00:26:59,750 --> 00:26:59,760
although there's rarely time
 

1507
00:26:59,760 --> 00:27:01,350
although there's rarely time
unfortunately for us to answer all of

1508
00:27:01,350 --> 00:27:01,360
unfortunately for us to answer all of
 

1509
00:27:01,360 --> 00:27:03,350
unfortunately for us to answer all of
them

1510
00:27:03,350 --> 00:27:03,360
them
 

1511
00:27:03,360 --> 00:27:06,310
them
the next big part the course of the labs

1512
00:27:06,310 --> 00:27:06,320
the next big part the course of the labs
 

1513
00:27:06,320 --> 00:27:07,750
the next big part the course of the labs
there's a programming lab

1514
00:27:07,750 --> 00:27:07,760
there's a programming lab
 

1515
00:27:07,760 --> 00:27:11,830
there's a programming lab
do almost every week

1516
00:27:11,830 --> 00:27:11,840
do almost every week
 

1517
00:27:11,840 --> 00:27:13,269
do almost every week
and the point of the labs is to help you

1518
00:27:13,269 --> 00:27:13,279
and the point of the labs is to help you
 

1519
00:27:13,279 --> 00:27:16,149
and the point of the labs is to help you
get hands-on experience with

1520
00:27:16,149 --> 00:27:16,159
get hands-on experience with
 

1521
00:27:16,159 --> 00:27:20,630
get hands-on experience with
implementing and using operating systems

1522
00:27:20,630 --> 00:27:20,640
implementing and using operating systems
 

1523
00:27:20,640 --> 00:27:23,750
implementing and using operating systems
um the lab that's due next week

1524
00:27:23,750 --> 00:27:23,760
um the lab that's due next week
 

1525
00:27:23,760 --> 00:27:26,070
um the lab that's due next week
is actually about using using about

1526
00:27:26,070 --> 00:27:26,080
is actually about using using about
 

1527
00:27:26,080 --> 00:27:27,510
is actually about using using about
writing applications that

1528
00:27:27,510 --> 00:27:27,520
writing applications that
 

1529
00:27:27,520 --> 00:27:29,190
writing applications that
make the call the system calls we'll be

1530
00:27:29,190 --> 00:27:29,200
make the call the system calls we'll be
 

1531
00:27:29,200 --> 00:27:31,430
make the call the system calls we'll be
talking about um

1532
00:27:31,430 --> 00:27:31,440
talking about um
 

1533
00:27:31,440 --> 00:27:33,269
talking about um
whereas most of those labs after that

1534
00:27:33,269 --> 00:27:33,279
whereas most of those labs after that
 

1535
00:27:33,279 --> 00:27:35,029
whereas most of those labs after that
are involve you

1536
00:27:35,029 --> 00:27:35,039
are involve you
 

1537
00:27:35,039 --> 00:27:37,029
are involve you
either implementing basic operating

1538
00:27:37,029 --> 00:27:37,039
either implementing basic operating
 

1539
00:27:37,039 --> 00:27:38,870
either implementing basic operating
system features or adding

1540
00:27:38,870 --> 00:27:38,880
system features or adding
 

1541
00:27:38,880 --> 00:27:42,710
system features or adding
uh kernel extensions to the xv6

1542
00:27:42,710 --> 00:27:42,720
uh kernel extensions to the xv6
 

1543
00:27:42,720 --> 00:27:45,590
uh kernel extensions to the xv6
uh operating system the very last slab

1544
00:27:45,590 --> 00:27:45,600
uh operating system the very last slab
 

1545
00:27:45,600 --> 00:27:46,149
uh operating system the very last slab
and

1546
00:27:46,149 --> 00:27:46,159
and
 

1547
00:27:46,159 --> 00:27:47,990
and
one in which you actually add a network

1548
00:27:47,990 --> 00:27:48,000
one in which you actually add a network
 

1549
00:27:48,000 --> 00:27:49,830
one in which you actually add a network
stack and a network driver so you'll be

1550
00:27:49,830 --> 00:27:49,840
stack and a network driver so you'll be
 

1551
00:27:49,840 --> 00:27:51,430
stack and a network driver so you'll be
able to connect in over the network

1552
00:27:51,430 --> 00:27:51,440
able to connect in over the network
 

1553
00:27:51,440 --> 00:27:55,590
able to connect in over the network
to the operating system that you run um

1554
00:27:55,590 --> 00:27:55,600
to the operating system that you run um
 

1555
00:27:55,600 --> 00:27:57,190
to the operating system that you run um
you should if you have problems with the

1556
00:27:57,190 --> 00:27:57,200
you should if you have problems with the
 

1557
00:27:57,200 --> 00:27:59,750
you should if you have problems with the
labs uh there'll be office hours

1558
00:27:59,750 --> 00:27:59,760
labs uh there'll be office hours
 

1559
00:27:59,760 --> 00:28:03,190
labs uh there'll be office hours
that the um tas will hold in addition

1560
00:28:03,190 --> 00:28:03,200
that the um tas will hold in addition
 

1561
00:28:03,200 --> 00:28:04,710
that the um tas will hold in addition
you can

1562
00:28:04,710 --> 00:28:04,720
you can
 

1563
00:28:04,720 --> 00:28:07,110
you can
post questions to piazza and very often

1564
00:28:07,110 --> 00:28:07,120
post questions to piazza and very often
 

1565
00:28:07,120 --> 00:28:08,389
post questions to piazza and very often
you'll be able to get useful answers

1566
00:28:08,389 --> 00:28:08,399
you'll be able to get useful answers
 

1567
00:28:08,399 --> 00:28:10,070
you'll be able to get useful answers
from piazza

1568
00:28:10,070 --> 00:28:10,080
from piazza
 

1569
00:28:10,080 --> 00:28:13,190
from piazza
more quickly than from office hours

1570
00:28:13,190 --> 00:28:13,200
more quickly than from office hours
 

1571
00:28:13,200 --> 00:28:15,909
more quickly than from office hours
we welcome you discussing the labs

1572
00:28:15,909 --> 00:28:15,919
we welcome you discussing the labs
 

1573
00:28:15,919 --> 00:28:17,350
we welcome you discussing the labs
talking about the labs talking about how

1574
00:28:17,350 --> 00:28:17,360
talking about the labs talking about how
 

1575
00:28:17,360 --> 00:28:18,070
talking about the labs talking about how
to

1576
00:28:18,070 --> 00:28:18,080
to
 

1577
00:28:18,080 --> 00:28:21,190
to
design the lab solutions but we ask you

1578
00:28:21,190 --> 00:28:21,200
design the lab solutions but we ask you
 

1579
00:28:21,200 --> 00:28:22,470
design the lab solutions but we ask you
please do not look at other people's

1580
00:28:22,470 --> 00:28:22,480
please do not look at other people's
 

1581
00:28:22,480 --> 00:28:23,510
please do not look at other people's
solutions

1582
00:28:23,510 --> 00:28:23,520
solutions
 

1583
00:28:23,520 --> 00:28:25,350
solutions
for the labs please all the code you

1584
00:28:25,350 --> 00:28:25,360
for the labs please all the code you
 

1585
00:28:25,360 --> 00:28:26,630
for the labs please all the code you
write should be your own and

1586
00:28:26,630 --> 00:28:26,640
write should be your own and
 

1587
00:28:26,640 --> 00:28:29,590
write should be your own and
you shouldn't share code or look at

1588
00:28:29,590 --> 00:28:29,600
you shouldn't share code or look at
 

1589
00:28:29,600 --> 00:28:32,630
you shouldn't share code or look at
other solutions

1590
00:28:32,630 --> 00:28:32,640

 

1591
00:28:32,640 --> 00:28:35,669

the grading

1592
00:28:35,669 --> 00:28:35,679
the grading
 

1593
00:28:35,679 --> 00:28:39,990
the grading
for the course will be mostly determined

1594
00:28:39,990 --> 00:28:40,000
for the course will be mostly determined
 

1595
00:28:40,000 --> 00:28:42,950
for the course will be mostly determined
from the labs this year so 70 of the

1596
00:28:42,950 --> 00:28:42,960
from the labs this year so 70 of the
 

1597
00:28:42,960 --> 00:28:44,070
from the labs this year so 70 of the
grade will be

1598
00:28:44,070 --> 00:28:44,080
grade will be
 

1599
00:28:44,080 --> 00:28:47,990
grade will be
um uh based on

1600
00:28:47,990 --> 00:28:48,000
um uh based on
 

1601
00:28:48,000 --> 00:28:49,750
um uh based on
whether or not that your lab the lab you

1602
00:28:49,750 --> 00:28:49,760
whether or not that your lab the lab you
 

1603
00:28:49,760 --> 00:28:51,590
whether or not that your lab the lab you
submit passes the tests and we for

1604
00:28:51,590 --> 00:28:51,600
submit passes the tests and we for
 

1605
00:28:51,600 --> 00:28:53,590
submit passes the tests and we for
grading we run the same tests

1606
00:28:53,590 --> 00:28:53,600
grading we run the same tests
 

1607
00:28:53,600 --> 00:28:55,590
grading we run the same tests
um that we supply you so if your lab

1608
00:28:55,590 --> 00:28:55,600
um that we supply you so if your lab
 

1609
00:28:55,600 --> 00:28:57,590
um that we supply you so if your lab
passes the all the tests that we give

1610
00:28:57,590 --> 00:28:57,600
passes the all the tests that we give
 

1611
00:28:57,600 --> 00:28:59,110
passes the all the tests that we give
you then chances are you get full credit

1612
00:28:59,110 --> 00:28:59,120
you then chances are you get full credit
 

1613
00:28:59,120 --> 00:29:00,389
you then chances are you get full credit
for the lab

1614
00:29:00,389 --> 00:29:00,399
for the lab
 

1615
00:29:00,399 --> 00:29:03,590
for the lab
um 20 of the grade

1616
00:29:03,590 --> 00:29:03,600
um 20 of the grade
 

1617
00:29:03,600 --> 00:29:05,590
um 20 of the grade
um is going to be from lab check off

1618
00:29:05,590 --> 00:29:05,600
um is going to be from lab check off
 

1619
00:29:05,600 --> 00:29:06,630
um is going to be from lab check off
meetings

1620
00:29:06,630 --> 00:29:06,640
meetings
 

1621
00:29:06,640 --> 00:29:09,430
meetings
uh we'll for each of you we'll pick a

1622
00:29:09,430 --> 00:29:09,440
uh we'll for each of you we'll pick a
 

1623
00:29:09,440 --> 00:29:11,269
uh we'll for each of you we'll pick a
couple of randomly selected labs

1624
00:29:11,269 --> 00:29:11,279
couple of randomly selected labs
 

1625
00:29:11,279 --> 00:29:13,350
couple of randomly selected labs
and one of the teams will talk to you

1626
00:29:13,350 --> 00:29:13,360
and one of the teams will talk to you
 

1627
00:29:13,360 --> 00:29:14,389
and one of the teams will talk to you
and ask you questions about your

1628
00:29:14,389 --> 00:29:14,399
and ask you questions about your
 

1629
00:29:14,399 --> 00:29:17,430
and ask you questions about your
implementation just to make sure that

1630
00:29:17,430 --> 00:29:17,440
implementation just to make sure that
 

1631
00:29:17,440 --> 00:29:20,149
implementation just to make sure that
you really understand what's going on so

1632
00:29:20,149 --> 00:29:20,159
you really understand what's going on so
 

1633
00:29:20,159 --> 00:29:20,630
you really understand what's going on so
this

1634
00:29:20,630 --> 00:29:20,640
this
 

1635
00:29:20,640 --> 00:29:23,830
this
lab check-offs

1636
00:29:23,830 --> 00:29:23,840

 

1637
00:29:23,840 --> 00:29:27,350

there's um ten percent remaining

1638
00:29:27,350 --> 00:29:27,360
there's um ten percent remaining
 

1639
00:29:27,360 --> 00:29:30,549
there's um ten percent remaining
there's a question be like a

1640
00:29:30,549 --> 00:29:30,559
there's a question be like a
 

1641
00:29:30,559 --> 00:29:33,350
there's a question be like a
yes or no one or zero type of thing or

1642
00:29:33,350 --> 00:29:33,360
yes or no one or zero type of thing or
 

1643
00:29:33,360 --> 00:29:35,029
yes or no one or zero type of thing or
would they be

1644
00:29:35,029 --> 00:29:35,039
would they be
 

1645
00:29:35,039 --> 00:29:38,230
would they be
like could someone get like if they

1646
00:29:38,230 --> 00:29:38,240
like could someone get like if they
 

1647
00:29:38,240 --> 00:29:40,389
like could someone get like if they
answered some of the questions right but

1648
00:29:40,389 --> 00:29:40,399
answered some of the questions right but
 

1649
00:29:40,399 --> 00:29:41,669
answered some of the questions right but
not all the questions right would they

1650
00:29:41,669 --> 00:29:41,679
not all the questions right would they
 

1651
00:29:41,679 --> 00:29:42,070
not all the questions right would they
get

1652
00:29:42,070 --> 00:29:42,080
get
 

1653
00:29:42,080 --> 00:29:45,269
get
in between so they're great you know i

1654
00:29:45,269 --> 00:29:45,279
in between so they're great you know i
 

1655
00:29:45,279 --> 00:29:47,350
in between so they're great you know i
haven't thought this through

1656
00:29:47,350 --> 00:29:47,360
haven't thought this through
 

1657
00:29:47,360 --> 00:29:49,909
haven't thought this through
um there's certainly room for partial

1658
00:29:49,909 --> 00:29:49,919
um there's certainly room for partial
 

1659
00:29:49,919 --> 00:29:51,430
um there's certainly room for partial
credit but

1660
00:29:51,430 --> 00:29:51,440
credit but
 

1661
00:29:51,440 --> 00:29:53,750
credit but
it's not a it won't be binary it'll

1662
00:29:53,750 --> 00:29:53,760
it's not a it won't be binary it'll
 

1663
00:29:53,760 --> 00:29:54,789
it's not a it won't be binary it'll
definitely be

1664
00:29:54,789 --> 00:29:54,799
definitely be
 

1665
00:29:54,799 --> 00:29:59,110
definitely be
you can receive partial credit okay

1666
00:29:59,110 --> 00:29:59,120
you can receive partial credit okay
 

1667
00:29:59,120 --> 00:30:01,830
you can receive partial credit okay
all right um the last 10 is going to be

1668
00:30:01,830 --> 00:30:01,840
all right um the last 10 is going to be
 

1669
00:30:01,840 --> 00:30:03,029
all right um the last 10 is going to be
driven by the homework

1670
00:30:03,029 --> 00:30:03,039
driven by the homework
 

1671
00:30:03,039 --> 00:30:05,990
driven by the homework
and participation during lecture and in

1672
00:30:05,990 --> 00:30:06,000
and participation during lecture and in
 

1673
00:30:06,000 --> 00:30:08,950
and participation during lecture and in
piazza

1674
00:30:08,950 --> 00:30:08,960

 

1675
00:30:08,960 --> 00:30:13,190

there'll be no exam or quizzes

1676
00:30:13,190 --> 00:30:13,200

 

1677
00:30:13,200 --> 00:30:17,029

this year um and so what that means is

1678
00:30:17,029 --> 00:30:17,039
this year um and so what that means is
 

1679
00:30:17,039 --> 00:30:18,389
this year um and so what that means is
that most of the

1680
00:30:18,389 --> 00:30:18,399
that most of the
 

1681
00:30:18,399 --> 00:30:21,909
that most of the
you know ninety percent of the grade is

1682
00:30:21,909 --> 00:30:21,919
you know ninety percent of the grade is
 

1683
00:30:21,919 --> 00:30:23,750
you know ninety percent of the grade is
being driven by the lab so

1684
00:30:23,750 --> 00:30:23,760
being driven by the lab so
 

1685
00:30:23,760 --> 00:30:25,750
being driven by the lab so
you know you should spend a lot of time

1686
00:30:25,750 --> 00:30:25,760
you know you should spend a lot of time
 

1687
00:30:25,760 --> 00:30:27,430
you know you should spend a lot of time
in the labs

1688
00:30:27,430 --> 00:30:27,440
in the labs
 

1689
00:30:27,440 --> 00:30:29,830
in the labs
make sure that you start early and have

1690
00:30:29,830 --> 00:30:29,840
make sure that you start early and have
 

1691
00:30:29,840 --> 00:30:31,269
make sure that you start early and have
enough time to

1692
00:30:31,269 --> 00:30:31,279
enough time to
 

1693
00:30:31,279 --> 00:30:34,070
enough time to
complete them and work out bugs in order

1694
00:30:34,070 --> 00:30:34,080
complete them and work out bugs in order
 

1695
00:30:34,080 --> 00:30:37,190
complete them and work out bugs in order
to get full credit

1696
00:30:37,190 --> 00:30:37,200
to get full credit
 

1697
00:30:37,200 --> 00:30:39,430
to get full credit
and you know as a result of that this is

1698
00:30:39,430 --> 00:30:39,440
and you know as a result of that this is
 

1699
00:30:39,440 --> 00:30:41,990
and you know as a result of that this is
going to be a very kind of hands-on

1700
00:30:41,990 --> 00:30:42,000
going to be a very kind of hands-on
 

1701
00:30:42,000 --> 00:30:44,950
going to be a very kind of hands-on
software oriented course or any

1702
00:30:44,950 --> 00:30:44,960
software oriented course or any
 

1703
00:30:44,960 --> 00:30:47,110
software oriented course or any
questions about the

1704
00:30:47,110 --> 00:30:47,120
questions about the
 

1705
00:30:47,120 --> 00:30:53,669
questions about the
machinery of the course

1706
00:30:53,669 --> 00:30:53,679

 

1707
00:30:53,679 --> 00:30:56,549

uh we've got a couple questions in chat

1708
00:30:56,549 --> 00:30:56,559
uh we've got a couple questions in chat
 

1709
00:30:56,559 --> 00:30:59,029
uh we've got a couple questions in chat
so the first is a logistical question

1710
00:30:59,029 --> 00:30:59,039
so the first is a logistical question
 

1711
00:30:59,039 --> 00:31:01,350
so the first is a logistical question
currently 6s081 isn't listed as usable

1712
00:31:01,350 --> 00:31:01,360
currently 6s081 isn't listed as usable
 

1713
00:31:01,360 --> 00:31:03,830
currently 6s081 isn't listed as usable
for the systems concentration in the

1714
00:31:03,830 --> 00:31:03,840
for the systems concentration in the
 

1715
00:31:03,840 --> 00:31:05,350
for the systems concentration in the
are there plans added to the list of

1716
00:31:05,350 --> 00:31:05,360
are there plans added to the list of
 

1717
00:31:05,360 --> 00:31:07,509
are there plans added to the list of
classes later i think for that

1718
00:31:07,509 --> 00:31:07,519
classes later i think for that
 

1719
00:31:07,519 --> 00:31:10,950
classes later i think for that
because it's not an aags it's an aus

1720
00:31:10,950 --> 00:31:10,960
because it's not an aags it's an aus
 

1721
00:31:10,960 --> 00:31:12,950
because it's not an aags it's an aus
it can't be used to fulfill mn

1722
00:31:12,950 --> 00:31:12,960
it can't be used to fulfill mn
 

1723
00:31:12,960 --> 00:31:14,389
it can't be used to fulfill mn
requirements as it's not a graduate

1724
00:31:14,389 --> 00:31:14,399
requirements as it's not a graduate
 

1725
00:31:14,399 --> 00:31:14,789
requirements as it's not a graduate
level

1726
00:31:14,789 --> 00:31:14,799
level
 

1727
00:31:14,799 --> 00:31:19,509
level
class but

1728
00:31:19,509 --> 00:31:19,519
class but
 

1729
00:31:19,519 --> 00:31:21,990
class but
um and then we have is the only homework

1730
00:31:21,990 --> 00:31:22,000
um and then we have is the only homework
 

1731
00:31:22,000 --> 00:31:23,350
um and then we have is the only homework
to submit questions looking at the

1732
00:31:23,350 --> 00:31:23,360
to submit questions looking at the
 

1733
00:31:23,360 --> 00:31:28,149
to submit questions looking at the
calendar that appears to be the case

1734
00:31:28,149 --> 00:31:28,159

 

1735
00:31:28,159 --> 00:31:31,350

unless i'm forgetting something i think

1736
00:31:31,350 --> 00:31:31,360
unless i'm forgetting something i think
 

1737
00:31:31,360 --> 00:31:32,070
unless i'm forgetting something i think
that's the case

1738
00:31:32,070 --> 00:31:32,080
that's the case
 

1739
00:31:32,080 --> 00:31:35,590
that's the case
yes so

1740
00:31:35,590 --> 00:31:35,600
yes so
 

1741
00:31:35,600 --> 00:31:38,710
yes so
have uh are there gonna be cutoffs for

1742
00:31:38,710 --> 00:31:38,720
have uh are there gonna be cutoffs for
 

1743
00:31:38,720 --> 00:31:40,630
have uh are there gonna be cutoffs for
grades like x percent gets an a

1744
00:31:40,630 --> 00:31:40,640
grades like x percent gets an a
 

1745
00:31:40,640 --> 00:31:43,909
grades like x percent gets an a
y percent gets a b etc

1746
00:31:43,909 --> 00:31:43,919
y percent gets a b etc
 

1747
00:31:43,919 --> 00:31:48,149
y percent gets a b etc
no no um

1748
00:31:48,149 --> 00:31:48,159

 

1749
00:31:48,159 --> 00:31:51,269

you know we're going to try to

1750
00:31:51,269 --> 00:31:51,279

 

1751
00:31:51,279 --> 00:31:54,470

free student estimate um

1752
00:31:54,470 --> 00:31:54,480
free student estimate um
 

1753
00:31:54,480 --> 00:31:56,870
free student estimate um
our impression of how well you've

1754
00:31:56,870 --> 00:31:56,880
our impression of how well you've
 

1755
00:31:56,880 --> 00:31:59,190
our impression of how well you've
understood the material

1756
00:31:59,190 --> 00:31:59,200
understood the material
 

1757
00:31:59,200 --> 00:32:00,470
understood the material
and assign a grade based on that so

1758
00:32:00,470 --> 00:32:00,480
and assign a grade based on that so
 

1759
00:32:00,480 --> 00:32:07,909
and assign a grade based on that so
there's there's no predetermined cutoffs

1760
00:32:07,909 --> 00:32:07,919

 

1761
00:32:07,919 --> 00:32:13,590

all right anything else

1762
00:32:13,590 --> 00:32:13,600

 

1763
00:32:13,600 --> 00:32:16,789

all right just real quick for folks

1764
00:32:16,789 --> 00:32:16,799
all right just real quick for folks
 

1765
00:32:16,799 --> 00:32:21,029
all right just real quick for folks
in the chat uh asking about the

1766
00:32:21,029 --> 00:32:21,039
in the chat uh asking about the
 

1767
00:32:21,039 --> 00:32:23,190
in the chat uh asking about the
concentration requirement i'm not a

1768
00:32:23,190 --> 00:32:23,200
concentration requirement i'm not a
 

1769
00:32:23,200 --> 00:32:24,470
concentration requirement i'm not a
hundred percent certain

1770
00:32:24,470 --> 00:32:24,480
hundred percent certain
 

1771
00:32:24,480 --> 00:32:27,269
hundred percent certain
uh but six soa one is not it's like a

1772
00:32:27,269 --> 00:32:27,279
uh but six soa one is not it's like a
 

1773
00:32:27,279 --> 00:32:28,070
uh but six soa one is not it's like a
temporary number

1774
00:32:28,070 --> 00:32:28,080
temporary number
 

1775
00:32:28,080 --> 00:32:29,909
temporary number
before the class gets this official one

1776
00:32:29,909 --> 00:32:29,919
before the class gets this official one
 

1777
00:32:29,919 --> 00:32:31,669
before the class gets this official one
so it certainly won't be

1778
00:32:31,669 --> 00:32:31,679
so it certainly won't be
 

1779
00:32:31,679 --> 00:32:34,070
so it certainly won't be
uh listed anywhere if you needed to

1780
00:32:34,070 --> 00:32:34,080
uh listed anywhere if you needed to
 

1781
00:32:34,080 --> 00:32:35,430
uh listed anywhere if you needed to
fulfill a concentration i think your

1782
00:32:35,430 --> 00:32:35,440
fulfill a concentration i think your
 

1783
00:32:35,440 --> 00:32:36,710
fulfill a concentration i think your
best bet is probably to fill out a

1784
00:32:36,710 --> 00:32:36,720
best bet is probably to fill out a
 

1785
00:32:36,720 --> 00:32:37,350
best bet is probably to fill out a
petition

1786
00:32:37,350 --> 00:32:37,360
petition
 

1787
00:32:37,360 --> 00:32:39,509
petition
or to email somebody like katrina

1788
00:32:39,509 --> 00:32:39,519
or to email somebody like katrina
 

1789
00:32:39,519 --> 00:32:40,710
or to email somebody like katrina
lakerts

1790
00:32:40,710 --> 00:32:40,720
lakerts
 

1791
00:32:40,720 --> 00:32:43,830
lakerts
to see what the status is we don't

1792
00:32:43,830 --> 00:32:43,840
to see what the status is we don't
 

1793
00:32:43,840 --> 00:32:45,430
to see what the status is we don't
control

1794
00:32:45,430 --> 00:32:45,440
control
 

1795
00:32:45,440 --> 00:32:48,149
control
you know what what classes fill these

1796
00:32:48,149 --> 00:32:48,159
you know what what classes fill these
 

1797
00:32:48,159 --> 00:32:49,190
you know what what classes fill these
kind of requirements

1798
00:32:49,190 --> 00:32:49,200
kind of requirements
 

1799
00:32:49,200 --> 00:32:51,990
kind of requirements
unfortunately and for what language

1800
00:32:51,990 --> 00:32:52,000
unfortunately and for what language
 

1801
00:32:52,000 --> 00:32:58,710
unfortunately and for what language
we'll be using the class will be in c

1802
00:32:58,710 --> 00:32:58,720

 

1803
00:32:58,720 --> 00:33:02,389

all right um

1804
00:33:02,389 --> 00:33:02,399

 

1805
00:33:02,399 --> 00:33:03,990

all right for the rest of the lecture i

1806
00:33:03,990 --> 00:33:04,000
all right for the rest of the lecture i
 

1807
00:33:04,000 --> 00:33:06,149
all right for the rest of the lecture i
want to uh talk about how

1808
00:33:06,149 --> 00:33:06,159
want to uh talk about how
 

1809
00:33:06,159 --> 00:33:08,830
want to uh talk about how
um house what system calls look like to

1810
00:33:08,830 --> 00:33:08,840
um house what system calls look like to
 

1811
00:33:08,840 --> 00:33:11,269
um house what system calls look like to
applications

1812
00:33:11,269 --> 00:33:11,279
applications
 

1813
00:33:11,279 --> 00:33:13,750
applications
and you know since the system calls are

1814
00:33:13,750 --> 00:33:13,760
and you know since the system calls are
 

1815
00:33:13,760 --> 00:33:14,470
and you know since the system calls are
the

1816
00:33:14,470 --> 00:33:14,480
the
 

1817
00:33:14,480 --> 00:33:16,549
the
interface to the services that the

1818
00:33:16,549 --> 00:33:16,559
interface to the services that the
 

1819
00:33:16,559 --> 00:33:18,149
interface to the services that the
operating system provides it

1820
00:33:18,149 --> 00:33:18,159
operating system provides it
 

1821
00:33:18,159 --> 00:33:19,750
operating system provides it
it's actually pretty important what

1822
00:33:19,750 --> 00:33:19,760
it's actually pretty important what
 

1823
00:33:19,760 --> 00:33:20,950
it's actually pretty important what
those system files look like what

1824
00:33:20,950 --> 00:33:20,960
those system files look like what
 

1825
00:33:20,960 --> 00:33:23,350
those system files look like what
applications expect from system calls

1826
00:33:23,350 --> 00:33:23,360
applications expect from system calls
 

1827
00:33:23,360 --> 00:33:25,029
applications expect from system calls
and how they behave so it's sort of

1828
00:33:25,029 --> 00:33:25,039
and how they behave so it's sort of
 

1829
00:33:25,039 --> 00:33:26,549
and how they behave so it's sort of
worth understanding what the interface

1830
00:33:26,549 --> 00:33:26,559
worth understanding what the interface
 

1831
00:33:26,559 --> 00:33:29,590
worth understanding what the interface
looks like

1832
00:33:29,590 --> 00:33:29,600

 

1833
00:33:29,600 --> 00:33:31,269

you'll be using the system calls we talk

1834
00:33:31,269 --> 00:33:31,279
you'll be using the system calls we talk
 

1835
00:33:31,279 --> 00:33:33,350
you'll be using the system calls we talk
about in the first lab

1836
00:33:33,350 --> 00:33:33,360
about in the first lab
 

1837
00:33:33,360 --> 00:33:36,149
about in the first lab
and extending and improving the

1838
00:33:36,149 --> 00:33:36,159
and extending and improving the
 

1839
00:33:36,159 --> 00:33:37,110
and extending and improving the
implementation

1840
00:33:37,110 --> 00:33:37,120
implementation
 

1841
00:33:37,120 --> 00:33:38,710
implementation
internal implementation of these system

1842
00:33:38,710 --> 00:33:38,720
internal implementation of these system
 

1843
00:33:38,720 --> 00:33:41,029
internal implementation of these system
calls in subsequent labs

1844
00:33:41,029 --> 00:33:41,039
calls in subsequent labs
 

1845
00:33:41,039 --> 00:33:43,509
calls in subsequent labs
what i'm going to do is show some simple

1846
00:33:43,509 --> 00:33:43,519
what i'm going to do is show some simple
 

1847
00:33:43,519 --> 00:33:44,470
what i'm going to do is show some simple
examples

1848
00:33:44,470 --> 00:33:44,480
examples
 

1849
00:33:44,480 --> 00:33:48,070
examples
of little programs

1850
00:33:48,070 --> 00:33:48,080

 

1851
00:33:48,080 --> 00:33:51,669

that call system calls and then i'll run

1852
00:33:51,669 --> 00:33:51,679
that call system calls and then i'll run
 

1853
00:33:51,679 --> 00:33:51,990
that call system calls and then i'll run
them

1854
00:33:51,990 --> 00:33:52,000
them
 

1855
00:33:52,000 --> 00:33:55,509
them
and and next v6 for you um

1856
00:33:55,509 --> 00:33:55,519
and and next v6 for you um
 

1857
00:33:55,519 --> 00:33:58,710
and and next v6 for you um
i'm going to run them the xv6 is a it's

1858
00:33:58,710 --> 00:33:58,720
i'm going to run them the xv6 is a it's
 

1859
00:33:58,720 --> 00:33:59,430
i'm going to run them the xv6 is a it's
a unix

1860
00:33:59,430 --> 00:33:59,440
a unix
 

1861
00:33:59,440 --> 00:34:01,590
a unix
a simplified unix-like operating system

1862
00:34:01,590 --> 00:34:01,600
a simplified unix-like operating system
 

1863
00:34:01,600 --> 00:34:02,950
a simplified unix-like operating system
unix is a

1864
00:34:02,950 --> 00:34:02,960
unix is a
 

1865
00:34:02,960 --> 00:34:06,470
unix is a
old operating system sort of at least

1866
00:34:06,470 --> 00:34:06,480
old operating system sort of at least
 

1867
00:34:06,480 --> 00:34:08,069
old operating system sort of at least
intellectual basis for many

1868
00:34:08,069 --> 00:34:08,079
intellectual basis for many
 

1869
00:34:08,079 --> 00:34:09,589
intellectual basis for many
present day operating systems such as

1870
00:34:09,589 --> 00:34:09,599
present day operating systems such as
 

1871
00:34:09,599 --> 00:34:11,349
present day operating systems such as
linux and os x

1872
00:34:11,349 --> 00:34:11,359
linux and os x
 

1873
00:34:11,359 --> 00:34:14,550
linux and os x
so it's in very common use

1874
00:34:14,550 --> 00:34:14,560
so it's in very common use
 

1875
00:34:14,560 --> 00:34:18,069
so it's in very common use
xv6 our teaching operating system is

1876
00:34:18,069 --> 00:34:18,079
xv6 our teaching operating system is
 

1877
00:34:18,079 --> 00:34:19,750
xv6 our teaching operating system is
much simpler

1878
00:34:19,750 --> 00:34:19,760
much simpler
 

1879
00:34:19,760 --> 00:34:22,230
much simpler
it's sort of inspired by unix and has

1880
00:34:22,230 --> 00:34:22,240
it's sort of inspired by unix and has
 

1881
00:34:22,240 --> 00:34:23,750
it's sort of inspired by unix and has
the same overall structure but is

1882
00:34:23,750 --> 00:34:23,760
the same overall structure but is
 

1883
00:34:23,760 --> 00:34:26,950
the same overall structure but is
dramatically simpler than any real unix

1884
00:34:26,950 --> 00:34:26,960
dramatically simpler than any real unix
 

1885
00:34:26,960 --> 00:34:30,629
dramatically simpler than any real unix
operating system

1886
00:34:30,629 --> 00:34:30,639

 

1887
00:34:30,639 --> 00:34:33,829

and it's simple enough that hopefully um

1888
00:34:33,829 --> 00:34:33,839
and it's simple enough that hopefully um
 

1889
00:34:33,839 --> 00:34:34,710
and it's simple enough that hopefully um
you know

1890
00:34:34,710 --> 00:34:34,720
you know
 

1891
00:34:34,720 --> 00:34:36,550
you know
it would be relatively straightforward

1892
00:34:36,550 --> 00:34:36,560
it would be relatively straightforward
 

1893
00:34:36,560 --> 00:34:38,550
it would be relatively straightforward
for you to read all the source code

1894
00:34:38,550 --> 00:34:38,560
for you to read all the source code
 

1895
00:34:38,560 --> 00:34:41,109
for you to read all the source code
as well as read the book um in a couple

1896
00:34:41,109 --> 00:34:41,119
as well as read the book um in a couple
 

1897
00:34:41,119 --> 00:34:42,629
as well as read the book um in a couple
of weeks certainly during the semester

1898
00:34:42,629 --> 00:34:42,639
of weeks certainly during the semester
 

1899
00:34:42,639 --> 00:34:43,589
of weeks certainly during the semester
in order to

1900
00:34:43,589 --> 00:34:43,599
in order to
 

1901
00:34:43,599 --> 00:34:45,510
in order to
kind of understand all of what happens

1902
00:34:45,510 --> 00:34:45,520
kind of understand all of what happens
 

1903
00:34:45,520 --> 00:34:49,589
kind of understand all of what happens
inside xv6

1904
00:34:49,589 --> 00:34:49,599

 

1905
00:34:49,599 --> 00:34:53,109

x86 runs on the risc-5 processor

1906
00:34:53,109 --> 00:34:53,119
x86 runs on the risc-5 processor
 

1907
00:34:53,119 --> 00:34:55,430
x86 runs on the risc-5 processor
risc-5 microprocessor and this is the

1908
00:34:55,430 --> 00:34:55,440
risc-5 microprocessor and this is the
 

1909
00:34:55,440 --> 00:34:57,589
risc-5 microprocessor and this is the
same microprocessor that's the focus of

1910
00:34:57,589 --> 00:34:57,599
same microprocessor that's the focus of
 

1911
00:34:57,599 --> 00:34:59,910
same microprocessor that's the focus of
recent 6004

1912
00:34:59,910 --> 00:34:59,920
recent 6004
 

1913
00:34:59,920 --> 00:35:02,950
recent 6004
so many of you may actually know quite a

1914
00:35:02,950 --> 00:35:02,960
so many of you may actually know quite a
 

1915
00:35:02,960 --> 00:35:06,630
so many of you may actually know quite a
bit about the risk 5 instruction set

1916
00:35:06,630 --> 00:35:06,640
bit about the risk 5 instruction set
 

1917
00:35:06,640 --> 00:35:09,430
bit about the risk 5 instruction set
in theory you could run xv6 on top of a

1918
00:35:09,430 --> 00:35:09,440
in theory you could run xv6 on top of a
 

1919
00:35:09,440 --> 00:35:11,430
in theory you could run xv6 on top of a
risk 5 computer

1920
00:35:11,430 --> 00:35:11,440
risk 5 computer
 

1921
00:35:11,440 --> 00:35:14,550
risk 5 computer
and people have done that

1922
00:35:14,550 --> 00:35:14,560

 

1923
00:35:14,560 --> 00:35:17,589

but we're going to run it under the qmu

1924
00:35:17,589 --> 00:35:17,599
but we're going to run it under the qmu
 

1925
00:35:17,599 --> 00:35:19,589
but we're going to run it under the qmu
machine emulator so just to write this

1926
00:35:19,589 --> 00:35:19,599
machine emulator so just to write this
 

1927
00:35:19,599 --> 00:35:20,710
machine emulator so just to write this
down we got

1928
00:35:20,710 --> 00:35:20,720
down we got
 

1929
00:35:20,720 --> 00:35:24,150
down we got
our operating system is xv6

1930
00:35:24,150 --> 00:35:24,160
our operating system is xv6
 

1931
00:35:24,160 --> 00:35:28,390
our operating system is xv6
it runs on risk 5 microprocessor

1932
00:35:28,390 --> 00:35:28,400
it runs on risk 5 microprocessor
 

1933
00:35:28,400 --> 00:35:30,390
it runs on risk 5 microprocessor
and not just risk 5 microprocessor but

1934
00:35:30,390 --> 00:35:30,400
and not just risk 5 microprocessor but
 

1935
00:35:30,400 --> 00:35:31,829
and not just risk 5 microprocessor but
we assume a certain amount of

1936
00:35:31,829 --> 00:35:31,839
we assume a certain amount of
 

1937
00:35:31,839 --> 00:35:34,069
we assume a certain amount of
surrounding hardware like

1938
00:35:34,069 --> 00:35:34,079
surrounding hardware like
 

1939
00:35:34,079 --> 00:35:37,750
surrounding hardware like
memory and a disk and a console

1940
00:35:37,750 --> 00:35:37,760
memory and a disk and a console
 

1941
00:35:37,760 --> 00:35:40,950
memory and a disk and a console
interface for us to talk to it um but we

1942
00:35:40,950 --> 00:35:40,960
interface for us to talk to it um but we
 

1943
00:35:40,960 --> 00:35:41,510
interface for us to talk to it um but we
actually run

1944
00:35:41,510 --> 00:35:41,520
actually run
 

1945
00:35:41,520 --> 00:35:45,349
actually run
under the qmu

1946
00:35:45,349 --> 00:35:45,359
under the qmu
 

1947
00:35:45,359 --> 00:35:49,270
under the qmu
machine simulator so that which

1948
00:35:49,270 --> 00:35:49,280
machine simulator so that which
 

1949
00:35:49,280 --> 00:35:51,670
machine simulator so that which
runs under linux so that all of you can

1950
00:35:51,670 --> 00:35:51,680
runs under linux so that all of you can
 

1951
00:35:51,680 --> 00:35:53,910
runs under linux so that all of you can
actually

1952
00:35:53,910 --> 00:35:53,920
actually
 

1953
00:35:53,920 --> 00:35:56,870
actually
run xv6 without having to have hardware

1954
00:35:56,870 --> 00:35:56,880
run xv6 without having to have hardware
 

1955
00:35:56,880 --> 00:35:57,270
run xv6 without having to have hardware
okay

1956
00:35:57,270 --> 00:35:57,280
okay
 

1957
00:35:57,280 --> 00:36:10,829
okay
so i'm gonna switch to uh showing you

1958
00:36:10,829 --> 00:36:10,839

 

1959
00:36:10,839 --> 00:36:15,589

code

1960
00:36:15,589 --> 00:36:15,599

 

1961
00:36:15,599 --> 00:36:18,630

all right so um first thing is

1962
00:36:18,630 --> 00:36:18,640
all right so um first thing is
 

1963
00:36:18,640 --> 00:36:22,710
all right so um first thing is
i've uh set up xv6 on my laptop

1964
00:36:22,710 --> 00:36:22,720
i've uh set up xv6 on my laptop
 

1965
00:36:22,720 --> 00:36:25,190
i've uh set up xv6 on my laptop
um and i'm going to run it and type make

1966
00:36:25,190 --> 00:36:25,200
um and i'm going to run it and type make
 

1967
00:36:25,200 --> 00:36:26,710
um and i'm going to run it and type make
qmu which you'll find yourself doing

1968
00:36:26,710 --> 00:36:26,720
qmu which you'll find yourself doing
 

1969
00:36:26,720 --> 00:36:28,230
qmu which you'll find yourself doing
quite a bit during the labs

1970
00:36:28,230 --> 00:36:28,240
quite a bit during the labs
 

1971
00:36:28,240 --> 00:36:30,790
quite a bit during the labs
um which compiles xv6 it's written in c

1972
00:36:30,790 --> 00:36:30,800
um which compiles xv6 it's written in c
 

1973
00:36:30,800 --> 00:36:32,470
um which compiles xv6 it's written in c
so it's compiled with a

1974
00:36:32,470 --> 00:36:32,480
so it's compiled with a
 

1975
00:36:32,480 --> 00:36:35,510
so it's compiled with a
c compiler maybe i'll make

1976
00:36:35,510 --> 00:36:35,520
c compiler maybe i'll make
 

1977
00:36:35,520 --> 00:36:37,910
c compiler maybe i'll make
clean for you so you can see the actual

1978
00:36:37,910 --> 00:36:37,920
clean for you so you can see the actual
 

1979
00:36:37,920 --> 00:36:38,950
clean for you so you can see the actual
compilation

1980
00:36:38,950 --> 00:36:38,960
compilation
 

1981
00:36:38,960 --> 00:36:41,270
compilation
and i might type make qmu which has the

1982
00:36:41,270 --> 00:36:41,280
and i might type make qmu which has the
 

1983
00:36:41,280 --> 00:36:42,470
and i might type make qmu which has the
effect of

1984
00:36:42,470 --> 00:36:42,480
effect of
 

1985
00:36:42,480 --> 00:36:44,870
effect of
compiling and building xv6 kernel and

1986
00:36:44,870 --> 00:36:44,880
compiling and building xv6 kernel and
 

1987
00:36:44,880 --> 00:36:45,750
compiling and building xv6 kernel and
all the user

1988
00:36:45,750 --> 00:36:45,760
all the user
 

1989
00:36:45,760 --> 00:36:48,550
all the user
processes and then running them under

1990
00:36:48,550 --> 00:36:48,560
processes and then running them under
 

1991
00:36:48,560 --> 00:36:51,670
processes and then running them under
the qmu emulator

1992
00:36:51,670 --> 00:36:51,680
the qmu emulator
 

1993
00:36:51,680 --> 00:36:55,910
the qmu emulator
it takes a moment to run the compiles

1994
00:36:55,910 --> 00:36:55,920

 

1995
00:36:55,920 --> 00:36:59,270

and now we're up and running xv6 and the

1996
00:36:59,270 --> 00:36:59,280
and now we're up and running xv6 and the
 

1997
00:36:59,280 --> 00:37:02,310
and now we're up and running xv6 and the
dollar sign prompt you see is the shell

1998
00:37:02,310 --> 00:37:02,320
dollar sign prompt you see is the shell
 

1999
00:37:02,320 --> 00:37:05,190
dollar sign prompt you see is the shell
which is the command line interface to

2000
00:37:05,190 --> 00:37:05,200
which is the command line interface to
 

2001
00:37:05,200 --> 00:37:05,990
which is the command line interface to
xv6

2002
00:37:05,990 --> 00:37:06,000
xv6
 

2003
00:37:06,000 --> 00:37:09,670
xv6
modeled after the shell on unix which is

2004
00:37:09,670 --> 00:37:09,680
modeled after the shell on unix which is
 

2005
00:37:09,680 --> 00:37:12,150
modeled after the shell on unix which is
if you log into an athena workstation

2006
00:37:12,150 --> 00:37:12,160
if you log into an athena workstation
 

2007
00:37:12,160 --> 00:37:13,589
if you log into an athena workstation
it's the

2008
00:37:13,589 --> 00:37:13,599
it's the
 

2009
00:37:13,599 --> 00:37:15,510
it's the
it's like the shell that athena shows

2010
00:37:15,510 --> 00:37:15,520
it's like the shell that athena shows
 

2011
00:37:15,520 --> 00:37:18,150
it's like the shell that athena shows
you

2012
00:37:18,150 --> 00:37:18,160

 

2013
00:37:18,160 --> 00:37:20,630

x36 is itself tiny and it comes with a

2014
00:37:20,630 --> 00:37:20,640
x36 is itself tiny and it comes with a
 

2015
00:37:20,640 --> 00:37:23,030
x36 is itself tiny and it comes with a
small number of utility programs

2016
00:37:23,030 --> 00:37:23,040
small number of utility programs
 

2017
00:37:23,040 --> 00:37:25,829
small number of utility programs
and including for example the ls program

2018
00:37:25,829 --> 00:37:25,839
and including for example the ls program
 

2019
00:37:25,839 --> 00:37:27,510
and including for example the ls program
which i'm about to run

2020
00:37:27,510 --> 00:37:27,520
which i'm about to run
 

2021
00:37:27,520 --> 00:37:30,630
which i'm about to run
run ls and it gives me a list of all the

2022
00:37:30,630 --> 00:37:30,640
run ls and it gives me a list of all the
 

2023
00:37:30,640 --> 00:37:32,390
run ls and it gives me a list of all the
files in xv6 of which there are only

2024
00:37:32,390 --> 00:37:32,400
files in xv6 of which there are only
 

2025
00:37:32,400 --> 00:37:34,069
files in xv6 of which there are only
about two dozen

2026
00:37:34,069 --> 00:37:34,079
about two dozen
 

2027
00:37:34,079 --> 00:37:37,190
about two dozen
including things like grep and kill and

2028
00:37:37,190 --> 00:37:37,200
including things like grep and kill and
 

2029
00:37:37,200 --> 00:37:38,069
including things like grep and kill and
make deer

2030
00:37:38,069 --> 00:37:38,079
make deer
 

2031
00:37:38,079 --> 00:37:41,109
make deer
and rn which may be familiar to you as

2032
00:37:41,109 --> 00:37:41,119
and rn which may be familiar to you as
 

2033
00:37:41,119 --> 00:37:44,950
and rn which may be familiar to you as
uh as unix utilities

2034
00:37:44,950 --> 00:37:44,960
uh as unix utilities
 

2035
00:37:44,960 --> 00:37:46,390
uh as unix utilities
okay the first program i'm going to show

2036
00:37:46,390 --> 00:37:46,400
okay the first program i'm going to show
 

2037
00:37:46,400 --> 00:37:48,069
okay the first program i'm going to show
you to illustrate system calls

2038
00:37:48,069 --> 00:37:48,079
you to illustrate system calls
 

2039
00:37:48,079 --> 00:37:59,910
you to illustrate system calls
is um program called copy

2040
00:37:59,910 --> 00:37:59,920

 

2041
00:37:59,920 --> 00:38:08,630

um here's the source it's just a page

2042
00:38:08,630 --> 00:38:08,640

 

2043
00:38:08,640 --> 00:38:09,829

and so what you're seeing here is a

2044
00:38:09,829 --> 00:38:09,839
and so what you're seeing here is a
 

2045
00:38:09,839 --> 00:38:12,230
and so what you're seeing here is a
program that starts on line eight and

2046
00:38:12,230 --> 00:38:12,240
program that starts on line eight and
 

2047
00:38:12,240 --> 00:38:12,710
program that starts on line eight and
main

2048
00:38:12,710 --> 00:38:12,720
main
 

2049
00:38:12,720 --> 00:38:14,390
main
there's the sort of convention for c

2050
00:38:14,390 --> 00:38:14,400
there's the sort of convention for c
 

2051
00:38:14,400 --> 00:38:18,069
there's the sort of convention for c
programs it sits in a loop at line 12.

2052
00:38:18,069 --> 00:38:18,079
programs it sits in a loop at line 12.
 

2053
00:38:18,079 --> 00:38:21,270
programs it sits in a loop at line 12.
and over and over again it reads some

2054
00:38:21,270 --> 00:38:21,280
and over and over again it reads some
 

2055
00:38:21,280 --> 00:38:21,750
and over and over again it reads some
data

2056
00:38:21,750 --> 00:38:21,760
data
 

2057
00:38:21,760 --> 00:38:24,390
data
as input and on line 13 and then writes

2058
00:38:24,390 --> 00:38:24,400
as input and on line 13 and then writes
 

2059
00:38:24,400 --> 00:38:26,230
as input and on line 13 and then writes
the data just read

2060
00:38:26,230 --> 00:38:26,240
the data just read
 

2061
00:38:26,240 --> 00:38:32,069
the data just read
to its output on line 16. if i run copy

2062
00:38:32,069 --> 00:38:32,079
to its output on line 16. if i run copy
 

2063
00:38:32,079 --> 00:38:35,670
to its output on line 16. if i run copy
uh in xv6 just waiting to read input if

2064
00:38:35,670 --> 00:38:35,680
uh in xv6 just waiting to read input if
 

2065
00:38:35,680 --> 00:38:36,230
uh in xv6 just waiting to read input if
i

2066
00:38:36,230 --> 00:38:36,240
i
 

2067
00:38:36,240 --> 00:38:39,109
i
type some input and reads it and spits

2068
00:38:39,109 --> 00:38:39,119
type some input and reads it and spits
 

2069
00:38:39,119 --> 00:38:40,150
type some input and reads it and spits
it back out to me

2070
00:38:40,150 --> 00:38:40,160
it back out to me
 

2071
00:38:40,160 --> 00:38:43,109
it back out to me
so it's very simple program just does i

2072
00:38:43,109 --> 00:38:43,119
so it's very simple program just does i
 

2073
00:38:43,119 --> 00:38:45,109
so it's very simple program just does i
out

2074
00:38:45,109 --> 00:38:45,119
out
 

2075
00:38:45,119 --> 00:38:47,270
out
it's written in c as i mentioned um if

2076
00:38:47,270 --> 00:38:47,280
it's written in c as i mentioned um if
 

2077
00:38:47,280 --> 00:38:49,030
it's written in c as i mentioned um if
you're you don't already know c it's

2078
00:38:49,030 --> 00:38:49,040
you're you don't already know c it's
 

2079
00:38:49,040 --> 00:38:50,790
you're you don't already know c it's
worthwhile getting the

2080
00:38:50,790 --> 00:38:50,800
worthwhile getting the
 

2081
00:38:50,800 --> 00:38:53,349
worthwhile getting the
um standard c programming language book

2082
00:38:53,349 --> 00:38:53,359
um standard c programming language book
 

2083
00:38:53,359 --> 00:38:55,030
um standard c programming language book
by kernhan and ritchie

2084
00:38:55,030 --> 00:38:55,040
by kernhan and ritchie
 

2085
00:38:55,040 --> 00:38:57,990
by kernhan and ritchie
and i think there's a more full

2086
00:38:57,990 --> 00:38:58,000
and i think there's a more full
 

2087
00:38:58,000 --> 00:38:59,430
and i think there's a more full
reference to it on the

2088
00:38:59,430 --> 00:38:59,440
reference to it on the
 

2089
00:38:59,440 --> 00:39:02,230
reference to it on the
course website which explains to you in

2090
00:39:02,230 --> 00:39:02,240
course website which explains to you in
 

2091
00:39:02,240 --> 00:39:03,190
course website which explains to you in
a

2092
00:39:03,190 --> 00:39:03,200
a
 

2093
00:39:03,200 --> 00:39:04,630
a
very straightforward way how to program

2094
00:39:04,630 --> 00:39:04,640
very straightforward way how to program
 

2095
00:39:04,640 --> 00:39:08,230
very straightforward way how to program
and see

2096
00:39:08,230 --> 00:39:08,240

 

2097
00:39:08,240 --> 00:39:09,829

as i mentioned before read and write

2098
00:39:09,829 --> 00:39:09,839
as i mentioned before read and write
 

2099
00:39:09,839 --> 00:39:11,510
as i mentioned before read and write
this this program makes

2100
00:39:11,510 --> 00:39:11,520
this this program makes
 

2101
00:39:11,520 --> 00:39:13,510
this this program makes
two really three system calls read write

2102
00:39:13,510 --> 00:39:13,520
two really three system calls read write
 

2103
00:39:13,520 --> 00:39:14,950
two really three system calls read write
and exit are

2104
00:39:14,950 --> 00:39:14,960
and exit are
 

2105
00:39:14,960 --> 00:39:18,069
and exit are
system calls if you look at the call to

2106
00:39:18,069 --> 00:39:18,079
system calls if you look at the call to
 

2107
00:39:18,079 --> 00:39:19,990
system calls if you look at the call to
read on line 13

2108
00:39:19,990 --> 00:39:20,000
read on line 13
 

2109
00:39:20,000 --> 00:39:22,710
read on line 13
it takes three arguments the first

2110
00:39:22,710 --> 00:39:22,720
it takes three arguments the first
 

2111
00:39:22,720 --> 00:39:24,150
it takes three arguments the first
argument is a file descriptor which is

2112
00:39:24,150 --> 00:39:24,160
argument is a file descriptor which is
 

2113
00:39:24,160 --> 00:39:26,069
argument is a file descriptor which is
really a reference to a previously open

2114
00:39:26,069 --> 00:39:26,079
really a reference to a previously open
 

2115
00:39:26,079 --> 00:39:27,510
really a reference to a previously open
file

2116
00:39:27,510 --> 00:39:27,520
file
 

2117
00:39:27,520 --> 00:39:30,950
file
and the shell uh ensures that

2118
00:39:30,950 --> 00:39:30,960
and the shell uh ensures that
 

2119
00:39:30,960 --> 00:39:33,670
and the shell uh ensures that
when a program starts by default its

2120
00:39:33,670 --> 00:39:33,680
when a program starts by default its
 

2121
00:39:33,680 --> 00:39:35,910
when a program starts by default its
file descriptor 0 is connected to the

2122
00:39:35,910 --> 00:39:35,920
file descriptor 0 is connected to the
 

2123
00:39:35,920 --> 00:39:37,750
file descriptor 0 is connected to the
console input and its file

2124
00:39:37,750 --> 00:39:37,760
console input and its file
 

2125
00:39:37,760 --> 00:39:40,550
console input and its file
descriptive 1 is connected to the

2126
00:39:40,550 --> 00:39:40,560
descriptive 1 is connected to the
 

2127
00:39:40,560 --> 00:39:42,310
descriptive 1 is connected to the
console output and that's why i was able

2128
00:39:42,310 --> 00:39:42,320
console output and that's why i was able
 

2129
00:39:42,320 --> 00:39:43,829
console output and that's why i was able
to type to

2130
00:39:43,829 --> 00:39:43,839
to type to
 

2131
00:39:43,839 --> 00:39:49,349
to type to
this copy program and see the output

2132
00:39:49,349 --> 00:39:49,359

 

2133
00:39:49,359 --> 00:39:50,710

of course you know these file

2134
00:39:50,710 --> 00:39:50,720
of course you know these file
 

2135
00:39:50,720 --> 00:39:53,030
of course you know these file
descriptors are expected the program

2136
00:39:53,030 --> 00:39:53,040
descriptors are expected the program
 

2137
00:39:53,040 --> 00:39:54,710
descriptors are expected the program
expects these file descriptors have been

2138
00:39:54,710 --> 00:39:54,720
expects these file descriptors have been
 

2139
00:39:54,720 --> 00:39:55,990
expects these file descriptors have been
previously opened and set

2140
00:39:55,990 --> 00:39:56,000
previously opened and set
 

2141
00:39:56,000 --> 00:39:58,710
previously opened and set
up by the shell for it and this this

2142
00:39:58,710 --> 00:39:58,720
up by the shell for it and this this
 

2143
00:39:58,720 --> 00:39:59,190
up by the shell for it and this this
zero

2144
00:39:59,190 --> 00:39:59,200
zero
 

2145
00:39:59,200 --> 00:40:02,870
zero
one file descriptors is a pervasive unix

2146
00:40:02,870 --> 00:40:02,880
one file descriptors is a pervasive unix
 

2147
00:40:02,880 --> 00:40:04,710
one file descriptors is a pervasive unix
convention many many unix programs

2148
00:40:04,710 --> 00:40:04,720
convention many many unix programs
 

2149
00:40:04,720 --> 00:40:05,990
convention many many unix programs
expect to read

2150
00:40:05,990 --> 00:40:06,000
expect to read
 

2151
00:40:06,000 --> 00:40:08,790
expect to read
and file descriptor one and read file

2152
00:40:08,790 --> 00:40:08,800
and file descriptor one and read file
 

2153
00:40:08,800 --> 00:40:10,309
and file descriptor one and read file
scripture zero and write to file

2154
00:40:10,309 --> 00:40:10,319
scripture zero and write to file
 

2155
00:40:10,319 --> 00:40:12,710
scripture zero and write to file
description one

2156
00:40:12,710 --> 00:40:12,720
description one
 

2157
00:40:12,720 --> 00:40:14,950
description one
um the second argument to read is a

2158
00:40:14,950 --> 00:40:14,960
um the second argument to read is a
 

2159
00:40:14,960 --> 00:40:17,030
um the second argument to read is a
pointer to some memory

2160
00:40:17,030 --> 00:40:17,040
pointer to some memory
 

2161
00:40:17,040 --> 00:40:18,710
pointer to some memory
um where the program is asking the

2162
00:40:18,710 --> 00:40:18,720
um where the program is asking the
 

2163
00:40:18,720 --> 00:40:21,349
um where the program is asking the
operating system to read data

2164
00:40:21,349 --> 00:40:21,359
operating system to read data
 

2165
00:40:21,359 --> 00:40:22,950
operating system to read data
into that address and memory so that's

2166
00:40:22,950 --> 00:40:22,960
into that address and memory so that's
 

2167
00:40:22,960 --> 00:40:24,550
into that address and memory so that's
the buff argument

2168
00:40:24,550 --> 00:40:24,560
the buff argument
 

2169
00:40:24,560 --> 00:40:28,069
the buff argument
and line 10 allocates 64 bytes of memory

2170
00:40:28,069 --> 00:40:28,079
and line 10 allocates 64 bytes of memory
 

2171
00:40:28,079 --> 00:40:31,589
and line 10 allocates 64 bytes of memory
on the stack per read to read into

2172
00:40:31,589 --> 00:40:31,599
on the stack per read to read into
 

2173
00:40:31,599 --> 00:40:33,190
on the stack per read to read into
and the third argument to read is the

2174
00:40:33,190 --> 00:40:33,200
and the third argument to read is the
 

2175
00:40:33,200 --> 00:40:35,190
and the third argument to read is the
maximum number of bytes that the program

2176
00:40:35,190 --> 00:40:35,200
maximum number of bytes that the program
 

2177
00:40:35,200 --> 00:40:36,309
maximum number of bytes that the program
wants to read

2178
00:40:36,309 --> 00:40:36,319
wants to read
 

2179
00:40:36,319 --> 00:40:38,790
wants to read
and the size of buff says just 60

2180
00:40:38,790 --> 00:40:38,800
and the size of buff says just 60
 

2181
00:40:38,800 --> 00:40:39,349
and the size of buff says just 60
maximum

2182
00:40:39,349 --> 00:40:39,359
maximum
 

2183
00:40:39,359 --> 00:40:42,390
maximum
64 buckets so the recall reads up to 64

2184
00:40:42,390 --> 00:40:42,400
64 buckets so the recall reads up to 64
 

2185
00:40:42,400 --> 00:40:44,230
64 buckets so the recall reads up to 64
bytes from whatever

2186
00:40:44,230 --> 00:40:44,240
bytes from whatever
 

2187
00:40:44,240 --> 00:40:45,990
bytes from whatever
is connected to file descriptor zero and

2188
00:40:45,990 --> 00:40:46,000
is connected to file descriptor zero and
 

2189
00:40:46,000 --> 00:40:48,710
is connected to file descriptor zero and
that was my terminal in this example

2190
00:40:48,710 --> 00:40:48,720
that was my terminal in this example
 

2191
00:40:48,720 --> 00:40:51,349
that was my terminal in this example
the return value from read it either

2192
00:40:51,349 --> 00:40:51,359
the return value from read it either
 

2193
00:40:51,359 --> 00:40:51,829
the return value from read it either
repeat

2194
00:40:51,829 --> 00:40:51,839
repeat
 

2195
00:40:51,839 --> 00:40:53,589
repeat
it which may return the number of bytes

2196
00:40:53,589 --> 00:40:53,599
it which may return the number of bytes
 

2197
00:40:53,599 --> 00:40:54,950
it which may return the number of bytes
read

2198
00:40:54,950 --> 00:40:54,960
read
 

2199
00:40:54,960 --> 00:40:57,990
read
which would be six in the case of

2200
00:40:57,990 --> 00:40:58,000
which would be six in the case of
 

2201
00:40:58,000 --> 00:41:01,109
which would be six in the case of
me typing xyz y um

2202
00:41:01,109 --> 00:41:01,119
me typing xyz y um
 

2203
00:41:01,119 --> 00:41:02,950
me typing xyz y um
lead might be reading from a file if it

2204
00:41:02,950 --> 00:41:02,960
lead might be reading from a file if it
 

2205
00:41:02,960 --> 00:41:04,309
lead might be reading from a file if it
gets to the end of the file there's no

2206
00:41:04,309 --> 00:41:04,319
gets to the end of the file there's no
 

2207
00:41:04,319 --> 00:41:07,109
gets to the end of the file there's no
more bytes read will return zero

2208
00:41:07,109 --> 00:41:07,119
more bytes read will return zero
 

2209
00:41:07,119 --> 00:41:09,349
more bytes read will return zero
i know some other error occurred like

2210
00:41:09,349 --> 00:41:09,359
i know some other error occurred like
 

2211
00:41:09,359 --> 00:41:11,349
i know some other error occurred like
the file descriptor doesn't exist

2212
00:41:11,349 --> 00:41:11,359
the file descriptor doesn't exist
 

2213
00:41:11,359 --> 00:41:14,630
the file descriptor doesn't exist
read may return minus one and so

2214
00:41:14,630 --> 00:41:14,640
read may return minus one and so
 

2215
00:41:14,640 --> 00:41:16,550
read may return minus one and so
in many of these examples like on line

2216
00:41:16,550 --> 00:41:16,560
in many of these examples like on line
 

2217
00:41:16,560 --> 00:41:18,230
in many of these examples like on line
16 there

2218
00:41:18,230 --> 00:41:18,240
16 there
 

2219
00:41:18,240 --> 00:41:21,109
16 there
i don't my example code doesn't check

2220
00:41:21,109 --> 00:41:21,119
i don't my example code doesn't check
 

2221
00:41:21,119 --> 00:41:23,430
i don't my example code doesn't check
system call returns for errors

2222
00:41:23,430 --> 00:41:23,440
system call returns for errors
 

2223
00:41:23,440 --> 00:41:25,829
system call returns for errors
um but you should be more careful than

2224
00:41:25,829 --> 00:41:25,839
um but you should be more careful than
 

2225
00:41:25,839 --> 00:41:27,270
um but you should be more careful than
me um

2226
00:41:27,270 --> 00:41:27,280
me um
 

2227
00:41:27,280 --> 00:41:29,510
me um
uh the you should figure out how system

2228
00:41:29,510 --> 00:41:29,520
uh the you should figure out how system
 

2229
00:41:29,520 --> 00:41:31,510
uh the you should figure out how system
calls reflect errors is usually a minus

2230
00:41:31,510 --> 00:41:31,520
calls reflect errors is usually a minus
 

2231
00:41:31,520 --> 00:41:33,109
calls reflect errors is usually a minus
one return value

2232
00:41:33,109 --> 00:41:33,119
one return value
 

2233
00:41:33,119 --> 00:41:35,750
one return value
and check all system call returns for

2234
00:41:35,750 --> 00:41:35,760
and check all system call returns for
 

2235
00:41:35,760 --> 00:41:37,190
and check all system call returns for
errors

2236
00:41:37,190 --> 00:41:37,200
errors
 

2237
00:41:37,200 --> 00:41:39,430
errors
and if if you want to know what the

2238
00:41:39,430 --> 00:41:39,440
and if if you want to know what the
 

2239
00:41:39,440 --> 00:41:41,109
and if if you want to know what the
system call arguments and return values

2240
00:41:41,109 --> 00:41:41,119
system call arguments and return values
 

2241
00:41:41,119 --> 00:41:42,790
system call arguments and return values
are there's a table and

2242
00:41:42,790 --> 00:41:42,800
are there's a table and
 

2243
00:41:42,800 --> 00:41:45,190
are there's a table and
i think chapter 2 in the book that

2244
00:41:45,190 --> 00:41:45,200
i think chapter 2 in the book that
 

2245
00:41:45,200 --> 00:41:47,589
i think chapter 2 in the book that
explains all of the xv6

2246
00:41:47,589 --> 00:41:47,599
explains all of the xv6
 

2247
00:41:47,599 --> 00:41:50,790
explains all of the xv6
system call arguments and

2248
00:41:50,790 --> 00:41:50,800
system call arguments and
 

2249
00:41:50,800 --> 00:41:54,069
system call arguments and
return values the question regarding the

2250
00:41:54,069 --> 00:41:54,079
return values the question regarding the
 

2251
00:41:54,079 --> 00:41:57,109
return values the question regarding the
resist call what if we set the max read

2252
00:41:57,109 --> 00:41:57,119
resist call what if we set the max read
 

2253
00:41:57,119 --> 00:41:57,829
resist call what if we set the max read
bytes to

2254
00:41:57,829 --> 00:41:57,839
bytes to
 

2255
00:41:57,839 --> 00:42:00,710
bytes to
size of buff to one plus size of buff or

2256
00:42:00,710 --> 00:42:00,720
size of buff to one plus size of buff or
 

2257
00:42:00,720 --> 00:42:01,349
size of buff to one plus size of buff or
bigger

2258
00:42:01,349 --> 00:42:01,359
bigger
 

2259
00:42:01,359 --> 00:42:02,630
bigger
so what if we try to read more than the

2260
00:42:02,630 --> 00:42:02,640
so what if we try to read more than the
 

2261
00:42:02,640 --> 00:42:04,550
so what if we try to read more than the
size yeah then if there was

2262
00:42:04,550 --> 00:42:04,560
size yeah then if there was
 

2263
00:42:04,560 --> 00:42:07,990
size yeah then if there was
65 bytes to read then the operating

2264
00:42:07,990 --> 00:42:08,000
65 bytes to read then the operating
 

2265
00:42:08,000 --> 00:42:09,190
65 bytes to read then the operating
system would happily

2266
00:42:09,190 --> 00:42:09,200
system would happily
 

2267
00:42:09,200 --> 00:42:12,550
system would happily
we'll just copy those 65 bytes

2268
00:42:12,550 --> 00:42:12,560
we'll just copy those 65 bytes
 

2269
00:42:12,560 --> 00:42:15,589
we'll just copy those 65 bytes
to the memory that you provide and of

2270
00:42:15,589 --> 00:42:15,599
to the memory that you provide and of
 

2271
00:42:15,599 --> 00:42:16,150
to the memory that you provide and of
course

2272
00:42:16,150 --> 00:42:16,160
course
 

2273
00:42:16,160 --> 00:42:17,589
course
there's something else on the stack up

2274
00:42:17,589 --> 00:42:17,599
there's something else on the stack up
 

2275
00:42:17,599 --> 00:42:20,069
there's something else on the stack up
there maybe the return program encounter

2276
00:42:20,069 --> 00:42:20,079
there maybe the return program encounter
 

2277
00:42:20,079 --> 00:42:21,510
there maybe the return program encounter
or an argument or something

2278
00:42:21,510 --> 00:42:21,520
or an argument or something
 

2279
00:42:21,520 --> 00:42:24,309
or an argument or something
and so if you pass 65 then you're

2280
00:42:24,309 --> 00:42:24,319
and so if you pass 65 then you're
 

2281
00:42:24,319 --> 00:42:25,670
and so if you pass 65 then you're
inviting the colonel to

2282
00:42:25,670 --> 00:42:25,680
inviting the colonel to
 

2283
00:42:25,680 --> 00:42:28,950
inviting the colonel to
write junk um to an unexpected place in

2284
00:42:28,950 --> 00:42:28,960
write junk um to an unexpected place in
 

2285
00:42:28,960 --> 00:42:30,230
write junk um to an unexpected place in
your stack

2286
00:42:30,230 --> 00:42:30,240
your stack
 

2287
00:42:30,240 --> 00:42:32,870
your stack
and so that's a bug and it may cause you

2288
00:42:32,870 --> 00:42:32,880
and so that's a bug and it may cause you
 

2289
00:42:32,880 --> 00:42:34,230
and so that's a bug and it may cause you
for him to crash

2290
00:42:34,230 --> 00:42:34,240
for him to crash
 

2291
00:42:34,240 --> 00:42:37,270
for him to crash
or do something else unexpected um

2292
00:42:37,270 --> 00:42:37,280
or do something else unexpected um
 

2293
00:42:37,280 --> 00:42:38,950
or do something else unexpected um
so as a programmer you're you have to be

2294
00:42:38,950 --> 00:42:38,960
so as a programmer you're you have to be
 

2295
00:42:38,960 --> 00:42:40,710
so as a programmer you're you have to be
careful here there's nobody

2296
00:42:40,710 --> 00:42:40,720
careful here there's nobody
 

2297
00:42:40,720 --> 00:42:42,309
careful here there's nobody
writing in c with these kind of

2298
00:42:42,309 --> 00:42:42,319
writing in c with these kind of
 

2299
00:42:42,319 --> 00:42:44,790
writing in c with these kind of
interfaces there's

2300
00:42:44,790 --> 00:42:44,800
interfaces there's
 

2301
00:42:44,800 --> 00:42:47,349
interfaces there's
it's very very easy to write code that

2302
00:42:47,349 --> 00:42:47,359
it's very very easy to write code that
 

2303
00:42:47,359 --> 00:42:49,109
it's very very easy to write code that
the compiler is happy with and will run

2304
00:42:49,109 --> 00:42:49,119
the compiler is happy with and will run
 

2305
00:42:49,119 --> 00:42:49,430
the compiler is happy with and will run
but

2306
00:42:49,430 --> 00:42:49,440
but
 

2307
00:42:49,440 --> 00:42:53,190
but
absolutely does the wrong thing

2308
00:42:53,190 --> 00:42:53,200

 

2309
00:42:53,200 --> 00:42:56,550

so that's too bad but um that's the way

2310
00:42:56,550 --> 00:42:56,560
so that's too bad but um that's the way
 

2311
00:42:56,560 --> 00:43:00,470
so that's too bad but um that's the way
it is

2312
00:43:00,470 --> 00:43:00,480

 

2313
00:43:00,480 --> 00:43:03,750

okay uh one thing to note is that this

2314
00:43:03,750 --> 00:43:03,760
okay uh one thing to note is that this
 

2315
00:43:03,760 --> 00:43:05,430
okay uh one thing to note is that this
copy program and indeed the read and

2316
00:43:05,430 --> 00:43:05,440
copy program and indeed the read and
 

2317
00:43:05,440 --> 00:43:06,550
copy program and indeed the read and
write system calls

2318
00:43:06,550 --> 00:43:06,560
write system calls
 

2319
00:43:06,560 --> 00:43:08,390
write system calls
they don't care about the format of data

2320
00:43:08,390 --> 00:43:08,400
they don't care about the format of data
 

2321
00:43:08,400 --> 00:43:09,829
they don't care about the format of data
they're reading or writing

2322
00:43:09,829 --> 00:43:09,839
they're reading or writing
 

2323
00:43:09,839 --> 00:43:11,750
they're reading or writing
they just read them write and read and

2324
00:43:11,750 --> 00:43:11,760
they just read them write and read and
 

2325
00:43:11,760 --> 00:43:13,990
they just read them write and read and
write and this copy program

2326
00:43:13,990 --> 00:43:14,000
write and this copy program
 

2327
00:43:14,000 --> 00:43:16,150
write and this copy program
just deal with 8-bit bytes with streams

2328
00:43:16,150 --> 00:43:16,160
just deal with 8-bit bytes with streams
 

2329
00:43:16,160 --> 00:43:18,550
just deal with 8-bit bytes with streams
of 8-bit bytes

2330
00:43:18,550 --> 00:43:18,560
of 8-bit bytes
 

2331
00:43:18,560 --> 00:43:20,550
of 8-bit bytes
how you interpret them is totally up to

2332
00:43:20,550 --> 00:43:20,560
how you interpret them is totally up to
 

2333
00:43:20,560 --> 00:43:23,510
how you interpret them is totally up to
the application so the application maybe

2334
00:43:23,510 --> 00:43:23,520
the application so the application maybe
 

2335
00:43:23,520 --> 00:43:26,150
the application so the application maybe
parse these as data records or as c

2336
00:43:26,150 --> 00:43:26,160
parse these as data records or as c
 

2337
00:43:26,160 --> 00:43:28,870
parse these as data records or as c
source code or who knows what

2338
00:43:28,870 --> 00:43:28,880
source code or who knows what
 

2339
00:43:28,880 --> 00:43:32,630
source code or who knows what
the operating system um

2340
00:43:32,630 --> 00:43:32,640
the operating system um
 

2341
00:43:32,640 --> 00:43:34,550
the operating system um
it only thinks in terms of a stream of

2342
00:43:34,550 --> 00:43:34,560
it only thinks in terms of a stream of
 

2343
00:43:34,560 --> 00:43:36,230
it only thinks in terms of a stream of
8-bit bytes

2344
00:43:36,230 --> 00:43:36,240
8-bit bytes
 

2345
00:43:36,240 --> 00:43:39,190
8-bit bytes
okay so copy assume this code my copy

2346
00:43:39,190 --> 00:43:39,200
okay so copy assume this code my copy
 

2347
00:43:39,200 --> 00:43:40,309
okay so copy assume this code my copy
program assumed that the file

2348
00:43:40,309 --> 00:43:40,319
program assumed that the file
 

2349
00:43:40,319 --> 00:43:42,150
program assumed that the file
descriptors were already set up

2350
00:43:42,150 --> 00:43:42,160
descriptors were already set up
 

2351
00:43:42,160 --> 00:43:44,550
descriptors were already set up
um but we need to we need to have a way

2352
00:43:44,550 --> 00:43:44,560
um but we need to we need to have a way
 

2353
00:43:44,560 --> 00:43:46,230
um but we need to we need to have a way
to create file descriptors

2354
00:43:46,230 --> 00:43:46,240
to create file descriptors
 

2355
00:43:46,240 --> 00:43:47,829
to create file descriptors
and the most straightforward way to do

2356
00:43:47,829 --> 00:43:47,839
and the most straightforward way to do
 

2357
00:43:47,839 --> 00:43:50,069
and the most straightforward way to do
that is um

2358
00:43:50,069 --> 00:43:50,079
that is um
 

2359
00:43:50,079 --> 00:43:52,069
that is um
with the open system call and so here's

2360
00:43:52,069 --> 00:43:52,079
with the open system call and so here's
 

2361
00:43:52,079 --> 00:43:54,309
with the open system call and so here's
the source for a program that

2362
00:43:54,309 --> 00:43:54,319
the source for a program that
 

2363
00:43:54,319 --> 00:43:58,230
the source for a program that
called open that

2364
00:43:58,230 --> 00:43:58,240

 

2365
00:43:58,240 --> 00:44:00,710

uses the open system call a question

2366
00:44:00,710 --> 00:44:00,720
uses the open system call a question
 

2367
00:44:00,720 --> 00:44:01,589
uses the open system call a question
from the chat

2368
00:44:01,589 --> 00:44:01,599
from the chat
 

2369
00:44:01,599 --> 00:44:07,109
from the chat
what do you mean by a stream of bytes

2370
00:44:07,109 --> 00:44:07,119

 

2371
00:44:07,119 --> 00:44:10,470

i i i just mean that if a file contains

2372
00:44:10,470 --> 00:44:10,480
i i i just mean that if a file contains
 

2373
00:44:10,480 --> 00:44:12,150
i i i just mean that if a file contains
a bunch of bytes

2374
00:44:12,150 --> 00:44:12,160
a bunch of bytes
 

2375
00:44:12,160 --> 00:44:14,630
a bunch of bytes
then read and successive yes building a

2376
00:44:14,630 --> 00:44:14,640
then read and successive yes building a
 

2377
00:44:14,640 --> 00:44:16,790
then read and successive yes building a
file contains a million bytes

2378
00:44:16,790 --> 00:44:16,800
file contains a million bytes
 

2379
00:44:16,800 --> 00:44:19,430
file contains a million bytes
if you make a sequence of recalls each

2380
00:44:19,430 --> 00:44:19,440
if you make a sequence of recalls each
 

2381
00:44:19,440 --> 00:44:21,349
if you make a sequence of recalls each
for 100 bytes

2382
00:44:21,349 --> 00:44:21,359
for 100 bytes
 

2383
00:44:21,359 --> 00:44:22,790
for 100 bytes
it'll just read the first hundred bytes

2384
00:44:22,790 --> 00:44:22,800
it'll just read the first hundred bytes
 

2385
00:44:22,800 --> 00:44:23,990
it'll just read the first hundred bytes
and then the second hundred bytes and

2386
00:44:23,990 --> 00:44:24,000
and then the second hundred bytes and
 

2387
00:44:24,000 --> 00:44:24,470
and then the second hundred bytes and
then

2388
00:44:24,470 --> 00:44:24,480
then
 

2389
00:44:24,480 --> 00:44:27,829
then
the third hundred bytes um

2390
00:44:27,829 --> 00:44:27,839
the third hundred bytes um
 

2391
00:44:27,839 --> 00:44:31,910
the third hundred bytes um
that's all i mean

2392
00:44:31,910 --> 00:44:31,920

 

2393
00:44:31,920 --> 00:44:34,870

all right so this program um called open

2394
00:44:34,870 --> 00:44:34,880
all right so this program um called open
 

2395
00:44:34,880 --> 00:44:36,870
all right so this program um called open
first i'll run it for you

2396
00:44:36,870 --> 00:44:36,880
first i'll run it for you
 

2397
00:44:36,880 --> 00:44:40,069
first i'll run it for you
what it does is uh opens creates a new

2398
00:44:40,069 --> 00:44:40,079
what it does is uh opens creates a new
 

2399
00:44:40,079 --> 00:44:42,470
what it does is uh opens creates a new
file called output.txt and then writes

2400
00:44:42,470 --> 00:44:42,480
file called output.txt and then writes
 

2401
00:44:42,480 --> 00:44:43,190
file called output.txt and then writes
some

2402
00:44:43,190 --> 00:44:43,200
some
 

2403
00:44:43,200 --> 00:44:45,829
some
bytes to it and then it finishes so we

2404
00:44:45,829 --> 00:44:45,839
bytes to it and then it finishes so we
 

2405
00:44:45,839 --> 00:44:47,430
bytes to it and then it finishes so we
don't see anything because it

2406
00:44:47,430 --> 00:44:47,440
don't see anything because it
 

2407
00:44:47,440 --> 00:44:49,190
don't see anything because it
broke data to this file it opened but we

2408
00:44:49,190 --> 00:44:49,200
broke data to this file it opened but we
 

2409
00:44:49,200 --> 00:44:52,470
broke data to this file it opened but we
can look at this output.txt file that it

2410
00:44:52,470 --> 00:44:52,480
can look at this output.txt file that it
 

2411
00:44:52,480 --> 00:44:53,430
can look at this output.txt file that it
created

2412
00:44:53,430 --> 00:44:53,440
created
 

2413
00:44:53,440 --> 00:44:56,630
created
and see the ooo that it

2414
00:44:56,630 --> 00:44:56,640
and see the ooo that it
 

2415
00:44:56,640 --> 00:45:00,390
and see the ooo that it
wrote there so line 11 in the program is

2416
00:45:00,390 --> 00:45:00,400
wrote there so line 11 in the program is
 

2417
00:45:00,400 --> 00:45:02,950
wrote there so line 11 in the program is
makes the open system call gives it a

2418
00:45:02,950 --> 00:45:02,960
makes the open system call gives it a
 

2419
00:45:02,960 --> 00:45:05,109
makes the open system call gives it a
file name output.text and

2420
00:45:05,109 --> 00:45:05,119
file name output.text and
 

2421
00:45:05,119 --> 00:45:08,069
file name output.text and
the o underscore stuff um in the second

2422
00:45:08,069 --> 00:45:08,079
the o underscore stuff um in the second
 

2423
00:45:08,079 --> 00:45:09,349
the o underscore stuff um in the second
argument to open are

2424
00:45:09,349 --> 00:45:09,359
argument to open are
 

2425
00:45:09,359 --> 00:45:12,550
argument to open are
flags that tell the open system call

2426
00:45:12,550 --> 00:45:12,560
flags that tell the open system call
 

2427
00:45:12,560 --> 00:45:14,390
flags that tell the open system call
implementation in the kernel that we'd

2428
00:45:14,390 --> 00:45:14,400
implementation in the kernel that we'd
 

2429
00:45:14,400 --> 00:45:16,470
implementation in the kernel that we'd
like to create a file with its name

2430
00:45:16,470 --> 00:45:16,480
like to create a file with its name
 

2431
00:45:16,480 --> 00:45:19,190
like to create a file with its name
and that we're going to write it open

2432
00:45:19,190 --> 00:45:19,200
and that we're going to write it open
 

2433
00:45:19,200 --> 00:45:20,870
and that we're going to write it open
returns a newly allocated file

2434
00:45:20,870 --> 00:45:20,880
returns a newly allocated file
 

2435
00:45:20,880 --> 00:45:23,589
returns a newly allocated file
descriptor

2436
00:45:23,589 --> 00:45:23,599

 

2437
00:45:23,599 --> 00:45:25,030

and the file the script is just a small

2438
00:45:25,030 --> 00:45:25,040
and the file the script is just a small
 

2439
00:45:25,040 --> 00:45:26,630
and the file the script is just a small
number it's probably two or three or

2440
00:45:26,630 --> 00:45:26,640
number it's probably two or three or
 

2441
00:45:26,640 --> 00:45:28,550
number it's probably two or three or
four or something

2442
00:45:28,550 --> 00:45:28,560
four or something
 

2443
00:45:28,560 --> 00:45:29,750
four or something
and then we pass that same file

2444
00:45:29,750 --> 00:45:29,760
and then we pass that same file
 

2445
00:45:29,760 --> 00:45:32,150
and then we pass that same file
descriptor to write along with a buffer

2446
00:45:32,150 --> 00:45:32,160
descriptor to write along with a buffer
 

2447
00:45:32,160 --> 00:45:35,190
descriptor to write along with a buffer
and a number of bytes to write that

2448
00:45:35,190 --> 00:45:35,200
and a number of bytes to write that
 

2449
00:45:35,200 --> 00:45:37,109
and a number of bytes to write that
writes data to

2450
00:45:37,109 --> 00:45:37,119
writes data to
 

2451
00:45:37,119 --> 00:45:39,430
writes data to
the file that the file descriptor refers

2452
00:45:39,430 --> 00:45:39,440
the file that the file descriptor refers
 

2453
00:45:39,440 --> 00:45:41,430
the file that the file descriptor refers
to

2454
00:45:41,430 --> 00:45:41,440
to
 

2455
00:45:41,440 --> 00:45:42,870
to
what that file descriptor is actually

2456
00:45:42,870 --> 00:45:42,880
what that file descriptor is actually
 

2457
00:45:42,880 --> 00:45:45,670
what that file descriptor is actually
doing is indexing into a little table

2458
00:45:45,670 --> 00:45:45,680
doing is indexing into a little table
 

2459
00:45:45,680 --> 00:45:47,510
doing is indexing into a little table
inside the kernel the kernel maintains

2460
00:45:47,510 --> 00:45:47,520
inside the kernel the kernel maintains
 

2461
00:45:47,520 --> 00:45:48,870
inside the kernel the kernel maintains
state for each

2462
00:45:48,870 --> 00:45:48,880
state for each
 

2463
00:45:48,880 --> 00:45:50,710
state for each
process that's running each program that

2464
00:45:50,710 --> 00:45:50,720
process that's running each program that
 

2465
00:45:50,720 --> 00:45:52,630
process that's running each program that
you run and among other things the

2466
00:45:52,630 --> 00:45:52,640
you run and among other things the
 

2467
00:45:52,640 --> 00:45:55,030
you run and among other things the
kernel remembers a table for every

2468
00:45:55,030 --> 00:45:55,040
kernel remembers a table for every
 

2469
00:45:55,040 --> 00:45:57,510
kernel remembers a table for every
running process of index by file

2470
00:45:57,510 --> 00:45:57,520
running process of index by file
 

2471
00:45:57,520 --> 00:45:59,030
running process of index by file
descriptors

2472
00:45:59,030 --> 00:45:59,040
descriptors
 

2473
00:45:59,040 --> 00:46:01,270
descriptors
and the table sort of tells the kernel

2474
00:46:01,270 --> 00:46:01,280
and the table sort of tells the kernel
 

2475
00:46:01,280 --> 00:46:02,710
and the table sort of tells the kernel
what each file descriptor

2476
00:46:02,710 --> 00:46:02,720
what each file descriptor
 

2477
00:46:02,720 --> 00:46:08,470
what each file descriptor
refers to

2478
00:46:08,470 --> 00:46:08,480

 

2479
00:46:08,480 --> 00:46:10,870

a critical point is that each process

2480
00:46:10,870 --> 00:46:10,880
a critical point is that each process
 

2481
00:46:10,880 --> 00:46:12,230
a critical point is that each process
has its own

2482
00:46:12,230 --> 00:46:12,240
has its own
 

2483
00:46:12,240 --> 00:46:15,270
has its own
sort of space of file descriptors so uh

2484
00:46:15,270 --> 00:46:15,280
sort of space of file descriptors so uh
 

2485
00:46:15,280 --> 00:46:16,710
sort of space of file descriptors so uh
before running two different

2486
00:46:16,710 --> 00:46:16,720
before running two different
 

2487
00:46:16,720 --> 00:46:18,390
before running two different
processes two different programs and

2488
00:46:18,390 --> 00:46:18,400
processes two different programs and
 

2489
00:46:18,400 --> 00:46:20,550
processes two different programs and
different processes and they both open a

2490
00:46:20,550 --> 00:46:20,560
different processes and they both open a
 

2491
00:46:20,560 --> 00:46:22,069
different processes and they both open a
file they may actually get the same

2492
00:46:22,069 --> 00:46:22,079
file they may actually get the same
 

2493
00:46:22,079 --> 00:46:24,309
file they may actually get the same
number back as a file descriptor

2494
00:46:24,309 --> 00:46:24,319
number back as a file descriptor
 

2495
00:46:24,319 --> 00:46:25,910
number back as a file descriptor
but because the kernel maintains a

2496
00:46:25,910 --> 00:46:25,920
but because the kernel maintains a
 

2497
00:46:25,920 --> 00:46:27,829
but because the kernel maintains a
separate file descriptor for each

2498
00:46:27,829 --> 00:46:27,839
separate file descriptor for each
 

2499
00:46:27,839 --> 00:46:28,950
separate file descriptor for each
process

2500
00:46:28,950 --> 00:46:28,960
process
 

2501
00:46:28,960 --> 00:46:31,270
process
the same file descriptor number may

2502
00:46:31,270 --> 00:46:31,280
the same file descriptor number may
 

2503
00:46:31,280 --> 00:46:32,950
the same file descriptor number may
refer to different files

2504
00:46:32,950 --> 00:46:32,960
refer to different files
 

2505
00:46:32,960 --> 00:46:36,950
refer to different files
in different processes

2506
00:46:36,950 --> 00:46:36,960

 

2507
00:46:36,960 --> 00:46:38,550

any questions about open about this

2508
00:46:38,550 --> 00:46:38,560
any questions about open about this
 

2509
00:46:38,560 --> 00:46:40,069
any questions about open about this
little program

2510
00:46:40,069 --> 00:46:40,079
little program
 

2511
00:46:40,079 --> 00:46:41,589
little program
yeah we got a question in the chat a

2512
00:46:41,589 --> 00:46:41,599
yeah we got a question in the chat a
 

2513
00:46:41,599 --> 00:46:43,190
yeah we got a question in the chat a
question from someone not familiar with

2514
00:46:43,190 --> 00:46:43,200
question from someone not familiar with
 

2515
00:46:43,200 --> 00:46:43,910
question from someone not familiar with
c

2516
00:46:43,910 --> 00:46:43,920
c
 

2517
00:46:43,920 --> 00:46:46,069
c
uh how are these files being described

2518
00:46:46,069 --> 00:46:46,079
uh how are these files being described
 

2519
00:46:46,079 --> 00:46:47,270
uh how are these files being described
different from normalc

2520
00:46:47,270 --> 00:46:47,280
different from normalc
 

2521
00:46:47,280 --> 00:46:49,589
different from normalc
programs is it because we're only using

2522
00:46:49,589 --> 00:46:49,599
programs is it because we're only using
 

2523
00:46:49,599 --> 00:46:51,910
programs is it because we're only using
kernel calls i.e couldn't we also

2524
00:46:51,910 --> 00:46:51,920
kernel calls i.e couldn't we also
 

2525
00:46:51,920 --> 00:46:59,349
kernel calls i.e couldn't we also
open or write a file in python

2526
00:46:59,349 --> 00:46:59,359

 

2527
00:46:59,359 --> 00:47:02,390

i don't think i understand that it's a c

2528
00:47:02,390 --> 00:47:02,400
i don't think i understand that it's a c
 

2529
00:47:02,400 --> 00:47:08,829
i don't think i understand that it's a c
program that's opening and writing a

2530
00:47:08,829 --> 00:47:08,839

 

2531
00:47:08,839 --> 00:47:12,390

file

2532
00:47:12,390 --> 00:47:12,400

 

2533
00:47:12,400 --> 00:47:15,829

um okay

2534
00:47:15,829 --> 00:47:15,839
um okay
 

2535
00:47:15,839 --> 00:47:20,549
um okay
i think i'm gonna move on um

2536
00:47:20,549 --> 00:47:20,559

 

2537
00:47:20,559 --> 00:47:23,670

all right so

2538
00:47:23,670 --> 00:47:23,680

 

2539
00:47:23,680 --> 00:47:26,230

you um ask what actually happens when uh

2540
00:47:26,230 --> 00:47:26,240
you um ask what actually happens when uh
 

2541
00:47:26,240 --> 00:47:26,870
you um ask what actually happens when uh
maybe

2542
00:47:26,870 --> 00:47:26,880
maybe
 

2543
00:47:26,880 --> 00:47:29,270
maybe
the question is whether someone is doing

2544
00:47:29,270 --> 00:47:29,280
the question is whether someone is doing
 

2545
00:47:29,280 --> 00:47:30,069
the question is whether someone is doing
it in c

2546
00:47:30,069 --> 00:47:30,079
it in c
 

2547
00:47:30,079 --> 00:47:31,750
it in c
any different than doing it in python

2548
00:47:31,750 --> 00:47:31,760
any different than doing it in python
 

2549
00:47:31,760 --> 00:47:34,390
any different than doing it in python
minus the syntax

2550
00:47:34,390 --> 00:47:34,400
minus the syntax
 

2551
00:47:34,400 --> 00:47:40,710
minus the syntax
well it's it's not really um

2552
00:47:40,710 --> 00:47:40,720

 

2553
00:47:40,720 --> 00:47:44,309

there's certainly ways to um

2554
00:47:44,309 --> 00:47:44,319
there's certainly ways to um
 

2555
00:47:44,319 --> 00:47:47,670
there's certainly ways to um
python provides nice function calls for

2556
00:47:47,670 --> 00:47:47,680
python provides nice function calls for
 

2557
00:47:47,680 --> 00:47:48,230
python provides nice function calls for
opening

2558
00:47:48,230 --> 00:47:48,240
opening
 

2559
00:47:48,240 --> 00:47:51,190
opening
and doing all these things or opening

2560
00:47:51,190 --> 00:47:51,200
and doing all these things or opening
 

2561
00:47:51,200 --> 00:47:51,990
and doing all these things or opening
files for example

2562
00:47:51,990 --> 00:47:52,000
files for example
 

2563
00:47:52,000 --> 00:47:54,710
files for example
in reading writing files um they're sort

2564
00:47:54,710 --> 00:47:54,720
in reading writing files um they're sort
 

2565
00:47:54,720 --> 00:47:56,230
in reading writing files um they're sort
of a layer of

2566
00:47:56,230 --> 00:47:56,240
of a layer of
 

2567
00:47:56,240 --> 00:47:57,589
of a layer of
they're higher somewhat higher level

2568
00:47:57,589 --> 00:47:57,599
they're higher somewhat higher level
 

2569
00:47:57,599 --> 00:47:59,829
they're higher somewhat higher level
functions typically um not you know

2570
00:47:59,829 --> 00:47:59,839
functions typically um not you know
 

2571
00:47:59,839 --> 00:48:03,589
functions typically um not you know
pointers to memory for example um

2572
00:48:03,589 --> 00:48:03,599
pointers to memory for example um
 

2573
00:48:03,599 --> 00:48:05,910
pointers to memory for example um
and python does more error checking for

2574
00:48:05,910 --> 00:48:05,920
and python does more error checking for
 

2575
00:48:05,920 --> 00:48:07,990
and python does more error checking for
you

2576
00:48:07,990 --> 00:48:08,000
you
 

2577
00:48:08,000 --> 00:48:09,750
you
but when you open a file in python or

2578
00:48:09,750 --> 00:48:09,760
but when you open a file in python or
 

2579
00:48:09,760 --> 00:48:11,910
but when you open a file in python or
write a file in python the

2580
00:48:11,910 --> 00:48:11,920
write a file in python the
 

2581
00:48:11,920 --> 00:48:15,190
write a file in python the
python calls you make boil down

2582
00:48:15,190 --> 00:48:15,200
python calls you make boil down
 

2583
00:48:15,200 --> 00:48:19,750
python calls you make boil down
to system calls just like these

2584
00:48:19,750 --> 00:48:19,760

 

2585
00:48:19,760 --> 00:48:25,670

is that a good answer

2586
00:48:25,670 --> 00:48:25,680

 

2587
00:48:25,680 --> 00:48:31,190

i think so all right

2588
00:48:31,190 --> 00:48:31,200

 

2589
00:48:31,200 --> 00:48:34,390

all right um all right i've been

2590
00:48:34,390 --> 00:48:34,400
all right um all right i've been
 

2591
00:48:34,400 --> 00:48:39,150
all right um all right i've been
over here talking to the uh

2592
00:48:39,150 --> 00:48:39,160

 

2593
00:48:39,160 --> 00:48:42,390

xv6s unix like

2594
00:48:42,390 --> 00:48:42,400
xv6s unix like
 

2595
00:48:42,400 --> 00:48:44,870
xv6s unix like
shell and the shells what people often

2596
00:48:44,870 --> 00:48:44,880
shell and the shells what people often
 

2597
00:48:44,880 --> 00:48:47,270
shell and the shells what people often
call the command line interface

2598
00:48:47,270 --> 00:48:47,280
call the command line interface
 

2599
00:48:47,280 --> 00:48:49,910
call the command line interface
as opposed to some more graphical user

2600
00:48:49,910 --> 00:48:49,920
as opposed to some more graphical user
 

2601
00:48:49,920 --> 00:48:52,390
as opposed to some more graphical user
interface

2602
00:48:52,390 --> 00:48:52,400
interface
 

2603
00:48:52,400 --> 00:48:54,069
interface
the shell turns if you haven't used the

2604
00:48:54,069 --> 00:48:54,079
the shell turns if you haven't used the
 

2605
00:48:54,079 --> 00:48:56,150
the shell turns if you haven't used the
cell the shell turns out to be

2606
00:48:56,150 --> 00:48:56,160
cell the shell turns out to be
 

2607
00:48:56,160 --> 00:48:57,670
cell the shell turns out to be
a pretty useful interface for things

2608
00:48:57,670 --> 00:48:57,680
a pretty useful interface for things
 

2609
00:48:57,680 --> 00:49:01,349
a pretty useful interface for things
like system management of unix systems

2610
00:49:01,349 --> 00:49:01,359
like system management of unix systems
 

2611
00:49:01,359 --> 00:49:03,670
like system management of unix systems
it provides a lot of utilities for uh

2612
00:49:03,670 --> 00:49:03,680
it provides a lot of utilities for uh
 

2613
00:49:03,680 --> 00:49:05,030
it provides a lot of utilities for uh
messing around with files

2614
00:49:05,030 --> 00:49:05,040
messing around with files
 

2615
00:49:05,040 --> 00:49:07,430
messing around with files
and for programming development and for

2616
00:49:07,430 --> 00:49:07,440
and for programming development and for
 

2617
00:49:07,440 --> 00:49:08,470
and for programming development and for
writing scripts

2618
00:49:08,470 --> 00:49:08,480
writing scripts
 

2619
00:49:08,480 --> 00:49:10,790
writing scripts
to do all these things so you saw me

2620
00:49:10,790 --> 00:49:10,800
to do all these things so you saw me
 

2621
00:49:10,800 --> 00:49:12,309
to do all these things so you saw me
before run

2622
00:49:12,309 --> 00:49:12,319
before run
 

2623
00:49:12,319 --> 00:49:14,069
before run
i just want to demonstrate a few shell

2624
00:49:14,069 --> 00:49:14,079
i just want to demonstrate a few shell
 

2625
00:49:14,079 --> 00:49:16,710
i just want to demonstrate a few shell
features ordinarily when you type things

2626
00:49:16,710 --> 00:49:16,720
features ordinarily when you type things
 

2627
00:49:16,720 --> 00:49:19,510
features ordinarily when you type things
um you're telling the shell to run a

2628
00:49:19,510 --> 00:49:19,520
um you're telling the shell to run a
 

2629
00:49:19,520 --> 00:49:21,430
um you're telling the shell to run a
program so when i type ls what that

2630
00:49:21,430 --> 00:49:21,440
program so when i type ls what that
 

2631
00:49:21,440 --> 00:49:22,309
program so when i type ls what that
means is

2632
00:49:22,309 --> 00:49:22,319
means is
 

2633
00:49:22,319 --> 00:49:25,430
means is
i'm asking the shell to run the program

2634
00:49:25,430 --> 00:49:25,440
i'm asking the shell to run the program
 

2635
00:49:25,440 --> 00:49:27,829
i'm asking the shell to run the program
whose name is ls and what that really

2636
00:49:27,829 --> 00:49:27,839
whose name is ls and what that really
 

2637
00:49:27,839 --> 00:49:29,670
whose name is ls and what that really
means is there's a file

2638
00:49:29,670 --> 00:49:29,680
means is there's a file
 

2639
00:49:29,680 --> 00:49:31,750
means is there's a file
in the file system called ls that

2640
00:49:31,750 --> 00:49:31,760
in the file system called ls that
 

2641
00:49:31,760 --> 00:49:33,510
in the file system called ls that
contains some instructions

2642
00:49:33,510 --> 00:49:33,520
contains some instructions
 

2643
00:49:33,520 --> 00:49:35,750
contains some instructions
some machine instructions and i'm asking

2644
00:49:35,750 --> 00:49:35,760
some machine instructions and i'm asking
 

2645
00:49:35,760 --> 00:49:37,109
some machine instructions and i'm asking
the shell to run

2646
00:49:37,109 --> 00:49:37,119
the shell to run
 

2647
00:49:37,119 --> 00:49:39,030
the shell to run
the instructions that are in the file

2648
00:49:39,030 --> 00:49:39,040
the instructions that are in the file
 

2649
00:49:39,040 --> 00:49:40,630
the instructions that are in the file
called ls

2650
00:49:40,630 --> 00:49:40,640
called ls
 

2651
00:49:40,640 --> 00:49:44,790
called ls
run ls now ls what it actually does is

2652
00:49:44,790 --> 00:49:44,800
run ls now ls what it actually does is
 

2653
00:49:44,800 --> 00:49:46,309
run ls now ls what it actually does is
get a listing of the files in the

2654
00:49:46,309 --> 00:49:46,319
get a listing of the files in the
 

2655
00:49:46,319 --> 00:49:47,910
get a listing of the files in the
current directory and you can see up

2656
00:49:47,910 --> 00:49:47,920
current directory and you can see up
 

2657
00:49:47,920 --> 00:49:49,589
current directory and you can see up
there on the fourth line

2658
00:49:49,589 --> 00:49:49,599
there on the fourth line
 

2659
00:49:49,599 --> 00:49:52,950
there on the fourth line
that among the other files that

2660
00:49:52,950 --> 00:49:52,960
that among the other files that
 

2661
00:49:52,960 --> 00:49:55,670
that among the other files that
ls says exists in this list is a file

2662
00:49:55,670 --> 00:49:55,680
ls says exists in this list is a file
 

2663
00:49:55,680 --> 00:49:55,990
ls says exists in this list is a file
called

2664
00:49:55,990 --> 00:49:56,000
called
 

2665
00:49:56,000 --> 00:49:58,870
called
ls which is in fact the file containing

2666
00:49:58,870 --> 00:49:58,880
ls which is in fact the file containing
 

2667
00:49:58,880 --> 00:50:02,230
ls which is in fact the file containing
the instructions i just ran

2668
00:50:02,230 --> 00:50:02,240

 

2669
00:50:02,240 --> 00:50:03,670

the shell does a few other things for

2670
00:50:03,670 --> 00:50:03,680
the shell does a few other things for
 

2671
00:50:03,680 --> 00:50:05,910
the shell does a few other things for
you other than running programs

2672
00:50:05,910 --> 00:50:05,920
you other than running programs
 

2673
00:50:05,920 --> 00:50:08,710
you other than running programs
it allows you to redirect io so for

2674
00:50:08,710 --> 00:50:08,720
it allows you to redirect io so for
 

2675
00:50:08,720 --> 00:50:11,030
it allows you to redirect io so for
example if i say ls greater than out

2676
00:50:11,030 --> 00:50:11,040
example if i say ls greater than out
 

2677
00:50:11,040 --> 00:50:12,150
example if i say ls greater than out
what that means is

2678
00:50:12,150 --> 00:50:12,160
what that means is
 

2679
00:50:12,160 --> 00:50:14,069
what that means is
i'm asking the shell to run the ls

2680
00:50:14,069 --> 00:50:14,079
i'm asking the shell to run the ls
 

2681
00:50:14,079 --> 00:50:16,630
i'm asking the shell to run the ls
command but with its output redirected

2682
00:50:16,630 --> 00:50:16,640
command but with its output redirected
 

2683
00:50:16,640 --> 00:50:17,670
command but with its output redirected
to the file called

2684
00:50:17,670 --> 00:50:17,680
to the file called
 

2685
00:50:17,680 --> 00:50:20,870
to the file called
out and i run ls

2686
00:50:20,870 --> 00:50:20,880
out and i run ls
 

2687
00:50:20,880 --> 00:50:22,549
out and i run ls
we don't see any output because the

2688
00:50:22,549 --> 00:50:22,559
we don't see any output because the
 

2689
00:50:22,559 --> 00:50:24,870
we don't see any output because the
output all went out

2690
00:50:24,870 --> 00:50:24,880
output all went out
 

2691
00:50:24,880 --> 00:50:27,750
output all went out
um now i can out contains a bunch of

2692
00:50:27,750 --> 00:50:27,760
um now i can out contains a bunch of
 

2693
00:50:27,760 --> 00:50:28,470
um now i can out contains a bunch of
data

2694
00:50:28,470 --> 00:50:28,480
data
 

2695
00:50:28,480 --> 00:50:32,230
data
um we could the cat command

2696
00:50:32,230 --> 00:50:32,240
um we could the cat command
 

2697
00:50:32,240 --> 00:50:34,710
um we could the cat command
reads a file and displays the contents

2698
00:50:34,710 --> 00:50:34,720
reads a file and displays the contents
 

2699
00:50:34,720 --> 00:50:35,670
reads a file and displays the contents
of the file so

2700
00:50:35,670 --> 00:50:35,680
of the file so
 

2701
00:50:35,680 --> 00:50:38,150
of the file so
i say cat out i'm just going to see now

2702
00:50:38,150 --> 00:50:38,160
i say cat out i'm just going to see now
 

2703
00:50:38,160 --> 00:50:39,990
i say cat out i'm just going to see now
the now this is the saved output

2704
00:50:39,990 --> 00:50:40,000
the now this is the saved output
 

2705
00:50:40,000 --> 00:50:42,309
the now this is the saved output
of ls you can also run a command like

2706
00:50:42,309 --> 00:50:42,319
of ls you can also run a command like
 

2707
00:50:42,319 --> 00:50:44,309
of ls you can also run a command like
grep and i can give it an argument x and

2708
00:50:44,309 --> 00:50:44,319
grep and i can give it an argument x and
 

2709
00:50:44,319 --> 00:50:44,710
grep and i can give it an argument x and
what

2710
00:50:44,710 --> 00:50:44,720
what
 

2711
00:50:44,720 --> 00:50:47,670
what
grep x is the grep command searches for

2712
00:50:47,670 --> 00:50:47,680
grep x is the grep command searches for
 

2713
00:50:47,680 --> 00:50:49,109
grep x is the grep command searches for
patterns

2714
00:50:49,109 --> 00:50:49,119
patterns
 

2715
00:50:49,119 --> 00:50:52,309
patterns
again um if i run grep

2716
00:50:52,309 --> 00:50:52,319
again um if i run grep
 

2717
00:50:52,319 --> 00:50:55,670
again um if i run grep
x it's going to search for lines of

2718
00:50:55,670 --> 00:50:55,680
x it's going to search for lines of
 

2719
00:50:55,680 --> 00:50:56,549
x it's going to search for lines of
input that contain

2720
00:50:56,549 --> 00:50:56,559
input that contain
 

2721
00:50:56,559 --> 00:50:59,030
input that contain
x i can redirect tell the shell to

2722
00:50:59,030 --> 00:50:59,040
x i can redirect tell the shell to
 

2723
00:50:59,040 --> 00:51:01,589
x i can redirect tell the shell to
redirect its input from the file out

2724
00:51:01,589 --> 00:51:01,599
redirect its input from the file out
 

2725
00:51:01,599 --> 00:51:03,990
redirect its input from the file out
in order to look for instances of x in

2726
00:51:03,990 --> 00:51:04,000
in order to look for instances of x in
 

2727
00:51:04,000 --> 00:51:07,030
in order to look for instances of x in
that saved ls output

2728
00:51:07,030 --> 00:51:07,040
that saved ls output
 

2729
00:51:07,040 --> 00:51:09,910
that saved ls output
and turns out there's three files um

2730
00:51:09,910 --> 00:51:09,920
and turns out there's three files um
 

2731
00:51:09,920 --> 00:51:10,790
and turns out there's three files um
whose names

2732
00:51:10,790 --> 00:51:10,800
whose names
 

2733
00:51:10,800 --> 00:51:13,990
whose names
contain x's

2734
00:51:13,990 --> 00:51:14,000

 

2735
00:51:14,000 --> 00:51:16,549

um we're going to spend a bunch of time

2736
00:51:16,549 --> 00:51:16,559
um we're going to spend a bunch of time
 

2737
00:51:16,559 --> 00:51:17,349
um we're going to spend a bunch of time
with the shell

2738
00:51:17,349 --> 00:51:17,359
with the shell
 

2739
00:51:17,359 --> 00:51:21,829
with the shell
um it the shell is sort of the most

2740
00:51:21,829 --> 00:51:21,839
um it the shell is sort of the most
 

2741
00:51:21,839 --> 00:51:22,950
um it the shell is sort of the most
traditional

2742
00:51:22,950 --> 00:51:22,960
traditional
 

2743
00:51:22,960 --> 00:51:25,829
traditional
um and fundamental interface to uh to

2744
00:51:25,829 --> 00:51:25,839
um and fundamental interface to uh to
 

2745
00:51:25,839 --> 00:51:26,549
um and fundamental interface to uh to
unix

2746
00:51:26,549 --> 00:51:26,559
unix
 

2747
00:51:26,559 --> 00:51:28,870
unix
because when units was first developed

2748
00:51:28,870 --> 00:51:28,880
because when units was first developed
 

2749
00:51:28,880 --> 00:51:30,230
because when units was first developed
all there was was simple terminal

2750
00:51:30,230 --> 00:51:30,240
all there was was simple terminal
 

2751
00:51:30,240 --> 00:51:32,470
all there was was simple terminal
interfaces like the one we're using

2752
00:51:32,470 --> 00:51:32,480
interfaces like the one we're using
 

2753
00:51:32,480 --> 00:51:35,430
interfaces like the one we're using
and the main use of unix originally was

2754
00:51:35,430 --> 00:51:35,440
and the main use of unix originally was
 

2755
00:51:35,440 --> 00:51:35,829
and the main use of unix originally was
time

2756
00:51:35,829 --> 00:51:35,839
time
 

2757
00:51:35,839 --> 00:51:37,510
time
sharing a bunch of people logging into

2758
00:51:37,510 --> 00:51:37,520
sharing a bunch of people logging into
 

2759
00:51:37,520 --> 00:51:40,470
sharing a bunch of people logging into
the same machine much like athena

2760
00:51:40,470 --> 00:51:40,480
the same machine much like athena
 

2761
00:51:40,480 --> 00:51:44,230
the same machine much like athena
and talking to shells

2762
00:51:44,230 --> 00:51:44,240

 

2763
00:51:44,240 --> 00:51:46,710

a question about system calls and the

2764
00:51:46,710 --> 00:51:46,720
a question about system calls and the
 

2765
00:51:46,720 --> 00:51:47,670
a question about system calls and the
compiler

2766
00:51:47,670 --> 00:51:47,680
compiler
 

2767
00:51:47,680 --> 00:51:49,670
compiler
how does a compiler handle system calls

2768
00:51:49,670 --> 00:51:49,680
how does a compiler handle system calls
 

2769
00:51:49,680 --> 00:51:51,670
how does a compiler handle system calls
does assembly generated make a procedure

2770
00:51:51,670 --> 00:51:51,680
does assembly generated make a procedure
 

2771
00:51:51,680 --> 00:51:53,510
does assembly generated make a procedure
call to some code segment

2772
00:51:53,510 --> 00:51:53,520
call to some code segment
 

2773
00:51:53,520 --> 00:51:56,950
call to some code segment
uh defined by the operating system

2774
00:51:56,950 --> 00:51:56,960
uh defined by the operating system
 

2775
00:51:56,960 --> 00:51:58,950
uh defined by the operating system
uh there's a special risk five

2776
00:51:58,950 --> 00:51:58,960
uh there's a special risk five
 

2777
00:51:58,960 --> 00:52:01,109
uh there's a special risk five
instruction that a program can call that

2778
00:52:01,109 --> 00:52:01,119
instruction that a program can call that
 

2779
00:52:01,119 --> 00:52:02,790
instruction that a program can call that
transfers control into the kernel

2780
00:52:02,790 --> 00:52:02,800
transfers control into the kernel
 

2781
00:52:02,800 --> 00:52:05,349
transfers control into the kernel
so indeed when you write c code that

2782
00:52:05,349 --> 00:52:05,359
so indeed when you write c code that
 

2783
00:52:05,359 --> 00:52:06,710
so indeed when you write c code that
makes the system called like open or

2784
00:52:06,710 --> 00:52:06,720
makes the system called like open or
 

2785
00:52:06,720 --> 00:52:08,470
makes the system called like open or
right

2786
00:52:08,470 --> 00:52:08,480
right
 

2787
00:52:08,480 --> 00:52:10,230
right
i mean technically what actually happens

2788
00:52:10,230 --> 00:52:10,240
i mean technically what actually happens
 

2789
00:52:10,240 --> 00:52:11,990
i mean technically what actually happens
is open is a c

2790
00:52:11,990 --> 00:52:12,000
is open is a c
 

2791
00:52:12,000 --> 00:52:15,109
is open is a c
function in the c library

2792
00:52:15,109 --> 00:52:15,119
function in the c library
 

2793
00:52:15,119 --> 00:52:17,589
function in the c library
but the instructions in that function

2794
00:52:17,589 --> 00:52:17,599
but the instructions in that function
 

2795
00:52:17,599 --> 00:52:18,470
but the instructions in that function
are really

2796
00:52:18,470 --> 00:52:18,480
are really
 

2797
00:52:18,480 --> 00:52:20,470
are really
machine instructions it's not you know

2798
00:52:20,470 --> 00:52:20,480
machine instructions it's not you know
 

2799
00:52:20,480 --> 00:52:21,670
machine instructions it's not you know
open

2800
00:52:21,670 --> 00:52:21,680
open
 

2801
00:52:21,680 --> 00:52:23,109
open
the open function that we're calling

2802
00:52:23,109 --> 00:52:23,119
the open function that we're calling
 

2803
00:52:23,119 --> 00:52:25,030
the open function that we're calling
isn't a c function it's implemented

2804
00:52:25,030 --> 00:52:25,040
isn't a c function it's implemented
 

2805
00:52:25,040 --> 00:52:25,910
isn't a c function it's implemented
assembler

2806
00:52:25,910 --> 00:52:25,920
assembler
 

2807
00:52:25,920 --> 00:52:30,230
assembler
and the assembly code

2808
00:52:30,230 --> 00:52:30,240

 

2809
00:52:30,240 --> 00:52:32,069

consists of this special instruction

2810
00:52:32,069 --> 00:52:32,079
consists of this special instruction
 

2811
00:52:32,079 --> 00:52:33,990
consists of this special instruction
it's actually called e-call

2812
00:52:33,990 --> 00:52:34,000
it's actually called e-call
 

2813
00:52:34,000 --> 00:52:35,829
it's actually called e-call
on the risk 5 the special instruction

2814
00:52:35,829 --> 00:52:35,839
on the risk 5 the special instruction
 

2815
00:52:35,839 --> 00:52:37,510
on the risk 5 the special instruction
that transfers control

2816
00:52:37,510 --> 00:52:37,520
that transfers control
 

2817
00:52:37,520 --> 00:52:39,990
that transfers control
into the kernel and then the kernel

2818
00:52:39,990 --> 00:52:40,000
into the kernel and then the kernel
 

2819
00:52:40,000 --> 00:52:40,710
into the kernel and then the kernel
looks at the

2820
00:52:40,710 --> 00:52:40,720
looks at the
 

2821
00:52:40,720 --> 00:52:42,549
looks at the
process's memory and registers to figure

2822
00:52:42,549 --> 00:52:42,559
process's memory and registers to figure
 

2823
00:52:42,559 --> 00:52:44,150
process's memory and registers to figure
out what the

2824
00:52:44,150 --> 00:52:44,160
out what the
 

2825
00:52:44,160 --> 00:52:50,470
out what the
arguments were

2826
00:52:50,470 --> 00:52:50,480

 

2827
00:52:50,480 --> 00:52:53,589

all right um the next example i want to

2828
00:52:53,589 --> 00:52:53,599
all right um the next example i want to
 

2829
00:52:53,599 --> 00:52:54,790
all right um the next example i want to
look at is

2830
00:52:54,790 --> 00:52:54,800
look at is
 

2831
00:52:54,800 --> 00:52:58,309
look at is
an example program that calls fork

2832
00:52:58,309 --> 00:52:58,319
an example program that calls fork
 

2833
00:52:58,319 --> 00:53:01,349
an example program that calls fork
to create a new process um

2834
00:53:01,349 --> 00:53:01,359
to create a new process um
 

2835
00:53:01,359 --> 00:53:04,630
to create a new process um
so this is the very simple use of fork

2836
00:53:04,630 --> 00:53:04,640
so this is the very simple use of fork
 

2837
00:53:04,640 --> 00:53:05,750
so this is the very simple use of fork
at line 12

2838
00:53:05,750 --> 00:53:05,760
at line 12
 

2839
00:53:05,760 --> 00:53:08,630
at line 12
we're calling fork and what fork does is

2840
00:53:08,630 --> 00:53:08,640
we're calling fork and what fork does is
 

2841
00:53:08,640 --> 00:53:09,990
we're calling fork and what fork does is
creates a copy

2842
00:53:09,990 --> 00:53:10,000
creates a copy
 

2843
00:53:10,000 --> 00:53:12,549
creates a copy
of the memory of instructions and data

2844
00:53:12,549 --> 00:53:12,559
of the memory of instructions and data
 

2845
00:53:12,559 --> 00:53:13,349
of the memory of instructions and data
of the

2846
00:53:13,349 --> 00:53:13,359
of the
 

2847
00:53:13,359 --> 00:53:14,950
of the
calling process now we have two

2848
00:53:14,950 --> 00:53:14,960
calling process now we have two
 

2849
00:53:14,960 --> 00:53:16,790
calling process now we have two
processes with identical

2850
00:53:16,790 --> 00:53:16,800
processes with identical
 

2851
00:53:16,800 --> 00:53:19,430
processes with identical
memory fork the fork system called

2852
00:53:19,430 --> 00:53:19,440
memory fork the fork system called
 

2853
00:53:19,440 --> 00:53:20,150
memory fork the fork system called
returns

2854
00:53:20,150 --> 00:53:20,160
returns
 

2855
00:53:20,160 --> 00:53:23,109
returns
in both processes in the original

2856
00:53:23,109 --> 00:53:23,119
in both processes in the original
 

2857
00:53:23,119 --> 00:53:24,309
in both processes in the original
process

2858
00:53:24,309 --> 00:53:24,319
process
 

2859
00:53:24,319 --> 00:53:26,630
process
the fork system call returns the process

2860
00:53:26,630 --> 00:53:26,640
the fork system call returns the process
 

2861
00:53:26,640 --> 00:53:29,030
the fork system call returns the process
id which is a

2862
00:53:29,030 --> 00:53:29,040
id which is a
 

2863
00:53:29,040 --> 00:53:32,390
id which is a
an integer greater than zero for in the

2864
00:53:32,390 --> 00:53:32,400
an integer greater than zero for in the
 

2865
00:53:32,400 --> 00:53:33,270
an integer greater than zero for in the
original process

2866
00:53:33,270 --> 00:53:33,280
original process
 

2867
00:53:33,280 --> 00:53:35,270
original process
fork returns the process id of the newly

2868
00:53:35,270 --> 00:53:35,280
fork returns the process id of the newly
 

2869
00:53:35,280 --> 00:53:36,630
fork returns the process id of the newly
created process

2870
00:53:36,630 --> 00:53:36,640
created process
 

2871
00:53:36,640 --> 00:53:38,790
created process
and in the newly created process fork

2872
00:53:38,790 --> 00:53:38,800
and in the newly created process fork
 

2873
00:53:38,800 --> 00:53:39,990
and in the newly created process fork
returns

2874
00:53:39,990 --> 00:53:40,000
returns
 

2875
00:53:40,000 --> 00:53:42,950
returns
zero so we sort of break even though the

2876
00:53:42,950 --> 00:53:42,960
zero so we sort of break even though the
 

2877
00:53:42,960 --> 00:53:45,510
zero so we sort of break even though the
processes of identical memory

2878
00:53:45,510 --> 00:53:45,520
processes of identical memory
 

2879
00:53:45,520 --> 00:53:48,470
processes of identical memory
can break the symmetry of old versus new

2880
00:53:48,470 --> 00:53:48,480
can break the symmetry of old versus new
 

2881
00:53:48,480 --> 00:53:50,870
can break the symmetry of old versus new
process by the return value from fork

2882
00:53:50,870 --> 00:53:50,880
process by the return value from fork
 

2883
00:53:50,880 --> 00:53:53,829
process by the return value from fork
then in line 16 you can see code that

2884
00:53:53,829 --> 00:53:53,839
then in line 16 you can see code that
 

2885
00:53:53,839 --> 00:53:54,870
then in line 16 you can see code that
checks and says if

2886
00:53:54,870 --> 00:53:54,880
checks and says if
 

2887
00:53:54,880 --> 00:53:57,030
checks and says if
process id is equal 0 must be the child

2888
00:53:57,030 --> 00:53:57,040
process id is equal 0 must be the child
 

2889
00:53:57,040 --> 00:54:00,390
process id is equal 0 must be the child
we must now be running in the child

2890
00:54:00,390 --> 00:54:00,400
we must now be running in the child
 

2891
00:54:00,400 --> 00:54:01,910
we must now be running in the child
the course is two processes and in the

2892
00:54:01,910 --> 00:54:01,920
the course is two processes and in the
 

2893
00:54:01,920 --> 00:54:03,670
the course is two processes and in the
other process

2894
00:54:03,670 --> 00:54:03,680
other process
 

2895
00:54:03,680 --> 00:54:05,109
other process
in the calling process which is usually

2896
00:54:05,109 --> 00:54:05,119
in the calling process which is usually
 

2897
00:54:05,119 --> 00:54:07,190
in the calling process which is usually
called the parent the process id is

2898
00:54:07,190 --> 00:54:07,200
called the parent the process id is
 

2899
00:54:07,200 --> 00:54:09,270
called the parent the process id is
greater than zero

2900
00:54:09,270 --> 00:54:09,280
greater than zero
 

2901
00:54:09,280 --> 00:54:11,589
greater than zero
so the child will print child and the

2902
00:54:11,589 --> 00:54:11,599
so the child will print child and the
 

2903
00:54:11,599 --> 00:54:14,470
so the child will print child and the
parent a good parent

2904
00:54:14,470 --> 00:54:14,480
parent a good parent
 

2905
00:54:14,480 --> 00:54:17,349
parent a good parent
and then they'll both exit so when i run

2906
00:54:17,349 --> 00:54:17,359
and then they'll both exit so when i run
 

2907
00:54:17,359 --> 00:54:19,349
and then they'll both exit so when i run
for

2908
00:54:19,349 --> 00:54:19,359
for
 

2909
00:54:19,359 --> 00:54:22,710
for
um here's what we get

2910
00:54:22,710 --> 00:54:22,720

 

2911
00:54:22,720 --> 00:54:25,430

so it may look like garbage but what's

2912
00:54:25,430 --> 00:54:25,440
so it may look like garbage but what's
 

2913
00:54:25,440 --> 00:54:26,790
so it may look like garbage but what's
actually happening is that

2914
00:54:26,790 --> 00:54:26,800
actually happening is that
 

2915
00:54:26,800 --> 00:54:28,549
actually happening is that
after the fork both of these processes

2916
00:54:28,549 --> 00:54:28,559
after the fork both of these processes
 

2917
00:54:28,559 --> 00:54:30,069
after the fork both of these processes
are running they're both running at the

2918
00:54:30,069 --> 00:54:30,079
are running they're both running at the
 

2919
00:54:30,079 --> 00:54:31,030
are running they're both running at the
same time

2920
00:54:31,030 --> 00:54:31,040
same time
 

2921
00:54:31,040 --> 00:54:34,150
same time
um and qmu is actually emulating a multi

2922
00:54:34,150 --> 00:54:34,160
um and qmu is actually emulating a multi
 

2923
00:54:34,160 --> 00:54:36,950
um and qmu is actually emulating a multi
a multi-core microprocessor for me so

2924
00:54:36,950 --> 00:54:36,960
a multi-core microprocessor for me so
 

2925
00:54:36,960 --> 00:54:39,190
a multi-core microprocessor for me so
they really are running

2926
00:54:39,190 --> 00:54:39,200
they really are running
 

2927
00:54:39,200 --> 00:54:40,549
they really are running
at the very same time and so when they

2928
00:54:40,549 --> 00:54:40,559
at the very same time and so when they
 

2929
00:54:40,559 --> 00:54:42,549
at the very same time and so when they
produce output they're producing each

2930
00:54:42,549 --> 00:54:42,559
produce output they're producing each
 

2931
00:54:42,559 --> 00:54:44,390
produce output they're producing each
byte of their output at the same time as

2932
00:54:44,390 --> 00:54:44,400
byte of their output at the same time as
 

2933
00:54:44,400 --> 00:54:45,190
byte of their output at the same time as
the other process

2934
00:54:45,190 --> 00:54:45,200
the other process
 

2935
00:54:45,200 --> 00:54:46,630
the other process
is producing the corresponding byte of

2936
00:54:46,630 --> 00:54:46,640
is producing the corresponding byte of
 

2937
00:54:46,640 --> 00:54:48,470
is producing the corresponding byte of
its output so the outputs and the two

2938
00:54:48,470 --> 00:54:48,480
its output so the outputs and the two
 

2939
00:54:48,480 --> 00:54:50,829
its output so the outputs and the two
processes are

2940
00:54:50,829 --> 00:54:50,839
processes are
 

2941
00:54:50,839 --> 00:54:53,190
processes are
interleaved um you can see that they're

2942
00:54:53,190 --> 00:54:53,200
interleaved um you can see that they're
 

2943
00:54:53,200 --> 00:54:54,710
interleaved um you can see that they're
both typing f

2944
00:54:54,710 --> 00:54:54,720
both typing f
 

2945
00:54:54,720 --> 00:54:56,309
both typing f
um they're both going to type fork

2946
00:54:56,309 --> 00:54:56,319
um they're both going to type fork
 

2947
00:54:56,319 --> 00:54:57,750
um they're both going to type fork
returned

2948
00:54:57,750 --> 00:54:57,760
returned
 

2949
00:54:57,760 --> 00:54:59,430
returned
um so you can see the f from both of

2950
00:54:59,430 --> 00:54:59,440
um so you can see the f from both of
 

2951
00:54:59,440 --> 00:55:00,870
um so you can see the f from both of
them and the o for both of them and they

2952
00:55:00,870 --> 00:55:00,880
them and the o for both of them and they
 

2953
00:55:00,880 --> 00:55:02,870
them and the o for both of them and they
are for both them and so on

2954
00:55:02,870 --> 00:55:02,880
are for both them and so on
 

2955
00:55:02,880 --> 00:55:05,910
are for both them and so on
and one of them uh you can see the zero

2956
00:55:05,910 --> 00:55:05,920
and one of them uh you can see the zero
 

2957
00:55:05,920 --> 00:55:07,829
and one of them uh you can see the zero
at the end of that first line is

2958
00:55:07,829 --> 00:55:07,839
at the end of that first line is
 

2959
00:55:07,839 --> 00:55:10,789
at the end of that first line is
in the child fourth return zero um and

2960
00:55:10,789 --> 00:55:10,799
in the child fourth return zero um and
 

2961
00:55:10,799 --> 00:55:12,470
in the child fourth return zero um and
i'm guessing that the

2962
00:55:12,470 --> 00:55:12,480
i'm guessing that the
 

2963
00:55:12,480 --> 00:55:15,349
i'm guessing that the
in the parent four return 19 that is the

2964
00:55:15,349 --> 00:55:15,359
in the parent four return 19 that is the
 

2965
00:55:15,359 --> 00:55:16,069
in the parent four return 19 that is the
child's

2966
00:55:16,069 --> 00:55:16,079
child's
 

2967
00:55:16,079 --> 00:55:18,470
child's
process id is nineteen under exit six

2968
00:55:18,470 --> 00:55:18,480
process id is nineteen under exit six
 

2969
00:55:18,480 --> 00:55:20,390
process id is nineteen under exit six
that basically means the 19th process

2970
00:55:20,390 --> 00:55:20,400
that basically means the 19th process
 

2971
00:55:20,400 --> 00:55:20,950
that basically means the 19th process
that

2972
00:55:20,950 --> 00:55:20,960
that
 

2973
00:55:20,960 --> 00:55:23,430
that
was created since boot um and then one

2974
00:55:23,430 --> 00:55:23,440
was created since boot um and then one
 

2975
00:55:23,440 --> 00:55:24,390
was created since boot um and then one
of them prints

2976
00:55:24,390 --> 00:55:24,400
of them prints
 

2977
00:55:24,400 --> 00:55:27,510
of them prints
child and you can see the ch ild

2978
00:55:27,510 --> 00:55:27,520
child and you can see the ch ild
 

2979
00:55:27,520 --> 00:55:29,349
child and you can see the ch ild
and interleave with that is the other

2980
00:55:29,349 --> 00:55:29,359
and interleave with that is the other
 

2981
00:55:29,359 --> 00:55:30,630
and interleave with that is the other
one pretty parent

2982
00:55:30,630 --> 00:55:30,640
one pretty parent
 

2983
00:55:30,640 --> 00:55:33,990
one pretty parent
so this is sort of a silly use

2984
00:55:33,990 --> 00:55:34,000
so this is sort of a silly use
 

2985
00:55:34,000 --> 00:55:36,549
so this is sort of a silly use
of fork but we can see so vividly in

2986
00:55:36,549 --> 00:55:36,559
of fork but we can see so vividly in
 

2987
00:55:36,559 --> 00:55:37,589
of fork but we can see so vividly in
this output that

2988
00:55:37,589 --> 00:55:37,599
this output that
 

2989
00:55:37,599 --> 00:55:40,069
this output that
it's created two processes that are and

2990
00:55:40,069 --> 00:55:40,079
it's created two processes that are and
 

2991
00:55:40,079 --> 00:55:41,190
it's created two processes that are and
both of them are running

2992
00:55:41,190 --> 00:55:41,200
both of them are running
 

2993
00:55:41,200 --> 00:55:42,789
both of them are running
we're fork returning both processes and

2994
00:55:42,789 --> 00:55:42,799
we're fork returning both processes and
 

2995
00:55:42,799 --> 00:55:44,710
we're fork returning both processes and
they're both running

2996
00:55:44,710 --> 00:55:44,720
they're both running
 

2997
00:55:44,720 --> 00:55:46,710
they're both running
but also note that one printed child and

2998
00:55:46,710 --> 00:55:46,720
but also note that one printed child and
 

2999
00:55:46,720 --> 00:55:48,470
but also note that one printed child and
the other parent

3000
00:55:48,470 --> 00:55:48,480
the other parent
 

3001
00:55:48,480 --> 00:55:50,549
the other parent
so it's important that fork returns

3002
00:55:50,549 --> 00:55:50,559
so it's important that fork returns
 

3003
00:55:50,559 --> 00:55:51,990
so it's important that fork returns
differently

3004
00:55:51,990 --> 00:55:52,000
differently
 

3005
00:55:52,000 --> 00:55:59,589
differently
in the two processes

3006
00:55:59,589 --> 00:55:59,599

 

3007
00:55:59,599 --> 00:56:02,549

the question is the child process as a

3008
00:56:02,549 --> 00:56:02,559
the question is the child process as a
 

3009
00:56:02,559 --> 00:56:04,390
the question is the child process as a
result of fork always identical to the

3010
00:56:04,390 --> 00:56:04,400
result of fork always identical to the
 

3011
00:56:04,400 --> 00:56:05,829
result of fork always identical to the
parent process or could they be

3012
00:56:05,829 --> 00:56:05,839
parent process or could they be
 

3013
00:56:05,839 --> 00:56:08,390
parent process or could they be
different

3014
00:56:08,390 --> 00:56:08,400

 

3015
00:56:08,400 --> 00:56:11,510

i um

3016
00:56:11,510 --> 00:56:11,520

 

3017
00:56:11,520 --> 00:56:14,789

in xv6 are identical

3018
00:56:14,789 --> 00:56:14,799
in xv6 are identical
 

3019
00:56:14,799 --> 00:56:17,190
in xv6 are identical
except for the return value from fork

3020
00:56:17,190 --> 00:56:17,200
except for the return value from fork
 

3021
00:56:17,200 --> 00:56:18,549
except for the return value from fork
you know so the instructions are the

3022
00:56:18,549 --> 00:56:18,559
you know so the instructions are the
 

3023
00:56:18,559 --> 00:56:20,789
you know so the instructions are the
same the data's the same the stack is

3024
00:56:20,789 --> 00:56:20,799
same the data's the same the stack is
 

3025
00:56:20,799 --> 00:56:24,150
same the data's the same the stack is
is the same um and also both

3026
00:56:24,150 --> 00:56:24,160
is the same um and also both
 

3027
00:56:24,160 --> 00:56:27,030
is the same um and also both
processes you know the processes are

3028
00:56:27,030 --> 00:56:27,040
processes you know the processes are
 

3029
00:56:27,040 --> 00:56:27,750
processes you know the processes are
copies and

3030
00:56:27,750 --> 00:56:27,760
copies and
 

3031
00:56:27,760 --> 00:56:30,150
copies and
they both have their own separate

3032
00:56:30,150 --> 00:56:30,160
they both have their own separate
 

3033
00:56:30,160 --> 00:56:31,990
they both have their own separate
address spaces that is

3034
00:56:31,990 --> 00:56:32,000
address spaces that is
 

3035
00:56:32,000 --> 00:56:33,910
address spaces that is
you know they both have they both think

3036
00:56:33,910 --> 00:56:33,920
you know they both have they both think
 

3037
00:56:33,920 --> 00:56:35,589
you know they both have they both think
that their memory starts at zero and

3038
00:56:35,589 --> 00:56:35,599
that their memory starts at zero and
 

3039
00:56:35,599 --> 00:56:37,349
that their memory starts at zero and
goes on up from there

3040
00:56:37,349 --> 00:56:37,359
goes on up from there
 

3041
00:56:37,359 --> 00:56:40,870
goes on up from there
um but but it's different it's different

3042
00:56:40,870 --> 00:56:40,880
um but but it's different it's different
 

3043
00:56:40,880 --> 00:56:44,950
um but but it's different it's different
different memory um for the two of them

3044
00:56:44,950 --> 00:56:44,960
different memory um for the two of them
 

3045
00:56:44,960 --> 00:56:46,630
different memory um for the two of them
in a more sophisticated operating system

3046
00:56:46,630 --> 00:56:46,640
in a more sophisticated operating system
 

3047
00:56:46,640 --> 00:56:48,870
in a more sophisticated operating system
there are some details which we

3048
00:56:48,870 --> 00:56:48,880
there are some details which we
 

3049
00:56:48,880 --> 00:56:50,390
there are some details which we
definitely don't care about

3050
00:56:50,390 --> 00:56:50,400
definitely don't care about
 

3051
00:56:50,400 --> 00:56:53,349
definitely don't care about
um that may occasionally cause parent

3052
00:56:53,349 --> 00:56:53,359
um that may occasionally cause parent
 

3053
00:56:53,359 --> 00:56:55,109
um that may occasionally cause parent
and child to differ but in xv6 they're

3054
00:56:55,109 --> 00:56:55,119
and child to differ but in xv6 they're
 

3055
00:56:55,119 --> 00:56:58,230
and child to differ but in xv6 they're
the same except the return value

3056
00:56:58,230 --> 00:56:58,240
the same except the return value
 

3057
00:56:58,240 --> 00:57:00,069
the same except the return value
so the memory is the same in addition

3058
00:57:00,069 --> 00:57:00,079
so the memory is the same in addition
 

3059
00:57:00,079 --> 00:57:01,990
so the memory is the same in addition
the

3060
00:57:01,990 --> 00:57:02,000
the
 

3061
00:57:02,000 --> 00:57:05,190
the
file descriptor table is copied

3062
00:57:05,190 --> 00:57:05,200
file descriptor table is copied
 

3063
00:57:05,200 --> 00:57:09,589
file descriptor table is copied
so if the parent had some files open

3064
00:57:09,589 --> 00:57:09,599
so if the parent had some files open
 

3065
00:57:09,599 --> 00:57:12,230
so if the parent had some files open
then the child sees the same set of file

3066
00:57:12,230 --> 00:57:12,240
then the child sees the same set of file
 

3067
00:57:12,240 --> 00:57:14,069
then the child sees the same set of file
descriptors

3068
00:57:14,069 --> 00:57:14,079
descriptors
 

3069
00:57:14,079 --> 00:57:16,069
descriptors
although the child is seeing them in a

3070
00:57:16,069 --> 00:57:16,079
although the child is seeing them in a
 

3071
00:57:16,079 --> 00:57:17,109
although the child is seeing them in a
copy

3072
00:57:17,109 --> 00:57:17,119
copy
 

3073
00:57:17,119 --> 00:57:18,950
copy
of the table of file descriptor

3074
00:57:18,950 --> 00:57:18,960
of the table of file descriptor
 

3075
00:57:18,960 --> 00:57:21,430
of the table of file descriptor
information

3076
00:57:21,430 --> 00:57:21,440
information
 

3077
00:57:21,440 --> 00:57:22,950
information
and so we'll see in a moment that it's

3078
00:57:22,950 --> 00:57:22,960
and so we'll see in a moment that it's
 

3079
00:57:22,960 --> 00:57:24,710
and so we'll see in a moment that it's
quite important that

3080
00:57:24,710 --> 00:57:24,720
quite important that
 

3081
00:57:24,720 --> 00:57:27,430
quite important that
fork copies the table of open file

3082
00:57:27,430 --> 00:57:27,440
fork copies the table of open file
 

3083
00:57:27,440 --> 00:57:31,349
fork copies the table of open file
descriptors as well as the memory

3084
00:57:31,349 --> 00:57:31,359

 

3085
00:57:31,359 --> 00:57:34,950

okay so uh port creates a new process

3086
00:57:34,950 --> 00:57:34,960
okay so uh port creates a new process
 

3087
00:57:34,960 --> 00:57:35,510
okay so uh port creates a new process
but

3088
00:57:35,510 --> 00:57:35,520
but
 

3089
00:57:35,520 --> 00:57:38,950
but
when we run stuff in the shell um

3090
00:57:38,950 --> 00:57:38,960
when we run stuff in the shell um
 

3091
00:57:38,960 --> 00:57:40,870
when we run stuff in the shell um
the shell indeed creates a new process

3092
00:57:40,870 --> 00:57:40,880
the shell indeed creates a new process
 

3093
00:57:40,880 --> 00:57:43,430
the shell indeed creates a new process
to run each command that you type

3094
00:57:43,430 --> 00:57:43,440
to run each command that you type
 

3095
00:57:43,440 --> 00:57:44,789
to run each command that you type
but it needs to actually run the command

3096
00:57:44,789 --> 00:57:44,799
but it needs to actually run the command
 

3097
00:57:44,799 --> 00:57:47,030
but it needs to actually run the command
in it so you know if i type ls

3098
00:57:47,030 --> 00:57:47,040
in it so you know if i type ls
 

3099
00:57:47,040 --> 00:57:49,589
in it so you know if i type ls
we need to the shell forks to create a

3100
00:57:49,589 --> 00:57:49,599
we need to the shell forks to create a
 

3101
00:57:49,599 --> 00:57:51,190
we need to the shell forks to create a
process to run ls but

3102
00:57:51,190 --> 00:57:51,200
process to run ls but
 

3103
00:57:51,200 --> 00:57:53,910
process to run ls but
there needs to be some way for this for

3104
00:57:53,910 --> 00:57:53,920
there needs to be some way for this for
 

3105
00:57:53,920 --> 00:57:54,630
there needs to be some way for this for
that

3106
00:57:54,630 --> 00:57:54,640
that
 

3107
00:57:54,640 --> 00:57:55,910
that
new process actually run the

3108
00:57:55,910 --> 00:57:55,920
new process actually run the
 

3109
00:57:55,920 --> 00:57:58,470
new process actually run the
instructions from the ls program

3110
00:57:58,470 --> 00:57:58,480
instructions from the ls program
 

3111
00:57:58,480 --> 00:57:59,990
instructions from the ls program
to load those instructions from the file

3112
00:57:59,990 --> 00:58:00,000
to load those instructions from the file
 

3113
00:58:00,000 --> 00:58:02,230
to load those instructions from the file
called lx um

3114
00:58:02,230 --> 00:58:02,240
called lx um
 

3115
00:58:02,240 --> 00:58:03,990
called lx um
and the example program i mean i'll show

3116
00:58:03,990 --> 00:58:04,000
and the example program i mean i'll show
 

3117
00:58:04,000 --> 00:58:05,270
and the example program i mean i'll show
you in a minute

3118
00:58:05,270 --> 00:58:05,280
you in a minute
 

3119
00:58:05,280 --> 00:58:07,109
you in a minute
uh uses echo echo is a very simple

3120
00:58:07,109 --> 00:58:07,119
uh uses echo echo is a very simple
 

3121
00:58:07,119 --> 00:58:09,030
uh uses echo echo is a very simple
command that

3122
00:58:09,030 --> 00:58:09,040
command that
 

3123
00:58:09,040 --> 00:58:10,630
command that
just takes whatever arguments you pass

3124
00:58:10,630 --> 00:58:10,640
just takes whatever arguments you pass
 

3125
00:58:10,640 --> 00:58:13,990
just takes whatever arguments you pass
to it and writes them into its output

3126
00:58:13,990 --> 00:58:14,000
to it and writes them into its output
 

3127
00:58:14,000 --> 00:58:15,829
to it and writes them into its output
and i prepared for you a program called

3128
00:58:15,829 --> 00:58:15,839
and i prepared for you a program called
 

3129
00:58:15,839 --> 00:58:21,270
and i prepared for you a program called
exec

3130
00:58:21,270 --> 00:58:21,280

 

3131
00:58:21,280 --> 00:58:24,309

um which

3132
00:58:24,309 --> 00:58:24,319
um which
 

3133
00:58:24,319 --> 00:58:27,990
um which
uh run which makes the exact system

3134
00:58:27,990 --> 00:58:28,000
uh run which makes the exact system
 

3135
00:58:28,000 --> 00:58:28,789
uh run which makes the exact system
called which

3136
00:58:28,789 --> 00:58:28,799
called which
 

3137
00:58:28,799 --> 00:58:31,670
called which
replaces the calling process with the

3138
00:58:31,670 --> 00:58:31,680
replaces the calling process with the
 

3139
00:58:31,680 --> 00:58:33,109
replaces the calling process with the
instructions read from a

3140
00:58:33,109 --> 00:58:33,119
instructions read from a
 

3141
00:58:33,119 --> 00:58:37,349
instructions read from a
particular from the file you specify and

3142
00:58:37,349 --> 00:58:37,359
particular from the file you specify and
 

3143
00:58:37,359 --> 00:58:39,190
particular from the file you specify and
loads the instructions from that file

3144
00:58:39,190 --> 00:58:39,200
loads the instructions from that file
 

3145
00:58:39,200 --> 00:58:41,030
loads the instructions from that file
over the current process sort of discard

3146
00:58:41,030 --> 00:58:41,040
over the current process sort of discard
 

3147
00:58:41,040 --> 00:58:42,950
over the current process sort of discard
it discarding its current memory

3148
00:58:42,950 --> 00:58:42,960
it discarding its current memory
 

3149
00:58:42,960 --> 00:58:44,950
it discarding its current memory
and then starts executing those

3150
00:58:44,950 --> 00:58:44,960
and then starts executing those
 

3151
00:58:44,960 --> 00:58:46,150
and then starts executing those
instructions so

3152
00:58:46,150 --> 00:58:46,160
instructions so
 

3153
00:58:46,160 --> 00:58:48,630
instructions so
the call to exec the system call exec on

3154
00:58:48,630 --> 00:58:48,640
the call to exec the system call exec on
 

3155
00:58:48,640 --> 00:58:52,549
the call to exec the system call exec on
line 12.

3156
00:58:52,549 --> 00:58:52,559

 

3157
00:58:52,559 --> 00:58:53,990

it's going to have the effect of the

3158
00:58:53,990 --> 00:58:54,000
it's going to have the effect of the
 

3159
00:58:54,000 --> 00:58:55,190
it's going to have the effect of the
operating system loading the

3160
00:58:55,190 --> 00:58:55,200
operating system loading the
 

3161
00:58:55,200 --> 00:58:56,950
operating system loading the
instructions from the file called

3162
00:58:56,950 --> 00:58:56,960
instructions from the file called
 

3163
00:58:56,960 --> 00:58:59,510
instructions from the file called
echo into the current process sort of

3164
00:58:59,510 --> 00:58:59,520
echo into the current process sort of
 

3165
00:58:59,520 --> 00:59:00,789
echo into the current process sort of
replacing

3166
00:59:00,789 --> 00:59:00,799
replacing
 

3167
00:59:00,799 --> 00:59:03,030
replacing
the memory of the current process and

3168
00:59:03,030 --> 00:59:03,040
the memory of the current process and
 

3169
00:59:03,040 --> 00:59:03,990
the memory of the current process and
then starting to

3170
00:59:03,990 --> 00:59:04,000
then starting to
 

3171
00:59:04,000 --> 00:59:06,870
then starting to
execute uh those instructions and in

3172
00:59:06,870 --> 00:59:06,880
execute uh those instructions and in
 

3173
00:59:06,880 --> 00:59:08,710
execute uh those instructions and in
addition you can pass arguments command

3174
00:59:08,710 --> 00:59:08,720
addition you can pass arguments command
 

3175
00:59:08,720 --> 00:59:09,990
addition you can pass arguments command
line arguments echo

3176
00:59:09,990 --> 00:59:10,000
line arguments echo
 

3177
00:59:10,000 --> 00:59:12,710
line arguments echo
exec allows you to pass an array of

3178
00:59:12,710 --> 00:59:12,720
exec allows you to pass an array of
 

3179
00:59:12,720 --> 00:59:14,549
exec allows you to pass an array of
command line arguments

3180
00:59:14,549 --> 00:59:14,559
command line arguments
 

3181
00:59:14,559 --> 00:59:17,030
command line arguments
with just an array of pointers and see

3182
00:59:17,030 --> 00:59:17,040
with just an array of pointers and see
 

3183
00:59:17,040 --> 00:59:17,670
with just an array of pointers and see
line 10

3184
00:59:17,670 --> 00:59:17,680
line 10
 

3185
00:59:17,680 --> 00:59:20,309
line 10
set sets up an array of character

3186
00:59:20,309 --> 00:59:20,319
set sets up an array of character
 

3187
00:59:20,319 --> 00:59:22,789
set sets up an array of character
pointers which are essentially strings

3188
00:59:22,789 --> 00:59:22,799
pointers which are essentially strings
 

3189
00:59:22,799 --> 00:59:25,829
pointers which are essentially strings
and initializes that array to be

3190
00:59:25,829 --> 00:59:25,839
and initializes that array to be
 

3191
00:59:25,839 --> 00:59:29,430
and initializes that array to be
to contain the strings echo this is echo

3192
00:59:29,430 --> 00:59:29,440
to contain the strings echo this is echo
 

3193
00:59:29,440 --> 00:59:31,670
to contain the strings echo this is echo
and that's equivalent to calling running

3194
00:59:31,670 --> 00:59:31,680
and that's equivalent to calling running
 

3195
00:59:31,680 --> 00:59:33,270
and that's equivalent to calling running
the act with command with

3196
00:59:33,270 --> 00:59:33,280
the act with command with
 

3197
00:59:33,280 --> 00:59:35,510
the act with command with
the three arguments this is echo and so

3198
00:59:35,510 --> 00:59:35,520
the three arguments this is echo and so
 

3199
00:59:35,520 --> 00:59:38,870
the three arguments this is echo and so
when i want exec

3200
00:59:38,870 --> 00:59:38,880

 

3201
00:59:38,880 --> 00:59:41,910

indeed um i see this output this is echo

3202
00:59:41,910 --> 00:59:41,920
indeed um i see this output this is echo
 

3203
00:59:41,920 --> 00:59:42,470
indeed um i see this output this is echo
but

3204
00:59:42,470 --> 00:59:42,480
but
 

3205
00:59:42,480 --> 00:59:44,150
but
even though i ran the exact command the

3206
00:59:44,150 --> 00:59:44,160
even though i ran the exact command the
 

3207
00:59:44,160 --> 00:59:47,030
even though i ran the exact command the
exact program what the exact program

3208
00:59:47,030 --> 00:59:47,040
exact program what the exact program
 

3209
00:59:47,040 --> 00:59:47,990
exact program what the exact program
does is call it

3210
00:59:47,990 --> 00:59:48,000
does is call it
 

3211
00:59:48,000 --> 00:59:50,150
does is call it
the exact system call to replace itself

3212
00:59:50,150 --> 00:59:50,160
the exact system call to replace itself
 

3213
00:59:50,160 --> 00:59:52,150
the exact system call to replace itself
with echo and so it was really the echo

3214
00:59:52,150 --> 00:59:52,160
with echo and so it was really the echo
 

3215
00:59:52,160 --> 00:59:53,270
with echo and so it was really the echo
program

3216
00:59:53,270 --> 00:59:53,280
program
 

3217
00:59:53,280 --> 00:59:58,549
program
um producing this output

3218
00:59:58,549 --> 00:59:58,559

 

3219
00:59:58,559 --> 01:00:01,030

and uh something about the exact system

3220
01:00:01,030 --> 01:00:01,040
and uh something about the exact system
 

3221
01:00:01,040 --> 01:00:01,670
and uh something about the exact system
call that's

3222
01:00:01,670 --> 01:00:01,680
call that's
 

3223
01:00:01,680 --> 01:00:04,549
call that's
important for us is that um it exec

3224
01:00:04,549 --> 01:00:04,559
important for us is that um it exec
 

3225
01:00:04,559 --> 01:00:05,430
important for us is that um it exec
preserves

3226
01:00:05,430 --> 01:00:05,440
preserves
 

3227
01:00:05,440 --> 01:00:08,470
preserves
the current table of file descriptors so

3228
01:00:08,470 --> 01:00:08,480
the current table of file descriptors so
 

3229
01:00:08,480 --> 01:00:10,710
the current table of file descriptors so
whatever files descriptor zero one two

3230
01:00:10,710 --> 01:00:10,720
whatever files descriptor zero one two
 

3231
01:00:10,720 --> 01:00:13,349
whatever files descriptor zero one two
etc were referred to before exec they

3232
01:00:13,349 --> 01:00:13,359
etc were referred to before exec they
 

3233
01:00:13,359 --> 01:00:15,030
etc were referred to before exec they
refer to the same thing

3234
01:00:15,030 --> 01:00:15,040
refer to the same thing
 

3235
01:00:15,040 --> 01:00:18,309
refer to the same thing
in this new program whose instructions

3236
01:00:18,309 --> 01:00:18,319
in this new program whose instructions
 

3237
01:00:18,319 --> 01:00:20,150
in this new program whose instructions
we've loaded

3238
01:00:20,150 --> 01:00:20,160
we've loaded
 

3239
01:00:20,160 --> 01:00:22,390
we've loaded
another point is ordinarily exec does

3240
01:00:22,390 --> 01:00:22,400
another point is ordinarily exec does
 

3241
01:00:22,400 --> 01:00:23,510
another point is ordinarily exec does
not return

3242
01:00:23,510 --> 01:00:23,520
not return
 

3243
01:00:23,520 --> 01:00:27,109
not return
because exec replaces the current

3244
01:00:27,109 --> 01:00:27,119
because exec replaces the current
 

3245
01:00:27,119 --> 01:00:29,510
because exec replaces the current
is memory entirely um there's nothing

3246
01:00:29,510 --> 01:00:29,520
is memory entirely um there's nothing
 

3247
01:00:29,520 --> 01:00:31,030
is memory entirely um there's nothing
for exec to return to

3248
01:00:31,030 --> 01:00:31,040
for exec to return to
 

3249
01:00:31,040 --> 01:00:33,990
for exec to return to
so exact you know reads the instructions

3250
01:00:33,990 --> 01:00:34,000
so exact you know reads the instructions
 

3251
01:00:34,000 --> 01:00:35,270
so exact you know reads the instructions
from that file and executes them and

3252
01:00:35,270 --> 01:00:35,280
from that file and executes them and
 

3253
01:00:35,280 --> 01:00:36,309
from that file and executes them and
then that's it

3254
01:00:36,309 --> 01:00:36,319
then that's it
 

3255
01:00:36,319 --> 01:00:38,950
then that's it
um the only time exec returns is if some

3256
01:00:38,950 --> 01:00:38,960
um the only time exec returns is if some
 

3257
01:00:38,960 --> 01:00:40,309
um the only time exec returns is if some
error occurred

3258
01:00:40,309 --> 01:00:40,319
error occurred
 

3259
01:00:40,319 --> 01:00:42,230
error occurred
that prevented the operating system from

3260
01:00:42,230 --> 01:00:42,240
that prevented the operating system from
 

3261
01:00:42,240 --> 01:00:43,829
that prevented the operating system from
running that program for you

3262
01:00:43,829 --> 01:00:43,839
running that program for you
 

3263
01:00:43,839 --> 01:00:45,750
running that program for you
so for example if the program doesn't

3264
01:00:45,750 --> 01:00:45,760
so for example if the program doesn't
 

3265
01:00:45,760 --> 01:00:47,510
so for example if the program doesn't
exist at all

3266
01:00:47,510 --> 01:00:47,520
exist at all
 

3267
01:00:47,520 --> 01:00:49,910
exist at all
since the exec can't find a file called

3268
01:00:49,910 --> 01:00:49,920
since the exec can't find a file called
 

3269
01:00:49,920 --> 01:00:51,349
since the exec can't find a file called
echo for example

3270
01:00:51,349 --> 01:00:51,359
echo for example
 

3271
01:00:51,359 --> 01:00:55,430
echo for example
then exec would return negative one to

3272
01:00:55,430 --> 01:00:55,440
then exec would return negative one to
 

3273
01:00:55,440 --> 01:00:58,069
then exec would return negative one to
signal that you know something i'm wrong

3274
01:00:58,069 --> 01:00:58,079
signal that you know something i'm wrong
 

3275
01:00:58,079 --> 01:00:58,549
signal that you know something i'm wrong
it couldn't

3276
01:00:58,549 --> 01:00:58,559
it couldn't
 

3277
01:00:58,559 --> 01:01:00,230
it couldn't
couldn't find a file so ordinarily exact

3278
01:01:00,230 --> 01:01:00,240
couldn't find a file so ordinarily exact
 

3279
01:01:00,240 --> 01:01:03,190
couldn't find a file so ordinarily exact
does not return it only returns if

3280
01:01:03,190 --> 01:01:03,200
does not return it only returns if
 

3281
01:01:03,200 --> 01:01:06,069
does not return it only returns if
um the kernel couldn't actually run the

3282
01:01:06,069 --> 01:01:06,079
um the kernel couldn't actually run the
 

3283
01:01:06,079 --> 01:01:10,309
um the kernel couldn't actually run the
file for you

3284
01:01:10,309 --> 01:01:10,319
file for you
 

3285
01:01:10,319 --> 01:01:13,109
file for you
questions about exec one question in the

3286
01:01:13,109 --> 01:01:13,119
questions about exec one question in the
 

3287
01:01:13,119 --> 01:01:14,470
questions about exec one question in the
chat is what is the last

3288
01:01:14,470 --> 01:01:14,480
chat is what is the last
 

3289
01:01:14,480 --> 01:01:18,789
chat is what is the last
zero for in arc v

3290
01:01:18,789 --> 01:01:18,799

 

3291
01:01:18,799 --> 01:01:21,990

it marks the end of the array um

3292
01:01:21,990 --> 01:01:22,000
it marks the end of the array um
 

3293
01:01:22,000 --> 01:01:25,829
it marks the end of the array um
c is so low level that

3294
01:01:25,829 --> 01:01:25,839
c is so low level that
 

3295
01:01:25,839 --> 01:01:29,589
c is so low level that
there's no the c array

3296
01:01:29,589 --> 01:01:29,599
there's no the c array
 

3297
01:01:29,599 --> 01:01:33,190
there's no the c array
scheme doesn't have a way

3298
01:01:33,190 --> 01:01:33,200
scheme doesn't have a way
 

3299
01:01:33,200 --> 01:01:36,230
scheme doesn't have a way
for code to find out how long the array

3300
01:01:36,230 --> 01:01:36,240
for code to find out how long the array
 

3301
01:01:36,240 --> 01:01:37,430
for code to find out how long the array
is

3302
01:01:37,430 --> 01:01:37,440
is
 

3303
01:01:37,440 --> 01:01:40,950
is
and so to tell the kernel that um

3304
01:01:40,950 --> 01:01:40,960
and so to tell the kernel that um
 

3305
01:01:40,960 --> 01:01:42,789
and so to tell the kernel that um
you know we meant that the array

3306
01:01:42,789 --> 01:01:42,799
you know we meant that the array
 

3307
01:01:42,799 --> 01:01:44,710
you know we meant that the array
contains echo this is echo and nothing

3308
01:01:44,710 --> 01:01:44,720
contains echo this is echo and nothing
 

3309
01:01:44,720 --> 01:01:45,510
contains echo this is echo and nothing
more

3310
01:01:45,510 --> 01:01:45,520
more
 

3311
01:01:45,520 --> 01:01:48,630
more
um we put a zero as the last

3312
01:01:48,630 --> 01:01:48,640
um we put a zero as the last
 

3313
01:01:48,640 --> 01:01:51,589
um we put a zero as the last
strip as the last pointer each of those

3314
01:01:51,589 --> 01:01:51,599
strip as the last pointer each of those
 

3315
01:01:51,599 --> 01:01:53,349
strip as the last pointer each of those
strings in double quotes is actually a

3316
01:01:53,349 --> 01:01:53,359
strings in double quotes is actually a
 

3317
01:01:53,359 --> 01:01:55,349
strings in double quotes is actually a
pointer to some memory that contains

3318
01:01:55,349 --> 01:01:55,359
pointer to some memory that contains
 

3319
01:01:55,359 --> 01:01:56,630
pointer to some memory that contains
those bytes

3320
01:01:56,630 --> 01:01:56,640
those bytes
 

3321
01:01:56,640 --> 01:01:59,510
those bytes
that fifth element of the array is a

3322
01:01:59,510 --> 01:01:59,520
that fifth element of the array is a
 

3323
01:01:59,520 --> 01:02:01,190
that fifth element of the array is a
pointer whose value is zero

3324
01:02:01,190 --> 01:02:01,200
pointer whose value is zero
 

3325
01:02:01,200 --> 01:02:02,870
pointer whose value is zero
the convention is that a pointer whose

3326
01:02:02,870 --> 01:02:02,880
the convention is that a pointer whose
 

3327
01:02:02,880 --> 01:02:04,630
the convention is that a pointer whose
value is zero or what's called a null

3328
01:02:04,630 --> 01:02:04,640
value is zero or what's called a null
 

3329
01:02:04,640 --> 01:02:07,190
value is zero or what's called a null
pointer um

3330
01:02:07,190 --> 01:02:07,200
pointer um
 

3331
01:02:07,200 --> 01:02:11,510
pointer um
sort of signifies nothing um with it

3332
01:02:11,510 --> 01:02:11,520
sort of signifies nothing um with it
 

3333
01:02:11,520 --> 01:02:14,470
sort of signifies nothing um with it
you know we're done and so the code in

3334
01:02:14,470 --> 01:02:14,480
you know we're done and so the code in
 

3335
01:02:14,480 --> 01:02:15,589
you know we're done and so the code in
the kernel has actually

3336
01:02:15,589 --> 01:02:15,599
the kernel has actually
 

3337
01:02:15,599 --> 01:02:17,109
the kernel has actually
walks through this array until it finds

3338
01:02:17,109 --> 01:02:17,119
walks through this array until it finds
 

3339
01:02:17,119 --> 01:02:18,870
walks through this array until it finds
the element

3340
01:02:18,870 --> 01:02:18,880
the element
 

3341
01:02:18,880 --> 01:02:24,710
the element
whose value is zero

3342
01:02:24,710 --> 01:02:24,720

 

3343
01:02:24,720 --> 01:02:28,230

okay um right so this is how a program

3344
01:02:28,230 --> 01:02:28,240
okay um right so this is how a program
 

3345
01:02:28,240 --> 01:02:29,750
okay um right so this is how a program
can replace itself

3346
01:02:29,750 --> 01:02:29,760
can replace itself
 

3347
01:02:29,760 --> 01:02:32,150
can replace itself
um with another program from a file but

3348
01:02:32,150 --> 01:02:32,160
um with another program from a file but
 

3349
01:02:32,160 --> 01:02:33,670
um with another program from a file but
actually when we run stuff in the shell

3350
01:02:33,670 --> 01:02:33,680
actually when we run stuff in the shell
 

3351
01:02:33,680 --> 01:02:35,670
actually when we run stuff in the shell
like echo abc

3352
01:02:35,670 --> 01:02:35,680
like echo abc
 

3353
01:02:35,680 --> 01:02:38,789
like echo abc
or ls or anything else um

3354
01:02:38,789 --> 01:02:38,799
or ls or anything else um
 

3355
01:02:38,799 --> 01:02:40,390
or ls or anything else um
we don't want to replace the shell we

3356
01:02:40,390 --> 01:02:40,400
we don't want to replace the shell we
 

3357
01:02:40,400 --> 01:02:41,829
we don't want to replace the shell we
don't want to have the shell just

3358
01:02:41,829 --> 01:02:41,839
don't want to have the shell just
 

3359
01:02:41,839 --> 01:02:45,190
don't want to have the shell just
call exact um because that would replace

3360
01:02:45,190 --> 01:02:45,200
call exact um because that would replace
 

3361
01:02:45,200 --> 01:02:46,710
call exact um because that would replace
the shell with the echo command and then

3362
01:02:46,710 --> 01:02:46,720
the shell with the echo command and then
 

3363
01:02:46,720 --> 01:02:48,150
the shell with the echo command and then
when echo exited

3364
01:02:48,150 --> 01:02:48,160
when echo exited
 

3365
01:02:48,160 --> 01:02:50,710
when echo exited
that would be it you know we don't want

3366
01:02:50,710 --> 01:02:50,720
that would be it you know we don't want
 

3367
01:02:50,720 --> 01:02:52,230
that would be it you know we don't want
echo to replace the shell so

3368
01:02:52,230 --> 01:02:52,240
echo to replace the shell so
 

3369
01:02:52,240 --> 01:02:54,950
echo to replace the shell so
what the shell actually does is fork and

3370
01:02:54,950 --> 01:02:54,960
what the shell actually does is fork and
 

3371
01:02:54,960 --> 01:02:56,630
what the shell actually does is fork and
then the child calls it zac

3372
01:02:56,630 --> 01:02:56,640
then the child calls it zac
 

3373
01:02:56,640 --> 01:02:59,430
then the child calls it zac
and that's an extremely common unix

3374
01:02:59,430 --> 01:02:59,440
and that's an extremely common unix
 

3375
01:02:59,440 --> 01:03:00,150
and that's an extremely common unix
idiom

3376
01:03:00,150 --> 01:03:00,160
idiom
 

3377
01:03:00,160 --> 01:03:03,109
idiom
these programs that um want to run a

3378
01:03:03,109 --> 01:03:03,119
these programs that um want to run a
 

3379
01:03:03,119 --> 01:03:04,950
these programs that um want to run a
program but regain control what they do

3380
01:03:04,950 --> 01:03:04,960
program but regain control what they do
 

3381
01:03:04,960 --> 01:03:05,430
program but regain control what they do
is call

3382
01:03:05,430 --> 01:03:05,440
is call
 

3383
01:03:05,440 --> 01:03:08,150
is call
fork and have the child call exact so

3384
01:03:08,150 --> 01:03:08,160
fork and have the child call exact so
 

3385
01:03:08,160 --> 01:03:08,950
fork and have the child call exact so
here's a

3386
01:03:08,950 --> 01:03:08,960
here's a
 

3387
01:03:08,960 --> 01:03:14,150
here's a
simple example this fork exact program

3388
01:03:14,150 --> 01:03:14,160

 

3389
01:03:14,160 --> 01:03:16,710

so in this program um called fork on

3390
01:03:16,710 --> 01:03:16,720
so in this program um called fork on
 

3391
01:03:16,720 --> 01:03:17,510
so in this program um called fork on
line 12

3392
01:03:17,510 --> 01:03:17,520
line 12
 

3393
01:03:17,520 --> 01:03:19,589
line 12
and the child started line 14 we call

3394
01:03:19,589 --> 01:03:19,599
and the child started line 14 we call
 

3395
01:03:19,599 --> 01:03:21,270
and the child started line 14 we call
exec much like before

3396
01:03:21,270 --> 01:03:21,280
exec much like before
 

3397
01:03:21,280 --> 01:03:24,630
exec much like before
the child process um

3398
01:03:24,630 --> 01:03:24,640
the child process um
 

3399
01:03:24,640 --> 01:03:27,029
the child process um
has to replace itself with the echo

3400
01:03:27,029 --> 01:03:27,039
has to replace itself with the echo
 

3401
01:03:27,039 --> 01:03:28,630
has to replace itself with the echo
command

3402
01:03:28,630 --> 01:03:28,640
command
 

3403
01:03:28,640 --> 01:03:31,589
command
and echo does this thing and then exits

3404
01:03:31,589 --> 01:03:31,599
and echo does this thing and then exits
 

3405
01:03:31,599 --> 01:03:33,109
and echo does this thing and then exits
and then the parent process regains

3406
01:03:33,109 --> 01:03:33,119
and then the parent process regains
 

3407
01:03:33,119 --> 01:03:33,670
and then the parent process regains
control

3408
01:03:33,670 --> 01:03:33,680
control
 

3409
01:03:33,680 --> 01:03:37,670
control
because um when the fork returns

3410
01:03:37,670 --> 01:03:37,680
because um when the fork returns
 

3411
01:03:37,680 --> 01:03:39,109
because um when the fork returns
the greater than zero value in the

3412
01:03:39,109 --> 01:03:39,119
the greater than zero value in the
 

3413
01:03:39,119 --> 01:03:40,549
the greater than zero value in the
parent process so the parent process

3414
01:03:40,549 --> 01:03:40,559
parent process so the parent process
 

3415
01:03:40,559 --> 01:03:42,549
parent process so the parent process
then continues to execute at 19

3416
01:03:42,549 --> 01:03:42,559
then continues to execute at 19
 

3417
01:03:42,559 --> 01:03:45,270
then continues to execute at 19
and unix provides a weight system called

3418
01:03:45,270 --> 01:03:45,280
and unix provides a weight system called
 

3419
01:03:45,280 --> 01:03:45,670
and unix provides a weight system called
line

3420
01:03:45,670 --> 01:03:45,680
line
 

3421
01:03:45,680 --> 01:03:48,549
line
20 for a process to wait for one of the

3422
01:03:48,549 --> 01:03:48,559
20 for a process to wait for one of the
 

3423
01:03:48,559 --> 01:03:49,109
20 for a process to wait for one of the
for a

3424
01:03:49,109 --> 01:03:49,119
for a
 

3425
01:03:49,119 --> 01:03:51,750
for a
child that it created with four because

3426
01:03:51,750 --> 01:03:51,760
child that it created with four because
 

3427
01:03:51,760 --> 01:03:53,270
child that it created with four because
when i run a command

3428
01:03:53,270 --> 01:03:53,280
when i run a command
 

3429
01:03:53,280 --> 01:03:56,470
when i run a command
um here on the command line

3430
01:03:56,470 --> 01:03:56,480
um here on the command line
 

3431
01:03:56,480 --> 01:03:59,510
um here on the command line
we want uh we want the shell to wait

3432
01:03:59,510 --> 01:03:59,520
we want uh we want the shell to wait
 

3433
01:03:59,520 --> 01:04:01,750
we want uh we want the shell to wait
for the command to finish before it

3434
01:04:01,750 --> 01:04:01,760
for the command to finish before it
 

3435
01:04:01,760 --> 01:04:03,109
for the command to finish before it
prints the prop again

3436
01:04:03,109 --> 01:04:03,119
prints the prop again
 

3437
01:04:03,119 --> 01:04:04,789
prints the prop again
before it prints this dollar sign prompt

3438
01:04:04,789 --> 01:04:04,799
before it prints this dollar sign prompt
 

3439
01:04:04,799 --> 01:04:06,549
before it prints this dollar sign prompt
asking me for more input

3440
01:04:06,549 --> 01:04:06,559
asking me for more input
 

3441
01:04:06,559 --> 01:04:08,789
asking me for more input
and so it's the wait system call that

3442
01:04:08,789 --> 01:04:08,799
and so it's the wait system call that
 

3443
01:04:08,799 --> 01:04:10,309
and so it's the wait system call that
allows the process to wait for

3444
01:04:10,309 --> 01:04:10,319
allows the process to wait for
 

3445
01:04:10,319 --> 01:04:12,870
allows the process to wait for
any of its children to return and this

3446
01:04:12,870 --> 01:04:12,880
any of its children to return and this
 

3447
01:04:12,880 --> 01:04:15,670
any of its children to return and this
status argument is a

3448
01:04:15,670 --> 01:04:15,680
status argument is a
 

3449
01:04:15,680 --> 01:04:19,349
status argument is a
way for an exiting child

3450
01:04:19,349 --> 01:04:19,359
way for an exiting child
 

3451
01:04:19,359 --> 01:04:22,950
way for an exiting child
to communicate one integer

3452
01:04:22,950 --> 01:04:22,960
to communicate one integer
 

3453
01:04:22,960 --> 01:04:26,150
to communicate one integer
32-bit value from the exiting child um

3454
01:04:26,150 --> 01:04:26,160
32-bit value from the exiting child um
 

3455
01:04:26,160 --> 01:04:28,230
32-bit value from the exiting child um
to the waiting parent so in line 17 that

3456
01:04:28,230 --> 01:04:28,240
to the waiting parent so in line 17 that
 

3457
01:04:28,240 --> 01:04:29,589
to the waiting parent so in line 17 that
argument to exit

3458
01:04:29,589 --> 01:04:29,599
argument to exit
 

3459
01:04:29,599 --> 01:04:32,150
argument to exit
that one that's the argument to exit the

3460
01:04:32,150 --> 01:04:32,160
that one that's the argument to exit the
 

3461
01:04:32,160 --> 01:04:33,990
that one that's the argument to exit the
operating system

3462
01:04:33,990 --> 01:04:34,000
operating system
 

3463
01:04:34,000 --> 01:04:37,430
operating system
passes that one from the exiting child

3464
01:04:37,430 --> 01:04:37,440
passes that one from the exiting child
 

3465
01:04:37,440 --> 01:04:39,829
passes that one from the exiting child
um to the call to wait at line 20. so

3466
01:04:39,829 --> 01:04:39,839
um to the call to wait at line 20. so
 

3467
01:04:39,839 --> 01:04:42,950
um to the call to wait at line 20. so
weight that the ampersand and weight

3468
01:04:42,950 --> 01:04:42,960
weight that the ampersand and weight
 

3469
01:04:42,960 --> 01:04:45,029
weight that the ampersand and weight
is passing the address of the status

3470
01:04:45,029 --> 01:04:45,039
is passing the address of the status
 

3471
01:04:45,039 --> 01:04:45,990
is passing the address of the status
variable

3472
01:04:45,990 --> 01:04:46,000
variable
 

3473
01:04:46,000 --> 01:04:47,990
variable
to the kernel the colonel fills in that

3474
01:04:47,990 --> 01:04:48,000
to the kernel the colonel fills in that
 

3475
01:04:48,000 --> 01:04:50,069
to the kernel the colonel fills in that
address with the

3476
01:04:50,069 --> 01:04:50,079
address with the
 

3477
01:04:50,079 --> 01:04:52,870
address with the
child's argument to exit and the

3478
01:04:52,870 --> 01:04:52,880
child's argument to exit and the
 

3479
01:04:52,880 --> 01:04:54,630
child's argument to exit and the
convention in unix is that

3480
01:04:54,630 --> 01:04:54,640
convention in unix is that
 

3481
01:04:54,640 --> 01:04:57,270
convention in unix is that
if a program completes successfully it

3482
01:04:57,270 --> 01:04:57,280
if a program completes successfully it
 

3483
01:04:57,280 --> 01:04:58,470
if a program completes successfully it
exit with exits

3484
01:04:58,470 --> 01:04:58,480
exit with exits
 

3485
01:04:58,480 --> 01:05:01,430
exit with exits
with state of zero but if if it

3486
01:05:01,430 --> 01:05:01,440
with state of zero but if if it
 

3487
01:05:01,440 --> 01:05:02,549
with state of zero but if if it
encountered an error

3488
01:05:02,549 --> 01:05:02,559
encountered an error
 

3489
01:05:02,559 --> 01:05:05,829
encountered an error
as it lines 17 um then the unix

3490
01:05:05,829 --> 01:05:05,839
as it lines 17 um then the unix
 

3491
01:05:05,839 --> 01:05:07,109
as it lines 17 um then the unix
convention is that you pass

3492
01:05:07,109 --> 01:05:07,119
convention is that you pass
 

3493
01:05:07,119 --> 01:05:09,750
convention is that you pass
one to exit and so if you care the

3494
01:05:09,750 --> 01:05:09,760
one to exit and so if you care the
 

3495
01:05:09,760 --> 01:05:11,670
one to exit and so if you care the
calling process can look at the status

3496
01:05:11,670 --> 01:05:11,680
calling process can look at the status
 

3497
01:05:11,680 --> 01:05:12,309
calling process can look at the status
from weight

3498
01:05:12,309 --> 01:05:12,319
from weight
 

3499
01:05:12,319 --> 01:05:15,430
from weight
and decide whether the

3500
01:05:15,430 --> 01:05:15,440
and decide whether the
 

3501
01:05:15,440 --> 01:05:18,549
and decide whether the
child completed successfully enough

3502
01:05:18,549 --> 01:05:18,559
child completed successfully enough
 

3503
01:05:18,559 --> 01:05:21,270
child completed successfully enough
professor morris quick question yes

3504
01:05:21,270 --> 01:05:21,280
professor morris quick question yes
 

3505
01:05:21,280 --> 01:05:22,470
professor morris quick question yes
about

3506
01:05:22,470 --> 01:05:22,480
about
 

3507
01:05:22,480 --> 01:05:25,510
about
the exact call on 9 15. uh we mentioned

3508
01:05:25,510 --> 01:05:25,520
the exact call on 9 15. uh we mentioned
 

3509
01:05:25,520 --> 01:05:25,990
the exact call on 9 15. uh we mentioned
not

3510
01:05:25,990 --> 01:05:26,000
not
 

3511
01:05:26,000 --> 01:05:29,190
not
a bit ago that exec will completely go

3512
01:05:29,190 --> 01:05:29,200
a bit ago that exec will completely go
 

3513
01:05:29,200 --> 01:05:31,270
a bit ago that exec will completely go
into the echo program and not return

3514
01:05:31,270 --> 01:05:31,280
into the echo program and not return
 

3515
01:05:31,280 --> 01:05:34,630
into the echo program and not return
to fork exec so

3516
01:05:34,630 --> 01:05:34,640
to fork exec so
 

3517
01:05:34,640 --> 01:05:38,150
to fork exec so
would it ever reach lines 16 and 17

3518
01:05:38,150 --> 01:05:38,160
would it ever reach lines 16 and 17
 

3519
01:05:38,160 --> 01:05:41,270
would it ever reach lines 16 and 17
well not for this exact code because

3520
01:05:41,270 --> 01:05:41,280
well not for this exact code because
 

3521
01:05:41,280 --> 01:05:42,390
well not for this exact code because
there happens to be

3522
01:05:42,390 --> 01:05:42,400
there happens to be
 

3523
01:05:42,400 --> 01:05:44,870
there happens to be
a program called echo but but you know

3524
01:05:44,870 --> 01:05:44,880
a program called echo but but you know
 

3525
01:05:44,880 --> 01:05:46,950
a program called echo but but you know
if i modified that code here let me let

3526
01:05:46,950 --> 01:05:46,960
if i modified that code here let me let
 

3527
01:05:46,960 --> 01:05:49,430
if i modified that code here let me let
me just modify this code for you

3528
01:05:49,430 --> 01:05:49,440
me just modify this code for you
 

3529
01:05:49,440 --> 01:05:52,870
me just modify this code for you
okay so first let me just run fork exact

3530
01:05:52,870 --> 01:05:52,880
okay so first let me just run fork exact
 

3531
01:05:52,880 --> 01:05:56,069
okay so first let me just run fork exact
right it actually does execute echo with

3532
01:05:56,069 --> 01:05:56,079
right it actually does execute echo with
 

3533
01:05:56,079 --> 01:05:57,670
right it actually does execute echo with
those arguments we see the output this

3534
01:05:57,670 --> 01:05:57,680
those arguments we see the output this
 

3535
01:05:57,680 --> 01:05:59,109
those arguments we see the output this
is echo

3536
01:05:59,109 --> 01:05:59,119
is echo
 

3537
01:05:59,119 --> 01:06:01,510
is echo
and we see the child exited to show that

3538
01:06:01,510 --> 01:06:01,520
and we see the child exited to show that
 

3539
01:06:01,520 --> 01:06:02,870
and we see the child exited to show that
uh

3540
01:06:02,870 --> 01:06:02,880
uh
 

3541
01:06:02,880 --> 01:06:05,510
uh
echo exited successfully and the parent

3542
01:06:05,510 --> 01:06:05,520
echo exited successfully and the parent
 

3543
01:06:05,520 --> 01:06:06,309
echo exited successfully and the parent
waited for it

3544
01:06:06,309 --> 01:06:06,319
waited for it
 

3545
01:06:06,319 --> 01:06:09,510
waited for it
let me just modify the program for you

3546
01:06:09,510 --> 01:06:09,520
let me just modify the program for you
 

3547
01:06:09,520 --> 01:06:11,990
let me just modify the program for you
um instead of echo i'm going to run some

3548
01:06:11,990 --> 01:06:12,000
um instead of echo i'm going to run some
 

3549
01:06:12,000 --> 01:06:15,510
um instead of echo i'm going to run some
command that doesn't exist

3550
01:06:15,510 --> 01:06:15,520

 

3551
01:06:15,520 --> 01:06:19,190

i actually have to exit out of uh qmu

3552
01:06:19,190 --> 01:06:19,200
i actually have to exit out of uh qmu
 

3553
01:06:19,200 --> 01:06:21,510
i actually have to exit out of uh qmu
with control a x and then rebuild the

3554
01:06:21,510 --> 01:06:21,520
with control a x and then rebuild the
 

3555
01:06:21,520 --> 01:06:23,990
with control a x and then rebuild the
whole thing in order to recompile

3556
01:06:23,990 --> 01:06:24,000
whole thing in order to recompile
 

3557
01:06:24,000 --> 01:06:26,710
whole thing in order to recompile
my modified four gigs and i run four

3558
01:06:26,710 --> 01:06:26,720
my modified four gigs and i run four
 

3559
01:06:26,720 --> 01:06:29,029
my modified four gigs and i run four
pixel yen after modifying and compiling

3560
01:06:29,029 --> 01:06:29,039
pixel yen after modifying and compiling
 

3561
01:06:29,039 --> 01:06:29,670
pixel yen after modifying and compiling
it

3562
01:06:29,670 --> 01:06:29,680
it
 

3563
01:06:29,680 --> 01:06:31,109
it
and this time because the program we're

3564
01:06:31,109 --> 01:06:31,119
and this time because the program we're
 

3565
01:06:31,119 --> 01:06:33,430
and this time because the program we're
asking to

3566
01:06:33,430 --> 01:06:33,440
asking to
 

3567
01:06:33,440 --> 01:06:36,470
asking to
actually

3568
01:06:36,470 --> 01:06:36,480

 

3569
01:06:36,480 --> 01:06:38,390

the program we're asking to execute

3570
01:06:38,390 --> 01:06:38,400
the program we're asking to execute
 

3571
01:06:38,400 --> 01:06:39,589
the program we're asking to execute
doesn't exist

3572
01:06:39,589 --> 01:06:39,599
doesn't exist
 

3573
01:06:39,599 --> 01:06:42,710
doesn't exist
exec does return we see the exec failed

3574
01:06:42,710 --> 01:06:42,720
exec does return we see the exec failed
 

3575
01:06:42,720 --> 01:06:44,390
exec does return we see the exec failed
output

3576
01:06:44,390 --> 01:06:44,400
output
 

3577
01:06:44,400 --> 01:06:46,710
output
and the exit one you see the one there

3578
01:06:46,710 --> 01:06:46,720
and the exit one you see the one there
 

3579
01:06:46,720 --> 01:06:48,470
and the exit one you see the one there
is communicated back to the parent which

3580
01:06:48,470 --> 01:06:48,480
is communicated back to the parent which
 

3581
01:06:48,480 --> 01:06:52,309
is communicated back to the parent which
says the child exited the status one

3582
01:06:52,309 --> 01:06:52,319
says the child exited the status one
 

3583
01:06:52,319 --> 01:06:55,589
says the child exited the status one
so exec returns back to the calling

3584
01:06:55,589 --> 01:06:55,599
so exec returns back to the calling
 

3585
01:06:55,599 --> 01:06:56,069
so exec returns back to the calling
function

3586
01:06:56,069 --> 01:06:56,079
function
 

3587
01:06:56,079 --> 01:07:12,829
function
when something went wrong yes

3588
01:07:12,829 --> 01:07:12,839

 

3589
01:07:12,839 --> 01:07:14,710

okay

3590
01:07:14,710 --> 01:07:14,720
okay
 

3591
01:07:14,720 --> 01:07:17,270
okay
all right um something that uh something

3592
01:07:17,270 --> 01:07:17,280
all right um something that uh something
 

3593
01:07:17,280 --> 01:07:18,230
all right um something that uh something
to note here that

3594
01:07:18,230 --> 01:07:18,240
to note here that
 

3595
01:07:18,240 --> 01:07:19,510
to note here that
actually i think many of you have

3596
01:07:19,510 --> 01:07:19,520
actually i think many of you have
 

3597
01:07:19,520 --> 01:07:21,270
actually i think many of you have
already noted is that

3598
01:07:21,270 --> 01:07:21,280
already noted is that
 

3599
01:07:21,280 --> 01:07:24,309
already noted is that
uh this is a common idiom here this fork

3600
01:07:24,309 --> 01:07:24,319
uh this is a common idiom here this fork
 

3601
01:07:24,319 --> 01:07:27,270
uh this is a common idiom here this fork
followed by an exec and a child um and

3602
01:07:27,270 --> 01:07:27,280
followed by an exec and a child um and
 

3603
01:07:27,280 --> 01:07:29,510
followed by an exec and a child um and
it's potentially a bit wasteful the fork

3604
01:07:29,510 --> 01:07:29,520
it's potentially a bit wasteful the fork
 

3605
01:07:29,520 --> 01:07:32,470
it's potentially a bit wasteful the fork
copies the entire parent process but

3606
01:07:32,470 --> 01:07:32,480
copies the entire parent process but
 

3607
01:07:32,480 --> 01:07:33,270
copies the entire parent process but
exec

3608
01:07:33,270 --> 01:07:33,280
exec
 

3609
01:07:33,280 --> 01:07:35,910
exec
throws away all that copied memory and

3610
01:07:35,910 --> 01:07:35,920
throws away all that copied memory and
 

3611
01:07:35,920 --> 01:07:39,990
throws away all that copied memory and
replaces it with whatever is in the um

3612
01:07:39,990 --> 01:07:40,000
replaces it with whatever is in the um
 

3613
01:07:40,000 --> 01:07:43,029
replaces it with whatever is in the um
file that you're running so you know if

3614
01:07:43,029 --> 01:07:43,039
file that you're running so you know if
 

3615
01:07:43,039 --> 01:07:44,230
file that you're running so you know if
you're worried about this kind of stuff

3616
01:07:44,230 --> 01:07:44,240
you're worried about this kind of stuff
 

3617
01:07:44,240 --> 01:07:45,109
you're worried about this kind of stuff
the

3618
01:07:45,109 --> 01:07:45,119
the
 

3619
01:07:45,119 --> 01:07:48,150
the
copy implied by the fork

3620
01:07:48,150 --> 01:07:48,160
copy implied by the fork
 

3621
01:07:48,160 --> 01:07:50,309
copy implied by the fork
is in some sense mostly wasted because

3622
01:07:50,309 --> 01:07:50,319
is in some sense mostly wasted because
 

3623
01:07:50,319 --> 01:07:52,150
is in some sense mostly wasted because
all that copied memory is just thrown

3624
01:07:52,150 --> 01:07:52,160
all that copied memory is just thrown
 

3625
01:07:52,160 --> 01:07:53,510
all that copied memory is just thrown
away and replaced by the

3626
01:07:53,510 --> 01:07:53,520
away and replaced by the
 

3627
01:07:53,520 --> 01:07:56,390
away and replaced by the
exact um and this effects actually would

3628
01:07:56,390 --> 01:07:56,400
exact um and this effects actually would
 

3629
01:07:56,400 --> 01:07:58,069
exact um and this effects actually would
be significant for big programs if you

3630
01:07:58,069 --> 01:07:58,079
be significant for big programs if you
 

3631
01:07:58,079 --> 01:08:00,150
be significant for big programs if you
have a multi-gigabyte program that calls

3632
01:08:00,150 --> 01:08:00,160
have a multi-gigabyte program that calls
 

3633
01:08:00,160 --> 01:08:01,029
have a multi-gigabyte program that calls
fork

3634
01:08:01,029 --> 01:08:01,039
fork
 

3635
01:08:01,039 --> 01:08:03,190
fork
uh and it did indeed copy all the memory

3636
01:08:03,190 --> 01:08:03,200
uh and it did indeed copy all the memory
 

3637
01:08:03,200 --> 01:08:04,870
uh and it did indeed copy all the memory
would actually uh take a fair fraction

3638
01:08:04,870 --> 01:08:04,880
would actually uh take a fair fraction
 

3639
01:08:04,880 --> 01:08:05,589
would actually uh take a fair fraction
of a second

3640
01:08:05,589 --> 01:08:05,599
of a second
 

3641
01:08:05,599 --> 01:08:08,829
of a second
perhaps to do the copy which could be a

3642
01:08:08,829 --> 01:08:08,839
perhaps to do the copy which could be a
 

3643
01:08:08,839 --> 01:08:10,069
perhaps to do the copy which could be a
problem

3644
01:08:10,069 --> 01:08:10,079
problem
 

3645
01:08:10,079 --> 01:08:13,190
problem
um

3646
01:08:13,190 --> 01:08:13,200

 

3647
01:08:13,200 --> 01:08:15,829

but later in the course you'll actually

3648
01:08:15,829 --> 01:08:15,839
but later in the course you'll actually
 

3649
01:08:15,839 --> 01:08:17,349
but later in the course you'll actually
implement some optimizations in

3650
01:08:17,349 --> 01:08:17,359
implement some optimizations in
 

3651
01:08:17,359 --> 01:08:18,309
implement some optimizations in
particular something called

3652
01:08:18,309 --> 01:08:18,319
particular something called
 

3653
01:08:18,319 --> 01:08:21,590
particular something called
copy on right fork which will eliminate

3654
01:08:21,590 --> 01:08:21,600
copy on right fork which will eliminate
 

3655
01:08:21,600 --> 01:08:22,070
copy on right fork which will eliminate
almost

3656
01:08:22,070 --> 01:08:22,080
almost
 

3657
01:08:22,080 --> 01:08:25,910
almost
all of the apparent inefficiency of fork

3658
01:08:25,910 --> 01:08:25,920
all of the apparent inefficiency of fork
 

3659
01:08:25,920 --> 01:08:28,149
all of the apparent inefficiency of fork
copying only to have exact throw away

3660
01:08:28,149 --> 01:08:28,159
copying only to have exact throw away
 

3661
01:08:28,159 --> 01:08:29,030
copying only to have exact throw away
the copy

3662
01:08:29,030 --> 01:08:29,040
the copy
 

3663
01:08:29,040 --> 01:08:30,550
the copy
it turns out with a bunch of tricks

3664
01:08:30,550 --> 01:08:30,560
it turns out with a bunch of tricks
 

3665
01:08:30,560 --> 01:08:33,829
it turns out with a bunch of tricks
involving a virtual memory system

3666
01:08:33,829 --> 01:08:33,839
involving a virtual memory system
 

3667
01:08:33,839 --> 01:08:35,829
involving a virtual memory system
you can build a fork that's lazy about

3668
01:08:35,829 --> 01:08:35,839
you can build a fork that's lazy about
 

3669
01:08:35,839 --> 01:08:38,709
you can build a fork that's lazy about
the copy and that doesn't do in the

3670
01:08:38,709 --> 01:08:38,719
the copy and that doesn't do in the
 

3671
01:08:38,719 --> 01:08:40,309
the copy and that doesn't do in the
common case of fork immediately followed

3672
01:08:40,309 --> 01:08:40,319
common case of fork immediately followed
 

3673
01:08:40,319 --> 01:08:42,390
common case of fork immediately followed
by exact um where you don't actually

3674
01:08:42,390 --> 01:08:42,400
by exact um where you don't actually
 

3675
01:08:42,400 --> 01:08:43,910
by exact um where you don't actually
have to do the copy because the child

3676
01:08:43,910 --> 01:08:43,920
have to do the copy because the child
 

3677
01:08:43,920 --> 01:08:46,870
have to do the copy because the child
doesn't actually use most of the memory

3678
01:08:46,870 --> 01:08:46,880
doesn't actually use most of the memory
 

3679
01:08:46,880 --> 01:08:49,590
doesn't actually use most of the memory
um i think you'll find that's a fun and

3680
01:08:49,590 --> 01:08:49,600
um i think you'll find that's a fun and
 

3681
01:08:49,600 --> 01:08:50,950
um i think you'll find that's a fun and
interesting lab

3682
01:08:50,950 --> 01:08:50,960
interesting lab
 

3683
01:08:50,960 --> 01:08:53,669
interesting lab
question from chat why does the parent

3684
01:08:53,669 --> 01:08:53,679
question from chat why does the parent
 

3685
01:08:53,679 --> 01:08:56,070
question from chat why does the parent
process print parent waiting completely

3686
01:08:56,070 --> 01:08:56,080
process print parent waiting completely
 

3687
01:08:56,080 --> 01:09:00,630
process print parent waiting completely
before the child calls exec

3688
01:09:00,630 --> 01:09:00,640

 

3689
01:09:00,640 --> 01:09:04,870

it's just chance

3690
01:09:04,870 --> 01:09:04,880

 

3691
01:09:04,880 --> 01:09:08,390

the is it that you know the

3692
01:09:08,390 --> 01:09:08,400
the is it that you know the
 

3693
01:09:08,400 --> 01:09:13,110
the is it that you know the
the observation is that um you know

3694
01:09:13,110 --> 01:09:13,120
the observation is that um you know
 

3695
01:09:13,120 --> 01:09:15,189
the observation is that um you know
uh it could be that the parent's output

3696
01:09:15,189 --> 01:09:15,199
uh it could be that the parent's output
 

3697
01:09:15,199 --> 01:09:17,110
uh it could be that the parent's output
could be interleaved with the child's

3698
01:09:17,110 --> 01:09:17,120
could be interleaved with the child's
 

3699
01:09:17,120 --> 01:09:18,470
could be interleaved with the child's
output in the same area that we saw

3700
01:09:18,470 --> 01:09:18,480
output in the same area that we saw
 

3701
01:09:18,480 --> 01:09:21,990
output in the same area that we saw
before with the simpler fork example

3702
01:09:21,990 --> 01:09:22,000
before with the simpler fork example
 

3703
01:09:22,000 --> 01:09:23,910
before with the simpler fork example
it just happens not to be there's no

3704
01:09:23,910 --> 01:09:23,920
it just happens not to be there's no
 

3705
01:09:23,920 --> 01:09:25,749
it just happens not to be there's no
guarantee that this is the output we

3706
01:09:25,749 --> 01:09:25,759
guarantee that this is the output we
 

3707
01:09:25,759 --> 01:09:26,870
guarantee that this is the output we
would see

3708
01:09:26,870 --> 01:09:26,880
would see
 

3709
01:09:26,880 --> 01:09:29,430
would see
in fact we shouldn't be surprised if we

3710
01:09:29,430 --> 01:09:29,440
in fact we shouldn't be surprised if we
 

3711
01:09:29,440 --> 01:09:30,870
in fact we shouldn't be surprised if we
saw the lines of the output in the other

3712
01:09:30,870 --> 01:09:30,880
saw the lines of the output in the other
 

3713
01:09:30,880 --> 01:09:31,990
saw the lines of the output in the other
order

3714
01:09:31,990 --> 01:09:32,000
order
 

3715
01:09:32,000 --> 01:09:35,749
order
or interleaved i suspect what's going on

3716
01:09:35,749 --> 01:09:35,759
or interleaved i suspect what's going on
 

3717
01:09:35,759 --> 01:09:38,390
or interleaved i suspect what's going on
is that it takes a bit of time and

3718
01:09:38,390 --> 01:09:38,400
is that it takes a bit of time and
 

3719
01:09:38,400 --> 01:09:39,590
is that it takes a bit of time and
effort

3720
01:09:39,590 --> 01:09:39,600
effort
 

3721
01:09:39,600 --> 01:09:41,189
effort
now the exact system calls a little bit

3722
01:09:41,189 --> 01:09:41,199
now the exact system calls a little bit
 

3723
01:09:41,199 --> 01:09:42,630
now the exact system calls a little bit
expensive because it has to

3724
01:09:42,630 --> 01:09:42,640
expensive because it has to
 

3725
01:09:42,640 --> 01:09:45,110
expensive because it has to
load all those instructions to access

3726
01:09:45,110 --> 01:09:45,120
load all those instructions to access
 

3727
01:09:45,120 --> 01:09:46,870
load all those instructions to access
the file system and access the disk and

3728
01:09:46,870 --> 01:09:46,880
the file system and access the disk and
 

3729
01:09:46,880 --> 01:09:49,030
the file system and access the disk and
read the contents of a file called echo

3730
01:09:49,030 --> 01:09:49,040
read the contents of a file called echo
 

3731
01:09:49,040 --> 01:09:51,910
read the contents of a file called echo
off the disk into memory after

3732
01:09:51,910 --> 01:09:51,920
off the disk into memory after
 

3733
01:09:51,920 --> 01:09:53,749
off the disk into memory after
allocating some memory and that even

3734
01:09:53,749 --> 01:09:53,759
allocating some memory and that even
 

3735
01:09:53,759 --> 01:09:55,430
allocating some memory and that even
after freeing some memory from the old

3736
01:09:55,430 --> 01:09:55,440
after freeing some memory from the old
 

3737
01:09:55,440 --> 01:09:56,550
after freeing some memory from the old
process so

3738
01:09:56,550 --> 01:09:56,560
process so
 

3739
01:09:56,560 --> 01:09:57,750
process so
there's quite a bit of machinery

3740
01:09:57,750 --> 01:09:57,760
there's quite a bit of machinery
 

3741
01:09:57,760 --> 01:10:00,790
there's quite a bit of machinery
involved in the exact system call

3742
01:10:00,790 --> 01:10:00,800
involved in the exact system call
 

3743
01:10:00,800 --> 01:10:03,270
involved in the exact system call
and apparently that takes long enough

3744
01:10:03,270 --> 01:10:03,280
and apparently that takes long enough
 

3745
01:10:03,280 --> 01:10:05,110
and apparently that takes long enough
that the parent can complete

3746
01:10:05,110 --> 01:10:05,120
that the parent can complete
 

3747
01:10:05,120 --> 01:10:07,830
that the parent can complete
producing the output before the exec has

3748
01:10:07,830 --> 01:10:07,840
producing the output before the exec has
 

3749
01:10:07,840 --> 01:10:10,310
producing the output before the exec has
finished and started running echo

3750
01:10:10,310 --> 01:10:10,320
finished and started running echo
 

3751
01:10:10,320 --> 01:10:15,110
finished and started running echo
does that make sense

3752
01:10:15,110 --> 01:10:15,120

 

3753
01:10:15,120 --> 01:10:17,030

i have another question is it convention

3754
01:10:17,030 --> 01:10:17,040
i have another question is it convention
 

3755
01:10:17,040 --> 01:10:21,590
i have another question is it convention
that the child can't wait for the parent

3756
01:10:21,590 --> 01:10:21,600

 

3757
01:10:21,600 --> 01:10:25,430

there's not a way unix doesn't have a

3758
01:10:25,430 --> 01:10:25,440
there's not a way unix doesn't have a
 

3759
01:10:25,440 --> 01:10:28,310
there's not a way unix doesn't have a
way for the child

3760
01:10:28,310 --> 01:10:28,320
way for the child
 

3761
01:10:28,320 --> 01:10:29,669
way for the child
there's no straightforward way for the

3762
01:10:29,669 --> 01:10:29,679
there's no straightforward way for the
 

3763
01:10:29,679 --> 01:10:31,830
there's no straightforward way for the
child to wait for the parent

3764
01:10:31,830 --> 01:10:31,840
child to wait for the parent
 

3765
01:10:31,840 --> 01:10:35,590
child to wait for the parent
the weight system call is sort of

3766
01:10:35,590 --> 01:10:35,600
the weight system call is sort of
 

3767
01:10:35,600 --> 01:10:37,830
the weight system call is sort of
the only mechanism available well the

3768
01:10:37,830 --> 01:10:37,840
the only mechanism available well the
 

3769
01:10:37,840 --> 01:10:39,350
the only mechanism available well the
weight system call

3770
01:10:39,350 --> 01:10:39,360
weight system call
 

3771
01:10:39,360 --> 01:10:43,510
weight system call
waits for your children and that's it

3772
01:10:43,510 --> 01:10:43,520
waits for your children and that's it
 

3773
01:10:43,520 --> 01:10:45,270
waits for your children and that's it
and so what weight is what weight does

3774
01:10:45,270 --> 01:10:45,280
and so what weight is what weight does
 

3775
01:10:45,280 --> 01:10:47,110
and so what weight is what weight does
is um

3776
01:10:47,110 --> 01:10:47,120
is um
 

3777
01:10:47,120 --> 01:10:49,590
is um
if you have any children and one of them

3778
01:10:49,590 --> 01:10:49,600
if you have any children and one of them
 

3779
01:10:49,600 --> 01:10:51,110
if you have any children and one of them
has already exited

3780
01:10:51,110 --> 01:10:51,120
has already exited
 

3781
01:10:51,120 --> 01:10:54,229
has already exited
or does exit then weight will return

3782
01:10:54,229 --> 01:10:54,239
or does exit then weight will return
 

3783
01:10:54,239 --> 01:10:55,270
or does exit then weight will return
but you know if you don't have any

3784
01:10:55,270 --> 01:10:55,280
but you know if you don't have any
 

3785
01:10:55,280 --> 01:10:57,430
but you know if you don't have any
children say because you are

3786
01:10:57,430 --> 01:10:57,440
children say because you are
 

3787
01:10:57,440 --> 01:11:00,709
children say because you are
because in this simple case

3788
01:11:00,709 --> 01:11:00,719
because in this simple case
 

3789
01:11:00,719 --> 01:11:03,110
because in this simple case
um whether it was just a parent and a

3790
01:11:03,110 --> 01:11:03,120
um whether it was just a parent and a
 

3791
01:11:03,120 --> 01:11:03,830
um whether it was just a parent and a
child

3792
01:11:03,830 --> 01:11:03,840
child
 

3793
01:11:03,840 --> 01:11:07,110
child
if the child called weight the child

3794
01:11:07,110 --> 01:11:07,120
if the child called weight the child
 

3795
01:11:07,120 --> 01:11:08,470
if the child called weight the child
doesn't have any children

3796
01:11:08,470 --> 01:11:08,480
doesn't have any children
 

3797
01:11:08,480 --> 01:11:09,910
doesn't have any children
and in that case weight just returns

3798
01:11:09,910 --> 01:11:09,920
and in that case weight just returns
 

3799
01:11:09,920 --> 01:11:11,750
and in that case weight just returns
immediately with a minus one

3800
01:11:11,750 --> 01:11:11,760
immediately with a minus one
 

3801
01:11:11,760 --> 01:11:13,830
immediately with a minus one
error return saying this process doesn't

3802
01:11:13,830 --> 01:11:13,840
error return saying this process doesn't
 

3803
01:11:13,840 --> 01:11:15,350
error return saying this process doesn't
have any children

3804
01:11:15,350 --> 01:11:15,360
have any children
 

3805
01:11:15,360 --> 01:11:17,189
have any children
anyway the short answer is there's no

3806
01:11:17,189 --> 01:11:17,199
anyway the short answer is there's no
 

3807
01:11:17,199 --> 01:11:18,550
anyway the short answer is there's no
way for a child

3808
01:11:18,550 --> 01:11:18,560
way for a child
 

3809
01:11:18,560 --> 01:11:21,990
way for a child
to wait for its parent to exit

3810
01:11:21,990 --> 01:11:22,000
to wait for its parent to exit
 

3811
01:11:22,000 --> 01:11:23,830
to wait for its parent to exit
another question when we say the child

3812
01:11:23,830 --> 01:11:23,840
another question when we say the child
 

3813
01:11:23,840 --> 01:11:25,750
another question when we say the child
copies all the memory

3814
01:11:25,750 --> 01:11:25,760
copies all the memory
 

3815
01:11:25,760 --> 01:11:27,430
copies all the memory
from the parent process what i what

3816
01:11:27,430 --> 01:11:27,440
from the parent process what i what
 

3817
01:11:27,440 --> 01:11:29,270
from the parent process what i what
exactly do we refer to by that

3818
01:11:29,270 --> 01:11:29,280
exactly do we refer to by that
 

3819
01:11:29,280 --> 01:11:31,430
exactly do we refer to by that
i thought the child is going to divide

3820
01:11:31,430 --> 01:11:31,440
i thought the child is going to divide
 

3821
01:11:31,440 --> 01:11:37,510
i thought the child is going to divide
define the variables again

3822
01:11:37,510 --> 01:11:37,520

 

3823
01:11:37,520 --> 01:11:40,950

um well when you compile us you know

3824
01:11:40,950 --> 01:11:40,960
um well when you compile us you know
 

3825
01:11:40,960 --> 01:11:45,430
um well when you compile us you know
um

3826
01:11:45,430 --> 01:11:45,440

 

3827
01:11:45,440 --> 01:11:49,110

after compilation your c program

3828
01:11:49,110 --> 01:11:49,120
after compilation your c program
 

3829
01:11:49,120 --> 01:11:50,390
after compilation your c program
is just a bunch of instructions in

3830
01:11:50,390 --> 01:11:50,400
is just a bunch of instructions in
 

3831
01:11:50,400 --> 01:11:53,430
is just a bunch of instructions in
memory that live in ram

3832
01:11:53,430 --> 01:11:53,440
memory that live in ram
 

3833
01:11:53,440 --> 01:11:57,270
memory that live in ram
um and so those can be copied

3834
01:11:57,270 --> 01:11:57,280
um and so those can be copied
 

3835
01:11:57,280 --> 01:11:59,110
um and so those can be copied
because they're just bytes living in ram

3836
01:11:59,110 --> 01:11:59,120
because they're just bytes living in ram
 

3837
01:11:59,120 --> 01:12:01,110
because they're just bytes living in ram
those can be copied somewhere else

3838
01:12:01,110 --> 01:12:01,120
those can be copied somewhere else
 

3839
01:12:01,120 --> 01:12:04,229
those can be copied somewhere else
um and with appropriate tricks having to

3840
01:12:04,229 --> 01:12:04,239
um and with appropriate tricks having to
 

3841
01:12:04,239 --> 01:12:06,390
um and with appropriate tricks having to
do with setting up

3842
01:12:06,390 --> 01:12:06,400
do with setting up
 

3843
01:12:06,400 --> 01:12:09,669
do with setting up
a sort of virtual memory mappings um

3844
01:12:09,669 --> 01:12:09,679
a sort of virtual memory mappings um
 

3845
01:12:09,679 --> 01:12:10,950
a sort of virtual memory mappings um
and make the mappings look the same with

3846
01:12:10,950 --> 01:12:10,960
and make the mappings look the same with
 

3847
01:12:10,960 --> 01:12:12,310
and make the mappings look the same with
the child as an apparent you can just

3848
01:12:12,310 --> 01:12:12,320
the child as an apparent you can just
 

3849
01:12:12,320 --> 01:12:14,470
the child as an apparent you can just
copy the parent's memory image to the

3850
01:12:14,470 --> 01:12:14,480
copy the parent's memory image to the
 

3851
01:12:14,480 --> 01:12:15,030
copy the parent's memory image to the
child

3852
01:12:15,030 --> 01:12:15,040
child
 

3853
01:12:15,040 --> 01:12:20,470
child
and execute it in the child

3854
01:12:20,470 --> 01:12:20,480

 

3855
01:12:20,480 --> 01:12:21,830

i mean even though we're looking at c

3856
01:12:21,830 --> 01:12:21,840
i mean even though we're looking at c
 

3857
01:12:21,840 --> 01:12:23,110
i mean even though we're looking at c
programs you should think of them as

3858
01:12:23,110 --> 01:12:23,120
programs you should think of them as
 

3859
01:12:23,120 --> 01:12:24,229
programs you should think of them as
just a bunch of us

3860
01:12:24,229 --> 01:12:24,239
just a bunch of us
 

3861
01:12:24,239 --> 01:12:27,270
just a bunch of us
machine instructions um

3862
01:12:27,270 --> 01:12:27,280
machine instructions um
 

3863
01:12:27,280 --> 01:12:28,630
machine instructions um
which are just bytes in memory that can

3864
01:12:28,630 --> 01:12:28,640
which are just bytes in memory that can
 

3865
01:12:28,640 --> 01:12:31,189
which are just bytes in memory that can
be copied

3866
01:12:31,189 --> 01:12:31,199

 

3867
01:12:31,199 --> 01:12:33,510

if a parent has multiple children would

3868
01:12:33,510 --> 01:12:33,520
if a parent has multiple children would
 

3869
01:12:33,520 --> 01:12:35,189
if a parent has multiple children would
wait just return as soon as the first

3870
01:12:35,189 --> 01:12:35,199
wait just return as soon as the first
 

3871
01:12:35,199 --> 01:12:36,149
wait just return as soon as the first
child finishes

3872
01:12:36,149 --> 01:12:36,159
child finishes
 

3873
01:12:36,159 --> 01:12:37,590
child finishes
meaning that there could be some more

3874
01:12:37,590 --> 01:12:37,600
meaning that there could be some more
 

3875
01:12:37,600 --> 01:12:38,950
meaning that there could be some more
interleaving with the parent and

3876
01:12:38,950 --> 01:12:38,960
interleaving with the parent and
 

3877
01:12:38,960 --> 01:12:40,149
interleaving with the parent and
unfinished children

3878
01:12:40,149 --> 01:12:40,159
unfinished children
 

3879
01:12:40,159 --> 01:12:41,750
unfinished children
would there need to be multiple separate

3880
01:12:41,750 --> 01:12:41,760
would there need to be multiple separate
 

3881
01:12:41,760 --> 01:12:44,470
would there need to be multiple separate
weights to ensure all children finish

3882
01:12:44,470 --> 01:12:44,480
weights to ensure all children finish
 

3883
01:12:44,480 --> 01:12:47,430
weights to ensure all children finish
yes if you call forth more than one if a

3884
01:12:47,430 --> 01:12:47,440
yes if you call forth more than one if a
 

3885
01:12:47,440 --> 01:12:48,950
yes if you call forth more than one if a
sin if a given process

3886
01:12:48,950 --> 01:12:48,960
sin if a given process
 

3887
01:12:48,960 --> 01:12:52,550
sin if a given process
calls for twice um

3888
01:12:52,550 --> 01:12:52,560
calls for twice um
 

3889
01:12:52,560 --> 01:12:54,390
calls for twice um
then and it wants to wait for both

3890
01:12:54,390 --> 01:12:54,400
then and it wants to wait for both
 

3891
01:12:54,400 --> 01:12:55,990
then and it wants to wait for both
children it has to call weight

3892
01:12:55,990 --> 01:12:56,000
children it has to call weight
 

3893
01:12:56,000 --> 01:12:58,950
children it has to call weight
twice and each call to wait will return

3894
01:12:58,950 --> 01:12:58,960
twice and each call to wait will return
 

3895
01:12:58,960 --> 01:12:59,990
twice and each call to wait will return
as soon as

3896
01:12:59,990 --> 01:13:00,000
as soon as
 

3897
01:13:00,000 --> 01:13:01,910
as soon as
one of the children exits so you don't

3898
01:13:01,910 --> 01:13:01,920
one of the children exits so you don't
 

3899
01:13:01,920 --> 01:13:02,950
one of the children exits so you don't
when weight returns you don't

3900
01:13:02,950 --> 01:13:02,960
when weight returns you don't
 

3901
01:13:02,960 --> 01:13:04,709
when weight returns you don't
necessarily know which

3902
01:13:04,709 --> 01:13:04,719
necessarily know which
 

3903
01:13:04,719 --> 01:13:07,590
necessarily know which
child is exited the weight returns the

3904
01:13:07,590 --> 01:13:07,600
child is exited the weight returns the
 

3905
01:13:07,600 --> 01:13:09,750
child is exited the weight returns the
child's process id as its return value

3906
01:13:09,750 --> 01:13:09,760
child's process id as its return value
 

3907
01:13:09,760 --> 01:13:11,350
child's process id as its return value
so you can tell

3908
01:13:11,350 --> 01:13:11,360
so you can tell
 

3909
01:13:11,360 --> 01:13:13,590
so you can tell
after weight returns you know which one

3910
01:13:13,590 --> 01:13:13,600
after weight returns you know which one
 

3911
01:13:13,600 --> 01:13:22,470
after weight returns you know which one
it was that exited

3912
01:13:22,470 --> 01:13:22,480

 

3913
01:13:22,480 --> 01:13:25,669

as a final example um

3914
01:13:25,669 --> 01:13:25,679
as a final example um
 

3915
01:13:25,679 --> 01:13:28,790
as a final example um
i'd like to show

3916
01:13:28,790 --> 01:13:28,800

 

3917
01:13:28,800 --> 01:13:33,750

how all of these facilities combine

3918
01:13:33,750 --> 01:13:33,760
how all of these facilities combine
 

3919
01:13:33,760 --> 01:13:37,830
how all of these facilities combine
to implement i o redirection so

3920
01:13:37,830 --> 01:13:37,840
to implement i o redirection so
 

3921
01:13:37,840 --> 01:13:40,310
to implement i o redirection so
if you remember the shell provides us

3922
01:13:40,310 --> 01:13:40,320
if you remember the shell provides us
 

3923
01:13:40,320 --> 01:13:42,149
if you remember the shell provides us
with this handy syntax

3924
01:13:42,149 --> 01:13:42,159
with this handy syntax
 

3925
01:13:42,159 --> 01:13:43,830
with this handy syntax
and i can say echo hello greater than

3926
01:13:43,830 --> 01:13:43,840
and i can say echo hello greater than
 

3927
01:13:43,840 --> 01:13:45,270
and i can say echo hello greater than
out

3928
01:13:45,270 --> 01:13:45,280
out
 

3929
01:13:45,280 --> 01:13:47,030
out
and that runs the echo command that

3930
01:13:47,030 --> 01:13:47,040
and that runs the echo command that
 

3931
01:13:47,040 --> 01:13:48,870
and that runs the echo command that
argument sending its

3932
01:13:48,870 --> 01:13:48,880
argument sending its
 

3933
01:13:48,880 --> 01:13:51,430
argument sending its
first that sends this output to the file

3934
01:13:51,430 --> 01:13:51,440
first that sends this output to the file
 

3935
01:13:51,440 --> 01:13:53,030
first that sends this output to the file
out and we look it out

3936
01:13:53,030 --> 01:13:53,040
out and we look it out
 

3937
01:13:53,040 --> 01:13:57,030
out and we look it out
or better yet run the cap command with

3938
01:13:57,030 --> 01:13:57,040
or better yet run the cap command with
 

3939
01:13:57,040 --> 01:13:58,310
or better yet run the cap command with
its input

3940
01:13:58,310 --> 01:13:58,320
its input
 

3941
01:13:58,320 --> 01:14:01,430
its input
connected from the out file

3942
01:14:01,430 --> 01:14:01,440
connected from the out file
 

3943
01:14:01,440 --> 01:14:02,950
connected from the out file
we can see that saved output from the

3944
01:14:02,950 --> 01:14:02,960
we can see that saved output from the
 

3945
01:14:02,960 --> 01:14:04,950
we can see that saved output from the
echo command

3946
01:14:04,950 --> 01:14:04,960
echo command
 

3947
01:14:04,960 --> 01:14:09,270
echo command
um the way the shell sets this up

3948
01:14:09,270 --> 01:14:09,280
um the way the shell sets this up
 

3949
01:14:09,280 --> 01:14:13,350
um the way the shell sets this up
is as follows

3950
01:14:13,350 --> 01:14:13,360
is as follows
 

3951
01:14:13,360 --> 01:14:17,270
is as follows
um it uh the shell

3952
01:14:17,270 --> 01:14:17,280
um it uh the shell
 

3953
01:14:17,280 --> 01:14:20,630
um it uh the shell
first forks like on line 13 and then

3954
01:14:20,630 --> 01:14:20,640
first forks like on line 13 and then
 

3955
01:14:20,640 --> 01:14:23,750
first forks like on line 13 and then
in the child the shell changes the way

3956
01:14:23,750 --> 01:14:23,760
in the child the shell changes the way
 

3957
01:14:23,760 --> 01:14:25,750
in the child the shell changes the way
the file descriptors are set up so that

3958
01:14:25,750 --> 01:14:25,760
the file descriptors are set up so that
 

3959
01:14:25,760 --> 01:14:27,189
the file descriptors are set up so that
the child's

3960
01:14:27,189 --> 01:14:27,199
the child's
 

3961
01:14:27,199 --> 01:14:30,310
the child's
file descriptor one which by convention

3962
01:14:30,310 --> 01:14:30,320
file descriptor one which by convention
 

3963
01:14:30,320 --> 01:14:33,430
file descriptor one which by convention
most programs use for their output

3964
01:14:33,430 --> 01:14:33,440
most programs use for their output
 

3965
01:14:33,440 --> 01:14:36,390
most programs use for their output
the shell changes the child's file

3966
01:14:36,390 --> 01:14:36,400
the shell changes the child's file
 

3967
01:14:36,400 --> 01:14:38,229
the shell changes the child's file
descriptor to one to refer

3968
01:14:38,229 --> 01:14:38,239
descriptor to one to refer
 

3969
01:14:38,239 --> 01:14:41,350
descriptor to one to refer
to this output file and then runs

3970
01:14:41,350 --> 01:14:41,360
to this output file and then runs
 

3971
01:14:41,360 --> 01:14:41,990
to this output file and then runs
whatever command

3972
01:14:41,990 --> 01:14:42,000
whatever command
 

3973
01:14:42,000 --> 01:14:44,470
whatever command
you wanted and that leaves the parent

3974
01:14:44,470 --> 01:14:44,480
you wanted and that leaves the parent
 

3975
01:14:44,480 --> 01:14:46,149
you wanted and that leaves the parent
shells file descriptor one

3976
01:14:46,149 --> 01:14:46,159
shells file descriptor one
 

3977
01:14:46,159 --> 01:14:49,590
shells file descriptor one
unchanged so this idiom of forking and

3978
01:14:49,590 --> 01:14:49,600
unchanged so this idiom of forking and
 

3979
01:14:49,600 --> 01:14:50,870
unchanged so this idiom of forking and
in the child

3980
01:14:50,870 --> 01:14:50,880
in the child
 

3981
01:14:50,880 --> 01:14:53,430
in the child
um changing around the file descriptors

3982
01:14:53,430 --> 01:14:53,440
um changing around the file descriptors
 

3983
01:14:53,440 --> 01:14:55,030
um changing around the file descriptors
is the usual way in

3984
01:14:55,030 --> 01:14:55,040
is the usual way in
 

3985
01:14:55,040 --> 01:14:58,790
is the usual way in
to sort of redirect input and output for

3986
01:14:58,790 --> 01:14:58,800
to sort of redirect input and output for
 

3987
01:14:58,800 --> 01:15:00,950
to sort of redirect input and output for
a command that you run but not affect

3988
01:15:00,950 --> 01:15:00,960
a command that you run but not affect
 

3989
01:15:00,960 --> 01:15:02,070
a command that you run but not affect
the input and output

3990
01:15:02,070 --> 01:15:02,080
the input and output
 

3991
01:15:02,080 --> 01:15:04,709
the input and output
for the calling program because we don't

3992
01:15:04,709 --> 01:15:04,719
for the calling program because we don't
 

3993
01:15:04,719 --> 01:15:07,830
for the calling program because we don't
want to redirect the shell's output

3994
01:15:07,830 --> 01:15:07,840
want to redirect the shell's output
 

3995
01:15:07,840 --> 01:15:10,630
want to redirect the shell's output
we only want to redirect the child

3996
01:15:10,630 --> 01:15:10,640
we only want to redirect the child
 

3997
01:15:10,640 --> 01:15:12,550
we only want to redirect the child
programs output

3998
01:15:12,550 --> 01:15:12,560
programs output
 

3999
01:15:12,560 --> 01:15:14,550
programs output
anyway the way this works we call fork

4000
01:15:14,550 --> 01:15:14,560
anyway the way this works we call fork
 

4001
01:15:14,560 --> 01:15:16,149
anyway the way this works we call fork
in the usual way

4002
01:15:16,149 --> 01:15:16,159
in the usual way
 

4003
01:15:16,159 --> 01:15:19,030
in the usual way
line 15 only executes in the child the

4004
01:15:19,030 --> 01:15:19,040
line 15 only executes in the child the
 

4005
01:15:19,040 --> 01:15:20,310
line 15 only executes in the child the
reason for the close one

4006
01:15:20,310 --> 01:15:20,320
reason for the close one
 

4007
01:15:20,320 --> 01:15:23,510
reason for the close one
on line 15 is that in this program

4008
01:15:23,510 --> 01:15:23,520
on line 15 is that in this program
 

4009
01:15:23,520 --> 01:15:25,830
on line 15 is that in this program
we're redirecting just the output of the

4010
01:15:25,830 --> 01:15:25,840
we're redirecting just the output of the
 

4011
01:15:25,840 --> 01:15:26,709
we're redirecting just the output of the
echo command so

4012
01:15:26,709 --> 01:15:26,719
echo command so
 

4013
01:15:26,719 --> 01:15:30,229
echo command so
when i run this redirect program

4014
01:15:30,229 --> 01:15:30,239
when i run this redirect program
 

4015
01:15:30,239 --> 01:15:31,990
when i run this redirect program
produces no output itself but it ran

4016
01:15:31,990 --> 01:15:32,000
produces no output itself but it ran
 

4017
01:15:32,000 --> 01:15:33,790
produces no output itself but it ran
echo with this output directed to

4018
01:15:33,790 --> 01:15:33,800
echo with this output directed to
 

4019
01:15:33,800 --> 01:15:35,430
echo with this output directed to
output.txt

4020
01:15:35,430 --> 01:15:35,440
output.txt
 

4021
01:15:35,440 --> 01:15:39,669
output.txt
so when i look at output.txt

4022
01:15:39,669 --> 01:15:39,679
so when i look at output.txt
 

4023
01:15:39,679 --> 01:15:41,990
so when i look at output.txt
i see this expected output the reason

4024
01:15:41,990 --> 01:15:42,000
i see this expected output the reason
 

4025
01:15:42,000 --> 01:15:44,870
i see this expected output the reason
for the close one on line 15

4026
01:15:44,870 --> 01:15:44,880
for the close one on line 15
 

4027
01:15:44,880 --> 01:15:48,070
for the close one on line 15
is that we want one

4028
01:15:48,070 --> 01:15:48,080
is that we want one
 

4029
01:15:48,080 --> 01:15:49,590
is that we want one
sort of conventional output file

4030
01:15:49,590 --> 01:15:49,600
sort of conventional output file
 

4031
01:15:49,600 --> 01:15:52,149
sort of conventional output file
descriptor to refer to something else it

4032
01:15:52,149 --> 01:15:52,159
descriptor to refer to something else it
 

4033
01:15:52,159 --> 01:15:53,030
descriptor to refer to something else it
happens

4034
01:15:53,030 --> 01:15:53,040
happens
 

4035
01:15:53,040 --> 01:15:54,950
happens
so we don't from the child we don't want

4036
01:15:54,950 --> 01:15:54,960
so we don't from the child we don't want
 

4037
01:15:54,960 --> 01:15:56,870
so we don't from the child we don't want
to use the file descriptor one that the

4038
01:15:56,870 --> 01:15:56,880
to use the file descriptor one that the
 

4039
01:15:56,880 --> 01:15:58,229
to use the file descriptor one that the
shell had that's connected to the

4040
01:15:58,229 --> 01:15:58,239
shell had that's connected to the
 

4041
01:15:58,239 --> 01:15:59,590
shell had that's connected to the
console

4042
01:15:59,590 --> 01:15:59,600
console
 

4043
01:15:59,600 --> 01:16:01,830
console
um the call to open on line 16 is

4044
01:16:01,830 --> 01:16:01,840
um the call to open on line 16 is
 

4045
01:16:01,840 --> 01:16:04,709
um the call to open on line 16 is
guaranteed to return one because

4046
01:16:04,709 --> 01:16:04,719
guaranteed to return one because
 

4047
01:16:04,719 --> 01:16:06,630
guaranteed to return one because
the semantics of open are that open

4048
01:16:06,630 --> 01:16:06,640
the semantics of open are that open
 

4049
01:16:06,640 --> 01:16:08,310
the semantics of open are that open
returns the lowest

4050
01:16:08,310 --> 01:16:08,320
returns the lowest
 

4051
01:16:08,320 --> 01:16:10,070
returns the lowest
file descriptor number that's not

4052
01:16:10,070 --> 01:16:10,080
file descriptor number that's not
 

4053
01:16:10,080 --> 01:16:11,510
file descriptor number that's not
currently in use

4054
01:16:11,510 --> 01:16:11,520
currently in use
 

4055
01:16:11,520 --> 01:16:13,990
currently in use
um in the calling process since we just

4056
01:16:13,990 --> 01:16:14,000
um in the calling process since we just
 

4057
01:16:14,000 --> 01:16:15,270
um in the calling process since we just
closed one

4058
01:16:15,270 --> 01:16:15,280
closed one
 

4059
01:16:15,280 --> 01:16:18,310
closed one
and file descriptor 0 is

4060
01:16:18,310 --> 01:16:18,320
and file descriptor 0 is
 

4061
01:16:18,320 --> 01:16:20,470
and file descriptor 0 is
still connected to the console that mean

4062
01:16:20,470 --> 01:16:20,480
still connected to the console that mean
 

4063
01:16:20,480 --> 01:16:21,350
still connected to the console that mean
um

4064
01:16:21,350 --> 01:16:21,360
um
 

4065
01:16:21,360 --> 01:16:24,470
um
open is guaranteed to return one so

4066
01:16:24,470 --> 01:16:24,480
open is guaranteed to return one so
 

4067
01:16:24,480 --> 01:16:25,590
open is guaranteed to return one so
after the

4068
01:16:25,590 --> 01:16:25,600
after the
 

4069
01:16:25,600 --> 01:16:28,149
after the
line 16 file descriptor 1 is connected

4070
01:16:28,149 --> 01:16:28,159
line 16 file descriptor 1 is connected
 

4071
01:16:28,159 --> 01:16:30,149
line 16 file descriptor 1 is connected
to this file

4072
01:16:30,149 --> 01:16:30,159
to this file
 

4073
01:16:30,159 --> 01:16:32,550
to this file
when we exec echo echo just writes its

4074
01:16:32,550 --> 01:16:32,560
when we exec echo echo just writes its
 

4075
01:16:32,560 --> 01:16:34,229
when we exec echo echo just writes its
output to file scripter one

4076
01:16:34,229 --> 01:16:34,239
output to file scripter one
 

4077
01:16:34,239 --> 01:16:35,910
output to file scripter one
um and now it goes to this file and the

4078
01:16:35,910 --> 01:16:35,920
um and now it goes to this file and the
 

4079
01:16:35,920 --> 01:16:37,350
um and now it goes to this file and the
cool thing about this is echo had no

4080
01:16:37,350 --> 01:16:37,360
cool thing about this is echo had no
 

4081
01:16:37,360 --> 01:16:38,630
cool thing about this is echo had no
idea what's going on

4082
01:16:38,630 --> 01:16:38,640
idea what's going on
 

4083
01:16:38,640 --> 01:16:40,229
idea what's going on
echo doesn't need to know about io

4084
01:16:40,229 --> 01:16:40,239
echo doesn't need to know about io
 

4085
01:16:40,239 --> 01:16:42,229
echo doesn't need to know about io
redirection at all it just

4086
01:16:42,229 --> 01:16:42,239
redirection at all it just
 

4087
01:16:42,239 --> 01:16:45,830
redirection at all it just
writes its output to file descriptor one

4088
01:16:45,830 --> 01:16:45,840
writes its output to file descriptor one
 

4089
01:16:45,840 --> 01:16:49,350
writes its output to file descriptor one
only the shell knows about

4090
01:16:49,350 --> 01:16:49,360
only the shell knows about
 

4091
01:16:49,360 --> 01:16:52,390
only the shell knows about
io redirection

4092
01:16:52,390 --> 01:16:52,400

 

4093
01:16:52,400 --> 01:16:54,870

this example also illustrates the sort

4094
01:16:54,870 --> 01:16:54,880
this example also illustrates the sort
 

4095
01:16:54,880 --> 01:16:56,229
this example also illustrates the sort
of

4096
01:16:56,229 --> 01:16:56,239
of
 

4097
01:16:56,239 --> 01:16:58,870
of
kind of neatness of the separation

4098
01:16:58,870 --> 01:16:58,880
kind of neatness of the separation
 

4099
01:16:58,880 --> 01:16:59,270
kind of neatness of the separation
between

4100
01:16:59,270 --> 01:16:59,280
between
 

4101
01:16:59,280 --> 01:17:01,030
between
fork and exec the fact that fork and

4102
01:17:01,030 --> 01:17:01,040
fork and exec the fact that fork and
 

4103
01:17:01,040 --> 01:17:04,229
fork and exec the fact that fork and
exact are separate system calls

4104
01:17:04,229 --> 01:17:04,239
exact are separate system calls
 

4105
01:17:04,239 --> 01:17:08,149
exact are separate system calls
separate uh functions

4106
01:17:08,149 --> 01:17:08,159
separate uh functions
 

4107
01:17:08,159 --> 01:17:09,830
separate uh functions
means that there's a period of time but

4108
01:17:09,830 --> 01:17:09,840
means that there's a period of time but
 

4109
01:17:09,840 --> 01:17:11,830
means that there's a period of time but
in the child between the fork

4110
01:17:11,830 --> 01:17:11,840
in the child between the fork
 

4111
01:17:11,840 --> 01:17:13,830
in the child between the fork
between fork returns and the child and

4112
01:17:13,830 --> 01:17:13,840
between fork returns and the child and
 

4113
01:17:13,840 --> 01:17:14,870
between fork returns and the child and
exact in which

4114
01:17:14,870 --> 01:17:14,880
exact in which
 

4115
01:17:14,880 --> 01:17:16,470
exact in which
we're still running the calling

4116
01:17:16,470 --> 01:17:16,480
we're still running the calling
 

4117
01:17:16,480 --> 01:17:18,470
we're still running the calling
processes instructions so the

4118
01:17:18,470 --> 01:17:18,480
processes instructions so the
 

4119
01:17:18,480 --> 01:17:21,270
processes instructions so the
calling process even though it's running

4120
01:17:21,270 --> 01:17:21,280
calling process even though it's running
 

4121
01:17:21,280 --> 01:17:22,550
calling process even though it's running
even though its instructions are running

4122
01:17:22,550 --> 01:17:22,560
even though its instructions are running
 

4123
01:17:22,560 --> 01:17:23,510
even though its instructions are running
in the child

4124
01:17:23,510 --> 01:17:23,520
in the child
 

4125
01:17:23,520 --> 01:17:25,110
in the child
it's still the calling processes

4126
01:17:25,110 --> 01:17:25,120
it's still the calling processes
 

4127
01:17:25,120 --> 01:17:26,870
it's still the calling processes
instructions that are executing

4128
01:17:26,870 --> 01:17:26,880
instructions that are executing
 

4129
01:17:26,880 --> 01:17:29,910
instructions that are executing
and so the calling process is still able

4130
01:17:29,910 --> 01:17:29,920
and so the calling process is still able
 

4131
01:17:29,920 --> 01:17:30,550
and so the calling process is still able
to change

4132
01:17:30,550 --> 01:17:30,560
to change
 

4133
01:17:30,560 --> 01:17:32,950
to change
things um still in control up until line

4134
01:17:32,950 --> 01:17:32,960
things um still in control up until line
 

4135
01:17:32,960 --> 01:17:34,229
things um still in control up until line
19

4136
01:17:34,229 --> 01:17:34,239
19
 

4137
01:17:34,239 --> 01:17:35,750
19
and this sort of interval between fork

4138
01:17:35,750 --> 01:17:35,760
and this sort of interval between fork
 

4139
01:17:35,760 --> 01:17:38,550
and this sort of interval between fork
and sec uh gives the shell a chance to

4140
01:17:38,550 --> 01:17:38,560
and sec uh gives the shell a chance to
 

4141
01:17:38,560 --> 01:17:40,709
and sec uh gives the shell a chance to
change what the file descriptors refer

4142
01:17:40,709 --> 01:17:40,719
change what the file descriptors refer
 

4143
01:17:40,719 --> 01:17:43,189
change what the file descriptors refer
to for example

4144
01:17:43,189 --> 01:17:43,199
to for example
 

4145
01:17:43,199 --> 01:17:45,430
to for example
any questions about this redirect

4146
01:17:45,430 --> 01:17:45,440
any questions about this redirect
 

4147
01:17:45,440 --> 01:17:55,110
any questions about this redirect
example

4148
01:17:55,110 --> 01:17:55,120

 

4149
01:17:55,120 --> 01:18:00,229

all right um got out of time

4150
01:18:00,229 --> 01:18:00,239
all right um got out of time
 

4151
01:18:00,239 --> 01:18:03,910
all right um got out of time
i'll just wrap up we looked at unix's

4152
01:18:03,910 --> 01:18:03,920
i'll just wrap up we looked at unix's
 

4153
01:18:03,920 --> 01:18:07,189
i'll just wrap up we looked at unix's
a bunch of the interfaces to unix's i o

4154
01:18:07,189 --> 01:18:07,199
a bunch of the interfaces to unix's i o
 

4155
01:18:07,199 --> 01:18:10,070
a bunch of the interfaces to unix's i o
and process abstractions a thing to take

4156
01:18:10,070 --> 01:18:10,080
and process abstractions a thing to take
 

4157
01:18:10,080 --> 01:18:11,510
and process abstractions a thing to take
away from this is that the interfaces

4158
01:18:11,510 --> 01:18:11,520
away from this is that the interfaces
 

4159
01:18:11,520 --> 01:18:12,630
away from this is that the interfaces
are relatively simple

4160
01:18:12,630 --> 01:18:12,640
are relatively simple
 

4161
01:18:12,640 --> 01:18:14,950
are relatively simple
you just pass integers like file

4162
01:18:14,950 --> 01:18:14,960
you just pass integers like file
 

4163
01:18:14,960 --> 01:18:16,790
you just pass integers like file
descriptors and process ids back and

4164
01:18:16,790 --> 01:18:16,800
descriptors and process ids back and
 

4165
01:18:16,800 --> 01:18:17,910
descriptors and process ids back and
forth across

4166
01:18:17,910 --> 01:18:17,920
forth across
 

4167
01:18:17,920 --> 01:18:20,790
forth across
as arguments to these system calls um

4168
01:18:20,790 --> 01:18:20,800
as arguments to these system calls um
 

4169
01:18:20,800 --> 01:18:21,189
as arguments to these system calls um
but

4170
01:18:21,189 --> 01:18:21,199
but
 

4171
01:18:21,199 --> 01:18:24,070
but
sort of all the functionality inside the

4172
01:18:24,070 --> 01:18:24,080
sort of all the functionality inside the
 

4173
01:18:24,080 --> 01:18:25,590
sort of all the functionality inside the
interfaces is relatively

4174
01:18:25,590 --> 01:18:25,600
interfaces is relatively
 

4175
01:18:25,600 --> 01:18:27,830
interfaces is relatively
sophisticated like creating new

4176
01:18:27,830 --> 01:18:27,840
sophisticated like creating new
 

4177
01:18:27,840 --> 01:18:28,870
sophisticated like creating new
processes and

4178
01:18:28,870 --> 01:18:28,880
processes and
 

4179
01:18:28,880 --> 01:18:30,709
processes and
copying the current process and

4180
01:18:30,709 --> 01:18:30,719
copying the current process and
 

4181
01:18:30,719 --> 01:18:31,910
copying the current process and
furthermore

4182
01:18:31,910 --> 01:18:31,920
furthermore
 

4183
01:18:31,920 --> 01:18:33,270
furthermore
i showed some examples of ways in which

4184
01:18:33,270 --> 01:18:33,280
i showed some examples of ways in which
 

4185
01:18:33,280 --> 01:18:35,270
i showed some examples of ways in which
the abstractions though individually

4186
01:18:35,270 --> 01:18:35,280
the abstractions though individually
 

4187
01:18:35,280 --> 01:18:36,070
the abstractions though individually
simple

4188
01:18:36,070 --> 01:18:36,080
simple
 

4189
01:18:36,080 --> 01:18:39,750
simple
combine in useful ways for example

4190
01:18:39,750 --> 01:18:39,760
combine in useful ways for example
 

4191
01:18:39,760 --> 01:18:43,910
combine in useful ways for example
to produce iod direction

4192
01:18:43,910 --> 01:18:43,920

 

4193
01:18:43,920 --> 01:18:45,590

there's a lab due at the end of next

4194
01:18:45,590 --> 01:18:45,600
there's a lab due at the end of next
 

4195
01:18:45,600 --> 01:18:48,870
there's a lab due at the end of next
week and that lab involves writing

4196
01:18:48,870 --> 01:18:48,880
week and that lab involves writing
 

4197
01:18:48,880 --> 01:18:50,709
week and that lab involves writing
more simple utilities like the ones i

4198
01:18:50,709 --> 01:18:50,719
more simple utilities like the ones i
 

4199
01:18:50,719 --> 01:18:52,310
more simple utilities like the ones i
showed that use the system calls that we

4200
01:18:52,310 --> 01:18:52,320
showed that use the system calls that we
 

4201
01:18:52,320 --> 01:18:54,070
showed that use the system calls that we
discussed

4202
01:18:54,070 --> 01:18:54,080
discussed
 

4203
01:18:54,080 --> 01:18:56,550
discussed
so have fun with that lab and i'll see

4204
01:18:56,550 --> 01:18:56,560
so have fun with that lab and i'll see
 

4205
01:18:56,560 --> 01:19:01,510
so have fun with that lab and i'll see
you in class next week

4206
01:19:01,510 --> 01:19:01,520

 

4207
01:19:01,520 --> 01:19:15,189

and that's it

4208
01:19:15,189 --> 01:19:15,199

 

4209
01:19:15,199 --> 01:19:17,510

since i'm the one recording um how do i

4210
01:19:17,510 --> 01:19:17,520
since i'm the one recording um how do i
 

4211
01:19:17,520 --> 01:19:18,709
since i'm the one recording um how do i
end this

4212
01:19:18,709 --> 01:19:18,719
end this
 

4213
01:19:18,719 --> 01:19:20,709
end this
first time recording is in lecture i

4214
01:19:20,709 --> 01:19:20,719
first time recording is in lecture i
 

4215
01:19:20,719 --> 01:19:22,470
first time recording is in lecture i
think we exit

4216
01:19:22,470 --> 01:19:22,480
think we exit
 

4217
01:19:22,480 --> 01:19:24,229
think we exit
okay and nothing special i can just exit

4218
01:19:24,229 --> 01:19:24,239
okay and nothing special i can just exit
 

4219
01:19:24,239 --> 01:19:26,470
okay and nothing special i can just exit
and it'll be saved somewhere

4220
01:19:26,470 --> 01:19:26,480
and it'll be saved somewhere
 

4221
01:19:26,480 --> 01:19:31,990
and it'll be saved somewhere
yes awesome

4222
01:19:31,990 --> 01:19:32,000

 

4223
01:19:32,000 --> 01:19:35,030

and zoom will create some directory and

4224
01:19:35,030 --> 01:19:35,040
and zoom will create some directory and
 

4225
01:19:35,040 --> 01:19:38,470
and zoom will create some directory and
stick the vowel in that directory

4226
01:19:38,470 --> 01:19:38,480

 

4227
01:19:38,480 --> 01:19:39,990

there's also office hours right after

4228
01:19:39,990 --> 01:19:40,000
there's also office hours right after
 

4229
01:19:40,000 --> 01:19:41,910
there's also office hours right after
this right

4230
01:19:41,910 --> 01:19:41,920
this right
 

4231
01:19:41,920 --> 01:19:48,830
this right
yes perfect okay

4232
01:19:48,830 --> 01:19:48,840

 

4233
01:19:48,840 --> 01:19:50,310

cool

4234
01:19:50,310 --> 01:19:50,320
cool
 

4235
01:19:50,320 --> 01:19:53,430
cool
all right all right thank you and

4236
01:19:53,430 --> 01:19:53,440
all right all right thank you and
 

4237
01:19:53,440 --> 01:19:59,199
all right all right thank you and
i'll see you next week thanks

