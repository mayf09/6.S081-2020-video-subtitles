1
00:00:00,480 --> 00:00:03,030

okay uh good afternoon uh wherever you

2
00:00:03,030 --> 00:00:03,040
okay uh good afternoon uh wherever you
 

3
00:00:03,040 --> 00:00:04,150
okay uh good afternoon uh wherever you
are

4
00:00:04,150 --> 00:00:04,160
are
 

5
00:00:04,160 --> 00:00:06,550
are
uh can everybody hear me a quick sound

6
00:00:06,550 --> 00:00:06,560
uh can everybody hear me a quick sound
 

7
00:00:06,560 --> 00:00:09,589
uh can everybody hear me a quick sound
check to make sure

8
00:00:09,589 --> 00:00:09,599

 

9
00:00:09,599 --> 00:00:12,470

yup you're fine okay good thank you um

10
00:00:12,470 --> 00:00:12,480
yup you're fine okay good thank you um
 

11
00:00:12,480 --> 00:00:12,789
yup you're fine okay good thank you um
so

12
00:00:12,789 --> 00:00:12,799
so
 

13
00:00:12,799 --> 00:00:15,669
so
uh today uh uh we're gonna talk uh i

14
00:00:15,669 --> 00:00:15,679
uh today uh uh we're gonna talk uh i
 

15
00:00:15,679 --> 00:00:16,390
uh today uh uh we're gonna talk uh i
don't really have

16
00:00:16,390 --> 00:00:16,400
don't really have
 

17
00:00:16,400 --> 00:00:18,790
don't really have
specific agenda but basically the plan

18
00:00:18,790 --> 00:00:18,800
specific agenda but basically the plan
 

19
00:00:18,800 --> 00:00:19,830
specific agenda but basically the plan
is to

20
00:00:19,830 --> 00:00:19,840
is to
 

21
00:00:19,840 --> 00:00:22,550
is to
try to answer questions uh uh that you

22
00:00:22,550 --> 00:00:22,560
try to answer questions uh uh that you
 

23
00:00:22,560 --> 00:00:23,109
try to answer questions uh uh that you
might have

24
00:00:23,109 --> 00:00:23,119
might have
 

25
00:00:23,119 --> 00:00:24,790
might have
about this one the last lap or the

26
00:00:24,790 --> 00:00:24,800
about this one the last lap or the
 

27
00:00:24,800 --> 00:00:27,109
about this one the last lap or the
previous laps

28
00:00:27,109 --> 00:00:27,119
previous laps
 

29
00:00:27,119 --> 00:00:29,349
previous laps
so the approach i'm going to take uh

30
00:00:29,349 --> 00:00:29,359
so the approach i'm going to take uh
 

31
00:00:29,359 --> 00:00:30,470
so the approach i'm going to take uh
today

32
00:00:30,470 --> 00:00:30,480
today
 

33
00:00:30,480 --> 00:00:32,870
today
is i'm going to walk through the staff

34
00:00:32,870 --> 00:00:32,880
is i'm going to walk through the staff
 

35
00:00:32,880 --> 00:00:35,590
is i'm going to walk through the staff
solutions

36
00:00:35,590 --> 00:00:35,600

 

37
00:00:35,600 --> 00:00:38,950

in particular my own solutions and

38
00:00:38,950 --> 00:00:38,960
in particular my own solutions and
 

39
00:00:38,960 --> 00:00:41,030
in particular my own solutions and
going to discuss them and hopefully as

40
00:00:41,030 --> 00:00:41,040
going to discuss them and hopefully as
 

41
00:00:41,040 --> 00:00:44,310
going to discuss them and hopefully as
we go through staff solutions

42
00:00:44,310 --> 00:00:44,320
we go through staff solutions
 

43
00:00:44,320 --> 00:00:46,310
we go through staff solutions
you can jump in if i don't answer a

44
00:00:46,310 --> 00:00:46,320
you can jump in if i don't answer a
 

45
00:00:46,320 --> 00:00:48,549
you can jump in if i don't answer a
particular question

46
00:00:48,549 --> 00:00:48,559
particular question
 

47
00:00:48,559 --> 00:00:51,430
particular question
or wait a little bit because i put all

48
00:00:51,430 --> 00:00:51,440
or wait a little bit because i put all
 

49
00:00:51,440 --> 00:00:52,310
or wait a little bit because i put all
the questions

50
00:00:52,310 --> 00:00:52,320
the questions
 

51
00:00:52,320 --> 00:00:54,869
the questions
that you've asked at least before 11am

52
00:00:54,869 --> 00:00:54,879
that you've asked at least before 11am
 

53
00:00:54,879 --> 00:00:56,549
that you've asked at least before 11am
this morning

54
00:00:56,549 --> 00:00:56,559
this morning
 

55
00:00:56,559 --> 00:00:58,950
this morning
in the lecture notes at the bottom and

56
00:00:58,950 --> 00:00:58,960
in the lecture notes at the bottom and
 

57
00:00:58,960 --> 00:01:01,029
in the lecture notes at the bottom and
we'll try to go through them

58
00:01:01,029 --> 00:01:01,039
we'll try to go through them
 

59
00:01:01,039 --> 00:01:04,869
we'll try to go through them
um i'm going to start

60
00:01:04,869 --> 00:01:04,879
um i'm going to start
 

61
00:01:04,879 --> 00:01:08,390
um i'm going to start
with the page stable app because most

62
00:01:08,390 --> 00:01:08,400
with the page stable app because most
 

63
00:01:08,400 --> 00:01:11,750
with the page stable app because most
questions were about the page table lab

64
00:01:11,750 --> 00:01:11,760
questions were about the page table lab
 

65
00:01:11,760 --> 00:01:13,350
questions were about the page table lab
and partially because of joomla it was

66
00:01:13,350 --> 00:01:13,360
and partially because of joomla it was
 

67
00:01:13,360 --> 00:01:16,469
and partially because of joomla it was
the the hardest laughs

68
00:01:16,469 --> 00:01:16,479

 

69
00:01:16,479 --> 00:01:19,350

and so maybe a couple comments before

70
00:01:19,350 --> 00:01:19,360
and so maybe a couple comments before
 

71
00:01:19,360 --> 00:01:21,429
and so maybe a couple comments before
diving into sort of the technical uh

72
00:01:21,429 --> 00:01:21,439
diving into sort of the technical uh
 

73
00:01:21,439 --> 00:01:23,749
diving into sort of the technical uh
part of this uh let's talk a little bit

74
00:01:23,749 --> 00:01:23,759
part of this uh let's talk a little bit
 

75
00:01:23,759 --> 00:01:24,550
part of this uh let's talk a little bit
about

76
00:01:24,550 --> 00:01:24,560
about
 

77
00:01:24,560 --> 00:01:30,390
about
uh the page table live in general

78
00:01:30,390 --> 00:01:30,400

 

79
00:01:30,400 --> 00:01:32,950

and you know as you probably observed

80
00:01:32,950 --> 00:01:32,960
and you know as you probably observed
 

81
00:01:32,960 --> 00:01:38,830
and you know as you probably observed
you know there's actually a few lines of

82
00:01:38,830 --> 00:01:38,840

 

83
00:01:38,840 --> 00:01:41,109

code uh

84
00:01:41,109 --> 00:01:41,119
code uh
 

85
00:01:41,119 --> 00:01:44,310
code uh
in terms of the solution but it

86
00:01:44,310 --> 00:01:44,320
in terms of the solution but it
 

87
00:01:44,320 --> 00:01:44,950
in terms of the solution but it
unfortunately

88
00:01:44,950 --> 00:01:44,960
unfortunately
 

89
00:01:44,960 --> 00:01:52,830
unfortunately
has you know hard to debug

90
00:01:52,830 --> 00:01:52,840

 

91
00:01:52,840 --> 00:01:55,109

problems

92
00:01:55,109 --> 00:01:55,119
problems
 

93
00:01:55,119 --> 00:01:58,469
problems
and you know there's

94
00:01:58,469 --> 00:01:58,479

 

95
00:01:58,479 --> 00:02:00,469

one reason is that you know when

96
00:02:00,469 --> 00:02:00,479
one reason is that you know when
 

97
00:02:00,479 --> 00:02:01,910
one reason is that you know when
actually the block shows up

98
00:02:01,910 --> 00:02:01,920
actually the block shows up
 

99
00:02:01,920 --> 00:02:04,550
actually the block shows up
uh you know the outcomes are uh pretty

100
00:02:04,550 --> 00:02:04,560
uh you know the outcomes are uh pretty
 

101
00:02:04,560 --> 00:02:05,190
uh you know the outcomes are uh pretty
extreme

102
00:02:05,190 --> 00:02:05,200
extreme
 

103
00:02:05,200 --> 00:02:07,350
extreme
like in the worst case uh probably some

104
00:02:07,350 --> 00:02:07,360
like in the worst case uh probably some
 

105
00:02:07,360 --> 00:02:08,630
like in the worst case uh probably some
of you observed that

106
00:02:08,630 --> 00:02:08,640
of you observed that
 

107
00:02:08,640 --> 00:02:11,910
of you observed that
in the worst case um q mu just stops

108
00:02:11,910 --> 00:02:11,920
in the worst case um q mu just stops
 

109
00:02:11,920 --> 00:02:14,150
in the worst case um q mu just stops
or xv6 that stops there's no output

110
00:02:14,150 --> 00:02:14,160
or xv6 that stops there's no output
 

111
00:02:14,160 --> 00:02:15,589
or xv6 that stops there's no output
being printed anymore

112
00:02:15,589 --> 00:02:15,599
being printed anymore
 

113
00:02:15,599 --> 00:02:18,390
being printed anymore
uh and that's it and you know now it's

114
00:02:18,390 --> 00:02:18,400
uh and that's it and you know now it's
 

115
00:02:18,400 --> 00:02:19,270
uh and that's it and you know now it's
your job to

116
00:02:19,270 --> 00:02:19,280
your job to
 

117
00:02:19,280 --> 00:02:21,750
your job to
figure out actually what went wrong uh

118
00:02:21,750 --> 00:02:21,760
figure out actually what went wrong uh
 

119
00:02:21,760 --> 00:02:22,790
figure out actually what went wrong uh
in the best case

120
00:02:22,790 --> 00:02:22,800
in the best case
 

121
00:02:22,800 --> 00:02:24,949
in the best case
you know you get sort of a kernel panic

122
00:02:24,949 --> 00:02:24,959
you know you get sort of a kernel panic
 

123
00:02:24,959 --> 00:02:27,190
you know you get sort of a kernel panic
uh but depending you know maybe just

124
00:02:27,190 --> 00:02:27,200
uh but depending you know maybe just
 

125
00:02:27,200 --> 00:02:29,350
uh but depending you know maybe just
your starting point or for tracking down

126
00:02:29,350 --> 00:02:29,360
your starting point or for tracking down
 

127
00:02:29,360 --> 00:02:30,229
your starting point or for tracking down
what the actual

128
00:02:30,229 --> 00:02:30,239
what the actual
 

129
00:02:30,239 --> 00:02:31,589
what the actual
source of the problem is you know the

130
00:02:31,589 --> 00:02:31,599
source of the problem is you know the
 

131
00:02:31,599 --> 00:02:33,830
source of the problem is you know the
panic itself is probably related to

132
00:02:33,830 --> 00:02:33,840
panic itself is probably related to
 

133
00:02:33,840 --> 00:02:35,350
panic itself is probably related to
something else so the invariant in the

134
00:02:35,350 --> 00:02:35,360
something else so the invariant in the
 

135
00:02:35,360 --> 00:02:36,550
something else so the invariant in the
kernel got broken

136
00:02:36,550 --> 00:02:36,560
kernel got broken
 

137
00:02:36,560 --> 00:02:38,470
kernel got broken
uh but you know somewhere else earlier

138
00:02:38,470 --> 00:02:38,480
uh but you know somewhere else earlier
 

139
00:02:38,480 --> 00:02:39,990
uh but you know somewhere else earlier
probably when you set up the page tables

140
00:02:39,990 --> 00:02:40,000
probably when you set up the page tables
 

141
00:02:40,000 --> 00:02:41,350
probably when you set up the page tables
you know you did something wrong that in

142
00:02:41,350 --> 00:02:41,360
you know you did something wrong that in
 

143
00:02:41,360 --> 00:02:42,550
you know you did something wrong that in
the end caused this

144
00:02:42,550 --> 00:02:42,560
the end caused this
 

145
00:02:42,560 --> 00:02:44,150
the end caused this
pendant to go off and so you have to

146
00:02:44,150 --> 00:02:44,160
pendant to go off and so you have to
 

147
00:02:44,160 --> 00:02:47,670
pendant to go off and so you have to
track down uh what's going on

148
00:02:47,670 --> 00:02:47,680
track down uh what's going on
 

149
00:02:47,680 --> 00:02:49,910
track down uh what's going on
so fewer lines of code hard to do by

150
00:02:49,910 --> 00:02:49,920
so fewer lines of code hard to do by
 

151
00:02:49,920 --> 00:02:50,869
so fewer lines of code hard to do by
problems

152
00:02:50,869 --> 00:02:50,879
problems
 

153
00:02:50,879 --> 00:02:53,990
problems
uh and you know just a harsh environment

154
00:02:53,990 --> 00:02:54,000
uh and you know just a harsh environment
 

155
00:02:54,000 --> 00:02:57,430
uh and you know just a harsh environment
uh to debug in uh if you do in the

156
00:02:57,430 --> 00:02:57,440
uh to debug in uh if you do in the
 

157
00:02:57,440 --> 00:02:58,710
uh to debug in uh if you do in the
kernel debugging or

158
00:02:58,710 --> 00:02:58,720
kernel debugging or
 

159
00:02:58,720 --> 00:03:00,390
kernel debugging or
you know kernel programming you know use

160
00:03:00,390 --> 00:03:00,400
you know kernel programming you know use
 

161
00:03:00,400 --> 00:03:01,350
you know kernel programming you know use
the programming environment the

162
00:03:01,350 --> 00:03:01,360
the programming environment the
 

163
00:03:01,360 --> 00:03:04,070
the programming environment the
debugging environment is

164
00:03:04,070 --> 00:03:04,080
debugging environment is
 

165
00:03:04,080 --> 00:03:06,229
debugging environment is
unforgivable like as robin mentioned in

166
00:03:06,229 --> 00:03:06,239
unforgivable like as robin mentioned in
 

167
00:03:06,239 --> 00:03:07,830
unforgivable like as robin mentioned in
the first lecture this is one of the

168
00:03:07,830 --> 00:03:07,840
the first lecture this is one of the
 

169
00:03:07,840 --> 00:03:08,949
the first lecture this is one of the
hard parts

170
00:03:08,949 --> 00:03:08,959
hard parts
 

171
00:03:08,959 --> 00:03:11,670
hard parts
about basically doing kernel programming

172
00:03:11,670 --> 00:03:11,680
about basically doing kernel programming
 

173
00:03:11,680 --> 00:03:12,869
about basically doing kernel programming
um

174
00:03:12,869 --> 00:03:12,879
um
 

175
00:03:12,879 --> 00:03:15,830
um
and and that's a you know just to make

176
00:03:15,830 --> 00:03:15,840
and and that's a you know just to make
 

177
00:03:15,840 --> 00:03:17,270
and and that's a you know just to make
you made me feel better and this is not

178
00:03:17,270 --> 00:03:17,280
you made me feel better and this is not
 

179
00:03:17,280 --> 00:03:17,990
you made me feel better and this is not
just hard for you

180
00:03:17,990 --> 00:03:18,000
just hard for you
 

181
00:03:18,000 --> 00:03:19,190
just hard for you
you know it's actually a little hard for

182
00:03:19,190 --> 00:03:19,200
you know it's actually a little hard for
 

183
00:03:19,200 --> 00:03:24,710
you know it's actually a little hard for
the staff

184
00:03:24,710 --> 00:03:24,720

 

185
00:03:24,720 --> 00:03:26,710

both in terms of helping you and

186
00:03:26,710 --> 00:03:26,720
both in terms of helping you and
 

187
00:03:26,720 --> 00:03:28,229
both in terms of helping you and
actually you know when we do these labs

188
00:03:28,229 --> 00:03:28,239
actually you know when we do these labs
 

189
00:03:28,239 --> 00:03:29,750
actually you know when we do these labs
you know we make similar problems and

190
00:03:29,750 --> 00:03:29,760
you know we make similar problems and
 

191
00:03:29,760 --> 00:03:30,309
you know we make similar problems and
you know we

192
00:03:30,309 --> 00:03:30,319
you know we
 

193
00:03:30,319 --> 00:03:31,509
you know we
probably have more experience in

194
00:03:31,509 --> 00:03:31,519
probably have more experience in
 

195
00:03:31,519 --> 00:03:33,589
probably have more experience in
tracking bugs down uh but you know they

196
00:03:33,589 --> 00:03:33,599
tracking bugs down uh but you know they
 

197
00:03:33,599 --> 00:03:33,990
tracking bugs down uh but you know they
just

198
00:03:33,990 --> 00:03:34,000
just
 

199
00:03:34,000 --> 00:03:36,630
just
they do take time uh if they're helping

200
00:03:36,630 --> 00:03:36,640
they do take time uh if they're helping
 

201
00:03:36,640 --> 00:03:38,149
they do take time uh if they're helping
you you know the

202
00:03:38,149 --> 00:03:38,159
you you know the
 

203
00:03:38,159 --> 00:03:41,670
you you know the
uh it tends to be hard too because

204
00:03:41,670 --> 00:03:41,680
uh it tends to be hard too because
 

205
00:03:41,680 --> 00:03:43,430
uh it tends to be hard too because
there's some small fracking of code

206
00:03:43,430 --> 00:03:43,440
there's some small fracking of code
 

207
00:03:43,440 --> 00:03:45,110
there's some small fracking of code
there's one detail something probably

208
00:03:45,110 --> 00:03:45,120
there's one detail something probably
 

209
00:03:45,120 --> 00:03:46,949
there's one detail something probably
wrong and they're figuring out actually

210
00:03:46,949 --> 00:03:46,959
wrong and they're figuring out actually
 

211
00:03:46,959 --> 00:03:47,670
wrong and they're figuring out actually
what that little

212
00:03:47,670 --> 00:03:47,680
what that little
 

213
00:03:47,680 --> 00:03:50,390
what that little
detail is uh it's not that easy uh of

214
00:03:50,390 --> 00:03:50,400
detail is uh it's not that easy uh of
 

215
00:03:50,400 --> 00:03:51,750
detail is uh it's not that easy uh of
course you know some of the problems

216
00:03:51,750 --> 00:03:51,760
course you know some of the problems
 

217
00:03:51,760 --> 00:03:53,350
course you know some of the problems
we've seen before and we recognize you

218
00:03:53,350 --> 00:03:53,360
we've seen before and we recognize you
 

219
00:03:53,360 --> 00:03:54,710
we've seen before and we recognize you
know for example we didn't make the same

220
00:03:54,710 --> 00:03:54,720
know for example we didn't make the same
 

221
00:03:54,720 --> 00:03:55,990
know for example we didn't make the same
mistake ourselves

222
00:03:55,990 --> 00:03:56,000
mistake ourselves
 

223
00:03:56,000 --> 00:03:57,750
mistake ourselves
uh but other ones you know you

224
00:03:57,750 --> 00:03:57,760
uh but other ones you know you
 

225
00:03:57,760 --> 00:03:59,350
uh but other ones you know you
discovered all kinds of different ways

226
00:03:59,350 --> 00:03:59,360
discovered all kinds of different ways
 

227
00:03:59,360 --> 00:04:01,030
discovered all kinds of different ways
of sort of breaking the kernel

228
00:04:01,030 --> 00:04:01,040
of sort of breaking the kernel
 

229
00:04:01,040 --> 00:04:04,070
of sort of breaking the kernel
uh that we hadn't seen before

230
00:04:04,070 --> 00:04:04,080
uh that we hadn't seen before
 

231
00:04:04,080 --> 00:04:06,869
uh that we hadn't seen before
so this is just heart and i think this

232
00:04:06,869 --> 00:04:06,879
so this is just heart and i think this
 

233
00:04:06,879 --> 00:04:07,670
so this is just heart and i think this
is a you know

234
00:04:07,670 --> 00:04:07,680
is a you know
 

235
00:04:07,680 --> 00:04:11,429
is a you know
our in our experience um

236
00:04:11,429 --> 00:04:11,439
our in our experience um
 

237
00:04:11,439 --> 00:04:13,589
our in our experience um
this is historically always hard with a

238
00:04:13,589 --> 00:04:13,599
this is historically always hard with a
 

239
00:04:13,599 --> 00:04:19,430
this is historically always hard with a
virtual memory

240
00:04:19,430 --> 00:04:19,440

 

241
00:04:19,440 --> 00:04:22,230

so every time the first virtual memory

242
00:04:22,230 --> 00:04:22,240
so every time the first virtual memory
 

243
00:04:22,240 --> 00:04:22,629
so every time the first virtual memory
lock

244
00:04:22,629 --> 00:04:22,639
lock
 

245
00:04:22,639 --> 00:04:24,950
lock
you know comes around either in sov1 or

246
00:04:24,950 --> 00:04:24,960
you know comes around either in sov1 or
 

247
00:04:24,960 --> 00:04:27,670
you know comes around either in sov1 or
its predecessor in 6828

248
00:04:27,670 --> 00:04:27,680
its predecessor in 6828
 

249
00:04:27,680 --> 00:04:29,270
its predecessor in 6828
it has to be the case that you know that

250
00:04:29,270 --> 00:04:29,280
it has to be the case that you know that
 

251
00:04:29,280 --> 00:04:31,030
it has to be the case that you know that
tends to be the hardest lap

252
00:04:31,030 --> 00:04:31,040
tends to be the hardest lap
 

253
00:04:31,040 --> 00:04:34,150
tends to be the hardest lap
uh uh of all the labs and

254
00:04:34,150 --> 00:04:34,160
uh uh of all the labs and
 

255
00:04:34,160 --> 00:04:35,749
uh uh of all the labs and
you know for a number of reasons one you

256
00:04:35,749 --> 00:04:35,759
you know for a number of reasons one you
 

257
00:04:35,759 --> 00:04:38,150
you know for a number of reasons one you
know the harsh environment you know the

258
00:04:38,150 --> 00:04:38,160
know the harsh environment you know the
 

259
00:04:38,160 --> 00:04:41,990
know the harsh environment you know the
uh the bugs are spectacular and uh

260
00:04:41,990 --> 00:04:42,000
uh the bugs are spectacular and uh
 

261
00:04:42,000 --> 00:04:43,350
uh the bugs are spectacular and uh
partly because you know you haven't had

262
00:04:43,350 --> 00:04:43,360
partly because you know you haven't had
 

263
00:04:43,360 --> 00:04:44,870
partly because you know you haven't had
that much kernel programming experience

264
00:04:44,870 --> 00:04:44,880
that much kernel programming experience
 

265
00:04:44,880 --> 00:04:46,710
that much kernel programming experience
yet and so this is sort of the first lap

266
00:04:46,710 --> 00:04:46,720
yet and so this is sort of the first lap
 

267
00:04:46,720 --> 00:04:48,629
yet and so this is sort of the first lap
with all those things come together

268
00:04:48,629 --> 00:04:48,639
with all those things come together
 

269
00:04:48,639 --> 00:04:50,310
with all those things come together
uh this year we tried to make the lab

270
00:04:50,310 --> 00:04:50,320
uh this year we tried to make the lab
 

271
00:04:50,320 --> 00:04:52,390
uh this year we tried to make the lab
simpler uh in fact this is a new lab

272
00:04:52,390 --> 00:04:52,400
simpler uh in fact this is a new lab
 

273
00:04:52,400 --> 00:04:55,590
simpler uh in fact this is a new lab
uh last week we did not have that lab uh

274
00:04:55,590 --> 00:04:55,600
uh last week we did not have that lab uh
 

275
00:04:55,600 --> 00:04:57,110
uh last week we did not have that lab uh
in the hopes to actually make this

276
00:04:57,110 --> 00:04:57,120
in the hopes to actually make this
 

277
00:04:57,120 --> 00:04:59,270
in the hopes to actually make this
introduction or the transition into

278
00:04:59,270 --> 00:04:59,280
introduction or the transition into
 

279
00:04:59,280 --> 00:05:02,070
introduction or the transition into
virtual memory easier uh in in some ways

280
00:05:02,070 --> 00:05:02,080
virtual memory easier uh in in some ways
 

281
00:05:02,080 --> 00:05:02,550
virtual memory easier uh in in some ways
i think it's

282
00:05:02,550 --> 00:05:02,560
i think it's
 

283
00:05:02,560 --> 00:05:04,070
i think it's
successful in other ways you know it's

284
00:05:04,070 --> 00:05:04,080
successful in other ways you know it's
 

285
00:05:04,080 --> 00:05:05,909
successful in other ways you know it's
still hard uh and so we don't really

286
00:05:05,909 --> 00:05:05,919
still hard uh and so we don't really
 

287
00:05:05,919 --> 00:05:07,749
still hard uh and so we don't really
know maybe about the easiest way of

288
00:05:07,749 --> 00:05:07,759
know maybe about the easiest way of
 

289
00:05:07,759 --> 00:05:08,629
know maybe about the easiest way of
actually

290
00:05:08,629 --> 00:05:08,639
actually
 

291
00:05:08,639 --> 00:05:10,310
actually
introducing virtual memory programming

292
00:05:10,310 --> 00:05:10,320
introducing virtual memory programming
 

293
00:05:10,320 --> 00:05:11,749
introducing virtual memory programming
is

294
00:05:11,749 --> 00:05:11,759
is
 

295
00:05:11,759 --> 00:05:15,990
is
lab number the lab next week the lazy

296
00:05:15,990 --> 00:05:16,000
lab number the lab next week the lazy
 

297
00:05:16,000 --> 00:05:16,390
lab number the lab next week the lazy
lab

298
00:05:16,390 --> 00:05:16,400
lab
 

299
00:05:16,400 --> 00:05:18,629
lab
is in the lab that used to be the first

300
00:05:18,629 --> 00:05:18,639
is in the lab that used to be the first
 

301
00:05:18,639 --> 00:05:20,150
is in the lab that used to be the first
virtual memory lab

302
00:05:20,150 --> 00:05:20,160
virtual memory lab
 

303
00:05:20,160 --> 00:05:22,150
virtual memory lab
and my suspicion is that you'll find

304
00:05:22,150 --> 00:05:22,160
and my suspicion is that you'll find
 

305
00:05:22,160 --> 00:05:23,350
and my suspicion is that you'll find
that this year

306
00:05:23,350 --> 00:05:23,360
that this year
 

307
00:05:23,360 --> 00:05:25,590
that this year
a lot easier than the students founded

308
00:05:25,590 --> 00:05:25,600
a lot easier than the students founded
 

309
00:05:25,600 --> 00:05:26,550
a lot easier than the students founded
last year

310
00:05:26,550 --> 00:05:26,560
last year
 

311
00:05:26,560 --> 00:05:27,830
last year
because you now have much more

312
00:05:27,830 --> 00:05:27,840
because you now have much more
 

313
00:05:27,840 --> 00:05:32,950
because you now have much more
background in virtual memory

314
00:05:32,950 --> 00:05:32,960

 

315
00:05:32,960 --> 00:05:35,749

okay so that's uh maybe there's a good

316
00:05:35,749 --> 00:05:35,759
okay so that's uh maybe there's a good
 

317
00:05:35,759 --> 00:05:37,350
okay so that's uh maybe there's a good
point to stock this is like a couple

318
00:05:37,350 --> 00:05:37,360
point to stock this is like a couple
 

319
00:05:37,360 --> 00:05:38,710
point to stock this is like a couple
high level points i wanted to make

320
00:05:38,710 --> 00:05:38,720
high level points i wanted to make
 

321
00:05:38,720 --> 00:05:39,350
high level points i wanted to make
before

322
00:05:39,350 --> 00:05:39,360
before
 

323
00:05:39,360 --> 00:05:41,830
before
jumping into uh the more technical uh

324
00:05:41,830 --> 00:05:41,840
jumping into uh the more technical uh
 

325
00:05:41,840 --> 00:05:43,350
jumping into uh the more technical uh
more the details so if you have any

326
00:05:43,350 --> 00:05:43,360
more the details so if you have any
 

327
00:05:43,360 --> 00:05:44,550
more the details so if you have any
questions it's a great

328
00:05:44,550 --> 00:05:44,560
questions it's a great
 

329
00:05:44,560 --> 00:05:51,430
questions it's a great
time to ask questions

330
00:05:51,430 --> 00:05:51,440

 

331
00:05:51,440 --> 00:05:55,189

okay um then let's uh

332
00:05:55,189 --> 00:05:55,199
okay um then let's uh
 

333
00:05:55,199 --> 00:05:57,189
okay um then let's uh
quickly uh you know some of you asked

334
00:05:57,189 --> 00:05:57,199
quickly uh you know some of you asked
 

335
00:05:57,199 --> 00:05:59,110
quickly uh you know some of you asked
for this uh very quick review

336
00:05:59,110 --> 00:05:59,120
for this uh very quick review
 

337
00:05:59,120 --> 00:06:01,110
for this uh very quick review
exactly what you know where uh you know

338
00:06:01,110 --> 00:06:01,120
exactly what you know where uh you know
 

339
00:06:01,120 --> 00:06:03,350
exactly what you know where uh you know
what the sort of the setting is

340
00:06:03,350 --> 00:06:03,360
what the sort of the setting is
 

341
00:06:03,360 --> 00:06:07,029
what the sort of the setting is
um and so basically the setting is page

342
00:06:07,029 --> 00:06:07,039
um and so basically the setting is page
 

343
00:06:07,039 --> 00:06:11,270
um and so basically the setting is page
tables

344
00:06:11,270 --> 00:06:11,280

 

345
00:06:11,280 --> 00:06:14,150

and again we have physical memory i will

346
00:06:14,150 --> 00:06:14,160
and again we have physical memory i will
 

347
00:06:14,160 --> 00:06:15,510
and again we have physical memory i will
drive here on the

348
00:06:15,510 --> 00:06:15,520
drive here on the
 

349
00:06:15,520 --> 00:06:18,390
drive here on the
right side uh we know the physical

350
00:06:18,390 --> 00:06:18,400
right side uh we know the physical
 

351
00:06:18,400 --> 00:06:19,029
right side uh we know the physical
memory

352
00:06:19,029 --> 00:06:19,039
memory
 

353
00:06:19,039 --> 00:06:23,830
memory
uh consists of partly about devices

354
00:06:23,830 --> 00:06:23,840
uh consists of partly about devices
 

355
00:06:23,840 --> 00:06:28,710
uh consists of partly about devices
and they live you know above this ox

356
00:06:28,710 --> 00:06:28,720
and they live you know above this ox
 

357
00:06:28,720 --> 00:06:31,189
and they live you know above this ox
you know zero zero and many many more

358
00:06:31,189 --> 00:06:31,199
you know zero zero and many many more
 

359
00:06:31,199 --> 00:06:32,390
you know zero zero and many many more
generals

360
00:06:32,390 --> 00:06:32,400
generals
 

361
00:06:32,400 --> 00:06:37,749
generals
and then here basically d ram chips

362
00:06:37,749 --> 00:06:37,759

 

363
00:06:37,759 --> 00:06:40,230

and we know that the qmu actually puts

364
00:06:40,230 --> 00:06:40,240
and we know that the qmu actually puts
 

365
00:06:40,240 --> 00:06:41,990
and we know that the qmu actually puts
the kernel the kernel text and data

366
00:06:41,990 --> 00:06:42,000
the kernel the kernel text and data
 

367
00:06:42,000 --> 00:06:45,749
the kernel the kernel text and data
you know right you know here at the

368
00:06:45,749 --> 00:06:45,759
you know right you know here at the
 

369
00:06:45,759 --> 00:06:48,710
you know right you know here at the
bot above ox00 so this is where the

370
00:06:48,710 --> 00:06:48,720
bot above ox00 so this is where the
 

371
00:06:48,720 --> 00:06:49,749
bot above ox00 so this is where the
kernel lives

372
00:06:49,749 --> 00:06:49,759
kernel lives
 

373
00:06:49,759 --> 00:06:51,990
kernel lives
and you know one way maybe let me erase

374
00:06:51,990 --> 00:06:52,000
and you know one way maybe let me erase
 

375
00:06:52,000 --> 00:06:52,950
and you know one way maybe let me erase
this a little bit

376
00:06:52,950 --> 00:06:52,960
this a little bit
 

377
00:06:52,960 --> 00:06:55,029
this a little bit
and use the kernel and you know

378
00:06:55,029 --> 00:06:55,039
and use the kernel and you know
 

379
00:06:55,039 --> 00:06:56,390
and use the kernel and you know
basically literally what it means you

380
00:06:56,390 --> 00:06:56,400
basically literally what it means you
 

381
00:06:56,400 --> 00:06:57,830
basically literally what it means you
know what this is what the kernel is and

382
00:06:57,830 --> 00:06:57,840
know what this is what the kernel is and
 

383
00:06:57,840 --> 00:07:01,189
know what this is what the kernel is and
these are the

384
00:07:01,189 --> 00:07:01,199

 

385
00:07:01,199 --> 00:07:03,029

and the instructions versions of the

386
00:07:03,029 --> 00:07:03,039
and the instructions versions of the
 

387
00:07:03,039 --> 00:07:04,230
and the instructions versions of the
assembly instructions

388
00:07:04,230 --> 00:07:04,240
assembly instructions
 

389
00:07:04,240 --> 00:07:06,629
assembly instructions
that you have seen and there's also some

390
00:07:06,629 --> 00:07:06,639
that you have seen and there's also some
 

391
00:07:06,639 --> 00:07:07,510
that you have seen and there's also some
data

392
00:07:07,510 --> 00:07:07,520
data
 

393
00:07:07,520 --> 00:07:12,629
data
structures located at these addresses

394
00:07:12,629 --> 00:07:12,639
structures located at these addresses
 

395
00:07:12,639 --> 00:07:14,950
structures located at these addresses
okay so that's the memory part of it and

396
00:07:14,950 --> 00:07:14,960
okay so that's the memory part of it and
 

397
00:07:14,960 --> 00:07:16,870
okay so that's the memory part of it and
then on the other side

398
00:07:16,870 --> 00:07:16,880
then on the other side
 

399
00:07:16,880 --> 00:07:19,589
then on the other side
we got our cpu that executes

400
00:07:19,589 --> 00:07:19,599
we got our cpu that executes
 

401
00:07:19,599 --> 00:07:20,390
we got our cpu that executes
instructions

402
00:07:20,390 --> 00:07:20,400
instructions
 

403
00:07:20,400 --> 00:07:22,710
instructions
and so the cpu has a bunch of internal

404
00:07:22,710 --> 00:07:22,720
and so the cpu has a bunch of internal
 

405
00:07:22,720 --> 00:07:24,550
and so the cpu has a bunch of internal
state

406
00:07:24,550 --> 00:07:24,560
state
 

407
00:07:24,560 --> 00:07:27,270
state
and has some registers you know whatever

408
00:07:27,270 --> 00:07:27,280
and has some registers you know whatever
 

409
00:07:27,280 --> 00:07:28,390
and has some registers you know whatever
x0 or

410
00:07:28,390 --> 00:07:28,400
x0 or
 

411
00:07:28,400 --> 00:07:31,510
x0 or
r0 blah blah blah blah and you know

412
00:07:31,510 --> 00:07:31,520
r0 blah blah blah blah and you know
 

413
00:07:31,520 --> 00:07:33,830
r0 blah blah blah blah and you know
maybe the program counter

414
00:07:33,830 --> 00:07:33,840
maybe the program counter
 

415
00:07:33,840 --> 00:07:36,309
maybe the program counter
and you know when xv6 starts you know

416
00:07:36,309 --> 00:07:36,319
and you know when xv6 starts you know
 

417
00:07:36,319 --> 00:07:37,749
and you know when xv6 starts you know
the

418
00:07:37,749 --> 00:07:37,759
the
 

419
00:07:37,759 --> 00:07:40,189
the
proven counter contains this value oh

420
00:07:40,189 --> 00:07:40,199
proven counter contains this value oh
 

421
00:07:40,199 --> 00:07:41,909
proven counter contains this value oh
x000

422
00:07:41,909 --> 00:07:41,919
x000
 

423
00:07:41,919 --> 00:07:45,430
x000
um and um uh

424
00:07:45,430 --> 00:07:45,440
um and um uh
 

425
00:07:45,440 --> 00:07:47,350
um and um uh
and that's the way you know the cpu

426
00:07:47,350 --> 00:07:47,360
and that's the way you know the cpu
 

427
00:07:47,360 --> 00:07:48,869
and that's the way you know the cpu
knows that basically you know look at

428
00:07:48,869 --> 00:07:48,879
knows that basically you know look at
 

429
00:07:48,879 --> 00:07:49,990
knows that basically you know look at
that address to find

430
00:07:49,990 --> 00:07:50,000
that address to find
 

431
00:07:50,000 --> 00:07:51,270
that address to find
you know the first instruction that

432
00:07:51,270 --> 00:07:51,280
you know the first instruction that
 

433
00:07:51,280 --> 00:07:52,790
you know the first instruction that
looks at the first instruction decodes

434
00:07:52,790 --> 00:07:52,800
looks at the first instruction decodes
 

435
00:07:52,800 --> 00:07:53,830
looks at the first instruction decodes
the instruction

436
00:07:53,830 --> 00:07:53,840
the instruction
 

437
00:07:53,840 --> 00:07:55,749
the instruction
and updates whatever cpu state that

438
00:07:55,749 --> 00:07:55,759
and updates whatever cpu state that
 

439
00:07:55,759 --> 00:07:58,230
and updates whatever cpu state that
needs to be updated

440
00:07:58,230 --> 00:07:58,240
needs to be updated
 

441
00:07:58,240 --> 00:08:00,150
needs to be updated
uh you know page tables add sort of a

442
00:08:00,150 --> 00:08:00,160
uh you know page tables add sort of a
 

443
00:08:00,160 --> 00:08:01,350
uh you know page tables add sort of a
component to it

444
00:08:01,350 --> 00:08:01,360
component to it
 

445
00:08:01,360 --> 00:08:03,029
component to it
uh you know the addresses you know that

446
00:08:03,029 --> 00:08:03,039
uh you know the addresses you know that
 

447
00:08:03,039 --> 00:08:05,589
uh you know the addresses you know that
the cpu uh

448
00:08:05,589 --> 00:08:05,599
the cpu uh
 

449
00:08:05,599 --> 00:08:08,309
the cpu uh
uh others or the instructions or part of

450
00:08:08,309 --> 00:08:08,319
uh others or the instructions or part of
 

451
00:08:08,319 --> 00:08:09,350
uh others or the instructions or part of
the instructions

452
00:08:09,350 --> 00:08:09,360
the instructions
 

453
00:08:09,360 --> 00:08:10,869
the instructions
like you know jump to some particular

454
00:08:10,869 --> 00:08:10,879
like you know jump to some particular
 

455
00:08:10,879 --> 00:08:13,189
like you know jump to some particular
address you know those addresses

456
00:08:13,189 --> 00:08:13,199
address you know those addresses
 

457
00:08:13,199 --> 00:08:15,670
address you know those addresses
are typically or most commonly or there

458
00:08:15,670 --> 00:08:15,680
are typically or most commonly or there
 

459
00:08:15,680 --> 00:08:16,309
are typically or most commonly or there
will be

460
00:08:16,309 --> 00:08:16,319
will be
 

461
00:08:16,319 --> 00:08:19,350
will be
virtual addresses and those virtual

462
00:08:19,350 --> 00:08:19,360
virtual addresses and those virtual
 

463
00:08:19,360 --> 00:08:19,990
virtual addresses and those virtual
dresses

464
00:08:19,990 --> 00:08:20,000
dresses
 

465
00:08:20,000 --> 00:08:21,909
dresses
go to that proven you know something

466
00:08:21,909 --> 00:08:21,919
go to that proven you know something
 

467
00:08:21,919 --> 00:08:24,070
go to that proven you know something
typically called the mmu

468
00:08:24,070 --> 00:08:24,080
typically called the mmu
 

469
00:08:24,080 --> 00:08:25,830
typically called the mmu
and then you translate it to physical

470
00:08:25,830 --> 00:08:25,840
and then you translate it to physical
 

471
00:08:25,840 --> 00:08:27,830
and then you translate it to physical
addresses

472
00:08:27,830 --> 00:08:27,840
addresses
 

473
00:08:27,840 --> 00:08:31,029
addresses
uh and uh that is allows us to index

474
00:08:31,029 --> 00:08:31,039
uh and uh that is allows us to index
 

475
00:08:31,039 --> 00:08:31,990
uh and uh that is allows us to index
into

476
00:08:31,990 --> 00:08:32,000
into
 

477
00:08:32,000 --> 00:08:34,790
into
either the i o part of the memory or the

478
00:08:34,790 --> 00:08:34,800
either the i o part of the memory or the
 

479
00:08:34,800 --> 00:08:37,029
either the i o part of the memory or the
dram part the memory

480
00:08:37,029 --> 00:08:37,039
dram part the memory
 

481
00:08:37,039 --> 00:08:40,709
dram part the memory
um the uh to control

482
00:08:40,709 --> 00:08:40,719
um the uh to control
 

483
00:08:40,719 --> 00:08:42,389
um the uh to control
how this translation happens you know

484
00:08:42,389 --> 00:08:42,399
how this translation happens you know
 

485
00:08:42,399 --> 00:08:46,550
how this translation happens you know
there's this satp register

486
00:08:46,550 --> 00:08:46,560

 

487
00:08:46,560 --> 00:08:50,790

which contains uh the root of the

488
00:08:50,790 --> 00:08:50,800
which contains uh the root of the
 

489
00:08:50,800 --> 00:08:52,710
which contains uh the root of the
page table of the current running page

490
00:08:52,710 --> 00:08:52,720
page table of the current running page
 

491
00:08:52,720 --> 00:08:55,350
page table of the current running page
table and if there's zero

492
00:08:55,350 --> 00:08:55,360
table and if there's zero
 

493
00:08:55,360 --> 00:08:57,190
table and if there's zero
then there's basically no translation

494
00:08:57,190 --> 00:08:57,200
then there's basically no translation
 

495
00:08:57,200 --> 00:08:58,870
then there's basically no translation
going on and

496
00:08:58,870 --> 00:08:58,880
going on and
 

497
00:08:58,880 --> 00:09:00,470
going on and
uh the virtual address is literally

498
00:09:00,470 --> 00:09:00,480
uh the virtual address is literally
 

499
00:09:00,480 --> 00:09:02,150
uh the virtual address is literally
directly a physical address so when the

500
00:09:02,150 --> 00:09:02,160
directly a physical address so when the
 

501
00:09:02,160 --> 00:09:04,070
directly a physical address so when the
processor actually starts up

502
00:09:04,070 --> 00:09:04,080
processor actually starts up
 

503
00:09:04,080 --> 00:09:06,070
processor actually starts up
there's no value in satp and so when the

504
00:09:06,070 --> 00:09:06,080
there's no value in satp and so when the
 

505
00:09:06,080 --> 00:09:07,110
there's no value in satp and so when the
program counter

506
00:09:07,110 --> 00:09:07,120
program counter
 

507
00:09:07,120 --> 00:09:09,590
program counter
as an ox xox you know basically the

508
00:09:09,590 --> 00:09:09,600
as an ox xox you know basically the
 

509
00:09:09,600 --> 00:09:11,509
as an ox xox you know basically the
physical address is also integrated

510
00:09:11,509 --> 00:09:11,519
physical address is also integrated
 

511
00:09:11,519 --> 00:09:13,509
physical address is also integrated
and basically the product the cpu

512
00:09:13,509 --> 00:09:13,519
and basically the product the cpu
 

513
00:09:13,519 --> 00:09:14,710
and basically the product the cpu
fetches the instruction

514
00:09:14,710 --> 00:09:14,720
fetches the instruction
 

515
00:09:14,720 --> 00:09:17,190
fetches the instruction
you know from that particular location

516
00:09:17,190 --> 00:09:17,200
you know from that particular location
 

517
00:09:17,200 --> 00:09:19,670
you know from that particular location
as soon as you know the

518
00:09:19,670 --> 00:09:19,680
as soon as you know the
 

519
00:09:19,680 --> 00:09:22,150
as soon as you know the
uh as soon as the satp actually contains

520
00:09:22,150 --> 00:09:22,160
uh as soon as the satp actually contains
 

521
00:09:22,160 --> 00:09:23,990
uh as soon as the satp actually contains
a non-zero value

522
00:09:23,990 --> 00:09:24,000
a non-zero value
 

523
00:09:24,000 --> 00:09:27,030
a non-zero value
then uh you know for example maybe

524
00:09:27,030 --> 00:09:27,040
then uh you know for example maybe
 

525
00:09:27,040 --> 00:09:29,269
then uh you know for example maybe
uh so somewhere in here it's like

526
00:09:29,269 --> 00:09:29,279
uh so somewhere in here it's like
 

527
00:09:29,279 --> 00:09:30,389
uh so somewhere in here it's like
drawing make something extend the

528
00:09:30,389 --> 00:09:30,399
drawing make something extend the
 

529
00:09:30,399 --> 00:09:31,750
drawing make something extend the
picture a little bit further

530
00:09:31,750 --> 00:09:31,760
picture a little bit further
 

531
00:09:31,760 --> 00:09:34,630
picture a little bit further
uh we know that the kernel actually has

532
00:09:34,630 --> 00:09:34,640
uh we know that the kernel actually has
 

533
00:09:34,640 --> 00:09:35,990
uh we know that the kernel actually has
a maximum of

534
00:09:35,990 --> 00:09:36,000
a maximum of
 

535
00:09:36,000 --> 00:09:39,269
a maximum of
128 megabytes and so basically this is

536
00:09:39,269 --> 00:09:39,279
128 megabytes and so basically this is
 

537
00:09:39,279 --> 00:09:39,750
128 megabytes and so basically this is
all

538
00:09:39,750 --> 00:09:39,760
all
 

539
00:09:39,760 --> 00:09:42,949
all
free memory from here to there

540
00:09:42,949 --> 00:09:42,959
free memory from here to there
 

541
00:09:42,959 --> 00:09:46,389
free memory from here to there
is free memory and free memory is

542
00:09:46,389 --> 00:09:46,399
is free memory and free memory is
 

543
00:09:46,399 --> 00:09:49,350
is free memory and free memory is
putting on the list in catalog.c as

544
00:09:49,350 --> 00:09:49,360
putting on the list in catalog.c as
 

545
00:09:49,360 --> 00:09:50,949
putting on the list in catalog.c as
you've seen before

546
00:09:50,949 --> 00:09:50,959
you've seen before
 

547
00:09:50,959 --> 00:09:53,990
you've seen before
and so somewhere in here is also the

548
00:09:53,990 --> 00:09:54,000
and so somewhere in here is also the
 

549
00:09:54,000 --> 00:09:54,949
and so somewhere in here is also the
root page table

550
00:09:54,949 --> 00:09:54,959
root page table
 

551
00:09:54,959 --> 00:09:57,110
root page table
for you know a kernel page table so

552
00:09:57,110 --> 00:09:57,120
for you know a kernel page table so
 

553
00:09:57,120 --> 00:09:58,710
for you know a kernel page table so
maybe here's home page

554
00:09:58,710 --> 00:09:58,720
maybe here's home page
 

555
00:09:58,720 --> 00:10:02,069
maybe here's home page
and that is the root

556
00:10:02,069 --> 00:10:02,079

 

557
00:10:02,079 --> 00:10:06,230

page table directory

558
00:10:06,230 --> 00:10:06,240
page table directory
 

559
00:10:06,240 --> 00:10:08,790
page table directory
uh and as soon as we load that value you

560
00:10:08,790 --> 00:10:08,800
uh and as soon as we load that value you
 

561
00:10:08,800 --> 00:10:09,670
uh and as soon as we load that value you
know the address

562
00:10:09,670 --> 00:10:09,680
know the address
 

563
00:10:09,680 --> 00:10:11,430
know the address
of the physical address of that value

564
00:10:11,430 --> 00:10:11,440
of the physical address of that value
 

565
00:10:11,440 --> 00:10:13,110
of the physical address of that value
into the sap address

566
00:10:13,110 --> 00:10:13,120
into the sap address
 

567
00:10:13,120 --> 00:10:15,430
into the sap address
and register so let's say this and maybe

568
00:10:15,430 --> 00:10:15,440
and register so let's say this and maybe
 

569
00:10:15,440 --> 00:10:16,829
and register so let's say this and maybe
this address is

570
00:10:16,829 --> 00:10:16,839
this address is
 

571
00:10:16,839 --> 00:10:20,310
this address is
ox 7 you know ff

572
00:10:20,310 --> 00:10:20,320
ox 7 you know ff
 

573
00:10:20,320 --> 00:10:22,630
ox 7 you know ff
blah blah blah something just below 120

574
00:10:22,630 --> 00:10:22,640
blah blah blah something just below 120
 

575
00:10:22,640 --> 00:10:24,630
blah blah blah something just below 120
mega megabytes so in that free space of

576
00:10:24,630 --> 00:10:24,640
mega megabytes so in that free space of
 

577
00:10:24,640 --> 00:10:25,430
mega megabytes so in that free space of
memory

578
00:10:25,430 --> 00:10:25,440
memory
 

579
00:10:25,440 --> 00:10:28,630
memory
reload that address in satp

580
00:10:28,630 --> 00:10:28,640
reload that address in satp
 

581
00:10:28,640 --> 00:10:31,990
reload that address in satp
then at that point

582
00:10:31,990 --> 00:10:32,000
then at that point
 

583
00:10:32,000 --> 00:10:35,590
then at that point
you know the processor or the mmu will

584
00:10:35,590 --> 00:10:35,600
you know the processor or the mmu will
 

585
00:10:35,600 --> 00:10:37,350
you know the processor or the mmu will
use the root page tables to actually do

586
00:10:37,350 --> 00:10:37,360
use the root page tables to actually do
 

587
00:10:37,360 --> 00:10:39,269
use the root page tables to actually do
the translation you know from virtual to

588
00:10:39,269 --> 00:10:39,279
the translation you know from virtual to
 

589
00:10:39,279 --> 00:10:41,590
the translation you know from virtual to
physical address

590
00:10:41,590 --> 00:10:41,600
physical address
 

591
00:10:41,600 --> 00:10:43,190
physical address
um and you can think of this you know

592
00:10:43,190 --> 00:10:43,200
um and you can think of this you know
 

593
00:10:43,200 --> 00:10:45,030
um and you can think of this you know
this particular whole thing

594
00:10:45,030 --> 00:10:45,040
this particular whole thing
 

595
00:10:45,040 --> 00:10:47,269
this particular whole thing
sort of being a single sort of box you

596
00:10:47,269 --> 00:10:47,279
sort of being a single sort of box you
 

597
00:10:47,279 --> 00:10:48,310
sort of being a single sort of box you
know integrated

598
00:10:48,310 --> 00:10:48,320
know integrated
 

599
00:10:48,320 --> 00:10:51,670
know integrated
you know uh together

600
00:10:51,670 --> 00:10:51,680
you know uh together
 

601
00:10:51,680 --> 00:10:53,030
you know uh together
any sort of questions about this high

602
00:10:53,030 --> 00:10:53,040
any sort of questions about this high
 

603
00:10:53,040 --> 00:10:56,630
any sort of questions about this high
level picture before uh

604
00:10:56,630 --> 00:10:56,640
level picture before uh
 

605
00:10:56,640 --> 00:10:58,389
level picture before uh
keep them going so one of the key points

606
00:10:58,389 --> 00:10:58,399
keep them going so one of the key points
 

607
00:10:58,399 --> 00:11:00,150
keep them going so one of the key points
that sort of remember here is that the

608
00:11:00,150 --> 00:11:00,160
that sort of remember here is that the
 

609
00:11:00,160 --> 00:11:02,150
that sort of remember here is that the
page statements themselves also live in

610
00:11:02,150 --> 00:11:02,160
page statements themselves also live in
 

611
00:11:02,160 --> 00:11:08,470
page statements themselves also live in
memory

612
00:11:08,470 --> 00:11:08,480

 

613
00:11:08,480 --> 00:11:11,910

okay okay so let's uh

614
00:11:11,910 --> 00:11:11,920
okay okay so let's uh
 

615
00:11:11,920 --> 00:11:15,190
okay okay so let's uh
jump down to uh

616
00:11:15,190 --> 00:11:15,200
jump down to uh
 

617
00:11:15,200 --> 00:11:17,670
jump down to uh
the first part of the page table app

618
00:11:17,670 --> 00:11:17,680
the first part of the page table app
 

619
00:11:17,680 --> 00:11:19,509
the first part of the page table app
namely

620
00:11:19,509 --> 00:11:19,519
namely
 

621
00:11:19,519 --> 00:11:23,110
namely
part one where you have to print uh

622
00:11:23,110 --> 00:11:23,120
part one where you have to print uh
 

623
00:11:23,120 --> 00:11:27,110
part one where you have to print uh
the page table for the

624
00:11:27,110 --> 00:11:27,120
the page table for the
 

625
00:11:27,120 --> 00:11:31,110
the page table for the
init program and

626
00:11:31,110 --> 00:11:31,120
init program and
 

627
00:11:31,120 --> 00:11:33,509
init program and
and you know explain it basically in

628
00:11:33,509 --> 00:11:33,519
and you know explain it basically in
 

629
00:11:33,519 --> 00:11:34,470
and you know explain it basically in
terms of this

630
00:11:34,470 --> 00:11:34,480
terms of this
 

631
00:11:34,480 --> 00:11:36,389
terms of this
figure three four and the figure three

632
00:11:36,389 --> 00:11:36,399
figure three four and the figure three
 

633
00:11:36,399 --> 00:11:40,230
figure three four and the figure three
fours are right here

634
00:11:40,230 --> 00:11:40,240

 

635
00:11:40,240 --> 00:11:42,870

three four uh and this is figure three

636
00:11:42,870 --> 00:11:42,880
three four uh and this is figure three
 

637
00:11:42,880 --> 00:11:44,630
three four uh and this is figure three
four shows the user address space

638
00:11:44,630 --> 00:11:44,640
four shows the user address space
 

639
00:11:44,640 --> 00:11:46,230
four shows the user address space
so just let's look at the user address

640
00:11:46,230 --> 00:11:46,240
so just let's look at the user address
 

641
00:11:46,240 --> 00:11:47,990
so just let's look at the user address
days for a second before we uh go into

642
00:11:47,990 --> 00:11:48,000
days for a second before we uh go into
 

643
00:11:48,000 --> 00:11:48,790
days for a second before we uh go into
detail

644
00:11:48,790 --> 00:11:48,800
detail
 

645
00:11:48,800 --> 00:11:50,629
detail
uh so we have the text at the bottom so

646
00:11:50,629 --> 00:11:50,639
uh so we have the text at the bottom so
 

647
00:11:50,639 --> 00:11:52,069
uh so we have the text at the bottom so
this is the instructions

648
00:11:52,069 --> 00:11:52,079
this is the instructions
 

649
00:11:52,079 --> 00:11:55,430
this is the instructions
uh of the program starting address zero

650
00:11:55,430 --> 00:11:55,440
uh of the program starting address zero
 

651
00:11:55,440 --> 00:11:58,069
uh of the program starting address zero
above the instructions are you know data

652
00:11:58,069 --> 00:11:58,079
above the instructions are you know data
 

653
00:11:58,079 --> 00:11:59,110
above the instructions are you know data
global variables

654
00:11:59,110 --> 00:11:59,120
global variables
 

655
00:11:59,120 --> 00:12:01,269
global variables
uh live there uh then there is something

656
00:12:01,269 --> 00:12:01,279
uh live there uh then there is something
 

657
00:12:01,279 --> 00:12:02,230
uh live there uh then there is something
called the guard page

658
00:12:02,230 --> 00:12:02,240
called the guard page
 

659
00:12:02,240 --> 00:12:04,230
called the guard page
we'll talk about and then there's the

660
00:12:04,230 --> 00:12:04,240
we'll talk about and then there's the
 

661
00:12:04,240 --> 00:12:05,509
we'll talk about and then there's the
stack of the

662
00:12:05,509 --> 00:12:05,519
stack of the
 

663
00:12:05,519 --> 00:12:07,670
stack of the
user program so the kernel has its own

664
00:12:07,670 --> 00:12:07,680
user program so the kernel has its own
 

665
00:12:07,680 --> 00:12:09,350
user program so the kernel has its own
stack uh but the usual or multiple

666
00:12:09,350 --> 00:12:09,360
stack uh but the usual or multiple
 

667
00:12:09,360 --> 00:12:10,069
stack uh but the usual or multiple
stacks

668
00:12:10,069 --> 00:12:10,079
stacks
 

669
00:12:10,079 --> 00:12:12,150
stacks
uh the user program has its own stack

670
00:12:12,150 --> 00:12:12,160
uh the user program has its own stack
 

671
00:12:12,160 --> 00:12:13,670
uh the user program has its own stack
and above again is basically what's

672
00:12:13,670 --> 00:12:13,680
and above again is basically what's
 

673
00:12:13,680 --> 00:12:14,310
and above again is basically what's
called heap

674
00:12:14,310 --> 00:12:14,320
called heap
 

675
00:12:14,320 --> 00:12:16,069
called heap
memory you know free memory you know

676
00:12:16,069 --> 00:12:16,079
memory you know free memory you know
 

677
00:12:16,079 --> 00:12:18,230
memory you know free memory you know
that we can you know get more

678
00:12:18,230 --> 00:12:18,240
that we can you know get more
 

679
00:12:18,240 --> 00:12:21,030
that we can you know get more
uh memory uh using s-brick so s-break

680
00:12:21,030 --> 00:12:21,040
uh memory uh using s-brick so s-break
 

681
00:12:21,040 --> 00:12:22,949
uh memory uh using s-brick so s-break
basically points to

682
00:12:22,949 --> 00:12:22,959
basically points to
 

683
00:12:22,959 --> 00:12:25,430
basically points to
the top of the user address space and we

684
00:12:25,430 --> 00:12:25,440
the top of the user address space and we
 

685
00:12:25,440 --> 00:12:26,310
the top of the user address space and we
want to grow it

686
00:12:26,310 --> 00:12:26,320
want to grow it
 

687
00:12:26,320 --> 00:12:28,949
want to grow it
we call the s-break system call to grow

688
00:12:28,949 --> 00:12:28,959
we call the s-break system call to grow
 

689
00:12:28,959 --> 00:12:29,750
we call the s-break system call to grow
the

690
00:12:29,750 --> 00:12:29,760
the
 

691
00:12:29,760 --> 00:12:32,710
the
uh grow the top of the to grow the

692
00:12:32,710 --> 00:12:32,720
uh grow the top of the to grow the
 

693
00:12:32,720 --> 00:12:34,069
uh grow the top of the to grow the
bottom part you know up

694
00:12:34,069 --> 00:12:34,079
bottom part you know up
 

695
00:12:34,079 --> 00:12:36,790
bottom part you know up
uh into the heap we also know that at

696
00:12:36,790 --> 00:12:36,800
uh into the heap we also know that at
 

697
00:12:36,800 --> 00:12:37,590
uh into the heap we also know that at
the

698
00:12:37,590 --> 00:12:37,600
the
 

699
00:12:37,600 --> 00:12:39,509
the
top there from the last lecture that

700
00:12:39,509 --> 00:12:39,519
top there from the last lecture that
 

701
00:12:39,519 --> 00:12:41,990
top there from the last lecture that
there are two pages two special pages

702
00:12:41,990 --> 00:12:42,000
there are two pages two special pages
 

703
00:12:42,000 --> 00:12:43,990
there are two pages two special pages
uh the trampoline and the trend frame

704
00:12:43,990 --> 00:12:44,000
uh the trampoline and the trend frame
 

705
00:12:44,000 --> 00:12:45,190
uh the trampoline and the trend frame
track frame page

706
00:12:45,190 --> 00:12:45,200
track frame page
 

707
00:12:45,200 --> 00:12:46,389
track frame page
and the trampoline page you know

708
00:12:46,389 --> 00:12:46,399
and the trampoline page you know
 

709
00:12:46,399 --> 00:12:48,150
and the trampoline page you know
contains these instructions to basically

710
00:12:48,150 --> 00:12:48,160
contains these instructions to basically
 

711
00:12:48,160 --> 00:12:49,910
contains these instructions to basically
transition in and out of the kernel

712
00:12:49,910 --> 00:12:49,920
transition in and out of the kernel
 

713
00:12:49,920 --> 00:12:53,190
transition in and out of the kernel
and the track frame is uh is a

714
00:12:53,190 --> 00:12:53,200
and the track frame is uh is a
 

715
00:12:53,200 --> 00:12:55,430
and the track frame is uh is a
convenient place you know to

716
00:12:55,430 --> 00:12:55,440
convenient place you know to
 

717
00:12:55,440 --> 00:12:57,509
convenient place you know to
store some state and when we jump into

718
00:12:57,509 --> 00:12:57,519
store some state and when we jump into
 

719
00:12:57,519 --> 00:12:58,790
store some state and when we jump into
the uh

720
00:12:58,790 --> 00:12:58,800
the uh
 

721
00:12:58,800 --> 00:13:00,389
the uh
kernel because we need the kernel ones

722
00:13:00,389 --> 00:13:00,399
kernel because we need the kernel ones
 

723
00:13:00,399 --> 00:13:01,910
kernel because we need the kernel ones
that use the registers we can't use the

724
00:13:01,910 --> 00:13:01,920
that use the registers we can't use the
 

725
00:13:01,920 --> 00:13:03,590
that use the registers we can't use the
registers because the user space program

726
00:13:03,590 --> 00:13:03,600
registers because the user space program
 

727
00:13:03,600 --> 00:13:04,310
registers because the user space program
still has them

728
00:13:04,310 --> 00:13:04,320
still has them
 

729
00:13:04,320 --> 00:13:06,870
still has them
in use so i'm not going to talk much

730
00:13:06,870 --> 00:13:06,880
in use so i'm not going to talk much
 

731
00:13:06,880 --> 00:13:08,310
in use so i'm not going to talk much
about the trend frame and the trampoline

732
00:13:08,310 --> 00:13:08,320
about the trend frame and the trampoline
 

733
00:13:08,320 --> 00:13:10,310
about the trend frame and the trampoline
at all but you know they're there

734
00:13:10,310 --> 00:13:10,320
at all but you know they're there
 

735
00:13:10,320 --> 00:13:12,870
at all but you know they're there
um okay so here the this picture a

736
00:13:12,870 --> 00:13:12,880
um okay so here the this picture a
 

737
00:13:12,880 --> 00:13:13,829
um okay so here the this picture a
little bit below

738
00:13:13,829 --> 00:13:13,839
little bit below
 

739
00:13:13,839 --> 00:13:16,870
little bit below
uh you know is actually the uh

740
00:13:16,870 --> 00:13:16,880
uh you know is actually the uh
 

741
00:13:16,880 --> 00:13:20,310
uh you know is actually the uh
the printout from uh when i read it

742
00:13:20,310 --> 00:13:20,320
the printout from uh when i read it
 

743
00:13:20,320 --> 00:13:23,750
the printout from uh when i read it
uh from in it like this the first

744
00:13:23,750 --> 00:13:23,760
uh from in it like this the first
 

745
00:13:23,760 --> 00:13:26,870
uh from in it like this the first
successful call of exec right so like we

746
00:13:26,870 --> 00:13:26,880
successful call of exec right so like we
 

747
00:13:26,880 --> 00:13:28,389
successful call of exec right so like we
know that in a code make some system

748
00:13:28,389 --> 00:13:28,399
know that in a code make some system
 

749
00:13:28,399 --> 00:13:29,590
know that in a code make some system
called exec

750
00:13:29,590 --> 00:13:29,600
called exec
 

751
00:13:29,600 --> 00:13:31,990
called exec
for the program in it and just at the

752
00:13:31,990 --> 00:13:32,000
for the program in it and just at the
 

753
00:13:32,000 --> 00:13:32,870
for the program in it and just at the
end of

754
00:13:32,870 --> 00:13:32,880
end of
 

755
00:13:32,880 --> 00:13:35,269
end of
exit we're printing out that page table

756
00:13:35,269 --> 00:13:35,279
exit we're printing out that page table
 

757
00:13:35,279 --> 00:13:36,550
exit we're printing out that page table
now so there's a couple things that we

758
00:13:36,550 --> 00:13:36,560
now so there's a couple things that we
 

759
00:13:36,560 --> 00:13:37,110
now so there's a couple things that we
uh

760
00:13:37,110 --> 00:13:37,120
uh
 

761
00:13:37,120 --> 00:13:39,189
uh
many things we can observe about this

762
00:13:39,189 --> 00:13:39,199
many things we can observe about this
 

763
00:13:39,199 --> 00:13:41,509
many things we can observe about this
particular page table

764
00:13:41,509 --> 00:13:41,519
particular page table
 

765
00:13:41,519 --> 00:13:44,550
particular page table
so first of all you know we in addition

766
00:13:44,550 --> 00:13:44,560
so first of all you know we in addition
 

767
00:13:44,560 --> 00:13:45,189
so first of all you know we in addition
to

768
00:13:45,189 --> 00:13:45,199
to
 

769
00:13:45,199 --> 00:13:46,790
to
printing out the physical the pte's and

770
00:13:46,790 --> 00:13:46,800
printing out the physical the pte's and
 

771
00:13:46,800 --> 00:13:48,310
printing out the physical the pte's and
the physical addresses i'm also printing

772
00:13:48,310 --> 00:13:48,320
the physical addresses i'm also printing
 

773
00:13:48,320 --> 00:13:50,069
the physical addresses i'm also printing
out the flags

774
00:13:50,069 --> 00:13:50,079
out the flags
 

775
00:13:50,079 --> 00:13:51,990
out the flags
uh and you can see here that here's the

776
00:13:51,990 --> 00:13:52,000
uh and you can see here that here's the
 

777
00:13:52,000 --> 00:13:53,110
uh and you can see here that here's the
flag is one

778
00:13:53,110 --> 00:13:53,120
flag is one
 

779
00:13:53,120 --> 00:13:54,310
flag is one
and it basically says that this

780
00:13:54,310 --> 00:13:54,320
and it basically says that this
 

781
00:13:54,320 --> 00:13:57,910
and it basically says that this
translation or this uh intermediate page

782
00:13:57,910 --> 00:13:57,920
translation or this uh intermediate page
 

783
00:13:57,920 --> 00:14:01,430
translation or this uh intermediate page
is about similar here that is an invalid

784
00:14:01,430 --> 00:14:01,440
is about similar here that is an invalid
 

785
00:14:01,440 --> 00:14:02,870
is about similar here that is an invalid
independent page and they basically

786
00:14:02,870 --> 00:14:02,880
independent page and they basically
 

787
00:14:02,880 --> 00:14:04,790
independent page and they basically
correspond you know to the

788
00:14:04,790 --> 00:14:04,800
correspond you know to the
 

789
00:14:04,800 --> 00:14:06,790
correspond you know to the
level two page and then the second one

790
00:14:06,790 --> 00:14:06,800
level two page and then the second one
 

791
00:14:06,800 --> 00:14:08,710
level two page and then the second one
for the corresponds to the level

792
00:14:08,710 --> 00:14:08,720
for the corresponds to the level
 

793
00:14:08,720 --> 00:14:11,990
for the corresponds to the level
uh

794
00:14:11,990 --> 00:14:12,000

 

795
00:14:12,000 --> 00:14:13,750

i'm sorry i just screwed the arrows

796
00:14:13,750 --> 00:14:13,760
i'm sorry i just screwed the arrows
 

797
00:14:13,760 --> 00:14:16,790
i'm sorry i just screwed the arrows
wrong so that's why it paused 20 seconds

798
00:14:16,790 --> 00:14:16,800
wrong so that's why it paused 20 seconds
 

799
00:14:16,800 --> 00:14:19,189
wrong so that's why it paused 20 seconds
okay so the top this is the top level

800
00:14:19,189 --> 00:14:19,199
okay so the top this is the top level
 

801
00:14:19,199 --> 00:14:20,550
okay so the top this is the top level
page table

802
00:14:20,550 --> 00:14:20,560
page table
 

803
00:14:20,560 --> 00:14:22,949
page table
uh this kind of points to this

804
00:14:22,949 --> 00:14:22,959
uh this kind of points to this
 

805
00:14:22,959 --> 00:14:24,629
uh this kind of points to this
particular page table

806
00:14:24,629 --> 00:14:24,639
particular page table
 

807
00:14:24,639 --> 00:14:27,590
particular page table
and then this points to that particular

808
00:14:27,590 --> 00:14:27,600
and then this points to that particular
 

809
00:14:27,600 --> 00:14:29,030
and then this points to that particular
page table

810
00:14:29,030 --> 00:14:29,040
page table
 

811
00:14:29,040 --> 00:14:31,269
page table
or that's the address we're pointing to

812
00:14:31,269 --> 00:14:31,279
or that's the address we're pointing to
 

813
00:14:31,279 --> 00:14:32,069
or that's the address we're pointing to
sort of a short

814
00:14:32,069 --> 00:14:32,079
sort of a short
 

815
00:14:32,079 --> 00:14:34,949
sort of a short
hand for saying uh that is the base

816
00:14:34,949 --> 00:14:34,959
hand for saying uh that is the base
 

817
00:14:34,959 --> 00:14:37,269
hand for saying uh that is the base
address for that particular page

818
00:14:37,269 --> 00:14:37,279
address for that particular page
 

819
00:14:37,279 --> 00:14:39,110
address for that particular page
and as you know each of these pages is

820
00:14:39,110 --> 00:14:39,120
and as you know each of these pages is
 

821
00:14:39,120 --> 00:14:40,870
and as you know each of these pages is
496

822
00:14:40,870 --> 00:14:40,880
496
 

823
00:14:40,880 --> 00:14:43,829
496
bytes uh that's the size of page size

824
00:14:43,829 --> 00:14:43,839
bytes uh that's the size of page size
 

825
00:14:43,839 --> 00:14:45,910
bytes uh that's the size of page size
and so divided by 64

826
00:14:45,910 --> 00:14:45,920
and so divided by 64
 

827
00:14:45,920 --> 00:14:47,509
and so divided by 64
bits you know you get five in the twelve

828
00:14:47,509 --> 00:14:47,519
bits you know you get five in the twelve
 

829
00:14:47,519 --> 00:14:49,189
bits you know you get five in the twelve
entries

830
00:14:49,189 --> 00:14:49,199
entries
 

831
00:14:49,199 --> 00:14:52,389
entries
um okay so we'll see is that the bottom

832
00:14:52,389 --> 00:14:52,399
um okay so we'll see is that the bottom
 

833
00:14:52,399 --> 00:14:53,590
um okay so we'll see is that the bottom
part of this

834
00:14:53,590 --> 00:14:53,600
part of this
 

835
00:14:53,600 --> 00:14:56,870
part of this
address space for init basically has

836
00:14:56,870 --> 00:14:56,880
address space for init basically has
 

837
00:14:56,880 --> 00:15:00,550
address space for init basically has
actually all this has three pages

838
00:15:00,550 --> 00:15:00,560
actually all this has three pages
 

839
00:15:00,560 --> 00:15:03,269
actually all this has three pages
only three pages uh and we've got a

840
00:15:03,269 --> 00:15:03,279
only three pages uh and we've got a
 

841
00:15:03,279 --> 00:15:04,470
only three pages uh and we've got a
couple things that we can

842
00:15:04,470 --> 00:15:04,480
couple things that we can
 

843
00:15:04,480 --> 00:15:07,110
couple things that we can
uh discern from the three pages uh we

844
00:15:07,110 --> 00:15:07,120
uh discern from the three pages uh we
 

845
00:15:07,120 --> 00:15:08,230
uh discern from the three pages uh we
know that the

846
00:15:08,230 --> 00:15:08,240
know that the
 

847
00:15:08,240 --> 00:15:10,470
know that the
so the bottom page which basically

848
00:15:10,470 --> 00:15:10,480
so the bottom page which basically
 

849
00:15:10,480 --> 00:15:12,389
so the bottom page which basically
corresponds to virtual address zero

850
00:15:12,389 --> 00:15:12,399
corresponds to virtual address zero
 

851
00:15:12,399 --> 00:15:14,470
corresponds to virtual address zero
uh lists physical address you know eight

852
00:15:14,470 --> 00:15:14,480
uh lists physical address you know eight
 

853
00:15:14,480 --> 00:15:15,670
uh lists physical address you know eight
seven six uh

854
00:15:15,670 --> 00:15:15,680
seven six uh
 

855
00:15:15,680 --> 00:15:18,790
seven six uh
four zero uh and you know we know from

856
00:15:18,790 --> 00:15:18,800
four zero uh and you know we know from
 

857
00:15:18,800 --> 00:15:21,189
four zero uh and you know we know from
our previous picture that is somewhere

858
00:15:21,189 --> 00:15:21,199
our previous picture that is somewhere
 

859
00:15:21,199 --> 00:15:22,069
our previous picture that is somewhere
in that

860
00:15:22,069 --> 00:15:22,079
in that
 

861
00:15:22,079 --> 00:15:25,189
in that
uh free memory uh that the kernel has

862
00:15:25,189 --> 00:15:25,199
uh free memory uh that the kernel has
 

863
00:15:25,199 --> 00:15:28,389
uh free memory uh that the kernel has
available to allocate pages from

864
00:15:28,389 --> 00:15:28,399
available to allocate pages from
 

865
00:15:28,399 --> 00:15:30,150
available to allocate pages from
and then the final thing you see we see

866
00:15:30,150 --> 00:15:30,160
and then the final thing you see we see
 

867
00:15:30,160 --> 00:15:32,389
and then the final thing you see we see
the flags we see the flags have one

868
00:15:32,389 --> 00:15:32,399
the flags we see the flags have one
 

869
00:15:32,399 --> 00:15:34,949
the flags we see the flags have one
f so it means that the read bit is the

870
00:15:34,949 --> 00:15:34,959
f so it means that the read bit is the
 

871
00:15:34,959 --> 00:15:36,470
f so it means that the read bit is the
val bit is set to read that is set to

872
00:15:36,470 --> 00:15:36,480
val bit is set to read that is set to
 

873
00:15:36,480 --> 00:15:37,430
val bit is set to read that is set to
the

874
00:15:37,430 --> 00:15:37,440
the
 

875
00:15:37,440 --> 00:15:39,509
the
w bit is set to execute data set and

876
00:15:39,509 --> 00:15:39,519
w bit is set to execute data set and
 

877
00:15:39,519 --> 00:15:41,590
w bit is set to execute data set and
ubid is set

878
00:15:41,590 --> 00:15:41,600
ubid is set
 

879
00:15:41,600 --> 00:15:44,710
ubid is set
so this page can contain both data and

880
00:15:44,710 --> 00:15:44,720
so this page can contain both data and
 

881
00:15:44,720 --> 00:15:45,590
so this page can contain both data and
text

882
00:15:45,590 --> 00:15:45,600
text
 

883
00:15:45,600 --> 00:15:48,629
text
and these permissions allow the user

884
00:15:48,629 --> 00:15:48,639
and these permissions allow the user
 

885
00:15:48,639 --> 00:15:49,829
and these permissions allow the user
program

886
00:15:49,829 --> 00:15:49,839
program
 

887
00:15:49,839 --> 00:15:52,230
program
to execute instructions from it read the

888
00:15:52,230 --> 00:15:52,240
to execute instructions from it read the
 

889
00:15:52,240 --> 00:15:53,670
to execute instructions from it read the
right memory

890
00:15:53,670 --> 00:15:53,680
right memory
 

891
00:15:53,680 --> 00:15:57,269
right memory
and do it from user space okay so then

892
00:15:57,269 --> 00:15:57,279
and do it from user space okay so then
 

893
00:15:57,279 --> 00:15:58,550
and do it from user space okay so then
maybe the most interesting question is

894
00:15:58,550 --> 00:15:58,560
maybe the most interesting question is
 

895
00:15:58,560 --> 00:16:00,629
maybe the most interesting question is
like what's up with page one

896
00:16:00,629 --> 00:16:00,639
like what's up with page one
 

897
00:16:00,639 --> 00:16:02,629
like what's up with page one
and you know as a hint you know we see

898
00:16:02,629 --> 00:16:02,639
and you know as a hint you know we see
 

899
00:16:02,639 --> 00:16:03,749
and you know as a hint you know we see
that page one

900
00:16:03,749 --> 00:16:03,759
that page one
 

901
00:16:03,759 --> 00:16:06,870
that page one
uh only has f and not the u bit set

902
00:16:06,870 --> 00:16:06,880
uh only has f and not the u bit set
 

903
00:16:06,880 --> 00:16:11,749
uh only has f and not the u bit set
so uh you know what is the page one

904
00:16:11,749 --> 00:16:11,759

 

905
00:16:11,759 --> 00:16:15,350

anybody

906
00:16:15,350 --> 00:16:15,360

 

907
00:16:15,360 --> 00:16:17,509

is it the card page yeah it's the guard

908
00:16:17,509 --> 00:16:17,519
is it the card page yeah it's the guard
 

909
00:16:17,519 --> 00:16:19,509
is it the card page yeah it's the guard
page right

910
00:16:19,509 --> 00:16:19,519
page right
 

911
00:16:19,519 --> 00:16:21,910
page right
so the guard page uh is mapped because

912
00:16:21,910 --> 00:16:21,920
so the guard page uh is mapped because
 

913
00:16:21,920 --> 00:16:24,550
so the guard page uh is mapped because
it has a vmip but it has not the ubit

914
00:16:24,550 --> 00:16:24,560
it has a vmip but it has not the ubit
 

915
00:16:24,560 --> 00:16:25,670
it has a vmip but it has not the ubit
set so

916
00:16:25,670 --> 00:16:25,680
set so
 

917
00:16:25,680 --> 00:16:28,150
set so
any user instruction that tries to so if

918
00:16:28,150 --> 00:16:28,160
any user instruction that tries to so if
 

919
00:16:28,160 --> 00:16:29,269
any user instruction that tries to so if
a user program

920
00:16:29,269 --> 00:16:29,279
a user program
 

921
00:16:29,279 --> 00:16:31,350
a user program
runs off its stack so the stack grows

922
00:16:31,350 --> 00:16:31,360
runs off its stack so the stack grows
 

923
00:16:31,360 --> 00:16:33,110
runs off its stack so the stack grows
from the top down

924
00:16:33,110 --> 00:16:33,120
from the top down
 

925
00:16:33,120 --> 00:16:35,509
from the top down
so if it actually has more you know the

926
00:16:35,509 --> 00:16:35,519
so if it actually has more you know the
 

927
00:16:35,519 --> 00:16:36,949
so if it actually has more you know the
stack is bigger than 496

928
00:16:36,949 --> 00:16:36,959
stack is bigger than 496
 

929
00:16:36,959 --> 00:16:39,990
stack is bigger than 496
completely full and if then uh the user

930
00:16:39,990 --> 00:16:40,000
completely full and if then uh the user
 

931
00:16:40,000 --> 00:16:41,590
completely full and if then uh the user
program you know pushes something on the

932
00:16:41,590 --> 00:16:41,600
program you know pushes something on the
 

933
00:16:41,600 --> 00:16:42,629
program you know pushes something on the
stack stack on

934
00:16:42,629 --> 00:16:42,639
stack stack on
 

935
00:16:42,639 --> 00:16:44,230
stack stack on
the ground it will grow into the guard

936
00:16:44,230 --> 00:16:44,240
the ground it will grow into the guard
 

937
00:16:44,240 --> 00:16:47,110
the ground it will grow into the guard
page and because the view bit is not set

938
00:16:47,110 --> 00:16:47,120
page and because the view bit is not set
 

939
00:16:47,120 --> 00:16:49,430
page and because the view bit is not set
uh we're going to get a page fault or a

940
00:16:49,430 --> 00:16:49,440
uh we're going to get a page fault or a
 

941
00:16:49,440 --> 00:16:51,749
uh we're going to get a page fault or a
trap into the kernel

942
00:16:51,749 --> 00:16:51,759
trap into the kernel
 

943
00:16:51,759 --> 00:16:54,870
trap into the kernel
because the mmu cannot translate to

944
00:16:54,870 --> 00:16:54,880
because the mmu cannot translate to
 

945
00:16:54,880 --> 00:16:55,430
because the mmu cannot translate to
address

946
00:16:55,430 --> 00:16:55,440
address
 

947
00:16:55,440 --> 00:16:58,470
address
uh to cannot address cannot

948
00:16:58,470 --> 00:16:58,480
uh to cannot address cannot
 

949
00:16:58,480 --> 00:17:00,470
uh to cannot address cannot
translate any addresses on the guard

950
00:17:00,470 --> 00:17:00,480
translate any addresses on the guard
 

951
00:17:00,480 --> 00:17:02,550
translate any addresses on the guard
page to a physical address

952
00:17:02,550 --> 00:17:02,560
page to a physical address
 

953
00:17:02,560 --> 00:17:05,029
page to a physical address
because the met the not having a unit

954
00:17:05,029 --> 00:17:05,039
because the met the not having a unit
 

955
00:17:05,039 --> 00:17:08,470
because the met the not having a unit
basically forbids the translation

956
00:17:08,470 --> 00:17:08,480

 

957
00:17:08,480 --> 00:17:16,829

okay and what is that in page two

958
00:17:16,829 --> 00:17:16,839

 

959
00:17:16,839 --> 00:17:19,750

any anybody

960
00:17:19,750 --> 00:17:19,760
any anybody
 

961
00:17:19,760 --> 00:17:22,710
any anybody
stack yep that's the stack page and so

962
00:17:22,710 --> 00:17:22,720
stack yep that's the stack page and so
 

963
00:17:22,720 --> 00:17:23,669
stack yep that's the stack page and so
again the stack page is

964
00:17:23,669 --> 00:17:23,679
again the stack page is
 

965
00:17:23,679 --> 00:17:26,390
again the stack page is
uh four four four four five and 96 bytes

966
00:17:26,390 --> 00:17:26,400
uh four four four four five and 96 bytes
 

967
00:17:26,400 --> 00:17:26,789
uh four four four four five and 96 bytes
and

968
00:17:26,789 --> 00:17:26,799
and
 

969
00:17:26,799 --> 00:17:27,909
and
you would see that's completely

970
00:17:27,909 --> 00:17:27,919
you would see that's completely
 

971
00:17:27,919 --> 00:17:30,230
you would see that's completely
elaborate in terms of permissions

972
00:17:30,230 --> 00:17:30,240
elaborate in terms of permissions
 

973
00:17:30,240 --> 00:17:33,270
elaborate in terms of permissions
uh it has you know everything could we

974
00:17:33,270 --> 00:17:33,280
uh it has you know everything could we
 

975
00:17:33,280 --> 00:17:38,230
uh it has you know everything could we
set it up tighter if we wanted to

976
00:17:38,230 --> 00:17:38,240

 

977
00:17:38,240 --> 00:17:40,669

yeah i think you could disable the

978
00:17:40,669 --> 00:17:40,679
yeah i think you could disable the
 

979
00:17:40,679 --> 00:17:42,390
yeah i think you could disable the
executable bit

980
00:17:42,390 --> 00:17:42,400
executable bit
 

981
00:17:42,400 --> 00:17:45,350
executable bit
yeah you probably could execute the the

982
00:17:45,350 --> 00:17:45,360
yeah you probably could execute the the
 

983
00:17:45,360 --> 00:17:46,870
yeah you probably could execute the the
xbit

984
00:17:46,870 --> 00:17:46,880
xbit
 

985
00:17:46,880 --> 00:17:48,710
xbit
that would forbid having any program

986
00:17:48,710 --> 00:17:48,720
that would forbid having any program
 

987
00:17:48,720 --> 00:17:50,710
that would forbid having any program
code on the stack

988
00:17:50,710 --> 00:17:50,720
code on the stack
 

989
00:17:50,720 --> 00:17:52,710
code on the stack
so if you like generate code on the fly

990
00:17:52,710 --> 00:17:52,720
so if you like generate code on the fly
 

991
00:17:52,720 --> 00:17:53,909
so if you like generate code on the fly
and put it on the stack you know you

992
00:17:53,909 --> 00:17:53,919
and put it on the stack you know you
 

993
00:17:53,919 --> 00:17:55,190
and put it on the stack you know you
wouldn't be able to execute it

994
00:17:55,190 --> 00:17:55,200
wouldn't be able to execute it
 

995
00:17:55,200 --> 00:17:56,630
wouldn't be able to execute it
you know that's maybe probably a good

996
00:17:56,630 --> 00:17:56,640
you know that's maybe probably a good
 

997
00:17:56,640 --> 00:17:58,470
you know that's maybe probably a good
thing

998
00:17:58,470 --> 00:17:58,480
thing
 

999
00:17:58,480 --> 00:17:59,909
thing
and so we could have been a little bit

1000
00:17:59,909 --> 00:17:59,919
and so we could have been a little bit
 

1001
00:17:59,919 --> 00:18:02,310
and so we could have been a little bit
tighter okay

1002
00:18:02,310 --> 00:18:02,320
tighter okay
 

1003
00:18:02,320 --> 00:18:05,190
tighter okay
um so that's the basically the bottom

1004
00:18:05,190 --> 00:18:05,200
um so that's the basically the bottom
 

1005
00:18:05,200 --> 00:18:06,070
um so that's the basically the bottom
part of this

1006
00:18:06,070 --> 00:18:06,080
part of this
 

1007
00:18:06,080 --> 00:18:09,669
part of this
uh thing uh of the page table so now

1008
00:18:09,669 --> 00:18:09,679
uh thing uh of the page table so now
 

1009
00:18:09,679 --> 00:18:10,870
uh thing uh of the page table so now
let's look at the

1010
00:18:10,870 --> 00:18:10,880
let's look at the
 

1011
00:18:10,880 --> 00:18:13,029
let's look at the
remaining entries so basically only two

1012
00:18:13,029 --> 00:18:13,039
remaining entries so basically only two
 

1013
00:18:13,039 --> 00:18:14,549
remaining entries so basically only two
remaining entries

1014
00:18:14,549 --> 00:18:14,559
remaining entries
 

1015
00:18:14,559 --> 00:18:17,669
remaining entries
um and maybe the flag bits are the most

1016
00:18:17,669 --> 00:18:17,679
um and maybe the flag bits are the most
 

1017
00:18:17,679 --> 00:18:19,190
um and maybe the flag bits are the most
telling part of this

1018
00:18:19,190 --> 00:18:19,200
telling part of this
 

1019
00:18:19,200 --> 00:18:22,950
telling part of this
uh so seven uh you know means you know

1020
00:18:22,950 --> 00:18:22,960
uh so seven uh you know means you know
 

1021
00:18:22,960 --> 00:18:23,830
uh so seven uh you know means you know
read

1022
00:18:23,830 --> 00:18:23,840
read
 

1023
00:18:23,840 --> 00:18:27,430
read
right and valid

1024
00:18:27,430 --> 00:18:27,440
right and valid
 

1025
00:18:27,440 --> 00:18:30,950
right and valid
work uh and so

1026
00:18:30,950 --> 00:18:30,960
work uh and so
 

1027
00:18:30,960 --> 00:18:34,150
work uh and so
what do we think that one is and maybe

1028
00:18:34,150 --> 00:18:34,160
what do we think that one is and maybe
 

1029
00:18:34,160 --> 00:18:35,830
what do we think that one is and maybe
i'll do the other one too

1030
00:18:35,830 --> 00:18:35,840
i'll do the other one too
 

1031
00:18:35,840 --> 00:18:39,029
i'll do the other one too
uh so b is i think one zero zero one so

1032
00:18:39,029 --> 00:18:39,039
uh so b is i think one zero zero one so
 

1033
00:18:39,039 --> 00:18:39,909
uh so b is i think one zero zero one so
presumably x

1034
00:18:39,909 --> 00:18:39,919
presumably x
 

1035
00:18:39,919 --> 00:18:42,950
presumably x
invalid so what do we think

1036
00:18:42,950 --> 00:18:42,960
invalid so what do we think
 

1037
00:18:42,960 --> 00:18:48,789
invalid so what do we think
511 is

1038
00:18:48,789 --> 00:18:48,799

 

1039
00:18:48,799 --> 00:18:54,070

anybody

1040
00:18:54,070 --> 00:18:54,080

 

1041
00:18:54,080 --> 00:18:57,350

the trampoline and trap page yeah so the

1042
00:18:57,350 --> 00:18:57,360
the trampoline and trap page yeah so the
 

1043
00:18:57,360 --> 00:18:59,110
the trampoline and trap page yeah so the
[ __ ] that's clear that's the trampoline

1044
00:18:59,110 --> 00:18:59,120
[ __ ] that's clear that's the trampoline
 

1045
00:18:59,120 --> 00:19:00,950
[ __ ] that's clear that's the trampoline
uh and probably 511 is definitely the

1046
00:19:00,950 --> 00:19:00,960
uh and probably 511 is definitely the
 

1047
00:19:00,960 --> 00:19:02,310
uh and probably 511 is definitely the
trampoline correct

1048
00:19:02,310 --> 00:19:02,320
trampoline correct
 

1049
00:19:02,320 --> 00:19:04,789
trampoline correct
because it has the xbit set so we must

1050
00:19:04,789 --> 00:19:04,799
because it has the xbit set so we must
 

1051
00:19:04,799 --> 00:19:06,310
because it has the xbit set so we must
be executing or we're allowing

1052
00:19:06,310 --> 00:19:06,320
be executing or we're allowing
 

1053
00:19:06,320 --> 00:19:08,070
be executing or we're allowing
instruction to be executed from that

1054
00:19:08,070 --> 00:19:08,080
instruction to be executed from that
 

1055
00:19:08,080 --> 00:19:10,549
instruction to be executed from that
page so that wants me to trampoline

1056
00:19:10,549 --> 00:19:10,559
page so that wants me to trampoline
 

1057
00:19:10,559 --> 00:19:12,470
page so that wants me to trampoline
and we're allowing read and write you

1058
00:19:12,470 --> 00:19:12,480
and we're allowing read and write you
 

1059
00:19:12,480 --> 00:19:13,830
and we're allowing read and write you
know to the

1060
00:19:13,830 --> 00:19:13,840
know to the
 

1061
00:19:13,840 --> 00:19:15,990
know to the
uh to that page so that's probably the

1062
00:19:15,990 --> 00:19:16,000
uh to that page so that's probably the
 

1063
00:19:16,000 --> 00:19:17,350
uh to that page so that's probably the
track frame page because that's the one

1064
00:19:17,350 --> 00:19:17,360
track frame page because that's the one
 

1065
00:19:17,360 --> 00:19:18,630
track frame page because that's the one
we use to restore

1066
00:19:18,630 --> 00:19:18,640
we use to restore
 

1067
00:19:18,640 --> 00:19:22,150
we use to restore
and uh save registers in

1068
00:19:22,150 --> 00:19:22,160
and uh save registers in
 

1069
00:19:22,160 --> 00:19:24,310
and uh save registers in
okay one of the probably the thing the

1070
00:19:24,310 --> 00:19:24,320
okay one of the probably the thing the
 

1071
00:19:24,320 --> 00:19:25,270
okay one of the probably the thing the
main

1072
00:19:25,270 --> 00:19:25,280
main
 

1073
00:19:25,280 --> 00:19:26,710
main
the most important thing to notice is

1074
00:19:26,710 --> 00:19:26,720
the most important thing to notice is
 

1075
00:19:26,720 --> 00:19:29,110
the most important thing to notice is
there's no ubit

1076
00:19:29,110 --> 00:19:29,120
there's no ubit
 

1077
00:19:29,120 --> 00:19:30,630
there's no ubit
right there so that what does that mean

1078
00:19:30,630 --> 00:19:30,640
right there so that what does that mean
 

1079
00:19:30,640 --> 00:19:32,150
right there so that what does that mean
that means that the user program can

1080
00:19:32,150 --> 00:19:32,160
that means that the user program can
 

1081
00:19:32,160 --> 00:19:34,390
that means that the user program can
actually not execute the instructions

1082
00:19:34,390 --> 00:19:34,400
actually not execute the instructions
 

1083
00:19:34,400 --> 00:19:36,870
actually not execute the instructions
uh that are actually at 510 and if at

1084
00:19:36,870 --> 00:19:36,880
uh that are actually at 510 and if at
 

1085
00:19:36,880 --> 00:19:37,430
uh that are actually at 510 and if at
the

1086
00:19:37,430 --> 00:19:37,440
the
 

1087
00:19:37,440 --> 00:19:39,990
the
trampoline page and can't be the right

1088
00:19:39,990 --> 00:19:40,000
trampoline page and can't be the right
 

1089
00:19:40,000 --> 00:19:41,270
trampoline page and can't be the right
to that page

1090
00:19:41,270 --> 00:19:41,280
to that page
 

1091
00:19:41,280 --> 00:19:43,029
to that page
so only the kernel can execute

1092
00:19:43,029 --> 00:19:43,039
so only the kernel can execute
 

1093
00:19:43,039 --> 00:19:44,789
so only the kernel can execute
instructions from there and it can only

1094
00:19:44,789 --> 00:19:44,799
instructions from there and it can only
 

1095
00:19:44,799 --> 00:19:47,430
instructions from there and it can only
read it right

1096
00:19:47,430 --> 00:19:47,440

 

1097
00:19:47,440 --> 00:19:49,270

so basically like the kernel is going to

1098
00:19:49,270 --> 00:19:49,280
so basically like the kernel is going to
 

1099
00:19:49,280 --> 00:19:51,110
so basically like the kernel is going to
be doing this before

1100
00:19:51,110 --> 00:19:51,120
be doing this before
 

1101
00:19:51,120 --> 00:19:53,350
be doing this before
the while still using the user page

1102
00:19:53,350 --> 00:19:53,360
the while still using the user page
 

1103
00:19:53,360 --> 00:19:55,110
the while still using the user page
table right that's kind of the point

1104
00:19:55,110 --> 00:19:55,120
table right that's kind of the point
 

1105
00:19:55,120 --> 00:19:57,110
table right that's kind of the point
yeah exactly as you know robert

1106
00:19:57,110 --> 00:19:57,120
yeah exactly as you know robert
 

1107
00:19:57,120 --> 00:19:58,310
yeah exactly as you know robert
explained in the last lecture

1108
00:19:58,310 --> 00:19:58,320
explained in the last lecture
 

1109
00:19:58,320 --> 00:19:59,990
explained in the last lecture
this is like just for the transition

1110
00:19:59,990 --> 00:20:00,000
this is like just for the transition
 

1111
00:20:00,000 --> 00:20:01,750
this is like just for the transition
from user to kernel and before we jump

1112
00:20:01,750 --> 00:20:01,760
from user to kernel and before we jump
 

1113
00:20:01,760 --> 00:20:02,310
from user to kernel and before we jump
to

1114
00:20:02,310 --> 00:20:02,320
to
 

1115
00:20:02,320 --> 00:20:04,870
to
before we load to the kernel page table

1116
00:20:04,870 --> 00:20:04,880
before we load to the kernel page table
 

1117
00:20:04,880 --> 00:20:05,590
before we load to the kernel page table
in the satp

1118
00:20:05,590 --> 00:20:05,600
in the satp
 

1119
00:20:05,600 --> 00:20:07,350
in the satp
register we need a little bit of you

1120
00:20:07,350 --> 00:20:07,360
register we need a little bit of you
 

1121
00:20:07,360 --> 00:20:08,950
register we need a little bit of you
know the kernel needs a little bit of

1122
00:20:08,950 --> 00:20:08,960
know the kernel needs a little bit of
 

1123
00:20:08,960 --> 00:20:11,990
know the kernel needs a little bit of
memory to actually do his job

1124
00:20:11,990 --> 00:20:12,000
memory to actually do his job
 

1125
00:20:12,000 --> 00:20:14,630
memory to actually do his job
okay so a couple other things that may

1126
00:20:14,630 --> 00:20:14,640
okay so a couple other things that may
 

1127
00:20:14,640 --> 00:20:15,990
okay so a couple other things that may
be interesting of this picture

1128
00:20:15,990 --> 00:20:16,000
be interesting of this picture
 

1129
00:20:16,000 --> 00:20:18,390
be interesting of this picture
um so we all you know all these

1130
00:20:18,390 --> 00:20:18,400
um so we all you know all these
 

1131
00:20:18,400 --> 00:20:21,149
um so we all you know all these
addresses right

1132
00:20:21,149 --> 00:20:21,159

 

1133
00:20:21,159 --> 00:20:22,310

87630862471

1134
00:20:22,310 --> 00:20:22,320
87630862471
 

1135
00:20:22,320 --> 00:20:25,110
87630862471
these are all pages or memory in that

1136
00:20:25,110 --> 00:20:25,120
these are all pages or memory in that
 

1137
00:20:25,120 --> 00:20:26,549
these are all pages or memory in that
range

1138
00:20:26,549 --> 00:20:26,559
range
 

1139
00:20:26,559 --> 00:20:29,029
range
of the kernel memory that is not you

1140
00:20:29,029 --> 00:20:29,039
of the kernel memory that is not you
 

1141
00:20:29,039 --> 00:20:30,230
of the kernel memory that is not you
know that's basically free

1142
00:20:30,230 --> 00:20:30,240
know that's basically free
 

1143
00:20:30,240 --> 00:20:41,909
know that's basically free
right are these addresses contiguous

1144
00:20:41,909 --> 00:20:41,919

 

1145
00:20:41,919 --> 00:20:47,029

in physical memory

1146
00:20:47,029 --> 00:20:47,039

 

1147
00:20:47,039 --> 00:20:51,510

anybody uh no they don't have to be

1148
00:20:51,510 --> 00:20:51,520
anybody uh no they don't have to be
 

1149
00:20:51,520 --> 00:20:53,029
anybody uh no they don't have to be
no they don't have to be and they aren't

1150
00:20:53,029 --> 00:20:53,039
no they don't have to be and they aren't
 

1151
00:20:53,039 --> 00:20:54,789
no they don't have to be and they aren't
correct you know look at this you know

1152
00:20:54,789 --> 00:20:54,799
correct you know look at this you know
 

1153
00:20:54,799 --> 00:20:57,029
correct you know look at this you know
seven six four zero zero it reconfigures

1154
00:20:57,029 --> 00:20:57,039
seven six four zero zero it reconfigures
 

1155
00:20:57,039 --> 00:20:58,310
seven six four zero zero it reconfigures
then the next address would have been

1156
00:20:58,310 --> 00:20:58,320
then the next address would have been
 

1157
00:20:58,320 --> 00:20:58,710
then the next address would have been
eight

1158
00:20:58,710 --> 00:20:58,720
eight
 

1159
00:20:58,720 --> 00:21:01,350
eight
seven six you know six five zero correct

1160
00:21:01,350 --> 00:21:01,360
seven six you know six five zero correct
 

1161
00:21:01,360 --> 00:21:02,630
seven six you know six five zero correct
and it isn't

1162
00:21:02,630 --> 00:21:02,640
and it isn't
 

1163
00:21:02,640 --> 00:21:05,270
and it isn't
uh so there's no one of the cool things

1164
00:21:05,270 --> 00:21:05,280
uh so there's no one of the cool things
 

1165
00:21:05,280 --> 00:21:06,789
uh so there's no one of the cool things
about page tables is

1166
00:21:06,789 --> 00:21:06,799
about page tables is
 

1167
00:21:06,799 --> 00:21:08,630
about page tables is
that even though maybe the virtual

1168
00:21:08,630 --> 00:21:08,640
that even though maybe the virtual
 

1169
00:21:08,640 --> 00:21:10,549
that even though maybe the virtual
address space is contiguous

1170
00:21:10,549 --> 00:21:10,559
address space is contiguous
 

1171
00:21:10,559 --> 00:21:12,310
address space is contiguous
the physical address space or the

1172
00:21:12,310 --> 00:21:12,320
the physical address space or the
 

1173
00:21:12,320 --> 00:21:14,310
the physical address space or the
physical pages that go along with the

1174
00:21:14,310 --> 00:21:14,320
physical pages that go along with the
 

1175
00:21:14,320 --> 00:21:16,390
physical pages that go along with the
contiguous virtual addresses are not

1176
00:21:16,390 --> 00:21:16,400
contiguous virtual addresses are not
 

1177
00:21:16,400 --> 00:21:17,750
contiguous virtual addresses are not
don't have to be continuous

1178
00:21:17,750 --> 00:21:17,760
don't have to be continuous
 

1179
00:21:17,760 --> 00:21:18,950
don't have to be continuous
and so this gives the kernel a lot of

1180
00:21:18,950 --> 00:21:18,960
and so this gives the kernel a lot of
 

1181
00:21:18,960 --> 00:21:20,950
and so this gives the kernel a lot of
flexibility in terms of you know

1182
00:21:20,950 --> 00:21:20,960
flexibility in terms of you know
 

1183
00:21:20,960 --> 00:21:21,830
flexibility in terms of you know
allocation

1184
00:21:21,830 --> 00:21:21,840
allocation
 

1185
00:21:21,840 --> 00:21:25,029
allocation
and uh three pages

1186
00:21:25,029 --> 00:21:25,039
and uh three pages
 

1187
00:21:25,039 --> 00:21:28,070
and uh three pages
okay any questions about

1188
00:21:28,070 --> 00:21:28,080
okay any questions about
 

1189
00:21:28,080 --> 00:21:32,390
okay any questions about
this part one i had a question yeah um

1190
00:21:32,390 --> 00:21:32,400
this part one i had a question yeah um
 

1191
00:21:32,400 --> 00:21:35,669
this part one i had a question yeah um
could you explain the sbr k a little um

1192
00:21:35,669 --> 00:21:35,679
could you explain the sbr k a little um
 

1193
00:21:35,679 --> 00:21:37,430
could you explain the sbr k a little um
also if we are going to cover it in a

1194
00:21:37,430 --> 00:21:37,440
also if we are going to cover it in a
 

1195
00:21:37,440 --> 00:21:39,430
also if we are going to cover it in a
future lecture then maybe we can

1196
00:21:39,430 --> 00:21:39,440
future lecture then maybe we can
 

1197
00:21:39,440 --> 00:21:42,470
future lecture then maybe we can
like just a small yeah actually let me

1198
00:21:42,470 --> 00:21:42,480
like just a small yeah actually let me
 

1199
00:21:42,480 --> 00:21:44,230
like just a small yeah actually let me
i'm going to talk about it on wednesday

1200
00:21:44,230 --> 00:21:44,240
i'm going to talk about it on wednesday
 

1201
00:21:44,240 --> 00:21:45,909
i'm going to talk about it on wednesday
and it actually will be the topic of the

1202
00:21:45,909 --> 00:21:45,919
and it actually will be the topic of the
 

1203
00:21:45,919 --> 00:21:47,270
and it actually will be the topic of the
lazy lab

1204
00:21:47,270 --> 00:21:47,280
lazy lab
 

1205
00:21:47,280 --> 00:21:49,750
lazy lab
uh so let me maybe respond that question

1206
00:21:49,750 --> 00:21:49,760
uh so let me maybe respond that question
 

1207
00:21:49,760 --> 00:21:50,630
uh so let me maybe respond that question
a little bit to wednesday

1208
00:21:50,630 --> 00:21:50,640
a little bit to wednesday
 

1209
00:21:50,640 --> 00:21:52,789
a little bit to wednesday
uh and then that's not clear enough

1210
00:21:52,789 --> 00:21:52,799
uh and then that's not clear enough
 

1211
00:21:52,799 --> 00:21:54,470
uh and then that's not clear enough
please ask it again

1212
00:21:54,470 --> 00:21:54,480
please ask it again
 

1213
00:21:54,480 --> 00:21:57,510
please ask it again
sounds good thank

1214
00:21:57,510 --> 00:21:57,520

 

1215
00:21:57,520 --> 00:22:01,270

uh you also had a question

1216
00:22:01,270 --> 00:22:01,280
uh you also had a question
 

1217
00:22:01,280 --> 00:22:04,710
uh you also had a question
so uh i remember that

1218
00:22:04,710 --> 00:22:04,720
so uh i remember that
 

1219
00:22:04,720 --> 00:22:06,549
so uh i remember that
the book said the trampoline and the

1220
00:22:06,549 --> 00:22:06,559
the book said the trampoline and the
 

1221
00:22:06,559 --> 00:22:08,549
the book said the trampoline and the
trap frame were at the top of the

1222
00:22:08,549 --> 00:22:08,559
trap frame were at the top of the
 

1223
00:22:08,559 --> 00:22:09,510
trap frame were at the top of the
address space

1224
00:22:09,510 --> 00:22:09,520
address space
 

1225
00:22:09,520 --> 00:22:12,950
address space
yeah uh but here

1226
00:22:12,950 --> 00:22:12,960
yeah uh but here
 

1227
00:22:12,960 --> 00:22:16,310
yeah uh but here
it stops at like the first the root page

1228
00:22:16,310 --> 00:22:16,320
it stops at like the first the root page
 

1229
00:22:16,320 --> 00:22:17,990
it stops at like the first the root page
table it indexes at two five

1230
00:22:17,990 --> 00:22:18,000
table it indexes at two five
 

1231
00:22:18,000 --> 00:22:20,630
table it indexes at two five
five not five one one yeah brilliant

1232
00:22:20,630 --> 00:22:20,640
five not five one one yeah brilliant
 

1233
00:22:20,640 --> 00:22:22,390
five not five one one yeah brilliant
question very good i'm glad you asked it

1234
00:22:22,390 --> 00:22:22,400
question very good i'm glad you asked it
 

1235
00:22:22,400 --> 00:22:23,909
question very good i'm glad you asked it
uh i saw it in here in

1236
00:22:23,909 --> 00:22:23,919
uh i saw it in here in
 

1237
00:22:23,919 --> 00:22:25,750
uh i saw it in here in
the q a questions and i was planning to

1238
00:22:25,750 --> 00:22:25,760
the q a questions and i was planning to
 

1239
00:22:25,760 --> 00:22:27,510
the q a questions and i was planning to
talk about it but of course i forgot

1240
00:22:27,510 --> 00:22:27,520
talk about it but of course i forgot
 

1241
00:22:27,520 --> 00:22:29,510
talk about it but of course i forgot
so yeah what's going on here you know

1242
00:22:29,510 --> 00:22:29,520
so yeah what's going on here you know
 

1243
00:22:29,520 --> 00:22:33,110
so yeah what's going on here you know
why is two five five not five eleven

1244
00:22:33,110 --> 00:22:33,120
why is two five five not five eleven
 

1245
00:22:33,120 --> 00:22:35,590
why is two five five not five eleven
yeah you know we you know we always say

1246
00:22:35,590 --> 00:22:35,600
yeah you know we you know we always say
 

1247
00:22:35,600 --> 00:22:36,870
yeah you know we you know we always say
the trampoline lives at the top of the

1248
00:22:36,870 --> 00:22:36,880
the trampoline lives at the top of the
 

1249
00:22:36,880 --> 00:22:38,149
the trampoline lives at the top of the
address space well

1250
00:22:38,149 --> 00:22:38,159
address space well
 

1251
00:22:38,159 --> 00:22:40,710
address space well
the top of the address space correct is

1252
00:22:40,710 --> 00:22:40,720
the top of the address space correct is
 

1253
00:22:40,720 --> 00:22:41,510
the top of the address space correct is
you know point

1254
00:22:41,510 --> 00:22:41,520
you know point
 

1255
00:22:41,520 --> 00:22:44,230
you know point
is actually entry 511 of the to the top

1256
00:22:44,230 --> 00:22:44,240
is actually entry 511 of the to the top
 

1257
00:22:44,240 --> 00:22:45,590
is actually entry 511 of the to the top
level directory

1258
00:22:45,590 --> 00:22:45,600
level directory
 

1259
00:22:45,600 --> 00:22:49,350
level directory
and it is only 255.

1260
00:22:49,350 --> 00:22:49,360

 

1261
00:22:49,360 --> 00:22:52,549

anybody any ideas why this is the case

1262
00:22:52,549 --> 00:22:52,559
anybody any ideas why this is the case
 

1263
00:22:52,559 --> 00:22:55,190
anybody any ideas why this is the case
we said that one bit that we said we

1264
00:22:55,190 --> 00:22:55,200
we said that one bit that we said we
 

1265
00:22:55,200 --> 00:22:56,789
we said that one bit that we said we
were going to use we actually aren't

1266
00:22:56,789 --> 00:22:56,799
were going to use we actually aren't
 

1267
00:22:56,799 --> 00:22:59,029
were going to use we actually aren't
using because of sign extension problems

1268
00:22:59,029 --> 00:22:59,039
using because of sign extension problems
 

1269
00:22:59,039 --> 00:23:00,549
using because of sign extension problems
because it just makes it easier and we

1270
00:23:00,549 --> 00:23:00,559
because it just makes it easier and we
 

1271
00:23:00,559 --> 00:23:03,350
because it just makes it easier and we
also don't need that memory yeah so uh

1272
00:23:03,350 --> 00:23:03,360
also don't need that memory yeah so uh
 

1273
00:23:03,360 --> 00:23:03,830
also don't need that memory yeah so uh
so that's

1274
00:23:03,830 --> 00:23:03,840
so that's
 

1275
00:23:03,840 --> 00:23:05,430
so that's
exactly the right answer so this is

1276
00:23:05,430 --> 00:23:05,440
exactly the right answer so this is
 

1277
00:23:05,440 --> 00:23:06,950
exactly the right answer so this is
basically stupid

1278
00:23:06,950 --> 00:23:06,960
basically stupid
 

1279
00:23:06,960 --> 00:23:10,470
basically stupid
technicality um so the virtual addresses

1280
00:23:10,470 --> 00:23:10,480
technicality um so the virtual addresses
 

1281
00:23:10,480 --> 00:23:13,590
technicality um so the virtual addresses
are in principle uh i think 39 bits

1282
00:23:13,590 --> 00:23:13,600
are in principle uh i think 39 bits
 

1283
00:23:13,600 --> 00:23:18,149
are in principle uh i think 39 bits
right and but we actually in xv6 only

1284
00:23:18,149 --> 00:23:18,159
right and but we actually in xv6 only
 

1285
00:23:18,159 --> 00:23:20,630
right and but we actually in xv6 only
use 38 of them

1286
00:23:20,630 --> 00:23:20,640
use 38 of them
 

1287
00:23:20,640 --> 00:23:23,029
use 38 of them
and as a result you know the top of the

1288
00:23:23,029 --> 00:23:23,039
and as a result you know the top of the
 

1289
00:23:23,039 --> 00:23:23,909
and as a result you know the top of the
max va

1290
00:23:23,909 --> 00:23:23,919
max va
 

1291
00:23:23,919 --> 00:23:27,990
max va
for us is basically the 255 entry

1292
00:23:27,990 --> 00:23:28,000
for us is basically the 255 entry
 

1293
00:23:28,000 --> 00:23:29,909
for us is basically the 255 entry
and the reason we don't use the 39 bit

1294
00:23:29,909 --> 00:23:29,919
and the reason we don't use the 39 bit
 

1295
00:23:29,919 --> 00:23:31,830
and the reason we don't use the 39 bit
is for no particular

1296
00:23:31,830 --> 00:23:31,840
is for no particular
 

1297
00:23:31,840 --> 00:23:34,630
is for no particular
uh good reason other than that basically

1298
00:23:34,630 --> 00:23:34,640
uh good reason other than that basically
 

1299
00:23:34,640 --> 00:23:37,190
uh good reason other than that basically
if you have the 39th bit set

1300
00:23:37,190 --> 00:23:37,200
if you have the 39th bit set
 

1301
00:23:37,200 --> 00:23:39,830
if you have the 39th bit set
then all the remaining uh bits in the

1302
00:23:39,830 --> 00:23:39,840
then all the remaining uh bits in the
 

1303
00:23:39,840 --> 00:23:42,789
then all the remaining uh bits in the
64-bit address have to be once

1304
00:23:42,789 --> 00:23:42,799
64-bit address have to be once
 

1305
00:23:42,799 --> 00:23:44,310
64-bit address have to be once
and so we just didn't want to deal with

1306
00:23:44,310 --> 00:23:44,320
and so we just didn't want to deal with
 

1307
00:23:44,320 --> 00:23:45,669
and so we just didn't want to deal with
this problem that if we ever set the

1308
00:23:45,669 --> 00:23:45,679
this problem that if we ever set the
 

1309
00:23:45,679 --> 00:23:48,070
this problem that if we ever set the
39-bit we also have to set the 40 41st

1310
00:23:48,070 --> 00:23:48,080
39-bit we also have to set the 40 41st
 

1311
00:23:48,080 --> 00:23:49,990
39-bit we also have to set the 40 41st
42nd to 43rd etcetera until

1312
00:23:49,990 --> 00:23:50,000
42nd to 43rd etcetera until
 

1313
00:23:50,000 --> 00:23:55,029
42nd to 43rd etcetera until
the 64. um

1314
00:23:55,029 --> 00:23:55,039

 

1315
00:23:55,039 --> 00:23:56,789

so that's the excavation does that make

1316
00:23:56,789 --> 00:23:56,799
so that's the excavation does that make
 

1317
00:23:56,799 --> 00:23:58,310
so that's the excavation does that make
sense yes

1318
00:23:58,310 --> 00:23:58,320
sense yes
 

1319
00:23:58,320 --> 00:24:01,669
sense yes
yep that's a very good very good

1320
00:24:01,669 --> 00:24:01,679
yep that's a very good very good
 

1321
00:24:01,679 --> 00:24:04,470
yep that's a very good very good
application though

1322
00:24:04,470 --> 00:24:04,480
application though
 

1323
00:24:04,480 --> 00:24:06,950
application though
so i also had a question about why is

1324
00:24:06,950 --> 00:24:06,960
so i also had a question about why is
 

1325
00:24:06,960 --> 00:24:09,669
so i also had a question about why is
the text and the data on the same page

1326
00:24:09,669 --> 00:24:09,679
the text and the data on the same page
 

1327
00:24:09,679 --> 00:24:11,990
the text and the data on the same page
ah very good question also uh that seems

1328
00:24:11,990 --> 00:24:12,000
ah very good question also uh that seems
 

1329
00:24:12,000 --> 00:24:13,750
ah very good question also uh that seems
stupid right i mean you know why not put

1330
00:24:13,750 --> 00:24:13,760
stupid right i mean you know why not put
 

1331
00:24:13,760 --> 00:24:15,110
stupid right i mean you know why not put
them in separate pages so that you can

1332
00:24:15,110 --> 00:24:15,120
them in separate pages so that you can
 

1333
00:24:15,120 --> 00:24:16,310
them in separate pages so that you can
actually set the permission bits

1334
00:24:16,310 --> 00:24:16,320
actually set the permission bits
 

1335
00:24:16,320 --> 00:24:19,430
actually set the permission bits
uh more carefully the

1336
00:24:19,430 --> 00:24:19,440
uh more carefully the
 

1337
00:24:19,440 --> 00:24:22,070
uh more carefully the
main reason we're not doing that is for

1338
00:24:22,070 --> 00:24:22,080
main reason we're not doing that is for
 

1339
00:24:22,080 --> 00:24:23,350
main reason we're not doing that is for
simplicity

1340
00:24:23,350 --> 00:24:23,360
simplicity
 

1341
00:24:23,360 --> 00:24:25,590
simplicity
just makes exec more complicated and we

1342
00:24:25,590 --> 00:24:25,600
just makes exec more complicated and we
 

1343
00:24:25,600 --> 00:24:29,110
just makes exec more complicated and we
wanted the simplest exact possible

1344
00:24:29,110 --> 00:24:29,120
wanted the simplest exact possible
 

1345
00:24:29,120 --> 00:24:30,549
wanted the simplest exact possible
so a real operating system would you

1346
00:24:30,549 --> 00:24:30,559
so a real operating system would you
 

1347
00:24:30,559 --> 00:24:33,350
so a real operating system would you
know not have data and text in the same

1348
00:24:33,350 --> 00:24:33,360
know not have data and text in the same
 

1349
00:24:33,360 --> 00:24:36,870
know not have data and text in the same
uh page in fact we have to specify

1350
00:24:36,870 --> 00:24:36,880
uh page in fact we have to specify
 

1351
00:24:36,880 --> 00:24:39,190
uh page in fact we have to specify
you know if you look at the loader flag

1352
00:24:39,190 --> 00:24:39,200
you know if you look at the loader flag
 

1353
00:24:39,200 --> 00:24:40,789
you know if you look at the loader flag
uh in the make file you'll see that it

1354
00:24:40,789 --> 00:24:40,799
uh in the make file you'll see that it
 

1355
00:24:40,799 --> 00:24:42,390
uh in the make file you'll see that it
has the desktan

1356
00:24:42,390 --> 00:24:42,400
has the desktan
 

1357
00:24:42,400 --> 00:24:44,230
has the desktan
option and that forces is actually data

1358
00:24:44,230 --> 00:24:44,240
option and that forces is actually data
 

1359
00:24:44,240 --> 00:24:45,990
option and that forces is actually data
and text to be in the contiguous

1360
00:24:45,990 --> 00:24:46,000
and text to be in the contiguous
 

1361
00:24:46,000 --> 00:24:53,430
and text to be in the contiguous
and not in separate pages

1362
00:24:53,430 --> 00:24:53,440

 

1363
00:24:53,440 --> 00:24:55,990

any more questions about this i had a

1364
00:24:55,990 --> 00:24:56,000
any more questions about this i had a
 

1365
00:24:56,000 --> 00:24:58,149
any more questions about this i had a
follow-up question regarding the number

1366
00:24:58,149 --> 00:24:58,159
follow-up question regarding the number
 

1367
00:24:58,159 --> 00:24:58,390
follow-up question regarding the number
of

1368
00:24:58,390 --> 00:24:58,400
of
 

1369
00:24:58,400 --> 00:25:01,350
of
bits we are using um so you said we're

1370
00:25:01,350 --> 00:25:01,360
bits we are using um so you said we're
 

1371
00:25:01,360 --> 00:25:03,430
bits we are using um so you said we're
using just 38 bits

1372
00:25:03,430 --> 00:25:03,440
using just 38 bits
 

1373
00:25:03,440 --> 00:25:05,590
using just 38 bits
is it is like the hardware still

1374
00:25:05,590 --> 00:25:05,600
is it is like the hardware still
 

1375
00:25:05,600 --> 00:25:07,430
is it is like the hardware still
provides for us to use

1376
00:25:07,430 --> 00:25:07,440
provides for us to use
 

1377
00:25:07,440 --> 00:25:09,990
provides for us to use
39 bits but we are designing our

1378
00:25:09,990 --> 00:25:10,000
39 bits but we are designing our
 

1379
00:25:10,000 --> 00:25:11,269
39 bits but we are designing our
operating system

1380
00:25:11,269 --> 00:25:11,279
operating system
 

1381
00:25:11,279 --> 00:25:14,390
operating system
such as that we're using 38 yeah so we

1382
00:25:14,390 --> 00:25:14,400
such as that we're using 38 yeah so we
 

1383
00:25:14,400 --> 00:25:16,789
such as that we're using 38 yeah so we
basically if the machine had more

1384
00:25:16,789 --> 00:25:16,799
basically if the machine had more
 

1385
00:25:16,799 --> 00:25:20,230
basically if the machine had more
uh ram than two to 38

1386
00:25:20,230 --> 00:25:20,240
uh ram than two to 38
 

1387
00:25:20,240 --> 00:25:23,350
uh ram than two to 38
we would not be able to use that ram now

1388
00:25:23,350 --> 00:25:23,360
we would not be able to use that ram now
 

1389
00:25:23,360 --> 00:25:24,549
we would not be able to use that ram now
we're already running with we're

1390
00:25:24,549 --> 00:25:24,559
we're already running with we're
 

1391
00:25:24,559 --> 00:25:26,950
we're already running with we're
assuming basically much less memory

1392
00:25:26,950 --> 00:25:26,960
assuming basically much less memory
 

1393
00:25:26,960 --> 00:25:29,350
assuming basically much less memory
than 2 to 38 so it's not a big deal for

1394
00:25:29,350 --> 00:25:29,360
than 2 to 38 so it's not a big deal for
 

1395
00:25:29,360 --> 00:25:30,470
than 2 to 38 so it's not a big deal for
us

1396
00:25:30,470 --> 00:25:30,480
us
 

1397
00:25:30,480 --> 00:25:32,390
us
but the real operating system would have

1398
00:25:32,390 --> 00:25:32,400
but the real operating system would have
 

1399
00:25:32,400 --> 00:25:36,230
but the real operating system would have
done better

1400
00:25:36,230 --> 00:25:36,240

 

1401
00:25:36,240 --> 00:25:39,190

so just pure for simplicity we want to

1402
00:25:39,190 --> 00:25:39,200
so just pure for simplicity we want to
 

1403
00:25:39,200 --> 00:25:40,310
so just pure for simplicity we want to
make it as easy as you

1404
00:25:40,310 --> 00:25:40,320
make it as easy as you
 

1405
00:25:40,320 --> 00:25:42,149
make it as easy as you
for you as possible by reading the few

1406
00:25:42,149 --> 00:25:42,159
for you as possible by reading the few
 

1407
00:25:42,159 --> 00:25:46,870
for you as possible by reading the few
lines of code possible

1408
00:25:46,870 --> 00:25:46,880

 

1409
00:25:46,880 --> 00:25:50,710

okay yeah makes sense

1410
00:25:50,710 --> 00:25:50,720
okay yeah makes sense
 

1411
00:25:50,720 --> 00:25:53,909
okay yeah makes sense
okay so now uh let's uh switch to uh

1412
00:25:53,909 --> 00:25:53,919
okay so now uh let's uh switch to uh
 

1413
00:25:53,919 --> 00:25:57,110
okay so now uh let's uh switch to uh
part two and so let's

1414
00:25:57,110 --> 00:25:57,120
part two and so let's
 

1415
00:25:57,120 --> 00:25:58,870
part two and so let's
bring up you know a picture you probably

1416
00:25:58,870 --> 00:25:58,880
bring up you know a picture you probably
 

1417
00:25:58,880 --> 00:26:00,310
bring up you know a picture you probably
have looked at a lot

1418
00:26:00,310 --> 00:26:00,320
have looked at a lot
 

1419
00:26:00,320 --> 00:26:03,029
have looked at a lot
uh the kernel dress space correct on the

1420
00:26:03,029 --> 00:26:03,039
uh the kernel dress space correct on the
 

1421
00:26:03,039 --> 00:26:03,430
uh the kernel dress space correct on the
left

1422
00:26:03,430 --> 00:26:03,440
left
 

1423
00:26:03,440 --> 00:26:05,750
left
is the virtual dress space on the right

1424
00:26:05,750 --> 00:26:05,760
is the virtual dress space on the right
 

1425
00:26:05,760 --> 00:26:07,430
is the virtual dress space on the right
is physical memory

1426
00:26:07,430 --> 00:26:07,440
is physical memory
 

1427
00:26:07,440 --> 00:26:11,029
is physical memory
uh you know here are your i o devices

1428
00:26:11,029 --> 00:26:11,039
uh you know here are your i o devices
 

1429
00:26:11,039 --> 00:26:16,149
uh you know here are your i o devices
and then from here on is you know dram

1430
00:26:16,149 --> 00:26:16,159

 

1431
00:26:16,159 --> 00:26:18,470

and you know and basically running until

1432
00:26:18,470 --> 00:26:18,480
and you know and basically running until
 

1433
00:26:18,480 --> 00:26:19,590
and you know and basically running until
what actually uh

1434
00:26:19,590 --> 00:26:19,600
what actually uh
 

1435
00:26:19,600 --> 00:26:24,310
what actually uh
120 28 megabytes um

1436
00:26:24,310 --> 00:26:24,320
120 28 megabytes um
 

1437
00:26:24,320 --> 00:26:25,909
120 28 megabytes um
for us because we just assume that

1438
00:26:25,909 --> 00:26:25,919
for us because we just assume that
 

1439
00:26:25,919 --> 00:26:27,510
for us because we just assume that
there's no more than 250

1440
00:26:27,510 --> 00:26:27,520
there's no more than 250
 

1441
00:26:27,520 --> 00:26:30,390
there's no more than 250
to fix 128 megabytes of memory and so

1442
00:26:30,390 --> 00:26:30,400
to fix 128 megabytes of memory and so
 

1443
00:26:30,400 --> 00:26:31,830
to fix 128 megabytes of memory and so
this part of the physical memory is the

1444
00:26:31,830 --> 00:26:31,840
this part of the physical memory is the
 

1445
00:26:31,840 --> 00:26:33,830
this part of the physical memory is the
free memory

1446
00:26:33,830 --> 00:26:33,840
free memory
 

1447
00:26:33,840 --> 00:26:36,870
free memory
and that from now is where the kernel uh

1448
00:26:36,870 --> 00:26:36,880
and that from now is where the kernel uh
 

1449
00:26:36,880 --> 00:26:39,590
and that from now is where the kernel uh
whoops i drew it a little bit wrong let

1450
00:26:39,590 --> 00:26:39,600
whoops i drew it a little bit wrong let
 

1451
00:26:39,600 --> 00:26:41,430
whoops i drew it a little bit wrong let
me be a little bit more careful

1452
00:26:41,430 --> 00:26:41,440
me be a little bit more careful
 

1453
00:26:41,440 --> 00:26:45,510
me be a little bit more careful
uh so here we basically have you know

1454
00:26:45,510 --> 00:26:45,520
uh so here we basically have you know
 

1455
00:26:45,520 --> 00:26:46,149
uh so here we basically have you know
kernel

1456
00:26:46,149 --> 00:26:46,159
kernel
 

1457
00:26:46,159 --> 00:26:49,029
kernel
text and data and then you know this

1458
00:26:49,029 --> 00:26:49,039
text and data and then you know this
 

1459
00:26:49,039 --> 00:26:50,710
text and data and then you know this
memory above you know it's basically

1460
00:26:50,710 --> 00:26:50,720
memory above you know it's basically
 

1461
00:26:50,720 --> 00:26:53,269
memory above you know it's basically
a memory that the kernel allocator has

1462
00:26:53,269 --> 00:26:53,279
a memory that the kernel allocator has
 

1463
00:26:53,279 --> 00:26:53,990
a memory that the kernel allocator has
and from there

1464
00:26:53,990 --> 00:26:54,000
and from there
 

1465
00:26:54,000 --> 00:26:56,070
and from there
we allocate memory for user programs we

1466
00:26:56,070 --> 00:26:56,080
we allocate memory for user programs we
 

1467
00:26:56,080 --> 00:26:58,149
we allocate memory for user programs we
allocate them for page tables etc

1468
00:26:58,149 --> 00:26:58,159
allocate them for page tables etc
 

1469
00:26:58,159 --> 00:26:59,350
allocate them for page tables etc
the kernel allocates everything from

1470
00:26:59,350 --> 00:26:59,360
the kernel allocates everything from
 

1471
00:26:59,360 --> 00:27:01,990
the kernel allocates everything from
there until it runs out of memory when

1472
00:27:01,990 --> 00:27:02,000
there until it runs out of memory when
 

1473
00:27:02,000 --> 00:27:03,990
there until it runs out of memory when
it runs out it gets to 128

1474
00:27:03,990 --> 00:27:04,000
it runs out it gets to 128
 

1475
00:27:04,000 --> 00:27:05,909
it runs out it gets to 128
megabytes and then it starts returning

1476
00:27:05,909 --> 00:27:05,919
megabytes and then it starts returning
 

1477
00:27:05,919 --> 00:27:08,630
megabytes and then it starts returning
errors or system calls

1478
00:27:08,630 --> 00:27:08,640
errors or system calls
 

1479
00:27:08,640 --> 00:27:12,310
errors or system calls
okay good uh so let me

1480
00:27:12,310 --> 00:27:12,320
okay good uh so let me
 

1481
00:27:12,320 --> 00:27:16,630
okay good uh so let me
pull up my uh first part correct in some

1482
00:27:16,630 --> 00:27:16,640
pull up my uh first part correct in some
 

1483
00:27:16,640 --> 00:27:18,549
pull up my uh first part correct in some
sense of this assignment again it was

1484
00:27:18,549 --> 00:27:18,559
sense of this assignment again it was
 

1485
00:27:18,559 --> 00:27:20,789
sense of this assignment again it was
the part two of the assignment was just

1486
00:27:20,789 --> 00:27:20,799
the part two of the assignment was just
 

1487
00:27:20,799 --> 00:27:23,110
the part two of the assignment was just
to

1488
00:27:23,110 --> 00:27:23,120

 

1489
00:27:23,120 --> 00:27:26,870

run with or copy the kernel page table

1490
00:27:26,870 --> 00:27:26,880
run with or copy the kernel page table
 

1491
00:27:26,880 --> 00:27:29,190
run with or copy the kernel page table
so that every process

1492
00:27:29,190 --> 00:27:29,200
so that every process
 

1493
00:27:29,200 --> 00:27:33,990
so that every process
has its own kernel page tables

1494
00:27:33,990 --> 00:27:34,000
has its own kernel page tables
 

1495
00:27:34,000 --> 00:27:36,149
has its own kernel page tables
and that was the basically that's the

1496
00:27:36,149 --> 00:27:36,159
and that was the basically that's the
 

1497
00:27:36,159 --> 00:27:37,669
and that was the basically that's the
the assignment here so let me

1498
00:27:37,669 --> 00:27:37,679
the assignment here so let me
 

1499
00:27:37,679 --> 00:27:39,029
the assignment here so let me
before jumping into the code let me

1500
00:27:39,029 --> 00:27:39,039
before jumping into the code let me
 

1501
00:27:39,039 --> 00:27:41,029
before jumping into the code let me
actually say a couple things uh

1502
00:27:41,029 --> 00:27:41,039
actually say a couple things uh
 

1503
00:27:41,039 --> 00:27:44,389
actually say a couple things uh
more general things about it uh so

1504
00:27:44,389 --> 00:27:44,399
more general things about it uh so
 

1505
00:27:44,399 --> 00:27:48,870
more general things about it uh so
part two

1506
00:27:48,870 --> 00:27:48,880
part two
 

1507
00:27:48,880 --> 00:27:52,470
part two
um uh

1508
00:27:52,470 --> 00:27:52,480
um uh
 

1509
00:27:52,480 --> 00:27:53,750
um uh
and you know maybe the first question

1510
00:27:53,750 --> 00:27:53,760
and you know maybe the first question
 

1511
00:27:53,760 --> 00:27:55,590
and you know maybe the first question
really that uh sort of getting get your

1512
00:27:55,590 --> 00:27:55,600
really that uh sort of getting get your
 

1513
00:27:55,600 --> 00:27:56,870
really that uh sort of getting get your
head around is like in

1514
00:27:56,870 --> 00:27:56,880
head around is like in
 

1515
00:27:56,880 --> 00:27:58,230
head around is like in
some way it's gonna do something trivial

1516
00:27:58,230 --> 00:27:58,240
some way it's gonna do something trivial
 

1517
00:27:58,240 --> 00:27:59,590
some way it's gonna do something trivial
right we already have a kernel page

1518
00:27:59,590 --> 00:27:59,600
right we already have a kernel page
 

1519
00:27:59,600 --> 00:28:01,669
right we already have a kernel page
table we just have to make end copies of

1520
00:28:01,669 --> 00:28:01,679
table we just have to make end copies of
 

1521
00:28:01,679 --> 00:28:03,190
table we just have to make end copies of
it you know for one copy for each

1522
00:28:03,190 --> 00:28:03,200
it you know for one copy for each
 

1523
00:28:03,200 --> 00:28:04,710
it you know for one copy for each
particular process

1524
00:28:04,710 --> 00:28:04,720
particular process
 

1525
00:28:04,720 --> 00:28:07,110
particular process
um and you might say well you know how

1526
00:28:07,110 --> 00:28:07,120
um and you might say well you know how
 

1527
00:28:07,120 --> 00:28:07,990
um and you might say well you know how
hard can it be

1528
00:28:07,990 --> 00:28:08,000
hard can it be
 

1529
00:28:08,000 --> 00:28:09,110
hard can it be
uh and it turns out i think it was a

1530
00:28:09,110 --> 00:28:09,120
uh and it turns out i think it was a
 

1531
00:28:09,120 --> 00:28:11,430
uh and it turns out i think it was a
little bit harder for a couple reasons

1532
00:28:11,430 --> 00:28:11,440
little bit harder for a couple reasons
 

1533
00:28:11,440 --> 00:28:14,870
little bit harder for a couple reasons
some good ones some less good ones uh

1534
00:28:14,870 --> 00:28:14,880
some good ones some less good ones uh
 

1535
00:28:14,880 --> 00:28:20,470
some good ones some less good ones uh
hardening seams

1536
00:28:20,470 --> 00:28:20,480

 

1537
00:28:20,480 --> 00:28:23,350

and you know one reason is that uh you

1538
00:28:23,350 --> 00:28:23,360
and you know one reason is that uh you
 

1539
00:28:23,360 --> 00:28:26,870
and you know one reason is that uh you
know the xv6 code

1540
00:28:26,870 --> 00:28:26,880

 

1541
00:28:26,880 --> 00:28:29,350

is sort of specialized for one kernel

1542
00:28:29,350 --> 00:28:29,360
is sort of specialized for one kernel
 

1543
00:28:29,360 --> 00:28:38,789
is sort of specialized for one kernel
page table

1544
00:28:38,789 --> 00:28:38,799

 

1545
00:28:38,799 --> 00:28:42,830

and you know you saw that in kvm init

1546
00:28:42,830 --> 00:28:42,840
and you know you saw that in kvm init
 

1547
00:28:42,840 --> 00:28:45,190
and you know you saw that in kvm init
uh and so that makes it a

1548
00:28:45,190 --> 00:28:45,200
uh and so that makes it a
 

1549
00:28:45,200 --> 00:28:48,070
uh and so that makes it a
little bit uh uh you know generalizing

1550
00:28:48,070 --> 00:28:48,080
little bit uh uh you know generalizing
 

1551
00:28:48,080 --> 00:28:48,549
little bit uh uh you know generalizing
you know

1552
00:28:48,549 --> 00:28:48,559
you know
 

1553
00:28:48,559 --> 00:28:49,669
you know
actually a little bit of work because

1554
00:28:49,669 --> 00:28:49,679
actually a little bit of work because
 

1555
00:28:49,679 --> 00:28:52,470
actually a little bit of work because
you actually have to modify the xv6 code

1556
00:28:52,470 --> 00:28:52,480
you actually have to modify the xv6 code
 

1557
00:28:52,480 --> 00:28:56,389
you actually have to modify the xv6 code
um kvm in it as you also saw

1558
00:28:56,389 --> 00:28:56,399
um kvm in it as you also saw
 

1559
00:28:56,399 --> 00:28:58,870
um kvm in it as you also saw
is not the full story you know for

1560
00:28:58,870 --> 00:28:58,880
is not the full story you know for
 

1561
00:28:58,880 --> 00:28:59,990
is not the full story you know for
building the

1562
00:28:59,990 --> 00:29:00,000
building the
 

1563
00:29:00,000 --> 00:29:02,310
building the
uh page table uh for the kernel you know

1564
00:29:02,310 --> 00:29:02,320
uh page table uh for the kernel you know
 

1565
00:29:02,320 --> 00:29:04,630
uh page table uh for the kernel you know
there's also stuff in prop unit

1566
00:29:04,630 --> 00:29:04,640
there's also stuff in prop unit
 

1567
00:29:04,640 --> 00:29:06,470
there's also stuff in prop unit
that actually adds mappings to the

1568
00:29:06,470 --> 00:29:06,480
that actually adds mappings to the
 

1569
00:29:06,480 --> 00:29:07,909
that actually adds mappings to the
kernel page table

1570
00:29:07,909 --> 00:29:07,919
kernel page table
 

1571
00:29:07,919 --> 00:29:09,990
kernel page table
and there's even something in uh virgi

1572
00:29:09,990 --> 00:29:10,000
and there's even something in uh virgi
 

1573
00:29:10,000 --> 00:29:11,990
and there's even something in uh virgi
io disk

1574
00:29:11,990 --> 00:29:12,000
io disk
 

1575
00:29:12,000 --> 00:29:13,510
io disk
that actually interacts you know with

1576
00:29:13,510 --> 00:29:13,520
that actually interacts you know with
 

1577
00:29:13,520 --> 00:29:16,149
that actually interacts you know with
the kernel page table

1578
00:29:16,149 --> 00:29:16,159
the kernel page table
 

1579
00:29:16,159 --> 00:29:18,230
the kernel page table
so basically there's no one single place

1580
00:29:18,230 --> 00:29:18,240
so basically there's no one single place
 

1581
00:29:18,240 --> 00:29:19,990
so basically there's no one single place
in the kernel where actually the kernel

1582
00:29:19,990 --> 00:29:20,000
in the kernel where actually the kernel
 

1583
00:29:20,000 --> 00:29:22,789
in the kernel where actually the kernel
page table actually is built

1584
00:29:22,789 --> 00:29:22,799
page table actually is built
 

1585
00:29:22,799 --> 00:29:24,870
page table actually is built
then the third reason why you know this

1586
00:29:24,870 --> 00:29:24,880
then the third reason why you know this
 

1587
00:29:24,880 --> 00:29:26,230
then the third reason why you know this
is slightly complicated is because you

1588
00:29:26,230 --> 00:29:26,240
is slightly complicated is because you
 

1589
00:29:26,240 --> 00:29:29,110
is slightly complicated is because you
also have to deal with cleanup

1590
00:29:29,110 --> 00:29:29,120
also have to deal with cleanup
 

1591
00:29:29,120 --> 00:29:31,669
also have to deal with cleanup
uh so there's the aspect of actually

1592
00:29:31,669 --> 00:29:31,679
uh so there's the aspect of actually
 

1593
00:29:31,679 --> 00:29:33,029
uh so there's the aspect of actually
creating these copies

1594
00:29:33,029 --> 00:29:33,039
creating these copies
 

1595
00:29:33,039 --> 00:29:36,070
creating these copies
but whenever time a user process exit we

1596
00:29:36,070 --> 00:29:36,080
but whenever time a user process exit we
 

1597
00:29:36,080 --> 00:29:37,430
but whenever time a user process exit we
also have to clean up

1598
00:29:37,430 --> 00:29:37,440
also have to clean up
 

1599
00:29:37,440 --> 00:29:40,149
also have to clean up
those uh page samples that were in use

1600
00:29:40,149 --> 00:29:40,159
those uh page samples that were in use
 

1601
00:29:40,159 --> 00:29:42,230
those uh page samples that were in use
because we want to return them to the

1602
00:29:42,230 --> 00:29:42,240
because we want to return them to the
 

1603
00:29:42,240 --> 00:29:43,990
because we want to return them to the
pool of free memory so that we can use

1604
00:29:43,990 --> 00:29:44,000
pool of free memory so that we can use
 

1605
00:29:44,000 --> 00:29:45,830
pool of free memory so that we can use
them later uh so that we can keep on

1606
00:29:45,830 --> 00:29:45,840
them later uh so that we can keep on
 

1607
00:29:45,840 --> 00:29:48,149
them later uh so that we can keep on
running processes

1608
00:29:48,149 --> 00:29:48,159
running processes
 

1609
00:29:48,159 --> 00:29:51,669
running processes
and so that is the and that makes

1610
00:29:51,669 --> 00:29:51,679
and so that is the and that makes
 

1611
00:29:51,679 --> 00:29:52,870
and so that is the and that makes
things a little bit complicated because

1612
00:29:52,870 --> 00:29:52,880
things a little bit complicated because
 

1613
00:29:52,880 --> 00:29:54,070
things a little bit complicated because
you know we got to be a little bit

1614
00:29:54,070 --> 00:29:54,080
you know we got to be a little bit
 

1615
00:29:54,080 --> 00:29:55,590
you know we got to be a little bit
careful in actually

1616
00:29:55,590 --> 00:29:55,600
careful in actually
 

1617
00:29:55,600 --> 00:29:57,830
careful in actually
freeing the kernel page table or a copy

1618
00:29:57,830 --> 00:29:57,840
freeing the kernel page table or a copy
 

1619
00:29:57,840 --> 00:29:59,110
freeing the kernel page table or a copy
of the kernel page table

1620
00:29:59,110 --> 00:29:59,120
of the kernel page table
 

1621
00:29:59,120 --> 00:30:00,549
of the kernel page table
but you certainly don't want to you know

1622
00:30:00,549 --> 00:30:00,559
but you certainly don't want to you know
 

1623
00:30:00,559 --> 00:30:03,029
but you certainly don't want to you know
free uh memory that's actually still in

1624
00:30:03,029 --> 00:30:03,039
free uh memory that's actually still in
 

1625
00:30:03,039 --> 00:30:04,710
free uh memory that's actually still in
use or page table entries that's still

1626
00:30:04,710 --> 00:30:04,720
use or page table entries that's still
 

1627
00:30:04,720 --> 00:30:06,870
use or page table entries that's still
in use by other page tables

1628
00:30:06,870 --> 00:30:06,880
in use by other page tables
 

1629
00:30:06,880 --> 00:30:08,870
in use by other page tables
so we've got to be careful there and

1630
00:30:08,870 --> 00:30:08,880
so we've got to be careful there and
 

1631
00:30:08,880 --> 00:30:10,070
so we've got to be careful there and
then uh

1632
00:30:10,070 --> 00:30:10,080
then uh
 

1633
00:30:10,080 --> 00:30:12,070
then uh
you know basically it's easy to make a

1634
00:30:12,070 --> 00:30:12,080
you know basically it's easy to make a
 

1635
00:30:12,080 --> 00:30:14,230
you know basically it's easy to make a
small error

1636
00:30:14,230 --> 00:30:14,240
small error
 

1637
00:30:14,240 --> 00:30:15,909
small error
in your page table when you copy those

1638
00:30:15,909 --> 00:30:15,919
in your page table when you copy those
 

1639
00:30:15,919 --> 00:30:17,269
in your page table when you copy those
page tables

1640
00:30:17,269 --> 00:30:17,279
page tables
 

1641
00:30:17,279 --> 00:30:19,669
page tables
uh you know if you get a little thing uh

1642
00:30:19,669 --> 00:30:19,679
uh you know if you get a little thing uh
 

1643
00:30:19,679 --> 00:30:21,190
uh you know if you get a little thing uh
you know visually you get a hard

1644
00:30:21,190 --> 00:30:21,200
you know visually you get a hard
 

1645
00:30:21,200 --> 00:30:24,230
you know visually you get a hard
hard buck

1646
00:30:24,230 --> 00:30:24,240

 

1647
00:30:24,240 --> 00:30:26,470

and and one of the problems here is i

1648
00:30:26,470 --> 00:30:26,480
and and one of the problems here is i
 

1649
00:30:26,480 --> 00:30:27,909
and and one of the problems here is i
said a little bit earlier is

1650
00:30:27,909 --> 00:30:27,919
said a little bit earlier is
 

1651
00:30:27,919 --> 00:30:29,909
said a little bit earlier is
uh the hard part shows up and much much

1652
00:30:29,909 --> 00:30:29,919
uh the hard part shows up and much much
 

1653
00:30:29,919 --> 00:30:31,750
uh the hard part shows up and much much
much later right you built the kernel

1654
00:30:31,750 --> 00:30:31,760
much later right you built the kernel
 

1655
00:30:31,760 --> 00:30:33,190
much later right you built the kernel
page table so you built a copy of the

1656
00:30:33,190 --> 00:30:33,200
page table so you built a copy of the
 

1657
00:30:33,200 --> 00:30:33,750
page table so you built a copy of the
kernel

1658
00:30:33,750 --> 00:30:33,760
kernel
 

1659
00:30:33,760 --> 00:30:36,710
kernel
page table all looks fine you look

1660
00:30:36,710 --> 00:30:36,720
page table all looks fine you look
 

1661
00:30:36,720 --> 00:30:38,389
page table all looks fine you look
loaded in satp

1662
00:30:38,389 --> 00:30:38,399
loaded in satp
 

1663
00:30:38,399 --> 00:30:40,230
loaded in satp
then even maybe the kernel runs for a

1664
00:30:40,230 --> 00:30:40,240
then even maybe the kernel runs for a
 

1665
00:30:40,240 --> 00:30:42,470
then even maybe the kernel runs for a
little while and then it panics

1666
00:30:42,470 --> 00:30:42,480
little while and then it panics
 

1667
00:30:42,480 --> 00:30:44,149
little while and then it panics
and it turns out you know the reason it

1668
00:30:44,149 --> 00:30:44,159
and it turns out you know the reason it
 

1669
00:30:44,159 --> 00:30:45,669
and it turns out you know the reason it
panics is because you know you made some

1670
00:30:45,669 --> 00:30:45,679
panics is because you know you made some
 

1671
00:30:45,679 --> 00:30:46,549
panics is because you know you made some
small mistake

1672
00:30:46,549 --> 00:30:46,559
small mistake
 

1673
00:30:46,559 --> 00:30:49,909
small mistake
in the page table a long long time ago

1674
00:30:49,909 --> 00:30:49,919
in the page table a long long time ago
 

1675
00:30:49,919 --> 00:30:50,710
in the page table a long long time ago
and so this is

1676
00:30:50,710 --> 00:30:50,720
and so this is
 

1677
00:30:50,720 --> 00:30:53,430
and so this is
one reason why it makes uh makes life

1678
00:30:53,430 --> 00:30:53,440
one reason why it makes uh makes life
 

1679
00:30:53,440 --> 00:30:53,990
one reason why it makes uh makes life
difficult

1680
00:30:53,990 --> 00:30:54,000
difficult
 

1681
00:30:54,000 --> 00:30:57,029
difficult
uh for kernel programming

1682
00:30:57,029 --> 00:30:57,039
uh for kernel programming
 

1683
00:30:57,039 --> 00:30:58,470
uh for kernel programming
and you know and basically you know

1684
00:30:58,470 --> 00:30:58,480
and you know and basically you know
 

1685
00:30:58,480 --> 00:30:59,909
and you know and basically you know
these hard debugs basically are just

1686
00:30:59,909 --> 00:30:59,919
these hard debugs basically are just
 

1687
00:30:59,919 --> 00:31:01,269
these hard debugs basically are just
time consuming

1688
00:31:01,269 --> 00:31:01,279
time consuming
 

1689
00:31:01,279 --> 00:31:11,509
time consuming
to track down

1690
00:31:11,509 --> 00:31:11,519

 

1691
00:31:11,519 --> 00:31:12,870

because at the point that the bug no it

1692
00:31:12,870 --> 00:31:12,880
because at the point that the bug no it
 

1693
00:31:12,880 --> 00:31:15,029
because at the point that the bug no it
happens uh that's actually not the real

1694
00:31:15,029 --> 00:31:15,039
happens uh that's actually not the real
 

1695
00:31:15,039 --> 00:31:15,750
happens uh that's actually not the real
cause

1696
00:31:15,750 --> 00:31:15,760
cause
 

1697
00:31:15,760 --> 00:31:17,750
cause
uh of the bug but about you know the

1698
00:31:17,750 --> 00:31:17,760
uh of the bug but about you know the
 

1699
00:31:17,760 --> 00:31:19,430
uh of the bug but about you know the
real cost is you know someone was way

1700
00:31:19,430 --> 00:31:19,440
real cost is you know someone was way
 

1701
00:31:19,440 --> 00:31:20,710
real cost is you know someone was way
earlier when you set up

1702
00:31:20,710 --> 00:31:20,720
earlier when you set up
 

1703
00:31:20,720 --> 00:31:23,750
earlier when you set up
the page tables

1704
00:31:23,750 --> 00:31:23,760

 

1705
00:31:23,760 --> 00:31:27,430

okay uh so it turns out

1706
00:31:27,430 --> 00:31:27,440
okay uh so it turns out
 

1707
00:31:27,440 --> 00:31:30,549
okay uh so it turns out
uh there's two approaches to go about it

1708
00:31:30,549 --> 00:31:30,559
uh there's two approaches to go about it
 

1709
00:31:30,559 --> 00:31:34,070
uh there's two approaches to go about it
now to this lap which is sort of uh

1710
00:31:34,070 --> 00:31:34,080
now to this lap which is sort of uh
 

1711
00:31:34,080 --> 00:31:38,789
now to this lap which is sort of uh
two solution approaches

1712
00:31:38,789 --> 00:31:38,799

 

1713
00:31:38,799 --> 00:31:40,310

in fact some of you have probably used a

1714
00:31:40,310 --> 00:31:40,320
in fact some of you have probably used a
 

1715
00:31:40,320 --> 00:31:41,990
in fact some of you have probably used a
mixture of them uh

1716
00:31:41,990 --> 00:31:42,000
mixture of them uh
 

1717
00:31:42,000 --> 00:31:44,389
mixture of them uh
but one you know approach what i'll call

1718
00:31:44,389 --> 00:31:44,399
but one you know approach what i'll call
 

1719
00:31:44,399 --> 00:31:47,509
but one you know approach what i'll call
the copy approach

1720
00:31:47,509 --> 00:31:47,519
the copy approach
 

1721
00:31:47,519 --> 00:31:48,950
the copy approach
and the copy approach basically

1722
00:31:48,950 --> 00:31:48,960
and the copy approach basically
 

1723
00:31:48,960 --> 00:31:50,630
and the copy approach basically
literally makes a copy to the kernel

1724
00:31:50,630 --> 00:31:50,640
literally makes a copy to the kernel
 

1725
00:31:50,640 --> 00:31:51,509
literally makes a copy to the kernel
page table

1726
00:31:51,509 --> 00:31:51,519
page table
 

1727
00:31:51,519 --> 00:31:54,630
page table
uh so every time you uh

1728
00:31:54,630 --> 00:31:54,640
uh so every time you uh
 

1729
00:31:54,640 --> 00:31:56,870
uh so every time you uh
you can do a kernel page table you

1730
00:31:56,870 --> 00:31:56,880
you can do a kernel page table you
 

1731
00:31:56,880 --> 00:31:58,710
you can do a kernel page table you
allocate pages for the page table

1732
00:31:58,710 --> 00:31:58,720
allocate pages for the page table
 

1733
00:31:58,720 --> 00:32:02,870
allocate pages for the page table
you fill them in et cetera et cetera

1734
00:32:02,870 --> 00:32:02,880
you fill them in et cetera et cetera
 

1735
00:32:02,880 --> 00:32:05,909
you fill them in et cetera et cetera
and there's a that's one approach the

1736
00:32:05,909 --> 00:32:05,919
and there's a that's one approach the
 

1737
00:32:05,919 --> 00:32:08,310
and there's a that's one approach the
second approach

1738
00:32:08,310 --> 00:32:08,320
second approach
 

1739
00:32:08,320 --> 00:32:13,990
second approach
is basically to share

1740
00:32:13,990 --> 00:32:14,000
is basically to share
 

1741
00:32:14,000 --> 00:32:16,870
is basically to share
uh the kernel page table and in this

1742
00:32:16,870 --> 00:32:16,880
uh the kernel page table and in this
 

1743
00:32:16,880 --> 00:32:17,830
uh the kernel page table and in this
case what you do

1744
00:32:17,830 --> 00:32:17,840
case what you do
 

1745
00:32:17,840 --> 00:32:19,590
case what you do
is like instead of trying to make a

1746
00:32:19,590 --> 00:32:19,600
is like instead of trying to make a
 

1747
00:32:19,600 --> 00:32:21,669
is like instead of trying to make a
literally nice clean copy of the kernel

1748
00:32:21,669 --> 00:32:21,679
literally nice clean copy of the kernel
 

1749
00:32:21,679 --> 00:32:22,710
literally nice clean copy of the kernel
page tables

1750
00:32:22,710 --> 00:32:22,720
page tables
 

1751
00:32:22,720 --> 00:32:24,149
page tables
you share all the entries that are

1752
00:32:24,149 --> 00:32:24,159
you share all the entries that are
 

1753
00:32:24,159 --> 00:32:27,269
you share all the entries that are
basically uh are going to be unmodified

1754
00:32:27,269 --> 00:32:27,279
basically uh are going to be unmodified
 

1755
00:32:27,279 --> 00:32:29,029
basically uh are going to be unmodified
uh you know from the assignment that

1756
00:32:29,029 --> 00:32:29,039
uh you know from the assignment that
 

1757
00:32:29,039 --> 00:32:30,710
uh you know from the assignment that
basically anything above

1758
00:32:30,710 --> 00:32:30,720
basically anything above
 

1759
00:32:30,720 --> 00:32:32,710
basically anything above
uh claimed or the click address is

1760
00:32:32,710 --> 00:32:32,720
uh claimed or the click address is
 

1761
00:32:32,720 --> 00:32:34,549
uh claimed or the click address is
actually going to be unchanged or

1762
00:32:34,549 --> 00:32:34,559
actually going to be unchanged or
 

1763
00:32:34,559 --> 00:32:35,990
actually going to be unchanged or
unmodified you know there's nothing you

1764
00:32:35,990 --> 00:32:36,000
unmodified you know there's nothing you
 

1765
00:32:36,000 --> 00:32:37,269
unmodified you know there's nothing you
have to load there

1766
00:32:37,269 --> 00:32:37,279
have to load there
 

1767
00:32:37,279 --> 00:32:39,590
have to load there
uh in part three so you know what

1768
00:32:39,590 --> 00:32:39,600
uh in part three so you know what
 

1769
00:32:39,600 --> 00:32:40,389
uh in part three so you know what
basically

1770
00:32:40,389 --> 00:32:40,399
basically
 

1771
00:32:40,399 --> 00:32:42,710
basically
all the entries from above zero are

1772
00:32:42,710 --> 00:32:42,720
all the entries from above zero are
 

1773
00:32:42,720 --> 00:32:44,789
all the entries from above zero are
probably identical and so you can share

1774
00:32:44,789 --> 00:32:44,799
probably identical and so you can share
 

1775
00:32:44,799 --> 00:32:46,950
probably identical and so you can share
those entries if you will

1776
00:32:46,950 --> 00:32:46,960
those entries if you will
 

1777
00:32:46,960 --> 00:32:49,750
those entries if you will
um so both approaches are i think

1778
00:32:49,750 --> 00:32:49,760
um so both approaches are i think
 

1779
00:32:49,760 --> 00:32:51,029
um so both approaches are i think
perfectly fine

1780
00:32:51,029 --> 00:32:51,039
perfectly fine
 

1781
00:32:51,039 --> 00:32:54,070
perfectly fine
uh it's not abundantly clear which one

1782
00:32:54,070 --> 00:32:54,080
uh it's not abundantly clear which one
 

1783
00:32:54,080 --> 00:32:55,509
uh it's not abundantly clear which one
is the better one

1784
00:32:55,509 --> 00:32:55,519
is the better one
 

1785
00:32:55,519 --> 00:32:58,870
is the better one
my solutions take this approach uh

1786
00:32:58,870 --> 00:32:58,880
my solutions take this approach uh
 

1787
00:32:58,880 --> 00:33:01,590
my solutions take this approach uh
and um i don't really have a great

1788
00:33:01,590 --> 00:33:01,600
and um i don't really have a great
 

1789
00:33:01,600 --> 00:33:02,710
and um i don't really have a great
justification for it

1790
00:33:02,710 --> 00:33:02,720
justification for it
 

1791
00:33:02,720 --> 00:33:06,310
justification for it
other than maybe uh you know partially

1792
00:33:06,310 --> 00:33:06,320
other than maybe uh you know partially
 

1793
00:33:06,320 --> 00:33:07,269
other than maybe uh you know partially
laziness

1794
00:33:07,269 --> 00:33:07,279
laziness
 

1795
00:33:07,279 --> 00:33:08,950
laziness
i didn't want to think too hard what's

1796
00:33:08,950 --> 00:33:08,960
i didn't want to think too hard what's
 

1797
00:33:08,960 --> 00:33:10,389
i didn't want to think too hard what's
in the kernel page table and

1798
00:33:10,389 --> 00:33:10,399
in the kernel page table and
 

1799
00:33:10,399 --> 00:33:11,830
in the kernel page table and
so i figured all the things that are

1800
00:33:11,830 --> 00:33:11,840
so i figured all the things that are
 

1801
00:33:11,840 --> 00:33:13,590
so i figured all the things that are
going to stay the same why do you just

1802
00:33:13,590 --> 00:33:13,600
going to stay the same why do you just
 

1803
00:33:13,600 --> 00:33:14,630
going to stay the same why do you just
i'm copying them over

1804
00:33:14,630 --> 00:33:14,640
i'm copying them over
 

1805
00:33:14,640 --> 00:33:17,750
i'm copying them over
or you know copy the ptes over

1806
00:33:17,750 --> 00:33:17,760
or you know copy the ptes over
 

1807
00:33:17,760 --> 00:33:19,269
or you know copy the ptes over
and then i have to think too hard what

1808
00:33:19,269 --> 00:33:19,279
and then i have to think too hard what
 

1809
00:33:19,279 --> 00:33:20,630
and then i have to think too hard what
actually isn't that part of the kernel

1810
00:33:20,630 --> 00:33:20,640
actually isn't that part of the kernel
 

1811
00:33:20,640 --> 00:33:23,430
actually isn't that part of the kernel
address space

1812
00:33:23,430 --> 00:33:23,440

 

1813
00:33:23,440 --> 00:33:25,590

and you know leads to short codes but

1814
00:33:25,590 --> 00:33:25,600
and you know leads to short codes but
 

1815
00:33:25,600 --> 00:33:26,789
and you know leads to short codes but
you know i'm not sure it actually is

1816
00:33:26,789 --> 00:33:26,799
you know i'm not sure it actually is
 

1817
00:33:26,799 --> 00:33:28,389
you know i'm not sure it actually is
shorter than for example the copy

1818
00:33:28,389 --> 00:33:28,399
shorter than for example the copy
 

1819
00:33:28,399 --> 00:33:29,509
shorter than for example the copy
solution

1820
00:33:29,509 --> 00:33:29,519
solution
 

1821
00:33:29,519 --> 00:33:30,710
solution
but it's important to realize that

1822
00:33:30,710 --> 00:33:30,720
but it's important to realize that
 

1823
00:33:30,720 --> 00:33:32,549
but it's important to realize that
basically there are two different ways

1824
00:33:32,549 --> 00:33:32,559
basically there are two different ways
 

1825
00:33:32,559 --> 00:33:34,149
basically there are two different ways
of going about this particular

1826
00:33:34,149 --> 00:33:34,159
of going about this particular
 

1827
00:33:34,159 --> 00:33:38,389
of going about this particular
uh problem in either case uh

1828
00:33:38,389 --> 00:33:38,399
uh problem in either case uh
 

1829
00:33:38,399 --> 00:33:40,310
uh problem in either case uh
you know whatever approach you use you

1830
00:33:40,310 --> 00:33:40,320
you know whatever approach you use you
 

1831
00:33:40,320 --> 00:33:41,430
you know whatever approach you use you
know there's sort of an implementation

1832
00:33:41,430 --> 00:33:41,440
know there's sort of an implementation
 

1833
00:33:41,440 --> 00:33:42,789
know there's sort of an implementation
strategy to it

1834
00:33:42,789 --> 00:33:42,799
strategy to it
 

1835
00:33:42,799 --> 00:33:44,549
strategy to it
and you know the implementation strategy

1836
00:33:44,549 --> 00:33:44,559
and you know the implementation strategy
 

1837
00:33:44,559 --> 00:33:45,990
and you know the implementation strategy
that i use for almost any

1838
00:33:45,990 --> 00:33:46,000
that i use for almost any
 

1839
00:33:46,000 --> 00:33:49,190
that i use for almost any
uh kernel program is to do everything in

1840
00:33:49,190 --> 00:33:49,200
uh kernel program is to do everything in
 

1841
00:33:49,200 --> 00:33:53,029
uh kernel program is to do everything in
baby steps

1842
00:33:53,029 --> 00:33:53,039
baby steps
 

1843
00:33:53,039 --> 00:33:55,430
baby steps
so i might have sort of a general plan

1844
00:33:55,430 --> 00:33:55,440
so i might have sort of a general plan
 

1845
00:33:55,440 --> 00:33:57,350
so i might have sort of a general plan
in my head about how i go over the whole

1846
00:33:57,350 --> 00:33:57,360
in my head about how i go over the whole
 

1847
00:33:57,360 --> 00:33:59,269
in my head about how i go over the whole
uh you know all the changes i want to

1848
00:33:59,269 --> 00:33:59,279
uh you know all the changes i want to
 

1849
00:33:59,279 --> 00:34:01,350
uh you know all the changes i want to
make uh but once i start making those

1850
00:34:01,350 --> 00:34:01,360
make uh but once i start making those
 

1851
00:34:01,360 --> 00:34:01,990
make uh but once i start making those
changes

1852
00:34:01,990 --> 00:34:02,000
changes
 

1853
00:34:02,000 --> 00:34:04,870
changes
i do like one or two and then make sure

1854
00:34:04,870 --> 00:34:04,880
i do like one or two and then make sure
 

1855
00:34:04,880 --> 00:34:07,350
i do like one or two and then make sure
that those work first and then

1856
00:34:07,350 --> 00:34:07,360
that those work first and then
 

1857
00:34:07,360 --> 00:34:10,470
that those work first and then
uh you know keep going and the other

1858
00:34:10,470 --> 00:34:10,480
uh you know keep going and the other
 

1859
00:34:10,480 --> 00:34:12,149
uh you know keep going and the other
thing i do is mostly here's as a

1860
00:34:12,149 --> 00:34:12,159
thing i do is mostly here's as a
 

1861
00:34:12,159 --> 00:34:18,629
thing i do is mostly here's as a
strategy is keep the existing code

1862
00:34:18,629 --> 00:34:18,639

 

1863
00:34:18,639 --> 00:34:20,550

don't really modify it certainly not

1864
00:34:20,550 --> 00:34:20,560
don't really modify it certainly not
 

1865
00:34:20,560 --> 00:34:22,790
don't really modify it certainly not
initially i just add code

1866
00:34:22,790 --> 00:34:22,800
initially i just add code
 

1867
00:34:22,800 --> 00:34:25,909
initially i just add code
and switch to this new code and then the

1868
00:34:25,909 --> 00:34:25,919
and switch to this new code and then the
 

1869
00:34:25,919 --> 00:34:27,190
and switch to this new code and then the
little baby steps and the reason i'm

1870
00:34:27,190 --> 00:34:27,200
little baby steps and the reason i'm
 

1871
00:34:27,200 --> 00:34:29,270
little baby steps and the reason i'm
doing that is that i can easily compare

1872
00:34:29,270 --> 00:34:29,280
doing that is that i can easily compare
 

1873
00:34:29,280 --> 00:34:32,069
doing that is that i can easily compare
all the new code and i always have a

1874
00:34:32,069 --> 00:34:32,079
all the new code and i always have a
 

1875
00:34:32,079 --> 00:34:33,909
all the new code and i always have a
working old solution that i can just

1876
00:34:33,909 --> 00:34:33,919
working old solution that i can just
 

1877
00:34:33,919 --> 00:34:34,950
working old solution that i can just
roll back to

1878
00:34:34,950 --> 00:34:34,960
roll back to
 

1879
00:34:34,960 --> 00:34:36,470
roll back to
uh so in case of some strange bugs

1880
00:34:36,470 --> 00:34:36,480
uh so in case of some strange bugs
 

1881
00:34:36,480 --> 00:34:38,069
uh so in case of some strange bugs
happens then i can go back maybe one

1882
00:34:38,069 --> 00:34:38,079
happens then i can go back maybe one
 

1883
00:34:38,079 --> 00:34:39,030
happens then i can go back maybe one
step

1884
00:34:39,030 --> 00:34:39,040
step
 

1885
00:34:39,040 --> 00:34:41,669
step
uh and then try again and see figure out

1886
00:34:41,669 --> 00:34:41,679
uh and then try again and see figure out
 

1887
00:34:41,679 --> 00:34:43,109
uh and then try again and see figure out
like actually where my reasoning was

1888
00:34:43,109 --> 00:34:43,119
like actually where my reasoning was
 

1889
00:34:43,119 --> 00:34:44,470
like actually where my reasoning was
wrong

1890
00:34:44,470 --> 00:34:44,480
wrong
 

1891
00:34:44,480 --> 00:34:47,669
wrong
uh but basically you know baby steps

1892
00:34:47,669 --> 00:34:47,679
uh but basically you know baby steps
 

1893
00:34:47,679 --> 00:34:49,109
uh but basically you know baby steps
what partly because these blocks are so

1894
00:34:49,109 --> 00:34:49,119
what partly because these blocks are so
 

1895
00:34:49,119 --> 00:34:52,950
what partly because these blocks are so
hard to track down

1896
00:34:52,950 --> 00:34:52,960

 

1897
00:34:52,960 --> 00:34:57,030

okay let me switch to

1898
00:34:57,030 --> 00:34:57,040
okay let me switch to
 

1899
00:34:57,040 --> 00:35:00,150
okay let me switch to
like code um so

1900
00:35:00,150 --> 00:35:00,160
like code um so
 

1901
00:35:00,160 --> 00:35:03,750
like code um so
maybe start in vm dot cd uh so

1902
00:35:03,750 --> 00:35:03,760
maybe start in vm dot cd uh so
 

1903
00:35:03,760 --> 00:35:08,310
maybe start in vm dot cd uh so
the here's the uh existing kvm in it

1904
00:35:08,310 --> 00:35:08,320
the here's the uh existing kvm in it
 

1905
00:35:08,320 --> 00:35:10,950
the here's the uh existing kvm in it
uh and actually uh can everybody see the

1906
00:35:10,950 --> 00:35:10,960
uh and actually uh can everybody see the
 

1907
00:35:10,960 --> 00:35:12,470
uh and actually uh can everybody see the
code

1908
00:35:12,470 --> 00:35:12,480
code
 

1909
00:35:12,480 --> 00:35:16,069
code
okay okay uh

1910
00:35:16,069 --> 00:35:16,079
okay okay uh
 

1911
00:35:16,079 --> 00:35:19,270
okay okay uh
and um the

1912
00:35:19,270 --> 00:35:19,280
and um the
 

1913
00:35:19,280 --> 00:35:21,030
and um the
assignment that we are asked for correct

1914
00:35:21,030 --> 00:35:21,040
assignment that we are asked for correct
 

1915
00:35:21,040 --> 00:35:23,030
assignment that we are asked for correct
is to make a copy of it

1916
00:35:23,030 --> 00:35:23,040
is to make a copy of it
 

1917
00:35:23,040 --> 00:35:26,310
is to make a copy of it
and the way i do that is

1918
00:35:26,310 --> 00:35:26,320
and the way i do that is
 

1919
00:35:26,320 --> 00:35:39,670
and the way i do that is
let me see where that is

1920
00:35:39,670 --> 00:35:39,680

 

1921
00:35:39,680 --> 00:35:42,550

so here's my uvm create that was the

1922
00:35:42,550 --> 00:35:42,560
so here's my uvm create that was the
 

1923
00:35:42,560 --> 00:35:44,390
so here's my uvm create that was the
boring part that's basically creating

1924
00:35:44,390 --> 00:35:44,400
boring part that's basically creating
 

1925
00:35:44,400 --> 00:35:46,630
boring part that's basically creating
uh allocating to the top level page

1926
00:35:46,630 --> 00:35:46,640
uh allocating to the top level page
 

1927
00:35:46,640 --> 00:35:48,310
uh allocating to the top level page
directory for the l2

1928
00:35:48,310 --> 00:35:48,320
directory for the l2
 

1929
00:35:48,320 --> 00:35:51,510
directory for the l2
page directory and then uh

1930
00:35:51,510 --> 00:35:51,520
page directory and then uh
 

1931
00:35:51,520 --> 00:35:54,150
page directory and then uh
here's my kvm the sort of equivalent of

1932
00:35:54,150 --> 00:35:54,160
here's my kvm the sort of equivalent of
 

1933
00:35:54,160 --> 00:35:56,069
here's my kvm the sort of equivalent of
kvm init

1934
00:35:56,069 --> 00:35:56,079
kvm init
 

1935
00:35:56,079 --> 00:35:57,829
kvm init
so i get the top level page directory

1936
00:35:57,829 --> 00:35:57,839
so i get the top level page directory
 

1937
00:35:57,839 --> 00:35:59,510
so i get the top level page directory
here uh

1938
00:35:59,510 --> 00:35:59,520
here uh
 

1939
00:35:59,520 --> 00:36:02,950
here uh
in this site then basically i copy

1940
00:36:02,950 --> 00:36:02,960
in this site then basically i copy
 

1941
00:36:02,960 --> 00:36:06,069
in this site then basically i copy
the top 511 entries

1942
00:36:06,069 --> 00:36:06,079
the top 511 entries
 

1943
00:36:06,079 --> 00:36:07,829
the top 511 entries
from the kernel page table that was

1944
00:36:07,829 --> 00:36:07,839
from the kernel page table that was
 

1945
00:36:07,839 --> 00:36:09,589
from the kernel page table that was
already set up by

1946
00:36:09,589 --> 00:36:09,599
already set up by
 

1947
00:36:09,599 --> 00:36:13,349
already set up by
kvm in it and so that gives me most

1948
00:36:13,349 --> 00:36:13,359
kvm in it and so that gives me most
 

1949
00:36:13,359 --> 00:36:16,550
kvm in it and so that gives me most
of the kernel page table and then uh

1950
00:36:16,550 --> 00:36:16,560
of the kernel page table and then uh
 

1951
00:36:16,560 --> 00:36:19,589
of the kernel page table and then uh
i just have to map in all the devices

1952
00:36:19,589 --> 00:36:19,599
i just have to map in all the devices
 

1953
00:36:19,599 --> 00:36:20,850
i just have to map in all the devices
that live

1954
00:36:20,850 --> 00:36:20,860
that live
 

1955
00:36:20,860 --> 00:36:23,349
that live
[Music]

1956
00:36:23,349 --> 00:36:23,359
[Music]
 

1957
00:36:23,359 --> 00:36:26,150
[Music]
in the zero entry uh because the zero

1958
00:36:26,150 --> 00:36:26,160
in the zero entry uh because the zero
 

1959
00:36:26,160 --> 00:36:27,109
in the zero entry uh because the zero
entries the entry that we're going to

1960
00:36:27,109 --> 00:36:27,119
entries the entry that we're going to
 

1961
00:36:27,119 --> 00:36:28,790
entries the entry that we're going to
modify later or we're going to map the

1962
00:36:28,790 --> 00:36:28,800
modify later or we're going to map the
 

1963
00:36:28,800 --> 00:36:30,710
modify later or we're going to map the
user pages into the bottom

1964
00:36:30,710 --> 00:36:30,720
user pages into the bottom
 

1965
00:36:30,720 --> 00:36:32,630
user pages into the bottom
um and there's a couple devices that

1966
00:36:32,630 --> 00:36:32,640
um and there's a couple devices that
 

1967
00:36:32,640 --> 00:36:34,310
um and there's a couple devices that
live in that in the zero of entry and

1968
00:36:34,310 --> 00:36:34,320
live in that in the zero of entry and
 

1969
00:36:34,320 --> 00:36:36,150
live in that in the zero of entry and
those you know devices need to be added

1970
00:36:36,150 --> 00:36:36,160
those you know devices need to be added
 

1971
00:36:36,160 --> 00:36:38,390
those you know devices need to be added
you know to the uh

1972
00:36:38,390 --> 00:36:38,400
you know to the uh
 

1973
00:36:38,400 --> 00:36:42,069
you know to the uh
to this poor process page table kernel

1974
00:36:42,069 --> 00:36:42,079
to this poor process page table kernel
 

1975
00:36:42,079 --> 00:36:43,990
to this poor process page table kernel
page table

1976
00:36:43,990 --> 00:36:44,000
page table
 

1977
00:36:44,000 --> 00:36:46,550
page table
and so maybe if i come back to this

1978
00:36:46,550 --> 00:36:46,560
and so maybe if i come back to this
 

1979
00:36:46,560 --> 00:36:51,190
and so maybe if i come back to this
picture earlier

1980
00:36:51,190 --> 00:36:51,200

 

1981
00:36:51,200 --> 00:36:54,150

so let me pull up the kernel page table

1982
00:36:54,150 --> 00:36:54,160
so let me pull up the kernel page table
 

1983
00:36:54,160 --> 00:36:56,790
so let me pull up the kernel page table
again

1984
00:36:56,790 --> 00:36:56,800

 

1985
00:36:56,800 --> 00:37:00,150

uh yeah maybe this picture is good

1986
00:37:00,150 --> 00:37:00,160
uh yeah maybe this picture is good
 

1987
00:37:00,160 --> 00:37:02,710
uh yeah maybe this picture is good
as any uh so if you think about my

1988
00:37:02,710 --> 00:37:02,720
as any uh so if you think about my
 

1989
00:37:02,720 --> 00:37:03,589
as any uh so if you think about my
solution

1990
00:37:03,589 --> 00:37:03,599
solution
 

1991
00:37:03,599 --> 00:37:06,950
solution
uh basically these entries

1992
00:37:06,950 --> 00:37:06,960
uh basically these entries
 

1993
00:37:06,960 --> 00:37:10,230
uh basically these entries
i just share with the existing kernel

1994
00:37:10,230 --> 00:37:10,240
i just share with the existing kernel
 

1995
00:37:10,240 --> 00:37:11,109
i just share with the existing kernel
page table

1996
00:37:11,109 --> 00:37:11,119
page table
 

1997
00:37:11,119 --> 00:37:13,990
page table
so i don't have to allocate any l1 or l2

1998
00:37:13,990 --> 00:37:14,000
so i don't have to allocate any l1 or l2
 

1999
00:37:14,000 --> 00:37:16,069
so i don't have to allocate any l1 or l2
or l0 levels

2000
00:37:16,069 --> 00:37:16,079
or l0 levels
 

2001
00:37:16,079 --> 00:37:18,230
or l0 levels
they already exist and the only thing i

2002
00:37:18,230 --> 00:37:18,240
they already exist and the only thing i
 

2003
00:37:18,240 --> 00:37:19,670
they already exist and the only thing i
do is basically literally

2004
00:37:19,670 --> 00:37:19,680
do is basically literally
 

2005
00:37:19,680 --> 00:37:22,950
do is basically literally
copy that ptd entry and so only

2006
00:37:22,950 --> 00:37:22,960
copy that ptd entry and so only
 

2007
00:37:22,960 --> 00:37:25,990
copy that ptd entry and so only
the bottom part or the bottom

2008
00:37:25,990 --> 00:37:26,000
the bottom part or the bottom
 

2009
00:37:26,000 --> 00:37:28,150
the bottom part or the bottom
entry that's the piece i need to

2010
00:37:28,150 --> 00:37:28,160
entry that's the piece i need to
 

2011
00:37:28,160 --> 00:37:29,589
entry that's the piece i need to
actually rebuild

2012
00:37:29,589 --> 00:37:29,599
actually rebuild
 

2013
00:37:29,599 --> 00:37:31,670
actually rebuild
or copy explicitly instead of copying

2014
00:37:31,670 --> 00:37:31,680
or copy explicitly instead of copying
 

2015
00:37:31,680 --> 00:37:32,790
or copy explicitly instead of copying
ptes

2016
00:37:32,790 --> 00:37:32,800
ptes
 

2017
00:37:32,800 --> 00:37:35,750
ptes
and that covers you know the bottom one

2018
00:37:35,750 --> 00:37:35,760
and that covers you know the bottom one
 

2019
00:37:35,760 --> 00:37:36,710
and that covers you know the bottom one
gigabyte

2020
00:37:36,710 --> 00:37:36,720
gigabyte
 

2021
00:37:36,720 --> 00:37:40,390
gigabyte
right the address space it's a one page

2022
00:37:40,390 --> 00:37:40,400
right the address space it's a one page
 

2023
00:37:40,400 --> 00:37:45,910
right the address space it's a one page
coverage in a 496.

2024
00:37:45,910 --> 00:37:45,920

 

2025
00:37:45,920 --> 00:37:49,030

uh and so this you know this entry you

2026
00:37:49,030 --> 00:37:49,040
uh and so this you know this entry you
 

2027
00:37:49,040 --> 00:37:50,950
uh and so this you know this entry you
know covers five into twelve

2028
00:37:50,950 --> 00:37:50,960
know covers five into twelve
 

2029
00:37:50,960 --> 00:37:54,230
know covers five into twelve
but this is the two megabyte

2030
00:37:54,230 --> 00:37:54,240
but this is the two megabyte
 

2031
00:37:54,240 --> 00:37:57,030
but this is the two megabyte
and this is one gigabyte and basically

2032
00:37:57,030 --> 00:37:57,040
and this is one gigabyte and basically
 

2033
00:37:57,040 --> 00:37:58,710
and this is one gigabyte and basically
only one of these entries i need to fill

2034
00:37:58,710 --> 00:37:58,720
only one of these entries i need to fill
 

2035
00:37:58,720 --> 00:38:01,589
only one of these entries i need to fill
in

2036
00:38:01,589 --> 00:38:01,599

 

2037
00:38:01,599 --> 00:38:05,270

does that make sense

2038
00:38:05,270 --> 00:38:05,280
does that make sense
 

2039
00:38:05,280 --> 00:38:09,030
does that make sense
so returning to my code here basically

2040
00:38:09,030 --> 00:38:09,040
so returning to my code here basically
 

2041
00:38:09,040 --> 00:38:13,190
so returning to my code here basically
that's all i do in kvm create

2042
00:38:13,190 --> 00:38:13,200

 

2043
00:38:13,200 --> 00:38:16,390

and in case my kvm 3 is maybe no

2044
00:38:16,390 --> 00:38:16,400
and in case my kvm 3 is maybe no
 

2045
00:38:16,400 --> 00:38:18,950
and in case my kvm 3 is maybe no
they're not maybe clean the solution but

2046
00:38:18,950 --> 00:38:18,960
they're not maybe clean the solution but
 

2047
00:38:18,960 --> 00:38:20,790
they're not maybe clean the solution but
i take full advantage of the knowledge

2048
00:38:20,790 --> 00:38:20,800
i take full advantage of the knowledge
 

2049
00:38:20,800 --> 00:38:21,430
i take full advantage of the knowledge
that

2050
00:38:21,430 --> 00:38:21,440
that
 

2051
00:38:21,440 --> 00:38:23,349
that
uh i don't have to do anything from the

2052
00:38:23,349 --> 00:38:23,359
uh i don't have to do anything from the
 

2053
00:38:23,359 --> 00:38:25,109
uh i don't have to do anything from the
entries one to five and eleven in the

2054
00:38:25,109 --> 00:38:25,119
entries one to five and eleven in the
 

2055
00:38:25,119 --> 00:38:26,630
entries one to five and eleven in the
top eight level directory

2056
00:38:26,630 --> 00:38:26,640
top eight level directory
 

2057
00:38:26,640 --> 00:38:28,630
top eight level directory
the only entry i can do anything about

2058
00:38:28,630 --> 00:38:28,640
the only entry i can do anything about
 

2059
00:38:28,640 --> 00:38:29,670
the only entry i can do anything about
is the

2060
00:38:29,670 --> 00:38:29,680
is the
 

2061
00:38:29,680 --> 00:38:32,310
is the
uh bottom entry of the kernel of the the

2062
00:38:32,310 --> 00:38:32,320
uh bottom entry of the kernel of the the
 

2063
00:38:32,320 --> 00:38:33,829
uh bottom entry of the kernel of the the
top level directory

2064
00:38:33,829 --> 00:38:33,839
top level directory
 

2065
00:38:33,839 --> 00:38:36,870
top level directory
that points to one l1 uh entry in the

2066
00:38:36,870 --> 00:38:36,880
that points to one l1 uh entry in the
 

2067
00:38:36,880 --> 00:38:37,750
that points to one l1 uh entry in the
dot one l

2068
00:38:37,750 --> 00:38:37,760
dot one l
 

2069
00:38:37,760 --> 00:38:39,910
dot one l
and one tree i just need to go through

2070
00:38:39,910 --> 00:38:39,920
and one tree i just need to go through
 

2071
00:38:39,920 --> 00:38:40,870
and one tree i just need to go through
and

2072
00:38:40,870 --> 00:38:40,880
and
 

2073
00:38:40,880 --> 00:38:44,950
and
uh freehold the l2 or l0 entries

2074
00:38:44,950 --> 00:38:44,960
uh freehold the l2 or l0 entries
 

2075
00:38:44,960 --> 00:38:46,790
uh freehold the l2 or l0 entries
and then the end you know free l1 and

2076
00:38:46,790 --> 00:38:46,800
and then the end you know free l1 and
 

2077
00:38:46,800 --> 00:38:49,349
and then the end you know free l1 and
then the kernel page table

2078
00:38:49,349 --> 00:38:49,359
then the kernel page table
 

2079
00:38:49,359 --> 00:38:52,710
then the kernel page table
and so that's my key kvm 3 and my kvm

2080
00:38:52,710 --> 00:38:52,720
and so that's my key kvm 3 and my kvm
 

2081
00:38:52,720 --> 00:38:55,349
and so that's my key kvm 3 and my kvm
create so that allows me to create a

2082
00:38:55,349 --> 00:38:55,359
create so that allows me to create a
 

2083
00:38:55,359 --> 00:38:57,190
create so that allows me to create a
kernel page table per process

2084
00:38:57,190 --> 00:38:57,200
kernel page table per process
 

2085
00:38:57,200 --> 00:39:00,550
kernel page table per process
and then free freeze one is uh when

2086
00:39:00,550 --> 00:39:00,560
and then free freeze one is uh when
 

2087
00:39:00,560 --> 00:39:02,310
and then free freeze one is uh when
we're done

2088
00:39:02,310 --> 00:39:02,320
we're done
 

2089
00:39:02,320 --> 00:39:04,790
we're done
sorry quick question could you explain

2090
00:39:04,790 --> 00:39:04,800
sorry quick question could you explain
 

2091
00:39:04,800 --> 00:39:06,790
sorry quick question could you explain
again the reasoning for

2092
00:39:06,790 --> 00:39:06,800
again the reasoning for
 

2093
00:39:06,800 --> 00:39:09,030
again the reasoning for
uh only using one to five twelve and not

2094
00:39:09,030 --> 00:39:09,040
uh only using one to five twelve and not
 

2095
00:39:09,040 --> 00:39:10,390
uh only using one to five twelve and not
zero

2096
00:39:10,390 --> 00:39:10,400
zero
 

2097
00:39:10,400 --> 00:39:14,870
zero
yes uh okay so uh maybe the easy thing

2098
00:39:14,870 --> 00:39:14,880
yes uh okay so uh maybe the easy thing
 

2099
00:39:14,880 --> 00:39:16,550
yes uh okay so uh maybe the easy thing
to do actually let me go back to the

2100
00:39:16,550 --> 00:39:16,560
to do actually let me go back to the
 

2101
00:39:16,560 --> 00:39:19,829
to do actually let me go back to the
picture here

2102
00:39:19,829 --> 00:39:19,839

 

2103
00:39:19,839 --> 00:39:21,910

uh so we have our kernel dress space

2104
00:39:21,910 --> 00:39:21,920
uh so we have our kernel dress space
 

2105
00:39:21,920 --> 00:39:26,230
uh so we have our kernel dress space
correct

2106
00:39:26,230 --> 00:39:26,240

 

2107
00:39:26,240 --> 00:39:31,109

uh and you know this is ox8000

2108
00:39:31,109 --> 00:39:31,119
uh and you know this is ox8000
 

2109
00:39:31,119 --> 00:39:34,230
uh and you know this is ox8000
blah blah blah in uh

2110
00:39:34,230 --> 00:39:34,240
blah blah blah in uh
 

2111
00:39:34,240 --> 00:39:36,950
blah blah blah in uh
what entry does ox00 fall into in the

2112
00:39:36,950 --> 00:39:36,960
what entry does ox00 fall into in the
 

2113
00:39:36,960 --> 00:39:46,069
what entry does ox00 fall into in the
for the top level page directory

2114
00:39:46,069 --> 00:39:46,079

 

2115
00:39:46,079 --> 00:39:49,270

it's like the uh

2116
00:39:49,270 --> 00:39:49,280

 

2117
00:39:49,280 --> 00:39:51,910

zeroth entry no not the zero of entry

2118
00:39:51,910 --> 00:39:51,920
zeroth entry no not the zero of entry
 

2119
00:39:51,920 --> 00:39:53,349
zeroth entry no not the zero of entry
correct

2120
00:39:53,349 --> 00:39:53,359
correct
 

2121
00:39:53,359 --> 00:39:55,990
correct
so what do we know so the zero entry

2122
00:39:55,990 --> 00:39:56,000
so what do we know so the zero entry
 

2123
00:39:56,000 --> 00:39:57,510
so what do we know so the zero entry
like this entry how much does it

2124
00:39:57,510 --> 00:39:57,520
like this entry how much does it
 

2125
00:39:57,520 --> 00:40:02,310
like this entry how much does it
cover this entry

2126
00:40:02,310 --> 00:40:02,320

 

2127
00:40:02,320 --> 00:40:04,630

how much address space does the bottom

2128
00:40:04,630 --> 00:40:04,640
how much address space does the bottom
 

2129
00:40:04,640 --> 00:40:06,470
how much address space does the bottom
entry of the zero entry of the top-level

2130
00:40:06,470 --> 00:40:06,480
entry of the zero entry of the top-level
 

2131
00:40:06,480 --> 00:40:10,150
entry of the zero entry of the top-level
page directory cover

2132
00:40:10,150 --> 00:40:10,160
page directory cover
 

2133
00:40:10,160 --> 00:40:13,829
page directory cover
i think clint is uh it's free between

2134
00:40:13,829 --> 00:40:13,839
i think clint is uh it's free between
 

2135
00:40:13,839 --> 00:40:17,750
i think clint is uh it's free between
zero and zero x two zero zero zero

2136
00:40:17,750 --> 00:40:17,760
zero and zero x two zero zero zero
 

2137
00:40:17,760 --> 00:40:19,990
zero and zero x two zero zero zero
yes okay so maybe i think you're

2138
00:40:19,990 --> 00:40:20,000
yes okay so maybe i think you're
 

2139
00:40:20,000 --> 00:40:21,349
yes okay so maybe i think you're
absolutely in the right direction so

2140
00:40:21,349 --> 00:40:21,359
absolutely in the right direction so
 

2141
00:40:21,359 --> 00:40:23,349
absolutely in the right direction so
the bottom entry cover is one gigabyte

2142
00:40:23,349 --> 00:40:23,359
the bottom entry cover is one gigabyte
 

2143
00:40:23,359 --> 00:40:24,790
the bottom entry cover is one gigabyte
correct

2144
00:40:24,790 --> 00:40:24,800
correct
 

2145
00:40:24,800 --> 00:40:30,550
correct
and we know yeah like maybe i can

2146
00:40:30,550 --> 00:40:30,560

 

2147
00:40:30,560 --> 00:40:32,950

we so the bottom entry is one gigabyte

2148
00:40:32,950 --> 00:40:32,960
we so the bottom entry is one gigabyte
 

2149
00:40:32,960 --> 00:40:33,670
we so the bottom entry is one gigabyte
uh

2150
00:40:33,670 --> 00:40:33,680
uh
 

2151
00:40:33,680 --> 00:40:36,790
uh
which

2152
00:40:36,790 --> 00:40:36,800

 

2153
00:40:36,800 --> 00:40:38,550

in that one gigabyte is the cleaned and

2154
00:40:38,550 --> 00:40:38,560
in that one gigabyte is the cleaned and
 

2155
00:40:38,560 --> 00:40:40,230
in that one gigabyte is the cleaned and
the click correct

2156
00:40:40,230 --> 00:40:40,240
the click correct
 

2157
00:40:40,240 --> 00:40:44,470
the click correct
the uart and uh virtio disk i believe

2158
00:40:44,470 --> 00:40:44,480
the uart and uh virtio disk i believe
 

2159
00:40:44,480 --> 00:40:47,270
the uart and uh virtio disk i believe
um and then current base actually

2160
00:40:47,270 --> 00:40:47,280
um and then current base actually
 

2161
00:40:47,280 --> 00:40:48,150
um and then current base actually
already sets up

2162
00:40:48,150 --> 00:40:48,160
already sets up
 

2163
00:40:48,160 --> 00:40:51,430
already sets up
in a higher uh entry right and we could

2164
00:40:51,430 --> 00:40:51,440
in a higher uh entry right and we could
 

2165
00:40:51,440 --> 00:40:53,030
in a higher uh entry right and we could
compute it if we wanted to we could take

2166
00:40:53,030 --> 00:40:53,040
compute it if we wanted to we could take
 

2167
00:40:53,040 --> 00:40:53,510
compute it if we wanted to we could take
ox

2168
00:40:53,510 --> 00:40:53,520
ox
 

2169
00:40:53,520 --> 00:40:56,710
ox
8880 correct shift it uh 12

2170
00:40:56,710 --> 00:40:56,720
8880 correct shift it uh 12
 

2171
00:40:56,720 --> 00:40:59,990
8880 correct shift it uh 12
shift at nine shift at nine and i i

2172
00:40:59,990 --> 00:41:00,000
shift at nine shift at nine and i i
 

2173
00:41:00,000 --> 00:41:01,910
shift at nine shift at nine and i i
think i don't remember at the top we had

2174
00:41:01,910 --> 00:41:01,920
think i don't remember at the top we had
 

2175
00:41:01,920 --> 00:41:03,030
think i don't remember at the top we had
what it is

2176
00:41:03,030 --> 00:41:03,040
what it is
 

2177
00:41:03,040 --> 00:41:05,270
what it is
but we could try to figure it out we

2178
00:41:05,270 --> 00:41:05,280
but we could try to figure it out we
 

2179
00:41:05,280 --> 00:41:06,069
but we could try to figure it out we
want to actually

2180
00:41:06,069 --> 00:41:06,079
want to actually
 

2181
00:41:06,079 --> 00:41:08,950
want to actually
maybe we'll try this is always very

2182
00:41:08,950 --> 00:41:08,960
maybe we'll try this is always very
 

2183
00:41:08,960 --> 00:41:09,910
maybe we'll try this is always very
risky to do in

2184
00:41:09,910 --> 00:41:09,920
risky to do in
 

2185
00:41:09,920 --> 00:41:14,069
risky to do in
lecture but uh it's a gtb

2186
00:41:14,069 --> 00:41:14,079
lecture but uh it's a gtb
 

2187
00:41:14,079 --> 00:41:19,349
lecture but uh it's a gtb
uh i need to so let's go to

2188
00:41:19,349 --> 00:41:19,359

 

2189
00:41:19,359 --> 00:41:29,349

layout here's current base

2190
00:41:29,349 --> 00:41:29,359

 

2191
00:41:29,359 --> 00:41:32,710

uh so we could print

2192
00:41:32,710 --> 00:41:32,720
uh so we could print
 

2193
00:41:32,720 --> 00:41:36,309
uh so we could print
so shift is 12.

2194
00:41:36,309 --> 00:41:36,319

 

2195
00:41:36,319 --> 00:41:46,069

that gives us the uh that offsets oops

2196
00:41:46,069 --> 00:41:46,079

 

2197
00:41:46,079 --> 00:41:49,990

okay this is that so then we'll

2198
00:41:49,990 --> 00:41:50,000
okay this is that so then we'll
 

2199
00:41:50,000 --> 00:41:54,790
okay this is that so then we'll
shift that guy i think you can say this

2200
00:41:54,790 --> 00:41:54,800
shift that guy i think you can say this
 

2201
00:41:54,800 --> 00:41:59,030
shift that guy i think you can say this
nine right now this is the next entry

2202
00:41:59,030 --> 00:41:59,040
nine right now this is the next entry
 

2203
00:41:59,040 --> 00:42:03,670
nine right now this is the next entry
one more so this is entry two

2204
00:42:03,670 --> 00:42:03,680
one more so this is entry two
 

2205
00:42:03,680 --> 00:42:07,670
one more so this is entry two
does that make sense so we go back to

2206
00:42:07,670 --> 00:42:07,680
does that make sense so we go back to
 

2207
00:42:07,680 --> 00:42:11,270
does that make sense so we go back to
our picture here uh

2208
00:42:11,270 --> 00:42:11,280
our picture here uh
 

2209
00:42:11,280 --> 00:42:15,750
our picture here uh
basically current base is entry to

2210
00:42:15,750 --> 00:42:15,760
basically current base is entry to
 

2211
00:42:15,760 --> 00:42:19,030
basically current base is entry to
in the top level page directory right so

2212
00:42:19,030 --> 00:42:19,040
in the top level page directory right so
 

2213
00:42:19,040 --> 00:42:21,990
in the top level page directory right so
and we know from the third part of the

2214
00:42:21,990 --> 00:42:22,000
and we know from the third part of the
 

2215
00:42:22,000 --> 00:42:23,270
and we know from the third part of the
assignment that basically we don't

2216
00:42:23,270 --> 00:42:23,280
assignment that basically we don't
 

2217
00:42:23,280 --> 00:42:24,550
assignment that basically we don't
really have to worry about

2218
00:42:24,550 --> 00:42:24,560
really have to worry about
 

2219
00:42:24,560 --> 00:42:28,470
really have to worry about
anything above click

2220
00:42:28,470 --> 00:42:28,480
anything above click
 

2221
00:42:28,480 --> 00:42:30,870
anything above click
and you know all that stuff uh falls

2222
00:42:30,870 --> 00:42:30,880
and you know all that stuff uh falls
 

2223
00:42:30,880 --> 00:42:34,390
and you know all that stuff uh falls
actually in entry zero

2224
00:42:34,390 --> 00:42:34,400

 

2225
00:42:34,400 --> 00:42:39,589

okay so that answer the earlier question

2226
00:42:39,589 --> 00:42:39,599
okay so that answer the earlier question
 

2227
00:42:39,599 --> 00:42:42,710
okay so that answer the earlier question
yes thank you

2228
00:42:42,710 --> 00:42:42,720

 

2229
00:42:42,720 --> 00:42:44,470

okay so now we the only thing we have

2230
00:42:44,470 --> 00:42:44,480
okay so now we the only thing we have
 

2231
00:42:44,480 --> 00:42:46,870
okay so now we the only thing we have
left to do is you know uh

2232
00:42:46,870 --> 00:42:46,880
left to do is you know uh
 

2233
00:42:46,880 --> 00:42:49,190
left to do is you know uh
double check where we are going to call

2234
00:42:49,190 --> 00:42:49,200
double check where we are going to call
 

2235
00:42:49,200 --> 00:42:50,390
double check where we are going to call
uh this function

2236
00:42:50,390 --> 00:42:50,400
uh this function
 

2237
00:42:50,400 --> 00:42:54,150
uh this function
uh kvm create and

2238
00:42:54,150 --> 00:42:54,160
uh kvm create and
 

2239
00:42:54,160 --> 00:42:58,630
uh kvm create and
uh and you know that's going to be in

2240
00:42:58,630 --> 00:42:58,640
uh and you know that's going to be in
 

2241
00:42:58,640 --> 00:43:01,750
uh and you know that's going to be in
alloc proc uh

2242
00:43:01,750 --> 00:43:01,760
alloc proc uh
 

2243
00:43:01,760 --> 00:43:10,829
alloc proc uh
so and

2244
00:43:10,829 --> 00:43:10,839

 

2245
00:43:10,839 --> 00:43:12,150

that's

2246
00:43:12,150 --> 00:43:12,160
that's
 

2247
00:43:12,160 --> 00:43:13,750
that's
so here where's the new process

2248
00:43:13,750 --> 00:43:13,760
so here where's the new process
 

2249
00:43:13,760 --> 00:43:15,510
so here where's the new process
initialized and you know

2250
00:43:15,510 --> 00:43:15,520
initialized and you know
 

2251
00:43:15,520 --> 00:43:17,030
initialized and you know
i'm sure all of you do this exactly the

2252
00:43:17,030 --> 00:43:17,040
i'm sure all of you do this exactly the
 

2253
00:43:17,040 --> 00:43:18,550
i'm sure all of you do this exactly the
same way you know you enter

2254
00:43:18,550 --> 00:43:18,560
same way you know you enter
 

2255
00:43:18,560 --> 00:43:20,870
same way you know you enter
you allocate we declare field in the

2256
00:43:20,870 --> 00:43:20,880
you allocate we declare field in the
 

2257
00:43:20,880 --> 00:43:22,069
you allocate we declare field in the
proc structure

2258
00:43:22,069 --> 00:43:22,079
proc structure
 

2259
00:43:22,079 --> 00:43:23,510
proc structure
and basically the result of it is

2260
00:43:23,510 --> 00:43:23,520
and basically the result of it is
 

2261
00:43:23,520 --> 00:43:24,550
and basically the result of it is
actually what we stick in the kernel

2262
00:43:24,550 --> 00:43:24,560
actually what we stick in the kernel
 

2263
00:43:24,560 --> 00:43:26,950
actually what we stick in the kernel
page table

2264
00:43:26,950 --> 00:43:26,960
page table
 

2265
00:43:26,960 --> 00:43:28,150
page table
okay and then the only other thing that

2266
00:43:28,150 --> 00:43:28,160
okay and then the only other thing that
 

2267
00:43:28,160 --> 00:43:29,349
okay and then the only other thing that
we have to worry about is of course we

2268
00:43:29,349 --> 00:43:29,359
we have to worry about is of course we
 

2269
00:43:29,359 --> 00:43:31,750
we have to worry about is of course we
need to use the page table

2270
00:43:31,750 --> 00:43:31,760
need to use the page table
 

2271
00:43:31,760 --> 00:43:34,470
need to use the page table
and so we need to look at the scheduler

2272
00:43:34,470 --> 00:43:34,480
and so we need to look at the scheduler
 

2273
00:43:34,480 --> 00:43:35,910
and so we need to look at the scheduler
and basically the assignment

2274
00:43:35,910 --> 00:43:35,920
and basically the assignment
 

2275
00:43:35,920 --> 00:43:38,150
and basically the assignment
more or less told you what to do which

2276
00:43:38,150 --> 00:43:38,160
more or less told you what to do which
 

2277
00:43:38,160 --> 00:43:40,069
more or less told you what to do which
is before you switch

2278
00:43:40,069 --> 00:43:40,079
is before you switch
 

2279
00:43:40,079 --> 00:43:42,069
is before you switch
to that user process you need to switch

2280
00:43:42,069 --> 00:43:42,079
to that user process you need to switch
 

2281
00:43:42,079 --> 00:43:43,589
to that user process you need to switch
to kernel page tables

2282
00:43:43,589 --> 00:43:43,599
to kernel page tables
 

2283
00:43:43,599 --> 00:43:45,430
to kernel page tables
which basically means loading you know

2284
00:43:45,430 --> 00:43:45,440
which basically means loading you know
 

2285
00:43:45,440 --> 00:43:47,589
which basically means loading you know
the disk process kernel page table in

2286
00:43:47,589 --> 00:43:47,599
the disk process kernel page table in
 

2287
00:43:47,599 --> 00:43:48,950
the disk process kernel page table in
satp

2288
00:43:48,950 --> 00:43:48,960
satp
 

2289
00:43:48,960 --> 00:43:52,710
satp
and then when you're done uh switching

2290
00:43:52,710 --> 00:43:52,720
and then when you're done uh switching
 

2291
00:43:52,720 --> 00:43:54,069
and then when you're done uh switching
and running the other processing you

2292
00:43:54,069 --> 00:43:54,079
and running the other processing you
 

2293
00:43:54,079 --> 00:43:55,670
and running the other processing you
come back from running the other process

2294
00:43:55,670 --> 00:43:55,680
come back from running the other process
 

2295
00:43:55,680 --> 00:43:56,870
come back from running the other process
and you're going to go back and run the

2296
00:43:56,870 --> 00:43:56,880
and you're going to go back and run the
 

2297
00:43:56,880 --> 00:43:57,670
and you're going to go back and run the
scheduler

2298
00:43:57,670 --> 00:43:57,680
scheduler
 

2299
00:43:57,680 --> 00:43:59,430
scheduler
you got to switch back to the main

2300
00:43:59,430 --> 00:43:59,440
you got to switch back to the main
 

2301
00:43:59,440 --> 00:44:00,950
you got to switch back to the main
kernel page table

2302
00:44:00,950 --> 00:44:00,960
kernel page table
 

2303
00:44:00,960 --> 00:44:03,270
kernel page table
the the kernel page table because that's

2304
00:44:03,270 --> 00:44:03,280
the the kernel page table because that's
 

2305
00:44:03,280 --> 00:44:07,109
the the kernel page table because that's
the one that actually used by scheduler

2306
00:44:07,109 --> 00:44:07,119

 

2307
00:44:07,119 --> 00:44:09,109

and why do we need to do this switch why

2308
00:44:09,109 --> 00:44:09,119
and why do we need to do this switch why
 

2309
00:44:09,119 --> 00:44:16,710
and why do we need to do this switch why
is this important

2310
00:44:16,710 --> 00:44:16,720

 

2311
00:44:16,720 --> 00:44:19,829

anybody

2312
00:44:19,829 --> 00:44:19,839

 

2313
00:44:19,839 --> 00:44:22,390

so it picks the right kernel page table

2314
00:44:22,390 --> 00:44:22,400
so it picks the right kernel page table
 

2315
00:44:22,400 --> 00:44:23,829
so it picks the right kernel page table
uh because the sat

2316
00:44:23,829 --> 00:44:23,839
uh because the sat
 

2317
00:44:23,839 --> 00:44:26,069
uh because the sat
when you go to the page table entries it

2318
00:44:26,069 --> 00:44:26,079
when you go to the page table entries it
 

2319
00:44:26,079 --> 00:44:27,589
when you go to the page table entries it
picks the right

2320
00:44:27,589 --> 00:44:27,599
picks the right
 

2321
00:44:27,599 --> 00:44:29,670
picks the right
it picks the right page table to pick

2322
00:44:29,670 --> 00:44:29,680
it picks the right page table to pick
 

2323
00:44:29,680 --> 00:44:30,710
it picks the right page table to pick
from

2324
00:44:30,710 --> 00:44:30,720
from
 

2325
00:44:30,720 --> 00:44:34,710
from
yeah hold on

2326
00:44:34,710 --> 00:44:34,720
yeah hold on
 

2327
00:44:34,720 --> 00:44:38,630
yeah hold on
hold on

2328
00:44:38,630 --> 00:44:38,640

 

2329
00:44:38,640 --> 00:44:42,470

uh yeah so okay so

2330
00:44:42,470 --> 00:44:42,480
uh yeah so okay so
 

2331
00:44:42,480 --> 00:44:44,870
uh yeah so okay so
when we're stopped okay maybe another

2332
00:44:44,870 --> 00:44:44,880
when we're stopped okay maybe another
 

2333
00:44:44,880 --> 00:44:46,710
when we're stopped okay maybe another
way to ask this question

2334
00:44:46,710 --> 00:44:46,720
way to ask this question
 

2335
00:44:46,720 --> 00:44:51,910
way to ask this question
when is this kernel page table freed

2336
00:44:51,910 --> 00:44:51,920

 

2337
00:44:51,920 --> 00:44:54,230

when the user process is done so if we

2338
00:44:54,230 --> 00:44:54,240
when the user process is done so if we
 

2339
00:44:54,240 --> 00:44:56,950
when the user process is done so if we
didn't switch that would mean that

2340
00:44:56,950 --> 00:44:56,960
didn't switch that would mean that
 

2341
00:44:56,960 --> 00:44:58,710
didn't switch that would mean that
we could be using a page table of a

2342
00:44:58,710 --> 00:44:58,720
we could be using a page table of a
 

2343
00:44:58,720 --> 00:45:01,030
we could be using a page table of a
process that was being freed so the

2344
00:45:01,030 --> 00:45:01,040
process that was being freed so the
 

2345
00:45:01,040 --> 00:45:02,950
process that was being freed so the
page table was freed so we don't want to

2346
00:45:02,950 --> 00:45:02,960
page table was freed so we don't want to
 

2347
00:45:02,960 --> 00:45:04,550
page table was freed so we don't want to
be dependent on the process we're not

2348
00:45:04,550 --> 00:45:04,560
be dependent on the process we're not
 

2349
00:45:04,560 --> 00:45:06,630
be dependent on the process we're not
running right now yeah exactly correct

2350
00:45:06,630 --> 00:45:06,640
running right now yeah exactly correct
 

2351
00:45:06,640 --> 00:45:08,230
running right now yeah exactly correct
we can never free the page table of a

2352
00:45:08,230 --> 00:45:08,240
we can never free the page table of a
 

2353
00:45:08,240 --> 00:45:10,470
we can never free the page table of a
process that's currently running

2354
00:45:10,470 --> 00:45:10,480
process that's currently running
 

2355
00:45:10,480 --> 00:45:12,550
process that's currently running
uh so we have to have some plan you know

2356
00:45:12,550 --> 00:45:12,560
uh so we have to have some plan you know
 

2357
00:45:12,560 --> 00:45:14,150
uh so we have to have some plan you know
to actually free processes

2358
00:45:14,150 --> 00:45:14,160
to actually free processes
 

2359
00:45:14,160 --> 00:45:15,670
to actually free processes
uh at the point that they're not running

2360
00:45:15,670 --> 00:45:15,680
uh at the point that they're not running
 

2361
00:45:15,680 --> 00:45:17,190
uh at the point that they're not running
anymore and

2362
00:45:17,190 --> 00:45:17,200
anymore and
 

2363
00:45:17,200 --> 00:45:19,109
anymore and
your the weight system call is our way

2364
00:45:19,109 --> 00:45:19,119
your the weight system call is our way
 

2365
00:45:19,119 --> 00:45:20,950
your the weight system call is our way
out basically the way it calls

2366
00:45:20,950 --> 00:45:20,960
out basically the way it calls
 

2367
00:45:20,960 --> 00:45:22,630
out basically the way it calls
looks if there's any children that are

2368
00:45:22,630 --> 00:45:22,640
looks if there's any children that are
 

2369
00:45:22,640 --> 00:45:23,990
looks if there's any children that are
uh not living you know

2370
00:45:23,990 --> 00:45:24,000
uh not living you know
 

2371
00:45:24,000 --> 00:45:25,670
uh not living you know
that can be cleaned up and then it

2372
00:45:25,670 --> 00:45:25,680
that can be cleaned up and then it
 

2373
00:45:25,680 --> 00:45:27,190
that can be cleaned up and then it
cleans them up

2374
00:45:27,190 --> 00:45:27,200
cleans them up
 

2375
00:45:27,200 --> 00:45:30,710
cleans them up
uh and but that means that basically uh

2376
00:45:30,710 --> 00:45:30,720
uh and but that means that basically uh
 

2377
00:45:30,720 --> 00:45:32,470
uh and but that means that basically uh
when the you know payment process from

2378
00:45:32,470 --> 00:45:32,480
when the you know payment process from
 

2379
00:45:32,480 --> 00:45:33,510
when the you know payment process from
the police officer process we've got to

2380
00:45:33,510 --> 00:45:33,520
the police officer process we've got to
 

2381
00:45:33,520 --> 00:45:35,510
the police officer process we've got to
make absolutely sure that you know that

2382
00:45:35,510 --> 00:45:35,520
make absolutely sure that you know that
 

2383
00:45:35,520 --> 00:45:38,470
make absolutely sure that you know that
uh the page table that is loaded in the

2384
00:45:38,470 --> 00:45:38,480
uh the page table that is loaded in the
 

2385
00:45:38,480 --> 00:45:39,190
uh the page table that is loaded in the
satp

2386
00:45:39,190 --> 00:45:39,200
satp
 

2387
00:45:39,200 --> 00:45:42,470
satp
register uh is not you know one of the

2388
00:45:42,470 --> 00:45:42,480
register uh is not you know one of the
 

2389
00:45:42,480 --> 00:45:44,390
register uh is not you know one of the
it's not that process you know page

2390
00:45:44,390 --> 00:45:44,400
it's not that process you know page
 

2391
00:45:44,400 --> 00:45:45,750
it's not that process you know page
table or actually currently

2392
00:45:45,750 --> 00:45:45,760
table or actually currently
 

2393
00:45:45,760 --> 00:45:48,309
table or actually currently
free now it could be the case there's no

2394
00:45:48,309 --> 00:45:48,319
free now it could be the case there's no
 

2395
00:45:48,319 --> 00:45:49,270
free now it could be the case there's no
process running at all

2396
00:45:49,270 --> 00:45:49,280
process running at all
 

2397
00:45:49,280 --> 00:45:51,270
process running at all
correct and so the scheduler basically

2398
00:45:51,270 --> 00:45:51,280
correct and so the scheduler basically
 

2399
00:45:51,280 --> 00:45:52,710
correct and so the scheduler basically
has his own page table

2400
00:45:52,710 --> 00:45:52,720
has his own page table
 

2401
00:45:52,720 --> 00:45:54,309
has his own page table
uh so that you know all processes can

2402
00:45:54,309 --> 00:45:54,319
uh so that you know all processes can
 

2403
00:45:54,319 --> 00:45:59,190
uh so that you know all processes can
actually be cleaned up

2404
00:45:59,190 --> 00:45:59,200

 

2405
00:45:59,200 --> 00:46:05,750

does that make sense

2406
00:46:05,750 --> 00:46:05,760

 

2407
00:46:05,760 --> 00:46:09,109

uh sorry i had a question um is it

2408
00:46:09,109 --> 00:46:09,119
uh sorry i had a question um is it
 

2409
00:46:09,119 --> 00:46:12,950
uh sorry i had a question um is it
that you are mapping the cl int

2410
00:46:12,950 --> 00:46:12,960
that you are mapping the cl int
 

2411
00:46:12,960 --> 00:46:16,069
that you are mapping the cl int
into the new process kernel page tables

2412
00:46:16,069 --> 00:46:16,079
into the new process kernel page tables
 

2413
00:46:16,079 --> 00:46:18,069
into the new process kernel page tables
yeah i do

2414
00:46:18,069 --> 00:46:18,079
yeah i do
 

2415
00:46:18,079 --> 00:46:21,270
yeah i do
why um because i think the assignment

2416
00:46:21,270 --> 00:46:21,280
why um because i think the assignment
 

2417
00:46:21,280 --> 00:46:22,710
why um because i think the assignment
said like i only have to

2418
00:46:22,710 --> 00:46:22,720
said like i only have to
 

2419
00:46:22,720 --> 00:46:25,829
said like i only have to
uh user processing will not be bigger

2420
00:46:25,829 --> 00:46:25,839
uh user processing will not be bigger
 

2421
00:46:25,839 --> 00:46:26,360
uh user processing will not be bigger
than the

2422
00:46:26,360 --> 00:46:26,370
than the
 

2423
00:46:26,370 --> 00:46:27,589
than the
[Music]

2424
00:46:27,589 --> 00:46:27,599
[Music]
 

2425
00:46:27,599 --> 00:46:30,630
[Music]
clint was that it when i met i'm not

2426
00:46:30,630 --> 00:46:30,640
clint was that it when i met i'm not
 

2427
00:46:30,640 --> 00:46:32,710
clint was that it when i met i'm not
both the click and the clint

2428
00:46:32,710 --> 00:46:32,720
both the click and the clint
 

2429
00:46:32,720 --> 00:46:34,550
both the click and the clint
right and so but i think the assignment

2430
00:46:34,550 --> 00:46:34,560
right and so but i think the assignment
 

2431
00:46:34,560 --> 00:46:35,910
right and so but i think the assignment
told us that

2432
00:46:35,910 --> 00:46:35,920
told us that
 

2433
00:46:35,920 --> 00:46:40,069
told us that
so which is the lowest one i think the

2434
00:46:40,069 --> 00:46:40,079

 

2435
00:46:40,079 --> 00:46:41,990

click is the lowest one and basically

2436
00:46:41,990 --> 00:46:42,000
click is the lowest one and basically
 

2437
00:46:42,000 --> 00:46:43,670
click is the lowest one and basically
the sign told us that the user process

2438
00:46:43,670 --> 00:46:43,680
the sign told us that the user process
 

2439
00:46:43,680 --> 00:46:47,109
the sign told us that the user process
will not be bigger than the click

2440
00:46:47,109 --> 00:46:47,119
will not be bigger than the click
 

2441
00:46:47,119 --> 00:46:50,950
will not be bigger than the click
address okay

2442
00:46:50,950 --> 00:46:50,960

 

2443
00:46:50,960 --> 00:46:52,309

just to make it easy you know we could

2444
00:46:52,309 --> 00:46:52,319
just to make it easy you know we could
 

2445
00:46:52,319 --> 00:46:54,150
just to make it easy you know we could
have then uh we wanted to make it as

2446
00:46:54,150 --> 00:46:54,160
have then uh we wanted to make it as
 

2447
00:46:54,160 --> 00:46:55,589
have then uh we wanted to make it as
easy as possible for you clear and you

2448
00:46:55,589 --> 00:46:55,599
easy as possible for you clear and you
 

2449
00:46:55,599 --> 00:46:56,710
easy as possible for you clear and you
could have done

2450
00:46:56,710 --> 00:46:56,720
could have done
 

2451
00:46:56,720 --> 00:47:00,230
could have done
better if you wanted to

2452
00:47:00,230 --> 00:47:00,240

 

2453
00:47:00,240 --> 00:47:02,069

but you know that was the simplest thing

2454
00:47:02,069 --> 00:47:02,079
but you know that was the simplest thing
 

2455
00:47:02,079 --> 00:47:03,349
but you know that was the simplest thing
to do

2456
00:47:03,349 --> 00:47:03,359
to do
 

2457
00:47:03,359 --> 00:47:04,390
to do
so you have to make diffuse

2458
00:47:04,390 --> 00:47:04,400
so you have to make diffuse
 

2459
00:47:04,400 --> 00:47:11,510
so you have to make diffuse
modifications to get it to work

2460
00:47:11,510 --> 00:47:11,520
modifications to get it to work
 

2461
00:47:11,520 --> 00:47:14,230
modifications to get it to work
any further questions uh i have a

2462
00:47:14,230 --> 00:47:14,240
any further questions uh i have a
 

2463
00:47:14,240 --> 00:47:15,030
any further questions uh i have a
question

2464
00:47:15,030 --> 00:47:15,040
question
 

2465
00:47:15,040 --> 00:47:18,069
question
um is it possible that you can

2466
00:47:18,069 --> 00:47:18,079
um is it possible that you can
 

2467
00:47:18,079 --> 00:47:21,750
um is it possible that you can
copy 0 to 512 and then every time you

2468
00:47:21,750 --> 00:47:21,760
copy 0 to 512 and then every time you
 

2469
00:47:21,760 --> 00:47:23,670
copy 0 to 512 and then every time you
switch so you're still using like the

2470
00:47:23,670 --> 00:47:23,680
switch so you're still using like the
 

2471
00:47:23,680 --> 00:47:24,630
switch so you're still using like the
global

2472
00:47:24,630 --> 00:47:24,640
global
 

2473
00:47:24,640 --> 00:47:27,430
global
root page table except you only copy the

2474
00:47:27,430 --> 00:47:27,440
root page table except you only copy the
 

2475
00:47:27,440 --> 00:47:27,829
root page table except you only copy the
first

2476
00:47:27,829 --> 00:47:27,839
first
 

2477
00:47:27,839 --> 00:47:30,630
first
root page table and every time you

2478
00:47:30,630 --> 00:47:30,640
root page table and every time you
 

2479
00:47:30,640 --> 00:47:31,750
root page table and every time you
switch a process

2480
00:47:31,750 --> 00:47:31,760
switch a process
 

2481
00:47:31,760 --> 00:47:35,109
switch a process
you copy over the um users addresses

2482
00:47:35,109 --> 00:47:35,119
you copy over the um users addresses
 

2483
00:47:35,119 --> 00:47:35,510
you copy over the um users addresses
over

2484
00:47:35,510 --> 00:47:35,520
over
 

2485
00:47:35,520 --> 00:47:38,950
over
to yeah is that possible to do

2486
00:47:38,950 --> 00:47:38,960
to yeah is that possible to do
 

2487
00:47:38,960 --> 00:47:40,069
to yeah is that possible to do
in principle i think you could do

2488
00:47:40,069 --> 00:47:40,079
in principle i think you could do
 

2489
00:47:40,079 --> 00:47:41,270
in principle i think you could do
something like that so instead of

2490
00:47:41,270 --> 00:47:41,280
something like that so instead of
 

2491
00:47:41,280 --> 00:47:42,069
something like that so instead of
basically

2492
00:47:42,069 --> 00:47:42,079
basically
 

2493
00:47:42,079 --> 00:47:43,589
basically
doing when you allocate a process and

2494
00:47:43,589 --> 00:47:43,599
doing when you allocate a process and
 

2495
00:47:43,599 --> 00:47:44,870
doing when you allocate a process and
free it you could do it sort of

2496
00:47:44,870 --> 00:47:44,880
free it you could do it sort of
 

2497
00:47:44,880 --> 00:47:45,829
free it you could do it sort of
dynamically

2498
00:47:45,829 --> 00:47:45,839
dynamically
 

2499
00:47:45,839 --> 00:47:49,750
dynamically
during the scheduler switch uh

2500
00:47:49,750 --> 00:47:49,760
during the scheduler switch uh
 

2501
00:47:49,760 --> 00:47:52,000
during the scheduler switch uh
it seems complicated

2502
00:47:52,000 --> 00:47:52,010
it seems complicated
 

2503
00:47:52,010 --> 00:47:53,910
it seems complicated
[Music]

2504
00:47:53,910 --> 00:47:53,920
[Music]
 

2505
00:47:53,920 --> 00:47:55,430
[Music]
that might be more costly because that

2506
00:47:55,430 --> 00:47:55,440
that might be more costly because that
 

2507
00:47:55,440 --> 00:47:57,109
that might be more costly because that
means that every time

2508
00:47:57,109 --> 00:47:57,119
means that every time
 

2509
00:47:57,119 --> 00:47:59,349
means that every time
you switch between two processes you may

2510
00:47:59,349 --> 00:47:59,359
you switch between two processes you may
 

2511
00:47:59,359 --> 00:48:01,190
you switch between two processes you may
have to make a copy of parts of the

2512
00:48:01,190 --> 00:48:01,200
have to make a copy of parts of the
 

2513
00:48:01,200 --> 00:48:05,750
have to make a copy of parts of the
kernel page table and so that might be

2514
00:48:05,750 --> 00:48:05,760
kernel page table and so that might be
 

2515
00:48:05,760 --> 00:48:07,990
kernel page table and so that might be
perform is not an ideal thing the

2516
00:48:07,990 --> 00:48:08,000
perform is not an ideal thing the
 

2517
00:48:08,000 --> 00:48:09,510
perform is not an ideal thing the
assignment didn't really say anything

2518
00:48:09,510 --> 00:48:09,520
assignment didn't really say anything
 

2519
00:48:09,520 --> 00:48:10,470
assignment didn't really say anything
about it

2520
00:48:10,470 --> 00:48:10,480
about it
 

2521
00:48:10,480 --> 00:48:12,710
about it
uh you might have timed out in user

2522
00:48:12,710 --> 00:48:12,720
uh you might have timed out in user
 

2523
00:48:12,720 --> 00:48:18,230
uh you might have timed out in user
tests if you did that

2524
00:48:18,230 --> 00:48:18,240

 

2525
00:48:18,240 --> 00:48:19,510

okay i was just wondering because i

2526
00:48:19,510 --> 00:48:19,520
okay i was just wondering because i
 

2527
00:48:19,520 --> 00:48:21,270
okay i was just wondering because i
tried that approaching it was

2528
00:48:21,270 --> 00:48:21,280
tried that approaching it was
 

2529
00:48:21,280 --> 00:48:23,270
tried that approaching it was
a bad experience i was wondering if that

2530
00:48:23,270 --> 00:48:23,280
a bad experience i was wondering if that
 

2531
00:48:23,280 --> 00:48:25,510
a bad experience i was wondering if that
was passive i can imagine uh but

2532
00:48:25,510 --> 00:48:25,520
was passive i can imagine uh but
 

2533
00:48:25,520 --> 00:48:27,349
was passive i can imagine uh but
i i think it's in principle possible you

2534
00:48:27,349 --> 00:48:27,359
i i think it's in principle possible you
 

2535
00:48:27,359 --> 00:48:28,710
i i think it's in principle possible you
know you could just allocate a new page

2536
00:48:28,710 --> 00:48:28,720
know you could just allocate a new page
 

2537
00:48:28,720 --> 00:48:29,750
know you could just allocate a new page
table correctly and switch

2538
00:48:29,750 --> 00:48:29,760
table correctly and switch
 

2539
00:48:29,760 --> 00:48:32,710
table correctly and switch
any every time and upgrade when you

2540
00:48:32,710 --> 00:48:32,720
any every time and upgrade when you
 

2541
00:48:32,720 --> 00:48:36,069
any every time and upgrade when you
switch out

2542
00:48:36,069 --> 00:48:36,079

 

2543
00:48:36,079 --> 00:48:39,910

um i don't think it's the simplest but

2544
00:48:39,910 --> 00:48:39,920
um i don't think it's the simplest but
 

2545
00:48:39,920 --> 00:48:40,230
um i don't think it's the simplest but
you know

2546
00:48:40,230 --> 00:48:40,240
you know
 

2547
00:48:40,240 --> 00:48:43,270
you know
your principle it's possible i think

2548
00:48:43,270 --> 00:48:43,280
your principle it's possible i think
 

2549
00:48:43,280 --> 00:48:44,630
your principle it's possible i think
perhaps there's some other modifications

2550
00:48:44,630 --> 00:48:44,640
perhaps there's some other modifications
 

2551
00:48:44,640 --> 00:48:48,630
perhaps there's some other modifications
to xv6 but you know

2552
00:48:48,630 --> 00:48:48,640
to xv6 but you know
 

2553
00:48:48,640 --> 00:48:56,549
to xv6 but you know
any other questions

2554
00:48:56,549 --> 00:48:56,559

 

2555
00:48:56,559 --> 00:48:57,829

because the only other change that you

2556
00:48:57,829 --> 00:48:57,839
because the only other change that you
 

2557
00:48:57,839 --> 00:48:58,950
because the only other change that you
of course have to make is you use your

2558
00:48:58,950 --> 00:48:58,960
of course have to make is you use your
 

2559
00:48:58,960 --> 00:48:59,910
of course have to make is you use your
trap red

2560
00:48:59,910 --> 00:48:59,920
trap red
 

2561
00:48:59,920 --> 00:49:01,910
trap red
you got to make sure that actually you

2562
00:49:01,910 --> 00:49:01,920
you got to make sure that actually you
 

2563
00:49:01,920 --> 00:49:03,750
you got to make sure that actually you
run with

2564
00:49:03,750 --> 00:49:03,760
run with
 

2565
00:49:03,760 --> 00:49:07,349
run with
the processes kernel page table

2566
00:49:07,349 --> 00:49:07,359

 

2567
00:49:07,359 --> 00:49:11,349

okay okay so let's switch then to

2568
00:49:11,349 --> 00:49:11,359
okay okay so let's switch then to
 

2569
00:49:11,359 --> 00:49:13,220
okay okay so let's switch then to
i guess part three

2570
00:49:13,220 --> 00:49:13,230
i guess part three
 

2571
00:49:13,230 --> 00:49:15,349
i guess part three
[Music]

2572
00:49:15,349 --> 00:49:15,359
[Music]
 

2573
00:49:15,359 --> 00:49:18,390
[Music]
so um switch back to actually

2574
00:49:18,390 --> 00:49:18,400
so um switch back to actually
 

2575
00:49:18,400 --> 00:49:24,470
so um switch back to actually
uh here um

2576
00:49:24,470 --> 00:49:24,480

 

2577
00:49:24,480 --> 00:49:27,190

okay so uh actually that's maybe not a

2578
00:49:27,190 --> 00:49:27,200
okay so uh actually that's maybe not a
 

2579
00:49:27,200 --> 00:49:28,230
okay so uh actually that's maybe not a
helpful picture

2580
00:49:28,230 --> 00:49:28,240
helpful picture
 

2581
00:49:28,240 --> 00:49:37,030
helpful picture
let me see i okay so part three

2582
00:49:37,030 --> 00:49:37,040

 

2583
00:49:37,040 --> 00:49:39,990

uh so basically what our plan is is we

2584
00:49:39,990 --> 00:49:40,000
uh so basically what our plan is is we
 

2585
00:49:40,000 --> 00:49:42,309
uh so basically what our plan is is we
have our kernel page table

2586
00:49:42,309 --> 00:49:42,319
have our kernel page table
 

2587
00:49:42,319 --> 00:49:45,750
have our kernel page table
as before and uh you know we have the

2588
00:49:45,750 --> 00:49:45,760
as before and uh you know we have the
 

2589
00:49:45,760 --> 00:49:48,390
as before and uh you know we have the
click entries sitting somewhere

2590
00:49:48,390 --> 00:49:48,400
click entries sitting somewhere
 

2591
00:49:48,400 --> 00:49:50,069
click entries sitting somewhere
and what we're going to do is we're

2592
00:49:50,069 --> 00:49:50,079
and what we're going to do is we're
 

2593
00:49:50,079 --> 00:49:52,870
and what we're going to do is we're
going to use you know everything below

2594
00:49:52,870 --> 00:49:52,880
going to use you know everything below
 

2595
00:49:52,880 --> 00:49:53,510
going to use you know everything below
click

2596
00:49:53,510 --> 00:49:53,520
click
 

2597
00:49:53,520 --> 00:49:57,670
click
to actually store the user uh

2598
00:49:57,670 --> 00:49:57,680
to actually store the user uh
 

2599
00:49:57,680 --> 00:49:59,190
to actually store the user uh
page table where we're gonna map the

2600
00:49:59,190 --> 00:49:59,200
page table where we're gonna map the
 

2601
00:49:59,200 --> 00:50:01,589
page table where we're gonna map the
user page table into all the user pro or

2602
00:50:01,589 --> 00:50:01,599
user page table into all the user pro or
 

2603
00:50:01,599 --> 00:50:03,270
user page table into all the user pro or
the user program actually in the kernel

2604
00:50:03,270 --> 00:50:03,280
the user program actually in the kernel
 

2605
00:50:03,280 --> 00:50:05,190
the user program actually in the kernel
page table

2606
00:50:05,190 --> 00:50:05,200
page table
 

2607
00:50:05,200 --> 00:50:09,190
page table
in the bottom

2608
00:50:09,190 --> 00:50:09,200

 

2609
00:50:09,200 --> 00:50:11,510

uh and that's the goal and it was the

2610
00:50:11,510 --> 00:50:11,520
uh and that's the goal and it was the
 

2611
00:50:11,520 --> 00:50:12,549
uh and that's the goal and it was the
first question to ask

2612
00:50:12,549 --> 00:50:12,559
first question to ask
 

2613
00:50:12,559 --> 00:50:15,829
first question to ask
you know why the heck do that um

2614
00:50:15,829 --> 00:50:15,839
you know why the heck do that um
 

2615
00:50:15,839 --> 00:50:17,430
you know why the heck do that um
you know is there any you know any

2616
00:50:17,430 --> 00:50:17,440
you know is there any you know any
 

2617
00:50:17,440 --> 00:50:19,109
you know is there any you know any
advantage of it and

2618
00:50:19,109 --> 00:50:19,119
advantage of it and
 

2619
00:50:19,119 --> 00:50:20,470
advantage of it and
uh you know i think there may be the

2620
00:50:20,470 --> 00:50:20,480
uh you know i think there may be the
 

2621
00:50:20,480 --> 00:50:24,150
uh you know i think there may be the
middle easy way to

2622
00:50:24,150 --> 00:50:24,160
middle easy way to
 

2623
00:50:24,160 --> 00:50:26,390
middle easy way to
see why it might be interesting is to

2624
00:50:26,390 --> 00:50:26,400
see why it might be interesting is to
 

2625
00:50:26,400 --> 00:50:28,950
see why it might be interesting is to
core compare the copy ends

2626
00:50:28,950 --> 00:50:28,960
core compare the copy ends
 

2627
00:50:28,960 --> 00:50:32,790
core compare the copy ends
uh the new copying and the old copy in

2628
00:50:32,790 --> 00:50:32,800
uh the new copying and the old copy in
 

2629
00:50:32,800 --> 00:50:36,790
uh the new copying and the old copy in
so uh if you know so what happens in

2630
00:50:36,790 --> 00:50:36,800
so uh if you know so what happens in
 

2631
00:50:36,800 --> 00:50:39,990
so uh if you know so what happens in
copying correctly copy in copies data

2632
00:50:39,990 --> 00:50:40,000
copying correctly copy in copies data
 

2633
00:50:40,000 --> 00:50:41,910
copying correctly copy in copies data
from the user space into the kernel

2634
00:50:41,910 --> 00:50:41,920
from the user space into the kernel
 

2635
00:50:41,920 --> 00:50:44,710
from the user space into the kernel
address space

2636
00:50:44,710 --> 00:50:44,720

 

2637
00:50:44,720 --> 00:50:47,750

and but you know

2638
00:50:47,750 --> 00:50:47,760
and but you know
 

2639
00:50:47,760 --> 00:50:50,069
and but you know
if the kernel does not have the user

2640
00:50:50,069 --> 00:50:50,079
if the kernel does not have the user
 

2641
00:50:50,079 --> 00:50:52,470
if the kernel does not have the user
address space mapped

2642
00:50:52,470 --> 00:50:52,480
address space mapped
 

2643
00:50:52,480 --> 00:50:55,190
address space mapped
basically the kernel has to do this uh

2644
00:50:55,190 --> 00:50:55,200
basically the kernel has to do this uh
 

2645
00:50:55,200 --> 00:50:57,109
basically the kernel has to do this uh
page at the time

2646
00:50:57,109 --> 00:50:57,119
page at the time
 

2647
00:50:57,119 --> 00:50:58,549
page at the time
correct because the pages in virtual

2648
00:50:58,549 --> 00:50:58,559
correct because the pages in virtual
 

2649
00:50:58,559 --> 00:51:00,549
correct because the pages in virtual
address space might be continuous but in

2650
00:51:00,549 --> 00:51:00,559
address space might be continuous but in
 

2651
00:51:00,559 --> 00:51:01,750
address space might be continuous but in
physical address space they're not

2652
00:51:01,750 --> 00:51:01,760
physical address space they're not
 

2653
00:51:01,760 --> 00:51:02,870
physical address space they're not
continuous

2654
00:51:02,870 --> 00:51:02,880
continuous
 

2655
00:51:02,880 --> 00:51:04,150
continuous
and basically what the kernel does in

2656
00:51:04,150 --> 00:51:04,160
and basically what the kernel does in
 

2657
00:51:04,160 --> 00:51:06,549
and basically what the kernel does in
copy in it basically translates the

2658
00:51:06,549 --> 00:51:06,559
copy in it basically translates the
 

2659
00:51:06,559 --> 00:51:08,390
copy in it basically translates the
virtual user address

2660
00:51:08,390 --> 00:51:08,400
virtual user address
 

2661
00:51:08,400 --> 00:51:11,430
virtual user address
into a physical address

2662
00:51:11,430 --> 00:51:11,440
into a physical address
 

2663
00:51:11,440 --> 00:51:13,670
into a physical address
since the kernel has all physically

2664
00:51:13,670 --> 00:51:13,680
since the kernel has all physically
 

2665
00:51:13,680 --> 00:51:16,309
since the kernel has all physically
memory mapped with an identity mapping

2666
00:51:16,309 --> 00:51:16,319
memory mapped with an identity mapping
 

2667
00:51:16,319 --> 00:51:18,549
memory mapped with an identity mapping
the physical dress is also a valid

2668
00:51:18,549 --> 00:51:18,559
the physical dress is also a valid
 

2669
00:51:18,559 --> 00:51:20,150
the physical dress is also a valid
kernel

2670
00:51:20,150 --> 00:51:20,160
kernel
 

2671
00:51:20,160 --> 00:51:22,069
kernel
virtual dress and then it basically

2672
00:51:22,069 --> 00:51:22,079
virtual dress and then it basically
 

2673
00:51:22,079 --> 00:51:24,150
virtual dress and then it basically
moves whatever part of that page

2674
00:51:24,150 --> 00:51:24,160
moves whatever part of that page
 

2675
00:51:24,160 --> 00:51:25,670
moves whatever part of that page
physical page that needs to be copied

2676
00:51:25,670 --> 00:51:25,680
physical page that needs to be copied
 

2677
00:51:25,680 --> 00:51:27,910
physical page that needs to be copied
that actually copies it

2678
00:51:27,910 --> 00:51:27,920
that actually copies it
 

2679
00:51:27,920 --> 00:51:29,990
that actually copies it
and so if a data structure for example

2680
00:51:29,990 --> 00:51:30,000
and so if a data structure for example
 

2681
00:51:30,000 --> 00:51:32,150
and so if a data structure for example
spans you know to

2682
00:51:32,150 --> 00:51:32,160
spans you know to
 

2683
00:51:32,160 --> 00:51:34,150
spans you know to
a page boundary like for example this is

2684
00:51:34,150 --> 00:51:34,160
a page boundary like for example this is
 

2685
00:51:34,160 --> 00:51:36,630
a page boundary like for example this is
infostruct that you used in lab2 maybe

2686
00:51:36,630 --> 00:51:36,640
infostruct that you used in lab2 maybe
 

2687
00:51:36,640 --> 00:51:37,670
infostruct that you used in lab2 maybe
it spans

2688
00:51:37,670 --> 00:51:37,680
it spans
 

2689
00:51:37,680 --> 00:51:40,230
it spans
a page table boundary it will copy like

2690
00:51:40,230 --> 00:51:40,240
a page table boundary it will copy like
 

2691
00:51:40,240 --> 00:51:40,710
a page table boundary it will copy like
maybe

2692
00:51:40,710 --> 00:51:40,720
maybe
 

2693
00:51:40,720 --> 00:51:42,630
maybe
you know some bytes from the first

2694
00:51:42,630 --> 00:51:42,640
you know some bytes from the first
 

2695
00:51:42,640 --> 00:51:45,030
you know some bytes from the first
physical page and then some bytes from

2696
00:51:45,030 --> 00:51:45,040
physical page and then some bytes from
 

2697
00:51:45,040 --> 00:51:48,829
physical page and then some bytes from
a second physical page does that make

2698
00:51:48,829 --> 00:51:48,839
a second physical page does that make
 

2699
00:51:48,839 --> 00:51:51,990
a second physical page does that make
sense

2700
00:51:51,990 --> 00:51:52,000

 

2701
00:51:52,000 --> 00:51:53,910

so that's what the current copying does

2702
00:51:53,910 --> 00:51:53,920
so that's what the current copying does
 

2703
00:51:53,920 --> 00:51:55,670
so that's what the current copying does
and the goal was basically to get into a

2704
00:51:55,670 --> 00:51:55,680
and the goal was basically to get into a
 

2705
00:51:55,680 --> 00:51:57,750
and the goal was basically to get into a
new copy in

2706
00:51:57,750 --> 00:51:57,760
new copy in
 

2707
00:51:57,760 --> 00:51:59,190
new copy in
where the kernel program doesn't really

2708
00:51:59,190 --> 00:51:59,200
where the kernel program doesn't really
 

2709
00:51:59,200 --> 00:52:01,589
where the kernel program doesn't really
have to worry about

2710
00:52:01,589 --> 00:52:01,599
have to worry about
 

2711
00:52:01,599 --> 00:52:05,589
have to worry about
uh the physical layout basically off

2712
00:52:05,589 --> 00:52:05,599
uh the physical layout basically off
 

2713
00:52:05,599 --> 00:52:08,069
uh the physical layout basically off
the user address space uh and then in

2714
00:52:08,069 --> 00:52:08,079
the user address space uh and then in
 

2715
00:52:08,079 --> 00:52:09,910
the user address space uh and then in
this new copy and you know we see we

2716
00:52:09,910 --> 00:52:09,920
this new copy and you know we see we
 

2717
00:52:09,920 --> 00:52:11,510
this new copy and you know we see we
basically do nothing literally nothing

2718
00:52:11,510 --> 00:52:11,520
basically do nothing literally nothing
 

2719
00:52:11,520 --> 00:52:12,309
basically do nothing literally nothing
else then just

2720
00:52:12,309 --> 00:52:12,319
else then just
 

2721
00:52:12,319 --> 00:52:16,470
else then just
copy uh the from the user addresses

2722
00:52:16,470 --> 00:52:16,480
copy uh the from the user addresses
 

2723
00:52:16,480 --> 00:52:18,950
copy uh the from the user addresses
straight into the kernel uh and we don't

2724
00:52:18,950 --> 00:52:18,960
straight into the kernel uh and we don't
 

2725
00:52:18,960 --> 00:52:20,870
straight into the kernel uh and we don't
really have to call walk anymore

2726
00:52:20,870 --> 00:52:20,880
really have to call walk anymore
 

2727
00:52:20,880 --> 00:52:23,030
really have to call walk anymore
uh because we can rely on the we set up

2728
00:52:23,030 --> 00:52:23,040
uh because we can rely on the we set up
 

2729
00:52:23,040 --> 00:52:24,470
uh because we can rely on the we set up
the page tables correctly you know the

2730
00:52:24,470 --> 00:52:24,480
the page tables correctly you know the
 

2731
00:52:24,480 --> 00:52:26,230
the page tables correctly you know the
page table hardware will do the walk for

2732
00:52:26,230 --> 00:52:26,240
page table hardware will do the walk for
 

2733
00:52:26,240 --> 00:52:27,270
page table hardware will do the walk for
us

2734
00:52:27,270 --> 00:52:27,280
us
 

2735
00:52:27,280 --> 00:52:30,950
us
right and so that was the the goal

2736
00:52:30,950 --> 00:52:30,960
right and so that was the the goal
 

2737
00:52:30,960 --> 00:52:33,670
right and so that was the the goal
um and so it makes life for kernel

2738
00:52:33,670 --> 00:52:33,680
um and so it makes life for kernel
 

2739
00:52:33,680 --> 00:52:35,190
um and so it makes life for kernel
programmers a little bit easier

2740
00:52:35,190 --> 00:52:35,200
programmers a little bit easier
 

2741
00:52:35,200 --> 00:52:37,109
programmers a little bit easier
are there any other advantages to this

2742
00:52:37,109 --> 00:52:37,119
are there any other advantages to this
 

2743
00:52:37,119 --> 00:52:45,030
are there any other advantages to this
approach

2744
00:52:45,030 --> 00:52:45,040

 

2745
00:52:45,040 --> 00:52:47,430

is it also more performant because the

2746
00:52:47,430 --> 00:52:47,440
is it also more performant because the
 

2747
00:52:47,440 --> 00:52:48,710
is it also more performant because the
hardware is going to do

2748
00:52:48,710 --> 00:52:48,720
hardware is going to do
 

2749
00:52:48,720 --> 00:52:51,589
hardware is going to do
the walking and not software yeah well

2750
00:52:51,589 --> 00:52:51,599
the walking and not software yeah well
 

2751
00:52:51,599 --> 00:52:52,549
the walking and not software yeah well
one way to

2752
00:52:52,549 --> 00:52:52,559
one way to
 

2753
00:52:52,559 --> 00:52:53,349
one way to
i think there are performance

2754
00:52:53,349 --> 00:52:53,359
i think there are performance
 

2755
00:52:53,359 --> 00:52:55,589
i think there are performance
implications for sure uh one way to

2756
00:52:55,589 --> 00:52:55,599
implications for sure uh one way to
 

2757
00:52:55,599 --> 00:52:57,190
implications for sure uh one way to
think about this is that

2758
00:52:57,190 --> 00:52:57,200
think about this is that
 

2759
00:52:57,200 --> 00:52:59,589
think about this is that
in copying correct if the kernel data

2760
00:52:59,589 --> 00:52:59,599
in copying correct if the kernel data
 

2761
00:52:59,599 --> 00:53:00,230
in copying correct if the kernel data
structure

2762
00:53:00,230 --> 00:53:00,240
structure
 

2763
00:53:00,240 --> 00:53:02,150
structure
or the data data that we copied from

2764
00:53:02,150 --> 00:53:02,160
or the data data that we copied from
 

2765
00:53:02,160 --> 00:53:03,829
or the data data that we copied from
user space to

2766
00:53:03,829 --> 00:53:03,839
user space to
 

2767
00:53:03,839 --> 00:53:07,030
user space to
uh kernel space is big uh we have to do

2768
00:53:07,030 --> 00:53:07,040
uh kernel space is big uh we have to do
 

2769
00:53:07,040 --> 00:53:08,950
uh kernel space is big uh we have to do
that you know page at a time

2770
00:53:08,950 --> 00:53:08,960
that you know page at a time
 

2771
00:53:08,960 --> 00:53:10,870
that you know page at a time
right in every page we have to call this

2772
00:53:10,870 --> 00:53:10,880
right in every page we have to call this
 

2773
00:53:10,880 --> 00:53:12,710
right in every page we have to call this
function walk adder and then then does

2774
00:53:12,710 --> 00:53:12,720
function walk adder and then then does
 

2775
00:53:12,720 --> 00:53:14,549
function walk adder and then then does
the internal walking

2776
00:53:14,549 --> 00:53:14,559
the internal walking
 

2777
00:53:14,559 --> 00:53:17,430
the internal walking
and so this might actually be reasonable

2778
00:53:17,430 --> 00:53:17,440
and so this might actually be reasonable
 

2779
00:53:17,440 --> 00:53:18,069
and so this might actually be reasonable
expenses

2780
00:53:18,069 --> 00:53:18,079
expenses
 

2781
00:53:18,079 --> 00:53:20,870
expenses
expensive what examples are there

2782
00:53:20,870 --> 00:53:20,880
expensive what examples are there
 

2783
00:53:20,880 --> 00:53:22,230
expensive what examples are there
examples of where

2784
00:53:22,230 --> 00:53:22,240
examples of where
 

2785
00:53:22,240 --> 00:53:24,950
examples of where
the kernel copies a lot of data from

2786
00:53:24,950 --> 00:53:24,960
the kernel copies a lot of data from
 

2787
00:53:24,960 --> 00:53:33,270
the kernel copies a lot of data from
user space

2788
00:53:33,270 --> 00:53:33,280

 

2789
00:53:33,280 --> 00:53:35,589

which system call might copy a ton of

2790
00:53:35,589 --> 00:53:35,599
which system call might copy a ton of
 

2791
00:53:35,599 --> 00:53:38,549
which system call might copy a ton of
data from user space

2792
00:53:38,549 --> 00:53:38,559
data from user space
 

2793
00:53:38,559 --> 00:53:41,190
data from user space
right yeah right right you write you can

2794
00:53:41,190 --> 00:53:41,200
right yeah right right you write you can
 

2795
00:53:41,200 --> 00:53:42,150
right yeah right right you write you can
give an arbitrary

2796
00:53:42,150 --> 00:53:42,160
give an arbitrary
 

2797
00:53:42,160 --> 00:53:45,990
give an arbitrary
number an arbitrary buffer

2798
00:53:45,990 --> 00:53:46,000
number an arbitrary buffer
 

2799
00:53:46,000 --> 00:53:48,630
number an arbitrary buffer
of an arbitrary size and you know the

2800
00:53:48,630 --> 00:53:48,640
of an arbitrary size and you know the
 

2801
00:53:48,640 --> 00:53:50,309
of an arbitrary size and you know the
kernel wall may have to copy this you

2802
00:53:50,309 --> 00:53:50,319
kernel wall may have to copy this you
 

2803
00:53:50,319 --> 00:53:51,109
kernel wall may have to copy this you
know into

2804
00:53:51,109 --> 00:53:51,119
know into
 

2805
00:53:51,119 --> 00:53:53,589
know into
for example the file system or into a

2806
00:53:53,589 --> 00:53:53,599
for example the file system or into a
 

2807
00:53:53,599 --> 00:53:54,790
for example the file system or into a
pipe

2808
00:53:54,790 --> 00:53:54,800
pipe
 

2809
00:53:54,800 --> 00:53:56,470
pipe
uh and that could be you know reasonably

2810
00:53:56,470 --> 00:53:56,480
uh and that could be you know reasonably
 

2811
00:53:56,480 --> 00:54:00,069
uh and that could be you know reasonably
expensive

2812
00:54:00,069 --> 00:54:00,079

 

2813
00:54:00,079 --> 00:54:01,430

the other thing what is another

2814
00:54:01,430 --> 00:54:01,440
the other thing what is another
 

2815
00:54:01,440 --> 00:54:03,589
the other thing what is another
advantage i think if the user

2816
00:54:03,589 --> 00:54:03,599
advantage i think if the user
 

2817
00:54:03,599 --> 00:54:05,750
advantage i think if the user
uh we didn't explore that in this

2818
00:54:05,750 --> 00:54:05,760
uh we didn't explore that in this
 

2819
00:54:05,760 --> 00:54:07,349
uh we didn't explore that in this
assignment you know we assume we could

2820
00:54:07,349 --> 00:54:07,359
assignment you know we assume we could
 

2821
00:54:07,359 --> 00:54:08,069
assignment you know we assume we could
have

2822
00:54:08,069 --> 00:54:08,079
have
 

2823
00:54:08,079 --> 00:54:12,950
have
uh what is another advantage

2824
00:54:12,950 --> 00:54:12,960

 

2825
00:54:12,960 --> 00:54:14,950

so if you think about you know some of

2826
00:54:14,950 --> 00:54:14,960
so if you think about you know some of
 

2827
00:54:14,960 --> 00:54:16,790
so if you think about you know some of
these this code here correct when it you

2828
00:54:16,790 --> 00:54:16,800
these this code here correct when it you
 

2829
00:54:16,800 --> 00:54:19,030
these this code here correct when it you
know takes a structure out of user space

2830
00:54:19,030 --> 00:54:19,040
know takes a structure out of user space
 

2831
00:54:19,040 --> 00:54:21,109
know takes a structure out of user space
it copies the whole structure into

2832
00:54:21,109 --> 00:54:21,119
it copies the whole structure into
 

2833
00:54:21,119 --> 00:54:22,870
it copies the whole structure into
kernel space

2834
00:54:22,870 --> 00:54:22,880
kernel space
 

2835
00:54:22,880 --> 00:54:25,030
kernel space
if user space is mapped into the kernel

2836
00:54:25,030 --> 00:54:25,040
if user space is mapped into the kernel
 

2837
00:54:25,040 --> 00:54:31,510
if user space is mapped into the kernel
page table do we have to do that

2838
00:54:31,510 --> 00:54:31,520

 

2839
00:54:31,520 --> 00:54:33,030

for example if we have to update one

2840
00:54:33,030 --> 00:54:33,040
for example if we have to update one
 

2841
00:54:33,040 --> 00:54:46,710
for example if we have to update one
field of the structure

2842
00:54:46,710 --> 00:54:46,720

 

2843
00:54:46,720 --> 00:54:49,589

so with if the data structure is just

2844
00:54:49,589 --> 00:54:49,599
so with if the data structure is just
 

2845
00:54:49,599 --> 00:54:51,109
so with if the data structure is just
mapped into the kernel address case

2846
00:54:51,109 --> 00:54:51,119
mapped into the kernel address case
 

2847
00:54:51,119 --> 00:54:52,789
mapped into the kernel address case
right then we can just like

2848
00:54:52,789 --> 00:54:52,799
right then we can just like
 

2849
00:54:52,799 --> 00:54:54,390
right then we can just like
read and write you know with story

2850
00:54:54,390 --> 00:54:54,400
read and write you know with story
 

2851
00:54:54,400 --> 00:54:55,750
read and write you know with story
instructions to that particular data

2852
00:54:55,750 --> 00:54:55,760
instructions to that particular data
 

2853
00:54:55,760 --> 00:54:57,190
instructions to that particular data
structure and we can just update one

2854
00:54:57,190 --> 00:54:57,200
structure and we can just update one
 

2855
00:54:57,200 --> 00:54:58,390
structure and we can just update one
field

2856
00:54:58,390 --> 00:54:58,400
field
 

2857
00:54:58,400 --> 00:54:59,589
field
unlike what the kernel now does

2858
00:54:59,589 --> 00:54:59,599
unlike what the kernel now does
 

2859
00:54:59,599 --> 00:55:02,789
unlike what the kernel now does
basically it copies the structure from

2860
00:55:02,789 --> 00:55:02,799
basically it copies the structure from
 

2861
00:55:02,799 --> 00:55:04,309
basically it copies the structure from
kernel space to user space and then

2862
00:55:04,309 --> 00:55:04,319
kernel space to user space and then
 

2863
00:55:04,319 --> 00:55:05,990
kernel space to user space and then
maybe back out using copy

2864
00:55:05,990 --> 00:55:06,000
maybe back out using copy
 

2865
00:55:06,000 --> 00:55:09,190
maybe back out using copy
out right so if we map the user space

2866
00:55:09,190 --> 00:55:09,200
out right so if we map the user space
 

2867
00:55:09,200 --> 00:55:09,670
out right so if we map the user space
into

2868
00:55:09,670 --> 00:55:09,680
into
 

2869
00:55:09,680 --> 00:55:11,190
into
the user program into the kernel address

2870
00:55:11,190 --> 00:55:11,200
the user program into the kernel address
 

2871
00:55:11,200 --> 00:55:12,870
the user program into the kernel address
space we can just manipulate it much

2872
00:55:12,870 --> 00:55:12,880
space we can just manipulate it much
 

2873
00:55:12,880 --> 00:55:13,589
space we can just manipulate it much
more

2874
00:55:13,589 --> 00:55:13,599
more
 

2875
00:55:13,599 --> 00:55:18,549
more
freely than uh the way we do it now

2876
00:55:18,549 --> 00:55:18,559

 

2877
00:55:18,559 --> 00:55:19,750

does that make sense in terms of

2878
00:55:19,750 --> 00:55:19,760
does that make sense in terms of
 

2879
00:55:19,760 --> 00:55:22,630
does that make sense in terms of
motivation why many kernels actually

2880
00:55:22,630 --> 00:55:22,640
motivation why many kernels actually
 

2881
00:55:22,640 --> 00:55:23,990
motivation why many kernels actually
have this particular structure where

2882
00:55:23,990 --> 00:55:24,000
have this particular structure where
 

2883
00:55:24,000 --> 00:55:27,190
have this particular structure where
they map the

2884
00:55:27,190 --> 00:55:27,200

 

2885
00:55:27,200 --> 00:55:29,829

bottom part of the user uh or where to

2886
00:55:29,829 --> 00:55:29,839
bottom part of the user uh or where to
 

2887
00:55:29,839 --> 00:55:31,270
bottom part of the user uh or where to
map the user programming to the bottom

2888
00:55:31,270 --> 00:55:31,280
map the user programming to the bottom
 

2889
00:55:31,280 --> 00:55:39,190
map the user programming to the bottom
part of the kernel address space

2890
00:55:39,190 --> 00:55:39,200

 

2891
00:55:39,200 --> 00:55:44,710

okay

2892
00:55:44,710 --> 00:55:44,720

 

2893
00:55:44,720 --> 00:55:47,589

okay so so let's see little look at my

2894
00:55:47,589 --> 00:55:47,599
okay so so let's see little look at my
 

2895
00:55:47,599 --> 00:55:49,270
okay so so let's see little look at my
code

2896
00:55:49,270 --> 00:55:49,280
code
 

2897
00:55:49,280 --> 00:55:53,910
code
and so you understand what actually uh

2898
00:55:53,910 --> 00:55:53,920

 

2899
00:55:53,920 --> 00:55:56,069

i did so there's basically one function

2900
00:55:56,069 --> 00:55:56,079
i did so there's basically one function
 

2901
00:55:56,079 --> 00:55:57,270
i did so there's basically one function
that is the key correct

2902
00:55:57,270 --> 00:55:57,280
that is the key correct
 

2903
00:55:57,280 --> 00:55:59,190
that is the key correct
uh you know assuming we're building

2904
00:55:59,190 --> 00:55:59,200
uh you know assuming we're building
 

2905
00:55:59,200 --> 00:56:00,630
uh you know assuming we're building
somewhere a valid

2906
00:56:00,630 --> 00:56:00,640
somewhere a valid
 

2907
00:56:00,640 --> 00:56:02,390
somewhere a valid
user page table and then we just have to

2908
00:56:02,390 --> 00:56:02,400
user page table and then we just have to
 

2909
00:56:02,400 --> 00:56:03,990
user page table and then we just have to
map uh

2910
00:56:03,990 --> 00:56:04,000
map uh
 

2911
00:56:04,000 --> 00:56:06,069
map uh
the entries from the user page table

2912
00:56:06,069 --> 00:56:06,079
the entries from the user page table
 

2913
00:56:06,079 --> 00:56:07,910
the entries from the user page table
into the kernel page table

2914
00:56:07,910 --> 00:56:07,920
into the kernel page table
 

2915
00:56:07,920 --> 00:56:10,710
into the kernel page table
uh or the processes kernel page table so

2916
00:56:10,710 --> 00:56:10,720
uh or the processes kernel page table so
 

2917
00:56:10,720 --> 00:56:12,710
uh or the processes kernel page table so
a function kvnet map user that exactly

2918
00:56:12,710 --> 00:56:12,720
a function kvnet map user that exactly
 

2919
00:56:12,720 --> 00:56:14,789
a function kvnet map user that exactly
does this

2920
00:56:14,789 --> 00:56:14,799
does this
 

2921
00:56:14,799 --> 00:56:17,589
does this
and it's pretty boring um but the main

2922
00:56:17,589 --> 00:56:17,599
and it's pretty boring um but the main
 

2923
00:56:17,599 --> 00:56:19,510
and it's pretty boring um but the main
couple interesting points to point out

2924
00:56:19,510 --> 00:56:19,520
couple interesting points to point out
 

2925
00:56:19,520 --> 00:56:22,630
couple interesting points to point out
uh and work you know uh it has the same

2926
00:56:22,630 --> 00:56:22,640
uh and work you know uh it has the same
 

2927
00:56:22,640 --> 00:56:23,030
uh and work you know uh it has the same
sort of

2928
00:56:23,030 --> 00:56:23,040
sort of
 

2929
00:56:23,040 --> 00:56:26,390
sort of
uh interfaces uh

2930
00:56:26,390 --> 00:56:26,400
uh interfaces uh
 

2931
00:56:26,400 --> 00:56:29,750
uh interfaces uh
uh uv analog or whatever or basically if

2932
00:56:29,750 --> 00:56:29,760
uh uv analog or whatever or basically if
 

2933
00:56:29,760 --> 00:56:31,270
uh uv analog or whatever or basically if
you know you go from the old size

2934
00:56:31,270 --> 00:56:31,280
you know you go from the old size
 

2935
00:56:31,280 --> 00:56:35,190
you know you go from the old size
up to the new size page at a time

2936
00:56:35,190 --> 00:56:35,200

 

2937
00:56:35,200 --> 00:56:38,309

you find the uh

2938
00:56:38,309 --> 00:56:38,319
you find the uh
 

2939
00:56:38,319 --> 00:56:41,910
you find the uh
upte you know the pointer

2940
00:56:41,910 --> 00:56:41,920
upte you know the pointer
 

2941
00:56:41,920 --> 00:56:45,349
upte you know the pointer
to the pte for that particular virtual

2942
00:56:45,349 --> 00:56:45,359
to the pte for that particular virtual
 

2943
00:56:45,359 --> 00:56:47,910
to the pte for that particular virtual
address in the user page table

2944
00:56:47,910 --> 00:56:47,920
address in the user page table
 

2945
00:56:47,920 --> 00:56:51,829
address in the user page table
right so if we look at the uh

2946
00:56:51,829 --> 00:56:51,839
right so if we look at the uh
 

2947
00:56:51,839 --> 00:56:53,829
right so if we look at the uh
if we look at the picture that we had a

2948
00:56:53,829 --> 00:56:53,839
if we look at the picture that we had a
 

2949
00:56:53,839 --> 00:56:55,990
if we look at the picture that we had a
little while back you know look at the

2950
00:56:55,990 --> 00:56:56,000
little while back you know look at the
 

2951
00:56:56,000 --> 00:56:58,390
little while back you know look at the
this picture basically what this is

2952
00:56:58,390 --> 00:56:58,400
this picture basically what this is
 

2953
00:56:58,400 --> 00:56:59,910
this picture basically what this is
going to return correct is

2954
00:56:59,910 --> 00:56:59,920
going to return correct is
 

2955
00:56:59,920 --> 00:57:01,589
going to return correct is
we're going to walk the user page table

2956
00:57:01,589 --> 00:57:01,599
we're going to walk the user page table
 

2957
00:57:01,599 --> 00:57:03,750
we're going to walk the user page table
and we'll find for example the

2958
00:57:03,750 --> 00:57:03,760
and we'll find for example the
 

2959
00:57:03,760 --> 00:57:06,230
and we'll find for example the
pte that maps you know that particular

2960
00:57:06,230 --> 00:57:06,240
pte that maps you know that particular
 

2961
00:57:06,240 --> 00:57:07,910
pte that maps you know that particular
virtual address and we get a basically

2962
00:57:07,910 --> 00:57:07,920
virtual address and we get a basically
 

2963
00:57:07,920 --> 00:57:10,829
virtual address and we get a basically
pointer to that entry into the page

2964
00:57:10,829 --> 00:57:10,839
pointer to that entry into the page
 

2965
00:57:10,839 --> 00:57:12,470
pointer to that entry into the page
table

2966
00:57:12,470 --> 00:57:12,480
table
 

2967
00:57:12,480 --> 00:57:16,470
table
um so that's what block does

2968
00:57:16,470 --> 00:57:16,480
um so that's what block does
 

2969
00:57:16,480 --> 00:57:20,390
um so that's what block does
and so if the uh thing is mapped if it's

2970
00:57:20,390 --> 00:57:20,400
and so if the uh thing is mapped if it's
 

2971
00:57:20,400 --> 00:57:22,150
and so if the uh thing is mapped if it's
not zero that must mean you know it is

2972
00:57:22,150 --> 00:57:22,160
not zero that must mean you know it is
 

2973
00:57:22,160 --> 00:57:23,430
not zero that must mean you know it is
there so this is just a

2974
00:57:23,430 --> 00:57:23,440
there so this is just a
 

2975
00:57:23,440 --> 00:57:24,950
there so this is just a
check to double check that actually the

2976
00:57:24,950 --> 00:57:24,960
check to double check that actually the
 

2977
00:57:24,960 --> 00:57:26,470
check to double check that actually the
mapping is there

2978
00:57:26,470 --> 00:57:26,480
mapping is there
 

2979
00:57:26,480 --> 00:57:29,510
mapping is there
um we check this valid just like there's

2980
00:57:29,510 --> 00:57:29,520
um we check this valid just like there's
 

2981
00:57:29,520 --> 00:57:30,230
um we check this valid just like there's
debugging

2982
00:57:30,230 --> 00:57:30,240
debugging
 

2983
00:57:30,240 --> 00:57:32,230
debugging
help in some sense you know it should be

2984
00:57:32,230 --> 00:57:32,240
help in some sense you know it should be
 

2985
00:57:32,240 --> 00:57:33,990
help in some sense you know it should be
the case that it is valid

2986
00:57:33,990 --> 00:57:34,000
the case that it is valid
 

2987
00:57:34,000 --> 00:57:35,589
the case that it is valid
uh and then i do the same thing in the

2988
00:57:35,589 --> 00:57:35,599
uh and then i do the same thing in the
 

2989
00:57:35,599 --> 00:57:38,069
uh and then i do the same thing in the
kernel page table i look up that virtual

2990
00:57:38,069 --> 00:57:38,079
kernel page table i look up that virtual
 

2991
00:57:38,079 --> 00:57:39,270
kernel page table i look up that virtual
address also in the

2992
00:57:39,270 --> 00:57:39,280
address also in the
 

2993
00:57:39,280 --> 00:57:41,670
address also in the
processors kernel page table but i call

2994
00:57:41,670 --> 00:57:41,680
processors kernel page table but i call
 

2995
00:57:41,680 --> 00:57:42,789
processors kernel page table but i call
this time

2996
00:57:42,789 --> 00:57:42,799
this time
 

2997
00:57:42,799 --> 00:57:45,190
this time
block with one so it actually allocates

2998
00:57:45,190 --> 00:57:45,200
block with one so it actually allocates
 

2999
00:57:45,200 --> 00:57:48,390
block with one so it actually allocates
intermediate pages if necessary

3000
00:57:48,390 --> 00:57:48,400
intermediate pages if necessary
 

3001
00:57:48,400 --> 00:57:51,109
intermediate pages if necessary
uh then once i got the pointer to the

3002
00:57:51,109 --> 00:57:51,119
uh then once i got the pointer to the
 

3003
00:57:51,119 --> 00:57:52,470
uh then once i got the pointer to the
kernel pt

3004
00:57:52,470 --> 00:57:52,480
kernel pt
 

3005
00:57:52,480 --> 00:57:54,630
kernel pt
i just copied the user pt into the

3006
00:57:54,630 --> 00:57:54,640
i just copied the user pt into the
 

3007
00:57:54,640 --> 00:57:56,710
i just copied the user pt into the
kernel pt

3008
00:57:56,710 --> 00:57:56,720
kernel pt
 

3009
00:57:56,720 --> 00:57:59,589
kernel pt
uh so probably a lot of you called map

3010
00:57:59,589 --> 00:57:59,599
uh so probably a lot of you called map
 

3011
00:57:59,599 --> 00:58:00,630
uh so probably a lot of you called map
pages

3012
00:58:00,630 --> 00:58:00,640
pages
 

3013
00:58:00,640 --> 00:58:03,670
pages
uh but i just copied directly the pte

3014
00:58:03,670 --> 00:58:03,680
uh but i just copied directly the pte
 

3015
00:58:03,680 --> 00:58:05,030
uh but i just copied directly the pte
into the kernel ptd

3016
00:58:05,030 --> 00:58:05,040
into the kernel ptd
 

3017
00:58:05,040 --> 00:58:06,390
into the kernel ptd
and of course you know i got to disable

3018
00:58:06,390 --> 00:58:06,400
and of course you know i got to disable
 

3019
00:58:06,400 --> 00:58:08,150
and of course you know i got to disable
some bits which we'll talk about in a

3020
00:58:08,150 --> 00:58:08,160
some bits which we'll talk about in a
 

3021
00:58:08,160 --> 00:58:08,950
some bits which we'll talk about in a
second

3022
00:58:08,950 --> 00:58:08,960
second
 

3023
00:58:08,960 --> 00:58:12,950
second
uh but um the essence of it is i just

3024
00:58:12,950 --> 00:58:12,960
uh but um the essence of it is i just
 

3025
00:58:12,960 --> 00:58:14,230
uh but um the essence of it is i just
want to copy the kernel page

3026
00:58:14,230 --> 00:58:14,240
want to copy the kernel page
 

3027
00:58:14,240 --> 00:58:17,589
want to copy the kernel page
the pte entries and so that means that

3028
00:58:17,589 --> 00:58:17,599
the pte entries and so that means that
 

3029
00:58:17,599 --> 00:58:20,230
the pte entries and so that means that
for example the physical memory for the

3030
00:58:20,230 --> 00:58:20,240
for example the physical memory for the
 

3031
00:58:20,240 --> 00:58:22,069
for example the physical memory for the
user program is just shared

3032
00:58:22,069 --> 00:58:22,079
user program is just shared
 

3033
00:58:22,079 --> 00:58:28,150
user program is just shared
between the kernel space and user space

3034
00:58:28,150 --> 00:58:28,160

 

3035
00:58:28,160 --> 00:58:33,910

okay does that make sense

3036
00:58:33,910 --> 00:58:33,920

 

3037
00:58:33,920 --> 00:58:35,349

okay so then in terms of switching up

3038
00:58:35,349 --> 00:58:35,359
okay so then in terms of switching up
 

3039
00:58:35,359 --> 00:58:37,030
okay so then in terms of switching up
some bits uh i'm

3040
00:58:37,030 --> 00:58:37,040
some bits uh i'm
 

3041
00:58:37,040 --> 00:58:39,990
some bits uh i'm
a little bit uh more than necessary but

3042
00:58:39,990 --> 00:58:40,000
a little bit uh more than necessary but
 

3043
00:58:40,000 --> 00:58:41,349
a little bit uh more than necessary but
i switch off the execute bit

3044
00:58:41,349 --> 00:58:41,359
i switch off the execute bit
 

3045
00:58:41,359 --> 00:58:44,390
i switch off the execute bit
i switch up the right bit this copy in

3046
00:58:44,390 --> 00:58:44,400
i switch up the right bit this copy in
 

3047
00:58:44,400 --> 00:58:44,870
i switch up the right bit this copy in
only

3048
00:58:44,870 --> 00:58:44,880
only
 

3049
00:58:44,880 --> 00:58:47,589
only
needs to read uh never writes to it or

3050
00:58:47,589 --> 00:58:47,599
needs to read uh never writes to it or
 

3051
00:58:47,599 --> 00:58:49,109
needs to read uh never writes to it or
copy out does that

3052
00:58:49,109 --> 00:58:49,119
copy out does that
 

3053
00:58:49,119 --> 00:58:51,670
copy out does that
and then uh you have to switch up the

3054
00:58:51,670 --> 00:58:51,680
and then uh you have to switch up the
 

3055
00:58:51,680 --> 00:58:53,349
and then uh you have to switch up the
ubit

3056
00:58:53,349 --> 00:58:53,359
ubit
 

3057
00:58:53,359 --> 00:58:56,950
ubit
and that is a sort of risk 5 specific

3058
00:58:56,950 --> 00:58:56,960
and that is a sort of risk 5 specific
 

3059
00:58:56,960 --> 00:58:57,510
and that is a sort of risk 5 specific
thing

3060
00:58:57,510 --> 00:58:57,520
thing
 

3061
00:58:57,520 --> 00:59:00,390
thing
that if you're running in kernel mode uh

3062
00:59:00,390 --> 00:59:00,400
that if you're running in kernel mode uh
 

3063
00:59:00,400 --> 00:59:00,870
that if you're running in kernel mode uh
and

3064
00:59:00,870 --> 00:59:00,880
and
 

3065
00:59:00,880 --> 00:59:03,750
and
the u-bit is set in the ptv entry the

3066
00:59:03,750 --> 00:59:03,760
the u-bit is set in the ptv entry the
 

3067
00:59:03,760 --> 00:59:05,349
the u-bit is set in the ptv entry the
kernel can actually not

3068
00:59:05,349 --> 00:59:05,359
kernel can actually not
 

3069
00:59:05,359 --> 00:59:09,030
kernel can actually not
access that particular page

3070
00:59:09,030 --> 00:59:09,040

 

3071
00:59:09,040 --> 00:59:12,950

in fact you can this is almost a choice

3072
00:59:12,950 --> 00:59:12,960
in fact you can this is almost a choice
 

3073
00:59:12,960 --> 00:59:14,710
in fact you can this is almost a choice
you can also actually program the risk 5

3074
00:59:14,710 --> 00:59:14,720
you can also actually program the risk 5
 

3075
00:59:14,720 --> 00:59:17,190
you can also actually program the risk 5
hardware but basically in kernel mode

3076
00:59:17,190 --> 00:59:17,200
hardware but basically in kernel mode
 

3077
00:59:17,200 --> 00:59:20,870
hardware but basically in kernel mode
it ignores the u-bit

3078
00:59:20,870 --> 00:59:20,880

 

3079
00:59:20,880 --> 00:59:25,030

and but xv6 doesn't do that

3080
00:59:25,030 --> 00:59:25,040
and but xv6 doesn't do that
 

3081
00:59:25,040 --> 00:59:30,789
and but xv6 doesn't do that
and so you have to switch up the u-bit

3082
00:59:30,789 --> 00:59:30,799

 

3083
00:59:30,799 --> 00:59:32,230

any questions about the ubit because the

3084
00:59:32,230 --> 00:59:32,240
any questions about the ubit because the
 

3085
00:59:32,240 --> 00:59:33,910
any questions about the ubit because the
required number of you are asked about

3086
00:59:33,910 --> 00:59:33,920
required number of you are asked about
 

3087
00:59:33,920 --> 00:59:40,470
required number of you are asked about
it

3088
00:59:40,470 --> 00:59:40,480

 

3089
00:59:40,480 --> 00:59:43,589

so is this done just to make sure that

3090
00:59:43,589 --> 00:59:43,599
so is this done just to make sure that
 

3091
00:59:43,599 --> 00:59:46,069
so is this done just to make sure that
the kernel doesn't do anything bad to

3092
00:59:46,069 --> 00:59:46,079
the kernel doesn't do anything bad to
 

3093
00:59:46,079 --> 00:59:47,030
the kernel doesn't do anything bad to
user

3094
00:59:47,030 --> 00:59:47,040
user
 

3095
00:59:47,040 --> 00:59:49,349
user
memory yeah so why is this the case

3096
00:59:49,349 --> 00:59:49,359
memory yeah so why is this the case
 

3097
00:59:49,359 --> 00:59:50,789
memory yeah so why is this the case
right is this you know

3098
00:59:50,789 --> 00:59:50,799
right is this you know
 

3099
00:59:50,799 --> 00:59:52,069
right is this you know
so the question is like is this for

3100
00:59:52,069 --> 00:59:52,079
so the question is like is this for
 

3101
00:59:52,079 --> 00:59:53,750
so the question is like is this for
debugging reasons or is there sort of an

3102
00:59:53,750 --> 00:59:53,760
debugging reasons or is there sort of an
 

3103
00:59:53,760 --> 00:59:55,829
debugging reasons or is there sort of an
isolation reason to do so

3104
00:59:55,829 --> 00:59:55,839
isolation reason to do so
 

3105
00:59:55,839 --> 00:59:57,990
isolation reason to do so
and uh i think this is mostly for

3106
00:59:57,990 --> 00:59:58,000
and uh i think this is mostly for
 

3107
00:59:58,000 --> 00:59:59,430
and uh i think this is mostly for
debugging reasons

3108
00:59:59,430 --> 00:59:59,440
debugging reasons
 

3109
00:59:59,440 --> 01:00:01,270
debugging reasons
uh because the kernel is in full control

3110
01:00:01,270 --> 01:00:01,280
uh because the kernel is in full control
 

3111
01:00:01,280 --> 01:00:03,430
uh because the kernel is in full control
anyway right the kernel can

3112
01:00:03,430 --> 01:00:03,440
anyway right the kernel can
 

3113
01:00:03,440 --> 01:00:05,430
anyway right the kernel can
change to the satp register it will it

3114
01:00:05,430 --> 01:00:05,440
change to the satp register it will it
 

3115
01:00:05,440 --> 01:00:07,589
change to the satp register it will it
can disable paging as it wants to

3116
01:00:07,589 --> 01:00:07,599
can disable paging as it wants to
 

3117
01:00:07,599 --> 01:00:09,750
can disable paging as it wants to
uh so it's not like you know the user

3118
01:00:09,750 --> 01:00:09,760
uh so it's not like you know the user
 

3119
01:00:09,760 --> 01:00:10,950
uh so it's not like you know the user
space is protected

3120
01:00:10,950 --> 01:00:10,960
space is protected
 

3121
01:00:10,960 --> 01:00:13,030
space is protected
from the kernel i think it's mostly to

3122
01:00:13,030 --> 01:00:13,040
from the kernel i think it's mostly to
 

3123
01:00:13,040 --> 01:00:15,190
from the kernel i think it's mostly to
basically uh help kernel developers so

3124
01:00:15,190 --> 01:00:15,200
basically uh help kernel developers so
 

3125
01:00:15,200 --> 01:00:16,950
basically uh help kernel developers so
for example in xv6 case correct

3126
01:00:16,950 --> 01:00:16,960
for example in xv6 case correct
 

3127
01:00:16,960 --> 01:00:20,069
for example in xv6 case correct
unmodified xv6 should never dereference

3128
01:00:20,069 --> 01:00:20,079
unmodified xv6 should never dereference
 

3129
01:00:20,079 --> 01:00:22,150
unmodified xv6 should never dereference
your user page period

3130
01:00:22,150 --> 01:00:22,160
your user page period
 

3131
01:00:22,160 --> 01:00:26,150
your user page period
uh and uh and and so that you know

3132
01:00:26,150 --> 01:00:26,160
uh and uh and and so that you know
 

3133
01:00:26,160 --> 01:00:28,309
uh and uh and and so that you know
and basically this just just helps you

3134
01:00:28,309 --> 01:00:28,319
and basically this just just helps you
 

3135
01:00:28,319 --> 01:00:29,349
and basically this just just helps you
know if you

3136
01:00:29,349 --> 01:00:29,359
know if you
 

3137
01:00:29,359 --> 01:00:31,270
know if you
happen to do that by accident anyway you

3138
01:00:31,270 --> 01:00:31,280
happen to do that by accident anyway you
 

3139
01:00:31,280 --> 01:00:32,470
happen to do that by accident anyway you
know you would get immediately a page

3140
01:00:32,470 --> 01:00:32,480
know you would get immediately a page
 

3141
01:00:32,480 --> 01:00:33,349
know you would get immediately a page
fault and uh

3142
01:00:33,349 --> 01:00:33,359
fault and uh
 

3143
01:00:33,359 --> 01:00:35,030
fault and uh
you know or kernel panic and it will

3144
01:00:35,030 --> 01:00:35,040
you know or kernel panic and it will
 

3145
01:00:35,040 --> 01:00:36,470
you know or kernel panic and it will
help the kernel debugger

3146
01:00:36,470 --> 01:00:36,480
help the kernel debugger
 

3147
01:00:36,480 --> 01:00:41,270
help the kernel debugger
or developer to debug the the kernel

3148
01:00:41,270 --> 01:00:41,280

 

3149
01:00:41,280 --> 01:00:44,950

does that make sense

3150
01:00:44,950 --> 01:00:44,960

 

3151
01:00:44,960 --> 01:00:48,870

yeah thank you i have a follow-up

3152
01:00:48,870 --> 01:00:48,880
yeah thank you i have a follow-up
 

3153
01:00:48,880 --> 01:00:51,030
yeah thank you i have a follow-up
question to that

3154
01:00:51,030 --> 01:00:51,040
question to that
 

3155
01:00:51,040 --> 01:00:53,030
question to that
uh i think the part about the user bit

3156
01:00:53,030 --> 01:00:53,040
uh i think the part about the user bit
 

3157
01:00:53,040 --> 01:00:54,069
uh i think the part about the user bit
makes sense

3158
01:00:54,069 --> 01:00:54,079
makes sense
 

3159
01:00:54,079 --> 01:00:56,390
makes sense
but what about the write and execute

3160
01:00:56,390 --> 01:00:56,400
but what about the write and execute
 

3161
01:00:56,400 --> 01:00:57,430
but what about the write and execute
bits

3162
01:00:57,430 --> 01:00:57,440
bits
 

3163
01:00:57,440 --> 01:01:01,109
bits
yeah uh so does the execute did have to

3164
01:01:01,109 --> 01:01:01,119
yeah uh so does the execute did have to
 

3165
01:01:01,119 --> 01:01:06,950
yeah uh so does the execute did have to
be on

3166
01:01:06,950 --> 01:01:06,960

 

3167
01:01:06,960 --> 01:01:11,910

what does the kernel do at this page

3168
01:01:11,910 --> 01:01:11,920

 

3169
01:01:11,920 --> 01:01:13,589

it only reads from it right the only

3170
01:01:13,589 --> 01:01:13,599
it only reads from it right the only
 

3171
01:01:13,599 --> 01:01:14,710
it only reads from it right the only
thing the only instruction that

3172
01:01:14,710 --> 01:01:14,720
thing the only instruction that
 

3173
01:01:14,720 --> 01:01:15,670
thing the only instruction that
basically

3174
01:01:15,670 --> 01:01:15,680
basically
 

3175
01:01:15,680 --> 01:01:17,109
basically
grabs data from this page is this

3176
01:01:17,109 --> 01:01:17,119
grabs data from this page is this
 

3177
01:01:17,119 --> 01:01:20,549
grabs data from this page is this
manmove instruction and copy in

3178
01:01:20,549 --> 01:01:20,559
manmove instruction and copy in
 

3179
01:01:20,559 --> 01:01:22,309
manmove instruction and copy in
so it only you know does execute load

3180
01:01:22,309 --> 01:01:22,319
so it only you know does execute load
 

3181
01:01:22,319 --> 01:01:24,549
so it only you know does execute load
instructions from it or

3182
01:01:24,549 --> 01:01:24,559
instructions from it or
 

3183
01:01:24,559 --> 01:01:26,470
instructions from it or
load values you know from that

3184
01:01:26,470 --> 01:01:26,480
load values you know from that
 

3185
01:01:26,480 --> 01:01:27,910
load values you know from that
particular page

3186
01:01:27,910 --> 01:01:27,920
particular page
 

3187
01:01:27,920 --> 01:01:30,309
particular page
and the page should only contain data so

3188
01:01:30,309 --> 01:01:30,319
and the page should only contain data so
 

3189
01:01:30,319 --> 01:01:31,270
and the page should only contain data so
there's no reason

3190
01:01:31,270 --> 01:01:31,280
there's no reason
 

3191
01:01:31,280 --> 01:01:32,710
there's no reason
that the kernel should be right into

3192
01:01:32,710 --> 01:01:32,720
that the kernel should be right into
 

3193
01:01:32,720 --> 01:01:35,829
that the kernel should be right into
that page and so just to be conservative

3194
01:01:35,829 --> 01:01:35,839
that page and so just to be conservative
 

3195
01:01:35,839 --> 01:01:38,069
that page and so just to be conservative
i disable the right bit and there should

3196
01:01:38,069 --> 01:01:38,079
i disable the right bit and there should
 

3197
01:01:38,079 --> 01:01:39,829
i disable the right bit and there should
be should never execute instructions

3198
01:01:39,829 --> 01:01:39,839
be should never execute instructions
 

3199
01:01:39,839 --> 01:01:40,710
be should never execute instructions
from that page

3200
01:01:40,710 --> 01:01:40,720
from that page
 

3201
01:01:40,720 --> 01:01:43,829
from that page
so i disable the execute bit too again

3202
01:01:43,829 --> 01:01:43,839
so i disable the execute bit too again
 

3203
01:01:43,839 --> 01:01:44,789
so i disable the execute bit too again
this is mostly

3204
01:01:44,789 --> 01:01:44,799
this is mostly
 

3205
01:01:44,799 --> 01:01:47,430
this is mostly
i think for debugging reasons uh not you

3206
01:01:47,430 --> 01:01:47,440
i think for debugging reasons uh not you
 

3207
01:01:47,440 --> 01:01:52,069
i think for debugging reasons uh not you
know for isolation reasons

3208
01:01:52,069 --> 01:01:52,079
know for isolation reasons
 

3209
01:01:52,079 --> 01:01:57,349
know for isolation reasons
okay make sense thanks

3210
01:01:57,349 --> 01:01:57,359

 

3211
01:01:57,359 --> 01:02:00,710

um

3212
01:02:00,710 --> 01:02:00,720

 

3213
01:02:00,720 --> 01:02:03,349

okay uh so now the only thing we need to

3214
01:02:03,349 --> 01:02:03,359
okay uh so now the only thing we need to
 

3215
01:02:03,359 --> 01:02:04,390
okay uh so now the only thing we need to
do is basically there's a bunch of

3216
01:02:04,390 --> 01:02:04,400
do is basically there's a bunch of
 

3217
01:02:04,400 --> 01:02:05,270
do is basically there's a bunch of
places where

3218
01:02:05,270 --> 01:02:05,280
places where
 

3219
01:02:05,280 --> 01:02:06,870
places where
this code is being where this function

3220
01:02:06,870 --> 01:02:06,880
this code is being where this function
 

3221
01:02:06,880 --> 01:02:09,109
this code is being where this function
is being called and we need to

3222
01:02:09,109 --> 01:02:09,119
is being called and we need to
 

3223
01:02:09,119 --> 01:02:11,510
is being called and we need to
look at these uh places where it's uh

3224
01:02:11,510 --> 01:02:11,520
look at these uh places where it's uh
 

3225
01:02:11,520 --> 01:02:13,750
look at these uh places where it's uh
called to understand what's going on

3226
01:02:13,750 --> 01:02:13,760
called to understand what's going on
 

3227
01:02:13,760 --> 01:02:15,349
called to understand what's going on
uh or how it should be used and i think

3228
01:02:15,349 --> 01:02:15,359
uh or how it should be used and i think
 

3229
01:02:15,359 --> 01:02:17,029
uh or how it should be used and i think
maybe the one of the interesting ones

3230
01:02:17,029 --> 01:02:17,039
maybe the one of the interesting ones
 

3231
01:02:17,039 --> 01:02:17,430
maybe the one of the interesting ones
that

3232
01:02:17,430 --> 01:02:17,440
that
 

3233
01:02:17,440 --> 01:02:22,309
that
a number of you asked about is fork

3234
01:02:22,309 --> 01:02:22,319
a number of you asked about is fork
 

3235
01:02:22,319 --> 01:02:23,829
a number of you asked about is fork
and exactly we'll talk about both of

3236
01:02:23,829 --> 01:02:23,839
and exactly we'll talk about both of
 

3237
01:02:23,839 --> 01:02:27,430
and exactly we'll talk about both of
them

3238
01:02:27,430 --> 01:02:27,440

 

3239
01:02:27,440 --> 01:02:34,069

the first fork

3240
01:02:34,069 --> 01:02:34,079
the first fork
 

3241
01:02:34,079 --> 01:02:38,230
the first fork
uh so here is uh the call to fork

3242
01:02:38,230 --> 01:02:38,240
uh so here is uh the call to fork
 

3243
01:02:38,240 --> 01:02:42,069
uh so here is uh the call to fork
or to call 2k kvm map user in fork

3244
01:02:42,069 --> 01:02:42,079
or to call 2k kvm map user in fork
 

3245
01:02:42,079 --> 01:02:45,510
or to call 2k kvm map user in fork
uh and it takes the end so the main

3246
01:02:45,510 --> 01:02:45,520
uh and it takes the end so the main
 

3247
01:02:45,520 --> 01:02:46,870
uh and it takes the end so the main
main interesting question i think a lot

3248
01:02:46,870 --> 01:02:46,880
main interesting question i think a lot
 

3249
01:02:46,880 --> 01:02:48,950
main interesting question i think a lot
of you asked is

3250
01:02:48,950 --> 01:02:48,960
of you asked is
 

3251
01:02:48,960 --> 01:02:51,430
of you asked is
why does it have to be the new process

3252
01:02:51,430 --> 01:02:51,440
why does it have to be the new process
 

3253
01:02:51,440 --> 01:02:52,950
why does it have to be the new process
kernel page table

3254
01:02:52,950 --> 01:02:52,960
kernel page table
 

3255
01:02:52,960 --> 01:02:55,109
kernel page table
why does it have to copy from the new

3256
01:02:55,109 --> 01:02:55,119
why does it have to copy from the new
 

3257
01:02:55,119 --> 01:02:56,309
why does it have to copy from the new
process

3258
01:02:56,309 --> 01:02:56,319
process
 

3259
01:02:56,319 --> 01:02:59,510
process
page table instead of from maybe the

3260
01:02:59,510 --> 01:02:59,520
page table instead of from maybe the
 

3261
01:02:59,520 --> 01:03:01,270
page table instead of from maybe the
current process page table because it's

3262
01:03:01,270 --> 01:03:01,280
current process page table because it's
 

3263
01:03:01,280 --> 01:03:03,349
current process page table because it's
anyway an identical right going forward

3264
01:03:03,349 --> 01:03:03,359
anyway an identical right going forward
 

3265
01:03:03,359 --> 01:03:04,950
anyway an identical right going forward
but basically does it just replicates

3266
01:03:04,950 --> 01:03:04,960
but basically does it just replicates
 

3267
01:03:04,960 --> 01:03:06,950
but basically does it just replicates
the

3268
01:03:06,950 --> 01:03:06,960
the
 

3269
01:03:06,960 --> 01:03:09,190
the
user part of the page table and so why

3270
01:03:09,190 --> 01:03:09,200
user part of the page table and so why
 

3271
01:03:09,200 --> 01:03:10,069
user part of the page table and so why
can't we use the

3272
01:03:10,069 --> 01:03:10,079
can't we use the
 

3273
01:03:10,079 --> 01:03:16,390
can't we use the
current uh page table for doing that

3274
01:03:16,390 --> 01:03:16,400
current uh page table for doing that
 

3275
01:03:16,400 --> 01:03:18,309
current uh page table for doing that
and why and actually turns out the case

3276
01:03:18,309 --> 01:03:18,319
and why and actually turns out the case
 

3277
01:03:18,319 --> 01:03:19,829
and why and actually turns out the case
you actually have to use the

3278
01:03:19,829 --> 01:03:19,839
you actually have to use the
 

3279
01:03:19,839 --> 01:03:22,630
you actually have to use the
new you know the child's user

3280
01:03:22,630 --> 01:03:22,640
new you know the child's user
 

3281
01:03:22,640 --> 01:03:23,589
new you know the child's user
participation

3282
01:03:23,589 --> 01:03:23,599
participation
 

3283
01:03:23,599 --> 01:03:26,309
participation
the child's user page table and why is

3284
01:03:26,309 --> 01:03:26,319
the child's user page table and why is
 

3285
01:03:26,319 --> 01:03:36,390
the child's user page table and why is
that the case

3286
01:03:36,390 --> 01:03:36,400

 

3287
01:03:36,400 --> 01:03:44,150

move you notice what what bug do you get

3288
01:03:44,150 --> 01:03:44,160
move you notice what what bug do you get
 

3289
01:03:44,160 --> 01:03:47,109
move you notice what what bug do you get
wouldn't you get a remap error you could

3290
01:03:47,109 --> 01:03:47,119
wouldn't you get a remap error you could
 

3291
01:03:47,119 --> 01:03:47,829
wouldn't you get a remap error you could
um

3292
01:03:47,829 --> 01:03:47,839
um
 

3293
01:03:47,839 --> 01:03:49,990
um
maybe not remap error uh well the thing

3294
01:03:49,990 --> 01:03:50,000
maybe not remap error uh well the thing
 

3295
01:03:50,000 --> 01:03:51,510
maybe not remap error uh well the thing
maybe not too but again the bug i'm

3296
01:03:51,510 --> 01:03:51,520
maybe not too but again the bug i'm
 

3297
01:03:51,520 --> 01:03:56,150
maybe not too but again the bug i'm
thinking of is not the remap one

3298
01:03:56,150 --> 01:03:56,160

 

3299
01:03:56,160 --> 01:03:58,069

remember if you tried it out what was

3300
01:03:58,069 --> 01:03:58,079
remember if you tried it out what was
 

3301
01:03:58,079 --> 01:04:06,710
remember if you tried it out what was
your personal experience

3302
01:04:06,710 --> 01:04:06,720

 

3303
01:04:06,720 --> 01:04:10,470

anybody on the call who tried this out

3304
01:04:10,470 --> 01:04:10,480
anybody on the call who tried this out
 

3305
01:04:10,480 --> 01:04:13,109
anybody on the call who tried this out
and remember about the resulting

3306
01:04:13,109 --> 01:04:13,119
and remember about the resulting
 

3307
01:04:13,119 --> 01:04:16,309
and remember about the resulting
experiences

3308
01:04:16,309 --> 01:04:16,319

 

3309
01:04:16,319 --> 01:04:18,870

i think the resulting i i i did not have

3310
01:04:18,870 --> 01:04:18,880
i think the resulting i i i did not have
 

3311
01:04:18,880 --> 01:04:19,670
i think the resulting i i i did not have
this but like

3312
01:04:19,670 --> 01:04:19,680
this but like
 

3313
01:04:19,680 --> 01:04:21,270
this but like
i think the resulting experience is that

3314
01:04:21,270 --> 01:04:21,280
i think the resulting experience is that
 

3315
01:04:21,280 --> 01:04:22,870
i think the resulting experience is that
somewhere in user test

3316
01:04:22,870 --> 01:04:22,880
somewhere in user test
 

3317
01:04:22,880 --> 01:04:24,630
somewhere in user test
uh particularly usage has to do a lot of

3318
01:04:24,630 --> 01:04:24,640
uh particularly usage has to do a lot of
 

3319
01:04:24,640 --> 01:04:26,069
uh particularly usage has to do a lot of
forking and exiting

3320
01:04:26,069 --> 01:04:26,079
forking and exiting
 

3321
01:04:26,079 --> 01:04:28,710
forking and exiting
you're going to get a problem and you

3322
01:04:28,710 --> 01:04:28,720
you're going to get a problem and you
 

3323
01:04:28,720 --> 01:04:31,029
you're going to get a problem and you
get a

3324
01:04:31,029 --> 01:04:31,039

 

3325
01:04:31,039 --> 01:04:34,069

an error and the area

3326
01:04:34,069 --> 01:04:34,079
an error and the area
 

3327
01:04:34,079 --> 01:04:37,829
an error and the area
the thing that goes wrong is that

3328
01:04:37,829 --> 01:04:37,839
the thing that goes wrong is that
 

3329
01:04:37,839 --> 01:04:40,549
the thing that goes wrong is that
if you copy from the parent process if

3330
01:04:40,549 --> 01:04:40,559
if you copy from the parent process if
 

3331
01:04:40,559 --> 01:04:41,510
if you copy from the parent process if
the parent process

3332
01:04:41,510 --> 01:04:41,520
the parent process
 

3333
01:04:41,520 --> 01:04:45,270
the parent process
exits before the child processes us then

3334
01:04:45,270 --> 01:04:45,280
exits before the child processes us then
 

3335
01:04:45,280 --> 01:04:47,670
exits before the child processes us then
the parent process page table will be

3336
01:04:47,670 --> 01:04:47,680
the parent process page table will be
 

3337
01:04:47,680 --> 01:04:49,670
the parent process page table will be
completely

3338
01:04:49,670 --> 01:04:49,680
completely
 

3339
01:04:49,680 --> 01:04:52,470
completely
cleaned up right as we saw before and

3340
01:04:52,470 --> 01:04:52,480
cleaned up right as we saw before and
 

3341
01:04:52,480 --> 01:04:54,309
cleaned up right as we saw before and
but then the child still has

3342
01:04:54,309 --> 01:04:54,319
but then the child still has
 

3343
01:04:54,319 --> 01:04:57,990
but then the child still has
pointers to the parent process

3344
01:04:57,990 --> 01:04:58,000
pointers to the parent process
 

3345
01:04:58,000 --> 01:05:01,750
pointers to the parent process
uh page table and so

3346
01:05:01,750 --> 01:05:01,760
uh page table and so
 

3347
01:05:01,760 --> 01:05:04,950
uh page table and so
basically you're gonna be basically

3348
01:05:04,950 --> 01:05:04,960
basically you're gonna be basically
 

3349
01:05:04,960 --> 01:05:08,150
basically you're gonna be basically
pages in this child's process

3350
01:05:08,150 --> 01:05:08,160
pages in this child's process
 

3351
01:05:08,160 --> 01:05:11,029
pages in this child's process
page table have been treated and they're

3352
01:05:11,029 --> 01:05:11,039
page table have been treated and they're
 

3353
01:05:11,039 --> 01:05:12,549
page table have been treated and they're
still in use and so that results in all

3354
01:05:12,549 --> 01:05:12,559
still in use and so that results in all
 

3355
01:05:12,559 --> 01:05:14,390
still in use and so that results in all
kinds of bad behavior because

3356
01:05:14,390 --> 01:05:14,400
kinds of bad behavior because
 

3357
01:05:14,400 --> 01:05:16,549
kinds of bad behavior because
the kernel one that frees a page

3358
01:05:16,549 --> 01:05:16,559
the kernel one that frees a page
 

3359
01:05:16,559 --> 01:05:17,910
the kernel one that frees a page
actually writes ones in it

3360
01:05:17,910 --> 01:05:17,920
actually writes ones in it
 

3361
01:05:17,920 --> 01:05:20,870
actually writes ones in it
everywhere for debugging reasons and so

3362
01:05:20,870 --> 01:05:20,880
everywhere for debugging reasons and so
 

3363
01:05:20,880 --> 01:05:21,990
everywhere for debugging reasons and so
now basically you have

3364
01:05:21,990 --> 01:05:22,000
now basically you have
 

3365
01:05:22,000 --> 01:05:25,270
now basically you have
invalid you know ptes sitting in your

3366
01:05:25,270 --> 01:05:25,280
invalid you know ptes sitting in your
 

3367
01:05:25,280 --> 01:05:28,950
invalid you know ptes sitting in your
kernel page table

3368
01:05:28,950 --> 01:05:28,960

 

3369
01:05:28,960 --> 01:05:37,829

does that make sense

3370
01:05:37,829 --> 01:05:37,839
does that make sense
 

3371
01:05:37,839 --> 01:05:41,510
does that make sense
okay one more thing to

3372
01:05:41,510 --> 01:05:41,520
okay one more thing to
 

3373
01:05:41,520 --> 01:05:46,069
okay one more thing to
look at is exact.c uh in my solutions

3374
01:05:46,069 --> 01:05:46,079
look at is exact.c uh in my solutions
 

3375
01:05:46,079 --> 01:05:49,029
look at is exact.c uh in my solutions
uh are pretty straightforward always

3376
01:05:49,029 --> 01:05:49,039
uh are pretty straightforward always
 

3377
01:05:49,039 --> 01:05:51,349
uh are pretty straightforward always
made no modifications to exec

3378
01:05:51,349 --> 01:05:51,359
made no modifications to exec
 

3379
01:05:51,359 --> 01:05:53,670
made no modifications to exec
uh the only medication await is of

3380
01:05:53,670 --> 01:05:53,680
uh the only medication await is of
 

3381
01:05:53,680 --> 01:05:55,430
uh the only medication await is of
course you know the first thing for

3382
01:05:55,430 --> 01:05:55,440
course you know the first thing for
 

3383
01:05:55,440 --> 01:05:57,670
course you know the first thing for
you know part one and then here for part

3384
01:05:57,670 --> 01:05:57,680
you know part one and then here for part
 

3385
01:05:57,680 --> 01:05:59,589
you know part one and then here for part
three it's just basically

3386
01:05:59,589 --> 01:05:59,599
three it's just basically
 

3387
01:05:59,599 --> 01:06:03,109
three it's just basically
mapping the new user page table

3388
01:06:03,109 --> 01:06:03,119
mapping the new user page table
 

3389
01:06:03,119 --> 01:06:05,109
mapping the new user page table
into the kernel page table and exit

3390
01:06:05,109 --> 01:06:05,119
into the kernel page table and exit
 

3391
01:06:05,119 --> 01:06:06,390
into the kernel page table and exit
basically what it does is

3392
01:06:06,390 --> 01:06:06,400
basically what it does is
 

3393
01:06:06,400 --> 01:06:08,950
basically what it does is
basically builds a new user address

3394
01:06:08,950 --> 01:06:08,960
basically builds a new user address
 

3395
01:06:08,960 --> 01:06:09,670
basically builds a new user address
space

3396
01:06:09,670 --> 01:06:09,680
space
 

3397
01:06:09,680 --> 01:06:11,430
space
and you know this one line copies that

3398
01:06:11,430 --> 01:06:11,440
and you know this one line copies that
 

3399
01:06:11,440 --> 01:06:13,029
and you know this one line copies that
new user address space into the kernel

3400
01:06:13,029 --> 01:06:13,039
new user address space into the kernel
 

3401
01:06:13,039 --> 01:06:15,430
new user address space into the kernel
page table

3402
01:06:15,430 --> 01:06:15,440
page table
 

3403
01:06:15,440 --> 01:06:21,190
page table
and that's it

3404
01:06:21,190 --> 01:06:21,200

 

3405
01:06:21,200 --> 01:06:27,029

any questions

3406
01:06:27,029 --> 01:06:27,039

 

3407
01:06:27,039 --> 01:06:29,510

so i hope in the meantime uh i've

3408
01:06:29,510 --> 01:06:29,520
so i hope in the meantime uh i've
 

3409
01:06:29,520 --> 01:06:30,950
so i hope in the meantime uh i've
answered many of the questions that

3410
01:06:30,950 --> 01:06:30,960
answered many of the questions that
 

3411
01:06:30,960 --> 01:06:34,630
answered many of the questions that
you uh submitted

3412
01:06:34,630 --> 01:06:34,640
you uh submitted
 

3413
01:06:34,640 --> 01:06:37,349
you uh submitted
we can look and see which ones uh there

3414
01:06:37,349 --> 01:06:37,359
we can look and see which ones uh there
 

3415
01:06:37,359 --> 01:06:38,710
we can look and see which ones uh there
were a couple more questions that i

3416
01:06:38,710 --> 01:06:38,720
were a couple more questions that i
 

3417
01:06:38,720 --> 01:06:40,630
were a couple more questions that i
haven't talked about yet

3418
01:06:40,630 --> 01:06:40,640
haven't talked about yet
 

3419
01:06:40,640 --> 01:06:42,789
haven't talked about yet
so maybe we can look at those or unless

3420
01:06:42,789 --> 01:06:42,799
so maybe we can look at those or unless
 

3421
01:06:42,799 --> 01:06:46,950
so maybe we can look at those or unless
you have questions right away

3422
01:06:46,950 --> 01:06:46,960
you have questions right away
 

3423
01:06:46,960 --> 01:06:50,069
you have questions right away
um don't we modify

3424
01:06:50,069 --> 01:06:50,079
um don't we modify
 

3425
01:06:50,079 --> 01:06:52,789
um don't we modify
the grow proc as well yes yeah the

3426
01:06:52,789 --> 01:06:52,799
the grow proc as well yes yeah the
 

3427
01:06:52,799 --> 01:06:54,710
the grow proc as well yes yeah the
couple more changes that necessary

3428
01:06:54,710 --> 01:06:54,720
couple more changes that necessary
 

3429
01:06:54,720 --> 01:06:58,069
couple more changes that necessary
uh uh you know in s-break

3430
01:06:58,069 --> 01:06:58,079
uh uh you know in s-break
 

3431
01:06:58,079 --> 01:07:02,630
uh uh you know in s-break
or group rock there's a

3432
01:07:02,630 --> 01:07:02,640

 

3433
01:07:02,640 --> 01:07:06,069

i added a line right here a very similar

3434
01:07:06,069 --> 01:07:06,079
i added a line right here a very similar
 

3435
01:07:06,079 --> 01:07:07,109
i added a line right here a very similar
style

3436
01:07:07,109 --> 01:07:07,119
style
 

3437
01:07:07,119 --> 01:07:09,510
style
and there's presumably a similar change

3438
01:07:09,510 --> 01:07:09,520
and there's presumably a similar change
 

3439
01:07:09,520 --> 01:07:11,670
and there's presumably a similar change
in

3440
01:07:11,670 --> 01:07:11,680
in
 

3441
01:07:11,680 --> 01:07:12,950
in
i think that might be it actually or

3442
01:07:12,950 --> 01:07:12,960
i think that might be it actually or
 

3443
01:07:12,960 --> 01:07:15,349
i think that might be it actually or
usually in it of course probably has a

3444
01:07:15,349 --> 01:07:15,359
usually in it of course probably has a
 

3445
01:07:15,359 --> 01:07:17,589
usually in it of course probably has a
change

3446
01:07:17,589 --> 01:07:17,599
change
 

3447
01:07:17,599 --> 01:07:19,670
change
because you have to map that one page

3448
01:07:19,670 --> 01:07:19,680
because you have to map that one page
 

3449
01:07:19,680 --> 01:07:21,990
because you have to map that one page
from the init code into

3450
01:07:21,990 --> 01:07:22,000
from the init code into
 

3451
01:07:22,000 --> 01:07:24,230
from the init code into
the your the kernel page table for you

3452
01:07:24,230 --> 01:07:24,240
the your the kernel page table for you
 

3453
01:07:24,240 --> 01:07:26,630
the your the kernel page table for you
that process

3454
01:07:26,630 --> 01:07:26,640
that process
 

3455
01:07:26,640 --> 01:07:35,510
that process
because the first process is special

3456
01:07:35,510 --> 01:07:35,520

 

3457
01:07:35,520 --> 01:07:37,510

okay so uh i'm going to walk through

3458
01:07:37,510 --> 01:07:37,520
okay so uh i'm going to walk through
 

3459
01:07:37,520 --> 01:07:39,029
okay so uh i'm going to walk through
some of the questions here that i put

3460
01:07:39,029 --> 01:07:39,039
some of the questions here that i put
 

3461
01:07:39,039 --> 01:07:39,829
some of the questions here that i put
them on the

3462
01:07:39,829 --> 01:07:39,839
them on the
 

3463
01:07:39,839 --> 01:07:41,910
them on the
screen so you can hopefully see them so

3464
01:07:41,910 --> 01:07:41,920
screen so you can hopefully see them so
 

3465
01:07:41,920 --> 01:07:43,029
screen so you can hopefully see them so
that i don't have to feel

3466
01:07:43,029 --> 01:07:43,039
that i don't have to feel
 

3467
01:07:43,039 --> 01:07:45,910
that i don't have to feel
uh read them out completely i think the

3468
01:07:45,910 --> 01:07:45,920
uh read them out completely i think the
 

3469
01:07:45,920 --> 01:07:47,109
uh read them out completely i think the
first question is a question that

3470
01:07:47,109 --> 01:07:47,119
first question is a question that
 

3471
01:07:47,119 --> 01:07:48,630
first question is a question that
actually came up quite a bit

3472
01:07:48,630 --> 01:07:48,640
actually came up quite a bit
 

3473
01:07:48,640 --> 01:07:51,910
actually came up quite a bit
about the pteu bit uh flag uh i think

3474
01:07:51,910 --> 01:07:51,920
about the pteu bit uh flag uh i think
 

3475
01:07:51,920 --> 01:07:52,309
about the pteu bit uh flag uh i think
we've

3476
01:07:52,309 --> 01:07:52,319
we've
 

3477
01:07:52,319 --> 01:07:55,589
we've
covered this we also cover the fact that

3478
01:07:55,589 --> 01:07:55,599
covered this we also cover the fact that
 

3479
01:07:55,599 --> 01:07:57,190
covered this we also cover the fact that
it's not malicious but it's mostly for

3480
01:07:57,190 --> 01:07:57,200
it's not malicious but it's mostly for
 

3481
01:07:57,200 --> 01:07:58,870
it's not malicious but it's mostly for
debugging reasons

3482
01:07:58,870 --> 01:07:58,880
debugging reasons
 

3483
01:07:58,880 --> 01:08:02,789
debugging reasons
uh similar question about like

3484
01:08:02,789 --> 01:08:02,799
uh similar question about like
 

3485
01:08:02,799 --> 01:08:04,470
uh similar question about like
well if you're in supervisor mode can

3486
01:08:04,470 --> 01:08:04,480
well if you're in supervisor mode can
 

3487
01:08:04,480 --> 01:08:06,150
well if you're in supervisor mode can
you do anything uh because you can

3488
01:08:06,150 --> 01:08:06,160
you do anything uh because you can
 

3489
01:08:06,160 --> 01:08:07,029
you do anything uh because you can
switch the

3490
01:08:07,029 --> 01:08:07,039
switch the
 

3491
01:08:07,039 --> 01:08:11,029
switch the
satp you can uh and the answer is yes

3492
01:08:11,029 --> 01:08:11,039
satp you can uh and the answer is yes
 

3493
01:08:11,039 --> 01:08:13,510
satp you can uh and the answer is yes
it's all possible so really you know

3494
01:08:13,510 --> 01:08:13,520
it's all possible so really you know
 

3495
01:08:13,520 --> 01:08:14,150
it's all possible so really you know
this ubis

3496
01:08:14,150 --> 01:08:14,160
this ubis
 

3497
01:08:14,160 --> 01:08:17,030
this ubis
is not about the user program being

3498
01:08:17,030 --> 01:08:17,040
is not about the user program being
 

3499
01:08:17,040 --> 01:08:19,110
is not about the user program being
protected from the kernel it really

3500
01:08:19,110 --> 01:08:19,120
protected from the kernel it really
 

3501
01:08:19,120 --> 01:08:21,910
protected from the kernel it really
has a flag to help the kernel developer

3502
01:08:21,910 --> 01:08:21,920
has a flag to help the kernel developer
 

3503
01:08:21,920 --> 01:08:24,390
has a flag to help the kernel developer
and build the kernel

3504
01:08:24,390 --> 01:08:24,400
and build the kernel
 

3505
01:08:24,400 --> 01:08:26,789
and build the kernel
uh one other specific sort of risk five

3506
01:08:26,789 --> 01:08:26,799
uh one other specific sort of risk five
 

3507
01:08:26,799 --> 01:08:27,510
uh one other specific sort of risk five
question

3508
01:08:27,510 --> 01:08:27,520
question
 

3509
01:08:27,520 --> 01:08:29,510
question
which is why are the entrepreneuring

3510
01:08:29,510 --> 01:08:29,520
which is why are the entrepreneuring
 

3511
01:08:29,520 --> 01:08:31,269
which is why are the entrepreneuring
property dates why in the register sort

3512
01:08:31,269 --> 01:08:31,279
property dates why in the register sort
 

3513
01:08:31,279 --> 01:08:32,309
property dates why in the register sort
of in a

3514
01:08:32,309 --> 01:08:32,319
of in a
 

3515
01:08:32,319 --> 01:08:35,349
of in a
uh in a strange order uh and

3516
01:08:35,349 --> 01:08:35,359
uh in a strange order uh and
 

3517
01:08:35,359 --> 01:08:38,550
uh in a strange order uh and
the reason that is uh i think we

3518
01:08:38,550 --> 01:08:38,560
the reason that is uh i think we
 

3519
01:08:38,560 --> 01:08:39,749
the reason that is uh i think we
mentioned this a little while ago in the

3520
01:08:39,749 --> 01:08:39,759
mentioned this a little while ago in the
 

3521
01:08:39,759 --> 01:08:41,030
mentioned this a little while ago in the
previous lecture that

3522
01:08:41,030 --> 01:08:41,040
previous lecture that
 

3523
01:08:41,040 --> 01:08:43,269
previous lecture that
uh there's basically there's something

3524
01:08:43,269 --> 01:08:43,279
uh there's basically there's something
 

3525
01:08:43,279 --> 01:08:45,030
uh there's basically there's something
what's called the risk five compressed

3526
01:08:45,030 --> 01:08:45,040
what's called the risk five compressed
 

3527
01:08:45,040 --> 01:08:47,030
what's called the risk five compressed
instruction set and that has a set of

3528
01:08:47,030 --> 01:08:47,040
instruction set and that has a set of
 

3529
01:08:47,040 --> 01:08:48,390
instruction set and that has a set of
fewer registers

3530
01:08:48,390 --> 01:08:48,400
fewer registers
 

3531
01:08:48,400 --> 01:08:51,669
fewer registers
and uh something you have to have a more

3532
01:08:51,669 --> 01:08:51,679
and uh something you have to have a more
 

3533
01:08:51,679 --> 01:08:53,910
and uh something you have to have a more
compact encoding of the instructions

3534
01:08:53,910 --> 01:08:53,920
compact encoding of the instructions
 

3535
01:08:53,920 --> 01:08:57,269
compact encoding of the instructions
uh and uh this strange ordering reflects

3536
01:08:57,269 --> 01:08:57,279
uh and uh this strange ordering reflects
 

3537
01:08:57,279 --> 01:08:59,030
uh and uh this strange ordering reflects
the fact that they're basically two

3538
01:08:59,030 --> 01:08:59,040
the fact that they're basically two
 

3539
01:08:59,040 --> 01:09:01,269
the fact that they're basically two
there's the compressed version which is

3540
01:09:01,269 --> 01:09:01,279
there's the compressed version which is
 

3541
01:09:01,279 --> 01:09:02,870
there's the compressed version which is
some set of registers and then sort of

3542
01:09:02,870 --> 01:09:02,880
some set of registers and then sort of
 

3543
01:09:02,880 --> 01:09:04,309
some set of registers and then sort of
the uncompressed version which is what

3544
01:09:04,309 --> 01:09:04,319
the uncompressed version which is what
 

3545
01:09:04,319 --> 01:09:05,030
the uncompressed version which is what
we're using

3546
01:09:05,030 --> 01:09:05,040
we're using
 

3547
01:09:05,040 --> 01:09:07,269
we're using
that has the complete set of registers

3548
01:09:07,269 --> 01:09:07,279
that has the complete set of registers
 

3549
01:09:07,279 --> 01:09:08,950
that has the complete set of registers
and the compression

3550
01:09:08,950 --> 01:09:08,960
and the compression
 

3551
01:09:08,960 --> 01:09:13,110
and the compression
version the example has s1 and s0

3552
01:09:13,110 --> 01:09:13,120
version the example has s1 and s0
 

3553
01:09:13,120 --> 01:09:17,269
version the example has s1 and s0
as 0 and s1 but not s2 from s11

3554
01:09:17,269 --> 01:09:17,279
as 0 and s1 but not s2 from s11
 

3555
01:09:17,279 --> 01:09:25,570
as 0 and s1 but not s2 from s11
so that's the main reason uh

3556
01:09:25,570 --> 01:09:25,580

 

3557
01:09:25,580 --> 01:09:26,870

[Music]

3558
01:09:26,870 --> 01:09:26,880
[Music]
 

3559
01:09:26,880 --> 01:09:28,630
[Music]
i think it went through most of these

3560
01:09:28,630 --> 01:09:28,640
i think it went through most of these
 

3561
01:09:28,640 --> 01:09:30,470
i think it went through most of these
questions but if you see a question that

3562
01:09:30,470 --> 01:09:30,480
questions but if you see a question that
 

3563
01:09:30,480 --> 01:09:32,149
questions but if you see a question that
i should have covered and i didn't

3564
01:09:32,149 --> 01:09:32,159
i should have covered and i didn't
 

3565
01:09:32,159 --> 01:09:34,309
i should have covered and i didn't
please interrupt me where if you ask a

3566
01:09:34,309 --> 01:09:34,319
please interrupt me where if you ask a
 

3567
01:09:34,319 --> 01:09:38,870
please interrupt me where if you ask a
question that i haven't covered yet

3568
01:09:38,870 --> 01:09:38,880

 

3569
01:09:38,880 --> 01:09:41,669

please ask these questions are basically

3570
01:09:41,669 --> 01:09:41,679
please ask these questions are basically
 

3571
01:09:41,679 --> 01:09:43,189
please ask these questions are basically
in order that you submitted them so

3572
01:09:43,189 --> 01:09:43,199
in order that you submitted them so
 

3573
01:09:43,199 --> 01:09:48,229
in order that you submitted them so
these were

3574
01:09:48,229 --> 01:09:48,239
these were
 

3575
01:09:48,239 --> 01:09:51,349
these were
okay here may be uh so here's our

3576
01:09:51,349 --> 01:09:51,359
okay here may be uh so here's our
 

3577
01:09:51,359 --> 01:09:52,390
okay here may be uh so here's our
question through operating systems

3578
01:09:52,390 --> 01:09:52,400
question through operating systems
 

3579
01:09:52,400 --> 01:09:53,829
question through operating systems
usually article called page tables have

3580
01:09:53,829 --> 01:09:53,839
usually article called page tables have
 

3581
01:09:53,839 --> 01:09:55,350
usually article called page tables have
to set up the page table pages so that

3582
01:09:55,350 --> 01:09:55,360
to set up the page table pages so that
 

3583
01:09:55,360 --> 01:09:56,870
to set up the page table pages so that
the lower parts of the hierarchy are at

3584
01:09:56,870 --> 01:09:56,880
the lower parts of the hierarchy are at
 

3585
01:09:56,880 --> 01:09:58,470
the lower parts of the hierarchy are at
least partly shared

3586
01:09:58,470 --> 01:09:58,480
least partly shared
 

3587
01:09:58,480 --> 01:10:00,310
least partly shared
and uh you know you're clearly starting

3588
01:10:00,310 --> 01:10:00,320
and uh you know you're clearly starting
 

3589
01:10:00,320 --> 01:10:02,470
and uh you know you're clearly starting
my solution correct i share

3590
01:10:02,470 --> 01:10:02,480
my solution correct i share
 

3591
01:10:02,480 --> 01:10:05,189
my solution correct i share
the entries 1 to 5 11. and so this is a

3592
01:10:05,189 --> 01:10:05,199
the entries 1 to 5 11. and so this is a
 

3593
01:10:05,199 --> 01:10:06,310
the entries 1 to 5 11. and so this is a
standard trick

3594
01:10:06,310 --> 01:10:06,320
standard trick
 

3595
01:10:06,320 --> 01:10:17,750
standard trick
and lots of operating systems do that

3596
01:10:17,750 --> 01:10:17,760
and lots of operating systems do that
 

3597
01:10:17,760 --> 01:10:19,270
and lots of operating systems do that
i think we talked a little bit about

3598
01:10:19,270 --> 01:10:19,280
i think we talked a little bit about
 

3599
01:10:19,280 --> 01:10:20,709
i think we talked a little bit about
this particular issue that's important

3600
01:10:20,709 --> 01:10:20,719
this particular issue that's important
 

3601
01:10:20,719 --> 01:10:21,430
this particular issue that's important
that you switch

3602
01:10:21,430 --> 01:10:21,440
that you switch
 

3603
01:10:21,440 --> 01:10:23,430
that you switch
you know to this main kernel page table

3604
01:10:23,430 --> 01:10:23,440
you know to this main kernel page table
 

3605
01:10:23,440 --> 01:10:25,430
you know to this main kernel page table
because the scheduler

3606
01:10:25,430 --> 01:10:25,440
because the scheduler
 

3607
01:10:25,440 --> 01:10:27,830
because the scheduler
uh there might be no user processors to

3608
01:10:27,830 --> 01:10:27,840
uh there might be no user processors to
 

3609
01:10:27,840 --> 01:10:29,590
uh there might be no user processors to
run at all anymore

3610
01:10:29,590 --> 01:10:29,600
run at all anymore
 

3611
01:10:29,600 --> 01:10:30,950
run at all anymore
and the schedule of course still needs a

3612
01:10:30,950 --> 01:10:30,960
and the schedule of course still needs a
 

3613
01:10:30,960 --> 01:10:32,950
and the schedule of course still needs a
page table and so it runs with the main

3614
01:10:32,950 --> 01:10:32,960
page table and so it runs with the main
 

3615
01:10:32,960 --> 01:10:36,310
page table and so it runs with the main
kernel page table

3616
01:10:36,310 --> 01:10:36,320

 

3617
01:10:36,320 --> 01:10:38,790

we have a question in the chat yeah go

3618
01:10:38,790 --> 01:10:38,800
we have a question in the chat yeah go
 

3619
01:10:38,800 --> 01:10:40,390
we have a question in the chat yeah go
ahead what is that when you

3620
01:10:40,390 --> 01:10:40,400
ahead what is that when you
 

3621
01:10:40,400 --> 01:10:55,030
ahead what is that when you
pull up the chat

3622
01:10:55,030 --> 01:10:55,040

 

3623
01:10:55,040 --> 01:10:57,110

i can read it yeah yeah i got it so i

3624
01:10:57,110 --> 01:10:57,120
i can read it yeah yeah i got it so i
 

3625
01:10:57,120 --> 01:10:58,790
i can read it yeah yeah i got it so i
think you know uh okay so the question

3626
01:10:58,790 --> 01:10:58,800
think you know uh okay so the question
 

3627
01:10:58,800 --> 01:11:00,630
think you know uh okay so the question
is doesn't the risk uh privilege specs

3628
01:11:00,630 --> 01:11:00,640
is doesn't the risk uh privilege specs
 

3629
01:11:00,640 --> 01:11:02,149
is doesn't the risk uh privilege specs
say that part of the separation is to

3630
01:11:02,149 --> 01:11:02,159
say that part of the separation is to
 

3631
01:11:02,159 --> 01:11:03,750
say that part of the separation is to
prevent bugs that allow the user program

3632
01:11:03,750 --> 01:11:03,760
prevent bugs that allow the user program
 

3633
01:11:03,760 --> 01:11:05,510
prevent bugs that allow the user program
to make the kernel jump to arbitrary

3634
01:11:05,510 --> 01:11:05,520
to make the kernel jump to arbitrary
 

3635
01:11:05,520 --> 01:11:07,110
to make the kernel jump to arbitrary
coding user space

3636
01:11:07,110 --> 01:11:07,120
coding user space
 

3637
01:11:07,120 --> 01:11:10,630
coding user space
uh yes uh that's a good point uh

3638
01:11:10,630 --> 01:11:10,640
uh yes uh that's a good point uh
 

3639
01:11:10,640 --> 01:11:13,430
uh yes uh that's a good point uh
uh and so you know you can debate here

3640
01:11:13,430 --> 01:11:13,440
uh and so you know you can debate here
 

3641
01:11:13,440 --> 01:11:15,189
uh and so you know you can debate here
whether this is an isolation property or

3642
01:11:15,189 --> 01:11:15,199
whether this is an isolation property or
 

3643
01:11:15,199 --> 01:11:17,030
whether this is an isolation property or
a kernel debugging property

3644
01:11:17,030 --> 01:11:17,040
a kernel debugging property
 

3645
01:11:17,040 --> 01:11:18,709
a kernel debugging property
clearly the kernel should never jump

3646
01:11:18,709 --> 01:11:18,719
clearly the kernel should never jump
 

3647
01:11:18,719 --> 01:11:20,550
clearly the kernel should never jump
into any uh part of the address

3648
01:11:20,550 --> 01:11:20,560
into any uh part of the address
 

3649
01:11:20,560 --> 01:11:23,910
into any uh part of the address
in the user address space uh directly uh

3650
01:11:23,910 --> 01:11:23,920
in the user address space uh directly uh
 

3651
01:11:23,920 --> 01:11:27,990
in the user address space uh directly uh
and so uh you know i view this as a

3652
01:11:27,990 --> 01:11:28,000
and so uh you know i view this as a
 

3653
01:11:28,000 --> 01:11:30,310
and so uh you know i view this as a
tool to help the kernel debugger catch

3654
01:11:30,310 --> 01:11:30,320
tool to help the kernel debugger catch
 

3655
01:11:30,320 --> 01:11:32,950
tool to help the kernel debugger catch
those kinds of bugs

3656
01:11:32,950 --> 01:11:32,960
those kinds of bugs
 

3657
01:11:32,960 --> 01:11:34,870
those kinds of bugs
and in some reason that's why in xv6 we

3658
01:11:34,870 --> 01:11:34,880
and in some reason that's why in xv6 we
 

3659
01:11:34,880 --> 01:11:36,550
and in some reason that's why in xv6 we
also uh

3660
01:11:36,550 --> 01:11:36,560
also uh
 

3661
01:11:36,560 --> 01:11:39,830
also uh
disable or you know set the view bit and

3662
01:11:39,830 --> 01:11:39,840
disable or you know set the view bit and
 

3663
01:11:39,840 --> 01:11:41,750
disable or you know set the view bit and
don't allow the kernel to refer to any

3664
01:11:41,750 --> 01:11:41,760
don't allow the kernel to refer to any
 

3665
01:11:41,760 --> 01:11:44,229
don't allow the kernel to refer to any
pages

3666
01:11:44,229 --> 01:11:44,239

 

3667
01:11:44,239 --> 01:11:46,229

that protects you know us you know if we

3668
01:11:46,229 --> 01:11:46,239
that protects you know us you know if we
 

3669
01:11:46,239 --> 01:11:47,750
that protects you know us you know if we
did reference every

3670
01:11:47,750 --> 01:11:47,760
did reference every
 

3671
01:11:47,760 --> 01:11:50,229
did reference every
user address that the kernel would

3672
01:11:50,229 --> 01:11:50,239
user address that the kernel would
 

3673
01:11:50,239 --> 01:11:59,110
user address that the kernel would
actually default

3674
01:11:59,110 --> 01:11:59,120

 

3675
01:11:59,120 --> 01:12:02,390

um

3676
01:12:02,390 --> 01:12:02,400

 

3677
01:12:02,400 --> 01:12:05,110

i think i've covered the scheduler point

3678
01:12:05,110 --> 01:12:05,120
i think i've covered the scheduler point
 

3679
01:12:05,120 --> 01:12:05,790
i think i've covered the scheduler point
uh

3680
01:12:05,790 --> 01:12:05,800
uh
 

3681
01:12:05,800 --> 01:12:12,470
uh
two uh

3682
01:12:12,470 --> 01:12:12,480

 

3683
01:12:12,480 --> 01:12:14,630

uh so here's a question how are pipes

3684
01:12:14,630 --> 01:12:14,640
uh so here's a question how are pipes
 

3685
01:12:14,640 --> 01:12:16,390
uh so here's a question how are pipes
implemented in xv6 and shoot the changes

3686
01:12:16,390 --> 01:12:16,400
implemented in xv6 and shoot the changes
 

3687
01:12:16,400 --> 01:12:18,229
implemented in xv6 and shoot the changes
to page table implemented in the phablet

3688
01:12:18,229 --> 01:12:18,239
to page table implemented in the phablet
 

3689
01:12:18,239 --> 01:12:19,910
to page table implemented in the phablet
effective implementation

3690
01:12:19,910 --> 01:12:19,920
effective implementation
 

3691
01:12:19,920 --> 01:12:22,870
effective implementation
um so pegs are basically a buffering

3692
01:12:22,870 --> 01:12:22,880
um so pegs are basically a buffering
 

3693
01:12:22,880 --> 01:12:24,630
um so pegs are basically a buffering
memory in the kernel

3694
01:12:24,630 --> 01:12:24,640
memory in the kernel
 

3695
01:12:24,640 --> 01:12:27,110
memory in the kernel
and uh right when you write to your pipe

3696
01:12:27,110 --> 01:12:27,120
and uh right when you write to your pipe
 

3697
01:12:27,120 --> 01:12:28,790
and uh right when you write to your pipe
basically calls copy in

3698
01:12:28,790 --> 01:12:28,800
basically calls copy in
 

3699
01:12:28,800 --> 01:12:30,870
basically calls copy in
and copy in or copies the bytes you know

3700
01:12:30,870 --> 01:12:30,880
and copy in or copies the bytes you know
 

3701
01:12:30,880 --> 01:12:32,870
and copy in or copies the bytes you know
from user space into the pipe

3702
01:12:32,870 --> 01:12:32,880
from user space into the pipe
 

3703
01:12:32,880 --> 01:12:34,790
from user space into the pipe
and in some ways you know the whole part

3704
01:12:34,790 --> 01:12:34,800
and in some ways you know the whole part
 

3705
01:12:34,800 --> 01:12:36,149
and in some ways you know the whole part
of this pageant blob which they

3706
01:12:36,149 --> 01:12:36,159
of this pageant blob which they
 

3707
01:12:36,159 --> 01:12:36,790
of this pageant blob which they
basically

3708
01:12:36,790 --> 01:12:36,800
basically
 

3709
01:12:36,800 --> 01:12:40,390
basically
streamline that code so that you don't

3710
01:12:40,390 --> 01:12:40,400
streamline that code so that you don't
 

3711
01:12:40,400 --> 01:12:40,950
streamline that code so that you don't
have to do

3712
01:12:40,950 --> 01:12:40,960
have to do
 

3713
01:12:40,960 --> 01:12:43,430
have to do
many walks when you actually write from

3714
01:12:43,430 --> 01:12:43,440
many walks when you actually write from
 

3715
01:12:43,440 --> 01:12:45,110
many walks when you actually write from
user space into the

3716
01:12:45,110 --> 01:12:45,120
user space into the
 

3717
01:12:45,120 --> 01:12:49,030
user space into the
pipe

3718
01:12:49,030 --> 01:12:49,040

 

3719
01:12:49,040 --> 01:12:50,070

uh this is an interesting question i

3720
01:12:50,070 --> 01:12:50,080
uh this is an interesting question i
 

3721
01:12:50,080 --> 01:12:51,510
uh this is an interesting question i
think a lot of people ask you like why

3722
01:12:51,510 --> 01:12:51,520
think a lot of people ask you like why
 

3723
01:12:51,520 --> 01:12:52,870
think a lot of people ask you like why
does uvm three and free walker

3724
01:12:52,870 --> 01:12:52,880
does uvm three and free walker
 

3725
01:12:52,880 --> 01:12:54,709
does uvm three and free walker
originally panic at the leaf

3726
01:12:54,709 --> 01:12:54,719
originally panic at the leaf
 

3727
01:12:54,719 --> 01:12:58,550
originally panic at the leaf
uh and the reason is that you know the

3728
01:12:58,550 --> 01:12:58,560
uh and the reason is that you know the
 

3729
01:12:58,560 --> 01:12:59,990
uh and the reason is that you know the
we put that panic in there because it

3730
01:12:59,990 --> 01:13:00,000
we put that panic in there because it
 

3731
01:13:00,000 --> 01:13:02,470
we put that panic in there because it
broke uh that was an indication that the

3732
01:13:02,470 --> 01:13:02,480
broke uh that was an indication that the
 

3733
01:13:02,480 --> 01:13:04,709
broke uh that was an indication that the
variant in xv6 would be broken and

3734
01:13:04,709 --> 01:13:04,719
variant in xv6 would be broken and
 

3735
01:13:04,719 --> 01:13:07,830
variant in xv6 would be broken and
that's an invariant for unmodified xc6

3736
01:13:07,830 --> 01:13:07,840
that's an invariant for unmodified xc6
 

3737
01:13:07,840 --> 01:13:10,790
that's an invariant for unmodified xc6
in this particular case uh that is not

3738
01:13:10,790 --> 01:13:10,800
in this particular case uh that is not
 

3739
01:13:10,800 --> 01:13:11,270
in this particular case uh that is not
true

3740
01:13:11,270 --> 01:13:11,280
true
 

3741
01:13:11,280 --> 01:13:13,430
true
and so you had to basically get rid of

3742
01:13:13,430 --> 01:13:13,440
and so you had to basically get rid of
 

3743
01:13:13,440 --> 01:13:15,830
and so you had to basically get rid of
the panic and realize that it was not

3744
01:13:15,830 --> 01:13:15,840
the panic and realize that it was not
 

3745
01:13:15,840 --> 01:13:17,510
the panic and realize that it was not
important to panic there you should not

3746
01:13:17,510 --> 01:13:17,520
important to panic there you should not
 

3747
01:13:17,520 --> 01:13:21,669
important to panic there you should not
get it there

3748
01:13:21,669 --> 01:13:21,679

 

3749
01:13:21,679 --> 01:13:23,669

i think we talked quite a bit about like

3750
01:13:23,669 --> 01:13:23,679
i think we talked quite a bit about like
 

3751
01:13:23,679 --> 01:13:25,430
i think we talked quite a bit about like
why vm copy news

3752
01:13:25,430 --> 01:13:25,440
why vm copy news
 

3753
01:13:25,440 --> 01:13:27,110
why vm copy news
you know why the new vm company is a

3754
01:13:27,110 --> 01:13:27,120
you know why the new vm company is a
 

3755
01:13:27,120 --> 01:13:32,070
you know why the new vm company is a
good one uh

3756
01:13:32,070 --> 01:13:32,080
good one uh
 

3757
01:13:32,080 --> 01:13:35,669
good one uh
uh okay here's another question

3758
01:13:35,669 --> 01:13:35,679
uh okay here's another question
 

3759
01:13:35,679 --> 01:13:38,070
uh okay here's another question
um let's say and this is maybe an

3760
01:13:38,070 --> 01:13:38,080
um let's say and this is maybe an
 

3761
01:13:38,080 --> 01:13:40,070
um let's say and this is maybe an
interesting uh

3762
01:13:40,070 --> 01:13:40,080
interesting uh
 

3763
01:13:40,080 --> 01:13:41,590
interesting uh
one question i was asked if sort of more

3764
01:13:41,590 --> 01:13:41,600
one question i was asked if sort of more
 

3765
01:13:41,600 --> 01:13:43,830
one question i was asked if sort of more
design question uh and

3766
01:13:43,830 --> 01:13:43,840
design question uh and
 

3767
01:13:43,840 --> 01:13:47,110
design question uh and
it helps have a picture we look at the

3768
01:13:47,110 --> 01:13:47,120
it helps have a picture we look at the
 

3769
01:13:47,120 --> 01:13:48,310
it helps have a picture we look at the
kernel address space

3770
01:13:48,310 --> 01:13:48,320
kernel address space
 

3771
01:13:48,320 --> 01:13:51,189
kernel address space
or we eliminate let's see if i can find

3772
01:13:51,189 --> 01:13:51,199
or we eliminate let's see if i can find
 

3773
01:13:51,199 --> 01:13:52,229
or we eliminate let's see if i can find
my pen

3774
01:13:52,229 --> 01:13:52,239
my pen
 

3775
01:13:52,239 --> 01:13:54,870
my pen
we limited user address user programs

3776
01:13:54,870 --> 01:13:54,880
we limited user address user programs
 

3777
01:13:54,880 --> 01:13:56,630
we limited user address user programs
can be bigger we said basically user

3778
01:13:56,630 --> 01:13:56,640
can be bigger we said basically user
 

3779
01:13:56,640 --> 01:13:58,070
can be bigger we said basically user
programs can grow to the clean address

3780
01:13:58,070 --> 01:13:58,080
programs can grow to the clean address
 

3781
01:13:58,080 --> 01:14:00,870
programs can grow to the clean address
no further

3782
01:14:00,870 --> 01:14:00,880
no further
 

3783
01:14:00,880 --> 01:14:02,470
no further
let's say we actually wanted to grow

3784
01:14:02,470 --> 01:14:02,480
let's say we actually wanted to grow
 

3785
01:14:02,480 --> 01:14:04,630
let's say we actually wanted to grow
like all the way to here

3786
01:14:04,630 --> 01:14:04,640
like all the way to here
 

3787
01:14:04,640 --> 01:14:06,870
like all the way to here
how could we do that and what what how

3788
01:14:06,870 --> 01:14:06,880
how could we do that and what what how
 

3789
01:14:06,880 --> 01:14:08,550
how could we do that and what what how
should we change the design

3790
01:14:08,550 --> 01:14:08,560
should we change the design
 

3791
01:14:08,560 --> 01:14:18,229
should we change the design
that would allow that

3792
01:14:18,229 --> 01:14:18,239

 

3793
01:14:18,239 --> 01:14:23,350

anybody

3794
01:14:23,350 --> 01:14:23,360

 

3795
01:14:23,360 --> 01:14:26,390

uh could we remap the the stuff

3796
01:14:26,390 --> 01:14:26,400
uh could we remap the the stuff
 

3797
01:14:26,400 --> 01:14:31,270
uh could we remap the the stuff
uh like clint and plic and you are

3798
01:14:31,270 --> 01:14:31,280
uh like clint and plic and you are
 

3799
01:14:31,280 --> 01:14:33,350
uh like clint and plic and you are
yeah where would you mark up so where if

3800
01:14:33,350 --> 01:14:33,360
yeah where would you mark up so where if
 

3801
01:14:33,360 --> 01:14:34,470
yeah where would you mark up so where if
you wanted to

3802
01:14:34,470 --> 01:14:34,480
you wanted to
 

3803
01:14:34,480 --> 01:14:35,830
you wanted to
free up basically that part of the

3804
01:14:35,830 --> 01:14:35,840
free up basically that part of the
 

3805
01:14:35,840 --> 01:14:39,270
free up basically that part of the
address space what could you do

3806
01:14:39,270 --> 01:14:39,280
address space what could you do
 

3807
01:14:39,280 --> 01:14:42,470
address space what could you do
map it to like a custom thing before

3808
01:14:42,470 --> 01:14:42,480
map it to like a custom thing before
 

3809
01:14:42,480 --> 01:14:43,910
map it to like a custom thing before
current base and after

3810
01:14:43,910 --> 01:14:43,920
current base and after
 

3811
01:14:43,920 --> 01:14:46,630
current base and after
like before physical stop and after

3812
01:14:46,630 --> 01:14:46,640
like before physical stop and after
 

3813
01:14:46,640 --> 01:14:48,070
like before physical stop and after
current base

3814
01:14:48,070 --> 01:14:48,080
current base
 

3815
01:14:48,080 --> 01:14:49,990
current base
yeah or uh it may be actually better to

3816
01:14:49,990 --> 01:14:50,000
yeah or uh it may be actually better to
 

3817
01:14:50,000 --> 01:14:51,270
yeah or uh it may be actually better to
after fish stock

3818
01:14:51,270 --> 01:14:51,280
after fish stock
 

3819
01:14:51,280 --> 01:14:53,510
after fish stock
here's a huge amount of free space like

3820
01:14:53,510 --> 01:14:53,520
here's a huge amount of free space like
 

3821
01:14:53,520 --> 01:14:55,189
here's a huge amount of free space like
address space is unused like this from

3822
01:14:55,189 --> 01:14:55,199
address space is unused like this from
 

3823
01:14:55,199 --> 01:14:56,310
address space is unused like this from
here to there is basically used for

3824
01:14:56,310 --> 01:14:56,320
here to there is basically used for
 

3825
01:14:56,320 --> 01:14:57,430
here to there is basically used for
physical memory

3826
01:14:57,430 --> 01:14:57,440
physical memory
 

3827
01:14:57,440 --> 01:14:58,950
physical memory
and we basically could set up mappings

3828
01:14:58,950 --> 01:14:58,960
and we basically could set up mappings
 

3829
01:14:58,960 --> 01:15:00,310
and we basically could set up mappings
here right for example we could put the

3830
01:15:00,310 --> 01:15:00,320
here right for example we could put the
 

3831
01:15:00,320 --> 01:15:01,189
here right for example we could put the
uart

3832
01:15:01,189 --> 01:15:01,199
uart
 

3833
01:15:01,199 --> 01:15:04,870
uart
here like you are zero we could put

3834
01:15:04,870 --> 01:15:04,880
here like you are zero we could put
 

3835
01:15:04,880 --> 01:15:06,470
here like you are zero we could put
just above this page and basically set

3836
01:15:06,470 --> 01:15:06,480
just above this page and basically set
 

3837
01:15:06,480 --> 01:15:08,310
just above this page and basically set
up a mapping that

3838
01:15:08,310 --> 01:15:08,320
up a mapping that
 

3839
01:15:08,320 --> 01:15:10,950
up a mapping that
maps to that particular physical address

3840
01:15:10,950 --> 01:15:10,960
maps to that particular physical address
 

3841
01:15:10,960 --> 01:15:12,950
maps to that particular physical address
right and then that will free up this

3842
01:15:12,950 --> 01:15:12,960
right and then that will free up this
 

3843
01:15:12,960 --> 01:15:14,950
right and then that will free up this
mapping and we could use it for user

3844
01:15:14,950 --> 01:15:14,960
mapping and we could use it for user
 

3845
01:15:14,960 --> 01:15:16,709
mapping and we could use it for user
space and so similarly we could do that

3846
01:15:16,709 --> 01:15:16,719
space and so similarly we could do that
 

3847
01:15:16,719 --> 01:15:18,950
space and so similarly we could do that
for ui zero or converge io disk you know

3848
01:15:18,950 --> 01:15:18,960
for ui zero or converge io disk you know
 

3849
01:15:18,960 --> 01:15:21,270
for ui zero or converge io disk you know
for click and click

3850
01:15:21,270 --> 01:15:21,280
for click and click
 

3851
01:15:21,280 --> 01:15:24,550
for click and click
and real kernels do that

3852
01:15:24,550 --> 01:15:24,560
and real kernels do that
 

3853
01:15:24,560 --> 01:15:36,950
and real kernels do that
does that make sense

3854
01:15:36,950 --> 01:15:36,960

 

3855
01:15:36,960 --> 01:15:38,870

is it isn't that problematic though

3856
01:15:38,870 --> 01:15:38,880
is it isn't that problematic though
 

3857
01:15:38,880 --> 01:15:40,070
is it isn't that problematic though
because we would

3858
01:15:40,070 --> 01:15:40,080
because we would
 

3859
01:15:40,080 --> 01:15:42,870
because we would
we want the same same mapping as the

3860
01:15:42,870 --> 01:15:42,880
we want the same same mapping as the
 

3861
01:15:42,880 --> 01:15:44,229
we want the same same mapping as the
original

3862
01:15:44,229 --> 01:15:44,239
original
 

3863
01:15:44,239 --> 01:15:48,149
original
uh kernel page table has

3864
01:15:48,149 --> 01:15:48,159
uh kernel page table has
 

3865
01:15:48,159 --> 01:15:51,030
uh kernel page table has
uh well we have to do it in every every

3866
01:15:51,030 --> 01:15:51,040
uh well we have to do it in every every
 

3867
01:15:51,040 --> 01:15:52,390
uh well we have to do it in every every
kernel page table correct if we had

3868
01:15:52,390 --> 01:15:52,400
kernel page table correct if we had
 

3869
01:15:52,400 --> 01:15:53,669
kernel page table correct if we had
copies we have to map it

3870
01:15:53,669 --> 01:15:53,679
copies we have to map it
 

3871
01:15:53,679 --> 01:16:00,310
copies we have to map it
everywhere at that particular location

3872
01:16:00,310 --> 01:16:00,320

 

3873
01:16:00,320 --> 01:16:02,149

i'm not sure that is a i'm not sure that

3874
01:16:02,149 --> 01:16:02,159
i'm not sure that is a i'm not sure that
 

3875
01:16:02,159 --> 01:16:03,910
i'm not sure that is a i'm not sure that
answers your question but

3876
01:16:03,910 --> 01:16:03,920
answers your question but
 

3877
01:16:03,920 --> 01:16:06,310
answers your question but
i don't think that's a problem i see so

3878
01:16:06,310 --> 01:16:06,320
i don't think that's a problem i see so
 

3879
01:16:06,320 --> 01:16:07,990
i don't think that's a problem i see so
you you do that mapping

3880
01:16:07,990 --> 01:16:08,000
you you do that mapping
 

3881
01:16:08,000 --> 01:16:10,709
you you do that mapping
also in the original yeah yeah we would

3882
01:16:10,709 --> 01:16:10,719
also in the original yeah yeah we would
 

3883
01:16:10,719 --> 01:16:15,590
also in the original yeah yeah we would
have to do it also in the original one

3884
01:16:15,590 --> 01:16:15,600

 

3885
01:16:15,600 --> 01:16:17,350

and that's easier like if the whole

3886
01:16:17,350 --> 01:16:17,360
and that's easier like if the whole
 

3887
01:16:17,360 --> 01:16:19,350
and that's easier like if the whole
kernel uniformly thinks about

3888
01:16:19,350 --> 01:16:19,360
kernel uniformly thinks about
 

3889
01:16:19,360 --> 01:16:28,709
kernel uniformly thinks about
you are zero sitting on the top

3890
01:16:28,709 --> 01:16:28,719

 

3891
01:16:28,719 --> 01:16:30,149

you know a number of people ask this

3892
01:16:30,149 --> 01:16:30,159
you know a number of people ask this
 

3893
01:16:30,159 --> 01:16:32,070
you know a number of people ask this
like why do we map the kernel stacks

3894
01:16:32,070 --> 01:16:32,080
like why do we map the kernel stacks
 

3895
01:16:32,080 --> 01:16:37,110
like why do we map the kernel stacks
high up

3896
01:16:37,110 --> 01:16:37,120

 

3897
01:16:37,120 --> 01:16:38,470

what is the reason for that like so we

3898
01:16:38,470 --> 01:16:38,480
what is the reason for that like so we
 

3899
01:16:38,480 --> 01:16:40,470
what is the reason for that like so we
can proc in it correct we

3900
01:16:40,470 --> 01:16:40,480
can proc in it correct we
 

3901
01:16:40,480 --> 01:16:43,270
can proc in it correct we
uh map these uh kernel stacks high up

3902
01:16:43,270 --> 01:16:43,280
uh map these uh kernel stacks high up
 

3903
01:16:43,280 --> 01:16:44,790
uh map these uh kernel stacks high up
and if you did the copy approach you

3904
01:16:44,790 --> 01:16:44,800
and if you did the copy approach you
 

3905
01:16:44,800 --> 01:16:46,870
and if you did the copy approach you
know you actually have to modify cop

3906
01:16:46,870 --> 01:16:46,880
know you actually have to modify cop
 

3907
01:16:46,880 --> 01:16:49,590
know you actually have to modify cop
proc in it to actually copy over that

3908
01:16:49,590 --> 01:16:49,600
proc in it to actually copy over that
 

3909
01:16:49,600 --> 01:16:51,510
proc in it to actually copy over that
mapping

3910
01:16:51,510 --> 01:16:51,520
mapping
 

3911
01:16:51,520 --> 01:16:53,590
mapping
and why setting it up high in the

3912
01:16:53,590 --> 01:16:53,600
and why setting it up high in the
 

3913
01:16:53,600 --> 01:17:00,830
and why setting it up high in the
virtual address space

3914
01:17:00,830 --> 01:17:00,840

 

3915
01:17:00,840 --> 01:17:09,270

anybody

3916
01:17:09,270 --> 01:17:09,280

 

3917
01:17:09,280 --> 01:17:11,830

is it specifically because the uh the

3918
01:17:11,830 --> 01:17:11,840
is it specifically because the uh the
 

3919
01:17:11,840 --> 01:17:13,270
is it specifically because the uh the
stacks in risk five grow

3920
01:17:13,270 --> 01:17:13,280
stacks in risk five grow
 

3921
01:17:13,280 --> 01:17:14,709
stacks in risk five grow
downwards and so you place it high in

3922
01:17:14,709 --> 01:17:14,719
downwards and so you place it high in
 

3923
01:17:14,719 --> 01:17:16,390
downwards and so you place it high in
the address space so that it has space

3924
01:17:16,390 --> 01:17:16,400
the address space so that it has space
 

3925
01:17:16,400 --> 01:17:17,830
the address space so that it has space
to grow downwards

3926
01:17:17,830 --> 01:17:17,840
to grow downwards
 

3927
01:17:17,840 --> 01:17:19,510
to grow downwards
how much is it the right direction how

3928
01:17:19,510 --> 01:17:19,520
how much is it the right direction how
 

3929
01:17:19,520 --> 01:17:20,630
how much is it the right direction how
much phase does it have to grow

3930
01:17:20,630 --> 01:17:20,640
much phase does it have to grow
 

3931
01:17:20,640 --> 01:17:25,750
much phase does it have to grow
downwards

3932
01:17:25,750 --> 01:17:25,760

 

3933
01:17:25,760 --> 01:17:27,030

that shouldn't matter because it's just

3934
01:17:27,030 --> 01:17:27,040
that shouldn't matter because it's just
 

3935
01:17:27,040 --> 01:17:28,950
that shouldn't matter because it's just
one page right yeah it's only one page

3936
01:17:28,950 --> 01:17:28,960
one page right yeah it's only one page
 

3937
01:17:28,960 --> 01:17:30,950
one page right yeah it's only one page
so what happens if you go beyond

3938
01:17:30,950 --> 01:17:30,960
so what happens if you go beyond
 

3939
01:17:30,960 --> 01:17:37,110
so what happens if you go beyond
one page

3940
01:17:37,110 --> 01:17:37,120

 

3941
01:17:37,120 --> 01:17:40,550

you run into the cart page correct

3942
01:17:40,550 --> 01:17:40,560
you run into the cart page correct
 

3943
01:17:40,560 --> 01:17:43,030
you run into the cart page correct
and the guard page is not mapped and so

3944
01:17:43,030 --> 01:17:43,040
and the guard page is not mapped and so
 

3945
01:17:43,040 --> 01:17:44,390
and the guard page is not mapped and so
the kernel will panic

3946
01:17:44,390 --> 01:17:44,400
the kernel will panic
 

3947
01:17:44,400 --> 01:17:45,910
the kernel will panic
which is better than actually writing

3948
01:17:45,910 --> 01:17:45,920
which is better than actually writing
 

3949
01:17:45,920 --> 01:17:48,790
which is better than actually writing
over its data structures

3950
01:17:48,790 --> 01:17:48,800
over its data structures
 

3951
01:17:48,800 --> 01:17:50,550
over its data structures
and so the reason it's high up is uh

3952
01:17:50,550 --> 01:17:50,560
and so the reason it's high up is uh
 

3953
01:17:50,560 --> 01:17:52,390
and so the reason it's high up is uh
because we put a guard page below it

3954
01:17:52,390 --> 01:17:52,400
because we put a guard page below it
 

3955
01:17:52,400 --> 01:17:53,910
because we put a guard page below it
is there actually any physical memory

3956
01:17:53,910 --> 01:17:53,920
is there actually any physical memory
 

3957
01:17:53,920 --> 01:17:59,350
is there actually any physical memory
associated with that guard page

3958
01:17:59,350 --> 01:17:59,360
associated with that guard page
 

3959
01:17:59,360 --> 01:18:01,350
associated with that guard page
no no there's no physical memory

3960
01:18:01,350 --> 01:18:01,360
no no there's no physical memory
 

3961
01:18:01,360 --> 01:18:02,790
no no there's no physical memory
associated with the guard page right so

3962
01:18:02,790 --> 01:18:02,800
associated with the guard page right so
 

3963
01:18:02,800 --> 01:18:04,149
associated with the guard page right so
that's one of the cool things about

3964
01:18:04,149 --> 01:18:04,159
that's one of the cool things about
 

3965
01:18:04,159 --> 01:18:05,430
that's one of the cool things about
putting it high

3966
01:18:05,430 --> 01:18:05,440
putting it high
 

3967
01:18:05,440 --> 01:18:07,189
putting it high
is that we can put a guard page below it

3968
01:18:07,189 --> 01:18:07,199
is that we can put a guard page below it
 

3969
01:18:07,199 --> 01:18:08,870
is that we can put a guard page below it
that actually doesn't consume any

3970
01:18:08,870 --> 01:18:08,880
that actually doesn't consume any
 

3971
01:18:08,880 --> 01:18:12,709
that actually doesn't consume any
physical memory

3972
01:18:12,709 --> 01:18:12,719
physical memory
 

3973
01:18:12,719 --> 01:18:17,110
physical memory
okay does that make sense

3974
01:18:17,110 --> 01:18:17,120

 

3975
01:18:17,120 --> 01:18:19,990

oh so basically the cornell stuff page

3976
01:18:19,990 --> 01:18:20,000
oh so basically the cornell stuff page
 

3977
01:18:20,000 --> 01:18:21,590
oh so basically the cornell stuff page
will be

3978
01:18:21,590 --> 01:18:21,600
will be
 

3979
01:18:21,600 --> 01:18:23,590
will be
physical somewhere but the card page

3980
01:18:23,590 --> 01:18:23,600
physical somewhere but the card page
 

3981
01:18:23,600 --> 01:18:26,709
physical somewhere but the card page
won't exactly

3982
01:18:26,709 --> 01:18:26,719
won't exactly
 

3983
01:18:26,719 --> 01:18:28,149
won't exactly
again one of the cool things you can do

3984
01:18:28,149 --> 01:18:28,159
again one of the cool things you can do
 

3985
01:18:28,159 --> 01:18:30,070
again one of the cool things you can do
with virtual member

3986
01:18:30,070 --> 01:18:30,080
with virtual member
 

3987
01:18:30,080 --> 01:18:32,070
with virtual member
is it possible to overshoot the guard

3988
01:18:32,070 --> 01:18:32,080
is it possible to overshoot the guard
 

3989
01:18:32,080 --> 01:18:33,189
is it possible to overshoot the guard
page yeah

3990
01:18:33,189 --> 01:18:33,199
page yeah
 

3991
01:18:33,199 --> 01:18:35,430
page yeah
that's a great question you know what

3992
01:18:35,430 --> 01:18:35,440
that's a great question you know what
 

3993
01:18:35,440 --> 01:18:36,630
that's a great question you know what
one for example if you know you

3994
01:18:36,630 --> 01:18:36,640
one for example if you know you
 

3995
01:18:36,640 --> 01:18:37,750
one for example if you know you
allocated the guard uh

3996
01:18:37,750 --> 01:18:37,760
allocated the guard uh
 

3997
01:18:37,760 --> 01:18:41,350
allocated the guard uh
a buffer on the stack that actually uh

3998
01:18:41,350 --> 01:18:41,360
a buffer on the stack that actually uh
 

3999
01:18:41,360 --> 01:18:43,350
a buffer on the stack that actually uh
is you know way bigger than the guard

4000
01:18:43,350 --> 01:18:43,360
is you know way bigger than the guard
 

4001
01:18:43,360 --> 01:18:44,550
is you know way bigger than the guard
page correct and sort of

4002
01:18:44,550 --> 01:18:44,560
page correct and sort of
 

4003
01:18:44,560 --> 01:18:47,990
page correct and sort of
goes into the next kernel stack page

4004
01:18:47,990 --> 01:18:48,000
goes into the next kernel stack page
 

4005
01:18:48,000 --> 01:18:50,470
goes into the next kernel stack page
uh and yeah you would have a serious bug

4006
01:18:50,470 --> 01:18:50,480
uh and yeah you would have a serious bug
 

4007
01:18:50,480 --> 01:18:52,310
uh and yeah you would have a serious bug
uh most likely you will run into that

4008
01:18:52,310 --> 01:18:52,320
uh most likely you will run into that
 

4009
01:18:52,320 --> 01:18:52,790
uh most likely you will run into that
anyway

4010
01:18:52,790 --> 01:18:52,800
anyway
 

4011
01:18:52,800 --> 01:18:53,990
anyway
right because you presumably would use

4012
01:18:53,990 --> 01:18:54,000
right because you presumably would use
 

4013
01:18:54,000 --> 01:18:56,070
right because you presumably would use
the first entries of that buffer

4014
01:18:56,070 --> 01:18:56,080
the first entries of that buffer
 

4015
01:18:56,080 --> 01:19:00,470
the first entries of that buffer
and then you would get the page fault

4016
01:19:00,470 --> 01:19:00,480

 

4017
01:19:00,480 --> 01:19:03,590

but you could get unlocking so this this

4018
01:19:03,590 --> 01:19:03,600
but you could get unlocking so this this
 

4019
01:19:03,600 --> 01:19:04,470
but you could get unlocking so this this
is not a

4020
01:19:04,470 --> 01:19:04,480
is not a
 

4021
01:19:04,480 --> 01:19:06,950
is not a
bulletproof kernel debugging technique

4022
01:19:06,950 --> 01:19:06,960
bulletproof kernel debugging technique
 

4023
01:19:06,960 --> 01:19:09,189
bulletproof kernel debugging technique
but it has proven to be

4024
01:19:09,189 --> 01:19:09,199
but it has proven to be
 

4025
01:19:09,199 --> 01:19:13,030
but it has proven to be
extremely effective

4026
01:19:13,030 --> 01:19:13,040

 

4027
01:19:13,040 --> 01:19:18,870

great question

4028
01:19:18,870 --> 01:19:18,880

 

4029
01:19:18,880 --> 01:19:21,910

any more questions we'll go back to the

4030
01:19:21,910 --> 01:19:21,920
any more questions we'll go back to the
 

4031
01:19:21,920 --> 01:19:23,350
any more questions we'll go back to the
list

4032
01:19:23,350 --> 01:19:23,360
list
 

4033
01:19:23,360 --> 01:19:24,709
list
you see we have a couple more minutes

4034
01:19:24,709 --> 01:19:24,719
you see we have a couple more minutes
 

4035
01:19:24,719 --> 01:19:27,110
you see we have a couple more minutes
and then actually one more minute

4036
01:19:27,110 --> 01:19:27,120
and then actually one more minute
 

4037
01:19:27,120 --> 01:19:31,030
and then actually one more minute
um i have a question so once we have

4038
01:19:31,030 --> 01:19:31,040
um i have a question so once we have
 

4039
01:19:31,040 --> 01:19:34,149
um i have a question so once we have
our kernel page tables for the processes

4040
01:19:34,149 --> 01:19:34,159
our kernel page tables for the processes
 

4041
01:19:34,159 --> 01:19:37,189
our kernel page tables for the processes
does that mean that in the um

4042
01:19:37,189 --> 01:19:37,199
does that mean that in the um
 

4043
01:19:37,199 --> 01:19:40,390
does that mean that in the um
trap code we don't need to

4044
01:19:40,390 --> 01:19:40,400
trap code we don't need to
 

4045
01:19:40,400 --> 01:19:44,550
trap code we don't need to
switch page tables i think that's a

4046
01:19:44,550 --> 01:19:44,560
switch page tables i think that's a
 

4047
01:19:44,560 --> 01:19:45,750
switch page tables i think that's a
great question it's a good design

4048
01:19:45,750 --> 01:19:45,760
great question it's a good design
 

4049
01:19:45,760 --> 01:19:47,750
great question it's a good design
question uh and the answer is yes

4050
01:19:47,750 --> 01:19:47,760
question uh and the answer is yes
 

4051
01:19:47,760 --> 01:19:51,270
question uh and the answer is yes
you don't need it right because uh

4052
01:19:51,270 --> 01:19:51,280
you don't need it right because uh
 

4053
01:19:51,280 --> 01:19:53,830
you don't need it right because uh
the main reason that the kernel or in

4054
01:19:53,830 --> 01:19:53,840
the main reason that the kernel or in
 

4055
01:19:53,840 --> 01:19:55,189
the main reason that the kernel or in
the trampoline code we go for all this

4056
01:19:55,189 --> 01:19:55,199
the trampoline code we go for all this
 

4057
01:19:55,199 --> 01:19:56,870
the trampoline code we go for all this
trouble is because we have to copy the

4058
01:19:56,870 --> 01:19:56,880
trouble is because we have to copy the
 

4059
01:19:56,880 --> 01:19:57,830
trouble is because we have to copy the
user

4060
01:19:57,830 --> 01:19:57,840
user
 

4061
01:19:57,840 --> 01:19:59,510
user
uh we have to switch from the kernel

4062
01:19:59,510 --> 01:19:59,520
uh we have to switch from the kernel
 

4063
01:19:59,520 --> 01:20:01,110
uh we have to switch from the kernel
page table to the user page table in the

4064
01:20:01,110 --> 01:20:01,120
page table to the user page table in the
 

4065
01:20:01,120 --> 01:20:02,310
page table to the user page table in the
user page table

4066
01:20:02,310 --> 01:20:02,320
user page table
 

4067
01:20:02,320 --> 01:20:04,149
user page table
or a page table doesn't have the rest of

4068
01:20:04,149 --> 01:20:04,159
or a page table doesn't have the rest of
 

4069
01:20:04,159 --> 01:20:05,669
or a page table doesn't have the rest of
the kernel mapped

4070
01:20:05,669 --> 01:20:05,679
the kernel mapped
 

4071
01:20:05,679 --> 01:20:09,750
the kernel mapped
uh and so uh the downside

4072
01:20:09,750 --> 01:20:09,760
uh and so uh the downside
 

4073
01:20:09,760 --> 01:20:12,229
uh and so uh the downside
wait i'm not sure if that's true because

4074
01:20:12,229 --> 01:20:12,239
wait i'm not sure if that's true because
 

4075
01:20:12,239 --> 01:20:14,790
wait i'm not sure if that's true because
the cornell needs to have the user black

4076
01:20:14,790 --> 01:20:14,800
the cornell needs to have the user black
 

4077
01:20:14,800 --> 01:20:17,990
the cornell needs to have the user black
uh user flag on set yeah yeah okay so

4078
01:20:17,990 --> 01:20:18,000
uh user flag on set yeah yeah okay so
 

4079
01:20:18,000 --> 01:20:18,950
uh user flag on set yeah yeah okay so
there's a couple of points i wanted to

4080
01:20:18,950 --> 01:20:18,960
there's a couple of points i wanted to
 

4081
01:20:18,960 --> 01:20:20,709
there's a couple of points i wanted to
make

4082
01:20:20,709 --> 01:20:20,719
make
 

4083
01:20:20,719 --> 01:20:23,350
make
so in principle uh you could simplify

4084
01:20:23,350 --> 01:20:23,360
so in principle uh you could simplify
 

4085
01:20:23,360 --> 01:20:23,910
so in principle uh you could simplify
the

4086
01:20:23,910 --> 01:20:23,920
the
 

4087
01:20:23,920 --> 01:20:26,070
the
uh trend let me put it this way you can

4088
01:20:26,070 --> 01:20:26,080
uh trend let me put it this way you can
 

4089
01:20:26,080 --> 01:20:27,669
uh trend let me put it this way you can
simplify entry and exit

4090
01:20:27,669 --> 01:20:27,679
simplify entry and exit
 

4091
01:20:27,679 --> 01:20:29,590
simplify entry and exit
uh if you have a single page table that

4092
01:20:29,590 --> 01:20:29,600
uh if you have a single page table that
 

4093
01:20:29,600 --> 01:20:31,030
uh if you have a single page table that
maps the user and the kernel

4094
01:20:31,030 --> 01:20:31,040
maps the user and the kernel
 

4095
01:20:31,040 --> 01:20:32,550
maps the user and the kernel
in a single page table because then you

4096
01:20:32,550 --> 01:20:32,560
in a single page table because then you
 

4097
01:20:32,560 --> 01:20:34,550
in a single page table because then you
don't have to switch you will have to

4098
01:20:34,550 --> 01:20:34,560
don't have to switch you will have to
 

4099
01:20:34,560 --> 01:20:36,709
don't have to switch you will have to
make a couple more modifications to xp6

4100
01:20:36,709 --> 01:20:36,719
make a couple more modifications to xp6
 

4101
01:20:36,719 --> 01:20:38,229
make a couple more modifications to xp6
to make that happen

4102
01:20:38,229 --> 01:20:38,239
to make that happen
 

4103
01:20:38,239 --> 01:20:39,750
to make that happen
uh but in principle you could and in

4104
01:20:39,750 --> 01:20:39,760
uh but in principle you could and in
 

4105
01:20:39,760 --> 01:20:41,350
uh but in principle you could and in
fact linux

4106
01:20:41,350 --> 01:20:41,360
fact linux
 

4107
01:20:41,360 --> 01:20:44,149
fact linux
until very recently used you know this

4108
01:20:44,149 --> 01:20:44,159
until very recently used you know this
 

4109
01:20:44,159 --> 01:20:44,629
until very recently used you know this
sort of

4110
01:20:44,629 --> 01:20:44,639
sort of
 

4111
01:20:44,639 --> 01:20:47,910
sort of
strategy of where the kernel and

4112
01:20:47,910 --> 01:20:47,920
strategy of where the kernel and
 

4113
01:20:47,920 --> 01:20:51,110
strategy of where the kernel and
the user code are sitting in a single

4114
01:20:51,110 --> 01:20:51,120
the user code are sitting in a single
 

4115
01:20:51,120 --> 01:20:52,390
the user code are sitting in a single
page table

4116
01:20:52,390 --> 01:20:52,400
page table
 

4117
01:20:52,400 --> 01:20:54,790
page table
uh and relying on basically the ubit you

4118
01:20:54,790 --> 01:20:54,800
uh and relying on basically the ubit you
 

4119
01:20:54,800 --> 01:20:56,550
uh and relying on basically the ubit you
know to make sure that the

4120
01:20:56,550 --> 01:20:56,560
know to make sure that the
 

4121
01:20:56,560 --> 01:21:01,030
know to make sure that the
uh the user program couldn't actually

4122
01:21:01,030 --> 01:21:01,040
uh the user program couldn't actually
 

4123
01:21:01,040 --> 01:21:02,790
uh the user program couldn't actually
modify any kernel pages

4124
01:21:02,790 --> 01:21:02,800
modify any kernel pages
 

4125
01:21:02,800 --> 01:21:04,870
modify any kernel pages
and the entry exit code in that case is

4126
01:21:04,870 --> 01:21:04,880
and the entry exit code in that case is
 

4127
01:21:04,880 --> 01:21:05,910
and the entry exit code in that case is
slightly simpler

4128
01:21:05,910 --> 01:21:05,920
slightly simpler
 

4129
01:21:05,920 --> 01:21:07,189
slightly simpler
because you don't have to switch page

4130
01:21:07,189 --> 01:21:07,199
because you don't have to switch page
 

4131
01:21:07,199 --> 01:21:08,629
because you don't have to switch page
tables when you enter or release the

4132
01:21:08,629 --> 01:21:08,639
tables when you enter or release the
 

4133
01:21:08,639 --> 01:21:09,990
tables when you enter or release the
kernel

4134
01:21:09,990 --> 01:21:10,000
kernel
 

4135
01:21:10,000 --> 01:21:12,790
kernel
uh one thing that happened with for

4136
01:21:12,790 --> 01:21:12,800
uh one thing that happened with for
 

4137
01:21:12,800 --> 01:21:14,070
uh one thing that happened with for
example the meltdown attack

4138
01:21:14,070 --> 01:21:14,080
example the meltdown attack
 

4139
01:21:14,080 --> 01:21:17,110
example the meltdown attack
if you might have heard it off

4140
01:21:17,110 --> 01:21:17,120
if you might have heard it off
 

4141
01:21:17,120 --> 01:21:20,229
if you might have heard it off
this side channel attack uh in response

4142
01:21:20,229 --> 01:21:20,239
this side channel attack uh in response
 

4143
01:21:20,239 --> 01:21:22,149
this side channel attack uh in response
to the actually side channel attack

4144
01:21:22,149 --> 01:21:22,159
to the actually side channel attack
 

4145
01:21:22,159 --> 01:21:24,709
to the actually side channel attack
uh linux switch or has an other mode of

4146
01:21:24,709 --> 01:21:24,719
uh linux switch or has an other mode of
 

4147
01:21:24,719 --> 01:21:25,910
uh linux switch or has an other mode of
running there are two modes of running

4148
01:21:25,910 --> 01:21:25,920
running there are two modes of running
 

4149
01:21:25,920 --> 01:21:28,070
running there are two modes of running
one is called the kpti mode

4150
01:21:28,070 --> 01:21:28,080
one is called the kpti mode
 

4151
01:21:28,080 --> 01:21:30,229
one is called the kpti mode
and in that mode basically that reflects

4152
01:21:30,229 --> 01:21:30,239
and in that mode basically that reflects
 

4153
01:21:30,239 --> 01:21:31,990
and in that mode basically that reflects
basically what xv6 does

4154
01:21:31,990 --> 01:21:32,000
basically what xv6 does
 

4155
01:21:32,000 --> 01:21:33,669
basically what xv6 does
you know having a separate page table

4156
01:21:33,669 --> 01:21:33,679
you know having a separate page table
 

4157
01:21:33,679 --> 01:21:35,270
you know having a separate page table
for the kernel and a separate

4158
01:21:35,270 --> 01:21:35,280
for the kernel and a separate
 

4159
01:21:35,280 --> 01:21:40,790
for the kernel and a separate
page table for user space

4160
01:21:40,790 --> 01:21:40,800

 

4161
01:21:40,800 --> 01:21:42,390

right so i still don't understand why

4162
01:21:42,390 --> 01:21:42,400
right so i still don't understand why
 

4163
01:21:42,400 --> 01:21:44,229
right so i still don't understand why
does that work so let's say the

4164
01:21:44,229 --> 01:21:44,239
does that work so let's say the
 

4165
01:21:44,239 --> 01:21:47,590
does that work so let's say the
user process and the kernel uh use the

4166
01:21:47,590 --> 01:21:47,600
user process and the kernel uh use the
 

4167
01:21:47,600 --> 01:21:49,189
user process and the kernel uh use the
same page table

4168
01:21:49,189 --> 01:21:49,199
same page table
 

4169
01:21:49,199 --> 01:21:51,830
same page table
if the user memory has to have the user

4170
01:21:51,830 --> 01:21:51,840
if the user memory has to have the user
 

4171
01:21:51,840 --> 01:21:52,790
if the user memory has to have the user
bit set

4172
01:21:52,790 --> 01:21:52,800
bit set
 

4173
01:21:52,800 --> 01:21:54,629
bit set
the cornell will not be able to access

4174
01:21:54,629 --> 01:21:54,639
the cornell will not be able to access
 

4175
01:21:54,639 --> 01:21:55,990
the cornell will not be able to access
that user memory right

4176
01:21:55,990 --> 01:21:56,000
that user memory right
 

4177
01:21:56,000 --> 01:21:59,270
that user memory right
ah okay the uh on

4178
01:21:59,270 --> 01:21:59,280
ah okay the uh on
 

4179
01:21:59,280 --> 01:22:02,229
ah okay the uh on
so there's a this is uh okay on intel

4180
01:22:02,229 --> 01:22:02,239
so there's a this is uh okay on intel
 

4181
01:22:02,239 --> 01:22:04,149
so there's a this is uh okay on intel
processors that is not the rule

4182
01:22:04,149 --> 01:22:04,159
processors that is not the rule
 

4183
01:22:04,159 --> 01:22:05,750
processors that is not the rule
so for example in intel processors if

4184
01:22:05,750 --> 01:22:05,760
so for example in intel processors if
 

4185
01:22:05,760 --> 01:22:07,110
so for example in intel processors if
your bid is set the kernel can still

4186
01:22:07,110 --> 01:22:07,120
your bid is set the kernel can still
 

4187
01:22:07,120 --> 01:22:08,950
your bid is set the kernel can still
write and read that page

4188
01:22:08,950 --> 01:22:08,960
write and read that page
 

4189
01:22:08,960 --> 01:22:11,350
write and read that page
oh that's just a risk five thing ah and

4190
01:22:11,350 --> 01:22:11,360
oh that's just a risk five thing ah and
 

4191
01:22:11,360 --> 01:22:13,510
oh that's just a risk five thing ah and
even on the risk five you can change it

4192
01:22:13,510 --> 01:22:13,520
even on the risk five you can change it
 

4193
01:22:13,520 --> 01:22:15,110
even on the risk five you can change it
uh there's a bit in the s status

4194
01:22:15,110 --> 01:22:15,120
uh there's a bit in the s status
 

4195
01:22:15,120 --> 01:22:16,709
uh there's a bit in the s status
register that you can set

4196
01:22:16,709 --> 01:22:16,719
register that you can set
 

4197
01:22:16,719 --> 01:22:18,950
register that you can set
the take to some bit and if you set it

4198
01:22:18,950 --> 01:22:18,960
the take to some bit and if you set it
 

4199
01:22:18,960 --> 01:22:19,990
the take to some bit and if you set it
then basically

4200
01:22:19,990 --> 01:22:20,000
then basically
 

4201
01:22:20,000 --> 01:22:23,189
then basically
in kernel mode the view bit is ignored

4202
01:22:23,189 --> 01:22:23,199
in kernel mode the view bit is ignored
 

4203
01:22:23,199 --> 01:22:24,790
in kernel mode the view bit is ignored
okay so you're telling me that there's

4204
01:22:24,790 --> 01:22:24,800
okay so you're telling me that there's
 

4205
01:22:24,800 --> 01:22:26,550
okay so you're telling me that there's
just one bit in this

4206
01:22:26,550 --> 01:22:26,560
just one bit in this
 

4207
01:22:26,560 --> 01:22:28,550
just one bit in this
cmu processor that made me stay up four

4208
01:22:28,550 --> 01:22:28,560
cmu processor that made me stay up four
 

4209
01:22:28,560 --> 01:22:31,189
cmu processor that made me stay up four
hours later yes

4210
01:22:31,189 --> 01:22:31,199
hours later yes
 

4211
01:22:31,199 --> 01:22:32,950
hours later yes
i'm very sorry about that i should have

4212
01:22:32,950 --> 01:22:32,960
i'm very sorry about that i should have
 

4213
01:22:32,960 --> 01:22:35,510
i'm very sorry about that i should have
realized no no no it's okay it was it

4214
01:22:35,510 --> 01:22:35,520
realized no no no it's okay it was it
 

4215
01:22:35,520 --> 01:22:37,430
realized no no no it's okay it was it
was a fun realization

4216
01:22:37,430 --> 01:22:37,440
was a fun realization
 

4217
01:22:37,440 --> 01:22:39,430
was a fun realization
when you reported it uh it reminded me

4218
01:22:39,430 --> 01:22:39,440
when you reported it uh it reminded me
 

4219
01:22:39,440 --> 01:22:41,189
when you reported it uh it reminded me
of a bug that i actually have during the

4220
01:22:41,189 --> 01:22:41,199
of a bug that i actually have during the
 

4221
01:22:41,199 --> 01:22:43,510
of a bug that i actually have during the
summer and it was exactly that book

4222
01:22:43,510 --> 01:22:43,520
summer and it was exactly that book
 

4223
01:22:43,520 --> 01:22:46,790
summer and it was exactly that book
but i forgot about it

4224
01:22:46,790 --> 01:22:46,800
but i forgot about it
 

4225
01:22:46,800 --> 01:22:49,350
but i forgot about it
so my apologies for that no no it's okay

4226
01:22:49,350 --> 01:22:49,360
so my apologies for that no no it's okay
 

4227
01:22:49,360 --> 01:22:49,910
so my apologies for that no no it's okay
it was

4228
01:22:49,910 --> 01:22:49,920
it was
 

4229
01:22:49,920 --> 01:22:52,070
it was
it was fun figuring it out for sure but

4230
01:22:52,070 --> 01:22:52,080
it was fun figuring it out for sure but
 

4231
01:22:52,080 --> 01:22:53,830
it was fun figuring it out for sure but
i i at some point i was just like okay

4232
01:22:53,830 --> 01:22:53,840
i i at some point i was just like okay
 

4233
01:22:53,840 --> 01:22:55,990
i i at some point i was just like okay
like either i'm crazy or something's

4234
01:22:55,990 --> 01:22:56,000
like either i'm crazy or something's
 

4235
01:22:56,000 --> 01:22:57,510
like either i'm crazy or something's
completely wrong so i'm just going to go

4236
01:22:57,510 --> 01:22:57,520
completely wrong so i'm just going to go
 

4237
01:22:57,520 --> 01:22:59,189
completely wrong so i'm just going to go
to sleep and submit this piazza post and

4238
01:22:59,189 --> 01:22:59,199
to sleep and submit this piazza post and
 

4239
01:22:59,199 --> 01:23:00,709
to sleep and submit this piazza post and
hopefully when i wake up someone will

4240
01:23:00,709 --> 01:23:00,719
hopefully when i wake up someone will
 

4241
01:23:00,719 --> 01:23:01,669
hopefully when i wake up someone will
answer and

4242
01:23:01,669 --> 01:23:01,679
answer and
 

4243
01:23:01,679 --> 01:23:03,350
answer and
fortunately that was the case so i was

4244
01:23:03,350 --> 01:23:03,360
fortunately that was the case so i was
 

4245
01:23:03,360 --> 01:23:05,350
fortunately that was the case so i was
able to just continue right off when i

4246
01:23:05,350 --> 01:23:05,360
able to just continue right off when i
 

4247
01:23:05,360 --> 01:23:09,669
able to just continue right off when i
when i did okay so i think we

4248
01:23:09,669 --> 01:23:09,679
when i did okay so i think we
 

4249
01:23:09,679 --> 01:23:11,910
when i did okay so i think we
ran over time a little bit uh and

4250
01:23:11,910 --> 01:23:11,920
ran over time a little bit uh and
 

4251
01:23:11,920 --> 01:23:13,669
ran over time a little bit uh and
hopefully uh this was helpful

4252
01:23:13,669 --> 01:23:13,679
hopefully uh this was helpful
 

4253
01:23:13,679 --> 01:23:15,830
hopefully uh this was helpful
and reaffirms you know things with

4254
01:23:15,830 --> 01:23:15,840
and reaffirms you know things with
 

4255
01:23:15,840 --> 01:23:16,870
and reaffirms you know things with
virtual memory

4256
01:23:16,870 --> 01:23:16,880
virtual memory
 

4257
01:23:16,880 --> 01:23:18,390
virtual memory
i think it was important to do because

4258
01:23:18,390 --> 01:23:18,400
i think it was important to do because
 

4259
01:23:18,400 --> 01:23:20,310
i think it was important to do because
we're gonna get three more labs

4260
01:23:20,310 --> 01:23:20,320
we're gonna get three more labs
 

4261
01:23:20,320 --> 01:23:23,430
we're gonna get three more labs
involving virtual memory and my hope is

4262
01:23:23,430 --> 01:23:23,440
involving virtual memory and my hope is
 

4263
01:23:23,440 --> 01:23:24,470
involving virtual memory and my hope is
that after this one

4264
01:23:24,470 --> 01:23:24,480
that after this one
 

4265
01:23:24,480 --> 01:23:25,990
that after this one
you know those are going to be easier

4266
01:23:25,990 --> 01:23:26,000
you know those are going to be easier
 

4267
01:23:26,000 --> 01:23:29,350
you know those are going to be easier
than uh this experience

4268
01:23:29,350 --> 01:23:29,360
than uh this experience
 

4269
01:23:29,360 --> 01:23:32,790
than uh this experience
can i ask something very quick yeah so

4270
01:23:32,790 --> 01:23:32,800
can i ask something very quick yeah so
 

4271
01:23:32,800 --> 01:23:34,709
can i ask something very quick yeah so
i'm staying on so everybody wants to

4272
01:23:34,709 --> 01:23:34,719
i'm staying on so everybody wants to
 

4273
01:23:34,719 --> 01:23:36,149
i'm staying on so everybody wants to
stay on and ask more questions

4274
01:23:36,149 --> 01:23:36,159
stay on and ask more questions
 

4275
01:23:36,159 --> 01:23:37,830
stay on and ask more questions
please feel free to do so if you need to

4276
01:23:37,830 --> 01:23:37,840
please feel free to do so if you need to
 

4277
01:23:37,840 --> 01:23:40,629
please feel free to do so if you need to
go to the next class please go

4278
01:23:40,629 --> 01:23:40,639
go to the next class please go
 

4279
01:23:40,639 --> 01:23:43,430
go to the next class please go
so basically uh in all the labs like

4280
01:23:43,430 --> 01:23:43,440
so basically uh in all the labs like
 

4281
01:23:43,440 --> 01:23:45,030
so basically uh in all the labs like
there's a lot of mention of like oh

4282
01:23:45,030 --> 01:23:45,040
there's a lot of mention of like oh
 

4283
01:23:45,040 --> 01:23:47,189
there's a lot of mention of like oh
we this might be useful in future labs

4284
01:23:47,189 --> 01:23:47,199
we this might be useful in future labs
 

4285
01:23:47,199 --> 01:23:48,870
we this might be useful in future labs
but we never actually use any of the

4286
01:23:48,870 --> 01:23:48,880
but we never actually use any of the
 

4287
01:23:48,880 --> 01:23:49,990
but we never actually use any of the
code that we

4288
01:23:49,990 --> 01:23:50,000
code that we
 

4289
01:23:50,000 --> 01:23:52,950
code that we
write like what's what's the plan on

4290
01:23:52,950 --> 01:23:52,960
write like what's what's the plan on
 

4291
01:23:52,960 --> 01:23:54,870
write like what's what's the plan on
that like should we just import our code

4292
01:23:54,870 --> 01:23:54,880
that like should we just import our code
 

4293
01:23:54,880 --> 01:23:56,310
that like should we just import our code
from a previous lab or

4294
01:23:56,310 --> 01:23:56,320
from a previous lab or
 

4295
01:23:56,320 --> 01:23:57,750
from a previous lab or
like i don't want to because what if

4296
01:23:57,750 --> 01:23:57,760
like i don't want to because what if
 

4297
01:23:57,760 --> 01:23:59,030
like i don't want to because what if
it's buggy i don't want to you know

4298
01:23:59,030 --> 01:23:59,040
it's buggy i don't want to you know
 

4299
01:23:59,040 --> 01:24:00,550
it's buggy i don't want to you know
impact the next lab

4300
01:24:00,550 --> 01:24:00,560
impact the next lab
 

4301
01:24:00,560 --> 01:24:02,070
impact the next lab
yeah so the one reason we don't do it

4302
01:24:02,070 --> 01:24:02,080
yeah so the one reason we don't do it
 

4303
01:24:02,080 --> 01:24:04,070
yeah so the one reason we don't do it
you know why the build labs don't build

4304
01:24:04,070 --> 01:24:04,080
you know why the build labs don't build
 

4305
01:24:04,080 --> 01:24:05,669
you know why the build labs don't build
on each other even though they could

4306
01:24:05,669 --> 01:24:05,679
on each other even though they could
 

4307
01:24:05,679 --> 01:24:07,669
on each other even though they could
uh is to avoid basically dependencies

4308
01:24:07,669 --> 01:24:07,679
uh is to avoid basically dependencies
 

4309
01:24:07,679 --> 01:24:09,270
uh is to avoid basically dependencies
like if you had a bug in an earlier lab

4310
01:24:09,270 --> 01:24:09,280
like if you had a bug in an earlier lab
 

4311
01:24:09,280 --> 01:24:10,950
like if you had a bug in an earlier lab
that you know was not exposed by user

4312
01:24:10,950 --> 01:24:10,960
that you know was not exposed by user
 

4313
01:24:10,960 --> 01:24:11,590
that you know was not exposed by user
tests

4314
01:24:11,590 --> 01:24:11,600
tests
 

4315
01:24:11,600 --> 01:24:13,669
tests
or any of our tests and but would be

4316
01:24:13,669 --> 01:24:13,679
or any of our tests and but would be
 

4317
01:24:13,679 --> 01:24:15,510
or any of our tests and but would be
exposed to that new lab then you know be

4318
01:24:15,510 --> 01:24:15,520
exposed to that new lab then you know be
 

4319
01:24:15,520 --> 01:24:16,629
exposed to that new lab then you know be
painful

4320
01:24:16,629 --> 01:24:16,639
painful
 

4321
01:24:16,639 --> 01:24:20,070
painful
um the reason i'm mentioning that is

4322
01:24:20,070 --> 01:24:20,080
um the reason i'm mentioning that is
 

4323
01:24:20,080 --> 01:24:21,110
um the reason i'm mentioning that is
that basically

4324
01:24:21,110 --> 01:24:21,120
that basically
 

4325
01:24:21,120 --> 01:24:22,550
that basically
the real thing what's going on is we're

4326
01:24:22,550 --> 01:24:22,560
the real thing what's going on is we're
 

4327
01:24:22,560 --> 01:24:26,229
the real thing what's going on is we're
going to do more stuff with page tables

4328
01:24:26,229 --> 01:24:26,239
going to do more stuff with page tables
 

4329
01:24:26,239 --> 01:24:28,070
going to do more stuff with page tables
so for example this lab looks at

4330
01:24:28,070 --> 01:24:28,080
so for example this lab looks at
 

4331
01:24:28,080 --> 01:24:29,910
so for example this lab looks at
simplifying copy in uh

4332
01:24:29,910 --> 01:24:29,920
simplifying copy in uh
 

4333
01:24:29,920 --> 01:24:32,790
simplifying copy in uh
later labs gonna look at exchange to

4334
01:24:32,790 --> 01:24:32,800
later labs gonna look at exchange to
 

4335
01:24:32,800 --> 01:24:33,510
later labs gonna look at exchange to
s-break

4336
01:24:33,510 --> 01:24:33,520
s-break
 

4337
01:24:33,520 --> 01:24:35,910
s-break
they're basically orthogonal to the

4338
01:24:35,910 --> 01:24:35,920
they're basically orthogonal to the
 

4339
01:24:35,920 --> 01:24:37,350
they're basically orthogonal to the
changes you made to the kernel

4340
01:24:37,350 --> 01:24:37,360
changes you made to the kernel
 

4341
01:24:37,360 --> 01:24:40,390
changes you made to the kernel
for this lab but you know the fact that

4342
01:24:40,390 --> 01:24:40,400
for this lab but you know the fact that
 

4343
01:24:40,400 --> 01:24:41,590
for this lab but you know the fact that
you've been thinking about kernel page

4344
01:24:41,590 --> 01:24:41,600
you've been thinking about kernel page
 

4345
01:24:41,600 --> 01:24:43,590
you've been thinking about kernel page
table user pages tables so much

4346
01:24:43,590 --> 01:24:43,600
table user pages tables so much
 

4347
01:24:43,600 --> 01:24:46,790
table user pages tables so much
will help you plus really what helps you

4348
01:24:46,790 --> 01:24:46,800
will help you plus really what helps you
 

4349
01:24:46,800 --> 01:24:48,310
will help you plus really what helps you
is of the experience debugging these

4350
01:24:48,310 --> 01:24:48,320
is of the experience debugging these
 

4351
01:24:48,320 --> 01:24:49,669
is of the experience debugging these
kinds of problems

4352
01:24:49,669 --> 01:24:49,679
kinds of problems
 

4353
01:24:49,679 --> 01:24:52,790
kinds of problems
due to incorrect page tables

4354
01:24:52,790 --> 01:24:52,800
due to incorrect page tables
 

4355
01:24:52,800 --> 01:24:54,229
due to incorrect page tables
okay i just wanted to make sure that

4356
01:24:54,229 --> 01:24:54,239
okay i just wanted to make sure that
 

4357
01:24:54,239 --> 01:24:55,910
okay i just wanted to make sure that
it's not like i'm missing out because i

4358
01:24:55,910 --> 01:24:55,920
it's not like i'm missing out because i
 

4359
01:24:55,920 --> 01:24:58,470
it's not like i'm missing out because i
didn't copy over my x arch code from lab

4360
01:24:58,470 --> 01:24:58,480
didn't copy over my x arch code from lab
 

4361
01:24:58,480 --> 01:24:59,030
didn't copy over my x arch code from lab
one

4362
01:24:59,030 --> 01:24:59,040
one
 

4363
01:24:59,040 --> 01:25:00,790
one
or something it decided on purpose that

4364
01:25:00,790 --> 01:25:00,800
or something it decided on purpose that
 

4365
01:25:00,800 --> 01:25:04,470
or something it decided on purpose that
the labs are not dependent on each other

4366
01:25:04,470 --> 01:25:04,480

 

4367
01:25:04,480 --> 01:25:12,390

okay thanks i'll see you on wednesday

4368
01:25:12,390 --> 01:25:12,400
okay thanks i'll see you on wednesday
 

4369
01:25:12,400 --> 01:25:15,830
okay thanks i'll see you on wednesday
i had a follow-up on my question about

4370
01:25:15,830 --> 01:25:15,840
i had a follow-up on my question about
 

4371
01:25:15,840 --> 01:25:18,870
i had a follow-up on my question about
mapping mapping uh using the

4372
01:25:18,870 --> 01:25:18,880
mapping mapping uh using the
 

4373
01:25:18,880 --> 01:25:21,430
mapping mapping uh using the
modification from the page table app um

4374
01:25:21,430 --> 01:25:21,440
modification from the page table app um
 

4375
01:25:21,440 --> 01:25:22,790
modification from the page table app um
would it be then

4376
01:25:22,790 --> 01:25:22,800
would it be then
 

4377
01:25:22,800 --> 01:25:26,470
would it be then
needed to have the trampoline

4378
01:25:26,470 --> 01:25:26,480
needed to have the trampoline
 

4379
01:25:26,480 --> 01:25:30,790
needed to have the trampoline
mapped in the user page tables

4380
01:25:30,790 --> 01:25:30,800
mapped in the user page tables
 

4381
01:25:30,800 --> 01:25:32,470
mapped in the user page tables
uh okay so i haven't really fought this

4382
01:25:32,470 --> 01:25:32,480
uh okay so i haven't really fought this
 

4383
01:25:32,480 --> 01:25:34,790
uh okay so i haven't really fought this
through uh

4384
01:25:34,790 --> 01:25:34,800
through uh
 

4385
01:25:34,800 --> 01:25:36,550
through uh
so if you the kernels let's say the

4386
01:25:36,550 --> 01:25:36,560
so if you the kernels let's say the
 

4387
01:25:36,560 --> 01:25:38,390
so if you the kernels let's say the
kernel exit so let's say we have a joint

4388
01:25:38,390 --> 01:25:38,400
kernel exit so let's say we have a joint
 

4389
01:25:38,400 --> 01:25:40,229
kernel exit so let's say we have a joint
one single page table that's the one

4390
01:25:40,229 --> 01:25:40,239
one single page table that's the one
 

4391
01:25:40,239 --> 01:25:43,590
one single page table that's the one
year shown correct and we're jumping out

4392
01:25:43,590 --> 01:25:43,600
year shown correct and we're jumping out
 

4393
01:25:43,600 --> 01:25:44,790
year shown correct and we're jumping out
of the kernel

4394
01:25:44,790 --> 01:25:44,800
of the kernel
 

4395
01:25:44,800 --> 01:25:49,669
of the kernel
uh through useret uh and our goal is to

4396
01:25:49,669 --> 01:25:49,679
uh through useret uh and our goal is to
 

4397
01:25:49,679 --> 01:25:51,350
uh through useret uh and our goal is to
uh we're still running in kernel mode so

4398
01:25:51,350 --> 01:25:51,360
uh we're still running in kernel mode so
 

4399
01:25:51,360 --> 01:25:53,350
uh we're still running in kernel mode so
this page certainly accessible correct

4400
01:25:53,350 --> 01:25:53,360
this page certainly accessible correct
 

4401
01:25:53,360 --> 01:25:55,669
this page certainly accessible correct
in the by the kernel the guard page

4402
01:25:55,669 --> 01:25:55,679
in the by the kernel the guard page
 

4403
01:25:55,679 --> 01:25:57,350
in the by the kernel the guard page
i'll show you not the card page what i'm

4404
01:25:57,350 --> 01:25:57,360
i'll show you not the card page what i'm
 

4405
01:25:57,360 --> 01:26:01,030
i'll show you not the card page what i'm
saying the trampoline page is there

4406
01:26:01,030 --> 01:26:01,040
saying the trampoline page is there
 

4407
01:26:01,040 --> 01:26:05,110
saying the trampoline page is there
and presumably uh somewhere

4408
01:26:05,110 --> 01:26:05,120
and presumably uh somewhere
 

4409
01:26:05,120 --> 01:26:08,229
and presumably uh somewhere
we need to map maybe

4410
01:26:08,229 --> 01:26:08,239
we need to map maybe
 

4411
01:26:08,239 --> 01:26:11,669
we need to map maybe
the

4412
01:26:11,669 --> 01:26:11,679

 

4413
01:26:11,679 --> 01:26:14,870

uh well the user trap train we don't

4414
01:26:14,870 --> 01:26:14,880
uh well the user trap train we don't
 

4415
01:26:14,880 --> 01:26:15,350
uh well the user trap train we don't
really

4416
01:26:15,350 --> 01:26:15,360
really
 

4417
01:26:15,360 --> 01:26:17,430
really
uh we have access to anyway right

4418
01:26:17,430 --> 01:26:17,440
uh we have access to anyway right
 

4419
01:26:17,440 --> 01:26:18,870
uh we have access to anyway right
because we're running kernel mode we

4420
01:26:18,870 --> 01:26:18,880
because we're running kernel mode we
 

4421
01:26:18,880 --> 01:26:20,550
because we're running kernel mode we
know where it sits in the proc structure

4422
01:26:20,550 --> 01:26:20,560
know where it sits in the proc structure
 

4423
01:26:20,560 --> 01:26:20,870
know where it sits in the proc structure
or

4424
01:26:20,870 --> 01:26:20,880
or
 

4425
01:26:20,880 --> 01:26:23,830
or
we can get it so i think we can just

4426
01:26:23,830 --> 01:26:23,840
we can get it so i think we can just
 

4427
01:26:23,840 --> 01:26:25,830
we can get it so i think we can just
exit

4428
01:26:25,830 --> 01:26:25,840
exit
 

4429
01:26:25,840 --> 01:26:28,950
exit
and when we return uh

4430
01:26:28,950 --> 01:26:28,960
and when we return uh
 

4431
01:26:28,960 --> 01:26:30,709
and when we return uh
then the user code can just run you know

4432
01:26:30,709 --> 01:26:30,719
then the user code can just run you know
 

4433
01:26:30,719 --> 01:26:36,470
then the user code can just run you know
we of course the ubit is a bit of a

4434
01:26:36,470 --> 01:26:36,480
we of course the ubit is a bit of a
 

4435
01:26:36,480 --> 01:26:38,310
we of course the ubit is a bit of a
well the ubit is only set on pages that

4436
01:26:38,310 --> 01:26:38,320
well the ubit is only set on pages that
 

4437
01:26:38,320 --> 01:26:40,229
well the ubit is only set on pages that
actually sit in the user space so that's

4438
01:26:40,229 --> 01:26:40,239
actually sit in the user space so that's
 

4439
01:26:40,239 --> 01:26:41,189
actually sit in the user space so that's
fine too

4440
01:26:41,189 --> 01:26:41,199
fine too
 

4441
01:26:41,199 --> 01:26:43,350
fine too
so when we enter the color back in you

4442
01:26:43,350 --> 01:26:43,360
so when we enter the color back in you
 

4443
01:26:43,360 --> 01:26:44,870
so when we enter the color back in you
know we're still with this page table

4444
01:26:44,870 --> 01:26:44,880
know we're still with this page table
 

4445
01:26:44,880 --> 01:26:46,870
know we're still with this page table
that page table already has

4446
01:26:46,870 --> 01:26:46,880
that page table already has
 

4447
01:26:46,880 --> 01:26:48,870
that page table already has
all the kernel now mapped and we could

4448
01:26:48,870 --> 01:26:48,880
all the kernel now mapped and we could
 

4449
01:26:48,880 --> 01:26:50,070
all the kernel now mapped and we could
just you know copy

4450
01:26:50,070 --> 01:26:50,080
just you know copy
 

4451
01:26:50,080 --> 01:26:51,350
just you know copy
you know the registers that we need to

4452
01:26:51,350 --> 01:26:51,360
you know the registers that we need to
 

4453
01:26:51,360 --> 01:26:54,229
you know the registers that we need to
save into the proc structure directly

4454
01:26:54,229 --> 01:26:54,239
save into the proc structure directly
 

4455
01:26:54,239 --> 01:26:57,350
save into the proc structure directly
instead of having to go through the uh

4456
01:26:57,350 --> 01:26:57,360
instead of having to go through the uh
 

4457
01:26:57,360 --> 01:26:58,550
instead of having to go through the uh
have a separate page with the proc

4458
01:26:58,550 --> 01:26:58,560
have a separate page with the proc
 

4459
01:26:58,560 --> 01:27:01,270
have a separate page with the proc
struct in it so i believe the change

4460
01:27:01,270 --> 01:27:01,280
struct in it so i believe the change
 

4461
01:27:01,280 --> 01:27:02,390
struct in it so i believe the change
would be

4462
01:27:02,390 --> 01:27:02,400
would be
 

4463
01:27:02,400 --> 01:27:05,590
would be
pretty straightforward okay

4464
01:27:05,590 --> 01:27:05,600
pretty straightforward okay
 

4465
01:27:05,600 --> 01:27:09,110
pretty straightforward okay
i see thank you but of course

4466
01:27:09,110 --> 01:27:09,120
i see thank you but of course
 

4467
01:27:09,120 --> 01:27:12,229
i see thank you but of course
i could be wrong oh yeah i'm

4468
01:27:12,229 --> 01:27:12,239
i could be wrong oh yeah i'm
 

4469
01:27:12,239 --> 01:27:16,080
i could be wrong oh yeah i'm
i'm now gonna try it now to

