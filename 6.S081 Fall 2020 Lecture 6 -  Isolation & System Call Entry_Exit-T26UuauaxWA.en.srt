1
00:00:02,320 --> 00:00:03,830

all right

2
00:00:03,830 --> 00:00:03,840
all right
 

3
00:00:03,840 --> 00:00:06,710
all right
um i'd like to get started first can uh

4
00:00:06,710 --> 00:00:06,720
um i'd like to get started first can uh
 

5
00:00:06,720 --> 00:00:09,190
um i'd like to get started first can uh
can anyone hear me

6
00:00:09,190 --> 00:00:09,200
can anyone hear me
 

7
00:00:09,200 --> 00:00:13,190
can anyone hear me
yes good thank you very much

8
00:00:13,190 --> 00:00:13,200
yes good thank you very much
 

9
00:00:13,200 --> 00:00:16,470
yes good thank you very much
all right today i want to talk about

10
00:00:16,470 --> 00:00:16,480
all right today i want to talk about
 

11
00:00:16,480 --> 00:00:19,109
all right today i want to talk about
the transition between running and user

12
00:00:19,109 --> 00:00:19,119
the transition between running and user
 

13
00:00:19,119 --> 00:00:19,670
the transition between running and user
code

14
00:00:19,670 --> 00:00:19,680
code
 

15
00:00:19,680 --> 00:00:21,830
code
running programs in user code and

16
00:00:21,830 --> 00:00:21,840
running programs in user code and
 

17
00:00:21,840 --> 00:00:23,349
running programs in user code and
executing in the kernel

18
00:00:23,349 --> 00:00:23,359
executing in the kernel
 

19
00:00:23,359 --> 00:00:24,790
executing in the kernel
and this is the transition that has to

20
00:00:24,790 --> 00:00:24,800
and this is the transition that has to
 

21
00:00:24,800 --> 00:00:26,710
and this is the transition that has to
happen whenever a program makes a system

22
00:00:26,710 --> 00:00:26,720
happen whenever a program makes a system
 

23
00:00:26,720 --> 00:00:27,429
happen whenever a program makes a system
call

24
00:00:27,429 --> 00:00:27,439
call
 

25
00:00:27,439 --> 00:00:29,349
call
or if it experiences a fault like a page

26
00:00:29,349 --> 00:00:29,359
or if it experiences a fault like a page
 

27
00:00:29,359 --> 00:00:30,950
or if it experiences a fault like a page
fault or divide by zero

28
00:00:30,950 --> 00:00:30,960
fault or divide by zero
 

29
00:00:30,960 --> 00:00:33,910
fault or divide by zero
or if a device decides to interrupt and

30
00:00:33,910 --> 00:00:33,920
or if a device decides to interrupt and
 

31
00:00:33,920 --> 00:00:35,990
or if a device decides to interrupt and
needs to be served by a kernel device

32
00:00:35,990 --> 00:00:36,000
needs to be served by a kernel device
 

33
00:00:36,000 --> 00:00:38,150
needs to be served by a kernel device
driver

34
00:00:38,150 --> 00:00:38,160
driver
 

35
00:00:38,160 --> 00:00:40,389
driver
there's a lot of careful design and sort

36
00:00:40,389 --> 00:00:40,399
there's a lot of careful design and sort
 

37
00:00:40,399 --> 00:00:43,110
there's a lot of careful design and sort
of important details that go into the

38
00:00:43,110 --> 00:00:43,120
of important details that go into the
 

39
00:00:43,120 --> 00:00:46,069
of important details that go into the
how these traps from user to kernel

40
00:00:46,069 --> 00:00:46,079
how these traps from user to kernel
 

41
00:00:46,079 --> 00:00:46,790
how these traps from user to kernel
happen

42
00:00:46,790 --> 00:00:46,800
happen
 

43
00:00:46,800 --> 00:00:49,430
happen
and the details are pretty important for

44
00:00:49,430 --> 00:00:49,440
and the details are pretty important for
 

45
00:00:49,440 --> 00:00:51,910
and the details are pretty important for
enforcing isolation security

46
00:00:51,910 --> 00:00:51,920
enforcing isolation security
 

47
00:00:51,920 --> 00:00:53,910
enforcing isolation security
and also perform per performance there's

48
00:00:53,910 --> 00:00:53,920
and also perform per performance there's
 

49
00:00:53,920 --> 00:00:55,590
and also perform per performance there's
many programs that

50
00:00:55,590 --> 00:00:55,600
many programs that
 

51
00:00:55,600 --> 00:00:57,510
many programs that
transition to the kernel a lot either

52
00:00:57,510 --> 00:00:57,520
transition to the kernel a lot either
 

53
00:00:57,520 --> 00:00:59,430
transition to the kernel a lot either
due to system calls or page

54
00:00:59,430 --> 00:00:59,440
due to system calls or page
 

55
00:00:59,440 --> 00:01:02,150
due to system calls or page
page faults and it can be super

56
00:01:02,150 --> 00:01:02,160
page faults and it can be super
 

57
00:01:02,160 --> 00:01:02,709
page faults and it can be super
important

58
00:01:02,709 --> 00:01:02,719
important
 

59
00:01:02,719 --> 00:01:05,030
important
that the uh trap mechanism is as

60
00:01:05,030 --> 00:01:05,040
that the uh trap mechanism is as
 

61
00:01:05,040 --> 00:01:07,510
that the uh trap mechanism is as
streamlined as possible

62
00:01:07,510 --> 00:01:07,520
streamlined as possible
 

63
00:01:07,520 --> 00:01:10,950
streamlined as possible
all right so um starting situation is

64
00:01:10,950 --> 00:01:10,960
all right so um starting situation is
 

65
00:01:10,960 --> 00:01:14,870
all right so um starting situation is
pretty familiar

66
00:01:14,870 --> 00:01:14,880

 

67
00:01:14,880 --> 00:01:17,190

we have our user program i'll use the

68
00:01:17,190 --> 00:01:17,200
we have our user program i'll use the
 

69
00:01:17,200 --> 00:01:19,350
we have our user program i'll use the
shell as an example

70
00:01:19,350 --> 00:01:19,360
shell as an example
 

71
00:01:19,360 --> 00:01:23,510
shell as an example
it's running up in user space and

72
00:01:23,510 --> 00:01:23,520

 

73
00:01:23,520 --> 00:01:24,950

we have the kernel and what the shell

74
00:01:24,950 --> 00:01:24,960
we have the kernel and what the shell
 

75
00:01:24,960 --> 00:01:27,510
we have the kernel and what the shell
would like to do is make a system call

76
00:01:27,510 --> 00:01:27,520
would like to do is make a system call
 

77
00:01:27,520 --> 00:01:29,749
would like to do is make a system call
into the kernel and i'm going to use

78
00:01:29,749 --> 00:01:29,759
into the kernel and i'm going to use
 

79
00:01:29,759 --> 00:01:31,910
into the kernel and i'm going to use
write and use this shell writing its

80
00:01:31,910 --> 00:01:31,920
write and use this shell writing its
 

81
00:01:31,920 --> 00:01:33,670
write and use this shell writing its
prompt the very first

82
00:01:33,670 --> 00:01:33,680
prompt the very first
 

83
00:01:33,680 --> 00:01:35,990
prompt the very first
write that happens after you boot xv6

84
00:01:35,990 --> 00:01:36,000
write that happens after you boot xv6
 

85
00:01:36,000 --> 00:01:37,429
write that happens after you boot xv6
and use the shell trying to write

86
00:01:37,429 --> 00:01:37,439
and use the shell trying to write
 

87
00:01:37,439 --> 00:01:39,990
and use the shell trying to write
make the right system call as an example

88
00:01:39,990 --> 00:01:40,000
make the right system call as an example
 

89
00:01:40,000 --> 00:01:42,230
make the right system call as an example
and so we need to figure out how to

90
00:01:42,230 --> 00:01:42,240
and so we need to figure out how to
 

91
00:01:42,240 --> 00:01:44,469
and so we need to figure out how to
actually get execution to transfer from

92
00:01:44,469 --> 00:01:44,479
actually get execution to transfer from
 

93
00:01:44,479 --> 00:01:45,830
actually get execution to transfer from
running in the show

94
00:01:45,830 --> 00:01:45,840
running in the show
 

95
00:01:45,840 --> 00:01:48,630
running in the show
in user space with user privileges to

96
00:01:48,630 --> 00:01:48,640
in user space with user privileges to
 

97
00:01:48,640 --> 00:01:50,069
in user space with user privileges to
running in the kernel with supervisor

98
00:01:50,069 --> 00:01:50,079
running in the kernel with supervisor
 

99
00:01:50,079 --> 00:01:52,069
running in the kernel with supervisor
privileges

100
00:01:52,069 --> 00:01:52,079
privileges
 

101
00:01:52,079 --> 00:01:54,389
privileges
the state of the hardware is it's going

102
00:01:54,389 --> 00:01:54,399
the state of the hardware is it's going
 

103
00:01:54,399 --> 00:01:55,510
the state of the hardware is it's going
to be very important because a lot of

104
00:01:55,510 --> 00:01:55,520
to be very important because a lot of
 

105
00:01:55,520 --> 00:01:56,950
to be very important because a lot of
what we're doing is kind of

106
00:01:56,950 --> 00:01:56,960
what we're doing is kind of
 

107
00:01:56,960 --> 00:01:59,510
what we're doing is kind of
changing the hardware state from state

108
00:01:59,510 --> 00:01:59,520
changing the hardware state from state
 

109
00:01:59,520 --> 00:02:02,870
changing the hardware state from state
appropriate for running user code to um

110
00:02:02,870 --> 00:02:02,880
appropriate for running user code to um
 

111
00:02:02,880 --> 00:02:04,310
appropriate for running user code to um
state appropriate for running kernel

112
00:02:04,310 --> 00:02:04,320
state appropriate for running kernel
 

113
00:02:04,320 --> 00:02:05,990
state appropriate for running kernel
code

114
00:02:05,990 --> 00:02:06,000
code
 

115
00:02:06,000 --> 00:02:08,869
code
the state that we care about um you know

116
00:02:08,869 --> 00:02:08,879
the state that we care about um you know
 

117
00:02:08,879 --> 00:02:10,869
the state that we care about um you know
the biggest state is maybe the uh

118
00:02:10,869 --> 00:02:10,879
the biggest state is maybe the uh
 

119
00:02:10,879 --> 00:02:14,390
the biggest state is maybe the uh
32 user registers as you remember this

120
00:02:14,390 --> 00:02:14,400
32 user registers as you remember this
 

121
00:02:14,400 --> 00:02:15,430
32 user registers as you remember this
from

122
00:02:15,430 --> 00:02:15,440
from
 

123
00:02:15,440 --> 00:02:17,990
from
monday's discussion we have all the user

124
00:02:17,990 --> 00:02:18,000
monday's discussion we have all the user
 

125
00:02:18,000 --> 00:02:19,990
monday's discussion we have all the user
registers things like a0

126
00:02:19,990 --> 00:02:20,000
registers things like a0
 

127
00:02:20,000 --> 00:02:24,390
registers things like a0
and a1 risk 5 has a whole lot of these

128
00:02:24,390 --> 00:02:24,400
and a1 risk 5 has a whole lot of these
 

129
00:02:24,400 --> 00:02:26,070
and a1 risk 5 has a whole lot of these
32 in total

130
00:02:26,070 --> 00:02:26,080
32 in total
 

131
00:02:26,080 --> 00:02:27,750
32 in total
and we can expect user code to use all

132
00:02:27,750 --> 00:02:27,760
and we can expect user code to use all
 

133
00:02:27,760 --> 00:02:29,190
and we can expect user code to use all
of them right it's going to get the

134
00:02:29,190 --> 00:02:29,200
of them right it's going to get the
 

135
00:02:29,200 --> 00:02:30,790
of them right it's going to get the
highest performance if it uses all of

136
00:02:30,790 --> 00:02:30,800
highest performance if it uses all of
 

137
00:02:30,800 --> 00:02:31,750
highest performance if it uses all of
them

138
00:02:31,750 --> 00:02:31,760
them
 

139
00:02:31,760 --> 00:02:33,430
them
many of them have special purposes a few

140
00:02:33,430 --> 00:02:33,440
many of them have special purposes a few
 

141
00:02:33,440 --> 00:02:34,790
many of them have special purposes a few
which we'll see

142
00:02:34,790 --> 00:02:34,800
which we'll see
 

143
00:02:34,800 --> 00:02:36,470
which we'll see
a particularly interesting one is the

144
00:02:36,470 --> 00:02:36,480
a particularly interesting one is the
 

145
00:02:36,480 --> 00:02:38,550
a particularly interesting one is the
stack pointer is actually one of these

146
00:02:38,550 --> 00:02:38,560
stack pointer is actually one of these
 

147
00:02:38,560 --> 00:02:39,750
stack pointer is actually one of these
32

148
00:02:39,750 --> 00:02:39,760
32
 

149
00:02:39,760 --> 00:02:44,390
32
general purpose registers

150
00:02:44,390 --> 00:02:44,400

 

151
00:02:44,400 --> 00:02:46,309

okay we have these registers including a

152
00:02:46,309 --> 00:02:46,319
okay we have these registers including a
 

153
00:02:46,319 --> 00:02:47,750
okay we have these registers including a
stack pointer

154
00:02:47,750 --> 00:02:47,760
stack pointer
 

155
00:02:47,760 --> 00:02:49,350
stack pointer
there's a separate program counter

156
00:02:49,350 --> 00:02:49,360
there's a separate program counter
 

157
00:02:49,360 --> 00:02:52,710
there's a separate program counter
register in the hardware

158
00:02:52,710 --> 00:02:52,720
register in the hardware
 

159
00:02:52,720 --> 00:02:55,430
register in the hardware
there's the current mode either

160
00:02:55,430 --> 00:02:55,440
there's the current mode either
 

161
00:02:55,440 --> 00:02:57,430
there's the current mode either
supervisor or user and of course it's

162
00:02:57,430 --> 00:02:57,440
supervisor or user and of course it's
 

163
00:02:57,440 --> 00:03:00,309
supervisor or user and of course it's
user mode when we're executing up in the

164
00:03:00,309 --> 00:03:00,319
user mode when we're executing up in the
 

165
00:03:00,319 --> 00:03:03,030
user mode when we're executing up in the
in the shell

166
00:03:03,030 --> 00:03:03,040

 

167
00:03:03,040 --> 00:03:04,630

and then there's a bunch of registers

168
00:03:04,630 --> 00:03:04,640
and then there's a bunch of registers
 

169
00:03:04,640 --> 00:03:06,869
and then there's a bunch of registers
special registers that control

170
00:03:06,869 --> 00:03:06,879
special registers that control
 

171
00:03:06,879 --> 00:03:09,110
special registers that control
how the cpu works like there's the sat p

172
00:03:09,110 --> 00:03:09,120
how the cpu works like there's the sat p
 

173
00:03:09,120 --> 00:03:10,149
how the cpu works like there's the sat p
register that

174
00:03:10,149 --> 00:03:10,159
register that
 

175
00:03:10,159 --> 00:03:13,110
register that
contains a pointer to the page table and

176
00:03:13,110 --> 00:03:13,120
contains a pointer to the page table and
 

177
00:03:13,120 --> 00:03:14,149
contains a pointer to the page table and
it'll turn out there's a couple of

178
00:03:14,149 --> 00:03:14,159
it'll turn out there's a couple of
 

179
00:03:14,159 --> 00:03:15,670
it'll turn out there's a couple of
others that are super important for this

180
00:03:15,670 --> 00:03:15,680
others that are super important for this
 

181
00:03:15,680 --> 00:03:16,550
others that are super important for this
discussion

182
00:03:16,550 --> 00:03:16,560
discussion
 

183
00:03:16,560 --> 00:03:19,990
discussion
there's this st which is

184
00:03:19,990 --> 00:03:20,000
there's this st which is
 

185
00:03:20,000 --> 00:03:22,309
there's this st which is
addressing the instruction that should

186
00:03:22,309 --> 00:03:22,319
addressing the instruction that should
 

187
00:03:22,319 --> 00:03:23,990
addressing the instruction that should
handle traps in the kernel

188
00:03:23,990 --> 00:03:24,000
handle traps in the kernel
 

189
00:03:24,000 --> 00:03:27,910
handle traps in the kernel
um there's a register called scpc for

190
00:03:27,910 --> 00:03:27,920
um there's a register called scpc for
 

191
00:03:27,920 --> 00:03:29,750
um there's a register called scpc for
saving the program counter during a trap

192
00:03:29,750 --> 00:03:29,760
saving the program counter during a trap
 

193
00:03:29,760 --> 00:03:30,229
saving the program counter during a trap
and

194
00:03:30,229 --> 00:03:30,239
and
 

195
00:03:30,239 --> 00:03:32,390
and
we'll see there's another one called s

196
00:03:32,390 --> 00:03:32,400
we'll see there's another one called s
 

197
00:03:32,400 --> 00:03:33,430
we'll see there's another one called s
scratch

198
00:03:33,430 --> 00:03:33,440
scratch
 

199
00:03:33,440 --> 00:03:35,350
scratch
which is also very important so this is

200
00:03:35,350 --> 00:03:35,360
which is also very important so this is
 

201
00:03:35,360 --> 00:03:37,670
which is also very important so this is
the state of the running machine

202
00:03:37,670 --> 00:03:37,680
the state of the running machine
 

203
00:03:37,680 --> 00:03:39,190
the state of the running machine
at the time of the system call and we

204
00:03:39,190 --> 00:03:39,200
at the time of the system call and we
 

205
00:03:39,200 --> 00:03:40,630
at the time of the system call and we
actually need to change a bunch of this

206
00:03:40,630 --> 00:03:40,640
actually need to change a bunch of this
 

207
00:03:40,640 --> 00:03:41,910
actually need to change a bunch of this
state or do things

208
00:03:41,910 --> 00:03:41,920
state or do things
 

209
00:03:41,920 --> 00:03:44,390
state or do things
to the state as part of getting into the

210
00:03:44,390 --> 00:03:44,400
to the state as part of getting into the
 

211
00:03:44,400 --> 00:03:46,229
to the state as part of getting into the
kernel

212
00:03:46,229 --> 00:03:46,239
kernel
 

213
00:03:46,239 --> 00:03:47,830
kernel
and setting ourselves up to run just

214
00:03:47,830 --> 00:03:47,840
and setting ourselves up to run just
 

215
00:03:47,840 --> 00:03:50,229
and setting ourselves up to run just
ordinary c functions in the kernel

216
00:03:50,229 --> 00:03:50,239
ordinary c functions in the kernel
 

217
00:03:50,239 --> 00:03:52,949
ordinary c functions in the kernel
certainly at the instant of the trap all

218
00:03:52,949 --> 00:03:52,959
certainly at the instant of the trap all
 

219
00:03:52,959 --> 00:03:54,550
certainly at the instant of the trap all
the state of the cpu is set up to run

220
00:03:54,550 --> 00:03:54,560
the state of the cpu is set up to run
 

221
00:03:54,560 --> 00:03:55,429
the state of the cpu is set up to run
user code

222
00:03:55,429 --> 00:03:55,439
user code
 

223
00:03:55,439 --> 00:03:58,309
user code
not um not kernel code so the things

224
00:03:58,309 --> 00:03:58,319
not um not kernel code so the things
 

225
00:03:58,319 --> 00:03:58,710
not um not kernel code so the things
that are

226
00:03:58,710 --> 00:03:58,720
that are
 

227
00:03:58,720 --> 00:03:59,990
that are
going to need to happen is kind of a

228
00:03:59,990 --> 00:04:00,000
going to need to happen is kind of a
 

229
00:04:00,000 --> 00:04:02,470
going to need to happen is kind of a
preview of what i'll talk about

230
00:04:02,470 --> 00:04:02,480
preview of what i'll talk about
 

231
00:04:02,480 --> 00:04:05,350
preview of what i'll talk about
one is that we need to save all 32

232
00:04:05,350 --> 00:04:05,360
one is that we need to save all 32
 

233
00:04:05,360 --> 00:04:06,309
one is that we need to save all 32
registers because

234
00:04:06,309 --> 00:04:06,319
registers because
 

235
00:04:06,319 --> 00:04:09,429
registers because
we want to resume the user code

236
00:04:09,429 --> 00:04:09,439
we want to resume the user code
 

237
00:04:09,439 --> 00:04:11,030
we want to resume the user code
transparently

238
00:04:11,030 --> 00:04:11,040
transparently
 

239
00:04:11,040 --> 00:04:12,070
transparently
particularly if there's a device

240
00:04:12,070 --> 00:04:12,080
particularly if there's a device
 

241
00:04:12,080 --> 00:04:13,429
particularly if there's a device
interrupt which the user code isn't

242
00:04:13,429 --> 00:04:13,439
interrupt which the user code isn't
 

243
00:04:13,439 --> 00:04:14,390
interrupt which the user code isn't
expecting

244
00:04:14,390 --> 00:04:14,400
expecting
 

245
00:04:14,400 --> 00:04:15,350
expecting
and we want to be able to have the

246
00:04:15,350 --> 00:04:15,360
and we want to be able to have the
 

247
00:04:15,360 --> 00:04:17,590
and we want to be able to have the
kernel serve the interrupt and then

248
00:04:17,590 --> 00:04:17,600
kernel serve the interrupt and then
 

249
00:04:17,600 --> 00:04:19,430
kernel serve the interrupt and then
resume the user code without ever

250
00:04:19,430 --> 00:04:19,440
resume the user code without ever
 

251
00:04:19,440 --> 00:04:20,870
resume the user code without ever
noticing any difference and that means

252
00:04:20,870 --> 00:04:20,880
noticing any difference and that means
 

253
00:04:20,880 --> 00:04:22,390
noticing any difference and that means
that these 32 registers can't be

254
00:04:22,390 --> 00:04:22,400
that these 32 registers can't be
 

255
00:04:22,400 --> 00:04:23,990
that these 32 registers can't be
disturbed by the kernel

256
00:04:23,990 --> 00:04:24,000
disturbed by the kernel
 

257
00:04:24,000 --> 00:04:25,990
disturbed by the kernel
which and since the kernel needs to use

258
00:04:25,990 --> 00:04:26,000
which and since the kernel needs to use
 

259
00:04:26,000 --> 00:04:27,590
which and since the kernel needs to use
the registers it has to save them all

260
00:04:27,590 --> 00:04:27,600
the registers it has to save them all
 

261
00:04:27,600 --> 00:04:27,990
the registers it has to save them all
somewhere

262
00:04:27,990 --> 00:04:28,000
somewhere
 

263
00:04:28,000 --> 00:04:31,110
somewhere
first these need to be saved um the

264
00:04:31,110 --> 00:04:31,120
first these need to be saved um the
 

265
00:04:31,120 --> 00:04:32,710
first these need to be saved um the
program counter also needs to be saved

266
00:04:32,710 --> 00:04:32,720
program counter also needs to be saved
 

267
00:04:32,720 --> 00:04:33,270
program counter also needs to be saved
somewhere

268
00:04:33,270 --> 00:04:33,280
somewhere
 

269
00:04:33,280 --> 00:04:35,430
somewhere
because we need to you know it's a user

270
00:04:35,430 --> 00:04:35,440
because we need to you know it's a user
 

271
00:04:35,440 --> 00:04:37,670
because we need to you know it's a user
it's almost like a user register so

272
00:04:37,670 --> 00:04:37,680
it's almost like a user register so
 

273
00:04:37,680 --> 00:04:39,670
it's almost like a user register so
we need to continue executing the user

274
00:04:39,670 --> 00:04:39,680
we need to continue executing the user
 

275
00:04:39,680 --> 00:04:41,110
we need to continue executing the user
program where it left off

276
00:04:41,110 --> 00:04:41,120
program where it left off
 

277
00:04:41,120 --> 00:04:43,430
program where it left off
we need to switch the mode to supervisor

278
00:04:43,430 --> 00:04:43,440
we need to switch the mode to supervisor
 

279
00:04:43,440 --> 00:04:45,670
we need to switch the mode to supervisor
mode

280
00:04:45,670 --> 00:04:45,680
mode
 

281
00:04:45,680 --> 00:04:46,790
mode
because we need to use various

282
00:04:46,790 --> 00:04:46,800
because we need to use various
 

283
00:04:46,800 --> 00:04:49,350
because we need to use various
privileges in the kernel

284
00:04:49,350 --> 00:04:49,360
privileges in the kernel
 

285
00:04:49,360 --> 00:04:52,550
privileges in the kernel
this page table pointer is currently

286
00:04:52,550 --> 00:04:52,560
this page table pointer is currently
 

287
00:04:52,560 --> 00:04:54,390
this page table pointer is currently
pointing towards the user page table

288
00:04:54,390 --> 00:04:54,400
pointing towards the user page table
 

289
00:04:54,400 --> 00:04:57,430
pointing towards the user page table
which only contains just the mappings

290
00:04:57,430 --> 00:04:57,440
which only contains just the mappings
 

291
00:04:57,440 --> 00:04:59,430
which only contains just the mappings
that user programs need

292
00:04:59,430 --> 00:04:59,440
that user programs need
 

293
00:04:59,440 --> 00:05:01,189
that user programs need
plus one or two more as we'll see but

294
00:05:01,189 --> 00:05:01,199
plus one or two more as we'll see but
 

295
00:05:01,199 --> 00:05:03,110
plus one or two more as we'll see but
the user page table does not contain the

296
00:05:03,110 --> 00:05:03,120
the user page table does not contain the
 

297
00:05:03,120 --> 00:05:05,189
the user page table does not contain the
mappings for the bulk of the kernel data

298
00:05:05,189 --> 00:05:05,199
mappings for the bulk of the kernel data
 

299
00:05:05,199 --> 00:05:06,950
mappings for the bulk of the kernel data
so we need to switch page tables before

300
00:05:06,950 --> 00:05:06,960
so we need to switch page tables before
 

301
00:05:06,960 --> 00:05:10,469
so we need to switch page tables before
we can run most kernel code

302
00:05:10,469 --> 00:05:10,479
we can run most kernel code
 

303
00:05:10,479 --> 00:05:12,230
we can run most kernel code
we need to switch the stack pointer to

304
00:05:12,230 --> 00:05:12,240
we need to switch the stack pointer to
 

305
00:05:12,240 --> 00:05:13,830
we need to switch the stack pointer to
point to a stack that's in the kernel

306
00:05:13,830 --> 00:05:13,840
point to a stack that's in the kernel
 

307
00:05:13,840 --> 00:05:14,710
point to a stack that's in the kernel
somewhere because

308
00:05:14,710 --> 00:05:14,720
somewhere because
 

309
00:05:14,720 --> 00:05:19,749
somewhere because
we need a stack to call c functions on

310
00:05:19,749 --> 00:05:19,759

 

311
00:05:19,759 --> 00:05:21,909

and finally we need to jump into once

312
00:05:21,909 --> 00:05:21,919
and finally we need to jump into once
 

313
00:05:21,919 --> 00:05:23,430
and finally we need to jump into once
we've set all this up and switched all

314
00:05:23,430 --> 00:05:23,440
we've set all this up and switched all
 

315
00:05:23,440 --> 00:05:25,510
we've set all this up and switched all
this all these resources to be

316
00:05:25,510 --> 00:05:25,520
this all these resources to be
 

317
00:05:25,520 --> 00:05:27,909
this all these resources to be
appropriate for use in the kernel we

318
00:05:27,909 --> 00:05:27,919
appropriate for use in the kernel we
 

319
00:05:27,919 --> 00:05:28,790
appropriate for use in the kernel we
need to jump to

320
00:05:28,790 --> 00:05:28,800
need to jump to
 

321
00:05:28,800 --> 00:05:32,550
need to jump to
kernel c code and once we're in c code

322
00:05:32,550 --> 00:05:32,560
kernel c code and once we're in c code
 

323
00:05:32,560 --> 00:05:36,230
kernel c code and once we're in c code
life is much more sort of business as

324
00:05:36,230 --> 00:05:36,240
life is much more sort of business as
 

325
00:05:36,240 --> 00:05:37,270
life is much more sort of business as
usual we're just running

326
00:05:37,270 --> 00:05:37,280
usual we're just running
 

327
00:05:37,280 --> 00:05:39,830
usual we're just running
a c program in this kernel um and so for

328
00:05:39,830 --> 00:05:39,840
a c program in this kernel um and so for
 

329
00:05:39,840 --> 00:05:40,870
a c program in this kernel um and so for
today at least we'll

330
00:05:40,870 --> 00:05:40,880
today at least we'll
 

331
00:05:40,880 --> 00:05:43,510
today at least we'll
we'll talk about what the kernel does in

332
00:05:43,510 --> 00:05:43,520
we'll talk about what the kernel does in
 

333
00:05:43,520 --> 00:05:44,629
we'll talk about what the kernel does in
the c code later

334
00:05:44,629 --> 00:05:44,639
the c code later
 

335
00:05:44,639 --> 00:05:46,710
the c code later
but today the discussion is really how

336
00:05:46,710 --> 00:05:46,720
but today the discussion is really how
 

337
00:05:46,720 --> 00:05:48,390
but today the discussion is really how
to get from user space into the kernel

338
00:05:48,390 --> 00:05:48,400
to get from user space into the kernel
 

339
00:05:48,400 --> 00:05:51,029
to get from user space into the kernel
into a position where we can run

340
00:05:51,029 --> 00:05:51,039
into a position where we can run
 

341
00:05:51,039 --> 00:05:54,469
into a position where we can run
c code in the kernel there's a couple of

342
00:05:54,469 --> 00:05:54,479
c code in the kernel there's a couple of
 

343
00:05:54,479 --> 00:05:56,150
c code in the kernel there's a couple of
high level goals that can strain

344
00:05:56,150 --> 00:05:56,160
high level goals that can strain
 

345
00:05:56,160 --> 00:05:59,430
high level goals that can strain
our design options for this one is that

346
00:05:59,430 --> 00:05:59,440
our design options for this one is that
 

347
00:05:59,440 --> 00:06:01,270
our design options for this one is that
for security and isolation we really

348
00:06:01,270 --> 00:06:01,280
for security and isolation we really
 

349
00:06:01,280 --> 00:06:02,950
for security and isolation we really
don't want to let user code

350
00:06:02,950 --> 00:06:02,960
don't want to let user code
 

351
00:06:02,960 --> 00:06:05,430
don't want to let user code
interfere with this user kernel

352
00:06:05,430 --> 00:06:05,440
interfere with this user kernel
 

353
00:06:05,440 --> 00:06:06,070
interfere with this user kernel
transition

354
00:06:06,070 --> 00:06:06,080
transition
 

355
00:06:06,080 --> 00:06:07,510
transition
in a way that could be damaging to

356
00:06:07,510 --> 00:06:07,520
in a way that could be damaging to
 

357
00:06:07,520 --> 00:06:10,070
in a way that could be damaging to
security and so that means that

358
00:06:10,070 --> 00:06:10,080
security and so that means that
 

359
00:06:10,080 --> 00:06:12,870
security and so that means that
the sort of hardware and kernel

360
00:06:12,870 --> 00:06:12,880
the sort of hardware and kernel
 

361
00:06:12,880 --> 00:06:14,790
the sort of hardware and kernel
mechanisms that are involved in traps

362
00:06:14,790 --> 00:06:14,800
mechanisms that are involved in traps
 

363
00:06:14,800 --> 00:06:17,110
mechanisms that are involved in traps
really can't count on anything from user

364
00:06:17,110 --> 00:06:17,120
really can't count on anything from user
 

365
00:06:17,120 --> 00:06:17,830
really can't count on anything from user
space

366
00:06:17,830 --> 00:06:17,840
space
 

367
00:06:17,840 --> 00:06:19,590
space
you know we can't assume anything about

368
00:06:19,590 --> 00:06:19,600
you know we can't assume anything about
 

369
00:06:19,600 --> 00:06:20,950
you know we can't assume anything about
these registers they could be just

370
00:06:20,950 --> 00:06:20,960
these registers they could be just
 

371
00:06:20,960 --> 00:06:23,430
these registers they could be just
filled with terribly malicious values

372
00:06:23,430 --> 00:06:23,440
filled with terribly malicious values
 

373
00:06:23,440 --> 00:06:26,150
filled with terribly malicious values
um so basically the xp6 scrap handler

374
00:06:26,150 --> 00:06:26,160
um so basically the xp6 scrap handler
 

375
00:06:26,160 --> 00:06:27,430
um so basically the xp6 scrap handler
doesn't really even look at these

376
00:06:27,430 --> 00:06:27,440
doesn't really even look at these
 

377
00:06:27,440 --> 00:06:31,189
doesn't really even look at these
registers it just saves them away um

378
00:06:31,189 --> 00:06:31,199
registers it just saves them away um
 

379
00:06:31,199 --> 00:06:33,430
registers it just saves them away um
so okay so we're going to want to be

380
00:06:33,430 --> 00:06:33,440
so okay so we're going to want to be
 

381
00:06:33,440 --> 00:06:34,230
so okay so we're going to want to be
careful

382
00:06:34,230 --> 00:06:34,240
careful
 

383
00:06:34,240 --> 00:06:35,909
careful
to preserve isolation during this trap

384
00:06:35,909 --> 00:06:35,919
to preserve isolation during this trap
 

385
00:06:35,919 --> 00:06:37,270
to preserve isolation during this trap
mechanism against

386
00:06:37,270 --> 00:06:37,280
mechanism against
 

387
00:06:37,280 --> 00:06:40,150
mechanism against
intentionally malicious user code and

388
00:06:40,150 --> 00:06:40,160
intentionally malicious user code and
 

389
00:06:40,160 --> 00:06:41,430
intentionally malicious user code and
the other thing that's important

390
00:06:41,430 --> 00:06:41,440
the other thing that's important
 

391
00:06:41,440 --> 00:06:43,510
the other thing that's important
is that we want to be transparent to

392
00:06:43,510 --> 00:06:43,520
is that we want to be transparent to
 

393
00:06:43,520 --> 00:06:45,510
is that we want to be transparent to
user code we'd like to be able to

394
00:06:45,510 --> 00:06:45,520
user code we'd like to be able to
 

395
00:06:45,520 --> 00:06:47,110
user code we'd like to be able to
take the trap and do our business in the

396
00:06:47,110 --> 00:06:47,120
take the trap and do our business in the
 

397
00:06:47,120 --> 00:06:49,189
take the trap and do our business in the
kernel and resume the user code without

398
00:06:49,189 --> 00:06:49,199
kernel and resume the user code without
 

399
00:06:49,199 --> 00:06:50,790
kernel and resume the user code without
it ever having to notice that anything

400
00:06:50,790 --> 00:06:50,800
it ever having to notice that anything
 

401
00:06:50,800 --> 00:06:51,990
it ever having to notice that anything
funny happened

402
00:06:51,990 --> 00:06:52,000
funny happened
 

403
00:06:52,000 --> 00:06:53,189
funny happened
and that's just to make it easier to

404
00:06:53,189 --> 00:06:53,199
and that's just to make it easier to
 

405
00:06:53,199 --> 00:06:56,710
and that's just to make it easier to
write user code

406
00:06:56,710 --> 00:06:56,720

 

407
00:06:56,720 --> 00:07:00,309

and something to note we care about

408
00:07:00,309 --> 00:07:00,319
and something to note we care about
 

409
00:07:00,319 --> 00:07:02,150
and something to note we care about
isolation security here today we're just

410
00:07:02,150 --> 00:07:02,160
isolation security here today we're just
 

411
00:07:02,160 --> 00:07:04,790
isolation security here today we're just
going to talk about the

412
00:07:04,790 --> 00:07:04,800
going to talk about the
 

413
00:07:04,800 --> 00:07:06,309
going to talk about the
sort of aspect of security that involves

414
00:07:06,309 --> 00:07:06,319
sort of aspect of security that involves
 

415
00:07:06,319 --> 00:07:08,309
sort of aspect of security that involves
getting into the kernel but of course

416
00:07:08,309 --> 00:07:08,319
getting into the kernel but of course
 

417
00:07:08,319 --> 00:07:09,909
getting into the kernel but of course
the system called implementations you

418
00:07:09,909 --> 00:07:09,919
the system called implementations you
 

419
00:07:09,919 --> 00:07:11,909
the system called implementations you
know the actual right implementation in

420
00:07:11,909 --> 00:07:11,919
know the actual right implementation in
 

421
00:07:11,919 --> 00:07:12,950
know the actual right implementation in
the kernel

422
00:07:12,950 --> 00:07:12,960
the kernel
 

423
00:07:12,960 --> 00:07:14,710
the kernel
also everything in the kernel has to be

424
00:07:14,710 --> 00:07:14,720
also everything in the kernel has to be
 

425
00:07:14,720 --> 00:07:16,390
also everything in the kernel has to be
careful has to be written carefully and

426
00:07:16,390 --> 00:07:16,400
careful has to be written carefully and
 

427
00:07:16,400 --> 00:07:18,390
careful has to be written carefully and
securely also

428
00:07:18,390 --> 00:07:18,400
securely also
 

429
00:07:18,400 --> 00:07:21,189
securely also
so even if this transition into the

430
00:07:21,189 --> 00:07:21,199
so even if this transition into the
 

431
00:07:21,199 --> 00:07:21,830
so even if this transition into the
kernel is

432
00:07:21,830 --> 00:07:21,840
kernel is
 

433
00:07:21,840 --> 00:07:23,589
kernel is
perfectly secure the whole rest of the

434
00:07:23,589 --> 00:07:23,599
perfectly secure the whole rest of the
 

435
00:07:23,599 --> 00:07:24,870
perfectly secure the whole rest of the
kernel has to be

436
00:07:24,870 --> 00:07:24,880
kernel has to be
 

437
00:07:24,880 --> 00:07:26,790
kernel has to be
written securely and sort of mindful

438
00:07:26,790 --> 00:07:26,800
written securely and sort of mindful
 

439
00:07:26,800 --> 00:07:31,909
written securely and sort of mindful
that user code may be trying to trick it

440
00:07:31,909 --> 00:07:31,919

 

441
00:07:31,919 --> 00:07:33,830

a particularly important thing i want to

442
00:07:33,830 --> 00:07:33,840
a particularly important thing i want to
 

443
00:07:33,840 --> 00:07:36,150
a particularly important thing i want to
talk about is what it is that the mode

444
00:07:36,150 --> 00:07:36,160
talk about is what it is that the mode
 

445
00:07:36,160 --> 00:07:39,189
talk about is what it is that the mode
flag controls

446
00:07:39,189 --> 00:07:39,199
flag controls
 

447
00:07:39,199 --> 00:07:41,270
flag controls
this mode is either user or supervisor

448
00:07:41,270 --> 00:07:41,280
this mode is either user or supervisor
 

449
00:07:41,280 --> 00:07:42,710
this mode is either user or supervisor
of course it's user

450
00:07:42,710 --> 00:07:42,720
of course it's user
 

451
00:07:42,720 --> 00:07:44,790
of course it's user
when we're up in user space and the mode

452
00:07:44,790 --> 00:07:44,800
when we're up in user space and the mode
 

453
00:07:44,800 --> 00:07:46,230
when we're up in user space and the mode
flag is set to supervisor when we're

454
00:07:46,230 --> 00:07:46,240
flag is set to supervisor when we're
 

455
00:07:46,240 --> 00:07:47,589
flag is set to supervisor when we're
executing in the kernel

456
00:07:47,589 --> 00:07:47,599
executing in the kernel
 

457
00:07:47,599 --> 00:07:50,710
executing in the kernel
but it's important to know exactly what

458
00:07:50,710 --> 00:07:50,720
but it's important to know exactly what
 

459
00:07:50,720 --> 00:07:53,670
but it's important to know exactly what
privileges we gain by changing the mode

460
00:07:53,670 --> 00:07:53,680
privileges we gain by changing the mode
 

461
00:07:53,680 --> 00:07:55,189
privileges we gain by changing the mode
from user to supervisor

462
00:07:55,189 --> 00:07:55,199
from user to supervisor
 

463
00:07:55,199 --> 00:07:58,309
from user to supervisor
and it turns out these extra privileges

464
00:07:58,309 --> 00:07:58,319
and it turns out these extra privileges
 

465
00:07:58,319 --> 00:07:59,029
and it turns out these extra privileges
are

466
00:07:59,029 --> 00:07:59,039
are
 

467
00:07:59,039 --> 00:08:01,830
are
fairly restrictive that is what you can

468
00:08:01,830 --> 00:08:01,840
fairly restrictive that is what you can
 

469
00:08:01,840 --> 00:08:03,749
fairly restrictive that is what you can
do in supervisor mode that you couldn't

470
00:08:03,749 --> 00:08:03,759
do in supervisor mode that you couldn't
 

471
00:08:03,759 --> 00:08:05,830
do in supervisor mode that you couldn't
do in user mode

472
00:08:05,830 --> 00:08:05,840
do in user mode
 

473
00:08:05,840 --> 00:08:09,830
do in user mode
is not maybe as

474
00:08:09,830 --> 00:08:09,840

 

475
00:08:09,840 --> 00:08:11,189

privileged as you might think so this is

476
00:08:11,189 --> 00:08:11,199
privileged as you might think so this is
 

477
00:08:11,199 --> 00:08:13,830
privileged as you might think so this is
supervisor mode like exactly what it

478
00:08:13,830 --> 00:08:13,840
supervisor mode like exactly what it
 

479
00:08:13,840 --> 00:08:17,110
supervisor mode like exactly what it
controls

480
00:08:17,110 --> 00:08:17,120

 

481
00:08:17,120 --> 00:08:19,909

one thing it does is you can now read

482
00:08:19,909 --> 00:08:19,919
one thing it does is you can now read
 

483
00:08:19,919 --> 00:08:20,629
one thing it does is you can now read
and write

484
00:08:20,629 --> 00:08:20,639
and write
 

485
00:08:20,639 --> 00:08:25,029
and write
the control registers and

486
00:08:25,029 --> 00:08:25,039
the control registers and
 

487
00:08:25,039 --> 00:08:26,710
the control registers and
that is if if you're in supervisor mode

488
00:08:26,710 --> 00:08:26,720
that is if if you're in supervisor mode
 

489
00:08:26,720 --> 00:08:29,029
that is if if you're in supervisor mode
you can read and write sat p

490
00:08:29,029 --> 00:08:29,039
you can read and write sat p
 

491
00:08:29,039 --> 00:08:31,270
you can read and write sat p
uh the page table pointer this st vac

492
00:08:31,270 --> 00:08:31,280
uh the page table pointer this st vac
 

493
00:08:31,280 --> 00:08:32,870
uh the page table pointer this st vac
pointer which controls

494
00:08:32,870 --> 00:08:32,880
pointer which controls
 

495
00:08:32,880 --> 00:08:35,990
pointer which controls
where traps go in the kernel um

496
00:08:35,990 --> 00:08:36,000
where traps go in the kernel um
 

497
00:08:36,000 --> 00:08:37,909
where traps go in the kernel um
this register that holds the save

498
00:08:37,909 --> 00:08:37,919
this register that holds the save
 

499
00:08:37,919 --> 00:08:39,589
this register that holds the save
program counter during a trap in this

500
00:08:39,589 --> 00:08:39,599
program counter during a trap in this
 

501
00:08:39,599 --> 00:08:42,870
program counter during a trap in this
s scratch register plus a few others

502
00:08:42,870 --> 00:08:42,880
s scratch register plus a few others
 

503
00:08:42,880 --> 00:08:44,230
s scratch register plus a few others
so supervisor couldn't read and write

504
00:08:44,230 --> 00:08:44,240
so supervisor couldn't read and write
 

505
00:08:44,240 --> 00:08:46,870
so supervisor couldn't read and write
these registers and user code could not

506
00:08:46,870 --> 00:08:46,880
these registers and user code could not
 

507
00:08:46,880 --> 00:08:48,870
these registers and user code could not
the only other thing supervisor code can

508
00:08:48,870 --> 00:08:48,880
the only other thing supervisor code can
 

509
00:08:48,880 --> 00:08:50,470
the only other thing supervisor code can
do is

510
00:08:50,470 --> 00:08:50,480
do is
 

511
00:08:50,480 --> 00:08:55,829
do is
it can use pte's

512
00:08:55,829 --> 00:08:55,839
it can use pte's
 

513
00:08:55,839 --> 00:08:59,030
it can use pte's
that have the pteu flag set

514
00:08:59,030 --> 00:08:59,040
that have the pteu flag set
 

515
00:08:59,040 --> 00:09:00,150
that have the pteu flag set
i don't know if you remember but there's

516
00:09:00,150 --> 00:09:00,160
i don't know if you remember but there's
 

517
00:09:00,160 --> 00:09:02,710
i don't know if you remember but there's
this ptu flag to be set or not said in

518
00:09:02,710 --> 00:09:02,720
this ptu flag to be set or not said in
 

519
00:09:02,720 --> 00:09:03,110
this ptu flag to be set or not said in
each

520
00:09:03,110 --> 00:09:03,120
each
 

521
00:09:03,120 --> 00:09:06,630
each
page table entry a flag

522
00:09:06,630 --> 00:09:06,640
page table entry a flag
 

523
00:09:06,640 --> 00:09:09,910
page table entry a flag
that has this sorry sorry

524
00:09:09,910 --> 00:09:09,920
that has this sorry sorry
 

525
00:09:09,920 --> 00:09:13,190
that has this sorry sorry
you can use ptes that

526
00:09:13,190 --> 00:09:13,200
you can use ptes that
 

527
00:09:13,200 --> 00:09:16,630
you can use ptes that
don't have the ptu flag set if the pteu

528
00:09:16,630 --> 00:09:16,640
don't have the ptu flag set if the pteu
 

529
00:09:16,640 --> 00:09:18,630
don't have the ptu flag set if the pteu
flag is set it means that user code can

530
00:09:18,630 --> 00:09:18,640
flag is set it means that user code can
 

531
00:09:18,640 --> 00:09:20,550
flag is set it means that user code can
use that page table entry

532
00:09:20,550 --> 00:09:20,560
use that page table entry
 

533
00:09:20,560 --> 00:09:22,230
use that page table entry
if this flag isn't set in a page table

534
00:09:22,230 --> 00:09:22,240
if this flag isn't set in a page table
 

535
00:09:22,240 --> 00:09:23,590
if this flag isn't set in a page table
entry it means only

536
00:09:23,590 --> 00:09:23,600
entry it means only
 

537
00:09:23,600 --> 00:09:26,710
entry it means only
supervisor mode can use it um and you

538
00:09:26,710 --> 00:09:26,720
supervisor mode can use it um and you
 

539
00:09:26,720 --> 00:09:26,949
supervisor mode can use it um and you
know

540
00:09:26,949 --> 00:09:26,959
know
 

541
00:09:26,959 --> 00:09:28,710
know
we'll see that's important in a little

542
00:09:28,710 --> 00:09:28,720
we'll see that's important in a little
 

543
00:09:28,720 --> 00:09:29,990
we'll see that's important in a little
bit but

544
00:09:29,990 --> 00:09:30,000
bit but
 

545
00:09:30,000 --> 00:09:31,430
bit but
um these are really the only things that

546
00:09:31,430 --> 00:09:31,440
um these are really the only things that
 

547
00:09:31,440 --> 00:09:32,790
um these are really the only things that
supervisor mode can do it can't do

548
00:09:32,790 --> 00:09:32,800
supervisor mode can do it can't do
 

549
00:09:32,800 --> 00:09:35,509
supervisor mode can do it can't do
anything else in particular for example

550
00:09:35,509 --> 00:09:35,519
anything else in particular for example
 

551
00:09:35,519 --> 00:09:38,550
anything else in particular for example
supervisor mode code can't just

552
00:09:38,550 --> 00:09:38,560
supervisor mode code can't just
 

553
00:09:38,560 --> 00:09:41,509
supervisor mode code can't just
read and write arbitrary addresses say

554
00:09:41,509 --> 00:09:41,519
read and write arbitrary addresses say
 

555
00:09:41,519 --> 00:09:42,470
read and write arbitrary addresses say
physical addresses

556
00:09:42,470 --> 00:09:42,480
physical addresses
 

557
00:09:42,480 --> 00:09:45,350
physical addresses
no supervisor mode is forced to go

558
00:09:45,350 --> 00:09:45,360
no supervisor mode is forced to go
 

559
00:09:45,360 --> 00:09:46,310
no supervisor mode is forced to go
through the page table

560
00:09:46,310 --> 00:09:46,320
through the page table
 

561
00:09:46,320 --> 00:09:48,550
through the page table
just like any other code if a virtual

562
00:09:48,550 --> 00:09:48,560
just like any other code if a virtual
 

563
00:09:48,560 --> 00:09:49,990
just like any other code if a virtual
address isn't in the page

564
00:09:49,990 --> 00:09:50,000
address isn't in the page
 

565
00:09:50,000 --> 00:09:51,350
address isn't in the page
isn't it in the current page table

566
00:09:51,350 --> 00:09:51,360
isn't it in the current page table
 

567
00:09:51,360 --> 00:09:53,030
isn't it in the current page table
pointed to by sat p

568
00:09:53,030 --> 00:09:53,040
pointed to by sat p
 

569
00:09:53,040 --> 00:09:56,310
pointed to by sat p
um or if it has the pteu bit flag

570
00:09:56,310 --> 00:09:56,320
um or if it has the pteu bit flag
 

571
00:09:56,320 --> 00:09:58,470
um or if it has the pteu bit flag
set which means it's the user ppe then

572
00:09:58,470 --> 00:09:58,480
set which means it's the user ppe then
 

573
00:09:58,480 --> 00:09:59,670
set which means it's the user ppe then
supervisor mode code

574
00:09:59,670 --> 00:09:59,680
supervisor mode code
 

575
00:09:59,680 --> 00:10:02,949
supervisor mode code
cannot use that address so we're even

576
00:10:02,949 --> 00:10:02,959
cannot use that address so we're even
 

577
00:10:02,959 --> 00:10:05,269
cannot use that address so we're even
in supervisor mode were restricted to

578
00:10:05,269 --> 00:10:05,279
in supervisor mode were restricted to
 

579
00:10:05,279 --> 00:10:06,389
in supervisor mode were restricted to
whatever

580
00:10:06,389 --> 00:10:06,399
whatever
 

581
00:10:06,399 --> 00:10:08,790
whatever
virtual address virtual addresses were

582
00:10:08,790 --> 00:10:08,800
virtual address virtual addresses were
 

583
00:10:08,800 --> 00:10:12,150
virtual address virtual addresses were
set up in the current page table

584
00:10:12,150 --> 00:10:12,160
set up in the current page table
 

585
00:10:12,160 --> 00:10:15,110
set up in the current page table
um and that's it so we're just allowed

586
00:10:15,110 --> 00:10:15,120
um and that's it so we're just allowed
 

587
00:10:15,120 --> 00:10:17,190
um and that's it so we're just allowed
to do these things so you know we'll see

588
00:10:17,190 --> 00:10:17,200
to do these things so you know we'll see
 

589
00:10:17,200 --> 00:10:20,870
to do these things so you know we'll see
as a significant constraint on what the

590
00:10:20,870 --> 00:10:20,880
as a significant constraint on what the
 

591
00:10:20,880 --> 00:10:24,069
as a significant constraint on what the
trap code can do when we're entering the

592
00:10:24,069 --> 00:10:24,079
trap code can do when we're entering the
 

593
00:10:24,079 --> 00:10:25,190
trap code can do when we're entering the
kernel

594
00:10:25,190 --> 00:10:25,200
kernel
 

595
00:10:25,200 --> 00:10:27,350
kernel
can't do just anything i'm going to

596
00:10:27,350 --> 00:10:27,360
can't do just anything i'm going to
 

597
00:10:27,360 --> 00:10:28,310
can't do just anything i'm going to
preview a bit

598
00:10:28,310 --> 00:10:28,320
preview a bit
 

599
00:10:28,320 --> 00:10:30,949
preview a bit
i'm going to spend most of this lecture

600
00:10:30,949 --> 00:10:30,959
i'm going to spend most of this lecture
 

601
00:10:30,959 --> 00:10:32,710
i'm going to spend most of this lecture
in gdb

602
00:10:32,710 --> 00:10:32,720
in gdb
 

603
00:10:32,720 --> 00:10:35,509
in gdb
actually tracing through the execution

604
00:10:35,509 --> 00:10:35,519
actually tracing through the execution
 

605
00:10:35,519 --> 00:10:36,310
actually tracing through the execution
of

606
00:10:36,310 --> 00:10:36,320
of
 

607
00:10:36,320 --> 00:10:39,750
of
a trap entry into the kernel in return

608
00:10:39,750 --> 00:10:39,760
a trap entry into the kernel in return
 

609
00:10:39,760 --> 00:10:45,269
a trap entry into the kernel in return
this can be a lot of details in order to

610
00:10:45,269 --> 00:10:45,279

 

611
00:10:45,279 --> 00:10:48,949

uh maybe sort of help you

612
00:10:48,949 --> 00:10:48,959
uh maybe sort of help you
 

613
00:10:48,959 --> 00:10:51,430
uh maybe sort of help you
see ahead to what's coming we're going

614
00:10:51,430 --> 00:10:51,440
see ahead to what's coming we're going
 

615
00:10:51,440 --> 00:10:53,030
see ahead to what's coming we're going
to be

616
00:10:53,030 --> 00:10:53,040
to be
 

617
00:10:53,040 --> 00:10:56,230
to be
tracing the shells call to

618
00:10:56,230 --> 00:10:56,240
tracing the shells call to
 

619
00:10:56,240 --> 00:10:57,990
tracing the shells call to
right which from the shell's point of

620
00:10:57,990 --> 00:10:58,000
right which from the shell's point of
 

621
00:10:58,000 --> 00:10:59,990
right which from the shell's point of
view is just a c function call as part

622
00:10:59,990 --> 00:11:00,000
view is just a c function call as part
 

623
00:11:00,000 --> 00:11:01,829
view is just a c function call as part
of the shell

624
00:11:01,829 --> 00:11:01,839
of the shell
 

625
00:11:01,839 --> 00:11:04,470
of the shell
in fact wright makes this uh might

626
00:11:04,470 --> 00:11:04,480
in fact wright makes this uh might
 

627
00:11:04,480 --> 00:11:05,829
in fact wright makes this uh might
that's use the system call

628
00:11:05,829 --> 00:11:05,839
that's use the system call
 

629
00:11:05,839 --> 00:11:09,750
that's use the system call
by issuing the e-call instruction

630
00:11:09,750 --> 00:11:09,760

 

631
00:11:09,760 --> 00:11:12,630

which switches into the kernel which is

632
00:11:12,630 --> 00:11:12,640
which switches into the kernel which is
 

633
00:11:12,640 --> 00:11:14,389
which switches into the kernel which is
a supervisor mode where that goes

634
00:11:14,389 --> 00:11:14,399
a supervisor mode where that goes
 

635
00:11:14,399 --> 00:11:16,230
a supervisor mode where that goes
immediately that is the very first

636
00:11:16,230 --> 00:11:16,240
immediately that is the very first
 

637
00:11:16,240 --> 00:11:18,069
immediately that is the very first
instruction that's executed in the

638
00:11:18,069 --> 00:11:18,079
instruction that's executed in the
 

639
00:11:18,079 --> 00:11:20,150
instruction that's executed in the
kernel in supervisor mode

640
00:11:20,150 --> 00:11:20,160
kernel in supervisor mode
 

641
00:11:20,160 --> 00:11:22,550
kernel in supervisor mode
is in a function written in assembler

642
00:11:22,550 --> 00:11:22,560
is in a function written in assembler
 

643
00:11:22,560 --> 00:11:23,829
is in a function written in assembler
called

644
00:11:23,829 --> 00:11:23,839
called
 

645
00:11:23,839 --> 00:11:27,430
called
userback and this is in the

646
00:11:27,430 --> 00:11:27,440
userback and this is in the
 

647
00:11:27,440 --> 00:11:33,269
userback and this is in the
part of the trampoline um

648
00:11:33,269 --> 00:11:33,279

 

649
00:11:33,279 --> 00:11:36,069

uh in trampoline.s in the kernel source

650
00:11:36,069 --> 00:11:36,079
uh in trampoline.s in the kernel source
 

651
00:11:36,079 --> 00:11:37,750
uh in trampoline.s in the kernel source
so the very first code that's executed

652
00:11:37,750 --> 00:11:37,760
so the very first code that's executed
 

653
00:11:37,760 --> 00:11:38,790
so the very first code that's executed
is this uservec

654
00:11:38,790 --> 00:11:38,800
is this uservec
 

655
00:11:38,800 --> 00:11:43,110
is this uservec
assembler function um then next

656
00:11:43,110 --> 00:11:43,120
assembler function um then next
 

657
00:11:43,120 --> 00:11:44,870
assembler function um then next
the that assembler function jumps into c

658
00:11:44,870 --> 00:11:44,880
the that assembler function jumps into c
 

659
00:11:44,880 --> 00:11:46,790
the that assembler function jumps into c
code in particular a function called

660
00:11:46,790 --> 00:11:46,800
code in particular a function called
 

661
00:11:46,800 --> 00:11:48,230
code in particular a function called
usertrap

662
00:11:48,230 --> 00:11:48,240
usertrap
 

663
00:11:48,240 --> 00:11:51,750
usertrap
in trap.c um and now we're

664
00:11:51,750 --> 00:11:51,760
in trap.c um and now we're
 

665
00:11:51,760 --> 00:11:54,150
in trap.c um and now we're
getting it to c code so things are much

666
00:11:54,150 --> 00:11:54,160
getting it to c code so things are much
 

667
00:11:54,160 --> 00:11:55,430
getting it to c code so things are much
easier to understand

668
00:11:55,430 --> 00:11:55,440
easier to understand
 

669
00:11:55,440 --> 00:11:57,750
easier to understand
user trap sees oh we're executing a

670
00:11:57,750 --> 00:11:57,760
user trap sees oh we're executing a
 

671
00:11:57,760 --> 00:11:58,870
user trap sees oh we're executing a
system call

672
00:11:58,870 --> 00:11:58,880
system call
 

673
00:11:58,880 --> 00:12:02,710
system call
and it calls a function called syscall

674
00:12:02,710 --> 00:12:02,720

 

675
00:12:02,720 --> 00:12:04,150

which looks up the system call number in

676
00:12:04,150 --> 00:12:04,160
which looks up the system call number in
 

677
00:12:04,160 --> 00:12:06,550
which looks up the system call number in
a table and calls the particular

678
00:12:06,550 --> 00:12:06,560
a table and calls the particular
 

679
00:12:06,560 --> 00:12:08,870
a table and calls the particular
function inside the kernel that

680
00:12:08,870 --> 00:12:08,880
function inside the kernel that
 

681
00:12:08,880 --> 00:12:10,389
function inside the kernel that
implements that system calling for us

682
00:12:10,389 --> 00:12:10,399
implements that system calling for us
 

683
00:12:10,399 --> 00:12:12,310
implements that system calling for us
it's going to be right and right does

684
00:12:12,310 --> 00:12:12,320
it's going to be right and right does
 

685
00:12:12,320 --> 00:12:15,030
it's going to be right and right does
this business it happens to you know

686
00:12:15,030 --> 00:12:15,040
this business it happens to you know
 

687
00:12:15,040 --> 00:12:17,110
this business it happens to you know
uh arrange for the whatever bytes were

688
00:12:17,110 --> 00:12:17,120
uh arrange for the whatever bytes were
 

689
00:12:17,120 --> 00:12:20,150
uh arrange for the whatever bytes were
written to appear on the console

690
00:12:20,150 --> 00:12:20,160
written to appear on the console
 

691
00:12:20,160 --> 00:12:22,389
written to appear on the console
and when it's finished it returns back

692
00:12:22,389 --> 00:12:22,399
and when it's finished it returns back
 

693
00:12:22,399 --> 00:12:24,870
and when it's finished it returns back
up to this system call function

694
00:12:24,870 --> 00:12:24,880
up to this system call function
 

695
00:12:24,880 --> 00:12:26,550
up to this system call function
and then the system call function on in

696
00:12:26,550 --> 00:12:26,560
and then the system call function on in
 

697
00:12:26,560 --> 00:12:28,069
and then the system call function on in
order to return back to user space

698
00:12:28,069 --> 00:12:28,079
order to return back to user space
 

699
00:12:28,079 --> 00:12:29,670
order to return back to user space
because we want to resume

700
00:12:29,670 --> 00:12:29,680
because we want to resume
 

701
00:12:29,680 --> 00:12:32,230
because we want to resume
after the z call there's a bunch of

702
00:12:32,230 --> 00:12:32,240
after the z call there's a bunch of
 

703
00:12:32,240 --> 00:12:32,949
after the z call there's a bunch of
stuff

704
00:12:32,949 --> 00:12:32,959
stuff
 

705
00:12:32,959 --> 00:12:35,350
stuff
we'll see that has to happen in order to

706
00:12:35,350 --> 00:12:35,360
we'll see that has to happen in order to
 

707
00:12:35,360 --> 00:12:36,629
we'll see that has to happen in order to
return to user space so there's a

708
00:12:36,629 --> 00:12:36,639
return to user space so there's a
 

709
00:12:36,639 --> 00:12:40,310
return to user space so there's a
separate function called user

710
00:12:40,310 --> 00:12:40,320

 

711
00:12:40,320 --> 00:12:43,829

trap rat it's written in c

712
00:12:43,829 --> 00:12:43,839
trap rat it's written in c
 

713
00:12:43,839 --> 00:12:47,030
trap rat it's written in c
it's in trap.c that does the part of

714
00:12:47,030 --> 00:12:47,040
it's in trap.c that does the part of
 

715
00:12:47,040 --> 00:12:48,790
it's in trap.c that does the part of
this return to user space that's

716
00:12:48,790 --> 00:12:48,800
this return to user space that's
 

717
00:12:48,800 --> 00:12:50,470
this return to user space that's
convenient to do in c code

718
00:12:50,470 --> 00:12:50,480
convenient to do in c code
 

719
00:12:50,480 --> 00:12:51,509
convenient to do in c code
there's some final things that really

720
00:12:51,509 --> 00:12:51,519
there's some final things that really
 

721
00:12:51,519 --> 00:12:54,790
there's some final things that really
can only be done in assembly code

722
00:12:54,790 --> 00:12:54,800
can only be done in assembly code
 

723
00:12:54,800 --> 00:12:56,230
can only be done in assembly code
and the code for that is written in

724
00:12:56,230 --> 00:12:56,240
and the code for that is written in
 

725
00:12:56,240 --> 00:12:57,590
and the code for that is written in
assembler and it's again in this

726
00:12:57,590 --> 00:12:57,600
assembler and it's again in this
 

727
00:12:57,600 --> 00:12:58,870
assembler and it's again in this
trampoline page

728
00:12:58,870 --> 00:12:58,880
trampoline page
 

729
00:12:58,880 --> 00:13:04,150
trampoline page
in a function called user ret

730
00:13:04,150 --> 00:13:04,160

 

731
00:13:04,160 --> 00:13:07,110

to the last some last assembly stuff

732
00:13:07,110 --> 00:13:07,120
to the last some last assembly stuff
 

733
00:13:07,120 --> 00:13:08,790
to the last some last assembly stuff
that has to happen and finally

734
00:13:08,790 --> 00:13:08,800
that has to happen and finally
 

735
00:13:08,800 --> 00:13:11,910
that has to happen and finally
um this assembly function issues the

736
00:13:11,910 --> 00:13:11,920
um this assembly function issues the
 

737
00:13:11,920 --> 00:13:13,750
um this assembly function issues the
machine instruction that returns back in

738
00:13:13,750 --> 00:13:13,760
machine instruction that returns back in
 

739
00:13:13,760 --> 00:13:15,350
machine instruction that returns back in
the user space and

740
00:13:15,350 --> 00:13:15,360
the user space and
 

741
00:13:15,360 --> 00:13:20,629
the user space and
resume execution after the e-column

742
00:13:20,629 --> 00:13:20,639
resume execution after the e-column
 

743
00:13:20,639 --> 00:13:22,150
resume execution after the e-column
all right does anybody want to answer

744
00:13:22,150 --> 00:13:22,160
all right does anybody want to answer
 

745
00:13:22,160 --> 00:13:24,550
all right does anybody want to answer
ask a question i'm about to switch into

746
00:13:24,550 --> 00:13:24,560
ask a question i'm about to switch into
 

747
00:13:24,560 --> 00:13:27,030
ask a question i'm about to switch into
looking at stuff with gdb um any

748
00:13:27,030 --> 00:13:27,040
looking at stuff with gdb um any
 

749
00:13:27,040 --> 00:13:32,829
looking at stuff with gdb um any
questions about the sort of high level

750
00:13:32,829 --> 00:13:32,839

 

751
00:13:32,839 --> 00:13:37,030

picture

752
00:13:37,030 --> 00:13:37,040

 

753
00:13:37,040 --> 00:13:40,790

all right i am going to

754
00:13:40,790 --> 00:13:40,800
all right i am going to
 

755
00:13:40,800 --> 00:13:44,069
all right i am going to
sorry um let me see

756
00:13:44,069 --> 00:13:44,079
sorry um let me see
 

757
00:13:44,079 --> 00:13:48,069
sorry um let me see
what mode our vm.c functions run in uh

758
00:13:48,069 --> 00:13:48,079
what mode our vm.c functions run in uh
 

759
00:13:48,079 --> 00:13:49,910
what mode our vm.c functions run in uh
vm.c functions everything in there is a

760
00:13:49,910 --> 00:13:49,920
vm.c functions everything in there is a
 

761
00:13:49,920 --> 00:13:51,110
vm.c functions everything in there is a
part of the kernel and it's running

762
00:13:51,110 --> 00:13:51,120
part of the kernel and it's running
 

763
00:13:51,120 --> 00:13:54,790
part of the kernel and it's running
supervisor mode

764
00:13:54,790 --> 00:13:54,800

 

765
00:13:54,800 --> 00:14:00,389

um yeah

766
00:14:00,389 --> 00:14:00,399

 

767
00:14:00,399 --> 00:14:02,389

okay somebody asks why these functions

768
00:14:02,389 --> 00:14:02,399
okay somebody asks why these functions
 

769
00:14:02,399 --> 00:14:03,670
okay somebody asks why these functions
are named this way

770
00:14:03,670 --> 00:14:03,680
are named this way
 

771
00:14:03,680 --> 00:14:07,670
are named this way
um uh the naming is a bit of a disaster

772
00:14:07,670 --> 00:14:07,680
um uh the naming is a bit of a disaster
 

773
00:14:07,680 --> 00:14:09,910
um uh the naming is a bit of a disaster
and for next year i'm resolved to

774
00:14:09,910 --> 00:14:09,920
and for next year i'm resolved to
 

775
00:14:09,920 --> 00:14:13,670
and for next year i'm resolved to
make them more rational

776
00:14:13,670 --> 00:14:13,680

 

777
00:14:13,680 --> 00:14:15,110

i think the naming question might have

778
00:14:15,110 --> 00:14:15,120
i think the naming question might have
 

779
00:14:15,120 --> 00:14:17,189
i think the naming question might have
referred to the name of the registers

780
00:14:17,189 --> 00:14:17,199
referred to the name of the registers
 

781
00:14:17,199 --> 00:14:19,509
referred to the name of the registers
in the previous board they all started

782
00:14:19,509 --> 00:14:19,519
in the previous board they all started
 

783
00:14:19,519 --> 00:14:20,230
in the previous board they all started
like yes

784
00:14:20,230 --> 00:14:20,240
like yes
 

785
00:14:20,240 --> 00:14:21,610
like yes
for supervisor

786
00:14:21,610 --> 00:14:21,620
for supervisor
 

787
00:14:21,620 --> 00:14:24,069
for supervisor
[Music]

788
00:14:24,069 --> 00:14:24,079
[Music]
 

789
00:14:24,079 --> 00:14:27,670
[Music]
other than that it's there's five people

790
00:14:27,670 --> 00:14:27,680
other than that it's there's five people
 

791
00:14:27,680 --> 00:14:30,870
other than that it's there's five people
pick these names somebody's asking don't

792
00:14:30,870 --> 00:14:30,880
pick these names somebody's asking don't
 

793
00:14:30,880 --> 00:14:32,310
pick these names somebody's asking don't
the vm.c functions

794
00:14:32,310 --> 00:14:32,320
the vm.c functions
 

795
00:14:32,320 --> 00:14:34,710
the vm.c functions
access physical memory directly that's

796
00:14:34,710 --> 00:14:34,720
access physical memory directly that's
 

797
00:14:34,720 --> 00:14:35,829
access physical memory directly that's
absolutely true

798
00:14:35,829 --> 00:14:35,839
absolutely true
 

799
00:14:35,839 --> 00:14:37,110
absolutely true
the reason why they're allowed to do

800
00:14:37,110 --> 00:14:37,120
the reason why they're allowed to do
 

801
00:14:37,120 --> 00:14:39,350
the reason why they're allowed to do
that though is that the kernel carefully

802
00:14:39,350 --> 00:14:39,360
that though is that the kernel carefully
 

803
00:14:39,360 --> 00:14:41,670
that though is that the kernel carefully
sets up direct mappings in the page

804
00:14:41,670 --> 00:14:41,680
sets up direct mappings in the page
 

805
00:14:41,680 --> 00:14:42,470
sets up direct mappings in the page
table

806
00:14:42,470 --> 00:14:42,480
table
 

807
00:14:42,480 --> 00:14:44,310
table
there's many many pte's in the page

808
00:14:44,310 --> 00:14:44,320
there's many many pte's in the page
 

809
00:14:44,320 --> 00:14:46,710
there's many many pte's in the page
table which cause

810
00:14:46,710 --> 00:14:46,720
table which cause
 

811
00:14:46,720 --> 00:14:49,030
table which cause
whenever the colonel tries to read or

812
00:14:49,030 --> 00:14:49,040
whenever the colonel tries to read or
 

813
00:14:49,040 --> 00:14:50,710
whenever the colonel tries to read or
write a physical address it actually is

814
00:14:50,710 --> 00:14:50,720
write a physical address it actually is
 

815
00:14:50,720 --> 00:14:53,030
write a physical address it actually is
a virtual address that's translated

816
00:14:53,030 --> 00:14:53,040
a virtual address that's translated
 

817
00:14:53,040 --> 00:14:55,030
a virtual address that's translated
by the kernel page table into the

818
00:14:55,030 --> 00:14:55,040
by the kernel page table into the
 

819
00:14:55,040 --> 00:14:56,389
by the kernel page table into the
physical address that's equal

820
00:14:56,389 --> 00:14:56,399
physical address that's equal
 

821
00:14:56,399 --> 00:14:59,189
physical address that's equal
to the virtual address it was issued so

822
00:14:59,189 --> 00:14:59,199
to the virtual address it was issued so
 

823
00:14:59,199 --> 00:15:01,590
to the virtual address it was issued so
it's like super convenient in the kernel

824
00:15:01,590 --> 00:15:01,600
it's like super convenient in the kernel
 

825
00:15:01,600 --> 00:15:03,590
it's like super convenient in the kernel
once you're using the kernel page table

826
00:15:03,590 --> 00:15:03,600
once you're using the kernel page table
 

827
00:15:03,600 --> 00:15:05,189
once you're using the kernel page table
because the kernel has all these direct

828
00:15:05,189 --> 00:15:05,199
because the kernel has all these direct
 

829
00:15:05,199 --> 00:15:06,389
because the kernel has all these direct
mappings

830
00:15:06,389 --> 00:15:06,399
mappings
 

831
00:15:06,399 --> 00:15:09,990
mappings
but until we've set up the current

832
00:15:09,990 --> 00:15:10,000
but until we've set up the current
 

833
00:15:10,000 --> 00:15:12,310
but until we've set up the current
until the trap machinery has switched to

834
00:15:12,310 --> 00:15:12,320
until the trap machinery has switched to
 

835
00:15:12,320 --> 00:15:13,670
until the trap machinery has switched to
the kernel page table

836
00:15:13,670 --> 00:15:13,680
the kernel page table
 

837
00:15:13,680 --> 00:15:15,750
the kernel page table
none of those mappings are available so

838
00:15:15,750 --> 00:15:15,760
none of those mappings are available so
 

839
00:15:15,760 --> 00:15:16,870
none of those mappings are available so
until the

840
00:15:16,870 --> 00:15:16,880
until the
 

841
00:15:16,880 --> 00:15:18,150
until the
kernel trap code is switched to the

842
00:15:18,150 --> 00:15:18,160
kernel trap code is switched to the
 

843
00:15:18,160 --> 00:15:19,430
kernel trap code is switched to the
kernel page table we're still using the

844
00:15:19,430 --> 00:15:19,440
kernel page table we're still using the
 

845
00:15:19,440 --> 00:15:21,189
kernel page table we're still using the
user page table which has none of these

846
00:15:21,189 --> 00:15:21,199
user page table which has none of these
 

847
00:15:21,199 --> 00:15:23,350
user page table which has none of these
convenient mappings

848
00:15:23,350 --> 00:15:23,360
convenient mappings
 

849
00:15:23,360 --> 00:15:29,749
convenient mappings
for physical addresses

850
00:15:29,749 --> 00:15:29,759

 

851
00:15:29,759 --> 00:15:34,710

okay

852
00:15:34,710 --> 00:15:34,720

 

853
00:15:34,720 --> 00:15:37,829

can i ask a question please um

854
00:15:37,829 --> 00:15:37,839
can i ask a question please um
 

855
00:15:37,839 --> 00:15:41,110
can i ask a question please um
so um um

856
00:15:41,110 --> 00:15:41,120
so um um
 

857
00:15:41,120 --> 00:15:43,110
so um um
i don't know this is maybe not exactly

858
00:15:43,110 --> 00:15:43,120
i don't know this is maybe not exactly
 

859
00:15:43,120 --> 00:15:45,030
i don't know this is maybe not exactly
relevant to what was just said but

860
00:15:45,030 --> 00:15:45,040
relevant to what was just said but
 

861
00:15:45,040 --> 00:15:48,230
relevant to what was just said but
um the read and write system calls right

862
00:15:48,230 --> 00:15:48,240
um the read and write system calls right
 

863
00:15:48,240 --> 00:15:48,870
um the read and write system calls right
like those

864
00:15:48,870 --> 00:15:48,880
like those
 

865
00:15:48,880 --> 00:15:51,509
like those
are pretty expensive compared to just a

866
00:15:51,509 --> 00:15:51,519
are pretty expensive compared to just a
 

867
00:15:51,519 --> 00:15:52,150
are pretty expensive compared to just a
memory

868
00:15:52,150 --> 00:15:52,160
memory
 

869
00:15:52,160 --> 00:15:53,350
memory
store because you have to actually

870
00:15:53,350 --> 00:15:53,360
store because you have to actually
 

871
00:15:53,360 --> 00:15:55,430
store because you have to actually
switch modes and go back and forth

872
00:15:55,430 --> 00:15:55,440
switch modes and go back and forth
 

873
00:15:55,440 --> 00:15:57,749
switch modes and go back and forth
would it be possible to just like

874
00:15:57,749 --> 00:15:57,759
would it be possible to just like
 

875
00:15:57,759 --> 00:15:59,990
would it be possible to just like
instead of when when you open a file

876
00:15:59,990 --> 00:16:00,000
instead of when when you open a file
 

877
00:16:00,000 --> 00:16:01,430
instead of when when you open a file
instead of getting back a file

878
00:16:01,430 --> 00:16:01,440
instead of getting back a file
 

879
00:16:01,440 --> 00:16:03,350
instead of getting back a file
descriptor that you call with the system

880
00:16:03,350 --> 00:16:03,360
descriptor that you call with the system
 

881
00:16:03,360 --> 00:16:03,990
descriptor that you call with the system
call

882
00:16:03,990 --> 00:16:04,000
call
 

883
00:16:04,000 --> 00:16:07,110
call
to get a page table mapping

884
00:16:07,110 --> 00:16:07,120
to get a page table mapping
 

885
00:16:07,120 --> 00:16:08,949
to get a page table mapping
and then you would just write to a

886
00:16:08,949 --> 00:16:08,959
and then you would just write to a
 

887
00:16:08,959 --> 00:16:10,550
and then you would just write to a
certain address

888
00:16:10,550 --> 00:16:10,560
certain address
 

889
00:16:10,560 --> 00:16:13,509
certain address
that's just mapped to the device and you

890
00:16:13,509 --> 00:16:13,519
that's just mapped to the device and you
 

891
00:16:13,519 --> 00:16:15,350
that's just mapped to the device and you
can set up the restrictions so that

892
00:16:15,350 --> 00:16:15,360
can set up the restrictions so that
 

893
00:16:15,360 --> 00:16:17,829
can set up the restrictions so that
the the program can only write to a

894
00:16:17,829 --> 00:16:17,839
the the program can only write to a
 

895
00:16:17,839 --> 00:16:19,110
the the program can only write to a
device to like a

896
00:16:19,110 --> 00:16:19,120
device to like a
 

897
00:16:19,120 --> 00:16:20,790
device to like a
file descriptor that it's allowed to

898
00:16:20,790 --> 00:16:20,800
file descriptor that it's allowed to
 

899
00:16:20,800 --> 00:16:22,550
file descriptor that it's allowed to
which is allowed to through the virtual

900
00:16:22,550 --> 00:16:22,560
which is allowed to through the virtual
 

901
00:16:22,560 --> 00:16:23,030
which is allowed to through the virtual
page

902
00:16:23,030 --> 00:16:23,040
page
 

903
00:16:23,040 --> 00:16:24,790
page
table mapping instead of jumping to the

904
00:16:24,790 --> 00:16:24,800
table mapping instead of jumping to the
 

905
00:16:24,800 --> 00:16:26,150
table mapping instead of jumping to the
kernel and back

906
00:16:26,150 --> 00:16:26,160
kernel and back
 

907
00:16:26,160 --> 00:16:28,230
kernel and back
yeah that's a good observation and

908
00:16:28,230 --> 00:16:28,240
yeah that's a good observation and
 

909
00:16:28,240 --> 00:16:29,509
yeah that's a good observation and
indeed uh

910
00:16:29,509 --> 00:16:29,519
indeed uh
 

911
00:16:29,519 --> 00:16:31,189
indeed uh
many operating systems provide this

912
00:16:31,189 --> 00:16:31,199
many operating systems provide this
 

913
00:16:31,199 --> 00:16:33,749
many operating systems provide this
what's called memory mapped file access

914
00:16:33,749 --> 00:16:33,759
what's called memory mapped file access
 

915
00:16:33,759 --> 00:16:34,389
what's called memory mapped file access
where

916
00:16:34,389 --> 00:16:34,399
where
 

917
00:16:34,399 --> 00:16:36,550
where
indeed you map pages that correspond to

918
00:16:36,550 --> 00:16:36,560
indeed you map pages that correspond to
 

919
00:16:36,560 --> 00:16:37,910
indeed you map pages that correspond to
the file contents

920
00:16:37,910 --> 00:16:37,920
the file contents
 

921
00:16:37,920 --> 00:16:40,470
the file contents
into the into your virtual into the user

922
00:16:40,470 --> 00:16:40,480
into the into your virtual into the user
 

923
00:16:40,480 --> 00:16:42,069
into the into your virtual into the user
virtual address space so you can read or

924
00:16:42,069 --> 00:16:42,079
virtual address space so you can read or
 

925
00:16:42,079 --> 00:16:42,629
virtual address space so you can read or
write them

926
00:16:42,629 --> 00:16:42,639
write them
 

927
00:16:42,639 --> 00:16:45,350
write them
directly through memory in fact you'll

928
00:16:45,350 --> 00:16:45,360
directly through memory in fact you'll
 

929
00:16:45,360 --> 00:16:46,949
directly through memory in fact you'll
be implementing a version of this

930
00:16:46,949 --> 00:16:46,959
be implementing a version of this
 

931
00:16:46,959 --> 00:16:51,189
be implementing a version of this
in the map lab in a couple of weeks

932
00:16:51,189 --> 00:16:51,199
in the map lab in a couple of weeks
 

933
00:16:51,199 --> 00:16:54,069
in the map lab in a couple of weeks
and indeed as you apply it's a good deal

934
00:16:54,069 --> 00:16:54,079
and indeed as you apply it's a good deal
 

935
00:16:54,079 --> 00:16:54,870
and indeed as you apply it's a good deal
faster

936
00:16:54,870 --> 00:16:54,880
faster
 

937
00:16:54,880 --> 00:16:56,550
faster
for many programs than calling a medium

938
00:16:56,550 --> 00:16:56,560
for many programs than calling a medium
 

939
00:16:56,560 --> 00:16:59,110
for many programs than calling a medium
right

940
00:16:59,110 --> 00:16:59,120

 

941
00:16:59,120 --> 00:17:02,310

okay

942
00:17:02,310 --> 00:17:02,320

 

943
00:17:02,320 --> 00:17:19,510

i'm gonna switch to the gdb world

944
00:17:19,510 --> 00:17:19,520
i'm gonna switch to the gdb world
 

945
00:17:19,520 --> 00:17:20,949
i'm gonna switch to the gdb world
all right at this point everybody should

946
00:17:20,949 --> 00:17:20,959
all right at this point everybody should
 

947
00:17:20,959 --> 00:17:26,309
all right at this point everybody should
uh

948
00:17:26,309 --> 00:17:26,319

 

949
00:17:26,319 --> 00:17:31,190

see my screen share

950
00:17:31,190 --> 00:17:31,200

 

951
00:17:31,200 --> 00:17:33,270

we're going to watch an xv system call

952
00:17:33,270 --> 00:17:33,280
we're going to watch an xv system call
 

953
00:17:33,280 --> 00:17:35,190
we're going to watch an xv system call
the write

954
00:17:35,190 --> 00:17:35,200
the write
 

955
00:17:35,200 --> 00:17:38,070
the write
the shells right of its initial prompt

956
00:17:38,070 --> 00:17:38,080
the shells right of its initial prompt
 

957
00:17:38,080 --> 00:17:39,430
the shells right of its initial prompt
make its way through the system you can

958
00:17:39,430 --> 00:17:39,440
make its way through the system you can
 

959
00:17:39,440 --> 00:17:39,750
make its way through the system you can
see

960
00:17:39,750 --> 00:17:39,760
see
 

961
00:17:39,760 --> 00:17:42,390
see
the user code that initiates this in

962
00:17:42,390 --> 00:17:42,400
the user code that initiates this in
 

963
00:17:42,400 --> 00:17:44,789
the user code that initiates this in
sh.c

964
00:17:44,789 --> 00:17:44,799
sh.c
 

965
00:17:44,799 --> 00:17:45,990
sh.c
and i'm showing that here it's just

966
00:17:45,990 --> 00:17:46,000
and i'm showing that here it's just
 

967
00:17:46,000 --> 00:17:49,110
and i'm showing that here it's just
making the right system call

968
00:17:49,110 --> 00:17:49,120
making the right system call
 

969
00:17:49,120 --> 00:17:51,990
making the right system call
with this dollar sign prompt um let me

970
00:17:51,990 --> 00:17:52,000
with this dollar sign prompt um let me
 

971
00:17:52,000 --> 00:17:58,830
with this dollar sign prompt um let me
fire up

972
00:17:58,830 --> 00:17:58,840

 

973
00:17:58,840 --> 00:18:03,350

gdb

974
00:18:03,350 --> 00:18:03,360

 

975
00:18:03,360 --> 00:18:06,710

excellent so what actually happens when

976
00:18:06,710 --> 00:18:06,720
excellent so what actually happens when
 

977
00:18:06,720 --> 00:18:07,270
excellent so what actually happens when
user

978
00:18:07,270 --> 00:18:07,280
user
 

979
00:18:07,280 --> 00:18:09,909
user
code when the shell calls right right is

980
00:18:09,909 --> 00:18:09,919
code when the shell calls right right is
 

981
00:18:09,919 --> 00:18:10,789
code when the shell calls right right is
just a

982
00:18:10,789 --> 00:18:10,799
just a
 

983
00:18:10,799 --> 00:18:13,909
just a
it's a library function that's part of

984
00:18:13,909 --> 00:18:13,919
it's a library function that's part of
 

985
00:18:13,919 --> 00:18:15,830
it's a library function that's part of
the

986
00:18:15,830 --> 00:18:15,840
the
 

987
00:18:15,840 --> 00:18:18,390
the
that's linked into the shell and you can

988
00:18:18,390 --> 00:18:18,400
that's linked into the shell and you can
 

989
00:18:18,400 --> 00:18:20,080
that's linked into the shell and you can
see the source for it in

990
00:18:20,080 --> 00:18:20,090
see the source for it in
 

991
00:18:20,090 --> 00:18:21,950
see the source for it in
[Music]

992
00:18:21,950 --> 00:18:21,960
[Music]
 

993
00:18:21,960 --> 00:18:24,630
[Music]
usys.s

994
00:18:24,630 --> 00:18:24,640
usys.s
 

995
00:18:24,640 --> 00:18:26,710
usys.s
so it's this couple of instructions here

996
00:18:26,710 --> 00:18:26,720
so it's this couple of instructions here
 

997
00:18:26,720 --> 00:18:29,430
so it's this couple of instructions here
is the implementation of the write

998
00:18:29,430 --> 00:18:29,440
is the implementation of the write
 

999
00:18:29,440 --> 00:18:30,230
is the implementation of the write
function

1000
00:18:30,230 --> 00:18:30,240
function
 

1001
00:18:30,240 --> 00:18:33,669
function
that the shell is actually calling and

1002
00:18:33,669 --> 00:18:33,679
that the shell is actually calling and
 

1003
00:18:33,679 --> 00:18:35,669
that the shell is actually calling and
this is a very short function all it's

1004
00:18:35,669 --> 00:18:35,679
this is a very short function all it's
 

1005
00:18:35,679 --> 00:18:37,669
this is a very short function all it's
doing is loading into a7

1006
00:18:37,669 --> 00:18:37,679
doing is loading into a7
 

1007
00:18:37,679 --> 00:18:39,990
doing is loading into a7
a number cis write which is just

1008
00:18:39,990 --> 00:18:40,000
a number cis write which is just
 

1009
00:18:40,000 --> 00:18:42,150
a number cis write which is just
symbolically defined to be 16 that tells

1010
00:18:42,150 --> 00:18:42,160
symbolically defined to be 16 that tells
 

1011
00:18:42,160 --> 00:18:43,750
symbolically defined to be 16 that tells
the kernel

1012
00:18:43,750 --> 00:18:43,760
the kernel
 

1013
00:18:43,760 --> 00:18:47,029
the kernel
i want to run the 16th system call which

1014
00:18:47,029 --> 00:18:47,039
i want to run the 16th system call which
 

1015
00:18:47,039 --> 00:18:48,549
i want to run the 16th system call which
happens to be right

1016
00:18:48,549 --> 00:18:48,559
happens to be right
 

1017
00:18:48,559 --> 00:18:50,549
happens to be right
and then this little function uses the

1018
00:18:50,549 --> 00:18:50,559
and then this little function uses the
 

1019
00:18:50,559 --> 00:18:52,470
and then this little function uses the
e-call instruction

1020
00:18:52,470 --> 00:18:52,480
e-call instruction
 

1021
00:18:52,480 --> 00:18:55,029
e-call instruction
which is what actually gets the code

1022
00:18:55,029 --> 00:18:55,039
which is what actually gets the code
 

1023
00:18:55,039 --> 00:18:56,390
which is what actually gets the code
into the kernel the kernel

1024
00:18:56,390 --> 00:18:56,400
into the kernel the kernel
 

1025
00:18:56,400 --> 00:18:59,029
into the kernel the kernel
does its thing um and then when the

1026
00:18:59,029 --> 00:18:59,039
does its thing um and then when the
 

1027
00:18:59,039 --> 00:19:01,510
does its thing um and then when the
kernel is finally done it returns

1028
00:19:01,510 --> 00:19:01,520
kernel is finally done it returns
 

1029
00:19:01,520 --> 00:19:03,190
kernel is finally done it returns
back into user space to execute the

1030
00:19:03,190 --> 00:19:03,200
back into user space to execute the
 

1031
00:19:03,200 --> 00:19:04,950
back into user space to execute the
instruction after the e-call

1032
00:19:04,950 --> 00:19:04,960
instruction after the e-call
 

1033
00:19:04,960 --> 00:19:07,669
instruction after the e-call
which is that rhett that returns back to

1034
00:19:07,669 --> 00:19:07,679
which is that rhett that returns back to
 

1035
00:19:07,679 --> 00:19:08,870
which is that rhett that returns back to
the shell

1036
00:19:08,870 --> 00:19:08,880
the shell
 

1037
00:19:08,880 --> 00:19:10,870
the shell
returns from that right library function

1038
00:19:10,870 --> 00:19:10,880
returns from that right library function
 

1039
00:19:10,880 --> 00:19:12,950
returns from that right library function
back into the shell

1040
00:19:12,950 --> 00:19:12,960
back into the shell
 

1041
00:19:12,960 --> 00:19:14,630
back into the shell
so what i'd like to do in order to show

1042
00:19:14,630 --> 00:19:14,640
so what i'd like to do in order to show
 

1043
00:19:14,640 --> 00:19:15,990
so what i'd like to do in order to show
the system call part of this

1044
00:19:15,990 --> 00:19:16,000
the system call part of this
 

1045
00:19:16,000 --> 00:19:17,430
the system call part of this
i'm going to start by putting a break

1046
00:19:17,430 --> 00:19:17,440
i'm going to start by putting a break
 

1047
00:19:17,440 --> 00:19:19,029
i'm going to start by putting a break
point on that

1048
00:19:19,029 --> 00:19:19,039
point on that
 

1049
00:19:19,039 --> 00:19:22,390
point on that
e-call instruction and

1050
00:19:22,390 --> 00:19:22,400
e-call instruction and
 

1051
00:19:22,400 --> 00:19:24,310
e-call instruction and
we need to know its address of course

1052
00:19:24,310 --> 00:19:24,320
we need to know its address of course
 

1053
00:19:24,320 --> 00:19:26,029
we need to know its address of course
but we can find that out by looking in

1054
00:19:26,029 --> 00:19:26,039
but we can find that out by looking in
 

1055
00:19:26,039 --> 00:19:28,150
but we can find that out by looking in
sh.asm which the

1056
00:19:28,150 --> 00:19:28,160
sh.asm which the
 

1057
00:19:28,160 --> 00:19:31,590
sh.asm which the
xp6 compilation process produces um and

1058
00:19:31,590 --> 00:19:31,600
xp6 compilation process produces um and
 

1059
00:19:31,600 --> 00:19:32,990
xp6 compilation process produces um and
an

1060
00:19:32,990 --> 00:19:33,000
an
 

1061
00:19:33,000 --> 00:19:36,230
an
xbsh.asm there's a assembly code with

1062
00:19:36,230 --> 00:19:36,240
xbsh.asm there's a assembly code with
 

1063
00:19:36,240 --> 00:19:37,510
xbsh.asm there's a assembly code with
addresses

1064
00:19:37,510 --> 00:19:37,520
addresses
 

1065
00:19:37,520 --> 00:19:41,510
addresses
of the um the instructions

1066
00:19:41,510 --> 00:19:41,520
of the um the instructions
 

1067
00:19:41,520 --> 00:19:43,510
of the um the instructions
for the shell so i'm going to put a

1068
00:19:43,510 --> 00:19:43,520
for the shell so i'm going to put a
 

1069
00:19:43,520 --> 00:19:44,630
for the shell so i'm going to put a
breakpoint on the e

1070
00:19:44,630 --> 00:19:44,640
breakpoint on the e
 

1071
00:19:44,640 --> 00:19:47,909
breakpoint on the e
call instruction which is it d address

1072
00:19:47,909 --> 00:19:47,919
call instruction which is it d address
 

1073
00:19:47,919 --> 00:19:51,270
call instruction which is it d address
de6

1074
00:19:51,270 --> 00:19:51,280

 

1075
00:19:51,280 --> 00:19:52,870

excellent now i'm going to actually

1076
00:19:52,870 --> 00:19:52,880
excellent now i'm going to actually
 

1077
00:19:52,880 --> 00:19:54,549
excellent now i'm going to actually
start xc6 running

1078
00:19:54,549 --> 00:19:54,559
start xc6 running
 

1079
00:19:54,559 --> 00:19:57,669
start xc6 running
and i'm hoping to have the system break

1080
00:19:57,669 --> 00:19:57,679
and i'm hoping to have the system break
 

1081
00:19:57,679 --> 00:20:01,990
and i'm hoping to have the system break
in the shell just before executing ecall

1082
00:20:01,990 --> 00:20:02,000
in the shell just before executing ecall
 

1083
00:20:02,000 --> 00:20:04,789
in the shell just before executing ecall
all right excellent um we're now you can

1084
00:20:04,789 --> 00:20:04,799
all right excellent um we're now you can
 

1085
00:20:04,799 --> 00:20:06,549
all right excellent um we're now you can
see from gdb we're about to

1086
00:20:06,549 --> 00:20:06,559
see from gdb we're about to
 

1087
00:20:06,559 --> 00:20:11,350
see from gdb we're about to
uh we're about to execute that e call

1088
00:20:11,350 --> 00:20:11,360
uh we're about to execute that e call
 

1089
00:20:11,360 --> 00:20:15,029
uh we're about to execute that e call
let's just check that we are where we

1090
00:20:15,029 --> 00:20:15,039
let's just check that we are where we
 

1091
00:20:15,039 --> 00:20:15,990
let's just check that we are where we
think we are

1092
00:20:15,990 --> 00:20:16,000
think we are
 

1093
00:20:16,000 --> 00:20:17,909
think we are
let's print we can print the program

1094
00:20:17,909 --> 00:20:17,919
let's print we can print the program
 

1095
00:20:17,919 --> 00:20:20,390
let's print we can print the program
counter this is 0x to e6 just what we

1096
00:20:20,390 --> 00:20:20,400
counter this is 0x to e6 just what we
 

1097
00:20:20,400 --> 00:20:25,909
counter this is 0x to e6 just what we
asked for

1098
00:20:25,909 --> 00:20:25,919

 

1099
00:20:25,919 --> 00:20:30,070

we can also print the all 32 registers

1100
00:20:30,070 --> 00:20:30,080
we can also print the all 32 registers
 

1101
00:20:30,080 --> 00:20:32,789
we can also print the all 32 registers
and some of these values whatever we

1102
00:20:32,789 --> 00:20:32,799
and some of these values whatever we
 

1103
00:20:32,799 --> 00:20:34,070
and some of these values whatever we
don't know we don't care what they

1104
00:20:34,070 --> 00:20:34,080
don't know we don't care what they
 

1105
00:20:34,080 --> 00:20:37,430
don't know we don't care what they
are but a0 a1 and a2 are the three

1106
00:20:37,430 --> 00:20:37,440
are but a0 a1 and a2 are the three
 

1107
00:20:37,440 --> 00:20:38,950
are but a0 a1 and a2 are the three
arguments that the shell passed

1108
00:20:38,950 --> 00:20:38,960
arguments that the shell passed
 

1109
00:20:38,960 --> 00:20:41,669
arguments that the shell passed
right so those arguments are file

1110
00:20:41,669 --> 00:20:41,679
right so those arguments are file
 

1111
00:20:41,679 --> 00:20:42,710
right so those arguments are file
descriptor two

1112
00:20:42,710 --> 00:20:42,720
descriptor two
 

1113
00:20:42,720 --> 00:20:45,430
descriptor two
in a zero um the pointer to the buffer

1114
00:20:45,430 --> 00:20:45,440
in a zero um the pointer to the buffer
 

1115
00:20:45,440 --> 00:20:47,110
in a zero um the pointer to the buffer
of characters that the shell wants to

1116
00:20:47,110 --> 00:20:47,120
of characters that the shell wants to
 

1117
00:20:47,120 --> 00:20:48,710
of characters that the shell wants to
write in a1

1118
00:20:48,710 --> 00:20:48,720
write in a1
 

1119
00:20:48,720 --> 00:20:50,310
write in a1
and the number of characters it wants to

1120
00:20:50,310 --> 00:20:50,320
and the number of characters it wants to
 

1121
00:20:50,320 --> 00:20:52,390
and the number of characters it wants to
write in a2

1122
00:20:52,390 --> 00:20:52,400
write in a2
 

1123
00:20:52,400 --> 00:20:53,750
write in a2
and we can convince ourselves that we're

1124
00:20:53,750 --> 00:20:53,760
and we can convince ourselves that we're
 

1125
00:20:53,760 --> 00:20:55,270
and we can convince ourselves that we're
looking at the code we think we're

1126
00:20:55,270 --> 00:20:55,280
looking at the code we think we're
 

1127
00:20:55,280 --> 00:20:56,870
looking at the code we think we're
looking at

1128
00:20:56,870 --> 00:20:56,880
looking at
 

1129
00:20:56,880 --> 00:21:00,390
looking at
by actually printing out

1130
00:21:00,390 --> 00:21:00,400

 

1131
00:21:00,400 --> 00:21:02,149

the bytes in that buffer that the

1132
00:21:02,149 --> 00:21:02,159
the bytes in that buffer that the
 

1133
00:21:02,159 --> 00:21:03,909
the bytes in that buffer that the
shuttle wants to write and indeed it's a

1134
00:21:03,909 --> 00:21:03,919
shuttle wants to write and indeed it's a
 

1135
00:21:03,919 --> 00:21:05,110
shuttle wants to write and indeed it's a
dollar sign

1136
00:21:05,110 --> 00:21:05,120
dollar sign
 

1137
00:21:05,120 --> 00:21:08,149
dollar sign
and a space so um

1138
00:21:08,149 --> 00:21:08,159
and a space so um
 

1139
00:21:08,159 --> 00:21:10,070
and a space so um
we're at the system call that we we hope

1140
00:21:10,070 --> 00:21:10,080
we're at the system call that we we hope
 

1141
00:21:10,080 --> 00:21:11,350
we're at the system call that we we hope
to be at

1142
00:21:11,350 --> 00:21:11,360
to be at
 

1143
00:21:11,360 --> 00:21:13,270
to be at
one thing to notice is that the program

1144
00:21:13,270 --> 00:21:13,280
one thing to notice is that the program
 

1145
00:21:13,280 --> 00:21:14,710
one thing to notice is that the program
counter and the stack point are both at

1146
00:21:14,710 --> 00:21:14,720
counter and the stack point are both at
 

1147
00:21:14,720 --> 00:21:15,990
counter and the stack point are both at
low addresses

1148
00:21:15,990 --> 00:21:16,000
low addresses
 

1149
00:21:16,000 --> 00:21:18,149
low addresses
address is quite close to zero and that

1150
00:21:18,149 --> 00:21:18,159
address is quite close to zero and that
 

1151
00:21:18,159 --> 00:21:19,510
address is quite close to zero and that
um

1152
00:21:19,510 --> 00:21:19,520
um
 

1153
00:21:19,520 --> 00:21:21,750
um
just reinforces our belief that we're

1154
00:21:21,750 --> 00:21:21,760
just reinforces our belief that we're
 

1155
00:21:21,760 --> 00:21:22,630
just reinforces our belief that we're
still executing

1156
00:21:22,630 --> 00:21:22,640
still executing
 

1157
00:21:22,640 --> 00:21:24,950
still executing
in user and the user address space where

1158
00:21:24,950 --> 00:21:24,960
in user and the user address space where
 

1159
00:21:24,960 --> 00:21:26,549
in user and the user address space where
all the addresses are quite small once

1160
00:21:26,549 --> 00:21:26,559
all the addresses are quite small once
 

1161
00:21:26,559 --> 00:21:27,750
all the addresses are quite small once
we get into the kernel you see the

1162
00:21:27,750 --> 00:21:27,760
we get into the kernel you see the
 

1163
00:21:27,760 --> 00:21:28,789
we get into the kernel you see the
addresses are

1164
00:21:28,789 --> 00:21:28,799
addresses are
 

1165
00:21:28,799 --> 00:21:30,230
addresses are
the kernels actually loaded much much

1166
00:21:30,230 --> 00:21:30,240
the kernels actually loaded much much
 

1167
00:21:30,240 --> 00:21:34,950
the kernels actually loaded much much
higher in memory

1168
00:21:34,950 --> 00:21:34,960

 

1169
00:21:34,960 --> 00:21:39,110

okay we the point of the system call is

1170
00:21:39,110 --> 00:21:39,120
okay we the point of the system call is
 

1171
00:21:39,120 --> 00:21:39,510
okay we the point of the system call is
to

1172
00:21:39,510 --> 00:21:39,520
to
 

1173
00:21:39,520 --> 00:21:41,110
to
switch around a lot of state one of the

1174
00:21:41,110 --> 00:21:41,120
switch around a lot of state one of the
 

1175
00:21:41,120 --> 00:21:42,710
switch around a lot of state one of the
most important pieces of state

1176
00:21:42,710 --> 00:21:42,720
most important pieces of state
 

1177
00:21:42,720 --> 00:21:44,390
most important pieces of state
that has to get switched and that we

1178
00:21:44,390 --> 00:21:44,400
that has to get switched and that we
 

1179
00:21:44,400 --> 00:21:46,310
that has to get switched and that we
have to live with before it's switched

1180
00:21:46,310 --> 00:21:46,320
have to live with before it's switched
 

1181
00:21:46,320 --> 00:21:48,870
have to live with before it's switched
is the current page table of course we

1182
00:21:48,870 --> 00:21:48,880
is the current page table of course we
 

1183
00:21:48,880 --> 00:21:49,990
is the current page table of course we
can look at

1184
00:21:49,990 --> 00:21:50,000
can look at
 

1185
00:21:50,000 --> 00:21:53,029
can look at
uh sat p

1186
00:21:53,029 --> 00:21:53,039
uh sat p
 

1187
00:21:53,039 --> 00:21:55,029
uh sat p
um but all we get there is the address

1188
00:21:55,029 --> 00:21:55,039
um but all we get there is the address
 

1189
00:21:55,039 --> 00:21:56,310
um but all we get there is the address
in physical memory the page table

1190
00:21:56,310 --> 00:21:56,320
in physical memory the page table
 

1191
00:21:56,320 --> 00:21:57,990
in physical memory the page table
doesn't actually tell us much about what

1192
00:21:57,990 --> 00:21:58,000
doesn't actually tell us much about what
 

1193
00:21:58,000 --> 00:21:59,110
doesn't actually tell us much about what
the mappings are

1194
00:21:59,110 --> 00:21:59,120
the mappings are
 

1195
00:21:59,120 --> 00:22:02,310
the mappings are
what the page table looks like luckily

1196
00:22:02,310 --> 00:22:02,320
what the page table looks like luckily
 

1197
00:22:02,320 --> 00:22:05,750
what the page table looks like luckily
there's a way in qmu to ask it to print

1198
00:22:05,750 --> 00:22:05,760
there's a way in qmu to ask it to print
 

1199
00:22:05,760 --> 00:22:06,950
there's a way in qmu to ask it to print
the current page table

1200
00:22:06,950 --> 00:22:06,960
the current page table
 

1201
00:22:06,960 --> 00:22:10,149
the current page table
and if i print ctrl a c i get into the

1202
00:22:10,149 --> 00:22:10,159
and if i print ctrl a c i get into the
 

1203
00:22:10,159 --> 00:22:11,430
and if i print ctrl a c i get into the
qmu

1204
00:22:11,430 --> 00:22:11,440
qmu
 

1205
00:22:11,440 --> 00:22:14,149
qmu
monitor or console and if i then type

1206
00:22:14,149 --> 00:22:14,159
monitor or console and if i then type
 

1207
00:22:14,159 --> 00:22:16,230
monitor or console and if i then type
info mam

1208
00:22:16,230 --> 00:22:16,240
info mam
 

1209
00:22:16,240 --> 00:22:19,430
info mam
it'll print the complete page table

1210
00:22:19,430 --> 00:22:19,440
it'll print the complete page table
 

1211
00:22:19,440 --> 00:22:21,029
it'll print the complete page table
now this is a very small page table that

1212
00:22:21,029 --> 00:22:21,039
now this is a very small page table that
 

1213
00:22:21,039 --> 00:22:23,669
now this is a very small page table that
contains only six mappings

1214
00:22:23,669 --> 00:22:23,679
contains only six mappings
 

1215
00:22:23,679 --> 00:22:25,190
contains only six mappings
of course it's the page table for the

1216
00:22:25,190 --> 00:22:25,200
of course it's the page table for the
 

1217
00:22:25,200 --> 00:22:28,070
of course it's the page table for the
shell shell's a pretty small

1218
00:22:28,070 --> 00:22:28,080
shell shell's a pretty small
 

1219
00:22:28,080 --> 00:22:30,950
shell shell's a pretty small
program and these six mappings are in

1220
00:22:30,950 --> 00:22:30,960
program and these six mappings are in
 

1221
00:22:30,960 --> 00:22:31,909
program and these six mappings are in
order

1222
00:22:31,909 --> 00:22:31,919
order
 

1223
00:22:31,919 --> 00:22:34,950
order
the shell's instructions the shell's

1224
00:22:34,950 --> 00:22:34,960
the shell's instructions the shell's
 

1225
00:22:34,960 --> 00:22:35,830
the shell's instructions the shell's
data

1226
00:22:35,830 --> 00:22:35,840
data
 

1227
00:22:35,840 --> 00:22:39,510
data
an invalid page which access the

1228
00:22:39,510 --> 00:22:39,520
an invalid page which access the
 

1229
00:22:39,520 --> 00:22:41,510
an invalid page which access the
stack a guard page in case the shuttle

1230
00:22:41,510 --> 00:22:41,520
stack a guard page in case the shuttle
 

1231
00:22:41,520 --> 00:22:43,350
stack a guard page in case the shuttle
tries to use too much stack space

1232
00:22:43,350 --> 00:22:43,360
tries to use too much stack space
 

1233
00:22:43,360 --> 00:22:45,430
tries to use too much stack space
and we can see it's invalid because it

1234
00:22:45,430 --> 00:22:45,440
and we can see it's invalid because it
 

1235
00:22:45,440 --> 00:22:47,350
and we can see it's invalid because it
doesn't have the u flag set

1236
00:22:47,350 --> 00:22:47,360
doesn't have the u flag set
 

1237
00:22:47,360 --> 00:22:50,789
doesn't have the u flag set
over here in this attribute or flag

1238
00:22:50,789 --> 00:22:50,799
over here in this attribute or flag
 

1239
00:22:50,799 --> 00:22:52,630
over here in this attribute or flag
column

1240
00:22:52,630 --> 00:22:52,640
column
 

1241
00:22:52,640 --> 00:22:54,789
column
these are all the pte underscore flags

1242
00:22:54,789 --> 00:22:54,799
these are all the pte underscore flags
 

1243
00:22:54,799 --> 00:22:55,909
these are all the pte underscore flags
rw and x are

1244
00:22:55,909 --> 00:22:55,919
rw and x are
 

1245
00:22:55,919 --> 00:22:57,990
rw and x are
just control whether a page can be read

1246
00:22:57,990 --> 00:22:58,000
just control whether a page can be read
 

1247
00:22:58,000 --> 00:22:59,909
just control whether a page can be read
or written or executed

1248
00:22:59,909 --> 00:22:59,919
or written or executed
 

1249
00:22:59,919 --> 00:23:01,669
or written or executed
the next column is you and that's

1250
00:23:01,669 --> 00:23:01,679
the next column is you and that's
 

1251
00:23:01,679 --> 00:23:03,669
the next column is you and that's
whether or not the pteu flag is set and

1252
00:23:03,669 --> 00:23:03,679
whether or not the pteu flag is set and
 

1253
00:23:03,679 --> 00:23:05,430
whether or not the pteu flag is set and
user code can only get at

1254
00:23:05,430 --> 00:23:05,440
user code can only get at
 

1255
00:23:05,440 --> 00:23:08,310
user code can only get at
pde entries for which the u flag is set

1256
00:23:08,310 --> 00:23:08,320
pde entries for which the u flag is set
 

1257
00:23:08,320 --> 00:23:12,789
pde entries for which the u flag is set
um

1258
00:23:12,789 --> 00:23:12,799

 

1259
00:23:12,799 --> 00:23:14,310

i don't know what the next column is i

1260
00:23:14,310 --> 00:23:14,320
i don't know what the next column is i
 

1261
00:23:14,320 --> 00:23:16,630
i don't know what the next column is i
have to admit and the next column is a

1262
00:23:16,630 --> 00:23:16,640
have to admit and the next column is a
 

1263
00:23:16,640 --> 00:23:18,390
have to admit and the next column is a
for whether the page table entries have

1264
00:23:18,390 --> 00:23:18,400
for whether the page table entries have
 

1265
00:23:18,400 --> 00:23:19,590
for whether the page table entries have
ever been used and

1266
00:23:19,590 --> 00:23:19,600
ever been used and
 

1267
00:23:19,600 --> 00:23:22,630
ever been used and
d for whether or write has ever been

1268
00:23:22,630 --> 00:23:22,640
d for whether or write has ever been
 

1269
00:23:22,640 --> 00:23:28,149
d for whether or write has ever been
issued for this address

1270
00:23:28,149 --> 00:23:28,159

 

1271
00:23:28,159 --> 00:23:29,830

okay so we have this tiny page and the

1272
00:23:29,830 --> 00:23:29,840
okay so we have this tiny page and the
 

1273
00:23:29,840 --> 00:23:31,909
okay so we have this tiny page and the
last two page table entries by the way

1274
00:23:31,909 --> 00:23:31,919
last two page table entries by the way
 

1275
00:23:31,919 --> 00:23:32,630
last two page table entries by the way
are way up

1276
00:23:32,630 --> 00:23:32,640
are way up
 

1277
00:23:32,640 --> 00:23:36,630
are way up
at um enormous virtual addresses

1278
00:23:36,630 --> 00:23:36,640
at um enormous virtual addresses
 

1279
00:23:36,640 --> 00:23:38,950
at um enormous virtual addresses
close to the very close to the top of

1280
00:23:38,950 --> 00:23:38,960
close to the very close to the top of
 

1281
00:23:38,960 --> 00:23:40,549
close to the very close to the top of
the virtual address space

1282
00:23:40,549 --> 00:23:40,559
the virtual address space
 

1283
00:23:40,559 --> 00:23:43,430
the virtual address space
and this is these two um as you read

1284
00:23:43,430 --> 00:23:43,440
and this is these two um as you read
 

1285
00:23:43,440 --> 00:23:44,630
and this is these two um as you read
about in the book and we'll hear much

1286
00:23:44,630 --> 00:23:44,640
about in the book and we'll hear much
 

1287
00:23:44,640 --> 00:23:46,710
about in the book and we'll hear much
more about are the trap frame page

1288
00:23:46,710 --> 00:23:46,720
more about are the trap frame page
 

1289
00:23:46,720 --> 00:23:49,029
more about are the trap frame page
and now the trampoline page and as you

1290
00:23:49,029 --> 00:23:49,039
and now the trampoline page and as you
 

1291
00:23:49,039 --> 00:23:50,870
and now the trampoline page and as you
can see neither of them

1292
00:23:50,870 --> 00:23:50,880
can see neither of them
 

1293
00:23:50,880 --> 00:23:54,230
can see neither of them
has the u-bits set so user code can't

1294
00:23:54,230 --> 00:23:54,240
has the u-bits set so user code can't
 

1295
00:23:54,240 --> 00:23:55,510
has the u-bits set so user code can't
get at either of these

1296
00:23:55,510 --> 00:23:55,520
get at either of these
 

1297
00:23:55,520 --> 00:23:57,750
get at either of these
can't use either of these addresses but

1298
00:23:57,750 --> 00:23:57,760
can't use either of these addresses but
 

1299
00:23:57,760 --> 00:23:59,350
can't use either of these addresses but
once we enter supervisor mode we can get

1300
00:23:59,350 --> 00:23:59,360
once we enter supervisor mode we can get
 

1301
00:23:59,360 --> 00:24:05,029
once we enter supervisor mode we can get
at these two pages

1302
00:24:05,029 --> 00:24:05,039
at these two pages
 

1303
00:24:05,039 --> 00:24:08,549
at these two pages
all right um one thing you notice about

1304
00:24:08,549 --> 00:24:08,559
all right um one thing you notice about
 

1305
00:24:08,559 --> 00:24:09,990
all right um one thing you notice about
this page table

1306
00:24:09,990 --> 00:24:10,000
this page table
 

1307
00:24:10,000 --> 00:24:11,510
this page table
is there's no mappings for anything in

1308
00:24:11,510 --> 00:24:11,520
is there's no mappings for anything in
 

1309
00:24:11,520 --> 00:24:13,350
is there's no mappings for anything in
the kernel you know there's no physical

1310
00:24:13,350 --> 00:24:13,360
the kernel you know there's no physical
 

1311
00:24:13,360 --> 00:24:15,029
the kernel you know there's no physical
address mappings there's no mappings for

1312
00:24:15,029 --> 00:24:15,039
address mappings there's no mappings for
 

1313
00:24:15,039 --> 00:24:16,549
address mappings there's no mappings for
the kernel's data or the kernel's

1314
00:24:16,549 --> 00:24:16,559
the kernel's data or the kernel's
 

1315
00:24:16,559 --> 00:24:18,070
the kernel's data or the kernel's
instructions or anything else

1316
00:24:18,070 --> 00:24:18,080
instructions or anything else
 

1317
00:24:18,080 --> 00:24:20,310
instructions or anything else
this is uh except for the last two just

1318
00:24:20,310 --> 00:24:20,320
this is uh except for the last two just
 

1319
00:24:20,320 --> 00:24:21,990
this is uh except for the last two just
the very last two pages

1320
00:24:21,990 --> 00:24:22,000
the very last two pages
 

1321
00:24:22,000 --> 00:24:23,669
the very last two pages
now this is a page table almost entirely

1322
00:24:23,669 --> 00:24:23,679
now this is a page table almost entirely
 

1323
00:24:23,679 --> 00:24:26,070
now this is a page table almost entirely
dedicated to user execution and is not

1324
00:24:26,070 --> 00:24:26,080
dedicated to user execution and is not
 

1325
00:24:26,080 --> 00:24:27,909
dedicated to user execution and is not
directly particularly useful for

1326
00:24:27,909 --> 00:24:27,919
directly particularly useful for
 

1327
00:24:27,919 --> 00:24:30,310
directly particularly useful for
executing the kernel

1328
00:24:30,310 --> 00:24:30,320
executing the kernel
 

1329
00:24:30,320 --> 00:24:33,110
executing the kernel
all right what's the what's the a

1330
00:24:33,110 --> 00:24:33,120
all right what's the what's the a
 

1331
00:24:33,120 --> 00:24:34,310
all right what's the what's the a
attribute on the

1332
00:24:34,310 --> 00:24:34,320
attribute on the
 

1333
00:24:34,320 --> 00:24:37,269
attribute on the
on the page table listing on the top i

1334
00:24:37,269 --> 00:24:37,279
on the page table listing on the top i
 

1335
00:24:37,279 --> 00:24:38,789
on the page table listing on the top i
believe this means the page table has

1336
00:24:38,789 --> 00:24:38,799
believe this means the page table has
 

1337
00:24:38,799 --> 00:24:39,990
believe this means the page table has
ever been

1338
00:24:39,990 --> 00:24:40,000
ever been
 

1339
00:24:40,000 --> 00:24:41,909
ever been
this page table entry has ever been

1340
00:24:41,909 --> 00:24:41,919
this page table entry has ever been
 

1341
00:24:41,919 --> 00:24:43,029
this page table entry has ever been
accessed

1342
00:24:43,029 --> 00:24:43,039
accessed
 

1343
00:24:43,039 --> 00:24:46,230
accessed
uh by code that is

1344
00:24:46,230 --> 00:24:46,240
uh by code that is
 

1345
00:24:46,240 --> 00:24:49,029
uh by code that is
whether it's ever issued an address that

1346
00:24:49,029 --> 00:24:49,039
whether it's ever issued an address that
 

1347
00:24:49,039 --> 00:24:52,149
whether it's ever issued an address that
refers to this page table entry

1348
00:24:52,149 --> 00:24:52,159
refers to this page table entry
 

1349
00:24:52,159 --> 00:24:54,630
refers to this page table entry
um and the d is whether the program has

1350
00:24:54,630 --> 00:24:54,640
um and the d is whether the program has
 

1351
00:24:54,640 --> 00:24:56,630
um and the d is whether the program has
ever written

1352
00:24:56,630 --> 00:24:56,640
ever written
 

1353
00:24:56,640 --> 00:24:59,990
ever written
uh ever done a store through this

1354
00:24:59,990 --> 00:25:00,000
uh ever done a store through this
 

1355
00:25:00,000 --> 00:25:02,950
uh ever done a store through this
page table entry and these are bits that

1356
00:25:02,950 --> 00:25:02,960
page table entry and these are bits that
 

1357
00:25:02,960 --> 00:25:04,549
page table entry and these are bits that
the hardware maintains for the

1358
00:25:04,549 --> 00:25:04,559
the hardware maintains for the
 

1359
00:25:04,559 --> 00:25:06,149
the hardware maintains for the
convenience of the operating system and

1360
00:25:06,149 --> 00:25:06,159
convenience of the operating system and
 

1361
00:25:06,159 --> 00:25:07,669
convenience of the operating system and
operating systems more sophisticated

1362
00:25:07,669 --> 00:25:07,679
operating systems more sophisticated
 

1363
00:25:07,679 --> 00:25:08,070
operating systems more sophisticated
than

1364
00:25:08,070 --> 00:25:08,080
than
 

1365
00:25:08,080 --> 00:25:12,470
than
xv6 may need to evict pages

1366
00:25:12,470 --> 00:25:12,480
xv6 may need to evict pages
 

1367
00:25:12,480 --> 00:25:13,669
xv6 may need to evict pages
if they're running short on physical

1368
00:25:13,669 --> 00:25:13,679
if they're running short on physical
 

1369
00:25:13,679 --> 00:25:15,830
if they're running short on physical
memory they may need to write

1370
00:25:15,830 --> 00:25:15,840
memory they may need to write
 

1371
00:25:15,840 --> 00:25:18,950
memory they may need to write
some pages of memory to disk and

1372
00:25:18,950 --> 00:25:18,960
some pages of memory to disk and
 

1373
00:25:18,960 --> 00:25:21,110
some pages of memory to disk and
invalidate the page table entries to

1374
00:25:21,110 --> 00:25:21,120
invalidate the page table entries to
 

1375
00:25:21,120 --> 00:25:22,950
invalidate the page table entries to
free up the physical memory

1376
00:25:22,950 --> 00:25:22,960
free up the physical memory
 

1377
00:25:22,960 --> 00:25:25,590
free up the physical memory
and many policies you could imagine a

1378
00:25:25,590 --> 00:25:25,600
and many policies you could imagine a
 

1379
00:25:25,600 --> 00:25:27,110
and many policies you could imagine a
operating system using to

1380
00:25:27,110 --> 00:25:27,120
operating system using to
 

1381
00:25:27,120 --> 00:25:29,190
operating system using to
pick which pages to exist um we'll

1382
00:25:29,190 --> 00:25:29,200
pick which pages to exist um we'll
 

1383
00:25:29,200 --> 00:25:30,950
pick which pages to exist um we'll
consult the a bits to see whether this

1384
00:25:30,950 --> 00:25:30,960
consult the a bits to see whether this
 

1385
00:25:30,960 --> 00:25:33,510
consult the a bits to see whether this
page table entry has ever even been used

1386
00:25:33,510 --> 00:25:33,520
page table entry has ever even been used
 

1387
00:25:33,520 --> 00:25:34,950
page table entry has ever even been used
um and if it hasn't been used or haven't

1388
00:25:34,950 --> 00:25:34,960
um and if it hasn't been used or haven't
 

1389
00:25:34,960 --> 00:25:36,549
um and if it hasn't been used or haven't
been used recently then

1390
00:25:36,549 --> 00:25:36,559
been used recently then
 

1391
00:25:36,559 --> 00:25:38,870
been used recently then
that's a good candidate for evicting to

1392
00:25:38,870 --> 00:25:38,880
that's a good candidate for evicting to
 

1393
00:25:38,880 --> 00:25:40,870
that's a good candidate for evicting to
disk

1394
00:25:40,870 --> 00:25:40,880
disk
 

1395
00:25:40,880 --> 00:25:44,390
disk
and the d tells the kernel that

1396
00:25:44,390 --> 00:25:44,400
and the d tells the kernel that
 

1397
00:25:44,400 --> 00:25:47,190
and the d tells the kernel that
oh this page has actually been written

1398
00:25:47,190 --> 00:25:47,200
oh this page has actually been written
 

1399
00:25:47,200 --> 00:25:50,710
oh this page has actually been written
since it was read from disk

1400
00:25:50,710 --> 00:25:50,720

 

1401
00:25:50,720 --> 00:25:55,430

xp6 doesn't actually use either of these

1402
00:25:55,430 --> 00:25:55,440

 

1403
00:25:55,440 --> 00:26:02,390

all right other questions

1404
00:26:02,390 --> 00:26:02,400

 

1405
00:26:02,400 --> 00:26:05,720

all right let's execute the um

1406
00:26:05,720 --> 00:26:05,730
all right let's execute the um
 

1407
00:26:05,730 --> 00:26:07,029
all right let's execute the um
[Music]

1408
00:26:07,029 --> 00:26:07,039
[Music]
 

1409
00:26:07,039 --> 00:26:09,110
[Music]
let me just remind us where we are i'm

1410
00:26:09,110 --> 00:26:09,120
let me just remind us where we are i'm
 

1411
00:26:09,120 --> 00:26:10,390
let me just remind us where we are i'm
going to print out the

1412
00:26:10,390 --> 00:26:10,400
going to print out the
 

1413
00:26:10,400 --> 00:26:11,990
going to print out the
contents of the right we're in the right

1414
00:26:11,990 --> 00:26:12,000
contents of the right we're in the right
 

1415
00:26:12,000 --> 00:26:13,669
contents of the right we're in the right
library function

1416
00:26:13,669 --> 00:26:13,679
library function
 

1417
00:26:13,679 --> 00:26:16,870
library function
in uh

1418
00:26:16,870 --> 00:26:16,880

 

1419
00:26:16,880 --> 00:26:19,269

in the shell and the program counter is

1420
00:26:19,269 --> 00:26:19,279
in the shell and the program counter is
 

1421
00:26:19,279 --> 00:26:20,630
in the shell and the program counter is
pointing to the e-call instruction we're

1422
00:26:20,630 --> 00:26:20,640
pointing to the e-call instruction we're
 

1423
00:26:20,640 --> 00:26:23,110
pointing to the e-call instruction we're
about to execute the e-call instruction

1424
00:26:23,110 --> 00:26:23,120
about to execute the e-call instruction
 

1425
00:26:23,120 --> 00:26:24,470
about to execute the e-call instruction
we're still in user space but we won't

1426
00:26:24,470 --> 00:26:24,480
we're still in user space but we won't
 

1427
00:26:24,480 --> 00:26:26,710
we're still in user space but we won't
be for long um

1428
00:26:26,710 --> 00:26:26,720
be for long um
 

1429
00:26:26,720 --> 00:26:30,310
be for long um
boom i executed the e-call instruction

1430
00:26:30,310 --> 00:26:30,320
boom i executed the e-call instruction
 

1431
00:26:30,320 --> 00:26:33,510
boom i executed the e-call instruction
okay so first question is where are we

1432
00:26:33,510 --> 00:26:33,520
okay so first question is where are we
 

1433
00:26:33,520 --> 00:26:36,390
okay so first question is where are we
after the e-call we can look at the

1434
00:26:36,390 --> 00:26:36,400
after the e-call we can look at the
 

1435
00:26:36,400 --> 00:26:38,470
after the e-call we can look at the
program counter

1436
00:26:38,470 --> 00:26:38,480
program counter
 

1437
00:26:38,480 --> 00:26:40,470
program counter
we see this now used to be a very low

1438
00:26:40,470 --> 00:26:40,480
we see this now used to be a very low
 

1439
00:26:40,480 --> 00:26:42,710
we see this now used to be a very low
number de6 now it's a very high number

1440
00:26:42,710 --> 00:26:42,720
number de6 now it's a very high number
 

1441
00:26:42,720 --> 00:26:44,230
number de6 now it's a very high number
in fact we look at the the program

1442
00:26:44,230 --> 00:26:44,240
in fact we look at the the program
 

1443
00:26:44,240 --> 00:26:46,149
in fact we look at the the program
counter as a virtual address

1444
00:26:46,149 --> 00:26:46,159
counter as a virtual address
 

1445
00:26:46,159 --> 00:26:50,149
counter as a virtual address
like all addresses that instructions use

1446
00:26:50,149 --> 00:26:50,159
like all addresses that instructions use
 

1447
00:26:50,159 --> 00:26:52,390
like all addresses that instructions use
and we can look in the page table

1448
00:26:52,390 --> 00:26:52,400
and we can look in the page table
 

1449
00:26:52,400 --> 00:26:53,590
and we can look in the page table
actually let's just check what the page

1450
00:26:53,590 --> 00:26:53,600
actually let's just check what the page
 

1451
00:26:53,600 --> 00:26:54,390
actually let's just check what the page
table is

1452
00:26:54,390 --> 00:26:54,400
table is
 

1453
00:26:54,400 --> 00:26:58,070
table is
just be sure i'm going to ask qmu for

1454
00:26:58,070 --> 00:26:58,080
just be sure i'm going to ask qmu for
 

1455
00:26:58,080 --> 00:26:59,590
just be sure i'm going to ask qmu for
info mam again

1456
00:26:59,590 --> 00:26:59,600
info mam again
 

1457
00:26:59,600 --> 00:27:02,230
info mam again
it's the very same page table so

1458
00:27:02,230 --> 00:27:02,240
it's the very same page table so
 

1459
00:27:02,240 --> 00:27:03,510
it's the very same page table so
nothing's changed there

1460
00:27:03,510 --> 00:27:03,520
nothing's changed there
 

1461
00:27:03,520 --> 00:27:05,909
nothing's changed there
we'll look up our new current program

1462
00:27:05,909 --> 00:27:05,919
we'll look up our new current program
 

1463
00:27:05,919 --> 00:27:06,630
we'll look up our new current program
counter there

1464
00:27:06,630 --> 00:27:06,640
counter there
 

1465
00:27:06,640 --> 00:27:10,149
counter there
the program counter is at the

1466
00:27:10,149 --> 00:27:10,159
the program counter is at the
 

1467
00:27:10,159 --> 00:27:11,510
the program counter is at the
right at the beginning of this

1468
00:27:11,510 --> 00:27:11,520
right at the beginning of this
 

1469
00:27:11,520 --> 00:27:13,830
right at the beginning of this
trampoline page that's mapped

1470
00:27:13,830 --> 00:27:13,840
trampoline page that's mapped
 

1471
00:27:13,840 --> 00:27:17,430
trampoline page that's mapped
way up high and in the user memory

1472
00:27:17,430 --> 00:27:17,440
way up high and in the user memory
 

1473
00:27:17,440 --> 00:27:19,269
way up high and in the user memory
that's where we're executing we can see

1474
00:27:19,269 --> 00:27:19,279
that's where we're executing we can see
 

1475
00:27:19,279 --> 00:27:21,269
that's where we're executing we can see
the instructions that are there

1476
00:27:21,269 --> 00:27:21,279
the instructions that are there
 

1477
00:27:21,279 --> 00:27:31,510
the instructions that are there
i'm going to use

1478
00:27:31,510 --> 00:27:31,520

 

1479
00:27:31,520 --> 00:27:34,549

these are the instructions

1480
00:27:34,549 --> 00:27:34,559
these are the instructions
 

1481
00:27:34,559 --> 00:27:36,389
these are the instructions
the very first instructions that the

1482
00:27:36,389 --> 00:27:36,399
the very first instructions that the
 

1483
00:27:36,399 --> 00:27:38,470
the very first instructions that the
kernel executes in supervisor mode at

1484
00:27:38,470 --> 00:27:38,480
kernel executes in supervisor mode at
 

1485
00:27:38,480 --> 00:27:39,110
kernel executes in supervisor mode at
the beginning

1486
00:27:39,110 --> 00:27:39,120
the beginning
 

1487
00:27:39,120 --> 00:27:40,950
the beginning
very beginning of the trap and through

1488
00:27:40,950 --> 00:27:40,960
very beginning of the trap and through
 

1489
00:27:40,960 --> 00:27:42,789
very beginning of the trap and through
some weirdness in gdb we've actually

1490
00:27:42,789 --> 00:27:42,799
some weirdness in gdb we've actually
 

1491
00:27:42,799 --> 00:27:45,430
some weirdness in gdb we've actually
already executed the first instruction

1492
00:27:45,430 --> 00:27:45,440
already executed the first instruction
 

1493
00:27:45,440 --> 00:27:49,029
already executed the first instruction
at the very beginning of this page

1494
00:27:49,029 --> 00:27:49,039
at the very beginning of this page
 

1495
00:27:49,039 --> 00:27:51,269
at the very beginning of this page
and we're about to execute the second

1496
00:27:51,269 --> 00:27:51,279
and we're about to execute the second
 

1497
00:27:51,279 --> 00:27:53,430
and we're about to execute the second
instruction

1498
00:27:53,430 --> 00:27:53,440
instruction
 

1499
00:27:53,440 --> 00:27:57,029
instruction
we can look at the registers

1500
00:27:57,029 --> 00:27:57,039

 

1501
00:27:57,039 --> 00:27:58,070

i don't know if you remember these

1502
00:27:58,070 --> 00:27:58,080
i don't know if you remember these
 

1503
00:27:58,080 --> 00:28:00,230
i don't know if you remember these
register values but nothing has changed

1504
00:28:00,230 --> 00:28:00,240
register values but nothing has changed
 

1505
00:28:00,240 --> 00:28:02,070
register values but nothing has changed
here these are exactly the same register

1506
00:28:02,070 --> 00:28:02,080
here these are exactly the same register
 

1507
00:28:02,080 --> 00:28:04,470
here these are exactly the same register
contents that the user program has

1508
00:28:04,470 --> 00:28:04,480
contents that the user program has
 

1509
00:28:04,480 --> 00:28:06,789
contents that the user program has
had so these are all full of user values

1510
00:28:06,789 --> 00:28:06,799
had so these are all full of user values
 

1511
00:28:06,799 --> 00:28:07,590
had so these are all full of user values
for many of them

1512
00:28:07,590 --> 00:28:07,600
for many of them
 

1513
00:28:07,600 --> 00:28:09,430
for many of them
or all of them for all we know they're

1514
00:28:09,430 --> 00:28:09,440
or all of them for all we know they're
 

1515
00:28:09,440 --> 00:28:11,350
or all of them for all we know they're
the only locations these value exists so

1516
00:28:11,350 --> 00:28:11,360
the only locations these value exists so
 

1517
00:28:11,360 --> 00:28:12,870
the only locations these value exists so
we have to be very careful that we can't

1518
00:28:12,870 --> 00:28:12,880
we have to be very careful that we can't
 

1519
00:28:12,880 --> 00:28:13,669
we have to be very careful that we can't
actually use

1520
00:28:13,669 --> 00:28:13,679
actually use
 

1521
00:28:13,679 --> 00:28:16,710
actually use
any registers at this point without

1522
00:28:16,710 --> 00:28:16,720
any registers at this point without
 

1523
00:28:16,720 --> 00:28:19,029
any registers at this point without
first saving those registers somewhere

1524
00:28:19,029 --> 00:28:19,039
first saving those registers somewhere
 

1525
00:28:19,039 --> 00:28:20,470
first saving those registers somewhere
so we can restore them

1526
00:28:20,470 --> 00:28:20,480
so we can restore them
 

1527
00:28:20,480 --> 00:28:22,070
so we can restore them
because if the kernel was to use any of

1528
00:28:22,070 --> 00:28:22,080
because if the kernel was to use any of
 

1529
00:28:22,080 --> 00:28:23,830
because if the kernel was to use any of
these registers at this point it would

1530
00:28:23,830 --> 00:28:23,840
these registers at this point it would
 

1531
00:28:23,840 --> 00:28:27,990
these registers at this point it would
overwrite whatever that user value is

1532
00:28:27,990 --> 00:28:28,000
overwrite whatever that user value is
 

1533
00:28:28,000 --> 00:28:29,669
overwrite whatever that user value is
and then if we try to resume the user

1534
00:28:29,669 --> 00:28:29,679
and then if we try to resume the user
 

1535
00:28:29,679 --> 00:28:30,950
and then if we try to resume the user
program we wouldn't be able to set up

1536
00:28:30,950 --> 00:28:30,960
program we wouldn't be able to set up
 

1537
00:28:30,960 --> 00:28:32,789
program we wouldn't be able to set up
its registers with the correct values

1538
00:28:32,789 --> 00:28:32,799
its registers with the correct values
 

1539
00:28:32,799 --> 00:28:33,590
its registers with the correct values
and the

1540
00:28:33,590 --> 00:28:33,600
and the
 

1541
00:28:33,600 --> 00:28:35,190
and the
user program would just do something

1542
00:28:35,190 --> 00:28:35,200
user program would just do something
 

1543
00:28:35,200 --> 00:28:37,029
user program would just do something
totally wrong

1544
00:28:37,029 --> 00:28:37,039
totally wrong
 

1545
00:28:37,039 --> 00:28:40,310
totally wrong
um a question yes could you return to

1546
00:28:40,310 --> 00:28:40,320
um a question yes could you return to
 

1547
00:28:40,320 --> 00:28:40,630
um a question yes could you return to
the

1548
00:28:40,630 --> 00:28:40,640
the
 

1549
00:28:40,640 --> 00:28:43,269
the
instructions panel that you had before

1550
00:28:43,269 --> 00:28:43,279
instructions panel that you had before
 

1551
00:28:43,279 --> 00:28:46,230
instructions panel that you had before
i'm wondering what the crrw

1552
00:28:46,230 --> 00:28:46,240
i'm wondering what the crrw
 

1553
00:28:46,240 --> 00:28:51,269
i'm wondering what the crrw
instruction is doing

1554
00:28:51,269 --> 00:28:51,279

 

1555
00:28:51,279 --> 00:28:54,070

the csr rw okay we'll talk about this uh

1556
00:28:54,070 --> 00:28:54,080
the csr rw okay we'll talk about this uh
 

1557
00:28:54,080 --> 00:28:55,430
the csr rw okay we'll talk about this uh
in in a few minutes

1558
00:28:55,430 --> 00:28:55,440
in in a few minutes
 

1559
00:28:55,440 --> 00:28:57,269
in in a few minutes
um but the answer to your question is

1560
00:28:57,269 --> 00:28:57,279
um but the answer to your question is
 

1561
00:28:57,279 --> 00:28:59,510
um but the answer to your question is
that instruction swaps

1562
00:28:59,510 --> 00:28:59,520
that instruction swaps
 

1563
00:28:59,520 --> 00:29:02,710
that instruction swaps
a0 with the contents of the special

1564
00:29:02,710 --> 00:29:02,720
a0 with the contents of the special
 

1565
00:29:02,720 --> 00:29:07,029
a0 with the contents of the special
scratch register um and so in

1566
00:29:07,029 --> 00:29:07,039
scratch register um and so in
 

1567
00:29:07,039 --> 00:29:09,110
scratch register um and so in
yeah okay and this is like super

1568
00:29:09,110 --> 00:29:09,120
yeah okay and this is like super
 

1569
00:29:09,120 --> 00:29:10,389
yeah okay and this is like super
important

1570
00:29:10,389 --> 00:29:10,399
important
 

1571
00:29:10,399 --> 00:29:12,789
important
and basically answers the question how

1572
00:29:12,789 --> 00:29:12,799
and basically answers the question how
 

1573
00:29:12,799 --> 00:29:13,590
and basically answers the question how
can the

1574
00:29:13,590 --> 00:29:13,600
can the
 

1575
00:29:13,600 --> 00:29:15,590
can the
this kernel trap code do anything if it

1576
00:29:15,590 --> 00:29:15,600
this kernel trap code do anything if it
 

1577
00:29:15,600 --> 00:29:17,430
this kernel trap code do anything if it
can't use any registers

1578
00:29:17,430 --> 00:29:17,440
can't use any registers
 

1579
00:29:17,440 --> 00:29:19,029
can't use any registers
the answer to that question is it exit

1580
00:29:19,029 --> 00:29:19,039
the answer to that question is it exit
 

1581
00:29:19,039 --> 00:29:21,549
the answer to that question is it exit
really has to execute this

1582
00:29:21,549 --> 00:29:21,559
really has to execute this
 

1583
00:29:21,559 --> 00:29:25,110
really has to execute this
csrw a0 scratch instruction

1584
00:29:25,110 --> 00:29:25,120
csrw a0 scratch instruction
 

1585
00:29:25,120 --> 00:29:28,549
csrw a0 scratch instruction
that simultaneously saves a0 in scratch

1586
00:29:28,549 --> 00:29:28,559
that simultaneously saves a0 in scratch
 

1587
00:29:28,559 --> 00:29:31,750
that simultaneously saves a0 in scratch
and happens to load scratch into a0

1588
00:29:31,750 --> 00:29:31,760
and happens to load scratch into a0
 

1589
00:29:31,760 --> 00:29:34,149
and happens to load scratch into a0
so now the kernel can use a0 for

1590
00:29:34,149 --> 00:29:34,159
so now the kernel can use a0 for
 

1591
00:29:34,159 --> 00:29:35,110
so now the kernel can use a0 for
whatever it wants to

1592
00:29:35,110 --> 00:29:35,120
whatever it wants to
 

1593
00:29:35,120 --> 00:29:38,950
whatever it wants to
after this instruction

1594
00:29:38,950 --> 00:29:38,960

 

1595
00:29:38,960 --> 00:29:42,389

okay thanks yeah okay so

1596
00:29:42,389 --> 00:29:42,399
okay thanks yeah okay so
 

1597
00:29:42,399 --> 00:29:44,750
okay thanks yeah okay so
we're currently this address this three

1598
00:29:44,750 --> 00:29:44,760
we're currently this address this three
 

1599
00:29:44,760 --> 00:29:45,990
we're currently this address this three
ffff000

1600
00:29:45,990 --> 00:29:46,000
ffff000
 

1601
00:29:46,000 --> 00:29:48,070
ffff000
um this last page is the trampoline page

1602
00:29:48,070 --> 00:29:48,080
um this last page is the trampoline page
 

1603
00:29:48,080 --> 00:29:49,510
um this last page is the trampoline page
and we're currently executing

1604
00:29:49,510 --> 00:29:49,520
and we're currently executing
 

1605
00:29:49,520 --> 00:29:51,750
and we're currently executing
in the trampoline page which contains

1606
00:29:51,750 --> 00:29:51,760
in the trampoline page which contains
 

1607
00:29:51,760 --> 00:29:54,149
in the trampoline page which contains
the very first instructions

1608
00:29:54,149 --> 00:29:54,159
the very first instructions
 

1609
00:29:54,159 --> 00:29:57,990
the very first instructions
of the kernel's trap handling code

1610
00:29:57,990 --> 00:29:58,000
of the kernel's trap handling code
 

1611
00:29:58,000 --> 00:30:00,630
of the kernel's trap handling code
ecall doesn't switch page tables that's

1612
00:30:00,630 --> 00:30:00,640
ecall doesn't switch page tables that's
 

1613
00:30:00,640 --> 00:30:02,310
ecall doesn't switch page tables that's
a very important thing about ecall and

1614
00:30:02,310 --> 00:30:02,320
a very important thing about ecall and
 

1615
00:30:02,320 --> 00:30:03,510
a very important thing about ecall and
what that means is that

1616
00:30:03,510 --> 00:30:03,520
what that means is that
 

1617
00:30:03,520 --> 00:30:05,190
what that means is that
these very first instructions have to be

1618
00:30:05,190 --> 00:30:05,200
these very first instructions have to be
 

1619
00:30:05,200 --> 00:30:08,549
these very first instructions have to be
present in every user page table

1620
00:30:08,549 --> 00:30:08,559
present in every user page table
 

1621
00:30:08,559 --> 00:30:09,909
present in every user page table
because since z-call doesn't switch page

1622
00:30:09,909 --> 00:30:09,919
because since z-call doesn't switch page
 

1623
00:30:09,919 --> 00:30:11,750
because since z-call doesn't switch page
tables we need to be executing the first

1624
00:30:11,750 --> 00:30:11,760
tables we need to be executing the first
 

1625
00:30:11,760 --> 00:30:12,950
tables we need to be executing the first
bit of the kernel

1626
00:30:12,950 --> 00:30:12,960
bit of the kernel
 

1627
00:30:12,960 --> 00:30:14,470
bit of the kernel
somewhere in the user page table and

1628
00:30:14,470 --> 00:30:14,480
somewhere in the user page table and
 

1629
00:30:14,480 --> 00:30:16,070
somewhere in the user page table and
it's this trampoline page

1630
00:30:16,070 --> 00:30:16,080
it's this trampoline page
 

1631
00:30:16,080 --> 00:30:17,510
it's this trampoline page
which the kernel carefully maps into

1632
00:30:17,510 --> 00:30:17,520
which the kernel carefully maps into
 

1633
00:30:17,520 --> 00:30:19,909
which the kernel carefully maps into
every user page table

1634
00:30:19,909 --> 00:30:19,919
every user page table
 

1635
00:30:19,919 --> 00:30:21,909
every user page table
that gives the kernel a place to execute

1636
00:30:21,909 --> 00:30:21,919
that gives the kernel a place to execute
 

1637
00:30:21,919 --> 00:30:23,350
that gives the kernel a place to execute
at the very beginning of a trap when

1638
00:30:23,350 --> 00:30:23,360
at the very beginning of a trap when
 

1639
00:30:23,360 --> 00:30:25,269
at the very beginning of a trap when
we're still using the user page table

1640
00:30:25,269 --> 00:30:25,279
we're still using the user page table
 

1641
00:30:25,279 --> 00:30:28,789
we're still using the user page table
and the way this is controlled

1642
00:30:28,789 --> 00:30:28,799

 

1643
00:30:28,799 --> 00:30:30,549

is through the st vec register this is

1644
00:30:30,549 --> 00:30:30,559
is through the st vec register this is
 

1645
00:30:30,559 --> 00:30:32,389
is through the st vec register this is
another privileged

1646
00:30:32,389 --> 00:30:32,399
another privileged
 

1647
00:30:32,399 --> 00:30:34,389
another privileged
register only readable by the writable

1648
00:30:34,389 --> 00:30:34,399
register only readable by the writable
 

1649
00:30:34,399 --> 00:30:36,070
register only readable by the writable
by the supervisor

1650
00:30:36,070 --> 00:30:36,080
by the supervisor
 

1651
00:30:36,080 --> 00:30:37,750
by the supervisor
and the kernel before it entered user

1652
00:30:37,750 --> 00:30:37,760
and the kernel before it entered user
 

1653
00:30:37,760 --> 00:30:39,669
and the kernel before it entered user
space set up the st vec

1654
00:30:39,669 --> 00:30:39,679
space set up the st vec
 

1655
00:30:39,679 --> 00:30:41,350
space set up the st vec
to point to the place where the colonel

1656
00:30:41,350 --> 00:30:41,360
to point to the place where the colonel
 

1657
00:30:41,360 --> 00:30:42,950
to point to the place where the colonel
wanted traps to go

1658
00:30:42,950 --> 00:30:42,960
wanted traps to go
 

1659
00:30:42,960 --> 00:30:44,470
wanted traps to go
and so as you can see the kernel has

1660
00:30:44,470 --> 00:30:44,480
and so as you can see the kernel has
 

1661
00:30:44,480 --> 00:30:46,630
and so as you can see the kernel has
previously set up this st deck

1662
00:30:46,630 --> 00:30:46,640
previously set up this st deck
 

1663
00:30:46,640 --> 00:30:49,909
previously set up this st deck
to this three ffff000 address which is

1664
00:30:49,909 --> 00:30:49,919
to this three ffff000 address which is
 

1665
00:30:49,919 --> 00:30:52,470
to this three ffff000 address which is
the beginning of the trampoline page

1666
00:30:52,470 --> 00:30:52,480
the beginning of the trampoline page
 

1667
00:30:52,480 --> 00:30:55,350
the beginning of the trampoline page
and it's this st vec register that its

1668
00:30:55,350 --> 00:30:55,360
and it's this st vec register that its
 

1669
00:30:55,360 --> 00:30:57,190
and it's this st vec register that its
contents is the reason why after the

1670
00:30:57,190 --> 00:30:57,200
contents is the reason why after the
 

1671
00:30:57,200 --> 00:30:58,070
contents is the reason why after the
e-call

1672
00:30:58,070 --> 00:30:58,080
e-call
 

1673
00:30:58,080 --> 00:31:01,710
e-call
we ended up executing at this particular

1674
00:31:01,710 --> 00:31:01,720
we ended up executing at this particular
 

1675
00:31:01,720 --> 00:31:04,950
we ended up executing at this particular
place um

1676
00:31:04,950 --> 00:31:04,960
place um
 

1677
00:31:04,960 --> 00:31:06,149
place um
and finally i just want to remind you

1678
00:31:06,149 --> 00:31:06,159
and finally i just want to remind you
 

1679
00:31:06,159 --> 00:31:07,750
and finally i just want to remind you
that even though the trampoline and trap

1680
00:31:07,750 --> 00:31:07,760
that even though the trampoline and trap
 

1681
00:31:07,760 --> 00:31:09,750
that even though the trampoline and trap
frame pages are mapped into the user

1682
00:31:09,750 --> 00:31:09,760
frame pages are mapped into the user
 

1683
00:31:09,760 --> 00:31:11,990
frame pages are mapped into the user
page table user address space

1684
00:31:11,990 --> 00:31:12,000
page table user address space
 

1685
00:31:12,000 --> 00:31:15,029
page table user address space
the user code cannot write them

1686
00:31:15,029 --> 00:31:15,039
the user code cannot write them
 

1687
00:31:15,039 --> 00:31:17,269
the user code cannot write them
because the pdes for them don't have the

1688
00:31:17,269 --> 00:31:17,279
because the pdes for them don't have the
 

1689
00:31:17,279 --> 00:31:19,990
because the pdes for them don't have the
pteu flag so they're protected

1690
00:31:19,990 --> 00:31:20,000
pteu flag so they're protected
 

1691
00:31:20,000 --> 00:31:22,470
pteu flag so they're protected
against user code and that's why this

1692
00:31:22,470 --> 00:31:22,480
against user code and that's why this
 

1693
00:31:22,480 --> 00:31:23,029
against user code and that's why this
trick is

1694
00:31:23,029 --> 00:31:23,039
trick is
 

1695
00:31:23,039 --> 00:31:24,310
trick is
part of the reason why this trick is

1696
00:31:24,310 --> 00:31:24,320
part of the reason why this trick is
 

1697
00:31:24,320 --> 00:31:27,269
part of the reason why this trick is
safe

1698
00:31:27,269 --> 00:31:27,279

 

1699
00:31:27,279 --> 00:31:29,269

um i've been sort of telling you and

1700
00:31:29,269 --> 00:31:29,279
um i've been sort of telling you and
 

1701
00:31:29,279 --> 00:31:31,590
um i've been sort of telling you and
assuming that we're in supervisor mode

1702
00:31:31,590 --> 00:31:31,600
assuming that we're in supervisor mode
 

1703
00:31:31,600 --> 00:31:33,190
assuming that we're in supervisor mode
i don't know any way of finding out what

1704
00:31:33,190 --> 00:31:33,200
i don't know any way of finding out what
 

1705
00:31:33,200 --> 00:31:34,630
i don't know any way of finding out what
mode the machine is in

1706
00:31:34,630 --> 00:31:34,640
mode the machine is in
 

1707
00:31:34,640 --> 00:31:37,830
mode the machine is in
directly but i do observe that the

1708
00:31:37,830 --> 00:31:37,840
directly but i do observe that the
 

1709
00:31:37,840 --> 00:31:39,750
directly but i do observe that the
program counter is currently executing

1710
00:31:39,750 --> 00:31:39,760
program counter is currently executing
 

1711
00:31:39,760 --> 00:31:41,750
program counter is currently executing
in a page the trampoline page

1712
00:31:41,750 --> 00:31:41,760
in a page the trampoline page
 

1713
00:31:41,760 --> 00:31:44,950
in a page the trampoline page
that doesn't have a pdeu flag set

1714
00:31:44,950 --> 00:31:44,960
that doesn't have a pdeu flag set
 

1715
00:31:44,960 --> 00:31:47,110
that doesn't have a pdeu flag set
and that can only happen without a crash

1716
00:31:47,110 --> 00:31:47,120
and that can only happen without a crash
 

1717
00:31:47,120 --> 00:31:49,029
and that can only happen without a crash
if we are in supervisor mode so i

1718
00:31:49,029 --> 00:31:49,039
if we are in supervisor mode so i
 

1719
00:31:49,039 --> 00:31:51,990
if we are in supervisor mode so i
deduce from the lack of a crash um and

1720
00:31:51,990 --> 00:31:52,000
deduce from the lack of a crash um and
 

1721
00:31:52,000 --> 00:31:52,310
deduce from the lack of a crash um and
the

1722
00:31:52,310 --> 00:31:52,320
the
 

1723
00:31:52,320 --> 00:31:53,830
the
value of the program calendar that we

1724
00:31:53,830 --> 00:31:53,840
value of the program calendar that we
 

1725
00:31:53,840 --> 00:31:57,990
value of the program calendar that we
must be in supervisor mode

1726
00:31:57,990 --> 00:31:58,000

 

1727
00:31:58,000 --> 00:32:00,310

how we got here of course uh is through

1728
00:32:00,310 --> 00:32:00,320
how we got here of course uh is through
 

1729
00:32:00,320 --> 00:32:02,470
how we got here of course uh is through
ecall ecall really just changes three

1730
00:32:02,470 --> 00:32:02,480
ecall ecall really just changes three
 

1731
00:32:02,480 --> 00:32:03,350
ecall ecall really just changes three
things

1732
00:32:03,350 --> 00:32:03,360
things
 

1733
00:32:03,360 --> 00:32:06,070
things
um first e call changes mode from user

1734
00:32:06,070 --> 00:32:06,080
um first e call changes mode from user
 

1735
00:32:06,080 --> 00:32:07,830
um first e call changes mode from user
to supervisor

1736
00:32:07,830 --> 00:32:07,840
to supervisor
 

1737
00:32:07,840 --> 00:32:10,310
to supervisor
second ecall saves the program counter

1738
00:32:10,310 --> 00:32:10,320
second ecall saves the program counter
 

1739
00:32:10,320 --> 00:32:13,190
second ecall saves the program counter
register in the sepc register so we can

1740
00:32:13,190 --> 00:32:13,200
register in the sepc register so we can
 

1741
00:32:13,200 --> 00:32:14,870
register in the sepc register so we can
see the effect of that

1742
00:32:14,870 --> 00:32:14,880
see the effect of that
 

1743
00:32:14,880 --> 00:32:16,870
see the effect of that
print the program register program

1744
00:32:16,870 --> 00:32:16,880
print the program register program
 

1745
00:32:16,880 --> 00:32:18,149
print the program register program
counter it's certainly no longer the

1746
00:32:18,149 --> 00:32:18,159
counter it's certainly no longer the
 

1747
00:32:18,159 --> 00:32:19,350
counter it's certainly no longer the
user program counter

1748
00:32:19,350 --> 00:32:19,360
user program counter
 

1749
00:32:19,360 --> 00:32:22,389
user program counter
even though all the other registers were

1750
00:32:22,389 --> 00:32:22,399
even though all the other registers were
 

1751
00:32:22,399 --> 00:32:26,549
even though all the other registers were
it's this value copied from sdvac

1752
00:32:26,549 --> 00:32:26,559
it's this value copied from sdvac
 

1753
00:32:26,559 --> 00:32:30,710
it's this value copied from sdvac
and we can also print uh the saved

1754
00:32:30,710 --> 00:32:30,720
and we can also print uh the saved
 

1755
00:32:30,720 --> 00:32:33,750
and we can also print uh the saved
um it's the supervisor exception program

1756
00:32:33,750 --> 00:32:33,760
um it's the supervisor exception program
 

1757
00:32:33,760 --> 00:32:35,269
um it's the supervisor exception program
counter is what that stands for

1758
00:32:35,269 --> 00:32:35,279
counter is what that stands for
 

1759
00:32:35,279 --> 00:32:37,269
counter is what that stands for
but this is where ecall saves the user

1760
00:32:37,269 --> 00:32:37,279
but this is where ecall saves the user
 

1761
00:32:37,279 --> 00:32:39,509
but this is where ecall saves the user
pro prime counter

1762
00:32:39,509 --> 00:32:39,519
pro prime counter
 

1763
00:32:39,519 --> 00:32:41,990
pro prime counter
and that has the familiar value de6

1764
00:32:41,990 --> 00:32:42,000
and that has the familiar value de6
 

1765
00:32:42,000 --> 00:32:42,710
and that has the familiar value de6
which is

1766
00:32:42,710 --> 00:32:42,720
which is
 

1767
00:32:42,720 --> 00:32:45,830
which is
the address in user space of the e-call

1768
00:32:45,830 --> 00:32:45,840
the address in user space of the e-call
 

1769
00:32:45,840 --> 00:32:47,029
the address in user space of the e-call
instruction

1770
00:32:47,029 --> 00:32:47,039
instruction
 

1771
00:32:47,039 --> 00:32:48,470
instruction
so we got that one register at least

1772
00:32:48,470 --> 00:32:48,480
so we got that one register at least
 

1773
00:32:48,480 --> 00:32:50,389
so we got that one register at least
saved away by e-call

1774
00:32:50,389 --> 00:32:50,399
saved away by e-call
 

1775
00:32:50,399 --> 00:32:52,070
saved away by e-call
and the final thing that e-call does the

1776
00:32:52,070 --> 00:32:52,080
and the final thing that e-call does the
 

1777
00:32:52,080 --> 00:32:53,830
and the final thing that e-call does the
third thing it does is jump

1778
00:32:53,830 --> 00:32:53,840
third thing it does is jump
 

1779
00:32:53,840 --> 00:32:56,789
third thing it does is jump
to the instruction that s t vic points

1780
00:32:56,789 --> 00:32:56,799
to the instruction that s t vic points
 

1781
00:32:56,799 --> 00:33:00,460
to the instruction that s t vic points
to

1782
00:33:00,460 --> 00:33:00,470

 

1783
00:33:00,470 --> 00:33:02,310

[Music]

1784
00:33:02,310 --> 00:33:02,320
[Music]
 

1785
00:33:02,320 --> 00:33:05,990
[Music]
all right um so what needs to happen now

1786
00:33:05,990 --> 00:33:06,000
all right um so what needs to happen now
 

1787
00:33:06,000 --> 00:33:07,269
all right um so what needs to happen now
ecal has done a little bit of work for

1788
00:33:07,269 --> 00:33:07,279
ecal has done a little bit of work for
 

1789
00:33:07,279 --> 00:33:08,149
ecal has done a little bit of work for
us but

1790
00:33:08,149 --> 00:33:08,159
us but
 

1791
00:33:08,159 --> 00:33:09,750
us but
it turns out we're nowhere near ready to

1792
00:33:09,750 --> 00:33:09,760
it turns out we're nowhere near ready to
 

1793
00:33:09,760 --> 00:33:11,509
it turns out we're nowhere near ready to
actually execute ordinary c code in the

1794
00:33:11,509 --> 00:33:11,519
actually execute ordinary c code in the
 

1795
00:33:11,519 --> 00:33:12,470
actually execute ordinary c code in the
kernel

1796
00:33:12,470 --> 00:33:12,480
kernel
 

1797
00:33:12,480 --> 00:33:14,710
kernel
what has to happen now is we need to

1798
00:33:14,710 --> 00:33:14,720
what has to happen now is we need to
 

1799
00:33:14,720 --> 00:33:17,909
what has to happen now is we need to
save the 32 user register contents

1800
00:33:17,909 --> 00:33:17,919
save the 32 user register contents
 

1801
00:33:17,919 --> 00:33:19,669
save the 32 user register contents
so we can later restore them and when we

1802
00:33:19,669 --> 00:33:19,679
so we can later restore them and when we
 

1803
00:33:19,679 --> 00:33:21,830
so we can later restore them and when we
want to resume the user code

1804
00:33:21,830 --> 00:33:21,840
want to resume the user code
 

1805
00:33:21,840 --> 00:33:23,669
want to resume the user code
now we need to switch to the kernel page

1806
00:33:23,669 --> 00:33:23,679
now we need to switch to the kernel page
 

1807
00:33:23,679 --> 00:33:25,190
now we need to switch to the kernel page
table because currently we're using the

1808
00:33:25,190 --> 00:33:25,200
table because currently we're using the
 

1809
00:33:25,200 --> 00:33:26,710
table because currently we're using the
user page table

1810
00:33:26,710 --> 00:33:26,720
user page table
 

1811
00:33:26,720 --> 00:33:28,630
user page table
we need to create a stack or find a

1812
00:33:28,630 --> 00:33:28,640
we need to create a stack or find a
 

1813
00:33:28,640 --> 00:33:29,990
we need to create a stack or find a
stack and set the stack point of

1814
00:33:29,990 --> 00:33:30,000
stack and set the stack point of
 

1815
00:33:30,000 --> 00:33:31,430
stack and set the stack point of
register to point to the

1816
00:33:31,430 --> 00:33:31,440
register to point to the
 

1817
00:33:31,440 --> 00:33:33,830
register to point to the
kernel stack so we can run c code which

1818
00:33:33,830 --> 00:33:33,840
kernel stack so we can run c code which
 

1819
00:33:33,840 --> 00:33:34,950
kernel stack so we can run c code which
requires the stack

1820
00:33:34,950 --> 00:33:34,960
requires the stack
 

1821
00:33:34,960 --> 00:33:36,310
requires the stack
and then we need to actually jump to

1822
00:33:36,310 --> 00:33:36,320
and then we need to actually jump to
 

1823
00:33:36,320 --> 00:33:38,549
and then we need to actually jump to
some sensible place

1824
00:33:38,549 --> 00:33:38,559
some sensible place
 

1825
00:33:38,559 --> 00:33:41,830
some sensible place
in the c code in the kernel now as an

1826
00:33:41,830 --> 00:33:41,840
in the c code in the kernel now as an
 

1827
00:33:41,840 --> 00:33:43,509
in the c code in the kernel now as an
aside

1828
00:33:43,509 --> 00:33:43,519
aside
 

1829
00:33:43,519 --> 00:33:44,870
aside
you know e-call didn't do any of these

1830
00:33:44,870 --> 00:33:44,880
you know e-call didn't do any of these
 

1831
00:33:44,880 --> 00:33:46,950
you know e-call didn't do any of these
things for us um

1832
00:33:46,950 --> 00:33:46,960
things for us um
 

1833
00:33:46,960 --> 00:33:48,789
things for us um
you know but you could have we the

1834
00:33:48,789 --> 00:33:48,799
you know but you could have we the
 

1835
00:33:48,799 --> 00:33:50,710
you know but you could have we the
hardware could have defined e-call to do

1836
00:33:50,710 --> 00:33:50,720
hardware could have defined e-call to do
 

1837
00:33:50,720 --> 00:33:53,430
hardware could have defined e-call to do
much more

1838
00:33:53,430 --> 00:33:53,440
much more
 

1839
00:33:53,440 --> 00:33:55,269
much more
many more of these steps for us instead

1840
00:33:55,269 --> 00:33:55,279
many more of these steps for us instead
 

1841
00:33:55,279 --> 00:33:56,870
many more of these steps for us instead
of leaving them to software and as

1842
00:33:56,870 --> 00:33:56,880
of leaving them to software and as
 

1843
00:33:56,880 --> 00:33:59,350
of leaving them to software and as
we'll see the doing the software is not

1844
00:33:59,350 --> 00:33:59,360
we'll see the doing the software is not
 

1845
00:33:59,360 --> 00:34:01,029
we'll see the doing the software is not
particularly straightforward

1846
00:34:01,029 --> 00:34:01,039
particularly straightforward
 

1847
00:34:01,039 --> 00:34:02,710
particularly straightforward
um so you should ask yourself why the

1848
00:34:02,710 --> 00:34:02,720
um so you should ask yourself why the
 

1849
00:34:02,720 --> 00:34:04,630
um so you should ask yourself why the
ecall doesn't do more of the work

1850
00:34:04,630 --> 00:34:04,640
ecall doesn't do more of the work
 

1851
00:34:04,640 --> 00:34:06,310
ecall doesn't do more of the work
of getting from user space into the

1852
00:34:06,310 --> 00:34:06,320
of getting from user space into the
 

1853
00:34:06,320 --> 00:34:08,550
of getting from user space into the
kernel and why doesn't it

1854
00:34:08,550 --> 00:34:08,560
kernel and why doesn't it
 

1855
00:34:08,560 --> 00:34:11,829
kernel and why doesn't it
save their user registers or switch

1856
00:34:11,829 --> 00:34:11,839
save their user registers or switch
 

1857
00:34:11,839 --> 00:34:13,349
save their user registers or switch
page table pointers to point to the

1858
00:34:13,349 --> 00:34:13,359
page table pointers to point to the
 

1859
00:34:13,359 --> 00:34:15,109
page table pointers to point to the
kernel page table or

1860
00:34:15,109 --> 00:34:15,119
kernel page table or
 

1861
00:34:15,119 --> 00:34:17,030
kernel page table or
automatically set the stack pointer to

1862
00:34:17,030 --> 00:34:17,040
automatically set the stack pointer to
 

1863
00:34:17,040 --> 00:34:18,950
automatically set the stack pointer to
point to the kernel stack

1864
00:34:18,950 --> 00:34:18,960
point to the kernel stack
 

1865
00:34:18,960 --> 00:34:21,589
point to the kernel stack
or jump right to kernel c code geez

1866
00:34:21,589 --> 00:34:21,599
or jump right to kernel c code geez
 

1867
00:34:21,599 --> 00:34:22,790
or jump right to kernel c code geez
rather than having to go through all

1868
00:34:22,790 --> 00:34:22,800
rather than having to go through all
 

1869
00:34:22,800 --> 00:34:23,829
rather than having to go through all
this

1870
00:34:23,829 --> 00:34:23,839
this
 

1871
00:34:23,839 --> 00:34:26,869
this
complicated assembly code

1872
00:34:26,869 --> 00:34:26,879
complicated assembly code
 

1873
00:34:26,879 --> 00:34:28,550
complicated assembly code
and there's actually been machines that

1874
00:34:28,550 --> 00:34:28,560
and there's actually been machines that
 

1875
00:34:28,560 --> 00:34:30,950
and there's actually been machines that
have done all of these things

1876
00:34:30,950 --> 00:34:30,960
have done all of these things
 

1877
00:34:30,960 --> 00:34:35,669
have done all of these things
in hardware during system calls

1878
00:34:35,669 --> 00:34:35,679
in hardware during system calls
 

1879
00:34:35,679 --> 00:34:36,950
in hardware during system calls
the risk five doesn't do any of them

1880
00:34:36,950 --> 00:34:36,960
the risk five doesn't do any of them
 

1881
00:34:36,960 --> 00:34:38,389
the risk five doesn't do any of them
numbers five really the attitude they've

1882
00:34:38,389 --> 00:34:38,399
numbers five really the attitude they've
 

1883
00:34:38,399 --> 00:34:39,669
numbers five really the attitude they've
taken is that ecall

1884
00:34:39,669 --> 00:34:39,679
taken is that ecall
 

1885
00:34:39,679 --> 00:34:41,750
taken is that ecall
does the absolute minimum that's

1886
00:34:41,750 --> 00:34:41,760
does the absolute minimum that's
 

1887
00:34:41,760 --> 00:34:43,829
does the absolute minimum that's
required that it could possibly do and

1888
00:34:43,829 --> 00:34:43,839
required that it could possibly do and
 

1889
00:34:43,839 --> 00:34:45,750
required that it could possibly do and
leave everything else up to software

1890
00:34:45,750 --> 00:34:45,760
leave everything else up to software
 

1891
00:34:45,760 --> 00:34:47,669
leave everything else up to software
and the reason for this is because the

1892
00:34:47,669 --> 00:34:47,679
and the reason for this is because the
 

1893
00:34:47,679 --> 00:34:49,909
and the reason for this is because the
risk 5 designers want to allow maximum

1894
00:34:49,909 --> 00:34:49,919
risk 5 designers want to allow maximum
 

1895
00:34:49,919 --> 00:34:51,109
risk 5 designers want to allow maximum
flexibility

1896
00:34:51,109 --> 00:34:51,119
flexibility
 

1897
00:34:51,119 --> 00:34:53,190
flexibility
to the software the operating system

1898
00:34:53,190 --> 00:34:53,200
to the software the operating system
 

1899
00:34:53,200 --> 00:34:54,950
to the software the operating system
programmers to design the

1900
00:34:54,950 --> 00:34:54,960
programmers to design the
 

1901
00:34:54,960 --> 00:34:56,629
programmers to design the
program operating system however they

1902
00:34:56,629 --> 00:34:56,639
program operating system however they
 

1903
00:34:56,639 --> 00:34:58,470
program operating system however they
like

1904
00:34:58,470 --> 00:34:58,480
like
 

1905
00:34:58,480 --> 00:35:01,270
like
and so you can imagine ways xv6 really

1906
00:35:01,270 --> 00:35:01,280
and so you can imagine ways xv6 really
 

1907
00:35:01,280 --> 00:35:02,950
and so you can imagine ways xv6 really
doesn't use this freedom

1908
00:35:02,950 --> 00:35:02,960
doesn't use this freedom
 

1909
00:35:02,960 --> 00:35:04,950
doesn't use this freedom
but other operating systems do so some

1910
00:35:04,950 --> 00:35:04,960
but other operating systems do so some
 

1911
00:35:04,960 --> 00:35:06,550
but other operating systems do so some
examples of

1912
00:35:06,550 --> 00:35:06,560
examples of
 

1913
00:35:06,560 --> 00:35:08,790
examples of
things that are kind of enabled for the

1914
00:35:08,790 --> 00:35:08,800
things that are kind of enabled for the
 

1915
00:35:08,800 --> 00:35:10,310
things that are kind of enabled for the
software to do

1916
00:35:10,310 --> 00:35:10,320
software to do
 

1917
00:35:10,320 --> 00:35:14,550
software to do
because e-call is so simple

1918
00:35:14,550 --> 00:35:14,560

 

1919
00:35:14,560 --> 00:35:17,030

maybe some operating systems can execute

1920
00:35:17,030 --> 00:35:17,040
maybe some operating systems can execute
 

1921
00:35:17,040 --> 00:35:18,069
maybe some operating systems can execute
some

1922
00:35:18,069 --> 00:35:18,079
some
 

1923
00:35:18,079 --> 00:35:19,829
some
traps some system calls without

1924
00:35:19,829 --> 00:35:19,839
traps some system calls without
 

1925
00:35:19,839 --> 00:35:21,349
traps some system calls without
switching page tables

1926
00:35:21,349 --> 00:35:21,359
switching page tables
 

1927
00:35:21,359 --> 00:35:23,030
switching page tables
the switching page page table is

1928
00:35:23,030 --> 00:35:23,040
the switching page page table is
 

1929
00:35:23,040 --> 00:35:25,910
the switching page page table is
expensive if vcall forces you to do it

1930
00:35:25,910 --> 00:35:25,920
expensive if vcall forces you to do it
 

1931
00:35:25,920 --> 00:35:27,910
expensive if vcall forces you to do it
that rules out the possibility of very

1932
00:35:27,910 --> 00:35:27,920
that rules out the possibility of very
 

1933
00:35:27,920 --> 00:35:29,430
that rules out the possibility of very
streamlined

1934
00:35:29,430 --> 00:35:29,440
streamlined
 

1935
00:35:29,440 --> 00:35:31,270
streamlined
implementations for some system calls

1936
00:35:31,270 --> 00:35:31,280
implementations for some system calls
 

1937
00:35:31,280 --> 00:35:34,390
implementations for some system calls
that don't switch page tables

1938
00:35:34,390 --> 00:35:34,400
that don't switch page tables
 

1939
00:35:34,400 --> 00:35:36,710
that don't switch page tables
some operating systems map both user and

1940
00:35:36,710 --> 00:35:36,720
some operating systems map both user and
 

1941
00:35:36,720 --> 00:35:37,990
some operating systems map both user and
kernel

1942
00:35:37,990 --> 00:35:38,000
kernel
 

1943
00:35:38,000 --> 00:35:39,589
kernel
virtual addresses into a single page

1944
00:35:39,589 --> 00:35:39,599
virtual addresses into a single page
 

1945
00:35:39,599 --> 00:35:41,349
virtual addresses into a single page
table and use the same page table for

1946
00:35:41,349 --> 00:35:41,359
table and use the same page table for
 

1947
00:35:41,359 --> 00:35:42,870
table and use the same page table for
both user and kernel and therefore don't

1948
00:35:42,870 --> 00:35:42,880
both user and kernel and therefore don't
 

1949
00:35:42,880 --> 00:35:43,990
both user and kernel and therefore don't
even have to switch page

1950
00:35:43,990 --> 00:35:44,000
even have to switch page
 

1951
00:35:44,000 --> 00:35:46,470
even have to switch page
tables ever when transitioning between

1952
00:35:46,470 --> 00:35:46,480
tables ever when transitioning between
 

1953
00:35:46,480 --> 00:35:47,829
tables ever when transitioning between
user and kernel

1954
00:35:47,829 --> 00:35:47,839
user and kernel
 

1955
00:35:47,839 --> 00:35:49,349
user and kernel
and for them also if you call switch

1956
00:35:49,349 --> 00:35:49,359
and for them also if you call switch
 

1957
00:35:49,359 --> 00:35:51,109
and for them also if you call switch
page tables that would just be a waste

1958
00:35:51,109 --> 00:35:51,119
page tables that would just be a waste
 

1959
00:35:51,119 --> 00:35:53,750
page tables that would just be a waste
and slow things down maybe in some

1960
00:35:53,750 --> 00:35:53,760
and slow things down maybe in some
 

1961
00:35:53,760 --> 00:35:55,349
and slow things down maybe in some
circumstances

1962
00:35:55,349 --> 00:35:55,359
circumstances
 

1963
00:35:55,359 --> 00:35:57,910
circumstances
system calls for example some registers

1964
00:35:57,910 --> 00:35:57,920
system calls for example some registers
 

1965
00:35:57,920 --> 00:35:59,270
system calls for example some registers
don't have to be saved

1966
00:35:59,270 --> 00:35:59,280
don't have to be saved
 

1967
00:35:59,280 --> 00:36:00,630
don't have to be saved
and which ones have to be saved or not

1968
00:36:00,630 --> 00:36:00,640
and which ones have to be saved or not
 

1969
00:36:00,640 --> 00:36:02,310
and which ones have to be saved or not
sort of depends on the software the

1970
00:36:02,310 --> 00:36:02,320
sort of depends on the software the
 

1971
00:36:02,320 --> 00:36:04,150
sort of depends on the software the
language and the compiler but

1972
00:36:04,150 --> 00:36:04,160
language and the compiler but
 

1973
00:36:04,160 --> 00:36:05,349
language and the compiler but
you might be able to save a lot of time

1974
00:36:05,349 --> 00:36:05,359
you might be able to save a lot of time
 

1975
00:36:05,359 --> 00:36:07,829
you might be able to save a lot of time
by saving fewer than 32 registers so you

1976
00:36:07,829 --> 00:36:07,839
by saving fewer than 32 registers so you
 

1977
00:36:07,839 --> 00:36:09,910
by saving fewer than 32 registers so you
don't want equal to kind of force you

1978
00:36:09,910 --> 00:36:09,920
don't want equal to kind of force you
 

1979
00:36:09,920 --> 00:36:11,589
don't want equal to kind of force you
you don't necessarily want equal to

1980
00:36:11,589 --> 00:36:11,599
you don't necessarily want equal to
 

1981
00:36:11,599 --> 00:36:14,630
you don't necessarily want equal to
force you to save all the registers

1982
00:36:14,630 --> 00:36:14,640
force you to save all the registers
 

1983
00:36:14,640 --> 00:36:16,310
force you to save all the registers
and finally maybe no stack at all is

1984
00:36:16,310 --> 00:36:16,320
and finally maybe no stack at all is
 

1985
00:36:16,320 --> 00:36:18,950
and finally maybe no stack at all is
required for some simple system calls so

1986
00:36:18,950 --> 00:36:18,960
required for some simple system calls so
 

1987
00:36:18,960 --> 00:36:21,430
required for some simple system calls so
again for operating systems that care a

1988
00:36:21,430 --> 00:36:21,440
again for operating systems that care a
 

1989
00:36:21,440 --> 00:36:22,950
again for operating systems that care a
lot about performance it's good that

1990
00:36:22,950 --> 00:36:22,960
lot about performance it's good that
 

1991
00:36:22,960 --> 00:36:24,230
lot about performance it's good that
ecall doesn't force

1992
00:36:24,230 --> 00:36:24,240
ecall doesn't force
 

1993
00:36:24,240 --> 00:36:27,750
ecall doesn't force
any particular stack policy on you

1994
00:36:27,750 --> 00:36:27,760
any particular stack policy on you
 

1995
00:36:27,760 --> 00:36:31,030
any particular stack policy on you
and again there's many clever uh

1996
00:36:31,030 --> 00:36:31,040
and again there's many clever uh
 

1997
00:36:31,040 --> 00:36:33,990
and again there's many clever uh
hardware software schemes for very

1998
00:36:33,990 --> 00:36:34,000
hardware software schemes for very
 

1999
00:36:34,000 --> 00:36:35,990
hardware software schemes for very
streamlined high performance

2000
00:36:35,990 --> 00:36:36,000
streamlined high performance
 

2001
00:36:36,000 --> 00:36:37,829
streamlined high performance
system calls and traps just because the

2002
00:36:37,829 --> 00:36:37,839
system calls and traps just because the
 

2003
00:36:37,839 --> 00:36:39,030
system calls and traps just because the
performance of this stuff is

2004
00:36:39,030 --> 00:36:39,040
performance of this stuff is
 

2005
00:36:39,040 --> 00:36:40,870
performance of this stuff is
like super important and people worry

2006
00:36:40,870 --> 00:36:40,880
like super important and people worry
 

2007
00:36:40,880 --> 00:36:43,109
like super important and people worry
about it a lot

2008
00:36:43,109 --> 00:36:43,119
about it a lot
 

2009
00:36:43,119 --> 00:36:46,550
about it a lot
okay so back to xv6 and risk five

2010
00:36:46,550 --> 00:36:46,560
okay so back to xv6 and risk five
 

2011
00:36:46,560 --> 00:36:49,670
okay so back to xv6 and risk five
um the first thing we need to do is save

2012
00:36:49,670 --> 00:36:49,680
um the first thing we need to do is save
 

2013
00:36:49,680 --> 00:36:50,790
um the first thing we need to do is save
some registers we

2014
00:36:50,790 --> 00:36:50,800
some registers we
 

2015
00:36:50,800 --> 00:36:53,270
some registers we
can do hardly anything on the risk 5

2016
00:36:53,270 --> 00:36:53,280
can do hardly anything on the risk 5
 

2017
00:36:53,280 --> 00:36:54,470
can do hardly anything on the risk 5
without a few

2018
00:36:54,470 --> 00:36:54,480
without a few
 

2019
00:36:54,480 --> 00:36:56,950
without a few
registers without being able to use

2020
00:36:56,950 --> 00:36:56,960
registers without being able to use
 

2021
00:36:56,960 --> 00:36:58,710
registers without being able to use
register so what are our options for

2022
00:36:58,710 --> 00:36:58,720
register so what are our options for
 

2023
00:36:58,720 --> 00:37:01,430
register so what are our options for
saving user registers

2024
00:37:01,430 --> 00:37:01,440
saving user registers
 

2025
00:37:01,440 --> 00:37:03,430
saving user registers
in on some other machine we might be

2026
00:37:03,430 --> 00:37:03,440
in on some other machine we might be
 

2027
00:37:03,440 --> 00:37:05,190
in on some other machine we might be
able to just write the contents of the

2028
00:37:05,190 --> 00:37:05,200
able to just write the contents of the
 

2029
00:37:05,200 --> 00:37:07,109
able to just write the contents of the
32 registers somewhere convenient in

2030
00:37:07,109 --> 00:37:07,119
32 registers somewhere convenient in
 

2031
00:37:07,119 --> 00:37:09,109
32 registers somewhere convenient in
physical memory

2032
00:37:09,109 --> 00:37:09,119
physical memory
 

2033
00:37:09,119 --> 00:37:10,390
physical memory
we can't actually really do that on the

2034
00:37:10,390 --> 00:37:10,400
we can't actually really do that on the
 

2035
00:37:10,400 --> 00:37:12,150
we can't actually really do that on the
risk 5 because

2036
00:37:12,150 --> 00:37:12,160
risk 5 because
 

2037
00:37:12,160 --> 00:37:13,430
risk 5 because
supervisor code isn't allowed to

2038
00:37:13,430 --> 00:37:13,440
supervisor code isn't allowed to
 

2039
00:37:13,440 --> 00:37:15,190
supervisor code isn't allowed to
directly access physical memory we can

2040
00:37:15,190 --> 00:37:15,200
directly access physical memory we can
 

2041
00:37:15,200 --> 00:37:16,710
directly access physical memory we can
only use what's in the page table

2042
00:37:16,710 --> 00:37:16,720
only use what's in the page table
 

2043
00:37:16,720 --> 00:37:20,630
only use what's in the page table
there's not much in the page table

2044
00:37:20,630 --> 00:37:20,640

 

2045
00:37:20,640 --> 00:37:23,750

another possibility that xv6 doesn't do

2046
00:37:23,750 --> 00:37:23,760
another possibility that xv6 doesn't do
 

2047
00:37:23,760 --> 00:37:26,870
another possibility that xv6 doesn't do
is simply setting the sat p to uh to the

2048
00:37:26,870 --> 00:37:26,880
is simply setting the sat p to uh to the
 

2049
00:37:26,880 --> 00:37:28,310
is simply setting the sat p to uh to the
kernel page table right and then we

2050
00:37:28,310 --> 00:37:28,320
kernel page table right and then we
 

2051
00:37:28,320 --> 00:37:28,870
kernel page table right and then we
could

2052
00:37:28,870 --> 00:37:28,880
could
 

2053
00:37:28,880 --> 00:37:30,630
could
use all the kernel mappings and use them

2054
00:37:30,630 --> 00:37:30,640
use all the kernel mappings and use them
 

2055
00:37:30,640 --> 00:37:34,150
use all the kernel mappings and use them
maybe to help us save the user registers

2056
00:37:34,150 --> 00:37:34,160
maybe to help us save the user registers
 

2057
00:37:34,160 --> 00:37:35,670
maybe to help us save the user registers
and that'd be legal the supervisor can

2058
00:37:35,670 --> 00:37:35,680
and that'd be legal the supervisor can
 

2059
00:37:35,680 --> 00:37:37,990
and that'd be legal the supervisor can
certainly change that b

2060
00:37:37,990 --> 00:37:38,000
certainly change that b
 

2061
00:37:38,000 --> 00:37:40,069
certainly change that b
however at this point in the trap

2062
00:37:40,069 --> 00:37:40,079
however at this point in the trap
 

2063
00:37:40,079 --> 00:37:42,150
however at this point in the trap
handler namely the beginning

2064
00:37:42,150 --> 00:37:42,160
handler namely the beginning
 

2065
00:37:42,160 --> 00:37:43,589
handler namely the beginning
we don't even know the address of the

2066
00:37:43,589 --> 00:37:43,599
we don't even know the address of the
 

2067
00:37:43,599 --> 00:37:46,069
we don't even know the address of the
kernel page table and furthermore the

2068
00:37:46,069 --> 00:37:46,079
kernel page table and furthermore the
 

2069
00:37:46,079 --> 00:37:47,750
kernel page table and furthermore the
instruction that you execute

2070
00:37:47,750 --> 00:37:47,760
instruction that you execute
 

2071
00:37:47,760 --> 00:37:50,870
instruction that you execute
to change sat p require that the address

2072
00:37:50,870 --> 00:37:50,880
to change sat p require that the address
 

2073
00:37:50,880 --> 00:37:52,790
to change sat p require that the address
that you're loading into sap come from a

2074
00:37:52,790 --> 00:37:52,800
that you're loading into sap come from a
 

2075
00:37:52,800 --> 00:37:53,589
that you're loading into sap come from a
register

2076
00:37:53,589 --> 00:37:53,599
register
 

2077
00:37:53,599 --> 00:37:55,990
register
so to even execute the instruction to

2078
00:37:55,990 --> 00:37:56,000
so to even execute the instruction to
 

2079
00:37:56,000 --> 00:37:56,630
so to even execute the instruction to
change

2080
00:37:56,630 --> 00:37:56,640
change
 

2081
00:37:56,640 --> 00:38:00,069
change
page tables we need some spare registers

2082
00:38:00,069 --> 00:38:00,079
page tables we need some spare registers
 

2083
00:38:00,079 --> 00:38:02,310
page tables we need some spare registers
in order to put the new page table

2084
00:38:02,310 --> 00:38:02,320
in order to put the new page table
 

2085
00:38:02,320 --> 00:38:03,910
in order to put the new page table
address in those registers so we can

2086
00:38:03,910 --> 00:38:03,920
address in those registers so we can
 

2087
00:38:03,920 --> 00:38:05,190
address in those registers so we can
execute

2088
00:38:05,190 --> 00:38:05,200
execute
 

2089
00:38:05,200 --> 00:38:08,870
execute
the sat p modifying instruction

2090
00:38:08,870 --> 00:38:08,880
the sat p modifying instruction
 

2091
00:38:08,880 --> 00:38:11,109
the sat p modifying instruction
all right so we really need to save the

2092
00:38:11,109 --> 00:38:11,119
all right so we really need to save the
 

2093
00:38:11,119 --> 00:38:13,349
all right so we really need to save the
user registers

2094
00:38:13,349 --> 00:38:13,359
user registers
 

2095
00:38:13,359 --> 00:38:17,109
user registers
there's two parts to the solution for

2096
00:38:17,109 --> 00:38:17,119
there's two parts to the solution for
 

2097
00:38:17,119 --> 00:38:20,069
there's two parts to the solution for
how xv6 does this on the on the risk 5

2098
00:38:20,069 --> 00:38:20,079
how xv6 does this on the on the risk 5
 

2099
00:38:20,079 --> 00:38:21,349
how xv6 does this on the on the risk 5
one is

2100
00:38:21,349 --> 00:38:21,359
one is
 

2101
00:38:21,359 --> 00:38:25,190
one is
part of the solution is that xv6

2102
00:38:25,190 --> 00:38:25,200
part of the solution is that xv6
 

2103
00:38:25,200 --> 00:38:27,270
part of the solution is that xv6
into every user address every user page

2104
00:38:27,270 --> 00:38:27,280
into every user address every user page
 

2105
00:38:27,280 --> 00:38:28,550
into every user address every user page
table maps this trap

2106
00:38:28,550 --> 00:38:28,560
table maps this trap
 

2107
00:38:28,560 --> 00:38:32,390
table maps this trap
frame page and every process has its own

2108
00:38:32,390 --> 00:38:32,400
frame page and every process has its own
 

2109
00:38:32,400 --> 00:38:34,150
frame page and every process has its own
trap frame page

2110
00:38:34,150 --> 00:38:34,160
trap frame page
 

2111
00:38:34,160 --> 00:38:37,430
trap frame page
um and the crafting free page

2112
00:38:37,430 --> 00:38:37,440
um and the crafting free page
 

2113
00:38:37,440 --> 00:38:38,790
um and the crafting free page
actually contains some interesting a

2114
00:38:38,790 --> 00:38:38,800
actually contains some interesting a
 

2115
00:38:38,800 --> 00:38:40,630
actually contains some interesting a
bunch of different kinds of data but

2116
00:38:40,630 --> 00:38:40,640
bunch of different kinds of data but
 

2117
00:38:40,640 --> 00:38:42,069
bunch of different kinds of data but
at this point the most important data it

2118
00:38:42,069 --> 00:38:42,079
at this point the most important data it
 

2119
00:38:42,079 --> 00:38:44,870
at this point the most important data it
contains is 32 slots

2120
00:38:44,870 --> 00:38:44,880
contains is 32 slots
 

2121
00:38:44,880 --> 00:38:47,829
contains is 32 slots
empty slots in memory in which to save

2122
00:38:47,829 --> 00:38:47,839
empty slots in memory in which to save
 

2123
00:38:47,839 --> 00:38:49,349
empty slots in memory in which to save
the 32 registers

2124
00:38:49,349 --> 00:38:49,359
the 32 registers
 

2125
00:38:49,359 --> 00:38:51,990
the 32 registers
so the good news right now in the trap

2126
00:38:51,990 --> 00:38:52,000
so the good news right now in the trap
 

2127
00:38:52,000 --> 00:38:53,990
so the good news right now in the trap
handling code is we have a mapping we're

2128
00:38:53,990 --> 00:38:54,000
handling code is we have a mapping we're
 

2129
00:38:54,000 --> 00:38:55,589
handling code is we have a mapping we're
guaranteed to have a mapping

2130
00:38:55,589 --> 00:38:55,599
guaranteed to have a mapping
 

2131
00:38:55,599 --> 00:38:57,510
guaranteed to have a mapping
set up by the kernel previously in the

2132
00:38:57,510 --> 00:38:57,520
set up by the kernel previously in the
 

2133
00:38:57,520 --> 00:38:59,270
set up by the kernel previously in the
user page table

2134
00:38:59,270 --> 00:38:59,280
user page table
 

2135
00:38:59,280 --> 00:39:01,750
user page table
that points to a place where that's

2136
00:39:01,750 --> 00:39:01,760
that points to a place where that's
 

2137
00:39:01,760 --> 00:39:04,230
that points to a place where that's
prepared for us to save this processes

2138
00:39:04,230 --> 00:39:04,240
prepared for us to save this processes
 

2139
00:39:04,240 --> 00:39:07,750
prepared for us to save this processes
user registers

2140
00:39:07,750 --> 00:39:07,760

 

2141
00:39:07,760 --> 00:39:09,589

and it's here it's three it's always

2142
00:39:09,589 --> 00:39:09,599
and it's here it's three it's always
 

2143
00:39:09,599 --> 00:39:11,430
and it's here it's three it's always
three f f

2144
00:39:11,430 --> 00:39:11,440
three f f
 

2145
00:39:11,440 --> 00:39:15,109
three f f
e zero zero zero virtual address

2146
00:39:15,109 --> 00:39:15,119
e zero zero zero virtual address
 

2147
00:39:15,119 --> 00:39:16,870
e zero zero zero virtual address
and if you want to see what's there

2148
00:39:16,870 --> 00:39:16,880
and if you want to see what's there
 

2149
00:39:16,880 --> 00:39:20,550
and if you want to see what's there
actually in that trap frame it's

2150
00:39:20,550 --> 00:39:20,560

 

2151
00:39:20,560 --> 00:39:28,950

what xv6 puts there is defined in

2152
00:39:28,950 --> 00:39:28,960
what xv6 puts there is defined in
 

2153
00:39:28,960 --> 00:39:31,190
what xv6 puts there is defined in
proc.h and struck frat frame which is

2154
00:39:31,190 --> 00:39:31,200
proc.h and struck frat frame which is
 

2155
00:39:31,200 --> 00:39:33,190
proc.h and struck frat frame which is
right here so you can see

2156
00:39:33,190 --> 00:39:33,200
right here so you can see
 

2157
00:39:33,200 --> 00:39:36,230
right here so you can see
um what's supposed to go in each slot

2158
00:39:36,230 --> 00:39:36,240
um what's supposed to go in each slot
 

2159
00:39:36,240 --> 00:39:39,589
um what's supposed to go in each slot
and there's a 32 slots you know named ra

2160
00:39:39,589 --> 00:39:39,599
and there's a 32 slots you know named ra
 

2161
00:39:39,599 --> 00:39:42,470
and there's a 32 slots you know named ra
sb gp whatever which are places to save

2162
00:39:42,470 --> 00:39:42,480
sb gp whatever which are places to save
 

2163
00:39:42,480 --> 00:39:43,990
sb gp whatever which are places to save
registers there's also these five things

2164
00:39:43,990 --> 00:39:44,000
registers there's also these five things
 

2165
00:39:44,000 --> 00:39:45,589
registers there's also these five things
at the beginning

2166
00:39:45,589 --> 00:39:45,599
at the beginning
 

2167
00:39:45,599 --> 00:39:47,349
at the beginning
which we'll see will come in handy very

2168
00:39:47,349 --> 00:39:47,359
which we'll see will come in handy very
 

2169
00:39:47,359 --> 00:39:49,190
which we'll see will come in handy very
soon which are values

2170
00:39:49,190 --> 00:39:49,200
soon which are values
 

2171
00:39:49,200 --> 00:39:50,870
soon which are values
that the colonel previously placed in

2172
00:39:50,870 --> 00:39:50,880
that the colonel previously placed in
 

2173
00:39:50,880 --> 00:39:53,990
that the colonel previously placed in
these slots in the trap frame

2174
00:39:53,990 --> 00:39:54,000
these slots in the trap frame
 

2175
00:39:54,000 --> 00:39:55,829
these slots in the trap frame
like for example this very first slot in

2176
00:39:55,829 --> 00:39:55,839
like for example this very first slot in
 

2177
00:39:55,839 --> 00:39:57,750
like for example this very first slot in
the trap frame contains a pointer to the

2178
00:39:57,750 --> 00:39:57,760
the trap frame contains a pointer to the
 

2179
00:39:57,760 --> 00:39:58,870
the trap frame contains a pointer to the
kernel page table

2180
00:39:58,870 --> 00:39:58,880
kernel page table
 

2181
00:39:58,880 --> 00:40:00,230
kernel page table
and this will be the value that we're

2182
00:40:00,230 --> 00:40:00,240
and this will be the value that we're
 

2183
00:40:00,240 --> 00:40:02,470
and this will be the value that we're
about we're very soon gonna

2184
00:40:02,470 --> 00:40:02,480
about we're very soon gonna
 

2185
00:40:02,480 --> 00:40:04,069
about we're very soon gonna
uh the trap handling code is gonna load

2186
00:40:04,069 --> 00:40:04,079
uh the trap handling code is gonna load
 

2187
00:40:04,079 --> 00:40:06,230
uh the trap handling code is gonna load
into sat p

2188
00:40:06,230 --> 00:40:06,240
into sat p
 

2189
00:40:06,240 --> 00:40:08,950
into sat p
okay so half the answer to how to say

2190
00:40:08,950 --> 00:40:08,960
okay so half the answer to how to say
 

2191
00:40:08,960 --> 00:40:10,790
okay so half the answer to how to say
the registers is that

2192
00:40:10,790 --> 00:40:10,800
the registers is that
 

2193
00:40:10,800 --> 00:40:12,950
the registers is that
the kernel has conveniently mapped this

2194
00:40:12,950 --> 00:40:12,960
the kernel has conveniently mapped this
 

2195
00:40:12,960 --> 00:40:14,309
the kernel has conveniently mapped this
trap frame

2196
00:40:14,309 --> 00:40:14,319
trap frame
 

2197
00:40:14,319 --> 00:40:16,069
trap frame
into every user page table the other is

2198
00:40:16,069 --> 00:40:16,079
into every user page table the other is
 

2199
00:40:16,079 --> 00:40:18,230
into every user page table the other is
this uh instruction this scratch

2200
00:40:18,230 --> 00:40:18,240
this uh instruction this scratch
 

2201
00:40:18,240 --> 00:40:19,829
this uh instruction this scratch
register which we

2202
00:40:19,829 --> 00:40:19,839
register which we
 

2203
00:40:19,839 --> 00:40:22,230
register which we
uh mentioned before um so there's the

2204
00:40:22,230 --> 00:40:22,240
uh mentioned before um so there's the
 

2205
00:40:22,240 --> 00:40:24,150
uh mentioned before um so there's the
special scratch register

2206
00:40:24,150 --> 00:40:24,160
special scratch register
 

2207
00:40:24,160 --> 00:40:26,630
special scratch register
provided by risk 5 for exactly the

2208
00:40:26,630 --> 00:40:26,640
provided by risk 5 for exactly the
 

2209
00:40:26,640 --> 00:40:30,150
provided by risk 5 for exactly the
purpose we're about to use it for

2210
00:40:30,150 --> 00:40:30,160

 

2211
00:40:30,160 --> 00:40:31,750

the kernel when it before goes into user

2212
00:40:31,750 --> 00:40:31,760
the kernel when it before goes into user
 

2213
00:40:31,760 --> 00:40:33,510
the kernel when it before goes into user
space puts a pointer there to the trap

2214
00:40:33,510 --> 00:40:33,520
space puts a pointer there to the trap
 

2215
00:40:33,520 --> 00:40:35,270
space puts a pointer there to the trap
frame basically just point

2216
00:40:35,270 --> 00:40:35,280
frame basically just point
 

2217
00:40:35,280 --> 00:40:38,309
frame basically just point
puts into sat p this

2218
00:40:38,309 --> 00:40:38,319
puts into sat p this
 

2219
00:40:38,319 --> 00:40:40,790
puts into sat p this
this address um just for the convenience

2220
00:40:40,790 --> 00:40:40,800
this address um just for the convenience
 

2221
00:40:40,800 --> 00:40:42,230
this address um just for the convenience
of the trap handling code

2222
00:40:42,230 --> 00:40:42,240
of the trap handling code
 

2223
00:40:42,240 --> 00:40:43,430
of the trap handling code
more importantly though there's an

2224
00:40:43,430 --> 00:40:43,440
more importantly though there's an
 

2225
00:40:43,440 --> 00:40:45,109
more importantly though there's an
instruction on the risk 5 that it's

2226
00:40:45,109 --> 00:40:45,119
instruction on the risk 5 that it's
 

2227
00:40:45,119 --> 00:40:46,309
instruction on the risk 5 that it's
going to allow us to swap

2228
00:40:46,309 --> 00:40:46,319
going to allow us to swap
 

2229
00:40:46,319 --> 00:40:48,550
going to allow us to swap
any register and that's scratch which

2230
00:40:48,550 --> 00:40:48,560
any register and that's scratch which
 

2231
00:40:48,560 --> 00:40:51,430
any register and that's scratch which
will save that register as well as

2232
00:40:51,430 --> 00:40:51,440
will save that register as well as
 

2233
00:40:51,440 --> 00:40:54,550
will save that register as well as
load the value of s scratch into

2234
00:40:54,550 --> 00:40:54,560
load the value of s scratch into
 

2235
00:40:54,560 --> 00:40:56,630
load the value of s scratch into
whatever register we specified

2236
00:40:56,630 --> 00:40:56,640
whatever register we specified
 

2237
00:40:56,640 --> 00:40:59,510
whatever register we specified
as you can see if i look at the

2238
00:40:59,510 --> 00:40:59,520
as you can see if i look at the
 

2239
00:40:59,520 --> 00:41:02,950
as you can see if i look at the
trampoline code

2240
00:41:02,950 --> 00:41:02,960

 

2241
00:41:02,960 --> 00:41:03,990

we're right at the beginning of the

2242
00:41:03,990 --> 00:41:04,000
we're right at the beginning of the
 

2243
00:41:04,000 --> 00:41:05,990
we're right at the beginning of the
trampoline code here

2244
00:41:05,990 --> 00:41:06,000
trampoline code here
 

2245
00:41:06,000 --> 00:41:07,589
trampoline code here
the very first thing it does is this

2246
00:41:07,589 --> 00:41:07,599
the very first thing it does is this
 

2247
00:41:07,599 --> 00:41:11,030
the very first thing it does is this
csrw

2248
00:41:11,030 --> 00:41:11,040

 

2249
00:41:11,040 --> 00:41:12,870

instruction this is the source in this

2250
00:41:12,870 --> 00:41:12,880
instruction this is the source in this
 

2251
00:41:12,880 --> 00:41:14,950
instruction this is the source in this
window over in this window we can

2252
00:41:14,950 --> 00:41:14,960
window over in this window we can
 

2253
00:41:14,960 --> 00:41:17,270
window over in this window we can
actually see what gdb sees in the kernel

2254
00:41:17,270 --> 00:41:17,280
actually see what gdb sees in the kernel
 

2255
00:41:17,280 --> 00:41:20,230
actually see what gdb sees in the kernel
and we've actually just executed this

2256
00:41:20,230 --> 00:41:20,240
and we've actually just executed this
 

2257
00:41:20,240 --> 00:41:22,150
and we've actually just executed this
swap instruction

2258
00:41:22,150 --> 00:41:22,160
swap instruction
 

2259
00:41:22,160 --> 00:41:24,550
swap instruction
and i swapped a0 with scratch in order

2260
00:41:24,550 --> 00:41:24,560
and i swapped a0 with scratch in order
 

2261
00:41:24,560 --> 00:41:27,109
and i swapped a0 with scratch in order
to see what it did let's print out

2262
00:41:27,109 --> 00:41:27,119
to see what it did let's print out
 

2263
00:41:27,119 --> 00:41:30,230
to see what it did let's print out
a0 a0 is now this

2264
00:41:30,230 --> 00:41:30,240
a0 a0 is now this
 

2265
00:41:30,240 --> 00:41:34,550
a0 a0 is now this
three fffe00 value which is a pointer

2266
00:41:34,550 --> 00:41:34,560
three fffe00 value which is a pointer
 

2267
00:41:34,560 --> 00:41:36,230
three fffe00 value which is a pointer
which is the virtual address of the trap

2268
00:41:36,230 --> 00:41:36,240
which is the virtual address of the trap
 

2269
00:41:36,240 --> 00:41:38,150
which is the virtual address of the trap
frame which used to be in s scratch but

2270
00:41:38,150 --> 00:41:38,160
frame which used to be in s scratch but
 

2271
00:41:38,160 --> 00:41:39,510
frame which used to be in s scratch but
we just swapped it

2272
00:41:39,510 --> 00:41:39,520
we just swapped it
 

2273
00:41:39,520 --> 00:41:41,190
we just swapped it
and then we can print out what's in s

2274
00:41:41,190 --> 00:41:41,200
and then we can print out what's in s
 

2275
00:41:41,200 --> 00:41:43,670
and then we can print out what's in s
scratch

2276
00:41:43,670 --> 00:41:43,680

 

2277
00:41:43,680 --> 00:41:45,589

and it's 2 which is the old value of the

2278
00:41:45,589 --> 00:41:45,599
and it's 2 which is the old value of the
 

2279
00:41:45,599 --> 00:41:48,470
and it's 2 which is the old value of the
a0 register of course a0 held the first

2280
00:41:48,470 --> 00:41:48,480
a0 register of course a0 held the first
 

2281
00:41:48,480 --> 00:41:51,190
a0 register of course a0 held the first
argument to the right function which is

2282
00:41:51,190 --> 00:41:51,200
argument to the right function which is
 

2283
00:41:51,200 --> 00:41:52,710
argument to the right function which is
file descriptor 2 which

2284
00:41:52,710 --> 00:41:52,720
file descriptor 2 which
 

2285
00:41:52,720 --> 00:41:54,630
file descriptor 2 which
you know is what the shell pass so we

2286
00:41:54,630 --> 00:41:54,640
you know is what the shell pass so we
 

2287
00:41:54,640 --> 00:41:56,870
you know is what the shell pass so we
saved away a0

2288
00:41:56,870 --> 00:41:56,880
saved away a0
 

2289
00:41:56,880 --> 00:42:00,230
saved away a0
and we have a pointer to the trap frame

2290
00:42:00,230 --> 00:42:00,240
and we have a pointer to the trap frame
 

2291
00:42:00,240 --> 00:42:02,150
and we have a pointer to the trap frame
and it turns out now that we're well on

2292
00:42:02,150 --> 00:42:02,160
and it turns out now that we're well on
 

2293
00:42:02,160 --> 00:42:03,990
and it turns out now that we're well on
our way to be able to save the registers

2294
00:42:03,990 --> 00:42:04,000
our way to be able to save the registers
 

2295
00:42:04,000 --> 00:42:07,670
our way to be able to save the registers
in fact that's what the very next um

2296
00:42:07,670 --> 00:42:07,680
in fact that's what the very next um
 

2297
00:42:07,680 --> 00:42:10,150
in fact that's what the very next um
30 odd instructions do in this

2298
00:42:10,150 --> 00:42:10,160
30 odd instructions do in this
 

2299
00:42:10,160 --> 00:42:11,349
30 odd instructions do in this
trampoline code

2300
00:42:11,349 --> 00:42:11,359
trampoline code
 

2301
00:42:11,359 --> 00:42:14,309
trampoline code
it just systematically executes these sd

2302
00:42:14,309 --> 00:42:14,319
it just systematically executes these sd
 

2303
00:42:14,319 --> 00:42:16,390
it just systematically executes these sd
instructions you just save

2304
00:42:16,390 --> 00:42:16,400
instructions you just save
 

2305
00:42:16,400 --> 00:42:19,109
instructions you just save
64-bit store instructions to store every

2306
00:42:19,109 --> 00:42:19,119
64-bit store instructions to store every
 

2307
00:42:19,119 --> 00:42:20,550
64-bit store instructions to store every
single register

2308
00:42:20,550 --> 00:42:20,560
single register
 

2309
00:42:20,560 --> 00:42:23,990
single register
to a different offset in the trap frame

2310
00:42:23,990 --> 00:42:24,000
to a different offset in the trap frame
 

2311
00:42:24,000 --> 00:42:24,950
to a different offset in the trap frame
a0

2312
00:42:24,950 --> 00:42:24,960
a0
 

2313
00:42:24,960 --> 00:42:26,790
a0
if you recall now contains after the

2314
00:42:26,790 --> 00:42:26,800
if you recall now contains after the
 

2315
00:42:26,800 --> 00:42:28,470
if you recall now contains after the
swap contains a pointer to the

2316
00:42:28,470 --> 00:42:28,480
swap contains a pointer to the
 

2317
00:42:28,480 --> 00:42:32,069
swap contains a pointer to the
trap frame that is contains the

2318
00:42:32,069 --> 00:42:32,079
trap frame that is contains the
 

2319
00:42:32,079 --> 00:42:34,710
trap frame that is contains the
virtual address of this page and we're

2320
00:42:34,710 --> 00:42:34,720
virtual address of this page and we're
 

2321
00:42:34,720 --> 00:42:36,069
virtual address of this page and we're
just storing

2322
00:42:36,069 --> 00:42:36,079
just storing
 

2323
00:42:36,079 --> 00:42:37,670
just storing
each register at a different offset in

2324
00:42:37,670 --> 00:42:37,680
each register at a different offset in
 

2325
00:42:37,680 --> 00:42:41,990
each register at a different offset in
the track frame

2326
00:42:41,990 --> 00:42:42,000

 

2327
00:42:42,000 --> 00:42:43,349

all these stores are a bit boring so i

2328
00:42:43,349 --> 00:42:43,359
all these stores are a bit boring so i
 

2329
00:42:43,359 --> 00:42:45,430
all these stores are a bit boring so i
think i'm going to skip over them

2330
00:42:45,430 --> 00:42:45,440
think i'm going to skip over them
 

2331
00:42:45,440 --> 00:42:45,870
think i'm going to skip over them
um

2332
00:42:45,870 --> 00:42:45,880
um
 

2333
00:42:45,880 --> 00:42:48,470
um
[Music]

2334
00:42:48,470 --> 00:42:48,480
[Music]
 

2335
00:42:48,480 --> 00:42:49,670
[Music]
and let me set a breakpoint a little

2336
00:42:49,670 --> 00:42:49,680
and let me set a breakpoint a little
 

2337
00:42:49,680 --> 00:42:55,430
and let me set a breakpoint a little
farther on

2338
00:42:55,430 --> 00:42:55,440

 

2339
00:42:55,440 --> 00:42:59,990

professor question yes how did the

2340
00:42:59,990 --> 00:43:00,000
professor question yes how did the
 

2341
00:43:00,000 --> 00:43:03,349
professor question yes how did the
address of the trap frame end up in s

2342
00:43:03,349 --> 00:43:03,359
address of the trap frame end up in s
 

2343
00:43:03,359 --> 00:43:05,910
address of the trap frame end up in s
scratch when we swapped it with a0

2344
00:43:05,910 --> 00:43:05,920
scratch when we swapped it with a0
 

2345
00:43:05,920 --> 00:43:09,430
scratch when we swapped it with a0
okay before the kernel

2346
00:43:09,430 --> 00:43:09,440
okay before the kernel
 

2347
00:43:09,440 --> 00:43:11,910
okay before the kernel
before it previously transitioned to

2348
00:43:11,910 --> 00:43:11,920
before it previously transitioned to
 

2349
00:43:11,920 --> 00:43:14,390
before it previously transitioned to
user space

2350
00:43:14,390 --> 00:43:14,400
user space
 

2351
00:43:14,400 --> 00:43:17,829
user space
set s scratch to be equal to

2352
00:43:17,829 --> 00:43:17,839
set s scratch to be equal to
 

2353
00:43:17,839 --> 00:43:20,790
set s scratch to be equal to
three f f e zero zero zero the virtual

2354
00:43:20,790 --> 00:43:20,800
three f f e zero zero zero the virtual
 

2355
00:43:20,800 --> 00:43:22,710
three f f e zero zero zero the virtual
address of the trap frame

2356
00:43:22,710 --> 00:43:22,720
address of the trap frame
 

2357
00:43:22,720 --> 00:43:24,150
address of the trap frame
so all the time when we were executing

2358
00:43:24,150 --> 00:43:24,160
so all the time when we were executing
 

2359
00:43:24,160 --> 00:43:25,990
so all the time when we were executing
in user space in the shell s scratch had

2360
00:43:25,990 --> 00:43:26,000
in user space in the shell s scratch had
 

2361
00:43:26,000 --> 00:43:29,109
in user space in the shell s scratch had
this pointer to the trap frame

2362
00:43:29,109 --> 00:43:29,119
this pointer to the trap frame
 

2363
00:43:29,119 --> 00:43:34,390
this pointer to the trap frame
and then the shell executes uh

2364
00:43:34,390 --> 00:43:34,400

 

2365
00:43:34,400 --> 00:43:37,430

ecall which jumps to the beginning of

2366
00:43:37,430 --> 00:43:37,440
ecall which jumps to the beginning of
 

2367
00:43:37,440 --> 00:43:39,030
ecall which jumps to the beginning of
the trampoline and the very first

2368
00:43:39,030 --> 00:43:39,040
the trampoline and the very first
 

2369
00:43:39,040 --> 00:43:40,069
the trampoline and the very first
instruction in the trampoline

2370
00:43:40,069 --> 00:43:40,079
instruction in the trampoline
 

2371
00:43:40,079 --> 00:43:42,950
instruction in the trampoline
is this csr rw instruction which swaps

2372
00:43:42,950 --> 00:43:42,960
is this csr rw instruction which swaps
 

2373
00:43:42,960 --> 00:43:44,790
is this csr rw instruction which swaps
a0 into scratch

2374
00:43:44,790 --> 00:43:44,800
a0 into scratch
 

2375
00:43:44,800 --> 00:43:46,230
a0 into scratch
and so now the old value of the scratch

2376
00:43:46,230 --> 00:43:46,240
and so now the old value of the scratch
 

2377
00:43:46,240 --> 00:43:47,670
and so now the old value of the scratch
namely the point of the trap frame is

2378
00:43:47,670 --> 00:43:47,680
namely the point of the trap frame is
 

2379
00:43:47,680 --> 00:43:49,990
namely the point of the trap frame is
now in a0

2380
00:43:49,990 --> 00:43:50,000
now in a0
 

2381
00:43:50,000 --> 00:43:53,109
now in a0
does that answer your question

2382
00:43:53,109 --> 00:43:53,119

 

2383
00:43:53,119 --> 00:43:55,589

as i guess i'm wondering where in the i

2384
00:43:55,589 --> 00:43:55,599
as i guess i'm wondering where in the i
 

2385
00:43:55,599 --> 00:43:57,829
as i guess i'm wondering where in the i
look does this happen

2386
00:43:57,829 --> 00:43:57,839
look does this happen
 

2387
00:43:57,839 --> 00:43:59,910
look does this happen
during the allocation of the process

2388
00:43:59,910 --> 00:43:59,920
during the allocation of the process
 

2389
00:43:59,920 --> 00:44:01,430
during the allocation of the process
like where does the scratch register

2390
00:44:01,430 --> 00:44:01,440
like where does the scratch register
 

2391
00:44:01,440 --> 00:44:01,990
like where does the scratch register
live

2392
00:44:01,990 --> 00:44:02,000
live
 

2393
00:44:02,000 --> 00:44:03,430
live
where does this as well the scratch

2394
00:44:03,430 --> 00:44:03,440
where does this as well the scratch
 

2395
00:44:03,440 --> 00:44:05,109
where does this as well the scratch
order itself lives

2396
00:44:05,109 --> 00:44:05,119
order itself lives
 

2397
00:44:05,119 --> 00:44:07,589
order itself lives
on the cpu it's a special register in

2398
00:44:07,589 --> 00:44:07,599
on the cpu it's a special register in
 

2399
00:44:07,599 --> 00:44:08,950
on the cpu it's a special register in
the cpu

2400
00:44:08,950 --> 00:44:08,960
the cpu
 

2401
00:44:08,960 --> 00:44:12,230
the cpu
where and the colonel sets it um

2402
00:44:12,230 --> 00:44:12,240
where and the colonel sets it um
 

2403
00:44:12,240 --> 00:44:15,349
where and the colonel sets it um
well uh

2404
00:44:15,349 --> 00:44:15,359
well uh
 

2405
00:44:15,359 --> 00:44:17,430
well uh
it's a little bit involved the actual

2406
00:44:17,430 --> 00:44:17,440
it's a little bit involved the actual
 

2407
00:44:17,440 --> 00:44:18,950
it's a little bit involved the actual
place where it's set or what i'm now

2408
00:44:18,950 --> 00:44:18,960
place where it's set or what i'm now
 

2409
00:44:18,960 --> 00:44:20,829
place where it's set or what i'm now
showing you on the right here

2410
00:44:20,829 --> 00:44:20,839
showing you on the right here
 

2411
00:44:20,839 --> 00:44:24,069
showing you on the right here
is um the code that the kernel x

2412
00:44:24,069 --> 00:44:24,079
is um the code that the kernel x
 

2413
00:44:24,079 --> 00:44:26,550
is um the code that the kernel x
the last two instructions that the

2414
00:44:26,550 --> 00:44:26,560
the last two instructions that the
 

2415
00:44:26,560 --> 00:44:27,910
the last two instructions that the
kernel executes

2416
00:44:27,910 --> 00:44:27,920
kernel executes
 

2417
00:44:27,920 --> 00:44:30,950
kernel executes
while returning a user space and what's

2418
00:44:30,950 --> 00:44:30,960
while returning a user space and what's
 

2419
00:44:30,960 --> 00:44:31,990
while returning a user space and what's
happening is that

2420
00:44:31,990 --> 00:44:32,000
happening is that
 

2421
00:44:32,000 --> 00:44:33,589
happening is that
the very last thing it does after the

2422
00:44:33,589 --> 00:44:33,599
the very last thing it does after the
 

2423
00:44:33,599 --> 00:44:35,589
the very last thing it does after the
kernel restores

2424
00:44:35,589 --> 00:44:35,599
kernel restores
 

2425
00:44:35,599 --> 00:44:37,750
kernel restores
all the user registers and is you know

2426
00:44:37,750 --> 00:44:37,760
all the user registers and is you know
 

2427
00:44:37,760 --> 00:44:39,670
all the user registers and is you know
just about ready to return to user space

2428
00:44:39,670 --> 00:44:39,680
just about ready to return to user space
 

2429
00:44:39,680 --> 00:44:40,950
just about ready to return to user space
it actually does another one of these

2430
00:44:40,950 --> 00:44:40,960
it actually does another one of these
 

2431
00:44:40,960 --> 00:44:43,589
it actually does another one of these
swaps the kernel has set up a0 to be

2432
00:44:43,589 --> 00:44:43,599
swaps the kernel has set up a0 to be
 

2433
00:44:43,599 --> 00:44:45,430
swaps the kernel has set up a0 to be
equal to the trap frame

2434
00:44:45,430 --> 00:44:45,440
equal to the trap frame
 

2435
00:44:45,440 --> 00:44:48,829
equal to the trap frame
and s scratch still holds the saved user

2436
00:44:48,829 --> 00:44:48,839
and s scratch still holds the saved user
 

2437
00:44:48,839 --> 00:44:51,829
and s scratch still holds the saved user
a0 so the kernel does this swap which

2438
00:44:51,829 --> 00:44:51,839
a0 so the kernel does this swap which
 

2439
00:44:51,839 --> 00:44:53,510
a0 so the kernel does this swap which
ends up with scratch having a pointer to

2440
00:44:53,510 --> 00:44:53,520
ends up with scratch having a pointer to
 

2441
00:44:53,520 --> 00:44:57,910
ends up with scratch having a pointer to
the trap frame and a0 having the saved

2442
00:44:57,910 --> 00:44:57,920
the trap frame and a0 having the saved
 

2443
00:44:57,920 --> 00:45:00,950
the trap frame and a0 having the saved
user a0 and then this s rep returns

2444
00:45:00,950 --> 00:45:00,960
user a0 and then this s rep returns
 

2445
00:45:00,960 --> 00:45:03,430
user a0 and then this s rep returns
to user space so you may wonder how a0

2446
00:45:03,430 --> 00:45:03,440
to user space so you may wonder how a0
 

2447
00:45:03,440 --> 00:45:06,470
to user space so you may wonder how a0
ever got to have the value of the uh

2448
00:45:06,470 --> 00:45:06,480
ever got to have the value of the uh
 

2449
00:45:06,480 --> 00:45:08,790
ever got to have the value of the uh
the address of the trap frame answer

2450
00:45:08,790 --> 00:45:08,800
the address of the trap frame answer
 

2451
00:45:08,800 --> 00:45:09,510
the address of the trap frame answer
that question

2452
00:45:09,510 --> 00:45:09,520
that question
 

2453
00:45:09,520 --> 00:45:13,190
that question
is that um

2454
00:45:13,190 --> 00:45:13,200

 

2455
00:45:13,200 --> 00:45:17,109

we're now looking in trap.c

2456
00:45:17,109 --> 00:45:17,119
we're now looking in trap.c
 

2457
00:45:17,119 --> 00:45:20,309
we're now looking in trap.c
at this last c function to run

2458
00:45:20,309 --> 00:45:20,319
at this last c function to run
 

2459
00:45:20,319 --> 00:45:24,630
at this last c function to run
on the way out to user space

2460
00:45:24,630 --> 00:45:24,640
on the way out to user space
 

2461
00:45:24,640 --> 00:45:26,309
on the way out to user space
and the last thing the c function does

2462
00:45:26,309 --> 00:45:26,319
and the last thing the c function does
 

2463
00:45:26,319 --> 00:45:29,430
and the last thing the c function does
is calls this function here

2464
00:45:29,430 --> 00:45:29,440
is calls this function here
 

2465
00:45:29,440 --> 00:45:32,309
is calls this function here
whatever this fn is and the arguments it

2466
00:45:32,309 --> 00:45:32,319
whatever this fn is and the arguments it
 

2467
00:45:32,319 --> 00:45:33,589
whatever this fn is and the arguments it
passes

2468
00:45:33,589 --> 00:45:33,599
passes
 

2469
00:45:33,599 --> 00:45:37,190
passes
are the trap frame and the user

2470
00:45:37,190 --> 00:45:37,200
are the trap frame and the user
 

2471
00:45:37,200 --> 00:45:40,790
are the trap frame and the user
page table and so in c code when you

2472
00:45:40,790 --> 00:45:40,800
page table and so in c code when you
 

2473
00:45:40,800 --> 00:45:42,550
page table and so in c code when you
call a function the first argument goes

2474
00:45:42,550 --> 00:45:42,560
call a function the first argument goes
 

2475
00:45:42,560 --> 00:45:42,950
call a function the first argument goes
into

2476
00:45:42,950 --> 00:45:42,960
into
 

2477
00:45:42,960 --> 00:45:46,630
into
a zero that's basically y why a0

2478
00:45:46,630 --> 00:45:46,640
a zero that's basically y why a0
 

2479
00:45:46,640 --> 00:45:49,109
a zero that's basically y why a0
held a pointer to the trap frame and

2480
00:45:49,109 --> 00:45:49,119
held a pointer to the trap frame and
 

2481
00:45:49,119 --> 00:45:51,270
held a pointer to the trap frame and
this function its value is set up here

2482
00:45:51,270 --> 00:45:51,280
this function its value is set up here
 

2483
00:45:51,280 --> 00:45:52,550
this function its value is set up here
to be

2484
00:45:52,550 --> 00:45:52,560
to be
 

2485
00:45:52,560 --> 00:45:55,270
to be
in that trampoline page towards the end

2486
00:45:55,270 --> 00:45:55,280
in that trampoline page towards the end
 

2487
00:45:55,280 --> 00:45:59,750
in that trampoline page towards the end
that code i showed you

2488
00:45:59,750 --> 00:45:59,760

 

2489
00:45:59,760 --> 00:46:03,910

this code is that uh

2490
00:46:03,910 --> 00:46:03,920
this code is that uh
 

2491
00:46:03,920 --> 00:46:07,670
this code is that uh
is that a good answer yes thanks

2492
00:46:07,670 --> 00:46:07,680
is that a good answer yes thanks
 

2493
00:46:07,680 --> 00:46:10,550
is that a good answer yes thanks
i'm sorry i also was confused about that

2494
00:46:10,550 --> 00:46:10,560
i'm sorry i also was confused about that
 

2495
00:46:10,560 --> 00:46:10,950
i'm sorry i also was confused about that
i was

2496
00:46:10,950 --> 00:46:10,960
i was
 

2497
00:46:10,960 --> 00:46:13,190
i was
not sure so when you start when you

2498
00:46:13,190 --> 00:46:13,200
not sure so when you start when you
 

2499
00:46:13,200 --> 00:46:15,270
not sure so when you start when you
start your process

2500
00:46:15,270 --> 00:46:15,280
start your process
 

2501
00:46:15,280 --> 00:46:17,270
start your process
and it's it's good and running and then

2502
00:46:17,270 --> 00:46:17,280
and it's it's good and running and then
 

2503
00:46:17,280 --> 00:46:18,550
and it's it's good and running and then
at some point it doesn't

2504
00:46:18,550 --> 00:46:18,560
at some point it doesn't
 

2505
00:46:18,560 --> 00:46:21,589
at some point it doesn't
equal i guess in some or something and

2506
00:46:21,589 --> 00:46:21,599
equal i guess in some or something and
 

2507
00:46:21,599 --> 00:46:23,510
equal i guess in some or something and
then

2508
00:46:23,510 --> 00:46:23,520
then
 

2509
00:46:23,520 --> 00:46:26,309
then
when did you call this return function

2510
00:46:26,309 --> 00:46:26,319
when did you call this return function
 

2511
00:46:26,319 --> 00:46:26,710
when did you call this return function
because

2512
00:46:26,710 --> 00:46:26,720
because
 

2513
00:46:26,720 --> 00:46:28,630
because
it should have been called before the

2514
00:46:28,630 --> 00:46:28,640
it should have been called before the
 

2515
00:46:28,640 --> 00:46:29,910
it should have been called before the
call

2516
00:46:29,910 --> 00:46:29,920
call
 

2517
00:46:29,920 --> 00:46:33,109
call
but it didn't return from you didn't

2518
00:46:33,109 --> 00:46:33,119
but it didn't return from you didn't
 

2519
00:46:33,119 --> 00:46:34,390
but it didn't return from you didn't
return before

2520
00:46:34,390 --> 00:46:34,400
return before
 

2521
00:46:34,400 --> 00:46:35,670
return before
i i don't know i don't understand what

2522
00:46:35,670 --> 00:46:35,680
i i don't know i don't understand what
 

2523
00:46:35,680 --> 00:46:38,950
i i don't know i don't understand what
you call the either trafford

2524
00:46:38,950 --> 00:46:38,960
you call the either trafford
 

2525
00:46:38,960 --> 00:46:40,870
you call the either trafford
okay well maybe one answer to this

2526
00:46:40,870 --> 00:46:40,880
okay well maybe one answer to this
 

2527
00:46:40,880 --> 00:46:42,069
okay well maybe one answer to this
question is that

2528
00:46:42,069 --> 00:46:42,079
question is that
 

2529
00:46:42,079 --> 00:46:46,710
question is that
the kernel always or the the machine

2530
00:46:46,710 --> 00:46:46,720
the kernel always or the the machine
 

2531
00:46:46,720 --> 00:46:49,750
the kernel always or the the machine
boots up in the kernel

2532
00:46:49,750 --> 00:46:49,760
boots up in the kernel
 

2533
00:46:49,760 --> 00:46:51,109
boots up in the kernel
so so when the machine starts it's in

2534
00:46:51,109 --> 00:46:51,119
so so when the machine starts it's in
 

2535
00:46:51,119 --> 00:46:53,589
so so when the machine starts it's in
the kernel anytime

2536
00:46:53,589 --> 00:46:53,599
the kernel anytime
 

2537
00:46:53,599 --> 00:46:56,790
the kernel anytime
the only way to get into user space

2538
00:46:56,790 --> 00:46:56,800
the only way to get into user space
 

2539
00:46:56,800 --> 00:46:58,630
the only way to get into user space
you know the very first time or when

2540
00:46:58,630 --> 00:46:58,640
you know the very first time or when
 

2541
00:46:58,640 --> 00:47:01,190
you know the very first time or when
returning from a system call

2542
00:47:01,190 --> 00:47:01,200
returning from a system call
 

2543
00:47:01,200 --> 00:47:03,589
returning from a system call
is in fact to execute this s-red

2544
00:47:03,589 --> 00:47:03,599
is in fact to execute this s-red
 

2545
00:47:03,599 --> 00:47:04,950
is in fact to execute this s-red
instruction

2546
00:47:04,950 --> 00:47:04,960
instruction
 

2547
00:47:04,960 --> 00:47:07,510
instruction
that that this escrow instruction is the

2548
00:47:07,510 --> 00:47:07,520
that that this escrow instruction is the
 

2549
00:47:07,520 --> 00:47:08,950
that that this escrow instruction is the
way that the risk find

2550
00:47:08,950 --> 00:47:08,960
way that the risk find
 

2551
00:47:08,960 --> 00:47:11,109
way that the risk find
five defines to transition from

2552
00:47:11,109 --> 00:47:11,119
five defines to transition from
 

2553
00:47:11,119 --> 00:47:12,550
five defines to transition from
supervisor mode

2554
00:47:12,550 --> 00:47:12,560
supervisor mode
 

2555
00:47:12,560 --> 00:47:16,230
supervisor mode
into user mode and so

2556
00:47:16,230 --> 00:47:16,240
into user mode and so
 

2557
00:47:16,240 --> 00:47:19,109
into user mode and so
before any user code ever executes the

2558
00:47:19,109 --> 00:47:19,119
before any user code ever executes the
 

2559
00:47:19,119 --> 00:47:20,230
before any user code ever executes the
kernel

2560
00:47:20,230 --> 00:47:20,240
kernel
 

2561
00:47:20,240 --> 00:47:21,910
kernel
executes the code i'm showing you here

2562
00:47:21,910 --> 00:47:21,920
executes the code i'm showing you here
 

2563
00:47:21,920 --> 00:47:25,109
executes the code i'm showing you here
in these these two editor buffers

2564
00:47:25,109 --> 00:47:25,119
in these these two editor buffers
 

2565
00:47:25,119 --> 00:47:27,750
in these these two editor buffers
that set up all kinds of things like

2566
00:47:27,750 --> 00:47:27,760
that set up all kinds of things like
 

2567
00:47:27,760 --> 00:47:28,710
that set up all kinds of things like
scratch and

2568
00:47:28,710 --> 00:47:28,720
scratch and
 

2569
00:47:28,720 --> 00:47:33,190
scratch and
st back

2570
00:47:33,190 --> 00:47:33,200

 

2571
00:47:33,200 --> 00:47:36,630

okay i see thank you you're welcome

2572
00:47:36,630 --> 00:47:36,640
okay i see thank you you're welcome
 

2573
00:47:36,640 --> 00:47:38,630
okay i see thank you you're welcome
oh i have a question i'm not sure if we

2574
00:47:38,630 --> 00:47:38,640
oh i have a question i'm not sure if we
 

2575
00:47:38,640 --> 00:47:40,390
oh i have a question i'm not sure if we
touched on this or if i'm like you know

2576
00:47:40,390 --> 00:47:40,400
touched on this or if i'm like you know
 

2577
00:47:40,400 --> 00:47:41,510
touched on this or if i'm like you know
i missed it but

2578
00:47:41,510 --> 00:47:41,520
i missed it but
 

2579
00:47:41,520 --> 00:47:43,589
i missed it but
uh when we called the e-call instruction

2580
00:47:43,589 --> 00:47:43,599
uh when we called the e-call instruction
 

2581
00:47:43,599 --> 00:47:45,109
uh when we called the e-call instruction
in the assembly code

2582
00:47:45,109 --> 00:47:45,119
in the assembly code
 

2583
00:47:45,119 --> 00:47:47,190
in the assembly code
uh what triggers the trampoline code to

2584
00:47:47,190 --> 00:47:47,200
uh what triggers the trampoline code to
 

2585
00:47:47,200 --> 00:47:48,230
uh what triggers the trampoline code to
start like

2586
00:47:48,230 --> 00:47:48,240
start like
 

2587
00:47:48,240 --> 00:47:51,510
start like
is it the switch of the um cpu mode from

2588
00:47:51,510 --> 00:47:51,520
is it the switch of the um cpu mode from
 

2589
00:47:51,520 --> 00:47:52,549
is it the switch of the um cpu mode from
supervisor

2590
00:47:52,549 --> 00:47:52,559
supervisor
 

2591
00:47:52,559 --> 00:47:54,390
supervisor
i'm sorry from user supervisor is it

2592
00:47:54,390 --> 00:47:54,400
i'm sorry from user supervisor is it
 

2593
00:47:54,400 --> 00:47:55,589
i'm sorry from user supervisor is it
something else

2594
00:47:55,589 --> 00:47:55,599
something else
 

2595
00:47:55,599 --> 00:47:59,430
something else
okay um so the code we're executing is

2596
00:47:59,430 --> 00:47:59,440
okay um so the code we're executing is
 

2597
00:47:59,440 --> 00:48:00,950
okay um so the code we're executing is
this e-call

2598
00:48:00,950 --> 00:48:00,960
this e-call
 

2599
00:48:00,960 --> 00:48:03,430
this e-call
the shell executes it in user space and

2600
00:48:03,430 --> 00:48:03,440
the shell executes it in user space and
 

2601
00:48:03,440 --> 00:48:05,030
the shell executes it in user space and
e-call does a couple things

2602
00:48:05,030 --> 00:48:05,040
e-call does a couple things
 

2603
00:48:05,040 --> 00:48:07,910
e-call does a couple things
the e-call instruction sets the mode to

2604
00:48:07,910 --> 00:48:07,920
the e-call instruction sets the mode to
 

2605
00:48:07,920 --> 00:48:09,430
the e-call instruction sets the mode to
supervisor

2606
00:48:09,430 --> 00:48:09,440
supervisor
 

2607
00:48:09,440 --> 00:48:13,589
supervisor
and the e-call instruction

2608
00:48:13,589 --> 00:48:13,599
and the e-call instruction
 

2609
00:48:13,599 --> 00:48:16,870
and the e-call instruction
saves the program counter and epc and

2610
00:48:16,870 --> 00:48:16,880
saves the program counter and epc and
 

2611
00:48:16,880 --> 00:48:19,030
saves the program counter and epc and
the e-call instruction sets the program

2612
00:48:19,030 --> 00:48:19,040
the e-call instruction sets the program
 

2613
00:48:19,040 --> 00:48:21,670
the e-call instruction sets the program
counter equal to

2614
00:48:21,670 --> 00:48:21,680
counter equal to
 

2615
00:48:21,680 --> 00:48:24,790
counter equal to
the control register called st vac so

2616
00:48:24,790 --> 00:48:24,800
the control register called st vac so
 

2617
00:48:24,800 --> 00:48:26,069
the control register called st vac so
and that seebeck is one of the many

2618
00:48:26,069 --> 00:48:26,079
and that seebeck is one of the many
 

2619
00:48:26,079 --> 00:48:27,750
and that seebeck is one of the many
things which the kernel sets up before

2620
00:48:27,750 --> 00:48:27,760
things which the kernel sets up before
 

2621
00:48:27,760 --> 00:48:31,589
things which the kernel sets up before
entering user space

2622
00:48:31,589 --> 00:48:31,599

 

2623
00:48:31,599 --> 00:48:34,150

and so here's sdvac scpec is just the

2624
00:48:34,150 --> 00:48:34,160
and so here's sdvac scpec is just the
 

2625
00:48:34,160 --> 00:48:35,349
and so here's sdvac scpec is just the
kernel set it

2626
00:48:35,349 --> 00:48:35,359
kernel set it
 

2627
00:48:35,359 --> 00:48:37,510
kernel set it
to the beginning of the trampoline page

2628
00:48:37,510 --> 00:48:37,520
to the beginning of the trampoline page
 

2629
00:48:37,520 --> 00:48:38,710
to the beginning of the trampoline page
that is

2630
00:48:38,710 --> 00:48:38,720
that is
 

2631
00:48:38,720 --> 00:48:41,910
that is
this address here so that when e-call

2632
00:48:41,910 --> 00:48:41,920
this address here so that when e-call
 

2633
00:48:41,920 --> 00:48:43,510
this address here so that when e-call
happens e-call just

2634
00:48:43,510 --> 00:48:43,520
happens e-call just
 

2635
00:48:43,520 --> 00:48:45,430
happens e-call just
copies s-t-vec into the program counter

2636
00:48:45,430 --> 00:48:45,440
copies s-t-vec into the program counter
 

2637
00:48:45,440 --> 00:48:47,349
copies s-t-vec into the program counter
and continues but now

2638
00:48:47,349 --> 00:48:47,359
and continues but now
 

2639
00:48:47,359 --> 00:48:49,510
and continues but now
and the program counter is executing

2640
00:48:49,510 --> 00:48:49,520
and the program counter is executing
 

2641
00:48:49,520 --> 00:48:54,549
and the program counter is executing
this address in the trampoline page

2642
00:48:54,549 --> 00:48:54,559

 

2643
00:48:54,559 --> 00:49:00,390

that clarifies it thank you okay

2644
00:49:00,390 --> 00:49:00,400

 

2645
00:49:00,400 --> 00:49:03,990

i also have a question um

2646
00:49:03,990 --> 00:49:04,000
i also have a question um
 

2647
00:49:04,000 --> 00:49:07,030
i also have a question um
why so some of the registers that are

2648
00:49:07,030 --> 00:49:07,040
why so some of the registers that are
 

2649
00:49:07,040 --> 00:49:08,150
why so some of the registers that are
saved

2650
00:49:08,150 --> 00:49:08,160
saved
 

2651
00:49:08,160 --> 00:49:11,910
saved
in the trap frame should not um

2652
00:49:11,910 --> 00:49:11,920
in the trap frame should not um
 

2653
00:49:11,920 --> 00:49:15,030
in the trap frame should not um
are also registers that um

2654
00:49:15,030 --> 00:49:15,040
are also registers that um
 

2655
00:49:15,040 --> 00:49:18,069
are also registers that um
the user program had access to

2656
00:49:18,069 --> 00:49:18,079
the user program had access to
 

2657
00:49:18,079 --> 00:49:21,109
the user program had access to
why why why did we

2658
00:49:21,109 --> 00:49:21,119
why why why did we
 

2659
00:49:21,119 --> 00:49:24,549
why why why did we
need to um

2660
00:49:24,549 --> 00:49:24,559
need to um
 

2661
00:49:24,559 --> 00:49:27,990
need to um
use a new

2662
00:49:27,990 --> 00:49:28,000
use a new
 

2663
00:49:28,000 --> 00:49:30,870
use a new
region in memory and not use the program

2664
00:49:30,870 --> 00:49:30,880
region in memory and not use the program
 

2665
00:49:30,880 --> 00:49:34,630
region in memory and not use the program
stack

2666
00:49:34,630 --> 00:49:34,640

 

2667
00:49:34,640 --> 00:49:37,430

okay um well there's maybe two questions

2668
00:49:37,430 --> 00:49:37,440
okay um well there's maybe two questions
 

2669
00:49:37,440 --> 00:49:39,030
okay um well there's maybe two questions
here one is

2670
00:49:39,030 --> 00:49:39,040
here one is
 

2671
00:49:39,040 --> 00:49:41,190
here one is
maybe why do we have to save the

2672
00:49:41,190 --> 00:49:41,200
maybe why do we have to save the
 

2673
00:49:41,200 --> 00:49:43,750
maybe why do we have to save the
registers at all

2674
00:49:43,750 --> 00:49:43,760
registers at all
 

2675
00:49:43,760 --> 00:49:45,109
registers at all
the the reason why the kernel has to

2676
00:49:45,109 --> 00:49:45,119
the the reason why the kernel has to
 

2677
00:49:45,119 --> 00:49:47,109
the the reason why the kernel has to
save the registers is that the kernel

2678
00:49:47,109 --> 00:49:47,119
save the registers is that the kernel
 

2679
00:49:47,119 --> 00:49:50,470
save the registers is that the kernel
is about to run c code that overwrites

2680
00:49:50,470 --> 00:49:50,480
is about to run c code that overwrites
 

2681
00:49:50,480 --> 00:49:52,069
is about to run c code that overwrites
those registers

2682
00:49:52,069 --> 00:49:52,079
those registers
 

2683
00:49:52,079 --> 00:49:54,549
those registers
um and if we ever want to resume the

2684
00:49:54,549 --> 00:49:54,559
um and if we ever want to resume the
 

2685
00:49:54,559 --> 00:49:56,230
um and if we ever want to resume the
user code correctly we need to resume it

2686
00:49:56,230 --> 00:49:56,240
user code correctly we need to resume it
 

2687
00:49:56,240 --> 00:49:57,430
user code correctly we need to resume it
with its registers

2688
00:49:57,430 --> 00:49:57,440
with its registers
 

2689
00:49:57,440 --> 00:49:59,670
with its registers
having their original values that you

2690
00:49:59,670 --> 00:49:59,680
having their original values that you
 

2691
00:49:59,680 --> 00:50:00,950
having their original values that you
know as of when the e call

2692
00:50:00,950 --> 00:50:00,960
know as of when the e call
 

2693
00:50:00,960 --> 00:50:03,109
know as of when the e call
was executed so we have to save all the

2694
00:50:03,109 --> 00:50:03,119
was executed so we have to save all the
 

2695
00:50:03,119 --> 00:50:04,790
was executed so we have to save all the
registers

2696
00:50:04,790 --> 00:50:04,800
registers
 

2697
00:50:04,800 --> 00:50:07,990
registers
in the trap frame so that later on we

2698
00:50:07,990 --> 00:50:08,000
in the trap frame so that later on we
 

2699
00:50:08,000 --> 00:50:08,710
in the trap frame so that later on we
can restore

2700
00:50:08,710 --> 00:50:08,720
can restore
 

2701
00:50:08,720 --> 00:50:12,069
can restore
all of their values just before resuming

2702
00:50:12,069 --> 00:50:12,079
all of their values just before resuming
 

2703
00:50:12,079 --> 00:50:14,309
all of their values just before resuming
the user code

2704
00:50:14,309 --> 00:50:14,319
the user code
 

2705
00:50:14,319 --> 00:50:15,510
the user code
maybe the other half of your question is

2706
00:50:15,510 --> 00:50:15,520
maybe the other half of your question is
 

2707
00:50:15,520 --> 00:50:17,670
maybe the other half of your question is
how come they're saved in the crap frame

2708
00:50:17,670 --> 00:50:17,680
how come they're saved in the crap frame
 

2709
00:50:17,680 --> 00:50:19,510
how come they're saved in the crap frame
and not on the user stack

2710
00:50:19,510 --> 00:50:19,520
and not on the user stack
 

2711
00:50:19,520 --> 00:50:22,069
and not on the user stack
um the answer to that is that we're not

2712
00:50:22,069 --> 00:50:22,079
um the answer to that is that we're not
 

2713
00:50:22,079 --> 00:50:24,790
um the answer to that is that we're not
sure the user program even has a stack

2714
00:50:24,790 --> 00:50:24,800
sure the user program even has a stack
 

2715
00:50:24,800 --> 00:50:25,829
sure the user program even has a stack
there are certainly programming

2716
00:50:25,829 --> 00:50:25,839
there are certainly programming
 

2717
00:50:25,839 --> 00:50:28,790
there are certainly programming
languages that don't have a stack

2718
00:50:28,790 --> 00:50:28,800
languages that don't have a stack
 

2719
00:50:28,800 --> 00:50:30,470
languages that don't have a stack
and the stack pointer doesn't point to

2720
00:50:30,470 --> 00:50:30,480
and the stack pointer doesn't point to
 

2721
00:50:30,480 --> 00:50:32,309
and the stack pointer doesn't point to
anything in particular or might be have

2722
00:50:32,309 --> 00:50:32,319
anything in particular or might be have
 

2723
00:50:32,319 --> 00:50:33,349
anything in particular or might be have
value zero

2724
00:50:33,349 --> 00:50:33,359
value zero
 

2725
00:50:33,359 --> 00:50:34,790
value zero
there's also programming languages that

2726
00:50:34,790 --> 00:50:34,800
there's also programming languages that
 

2727
00:50:34,800 --> 00:50:36,870
there's also programming languages that
yeah they have a stack but it's in like

2728
00:50:36,870 --> 00:50:36,880
yeah they have a stack but it's in like
 

2729
00:50:36,880 --> 00:50:38,470
yeah they have a stack but it's in like
a format that's

2730
00:50:38,470 --> 00:50:38,480
a format that's
 

2731
00:50:38,480 --> 00:50:39,990
a format that's
you know some weird format that the

2732
00:50:39,990 --> 00:50:40,000
you know some weird format that the
 

2733
00:50:40,000 --> 00:50:41,829
you know some weird format that the
kernel doesn't understand

2734
00:50:41,829 --> 00:50:41,839
kernel doesn't understand
 

2735
00:50:41,839 --> 00:50:43,349
kernel doesn't understand
uh maybe because the programming

2736
00:50:43,349 --> 00:50:43,359
uh maybe because the programming
 

2737
00:50:43,359 --> 00:50:45,430
uh maybe because the programming
language allocates its stack in small

2738
00:50:45,430 --> 00:50:45,440
language allocates its stack in small
 

2739
00:50:45,440 --> 00:50:46,710
language allocates its stack in small
blocks

2740
00:50:46,710 --> 00:50:46,720
blocks
 

2741
00:50:46,720 --> 00:50:49,349
blocks
uh from the heap and the programming

2742
00:50:49,349 --> 00:50:49,359
uh from the heap and the programming
 

2743
00:50:49,359 --> 00:50:51,349
uh from the heap and the programming
language runtime understands how to

2744
00:50:51,349 --> 00:50:51,359
language runtime understands how to
 

2745
00:50:51,359 --> 00:50:52,710
language runtime understands how to
you know use these small blocks of

2746
00:50:52,710 --> 00:50:52,720
you know use these small blocks of
 

2747
00:50:52,720 --> 00:50:54,390
you know use these small blocks of
memory as a stack but

2748
00:50:54,390 --> 00:50:54,400
memory as a stack but
 

2749
00:50:54,400 --> 00:50:57,670
memory as a stack but
you know the kernel has no idea

2750
00:50:57,670 --> 00:50:57,680
you know the kernel has no idea
 

2751
00:50:57,680 --> 00:50:59,990
you know the kernel has no idea
so we if we want to be able to run sort

2752
00:50:59,990 --> 00:51:00,000
so we if we want to be able to run sort
 

2753
00:51:00,000 --> 00:51:01,430
so we if we want to be able to run sort
of arbitrary user programs written in

2754
00:51:01,430 --> 00:51:01,440
of arbitrary user programs written in
 

2755
00:51:01,440 --> 00:51:02,630
of arbitrary user programs written in
lots of different languages

2756
00:51:02,630 --> 00:51:02,640
lots of different languages
 

2757
00:51:02,640 --> 00:51:04,309
lots of different languages
the kernel can't make any assumptions

2758
00:51:04,309 --> 00:51:04,319
the kernel can't make any assumptions
 

2759
00:51:04,319 --> 00:51:05,829
the kernel can't make any assumptions
about

2760
00:51:05,829 --> 00:51:05,839
about
 

2761
00:51:05,839 --> 00:51:08,870
about
what parts of user memory it's allowed

2762
00:51:08,870 --> 00:51:08,880
what parts of user memory it's allowed
 

2763
00:51:08,880 --> 00:51:11,190
what parts of user memory it's allowed
exists or valid or it's allowed to read

2764
00:51:11,190 --> 00:51:11,200
exists or valid or it's allowed to read
 

2765
00:51:11,200 --> 00:51:12,309
exists or valid or it's allowed to read
or write

2766
00:51:12,309 --> 00:51:12,319
or write
 

2767
00:51:12,319 --> 00:51:13,589
or write
and so the kernel has to be sort of

2768
00:51:13,589 --> 00:51:13,599
and so the kernel has to be sort of
 

2769
00:51:13,599 --> 00:51:15,510
and so the kernel has to be sort of
self-contained in saving and destroying

2770
00:51:15,510 --> 00:51:15,520
self-contained in saving and destroying
 

2771
00:51:15,520 --> 00:51:17,510
self-contained in saving and destroying
the registers

2772
00:51:17,510 --> 00:51:17,520
the registers
 

2773
00:51:17,520 --> 00:51:19,750
the registers
that's why the kernel saves this stuff

2774
00:51:19,750 --> 00:51:19,760
that's why the kernel saves this stuff
 

2775
00:51:19,760 --> 00:51:20,549
that's why the kernel saves this stuff
in its own

2776
00:51:20,549 --> 00:51:20,559
in its own
 

2777
00:51:20,559 --> 00:51:22,950
in its own
memory in the trap frame rather than in

2778
00:51:22,950 --> 00:51:22,960
memory in the trap frame rather than in
 

2779
00:51:22,960 --> 00:51:24,549
memory in the trap frame rather than in
user memory

2780
00:51:24,549 --> 00:51:24,559
user memory
 

2781
00:51:24,559 --> 00:51:29,829
user memory
okay

2782
00:51:29,829 --> 00:51:29,839

 

2783
00:51:29,839 --> 00:51:40,069

okay anything else

2784
00:51:40,069 --> 00:51:40,079

 

2785
00:51:40,079 --> 00:51:42,069

okay we're still right at the beginning

2786
00:51:42,069 --> 00:51:42,079
okay we're still right at the beginning
 

2787
00:51:42,079 --> 00:51:44,390
okay we're still right at the beginning
of um

2788
00:51:44,390 --> 00:51:44,400
of um
 

2789
00:51:44,400 --> 00:51:48,069
of um
the code in trampoline

2790
00:51:48,069 --> 00:51:48,079
the code in trampoline
 

2791
00:51:48,079 --> 00:51:51,270
the code in trampoline
um this code is unfortunately we refer

2792
00:51:51,270 --> 00:51:51,280
um this code is unfortunately we refer
 

2793
00:51:51,280 --> 00:51:52,309
um this code is unfortunately we refer
to it both

2794
00:51:52,309 --> 00:51:52,319
to it both
 

2795
00:51:52,319 --> 00:51:56,470
to it both
as uservac um and as the trampoline code

2796
00:51:56,470 --> 00:51:56,480
as uservac um and as the trampoline code
 

2797
00:51:56,480 --> 00:51:58,470
as uservac um and as the trampoline code
we barely started executing it i think i

2798
00:51:58,470 --> 00:51:58,480
we barely started executing it i think i
 

2799
00:51:58,480 --> 00:52:00,470
we barely started executing it i think i
just set a breakpoint

2800
00:52:00,470 --> 00:52:00,480
just set a breakpoint
 

2801
00:52:00,480 --> 00:52:04,069
just set a breakpoint
um in this code um

2802
00:52:04,069 --> 00:52:04,079
um in this code um
 

2803
00:52:04,079 --> 00:52:06,069
um in this code um
after all the registers have been saved

2804
00:52:06,069 --> 00:52:06,079
after all the registers have been saved
 

2805
00:52:06,079 --> 00:52:09,990
after all the registers have been saved
i think i set a

2806
00:52:09,990 --> 00:52:10,000

 

2807
00:52:10,000 --> 00:52:12,150

uh breakpoint of this instruction um so

2808
00:52:12,150 --> 00:52:12,160
uh breakpoint of this instruction um so
 

2809
00:52:12,160 --> 00:52:13,589
uh breakpoint of this instruction um so
we'll continue executing

2810
00:52:13,589 --> 00:52:13,599
we'll continue executing
 

2811
00:52:13,599 --> 00:52:15,190
we'll continue executing
skip over all these saves of all the

2812
00:52:15,190 --> 00:52:15,200
skip over all these saves of all the
 

2813
00:52:15,200 --> 00:52:17,670
skip over all these saves of all the
user registers the crap frame

2814
00:52:17,670 --> 00:52:17,680
user registers the crap frame
 

2815
00:52:17,680 --> 00:52:20,230
user registers the crap frame
okay and now we're executing this load

2816
00:52:20,230 --> 00:52:20,240
okay and now we're executing this load
 

2817
00:52:20,240 --> 00:52:22,390
okay and now we're executing this load
instruction this load instruction

2818
00:52:22,390 --> 00:52:22,400
instruction this load instruction
 

2819
00:52:22,400 --> 00:52:24,630
instruction this load instruction
is loading into the stack pointer

2820
00:52:24,630 --> 00:52:24,640
is loading into the stack pointer
 

2821
00:52:24,640 --> 00:52:25,430
is loading into the stack pointer
register

2822
00:52:25,430 --> 00:52:25,440
register
 

2823
00:52:25,440 --> 00:52:27,270
register
and what it's loading is the value is

2824
00:52:27,270 --> 00:52:27,280
and what it's loading is the value is
 

2825
00:52:27,280 --> 00:52:29,349
and what it's loading is the value is
the eighth slot

2826
00:52:29,349 --> 00:52:29,359
the eighth slot
 

2827
00:52:29,359 --> 00:52:32,390
the eighth slot
in the block of memory pointed to by a0

2828
00:52:32,390 --> 00:52:32,400
in the block of memory pointed to by a0
 

2829
00:52:32,400 --> 00:52:34,790
in the block of memory pointed to by a0
we remember a0 points this the trap

2830
00:52:34,790 --> 00:52:34,800
we remember a0 points this the trap
 

2831
00:52:34,800 --> 00:52:35,750
we remember a0 points this the trap
frame

2832
00:52:35,750 --> 00:52:35,760
frame
 

2833
00:52:35,760 --> 00:52:38,470
frame
to this uh virtual address you know the

2834
00:52:38,470 --> 00:52:38,480
to this uh virtual address you know the
 

2835
00:52:38,480 --> 00:52:40,870
to this uh virtual address you know the
second to last page

2836
00:52:40,870 --> 00:52:40,880
second to last page
 

2837
00:52:40,880 --> 00:52:44,790
second to last page
and the format of the trap page of the

2838
00:52:44,790 --> 00:52:44,800
and the format of the trap page of the
 

2839
00:52:44,800 --> 00:52:47,750
and the format of the trap page of the
trap frame here's the form of the trap

2840
00:52:47,750 --> 00:52:47,760
trap frame here's the form of the trap
 

2841
00:52:47,760 --> 00:52:48,230
trap frame here's the form of the trap
name

2842
00:52:48,230 --> 00:52:48,240
name
 

2843
00:52:48,240 --> 00:52:51,109
name
we've conveniently labeled each field

2844
00:52:51,109 --> 00:52:51,119
we've conveniently labeled each field
 

2845
00:52:51,119 --> 00:52:51,750
we've conveniently labeled each field
with its

2846
00:52:51,750 --> 00:52:51,760
with its
 

2847
00:52:51,760 --> 00:52:54,230
with its
offset in bytes so that means that load

2848
00:52:54,230 --> 00:52:54,240
offset in bytes so that means that load
 

2849
00:52:54,240 --> 00:52:54,870
offset in bytes so that means that load
in the

2850
00:52:54,870 --> 00:52:54,880
in the
 

2851
00:52:54,880 --> 00:52:57,349
in the
eighth starting at the eighth byte of

2852
00:52:57,349 --> 00:52:57,359
eighth starting at the eighth byte of
 

2853
00:52:57,359 --> 00:52:59,349
eighth starting at the eighth byte of
the trap frame means we're loading

2854
00:52:59,349 --> 00:52:59,359
the trap frame means we're loading
 

2855
00:52:59,359 --> 00:53:01,430
the trap frame means we're loading
the kernel stack pointer and the one of

2856
00:53:01,430 --> 00:53:01,440
the kernel stack pointer and the one of
 

2857
00:53:01,440 --> 00:53:02,950
the kernel stack pointer and the one of
the things the kernel sets up

2858
00:53:02,950 --> 00:53:02,960
the things the kernel sets up
 

2859
00:53:02,960 --> 00:53:05,030
the things the kernel sets up
before entering user space is it sets

2860
00:53:05,030 --> 00:53:05,040
before entering user space is it sets
 

2861
00:53:05,040 --> 00:53:07,030
before entering user space is it sets
this slot in the trap frame

2862
00:53:07,030 --> 00:53:07,040
this slot in the trap frame
 

2863
00:53:07,040 --> 00:53:10,069
this slot in the trap frame
to be equal to this processes

2864
00:53:10,069 --> 00:53:10,079
to be equal to this processes
 

2865
00:53:10,079 --> 00:53:12,549
to be equal to this processes
uh kernel stack so what this instruction

2866
00:53:12,549 --> 00:53:12,559
uh kernel stack so what this instruction
 

2867
00:53:12,559 --> 00:53:14,549
uh kernel stack so what this instruction
here is doing is

2868
00:53:14,549 --> 00:53:14,559
here is doing is
 

2869
00:53:14,559 --> 00:53:17,030
here is doing is
initializing the stack pointer to point

2870
00:53:17,030 --> 00:53:17,040
initializing the stack pointer to point
 

2871
00:53:17,040 --> 00:53:17,829
initializing the stack pointer to point
to the top

2872
00:53:17,829 --> 00:53:17,839
to the top
 

2873
00:53:17,839 --> 00:53:20,390
to the top
of this processes kernel stack which is

2874
00:53:20,390 --> 00:53:20,400
of this processes kernel stack which is
 

2875
00:53:20,400 --> 00:53:22,710
of this processes kernel stack which is
part of what you need to do in order to

2876
00:53:22,710 --> 00:53:22,720
part of what you need to do in order to
 

2877
00:53:22,720 --> 00:53:25,910
part of what you need to do in order to
to run user code

2878
00:53:25,910 --> 00:53:25,920

 

2879
00:53:25,920 --> 00:53:27,750

all right so what's left or within a few

2880
00:53:27,750 --> 00:53:27,760
all right so what's left or within a few
 

2881
00:53:27,760 --> 00:53:29,109
all right so what's left or within a few
instructions of getting to the end of

2882
00:53:29,109 --> 00:53:29,119
instructions of getting to the end of
 

2883
00:53:29,119 --> 00:53:30,710
instructions of getting to the end of
this trampoline code

2884
00:53:30,710 --> 00:53:30,720
this trampoline code
 

2885
00:53:30,720 --> 00:53:34,470
this trampoline code
um we loaded the stack pointer

2886
00:53:34,470 --> 00:53:34,480
um we loaded the stack pointer
 

2887
00:53:34,480 --> 00:53:36,069
um we loaded the stack pointer
so maybe i can print the stack pointer

2888
00:53:36,069 --> 00:53:36,079
so maybe i can print the stack pointer
 

2889
00:53:36,079 --> 00:53:39,109
so maybe i can print the stack pointer
for you let's see

2890
00:53:39,109 --> 00:53:39,119

 

2891
00:53:39,119 --> 00:53:46,790

yeah this is um

2892
00:53:46,790 --> 00:53:46,800

 

2893
00:53:46,800 --> 00:53:50,390

uh all right well this is the kernels

2894
00:53:50,390 --> 00:53:50,400
uh all right well this is the kernels
 

2895
00:53:50,400 --> 00:53:52,069
uh all right well this is the kernels
this process is kernel stack it's up in

2896
00:53:52,069 --> 00:53:52,079
this process is kernel stack it's up in
 

2897
00:53:52,079 --> 00:53:55,270
this process is kernel stack it's up in
high memory because xv6

2898
00:53:55,270 --> 00:53:55,280
high memory because xv6
 

2899
00:53:55,280 --> 00:53:59,109
high memory because xv6
um treats kernel sex especially so that

2900
00:53:59,109 --> 00:53:59,119
um treats kernel sex especially so that
 

2901
00:53:59,119 --> 00:54:01,109
um treats kernel sex especially so that
you can put a guard page

2902
00:54:01,109 --> 00:54:01,119
you can put a guard page
 

2903
00:54:01,119 --> 00:54:04,710
you can put a guard page
under each kernel stack okay so this

2904
00:54:04,710 --> 00:54:04,720
under each kernel stack okay so this
 

2905
00:54:04,720 --> 00:54:06,870
under each kernel stack okay so this
load into tp

2906
00:54:06,870 --> 00:54:06,880
load into tp
 

2907
00:54:06,880 --> 00:54:09,750
load into tp
it turns out that because there's no

2908
00:54:09,750 --> 00:54:09,760
it turns out that because there's no
 

2909
00:54:09,760 --> 00:54:11,670
it turns out that because there's no
direct way in risk five to figure out

2910
00:54:11,670 --> 00:54:11,680
direct way in risk five to figure out
 

2911
00:54:11,680 --> 00:54:12,790
direct way in risk five to figure out
what core

2912
00:54:12,790 --> 00:54:12,800
what core
 

2913
00:54:12,800 --> 00:54:14,630
what core
which of the multiple cores you're

2914
00:54:14,630 --> 00:54:14,640
which of the multiple cores you're
 

2915
00:54:14,640 --> 00:54:15,990
which of the multiple cores you're
running on

2916
00:54:15,990 --> 00:54:16,000
running on
 

2917
00:54:16,000 --> 00:54:19,829
running on
xv6 actually keeps the core number

2918
00:54:19,829 --> 00:54:19,839
xv6 actually keeps the core number
 

2919
00:54:19,839 --> 00:54:22,870
xv6 actually keeps the core number
called the heart id in the tp register

2920
00:54:22,870 --> 00:54:22,880
called the heart id in the tp register
 

2921
00:54:22,880 --> 00:54:24,470
called the heart id in the tp register
and this is used in a bunch of places in

2922
00:54:24,470 --> 00:54:24,480
and this is used in a bunch of places in
 

2923
00:54:24,480 --> 00:54:26,710
and this is used in a bunch of places in
the kernel for example

2924
00:54:26,710 --> 00:54:26,720
the kernel for example
 

2925
00:54:26,720 --> 00:54:29,589
the kernel for example
it's part of the machinery for kernel

2926
00:54:29,589 --> 00:54:29,599
it's part of the machinery for kernel
 

2927
00:54:29,599 --> 00:54:31,349
it's part of the machinery for kernel
code to figure out what process

2928
00:54:31,349 --> 00:54:31,359
code to figure out what process
 

2929
00:54:31,359 --> 00:54:36,710
code to figure out what process
is currently running on that core

2930
00:54:36,710 --> 00:54:36,720

 

2931
00:54:36,720 --> 00:54:41,030

okay and if we execute this hopefully uh

2932
00:54:41,030 --> 00:54:41,040
okay and if we execute this hopefully uh
 

2933
00:54:41,040 --> 00:54:43,030
okay and if we execute this hopefully uh
tp we're running on core zero and that

2934
00:54:43,030 --> 00:54:43,040
tp we're running on core zero and that
 

2935
00:54:43,040 --> 00:54:44,630
tp we're running on core zero and that
makes sense because i've configured

2936
00:54:44,630 --> 00:54:44,640
makes sense because i've configured
 

2937
00:54:44,640 --> 00:54:48,470
makes sense because i've configured
qmu to only give one core to xv6 so we

2938
00:54:48,470 --> 00:54:48,480
qmu to only give one core to xv6 so we
 

2939
00:54:48,480 --> 00:54:53,109
qmu to only give one core to xv6 so we
are indeed running on core zero

2940
00:54:53,109 --> 00:54:53,119
are indeed running on core zero
 

2941
00:54:53,119 --> 00:54:56,150
are indeed running on core zero
this next thing uh is loading the

2942
00:54:56,150 --> 00:54:56,160
this next thing uh is loading the
 

2943
00:54:56,160 --> 00:54:57,190
this next thing uh is loading the
address

2944
00:54:57,190 --> 00:54:57,200
address
 

2945
00:54:57,200 --> 00:55:00,710
address
of um well actually the

2946
00:55:00,710 --> 00:55:00,720
of um well actually the
 

2947
00:55:00,720 --> 00:55:04,870
of um well actually the
the load into t0

2948
00:55:04,870 --> 00:55:04,880

 

2949
00:55:04,880 --> 00:55:08,470

um i think loaded a

2950
00:55:08,470 --> 00:55:08,480
um i think loaded a
 

2951
00:55:08,480 --> 00:55:11,910
um i think loaded a
pointer to the first c

2952
00:55:11,910 --> 00:55:11,920
pointer to the first c
 

2953
00:55:11,920 --> 00:55:13,190
pointer to the first c
function that we're going to execute

2954
00:55:13,190 --> 00:55:13,200
function that we're going to execute
 

2955
00:55:13,200 --> 00:55:14,950
function that we're going to execute
which is user trap so we use that in a

2956
00:55:14,950 --> 00:55:14,960
which is user trap so we use that in a
 

2957
00:55:14,960 --> 00:55:16,069
which is user trap so we use that in a
few instructions to just

2958
00:55:16,069 --> 00:55:16,079
few instructions to just
 

2959
00:55:16,079 --> 00:55:20,789
few instructions to just
jump um to the user trap c function

2960
00:55:20,789 --> 00:55:20,799
jump um to the user trap c function
 

2961
00:55:20,799 --> 00:55:24,309
jump um to the user trap c function
this load into t1 here is loading the

2962
00:55:24,309 --> 00:55:24,319
this load into t1 here is loading the
 

2963
00:55:24,319 --> 00:55:27,109
this load into t1 here is loading the
address of the

2964
00:55:27,109 --> 00:55:27,119
address of the
 

2965
00:55:27,119 --> 00:55:30,230
address of the
kernel page table so we can print

2966
00:55:30,230 --> 00:55:30,240
kernel page table so we can print
 

2967
00:55:30,240 --> 00:55:32,710
kernel page table so we can print
so we're about to switch page tables

2968
00:55:32,710 --> 00:55:32,720
so we're about to switch page tables
 

2969
00:55:32,720 --> 00:55:34,710
so we're about to switch page tables
turns out the uh

2970
00:55:34,710 --> 00:55:34,720
turns out the uh
 

2971
00:55:34,720 --> 00:55:35,990
turns out the uh
this thing in t1 is not actually

2972
00:55:35,990 --> 00:55:36,000
this thing in t1 is not actually
 

2973
00:55:36,000 --> 00:55:37,670
this thing in t1 is not actually
literally the address of the kernel page

2974
00:55:37,670 --> 00:55:37,680
literally the address of the kernel page
 

2975
00:55:37,680 --> 00:55:39,109
literally the address of the kernel page
table it's the thing you need to put

2976
00:55:39,109 --> 00:55:39,119
table it's the thing you need to put
 

2977
00:55:39,119 --> 00:55:40,950
table it's the thing you need to put
into sat p

2978
00:55:40,950 --> 00:55:40,960
into sat p
 

2979
00:55:40,960 --> 00:55:44,069
into sat p
um which is a has the address of the

2980
00:55:44,069 --> 00:55:44,079
um which is a has the address of the
 

2981
00:55:44,079 --> 00:55:45,670
um which is a has the address of the
kernel page table but shifted around

2982
00:55:45,670 --> 00:55:45,680
kernel page table but shifted around
 

2983
00:55:45,680 --> 00:55:48,230
kernel page table but shifted around
with some extra flag bit set but as soon

2984
00:55:48,230 --> 00:55:48,240
with some extra flag bit set but as soon
 

2985
00:55:48,240 --> 00:55:49,829
with some extra flag bit set but as soon
as the csrw

2986
00:55:49,829 --> 00:55:49,839
as the csrw
 

2987
00:55:49,839 --> 00:55:51,670
as the csrw
instruction executes we'll switch page

2988
00:55:51,670 --> 00:55:51,680
instruction executes we'll switch page
 

2989
00:55:51,680 --> 00:55:53,349
instruction executes we'll switch page
tables from the user page table to the

2990
00:55:53,349 --> 00:55:53,359
tables from the user page table to the
 

2991
00:55:53,359 --> 00:55:54,309
tables from the user page table to the
kernel page table

2992
00:55:54,309 --> 00:55:54,319
kernel page table
 

2993
00:55:54,319 --> 00:55:55,589
kernel page table
and let me just reinforce that by

2994
00:55:55,589 --> 00:55:55,599
and let me just reinforce that by
 

2995
00:55:55,599 --> 00:55:57,510
and let me just reinforce that by
looking at the current page table

2996
00:55:57,510 --> 00:55:57,520
looking at the current page table
 

2997
00:55:57,520 --> 00:55:59,829
looking at the current page table
right now we're still executing with

2998
00:55:59,829 --> 00:55:59,839
right now we're still executing with
 

2999
00:55:59,839 --> 00:56:00,870
right now we're still executing with
this very small

3000
00:56:00,870 --> 00:56:00,880
this very small
 

3001
00:56:00,880 --> 00:56:03,349
this very small
user page table and run step by to

3002
00:56:03,349 --> 00:56:03,359
user page table and run step by to
 

3003
00:56:03,359 --> 00:56:04,390
user page table and run step by to
execute

3004
00:56:04,390 --> 00:56:04,400
execute
 

3005
00:56:04,400 --> 00:56:10,950
execute
the load into sat p

3006
00:56:10,950 --> 00:56:10,960

 

3007
00:56:10,960 --> 00:56:12,309

and we'll look again at the kernel page

3008
00:56:12,309 --> 00:56:12,319
and we'll look again at the kernel page
 

3009
00:56:12,319 --> 00:56:13,750
and we'll look again at the kernel page
and now we're in a completely different

3010
00:56:13,750 --> 00:56:13,760
and now we're in a completely different
 

3011
00:56:13,760 --> 00:56:15,349
and now we're in a completely different
page table right this is the kernel page

3012
00:56:15,349 --> 00:56:15,359
page table right this is the kernel page
 

3013
00:56:15,359 --> 00:56:16,309
page table right this is the kernel page
table

3014
00:56:16,309 --> 00:56:16,319
table
 

3015
00:56:16,319 --> 00:56:17,510
table
and you can see all these different

3016
00:56:17,510 --> 00:56:17,520
and you can see all these different
 

3017
00:56:17,520 --> 00:56:19,670
and you can see all these different
regions of memory and device control

3018
00:56:19,670 --> 00:56:19,680
regions of memory and device control
 

3019
00:56:19,680 --> 00:56:22,950
regions of memory and device control
registers and whatnot that the uh

3020
00:56:22,950 --> 00:56:22,960
registers and whatnot that the uh
 

3021
00:56:22,960 --> 00:56:26,069
registers and whatnot that the uh
kernel sets up in its own uh big kernel

3022
00:56:26,069 --> 00:56:26,079
kernel sets up in its own uh big kernel
 

3023
00:56:26,079 --> 00:56:26,789
kernel sets up in its own uh big kernel
page date

3024
00:56:26,789 --> 00:56:26,799
page date
 

3025
00:56:26,799 --> 00:56:28,829
page date
so we've successfully switched page

3026
00:56:28,829 --> 00:56:28,839
so we've successfully switched page
 

3027
00:56:28,839 --> 00:56:30,950
so we've successfully switched page
tables and now the kernel page tables

3028
00:56:30,950 --> 00:56:30,960
tables and now the kernel page tables
 

3029
00:56:30,960 --> 00:56:31,349
tables and now the kernel page tables
and

3030
00:56:31,349 --> 00:56:31,359
and
 

3031
00:56:31,359 --> 00:56:32,549
and
so we're like in pretty good shape at

3032
00:56:32,549 --> 00:56:32,559
so we're like in pretty good shape at
 

3033
00:56:32,559 --> 00:56:34,390
so we're like in pretty good shape at
this point because we have a stack

3034
00:56:34,390 --> 00:56:34,400
this point because we have a stack
 

3035
00:56:34,400 --> 00:56:36,470
this point because we have a stack
um we have the kernel page table we can

3036
00:56:36,470 --> 00:56:36,480
um we have the kernel page table we can
 

3037
00:56:36,480 --> 00:56:38,630
um we have the kernel page table we can
read my kernel data we're really

3038
00:56:38,630 --> 00:56:38,640
read my kernel data we're really
 

3039
00:56:38,640 --> 00:56:42,069
read my kernel data we're really
pretty much ready to execute c code in

3040
00:56:42,069 --> 00:56:42,079
pretty much ready to execute c code in
 

3041
00:56:42,079 --> 00:56:43,270
pretty much ready to execute c code in
the kernel

3042
00:56:43,270 --> 00:56:43,280
the kernel
 

3043
00:56:43,280 --> 00:56:46,630
the kernel
one puzzle though is how come

3044
00:56:46,630 --> 00:56:46,640
one puzzle though is how come
 

3045
00:56:46,640 --> 00:56:49,109
one puzzle though is how come
we didn't just crash after all we were

3046
00:56:49,109 --> 00:56:49,119
we didn't just crash after all we were
 

3047
00:56:49,119 --> 00:56:50,950
we didn't just crash after all we were
executing somewhere in memory

3048
00:56:50,950 --> 00:56:50,960
executing somewhere in memory
 

3049
00:56:50,960 --> 00:56:52,390
executing somewhere in memory
and the program counter holds a virtual

3050
00:56:52,390 --> 00:56:52,400
and the program counter holds a virtual
 

3051
00:56:52,400 --> 00:56:54,069
and the program counter holds a virtual
address if we

3052
00:56:54,069 --> 00:56:54,079
address if we
 

3053
00:56:54,079 --> 00:56:57,109
address if we
switch page tables why doesn't that

3054
00:56:57,109 --> 00:56:57,119
switch page tables why doesn't that
 

3055
00:56:57,119 --> 00:56:59,430
switch page tables why doesn't that
um just cause some random garbage or

3056
00:56:59,430 --> 00:56:59,440
um just cause some random garbage or
 

3057
00:56:59,440 --> 00:57:00,710
um just cause some random garbage or
nothing at all

3058
00:57:00,710 --> 00:57:00,720
nothing at all
 

3059
00:57:00,720 --> 00:57:03,030
nothing at all
uh to be mapped in the new page table

3060
00:57:03,030 --> 00:57:03,040
uh to be mapped in the new page table
 

3061
00:57:03,040 --> 00:57:05,349
uh to be mapped in the new page table
under foot where we were executing

3062
00:57:05,349 --> 00:57:05,359
under foot where we were executing
 

3063
00:57:05,359 --> 00:57:06,549
under foot where we were executing
and we're not crashing here actually

3064
00:57:06,549 --> 00:57:06,559
and we're not crashing here actually
 

3065
00:57:06,559 --> 00:57:08,710
and we're not crashing here actually
executing these instructions

3066
00:57:08,710 --> 00:57:08,720
executing these instructions
 

3067
00:57:08,720 --> 00:57:13,270
executing these instructions
um any guesses what's going on

3068
00:57:13,270 --> 00:57:13,280
um any guesses what's going on
 

3069
00:57:13,280 --> 00:57:16,950
um any guesses what's going on
i think it's because oh sorry

3070
00:57:16,950 --> 00:57:16,960
i think it's because oh sorry
 

3071
00:57:16,960 --> 00:57:19,670
i think it's because oh sorry
um because we're still in the trampoline

3072
00:57:19,670 --> 00:57:19,680
um because we're still in the trampoline
 

3073
00:57:19,680 --> 00:57:20,950
um because we're still in the trampoline
code and the trampoline

3074
00:57:20,950 --> 00:57:20,960
code and the trampoline
 

3075
00:57:20,960 --> 00:57:23,430
code and the trampoline
is mapped at the same virtual address

3076
00:57:23,430 --> 00:57:23,440
is mapped at the same virtual address
 

3077
00:57:23,440 --> 00:57:23,990
is mapped at the same virtual address
both in

3078
00:57:23,990 --> 00:57:24,000
both in
 

3079
00:57:24,000 --> 00:57:26,870
both in
user and kernel that's absolutely

3080
00:57:26,870 --> 00:57:26,880
user and kernel that's absolutely
 

3081
00:57:26,880 --> 00:57:28,069
user and kernel that's absolutely
correct

3082
00:57:28,069 --> 00:57:28,079
correct
 

3083
00:57:28,079 --> 00:57:29,829
correct
and so you i don't know if you remember

3084
00:57:29,829 --> 00:57:29,839
and so you i don't know if you remember
 

3085
00:57:29,839 --> 00:57:31,270
and so you i don't know if you remember
what was mapped here in the user page

3086
00:57:31,270 --> 00:57:31,280
what was mapped here in the user page
 

3087
00:57:31,280 --> 00:57:31,829
what was mapped here in the user page
table

3088
00:57:31,829 --> 00:57:31,839
table
 

3089
00:57:31,839 --> 00:57:33,750
table
but this mapping here at the end of the

3090
00:57:33,750 --> 00:57:33,760
but this mapping here at the end of the
 

3091
00:57:33,760 --> 00:57:35,910
but this mapping here at the end of the
kernel page table is exactly the same

3092
00:57:35,910 --> 00:57:35,920
kernel page table is exactly the same
 

3093
00:57:35,920 --> 00:57:38,390
kernel page table is exactly the same
mapping in the same place

3094
00:57:38,390 --> 00:57:38,400
mapping in the same place
 

3095
00:57:38,400 --> 00:57:41,190
mapping in the same place
as the trampoline mapping at the end of

3096
00:57:41,190 --> 00:57:41,200
as the trampoline mapping at the end of
 

3097
00:57:41,200 --> 00:57:42,390
as the trampoline mapping at the end of
the user page table

3098
00:57:42,390 --> 00:57:42,400
the user page table
 

3099
00:57:42,400 --> 00:57:44,630
the user page table
all the other mappings are different but

3100
00:57:44,630 --> 00:57:44,640
all the other mappings are different but
 

3101
00:57:44,640 --> 00:57:45,990
all the other mappings are different but
this mapping is the same this is the

3102
00:57:45,990 --> 00:57:46,000
this mapping is the same this is the
 

3103
00:57:46,000 --> 00:57:47,349
this mapping is the same this is the
mapping that holds the instructions we

3104
00:57:47,349 --> 00:57:47,359
mapping that holds the instructions we
 

3105
00:57:47,359 --> 00:57:48,950
mapping that holds the instructions we
were executing and because it didn't

3106
00:57:48,950 --> 00:57:48,960
were executing and because it didn't
 

3107
00:57:48,960 --> 00:57:51,829
were executing and because it didn't
change when we switch page tables

3108
00:57:51,829 --> 00:57:51,839
change when we switch page tables
 

3109
00:57:51,839 --> 00:57:53,829
change when we switch page tables
we actually continue executing and we're

3110
00:57:53,829 --> 00:57:53,839
we actually continue executing and we're
 

3111
00:57:53,839 --> 00:57:55,510
we actually continue executing and we're
still executing the same sequence of

3112
00:57:55,510 --> 00:57:55,520
still executing the same sequence of
 

3113
00:57:55,520 --> 00:57:57,190
still executing the same sequence of
instructions

3114
00:57:57,190 --> 00:57:57,200
instructions
 

3115
00:57:57,200 --> 00:58:00,309
instructions
and not crashing

3116
00:58:00,309 --> 00:58:00,319

 

3117
00:58:00,319 --> 00:58:01,910

and so that's the sort of special thing

3118
00:58:01,910 --> 00:58:01,920
and so that's the sort of special thing
 

3119
00:58:01,920 --> 00:58:03,510
and so that's the sort of special thing
about the trampoline page it's

3120
00:58:03,510 --> 00:58:03,520
about the trampoline page it's
 

3121
00:58:03,520 --> 00:58:07,430
about the trampoline page it's
it's mapped both into user

3122
00:58:07,430 --> 00:58:07,440
it's mapped both into user
 

3123
00:58:07,440 --> 00:58:10,230
it's mapped both into user
page tables and into the kernel page

3124
00:58:10,230 --> 00:58:10,240
page tables and into the kernel page
 

3125
00:58:10,240 --> 00:58:10,870
page tables and into the kernel page
table

3126
00:58:10,870 --> 00:58:10,880
table
 

3127
00:58:10,880 --> 00:58:12,390
table
and the reason it's called a trampoline

3128
00:58:12,390 --> 00:58:12,400
and the reason it's called a trampoline
 

3129
00:58:12,400 --> 00:58:14,230
and the reason it's called a trampoline
page is because you sort of

3130
00:58:14,230 --> 00:58:14,240
page is because you sort of
 

3131
00:58:14,240 --> 00:58:17,510
page is because you sort of
bounce on it on the way from user space

3132
00:58:17,510 --> 00:58:17,520
bounce on it on the way from user space
 

3133
00:58:17,520 --> 00:58:20,630
bounce on it on the way from user space
to kernel space

3134
00:58:20,630 --> 00:58:20,640
to kernel space
 

3135
00:58:20,640 --> 00:58:22,630
to kernel space
and with the next instruction this jr

3136
00:58:22,630 --> 00:58:22,640
and with the next instruction this jr
 

3137
00:58:22,640 --> 00:58:24,230
and with the next instruction this jr
we're about to bounce

3138
00:58:24,230 --> 00:58:24,240
we're about to bounce
 

3139
00:58:24,240 --> 00:58:26,789
we're about to bounce
right out of the trampoline um into

3140
00:58:26,789 --> 00:58:26,799
right out of the trampoline um into
 

3141
00:58:26,799 --> 00:58:27,349
right out of the trampoline um into
kernel c

3142
00:58:27,349 --> 00:58:27,359
kernel c
 

3143
00:58:27,359 --> 00:58:29,990
kernel c
code and to see where we're going jr is

3144
00:58:29,990 --> 00:58:30,000
code and to see where we're going jr is
 

3145
00:58:30,000 --> 00:58:30,950
code and to see where we're going jr is
just like

3146
00:58:30,950 --> 00:58:30,960
just like
 

3147
00:58:30,960 --> 00:58:33,030
just like
jump to a subroutine this operating is

3148
00:58:33,030 --> 00:58:33,040
jump to a subroutine this operating is
 

3149
00:58:33,040 --> 00:58:36,710
jump to a subroutine this operating is
pointed to by register t0 print t0 to

3150
00:58:36,710 --> 00:58:36,720
pointed to by register t0 print t0 to
 

3151
00:58:36,720 --> 00:58:39,589
pointed to by register t0 print t0 to
see where we're going

3152
00:58:39,589 --> 00:58:39,599

 

3153
00:58:39,599 --> 00:58:43,589

uh maybe we'll print some instructions

3154
00:58:43,589 --> 00:58:43,599
uh maybe we'll print some instructions
 

3155
00:58:43,599 --> 00:58:46,470
uh maybe we'll print some instructions
there

3156
00:58:46,470 --> 00:58:46,480

 

3157
00:58:46,480 --> 00:58:47,910

okay so these are the instructions we're

3158
00:58:47,910 --> 00:58:47,920
okay so these are the instructions we're
 

3159
00:58:47,920 --> 00:58:49,670
okay so these are the instructions we're
about to jump to they're in the

3160
00:58:49,670 --> 00:58:49,680
about to jump to they're in the
 

3161
00:58:49,680 --> 00:58:51,109
about to jump to they're in the
the beginning of the function called

3162
00:58:51,109 --> 00:58:51,119
the beginning of the function called
 

3163
00:58:51,119 --> 00:58:53,589
the beginning of the function called
user trap

3164
00:58:53,589 --> 00:58:53,599
user trap
 

3165
00:58:53,599 --> 00:58:57,349
user trap
user trap is just a c function

3166
00:58:57,349 --> 00:58:57,359
user trap is just a c function
 

3167
00:58:57,359 --> 00:59:00,950
user trap is just a c function
defined in trap dot c

3168
00:59:00,950 --> 00:59:00,960

 

3169
00:59:00,960 --> 00:59:02,789

here's user trap now we're about we're

3170
00:59:02,789 --> 00:59:02,799
here's user trap now we're about we're
 

3171
00:59:02,799 --> 00:59:04,390
here's user trap now we're about we're
about to jump from assembly code to user

3172
00:59:04,390 --> 00:59:04,400
about to jump from assembly code to user
 

3173
00:59:04,400 --> 00:59:05,430
about to jump from assembly code to user
trap with a stack

3174
00:59:05,430 --> 00:59:05,440
trap with a stack
 

3175
00:59:05,440 --> 00:59:07,750
trap with a stack
with a kernel page table uh let me

3176
00:59:07,750 --> 00:59:07,760
with a kernel page table uh let me
 

3177
00:59:07,760 --> 00:59:09,910
with a kernel page table uh let me
actually do the

3178
00:59:09,910 --> 00:59:09,920
actually do the
 

3179
00:59:09,920 --> 00:59:12,309
actually do the
execute the instruction and now i'm

3180
00:59:12,309 --> 00:59:12,319
execute the instruction and now i'm
 

3181
00:59:12,319 --> 00:59:13,250
execute the instruction and now i'm
going to turn on

3182
00:59:13,250 --> 00:59:13,260
going to turn on
 

3183
00:59:13,260 --> 00:59:14,710
going to turn on
[Music]

3184
00:59:14,710 --> 00:59:14,720
[Music]
 

3185
00:59:14,720 --> 00:59:18,549
[Music]
um turn on displaying of c

3186
00:59:18,549 --> 00:59:18,559
um turn on displaying of c
 

3187
00:59:18,559 --> 00:59:21,109
um turn on displaying of c
code and gdb now that we're executing c

3188
00:59:21,109 --> 00:59:21,119
code and gdb now that we're executing c
 

3189
00:59:21,119 --> 00:59:23,750
code and gdb now that we're executing c
code

3190
00:59:23,750 --> 00:59:23,760

 

3191
00:59:23,760 --> 00:59:25,030

okay so now we're in a much more sane

3192
00:59:25,030 --> 00:59:25,040
okay so now we're in a much more sane
 

3193
00:59:25,040 --> 00:59:27,270
okay so now we're in a much more sane
world we're just executing c code

3194
00:59:27,270 --> 00:59:27,280
world we're just executing c code
 

3195
00:59:27,280 --> 00:59:28,230
world we're just executing c code
should be a little bit easier to

3196
00:59:28,230 --> 00:59:28,240
should be a little bit easier to
 

3197
00:59:28,240 --> 00:59:30,870
should be a little bit easier to
understand and there's

3198
00:59:30,870 --> 00:59:30,880
understand and there's
 

3199
00:59:30,880 --> 00:59:32,230
understand and there's
you know we'll still spend some time

3200
00:59:32,230 --> 00:59:32,240
you know we'll still spend some time
 

3201
00:59:32,240 --> 00:59:34,470
you know we'll still spend some time
reading and writing various interesting

3202
00:59:34,470 --> 00:59:34,480
reading and writing various interesting
 

3203
00:59:34,480 --> 00:59:37,510
reading and writing various interesting
control registers but um

3204
00:59:37,510 --> 00:59:37,520
control registers but um
 

3205
00:59:37,520 --> 00:59:39,430
control registers but um
the environment is hopefully a good deal

3206
00:59:39,430 --> 00:59:39,440
the environment is hopefully a good deal
 

3207
00:59:39,440 --> 00:59:40,710
the environment is hopefully a good deal
less mysterious than

3208
00:59:40,710 --> 00:59:40,720
less mysterious than
 

3209
00:59:40,720 --> 00:59:47,990
less mysterious than
it was in the track frame all right

3210
00:59:47,990 --> 00:59:48,000

 

3211
00:59:48,000 --> 00:59:49,990

any function any any questions at this

3212
00:59:49,990 --> 00:59:50,000
any function any any questions at this
 

3213
00:59:50,000 --> 00:59:53,829
any function any any questions at this
point

3214
00:59:53,829 --> 00:59:53,839

 

3215
00:59:53,839 --> 00:59:56,470

um i have a question why didn't we see

3216
00:59:56,470 --> 00:59:56,480
um i have a question why didn't we see
 

3217
00:59:56,480 --> 00:59:58,150
um i have a question why didn't we see
with the gdb

3218
00:59:58,150 --> 00:59:58,160
with the gdb
 

3219
00:59:58,160 --> 01:00:02,950
with the gdb
um what equal does

3220
01:00:02,950 --> 01:00:02,960

 

3221
01:00:02,960 --> 01:00:06,150

i i maybe i missed it but um i

3222
01:00:06,150 --> 01:00:06,160
i i maybe i missed it but um i
 

3223
01:00:06,160 --> 01:00:08,549
i i maybe i missed it but um i
think we jumped directly into the

3224
01:00:08,549 --> 01:00:08,559
think we jumped directly into the
 

3225
01:00:08,559 --> 01:00:11,829
think we jumped directly into the
trampoline

3226
01:00:11,829 --> 01:00:11,839

 

3227
01:00:11,839 --> 01:00:16,230

he called ecall did jump

3228
01:00:16,230 --> 01:00:16,240
he called ecall did jump
 

3229
01:00:16,240 --> 01:00:19,670
he called ecall did jump
what ecall does is

3230
01:00:19,670 --> 01:00:19,680
what ecall does is
 

3231
01:00:19,680 --> 01:00:22,309
what ecall does is
just switch just changes the mode bit to

3232
01:00:22,309 --> 01:00:22,319
just switch just changes the mode bit to
 

3233
01:00:22,319 --> 01:00:23,910
just switch just changes the mode bit to
be supervisor

3234
01:00:23,910 --> 01:00:23,920
be supervisor
 

3235
01:00:23,920 --> 01:00:29,349
be supervisor
and equals sets the

3236
01:00:29,349 --> 01:00:29,359
and equals sets the
 

3237
01:00:29,359 --> 01:00:31,270
and equals sets the
program counter register to be equal to

3238
01:00:31,270 --> 01:00:31,280
program counter register to be equal to
 

3239
01:00:31,280 --> 01:00:32,789
program counter register to be equal to
the whatever happens

3240
01:00:32,789 --> 01:00:32,799
the whatever happens
 

3241
01:00:32,799 --> 01:00:34,470
the whatever happens
whatever the kernel happened to store in

3242
01:00:34,470 --> 01:00:34,480
whatever the kernel happened to store in
 

3243
01:00:34,480 --> 01:00:36,230
whatever the kernel happened to store in
st back

3244
01:00:36,230 --> 01:00:36,240
st back
 

3245
01:00:36,240 --> 01:00:38,910
st back
kernel stored this value i just printed

3246
01:00:38,910 --> 01:00:38,920
kernel stored this value i just printed
 

3247
01:00:38,920 --> 01:00:40,390
kernel stored this value i just printed
3dff00 which is

3248
01:00:40,390 --> 01:00:40,400
3dff00 which is
 

3249
01:00:40,400 --> 01:00:42,470
3dff00 which is
the beginning of the trampoline page the

3250
01:00:42,470 --> 01:00:42,480
the beginning of the trampoline page the
 

3251
01:00:42,480 --> 01:00:43,670
the beginning of the trampoline page the
kernel stores

3252
01:00:43,670 --> 01:00:43,680
kernel stores
 

3253
01:00:43,680 --> 01:00:45,589
kernel stores
this number in st vac before entering

3254
01:00:45,589 --> 01:00:45,599
this number in st vac before entering
 

3255
01:00:45,599 --> 01:00:47,190
this number in st vac before entering
user space

3256
01:00:47,190 --> 01:00:47,200
user space
 

3257
01:00:47,200 --> 01:00:49,670
user space
so where ecall goes that is where it

3258
01:00:49,670 --> 01:00:49,680
so where ecall goes that is where it
 

3259
01:00:49,680 --> 01:00:50,789
so where ecall goes that is where it
says the program

3260
01:00:50,789 --> 01:00:50,799
says the program
 

3261
01:00:50,799 --> 01:00:54,150
says the program
counter to is st vac which is the

3262
01:00:54,150 --> 01:00:54,160
counter to is st vac which is the
 

3263
01:00:54,160 --> 01:00:58,390
counter to is st vac which is the
beginning of the trampoline page

3264
01:00:58,390 --> 01:00:58,400

 

3265
01:00:58,400 --> 01:01:02,309

does that answer your question

3266
01:01:02,309 --> 01:01:02,319

 

3267
01:01:02,319 --> 01:01:08,549

yes i think so okay

3268
01:01:08,549 --> 01:01:08,559

 

3269
01:01:08,559 --> 01:01:11,349

okay so now we're in uh when user trap

3270
01:01:11,349 --> 01:01:11,359
okay so now we're in uh when user trap
 

3271
01:01:11,359 --> 01:01:13,270
okay so now we're in uh when user trap
user tribe is entered actually just like

3272
01:01:13,270 --> 01:01:13,280
user tribe is entered actually just like
 

3273
01:01:13,280 --> 01:01:16,950
user tribe is entered actually just like
the trampoline page and

3274
01:01:16,950 --> 01:01:16,960

 

3275
01:01:16,960 --> 01:01:18,950

just like the trampoline page for a

3276
01:01:18,950 --> 01:01:18,960
just like the trampoline page for a
 

3277
01:01:18,960 --> 01:01:20,549
just like the trampoline page for a
number of different kinds of traps

3278
01:01:20,549 --> 01:01:20,559
number of different kinds of traps
 

3279
01:01:20,559 --> 01:01:21,589
number of different kinds of traps
there's system calls

3280
01:01:21,589 --> 01:01:21,599
there's system calls
 

3281
01:01:21,599 --> 01:01:23,589
there's system calls
there's exceptions like dividing by zero

3282
01:01:23,589 --> 01:01:23,599
there's exceptions like dividing by zero
 

3283
01:01:23,599 --> 01:01:26,069
there's exceptions like dividing by zero
or using a unmapped virtual address

3284
01:01:26,069 --> 01:01:26,079
or using a unmapped virtual address
 

3285
01:01:26,079 --> 01:01:27,589
or using a unmapped virtual address
and there's a device interrupts and they

3286
01:01:27,589 --> 01:01:27,599
and there's a device interrupts and they
 

3287
01:01:27,599 --> 01:01:30,470
and there's a device interrupts and they
all come here and so

3288
01:01:30,470 --> 01:01:30,480
all come here and so
 

3289
01:01:30,480 --> 01:01:32,870
all come here and so
user trap sort of saves and restores

3290
01:01:32,870 --> 01:01:32,880
user trap sort of saves and restores
 

3291
01:01:32,880 --> 01:01:34,630
user trap sort of saves and restores
hardware state but it also needs to

3292
01:01:34,630 --> 01:01:34,640
hardware state but it also needs to
 

3293
01:01:34,640 --> 01:01:37,670
hardware state but it also needs to
look at the state at the cause of the of

3294
01:01:37,670 --> 01:01:37,680
look at the state at the cause of the of
 

3295
01:01:37,680 --> 01:01:38,470
look at the state at the cause of the of
the trap

3296
01:01:38,470 --> 01:01:38,480
the trap
 

3297
01:01:38,480 --> 01:01:42,150
the trap
to figure out what to do with it um

3298
01:01:42,150 --> 01:01:42,160
to figure out what to do with it um
 

3299
01:01:42,160 --> 01:01:43,670
to figure out what to do with it um
and so we're gonna see both things as we

3300
01:01:43,670 --> 01:01:43,680
and so we're gonna see both things as we
 

3301
01:01:43,680 --> 01:01:46,230
and so we're gonna see both things as we
execute along in user trap

3302
01:01:46,230 --> 01:01:46,240
execute along in user trap
 

3303
01:01:46,240 --> 01:01:49,430
execute along in user trap
let me just um

3304
01:01:49,430 --> 01:01:49,440
let me just um
 

3305
01:01:49,440 --> 01:01:52,710
let me just um
run stuff in user trap let's see

3306
01:01:52,710 --> 01:01:52,720
run stuff in user trap let's see
 

3307
01:01:52,720 --> 01:01:54,950
run stuff in user trap let's see
the first thing it does here is that it

3308
01:01:54,950 --> 01:01:54,960
the first thing it does here is that it
 

3309
01:01:54,960 --> 01:01:55,910
the first thing it does here is that it
changes that s

3310
01:01:55,910 --> 01:01:55,920
changes that s
 

3311
01:01:55,920 --> 01:02:00,390
changes that s
t back register um it turns out that the

3312
01:02:00,390 --> 01:02:00,400
t back register um it turns out that the
 

3313
01:02:00,400 --> 01:02:03,430
t back register um it turns out that the
the way xv6 handles traps is different

3314
01:02:03,430 --> 01:02:03,440
the way xv6 handles traps is different
 

3315
01:02:03,440 --> 01:02:04,870
the way xv6 handles traps is different
depending on whether they come from user

3316
01:02:04,870 --> 01:02:04,880
depending on whether they come from user
 

3317
01:02:04,880 --> 01:02:06,789
depending on whether they come from user
space or from the kernel

3318
01:02:06,789 --> 01:02:06,799
space or from the kernel
 

3319
01:02:06,799 --> 01:02:08,069
space or from the kernel
we've only been talking about what

3320
01:02:08,069 --> 01:02:08,079
we've only been talking about what
 

3321
01:02:08,079 --> 01:02:10,870
we've only been talking about what
happens if a trap occurs from user space

3322
01:02:10,870 --> 01:02:10,880
happens if a trap occurs from user space
 

3323
01:02:10,880 --> 01:02:12,630
happens if a trap occurs from user space
there's a quite different sequence of

3324
01:02:12,630 --> 01:02:12,640
there's a quite different sequence of
 

3325
01:02:12,640 --> 01:02:14,069
there's a quite different sequence of
events

3326
01:02:14,069 --> 01:02:14,079
events
 

3327
01:02:14,079 --> 01:02:16,069
events
for traps that come from the kernel that

3328
01:02:16,069 --> 01:02:16,079
for traps that come from the kernel that
 

3329
01:02:16,079 --> 01:02:17,750
for traps that come from the kernel that
occur while in the kernel because after

3330
01:02:17,750 --> 01:02:17,760
occur while in the kernel because after
 

3331
01:02:17,760 --> 01:02:18,789
occur while in the kernel because after
all for example

3332
01:02:18,789 --> 01:02:18,799
all for example
 

3333
01:02:18,799 --> 01:02:21,109
all for example
the kernel is already using the kernel

3334
01:02:21,109 --> 01:02:21,119
the kernel is already using the kernel
 

3335
01:02:21,119 --> 01:02:21,990
the kernel is already using the kernel
page table

3336
01:02:21,990 --> 01:02:22,000
page table
 

3337
01:02:22,000 --> 01:02:24,150
page table
um you know if a trap occurs while

3338
01:02:24,150 --> 01:02:24,160
um you know if a trap occurs while
 

3339
01:02:24,160 --> 01:02:25,190
um you know if a trap occurs while
you're in the kernel you already have

3340
01:02:25,190 --> 01:02:25,200
you're in the kernel you already have
 

3341
01:02:25,200 --> 01:02:26,470
you're in the kernel you already have
the kernel page tables there's a whole

3342
01:02:26,470 --> 01:02:26,480
the kernel page tables there's a whole
 

3343
01:02:26,480 --> 01:02:27,510
the kernel page tables there's a whole
bunch of stuff that doesn't have to

3344
01:02:27,510 --> 01:02:27,520
bunch of stuff that doesn't have to
 

3345
01:02:27,520 --> 01:02:28,549
bunch of stuff that doesn't have to
happen

3346
01:02:28,549 --> 01:02:28,559
happen
 

3347
01:02:28,559 --> 01:02:31,750
happen
if the trap occurred while in the kernel

3348
01:02:31,750 --> 01:02:31,760
if the trap occurred while in the kernel
 

3349
01:02:31,760 --> 01:02:33,750
if the trap occurred while in the kernel
so before getting much further in the

3350
01:02:33,750 --> 01:02:33,760
so before getting much further in the
 

3351
01:02:33,760 --> 01:02:35,349
so before getting much further in the
kernel code we change

3352
01:02:35,349 --> 01:02:35,359
kernel code we change
 

3353
01:02:35,359 --> 01:02:37,349
kernel code we change
sd vac to point to this kernel vect

3354
01:02:37,349 --> 01:02:37,359
sd vac to point to this kernel vect
 

3355
01:02:37,359 --> 01:02:38,549
sd vac to point to this kernel vect
which is the kernel

3356
01:02:38,549 --> 01:02:38,559
which is the kernel
 

3357
01:02:38,559 --> 01:02:40,870
which is the kernel
trap handler rather than the user trap

3358
01:02:40,870 --> 01:02:40,880
trap handler rather than the user trap
 

3359
01:02:40,880 --> 01:02:44,549
trap handler rather than the user trap
handler

3360
01:02:44,549 --> 01:02:44,559

 

3361
01:02:44,559 --> 01:02:46,150

we need to for various reasons we need

3362
01:02:46,150 --> 01:02:46,160
we need to for various reasons we need
 

3363
01:02:46,160 --> 01:02:47,990
we need to for various reasons we need
to figure out what process we're running

3364
01:02:47,990 --> 01:02:48,000
to figure out what process we're running
 

3365
01:02:48,000 --> 01:02:49,589
to figure out what process we're running
we do that by calling this myproc

3366
01:02:49,589 --> 01:02:49,599
we do that by calling this myproc
 

3367
01:02:49,599 --> 01:02:51,589
we do that by calling this myproc
function and my proc actually looks at

3368
01:02:51,589 --> 01:02:51,599
function and my proc actually looks at
 

3369
01:02:51,599 --> 01:02:52,230
function and my proc actually looks at
an array

3370
01:02:52,230 --> 01:02:52,240
an array
 

3371
01:02:52,240 --> 01:02:55,029
an array
indexed by the current core number the

3372
01:02:55,029 --> 01:02:55,039
indexed by the current core number the
 

3373
01:02:55,039 --> 01:02:55,990
indexed by the current core number the
heart id

3374
01:02:55,990 --> 01:02:56,000
heart id
 

3375
01:02:56,000 --> 01:03:00,069
heart id
which you remember we put in tp

3376
01:03:00,069 --> 01:03:00,079
which you remember we put in tp
 

3377
01:03:00,079 --> 01:03:01,430
which you remember we put in tp
that's how myproduct figures out what

3378
01:03:01,430 --> 01:03:01,440
that's how myproduct figures out what
 

3379
01:03:01,440 --> 01:03:07,190
that's how myproduct figures out what
process is currently running

3380
01:03:07,190 --> 01:03:07,200

 

3381
01:03:07,200 --> 01:03:09,750

we need to save that saved user program

3382
01:03:09,750 --> 01:03:09,760
we need to save that saved user program
 

3383
01:03:09,760 --> 01:03:11,270
we need to save that saved user program
counter it's still sitting there

3384
01:03:11,270 --> 01:03:11,280
counter it's still sitting there
 

3385
01:03:11,280 --> 01:03:15,109
counter it's still sitting there
in an sepc

3386
01:03:15,109 --> 01:03:15,119
in an sepc
 

3387
01:03:15,119 --> 01:03:17,270
in an sepc
but because one of the things that could

3388
01:03:17,270 --> 01:03:17,280
but because one of the things that could
 

3389
01:03:17,280 --> 01:03:18,870
but because one of the things that could
happen while we're in the kernel is that

3390
01:03:18,870 --> 01:03:18,880
happen while we're in the kernel is that
 

3391
01:03:18,880 --> 01:03:19,190
happen while we're in the kernel is that
we

3392
01:03:19,190 --> 01:03:19,200
we
 

3393
01:03:19,200 --> 01:03:21,750
we
might switch to another process and that

3394
01:03:21,750 --> 01:03:21,760
might switch to another process and that
 

3395
01:03:21,760 --> 01:03:23,190
might switch to another process and that
other process might

3396
01:03:23,190 --> 01:03:23,200
other process might
 

3397
01:03:23,200 --> 01:03:26,470
other process might
go into that process user space and that

3398
01:03:26,470 --> 01:03:26,480
go into that process user space and that
 

3399
01:03:26,480 --> 01:03:29,109
go into that process user space and that
other process might make a system call

3400
01:03:29,109 --> 01:03:29,119
other process might make a system call
 

3401
01:03:29,119 --> 01:03:29,990
other process might make a system call
which causes

3402
01:03:29,990 --> 01:03:30,000
which causes
 

3403
01:03:30,000 --> 01:03:32,710
which causes
scpc to be overwritten we have to save

3404
01:03:32,710 --> 01:03:32,720
scpc to be overwritten we have to save
 

3405
01:03:32,720 --> 01:03:33,270
scpc to be overwritten we have to save
our

3406
01:03:33,270 --> 01:03:33,280
our
 

3407
01:03:33,280 --> 01:03:36,710
our
sepc in um some memory associated with

3408
01:03:36,710 --> 01:03:36,720
sepc in um some memory associated with
 

3409
01:03:36,720 --> 01:03:37,589
sepc in um some memory associated with
this process

3410
01:03:37,589 --> 01:03:37,599
this process
 

3411
01:03:37,599 --> 01:03:39,589
this process
so it doesn't get overwritten and it

3412
01:03:39,589 --> 01:03:39,599
so it doesn't get overwritten and it
 

3413
01:03:39,599 --> 01:03:41,589
so it doesn't get overwritten and it
gets you know we use this trap frame

3414
01:03:41,589 --> 01:03:41,599
gets you know we use this trap frame
 

3415
01:03:41,599 --> 01:03:43,910
gets you know we use this trap frame
to save epc as well as lots of other

3416
01:03:43,910 --> 01:03:43,920
to save epc as well as lots of other
 

3417
01:03:43,920 --> 01:03:45,349
to save epc as well as lots of other
stuff

3418
01:03:45,349 --> 01:03:45,359
stuff
 

3419
01:03:45,359 --> 01:03:47,750
stuff
and anyway that's what this current line

3420
01:03:47,750 --> 01:03:47,760
and anyway that's what this current line
 

3421
01:03:47,760 --> 01:03:49,589
and anyway that's what this current line
of code is doing

3422
01:03:49,589 --> 01:03:49,599
of code is doing
 

3423
01:03:49,599 --> 01:03:52,309
of code is doing
the next thing that happens we need to

3424
01:03:52,309 --> 01:03:52,319
the next thing that happens we need to
 

3425
01:03:52,319 --> 01:03:56,470
the next thing that happens we need to
figure out

3426
01:03:56,470 --> 01:03:56,480

 

3427
01:03:56,480 --> 01:03:59,270

why we came here the s cause the risk

3428
01:03:59,270 --> 01:03:59,280
why we came here the s cause the risk
 

3429
01:03:59,280 --> 01:04:00,870
why we came here the s cause the risk
five s cause register

3430
01:04:00,870 --> 01:04:00,880
five s cause register
 

3431
01:04:00,880 --> 01:04:02,630
five s cause register
has a different number depending on why

3432
01:04:02,630 --> 01:04:02,640
has a different number depending on why
 

3433
01:04:02,640 --> 01:04:04,150
has a different number depending on why
this trap occurred

3434
01:04:04,150 --> 01:04:04,160
this trap occurred
 

3435
01:04:04,160 --> 01:04:06,870
this trap occurred
you know uh some kind of exception or

3436
01:04:06,870 --> 01:04:06,880
you know uh some kind of exception or
 

3437
01:04:06,880 --> 01:04:08,549
you know uh some kind of exception or
versus system call versus device

3438
01:04:08,549 --> 01:04:08,559
versus system call versus device
 

3439
01:04:08,559 --> 01:04:09,349
versus system call versus device
interrupt

3440
01:04:09,349 --> 01:04:09,359
interrupt
 

3441
01:04:09,359 --> 01:04:11,750
interrupt
value eight means we're here we took a

3442
01:04:11,750 --> 01:04:11,760
value eight means we're here we took a
 

3443
01:04:11,760 --> 01:04:15,109
value eight means we're here we took a
trap because of a system call

3444
01:04:15,109 --> 01:04:15,119

 

3445
01:04:15,119 --> 01:04:17,829

and hopefully indeed this calls us eight

3446
01:04:17,829 --> 01:04:17,839
and hopefully indeed this calls us eight
 

3447
01:04:17,839 --> 01:04:19,270
and hopefully indeed this calls us eight
it does have eight because

3448
01:04:19,270 --> 01:04:19,280
it does have eight because
 

3449
01:04:19,280 --> 01:04:21,430
it does have eight because
we're here because of a system call um

3450
01:04:21,430 --> 01:04:21,440
we're here because of a system call um
 

3451
01:04:21,440 --> 01:04:22,630
we're here because of a system call um
so we're gonna execute this

3452
01:04:22,630 --> 01:04:22,640
so we're gonna execute this
 

3453
01:04:22,640 --> 01:04:25,990
so we're gonna execute this
this if statement um

3454
01:04:25,990 --> 01:04:26,000
this if statement um
 

3455
01:04:26,000 --> 01:04:27,750
this if statement um
first thing is if some other process has

3456
01:04:27,750 --> 01:04:27,760
first thing is if some other process has
 

3457
01:04:27,760 --> 01:04:29,029
first thing is if some other process has
killed this process we don't want to

3458
01:04:29,029 --> 01:04:29,039
killed this process we don't want to
 

3459
01:04:29,039 --> 01:04:29,829
killed this process we don't want to
continue but

3460
01:04:29,829 --> 01:04:29,839
continue but
 

3461
01:04:29,839 --> 01:04:33,910
continue but
that's not the case for our shell um

3462
01:04:33,910 --> 01:04:33,920
that's not the case for our shell um
 

3463
01:04:33,920 --> 01:04:37,109
that's not the case for our shell um
it turns out that the risk 5 the program

3464
01:04:37,109 --> 01:04:37,119
it turns out that the risk 5 the program
 

3465
01:04:37,119 --> 01:04:39,990
it turns out that the risk 5 the program
counter that gets stored in sepc

3466
01:04:39,990 --> 01:04:40,000
counter that gets stored in sepc
 

3467
01:04:40,000 --> 01:04:42,789
counter that gets stored in sepc
is the address of the instruction that

3468
01:04:42,789 --> 01:04:42,799
is the address of the instruction that
 

3469
01:04:42,799 --> 01:04:45,270
is the address of the instruction that
caused the trap

3470
01:04:45,270 --> 01:04:45,280
caused the trap
 

3471
01:04:45,280 --> 01:04:47,349
caused the trap
but when we resume we want to resume at

3472
01:04:47,349 --> 01:04:47,359
but when we resume we want to resume at
 

3473
01:04:47,359 --> 01:04:48,710
but when we resume we want to resume at
the next instruction

3474
01:04:48,710 --> 01:04:48,720
the next instruction
 

3475
01:04:48,720 --> 01:04:51,430
the next instruction
after the e-call and so therefore we

3476
01:04:51,430 --> 01:04:51,440
after the e-call and so therefore we
 

3477
01:04:51,440 --> 01:04:51,829
after the e-call and so therefore we
this

3478
01:04:51,829 --> 01:04:51,839
this
 

3479
01:04:51,839 --> 01:04:53,670
this
code for system calls which need to

3480
01:04:53,670 --> 01:04:53,680
code for system calls which need to
 

3481
01:04:53,680 --> 01:04:56,150
code for system calls which need to
return

3482
01:04:56,150 --> 01:04:56,160

 

3483
01:04:56,160 --> 01:04:58,950

we add four to the saved user program

3484
01:04:58,950 --> 01:04:58,960
we add four to the saved user program
 

3485
01:04:58,960 --> 01:05:00,789
we add four to the saved user program
counter so that we

3486
01:05:00,789 --> 01:05:00,799
counter so that we
 

3487
01:05:00,799 --> 01:05:02,470
counter so that we
resume on the next instruction and don't

3488
01:05:02,470 --> 01:05:02,480
resume on the next instruction and don't
 

3489
01:05:02,480 --> 01:05:03,829
resume on the next instruction and don't
just re-execute

3490
01:05:03,829 --> 01:05:03,839
just re-execute
 

3491
01:05:03,839 --> 01:05:08,230
just re-execute
the e-call

3492
01:05:08,230 --> 01:05:08,240
the e-call
 

3493
01:05:08,240 --> 01:05:11,829
the e-call
all right next it turns out that xv6

3494
01:05:11,829 --> 01:05:11,839
all right next it turns out that xv6
 

3495
01:05:11,839 --> 01:05:13,670
all right next it turns out that xv6
enables interrupts while it's handling

3496
01:05:13,670 --> 01:05:13,680
enables interrupts while it's handling
 

3497
01:05:13,680 --> 01:05:16,230
enables interrupts while it's handling
system calls just so that interrupts

3498
01:05:16,230 --> 01:05:16,240
system calls just so that interrupts
 

3499
01:05:16,240 --> 01:05:18,309
system calls just so that interrupts
can be served faster some system calls

3500
01:05:18,309 --> 01:05:18,319
can be served faster some system calls
 

3501
01:05:18,319 --> 01:05:20,220
can be served faster some system calls
take a lot of time

3502
01:05:20,220 --> 01:05:20,230
take a lot of time
 

3503
01:05:20,230 --> 01:05:21,349
take a lot of time
[Music]

3504
01:05:21,349 --> 01:05:21,359
[Music]
 

3505
01:05:21,359 --> 01:05:23,670
[Music]
uh interrupts are always turned off by

3506
01:05:23,670 --> 01:05:23,680
uh interrupts are always turned off by
 

3507
01:05:23,680 --> 01:05:24,630
uh interrupts are always turned off by
the risc-v

3508
01:05:24,630 --> 01:05:24,640
the risc-v
 

3509
01:05:24,640 --> 01:05:27,270
the risc-v
trap hardware um and so we have to

3510
01:05:27,270 --> 01:05:27,280
trap hardware um and so we have to
 

3511
01:05:27,280 --> 01:05:28,069
trap hardware um and so we have to
explicitly

3512
01:05:28,069 --> 01:05:28,079
explicitly
 

3513
01:05:28,079 --> 01:05:30,470
explicitly
turn them back on at this point um and

3514
01:05:30,470 --> 01:05:30,480
turn them back on at this point um and
 

3515
01:05:30,480 --> 01:05:32,549
turn them back on at this point um and
the next thing that happens

3516
01:05:32,549 --> 01:05:32,559
the next thing that happens
 

3517
01:05:32,559 --> 01:05:34,390
the next thing that happens
is we call this syscall function the job

3518
01:05:34,390 --> 01:05:34,400
is we call this syscall function the job
 

3519
01:05:34,400 --> 01:05:37,430
is we call this syscall function the job
of syscall i'll just enter it

3520
01:05:37,430 --> 01:05:37,440
of syscall i'll just enter it
 

3521
01:05:37,440 --> 01:05:40,470
of syscall i'll just enter it
um it's defined in

3522
01:05:40,470 --> 01:05:40,480
um it's defined in
 

3523
01:05:40,480 --> 01:05:43,510
um it's defined in
just called.c here we are

3524
01:05:43,510 --> 01:05:43,520
just called.c here we are
 

3525
01:05:43,520 --> 01:05:44,950
just called.c here we are
what it does is it looks up the system

3526
01:05:44,950 --> 01:05:44,960
what it does is it looks up the system
 

3527
01:05:44,960 --> 01:05:46,560
what it does is it looks up the system
call number in this um

3528
01:05:46,560 --> 01:05:46,570
call number in this um
 

3529
01:05:46,570 --> 01:05:47,670
call number in this um
[Music]

3530
01:05:47,670 --> 01:05:47,680
[Music]
 

3531
01:05:47,680 --> 01:05:50,150
[Music]
big table of system calls at the top of

3532
01:05:50,150 --> 01:05:50,160
big table of system calls at the top of
 

3533
01:05:50,160 --> 01:05:51,670
big table of system calls at the top of
the page

3534
01:05:51,670 --> 01:05:51,680
the page
 

3535
01:05:51,680 --> 01:05:54,309
the page
um if you remember the shells write

3536
01:05:54,309 --> 01:05:54,319
um if you remember the shells write
 

3537
01:05:54,319 --> 01:05:54,789
um if you remember the shells write
function

3538
01:05:54,789 --> 01:05:54,799
function
 

3539
01:05:54,799 --> 01:05:57,750
function
set register a7 to be the system call

3540
01:05:57,750 --> 01:05:57,760
set register a7 to be the system call
 

3541
01:05:57,760 --> 01:05:58,710
set register a7 to be the system call
number namely

3542
01:05:58,710 --> 01:05:58,720
number namely
 

3543
01:05:58,720 --> 01:06:01,990
number namely
16 for write so what cisco does is it

3544
01:06:01,990 --> 01:06:02,000
16 for write so what cisco does is it
 

3545
01:06:02,000 --> 01:06:04,549
16 for write so what cisco does is it
retrieves the saved a7

3546
01:06:04,549 --> 01:06:04,559
retrieves the saved a7
 

3547
01:06:04,559 --> 01:06:06,870
retrieves the saved a7
that was saved away in the trap fame by

3548
01:06:06,870 --> 01:06:06,880
that was saved away in the trap fame by
 

3549
01:06:06,880 --> 01:06:10,309
that was saved away in the trap fame by
the trampoline code

3550
01:06:10,309 --> 01:06:10,319

 

3551
01:06:10,319 --> 01:06:11,910

and it uses that to index into this

3552
01:06:11,910 --> 01:06:11,920
and it uses that to index into this
 

3553
01:06:11,920 --> 01:06:13,349
and it uses that to index into this
table of

3554
01:06:13,349 --> 01:06:13,359
table of
 

3555
01:06:13,359 --> 01:06:14,950
table of
pointers to functions that implement

3556
01:06:14,950 --> 01:06:14,960
pointers to functions that implement
 

3557
01:06:14,960 --> 01:06:17,430
pointers to functions that implement
each system call

3558
01:06:17,430 --> 01:06:17,440
each system call
 

3559
01:06:17,440 --> 01:06:21,190
each system call
so we're going to fish this number

3560
01:06:21,190 --> 01:06:21,200
so we're going to fish this number
 

3561
01:06:21,200 --> 01:06:23,589
so we're going to fish this number
i'm going to print num now that's the

3562
01:06:23,589 --> 01:06:23,599
i'm going to print num now that's the
 

3563
01:06:23,599 --> 01:06:25,829
i'm going to print num now that's the
save d7 indeed it's 16

3564
01:06:25,829 --> 01:06:25,839
save d7 indeed it's 16
 

3565
01:06:25,839 --> 01:06:27,910
save d7 indeed it's 16
the same 16 that the shell originally

3566
01:06:27,910 --> 01:06:27,920
the same 16 that the shell originally
 

3567
01:06:27,920 --> 01:06:30,829
the same 16 that the shell originally
put there

3568
01:06:30,829 --> 01:06:30,839

 

3569
01:06:30,839 --> 01:06:34,069

um the system call

3570
01:06:34,069 --> 01:06:34,079
um the system call
 

3571
01:06:34,079 --> 01:06:37,109
um the system call
code indexes into that syscalls table we

3572
01:06:37,109 --> 01:06:37,119
code indexes into that syscalls table we
 

3573
01:06:37,119 --> 01:06:38,309
code indexes into that syscalls table we
can find out what function

3574
01:06:38,309 --> 01:06:38,319
can find out what function
 

3575
01:06:38,319 --> 01:06:40,950
can find out what function
come it's got out of the system call

3576
01:06:40,950 --> 01:06:40,960
come it's got out of the system call
 

3577
01:06:40,960 --> 01:06:42,309
come it's got out of the system call
table

3578
01:06:42,309 --> 01:06:42,319
table
 

3579
01:06:42,319 --> 01:06:44,309
table
uh by stepping into it right now we're

3580
01:06:44,309 --> 01:06:44,319
uh by stepping into it right now we're
 

3581
01:06:44,319 --> 01:06:46,069
uh by stepping into it right now we're
in write or insist write

3582
01:06:46,069 --> 01:06:46,079
in write or insist write
 

3583
01:06:46,079 --> 01:06:49,670
in write or insist write
so isn't this

3584
01:06:49,670 --> 01:06:49,680
so isn't this
 

3585
01:06:49,680 --> 01:06:53,589
so isn't this
file.c this write is the

3586
01:06:53,589 --> 01:06:53,599
file.c this write is the
 

3587
01:06:53,599 --> 01:06:56,230
file.c this write is the
kernel implementation of the write

3588
01:06:56,230 --> 01:06:56,240
kernel implementation of the write
 

3589
01:06:56,240 --> 01:06:57,910
kernel implementation of the write
system call

3590
01:06:57,910 --> 01:06:57,920
system call
 

3591
01:06:57,920 --> 01:06:59,670
system call
i'm not going to go into this it's like

3592
01:06:59,670 --> 01:06:59,680
i'm not going to go into this it's like
 

3593
01:06:59,680 --> 01:07:01,190
i'm not going to go into this it's like
fairly complicated what happens from

3594
01:07:01,190 --> 01:07:01,200
fairly complicated what happens from
 

3595
01:07:01,200 --> 01:07:02,390
fairly complicated what happens from
here on

3596
01:07:02,390 --> 01:07:02,400
here on
 

3597
01:07:02,400 --> 01:07:03,990
here on
in and the implementation of the system

3598
01:07:03,990 --> 01:07:04,000
in and the implementation of the system
 

3599
01:07:04,000 --> 01:07:05,910
in and the implementation of the system
call for this lecture i'm only really

3600
01:07:05,910 --> 01:07:05,920
call for this lecture i'm only really
 

3601
01:07:05,920 --> 01:07:07,190
call for this lecture i'm only really
interested in getting into and out of

3602
01:07:07,190 --> 01:07:07,200
interested in getting into and out of
 

3603
01:07:07,200 --> 01:07:08,069
interested in getting into and out of
the kernel

3604
01:07:08,069 --> 01:07:08,079
the kernel
 

3605
01:07:08,079 --> 01:07:12,829
the kernel
um so i'm going to

3606
01:07:12,829 --> 01:07:12,839

 

3607
01:07:12,839 --> 01:07:26,470

um step over

3608
01:07:26,470 --> 01:07:26,480

 

3609
01:07:26,480 --> 01:07:28,309

the actual implementation system call

3610
01:07:28,309 --> 01:07:28,319
the actual implementation system call
 

3611
01:07:28,319 --> 01:07:29,910
the actual implementation system call
one thing an interesting thing to note

3612
01:07:29,910 --> 01:07:29,920
one thing an interesting thing to note
 

3613
01:07:29,920 --> 01:07:30,549
one thing an interesting thing to note
is that

3614
01:07:30,549 --> 01:07:30,559
is that
 

3615
01:07:30,559 --> 01:07:31,990
is that
the system calls need to find their

3616
01:07:31,990 --> 01:07:32,000
the system calls need to find their
 

3617
01:07:32,000 --> 01:07:33,750
the system calls need to find their
arguments so you know remember the

3618
01:07:33,750 --> 01:07:33,760
arguments so you know remember the
 

3619
01:07:33,760 --> 01:07:35,109
arguments so you know remember the
arguments to write or

3620
01:07:35,109 --> 01:07:35,119
arguments to write or
 

3621
01:07:35,119 --> 01:07:37,510
arguments to write or
two and a buffer pointer and another two

3622
01:07:37,510 --> 01:07:37,520
two and a buffer pointer and another two
 

3623
01:07:37,520 --> 01:07:38,870
two and a buffer pointer and another two
and the way that the

3624
01:07:38,870 --> 01:07:38,880
and the way that the
 

3625
01:07:38,880 --> 01:07:40,549
and the way that the
system called code gets at them is just

3626
01:07:40,549 --> 01:07:40,559
system called code gets at them is just
 

3627
01:07:40,559 --> 01:07:45,990
system called code gets at them is just
looking at this um

3628
01:07:45,990 --> 01:07:46,000

 

3629
01:07:46,000 --> 01:07:49,510

well looking in the trap frame

3630
01:07:49,510 --> 01:07:49,520
well looking in the trap frame
 

3631
01:07:49,520 --> 01:07:50,870
well looking in the trap frame
so just like we could look in the trap

3632
01:07:50,870 --> 01:07:50,880
so just like we could look in the trap
 

3633
01:07:50,880 --> 01:07:53,510
so just like we could look in the trap
frame for a7 we can look for a0

3634
01:07:53,510 --> 01:07:53,520
frame for a7 we can look for a0
 

3635
01:07:53,520 --> 01:07:55,109
frame for a7 we can look for a0
and that's the first argument we look at

3636
01:07:55,109 --> 01:07:55,119
and that's the first argument we look at
 

3637
01:07:55,119 --> 01:07:56,789
and that's the first argument we look at
a1 that's that buffer pointer we can

3638
01:07:56,789 --> 01:07:56,799
a1 that's that buffer pointer we can
 

3639
01:07:56,799 --> 01:07:58,710
a1 that's that buffer pointer we can
look at a2 that's the second argument

3640
01:07:58,710 --> 01:07:58,720
look at a2 that's the second argument
 

3641
01:07:58,720 --> 01:08:02,470
look at a2 that's the second argument
the number of

3642
01:08:02,470 --> 01:08:02,480

 

3643
01:08:02,480 --> 01:08:06,230

bytes to write okay so the system call

3644
01:08:06,230 --> 01:08:06,240
bytes to write okay so the system call
 

3645
01:08:06,240 --> 01:08:07,750
bytes to write okay so the system call
does its job and then

3646
01:08:07,750 --> 01:08:07,760
does its job and then
 

3647
01:08:07,760 --> 01:08:13,109
does its job and then
cis write finally returns

3648
01:08:13,109 --> 01:08:13,119

 

3649
01:08:13,119 --> 01:08:15,270

and we're going to watch what happens

3650
01:08:15,270 --> 01:08:15,280
and we're going to watch what happens
 

3651
01:08:15,280 --> 01:08:17,110
and we're going to watch what happens
the reason for this assignment here the

3652
01:08:17,110 --> 01:08:17,120
the reason for this assignment here the
 

3653
01:08:17,120 --> 01:08:19,030
the reason for this assignment here the
reason why we're assigning

3654
01:08:19,030 --> 01:08:19,040
reason why we're assigning
 

3655
01:08:19,040 --> 01:08:22,709
reason why we're assigning
to a0 in the trap frame is that

3656
01:08:22,709 --> 01:08:22,719
to a0 in the trap frame is that
 

3657
01:08:22,719 --> 01:08:24,470
to a0 in the trap frame is that
this system calls all have a return

3658
01:08:24,470 --> 01:08:24,480
this system calls all have a return
 

3659
01:08:24,480 --> 01:08:25,990
this system calls all have a return
value

3660
01:08:25,990 --> 01:08:26,000
value
 

3661
01:08:26,000 --> 01:08:27,669
value
like write returns the number of bytes

3662
01:08:27,669 --> 01:08:27,679
like write returns the number of bytes
 

3663
01:08:27,679 --> 01:08:30,149
like write returns the number of bytes
written and the convention and for c

3664
01:08:30,149 --> 01:08:30,159
written and the convention and for c
 

3665
01:08:30,159 --> 01:08:31,910
written and the convention and for c
code on the risk five is that

3666
01:08:31,910 --> 01:08:31,920
code on the risk five is that
 

3667
01:08:31,920 --> 01:08:34,950
code on the risk five is that
return values are placed in register a0

3668
01:08:34,950 --> 01:08:34,960
return values are placed in register a0
 

3669
01:08:34,960 --> 01:08:36,870
return values are placed in register a0
by whatever function you're calling and

3670
01:08:36,870 --> 01:08:36,880
by whatever function you're calling and
 

3671
01:08:36,880 --> 01:08:39,110
by whatever function you're calling and
so to simulate a return value we just

3672
01:08:39,110 --> 01:08:39,120
so to simulate a return value we just
 

3673
01:08:39,120 --> 01:08:40,470
so to simulate a return value we just
stick the return value

3674
01:08:40,470 --> 01:08:40,480
stick the return value
 

3675
01:08:40,480 --> 01:08:43,110
stick the return value
in a0 in the trap frame and we'll see by

3676
01:08:43,110 --> 01:08:43,120
in a0 in the trap frame and we'll see by
 

3677
01:08:43,120 --> 01:08:45,749
in a0 in the trap frame and we'll see by
and by that when we return to user space

3678
01:08:45,749 --> 01:08:45,759
and by that when we return to user space
 

3679
01:08:45,759 --> 01:08:48,550
and by that when we return to user space
this a0 slot in the trap frame is

3680
01:08:48,550 --> 01:08:48,560
this a0 slot in the trap frame is
 

3681
01:08:48,560 --> 01:08:50,309
this a0 slot in the trap frame is
restored back into the actual a0

3682
01:08:50,309 --> 01:08:50,319
restored back into the actual a0
 

3683
01:08:50,319 --> 01:08:50,870
restored back into the actual a0
register

3684
01:08:50,870 --> 01:08:50,880
register
 

3685
01:08:50,880 --> 01:08:56,550
register
and the shell sees that a0 value as um

3686
01:08:56,550 --> 01:08:56,560

 

3687
01:08:56,560 --> 01:08:59,910

as the return value from right and if we

3688
01:08:59,910 --> 01:08:59,920
as the return value from right and if we
 

3689
01:08:59,920 --> 01:09:02,630
as the return value from right and if we
just execute through this and print pro

3690
01:09:02,630 --> 01:09:02,640
just execute through this and print pro
 

3691
01:09:02,640 --> 01:09:03,430
just execute through this and print pro
trap

3692
01:09:03,430 --> 01:09:03,440
trap
 

3693
01:09:03,440 --> 01:09:06,789
trap
frame starter we'll see it as value 2

3694
01:09:06,789 --> 01:09:06,799
frame starter we'll see it as value 2
 

3695
01:09:06,799 --> 01:09:08,709
frame starter we'll see it as value 2
what that means is that right

3696
01:09:08,709 --> 01:09:08,719
what that means is that right
 

3697
01:09:08,719 --> 01:09:10,470
what that means is that right
return value is 2 saying that it

3698
01:09:10,470 --> 01:09:10,480
return value is 2 saying that it
 

3699
01:09:10,480 --> 01:09:12,470
return value is 2 saying that it
actually wrote two bytes just as

3700
01:09:12,470 --> 01:09:12,480
actually wrote two bytes just as
 

3701
01:09:12,480 --> 01:09:13,910
actually wrote two bytes just as
instructed

3702
01:09:13,910 --> 01:09:13,920
instructed
 

3703
01:09:13,920 --> 01:09:18,709
instructed
okay at this point we're back in

3704
01:09:18,709 --> 01:09:18,719

 

3705
01:09:18,719 --> 01:09:22,709

trap.c in usertrap um

3706
01:09:22,709 --> 01:09:22,719
trap.c in usertrap um
 

3707
01:09:22,719 --> 01:09:24,789
trap.c in usertrap um
just after the called assist call so

3708
01:09:24,789 --> 01:09:24,799
just after the called assist call so
 

3709
01:09:24,799 --> 01:09:26,550
just after the called assist call so
we're now with this

3710
01:09:26,550 --> 01:09:26,560
we're now with this
 

3711
01:09:26,560 --> 01:09:28,390
we're now with this
pierrot which is checking if the func if

3712
01:09:28,390 --> 01:09:28,400
pierrot which is checking if the func if
 

3713
01:09:28,400 --> 01:09:30,149
pierrot which is checking if the func if
the process has been killed because

3714
01:09:30,149 --> 01:09:30,159
the process has been killed because
 

3715
01:09:30,159 --> 01:09:31,590
the process has been killed because
we don't want to resume executing it's

3716
01:09:31,590 --> 01:09:31,600
we don't want to resume executing it's
 

3717
01:09:31,600 --> 01:09:33,269
we don't want to resume executing it's
already been killed but of course

3718
01:09:33,269 --> 01:09:33,279
already been killed but of course
 

3719
01:09:33,279 --> 01:09:36,470
already been killed but of course
our shell has not been killed skip over

3720
01:09:36,470 --> 01:09:36,480
our shell has not been killed skip over
 

3721
01:09:36,480 --> 01:09:38,229
our shell has not been killed skip over
this

3722
01:09:38,229 --> 01:09:38,239
this
 

3723
01:09:38,239 --> 01:09:42,309
this
and then um user trap calls a separate

3724
01:09:42,309 --> 01:09:42,319
and then um user trap calls a separate
 

3725
01:09:42,319 --> 01:09:42,870
and then um user trap calls a separate
function

3726
01:09:42,870 --> 01:09:42,880
function
 

3727
01:09:42,880 --> 01:09:45,510
function
user trap red in order to set up all the

3728
01:09:45,510 --> 01:09:45,520
user trap red in order to set up all the
 

3729
01:09:45,520 --> 01:09:47,269
user trap red in order to set up all the
stuff that i talked about previously

3730
01:09:47,269 --> 01:09:47,279
stuff that i talked about previously
 

3731
01:09:47,279 --> 01:09:48,309
stuff that i talked about previously
whenever i said

3732
01:09:48,309 --> 01:09:48,319
whenever i said
 

3733
01:09:48,319 --> 01:09:50,149
whenever i said
well before entering user space the

3734
01:09:50,149 --> 01:09:50,159
well before entering user space the
 

3735
01:09:50,159 --> 01:09:52,870
well before entering user space the
kernel does blah blah blah

3736
01:09:52,870 --> 01:09:52,880
kernel does blah blah blah
 

3737
01:09:52,880 --> 01:09:55,669
kernel does blah blah blah
it's user trap red that's responsible

3738
01:09:55,669 --> 01:09:55,679
it's user trap red that's responsible
 

3739
01:09:55,679 --> 01:09:56,310
it's user trap red that's responsible
for

3740
01:09:56,310 --> 01:09:56,320
for
 

3741
01:09:56,320 --> 01:10:00,390
for
setting all that stuff up

3742
01:10:00,390 --> 01:10:00,400

 

3743
01:10:00,400 --> 01:10:01,590

and so we can look at all the different

3744
01:10:01,590 --> 01:10:01,600
and so we can look at all the different
 

3745
01:10:01,600 --> 01:10:09,590
and so we can look at all the different
things it does um

3746
01:10:09,590 --> 01:10:09,600

 

3747
01:10:09,600 --> 01:10:13,990

it um it turns interrupts off

3748
01:10:13,990 --> 01:10:14,000
it um it turns interrupts off
 

3749
01:10:14,000 --> 01:10:15,350
it um it turns interrupts off
they were turned on for the duration of

3750
01:10:15,350 --> 01:10:15,360
they were turned on for the duration of
 

3751
01:10:15,360 --> 01:10:17,030
they were turned on for the duration of
a system call they're turned off now

3752
01:10:17,030 --> 01:10:17,040
a system call they're turned off now
 

3753
01:10:17,040 --> 01:10:20,229
a system call they're turned off now
because we're about to change the st vec

3754
01:10:20,229 --> 01:10:20,239
because we're about to change the st vec
 

3755
01:10:20,239 --> 01:10:24,070
because we're about to change the st vec
to point to the user

3756
01:10:24,070 --> 01:10:24,080
to point to the user
 

3757
01:10:24,080 --> 01:10:26,470
to point to the user
trap handler whereas while we're in the

3758
01:10:26,470 --> 01:10:26,480
trap handler whereas while we're in the
 

3759
01:10:26,480 --> 01:10:27,830
trap handler whereas while we're in the
kernel it was pointing to the kernel

3760
01:10:27,830 --> 01:10:27,840
kernel it was pointing to the kernel
 

3761
01:10:27,840 --> 01:10:28,709
kernel it was pointing to the kernel
trap handler

3762
01:10:28,709 --> 01:10:28,719
trap handler
 

3763
01:10:28,719 --> 01:10:30,470
trap handler
so we turn off interrupts because once

3764
01:10:30,470 --> 01:10:30,480
so we turn off interrupts because once
 

3765
01:10:30,480 --> 01:10:32,790
so we turn off interrupts because once
we changed st vector point to the user

3766
01:10:32,790 --> 01:10:32,800
we changed st vector point to the user
 

3767
01:10:32,800 --> 01:10:34,229
we changed st vector point to the user
trap handler we're still executing in

3768
01:10:34,229 --> 01:10:34,239
trap handler we're still executing in
 

3769
01:10:34,239 --> 01:10:34,950
trap handler we're still executing in
the kernel

3770
01:10:34,950 --> 01:10:34,960
the kernel
 

3771
01:10:34,960 --> 01:10:37,350
the kernel
and if an interrupt should occur then it

3772
01:10:37,350 --> 01:10:37,360
and if an interrupt should occur then it
 

3773
01:10:37,360 --> 01:10:39,110
and if an interrupt should occur then it
would go to the user trap handler even

3774
01:10:39,110 --> 01:10:39,120
would go to the user trap handler even
 

3775
01:10:39,120 --> 01:10:40,630
would go to the user trap handler even
though we're executing in the kernel

3776
01:10:40,630 --> 01:10:40,640
though we're executing in the kernel
 

3777
01:10:40,640 --> 01:10:44,229
though we're executing in the kernel
and for various detailed reasons um

3778
01:10:44,229 --> 01:10:44,239
and for various detailed reasons um
 

3779
01:10:44,239 --> 01:10:45,590
and for various detailed reasons um
that would cause the kernel to

3780
01:10:45,590 --> 01:10:45,600
that would cause the kernel to
 

3781
01:10:45,600 --> 01:10:48,630
that would cause the kernel to
malfunction so we turn off interrupts

3782
01:10:48,630 --> 01:10:48,640
malfunction so we turn off interrupts
 

3783
01:10:48,640 --> 01:10:50,070
malfunction so we turn off interrupts
and they're left off from between the

3784
01:10:50,070 --> 01:10:50,080
and they're left off from between the
 

3785
01:10:50,080 --> 01:10:52,790
and they're left off from between the
time or from the very next line where we

3786
01:10:52,790 --> 01:10:52,800
time or from the very next line where we
 

3787
01:10:52,800 --> 01:10:55,030
time or from the very next line where we
set up the s t vec to point to the

3788
01:10:55,030 --> 01:10:55,040
set up the s t vec to point to the
 

3789
01:10:55,040 --> 01:10:56,070
set up the s t vec to point to the
trampoline

3790
01:10:56,070 --> 01:10:56,080
trampoline
 

3791
01:10:56,080 --> 01:10:58,310
trampoline
all the way through the final s red

3792
01:10:58,310 --> 01:10:58,320
all the way through the final s red
 

3793
01:10:58,320 --> 01:11:01,189
all the way through the final s red
instruction that returns to user space

3794
01:11:01,189 --> 01:11:01,199
instruction that returns to user space
 

3795
01:11:01,199 --> 01:11:02,630
instruction that returns to user space
it turns out that s red instruction at

3796
01:11:02,630 --> 01:11:02,640
it turns out that s red instruction at
 

3797
01:11:02,640 --> 01:11:04,390
it turns out that s red instruction at
the end of the trampoline

3798
01:11:04,390 --> 01:11:04,400
the end of the trampoline
 

3799
01:11:04,400 --> 01:11:07,430
the end of the trampoline
um turns interrupts back on so the

3800
01:11:07,430 --> 01:11:07,440
um turns interrupts back on so the
 

3801
01:11:07,440 --> 01:11:09,110
um turns interrupts back on so the
interrupts are on when we're executing

3802
01:11:09,110 --> 01:11:09,120
interrupts are on when we're executing
 

3803
01:11:09,120 --> 01:11:10,550
interrupts are on when we're executing
in uh

3804
01:11:10,550 --> 01:11:10,560
in uh
 

3805
01:11:10,560 --> 01:11:11,910
in uh
user code even though we just turned

3806
01:11:11,910 --> 01:11:11,920
user code even though we just turned
 

3807
01:11:11,920 --> 01:11:14,870
user code even though we just turned
them off the next couple of lines

3808
01:11:14,870 --> 01:11:14,880
them off the next couple of lines
 

3809
01:11:14,880 --> 01:11:17,669
them off the next couple of lines
fill in those trap frame slots that we

3810
01:11:17,669 --> 01:11:17,679
fill in those trap frame slots that we
 

3811
01:11:17,679 --> 01:11:19,669
fill in those trap frame slots that we
saw before that hold various

3812
01:11:19,669 --> 01:11:19,679
saw before that hold various
 

3813
01:11:19,679 --> 01:11:22,070
saw before that hold various
values that are convenient for the

3814
01:11:22,070 --> 01:11:22,080
values that are convenient for the
 

3815
01:11:22,080 --> 01:11:23,270
values that are convenient for the
trampoline code

3816
01:11:23,270 --> 01:11:23,280
trampoline code
 

3817
01:11:23,280 --> 01:11:27,189
trampoline code
so the code here stashes away a pointer

3818
01:11:27,189 --> 01:11:27,199
so the code here stashes away a pointer
 

3819
01:11:27,199 --> 01:11:28,390
so the code here stashes away a pointer
to the kernel

3820
01:11:28,390 --> 01:11:28,400
to the kernel
 

3821
01:11:28,400 --> 01:11:31,669
to the kernel
page table in the trap frame it stashes

3822
01:11:31,669 --> 01:11:31,679
page table in the trap frame it stashes
 

3823
01:11:31,679 --> 01:11:31,990
page table in the trap frame it stashes
away

3824
01:11:31,990 --> 01:11:32,000
away
 

3825
01:11:32,000 --> 01:11:36,870
away
a pointer to this processes kernel stack

3826
01:11:36,870 --> 01:11:36,880
a pointer to this processes kernel stack
 

3827
01:11:36,880 --> 01:11:41,270
a pointer to this processes kernel stack
uh it stashes away in the trap frame

3828
01:11:41,270 --> 01:11:41,280
uh it stashes away in the trap frame
 

3829
01:11:41,280 --> 01:11:42,870
uh it stashes away in the trap frame
a pointer to the user track function

3830
01:11:42,870 --> 01:11:42,880
a pointer to the user track function
 

3831
01:11:42,880 --> 01:11:44,790
a pointer to the user track function
which is what the trampoline code jumped

3832
01:11:44,790 --> 01:11:44,800
which is what the trampoline code jumped
 

3833
01:11:44,800 --> 01:11:47,669
which is what the trampoline code jumped
to at the very end

3834
01:11:47,669 --> 01:11:47,679
to at the very end
 

3835
01:11:47,679 --> 01:11:49,430
to at the very end
and it stashes the way the current core

3836
01:11:49,430 --> 01:11:49,440
and it stashes the way the current core
 

3837
01:11:49,440 --> 01:11:50,790
and it stashes the way the current core
number

3838
01:11:50,790 --> 01:11:50,800
number
 

3839
01:11:50,800 --> 01:11:54,149
number
read from the tp register so that the

3840
01:11:54,149 --> 01:11:54,159
read from the tp register so that the
 

3841
01:11:54,159 --> 01:11:55,830
read from the tp register so that the
trampoline code can just restore that

3842
01:11:55,830 --> 01:11:55,840
trampoline code can just restore that
 

3843
01:11:55,840 --> 01:11:58,229
trampoline code can just restore that
same value because user code may have

3844
01:11:58,229 --> 01:11:58,239
same value because user code may have
 

3845
01:11:58,239 --> 01:12:01,270
same value because user code may have
disturbed it

3846
01:12:01,270 --> 01:12:01,280

 

3847
01:12:01,280 --> 01:12:04,390

all right yes um why didn't we save the

3848
01:12:04,390 --> 01:12:04,400
all right yes um why didn't we save the
 

3849
01:12:04,400 --> 01:12:08,310
all right yes um why didn't we save the
sepc in the trampoline

3850
01:12:08,310 --> 01:12:08,320
sepc in the trampoline
 

3851
01:12:08,320 --> 01:12:11,350
sepc in the trampoline
it could have

3852
01:12:11,350 --> 01:12:11,360

 

3853
01:12:11,360 --> 01:12:13,350

uh yeah yeah i mean that that the scpc

3854
01:12:13,350 --> 01:12:13,360
uh yeah yeah i mean that that the scpc
 

3855
01:12:13,360 --> 01:12:14,390
uh yeah yeah i mean that that the scpc
could have been

3856
01:12:14,390 --> 01:12:14,400
could have been
 

3857
01:12:14,400 --> 01:12:16,070
could have been
the trampoline code happens not to save

3858
01:12:16,070 --> 01:12:16,080
the trampoline code happens not to save
 

3859
01:12:16,080 --> 01:12:17,910
the trampoline code happens not to save
it along with the other registers

3860
01:12:17,910 --> 01:12:17,920
it along with the other registers
 

3861
01:12:17,920 --> 01:12:21,430
it along with the other registers
we perfectly well could modify the xv6

3862
01:12:21,430 --> 01:12:21,440
we perfectly well could modify the xv6
 

3863
01:12:21,440 --> 01:12:23,110
we perfectly well could modify the xv6
to save it i mean where it is actually

3864
01:12:23,110 --> 01:12:23,120
to save it i mean where it is actually
 

3865
01:12:23,120 --> 01:12:25,030
to save it i mean where it is actually
saved as you

3866
01:12:25,030 --> 01:12:25,040
saved as you
 

3867
01:12:25,040 --> 01:12:27,830
saved as you
probably remember is just happen to save

3868
01:12:27,830 --> 01:12:27,840
probably remember is just happen to save
 

3869
01:12:27,840 --> 01:12:29,830
probably remember is just happen to save
it in user trap and c code instead of an

3870
01:12:29,830 --> 01:12:29,840
it in user trap and c code instead of an
 

3871
01:12:29,840 --> 01:12:31,590
it in user trap and c code instead of an
assembly code

3872
01:12:31,590 --> 01:12:31,600
assembly code
 

3873
01:12:31,600 --> 01:12:34,950
assembly code
in the trampoline code

3874
01:12:34,950 --> 01:12:34,960

 

3875
01:12:34,960 --> 01:12:36,870

um i don't think this i can't think of a

3876
01:12:36,870 --> 01:12:36,880
um i don't think this i can't think of a
 

3877
01:12:36,880 --> 01:12:38,470
um i don't think this i can't think of a
good reason to do it one way or the

3878
01:12:38,470 --> 01:12:38,480
good reason to do it one way or the
 

3879
01:12:38,480 --> 01:12:40,310
good reason to do it one way or the
other

3880
01:12:40,310 --> 01:12:40,320
other
 

3881
01:12:40,320 --> 01:12:42,470
other
the user registers really have to be

3882
01:12:42,470 --> 01:12:42,480
the user registers really have to be
 

3883
01:12:42,480 --> 01:12:45,189
the user registers really have to be
saved in the assembly code

3884
01:12:45,189 --> 01:12:45,199
saved in the assembly code
 

3885
01:12:45,199 --> 01:12:47,750
saved in the assembly code
because any c code is entitled for all

3886
01:12:47,750 --> 01:12:47,760
because any c code is entitled for all
 

3887
01:12:47,760 --> 01:12:49,189
because any c code is entitled for all
we know the compiler generates code

3888
01:12:49,189 --> 01:12:49,199
we know the compiler generates code
 

3889
01:12:49,199 --> 01:12:53,110
we know the compiler generates code
which modifies any

3890
01:12:53,110 --> 01:12:53,120

 

3891
01:12:53,120 --> 01:12:54,870

user register so those user registers

3892
01:12:54,870 --> 01:12:54,880
user register so those user registers
 

3893
01:12:54,880 --> 01:12:56,709
user register so those user registers
are pretty important to save them in

3894
01:12:56,709 --> 01:12:56,719
are pretty important to save them in
 

3895
01:12:56,719 --> 01:12:58,950
are pretty important to save them in
assembly code before entering c

3896
01:12:58,950 --> 01:12:58,960
assembly code before entering c
 

3897
01:12:58,960 --> 01:13:00,950
assembly code before entering c
but the epc we could have been saved

3898
01:13:00,950 --> 01:13:00,960
but the epc we could have been saved
 

3899
01:13:00,960 --> 01:13:04,470
but the epc we could have been saved
earlier or later

3900
01:13:04,470 --> 01:13:04,480
earlier or later
 

3901
01:13:04,480 --> 01:13:06,550
earlier or later
okay so we're in user trap red sort of

3902
01:13:06,550 --> 01:13:06,560
okay so we're in user trap red sort of
 

3903
01:13:06,560 --> 01:13:08,870
okay so we're in user trap red sort of
preparing the trap we prepared the trap

3904
01:13:08,870 --> 01:13:08,880
preparing the trap we prepared the trap
 

3905
01:13:08,880 --> 01:13:10,390
preparing the trap we prepared the trap
frame with all these values that are

3906
01:13:10,390 --> 01:13:10,400
frame with all these values that are
 

3907
01:13:10,400 --> 01:13:12,070
frame with all these values that are
going to be needed

3908
01:13:12,070 --> 01:13:12,080
going to be needed
 

3909
01:13:12,080 --> 01:13:15,030
going to be needed
um next time there's a transition from

3910
01:13:15,030 --> 01:13:15,040
um next time there's a transition from
 

3911
01:13:15,040 --> 01:13:16,310
um next time there's a transition from
user space to kernel

3912
01:13:16,310 --> 01:13:16,320
user space to kernel
 

3913
01:13:16,320 --> 01:13:20,070
user space to kernel
next trap

3914
01:13:20,070 --> 01:13:20,080

 

3915
01:13:20,080 --> 01:13:21,189

there's a couple things we have to set

3916
01:13:21,189 --> 01:13:21,199
there's a couple things we have to set
 

3917
01:13:21,199 --> 01:13:23,430
there's a couple things we have to set
up in the s status

3918
01:13:23,430 --> 01:13:23,440
up in the s status
 

3919
01:13:23,440 --> 01:13:27,110
up in the s status
control register it turns out this

3920
01:13:27,110 --> 01:13:27,120
control register it turns out this
 

3921
01:13:27,120 --> 01:13:30,310
control register it turns out this
spp bit in s status

3922
01:13:30,310 --> 01:13:30,320
spp bit in s status
 

3923
01:13:30,320 --> 01:13:33,350
spp bit in s status
controls weather controls the mode

3924
01:13:33,350 --> 01:13:33,360
controls weather controls the mode
 

3925
01:13:33,360 --> 01:13:36,870
controls weather controls the mode
that s red returns to and by clearing it

3926
01:13:36,870 --> 01:13:36,880
that s red returns to and by clearing it
 

3927
01:13:36,880 --> 01:13:37,830
that s red returns to and by clearing it
we're just saying

3928
01:13:37,830 --> 01:13:37,840
we're just saying
 

3929
01:13:37,840 --> 01:13:40,950
we're just saying
oh look next time we execute sret

3930
01:13:40,950 --> 01:13:40,960
oh look next time we execute sret
 

3931
01:13:40,960 --> 01:13:42,709
oh look next time we execute sret
we want to go to user mode instead of

3932
01:13:42,709 --> 01:13:42,719
we want to go to user mode instead of
 

3933
01:13:42,719 --> 01:13:44,709
we want to go to user mode instead of
supervisor mode

3934
01:13:44,709 --> 01:13:44,719
supervisor mode
 

3935
01:13:44,719 --> 01:13:48,550
supervisor mode
and this spie bit controls whether

3936
01:13:48,550 --> 01:13:48,560
and this spie bit controls whether
 

3937
01:13:48,560 --> 01:13:51,669
and this spie bit controls whether
interrupts will be enabled after we

3938
01:13:51,669 --> 01:13:51,679
interrupts will be enabled after we
 

3939
01:13:51,679 --> 01:13:52,790
interrupts will be enabled after we
execute s-red

3940
01:13:52,790 --> 01:13:52,800
execute s-red
 

3941
01:13:52,800 --> 01:13:54,709
execute s-red
and you know after we get into user

3942
01:13:54,709 --> 01:13:54,719
and you know after we get into user
 

3943
01:13:54,719 --> 01:13:56,790
and you know after we get into user
space and we do want them to be enabled

3944
01:13:56,790 --> 01:13:56,800
space and we do want them to be enabled
 

3945
01:13:56,800 --> 01:13:59,750
space and we do want them to be enabled
so i'm going to set that spie bit and

3946
01:13:59,750 --> 01:13:59,760
so i'm going to set that spie bit and
 

3947
01:13:59,760 --> 01:14:00,709
so i'm going to set that spie bit and
then we're going to write this new

3948
01:14:00,709 --> 01:14:00,719
then we're going to write this new
 

3949
01:14:00,719 --> 01:14:03,350
then we're going to write this new
modified status into the actual hardware

3950
01:14:03,350 --> 01:14:03,360
modified status into the actual hardware
 

3951
01:14:03,360 --> 01:14:06,550
modified status into the actual hardware
status register

3952
01:14:06,550 --> 01:14:06,560

 

3953
01:14:06,560 --> 01:14:10,310

it turns out what sret does

3954
01:14:10,310 --> 01:14:10,320

 

3955
01:14:10,320 --> 01:14:11,590

you know the sro we're going to execute

3956
01:14:11,590 --> 01:14:11,600
you know the sro we're going to execute
 

3957
01:14:11,600 --> 01:14:12,950
you know the sro we're going to execute
right at the end of the trampoline code

3958
01:14:12,950 --> 01:14:12,960
right at the end of the trampoline code
 

3959
01:14:12,960 --> 01:14:14,470
right at the end of the trampoline code
what that s red does

3960
01:14:14,470 --> 01:14:14,480
what that s red does
 

3961
01:14:14,480 --> 01:14:17,270
what that s red does
is um sets the program counter equal to

3962
01:14:17,270 --> 01:14:17,280
is um sets the program counter equal to
 

3963
01:14:17,280 --> 01:14:19,830
is um sets the program counter equal to
the sepc register

3964
01:14:19,830 --> 01:14:19,840
the sepc register
 

3965
01:14:19,840 --> 01:14:21,910
the sepc register
so we're now going to set up the sepc

3966
01:14:21,910 --> 01:14:21,920
so we're now going to set up the sepc
 

3967
01:14:21,920 --> 01:14:23,270
so we're now going to set up the sepc
register to have

3968
01:14:23,270 --> 01:14:23,280
register to have
 

3969
01:14:23,280 --> 01:14:27,350
register to have
the saved user program counter

3970
01:14:27,350 --> 01:14:27,360
the saved user program counter
 

3971
01:14:27,360 --> 01:14:29,990
the saved user program counter
which if you recall we recently saved in

3972
01:14:29,990 --> 01:14:30,000
which if you recall we recently saved in
 

3973
01:14:30,000 --> 01:14:31,430
which if you recall we recently saved in
the trap frame that's what's happening

3974
01:14:31,430 --> 01:14:31,440
the trap frame that's what's happening
 

3975
01:14:31,440 --> 01:14:34,149
the trap frame that's what's happening
here

3976
01:14:34,149 --> 01:14:34,159

 

3977
01:14:34,159 --> 01:14:36,550

if you remember also the trap frame

3978
01:14:36,550 --> 01:14:36,560
if you remember also the trap frame
 

3979
01:14:36,560 --> 01:14:39,430
if you remember also the trap frame
contain a pointer to

3980
01:14:39,430 --> 01:14:39,440
contain a pointer to
 

3981
01:14:39,440 --> 01:14:41,430
contain a pointer to
the kernel page table because the

3982
01:14:41,430 --> 01:14:41,440
the kernel page table because the
 

3983
01:14:41,440 --> 01:14:43,590
the kernel page table because the
trampoline needs to switch to it

3984
01:14:43,590 --> 01:14:43,600
trampoline needs to switch to it
 

3985
01:14:43,600 --> 01:14:45,750
trampoline needs to switch to it
we need to cook up the special bit

3986
01:14:45,750 --> 01:14:45,760
we need to cook up the special bit
 

3987
01:14:45,760 --> 01:14:48,070
we need to cook up the special bit
pattern that you need to write to satp

3988
01:14:48,070 --> 01:14:48,080
pattern that you need to write to satp
 

3989
01:14:48,080 --> 01:14:52,709
pattern that you need to write to satp
that's done here and

3990
01:14:52,709 --> 01:14:52,719
that's done here and
 

3991
01:14:52,719 --> 01:14:55,430
that's done here and
i'm sorry we're now preparing a pointer

3992
01:14:55,430 --> 01:14:55,440
i'm sorry we're now preparing a pointer
 

3993
01:14:55,440 --> 01:14:57,830
i'm sorry we're now preparing a pointer
to the user page table

3994
01:14:57,830 --> 01:14:57,840
to the user page table
 

3995
01:14:57,840 --> 01:14:59,590
to the user page table
which we need to switch to on the way

3996
01:14:59,590 --> 01:14:59,600
which we need to switch to on the way
 

3997
01:14:59,600 --> 01:15:02,470
which we need to switch to on the way
into user space

3998
01:15:02,470 --> 01:15:02,480
into user space
 

3999
01:15:02,480 --> 01:15:04,070
into user space
we're actually going to do that switch

4000
01:15:04,070 --> 01:15:04,080
we're actually going to do that switch
 

4001
01:15:04,080 --> 01:15:05,990
we're actually going to do that switch
in assembly code because it has to

4002
01:15:05,990 --> 01:15:06,000
in assembly code because it has to
 

4003
01:15:06,000 --> 01:15:06,470
in assembly code because it has to
happen

4004
01:15:06,470 --> 01:15:06,480
happen
 

4005
01:15:06,480 --> 01:15:09,110
happen
in the trampoline because only code in

4006
01:15:09,110 --> 01:15:09,120
in the trampoline because only code in
 

4007
01:15:09,120 --> 01:15:10,870
in the trampoline because only code in
the trampoline is mapped in both user

4008
01:15:10,870 --> 01:15:10,880
the trampoline is mapped in both user
 

4009
01:15:10,880 --> 01:15:12,310
the trampoline is mapped in both user
and kernel space

4010
01:15:12,310 --> 01:15:12,320
and kernel space
 

4011
01:15:12,320 --> 01:15:15,110
and kernel space
so we can only really switch page tables

4012
01:15:15,110 --> 01:15:15,120
so we can only really switch page tables
 

4013
01:15:15,120 --> 01:15:16,470
so we can only really switch page tables
when we're executing on the trampoline

4014
01:15:16,470 --> 01:15:16,480
when we're executing on the trampoline
 

4015
01:15:16,480 --> 01:15:17,590
when we're executing on the trampoline
but we're not executing on the

4016
01:15:17,590 --> 01:15:17,600
but we're not executing on the
 

4017
01:15:17,600 --> 01:15:18,790
but we're not executing on the
trampoline yet

4018
01:15:18,790 --> 01:15:18,800
trampoline yet
 

4019
01:15:18,800 --> 01:15:20,229
trampoline yet
we're still just in an ordinary c

4020
01:15:20,229 --> 01:15:20,239
we're still just in an ordinary c
 

4021
01:15:20,239 --> 01:15:22,550
we're still just in an ordinary c
function so we prepare this pointer

4022
01:15:22,550 --> 01:15:22,560
function so we prepare this pointer
 

4023
01:15:22,560 --> 01:15:24,070
function so we prepare this pointer
and we're going to pass it to the

4024
01:15:24,070 --> 01:15:24,080
and we're going to pass it to the
 

4025
01:15:24,080 --> 01:15:26,550
and we're going to pass it to the
assembly code as the second argument in

4026
01:15:26,550 --> 01:15:26,560
assembly code as the second argument in
 

4027
01:15:26,560 --> 01:15:30,790
assembly code as the second argument in
a1

4028
01:15:30,790 --> 01:15:30,800

 

4029
01:15:30,800 --> 01:15:32,310

what this line here doing is just

4030
01:15:32,310 --> 01:15:32,320
what this line here doing is just
 

4031
01:15:32,320 --> 01:15:33,990
what this line here doing is just
calculating the address

4032
01:15:33,990 --> 01:15:34,000
calculating the address
 

4033
01:15:34,000 --> 01:15:36,870
calculating the address
of where we want to jump to at the end

4034
01:15:36,870 --> 01:15:36,880
of where we want to jump to at the end
 

4035
01:15:36,880 --> 01:15:39,830
of where we want to jump to at the end
of the trampoline code and it turns out

4036
01:15:39,830 --> 01:15:39,840
of the trampoline code and it turns out
 

4037
01:15:39,840 --> 01:15:42,470
of the trampoline code and it turns out
that there's a that we where we want to

4038
01:15:42,470 --> 01:15:42,480
that there's a that we where we want to
 

4039
01:15:42,480 --> 01:15:44,390
that there's a that we where we want to
go is user read user writes the address

4040
01:15:44,390 --> 01:15:44,400
go is user read user writes the address
 

4041
01:15:44,400 --> 01:15:46,149
go is user read user writes the address
of the instructions that'll take us back

4042
01:15:46,149 --> 01:15:46,159
of the instructions that'll take us back
 

4043
01:15:46,159 --> 01:15:47,510
of the instructions that'll take us back
to user space

4044
01:15:47,510 --> 01:15:47,520
to user space
 

4045
01:15:47,520 --> 01:15:52,470
to user space
and this little formula works out um

4046
01:15:52,470 --> 01:15:52,480
and this little formula works out um
 

4047
01:15:52,480 --> 01:15:55,110
and this little formula works out um
the address and the virtual address and

4048
01:15:55,110 --> 01:15:55,120
the address and the virtual address and
 

4049
01:15:55,120 --> 01:15:56,310
the address and the virtual address and
the trampoline

4050
01:15:56,310 --> 01:15:56,320
the trampoline
 

4051
01:15:56,320 --> 01:15:57,990
the trampoline
that corresponds to that user rat

4052
01:15:57,990 --> 01:15:58,000
that corresponds to that user rat
 

4053
01:15:58,000 --> 01:15:59,990
that corresponds to that user rat
function

4054
01:15:59,990 --> 01:16:00,000
function
 

4055
01:16:00,000 --> 01:16:04,830
function
um

4056
01:16:04,830 --> 01:16:04,840

 

4057
01:16:04,840 --> 01:16:07,510

oops okay so we calculate the address of

4058
01:16:07,510 --> 01:16:07,520
oops okay so we calculate the address of
 

4059
01:16:07,520 --> 01:16:09,590
oops okay so we calculate the address of
that

4060
01:16:09,590 --> 01:16:09,600
that
 

4061
01:16:09,600 --> 01:16:12,709
that
user at function and then this mess this

4062
01:16:12,709 --> 01:16:12,719
user at function and then this mess this
 

4063
01:16:12,719 --> 01:16:14,070
user at function and then this mess this
next line

4064
01:16:14,070 --> 01:16:14,080
next line
 

4065
01:16:14,080 --> 01:16:17,189
next line
call uses this fn

4066
01:16:17,189 --> 01:16:17,199
call uses this fn
 

4067
01:16:17,199 --> 01:16:19,189
call uses this fn
variable as a function pointer and jumps

4068
01:16:19,189 --> 01:16:19,199
variable as a function pointer and jumps
 

4069
01:16:19,199 --> 01:16:21,030
variable as a function pointer and jumps
to that function with these two

4070
01:16:21,030 --> 01:16:21,040
to that function with these two
 

4071
01:16:21,040 --> 01:16:24,229
to that function with these two
arguments in a0 and a1

4072
01:16:24,229 --> 01:16:24,239
arguments in a0 and a1
 

4073
01:16:24,239 --> 01:16:28,709
arguments in a0 and a1
we can now just go to

4074
01:16:28,709 --> 01:16:28,719

 

4075
01:16:28,719 --> 01:16:33,669

trampoline code

4076
01:16:33,669 --> 01:16:33,679

 

4077
01:16:33,679 --> 01:16:36,470

in the trampoline code there's um

4078
01:16:36,470 --> 01:16:36,480
in the trampoline code there's um
 

4079
01:16:36,480 --> 01:16:38,630
in the trampoline code there's um
[Music]

4080
01:16:38,630 --> 01:16:38,640
[Music]
 

4081
01:16:38,640 --> 01:16:39,910
[Music]
well first we switch to the user page

4082
01:16:39,910 --> 01:16:39,920
well first we switch to the user page
 

4083
01:16:39,920 --> 01:16:41,350
well first we switch to the user page
table so it means actually execute this

4084
01:16:41,350 --> 01:16:41,360
table so it means actually execute this
 

4085
01:16:41,360 --> 01:16:43,510
table so it means actually execute this
and we can see the page tables change

4086
01:16:43,510 --> 01:16:43,520
and we can see the page tables change
 

4087
01:16:43,520 --> 01:16:45,910
and we can see the page tables change
just for chuckles we're still using the

4088
01:16:45,910 --> 01:16:45,920
just for chuckles we're still using the
 

4089
01:16:45,920 --> 01:16:48,470
just for chuckles we're still using the
giant kernel page table

4090
01:16:48,470 --> 01:16:48,480
giant kernel page table
 

4091
01:16:48,480 --> 01:16:52,390
giant kernel page table
um i'm going to run through user trapret

4092
01:16:52,390 --> 01:16:52,400
um i'm going to run through user trapret
 

4093
01:16:52,400 --> 01:16:53,110
um i'm going to run through user trapret
quickly

4094
01:16:53,110 --> 01:16:53,120
quickly
 

4095
01:16:53,120 --> 01:16:54,550
quickly
until we get to the point where it jumps

4096
01:16:54,550 --> 01:16:54,560
until we get to the point where it jumps
 

4097
01:16:54,560 --> 01:16:59,030
until we get to the point where it jumps
to the trampoline

4098
01:16:59,030 --> 01:16:59,040

 

4099
01:16:59,040 --> 01:17:07,189

all right we're in the trampoline um

4100
01:17:07,189 --> 01:17:07,199

 

4101
01:17:07,199 --> 01:17:08,390

these are the instructions so we're

4102
01:17:08,390 --> 01:17:08,400
these are the instructions so we're
 

4103
01:17:08,400 --> 01:17:09,910
these are the instructions so we're
about to start executing the trampoline

4104
01:17:09,910 --> 01:17:09,920
about to start executing the trampoline
 

4105
01:17:09,920 --> 01:17:10,390
about to start executing the trampoline
code

4106
01:17:10,390 --> 01:17:10,400
code
 

4107
01:17:10,400 --> 01:17:14,470
code
right here we can now again

4108
01:17:14,470 --> 01:17:14,480
right here we can now again
 

4109
01:17:14,480 --> 01:17:16,550
right here we can now again
let's print the page table it's still

4110
01:17:16,550 --> 01:17:16,560
let's print the page table it's still
 

4111
01:17:16,560 --> 01:17:18,470
let's print the page table it's still
the kernel page table

4112
01:17:18,470 --> 01:17:18,480
the kernel page table
 

4113
01:17:18,480 --> 01:17:21,030
the kernel page table
um the first thing that's going to

4114
01:17:21,030 --> 01:17:21,040
um the first thing that's going to
 

4115
01:17:21,040 --> 01:17:22,630
um the first thing that's going to
happen here though is that the

4116
01:17:22,630 --> 01:17:22,640
happen here though is that the
 

4117
01:17:22,640 --> 01:17:25,030
happen here though is that the
trampoline code is going to load the

4118
01:17:25,030 --> 01:17:25,040
trampoline code is going to load the
 

4119
01:17:25,040 --> 01:17:27,669
trampoline code is going to load the
that pointer to the user page table

4120
01:17:27,669 --> 01:17:27,679
that pointer to the user page table
 

4121
01:17:27,679 --> 01:17:30,790
that pointer to the user page table
into the sat p register so we switch

4122
01:17:30,790 --> 01:17:30,800
into the sat p register so we switch
 

4123
01:17:30,800 --> 01:17:33,350
into the sat p register so we switch
page tables if i type info map now

4124
01:17:33,350 --> 01:17:33,360
page tables if i type info map now
 

4125
01:17:33,360 --> 01:17:35,110
page tables if i type info map now
we now have a much smaller user page

4126
01:17:35,110 --> 01:17:35,120
we now have a much smaller user page
 

4127
01:17:35,120 --> 01:17:36,870
we now have a much smaller user page
table but luckily

4128
01:17:36,870 --> 01:17:36,880
table but luckily
 

4129
01:17:36,880 --> 01:17:38,630
table but luckily
still with the trampoline page map so we

4130
01:17:38,630 --> 01:17:38,640
still with the trampoline page map so we
 

4131
01:17:38,640 --> 01:17:43,189
still with the trampoline page map so we
don't crash on the next instruction

4132
01:17:43,189 --> 01:17:43,199

 

4133
01:17:43,199 --> 01:17:47,350

the next thing that happens is this um

4134
01:17:47,350 --> 01:17:47,360

 

4135
01:17:47,360 --> 01:17:51,590

um i showed you a while ago that the

4136
01:17:51,590 --> 01:17:51,600
um i showed you a while ago that the
 

4137
01:17:51,600 --> 01:17:53,830
um i showed you a while ago that the
second to last thing that this sequence

4138
01:17:53,830 --> 01:17:53,840
second to last thing that this sequence
 

4139
01:17:53,840 --> 01:17:55,590
second to last thing that this sequence
of code does on the way to user space

4140
01:17:55,590 --> 01:17:55,600
of code does on the way to user space
 

4141
01:17:55,600 --> 01:17:58,709
of code does on the way to user space
is swaps s scratch with a zero

4142
01:17:58,709 --> 01:17:58,719
is swaps s scratch with a zero
 

4143
01:17:58,719 --> 01:18:00,790
is swaps s scratch with a zero
so we need to set up s scratch with the

4144
01:18:00,790 --> 01:18:00,800
so we need to set up s scratch with the
 

4145
01:18:00,800 --> 01:18:03,270
so we need to set up s scratch with the
saved user a0 so that when we do that

4146
01:18:03,270 --> 01:18:03,280
saved user a0 so that when we do that
 

4147
01:18:03,280 --> 01:18:04,630
saved user a0 so that when we do that
swap

4148
01:18:04,630 --> 01:18:04,640
swap
 

4149
01:18:04,640 --> 01:18:07,430
swap
a0 will end up having the saved user a0

4150
01:18:07,430 --> 01:18:07,440
a0 will end up having the saved user a0
 

4151
01:18:07,440 --> 01:18:08,229
a0 will end up having the saved user a0
it turns out

4152
01:18:08,229 --> 01:18:08,239
it turns out
 

4153
01:18:08,239 --> 01:18:10,550
it turns out
a0 is a pointer to the trap frame

4154
01:18:10,550 --> 01:18:10,560
a0 is a pointer to the trap frame
 

4155
01:18:10,560 --> 01:18:11,669
a0 is a pointer to the trap frame
because

4156
01:18:11,669 --> 01:18:11,679
because
 

4157
01:18:11,679 --> 01:18:13,590
because
the c code passed that as the first

4158
01:18:13,590 --> 01:18:13,600
the c code passed that as the first
 

4159
01:18:13,600 --> 01:18:15,270
the c code passed that as the first
argument 112

4160
01:18:15,270 --> 01:18:15,280
argument 112
 

4161
01:18:15,280 --> 01:18:18,790
argument 112
of a0 is the address of the saved a0

4162
01:18:18,790 --> 01:18:18,800
of a0 is the address of the saved a0
 

4163
01:18:18,800 --> 01:18:19,830
of a0 is the address of the saved a0
in the track frame so we're going to

4164
01:18:19,830 --> 01:18:19,840
in the track frame so we're going to
 

4165
01:18:19,840 --> 01:18:22,790
in the track frame so we're going to
load that and then into t0 and then load

4166
01:18:22,790 --> 01:18:22,800
load that and then into t0 and then load
 

4167
01:18:22,800 --> 01:18:23,510
load that and then into t0 and then load
that into

4168
01:18:23,510 --> 01:18:23,520
that into
 

4169
01:18:23,520 --> 01:18:25,350
that into
scratch at this point we're still

4170
01:18:25,350 --> 01:18:25,360
scratch at this point we're still
 

4171
01:18:25,360 --> 01:18:27,030
scratch at this point we're still
running with the

4172
01:18:27,030 --> 01:18:27,040
running with the
 

4173
01:18:27,040 --> 01:18:31,189
running with the
kernel stuff and all the registers

4174
01:18:31,189 --> 01:18:31,199
kernel stuff and all the registers
 

4175
01:18:31,199 --> 01:18:34,390
kernel stuff and all the registers
the next 32 instructions though load out

4176
01:18:34,390 --> 01:18:34,400
the next 32 instructions though load out
 

4177
01:18:34,400 --> 01:18:35,590
the next 32 instructions though load out
of the trap frame which

4178
01:18:35,590 --> 01:18:35,600
of the trap frame which
 

4179
01:18:35,600 --> 01:18:38,630
of the trap frame which
a0 points to load all of the

4180
01:18:38,630 --> 01:18:38,640
a0 points to load all of the
 

4181
01:18:38,640 --> 01:18:41,110
a0 points to load all of the
saved user registers out of the trap

4182
01:18:41,110 --> 01:18:41,120
saved user registers out of the trap
 

4183
01:18:41,120 --> 01:18:45,110
saved user registers out of the trap
frame

4184
01:18:45,110 --> 01:18:45,120

 

4185
01:18:45,120 --> 01:18:47,030

into the actual register so we're like

4186
01:18:47,030 --> 01:18:47,040
into the actual register so we're like
 

4187
01:18:47,040 --> 01:18:48,870
into the actual register so we're like
really close to being able to

4188
01:18:48,870 --> 01:18:48,880
really close to being able to
 

4189
01:18:48,880 --> 01:18:50,630
really close to being able to
the point where we can run user code i'm

4190
01:18:50,630 --> 01:18:50,640
the point where we can run user code i'm
 

4191
01:18:50,640 --> 01:18:56,070
the point where we can run user code i'm
going to skip over all these loads

4192
01:18:56,070 --> 01:18:56,080

 

4193
01:18:56,080 --> 01:18:59,030

any questions before we uh approach

4194
01:18:59,030 --> 01:18:59,040
any questions before we uh approach
 

4195
01:18:59,040 --> 01:19:02,310
any questions before we uh approach
closer to user space

4196
01:19:02,310 --> 01:19:02,320

 

4197
01:19:02,320 --> 01:19:04,709

i have one quick question is the value

4198
01:19:04,709 --> 01:19:04,719
i have one quick question is the value
 

4199
01:19:04,719 --> 01:19:07,750
i have one quick question is the value
in the trap frame a0 now the return

4200
01:19:07,750 --> 01:19:07,760
in the trap frame a0 now the return
 

4201
01:19:07,760 --> 01:19:11,430
in the trap frame a0 now the return
value of that system call that we made

4202
01:19:11,430 --> 01:19:11,440

 

4203
01:19:11,440 --> 01:19:14,790

um

4204
01:19:14,790 --> 01:19:14,800

 

4205
01:19:14,800 --> 01:19:18,149

yeah yeah the relay zero holds just this

4206
01:19:18,149 --> 01:19:18,159
yeah yeah the relay zero holds just this
 

4207
01:19:18,159 --> 01:19:20,870
yeah yeah the relay zero holds just this
under the trap frame but the after we

4208
01:19:20,870 --> 01:19:20,880
under the trap frame but the after we
 

4209
01:19:20,880 --> 01:19:21,590
under the trap frame but the after we
execute

4210
01:19:21,590 --> 01:19:21,600
execute
 

4211
01:19:21,600 --> 01:19:24,950
execute
the well s

4212
01:19:24,950 --> 01:19:24,960
the well s
 

4213
01:19:24,960 --> 01:19:27,590
the well s
okay the current location of the user

4214
01:19:27,590 --> 01:19:27,600
okay the current location of the user
 

4215
01:19:27,600 --> 01:19:29,189
okay the current location of the user
saved

4216
01:19:29,189 --> 01:19:29,199
saved
 

4217
01:19:29,199 --> 01:19:32,550
saved
uh yes i was calling it the user saved

4218
01:19:32,550 --> 01:19:32,560
uh yes i was calling it the user saved
 

4219
01:19:32,560 --> 01:19:33,750
uh yes i was calling it the user saved
a0 but in fact

4220
01:19:33,750 --> 01:19:33,760
a0 but in fact
 

4221
01:19:33,760 --> 01:19:36,149
a0 but in fact
the system call returns stuff overwrote

4222
01:19:36,149 --> 01:19:36,159
the system call returns stuff overwrote
 

4223
01:19:36,159 --> 01:19:39,189
the system call returns stuff overwrote
it with the return value that we want

4224
01:19:39,189 --> 01:19:39,199
it with the return value that we want
 

4225
01:19:39,199 --> 01:19:41,990
it with the return value that we want
the shell to see in a0 so the current

4226
01:19:41,990 --> 01:19:42,000
the shell to see in a0 so the current
 

4227
01:19:42,000 --> 01:19:44,070
the shell to see in a0 so the current
location of that a0 which we overwrote

4228
01:19:44,070 --> 01:19:44,080
location of that a0 which we overwrote
 

4229
01:19:44,080 --> 01:19:45,669
location of that a0 which we overwrote
with 2

4230
01:19:45,669 --> 01:19:45,679
with 2
 

4231
01:19:45,679 --> 01:19:47,669
with 2
as the return value is s scrap so i'm

4232
01:19:47,669 --> 01:19:47,679
as the return value is s scrap so i'm
 

4233
01:19:47,679 --> 01:19:49,270
as the return value is s scrap so i'm
going to point s scratch and hope that

4234
01:19:49,270 --> 01:19:49,280
going to point s scratch and hope that
 

4235
01:19:49,280 --> 01:19:51,189
going to point s scratch and hope that
it's equal to two

4236
01:19:51,189 --> 01:19:51,199
it's equal to two
 

4237
01:19:51,199 --> 01:19:55,750
it's equal to two
it is equal to two um

4238
01:19:55,750 --> 01:19:55,760

 

4239
01:19:55,760 --> 01:19:58,229

does that answer your question yes i

4240
01:19:58,229 --> 01:19:58,239
does that answer your question yes i
 

4241
01:19:58,239 --> 01:19:58,950
does that answer your question yes i
think so

4242
01:19:58,950 --> 01:19:58,960
think so
 

4243
01:19:58,960 --> 01:20:01,669
think so
okay i'm gonna uh skip over all these

4244
01:20:01,669 --> 01:20:01,679
okay i'm gonna uh skip over all these
 

4245
01:20:01,679 --> 01:20:02,630
okay i'm gonna uh skip over all these
loads

4246
01:20:02,630 --> 01:20:02,640
loads
 

4247
01:20:02,640 --> 01:20:05,430
loads
the restore the saved user values out of

4248
01:20:05,430 --> 01:20:05,440
the restore the saved user values out of
 

4249
01:20:05,440 --> 01:20:08,149
the restore the saved user values out of
the trap frame into the registers

4250
01:20:08,149 --> 01:20:08,159
the trap frame into the registers
 

4251
01:20:08,159 --> 01:20:09,510
the trap frame into the registers
why don't i print out the registers at

4252
01:20:09,510 --> 01:20:09,520
why don't i print out the registers at
 

4253
01:20:09,520 --> 01:20:11,350
why don't i print out the registers at
this point

4254
01:20:11,350 --> 01:20:11,360
this point
 

4255
01:20:11,360 --> 01:20:16,550
this point
um actually gonna

4256
01:20:16,550 --> 01:20:16,560

 

4257
01:20:16,560 --> 01:20:18,229

print out the registers i don't know if

4258
01:20:18,229 --> 01:20:18,239
print out the registers i don't know if
 

4259
01:20:18,239 --> 01:20:19,750
print out the registers i don't know if
these look familiar but they happen to

4260
01:20:19,750 --> 01:20:19,760
these look familiar but they happen to
 

4261
01:20:19,760 --> 01:20:20,390
these look familiar but they happen to
be

4262
01:20:20,390 --> 01:20:20,400
be
 

4263
01:20:20,400 --> 01:20:22,229
be
the same set of user registers we saw

4264
01:20:22,229 --> 01:20:22,239
the same set of user registers we saw
 

4265
01:20:22,239 --> 01:20:23,590
the same set of user registers we saw
way back at the beginning of this

4266
01:20:23,590 --> 01:20:23,600
way back at the beginning of this
 

4267
01:20:23,600 --> 01:20:24,790
way back at the beginning of this
exercise

4268
01:20:24,790 --> 01:20:24,800
exercise
 

4269
01:20:24,800 --> 01:20:28,709
exercise
for example a1 or the stack pointer

4270
01:20:28,709 --> 01:20:28,719
for example a1 or the stack pointer
 

4271
01:20:28,719 --> 01:20:30,629
for example a1 or the stack pointer
holds this small value appropriate for a

4272
01:20:30,629 --> 01:20:30,639
holds this small value appropriate for a
 

4273
01:20:30,639 --> 01:20:32,870
holds this small value appropriate for a
user stack low in memory

4274
01:20:32,870 --> 01:20:32,880
user stack low in memory
 

4275
01:20:32,880 --> 01:20:35,590
user stack low in memory
a1 is that buffer pointer that we passed

4276
01:20:35,590 --> 01:20:35,600
a1 is that buffer pointer that we passed
 

4277
01:20:35,600 --> 01:20:36,550
a1 is that buffer pointer that we passed
to write

4278
01:20:36,550 --> 01:20:36,560
to write
 

4279
01:20:36,560 --> 01:20:39,510
to write
2 is that number of bytes a0 however is

4280
01:20:39,510 --> 01:20:39,520
2 is that number of bytes a0 however is
 

4281
01:20:39,520 --> 01:20:40,709
2 is that number of bytes a0 however is
the exception is

4282
01:20:40,709 --> 01:20:40,719
the exception is
 

4283
01:20:40,719 --> 01:20:44,709
the exception is
not a saved user value because it still

4284
01:20:44,709 --> 01:20:44,719
not a saved user value because it still
 

4285
01:20:44,719 --> 01:20:47,030
not a saved user value because it still
has the pointer to our trap frame in it

4286
01:20:47,030 --> 01:20:47,040
has the pointer to our trap frame in it
 

4287
01:20:47,040 --> 01:20:52,790
has the pointer to our trap frame in it
um but let's look we're about to execute

4288
01:20:52,790 --> 01:20:52,800

 

4289
01:20:52,800 --> 01:20:55,990

um we're about to execute is this

4290
01:20:55,990 --> 01:20:56,000
um we're about to execute is this
 

4291
01:20:56,000 --> 01:20:59,350
um we're about to execute is this
csr rwa0 scratch

4292
01:20:59,350 --> 01:20:59,360
csr rwa0 scratch
 

4293
01:20:59,360 --> 01:21:02,070
csr rwa0 scratch
right at the end of trampoline just

4294
01:21:02,070 --> 01:21:02,080
right at the end of trampoline just
 

4295
01:21:02,080 --> 01:21:03,510
right at the end of trampoline just
before returning to user space this is

4296
01:21:03,510 --> 01:21:03,520
before returning to user space this is
 

4297
01:21:03,520 --> 01:21:06,310
before returning to user space this is
going to swap a0 and scratch

4298
01:21:06,310 --> 01:21:06,320
going to swap a0 and scratch
 

4299
01:21:06,320 --> 01:21:12,629
going to swap a0 and scratch
scratch indeed has

4300
01:21:12,629 --> 01:21:12,639

 

4301
01:21:12,639 --> 01:21:16,629

ah that's scratch

4302
01:21:16,629 --> 01:21:16,639

 

4303
01:21:16,639 --> 01:21:18,149

has two which is going to be the return

4304
01:21:18,149 --> 01:21:18,159
has two which is going to be the return
 

4305
01:21:18,159 --> 01:21:19,669
has two which is going to be the return
value a0

4306
01:21:19,669 --> 01:21:19,679
value a0
 

4307
01:21:19,679 --> 01:21:26,709
value a0
has this kernel pointer and it points to

4308
01:21:26,709 --> 01:21:26,719

 

4309
01:21:26,719 --> 01:21:28,149

points to the trap frame but after

4310
01:21:28,149 --> 01:21:28,159
points to the trap frame but after
 

4311
01:21:28,159 --> 01:21:30,070
points to the trap frame but after
executing the csrw

4312
01:21:30,070 --> 01:21:30,080
executing the csrw
 

4313
01:21:30,080 --> 01:21:32,229
executing the csrw
instruction to swap them hopefully we'll

4314
01:21:32,229 --> 01:21:32,239
instruction to swap them hopefully we'll
 

4315
01:21:32,239 --> 01:21:33,189
instruction to swap them hopefully we'll
see that

4316
01:21:33,189 --> 01:21:33,199
see that
 

4317
01:21:33,199 --> 01:21:36,870
see that
um a0 holds this return value of two

4318
01:21:36,870 --> 01:21:36,880
um a0 holds this return value of two
 

4319
01:21:36,880 --> 01:21:40,149
um a0 holds this return value of two
and s

4320
01:21:40,149 --> 01:21:40,159
and s
 

4321
01:21:40,159 --> 01:21:42,709
and s
scratch holds a pointer to the trap

4322
01:21:42,709 --> 01:21:42,719
scratch holds a pointer to the trap
 

4323
01:21:42,719 --> 01:21:44,229
scratch holds a pointer to the trap
frame which is

4324
01:21:44,229 --> 01:21:44,239
frame which is
 

4325
01:21:44,239 --> 01:21:47,430
frame which is
the second to last page in memory um

4326
01:21:47,430 --> 01:21:47,440
the second to last page in memory um
 

4327
01:21:47,440 --> 01:21:49,110
the second to last page in memory um
and that value is going to stay in

4328
01:21:49,110 --> 01:21:49,120
and that value is going to stay in
 

4329
01:21:49,120 --> 01:21:50,629
and that value is going to stay in
scratch until the user

4330
01:21:50,629 --> 01:21:50,639
scratch until the user
 

4331
01:21:50,639 --> 01:21:52,390
scratch until the user
program does another trap and at that

4332
01:21:52,390 --> 01:21:52,400
program does another trap and at that
 

4333
01:21:52,400 --> 01:21:54,709
program does another trap and at that
point the trap handling code that we

4334
01:21:54,709 --> 01:21:54,719
point the trap handling code that we
 

4335
01:21:54,719 --> 01:21:56,070
point the trap handling code that we
talked about before we'll

4336
01:21:56,070 --> 01:21:56,080
talked about before we'll
 

4337
01:21:56,080 --> 01:21:57,590
talked about before we'll
be able to use that scratch to get at

4338
01:21:57,590 --> 01:21:57,600
be able to use that scratch to get at
 

4339
01:21:57,600 --> 01:22:01,590
be able to use that scratch to get at
the trap frame all right we're still

4340
01:22:01,590 --> 01:22:01,600
the trap frame all right we're still
 

4341
01:22:01,600 --> 01:22:03,990
the trap frame all right we're still
in the kernel but this is our last

4342
01:22:03,990 --> 01:22:04,000
in the kernel but this is our last
 

4343
01:22:04,000 --> 01:22:06,550
in the kernel but this is our last
instruction in the kernel

4344
01:22:06,550 --> 01:22:06,560
instruction in the kernel
 

4345
01:22:06,560 --> 01:22:10,790
instruction in the kernel
and when i execute this s-ret it will uh

4346
01:22:10,790 --> 01:22:10,800
and when i execute this s-ret it will uh
 

4347
01:22:10,800 --> 01:22:14,149
and when i execute this s-ret it will uh
switch to user mode um before i do that

4348
01:22:14,149 --> 01:22:14,159
switch to user mode um before i do that
 

4349
01:22:14,159 --> 01:22:17,270
switch to user mode um before i do that
let's look at

4350
01:22:17,270 --> 01:22:17,280

 

4351
01:22:17,280 --> 01:22:19,750

it'll switch to user mode it'll copy

4352
01:22:19,750 --> 01:22:19,760
it'll switch to user mode it'll copy
 

4353
01:22:19,760 --> 01:22:22,950
it'll switch to user mode it'll copy
sepc to the pc because we're still

4354
01:22:22,950 --> 01:22:22,960
sepc to the pc because we're still
 

4355
01:22:22,960 --> 01:22:26,950
sepc to the pc because we're still
um

4356
01:22:26,950 --> 01:22:26,960

 

4357
01:22:26,960 --> 01:22:28,950

we're still executing with the pc that's

4358
01:22:28,950 --> 01:22:28,960
we're still executing with the pc that's
 

4359
01:22:28,960 --> 01:22:30,550
we're still executing with the pc that's
in the trampoline

4360
01:22:30,550 --> 01:22:30,560
in the trampoline
 

4361
01:22:30,560 --> 01:22:33,510
in the trampoline
so esret's gonna switch to user mode

4362
01:22:33,510 --> 01:22:33,520
so esret's gonna switch to user mode
 

4363
01:22:33,520 --> 01:22:34,790
so esret's gonna switch to user mode
copy scpc

4364
01:22:34,790 --> 01:22:34,800
copy scpc
 

4365
01:22:34,800 --> 01:22:36,630
copy scpc
to pc

4366
01:22:36,630 --> 01:22:36,640
to pc
 

4367
01:22:36,640 --> 01:22:37,830
to pc
[Music]

4368
01:22:37,830 --> 01:22:37,840
[Music]
 

4369
01:22:37,840 --> 01:22:40,629
[Music]
and then resume executing so i'm gonna

4370
01:22:40,629 --> 01:22:40,639
and then resume executing so i'm gonna
 

4371
01:22:40,639 --> 01:22:41,189
and then resume executing so i'm gonna
run the

4372
01:22:41,189 --> 01:22:41,199
run the
 

4373
01:22:41,199 --> 01:22:45,350
run the
sret boom um

4374
01:22:45,350 --> 01:22:45,360
sret boom um
 

4375
01:22:45,360 --> 01:22:48,629
sret boom um
now we're back at um

4376
01:22:48,629 --> 01:22:48,639
now we're back at um
 

4377
01:22:48,639 --> 01:22:51,110
now we're back at um
back at address zero x dea which is a

4378
01:22:51,110 --> 01:22:51,120
back at address zero x dea which is a
 

4379
01:22:51,120 --> 01:22:52,390
back at address zero x dea which is a
low address

4380
01:22:52,390 --> 01:22:52,400
low address
 

4381
01:22:52,400 --> 01:22:56,149
low address
likely to be user memory and it's the

4382
01:22:56,149 --> 01:22:56,159
likely to be user memory and it's the
 

4383
01:22:56,159 --> 01:22:59,430
likely to be user memory and it's the
look back at sh.asm and address

4384
01:22:59,430 --> 01:22:59,440
look back at sh.asm and address
 

4385
01:22:59,440 --> 01:23:03,990
look back at sh.asm and address
xerox dea

4386
01:23:03,990 --> 01:23:04,000

 

4387
01:23:04,000 --> 01:23:06,870

is indeed the address of the return

4388
01:23:06,870 --> 01:23:06,880
is indeed the address of the return
 

4389
01:23:06,880 --> 01:23:09,910
is indeed the address of the return
function at the end of write

4390
01:23:09,910 --> 01:23:09,920
function at the end of write
 

4391
01:23:09,920 --> 01:23:12,950
function at the end of write
and

4392
01:23:12,950 --> 01:23:12,960

 

4393
01:23:12,960 --> 01:23:14,790

a0 is this return value that was

4394
01:23:14,790 --> 01:23:14,800
a0 is this return value that was
 

4395
01:23:14,800 --> 01:23:16,629
a0 is this return value that was
supposed to be turning

4396
01:23:16,629 --> 01:23:16,639
supposed to be turning
 

4397
01:23:16,639 --> 01:23:18,950
supposed to be turning
so we're back in user space and we can

4398
01:23:18,950 --> 01:23:18,960
so we're back in user space and we can
 

4399
01:23:18,960 --> 01:23:19,990
so we're back in user space and we can
about to do the return

4400
01:23:19,990 --> 01:23:20,000
about to do the return
 

4401
01:23:20,000 --> 01:23:22,229
about to do the return
back to the shell from the right system

4402
01:23:22,229 --> 01:23:22,239
back to the shell from the right system
 

4403
01:23:22,239 --> 01:23:23,510
back to the shell from the right system
from the right library function that

4404
01:23:23,510 --> 01:23:23,520
from the right library function that
 

4405
01:23:23,520 --> 01:23:25,110
from the right library function that
made the system call

4406
01:23:25,110 --> 01:23:25,120
made the system call
 

4407
01:23:25,120 --> 01:23:28,790
made the system call
okay any questions

4408
01:23:28,790 --> 01:23:28,800

 

4409
01:23:28,800 --> 01:23:30,790

uh sorry can you repeat again what

4410
01:23:30,790 --> 01:23:30,800
uh sorry can you repeat again what
 

4411
01:23:30,800 --> 01:23:31,830
uh sorry can you repeat again what
happens with the

4412
01:23:31,830 --> 01:23:31,840
happens with the
 

4413
01:23:31,840 --> 01:23:37,669
happens with the
interrupt during s red

4414
01:23:37,669 --> 01:23:37,679

 

4415
01:23:37,679 --> 01:23:40,149

what happened with interrupts you said

4416
01:23:40,149 --> 01:23:40,159
what happened with interrupts you said
 

4417
01:23:40,159 --> 01:23:41,430
what happened with interrupts you said
you are turning them

4418
01:23:41,430 --> 01:23:41,440
you are turning them
 

4419
01:23:41,440 --> 01:23:44,070
you are turning them
off but then something else turns them

4420
01:23:44,070 --> 01:23:44,080
off but then something else turns them
 

4421
01:23:44,080 --> 01:23:46,830
off but then something else turns them
back on

4422
01:23:46,830 --> 01:23:46,840

 

4423
01:23:46,840 --> 01:23:50,310

s-rat um s-red enables interrupts

4424
01:23:50,310 --> 01:23:50,320
s-rat um s-red enables interrupts
 

4425
01:23:50,320 --> 01:23:52,950
s-rat um s-red enables interrupts
so this s-ret the very last instruction

4426
01:23:52,950 --> 01:23:52,960
so this s-ret the very last instruction
 

4427
01:23:52,960 --> 01:23:54,629
so this s-ret the very last instruction
that we're executing in supervisor mode

4428
01:23:54,629 --> 01:23:54,639
that we're executing in supervisor mode
 

4429
01:23:54,639 --> 01:23:56,149
that we're executing in supervisor mode
in the kernel

4430
01:23:56,149 --> 01:23:56,159
in the kernel
 

4431
01:23:56,159 --> 01:23:58,229
in the kernel
um i forgot to say that just now but as

4432
01:23:58,229 --> 01:23:58,239
um i forgot to say that just now but as
 

4433
01:23:58,239 --> 01:23:59,910
um i forgot to say that just now but as
well as setting the program counter

4434
01:23:59,910 --> 01:23:59,920
well as setting the program counter
 

4435
01:23:59,920 --> 01:24:00,629
well as setting the program counter
equal to the

4436
01:24:00,629 --> 01:24:00,639
equal to the
 

4437
01:24:00,639 --> 01:24:03,669
equal to the
scpc and switching to user mode s

4438
01:24:03,669 --> 01:24:03,679
scpc and switching to user mode s
 

4439
01:24:03,679 --> 01:24:07,910
scpc and switching to user mode s
red is going to re-enable interrupts

4440
01:24:07,910 --> 01:24:07,920
red is going to re-enable interrupts
 

4441
01:24:07,920 --> 01:24:10,390
red is going to re-enable interrupts
does that mean you know that's you know

4442
01:24:10,390 --> 01:24:10,400
does that mean you know that's you know
 

4443
01:24:10,400 --> 01:24:11,669
does that mean you know that's you know
user programs that may run for a long

4444
01:24:11,669 --> 01:24:11,679
user programs that may run for a long
 

4445
01:24:11,679 --> 01:24:13,110
user programs that may run for a long
time it'd be nice to be able to take

4446
01:24:13,110 --> 01:24:13,120
time it'd be nice to be able to take
 

4447
01:24:13,120 --> 01:24:15,830
time it'd be nice to be able to take
disk interrupts or whatever

4448
01:24:15,830 --> 01:24:15,840
disk interrupts or whatever
 

4449
01:24:15,840 --> 01:24:18,950
disk interrupts or whatever
user programs are running i see thank

4450
01:24:18,950 --> 01:24:18,960
user programs are running i see thank
 

4451
01:24:18,960 --> 01:24:20,790
user programs are running i see thank
you

4452
01:24:20,790 --> 01:24:20,800
you
 

4453
01:24:20,800 --> 01:24:28,070
you
other questions

4454
01:24:28,070 --> 01:24:28,080

 

4455
01:24:28,080 --> 01:24:31,510

okay to uh to wrap up the system calls

4456
01:24:31,510 --> 01:24:31,520
okay to uh to wrap up the system calls
 

4457
01:24:31,520 --> 01:24:33,030
okay to uh to wrap up the system calls
sort of look like function calls that

4458
01:24:33,030 --> 01:24:33,040
sort of look like function calls that
 

4459
01:24:33,040 --> 01:24:35,189
sort of look like function calls that
are kind of meant to be thought of a lot

4460
01:24:35,189 --> 01:24:35,199
are kind of meant to be thought of a lot
 

4461
01:24:35,199 --> 01:24:36,229
are kind of meant to be thought of a lot
like function calls

4462
01:24:36,229 --> 01:24:36,239
like function calls
 

4463
01:24:36,239 --> 01:24:39,189
like function calls
but um the user kernel transitions are

4464
01:24:39,189 --> 01:24:39,199
but um the user kernel transitions are
 

4465
01:24:39,199 --> 01:24:41,110
but um the user kernel transitions are
much more complex than

4466
01:24:41,110 --> 01:24:41,120
much more complex than
 

4467
01:24:41,120 --> 01:24:43,350
much more complex than
than function calls are a lot of the

4468
01:24:43,350 --> 01:24:43,360
than function calls are a lot of the
 

4469
01:24:43,360 --> 01:24:45,510
than function calls are a lot of the
complexities due to the requirement

4470
01:24:45,510 --> 01:24:45,520
complexities due to the requirement
 

4471
01:24:45,520 --> 01:24:47,189
complexities due to the requirement
for isolation the kernel just can't

4472
01:24:47,189 --> 01:24:47,199
for isolation the kernel just can't
 

4473
01:24:47,199 --> 01:24:49,270
for isolation the kernel just can't
trust anything in user space

4474
01:24:49,270 --> 01:24:49,280
trust anything in user space
 

4475
01:24:49,280 --> 01:24:52,070
trust anything in user space
and also the desire to have simple and

4476
01:24:52,070 --> 01:24:52,080
and also the desire to have simple and
 

4477
01:24:52,080 --> 01:24:54,950
and also the desire to have simple and
very fast hardware mechanisms so really

4478
01:24:54,950 --> 01:24:54,960
very fast hardware mechanisms so really
 

4479
01:24:54,960 --> 01:24:56,310
very fast hardware mechanisms so really
xp6 doesn't care that much about

4480
01:24:56,310 --> 01:24:56,320
xp6 doesn't care that much about
 

4481
01:24:56,320 --> 01:24:57,910
xp6 doesn't care that much about
performance but in general operating

4482
01:24:57,910 --> 01:24:57,920
performance but in general operating
 

4483
01:24:57,920 --> 01:24:59,590
performance but in general operating
system designers and the

4484
01:24:59,590 --> 01:24:59,600
system designers and the
 

4485
01:24:59,600 --> 01:25:02,629
system designers and the
cpu designers are very interested in the

4486
01:25:02,629 --> 01:25:02,639
cpu designers are very interested in the
 

4487
01:25:02,639 --> 01:25:04,870
cpu designers are very interested in the
sort of speed at which you can do the

4488
01:25:04,870 --> 01:25:04,880
sort of speed at which you can do the
 

4489
01:25:04,880 --> 01:25:07,990
sort of speed at which you can do the
efficiency of traps

4490
01:25:07,990 --> 01:25:08,000
efficiency of traps
 

4491
01:25:08,000 --> 01:25:09,830
efficiency of traps
xp6 does it you know does all these

4492
01:25:09,830 --> 01:25:09,840
xp6 does it you know does all these
 

4493
01:25:09,840 --> 01:25:11,270
xp6 does it you know does all these
things in a particular way there's

4494
01:25:11,270 --> 01:25:11,280
things in a particular way there's
 

4495
01:25:11,280 --> 01:25:13,750
things in a particular way there's
certainly other ways to do them a few

4496
01:25:13,750 --> 01:25:13,760
certainly other ways to do them a few
 

4497
01:25:13,760 --> 01:25:14,390
certainly other ways to do them a few
questions

4498
01:25:14,390 --> 01:25:14,400
questions
 

4499
01:25:14,400 --> 01:25:16,550
questions
a few design questions alternatives you

4500
01:25:16,550 --> 01:25:16,560
a few design questions alternatives you
 

4501
01:25:16,560 --> 01:25:18,950
a few design questions alternatives you
could think about

4502
01:25:18,950 --> 01:25:18,960
could think about
 

4503
01:25:18,960 --> 01:25:21,030
could think about
one is is can you think of ways to make

4504
01:25:21,030 --> 01:25:21,040
one is is can you think of ways to make
 

4505
01:25:21,040 --> 01:25:21,990
one is is can you think of ways to make
the

4506
01:25:21,990 --> 01:25:22,000
the
 

4507
01:25:22,000 --> 01:25:24,790
the
hardware or software aspects redesign

4508
01:25:24,790 --> 01:25:24,800
hardware or software aspects redesign
 

4509
01:25:24,800 --> 01:25:26,709
hardware or software aspects redesign
xv6 redesigned the risk five

4510
01:25:26,709 --> 01:25:26,719
xv6 redesigned the risk five
 

4511
01:25:26,719 --> 01:25:29,669
xv6 redesigned the risk five
to make this whole sequence simpler um

4512
01:25:29,669 --> 01:25:29,679
to make this whole sequence simpler um
 

4513
01:25:29,679 --> 01:25:31,350
to make this whole sequence simpler um
or could you think of ways to make the

4514
01:25:31,350 --> 01:25:31,360
or could you think of ways to make the
 

4515
01:25:31,360 --> 01:25:32,310
or could you think of ways to make the
whole sequence

4516
01:25:32,310 --> 01:25:32,320
whole sequence
 

4517
01:25:32,320 --> 01:25:34,550
whole sequence
faster and another sort of set of

4518
01:25:34,550 --> 01:25:34,560
faster and another sort of set of
 

4519
01:25:34,560 --> 01:25:37,830
faster and another sort of set of
questions to keep in the back your head

4520
01:25:37,830 --> 01:25:37,840
questions to keep in the back your head
 

4521
01:25:37,840 --> 01:25:41,110
questions to keep in the back your head
is whether or not malicious programs

4522
01:25:41,110 --> 01:25:41,120
is whether or not malicious programs
 

4523
01:25:41,120 --> 01:25:43,030
is whether or not malicious programs
could abuse any of these mechanisms

4524
01:25:43,030 --> 01:25:43,040
could abuse any of these mechanisms
 

4525
01:25:43,040 --> 01:25:47,990
could abuse any of these mechanisms
to break isolation

4526
01:25:47,990 --> 01:25:48,000
to break isolation
 

4527
01:25:48,000 --> 01:25:49,990
to break isolation
all right that is all i have to say for

4528
01:25:49,990 --> 01:25:50,000
all right that is all i have to say for
 

4529
01:25:50,000 --> 01:25:51,270
all right that is all i have to say for
this lecture i'm

4530
01:25:51,270 --> 01:25:51,280
this lecture i'm
 

4531
01:25:51,280 --> 01:25:54,629
this lecture i'm
happy to take questions

4532
01:25:54,629 --> 01:25:54,639
happy to take questions
 

4533
01:25:54,639 --> 01:25:56,709
happy to take questions
uh sorry i have another question please

4534
01:25:56,709 --> 01:25:56,719
uh sorry i have another question please
 

4535
01:25:56,719 --> 01:25:58,390
uh sorry i have another question please
um i saw that there is

4536
01:25:58,390 --> 01:25:58,400
um i saw that there is
 

4537
01:25:58,400 --> 01:26:01,750
um i saw that there is
a um u i e regis

4538
01:26:01,750 --> 01:26:01,760
a um u i e regis
 

4539
01:26:01,760 --> 01:26:05,189
a um u i e regis
or yeah i think register in status

4540
01:26:05,189 --> 01:26:05,199
or yeah i think register in status
 

4541
01:26:05,199 --> 01:26:08,310
or yeah i think register in status
but we don't use it we just use

4542
01:26:08,310 --> 01:26:08,320
but we don't use it we just use
 

4543
01:26:08,320 --> 01:26:11,030
but we don't use it we just use
s i e and we set it to false in user

4544
01:26:11,030 --> 01:26:11,040
s i e and we set it to false in user
 

4545
01:26:11,040 --> 01:26:13,030
s i e and we set it to false in user
space why couldn't we use

4546
01:26:13,030 --> 01:26:13,040
space why couldn't we use
 

4547
01:26:13,040 --> 01:26:17,110
space why couldn't we use
the ui gosh

4548
01:26:17,110 --> 01:26:17,120
the ui gosh
 

4549
01:26:17,120 --> 01:26:21,590
the ui gosh
the answer is going to be i don't know

4550
01:26:21,590 --> 01:26:21,600

 

4551
01:26:21,600 --> 01:26:22,010

um

4552
01:26:22,010 --> 01:26:22,020
um
 

4553
01:26:22,020 --> 01:26:24,709
um
[Music]

4554
01:26:24,709 --> 01:26:24,719
[Music]
 

4555
01:26:24,719 --> 01:26:27,910
[Music]
uh we're sp what we set is s what we

4556
01:26:27,910 --> 01:26:27,920
uh we're sp what we set is s what we
 

4557
01:26:27,920 --> 01:26:28,390
uh we're sp what we set is s what we
said is

4558
01:26:28,390 --> 01:26:28,400
said is
 

4559
01:26:28,400 --> 01:26:33,750
said is
spi we may actually end up setting

4560
01:26:33,750 --> 01:26:33,760
spi we may actually end up setting
 

4561
01:26:33,760 --> 01:26:36,470
spi we may actually end up setting
um i know nothing about uie i'm going to

4562
01:26:36,470 --> 01:26:36,480
um i know nothing about uie i'm going to
 

4563
01:26:36,480 --> 01:26:37,510
um i know nothing about uie i'm going to
guess

4564
01:26:37,510 --> 01:26:37,520
guess
 

4565
01:26:37,520 --> 01:26:39,590
guess
let me see i'm going to guess that what

4566
01:26:39,590 --> 01:26:39,600
let me see i'm going to guess that what
 

4567
01:26:39,600 --> 01:26:42,470
let me see i'm going to guess that what
actually happens here

4568
01:26:42,470 --> 01:26:42,480
actually happens here
 

4569
01:26:42,480 --> 01:26:48,310
actually happens here
i'm in this code where we're

4570
01:26:48,310 --> 01:26:48,320

 

4571
01:26:48,320 --> 01:26:51,270

okay so here we are in user trap red

4572
01:26:51,270 --> 01:26:51,280
okay so here we are in user trap red
 

4573
01:26:51,280 --> 01:26:53,229
okay so here we are in user trap red
we're returning or setting

4574
01:26:53,229 --> 01:26:53,239
we're returning or setting
 

4575
01:26:53,239 --> 01:26:56,149
we're returning or setting
s-p-i-e in the s-status

4576
01:26:56,149 --> 01:26:56,159
s-p-i-e in the s-status
 

4577
01:26:56,159 --> 01:27:00,070
s-p-i-e in the s-status
and i believe the s-red instruction will

4578
01:27:00,070 --> 01:27:00,080
and i believe the s-red instruction will
 

4579
01:27:00,080 --> 01:27:03,990
and i believe the s-red instruction will
copy this s-p-i-e and this is this

4580
01:27:03,990 --> 01:27:04,000
copy this s-p-i-e and this is this
 

4581
01:27:04,000 --> 01:27:05,510
copy this s-p-i-e and this is this
previous the name of this is the

4582
01:27:05,510 --> 01:27:05,520
previous the name of this is the
 

4583
01:27:05,520 --> 01:27:08,310
previous the name of this is the
supervisor previous interrupt enable

4584
01:27:08,310 --> 01:27:08,320
supervisor previous interrupt enable
 

4585
01:27:08,320 --> 01:27:11,350
supervisor previous interrupt enable
i suspect s copies that bit

4586
01:27:11,350 --> 01:27:11,360
i suspect s copies that bit
 

4587
01:27:11,360 --> 01:27:15,030
i suspect s copies that bit
into the uh

4588
01:27:15,030 --> 01:27:15,040

 

4589
01:27:15,040 --> 01:27:16,790

into whatever controls interrupts in

4590
01:27:16,790 --> 01:27:16,800
into whatever controls interrupts in
 

4591
01:27:16,800 --> 01:27:20,149
into whatever controls interrupts in
user mode which is possibly this ui

4592
01:27:20,149 --> 01:27:20,159
user mode which is possibly this ui
 

4593
01:27:20,159 --> 01:27:24,470
user mode which is possibly this ui
and s status how's that for a guess

4594
01:27:24,470 --> 01:27:24,480
and s status how's that for a guess
 

4595
01:27:24,480 --> 01:27:31,840
and s status how's that for a guess
i see thank you

