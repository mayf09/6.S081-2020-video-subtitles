1
00:00:00,080 --> 00:00:03,830

anyone hear me can hear you

2
00:00:03,830 --> 00:00:03,840
anyone hear me can hear you
 

3
00:00:03,840 --> 00:00:07,430
anyone hear me can hear you
thank you all right um i'd like to spend

4
00:00:07,430 --> 00:00:07,440
thank you all right um i'd like to spend
 

5
00:00:07,440 --> 00:00:08,790
thank you all right um i'd like to spend
today's lecture

6
00:00:08,790 --> 00:00:08,800
today's lecture
 

7
00:00:08,800 --> 00:00:11,669
today's lecture
talking about um threads and how xv6

8
00:00:11,669 --> 00:00:11,679
talking about um threads and how xv6
 

9
00:00:11,679 --> 00:00:13,270
talking about um threads and how xv6
does thread switching

10
00:00:13,270 --> 00:00:13,280
does thread switching
 

11
00:00:13,280 --> 00:00:15,589
does thread switching
this is a sort of one of our under the

12
00:00:15,589 --> 00:00:15,599
this is a sort of one of our under the
 

13
00:00:15,599 --> 00:00:16,630
this is a sort of one of our under the
hood um

14
00:00:16,630 --> 00:00:16,640
hood um
 

15
00:00:16,640 --> 00:00:19,429
hood um
lectures about x36 we've had lectures

16
00:00:19,429 --> 00:00:19,439
lectures about x36 we've had lectures
 

17
00:00:19,439 --> 00:00:21,510
lectures about x36 we've had lectures
before about how system calls interrupts

18
00:00:21,510 --> 00:00:21,520
before about how system calls interrupts
 

19
00:00:21,520 --> 00:00:24,550
before about how system calls interrupts
page tables and locks work um today

20
00:00:24,550 --> 00:00:24,560
page tables and locks work um today
 

21
00:00:24,560 --> 00:00:26,550
page tables and locks work um today
we're going to talk about

22
00:00:26,550 --> 00:00:26,560
we're going to talk about
 

23
00:00:26,560 --> 00:00:28,390
we're going to talk about
how it is that xv6 switches among

24
00:00:28,390 --> 00:00:28,400
how it is that xv6 switches among
 

25
00:00:28,400 --> 00:00:31,990
how it is that xv6 switches among
different processes now

26
00:00:31,990 --> 00:00:32,000

 

27
00:00:32,000 --> 00:00:33,430

the reason for this the highest level

28
00:00:33,430 --> 00:00:33,440
the reason for this the highest level
 

29
00:00:33,440 --> 00:00:34,870
the reason for this the highest level
reason for this is that people like

30
00:00:34,870 --> 00:00:34,880
reason for this is that people like
 

31
00:00:34,880 --> 00:00:36,389
reason for this is that people like
their computer to be able to do more

32
00:00:36,389 --> 00:00:36,399
their computer to be able to do more
 

33
00:00:36,399 --> 00:00:37,990
their computer to be able to do more
than one task

34
00:00:37,990 --> 00:00:38,000
than one task
 

35
00:00:38,000 --> 00:00:40,630
than one task
at the same time so the reason might be

36
00:00:40,630 --> 00:00:40,640
at the same time so the reason might be
 

37
00:00:40,640 --> 00:00:41,750
at the same time so the reason might be
that you're supporting time

38
00:00:41,750 --> 00:00:41,760
that you're supporting time
 

39
00:00:41,760 --> 00:00:44,389
that you're supporting time
sharing like a female allows many users

40
00:00:44,389 --> 00:00:44,399
sharing like a female allows many users
 

41
00:00:44,399 --> 00:00:45,750
sharing like a female allows many users
to log in at the same time and then you

42
00:00:45,750 --> 00:00:45,760
to log in at the same time and then you
 

43
00:00:45,760 --> 00:00:47,510
to log in at the same time and then you
know they can all run processes

44
00:00:47,510 --> 00:00:47,520
know they can all run processes
 

45
00:00:47,520 --> 00:00:49,590
know they can all run processes
um or even on a single user machine or

46
00:00:49,590 --> 00:00:49,600
um or even on a single user machine or
 

47
00:00:49,600 --> 00:00:50,950
um or even on a single user machine or
even your iphone

48
00:00:50,950 --> 00:00:50,960
even your iphone
 

49
00:00:50,960 --> 00:00:53,350
even your iphone
um you may run many different processes

50
00:00:53,350 --> 00:00:53,360
um you may run many different processes
 

51
00:00:53,360 --> 00:00:55,110
um you may run many different processes
and expect the computer to

52
00:00:55,110 --> 00:00:55,120
and expect the computer to
 

53
00:00:55,120 --> 00:00:56,790
and expect the computer to
to do all the things you ask of it not

54
00:00:56,790 --> 00:00:56,800
to do all the things you ask of it not
 

55
00:00:56,800 --> 00:01:00,229
to do all the things you ask of it not
just one thing

56
00:01:00,229 --> 00:01:00,239

 

57
00:01:00,239 --> 00:01:02,470

another reason that people like to

58
00:01:02,470 --> 00:01:02,480
another reason that people like to
 

59
00:01:02,480 --> 00:01:03,670
another reason that people like to
support multiple tasks

60
00:01:03,670 --> 00:01:03,680
support multiple tasks
 

61
00:01:03,680 --> 00:01:06,630
support multiple tasks
is because it can ease program structure

62
00:01:06,630 --> 00:01:06,640
is because it can ease program structure
 

63
00:01:06,640 --> 00:01:09,429
is because it can ease program structure
threads in particular today's topic

64
00:01:09,429 --> 00:01:09,439
threads in particular today's topic
 

65
00:01:09,439 --> 00:01:11,429
threads in particular today's topic
are sometimes used as a way to help

66
00:01:11,429 --> 00:01:11,439
are sometimes used as a way to help
 

67
00:01:11,439 --> 00:01:13,750
are sometimes used as a way to help
people to help programmers

68
00:01:13,750 --> 00:01:13,760
people to help programmers
 

69
00:01:13,760 --> 00:01:15,830
people to help programmers
put together a program in a sort of

70
00:01:15,830 --> 00:01:15,840
put together a program in a sort of
 

71
00:01:15,840 --> 00:01:18,310
put together a program in a sort of
simple elegant way to reduce complexity

72
00:01:18,310 --> 00:01:18,320
simple elegant way to reduce complexity
 

73
00:01:18,320 --> 00:01:19,830
simple elegant way to reduce complexity
and you actually saw an example of this

74
00:01:19,830 --> 00:01:19,840
and you actually saw an example of this
 

75
00:01:19,840 --> 00:01:21,590
and you actually saw an example of this
in the first lab with the prime number

76
00:01:21,590 --> 00:01:21,600
in the first lab with the prime number
 

77
00:01:21,600 --> 00:01:23,109
in the first lab with the prime number
sieve which

78
00:01:23,109 --> 00:01:23,119
sieve which
 

79
00:01:23,119 --> 00:01:24,710
sieve which
didn't use threads exactly but used

80
00:01:24,710 --> 00:01:24,720
didn't use threads exactly but used
 

81
00:01:24,720 --> 00:01:26,870
didn't use threads exactly but used
multiple processes in order to help

82
00:01:26,870 --> 00:01:26,880
multiple processes in order to help
 

83
00:01:26,880 --> 00:01:30,149
multiple processes in order to help
structure this your prime numbers

84
00:01:30,149 --> 00:01:30,159
structure this your prime numbers
 

85
00:01:30,159 --> 00:01:31,749
structure this your prime numbers
software and arguably it's sort of a

86
00:01:31,749 --> 00:01:31,759
software and arguably it's sort of a
 

87
00:01:31,759 --> 00:01:34,550
software and arguably it's sort of a
more convenient or elegant or simpler

88
00:01:34,550 --> 00:01:34,560
more convenient or elegant or simpler
 

89
00:01:34,560 --> 00:01:35,830
more convenient or elegant or simpler
way to

90
00:01:35,830 --> 00:01:35,840
way to
 

91
00:01:35,840 --> 00:01:38,870
way to
write that software and a final reason

92
00:01:38,870 --> 00:01:38,880
write that software and a final reason
 

93
00:01:38,880 --> 00:01:39,670
write that software and a final reason
why people use

94
00:01:39,670 --> 00:01:39,680
why people use
 

95
00:01:39,680 --> 00:01:43,109
why people use
threads is to get parallel speed up from

96
00:01:43,109 --> 00:01:43,119
threads is to get parallel speed up from
 

97
00:01:43,119 --> 00:01:45,350
threads is to get parallel speed up from
multi-core machines

98
00:01:45,350 --> 00:01:45,360
multi-core machines
 

99
00:01:45,360 --> 00:01:47,990
multi-core machines
so it's common to break up your program

100
00:01:47,990 --> 00:01:48,000
so it's common to break up your program
 

101
00:01:48,000 --> 00:01:49,910
so it's common to break up your program
in a way that

102
00:01:49,910 --> 00:01:49,920
in a way that
 

103
00:01:49,920 --> 00:01:52,710
in a way that
using threads to allow different parts

104
00:01:52,710 --> 00:01:52,720
using threads to allow different parts
 

105
00:01:52,720 --> 00:01:53,990
using threads to allow different parts
of the same program to run

106
00:01:53,990 --> 00:01:54,000
of the same program to run
 

107
00:01:54,000 --> 00:01:55,830
of the same program to run
on different cores and you know if you

108
00:01:55,830 --> 00:01:55,840
on different cores and you know if you
 

109
00:01:55,840 --> 00:01:58,310
on different cores and you know if you
can maybe if you're lucky if you can

110
00:01:58,310 --> 00:01:58,320
can maybe if you're lucky if you can
 

111
00:01:58,320 --> 00:02:00,310
can maybe if you're lucky if you can
split your program up to run on four

112
00:02:00,310 --> 00:02:00,320
split your program up to run on four
 

113
00:02:00,320 --> 00:02:01,749
split your program up to run on four
threads on four cores

114
00:02:01,749 --> 00:02:01,759
threads on four cores
 

115
00:02:01,759 --> 00:02:03,190
threads on four cores
you might be able to get a factor of

116
00:02:03,190 --> 00:02:03,200
you might be able to get a factor of
 

117
00:02:03,200 --> 00:02:06,709
you might be able to get a factor of
four speed up and how fast it runs

118
00:02:06,709 --> 00:02:06,719
four speed up and how fast it runs
 

119
00:02:06,719 --> 00:02:08,790
four speed up and how fast it runs
and indeed you can view the xv6 kernel

120
00:02:08,790 --> 00:02:08,800
and indeed you can view the xv6 kernel
 

121
00:02:08,800 --> 00:02:09,990
and indeed you can view the xv6 kernel
as a

122
00:02:09,990 --> 00:02:10,000
as a
 

123
00:02:10,000 --> 00:02:13,990
as a
multi-core parallel program so

124
00:02:13,990 --> 00:02:14,000
multi-core parallel program so
 

125
00:02:14,000 --> 00:02:17,110
multi-core parallel program so
what threads are is an abstraction

126
00:02:17,110 --> 00:02:17,120
what threads are is an abstraction
 

127
00:02:17,120 --> 00:02:19,750
what threads are is an abstraction
to simplify programming uh when you have

128
00:02:19,750 --> 00:02:19,760
to simplify programming uh when you have
 

129
00:02:19,760 --> 00:02:21,830
to simplify programming uh when you have
many tasks when you want to juggle many

130
00:02:21,830 --> 00:02:21,840
many tasks when you want to juggle many
 

131
00:02:21,840 --> 00:02:22,630
many tasks when you want to juggle many
tasks

132
00:02:22,630 --> 00:02:22,640
tasks
 

133
00:02:22,640 --> 00:02:25,350
tasks
so what a thread is is a you can think

134
00:02:25,350 --> 00:02:25,360
so what a thread is is a you can think
 

135
00:02:25,360 --> 00:02:26,949
so what a thread is is a you can think
of a thread as just being

136
00:02:26,949 --> 00:02:26,959
of a thread as just being
 

137
00:02:26,959 --> 00:02:29,270
of a thread as just being
a single serial execution if you just

138
00:02:29,270 --> 00:02:29,280
a single serial execution if you just
 

139
00:02:29,280 --> 00:02:30,630
a single serial execution if you just
write a program that does one thing

140
00:02:30,630 --> 00:02:30,640
write a program that does one thing
 

141
00:02:30,640 --> 00:02:33,670
write a program that does one thing
after another and you run that program

142
00:02:33,670 --> 00:02:33,680
after another and you run that program
 

143
00:02:33,680 --> 00:02:35,190
after another and you run that program
that you know you can view the program

144
00:02:35,190 --> 00:02:35,200
that you know you can view the program
 

145
00:02:35,200 --> 00:02:38,390
that you know you can view the program
as a sort of single thread of control

146
00:02:38,390 --> 00:02:38,400
as a sort of single thread of control
 

147
00:02:38,400 --> 00:02:44,070
as a sort of single thread of control
so um and this is a loose definition

148
00:02:44,070 --> 00:02:44,080

 

149
00:02:44,080 --> 00:02:45,990

because there's many different sort of

150
00:02:45,990 --> 00:02:46,000
because there's many different sort of
 

151
00:02:46,000 --> 00:02:47,750
because there's many different sort of
flavors of what people mean by threads

152
00:02:47,750 --> 00:02:47,760
flavors of what people mean by threads
 

153
00:02:47,760 --> 00:02:51,430
flavors of what people mean by threads
but we'll say it's one

154
00:02:51,430 --> 00:02:51,440
but we'll say it's one
 

155
00:02:51,440 --> 00:02:54,790
but we'll say it's one
serial execution so it's what you get if

156
00:02:54,790 --> 00:02:54,800
serial execution so it's what you get if
 

157
00:02:54,800 --> 00:02:55,509
serial execution so it's what you get if
you

158
00:02:55,509 --> 00:02:55,519
you
 

159
00:02:55,519 --> 00:02:59,670
you
um fire up one cpu and have it you know

160
00:02:59,670 --> 00:02:59,680
um fire up one cpu and have it you know
 

161
00:02:59,680 --> 00:03:01,110
um fire up one cpu and have it you know
just execute one instruction after

162
00:03:01,110 --> 00:03:01,120
just execute one instruction after
 

163
00:03:01,120 --> 00:03:05,509
just execute one instruction after
another in the ordinary way

164
00:03:05,509 --> 00:03:05,519
another in the ordinary way
 

165
00:03:05,519 --> 00:03:07,110
another in the ordinary way
we often talk about a thread having

166
00:03:07,110 --> 00:03:07,120
we often talk about a thread having
 

167
00:03:07,120 --> 00:03:08,710
we often talk about a thread having
state because it's going to turn out

168
00:03:08,710 --> 00:03:08,720
state because it's going to turn out
 

169
00:03:08,720 --> 00:03:10,070
state because it's going to turn out
we're going to want to save away a

170
00:03:10,070 --> 00:03:10,080
we're going to want to save away a
 

171
00:03:10,080 --> 00:03:12,949
we're going to want to save away a
thread state and restore it later

172
00:03:12,949 --> 00:03:12,959
thread state and restore it later
 

173
00:03:12,959 --> 00:03:15,030
thread state and restore it later
and so the right way to think about a

174
00:03:15,030 --> 00:03:15,040
and so the right way to think about a
 

175
00:03:15,040 --> 00:03:17,030
and so the right way to think about a
threat state for the most part

176
00:03:17,030 --> 00:03:17,040
threat state for the most part
 

177
00:03:17,040 --> 00:03:19,110
threat state for the most part
the most important part perhaps the

178
00:03:19,110 --> 00:03:19,120
the most important part perhaps the
 

179
00:03:19,120 --> 00:03:21,509
the most important part perhaps the
thread state is its program counter

180
00:03:21,509 --> 00:03:21,519
thread state is its program counter
 

181
00:03:21,519 --> 00:03:23,350
thread state is its program counter
because it's an execution we care a lot

182
00:03:23,350 --> 00:03:23,360
because it's an execution we care a lot
 

183
00:03:23,360 --> 00:03:25,670
because it's an execution we care a lot
about where is it in its execution

184
00:03:25,670 --> 00:03:25,680
about where is it in its execution
 

185
00:03:25,680 --> 00:03:27,190
about where is it in its execution
and what address is it executing

186
00:03:27,190 --> 00:03:27,200
and what address is it executing
 

187
00:03:27,200 --> 00:03:28,949
and what address is it executing
instructions

188
00:03:28,949 --> 00:03:28,959
instructions
 

189
00:03:28,959 --> 00:03:31,670
instructions
but also we care about the rest of the

190
00:03:31,670 --> 00:03:31,680
but also we care about the rest of the
 

191
00:03:31,680 --> 00:03:33,509
but also we care about the rest of the
microprocessor state that's required to

192
00:03:33,509 --> 00:03:33,519
microprocessor state that's required to
 

193
00:03:33,519 --> 00:03:35,110
microprocessor state that's required to
support this execution

194
00:03:35,110 --> 00:03:35,120
support this execution
 

195
00:03:35,120 --> 00:03:38,390
support this execution
and so that means it's um

196
00:03:38,390 --> 00:03:38,400
and so that means it's um
 

197
00:03:38,400 --> 00:03:40,070
and so that means it's um
the state of a threat includes the

198
00:03:40,070 --> 00:03:40,080
the state of a threat includes the
 

199
00:03:40,080 --> 00:03:42,229
the state of a threat includes the
registers that the compiler uses to hold

200
00:03:42,229 --> 00:03:42,239
registers that the compiler uses to hold
 

201
00:03:42,239 --> 00:03:43,350
registers that the compiler uses to hold
variables

202
00:03:43,350 --> 00:03:43,360
variables
 

203
00:03:43,360 --> 00:03:45,430
variables
and also because the just the way the

204
00:03:45,430 --> 00:03:45,440
and also because the just the way the
 

205
00:03:45,440 --> 00:03:47,270
and also because the just the way the
compiler generates code

206
00:03:47,270 --> 00:03:47,280
compiler generates code
 

207
00:03:47,280 --> 00:03:50,949
compiler generates code
a thread state includes a stack so

208
00:03:50,949 --> 00:03:50,959
a thread state includes a stack so
 

209
00:03:50,959 --> 00:03:53,110
a thread state includes a stack so
typically each thread has its own stack

210
00:03:53,110 --> 00:03:53,120
typically each thread has its own stack
 

211
00:03:53,120 --> 00:03:54,710
typically each thread has its own stack
dedicated to executing that thread and

212
00:03:54,710 --> 00:03:54,720
dedicated to executing that thread and
 

213
00:03:54,720 --> 00:03:56,229
dedicated to executing that thread and
the stack records

214
00:03:56,229 --> 00:03:56,239
the stack records
 

215
00:03:56,239 --> 00:04:01,350
the stack records
the record of function calls uh that the

216
00:04:01,350 --> 00:04:01,360
the record of function calls uh that the
 

217
00:04:01,360 --> 00:04:02,630
the record of function calls uh that the
reflect the current point in the

218
00:04:02,630 --> 00:04:02,640
reflect the current point in the
 

219
00:04:02,640 --> 00:04:05,110
reflect the current point in the
execution of of that thread

220
00:04:05,110 --> 00:04:05,120
execution of of that thread
 

221
00:04:05,120 --> 00:04:07,670
execution of of that thread
um and so what a threading system xv6

222
00:04:07,670 --> 00:04:07,680
um and so what a threading system xv6
 

223
00:04:07,680 --> 00:04:08,630
um and so what a threading system xv6
includes

224
00:04:08,630 --> 00:04:08,640
includes
 

225
00:04:08,640 --> 00:04:10,229
includes
you know a threading system inside it

226
00:04:10,229 --> 00:04:10,239
you know a threading system inside it
 

227
00:04:10,239 --> 00:04:11,990
you know a threading system inside it
what a threading system does is

228
00:04:11,990 --> 00:04:12,000
what a threading system does is
 

229
00:04:12,000 --> 00:04:15,509
what a threading system does is
manages this interleave automate the

230
00:04:15,509 --> 00:04:15,519
manages this interleave automate the
 

231
00:04:15,519 --> 00:04:16,550
manages this interleave automate the
interleaving

232
00:04:16,550 --> 00:04:16,560
interleaving
 

233
00:04:16,560 --> 00:04:19,110
interleaving
of multiple threads we'd like to be able

234
00:04:19,110 --> 00:04:19,120
of multiple threads we'd like to be able
 

235
00:04:19,120 --> 00:04:20,150
of multiple threads we'd like to be able
to fire up

236
00:04:20,150 --> 00:04:20,160
to fire up
 

237
00:04:20,160 --> 00:04:22,710
to fire up
two or four or 100 or a thousand threads

238
00:04:22,710 --> 00:04:22,720
two or four or 100 or a thousand threads
 

239
00:04:22,720 --> 00:04:23,430
two or four or 100 or a thousand threads
and have

240
00:04:23,430 --> 00:04:23,440
and have
 

241
00:04:23,440 --> 00:04:27,350
and have
the threading system figure out how to

242
00:04:27,350 --> 00:04:27,360
the threading system figure out how to
 

243
00:04:27,360 --> 00:04:28,790
the threading system figure out how to
juggle all those threads and cause them

244
00:04:28,790 --> 00:04:28,800
juggle all those threads and cause them
 

245
00:04:28,800 --> 00:04:33,670
juggle all those threads and cause them
all to make progress and all to execute

246
00:04:33,670 --> 00:04:33,680

 

247
00:04:33,680 --> 00:04:36,790

and there's really two main strategies

248
00:04:36,790 --> 00:04:36,800
and there's really two main strategies
 

249
00:04:36,800 --> 00:04:39,749
and there's really two main strategies
so we want to interleave

250
00:04:39,749 --> 00:04:39,759
so we want to interleave
 

251
00:04:39,759 --> 00:04:43,350
so we want to interleave
this is going to be a big topic here is

252
00:04:43,350 --> 00:04:43,360
this is going to be a big topic here is
 

253
00:04:43,360 --> 00:04:45,670
this is going to be a big topic here is
how to interleave threads

254
00:04:45,670 --> 00:04:45,680
how to interleave threads
 

255
00:04:45,680 --> 00:04:48,870
how to interleave threads
many threads one way to enter these

256
00:04:48,870 --> 00:04:48,880
many threads one way to enter these
 

257
00:04:48,880 --> 00:04:50,230
many threads one way to enter these
execution of many threads is to have

258
00:04:50,230 --> 00:04:50,240
execution of many threads is to have
 

259
00:04:50,240 --> 00:04:55,030
execution of many threads is to have
multiple cpus

260
00:04:55,030 --> 00:04:55,040

 

261
00:04:55,040 --> 00:04:58,469

maybe as on a multi-core processor

262
00:04:58,469 --> 00:04:58,479
maybe as on a multi-core processor
 

263
00:04:58,479 --> 00:05:00,629
maybe as on a multi-core processor
and then each cpu can run its own thread

264
00:05:00,629 --> 00:05:00,639
and then each cpu can run its own thread
 

265
00:05:00,639 --> 00:05:02,310
and then each cpu can run its own thread
so if you have four cpus

266
00:05:02,310 --> 00:05:02,320
so if you have four cpus
 

267
00:05:02,320 --> 00:05:05,029
so if you have four cpus
then an obvious way to run sorry four

268
00:05:05,029 --> 00:05:05,039
then an obvious way to run sorry four
 

269
00:05:05,039 --> 00:05:07,029
then an obvious way to run sorry four
threads is to run one thread per cpu and

270
00:05:07,029 --> 00:05:07,039
threads is to run one thread per cpu and
 

271
00:05:07,039 --> 00:05:08,870
threads is to run one thread per cpu and
then each thread automatically gets its

272
00:05:08,870 --> 00:05:08,880
then each thread automatically gets its
 

273
00:05:08,880 --> 00:05:09,590
then each thread automatically gets its
own

274
00:05:09,590 --> 00:05:09,600
own
 

275
00:05:09,600 --> 00:05:11,510
own
program counter and registers that is

276
00:05:11,510 --> 00:05:11,520
program counter and registers that is
 

277
00:05:11,520 --> 00:05:12,790
program counter and registers that is
the program counter and registers

278
00:05:12,790 --> 00:05:12,800
the program counter and registers
 

279
00:05:12,800 --> 00:05:14,230
the program counter and registers
associated with the

280
00:05:14,230 --> 00:05:14,240
associated with the
 

281
00:05:14,240 --> 00:05:16,310
associated with the
cpu is running on but if you have four

282
00:05:16,310 --> 00:05:16,320
cpu is running on but if you have four
 

283
00:05:16,320 --> 00:05:18,790
cpu is running on but if you have four
cpus and you have a thousand threads

284
00:05:18,790 --> 00:05:18,800
cpus and you have a thousand threads
 

285
00:05:18,800 --> 00:05:21,830
cpus and you have a thousand threads
then um

286
00:05:21,830 --> 00:05:21,840

 

287
00:05:21,840 --> 00:05:24,390

you know how using one corporate thread

288
00:05:24,390 --> 00:05:24,400
you know how using one corporate thread
 

289
00:05:24,400 --> 00:05:25,189
you know how using one corporate thread
is not going to be

290
00:05:25,189 --> 00:05:25,199
is not going to be
 

291
00:05:25,199 --> 00:05:27,670
is not going to be
enough of an answer and so so the other

292
00:05:27,670 --> 00:05:27,680
enough of an answer and so so the other
 

293
00:05:27,680 --> 00:05:28,310
enough of an answer and so so the other
main

294
00:05:28,310 --> 00:05:28,320
main
 

295
00:05:28,320 --> 00:05:31,830
main
strategy that we'll see indeed the

296
00:05:31,830 --> 00:05:31,840
strategy that we'll see indeed the
 

297
00:05:31,840 --> 00:05:35,029
strategy that we'll see indeed the
topic of most of this lecture is how

298
00:05:35,029 --> 00:05:35,039
topic of most of this lecture is how
 

299
00:05:35,039 --> 00:05:38,390
topic of most of this lecture is how
each cpu is going to switch

300
00:05:38,390 --> 00:05:38,400
each cpu is going to switch
 

301
00:05:38,400 --> 00:05:41,830
each cpu is going to switch
among different um threads so if i have

302
00:05:41,830 --> 00:05:41,840
among different um threads so if i have
 

303
00:05:41,840 --> 00:05:43,909
among different um threads so if i have
one cpu and a thousand threads

304
00:05:43,909 --> 00:05:43,919
one cpu and a thousand threads
 

305
00:05:43,919 --> 00:05:45,270
one cpu and a thousand threads
we're going to we're going to see how

306
00:05:45,270 --> 00:05:45,280
we're going to we're going to see how
 

307
00:05:45,280 --> 00:05:47,909
we're going to we're going to see how
xv6 builds a switching system

308
00:05:47,909 --> 00:05:47,919
xv6 builds a switching system
 

309
00:05:47,919 --> 00:05:49,830
xv6 builds a switching system
that allows xv6 to run one thread for a

310
00:05:49,830 --> 00:05:49,840
that allows xv6 to run one thread for a
 

311
00:05:49,840 --> 00:05:51,270
that allows xv6 to run one thread for a
while and then switch

312
00:05:51,270 --> 00:05:51,280
while and then switch
 

313
00:05:51,280 --> 00:05:53,350
while and then switch
and set aside and save the state of that

314
00:05:53,350 --> 00:05:53,360
and set aside and save the state of that
 

315
00:05:53,360 --> 00:05:55,510
and set aside and save the state of that
one thread and switch to executing a

316
00:05:55,510 --> 00:05:55,520
one thread and switch to executing a
 

317
00:05:55,520 --> 00:05:56,790
one thread and switch to executing a
second thread for a while and then the

318
00:05:56,790 --> 00:05:56,800
second thread for a while and then the
 

319
00:05:56,800 --> 00:05:58,550
second thread for a while and then the
third thread and so forth until it's

320
00:05:58,550 --> 00:05:58,560
third thread and so forth until it's
 

321
00:05:58,560 --> 00:06:00,070
third thread and so forth until it's
executed a little bit of each thread and

322
00:06:00,070 --> 00:06:00,080
executed a little bit of each thread and
 

323
00:06:00,080 --> 00:06:01,670
executed a little bit of each thread and
then go back and

324
00:06:01,670 --> 00:06:01,680
then go back and
 

325
00:06:01,680 --> 00:06:03,749
then go back and
execute more of the of the first thread

326
00:06:03,749 --> 00:06:03,759
execute more of the of the first thread
 

327
00:06:03,759 --> 00:06:06,070
execute more of the of the first thread
and so on

328
00:06:06,070 --> 00:06:06,080
and so on
 

329
00:06:06,080 --> 00:06:08,309
and so on
and indeed with xv6 like most operating

330
00:06:08,309 --> 00:06:08,319
and indeed with xv6 like most operating
 

331
00:06:08,319 --> 00:06:10,629
and indeed with xv6 like most operating
system combines the sex v6

332
00:06:10,629 --> 00:06:10,639
system combines the sex v6
 

333
00:06:10,639 --> 00:06:12,950
system combines the sex v6
will run threads on all the cores that

334
00:06:12,950 --> 00:06:12,960
will run threads on all the cores that
 

335
00:06:12,960 --> 00:06:14,550
will run threads on all the cores that
are available and each core will

336
00:06:14,550 --> 00:06:14,560
are available and each core will
 

337
00:06:14,560 --> 00:06:17,350
are available and each core will
switch among threads because there's

338
00:06:17,350 --> 00:06:17,360
switch among threads because there's
 

339
00:06:17,360 --> 00:06:17,990
switch among threads because there's
typical

340
00:06:17,990 --> 00:06:18,000
typical
 

341
00:06:18,000 --> 00:06:19,830
typical
typically although not always there's

342
00:06:19,830 --> 00:06:19,840
typically although not always there's
 

343
00:06:19,840 --> 00:06:21,510
typically although not always there's
typically many more threats than there

344
00:06:21,510 --> 00:06:21,520
typically many more threats than there
 

345
00:06:21,520 --> 00:06:22,150
typically many more threats than there
are

346
00:06:22,150 --> 00:06:22,160
are
 

347
00:06:22,160 --> 00:06:25,430
are
cpus

348
00:06:25,430 --> 00:06:25,440

 

349
00:06:25,440 --> 00:06:29,189

one of the many ways in which

350
00:06:29,189 --> 00:06:29,199
one of the many ways in which
 

351
00:06:29,199 --> 00:06:31,909
one of the many ways in which
different threading systems or instances

352
00:06:31,909 --> 00:06:31,919
different threading systems or instances
 

353
00:06:31,919 --> 00:06:33,029
different threading systems or instances
of threading systems

354
00:06:33,029 --> 00:06:33,039
of threading systems
 

355
00:06:33,039 --> 00:06:34,950
of threading systems
differ is in whether or not they share

356
00:06:34,950 --> 00:06:34,960
differ is in whether or not they share
 

357
00:06:34,960 --> 00:06:36,950
differ is in whether or not they share
memory

358
00:06:36,950 --> 00:06:36,960
memory
 

359
00:06:36,960 --> 00:06:42,790
memory
so this is a important

360
00:06:42,790 --> 00:06:42,800

 

361
00:06:42,800 --> 00:06:46,629

point one possibility is that

362
00:06:46,629 --> 00:06:46,639
point one possibility is that
 

363
00:06:46,639 --> 00:06:48,550
point one possibility is that
you could have a single address space

364
00:06:48,550 --> 00:06:48,560
you could have a single address space
 

365
00:06:48,560 --> 00:06:50,230
you could have a single address space
with many threads executing in that

366
00:06:50,230 --> 00:06:50,240
with many threads executing in that
 

367
00:06:50,240 --> 00:06:51,670
with many threads executing in that
address space and then they see each

368
00:06:51,670 --> 00:06:51,680
address space and then they see each
 

369
00:06:51,680 --> 00:06:52,950
address space and then they see each
other's changes

370
00:06:52,950 --> 00:06:52,960
other's changes
 

371
00:06:52,960 --> 00:06:55,350
other's changes
if one of the threads sharing some

372
00:06:55,350 --> 00:06:55,360
if one of the threads sharing some
 

373
00:06:55,360 --> 00:06:57,350
if one of the threads sharing some
memory modifies a variable then

374
00:06:57,350 --> 00:06:57,360
memory modifies a variable then
 

375
00:06:57,360 --> 00:06:58,550
memory modifies a variable then
the other thread sharing that memory

376
00:06:58,550 --> 00:06:58,560
the other thread sharing that memory
 

377
00:06:58,560 --> 00:07:01,350
the other thread sharing that memory
will see the modification

378
00:07:01,350 --> 00:07:01,360
will see the modification
 

379
00:07:01,360 --> 00:07:02,870
will see the modification
and so it's in the context of threads

380
00:07:02,870 --> 00:07:02,880
and so it's in the context of threads
 

381
00:07:02,880 --> 00:07:04,790
and so it's in the context of threads
running and sharing memory that we need

382
00:07:04,790 --> 00:07:04,800
running and sharing memory that we need
 

383
00:07:04,800 --> 00:07:05,270
running and sharing memory that we need
things like

384
00:07:05,270 --> 00:07:05,280
things like
 

385
00:07:05,280 --> 00:07:07,909
things like
the locks that you saw in the last

386
00:07:07,909 --> 00:07:07,919
the locks that you saw in the last
 

387
00:07:07,919 --> 00:07:08,710
the locks that you saw in the last
lecture

388
00:07:08,710 --> 00:07:08,720
lecture
 

389
00:07:08,720 --> 00:07:12,309
lecture
um xv6 kernel

390
00:07:12,309 --> 00:07:12,319
um xv6 kernel
 

391
00:07:12,319 --> 00:07:16,070
um xv6 kernel
is shared memory so xv6

392
00:07:16,070 --> 00:07:16,080
is shared memory so xv6
 

393
00:07:16,080 --> 00:07:18,390
is shared memory so xv6
there's a actually because has a

394
00:07:18,390 --> 00:07:18,400
there's a actually because has a
 

395
00:07:18,400 --> 00:07:19,749
there's a actually because has a
supports a notion of kernel threads

396
00:07:19,749 --> 00:07:19,759
supports a notion of kernel threads
 

397
00:07:19,759 --> 00:07:21,350
supports a notion of kernel threads
there's one kernel thread

398
00:07:21,350 --> 00:07:21,360
there's one kernel thread
 

399
00:07:21,360 --> 00:07:23,830
there's one kernel thread
per process that executes system calls

400
00:07:23,830 --> 00:07:23,840
per process that executes system calls
 

401
00:07:23,840 --> 00:07:24,790
per process that executes system calls
for that process

402
00:07:24,790 --> 00:07:24,800
for that process
 

403
00:07:24,800 --> 00:07:26,870
for that process
all those kernel threads share kernel

404
00:07:26,870 --> 00:07:26,880
all those kernel threads share kernel
 

405
00:07:26,880 --> 00:07:28,230
all those kernel threads share kernel
memory

406
00:07:28,230 --> 00:07:28,240
memory
 

407
00:07:28,240 --> 00:07:34,469
memory
so xv6 kernel threads do share memory um

408
00:07:34,469 --> 00:07:34,479

 

409
00:07:34,479 --> 00:07:37,589

and on the other end

410
00:07:37,589 --> 00:07:37,599
and on the other end
 

411
00:07:37,599 --> 00:07:40,070
and on the other end
xv6 is another kind of threads each user

412
00:07:40,070 --> 00:07:40,080
xv6 is another kind of threads each user
 

413
00:07:40,080 --> 00:07:40,950
xv6 is another kind of threads each user
process

414
00:07:40,950 --> 00:07:40,960
process
 

415
00:07:40,960 --> 00:07:42,469
process
essentially has a single thread of

416
00:07:42,469 --> 00:07:42,479
essentially has a single thread of
 

417
00:07:42,479 --> 00:07:44,070
essentially has a single thread of
control that executes the user

418
00:07:44,070 --> 00:07:44,080
control that executes the user
 

419
00:07:44,080 --> 00:07:46,550
control that executes the user
instructions for that process

420
00:07:46,550 --> 00:07:46,560
instructions for that process
 

421
00:07:46,560 --> 00:07:49,830
instructions for that process
and indeed a lot of the xv6 kernel

422
00:07:49,830 --> 00:07:49,840
and indeed a lot of the xv6 kernel
 

423
00:07:49,840 --> 00:07:51,029
and indeed a lot of the xv6 kernel
threading machinery

424
00:07:51,029 --> 00:07:51,039
threading machinery
 

425
00:07:51,039 --> 00:07:53,189
threading machinery
is ultimately in support of being able

426
00:07:53,189 --> 00:07:53,199
is ultimately in support of being able
 

427
00:07:53,199 --> 00:07:55,589
is ultimately in support of being able
to support and switch among

428
00:07:55,589 --> 00:07:55,599
to support and switch among
 

429
00:07:55,599 --> 00:07:58,150
to support and switch among
many user processes each user process

430
00:07:58,150 --> 00:07:58,160
many user processes each user process
 

431
00:07:58,160 --> 00:07:59,350
many user processes each user process
has some memory and a

432
00:07:59,350 --> 00:07:59,360
has some memory and a
 

433
00:07:59,360 --> 00:08:01,350
has some memory and a
single thread that runs in that memory

434
00:08:01,350 --> 00:08:01,360
single thread that runs in that memory
 

435
00:08:01,360 --> 00:08:04,070
single thread that runs in that memory
so xv6

436
00:08:04,070 --> 00:08:04,080
so xv6
 

437
00:08:04,080 --> 00:08:11,110
so xv6
user processes

438
00:08:11,110 --> 00:08:11,120

 

439
00:08:11,120 --> 00:08:13,589

each process has one thread and so

440
00:08:13,589 --> 00:08:13,599
each process has one thread and so
 

441
00:08:13,599 --> 00:08:14,869
each process has one thread and so
there's no

442
00:08:14,869 --> 00:08:14,879
there's no
 

443
00:08:14,879 --> 00:08:18,150
there's no
sharing of memory among threads um

444
00:08:18,150 --> 00:08:18,160
sharing of memory among threads um
 

445
00:08:18,160 --> 00:08:20,390
sharing of memory among threads um
within a single xp6 user process of

446
00:08:20,390 --> 00:08:20,400
within a single xp6 user process of
 

447
00:08:20,400 --> 00:08:21,749
within a single xp6 user process of
course you could have multiple processes

448
00:08:21,749 --> 00:08:21,759
course you could have multiple processes
 

449
00:08:21,759 --> 00:08:22,309
course you could have multiple processes
but

450
00:08:22,309 --> 00:08:22,319
but
 

451
00:08:22,319 --> 00:08:24,150
but
each of those processes is an address

452
00:08:24,150 --> 00:08:24,160
each of those processes is an address
 

453
00:08:24,160 --> 00:08:26,869
each of those processes is an address
space with a single thread

454
00:08:26,869 --> 00:08:26,879
space with a single thread
 

455
00:08:26,879 --> 00:08:29,830
space with a single thread
the processes in xv6 don't share memory

456
00:08:29,830 --> 00:08:29,840
the processes in xv6 don't share memory
 

457
00:08:29,840 --> 00:08:31,430
the processes in xv6 don't share memory
in other more sophisticated

458
00:08:31,430 --> 00:08:31,440
in other more sophisticated
 

459
00:08:31,440 --> 00:08:35,190
in other more sophisticated
operating systems for example linux

460
00:08:35,190 --> 00:08:35,200
operating systems for example linux
 

461
00:08:35,200 --> 00:08:38,389
operating systems for example linux
linux at user level

462
00:08:38,389 --> 00:08:38,399

 

463
00:08:38,399 --> 00:08:42,230

does allow multiple threads in a process

464
00:08:42,230 --> 00:08:42,240
does allow multiple threads in a process
 

465
00:08:42,240 --> 00:08:43,110
does allow multiple threads in a process
and the processes

466
00:08:43,110 --> 00:08:43,120
and the processes
 

467
00:08:43,120 --> 00:08:45,590
and the processes
and those threads share the memory of

468
00:08:45,590 --> 00:08:45,600
and those threads share the memory of
 

469
00:08:45,600 --> 00:08:47,350
and those threads share the memory of
that single process um

470
00:08:47,350 --> 00:08:47,360
that single process um
 

471
00:08:47,360 --> 00:08:48,550
that single process um
and that's super cool if you want to

472
00:08:48,550 --> 00:08:48,560
and that's super cool if you want to
 

473
00:08:48,560 --> 00:08:51,110
and that's super cool if you want to
write user level programs that

474
00:08:51,110 --> 00:08:51,120
write user level programs that
 

475
00:08:51,120 --> 00:08:53,030
write user level programs that
use level parallel programs that you

476
00:08:53,030 --> 00:08:53,040
use level parallel programs that you
 

477
00:08:53,040 --> 00:08:55,190
use level parallel programs that you
know get speed up from multiple cores

478
00:08:55,190 --> 00:08:55,200
know get speed up from multiple cores
 

479
00:08:55,200 --> 00:08:57,750
know get speed up from multiple cores
better requires sort of another it uses

480
00:08:57,750 --> 00:08:57,760
better requires sort of another it uses
 

481
00:08:57,760 --> 00:08:58,790
better requires sort of another it uses
you know a lot of the same basic

482
00:08:58,790 --> 00:08:58,800
you know a lot of the same basic
 

483
00:08:58,800 --> 00:08:59,750
you know a lot of the same basic
techniques we're going to

484
00:08:59,750 --> 00:08:59,760
techniques we're going to
 

485
00:08:59,760 --> 00:09:01,910
techniques we're going to
talk about today but there's a certain

486
00:09:01,910 --> 00:09:01,920
talk about today but there's a certain
 

487
00:09:01,920 --> 00:09:03,829
talk about today but there's a certain
amount more sophistication in linux to

488
00:09:03,829 --> 00:09:03,839
amount more sophistication in linux to
 

489
00:09:03,839 --> 00:09:05,190
amount more sophistication in linux to
get it to

490
00:09:05,190 --> 00:09:05,200
get it to
 

491
00:09:05,200 --> 00:09:06,949
get it to
keep track of multiple threads per

492
00:09:06,949 --> 00:09:06,959
keep track of multiple threads per
 

493
00:09:06,959 --> 00:09:12,230
keep track of multiple threads per
process instead of just one

494
00:09:12,230 --> 00:09:12,240

 

495
00:09:12,240 --> 00:09:15,269

okay at a sort of high level i just want

496
00:09:15,269 --> 00:09:15,279
okay at a sort of high level i just want
 

497
00:09:15,279 --> 00:09:15,910
okay at a sort of high level i just want
to mention

498
00:09:15,910 --> 00:09:15,920
to mention
 

499
00:09:15,920 --> 00:09:19,030
to mention
that there's other ways to support

500
00:09:19,030 --> 00:09:19,040
that there's other ways to support
 

501
00:09:19,040 --> 00:09:21,190
that there's other ways to support
the interleaving of multiple tasks on a

502
00:09:21,190 --> 00:09:21,200
the interleaving of multiple tasks on a
 

503
00:09:21,200 --> 00:09:23,030
the interleaving of multiple tasks on a
single computer

504
00:09:23,030 --> 00:09:23,040
single computer
 

505
00:09:23,040 --> 00:09:24,949
single computer
and we're not going to talk about them

506
00:09:24,949 --> 00:09:24,959
and we're not going to talk about them
 

507
00:09:24,959 --> 00:09:26,230
and we're not going to talk about them
but if you're curious

508
00:09:26,230 --> 00:09:26,240
but if you're curious
 

509
00:09:26,240 --> 00:09:28,230
but if you're curious
you can look up things like event driven

510
00:09:28,230 --> 00:09:28,240
you can look up things like event driven
 

511
00:09:28,240 --> 00:09:29,670
you can look up things like event driven
programming or

512
00:09:29,670 --> 00:09:29,680
programming or
 

513
00:09:29,680 --> 00:09:33,110
programming or
state machines and these are non-thread

514
00:09:33,110 --> 00:09:33,120
state machines and these are non-thread
 

515
00:09:33,120 --> 00:09:33,990
state machines and these are non-thread
techniques

516
00:09:33,990 --> 00:09:34,000
techniques
 

517
00:09:34,000 --> 00:09:36,389
techniques
to share one computer among many

518
00:09:36,389 --> 00:09:36,399
to share one computer among many
 

519
00:09:36,399 --> 00:09:37,509
to share one computer among many
different tasks

520
00:09:37,509 --> 00:09:37,519
different tasks
 

521
00:09:37,519 --> 00:09:40,790
different tasks
it turns out you know in sort of on the

522
00:09:40,790 --> 00:09:40,800
it turns out you know in sort of on the
 

523
00:09:40,800 --> 00:09:43,030
it turns out you know in sort of on the
spectrum of different schemes for

524
00:09:43,030 --> 00:09:43,040
spectrum of different schemes for
 

525
00:09:43,040 --> 00:09:44,870
spectrum of different schemes for
supporting multiple tasks on a computer

526
00:09:44,870 --> 00:09:44,880
supporting multiple tasks on a computer
 

527
00:09:44,880 --> 00:09:46,790
supporting multiple tasks on a computer
threads are not very efficient those are

528
00:09:46,790 --> 00:09:46,800
threads are not very efficient those are
 

529
00:09:46,800 --> 00:09:48,790
threads are not very efficient those are
the more efficient schemes

530
00:09:48,790 --> 00:09:48,800
the more efficient schemes
 

531
00:09:48,800 --> 00:09:50,389
the more efficient schemes
but threads are usually the most

532
00:09:50,389 --> 00:09:50,399
but threads are usually the most
 

533
00:09:50,399 --> 00:09:52,550
but threads are usually the most
convenient way the most programmer

534
00:09:52,550 --> 00:09:52,560
convenient way the most programmer
 

535
00:09:52,560 --> 00:09:54,389
convenient way the most programmer
friendly way

536
00:09:54,389 --> 00:09:54,399
friendly way
 

537
00:09:54,399 --> 00:09:56,389
friendly way
to support lots of sort of different

538
00:09:56,389 --> 00:09:56,399
to support lots of sort of different
 

539
00:09:56,399 --> 00:09:59,829
to support lots of sort of different
tasks

540
00:09:59,829 --> 00:09:59,839

 

541
00:09:59,839 --> 00:10:03,910

okay there's a couple of uh

542
00:10:03,910 --> 00:10:03,920
okay there's a couple of uh
 

543
00:10:03,920 --> 00:10:05,350
okay there's a couple of uh
challenges that we're gonna have to bite

544
00:10:05,350 --> 00:10:05,360
challenges that we're gonna have to bite
 

545
00:10:05,360 --> 00:10:07,269
challenges that we're gonna have to bite
off if we want to implement

546
00:10:07,269 --> 00:10:07,279
off if we want to implement
 

547
00:10:07,279 --> 00:10:12,150
off if we want to implement
a threading system

548
00:10:12,150 --> 00:10:12,160

 

549
00:10:12,160 --> 00:10:16,829

the so this is just high level

550
00:10:16,829 --> 00:10:16,839

 

551
00:10:16,839 --> 00:10:21,190

challenges

552
00:10:21,190 --> 00:10:21,200

 

553
00:10:21,200 --> 00:10:24,630

um one is as i mentioned before how to

554
00:10:24,630 --> 00:10:24,640
um one is as i mentioned before how to
 

555
00:10:24,640 --> 00:10:25,750
um one is as i mentioned before how to
actually

556
00:10:25,750 --> 00:10:25,760
actually
 

557
00:10:25,760 --> 00:10:28,790
actually
implement the switching for inter the

558
00:10:28,790 --> 00:10:28,800
implement the switching for inter the
 

559
00:10:28,800 --> 00:10:31,990
implement the switching for inter the
um the switching that allows us to

560
00:10:31,990 --> 00:10:32,000
um the switching that allows us to
 

561
00:10:32,000 --> 00:10:35,030
um the switching that allows us to
interleave

562
00:10:35,030 --> 00:10:35,040

 

563
00:10:35,040 --> 00:10:38,069

the execution of multiple threads

564
00:10:38,069 --> 00:10:38,079
the execution of multiple threads
 

565
00:10:38,079 --> 00:10:41,750
the execution of multiple threads
and this sort of broad name for this

566
00:10:41,750 --> 00:10:41,760
and this sort of broad name for this
 

567
00:10:41,760 --> 00:10:42,550
and this sort of broad name for this
process of

568
00:10:42,550 --> 00:10:42,560
process of
 

569
00:10:42,560 --> 00:10:44,310
process of
switching deciding oh i'm going to leave

570
00:10:44,310 --> 00:10:44,320
switching deciding oh i'm going to leave
 

571
00:10:44,320 --> 00:10:46,389
switching deciding oh i'm going to leave
off one thread and start executing

572
00:10:46,389 --> 00:10:46,399
off one thread and start executing
 

573
00:10:46,399 --> 00:10:47,269
off one thread and start executing
another thread

574
00:10:47,269 --> 00:10:47,279
another thread
 

575
00:10:47,279 --> 00:10:51,590
another thread
it's often called scheduling

576
00:10:51,590 --> 00:10:51,600

 

577
00:10:51,600 --> 00:10:54,790

and we'll see that xv6 and detects as a

578
00:10:54,790 --> 00:10:54,800
and we'll see that xv6 and detects as a
 

579
00:10:54,800 --> 00:10:56,069
and we'll see that xv6 and detects as a
actual piece of code that's the

580
00:10:56,069 --> 00:10:56,079
actual piece of code that's the
 

581
00:10:56,079 --> 00:10:57,350
actual piece of code that's the
scheduler indeed it has multiple

582
00:10:57,350 --> 00:10:57,360
scheduler indeed it has multiple
 

583
00:10:57,360 --> 00:10:59,509
scheduler indeed it has multiple
schedulers one per core

584
00:10:59,509 --> 00:10:59,519
schedulers one per core
 

585
00:10:59,519 --> 00:11:02,710
schedulers one per core
but the general idea of how do you drive

586
00:11:02,710 --> 00:11:02,720
but the general idea of how do you drive
 

587
00:11:02,720 --> 00:11:04,150
but the general idea of how do you drive
the decision to switch from one to

588
00:11:04,150 --> 00:11:04,160
the decision to switch from one to
 

589
00:11:04,160 --> 00:11:05,829
the decision to switch from one to
another how to pick the next thread to

590
00:11:05,829 --> 00:11:05,839
another how to pick the next thread to
 

591
00:11:05,839 --> 00:11:06,870
another how to pick the next thread to
run

592
00:11:06,870 --> 00:11:06,880
run
 

593
00:11:06,880 --> 00:11:11,190
run
is called scheduling

594
00:11:11,190 --> 00:11:11,200

 

595
00:11:11,200 --> 00:11:12,470

another question is if you want to

596
00:11:12,470 --> 00:11:12,480
another question is if you want to
 

597
00:11:12,480 --> 00:11:14,069
another question is if you want to
actually implement the switch from one

598
00:11:14,069 --> 00:11:14,079
actually implement the switch from one
 

599
00:11:14,079 --> 00:11:15,910
actually implement the switch from one
thread to another you need to save and

600
00:11:15,910 --> 00:11:15,920
thread to another you need to save and
 

601
00:11:15,920 --> 00:11:16,870
thread to another you need to save and
restore

602
00:11:16,870 --> 00:11:16,880
restore
 

603
00:11:16,880 --> 00:11:19,110
restore
so we need to decide what needs to be

604
00:11:19,110 --> 00:11:19,120
so we need to decide what needs to be
 

605
00:11:19,120 --> 00:11:20,949
so we need to decide what needs to be
saved

606
00:11:20,949 --> 00:11:20,959
saved
 

607
00:11:20,959 --> 00:11:24,310
saved
and where to save it when what needs to

608
00:11:24,310 --> 00:11:24,320
and where to save it when what needs to
 

609
00:11:24,320 --> 00:11:25,829
and where to save it when what needs to
be saved when we leave off executing one

610
00:11:25,829 --> 00:11:25,839
be saved when we leave off executing one
 

611
00:11:25,839 --> 00:11:28,310
be saved when we leave off executing one
thread and restored when we want to

612
00:11:28,310 --> 00:11:28,320
thread and restored when we want to
 

613
00:11:28,320 --> 00:11:28,790
thread and restored when we want to
resume

614
00:11:28,790 --> 00:11:28,800
resume
 

615
00:11:28,800 --> 00:11:31,670
resume
executing that thread at some later time

616
00:11:31,670 --> 00:11:31,680
executing that thread at some later time
 

617
00:11:31,680 --> 00:11:33,269
executing that thread at some later time
and final question is what to do about

618
00:11:33,269 --> 00:11:33,279
and final question is what to do about
 

619
00:11:33,279 --> 00:11:37,990
and final question is what to do about
compute bound threads

620
00:11:37,990 --> 00:11:38,000

 

621
00:11:38,000 --> 00:11:42,230

the many of the options um

622
00:11:42,230 --> 00:11:42,240
the many of the options um
 

623
00:11:42,240 --> 00:11:43,509
the many of the options um
many of the most straightforward options

624
00:11:43,509 --> 00:11:43,519
many of the most straightforward options
 

625
00:11:43,519 --> 00:11:45,750
many of the most straightforward options
for thread switching involve the thread

626
00:11:45,750 --> 00:11:45,760
for thread switching involve the thread
 

627
00:11:45,760 --> 00:11:47,110
for thread switching involve the thread
sort of voluntarily saying well i'm

628
00:11:47,110 --> 00:11:47,120
sort of voluntarily saying well i'm
 

629
00:11:47,120 --> 00:11:49,110
sort of voluntarily saying well i'm
going to save away my state and sort of

630
00:11:49,110 --> 00:11:49,120
going to save away my state and sort of
 

631
00:11:49,120 --> 00:11:50,790
going to save away my state and sort of
run another you know let another thread

632
00:11:50,790 --> 00:11:50,800
run another you know let another thread
 

633
00:11:50,800 --> 00:11:52,790
run another you know let another thread
be run but what do we have a user

634
00:11:52,790 --> 00:11:52,800
be run but what do we have a user
 

635
00:11:52,800 --> 00:11:53,590
be run but what do we have a user
program that's

636
00:11:53,590 --> 00:11:53,600
program that's
 

637
00:11:53,600 --> 00:11:55,269
program that's
you know doing some long running

638
00:11:55,269 --> 00:11:55,279
you know doing some long running
 

639
00:11:55,279 --> 00:11:57,509
you know doing some long running
calculation that might take hours

640
00:11:57,509 --> 00:11:57,519
calculation that might take hours
 

641
00:11:57,519 --> 00:11:59,110
calculation that might take hours
um it's not going to be particularly

642
00:11:59,110 --> 00:11:59,120
um it's not going to be particularly
 

643
00:11:59,120 --> 00:12:00,949
um it's not going to be particularly
thinking about oh now it'll be time to

644
00:12:00,949 --> 00:12:00,959
thinking about oh now it'll be time to
 

645
00:12:00,959 --> 00:12:02,790
thinking about oh now it'll be time to
good time to let something else run

646
00:12:02,790 --> 00:12:02,800
good time to let something else run
 

647
00:12:02,800 --> 00:12:05,990
good time to let something else run
so um it's most convenient to have some

648
00:12:05,990 --> 00:12:06,000
so um it's most convenient to have some
 

649
00:12:06,000 --> 00:12:06,470
so um it's most convenient to have some
way of

650
00:12:06,470 --> 00:12:06,480
way of
 

651
00:12:06,480 --> 00:12:08,550
way of
sort of automatically revoking control

652
00:12:08,550 --> 00:12:08,560
sort of automatically revoking control
 

653
00:12:08,560 --> 00:12:10,550
sort of automatically revoking control
from some long running compute bound

654
00:12:10,550 --> 00:12:10,560
from some long running compute bound
 

655
00:12:10,560 --> 00:12:11,990
from some long running compute bound
process

656
00:12:11,990 --> 00:12:12,000
process
 

657
00:12:12,000 --> 00:12:13,829
process
setting it aside and maybe running it

658
00:12:13,829 --> 00:12:13,839
setting it aside and maybe running it
 

659
00:12:13,839 --> 00:12:17,030
setting it aside and maybe running it
later

660
00:12:17,030 --> 00:12:17,040

 

661
00:12:17,040 --> 00:12:18,230

all right so i'm going to talk about

662
00:12:18,230 --> 00:12:18,240
all right so i'm going to talk about
 

663
00:12:18,240 --> 00:12:20,949
all right so i'm going to talk about
these i'm actually going to talk about

664
00:12:20,949 --> 00:12:20,959
these i'm actually going to talk about
 

665
00:12:20,959 --> 00:12:22,790
these i'm actually going to talk about
the machinery for dealing with compute

666
00:12:22,790 --> 00:12:22,800
the machinery for dealing with compute
 

667
00:12:22,800 --> 00:12:24,230
the machinery for dealing with compute
bound threads

668
00:12:24,230 --> 00:12:24,240
bound threads
 

669
00:12:24,240 --> 00:12:28,710
bound threads
first and the

670
00:12:28,710 --> 00:12:28,720
first and the
 

671
00:12:28,720 --> 00:12:31,110
first and the
scheme for that is something you've come

672
00:12:31,110 --> 00:12:31,120
scheme for that is something you've come
 

673
00:12:31,120 --> 00:12:32,389
scheme for that is something you've come
up before

674
00:12:32,389 --> 00:12:32,399
up before
 

675
00:12:32,399 --> 00:12:38,310
up before
and that's timer interrupts

676
00:12:38,310 --> 00:12:38,320
and that's timer interrupts
 

677
00:12:38,320 --> 00:12:42,629
and that's timer interrupts
and the idea here is that there's a

678
00:12:42,629 --> 00:12:42,639
and the idea here is that there's a
 

679
00:12:42,639 --> 00:12:45,590
and the idea here is that there's a
piece of hardware on each cpu on each

680
00:12:45,590 --> 00:12:45,600
piece of hardware on each cpu on each
 

681
00:12:45,600 --> 00:12:46,310
piece of hardware on each cpu on each
core

682
00:12:46,310 --> 00:12:46,320
core
 

683
00:12:46,320 --> 00:12:49,910
core
that generates periodic interrupts

684
00:12:49,910 --> 00:12:49,920
that generates periodic interrupts
 

685
00:12:49,920 --> 00:12:52,069
that generates periodic interrupts
and the xp6 or any operating system

686
00:12:52,069 --> 00:12:52,079
and the xp6 or any operating system
 

687
00:12:52,079 --> 00:12:53,590
and the xp6 or any operating system
really arranges to you know have those

688
00:12:53,590 --> 00:12:53,600
really arranges to you know have those
 

689
00:12:53,600 --> 00:12:55,509
really arranges to you know have those
interrupts delivered to the kernel so

690
00:12:55,509 --> 00:12:55,519
interrupts delivered to the kernel so
 

691
00:12:55,519 --> 00:12:57,509
interrupts delivered to the kernel so
even if we're running at user level and

692
00:12:57,509 --> 00:12:57,519
even if we're running at user level and
 

693
00:12:57,519 --> 00:12:58,949
even if we're running at user level and
some loop that's you know

694
00:12:58,949 --> 00:12:58,959
some loop that's you know
 

695
00:12:58,959 --> 00:13:01,750
some loop that's you know
computing the first billion digits of pi

696
00:13:01,750 --> 00:13:01,760
computing the first billion digits of pi
 

697
00:13:01,760 --> 00:13:02,069
computing the first billion digits of pi
um

698
00:13:02,069 --> 00:13:02,079
um
 

699
00:13:02,079 --> 00:13:05,030
um
nevertheless uh the timer interrupts to

700
00:13:05,030 --> 00:13:05,040
nevertheless uh the timer interrupts to
 

701
00:13:05,040 --> 00:13:06,470
nevertheless uh the timer interrupts to
go off at some point maybe every 10

702
00:13:06,470 --> 00:13:06,480
go off at some point maybe every 10
 

703
00:13:06,480 --> 00:13:08,150
go off at some point maybe every 10
milliseconds

704
00:13:08,150 --> 00:13:08,160
milliseconds
 

705
00:13:08,160 --> 00:13:09,910
milliseconds
and transfer control from that user

706
00:13:09,910 --> 00:13:09,920
and transfer control from that user
 

707
00:13:09,920 --> 00:13:12,310
and transfer control from that user
level code into the interrupt handler in

708
00:13:12,310 --> 00:13:12,320
level code into the interrupt handler in
 

709
00:13:12,320 --> 00:13:13,190
level code into the interrupt handler in
the kernel and so

710
00:13:13,190 --> 00:13:13,200
the kernel and so
 

711
00:13:13,200 --> 00:13:16,069
the kernel and so
that's the sort of first step in the

712
00:13:16,069 --> 00:13:16,079
that's the sort of first step in the
 

713
00:13:16,079 --> 00:13:17,430
that's the sort of first step in the
kernel being able to

714
00:13:17,430 --> 00:13:17,440
kernel being able to
 

715
00:13:17,440 --> 00:13:19,509
kernel being able to
gain control to switch among different

716
00:13:19,509 --> 00:13:19,519
gain control to switch among different
 

717
00:13:19,519 --> 00:13:21,750
gain control to switch among different
user level processes through user level

718
00:13:21,750 --> 00:13:21,760
user level processes through user level
 

719
00:13:21,760 --> 00:13:22,629
user level processes through user level
threads

720
00:13:22,629 --> 00:13:22,639
threads
 

721
00:13:22,639 --> 00:13:24,870
threads
even if those user level threads aren't

722
00:13:24,870 --> 00:13:24,880
even if those user level threads aren't
 

723
00:13:24,880 --> 00:13:29,110
even if those user level threads aren't
cooperative

724
00:13:29,110 --> 00:13:29,120

 

725
00:13:29,120 --> 00:13:31,750

and the basic scheme is that in the

726
00:13:31,750 --> 00:13:31,760
and the basic scheme is that in the
 

727
00:13:31,760 --> 00:13:33,670
and the basic scheme is that in the
interrupt handler so we can have a

728
00:13:33,670 --> 00:13:33,680
interrupt handler so we can have a
 

729
00:13:33,680 --> 00:13:38,150
interrupt handler so we can have a
kernel handler for these interrupts

730
00:13:38,150 --> 00:13:38,160
kernel handler for these interrupts
 

731
00:13:38,160 --> 00:13:41,269
kernel handler for these interrupts
and we'll see that uh

732
00:13:41,269 --> 00:13:41,279
and we'll see that uh
 

733
00:13:41,279 --> 00:13:44,310
and we'll see that uh
the kernel handler yields

734
00:13:44,310 --> 00:13:44,320
the kernel handler yields
 

735
00:13:44,320 --> 00:13:46,150
the kernel handler yields
this is the sort of usual name for this

736
00:13:46,150 --> 00:13:46,160
this is the sort of usual name for this
 

737
00:13:46,160 --> 00:13:49,350
this is the sort of usual name for this
it yields

738
00:13:49,350 --> 00:13:49,360

 

739
00:13:49,360 --> 00:13:51,829

the kernel handler sort of voluntarily

740
00:13:51,829 --> 00:13:51,839
the kernel handler sort of voluntarily
 

741
00:13:51,839 --> 00:13:53,750
the kernel handler sort of voluntarily
yields the cpu back to the scheduler and

742
00:13:53,750 --> 00:13:53,760
yields the cpu back to the scheduler and
 

743
00:13:53,760 --> 00:13:54,790
yields the cpu back to the scheduler and
tells the schedule look

744
00:13:54,790 --> 00:13:54,800
tells the schedule look
 

745
00:13:54,800 --> 00:13:58,150
tells the schedule look
you can let something else run now

746
00:13:58,150 --> 00:13:58,160
you can let something else run now
 

747
00:13:58,160 --> 00:14:01,990
you can let something else run now
and this yielding is really a form of

748
00:14:01,990 --> 00:14:02,000
and this yielding is really a form of
 

749
00:14:02,000 --> 00:14:05,350
and this yielding is really a form of
thread switch that saves away the state

750
00:14:05,350 --> 00:14:05,360
thread switch that saves away the state
 

751
00:14:05,360 --> 00:14:06,629
thread switch that saves away the state
of the current thread and

752
00:14:06,629 --> 00:14:06,639
of the current thread and
 

753
00:14:06,639 --> 00:14:09,670
of the current thread and
so can be restored later um

754
00:14:09,670 --> 00:14:09,680
so can be restored later um
 

755
00:14:09,680 --> 00:14:11,590
so can be restored later um
you know as we'll see the you know the

756
00:14:11,590 --> 00:14:11,600
you know as we'll see the you know the
 

757
00:14:11,600 --> 00:14:12,870
you know as we'll see the you know the
full story here actually you've seen a

758
00:14:12,870 --> 00:14:12,880
full story here actually you've seen a
 

759
00:14:12,880 --> 00:14:14,150
full story here actually you've seen a
lot of the full story here because it

760
00:14:14,150 --> 00:14:14,160
lot of the full story here because it
 

761
00:14:14,160 --> 00:14:15,829
lot of the full story here because it
involves an interrupt

762
00:14:15,829 --> 00:14:15,839
involves an interrupt
 

763
00:14:15,839 --> 00:14:17,110
involves an interrupt
which you already know about the full

764
00:14:17,110 --> 00:14:17,120
which you already know about the full
 

765
00:14:17,120 --> 00:14:19,189
which you already know about the full
story somewhat complex but the basic

766
00:14:19,189 --> 00:14:19,199
story somewhat complex but the basic
 

767
00:14:19,199 --> 00:14:21,269
story somewhat complex but the basic
idea is that a timer interrupt

768
00:14:21,269 --> 00:14:21,279
idea is that a timer interrupt
 

769
00:14:21,279 --> 00:14:22,710
idea is that a timer interrupt
gives control to the kernel and the

770
00:14:22,710 --> 00:14:22,720
gives control to the kernel and the
 

771
00:14:22,720 --> 00:14:24,790
gives control to the kernel and the
kernel voluntarily yields

772
00:14:24,790 --> 00:14:24,800
kernel voluntarily yields
 

773
00:14:24,800 --> 00:14:28,710
kernel voluntarily yields
the cpu this is called as a piece of

774
00:14:28,710 --> 00:14:28,720
the cpu this is called as a piece of
 

775
00:14:28,720 --> 00:14:39,750
the cpu this is called as a piece of
terminology preemptive scheduling

776
00:14:39,750 --> 00:14:39,760

 

777
00:14:39,760 --> 00:14:41,189

what that means is that with the

778
00:14:41,189 --> 00:14:41,199
what that means is that with the
 

779
00:14:41,199 --> 00:14:43,750
what that means is that with the
preempted means is that

780
00:14:43,750 --> 00:14:43,760
preempted means is that
 

781
00:14:43,760 --> 00:14:46,230
preempted means is that
even if the code that's running doesn't

782
00:14:46,230 --> 00:14:46,240
even if the code that's running doesn't
 

783
00:14:46,240 --> 00:14:48,069
even if the code that's running doesn't
you know doesn't want to

784
00:14:48,069 --> 00:14:48,079
you know doesn't want to
 

785
00:14:48,079 --> 00:14:50,310
you know doesn't want to
you know doesn't explicitly yield the

786
00:14:50,310 --> 00:14:50,320
you know doesn't explicitly yield the
 

787
00:14:50,320 --> 00:14:51,110
you know doesn't explicitly yield the
cpu

788
00:14:51,110 --> 00:14:51,120
cpu
 

789
00:14:51,120 --> 00:14:52,550
cpu
the timer interrupt is going to take

790
00:14:52,550 --> 00:14:52,560
the timer interrupt is going to take
 

791
00:14:52,560 --> 00:14:55,030
the timer interrupt is going to take
control away and we're going to yield

792
00:14:55,030 --> 00:14:55,040
control away and we're going to yield
 

793
00:14:55,040 --> 00:14:56,629
control away and we're going to yield
for it and the opposite of preemptive

794
00:14:56,629 --> 00:14:56,639
for it and the opposite of preemptive
 

795
00:14:56,639 --> 00:14:58,230
for it and the opposite of preemptive
scheduling

796
00:14:58,230 --> 00:14:58,240
scheduling
 

797
00:14:58,240 --> 00:15:01,509
scheduling
might be called maybe voluntary

798
00:15:01,509 --> 00:15:01,519
might be called maybe voluntary
 

799
00:15:01,519 --> 00:15:04,949
might be called maybe voluntary
scheduling

800
00:15:04,949 --> 00:15:04,959

 

801
00:15:04,959 --> 00:15:06,870

and the interesting thing is that the

802
00:15:06,870 --> 00:15:06,880
and the interesting thing is that the
 

803
00:15:06,880 --> 00:15:09,030
and the interesting thing is that the
you know the implementation in xv6 and

804
00:15:09,030 --> 00:15:09,040
you know the implementation in xv6 and
 

805
00:15:09,040 --> 00:15:10,550
you know the implementation in xv6 and
other operating systems of preemptive

806
00:15:10,550 --> 00:15:10,560
other operating systems of preemptive
 

807
00:15:10,560 --> 00:15:12,389
other operating systems of preemptive
scheduling is this time interrupt which

808
00:15:12,389 --> 00:15:12,399
scheduling is this time interrupt which
 

809
00:15:12,399 --> 00:15:14,629
scheduling is this time interrupt which
forcibly takes away the cpu

810
00:15:14,629 --> 00:15:14,639
forcibly takes away the cpu
 

811
00:15:14,639 --> 00:15:16,550
forcibly takes away the cpu
and then the kernel basically does a

812
00:15:16,550 --> 00:15:16,560
and then the kernel basically does a
 

813
00:15:16,560 --> 00:15:18,230
and then the kernel basically does a
voluntary

814
00:15:18,230 --> 00:15:18,240
voluntary
 

815
00:15:18,240 --> 00:15:20,230
voluntary
yield or thread thread switch on behalf

816
00:15:20,230 --> 00:15:20,240
yield or thread thread switch on behalf
 

817
00:15:20,240 --> 00:15:24,310
yield or thread thread switch on behalf
of that process

818
00:15:24,310 --> 00:15:24,320

 

819
00:15:24,320 --> 00:15:27,910

now um another

820
00:15:27,910 --> 00:15:27,920
now um another
 

821
00:15:27,920 --> 00:15:30,310
now um another
just piece of terminology that comes up

822
00:15:30,310 --> 00:15:30,320
just piece of terminology that comes up
 

823
00:15:30,320 --> 00:15:31,430
just piece of terminology that comes up
here is that

824
00:15:31,430 --> 00:15:31,440
here is that
 

825
00:15:31,440 --> 00:15:34,150
here is that
while the thread's running there's a we

826
00:15:34,150 --> 00:15:34,160
while the thread's running there's a we
 

827
00:15:34,160 --> 00:15:35,749
while the thread's running there's a we
need to

828
00:15:35,749 --> 00:15:35,759
need to
 

829
00:15:35,759 --> 00:15:37,990
need to
distinguish the system needs to

830
00:15:37,990 --> 00:15:38,000
distinguish the system needs to
 

831
00:15:38,000 --> 00:15:39,590
distinguish the system needs to
distinguish between threads that are

832
00:15:39,590 --> 00:15:39,600
distinguish between threads that are
 

833
00:15:39,600 --> 00:15:42,790
distinguish between threads that are
currently actually running on some cpu

834
00:15:42,790 --> 00:15:42,800
currently actually running on some cpu
 

835
00:15:42,800 --> 00:15:45,990
currently actually running on some cpu
versus threads that would like to run

836
00:15:45,990 --> 00:15:46,000
versus threads that would like to run
 

837
00:15:46,000 --> 00:15:48,230
versus threads that would like to run
but aren't currently running on any cpu

838
00:15:48,230 --> 00:15:48,240
but aren't currently running on any cpu
 

839
00:15:48,240 --> 00:15:50,550
but aren't currently running on any cpu
but you know could run if a cpu became

840
00:15:50,550 --> 00:15:50,560
but you know could run if a cpu became
 

841
00:15:50,560 --> 00:15:51,430
but you know could run if a cpu became
free

842
00:15:51,430 --> 00:15:51,440
free
 

843
00:15:51,440 --> 00:15:53,590
free
versus threads that actually don't want

844
00:15:53,590 --> 00:15:53,600
versus threads that actually don't want
 

845
00:15:53,600 --> 00:15:55,509
versus threads that actually don't want
to run because they're waiting for i o

846
00:15:55,509 --> 00:15:55,519
to run because they're waiting for i o
 

847
00:15:55,519 --> 00:15:56,150
to run because they're waiting for i o
or waiting

848
00:15:56,150 --> 00:15:56,160
or waiting
 

849
00:15:56,160 --> 00:15:59,990
or waiting
for some event and unfortunately this

850
00:15:59,990 --> 00:16:00,000
for some event and unfortunately this
 

851
00:16:00,000 --> 00:16:03,189
for some event and unfortunately this
distinction is often called state even

852
00:16:03,189 --> 00:16:03,199
distinction is often called state even
 

853
00:16:03,199 --> 00:16:03,990
distinction is often called state even
though

854
00:16:03,990 --> 00:16:04,000
though
 

855
00:16:04,000 --> 00:16:05,269
though
the full state of a thread is actually

856
00:16:05,269 --> 00:16:05,279
the full state of a thread is actually
 

857
00:16:05,279 --> 00:16:09,990
the full state of a thread is actually
much more complicated than that

858
00:16:09,990 --> 00:16:10,000

 

859
00:16:10,000 --> 00:16:12,550

since this is going to come up i just

860
00:16:12,550 --> 00:16:12,560
since this is going to come up i just
 

861
00:16:12,560 --> 00:16:13,189
since this is going to come up i just
want to

862
00:16:13,189 --> 00:16:13,199
want to
 

863
00:16:13,199 --> 00:16:14,550
want to
list out a couple of states that we'll

864
00:16:14,550 --> 00:16:14,560
list out a couple of states that we'll
 

865
00:16:14,560 --> 00:16:16,310
list out a couple of states that we'll
be seeing

866
00:16:16,310 --> 00:16:16,320
be seeing
 

867
00:16:16,320 --> 00:16:18,710
be seeing
and these are states that xv6 actually

868
00:16:18,710 --> 00:16:18,720
and these are states that xv6 actually
 

869
00:16:18,720 --> 00:16:19,829
and these are states that xv6 actually
maintains there's

870
00:16:19,829 --> 00:16:19,839
maintains there's
 

871
00:16:19,839 --> 00:16:21,749
maintains there's
a state called running which means ah

872
00:16:21,749 --> 00:16:21,759
a state called running which means ah
 

873
00:16:21,759 --> 00:16:23,509
a state called running which means ah
it's actually executing on some

874
00:16:23,509 --> 00:16:23,519
it's actually executing on some
 

875
00:16:23,519 --> 00:16:26,629
it's actually executing on some
core on some cpu right now there's

876
00:16:26,629 --> 00:16:26,639
core on some cpu right now there's
 

877
00:16:26,639 --> 00:16:29,829
core on some cpu right now there's
runable

878
00:16:29,829 --> 00:16:29,839

 

879
00:16:29,839 --> 00:16:31,269

which means not currently executing

880
00:16:31,269 --> 00:16:31,279
which means not currently executing
 

881
00:16:31,279 --> 00:16:34,069
which means not currently executing
anywhere but and just a saved state

882
00:16:34,069 --> 00:16:34,079
anywhere but and just a saved state
 

883
00:16:34,079 --> 00:16:35,430
anywhere but and just a saved state
but would like to run as soon as

884
00:16:35,430 --> 00:16:35,440
but would like to run as soon as
 

885
00:16:35,440 --> 00:16:38,069
but would like to run as soon as
possible and then it turns out there's a

886
00:16:38,069 --> 00:16:38,079
possible and then it turns out there's a
 

887
00:16:38,079 --> 00:16:40,150
possible and then it turns out there's a
state which won't come out much today

888
00:16:40,150 --> 00:16:40,160
state which won't come out much today
 

889
00:16:40,160 --> 00:16:41,749
state which won't come out much today
but will come up next week called

890
00:16:41,749 --> 00:16:41,759
but will come up next week called
 

891
00:16:41,759 --> 00:16:43,030
but will come up next week called
sleeping which is

892
00:16:43,030 --> 00:16:43,040
sleeping which is
 

893
00:16:43,040 --> 00:16:44,710
sleeping which is
means the threads waiting for some i o

894
00:16:44,710 --> 00:16:44,720
means the threads waiting for some i o
 

895
00:16:44,720 --> 00:16:47,189
means the threads waiting for some i o
event and only wants to run after the i

896
00:16:47,189 --> 00:16:47,199
event and only wants to run after the i
 

897
00:16:47,199 --> 00:16:48,150
event and only wants to run after the i
o event occurs

898
00:16:48,150 --> 00:16:48,160
o event occurs
 

899
00:16:48,160 --> 00:16:49,829
o event occurs
so today we're mostly concerned with

900
00:16:49,829 --> 00:16:49,839
so today we're mostly concerned with
 

901
00:16:49,839 --> 00:16:51,350
so today we're mostly concerned with
running and runnable threads

902
00:16:51,350 --> 00:16:51,360
running and runnable threads
 

903
00:16:51,360 --> 00:16:53,509
running and runnable threads
and what this preemptive switch does

904
00:16:53,509 --> 00:16:53,519
and what this preemptive switch does
 

905
00:16:53,519 --> 00:16:54,949
and what this preemptive switch does
what this timer interrupt does

906
00:16:54,949 --> 00:16:54,959
what this timer interrupt does
 

907
00:16:54,959 --> 00:16:57,030
what this timer interrupt does
and yield is basically convert a running

908
00:16:57,030 --> 00:16:57,040
and yield is basically convert a running
 

909
00:16:57,040 --> 00:16:58,790
and yield is basically convert a running
thread whatever thread was interrupted

910
00:16:58,790 --> 00:16:58,800
thread whatever thread was interrupted
 

911
00:16:58,800 --> 00:16:59,829
thread whatever thread was interrupted
by the timer

912
00:16:59,829 --> 00:16:59,839
by the timer
 

913
00:16:59,839 --> 00:17:02,710
by the timer
into a runnable thread that is thread

914
00:17:02,710 --> 00:17:02,720
into a runnable thread that is thread
 

915
00:17:02,720 --> 00:17:03,350
into a runnable thread that is thread
that's

916
00:17:03,350 --> 00:17:03,360
that's
 

917
00:17:03,360 --> 00:17:05,669
that's
by yielding or converting that thread

918
00:17:05,669 --> 00:17:05,679
by yielding or converting that thread
 

919
00:17:05,679 --> 00:17:06,870
by yielding or converting that thread
into a thread that's not running right

920
00:17:06,870 --> 00:17:06,880
into a thread that's not running right
 

921
00:17:06,880 --> 00:17:07,510
into a thread that's not running right
now but

922
00:17:07,510 --> 00:17:07,520
now but
 

923
00:17:07,520 --> 00:17:09,110
now but
would actually like to clearly because

924
00:17:09,110 --> 00:17:09,120
would actually like to clearly because
 

925
00:17:09,120 --> 00:17:11,110
would actually like to clearly because
it was running at the time of the

926
00:17:11,110 --> 00:17:11,120
it was running at the time of the
 

927
00:17:11,120 --> 00:17:14,230
it was running at the time of the
timer interrupt

928
00:17:14,230 --> 00:17:14,240

 

929
00:17:14,240 --> 00:17:17,510

okay so um running thread it's program

930
00:17:17,510 --> 00:17:17,520
okay so um running thread it's program
 

931
00:17:17,520 --> 00:17:19,189
okay so um running thread it's program
counter and registers are

932
00:17:19,189 --> 00:17:19,199
counter and registers are
 

933
00:17:19,199 --> 00:17:21,750
counter and registers are
actually in the cpu you know in the

934
00:17:21,750 --> 00:17:21,760
actually in the cpu you know in the
 

935
00:17:21,760 --> 00:17:23,590
actually in the cpu you know in the
hardware registers of the cpu that's

936
00:17:23,590 --> 00:17:23,600
hardware registers of the cpu that's
 

937
00:17:23,600 --> 00:17:25,350
hardware registers of the cpu that's
executing it

938
00:17:25,350 --> 00:17:25,360
executing it
 

939
00:17:25,360 --> 00:17:28,470
executing it
a runnable thread though has no you know

940
00:17:28,470 --> 00:17:28,480
a runnable thread though has no you know
 

941
00:17:28,480 --> 00:17:30,390
a runnable thread though has no you know
it's not doesn't have a cpu associated

942
00:17:30,390 --> 00:17:30,400
it's not doesn't have a cpu associated
 

943
00:17:30,400 --> 00:17:31,510
it's not doesn't have a cpu associated
with it

944
00:17:31,510 --> 00:17:31,520
with it
 

945
00:17:31,520 --> 00:17:33,669
with it
and therefore we need to save for every

946
00:17:33,669 --> 00:17:33,679
and therefore we need to save for every
 

947
00:17:33,679 --> 00:17:34,950
and therefore we need to save for every
runnable state

948
00:17:34,950 --> 00:17:34,960
runnable state
 

949
00:17:34,960 --> 00:17:38,310
runnable state
we need to save whatever

950
00:17:38,310 --> 00:17:38,320
we need to save whatever
 

951
00:17:38,320 --> 00:17:41,110
we need to save whatever
cpu state whatever state the cpu was

952
00:17:41,110 --> 00:17:41,120
cpu state whatever state the cpu was
 

953
00:17:41,120 --> 00:17:42,630
cpu state whatever state the cpu was
keeping

954
00:17:42,630 --> 00:17:42,640
keeping
 

955
00:17:42,640 --> 00:17:45,990
keeping
when that thread was running so we need

956
00:17:45,990 --> 00:17:46,000
when that thread was running so we need
 

957
00:17:46,000 --> 00:17:47,669
when that thread was running so we need
to copy the cpu contents

958
00:17:47,669 --> 00:17:47,679
to copy the cpu contents
 

959
00:17:47,679 --> 00:17:48,950
to copy the cpu contents
you know which is not ram but just

960
00:17:48,950 --> 00:17:48,960
you know which is not ram but just
 

961
00:17:48,960 --> 00:17:51,909
you know which is not ram but just
registers really um from the cpu

962
00:17:51,909 --> 00:17:51,919
registers really um from the cpu
 

963
00:17:51,919 --> 00:17:54,310
registers really um from the cpu
into memory somewhere to save them when

964
00:17:54,310 --> 00:17:54,320
into memory somewhere to save them when
 

965
00:17:54,320 --> 00:17:54,950
into memory somewhere to save them when
we

966
00:17:54,950 --> 00:17:54,960
we
 

967
00:17:54,960 --> 00:17:56,630
we
turn a thread from running to runnable

968
00:17:56,630 --> 00:17:56,640
turn a thread from running to runnable
 

969
00:17:56,640 --> 00:17:57,990
turn a thread from running to runnable
and again this is the

970
00:17:57,990 --> 00:17:58,000
and again this is the
 

971
00:17:58,000 --> 00:17:59,830
and again this is the
basically the state we have to

972
00:17:59,830 --> 00:17:59,840
basically the state we have to
 

973
00:17:59,840 --> 00:18:01,350
basically the state we have to
explicitly save here's

974
00:18:01,350 --> 00:18:01,360
explicitly save here's
 

975
00:18:01,360 --> 00:18:04,070
explicitly save here's
just the state the executing state and

976
00:18:04,070 --> 00:18:04,080
just the state the executing state and
 

977
00:18:04,080 --> 00:18:05,669
just the state the executing state and
the cpu which is the

978
00:18:05,669 --> 00:18:05,679
the cpu which is the
 

979
00:18:05,679 --> 00:18:09,029
the cpu which is the
uh program counter and the

980
00:18:09,029 --> 00:18:09,039
uh program counter and the
 

981
00:18:09,039 --> 00:18:11,430
uh program counter and the
registers and the cpu so these need to

982
00:18:11,430 --> 00:18:11,440
registers and the cpu so these need to
 

983
00:18:11,440 --> 00:18:12,870
registers and the cpu so these need to
be saved

984
00:18:12,870 --> 00:18:12,880
be saved
 

985
00:18:12,880 --> 00:18:15,669
be saved
when we convert a thread to runnable

986
00:18:15,669 --> 00:18:15,679
when we convert a thread to runnable
 

987
00:18:15,679 --> 00:18:17,750
when we convert a thread to runnable
when some scheduler finally decides to

988
00:18:17,750 --> 00:18:17,760
when some scheduler finally decides to
 

989
00:18:17,760 --> 00:18:20,710
when some scheduler finally decides to
run a runnable thread then as part of

990
00:18:20,710 --> 00:18:20,720
run a runnable thread then as part of
 

991
00:18:20,720 --> 00:18:22,150
run a runnable thread then as part of
the many steps and getting that thread

992
00:18:22,150 --> 00:18:22,160
the many steps and getting that thread
 

993
00:18:22,160 --> 00:18:23,029
the many steps and getting that thread
going again

994
00:18:23,029 --> 00:18:23,039
going again
 

995
00:18:23,039 --> 00:18:25,990
going again
and resuming it we're going to see that

996
00:18:25,990 --> 00:18:26,000
and resuming it we're going to see that
 

997
00:18:26,000 --> 00:18:27,990
and resuming it we're going to see that
the program count the saved program

998
00:18:27,990 --> 00:18:28,000
the program count the saved program
 

999
00:18:28,000 --> 00:18:29,669
the program count the saved program
counter registers are copied

1000
00:18:29,669 --> 00:18:29,679
counter registers are copied
 

1001
00:18:29,679 --> 00:18:32,950
counter registers are copied
back into the cpus

1002
00:18:32,950 --> 00:18:32,960
back into the cpus
 

1003
00:18:32,960 --> 00:18:34,470
back into the cpus
actual register on the cpu that the

1004
00:18:34,470 --> 00:18:34,480
actual register on the cpu that the
 

1005
00:18:34,480 --> 00:18:38,870
actual register on the cpu that the
scheduler decides to run it on

1006
00:18:38,870 --> 00:18:38,880

 

1007
00:18:38,880 --> 00:18:41,990

all right any questions about these this

1008
00:18:41,990 --> 00:18:42,000
all right any questions about these this
 

1009
00:18:42,000 --> 00:18:49,750
all right any questions about these this
terminology

1010
00:18:49,750 --> 00:18:49,760

 

1011
00:18:49,760 --> 00:18:51,669

all right i'm going to now sort of talk

1012
00:18:51,669 --> 00:18:51,679
all right i'm going to now sort of talk
 

1013
00:18:51,679 --> 00:18:52,789
all right i'm going to now sort of talk
about a

1014
00:18:52,789 --> 00:18:52,799
about a
 

1015
00:18:52,799 --> 00:18:57,909
about a
sort of more xv6 oriented view of things

1016
00:18:57,909 --> 00:18:57,919

 

1017
00:18:57,919 --> 00:19:01,430

i'm going to draw two pictures really of

1018
00:19:01,430 --> 00:19:01,440
i'm going to draw two pictures really of
 

1019
00:19:01,440 --> 00:19:03,270
i'm going to draw two pictures really of
threads in xy6 a kind of simplified

1020
00:19:03,270 --> 00:19:03,280
threads in xy6 a kind of simplified
 

1021
00:19:03,280 --> 00:19:05,510
threads in xy6 a kind of simplified
picture and a more detailed picture

1022
00:19:05,510 --> 00:19:05,520
picture and a more detailed picture
 

1023
00:19:05,520 --> 00:19:08,950
picture and a more detailed picture
so as usual we have the user

1024
00:19:08,950 --> 00:19:08,960

 

1025
00:19:08,960 --> 00:19:12,870

stuff up here and the kernel down here

1026
00:19:12,870 --> 00:19:12,880
stuff up here and the kernel down here
 

1027
00:19:12,880 --> 00:19:15,990
stuff up here and the kernel down here
um we might be running you know multiple

1028
00:19:15,990 --> 00:19:16,000
um we might be running you know multiple
 

1029
00:19:16,000 --> 00:19:16,950
um we might be running you know multiple
processes

1030
00:19:16,950 --> 00:19:16,960
processes
 

1031
00:19:16,960 --> 00:19:19,510
processes
at user level maybe you know the c

1032
00:19:19,510 --> 00:19:19,520
at user level maybe you know the c
 

1033
00:19:19,520 --> 00:19:20,549
at user level maybe you know the c
compiler

1034
00:19:20,549 --> 00:19:20,559
compiler
 

1035
00:19:20,559 --> 00:19:24,549
compiler
and the ls and a shell

1036
00:19:24,549 --> 00:19:24,559
and the ls and a shell
 

1037
00:19:24,559 --> 00:19:26,310
and the ls and a shell
they may or may not be all wanting to

1038
00:19:26,310 --> 00:19:26,320
they may or may not be all wanting to
 

1039
00:19:26,320 --> 00:19:29,270
they may or may not be all wanting to
run at the same time

1040
00:19:29,270 --> 00:19:29,280
run at the same time
 

1041
00:19:29,280 --> 00:19:36,830
run at the same time
at user level each of these processes

1042
00:19:36,830 --> 00:19:36,840

 

1043
00:19:36,840 --> 00:19:38,310

has

1044
00:19:38,310 --> 00:19:38,320
has
 

1045
00:19:38,320 --> 00:19:41,909
has
you know it has memory and of particular

1046
00:19:41,909 --> 00:19:41,919
you know it has memory and of particular
 

1047
00:19:41,919 --> 00:19:43,830
you know it has memory and of particular
interest to us each of these processes

1048
00:19:43,830 --> 00:19:43,840
interest to us each of these processes
 

1049
00:19:43,840 --> 00:19:47,270
interest to us each of these processes
has a user stack

1050
00:19:47,270 --> 00:19:47,280

 

1051
00:19:47,280 --> 00:19:50,950

and while it's running it as registers

1052
00:19:50,950 --> 00:19:50,960
and while it's running it as registers
 

1053
00:19:50,960 --> 00:19:53,830
and while it's running it as registers
in the risc 5 hardware so pc plus

1054
00:19:53,830 --> 00:19:53,840
in the risc 5 hardware so pc plus
 

1055
00:19:53,840 --> 00:19:55,590
in the risc 5 hardware so pc plus
registers

1056
00:19:55,590 --> 00:19:55,600
registers
 

1057
00:19:55,600 --> 00:19:57,350
registers
all right so while the program is

1058
00:19:57,350 --> 00:19:57,360
all right so while the program is
 

1059
00:19:57,360 --> 00:19:58,630
all right so while the program is
running you know there's

1060
00:19:58,630 --> 00:19:58,640
running you know there's
 

1061
00:19:58,640 --> 00:20:00,070
running you know there's
this essentially a thread of control

1062
00:20:00,070 --> 00:20:00,080
this essentially a thread of control
 

1063
00:20:00,080 --> 00:20:02,230
this essentially a thread of control
that's running up at user level

1064
00:20:02,230 --> 00:20:02,240
that's running up at user level
 

1065
00:20:02,240 --> 00:20:04,230
that's running up at user level
um and the way i'm going to talk about

1066
00:20:04,230 --> 00:20:04,240
um and the way i'm going to talk about
 

1067
00:20:04,240 --> 00:20:06,230
um and the way i'm going to talk about
it is as if

1068
00:20:06,230 --> 00:20:06,240
it is as if
 

1069
00:20:06,240 --> 00:20:09,590
it is as if
there's a user thread that consists of

1070
00:20:09,590 --> 00:20:09,600
there's a user thread that consists of
 

1071
00:20:09,600 --> 00:20:09,909
there's a user thread that consists of
the

1072
00:20:09,909 --> 00:20:09,919
the
 

1073
00:20:09,919 --> 00:20:11,990
the
user stack user memory user program

1074
00:20:11,990 --> 00:20:12,000
user stack user memory user program
 

1075
00:20:12,000 --> 00:20:13,590
user stack user memory user program
counter user registers

1076
00:20:13,590 --> 00:20:13,600
counter user registers
 

1077
00:20:13,600 --> 00:20:15,350
counter user registers
if the program makes a system callers

1078
00:20:15,350 --> 00:20:15,360
if the program makes a system callers
 

1079
00:20:15,360 --> 00:20:17,110
if the program makes a system callers
interrupted and

1080
00:20:17,110 --> 00:20:17,120
interrupted and
 

1081
00:20:17,120 --> 00:20:20,390
interrupted and
goes into the kernel then this stuff

1082
00:20:20,390 --> 00:20:20,400
goes into the kernel then this stuff
 

1083
00:20:20,400 --> 00:20:21,430
goes into the kernel then this stuff
saved away in the

1084
00:20:21,430 --> 00:20:21,440
saved away in the
 

1085
00:20:21,440 --> 00:20:25,510
saved away in the
this program's trap frame and a

1086
00:20:25,510 --> 00:20:25,520
this program's trap frame and a
 

1087
00:20:25,520 --> 00:20:29,029
this program's trap frame and a
kernel the kernel thread for

1088
00:20:29,029 --> 00:20:29,039
kernel the kernel thread for
 

1089
00:20:29,039 --> 00:20:32,149
kernel the kernel thread for
this program is activated and so this is

1090
00:20:32,149 --> 00:20:32,159
this program is activated and so this is
 

1091
00:20:32,159 --> 00:20:32,470
this program is activated and so this is
the

1092
00:20:32,470 --> 00:20:32,480
the
 

1093
00:20:32,480 --> 00:20:35,669
the
the trap frame holds saved user stuff

1094
00:20:35,669 --> 00:20:35,679
the trap frame holds saved user stuff
 

1095
00:20:35,679 --> 00:20:36,950
the trap frame holds saved user stuff
after we saved away the user

1096
00:20:36,950 --> 00:20:36,960
after we saved away the user
 

1097
00:20:36,960 --> 00:20:39,990
after we saved away the user
piece program counter registers then we

1098
00:20:39,990 --> 00:20:40,000
piece program counter registers then we
 

1099
00:20:40,000 --> 00:20:41,830
piece program counter registers then we
switched the cpu to using the kernel

1100
00:20:41,830 --> 00:20:41,840
switched the cpu to using the kernel
 

1101
00:20:41,840 --> 00:20:45,430
switched the cpu to using the kernel
stack

1102
00:20:45,430 --> 00:20:45,440

 

1103
00:20:45,440 --> 00:20:47,029

and you know we don't need to restore

1104
00:20:47,029 --> 00:20:47,039
and you know we don't need to restore
 

1105
00:20:47,039 --> 00:20:48,549
and you know we don't need to restore
registers because

1106
00:20:48,549 --> 00:20:48,559
registers because
 

1107
00:20:48,559 --> 00:20:52,549
registers because
um the the kernel thread for process

1108
00:20:52,549 --> 00:20:52,559
um the the kernel thread for process
 

1109
00:20:52,559 --> 00:20:53,029
um the the kernel thread for process
isn't

1110
00:20:53,029 --> 00:20:53,039
isn't
 

1111
00:20:53,039 --> 00:20:54,789
isn't
really running and has no real save

1112
00:20:54,789 --> 00:20:54,799
really running and has no real save
 

1113
00:20:54,799 --> 00:20:56,470
really running and has no real save
state um

1114
00:20:56,470 --> 00:20:56,480
state um
 

1115
00:20:56,480 --> 00:20:59,110
state um
when the user thread is running um

1116
00:20:59,110 --> 00:20:59,120
when the user thread is running um
 

1117
00:20:59,120 --> 00:21:00,310
when the user thread is running um
instead it's sort of the

1118
00:21:00,310 --> 00:21:00,320
instead it's sort of the
 

1119
00:21:00,320 --> 00:21:02,070
instead it's sort of the
kernel thread is kind of activated on

1120
00:21:02,070 --> 00:21:02,080
kernel thread is kind of activated on
 

1121
00:21:02,080 --> 00:21:05,510
kernel thread is kind of activated on
its stack the first time in

1122
00:21:05,510 --> 00:21:05,520
its stack the first time in
 

1123
00:21:05,520 --> 00:21:12,149
its stack the first time in
the trampoline and user trap code

1124
00:21:12,149 --> 00:21:12,159

 

1125
00:21:12,159 --> 00:21:13,669

and then the kernel runs for a while

1126
00:21:13,669 --> 00:21:13,679
and then the kernel runs for a while
 

1127
00:21:13,679 --> 00:21:15,510
and then the kernel runs for a while
maybe running a system call or an

1128
00:21:15,510 --> 00:21:15,520
maybe running a system call or an
 

1129
00:21:15,520 --> 00:21:18,310
maybe running a system call or an
interrupt handler or whatever it may be

1130
00:21:18,310 --> 00:21:18,320
interrupt handler or whatever it may be
 

1131
00:21:18,320 --> 00:21:20,950
interrupt handler or whatever it may be
and sometimes uh if it's a system call

1132
00:21:20,950 --> 00:21:20,960
and sometimes uh if it's a system call
 

1133
00:21:20,960 --> 00:21:22,630
and sometimes uh if it's a system call
in particular we'll just simply return

1134
00:21:22,630 --> 00:21:22,640
in particular we'll just simply return
 

1135
00:21:22,640 --> 00:21:24,310
in particular we'll just simply return
from this point back to the

1136
00:21:24,310 --> 00:21:24,320
from this point back to the
 

1137
00:21:24,320 --> 00:21:26,630
from this point back to the
same process and the return to user

1138
00:21:26,630 --> 00:21:26,640
same process and the return to user
 

1139
00:21:26,640 --> 00:21:27,750
same process and the return to user
space will restore

1140
00:21:27,750 --> 00:21:27,760
space will restore
 

1141
00:21:27,760 --> 00:21:29,909
space will restore
the this program's program counter and

1142
00:21:29,909 --> 00:21:29,919
the this program's program counter and
 

1143
00:21:29,919 --> 00:21:30,950
the this program's program counter and
registers

1144
00:21:30,950 --> 00:21:30,960
registers
 

1145
00:21:30,960 --> 00:21:33,270
registers
but it could also be that instead of

1146
00:21:33,270 --> 00:21:33,280
but it could also be that instead of
 

1147
00:21:33,280 --> 00:21:35,029
but it could also be that instead of
simply returning

1148
00:21:35,029 --> 00:21:35,039
simply returning
 

1149
00:21:35,039 --> 00:21:36,470
simply returning
for one reason or another maybe because

1150
00:21:36,470 --> 00:21:36,480
for one reason or another maybe because
 

1151
00:21:36,480 --> 00:21:38,070
for one reason or another maybe because
it was a timer interrupt we're actually

1152
00:21:38,070 --> 00:21:38,080
it was a timer interrupt we're actually
 

1153
00:21:38,080 --> 00:21:40,310
it was a timer interrupt we're actually
going to switch to another process and

1154
00:21:40,310 --> 00:21:40,320
going to switch to another process and
 

1155
00:21:40,320 --> 00:21:43,110
going to switch to another process and
the very high level view of that is that

1156
00:21:43,110 --> 00:21:43,120
the very high level view of that is that
 

1157
00:21:43,120 --> 00:21:43,990
the very high level view of that is that
if the

1158
00:21:43,990 --> 00:21:44,000
if the
 

1159
00:21:44,000 --> 00:21:46,789
if the
xv6 scheduler decides to switch from

1160
00:21:46,789 --> 00:21:46,799
xv6 scheduler decides to switch from
 

1161
00:21:46,799 --> 00:21:49,590
xv6 scheduler decides to switch from
this process to a different process

1162
00:21:49,590 --> 00:21:49,600
this process to a different process
 

1163
00:21:49,600 --> 00:21:51,270
this process to a different process
what the first thing that really happens

1164
00:21:51,270 --> 00:21:51,280
what the first thing that really happens
 

1165
00:21:51,280 --> 00:21:53,110
what the first thing that really happens
is that we're going to switch

1166
00:21:53,110 --> 00:21:53,120
is that we're going to switch
 

1167
00:21:53,120 --> 00:21:55,510
is that we're going to switch
kernel threads from this processes

1168
00:21:55,510 --> 00:21:55,520
kernel threads from this processes
 

1169
00:21:55,520 --> 00:21:56,390
kernel threads from this processes
kernel thread

1170
00:21:56,390 --> 00:21:56,400
kernel thread
 

1171
00:21:56,400 --> 00:21:58,390
kernel thread
to the other processor's kernel thread

1172
00:21:58,390 --> 00:21:58,400
to the other processor's kernel thread
 

1173
00:21:58,400 --> 00:21:59,750
to the other processor's kernel thread
and then the other processes kernel

1174
00:21:59,750 --> 00:21:59,760
and then the other processes kernel
 

1175
00:21:59,760 --> 00:22:01,990
and then the other processes kernel
thread will return back to user space so

1176
00:22:01,990 --> 00:22:02,000
thread will return back to user space so
 

1177
00:22:02,000 --> 00:22:03,830
thread will return back to user space so
supposing that the c compiler rsa needs

1178
00:22:03,830 --> 00:22:03,840
supposing that the c compiler rsa needs
 

1179
00:22:03,840 --> 00:22:05,510
supposing that the c compiler rsa needs
to read the disk

1180
00:22:05,510 --> 00:22:05,520
to read the disk
 

1181
00:22:05,520 --> 00:22:07,990
to read the disk
and so it's going to yield the cpu while

1182
00:22:07,990 --> 00:22:08,000
and so it's going to yield the cpu while
 

1183
00:22:08,000 --> 00:22:09,590
and so it's going to yield the cpu while
it's sleeping to wait for the disk read

1184
00:22:09,590 --> 00:22:09,600
it's sleeping to wait for the disk read
 

1185
00:22:09,600 --> 00:22:10,390
it's sleeping to wait for the disk read
to complete

1186
00:22:10,390 --> 00:22:10,400
to complete
 

1187
00:22:10,400 --> 00:22:12,710
to complete
maybe ls wants to execute and is in

1188
00:22:12,710 --> 00:22:12,720
maybe ls wants to execute and is in
 

1189
00:22:12,720 --> 00:22:14,630
maybe ls wants to execute and is in
runnable state

1190
00:22:14,630 --> 00:22:14,640
runnable state
 

1191
00:22:14,640 --> 00:22:16,950
runnable state
what the xv6 scheduler maybe may do is

1192
00:22:16,950 --> 00:22:16,960
what the xv6 scheduler maybe may do is
 

1193
00:22:16,960 --> 00:22:18,070
what the xv6 scheduler maybe may do is
that well

1194
00:22:18,070 --> 00:22:18,080
that well
 

1195
00:22:18,080 --> 00:22:20,710
that well
um if ls is in runnable state that means

1196
00:22:20,710 --> 00:22:20,720
um if ls is in runnable state that means
 

1197
00:22:20,720 --> 00:22:22,950
um if ls is in runnable state that means
it left off somewhere and its state

1198
00:22:22,950 --> 00:22:22,960
it left off somewhere and its state
 

1199
00:22:22,960 --> 00:22:25,190
it left off somewhere and its state
was saved away possibly by a timer

1200
00:22:25,190 --> 00:22:25,200
was saved away possibly by a timer
 

1201
00:22:25,200 --> 00:22:27,270
was saved away possibly by a timer
interrupt and so the ls will actually

1202
00:22:27,270 --> 00:22:27,280
interrupt and so the ls will actually
 

1203
00:22:27,280 --> 00:22:28,230
interrupt and so the ls will actually
have a saved

1204
00:22:28,230 --> 00:22:28,240
have a saved
 

1205
00:22:28,240 --> 00:22:30,789
have a saved
trap frame with user registers and its

1206
00:22:30,789 --> 00:22:30,799
trap frame with user registers and its
 

1207
00:22:30,799 --> 00:22:31,750
trap frame with user registers and its
own

1208
00:22:31,750 --> 00:22:31,760
own
 

1209
00:22:31,760 --> 00:22:35,190
own
kernel stack and as it turns out a seed

1210
00:22:35,190 --> 00:22:35,200
kernel stack and as it turns out a seed
 

1211
00:22:35,200 --> 00:22:38,230
kernel stack and as it turns out a seed
set of

1212
00:22:38,230 --> 00:22:38,240

 

1213
00:22:38,240 --> 00:22:39,990

kernel registers associated with the

1214
00:22:39,990 --> 00:22:40,000
kernel registers associated with the
 

1215
00:22:40,000 --> 00:22:41,510
kernel registers associated with the
kernel thread which

1216
00:22:41,510 --> 00:22:41,520
kernel thread which
 

1217
00:22:41,520 --> 00:22:44,470
kernel thread which
is going to be called the context so if

1218
00:22:44,470 --> 00:22:44,480
is going to be called the context so if
 

1219
00:22:44,480 --> 00:22:46,390
is going to be called the context so if
xv6 switches from the compiler

1220
00:22:46,390 --> 00:22:46,400
xv6 switches from the compiler
 

1221
00:22:46,400 --> 00:22:50,310
xv6 switches from the compiler
kernel thread to ls's kernel thread

1222
00:22:50,310 --> 00:22:50,320
kernel thread to ls's kernel thread
 

1223
00:22:50,320 --> 00:22:53,830
kernel thread to ls's kernel thread
xv6 will save away the kernel registers

1224
00:22:53,830 --> 00:22:53,840
xv6 will save away the kernel registers
 

1225
00:22:53,840 --> 00:22:56,149
xv6 will save away the kernel registers
in a context for the

1226
00:22:56,149 --> 00:22:56,159
in a context for the
 

1227
00:22:56,159 --> 00:22:59,909
in a context for the
seat the compiler's kernel thread

1228
00:22:59,909 --> 00:22:59,919
seat the compiler's kernel thread
 

1229
00:22:59,919 --> 00:23:04,149
seat the compiler's kernel thread
switch to the ls thread to a complex

1230
00:23:04,149 --> 00:23:04,159
switch to the ls thread to a complex
 

1231
00:23:04,159 --> 00:23:05,909
switch to the ls thread to a complex
scheme which i'll describe a little bit

1232
00:23:05,909 --> 00:23:05,919
scheme which i'll describe a little bit
 

1233
00:23:05,919 --> 00:23:08,710
scheme which i'll describe a little bit
later will restore

1234
00:23:08,710 --> 00:23:08,720
later will restore
 

1235
00:23:08,720 --> 00:23:11,830
later will restore
ls's kernel thread registers from the

1236
00:23:11,830 --> 00:23:11,840
ls's kernel thread registers from the
 

1237
00:23:11,840 --> 00:23:12,310
ls's kernel thread registers from the
same

1238
00:23:12,310 --> 00:23:12,320
same
 

1239
00:23:12,320 --> 00:23:14,630
same
previously saved context from when ls

1240
00:23:14,630 --> 00:23:14,640
previously saved context from when ls
 

1241
00:23:14,640 --> 00:23:15,909
previously saved context from when ls
last left off

1242
00:23:15,909 --> 00:23:15,919
last left off
 

1243
00:23:15,919 --> 00:23:17,750
last left off
maybe ls will finish whatever system

1244
00:23:17,750 --> 00:23:17,760
maybe ls will finish whatever system
 

1245
00:23:17,760 --> 00:23:20,310
maybe ls will finish whatever system
call it was executing you know what

1246
00:23:20,310 --> 00:23:20,320
call it was executing you know what
 

1247
00:23:20,320 --> 00:23:24,310
call it was executing you know what
on the ls's kernel thread stack

1248
00:23:24,310 --> 00:23:24,320
on the ls's kernel thread stack
 

1249
00:23:24,320 --> 00:23:25,909
on the ls's kernel thread stack
um and then return back to ls from the

1250
00:23:25,909 --> 00:23:25,919
um and then return back to ls from the
 

1251
00:23:25,919 --> 00:23:27,830
um and then return back to ls from the
system call and on the way to return to

1252
00:23:27,830 --> 00:23:27,840
system call and on the way to return to
 

1253
00:23:27,840 --> 00:23:29,270
system call and on the way to return to
user space it'll restore these

1254
00:23:29,270 --> 00:23:29,280
user space it'll restore these
 

1255
00:23:29,280 --> 00:23:31,029
user space it'll restore these
previously saved

1256
00:23:31,029 --> 00:23:31,039
previously saved
 

1257
00:23:31,039 --> 00:23:34,549
previously saved
user registers for ls um and then resume

1258
00:23:34,549 --> 00:23:34,559
user registers for ls um and then resume
 

1259
00:23:34,559 --> 00:23:37,830
user registers for ls um and then resume
executing ls so

1260
00:23:37,830 --> 00:23:37,840
executing ls so
 

1261
00:23:37,840 --> 00:23:39,190
executing ls so
there's a bunch of details here which

1262
00:23:39,190 --> 00:23:39,200
there's a bunch of details here which
 

1263
00:23:39,200 --> 00:23:41,029
there's a bunch of details here which
we'll talk about but uh

1264
00:23:41,029 --> 00:23:41,039
we'll talk about but uh
 

1265
00:23:41,039 --> 00:23:42,870
we'll talk about but uh
maybe the main point here is that

1266
00:23:42,870 --> 00:23:42,880
maybe the main point here is that
 

1267
00:23:42,880 --> 00:23:45,029
maybe the main point here is that
whenever in xv6

1268
00:23:45,029 --> 00:23:45,039
whenever in xv6
 

1269
00:23:45,039 --> 00:23:47,830
whenever in xv6
see direct user to user context switches

1270
00:23:47,830 --> 00:23:47,840
see direct user to user context switches
 

1271
00:23:47,840 --> 00:23:48,950
see direct user to user context switches
when we're switching

1272
00:23:48,950 --> 00:23:48,960
when we're switching
 

1273
00:23:48,960 --> 00:23:52,070
when we're switching
from one process to another always

1274
00:23:52,070 --> 00:23:52,080
from one process to another always
 

1275
00:23:52,080 --> 00:23:55,590
from one process to another always
the sort of strategy by which xv6

1276
00:23:55,590 --> 00:23:55,600
the sort of strategy by which xv6
 

1277
00:23:55,600 --> 00:23:57,430
the sort of strategy by which xv6
switches from executing one process to

1278
00:23:57,430 --> 00:23:57,440
switches from executing one process to
 

1279
00:23:57,440 --> 00:23:58,789
switches from executing one process to
another process

1280
00:23:58,789 --> 00:23:58,799
another process
 

1281
00:23:58,799 --> 00:24:00,789
another process
is you jump into the kernel save the

1282
00:24:00,789 --> 00:24:00,799
is you jump into the kernel save the
 

1283
00:24:00,799 --> 00:24:02,470
is you jump into the kernel save the
process state run this

1284
00:24:02,470 --> 00:24:02,480
process state run this
 

1285
00:24:02,480 --> 00:24:04,710
process state run this
process as kernel thread switch to the

1286
00:24:04,710 --> 00:24:04,720
process as kernel thread switch to the
 

1287
00:24:04,720 --> 00:24:05,750
process as kernel thread switch to the
kernel thread of a

1288
00:24:05,750 --> 00:24:05,760
kernel thread of a
 

1289
00:24:05,760 --> 00:24:07,590
kernel thread of a
another process that's suspended itself

1290
00:24:07,590 --> 00:24:07,600
another process that's suspended itself
 

1291
00:24:07,600 --> 00:24:09,510
another process that's suspended itself
and then return and restore user

1292
00:24:09,510 --> 00:24:09,520
and then return and restore user
 

1293
00:24:09,520 --> 00:24:10,950
and then return and restore user
registers so it's always the sort of

1294
00:24:10,950 --> 00:24:10,960
registers so it's always the sort of
 

1295
00:24:10,960 --> 00:24:12,230
registers so it's always the sort of
indirect strategy

1296
00:24:12,230 --> 00:24:12,240
indirect strategy
 

1297
00:24:12,240 --> 00:24:13,510
indirect strategy
it's actually even more indirect than

1298
00:24:13,510 --> 00:24:13,520
it's actually even more indirect than
 

1299
00:24:13,520 --> 00:24:15,750
it's actually even more indirect than
this to threat switch

1300
00:24:15,750 --> 00:24:15,760
this to threat switch
 

1301
00:24:15,760 --> 00:24:17,350
this to threat switch
where the net effect is to switch from

1302
00:24:17,350 --> 00:24:17,360
where the net effect is to switch from
 

1303
00:24:17,360 --> 00:24:18,950
where the net effect is to switch from
one user process

1304
00:24:18,950 --> 00:24:18,960
one user process
 

1305
00:24:18,960 --> 00:24:23,909
one user process
to another user process

1306
00:24:23,909 --> 00:24:23,919

 

1307
00:24:23,919 --> 00:24:28,950

questions about this diagram or anything

1308
00:24:28,950 --> 00:24:28,960

 

1309
00:24:28,960 --> 00:24:31,510

the switch to the scheduler that happens

1310
00:24:31,510 --> 00:24:31,520
the switch to the scheduler that happens
 

1311
00:24:31,520 --> 00:24:31,990
the switch to the scheduler that happens
in between

1312
00:24:31,990 --> 00:24:32,000
in between
 

1313
00:24:32,000 --> 00:24:35,510
in between
those two right yep all right

1314
00:24:35,510 --> 00:24:35,520
those two right yep all right
 

1315
00:24:35,520 --> 00:24:37,430
those two right yep all right
let me talk about the scheduler so the

1316
00:24:37,430 --> 00:24:37,440
let me talk about the scheduler so the
 

1317
00:24:37,440 --> 00:24:38,710
let me talk about the scheduler so the
real picture's actually

1318
00:24:38,710 --> 00:24:38,720
real picture's actually
 

1319
00:24:38,720 --> 00:24:41,909
real picture's actually
um significantly more complex than that

1320
00:24:41,909 --> 00:24:41,919
um significantly more complex than that
 

1321
00:24:41,919 --> 00:24:46,630
um significantly more complex than that
um this is a more

1322
00:24:46,630 --> 00:24:46,640
um this is a more
 

1323
00:24:46,640 --> 00:24:48,070
um this is a more
going to be more full diagram let's say

1324
00:24:48,070 --> 00:24:48,080
going to be more full diagram let's say
 

1325
00:24:48,080 --> 00:24:51,029
going to be more full diagram let's say
we have process 1

1326
00:24:51,029 --> 00:24:51,039
we have process 1
 

1327
00:24:51,039 --> 00:24:55,350
we have process 1
which is executing and process 2 which

1328
00:24:55,350 --> 00:24:55,360
which is executing and process 2 which
 

1329
00:24:55,360 --> 00:24:58,070
which is executing and process 2 which
is runnable but not currently running

1330
00:24:58,070 --> 00:24:58,080
is runnable but not currently running
 

1331
00:24:58,080 --> 00:24:59,590
is runnable but not currently running
now the additional layer of details we

1332
00:24:59,590 --> 00:24:59,600
now the additional layer of details we
 

1333
00:24:59,600 --> 00:25:01,269
now the additional layer of details we
actually have multiple cores

1334
00:25:01,269 --> 00:25:01,279
actually have multiple cores
 

1335
00:25:01,279 --> 00:25:04,310
actually have multiple cores
um in xv6 let's say we have two cores so

1336
00:25:04,310 --> 00:25:04,320
um in xv6 let's say we have two cores so
 

1337
00:25:04,320 --> 00:25:06,310
um in xv6 let's say we have two cores so
that means that sort of at the hardware

1338
00:25:06,310 --> 00:25:06,320
that means that sort of at the hardware
 

1339
00:25:06,320 --> 00:25:07,750
that means that sort of at the hardware
level

1340
00:25:07,750 --> 00:25:07,760
level
 

1341
00:25:07,760 --> 00:25:11,350
level
um we have cpu0 which is one of the

1342
00:25:11,350 --> 00:25:11,360
um we have cpu0 which is one of the
 

1343
00:25:11,360 --> 00:25:12,630
um we have cpu0 which is one of the
cores

1344
00:25:12,630 --> 00:25:12,640
cores
 

1345
00:25:12,640 --> 00:25:19,909
cores
and let's say cpu one

1346
00:25:19,909 --> 00:25:19,919

 

1347
00:25:19,919 --> 00:25:22,390

and the more full story about how we get

1348
00:25:22,390 --> 00:25:22,400
and the more full story about how we get
 

1349
00:25:22,400 --> 00:25:23,510
and the more full story about how we get
from

1350
00:25:23,510 --> 00:25:23,520
from
 

1351
00:25:23,520 --> 00:25:26,630
from
executing user space

1352
00:25:26,630 --> 00:25:26,640
executing user space
 

1353
00:25:26,640 --> 00:25:29,990
executing user space
to in one process executing user spaces

1354
00:25:29,990 --> 00:25:30,000
to in one process executing user spaces
 

1355
00:25:30,000 --> 00:25:32,070
to in one process executing user spaces
in another runnable but not yet running

1356
00:25:32,070 --> 00:25:32,080
in another runnable but not yet running
 

1357
00:25:32,080 --> 00:25:33,830
in another runnable but not yet running
process

1358
00:25:33,830 --> 00:25:33,840
process
 

1359
00:25:33,840 --> 00:25:36,149
process
now the first part's about the same as i

1360
00:25:36,149 --> 00:25:36,159
now the first part's about the same as i
 

1361
00:25:36,159 --> 00:25:36,950
now the first part's about the same as i
talked about

1362
00:25:36,950 --> 00:25:36,960
talked about
 

1363
00:25:36,960 --> 00:25:40,630
talked about
and they say a timer interrupt forces

1364
00:25:40,630 --> 00:25:40,640
and they say a timer interrupt forces
 

1365
00:25:40,640 --> 00:25:42,710
and they say a timer interrupt forces
transfer control from the user process

1366
00:25:42,710 --> 00:25:42,720
transfer control from the user process
 

1367
00:25:42,720 --> 00:25:46,149
transfer control from the user process
into the kernel the trampoline code

1368
00:25:46,149 --> 00:25:46,159
into the kernel the trampoline code
 

1369
00:25:46,159 --> 00:25:48,310
into the kernel the trampoline code
saves the user registers the trap frame

1370
00:25:48,310 --> 00:25:48,320
saves the user registers the trap frame
 

1371
00:25:48,320 --> 00:25:51,430
saves the user registers the trap frame
for process one

1372
00:25:51,430 --> 00:25:51,440

 

1373
00:25:51,440 --> 00:25:55,190

and then executes user trap which

1374
00:25:55,190 --> 00:25:55,200
and then executes user trap which
 

1375
00:25:55,200 --> 00:25:56,149
and then executes user trap which
you know figures out what to do with

1376
00:25:56,149 --> 00:25:56,159
you know figures out what to do with
 

1377
00:25:56,159 --> 00:25:58,149
you know figures out what to do with
this trap or interrupt you know system

1378
00:25:58,149 --> 00:25:58,159
this trap or interrupt you know system
 

1379
00:25:58,159 --> 00:25:58,710
this trap or interrupt you know system
call

1380
00:25:58,710 --> 00:25:58,720
call
 

1381
00:25:58,720 --> 00:26:01,110
call
let's say it's a for a little while

1382
00:26:01,110 --> 00:26:01,120
let's say it's a for a little while
 

1383
00:26:01,120 --> 00:26:02,470
let's say it's a for a little while
we're executing

1384
00:26:02,470 --> 00:26:02,480
we're executing
 

1385
00:26:02,480 --> 00:26:06,149
we're executing
ordinary kernel c code on the kernel

1386
00:26:06,149 --> 00:26:06,159
ordinary kernel c code on the kernel
 

1387
00:26:06,159 --> 00:26:10,310
ordinary kernel c code on the kernel
stack of process one

1388
00:26:10,310 --> 00:26:10,320
stack of process one
 

1389
00:26:10,320 --> 00:26:12,070
stack of process one
let's say process one the kernel code

1390
00:26:12,070 --> 00:26:12,080
let's say process one the kernel code
 

1391
00:26:12,080 --> 00:26:13,909
let's say process one the kernel code
for process ones decides it wants to

1392
00:26:13,909 --> 00:26:13,919
for process ones decides it wants to
 

1393
00:26:13,919 --> 00:26:16,870
for process ones decides it wants to
yield the cpu um it does a bunch of

1394
00:26:16,870 --> 00:26:16,880
yield the cpu um it does a bunch of
 

1395
00:26:16,880 --> 00:26:18,549
yield the cpu um it does a bunch of
things which we'll see the details of

1396
00:26:18,549 --> 00:26:18,559
things which we'll see the details of
 

1397
00:26:18,559 --> 00:26:21,510
things which we'll see the details of
um that end up in a call to this routine

1398
00:26:21,510 --> 00:26:21,520
um that end up in a call to this routine
 

1399
00:26:21,520 --> 00:26:22,789
um that end up in a call to this routine
switch

1400
00:26:22,789 --> 00:26:22,799
switch
 

1401
00:26:22,799 --> 00:26:24,789
switch
just sort of the one of the central

1402
00:26:24,789 --> 00:26:24,799
just sort of the one of the central
 

1403
00:26:24,799 --> 00:26:26,230
just sort of the one of the central
routines in this story

1404
00:26:26,230 --> 00:26:26,240
routines in this story
 

1405
00:26:26,240 --> 00:26:30,070
routines in this story
switch saves away this context the

1406
00:26:30,070 --> 00:26:30,080
switch saves away this context the
 

1407
00:26:30,080 --> 00:26:31,269
switch saves away this context the
registers

1408
00:26:31,269 --> 00:26:31,279
registers
 

1409
00:26:31,279 --> 00:26:33,029
registers
for the kernel thread that's running in

1410
00:26:33,029 --> 00:26:33,039
for the kernel thread that's running in
 

1411
00:26:33,039 --> 00:26:34,789
for the kernel thread that's running in
context want so there's two sets of

1412
00:26:34,789 --> 00:26:34,799
context want so there's two sets of
 

1413
00:26:34,799 --> 00:26:36,470
context want so there's two sets of
registers the user registers

1414
00:26:36,470 --> 00:26:36,480
registers the user registers
 

1415
00:26:36,480 --> 00:26:38,630
registers the user registers
the trap frame the kernel thread

1416
00:26:38,630 --> 00:26:38,640
the trap frame the kernel thread
 

1417
00:26:38,640 --> 00:26:42,470
the trap frame the kernel thread
registers in the context

1418
00:26:42,470 --> 00:26:42,480

 

1419
00:26:42,480 --> 00:26:44,310

switch doesn't actually switch switches

1420
00:26:44,310 --> 00:26:44,320
switch doesn't actually switch switches
 

1421
00:26:44,320 --> 00:26:46,710
switch doesn't actually switch switches
from one content from one thread to

1422
00:26:46,710 --> 00:26:46,720
from one content from one thread to
 

1423
00:26:46,720 --> 00:26:48,549
from one content from one thread to
another but in fact

1424
00:26:48,549 --> 00:26:48,559
another but in fact
 

1425
00:26:48,559 --> 00:26:52,070
another but in fact
the way xp6 is designed the only place

1426
00:26:52,070 --> 00:26:52,080
the way xp6 is designed the only place
 

1427
00:26:52,080 --> 00:26:55,510
the way xp6 is designed the only place
that a user thread sorry the kernel

1428
00:26:55,510 --> 00:26:55,520
that a user thread sorry the kernel
 

1429
00:26:55,520 --> 00:26:57,669
that a user thread sorry the kernel
thread running on a cpu can switch to

1430
00:26:57,669 --> 00:26:57,679
thread running on a cpu can switch to
 

1431
00:26:57,679 --> 00:26:59,510
thread running on a cpu can switch to
is what's called the scheduler thread

1432
00:26:59,510 --> 00:26:59,520
is what's called the scheduler thread
 

1433
00:26:59,520 --> 00:27:02,870
is what's called the scheduler thread
for that cpu

1434
00:27:02,870 --> 00:27:02,880

 

1435
00:27:02,880 --> 00:27:04,549

so we can't even switch directly to

1436
00:27:04,549 --> 00:27:04,559
so we can't even switch directly to
 

1437
00:27:04,559 --> 00:27:06,630
so we can't even switch directly to
another process we can only switch to

1438
00:27:06,630 --> 00:27:06,640
another process we can only switch to
 

1439
00:27:06,640 --> 00:27:10,310
another process we can only switch to
the scheduler thread so there's a

1440
00:27:10,310 --> 00:27:10,320

 

1441
00:27:10,320 --> 00:27:13,590

the complete thread apparatus

1442
00:27:13,590 --> 00:27:13,600
the complete thread apparatus
 

1443
00:27:13,600 --> 00:27:16,390
the complete thread apparatus
dedicated to the scheduler for cpu zero

1444
00:27:16,390 --> 00:27:16,400
dedicated to the scheduler for cpu zero
 

1445
00:27:16,400 --> 00:27:17,830
dedicated to the scheduler for cpu zero
since we're running on cpus

1446
00:27:17,830 --> 00:27:17,840
since we're running on cpus
 

1447
00:27:17,840 --> 00:27:20,470
since we're running on cpus
this switch is going to switch to the

1448
00:27:20,470 --> 00:27:20,480
this switch is going to switch to the
 

1449
00:27:20,480 --> 00:27:22,870
this switch is going to switch to the
previously saved

1450
00:27:22,870 --> 00:27:22,880
previously saved
 

1451
00:27:22,880 --> 00:27:25,510
previously saved
registers for the scheduler thread so

1452
00:27:25,510 --> 00:27:25,520
registers for the scheduler thread so
 

1453
00:27:25,520 --> 00:27:29,590
registers for the scheduler thread so
let's say it's scheduler 0

1454
00:27:29,590 --> 00:27:29,600

 

1455
00:27:29,600 --> 00:27:33,350

and in the scheduler for cpu 0

1456
00:27:33,350 --> 00:27:33,360
and in the scheduler for cpu 0
 

1457
00:27:33,360 --> 00:27:35,990
and in the scheduler for cpu 0
switch will by restoring these registers

1458
00:27:35,990 --> 00:27:36,000
switch will by restoring these registers
 

1459
00:27:36,000 --> 00:27:37,430
switch will by restoring these registers
since the registers include the stack

1460
00:27:37,430 --> 00:27:37,440
since the registers include the stack
 

1461
00:27:37,440 --> 00:27:38,389
since the registers include the stack
pointer

1462
00:27:38,389 --> 00:27:38,399
pointer
 

1463
00:27:38,399 --> 00:27:40,870
pointer
the return from switch as we'll see will

1464
00:27:40,870 --> 00:27:40,880
the return from switch as we'll see will
 

1465
00:27:40,880 --> 00:27:43,750
the return from switch as we'll see will
now actually

1466
00:27:43,750 --> 00:27:43,760

 

1467
00:27:43,760 --> 00:27:48,789

return up to the um scheduler

1468
00:27:48,789 --> 00:27:48,799
return up to the um scheduler
 

1469
00:27:48,799 --> 00:27:52,549
return up to the um scheduler
function

1470
00:27:52,549 --> 00:27:52,559

 

1471
00:27:52,559 --> 00:27:55,110

on cpu zero and this scheduler function

1472
00:27:55,110 --> 00:27:55,120
on cpu zero and this scheduler function
 

1473
00:27:55,120 --> 00:27:57,510
on cpu zero and this scheduler function
will do some cleanup to finish putting

1474
00:27:57,510 --> 00:27:57,520
will do some cleanup to finish putting
 

1475
00:27:57,520 --> 00:27:59,590
will do some cleanup to finish putting
process one to sleep then it'll look in

1476
00:27:59,590 --> 00:27:59,600
process one to sleep then it'll look in
 

1477
00:27:59,600 --> 00:28:00,950
process one to sleep then it'll look in
the process

1478
00:28:00,950 --> 00:28:00,960
the process
 

1479
00:28:00,960 --> 00:28:02,389
the process
table for another process to run a

1480
00:28:02,389 --> 00:28:02,399
table for another process to run a
 

1481
00:28:02,399 --> 00:28:04,549
table for another process to run a
runnable process

1482
00:28:04,549 --> 00:28:04,559
runnable process
 

1483
00:28:04,559 --> 00:28:07,909
runnable process
and if it finds one and so we've

1484
00:28:07,909 --> 00:28:07,919
and if it finds one and so we've
 

1485
00:28:07,919 --> 00:28:09,830
and if it finds one and so we've
sort of gone down here and up into the

1486
00:28:09,830 --> 00:28:09,840
sort of gone down here and up into the
 

1487
00:28:09,840 --> 00:28:11,909
sort of gone down here and up into the
scheduler if the scheduler finds another

1488
00:28:11,909 --> 00:28:11,919
scheduler if the scheduler finds another
 

1489
00:28:11,919 --> 00:28:13,029
scheduler if the scheduler finds another
process to run or even

1490
00:28:13,029 --> 00:28:13,039
process to run or even
 

1491
00:28:13,039 --> 00:28:15,590
process to run or even
finds if process one is runnable and

1492
00:28:15,590 --> 00:28:15,600
finds if process one is runnable and
 

1493
00:28:15,600 --> 00:28:17,110
finds if process one is runnable and
still wants to run it may find process

1494
00:28:17,110 --> 00:28:17,120
still wants to run it may find process
 

1495
00:28:17,120 --> 00:28:18,710
still wants to run it may find process
one nothing else nothing else wants to

1496
00:28:18,710 --> 00:28:18,720
one nothing else nothing else wants to
 

1497
00:28:18,720 --> 00:28:19,669
one nothing else nothing else wants to
run

1498
00:28:19,669 --> 00:28:19,679
run
 

1499
00:28:19,679 --> 00:28:21,830
run
but in any case the scheduler will call

1500
00:28:21,830 --> 00:28:21,840
but in any case the scheduler will call
 

1501
00:28:21,840 --> 00:28:23,190
but in any case the scheduler will call
switch again to

1502
00:28:23,190 --> 00:28:23,200
switch again to
 

1503
00:28:23,200 --> 00:28:27,909
switch again to
switch contexts to say process two

1504
00:28:27,909 --> 00:28:27,919
switch contexts to say process two
 

1505
00:28:27,919 --> 00:28:29,669
switch contexts to say process two
in the process of which it will save its

1506
00:28:29,669 --> 00:28:29,679
in the process of which it will save its
 

1507
00:28:29,679 --> 00:28:31,029
in the process of which it will save its
own registers again

1508
00:28:31,029 --> 00:28:31,039
own registers again
 

1509
00:28:31,039 --> 00:28:33,750
own registers again
in its own context there'll be a

1510
00:28:33,750 --> 00:28:33,760
in its own context there'll be a
 

1511
00:28:33,760 --> 00:28:35,830
in its own context there'll be a
previously saved

1512
00:28:35,830 --> 00:28:35,840
previously saved
 

1513
00:28:35,840 --> 00:28:37,909
previously saved
context too from whenever process two

1514
00:28:37,909 --> 00:28:37,919
context too from whenever process two
 

1515
00:28:37,919 --> 00:28:38,950
context too from whenever process two
left off

1516
00:28:38,950 --> 00:28:38,960
left off
 

1517
00:28:38,960 --> 00:28:41,029
left off
that those this set of registers will be

1518
00:28:41,029 --> 00:28:41,039
that those this set of registers will be
 

1519
00:28:41,039 --> 00:28:42,710
that those this set of registers will be
restored

1520
00:28:42,710 --> 00:28:42,720
restored
 

1521
00:28:42,720 --> 00:28:44,549
restored
process two will have made a previous

1522
00:28:44,549 --> 00:28:44,559
process two will have made a previous
 

1523
00:28:44,559 --> 00:28:46,789
process two will have made a previous
call to switch

1524
00:28:46,789 --> 00:28:46,799
call to switch
 

1525
00:28:46,799 --> 00:28:49,350
call to switch
um to switch to the scheduler thread

1526
00:28:49,350 --> 00:28:49,360
um to switch to the scheduler thread
 

1527
00:28:49,360 --> 00:28:51,110
um to switch to the scheduler thread
just like process one did when it left

1528
00:28:51,110 --> 00:28:51,120
just like process one did when it left
 

1529
00:28:51,120 --> 00:28:51,669
just like process one did when it left
off

1530
00:28:51,669 --> 00:28:51,679
off
 

1531
00:28:51,679 --> 00:28:53,190
off
that call to switch will return to

1532
00:28:53,190 --> 00:28:53,200
that call to switch will return to
 

1533
00:28:53,200 --> 00:28:54,870
that call to switch will return to
whatever

1534
00:28:54,870 --> 00:28:54,880
whatever
 

1535
00:28:54,880 --> 00:28:56,870
whatever
system call or interrupt process two was

1536
00:28:56,870 --> 00:28:56,880
system call or interrupt process two was
 

1537
00:28:56,880 --> 00:28:58,950
system call or interrupt process two was
in when that's finished

1538
00:28:58,950 --> 00:28:58,960
in when that's finished
 

1539
00:28:58,960 --> 00:29:01,190
in when that's finished
there will be a previously saved trap

1540
00:29:01,190 --> 00:29:01,200
there will be a previously saved trap
 

1541
00:29:01,200 --> 00:29:02,630
there will be a previously saved trap
frame for process 2

1542
00:29:02,630 --> 00:29:02,640
frame for process 2
 

1543
00:29:02,640 --> 00:29:04,310
frame for process 2
that will contain user registers those

1544
00:29:04,310 --> 00:29:04,320
that will contain user registers those
 

1545
00:29:04,320 --> 00:29:06,389
that will contain user registers those
will be restored and will

1546
00:29:06,389 --> 00:29:06,399
will be restored and will
 

1547
00:29:06,399 --> 00:29:10,310
will be restored and will
return back up into user space

1548
00:29:10,310 --> 00:29:10,320

 

1549
00:29:10,320 --> 00:29:12,389

and there's a complete a separate

1550
00:29:12,389 --> 00:29:12,399
and there's a complete a separate
 

1551
00:29:12,399 --> 00:29:14,470
and there's a complete a separate
scheduler

1552
00:29:14,470 --> 00:29:14,480
scheduler
 

1553
00:29:14,480 --> 00:29:16,870
scheduler
thread for each cpu so it'll also be

1554
00:29:16,870 --> 00:29:16,880
thread for each cpu so it'll also be
 

1555
00:29:16,880 --> 00:29:19,830
thread for each cpu so it'll also be
saved

1556
00:29:19,830 --> 00:29:19,840

 

1557
00:29:19,840 --> 00:29:22,310

context for the scheduler thread for cpu

1558
00:29:22,310 --> 00:29:22,320
context for the scheduler thread for cpu
 

1559
00:29:22,320 --> 00:29:23,990
context for the scheduler thread for cpu
one

1560
00:29:23,990 --> 00:29:24,000
one
 

1561
00:29:24,000 --> 00:29:27,750
one
and a scheduler loop

1562
00:29:27,750 --> 00:29:27,760
and a scheduler loop
 

1563
00:29:27,760 --> 00:29:29,430
and a scheduler loop
running on scheduler one and whatever

1564
00:29:29,430 --> 00:29:29,440
running on scheduler one and whatever
 

1565
00:29:29,440 --> 00:29:31,029
running on scheduler one and whatever
process you know process three or

1566
00:29:31,029 --> 00:29:31,039
process you know process three or
 

1567
00:29:31,039 --> 00:29:31,669
process you know process three or
something

1568
00:29:31,669 --> 00:29:31,679
something
 

1569
00:29:31,679 --> 00:29:33,909
something
is running on cpu one when it decides to

1570
00:29:33,909 --> 00:29:33,919
is running on cpu one when it decides to
 

1571
00:29:33,919 --> 00:29:37,430
is running on cpu one when it decides to
give up the cpu it'll switch into

1572
00:29:37,430 --> 00:29:37,440
give up the cpu it'll switch into
 

1573
00:29:37,440 --> 00:29:40,789
give up the cpu it'll switch into
the scheduler thread for it for its

1574
00:29:40,789 --> 00:29:40,799
the scheduler thread for it for its
 

1575
00:29:40,799 --> 00:29:45,110
the scheduler thread for it for its
cpu all right there's a question where

1576
00:29:45,110 --> 00:29:45,120
cpu all right there's a question where
 

1577
00:29:45,120 --> 00:29:48,149
cpu all right there's a question where
the context stored

1578
00:29:48,149 --> 00:29:48,159
the context stored
 

1579
00:29:48,159 --> 00:29:51,269
the context stored
it turns out that for the operations

1580
00:29:51,269 --> 00:29:51,279
it turns out that for the operations
 

1581
00:29:51,279 --> 00:29:52,710
it turns out that for the operations
i've been talking about

1582
00:29:52,710 --> 00:29:52,720
i've been talking about
 

1583
00:29:52,720 --> 00:29:57,190
i've been talking about
the saved in fact always the

1584
00:29:57,190 --> 00:29:57,200
the saved in fact always the
 

1585
00:29:57,200 --> 00:30:01,110
the saved in fact always the
for a thread switch um

1586
00:30:01,110 --> 00:30:01,120
for a thread switch um
 

1587
00:30:01,120 --> 00:30:03,590
for a thread switch um
these contexts these saved register sets

1588
00:30:03,590 --> 00:30:03,600
these contexts these saved register sets
 

1589
00:30:03,600 --> 00:30:05,190
these contexts these saved register sets
for kernel threads are in the process

1590
00:30:05,190 --> 00:30:05,200
for kernel threads are in the process
 

1591
00:30:05,200 --> 00:30:06,149
for kernel threads are in the process
structure

1592
00:30:06,149 --> 00:30:06,159
structure
 

1593
00:30:06,159 --> 00:30:09,029
structure
so any given kernel thread can only have

1594
00:30:09,029 --> 00:30:09,039
so any given kernel thread can only have
 

1595
00:30:09,039 --> 00:30:09,430
so any given kernel thread can only have
one

1596
00:30:09,430 --> 00:30:09,440
one
 

1597
00:30:09,440 --> 00:30:12,549
one
set of saved kernel registers because

1598
00:30:12,549 --> 00:30:12,559
set of saved kernel registers because
 

1599
00:30:12,559 --> 00:30:13,830
set of saved kernel registers because
each thread is

1600
00:30:13,830 --> 00:30:13,840
each thread is
 

1601
00:30:13,840 --> 00:30:15,590
each thread is
only executing at sort of a single place

1602
00:30:15,590 --> 00:30:15,600
only executing at sort of a single place
 

1603
00:30:15,600 --> 00:30:16,870
only executing at sort of a single place
and its context

1604
00:30:16,870 --> 00:30:16,880
and its context
 

1605
00:30:16,880 --> 00:30:19,110
and its context
kind of reflects that place that it was

1606
00:30:19,110 --> 00:30:19,120
kind of reflects that place that it was
 

1607
00:30:19,120 --> 00:30:20,950
kind of reflects that place that it was
executing when it left off because

1608
00:30:20,950 --> 00:30:20,960
executing when it left off because
 

1609
00:30:20,960 --> 00:30:23,269
executing when it left off because
a thread is a single thread of control

1610
00:30:23,269 --> 00:30:23,279
a thread is a single thread of control
 

1611
00:30:23,279 --> 00:30:24,470
a thread is a single thread of control
so a thread

1612
00:30:24,470 --> 00:30:24,480
so a thread
 

1613
00:30:24,480 --> 00:30:26,470
so a thread
really only needs one context full of

1614
00:30:26,470 --> 00:30:26,480
really only needs one context full of
 

1615
00:30:26,480 --> 00:30:28,070
really only needs one context full of
registers so it's in the process

1616
00:30:28,070 --> 00:30:28,080
registers so it's in the process
 

1617
00:30:28,080 --> 00:30:28,789
registers so it's in the process
structure it's p

1618
00:30:28,789 --> 00:30:28,799
structure it's p
 

1619
00:30:28,799 --> 00:30:31,990
structure it's p
arrow

1620
00:30:31,990 --> 00:30:32,000

 

1621
00:30:32,000 --> 00:30:35,269

procontext

1622
00:30:35,269 --> 00:30:35,279

 

1623
00:30:35,279 --> 00:30:37,029

and the scheduler each scheduler thread

1624
00:30:37,029 --> 00:30:37,039
and the scheduler each scheduler thread
 

1625
00:30:37,039 --> 00:30:39,110
and the scheduler each scheduler thread
has its own context which is actually

1626
00:30:39,110 --> 00:30:39,120
has its own context which is actually
 

1627
00:30:39,120 --> 00:30:40,149
has its own context which is actually
not in the

1628
00:30:40,149 --> 00:30:40,159
not in the
 

1629
00:30:40,159 --> 00:30:42,389
not in the
there's no process associated with this

1630
00:30:42,389 --> 00:30:42,399
there's no process associated with this
 

1631
00:30:42,399 --> 00:30:43,590
there's no process associated with this
scheduler thread

1632
00:30:43,590 --> 00:30:43,600
scheduler thread
 

1633
00:30:43,600 --> 00:30:45,669
scheduler thread
so this is actually the scheduler's

1634
00:30:45,669 --> 00:30:45,679
so this is actually the scheduler's
 

1635
00:30:45,679 --> 00:30:47,590
so this is actually the scheduler's
contacts is stored in

1636
00:30:47,590 --> 00:30:47,600
contacts is stored in
 

1637
00:30:47,600 --> 00:30:51,350
contacts is stored in
the struct cpu for that core

1638
00:30:51,350 --> 00:30:51,360
the struct cpu for that core
 

1639
00:30:51,360 --> 00:30:53,269
the struct cpu for that core
there's an array of these cpu structs

1640
00:30:53,269 --> 00:30:53,279
there's an array of these cpu structs
 

1641
00:30:53,279 --> 00:30:55,110
there's an array of these cpu structs
one per core each one has a

1642
00:30:55,110 --> 00:30:55,120
one per core each one has a
 

1643
00:30:55,120 --> 00:30:58,230
one per core each one has a
context

1644
00:30:58,230 --> 00:30:58,240

 

1645
00:30:58,240 --> 00:30:59,990

uh question why can't we include the

1646
00:30:59,990 --> 00:31:00,000
uh question why can't we include the
 

1647
00:31:00,000 --> 00:31:01,430
uh question why can't we include the
registers in the trap frame for the

1648
00:31:01,430 --> 00:31:01,440
registers in the trap frame for the
 

1649
00:31:01,440 --> 00:31:02,630
registers in the trap frame for the
process

1650
00:31:02,630 --> 00:31:02,640
process
 

1651
00:31:02,640 --> 00:31:06,789
process
that is uh you know actually the

1652
00:31:06,789 --> 00:31:06,799
that is uh you know actually the
 

1653
00:31:06,799 --> 00:31:08,389
that is uh you know actually the
those registers could be stored in the

1654
00:31:08,389 --> 00:31:08,399
those registers could be stored in the
 

1655
00:31:08,399 --> 00:31:10,149
those registers could be stored in the
trap frame which is made because there's

1656
00:31:10,149 --> 00:31:10,159
trap frame which is made because there's
 

1657
00:31:10,159 --> 00:31:12,310
trap frame which is made because there's
only one saved set of

1658
00:31:12,310 --> 00:31:12,320
only one saved set of
 

1659
00:31:12,320 --> 00:31:15,029
only one saved set of
kernel thread registers per process we

1660
00:31:15,029 --> 00:31:15,039
kernel thread registers per process we
 

1661
00:31:15,039 --> 00:31:17,190
kernel thread registers per process we
could save them in any data structure

1662
00:31:17,190 --> 00:31:17,200
could save them in any data structure
 

1663
00:31:17,200 --> 00:31:19,430
could save them in any data structure
for which there's one you know element

1664
00:31:19,430 --> 00:31:19,440
for which there's one you know element
 

1665
00:31:19,440 --> 00:31:21,430
for which there's one you know element
of instance of that data structure per

1666
00:31:21,430 --> 00:31:21,440
of instance of that data structure per
 

1667
00:31:21,440 --> 00:31:22,310
of instance of that data structure per
process

1668
00:31:22,310 --> 00:31:22,320
process
 

1669
00:31:22,320 --> 00:31:24,310
process
now there's one struct proc process

1670
00:31:24,310 --> 00:31:24,320
now there's one struct proc process
 

1671
00:31:24,320 --> 00:31:25,750
now there's one struct proc process
there's one struct trap frame for

1672
00:31:25,750 --> 00:31:25,760
there's one struct trap frame for
 

1673
00:31:25,760 --> 00:31:26,549
there's one struct trap frame for
process

1674
00:31:26,549 --> 00:31:26,559
process
 

1675
00:31:26,559 --> 00:31:28,070
process
we could store the registers in the trap

1676
00:31:28,070 --> 00:31:28,080
we could store the registers in the trap
 

1677
00:31:28,080 --> 00:31:31,190
we could store the registers in the trap
frame

1678
00:31:31,190 --> 00:31:31,200

 

1679
00:31:31,200 --> 00:31:33,990

but i mean just sort of for maybe

1680
00:31:33,990 --> 00:31:34,000
but i mean just sort of for maybe
 

1681
00:31:34,000 --> 00:31:36,070
but i mean just sort of for maybe
simplicity or clarity of code the trap

1682
00:31:36,070 --> 00:31:36,080
simplicity or clarity of code the trap
 

1683
00:31:36,080 --> 00:31:36,549
simplicity or clarity of code the trap
frame

1684
00:31:36,549 --> 00:31:36,559
frame
 

1685
00:31:36,559 --> 00:31:39,669
frame
i think entirely consists of uh

1686
00:31:39,669 --> 00:31:39,679
i think entirely consists of uh
 

1687
00:31:39,679 --> 00:31:41,430
i think entirely consists of uh
data that's needed when entering and

1688
00:31:41,430 --> 00:31:41,440
data that's needed when entering and
 

1689
00:31:41,440 --> 00:31:43,029
data that's needed when entering and
leaving the kernel

1690
00:31:43,029 --> 00:31:43,039
leaving the kernel
 

1691
00:31:43,039 --> 00:31:46,230
leaving the kernel
and the struct context is consists of

1692
00:31:46,230 --> 00:31:46,240
and the struct context is consists of
 

1693
00:31:46,240 --> 00:31:47,430
and the struct context is consists of
the stuff that needs to be saved and

1694
00:31:47,430 --> 00:31:47,440
the stuff that needs to be saved and
 

1695
00:31:47,440 --> 00:31:48,230
the stuff that needs to be saved and
restored when

1696
00:31:48,230 --> 00:31:48,240
restored when
 

1697
00:31:48,240 --> 00:31:50,789
restored when
switching to and from between the kernel

1698
00:31:50,789 --> 00:31:50,799
switching to and from between the kernel
 

1699
00:31:50,799 --> 00:31:51,590
switching to and from between the kernel
thread and the

1700
00:31:51,590 --> 00:31:51,600
thread and the
 

1701
00:31:51,600 --> 00:31:55,509
thread and the
scheduler thread okay question is yield

1702
00:31:55,509 --> 00:31:55,519
scheduler thread okay question is yield
 

1703
00:31:55,519 --> 00:31:56,789
scheduler thread okay question is yield
something that's called by the user or

1704
00:31:56,789 --> 00:31:56,799
something that's called by the user or
 

1705
00:31:56,799 --> 00:31:59,110
something that's called by the user or
the kernel it's called by the kernel

1706
00:31:59,110 --> 00:31:59,120
the kernel it's called by the kernel
 

1707
00:31:59,120 --> 00:32:01,269
the kernel it's called by the kernel
so the user threads there's not really a

1708
00:32:01,269 --> 00:32:01,279
so the user threads there's not really a
 

1709
00:32:01,279 --> 00:32:03,990
so the user threads there's not really a
direct way in xv6 for user threads to

1710
00:32:03,990 --> 00:32:04,000
direct way in xv6 for user threads to
 

1711
00:32:04,000 --> 00:32:07,350
direct way in xv6 for user threads to
talk about um yielding the cpu or

1712
00:32:07,350 --> 00:32:07,360
talk about um yielding the cpu or
 

1713
00:32:07,360 --> 00:32:08,470
talk about um yielding the cpu or
switching

1714
00:32:08,470 --> 00:32:08,480
switching
 

1715
00:32:08,480 --> 00:32:11,190
switching
uh it's done by the kernel kind of

1716
00:32:11,190 --> 00:32:11,200
uh it's done by the kernel kind of
 

1717
00:32:11,200 --> 00:32:13,110
uh it's done by the kernel kind of
transparently

1718
00:32:13,110 --> 00:32:13,120
transparently
 

1719
00:32:13,120 --> 00:32:14,470
transparently
you know at points in time when the

1720
00:32:14,470 --> 00:32:14,480
you know at points in time when the
 

1721
00:32:14,480 --> 00:32:16,710
you know at points in time when the
kernel feels that it needs to happen

1722
00:32:16,710 --> 00:32:16,720
kernel feels that it needs to happen
 

1723
00:32:16,720 --> 00:32:18,950
kernel feels that it needs to happen
if there are threads um there are some

1724
00:32:18,950 --> 00:32:18,960
if there are threads um there are some
 

1725
00:32:18,960 --> 00:32:21,269
if there are threads um there are some
times when

1726
00:32:21,269 --> 00:32:21,279
times when
 

1727
00:32:21,279 --> 00:32:23,750
times when
you can sort of guess that probably a

1728
00:32:23,750 --> 00:32:23,760
you can sort of guess that probably a
 

1729
00:32:23,760 --> 00:32:25,190
you can sort of guess that probably a
certain system call

1730
00:32:25,190 --> 00:32:25,200
certain system call
 

1731
00:32:25,200 --> 00:32:28,630
certain system call
will result in a yield like if a process

1732
00:32:28,630 --> 00:32:28,640
will result in a yield like if a process
 

1733
00:32:28,640 --> 00:32:30,789
will result in a yield like if a process
does a read on a pipe where it knows

1734
00:32:30,789 --> 00:32:30,799
does a read on a pipe where it knows
 

1735
00:32:30,799 --> 00:32:32,230
does a read on a pipe where it knows
that really nothing is waiting to be

1736
00:32:32,230 --> 00:32:32,240
that really nothing is waiting to be
 

1737
00:32:32,240 --> 00:32:33,909
that really nothing is waiting to be
read on the pipe

1738
00:32:33,909 --> 00:32:33,919
read on the pipe
 

1739
00:32:33,919 --> 00:32:36,549
read on the pipe
then the reed will block you can predict

1740
00:32:36,549 --> 00:32:36,559
then the reed will block you can predict
 

1741
00:32:36,559 --> 00:32:37,909
then the reed will block you can predict
the read will block and that the

1742
00:32:37,909 --> 00:32:37,919
the read will block and that the
 

1743
00:32:37,919 --> 00:32:40,789
the read will block and that the
kernel will run some other process while

1744
00:32:40,789 --> 00:32:40,799
kernel will run some other process while
 

1745
00:32:40,799 --> 00:32:41,350
kernel will run some other process while
we're

1746
00:32:41,350 --> 00:32:41,360
we're
 

1747
00:32:41,360 --> 00:32:45,350
we're
waiting for data to appear in the pipe

1748
00:32:45,350 --> 00:32:45,360

 

1749
00:32:45,360 --> 00:32:47,190

and so the times when yield is called in

1750
00:32:47,190 --> 00:32:47,200
and so the times when yield is called in
 

1751
00:32:47,200 --> 00:32:48,870
and so the times when yield is called in
the kernel there's really two main times

1752
00:32:48,870 --> 00:32:48,880
the kernel there's really two main times
 

1753
00:32:48,880 --> 00:32:49,430
the kernel there's really two main times
one is

1754
00:32:49,430 --> 00:32:49,440
one is
 

1755
00:32:49,440 --> 00:32:52,549
one is
if a timer interrupt goes off the kernel

1756
00:32:52,549 --> 00:32:52,559
if a timer interrupt goes off the kernel
 

1757
00:32:52,559 --> 00:32:54,389
if a timer interrupt goes off the kernel
always yields

1758
00:32:54,389 --> 00:32:54,399
always yields
 

1759
00:32:54,399 --> 00:32:57,590
always yields
you know just on on the theory that

1760
00:32:57,590 --> 00:32:57,600
you know just on on the theory that
 

1761
00:32:57,600 --> 00:33:01,029
you know just on on the theory that
uh we should interleave the execution of

1762
00:33:01,029 --> 00:33:01,039
uh we should interleave the execution of
 

1763
00:33:01,039 --> 00:33:03,430
uh we should interleave the execution of
of all the process that want to run on

1764
00:33:03,430 --> 00:33:03,440
of all the process that want to run on
 

1765
00:33:03,440 --> 00:33:05,350
of all the process that want to run on
timer interrupt

1766
00:33:05,350 --> 00:33:05,360
timer interrupt
 

1767
00:33:05,360 --> 00:33:08,230
timer interrupt
uh periods so tom renner also always

1768
00:33:08,230 --> 00:33:08,240
uh periods so tom renner also always
 

1769
00:33:08,240 --> 00:33:09,350
uh periods so tom renner also always
calls yield

1770
00:33:09,350 --> 00:33:09,360
calls yield
 

1771
00:33:09,360 --> 00:33:11,430
calls yield
and whenever a process a system calls

1772
00:33:11,430 --> 00:33:11,440
and whenever a process a system calls
 

1773
00:33:11,440 --> 00:33:12,950
and whenever a process a system calls
waiting for i o

1774
00:33:12,950 --> 00:33:12,960
waiting for i o
 

1775
00:33:12,960 --> 00:33:14,549
waiting for i o
like waiting for you to type the next

1776
00:33:14,549 --> 00:33:14,559
like waiting for you to type the next
 

1777
00:33:14,559 --> 00:33:16,310
like waiting for you to type the next
keystroke you know does a read of the

1778
00:33:16,310 --> 00:33:16,320
keystroke you know does a read of the
 

1779
00:33:16,320 --> 00:33:17,750
keystroke you know does a read of the
console and you haven't typed the key

1780
00:33:17,750 --> 00:33:17,760
console and you haven't typed the key
 

1781
00:33:17,760 --> 00:33:18,549
console and you haven't typed the key
yet

1782
00:33:18,549 --> 00:33:18,559
yet
 

1783
00:33:18,559 --> 00:33:23,110
yet
then the the machinery to wait for io

1784
00:33:23,110 --> 00:33:23,120
then the the machinery to wait for io
 

1785
00:33:23,120 --> 00:33:25,350
then the the machinery to wait for io
calls yield it's called from sleep

1786
00:33:25,350 --> 00:33:25,360
calls yield it's called from sleep
 

1787
00:33:25,360 --> 00:33:29,190
calls yield it's called from sleep
something we'll talk about next week

1788
00:33:29,190 --> 00:33:29,200

 

1789
00:33:29,200 --> 00:33:32,470

all right um

1790
00:33:32,470 --> 00:33:32,480
all right um
 

1791
00:33:32,480 --> 00:33:35,750
all right um
okay another question yes

1792
00:33:35,750 --> 00:33:35,760
okay another question yes
 

1793
00:33:35,760 --> 00:33:38,710
okay another question yes
oh if it is asleep is it gonna do the

1794
00:33:38,710 --> 00:33:38,720
oh if it is asleep is it gonna do the
 

1795
00:33:38,720 --> 00:33:39,909
oh if it is asleep is it gonna do the
same thing roughly

1796
00:33:39,909 --> 00:33:39,919
same thing roughly
 

1797
00:33:39,919 --> 00:33:42,710
same thing roughly
so it's gonna be some um system call and

1798
00:33:42,710 --> 00:33:42,720
so it's gonna be some um system call and
 

1799
00:33:42,720 --> 00:33:44,789
so it's gonna be some um system call and
then it's gonna save the traffic

1800
00:33:44,789 --> 00:33:44,799
then it's gonna save the traffic
 

1801
00:33:44,799 --> 00:33:47,830
then it's gonna save the traffic
and um then basically the same picture

1802
00:33:47,830 --> 00:33:47,840
and um then basically the same picture
 

1803
00:33:47,840 --> 00:33:48,549
and um then basically the same picture
but

1804
00:33:48,549 --> 00:33:48,559
but
 

1805
00:33:48,559 --> 00:33:52,230
but
it's just um that the thing that

1806
00:33:52,230 --> 00:33:52,240
it's just um that the thing that
 

1807
00:33:52,240 --> 00:33:54,710
it's just um that the thing that
made the process go into the kernel was

1808
00:33:54,710 --> 00:33:54,720
made the process go into the kernel was
 

1809
00:33:54,720 --> 00:33:56,870
made the process go into the kernel was
not a timer interrupt but

1810
00:33:56,870 --> 00:33:56,880
not a timer interrupt but
 

1811
00:33:56,880 --> 00:34:00,470
not a timer interrupt but
um the processes own decision

1812
00:34:00,470 --> 00:34:00,480
um the processes own decision
 

1813
00:34:00,480 --> 00:34:02,789
um the processes own decision
yeah so if the process make does a read

1814
00:34:02,789 --> 00:34:02,799
yeah so if the process make does a read
 

1815
00:34:02,799 --> 00:34:04,149
yeah so if the process make does a read
system call and that's why it's in the

1816
00:34:04,149 --> 00:34:04,159
system call and that's why it's in the
 

1817
00:34:04,159 --> 00:34:05,350
system call and that's why it's in the
kernel

1818
00:34:05,350 --> 00:34:05,360
kernel
 

1819
00:34:05,360 --> 00:34:08,069
kernel
and the read requires the process to

1820
00:34:08,069 --> 00:34:08,079
and the read requires the process to
 

1821
00:34:08,079 --> 00:34:09,909
and the read requires the process to
wait for the disk

1822
00:34:09,909 --> 00:34:09,919
wait for the disk
 

1823
00:34:09,919 --> 00:34:11,829
wait for the disk
to do to finish reading or to wait for

1824
00:34:11,829 --> 00:34:11,839
to do to finish reading or to wait for
 

1825
00:34:11,839 --> 00:34:13,270
to do to finish reading or to wait for
data to appear on a pipe

1826
00:34:13,270 --> 00:34:13,280
data to appear on a pipe
 

1827
00:34:13,280 --> 00:34:15,270
data to appear on a pipe
then actually the diagram's exactly the

1828
00:34:15,270 --> 00:34:15,280
then actually the diagram's exactly the
 

1829
00:34:15,280 --> 00:34:16,389
then actually the diagram's exactly the
same as this

1830
00:34:16,389 --> 00:34:16,399
same as this
 

1831
00:34:16,399 --> 00:34:19,829
same as this
the enter the kernel with a system call

1832
00:34:19,829 --> 00:34:19,839
the enter the kernel with a system call
 

1833
00:34:19,839 --> 00:34:20,790
the enter the kernel with a system call
a trap frame

1834
00:34:20,790 --> 00:34:20,800
a trap frame
 

1835
00:34:20,800 --> 00:34:22,149
a trap frame
hold the save user registers will

1836
00:34:22,149 --> 00:34:22,159
hold the save user registers will
 

1837
00:34:22,159 --> 00:34:23,510
hold the save user registers will
execute the system called the simple

1838
00:34:23,510 --> 00:34:23,520
execute the system called the simple
 

1839
00:34:23,520 --> 00:34:24,389
execute the system called the simple
realize ah

1840
00:34:24,389 --> 00:34:24,399
realize ah
 

1841
00:34:24,399 --> 00:34:25,669
realize ah
i need to wait for the disk to finish

1842
00:34:25,669 --> 00:34:25,679
i need to wait for the disk to finish
 

1843
00:34:25,679 --> 00:34:27,430
i need to wait for the disk to finish
reading something

1844
00:34:27,430 --> 00:34:27,440
reading something
 

1845
00:34:27,440 --> 00:34:29,430
reading something
the system call code will call sleep

1846
00:34:29,430 --> 00:34:29,440
the system call code will call sleep
 

1847
00:34:29,440 --> 00:34:32,069
the system call code will call sleep
which ends up calling switch

1848
00:34:32,069 --> 00:34:32,079
which ends up calling switch
 

1849
00:34:32,079 --> 00:34:35,750
which ends up calling switch
which you know saves away the kernel

1850
00:34:35,750 --> 00:34:35,760
which you know saves away the kernel
 

1851
00:34:35,760 --> 00:34:37,510
which you know saves away the kernel
thread registers and the processes

1852
00:34:37,510 --> 00:34:37,520
thread registers and the processes
 

1853
00:34:37,520 --> 00:34:40,069
thread registers and the processes
contacts and switches to this

1854
00:34:40,069 --> 00:34:40,079
contacts and switches to this
 

1855
00:34:40,079 --> 00:34:41,750
contacts and switches to this
current cpu scheduler to let some other

1856
00:34:41,750 --> 00:34:41,760
current cpu scheduler to let some other
 

1857
00:34:41,760 --> 00:34:43,990
current cpu scheduler to let some other
thread run while this thread

1858
00:34:43,990 --> 00:34:44,000
thread run while this thread
 

1859
00:34:44,000 --> 00:34:47,109
thread run while this thread
is waiting for the discrete to finish so

1860
00:34:47,109 --> 00:34:47,119
is waiting for the discrete to finish so
 

1861
00:34:47,119 --> 00:34:48,790
is waiting for the discrete to finish so
everything we're going to talk about now

1862
00:34:48,790 --> 00:34:48,800
everything we're going to talk about now
 

1863
00:34:48,800 --> 00:34:50,950
everything we're going to talk about now
except for the timer interrupt

1864
00:34:50,950 --> 00:34:50,960
except for the timer interrupt
 

1865
00:34:50,960 --> 00:34:54,149
except for the timer interrupt
um is pretty much the same if what's

1866
00:34:54,149 --> 00:34:54,159
um is pretty much the same if what's
 

1867
00:34:54,159 --> 00:34:55,589
um is pretty much the same if what's
going on is we're in a system call and

1868
00:34:55,589 --> 00:34:55,599
going on is we're in a system call and
 

1869
00:34:55,599 --> 00:34:56,629
going on is we're in a system call and
the system call

1870
00:34:56,629 --> 00:34:56,639
the system call
 

1871
00:34:56,639 --> 00:34:58,870
the system call
needs to wait for some for i o and give

1872
00:34:58,870 --> 00:34:58,880
needs to wait for some for i o and give
 

1873
00:34:58,880 --> 00:35:02,310
needs to wait for some for i o and give
up the cpu

1874
00:35:02,310 --> 00:35:02,320
up the cpu
 

1875
00:35:02,320 --> 00:35:04,150
up the cpu
for the purposes of today's discussion

1876
00:35:04,150 --> 00:35:04,160
for the purposes of today's discussion
 

1877
00:35:04,160 --> 00:35:08,950
for the purposes of today's discussion
the two situations are almost identical

1878
00:35:08,950 --> 00:35:08,960

 

1879
00:35:08,960 --> 00:35:10,950

okay so the question does each per cpu

1880
00:35:10,950 --> 00:35:10,960
okay so the question does each per cpu
 

1881
00:35:10,960 --> 00:35:12,230
okay so the question does each per cpu
scheduler have its own stack

1882
00:35:12,230 --> 00:35:12,240
scheduler have its own stack
 

1883
00:35:12,240 --> 00:35:18,470
scheduler have its own stack
yes there's a stack

1884
00:35:18,470 --> 00:35:18,480

 

1885
00:35:18,480 --> 00:35:21,349

for this scheduler and a stack for this

1886
00:35:21,349 --> 00:35:21,359
for this scheduler and a stack for this
 

1887
00:35:21,359 --> 00:35:24,310
for this scheduler and a stack for this
separate stack

1888
00:35:24,310 --> 00:35:24,320

 

1889
00:35:24,320 --> 00:35:31,829

for the scheduler for cpu one

1890
00:35:31,829 --> 00:35:31,839
for the scheduler for cpu one
 

1891
00:35:31,839 --> 00:35:33,990
for the scheduler for cpu one
yeah and indeed the stacks for the skies

1892
00:35:33,990 --> 00:35:34,000
yeah and indeed the stacks for the skies
 

1893
00:35:34,000 --> 00:35:36,390
yeah and indeed the stacks for the skies
are just set up

1894
00:35:36,390 --> 00:35:36,400
are just set up
 

1895
00:35:36,400 --> 00:35:38,470
are just set up
in fact all this stuff you know the

1896
00:35:38,470 --> 00:35:38,480
in fact all this stuff you know the
 

1897
00:35:38,480 --> 00:35:41,270
in fact all this stuff you know the
context and the stacks for the scheduler

1898
00:35:41,270 --> 00:35:41,280
context and the stacks for the scheduler
 

1899
00:35:41,280 --> 00:35:43,430
context and the stacks for the scheduler
threads are set up in a different way

1900
00:35:43,430 --> 00:35:43,440
threads are set up in a different way
 

1901
00:35:43,440 --> 00:35:46,470
threads are set up in a different way
than for user processes

1902
00:35:46,470 --> 00:35:46,480
than for user processes
 

1903
00:35:46,480 --> 00:35:48,950
than for user processes
they're set up at boot time if you poke

1904
00:35:48,950 --> 00:35:48,960
they're set up at boot time if you poke
 

1905
00:35:48,960 --> 00:35:50,310
they're set up at boot time if you poke
around in

1906
00:35:50,310 --> 00:35:50,320
around in
 

1907
00:35:50,320 --> 00:35:54,150
around in
start.s or start.c start.s probably

1908
00:35:54,150 --> 00:35:54,160
start.s or start.c start.s probably
 

1909
00:35:54,160 --> 00:35:55,910
start.s or start.c start.s probably
you'll see some of the setup

1910
00:35:55,910 --> 00:35:55,920
you'll see some of the setup
 

1911
00:35:55,920 --> 00:35:58,950
you'll see some of the setup
for each core's scheduler thread

1912
00:35:58,950 --> 00:35:58,960
for each core's scheduler thread
 

1913
00:35:58,960 --> 00:36:01,589
for each core's scheduler thread
there's a place with a stack very early

1914
00:36:01,589 --> 00:36:01,599
there's a place with a stack very early
 

1915
00:36:01,599 --> 00:36:03,270
there's a place with a stack very early
in the assembly code during boot

1916
00:36:03,270 --> 00:36:03,280
in the assembly code during boot
 

1917
00:36:03,280 --> 00:36:06,150
in the assembly code during boot
where the stack is set up for each cpu

1918
00:36:06,150 --> 00:36:06,160
where the stack is set up for each cpu
 

1919
00:36:06,160 --> 00:36:07,829
where the stack is set up for each cpu
and it's on that stack that this

1920
00:36:07,829 --> 00:36:07,839
and it's on that stack that this
 

1921
00:36:07,839 --> 00:36:10,550
and it's on that stack that this
the cpu boots on and then runs its

1922
00:36:10,550 --> 00:36:10,560
the cpu boots on and then runs its
 

1923
00:36:10,560 --> 00:36:15,670
the cpu boots on and then runs its
scheduler thread

1924
00:36:15,670 --> 00:36:15,680

 

1925
00:36:15,680 --> 00:36:19,190

okay

1926
00:36:19,190 --> 00:36:19,200

 

1927
00:36:19,200 --> 00:36:21,670

one piece of jargon when people talk

1928
00:36:21,670 --> 00:36:21,680
one piece of jargon when people talk
 

1929
00:36:21,680 --> 00:36:22,790
one piece of jargon when people talk
about context

1930
00:36:22,790 --> 00:36:22,800
about context
 

1931
00:36:22,800 --> 00:36:26,470
about context
switch they're talking about

1932
00:36:26,470 --> 00:36:26,480
switch they're talking about
 

1933
00:36:26,480 --> 00:36:30,790
switch they're talking about
usually um

1934
00:36:30,790 --> 00:36:30,800
usually um
 

1935
00:36:30,800 --> 00:36:33,670
usually um
this act of switching from one thread to

1936
00:36:33,670 --> 00:36:33,680
this act of switching from one thread to
 

1937
00:36:33,680 --> 00:36:35,670
this act of switching from one thread to
another by saving one set of register

1938
00:36:35,670 --> 00:36:35,680
another by saving one set of register
 

1939
00:36:35,680 --> 00:36:37,190
another by saving one set of register
sets for the old thread

1940
00:36:37,190 --> 00:36:37,200
sets for the old thread
 

1941
00:36:37,200 --> 00:36:39,349
sets for the old thread
and restoring previously saved registers

1942
00:36:39,349 --> 00:36:39,359
and restoring previously saved registers
 

1943
00:36:39,359 --> 00:36:41,430
and restoring previously saved registers
for the thread we're switching to

1944
00:36:41,430 --> 00:36:41,440
for the thread we're switching to
 

1945
00:36:41,440 --> 00:36:42,550
for the thread we're switching to
so that's what's usually meant by

1946
00:36:42,550 --> 00:36:42,560
so that's what's usually meant by
 

1947
00:36:42,560 --> 00:36:44,230
so that's what's usually meant by
context switch also though sometimes

1948
00:36:44,230 --> 00:36:44,240
context switch also though sometimes
 

1949
00:36:44,240 --> 00:36:47,270
context switch also though sometimes
it's applied to the complete

1950
00:36:47,270 --> 00:36:47,280
it's applied to the complete
 

1951
00:36:47,280 --> 00:36:48,710
it's applied to the complete
dance that goes on when switching from

1952
00:36:48,710 --> 00:36:48,720
dance that goes on when switching from
 

1953
00:36:48,720 --> 00:36:50,310
dance that goes on when switching from
one user process to another and

1954
00:36:50,310 --> 00:36:50,320
one user process to another and
 

1955
00:36:50,320 --> 00:36:51,910
one user process to another and
occasionally you'll see context switch

1956
00:36:51,910 --> 00:36:51,920
occasionally you'll see context switch
 

1957
00:36:51,920 --> 00:36:53,030
occasionally you'll see context switch
apply to

1958
00:36:53,030 --> 00:36:53,040
apply to
 

1959
00:36:53,040 --> 00:36:55,349
apply to
switching between user and kernel but

1960
00:36:55,349 --> 00:36:55,359
switching between user and kernel but
 

1961
00:36:55,359 --> 00:36:57,430
switching between user and kernel but
for us we mostly mean it

1962
00:36:57,430 --> 00:36:57,440
for us we mostly mean it
 

1963
00:36:57,440 --> 00:37:01,190
for us we mostly mean it
for switching from one kernel thread

1964
00:37:01,190 --> 00:37:01,200
for switching from one kernel thread
 

1965
00:37:01,200 --> 00:37:05,990
for switching from one kernel thread
typically to a scheduler thread

1966
00:37:05,990 --> 00:37:06,000

 

1967
00:37:06,000 --> 00:37:10,790

just some pieces of information um

1968
00:37:10,790 --> 00:37:10,800

 

1969
00:37:10,800 --> 00:37:14,390

that are handy to keep in mind um

1970
00:37:14,390 --> 00:37:14,400
that are handy to keep in mind um
 

1971
00:37:14,400 --> 00:37:16,550
that are handy to keep in mind um
every core just does one thing at a time

1972
00:37:16,550 --> 00:37:16,560
every core just does one thing at a time
 

1973
00:37:16,560 --> 00:37:17,750
every core just does one thing at a time
each core

1974
00:37:17,750 --> 00:37:17,760
each core
 

1975
00:37:17,760 --> 00:37:20,069
each core
you know is either is just running one

1976
00:37:20,069 --> 00:37:20,079
you know is either is just running one
 

1977
00:37:20,079 --> 00:37:21,750
you know is either is just running one
thread at any given time it's either

1978
00:37:21,750 --> 00:37:21,760
thread at any given time it's either
 

1979
00:37:21,760 --> 00:37:22,310
thread at any given time it's either
running

1980
00:37:22,310 --> 00:37:22,320
running
 

1981
00:37:22,320 --> 00:37:24,950
running
some processes user thread some process

1982
00:37:24,950 --> 00:37:24,960
some processes user thread some process
 

1983
00:37:24,960 --> 00:37:26,069
some processes user thread some process
kernel thread

1984
00:37:26,069 --> 00:37:26,079
kernel thread
 

1985
00:37:26,079 --> 00:37:28,550
kernel thread
or that core scheduler thread so at any

1986
00:37:28,550 --> 00:37:28,560
or that core scheduler thread so at any
 

1987
00:37:28,560 --> 00:37:29,670
or that core scheduler thread so at any
given time the core

1988
00:37:29,670 --> 00:37:29,680
given time the core
 

1989
00:37:29,680 --> 00:37:31,030
given time the core
is not doing multiple things it's just

1990
00:37:31,030 --> 00:37:31,040
is not doing multiple things it's just
 

1991
00:37:31,040 --> 00:37:33,030
is not doing multiple things it's just
doing one thing and it's this switching

1992
00:37:33,030 --> 00:37:33,040
doing one thing and it's this switching
 

1993
00:37:33,040 --> 00:37:35,510
doing one thing and it's this switching
that sort of creates the illusion of

1994
00:37:35,510 --> 00:37:35,520
that sort of creates the illusion of
 

1995
00:37:35,520 --> 00:37:37,750
that sort of creates the illusion of
multiple threads running at different

1996
00:37:37,750 --> 00:37:37,760
multiple threads running at different
 

1997
00:37:37,760 --> 00:37:39,990
multiple threads running at different
times on that core

1998
00:37:39,990 --> 00:37:40,000
times on that core
 

1999
00:37:40,000 --> 00:37:44,550
times on that core
similarly each thread

2000
00:37:44,550 --> 00:37:44,560
similarly each thread
 

2001
00:37:44,560 --> 00:37:48,790
similarly each thread
is running up it's either running on

2002
00:37:48,790 --> 00:37:48,800
is running up it's either running on
 

2003
00:37:48,800 --> 00:37:52,710
is running up it's either running on
exactly one core or its state has been

2004
00:37:52,710 --> 00:37:52,720
exactly one core or its state has been
 

2005
00:37:52,720 --> 00:37:54,710
exactly one core or its state has been
state has been saved and we've switched

2006
00:37:54,710 --> 00:37:54,720
state has been saved and we've switched
 

2007
00:37:54,720 --> 00:37:56,310
state has been saved and we've switched
away from it

2008
00:37:56,310 --> 00:37:56,320
away from it
 

2009
00:37:56,320 --> 00:37:58,470
away from it
so so you know thread just to be clear a

2010
00:37:58,470 --> 00:37:58,480
so so you know thread just to be clear a
 

2011
00:37:58,480 --> 00:38:00,230
so so you know thread just to be clear a
thread never runs on more than one core

2012
00:38:00,230 --> 00:38:00,240
thread never runs on more than one core
 

2013
00:38:00,240 --> 00:38:01,670
thread never runs on more than one core
thread is either running on just one

2014
00:38:01,670 --> 00:38:01,680
thread is either running on just one
 

2015
00:38:01,680 --> 00:38:03,910
thread is either running on just one
core or it's not running at all it has

2016
00:38:03,910 --> 00:38:03,920
core or it's not running at all it has
 

2017
00:38:03,920 --> 00:38:07,670
core or it's not running at all it has
it has saved state somewhere

2018
00:38:07,670 --> 00:38:07,680

 

2019
00:38:07,680 --> 00:38:09,589

another interesting thing about the xv6

2020
00:38:09,589 --> 00:38:09,599
another interesting thing about the xv6
 

2021
00:38:09,599 --> 00:38:10,790
another interesting thing about the xv6
setup is that

2022
00:38:10,790 --> 00:38:10,800
setup is that
 

2023
00:38:10,800 --> 00:38:14,710
setup is that
these contexts that hold saved

2024
00:38:14,710 --> 00:38:14,720
these contexts that hold saved
 

2025
00:38:14,720 --> 00:38:17,990
these contexts that hold saved
kernel thread registers they're always

2026
00:38:17,990 --> 00:38:18,000
kernel thread registers they're always
 

2027
00:38:18,000 --> 00:38:21,430
kernel thread registers they're always
produced by a call to switch

2028
00:38:21,430 --> 00:38:21,440
produced by a call to switch
 

2029
00:38:21,440 --> 00:38:23,829
produced by a call to switch
and so these contacts basically always

2030
00:38:23,829 --> 00:38:23,839
and so these contacts basically always
 

2031
00:38:23,839 --> 00:38:24,550
and so these contacts basically always
refer

2032
00:38:24,550 --> 00:38:24,560
refer
 

2033
00:38:24,560 --> 00:38:27,589
refer
to you know the state of the thread as

2034
00:38:27,589 --> 00:38:27,599
to you know the state of the thread as
 

2035
00:38:27,599 --> 00:38:30,870
to you know the state of the thread as
it was executing inside a call to switch

2036
00:38:30,870 --> 00:38:30,880
it was executing inside a call to switch
 

2037
00:38:30,880 --> 00:38:34,870
it was executing inside a call to switch
um and you know the way we'll see that

2038
00:38:34,870 --> 00:38:34,880
um and you know the way we'll see that
 

2039
00:38:34,880 --> 00:38:35,349
um and you know the way we'll see that
come up

2040
00:38:35,349 --> 00:38:35,359
come up
 

2041
00:38:35,359 --> 00:38:38,230
come up
is that when we uh switch from one to

2042
00:38:38,230 --> 00:38:38,240
is that when we uh switch from one to
 

2043
00:38:38,240 --> 00:38:39,349
is that when we uh switch from one to
another and restore

2044
00:38:39,349 --> 00:38:39,359
another and restore
 

2045
00:38:39,359 --> 00:38:41,510
another and restore
the target threads context the first

2046
00:38:41,510 --> 00:38:41,520
the target threads context the first
 

2047
00:38:41,520 --> 00:38:43,349
the target threads context the first
thing it will do is return from a

2048
00:38:43,349 --> 00:38:43,359
thing it will do is return from a
 

2049
00:38:43,359 --> 00:38:45,190
thing it will do is return from a
previous call to switch

2050
00:38:45,190 --> 00:38:45,200
previous call to switch
 

2051
00:38:45,200 --> 00:38:47,109
previous call to switch
so these contacts sort of always save

2052
00:38:47,109 --> 00:38:47,119
so these contacts sort of always save
 

2053
00:38:47,119 --> 00:38:48,230
so these contacts sort of always save
state

2054
00:38:48,230 --> 00:38:48,240
state
 

2055
00:38:48,240 --> 00:38:52,470
state
in as it is in switch

2056
00:38:52,470 --> 00:38:52,480

 

2057
00:38:52,480 --> 00:38:55,990

okay um

2058
00:38:55,990 --> 00:38:56,000
okay um
 

2059
00:38:56,000 --> 00:38:58,630
okay um
any more questions about the sort of

2060
00:38:58,630 --> 00:38:58,640
any more questions about the sort of
 

2061
00:38:58,640 --> 00:38:59,270
any more questions about the sort of
diagram

2062
00:38:59,270 --> 00:38:59,280
diagram
 

2063
00:38:59,280 --> 00:39:05,190
diagram
level situation

2064
00:39:05,190 --> 00:39:05,200

 

2065
00:39:05,200 --> 00:39:07,589

um i have a question so we're using the

2066
00:39:07,589 --> 00:39:07,599
um i have a question so we're using the
 

2067
00:39:07,599 --> 00:39:09,109
um i have a question so we're using the
term thread all the time but

2068
00:39:09,109 --> 00:39:09,119
term thread all the time but
 

2069
00:39:09,119 --> 00:39:11,109
term thread all the time but
it seems to me like our implementation

2070
00:39:11,109 --> 00:39:11,119
it seems to me like our implementation
 

2071
00:39:11,119 --> 00:39:13,109
it seems to me like our implementation
for xv6

2072
00:39:13,109 --> 00:39:13,119
for xv6
 

2073
00:39:13,119 --> 00:39:16,150
for xv6
process is it is only one thread so like

2074
00:39:16,150 --> 00:39:16,160
process is it is only one thread so like
 

2075
00:39:16,160 --> 00:39:17,510
process is it is only one thread so like
could it be possible that

2076
00:39:17,510 --> 00:39:17,520
could it be possible that
 

2077
00:39:17,520 --> 00:39:19,430
could it be possible that
one process could have multiple threads

2078
00:39:19,430 --> 00:39:19,440
one process could have multiple threads
 

2079
00:39:19,440 --> 00:39:21,670
one process could have multiple threads
or am i wrong here

2080
00:39:21,670 --> 00:39:21,680
or am i wrong here
 

2081
00:39:21,680 --> 00:39:25,910
or am i wrong here
in xv6 right now

2082
00:39:25,910 --> 00:39:25,920
in xv6 right now
 

2083
00:39:25,920 --> 00:39:28,230
in xv6 right now
there's definitely some confusing things

2084
00:39:28,230 --> 00:39:28,240
there's definitely some confusing things
 

2085
00:39:28,240 --> 00:39:29,829
there's definitely some confusing things
about the way we use the words here

2086
00:39:29,829 --> 00:39:29,839
about the way we use the words here
 

2087
00:39:29,839 --> 00:39:32,950
about the way we use the words here
in xv6 um

2088
00:39:32,950 --> 00:39:32,960
in xv6 um
 

2089
00:39:32,960 --> 00:39:39,510
in xv6 um
a process

2090
00:39:39,510 --> 00:39:39,520

 

2091
00:39:39,520 --> 00:39:41,589

a process is either executing

2092
00:39:41,589 --> 00:39:41,599
a process is either executing
 

2093
00:39:41,599 --> 00:39:43,030
a process is either executing
instructions

2094
00:39:43,030 --> 00:39:43,040
instructions
 

2095
00:39:43,040 --> 00:39:46,310
instructions
a user level or it's executing

2096
00:39:46,310 --> 00:39:46,320
a user level or it's executing
 

2097
00:39:46,320 --> 00:39:48,069
a user level or it's executing
instructions

2098
00:39:48,069 --> 00:39:48,079
instructions
 

2099
00:39:48,079 --> 00:39:51,589
instructions
in the kernel or

2100
00:39:51,589 --> 00:39:51,599
in the kernel or
 

2101
00:39:51,599 --> 00:39:53,430
in the kernel or
it's not executing at all and its state

2102
00:39:53,430 --> 00:39:53,440
it's not executing at all and its state
 

2103
00:39:53,440 --> 00:39:54,630
it's not executing at all and its state
has been saved away

2104
00:39:54,630 --> 00:39:54,640
has been saved away
 

2105
00:39:54,640 --> 00:39:58,069
has been saved away
into this combination of a context

2106
00:39:58,069 --> 00:39:58,079
into this combination of a context
 

2107
00:39:58,079 --> 00:40:02,390
into this combination of a context
and a trap frame

2108
00:40:02,390 --> 00:40:02,400

 

2109
00:40:02,400 --> 00:40:04,230

so that's the actual situation now what

2110
00:40:04,230 --> 00:40:04,240
so that's the actual situation now what
 

2111
00:40:04,240 --> 00:40:08,390
so that's the actual situation now what
you want to call that

2112
00:40:08,390 --> 00:40:08,400

 

2113
00:40:08,400 --> 00:40:11,270

well you can call what what you like i i

2114
00:40:11,270 --> 00:40:11,280
well you can call what what you like i i
 

2115
00:40:11,280 --> 00:40:12,870
well you can call what what you like i i
don't know of a simple explanation for

2116
00:40:12,870 --> 00:40:12,880
don't know of a simple explanation for
 

2117
00:40:12,880 --> 00:40:13,190
don't know of a simple explanation for
this

2118
00:40:13,190 --> 00:40:13,200
this
 

2119
00:40:13,200 --> 00:40:15,589
this
structure um we've been calling it i've

2120
00:40:15,589 --> 00:40:15,599
structure um we've been calling it i've
 

2121
00:40:15,599 --> 00:40:16,710
structure um we've been calling it i've
been calling it

2122
00:40:16,710 --> 00:40:16,720
been calling it
 

2123
00:40:16,720 --> 00:40:19,430
been calling it
i've been saying that each process has

2124
00:40:19,430 --> 00:40:19,440
i've been saying that each process has
 

2125
00:40:19,440 --> 00:40:21,030
i've been saying that each process has
two threads

2126
00:40:21,030 --> 00:40:21,040
two threads
 

2127
00:40:21,040 --> 00:40:24,309
two threads
a user level thread and a kernel level

2128
00:40:24,309 --> 00:40:24,319
a user level thread and a kernel level
 

2129
00:40:24,319 --> 00:40:25,030
a user level thread and a kernel level
thread and

2130
00:40:25,030 --> 00:40:25,040
thread and
 

2131
00:40:25,040 --> 00:40:26,470
thread and
and that's a process there's this

2132
00:40:26,470 --> 00:40:26,480
and that's a process there's this
 

2133
00:40:26,480 --> 00:40:28,630
and that's a process there's this
restriction that a process is only

2134
00:40:28,630 --> 00:40:28,640
restriction that a process is only
 

2135
00:40:28,640 --> 00:40:30,710
restriction that a process is only
is either executing in the kernel in the

2136
00:40:30,710 --> 00:40:30,720
is either executing in the kernel in the
 

2137
00:40:30,720 --> 00:40:32,150
is either executing in the kernel in the
user space

2138
00:40:32,150 --> 00:40:32,160
user space
 

2139
00:40:32,160 --> 00:40:33,829
user space
or executing in the kernel in an

2140
00:40:33,829 --> 00:40:33,839
or executing in the kernel in an
 

2141
00:40:33,839 --> 00:40:35,270
or executing in the kernel in an
interrupt your system call

2142
00:40:35,270 --> 00:40:35,280
interrupt your system call
 

2143
00:40:35,280 --> 00:40:38,550
interrupt your system call
but never both yeah

2144
00:40:38,550 --> 00:40:38,560
but never both yeah
 

2145
00:40:38,560 --> 00:40:41,990
but never both yeah
okay that makes sense yeah i apologize

2146
00:40:41,990 --> 00:40:42,000
okay that makes sense yeah i apologize
 

2147
00:40:42,000 --> 00:40:47,510
okay that makes sense yeah i apologize
for the kind of complexity of this

2148
00:40:47,510 --> 00:40:47,520

 

2149
00:40:47,520 --> 00:40:50,550

okay okay so let me switch to code

2150
00:40:50,550 --> 00:40:50,560
okay okay so let me switch to code
 

2151
00:40:50,560 --> 00:41:02,390
okay okay so let me switch to code
looking at the xv6 code

2152
00:41:02,390 --> 00:41:02,400

 

2153
00:41:02,400 --> 00:41:10,069

right so first of all

2154
00:41:10,069 --> 00:41:10,079

 

2155
00:41:10,079 --> 00:41:13,430

um i just want to just to

2156
00:41:13,430 --> 00:41:13,440
um i just want to just to
 

2157
00:41:13,440 --> 00:41:14,710
um i just want to just to
show some of the stuff we've been

2158
00:41:14,710 --> 00:41:14,720
show some of the stuff we've been
 

2159
00:41:14,720 --> 00:41:19,270
show some of the stuff we've been
talking about i'm going to look at the

2160
00:41:19,270 --> 00:41:19,280

 

2161
00:41:19,280 --> 00:41:21,750

process structure and we can see in the

2162
00:41:21,750 --> 00:41:21,760
process structure and we can see in the
 

2163
00:41:21,760 --> 00:41:22,950
process structure and we can see in the
process structure a lot of the things

2164
00:41:22,950 --> 00:41:22,960
process structure a lot of the things
 

2165
00:41:22,960 --> 00:41:24,390
process structure a lot of the things
we've been talking about

2166
00:41:24,390 --> 00:41:24,400
we've been talking about
 

2167
00:41:24,400 --> 00:41:30,710
we've been talking about
um just for review there's the

2168
00:41:30,710 --> 00:41:30,720

 

2169
00:41:30,720 --> 00:41:33,990

wrap frame that saves the user level

2170
00:41:33,990 --> 00:41:34,000
wrap frame that saves the user level
 

2171
00:41:34,000 --> 00:41:37,589
wrap frame that saves the user level
registers there's

2172
00:41:37,589 --> 00:41:37,599
registers there's
 

2173
00:41:37,599 --> 00:41:42,470
registers there's
a context here that saves the

2174
00:41:42,470 --> 00:41:42,480
a context here that saves the
 

2175
00:41:42,480 --> 00:41:44,390
a context here that saves the
kernel thread registers when we switch

2176
00:41:44,390 --> 00:41:44,400
kernel thread registers when we switch
 

2177
00:41:44,400 --> 00:41:46,550
kernel thread registers when we switch
to the scheduler thread

2178
00:41:46,550 --> 00:41:46,560
to the scheduler thread
 

2179
00:41:46,560 --> 00:41:50,390
to the scheduler thread
there's a pointer to this process is

2180
00:41:50,390 --> 00:41:50,400
there's a pointer to this process is
 

2181
00:41:50,400 --> 00:41:52,470
there's a pointer to this process is
kernel stack which is where you know

2182
00:41:52,470 --> 00:41:52,480
kernel stack which is where you know
 

2183
00:41:52,480 --> 00:41:53,910
kernel stack which is where you know
function calls are saved

2184
00:41:53,910 --> 00:41:53,920
function calls are saved
 

2185
00:41:53,920 --> 00:41:57,190
function calls are saved
while we're executing in the kernel

2186
00:41:57,190 --> 00:41:57,200
while we're executing in the kernel
 

2187
00:41:57,200 --> 00:41:59,589
while we're executing in the kernel
there's this state variable which

2188
00:41:59,589 --> 00:41:59,599
there's this state variable which
 

2189
00:41:59,599 --> 00:42:02,309
there's this state variable which
records whether this process is

2190
00:42:02,309 --> 00:42:02,319
records whether this process is
 

2191
00:42:02,319 --> 00:42:04,630
records whether this process is
running or runnable or sleeping or not

2192
00:42:04,630 --> 00:42:04,640
running or runnable or sleeping or not
 

2193
00:42:04,640 --> 00:42:07,190
running or runnable or sleeping or not
allocated at all

2194
00:42:07,190 --> 00:42:07,200
allocated at all
 

2195
00:42:07,200 --> 00:42:10,710
allocated at all
and then finally there's a lock that

2196
00:42:10,710 --> 00:42:10,720
and then finally there's a lock that
 

2197
00:42:10,720 --> 00:42:15,589
and then finally there's a lock that
protects various things as we'll see

2198
00:42:15,589 --> 00:42:15,599

 

2199
00:42:15,599 --> 00:42:18,710

for now it we can observe that it at

2200
00:42:18,710 --> 00:42:18,720
for now it we can observe that it at
 

2201
00:42:18,720 --> 00:42:20,309
for now it we can observe that it at
least protects

2202
00:42:20,309 --> 00:42:20,319
least protects
 

2203
00:42:20,319 --> 00:42:23,430
least protects
uh changes to the state variable um

2204
00:42:23,430 --> 00:42:23,440
uh changes to the state variable um
 

2205
00:42:23,440 --> 00:42:25,990
uh changes to the state variable um
so that for example uh two scheduler

2206
00:42:25,990 --> 00:42:26,000
so that for example uh two scheduler
 

2207
00:42:26,000 --> 00:42:27,430
so that for example uh two scheduler
threats don't try to grab

2208
00:42:27,430 --> 00:42:27,440
threats don't try to grab
 

2209
00:42:27,440 --> 00:42:29,109
threats don't try to grab
a runnable process and run it at the

2210
00:42:29,109 --> 00:42:29,119
a runnable process and run it at the
 

2211
00:42:29,119 --> 00:42:31,349
a runnable process and run it at the
same time one of the many things this

2212
00:42:31,349 --> 00:42:31,359
same time one of the many things this
 

2213
00:42:31,359 --> 00:42:35,270
same time one of the many things this
lock does is prevent that from happening

2214
00:42:35,270 --> 00:42:35,280

 

2215
00:42:35,280 --> 00:42:38,550

i'm going to run a simple demo program

2216
00:42:38,550 --> 00:42:38,560
i'm going to run a simple demo program
 

2217
00:42:38,560 --> 00:42:39,270
i'm going to run a simple demo program
for you

2218
00:42:39,270 --> 00:42:39,280
for you
 

2219
00:42:39,280 --> 00:42:43,109
for you
this spin program i'm using it mostly

2220
00:42:43,109 --> 00:42:43,119
this spin program i'm using it mostly
 

2221
00:42:43,119 --> 00:42:43,430
this spin program i'm using it mostly
just

2222
00:42:43,430 --> 00:42:43,440
just
 

2223
00:42:43,440 --> 00:42:45,750
just
to drive the to sort of create this

2224
00:42:45,750 --> 00:42:45,760
to drive the to sort of create this
 

2225
00:42:45,760 --> 00:42:48,150
to drive the to sort of create this
issue predictable situation in which

2226
00:42:48,150 --> 00:42:48,160
issue predictable situation in which
 

2227
00:42:48,160 --> 00:42:50,230
issue predictable situation in which
we switch from one thread to another but

2228
00:42:50,230 --> 00:42:50,240
we switch from one thread to another but
 

2229
00:42:50,240 --> 00:42:51,510
we switch from one thread to another but
this is

2230
00:42:51,510 --> 00:42:51,520
this is
 

2231
00:42:51,520 --> 00:42:54,230
this is
this program spin program creates two

2232
00:42:54,230 --> 00:42:54,240
this program spin program creates two
 

2233
00:42:54,240 --> 00:42:56,230
this program spin program creates two
processes and the processes both compute

2234
00:42:56,230 --> 00:42:56,240
processes and the processes both compute
 

2235
00:42:56,240 --> 00:42:57,190
processes and the processes both compute
forever

2236
00:42:57,190 --> 00:42:57,200
forever
 

2237
00:42:57,200 --> 00:43:00,230
forever
you know call fork here

2238
00:43:00,230 --> 00:43:00,240
you know call fork here
 

2239
00:43:00,240 --> 00:43:03,349
you know call fork here
i make a child um and then

2240
00:43:03,349 --> 00:43:03,359
i make a child um and then
 

2241
00:43:03,359 --> 00:43:06,470
i make a child um and then
forever both children both children just

2242
00:43:06,470 --> 00:43:06,480
forever both children both children just
 

2243
00:43:06,480 --> 00:43:07,829
forever both children both children just
sit in this loop and every once in a

2244
00:43:07,829 --> 00:43:07,839
sit in this loop and every once in a
 

2245
00:43:07,839 --> 00:43:09,190
sit in this loop and every once in a
while they'll print a character just so

2246
00:43:09,190 --> 00:43:09,200
while they'll print a character just so
 

2247
00:43:09,200 --> 00:43:11,670
while they'll print a character just so
we can see they're making progress

2248
00:43:11,670 --> 00:43:11,680
we can see they're making progress
 

2249
00:43:11,680 --> 00:43:12,870
we can see they're making progress
but they don't print characters very

2250
00:43:12,870 --> 00:43:12,880
but they don't print characters very
 

2251
00:43:12,880 --> 00:43:15,349
but they don't print characters very
often and they never

2252
00:43:15,349 --> 00:43:15,359
often and they never
 

2253
00:43:15,359 --> 00:43:17,750
often and they never
sort of intentionally give up the cpu so

2254
00:43:17,750 --> 00:43:17,760
sort of intentionally give up the cpu so
 

2255
00:43:17,760 --> 00:43:19,670
sort of intentionally give up the cpu so
what we have here is two

2256
00:43:19,670 --> 00:43:19,680
what we have here is two
 

2257
00:43:19,680 --> 00:43:21,829
what we have here is two
essentially two compute bound processes

2258
00:43:21,829 --> 00:43:21,839
essentially two compute bound processes
 

2259
00:43:21,839 --> 00:43:23,430
essentially two compute bound processes
and in order for both of them to run i'm

2260
00:43:23,430 --> 00:43:23,440
and in order for both of them to run i'm
 

2261
00:43:23,440 --> 00:43:24,470
and in order for both of them to run i'm
going to run them on a

2262
00:43:24,470 --> 00:43:24,480
going to run them on a
 

2263
00:43:24,480 --> 00:43:27,589
going to run them on a
single cpu

2264
00:43:27,589 --> 00:43:27,599
single cpu
 

2265
00:43:27,599 --> 00:43:30,069
single cpu
xv6 that is only one core and so in

2266
00:43:30,069 --> 00:43:30,079
xv6 that is only one core and so in
 

2267
00:43:30,079 --> 00:43:31,670
xv6 that is only one core and so in
order for both of them to execute

2268
00:43:31,670 --> 00:43:31,680
order for both of them to execute
 

2269
00:43:31,680 --> 00:43:35,030
order for both of them to execute
you know it's going to be necessary to

2270
00:43:35,030 --> 00:43:35,040
you know it's going to be necessary to
 

2271
00:43:35,040 --> 00:43:40,390
you know it's going to be necessary to
do switching between the two processes

2272
00:43:40,390 --> 00:43:40,400
do switching between the two processes
 

2273
00:43:40,400 --> 00:43:44,550
do switching between the two processes
let me fire up the spin program

2274
00:43:44,550 --> 00:43:44,560
let me fire up the spin program
 

2275
00:43:44,560 --> 00:43:51,030
let me fire up the spin program
under gdb

2276
00:43:51,030 --> 00:43:51,040

 

2277
00:43:51,040 --> 00:43:52,309

run the spin program and you can see

2278
00:43:52,309 --> 00:43:52,319
run the spin program and you can see
 

2279
00:43:52,319 --> 00:43:54,470
run the spin program and you can see
it's printing one of the

2280
00:43:54,470 --> 00:43:54,480
it's printing one of the
 

2281
00:43:54,480 --> 00:43:56,710
it's printing one of the
two processes prints forward slash and

2282
00:43:56,710 --> 00:43:56,720
two processes prints forward slash and
 

2283
00:43:56,720 --> 00:43:57,510
two processes prints forward slash and
the other prints

2284
00:43:57,510 --> 00:43:57,520
the other prints
 

2285
00:43:57,520 --> 00:43:59,349
the other prints
backwards slash and you can see that

2286
00:43:59,349 --> 00:43:59,359
backwards slash and you can see that
 

2287
00:43:59,359 --> 00:44:01,349
backwards slash and you can see that
every once in a while

2288
00:44:01,349 --> 00:44:01,359
every once in a while
 

2289
00:44:01,359 --> 00:44:03,349
every once in a while
xp6 is switching between them it only

2290
00:44:03,349 --> 00:44:03,359
xp6 is switching between them it only
 

2291
00:44:03,359 --> 00:44:05,589
xp6 is switching between them it only
has one core the way i've configured it

2292
00:44:05,589 --> 00:44:05,599
has one core the way i've configured it
 

2293
00:44:05,599 --> 00:44:08,470
has one core the way i've configured it
so it we see a bunch of forward slashes

2294
00:44:08,470 --> 00:44:08,480
so it we see a bunch of forward slashes
 

2295
00:44:08,480 --> 00:44:09,670
so it we see a bunch of forward slashes
printing and then

2296
00:44:09,670 --> 00:44:09,680
printing and then
 

2297
00:44:09,680 --> 00:44:12,069
printing and then
apparently a timer in or up most go off

2298
00:44:12,069 --> 00:44:12,079
apparently a timer in or up most go off
 

2299
00:44:12,079 --> 00:44:13,109
apparently a timer in or up most go off
um

2300
00:44:13,109 --> 00:44:13,119
um
 

2301
00:44:13,119 --> 00:44:15,349
um
switch the one cpu to the other process

2302
00:44:15,349 --> 00:44:15,359
switch the one cpu to the other process
 

2303
00:44:15,359 --> 00:44:17,030
switch the one cpu to the other process
and then uh prints the other kind of

2304
00:44:17,030 --> 00:44:17,040
and then uh prints the other kind of
 

2305
00:44:17,040 --> 00:44:17,910
and then uh prints the other kind of
slash for a while

2306
00:44:17,910 --> 00:44:17,920
slash for a while
 

2307
00:44:17,920 --> 00:44:19,750
slash for a while
so what i want to observe is the timer

2308
00:44:19,750 --> 00:44:19,760
so what i want to observe is the timer
 

2309
00:44:19,760 --> 00:44:21,270
so what i want to observe is the timer
interrupt going off so i'm going to put

2310
00:44:21,270 --> 00:44:21,280
interrupt going off so i'm going to put
 

2311
00:44:21,280 --> 00:44:23,589
interrupt going off so i'm going to put
a break point

2312
00:44:23,589 --> 00:44:23,599
a break point
 

2313
00:44:23,599 --> 00:44:26,870
a break point
in trap

2314
00:44:26,870 --> 00:44:26,880

 

2315
00:44:26,880 --> 00:44:35,190

and in particular at line 207 and trap

2316
00:44:35,190 --> 00:44:35,200

 

2317
00:44:35,200 --> 00:44:39,030

uh which is um the code

2318
00:44:39,030 --> 00:44:39,040
uh which is um the code
 

2319
00:44:39,040 --> 00:44:42,790
uh which is um the code
in um

2320
00:44:42,790 --> 00:44:42,800
in um
 

2321
00:44:42,800 --> 00:44:46,550
in um
trap in dev inter that um

2322
00:44:46,550 --> 00:44:46,560
trap in dev inter that um
 

2323
00:44:46,560 --> 00:44:48,630
trap in dev inter that um
recognizes that ah we are in an

2324
00:44:48,630 --> 00:44:48,640
recognizes that ah we are in an
 

2325
00:44:48,640 --> 00:44:50,390
recognizes that ah we are in an
interrupt and the interrupt was

2326
00:44:50,390 --> 00:44:50,400
interrupt and the interrupt was
 

2327
00:44:50,400 --> 00:44:54,309
interrupt and the interrupt was
caused by a timer interrupt

2328
00:44:54,309 --> 00:44:54,319

 

2329
00:44:54,319 --> 00:44:55,910

so i'm going to put a break point here

2330
00:44:55,910 --> 00:44:55,920
so i'm going to put a break point here
 

2331
00:44:55,920 --> 00:44:57,510
so i'm going to put a break point here
at

2332
00:44:57,510 --> 00:44:57,520
at
 

2333
00:44:57,520 --> 00:45:00,550
at
trap.c 0.27 and

2334
00:45:00,550 --> 00:45:00,560
trap.c 0.27 and
 

2335
00:45:00,560 --> 00:45:03,589
trap.c 0.27 and
continue um boom the height triggers

2336
00:45:03,589 --> 00:45:03,599
continue um boom the height triggers
 

2337
00:45:03,599 --> 00:45:04,069
continue um boom the height triggers
right away

2338
00:45:04,069 --> 00:45:04,079
right away
 

2339
00:45:04,079 --> 00:45:06,150
right away
because timer amps are pretty frequent

2340
00:45:06,150 --> 00:45:06,160
because timer amps are pretty frequent
 

2341
00:45:06,160 --> 00:45:07,750
because timer amps are pretty frequent
and we can tell from where that indeed

2342
00:45:07,750 --> 00:45:07,760
and we can tell from where that indeed
 

2343
00:45:07,760 --> 00:45:09,430
and we can tell from where that indeed
we're in user trap and user trap

2344
00:45:09,430 --> 00:45:09,440
we're in user trap and user trap
 

2345
00:45:09,440 --> 00:45:12,309
we're in user trap and user trap
has called dev enter to handle this

2346
00:45:12,309 --> 00:45:12,319
has called dev enter to handle this
 

2347
00:45:12,319 --> 00:45:13,349
has called dev enter to handle this
interrupt

2348
00:45:13,349 --> 00:45:13,359
interrupt
 

2349
00:45:13,359 --> 00:45:16,470
interrupt
um i want to type finish to get out of

2350
00:45:16,470 --> 00:45:16,480
um i want to type finish to get out of
 

2351
00:45:16,480 --> 00:45:18,950
um i want to type finish to get out of
dev internet back into user trap

2352
00:45:18,950 --> 00:45:18,960
dev internet back into user trap
 

2353
00:45:18,960 --> 00:45:22,630
dev internet back into user trap
um because in fact we don't that

2354
00:45:22,630 --> 00:45:22,640
um because in fact we don't that
 

2355
00:45:22,640 --> 00:45:24,470
um because in fact we don't that
the code and different of our timer is

2356
00:45:24,470 --> 00:45:24,480
the code and different of our timer is
 

2357
00:45:24,480 --> 00:45:27,349
the code and different of our timer is
almost nothing

2358
00:45:27,349 --> 00:45:27,359

 

2359
00:45:27,359 --> 00:45:30,829

however once we're back at um

2360
00:45:30,829 --> 00:45:30,839
however once we're back at um
 

2361
00:45:30,839 --> 00:45:36,390
however once we're back at um
in uh user trap

2362
00:45:36,390 --> 00:45:36,400
in uh user trap
 

2363
00:45:36,400 --> 00:45:40,150
in uh user trap
we can see that from this line here that

2364
00:45:40,150 --> 00:45:40,160
we can see that from this line here that
 

2365
00:45:40,160 --> 00:45:47,829
we can see that from this line here that
we just returned from dev enter um

2366
00:45:47,829 --> 00:45:47,839
we just returned from dev enter um
 

2367
00:45:47,839 --> 00:45:51,589
we just returned from dev enter um
and the interesting thing about this

2368
00:45:51,589 --> 00:45:51,599
and the interesting thing about this
 

2369
00:45:51,599 --> 00:45:56,390
and the interesting thing about this
is that um what we're about to do

2370
00:45:56,390 --> 00:45:56,400
is that um what we're about to do
 

2371
00:45:56,400 --> 00:45:57,990
is that um what we're about to do
i mean looking forward we're currently

2372
00:45:57,990 --> 00:45:58,000
i mean looking forward we're currently
 

2373
00:45:58,000 --> 00:45:59,750
i mean looking forward we're currently
at this line here and

2374
00:45:59,750 --> 00:45:59,760
at this line here and
 

2375
00:45:59,760 --> 00:46:02,230
at this line here and
we're looking forward to this called the

2376
00:46:02,230 --> 00:46:02,240
we're looking forward to this called the
 

2377
00:46:02,240 --> 00:46:03,670
we're looking forward to this called the
yield

2378
00:46:03,670 --> 00:46:03,680
yield
 

2379
00:46:03,680 --> 00:46:06,550
yield
when dividend to return to you can see

2380
00:46:06,550 --> 00:46:06,560
when dividend to return to you can see
 

2381
00:46:06,560 --> 00:46:07,510
when dividend to return to you can see
from this

2382
00:46:07,510 --> 00:46:07,520
from this
 

2383
00:46:07,520 --> 00:46:09,829
from this
value return is two that two is

2384
00:46:09,829 --> 00:46:09,839
value return is two that two is
 

2385
00:46:09,839 --> 00:46:11,270
value return is two that two is
basically the device number

2386
00:46:11,270 --> 00:46:11,280
basically the device number
 

2387
00:46:11,280 --> 00:46:14,230
basically the device number
and we're going to see that by and by

2388
00:46:14,230 --> 00:46:14,240
and we're going to see that by and by
 

2389
00:46:14,240 --> 00:46:17,270
and we're going to see that by and by
because which devices too

2390
00:46:17,270 --> 00:46:17,280
because which devices too
 

2391
00:46:17,280 --> 00:46:19,030
because which devices too
user perhaps going to call yield which

2392
00:46:19,030 --> 00:46:19,040
user perhaps going to call yield which
 

2393
00:46:19,040 --> 00:46:20,630
user perhaps going to call yield which
will give up the cpu

2394
00:46:20,630 --> 00:46:20,640
will give up the cpu
 

2395
00:46:20,640 --> 00:46:22,710
will give up the cpu
and allow switch another process so

2396
00:46:22,710 --> 00:46:22,720
and allow switch another process so
 

2397
00:46:22,720 --> 00:46:23,910
and allow switch another process so
we'll see that in a moment

2398
00:46:23,910 --> 00:46:23,920
we'll see that in a moment
 

2399
00:46:23,920 --> 00:46:25,670
we'll see that in a moment
meantime let's look at what was

2400
00:46:25,670 --> 00:46:25,680
meantime let's look at what was
 

2401
00:46:25,680 --> 00:46:27,510
meantime let's look at what was
currently executing when the interrupt

2402
00:46:27,510 --> 00:46:27,520
currently executing when the interrupt
 

2403
00:46:27,520 --> 00:46:28,390
currently executing when the interrupt
happened

2404
00:46:28,390 --> 00:46:28,400
happened
 

2405
00:46:28,400 --> 00:46:31,990
happened
so i'm going to print p the variable

2406
00:46:31,990 --> 00:46:32,000
so i'm going to print p the variable
 

2407
00:46:32,000 --> 00:46:34,630
so i'm going to print p the variable
p holds a pointer to the current process

2408
00:46:34,630 --> 00:46:34,640
p holds a pointer to the current process
 

2409
00:46:34,640 --> 00:46:35,349
p holds a pointer to the current process
is struct

2410
00:46:35,349 --> 00:46:35,359
is struct
 

2411
00:46:35,359 --> 00:46:38,790
is struct
proc um

2412
00:46:38,790 --> 00:46:38,800
proc um
 

2413
00:46:38,800 --> 00:46:40,230
proc um
okay we have a question what makes each

2414
00:46:40,230 --> 00:46:40,240
okay we have a question what makes each
 

2415
00:46:40,240 --> 00:46:42,150
okay we have a question what makes each
process's kernel thread

2416
00:46:42,150 --> 00:46:42,160
process's kernel thread
 

2417
00:46:42,160 --> 00:46:45,589
process's kernel thread
different every process has a

2418
00:46:45,589 --> 00:46:45,599
different every process has a
 

2419
00:46:45,599 --> 00:46:48,630
different every process has a
separate kernel thread so there's really

2420
00:46:48,630 --> 00:46:48,640
separate kernel thread so there's really
 

2421
00:46:48,640 --> 00:46:49,990
separate kernel thread so there's really
two things that

2422
00:46:49,990 --> 00:46:50,000
two things that
 

2423
00:46:50,000 --> 00:46:52,150
two things that
differentiate different processes kernel

2424
00:46:52,150 --> 00:46:52,160
differentiate different processes kernel
 

2425
00:46:52,160 --> 00:46:53,270
differentiate different processes kernel
thread because more than one could be

2426
00:46:53,270 --> 00:46:53,280
thread because more than one could be
 

2427
00:46:53,280 --> 00:46:54,710
thread because more than one could be
executing on

2428
00:46:54,710 --> 00:46:54,720
executing on
 

2429
00:46:54,720 --> 00:46:58,950
executing on
different cores one is indeed that every

2430
00:46:58,950 --> 00:46:58,960
different cores one is indeed that every
 

2431
00:46:58,960 --> 00:46:59,750
different cores one is indeed that every
process

2432
00:46:59,750 --> 00:46:59,760
process
 

2433
00:46:59,760 --> 00:47:02,150
process
has a separate kernel stack and that's

2434
00:47:02,150 --> 00:47:02,160
has a separate kernel stack and that's
 

2435
00:47:02,160 --> 00:47:03,829
has a separate kernel stack and that's
what's pointed to by that

2436
00:47:03,829 --> 00:47:03,839
what's pointed to by that
 

2437
00:47:03,839 --> 00:47:06,790
what's pointed to by that
k stack element of struck proc and the

2438
00:47:06,790 --> 00:47:06,800
k stack element of struck proc and the
 

2439
00:47:06,800 --> 00:47:07,109
k stack element of struck proc and the
other

2440
00:47:07,109 --> 00:47:07,119
other
 

2441
00:47:07,119 --> 00:47:13,430
other
is that

2442
00:47:13,430 --> 00:47:13,440

 

2443
00:47:13,440 --> 00:47:16,470

uh early in

2444
00:47:16,470 --> 00:47:16,480
uh early in
 

2445
00:47:16,480 --> 00:47:18,150
uh early in
we're in user trap which is you know the

2446
00:47:18,150 --> 00:47:18,160
we're in user trap which is you know the
 

2447
00:47:18,160 --> 00:47:20,549
we're in user trap which is you know the
c code that's called

2448
00:47:20,549 --> 00:47:20,559
c code that's called
 

2449
00:47:20,559 --> 00:47:25,589
c code that's called
by trampoline when an interrupt occurs

2450
00:47:25,589 --> 00:47:25,599

 

2451
00:47:25,599 --> 00:47:28,630

we can tell by this call that my any

2452
00:47:28,630 --> 00:47:28,640
we can tell by this call that my any
 

2453
00:47:28,640 --> 00:47:30,790
we can tell by this call that my any
any kernel code can tell by calling

2454
00:47:30,790 --> 00:47:30,800
any kernel code can tell by calling
 

2455
00:47:30,800 --> 00:47:31,910
any kernel code can tell by calling
myproc

2456
00:47:31,910 --> 00:47:31,920
myproc
 

2457
00:47:31,920 --> 00:47:34,630
myproc
what the process is that's running on

2458
00:47:34,630 --> 00:47:34,640
what the process is that's running on
 

2459
00:47:34,640 --> 00:47:36,549
what the process is that's running on
the current cpu

2460
00:47:36,549 --> 00:47:36,559
the current cpu
 

2461
00:47:36,559 --> 00:47:37,510
the current cpu
and that's another thing that

2462
00:47:37,510 --> 00:47:37,520
and that's another thing that
 

2463
00:47:37,520 --> 00:47:40,390
and that's another thing that
differentiates um

2464
00:47:40,390 --> 00:47:40,400
differentiates um
 

2465
00:47:40,400 --> 00:47:42,950
differentiates um
that allows each cr that allows kernel

2466
00:47:42,950 --> 00:47:42,960
that allows each cr that allows kernel
 

2467
00:47:42,960 --> 00:47:45,190
that allows each cr that allows kernel
code to tell what process it's part of

2468
00:47:45,190 --> 00:47:45,200
code to tell what process it's part of
 

2469
00:47:45,200 --> 00:47:45,750
code to tell what process it's part of
that is

2470
00:47:45,750 --> 00:47:45,760
that is
 

2471
00:47:45,760 --> 00:47:47,270
that is
which processes kernel thread is

2472
00:47:47,270 --> 00:47:47,280
which processes kernel thread is
 

2473
00:47:47,280 --> 00:47:49,030
which processes kernel thread is
executing and what myproc does is

2474
00:47:49,030 --> 00:47:49,040
executing and what myproc does is
 

2475
00:47:49,040 --> 00:47:50,870
executing and what myproc does is
basically use the tp register which you

2476
00:47:50,870 --> 00:47:50,880
basically use the tp register which you
 

2477
00:47:50,880 --> 00:47:53,030
basically use the tp register which you
may recall

2478
00:47:53,030 --> 00:47:53,040
may recall
 

2479
00:47:53,040 --> 00:47:56,630
may recall
is set up to contain the current core's

2480
00:47:56,630 --> 00:47:56,640
is set up to contain the current core's
 

2481
00:47:56,640 --> 00:47:59,109
is set up to contain the current core's
heart id or core number it uses that to

2482
00:47:59,109 --> 00:47:59,119
heart id or core number it uses that to
 

2483
00:47:59,119 --> 00:48:01,589
heart id or core number it uses that to
index into an array of structures that

2484
00:48:01,589 --> 00:48:01,599
index into an array of structures that
 

2485
00:48:01,599 --> 00:48:03,670
index into an array of structures that
say for each core that the scheduler

2486
00:48:03,670 --> 00:48:03,680
say for each core that the scheduler
 

2487
00:48:03,680 --> 00:48:06,470
say for each core that the scheduler
sets whenever it switches processes to

2488
00:48:06,470 --> 00:48:06,480
sets whenever it switches processes to
 

2489
00:48:06,480 --> 00:48:08,309
sets whenever it switches processes to
indicate for each core which process is

2490
00:48:08,309 --> 00:48:08,319
indicate for each core which process is
 

2491
00:48:08,319 --> 00:48:11,109
indicate for each core which process is
running on that core

2492
00:48:11,109 --> 00:48:11,119
running on that core
 

2493
00:48:11,119 --> 00:48:12,630
running on that core
and so that's how different kernel

2494
00:48:12,630 --> 00:48:12,640
and so that's how different kernel
 

2495
00:48:12,640 --> 00:48:15,670
and so that's how different kernel
threads are differentiated

2496
00:48:15,670 --> 00:48:15,680
threads are differentiated
 

2497
00:48:15,680 --> 00:48:18,870
threads are differentiated
okay so i was going to use that p value

2498
00:48:18,870 --> 00:48:18,880
okay so i was going to use that p value
 

2499
00:48:18,880 --> 00:48:20,549
okay so i was going to use that p value
the name and that p-value to figure out

2500
00:48:20,549 --> 00:48:20,559
the name and that p-value to figure out
 

2501
00:48:20,559 --> 00:48:21,910
the name and that p-value to figure out
what process is running

2502
00:48:21,910 --> 00:48:21,920
what process is running
 

2503
00:48:21,920 --> 00:48:23,910
what process is running
xv6 remembers the name it's that spin

2504
00:48:23,910 --> 00:48:23,920
xv6 remembers the name it's that spin
 

2505
00:48:23,920 --> 00:48:25,190
xv6 remembers the name it's that spin
process just

2506
00:48:25,190 --> 00:48:25,200
process just
 

2507
00:48:25,200 --> 00:48:28,150
process just
exactly as expected there were two of

2508
00:48:28,150 --> 00:48:28,160
exactly as expected there were two of
 

2509
00:48:28,160 --> 00:48:29,030
exactly as expected there were two of
them

2510
00:48:29,030 --> 00:48:29,040
them
 

2511
00:48:29,040 --> 00:48:32,829
them
i think with process ids three and four

2512
00:48:32,829 --> 00:48:32,839
i think with process ids three and four
 

2513
00:48:32,839 --> 00:48:35,990
i think with process ids three and four
oops we're currently executing again

2514
00:48:35,990 --> 00:48:36,000
oops we're currently executing again
 

2515
00:48:36,000 --> 00:48:37,349
oops we're currently executing again
process id3

2516
00:48:37,349 --> 00:48:37,359
process id3
 

2517
00:48:37,359 --> 00:48:40,069
process id3
so after the switch we'd expect to be in

2518
00:48:40,069 --> 00:48:40,079
so after the switch we'd expect to be in
 

2519
00:48:40,079 --> 00:48:41,349
so after the switch we'd expect to be in
process id for

2520
00:48:41,349 --> 00:48:41,359
process id for
 

2521
00:48:41,359 --> 00:48:44,950
process id for
the other spin process how can we can

2522
00:48:44,950 --> 00:48:44,960
the other spin process how can we can
 

2523
00:48:44,960 --> 00:48:46,230
the other spin process how can we can
look at the saved

2524
00:48:46,230 --> 00:48:46,240
look at the saved
 

2525
00:48:46,240 --> 00:48:54,549
look at the saved
user registers in the trap frame

2526
00:48:54,549 --> 00:48:54,559

 

2527
00:48:54,559 --> 00:48:57,670

and these are just the 32 registers that

2528
00:48:57,670 --> 00:48:57,680
and these are just the 32 registers that
 

2529
00:48:57,680 --> 00:49:01,030
and these are just the 32 registers that
the trampoline code saves away to save

2530
00:49:01,030 --> 00:49:01,040
the trampoline code saves away to save
 

2531
00:49:01,040 --> 00:49:02,150
the trampoline code saves away to save
the user state

2532
00:49:02,150 --> 00:49:02,160
the user state
 

2533
00:49:02,160 --> 00:49:05,430
the user state
there's the user ra return address

2534
00:49:05,430 --> 00:49:05,440
there's the user ra return address
 

2535
00:49:05,440 --> 00:49:08,470
there's the user ra return address
register user stack pointer

2536
00:49:08,470 --> 00:49:08,480
register user stack pointer
 

2537
00:49:08,480 --> 00:49:12,230
register user stack pointer
user program counter at hex 62.

2538
00:49:12,230 --> 00:49:12,240
user program counter at hex 62.
 

2539
00:49:12,240 --> 00:49:14,150
user program counter at hex 62.
these are all familiar things from when

2540
00:49:14,150 --> 00:49:14,160
these are all familiar things from when
 

2541
00:49:14,160 --> 00:49:15,750
these are all familiar things from when
we looked at

2542
00:49:15,750 --> 00:49:15,760
we looked at
 

2543
00:49:15,760 --> 00:49:18,470
we looked at
traps and you know maybe of the most

2544
00:49:18,470 --> 00:49:18,480
traps and you know maybe of the most
 

2545
00:49:18,480 --> 00:49:19,030
traps and you know maybe of the most
interest

2546
00:49:19,030 --> 00:49:19,040
interest
 

2547
00:49:19,040 --> 00:49:23,190
interest
is that

2548
00:49:23,190 --> 00:49:23,200

 

2549
00:49:23,200 --> 00:49:25,349

the trap frame saves the user program

2550
00:49:25,349 --> 00:49:25,359
the trap frame saves the user program
 

2551
00:49:25,359 --> 00:49:27,990
the trap frame saves the user program
counter it's at value 62

2552
00:49:27,990 --> 00:49:28,000
counter it's at value 62
 

2553
00:49:28,000 --> 00:49:31,589
counter it's at value 62
if we cared

2554
00:49:31,589 --> 00:49:31,599
if we cared
 

2555
00:49:31,599 --> 00:49:34,390
if we cared
we can look in the assembly code for

2556
00:49:34,390 --> 00:49:34,400
we can look in the assembly code for
 

2557
00:49:34,400 --> 00:49:37,829
we can look in the assembly code for
spin.c

2558
00:49:37,829 --> 00:49:37,839

 

2559
00:49:37,839 --> 00:49:41,109

just spin.asm and look for 62.

2560
00:49:41,109 --> 00:49:41,119
just spin.asm and look for 62.
 

2561
00:49:41,119 --> 00:49:43,829
just spin.asm and look for 62.
now we can see that oh the interrupt

2562
00:49:43,829 --> 00:49:43,839
now we can see that oh the interrupt
 

2563
00:49:43,839 --> 00:49:45,270
now we can see that oh the interrupt
time or an interrupt occurred during

2564
00:49:45,270 --> 00:49:45,280
time or an interrupt occurred during
 

2565
00:49:45,280 --> 00:49:45,910
time or an interrupt occurred during
this ad

2566
00:49:45,910 --> 00:49:45,920
this ad
 

2567
00:49:45,920 --> 00:49:49,109
this ad
instruction in that infinite loop

2568
00:49:49,109 --> 00:49:49,119
instruction in that infinite loop
 

2569
00:49:49,119 --> 00:49:55,510
instruction in that infinite loop
in spin so it's not too surprising

2570
00:49:55,510 --> 00:49:55,520

 

2571
00:49:55,520 --> 00:49:58,950

okay so back to

2572
00:49:58,950 --> 00:49:58,960
okay so back to
 

2573
00:49:58,960 --> 00:50:00,870
okay so back to
the trap code they've entered just

2574
00:50:00,870 --> 00:50:00,880
the trap code they've entered just
 

2575
00:50:00,880 --> 00:50:03,109
the trap code they've entered just
returned i'm going to type

2576
00:50:03,109 --> 00:50:03,119
returned i'm going to type
 

2577
00:50:03,119 --> 00:50:09,030
returned i'm going to type
step a few times to get us to the

2578
00:50:09,030 --> 00:50:09,040

 

2579
00:50:09,040 --> 00:50:11,030

to just being about to execute this

2580
00:50:11,030 --> 00:50:11,040
to just being about to execute this
 

2581
00:50:11,040 --> 00:50:12,309
to just being about to execute this
yield

2582
00:50:12,309 --> 00:50:12,319
yield
 

2583
00:50:12,319 --> 00:50:13,750
yield
and yield is sort of the first step in

2584
00:50:13,750 --> 00:50:13,760
and yield is sort of the first step in
 

2585
00:50:13,760 --> 00:50:15,990
and yield is sort of the first step in
the process of giving up the cpu

2586
00:50:15,990 --> 00:50:16,000
the process of giving up the cpu
 

2587
00:50:16,000 --> 00:50:17,430
the process of giving up the cpu
switching to the scheduler letting the

2588
00:50:17,430 --> 00:50:17,440
switching to the scheduler letting the
 

2589
00:50:17,440 --> 00:50:17,990
switching to the scheduler letting the
scheduler

2590
00:50:17,990 --> 00:50:18,000
scheduler
 

2591
00:50:18,000 --> 00:50:20,230
scheduler
choose another kernel thread and process

2592
00:50:20,230 --> 00:50:20,240
choose another kernel thread and process
 

2593
00:50:20,240 --> 00:50:24,309
choose another kernel thread and process
to run

2594
00:50:24,309 --> 00:50:24,319

 

2595
00:50:24,319 --> 00:50:26,230

all right so let's actually step into

2596
00:50:26,230 --> 00:50:26,240
all right so let's actually step into
 

2597
00:50:26,240 --> 00:50:27,349
all right so let's actually step into
yield

2598
00:50:27,349 --> 00:50:27,359
yield
 

2599
00:50:27,359 --> 00:50:30,309
yield
now we're in yield yields um if you have

2600
00:50:30,309 --> 00:50:30,319
now we're in yield yields um if you have
 

2601
00:50:30,319 --> 00:50:31,510
now we're in yield yields um if you have
a question

2602
00:50:31,510 --> 00:50:31,520
a question
 

2603
00:50:31,520 --> 00:50:38,829
a question
no

2604
00:50:38,829 --> 00:50:38,839

 

2605
00:50:38,839 --> 00:50:43,589

oops

2606
00:50:43,589 --> 00:50:43,599

 

2607
00:50:43,599 --> 00:50:47,510

okay we're in yield um

2608
00:50:47,510 --> 00:50:47,520
okay we're in yield um
 

2609
00:50:47,520 --> 00:50:51,109
okay we're in yield um
yield does just a couple of things it uh

2610
00:50:51,109 --> 00:50:51,119
yield does just a couple of things it uh
 

2611
00:50:51,119 --> 00:50:54,390
yield does just a couple of things it uh
acquires the lock for this process

2612
00:50:54,390 --> 00:50:54,400
acquires the lock for this process
 

2613
00:50:54,400 --> 00:50:55,670
acquires the lock for this process
because it's about to make a bunch of

2614
00:50:55,670 --> 00:50:55,680
because it's about to make a bunch of
 

2615
00:50:55,680 --> 00:50:57,430
because it's about to make a bunch of
changes to this process and

2616
00:50:57,430 --> 00:50:57,440
changes to this process and
 

2617
00:50:57,440 --> 00:51:00,390
changes to this process and
it doesn't want any other and in fact

2618
00:51:00,390 --> 00:51:00,400
it doesn't want any other and in fact
 

2619
00:51:00,400 --> 00:51:01,910
it doesn't want any other and in fact
until it gives up the lock the state of

2620
00:51:01,910 --> 00:51:01,920
until it gives up the lock the state of
 

2621
00:51:01,920 --> 00:51:03,510
until it gives up the lock the state of
this process will be sort of

2622
00:51:03,510 --> 00:51:03,520
this process will be sort of
 

2623
00:51:03,520 --> 00:51:06,150
this process will be sort of
inconsistent um like for example it's

2624
00:51:06,150 --> 00:51:06,160
inconsistent um like for example it's
 

2625
00:51:06,160 --> 00:51:08,309
inconsistent um like for example it's
about yield is about to change the state

2626
00:51:08,309 --> 00:51:08,319
about yield is about to change the state
 

2627
00:51:08,319 --> 00:51:10,470
about yield is about to change the state
of the process to runnable which

2628
00:51:10,470 --> 00:51:10,480
of the process to runnable which
 

2629
00:51:10,480 --> 00:51:12,470
of the process to runnable which
would you know indicates that the

2630
00:51:12,470 --> 00:51:12,480
would you know indicates that the
 

2631
00:51:12,480 --> 00:51:15,030
would you know indicates that the
process is not running but would like to

2632
00:51:15,030 --> 00:51:15,040
process is not running but would like to
 

2633
00:51:15,040 --> 00:51:17,829
process is not running but would like to
but this process is running right i mean

2634
00:51:17,829 --> 00:51:17,839
but this process is running right i mean
 

2635
00:51:17,839 --> 00:51:19,109
but this process is running right i mean
we're running the process right now

2636
00:51:19,109 --> 00:51:19,119
we're running the process right now
 

2637
00:51:19,119 --> 00:51:20,549
we're running the process right now
that's what's executing is the kernel

2638
00:51:20,549 --> 00:51:20,559
that's what's executing is the kernel
 

2639
00:51:20,559 --> 00:51:21,990
that's what's executing is the kernel
threat for this process

2640
00:51:21,990 --> 00:51:22,000
threat for this process
 

2641
00:51:22,000 --> 00:51:23,829
threat for this process
and so the one of the many things that

2642
00:51:23,829 --> 00:51:23,839
and so the one of the many things that
 

2643
00:51:23,839 --> 00:51:25,109
and so the one of the many things that
acquire in this lock does

2644
00:51:25,109 --> 00:51:25,119
acquire in this lock does
 

2645
00:51:25,119 --> 00:51:27,670
acquire in this lock does
is uh makes it so that even though we

2646
00:51:27,670 --> 00:51:27,680
is uh makes it so that even though we
 

2647
00:51:27,680 --> 00:51:29,270
is uh makes it so that even though we
just changed the state to runnable

2648
00:51:29,270 --> 00:51:29,280
just changed the state to runnable
 

2649
00:51:29,280 --> 00:51:32,069
just changed the state to runnable
no other core scheduling thread will

2650
00:51:32,069 --> 00:51:32,079
no other core scheduling thread will
 

2651
00:51:32,079 --> 00:51:33,670
no other core scheduling thread will
look at this process

2652
00:51:33,670 --> 00:51:33,680
look at this process
 

2653
00:51:33,680 --> 00:51:36,630
look at this process
and because of the lock and see that

2654
00:51:36,630 --> 00:51:36,640
and because of the lock and see that
 

2655
00:51:36,640 --> 00:51:38,309
and because of the lock and see that
it's runnable and try to run it

2656
00:51:38,309 --> 00:51:38,319
it's runnable and try to run it
 

2657
00:51:38,319 --> 00:51:39,670
it's runnable and try to run it
while we're still running it on this

2658
00:51:39,670 --> 00:51:39,680
while we're still running it on this
 

2659
00:51:39,680 --> 00:51:41,109
while we're still running it on this
core which would be a disaster right

2660
00:51:41,109 --> 00:51:41,119
core which would be a disaster right
 

2661
00:51:41,119 --> 00:51:43,109
core which would be a disaster right
running the same process

2662
00:51:43,109 --> 00:51:43,119
running the same process
 

2663
00:51:43,119 --> 00:51:45,030
running the same process
um on two different cores and that

2664
00:51:45,030 --> 00:51:45,040
um on two different cores and that
 

2665
00:51:45,040 --> 00:51:47,109
um on two different cores and that
process has only one stack

2666
00:51:47,109 --> 00:51:47,119
process has only one stack
 

2667
00:51:47,119 --> 00:51:48,870
process has only one stack
so that means like two different cores

2668
00:51:48,870 --> 00:51:48,880
so that means like two different cores
 

2669
00:51:48,880 --> 00:51:50,390
so that means like two different cores
are you know calling subroutines on the

2670
00:51:50,390 --> 00:51:50,400
are you know calling subroutines on the
 

2671
00:51:50,400 --> 00:51:51,589
are you know calling subroutines on the
same stack which is

2672
00:51:51,589 --> 00:51:51,599
same stack which is
 

2673
00:51:51,599 --> 00:51:55,510
same stack which is
um just a recipe for disaster

2674
00:51:55,510 --> 00:51:55,520
um just a recipe for disaster
 

2675
00:51:55,520 --> 00:51:59,430
um just a recipe for disaster
so we take the lock out

2676
00:51:59,430 --> 00:51:59,440

 

2677
00:51:59,440 --> 00:52:02,829

we yield changes the state to runable

2678
00:52:02,829 --> 00:52:02,839
we yield changes the state to runable
 

2679
00:52:02,839 --> 00:52:06,230
we yield changes the state to runable
um and what this means is that you know

2680
00:52:06,230 --> 00:52:06,240
um and what this means is that you know
 

2681
00:52:06,240 --> 00:52:09,430
um and what this means is that you know
when we finally given up the

2682
00:52:09,430 --> 00:52:09,440
when we finally given up the
 

2683
00:52:09,440 --> 00:52:12,950
when we finally given up the
um when we finally yield

2684
00:52:12,950 --> 00:52:12,960
um when we finally yield
 

2685
00:52:12,960 --> 00:52:14,549
um when we finally yield
the cpu and give it up and switch to the

2686
00:52:14,549 --> 00:52:14,559
the cpu and give it up and switch to the
 

2687
00:52:14,559 --> 00:52:16,069
the cpu and give it up and switch to the
scheduler process this state will be

2688
00:52:16,069 --> 00:52:16,079
scheduler process this state will be
 

2689
00:52:16,079 --> 00:52:17,670
scheduler process this state will be
left in this runnable state so that it

2690
00:52:17,670 --> 00:52:17,680
left in this runnable state so that it
 

2691
00:52:17,680 --> 00:52:18,870
left in this runnable state so that it
will run again

2692
00:52:18,870 --> 00:52:18,880
will run again
 

2693
00:52:18,880 --> 00:52:20,309
will run again
because after all this was a timer

2694
00:52:20,309 --> 00:52:20,319
because after all this was a timer
 

2695
00:52:20,319 --> 00:52:21,990
because after all this was a timer
interrupt that interrupted a running

2696
00:52:21,990 --> 00:52:22,000
interrupt that interrupted a running
 

2697
00:52:22,000 --> 00:52:23,510
interrupt that interrupted a running
user level process that would like to

2698
00:52:23,510 --> 00:52:23,520
user level process that would like to
 

2699
00:52:23,520 --> 00:52:24,710
user level process that would like to
continue computing

2700
00:52:24,710 --> 00:52:24,720
continue computing
 

2701
00:52:24,720 --> 00:52:26,710
continue computing
so we're going to leave it in state

2702
00:52:26,710 --> 00:52:26,720
so we're going to leave it in state
 

2703
00:52:26,720 --> 00:52:28,069
so we're going to leave it in state
runnable so that it will run again

2704
00:52:28,069 --> 00:52:28,079
runnable so that it will run again
 

2705
00:52:28,079 --> 00:52:34,549
runnable so that it will run again
as soon as the scheduler decides to

2706
00:52:34,549 --> 00:52:34,559

 

2707
00:52:34,559 --> 00:52:44,390

and then the only other thing the

2708
00:52:44,390 --> 00:52:44,400

 

2709
00:52:44,400 --> 00:52:46,069

yield does is call this scheduler

2710
00:52:46,069 --> 00:52:46,079
yield does is call this scheduler
 

2711
00:52:46,079 --> 00:52:48,390
yield does is call this scheduler
function

2712
00:52:48,390 --> 00:52:48,400
function
 

2713
00:52:48,400 --> 00:52:49,750
function
so i'm going to step into the scheduler

2714
00:52:49,750 --> 00:52:49,760
so i'm going to step into the scheduler
 

2715
00:52:49,760 --> 00:52:52,150
so i'm going to step into the scheduler
function i'll show this

2716
00:52:52,150 --> 00:52:52,160
function i'll show this
 

2717
00:52:52,160 --> 00:53:01,430
function i'll show this
whole thing here

2718
00:53:01,430 --> 00:53:01,440
whole thing here
 

2719
00:53:01,440 --> 00:53:04,230
whole thing here
um this scheduler something does almost

2720
00:53:04,230 --> 00:53:04,240
um this scheduler something does almost
 

2721
00:53:04,240 --> 00:53:06,069
um this scheduler something does almost
nothing it does a bunch of checks

2722
00:53:06,069 --> 00:53:06,079
nothing it does a bunch of checks
 

2723
00:53:06,079 --> 00:53:08,470
nothing it does a bunch of checks
it does a whole bunch of sanity checks

2724
00:53:08,470 --> 00:53:08,480
it does a whole bunch of sanity checks
 

2725
00:53:08,480 --> 00:53:09,270
it does a whole bunch of sanity checks
and panics

2726
00:53:09,270 --> 00:53:09,280
and panics
 

2727
00:53:09,280 --> 00:53:13,589
and panics
and the reason for that is actually that

2728
00:53:13,589 --> 00:53:13,599

 

2729
00:53:13,599 --> 00:53:16,870

this code in xv6 over its many year

2730
00:53:16,870 --> 00:53:16,880
this code in xv6 over its many year
 

2731
00:53:16,880 --> 00:53:18,470
this code in xv6 over its many year
lifetime has had a

2732
00:53:18,470 --> 00:53:18,480
lifetime has had a
 

2733
00:53:18,480 --> 00:53:21,270
lifetime has had a
been among the most bug prone and had

2734
00:53:21,270 --> 00:53:21,280
been among the most bug prone and had
 

2735
00:53:21,280 --> 00:53:22,950
been among the most bug prone and had
most surprises

2736
00:53:22,950 --> 00:53:22,960
most surprises
 

2737
00:53:22,960 --> 00:53:25,430
most surprises
um on unhappy surprises so there's a lot

2738
00:53:25,430 --> 00:53:25,440
um on unhappy surprises so there's a lot
 

2739
00:53:25,440 --> 00:53:27,030
um on unhappy surprises so there's a lot
of

2740
00:53:27,030 --> 00:53:27,040
of
 

2741
00:53:27,040 --> 00:53:30,630
of
sanity checks and panics here because um

2742
00:53:30,630 --> 00:53:30,640
sanity checks and panics here because um
 

2743
00:53:30,640 --> 00:53:31,990
sanity checks and panics here because um
because there's often been bugs

2744
00:53:31,990 --> 00:53:32,000
because there's often been bugs
 

2745
00:53:32,000 --> 00:53:35,510
because there's often been bugs
associated with this code

2746
00:53:35,510 --> 00:53:35,520

 

2747
00:53:35,520 --> 00:53:38,390

all right i'm gonna um skip over these

2748
00:53:38,390 --> 00:53:38,400
all right i'm gonna um skip over these
 

2749
00:53:38,400 --> 00:53:39,670
all right i'm gonna um skip over these
um

2750
00:53:39,670 --> 00:53:39,680
um
 

2751
00:53:39,680 --> 00:53:46,790
um
sanity checks and proceed to the

2752
00:53:46,790 --> 00:53:46,800

 

2753
00:53:46,800 --> 00:53:48,549

call to switch this call to switch is

2754
00:53:48,549 --> 00:53:48,559
call to switch this call to switch is
 

2755
00:53:48,559 --> 00:53:49,750
call to switch this call to switch is
where the real action happens this is

2756
00:53:49,750 --> 00:53:49,760
where the real action happens this is
 

2757
00:53:49,760 --> 00:53:51,190
where the real action happens this is
called the switch it's going to

2758
00:53:51,190 --> 00:53:51,200
called the switch it's going to
 

2759
00:53:51,200 --> 00:53:54,710
called the switch it's going to
save away the current kernel threads

2760
00:53:54,710 --> 00:53:54,720
save away the current kernel threads
 

2761
00:53:54,720 --> 00:53:55,670
save away the current kernel threads
registers

2762
00:53:55,670 --> 00:53:55,680
registers
 

2763
00:53:55,680 --> 00:53:58,069
registers
in pro context which is the current

2764
00:53:58,069 --> 00:53:58,079
in pro context which is the current
 

2765
00:53:58,079 --> 00:53:59,109
in pro context which is the current
processes

2766
00:53:59,109 --> 00:53:59,119
processes
 

2767
00:53:59,119 --> 00:54:01,190
processes
saved kernel thread context save set of

2768
00:54:01,190 --> 00:54:01,200
saved kernel thread context save set of
 

2769
00:54:01,200 --> 00:54:03,030
saved kernel thread context save set of
registers

2770
00:54:03,030 --> 00:54:03,040
registers
 

2771
00:54:03,040 --> 00:54:06,549
registers
c arrow context c is the pointer to this

2772
00:54:06,549 --> 00:54:06,559
c arrow context c is the pointer to this
 

2773
00:54:06,559 --> 00:54:09,670
c arrow context c is the pointer to this
core's struct cpu

2774
00:54:09,670 --> 00:54:09,680
core's struct cpu
 

2775
00:54:09,680 --> 00:54:12,790
core's struct cpu
and struct cpu has the context the save

2776
00:54:12,790 --> 00:54:12,800
and struct cpu has the context the save
 

2777
00:54:12,800 --> 00:54:13,589
and struct cpu has the context the save
registers

2778
00:54:13,589 --> 00:54:13,599
registers
 

2779
00:54:13,599 --> 00:54:16,470
registers
of this core's scheduler thread so we're

2780
00:54:16,470 --> 00:54:16,480
of this core's scheduler thread so we're
 

2781
00:54:16,480 --> 00:54:18,390
of this core's scheduler thread so we're
going to be switching from this thread

2782
00:54:18,390 --> 00:54:18,400
going to be switching from this thread
 

2783
00:54:18,400 --> 00:54:20,549
going to be switching from this thread
saving this red state restoring the

2784
00:54:20,549 --> 00:54:20,559
saving this red state restoring the
 

2785
00:54:20,559 --> 00:54:22,549
saving this red state restoring the
threat state of

2786
00:54:22,549 --> 00:54:22,559
threat state of
 

2787
00:54:22,559 --> 00:54:24,790
threat state of
discord's scheduler and sort of

2788
00:54:24,790 --> 00:54:24,800
discord's scheduler and sort of
 

2789
00:54:24,800 --> 00:54:27,190
discord's scheduler and sort of
continuing the execution of this score's

2790
00:54:27,190 --> 00:54:27,200
continuing the execution of this score's
 

2791
00:54:27,200 --> 00:54:32,790
continuing the execution of this score's
course scheduler thread

2792
00:54:32,790 --> 00:54:32,800

 

2793
00:54:32,800 --> 00:54:36,470

okay so let's see what uh

2794
00:54:36,470 --> 00:54:36,480

 

2795
00:54:36,480 --> 00:54:39,750

let's take a quick preview at

2796
00:54:39,750 --> 00:54:39,760
let's take a quick preview at
 

2797
00:54:39,760 --> 00:54:41,430
let's take a quick preview at
the context that we're going to be

2798
00:54:41,430 --> 00:54:41,440
the context that we're going to be
 

2799
00:54:41,440 --> 00:54:43,190
the context that we're going to be
switching to

2800
00:54:43,190 --> 00:54:43,200
switching to
 

2801
00:54:43,200 --> 00:54:45,829
switching to
and i can get that turns out that i

2802
00:54:45,829 --> 00:54:45,839
and i can get that turns out that i
 

2803
00:54:45,839 --> 00:54:47,910
and i can get that turns out that i
can't actually print cro context but i

2804
00:54:47,910 --> 00:54:47,920
can't actually print cro context but i
 

2805
00:54:47,920 --> 00:54:49,750
can't actually print cro context but i
happen to know that c

2806
00:54:49,750 --> 00:54:49,760
happen to know that c
 

2807
00:54:49,760 --> 00:54:52,789
happen to know that c
prints to cpus zero just

2808
00:54:52,789 --> 00:54:52,799
prints to cpus zero just
 

2809
00:54:52,799 --> 00:54:54,390
prints to cpus zero just
because we're on the zero with core

2810
00:54:54,390 --> 00:54:54,400
because we're on the zero with core
 

2811
00:54:54,400 --> 00:54:55,910
because we're on the zero with core
there's only one core

2812
00:54:55,910 --> 00:54:55,920
there's only one core
 

2813
00:54:55,920 --> 00:55:00,950
there's only one core
um and i can print its context

2814
00:55:00,950 --> 00:55:00,960

 

2815
00:55:00,960 --> 00:55:04,470

and so this is the saved

2816
00:55:04,470 --> 00:55:04,480
and so this is the saved
 

2817
00:55:04,480 --> 00:55:07,990
and so this is the saved
registers from this course scheduler

2818
00:55:07,990 --> 00:55:08,000
registers from this course scheduler
 

2819
00:55:08,000 --> 00:55:10,470
registers from this course scheduler
thread

2820
00:55:10,470 --> 00:55:10,480

 

2821
00:55:10,480 --> 00:55:12,470

and of particular interest is the ra

2822
00:55:12,470 --> 00:55:12,480
and of particular interest is the ra
 

2823
00:55:12,480 --> 00:55:15,030
and of particular interest is the ra
because the ra register

2824
00:55:15,030 --> 00:55:15,040
because the ra register
 

2825
00:55:15,040 --> 00:55:18,230
because the ra register
is where the current function call

2826
00:55:18,230 --> 00:55:18,240
is where the current function call
 

2827
00:55:18,240 --> 00:55:19,589
is where the current function call
is going to return to so we're going to

2828
00:55:19,589 --> 00:55:19,599
is going to return to so we're going to
 

2829
00:55:19,599 --> 00:55:20,870
is going to return to so we're going to
switch to the scheduler thread and it's

2830
00:55:20,870 --> 00:55:20,880
switch to the scheduler thread and it's
 

2831
00:55:20,880 --> 00:55:22,630
switch to the scheduler thread and it's
going to do a return

2832
00:55:22,630 --> 00:55:22,640
going to do a return
 

2833
00:55:22,640 --> 00:55:27,190
going to do a return
and return to that ra and

2834
00:55:27,190 --> 00:55:27,200
and return to that ra and
 

2835
00:55:27,200 --> 00:55:29,109
and return to that ra and
we can find out where that are where

2836
00:55:29,109 --> 00:55:29,119
we can find out where that are where
 

2837
00:55:29,119 --> 00:55:32,829
we can find out where that are where
that return address is by looking in

2838
00:55:32,829 --> 00:55:32,839

 

2839
00:55:32,839 --> 00:55:35,109

kernel.asm

2840
00:55:35,109 --> 00:55:35,119
kernel.asm
 

2841
00:55:35,119 --> 00:55:44,069
kernel.asm
actually that's uh

2842
00:55:44,069 --> 00:55:44,079

 

2843
00:55:44,079 --> 00:55:45,990

and as you can see this x slash i you

2844
00:55:45,990 --> 00:55:46,000
and as you can see this x slash i you
 

2845
00:55:46,000 --> 00:55:47,910
and as you can see this x slash i you
know prints the instructions that are at

2846
00:55:47,910 --> 00:55:47,920
know prints the instructions that are at
 

2847
00:55:47,920 --> 00:55:49,589
know prints the instructions that are at
a certain address but it also prints the

2848
00:55:49,589 --> 00:55:49,599
a certain address but it also prints the
 

2849
00:55:49,599 --> 00:55:50,710
a certain address but it also prints the
label

2850
00:55:50,710 --> 00:55:50,720
label
 

2851
00:55:50,720 --> 00:55:53,510
label
um of the the name of the function that

2852
00:55:53,510 --> 00:55:53,520
um of the the name of the function that
 

2853
00:55:53,520 --> 00:55:54,950
um of the the name of the function that
those instructions are in it so we're

2854
00:55:54,950 --> 00:55:54,960
those instructions are in it so we're
 

2855
00:55:54,960 --> 00:55:56,549
those instructions are in it so we're
going to be returning

2856
00:55:56,549 --> 00:55:56,559
going to be returning
 

2857
00:55:56,559 --> 00:55:59,030
going to be returning
uh to schedule or buy and buy that's

2858
00:55:59,030 --> 00:55:59,040
uh to schedule or buy and buy that's
 

2859
00:55:59,040 --> 00:55:59,750
uh to schedule or buy and buy that's
just

2860
00:55:59,750 --> 00:55:59,760
just
 

2861
00:55:59,760 --> 00:56:05,030
just
you know as you might expect

2862
00:56:05,030 --> 00:56:05,040

 

2863
00:56:05,040 --> 00:56:11,030

okay um

2864
00:56:11,030 --> 00:56:11,040

 

2865
00:56:11,040 --> 00:56:13,190

i want to look at what switch actually

2866
00:56:13,190 --> 00:56:13,200
i want to look at what switch actually
 

2867
00:56:13,200 --> 00:56:18,630
i want to look at what switch actually
does we're about to call switch

2868
00:56:18,630 --> 00:56:18,640

 

2869
00:56:18,640 --> 00:56:20,150

so i put a breakpoint on switch i'm

2870
00:56:20,150 --> 00:56:20,160
so i put a breakpoint on switch i'm
 

2871
00:56:20,160 --> 00:56:21,190
so i put a breakpoint on switch i'm
putting a breakpoint because there's a

2872
00:56:21,190 --> 00:56:21,200
putting a breakpoint because there's a
 

2873
00:56:21,200 --> 00:56:22,549
putting a breakpoint because there's a
bunch of setup code

2874
00:56:22,549 --> 00:56:22,559
bunch of setup code
 

2875
00:56:22,559 --> 00:56:25,510
bunch of setup code
like that pulls the values of context

2876
00:56:25,510 --> 00:56:25,520
like that pulls the values of context
 

2877
00:56:25,520 --> 00:56:26,549
like that pulls the values of context
out of those structures

2878
00:56:26,549 --> 00:56:26,559
out of those structures
 

2879
00:56:26,559 --> 00:56:30,150
out of those structures
i'm going to skip over it okay so now

2880
00:56:30,150 --> 00:56:30,160
i'm going to skip over it okay so now
 

2881
00:56:30,160 --> 00:56:33,270
i'm going to skip over it okay so now
um we're to break point and switch

2882
00:56:33,270 --> 00:56:33,280
um we're to break point and switch
 

2883
00:56:33,280 --> 00:56:36,150
um we're to break point and switch
the gdb won't show us the instructions

2884
00:56:36,150 --> 00:56:36,160
the gdb won't show us the instructions
 

2885
00:56:36,160 --> 00:56:38,470
the gdb won't show us the instructions
but we can look in switch.s

2886
00:56:38,470 --> 00:56:38,480
but we can look in switch.s
 

2887
00:56:38,480 --> 00:56:39,750
but we can look in switch.s
um to look at the instructions we're

2888
00:56:39,750 --> 00:56:39,760
um to look at the instructions we're
 

2889
00:56:39,760 --> 00:56:42,069
um to look at the instructions we're
about to execute so as you can see we're

2890
00:56:42,069 --> 00:56:42,079
about to execute so as you can see we're
 

2891
00:56:42,079 --> 00:56:43,750
about to execute so as you can see we're
on the very first instruction the store

2892
00:56:43,750 --> 00:56:43,760
on the very first instruction the store
 

2893
00:56:43,760 --> 00:56:43,990
on the very first instruction the store
of

2894
00:56:43,990 --> 00:56:44,000
of
 

2895
00:56:44,000 --> 00:56:47,589
of
ra to the address pointed to by

2896
00:56:47,589 --> 00:56:47,599
ra to the address pointed to by
 

2897
00:56:47,599 --> 00:56:50,230
ra to the address pointed to by
a0 you may remember in the call to

2898
00:56:50,230 --> 00:56:50,240
a0 you may remember in the call to
 

2899
00:56:50,240 --> 00:56:50,789
a0 you may remember in the call to
switch

2900
00:56:50,789 --> 00:56:50,799
switch
 

2901
00:56:50,799 --> 00:56:53,349
switch
that the first argument was the current

2902
00:56:53,349 --> 00:56:53,359
that the first argument was the current
 

2903
00:56:53,359 --> 00:56:55,270
that the first argument was the current
thread's context and the second argument

2904
00:56:55,270 --> 00:56:55,280
thread's context and the second argument
 

2905
00:56:55,280 --> 00:56:56,470
thread's context and the second argument
was the

2906
00:56:56,470 --> 00:56:56,480
was the
 

2907
00:56:56,480 --> 00:56:58,309
was the
context of the thread we're switching to

2908
00:56:58,309 --> 00:56:58,319
context of the thread we're switching to
 

2909
00:56:58,319 --> 00:57:01,190
context of the thread we're switching to
the two arguments go in a0 and a1

2910
00:57:01,190 --> 00:57:01,200
the two arguments go in a0 and a1
 

2911
00:57:01,200 --> 00:57:02,470
the two arguments go in a0 and a1
and so the reason why we see all these

2912
00:57:02,470 --> 00:57:02,480
and so the reason why we see all these
 

2913
00:57:02,480 --> 00:57:04,230
and so the reason why we see all these
stores through

2914
00:57:04,230 --> 00:57:04,240
stores through
 

2915
00:57:04,240 --> 00:57:05,990
stores through
register a0 is because we're storing

2916
00:57:05,990 --> 00:57:06,000
register a0 is because we're storing
 

2917
00:57:06,000 --> 00:57:07,910
register a0 is because we're storing
away a bunch of registers

2918
00:57:07,910 --> 00:57:07,920
away a bunch of registers
 

2919
00:57:07,920 --> 00:57:09,990
away a bunch of registers
in the memory that a0 points to that is

2920
00:57:09,990 --> 00:57:10,000
in the memory that a0 points to that is
 

2921
00:57:10,000 --> 00:57:12,309
in the memory that a0 points to that is
in the context of the thread we're

2922
00:57:12,309 --> 00:57:12,319
in the context of the thread we're
 

2923
00:57:12,319 --> 00:57:13,190
in the context of the thread we're
switching from

2924
00:57:13,190 --> 00:57:13,200
switching from
 

2925
00:57:13,200 --> 00:57:15,829
switching from
and the loads load from address a1

2926
00:57:15,829 --> 00:57:15,839
and the loads load from address a1
 

2927
00:57:15,839 --> 00:57:16,470
and the loads load from address a1
because

2928
00:57:16,470 --> 00:57:16,480
because
 

2929
00:57:16,480 --> 00:57:18,470
because
that's a pointer to the context of the

2930
00:57:18,470 --> 00:57:18,480
that's a pointer to the context of the
 

2931
00:57:18,480 --> 00:57:26,710
that's a pointer to the context of the
thread we're switching to

2932
00:57:26,710 --> 00:57:26,720
thread we're switching to
 

2933
00:57:26,720 --> 00:57:29,990
thread we're switching to
okay um and so thread

2934
00:57:29,990 --> 00:57:30,000
okay um and so thread
 

2935
00:57:30,000 --> 00:57:33,670
okay um and so thread
you know uh switch saves registers

2936
00:57:33,670 --> 00:57:33,680
you know uh switch saves registers
 

2937
00:57:33,680 --> 00:57:35,670
you know uh switch saves registers
loads registers from the target threads

2938
00:57:35,670 --> 00:57:35,680
loads registers from the target threads
 

2939
00:57:35,680 --> 00:57:37,750
loads registers from the target threads
context and then return

2940
00:57:37,750 --> 00:57:37,760
context and then return
 

2941
00:57:37,760 --> 00:57:39,430
context and then return
that's that's why the ra was interesting

2942
00:57:39,430 --> 00:57:39,440
that's that's why the ra was interesting
 

2943
00:57:39,440 --> 00:57:40,710
that's that's why the ra was interesting
because it's going to return to the

2944
00:57:40,710 --> 00:57:40,720
because it's going to return to the
 

2945
00:57:40,720 --> 00:57:42,470
because it's going to return to the
place that ra pointed to namely into

2946
00:57:42,470 --> 00:57:42,480
place that ra pointed to namely into
 

2947
00:57:42,480 --> 00:57:44,150
place that ra pointed to namely into
scheduler

2948
00:57:44,150 --> 00:57:44,160
scheduler
 

2949
00:57:44,160 --> 00:57:46,549
scheduler
all right so one question is you may

2950
00:57:46,549 --> 00:57:46,559
all right so one question is you may
 

2951
00:57:46,559 --> 00:57:47,589
all right so one question is you may
notice here that

2952
00:57:47,589 --> 00:57:47,599
notice here that
 

2953
00:57:47,599 --> 00:57:50,309
notice here that
while switch saves rasp and a bunch of s

2954
00:57:50,309 --> 00:57:50,319
while switch saves rasp and a bunch of s
 

2955
00:57:50,319 --> 00:57:51,190
while switch saves rasp and a bunch of s
registers

2956
00:57:51,190 --> 00:57:51,200
registers
 

2957
00:57:51,200 --> 00:57:53,030
registers
one thing it does not save is the

2958
00:57:53,030 --> 00:57:53,040
one thing it does not save is the
 

2959
00:57:53,040 --> 00:57:54,390
one thing it does not save is the
program counter

2960
00:57:54,390 --> 00:57:54,400
program counter
 

2961
00:57:54,400 --> 00:57:55,510
program counter
there's no mention of the program

2962
00:57:55,510 --> 00:57:55,520
there's no mention of the program
 

2963
00:57:55,520 --> 00:57:57,670
there's no mention of the program
counter here

2964
00:57:57,670 --> 00:57:57,680
counter here
 

2965
00:57:57,680 --> 00:58:04,950
counter here
so why is that

2966
00:58:04,950 --> 00:58:04,960

 

2967
00:58:04,960 --> 00:58:07,829

is it because the program cutter is uh

2968
00:58:07,829 --> 00:58:07,839
is it because the program cutter is uh
 

2969
00:58:07,839 --> 00:58:09,750
is it because the program cutter is uh
updated with like the function calls

2970
00:58:09,750 --> 00:58:09,760
updated with like the function calls
 

2971
00:58:09,760 --> 00:58:11,270
updated with like the function calls
anyway

2972
00:58:11,270 --> 00:58:11,280
anyway
 

2973
00:58:11,280 --> 00:58:13,270
anyway
yeah it's it's the program counter

2974
00:58:13,270 --> 00:58:13,280
yeah it's it's the program counter
 

2975
00:58:13,280 --> 00:58:15,030
yeah it's it's the program counter
there's no actual information value in

2976
00:58:15,030 --> 00:58:15,040
there's no actual information value in
 

2977
00:58:15,040 --> 00:58:16,470
there's no actual information value in
the program counter we know

2978
00:58:16,470 --> 00:58:16,480
the program counter we know
 

2979
00:58:16,480 --> 00:58:18,390
the program counter we know
that where we're executing right now is

2980
00:58:18,390 --> 00:58:18,400
that where we're executing right now is
 

2981
00:58:18,400 --> 00:58:19,910
that where we're executing right now is
in switch

2982
00:58:19,910 --> 00:58:19,920
in switch
 

2983
00:58:19,920 --> 00:58:21,990
in switch
right so there'll be no point in saving

2984
00:58:21,990 --> 00:58:22,000
right so there'll be no point in saving
 

2985
00:58:22,000 --> 00:58:23,510
right so there'll be no point in saving
the program counter because it has an

2986
00:58:23,510 --> 00:58:23,520
the program counter because it has an
 

2987
00:58:23,520 --> 00:58:25,990
the program counter because it has an
extremely predictable value namely

2988
00:58:25,990 --> 00:58:26,000
extremely predictable value namely
 

2989
00:58:26,000 --> 00:58:27,589
extremely predictable value namely
this instruction the address of this

2990
00:58:27,589 --> 00:58:27,599
this instruction the address of this
 

2991
00:58:27,599 --> 00:58:29,990
this instruction the address of this
instruction and switch

2992
00:58:29,990 --> 00:58:30,000
instruction and switch
 

2993
00:58:30,000 --> 00:58:31,829
instruction and switch
what we really care about is where we

2994
00:58:31,829 --> 00:58:31,839
what we really care about is where we
 

2995
00:58:31,839 --> 00:58:33,270
what we really care about is where we
were called from

2996
00:58:33,270 --> 00:58:33,280
were called from
 

2997
00:58:33,280 --> 00:58:34,829
were called from
because when we switch back to this

2998
00:58:34,829 --> 00:58:34,839
because when we switch back to this
 

2999
00:58:34,839 --> 00:58:37,670
because when we switch back to this
thread we want to continue executing out

3000
00:58:37,670 --> 00:58:37,680
thread we want to continue executing out
 

3001
00:58:37,680 --> 00:58:39,670
thread we want to continue executing out
whatever point switch was called from

3002
00:58:39,670 --> 00:58:39,680
whatever point switch was called from
 

3003
00:58:39,680 --> 00:58:42,630
whatever point switch was called from
and it's ra that holds the address of

3004
00:58:42,630 --> 00:58:42,640
and it's ra that holds the address of
 

3005
00:58:42,640 --> 00:58:44,309
and it's ra that holds the address of
the instruction that switch was called

3006
00:58:44,309 --> 00:58:44,319
the instruction that switch was called
 

3007
00:58:44,319 --> 00:58:45,510
the instruction that switch was called
from

3008
00:58:45,510 --> 00:58:45,520
from
 

3009
00:58:45,520 --> 00:58:49,349
from
so it's ra that's being saved away here

3010
00:58:49,349 --> 00:58:49,359
so it's ra that's being saved away here
 

3011
00:58:49,359 --> 00:58:53,910
so it's ra that's being saved away here
and our a is the point at which we'll be

3012
00:58:53,910 --> 00:58:53,920

 

3013
00:58:53,920 --> 00:58:56,390

executing out again let's switch returns

3014
00:58:56,390 --> 00:58:56,400
executing out again let's switch returns
 

3015
00:58:56,400 --> 00:58:59,109
executing out again let's switch returns
so we can even print that we can print

3016
00:58:59,109 --> 00:58:59,119
so we can even print that we can print
 

3017
00:58:59,119 --> 00:59:03,589
so we can even print that we can print
our a

3018
00:59:03,589 --> 00:59:03,599

 

3019
00:59:03,599 --> 00:59:05,030

we can print our a and you know we

3020
00:59:05,030 --> 00:59:05,040
we can print our a and you know we
 

3021
00:59:05,040 --> 00:59:06,710
we can print our a and you know we
haven't actually switched threads yet

3022
00:59:06,710 --> 00:59:06,720
haven't actually switched threads yet
 

3023
00:59:06,720 --> 00:59:08,630
haven't actually switched threads yet
you remember we came here from the sched

3024
00:59:08,630 --> 00:59:08,640
you remember we came here from the sched
 

3025
00:59:08,640 --> 00:59:09,910
you remember we came here from the sched
function um

3026
00:59:09,910 --> 00:59:09,920
function um
 

3027
00:59:09,920 --> 00:59:12,150
function um
so our a is as you might expect a

3028
00:59:12,150 --> 00:59:12,160
so our a is as you might expect a
 

3029
00:59:12,160 --> 00:59:14,789
so our a is as you might expect a
pointer back into the sched function

3030
00:59:14,789 --> 00:59:14,799
pointer back into the sched function
 

3031
00:59:14,799 --> 00:59:17,109
pointer back into the sched function
another question is how come switch only

3032
00:59:17,109 --> 00:59:17,119
another question is how come switch only
 

3033
00:59:17,119 --> 00:59:19,430
another question is how come switch only
saves 14 registers i counted them

3034
00:59:19,430 --> 00:59:19,440
saves 14 registers i counted them
 

3035
00:59:19,440 --> 00:59:22,630
saves 14 registers i counted them
and only saves and restores 14 registers

3036
00:59:22,630 --> 00:59:22,640
and only saves and restores 14 registers
 

3037
00:59:22,640 --> 00:59:25,430
and only saves and restores 14 registers
even though the risk 5 has 32 registers

3038
00:59:25,430 --> 00:59:25,440
even though the risk 5 has 32 registers
 

3039
00:59:25,440 --> 00:59:27,349
even though the risk 5 has 32 registers
available for the

3040
00:59:27,349 --> 00:59:27,359
available for the
 

3041
00:59:27,359 --> 00:59:31,670
available for the
for use for code to use why

3042
00:59:31,670 --> 00:59:31,680
for use for code to use why
 

3043
00:59:31,680 --> 00:59:33,750
for use for code to use why
why only half the registers are saved

3044
00:59:33,750 --> 00:59:33,760
why only half the registers are saved
 

3045
00:59:33,760 --> 00:59:35,510
why only half the registers are saved
well when switch was called it was

3046
00:59:35,510 --> 00:59:35,520
well when switch was called it was
 

3047
00:59:35,520 --> 00:59:37,510
well when switch was called it was
called as a normal function so whoever

3048
00:59:37,510 --> 00:59:37,520
called as a normal function so whoever
 

3049
00:59:37,520 --> 00:59:39,109
called as a normal function so whoever
called switch already assumed well

3050
00:59:39,109 --> 00:59:39,119
called switch already assumed well
 

3051
00:59:39,119 --> 00:59:41,030
called switch already assumed well
switch might modify those so that

3052
00:59:41,030 --> 00:59:41,040
switch might modify those so that
 

3053
00:59:41,040 --> 00:59:43,829
switch might modify those so that
that function already saved that on its

3054
00:59:43,829 --> 00:59:43,839
that function already saved that on its
 

3055
00:59:43,839 --> 00:59:44,470
that function already saved that on its
stack

3056
00:59:44,470 --> 00:59:44,480
stack
 

3057
00:59:44,480 --> 00:59:47,430
stack
meaning that like when we jump from one

3058
00:59:47,430 --> 00:59:47,440
meaning that like when we jump from one
 

3059
00:59:47,440 --> 00:59:48,710
meaning that like when we jump from one
to the other

3060
00:59:48,710 --> 00:59:48,720
to the other
 

3061
00:59:48,720 --> 00:59:51,990
to the other
uh that one's going to self-restore its

3062
00:59:51,990 --> 00:59:52,000
uh that one's going to self-restore its
 

3063
00:59:52,000 --> 00:59:54,950
uh that one's going to self-restore its
caller saved registers that's exactly

3064
00:59:54,950 --> 00:59:54,960
caller saved registers that's exactly
 

3065
00:59:54,960 --> 00:59:56,630
caller saved registers that's exactly
right the switch is a

3066
00:59:56,630 --> 00:59:56,640
right the switch is a
 

3067
00:59:56,640 --> 00:59:59,829
right the switch is a
called from c code we know that the c

3068
00:59:59,829 --> 00:59:59,839
called from c code we know that the c
 

3069
00:59:59,839 --> 01:00:04,150
called from c code we know that the c
compiler um saves on the current stack

3070
01:00:04,150 --> 01:00:04,160
compiler um saves on the current stack
 

3071
01:00:04,160 --> 01:00:07,750
compiler um saves on the current stack
uh any caller saved registers that have

3072
01:00:07,750 --> 01:00:07,760
uh any caller saved registers that have
 

3073
01:00:07,760 --> 01:00:09,109
uh any caller saved registers that have
values in them that the compiler is

3074
01:00:09,109 --> 01:00:09,119
values in them that the compiler is
 

3075
01:00:09,119 --> 01:00:11,190
values in them that the compiler is
going to need later

3076
01:00:11,190 --> 01:00:11,200
going to need later
 

3077
01:00:11,200 --> 01:00:13,109
going to need later
and those caller saved registers

3078
01:00:13,109 --> 01:00:13,119
and those caller saved registers
 

3079
01:00:13,119 --> 01:00:15,990
and those caller saved registers
actually include

3080
01:00:15,990 --> 01:00:16,000
actually include
 

3081
01:00:16,000 --> 01:00:19,030
actually include
i think there's 18

3082
01:00:19,030 --> 01:00:19,040
i think there's 18
 

3083
01:00:19,040 --> 01:00:20,309
i think there's 18
depending on how you count them they're

3084
01:00:20,309 --> 01:00:20,319
depending on how you count them they're
 

3085
01:00:20,319 --> 01:00:22,150
depending on how you count them they're
somewhere between 15 and 18

3086
01:00:22,150 --> 01:00:22,160
somewhere between 15 and 18
 

3087
01:00:22,160 --> 01:00:25,349
somewhere between 15 and 18
caller saved registers and so the

3088
01:00:25,349 --> 01:00:25,359
caller saved registers and so the
 

3089
01:00:25,359 --> 01:00:27,109
caller saved registers and so the
registers we see here

3090
01:00:27,109 --> 01:00:27,119
registers we see here
 

3091
01:00:27,119 --> 01:00:29,190
registers we see here
are all the registers that aren't caller

3092
01:00:29,190 --> 01:00:29,200
are all the registers that aren't caller
 

3093
01:00:29,200 --> 01:00:30,789
are all the registers that aren't caller
saved and that the compiler

3094
01:00:30,789 --> 01:00:30,799
saved and that the compiler
 

3095
01:00:30,799 --> 01:00:32,950
saved and that the compiler
doesn't promise to save but nevertheless

3096
01:00:32,950 --> 01:00:32,960
doesn't promise to save but nevertheless
 

3097
01:00:32,960 --> 01:00:35,349
doesn't promise to save but nevertheless
may hold

3098
01:00:35,349 --> 01:00:35,359
may hold
 

3099
01:00:35,359 --> 01:00:37,190
may hold
values that are needed by the calling

3100
01:00:37,190 --> 01:00:37,200
values that are needed by the calling
 

3101
01:00:37,200 --> 01:00:38,789
values that are needed by the calling
function so we only have to save the

3102
01:00:38,789 --> 01:00:38,799
function so we only have to save the
 

3103
01:00:38,799 --> 01:00:41,030
function so we only have to save the
callee saved registers

3104
01:00:41,030 --> 01:00:41,040
callee saved registers
 

3105
01:00:41,040 --> 01:00:45,910
callee saved registers
when we're switching threads

3106
01:00:45,910 --> 01:00:45,920

 

3107
01:00:45,920 --> 01:00:49,750

okay um final thing i want to print

3108
01:00:49,750 --> 01:00:49,760
okay um final thing i want to print
 

3109
01:00:49,760 --> 01:00:52,230
okay um final thing i want to print
is the we do we do save and restore the

3110
01:00:52,230 --> 01:00:52,240
is the we do we do save and restore the
 

3111
01:00:52,240 --> 01:00:53,030
is the we do we do save and restore the
stack pointer

3112
01:00:53,030 --> 01:00:53,040
stack pointer
 

3113
01:00:53,040 --> 01:00:54,710
stack pointer
the current stack pointer it's like hard

3114
01:00:54,710 --> 01:00:54,720
the current stack pointer it's like hard
 

3115
01:00:54,720 --> 01:00:56,150
the current stack pointer it's like hard
to tell from this value what that means

3116
01:00:56,150 --> 01:00:56,160
to tell from this value what that means
 

3117
01:00:56,160 --> 01:00:56,710
to tell from this value what that means
but it's

3118
01:00:56,710 --> 01:00:56,720
but it's
 

3119
01:00:56,720 --> 01:00:59,270
but it's
the kernel stack of the current process

3120
01:00:59,270 --> 01:00:59,280
the kernel stack of the current process
 

3121
01:00:59,280 --> 01:01:00,630
the kernel stack of the current process
which

3122
01:01:00,630 --> 01:01:00,640
which
 

3123
01:01:00,640 --> 01:01:01,910
which
i don't know if you recall but is

3124
01:01:01,910 --> 01:01:01,920
i don't know if you recall but is
 

3125
01:01:01,920 --> 01:01:03,990
i don't know if you recall but is
allocated is mapped by the virtual

3126
01:01:03,990 --> 01:01:04,000
allocated is mapped by the virtual
 

3127
01:01:04,000 --> 01:01:07,270
allocated is mapped by the virtual
memory system at high memory

3128
01:01:07,270 --> 01:01:07,280
memory system at high memory
 

3129
01:01:07,280 --> 01:01:12,230
memory system at high memory
okay so um

3130
01:01:12,230 --> 01:01:12,240

 

3131
01:01:12,240 --> 01:01:14,150

okay so so the we're going to save away

3132
01:01:14,150 --> 01:01:14,160
okay so so the we're going to save away
 

3133
01:01:14,160 --> 01:01:15,750
okay so so the we're going to save away
the current registers and restore

3134
01:01:15,750 --> 01:01:15,760
the current registers and restore
 

3135
01:01:15,760 --> 01:01:17,510
the current registers and restore
registers from

3136
01:01:17,510 --> 01:01:17,520
registers from
 

3137
01:01:17,520 --> 01:01:20,230
registers from
uh the scheduler threads context um i

3138
01:01:20,230 --> 01:01:20,240
uh the scheduler threads context um i
 

3139
01:01:20,240 --> 01:01:21,270
uh the scheduler threads context um i
don't want to like

3140
01:01:21,270 --> 01:01:21,280
don't want to like
 

3141
01:01:21,280 --> 01:01:23,190
don't want to like
execute every single one of these lows

3142
01:01:23,190 --> 01:01:23,200
execute every single one of these lows
 

3143
01:01:23,200 --> 01:01:24,549
execute every single one of these lows
in store so i'm going to step

3144
01:01:24,549 --> 01:01:24,559
in store so i'm going to step
 

3145
01:01:24,559 --> 01:01:28,549
in store so i'm going to step
over all the 14 loads the 14 stores and

3146
01:01:28,549 --> 01:01:28,559
over all the 14 loads the 14 stores and
 

3147
01:01:28,559 --> 01:01:29,990
over all the 14 loads the 14 stores and
the 14 loads gonna

3148
01:01:29,990 --> 01:01:30,000
the 14 loads gonna
 

3149
01:01:30,000 --> 01:01:32,230
the 14 loads gonna
proceed directly to the return

3150
01:01:32,230 --> 01:01:32,240
proceed directly to the return
 

3151
01:01:32,240 --> 01:01:33,910
proceed directly to the return
instructions okay so we executed

3152
01:01:33,910 --> 01:01:33,920
instructions okay so we executed
 

3153
01:01:33,920 --> 01:01:37,270
instructions okay so we executed
everything in switch except the return

3154
01:01:37,270 --> 01:01:37,280
everything in switch except the return
 

3155
01:01:37,280 --> 01:01:39,589
everything in switch except the return
before we do the return we'll just print

3156
01:01:39,589 --> 01:01:39,599
before we do the return we'll just print
 

3157
01:01:39,599 --> 01:01:41,190
before we do the return we'll just print
the interesting registers again to see

3158
01:01:41,190 --> 01:01:41,200
the interesting registers again to see
 

3159
01:01:41,200 --> 01:01:42,309
the interesting registers again to see
where we are so

3160
01:01:42,309 --> 01:01:42,319
where we are so
 

3161
01:01:42,319 --> 01:01:45,430
where we are so
stack pointer um now is

3162
01:01:45,430 --> 01:01:45,440
stack pointer um now is
 

3163
01:01:45,440 --> 01:01:47,430
stack pointer um now is
has a different value the stack pointer

3164
01:01:47,430 --> 01:01:47,440
has a different value the stack pointer
 

3165
01:01:47,440 --> 01:01:48,789
has a different value the stack pointer
now points into this stack

3166
01:01:48,789 --> 01:01:48,799
now points into this stack
 

3167
01:01:48,799 --> 01:01:51,990
now points into this stack
zero area in memory and this is actually

3168
01:01:51,990 --> 01:01:52,000
zero area in memory and this is actually
 

3169
01:01:52,000 --> 01:01:54,789
zero area in memory and this is actually
the place very very early in the boot

3170
01:01:54,789 --> 01:01:54,799
the place very very early in the boot
 

3171
01:01:54,799 --> 01:01:55,829
the place very very early in the boot
sequence

3172
01:01:55,829 --> 01:01:55,839
sequence
 

3173
01:01:55,839 --> 01:01:58,870
sequence
where start.s puts the stack so it can

3174
01:01:58,870 --> 01:01:58,880
where start.s puts the stack so it can
 

3175
01:01:58,880 --> 01:01:59,349
where start.s puts the stack so it can
make

3176
01:01:59,349 --> 01:01:59,359
make
 

3177
01:01:59,359 --> 01:02:01,750
make
call the ferry for c function so

3178
01:02:01,750 --> 01:02:01,760
call the ferry for c function so
 

3179
01:02:01,760 --> 01:02:03,589
call the ferry for c function so
actually back on the original bootstack

3180
01:02:03,589 --> 01:02:03,599
actually back on the original bootstack
 

3181
01:02:03,599 --> 01:02:06,230
actually back on the original bootstack
for this cpu which just happens to be

3182
01:02:06,230 --> 01:02:06,240
for this cpu which just happens to be
 

3183
01:02:06,240 --> 01:02:10,470
for this cpu which just happens to be
where the scheduler runs

3184
01:02:10,470 --> 01:02:10,480

 

3185
01:02:10,480 --> 01:02:13,589

okay the program counter

3186
01:02:13,589 --> 01:02:13,599
okay the program counter
 

3187
01:02:13,599 --> 01:02:14,950
okay the program counter
not very interesting or in switch

3188
01:02:14,950 --> 01:02:14,960
not very interesting or in switch
 

3189
01:02:14,960 --> 01:02:18,069
not very interesting or in switch
because we haven't returned yet and

3190
01:02:18,069 --> 01:02:18,079
because we haven't returned yet and
 

3191
01:02:18,079 --> 01:02:21,190
because we haven't returned yet and
the ra register now points to scheduler

3192
01:02:21,190 --> 01:02:21,200
the ra register now points to scheduler
 

3193
01:02:21,200 --> 01:02:22,549
the ra register now points to scheduler
because we've loaded

3194
01:02:22,549 --> 01:02:22,559
because we've loaded
 

3195
01:02:22,559 --> 01:02:25,589
because we've loaded
uh we've restored the register set

3196
01:02:25,589 --> 01:02:25,599
uh we've restored the register set
 

3197
01:02:25,599 --> 01:02:28,870
uh we've restored the register set
previously saved by the scheduler thread

3198
01:02:28,870 --> 01:02:28,880
previously saved by the scheduler thread
 

3199
01:02:28,880 --> 01:02:30,789
previously saved by the scheduler thread
and indeed we're really now in the

3200
01:02:30,789 --> 01:02:30,799
and indeed we're really now in the
 

3201
01:02:30,799 --> 01:02:33,430
and indeed we're really now in the
schedulers right if i were on where

3202
01:02:33,430 --> 01:02:33,440
schedulers right if i were on where
 

3203
01:02:33,440 --> 01:02:34,789
schedulers right if i were on where
where now looks totally different from

3204
01:02:34,789 --> 01:02:34,799
where now looks totally different from
 

3205
01:02:34,799 --> 01:02:36,710
where now looks totally different from
the last time we ran it we're now

3206
01:02:36,710 --> 01:02:36,720
the last time we ran it we're now
 

3207
01:02:36,720 --> 01:02:39,270
the last time we ran it we're now
indeed in a call to switch but now we're

3208
01:02:39,270 --> 01:02:39,280
indeed in a call to switch but now we're
 

3209
01:02:39,280 --> 01:02:41,109
indeed in a call to switch but now we're
in a call from swift to switch that the

3210
01:02:41,109 --> 01:02:41,119
in a call from swift to switch that the
 

3211
01:02:41,119 --> 01:02:42,470
in a call from swift to switch that the
scheduler made

3212
01:02:42,470 --> 01:02:42,480
scheduler made
 

3213
01:02:42,480 --> 01:02:44,630
scheduler made
at some point in the past and the

3214
01:02:44,630 --> 01:02:44,640
at some point in the past and the
 

3215
01:02:44,640 --> 01:02:47,190
at some point in the past and the
schedule was run long ago during boot

3216
01:02:47,190 --> 01:02:47,200
schedule was run long ago during boot
 

3217
01:02:47,200 --> 01:02:48,870
schedule was run long ago during boot
was called as the last thing that maine

3218
01:02:48,870 --> 01:02:48,880
was called as the last thing that maine
 

3219
01:02:48,880 --> 01:02:53,190
was called as the last thing that maine
did during the boot process

3220
01:02:53,190 --> 01:02:53,200

 

3221
01:02:53,200 --> 01:02:54,870

so i'm going to execute one instruction

3222
01:02:54,870 --> 01:02:54,880
so i'm going to execute one instruction
 

3223
01:02:54,880 --> 01:02:56,549
so i'm going to execute one instruction
to return from

3224
01:02:56,549 --> 01:02:56,559
to return from
 

3225
01:02:56,559 --> 01:02:59,829
to return from
switch now into scheduler

3226
01:02:59,829 --> 01:02:59,839
switch now into scheduler
 

3227
01:02:59,839 --> 01:03:01,750
switch now into scheduler
so now we're in this course scheduler

3228
01:03:01,750 --> 01:03:01,760
so now we're in this course scheduler
 

3229
01:03:01,760 --> 01:03:08,390
so now we're in this course scheduler
let's look at the full code

3230
01:03:08,390 --> 01:03:08,400

 

3231
01:03:08,400 --> 01:03:11,589

so this is the scheduler code this

3232
01:03:11,589 --> 01:03:11,599
so this is the scheduler code this
 

3233
01:03:11,599 --> 01:03:12,950
so this is the scheduler code this
function called scheduler and now we're

3234
01:03:12,950 --> 01:03:12,960
function called scheduler and now we're
 

3235
01:03:12,960 --> 01:03:14,950
function called scheduler and now we're
executing in the scheduler thread

3236
01:03:14,950 --> 01:03:14,960
executing in the scheduler thread
 

3237
01:03:14,960 --> 01:03:18,069
executing in the scheduler thread
for the cpu and we're just at the point

3238
01:03:18,069 --> 01:03:18,079
for the cpu and we're just at the point
 

3239
01:03:18,079 --> 01:03:21,510
for the cpu and we're just at the point
we just returned from the from a

3240
01:03:21,510 --> 01:03:21,520
we just returned from the from a
 

3241
01:03:21,520 --> 01:03:23,270
we just returned from the from a
previous call to switch that the

3242
01:03:23,270 --> 01:03:23,280
previous call to switch that the
 

3243
01:03:23,280 --> 01:03:25,109
previous call to switch that the
scheduler made a while ago

3244
01:03:25,109 --> 01:03:25,119
scheduler made a while ago
 

3245
01:03:25,119 --> 01:03:26,870
scheduler made a while ago
uh when it decided it was going to start

3246
01:03:26,870 --> 01:03:26,880
uh when it decided it was going to start
 

3247
01:03:26,880 --> 01:03:29,510
uh when it decided it was going to start
running that process you know pid3 which

3248
01:03:29,510 --> 01:03:29,520
running that process you know pid3 which
 

3249
01:03:29,520 --> 01:03:30,230
running that process you know pid3 which
was the spin

3250
01:03:30,230 --> 01:03:30,240
was the spin
 

3251
01:03:30,240 --> 01:03:33,910
was the spin
process that was interrupted so

3252
01:03:33,910 --> 01:03:33,920
process that was interrupted so
 

3253
01:03:33,920 --> 01:03:36,950
process that was interrupted so
it's this switch you know process id3

3254
01:03:36,950 --> 01:03:36,960
it's this switch you know process id3
 

3255
01:03:36,960 --> 01:03:38,870
it's this switch you know process id3
that spin called switch but it's not

3256
01:03:38,870 --> 01:03:38,880
that spin called switch but it's not
 

3257
01:03:38,880 --> 01:03:40,549
that spin called switch but it's not
swift that switch that's returning that

3258
01:03:40,549 --> 01:03:40,559
swift that switch that's returning that
 

3259
01:03:40,559 --> 01:03:42,069
swift that switch that's returning that
switch hasn't returned yet

3260
01:03:42,069 --> 01:03:42,079
switch hasn't returned yet
 

3261
01:03:42,079 --> 01:03:45,430
switch hasn't returned yet
it's still saved away in uh

3262
01:03:45,430 --> 01:03:45,440
it's still saved away in uh
 

3263
01:03:45,440 --> 01:03:48,309
it's still saved away in uh
process ids threes stack and contacts we

3264
01:03:48,309 --> 01:03:48,319
process ids threes stack and contacts we
 

3265
01:03:48,319 --> 01:03:50,150
process ids threes stack and contacts we
just returned from this earlier call to

3266
01:03:50,150 --> 01:03:50,160
just returned from this earlier call to
 

3267
01:03:50,160 --> 01:03:53,109
just returned from this earlier call to
switch

3268
01:03:53,109 --> 01:03:53,119

 

3269
01:03:53,119 --> 01:03:54,549

all right so the stuff that happens here

3270
01:03:54,549 --> 01:03:54,559
all right so the stuff that happens here
 

3271
01:03:54,559 --> 01:03:57,349
all right so the stuff that happens here
in the scheduler um

3272
01:03:57,349 --> 01:03:57,359
in the scheduler um
 

3273
01:03:57,359 --> 01:03:59,910
in the scheduler um
we're stopped running this process and

3274
01:03:59,910 --> 01:03:59,920
we're stopped running this process and
 

3275
01:03:59,920 --> 01:04:00,549
we're stopped running this process and
so

3276
01:04:00,549 --> 01:04:00,559
so
 

3277
01:04:00,559 --> 01:04:03,190
so
uh we want to forget about the various

3278
01:04:03,190 --> 01:04:03,200
uh we want to forget about the various
 

3279
01:04:03,200 --> 01:04:04,870
uh we want to forget about the various
things we did

3280
01:04:04,870 --> 01:04:04,880
things we did
 

3281
01:04:04,880 --> 01:04:06,470
things we did
in the process of running this process

3282
01:04:06,470 --> 01:04:06,480
in the process of running this process
 

3283
01:04:06,480 --> 01:04:09,029
in the process of running this process
we want to forget the cro proc equals

3284
01:04:09,029 --> 01:04:09,039
we want to forget the cro proc equals
 

3285
01:04:09,039 --> 01:04:09,670
we want to forget the cro proc equals
zero

3286
01:04:09,670 --> 01:04:09,680
zero
 

3287
01:04:09,680 --> 01:04:11,029
zero
basically means that we're forgetting

3288
01:04:11,029 --> 01:04:11,039
basically means that we're forgetting
 

3289
01:04:11,039 --> 01:04:13,190
basically means that we're forgetting
that you know we're no longer running

3290
01:04:13,190 --> 01:04:13,200
that you know we're no longer running
 

3291
01:04:13,200 --> 01:04:14,630
that you know we're no longer running
this process in this course so we don't

3292
01:04:14,630 --> 01:04:14,640
this process in this course so we don't
 

3293
01:04:14,640 --> 01:04:15,750
this process in this course so we don't
want to

3294
01:04:15,750 --> 01:04:15,760
want to
 

3295
01:04:15,760 --> 01:04:17,750
want to
get have anybody be confused about that

3296
01:04:17,750 --> 01:04:17,760
get have anybody be confused about that
 

3297
01:04:17,760 --> 01:04:19,029
get have anybody be confused about that
we set this

3298
01:04:19,029 --> 01:04:19,039
we set this
 

3299
01:04:19,039 --> 01:04:22,549
we set this
per core proc pointer to zero instead of

3300
01:04:22,549 --> 01:04:22,559
per core proc pointer to zero instead of
 

3301
01:04:22,559 --> 01:04:24,789
per core proc pointer to zero instead of
this process the next thing that happens

3302
01:04:24,789 --> 01:04:24,799
this process the next thing that happens
 

3303
01:04:24,799 --> 01:04:26,230
this process the next thing that happens
is that um

3304
01:04:26,230 --> 01:04:26,240
is that um
 

3305
01:04:26,240 --> 01:04:29,109
is that um
you remember yield acquired the lock for

3306
01:04:29,109 --> 01:04:29,119
you remember yield acquired the lock for
 

3307
01:04:29,119 --> 01:04:30,230
you remember yield acquired the lock for
this process

3308
01:04:30,230 --> 01:04:30,240
this process
 

3309
01:04:30,240 --> 01:04:31,750
this process
because it didn't want any other core

3310
01:04:31,750 --> 01:04:31,760
because it didn't want any other core
 

3311
01:04:31,760 --> 01:04:33,270
because it didn't want any other core
scheduler to look at this process and

3312
01:04:33,270 --> 01:04:33,280
scheduler to look at this process and
 

3313
01:04:33,280 --> 01:04:34,710
scheduler to look at this process and
maybe run it

3314
01:04:34,710 --> 01:04:34,720
maybe run it
 

3315
01:04:34,720 --> 01:04:37,029
maybe run it
until the process was completely put to

3316
01:04:37,029 --> 01:04:37,039
until the process was completely put to
 

3317
01:04:37,039 --> 01:04:37,829
until the process was completely put to
sleep

3318
01:04:37,829 --> 01:04:37,839
sleep
 

3319
01:04:37,839 --> 01:04:40,549
sleep
um we've we've now completed the switch

3320
01:04:40,549 --> 01:04:40,559
um we've we've now completed the switch
 

3321
01:04:40,559 --> 01:04:41,990
um we've we've now completed the switch
away from this process

3322
01:04:41,990 --> 01:04:42,000
away from this process
 

3323
01:04:42,000 --> 01:04:44,309
away from this process
and so we can release the lock on the

3324
01:04:44,309 --> 01:04:44,319
and so we can release the lock on the
 

3325
01:04:44,319 --> 01:04:46,870
and so we can release the lock on the
process that just yielded

3326
01:04:46,870 --> 01:04:46,880
process that just yielded
 

3327
01:04:46,880 --> 01:04:50,470
process that just yielded
that's the release at this point

3328
01:04:50,470 --> 01:04:50,480
that's the release at this point
 

3329
01:04:50,480 --> 01:04:53,109
that's the release at this point
um we're still in the scheduler if there

3330
01:04:53,109 --> 01:04:53,119
um we're still in the scheduler if there
 

3331
01:04:53,119 --> 01:04:54,309
um we're still in the scheduler if there
was another core

3332
01:04:54,309 --> 01:04:54,319
was another core
 

3333
01:04:54,319 --> 01:04:56,950
was another core
at this point some other core scheduler

3334
01:04:56,950 --> 01:04:56,960
at this point some other core scheduler
 

3335
01:04:56,960 --> 01:04:57,349
at this point some other core scheduler
could

3336
01:04:57,349 --> 01:04:57,359
could
 

3337
01:04:57,359 --> 01:04:59,510
could
find that process because it's runnable

3338
01:04:59,510 --> 01:04:59,520
find that process because it's runnable
 

3339
01:04:59,520 --> 01:05:00,549
find that process because it's runnable
and run it

3340
01:05:00,549 --> 01:05:00,559
and run it
 

3341
01:05:00,559 --> 01:05:02,710
and run it
but that's okay because we've completely

3342
01:05:02,710 --> 01:05:02,720
but that's okay because we've completely
 

3343
01:05:02,720 --> 01:05:04,230
but that's okay because we've completely
saved its registers

3344
01:05:04,230 --> 01:05:04,240
saved its registers
 

3345
01:05:04,240 --> 01:05:06,470
saved its registers
we're no longer executing on its that

3346
01:05:06,470 --> 01:05:06,480
we're no longer executing on its that
 

3347
01:05:06,480 --> 01:05:08,150
we're no longer executing on its that
process is stacked because we're now

3348
01:05:08,150 --> 01:05:08,160
process is stacked because we're now
 

3349
01:05:08,160 --> 01:05:09,990
process is stacked because we're now
executing on the

3350
01:05:09,990 --> 01:05:10,000
executing on the
 

3351
01:05:10,000 --> 01:05:12,549
executing on the
um discord scheduler stack so it's

3352
01:05:12,549 --> 01:05:12,559
um discord scheduler stack so it's
 

3353
01:05:12,559 --> 01:05:14,230
um discord scheduler stack so it's
actually fine if some other core

3354
01:05:14,230 --> 01:05:14,240
actually fine if some other core
 

3355
01:05:14,240 --> 01:05:17,190
actually fine if some other core
decides to run that process okay but

3356
01:05:17,190 --> 01:05:17,200
decides to run that process okay but
 

3357
01:05:17,200 --> 01:05:18,950
decides to run that process okay but
there is no other core so

3358
01:05:18,950 --> 01:05:18,960
there is no other core so
 

3359
01:05:18,960 --> 01:05:20,829
there is no other core so
that doesn't actually happen in this

3360
01:05:20,829 --> 01:05:20,839
that doesn't actually happen in this
 

3361
01:05:20,839 --> 01:05:24,950
that doesn't actually happen in this
demonstration

3362
01:05:24,950 --> 01:05:24,960

 

3363
01:05:24,960 --> 01:05:28,470

um i actually want to spend a moment

3364
01:05:28,470 --> 01:05:28,480
um i actually want to spend a moment
 

3365
01:05:28,480 --> 01:05:30,789
um i actually want to spend a moment
talking about the pr lock a little bit

3366
01:05:30,789 --> 01:05:30,799
talking about the pr lock a little bit
 

3367
01:05:30,799 --> 01:05:33,029
talking about the pr lock a little bit
more

3368
01:05:33,029 --> 01:05:33,039
more
 

3369
01:05:33,039 --> 01:05:39,109
more
pr lock actually does a couple of things

3370
01:05:39,109 --> 01:05:39,119

 

3371
01:05:39,119 --> 01:05:41,510

it does really two things from the point

3372
01:05:41,510 --> 01:05:41,520
it does really two things from the point
 

3373
01:05:41,520 --> 01:05:42,710
it does really two things from the point
of view of scheduling

3374
01:05:42,710 --> 01:05:42,720
of view of scheduling
 

3375
01:05:42,720 --> 01:05:45,829
of view of scheduling
one is that yielding the cpu

3376
01:05:45,829 --> 01:05:45,839
one is that yielding the cpu
 

3377
01:05:45,839 --> 01:05:47,910
one is that yielding the cpu
involves multiple steps we have to set

3378
01:05:47,910 --> 01:05:47,920
involves multiple steps we have to set
 

3379
01:05:47,920 --> 01:05:49,270
involves multiple steps we have to set
the state to run up

3380
01:05:49,270 --> 01:05:49,280
the state to run up
 

3381
01:05:49,280 --> 01:05:50,309
the state to run up
change the state from running to

3382
01:05:50,309 --> 01:05:50,319
change the state from running to
 

3383
01:05:50,319 --> 01:05:53,349
change the state from running to
runnable we save the registers

3384
01:05:53,349 --> 01:05:53,359
runnable we save the registers
 

3385
01:05:53,359 --> 01:05:55,910
runnable we save the registers
in the yielding processes context and we

3386
01:05:55,910 --> 01:05:55,920
in the yielding processes context and we
 

3387
01:05:55,920 --> 01:05:57,589
in the yielding processes context and we
have to stop using the yielding

3388
01:05:57,589 --> 01:05:57,599
have to stop using the yielding
 

3389
01:05:57,599 --> 01:05:58,710
have to stop using the yielding
processes stack

3390
01:05:58,710 --> 01:05:58,720
processes stack
 

3391
01:05:58,720 --> 01:06:00,630
processes stack
there's at least three steps you know

3392
01:06:00,630 --> 01:06:00,640
there's at least three steps you know
 

3393
01:06:00,640 --> 01:06:03,430
there's at least three steps you know
which take time

3394
01:06:03,430 --> 01:06:03,440
which take time
 

3395
01:06:03,440 --> 01:06:06,630
which take time
in order to do all the steps required to

3396
01:06:06,630 --> 01:06:06,640
in order to do all the steps required to
 

3397
01:06:06,640 --> 01:06:08,870
in order to do all the steps required to
yield the cpu and so one of the things

3398
01:06:08,870 --> 01:06:08,880
yield the cpu and so one of the things
 

3399
01:06:08,880 --> 01:06:09,990
yield the cpu and so one of the things
that lock does

3400
01:06:09,990 --> 01:06:10,000
that lock does
 

3401
01:06:10,000 --> 01:06:11,910
that lock does
as i mentioned is prevent any other core

3402
01:06:11,910 --> 01:06:11,920
as i mentioned is prevent any other core
 

3403
01:06:11,920 --> 01:06:13,829
as i mentioned is prevent any other core
scheduler from looking at our process

3404
01:06:13,829 --> 01:06:13,839
scheduler from looking at our process
 

3405
01:06:13,839 --> 01:06:15,270
scheduler from looking at our process
until all three steps

3406
01:06:15,270 --> 01:06:15,280
until all three steps
 

3407
01:06:15,280 --> 01:06:17,109
until all three steps
have completed so the lock is basically

3408
01:06:17,109 --> 01:06:17,119
have completed so the lock is basically
 

3409
01:06:17,119 --> 01:06:19,670
have completed so the lock is basically
making those steps atomic

3410
01:06:19,670 --> 01:06:19,680
making those steps atomic
 

3411
01:06:19,680 --> 01:06:21,190
making those steps atomic
that either all happen from the point of

3412
01:06:21,190 --> 01:06:21,200
that either all happen from the point of
 

3413
01:06:21,200 --> 01:06:22,950
that either all happen from the point of
view of other cores

3414
01:06:22,950 --> 01:06:22,960
view of other cores
 

3415
01:06:22,960 --> 01:06:26,710
view of other cores
um or none of them have happened

3416
01:06:26,710 --> 01:06:26,720
um or none of them have happened
 

3417
01:06:26,720 --> 01:06:28,549
um or none of them have happened
it's going to turn out also when we

3418
01:06:28,549 --> 01:06:28,559
it's going to turn out also when we
 

3419
01:06:28,559 --> 01:06:30,309
it's going to turn out also when we
start running a process

3420
01:06:30,309 --> 01:06:30,319
start running a process
 

3421
01:06:30,319 --> 01:06:33,190
start running a process
that the pr lock is going to have a

3422
01:06:33,190 --> 01:06:33,200
that the pr lock is going to have a
 

3423
01:06:33,200 --> 01:06:33,990
that the pr lock is going to have a
similar

3424
01:06:33,990 --> 01:06:34,000
similar
 

3425
01:06:34,000 --> 01:06:37,670
similar
protective function we're going to set

3426
01:06:37,670 --> 01:06:37,680
protective function we're going to set
 

3427
01:06:37,680 --> 01:06:39,270
protective function we're going to set
the state of a process to running when

3428
01:06:39,270 --> 01:06:39,280
the state of a process to running when
 

3429
01:06:39,280 --> 01:06:40,950
the state of a process to running when
we start executing a process and we're

3430
01:06:40,950 --> 01:06:40,960
we start executing a process and we're
 

3431
01:06:40,960 --> 01:06:42,069
we start executing a process and we're
going to move its

3432
01:06:42,069 --> 01:06:42,079
going to move its
 

3433
01:06:42,079 --> 01:06:44,630
going to move its
registers from its process context into

3434
01:06:44,630 --> 01:06:44,640
registers from its process context into
 

3435
01:06:44,640 --> 01:06:47,589
registers from its process context into
the risk 5 registers

3436
01:06:47,589 --> 01:06:47,599
the risk 5 registers
 

3437
01:06:47,599 --> 01:06:50,549
the risk 5 registers
but if an interrupt should happen in the

3438
01:06:50,549 --> 01:06:50,559
but if an interrupt should happen in the
 

3439
01:06:50,559 --> 01:06:52,390
but if an interrupt should happen in the
middle of that process the interrupt is

3440
01:06:52,390 --> 01:06:52,400
middle of that process the interrupt is
 

3441
01:06:52,400 --> 01:06:53,750
middle of that process the interrupt is
going to see the process in a weird

3442
01:06:53,750 --> 01:06:53,760
going to see the process in a weird
 

3443
01:06:53,760 --> 01:06:54,549
going to see the process in a weird
state like

3444
01:06:54,549 --> 01:06:54,559
state like
 

3445
01:06:54,559 --> 01:06:56,950
state like
maybe in the state of mark running but

3446
01:06:56,950 --> 01:06:56,960
maybe in the state of mark running but
 

3447
01:06:56,960 --> 01:06:57,670
maybe in the state of mark running but
hasn't yet

3448
01:06:57,670 --> 01:06:57,680
hasn't yet
 

3449
01:06:57,680 --> 01:06:59,829
hasn't yet
finished moving its registers from the

3450
01:06:59,829 --> 01:06:59,839
finished moving its registers from the
 

3451
01:06:59,839 --> 01:07:02,069
finished moving its registers from the
context into the risk five registers

3452
01:07:02,069 --> 01:07:02,079
context into the risk five registers
 

3453
01:07:02,079 --> 01:07:03,589
context into the risk five registers
and so that would be a disaster if a

3454
01:07:03,589 --> 01:07:03,599
and so that would be a disaster if a
 

3455
01:07:03,599 --> 01:07:05,190
and so that would be a disaster if a
timer interrupt happened then because we

3456
01:07:05,190 --> 01:07:05,200
timer interrupt happened then because we
 

3457
01:07:05,200 --> 01:07:07,349
timer interrupt happened then because we
might switch away from that process

3458
01:07:07,349 --> 01:07:07,359
might switch away from that process
 

3459
01:07:07,359 --> 01:07:11,109
might switch away from that process
before it had restored its registers

3460
01:07:11,109 --> 01:07:11,119
before it had restored its registers
 

3461
01:07:11,119 --> 01:07:12,630
before it had restored its registers
and switching away from that process

3462
01:07:12,630 --> 01:07:12,640
and switching away from that process
 

3463
01:07:12,640 --> 01:07:15,270
and switching away from that process
would save now uninitialized risk five

3464
01:07:15,270 --> 01:07:15,280
would save now uninitialized risk five
 

3465
01:07:15,280 --> 01:07:16,150
would save now uninitialized risk five
registers

3466
01:07:16,150 --> 01:07:16,160
registers
 

3467
01:07:16,160 --> 01:07:18,789
registers
into the context processes context

3468
01:07:18,789 --> 01:07:18,799
into the context processes context
 

3469
01:07:18,799 --> 01:07:20,950
into the context processes context
overwriting its real registers

3470
01:07:20,950 --> 01:07:20,960
overwriting its real registers
 

3471
01:07:20,960 --> 01:07:23,430
overwriting its real registers
so indeed we want starting a process to

3472
01:07:23,430 --> 01:07:23,440
so indeed we want starting a process to
 

3473
01:07:23,440 --> 01:07:24,390
so indeed we want starting a process to
also be

3474
01:07:24,390 --> 01:07:24,400
also be
 

3475
01:07:24,400 --> 01:07:27,589
also be
effectively atomic and in this case

3476
01:07:27,589 --> 01:07:27,599
effectively atomic and in this case
 

3477
01:07:27,599 --> 01:07:28,549
effectively atomic and in this case
holding the lock

3478
01:07:28,549 --> 01:07:28,559
holding the lock
 

3479
01:07:28,559 --> 01:07:31,270
holding the lock
holding pro lock across switching to a

3480
01:07:31,270 --> 01:07:31,280
holding pro lock across switching to a
 

3481
01:07:31,280 --> 01:07:32,710
holding pro lock across switching to a
process

3482
01:07:32,710 --> 01:07:32,720
process
 

3483
01:07:32,720 --> 01:07:34,230
process
as well as preventing other cores from

3484
01:07:34,230 --> 01:07:34,240
as well as preventing other cores from
 

3485
01:07:34,240 --> 01:07:35,910
as well as preventing other cores from
looking at that process also turns off

3486
01:07:35,910 --> 01:07:35,920
looking at that process also turns off
 

3487
01:07:35,920 --> 01:07:37,270
looking at that process also turns off
interrupts

3488
01:07:37,270 --> 01:07:37,280
interrupts
 

3489
01:07:37,280 --> 01:07:39,829
interrupts
for the duration of firing up of

3490
01:07:39,829 --> 01:07:39,839
for the duration of firing up of
 

3491
01:07:39,839 --> 01:07:41,270
for the duration of firing up of
switching to that thread

3492
01:07:41,270 --> 01:07:41,280
switching to that thread
 

3493
01:07:41,280 --> 01:07:43,190
switching to that thread
which prevents a timer interrupt from

3494
01:07:43,190 --> 01:07:43,200
which prevents a timer interrupt from
 

3495
01:07:43,200 --> 01:07:44,630
which prevents a timer interrupt from
ever seeing a process

3496
01:07:44,630 --> 01:07:44,640
ever seeing a process
 

3497
01:07:44,640 --> 01:07:47,349
ever seeing a process
that's only midway through being

3498
01:07:47,349 --> 01:07:47,359
that's only midway through being
 

3499
01:07:47,359 --> 01:07:51,270
that's only midway through being
switched to

3500
01:07:51,270 --> 01:07:51,280

 

3501
01:07:51,280 --> 01:07:55,990

okay so we're in the scheduler we're

3502
01:07:55,990 --> 01:07:56,000
okay so we're in the scheduler we're
 

3503
01:07:56,000 --> 01:07:57,349
okay so we're in the scheduler we're
executing this loop in the schedule

3504
01:07:57,349 --> 01:07:57,359
executing this loop in the schedule
 

3505
01:07:57,359 --> 01:07:58,710
executing this loop in the schedule
there's this loop in the scheduler that

3506
01:07:58,710 --> 01:07:58,720
there's this loop in the scheduler that
 

3507
01:07:58,720 --> 01:08:00,470
there's this loop in the scheduler that
looks at all the processes in turn to

3508
01:08:00,470 --> 01:08:00,480
looks at all the processes in turn to
 

3509
01:08:00,480 --> 01:08:02,630
looks at all the processes in turn to
find one to run

3510
01:08:02,630 --> 01:08:02,640
find one to run
 

3511
01:08:02,640 --> 01:08:04,069
find one to run
and in this case we know there's another

3512
01:08:04,069 --> 01:08:04,079
and in this case we know there's another
 

3513
01:08:04,079 --> 01:08:06,549
and in this case we know there's another
process because

3514
01:08:06,549 --> 01:08:06,559
process because
 

3515
01:08:06,559 --> 01:08:08,309
process because
there's that other spin process that we

3516
01:08:08,309 --> 01:08:08,319
there's that other spin process that we
 

3517
01:08:08,319 --> 01:08:10,309
there's that other spin process that we
forked

3518
01:08:10,309 --> 01:08:10,319
forked
 

3519
01:08:10,319 --> 01:08:12,390
forked
the but there's a lot of process lots to

3520
01:08:12,390 --> 01:08:12,400
the but there's a lot of process lots to
 

3521
01:08:12,400 --> 01:08:13,430
the but there's a lot of process lots to
examine

3522
01:08:13,430 --> 01:08:13,440
examine
 

3523
01:08:13,440 --> 01:08:15,430
examine
um so i want to skip over the actual

3524
01:08:15,430 --> 01:08:15,440
um so i want to skip over the actual
 

3525
01:08:15,440 --> 01:08:17,269
um so i want to skip over the actual
proc the scanning of the

3526
01:08:17,269 --> 01:08:17,279
proc the scanning of the
 

3527
01:08:17,279 --> 01:08:19,669
proc the scanning of the
process table and go direct to the point

3528
01:08:19,669 --> 01:08:19,679
process table and go direct to the point
 

3529
01:08:19,679 --> 01:08:20,789
process table and go direct to the point
at which

3530
01:08:20,789 --> 01:08:20,799
at which
 

3531
01:08:20,799 --> 01:08:22,390
at which
the scheduler finds the next process so

3532
01:08:22,390 --> 01:08:22,400
the scheduler finds the next process so
 

3533
01:08:22,400 --> 01:08:26,470
the scheduler finds the next process so
i'm going to put a break point

3534
01:08:26,470 --> 01:08:26,480

 

3535
01:08:26,480 --> 01:08:29,189

at line 474 where it's actually found a

3536
01:08:29,189 --> 01:08:29,199
at line 474 where it's actually found a
 

3537
01:08:29,199 --> 01:08:32,070
at line 474 where it's actually found a
new process to run

3538
01:08:32,070 --> 01:08:32,080
new process to run
 

3539
01:08:32,080 --> 01:08:35,430
new process to run
here we are on the schedulers scan the

3540
01:08:35,430 --> 01:08:35,440
here we are on the schedulers scan the
 

3541
01:08:35,440 --> 01:08:35,829
here we are on the schedulers scan the
process

3542
01:08:35,829 --> 01:08:35,839
process
 

3543
01:08:35,839 --> 01:08:39,189
process
table and found another process to run

3544
01:08:39,189 --> 01:08:39,199
table and found another process to run
 

3545
01:08:39,199 --> 01:08:41,669
table and found another process to run
and it's going to cause that process to

3546
01:08:41,669 --> 01:08:41,679
and it's going to cause that process to
 

3547
01:08:41,679 --> 01:08:42,229
and it's going to cause that process to
run you

3548
01:08:42,229 --> 01:08:42,239
run you
 

3549
01:08:42,239 --> 01:08:44,709
run you
can see it line 468 it acquired that

3550
01:08:44,709 --> 01:08:44,719
can see it line 468 it acquired that
 

3551
01:08:44,719 --> 01:08:45,749
can see it line 468 it acquired that
process is locked

3552
01:08:45,749 --> 01:08:45,759
process is locked
 

3553
01:08:45,759 --> 01:08:48,070
process is locked
so now it's entitled to do the various

3554
01:08:48,070 --> 01:08:48,080
so now it's entitled to do the various
 

3555
01:08:48,080 --> 01:08:49,510
so now it's entitled to do the various
steps that are required to switch to

3556
01:08:49,510 --> 01:08:49,520
steps that are required to switch to
 

3557
01:08:49,520 --> 01:08:51,669
steps that are required to switch to
that process

3558
01:08:51,669 --> 01:08:51,679
that process
 

3559
01:08:51,679 --> 01:08:54,070
that process
in line 473 it set the processes state

3560
01:08:54,070 --> 01:08:54,080
in line 473 it set the processes state
 

3561
01:08:54,080 --> 01:08:55,269
in line 473 it set the processes state
to running

3562
01:08:55,269 --> 01:08:55,279
to running
 

3563
01:08:55,279 --> 01:08:57,749
to running
it's now at 474 going to record in the

3564
01:08:57,749 --> 01:08:57,759
it's now at 474 going to record in the
 

3565
01:08:57,759 --> 01:08:59,349
it's now at 474 going to record in the
cpu structure

3566
01:08:59,349 --> 01:08:59,359
cpu structure
 

3567
01:08:59,359 --> 01:09:03,269
cpu structure
which process the cpu is executing

3568
01:09:03,269 --> 01:09:03,279
which process the cpu is executing
 

3569
01:09:03,279 --> 01:09:05,829
which process the cpu is executing
and then call switch to save the

3570
01:09:05,829 --> 01:09:05,839
and then call switch to save the
 

3571
01:09:05,839 --> 01:09:08,709
and then call switch to save the
scheduler's registers and restore

3572
01:09:08,709 --> 01:09:08,719
scheduler's registers and restore
 

3573
01:09:08,719 --> 01:09:10,630
scheduler's registers and restore
the target processors registers so we

3574
01:09:10,630 --> 01:09:10,640
the target processors registers so we
 

3575
01:09:10,640 --> 01:09:12,390
the target processors registers so we
can see what process it found by looking

3576
01:09:12,390 --> 01:09:12,400
can see what process it found by looking
 

3577
01:09:12,400 --> 01:09:13,669
can see what process it found by looking
at

3578
01:09:13,669 --> 01:09:13,679
at
 

3579
01:09:13,679 --> 01:09:15,910
at
the new process's name surprisingly it's

3580
01:09:15,910 --> 01:09:15,920
the new process's name surprisingly it's
 

3581
01:09:15,920 --> 01:09:17,669
the new process's name surprisingly it's
spin

3582
01:09:17,669 --> 01:09:17,679
spin
 

3583
01:09:17,679 --> 01:09:19,749
spin
this process id is now four we used to

3584
01:09:19,749 --> 01:09:19,759
this process id is now four we used to
 

3585
01:09:19,759 --> 01:09:23,829
this process id is now four we used to
be running three we're now running four

3586
01:09:23,829 --> 01:09:23,839

 

3587
01:09:23,839 --> 01:09:25,110

and we've already set the state to

3588
01:09:25,110 --> 01:09:25,120
and we've already set the state to
 

3589
01:09:25,120 --> 01:09:29,430
and we've already set the state to
running so

3590
01:09:29,430 --> 01:09:29,440

 

3591
01:09:29,440 --> 01:09:32,630

so the state's running

3592
01:09:32,630 --> 01:09:32,640
so the state's running
 

3593
01:09:32,640 --> 01:09:34,470
so the state's running
we can see where this thread is going to

3594
01:09:34,470 --> 01:09:34,480
we can see where this thread is going to
 

3595
01:09:34,480 --> 01:09:36,510
we can see where this thread is going to
switch to in the call to switch at line

3596
01:09:36,510 --> 01:09:36,520
switch to in the call to switch at line
 

3597
01:09:36,520 --> 01:09:39,910
switch to in the call to switch at line
475.

3598
01:09:39,910 --> 01:09:39,920

 

3599
01:09:39,920 --> 01:09:42,950

print this context he saved registers

3600
01:09:42,950 --> 01:09:42,960
print this context he saved registers
 

3601
01:09:42,960 --> 01:09:45,349
print this context he saved registers
so where is the ra the course we're

3602
01:09:45,349 --> 01:09:45,359
so where is the ra the course we're
 

3603
01:09:45,359 --> 01:09:46,789
so where is the ra the course we're
going to call switch but

3604
01:09:46,789 --> 01:09:46,799
going to call switch but
 

3605
01:09:46,799 --> 01:09:49,829
going to call switch but
switch as we know returns when it

3606
01:09:49,829 --> 01:09:49,839
switch as we know returns when it
 

3607
01:09:49,839 --> 01:09:52,470
switch as we know returns when it
returns it returns to the restored ra

3608
01:09:52,470 --> 01:09:52,480
returns it returns to the restored ra
 

3609
01:09:52,480 --> 01:09:55,189
returns it returns to the restored ra
so we really care about is where is it

3610
01:09:55,189 --> 01:09:55,199
so we really care about is where is it
 

3611
01:09:55,199 --> 01:09:56,070
so we really care about is where is it
that

3612
01:09:56,070 --> 01:09:56,080
that
 

3613
01:09:56,080 --> 01:10:00,830
that
ra points to we can find that out by

3614
01:10:00,830 --> 01:10:00,840

 

3615
01:10:00,840 --> 01:10:07,270

oops um using x slash i

3616
01:10:07,270 --> 01:10:07,280

 

3617
01:10:07,280 --> 01:10:09,350

uh it's going to return r a points to

3618
01:10:09,350 --> 01:10:09,360
uh it's going to return r a points to
 

3619
01:10:09,360 --> 01:10:11,030
uh it's going to return r a points to
some point in sked so that's not too

3620
01:10:11,030 --> 01:10:11,040
some point in sked so that's not too
 

3621
01:10:11,040 --> 01:10:12,149
some point in sked so that's not too
surprising since

3622
01:10:12,149 --> 01:10:12,159
surprising since
 

3623
01:10:12,159 --> 01:10:16,310
surprising since
presumably that other spin process

3624
01:10:16,310 --> 01:10:16,320
presumably that other spin process
 

3625
01:10:16,320 --> 01:10:18,149
presumably that other spin process
was suspended due to a timer interrupt

3626
01:10:18,149 --> 01:10:18,159
was suspended due to a timer interrupt
 

3627
01:10:18,159 --> 01:10:20,950
was suspended due to a timer interrupt
which as we know called sked

3628
01:10:20,950 --> 01:10:20,960
which as we know called sked
 

3629
01:10:20,960 --> 01:10:26,390
which as we know called sked
which calls switch

3630
01:10:26,390 --> 01:10:26,400

 

3631
01:10:26,400 --> 01:10:29,590

all right so we're about to call switch

3632
01:10:29,590 --> 01:10:29,600
all right so we're about to call switch
 

3633
01:10:29,600 --> 01:10:31,110
all right so we're about to call switch
let me just bring up the switch code

3634
01:10:31,110 --> 01:10:31,120
let me just bring up the switch code
 

3635
01:10:31,120 --> 01:10:34,070
let me just bring up the switch code
again

3636
01:10:34,070 --> 01:10:34,080

 

3637
01:10:34,080 --> 01:10:38,709

um

3638
01:10:38,709 --> 01:10:38,719

 

3639
01:10:38,719 --> 01:10:41,669

actually enter switch we're still uh

3640
01:10:41,669 --> 01:10:41,679
actually enter switch we're still uh
 

3641
01:10:41,679 --> 01:10:42,950
actually enter switch we're still uh
where shows that we're still in the

3642
01:10:42,950 --> 01:10:42,960
where shows that we're still in the
 

3643
01:10:42,960 --> 01:10:46,950
where shows that we're still in the
scheduler's context

3644
01:10:46,950 --> 01:10:46,960

 

3645
01:10:46,960 --> 01:10:49,350

i want to again execute all of the

3646
01:10:49,350 --> 01:10:49,360
i want to again execute all of the
 

3647
01:10:49,360 --> 01:10:50,470
i want to again execute all of the
instructions of the switch this time

3648
01:10:50,470 --> 01:10:50,480
instructions of the switch this time
 

3649
01:10:50,480 --> 01:10:52,550
instructions of the switch this time
switching from the scheduler to the

3650
01:10:52,550 --> 01:10:52,560
switching from the scheduler to the
 

3651
01:10:52,560 --> 01:10:55,830
switching from the scheduler to the
new process so we skip over the 28

3652
01:10:55,830 --> 01:10:55,840
new process so we skip over the 28
 

3653
01:10:55,840 --> 01:11:00,709
new process so we skip over the 28
stores and loads

3654
01:11:00,709 --> 01:11:00,719

 

3655
01:11:00,719 --> 01:11:02,790

just convince ourselves that we are

3656
01:11:02,790 --> 01:11:02,800
just convince ourselves that we are
 

3657
01:11:02,800 --> 01:11:04,630
just convince ourselves that we are
actually about to return to sched so now

3658
01:11:04,630 --> 01:11:04,640
actually about to return to sched so now
 

3659
01:11:04,640 --> 01:11:06,310
actually about to return to sched so now
since we're about to return to sched and

3660
01:11:06,310 --> 01:11:06,320
since we're about to return to sched and
 

3661
01:11:06,320 --> 01:11:07,350
since we're about to return to sched and
not scheduler

3662
01:11:07,350 --> 01:11:07,360
not scheduler
 

3663
01:11:07,360 --> 01:11:09,830
not scheduler
we must now be in a process kernel

3664
01:11:09,830 --> 01:11:09,840
we must now be in a process kernel
 

3665
01:11:09,840 --> 01:11:12,790
we must now be in a process kernel
thread and no longer

3666
01:11:12,790 --> 01:11:12,800
thread and no longer
 

3667
01:11:12,800 --> 01:11:14,709
thread and no longer
in the scheduler threat and indeed if we

3668
01:11:14,709 --> 01:11:14,719
in the scheduler threat and indeed if we
 

3669
01:11:14,719 --> 01:11:16,229
in the scheduler threat and indeed if we
look at the back trace

3670
01:11:16,229 --> 01:11:16,239
look at the back trace
 

3671
01:11:16,239 --> 01:11:18,470
look at the back trace
we had a user trap call there must have

3672
01:11:18,470 --> 01:11:18,480
we had a user trap call there must have
 

3673
01:11:18,480 --> 01:11:19,830
we had a user trap call there must have
been a timer interrupt

3674
01:11:19,830 --> 01:11:19,840
been a timer interrupt
 

3675
01:11:19,840 --> 01:11:22,550
been a timer interrupt
from long you know sometime in the past

3676
01:11:22,550 --> 01:11:22,560
from long you know sometime in the past
 

3677
01:11:22,560 --> 01:11:23,350
from long you know sometime in the past
that

3678
01:11:23,350 --> 01:11:23,360
that
 

3679
01:11:23,360 --> 01:11:24,950
that
as we've seen called yield and sched but

3680
01:11:24,950 --> 01:11:24,960
as we've seen called yield and sched but
 

3681
01:11:24,960 --> 01:11:26,470
as we've seen called yield and sched but
it was the timer interrupt in the other

3682
01:11:26,470 --> 01:11:26,480
it was the timer interrupt in the other
 

3683
01:11:26,480 --> 01:11:27,030
it was the timer interrupt in the other
process

3684
01:11:27,030 --> 01:11:27,040
process
 

3685
01:11:27,040 --> 01:11:29,189
process
now not in the process that we

3686
01:11:29,189 --> 01:11:29,199
now not in the process that we
 

3687
01:11:29,199 --> 01:11:35,590
now not in the process that we
originally looked at

3688
01:11:35,590 --> 01:11:35,600

 

3689
01:11:35,600 --> 01:11:39,270

okay any questions about

3690
01:11:39,270 --> 01:11:39,280
okay any questions about
 

3691
01:11:39,280 --> 01:11:41,590
okay any questions about
i think i'm going to leave off stepping

3692
01:11:41,590 --> 01:11:41,600
i think i'm going to leave off stepping
 

3693
01:11:41,600 --> 01:11:43,910
i think i'm going to leave off stepping
through the code at this point and

3694
01:11:43,910 --> 01:11:43,920
through the code at this point and
 

3695
01:11:43,920 --> 01:11:46,390
through the code at this point and
any questions about the any of the

3696
01:11:46,390 --> 01:11:46,400
any questions about the any of the
 

3697
01:11:46,400 --> 01:11:49,750
any questions about the any of the
material we've seen

3698
01:11:49,750 --> 01:11:49,760

 

3699
01:11:49,760 --> 01:11:52,830

oh sorry if if it was for example this

3700
01:11:52,830 --> 01:11:52,840
oh sorry if if it was for example this
 

3701
01:11:52,840 --> 01:11:53,990
oh sorry if if it was for example this
kyle

3702
01:11:53,990 --> 01:11:54,000
kyle
 

3703
01:11:54,000 --> 01:11:57,270
kyle
then we would see that our

3704
01:11:57,270 --> 01:11:57,280
then we would see that our
 

3705
01:11:57,280 --> 01:12:00,470
then we would see that our
array would point somewhere to like

3706
01:12:00,470 --> 01:12:00,480
array would point somewhere to like
 

3707
01:12:00,480 --> 01:12:04,310
array would point somewhere to like
sleeve or something like that right um

3708
01:12:04,310 --> 01:12:04,320
sleeve or something like that right um
 

3709
01:12:04,320 --> 01:12:08,390
sleeve or something like that right um
uh yes well

3710
01:12:08,390 --> 01:12:08,400
uh yes well
 

3711
01:12:08,400 --> 01:12:10,310
uh yes well
we see that the where at this point

3712
01:12:10,310 --> 01:12:10,320
we see that the where at this point
 

3713
01:12:10,320 --> 01:12:11,510
we see that the where at this point
would include

3714
01:12:11,510 --> 01:12:11,520
would include
 

3715
01:12:11,520 --> 01:12:13,270
would include
some system call implementation

3716
01:12:13,270 --> 01:12:13,280
some system call implementation
 

3717
01:12:13,280 --> 01:12:14,870
some system call implementation
functions and a call to sleep

3718
01:12:14,870 --> 01:12:14,880
functions and a call to sleep
 

3719
01:12:14,880 --> 01:12:17,430
functions and a call to sleep
as it happens i think i mean this is

3720
01:12:17,430 --> 01:12:17,440
as it happens i think i mean this is
 

3721
01:12:17,440 --> 01:12:18,390
as it happens i think i mean this is
this is

3722
01:12:18,390 --> 01:12:18,400
this is
 

3723
01:12:18,400 --> 01:12:19,270
this is
you're basically the answer your

3724
01:12:19,270 --> 01:12:19,280
you're basically the answer your
 

3725
01:12:19,280 --> 01:12:22,630
you're basically the answer your
question is yes if we had just

3726
01:12:22,630 --> 01:12:22,640
question is yes if we had just
 

3727
01:12:22,640 --> 01:12:25,110
question is yes if we had just
left off executing this process for some

3728
01:12:25,110 --> 01:12:25,120
left off executing this process for some
 

3729
01:12:25,120 --> 01:12:27,030
left off executing this process for some
reason other than timer interrupt

3730
01:12:27,030 --> 01:12:27,040
reason other than timer interrupt
 

3731
01:12:27,040 --> 01:12:29,189
reason other than timer interrupt
um switch would be basically returning

3732
01:12:29,189 --> 01:12:29,199
um switch would be basically returning
 

3733
01:12:29,199 --> 01:12:32,229
um switch would be basically returning
to some system call code instead of to

3734
01:12:32,229 --> 01:12:32,239
to some system call code instead of to
 

3735
01:12:32,239 --> 01:12:33,990
to some system call code instead of to
scan as it happens i think sleep make

3736
01:12:33,990 --> 01:12:34,000
scan as it happens i think sleep make
 

3737
01:12:34,000 --> 01:12:37,750
scan as it happens i think sleep make
calls get so

3738
01:12:37,750 --> 01:12:37,760

 

3739
01:12:37,760 --> 01:12:38,950

the back trace would look different it

3740
01:12:38,950 --> 01:12:38,960
the back trace would look different it
 

3741
01:12:38,960 --> 01:12:41,110
the back trace would look different it
would just happen includes get but yes

3742
01:12:41,110 --> 01:12:41,120
would just happen includes get but yes
 

3743
01:12:41,120 --> 01:12:43,910
would just happen includes get but yes
so i've chosen just one way of you know

3744
01:12:43,910 --> 01:12:43,920
so i've chosen just one way of you know
 

3745
01:12:43,920 --> 01:12:44,870
so i've chosen just one way of you know
just

3746
01:12:44,870 --> 01:12:44,880
just
 

3747
01:12:44,880 --> 01:12:46,630
just
one way of switching between processes

3748
01:12:46,630 --> 01:12:46,640
one way of switching between processes
 

3749
01:12:46,640 --> 01:12:49,510
one way of switching between processes
due to timer interrupts

3750
01:12:49,510 --> 01:12:49,520
due to timer interrupts
 

3751
01:12:49,520 --> 01:12:51,590
due to timer interrupts
but you also get switches to wait for

3752
01:12:51,590 --> 01:12:51,600
but you also get switches to wait for
 

3753
01:12:51,600 --> 01:12:53,350
but you also get switches to wait for
user i o or to wait for other processes

3754
01:12:53,350 --> 01:12:53,360
user i o or to wait for other processes
 

3755
01:12:53,360 --> 01:12:58,470
user i o or to wait for other processes
to do things like write to a pipe

3756
01:12:58,470 --> 01:12:58,480

 

3757
01:12:58,480 --> 01:13:00,709

okay one thing to you probably noticed

3758
01:13:00,709 --> 01:13:00,719
okay one thing to you probably noticed
 

3759
01:13:00,719 --> 01:13:02,630
okay one thing to you probably noticed
is that um

3760
01:13:02,630 --> 01:13:02,640
is that um
 

3761
01:13:02,640 --> 01:13:05,669
is that um
scheduler called switch and we're about

3762
01:13:05,669 --> 01:13:05,679
scheduler called switch and we're about
 

3763
01:13:05,679 --> 01:13:07,830
scheduler called switch and we're about
to return from switch here

3764
01:13:07,830 --> 01:13:07,840
to return from switch here
 

3765
01:13:07,840 --> 01:13:10,149
to return from switch here
but we're returning really from a

3766
01:13:10,149 --> 01:13:10,159
but we're returning really from a
 

3767
01:13:10,159 --> 01:13:11,270
but we're returning really from a
different call to switch

3768
01:13:11,270 --> 01:13:11,280
different call to switch
 

3769
01:13:11,280 --> 01:13:13,110
different call to switch
than the one the scheduler made we're

3770
01:13:13,110 --> 01:13:13,120
than the one the scheduler made we're
 

3771
01:13:13,120 --> 01:13:14,470
than the one the scheduler made we're
returning from a call to switch that

3772
01:13:14,470 --> 01:13:14,480
returning from a call to switch that
 

3773
01:13:14,480 --> 01:13:18,070
returning from a call to switch that
this process made a long time ago um

3774
01:13:18,070 --> 01:13:18,080
this process made a long time ago um
 

3775
01:13:18,080 --> 01:13:20,550
this process made a long time ago um
so you know this is potentially a little

3776
01:13:20,550 --> 01:13:20,560
so you know this is potentially a little
 

3777
01:13:20,560 --> 01:13:22,390
so you know this is potentially a little
bit confusing but

3778
01:13:22,390 --> 01:13:22,400
bit confusing but
 

3779
01:13:22,400 --> 01:13:23,590
bit confusing but
you know this is how the guts of a

3780
01:13:23,590 --> 01:13:23,600
you know this is how the guts of a
 

3781
01:13:23,600 --> 01:13:25,830
you know this is how the guts of a
thread switch work

3782
01:13:25,830 --> 01:13:25,840
thread switch work
 

3783
01:13:25,840 --> 01:13:28,310
thread switch work
another thing to notice is that the code

3784
01:13:28,310 --> 01:13:28,320
another thing to notice is that the code
 

3785
01:13:28,320 --> 01:13:29,830
another thing to notice is that the code
we're looking at the switch code this is

3786
01:13:29,830 --> 01:13:29,840
we're looking at the switch code this is
 

3787
01:13:29,840 --> 01:13:30,870
we're looking at the switch code this is
really the heart

3788
01:13:30,870 --> 01:13:30,880
really the heart
 

3789
01:13:30,880 --> 01:13:34,070
really the heart
of thread switching and

3790
01:13:34,070 --> 01:13:34,080
of thread switching and
 

3791
01:13:34,080 --> 01:13:35,750
of thread switching and
really all you have to do to switch

3792
01:13:35,750 --> 01:13:35,760
really all you have to do to switch
 

3793
01:13:35,760 --> 01:13:37,910
really all you have to do to switch
switch threads is

3794
01:13:37,910 --> 01:13:37,920
switch threads is
 

3795
01:13:37,920 --> 01:13:40,790
switch threads is
save registers and restore registers now

3796
01:13:40,790 --> 01:13:40,800
save registers and restore registers now
 

3797
01:13:40,800 --> 01:13:42,310
save registers and restore registers now
threads have a lot more state than just

3798
01:13:42,310 --> 01:13:42,320
threads have a lot more state than just
 

3799
01:13:42,320 --> 01:13:44,470
threads have a lot more state than just
registers they have variables and

3800
01:13:44,470 --> 01:13:44,480
registers they have variables and
 

3801
01:13:44,480 --> 01:13:47,910
registers they have variables and
stuff in the heap and who knows what but

3802
01:13:47,910 --> 01:13:47,920
stuff in the heap and who knows what but
 

3803
01:13:47,920 --> 01:13:51,030
stuff in the heap and who knows what but
all that other state is in memory and

3804
01:13:51,030 --> 01:13:51,040
all that other state is in memory and
 

3805
01:13:51,040 --> 01:13:52,709
all that other state is in memory and
isn't going to be disturbed we've done

3806
01:13:52,709 --> 01:13:52,719
isn't going to be disturbed we've done
 

3807
01:13:52,719 --> 01:13:54,790
isn't going to be disturbed we've done
nothing to disturb

3808
01:13:54,790 --> 01:13:54,800
nothing to disturb
 

3809
01:13:54,800 --> 01:13:57,350
nothing to disturb
any of these threads stacks for example

3810
01:13:57,350 --> 01:13:57,360
any of these threads stacks for example
 

3811
01:13:57,360 --> 01:13:57,990
any of these threads stacks for example
or

3812
01:13:57,990 --> 01:13:58,000
or
 

3813
01:13:58,000 --> 01:14:01,830
or
heap values so the registers in the

3814
01:14:01,830 --> 01:14:01,840
heap values so the registers in the
 

3815
01:14:01,840 --> 01:14:03,510
heap values so the registers in the
microprocessor are really the only kind

3816
01:14:03,510 --> 01:14:03,520
microprocessor are really the only kind
 

3817
01:14:03,520 --> 01:14:04,630
microprocessor are really the only kind
of volatile state

3818
01:14:04,630 --> 01:14:04,640
of volatile state
 

3819
01:14:04,640 --> 01:14:06,310
of volatile state
that actually needs to be saved and

3820
01:14:06,310 --> 01:14:06,320
that actually needs to be saved and
 

3821
01:14:06,320 --> 01:14:07,910
that actually needs to be saved and
restored to do a thread switch

3822
01:14:07,910 --> 01:14:07,920
restored to do a thread switch
 

3823
01:14:07,920 --> 01:14:09,830
restored to do a thread switch
all the stuffs in memory stack for

3824
01:14:09,830 --> 01:14:09,840
all the stuffs in memory stack for
 

3825
01:14:09,840 --> 01:14:11,830
all the stuffs in memory stack for
example will still be in memory on

3826
01:14:11,830 --> 01:14:11,840
example will still be in memory on
 

3827
01:14:11,840 --> 01:14:13,750
example will still be in memory on
undisturbed and so it doesn't have to be

3828
01:14:13,750 --> 01:14:13,760
undisturbed and so it doesn't have to be
 

3829
01:14:13,760 --> 01:14:16,229
undisturbed and so it doesn't have to be
explicitly saved and restored

3830
01:14:16,229 --> 01:14:16,239
explicitly saved and restored
 

3831
01:14:16,239 --> 01:14:17,830
explicitly saved and restored
now we're only saving and restoring this

3832
01:14:17,830 --> 01:14:17,840
now we're only saving and restoring this
 

3833
01:14:17,840 --> 01:14:19,910
now we're only saving and restoring this
microprocessor the cpu registers

3834
01:14:19,910 --> 01:14:19,920
microprocessor the cpu registers
 

3835
01:14:19,920 --> 01:14:22,070
microprocessor the cpu registers
because we want to reuse those very

3836
01:14:22,070 --> 01:14:22,080
because we want to reuse those very
 

3837
01:14:22,080 --> 01:14:24,229
because we want to reuse those very
registers in the cpu for the new thread

3838
01:14:24,229 --> 01:14:24,239
registers in the cpu for the new thread
 

3839
01:14:24,239 --> 01:14:24,470
registers in the cpu for the new thread
and

3840
01:14:24,470 --> 01:14:24,480
and
 

3841
01:14:24,480 --> 01:14:27,430
and
overwrite whatever values they have so

3842
01:14:27,430 --> 01:14:27,440
overwrite whatever values they have so
 

3843
01:14:27,440 --> 01:14:28,630
overwrite whatever values they have so
the

3844
01:14:28,630 --> 01:14:28,640
the
 

3845
01:14:28,640 --> 01:14:29,990
the
register that that's where we have to

3846
01:14:29,990 --> 01:14:30,000
register that that's where we have to
 

3847
01:14:30,000 --> 01:14:32,870
register that that's where we have to
see the old threads registers

3848
01:14:32,870 --> 01:14:32,880
see the old threads registers
 

3849
01:14:32,880 --> 01:14:35,830
see the old threads registers
uh what about um other processor state

3850
01:14:35,830 --> 01:14:35,840
uh what about um other processor state
 

3851
01:14:35,840 --> 01:14:37,510
uh what about um other processor state
so i don't know if the risk 5 processor

3852
01:14:37,510 --> 01:14:37,520
so i don't know if the risk 5 processor
 

3853
01:14:37,520 --> 01:14:39,350
so i don't know if the risk 5 processor
that we're using has other

3854
01:14:39,350 --> 01:14:39,360
that we're using has other
 

3855
01:14:39,360 --> 01:14:41,830
that we're using has other
flags but i know like some x86 intel

3856
01:14:41,830 --> 01:14:41,840
flags but i know like some x86 intel
 

3857
01:14:41,840 --> 01:14:43,030
flags but i know like some x86 intel
chips have like

3858
01:14:43,030 --> 01:14:43,040
chips have like
 

3859
01:14:43,040 --> 01:14:45,030
chips have like
like the floating point unit state and

3860
01:14:45,030 --> 01:14:45,040
like the floating point unit state and
 

3861
01:14:45,040 --> 01:14:46,550
like the floating point unit state and
like things like that

3862
01:14:46,550 --> 01:14:46,560
like things like that
 

3863
01:14:46,560 --> 01:14:48,470
like things like that
do we do we just not have that in

3864
01:14:48,470 --> 01:14:48,480
do we do we just not have that in
 

3865
01:14:48,480 --> 01:14:50,709
do we do we just not have that in
response absolutely

3866
01:14:50,709 --> 01:14:50,719
response absolutely
 

3867
01:14:50,719 --> 01:14:52,390
response absolutely
your points very well taken on other

3868
01:14:52,390 --> 01:14:52,400
your points very well taken on other
 

3869
01:14:52,400 --> 01:14:54,550
your points very well taken on other
microprocessors like x86

3870
01:14:54,550 --> 01:14:54,560
microprocessors like x86
 

3871
01:14:54,560 --> 01:14:58,070
microprocessors like x86
the details of switching

3872
01:14:58,070 --> 01:14:58,080
the details of switching
 

3873
01:14:58,080 --> 01:14:59,910
the details of switching
are a bit different because you know

3874
01:14:59,910 --> 01:14:59,920
are a bit different because you know
 

3875
01:14:59,920 --> 01:15:00,870
are a bit different because you know
they had different registers in

3876
01:15:00,870 --> 01:15:00,880
they had different registers in
 

3877
01:15:00,880 --> 01:15:01,669
they had different registers in
different state

3878
01:15:01,669 --> 01:15:01,679
different state
 

3879
01:15:01,679 --> 01:15:04,470
different state
um and so the code you know this is very

3880
01:15:04,470 --> 01:15:04,480
um and so the code you know this is very
 

3881
01:15:04,480 --> 01:15:07,110
um and so the code you know this is very
very risk five dependent code and

3882
01:15:07,110 --> 01:15:07,120
very risk five dependent code and
 

3883
01:15:07,120 --> 01:15:09,750
very risk five dependent code and
the switch routine for some other

3884
01:15:09,750 --> 01:15:09,760
the switch routine for some other
 

3885
01:15:09,760 --> 01:15:11,110
the switch routine for some other
processor

3886
01:15:11,110 --> 01:15:11,120
processor
 

3887
01:15:11,120 --> 01:15:12,470
processor
might look quite different like indeed

3888
01:15:12,470 --> 01:15:12,480
might look quite different like indeed
 

3889
01:15:12,480 --> 01:15:14,310
might look quite different like indeed
might have to save floating point

3890
01:15:14,310 --> 01:15:14,320
might have to save floating point
 

3891
01:15:14,320 --> 01:15:15,189
might have to save floating point
registers

3892
01:15:15,189 --> 01:15:15,199
registers
 

3893
01:15:15,199 --> 01:15:17,830
registers
now risk five actually uses the general

3894
01:15:17,830 --> 01:15:17,840
now risk five actually uses the general
 

3895
01:15:17,840 --> 01:15:20,229
now risk five actually uses the general
purpose registers or

3896
01:15:20,229 --> 01:15:20,239
purpose registers or
 

3897
01:15:20,239 --> 01:15:22,229
purpose registers or
actually i'm not sure what it does for

3898
01:15:22,229 --> 01:15:22,239
actually i'm not sure what it does for
 

3899
01:15:22,239 --> 01:15:23,590
actually i'm not sure what it does for
floating point

3900
01:15:23,590 --> 01:15:23,600
floating point
 

3901
01:15:23,600 --> 01:15:24,709
floating point
but the kernel doesn't use floating

3902
01:15:24,709 --> 01:15:24,719
but the kernel doesn't use floating
 

3903
01:15:24,719 --> 01:15:25,910
but the kernel doesn't use floating
point so it doesn't have to worry about

3904
01:15:25,910 --> 01:15:25,920
point so it doesn't have to worry about
 

3905
01:15:25,920 --> 01:15:27,350
point so it doesn't have to worry about
it

3906
01:15:27,350 --> 01:15:27,360
it
 

3907
01:15:27,360 --> 01:15:29,030
it
but yeah this is totally microprocessor

3908
01:15:29,030 --> 01:15:29,040
but yeah this is totally microprocessor
 

3909
01:15:29,040 --> 01:15:31,669
but yeah this is totally microprocessor
dependent

3910
01:15:31,669 --> 01:15:31,679

 

3911
01:15:31,679 --> 01:15:34,870

a question about the timer interrupts so

3912
01:15:34,870 --> 01:15:34,880
a question about the timer interrupts so
 

3913
01:15:34,880 --> 01:15:36,550
a question about the timer interrupts so
it sounds like the the core

3914
01:15:36,550 --> 01:15:36,560
it sounds like the the core
 

3915
01:15:36,560 --> 01:15:39,750
it sounds like the the core
of all of this scheduling working is

3916
01:15:39,750 --> 01:15:39,760
of all of this scheduling working is
 

3917
01:15:39,760 --> 01:15:41,669
of all of this scheduling working is
that there will be a timer interrupt

3918
01:15:41,669 --> 01:15:41,679
that there will be a timer interrupt
 

3919
01:15:41,679 --> 01:15:43,990
that there will be a timer interrupt
uh what happens in cases where that

3920
01:15:43,990 --> 01:15:44,000
uh what happens in cases where that
 

3921
01:15:44,000 --> 01:15:45,590
uh what happens in cases where that
malfunctions

3922
01:15:45,590 --> 01:15:45,600
malfunctions
 

3923
01:15:45,600 --> 01:15:49,030
malfunctions
there is going to be a timer interrupt

3924
01:15:49,030 --> 01:15:49,040
there is going to be a timer interrupt
 

3925
01:15:49,040 --> 01:15:52,630
there is going to be a timer interrupt
um so the the

3926
01:15:52,630 --> 01:15:52,640
um so the the
 

3927
01:15:52,640 --> 01:15:55,910
um so the the
i mean uh so so um okay so the the

3928
01:15:55,910 --> 01:15:55,920
i mean uh so so um okay so the the
 

3929
01:15:55,920 --> 01:15:57,750
i mean uh so so um okay so the the
reasoning for how come

3930
01:15:57,750 --> 01:15:57,760
reasoning for how come
 

3931
01:15:57,760 --> 01:16:00,070
reasoning for how come
preemptive scheduling of user processes

3932
01:16:00,070 --> 01:16:00,080
preemptive scheduling of user processes
 

3933
01:16:00,080 --> 01:16:01,430
preemptive scheduling of user processes
works

3934
01:16:01,430 --> 01:16:01,440
works
 

3935
01:16:01,440 --> 01:16:05,669
works
um is that user processes execute with

3936
01:16:05,669 --> 01:16:05,679
um is that user processes execute with
 

3937
01:16:05,679 --> 01:16:09,030
um is that user processes execute with
interrupts turned on always xv6 just

3938
01:16:09,030 --> 01:16:09,040
interrupts turned on always xv6 just
 

3939
01:16:09,040 --> 01:16:11,350
interrupts turned on always xv6 just
ensures that interrupts are enabled

3940
01:16:11,350 --> 01:16:11,360
ensures that interrupts are enabled
 

3941
01:16:11,360 --> 01:16:13,110
ensures that interrupts are enabled
before returning to user space and that

3942
01:16:13,110 --> 01:16:13,120
before returning to user space and that
 

3943
01:16:13,120 --> 01:16:14,390
before returning to user space and that
means that a timer interrupt

3944
01:16:14,390 --> 01:16:14,400
means that a timer interrupt
 

3945
01:16:14,400 --> 01:16:16,310
means that a timer interrupt
can happen if you're executing in user

3946
01:16:16,310 --> 01:16:16,320
can happen if you're executing in user
 

3947
01:16:16,320 --> 01:16:17,910
can happen if you're executing in user
space so

3948
01:16:17,910 --> 01:16:17,920
space so
 

3949
01:16:17,920 --> 01:16:19,990
space so
there's nothing a user process you know

3950
01:16:19,990 --> 01:16:20,000
there's nothing a user process you know
 

3951
01:16:20,000 --> 01:16:21,270
there's nothing a user process you know
if we're in user space the timer and

3952
01:16:21,270 --> 01:16:21,280
if we're in user space the timer and
 

3953
01:16:21,280 --> 01:16:21,510
if we're in user space the timer and
error

3954
01:16:21,510 --> 01:16:21,520
error
 

3955
01:16:21,520 --> 01:16:24,070
error
just will happen uh when the time comes

3956
01:16:24,070 --> 01:16:24,080
just will happen uh when the time comes
 

3957
01:16:24,080 --> 01:16:25,510
just will happen uh when the time comes
it's a little trickier in the kernel

3958
01:16:25,510 --> 01:16:25,520
it's a little trickier in the kernel
 

3959
01:16:25,520 --> 01:16:26,790
it's a little trickier in the kernel
the kernel sometimes turns off

3960
01:16:26,790 --> 01:16:26,800
the kernel sometimes turns off
 

3961
01:16:26,800 --> 01:16:28,790
the kernel sometimes turns off
interrupts like when you acquire a lock

3962
01:16:28,790 --> 01:16:28,800
interrupts like when you acquire a lock
 

3963
01:16:28,800 --> 01:16:30,070
interrupts like when you acquire a lock
the interops are going to be turned off

3964
01:16:30,070 --> 01:16:30,080
the interops are going to be turned off
 

3965
01:16:30,080 --> 01:16:32,830
the interops are going to be turned off
until you release it so

3966
01:16:32,830 --> 01:16:32,840
until you release it so
 

3967
01:16:32,840 --> 01:16:35,910
until you release it so
um uh so

3968
01:16:35,910 --> 01:16:35,920
um uh so
 

3969
01:16:35,920 --> 01:16:38,709
um uh so
if there were some bug in the kernel the

3970
01:16:38,709 --> 01:16:38,719
if there were some bug in the kernel the
 

3971
01:16:38,719 --> 01:16:39,910
if there were some bug in the kernel the
you know if the kernel turned off

3972
01:16:39,910 --> 01:16:39,920
you know if the kernel turned off
 

3973
01:16:39,920 --> 01:16:40,790
you know if the kernel turned off
interrupts and

3974
01:16:40,790 --> 01:16:40,800
interrupts and
 

3975
01:16:40,800 --> 01:16:43,750
interrupts and
never turned them back on and the code

3976
01:16:43,750 --> 01:16:43,760
never turned them back on and the code
 

3977
01:16:43,760 --> 01:16:45,830
never turned them back on and the code
in the kernel never gave up the cpu

3978
01:16:45,830 --> 01:16:45,840
in the kernel never gave up the cpu
 

3979
01:16:45,840 --> 01:16:47,510
in the kernel never gave up the cpu
you know never called sleep or gave up

3980
01:16:47,510 --> 01:16:47,520
you know never called sleep or gave up
 

3981
01:16:47,520 --> 01:16:49,669
you know never called sleep or gave up
the cpu for any other reason

3982
01:16:49,669 --> 01:16:49,679
the cpu for any other reason
 

3983
01:16:49,679 --> 01:16:52,390
the cpu for any other reason
then indeed a timer interrupt wouldn't

3984
01:16:52,390 --> 01:16:52,400
then indeed a timer interrupt wouldn't
 

3985
01:16:52,400 --> 01:16:52,950
then indeed a timer interrupt wouldn't
occur

3986
01:16:52,950 --> 01:16:52,960
occur
 

3987
01:16:52,960 --> 01:16:55,910
occur
and that would mean that this kernel

3988
01:16:55,910 --> 01:16:55,920
and that would mean that this kernel
 

3989
01:16:55,920 --> 01:16:56,709
and that would mean that this kernel
code may

3990
01:16:56,709 --> 01:16:56,719
code may
 

3991
01:16:56,719 --> 01:17:00,390
code may
you know we would never give the cpu but

3992
01:17:00,390 --> 01:17:00,400
you know we would never give the cpu but
 

3993
01:17:00,400 --> 01:17:03,270
you know we would never give the cpu but
in fact uh as far as we know

3994
01:17:03,270 --> 01:17:03,280
in fact uh as far as we know
 

3995
01:17:03,280 --> 01:17:06,390
in fact uh as far as we know
xp6 is we wrote xp6 so that

3996
01:17:06,390 --> 01:17:06,400
xp6 is we wrote xp6 so that
 

3997
01:17:06,400 --> 01:17:09,830
xp6 is we wrote xp6 so that
it always turns interrupts back on or

3998
01:17:09,830 --> 01:17:09,840
it always turns interrupts back on or
 

3999
01:17:09,840 --> 01:17:11,350
it always turns interrupts back on or
you know if there's code in xv6 that

4000
01:17:11,350 --> 01:17:11,360
you know if there's code in xv6 that
 

4001
01:17:11,360 --> 01:17:13,270
you know if there's code in xv6 that
turns off interrupts it either turns

4002
01:17:13,270 --> 01:17:13,280
turns off interrupts it either turns
 

4003
01:17:13,280 --> 01:17:14,229
turns off interrupts it either turns
them back on

4004
01:17:14,229 --> 01:17:14,239
them back on
 

4005
01:17:14,239 --> 01:17:17,430
them back on
and so uh timer interrupt can then occur

4006
01:17:17,430 --> 01:17:17,440
and so uh timer interrupt can then occur
 

4007
01:17:17,440 --> 01:17:18,950
and so uh timer interrupt can then occur
in the kernel and we can switch away

4008
01:17:18,950 --> 01:17:18,960
in the kernel and we can switch away
 

4009
01:17:18,960 --> 01:17:20,310
in the kernel and we can switch away
from this kernel thread

4010
01:17:20,310 --> 01:17:20,320
from this kernel thread
 

4011
01:17:20,320 --> 01:17:23,270
from this kernel thread
or the code returns back to user space

4012
01:17:23,270 --> 01:17:23,280
or the code returns back to user space
 

4013
01:17:23,280 --> 01:17:25,110
or the code returns back to user space
kernel code returns back to user space

4014
01:17:25,110 --> 01:17:25,120
kernel code returns back to user space
 

4015
01:17:25,120 --> 01:17:27,270
kernel code returns back to user space
we believe there's never a situation in

4016
01:17:27,270 --> 01:17:27,280
we believe there's never a situation in
 

4017
01:17:27,280 --> 01:17:28,630
we believe there's never a situation in
which kernel code

4018
01:17:28,630 --> 01:17:28,640
which kernel code
 

4019
01:17:28,640 --> 01:17:30,709
which kernel code
will simply like loop with interrupts

4020
01:17:30,709 --> 01:17:30,719
will simply like loop with interrupts
 

4021
01:17:30,719 --> 01:17:33,910
will simply like loop with interrupts
turned off forever

4022
01:17:33,910 --> 01:17:33,920

 

4023
01:17:33,920 --> 01:17:36,070

i got it my question was more about like

4024
01:17:36,070 --> 01:17:36,080
i got it my question was more about like
 

4025
01:17:36,080 --> 01:17:37,590
i got it my question was more about like
so i assume the interrupts are actually

4026
01:17:37,590 --> 01:17:37,600
so i assume the interrupts are actually
 

4027
01:17:37,600 --> 01:17:39,110
so i assume the interrupts are actually
coming from some piece of hardware

4028
01:17:39,110 --> 01:17:39,120
coming from some piece of hardware
 

4029
01:17:39,120 --> 01:17:40,630
coming from some piece of hardware
like what if that piece of hardware

4030
01:17:40,630 --> 01:17:40,640
like what if that piece of hardware
 

4031
01:17:40,640 --> 01:17:44,709
like what if that piece of hardware
malfunctions no

4032
01:17:44,709 --> 01:17:44,719
malfunctions no
 

4033
01:17:44,719 --> 01:17:46,709
malfunctions no
now it's all right then your computer is

4034
01:17:46,709 --> 01:17:46,719
now it's all right then your computer is
 

4035
01:17:46,719 --> 01:17:50,470
now it's all right then your computer is
broken and you should buy a new one

4036
01:17:50,470 --> 01:17:50,480

 

4037
01:17:50,480 --> 01:17:52,709

okay i mean i mean that's a valid

4038
01:17:52,709 --> 01:17:52,719
okay i mean i mean that's a valid
 

4039
01:17:52,719 --> 01:17:54,070
okay i mean i mean that's a valid
question for me there's

4040
01:17:54,070 --> 01:17:54,080
question for me there's
 

4041
01:17:54,080 --> 01:17:56,229
question for me there's
you know 10 billion transistors in your

4042
01:17:56,229 --> 01:17:56,239
you know 10 billion transistors in your
 

4043
01:17:56,239 --> 01:17:57,189
you know 10 billion transistors in your
computer and

4044
01:17:57,189 --> 01:17:57,199
computer and
 

4045
01:17:57,199 --> 01:18:00,390
computer and
indeed sometimes the hardware just like

4046
01:18:00,390 --> 01:18:00,400
indeed sometimes the hardware just like
 

4047
01:18:00,400 --> 01:18:02,550
indeed sometimes the hardware just like
has bugs in it but that's

4048
01:18:02,550 --> 01:18:02,560
has bugs in it but that's
 

4049
01:18:02,560 --> 01:18:05,910
has bugs in it but that's
beyond our reach for i mean

4050
01:18:05,910 --> 01:18:05,920
beyond our reach for i mean
 

4051
01:18:05,920 --> 01:18:07,669
beyond our reach for i mean
if you add one on one and the computer

4052
01:18:07,669 --> 01:18:07,679
if you add one on one and the computer
 

4053
01:18:07,679 --> 01:18:10,790
if you add one on one and the computer
says three then

4054
01:18:10,790 --> 01:18:10,800

 

4055
01:18:10,800 --> 01:18:13,189

you just have deep problems that xv6

4056
01:18:13,189 --> 01:18:13,199
you just have deep problems that xv6
 

4057
01:18:13,199 --> 01:18:16,709
you just have deep problems that xv6
can't help you with

4058
01:18:16,709 --> 01:18:16,719

 

4059
01:18:16,719 --> 01:18:18,229

so we're assuming that the computer

4060
01:18:18,229 --> 01:18:18,239
so we're assuming that the computer
 

4061
01:18:18,239 --> 01:18:20,470
so we're assuming that the computer
works

4062
01:18:20,470 --> 01:18:20,480
works
 

4063
01:18:20,480 --> 01:18:25,189
works
the only time when that when software

4064
01:18:25,189 --> 01:18:25,199
the only time when that when software
 

4065
01:18:25,199 --> 01:18:26,470
the only time when that when software
there are times when software tries to

4066
01:18:26,470 --> 01:18:26,480
there are times when software tries to
 

4067
01:18:26,480 --> 01:18:27,990
there are times when software tries to
compensate for hardware level errors

4068
01:18:27,990 --> 01:18:28,000
compensate for hardware level errors
 

4069
01:18:28,000 --> 01:18:28,550
compensate for hardware level errors
like

4070
01:18:28,550 --> 01:18:28,560
like
 

4071
01:18:28,560 --> 01:18:29,990
like
if you're sending packets across a

4072
01:18:29,990 --> 01:18:30,000
if you're sending packets across a
 

4073
01:18:30,000 --> 01:18:33,189
if you're sending packets across a
network you always send a checksum

4074
01:18:33,189 --> 01:18:33,199
network you always send a checksum
 

4075
01:18:33,199 --> 01:18:35,669
network you always send a checksum
so that if the network hardware you know

4076
01:18:35,669 --> 01:18:35,679
so that if the network hardware you know
 

4077
01:18:35,679 --> 01:18:36,790
so that if the network hardware you know
flips a bit

4078
01:18:36,790 --> 01:18:36,800
flips a bit
 

4079
01:18:36,800 --> 01:18:38,630
flips a bit
malfunctions and flips a bit then you

4080
01:18:38,630 --> 01:18:38,640
malfunctions and flips a bit then you
 

4081
01:18:38,640 --> 01:18:39,990
malfunctions and flips a bit then you
can correct that but

4082
01:18:39,990 --> 01:18:40,000
can correct that but
 

4083
01:18:40,000 --> 01:18:41,910
can correct that but
for stuff inside the computer that

4084
01:18:41,910 --> 01:18:41,920
for stuff inside the computer that
 

4085
01:18:41,920 --> 01:18:43,270
for stuff inside the computer that
people tend not to

4086
01:18:43,270 --> 01:18:43,280
people tend not to
 

4087
01:18:43,280 --> 01:18:47,910
people tend not to
it's just people basically don't

4088
01:18:47,910 --> 01:18:47,920
it's just people basically don't
 

4089
01:18:47,920 --> 01:18:49,350
it's just people basically don't
try to make the software compensate for

4090
01:18:49,350 --> 01:18:49,360
try to make the software compensate for
 

4091
01:18:49,360 --> 01:18:54,070
try to make the software compensate for
hardware errors

4092
01:18:54,070 --> 01:18:54,080
hardware errors
 

4093
01:18:54,080 --> 01:18:57,110
hardware errors
oh i have a question why uh so like

4094
01:18:57,110 --> 01:18:57,120
oh i have a question why uh so like
 

4095
01:18:57,120 --> 01:19:00,470
oh i have a question why uh so like
in trampoline dot sending switch we

4096
01:19:00,470 --> 01:19:00,480
in trampoline dot sending switch we
 

4097
01:19:00,480 --> 01:19:03,430
in trampoline dot sending switch we
write the code in assembly is that why

4098
01:19:03,430 --> 01:19:03,440
write the code in assembly is that why
 

4099
01:19:03,440 --> 01:19:04,390
write the code in assembly is that why
is that because

4100
01:19:04,390 --> 01:19:04,400
is that because
 

4101
01:19:04,400 --> 01:19:07,430
is that because
we want to make sure that exactly this

4102
01:19:07,430 --> 01:19:07,440
we want to make sure that exactly this
 

4103
01:19:07,440 --> 01:19:10,229
we want to make sure that exactly this
thing's happening so we cannot you

4104
01:19:10,229 --> 01:19:10,239
thing's happening so we cannot you
 

4105
01:19:10,239 --> 01:19:11,990
thing's happening so we cannot you
cannot write in and see because

4106
01:19:11,990 --> 01:19:12,000
cannot write in and see because
 

4107
01:19:12,000 --> 01:19:15,110
cannot write in and see because
we just need those like those exact

4108
01:19:15,110 --> 01:19:15,120
we just need those like those exact
 

4109
01:19:15,120 --> 01:19:17,510
we just need those like those exact
things to happen basically

4110
01:19:17,510 --> 01:19:17,520
things to happen basically
 

4111
01:19:17,520 --> 01:19:20,870
things to happen basically
um yeah yeah

4112
01:19:20,870 --> 01:19:20,880
um yeah yeah
 

4113
01:19:20,880 --> 01:19:23,990
um yeah yeah
uh yes certainly we want this exact

4114
01:19:23,990 --> 01:19:24,000
uh yes certainly we want this exact
 

4115
01:19:24,000 --> 01:19:25,350
uh yes certainly we want this exact
sequence to happen

4116
01:19:25,350 --> 01:19:25,360
sequence to happen
 

4117
01:19:25,360 --> 01:19:28,790
sequence to happen
um in nnc it

4118
01:19:28,790 --> 01:19:28,800
um in nnc it
 

4119
01:19:28,800 --> 01:19:30,310
um in nnc it
it's very hard to talk about things like

4120
01:19:30,310 --> 01:19:30,320
it's very hard to talk about things like
 

4121
01:19:30,320 --> 01:19:32,310
it's very hard to talk about things like
r a and c

4122
01:19:32,310 --> 01:19:32,320
r a and c
 

4123
01:19:32,320 --> 01:19:35,669
r a and c
or sp um certainly there's no way within

4124
01:19:35,669 --> 01:19:35,679
or sp um certainly there's no way within
 

4125
01:19:35,679 --> 01:19:35,990
or sp um certainly there's no way within
the c

4126
01:19:35,990 --> 01:19:36,000
the c
 

4127
01:19:36,000 --> 01:19:38,709
the c
language to talk about changing the

4128
01:19:38,709 --> 01:19:38,719
language to talk about changing the
 

4129
01:19:38,719 --> 01:19:40,709
language to talk about changing the
stack pointer

4130
01:19:40,709 --> 01:19:40,719
stack pointer
 

4131
01:19:40,719 --> 01:19:43,510
stack pointer
or the ra register so these are things

4132
01:19:43,510 --> 01:19:43,520
or the ra register so these are things
 

4133
01:19:43,520 --> 01:19:45,270
or the ra register so these are things
that

4134
01:19:45,270 --> 01:19:45,280
that
 

4135
01:19:45,280 --> 01:19:47,750
that
just can't be you can't say it in

4136
01:19:47,750 --> 01:19:47,760
just can't be you can't say it in
 

4137
01:19:47,760 --> 01:19:49,590
just can't be you can't say it in
ordinary c

4138
01:19:49,590 --> 01:19:49,600
ordinary c
 

4139
01:19:49,600 --> 01:19:51,750
ordinary c
the only way you can say it in c is

4140
01:19:51,750 --> 01:19:51,760
the only way you can say it in c is
 

4141
01:19:51,760 --> 01:19:53,830
the only way you can say it in c is
there is it's possible in c to sort of

4142
01:19:53,830 --> 01:19:53,840
there is it's possible in c to sort of
 

4143
01:19:53,840 --> 01:19:54,630
there is it's possible in c to sort of
embed

4144
01:19:54,630 --> 01:19:54,640
embed
 

4145
01:19:54,640 --> 01:19:57,270
embed
assembly instructions in the c code and

4146
01:19:57,270 --> 01:19:57,280
assembly instructions in the c code and
 

4147
01:19:57,280 --> 01:19:58,709
assembly instructions in the c code and
so we could have just embedded these

4148
01:19:58,709 --> 01:19:58,719
so we could have just embedded these
 

4149
01:19:58,719 --> 01:20:00,709
so we could have just embedded these
assembly structures in the c function

4150
01:20:00,709 --> 01:20:00,719
assembly structures in the c function
 

4151
01:20:00,719 --> 01:20:03,669
assembly structures in the c function
but it would amount to the same thing

4152
01:20:03,669 --> 01:20:03,679
but it would amount to the same thing
 

4153
01:20:03,679 --> 01:20:05,030
but it would amount to the same thing
we're basically we're operating at a

4154
01:20:05,030 --> 01:20:05,040
we're basically we're operating at a
 

4155
01:20:05,040 --> 01:20:07,030
we're basically we're operating at a
level below

4156
01:20:07,030 --> 01:20:07,040
level below
 

4157
01:20:07,040 --> 01:20:09,910
level below
below c so we can't really we can't

4158
01:20:09,910 --> 01:20:09,920
below c so we can't really we can't
 

4159
01:20:09,920 --> 01:20:13,910
below c so we can't really we can't
really use c here

4160
01:20:13,910 --> 01:20:13,920

 

4161
01:20:13,920 --> 01:20:16,149

i have a question about when a thread

4162
01:20:16,149 --> 01:20:16,159
i have a question about when a thread
 

4163
01:20:16,159 --> 01:20:17,990
i have a question about when a thread
finishes executing i'm assuming that

4164
01:20:17,990 --> 01:20:18,000
finishes executing i'm assuming that
 

4165
01:20:18,000 --> 01:20:19,830
finishes executing i'm assuming that
happens in the user space when we call

4166
01:20:19,830 --> 01:20:19,840
happens in the user space when we call
 

4167
01:20:19,840 --> 01:20:22,070
happens in the user space when we call
the exec i'm sorry

4168
01:20:22,070 --> 01:20:22,080
the exec i'm sorry
 

4169
01:20:22,080 --> 01:20:25,189
the exec i'm sorry
exit system call and

4170
01:20:25,189 --> 01:20:25,199
exit system call and
 

4171
01:20:25,199 --> 01:20:27,990
exit system call and
um that also ends the process in the

4172
01:20:27,990 --> 01:20:28,000
um that also ends the process in the
 

4173
01:20:28,000 --> 01:20:30,149
um that also ends the process in the
thread i'm assuming in the kernel space

4174
01:20:30,149 --> 01:20:30,159
thread i'm assuming in the kernel space
 

4175
01:20:30,159 --> 01:20:33,189
thread i'm assuming in the kernel space
but if the thread ends

4176
01:20:33,189 --> 01:20:33,199
but if the thread ends
 

4177
01:20:33,199 --> 01:20:35,350
but if the thread ends
within before a new time interrupt

4178
01:20:35,350 --> 01:20:35,360
within before a new time interrupt
 

4179
01:20:35,360 --> 01:20:37,110
within before a new time interrupt
happens does it still

4180
01:20:37,110 --> 01:20:37,120
happens does it still
 

4181
01:20:37,120 --> 01:20:40,470
happens does it still
like um is this

4182
01:20:40,470 --> 01:20:40,480
like um is this
 

4183
01:20:40,480 --> 01:20:42,310
like um is this
like the cpu still acquired by that

4184
01:20:42,310 --> 01:20:42,320
like the cpu still acquired by that
 

4185
01:20:42,320 --> 01:20:44,310
like the cpu still acquired by that
thread or do we end that thread and

4186
01:20:44,310 --> 01:20:44,320
thread or do we end that thread and
 

4187
01:20:44,320 --> 01:20:45,830
thread or do we end that thread and
start a new one before the new time

4188
01:20:45,830 --> 01:20:45,840
start a new one before the new time
 

4189
01:20:45,840 --> 01:20:46,550
start a new one before the new time
interrupt

4190
01:20:46,550 --> 01:20:46,560
interrupt
 

4191
01:20:46,560 --> 01:20:49,750
interrupt
oh yeah the

4192
01:20:49,750 --> 01:20:49,760

 

4193
01:20:49,760 --> 01:20:54,709

the thread um the thread yields the cpu

4194
01:20:54,709 --> 01:20:54,719
the thread um the thread yields the cpu
 

4195
01:20:54,719 --> 01:20:57,270
the thread um the thread yields the cpu
does the exit exit yields the cpu so

4196
01:20:57,270 --> 01:20:57,280
does the exit exit yields the cpu so
 

4197
01:20:57,280 --> 01:20:59,510
does the exit exit yields the cpu so
there's actually many points that

4198
01:20:59,510 --> 01:20:59,520
there's actually many points that
 

4199
01:20:59,520 --> 01:21:00,550
there's actually many points that
even though i've been driving this

4200
01:21:00,550 --> 01:21:00,560
even though i've been driving this
 

4201
01:21:00,560 --> 01:21:02,149
even though i've been driving this
discussion with the timer interrupt in

4202
01:21:02,149 --> 01:21:02,159
discussion with the timer interrupt in
 

4203
01:21:02,159 --> 01:21:04,149
discussion with the timer interrupt in
fact

4204
01:21:04,149 --> 01:21:04,159
fact
 

4205
01:21:04,159 --> 01:21:07,030
fact
in almost almost all cases where xv6

4206
01:21:07,030 --> 01:21:07,040
in almost almost all cases where xv6
 

4207
01:21:07,040 --> 01:21:08,709
in almost almost all cases where xv6
switches between threads it's not due to

4208
01:21:08,709 --> 01:21:08,719
switches between threads it's not due to
 

4209
01:21:08,719 --> 01:21:09,910
switches between threads it's not due to
timer interrupts

4210
01:21:09,910 --> 01:21:09,920
timer interrupts
 

4211
01:21:09,920 --> 01:21:12,950
timer interrupts
it's because um some system call is

4212
01:21:12,950 --> 01:21:12,960
it's because um some system call is
 

4213
01:21:12,960 --> 01:21:15,350
it's because um some system call is
waiting for something or decides

4214
01:21:15,350 --> 01:21:15,360
waiting for something or decides
 

4215
01:21:15,360 --> 01:21:17,669
waiting for something or decides
that that it needs to give up the cpu

4216
01:21:17,669 --> 01:21:17,679
that that it needs to give up the cpu
 

4217
01:21:17,679 --> 01:21:19,110
that that it needs to give up the cpu
and so for example

4218
01:21:19,110 --> 01:21:19,120
and so for example
 

4219
01:21:19,120 --> 01:21:21,669
and so for example
exit does various things and then calls

4220
01:21:21,669 --> 01:21:21,679
exit does various things and then calls
 

4221
01:21:21,679 --> 01:21:22,470
exit does various things and then calls
yield

4222
01:21:22,470 --> 01:21:22,480
yield
 

4223
01:21:22,480 --> 01:21:25,510
yield
to give up the cpu and it does that

4224
01:21:25,510 --> 01:21:25,520
to give up the cpu and it does that
 

4225
01:21:25,520 --> 01:21:26,870
to give up the cpu and it does that
there's really nothing it does that

4226
01:21:26,870 --> 01:21:26,880
there's really nothing it does that
 

4227
01:21:26,880 --> 01:21:28,390
there's really nothing it does that
independently whether there's a timer

4228
01:21:28,390 --> 01:21:28,400
independently whether there's a timer
 

4229
01:21:28,400 --> 01:21:31,669
independently whether there's a timer
interrupt

4230
01:21:31,669 --> 01:21:31,679

 

4231
01:21:31,679 --> 01:21:37,750

yes

4232
01:21:37,750 --> 01:21:37,760

 

4233
01:21:37,760 --> 01:21:40,470

all right the time is up for this

4234
01:21:40,470 --> 01:21:40,480
all right the time is up for this
 

4235
01:21:40,480 --> 01:21:41,510
all right the time is up for this
lecture i think i'll

4236
01:21:41,510 --> 01:21:41,520
lecture i think i'll
 

4237
01:21:41,520 --> 01:21:43,910
lecture i think i'll
continue some of this discussion next

4238
01:21:43,910 --> 01:21:43,920
continue some of this discussion next
 

4239
01:21:43,920 --> 01:21:45,510
continue some of this discussion next
week but i'm happy to take more

4240
01:21:45,510 --> 01:21:45,520
week but i'm happy to take more
 

4241
01:21:45,520 --> 01:21:46,790
week but i'm happy to take more
questions

4242
01:21:46,790 --> 01:21:46,800
questions
 

4243
01:21:46,800 --> 01:21:52,229
questions
right now if people have them

4244
01:21:52,229 --> 01:21:52,239

 

4245
01:21:52,239 --> 01:21:54,149

so let's say the operating system

4246
01:21:54,149 --> 01:21:54,159
so let's say the operating system
 

4247
01:21:54,159 --> 01:21:56,390
so let's say the operating system
actually um

4248
01:21:56,390 --> 01:21:56,400
actually um
 

4249
01:21:56,400 --> 01:21:59,510
actually um
takes on the thread implementation so

4250
01:21:59,510 --> 01:21:59,520
takes on the thread implementation so
 

4251
01:21:59,520 --> 01:22:02,310
takes on the thread implementation so
so for example you want to run multiple

4252
01:22:02,310 --> 01:22:02,320
so for example you want to run multiple
 

4253
01:22:02,320 --> 01:22:03,750
so for example you want to run multiple
threads of a process

4254
01:22:03,750 --> 01:22:03,760
threads of a process
 

4255
01:22:03,760 --> 01:22:06,229
threads of a process
on multiple cpus like that has to be

4256
01:22:06,229 --> 01:22:06,239
on multiple cpus like that has to be
 

4257
01:22:06,239 --> 01:22:08,310
on multiple cpus like that has to be
handled by the os that cannot just be

4258
01:22:08,310 --> 01:22:08,320
handled by the os that cannot just be
 

4259
01:22:08,320 --> 01:22:10,310
handled by the os that cannot just be
handled in user space right

4260
01:22:10,310 --> 01:22:10,320
handled in user space right
 

4261
01:22:10,320 --> 01:22:12,070
handled in user space right
how does that kind of switching work is

4262
01:22:12,070 --> 01:22:12,080
how does that kind of switching work is
 

4263
01:22:12,080 --> 01:22:14,229
how does that kind of switching work is
each each thread mouse becomes the same

4264
01:22:14,229 --> 01:22:14,239
each each thread mouse becomes the same
 

4265
01:22:14,239 --> 01:22:15,830
each each thread mouse becomes the same
as the process it's like is it always

4266
01:22:15,830 --> 01:22:15,840
as the process it's like is it always
 

4267
01:22:15,840 --> 01:22:16,950
as the process it's like is it always
going to loop through all

4268
01:22:16,950 --> 01:22:16,960
going to loop through all
 

4269
01:22:16,960 --> 01:22:20,390
going to loop through all
existing threads or you know because

4270
01:22:20,390 --> 01:22:20,400
existing threads or you know because
 

4271
01:22:20,400 --> 01:22:22,550
existing threads or you know because
like each cpu will still switch between

4272
01:22:22,550 --> 01:22:22,560
like each cpu will still switch between
 

4273
01:22:22,560 --> 01:22:24,149
like each cpu will still switch between
even if one process has give me eight

4274
01:22:24,149 --> 01:22:24,159
even if one process has give me eight
 

4275
01:22:24,159 --> 01:22:25,750
even if one process has give me eight
cores like it's still going to switch

4276
01:22:25,750 --> 01:22:25,760
cores like it's still going to switch
 

4277
01:22:25,760 --> 01:22:27,830
cores like it's still going to switch
switch each of the cpus between

4278
01:22:27,830 --> 01:22:27,840
switch each of the cpus between
 

4279
01:22:27,840 --> 01:22:30,470
switch each of the cpus between
those and then couple of other processes

4280
01:22:30,470 --> 01:22:30,480
those and then couple of other processes
 

4281
01:22:30,480 --> 01:22:32,070
those and then couple of other processes
and then also we don't want to really

4282
01:22:32,070 --> 01:22:32,080
and then also we don't want to really
 

4283
01:22:32,080 --> 01:22:32,790
and then also we don't want to really
switch

4284
01:22:32,790 --> 01:22:32,800
switch
 

4285
01:22:32,800 --> 01:22:34,629
switch
like between one and the other thread on

4286
01:22:34,629 --> 01:22:34,639
like between one and the other thread on
 

4287
01:22:34,639 --> 01:22:36,070
like between one and the other thread on
the same cpu

4288
01:22:36,070 --> 01:22:36,080
the same cpu
 

4289
01:22:36,080 --> 01:22:39,350
the same cpu
or do we i don't know wait

4290
01:22:39,350 --> 01:22:39,360
or do we i don't know wait
 

4291
01:22:39,360 --> 01:22:42,950
or do we i don't know wait
can uh um i'm not sure what the question

4292
01:22:42,950 --> 01:22:42,960
can uh um i'm not sure what the question
 

4293
01:22:42,960 --> 01:22:43,830
can uh um i'm not sure what the question
is

4294
01:22:43,830 --> 01:22:43,840
is
 

4295
01:22:43,840 --> 01:22:45,350
is
yeah i guess i guess can you just

4296
01:22:45,350 --> 01:22:45,360
yeah i guess i guess can you just
 

4297
01:22:45,360 --> 01:22:48,550
yeah i guess i guess can you just
explain more like how does that happen

4298
01:22:48,550 --> 01:22:48,560
explain more like how does that happen
 

4299
01:22:48,560 --> 01:22:51,590
explain more like how does that happen
sorry how does what happen um

4300
01:22:51,590 --> 01:22:51,600
sorry how does what happen um
 

4301
01:22:51,600 --> 01:22:53,189
sorry how does what happen um
let's say we have multiple threads per

4302
01:22:53,189 --> 01:22:53,199
let's say we have multiple threads per
 

4303
01:22:53,199 --> 01:22:54,870
let's say we have multiple threads per
process so that they can and they can

4304
01:22:54,870 --> 01:22:54,880
process so that they can and they can
 

4305
01:22:54,880 --> 01:22:55,350
process so that they can and they can
run on

4306
01:22:55,350 --> 01:22:55,360
run on
 

4307
01:22:55,360 --> 01:22:57,910
run on
different gpus like how do what do we go

4308
01:22:57,910 --> 01:22:57,920
different gpus like how do what do we go
 

4309
01:22:57,920 --> 01:22:59,189
different gpus like how do what do we go
how to go about there

4310
01:22:59,189 --> 01:22:59,199
how to go about there
 

4311
01:22:59,199 --> 01:23:01,669
how to go about there
yeah so linux for example supports uh

4312
01:23:01,669 --> 01:23:01,679
yeah so linux for example supports uh
 

4313
01:23:01,679 --> 01:23:02,870
yeah so linux for example supports uh
multiple threads

4314
01:23:02,870 --> 01:23:02,880
multiple threads
 

4315
01:23:02,880 --> 01:23:05,030
multiple threads
per process and in linux the

4316
01:23:05,030 --> 01:23:05,040
per process and in linux the
 

4317
01:23:05,040 --> 01:23:07,590
per process and in linux the
implementation

4318
01:23:07,590 --> 01:23:07,600
implementation
 

4319
01:23:07,600 --> 01:23:09,350
implementation
is a complex implementation but maybe

4320
01:23:09,350 --> 01:23:09,360
is a complex implementation but maybe
 

4321
01:23:09,360 --> 01:23:11,910
is a complex implementation but maybe
the simplest way to explain it is that

4322
01:23:11,910 --> 01:23:11,920
the simplest way to explain it is that
 

4323
01:23:11,920 --> 01:23:15,669
the simplest way to explain it is that
um each uh it's almost as if each thread

4324
01:23:15,669 --> 01:23:15,679
um each uh it's almost as if each thread
 

4325
01:23:15,679 --> 01:23:16,550
um each uh it's almost as if each thread
in linux

4326
01:23:16,550 --> 01:23:16,560
in linux
 

4327
01:23:16,560 --> 01:23:20,070
in linux
is a complete process and

4328
01:23:20,070 --> 01:23:20,080
is a complete process and
 

4329
01:23:20,080 --> 01:23:22,870
is a complete process and
the the threads of a given what we would

4330
01:23:22,870 --> 01:23:22,880
the the threads of a given what we would
 

4331
01:23:22,880 --> 01:23:25,189
the the threads of a given what we would
call the threads of a particular process

4332
01:23:25,189 --> 01:23:25,199
call the threads of a particular process
 

4333
01:23:25,199 --> 01:23:27,669
call the threads of a particular process
are essentially separate processes that

4334
01:23:27,669 --> 01:23:27,679
are essentially separate processes that
 

4335
01:23:27,679 --> 01:23:29,910
are essentially separate processes that
share the same memory

4336
01:23:29,910 --> 01:23:29,920
share the same memory
 

4337
01:23:29,920 --> 01:23:31,750
share the same memory
so linux has sort of separated out the

4338
01:23:31,750 --> 01:23:31,760
so linux has sort of separated out the
 

4339
01:23:31,760 --> 01:23:33,030
so linux has sort of separated out the
notion of

4340
01:23:33,030 --> 01:23:33,040
notion of
 

4341
01:23:33,040 --> 01:23:34,950
notion of
the thread of execution from address

4342
01:23:34,950 --> 01:23:34,960
the thread of execution from address
 

4343
01:23:34,960 --> 01:23:36,310
the thread of execution from address
space and

4344
01:23:36,310 --> 01:23:36,320
space and
 

4345
01:23:36,320 --> 01:23:39,110
space and
you know you can have them separately

4346
01:23:39,110 --> 01:23:39,120
you know you can have them separately
 

4347
01:23:39,120 --> 01:23:39,510
you know you can have them separately
and

4348
01:23:39,510 --> 01:23:39,520
and
 

4349
01:23:39,520 --> 01:23:41,030
and
if you make two threads in one process

4350
01:23:41,030 --> 01:23:41,040
if you make two threads in one process
 

4351
01:23:41,040 --> 01:23:42,709
if you make two threads in one process
it basically makes two processes

4352
01:23:42,709 --> 01:23:42,719
it basically makes two processes
 

4353
01:23:42,719 --> 01:23:44,870
it basically makes two processes
that share one address space and then

4354
01:23:44,870 --> 01:23:44,880
that share one address space and then
 

4355
01:23:44,880 --> 01:23:46,709
that share one address space and then
from then on the scheduling is

4356
01:23:46,709 --> 01:23:46,719
from then on the scheduling is
 

4357
01:23:46,719 --> 01:23:49,750
from then on the scheduling is
not unlike what xv6 does

4358
01:23:49,750 --> 01:23:49,760
not unlike what xv6 does
 

4359
01:23:49,760 --> 01:23:53,350
not unlike what xv6 does
for individual processes i see and then

4360
01:23:53,350 --> 01:23:53,360
for individual processes i see and then
 

4361
01:23:53,360 --> 01:23:55,590
for individual processes i see and then
is there anything like does the user

4362
01:23:55,590 --> 01:23:55,600
is there anything like does the user
 

4363
01:23:55,600 --> 01:23:57,189
is there anything like does the user
have to specify like

4364
01:23:57,189 --> 01:23:57,199
have to specify like
 

4365
01:23:57,199 --> 01:24:00,470
have to specify like
okay pin each thread to a cpu uh

4366
01:24:00,470 --> 01:24:00,480
okay pin each thread to a cpu uh
 

4367
01:24:00,480 --> 01:24:03,110
okay pin each thread to a cpu uh
or or how does the os make sure that

4368
01:24:03,110 --> 01:24:03,120
or or how does the os make sure that
 

4369
01:24:03,120 --> 01:24:04,470
or or how does the os make sure that
different threads of the same process

4370
01:24:04,470 --> 01:24:04,480
different threads of the same process
 

4371
01:24:04,480 --> 01:24:05,669
different threads of the same process
don't run on the same core because

4372
01:24:05,669 --> 01:24:05,679
don't run on the same core because
 

4373
01:24:05,679 --> 01:24:06,310
don't run on the same core because
that's kind of

4374
01:24:06,310 --> 01:24:06,320
that's kind of
 

4375
01:24:06,320 --> 01:24:08,310
that's kind of
defeating the purpose or not i guess i

4376
01:24:08,310 --> 01:24:08,320
defeating the purpose or not i guess i
 

4377
01:24:08,320 --> 01:24:09,669
defeating the purpose or not i guess i
don't know the

4378
01:24:09,669 --> 01:24:09,679
don't know the
 

4379
01:24:09,679 --> 01:24:12,310
don't know the
the uh it's actually just like it's much

4380
01:24:12,310 --> 01:24:12,320
the uh it's actually just like it's much
 

4381
01:24:12,320 --> 01:24:14,550
the uh it's actually just like it's much
like xp6 namely the

4382
01:24:14,550 --> 01:24:14,560
like xp6 namely the
 

4383
01:24:14,560 --> 01:24:18,709
like xp6 namely the
um you know there's four cores and

4384
01:24:18,709 --> 01:24:18,719
um you know there's four cores and
 

4385
01:24:18,719 --> 01:24:20,310
um you know there's four cores and
linux will just find four things to run

4386
01:24:20,310 --> 01:24:20,320
linux will just find four things to run
 

4387
01:24:20,320 --> 01:24:22,149
linux will just find four things to run
on those four cores

4388
01:24:22,149 --> 01:24:22,159
on those four cores
 

4389
01:24:22,159 --> 01:24:25,350
on those four cores
they may be you know if there's not much

4390
01:24:25,350 --> 01:24:25,360
they may be you know if there's not much
 

4391
01:24:25,360 --> 01:24:26,629
they may be you know if there's not much
going on then maybe there'll be four

4392
01:24:26,629 --> 01:24:26,639
going on then maybe there'll be four
 

4393
01:24:26,639 --> 01:24:27,830
going on then maybe there'll be four
threads of the same

4394
01:24:27,830 --> 01:24:27,840
threads of the same
 

4395
01:24:27,840 --> 01:24:31,189
threads of the same
process or if there's 100 users logged

4396
01:24:31,189 --> 01:24:31,199
process or if there's 100 users logged
 

4397
01:24:31,199 --> 01:24:33,590
process or if there's 100 users logged
in on an athena machine maybe it's

4398
01:24:33,590 --> 01:24:33,600
in on an athena machine maybe it's
 

4399
01:24:33,600 --> 01:24:35,990
in on an athena machine maybe it's
one thread each from multiple different

4400
01:24:35,990 --> 01:24:36,000
one thread each from multiple different
 

4401
01:24:36,000 --> 01:24:36,790
one thread each from multiple different
processes

4402
01:24:36,790 --> 01:24:36,800
processes
 

4403
01:24:36,800 --> 01:24:40,870
processes
you know there's not any one answer

4404
01:24:40,870 --> 01:24:40,880
you know there's not any one answer
 

4405
01:24:40,880 --> 01:24:42,950
you know there's not any one answer
or the kernel basically finds something

4406
01:24:42,950 --> 01:24:42,960
or the kernel basically finds something
 

4407
01:24:42,960 --> 01:24:44,310
or the kernel basically finds something
for each core to do and then

4408
01:24:44,310 --> 01:24:44,320
for each core to do and then
 

4409
01:24:44,320 --> 01:24:46,870
for each core to do and then
that core does that thing okay that

4410
01:24:46,870 --> 01:24:46,880
that core does that thing okay that
 

4411
01:24:46,880 --> 01:24:48,550
that core does that thing okay that
makes sense

4412
01:24:48,550 --> 01:24:48,560
makes sense
 

4413
01:24:48,560 --> 01:24:51,110
makes sense
you can you know if you're if you want

4414
01:24:51,110 --> 01:24:51,120
you can you know if you're if you want
 

4415
01:24:51,120 --> 01:24:52,390
you can you know if you're if you want
to do careful measurements there is a

4416
01:24:52,390 --> 01:24:52,400
to do careful measurements there is a
 

4417
01:24:52,400 --> 01:24:53,910
to do careful measurements there is a
way to pin threads to cores

4418
01:24:53,910 --> 01:24:53,920
way to pin threads to cores
 

4419
01:24:53,920 --> 01:24:56,390
way to pin threads to cores
but people only do it when they're up to

4420
01:24:56,390 --> 01:24:56,400
but people only do it when they're up to
 

4421
01:24:56,400 --> 01:25:00,550
but people only do it when they're up to
something strange

4422
01:25:00,550 --> 01:25:00,560

 

4423
01:25:00,560 --> 01:25:03,910

so they share this little virtual table

4424
01:25:03,910 --> 01:25:03,920
so they share this little virtual table
 

4425
01:25:03,920 --> 01:25:06,470
so they share this little virtual table
you say it again memory so they say they

4426
01:25:06,470 --> 01:25:06,480
you say it again memory so they say they
 

4427
01:25:06,480 --> 01:25:07,350
you say it again memory so they say they
have the same

4428
01:25:07,350 --> 01:25:07,360
have the same
 

4429
01:25:07,360 --> 01:25:10,390
have the same
page table those threads

4430
01:25:10,390 --> 01:25:10,400
page table those threads
 

4431
01:25:10,400 --> 01:25:13,510
page table those threads
yeah yeah yeah yeah if you're on linux

4432
01:25:13,510 --> 01:25:13,520
yeah yeah yeah yeah if you're on linux
 

4433
01:25:13,520 --> 01:25:15,430
yeah yeah yeah yeah if you're on linux
if you create two threads in one process

4434
01:25:15,430 --> 01:25:15,440
if you create two threads in one process
 

4435
01:25:15,440 --> 01:25:17,270
if you create two threads in one process
then you have these two threads that

4436
01:25:17,270 --> 01:25:17,280
then you have these two threads that
 

4437
01:25:17,280 --> 01:25:20,629
then you have these two threads that
uh i don't know if they like literally

4438
01:25:20,629 --> 01:25:20,639
uh i don't know if they like literally
 

4439
01:25:20,639 --> 01:25:23,830
uh i don't know if they like literally
share the exact same page table or

4440
01:25:23,830 --> 01:25:23,840
share the exact same page table or
 

4441
01:25:23,840 --> 01:25:25,189
share the exact same page table or
whether their page tables

4442
01:25:25,189 --> 01:25:25,199
whether their page tables
 

4443
01:25:25,199 --> 01:25:28,629
whether their page tables
are identical one or the other

4444
01:25:28,629 --> 01:25:28,639
are identical one or the other
 

4445
01:25:28,639 --> 01:25:30,310
are identical one or the other
is there a reason why they would have to

4446
01:25:30,310 --> 01:25:30,320
is there a reason why they would have to
 

4447
01:25:30,320 --> 01:25:32,790
is there a reason why they would have to
be separate ever

4448
01:25:32,790 --> 01:25:32,800
be separate ever
 

4449
01:25:32,800 --> 01:25:36,550
be separate ever
if you manually map memory or

4450
01:25:36,550 --> 01:25:36,560

 

4451
01:25:36,560 --> 01:25:39,669

i i don't know enough to know whether

4452
01:25:39,669 --> 01:25:39,679
i i don't know enough to know whether
 

4453
01:25:39,679 --> 01:25:44,229
i i don't know enough to know whether
which which linux does

4454
01:25:44,229 --> 01:25:44,239

 

4455
01:25:44,239 --> 01:25:45,990

okay i have another question about like

4456
01:25:45,990 --> 01:25:46,000
okay i have another question about like
 

4457
01:25:46,000 --> 01:25:48,229
okay i have another question about like
a small detail um

4458
01:25:48,229 --> 01:25:48,239
a small detail um
 

4459
01:25:48,239 --> 01:25:50,629
a small detail um
so basically like from my understanding

4460
01:25:50,629 --> 01:25:50,639
so basically like from my understanding
 

4461
01:25:50,639 --> 01:25:52,950
so basically like from my understanding
when you call switch

4462
01:25:52,950 --> 01:25:52,960
when you call switch
 

4463
01:25:52,960 --> 01:25:55,590
when you call switch
you switch from one call to switch to

4464
01:25:55,590 --> 01:25:55,600
you switch from one call to switch to
 

4465
01:25:55,600 --> 01:25:57,110
you switch from one call to switch to
another so the first time you call

4466
01:25:57,110 --> 01:25:57,120
another so the first time you call
 

4467
01:25:57,120 --> 01:25:57,590
another so the first time you call
switch

4468
01:25:57,590 --> 01:25:57,600
switch
 

4469
01:25:57,600 --> 01:25:59,830
switch
you have to like kind of artificially

4470
01:25:59,830 --> 01:25:59,840
you have to like kind of artificially
 

4471
01:25:59,840 --> 01:26:00,870
you have to like kind of artificially
create that

4472
01:26:00,870 --> 01:26:00,880
create that
 

4473
01:26:00,880 --> 01:26:04,390
create that
other endpoint to come back to right yes

4474
01:26:04,390 --> 01:26:04,400
other endpoint to come back to right yes
 

4475
01:26:04,400 --> 01:26:05,830
other endpoint to come back to right yes
because you can't just randomly jump

4476
01:26:05,830 --> 01:26:05,840
because you can't just randomly jump
 

4477
01:26:05,840 --> 01:26:07,430
because you can't just randomly jump
into write any code

4478
01:26:07,430 --> 01:26:07,440
into write any code
 

4479
01:26:07,440 --> 01:26:11,830
into write any code
yes you want to know where that

4480
01:26:11,830 --> 01:26:11,840
yes you want to know where that
 

4481
01:26:11,840 --> 01:26:14,870
yes you want to know where that
where that fake

4482
01:26:14,870 --> 01:26:14,880
where that fake
 

4483
01:26:14,880 --> 01:26:17,910
where that fake
where that context is cooked up probably

4484
01:26:17,910 --> 01:26:17,920
where that context is cooked up probably
 

4485
01:26:17,920 --> 01:26:19,430
where that context is cooked up probably
somewhere where the process is

4486
01:26:19,430 --> 01:26:19,440
somewhere where the process is
 

4487
01:26:19,440 --> 01:26:21,510
somewhere where the process is
uh created now i guess i don't know yeah

4488
01:26:21,510 --> 01:26:21,520
uh created now i guess i don't know yeah
 

4489
01:26:21,520 --> 01:26:24,709
uh created now i guess i don't know yeah
yeah yeah yeah maybe user internet

4490
01:26:24,709 --> 01:26:24,719
yeah yeah yeah maybe user internet
 

4491
01:26:24,719 --> 01:26:33,110
yeah yeah yeah maybe user internet
or let's see not using it lock proc

4492
01:26:33,110 --> 01:26:33,120

 

4493
01:26:33,120 --> 01:26:35,510

there's something called fork trap or

4494
01:26:35,510 --> 01:26:35,520
there's something called fork trap or
 

4495
01:26:35,520 --> 01:26:36,229
there's something called fork trap or
something yeah

4496
01:26:36,229 --> 01:26:36,239
something yeah
 

4497
01:26:36,239 --> 01:26:38,870
something yeah
look at this yeah yeah well yeah fork

4498
01:26:38,870 --> 01:26:38,880
look at this yeah yeah well yeah fork
 

4499
01:26:38,880 --> 01:26:40,790
look at this yeah yeah well yeah fork
red okay so an alloc proc which is

4500
01:26:40,790 --> 01:26:40,800
red okay so an alloc proc which is
 

4501
01:26:40,800 --> 01:26:42,149
red okay so an alloc proc which is
called both

4502
01:26:42,149 --> 01:26:42,159
called both
 

4503
01:26:42,159 --> 01:26:44,550
called both
for the very first process of blue time

4504
01:26:44,550 --> 01:26:44,560
for the very first process of blue time
 

4505
01:26:44,560 --> 01:26:45,189
for the very first process of blue time
and by

4506
01:26:45,189 --> 01:26:45,199
and by
 

4507
01:26:45,199 --> 01:26:49,110
and by
fork um alloc proc sets up the critical

4508
01:26:49,110 --> 01:26:49,120
fork um alloc proc sets up the critical
 

4509
01:26:49,120 --> 01:26:50,709
fork um alloc proc sets up the critical
elements of the context

4510
01:26:50,709 --> 01:26:50,719
elements of the context
 

4511
01:26:50,719 --> 01:26:54,550
elements of the context
for the new processes

4512
01:26:54,550 --> 01:26:54,560

 

4513
01:26:54,560 --> 01:26:56,470

it sets up the new processes context it

4514
01:26:56,470 --> 01:26:56,480
it sets up the new processes context it
 

4515
01:26:56,480 --> 01:26:57,510
it sets up the new processes context it
actually doesn't matter what most of the

4516
01:26:57,510 --> 01:26:57,520
actually doesn't matter what most of the
 

4517
01:26:57,520 --> 01:26:59,110
actually doesn't matter what most of the
registers are

4518
01:26:59,110 --> 01:26:59,120
registers are
 

4519
01:26:59,120 --> 01:27:00,950
registers are
but it doesn't matter what ra is because

4520
01:27:00,950 --> 01:27:00,960
but it doesn't matter what ra is because
 

4521
01:27:00,960 --> 01:27:02,149
but it doesn't matter what ra is because
that's where the switch

4522
01:27:02,149 --> 01:27:02,159
that's where the switch
 

4523
01:27:02,159 --> 01:27:04,070
that's where the switch
the very first switch and that process

4524
01:27:04,070 --> 01:27:04,080
the very first switch and that process
 

4525
01:27:04,080 --> 01:27:07,430
the very first switch and that process
is going to return to ra

4526
01:27:07,430 --> 01:27:07,440

 

4527
01:27:07,440 --> 01:27:09,189

and that process is going to need to use

4528
01:27:09,189 --> 01:27:09,199
and that process is going to need to use
 

4529
01:27:09,199 --> 01:27:12,470
and that process is going to need to use
its own stack so ra and sp are set up

4530
01:27:12,470 --> 01:27:12,480
its own stack so ra and sp are set up
 

4531
01:27:12,480 --> 01:27:15,270
its own stack so ra and sp are set up
are faked essentially so that the very

4532
01:27:15,270 --> 01:27:15,280
are faked essentially so that the very
 

4533
01:27:15,280 --> 01:27:16,070
are faked essentially so that the very
first switch

4534
01:27:16,070 --> 01:27:16,080
first switch
 

4535
01:27:16,080 --> 01:27:19,110
first switch
into a process works so so if i

4536
01:27:19,110 --> 01:27:19,120
into a process works so so if i
 

4537
01:27:19,120 --> 01:27:20,629
into a process works so so if i
understand this correctly like when the

4538
01:27:20,629 --> 01:27:20,639
understand this correctly like when the
 

4539
01:27:20,639 --> 01:27:22,390
understand this correctly like when the
switch will happen then

4540
01:27:22,390 --> 01:27:22,400
switch will happen then
 

4541
01:27:22,400 --> 01:27:24,870
switch will happen then
it'll basically just start executing the

4542
01:27:24,870 --> 01:27:24,880
it'll basically just start executing the
 

4543
01:27:24,880 --> 01:27:25,910
it'll basically just start executing the
first instruction

4544
01:27:25,910 --> 01:27:25,920
first instruction
 

4545
01:27:25,920 --> 01:27:28,950
first instruction
inside of the four cred as if red just

4546
01:27:28,950 --> 01:27:28,960
inside of the four cred as if red just
 

4547
01:27:28,960 --> 01:27:30,950
inside of the four cred as if red just
called switch and returned from

4548
01:27:30,950 --> 01:27:30,960
called switch and returned from
 

4549
01:27:30,960 --> 01:27:33,270
called switch and returned from
yeah yeah yeah yeah the return from

4550
01:27:33,270 --> 01:27:33,280
yeah yeah yeah yeah the return from
 

4551
01:27:33,280 --> 01:27:34,149
yeah yeah yeah yeah the return from
switch is

4552
01:27:34,149 --> 01:27:34,159
switch is
 

4553
01:27:34,159 --> 01:27:35,750
switch is
going to be a jump to the beginning of

4554
01:27:35,750 --> 01:27:35,760
going to be a jump to the beginning of
 

4555
01:27:35,760 --> 01:27:37,350
going to be a jump to the beginning of
fork red

4556
01:27:37,350 --> 01:27:37,360
fork red
 

4557
01:27:37,360 --> 01:27:41,189
fork red
right interesting do we ever

4558
01:27:41,189 --> 01:27:41,199
right interesting do we ever
 

4559
01:27:41,199 --> 01:27:44,390
right interesting do we ever
call fork red or is it always hap

4560
01:27:44,390 --> 01:27:44,400
call fork red or is it always hap
 

4561
01:27:44,400 --> 01:27:46,149
call fork red or is it always hap
it always happens like this i don't

4562
01:27:46,149 --> 01:27:46,159
it always happens like this i don't
 

4563
01:27:46,159 --> 01:27:48,149
it always happens like this i don't
think anything ever calls for credit for

4564
01:27:48,149 --> 01:27:48,159
think anything ever calls for credit for
 

4565
01:27:48,159 --> 01:27:50,310
think anything ever calls for credit for
real i think it's

4566
01:27:50,310 --> 01:27:50,320
real i think it's
 

4567
01:27:50,320 --> 01:27:52,950
real i think it's
just yeah it's only executed in this

4568
01:27:52,950 --> 01:27:52,960
just yeah it's only executed in this
 

4569
01:27:52,960 --> 01:27:55,830
just yeah it's only executed in this
weird way from

4570
01:27:55,830 --> 01:27:55,840
weird way from
 

4571
01:27:55,840 --> 01:27:59,110
weird way from
first time a process is run it is really

4572
01:27:59,110 --> 01:27:59,120
first time a process is run it is really
 

4573
01:27:59,120 --> 01:28:00,629
first time a process is run it is really
its job is to

4574
01:28:00,629 --> 01:28:00,639
its job is to
 

4575
01:28:00,639 --> 01:28:04,390
its job is to
release the lock that the scheduler took

4576
01:28:04,390 --> 01:28:04,400
release the lock that the scheduler took
 

4577
01:28:04,400 --> 01:28:06,790
release the lock that the scheduler took
and then return and then this user trap

4578
01:28:06,790 --> 01:28:06,800
and then return and then this user trap
 

4579
01:28:06,800 --> 01:28:08,149
and then return and then this user trap
red of course is also

4580
01:28:08,149 --> 01:28:08,159
red of course is also
 

4581
01:28:08,159 --> 01:28:11,270
red of course is also
fake in that it's

4582
01:28:11,270 --> 01:28:11,280
fake in that it's
 

4583
01:28:11,280 --> 01:28:13,430
fake in that it's
it's you know yeah it's like it's as if

4584
01:28:13,430 --> 01:28:13,440
it's you know yeah it's like it's as if
 

4585
01:28:13,440 --> 01:28:15,430
it's you know yeah it's like it's as if
returning from a trap except the trap

4586
01:28:15,430 --> 01:28:15,440
returning from a trap except the trap
 

4587
01:28:15,440 --> 01:28:16,310
returning from a trap except the trap
frame is

4588
01:28:16,310 --> 01:28:16,320
frame is
 

4589
01:28:16,320 --> 01:28:19,669
frame is
faked also to have to like jump to the

4590
01:28:19,669 --> 01:28:19,679
faked also to have to like jump to the
 

4591
01:28:19,679 --> 01:28:21,590
faked also to have to like jump to the
first instruction in the

4592
01:28:21,590 --> 01:28:21,600
first instruction in the
 

4593
01:28:21,600 --> 01:28:24,629
first instruction in the
user right code

4594
01:28:24,629 --> 01:28:24,639
user right code
 

4595
01:28:24,639 --> 01:28:26,870
user right code
oh but the trap frame it's again the

4596
01:28:26,870 --> 01:28:26,880
oh but the trap frame it's again the
 

4597
01:28:26,880 --> 01:28:28,310
oh but the trap frame it's again the
same like you don't need to initialize

4598
01:28:28,310 --> 01:28:28,320
same like you don't need to initialize
 

4599
01:28:28,320 --> 01:28:30,070
same like you don't need to initialize
any registers because it's like well

4600
01:28:30,070 --> 01:28:30,080
any registers because it's like well
 

4601
01:28:30,080 --> 01:28:32,709
any registers because it's like well
we're going to the beginning so you

4602
01:28:32,709 --> 01:28:32,719
we're going to the beginning so you
 

4603
01:28:32,719 --> 01:28:34,310
we're going to the beginning so you
don't need to assume anything

4604
01:28:34,310 --> 01:28:34,320
don't need to assume anything
 

4605
01:28:34,320 --> 01:28:37,350
don't need to assume anything
yeah the program counter i think is uh

4606
01:28:37,350 --> 01:28:37,360
yeah the program counter i think is uh
 

4607
01:28:37,360 --> 01:28:40,149
yeah the program counter i think is uh
yeah it needs to be initialized to zero

4608
01:28:40,149 --> 01:28:40,159
yeah it needs to be initialized to zero
 

4609
01:28:40,159 --> 01:28:42,950
yeah it needs to be initialized to zero
i don't know what else

4610
01:28:42,950 --> 01:28:42,960
i don't know what else
 

4611
01:28:42,960 --> 01:28:46,229
i don't know what else
maybe it

4612
01:28:46,229 --> 01:28:46,239

 

4613
01:28:46,239 --> 01:28:48,070

i mean probably if we call them it

4614
01:28:48,070 --> 01:28:48,080
i mean probably if we call them it
 

4615
01:28:48,080 --> 01:28:49,830
i mean probably if we call them it
doesn't right because if we already do

4616
01:28:49,830 --> 01:28:49,840
doesn't right because if we already do
 

4617
01:28:49,840 --> 01:28:50,310
doesn't right because if we already do
the

4618
01:28:50,310 --> 01:28:50,320
the
 

4619
01:28:50,320 --> 01:28:52,070
the
call then that's going to set the broken

4620
01:28:52,070 --> 01:28:52,080
call then that's going to set the broken
 

4621
01:28:52,080 --> 01:28:54,149
call then that's going to set the broken
counter yeah yeah so here's the this

4622
01:28:54,149 --> 01:28:54,159
counter yeah yeah so here's the this
 

4623
01:28:54,159 --> 01:28:56,470
counter yeah yeah so here's the this
only happens oh because four copies

4624
01:28:56,470 --> 01:28:56,480
only happens oh because four copies
 

4625
01:28:56,480 --> 01:28:59,189
only happens oh because four copies
fork copies the program counter the user

4626
01:28:59,189 --> 01:28:59,199
fork copies the program counter the user
 

4627
01:28:59,199 --> 01:29:00,470
fork copies the program counter the user
program counter

4628
01:29:00,470 --> 01:29:00,480
program counter
 

4629
01:29:00,480 --> 01:29:01,830
program counter
and so the only time when we're not

4630
01:29:01,830 --> 01:29:01,840
and so the only time when we're not
 

4631
01:29:01,840 --> 01:29:03,189
and so the only time when we're not
doing a fork is for the very first

4632
01:29:03,189 --> 01:29:03,199
doing a fork is for the very first
 

4633
01:29:03,199 --> 01:29:04,229
doing a fork is for the very first
process where

4634
01:29:04,229 --> 01:29:04,239
process where
 

4635
01:29:04,239 --> 01:29:07,350
process where
it's like explicitly deceptive oh a

4636
01:29:07,350 --> 01:29:07,360
it's like explicitly deceptive oh a
 

4637
01:29:07,360 --> 01:29:09,030
it's like explicitly deceptive oh a
stack pointer oh yeah also needs to be

4638
01:29:09,030 --> 01:29:09,040
stack pointer oh yeah also needs to be
 

4639
01:29:09,040 --> 01:29:11,189
stack pointer oh yeah also needs to be
set up

4640
01:29:11,189 --> 01:29:11,199
set up
 

4641
01:29:11,199 --> 01:29:13,350
set up
oh yeah because it's that's epc that's

4642
01:29:13,350 --> 01:29:13,360
oh yeah because it's that's epc that's
 

4643
01:29:13,360 --> 01:29:14,950
oh yeah because it's that's epc that's
not pc that's the one that's going to

4644
01:29:14,950 --> 01:29:14,960
not pc that's the one that's going to
 

4645
01:29:14,960 --> 01:29:16,629
not pc that's the one that's going to
get swapped by the trap

4646
01:29:16,629 --> 01:29:16,639
get swapped by the trap
 

4647
01:29:16,639 --> 01:29:21,750
get swapped by the trap
trampoline yes oh i see

4648
01:29:21,750 --> 01:29:21,760
trampoline yes oh i see
 

4649
01:29:21,760 --> 01:29:23,270
trampoline yes oh i see
because the real pc is actually going to

4650
01:29:23,270 --> 01:29:23,280
because the real pc is actually going to
 

4651
01:29:23,280 --> 01:29:25,910
because the real pc is actually going to
be in trap like inside traveling

4652
01:29:25,910 --> 01:29:25,920
be in trap like inside traveling
 

4653
01:29:25,920 --> 01:29:27,270
be in trap like inside traveling
but then we're going to switch it to

4654
01:29:27,270 --> 01:29:27,280
but then we're going to switch it to
 

4655
01:29:27,280 --> 01:29:29,270
but then we're going to switch it to
jump to there

4656
01:29:29,270 --> 01:29:29,280
jump to there
 

4657
01:29:29,280 --> 01:29:32,790
jump to there
yeah interesting

4658
01:29:32,790 --> 01:29:32,800

 

4659
01:29:32,800 --> 01:29:34,790

uh can i just ask like can you go back

4660
01:29:34,790 --> 01:29:34,800
uh can i just ask like can you go back
 

4661
01:29:34,800 --> 01:29:42,870
uh can i just ask like can you go back
to the alloc proc

4662
01:29:42,870 --> 01:29:42,880

 

4663
01:29:42,880 --> 01:29:46,790

um i think there's a oh no sorry

4664
01:29:46,790 --> 01:29:46,800
um i think there's a oh no sorry
 

4665
01:29:46,800 --> 01:29:49,510
um i think there's a oh no sorry
uh four cred uh there's something there

4666
01:29:49,510 --> 01:29:49,520
uh four cred uh there's something there
 

4667
01:29:49,520 --> 01:29:51,910
uh four cred uh there's something there
that happens i think for the first

4668
01:29:51,910 --> 01:29:51,920
that happens i think for the first
 

4669
01:29:51,920 --> 01:29:53,910
that happens i think for the first
process only

4670
01:29:53,910 --> 01:29:53,920
process only
 

4671
01:29:53,920 --> 01:29:57,189
process only
uh what's this for a first call

4672
01:29:57,189 --> 01:29:57,199
uh what's this for a first call
 

4673
01:29:57,199 --> 01:29:59,110
uh what's this for a first call
i wasn't really sure what happened let's

4674
01:29:59,110 --> 01:29:59,120
i wasn't really sure what happened let's
 

4675
01:29:59,120 --> 01:30:01,430
i wasn't really sure what happened let's
see the file system

4676
01:30:01,430 --> 01:30:01,440
see the file system
 

4677
01:30:01,440 --> 01:30:03,510
see the file system
the file system needs to be initialized

4678
01:30:03,510 --> 01:30:03,520
the file system needs to be initialized
 

4679
01:30:03,520 --> 01:30:05,590
the file system needs to be initialized
and in particular some stuff needs to be

4680
01:30:05,590 --> 01:30:05,600
and in particular some stuff needs to be
 

4681
01:30:05,600 --> 01:30:07,110
and in particular some stuff needs to be
read off the disk

4682
01:30:07,110 --> 01:30:07,120
read off the disk
 

4683
01:30:07,120 --> 01:30:10,629
read off the disk
in order to get the file system going um

4684
01:30:10,629 --> 01:30:10,639
in order to get the file system going um
 

4685
01:30:10,639 --> 01:30:12,229
in order to get the file system going um
like the there's this thing called the

4686
01:30:12,229 --> 01:30:12,239
like the there's this thing called the
 

4687
01:30:12,239 --> 01:30:14,149
like the there's this thing called the
super block which describes like how big

4688
01:30:14,149 --> 01:30:14,159
super block which describes like how big
 

4689
01:30:14,159 --> 01:30:15,830
super block which describes like how big
the file system are is and where the

4690
01:30:15,830 --> 01:30:15,840
the file system are is and where the
 

4691
01:30:15,840 --> 01:30:17,510
the file system are is and where the
various things are in the file system

4692
01:30:17,510 --> 01:30:17,520
various things are in the file system
 

4693
01:30:17,520 --> 01:30:18,629
various things are in the file system
and there's also a

4694
01:30:18,629 --> 01:30:18,639
and there's also a
 

4695
01:30:18,639 --> 01:30:21,189
and there's also a
crash recovery log that needs to be

4696
01:30:21,189 --> 01:30:21,199
crash recovery log that needs to be
 

4697
01:30:21,199 --> 01:30:22,149
crash recovery log that needs to be
replayed

4698
01:30:22,149 --> 01:30:22,159
replayed
 

4699
01:30:22,159 --> 01:30:25,510
replayed
in order to recover from a previous

4700
01:30:25,510 --> 01:30:25,520
in order to recover from a previous
 

4701
01:30:25,520 --> 01:30:28,149
in order to recover from a previous
crash if there was one

4702
01:30:28,149 --> 01:30:28,159
crash if there was one
 

4703
01:30:28,159 --> 01:30:30,629
crash if there was one
but in order to do anything in the file

4704
01:30:30,629 --> 01:30:30,639
but in order to do anything in the file
 

4705
01:30:30,639 --> 01:30:32,390
but in order to do anything in the file
system you need to be able to wait

4706
01:30:32,390 --> 01:30:32,400
system you need to be able to wait
 

4707
01:30:32,400 --> 01:30:35,270
system you need to be able to wait
for disk operations to complete but the

4708
01:30:35,270 --> 01:30:35,280
for disk operations to complete but the
 

4709
01:30:35,280 --> 01:30:37,110
for disk operations to complete but the
way xv6 works

4710
01:30:37,110 --> 01:30:37,120
way xv6 works
 

4711
01:30:37,120 --> 01:30:38,790
way xv6 works
you really can only execute the file

4712
01:30:38,790 --> 01:30:38,800
you really can only execute the file
 

4713
01:30:38,800 --> 01:30:42,950
you really can only execute the file
system code in the context of a process

4714
01:30:42,950 --> 01:30:42,960
system code in the context of a process
 

4715
01:30:42,960 --> 01:30:45,669
system code in the context of a process
in order to like wait for i o and so

4716
01:30:45,669 --> 01:30:45,679
in order to like wait for i o and so
 

4717
01:30:45,679 --> 01:30:46,709
in order to like wait for i o and so
therefore the

4718
01:30:46,709 --> 01:30:46,719
therefore the
 

4719
01:30:46,719 --> 01:30:48,470
therefore the
initialization of the file system has to

4720
01:30:48,470 --> 01:30:48,480
initialization of the file system has to
 

4721
01:30:48,480 --> 01:30:50,470
initialization of the file system has to
be deferred until we the first time we

4722
01:30:50,470 --> 01:30:50,480
be deferred until we the first time we
 

4723
01:30:50,480 --> 01:30:53,110
be deferred until we the first time we
have a process running

4724
01:30:53,110 --> 01:30:53,120
have a process running
 

4725
01:30:53,120 --> 01:30:55,590
have a process running
and that occurs in this very first

4726
01:30:55,590 --> 01:30:55,600
and that occurs in this very first
 

4727
01:30:55,600 --> 01:31:00,390
and that occurs in this very first
process in fork read

4728
01:31:00,390 --> 01:31:00,400

 

4729
01:31:00,400 --> 01:31:02,709

i see and i'm guessing we'll learn more

4730
01:31:02,709 --> 01:31:02,719
i see and i'm guessing we'll learn more
 

4731
01:31:02,719 --> 01:31:03,990
i see and i'm guessing we'll learn more
about this uh

4732
01:31:03,990 --> 01:31:04,000
about this uh
 

4733
01:31:04,000 --> 01:31:07,350
about this uh
later yeah not about this horrible

4734
01:31:07,350 --> 01:31:07,360
later yeah not about this horrible
 

4735
01:31:07,360 --> 01:31:10,950
later yeah not about this horrible
but about uh how file systems work

4736
01:31:10,950 --> 01:31:10,960
but about uh how file systems work
 

4737
01:31:10,960 --> 01:31:13,350
but about uh how file systems work
all right okay well thank you i'm sorry

4738
01:31:13,350 --> 01:31:13,360
all right okay well thank you i'm sorry
 

4739
01:31:13,360 --> 01:31:21,830
all right okay well thank you i'm sorry
for holding off the oh

4740
01:31:21,830 --> 01:31:21,840

 

4741
01:31:21,840 --> 01:31:23,350

sorry is that going to be the in that

4742
01:31:23,350 --> 01:31:23,360
sorry is that going to be the in that
 

4743
01:31:23,360 --> 01:31:25,270
sorry is that going to be the in that
process when this thing

4744
01:31:25,270 --> 01:31:25,280
process when this thing
 

4745
01:31:25,280 --> 01:31:28,320
process when this thing
is executed

