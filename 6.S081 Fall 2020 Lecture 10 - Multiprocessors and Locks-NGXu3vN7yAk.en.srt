1
00:00:00,080 --> 00:00:02,070

valid address yeah he had to be not so

2
00:00:02,070 --> 00:00:02,080
valid address yeah he had to be not so
 

3
00:00:02,080 --> 00:00:06,869
valid address yeah he had to be not so
good

4
00:00:06,869 --> 00:00:06,879

 

5
00:00:06,879 --> 00:00:10,629

good how about erica how's the

6
00:00:10,629 --> 00:00:10,639
good how about erica how's the
 

7
00:00:10,639 --> 00:00:13,110
good how about erica how's the
lazy life for you um i also thought it

8
00:00:13,110 --> 00:00:13,120
lazy life for you um i also thought it
 

9
00:00:13,120 --> 00:00:13,669
lazy life for you um i also thought it
was okay

10
00:00:13,669 --> 00:00:13,679
was okay
 

11
00:00:13,679 --> 00:00:15,990
was okay
and um i also had a bug with the coffee

12
00:00:15,990 --> 00:00:16,000
and um i also had a bug with the coffee
 

13
00:00:16,000 --> 00:00:17,590
and um i also had a bug with the coffee
and coffee app but uh

14
00:00:17,590 --> 00:00:17,600
and coffee app but uh
 

15
00:00:17,600 --> 00:00:20,870
and coffee app but uh
got that result so yeah yeah i think

16
00:00:20,870 --> 00:00:20,880
got that result so yeah yeah i think
 

17
00:00:20,880 --> 00:00:21,670
got that result so yeah yeah i think
it's one of those

18
00:00:21,670 --> 00:00:21,680
it's one of those
 

19
00:00:21,680 --> 00:00:22,950
it's one of those
tricky cases that you might not think

20
00:00:22,950 --> 00:00:22,960
tricky cases that you might not think
 

21
00:00:22,960 --> 00:00:26,310
tricky cases that you might not think
about when you start programming

22
00:00:26,310 --> 00:00:26,320
about when you start programming
 

23
00:00:26,320 --> 00:00:28,830
about when you start programming
but luckily user tests will find it for

24
00:00:28,830 --> 00:00:28,840
but luckily user tests will find it for
 

25
00:00:28,840 --> 00:00:34,150
but luckily user tests will find it for
you

26
00:00:34,150 --> 00:00:34,160

 

27
00:00:34,160 --> 00:00:37,510

caroline ortega

28
00:00:37,510 --> 00:00:37,520
caroline ortega
 

29
00:00:37,520 --> 00:00:39,590
caroline ortega
the lab is going good um i haven't

30
00:00:39,590 --> 00:00:39,600
the lab is going good um i haven't
 

31
00:00:39,600 --> 00:00:42,950
the lab is going good um i haven't
finished yet actually

32
00:00:42,950 --> 00:00:42,960

 

33
00:00:42,960 --> 00:00:52,470

all right so worry about copying i guess

34
00:00:52,470 --> 00:00:52,480

 

35
00:00:52,480 --> 00:00:56,229

how about kendall garner

36
00:00:56,229 --> 00:00:56,239

 

37
00:00:56,239 --> 00:00:59,430

i think for the most part it was

38
00:00:59,430 --> 00:00:59,440
i think for the most part it was
 

39
00:00:59,440 --> 00:01:02,229
i think for the most part it was
not too bad for me probably the weirdest

40
00:01:02,229 --> 00:01:02,239
not too bad for me probably the weirdest
 

41
00:01:02,239 --> 00:01:04,149
not too bad for me probably the weirdest
part was just trying to figure out when

42
00:01:04,149 --> 00:01:04,159
part was just trying to figure out when
 

43
00:01:04,159 --> 00:01:04,789
part was just trying to figure out when
it went

44
00:01:04,789 --> 00:01:04,799
it went
 

45
00:01:04,799 --> 00:01:08,789
it went
below bounds of the stack

46
00:01:08,789 --> 00:01:08,799
below bounds of the stack
 

47
00:01:08,799 --> 00:01:16,870
below bounds of the stack
ah yeah into the guard page basically

48
00:01:16,870 --> 00:01:16,880

 

49
00:01:16,880 --> 00:01:20,070

good okay well

50
00:01:20,070 --> 00:01:20,080
good okay well
 

51
00:01:20,080 --> 00:01:23,429
good okay well
uh so it's about time to get started uh

52
00:01:23,429 --> 00:01:23,439
uh so it's about time to get started uh
 

53
00:01:23,439 --> 00:01:26,710
uh so it's about time to get started uh
so welcome to the next lecture in

54
00:01:26,710 --> 00:01:26,720
so welcome to the next lecture in
 

55
00:01:26,720 --> 00:01:29,270
so welcome to the next lecture in
s081 wherever you are in whatever time

56
00:01:29,270 --> 00:01:29,280
s081 wherever you are in whatever time
 

57
00:01:29,280 --> 00:01:31,429
s081 wherever you are in whatever time
zone

58
00:01:31,429 --> 00:01:31,439
zone
 

59
00:01:31,439 --> 00:01:34,710
zone
so today's lecture is about locks

60
00:01:34,710 --> 00:01:34,720
so today's lecture is about locks
 

61
00:01:34,720 --> 00:01:36,789
so today's lecture is about locks
and you probably have seen locks in

62
00:01:36,789 --> 00:01:36,799
and you probably have seen locks in
 

63
00:01:36,799 --> 00:01:38,630
and you probably have seen locks in
previous classes

64
00:01:38,630 --> 00:01:38,640
previous classes
 

65
00:01:38,640 --> 00:01:40,550
previous classes
or at least i've been in touch with them

66
00:01:40,550 --> 00:01:40,560
or at least i've been in touch with them
 

67
00:01:40,560 --> 00:01:42,069
or at least i've been in touch with them
in some way or another uh

68
00:01:42,069 --> 00:01:42,079
in some way or another uh
 

69
00:01:42,079 --> 00:01:43,510
in some way or another uh
and so this lecture's a little bit of a

70
00:01:43,510 --> 00:01:43,520
and so this lecture's a little bit of a
 

71
00:01:43,520 --> 00:01:45,429
and so this lecture's a little bit of a
conceptual lecture uh may overlap a

72
00:01:45,429 --> 00:01:45,439
conceptual lecture uh may overlap a
 

73
00:01:45,439 --> 00:01:47,030
conceptual lecture uh may overlap a
little bit with some uh

74
00:01:47,030 --> 00:01:47,040
little bit with some uh
 

75
00:01:47,040 --> 00:01:48,630
little bit with some uh
things you've seen before for locks but

76
00:01:48,630 --> 00:01:48,640
things you've seen before for locks but
 

77
00:01:48,640 --> 00:01:50,630
things you've seen before for locks but
we'll uh have a little bit more of a

78
00:01:50,630 --> 00:01:50,640
we'll uh have a little bit more of a
 

79
00:01:50,640 --> 00:01:52,469
we'll uh have a little bit more of a
kernel and os focus

80
00:01:52,469 --> 00:01:52,479
kernel and os focus
 

81
00:01:52,479 --> 00:01:55,590
kernel and os focus
and that changes a couple things um so

82
00:01:55,590 --> 00:01:55,600
and that changes a couple things um so
 

83
00:01:55,600 --> 00:01:57,429
and that changes a couple things um so
just to get started you know let's just

84
00:01:57,429 --> 00:01:57,439
just to get started you know let's just
 

85
00:01:57,439 --> 00:01:58,310
just to get started you know let's just
remind ourselves

86
00:01:58,310 --> 00:01:58,320
remind ourselves
 

87
00:01:58,320 --> 00:02:01,749
remind ourselves
uh why we need locks um you know and i

88
00:02:01,749 --> 00:02:01,759
uh why we need locks um you know and i
 

89
00:02:01,759 --> 00:02:03,030
uh why we need locks um you know and i
guess the starting point is really that

90
00:02:03,030 --> 00:02:03,040
guess the starting point is really that
 

91
00:02:03,040 --> 00:02:05,109
guess the starting point is really that
applications

92
00:02:05,109 --> 00:02:05,119
applications
 

93
00:02:05,119 --> 00:02:12,229
applications
uh want to use multiple cores

94
00:02:12,229 --> 00:02:12,239

 

95
00:02:12,239 --> 00:02:13,510

they want to use multiple cores to get

96
00:02:13,510 --> 00:02:13,520
they want to use multiple cores to get
 

97
00:02:13,520 --> 00:02:16,869
they want to use multiple cores to get
performance

98
00:02:16,869 --> 00:02:16,879

 

99
00:02:16,879 --> 00:02:20,070

and so if an application actually

100
00:02:20,070 --> 00:02:20,080
and so if an application actually
 

101
00:02:20,080 --> 00:02:22,070
and so if an application actually
wants to do runs on multiple cores and

102
00:02:22,070 --> 00:02:22,080
wants to do runs on multiple cores and
 

103
00:02:22,080 --> 00:02:23,589
wants to do runs on multiple cores and
presumably once the in

104
00:02:23,589 --> 00:02:23,599
presumably once the in
 

105
00:02:23,599 --> 00:02:24,710
presumably once the in
this course or the parts of the

106
00:02:24,710 --> 00:02:24,720
this course or the parts of the
 

107
00:02:24,720 --> 00:02:26,630
this course or the parts of the
application may invoke system calls

108
00:02:26,630 --> 00:02:26,640
application may invoke system calls
 

109
00:02:26,640 --> 00:02:30,150
application may invoke system calls
and so the kernel must be able to handle

110
00:02:30,150 --> 00:02:30,160
and so the kernel must be able to handle
 

111
00:02:30,160 --> 00:02:45,430
and so the kernel must be able to handle
uh you must handle parallel system calls

112
00:02:45,430 --> 00:02:45,440

 

113
00:02:45,440 --> 00:02:47,830

uh and that means that you know if these

114
00:02:47,830 --> 00:02:47,840
uh and that means that you know if these
 

115
00:02:47,840 --> 00:02:49,750
uh and that means that you know if these
system calls run in parallel on

116
00:02:49,750 --> 00:02:49,760
system calls run in parallel on
 

117
00:02:49,760 --> 00:02:51,270
system calls run in parallel on
different course

118
00:02:51,270 --> 00:02:51,280
different course
 

119
00:02:51,280 --> 00:02:54,229
different course
they may actually access shared data

120
00:02:54,229 --> 00:02:54,239
they may actually access shared data
 

121
00:02:54,239 --> 00:02:58,229
they may actually access shared data
structures

122
00:02:58,229 --> 00:02:58,239

 

123
00:02:58,239 --> 00:03:04,309

the instructions in parallel

124
00:03:04,309 --> 00:03:04,319
the instructions in parallel
 

125
00:03:04,319 --> 00:03:06,790
the instructions in parallel
and as you've seen by now actually x6

126
00:03:06,790 --> 00:03:06,800
and as you've seen by now actually x6
 

127
00:03:06,800 --> 00:03:08,149
and as you've seen by now actually x6
has quite a number of

128
00:03:08,149 --> 00:03:08,159
has quite a number of
 

129
00:03:08,159 --> 00:03:09,589
has quite a number of
you know shared data structures you know

130
00:03:09,589 --> 00:03:09,599
you know shared data structures you know
 

131
00:03:09,599 --> 00:03:11,990
you know shared data structures you know
whether it's the proc structures or

132
00:03:11,990 --> 00:03:12,000
whether it's the proc structures or
 

133
00:03:12,000 --> 00:03:16,070
whether it's the proc structures or
uh you know ticks or you know

134
00:03:16,070 --> 00:03:16,080
uh you know ticks or you know
 

135
00:03:16,080 --> 00:03:17,830
uh you know ticks or you know
later we'll see the buffer cache you

136
00:03:17,830 --> 00:03:17,840
later we'll see the buffer cache you
 

137
00:03:17,840 --> 00:03:19,350
later we'll see the buffer cache you
know there's actually a ton of shared

138
00:03:19,350 --> 00:03:19,360
know there's actually a ton of shared
 

139
00:03:19,360 --> 00:03:20,949
know there's actually a ton of shared
data structures

140
00:03:20,949 --> 00:03:20,959
data structures
 

141
00:03:20,959 --> 00:03:24,390
data structures
um and so if you have parallaxis you

142
00:03:24,390 --> 00:03:24,400
um and so if you have parallaxis you
 

143
00:03:24,400 --> 00:03:25,190
um and so if you have parallaxis you
know through

144
00:03:25,190 --> 00:03:25,200
know through
 

145
00:03:25,200 --> 00:03:27,990
know through
a data structure and one of the you know

146
00:03:27,990 --> 00:03:28,000
a data structure and one of the you know
 

147
00:03:28,000 --> 00:03:29,350
a data structure and one of the you know
course is a writer and the other course

148
00:03:29,350 --> 00:03:29,360
course is a writer and the other course
 

149
00:03:29,360 --> 00:03:30,390
course is a writer and the other course
is a reader

150
00:03:30,390 --> 00:03:30,400
is a reader
 

151
00:03:30,400 --> 00:03:32,390
is a reader
uh you know we need basically blocks you

152
00:03:32,390 --> 00:03:32,400
uh you know we need basically blocks you
 

153
00:03:32,400 --> 00:03:34,149
uh you know we need basically blocks you
know to coordinate these updates to the

154
00:03:34,149 --> 00:03:34,159
know to coordinate these updates to the
 

155
00:03:34,159 --> 00:03:36,070
know to coordinate these updates to the
shared data structure so that

156
00:03:36,070 --> 00:03:36,080
shared data structure so that
 

157
00:03:36,080 --> 00:03:38,789
shared data structure so that
readers see a consistent view so we'll

158
00:03:38,789 --> 00:03:38,799
readers see a consistent view so we'll
 

159
00:03:38,799 --> 00:03:41,030
readers see a consistent view so we'll
need logs

160
00:03:41,030 --> 00:03:41,040
need logs
 

161
00:03:41,040 --> 00:03:43,990
need logs
you know to you know for controlled

162
00:03:43,990 --> 00:03:44,000
you know to you know for controlled
 

163
00:03:44,000 --> 00:03:45,430
you know to you know for controlled
sharing

164
00:03:45,430 --> 00:03:45,440
sharing
 

165
00:03:45,440 --> 00:03:52,949
sharing
or for correct sharing

166
00:03:52,949 --> 00:03:52,959

 

167
00:03:52,959 --> 00:03:54,550

now this is in some sense a little bit

168
00:03:54,550 --> 00:03:54,560
now this is in some sense a little bit
 

169
00:03:54,560 --> 00:03:56,149
now this is in some sense a little bit
of a bummer

170
00:03:56,149 --> 00:03:56,159
of a bummer
 

171
00:03:56,159 --> 00:03:59,750
of a bummer
because you know we want this parallexis

172
00:03:59,750 --> 00:03:59,760
because you know we want this parallexis
 

173
00:03:59,760 --> 00:04:02,070
because you know we want this parallexis
we want to run multiple uh consistent

174
00:04:02,070 --> 00:04:02,080
we want to run multiple uh consistent
 

175
00:04:02,080 --> 00:04:02,789
we want to run multiple uh consistent
calls in

176
00:04:02,789 --> 00:04:02,799
calls in
 

177
00:04:02,799 --> 00:04:06,149
calls in
uh in parallel on a different course

178
00:04:06,149 --> 00:04:06,159
uh in parallel on a different course
 

179
00:04:06,159 --> 00:04:08,390
uh in parallel on a different course
but unfortunately you know if they share

180
00:04:08,390 --> 00:04:08,400
but unfortunately you know if they share
 

181
00:04:08,400 --> 00:04:09,990
but unfortunately you know if they share
the data structures you know they need

182
00:04:09,990 --> 00:04:10,000
the data structures you know they need
 

183
00:04:10,000 --> 00:04:12,390
the data structures you know they need
locks and locks no serialize

184
00:04:12,390 --> 00:04:12,400
locks and locks no serialize
 

185
00:04:12,400 --> 00:04:14,949
locks and locks no serialize
basically operations and so in fact you

186
00:04:14,949 --> 00:04:14,959
basically operations and so in fact you
 

187
00:04:14,959 --> 00:04:16,390
basically operations and so in fact you
know locks in the end can limit

188
00:04:16,390 --> 00:04:16,400
know locks in the end can limit
 

189
00:04:16,400 --> 00:04:27,189
know locks in the end can limit
performance

190
00:04:27,189 --> 00:04:27,199

 

191
00:04:27,199 --> 00:04:28,310

and so we're sort of in a tricky

192
00:04:28,310 --> 00:04:28,320
and so we're sort of in a tricky
 

193
00:04:28,320 --> 00:04:30,150
and so we're sort of in a tricky
situation where you know for correctness

194
00:04:30,150 --> 00:04:30,160
situation where you know for correctness
 

195
00:04:30,160 --> 00:04:31,030
situation where you know for correctness
we need locks

196
00:04:31,030 --> 00:04:31,040
we need locks
 

197
00:04:31,040 --> 00:04:33,030
we need locks
you know but for performance uh they're

198
00:04:33,030 --> 00:04:33,040
you know but for performance uh they're
 

199
00:04:33,040 --> 00:04:34,310
you know but for performance uh they're
not good

200
00:04:34,310 --> 00:04:34,320
not good
 

201
00:04:34,320 --> 00:04:36,310
not good
uh but you know sort of it's going to be

202
00:04:36,310 --> 00:04:36,320
uh but you know sort of it's going to be
 

203
00:04:36,320 --> 00:04:37,749
uh but you know sort of it's going to be
sort of a fact of life and

204
00:04:37,749 --> 00:04:37,759
sort of a fact of life and
 

205
00:04:37,759 --> 00:04:40,310
sort of a fact of life and
uh you know we'll see what we can do

206
00:04:40,310 --> 00:04:40,320
uh you know we'll see what we can do
 

207
00:04:40,320 --> 00:04:41,510
uh you know we'll see what we can do
about it

208
00:04:41,510 --> 00:04:41,520
about it
 

209
00:04:41,520 --> 00:04:43,510
about it
but that's sort of the top-level uh

210
00:04:43,510 --> 00:04:43,520
but that's sort of the top-level uh
 

211
00:04:43,520 --> 00:04:44,710
but that's sort of the top-level uh
scenario here

212
00:04:44,710 --> 00:04:44,720
scenario here
 

213
00:04:44,720 --> 00:04:47,110
scenario here
and you know maybe just to really you

214
00:04:47,110 --> 00:04:47,120
and you know maybe just to really you
 

215
00:04:47,120 --> 00:04:47,830
and you know maybe just to really you
know uh

216
00:04:47,830 --> 00:04:47,840
know uh
 

217
00:04:47,840 --> 00:04:49,590
know uh
bring this point why do applications

218
00:04:49,590 --> 00:04:49,600
bring this point why do applications
 

219
00:04:49,600 --> 00:04:50,870
bring this point why do applications
actually want to uh

220
00:04:50,870 --> 00:04:50,880
actually want to uh
 

221
00:04:50,880 --> 00:04:52,629
actually want to uh
multiple course and now that really has

222
00:04:52,629 --> 00:04:52,639
multiple course and now that really has
 

223
00:04:52,639 --> 00:04:54,629
multiple course and now that really has
to do with your technology trends you

224
00:04:54,629 --> 00:04:54,639
to do with your technology trends you
 

225
00:04:54,639 --> 00:04:55,830
to do with your technology trends you
know over the last you know a couple

226
00:04:55,830 --> 00:04:55,840
know over the last you know a couple
 

227
00:04:55,840 --> 00:04:56,790
know over the last you know a couple
decades

228
00:04:56,790 --> 00:04:56,800
decades
 

229
00:04:56,800 --> 00:04:58,150
decades
uh and you know there's sort of this

230
00:04:58,150 --> 00:04:58,160
uh and you know there's sort of this
 

231
00:04:58,160 --> 00:05:00,070
uh and you know there's sort of this
classic graph that sort of make these

232
00:05:00,070 --> 00:05:00,080
classic graph that sort of make these
 

233
00:05:00,080 --> 00:05:00,710
classic graph that sort of make these
points

234
00:05:00,710 --> 00:05:00,720
points
 

235
00:05:00,720 --> 00:05:02,629
points
uh so let me you know pull up one of

236
00:05:02,629 --> 00:05:02,639
uh so let me you know pull up one of
 

237
00:05:02,639 --> 00:05:03,590
uh so let me you know pull up one of
them there's a little bit of a

238
00:05:03,590 --> 00:05:03,600
them there's a little bit of a
 

239
00:05:03,600 --> 00:05:04,629
them there's a little bit of a
complicated graph

240
00:05:04,629 --> 00:05:04,639
complicated graph
 

241
00:05:04,639 --> 00:05:08,629
complicated graph
uh but you know there's years on the

242
00:05:08,629 --> 00:05:08,639
uh but you know there's years on the
 

243
00:05:08,639 --> 00:05:12,150
uh but you know there's years on the
x-axis and y-axis there's you know units

244
00:05:12,150 --> 00:05:12,160
x-axis and y-axis there's you know units
 

245
00:05:12,160 --> 00:05:13,430
x-axis and y-axis there's you know units
uh they're different types of units

246
00:05:13,430 --> 00:05:13,440
uh they're different types of units
 

247
00:05:13,440 --> 00:05:14,950
uh they're different types of units
depending on you know which line we're

248
00:05:14,950 --> 00:05:14,960
depending on you know which line we're
 

249
00:05:14,960 --> 00:05:16,070
depending on you know which line we're
looking at

250
00:05:16,070 --> 00:05:16,080
looking at
 

251
00:05:16,080 --> 00:05:17,670
looking at
uh but the thing that really to look at

252
00:05:17,670 --> 00:05:17,680
uh but the thing that really to look at
 

253
00:05:17,680 --> 00:05:19,749
uh but the thing that really to look at
is that uh

254
00:05:19,749 --> 00:05:19,759
is that uh
 

255
00:05:19,759 --> 00:05:21,990
is that uh
what has happened in the last couple

256
00:05:21,990 --> 00:05:22,000
what has happened in the last couple
 

257
00:05:22,000 --> 00:05:23,990
what has happened in the last couple
years is that over the last decades is

258
00:05:23,990 --> 00:05:24,000
years is that over the last decades is
 

259
00:05:24,000 --> 00:05:24,200
years is that over the last decades is
that

260
00:05:24,200 --> 00:05:24,210
that
 

261
00:05:24,210 --> 00:05:25,430
that
[Music]

262
00:05:25,430 --> 00:05:25,440
[Music]
 

263
00:05:25,440 --> 00:05:28,070
[Music]
starting in the 2000s that the clock

264
00:05:28,070 --> 00:05:28,080
starting in the 2000s that the clock
 

265
00:05:28,080 --> 00:05:29,189
starting in the 2000s that the clock
frequency

266
00:05:29,189 --> 00:05:29,199
frequency
 

267
00:05:29,199 --> 00:05:32,150
frequency
hasn't really increased anymore uh so

268
00:05:32,150 --> 00:05:32,160
hasn't really increased anymore uh so
 

269
00:05:32,160 --> 00:05:33,510
hasn't really increased anymore uh so
basically this has you know

270
00:05:33,510 --> 00:05:33,520
basically this has you know
 

271
00:05:33,520 --> 00:05:36,950
basically this has you know
plateaued or constant

272
00:05:36,950 --> 00:05:36,960
plateaued or constant
 

273
00:05:36,960 --> 00:05:40,469
plateaued or constant
um and as a result you know basically

274
00:05:40,469 --> 00:05:40,479
um and as a result you know basically
 

275
00:05:40,479 --> 00:05:41,029
um and as a result you know basically
single

276
00:05:41,029 --> 00:05:41,039
single
 

277
00:05:41,039 --> 00:05:43,670
single
threat performance of the core also you

278
00:05:43,670 --> 00:05:43,680
threat performance of the core also you
 

279
00:05:43,680 --> 00:05:44,870
threat performance of the core also you
know basically

280
00:05:44,870 --> 00:05:44,880
know basically
 

281
00:05:44,880 --> 00:05:46,870
know basically
uh has reached you know sort of a limit

282
00:05:46,870 --> 00:05:46,880
uh has reached you know sort of a limit
 

283
00:05:46,880 --> 00:05:51,990
uh has reached you know sort of a limit
you know or plotted

284
00:05:51,990 --> 00:05:52,000
you know or plotted
 

285
00:05:52,000 --> 00:05:54,070
you know or plotted
uh and yet on the other hand given the

286
00:05:54,070 --> 00:05:54,080
uh and yet on the other hand given the
 

287
00:05:54,080 --> 00:05:56,150
uh and yet on the other hand given the
minimum course of the number transistors

288
00:05:56,150 --> 00:05:56,160
minimum course of the number transistors
 

289
00:05:56,160 --> 00:05:57,990
minimum course of the number transistors
still has been increasing over the same

290
00:05:57,990 --> 00:05:58,000
still has been increasing over the same
 

291
00:05:58,000 --> 00:05:59,990
still has been increasing over the same
time period so if you can't like you

292
00:05:59,990 --> 00:06:00,000
time period so if you can't like you
 

293
00:06:00,000 --> 00:06:01,670
time period so if you can't like you
know use transistors to make a single

294
00:06:01,670 --> 00:06:01,680
know use transistors to make a single
 

295
00:06:01,680 --> 00:06:03,270
know use transistors to make a single
core sort of run faster

296
00:06:03,270 --> 00:06:03,280
core sort of run faster
 

297
00:06:03,280 --> 00:06:04,629
core sort of run faster
uh you know the only other option

298
00:06:04,629 --> 00:06:04,639
uh you know the only other option
 

299
00:06:04,639 --> 00:06:05,670
uh you know the only other option
basically have is you know i have

300
00:06:05,670 --> 00:06:05,680
basically have is you know i have
 

301
00:06:05,680 --> 00:06:07,510
basically have is you know i have
multiple cores and you see indeed that's

302
00:06:07,510 --> 00:06:07,520
multiple cores and you see indeed that's
 

303
00:06:07,520 --> 00:06:09,590
multiple cores and you see indeed that's
starting from 2001 or from the early

304
00:06:09,590 --> 00:06:09,600
starting from 2001 or from the early
 

305
00:06:09,600 --> 00:06:11,270
starting from 2001 or from the early
2000s you know the number of course has

306
00:06:11,270 --> 00:06:11,280
2000s you know the number of course has
 

307
00:06:11,280 --> 00:06:13,350
2000s you know the number of course has
gone up

308
00:06:13,350 --> 00:06:13,360
gone up
 

309
00:06:13,360 --> 00:06:14,710
gone up
and so there's an application once more

310
00:06:14,710 --> 00:06:14,720
and so there's an application once more
 

311
00:06:14,720 --> 00:06:16,469
and so there's an application once more
performance you know

312
00:06:16,469 --> 00:06:16,479
performance you know
 

313
00:06:16,479 --> 00:06:18,469
performance you know
uh you know can rely on the single core

314
00:06:18,469 --> 00:06:18,479
uh you know can rely on the single core
 

315
00:06:18,479 --> 00:06:20,150
uh you know can rely on the single core
it basically has to explode multiple

316
00:06:20,150 --> 00:06:20,160
it basically has to explode multiple
 

317
00:06:20,160 --> 00:06:21,029
it basically has to explode multiple
cores

318
00:06:21,029 --> 00:06:21,039
cores
 

319
00:06:21,039 --> 00:06:22,950
cores
and also this means if an application is

320
00:06:22,950 --> 00:06:22,960
and also this means if an application is
 

321
00:06:22,960 --> 00:06:24,790
and also this means if an application is
you know kernel intensive os

322
00:06:24,790 --> 00:06:24,800
you know kernel intensive os
 

323
00:06:24,800 --> 00:06:28,550
you know kernel intensive os
intensive you know whereas like a server

324
00:06:28,550 --> 00:06:28,560
intensive you know whereas like a server
 

325
00:06:28,560 --> 00:06:29,670
intensive you know whereas like a server
then that means that the operating

326
00:06:29,670 --> 00:06:29,680
then that means that the operating
 

327
00:06:29,680 --> 00:06:31,990
then that means that the operating
system also has to be

328
00:06:31,990 --> 00:06:32,000
system also has to be
 

329
00:06:32,000 --> 00:06:34,790
system also has to be
run efficiently on multiple cores and so

330
00:06:34,790 --> 00:06:34,800
run efficiently on multiple cores and so
 

331
00:06:34,800 --> 00:06:36,390
run efficiently on multiple cores and so
that's the main reason

332
00:06:36,390 --> 00:06:36,400
that's the main reason
 

333
00:06:36,400 --> 00:06:37,909
that's the main reason
uh you know that we're sort of very

334
00:06:37,909 --> 00:06:37,919
uh you know that we're sort of very
 

335
00:06:37,919 --> 00:06:39,830
uh you know that we're sort of very
interested in

336
00:06:39,830 --> 00:06:39,840
interested in
 

337
00:06:39,840 --> 00:06:41,909
interested in
you know parallelism you know within the

338
00:06:41,909 --> 00:06:41,919
you know parallelism you know within the
 

339
00:06:41,919 --> 00:06:45,029
you know parallelism you know within the
in the kernel

340
00:06:45,029 --> 00:06:45,039

 

341
00:06:45,039 --> 00:06:51,909

any questions about this

342
00:06:51,909 --> 00:06:51,919

 

343
00:06:51,919 --> 00:06:53,430

okay i've seen i i assume that you've

344
00:06:53,430 --> 00:06:53,440
okay i've seen i i assume that you've
 

345
00:06:53,440 --> 00:06:55,110
okay i've seen i i assume that you've
seen some of these graphs uh before but

346
00:06:55,110 --> 00:06:55,120
seen some of these graphs uh before but
 

347
00:06:55,120 --> 00:06:55,670
seen some of these graphs uh before but
it's

348
00:06:55,670 --> 00:06:55,680
it's
 

349
00:06:55,680 --> 00:06:56,950
it's
good to remind us you know what the

350
00:06:56,950 --> 00:06:56,960
good to remind us you know what the
 

351
00:06:56,960 --> 00:06:59,510
good to remind us you know what the
starting point of all the discussion is

352
00:06:59,510 --> 00:06:59,520
starting point of all the discussion is
 

353
00:06:59,520 --> 00:07:02,870
starting point of all the discussion is
um so why logs

354
00:07:02,870 --> 00:07:02,880
um so why logs
 

355
00:07:02,880 --> 00:07:04,390
um so why logs
you know already hinted at this you know

356
00:07:04,390 --> 00:07:04,400
you know already hinted at this you know
 

357
00:07:04,400 --> 00:07:06,710
you know already hinted at this you know
they're there for uh correctness

358
00:07:06,710 --> 00:07:06,720
they're there for uh correctness
 

359
00:07:06,720 --> 00:07:09,670
they're there for uh correctness
uh you know if we have you know readers

360
00:07:09,670 --> 00:07:09,680
uh you know if we have you know readers
 

361
00:07:09,680 --> 00:07:10,710
uh you know if we have you know readers
and writers you know

362
00:07:10,710 --> 00:07:10,720
and writers you know
 

363
00:07:10,720 --> 00:07:12,870
and writers you know
exiting a shared data structure and you

364
00:07:12,870 --> 00:07:12,880
exiting a shared data structure and you
 

365
00:07:12,880 --> 00:07:14,230
exiting a shared data structure and you
know the thing that goes wrong

366
00:07:14,230 --> 00:07:14,240
know the thing that goes wrong
 

367
00:07:14,240 --> 00:07:23,350
know the thing that goes wrong
is that we want to avoid race conditions

368
00:07:23,350 --> 00:07:23,360

 

369
00:07:23,360 --> 00:07:25,430

so if you don't have locks you know we

370
00:07:25,430 --> 00:07:25,440
so if you don't have locks you know we
 

371
00:07:25,440 --> 00:07:26,550
so if you don't have locks you know we
run the risk you know

372
00:07:26,550 --> 00:07:26,560
run the risk you know
 

373
00:07:26,560 --> 00:07:27,830
run the risk you know
we have shear data structures that we're

374
00:07:27,830 --> 00:07:27,840
we have shear data structures that we're
 

375
00:07:27,840 --> 00:07:30,870
we have shear data structures that we're
going to have uh

376
00:07:30,870 --> 00:07:30,880
going to have uh
 

377
00:07:30,880 --> 00:07:32,629
going to have uh
we're going to have raised detect

378
00:07:32,629 --> 00:07:32,639
we're going to have raised detect
 

379
00:07:32,639 --> 00:07:34,629
we're going to have raised detect
conditions and it turns out that the

380
00:07:34,629 --> 00:07:34,639
conditions and it turns out that the
 

381
00:07:34,639 --> 00:07:35,749
conditions and it turns out that the
race conditions are

382
00:07:35,749 --> 00:07:35,759
race conditions are
 

383
00:07:35,759 --> 00:07:39,029
race conditions are
uh pretty annoying um and so just

384
00:07:39,029 --> 00:07:39,039
uh pretty annoying um and so just
 

385
00:07:39,039 --> 00:07:40,469
uh pretty annoying um and so just
first can we get a little bit of sense

386
00:07:40,469 --> 00:07:40,479
first can we get a little bit of sense
 

387
00:07:40,479 --> 00:07:43,110
first can we get a little bit of sense
of what it actually is let's look at the

388
00:07:43,110 --> 00:07:43,120
of what it actually is let's look at the
 

389
00:07:43,120 --> 00:07:45,189
of what it actually is let's look at the
let's just let's create a race condition

390
00:07:45,189 --> 00:07:45,199
let's just let's create a race condition
 

391
00:07:45,199 --> 00:07:46,309
let's just let's create a race condition
in xv6 and

392
00:07:46,309 --> 00:07:46,319
in xv6 and
 

393
00:07:46,319 --> 00:07:47,990
in xv6 and
sort of see how it actually shows up and

394
00:07:47,990 --> 00:07:48,000
sort of see how it actually shows up and
 

395
00:07:48,000 --> 00:07:49,589
sort of see how it actually shows up and
then understand like look what actually

396
00:07:49,589 --> 00:07:49,599
then understand like look what actually
 

397
00:07:49,599 --> 00:07:51,189
then understand like look what actually
happened

398
00:07:51,189 --> 00:07:51,199
happened
 

399
00:07:51,199 --> 00:07:54,390
happened
uh so here's uh

400
00:07:54,390 --> 00:07:54,400
uh so here's uh
 

401
00:07:54,400 --> 00:07:58,629
uh so here's uh
our function k3 uh in calc.c you know so

402
00:07:58,629 --> 00:07:58,639
our function k3 uh in calc.c you know so
 

403
00:07:58,639 --> 00:08:00,469
our function k3 uh in calc.c you know so
this is the function that frees

404
00:08:00,469 --> 00:08:00,479
this is the function that frees
 

405
00:08:00,479 --> 00:08:02,070
this is the function that frees
after you free page it puts it on the

406
00:08:02,070 --> 00:08:02,080
after you free page it puts it on the
 

407
00:08:02,080 --> 00:08:03,589
after you free page it puts it on the
free list you know the

408
00:08:03,589 --> 00:08:03,599
free list you know the
 

409
00:08:03,599 --> 00:08:05,350
free list you know the
kernel has a very simple data structure

410
00:08:05,350 --> 00:08:05,360
kernel has a very simple data structure
 

411
00:08:05,360 --> 00:08:07,589
kernel has a very simple data structure
to keep the free list of all three pages

412
00:08:07,589 --> 00:08:07,599
to keep the free list of all three pages
 

413
00:08:07,599 --> 00:08:09,510
to keep the free list of all three pages
uh so that one calendar needs a page

414
00:08:09,510 --> 00:08:09,520
uh so that one calendar needs a page
 

415
00:08:09,520 --> 00:08:10,629
uh so that one calendar needs a page
that actually can grab it from the free

416
00:08:10,629 --> 00:08:10,639
that actually can grab it from the free
 

417
00:08:10,639 --> 00:08:11,589
that actually can grab it from the free
glitch

418
00:08:11,589 --> 00:08:11,599
glitch
 

419
00:08:11,599 --> 00:08:14,710
glitch
you see here the uh

420
00:08:14,710 --> 00:08:14,720
you see here the uh
 

421
00:08:14,720 --> 00:08:18,430
you see here the uh
allocation has one uh the the

422
00:08:18,430 --> 00:08:18,440
allocation has one uh the the
 

423
00:08:18,440 --> 00:08:21,029
allocation has one uh the the
the memory allocator has one lock came

424
00:08:21,029 --> 00:08:21,039
the memory allocator has one lock came
 

425
00:08:21,039 --> 00:08:21,990
the memory allocator has one lock came
in lock

426
00:08:21,990 --> 00:08:22,000
in lock
 

427
00:08:22,000 --> 00:08:24,309
in lock
and uh here it actually updates the free

428
00:08:24,309 --> 00:08:24,319
and uh here it actually updates the free
 

429
00:08:24,319 --> 00:08:25,110
and uh here it actually updates the free
list

430
00:08:25,110 --> 00:08:25,120
list
 

431
00:08:25,120 --> 00:08:27,270
list
uh within page that just has been

432
00:08:27,270 --> 00:08:27,280
uh within page that just has been
 

433
00:08:27,280 --> 00:08:29,830
uh within page that just has been
treated or the argument to three

434
00:08:29,830 --> 00:08:29,840
treated or the argument to three
 

435
00:08:29,840 --> 00:08:31,510
treated or the argument to three
so we're gonna do is like just comment

436
00:08:31,510 --> 00:08:31,520
so we're gonna do is like just comment
 

437
00:08:31,520 --> 00:08:32,949
so we're gonna do is like just comment
out these two

438
00:08:32,949 --> 00:08:32,959
out these two
 

439
00:08:32,959 --> 00:08:35,509
out these two
acquire releases that basically uh mark

440
00:08:35,509 --> 00:08:35,519
acquire releases that basically uh mark
 

441
00:08:35,519 --> 00:08:36,630
acquire releases that basically uh mark
you know the

442
00:08:36,630 --> 00:08:36,640
you know the
 

443
00:08:36,640 --> 00:08:38,230
you know the
acquiring of the lock and then releasing

444
00:08:38,230 --> 00:08:38,240
acquiring of the lock and then releasing
 

445
00:08:38,240 --> 00:08:40,070
acquiring of the lock and then releasing
the lock you know and so this this

446
00:08:40,070 --> 00:08:40,080
the lock you know and so this this
 

447
00:08:40,080 --> 00:08:42,149
the lock you know and so this this
this this piece of code that sits in the

448
00:08:42,149 --> 00:08:42,159
this this piece of code that sits in the
 

449
00:08:42,159 --> 00:08:44,310
this this piece of code that sits in the
middle uh that used to be

450
00:08:44,310 --> 00:08:44,320
middle uh that used to be
 

451
00:08:44,320 --> 00:08:46,070
middle uh that used to be
uh there's now not more it's not being

452
00:08:46,070 --> 00:08:46,080
uh there's now not more it's not being
 

453
00:08:46,080 --> 00:08:47,509
uh there's now not more it's not being
executed anymore

454
00:08:47,509 --> 00:08:47,519
executed anymore
 

455
00:08:47,519 --> 00:08:54,150
executed anymore
atomically uh

456
00:08:54,150 --> 00:08:54,160
atomically uh
 

457
00:08:54,160 --> 00:08:57,430
atomically uh
so let's do that uh

458
00:08:57,430 --> 00:08:57,440
so let's do that uh
 

459
00:08:57,440 --> 00:09:01,509
so let's do that uh
and then run uh

460
00:09:01,509 --> 00:09:01,519
and then run uh
 

461
00:09:01,519 --> 00:09:05,269
and then run uh
qmu so we'll compile it

462
00:09:05,269 --> 00:09:05,279

 

463
00:09:05,279 --> 00:09:08,150

and you know before i run it in a notice

464
00:09:08,150 --> 00:09:08,160
and you know before i run it in a notice
 

465
00:09:08,160 --> 00:09:09,350
and you know before i run it in a notice
actually we already booted

466
00:09:09,350 --> 00:09:09,360
actually we already booted
 

467
00:09:09,360 --> 00:09:12,150
actually we already booted
and actually uh presumably have made

468
00:09:12,150 --> 00:09:12,160
and actually uh presumably have made
 

469
00:09:12,160 --> 00:09:13,430
and actually uh presumably have made
some calls probably to

470
00:09:13,430 --> 00:09:13,440
some calls probably to
 

471
00:09:13,440 --> 00:09:15,829
some calls probably to
k3 as you probably as you know and so

472
00:09:15,829 --> 00:09:15,839
k3 as you probably as you know and so
 

473
00:09:15,839 --> 00:09:17,990
k3 as you probably as you know and so
effective things seem to be working fine

474
00:09:17,990 --> 00:09:18,000
effective things seem to be working fine
 

475
00:09:18,000 --> 00:09:20,710
effective things seem to be working fine
so let's run user tests and maybe you

476
00:09:20,710 --> 00:09:20,720
so let's run user tests and maybe you
 

477
00:09:20,720 --> 00:09:22,230
so let's run user tests and maybe you
know it's interesting to think a little

478
00:09:22,230 --> 00:09:22,240
know it's interesting to think a little
 

479
00:09:22,240 --> 00:09:23,590
know it's interesting to think a little
bit about this now what do you expect

480
00:09:23,590 --> 00:09:23,600
bit about this now what do you expect
 

481
00:09:23,600 --> 00:09:24,310
bit about this now what do you expect
will this

482
00:09:24,310 --> 00:09:24,320
will this
 

483
00:09:24,320 --> 00:09:28,870
will this
work will this not work

484
00:09:28,870 --> 00:09:28,880

 

485
00:09:28,880 --> 00:09:33,350

anybody who tried it out

486
00:09:33,350 --> 00:09:33,360

 

487
00:09:33,360 --> 00:09:35,990

i think it could potentially lose some

488
00:09:35,990 --> 00:09:36,000
i think it could potentially lose some
 

489
00:09:36,000 --> 00:09:36,630
i think it could potentially lose some
pages

490
00:09:36,630 --> 00:09:36,640
pages
 

491
00:09:36,640 --> 00:09:39,670
pages
but maybe it will not because

492
00:09:39,670 --> 00:09:39,680
but maybe it will not because
 

493
00:09:39,680 --> 00:09:42,790
but maybe it will not because
uh maybe a race condition wouldn't occur

494
00:09:42,790 --> 00:09:42,800
uh maybe a race condition wouldn't occur
 

495
00:09:42,800 --> 00:09:44,310
uh maybe a race condition wouldn't occur
yeah so one of the things is that these

496
00:09:44,310 --> 00:09:44,320
yeah so one of the things is that these
 

497
00:09:44,320 --> 00:09:45,829
yeah so one of the things is that these
uh with race conditions they might not

498
00:09:45,829 --> 00:09:45,839
uh with race conditions they might not
 

499
00:09:45,839 --> 00:09:46,550
uh with race conditions they might not
happen so let's

500
00:09:46,550 --> 00:09:46,560
happen so let's
 

501
00:09:46,560 --> 00:09:48,829
happen so let's
run the user test and see actually what

502
00:09:48,829 --> 00:09:48,839
run the user test and see actually what
 

503
00:09:48,839 --> 00:09:50,790
run the user test and see actually what
happens

504
00:09:50,790 --> 00:09:50,800
happens
 

505
00:09:50,800 --> 00:09:54,310
happens
um so here we start it up

506
00:09:54,310 --> 00:09:54,320
um so here we start it up
 

507
00:09:54,320 --> 00:09:55,910
um so here we start it up
uh take a little while zoom might

508
00:09:55,910 --> 00:09:55,920
uh take a little while zoom might
 

509
00:09:55,920 --> 00:09:58,389
uh take a little while zoom might
complain a little bit because you know

510
00:09:58,389 --> 00:09:58,399
complain a little bit because you know
 

511
00:09:58,399 --> 00:10:01,750
complain a little bit because you know
running a lot of put a lot of load in my

512
00:10:01,750 --> 00:10:01,760
running a lot of put a lot of load in my
 

513
00:10:01,760 --> 00:10:03,030
running a lot of put a lot of load in my
machine here correctly if you probably

514
00:10:03,030 --> 00:10:03,040
machine here correctly if you probably
 

515
00:10:03,040 --> 00:10:03,430
machine here correctly if you probably
know

516
00:10:03,430 --> 00:10:03,440
know
 

517
00:10:03,440 --> 00:10:07,030
know
the q mu simulating free cores here and

518
00:10:07,030 --> 00:10:07,040
the q mu simulating free cores here and
 

519
00:10:07,040 --> 00:10:08,470
the q mu simulating free cores here and
the discrete course might run in

520
00:10:08,470 --> 00:10:08,480
the discrete course might run in
 

521
00:10:08,480 --> 00:10:11,910
the discrete course might run in
parallel

522
00:10:11,910 --> 00:10:11,920

 

523
00:10:11,920 --> 00:10:14,150

and you know so far so good you know

524
00:10:14,150 --> 00:10:14,160
and you know so far so good you know
 

525
00:10:14,160 --> 00:10:16,829
and you know so far so good you know
we're starting to pass

526
00:10:16,829 --> 00:10:16,839
we're starting to pass
 

527
00:10:16,839 --> 00:10:21,430
we're starting to pass
tests

528
00:10:21,430 --> 00:10:21,440

 

529
00:10:21,440 --> 00:10:22,710

that's a little bit slower because i'm

530
00:10:22,710 --> 00:10:22,720
that's a little bit slower because i'm
 

531
00:10:22,720 --> 00:10:27,030
that's a little bit slower because i'm
running zoom at the same time

532
00:10:27,030 --> 00:10:27,040

 

533
00:10:27,040 --> 00:10:29,350

let's wait a couple more and just uh see

534
00:10:29,350 --> 00:10:29,360
let's wait a couple more and just uh see
 

535
00:10:29,360 --> 00:10:43,110
let's wait a couple more and just uh see
what's going on

536
00:10:43,110 --> 00:10:43,120

 

537
00:10:43,120 --> 00:10:46,150

okay well uh

538
00:10:46,150 --> 00:10:46,160
okay well uh
 

539
00:10:46,160 --> 00:10:48,470
okay well uh
let's uh just go back to the slides and

540
00:10:48,470 --> 00:10:48,480
let's uh just go back to the slides and
 

541
00:10:48,480 --> 00:10:50,230
let's uh just go back to the slides and
then we'll check back in in a little

542
00:10:50,230 --> 00:10:50,240
then we'll check back in in a little
 

543
00:10:50,240 --> 00:10:52,870
then we'll check back in in a little
while so to see what actually happens

544
00:10:52,870 --> 00:10:52,880
while so to see what actually happens
 

545
00:10:52,880 --> 00:10:55,030
while so to see what actually happens
uh but you know as pointed out you know

546
00:10:55,030 --> 00:10:55,040
uh but you know as pointed out you know
 

547
00:10:55,040 --> 00:10:56,630
uh but you know as pointed out you know
these race conditions may appear may not

548
00:10:56,630 --> 00:10:56,640
these race conditions may appear may not
 

549
00:10:56,640 --> 00:10:57,590
these race conditions may appear may not
appear right because

550
00:10:57,590 --> 00:10:57,600
appear right because
 

551
00:10:57,600 --> 00:10:59,269
appear right because
it is always the case that you know

552
00:10:59,269 --> 00:10:59,279
it is always the case that you know
 

553
00:10:59,279 --> 00:11:02,310
it is always the case that you know
every core or every time we call k3

554
00:11:02,310 --> 00:11:02,320
every core or every time we call k3
 

555
00:11:02,320 --> 00:11:04,470
every core or every time we call k3
these two u lines are executed

556
00:11:04,470 --> 00:11:04,480
these two u lines are executed
 

557
00:11:04,480 --> 00:11:05,350
these two u lines are executed
atomically

558
00:11:05,350 --> 00:11:05,360
atomically
 

559
00:11:05,360 --> 00:11:08,310
atomically
uh as as they would have done with the

560
00:11:08,310 --> 00:11:08,320
uh as as they would have done with the
 

561
00:11:08,320 --> 00:11:09,030
uh as as they would have done with the
lock

562
00:11:09,030 --> 00:11:09,040
lock
 

563
00:11:09,040 --> 00:11:10,870
lock
then there's no problem and the only

564
00:11:10,870 --> 00:11:10,880
then there's no problem and the only
 

565
00:11:10,880 --> 00:11:12,949
then there's no problem and the only
problem is like between two frets or two

566
00:11:12,949 --> 00:11:12,959
problem is like between two frets or two
 

567
00:11:12,959 --> 00:11:13,990
problem is like between two frets or two
processors executed

568
00:11:13,990 --> 00:11:14,000
processors executed
 

569
00:11:14,000 --> 00:11:15,670
processors executed
at the same time and so becomes in

570
00:11:15,670 --> 00:11:15,680
at the same time and so becomes in
 

571
00:11:15,680 --> 00:11:17,110
at the same time and so becomes in
between

572
00:11:17,110 --> 00:11:17,120
between
 

573
00:11:17,120 --> 00:11:18,870
between
look at this actually you know while i'm

574
00:11:18,870 --> 00:11:18,880
look at this actually you know while i'm
 

575
00:11:18,880 --> 00:11:20,310
look at this actually you know while i'm
talking you know we see actually there

576
00:11:20,310 --> 00:11:20,320
talking you know we see actually there
 

577
00:11:20,320 --> 00:11:22,150
talking you know we see actually there
is a panic and so there is some race

578
00:11:22,150 --> 00:11:22,160
is a panic and so there is some race
 

579
00:11:22,160 --> 00:11:23,430
is a panic and so there is some race
condition that can actually cause a

580
00:11:23,430 --> 00:11:23,440
condition that can actually cause a
 

581
00:11:23,440 --> 00:11:25,670
condition that can actually cause a
panic

582
00:11:25,670 --> 00:11:25,680
panic
 

583
00:11:25,680 --> 00:11:27,269
panic
there are other race conditions that

584
00:11:27,269 --> 00:11:27,279
there are other race conditions that
 

585
00:11:27,279 --> 00:11:29,110
there are other race conditions that
will show up as indeed as uh

586
00:11:29,110 --> 00:11:29,120
will show up as indeed as uh
 

587
00:11:29,120 --> 00:11:32,069
will show up as indeed as uh
as mentioned or as well answered that

588
00:11:32,069 --> 00:11:32,079
as mentioned or as well answered that
 

589
00:11:32,079 --> 00:11:33,110
as mentioned or as well answered that
will show up as like

590
00:11:33,110 --> 00:11:33,120
will show up as like
 

591
00:11:33,120 --> 00:11:34,710
will show up as like
not enough you know some free pages

592
00:11:34,710 --> 00:11:34,720
not enough you know some free pages
 

593
00:11:34,720 --> 00:11:36,550
not enough you know some free pages
where some pages get lost so basically

594
00:11:36,550 --> 00:11:36,560
where some pages get lost so basically
 

595
00:11:36,560 --> 00:11:38,949
where some pages get lost so basically
user test runs fine until the very end

596
00:11:38,949 --> 00:11:38,959
user test runs fine until the very end
 

597
00:11:38,959 --> 00:11:41,269
user test runs fine until the very end
where it complains saying well you lost

598
00:11:41,269 --> 00:11:41,279
where it complains saying well you lost
 

599
00:11:41,279 --> 00:11:43,430
where it complains saying well you lost
some pages during uh all usual

600
00:11:43,430 --> 00:11:43,440
some pages during uh all usual
 

601
00:11:43,440 --> 00:11:46,550
some pages during uh all usual
all of the rounds of user test okay so

602
00:11:46,550 --> 00:11:46,560
all of the rounds of user test okay so
 

603
00:11:46,560 --> 00:11:47,990
all of the rounds of user test okay so
these race conditions can show up in

604
00:11:47,990 --> 00:11:48,000
these race conditions can show up in
 

605
00:11:48,000 --> 00:11:48,790
these race conditions can show up in
different ways

606
00:11:48,790 --> 00:11:48,800
different ways
 

607
00:11:48,800 --> 00:11:50,949
different ways
uh they may happen they may not happen

608
00:11:50,949 --> 00:11:50,959
uh they may happen they may not happen
 

609
00:11:50,959 --> 00:11:52,870
uh they may happen they may not happen
uh clearly something happened here

610
00:11:52,870 --> 00:11:52,880
uh clearly something happened here
 

611
00:11:52,880 --> 00:11:55,110
uh clearly something happened here
uh so let's try to understand you know

612
00:11:55,110 --> 00:11:55,120
uh so let's try to understand you know
 

613
00:11:55,120 --> 00:11:56,310
uh so let's try to understand you know
what what what actually

614
00:11:56,310 --> 00:11:56,320
what what what actually
 

615
00:11:56,320 --> 00:12:01,190
what what what actually
uh what goes wrong

616
00:12:01,190 --> 00:12:01,200

 

617
00:12:01,200 --> 00:12:07,030

back to the slides

618
00:12:07,030 --> 00:12:07,040

 

619
00:12:07,040 --> 00:12:08,629

so the picture you should have in your

620
00:12:08,629 --> 00:12:08,639
so the picture you should have in your
 

621
00:12:08,639 --> 00:12:10,230
so the picture you should have in your
head like so there's this

622
00:12:10,230 --> 00:12:10,240
head like so there's this
 

623
00:12:10,240 --> 00:12:13,110
head like so there's this
multiple cores that we're running so

624
00:12:13,110 --> 00:12:13,120
multiple cores that we're running so
 

625
00:12:13,120 --> 00:12:14,629
multiple cores that we're running so
here's cpu0

626
00:12:14,629 --> 00:12:14,639
here's cpu0
 

627
00:12:14,639 --> 00:12:17,509
here's cpu0
so cpu0 is executing instructions and

628
00:12:17,509 --> 00:12:17,519
so cpu0 is executing instructions and
 

629
00:12:17,519 --> 00:12:18,230
so cpu0 is executing instructions and
cpu one

630
00:12:18,230 --> 00:12:18,240
cpu one
 

631
00:12:18,240 --> 00:12:21,670
cpu one
is executing instructions and

632
00:12:21,670 --> 00:12:21,680
is executing instructions and
 

633
00:12:21,680 --> 00:12:24,150
is executing instructions and
they're both connected you know to a

634
00:12:24,150 --> 00:12:24,160
they're both connected you know to a
 

635
00:12:24,160 --> 00:12:25,430
they're both connected you know to a
memory right if you're

636
00:12:25,430 --> 00:12:25,440
memory right if you're
 

637
00:12:25,440 --> 00:12:27,030
memory right if you're
looking back think back up at the scheme

638
00:12:27,030 --> 00:12:27,040
looking back think back up at the scheme
 

639
00:12:27,040 --> 00:12:28,310
looking back think back up at the scheme
schematics you know that we've shown a

640
00:12:28,310 --> 00:12:28,320
schematics you know that we've shown a
 

641
00:12:28,320 --> 00:12:29,430
schematics you know that we've shown a
couple times before

642
00:12:29,430 --> 00:12:29,440
couple times before
 

643
00:12:29,440 --> 00:12:31,750
couple times before
in fact there's a dram controller you

644
00:12:31,750 --> 00:12:31,760
in fact there's a dram controller you
 

645
00:12:31,760 --> 00:12:33,670
in fact there's a dram controller you
know that actually

646
00:12:33,670 --> 00:12:33,680
know that actually
 

647
00:12:33,680 --> 00:12:36,550
know that actually
uh connects you know to the drm chips

648
00:12:36,550 --> 00:12:36,560
uh connects you know to the drm chips
 

649
00:12:36,560 --> 00:12:38,629
uh connects you know to the drm chips
where all the stage is living

650
00:12:38,629 --> 00:12:38,639
where all the stage is living
 

651
00:12:38,639 --> 00:12:41,430
where all the stage is living
uh or all the memory is living so i'm

652
00:12:41,430 --> 00:12:41,440
uh or all the memory is living so i'm
 

653
00:12:41,440 --> 00:12:42,470
uh or all the memory is living so i'm
going to make that memory a little bit

654
00:12:42,470 --> 00:12:42,480
going to make that memory a little bit
 

655
00:12:42,480 --> 00:12:45,910
going to make that memory a little bit
bigger because i want to

656
00:12:45,910 --> 00:12:45,920

 

657
00:12:45,920 --> 00:12:47,990

have some place to draw and so basically

658
00:12:47,990 --> 00:12:48,000
have some place to draw and so basically
 

659
00:12:48,000 --> 00:12:49,190
have some place to draw and so basically
our tree list

660
00:12:49,190 --> 00:12:49,200
our tree list
 

661
00:12:49,200 --> 00:12:52,949
our tree list
you know lives in

662
00:12:52,949 --> 00:12:52,959
you know lives in
 

663
00:12:52,959 --> 00:12:55,190
you know lives in
in memory and let's say there's a free

664
00:12:55,190 --> 00:12:55,200
in memory and let's say there's a free
 

665
00:12:55,200 --> 00:12:59,670
in memory and let's say there's a free
list with two pages on it

666
00:12:59,670 --> 00:12:59,680

 

667
00:12:59,680 --> 00:13:03,910

and you know both

668
00:13:03,910 --> 00:13:03,920
and you know both
 

669
00:13:03,920 --> 00:13:06,949
and you know both
both cpus you know call k3 roughly at

670
00:13:06,949 --> 00:13:06,959
both cpus you know call k3 roughly at
 

671
00:13:06,959 --> 00:13:13,430
both cpus you know call k3 roughly at
the same time

672
00:13:13,430 --> 00:13:13,440

 

673
00:13:13,440 --> 00:13:15,030

and so look at a little bit of the code

674
00:13:15,030 --> 00:13:15,040
and so look at a little bit of the code
 

675
00:13:15,040 --> 00:13:16,710
and so look at a little bit of the code
again just to make sure that we

676
00:13:16,710 --> 00:13:16,720
again just to make sure that we
 

677
00:13:16,720 --> 00:13:18,310
again just to make sure that we
have this variable in our head so we

678
00:13:18,310 --> 00:13:18,320
have this variable in our head so we
 

679
00:13:18,320 --> 00:13:20,230
have this variable in our head so we
look at k3 uh

680
00:13:20,230 --> 00:13:20,240
look at k3 uh
 

681
00:13:20,240 --> 00:13:23,030
look at k3 uh
you know they're get passed in some pa a

682
00:13:23,030 --> 00:13:23,040
you know they're get passed in some pa a
 

683
00:13:23,040 --> 00:13:24,470
you know they're get passed in some pa a
physical address

684
00:13:24,470 --> 00:13:24,480
physical address
 

685
00:13:24,480 --> 00:13:26,150
physical address
that we're going to use to actually hook

686
00:13:26,150 --> 00:13:26,160
that we're going to use to actually hook
 

687
00:13:26,160 --> 00:13:29,910
that we're going to use to actually hook
up you know into the free list

688
00:13:29,910 --> 00:13:29,920
up you know into the free list
 

689
00:13:29,920 --> 00:13:34,629
up you know into the free list
so you know cpu 0 has uh

690
00:13:34,629 --> 00:13:34,639
so you know cpu 0 has uh
 

691
00:13:34,639 --> 00:13:38,310
so you know cpu 0 has uh
you know an r uh and

692
00:13:38,310 --> 00:13:38,320
you know an r uh and
 

693
00:13:38,320 --> 00:13:40,389
you know an r uh and
that's pointing to to some you know free

694
00:13:40,389 --> 00:13:40,399
that's pointing to to some you know free
 

695
00:13:40,399 --> 00:13:41,590
that's pointing to to some you know free
page

696
00:13:41,590 --> 00:13:41,600
page
 

697
00:13:41,600 --> 00:13:44,949
page
and uh maybe yeah and

698
00:13:44,949 --> 00:13:44,959
and uh maybe yeah and
 

699
00:13:44,959 --> 00:13:47,509
and uh maybe yeah and
cpu one has one let me actually use

700
00:13:47,509 --> 00:13:47,519
cpu one has one let me actually use
 

701
00:13:47,519 --> 00:13:49,430
cpu one has one let me actually use
another column for cpu 1.

702
00:13:49,430 --> 00:13:49,440
another column for cpu 1.
 

703
00:13:49,440 --> 00:13:52,310
another column for cpu 1.
so cpu knows it has an r it also is pin

704
00:13:52,310 --> 00:13:52,320
so cpu knows it has an r it also is pin
 

705
00:13:52,320 --> 00:13:53,509
so cpu knows it has an r it also is pin
pointing to some page

706
00:13:53,509 --> 00:13:53,519
pointing to some page
 

707
00:13:53,519 --> 00:13:54,870
pointing to some page
you know that we want to hook into the

708
00:13:54,870 --> 00:13:54,880
you know that we want to hook into the
 

709
00:13:54,880 --> 00:13:58,949
you know that we want to hook into the
free list make sense

710
00:13:58,949 --> 00:13:58,959

 

711
00:13:58,959 --> 00:14:01,189

and so you know we look back at the code

712
00:14:01,189 --> 00:14:01,199
and so you know we look back at the code
 

713
00:14:01,199 --> 00:14:02,230
and so you know we look back at the code
uh

714
00:14:02,230 --> 00:14:02,240
uh
 

715
00:14:02,240 --> 00:14:04,150
uh
you know the first thing they do is you

716
00:14:04,150 --> 00:14:04,160
you know the first thing they do is you
 

717
00:14:04,160 --> 00:14:05,829
you know the first thing they do is you
know update our next to point to

718
00:14:05,829 --> 00:14:05,839
know update our next to point to
 

719
00:14:05,839 --> 00:14:09,189
know update our next to point to
uh to point to the to the free list

720
00:14:09,189 --> 00:14:09,199
uh to point to the to the free list
 

721
00:14:09,199 --> 00:14:12,230
uh to point to the to the free list
so let's assume you know that cpu one

722
00:14:12,230 --> 00:14:12,240
so let's assume you know that cpu one
 

723
00:14:12,240 --> 00:14:12,949
so let's assume you know that cpu one
runs

724
00:14:12,949 --> 00:14:12,959
runs
 

725
00:14:12,959 --> 00:14:16,150
runs
uh first and you know what it will do

726
00:14:16,150 --> 00:14:16,160
uh first and you know what it will do
 

727
00:14:16,160 --> 00:14:19,590
uh first and you know what it will do
is we'll put its pointer you know to

728
00:14:19,590 --> 00:14:19,600
is we'll put its pointer you know to
 

729
00:14:19,600 --> 00:14:22,870
is we'll put its pointer you know to
the beginning of the uh you know to

730
00:14:22,870 --> 00:14:22,880
the beginning of the uh you know to
 

731
00:14:22,880 --> 00:14:25,030
the beginning of the uh you know to
wherever freelance is pointing to

732
00:14:25,030 --> 00:14:25,040
wherever freelance is pointing to
 

733
00:14:25,040 --> 00:14:27,670
wherever freelance is pointing to
and if you know cpr and runs exactly at

734
00:14:27,670 --> 00:14:27,680
and if you know cpr and runs exactly at
 

735
00:14:27,680 --> 00:14:29,350
and if you know cpr and runs exactly at
the same time

736
00:14:29,350 --> 00:14:29,360
the same time
 

737
00:14:29,360 --> 00:14:32,629
the same time
then uh you know

738
00:14:32,629 --> 00:14:32,639
then uh you know
 

739
00:14:32,639 --> 00:14:35,030
then uh you know
it could run you know before you know

740
00:14:35,030 --> 00:14:35,040
it could run you know before you know
 

741
00:14:35,040 --> 00:14:37,430
it could run you know before you know
cpu0 executes a second instruction

742
00:14:37,430 --> 00:14:37,440
cpu0 executes a second instruction
 

743
00:14:37,440 --> 00:14:38,710
cpu0 executes a second instruction
and so it actually might do the same

744
00:14:38,710 --> 00:14:38,720
and so it actually might do the same
 

745
00:14:38,720 --> 00:14:39,990
and so it actually might do the same
thing you know it might actually also

746
00:14:39,990 --> 00:14:40,000
thing you know it might actually also
 

747
00:14:40,000 --> 00:14:41,509
thing you know it might actually also
run that first instruction

748
00:14:41,509 --> 00:14:41,519
run that first instruction
 

749
00:14:41,519 --> 00:14:51,269
run that first instruction
and update um

750
00:14:51,269 --> 00:14:51,279

 

751
00:14:51,279 --> 00:14:55,350

and update the pointer 2. so now both

752
00:14:55,350 --> 00:14:55,360
and update the pointer 2. so now both
 

753
00:14:55,360 --> 00:14:57,829
and update the pointer 2. so now both
are you know one from cpu 1 and from cpu

754
00:14:57,829 --> 00:14:57,839
are you know one from cpu 1 and from cpu
 

755
00:14:57,839 --> 00:14:59,509
are you know one from cpu 1 and from cpu
zero one for cpo one are pointing to the

756
00:14:59,509 --> 00:14:59,519
zero one for cpo one are pointing to the
 

757
00:14:59,519 --> 00:15:00,629
zero one for cpo one are pointing to the
beginning of the free list and the free

758
00:15:00,629 --> 00:15:00,639
beginning of the free list and the free
 

759
00:15:00,639 --> 00:15:02,150
beginning of the free list and the free
list is also pointing to the

760
00:15:02,150 --> 00:15:02,160
list is also pointing to the
 

761
00:15:02,160 --> 00:15:04,230
list is also pointing to the
beginning of the field list and so now

762
00:15:04,230 --> 00:15:04,240
beginning of the field list and so now
 

763
00:15:04,240 --> 00:15:05,430
beginning of the field list and so now
there are two remaining instructions

764
00:15:05,430 --> 00:15:05,440
there are two remaining instructions
 

765
00:15:05,440 --> 00:15:07,590
there are two remaining instructions
that are being executed in parallel

766
00:15:07,590 --> 00:15:07,600
that are being executed in parallel
 

767
00:15:07,600 --> 00:15:10,150
that are being executed in parallel
so we'll go back again you know the code

768
00:15:10,150 --> 00:15:10,160
so we'll go back again you know the code
 

769
00:15:10,160 --> 00:15:11,670
so we'll go back again you know the code
you know the remaining instruction is

770
00:15:11,670 --> 00:15:11,680
you know the remaining instruction is
 

771
00:15:11,680 --> 00:15:12,470
you know the remaining instruction is
being executed

772
00:15:12,470 --> 00:15:12,480
being executed
 

773
00:15:12,480 --> 00:15:13,910
being executed
is actually updating the free list to

774
00:15:13,910 --> 00:15:13,920
is actually updating the free list to
 

775
00:15:13,920 --> 00:15:17,030
is actually updating the free list to
point to r you know uh

776
00:15:17,030 --> 00:15:17,040
point to r you know uh
 

777
00:15:17,040 --> 00:15:20,069
point to r you know uh
and so uh you know cpu you know zero and

778
00:15:20,069 --> 00:15:20,079
and so uh you know cpu you know zero and
 

779
00:15:20,079 --> 00:15:21,350
and so uh you know cpu you know zero and
one going to execute these instructions

780
00:15:21,350 --> 00:15:21,360
one going to execute these instructions
 

781
00:15:21,360 --> 00:15:21,750
one going to execute these instructions
maybe

782
00:15:21,750 --> 00:15:21,760
maybe
 

783
00:15:21,760 --> 00:15:24,150
maybe
exactly in the same uh rapidly at the

784
00:15:24,150 --> 00:15:24,160
exactly in the same uh rapidly at the
 

785
00:15:24,160 --> 00:15:25,670
exactly in the same uh rapidly at the
same time but one is going to go first

786
00:15:25,670 --> 00:15:25,680
same time but one is going to go first
 

787
00:15:25,680 --> 00:15:27,269
same time but one is going to go first
correct there's only one single shared

788
00:15:27,269 --> 00:15:27,279
correct there's only one single shared
 

789
00:15:27,279 --> 00:15:28,230
correct there's only one single shared
memory

790
00:15:28,230 --> 00:15:28,240
memory
 

791
00:15:28,240 --> 00:15:30,150
memory
and so one update is going to go first

792
00:15:30,150 --> 00:15:30,160
and so one update is going to go first
 

793
00:15:30,160 --> 00:15:32,150
and so one update is going to go first
and the other one is going to go second

794
00:15:32,150 --> 00:15:32,160
and the other one is going to go second
 

795
00:15:32,160 --> 00:15:35,110
and the other one is going to go second
so let's say cpu one you know goes first

796
00:15:35,110 --> 00:15:35,120
so let's say cpu one you know goes first
 

797
00:15:35,120 --> 00:15:35,670
so let's say cpu one you know goes first
and now

798
00:15:35,670 --> 00:15:35,680
and now
 

799
00:15:35,680 --> 00:15:37,509
and now
what will then happen well the cpu one

800
00:15:37,509 --> 00:15:37,519
what will then happen well the cpu one
 

801
00:15:37,519 --> 00:15:38,790
what will then happen well the cpu one
goes first the three list is gonna be

802
00:15:38,790 --> 00:15:38,800
goes first the three list is gonna be
 

803
00:15:38,800 --> 00:15:40,310
goes first the three list is gonna be
pointing to sr

804
00:15:40,310 --> 00:15:40,320
pointing to sr
 

805
00:15:40,320 --> 00:15:43,670
pointing to sr
right and then cpu 2

806
00:15:43,670 --> 00:15:43,680
right and then cpu 2
 

807
00:15:43,680 --> 00:15:46,230
right and then cpu 2
runs so now cp2 runs actually this x

808
00:15:46,230 --> 00:15:46,240
runs so now cp2 runs actually this x
 

809
00:15:46,240 --> 00:15:47,189
runs so now cp2 runs actually this x
instruction

810
00:15:47,189 --> 00:15:47,199
instruction
 

811
00:15:47,199 --> 00:15:49,350
instruction
and so what it's going to do it is going

812
00:15:49,350 --> 00:15:49,360
and so what it's going to do it is going
 

813
00:15:49,360 --> 00:15:50,550
and so what it's going to do it is going
to actually update

814
00:15:50,550 --> 00:15:50,560
to actually update
 

815
00:15:50,560 --> 00:15:55,189
to actually update
you know pre-list two-point

816
00:15:55,189 --> 00:15:55,199
you know pre-list two-point
 

817
00:15:55,199 --> 00:15:58,230
you know pre-list two-point
so here's a free list and

818
00:15:58,230 --> 00:15:58,240
so here's a free list and
 

819
00:15:58,240 --> 00:16:01,269
so here's a free list and
it's actually going to point to the r

820
00:16:01,269 --> 00:16:01,279
it's actually going to point to the r
 

821
00:16:01,279 --> 00:16:03,670
it's actually going to point to the r
that actually get passed in and so you

822
00:16:03,670 --> 00:16:03,680
that actually get passed in and so you
 

823
00:16:03,680 --> 00:16:05,910
that actually get passed in and so you
know we have a setting now correct we're

824
00:16:05,910 --> 00:16:05,920
know we have a setting now correct we're
 

825
00:16:05,920 --> 00:16:08,790
know we have a setting now correct we're
we've lost you know basically one page

826
00:16:08,790 --> 00:16:08,800
we've lost you know basically one page
 

827
00:16:08,800 --> 00:16:10,790
we've lost you know basically one page
the

828
00:16:10,790 --> 00:16:10,800
the
 

829
00:16:10,800 --> 00:16:13,189
the
r you know that actually cpu zero

830
00:16:13,189 --> 00:16:13,199
r you know that actually cpu zero
 

831
00:16:13,199 --> 00:16:14,150
r you know that actually cpu zero
actually three

832
00:16:14,150 --> 00:16:14,160
actually three
 

833
00:16:14,160 --> 00:16:15,910
actually three
actually ended up not being on the free

834
00:16:15,910 --> 00:16:15,920
actually ended up not being on the free
 

835
00:16:15,920 --> 00:16:17,189
actually ended up not being on the free
list at all so

836
00:16:17,189 --> 00:16:17,199
list at all so
 

837
00:16:17,199 --> 00:16:22,710
list at all so
we lost the page

838
00:16:22,710 --> 00:16:22,720
we lost the page
 

839
00:16:22,720 --> 00:16:24,949
we lost the page
um and that's one you know bad

840
00:16:24,949 --> 00:16:24,959
um and that's one you know bad
 

841
00:16:24,959 --> 00:16:26,389
um and that's one you know bad
particular outcome of course it could be

842
00:16:26,389 --> 00:16:26,399
particular outcome of course it could be
 

843
00:16:26,399 --> 00:16:28,150
particular outcome of course it could be
more bad outcomes because there could be

844
00:16:28,150 --> 00:16:28,160
more bad outcomes because there could be
 

845
00:16:28,160 --> 00:16:30,150
more bad outcomes because there could be
more cpus after trying to do this three

846
00:16:30,150 --> 00:16:30,160
more cpus after trying to do this three
 

847
00:16:30,160 --> 00:16:30,949
more cpus after trying to do this three
list

848
00:16:30,949 --> 00:16:30,959
list
 

849
00:16:30,959 --> 00:16:33,030
list
uh they may observe the new one of the

850
00:16:33,030 --> 00:16:33,040
uh they may observe the new one of the
 

851
00:16:33,040 --> 00:16:34,629
uh they may observe the new one of the
my observed three lists pointing

852
00:16:34,629 --> 00:16:34,639
my observed three lists pointing
 

853
00:16:34,639 --> 00:16:35,990
my observed three lists pointing
temporarily to the cpu

854
00:16:35,990 --> 00:16:36,000
temporarily to the cpu
 

855
00:16:36,000 --> 00:16:40,069
temporarily to the cpu
to zeros r uh and so we start using that

856
00:16:40,069 --> 00:16:40,079
to zeros r uh and so we start using that
 

857
00:16:40,079 --> 00:16:41,910
to zeros r uh and so we start using that
uh well then immediately the freelancer

858
00:16:41,910 --> 00:16:41,920
uh well then immediately the freelancer
 

859
00:16:41,920 --> 00:16:43,509
uh well then immediately the freelancer
is updated you know by

860
00:16:43,509 --> 00:16:43,519
is updated you know by
 

861
00:16:43,519 --> 00:16:45,829
is updated you know by
uh the second cpu so the more cpu's

862
00:16:45,829 --> 00:16:45,839
uh the second cpu so the more cpu's
 

863
00:16:45,839 --> 00:16:47,110
uh the second cpu so the more cpu's
involved you know presumably we could

864
00:16:47,110 --> 00:16:47,120
involved you know presumably we could
 

865
00:16:47,120 --> 00:16:49,189
involved you know presumably we could
actually get more bizarre outcomes than

866
00:16:49,189 --> 00:16:49,199
actually get more bizarre outcomes than
 

867
00:16:49,199 --> 00:16:55,749
actually get more bizarre outcomes than
just the loss page does this make sense

868
00:16:55,749 --> 00:16:55,759

 

869
00:16:55,759 --> 00:17:04,789

any questions

870
00:17:04,789 --> 00:17:04,799
any questions
 

871
00:17:04,799 --> 00:17:07,990
any questions
okay um so the way

872
00:17:07,990 --> 00:17:08,000
okay um so the way
 

873
00:17:08,000 --> 00:17:10,069
okay um so the way
you know ask you know the code does you

874
00:17:10,069 --> 00:17:10,079
you know ask you know the code does you
 

875
00:17:10,079 --> 00:17:13,189
you know ask you know the code does you
know the way to address this uh

876
00:17:13,189 --> 00:17:13,199
know the way to address this uh
 

877
00:17:13,199 --> 00:17:16,230
know the way to address this uh
one way and a very common way uh is to

878
00:17:16,230 --> 00:17:16,240
one way and a very common way uh is to
 

879
00:17:16,240 --> 00:17:17,590
one way and a very common way uh is to
address this problem

880
00:17:17,590 --> 00:17:17,600
address this problem
 

881
00:17:17,600 --> 00:17:20,710
address this problem
is to use a lock so let me talk a little

882
00:17:20,710 --> 00:17:20,720
is to use a lock so let me talk a little
 

883
00:17:20,720 --> 00:17:22,390
is to use a lock so let me talk a little
bit about locks

884
00:17:22,390 --> 00:17:22,400
bit about locks
 

885
00:17:22,400 --> 00:17:26,789
bit about locks
in more detail

886
00:17:26,789 --> 00:17:26,799

 

887
00:17:26,799 --> 00:17:30,830

so what is a you know what's the lock

888
00:17:30,830 --> 00:17:30,840
so what is a you know what's the lock
 

889
00:17:30,840 --> 00:17:32,470
so what is a you know what's the lock
abstraction

890
00:17:32,470 --> 00:17:32,480
abstraction
 

891
00:17:32,480 --> 00:17:34,950
abstraction
well uh it is just an object like any

892
00:17:34,950 --> 00:17:34,960
well uh it is just an object like any
 

893
00:17:34,960 --> 00:17:35,830
well uh it is just an object like any
other sort of

894
00:17:35,830 --> 00:17:35,840
other sort of
 

895
00:17:35,840 --> 00:17:38,710
other sort of
uh object in the kernel and then it has

896
00:17:38,710 --> 00:17:38,720
uh object in the kernel and then it has
 

897
00:17:38,720 --> 00:17:39,350
uh object in the kernel and then it has
a

898
00:17:39,350 --> 00:17:39,360
a
 

899
00:17:39,360 --> 00:17:40,549
a
there's in fact there's something called

900
00:17:40,549 --> 00:17:40,559
there's in fact there's something called
 

901
00:17:40,559 --> 00:17:43,510
there's in fact there's something called
strut lock you know that has some fields

902
00:17:43,510 --> 00:17:43,520
strut lock you know that has some fields
 

903
00:17:43,520 --> 00:17:46,549
strut lock you know that has some fields
you know to maintain state about locks

904
00:17:46,549 --> 00:17:46,559
you know to maintain state about locks
 

905
00:17:46,559 --> 00:17:49,430
you know to maintain state about locks
and it has a pretty straightforward api

906
00:17:49,430 --> 00:17:49,440
and it has a pretty straightforward api
 

907
00:17:49,440 --> 00:17:51,110
and it has a pretty straightforward api
you know there's a

908
00:17:51,110 --> 00:17:51,120
you know there's a
 

909
00:17:51,120 --> 00:17:52,549
you know there's a
acquired in fact there are only two

910
00:17:52,549 --> 00:17:52,559
acquired in fact there are only two
 

911
00:17:52,559 --> 00:17:54,230
acquired in fact there are only two
calls into this

912
00:17:54,230 --> 00:17:54,240
calls into this
 

913
00:17:54,240 --> 00:17:58,470
calls into this
abstraction uh which

914
00:17:58,470 --> 00:17:58,480

 

915
00:17:58,480 --> 00:18:01,590

require which takes the uh a pointer to

916
00:18:01,590 --> 00:18:01,600
require which takes the uh a pointer to
 

917
00:18:01,600 --> 00:18:06,630
require which takes the uh a pointer to
uh a lock struck and and a release

918
00:18:06,630 --> 00:18:06,640
uh a lock struck and and a release
 

919
00:18:06,640 --> 00:18:09,830
uh a lock struck and and a release
uh you know that actually uh

920
00:18:09,830 --> 00:18:09,840
uh you know that actually uh
 

921
00:18:09,840 --> 00:18:10,950
uh you know that actually uh
also takes a point through the log

922
00:18:10,950 --> 00:18:10,960
also takes a point through the log
 

923
00:18:10,960 --> 00:18:13,029
also takes a point through the log
struct uh to basically update you know

924
00:18:13,029 --> 00:18:13,039
struct uh to basically update you know
 

925
00:18:13,039 --> 00:18:14,789
struct uh to basically update you know
the lock object

926
00:18:14,789 --> 00:18:14,799
the lock object
 

927
00:18:14,799 --> 00:18:15,990
the lock object
and then basically the rule of the

928
00:18:15,990 --> 00:18:16,000
and then basically the rule of the
 

929
00:18:16,000 --> 00:18:18,230
and then basically the rule of the
lighting you know the rule here is that

930
00:18:18,230 --> 00:18:18,240
lighting you know the rule here is that
 

931
00:18:18,240 --> 00:18:23,590
lighting you know the rule here is that
uh the choir

932
00:18:23,590 --> 00:18:23,600

 

933
00:18:23,600 --> 00:18:25,590

enforces this uh following rule that

934
00:18:25,590 --> 00:18:25,600
enforces this uh following rule that
 

935
00:18:25,600 --> 00:18:26,830
enforces this uh following rule that
only one

936
00:18:26,830 --> 00:18:26,840
only one
 

937
00:18:26,840 --> 00:18:30,789
only one
process

938
00:18:30,789 --> 00:18:30,799

 

939
00:18:30,799 --> 00:18:32,710

you know can enter or can acquire the

940
00:18:32,710 --> 00:18:32,720
you know can enter or can acquire the
 

941
00:18:32,720 --> 00:18:37,750
you know can enter or can acquire the
lock

942
00:18:37,750 --> 00:18:37,760

 

943
00:18:37,760 --> 00:18:39,990

so at any particular point in time

944
00:18:39,990 --> 00:18:40,000
so at any particular point in time
 

945
00:18:40,000 --> 00:18:41,590
so at any particular point in time
there's only going to be one process

946
00:18:41,590 --> 00:18:41,600
there's only going to be one process
 

947
00:18:41,600 --> 00:18:42,789
there's only going to be one process
that is able to actually

948
00:18:42,789 --> 00:18:42,799
that is able to actually
 

949
00:18:42,799 --> 00:18:44,950
that is able to actually
successfully acquire the lock and the

950
00:18:44,950 --> 00:18:44,960
successfully acquire the lock and the
 

951
00:18:44,960 --> 00:18:46,310
successfully acquire the lock and the
other process the business is trying to

952
00:18:46,310 --> 00:18:46,320
other process the business is trying to
 

953
00:18:46,320 --> 00:18:48,070
other process the business is trying to
acquire the lock at the same time

954
00:18:48,070 --> 00:18:48,080
acquire the lock at the same time
 

955
00:18:48,080 --> 00:18:49,990
acquire the lock at the same time
has to wait until the first process

956
00:18:49,990 --> 00:18:50,000
has to wait until the first process
 

957
00:18:50,000 --> 00:18:52,470
has to wait until the first process
actually calls a release

958
00:18:52,470 --> 00:18:52,480
actually calls a release
 

959
00:18:52,480 --> 00:18:55,510
actually calls a release
and so this sequence you know the the

960
00:18:55,510 --> 00:18:55,520
and so this sequence you know the the
 

961
00:18:55,520 --> 00:18:57,510
and so this sequence you know the the
instructions you know between

962
00:18:57,510 --> 00:18:57,520
instructions you know between
 

963
00:18:57,520 --> 00:18:59,909
instructions you know between
you know the choir and release are often

964
00:18:59,909 --> 00:18:59,919
you know the choir and release are often
 

965
00:18:59,919 --> 00:19:07,590
you know the choir and release are often
called the critical section

966
00:19:07,590 --> 00:19:07,600

 

967
00:19:07,600 --> 00:19:08,950

and one reason it's called the critical

968
00:19:08,950 --> 00:19:08,960
and one reason it's called the critical
 

969
00:19:08,960 --> 00:19:11,270
and one reason it's called the critical
section is because this is sort of the

970
00:19:11,270 --> 00:19:11,280
section is because this is sort of the
 

971
00:19:11,280 --> 00:19:13,110
section is because this is sort of the
uh diffused instruction together that do

972
00:19:13,110 --> 00:19:13,120
uh diffused instruction together that do
 

973
00:19:13,120 --> 00:19:14,470
uh diffused instruction together that do
the uh you know

974
00:19:14,470 --> 00:19:14,480
the uh you know
 

975
00:19:14,480 --> 00:19:16,390
the uh you know
need to do the update you know to our

976
00:19:16,390 --> 00:19:16,400
need to do the update you know to our
 

977
00:19:16,400 --> 00:19:18,150
need to do the update you know to our
whatever data structure that's protected

978
00:19:18,150 --> 00:19:18,160
whatever data structure that's protected
 

979
00:19:18,160 --> 00:19:19,029
whatever data structure that's protected
by the lock

980
00:19:19,029 --> 00:19:19,039
by the lock
 

981
00:19:19,039 --> 00:19:21,990
by the lock
in an atomic fashion uh and then ensures

982
00:19:21,990 --> 00:19:22,000
in an atomic fashion uh and then ensures
 

983
00:19:22,000 --> 00:19:23,590
in an atomic fashion uh and then ensures
that basically

984
00:19:23,590 --> 00:19:23,600
that basically
 

985
00:19:23,600 --> 00:19:25,190
that basically
if you have multiple instructions in

986
00:19:25,190 --> 00:19:25,200
if you have multiple instructions in
 

987
00:19:25,200 --> 00:19:27,350
if you have multiple instructions in
this you know between the car and

988
00:19:27,350 --> 00:19:27,360
this you know between the car and
 

989
00:19:27,360 --> 00:19:27,909
this you know between the car and
release

990
00:19:27,909 --> 00:19:27,919
release
 

991
00:19:27,919 --> 00:19:31,750
release
that they all are executed all together

992
00:19:31,750 --> 00:19:31,760
that they all are executed all together
 

993
00:19:31,760 --> 00:19:34,789
that they all are executed all together
or none and so there's never the case

994
00:19:34,789 --> 00:19:34,799
or none and so there's never the case
 

995
00:19:34,799 --> 00:19:36,230
or none and so there's never the case
that basically these instructions in the

996
00:19:36,230 --> 00:19:36,240
that basically these instructions in the
 

997
00:19:36,240 --> 00:19:37,190
that basically these instructions in the
critical section

998
00:19:37,190 --> 00:19:37,200
critical section
 

999
00:19:37,200 --> 00:19:39,350
critical section
are interleaved as in the way that we

1000
00:19:39,350 --> 00:19:39,360
are interleaved as in the way that we
 

1001
00:19:39,360 --> 00:19:40,789
are interleaved as in the way that we
saw in the race condition

1002
00:19:40,789 --> 00:19:40,799
saw in the race condition
 

1003
00:19:40,799 --> 00:19:42,710
saw in the race condition
and actually exactly that is what avoids

1004
00:19:42,710 --> 00:19:42,720
and actually exactly that is what avoids
 

1005
00:19:42,720 --> 00:19:48,070
and actually exactly that is what avoids
these race conditions

1006
00:19:48,070 --> 00:19:48,080

 

1007
00:19:48,080 --> 00:19:55,190

any questions about the lock abstraction

1008
00:19:55,190 --> 00:19:55,200

 

1009
00:19:55,200 --> 00:20:00,310

now programs typically have

1010
00:20:00,310 --> 00:20:00,320

 

1011
00:20:00,320 --> 00:20:08,070

many locks in fact xv6 has many locks

1012
00:20:08,070 --> 00:20:08,080

 

1013
00:20:08,080 --> 00:20:09,909

and the reason to have many locks is

1014
00:20:09,909 --> 00:20:09,919
and the reason to have many locks is
 

1015
00:20:09,919 --> 00:20:11,430
and the reason to have many locks is
because you know even the you know the

1016
00:20:11,430 --> 00:20:11,440
because you know even the you know the
 

1017
00:20:11,440 --> 00:20:12,710
because you know even the you know the
the the

1018
00:20:12,710 --> 00:20:12,720
the the
 

1019
00:20:12,720 --> 00:20:14,789
the the
walk serializes you know the execution

1020
00:20:14,789 --> 00:20:14,799
walk serializes you know the execution
 

1021
00:20:14,799 --> 00:20:17,350
walk serializes you know the execution
right the two processes you know want to

1022
00:20:17,350 --> 00:20:17,360
right the two processes you know want to
 

1023
00:20:17,360 --> 00:20:18,789
right the two processes you know want to
enter this critical section only one

1024
00:20:18,789 --> 00:20:18,799
enter this critical section only one
 

1025
00:20:18,799 --> 00:20:21,190
enter this critical section only one
succeeds then the other one

1026
00:20:21,190 --> 00:20:21,200
succeeds then the other one
 

1027
00:20:21,200 --> 00:20:22,549
succeeds then the other one
runs that critical section after the

1028
00:20:22,549 --> 00:20:22,559
runs that critical section after the
 

1029
00:20:22,559 --> 00:20:24,789
runs that critical section after the
first one

1030
00:20:24,789 --> 00:20:24,799
first one
 

1031
00:20:24,799 --> 00:20:26,630
first one
finishes so there's no sort of

1032
00:20:26,630 --> 00:20:26,640
finishes so there's no sort of
 

1033
00:20:26,640 --> 00:20:28,710
finishes so there's no sort of
parallelism at all

1034
00:20:28,710 --> 00:20:28,720
parallelism at all
 

1035
00:20:28,720 --> 00:20:31,110
parallelism at all
so if the kernel had only one lock you

1036
00:20:31,110 --> 00:20:31,120
so if the kernel had only one lock you
 

1037
00:20:31,120 --> 00:20:32,549
so if the kernel had only one lock you
know which is typically called the

1038
00:20:32,549 --> 00:20:32,559
know which is typically called the
 

1039
00:20:32,559 --> 00:20:34,710
know which is typically called the
big kernel lock then basically every

1040
00:20:34,710 --> 00:20:34,720
big kernel lock then basically every
 

1041
00:20:34,720 --> 00:20:35,909
big kernel lock then basically every
system call

1042
00:20:35,909 --> 00:20:35,919
system call
 

1043
00:20:35,919 --> 00:20:37,669
system call
uh in this uh in the kernel would be

1044
00:20:37,669 --> 00:20:37,679
uh in this uh in the kernel would be
 

1045
00:20:37,679 --> 00:20:39,110
uh in this uh in the kernel would be
serialized you know you would

1046
00:20:39,110 --> 00:20:39,120
serialized you know you would
 

1047
00:20:39,120 --> 00:20:41,590
serialized you know you would
assist the call which one start gets the

1048
00:20:41,590 --> 00:20:41,600
assist the call which one start gets the
 

1049
00:20:41,600 --> 00:20:43,270
assist the call which one start gets the
one the big kernel lock you know does

1050
00:20:43,270 --> 00:20:43,280
one the big kernel lock you know does
 

1051
00:20:43,280 --> 00:20:44,230
one the big kernel lock you know does
whatever it needs to do

1052
00:20:44,230 --> 00:20:44,240
whatever it needs to do
 

1053
00:20:44,240 --> 00:20:45,750
whatever it needs to do
and then releases the big kernel lock

1054
00:20:45,750 --> 00:20:45,760
and then releases the big kernel lock
 

1055
00:20:45,760 --> 00:20:48,470
and then releases the big kernel lock
and then basically research use space

1056
00:20:48,470 --> 00:20:48,480
and then basically research use space
 

1057
00:20:48,480 --> 00:20:49,669
and then basically research use space
and then the second system called the

1058
00:20:49,669 --> 00:20:49,679
and then the second system called the
 

1059
00:20:49,679 --> 00:20:51,830
and then the second system called the
drum so we have an apparel application

1060
00:20:51,830 --> 00:20:51,840
drum so we have an apparel application
 

1061
00:20:51,840 --> 00:20:53,270
drum so we have an apparel application
that runs you know once we run system

1062
00:20:53,270 --> 00:20:53,280
that runs you know once we run system
 

1063
00:20:53,280 --> 00:20:54,310
that runs you know once we run system
calls in parallel

1064
00:20:54,310 --> 00:20:54,320
calls in parallel
 

1065
00:20:54,320 --> 00:20:56,549
calls in parallel
suddenly you know all the system calls

1066
00:20:56,549 --> 00:20:56,559
suddenly you know all the system calls
 

1067
00:20:56,559 --> 00:20:58,549
suddenly you know all the system calls
actually run serially if we had only one

1068
00:20:58,549 --> 00:20:58,559
actually run serially if we had only one
 

1069
00:20:58,559 --> 00:20:59,830
actually run serially if we had only one
lock

1070
00:20:59,830 --> 00:20:59,840
lock
 

1071
00:20:59,840 --> 00:21:02,070
lock
and so typically a program like you know

1072
00:21:02,070 --> 00:21:02,080
and so typically a program like you know
 

1073
00:21:02,080 --> 00:21:03,110
and so typically a program like you know
xp6 has

1074
00:21:03,110 --> 00:21:03,120
xp6 has
 

1075
00:21:03,120 --> 00:21:04,950
xp6 has
you know many locks because at least you

1076
00:21:04,950 --> 00:21:04,960
you know many locks because at least you
 

1077
00:21:04,960 --> 00:21:09,590
you know many locks because at least you
know when you get some parallelism

1078
00:21:09,590 --> 00:21:09,600

 

1079
00:21:09,600 --> 00:21:13,270

because

1080
00:21:13,270 --> 00:21:13,280

 

1081
00:21:13,280 --> 00:21:15,029

you know if you have two system calls

1082
00:21:15,029 --> 00:21:15,039
you know if you have two system calls
 

1083
00:21:15,039 --> 00:21:17,350
you know if you have two system calls
for example use two different locks

1084
00:21:17,350 --> 00:21:17,360
for example use two different locks
 

1085
00:21:17,360 --> 00:21:19,750
for example use two different locks
uh then you know they can actually run

1086
00:21:19,750 --> 00:21:19,760
uh then you know they can actually run
 

1087
00:21:19,760 --> 00:21:21,270
uh then you know they can actually run
uh completely in parallel

1088
00:21:21,270 --> 00:21:21,280
uh completely in parallel
 

1089
00:21:21,280 --> 00:21:24,549
uh completely in parallel
uh without any uh you know serialization

1090
00:21:24,549 --> 00:21:24,559
uh without any uh you know serialization
 

1091
00:21:24,559 --> 00:21:26,310
uh without any uh you know serialization
uh because they're basically you know uh

1092
00:21:26,310 --> 00:21:26,320
uh because they're basically you know uh
 

1093
00:21:26,320 --> 00:21:31,110
uh because they're basically you know uh
using diff blocks to serialize

1094
00:21:31,110 --> 00:21:31,120
using diff blocks to serialize
 

1095
00:21:31,120 --> 00:21:34,470
using diff blocks to serialize
now uh there's

1096
00:21:34,470 --> 00:21:34,480
now uh there's
 

1097
00:21:34,480 --> 00:21:37,669
now uh there's
sort of a couple of important points uh

1098
00:21:37,669 --> 00:21:37,679
sort of a couple of important points uh
 

1099
00:21:37,679 --> 00:21:40,310
sort of a couple of important points uh
the nobody really sort of enforces in

1100
00:21:40,310 --> 00:21:40,320
the nobody really sort of enforces in
 

1101
00:21:40,320 --> 00:21:41,190
the nobody really sort of enforces in
this interface

1102
00:21:41,190 --> 00:21:41,200
this interface
 

1103
00:21:41,200 --> 00:21:43,190
this interface
you know that you put in the acquires

1104
00:21:43,190 --> 00:21:43,200
you know that you put in the acquires
 

1105
00:21:43,200 --> 00:21:44,390
you know that you put in the acquires
and releases you know it's up to the

1106
00:21:44,390 --> 00:21:44,400
and releases you know it's up to the
 

1107
00:21:44,400 --> 00:21:46,149
and releases you know it's up to the
program to do so

1108
00:21:46,149 --> 00:21:46,159
program to do so
 

1109
00:21:46,159 --> 00:21:47,669
program to do so
so if you want some particular piece of

1110
00:21:47,669 --> 00:21:47,679
so if you want some particular piece of
 

1111
00:21:47,679 --> 00:21:49,590
so if you want some particular piece of
code to be

1112
00:21:49,590 --> 00:21:49,600
code to be
 

1113
00:21:49,600 --> 00:21:52,310
code to be
atomic then it's up to the developer to

1114
00:21:52,310 --> 00:21:52,320
atomic then it's up to the developer to
 

1115
00:21:52,320 --> 00:21:52,950
atomic then it's up to the developer to
actually

1116
00:21:52,950 --> 00:21:52,960
actually
 

1117
00:21:52,960 --> 00:21:55,430
actually
put these acquire releases in and you

1118
00:21:55,430 --> 00:21:55,440
put these acquire releases in and you
 

1119
00:21:55,440 --> 00:21:57,590
put these acquire releases in and you
know clearly as we'll see

1120
00:21:57,590 --> 00:21:57,600
know clearly as we'll see
 

1121
00:21:57,600 --> 00:22:00,789
know clearly as we'll see
if you can imagine um and that is a

1122
00:22:00,789 --> 00:22:00,799
if you can imagine um and that is a
 

1123
00:22:00,799 --> 00:22:01,350
if you can imagine um and that is a
little bit uh

1124
00:22:01,350 --> 00:22:01,360
little bit uh
 

1125
00:22:01,360 --> 00:22:02,870
little bit uh
it can be tricky and so it's important

1126
00:22:02,870 --> 00:22:02,880
it can be tricky and so it's important
 

1127
00:22:02,880 --> 00:22:04,470
it can be tricky and so it's important
to realize that you know the locking is

1128
00:22:04,470 --> 00:22:04,480
to realize that you know the locking is
 

1129
00:22:04,480 --> 00:22:06,870
to realize that you know the locking is
not actually done automatically for you

1130
00:22:06,870 --> 00:22:06,880
not actually done automatically for you
 

1131
00:22:06,880 --> 00:22:09,350
not actually done automatically for you
uh it's all up to the developer to

1132
00:22:09,350 --> 00:22:09,360
uh it's all up to the developer to
 

1133
00:22:09,360 --> 00:22:10,230
uh it's all up to the developer to
figure out to

1134
00:22:10,230 --> 00:22:10,240
figure out to
 

1135
00:22:10,240 --> 00:22:14,070
figure out to
associate with data structures

1136
00:22:14,070 --> 00:22:14,080
associate with data structures
 

1137
00:22:14,080 --> 00:22:16,470
associate with data structures
and ensuring that you know the

1138
00:22:16,470 --> 00:22:16,480
and ensuring that you know the
 

1139
00:22:16,480 --> 00:22:18,470
and ensuring that you know the
appropriate acquired releases

1140
00:22:18,470 --> 00:22:18,480
appropriate acquired releases
 

1141
00:22:18,480 --> 00:22:23,029
appropriate acquired releases
are dead

1142
00:22:23,029 --> 00:22:23,039

 

1143
00:22:23,039 --> 00:22:25,110

um so clearly it's the case like you

1144
00:22:25,110 --> 00:22:25,120
um so clearly it's the case like you
 

1145
00:22:25,120 --> 00:22:26,470
um so clearly it's the case like you
know the the

1146
00:22:26,470 --> 00:22:26,480
know the the
 

1147
00:22:26,480 --> 00:22:29,909
know the the
uh blocks limit imperialism and

1148
00:22:29,909 --> 00:22:29,919
uh blocks limit imperialism and
 

1149
00:22:29,919 --> 00:22:31,830
uh blocks limit imperialism and
therefore their limit performance

1150
00:22:31,830 --> 00:22:31,840
therefore their limit performance
 

1151
00:22:31,840 --> 00:22:33,750
therefore their limit performance
uh and so then i mean this raises the

1152
00:22:33,750 --> 00:22:33,760
uh and so then i mean this raises the
 

1153
00:22:33,760 --> 00:22:42,630
uh and so then i mean this raises the
question when to lock

1154
00:22:42,630 --> 00:22:42,640

 

1155
00:22:42,640 --> 00:22:43,990

and you know i'm going to give you sort

1156
00:22:43,990 --> 00:22:44,000
and you know i'm going to give you sort
 

1157
00:22:44,000 --> 00:22:47,590
and you know i'm going to give you sort
of a very conservative rule

1158
00:22:47,590 --> 00:22:47,600
of a very conservative rule
 

1159
00:22:47,600 --> 00:22:49,029
of a very conservative rule
but that's a good one as a starting

1160
00:22:49,029 --> 00:22:49,039
but that's a good one as a starting
 

1161
00:22:49,039 --> 00:22:50,630
but that's a good one as a starting
point to think about things

1162
00:22:50,630 --> 00:22:50,640
point to think about things
 

1163
00:22:50,640 --> 00:22:56,870
point to think about things
so to conserve the rule

1164
00:22:56,870 --> 00:22:56,880

 

1165
00:22:56,880 --> 00:23:00,230

or maybe guideline is a better uh

1166
00:23:00,230 --> 00:23:00,240
or maybe guideline is a better uh
 

1167
00:23:00,240 --> 00:23:02,149
or maybe guideline is a better uh
phrasing is that if you know two

1168
00:23:02,149 --> 00:23:02,159
phrasing is that if you know two
 

1169
00:23:02,159 --> 00:23:05,830
phrasing is that if you know two
processes

1170
00:23:05,830 --> 00:23:05,840

 

1171
00:23:05,840 --> 00:23:09,110

two processes access

1172
00:23:09,110 --> 00:23:09,120
two processes access
 

1173
00:23:09,120 --> 00:23:17,110
two processes access
a shared data structure

1174
00:23:17,110 --> 00:23:17,120

 

1175
00:23:17,120 --> 00:23:20,950

and one is a and one of them is a

1176
00:23:20,950 --> 00:23:20,960
and one is a and one of them is a
 

1177
00:23:20,960 --> 00:23:23,830
and one is a and one of them is a
writer or an updater so meaning it's

1178
00:23:23,830 --> 00:23:23,840
writer or an updater so meaning it's
 

1179
00:23:23,840 --> 00:23:25,270
writer or an updater so meaning it's
actually going to modify the shared data

1180
00:23:25,270 --> 00:23:25,280
actually going to modify the shared data
 

1181
00:23:25,280 --> 00:23:27,110
actually going to modify the shared data
structure

1182
00:23:27,110 --> 00:23:27,120
structure
 

1183
00:23:27,120 --> 00:23:34,830
structure
then you need a lock for that data

1184
00:23:34,830 --> 00:23:34,840

 

1185
00:23:34,840 --> 00:23:39,350

structure

1186
00:23:39,350 --> 00:23:39,360

 

1187
00:23:39,360 --> 00:23:42,149

uh so this is a conservative rule sort

1188
00:23:42,149 --> 00:23:42,159
uh so this is a conservative rule sort
 

1189
00:23:42,159 --> 00:23:43,830
uh so this is a conservative rule sort
of like a red flag you know when you're

1190
00:23:43,830 --> 00:23:43,840
of like a red flag you know when you're
 

1191
00:23:43,840 --> 00:23:44,630
of like a red flag you know when you're
programming

1192
00:23:44,630 --> 00:23:44,640
programming
 

1193
00:23:44,640 --> 00:23:47,750
programming
and you have a data structure that was

1194
00:23:47,750 --> 00:23:47,760
and you have a data structure that was
 

1195
00:23:47,760 --> 00:23:49,590
and you have a data structure that was
accessed by multiple processes and one

1196
00:23:49,590 --> 00:23:49,600
accessed by multiple processes and one
 

1197
00:23:49,600 --> 00:23:50,470
accessed by multiple processes and one
can be a writer

1198
00:23:50,470 --> 00:23:50,480
can be a writer
 

1199
00:23:50,480 --> 00:23:51,909
can be a writer
at that point you should be thinking

1200
00:23:51,909 --> 00:23:51,919
at that point you should be thinking
 

1201
00:23:51,919 --> 00:23:53,350
at that point you should be thinking
okay there's a possibility of a race

1202
00:23:53,350 --> 00:23:53,360
okay there's a possibility of a race
 

1203
00:23:53,360 --> 00:23:53,909
okay there's a possibility of a race
condition

1204
00:23:53,909 --> 00:23:53,919
condition
 

1205
00:23:53,919 --> 00:23:55,430
condition
we want to avoid this in a race

1206
00:23:55,430 --> 00:23:55,440
we want to avoid this in a race
 

1207
00:23:55,440 --> 00:23:57,669
we want to avoid this in a race
condition i'll just stick it in lock

1208
00:23:57,669 --> 00:23:57,679
condition i'll just stick it in lock
 

1209
00:23:57,679 --> 00:24:00,390
condition i'll just stick it in lock
i will use a lock to guarantee that this

1210
00:24:00,390 --> 00:24:00,400
i will use a lock to guarantee that this
 

1211
00:24:00,400 --> 00:24:02,950
i will use a lock to guarantee that this
race condition can't happen

1212
00:24:02,950 --> 00:24:02,960
race condition can't happen
 

1213
00:24:02,960 --> 00:24:05,430
race condition can't happen
but you know there's rulers uh in some

1214
00:24:05,430 --> 00:24:05,440
but you know there's rulers uh in some
 

1215
00:24:05,440 --> 00:24:10,870
but you know there's rulers uh in some
ways too strict

1216
00:24:10,870 --> 00:24:10,880

 

1217
00:24:10,880 --> 00:24:12,789

uh there are cases where you know it's

1218
00:24:12,789 --> 00:24:12,799
uh there are cases where you know it's
 

1219
00:24:12,799 --> 00:24:14,950
uh there are cases where you know it's
okay if two processes actually share

1220
00:24:14,950 --> 00:24:14,960
okay if two processes actually share
 

1221
00:24:14,960 --> 00:24:17,350
okay if two processes actually share
data structure and one is a writer

1222
00:24:17,350 --> 00:24:17,360
data structure and one is a writer
 

1223
00:24:17,360 --> 00:24:19,029
data structure and one is a writer
in particular there are sort of styles

1224
00:24:19,029 --> 00:24:19,039
in particular there are sort of styles
 

1225
00:24:19,039 --> 00:24:20,950
in particular there are sort of styles
of programming called block free

1226
00:24:20,950 --> 00:24:20,960
of programming called block free
 

1227
00:24:20,960 --> 00:24:22,710
of programming called block free
programming

1228
00:24:22,710 --> 00:24:22,720
programming
 

1229
00:24:22,720 --> 00:24:25,029
programming
that actually totally were just where

1230
00:24:25,029 --> 00:24:25,039
that actually totally were just where
 

1231
00:24:25,039 --> 00:24:30,830
that actually totally were just where
these kinds of scenarios actually do

1232
00:24:30,830 --> 00:24:30,840

 

1233
00:24:30,840 --> 00:24:32,230

happen

1234
00:24:32,230 --> 00:24:32,240
happen
 

1235
00:24:32,240 --> 00:24:33,350
happen
you might want to do log free

1236
00:24:33,350 --> 00:24:33,360
you might want to do log free
 

1237
00:24:33,360 --> 00:24:34,630
you might want to do log free
programming just basically to get better

1238
00:24:34,630 --> 00:24:34,640
programming just basically to get better
 

1239
00:24:34,640 --> 00:24:35,590
programming just basically to get better
performance or

1240
00:24:35,590 --> 00:24:35,600
performance or
 

1241
00:24:35,600 --> 00:24:38,710
performance or
more parallelism uh

1242
00:24:38,710 --> 00:24:38,720
more parallelism uh
 

1243
00:24:38,720 --> 00:24:41,269
more parallelism uh
mark free program is tricky uh even more

1244
00:24:41,269 --> 00:24:41,279
mark free program is tricky uh even more
 

1245
00:24:41,279 --> 00:24:43,350
mark free program is tricky uh even more
tricky than programming with locks

1246
00:24:43,350 --> 00:24:43,360
tricky than programming with locks
 

1247
00:24:43,360 --> 00:24:44,950
tricky than programming with locks
and you know we'll talk about it at the

1248
00:24:44,950 --> 00:24:44,960
and you know we'll talk about it at the
 

1249
00:24:44,960 --> 00:24:47,830
and you know we'll talk about it at the
end of the semester we'll to study some

1250
00:24:47,830 --> 00:24:47,840
end of the semester we'll to study some
 

1251
00:24:47,840 --> 00:24:50,230
end of the semester we'll to study some
lock-free styles of the programming that

1252
00:24:50,230 --> 00:24:50,240
lock-free styles of the programming that
 

1253
00:24:50,240 --> 00:24:51,590
lock-free styles of the programming that
particularly are

1254
00:24:51,590 --> 00:24:51,600
particularly are
 

1255
00:24:51,600 --> 00:24:54,630
particularly are
common in operating system kernels but

1256
00:24:54,630 --> 00:24:54,640
common in operating system kernels but
 

1257
00:24:54,640 --> 00:24:56,230
common in operating system kernels but
basically for this lecture

1258
00:24:56,230 --> 00:24:56,240
basically for this lecture
 

1259
00:24:56,240 --> 00:24:58,310
basically for this lecture
and for most of the rest of the semester

1260
00:24:58,310 --> 00:24:58,320
and for most of the rest of the semester
 

1261
00:24:58,320 --> 00:24:59,669
and for most of the rest of the semester
we're going to be thinking about the

1262
00:24:59,669 --> 00:24:59,679
we're going to be thinking about the
 

1263
00:24:59,679 --> 00:25:00,710
we're going to be thinking about the
case where

1264
00:25:00,710 --> 00:25:00,720
case where
 

1265
00:25:00,720 --> 00:25:03,990
case where
uh using locks you know to uh

1266
00:25:03,990 --> 00:25:04,000
uh using locks you know to uh
 

1267
00:25:04,000 --> 00:25:07,430
uh using locks you know to uh
control uh sharing um and that's hard

1268
00:25:07,430 --> 00:25:07,440
control uh sharing um and that's hard
 

1269
00:25:07,440 --> 00:25:07,830
control uh sharing um and that's hard
enough

1270
00:25:07,830 --> 00:25:07,840
enough
 

1271
00:25:07,840 --> 00:25:09,909
enough
you know just using locks it's not that

1272
00:25:09,909 --> 00:25:09,919
you know just using locks it's not that
 

1273
00:25:09,919 --> 00:25:12,470
you know just using locks it's not that
straightforward either

1274
00:25:12,470 --> 00:25:12,480
straightforward either
 

1275
00:25:12,480 --> 00:25:14,710
straightforward either
um so it's in one hand a little bit uh

1276
00:25:14,710 --> 00:25:14,720
um so it's in one hand a little bit uh
 

1277
00:25:14,720 --> 00:25:15,750
um so it's in one hand a little bit uh
too strict

1278
00:25:15,750 --> 00:25:15,760
too strict
 

1279
00:25:15,760 --> 00:25:17,510
too strict
uh because it's not always the case that

1280
00:25:17,510 --> 00:25:17,520
uh because it's not always the case that
 

1281
00:25:17,520 --> 00:25:20,230
uh because it's not always the case that
you uh needed also some cases to lose

1282
00:25:20,230 --> 00:25:20,240
you uh needed also some cases to lose
 

1283
00:25:20,240 --> 00:25:23,510
you uh needed also some cases to lose
uh you might just

1284
00:25:23,510 --> 00:25:23,520
uh you might just
 

1285
00:25:23,520 --> 00:25:26,870
uh you might just
um you might even

1286
00:25:26,870 --> 00:25:26,880
um you might even
 

1287
00:25:26,880 --> 00:25:28,390
um you might even
lose you want to actually maybe want to

1288
00:25:28,390 --> 00:25:28,400
lose you want to actually maybe want to
 

1289
00:25:28,400 --> 00:25:30,470
lose you want to actually maybe want to
use locks you know to enforce some other

1290
00:25:30,470 --> 00:25:30,480
use locks you know to enforce some other
 

1291
00:25:30,480 --> 00:25:33,430
use locks you know to enforce some other
uh properties like if you look at printf

1292
00:25:33,430 --> 00:25:33,440
uh properties like if you look at printf
 

1293
00:25:33,440 --> 00:25:35,669
uh properties like if you look at printf
uh

1294
00:25:35,669 --> 00:25:35,679
uh
 

1295
00:25:35,679 --> 00:25:38,710
uh
if we pass a stream to printf uh you

1296
00:25:38,710 --> 00:25:38,720
if we pass a stream to printf uh you
 

1297
00:25:38,720 --> 00:25:39,190
if we pass a stream to printf uh you
know the

1298
00:25:39,190 --> 00:25:39,200
know the
 

1299
00:25:39,200 --> 00:25:41,190
know the
xv6 kernel tries to at least you know

1300
00:25:41,190 --> 00:25:41,200
xv6 kernel tries to at least you know
 

1301
00:25:41,200 --> 00:25:42,710
xv6 kernel tries to at least you know
get the whole string

1302
00:25:42,710 --> 00:25:42,720
get the whole string
 

1303
00:25:42,720 --> 00:25:45,909
get the whole string
to be printed atomically and you know

1304
00:25:45,909 --> 00:25:45,919
to be printed atomically and you know
 

1305
00:25:45,919 --> 00:25:47,029
to be printed atomically and you know
there's no shared data structure

1306
00:25:47,029 --> 00:25:47,039
there's no shared data structure
 

1307
00:25:47,039 --> 00:25:48,070
there's no shared data structure
involved

1308
00:25:48,070 --> 00:25:48,080
involved
 

1309
00:25:48,080 --> 00:25:50,230
involved
but it's still useful to actually use a

1310
00:25:50,230 --> 00:25:50,240
but it's still useful to actually use a
 

1311
00:25:50,240 --> 00:25:51,590
but it's still useful to actually use a
lock in that particular case

1312
00:25:51,590 --> 00:25:51,600
lock in that particular case
 

1313
00:25:51,600 --> 00:25:52,789
lock in that particular case
because we want the output to be

1314
00:25:52,789 --> 00:25:52,799
because we want the output to be
 

1315
00:25:52,799 --> 00:25:54,789
because we want the output to be
serialized so

1316
00:25:54,789 --> 00:25:54,799
serialized so
 

1317
00:25:54,799 --> 00:25:56,630
serialized so
this rule is not you know perfect but

1318
00:25:56,630 --> 00:25:56,640
this rule is not you know perfect but
 

1319
00:25:56,640 --> 00:25:59,909
this rule is not you know perfect but
it's a pretty good guideline

1320
00:25:59,909 --> 00:25:59,919

 

1321
00:25:59,919 --> 00:26:04,789

any questions about this rule

1322
00:26:04,789 --> 00:26:04,799

 

1323
00:26:04,799 --> 00:26:06,789

um i had a question not about this rule

1324
00:26:06,789 --> 00:26:06,799
um i had a question not about this rule
 

1325
00:26:06,799 --> 00:26:07,909
um i had a question not about this rule
but

1326
00:26:07,909 --> 00:26:07,919
but
 

1327
00:26:07,919 --> 00:26:09,990
but
isn't it possible that two processes

1328
00:26:09,990 --> 00:26:10,000
isn't it possible that two processes
 

1329
00:26:10,000 --> 00:26:11,830
isn't it possible that two processes
could acquire the lock at the same time

1330
00:26:11,830 --> 00:26:11,840
could acquire the lock at the same time
 

1331
00:26:11,840 --> 00:26:13,350
could acquire the lock at the same time
and so

1332
00:26:13,350 --> 00:26:13,360
and so
 

1333
00:26:13,360 --> 00:26:16,390
and so
would be able to modify the structure

1334
00:26:16,390 --> 00:26:16,400
would be able to modify the structure
 

1335
00:26:16,400 --> 00:26:18,310
would be able to modify the structure
yeah no so so part of the sort of

1336
00:26:18,310 --> 00:26:18,320
yeah no so so part of the sort of
 

1337
00:26:18,320 --> 00:26:20,149
yeah no so so part of the sort of
contract of the lock abstraction is is

1338
00:26:20,149 --> 00:26:20,159
contract of the lock abstraction is is
 

1339
00:26:20,159 --> 00:26:21,830
contract of the lock abstraction is is
that it's impossible for two

1340
00:26:21,830 --> 00:26:21,840
that it's impossible for two
 

1341
00:26:21,840 --> 00:26:23,750
that it's impossible for two
uh processes to acquire a lock at the

1342
00:26:23,750 --> 00:26:23,760
uh processes to acquire a lock at the
 

1343
00:26:23,760 --> 00:26:25,269
uh processes to acquire a lock at the
same time

1344
00:26:25,269 --> 00:26:25,279
same time
 

1345
00:26:25,279 --> 00:26:28,870
same time
uh if uh the the rule is that there's

1346
00:26:28,870 --> 00:26:28,880
uh if uh the the rule is that there's
 

1347
00:26:28,880 --> 00:26:31,110
uh if uh the the rule is that there's
ever there's no there's never a case

1348
00:26:31,110 --> 00:26:31,120
ever there's no there's never a case
 

1349
00:26:31,120 --> 00:26:32,070
ever there's no there's never a case
where two

1350
00:26:32,070 --> 00:26:32,080
where two
 

1351
00:26:32,080 --> 00:26:34,230
where two
processes actually acquire the lock uh

1352
00:26:34,230 --> 00:26:34,240
processes actually acquire the lock uh
 

1353
00:26:34,240 --> 00:26:35,909
processes actually acquire the lock uh
can hold the lock at the same time

1354
00:26:35,909 --> 00:26:35,919
can hold the lock at the same time
 

1355
00:26:35,919 --> 00:26:37,350
can hold the lock at the same time
we'll see in a second how to implement

1356
00:26:37,350 --> 00:26:37,360
we'll see in a second how to implement
 

1357
00:26:37,360 --> 00:26:39,590
we'll see in a second how to implement
that but the api or the specification

1358
00:26:39,590 --> 00:26:39,600
that but the api or the specification
 

1359
00:26:39,600 --> 00:26:40,310
that but the api or the specification
for require

1360
00:26:40,310 --> 00:26:40,320
for require
 

1361
00:26:40,320 --> 00:26:42,310
for require
is there's only one lock holder at any

1362
00:26:42,310 --> 00:26:42,320
is there's only one lock holder at any
 

1363
00:26:42,320 --> 00:26:45,029
is there's only one lock holder at any
given point in time or zero

1364
00:26:45,029 --> 00:26:45,039
given point in time or zero
 

1365
00:26:45,039 --> 00:26:49,269
given point in time or zero
nice

1366
00:26:49,269 --> 00:26:49,279

 

1367
00:26:49,279 --> 00:26:52,549

um okay so uh you know if you see

1368
00:26:52,549 --> 00:26:52,559
um okay so uh you know if you see
 

1369
00:26:52,559 --> 00:26:54,789
um okay so uh you know if you see
the programming block is here slightly

1370
00:26:54,789 --> 00:26:54,799
the programming block is here slightly
 

1371
00:26:54,799 --> 00:26:56,230
the programming block is here slightly
uh it could be

1372
00:26:56,230 --> 00:26:56,240
uh it could be
 

1373
00:26:56,240 --> 00:26:57,430
uh it could be
problematic because of these race

1374
00:26:57,430 --> 00:26:57,440
problematic because of these race
 

1375
00:26:57,440 --> 00:27:00,070
problematic because of these race
conditions um

1376
00:27:00,070 --> 00:27:00,080
conditions um
 

1377
00:27:00,080 --> 00:27:01,990
conditions um
yeah now of course the particular race

1378
00:27:01,990 --> 00:27:02,000
yeah now of course the particular race
 

1379
00:27:02,000 --> 00:27:03,190
yeah now of course the particular race
condition that we looked at

1380
00:27:03,190 --> 00:27:03,200
condition that we looked at
 

1381
00:27:03,200 --> 00:27:07,190
condition that we looked at
uh in k3 or that we created in crayfi

1382
00:27:07,190 --> 00:27:07,200
uh in k3 or that we created in crayfi
 

1383
00:27:07,200 --> 00:27:08,870
uh in k3 or that we created in crayfi
which are like easily spottable in some

1384
00:27:08,870 --> 00:27:08,880
which are like easily spottable in some
 

1385
00:27:08,880 --> 00:27:10,470
which are like easily spottable in some
ways and the fact you know if you use a

1386
00:27:10,470 --> 00:27:10,480
ways and the fact you know if you use a
 

1387
00:27:10,480 --> 00:27:11,909
ways and the fact you know if you use a
race detection tool

1388
00:27:11,909 --> 00:27:11,919
race detection tool
 

1389
00:27:11,919 --> 00:27:14,710
race detection tool
uh it would immediately find it um but

1390
00:27:14,710 --> 00:27:14,720
uh it would immediately find it um but
 

1391
00:27:14,720 --> 00:27:15,909
uh it would immediately find it um but
you know they're more tricky

1392
00:27:15,909 --> 00:27:15,919
you know they're more tricky
 

1393
00:27:15,919 --> 00:27:19,269
you know they're more tricky
cases and so you may want to wonder like

1394
00:27:19,269 --> 00:27:19,279
cases and so you may want to wonder like
 

1395
00:27:19,279 --> 00:27:20,789
cases and so you may want to wonder like
why couldn't you like make you know

1396
00:27:20,789 --> 00:27:20,799
why couldn't you like make you know
 

1397
00:27:20,799 --> 00:27:22,310
why couldn't you like make you know
could you make locks

1398
00:27:22,310 --> 00:27:22,320
could you make locks
 

1399
00:27:22,320 --> 00:27:31,110
could you make locks
or could we make locking automatic

1400
00:27:31,110 --> 00:27:31,120

 

1401
00:27:31,120 --> 00:27:32,630

so like if you follow this sort of

1402
00:27:32,630 --> 00:27:32,640
so like if you follow this sort of
 

1403
00:27:32,640 --> 00:27:34,389
so like if you follow this sort of
simple rule that i just stated you know

1404
00:27:34,389 --> 00:27:34,399
simple rule that i just stated you know
 

1405
00:27:34,399 --> 00:27:35,909
simple rule that i just stated you know
then if ever we see a shared data

1406
00:27:35,909 --> 00:27:35,919
then if ever we see a shared data
 

1407
00:27:35,919 --> 00:27:36,789
then if ever we see a shared data
structure

1408
00:27:36,789 --> 00:27:36,799
structure
 

1409
00:27:36,799 --> 00:27:38,630
structure
then you know operations and that shared

1410
00:27:38,630 --> 00:27:38,640
then you know operations and that shared
 

1411
00:27:38,640 --> 00:27:39,990
then you know operations and that shared
data structure basically should require

1412
00:27:39,990 --> 00:27:40,000
data structure basically should require
 

1413
00:27:40,000 --> 00:27:41,190
data structure basically should require
a walk you know we should

1414
00:27:41,190 --> 00:27:41,200
a walk you know we should
 

1415
00:27:41,200 --> 00:27:42,710
a walk you know we should
we should associate a lot with the data

1416
00:27:42,710 --> 00:27:42,720
we should associate a lot with the data
 

1417
00:27:42,720 --> 00:27:44,230
we should associate a lot with the data
structure and then every operation

1418
00:27:44,230 --> 00:27:44,240
structure and then every operation
 

1419
00:27:44,240 --> 00:27:49,110
structure and then every operation
actually uh uh uh that is uh

1420
00:27:49,110 --> 00:27:49,120
actually uh uh uh that is uh
 

1421
00:27:49,120 --> 00:27:52,389
actually uh uh uh that is uh
that's performed on that uh uh

1422
00:27:52,389 --> 00:27:52,399
that's performed on that uh uh
 

1423
00:27:52,399 --> 00:27:53,590
that's performed on that uh uh
on that data structure basically

1424
00:27:53,590 --> 00:27:53,600
on that data structure basically
 

1425
00:27:53,600 --> 00:27:55,669
on that data structure basically
required to release the lock so

1426
00:27:55,669 --> 00:27:55,679
required to release the lock so
 

1427
00:27:55,679 --> 00:27:57,990
required to release the lock so
one way to think about it maybe in xv6

1428
00:27:57,990 --> 00:27:58,000
one way to think about it maybe in xv6
 

1429
00:27:58,000 --> 00:28:00,549
one way to think about it maybe in xv6
terms like every struct

1430
00:28:00,549 --> 00:28:00,559
terms like every struct
 

1431
00:28:00,559 --> 00:28:04,470
terms like every struct
you know has a lock

1432
00:28:04,470 --> 00:28:04,480

 

1433
00:28:04,480 --> 00:28:07,269

and uh and that lock is automatically

1434
00:28:07,269 --> 00:28:07,279
and uh and that lock is automatically
 

1435
00:28:07,279 --> 00:28:09,029
and uh and that lock is automatically
required when we do anything related to

1436
00:28:09,029 --> 00:28:09,039
required when we do anything related to
 

1437
00:28:09,039 --> 00:28:09,669
required when we do anything related to
that struct

1438
00:28:09,669 --> 00:28:09,679
that struct
 

1439
00:28:09,679 --> 00:28:12,549
that struct
and this turns out to be too rigid and

1440
00:28:12,549 --> 00:28:12,559
and this turns out to be too rigid and
 

1441
00:28:12,559 --> 00:28:13,669
and this turns out to be too rigid and
this is why you know

1442
00:28:13,669 --> 00:28:13,679
this is why you know
 

1443
00:28:13,679 --> 00:28:16,789
this is why you know
walking can not really be uh automatic

1444
00:28:16,789 --> 00:28:16,799
walking can not really be uh automatic
 

1445
00:28:16,799 --> 00:28:19,350
walking can not really be uh automatic
so so we've been operating systems an

1446
00:28:19,350 --> 00:28:19,360
so so we've been operating systems an
 

1447
00:28:19,360 --> 00:28:20,870
so so we've been operating systems an
example from one operating system is the

1448
00:28:20,870 --> 00:28:20,880
example from one operating system is the
 

1449
00:28:20,880 --> 00:28:21,590
example from one operating system is the
following

1450
00:28:21,590 --> 00:28:21,600
following
 

1451
00:28:21,600 --> 00:28:25,430
following
let's say we have a call like rename

1452
00:28:25,430 --> 00:28:25,440
let's say we have a call like rename
 

1453
00:28:25,440 --> 00:28:27,590
let's say we have a call like rename
that moves a file name from one

1454
00:28:27,590 --> 00:28:27,600
that moves a file name from one
 

1455
00:28:27,600 --> 00:28:29,830
that moves a file name from one
directory to another directory so let's

1456
00:28:29,830 --> 00:28:29,840
directory to another directory so let's
 

1457
00:28:29,840 --> 00:28:32,149
directory to another directory so let's
say we have d1x

1458
00:28:32,149 --> 00:28:32,159
say we have d1x
 

1459
00:28:32,159 --> 00:28:36,230
say we have d1x
and we rename it to you know d2

1460
00:28:36,230 --> 00:28:36,240
and we rename it to you know d2
 

1461
00:28:36,240 --> 00:28:39,110
and we rename it to you know d2
y right so we have a file name in the

1462
00:28:39,110 --> 00:28:39,120
y right so we have a file name in the
 

1463
00:28:39,120 --> 00:28:39,750
y right so we have a file name in the
directory

1464
00:28:39,750 --> 00:28:39,760
directory
 

1465
00:28:39,760 --> 00:28:43,590
directory
uh d1 x and you know we rename it to

1466
00:28:43,590 --> 00:28:43,600
uh d1 x and you know we rename it to
 

1467
00:28:43,600 --> 00:28:46,870
uh d1 x and you know we rename it to
d2 slash y so the way uh

1468
00:28:46,870 --> 00:28:46,880
d2 slash y so the way uh
 

1469
00:28:46,880 --> 00:28:49,669
d2 slash y so the way uh
you presumably if we follow the rigid

1470
00:28:49,669 --> 00:28:49,679
you presumably if we follow the rigid
 

1471
00:28:49,679 --> 00:28:50,710
you presumably if we follow the rigid
rule or like this

1472
00:28:50,710 --> 00:28:50,720
rule or like this
 

1473
00:28:50,720 --> 00:28:52,549
rule or like this
rule of automatic locking now what would

1474
00:28:52,549 --> 00:28:52,559
rule of automatic locking now what would
 

1475
00:28:52,559 --> 00:28:54,389
rule of automatic locking now what would
happen is uh

1476
00:28:54,389 --> 00:28:54,399
happen is uh
 

1477
00:28:54,399 --> 00:28:56,070
happen is uh
you know that rule up soon we have two

1478
00:28:56,070 --> 00:28:56,080
you know that rule up soon we have two
 

1479
00:28:56,080 --> 00:28:58,389
you know that rule up soon we have two
objects we have d1 and d2

1480
00:28:58,389 --> 00:28:58,399
objects we have d1 and d2
 

1481
00:28:58,399 --> 00:29:00,230
objects we have d1 and d2
right and so we follow the rule then

1482
00:29:00,230 --> 00:29:00,240
right and so we follow the rule then
 

1483
00:29:00,240 --> 00:29:02,070
right and so we follow the rule then
basically the automatic rule then you

1484
00:29:02,070 --> 00:29:02,080
basically the automatic rule then you
 

1485
00:29:02,080 --> 00:29:05,669
basically the automatic rule then you
know we lock d1

1486
00:29:05,669 --> 00:29:05,679

 

1487
00:29:05,679 --> 00:29:09,029

you know erase x

1488
00:29:09,029 --> 00:29:09,039

 

1489
00:29:09,039 --> 00:29:12,870

and release

1490
00:29:12,870 --> 00:29:12,880
and release
 

1491
00:29:12,880 --> 00:29:17,669
and release
the lock for uh d1

1492
00:29:17,669 --> 00:29:17,679

 

1493
00:29:17,679 --> 00:29:19,750

and then you know we do the second part

1494
00:29:19,750 --> 00:29:19,760
and then you know we do the second part
 

1495
00:29:19,760 --> 00:29:21,269
and then you know we do the second part
update you know d2

1496
00:29:21,269 --> 00:29:21,279
update you know d2
 

1497
00:29:21,279 --> 00:29:25,190
update you know d2
lock d2 at

1498
00:29:25,190 --> 00:29:25,200
lock d2 at
 

1499
00:29:25,200 --> 00:29:29,830
lock d2 at
yeah y and release

1500
00:29:29,830 --> 00:29:29,840
yeah y and release
 

1501
00:29:29,840 --> 00:29:33,350
yeah y and release
d2 um

1502
00:29:33,350 --> 00:29:33,360
d2 um
 

1503
00:29:33,360 --> 00:29:34,789
d2 um
and then we're done so this would be the

1504
00:29:34,789 --> 00:29:34,799
and then we're done so this would be the
 

1505
00:29:34,799 --> 00:29:37,029
and then we're done so this would be the
sort of hypothetical scheme

1506
00:29:37,029 --> 00:29:37,039
sort of hypothetical scheme
 

1507
00:29:37,039 --> 00:29:40,389
sort of hypothetical scheme
uh sort of you imagine

1508
00:29:40,389 --> 00:29:40,399
uh sort of you imagine
 

1509
00:29:40,399 --> 00:29:42,310
uh sort of you imagine
uh would happen if we did automatic

1510
00:29:42,310 --> 00:29:42,320
uh would happen if we did automatic
 

1511
00:29:42,320 --> 00:29:44,149
uh would happen if we did automatic
walking and

1512
00:29:44,149 --> 00:29:44,159
walking and
 

1513
00:29:44,159 --> 00:29:46,070
walking and
uh and the point of this example is that

1514
00:29:46,070 --> 00:29:46,080
uh and the point of this example is that
 

1515
00:29:46,080 --> 00:29:48,230
uh and the point of this example is that
you know we will have the wrong outcome

1516
00:29:48,230 --> 00:29:48,240
you know we will have the wrong outcome
 

1517
00:29:48,240 --> 00:29:52,070
you know we will have the wrong outcome
and why why is this a problematic scheme

1518
00:29:52,070 --> 00:29:52,080
and why why is this a problematic scheme
 

1519
00:29:52,080 --> 00:30:02,950
and why why is this a problematic scheme
why is this not gonna work

1520
00:30:02,950 --> 00:30:02,960

 

1521
00:30:02,960 --> 00:30:04,870

and so think about like the thing to

1522
00:30:04,870 --> 00:30:04,880
and so think about like the thing to
 

1523
00:30:04,880 --> 00:30:06,830
and so think about like the thing to
think about is like this

1524
00:30:06,830 --> 00:30:06,840
think about is like this
 

1525
00:30:06,840 --> 00:30:10,470
think about is like this
period so we have done the first step

1526
00:30:10,470 --> 00:30:10,480
period so we have done the first step
 

1527
00:30:10,480 --> 00:30:14,870
period so we have done the first step
step one we've not done step two yet

1528
00:30:14,870 --> 00:30:14,880
step one we've not done step two yet
 

1529
00:30:14,880 --> 00:30:24,149
step one we've not done step two yet
what could another process observe

1530
00:30:24,149 --> 00:30:24,159

 

1531
00:30:24,159 --> 00:30:28,870

anybody

1532
00:30:28,870 --> 00:30:28,880

 

1533
00:30:28,880 --> 00:30:31,350

the file would just be gone yeah you

1534
00:30:31,350 --> 00:30:31,360
the file would just be gone yeah you
 

1535
00:30:31,360 --> 00:30:32,549
the file would just be gone yeah you
know this

1536
00:30:32,549 --> 00:30:32,559
know this
 

1537
00:30:32,559 --> 00:30:34,070
know this
between step one and two the file

1538
00:30:34,070 --> 00:30:34,080
between step one and two the file
 

1539
00:30:34,080 --> 00:30:41,430
between step one and two the file
doesn't exist

1540
00:30:41,430 --> 00:30:41,440

 

1541
00:30:41,440 --> 00:30:43,669

i mean that is clearly wrong because the

1542
00:30:43,669 --> 00:30:43,679
i mean that is clearly wrong because the
 

1543
00:30:43,679 --> 00:30:45,190
i mean that is clearly wrong because the
file does exist

1544
00:30:45,190 --> 00:30:45,200
file does exist
 

1545
00:30:45,200 --> 00:30:47,669
file does exist
it's just being renamed uh and another

1546
00:30:47,669 --> 00:30:47,679
it's just being renamed uh and another
 

1547
00:30:47,679 --> 00:30:48,870
it's just being renamed uh and another
point of time really that it didn't

1548
00:30:48,870 --> 00:30:48,880
point of time really that it didn't
 

1549
00:30:48,880 --> 00:30:50,389
point of time really that it didn't
exist

1550
00:30:50,389 --> 00:30:50,399
exist
 

1551
00:30:50,399 --> 00:30:53,350
exist
but by implementing this in this way it

1552
00:30:53,350 --> 00:30:53,360
but by implementing this in this way it
 

1553
00:30:53,360 --> 00:30:55,269
but by implementing this in this way it
just appears that the file might

1554
00:30:55,269 --> 00:30:55,279
just appears that the file might
 

1555
00:30:55,279 --> 00:30:57,830
just appears that the file might
actually not exist even though it does

1556
00:30:57,830 --> 00:30:57,840
actually not exist even though it does
 

1557
00:30:57,840 --> 00:30:59,750
actually not exist even though it does
so the really right you know solution to

1558
00:30:59,750 --> 00:30:59,760
so the really right you know solution to
 

1559
00:30:59,760 --> 00:31:03,430
so the really right you know solution to
this is what we need

1560
00:31:03,430 --> 00:31:03,440

 

1561
00:31:03,440 --> 00:31:07,509

is that we actually lock d1

1562
00:31:07,509 --> 00:31:07,519

 

1563
00:31:07,519 --> 00:31:10,710

and d2 first at the beginning of rename

1564
00:31:10,710 --> 00:31:10,720
and d2 first at the beginning of rename
 

1565
00:31:10,720 --> 00:31:15,750
and d2 first at the beginning of rename
then erase and add

1566
00:31:15,750 --> 00:31:15,760

 

1567
00:31:15,760 --> 00:31:19,110

and then release

1568
00:31:19,110 --> 00:31:19,120
and then release
 

1569
00:31:19,120 --> 00:31:24,310
and then release
the locks for d1 and d2

1570
00:31:24,310 --> 00:31:24,320

 

1571
00:31:24,320 --> 00:31:27,509

so that makes sense so here's sort of an

1572
00:31:27,509 --> 00:31:27,519
so that makes sense so here's sort of an
 

1573
00:31:27,519 --> 00:31:29,029
so that makes sense so here's sort of an
example where

1574
00:31:29,029 --> 00:31:29,039
example where
 

1575
00:31:29,039 --> 00:31:31,750
example where
we have an operation that regression

1576
00:31:31,750 --> 00:31:31,760
we have an operation that regression
 

1577
00:31:31,760 --> 00:31:32,950
we have an operation that regression
needs multiple locks

1578
00:31:32,950 --> 00:31:32,960
needs multiple locks
 

1579
00:31:32,960 --> 00:31:35,750
needs multiple locks
and uh and the locks can not really be

1580
00:31:35,750 --> 00:31:35,760
and uh and the locks can not really be
 

1581
00:31:35,760 --> 00:31:36,789
and uh and the locks can not really be
associated with the

1582
00:31:36,789 --> 00:31:36,799
associated with the
 

1583
00:31:36,799 --> 00:31:38,310
associated with the
two objects that are the arguments of

1584
00:31:38,310 --> 00:31:38,320
two objects that are the arguments of
 

1585
00:31:38,320 --> 00:31:40,870
two objects that are the arguments of
this operation uh it has to be the case

1586
00:31:40,870 --> 00:31:40,880
this operation uh it has to be the case
 

1587
00:31:40,880 --> 00:31:42,710
this operation uh it has to be the case
that actually the operation itself first

1588
00:31:42,710 --> 00:31:42,720
that actually the operation itself first
 

1589
00:31:42,720 --> 00:31:45,750
that actually the operation itself first
requires to both blocks then performs

1590
00:31:45,750 --> 00:31:45,760
requires to both blocks then performs
 

1591
00:31:45,760 --> 00:31:47,350
requires to both blocks then performs
the operations

1592
00:31:47,350 --> 00:31:47,360
the operations
 

1593
00:31:47,360 --> 00:31:49,350
the operations
so this automatic locking is not sort of

1594
00:31:49,350 --> 00:31:49,360
so this automatic locking is not sort of
 

1595
00:31:49,360 --> 00:31:50,950
so this automatic locking is not sort of
you know directly possible

1596
00:31:50,950 --> 00:31:50,960
you know directly possible
 

1597
00:31:50,960 --> 00:31:52,389
you know directly possible
uh there's gonna be cases where that

1598
00:31:52,389 --> 00:31:52,399
uh there's gonna be cases where that
 

1599
00:31:52,399 --> 00:31:54,310
uh there's gonna be cases where that
just is not gonna run

1600
00:31:54,310 --> 00:31:54,320
just is not gonna run
 

1601
00:31:54,320 --> 00:31:56,230
just is not gonna run
to the or this native scheme at least

1602
00:31:56,230 --> 00:31:56,240
to the or this native scheme at least
 

1603
00:31:56,240 --> 00:31:58,830
to the or this native scheme at least
will run into a problem

1604
00:31:58,830 --> 00:31:58,840
will run into a problem
 

1605
00:31:58,840 --> 00:32:06,230
will run into a problem
problems any questions about this

1606
00:32:06,230 --> 00:32:06,240

 

1607
00:32:06,240 --> 00:32:09,350

yeah so could we just say that um

1608
00:32:09,350 --> 00:32:09,360
yeah so could we just say that um
 

1609
00:32:09,360 --> 00:32:11,190
yeah so could we just say that um
when we're accessing a data structure we

1610
00:32:11,190 --> 00:32:11,200
when we're accessing a data structure we
 

1611
00:32:11,200 --> 00:32:12,950
when we're accessing a data structure we
just have to access or we have to

1612
00:32:12,950 --> 00:32:12,960
just have to access or we have to
 

1613
00:32:12,960 --> 00:32:15,509
just have to access or we have to
acquire all of the locks associated with

1614
00:32:15,509 --> 00:32:15,519
acquire all of the locks associated with
 

1615
00:32:15,519 --> 00:32:17,669
acquire all of the locks associated with
all of the data structures we need at

1616
00:32:17,669 --> 00:32:17,679
all of the data structures we need at
 

1617
00:32:17,679 --> 00:32:19,830
all of the data structures we need at
the beginning

1618
00:32:19,830 --> 00:32:19,840
the beginning
 

1619
00:32:19,840 --> 00:32:21,509
the beginning
yeah so that'll be one way doing it and

1620
00:32:21,509 --> 00:32:21,519
yeah so that'll be one way doing it and
 

1621
00:32:21,519 --> 00:32:23,350
yeah so that'll be one way doing it and
i think that this quickly will

1622
00:32:23,350 --> 00:32:23,360
i think that this quickly will
 

1623
00:32:23,360 --> 00:32:25,590
i think that this quickly will
uh sort of come down to basically having

1624
00:32:25,590 --> 00:32:25,600
uh sort of come down to basically having
 

1625
00:32:25,600 --> 00:32:27,509
uh sort of come down to basically having
a big kernel lock

1626
00:32:27,509 --> 00:32:27,519
a big kernel lock
 

1627
00:32:27,519 --> 00:32:29,350
a big kernel lock
oh i think okay and then you're on the

1628
00:32:29,350 --> 00:32:29,360
oh i think okay and then you're on the
 

1629
00:32:29,360 --> 00:32:30,630
oh i think okay and then you're on the
wrist basically you have no parallelism

1630
00:32:30,630 --> 00:32:30,640
wrist basically you have no parallelism
 

1631
00:32:30,640 --> 00:32:31,350
wrist basically you have no parallelism
anymore

1632
00:32:31,350 --> 00:32:31,360
anymore
 

1633
00:32:31,360 --> 00:32:33,190
anymore
and so you want to do better than that

1634
00:32:33,190 --> 00:32:33,200
and so you want to do better than that
 

1635
00:32:33,200 --> 00:32:35,110
and so you want to do better than that
right yeah and i think this is always

1636
00:32:35,110 --> 00:32:35,120
right yeah and i think this is always
 

1637
00:32:35,120 --> 00:32:36,470
right yeah and i think this is always
the tension you know you can make things

1638
00:32:36,470 --> 00:32:36,480
the tension you know you can make things
 

1639
00:32:36,480 --> 00:32:37,190
the tension you know you can make things
simpler

1640
00:32:37,190 --> 00:32:37,200
simpler
 

1641
00:32:37,200 --> 00:32:39,669
simpler
by basically what's called your coarse

1642
00:32:39,669 --> 00:32:39,679
by basically what's called your coarse
 

1643
00:32:39,679 --> 00:32:41,350
by basically what's called your coarse
grain blocking

1644
00:32:41,350 --> 00:32:41,360
grain blocking
 

1645
00:32:41,360 --> 00:32:43,990
grain blocking
but then you know you're loose there's

1646
00:32:43,990 --> 00:32:44,000
but then you know you're loose there's
 

1647
00:32:44,000 --> 00:32:44,870
but then you know you're loose there's
performance

1648
00:32:44,870 --> 00:32:44,880
performance
 

1649
00:32:44,880 --> 00:32:47,029
performance
or you may lose performance depending if

1650
00:32:47,029 --> 00:32:47,039
or you may lose performance depending if
 

1651
00:32:47,039 --> 00:32:49,029
or you may lose performance depending if
the lock is contented or not

1652
00:32:49,029 --> 00:32:49,039
the lock is contented or not
 

1653
00:32:49,039 --> 00:32:52,950
the lock is contented or not
yep makes sense thank you

1654
00:32:52,950 --> 00:32:52,960

 

1655
00:32:52,960 --> 00:32:55,029

so lock perspective so there's different

1656
00:32:55,029 --> 00:32:55,039
so lock perspective so there's different
 

1657
00:32:55,039 --> 00:32:56,230
so lock perspective so there's different
ways

1658
00:32:56,230 --> 00:32:56,240
ways
 

1659
00:32:56,240 --> 00:32:59,750
ways
uh to think about locks

1660
00:32:59,750 --> 00:32:59,760
uh to think about locks
 

1661
00:32:59,760 --> 00:33:02,630
uh to think about locks
and you know there are three common ones

1662
00:33:02,630 --> 00:33:02,640
and you know there are three common ones
 

1663
00:33:02,640 --> 00:33:03,430
and you know there are three common ones
and

1664
00:33:03,430 --> 00:33:03,440
and
 

1665
00:33:03,440 --> 00:33:05,669
and
uh you know go for all three of them and

1666
00:33:05,669 --> 00:33:05,679
uh you know go for all three of them and
 

1667
00:33:05,679 --> 00:33:07,350
uh you know go for all three of them and
just maybe that may help you

1668
00:33:07,350 --> 00:33:07,360
just maybe that may help you
 

1669
00:33:07,360 --> 00:33:08,870
just maybe that may help you
to think about locks and maybe one of

1670
00:33:08,870 --> 00:33:08,880
to think about locks and maybe one of
 

1671
00:33:08,880 --> 00:33:10,549
to think about locks and maybe one of
them is your favorite and you can use

1672
00:33:10,549 --> 00:33:10,559
them is your favorite and you can use
 

1673
00:33:10,559 --> 00:33:11,909
them is your favorite and you can use
that one

1674
00:33:11,909 --> 00:33:11,919
that one
 

1675
00:33:11,919 --> 00:33:13,430
that one
as your way of thinking about it but

1676
00:33:13,430 --> 00:33:13,440
as your way of thinking about it but
 

1677
00:33:13,440 --> 00:33:14,789
as your way of thinking about it but
it's probably helpful to see that there

1678
00:33:14,789 --> 00:33:14,799
it's probably helpful to see that there
 

1679
00:33:14,799 --> 00:33:15,990
it's probably helpful to see that there
are actually different ways of thinking

1680
00:33:15,990 --> 00:33:16,000
are actually different ways of thinking
 

1681
00:33:16,000 --> 00:33:19,029
are actually different ways of thinking
about logs

1682
00:33:19,029 --> 00:33:19,039

 

1683
00:33:19,039 --> 00:33:20,630

so first of all you know one other way

1684
00:33:20,630 --> 00:33:20,640
so first of all you know one other way
 

1685
00:33:20,640 --> 00:33:23,909
so first of all you know one other way
to think about it is actually a lot

1686
00:33:23,909 --> 00:33:23,919
to think about it is actually a lot
 

1687
00:33:23,919 --> 00:33:26,470
to think about it is actually a lot
avoid

1688
00:33:26,470 --> 00:33:26,480

 

1689
00:33:26,480 --> 00:33:29,750

uh lost updates or help

1690
00:33:29,750 --> 00:33:29,760
uh lost updates or help
 

1691
00:33:29,760 --> 00:33:31,509
uh lost updates or help
if you use logs correctly you know

1692
00:33:31,509 --> 00:33:31,519
if you use logs correctly you know
 

1693
00:33:31,519 --> 00:33:33,590
if you use logs correctly you know
lock's going to help avoiding

1694
00:33:33,590 --> 00:33:33,600
lock's going to help avoiding
 

1695
00:33:33,600 --> 00:33:38,549
lock's going to help avoiding
lost updates

1696
00:33:38,549 --> 00:33:38,559
lost updates
 

1697
00:33:38,559 --> 00:33:41,269
lost updates
and if you think about uh our early

1698
00:33:41,269 --> 00:33:41,279
and if you think about uh our early
 

1699
00:33:41,279 --> 00:33:42,950
and if you think about uh our early
example in the catalog.c

1700
00:33:42,950 --> 00:33:42,960
example in the catalog.c
 

1701
00:33:42,960 --> 00:33:44,630
example in the catalog.c
you know the lost update is basically

1702
00:33:44,630 --> 00:33:44,640
you know the lost update is basically
 

1703
00:33:44,640 --> 00:33:46,630
you know the lost update is basically
the we lose one update to

1704
00:33:46,630 --> 00:33:46,640
the we lose one update to
 

1705
00:33:46,640 --> 00:33:50,789
the we lose one update to
the k3 and by putting walks in it you

1706
00:33:50,789 --> 00:33:50,799
the k3 and by putting walks in it you
 

1707
00:33:50,799 --> 00:33:51,830
the k3 and by putting walks in it you
know where actually we

1708
00:33:51,830 --> 00:33:51,840
know where actually we
 

1709
00:33:51,840 --> 00:33:53,990
know where actually we
didn't lose that update so that's one

1710
00:33:53,990 --> 00:33:54,000
didn't lose that update so that's one
 

1711
00:33:54,000 --> 00:33:55,830
didn't lose that update so that's one
way you're thinking about it

1712
00:33:55,830 --> 00:33:55,840
way you're thinking about it
 

1713
00:33:55,840 --> 00:33:58,549
way you're thinking about it
it's a very low level way uh another way

1714
00:33:58,549 --> 00:33:58,559
it's a very low level way uh another way
 

1715
00:33:58,559 --> 00:33:59,190
it's a very low level way uh another way
to think about it

1716
00:33:59,190 --> 00:33:59,200
to think about it
 

1717
00:33:59,200 --> 00:34:03,990
to think about it
is you know you can make locked blocks

1718
00:34:03,990 --> 00:34:04,000

 

1719
00:34:04,000 --> 00:34:10,550

make multi-step operations

1720
00:34:10,550 --> 00:34:10,560

 

1721
00:34:10,560 --> 00:34:13,589

atomic

1722
00:34:13,589 --> 00:34:13,599

 

1723
00:34:13,599 --> 00:34:14,790

and so there's sort of the view of a

1724
00:34:14,790 --> 00:34:14,800
and so there's sort of the view of a
 

1725
00:34:14,800 --> 00:34:16,230
and so there's sort of the view of a
critical section you know we have a

1726
00:34:16,230 --> 00:34:16,240
critical section you know we have a
 

1727
00:34:16,240 --> 00:34:19,510
critical section you know we have a
required walk we do a whole bunch of

1728
00:34:19,510 --> 00:34:19,520
required walk we do a whole bunch of
 

1729
00:34:19,520 --> 00:34:21,510
required walk we do a whole bunch of
steps or instructions we executed all

1730
00:34:21,510 --> 00:34:21,520
steps or instructions we executed all
 

1731
00:34:21,520 --> 00:34:23,270
steps or instructions we executed all
the instructions then release

1732
00:34:23,270 --> 00:34:23,280
the instructions then release
 

1733
00:34:23,280 --> 00:34:24,389
the instructions then release
and basically that whole critical

1734
00:34:24,389 --> 00:34:24,399
and basically that whole critical
 

1735
00:34:24,399 --> 00:34:27,750
and basically that whole critical
section execute as an atomic operation

1736
00:34:27,750 --> 00:34:27,760
section execute as an atomic operation
 

1737
00:34:27,760 --> 00:34:30,310
section execute as an atomic operation
and that's sort of the uh and also a

1738
00:34:30,310 --> 00:34:30,320
and that's sort of the uh and also a
 

1739
00:34:30,320 --> 00:34:32,950
and that's sort of the uh and also a
fine way you know to think about locks

1740
00:34:32,950 --> 00:34:32,960
fine way you know to think about locks
 

1741
00:34:32,960 --> 00:34:35,190
fine way you know to think about locks
and then the third one uh you know that

1742
00:34:35,190 --> 00:34:35,200
and then the third one uh you know that
 

1743
00:34:35,200 --> 00:34:37,349
and then the third one uh you know that
may be helpful is that

1744
00:34:37,349 --> 00:34:37,359
may be helpful is that
 

1745
00:34:37,359 --> 00:34:42,069
may be helpful is that
really what locks do is locks health

1746
00:34:42,069 --> 00:34:42,079
really what locks do is locks health
 

1747
00:34:42,079 --> 00:34:48,230
really what locks do is locks health
maintain an invariant

1748
00:34:48,230 --> 00:34:48,240

 

1749
00:34:48,240 --> 00:34:49,589

data structure that you know it's

1750
00:34:49,589 --> 00:34:49,599
data structure that you know it's
 

1751
00:34:49,599 --> 00:34:52,069
data structure that you know it's
protecting and

1752
00:34:52,069 --> 00:34:52,079
protecting and
 

1753
00:34:52,079 --> 00:34:55,270
protecting and
uh what really is going on is that uh

1754
00:34:55,270 --> 00:34:55,280
uh what really is going on is that uh
 

1755
00:34:55,280 --> 00:34:57,589
uh what really is going on is that uh
at the before a choir if there's no lock

1756
00:34:57,589 --> 00:34:57,599
at the before a choir if there's no lock
 

1757
00:34:57,599 --> 00:34:58,470
at the before a choir if there's no lock
holder you know

1758
00:34:58,470 --> 00:34:58,480
holder you know
 

1759
00:34:58,480 --> 00:35:01,030
holder you know
that invariant holds uh when we acquire

1760
00:35:01,030 --> 00:35:01,040
that invariant holds uh when we acquire
 

1761
00:35:01,040 --> 00:35:03,109
that invariant holds uh when we acquire
the lock and we do some operations then

1762
00:35:03,109 --> 00:35:03,119
the lock and we do some operations then
 

1763
00:35:03,119 --> 00:35:05,750
the lock and we do some operations then
temporarily that invariant may be

1764
00:35:05,750 --> 00:35:05,760
temporarily that invariant may be
 

1765
00:35:05,760 --> 00:35:08,630
temporarily that invariant may be
uh violated but at the point that we do

1766
00:35:08,630 --> 00:35:08,640
uh violated but at the point that we do
 

1767
00:35:08,640 --> 00:35:13,109
uh violated but at the point that we do
the release

1768
00:35:13,109 --> 00:35:13,119

 

1769
00:35:13,119 --> 00:35:15,829

and so if you think about our free list

1770
00:35:15,829 --> 00:35:15,839
and so if you think about our free list
 

1771
00:35:15,839 --> 00:35:16,470
and so if you think about our free list
uh

1772
00:35:16,470 --> 00:35:16,480
uh
 

1773
00:35:16,480 --> 00:35:18,950
uh
case you know the invariant is there uh

1774
00:35:18,950 --> 00:35:18,960
case you know the invariant is there uh
 

1775
00:35:18,960 --> 00:35:19,510
case you know the invariant is there uh
you know

1776
00:35:19,510 --> 00:35:19,520
you know
 

1777
00:35:19,520 --> 00:35:22,390
you know
the three pointer points to uh one other

1778
00:35:22,390 --> 00:35:22,400
the three pointer points to uh one other
 

1779
00:35:22,400 --> 00:35:23,349
the three pointer points to uh one other
next pointer

1780
00:35:23,349 --> 00:35:23,359
next pointer
 

1781
00:35:23,359 --> 00:35:25,990
next pointer
and all the three pages are on a single

1782
00:35:25,990 --> 00:35:26,000
and all the three pages are on a single
 

1783
00:35:26,000 --> 00:35:27,430
and all the three pages are on a single
list

1784
00:35:27,430 --> 00:35:27,440
list
 

1785
00:35:27,440 --> 00:35:30,470
list
uh and that's temporarily violated uh

1786
00:35:30,470 --> 00:35:30,480
uh and that's temporarily violated uh
 

1787
00:35:30,480 --> 00:35:34,069
uh and that's temporarily violated uh
at the point uh

1788
00:35:34,069 --> 00:35:34,079

 

1789
00:35:34,079 --> 00:35:36,630

in the middle of the k3 because like

1790
00:35:36,630 --> 00:35:36,640
in the middle of the k3 because like
 

1791
00:35:36,640 --> 00:35:37,270
in the middle of the k3 because like
multiple

1792
00:35:37,270 --> 00:35:37,280
multiple
 

1793
00:35:37,280 --> 00:35:38,550
multiple
pointers actually point to the beginning

1794
00:35:38,550 --> 00:35:38,560
pointers actually point to the beginning
 

1795
00:35:38,560 --> 00:35:41,349
pointers actually point to the beginning
of the free list

1796
00:35:41,349 --> 00:35:41,359

 

1797
00:35:41,359 --> 00:35:42,630

and then it's established at the end of

1798
00:35:42,630 --> 00:35:42,640
and then it's established at the end of
 

1799
00:35:42,640 --> 00:35:44,950
and then it's established at the end of
it so and you know for

1800
00:35:44,950 --> 00:35:44,960
it so and you know for
 

1801
00:35:44,960 --> 00:35:46,790
it so and you know for
you know the free list it has a not so

1802
00:35:46,790 --> 00:35:46,800
you know the free list it has a not so
 

1803
00:35:46,800 --> 00:35:48,470
you know the free list it has a not so
complicated variant but like for more

1804
00:35:48,470 --> 00:35:48,480
complicated variant but like for more
 

1805
00:35:48,480 --> 00:35:49,990
complicated variant but like for more
uh complicated shared data structures

1806
00:35:49,990 --> 00:35:50,000
uh complicated shared data structures
 

1807
00:35:50,000 --> 00:35:51,589
uh complicated shared data structures
you know it can be a helpful way of

1808
00:35:51,589 --> 00:35:51,599
you know it can be a helpful way of
 

1809
00:35:51,599 --> 00:35:53,589
you know it can be a helpful way of
thinking actually what the lock is doing

1810
00:35:53,589 --> 00:35:53,599
thinking actually what the lock is doing
 

1811
00:35:53,599 --> 00:35:55,829
thinking actually what the lock is doing
for you

1812
00:35:55,829 --> 00:35:55,839
for you
 

1813
00:35:55,839 --> 00:35:57,990
for you
and so see even in this kind of the k3

1814
00:35:57,990 --> 00:35:58,000
and so see even in this kind of the k3
 

1815
00:35:58,000 --> 00:35:59,829
and so see even in this kind of the k3
case you know all three lock perspective

1816
00:35:59,829 --> 00:35:59,839
case you know all three lock perspective
 

1817
00:35:59,839 --> 00:36:01,430
case you know all three lock perspective
for reasonable perspective

1818
00:36:01,430 --> 00:36:01,440
for reasonable perspective
 

1819
00:36:01,440 --> 00:36:04,550
for reasonable perspective
um and uh you know one of them

1820
00:36:04,550 --> 00:36:04,560
um and uh you know one of them
 

1821
00:36:04,560 --> 00:36:07,990
um and uh you know one of them
you know uh brings more with you than so

1822
00:36:07,990 --> 00:36:08,000
you know uh brings more with you than so
 

1823
00:36:08,000 --> 00:36:09,589
you know uh brings more with you than so
than one of the other ones and you know

1824
00:36:09,589 --> 00:36:09,599
than one of the other ones and you know
 

1825
00:36:09,599 --> 00:36:11,589
than one of the other ones and you know
use that as your way to think about

1826
00:36:11,589 --> 00:36:11,599
use that as your way to think about
 

1827
00:36:11,599 --> 00:36:14,710
use that as your way to think about
locks

1828
00:36:14,710 --> 00:36:14,720

 

1829
00:36:14,720 --> 00:36:23,589

any questions about this point

1830
00:36:23,589 --> 00:36:23,599

 

1831
00:36:23,599 --> 00:36:26,950

okay so i'm gonna now run for a couple

1832
00:36:26,950 --> 00:36:26,960
okay so i'm gonna now run for a couple
 

1833
00:36:26,960 --> 00:36:27,430
okay so i'm gonna now run for a couple
things

1834
00:36:27,430 --> 00:36:27,440
things
 

1835
00:36:27,440 --> 00:36:31,349
things
uh uh sort of uh

1836
00:36:31,349 --> 00:36:31,359
uh uh sort of uh
 

1837
00:36:31,359 --> 00:36:33,270
uh uh sort of uh
you know undesirable properties or that

1838
00:36:33,270 --> 00:36:33,280
you know undesirable properties or that
 

1839
00:36:33,280 --> 00:36:34,870
you know undesirable properties or that
can actually happen with locks

1840
00:36:34,870 --> 00:36:34,880
can actually happen with locks
 

1841
00:36:34,880 --> 00:36:37,349
can actually happen with locks
and you know we know like locks are uh

1842
00:36:37,349 --> 00:36:37,359
and you know we know like locks are uh
 

1843
00:36:37,359 --> 00:36:39,430
and you know we know like locks are uh
necessary to fix a correctness problem

1844
00:36:39,430 --> 00:36:39,440
necessary to fix a correctness problem
 

1845
00:36:39,440 --> 00:36:41,430
necessary to fix a correctness problem
you know to avoid these race conditions

1846
00:36:41,430 --> 00:36:41,440
you know to avoid these race conditions
 

1847
00:36:41,440 --> 00:36:42,870
you know to avoid these race conditions
blocks themselves in

1848
00:36:42,870 --> 00:36:42,880
blocks themselves in
 

1849
00:36:42,880 --> 00:36:45,190
blocks themselves in
when inappropriate inappropriately used

1850
00:36:45,190 --> 00:36:45,200
when inappropriate inappropriately used
 

1851
00:36:45,200 --> 00:36:46,950
when inappropriate inappropriately used
can also introduce their own set of

1852
00:36:46,950 --> 00:36:46,960
can also introduce their own set of
 

1853
00:36:46,960 --> 00:36:48,230
can also introduce their own set of
problems

1854
00:36:48,230 --> 00:36:48,240
problems
 

1855
00:36:48,240 --> 00:36:49,589
problems
and so i want to talk a little bit about

1856
00:36:49,589 --> 00:36:49,599
and so i want to talk a little bit about
 

1857
00:36:49,599 --> 00:36:51,430
and so i want to talk a little bit about
that and so the obvious one

1858
00:36:51,430 --> 00:36:51,440
that and so the obvious one
 

1859
00:36:51,440 --> 00:36:57,190
that and so the obvious one
of course is deadlock

1860
00:36:57,190 --> 00:36:57,200

 

1861
00:36:57,200 --> 00:36:58,950

you know for example you know the the

1862
00:36:58,950 --> 00:36:58,960
you know for example you know the the
 

1863
00:36:58,960 --> 00:37:00,550
you know for example you know the the
simplest case you know was a little bit

1864
00:37:00,550 --> 00:37:00,560
simplest case you know was a little bit
 

1865
00:37:00,560 --> 00:37:01,670
simplest case you know was a little bit
boring but i mean you

1866
00:37:01,670 --> 00:37:01,680
boring but i mean you
 

1867
00:37:01,680 --> 00:37:03,190
boring but i mean you
worthwhile thinking about you know if

1868
00:37:03,190 --> 00:37:03,200
worthwhile thinking about you know if
 

1869
00:37:03,200 --> 00:37:05,349
worthwhile thinking about you know if
you do an acquire

1870
00:37:05,349 --> 00:37:05,359
you do an acquire
 

1871
00:37:05,359 --> 00:37:08,630
you do an acquire
you know a lock and so you start the

1872
00:37:08,630 --> 00:37:08,640
you know a lock and so you start the
 

1873
00:37:08,640 --> 00:37:09,510
you know a lock and so you start the
critical section

1874
00:37:09,510 --> 00:37:09,520
critical section
 

1875
00:37:09,520 --> 00:37:11,270
critical section
and in the critical section you do

1876
00:37:11,270 --> 00:37:11,280
and in the critical section you do
 

1877
00:37:11,280 --> 00:37:13,510
and in the critical section you do
another acquire

1878
00:37:13,510 --> 00:37:13,520
another acquire
 

1879
00:37:13,520 --> 00:37:16,870
another acquire
of the same lock

1880
00:37:16,870 --> 00:37:16,880

 

1881
00:37:16,880 --> 00:37:20,230

what will happen

1882
00:37:20,230 --> 00:37:20,240

 

1883
00:37:20,240 --> 00:37:29,589

can the second acquirer succeed

1884
00:37:29,589 --> 00:37:29,599

 

1885
00:37:29,599 --> 00:37:31,430

well with the spec that we've given

1886
00:37:31,430 --> 00:37:31,440
well with the spec that we've given
 

1887
00:37:31,440 --> 00:37:33,190
well with the spec that we've given
early on uh you know

1888
00:37:33,190 --> 00:37:33,200
early on uh you know
 

1889
00:37:33,200 --> 00:37:34,790
early on uh you know
this should be not allowed and so

1890
00:37:34,790 --> 00:37:34,800
this should be not allowed and so
 

1891
00:37:34,800 --> 00:37:37,109
this should be not allowed and so
basically the second acquirer must block

1892
00:37:37,109 --> 00:37:37,119
basically the second acquirer must block
 

1893
00:37:37,119 --> 00:37:39,430
basically the second acquirer must block
until the first acquire release the lock

1894
00:37:39,430 --> 00:37:39,440
until the first acquire release the lock
 

1895
00:37:39,440 --> 00:37:40,390
until the first acquire release the lock
but that was

1896
00:37:40,390 --> 00:37:40,400
but that was
 

1897
00:37:40,400 --> 00:37:42,230
but that was
you know the process itself so basically

1898
00:37:42,230 --> 00:37:42,240
you know the process itself so basically
 

1899
00:37:42,240 --> 00:37:46,870
you know the process itself so basically
this resulted in a deadlock

1900
00:37:46,870 --> 00:37:46,880

 

1901
00:37:46,880 --> 00:37:48,390

now this is a trivial example of a

1902
00:37:48,390 --> 00:37:48,400
now this is a trivial example of a
 

1903
00:37:48,400 --> 00:37:50,069
now this is a trivial example of a
deadlock uh maybe now there's

1904
00:37:50,069 --> 00:37:50,079
deadlock uh maybe now there's
 

1905
00:37:50,079 --> 00:37:51,270
deadlock uh maybe now there's
interesting in fact this is a deadlock

1906
00:37:51,270 --> 00:37:51,280
interesting in fact this is a deadlock
 

1907
00:37:51,280 --> 00:37:53,829
interesting in fact this is a deadlock
that xv6 detects you know because when

1908
00:37:53,829 --> 00:37:53,839
that xv6 detects you know because when
 

1909
00:37:53,839 --> 00:37:55,510
that xv6 detects you know because when
it sees that the same process requires

1910
00:37:55,510 --> 00:37:55,520
it sees that the same process requires
 

1911
00:37:55,520 --> 00:37:57,750
it sees that the same process requires
the same walk again uh it actually

1912
00:37:57,750 --> 00:37:57,760
the same walk again uh it actually
 

1913
00:37:57,760 --> 00:38:00,390
the same walk again uh it actually
causes a panic the more interesting

1914
00:38:00,390 --> 00:38:00,400
causes a panic the more interesting
 

1915
00:38:00,400 --> 00:38:01,190
causes a panic the more interesting
cases are

1916
00:38:01,190 --> 00:38:01,200
cases are
 

1917
00:38:01,200 --> 00:38:03,910
cases are
when multiple locks are involved so

1918
00:38:03,910 --> 00:38:03,920
when multiple locks are involved so
 

1919
00:38:03,920 --> 00:38:04,550
when multiple locks are involved so
let's

1920
00:38:04,550 --> 00:38:04,560
let's
 

1921
00:38:04,560 --> 00:38:07,510
let's
go to our previous example let's say we

1922
00:38:07,510 --> 00:38:07,520
go to our previous example let's say we
 

1923
00:38:07,520 --> 00:38:08,550
go to our previous example let's say we
have the following

1924
00:38:08,550 --> 00:38:08,560
have the following
 

1925
00:38:08,560 --> 00:38:12,150
have the following
uh we have core one or maybe

1926
00:38:12,150 --> 00:38:12,160
uh we have core one or maybe
 

1927
00:38:12,160 --> 00:38:16,230
uh we have core one or maybe
cpu one

1928
00:38:16,230 --> 00:38:16,240

 

1929
00:38:16,240 --> 00:38:19,910

we have cpu two

1930
00:38:19,910 --> 00:38:19,920

 

1931
00:38:19,920 --> 00:38:22,950

and cpu 1 you know executes

1932
00:38:22,950 --> 00:38:22,960
and cpu 1 you know executes
 

1933
00:38:22,960 --> 00:38:27,349
and cpu 1 you know executes
vname directory1x

1934
00:38:27,349 --> 00:38:27,359
vname directory1x
 

1935
00:38:27,359 --> 00:38:33,270
vname directory1x
to directory2 y

1936
00:38:33,270 --> 00:38:33,280
to directory2 y
 

1937
00:38:33,280 --> 00:38:36,790
to directory2 y
and cpu 2 executes at the same time

1938
00:38:36,790 --> 00:38:36,800
and cpu 2 executes at the same time
 

1939
00:38:36,800 --> 00:38:41,270
and cpu 2 executes at the same time
uh rename

1940
00:38:41,270 --> 00:38:41,280

 

1941
00:38:41,280 --> 00:38:43,829

uh in the other way in the other

1942
00:38:43,829 --> 00:38:43,839
uh in the other way in the other
 

1943
00:38:43,839 --> 00:38:44,550
uh in the other way in the other
direction

1944
00:38:44,550 --> 00:38:44,560
direction
 

1945
00:38:44,560 --> 00:38:47,829
direction
you know d2 a to

1946
00:38:47,829 --> 00:38:47,839
you know d2 a to
 

1947
00:38:47,839 --> 00:38:51,430
you know d2 a to
the one you know why i say b

1948
00:38:51,430 --> 00:38:51,440
the one you know why i say b
 

1949
00:38:51,440 --> 00:38:53,990
the one you know why i say b
just to make the names different so the

1950
00:38:53,990 --> 00:38:54,000
just to make the names different so the
 

1951
00:38:54,000 --> 00:38:56,069
just to make the names different so the
critical

1952
00:38:56,069 --> 00:38:56,079
critical
 

1953
00:38:56,079 --> 00:38:59,109
critical
thing to observe here is that cpu1 you

1954
00:38:59,109 --> 00:38:59,119
thing to observe here is that cpu1 you
 

1955
00:38:59,119 --> 00:39:02,150
thing to observe here is that cpu1 you
know runs a rename from d1 to d2

1956
00:39:02,150 --> 00:39:02,160
know runs a rename from d1 to d2
 

1957
00:39:02,160 --> 00:39:05,190
know runs a rename from d1 to d2
and cpu uh two does exactly the opposite

1958
00:39:05,190 --> 00:39:05,200
and cpu uh two does exactly the opposite
 

1959
00:39:05,200 --> 00:39:08,950
and cpu uh two does exactly the opposite
that doesn't rename from d2 to d1

1960
00:39:08,950 --> 00:39:08,960
that doesn't rename from d2 to d1
 

1961
00:39:08,960 --> 00:39:10,630
that doesn't rename from d2 to d1
so let's assume that we actually

1962
00:39:10,630 --> 00:39:10,640
so let's assume that we actually
 

1963
00:39:10,640 --> 00:39:12,470
so let's assume that we actually
acquired the locks in the order of their

1964
00:39:12,470 --> 00:39:12,480
acquired the locks in the order of their
 

1965
00:39:12,480 --> 00:39:13,349
acquired the locks in the order of their
arguments

1966
00:39:13,349 --> 00:39:13,359
arguments
 

1967
00:39:13,359 --> 00:39:16,150
arguments
and so what will happen rick is that uh

1968
00:39:16,150 --> 00:39:16,160
and so what will happen rick is that uh
 

1969
00:39:16,160 --> 00:39:17,109
and so what will happen rick is that uh
in this case

1970
00:39:17,109 --> 00:39:17,119
in this case
 

1971
00:39:17,119 --> 00:39:18,790
in this case
you know we'll acquire both locks we

1972
00:39:18,790 --> 00:39:18,800
you know we'll acquire both locks we
 

1973
00:39:18,800 --> 00:39:20,470
you know we'll acquire both locks we
know from our previous example that is

1974
00:39:20,470 --> 00:39:20,480
know from our previous example that is
 

1975
00:39:20,480 --> 00:39:20,950
know from our previous example that is
actually

1976
00:39:20,950 --> 00:39:20,960
actually
 

1977
00:39:20,960 --> 00:39:25,190
actually
important so we'll acquire

1978
00:39:25,190 --> 00:39:25,200

 

1979
00:39:25,200 --> 00:39:28,550

v1 lock

1980
00:39:28,550 --> 00:39:28,560
v1 lock
 

1981
00:39:28,560 --> 00:39:30,470
v1 lock
and you know let's say they really run

1982
00:39:30,470 --> 00:39:30,480
and you know let's say they really run
 

1983
00:39:30,480 --> 00:39:32,310
and you know let's say they really run
they're truly concurrent

1984
00:39:32,310 --> 00:39:32,320
they're truly concurrent
 

1985
00:39:32,320 --> 00:39:34,150
they're truly concurrent
so at that point you know this other guy

1986
00:39:34,150 --> 00:39:34,160
so at that point you know this other guy
 

1987
00:39:34,160 --> 00:39:35,750
so at that point you know this other guy
might actually this other cpu might

1988
00:39:35,750 --> 00:39:35,760
might actually this other cpu might
 

1989
00:39:35,760 --> 00:39:37,910
might actually this other cpu might
acquire

1990
00:39:37,910 --> 00:39:37,920
acquire
 

1991
00:39:37,920 --> 00:39:40,829
acquire
d2 first because that is its first

1992
00:39:40,829 --> 00:39:40,839
d2 first because that is its first
 

1993
00:39:40,839 --> 00:39:43,109
d2 first because that is its first
argument

1994
00:39:43,109 --> 00:39:43,119
argument
 

1995
00:39:43,119 --> 00:39:45,829
argument
and now of course d2 d1 wants to acquire

1996
00:39:45,829 --> 00:39:45,839
and now of course d2 d1 wants to acquire
 

1997
00:39:45,839 --> 00:39:48,470
and now of course d2 d1 wants to acquire
d2

1998
00:39:48,470 --> 00:39:48,480

 

1999
00:39:48,480 --> 00:39:51,510

so i'll try to acquire d2 will it

2000
00:39:51,510 --> 00:39:51,520
so i'll try to acquire d2 will it
 

2001
00:39:51,520 --> 00:39:53,349
so i'll try to acquire d2 will it
succeed

2002
00:39:53,349 --> 00:39:53,359
succeed
 

2003
00:39:53,359 --> 00:39:55,030
succeed
i won't succeed because you know the

2004
00:39:55,030 --> 00:39:55,040
i won't succeed because you know the
 

2005
00:39:55,040 --> 00:39:57,430
i won't succeed because you know the
other guy you know actually has the lock

2006
00:39:57,430 --> 00:39:57,440
other guy you know actually has the lock
 

2007
00:39:57,440 --> 00:40:00,310
other guy you know actually has the lock
and so this guy will stop here and not

2008
00:40:00,310 --> 00:40:00,320
and so this guy will stop here and not
 

2009
00:40:00,320 --> 00:40:01,430
and so this guy will stop here and not
proceed

2010
00:40:01,430 --> 00:40:01,440
proceed
 

2011
00:40:01,440 --> 00:40:04,150
proceed
now let's look at the other cpu cpu2

2012
00:40:04,150 --> 00:40:04,160
now let's look at the other cpu cpu2
 

2013
00:40:04,160 --> 00:40:05,270
now let's look at the other cpu cpu2
acquired d2

2014
00:40:05,270 --> 00:40:05,280
acquired d2
 

2015
00:40:05,280 --> 00:40:06,790
acquired d2
it's not going to require d1 for its

2016
00:40:06,790 --> 00:40:06,800
it's not going to require d1 for its
 

2017
00:40:06,800 --> 00:40:08,470
it's not going to require d1 for its
secondary argument

2018
00:40:08,470 --> 00:40:08,480
secondary argument
 

2019
00:40:08,480 --> 00:40:10,790
secondary argument
he's going to try to call it's going to

2020
00:40:10,790 --> 00:40:10,800
he's going to try to call it's going to
 

2021
00:40:10,800 --> 00:40:12,710
he's going to try to call it's going to
call acquire d1

2022
00:40:12,710 --> 00:40:12,720
call acquire d1
 

2023
00:40:12,720 --> 00:40:14,950
call acquire d1
and will it be able to proceed no it

2024
00:40:14,950 --> 00:40:14,960
and will it be able to proceed no it
 

2025
00:40:14,960 --> 00:40:16,230
and will it be able to proceed no it
won't be able to proceed

2026
00:40:16,230 --> 00:40:16,240
won't be able to proceed
 

2027
00:40:16,240 --> 00:40:19,349
won't be able to proceed
right because the cpu one actually has

2028
00:40:19,349 --> 00:40:19,359
right because the cpu one actually has
 

2029
00:40:19,359 --> 00:40:20,950
right because the cpu one actually has
to walk in d1

2030
00:40:20,950 --> 00:40:20,960
to walk in d1
 

2031
00:40:20,960 --> 00:40:22,630
to walk in d1
and so here we you know sometimes this

2032
00:40:22,630 --> 00:40:22,640
and so here we you know sometimes this
 

2033
00:40:22,640 --> 00:40:24,069
and so here we you know sometimes this
is called the deadly embrace

2034
00:40:24,069 --> 00:40:24,079
is called the deadly embrace
 

2035
00:40:24,079 --> 00:40:27,349
is called the deadly embrace
you know uh where you know the

2036
00:40:27,349 --> 00:40:27,359
you know uh where you know the
 

2037
00:40:27,359 --> 00:40:29,030
you know uh where you know the
because in the way we acquired the

2038
00:40:29,030 --> 00:40:29,040
because in the way we acquired the
 

2039
00:40:29,040 --> 00:40:30,950
because in the way we acquired the
ordering which we ordered which we quite

2040
00:40:30,950 --> 00:40:30,960
ordering which we ordered which we quite
 

2041
00:40:30,960 --> 00:40:41,030
ordering which we ordered which we quite
unlocked results actually in deadlock

2042
00:40:41,030 --> 00:40:41,040

 

2043
00:40:41,040 --> 00:40:45,589

does that make sense this example

2044
00:40:45,589 --> 00:40:45,599

 

2045
00:40:45,599 --> 00:40:46,790

this is like a little bit of a more

2046
00:40:46,790 --> 00:40:46,800
this is like a little bit of a more
 

2047
00:40:46,800 --> 00:40:48,390
this is like a little bit of a more
endangering example correct of deadlock

2048
00:40:48,390 --> 00:40:48,400
endangering example correct of deadlock
 

2049
00:40:48,400 --> 00:40:50,150
endangering example correct of deadlock
you know it's not an obvious

2050
00:40:50,150 --> 00:40:50,160
you know it's not an obvious
 

2051
00:40:50,160 --> 00:40:52,470
you know it's not an obvious
problem and the solution turns out in

2052
00:40:52,470 --> 00:40:52,480
problem and the solution turns out in
 

2053
00:40:52,480 --> 00:40:56,230
problem and the solution turns out in
some sense reasonably simple

2054
00:40:56,230 --> 00:40:56,240

 

2055
00:40:56,240 --> 00:40:57,750

the solution is that you know if you

2056
00:40:57,750 --> 00:40:57,760
the solution is that you know if you
 

2057
00:40:57,760 --> 00:41:00,069
the solution is that you know if you
have multiple locks then

2058
00:41:00,069 --> 00:41:00,079
have multiple locks then
 

2059
00:41:00,079 --> 00:41:03,910
have multiple locks then
you have to order the locks

2060
00:41:03,910 --> 00:41:03,920

 

2061
00:41:03,920 --> 00:41:07,109

and all operations have to acquire

2062
00:41:07,109 --> 00:41:07,119
and all operations have to acquire
 

2063
00:41:07,119 --> 00:41:17,430
and all operations have to acquire
locks in that order

2064
00:41:17,430 --> 00:41:17,440

 

2065
00:41:17,440 --> 00:41:19,109

so if you're a system designer you have

2066
00:41:19,109 --> 00:41:19,119
so if you're a system designer you have
 

2067
00:41:19,119 --> 00:41:21,109
so if you're a system designer you have
to decide you know what the

2068
00:41:21,109 --> 00:41:21,119
to decide you know what the
 

2069
00:41:21,119 --> 00:41:24,309
to decide you know what the
global order is for all log objects

2070
00:41:24,309 --> 00:41:24,319
global order is for all log objects
 

2071
00:41:24,319 --> 00:41:26,630
global order is for all log objects
and so for example in this case we may

2072
00:41:26,630 --> 00:41:26,640
and so for example in this case we may
 

2073
00:41:26,640 --> 00:41:27,990
and so for example in this case we may
want to decide that d1

2074
00:41:27,990 --> 00:41:28,000
want to decide that d1
 

2075
00:41:28,000 --> 00:41:30,950
want to decide that d1
should be always ordered before d2 and

2076
00:41:30,950 --> 00:41:30,960
should be always ordered before d2 and
 

2077
00:41:30,960 --> 00:41:32,630
should be always ordered before d2 and
that means that

2078
00:41:32,630 --> 00:41:32,640
that means that
 

2079
00:41:32,640 --> 00:41:34,710
that means that
when we execute a rename the rule of

2080
00:41:34,710 --> 00:41:34,720
when we execute a rename the rule of
 

2081
00:41:34,720 --> 00:41:36,710
when we execute a rename the rule of
life is we always acquire

2082
00:41:36,710 --> 00:41:36,720
life is we always acquire
 

2083
00:41:36,720 --> 00:41:40,150
life is we always acquire
uh the lower numbered uh

2084
00:41:40,150 --> 00:41:40,160
uh the lower numbered uh
 

2085
00:41:40,160 --> 00:41:42,309
uh the lower numbered uh
directories first before we acquire the

2086
00:41:42,309 --> 00:41:42,319
directories first before we acquire the
 

2087
00:41:42,319 --> 00:41:45,510
directories first before we acquire the
higher order directory numbers

2088
00:41:45,510 --> 00:41:45,520
higher order directory numbers
 

2089
00:41:45,520 --> 00:41:48,069
higher order directory numbers
and that will ensure that basically uh

2090
00:41:48,069 --> 00:41:48,079
and that will ensure that basically uh
 

2091
00:41:48,079 --> 00:41:49,190
and that will ensure that basically uh
there's a global order

2092
00:41:49,190 --> 00:41:49,200
there's a global order
 

2093
00:41:49,200 --> 00:41:51,109
there's a global order
and you know this particular case you

2094
00:41:51,109 --> 00:41:51,119
and you know this particular case you
 

2095
00:41:51,119 --> 00:41:52,710
and you know this particular case you
just cannot happen

2096
00:41:52,710 --> 00:41:52,720
just cannot happen
 

2097
00:41:52,720 --> 00:41:55,829
just cannot happen
uh because you know the block order is

2098
00:41:55,829 --> 00:41:55,839
uh because you know the block order is
 

2099
00:41:55,839 --> 00:41:56,550
uh because you know the block order is
going to be then

2100
00:41:56,550 --> 00:41:56,560
going to be then
 

2101
00:41:56,560 --> 00:41:59,670
going to be then
for v1 d2 for this guy

2102
00:41:59,670 --> 00:41:59,680
for v1 d2 for this guy
 

2103
00:41:59,680 --> 00:42:01,510
for v1 d2 for this guy
and this guy will acquire the locks

2104
00:42:01,510 --> 00:42:01,520
and this guy will acquire the locks
 

2105
00:42:01,520 --> 00:42:03,109
and this guy will acquire the locks
exactly in the same global order you

2106
00:42:03,109 --> 00:42:03,119
exactly in the same global order you
 

2107
00:42:03,119 --> 00:42:04,470
exactly in the same global order you
know d1 d2

2108
00:42:04,470 --> 00:42:04,480
know d1 d2
 

2109
00:42:04,480 --> 00:42:06,470
know d1 d2
and then we don't have this deadline

2110
00:42:06,470 --> 00:42:06,480
and then we don't have this deadline
 

2111
00:42:06,480 --> 00:42:09,510
and then we don't have this deadline
bridge

2112
00:42:09,510 --> 00:42:09,520

 

2113
00:42:09,520 --> 00:42:14,630

this makes sense

2114
00:42:14,630 --> 00:42:14,640

 

2115
00:42:14,640 --> 00:42:22,069

any questions about this

2116
00:42:22,069 --> 00:42:22,079

 

2117
00:42:22,079 --> 00:42:24,390

so this uh indicates a little bit of a a

2118
00:42:24,390 --> 00:42:24,400
so this uh indicates a little bit of a a
 

2119
00:42:24,400 --> 00:42:25,829
so this uh indicates a little bit of a a
problem

2120
00:42:25,829 --> 00:42:25,839
problem
 

2121
00:42:25,839 --> 00:42:27,510
problem
even though like okay so it fixes you

2122
00:42:27,510 --> 00:42:27,520
even though like okay so it fixes you
 

2123
00:42:27,520 --> 00:42:29,030
even though like okay so it fixes you
know this sort of deadlock problem by

2124
00:42:29,030 --> 00:42:29,040
know this sort of deadlock problem by
 

2125
00:42:29,040 --> 00:42:30,230
know this sort of deadlock problem by
having global order

2126
00:42:30,230 --> 00:42:30,240
having global order
 

2127
00:42:30,240 --> 00:42:33,430
having global order
notice this order is global

2128
00:42:33,430 --> 00:42:33,440
notice this order is global
 

2129
00:42:33,440 --> 00:42:37,030
notice this order is global
and this is uh

2130
00:42:37,030 --> 00:42:37,040

 

2131
00:42:37,040 --> 00:42:39,670

an issue a little bit when designing a

2132
00:42:39,670 --> 00:42:39,680
an issue a little bit when designing a
 

2133
00:42:39,680 --> 00:42:40,790
an issue a little bit when designing a
system because

2134
00:42:40,790 --> 00:42:40,800
system because
 

2135
00:42:40,800 --> 00:43:05,990
system because
um hold on

2136
00:43:05,990 --> 00:43:06,000

 

2137
00:43:06,000 --> 00:43:08,630

uh so if you think about the sort of

2138
00:43:08,630 --> 00:43:08,640
uh so if you think about the sort of
 

2139
00:43:08,640 --> 00:43:14,950
uh so if you think about the sort of
walk ordering

2140
00:43:14,950 --> 00:43:14,960

 

2141
00:43:14,960 --> 00:43:17,990

you know that has to be sort of global

2142
00:43:17,990 --> 00:43:18,000
you know that has to be sort of global
 

2143
00:43:18,000 --> 00:43:21,670
you know that has to be sort of global
and so if one module one m you know

2144
00:43:21,670 --> 00:43:21,680
and so if one module one m you know
 

2145
00:43:21,680 --> 00:43:25,670
and so if one module one m you know
calls a method in marshall

2146
00:43:25,670 --> 00:43:25,680
calls a method in marshall
 

2147
00:43:25,680 --> 00:43:29,430
calls a method in marshall
two um

2148
00:43:29,430 --> 00:43:29,440
two um
 

2149
00:43:29,440 --> 00:43:31,990
two um
and the collar you know and one g you

2150
00:43:31,990 --> 00:43:32,000
and the collar you know and one g you
 

2151
00:43:32,000 --> 00:43:32,790
and the collar you know and one g you
know might actually

2152
00:43:32,790 --> 00:43:32,800
know might actually
 

2153
00:43:32,800 --> 00:43:34,710
know might actually
needs to be aware or could be you need

2154
00:43:34,710 --> 00:43:34,720
needs to be aware or could be you need
 

2155
00:43:34,720 --> 00:43:37,030
needs to be aware or could be you need
to be aware actually or what locks

2156
00:43:37,030 --> 00:43:37,040
to be aware actually or what locks
 

2157
00:43:37,040 --> 00:43:40,069
to be aware actually or what locks
f acquires award walks you know and two

2158
00:43:40,069 --> 00:43:40,079
f acquires award walks you know and two
 

2159
00:43:40,079 --> 00:43:42,630
f acquires award walks you know and two
uses

2160
00:43:42,630 --> 00:43:42,640

 

2161
00:43:42,640 --> 00:43:46,150

uh because uh if you know and two

2162
00:43:46,150 --> 00:43:46,160
uh because uh if you know and two
 

2163
00:43:46,160 --> 00:43:49,670
uh because uh if you know and two
uh uses some set of locks uh then

2164
00:43:49,670 --> 00:43:49,680
uh uses some set of locks uh then
 

2165
00:43:49,680 --> 00:43:51,510
uh uses some set of locks uh then
you know if we follow our walk ordering

2166
00:43:51,510 --> 00:43:51,520
you know if we follow our walk ordering
 

2167
00:43:51,520 --> 00:43:53,750
you know if we follow our walk ordering
rule uh jesus got to make sure that you

2168
00:43:53,750 --> 00:43:53,760
rule uh jesus got to make sure that you
 

2169
00:43:53,760 --> 00:43:55,109
rule uh jesus got to make sure that you
know if it has some locks

2170
00:43:55,109 --> 00:43:55,119
know if it has some locks
 

2171
00:43:55,119 --> 00:43:57,109
know if it has some locks
that it acquires all locks you know from

2172
00:43:57,109 --> 00:43:57,119
that it acquires all locks you know from
 

2173
00:43:57,119 --> 00:43:59,270
that it acquires all locks you know from
f and g together actually in some

2174
00:43:59,270 --> 00:43:59,280
f and g together actually in some
 

2175
00:43:59,280 --> 00:44:02,150
f and g together actually in some
uh global order and so that really means

2176
00:44:02,150 --> 00:44:02,160
uh global order and so that really means
 

2177
00:44:02,160 --> 00:44:06,550
uh global order and so that really means
that these are the internals

2178
00:44:06,550 --> 00:44:06,560

 

2179
00:44:06,560 --> 00:44:09,510

the internals of m2 at least in terms of

2180
00:44:09,510 --> 00:44:09,520
the internals of m2 at least in terms of
 

2181
00:44:09,520 --> 00:44:15,829
the internals of m2 at least in terms of
locks

2182
00:44:15,829 --> 00:44:15,839

 

2183
00:44:15,839 --> 00:44:21,270

must be visible to m1

2184
00:44:21,270 --> 00:44:21,280

 

2185
00:44:21,280 --> 00:44:23,109

so that you know and one can ensure that

2186
00:44:23,109 --> 00:44:23,119
so that you know and one can ensure that
 

2187
00:44:23,119 --> 00:44:24,710
so that you know and one can ensure that
actually you know uh calls

2188
00:44:24,710 --> 00:44:24,720
actually you know uh calls
 

2189
00:44:24,720 --> 00:44:28,069
actually you know uh calls
uh at uh n2 in the in in the appropriate

2190
00:44:28,069 --> 00:44:28,079
uh at uh n2 in the in in the appropriate
 

2191
00:44:28,079 --> 00:44:29,109
uh at uh n2 in the in in the appropriate
way

2192
00:44:29,109 --> 00:44:29,119
way
 

2193
00:44:29,119 --> 00:44:30,630
way
uh and you know in some ways that is you

2194
00:44:30,630 --> 00:44:30,640
uh and you know in some ways that is you
 

2195
00:44:30,640 --> 00:44:33,589
uh and you know in some ways that is you
know sort of an abstraction violation

2196
00:44:33,589 --> 00:44:33,599
know sort of an abstraction violation
 

2197
00:44:33,599 --> 00:44:35,829
know sort of an abstraction violation
you know abstractions work out perfectly

2198
00:44:35,829 --> 00:44:35,839
you know abstractions work out perfectly
 

2199
00:44:35,839 --> 00:44:37,109
you know abstractions work out perfectly
you know m1 doesn't really know you need

2200
00:44:37,109 --> 00:44:37,119
you know m1 doesn't really know you need
 

2201
00:44:37,119 --> 00:44:38,790
you know m1 doesn't really know you need
to know anything about how m2 is

2202
00:44:38,790 --> 00:44:38,800
to know anything about how m2 is
 

2203
00:44:38,800 --> 00:44:39,750
to know anything about how m2 is
implemented

2204
00:44:39,750 --> 00:44:39,760
implemented
 

2205
00:44:39,760 --> 00:44:42,470
implemented
and unfortunately logs are a common

2206
00:44:42,470 --> 00:44:42,480
and unfortunately logs are a common
 

2207
00:44:42,480 --> 00:44:44,390
and unfortunately logs are a common
example where some of the internals you

2208
00:44:44,390 --> 00:44:44,400
example where some of the internals you
 

2209
00:44:44,400 --> 00:44:47,270
example where some of the internals you
know of m2 might actually leak out to m1

2210
00:44:47,270 --> 00:44:47,280
know of m2 might actually leak out to m1
 

2211
00:44:47,280 --> 00:44:50,550
know of m2 might actually leak out to m1
because m1 really needs to know and so

2212
00:44:50,550 --> 00:44:50,560
because m1 really needs to know and so
 

2213
00:44:50,560 --> 00:44:52,870
because m1 really needs to know and so
you know when you design a bigger system

2214
00:44:52,870 --> 00:44:52,880
you know when you design a bigger system
 

2215
00:44:52,880 --> 00:44:53,990
you know when you design a bigger system
uh you know

2216
00:44:53,990 --> 00:44:54,000
uh you know
 

2217
00:44:54,000 --> 00:44:55,349
uh you know
this makes the modularity more

2218
00:44:55,349 --> 00:44:55,359
this makes the modularity more
 

2219
00:44:55,359 --> 00:45:00,630
this makes the modularity more
complicated

2220
00:45:00,630 --> 00:45:00,640

 

2221
00:45:00,640 --> 00:45:03,510

um oh sorry i was just wondering does it

2222
00:45:03,510 --> 00:45:03,520
um oh sorry i was just wondering does it
 

2223
00:45:03,520 --> 00:45:04,069
um oh sorry i was just wondering does it
need to be

2224
00:45:04,069 --> 00:45:04,079
need to be
 

2225
00:45:04,079 --> 00:45:07,430
need to be
a complete um ordering of locks or

2226
00:45:07,430 --> 00:45:07,440
a complete um ordering of locks or
 

2227
00:45:07,440 --> 00:45:10,710
a complete um ordering of locks or
can there be some blocks that are um

2228
00:45:10,710 --> 00:45:10,720
can there be some blocks that are um
 

2229
00:45:10,720 --> 00:45:14,230
can there be some blocks that are um
like that can be ordered in whatever way

2230
00:45:14,230 --> 00:45:14,240
like that can be ordered in whatever way
 

2231
00:45:14,240 --> 00:45:17,750
like that can be ordered in whatever way
they yeah it depends if like f and g

2232
00:45:17,750 --> 00:45:17,760
they yeah it depends if like f and g
 

2233
00:45:17,760 --> 00:45:20,150
they yeah it depends if like f and g
you know share any locks right so for

2234
00:45:20,150 --> 00:45:20,160
you know share any locks right so for
 

2235
00:45:20,160 --> 00:45:22,710
you know share any locks right so for
example if you like and look at xv6

2236
00:45:22,710 --> 00:45:22,720
example if you like and look at xv6
 

2237
00:45:22,720 --> 00:45:26,390
example if you like and look at xv6
uh there uh are sort of multiple strands

2238
00:45:26,390 --> 00:45:26,400
uh there uh are sort of multiple strands
 

2239
00:45:26,400 --> 00:45:27,829
uh there uh are sort of multiple strands
of lock orderings because some

2240
00:45:27,829 --> 00:45:27,839
of lock orderings because some
 

2241
00:45:27,839 --> 00:45:29,190
of lock orderings because some
blockchain have nothing to do with other

2242
00:45:29,190 --> 00:45:29,200
blockchain have nothing to do with other
 

2243
00:45:29,200 --> 00:45:30,470
blockchain have nothing to do with other
locks and so they know

2244
00:45:30,470 --> 00:45:30,480
locks and so they know
 

2245
00:45:30,480 --> 00:45:33,349
locks and so they know
they're never required together and so

2246
00:45:33,349 --> 00:45:33,359
they're never required together and so
 

2247
00:45:33,359 --> 00:45:34,550
they're never required together and so
if they're never acquired together

2248
00:45:34,550 --> 00:45:34,560
if they're never acquired together
 

2249
00:45:34,560 --> 00:45:36,150
if they're never acquired together
they're just joined block sets if you

2250
00:45:36,150 --> 00:45:36,160
they're just joined block sets if you
 

2251
00:45:36,160 --> 00:45:36,870
they're just joined block sets if you
will

2252
00:45:36,870 --> 00:45:36,880
will
 

2253
00:45:36,880 --> 00:45:38,630
will
and then only you have to make sure that

2254
00:45:38,630 --> 00:45:38,640
and then only you have to make sure that
 

2255
00:45:38,640 --> 00:45:40,710
and then only you have to make sure that
the ordering in one particular lock set

2256
00:45:40,710 --> 00:45:40,720
the ordering in one particular lock set
 

2257
00:45:40,720 --> 00:45:41,589
the ordering in one particular lock set
is global

2258
00:45:41,589 --> 00:45:41,599
is global
 

2259
00:45:41,599 --> 00:45:43,750
is global
and the ordering in the other lock sets

2260
00:45:43,750 --> 00:45:43,760
and the ordering in the other lock sets
 

2261
00:45:43,760 --> 00:45:45,190
and the ordering in the other lock sets
is completely independent of the other

2262
00:45:45,190 --> 00:45:45,200
is completely independent of the other
 

2263
00:45:45,200 --> 00:45:47,670
is completely independent of the other
ordering

2264
00:45:47,670 --> 00:45:47,680
ordering
 

2265
00:45:47,680 --> 00:45:49,270
ordering
so it is correct that there is no

2266
00:45:49,270 --> 00:45:49,280
so it is correct that there is no
 

2267
00:45:49,280 --> 00:45:51,190
so it is correct that there is no
doesn't have to be a global ordering but

2268
00:45:51,190 --> 00:45:51,200
doesn't have to be a global ordering but
 

2269
00:45:51,200 --> 00:45:51,510
doesn't have to be a global ordering but
like

2270
00:45:51,510 --> 00:45:51,520
like
 

2271
00:45:51,520 --> 00:45:52,870
like
all the functions that you know

2272
00:45:52,870 --> 00:45:52,880
all the functions that you know
 

2273
00:45:52,880 --> 00:45:54,950
all the functions that you know
manipulate the same shared sort of

2274
00:45:54,950 --> 00:45:54,960
manipulate the same shared sort of
 

2275
00:45:54,960 --> 00:45:57,030
manipulate the same shared sort of
log set they need to agree on in global

2276
00:45:57,030 --> 00:45:57,040
log set they need to agree on in global
 

2277
00:45:57,040 --> 00:45:59,190
log set they need to agree on in global
order

2278
00:45:59,190 --> 00:45:59,200
order
 

2279
00:45:59,200 --> 00:46:04,390
order
thank you

2280
00:46:04,390 --> 00:46:04,400

 

2281
00:46:04,400 --> 00:46:08,550

okay so one you know another sort of

2282
00:46:08,550 --> 00:46:08,560
okay so one you know another sort of
 

2283
00:46:08,560 --> 00:46:11,670
okay so one you know another sort of
uh challenge uh with box uh we've seen

2284
00:46:11,670 --> 00:46:11,680
uh challenge uh with box uh we've seen
 

2285
00:46:11,680 --> 00:46:13,190
uh challenge uh with box uh we've seen
now two challenges one is deadlock one

2286
00:46:13,190 --> 00:46:13,200
now two challenges one is deadlock one
 

2287
00:46:13,200 --> 00:46:14,470
now two challenges one is deadlock one
is modularity

2288
00:46:14,470 --> 00:46:14,480
is modularity
 

2289
00:46:14,480 --> 00:46:16,710
is modularity
uh the second uh challenge or third

2290
00:46:16,710 --> 00:46:16,720
uh the second uh challenge or third
 

2291
00:46:16,720 --> 00:46:18,550
uh the second uh challenge or third
challenge is just walks

2292
00:46:18,550 --> 00:46:18,560
challenge is just walks
 

2293
00:46:18,560 --> 00:46:24,069
challenge is just walks
versus performance

2294
00:46:24,069 --> 00:46:24,079

 

2295
00:46:24,079 --> 00:46:26,230

and you know really hinted at this a

2296
00:46:26,230 --> 00:46:26,240
and you know really hinted at this a
 

2297
00:46:26,240 --> 00:46:28,870
and you know really hinted at this a
couple times but it needs to uh

2298
00:46:28,870 --> 00:46:28,880
couple times but it needs to uh
 

2299
00:46:28,880 --> 00:46:31,670
couple times but it needs to uh
is important enough to sort of actually

2300
00:46:31,670 --> 00:46:31,680
is important enough to sort of actually
 

2301
00:46:31,680 --> 00:46:33,349
is important enough to sort of actually
put some emphasis on

2302
00:46:33,349 --> 00:46:33,359
put some emphasis on
 

2303
00:46:33,359 --> 00:46:36,950
put some emphasis on
uh and so basically if you want to get

2304
00:46:36,950 --> 00:46:36,960
uh and so basically if you want to get
 

2305
00:46:36,960 --> 00:46:39,750
uh and so basically if you want to get
performance you need to split up data

2306
00:46:39,750 --> 00:46:39,760
performance you need to split up data
 

2307
00:46:39,760 --> 00:46:40,230
performance you need to split up data
structures

2308
00:46:40,230 --> 00:46:40,240
structures
 

2309
00:46:40,240 --> 00:46:43,109
structures
right so if you have one big kernel lock

2310
00:46:43,109 --> 00:46:43,119
right so if you have one big kernel lock
 

2311
00:46:43,119 --> 00:46:44,790
right so if you have one big kernel lock
uh that will limit your performance to

2312
00:46:44,790 --> 00:46:44,800
uh that will limit your performance to
 

2313
00:46:44,800 --> 00:46:46,710
uh that will limit your performance to
basically performance in a single cpu

2314
00:46:46,710 --> 00:46:46,720
basically performance in a single cpu
 

2315
00:46:46,720 --> 00:46:48,309
basically performance in a single cpu
if you want you know performance remove

2316
00:46:48,309 --> 00:46:48,319
if you want you know performance remove
 

2317
00:46:48,319 --> 00:46:50,630
if you want you know performance remove
uh you want that to perform scales

2318
00:46:50,630 --> 00:46:50,640
uh you want that to perform scales
 

2319
00:46:50,640 --> 00:46:52,790
uh you want that to perform scales
with the numerous cpus you got to split

2320
00:46:52,790 --> 00:46:52,800
with the numerous cpus you got to split
 

2321
00:46:52,800 --> 00:46:54,069
with the numerous cpus you got to split
up

2322
00:46:54,069 --> 00:46:54,079
up
 

2323
00:46:54,079 --> 00:47:04,950
up
you need to split up data structures

2324
00:47:04,950 --> 00:47:04,960

 

2325
00:47:04,960 --> 00:47:07,040

um and the best split you know

2326
00:47:07,040 --> 00:47:07,050
um and the best split you know
 

2327
00:47:07,050 --> 00:47:09,270
um and the best split you know
[Music]

2328
00:47:09,270 --> 00:47:09,280
[Music]
 

2329
00:47:09,280 --> 00:47:17,750
[Music]
is not obvious or can be a challenge

2330
00:47:17,750 --> 00:47:17,760

 

2331
00:47:17,760 --> 00:47:19,349

uh you know for example you know if you

2332
00:47:19,349 --> 00:47:19,359
uh you know for example you know if you
 

2333
00:47:19,359 --> 00:47:20,790
uh you know for example you know if you
do associate the lock with every

2334
00:47:20,790 --> 00:47:20,800
do associate the lock with every
 

2335
00:47:20,800 --> 00:47:22,470
do associate the lock with every
directory should you associate the lock

2336
00:47:22,470 --> 00:47:22,480
directory should you associate the lock
 

2337
00:47:22,480 --> 00:47:23,430
directory should you associate the lock
with every inode

2338
00:47:23,430 --> 00:47:23,440
with every inode
 

2339
00:47:23,440 --> 00:47:24,630
with every inode
you know should you associate a lock

2340
00:47:24,630 --> 00:47:24,640
you know should you associate a lock
 

2341
00:47:24,640 --> 00:47:26,790
you know should you associate a lock
with every process or not uh

2342
00:47:26,790 --> 00:47:26,800
with every process or not uh
 

2343
00:47:26,800 --> 00:47:29,030
with every process or not uh
or is it better you know to sort of

2344
00:47:29,030 --> 00:47:29,040
or is it better you know to sort of
 

2345
00:47:29,040 --> 00:47:30,549
or is it better you know to sort of
split the data structures in a different

2346
00:47:30,549 --> 00:47:30,559
split the data structures in a different
 

2347
00:47:30,559 --> 00:47:31,910
split the data structures in a different
way

2348
00:47:31,910 --> 00:47:31,920
way
 

2349
00:47:31,920 --> 00:47:35,349
way
um and uh and if you make a change you

2350
00:47:35,349 --> 00:47:35,359
um and uh and if you make a change you
 

2351
00:47:35,359 --> 00:47:35,910
um and uh and if you make a change you
know you

2352
00:47:35,910 --> 00:47:35,920
know you
 

2353
00:47:35,920 --> 00:47:38,230
know you
re redesigned sort of the locking

2354
00:47:38,230 --> 00:47:38,240
re redesigned sort of the locking
 

2355
00:47:38,240 --> 00:47:39,349
re redesigned sort of the locking
discipline

2356
00:47:39,349 --> 00:47:39,359
discipline
 

2357
00:47:39,359 --> 00:47:41,430
discipline
uh and then they've got to make sure

2358
00:47:41,430 --> 00:47:41,440
uh and then they've got to make sure
 

2359
00:47:41,440 --> 00:47:42,950
uh and then they've got to make sure
that you know you're still maintained in

2360
00:47:42,950 --> 00:47:42,960
that you know you're still maintained in
 

2361
00:47:42,960 --> 00:47:44,630
that you know you're still maintained in
variance that actually

2362
00:47:44,630 --> 00:47:44,640
variance that actually
 

2363
00:47:44,640 --> 00:47:47,670
variance that actually
the kernel is trying to maintain uh and

2364
00:47:47,670 --> 00:47:47,680
the kernel is trying to maintain uh and
 

2365
00:47:47,680 --> 00:47:49,430
the kernel is trying to maintain uh and
if you split locks you know you also

2366
00:47:49,430 --> 00:47:49,440
if you split locks you know you also
 

2367
00:47:49,440 --> 00:47:51,430
if you split locks you know you also
have to rewrite the goat

2368
00:47:51,430 --> 00:47:51,440
have to rewrite the goat
 

2369
00:47:51,440 --> 00:47:54,069
have to rewrite the goat
or you may have to need that may write

2370
00:47:54,069 --> 00:47:54,079
or you may have to need that may write
 

2371
00:47:54,079 --> 00:47:56,309
or you may have to need that may write
may need to

2372
00:47:56,309 --> 00:47:56,319
may need to
 

2373
00:47:56,319 --> 00:48:02,790
may need to
rewrite code too

2374
00:48:02,790 --> 00:48:02,800

 

2375
00:48:02,800 --> 00:48:05,829

and so it turns out that basically

2376
00:48:05,829 --> 00:48:05,839
and so it turns out that basically
 

2377
00:48:05,839 --> 00:48:08,870
and so it turns out that basically
you refactor you know the

2378
00:48:08,870 --> 00:48:08,880
you refactor you know the
 

2379
00:48:08,880 --> 00:48:10,390
you refactor you know the
parts of your kernel or part of your

2380
00:48:10,390 --> 00:48:10,400
parts of your kernel or part of your
 

2381
00:48:10,400 --> 00:48:13,349
parts of your kernel or part of your
apparel program to get better forms

2382
00:48:13,349 --> 00:48:13,359
apparel program to get better forms
 

2383
00:48:13,359 --> 00:48:15,030
apparel program to get better forms
by splitting data structure ops

2384
00:48:15,030 --> 00:48:15,040
by splitting data structure ops
 

2385
00:48:15,040 --> 00:48:16,549
by splitting data structure ops
introducing more locks

2386
00:48:16,549 --> 00:48:16,559
introducing more locks
 

2387
00:48:16,559 --> 00:48:18,069
introducing more locks
uh you know that it's just it's a lot of

2388
00:48:18,069 --> 00:48:18,079
uh you know that it's just it's a lot of
 

2389
00:48:18,079 --> 00:48:19,430
uh you know that it's just it's a lot of
work you have to carefully think through

2390
00:48:19,430 --> 00:48:19,440
work you have to carefully think through
 

2391
00:48:19,440 --> 00:48:20,950
work you have to carefully think through
that you maintain the values that you

2392
00:48:20,950 --> 00:48:20,960
that you maintain the values that you
 

2393
00:48:20,960 --> 00:48:22,710
that you maintain the values that you
intended to maintain

2394
00:48:22,710 --> 00:48:22,720
intended to maintain
 

2395
00:48:22,720 --> 00:48:25,430
intended to maintain
you have to rewrite code and so

2396
00:48:25,430 --> 00:48:25,440
you have to rewrite code and so
 

2397
00:48:25,440 --> 00:48:27,990
you have to rewrite code and so
generally this is just a lot of work

2398
00:48:27,990 --> 00:48:28,000
generally this is just a lot of work
 

2399
00:48:28,000 --> 00:48:32,630
generally this is just a lot of work
and not easy

2400
00:48:32,630 --> 00:48:32,640

 

2401
00:48:32,640 --> 00:48:34,069

and so this is a little bit of a

2402
00:48:34,069 --> 00:48:34,079
and so this is a little bit of a
 

2403
00:48:34,079 --> 00:48:35,589
and so this is a little bit of a
negative you know news point right

2404
00:48:35,589 --> 00:48:35,599
negative you know news point right
 

2405
00:48:35,599 --> 00:48:36,069
negative you know news point right
because

2406
00:48:36,069 --> 00:48:36,079
because
 

2407
00:48:36,079 --> 00:48:37,829
because
you know we want to get better

2408
00:48:37,829 --> 00:48:37,839
you know we want to get better
 

2409
00:48:37,839 --> 00:48:39,510
you know we want to get better
performance and that suggests you know

2410
00:48:39,510 --> 00:48:39,520
performance and that suggests you know
 

2411
00:48:39,520 --> 00:48:40,630
performance and that suggests you know
more locks

2412
00:48:40,630 --> 00:48:40,640
more locks
 

2413
00:48:40,640 --> 00:48:43,829
more locks
uh and uh but that

2414
00:48:43,829 --> 00:48:43,839
uh and uh but that
 

2415
00:48:43,839 --> 00:48:45,750
uh and uh but that
you know it's actually a you know a lot

2416
00:48:45,750 --> 00:48:45,760
you know it's actually a you know a lot
 

2417
00:48:45,760 --> 00:48:46,950
you know it's actually a you know a lot
of work

2418
00:48:46,950 --> 00:48:46,960
of work
 

2419
00:48:46,960 --> 00:48:50,069
of work
and so the general recipe you know to

2420
00:48:50,069 --> 00:48:50,079
and so the general recipe you know to
 

2421
00:48:50,079 --> 00:48:51,589
and so the general recipe you know to
how to go about this

2422
00:48:51,589 --> 00:48:51,599
how to go about this
 

2423
00:48:51,599 --> 00:49:00,829
how to go about this
is to you know start of course during

2424
00:49:00,829 --> 00:49:00,839

 

2425
00:49:00,839 --> 00:49:05,109

walks

2426
00:49:05,109 --> 00:49:05,119

 

2427
00:49:05,119 --> 00:49:11,430

and then measure

2428
00:49:11,430 --> 00:49:11,440

 

2429
00:49:11,440 --> 00:49:12,710

so i'm going to run a bunch of

2430
00:49:12,710 --> 00:49:12,720
so i'm going to run a bunch of
 

2431
00:49:12,720 --> 00:49:14,829
so i'm going to run a bunch of
applications on top of your kernel

2432
00:49:14,829 --> 00:49:14,839
applications on top of your kernel
 

2433
00:49:14,839 --> 00:49:17,510
applications on top of your kernel
and see whether you get actually any

2434
00:49:17,510 --> 00:49:17,520
and see whether you get actually any
 

2435
00:49:17,520 --> 00:49:19,030
and see whether you get actually any
speed up if they actually explode

2436
00:49:19,030 --> 00:49:19,040
speed up if they actually explode
 

2437
00:49:19,040 --> 00:49:20,549
speed up if they actually explode
multiple cars

2438
00:49:20,549 --> 00:49:20,559
multiple cars
 

2439
00:49:20,559 --> 00:49:22,549
multiple cars
and if they do you know your base will

2440
00:49:22,549 --> 00:49:22,559
and if they do you know your base will
 

2441
00:49:22,559 --> 00:49:23,670
and if they do you know your base will
be done right

2442
00:49:23,670 --> 00:49:23,680
be done right
 

2443
00:49:23,680 --> 00:49:26,390
be done right
your walking design is good enough if if

2444
00:49:26,390 --> 00:49:26,400
your walking design is good enough if if
 

2445
00:49:26,400 --> 00:49:27,510
your walking design is good enough if if
you don't get speed up

2446
00:49:27,510 --> 00:49:27,520
you don't get speed up
 

2447
00:49:27,520 --> 00:49:28,950
you don't get speed up
basically that means that some lock is

2448
00:49:28,950 --> 00:49:28,960
basically that means that some lock is
 

2449
00:49:28,960 --> 00:49:33,030
basically that means that some lock is
contended

2450
00:49:33,030 --> 00:49:33,040

 

2451
00:49:33,040 --> 00:49:35,030

multiple processes are trying to get the

2452
00:49:35,030 --> 00:49:35,040
multiple processes are trying to get the
 

2453
00:49:35,040 --> 00:49:36,630
multiple processes are trying to get the
same lock and therefore they are

2454
00:49:36,630 --> 00:49:36,640
same lock and therefore they are
 

2455
00:49:36,640 --> 00:49:37,670
same lock and therefore they are
serialized

2456
00:49:37,670 --> 00:49:37,680
serialized
 

2457
00:49:37,680 --> 00:49:40,470
serialized
and therefore you don't get speed up

2458
00:49:40,470 --> 00:49:40,480
and therefore you don't get speed up
 

2459
00:49:40,480 --> 00:49:42,309
and therefore you don't get speed up
then you know you have to rethink about

2460
00:49:42,309 --> 00:49:42,319
then you know you have to rethink about
 

2461
00:49:42,319 --> 00:49:48,470
then you know you have to rethink about
then you need to redesign

2462
00:49:48,470 --> 00:49:48,480

 

2463
00:49:48,480 --> 00:49:49,829

but the point is that you want to be

2464
00:49:49,829 --> 00:49:49,839
but the point is that you want to be
 

2465
00:49:49,839 --> 00:49:51,910
but the point is that you want to be
guided you know by these

2466
00:49:51,910 --> 00:49:51,920
guided you know by these
 

2467
00:49:51,920 --> 00:49:53,990
guided you know by these
measurements uh because it may be the

2468
00:49:53,990 --> 00:49:54,000
measurements uh because it may be the
 

2469
00:49:54,000 --> 00:49:55,750
measurements uh because it may be the
case that you know some module that

2470
00:49:55,750 --> 00:49:55,760
case that you know some module that
 

2471
00:49:55,760 --> 00:49:57,349
case that you know some module that
uses of course green block is just not

2472
00:49:57,349 --> 00:49:57,359
uses of course green block is just not
 

2473
00:49:57,359 --> 00:49:59,910
uses of course green block is just not
called uh in parallel often

2474
00:49:59,910 --> 00:49:59,920
called uh in parallel often
 

2475
00:49:59,920 --> 00:50:01,670
called uh in parallel often
and therefore it's not necessary to

2476
00:50:01,670 --> 00:50:01,680
and therefore it's not necessary to
 

2477
00:50:01,680 --> 00:50:02,950
and therefore it's not necessary to
actually redesign

2478
00:50:02,950 --> 00:50:02,960
actually redesign
 

2479
00:50:02,960 --> 00:50:04,710
actually redesign
and since redesign is a lot of work you

2480
00:50:04,710 --> 00:50:04,720
and since redesign is a lot of work you
 

2481
00:50:04,720 --> 00:50:06,390
and since redesign is a lot of work you
know and you know it also

2482
00:50:06,390 --> 00:50:06,400
know and you know it also
 

2483
00:50:06,400 --> 00:50:07,990
know and you know it also
can complicate the reasoning about that

2484
00:50:07,990 --> 00:50:08,000
can complicate the reasoning about that
 

2485
00:50:08,000 --> 00:50:09,750
can complicate the reasoning about that
code uh you know then

2486
00:50:09,750 --> 00:50:09,760
code uh you know then
 

2487
00:50:09,760 --> 00:50:11,190
code uh you know then
you know it's a good idea not actually

2488
00:50:11,190 --> 00:50:11,200
you know it's a good idea not actually
 

2489
00:50:11,200 --> 00:50:12,549
you know it's a good idea not actually
to do that redesign is it's not

2490
00:50:12,549 --> 00:50:12,559
to do that redesign is it's not
 

2491
00:50:12,559 --> 00:50:14,390
to do that redesign is it's not
necessary

2492
00:50:14,390 --> 00:50:14,400
necessary
 

2493
00:50:14,400 --> 00:50:18,309
necessary
um and so in general a good

2494
00:50:18,309 --> 00:50:18,319
um and so in general a good
 

2495
00:50:18,319 --> 00:50:20,230
um and so in general a good
rule of thumb is you know start with

2496
00:50:20,230 --> 00:50:20,240
rule of thumb is you know start with
 

2497
00:50:20,240 --> 00:50:21,349
rule of thumb is you know start with
course grade locks

2498
00:50:21,349 --> 00:50:21,359
course grade locks
 

2499
00:50:21,359 --> 00:50:23,430
course grade locks
measure whether a contention appears in

2500
00:50:23,430 --> 00:50:23,440
measure whether a contention appears in
 

2501
00:50:23,440 --> 00:50:24,710
measure whether a contention appears in
one of these locks and then

2502
00:50:24,710 --> 00:50:24,720
one of these locks and then
 

2503
00:50:24,720 --> 00:50:26,470
one of these locks and then
redesign that part of the system so that

2504
00:50:26,470 --> 00:50:26,480
redesign that part of the system so that
 

2505
00:50:26,480 --> 00:50:30,549
redesign that part of the system so that
you get better better parallelism

2506
00:50:30,549 --> 00:50:30,559

 

2507
00:50:30,559 --> 00:50:32,710

does it all make sense any questions so

2508
00:50:32,710 --> 00:50:32,720
does it all make sense any questions so
 

2509
00:50:32,720 --> 00:50:38,950
does it all make sense any questions so
far

2510
00:50:38,950 --> 00:50:38,960

 

2511
00:50:38,960 --> 00:50:41,990

okay let's look at uh uh

2512
00:50:41,990 --> 00:50:42,000
okay let's look at uh uh
 

2513
00:50:42,000 --> 00:50:43,910
okay let's look at uh uh
let's do a little uh let's look at the

2514
00:50:43,910 --> 00:50:43,920
let's do a little uh let's look at the
 

2515
00:50:43,920 --> 00:50:46,630
let's do a little uh let's look at the
in xc6 uh you know some code you know

2516
00:50:46,630 --> 00:50:46,640
in xc6 uh you know some code you know
 

2517
00:50:46,640 --> 00:50:48,150
in xc6 uh you know some code you know
so you can understand a little bit uh

2518
00:50:48,150 --> 00:50:48,160
so you can understand a little bit uh
 

2519
00:50:48,160 --> 00:50:50,150
so you can understand a little bit uh
how this locking sort of works out in

2520
00:50:50,150 --> 00:50:50,160
how this locking sort of works out in
 

2521
00:50:50,160 --> 00:50:53,510
how this locking sort of works out in
practice in xv6 uh

2522
00:50:53,510 --> 00:50:53,520
practice in xv6 uh
 

2523
00:50:53,520 --> 00:50:58,470
practice in xv6 uh
and so i'm going to go back to our uh

2524
00:50:58,470 --> 00:50:58,480

 

2525
00:50:58,480 --> 00:51:01,670

to the this screen

2526
00:51:01,670 --> 00:51:01,680
to the this screen
 

2527
00:51:01,680 --> 00:51:04,790
to the this screen
uh i really need this and i want to look

2528
00:51:04,790 --> 00:51:04,800
uh i really need this and i want to look
 

2529
00:51:04,800 --> 00:51:05,109
uh i really need this and i want to look
at

2530
00:51:05,109 --> 00:51:05,119
at
 

2531
00:51:05,119 --> 00:51:06,870
at
view art because you know we're start

2532
00:51:06,870 --> 00:51:06,880
view art because you know we're start
 

2533
00:51:06,880 --> 00:51:08,549
view art because you know we're start
talking about locking there

2534
00:51:08,549 --> 00:51:08,559
talking about locking there
 

2535
00:51:08,559 --> 00:51:10,700
talking about locking there
uh on

2536
00:51:10,700 --> 00:51:10,710
uh on
 

2537
00:51:10,710 --> 00:51:13,109
uh on
[Music]

2538
00:51:13,109 --> 00:51:13,119
[Music]
 

2539
00:51:13,119 --> 00:51:14,549
[Music]
a monday and i want to look a little bit

2540
00:51:14,549 --> 00:51:14,559
a monday and i want to look a little bit
 

2541
00:51:14,559 --> 00:51:16,390
a monday and i want to look a little bit
more in detail

2542
00:51:16,390 --> 00:51:16,400
more in detail
 

2543
00:51:16,400 --> 00:51:17,910
more in detail
uh now that we know a little bit more

2544
00:51:17,910 --> 00:51:17,920
uh now that we know a little bit more
 

2545
00:51:17,920 --> 00:51:19,589
uh now that we know a little bit more
about locks and then also

2546
00:51:19,589 --> 00:51:19,599
about locks and then also
 

2547
00:51:19,599 --> 00:51:20,829
about locks and then also
illustrate a couple of interesting

2548
00:51:20,829 --> 00:51:20,839
illustrate a couple of interesting
 

2549
00:51:20,839 --> 00:51:28,069
illustrate a couple of interesting
points

2550
00:51:28,069 --> 00:51:28,079

 

2551
00:51:28,079 --> 00:51:30,870

so first uh you know it turns out you

2552
00:51:30,870 --> 00:51:30,880
so first uh you know it turns out you
 

2553
00:51:30,880 --> 00:51:32,069
so first uh you know it turns out you
know i want to go to

2554
00:51:32,069 --> 00:51:32,079
know i want to go to
 

2555
00:51:32,079 --> 00:51:35,349
know i want to go to
you know looking at lock

2556
00:51:35,349 --> 00:51:35,359
you know looking at lock
 

2557
00:51:35,359 --> 00:51:37,109
you know looking at lock
you know turns out that the uart

2558
00:51:37,109 --> 00:51:37,119
you know turns out that the uart
 

2559
00:51:37,119 --> 00:51:39,030
you know turns out that the uart
actually has only one lock

2560
00:51:39,030 --> 00:51:39,040
actually has only one lock
 

2561
00:51:39,040 --> 00:51:40,549
actually has only one lock
so you can think about this as a

2562
00:51:40,549 --> 00:51:40,559
so you can think about this as a
 

2563
00:51:40,559 --> 00:51:42,309
so you can think about this as a
reasonable coarse grained uh

2564
00:51:42,309 --> 00:51:42,319
reasonable coarse grained uh
 

2565
00:51:42,319 --> 00:51:44,230
reasonable coarse grained uh
design at this particular point at least

2566
00:51:44,230 --> 00:51:44,240
design at this particular point at least
 

2567
00:51:44,240 --> 00:51:45,349
design at this particular point at least
for the uart

2568
00:51:45,349 --> 00:51:45,359
for the uart
 

2569
00:51:45,359 --> 00:51:46,710
for the uart
and that particular lock you know

2570
00:51:46,710 --> 00:51:46,720
and that particular lock you know
 

2571
00:51:46,720 --> 00:51:48,710
and that particular lock you know
protects uh basically the uart

2572
00:51:48,710 --> 00:51:48,720
protects uh basically the uart
 

2573
00:51:48,720 --> 00:51:51,349
protects uh basically the uart
transmission buffer and the right

2574
00:51:51,349 --> 00:51:51,359
transmission buffer and the right
 

2575
00:51:51,359 --> 00:51:52,069
transmission buffer and the right
pointer

2576
00:51:52,069 --> 00:51:52,079
pointer
 

2577
00:51:52,079 --> 00:51:55,589
pointer
and the read pointer and so when we

2578
00:51:55,589 --> 00:51:55,599
and the read pointer and so when we
 

2579
00:51:55,599 --> 00:51:56,870
and the read pointer and so when we
transmit you know the

2580
00:51:56,870 --> 00:51:56,880
transmit you know the
 

2581
00:51:56,880 --> 00:51:59,030
transmit you know the
right pointer points to the next free

2582
00:51:59,030 --> 00:51:59,040
right pointer points to the next free
 

2583
00:51:59,040 --> 00:52:01,190
right pointer points to the next free
slot in the transmission buffer

2584
00:52:01,190 --> 00:52:01,200
slot in the transmission buffer
 

2585
00:52:01,200 --> 00:52:03,109
slot in the transmission buffer
and the read pointer is the next law

2586
00:52:03,109 --> 00:52:03,119
and the read pointer is the next law
 

2587
00:52:03,119 --> 00:52:05,190
and the read pointer is the next law
that actually needs to be transmitted

2588
00:52:05,190 --> 00:52:05,200
that actually needs to be transmitted
 

2589
00:52:05,200 --> 00:52:09,109
that actually needs to be transmitted
okay this is our uh standard design

2590
00:52:09,109 --> 00:52:09,119
okay this is our uh standard design
 

2591
00:52:09,119 --> 00:52:12,710
okay this is our uh standard design
for uh parallelism uh over consumer

2592
00:52:12,710 --> 00:52:12,720
for uh parallelism uh over consumer
 

2593
00:52:12,720 --> 00:52:15,670
for uh parallelism uh over consumer
producer consumer parallelism so let me

2594
00:52:15,670 --> 00:52:15,680
producer consumer parallelism so let me
 

2595
00:52:15,680 --> 00:52:18,309
producer consumer parallelism so let me
go back and

2596
00:52:18,309 --> 00:52:18,319
go back and
 

2597
00:52:18,319 --> 00:52:24,790
go back and
brought it out so case study

2598
00:52:24,790 --> 00:52:24,800

 

2599
00:52:24,800 --> 00:52:29,829

uart and there's basically a buffer

2600
00:52:29,829 --> 00:52:29,839
uart and there's basically a buffer
 

2601
00:52:29,839 --> 00:52:31,430
uart and there's basically a buffer
and there's a read point there's a right

2602
00:52:31,430 --> 00:52:31,440
and there's a read point there's a right
 

2603
00:52:31,440 --> 00:52:32,950
and there's a read point there's a right
pointer or

2604
00:52:32,950 --> 00:52:32,960
pointer or
 

2605
00:52:32,960 --> 00:52:37,030
pointer or
right read index and read index

2606
00:52:37,030 --> 00:52:37,040
right read index and read index
 

2607
00:52:37,040 --> 00:52:42,790
right read index and read index
this has to go to the uart displayed

2608
00:52:42,790 --> 00:52:42,800

 

2609
00:52:42,800 --> 00:52:46,630

and this is the writer

2610
00:52:46,630 --> 00:52:46,640
and this is the writer
 

2611
00:52:46,640 --> 00:52:49,190
and this is the writer
printf maybe that actually sticks

2612
00:52:49,190 --> 00:52:49,200
printf maybe that actually sticks
 

2613
00:52:49,200 --> 00:52:52,549
printf maybe that actually sticks
characters into this buffer

2614
00:52:52,549 --> 00:52:52,559
characters into this buffer
 

2615
00:52:52,559 --> 00:52:55,349
characters into this buffer
okay and so you know what we can see is

2616
00:52:55,349 --> 00:52:55,359
okay and so you know what we can see is
 

2617
00:52:55,359 --> 00:52:56,230
okay and so you know what we can see is
that the lock

2618
00:52:56,230 --> 00:52:56,240
that the lock
 

2619
00:52:56,240 --> 00:53:03,349
that the lock
uh you know the lock has multiple rolls

2620
00:53:03,349 --> 00:53:03,359

 

2621
00:53:03,359 --> 00:53:05,670

one is to basically protect this data

2622
00:53:05,670 --> 00:53:05,680
one is to basically protect this data
 

2623
00:53:05,680 --> 00:53:11,510
one is to basically protect this data
structure

2624
00:53:11,510 --> 00:53:11,520

 

2625
00:53:11,520 --> 00:53:12,829

and this data structure has some

2626
00:53:12,829 --> 00:53:12,839
and this data structure has some
 

2627
00:53:12,839 --> 00:53:14,630
and this data structure has some
invariance

2628
00:53:14,630 --> 00:53:14,640
invariance
 

2629
00:53:14,640 --> 00:53:17,349
invariance
namely the read to proceed you know the

2630
00:53:17,349 --> 00:53:17,359
namely the read to proceed you know the
 

2631
00:53:17,359 --> 00:53:19,190
namely the read to proceed you know the
right

2632
00:53:19,190 --> 00:53:19,200
right
 

2633
00:53:19,200 --> 00:53:22,069
right
anything between r and w our characters

2634
00:53:22,069 --> 00:53:22,079
anything between r and w our characters
 

2635
00:53:22,079 --> 00:53:23,349
anything between r and w our characters
that need to be sent

2636
00:53:23,349 --> 00:53:23,359
that need to be sent
 

2637
00:53:23,359 --> 00:53:25,510
that need to be sent
anything between w and r are things that

2638
00:53:25,510 --> 00:53:25,520
anything between w and r are things that
 

2639
00:53:25,520 --> 00:53:29,030
anything between w and r are things that
actually are empty slots and the locks

2640
00:53:29,030 --> 00:53:29,040
actually are empty slots and the locks
 

2641
00:53:29,040 --> 00:53:30,470
actually are empty slots and the locks
basically help us

2642
00:53:30,470 --> 00:53:30,480
basically help us
 

2643
00:53:30,480 --> 00:53:34,069
basically help us
maintain that invariant

2644
00:53:34,069 --> 00:53:34,079
maintain that invariant
 

2645
00:53:34,079 --> 00:53:37,109
maintain that invariant
so here's our

2646
00:53:37,109 --> 00:53:37,119
so here's our
 

2647
00:53:37,119 --> 00:53:40,230
so here's our
code again and you know let's look at

2648
00:53:40,230 --> 00:53:40,240
code again and you know let's look at
 

2649
00:53:40,240 --> 00:53:42,309
code again and you know let's look at
the choirs so

2650
00:53:42,309 --> 00:53:42,319
the choirs so
 

2651
00:53:42,319 --> 00:53:45,510
the choirs so
here's the uart put c and you know the

2652
00:53:45,510 --> 00:53:45,520
here's the uart put c and you know the
 

2653
00:53:45,520 --> 00:53:46,150
here's the uart put c and you know the
first thing

2654
00:53:46,150 --> 00:53:46,160
first thing
 

2655
00:53:46,160 --> 00:53:47,589
first thing
you know you work with c does is

2656
00:53:47,589 --> 00:53:47,599
you know you work with c does is
 

2657
00:53:47,599 --> 00:53:49,910
you know you work with c does is
actually you know grab the lock

2658
00:53:49,910 --> 00:53:49,920
actually you know grab the lock
 

2659
00:53:49,920 --> 00:53:53,349
actually you know grab the lock
uh and then stick the character

2660
00:53:53,349 --> 00:53:53,359
uh and then stick the character
 

2661
00:53:53,359 --> 00:53:55,349
uh and then stick the character
if there's a place in the buffer sticks

2662
00:53:55,349 --> 00:53:55,359
if there's a place in the buffer sticks
 

2663
00:53:55,359 --> 00:53:57,109
if there's a place in the buffer sticks
the barrier character in the buffer

2664
00:53:57,109 --> 00:53:57,119
the barrier character in the buffer
 

2665
00:53:57,119 --> 00:53:59,109
the barrier character in the buffer
and starts you know the printing and

2666
00:53:59,109 --> 00:53:59,119
and starts you know the printing and
 

2667
00:53:59,119 --> 00:54:00,549
and starts you know the printing and
then releases

2668
00:54:00,549 --> 00:54:00,559
then releases
 

2669
00:54:00,559 --> 00:54:03,670
then releases
the lock so if two

2670
00:54:03,670 --> 00:54:03,680
the lock so if two
 

2671
00:54:03,680 --> 00:54:06,710
the lock so if two
processes at the same time call uart

2672
00:54:06,710 --> 00:54:06,720
processes at the same time call uart
 

2673
00:54:06,720 --> 00:54:07,829
processes at the same time call uart
quick c

2674
00:54:07,829 --> 00:54:07,839
quick c
 

2675
00:54:07,839 --> 00:54:10,630
quick c
then this lock will ensure that you know

2676
00:54:10,630 --> 00:54:10,640
then this lock will ensure that you know
 

2677
00:54:10,640 --> 00:54:12,069
then this lock will ensure that you know
one character from the first process

2678
00:54:12,069 --> 00:54:12,079
one character from the first process
 

2679
00:54:12,079 --> 00:54:13,270
one character from the first process
goes in the first slot

2680
00:54:13,270 --> 00:54:13,280
goes in the first slot
 

2681
00:54:13,280 --> 00:54:16,390
goes in the first slot
and then the uh second character

2682
00:54:16,390 --> 00:54:16,400
and then the uh second character
 

2683
00:54:16,400 --> 00:54:17,990
and then the uh second character
of the second process you know goes in

2684
00:54:17,990 --> 00:54:18,000
of the second process you know goes in
 

2685
00:54:18,000 --> 00:54:19,670
of the second process you know goes in
the next slot and they're known as

2686
00:54:19,670 --> 00:54:19,680
the next slot and they're known as
 

2687
00:54:19,680 --> 00:54:20,309
the next slot and they're known as
happen to

2688
00:54:20,309 --> 00:54:20,319
happen to
 

2689
00:54:20,319 --> 00:54:23,190
happen to
end up in the same slot right so this is

2690
00:54:23,190 --> 00:54:23,200
end up in the same slot right so this is
 

2691
00:54:23,200 --> 00:54:24,549
end up in the same slot right so this is
like a clear example where

2692
00:54:24,549 --> 00:54:24,559
like a clear example where
 

2693
00:54:24,559 --> 00:54:27,750
like a clear example where
luck you know helps us to uh

2694
00:54:27,750 --> 00:54:27,760
luck you know helps us to uh
 

2695
00:54:27,760 --> 00:54:30,870
luck you know helps us to uh
uh you know avoid the race condition

2696
00:54:30,870 --> 00:54:30,880
uh you know avoid the race condition
 

2697
00:54:30,880 --> 00:54:33,349
uh you know avoid the race condition
uh because otherwise you know the the

2698
00:54:33,349 --> 00:54:33,359
uh because otherwise you know the the
 

2699
00:54:33,359 --> 00:54:35,030
uh because otherwise you know the the
second process might over

2700
00:54:35,030 --> 00:54:35,040
second process might over
 

2701
00:54:35,040 --> 00:54:36,870
second process might over
write you know the first processes

2702
00:54:36,870 --> 00:54:36,880
write you know the first processes
 

2703
00:54:36,880 --> 00:54:38,630
write you know the first processes
character

2704
00:54:38,630 --> 00:54:38,640
character
 

2705
00:54:38,640 --> 00:54:41,349
character
so that's one part so then we go look at

2706
00:54:41,349 --> 00:54:41,359
so that's one part so then we go look at
 

2707
00:54:41,359 --> 00:54:43,030
so that's one part so then we go look at
uh

2708
00:54:43,030 --> 00:54:43,040
uh
 

2709
00:54:43,040 --> 00:54:44,150
uh
we did that a little bit before if you

2710
00:54:44,150 --> 00:54:44,160
we did that a little bit before if you
 

2711
00:54:44,160 --> 00:54:45,670
we did that a little bit before if you
look at start you know we see a couple

2712
00:54:45,670 --> 00:54:45,680
look at start you know we see a couple
 

2713
00:54:45,680 --> 00:54:47,270
look at start you know we see a couple
more things going on

2714
00:54:47,270 --> 00:54:47,280
more things going on
 

2715
00:54:47,280 --> 00:54:50,390
more things going on
um the uh

2716
00:54:50,390 --> 00:54:50,400
um the uh
 

2717
00:54:50,400 --> 00:54:53,990
um the uh
we see actually that the uh if the

2718
00:54:53,990 --> 00:54:54,000
we see actually that the uh if the
 

2719
00:54:54,000 --> 00:54:57,270
we see actually that the uh if the
buffer is not you know the uh

2720
00:54:57,270 --> 00:54:57,280
buffer is not you know the uh
 

2721
00:54:57,280 --> 00:54:59,829
buffer is not you know the uh
if the buffer is not empty then you know

2722
00:54:59,829 --> 00:54:59,839
if the buffer is not empty then you know
 

2723
00:54:59,839 --> 00:55:00,549
if the buffer is not empty then you know
we know that

2724
00:55:00,549 --> 00:55:00,559
we know that
 

2725
00:55:00,559 --> 00:55:02,549
we know that
basically there's a bunch of uh

2726
00:55:02,549 --> 00:55:02,559
basically there's a bunch of uh
 

2727
00:55:02,559 --> 00:55:04,789
basically there's a bunch of uh
characters that are being progressed

2728
00:55:04,789 --> 00:55:04,799
characters that are being progressed
 

2729
00:55:04,799 --> 00:55:07,750
characters that are being progressed
or being sent and you know the lock you

2730
00:55:07,750 --> 00:55:07,760
or being sent and you know the lock you
 

2731
00:55:07,760 --> 00:55:09,349
or being sent and you know the lock you
know make sure that we don't really

2732
00:55:09,349 --> 00:55:09,359
know make sure that we don't really
 

2733
00:55:09,359 --> 00:55:11,910
know make sure that we don't really
uh overwrite any of those and so

2734
00:55:11,910 --> 00:55:11,920
uh overwrite any of those and so
 

2735
00:55:11,920 --> 00:55:13,510
uh overwrite any of those and so
anything that's sort of at the

2736
00:55:13,510 --> 00:55:13,520
anything that's sort of at the
 

2737
00:55:13,520 --> 00:55:17,030
anything that's sort of at the
tail end of the queue uh is actually uh

2738
00:55:17,030 --> 00:55:17,040
tail end of the queue uh is actually uh
 

2739
00:55:17,040 --> 00:55:18,150
tail end of the queue uh is actually uh
being processed

2740
00:55:18,150 --> 00:55:18,160
being processed
 

2741
00:55:18,160 --> 00:55:21,910
being processed
by the uart uh

2742
00:55:21,910 --> 00:55:21,920

 

2743
00:55:21,920 --> 00:55:26,390

itself so tail end

2744
00:55:26,390 --> 00:55:26,400

 

2745
00:55:26,400 --> 00:55:30,230

is in flight

2746
00:55:30,230 --> 00:55:30,240

 

2747
00:55:30,240 --> 00:55:32,950

and we make sure that we basically don't

2748
00:55:32,950 --> 00:55:32,960
and we make sure that we basically don't
 

2749
00:55:32,960 --> 00:55:35,109
and we make sure that we basically don't
modify or interfere with that particular

2750
00:55:35,109 --> 00:55:35,119
modify or interfere with that particular
 

2751
00:55:35,119 --> 00:55:36,230
modify or interfere with that particular
aspect by you know

2752
00:55:36,230 --> 00:55:36,240
aspect by you know
 

2753
00:55:36,240 --> 00:55:39,589
aspect by you know
grabbing a lock and then finally

2754
00:55:39,589 --> 00:55:39,599
grabbing a lock and then finally
 

2755
00:55:39,599 --> 00:55:42,150
grabbing a lock and then finally
the sort of more and more thing is that

2756
00:55:42,150 --> 00:55:42,160
the sort of more and more thing is that
 

2757
00:55:42,160 --> 00:55:44,390
the sort of more and more thing is that
the rights

2758
00:55:44,390 --> 00:55:44,400
the rights
 

2759
00:55:44,400 --> 00:55:46,390
the rights
you know to the registers of the uart

2760
00:55:46,390 --> 00:55:46,400
you know to the registers of the uart
 

2761
00:55:46,400 --> 00:55:47,829
you know to the registers of the uart
like the thr register

2762
00:55:47,829 --> 00:55:47,839
like the thr register
 

2763
00:55:47,839 --> 00:55:49,589
like the thr register
which one there's only one you know

2764
00:55:49,589 --> 00:55:49,599
which one there's only one you know
 

2765
00:55:49,599 --> 00:55:51,270
which one there's only one you know
basically the lock ensures

2766
00:55:51,270 --> 00:55:51,280
basically the lock ensures
 

2767
00:55:51,280 --> 00:55:52,950
basically the lock ensures
uh you remember that you are start is

2768
00:55:52,950 --> 00:55:52,960
uh you remember that you are start is
 

2769
00:55:52,960 --> 00:55:55,030
uh you remember that you are start is
called with the lock held

2770
00:55:55,030 --> 00:55:55,040
called with the lock held
 

2771
00:55:55,040 --> 00:55:57,349
called with the lock held
uh ensures that there's only one writer

2772
00:55:57,349 --> 00:55:57,359
uh ensures that there's only one writer
 

2773
00:55:57,359 --> 00:55:58,390
uh ensures that there's only one writer
you know to the ta

2774
00:55:58,390 --> 00:55:58,400
you know to the ta
 

2775
00:55:58,400 --> 00:56:01,510
you know to the ta
register and so another sort of

2776
00:56:01,510 --> 00:56:01,520
register and so another sort of
 

2777
00:56:01,520 --> 00:56:01,990
register and so another sort of
invariant

2778
00:56:01,990 --> 00:56:02,000
invariant
 

2779
00:56:02,000 --> 00:56:04,470
invariant
or another aspect that the locking

2780
00:56:04,470 --> 00:56:04,480
or another aspect that the locking
 

2781
00:56:04,480 --> 00:56:05,910
or another aspect that the locking
enforces is that

2782
00:56:05,910 --> 00:56:05,920
enforces is that
 

2783
00:56:05,920 --> 00:56:10,470
enforces is that
hardware registers

2784
00:56:10,470 --> 00:56:10,480

 

2785
00:56:10,480 --> 00:56:16,549

have one writer

2786
00:56:16,549 --> 00:56:16,559
have one writer
 

2787
00:56:16,559 --> 00:56:20,069
have one writer
okay now there's one other instant thing

2788
00:56:20,069 --> 00:56:20,079
okay now there's one other instant thing
 

2789
00:56:20,079 --> 00:56:21,030
okay now there's one other instant thing
that i want to

2790
00:56:21,030 --> 00:56:21,040
that i want to
 

2791
00:56:21,040 --> 00:56:24,150
that i want to
uh talk a little bit about and that is

2792
00:56:24,150 --> 00:56:24,160
uh talk a little bit about and that is
 

2793
00:56:24,160 --> 00:56:26,870
uh talk a little bit about and that is
uh you know if the uart is done correct

2794
00:56:26,870 --> 00:56:26,880
uh you know if the uart is done correct
 

2795
00:56:26,880 --> 00:56:28,549
uh you know if the uart is done correct
the hard work is done then

2796
00:56:28,549 --> 00:56:28,559
the hard work is done then
 

2797
00:56:28,559 --> 00:56:31,829
the hard work is done then
there was an interrupt and uh

2798
00:56:31,829 --> 00:56:31,839
there was an interrupt and uh
 

2799
00:56:31,839 --> 00:56:33,589
there was an interrupt and uh
and as you know we noticed before york

2800
00:56:33,589 --> 00:56:33,599
and as you know we noticed before york
 

2801
00:56:33,599 --> 00:56:36,150
and as you know we noticed before york
start correct you know we have to

2802
00:56:36,150 --> 00:56:36,160
start correct you know we have to
 

2803
00:56:36,160 --> 00:56:38,069
start correct you know we have to
the color it's it's on the collar to

2804
00:56:38,069 --> 00:56:38,079
the color it's it's on the collar to
 

2805
00:56:38,079 --> 00:56:39,190
the color it's it's on the collar to
require the lock

2806
00:56:39,190 --> 00:56:39,200
require the lock
 

2807
00:56:39,200 --> 00:56:42,549
require the lock
to ensure uh that uh with

2808
00:56:42,549 --> 00:56:42,559
to ensure uh that uh with
 

2809
00:56:42,559 --> 00:56:45,109
to ensure uh that uh with
multiple uh entities writing to the

2810
00:56:45,109 --> 00:56:45,119
multiple uh entities writing to the
 

2811
00:56:45,119 --> 00:56:46,630
multiple uh entities writing to the
right register

2812
00:56:46,630 --> 00:56:46,640
right register
 

2813
00:56:46,640 --> 00:56:50,549
right register
um and so uh the uart interrupt itself

2814
00:56:50,549 --> 00:56:50,559
um and so uh the uart interrupt itself
 

2815
00:56:50,559 --> 00:56:53,270
um and so uh the uart interrupt itself
could run in parallel you know with

2816
00:56:53,270 --> 00:56:53,280
could run in parallel you know with
 

2817
00:56:53,280 --> 00:56:55,109
could run in parallel you know with
another process that called printf so if

2818
00:56:55,109 --> 00:56:55,119
another process that called printf so if
 

2819
00:56:55,119 --> 00:56:56,870
another process that called printf so if
some practical printf

2820
00:56:56,870 --> 00:56:56,880
some practical printf
 

2821
00:56:56,880 --> 00:56:59,750
some practical printf
that runs a cpu zero and on cpu one

2822
00:56:59,750 --> 00:56:59,760
that runs a cpu zero and on cpu one
 

2823
00:56:59,760 --> 00:57:01,510
that runs a cpu zero and on cpu one
actually takes the uart interrupt you

2824
00:57:01,510 --> 00:57:01,520
actually takes the uart interrupt you
 

2825
00:57:01,520 --> 00:57:02,789
actually takes the uart interrupt you
know because maybe it's doing nothing

2826
00:57:02,789 --> 00:57:02,799
know because maybe it's doing nothing
 

2827
00:57:02,799 --> 00:57:03,910
know because maybe it's doing nothing
and so it's ready to take an interrupt

2828
00:57:03,910 --> 00:57:03,920
and so it's ready to take an interrupt
 

2829
00:57:03,920 --> 00:57:05,670
and so it's ready to take an interrupt
at any particular point in time

2830
00:57:05,670 --> 00:57:05,680
at any particular point in time
 

2831
00:57:05,680 --> 00:57:08,950
at any particular point in time
and it will uh call your start

2832
00:57:08,950 --> 00:57:08,960
and it will uh call your start
 

2833
00:57:08,960 --> 00:57:10,549
and it will uh call your start
and it has to be the case correct you

2834
00:57:10,549 --> 00:57:10,559
and it has to be the case correct you
 

2835
00:57:10,559 --> 00:57:11,910
and it has to be the case correct you
know we want to ensure that there's a

2836
00:57:11,910 --> 00:57:11,920
know we want to ensure that there's a
 

2837
00:57:11,920 --> 00:57:13,349
know we want to ensure that there's a
single raider you know to these hardware

2838
00:57:13,349 --> 00:57:13,359
single raider you know to these hardware
 

2839
00:57:13,359 --> 00:57:14,390
single raider you know to these hardware
registers

2840
00:57:14,390 --> 00:57:14,400
registers
 

2841
00:57:14,400 --> 00:57:17,430
registers
uh or to protect you know the variance

2842
00:57:17,430 --> 00:57:17,440
uh or to protect you know the variance
 

2843
00:57:17,440 --> 00:57:18,150
uh or to protect you know the variance
actually of the

2844
00:57:18,150 --> 00:57:18,160
actually of the
 

2845
00:57:18,160 --> 00:57:20,470
actually of the
transmission buffer uh you know we have

2846
00:57:20,470 --> 00:57:20,480
transmission buffer uh you know we have
 

2847
00:57:20,480 --> 00:57:21,670
transmission buffer uh you know we have
to acquire the lock

2848
00:57:21,670 --> 00:57:21,680
to acquire the lock
 

2849
00:57:21,680 --> 00:57:24,470
to acquire the lock
and so it is the case that uh in xv6

2850
00:57:24,470 --> 00:57:24,480
and so it is the case that uh in xv6
 

2851
00:57:24,480 --> 00:57:25,430
and so it is the case that uh in xv6
actually that

2852
00:57:25,430 --> 00:57:25,440
actually that
 

2853
00:57:25,440 --> 00:57:27,670
actually that
interrupts you know can run you know so

2854
00:57:27,670 --> 00:57:27,680
interrupts you know can run you know so
 

2855
00:57:27,680 --> 00:57:29,670
interrupts you know can run you know so
the bottom half of the driver can run

2856
00:57:29,670 --> 00:57:29,680
the bottom half of the driver can run
 

2857
00:57:29,680 --> 00:57:32,950
the bottom half of the driver can run
truly concurrent on uh uh on different

2858
00:57:32,950 --> 00:57:32,960
truly concurrent on uh uh on different
 

2859
00:57:32,960 --> 00:57:33,670
truly concurrent on uh uh on different
processors

2860
00:57:33,670 --> 00:57:33,680
processors
 

2861
00:57:33,680 --> 00:57:36,309
processors
with the top half of the driver and so

2862
00:57:36,309 --> 00:57:36,319
with the top half of the driver and so
 

2863
00:57:36,319 --> 00:57:37,829
with the top half of the driver and so
therefore your interrupt

2864
00:57:37,829 --> 00:57:37,839
therefore your interrupt
 

2865
00:57:37,839 --> 00:57:41,030
therefore your interrupt
functions uh also acquire walks and in

2866
00:57:41,030 --> 00:57:41,040
functions uh also acquire walks and in
 

2867
00:57:41,040 --> 00:57:42,630
functions uh also acquire walks and in
fact in this particular case

2868
00:57:42,630 --> 00:57:42,640
fact in this particular case
 

2869
00:57:42,640 --> 00:57:44,390
fact in this particular case
uh you know it requires the one lock

2870
00:57:44,390 --> 00:57:44,400
uh you know it requires the one lock
 

2871
00:57:44,400 --> 00:57:46,630
uh you know it requires the one lock
that is actually in the uart and

2872
00:57:46,630 --> 00:57:46,640
that is actually in the uart and
 

2873
00:57:46,640 --> 00:57:47,990
that is actually in the uart and
then calls you right start and then

2874
00:57:47,990 --> 00:57:48,000
then calls you right start and then
 

2875
00:57:48,000 --> 00:57:50,630
then calls you right start and then
releases the lock

2876
00:57:50,630 --> 00:57:50,640
releases the lock
 

2877
00:57:50,640 --> 00:57:52,710
releases the lock
and i'll come back to that in a second

2878
00:57:52,710 --> 00:57:52,720
and i'll come back to that in a second
 

2879
00:57:52,720 --> 00:57:54,549
and i'll come back to that in a second
because there's a little bit trickiness

2880
00:57:54,549 --> 00:57:54,559
because there's a little bit trickiness
 

2881
00:57:54,559 --> 00:57:58,069
because there's a little bit trickiness
uh in implementing a lock in such a way

2882
00:57:58,069 --> 00:57:58,079
uh in implementing a lock in such a way
 

2883
00:57:58,079 --> 00:58:00,549
uh in implementing a lock in such a way
that this actually works out correctly

2884
00:58:00,549 --> 00:58:00,559
that this actually works out correctly
 

2885
00:58:00,559 --> 00:58:03,750
that this actually works out correctly
and the the thing that actually you

2886
00:58:03,750 --> 00:58:03,760
and the the thing that actually you
 

2887
00:58:03,760 --> 00:58:04,630
and the the thing that actually you
should be worried about

2888
00:58:04,630 --> 00:58:04,640
should be worried about
 

2889
00:58:04,640 --> 00:58:07,670
should be worried about
is that i'll actually talk about it in a

2890
00:58:07,670 --> 00:58:07,680
is that i'll actually talk about it in a
 

2891
00:58:07,680 --> 00:58:09,270
is that i'll actually talk about it in a
second let me postpone that until i get

2892
00:58:09,270 --> 00:58:09,280
second let me postpone that until i get
 

2893
00:58:09,280 --> 00:58:12,950
second let me postpone that until i get
there

2894
00:58:12,950 --> 00:58:12,960

 

2895
00:58:12,960 --> 00:58:16,549

okay so any uh questions about this is a

2896
00:58:16,549 --> 00:58:16,559
okay so any uh questions about this is a
 

2897
00:58:16,559 --> 00:58:19,910
okay so any uh questions about this is a
simple example of uh lock use

2898
00:58:19,910 --> 00:58:19,920
simple example of uh lock use
 

2899
00:58:19,920 --> 00:58:29,670
simple example of uh lock use
in the uart

2900
00:58:29,670 --> 00:58:29,680

 

2901
00:58:29,680 --> 00:58:32,710

okay let me uh that brings let me

2902
00:58:32,710 --> 00:58:32,720
okay let me uh that brings let me
 

2903
00:58:32,720 --> 00:58:35,990
okay let me uh that brings let me
talk about implementing a lock uh

2904
00:58:35,990 --> 00:58:36,000
talk about implementing a lock uh
 

2905
00:58:36,000 --> 00:58:38,870
talk about implementing a lock uh
and so the spec is that only one uh

2906
00:58:38,870 --> 00:58:38,880
and so the spec is that only one uh
 

2907
00:58:38,880 --> 00:58:39,670
and so the spec is that only one uh
process

2908
00:58:39,670 --> 00:58:39,680
process
 

2909
00:58:39,680 --> 00:58:42,470
process
can acquire a lock uh there's no more

2910
00:58:42,470 --> 00:58:42,480
can acquire a lock uh there's no more
 

2911
00:58:42,480 --> 00:58:43,030
can acquire a lock uh there's no more
than

2912
00:58:43,030 --> 00:58:43,040
than
 

2913
00:58:43,040 --> 00:58:44,630
than
one lock holder at any given point of

2914
00:58:44,630 --> 00:58:44,640
one lock holder at any given point of
 

2915
00:58:44,640 --> 00:58:47,430
one lock holder at any given point of
time and and we now want to look

2916
00:58:47,430 --> 00:58:47,440
time and and we now want to look
 

2917
00:58:47,440 --> 00:58:48,870
time and and we now want to look
and understand actually how you

2918
00:58:48,870 --> 00:58:48,880
and understand actually how you
 

2919
00:58:48,880 --> 00:58:50,150
and understand actually how you
implement the walk in such a way that

2920
00:58:50,150 --> 00:58:50,160
implement the walk in such a way that
 

2921
00:58:50,160 --> 00:58:51,990
implement the walk in such a way that
that actually is guaranteed

2922
00:58:51,990 --> 00:58:52,000
that actually is guaranteed
 

2923
00:58:52,000 --> 00:58:55,109
that actually is guaranteed
let me first write a broken lock so that

2924
00:58:55,109 --> 00:58:55,119
let me first write a broken lock so that
 

2925
00:58:55,119 --> 00:58:55,910
let me first write a broken lock so that
we understand

2926
00:58:55,910 --> 00:58:55,920
we understand
 

2927
00:58:55,920 --> 00:58:59,270
we understand
you know what the challenges for

2928
00:58:59,270 --> 00:58:59,280
you know what the challenges for
 

2929
00:58:59,280 --> 00:59:05,190
you know what the challenges for
broken acquire

2930
00:59:05,190 --> 00:59:05,200
broken acquire
 

2931
00:59:05,200 --> 00:59:06,710
broken acquire
so now we know what the challenge is

2932
00:59:06,710 --> 00:59:06,720
so now we know what the challenge is
 

2933
00:59:06,720 --> 00:59:09,589
so now we know what the challenge is
actually in implementing choir

2934
00:59:09,589 --> 00:59:09,599
actually in implementing choir
 

2935
00:59:09,599 --> 00:59:14,390
actually in implementing choir
uh so here's my broken one uh so

2936
00:59:14,390 --> 00:59:14,400
uh so here's my broken one uh so
 

2937
00:59:14,400 --> 00:59:17,750
uh so here's my broken one uh so
construct takes in environment front

2938
00:59:17,750 --> 00:59:17,760
construct takes in environment front
 

2939
00:59:17,760 --> 00:59:18,470
construct takes in environment front
lock

2940
00:59:18,470 --> 00:59:18,480
lock
 

2941
00:59:18,480 --> 00:59:21,910
lock
star l and

2942
00:59:21,910 --> 00:59:21,920
star l and
 

2943
00:59:21,920 --> 00:59:23,750
star l and
you know what it does is as follows it

2944
00:59:23,750 --> 00:59:23,760
you know what it does is as follows it
 

2945
00:59:23,760 --> 00:59:26,390
you know what it does is as follows it
has an infinite loop

2946
00:59:26,390 --> 00:59:26,400
has an infinite loop
 

2947
00:59:26,400 --> 00:59:31,270
has an infinite loop
while one uh you know if

2948
00:59:31,270 --> 00:59:31,280
while one uh you know if
 

2949
00:59:31,280 --> 00:59:34,470
while one uh you know if
uh l is

2950
00:59:34,470 --> 00:59:34,480
uh l is
 

2951
00:59:34,480 --> 00:59:36,870
uh l is
locked to zero meaning nobody's holding

2952
00:59:36,870 --> 00:59:36,880
locked to zero meaning nobody's holding
 

2953
00:59:36,880 --> 00:59:37,910
locked to zero meaning nobody's holding
it

2954
00:59:37,910 --> 00:59:37,920
it
 

2955
00:59:37,920 --> 00:59:39,910
it
then presumably the caller should grab

2956
00:59:39,910 --> 00:59:39,920
then presumably the caller should grab
 

2957
00:59:39,920 --> 00:59:42,789
then presumably the caller should grab
the log so

2958
00:59:42,789 --> 00:59:42,799
the log so
 

2959
00:59:42,799 --> 00:59:48,309
the log so
then we set l lock to one

2960
00:59:48,309 --> 00:59:48,319

 

2961
00:59:48,319 --> 00:59:50,069

and you know at that point we got the

2962
00:59:50,069 --> 00:59:50,079
and you know at that point we got the
 

2963
00:59:50,079 --> 00:59:51,670
and you know at that point we got the
lock so we can return

2964
00:59:51,670 --> 00:59:51,680
lock so we can return
 

2965
00:59:51,680 --> 00:59:54,710
lock so we can return
nothing to do anymore and close

2966
00:59:54,710 --> 00:59:54,720
nothing to do anymore and close
 

2967
00:59:54,720 --> 00:59:56,230
nothing to do anymore and close
loop if we didn't get the lock because

2968
00:59:56,230 --> 00:59:56,240
loop if we didn't get the lock because
 

2969
00:59:56,240 --> 00:59:57,349
loop if we didn't get the lock because
when the lock was one that means

2970
00:59:57,349 --> 00:59:57,359
when the lock was one that means
 

2971
00:59:57,359 --> 00:59:58,789
when the lock was one that means
somebody else is holding lock so we just

2972
00:59:58,789 --> 00:59:58,799
somebody else is holding lock so we just
 

2973
00:59:58,799 --> 01:00:00,630
somebody else is holding lock so we just
keep spinning

2974
01:00:00,630 --> 01:00:00,640
keep spinning
 

2975
01:00:00,640 --> 01:00:02,710
keep spinning
and waiting to go around the loop over

2976
01:00:02,710 --> 01:00:02,720
and waiting to go around the loop over
 

2977
01:00:02,720 --> 01:00:03,990
and waiting to go around the loop over
and over and over

2978
01:00:03,990 --> 01:00:04,000
and over and over
 

2979
01:00:04,000 --> 01:00:06,870
and over and over
until at some point you know the whole

2980
01:00:06,870 --> 01:00:06,880
until at some point you know the whole
 

2981
01:00:06,880 --> 01:00:07,750
until at some point you know the whole
lock holder called

2982
01:00:07,750 --> 01:00:07,760
lock holder called
 

2983
01:00:07,760 --> 01:00:11,030
lock holder called
release which will set lock to will set

2984
01:00:11,030 --> 01:00:11,040
release which will set lock to will set
 

2985
01:00:11,040 --> 01:00:14,710
release which will set lock to will set
lock to zero

2986
01:00:14,710 --> 01:00:14,720
lock to zero
 

2987
01:00:14,720 --> 01:00:17,349
lock to zero
and you know so what's wrong with this

2988
01:00:17,349 --> 01:00:17,359
and you know so what's wrong with this
 

2989
01:00:17,359 --> 01:00:20,870
and you know so what's wrong with this
particular implementation

2990
01:00:20,870 --> 01:00:20,880

 

2991
01:00:20,880 --> 01:00:23,829

i think two processes might read that

2992
01:00:23,829 --> 01:00:23,839
i think two processes might read that
 

2993
01:00:23,839 --> 01:00:24,470
i think two processes might read that
it's uh

2994
01:00:24,470 --> 01:00:24,480
it's uh
 

2995
01:00:24,480 --> 01:00:29,589
it's uh
not locked at the same time yeah right

2996
01:00:29,589 --> 01:00:29,599
not locked at the same time yeah right
 

2997
01:00:29,599 --> 01:00:31,270
not locked at the same time yeah right
yeah so there's a race condition here

2998
01:00:31,270 --> 01:00:31,280
yeah so there's a race condition here
 

2999
01:00:31,280 --> 01:00:33,589
yeah so there's a race condition here
right and uh

3000
01:00:33,589 --> 01:00:33,599
right and uh
 

3001
01:00:33,599 --> 01:00:35,589
right and uh
just to make sure that the race is right

3002
01:00:35,589 --> 01:00:35,599
just to make sure that the race is right
 

3003
01:00:35,599 --> 01:00:39,349
just to make sure that the race is right
here

3004
01:00:39,349 --> 01:00:39,359

 

3005
01:00:39,359 --> 01:00:42,309

we can have basically two cpus coming in

3006
01:00:42,309 --> 01:00:42,319
we can have basically two cpus coming in
 

3007
01:00:42,319 --> 01:00:44,549
we can have basically two cpus coming in
so if we talk a time diagram

3008
01:00:44,549 --> 01:00:44,559
so if we talk a time diagram
 

3009
01:00:44,559 --> 01:00:48,069
so if we talk a time diagram
you know cpu one uh cpu zero

3010
01:00:48,069 --> 01:00:48,079
you know cpu one uh cpu zero
 

3011
01:00:48,079 --> 01:00:52,470
you know cpu one uh cpu zero
cpu one you know this is statement a

3012
01:00:52,470 --> 01:00:52,480
cpu one you know this is statement a
 

3013
01:00:52,480 --> 01:00:55,829
cpu one you know this is statement a
maybe this is statement b uh both cpu

3014
01:00:55,829 --> 01:00:55,839
maybe this is statement b uh both cpu
 

3015
01:00:55,839 --> 01:00:56,309
maybe this is statement b uh both cpu
one

3016
01:00:56,309 --> 01:00:56,319
one
 

3017
01:00:56,319 --> 01:00:59,430
one
you know reaches statement a uh

3018
01:00:59,430 --> 01:00:59,440
you know reaches statement a uh
 

3019
01:00:59,440 --> 01:01:03,910
you know reaches statement a uh
and cpu zero and cpu uh

3020
01:01:03,910 --> 01:01:03,920

 

3021
01:01:03,920 --> 01:01:05,589

zero one both are each statement a so

3022
01:01:05,589 --> 01:01:05,599
zero one both are each statement a so
 

3023
01:01:05,599 --> 01:01:07,030
zero one both are each statement a so
they both see

3024
01:01:07,030 --> 01:01:07,040
they both see
 

3025
01:01:07,040 --> 01:01:10,150
they both see
uh locked being zero and then they above

3026
01:01:10,150 --> 01:01:10,160
uh locked being zero and then they above
 

3027
01:01:10,160 --> 01:01:13,349
uh locked being zero and then they above
execute b

3028
01:01:13,349 --> 01:01:13,359

 

3029
01:01:13,359 --> 01:01:16,950

all right so here they see lock to zero

3030
01:01:16,950 --> 01:01:16,960
all right so here they see lock to zero
 

3031
01:01:16,960 --> 01:01:20,630
all right so here they see lock to zero
this guy c lock to zero

3032
01:01:20,630 --> 01:01:20,640

 

3033
01:01:20,640 --> 01:01:22,710

and so they both execute statement b and

3034
01:01:22,710 --> 01:01:22,720
and so they both execute statement b and
 

3035
01:01:22,720 --> 01:01:23,829
and so they both execute statement b and
now both uh

3036
01:01:23,829 --> 01:01:23,839
now both uh
 

3037
01:01:23,839 --> 01:01:27,270
now both uh
have uh acquired the lock and uh which

3038
01:01:27,270 --> 01:01:27,280
have uh acquired the lock and uh which
 

3039
01:01:27,280 --> 01:01:29,349
have uh acquired the lock and uh which
violated you know the spec of this

3040
01:01:29,349 --> 01:01:29,359
violated you know the spec of this
 

3041
01:01:29,359 --> 01:01:31,510
violated you know the spec of this
particular function

3042
01:01:31,510 --> 01:01:31,520
particular function
 

3043
01:01:31,520 --> 01:01:35,589
particular function
this makes sense

3044
01:01:35,589 --> 01:01:35,599

 

3045
01:01:35,599 --> 01:01:38,150

so it turns out you know to solve this

3046
01:01:38,150 --> 01:01:38,160
so it turns out you know to solve this
 

3047
01:01:38,160 --> 01:01:38,710
so it turns out you know to solve this
problem

3048
01:01:38,710 --> 01:01:38,720
problem
 

3049
01:01:38,720 --> 01:01:40,150
problem
and sort of get a correct implementation

3050
01:01:40,150 --> 01:01:40,160
and sort of get a correct implementation
 

3051
01:01:40,160 --> 01:01:41,430
and sort of get a correct implementation
there are multiple ways of going about

3052
01:01:41,430 --> 01:01:41,440
there are multiple ways of going about
 

3053
01:01:41,440 --> 01:01:42,390
there are multiple ways of going about
it

3054
01:01:42,390 --> 01:01:42,400
it
 

3055
01:01:42,400 --> 01:01:44,789
it
but the most common way is to rely

3056
01:01:44,789 --> 01:01:44,799
but the most common way is to rely
 

3057
01:01:44,799 --> 01:01:46,150
but the most common way is to rely
basically on a special hardware

3058
01:01:46,150 --> 01:01:46,160
basically on a special hardware
 

3059
01:01:46,160 --> 01:01:47,670
basically on a special hardware
instruction

3060
01:01:47,670 --> 01:01:47,680
instruction
 

3061
01:01:47,680 --> 01:01:49,750
instruction
uh an art of instruction that basically

3062
01:01:49,750 --> 01:01:49,760
uh an art of instruction that basically
 

3063
01:01:49,760 --> 01:01:50,789
uh an art of instruction that basically
what it does

3064
01:01:50,789 --> 01:01:50,799
what it does
 

3065
01:01:50,799 --> 01:01:53,030
what it does
it does this test and this set

3066
01:01:53,030 --> 01:01:53,040
it does this test and this set
 

3067
01:01:53,040 --> 01:01:55,990
it does this test and this set
atomically

3068
01:01:55,990 --> 01:01:56,000

 

3069
01:01:56,000 --> 01:02:00,390

and so the solution to this

3070
01:02:00,390 --> 01:02:00,400
and so the solution to this
 

3071
01:02:00,400 --> 01:02:06,390
and so the solution to this
problem is hardware

3072
01:02:06,390 --> 01:02:06,400
problem is hardware
 

3073
01:02:06,400 --> 01:02:17,349
problem is hardware
test and set support

3074
01:02:17,349 --> 01:02:17,359

 

3075
01:02:17,359 --> 01:02:18,710

and the way you can think about it you

3076
01:02:18,710 --> 01:02:18,720
and the way you can think about it you
 

3077
01:02:18,720 --> 01:02:21,029
and the way you can think about it you
know on the risk five you know this

3078
01:02:21,029 --> 01:02:21,039
know on the risk five you know this
 

3079
01:02:21,039 --> 01:02:22,710
know on the risk five you know this
instruction actually is the

3080
01:02:22,710 --> 01:02:22,720
instruction actually is the
 

3081
01:02:22,720 --> 01:02:26,789
instruction actually is the
atomic memory operation swap

3082
01:02:26,789 --> 01:02:26,799

 

3083
01:02:26,799 --> 01:02:29,910

that we're going to be using uh and

3084
01:02:29,910 --> 01:02:29,920
that we're going to be using uh and
 

3085
01:02:29,920 --> 01:02:31,589
that we're going to be using uh and
it basically boils down to test and then

3086
01:02:31,589 --> 01:02:31,599
it basically boils down to test and then
 

3087
01:02:31,599 --> 01:02:32,950
it basically boils down to test and then
a set and you know basically what the

3088
01:02:32,950 --> 01:02:32,960
a set and you know basically what the
 

3089
01:02:32,960 --> 01:02:34,230
a set and you know basically what the
hardware guarantees

3090
01:02:34,230 --> 01:02:34,240
hardware guarantees
 

3091
01:02:34,240 --> 01:02:36,870
hardware guarantees
if you will so you take this uh it takes

3092
01:02:36,870 --> 01:02:36,880
if you will so you take this uh it takes
 

3093
01:02:36,880 --> 01:02:38,710
if you will so you take this uh it takes
two arguments or three arguments an

3094
01:02:38,710 --> 01:02:38,720
two arguments or three arguments an
 

3095
01:02:38,720 --> 01:02:40,150
two arguments or three arguments an
address

3096
01:02:40,150 --> 01:02:40,160
address
 

3097
01:02:40,160 --> 01:02:43,349
address
uh a register one r1

3098
01:02:43,349 --> 01:02:43,359
uh a register one r1
 

3099
01:02:43,359 --> 01:02:46,710
uh a register one r1
and a register two and essentially what

3100
01:02:46,710 --> 01:02:46,720
and a register two and essentially what
 

3101
01:02:46,720 --> 01:02:48,390
and a register two and essentially what
the hardware does the

3102
01:02:48,390 --> 01:02:48,400
the hardware does the
 

3103
01:02:48,400 --> 01:02:51,829
the hardware does the
just conceptually is basically it locks

3104
01:02:51,829 --> 01:02:51,839
just conceptually is basically it locks
 

3105
01:02:51,839 --> 01:02:53,430
just conceptually is basically it locks
the address

3106
01:02:53,430 --> 01:02:53,440
the address
 

3107
01:02:53,440 --> 01:02:55,670
the address
if you will i'll talk about that in a

3108
01:02:55,670 --> 01:02:55,680
if you will i'll talk about that in a
 

3109
01:02:55,680 --> 01:02:57,029
if you will i'll talk about that in a
second a little bit more with logs

3110
01:02:57,029 --> 01:02:57,039
second a little bit more with logs
 

3111
01:02:57,039 --> 01:02:58,150
second a little bit more with logs
address

3112
01:02:58,150 --> 01:02:58,160
address
 

3113
01:02:58,160 --> 01:03:01,190
address
it

3114
01:03:01,190 --> 01:03:01,200

 

3115
01:03:01,200 --> 01:03:04,150

it puts in a temporary variable you know

3116
01:03:04,150 --> 01:03:04,160
it puts in a temporary variable you know
 

3117
01:03:04,160 --> 01:03:04,470
it puts in a temporary variable you know
the

3118
01:03:04,470 --> 01:03:04,480
the
 

3119
01:03:04,480 --> 01:03:06,230
the
value that actually is at that

3120
01:03:06,230 --> 01:03:06,240
value that actually is at that
 

3121
01:03:06,240 --> 01:03:09,589
value that actually is at that
particular address

3122
01:03:09,589 --> 01:03:09,599

 

3123
01:03:09,599 --> 01:03:13,270

and then

3124
01:03:13,270 --> 01:03:13,280

 

3125
01:03:13,280 --> 01:03:17,510

writes the value of r1 into that address

3126
01:03:17,510 --> 01:03:17,520
writes the value of r1 into that address
 

3127
01:03:17,520 --> 01:03:20,150
writes the value of r1 into that address
and then basically puts the value that

3128
01:03:20,150 --> 01:03:20,160
and then basically puts the value that
 

3129
01:03:20,160 --> 01:03:21,349
and then basically puts the value that
was at the

3130
01:03:21,349 --> 01:03:21,359
was at the
 

3131
01:03:21,359 --> 01:03:24,710
was at the
originally at the address into the temp

3132
01:03:24,710 --> 01:03:24,720
originally at the address into the temp
 

3133
01:03:24,720 --> 01:03:27,589
originally at the address into the temp
uh the temporary value that was the

3134
01:03:27,589 --> 01:03:27,599
uh the temporary value that was the
 

3135
01:03:27,599 --> 01:03:28,630
uh the temporary value that was the
original value that was actually

3136
01:03:28,630 --> 01:03:28,640
original value that was actually
 

3137
01:03:28,640 --> 01:03:30,390
original value that was actually
addressed actually into an r2

3138
01:03:30,390 --> 01:03:30,400
addressed actually into an r2
 

3139
01:03:30,400 --> 01:03:35,589
addressed actually into an r2
and then basically unlocks and returns

3140
01:03:35,589 --> 01:03:35,599

 

3141
01:03:35,599 --> 01:03:38,630

um and you know

3142
01:03:38,630 --> 01:03:38,640
um and you know
 

3143
01:03:38,640 --> 01:03:41,109
um and you know
in the this lock if you will guarantee

3144
01:03:41,109 --> 01:03:41,119
in the this lock if you will guarantee
 

3145
01:03:41,119 --> 01:03:42,630
in the this lock if you will guarantee
is that basically this test

3146
01:03:42,630 --> 01:03:42,640
is that basically this test
 

3147
01:03:42,640 --> 01:03:44,069
is that basically this test
you know where the result of the test is

3148
01:03:44,069 --> 01:03:44,079
you know where the result of the test is
 

3149
01:03:44,079 --> 01:03:45,670
you know where the result of the test is
returned into r2

3150
01:03:45,670 --> 01:03:45,680
returned into r2
 

3151
01:03:45,680 --> 01:03:48,950
returned into r2
and the set actually happen atomically

3152
01:03:48,950 --> 01:03:48,960
and the set actually happen atomically
 

3153
01:03:48,960 --> 01:03:50,950
and the set actually happen atomically
and so this is a hardware instruction uh

3154
01:03:50,950 --> 01:03:50,960
and so this is a hardware instruction uh
 

3155
01:03:50,960 --> 01:03:52,789
and so this is a hardware instruction uh
most processors have an artwork

3156
01:03:52,789 --> 01:03:52,799
most processors have an artwork
 

3157
01:03:52,799 --> 01:03:55,349
most processors have an artwork
instruction like this

3158
01:03:55,349 --> 01:03:55,359
instruction like this
 

3159
01:03:55,359 --> 01:03:56,950
instruction like this
because it's a convenient way to

3160
01:03:56,950 --> 01:03:56,960
because it's a convenient way to
 

3161
01:03:56,960 --> 01:04:01,430
because it's a convenient way to
actually implement locks

3162
01:04:01,430 --> 01:04:01,440

 

3163
01:04:01,440 --> 01:04:03,270

and so basically what we've done is like

3164
01:04:03,270 --> 01:04:03,280
and so basically what we've done is like
 

3165
01:04:03,280 --> 01:04:04,710
and so basically what we've done is like
we've reduced you know sort of the

3166
01:04:04,710 --> 01:04:04,720
we've reduced you know sort of the
 

3167
01:04:04,720 --> 01:04:06,870
we've reduced you know sort of the
automaticity of this

3168
01:04:06,870 --> 01:04:06,880
automaticity of this
 

3169
01:04:06,880 --> 01:04:09,829
automaticity of this
or the software lock implementation to

3170
01:04:09,829 --> 01:04:09,839
or the software lock implementation to
 

3171
01:04:09,839 --> 01:04:10,470
or the software lock implementation to
basically

3172
01:04:10,470 --> 01:04:10,480
basically
 

3173
01:04:10,480 --> 01:04:14,230
basically
a hardware lock implementation uh

3174
01:04:14,230 --> 01:04:14,240
a hardware lock implementation uh
 

3175
01:04:14,240 --> 01:04:18,390
a hardware lock implementation uh
and uh so the processor might implement

3176
01:04:18,390 --> 01:04:18,400
and uh so the processor might implement
 

3177
01:04:18,400 --> 01:04:18,870
and uh so the processor might implement
this in

3178
01:04:18,870 --> 01:04:18,880
this in
 

3179
01:04:18,880 --> 01:04:21,349
this in
very different ways so basically uh the

3180
01:04:21,349 --> 01:04:21,359
very different ways so basically uh the
 

3181
01:04:21,359 --> 01:04:22,950
very different ways so basically uh the
instruction set itself where this is

3182
01:04:22,950 --> 01:04:22,960
instruction set itself where this is
 

3183
01:04:22,960 --> 01:04:24,390
instruction set itself where this is
like a specification it doesn't actually

3184
01:04:24,390 --> 01:04:24,400
like a specification it doesn't actually
 

3185
01:04:24,400 --> 01:04:25,750
like a specification it doesn't actually
say how it's implemented

3186
01:04:25,750 --> 01:04:25,760
say how it's implemented
 

3187
01:04:25,760 --> 01:04:27,589
say how it's implemented
and this is very dependent in the actual

3188
01:04:27,589 --> 01:04:27,599
and this is very dependent in the actual
 

3189
01:04:27,599 --> 01:04:30,309
and this is very dependent in the actual
implementation

3190
01:04:30,309 --> 01:04:30,319

 

3191
01:04:30,319 --> 01:04:34,710

of this is dependent

3192
01:04:34,710 --> 01:04:34,720

 

3193
01:04:34,720 --> 01:04:44,309

on how the memory system exactly works

3194
01:04:44,309 --> 01:04:44,319

 

3195
01:04:44,319 --> 01:04:47,510

so for example uh if you know the module

3196
01:04:47,510 --> 01:04:47,520
so for example uh if you know the module
 

3197
01:04:47,520 --> 01:04:48,309
so for example uh if you know the module
processor

3198
01:04:48,309 --> 01:04:48,319
processor
 

3199
01:04:48,319 --> 01:04:50,950
processor
uh share a single memory controller that

3200
01:04:50,950 --> 01:04:50,960
uh share a single memory controller that
 

3201
01:04:50,960 --> 01:04:52,150
uh share a single memory controller that
retail writes to memory

3202
01:04:52,150 --> 01:04:52,160
retail writes to memory
 

3203
01:04:52,160 --> 01:04:53,670
retail writes to memory
then the memory controller can actually

3204
01:04:53,670 --> 01:04:53,680
then the memory controller can actually
 

3205
01:04:53,680 --> 01:04:56,150
then the memory controller can actually
support this operation you can basically

3206
01:04:56,150 --> 01:04:56,160
support this operation you can basically
 

3207
01:04:56,160 --> 01:04:58,470
support this operation you can basically
allow uh basically you know set a lock

3208
01:04:58,470 --> 01:04:58,480
allow uh basically you know set a lock
 

3209
01:04:58,480 --> 01:04:59,670
allow uh basically you know set a lock
and a particular address you know and

3210
01:04:59,670 --> 01:04:59,680
and a particular address you know and
 

3211
01:04:59,680 --> 01:05:00,069
and a particular address you know and
then

3212
01:05:00,069 --> 01:05:00,079
then
 

3213
01:05:00,079 --> 01:05:01,829
then
let you know one processor do two

3214
01:05:01,829 --> 01:05:01,839
let you know one processor do two
 

3215
01:05:01,839 --> 01:05:03,270
let you know one processor do two
operations or three uh

3216
01:05:03,270 --> 01:05:03,280
operations or three uh
 

3217
01:05:03,280 --> 01:05:05,270
operations or three uh
instructions and then basically unlock

3218
01:05:05,270 --> 01:05:05,280
instructions and then basically unlock
 

3219
01:05:05,280 --> 01:05:06,829
instructions and then basically unlock
and so since all the

3220
01:05:06,829 --> 01:05:06,839
and so since all the
 

3221
01:05:06,839 --> 01:05:08,549
and so since all the
processors the reason writes go for this

3222
01:05:08,549 --> 01:05:08,559
processors the reason writes go for this
 

3223
01:05:08,559 --> 01:05:09,990
processors the reason writes go for this
memory controller the memory controller

3224
01:05:09,990 --> 01:05:10,000
memory controller the memory controller
 

3225
01:05:10,000 --> 01:05:12,230
memory controller the memory controller
can do the ordering or the blocking

3226
01:05:12,230 --> 01:05:12,240
can do the ordering or the blocking
 

3227
01:05:12,240 --> 01:05:16,230
can do the ordering or the blocking
uh if the memories are in this processor

3228
01:05:16,230 --> 01:05:16,240
uh if the memories are in this processor
 

3229
01:05:16,240 --> 01:05:18,789
uh if the memories are in this processor
sit on the shared bus

3230
01:05:18,789 --> 01:05:18,799
sit on the shared bus
 

3231
01:05:18,799 --> 01:05:20,630
sit on the shared bus
it's often the bus arbiter that can

3232
01:05:20,630 --> 01:05:20,640
it's often the bus arbiter that can
 

3233
01:05:20,640 --> 01:05:21,990
it's often the bus arbiter that can
actually do that where the bus arbiter

3234
01:05:21,990 --> 01:05:22,000
actually do that where the bus arbiter
 

3235
01:05:22,000 --> 01:05:23,029
actually do that where the bus arbiter
has support for

3236
01:05:23,029 --> 01:05:23,039
has support for
 

3237
01:05:23,039 --> 01:05:25,829
has support for
basically executing two uh memory

3238
01:05:25,829 --> 01:05:25,839
basically executing two uh memory
 

3239
01:05:25,839 --> 01:05:28,309
basically executing two uh memory
operations in an atomic way

3240
01:05:28,309 --> 01:05:28,319
operations in an atomic way
 

3241
01:05:28,319 --> 01:05:31,349
operations in an atomic way
uh if it's a if the processors have

3242
01:05:31,349 --> 01:05:31,359
uh if it's a if the processors have
 

3243
01:05:31,359 --> 01:05:32,390
uh if it's a if the processors have
caches

3244
01:05:32,390 --> 01:05:32,400
caches
 

3245
01:05:32,400 --> 01:05:35,109
caches
uh then it's sort of typically part of

3246
01:05:35,109 --> 01:05:35,119
uh then it's sort of typically part of
 

3247
01:05:35,119 --> 01:05:37,029
uh then it's sort of typically part of
the cash rehearse protocol where

3248
01:05:37,029 --> 01:05:37,039
the cash rehearse protocol where
 

3249
01:05:37,039 --> 01:05:39,829
the cash rehearse protocol where
uh the cash continues protocol will

3250
01:05:39,829 --> 01:05:39,839
uh the cash continues protocol will
 

3251
01:05:39,839 --> 01:05:40,470
uh the cash continues protocol will
ensure that

3252
01:05:40,470 --> 01:05:40,480
ensure that
 

3253
01:05:40,480 --> 01:05:42,309
ensure that
if there's a writer you know that that

3254
01:05:42,309 --> 01:05:42,319
if there's a writer you know that that
 

3255
01:05:42,319 --> 01:05:44,710
if there's a writer you know that that
particular uh

3256
01:05:44,710 --> 01:05:44,720
particular uh
 

3257
01:05:44,720 --> 01:05:46,390
particular uh
the cash line that holds you know the

3258
01:05:46,390 --> 01:05:46,400
the cash line that holds you know the
 

3259
01:05:46,400 --> 01:05:48,630
the cash line that holds you know the
the value that we want to update ends up

3260
01:05:48,630 --> 01:05:48,640
the value that we want to update ends up
 

3261
01:05:48,640 --> 01:05:50,549
the value that we want to update ends up
in one single cache

3262
01:05:50,549 --> 01:05:50,559
in one single cache
 

3263
01:05:50,559 --> 01:05:51,990
in one single cache
and then you know basically the

3264
01:05:51,990 --> 01:05:52,000
and then you know basically the
 

3265
01:05:52,000 --> 01:05:53,430
and then you know basically the
processor is going to sort of lock that

3266
01:05:53,430 --> 01:05:53,440
processor is going to sort of lock that
 

3267
01:05:53,440 --> 01:05:54,870
processor is going to sort of lock that
single cache line across

3268
01:05:54,870 --> 01:05:54,880
single cache line across
 

3269
01:05:54,880 --> 01:05:58,069
single cache line across
two uh operations and so the the

3270
01:05:58,069 --> 01:05:58,079
two uh operations and so the the
 

3271
01:05:58,079 --> 01:05:59,029
two uh operations and so the the
implementation of this

3272
01:05:59,029 --> 01:05:59,039
implementation of this
 

3273
01:05:59,039 --> 01:06:00,309
implementation of this
you know can be done in many different

3274
01:06:00,309 --> 01:06:00,319
you know can be done in many different
 

3275
01:06:00,319 --> 01:06:02,710
you know can be done in many different
ways uh but conceptually

3276
01:06:02,710 --> 01:06:02,720
ways uh but conceptually
 

3277
01:06:02,720 --> 01:06:04,630
ways uh but conceptually
the what's going on is like you lock the

3278
01:06:04,630 --> 01:06:04,640
the what's going on is like you lock the
 

3279
01:06:04,640 --> 01:06:07,750
the what's going on is like you lock the
address uh you read the original value

3280
01:06:07,750 --> 01:06:07,760
address uh you read the original value
 

3281
01:06:07,760 --> 01:06:09,750
address uh you read the original value
you store in the new value and you

3282
01:06:09,750 --> 01:06:09,760
you store in the new value and you
 

3283
01:06:09,760 --> 01:06:12,150
you store in the new value and you
return the old value

3284
01:06:12,150 --> 01:06:12,160
return the old value
 

3285
01:06:12,160 --> 01:06:15,670
return the old value
does that make sense

3286
01:06:15,670 --> 01:06:15,680

 

3287
01:06:15,680 --> 01:06:17,910

to make that to see how we can use that

3288
01:06:17,910 --> 01:06:17,920
to make that to see how we can use that
 

3289
01:06:17,920 --> 01:06:19,510
to make that to see how we can use that
instruction

3290
01:06:19,510 --> 01:06:19,520
instruction
 

3291
01:06:19,520 --> 01:06:20,390
instruction
let's actually look at the

3292
01:06:20,390 --> 01:06:20,400
let's actually look at the
 

3293
01:06:20,400 --> 01:06:24,230
let's actually look at the
implementation of acquire and release in

3294
01:06:24,230 --> 01:06:24,240
implementation of acquire and release in
 

3295
01:06:24,240 --> 01:06:26,390
implementation of acquire and release in
xv6 and then we'll expose a couple of

3296
01:06:26,390 --> 01:06:26,400
xv6 and then we'll expose a couple of
 

3297
01:06:26,400 --> 01:06:31,670
xv6 and then we'll expose a couple of
other interesting details

3298
01:06:31,670 --> 01:06:31,680

 

3299
01:06:31,680 --> 01:06:35,029

so let me first uh bring up spinlock.h

3300
01:06:35,029 --> 01:06:35,039
so let me first uh bring up spinlock.h
 

3301
01:06:35,039 --> 01:06:39,109
so let me first uh bring up spinlock.h
uh it's been locked at h as you can see

3302
01:06:39,109 --> 01:06:39,119
uh it's been locked at h as you can see
 

3303
01:06:39,119 --> 01:06:42,230
uh it's been locked at h as you can see
it's pretty straightforward uh it has

3304
01:06:42,230 --> 01:06:42,240
it's pretty straightforward uh it has
 

3305
01:06:42,240 --> 01:06:42,630
it's pretty straightforward uh it has
this

3306
01:06:42,630 --> 01:06:42,640
this
 

3307
01:06:42,640 --> 01:06:45,349
this
flight lock exactly as in our pseudocode

3308
01:06:45,349 --> 01:06:45,359
flight lock exactly as in our pseudocode
 

3309
01:06:45,359 --> 01:06:46,710
flight lock exactly as in our pseudocode
and then it has two other things for

3310
01:06:46,710 --> 01:06:46,720
and then it has two other things for
 

3311
01:06:46,720 --> 01:06:48,710
and then it has two other things for
debugging namely the name of the lock

3312
01:06:48,710 --> 01:06:48,720
debugging namely the name of the lock
 

3313
01:06:48,720 --> 01:06:52,150
debugging namely the name of the lock
and the cpu the last the current cpu

3314
01:06:52,150 --> 01:06:52,160
and the cpu the last the current cpu
 

3315
01:06:52,160 --> 01:06:54,470
and the cpu the last the current cpu
that actually is holding the lock

3316
01:06:54,470 --> 01:06:54,480
that actually is holding the lock
 

3317
01:06:54,480 --> 01:06:55,589
that actually is holding the lock
and this is mostly to print out

3318
01:06:55,589 --> 01:06:55,599
and this is mostly to print out
 

3319
01:06:55,599 --> 01:06:57,510
and this is mostly to print out
debugging messages for example if you do

3320
01:06:57,510 --> 01:06:57,520
debugging messages for example if you do
 

3321
01:06:57,520 --> 01:07:01,589
debugging messages for example if you do
two acquires on the same cpu

3322
01:07:01,589 --> 01:07:01,599
two acquires on the same cpu
 

3323
01:07:01,599 --> 01:07:06,069
two acquires on the same cpu
okay so then let's look at

3324
01:07:06,069 --> 01:07:06,079

 

3325
01:07:06,079 --> 01:07:11,990

the implementation

3326
01:07:11,990 --> 01:07:12,000

 

3327
01:07:12,000 --> 01:07:15,109

uh and so let's start out with the choir

3328
01:07:15,109 --> 01:07:15,119
uh and so let's start out with the choir
 

3329
01:07:15,119 --> 01:07:19,510
uh and so let's start out with the choir
um and let's first look at this loop

3330
01:07:19,510 --> 01:07:19,520
um and let's first look at this loop
 

3331
01:07:19,520 --> 01:07:22,870
um and let's first look at this loop
so this is actually uh the sort of test

3332
01:07:22,870 --> 01:07:22,880
so this is actually uh the sort of test
 

3333
01:07:22,880 --> 01:07:25,270
so this is actually uh the sort of test
and set loop that i just talked about

3334
01:07:25,270 --> 01:07:25,280
and set loop that i just talked about
 

3335
01:07:25,280 --> 01:07:28,390
and set loop that i just talked about
it turns out that in um

3336
01:07:28,390 --> 01:07:28,400
it turns out that in um
 

3337
01:07:28,400 --> 01:07:31,829
it turns out that in um
uh the c standard actually defines

3338
01:07:31,829 --> 01:07:31,839
uh the c standard actually defines
 

3339
01:07:31,839 --> 01:07:35,589
uh the c standard actually defines
uh one of these atomic operations and so

3340
01:07:35,589 --> 01:07:35,599
uh one of these atomic operations and so
 

3341
01:07:35,599 --> 01:07:37,910
uh one of these atomic operations and so
um and so the c standard actually has a

3342
01:07:37,910 --> 01:07:37,920
um and so the c standard actually has a
 

3343
01:07:37,920 --> 01:07:39,109
um and so the c standard actually has a
function that

3344
01:07:39,109 --> 01:07:39,119
function that
 

3345
01:07:39,119 --> 01:07:41,990
function that
uh says you know sync lock test and set

3346
01:07:41,990 --> 01:07:42,000
uh says you know sync lock test and set
 

3347
01:07:42,000 --> 01:07:43,829
uh says you know sync lock test and set
and basically it specifies behavior that

3348
01:07:43,829 --> 01:07:43,839
and basically it specifies behavior that
 

3349
01:07:43,839 --> 01:07:44,230
and basically it specifies behavior that
i

3350
01:07:44,230 --> 01:07:44,240
i
 

3351
01:07:44,240 --> 01:07:46,630
i
just described and then every processor

3352
01:07:46,630 --> 01:07:46,640
just described and then every processor
 

3353
01:07:46,640 --> 01:07:48,150
just described and then every processor
basically is required you know to

3354
01:07:48,150 --> 01:07:48,160
basically is required you know to
 

3355
01:07:48,160 --> 01:07:48,710
basically is required you know to
implement

3356
01:07:48,710 --> 01:07:48,720
implement
 

3357
01:07:48,720 --> 01:07:51,430
implement
uh that behavior and since most

3358
01:07:51,430 --> 01:07:51,440
uh that behavior and since most
 

3359
01:07:51,440 --> 01:07:52,789
uh that behavior and since most
processors have a

3360
01:07:52,789 --> 01:07:52,799
processors have a
 

3361
01:07:52,799 --> 01:07:54,470
processors have a
matching sort of test and set hardware

3362
01:07:54,470 --> 01:07:54,480
matching sort of test and set hardware
 

3363
01:07:54,480 --> 01:07:56,309
matching sort of test and set hardware
instruction this turns out to be a

3364
01:07:56,309 --> 01:07:56,319
instruction this turns out to be a
 

3365
01:07:56,319 --> 01:07:57,510
instruction this turns out to be a
reasonable straightforward or

3366
01:07:57,510 --> 01:07:57,520
reasonable straightforward or
 

3367
01:07:57,520 --> 01:07:58,549
reasonable straightforward or
approximate to implement

3368
01:07:58,549 --> 01:07:58,559
approximate to implement
 

3369
01:07:58,559 --> 01:08:01,270
approximate to implement
and so in fact if you look at kernel.asm

3370
01:08:01,270 --> 01:08:01,280
and so in fact if you look at kernel.asm
 

3371
01:08:01,280 --> 01:08:02,549
and so in fact if you look at kernel.asm
you know we can look at the assembly

3372
01:08:02,549 --> 01:08:02,559
you know we can look at the assembly
 

3373
01:08:02,559 --> 01:08:04,230
you know we can look at the assembly
instructions and see exactly you know

3374
01:08:04,230 --> 01:08:04,240
instructions and see exactly you know
 

3375
01:08:04,240 --> 01:08:08,829
instructions and see exactly you know
what the risk 5 processor does

3376
01:08:08,829 --> 01:08:08,839

 

3377
01:08:08,839 --> 01:08:12,230

so back here is

3378
01:08:12,230 --> 01:08:12,240
so back here is
 

3379
01:08:12,240 --> 01:08:14,630
so back here is
our assembly instructions for require

3380
01:08:14,630 --> 01:08:14,640
our assembly instructions for require
 

3381
01:08:14,640 --> 01:08:15,589
our assembly instructions for require
and

3382
01:08:15,589 --> 01:08:15,599
and
 

3383
01:08:15,599 --> 01:08:27,829
and
let's here's our atomic swap instruction

3384
01:08:27,829 --> 01:08:27,839

 

3385
01:08:27,839 --> 01:08:31,510

uh so as you can see uh if

3386
01:08:31,510 --> 01:08:31,520
uh so as you can see uh if
 

3387
01:08:31,520 --> 01:08:33,590
uh so as you can see uh if
you know an atomic swap basically uh is

3388
01:08:33,590 --> 01:08:33,600
you know an atomic swap basically uh is
 

3389
01:08:33,600 --> 01:08:35,189
you know an atomic swap basically uh is
called with the register a5

3390
01:08:35,189 --> 01:08:35,199
called with the register a5
 

3391
01:08:35,199 --> 01:08:38,630
called with the register a5
and uh as the input and the output also

3392
01:08:38,630 --> 01:08:38,640
and uh as the input and the output also
 

3393
01:08:38,640 --> 01:08:40,070
and uh as the input and the output also
ends up in a5

3394
01:08:40,070 --> 01:08:40,080
ends up in a5
 

3395
01:08:40,080 --> 01:08:43,269
ends up in a5
and s1 is to hold to the address and

3396
01:08:43,269 --> 01:08:43,279
and s1 is to hold to the address and
 

3397
01:08:43,279 --> 01:08:46,550
and s1 is to hold to the address and
uh and if it's not equal

3398
01:08:46,550 --> 01:08:46,560
uh and if it's not equal
 

3399
01:08:46,560 --> 01:08:49,669
uh and if it's not equal
uh we return and otherwise

3400
01:08:49,669 --> 01:08:49,679
uh we return and otherwise
 

3401
01:08:49,679 --> 01:08:52,870
uh we return and otherwise
basically we go back you know to uh

3402
01:08:52,870 --> 01:08:52,880
basically we go back you know to uh
 

3403
01:08:52,880 --> 01:08:57,110
basically we go back you know to uh
jump back to uh uh

3404
01:08:57,110 --> 01:08:57,120
jump back to uh uh
 

3405
01:08:57,120 --> 01:08:58,390
jump back to uh uh
double check i'm saying the right thing

3406
01:08:58,390 --> 01:08:58,400
double check i'm saying the right thing
 

3407
01:08:58,400 --> 01:09:00,229
double check i'm saying the right thing
here uh move a

3408
01:09:00,229 --> 01:09:00,239
here uh move a
 

3409
01:09:00,239 --> 01:09:04,149
here uh move a
four in six if not equal to go to ox

3410
01:09:04,149 --> 01:09:04,159
four in six if not equal to go to ox
 

3411
01:09:04,159 --> 01:09:07,189
four in six if not equal to go to ox
20 plus oaks 22.

3412
01:09:07,189 --> 01:09:07,199
20 plus oaks 22.
 

3413
01:09:07,199 --> 01:09:09,349
20 plus oaks 22.
uh that's a little bit hard to calculate

3414
01:09:09,349 --> 01:09:09,359
uh that's a little bit hard to calculate
 

3415
01:09:09,359 --> 01:09:10,950
uh that's a little bit hard to calculate
but that basically in one case we branch

3416
01:09:10,950 --> 01:09:10,960
but that basically in one case we branch
 

3417
01:09:10,960 --> 01:09:11,349
but that basically in one case we branch
out

3418
01:09:11,349 --> 01:09:11,359
out
 

3419
01:09:11,359 --> 01:09:14,149
out
and in the other case we branch back and

3420
01:09:14,149 --> 01:09:14,159
and in the other case we branch back and
 

3421
01:09:14,159 --> 01:09:15,510
and in the other case we branch back and
so this may be easier to

3422
01:09:15,510 --> 01:09:15,520
so this may be easier to
 

3423
01:09:15,520 --> 01:09:18,019
so this may be easier to
look at the c code

3424
01:09:18,019 --> 01:09:18,029
look at the c code
 

3425
01:09:18,029 --> 01:09:19,430
look at the c code
[Music]

3426
01:09:19,430 --> 01:09:19,440
[Music]
 

3427
01:09:19,440 --> 01:09:22,149
[Music]
so let's go in here so what happens so

3428
01:09:22,149 --> 01:09:22,159
so let's go in here so what happens so
 

3429
01:09:22,159 --> 01:09:22,709
so let's go in here so what happens so
if the

3430
01:09:22,709 --> 01:09:22,719
if the
 

3431
01:09:22,719 --> 01:09:25,990
if the
if the lock is not held uh what will be

3432
01:09:25,990 --> 01:09:26,000
if the lock is not held uh what will be
 

3433
01:09:26,000 --> 01:09:27,269
if the lock is not held uh what will be
the value of l locked well

3434
01:09:27,269 --> 01:09:27,279
the value of l locked well
 

3435
01:09:27,279 --> 01:09:30,630
the value of l locked well
l log will be zero all right and so

3436
01:09:30,630 --> 01:09:30,640
l log will be zero all right and so
 

3437
01:09:30,640 --> 01:09:32,470
l log will be zero all right and so
we call this test and set what will

3438
01:09:32,470 --> 01:09:32,480
we call this test and set what will
 

3439
01:09:32,480 --> 01:09:34,309
we call this test and set what will
happen is we'll write a one

3440
01:09:34,309 --> 01:09:34,319
happen is we'll write a one
 

3441
01:09:34,319 --> 01:09:37,349
happen is we'll write a one
yeah in walked but return the previous

3442
01:09:37,349 --> 01:09:37,359
yeah in walked but return the previous
 

3443
01:09:37,359 --> 01:09:38,470
yeah in walked but return the previous
value

3444
01:09:38,470 --> 01:09:38,480
value
 

3445
01:09:38,480 --> 01:09:41,669
value
so if the previous value is zero uh

3446
01:09:41,669 --> 01:09:41,679
so if the previous value is zero uh
 

3447
01:09:41,679 --> 01:09:43,829
so if the previous value is zero uh
then we're good right because that means

3448
01:09:43,829 --> 01:09:43,839
then we're good right because that means
 

3449
01:09:43,839 --> 01:09:45,669
then we're good right because that means
that nobody was holding the lock and we

3450
01:09:45,669 --> 01:09:45,679
that nobody was holding the lock and we
 

3451
01:09:45,679 --> 01:09:46,309
that nobody was holding the lock and we
fall through

3452
01:09:46,309 --> 01:09:46,319
fall through
 

3453
01:09:46,319 --> 01:09:49,590
fall through
and we're done with this while loop

3454
01:09:49,590 --> 01:09:49,600
and we're done with this while loop
 

3455
01:09:49,600 --> 01:09:51,910
and we're done with this while loop
now let's say the log value was one so

3456
01:09:51,910 --> 01:09:51,920
now let's say the log value was one so
 

3457
01:09:51,920 --> 01:09:53,110
now let's say the log value was one so
the pro the

3458
01:09:53,110 --> 01:09:53,120
the pro the
 

3459
01:09:53,120 --> 01:09:55,590
the pro the
the lock was actually locked well what

3460
01:09:55,590 --> 01:09:55,600
the lock was actually locked well what
 

3461
01:09:55,600 --> 01:09:57,189
the lock was actually locked well what
will this instruction do

3462
01:09:57,189 --> 01:09:57,199
will this instruction do
 

3463
01:09:57,199 --> 01:10:00,709
will this instruction do
it will uh read you know the old value

3464
01:10:00,709 --> 01:10:00,719
it will uh read you know the old value
 

3465
01:10:00,719 --> 01:10:02,790
it will uh read you know the old value
and put that at the site correct that is

3466
01:10:02,790 --> 01:10:02,800
and put that at the site correct that is
 

3467
01:10:02,800 --> 01:10:04,790
and put that at the site correct that is
one actually in this case and then write

3468
01:10:04,790 --> 01:10:04,800
one actually in this case and then write
 

3469
01:10:04,800 --> 01:10:07,750
one actually in this case and then write
a new one into that location

3470
01:10:07,750 --> 01:10:07,760
a new one into that location
 

3471
01:10:07,760 --> 01:10:10,070
a new one into that location
um and but that will change nothing

3472
01:10:10,070 --> 01:10:10,080
um and but that will change nothing
 

3473
01:10:10,080 --> 01:10:11,030
um and but that will change nothing
right because the

3474
01:10:11,030 --> 01:10:11,040
right because the
 

3475
01:10:11,040 --> 01:10:13,590
right because the
lock was already locked and and the

3476
01:10:13,590 --> 01:10:13,600
lock was already locked and and the
 

3477
01:10:13,600 --> 01:10:15,350
lock was already locked and and the
function will return one

3478
01:10:15,350 --> 01:10:15,360
function will return one
 

3479
01:10:15,360 --> 01:10:16,630
function will return one
indicating that actually somebody the

3480
01:10:16,630 --> 01:10:16,640
indicating that actually somebody the
 

3481
01:10:16,640 --> 01:10:18,709
indicating that actually somebody the
previous hold that it was already locked

3482
01:10:18,709 --> 01:10:18,719
previous hold that it was already locked
 

3483
01:10:18,719 --> 01:10:19,830
previous hold that it was already locked
and so in that case

3484
01:10:19,830 --> 01:10:19,840
and so in that case
 

3485
01:10:19,840 --> 01:10:22,390
and so in that case
it's unequal to zero and so we'll spin

3486
01:10:22,390 --> 01:10:22,400
it's unequal to zero and so we'll spin
 

3487
01:10:22,400 --> 01:10:23,669
it's unequal to zero and so we'll spin
and we'll keep spinning

3488
01:10:23,669 --> 01:10:23,679
and we'll keep spinning
 

3489
01:10:23,679 --> 01:10:27,030
and we'll keep spinning
until locked actually is set back to

3490
01:10:27,030 --> 01:10:27,040
until locked actually is set back to
 

3491
01:10:27,040 --> 01:10:29,669
until locked actually is set back to
uh zero and zoom level happened in the

3492
01:10:29,669 --> 01:10:29,679
uh zero and zoom level happened in the
 

3493
01:10:29,679 --> 01:10:32,390
uh zero and zoom level happened in the
release

3494
01:10:32,390 --> 01:10:32,400

 

3495
01:10:32,400 --> 01:10:51,270

any questions about this

3496
01:10:51,270 --> 01:10:51,280

 

3497
01:10:51,280 --> 01:10:55,990

no questions okay um

3498
01:10:55,990 --> 01:10:56,000

 

3499
01:10:56,000 --> 01:10:57,510

so now basically you know let's look at

3500
01:10:57,510 --> 01:10:57,520
so now basically you know let's look at
 

3501
01:10:57,520 --> 01:11:00,149
so now basically you know let's look at
the corresponding uh

3502
01:11:00,149 --> 01:11:00,159
the corresponding uh
 

3503
01:11:00,159 --> 01:11:03,510
the corresponding uh
the release operation and

3504
01:11:03,510 --> 01:11:03,520
the release operation and
 

3505
01:11:03,520 --> 01:11:07,510
the release operation and
uh

3506
01:11:07,510 --> 01:11:07,520

 

3507
01:11:07,520 --> 01:11:10,709

and uh here's uh the release operation

3508
01:11:10,709 --> 01:11:10,719
and uh here's uh the release operation
 

3509
01:11:10,719 --> 01:11:15,990
and uh here's uh the release operation
and if you look at the kernel asm again

3510
01:11:15,990 --> 01:11:16,000

 

3511
01:11:16,000 --> 01:11:18,950

that instruction uh so let's release

3512
01:11:18,950 --> 01:11:18,960
that instruction uh so let's release
 

3513
01:11:18,960 --> 01:11:22,070
that instruction uh so let's release
probably right after it here's release

3514
01:11:22,070 --> 01:11:22,080
probably right after it here's release
 

3515
01:11:22,080 --> 01:11:23,990
probably right after it here's release
so the release actually also uses this

3516
01:11:23,990 --> 01:11:24,000
so the release actually also uses this
 

3517
01:11:24,000 --> 01:11:27,910
so the release actually also uses this
atomic swap instruction

3518
01:11:27,910 --> 01:11:27,920

 

3519
01:11:27,920 --> 01:11:33,430

and putting basically zero into s1

3520
01:11:33,430 --> 01:11:33,440

 

3521
01:11:33,440 --> 01:11:35,830

and so this guarantee is basically that

3522
01:11:35,830 --> 01:11:35,840
and so this guarantee is basically that
 

3523
01:11:35,840 --> 01:11:38,470
and so this guarantee is basically that
this atomic update you know to

3524
01:11:38,470 --> 01:11:38,480
this atomic update you know to
 

3525
01:11:38,480 --> 01:11:41,669
this atomic update you know to
lock or lk locked uh

3526
01:11:41,669 --> 01:11:41,679
lock or lk locked uh
 

3527
01:11:41,679 --> 01:11:43,590
lock or lk locked uh
writing a zero into lk locked is an

3528
01:11:43,590 --> 01:11:43,600
writing a zero into lk locked is an
 

3529
01:11:43,600 --> 01:11:46,229
writing a zero into lk locked is an
atomic operation

3530
01:11:46,229 --> 01:11:46,239
atomic operation
 

3531
01:11:46,239 --> 01:11:48,390
atomic operation
many of you ask why not just you know

3532
01:11:48,390 --> 01:11:48,400
many of you ask why not just you know
 

3533
01:11:48,400 --> 01:11:49,669
many of you ask why not just you know
you store

3534
01:11:49,669 --> 01:11:49,679
you store
 

3535
01:11:49,679 --> 01:11:51,110
you store
a store instruction to actually write to

3536
01:11:51,110 --> 01:11:51,120
a store instruction to actually write to
 

3537
01:11:51,120 --> 01:11:55,350
a store instruction to actually write to
zero and anybody

3538
01:11:55,350 --> 01:11:55,360
zero and anybody
 

3539
01:11:55,360 --> 01:11:59,030
zero and anybody
may want to guess why why that might not

3540
01:11:59,030 --> 01:11:59,040
may want to guess why why that might not
 

3541
01:11:59,040 --> 01:11:59,830
may want to guess why why that might not
work or

3542
01:11:59,830 --> 01:11:59,840
work or
 

3543
01:11:59,840 --> 01:12:03,189
work or
what the problem could be because then

3544
01:12:03,189 --> 01:12:03,199
what the problem could be because then
 

3545
01:12:03,199 --> 01:12:04,950
what the problem could be because then
some other process might be writing a

3546
01:12:04,950 --> 01:12:04,960
some other process might be writing a
 

3547
01:12:04,960 --> 01:12:06,790
some other process might be writing a
one to the log or

3548
01:12:06,790 --> 01:12:06,800
one to the log or
 

3549
01:12:06,800 --> 01:12:09,510
one to the log or
no or writing another zero but that

3550
01:12:09,510 --> 01:12:09,520
no or writing another zero but that
 

3551
01:12:09,520 --> 01:12:11,270
no or writing another zero but that
can't be the case right

3552
01:12:11,270 --> 01:12:11,280
can't be the case right
 

3553
01:12:11,280 --> 01:12:12,630
can't be the case right
yeah well there could be okay so there

3554
01:12:12,630 --> 01:12:12,640
yeah well there could be okay so there
 

3555
01:12:12,640 --> 01:12:14,550
yeah well there could be okay so there
could be two processes or two cpus

3556
01:12:14,550 --> 01:12:14,560
could be two processes or two cpus
 

3557
01:12:14,560 --> 01:12:16,229
could be two processes or two cpus
writing to l locked at the same time

3558
01:12:16,229 --> 01:12:16,239
writing to l locked at the same time
 

3559
01:12:16,239 --> 01:12:17,270
writing to l locked at the same time
right

3560
01:12:17,270 --> 01:12:17,280
right
 

3561
01:12:17,280 --> 01:12:19,510
right
uh but i think what the the question

3562
01:12:19,510 --> 01:12:19,520
uh but i think what the the question
 

3563
01:12:19,520 --> 01:12:21,430
uh but i think what the the question
really is that you know for many people

3564
01:12:21,430 --> 01:12:21,440
really is that you know for many people
 

3565
01:12:21,440 --> 01:12:23,350
really is that you know for many people
and i often assume this too

3566
01:12:23,350 --> 01:12:23,360
and i often assume this too
 

3567
01:12:23,360 --> 01:12:24,870
and i often assume this too
is that you when you do a single store

3568
01:12:24,870 --> 01:12:24,880
is that you when you do a single store
 

3569
01:12:24,880 --> 01:12:25,990
is that you when you do a single store
instruction that's sort of like an

3570
01:12:25,990 --> 01:12:26,000
instruction that's sort of like an
 

3571
01:12:26,000 --> 01:12:28,950
instruction that's sort of like an
atomic operation

3572
01:12:28,950 --> 01:12:28,960
atomic operation
 

3573
01:12:28,960 --> 01:12:30,870
atomic operation
and that is not always the case you know

3574
01:12:30,870 --> 01:12:30,880
and that is not always the case you know
 

3575
01:12:30,880 --> 01:12:32,470
and that is not always the case you know
for example if you

3576
01:12:32,470 --> 01:12:32,480
for example if you
 

3577
01:12:32,480 --> 01:12:34,229
for example if you
uh and it really depends on the

3578
01:12:34,229 --> 01:12:34,239
uh and it really depends on the
 

3579
01:12:34,239 --> 01:12:35,510
uh and it really depends on the
architectural implementation

3580
01:12:35,510 --> 01:12:35,520
architectural implementation
 

3581
01:12:35,520 --> 01:12:37,350
architectural implementation
like for example if the cascadiers

3582
01:12:37,350 --> 01:12:37,360
like for example if the cascadiers
 

3583
01:12:37,360 --> 01:12:39,270
like for example if the cascadiers
protocol works or the cache system works

3584
01:12:39,270 --> 01:12:39,280
protocol works or the cache system works
 

3585
01:12:39,280 --> 01:12:40,950
protocol works or the cache system works
using cache lines where a cache line may

3586
01:12:40,950 --> 01:12:40,960
using cache lines where a cache line may
 

3587
01:12:40,960 --> 01:12:41,910
using cache lines where a cache line may
be

3588
01:12:41,910 --> 01:12:41,920
be
 

3589
01:12:41,920 --> 01:12:43,830
be
bigger than an integer typically bigger

3590
01:12:43,830 --> 01:12:43,840
bigger than an integer typically bigger
 

3591
01:12:43,840 --> 01:12:44,950
bigger than an integer typically bigger
than the integer

3592
01:12:44,950 --> 01:12:44,960
than the integer
 

3593
01:12:44,960 --> 01:12:47,110
than the integer
uh then really what's happening is the

3594
01:12:47,110 --> 01:12:47,120
uh then really what's happening is the
 

3595
01:12:47,120 --> 01:12:48,709
uh then really what's happening is the
first operation is loading the cache

3596
01:12:48,709 --> 01:12:48,719
first operation is loading the cache
 

3597
01:12:48,719 --> 01:12:50,709
first operation is loading the cache
line and then updating the cache line

3598
01:12:50,709 --> 01:12:50,719
line and then updating the cache line
 

3599
01:12:50,719 --> 01:12:52,229
line and then updating the cache line
so in fact you know a store instruction

3600
01:12:52,229 --> 01:12:52,239
so in fact you know a store instruction
 

3601
01:12:52,239 --> 01:12:53,590
so in fact you know a store instruction
basically has sort of two micro

3602
01:12:53,590 --> 01:12:53,600
basically has sort of two micro
 

3603
01:12:53,600 --> 01:12:54,790
basically has sort of two micro
operations in it

3604
01:12:54,790 --> 01:12:54,800
operations in it
 

3605
01:12:54,800 --> 01:12:59,590
operations in it
and and you can get the wrong result

3606
01:12:59,590 --> 01:12:59,600

 

3607
01:12:59,600 --> 01:13:03,350

and so uh you know the to the devoid you

3608
01:13:03,350 --> 01:13:03,360
and so uh you know the to the devoid you
 

3609
01:13:03,360 --> 01:13:03,669
and so uh you know the to the devoid you
know

3610
01:13:03,669 --> 01:13:03,679
know
 

3611
01:13:03,679 --> 01:13:04,950
know
having to understand anything of the

3612
01:13:04,950 --> 01:13:04,960
having to understand anything of the
 

3613
01:13:04,960 --> 01:13:06,470
having to understand anything of the
hardware implementation of exactly and

3614
01:13:06,470 --> 01:13:06,480
hardware implementation of exactly and
 

3615
01:13:06,480 --> 01:13:08,310
hardware implementation of exactly and
whether integers operations are atomic

3616
01:13:08,310 --> 01:13:08,320
whether integers operations are atomic
 

3617
01:13:08,320 --> 01:13:08,870
whether integers operations are atomic
or not

3618
01:13:08,870 --> 01:13:08,880
or not
 

3619
01:13:08,880 --> 01:13:12,390
or not
or writing to 64-bit 64

3620
01:13:12,390 --> 01:13:12,400
or writing to 64-bit 64
 

3621
01:13:12,400 --> 01:13:14,709
or writing to 64-bit 64
bit memory values and atomic operation

3622
01:13:14,709 --> 01:13:14,719
bit memory values and atomic operation
 

3623
01:13:14,719 --> 01:13:15,990
bit memory values and atomic operation
you know we use the

3624
01:13:15,990 --> 01:13:16,000
you know we use the
 

3625
01:13:16,000 --> 01:13:19,030
you know we use the
uh uh there is five

3626
01:13:19,030 --> 01:13:19,040
uh uh there is five
 

3627
01:13:19,040 --> 01:13:20,470
uh uh there is five
operation that is guaranteed to be

3628
01:13:20,470 --> 01:13:20,480
operation that is guaranteed to be
 

3629
01:13:20,480 --> 01:13:24,790
operation that is guaranteed to be
executed atomically

3630
01:13:24,790 --> 01:13:24,800

 

3631
01:13:24,800 --> 01:13:28,070

does that make sense

3632
01:13:28,070 --> 01:13:28,080

 

3633
01:13:28,080 --> 01:13:33,110

yes okay okay so just to uh

3634
01:13:33,110 --> 01:13:33,120
yes okay okay so just to uh
 

3635
01:13:33,120 --> 01:13:36,149
yes okay okay so just to uh
just for your amusement uh the

3636
01:13:36,149 --> 01:13:36,159
just for your amusement uh the
 

3637
01:13:36,159 --> 01:13:38,070
just for your amusement uh the
atomic swap is not the only instruction

3638
01:13:38,070 --> 01:13:38,080
atomic swap is not the only instruction
 

3639
01:13:38,080 --> 01:13:40,229
atomic swap is not the only instruction
uh that exists uh so here's the risk

3640
01:13:40,229 --> 01:13:40,239
uh that exists uh so here's the risk
 

3641
01:13:40,239 --> 01:13:41,430
uh that exists uh so here's the risk
five manual

3642
01:13:41,430 --> 01:13:41,440
five manual
 

3643
01:13:41,440 --> 01:13:43,830
five manual
uh and it lists a whole bunch of the

3644
01:13:43,830 --> 01:13:43,840
uh and it lists a whole bunch of the
 

3645
01:13:43,840 --> 01:13:45,430
uh and it lists a whole bunch of the
atomic operations so there's an atomic

3646
01:13:45,430 --> 01:13:45,440
atomic operations so there's an atomic
 

3647
01:13:45,440 --> 01:13:45,750
atomic operations so there's an atomic
end

3648
01:13:45,750 --> 01:13:45,760
end
 

3649
01:13:45,760 --> 01:13:48,870
end
an atomic ore and there's a max min

3650
01:13:48,870 --> 01:13:48,880
an atomic ore and there's a max min
 

3651
01:13:48,880 --> 01:13:52,630
an atomic ore and there's a max min
that all can read and write a value

3652
01:13:52,630 --> 01:13:52,640
that all can read and write a value
 

3653
01:13:52,640 --> 01:13:58,830
that all can read and write a value
in an atomic operation

3654
01:13:58,830 --> 01:13:58,840

 

3655
01:13:58,840 --> 01:14:01,270

okay so there's a couple other things

3656
01:14:01,270 --> 01:14:01,280
okay so there's a couple other things
 

3657
01:14:01,280 --> 01:14:02,310
okay so there's a couple other things
that i want to point out

3658
01:14:02,310 --> 01:14:02,320
that i want to point out
 

3659
01:14:02,320 --> 01:14:06,390
that i want to point out
uh in this particular implementation um

3660
01:14:06,390 --> 01:14:06,400
uh in this particular implementation um
 

3661
01:14:06,400 --> 01:14:09,990
uh in this particular implementation um
and let me start again and go back to

3662
01:14:09,990 --> 01:14:10,000
and let me start again and go back to
 

3663
01:14:10,000 --> 01:14:13,350
and let me start again and go back to
acquire uh so

3664
01:14:13,350 --> 01:14:13,360
acquire uh so
 

3665
01:14:13,360 --> 01:14:16,149
acquire uh so
one of the first things that the uh

3666
01:14:16,149 --> 01:14:16,159
one of the first things that the uh
 

3667
01:14:16,159 --> 01:14:17,750
one of the first things that the uh
acquire function does

3668
01:14:17,750 --> 01:14:17,760
acquire function does
 

3669
01:14:17,760 --> 01:14:20,790
acquire function does
uh is it uh turns off

3670
01:14:20,790 --> 01:14:20,800
uh is it uh turns off
 

3671
01:14:20,800 --> 01:14:24,550
uh is it uh turns off
interrupts and it'd be good to

3672
01:14:24,550 --> 01:14:24,560
interrupts and it'd be good to
 

3673
01:14:24,560 --> 01:14:26,390
interrupts and it'd be good to
understand why that is the case and so

3674
01:14:26,390 --> 01:14:26,400
understand why that is the case and so
 

3675
01:14:26,400 --> 01:14:28,630
understand why that is the case and so
for that i'm to go back to our uart exam

3676
01:14:28,630 --> 01:14:28,640
for that i'm to go back to our uart exam
 

3677
01:14:28,640 --> 01:14:30,870
for that i'm to go back to our uart exam
code and you think a little bit about

3678
01:14:30,870 --> 01:14:30,880
code and you think a little bit about
 

3679
01:14:30,880 --> 01:14:32,149
code and you think a little bit about
this

3680
01:14:32,149 --> 01:14:32,159
this
 

3681
01:14:32,159 --> 01:14:34,470
this
and so we want to think about the case

3682
01:14:34,470 --> 01:14:34,480
and so we want to think about the case
 

3683
01:14:34,480 --> 01:14:35,430
and so we want to think about the case
where

3684
01:14:35,430 --> 01:14:35,440
where
 

3685
01:14:35,440 --> 01:14:38,870
where
uh a query is actually maybe incorrectly

3686
01:14:38,870 --> 01:14:38,880
uh a query is actually maybe incorrectly
 

3687
01:14:38,880 --> 01:14:40,709
uh a query is actually maybe incorrectly
implemented and does not turn off

3688
01:14:40,709 --> 01:14:40,719
implemented and does not turn off
 

3689
01:14:40,719 --> 01:14:43,350
implemented and does not turn off
erupts so and the way to think about

3690
01:14:43,350 --> 01:14:43,360
erupts so and the way to think about
 

3691
01:14:43,360 --> 01:14:44,950
erupts so and the way to think about
this is if we go to europe

3692
01:14:44,950 --> 01:14:44,960
this is if we go to europe
 

3693
01:14:44,960 --> 01:14:47,669
this is if we go to europe
put c and here you know let's say your

3694
01:14:47,669 --> 01:14:47,679
put c and here you know let's say your
 

3695
01:14:47,679 --> 01:14:49,189
put c and here you know let's say your
qt runs

3696
01:14:49,189 --> 01:14:49,199
qt runs
 

3697
01:14:49,199 --> 01:14:53,430
qt runs
and uh acquires the lock

3698
01:14:53,430 --> 01:14:53,440
and uh acquires the lock
 

3699
01:14:53,440 --> 01:14:55,510
and uh acquires the lock
and but does not turn off interrupts

3700
01:14:55,510 --> 01:14:55,520
and but does not turn off interrupts
 

3701
01:14:55,520 --> 01:15:02,790
and but does not turn off interrupts
what can happen

3702
01:15:02,790 --> 01:15:02,800

 

3703
01:15:02,800 --> 01:15:04,229

i'll give everybody a couple seconds to

3704
01:15:04,229 --> 01:15:04,239
i'll give everybody a couple seconds to
 

3705
01:15:04,239 --> 01:15:05,910
i'll give everybody a couple seconds to
think about it but

3706
01:15:05,910 --> 01:15:05,920
think about it but
 

3707
01:15:05,920 --> 01:15:07,830
think about it but
if you have an idea or why it might be

3708
01:15:07,830 --> 01:15:07,840
if you have an idea or why it might be
 

3709
01:15:07,840 --> 01:15:09,430
if you have an idea or why it might be
wrong you know like

3710
01:15:09,430 --> 01:15:09,440
wrong you know like
 

3711
01:15:09,440 --> 01:15:18,709
wrong you know like
jump in

3712
01:15:18,709 --> 01:15:18,719

 

3713
01:15:18,719 --> 01:15:22,550

perhaps it could be interrupted because

3714
01:15:22,550 --> 01:15:22,560
perhaps it could be interrupted because
 

3715
01:15:22,560 --> 01:15:25,830
perhaps it could be interrupted because
of um because of the clock

3716
01:15:25,830 --> 01:15:25,840
of um because of the clock
 

3717
01:15:25,840 --> 01:15:29,030
of um because of the clock
and then something happens and it needs

3718
01:15:29,030 --> 01:15:29,040
and then something happens and it needs
 

3719
01:15:29,040 --> 01:15:30,470
and then something happens and it needs
to print something

3720
01:15:30,470 --> 01:15:30,480
to print something
 

3721
01:15:30,480 --> 01:15:33,830
to print something
else and it tries to do your put c again

3722
01:15:33,830 --> 01:15:33,840
else and it tries to do your put c again
 

3723
01:15:33,840 --> 01:15:35,990
else and it tries to do your put c again
but the lock is already taken yeah that

3724
01:15:35,990 --> 01:15:36,000
but the lock is already taken yeah that
 

3725
01:15:36,000 --> 01:15:37,270
but the lock is already taken yeah that
might be a possible scenario

3726
01:15:37,270 --> 01:15:37,280
might be a possible scenario
 

3727
01:15:37,280 --> 01:15:39,669
might be a possible scenario
uh there's a much more direct example

3728
01:15:39,669 --> 01:15:39,679
uh there's a much more direct example
 

3729
01:15:39,679 --> 01:15:40,709
uh there's a much more direct example
for this

3730
01:15:40,709 --> 01:15:40,719
for this
 

3731
01:15:40,719 --> 01:15:42,229
for this
so let's just say you are could see you

3732
01:15:42,229 --> 01:15:42,239
so let's just say you are could see you
 

3733
01:15:42,239 --> 01:15:43,750
so let's just say you are could see you
know drives lock

3734
01:15:43,750 --> 01:15:43,760
know drives lock
 

3735
01:15:43,760 --> 01:15:45,910
know drives lock
and the universe basically transmitting

3736
01:15:45,910 --> 01:15:45,920
and the universe basically transmitting
 

3737
01:15:45,920 --> 01:15:47,510
and the universe basically transmitting
some character

3738
01:15:47,510 --> 01:15:47,520
some character
 

3739
01:15:47,520 --> 01:15:49,910
some character
so one the urge is done uh transmitting

3740
01:15:49,910 --> 01:15:49,920
so one the urge is done uh transmitting
 

3741
01:15:49,920 --> 01:15:53,270
so one the urge is done uh transmitting
character what does it do

3742
01:15:53,270 --> 01:15:53,280
character what does it do
 

3743
01:15:53,280 --> 01:15:55,990
character what does it do
it causes an interrupt correct and you

3744
01:15:55,990 --> 01:15:56,000
it causes an interrupt correct and you
 

3745
01:15:56,000 --> 01:15:57,830
it causes an interrupt correct and you
are interrupted runs

3746
01:15:57,830 --> 01:15:57,840
are interrupted runs
 

3747
01:15:57,840 --> 01:16:01,110
are interrupted runs
and what does your interrupt do it grabs

3748
01:16:01,110 --> 01:16:01,120
and what does your interrupt do it grabs
 

3749
01:16:01,120 --> 01:16:02,390
and what does your interrupt do it grabs
the same lock

3750
01:16:02,390 --> 01:16:02,400
the same lock
 

3751
01:16:02,400 --> 01:16:04,550
the same lock
you know that the pc is holding right so

3752
01:16:04,550 --> 01:16:04,560
you know that the pc is holding right so
 

3753
01:16:04,560 --> 01:16:05,990
you know that the pc is holding right so
what will happen here

3754
01:16:05,990 --> 01:16:06,000
what will happen here
 

3755
01:16:06,000 --> 01:16:08,070
what will happen here
if there's only one cpu and so there's

3756
01:16:08,070 --> 01:16:08,080
if there's only one cpu and so there's
 

3757
01:16:08,080 --> 01:16:09,510
if there's only one cpu and so there's
no other cpu where this

3758
01:16:09,510 --> 01:16:09,520
no other cpu where this
 

3759
01:16:09,520 --> 01:16:12,790
no other cpu where this
interrupt could be running well we have

3760
01:16:12,790 --> 01:16:12,800
interrupt could be running well we have
 

3761
01:16:12,800 --> 01:16:13,430
interrupt could be running well we have
a deadlock

3762
01:16:13,430 --> 01:16:13,440
a deadlock
 

3763
01:16:13,440 --> 01:16:17,189
a deadlock
right because the current cpu is holding

3764
01:16:17,189 --> 01:16:17,199
right because the current cpu is holding
 

3765
01:16:17,199 --> 01:16:19,830
right because the current cpu is holding
the lock as part of you put see then

3766
01:16:19,830 --> 01:16:19,840
the lock as part of you put see then
 

3767
01:16:19,840 --> 01:16:20,470
the lock as part of you put see then
later

3768
01:16:20,470 --> 01:16:20,480
later
 

3769
01:16:20,480 --> 01:16:22,550
later
the interrupt came in and the first

3770
01:16:22,550 --> 01:16:22,560
the interrupt came in and the first
 

3771
01:16:22,560 --> 01:16:23,590
the interrupt came in and the first
thing it tries to do is actually

3772
01:16:23,590 --> 01:16:23,600
thing it tries to do is actually
 

3773
01:16:23,600 --> 01:16:25,590
thing it tries to do is actually
acquired a lot that's already held

3774
01:16:25,590 --> 01:16:25,600
acquired a lot that's already held
 

3775
01:16:25,600 --> 01:16:27,350
acquired a lot that's already held
in fact you know in the case of xv6 you

3776
01:16:27,350 --> 01:16:27,360
in fact you know in the case of xv6 you
 

3777
01:16:27,360 --> 01:16:28,950
in fact you know in the case of xv6 you
know we'll get a panic you know because

3778
01:16:28,950 --> 01:16:28,960
know we'll get a panic you know because
 

3779
01:16:28,960 --> 01:16:30,790
know we'll get a panic you know because
you know the same cpu

3780
01:16:30,790 --> 01:16:30,800
you know the same cpu
 

3781
01:16:30,800 --> 01:16:32,149
you know the same cpu
is actually trying to acquire the same

3782
01:16:32,149 --> 01:16:32,159
is actually trying to acquire the same
 

3783
01:16:32,159 --> 01:16:37,430
is actually trying to acquire the same
lock again

3784
01:16:37,430 --> 01:16:37,440

 

3785
01:16:37,440 --> 01:16:39,830

so basically you know what acquire or

3786
01:16:39,830 --> 01:16:39,840
so basically you know what acquire or
 

3787
01:16:39,840 --> 01:16:41,510
so basically you know what acquire or
spinlock deals with is sort of two

3788
01:16:41,510 --> 01:16:41,520
spinlock deals with is sort of two
 

3789
01:16:41,520 --> 01:16:42,870
spinlock deals with is sort of two
different types of concurrency

3790
01:16:42,870 --> 01:16:42,880
different types of concurrency
 

3791
01:16:42,880 --> 01:16:44,229
different types of concurrency
you know one there's sort of concurrency

3792
01:16:44,229 --> 01:16:44,239
you know one there's sort of concurrency
 

3793
01:16:44,239 --> 01:16:45,910
you know one there's sort of concurrency
between two different cpus

3794
01:16:45,910 --> 01:16:45,920
between two different cpus
 

3795
01:16:45,920 --> 01:16:47,350
between two different cpus
we got to make sure that for example if

3796
01:16:47,350 --> 01:16:47,360
we got to make sure that for example if
 

3797
01:16:47,360 --> 01:16:49,350
we got to make sure that for example if
the interrupter function runs on a

3798
01:16:49,350 --> 01:16:49,360
the interrupter function runs on a
 

3799
01:16:49,360 --> 01:16:50,390
the interrupter function runs on a
different cpu

3800
01:16:50,390 --> 01:16:50,400
different cpu
 

3801
01:16:50,400 --> 01:16:51,910
different cpu
that basically we don't get a raise on

3802
01:16:51,910 --> 01:16:51,920
that basically we don't get a raise on
 

3803
01:16:51,920 --> 01:16:53,510
that basically we don't get a raise on
the transmission buffer

3804
01:16:53,510 --> 01:16:53,520
the transmission buffer
 

3805
01:16:53,520 --> 01:16:55,270
the transmission buffer
but if they run in the same cpu we got

3806
01:16:55,270 --> 01:16:55,280
but if they run in the same cpu we got
 

3807
01:16:55,280 --> 01:16:57,189
but if they run in the same cpu we got
to make sure that it's still atomic

3808
01:16:57,189 --> 01:16:57,199
to make sure that it's still atomic
 

3809
01:16:57,199 --> 01:16:58,870
to make sure that it's still atomic
uh and that is not being interrupted and

3810
01:16:58,870 --> 01:16:58,880
uh and that is not being interrupted and
 

3811
01:16:58,880 --> 01:17:00,310
uh and that is not being interrupted and
therefore we actually turn the yarn

3812
01:17:00,310 --> 01:17:00,320
therefore we actually turn the yarn
 

3813
01:17:00,320 --> 01:17:00,870
therefore we actually turn the yarn
wraps off

3814
01:17:00,870 --> 01:17:00,880
wraps off
 

3815
01:17:00,880 --> 01:17:04,390
wraps off
in the choir and they're only turned on

3816
01:17:04,390 --> 01:17:04,400
in the choir and they're only turned on
 

3817
01:17:04,400 --> 01:17:05,110
in the choir and they're only turned on
again

3818
01:17:05,110 --> 01:17:05,120
again
 

3819
01:17:05,120 --> 01:17:08,229
again
at the end of release when the lock

3820
01:17:08,229 --> 01:17:08,239
at the end of release when the lock
 

3821
01:17:08,239 --> 01:17:09,750
at the end of release when the lock
actually has been released and at that

3822
01:17:09,750 --> 01:17:09,760
actually has been released and at that
 

3823
01:17:09,760 --> 01:17:11,350
actually has been released and at that
point it's safe again you know to take

3824
01:17:11,350 --> 01:17:11,360
point it's safe again you know to take
 

3825
01:17:11,360 --> 01:17:12,390
point it's safe again you know to take
these interrupts

3826
01:17:12,390 --> 01:17:12,400
these interrupts
 

3827
01:17:12,400 --> 01:17:14,310
these interrupts
because the lock actually is not

3828
01:17:14,310 --> 01:17:14,320
because the lock actually is not
 

3829
01:17:14,320 --> 01:17:16,630
because the lock actually is not
released anymore it's not acquired

3830
01:17:16,630 --> 01:17:16,640
released anymore it's not acquired
 

3831
01:17:16,640 --> 01:17:18,950
released anymore it's not acquired
holding it not health anymore

3832
01:17:18,950 --> 01:17:18,960
holding it not health anymore
 

3833
01:17:18,960 --> 01:17:28,470
holding it not health anymore
does that make sense

3834
01:17:28,470 --> 01:17:28,480

 

3835
01:17:28,480 --> 01:17:31,430

okay there's one more subtle thing in

3836
01:17:31,430 --> 01:17:31,440
okay there's one more subtle thing in
 

3837
01:17:31,440 --> 01:17:32,070
okay there's one more subtle thing in
this

3838
01:17:32,070 --> 01:17:32,080
this
 

3839
01:17:32,080 --> 01:17:35,590
this
implementation that i want to talk about

3840
01:17:35,590 --> 01:17:35,600
implementation that i want to talk about
 

3841
01:17:35,600 --> 01:17:43,110
implementation that i want to talk about
and that we need to deal with

3842
01:17:43,110 --> 01:17:43,120

 

3843
01:17:43,120 --> 01:17:53,830

and that is uh memory ordering

3844
01:17:53,830 --> 01:17:53,840

 

3845
01:17:53,840 --> 01:17:56,870

so uh for example if you think about you

3846
01:17:56,870 --> 01:17:56,880
so uh for example if you think about you
 

3847
01:17:56,880 --> 01:17:57,510
so uh for example if you think about you
know locked

3848
01:17:57,510 --> 01:17:57,520
know locked
 

3849
01:17:57,520 --> 01:18:00,709
know locked
is let's say acquires it's locked you

3850
01:18:00,709 --> 01:18:00,719
is let's say acquires it's locked you
 

3851
01:18:00,719 --> 01:18:00,950
is let's say acquires it's locked you
know

3852
01:18:00,950 --> 01:18:00,960
know
 

3853
01:18:00,960 --> 01:18:03,830
know
to one uh maybe we have a critical

3854
01:18:03,830 --> 01:18:03,840
to one uh maybe we have a critical
 

3855
01:18:03,840 --> 01:18:05,750
to one uh maybe we have a critical
section in which you know x is except x

3856
01:18:05,750 --> 01:18:05,760
section in which you know x is except x
 

3857
01:18:05,760 --> 01:18:06,950
section in which you know x is except x
plus one

3858
01:18:06,950 --> 01:18:06,960
plus one
 

3859
01:18:06,960 --> 01:18:10,950
plus one
and uh and then require

3860
01:18:10,950 --> 01:18:10,960
and uh and then require
 

3861
01:18:10,960 --> 01:18:13,430
and uh and then require
release you know says lock to zero so

3862
01:18:13,430 --> 01:18:13,440
release you know says lock to zero so
 

3863
01:18:13,440 --> 01:18:14,870
release you know says lock to zero so
you sort of think about the instruction

3864
01:18:14,870 --> 01:18:14,880
you sort of think about the instruction
 

3865
01:18:14,880 --> 01:18:16,390
you sort of think about the instruction
stream that's being executed on a

3866
01:18:16,390 --> 01:18:16,400
stream that's being executed on a
 

3867
01:18:16,400 --> 01:18:17,510
stream that's being executed on a
particular cpu

3868
01:18:17,510 --> 01:18:17,520
particular cpu
 

3869
01:18:17,520 --> 01:18:18,470
particular cpu
you know so these are sort of the

3870
01:18:18,470 --> 01:18:18,480
you know so these are sort of the
 

3871
01:18:18,480 --> 01:18:19,910
you know so these are sort of the
instructions that are being executed

3872
01:18:19,910 --> 01:18:19,920
instructions that are being executed
 

3873
01:18:19,920 --> 01:18:22,149
instructions that are being executed
right

3874
01:18:22,149 --> 01:18:22,159

 

3875
01:18:22,159 --> 01:18:24,870

now if the code were just purely uh

3876
01:18:24,870 --> 01:18:24,880
now if the code were just purely uh
 

3877
01:18:24,880 --> 01:18:27,080
now if the code were just purely uh
sequential

3878
01:18:27,080 --> 01:18:27,090
sequential
 

3879
01:18:27,090 --> 01:18:30,470
sequential
[Music]

3880
01:18:30,470 --> 01:18:30,480
[Music]
 

3881
01:18:30,480 --> 01:18:34,070
[Music]
the compiler or the

3882
01:18:34,070 --> 01:18:34,080

 

3883
01:18:34,080 --> 01:18:35,990

processor could actually or reorder

3884
01:18:35,990 --> 01:18:36,000
processor could actually or reorder
 

3885
01:18:36,000 --> 01:18:37,590
processor could actually or reorder
instructions you know just to get better

3886
01:18:37,590 --> 01:18:37,600
instructions you know just to get better
 

3887
01:18:37,600 --> 01:18:39,350
instructions you know just to get better
performance

3888
01:18:39,350 --> 01:18:39,360
performance
 

3889
01:18:39,360 --> 01:18:42,149
performance
so for example uh if it were a

3890
01:18:42,149 --> 01:18:42,159
so for example uh if it were a
 

3891
01:18:42,159 --> 01:18:43,110
so for example uh if it were a
sequential stream

3892
01:18:43,110 --> 01:18:43,120
sequential stream
 

3893
01:18:43,120 --> 01:18:44,550
sequential stream
would it be okay to move this

3894
01:18:44,550 --> 01:18:44,560
would it be okay to move this
 

3895
01:18:44,560 --> 01:18:49,189
would it be okay to move this
instruction to afterwards

3896
01:18:49,189 --> 01:18:49,199

 

3897
01:18:49,199 --> 01:18:51,590

would that change the correctness of the

3898
01:18:51,590 --> 01:18:51,600
would that change the correctness of the
 

3899
01:18:51,600 --> 01:18:58,070
would that change the correctness of the
single stream of execution

3900
01:18:58,070 --> 01:18:58,080

 

3901
01:18:58,080 --> 01:18:59,830

no not really right because lock and x

3902
01:18:59,830 --> 01:18:59,840
no not really right because lock and x
 

3903
01:18:59,840 --> 01:19:01,110
no not really right because lock and x
are totally independent of each other

3904
01:19:01,110 --> 01:19:01,120
are totally independent of each other
 

3905
01:19:01,120 --> 01:19:03,189
are totally independent of each other
there's no relation to it so it'd be

3906
01:19:03,189 --> 01:19:03,199
there's no relation to it so it'd be
 

3907
01:19:03,199 --> 01:19:05,030
there's no relation to it so it'd be
perfectly fine if it were a sequential

3908
01:19:05,030 --> 01:19:05,040
perfectly fine if it were a sequential
 

3909
01:19:05,040 --> 01:19:05,990
perfectly fine if it were a sequential
execution

3910
01:19:05,990 --> 01:19:06,000
execution
 

3911
01:19:06,000 --> 01:19:07,910
execution
that the x you know has moved after the

3912
01:19:07,910 --> 01:19:07,920
that the x you know has moved after the
 

3913
01:19:07,920 --> 01:19:09,270
that the x you know has moved after the
locked uh

3914
01:19:09,270 --> 01:19:09,280
locked uh
 

3915
01:19:09,280 --> 01:19:14,310
locked uh
log zero so that you know on the single

3916
01:19:14,310 --> 01:19:14,320

 

3917
01:19:14,320 --> 01:19:17,990

single serial execution

3918
01:19:17,990 --> 01:19:18,000

 

3919
01:19:18,000 --> 01:19:23,430

that's okay

3920
01:19:23,430 --> 01:19:23,440
that's okay
 

3921
01:19:23,440 --> 01:19:25,590
that's okay
and in fact so in effect processors you

3922
01:19:25,590 --> 01:19:25,600
and in fact so in effect processors you
 

3923
01:19:25,600 --> 01:19:27,030
and in fact so in effect processors you
know do this all the time you know they

3924
01:19:27,030 --> 01:19:27,040
know do this all the time you know they
 

3925
01:19:27,040 --> 01:19:29,030
know do this all the time you know they
do respectively execute stuff

3926
01:19:29,030 --> 01:19:29,040
do respectively execute stuff
 

3927
01:19:29,040 --> 01:19:31,030
do respectively execute stuff
uh or especially execute instructions

3928
01:19:31,030 --> 01:19:31,040
uh or especially execute instructions
 

3929
01:19:31,040 --> 01:19:32,630
uh or especially execute instructions
and so that can result in basically

3930
01:19:32,630 --> 01:19:32,640
and so that can result in basically
 

3931
01:19:32,640 --> 01:19:34,709
and so that can result in basically
these instructions reorderings

3932
01:19:34,709 --> 01:19:34,719
these instructions reorderings
 

3933
01:19:34,719 --> 01:19:37,510
these instructions reorderings
uh the compiler does it too you know to

3934
01:19:37,510 --> 01:19:37,520
uh the compiler does it too you know to
 

3935
01:19:37,520 --> 01:19:39,189
uh the compiler does it too you know to
maybe optimize you know some code path

3936
01:19:39,189 --> 01:19:39,199
maybe optimize you know some code path
 

3937
01:19:39,199 --> 01:19:40,790
maybe optimize you know some code path
and it also will reorder instructions as

3938
01:19:40,790 --> 01:19:40,800
and it also will reorder instructions as
 

3939
01:19:40,800 --> 01:19:41,910
and it also will reorder instructions as
long as it like you know

3940
01:19:41,910 --> 01:19:41,920
long as it like you know
 

3941
01:19:41,920 --> 01:19:44,790
long as it like you know
results in the same serial execution but

3942
01:19:44,790 --> 01:19:44,800
results in the same serial execution but
 

3943
01:19:44,800 --> 01:19:46,470
results in the same serial execution but
clearly during concurrent execution this

3944
01:19:46,470 --> 01:19:46,480
clearly during concurrent execution this
 

3945
01:19:46,480 --> 01:19:48,390
clearly during concurrent execution this
would be disaster correct because if

3946
01:19:48,390 --> 01:19:48,400
would be disaster correct because if
 

3947
01:19:48,400 --> 01:19:52,229
would be disaster correct because if
locked which a require and this was our

3948
01:19:52,229 --> 01:19:52,239
locked which a require and this was our
 

3949
01:19:52,239 --> 01:19:54,070
locked which a require and this was our
release

3950
01:19:54,070 --> 01:19:54,080
release
 

3951
01:19:54,080 --> 01:19:55,510
release
then basically what we've done we moved

3952
01:19:55,510 --> 01:19:55,520
then basically what we've done we moved
 

3953
01:19:55,520 --> 01:19:57,750
then basically what we've done we moved
to the critical section outside of the

3954
01:19:57,750 --> 01:19:57,760
to the critical section outside of the
 

3955
01:19:57,760 --> 01:19:59,990
to the critical section outside of the
the the acquiring release and then be

3956
01:19:59,990 --> 01:20:00,000
the the acquiring release and then be
 

3957
01:20:00,000 --> 01:20:01,510
the the acquiring release and then be
totally incorrect

3958
01:20:01,510 --> 01:20:01,520
totally incorrect
 

3959
01:20:01,520 --> 01:20:04,709
totally incorrect
so that's wrong wrong

3960
01:20:04,709 --> 01:20:04,719
so that's wrong wrong
 

3961
01:20:04,719 --> 01:20:12,709
so that's wrong wrong
in a concurrent execution

3962
01:20:12,709 --> 01:20:12,719

 

3963
01:20:12,719 --> 01:20:15,189

and so you know to forbid or tell the

3964
01:20:15,189 --> 01:20:15,199
and so you know to forbid or tell the
 

3965
01:20:15,199 --> 01:20:16,629
and so you know to forbid or tell the
compiler in the hardware not

3966
01:20:16,629 --> 01:20:16,639
compiler in the hardware not
 

3967
01:20:16,639 --> 01:20:19,510
compiler in the hardware not
you know to do this uh there's something

3968
01:20:19,510 --> 01:20:19,520
you know to do this uh there's something
 

3969
01:20:19,520 --> 01:20:20,149
you know to do this uh there's something
what's called

3970
01:20:20,149 --> 01:20:20,159
what's called
 

3971
01:20:20,159 --> 01:20:22,229
what's called
a memory fence or something kind of

3972
01:20:22,229 --> 01:20:22,239
a memory fence or something kind of
 

3973
01:20:22,239 --> 01:20:23,270
a memory fence or something kind of
synchronized

3974
01:20:23,270 --> 01:20:23,280
synchronized
 

3975
01:20:23,280 --> 01:20:24,550
synchronized
uh there's an instruction that basically

3976
01:20:24,550 --> 01:20:24,560
uh there's an instruction that basically
 

3977
01:20:24,560 --> 01:20:26,870
uh there's an instruction that basically
says like any loads of storage before

3978
01:20:26,870 --> 01:20:26,880
says like any loads of storage before
 

3979
01:20:26,880 --> 01:20:27,910
says like any loads of storage before
this point

3980
01:20:27,910 --> 01:20:27,920
this point
 

3981
01:20:27,920 --> 01:20:30,070
this point
you're not allowed to move beyond this

3982
01:20:30,070 --> 01:20:30,080
you're not allowed to move beyond this
 

3983
01:20:30,080 --> 01:20:31,270
you're not allowed to move beyond this
point

3984
01:20:31,270 --> 01:20:31,280
point
 

3985
01:20:31,280 --> 01:20:34,229
point
and so release has this and uh acquiring

3986
01:20:34,229 --> 01:20:34,239
and so release has this and uh acquiring
 

3987
01:20:34,239 --> 01:20:35,030
and so release has this and uh acquiring
has this

3988
01:20:35,030 --> 01:20:35,040
has this
 

3989
01:20:35,040 --> 01:20:36,870
has this
and so for example this x plus x plus

3990
01:20:36,870 --> 01:20:36,880
and so for example this x plus x plus
 

3991
01:20:36,880 --> 01:20:38,310
and so for example this x plus x plus
one if that was

3992
01:20:38,310 --> 01:20:38,320
one if that was
 

3993
01:20:38,320 --> 01:20:41,110
one if that was
uh uh updated after the choir and before

3994
01:20:41,110 --> 01:20:41,120
uh uh updated after the choir and before
 

3995
01:20:41,120 --> 01:20:41,750
uh uh updated after the choir and before
the release

3996
01:20:41,750 --> 01:20:41,760
the release
 

3997
01:20:41,760 --> 01:20:43,910
the release
that x plus x plus one has to stay

3998
01:20:43,910 --> 01:20:43,920
that x plus x plus one has to stay
 

3999
01:20:43,920 --> 01:20:45,830
that x plus x plus one has to stay
before you know this particular memory

4000
01:20:45,830 --> 01:20:45,840
before you know this particular memory
 

4001
01:20:45,840 --> 01:20:47,430
before you know this particular memory
synchronization point

4002
01:20:47,430 --> 01:20:47,440
synchronization point
 

4003
01:20:47,440 --> 01:20:49,590
synchronization point
and so it will not be there will be no

4004
01:20:49,590 --> 01:20:49,600
and so it will not be there will be no
 

4005
01:20:49,600 --> 01:20:50,870
and so it will not be there will be no
trouble uh

4006
01:20:50,870 --> 01:20:50,880
trouble uh
 

4007
01:20:50,880 --> 01:20:53,590
trouble uh
with uh memory ordering so this is the

4008
01:20:53,590 --> 01:20:53,600
with uh memory ordering so this is the
 

4009
01:20:53,600 --> 01:20:54,149
with uh memory ordering so this is the
reason

4010
01:20:54,149 --> 01:20:54,159
reason
 

4011
01:20:54,159 --> 01:20:56,790
reason
why sync synchronizes there uh both in

4012
01:20:56,790 --> 01:20:56,800
why sync synchronizes there uh both in
 

4013
01:20:56,800 --> 01:20:57,270
why sync synchronizes there uh both in
the

4014
01:20:57,270 --> 01:20:57,280
the
 

4015
01:20:57,280 --> 01:20:58,950
the
release and also there's one in the

4016
01:20:58,950 --> 01:20:58,960
release and also there's one in the
 

4017
01:20:58,960 --> 01:21:03,350
release and also there's one in the
acquire

4018
01:21:03,350 --> 01:21:03,360

 

4019
01:21:03,360 --> 01:21:06,390

does that make sense

4020
01:21:06,390 --> 01:21:06,400

 

4021
01:21:06,400 --> 01:21:09,990

i have a question um

4022
01:21:09,990 --> 01:21:10,000
i have a question um
 

4023
01:21:10,000 --> 01:21:14,229
i have a question um
is it is it by convention that the start

4024
01:21:14,229 --> 01:21:14,239
is it is it by convention that the start
 

4025
01:21:14,239 --> 01:21:17,270
is it is it by convention that the start
of

4026
01:21:17,270 --> 01:21:17,280

 

4027
01:21:17,280 --> 01:21:20,550

the port so i guess i guess

4028
01:21:20,550 --> 01:21:20,560
the port so i guess i guess
 

4029
01:21:20,560 --> 01:21:23,030
the port so i guess i guess
the compiler could figure out that there

4030
01:21:23,030 --> 01:21:23,040
the compiler could figure out that there
 

4031
01:21:23,040 --> 01:21:23,750
the compiler could figure out that there
is an

4032
01:21:23,750 --> 01:21:23,760
is an
 

4033
01:21:23,760 --> 01:21:25,990
is an
instruction before the lock is even

4034
01:21:25,990 --> 01:21:26,000
instruction before the lock is even
 

4035
01:21:26,000 --> 01:21:26,790
instruction before the lock is even
acquired

4036
01:21:26,790 --> 01:21:26,800
acquired
 

4037
01:21:26,800 --> 01:21:29,270
acquired
and that it can be just as well moved

4038
01:21:29,270 --> 01:21:29,280
and that it can be just as well moved
 

4039
01:21:29,280 --> 01:21:31,510
and that it can be just as well moved
after the lock is released

4040
01:21:31,510 --> 01:21:31,520
after the lock is released
 

4041
01:21:31,520 --> 01:21:35,110
after the lock is released
um can that happen or will it

4042
01:21:35,110 --> 01:21:35,120
um can that happen or will it
 

4043
01:21:35,120 --> 01:21:37,990
um can that happen or will it
encounter the barrier and see that we'll

4044
01:21:37,990 --> 01:21:38,000
encounter the barrier and see that we'll
 

4045
01:21:38,000 --> 01:21:39,350
encounter the barrier and see that we'll
see you know in this case

4046
01:21:39,350 --> 01:21:39,360
see you know in this case
 

4047
01:21:39,360 --> 01:21:40,870
see you know in this case
a choir has a barrier and releases a

4048
01:21:40,870 --> 01:21:40,880
a choir has a barrier and releases a
 

4049
01:21:40,880 --> 01:21:42,790
a choir has a barrier and releases a
barrier so anything that happened before

4050
01:21:42,790 --> 01:21:42,800
barrier so anything that happened before
 

4051
01:21:42,800 --> 01:21:45,189
barrier so anything that happened before
locked in sector one will happen before

4052
01:21:45,189 --> 01:21:45,199
locked in sector one will happen before
 

4053
01:21:45,199 --> 01:21:47,590
locked in sector one will happen before
that it will never pass that instruction

4054
01:21:47,590 --> 01:21:47,600
that it will never pass that instruction
 

4055
01:21:47,600 --> 01:21:50,310
that it will never pass that instruction
so this is a barrier so if you will

4056
01:21:50,310 --> 01:21:50,320
so this is a barrier so if you will
 

4057
01:21:50,320 --> 01:21:52,950
so this is a barrier so if you will
this is barrier one and this is barrier

4058
01:21:52,950 --> 01:21:52,960
this is barrier one and this is barrier
 

4059
01:21:52,960 --> 01:21:55,430
this is barrier one and this is barrier
two

4060
01:21:55,430 --> 01:21:55,440

 

4061
01:21:55,440 --> 01:21:56,950

and so that means that any instructions

4062
01:21:56,950 --> 01:21:56,960
and so that means that any instructions
 

4063
01:21:56,960 --> 01:21:59,030
and so that means that any instructions
before here stay here

4064
01:21:59,030 --> 01:21:59,040
before here stay here
 

4065
01:21:59,040 --> 01:22:01,350
before here stay here
any structure in between will happen

4066
01:22:01,350 --> 01:22:01,360
any structure in between will happen
 

4067
01:22:01,360 --> 01:22:03,030
any structure in between will happen
between the two between between required

4068
01:22:03,030 --> 01:22:03,040
between the two between between required
 

4069
01:22:03,040 --> 01:22:04,790
between the two between between required
release and then instruction after

4070
01:22:04,790 --> 01:22:04,800
release and then instruction after
 

4071
01:22:04,800 --> 01:22:08,830
release and then instruction after
it will stay after the release

4072
01:22:08,830 --> 01:22:08,840

 

4073
01:22:08,840 --> 01:22:11,110

okay

4074
01:22:11,110 --> 01:22:11,120
okay
 

4075
01:22:11,120 --> 01:22:14,149
okay
okay okay so i'm running uh you know

4076
01:22:14,149 --> 01:22:14,159
okay okay so i'm running uh you know
 

4077
01:22:14,159 --> 01:22:15,430
okay okay so i'm running uh you know
close to the end

4078
01:22:15,430 --> 01:22:15,440
close to the end
 

4079
01:22:15,440 --> 01:22:18,470
close to the end
so let me just actually uh

4080
01:22:18,470 --> 01:22:18,480
so let me just actually uh
 

4081
01:22:18,480 --> 01:22:27,750
so let me just actually uh
wrap up here

4082
01:22:27,750 --> 01:22:27,760

 

4083
01:22:27,760 --> 01:22:30,790

so uh so locks you know

4084
01:22:30,790 --> 01:22:30,800
so uh so locks you know
 

4085
01:22:30,800 --> 01:22:40,310
so uh so locks you know
blocks are good for correctness

4086
01:22:40,310 --> 01:22:40,320

 

4087
01:22:40,320 --> 01:22:47,430

uh but can be bad for performance

4088
01:22:47,430 --> 01:22:47,440

 

4089
01:22:47,440 --> 01:22:49,110

uh which is sort of a bummer correct

4090
01:22:49,110 --> 01:22:49,120
uh which is sort of a bummer correct
 

4091
01:22:49,120 --> 01:22:50,790
uh which is sort of a bummer correct
because one reason we actually

4092
01:22:50,790 --> 01:22:50,800
because one reason we actually
 

4093
01:22:50,800 --> 01:22:52,310
because one reason we actually
you know got into locks is basically to

4094
01:22:52,310 --> 01:22:52,320
you know got into locks is basically to
 

4095
01:22:52,320 --> 01:22:54,550
you know got into locks is basically to
get correctness during aerial execution

4096
01:22:54,550 --> 01:22:54,560
get correctness during aerial execution
 

4097
01:22:54,560 --> 01:22:56,950
get correctness during aerial execution
uh but the locks actually limit parallel

4098
01:22:56,950 --> 01:22:56,960
uh but the locks actually limit parallel
 

4099
01:22:56,960 --> 01:23:00,470
uh but the locks actually limit parallel
uh execution so that's one

4100
01:23:00,470 --> 01:23:00,480
uh execution so that's one
 

4101
01:23:00,480 --> 01:23:05,430
uh execution so that's one
and two locks complicate

4102
01:23:05,430 --> 01:23:05,440

 

4103
01:23:05,440 --> 01:23:08,390

uh programming and you will experience

4104
01:23:08,390 --> 01:23:08,400
uh programming and you will experience
 

4105
01:23:08,400 --> 01:23:09,590
uh programming and you will experience
that in some of the labs that we're

4106
01:23:09,590 --> 01:23:09,600
that in some of the labs that we're
 

4107
01:23:09,600 --> 01:23:11,350
that in some of the labs that we're
going to be doing in fact from now on

4108
01:23:11,350 --> 01:23:11,360
going to be doing in fact from now on
 

4109
01:23:11,360 --> 01:23:11,830
going to be doing in fact from now on
we'll see

4110
01:23:11,830 --> 01:23:11,840
we'll see
 

4111
01:23:11,840 --> 01:23:14,149
we'll see
locks showing up all the time and that

4112
01:23:14,149 --> 01:23:14,159
locks showing up all the time and that
 

4113
01:23:14,159 --> 01:23:15,189
locks showing up all the time and that
will give us uh

4114
01:23:15,189 --> 01:23:15,199
will give us uh
 

4115
01:23:15,199 --> 01:23:17,830
will give us uh
you know at least you know uh some

4116
01:23:17,830 --> 01:23:17,840
you know at least you know uh some
 

4117
01:23:17,840 --> 01:23:18,709
you know at least you know uh some
thought you know it's going to be

4118
01:23:18,709 --> 01:23:18,719
thought you know it's going to be
 

4119
01:23:18,719 --> 01:23:20,310
thought you know it's going to be
necessary to understand like why the

4120
01:23:20,310 --> 01:23:20,320
necessary to understand like why the
 

4121
01:23:20,320 --> 01:23:21,750
necessary to understand like why the
locks are there and you know what they

4122
01:23:21,750 --> 01:23:21,760
locks are there and you know what they
 

4123
01:23:21,760 --> 01:23:22,629
locks are there and you know what they
protect

4124
01:23:22,629 --> 01:23:22,639
protect
 

4125
01:23:22,639 --> 01:23:24,870
protect
um and but they're sort of inherent uh

4126
01:23:24,870 --> 01:23:24,880
um and but they're sort of inherent uh
 

4127
01:23:24,880 --> 01:23:26,709
um and but they're sort of inherent uh
if you didn't do parallel programming

4128
01:23:26,709 --> 01:23:26,719
if you didn't do parallel programming
 

4129
01:23:26,719 --> 01:23:30,629
if you didn't do parallel programming
uh the you know you need to use locks

4130
01:23:30,629 --> 01:23:30,639
uh the you know you need to use locks
 

4131
01:23:30,639 --> 01:23:32,550
uh the you know you need to use locks
and so you know if you want to avoid the

4132
01:23:32,550 --> 01:23:32,560
and so you know if you want to avoid the
 

4133
01:23:32,560 --> 01:23:34,470
and so you know if you want to avoid the
complications due to locks is you know

4134
01:23:34,470 --> 01:23:34,480
complications due to locks is you know
 

4135
01:23:34,480 --> 01:23:36,070
complications due to locks is you know
the couple things you could do you know

4136
01:23:36,070 --> 01:23:36,080
the couple things you could do you know
 

4137
01:23:36,080 --> 01:23:42,790
the couple things you could do you know
don't share if you don't have to

4138
01:23:42,790 --> 01:23:42,800

 

4139
01:23:42,800 --> 01:23:46,390

if you don't have shared data structures

4140
01:23:46,390 --> 01:23:46,400

 

4141
01:23:46,400 --> 01:23:48,709

these race conditions cannot happen uh

4142
01:23:48,709 --> 01:23:48,719
these race conditions cannot happen uh
 

4143
01:23:48,719 --> 01:23:49,590
these race conditions cannot happen uh
and so there

4144
01:23:49,590 --> 01:23:49,600
and so there
 

4145
01:23:49,600 --> 01:23:51,669
and so there
and so you you don't need locks and so

4146
01:23:51,669 --> 01:23:51,679
and so you you don't need locks and so
 

4147
01:23:51,679 --> 01:23:52,709
and so you you don't need locks and so
you don't need this complicated

4148
01:23:52,709 --> 01:23:52,719
you don't need this complicated
 

4149
01:23:52,719 --> 01:23:53,990
you don't need this complicated
programming

4150
01:23:53,990 --> 01:23:54,000
programming
 

4151
01:23:54,000 --> 01:23:55,669
programming
uh but you know typically you will have

4152
01:23:55,669 --> 01:23:55,679
uh but you know typically you will have
 

4153
01:23:55,679 --> 01:23:57,430
uh but you know typically you will have
some shared data structures you will do

4154
01:23:57,430 --> 01:23:57,440
some shared data structures you will do
 

4155
01:23:57,440 --> 01:23:59,990
some shared data structures you will do
uh you will need locks and i think the

4156
01:23:59,990 --> 01:24:00,000
uh you will need locks and i think the
 

4157
01:24:00,000 --> 01:24:04,070
uh you will need locks and i think the
thing to do is start with coarse grained

4158
01:24:04,070 --> 01:24:04,080

 

4159
01:24:04,080 --> 01:24:07,590

and then move to firing grain

4160
01:24:07,590 --> 01:24:07,600
and then move to firing grain
 

4161
01:24:07,600 --> 01:24:09,430
and then move to firing grain
if necessary based on you know

4162
01:24:09,430 --> 01:24:09,440
if necessary based on you know
 

4163
01:24:09,440 --> 01:24:11,189
if necessary based on you know
measurements you want to determine

4164
01:24:11,189 --> 01:24:11,199
measurements you want to determine
 

4165
01:24:11,199 --> 01:24:12,310
measurements you want to determine
make sure that the lock is actually

4166
01:24:12,310 --> 01:24:12,320
make sure that the lock is actually
 

4167
01:24:12,320 --> 01:24:13,750
make sure that the lock is actually
contended you know before you actually

4168
01:24:13,750 --> 01:24:13,760
contended you know before you actually
 

4169
01:24:13,760 --> 01:24:15,350
contended you know before you actually
start redesigning

4170
01:24:15,350 --> 01:24:15,360
start redesigning
 

4171
01:24:15,360 --> 01:24:17,590
start redesigning
and finally you know use a race detector

4172
01:24:17,590 --> 01:24:17,600
and finally you know use a race detector
 

4173
01:24:17,600 --> 01:24:20,310
and finally you know use a race detector
to

4174
01:24:20,310 --> 01:24:20,320

 

4175
01:24:20,320 --> 01:24:21,590

you know one of these race detector

4176
01:24:21,590 --> 01:24:21,600
you know one of these race detector
 

4177
01:24:21,600 --> 01:24:23,669
you know one of these race detector
tools to actually find

4178
01:24:23,669 --> 01:24:23,679
tools to actually find
 

4179
01:24:23,679 --> 01:24:25,910
tools to actually find
uh problems uh or race conditions

4180
01:24:25,910 --> 01:24:25,920
uh problems uh or race conditions
 

4181
01:24:25,920 --> 01:24:26,950
uh problems uh or race conditions
because you know you put the locks in

4182
01:24:26,950 --> 01:24:26,960
because you know you put the locks in
 

4183
01:24:26,960 --> 01:24:28,229
because you know you put the locks in
the wrong or you put the acquiring the

4184
01:24:28,229 --> 01:24:28,239
the wrong or you put the acquiring the
 

4185
01:24:28,239 --> 01:24:29,750
the wrong or you put the acquiring the
releases in the wrong place and in fact

4186
01:24:29,750 --> 01:24:29,760
releases in the wrong place and in fact
 

4187
01:24:29,760 --> 01:24:30,629
releases in the wrong place and in fact
you know you still have

4188
01:24:30,629 --> 01:24:30,639
you know you still have
 

4189
01:24:30,639 --> 01:24:33,830
you know you still have
uh races okay so this is a quick

4190
01:24:33,830 --> 01:24:33,840
uh races okay so this is a quick
 

4191
01:24:33,840 --> 01:24:35,350
uh races okay so this is a quick
introduction to logs uh we're going to

4192
01:24:35,350 --> 01:24:35,360
introduction to logs uh we're going to
 

4193
01:24:35,360 --> 01:24:35,669
introduction to logs uh we're going to
talk

4194
01:24:35,669 --> 01:24:35,679
talk
 

4195
01:24:35,679 --> 01:24:37,830
talk
a lot more about locks in the basically

4196
01:24:37,830 --> 01:24:37,840
a lot more about locks in the basically
 

4197
01:24:37,840 --> 01:24:38,870
a lot more about locks in the basically
for the rest of the semester that will

4198
01:24:38,870 --> 01:24:38,880
for the rest of the semester that will
 

4199
01:24:38,880 --> 01:24:40,390
for the rest of the semester that will
show up and we'll talk a little bit more

4200
01:24:40,390 --> 01:24:40,400
show up and we'll talk a little bit more
 

4201
01:24:40,400 --> 01:24:42,470
show up and we'll talk a little bit more
about lock free program and the end

4202
01:24:42,470 --> 01:24:42,480
about lock free program and the end
 

4203
01:24:42,480 --> 01:24:45,510
about lock free program and the end
and see how that is done in in kernels

4204
01:24:45,510 --> 01:24:45,520
and see how that is done in in kernels
 

4205
01:24:45,520 --> 01:24:48,310
and see how that is done in in kernels
okay so let me stop here so that anybody

4206
01:24:48,310 --> 01:24:48,320
okay so let me stop here so that anybody
 

4207
01:24:48,320 --> 01:24:50,229
okay so let me stop here so that anybody
who has to go to somewhere else can go

4208
01:24:50,229 --> 01:24:50,239
who has to go to somewhere else can go
 

4209
01:24:50,239 --> 01:24:52,390
who has to go to somewhere else can go
but if you have any more questions

4210
01:24:52,390 --> 01:24:52,400
but if you have any more questions
 

4211
01:24:52,400 --> 01:24:54,709
but if you have any more questions
please feel free to ask them

4212
01:24:54,709 --> 01:24:54,719
please feel free to ask them
 

4213
01:24:54,719 --> 01:24:57,350
please feel free to ask them
we have a question in the chat isn't the

4214
01:24:57,350 --> 01:24:57,360
we have a question in the chat isn't the
 

4215
01:24:57,360 --> 01:24:59,189
we have a question in the chat isn't the
fence instruction unnecessary because

4216
01:24:59,189 --> 01:24:59,199
fence instruction unnecessary because
 

4217
01:24:59,199 --> 01:24:59,430
fence instruction unnecessary because
the

4218
01:24:59,430 --> 01:24:59,440
the
 

4219
01:24:59,440 --> 01:25:01,350
the
amo swap instruction can have the

4220
01:25:01,350 --> 01:25:01,360
amo swap instruction can have the
 

4221
01:25:01,360 --> 01:25:03,990
amo swap instruction can have the
acquire release ordering

4222
01:25:03,990 --> 01:25:04,000
acquire release ordering
 

4223
01:25:04,000 --> 01:25:07,110
acquire release ordering
uh yeah uh okay so uh okay

4224
01:25:07,110 --> 01:25:07,120
uh yeah uh okay so uh okay
 

4225
01:25:07,120 --> 01:25:09,669
uh yeah uh okay so uh okay
so the two things uh there's the the the

4226
01:25:09,669 --> 01:25:09,679
so the two things uh there's the the the
 

4227
01:25:09,679 --> 01:25:11,189
so the two things uh there's the the the
the sync instructions there both for the

4228
01:25:11,189 --> 01:25:11,199
the sync instructions there both for the
 

4229
01:25:11,199 --> 01:25:24,870
the sync instructions there both for the
compiler and for the hardware

4230
01:25:24,870 --> 01:25:24,880

 

4231
01:25:24,880 --> 01:25:26,709

yeah i'm jumping off uh to start office

4232
01:25:26,709 --> 01:25:26,719
yeah i'm jumping off uh to start office
 

4233
01:25:26,719 --> 01:25:27,750
yeah i'm jumping off uh to start office
hours but i think there's still more

4234
01:25:27,750 --> 01:25:27,760
hours but i think there's still more
 

4235
01:25:27,760 --> 01:25:29,030
hours but i think there's still more
questions

4236
01:25:29,030 --> 01:25:29,040
questions
 

4237
01:25:29,040 --> 01:25:31,430
questions
how do you do it for the compiler only

4238
01:25:31,430 --> 01:25:31,440
how do you do it for the compiler only
 

4239
01:25:31,440 --> 01:25:32,229
how do you do it for the compiler only
uh

4240
01:25:32,229 --> 01:25:32,239
uh
 

4241
01:25:32,239 --> 01:25:34,229
uh
the the the compiler knows for which

4242
01:25:34,229 --> 01:25:34,239
the the the compiler knows for which
 

4243
01:25:34,239 --> 01:25:35,750
the the the compiler knows for which
architecture is compiling

4244
01:25:35,750 --> 01:25:35,760
architecture is compiling
 

4245
01:25:35,760 --> 01:25:37,270
architecture is compiling
and so it will know whether it actually

4246
01:25:37,270 --> 01:25:37,280
and so it will know whether it actually
 

4247
01:25:37,280 --> 01:25:39,510
and so it will know whether it actually
has to insert the appropriate fences you

4248
01:25:39,510 --> 01:25:39,520
has to insert the appropriate fences you
 

4249
01:25:39,520 --> 01:25:40,229
has to insert the appropriate fences you
know for

4250
01:25:40,229 --> 01:25:40,239
know for
 

4251
01:25:40,239 --> 01:25:41,669
know for
whatever architecture it's running on

4252
01:25:41,669 --> 01:25:41,679
whatever architecture it's running on
 

4253
01:25:41,679 --> 01:25:43,510
whatever architecture it's running on
and whatever memory consistency model it

4254
01:25:43,510 --> 01:25:43,520
and whatever memory consistency model it
 

4255
01:25:43,520 --> 01:25:44,709
and whatever memory consistency model it
has

4256
01:25:44,709 --> 01:25:44,719
has
 

4257
01:25:44,719 --> 01:25:45,830
has
so this gets in a little bit more

4258
01:25:45,830 --> 01:25:45,840
so this gets in a little bit more
 

4259
01:25:45,840 --> 01:25:47,270
so this gets in a little bit more
complicated discussion is that every

4260
01:25:47,270 --> 01:25:47,280
complicated discussion is that every
 

4261
01:25:47,280 --> 01:25:48,310
complicated discussion is that every
piece of hardware has

4262
01:25:48,310 --> 01:25:48,320
piece of hardware has
 

4263
01:25:48,320 --> 01:25:51,590
piece of hardware has
a memory model and the compiler has to

4264
01:25:51,590 --> 01:25:51,600
a memory model and the compiler has to
 

4265
01:25:51,600 --> 01:25:52,550
a memory model and the compiler has to
decide

4266
01:25:52,550 --> 01:25:52,560
decide
 

4267
01:25:52,560 --> 01:25:54,870
decide
uh you know given the memory model for

4268
01:25:54,870 --> 01:25:54,880
uh you know given the memory model for
 

4269
01:25:54,880 --> 01:25:56,229
uh you know given the memory model for
that particular architecture what

4270
01:25:56,229 --> 01:25:56,239
that particular architecture what
 

4271
01:25:56,239 --> 01:25:59,270
that particular architecture what
actually it can do what it cannot do

4272
01:25:59,270 --> 01:25:59,280
actually it can do what it cannot do
 

4273
01:25:59,280 --> 01:26:01,830
actually it can do what it cannot do
and i guess my question was that like

4274
01:26:01,830 --> 01:26:01,840
and i guess my question was that like
 

4275
01:26:01,840 --> 01:26:03,430
and i guess my question was that like
defense instruction only becomes

4276
01:26:03,430 --> 01:26:03,440
defense instruction only becomes
 

4277
01:26:03,440 --> 01:26:06,790
defense instruction only becomes
unnecessary if you call ammo swap

4278
01:26:06,790 --> 01:26:06,800
unnecessary if you call ammo swap
 

4279
01:26:06,800 --> 01:26:10,470
unnecessary if you call ammo swap
like w dot release

4280
01:26:10,470 --> 01:26:10,480
like w dot release
 

4281
01:26:10,480 --> 01:26:14,470
like w dot release
and uh

4282
01:26:14,470 --> 01:26:14,480

 

4283
01:26:14,480 --> 01:26:17,990

like putting in the the sync

4284
01:26:17,990 --> 01:26:18,000
like putting in the the sync
 

4285
01:26:18,000 --> 01:26:20,390
like putting in the the sync
and there that will sync with the you

4286
01:26:20,390 --> 01:26:20,400
and there that will sync with the you
 

4287
01:26:20,400 --> 01:26:21,590
and there that will sync with the you
know the compiler

4288
01:26:21,590 --> 01:26:21,600
know the compiler
 

4289
01:26:21,600 --> 01:26:25,350
know the compiler
ordering and then the um

4290
01:26:25,350 --> 01:26:25,360
ordering and then the um
 

4291
01:26:25,360 --> 01:26:27,510
ordering and then the um
the memory ordering and the out of

4292
01:26:27,510 --> 01:26:27,520
the memory ordering and the out of
 

4293
01:26:27,520 --> 01:26:28,709
the memory ordering and the out of
ordering

4294
01:26:28,709 --> 01:26:28,719
ordering
 

4295
01:26:28,719 --> 01:26:30,229
ordering
yeah machinery using the fence

4296
01:26:30,229 --> 01:26:30,239
yeah machinery using the fence
 

4297
01:26:30,239 --> 01:26:31,510
yeah machinery using the fence
instruction as well the fence

4298
01:26:31,510 --> 01:26:31,520
instruction as well the fence
 

4299
01:26:31,520 --> 01:26:33,270
instruction as well the fence
instruction is only unnecessary in the

4300
01:26:33,270 --> 01:26:33,280
instruction is only unnecessary in the
 

4301
01:26:33,280 --> 01:26:34,390
instruction is only unnecessary in the
case that you do

4302
01:26:34,390 --> 01:26:34,400
case that you do
 

4303
01:26:34,400 --> 01:26:36,390
case that you do
dot rl so it seems like it wouldn't

4304
01:26:36,390 --> 01:26:36,400
dot rl so it seems like it wouldn't
 

4305
01:26:36,400 --> 01:26:38,629
dot rl so it seems like it wouldn't
detect that so how would you do it

4306
01:26:38,629 --> 01:26:38,639
detect that so how would you do it
 

4307
01:26:38,639 --> 01:26:41,669
detect that so how would you do it
so the compiler enforces the ordering on

4308
01:26:41,669 --> 01:26:41,679
so the compiler enforces the ordering on
 

4309
01:26:41,679 --> 01:26:42,790
so the compiler enforces the ordering on
its end

4310
01:26:42,790 --> 01:26:42,800
its end
 

4311
01:26:42,800 --> 01:26:45,510
its end
but you already cover it using the

4312
01:26:45,510 --> 01:26:45,520
but you already cover it using the
 

4313
01:26:45,520 --> 01:26:46,390
but you already cover it using the
amazon yeah

4314
01:26:46,390 --> 01:26:46,400
amazon yeah
 

4315
01:26:46,400 --> 01:26:49,189
amazon yeah
so like uh if you uh it's a very good

4316
01:26:49,189 --> 01:26:49,199
so like uh if you uh it's a very good
 

4317
01:26:49,199 --> 01:26:50,070
so like uh if you uh it's a very good
question uh

4318
01:26:50,070 --> 01:26:50,080
question uh
 

4319
01:26:50,080 --> 01:26:51,750
question uh
and you know some more sophisticated

4320
01:26:51,750 --> 01:26:51,760
and you know some more sophisticated
 

4321
01:26:51,760 --> 01:26:53,350
and you know some more sophisticated
acquiring these implementation would be

4322
01:26:53,350 --> 01:26:53,360
acquiring these implementation would be
 

4323
01:26:53,360 --> 01:26:57,110
acquiring these implementation would be
uh we more like specialized uh

4324
01:26:57,110 --> 01:26:57,120
uh we more like specialized uh
 

4325
01:26:57,120 --> 01:26:58,709
uh we more like specialized uh
uh acquire a release implementation or

4326
01:26:58,709 --> 01:26:58,719
uh acquire a release implementation or
 

4327
01:26:58,719 --> 01:26:59,990
uh acquire a release implementation or
lease implementation for a risk fight we

4328
01:26:59,990 --> 01:27:00,000
lease implementation for a risk fight we
 

4329
01:27:00,000 --> 01:27:01,430
lease implementation for a risk fight we
will probably do more sophisticated

4330
01:27:01,430 --> 01:27:01,440
will probably do more sophisticated
 

4331
01:27:01,440 --> 01:27:02,950
will probably do more sophisticated
things than we do where we pretty of

4332
01:27:02,950 --> 01:27:02,960
things than we do where we pretty of
 

4333
01:27:02,960 --> 01:27:04,629
things than we do where we pretty of
course grain by just issuing defense

4334
01:27:04,629 --> 01:27:04,639
course grain by just issuing defense
 

4335
01:27:04,639 --> 01:27:05,750
course grain by just issuing defense
instruction

4336
01:27:05,750 --> 01:27:05,760
instruction
 

4337
01:27:05,760 --> 01:27:09,189
instruction
um the uh the

4338
01:27:09,189 --> 01:27:09,199
um the uh the
 

4339
01:27:09,199 --> 01:27:12,390
um the uh the
but it's slightly complicated um and so

4340
01:27:12,390 --> 01:27:12,400
but it's slightly complicated um and so
 

4341
01:27:12,400 --> 01:27:14,550
but it's slightly complicated um and so
if you uh if you're interested in this

4342
01:27:14,550 --> 01:27:14,560
if you uh if you're interested in this
 

4343
01:27:14,560 --> 01:27:15,510
if you uh if you're interested in this
uh

4344
01:27:15,510 --> 01:27:15,520
uh
 

4345
01:27:15,520 --> 01:27:19,110
uh
the memory model for the risk drive is a

4346
01:27:19,110 --> 01:27:19,120
the memory model for the risk drive is a
 

4347
01:27:19,120 --> 01:27:20,709
the memory model for the risk drive is a
reasonably complicated so if you look at

4348
01:27:20,709 --> 01:27:20,719
reasonably complicated so if you look at
 

4349
01:27:20,719 --> 01:27:22,390
reasonably complicated so if you look at
the instruction

4350
01:27:22,390 --> 01:27:22,400
the instruction
 

4351
01:27:22,400 --> 01:27:25,030
the instruction
manual for the unprevious instructions

4352
01:27:25,030 --> 01:27:25,040
manual for the unprevious instructions
 

4353
01:27:25,040 --> 01:27:26,550
manual for the unprevious instructions
there's a whole chapter

4354
01:27:26,550 --> 01:27:26,560
there's a whole chapter
 

4355
01:27:26,560 --> 01:27:28,790
there's a whole chapter
dedicated you know to memory ordering

4356
01:27:28,790 --> 01:27:28,800
dedicated you know to memory ordering
 

4357
01:27:28,800 --> 01:27:30,310
dedicated you know to memory ordering
and tells you what they have to what the

4358
01:27:30,310 --> 01:27:30,320
and tells you what they have to what the
 

4359
01:27:30,320 --> 01:27:33,270
and tells you what they have to what the
compiler should do

4360
01:27:33,270 --> 01:27:33,280
compiler should do
 

4361
01:27:33,280 --> 01:27:37,669
compiler should do
in this particular case

4362
01:27:37,669 --> 01:27:37,679

 

4363
01:27:37,679 --> 01:27:39,590

so you're saying the compiler would pick

4364
01:27:39,590 --> 01:27:39,600
so you're saying the compiler would pick
 

4365
01:27:39,600 --> 01:27:41,750
so you're saying the compiler would pick
up on the fact that we just put that

4366
01:27:41,750 --> 01:27:41,760
up on the fact that we just put that
 

4367
01:27:41,760 --> 01:27:44,070
up on the fact that we just put that
assembly instruction inside of there and

4368
01:27:44,070 --> 01:27:44,080
assembly instruction inside of there and
 

4369
01:27:44,080 --> 01:27:45,270
assembly instruction inside of there and
it wouldn't reorder

4370
01:27:45,270 --> 01:27:45,280
it wouldn't reorder
 

4371
01:27:45,280 --> 01:27:47,189
it wouldn't reorder
any of the memory accesses on its own

4372
01:27:47,189 --> 01:27:47,199
any of the memory accesses on its own
 

4373
01:27:47,199 --> 01:27:48,550
any of the memory accesses on its own
sorry the the

4374
01:27:48,550 --> 01:27:48,560
sorry the the
 

4375
01:27:48,560 --> 01:27:50,790
sorry the the
the synchronize this this synchronized

4376
01:27:50,790 --> 01:27:50,800
the synchronize this this synchronized
 

4377
01:27:50,800 --> 01:27:52,550
the synchronize this this synchronized
library function is a library function

4378
01:27:52,550 --> 01:27:52,560
library function is a library function
 

4379
01:27:52,560 --> 01:27:53,750
library function is a library function
right and can be implemented in

4380
01:27:53,750 --> 01:27:53,760
right and can be implemented in
 

4381
01:27:53,760 --> 01:27:55,030
right and can be implemented in
different ways

4382
01:27:55,030 --> 01:27:55,040
different ways
 

4383
01:27:55,040 --> 01:27:56,709
different ways
uh and this is one particular

4384
01:27:56,709 --> 01:27:56,719
uh and this is one particular
 

4385
01:27:56,719 --> 01:27:58,390
uh and this is one particular
implementation

4386
01:27:58,390 --> 01:27:58,400
implementation
 

4387
01:27:58,400 --> 01:28:00,149
implementation
and the library function is provided by

4388
01:28:00,149 --> 01:28:00,159
and the library function is provided by
 

4389
01:28:00,159 --> 01:28:02,310
and the library function is provided by
the compiler

4390
01:28:02,310 --> 01:28:02,320
the compiler
 

4391
01:28:02,320 --> 01:28:04,310
the compiler
so uh but is there like the option for

4392
01:28:04,310 --> 01:28:04,320
so uh but is there like the option for
 

4393
01:28:04,320 --> 01:28:05,510
so uh but is there like the option for
the compiler to do

4394
01:28:05,510 --> 01:28:05,520
the compiler to do
 

4395
01:28:05,520 --> 01:28:08,070
the compiler to do
optimization where it itself moves the

4396
01:28:08,070 --> 01:28:08,080
optimization where it itself moves the
 

4397
01:28:08,080 --> 01:28:10,470
optimization where it itself moves the
loads and stores around

4398
01:28:10,470 --> 01:28:10,480
loads and stores around
 

4399
01:28:10,480 --> 01:28:12,950
loads and stores around
uh yes compilers do so how do you

4400
01:28:12,950 --> 01:28:12,960
uh yes compilers do so how do you
 

4401
01:28:12,960 --> 01:28:13,510
uh yes compilers do so how do you
prevent

4402
01:28:13,510 --> 01:28:13,520
prevent
 

4403
01:28:13,520 --> 01:28:15,270
prevent
that without emitting defense

4404
01:28:15,270 --> 01:28:15,280
that without emitting defense
 

4405
01:28:15,280 --> 01:28:16,790
that without emitting defense
instruction that's what i was curious

4406
01:28:16,790 --> 01:28:16,800
instruction that's what i was curious
 

4407
01:28:16,800 --> 01:28:17,350
instruction that's what i was curious
about

4408
01:28:17,350 --> 01:28:17,360
about
 

4409
01:28:17,360 --> 01:28:20,870
about
i guess what i'm saying is that uh uh

4410
01:28:20,870 --> 01:28:20,880
i guess what i'm saying is that uh uh
 

4411
01:28:20,880 --> 01:28:22,870
i guess what i'm saying is that uh uh
maybe uh what i'm saying is that

4412
01:28:22,870 --> 01:28:22,880
maybe uh what i'm saying is that
 

4413
01:28:22,880 --> 01:28:24,470
maybe uh what i'm saying is that
basically the

4414
01:28:24,470 --> 01:28:24,480
basically the
 

4415
01:28:24,480 --> 01:28:26,310
basically the
this indication the sync synchronized

4416
01:28:26,310 --> 01:28:26,320
this indication the sync synchronized
 

4417
01:28:26,320 --> 01:28:27,590
this indication the sync synchronized
basically both tells the compiler and

4418
01:28:27,590 --> 01:28:27,600
basically both tells the compiler and
 

4419
01:28:27,600 --> 01:28:27,990
basically both tells the compiler and
hardware

4420
01:28:27,990 --> 01:28:28,000
hardware
 

4421
01:28:28,000 --> 01:28:28,950
hardware
but the compiler could actually

4422
01:28:28,950 --> 01:28:28,960
but the compiler could actually
 

4423
01:28:28,960 --> 01:28:30,390
but the compiler could actually
implement sync increment synchronized

4424
01:28:30,390 --> 01:28:30,400
implement sync increment synchronized
 

4425
01:28:30,400 --> 01:28:31,669
implement sync increment synchronized
differently it knows that they can't

4426
01:28:31,669 --> 01:28:31,679
differently it knows that they can't
 

4427
01:28:31,679 --> 01:28:32,709
differently it knows that they can't
move things around

4428
01:28:32,709 --> 01:28:32,719
move things around
 

4429
01:28:32,719 --> 01:28:34,149
move things around
but it doesn't have to issue a fence

4430
01:28:34,149 --> 01:28:34,159
but it doesn't have to issue a fence
 

4431
01:28:34,159 --> 01:28:36,149
but it doesn't have to issue a fence
instruction on the risk 5 it knew

4432
01:28:36,149 --> 01:28:36,159
instruction on the risk 5 it knew
 

4433
01:28:36,159 --> 01:28:37,669
instruction on the risk 5 it knew
that it was running in a particular way

4434
01:28:37,669 --> 01:28:37,679
that it was running in a particular way
 

4435
01:28:37,679 --> 01:28:41,990
that it was running in a particular way
on risk 5.

4436
01:28:41,990 --> 01:28:42,000
on risk 5.
 

4437
01:28:42,000 --> 01:28:45,510
on risk 5.
uh but isn't the risk five memory model

4438
01:28:45,510 --> 01:28:45,520
uh but isn't the risk five memory model
 

4439
01:28:45,520 --> 01:28:47,270
uh but isn't the risk five memory model
like loose enough to where the out of

4440
01:28:47,270 --> 01:28:47,280
like loose enough to where the out of
 

4441
01:28:47,280 --> 01:28:48,070
like loose enough to where the out of
order

4442
01:28:48,070 --> 01:28:48,080
order
 

4443
01:28:48,080 --> 01:28:50,950
order
machinery could reorganize stuff so you

4444
01:28:50,950 --> 01:28:50,960
machinery could reorganize stuff so you
 

4445
01:28:50,960 --> 01:28:53,750
machinery could reorganize stuff so you
do need like the acquire

4446
01:28:53,750 --> 01:28:53,760
do need like the acquire
 

4447
01:28:53,760 --> 01:28:55,750
do need like the acquire
like the whole point of having okay okay

4448
01:28:55,750 --> 01:28:55,760
like the whole point of having okay okay
 

4449
01:28:55,760 --> 01:28:57,270
like the whole point of having okay okay
so they're more

4450
01:28:57,270 --> 01:28:57,280
so they're more
 

4451
01:28:57,280 --> 01:29:00,709
so they're more
uh they're more complicated interfaces

4452
01:29:00,709 --> 01:29:00,719
uh they're more complicated interfaces
 

4453
01:29:00,719 --> 01:29:01,110
uh they're more complicated interfaces
than

4454
01:29:01,110 --> 01:29:01,120
than
 

4455
01:29:01,120 --> 01:29:04,470
than
seeing synchronized uh and which gives

4456
01:29:04,470 --> 01:29:04,480
seeing synchronized uh and which gives
 

4457
01:29:04,480 --> 01:29:05,590
seeing synchronized uh and which gives
the compiler writer

4458
01:29:05,590 --> 01:29:05,600
the compiler writer
 

4459
01:29:05,600 --> 01:29:07,189
the compiler writer
more it gives the programming more

4460
01:29:07,189 --> 01:29:07,199
more it gives the programming more
 

4461
01:29:07,199 --> 01:29:08,709
more it gives the programming more
freedom and will give the compiler

4462
01:29:08,709 --> 01:29:08,719
freedom and will give the compiler
 

4463
01:29:08,719 --> 01:29:10,629
freedom and will give the compiler
and sort decouple the compiler part and

4464
01:29:10,629 --> 01:29:10,639
and sort decouple the compiler part and
 

4465
01:29:10,639 --> 01:29:12,950
and sort decouple the compiler part and
the processor part

4466
01:29:12,950 --> 01:29:12,960
the processor part
 

4467
01:29:12,960 --> 01:29:14,390
the processor part
so for example i think there's a flag

4468
01:29:14,390 --> 01:29:14,400
so for example i think there's a flag
 

4469
01:29:14,400 --> 01:29:15,830
so for example i think there's a flag
that you can pass in you know to say

4470
01:29:15,830 --> 01:29:15,840
that you can pass in you know to say
 

4471
01:29:15,840 --> 01:29:17,430
that you can pass in you know to say
that this is a release consistent

4472
01:29:17,430 --> 01:29:17,440
that this is a release consistent
 

4473
01:29:17,440 --> 01:29:20,709
that this is a release consistent
uh synchronize uh

4474
01:29:20,709 --> 01:29:20,719
uh synchronize uh
 

4475
01:29:20,719 --> 01:29:22,470
uh synchronize uh
you know i i don't know the details

4476
01:29:22,470 --> 01:29:22,480
you know i i don't know the details
 

4477
01:29:22,480 --> 01:29:23,830
you know i i don't know the details
right of my head

4478
01:29:23,830 --> 01:29:23,840
right of my head
 

4479
01:29:23,840 --> 01:29:26,390
right of my head
but if you look into this this is sort

4480
01:29:26,390 --> 01:29:26,400
but if you look into this this is sort
 

4481
01:29:26,400 --> 01:29:27,669
but if you look into this this is sort
of the coarse grained interface and

4482
01:29:27,669 --> 01:29:27,679
of the coarse grained interface and
 

4483
01:29:27,679 --> 01:29:29,030
of the coarse grained interface and
there are more fine-grained interfaces

4484
01:29:29,030 --> 01:29:29,040
there are more fine-grained interfaces
 

4485
01:29:29,040 --> 01:29:31,270
there are more fine-grained interfaces
that give the programmer more control

4486
01:29:31,270 --> 01:29:31,280
that give the programmer more control
 

4487
01:29:31,280 --> 01:29:35,910
that give the programmer more control
okay thank you

4488
01:29:35,910 --> 01:29:35,920

 

4489
01:29:35,920 --> 01:29:39,350

i have a question one is um

4490
01:29:39,350 --> 01:29:39,360
i have a question one is um
 

4491
01:29:39,360 --> 01:29:42,310
i have a question one is um
how do you like for having multiple

4492
01:29:42,310 --> 01:29:42,320
how do you like for having multiple
 

4493
01:29:42,320 --> 01:29:43,350
how do you like for having multiple
threads on one

4494
01:29:43,350 --> 01:29:43,360
threads on one
 

4495
01:29:43,360 --> 01:29:45,750
threads on one
processor do you argue in roughly the

4496
01:29:45,750 --> 01:29:45,760
processor do you argue in roughly the
 

4497
01:29:45,760 --> 01:29:46,390
processor do you argue in roughly the
same way

4498
01:29:46,390 --> 01:29:46,400
same way
 

4499
01:29:46,400 --> 01:29:50,870
same way
as we did for multiple processors

4500
01:29:50,870 --> 01:29:50,880
as we did for multiple processors
 

4501
01:29:50,880 --> 01:29:54,390
as we did for multiple processors
uh so can you repeat that question just

4502
01:29:54,390 --> 01:29:54,400
uh so can you repeat that question just
 

4503
01:29:54,400 --> 01:29:56,149
uh so can you repeat that question just
to make sure i uh

4504
01:29:56,149 --> 01:29:56,159
to make sure i uh
 

4505
01:29:56,159 --> 01:29:59,189
to make sure i uh
um so we didn't i think i don't think we

4506
01:29:59,189 --> 01:29:59,199
um so we didn't i think i don't think we
 

4507
01:29:59,199 --> 01:30:01,750
um so we didn't i think i don't think we
really talked about multiple threads we

4508
01:30:01,750 --> 01:30:01,760
really talked about multiple threads we
 

4509
01:30:01,760 --> 01:30:04,790
really talked about multiple threads we
mostly talked about multiple cpus so

4510
01:30:04,790 --> 01:30:04,800
mostly talked about multiple cpus so
 

4511
01:30:04,800 --> 01:30:08,390
mostly talked about multiple cpus so
for multiple threads is the um i guess

4512
01:30:08,390 --> 01:30:08,400
for multiple threads is the um i guess
 

4513
01:30:08,400 --> 01:30:09,990
for multiple threads is the um i guess
the solution

4514
01:30:09,990 --> 01:30:10,000
the solution
 

4515
01:30:10,000 --> 01:30:13,189
the solution
the same as for when you have multiple

4516
01:30:13,189 --> 01:30:13,199
the same as for when you have multiple
 

4517
01:30:13,199 --> 01:30:14,470
the same as for when you have multiple
cpus like do you

4518
01:30:14,470 --> 01:30:14,480
cpus like do you
 

4519
01:30:14,480 --> 01:30:17,270
cpus like do you
have the same arguments there more or

4520
01:30:17,270 --> 01:30:17,280
have the same arguments there more or
 

4521
01:30:17,280 --> 01:30:17,830
have the same arguments there more or
less

4522
01:30:17,830 --> 01:30:17,840
less
 

4523
01:30:17,840 --> 01:30:19,669
less
uh at least conceptually is the right

4524
01:30:19,669 --> 01:30:19,679
uh at least conceptually is the right
 

4525
01:30:19,679 --> 01:30:21,350
uh at least conceptually is the right
way to think about it uh

4526
01:30:21,350 --> 01:30:21,360
way to think about it uh
 

4527
01:30:21,360 --> 01:30:23,430
way to think about it uh
so if you have multiple threads but only

4528
01:30:23,430 --> 01:30:23,440
so if you have multiple threads but only
 

4529
01:30:23,440 --> 01:30:24,870
so if you have multiple threads but only
one cpu

4530
01:30:24,870 --> 01:30:24,880
one cpu
 

4531
01:30:24,880 --> 01:30:26,870
one cpu
uh it's still the case that you want to

4532
01:30:26,870 --> 01:30:26,880
uh it's still the case that you want to
 

4533
01:30:26,880 --> 01:30:28,629
uh it's still the case that you want to
ensure that certain uh

4534
01:30:28,629 --> 01:30:28,639
ensure that certain uh
 

4535
01:30:28,639 --> 01:30:30,229
ensure that certain uh
kernel code sequences are executed

4536
01:30:30,229 --> 01:30:30,239
kernel code sequences are executed
 

4537
01:30:30,239 --> 01:30:32,390
kernel code sequences are executed
atomically

4538
01:30:32,390 --> 01:30:32,400
atomically
 

4539
01:30:32,400 --> 01:30:34,550
atomically
and so you still have to have a notion

4540
01:30:34,550 --> 01:30:34,560
and so you still have to have a notion
 

4541
01:30:34,560 --> 01:30:35,990
and so you still have to have a notion
of critical sections

4542
01:30:35,990 --> 01:30:36,000
of critical sections
 

4543
01:30:36,000 --> 01:30:39,030
of critical sections
uh you might not need locks or releases

4544
01:30:39,030 --> 01:30:39,040
uh you might not need locks or releases
 

4545
01:30:39,040 --> 01:30:40,950
uh you might not need locks or releases
explicitly but you do need a way of

4546
01:30:40,950 --> 01:30:40,960
explicitly but you do need a way of
 

4547
01:30:40,960 --> 01:30:42,709
explicitly but you do need a way of
turning on interrupts off and on in a

4548
01:30:42,709 --> 01:30:42,719
turning on interrupts off and on in a
 

4549
01:30:42,719 --> 01:30:44,870
turning on interrupts off and on in a
particular piece of code

4550
01:30:44,870 --> 01:30:44,880
particular piece of code
 

4551
01:30:44,880 --> 01:30:47,750
particular piece of code
so if you look at older operating system

4552
01:30:47,750 --> 01:30:47,760
so if you look at older operating system
 

4553
01:30:47,760 --> 01:30:49,830
so if you look at older operating system
kernels they typically don't have really

4554
01:30:49,830 --> 01:30:49,840
kernels they typically don't have really
 

4555
01:30:49,840 --> 01:30:51,270
kernels they typically don't have really
lock and acquire

4556
01:30:51,270 --> 01:30:51,280
lock and acquire
 

4557
01:30:51,280 --> 01:30:53,030
lock and acquire
uh in the kernel because they assume

4558
01:30:53,030 --> 01:30:53,040
uh in the kernel because they assume
 

4559
01:30:53,040 --> 01:30:54,790
uh in the kernel because they assume
they're running on a single processor

4560
01:30:54,790 --> 01:30:54,800
they're running on a single processor
 

4561
01:30:54,800 --> 01:30:56,470
they're running on a single processor
but they do have something like locks

4562
01:30:56,470 --> 01:30:56,480
but they do have something like locks
 

4563
01:30:56,480 --> 01:30:58,070
but they do have something like locks
you know to basically turn off

4564
01:30:58,070 --> 01:30:58,080
you know to basically turn off
 

4565
01:30:58,080 --> 01:31:03,590
you know to basically turn off
interrupts and interrupts on and off

4566
01:31:03,590 --> 01:31:03,600
interrupts and interrupts on and off
 

4567
01:31:03,600 --> 01:31:06,629
interrupts and interrupts on and off
okay i see um and my other question

4568
01:31:06,629 --> 01:31:06,639
okay i see um and my other question
 

4569
01:31:06,639 --> 01:31:09,990
okay i see um and my other question
was um actually on the slide with

4570
01:31:09,990 --> 01:31:10,000
was um actually on the slide with
 

4571
01:31:10,000 --> 01:31:13,189
was um actually on the slide with
um the yard picture

4572
01:31:13,189 --> 01:31:13,199
um the yard picture
 

4573
01:31:13,199 --> 01:31:17,830
um the yard picture
the buffer um

4574
01:31:17,830 --> 01:31:17,840
the buffer um
 

4575
01:31:17,840 --> 01:31:20,709
the buffer um
yeah is it yeah that one is it always

4576
01:31:20,709 --> 01:31:20,719
yeah is it yeah that one is it always
 

4577
01:31:20,719 --> 01:31:21,669
yeah is it yeah that one is it always
the case that

4578
01:31:21,669 --> 01:31:21,679
the case that
 

4579
01:31:21,679 --> 01:31:25,189
the case that
the read is going to be um like lagging

4580
01:31:25,189 --> 01:31:25,199
the read is going to be um like lagging
 

4581
01:31:25,199 --> 01:31:25,750
the read is going to be um like lagging
behind

4582
01:31:25,750 --> 01:31:25,760
behind
 

4583
01:31:25,760 --> 01:31:27,990
behind
i didn't understand that yeah okay so

4584
01:31:27,990 --> 01:31:28,000
i didn't understand that yeah okay so
 

4585
01:31:28,000 --> 01:31:29,270
i didn't understand that yeah okay so
the the

4586
01:31:29,270 --> 01:31:29,280
the the
 

4587
01:31:29,280 --> 01:31:30,629
the the
so this goes to the display yeah

4588
01:31:30,629 --> 01:31:30,639
so this goes to the display yeah
 

4589
01:31:30,639 --> 01:31:32,229
so this goes to the display yeah
whatever is in this you know basically

4590
01:31:32,229 --> 01:31:32,239
whatever is in this you know basically
 

4591
01:31:32,239 --> 01:31:33,510
whatever is in this you know basically
this is the sequence of characters that

4592
01:31:33,510 --> 01:31:33,520
this is the sequence of characters that
 

4593
01:31:33,520 --> 01:31:36,709
this is the sequence of characters that
needs to go to the display

4594
01:31:36,709 --> 01:31:36,719

 

4595
01:31:36,719 --> 01:31:38,629

and and the writer basically is

4596
01:31:38,629 --> 01:31:38,639
and and the writer basically is
 

4597
01:31:38,639 --> 01:31:41,750
and and the writer basically is
appending more and more more characters

4598
01:31:41,750 --> 01:31:41,760
appending more and more more characters
 

4599
01:31:41,760 --> 01:31:44,550
appending more and more more characters
right and so uh so the writer is going

4600
01:31:44,550 --> 01:31:44,560
right and so uh so the writer is going
 

4601
01:31:44,560 --> 01:31:45,189
right and so uh so the writer is going
that way

4602
01:31:45,189 --> 01:31:45,199
that way
 

4603
01:31:45,199 --> 01:31:46,790
that way
and basically the readers you know

4604
01:31:46,790 --> 01:31:46,800
and basically the readers you know
 

4605
01:31:46,800 --> 01:31:48,629
and basically the readers you know
following the writer right because you

4606
01:31:48,629 --> 01:31:48,639
following the writer right because you
 

4607
01:31:48,639 --> 01:31:49,750
following the writer right because you
know can't print the character that

4608
01:31:49,750 --> 01:31:49,760
know can't print the character that
 

4609
01:31:49,760 --> 01:31:50,310
know can't print the character that
hasn't been

4610
01:31:50,310 --> 01:31:50,320
hasn't been
 

4611
01:31:50,320 --> 01:31:53,430
hasn't been
you know put in the buffer yet um and so

4612
01:31:53,430 --> 01:31:53,440
you know put in the buffer yet um and so
 

4613
01:31:53,440 --> 01:31:53,910
you know put in the buffer yet um and so
what

4614
01:31:53,910 --> 01:31:53,920
what
 

4615
01:31:53,920 --> 01:31:57,189
what
you know the the the uart who

4616
01:31:57,189 --> 01:31:57,199
you know the the the uart who
 

4617
01:31:57,199 --> 01:32:02,229
you know the the the uart who
puts things on the display

4618
01:32:02,229 --> 01:32:02,239

 

4619
01:32:02,239 --> 01:32:04,390

you know we'll you know start basically

4620
01:32:04,390 --> 01:32:04,400
you know we'll you know start basically
 

4621
01:32:04,400 --> 01:32:05,830
you know we'll you know start basically
putting the first character as in this

4622
01:32:05,830 --> 01:32:05,840
putting the first character as in this
 

4623
01:32:05,840 --> 01:32:08,149
putting the first character as in this
slot you know onto the display

4624
01:32:08,149 --> 01:32:08,159
slot you know onto the display
 

4625
01:32:08,159 --> 01:32:09,750
slot you know onto the display
meanwhile printf could come in and

4626
01:32:09,750 --> 01:32:09,760
meanwhile printf could come in and
 

4627
01:32:09,760 --> 01:32:11,350
meanwhile printf could come in and
multiple printers come in that

4628
01:32:11,350 --> 01:32:11,360
multiple printers come in that
 

4629
01:32:11,360 --> 01:32:13,189
multiple printers come in that
they put more characters in here so that

4630
01:32:13,189 --> 01:32:13,199
they put more characters in here so that
 

4631
01:32:13,199 --> 01:32:14,550
they put more characters in here so that
the right point are staying standing

4632
01:32:14,550 --> 01:32:14,560
the right point are staying standing
 

4633
01:32:14,560 --> 01:32:15,189
the right point are staying standing
here

4634
01:32:15,189 --> 01:32:15,199
here
 

4635
01:32:15,199 --> 01:32:16,629
here
and then when this one character is

4636
01:32:16,629 --> 01:32:16,639
and then when this one character is
 

4637
01:32:16,639 --> 01:32:18,709
and then when this one character is
displayed then you know the uart will

4638
01:32:18,709 --> 01:32:18,719
displayed then you know the uart will
 

4639
01:32:18,719 --> 01:32:20,229
displayed then you know the uart will
move up this pointer

4640
01:32:20,229 --> 01:32:20,239
move up this pointer
 

4641
01:32:20,239 --> 01:32:22,470
move up this pointer
to display the next character right so

4642
01:32:22,470 --> 01:32:22,480
to display the next character right so
 

4643
01:32:22,480 --> 01:32:23,990
to display the next character right so
the uart is always lagging

4644
01:32:23,990 --> 01:32:24,000
the uart is always lagging
 

4645
01:32:24,000 --> 01:32:27,350
the uart is always lagging
a little bit behind the writer until the

4646
01:32:27,350 --> 01:32:27,360
a little bit behind the writer until the
 

4647
01:32:27,360 --> 01:32:29,430
a little bit behind the writer until the
point that it catches up right and

4648
01:32:29,430 --> 01:32:29,440
point that it catches up right and
 

4649
01:32:29,440 --> 01:32:31,270
point that it catches up right and
where r and w are the same and at that

4650
01:32:31,270 --> 01:32:31,280
where r and w are the same and at that
 

4651
01:32:31,280 --> 01:32:32,629
where r and w are the same and at that
point basically that means that there's

4652
01:32:32,629 --> 01:32:32,639
point basically that means that there's
 

4653
01:32:32,639 --> 01:32:35,910
point basically that means that there's
no character anymore in the buffer

4654
01:32:35,910 --> 01:32:35,920
no character anymore in the buffer
 

4655
01:32:35,920 --> 01:32:38,070
no character anymore in the buffer
oh okay i see that makes that makes a

4656
01:32:38,070 --> 01:32:38,080
oh okay i see that makes that makes a
 

4657
01:32:38,080 --> 01:32:40,229
oh okay i see that makes that makes a
lot more sense okay thank you so much

4658
01:32:40,229 --> 01:32:40,239
lot more sense okay thank you so much
 

4659
01:32:40,239 --> 01:32:48,870
lot more sense okay thank you so much
you're welcome any more questions

4660
01:32:48,870 --> 01:32:48,880

 

4661
01:32:48,880 --> 01:32:54,709

just us left here guys

4662
01:32:54,709 --> 01:32:54,719
just us left here guys
 

4663
01:32:54,719 --> 01:32:57,760
just us left here guys
see you later

