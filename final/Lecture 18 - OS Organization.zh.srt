1
00:00:07,470 --> 00:00:10,890
好的，你们能听到我说话吗？

2
00:00:13,190 --> 00:00:13,820
是的。

3
00:00:14,750 --> 00:00:15,200
谢谢。

4
00:00:15,770 --> 00:00:18,800
好的，今天我主要想说的是微内核，

5
00:00:19,550 --> 00:00:22,820
首先，我们来了解一些背景，

6
00:00:22,820 --> 00:00:25,210
以帮助解释

7
00:00:25,210 --> 00:00:28,210
为什么人们一开始会探索微内核，

8
00:00:28,570 --> 00:00:33,370
人们获得微内核，

9
00:00:33,370 --> 00:00:38,980
试着广泛地思考内核应该做什么，

10
00:00:39,010 --> 00:00:40,720
就像我们在 xv6 中，

11
00:00:40,720 --> 00:00:43,660
某种程度上，做 Unix 所做的事情，

12
00:00:43,660 --> 00:00:48,020
我们采用了这组抽象概念和系统调用，

13
00:00:48,020 --> 00:00:50,840
并保留了内核中的设施，

14
00:00:50,840 --> 00:00:54,950
理所当然是我们试图设计的目标，

15
00:00:54,950 --> 00:00:58,210
但是完全值得怀疑，

16
00:00:58,240 --> 00:01:00,370
天哪，内核首先应该做什么，

17
00:01:00,370 --> 00:01:04,880
也许是 xv6 或 Linux 所做的特定类型的事情，

18
00:01:04,910 --> 00:01:07,130
这不是最好的答案，

19
00:01:07,160 --> 00:01:08,060
或者它是。

20
00:01:08,330 --> 00:01:12,260
当然，我们这里的处境有些危险，

21
00:01:12,260 --> 00:01:14,180
因为现在我们，

22
00:01:14,270 --> 00:01:17,990
内核是一种为程序员的开发平台，

23
00:01:18,170 --> 00:01:18,770
正如我们所知，

24
00:01:18,770 --> 00:01:24,890
程序员，不同的人有非常不同的主观偏好，

25
00:01:24,890 --> 00:01:28,100
他们喜欢在什么样的基础设施上编程。

26
00:01:28,100 --> 00:01:32,380
所以我们不一定要期待一个最好的答案，

27
00:01:33,270 --> 00:01:35,430
但是我们可以期望学到一些东西，

28
00:01:35,610 --> 00:01:37,200
或许可以取得一些进展，

29
00:01:37,200 --> 00:01:39,510
通过努力想一想可能的答案。

30
00:01:40,620 --> 00:01:41,610
所以首先，

31
00:01:41,640 --> 00:01:46,500
让我试着明确传统的方法，

32
00:01:46,500 --> 00:01:50,550
我们应该使用什么样的内核接口，

33
00:01:50,760 --> 00:01:54,960
Linux ， Unix 和 xv6 都是例子，

34
00:01:55,400 --> 00:02:00,410
我个人所说的传统设计方法的例子，

35
00:02:00,440 --> 00:02:02,240
但是用另一个词来形容它，

36
00:02:02,240 --> 00:02:04,550
那是一种概括，

37
00:02:05,160 --> 00:02:07,740
这种方法最终像是宏大而单一的。

38
00:02:13,510 --> 00:02:14,290
宏大而单一的。

39
00:02:14,320 --> 00:02:19,970
这意味着内核是一个单一的大程序，

40
00:02:19,970 --> 00:02:21,650
它可以做各种各样的事情，

41
00:02:21,830 --> 00:02:23,450
都在同一个程序内。

42
00:02:25,470 --> 00:02:27,840
事实上，这确实反映了

43
00:02:27,840 --> 00:02:30,990
人们对内核应该做什么的想法，

44
00:02:31,050 --> 00:02:35,730
像 Linux 这样的内核的一个特点是，

45
00:02:35,730 --> 00:02:40,470
它们提供了强大的抽象，

46
00:02:40,560 --> 00:02:43,620
他们选择像文件系统这样的东西，

47
00:02:43,620 --> 00:02:45,990
这是一个复杂的项目，

48
00:02:46,480 --> 00:02:48,370
它们提供文件系统，

49
00:02:48,370 --> 00:02:52,570
文件、目录和文件描述符作为它们的接口，

50
00:02:52,570 --> 00:02:58,450
而不是将磁盘硬件作为它们与应用程序的接口，

51
00:02:58,480 --> 00:03:03,310
所以，使用强大的抽象，

52
00:03:03,310 --> 00:03:05,950
而不是非常低级别的抽象有一些很大的优势，

53
00:03:06,220 --> 00:03:11,410
宏内核通常有一种很大的抽象，

54
00:03:17,150 --> 00:03:19,890
比如，文件系统。

55
00:03:21,180 --> 00:03:22,590
大的抽象的一个优点是

56
00:03:22,590 --> 00:03:26,310
它们通常是可移植的文件和目录，

57
00:03:26,310 --> 00:03:29,940
你可以在所有类型的存储上实现文件和目录，

58
00:03:30,810 --> 00:03:33,810
你可以使用文件和目录，

59
00:03:33,810 --> 00:03:37,500
而不必担心运行的磁盘的品牌，

60
00:03:37,500 --> 00:03:39,780
或者它可能是固态硬盘而不是硬盘，

61
00:03:39,780 --> 00:03:41,340
或者它可能是一个网络文件系统，

62
00:03:41,340 --> 00:03:42,450
所有的接口都是一样的，

63
00:03:42,450 --> 00:03:46,320
因为文件系统接口非常抽象。

64
00:03:46,530 --> 00:03:49,000
所以，这样做的一个好处是，

65
00:03:49,000 --> 00:03:51,880
获得可移植性的方法，

66
00:03:52,520 --> 00:03:56,000
编写应用程序并使其在各种不同的硬件上运行，

67
00:03:56,000 --> 00:03:58,880
而不必修改应用程序。

68
00:04:00,150 --> 00:04:01,560
另一个例子是，

69
00:04:01,860 --> 00:04:07,500
Unix Linux 提供了地址空间抽象。

70
00:04:07,500 --> 00:04:10,140
而不是提供一些东西，

71
00:04:10,230 --> 00:04:12,810
而不是提供对 MMU 硬件的直接访问，

72
00:04:13,260 --> 00:04:16,710
对于可移植性有用，

73
00:04:16,710 --> 00:04:18,840
并且对应用程序隐藏了复杂性。

74
00:04:20,440 --> 00:04:24,970
所以，这些强大的抽象的另一大优势，

75
00:04:24,970 --> 00:04:27,730
它们往往对应用程序隐藏了复杂性。

76
00:04:30,690 --> 00:04:36,180
比如 xv6 提供的文件描述符接口，

77
00:04:36,180 --> 00:04:37,350
它是非常简单的接口，

78
00:04:37,350 --> 00:04:39,990
但你只需要读写文件描述符，

79
00:04:39,990 --> 00:04:41,010
再简单不过了，

80
00:04:41,100 --> 00:04:43,470
但是在它的背后是非常复杂的代码，

81
00:04:43,470 --> 00:04:48,150
对于读写磁盘上的文件系统。

82
00:04:50,670 --> 00:04:51,840
这对程序员来说是件好事，

83
00:04:51,840 --> 00:04:53,760
但它会让内核变得很大很复杂，

84
00:04:54,930 --> 00:04:59,340
这些大的抽象还帮助内核管理和共享资源，

85
00:04:59,340 --> 00:05:02,520
我们已经委托给内核的事情，比如内存管理，

86
00:05:02,520 --> 00:05:04,680
内核跟踪哪些内存是空闲的，

87
00:05:04,800 --> 00:05:09,270
类似地，内核跟踪磁盘的哪些部分是空闲的，

88
00:05:09,270 --> 00:05:11,070
当前磁盘的哪些部分在使用。

89
00:05:11,160 --> 00:05:12,780
所以程序员们不用考虑它，

90
00:05:13,200 --> 00:05:15,660
再一次，它简化了程序，

91
00:05:15,660 --> 00:05:18,360
它甚至还有助于增强健壮性和安全性，

92
00:05:19,140 --> 00:05:22,950
因为如果允许程序决定磁盘的哪些部分是空闲的，

93
00:05:22,980 --> 00:05:26,010
那么也许一个程序可以使用

94
00:05:26,010 --> 00:05:28,470
另一个程序已经在使用的磁盘的一部分。

95
00:05:30,210 --> 00:05:34,290
所以实际上，内核负责资源管理，

96
00:05:36,980 --> 00:05:39,230
帮助共享并帮助确保安全，

97
00:05:39,500 --> 00:05:45,530
但这也是某种程度上导致内核变大。

98
00:05:49,380 --> 00:05:49,980
所以不管怎样，

99
00:05:49,980 --> 00:05:54,900
让内核负责所有这些有趣的抽象，

100
00:05:54,900 --> 00:05:58,160
即使它们只有简单的接口，

101
00:05:58,190 --> 00:05:59,690
里面有很多复杂的东西，

102
00:05:59,720 --> 00:06:05,000
让内核变成又大又复杂的东西。

103
00:06:05,840 --> 00:06:09,350
而这种整体式设计的另一个方面是，

104
00:06:09,350 --> 00:06:11,780
因为这都是一个程序，

105
00:06:11,840 --> 00:06:13,490
所有不同的内核子系统，

106
00:06:13,490 --> 00:06:17,210
比如文件系统，内存分配器，调度器以及虚拟内存，

107
00:06:17,210 --> 00:06:19,430
它们都是一个大的程序的一部分，

108
00:06:19,580 --> 00:06:22,430
这意味着它们可以窥探彼此的数据结构，

109
00:06:22,430 --> 00:06:28,460
所以，这往往会使设施的实施变得更容易，

110
00:06:28,460 --> 00:06:31,040
它在某种程度上是不止一个的一部分，

111
00:06:31,400 --> 00:06:35,510
或者你认为不止一种类型的模块或子系统，

112
00:06:35,510 --> 00:06:38,840
比如，像 exec 这样的系统调用，

113
00:06:39,620 --> 00:06:41,930
exec 深入文件系统，

114
00:06:41,930 --> 00:06:44,960
因为它读取磁盘的二进制映像，

115
00:06:44,960 --> 00:06:46,250
以加载内存，

116
00:06:46,310 --> 00:06:51,590
它还深入到内存分配和虚拟内存分页系统，

117
00:06:51,650 --> 00:06:54,380
因为它需要设置新进程的地址空间，

118
00:06:54,440 --> 00:06:55,310
但这真的很容易，

119
00:06:55,310 --> 00:06:58,310
在 xv6 或 Linux 中这样做没有问题，

120
00:06:58,310 --> 00:07:01,550
因为文件系统都在那里，

121
00:07:01,760 --> 00:07:02,960
在同一个内核程序中，

122
00:07:02,960 --> 00:07:05,900
虚拟内存系统也是同一程序的一部分，

123
00:07:07,010 --> 00:07:10,730
如果你以某种方式严格分割，

124
00:07:10,730 --> 00:07:12,770
在文件系统和虚拟内存系统之间，

125
00:07:12,860 --> 00:07:15,230
要实现像 exec 这样的东西会困难得多，

126
00:07:15,230 --> 00:07:18,080
它深入到这两个[]。

127
00:07:18,320 --> 00:07:20,870
但是在宏系统中，只有一个大程序，

128
00:07:21,290 --> 00:07:23,060
就容易多了。

129
00:07:24,090 --> 00:07:28,140
另一件事情让实现软件

130
00:07:28,140 --> 00:07:31,290
在 xv6 或 Linux 这样的宏内核中更简单的是，

131
00:07:31,320 --> 00:07:35,850
所有代码都以完全硬件权限运行，

132
00:07:35,850 --> 00:07:38,910
比如，所有 xv6 都在管理员模式下运行，

133
00:07:39,120 --> 00:07:42,570
这意味着没有限制，没有恼人，

134
00:07:42,870 --> 00:07:45,450
你不能写那段内存，

135
00:07:45,450 --> 00:07:46,950
因为你没有足够的权限，

136
00:07:47,160 --> 00:07:50,980
所有内核代码都以某种最大权限运行，

137
00:07:52,710 --> 00:07:56,430
像 Linux 这样的操作系统也是如此。

138
00:07:57,770 --> 00:08:02,360
所以这个设计策略，

139
00:08:02,360 --> 00:08:05,030
对于内核开发者来说是非常方便的，

140
00:08:05,090 --> 00:08:08,810
它使得构建这些大型抽象变得很容易，

141
00:08:08,810 --> 00:08:12,770
这对应用程序开发人员来说是方便的，

142
00:08:12,800 --> 00:08:17,030
然而，这里也有一些批评，

143
00:08:17,030 --> 00:08:20,780
对于传统的宏方法。

144
00:08:23,300 --> 00:08:25,580
这是开始的动力之一，

145
00:08:25,580 --> 00:08:32,080
来研究其他架构，比如微内核，

146
00:08:32,500 --> 00:08:33,250
所以你可能会问，

147
00:08:33,250 --> 00:08:37,200
为什么不是宏内核。

148
00:08:43,290 --> 00:08:47,640
其中之一就是它们又大又复杂，

149
00:08:47,850 --> 00:08:52,620
所以任何 Linux 系统都取决于你是如何计算的，

150
00:08:52,620 --> 00:08:58,260
Linux 在几十万到几百万行代码之间，

151
00:08:58,470 --> 00:09:01,650
人们利用了这个事实，

152
00:09:01,650 --> 00:09:04,560
Linux 的一部分可以查看其他部分的数据，

153
00:09:04,560 --> 00:09:06,090
这使得编程变得更容易，

154
00:09:06,120 --> 00:09:11,670
但这也使得代码之间存在大量的互连和相互关系，

155
00:09:11,670 --> 00:09:13,980
所以，它会是一个挑战，

156
00:09:13,980 --> 00:09:15,870
有时查看 Linux 内核代码，

157
00:09:15,870 --> 00:09:16,830
找出它的目的是什么，

158
00:09:17,460 --> 00:09:21,390
任何时候，当你得到大程序，

159
00:09:21,390 --> 00:09:24,120
特别是那些复杂结构的程序，

160
00:09:24,120 --> 00:09:25,140
你会有 bug ，

161
00:09:26,670 --> 00:09:30,090
操作系统内核也不例外，

162
00:09:30,090 --> 00:09:32,430
多年来，它们有各种各样的 bug ，

163
00:09:33,030 --> 00:09:37,320
包括可用于安全目的的漏洞。

164
00:09:40,050 --> 00:09:47,640
所以，这是一系列麻烦的关系，

165
00:09:47,670 --> 00:09:49,260
如果你允许内核的大模型，

166
00:09:49,440 --> 00:09:50,700
几乎可以肯定的是，

167
00:09:50,730 --> 00:09:54,600
无法避免 bug 和可利用的安全问题，

168
00:09:54,990 --> 00:09:57,840
这是一个真正的问题。

169
00:10:00,490 --> 00:10:06,560
人们对宏内核可能并不完全满意的另一个原因是，

170
00:10:06,710 --> 00:10:12,380
随着时间的推移，它们往往只会增长，具有所有想要的功能，

171
00:10:12,530 --> 00:10:15,710
所以 Linux 被用来做各种不同的事情，

172
00:10:15,710 --> 00:10:19,430
从电话听筒到桌面工作站，

173
00:10:19,430 --> 00:10:23,690
从笔记本电脑，平板电脑到互联网上的服务器，

174
00:10:23,690 --> 00:10:24,650
再到路由器，

175
00:10:25,790 --> 00:10:27,290
这导致了 Linux ，

176
00:10:27,290 --> 00:10:29,900
Linux 可以支持所有这些东西，这真是太棒了，

177
00:10:29,960 --> 00:10:31,940
但它使它变得非常笼统，

178
00:10:32,000 --> 00:10:34,940
它支持很多不同的东西，

179
00:10:34,970 --> 00:10:36,950
任何应用程序，

180
00:10:36,950 --> 00:10:38,270
比如我运行 web 服务器，

181
00:10:38,270 --> 00:10:43,730
不需要比如 Linux 非常复杂的声卡支持，

182
00:10:44,030 --> 00:10:45,950
所以这里有大量的东西，

183
00:10:45,950 --> 00:10:50,050
是为了让 Linux 成为通用的，

184
00:10:50,230 --> 00:10:51,820
这很好，

185
00:10:52,120 --> 00:10:54,610
但也有一个担心，

186
00:10:54,610 --> 00:10:58,540
一般用途往往意味着缓慢，

187
00:10:58,990 --> 00:11:01,900
可能对各种不同的东西都有好处，

188
00:11:01,900 --> 00:11:05,350
但可能对任何特定的东西都不是最优的。

189
00:11:06,160 --> 00:11:07,900
所以很难，

190
00:11:08,500 --> 00:11:10,750
当你试着做一些非常快的东西，

191
00:11:10,750 --> 00:11:13,960
最好让它只做一两件事，

192
00:11:13,960 --> 00:11:16,630
你可以专注于优化单个代码路径，

193
00:11:17,440 --> 00:11:20,470
但是如果你的软件需要做上千种不同的事情中的一个，

194
00:11:20,470 --> 00:11:22,750
专注优化要困难得多。

195
00:11:25,090 --> 00:11:27,580
这就是， Linux 不一定很慢，

196
00:11:27,580 --> 00:11:29,170
但是，你可能会想，

197
00:11:29,170 --> 00:11:31,840
它是否像可能的那样快，

198
00:11:31,840 --> 00:11:33,520
对于任何给定的情况。

199
00:11:35,210 --> 00:11:36,380
所以如果你仔细想想，

200
00:11:36,380 --> 00:11:37,370
你如何考虑，

201
00:11:37,370 --> 00:11:40,970
如果你考虑 Linux 或 xv6 中几乎所有东西，

202
00:11:41,510 --> 00:11:44,420
你可能会想，它是否真的需要做它所做的每一件事，

203
00:11:44,420 --> 00:11:47,600
比如，如果你通过管道写入单个字节，

204
00:11:47,660 --> 00:11:49,070
从一个进程到另一个进程，

205
00:11:49,430 --> 00:11:51,770
但是有很多指令会被执行，

206
00:11:51,950 --> 00:11:54,740
即使是 xv6 ，它是一个简单的内核，

207
00:11:54,740 --> 00:11:58,100
有缓冲，有锁，

208
00:11:58,160 --> 00:12:00,170
有睡眠和唤醒，

209
00:12:00,320 --> 00:12:01,730
在管道读写时，

210
00:12:01,730 --> 00:12:02,840
可能有调度器，

211
00:12:02,840 --> 00:12:05,450
可能调用上下文切换，

212
00:12:05,660 --> 00:12:09,300
有很多东西可能不一定需要，

213
00:12:09,750 --> 00:12:12,630
需要的绝对最小的，

214
00:12:12,630 --> 00:12:15,360
将一个字节从一个进程移动到另一个进程。

215
00:12:17,940 --> 00:12:21,240
这些大内核的另一个潜在问题是，

216
00:12:21,330 --> 00:12:23,620
因为它们太大了，

217
00:12:23,620 --> 00:12:29,590
而且它们故意去掉一些非常复杂的抽象，

218
00:12:29,710 --> 00:12:31,390
他们有很多设计决策，

219
00:12:31,390 --> 00:12:32,830
在内核中。

220
00:12:34,700 --> 00:12:37,850
所以，在某些方面你不能，

221
00:12:37,880 --> 00:12:38,930
即使你不同意他们的观点，

222
00:12:38,930 --> 00:12:42,770
你也不能，应用程序只能接受它。

223
00:12:43,010 --> 00:12:48,980
所以，相反的，

224
00:12:48,980 --> 00:12:49,970
在某个幻想世界里，

225
00:12:49,970 --> 00:12:52,880
也许应用程序可以做出更多的决定，

226
00:12:52,880 --> 00:12:55,430
所以有一些例子，

227
00:12:57,660 --> 00:13:03,930
你可能会对 API 的设计方式感到失望，

228
00:13:04,020 --> 00:13:06,570
比如，在 Unix 中，

229
00:13:06,570 --> 00:13:08,970
你可以等待自己的子进程，

230
00:13:08,970 --> 00:13:10,560
如果你 fork ，可以等待你的子进程，

231
00:13:10,560 --> 00:13:12,210
但你不能等待其他进程，

232
00:13:12,210 --> 00:13:15,780
也许你想等待一个孙子进程或一个无关的进程，

233
00:13:15,780 --> 00:13:16,920
但这不是一个选择，

234
00:13:17,040 --> 00:13:18,450
它不是这样工作的，

235
00:13:18,630 --> 00:13:20,250
即使这对你来说很方便，

236
00:13:21,360 --> 00:13:26,520
也许您想要更改另一个进程地址空间的设置方式，

237
00:13:26,550 --> 00:13:27,960
也许可以调用和映射

238
00:13:27,960 --> 00:13:30,840
你控制的另一个进程，

239
00:13:30,840 --> 00:13:33,110
但是，这也不是一个选择，

240
00:13:33,110 --> 00:13:35,540
你可以映射修改自己的地址空间，

241
00:13:35,540 --> 00:13:38,180
但不能修改其他进程的地址空间，

242
00:13:38,330 --> 00:13:43,160
可能是数据库，并且磁盘上有 B 树索引，

243
00:13:43,550 --> 00:13:47,630
你可能知道很多关于在磁盘上布局 B 树的最快方法，

244
00:13:47,900 --> 00:13:50,300
但是如果你使用文件系统读写文件，

245
00:13:50,360 --> 00:13:54,050
文件系统不知道你是在写入 B 树，

246
00:13:54,050 --> 00:13:58,790
也不知道应该如何在磁盘上布局 B 树以实现最快的访问。

247
00:13:59,190 --> 00:14:01,230
所以如果你的数据库有点麻烦，

248
00:14:01,230 --> 00:14:04,470
也许你很高兴有这个文件系统供你支配，

249
00:14:04,560 --> 00:14:06,360
但它并没有真正做你想做的事。

250
00:14:07,340 --> 00:14:12,260
这就是设计决策到大内核中的感觉。

251
00:14:13,290 --> 00:14:17,880
最后，还有一种特殊的问题，

252
00:14:20,920 --> 00:14:24,880
所以它可能是在 20 世纪 90 年代出现的，

253
00:14:25,000 --> 00:14:27,130
一种可扩展性的概念，

254
00:14:29,950 --> 00:14:34,000
让程序能够在运行时修改内核，

255
00:14:34,030 --> 00:14:35,800
能够下载内核中的新代码，

256
00:14:35,800 --> 00:14:37,420
或者改变它的运作方式之类的，

257
00:14:37,720 --> 00:14:40,840
为了能让数据库

258
00:14:40,840 --> 00:14:44,470
能够控制磁盘上的数据布局。

259
00:14:45,320 --> 00:14:50,330
至少在过去的几十年里，

260
00:14:50,390 --> 00:14:54,970
宏内核没有任何特定的功能，

261
00:14:54,970 --> 00:14:56,830
来帮助这种扩展能力，

262
00:14:56,830 --> 00:14:58,840
你只是困在内核中。

263
00:15:01,490 --> 00:15:02,780
好的。

264
00:15:03,430 --> 00:15:07,290
所以，这些都是人们考虑的一些问题，

265
00:15:07,290 --> 00:15:11,080
让他们思考其他的，

266
00:15:11,290 --> 00:15:14,800
操作系统设计其他体系结构的方式，

267
00:15:15,040 --> 00:15:18,710
而且有很多想法，

268
00:15:18,710 --> 00:15:20,570
有些与人们追求的截然不同，

269
00:15:20,780 --> 00:15:22,400
我们要谈的是其中一个，

270
00:15:22,820 --> 00:15:25,640
今天特别受欢迎的一个，

271
00:15:25,880 --> 00:15:27,440
这就是微内核的想法。

272
00:15:31,330 --> 00:15:34,120
微内核，很多想法，

273
00:15:34,120 --> 00:15:38,180
或者回到计算机历史的开始，

274
00:15:39,020 --> 00:15:43,160
它们变成一种热门的研究课题，

275
00:15:43,160 --> 00:15:46,100
可能从 20 世纪 80 年代中后期开始。

276
00:15:46,550 --> 00:15:49,580
最重要的想法是，

277
00:15:52,710 --> 00:15:56,280
顺便说一下，微内核这个词

278
00:15:56,280 --> 00:15:58,650
指的是一种一般的方法，一个概念，

279
00:15:58,650 --> 00:16:00,840
它不是任何特定的东西，

280
00:16:00,840 --> 00:16:05,400
有许多人设计和构建操作系统，

281
00:16:05,400 --> 00:16:09,030
根据微内核的一般方案，

282
00:16:09,030 --> 00:16:10,560
但是，这些项目中的每一个，

283
00:16:10,770 --> 00:16:13,950
最终设计和操作系统都可能有很大的不同。

284
00:16:14,070 --> 00:16:18,790
所以关键的想法是微小的内核，

285
00:16:22,540 --> 00:16:29,140
仅支持 IPC 进程间通信，

286
00:16:29,320 --> 00:16:33,970
以及某种线程或任务的概念。

287
00:16:35,620 --> 00:16:37,990
所以，你有一个内核，它为你提供

288
00:16:37,990 --> 00:16:40,600
一种类似于抽象的进程的概念，

289
00:16:40,600 --> 00:16:42,730
进程之间可以互相通信，

290
00:16:42,730 --> 00:16:44,830
通过这种进程间通信，

291
00:16:44,890 --> 00:16:46,450
没有其他的了。

292
00:16:46,480 --> 00:16:48,220
其他你可能想做的事，

293
00:16:48,220 --> 00:16:50,230
比如要实现的文件系统，

294
00:16:50,320 --> 00:16:53,440
作为进程或任务在用户级代码，

295
00:16:53,470 --> 00:16:54,790
而不是在内核中。

296
00:16:55,850 --> 00:16:57,080
所以，这里的图，

297
00:17:01,100 --> 00:17:05,030
现在我们使用 u 表示微内核，

298
00:17:05,090 --> 00:17:06,530
微内核在下面这里，

299
00:17:06,530 --> 00:17:08,870
在上面有用户空间进程，

300
00:17:08,870 --> 00:17:11,990
我们可能会运行所有常见的进程，

301
00:17:11,990 --> 00:17:16,380
也许要运行 vi ，我最喜欢的文本编辑器，

302
00:17:16,380 --> 00:17:21,320
还有我的编译器，我的窗口系统。

303
00:17:25,340 --> 00:17:27,470
但这里也像常用进程一样，

304
00:17:27,470 --> 00:17:28,910
我们使用文件系统，

305
00:17:29,650 --> 00:17:32,620
就像用户空间中的服务器进程一样，

306
00:17:32,620 --> 00:17:35,440
也许我们会有一个磁盘驱动程序，

307
00:17:36,180 --> 00:17:38,070
它们知道如何与我的磁盘硬件通信，

308
00:17:38,310 --> 00:17:40,290
也许我们有一个网络堆栈，

309
00:17:40,290 --> 00:17:47,790
它知道如何使用 TCP 与我的网卡交互，

310
00:17:48,360 --> 00:17:50,970
也许我们有一个用户级别的进程，

311
00:17:50,970 --> 00:17:54,690
负责执行花哨的分页技巧，

312
00:17:54,720 --> 00:17:57,120
比如内存映射文件，

313
00:17:57,120 --> 00:17:59,910
或者可能实现写入时复制， fork 等东西。

314
00:18:01,560 --> 00:18:05,520
当我的文本编辑器需要读取文件时，

315
00:18:05,760 --> 00:18:07,200
它需要与文件系统交互，

316
00:18:07,200 --> 00:18:18,390
所以，它通过 IPC 进程间通信发送一条消息，

317
00:18:19,010 --> 00:18:21,230
到文件系统服务器，

318
00:18:21,530 --> 00:18:23,090
其中包含所有文件系统代码，

319
00:18:23,090 --> 00:18:24,590
它是关于文件和目录，

320
00:18:24,590 --> 00:18:28,040
并且文件系统服务器代码可能需要与磁盘交互，

321
00:18:28,040 --> 00:18:31,070
所以它可能发送磁盘读取或写入，

322
00:18:31,070 --> 00:18:33,560
另一个 IPC ，

323
00:18:33,560 --> 00:18:35,840
磁盘驱动以某种方式与硬件交互，

324
00:18:36,350 --> 00:18:40,930
这个驱动程序可能返回一个磁盘块到文件服务器，

325
00:18:41,260 --> 00:18:42,220
在它完成它的事情之后，

326
00:18:42,220 --> 00:18:45,100
也许文件服务器最终再次返回你请求的数据，

327
00:18:45,100 --> 00:18:47,020
通过进程间通信消息，

328
00:18:47,350 --> 00:18:49,270
回到我的文本编辑器。

329
00:18:50,240 --> 00:18:53,870
但是这里需要注意的关键是，

330
00:18:54,650 --> 00:18:56,600
内核中唯一要做的就是，

331
00:18:56,600 --> 00:19:01,190
支持这些进程、任务或线程，

332
00:19:02,130 --> 00:19:03,180
无论它们是什么，

333
00:19:03,210 --> 00:19:08,400
支持进程间通信消息传递，没有其他的，

334
00:19:08,400 --> 00:19:09,780
下面没有文件系统，

335
00:19:09,780 --> 00:19:13,380
下面的内核中也没有设备驱动程序，

336
00:19:13,380 --> 00:19:15,180
这里没有网络堆栈，

337
00:19:15,510 --> 00:19:17,010
所有这些东西都在上面，

338
00:19:17,010 --> 00:19:20,970
或多或少都是普通的用户级进程。

339
00:19:21,790 --> 00:19:26,710
所以，它们会带来一个非常小的内核，

340
00:19:26,710 --> 00:19:30,250
包含相对较少的代码可以优化，

341
00:19:30,250 --> 00:19:32,200
比如你可以优化 IPC ，

342
00:19:32,200 --> 00:19:33,460
没有太多其他的事情要做。

343
00:19:36,590 --> 00:19:39,920
所以这是我们要在剩下的这节课上讨论的图片，

344
00:19:39,920 --> 00:19:42,710
让你们了解这件事的最终的情况。

345
00:19:42,740 --> 00:19:47,300
实际上，今天仍在使用一种微内核，

346
00:19:47,300 --> 00:19:49,010
事实上， L4 微内核，

347
00:19:49,010 --> 00:19:52,730
是今天论文讨论的主题所使用的，

348
00:19:52,970 --> 00:19:56,810
有很多 L4 实例运行，

349
00:19:56,810 --> 00:19:59,000
因为它被用在很多手机里，

350
00:19:59,480 --> 00:20:02,630
在小型控制器上控制手机无线电，

351
00:20:02,900 --> 00:20:06,680
而且它也被用于最近的 iPhone ，

352
00:20:06,830 --> 00:20:13,580
作为 iPhone 上的专用 enclave 处理器上运行的操作系统，

353
00:20:13,580 --> 00:20:16,580
用于隐藏秘密的密钥。

354
00:20:17,270 --> 00:20:18,620
所以，有很多嵌入式，

355
00:20:19,100 --> 00:20:21,410
微内核胜出

356
00:20:21,410 --> 00:20:24,770
在小型嵌入式专用计算机系统中，

357
00:20:24,890 --> 00:20:26,360
不是笔记本，

358
00:20:26,360 --> 00:20:32,320
而是专用于单一专门任务的计算机，

359
00:20:32,350 --> 00:20:34,600
可能不需要 Linux 的复杂性，

360
00:20:34,600 --> 00:20:36,220
但是你确实需要一些操作系统。

361
00:20:37,680 --> 00:20:38,430
另一件事，

362
00:20:38,430 --> 00:20:43,200
微内核的另一种最终结果是，

363
00:20:43,260 --> 00:20:49,530
用户级服务与其他程序通过 IPC 与它们交互，

364
00:20:49,710 --> 00:20:52,860
也已经进入了很多操作系统，

365
00:20:52,860 --> 00:20:53,580
就像 Mac OS ，

366
00:20:53,580 --> 00:20:55,350
它正运行着与你交谈，

367
00:20:55,560 --> 00:21:00,840
它既是一种普通的宏内核，

368
00:21:00,870 --> 00:21:05,220
它还很好地支持用户级服务，

369
00:21:05,220 --> 00:21:09,440
以及 Unix 进程之间与服务交互的 IPC ，

370
00:21:09,440 --> 00:21:16,470
所以，那个想法也是一个成功的想法，被广泛采用。

371
00:21:17,550 --> 00:21:20,160
好的，这是基本架构，

372
00:21:20,490 --> 00:21:25,380
我将继续谈论一些方式和原因，

373
00:21:25,380 --> 00:21:26,550
为什么这个有吸引力，

374
00:21:26,610 --> 00:21:29,520
但首先是高层次的问题，

375
00:21:31,730 --> 00:21:33,200
微内核是什么。

376
00:21:38,950 --> 00:21:40,330
好的。

377
00:21:42,700 --> 00:21:47,830
那么，人们希望的是什么，

378
00:21:50,450 --> 00:21:54,600
当他们开始构建微内核的时候。

379
00:21:54,600 --> 00:21:57,690
所以，一个很大的动机，

380
00:21:57,690 --> 00:21:59,670
尽管你不一定会看到它被写得很多，

381
00:21:59,670 --> 00:22:01,860
这只是一种审美。

382
00:22:01,890 --> 00:22:03,810
我想很多人都觉得

383
00:22:03,810 --> 00:22:10,080
像 Linux 内核这样庞大复杂的单一程序，

384
00:22:10,200 --> 00:22:11,460
并不是很优雅，

385
00:22:11,640 --> 00:22:13,260
当然，我们可以构建系统，

386
00:22:13,260 --> 00:22:18,840
更小，更有针对性的设计，

387
00:22:18,840 --> 00:22:23,120
而不是一个巨大的有随机不同功能的[袋子]，

388
00:22:23,780 --> 00:22:27,780
所以我觉得有一种强烈的审美，

389
00:22:28,680 --> 00:22:30,720
我们当然可以做得比大内核更好。

390
00:22:31,360 --> 00:22:36,220
但是还有其他更具体可以量化的东西，

391
00:22:36,220 --> 00:22:45,290
或者更小的内核可能更安全，

392
00:22:45,680 --> 00:22:48,650
代码越少， bug 越少，

393
00:22:49,010 --> 00:22:54,200
更少有人利用其中的 bug 来破坏安全，

394
00:22:54,620 --> 00:22:59,280
然后最极端的是，

395
00:22:59,930 --> 00:23:04,580
你可以想象操作系统可以证明是对的，

396
00:23:06,950 --> 00:23:08,810
有人可以写一份证明，

397
00:23:08,810 --> 00:23:11,090
操作系统没有 bug ，

398
00:23:11,090 --> 00:23:13,130
或者做它应该做的事，其他什么也不做。

399
00:23:13,910 --> 00:23:16,910
并且确实有一个，

400
00:23:17,760 --> 00:23:23,100
证明是正确的，证明是安全的操作系统，叫做 seL4 ，

401
00:23:23,100 --> 00:23:27,330
它是 L4 微内核的众多后代之一，

402
00:23:30,000 --> 00:23:31,440
今天的论文，

403
00:23:31,500 --> 00:23:33,330
人们知道，

404
00:23:33,330 --> 00:23:36,510
如何验证中小型程序，

405
00:23:36,510 --> 00:23:38,250
但他们不知道如何验证巨大的程序，

406
00:23:38,250 --> 00:23:40,110
除非微内核很小，

407
00:23:40,320 --> 00:23:43,350
一种关键的因素，能够证明它们是正确的。

408
00:23:45,530 --> 00:23:48,320
你喜欢小的另一个原因是，

409
00:23:48,320 --> 00:23:51,560
少量代码通常更容易优化，

410
00:23:51,560 --> 00:23:56,080
跟大型程序比起来。

411
00:23:57,720 --> 00:24:00,390
另一个小的可能更快原因是，

412
00:24:00,510 --> 00:24:04,820
你不必为很多你不用的功能考虑，

413
00:24:04,850 --> 00:24:06,410
微内核几乎不做任何事情，

414
00:24:06,410 --> 00:24:09,170
那么你不必关心很多你不会使用的功能。

415
00:24:11,220 --> 00:24:14,180
另一个小的原因是，

416
00:24:14,480 --> 00:24:18,320
小内核可能会产生更少的设计决策，

417
00:24:18,320 --> 00:24:21,200
让应用程序编写者做出更少的设计决策，

418
00:24:22,580 --> 00:24:26,000
所以，它给他们留下了更多灵活性，

419
00:24:26,000 --> 00:24:27,890
让他们做自己的设计决策。

420
00:24:30,800 --> 00:24:31,760
顺便说一句，所有这些，

421
00:24:31,760 --> 00:24:36,880
这些不是微内核方法的必然结果，

422
00:24:36,970 --> 00:24:40,870
这些都是人们希望通过使用微内核来实现的。

423
00:24:41,200 --> 00:24:43,360
另一些原因，

424
00:24:43,360 --> 00:24:46,030
微内核看起来很有吸引力与这样一个事实有关，

425
00:24:46,030 --> 00:24:48,070
很多代码都是用户级别的，

426
00:24:49,110 --> 00:24:52,270
很多特性和功能，

427
00:24:52,270 --> 00:24:55,460
我们在内核中使用的，

428
00:24:55,460 --> 00:24:57,260
实际上是用户级别的服务，

429
00:24:57,440 --> 00:25:00,950
所以他们希望通过打破内核部分，

430
00:25:00,950 --> 00:25:04,730
运行不同的部分，比如用户级服务，

431
00:25:04,730 --> 00:25:08,810
比如文件服务，文件服务服务器，

432
00:25:09,050 --> 00:25:14,380
这可能会使代码更加模块化，

433
00:25:14,860 --> 00:25:18,220
可能会鼓励操作系统设计人员

434
00:25:18,220 --> 00:25:23,920
将所有这些功能划分为许多单独的服务，

435
00:25:23,920 --> 00:25:25,300
那也许是一件好事。

436
00:25:26,330 --> 00:25:31,190
用户级代码也可能更容易修改，

437
00:25:31,190 --> 00:25:35,600
用户级别通常更容易调整，替换或修改，

438
00:25:35,600 --> 00:25:38,060
比起在内核中做同样的事情，

439
00:25:38,060 --> 00:25:40,310
所以也许它更容易定制，

440
00:25:43,610 --> 00:25:47,390
将操作系统置于用户级别，

441
00:25:47,390 --> 00:25:50,240
这也可能使它们更健壮，

442
00:25:50,240 --> 00:25:53,270
如果内核出了问题，

443
00:25:55,170 --> 00:25:58,020
通常你收到 panic 然后重启，

444
00:25:58,020 --> 00:26:02,940
因为，你不能再相信内核里的东西了，

445
00:26:02,940 --> 00:26:03,780
如果它有一些 bug ，

446
00:26:03,780 --> 00:26:07,050
可能会导致它覆盖其数据的随机部分，

447
00:26:07,530 --> 00:26:10,140
如果你有一堆用户级别的服务，

448
00:26:10,140 --> 00:26:11,340
它们中的一个发生故障，

449
00:26:11,340 --> 00:26:15,180
除零操作，或这释放野指针，

450
00:26:15,300 --> 00:26:17,490
也许只有那台服务器崩溃，

451
00:26:17,490 --> 00:26:19,740
让操作系统的其他部分完好无损，

452
00:26:19,740 --> 00:26:20,970
然后也许你可以重启它，

453
00:26:21,270 --> 00:26:22,260
只重启那一台服务器，

454
00:26:22,260 --> 00:26:28,440
所以，也许将操作系统功能移动到用户级进程，

455
00:26:28,440 --> 00:26:30,180
可能会带来更强的健壮性，

456
00:26:30,300 --> 00:26:31,080
这是令人惊讶的，

457
00:26:31,680 --> 00:26:33,360
特别是对驱动程序来说，

458
00:26:33,570 --> 00:26:39,110
内核中或硬件设备驱动程序中存在大多数 bug ，

459
00:26:39,230 --> 00:26:41,810
如果我们能设法将设备驱动程序移出内核，

460
00:26:41,930 --> 00:26:45,230
那么我们在内核中崩溃的 bug 可能会少得多。

461
00:26:46,840 --> 00:26:47,860
而最后一个好处，

462
00:26:47,860 --> 00:26:49,840
人们想的是，

463
00:26:50,080 --> 00:26:53,680
你可以模拟一个或多个操作系统，

464
00:26:53,680 --> 00:26:54,940
在一个微内核上，

465
00:26:55,180 --> 00:26:58,330
所以，即使微内核几乎不直接为你做任何事情，

466
00:26:58,360 --> 00:27:01,600
你也可以运行 Unix 服务器或其他东西在它上面，

467
00:27:01,900 --> 00:27:06,110
可能在一台机器上不止一个。

468
00:27:08,760 --> 00:27:10,920
当然，这是今天的论文所说的，

469
00:27:11,430 --> 00:27:15,810
在微内核上运行 Unix 或 Linux 作为服务，

470
00:27:16,320 --> 00:27:20,270
这些都是人们希望的东西，

471
00:27:20,270 --> 00:27:22,190
能够获得一些[吸引力]，

472
00:27:22,190 --> 00:27:25,970
通过研究微内核设计。

473
00:27:27,010 --> 00:27:32,100
当然会有一些难题，你必须想清楚，

474
00:27:33,020 --> 00:27:34,070
一些挑战。

475
00:27:37,810 --> 00:27:41,920
如果你想设计自己的微内核，一个挑战是，

476
00:27:42,160 --> 00:27:44,170
找出 API ，

477
00:27:44,170 --> 00:27:46,300
你希望微内核系统调用接口

478
00:27:46,300 --> 00:27:47,950
尽可能的简单，

479
00:27:48,160 --> 00:27:49,960
因为关键是要让它变得很小，

480
00:27:50,290 --> 00:27:54,700
什么是最小可以系统调用，

481
00:27:54,700 --> 00:27:55,660
你可以[使用]的，

482
00:27:56,140 --> 00:27:58,030
它看起来是什么样子的，

483
00:27:59,240 --> 00:28:00,950
这不是特别清楚，

484
00:28:02,720 --> 00:28:08,370
看看最小的系统调用 API 。

485
00:28:12,190 --> 00:28:14,800
你需要最小系统调用 API ，

486
00:28:14,800 --> 00:28:15,850
它越简单越好，

487
00:28:15,880 --> 00:28:20,110
但是你必须构建一些相当复杂的功能，

488
00:28:20,110 --> 00:28:22,210
在你的最小系统调用 API 之外，

489
00:28:22,210 --> 00:28:24,520
因为内核做的不够多，

490
00:28:24,520 --> 00:28:26,770
最终，你必须能够运行程序，

491
00:28:26,770 --> 00:28:30,430
你可能试着在微内核上运行 Unix ，

492
00:28:30,430 --> 00:28:32,800
为了能够执行 fork mmap 之类的操作，

493
00:28:33,130 --> 00:28:37,060
所以作为系统调用接口的一部分，

494
00:28:37,090 --> 00:28:40,110
简单低级系统调用接口，

495
00:28:40,260 --> 00:28:41,940
它必须足够强大，

496
00:28:41,940 --> 00:28:47,150
以支持人们需要做的所有事情，

497
00:28:47,150 --> 00:28:50,900
比如 exec 和 fork ，

498
00:28:51,290 --> 00:28:53,780
甚至可能是写入时复制 fork

499
00:28:53,780 --> 00:28:57,320
或磁盘文件的内存映射，

500
00:28:57,320 --> 00:29:00,740
但这些都在一个没有文件系统的内核中，

501
00:29:01,310 --> 00:29:02,570
需要支持 exec ，

502
00:29:02,570 --> 00:29:05,030
但内核对文件一无所知。

503
00:29:06,440 --> 00:29:12,050
我们需要操作系统的其他部分，

504
00:29:12,050 --> 00:29:15,640
以某种方式确保微内核可能非常简单，

505
00:29:15,640 --> 00:29:21,340
但是现在我们需要开发一些用户级的服务，

506
00:29:21,340 --> 00:29:23,790
实现操作系统的其他部分，

507
00:29:24,270 --> 00:29:26,790
所以我们至少要做到这一点，

508
00:29:26,790 --> 00:29:29,640
可能需要解决一些设计难题，

509
00:29:30,870 --> 00:29:35,250
最后，这种安排需要大量通信，

510
00:29:35,250 --> 00:29:38,280
通过 IPC 进程间通信，

511
00:29:38,640 --> 00:29:47,300
所以会有很大的压力让 IPC 非常快，

512
00:29:47,300 --> 00:29:52,080
所以，需要知道 IPC 是否能足够快，

513
00:29:53,420 --> 00:29:56,390
让微内核保持竞争力。

514
00:29:57,700 --> 00:30:00,220
好的，一般说来，

515
00:30:00,220 --> 00:30:02,830
不仅仅是 IPC 的速度，

516
00:30:02,830 --> 00:30:03,850
但总的来说，

517
00:30:04,720 --> 00:30:09,160
有很多理由相信宏内核可以获得一定的性能，

518
00:30:09,160 --> 00:30:10,900
因为它们是集成的，

519
00:30:10,900 --> 00:30:15,460
文件系统代码可以与虚拟内存代码和内存分配代码交互，

520
00:30:15,730 --> 00:30:18,880
它是一个[快乐的]大项目。

521
00:30:19,710 --> 00:30:23,640
如果将所有这些内容拆分到单独的服务中，

522
00:30:23,640 --> 00:30:26,550
或者可能拆分到内核和用户级别，

523
00:30:26,550 --> 00:30:30,330
通过集成的方式进行优化的机会可能较少，

524
00:30:30,540 --> 00:30:34,230
然后可能会也可能不会损害性能。

525
00:30:37,200 --> 00:30:37,860
好的。

526
00:30:39,980 --> 00:30:44,270
所以这些都是期望的优势，

527
00:30:44,270 --> 00:30:46,310
以及所有挑战，

528
00:30:46,610 --> 00:30:49,670
很多微内核项目所面对的。

529
00:30:53,000 --> 00:30:54,110
因为今天的论文，

530
00:30:54,110 --> 00:30:58,220
我要告诉你们一些关于 L4 的事情，

531
00:30:58,220 --> 00:31:05,440
它是今天论文作者开发和使用的微内核。

532
00:31:07,630 --> 00:31:13,020
L4 当然不是最早的微内核，

533
00:31:13,020 --> 00:31:15,840
但它是早期微内核之一，

534
00:31:16,050 --> 00:31:19,770
从 20 世纪 80 年代开始的所有工作中，

535
00:31:20,130 --> 00:31:23,790
就工作原理而言，是相当有代表性的。

536
00:31:25,140 --> 00:31:28,830
一些目标是，

537
00:31:28,830 --> 00:31:32,550
它发展和演变了很多年，

538
00:31:32,550 --> 00:31:34,050
而且它仍然很强劲，

539
00:31:34,620 --> 00:31:35,970
如果查看维基百科上，

540
00:31:35,970 --> 00:31:39,780
你会发现 L4 有 15 到 20 种不同的变体，

541
00:31:39,780 --> 00:31:42,030
它们来了又走，有些还在这里，

542
00:31:42,780 --> 00:31:45,120
我想从 20 世纪 80 年代末开始，

543
00:31:45,750 --> 00:31:48,920
我要向你们解释的是

544
00:31:48,920 --> 00:31:51,080
我对 L4 如何工作的理解，

545
00:31:51,200 --> 00:31:54,980
在今天的论文发表的时候。

546
00:31:58,890 --> 00:32:04,810
好的，那么从高的层面来说，

547
00:32:04,840 --> 00:32:08,230
L4 当然是微型的，

548
00:32:08,230 --> 00:32:12,460
从某种意义上说，它是一个小内核，

549
00:32:12,520 --> 00:32:15,130
它只有 7 个系统调用，

550
00:32:15,790 --> 00:32:17,020
有些有点复杂，

551
00:32:17,020 --> 00:32:18,880
但它仍然只有 7 个系统调用，

552
00:32:18,910 --> 00:32:22,960
而今天的 Linux ，我最后一次统计时，有三百多个，

553
00:32:23,830 --> 00:32:26,440
甚至 xv6 是一个非常简单的内核，

554
00:32:26,440 --> 00:32:28,570
即使 xv6 也有 21 个系统调用，

555
00:32:29,230 --> 00:32:34,110
所以 L4 只有 7 个，

556
00:32:34,440 --> 00:32:36,150
所以通过这个度量很简单，

557
00:32:36,150 --> 00:32:37,320
它也不是很大，

558
00:32:37,530 --> 00:32:44,790
我认为，当这篇论文写成时，大约有 13000 行代码，

559
00:32:45,600 --> 00:32:46,620
只是没有太多，

560
00:32:46,620 --> 00:32:48,300
xv6 比这更小，

561
00:32:49,890 --> 00:32:52,860
我认为 xv6 内核可能有 6000 到 7000 行代码，

562
00:32:53,010 --> 00:32:55,410
但就内核而言， xv6 仍然非常简单，

563
00:32:55,980 --> 00:32:57,810
L4 并不比这更复杂，

564
00:32:57,810 --> 00:33:03,540
这是 Linux 的十分之一、二十分之一或三十分之一，

565
00:33:03,690 --> 00:33:04,500
是相当小的。

566
00:33:05,520 --> 00:33:09,090
它只有几个基本的抽象，

567
00:33:10,950 --> 00:33:18,810
它有任务或地址空间的概念，

568
00:33:22,170 --> 00:33:25,740
这些或多或少对应于我们在 Unix 中所说的进程，

569
00:33:25,740 --> 00:33:30,210
这是一堆从 0 开始的内存映射，

570
00:33:30,210 --> 00:33:34,210
你可以在这里执行，

571
00:33:34,510 --> 00:33:36,310
就像在进程中，

572
00:33:36,310 --> 00:33:39,620
与 xv6 的不同之处是，

573
00:33:39,680 --> 00:33:43,880
每个任务可以有多个线程，

574
00:33:45,040 --> 00:33:52,450
L4 负责在每个任务中调度多个执行线程。

575
00:33:54,260 --> 00:33:56,420
这样的部分原因是

576
00:33:56,420 --> 00:33:58,310
它有线程非常方便，

577
00:33:58,310 --> 00:34:01,280
将线程作为编程结构化工具，

578
00:34:01,460 --> 00:34:02,750
它也是，

579
00:34:03,350 --> 00:34:08,570
我不知道他们是否支持多核机器，

580
00:34:08,600 --> 00:34:09,680
在写这篇论文的时候，

581
00:34:09,680 --> 00:34:13,940
但是，他们很可能有线程，

582
00:34:13,940 --> 00:34:15,230
当然，你需要能够

583
00:34:15,230 --> 00:34:18,950
利用多个核心执行同一个程序，

584
00:34:19,130 --> 00:34:23,320
所以 L4 内核支持线程。

585
00:34:26,650 --> 00:34:29,740
所以， L4 支持任务，

586
00:34:29,740 --> 00:34:32,680
它知道任务，它知道线程，

587
00:34:32,830 --> 00:34:36,190
它也知道地址空间，

588
00:34:36,190 --> 00:34:39,130
在这个意义上，你可以告诉 L4 ，

589
00:34:39,130 --> 00:34:42,040
这是我们想要的页面映射到地址空间。

590
00:34:43,110 --> 00:34:49,980
L4 知道的另一件主要事情是进程间通信，

591
00:34:49,980 --> 00:34:53,220
每个线程都有一个标识符，

592
00:34:53,400 --> 00:34:54,360
一个线程可能会说，

593
00:34:54,360 --> 00:34:56,310
我想发送一条消息，

594
00:34:56,340 --> 00:34:59,190
它只是给另一个线程几个字节，

595
00:34:59,190 --> 00:35:00,840
这是这个标识符，

596
00:35:00,840 --> 00:35:05,540
请给另一个线程发送一条消息。

597
00:35:07,860 --> 00:35:15,350
所以，这些是任务，线程，地址空间和 IPC ，

598
00:35:15,350 --> 00:35:16,760
实际上是唯一的抽象概念，

599
00:35:16,880 --> 00:35:18,230
系统调用，

600
00:35:19,670 --> 00:35:21,380
我不知道是否能把它们全部列出来，

601
00:35:21,380 --> 00:35:27,450
但是，系统调用是，

602
00:35:27,690 --> 00:35:28,920
这里有一个线程，

603
00:35:29,160 --> 00:35:33,270
线程创建系统调用，

604
00:35:33,270 --> 00:35:38,670
你给它一个地址空间 id ，创建一个新的线程，

605
00:35:38,670 --> 00:35:41,580
如果地址空间分配已经存在，

606
00:35:41,580 --> 00:35:43,140
它会给你创建一个新的任务，

607
00:35:43,320 --> 00:35:45,780
将线程和任务创建结合在一起。

608
00:35:48,030 --> 00:35:52,210
有发送和接收，

609
00:35:53,280 --> 00:35:57,210
不同风格的发送和接收 IPC 系统调用。

610
00:35:59,580 --> 00:36:05,430
有一种方法将页面映射到你的或其他地址空间，

611
00:36:05,430 --> 00:36:11,220
所以你可以让 L4 改变你的地址空间的设置方式，

612
00:36:11,220 --> 00:36:13,530
你的页表映射的设置方式，

613
00:36:13,560 --> 00:36:15,510
但是你也可以要求 L4 ，

614
00:36:15,540 --> 00:36:17,820
如果你有正确的权限，

615
00:36:17,820 --> 00:36:21,480
可以更改另一个任务的地址空间的设置方式。

616
00:36:21,860 --> 00:36:28,970
因此，这实际上是通过 IPC 完成的，

617
00:36:28,970 --> 00:36:30,680
将通过 IPC 接口，

618
00:36:30,680 --> 00:36:33,080
将发送一个特殊的 IPC 消息，

619
00:36:33,230 --> 00:36:35,900
内核知道目标线程，

620
00:36:35,900 --> 00:36:39,590
并且内核将修改目标线程地址空间。

621
00:36:41,050 --> 00:36:43,030
这是如果你创建一个新的线程，

622
00:36:43,030 --> 00:36:45,580
实际上新创建的线程完全没有内存，

623
00:36:46,720 --> 00:36:47,710
所以如果你想创建一个线程，

624
00:36:47,710 --> 00:36:49,780
你首先调用线程创建系统调用

625
00:36:49,780 --> 00:36:52,660
来创建新的线程，任务和地址空间，

626
00:36:52,720 --> 00:36:54,100
然后你发送它，

627
00:36:54,370 --> 00:36:56,230
如果你创建一个神奇的 IPC ，

628
00:36:56,230 --> 00:37:00,070
来发送一些你自己的内存映射，

629
00:37:00,070 --> 00:37:02,260
你已经准备好的指令或数据，

630
00:37:02,800 --> 00:37:04,840
为了将内存映射到新的，

631
00:37:05,530 --> 00:37:07,540
新的任务地址空间，

632
00:37:07,930 --> 00:37:11,260
然后发送一个特殊的 IPC 到这个新的任务，

633
00:37:11,260 --> 00:37:14,800
通过程序计数器和你想开始执行的堆栈指针，

634
00:37:15,100 --> 00:37:16,060
它将开始执行，

635
00:37:16,060 --> 00:37:19,480
并在要求启动程序计数器处设置内存。

636
00:37:21,740 --> 00:37:24,140
有一种方法不通过系统调用，

637
00:37:24,320 --> 00:37:25,700
事实上，我不知道它是怎么工作的，

638
00:37:25,700 --> 00:37:30,700
但是特权任务可以映射设备硬件，

639
00:37:32,980 --> 00:37:36,820
映射设备控制寄存器到它们自己的地址空间。

640
00:37:39,980 --> 00:37:41,990
所以， L4 对设备不是很了解，

641
00:37:41,990 --> 00:37:44,060
比如磁盘或网卡，

642
00:37:44,060 --> 00:37:48,830
但是用户级软件可以直接访问，

643
00:37:51,160 --> 00:37:53,350
用户级软件可以实现设备驱动，

644
00:37:53,350 --> 00:37:55,720
用户级软件可以直接访问设备硬件。

645
00:37:56,610 --> 00:37:59,580
有一种方法可以，

646
00:38:00,220 --> 00:38:03,430
你可以告诉 L4 打开中断，

647
00:38:05,870 --> 00:38:07,370
来自任何设备的任何中断，

648
00:38:07,520 --> 00:38:09,980
L4 并不知道哪台设备打开。

649
00:38:10,400 --> 00:38:13,520
把中断给 IPC 消息。

650
00:38:14,070 --> 00:38:20,070
所以设备驱动程序任务不仅读写设备硬件，

651
00:38:20,070 --> 00:38:22,620
也会告诉 L4 在设备中断的时候，

652
00:38:22,680 --> 00:38:24,720
请给我发送一条 IPC 消息，

653
00:38:25,350 --> 00:38:26,670
通知我中断。

654
00:38:27,820 --> 00:38:32,380
最后，一个任务告诉内核

655
00:38:32,410 --> 00:38:37,390
给它另一个任务页面错误的通知，

656
00:38:38,470 --> 00:38:41,020
所以，如果这个任务出现页面错误，

657
00:38:41,140 --> 00:38:44,830
L4 会将其转换为 IPC 消息，

658
00:38:45,730 --> 00:38:49,120
并将它发送到另一个专用的分页任务，

659
00:38:49,930 --> 00:38:52,990
将页面错误通知发送给指定的页面任务，

660
00:38:52,990 --> 00:38:57,250
所以每个任务都有一个关联的分页任务，来处理它的页面错误，

661
00:38:57,460 --> 00:39:01,600
这就是你把钩子挂在页面错误上的方式，

662
00:39:01,600 --> 00:39:05,590
用来实现写入时复制， fork 或懒分配。

663
00:39:09,060 --> 00:39:11,550
内核就是这样，在 L4 中没有其他东西，

664
00:39:11,550 --> 00:39:12,900
没有文件系统，

665
00:39:13,230 --> 00:39:16,530
L4 本身并不支持 fork exec 之类的功能，

666
00:39:16,830 --> 00:39:21,510
除了这些非常简单的 IPC 之外，没有任何通信，

667
00:39:21,990 --> 00:39:22,560
比如没有管道，

668
00:39:22,560 --> 00:39:24,060
没有设备驱动程序，

669
00:39:24,060 --> 00:39:25,290
没有网络支持，什么都没有，

670
00:39:26,250 --> 00:39:27,750
如果你需要其他东西的话，

671
00:39:28,200 --> 00:39:31,890
你需要提供作为用户级别的服务。

672
00:39:37,080 --> 00:39:40,760
好的，那么一件事是，

673
00:39:41,630 --> 00:39:46,400
L4 支持线程切换，

674
00:39:46,520 --> 00:39:50,750
L4 执行调度和上下文切换，

675
00:39:51,350 --> 00:39:54,710
以便在多个线程中复用单个 CPU ，

676
00:39:54,710 --> 00:39:57,770
你会发现它做的方式完全不令人惊讶，

677
00:39:58,160 --> 00:40:03,860
L4 为每个线程、每个任务保存了寄存器，

678
00:40:04,580 --> 00:40:05,960
当它执行线程时，

679
00:40:05,960 --> 00:40:10,070
执行线程会跳入用户空间，切换页表，

680
00:40:10,070 --> 00:40:12,860
所以，那个线程将在用户空间中执行一段时间，

681
00:40:13,070 --> 00:40:15,170
然后可能定时器中断响起，

682
00:40:15,170 --> 00:40:17,270
这是 L4 所知道的一种设备，

683
00:40:17,600 --> 00:40:19,910
定时器中断会在一段时间后触发，

684
00:40:20,280 --> 00:40:21,330
中断 L4 ，

685
00:40:21,330 --> 00:40:26,010
L4 将保存这个任务的用户寄存器到任务中，

686
00:40:26,340 --> 00:40:29,280
一个任务线程数组结构，

687
00:40:29,520 --> 00:40:32,900
会将这个线程寄存器保存起来，

688
00:40:33,320 --> 00:40:35,150
从循环中选择一个新任务运行，

689
00:40:35,180 --> 00:40:37,460
这与 xv6 中的调度循环非常像，

690
00:40:37,850 --> 00:40:43,820
从先前保存的寄存器恢复这个任务的寄存器，

691
00:40:44,030 --> 00:40:45,230
切换页表，

692
00:40:45,230 --> 00:40:47,930
然后跳到这个任务，并执行一段时间，

693
00:40:48,950 --> 00:40:50,300
直到定时器中断停止

694
00:40:50,300 --> 00:40:54,620
或直到这个任务 yield ，

695
00:40:54,800 --> 00:40:58,040
我想这里可能还有一个 yield 系统调用或类似的调用。

696
00:40:59,230 --> 00:41:00,910
一个任务可能会让出 CPU ，

697
00:41:00,910 --> 00:41:04,120
或者任务可能会等待接收 IPC ，

698
00:41:04,120 --> 00:41:05,020
在这种情况下，

699
00:41:06,090 --> 00:41:08,040
我们跳回 L4 ，

700
00:41:08,040 --> 00:41:12,540
L4 看到寄存器切换到新任务并运行，

701
00:41:12,600 --> 00:41:19,170
所以 L4 的线程切换部分是非常熟悉的。

702
00:41:25,350 --> 00:41:27,060
那个。

703
00:41:30,130 --> 00:41:31,630
我之前提到过这件事，

704
00:41:31,630 --> 00:41:34,390
我想说，因为它出现了，

705
00:41:34,970 --> 00:41:37,910
我想写在这里，

706
00:41:39,830 --> 00:41:40,910
这个分页的概念，

707
00:41:40,910 --> 00:41:47,390
如果进程出现页面错误，

708
00:41:48,620 --> 00:41:49,760
trap 出现在内核，

709
00:41:49,850 --> 00:41:52,370
并且内核将页面错误转换为 IPC 消息，

710
00:41:52,370 --> 00:41:54,710
发给指定的分页任务，

711
00:41:54,860 --> 00:41:56,390
并告诉它地址，

712
00:41:57,650 --> 00:41:59,420
告诉这个分页任务，

713
00:42:00,260 --> 00:42:04,400
哪个线程出了故障，以及它在哪个地址上出了故障。

714
00:42:05,050 --> 00:42:06,280
然后分页任务，

715
00:42:06,340 --> 00:42:09,310
如果它想实现懒分配，

716
00:42:09,610 --> 00:42:13,660
也许这个线程写入一些没有分配的内存，

717
00:42:13,660 --> 00:42:17,170
我想它要求懒分配，

718
00:42:17,410 --> 00:42:21,670
它的分页任务将负责从 L4 分配一些内存，

719
00:42:22,570 --> 00:42:25,930
发送一个特殊的 IPC ，

720
00:42:26,140 --> 00:42:32,110
导致内存映射到这个任务中，

721
00:42:32,110 --> 00:42:36,670
然后发送 IPC 以恢复这个线程的执行。

722
00:42:38,320 --> 00:42:40,060
所以就有了分页任务的概念，

723
00:42:40,060 --> 00:42:41,710
来实现所有事情，

724
00:42:41,710 --> 00:42:45,040
xv6 或 Linux 在页面错误处理程序中实现的，

725
00:42:45,040 --> 00:42:48,040
你可以用这个实现写入时复制 fork ，

726
00:42:48,040 --> 00:42:48,790
如果你喜欢的话，

727
00:42:48,790 --> 00:42:50,950
或这内存映射文件，

728
00:42:50,950 --> 00:42:53,500
它们都使用这些分页任务中的一个。

729
00:42:53,500 --> 00:42:58,850
它们是一种强大的用户级方式，

730
00:42:59,270 --> 00:43:02,480
使用页面错误驱动的技巧。

731
00:43:03,710 --> 00:43:04,910
所以这是一个例子，

732
00:43:05,120 --> 00:43:06,170
许多例子中的一个，

733
00:43:06,170 --> 00:43:11,120
像 L4 这样的微内核可能更灵活，

734
00:43:11,120 --> 00:43:12,170
对于用户程序来说，

735
00:43:12,170 --> 00:43:13,280
跟传统内核比起来，

736
00:43:13,550 --> 00:43:16,490
比如，如果你让 Linux 做一些额外的事情，

737
00:43:16,490 --> 00:43:20,150
比如，可能一些，

738
00:43:20,150 --> 00:43:22,400
如果 Linux 没有写入时复制 fork ，

739
00:43:22,400 --> 00:43:24,230
而你想要写入时复制 fork ，

740
00:43:24,440 --> 00:43:27,680
如果不修改内核，就无法在 Linux 中实现它，

741
00:43:28,040 --> 00:43:29,930
而且没有办法为 Linux 编写可移植的代码，

742
00:43:30,200 --> 00:43:32,690
可移植的用户级代码，

743
00:43:32,690 --> 00:43:34,790
它可以实现写入时复制 fork 之类的东西。

744
00:43:38,020 --> 00:43:38,770
这并不完全正确，

745
00:43:38,770 --> 00:43:39,940
但这是非常困难的，

746
00:43:39,970 --> 00:43:43,330
而 L4 相对简单，

747
00:43:43,330 --> 00:43:45,280
L4 已完全为你设置好，

748
00:43:45,280 --> 00:43:46,870
以便你能编写用户级代码，

749
00:43:46,900 --> 00:43:51,340
它获取页面错误用来实现写入时复制 fork ，

750
00:43:51,810 --> 00:43:55,170
所有都在用户空间中，而不必扰乱内核。

751
00:43:58,030 --> 00:44:03,840
好的，关于 L4 如何工作，有没有什么问题？

752
00:44:05,590 --> 00:44:10,540
哦，抱歉，你能解释一下线程和任务的区别吗？

753
00:44:10,540 --> 00:44:15,610
是的，任务对应于，

754
00:44:15,610 --> 00:44:19,290
它就像 xv6 中的进程，

755
00:44:19,290 --> 00:44:21,510
它有一些内存和地址空间，

756
00:44:21,630 --> 00:44:24,660
你可以在其中执行用户代码，

757
00:44:24,660 --> 00:44:28,270
如果你在 xv6 中有一个进程，

758
00:44:28,300 --> 00:44:30,640
那么它只能有一个控制线程，

759
00:44:30,850 --> 00:44:35,410
在一个 xv6 中的进程内执行，

760
00:44:35,440 --> 00:44:39,490
但是在现代操作系统和 L4 中，

761
00:44:40,070 --> 00:44:42,350
在单个进程中，在单个地址空间中，

762
00:44:42,350 --> 00:44:44,750
如果你有多个内核，

763
00:44:45,410 --> 00:44:50,690
你可以让多个内核执行单个任务，

764
00:44:51,440 --> 00:44:57,710
通常每个核心都在任务的地址空间内设置自己的堆栈。

765
00:44:58,480 --> 00:44:59,200
所以，如果，

766
00:44:59,410 --> 00:44:59,980
这意味着你可以，

767
00:44:59,980 --> 00:45:04,060
比如，编写一个程序可以获得并发速度，

768
00:45:04,060 --> 00:45:07,210
通过多核硬件增加性能，

769
00:45:07,210 --> 00:45:11,800
通过多个线程每个运行在一个核心上，

770
00:45:12,040 --> 00:45:13,120
从而完成更多工作。

771
00:45:15,400 --> 00:45:16,690
好的，我明白了，谢谢。

772
00:45:16,930 --> 00:45:17,590
好的。

773
00:45:21,950 --> 00:45:25,300
好的，如你所见，

774
00:45:25,300 --> 00:45:29,560
这是一个严重依赖 IPC 的设计，

775
00:45:29,770 --> 00:45:31,720
因为你要与你的文件服务器交互，

776
00:45:31,720 --> 00:45:34,720
文件服务器想要与设备驱动器服务器交互，

777
00:45:34,900 --> 00:45:37,690
你会看到 IPC 信息来回飞来飞去，

778
00:45:37,720 --> 00:45:41,380
对于每个系统调用，对于每个页面错误，对于每个设备中断，

779
00:45:41,470 --> 00:45:43,600
IPC 系统需要速度非常快，

780
00:45:44,260 --> 00:45:51,940
现在我们开始讨论

781
00:45:51,940 --> 00:45:56,050
微内核故事中的一个严重的潜在缺陷。

782
00:46:04,720 --> 00:46:10,150
首先让我给你们展示一个简单但是非常慢的设计，

783
00:46:10,880 --> 00:46:15,410
模仿 Unix 管道的 IPC ，

784
00:46:15,410 --> 00:46:16,190
我之所以提到这一点，

785
00:46:16,190 --> 00:46:21,950
是因为一些早期的微内核以这种方式工作，

786
00:46:21,950 --> 00:46:23,030
与我即将向你们展示的类似，

787
00:46:23,090 --> 00:46:24,290
结果证明是很慢的。

788
00:46:25,430 --> 00:46:32,620
好的，假设你有两个进程，

789
00:46:32,620 --> 00:46:33,760
我们有 P1 ，

790
00:46:34,120 --> 00:46:36,850
P1 想要向 P2 发送消息。

791
00:46:39,710 --> 00:46:41,210
那么这应该如何运作，

792
00:46:41,240 --> 00:46:45,530
一种可能是有一个 send 系统调用，

793
00:46:46,320 --> 00:46:48,570
你给 send 系统调用一个 id ，

794
00:46:48,570 --> 00:46:51,460
那个你想要发送消息的线程，

795
00:46:51,460 --> 00:46:56,590
以及指向消息的字节的指针，

796
00:46:56,590 --> 00:46:59,320
可能是你想要发送到那个进程，

797
00:46:59,320 --> 00:47:01,900
所以这个系统调用将跳转到内核，

798
00:47:02,110 --> 00:47:07,150
也许我们可以设计这种仿照管道和 xv6 的方案，

799
00:47:07,420 --> 00:47:11,500
所以你可以想象有一个等待消息的缓冲区，

800
00:47:11,590 --> 00:47:13,720
也许 P2 正在做其他的事情，

801
00:47:13,930 --> 00:47:16,210
可能它是服务器，正在为别人的请求提供服务，

802
00:47:16,210 --> 00:47:18,160
所以它还没有准备好处理你的请求，

803
00:47:18,640 --> 00:47:23,900
您可以想象，也许内核中有一个等待消息的缓冲区，

804
00:47:23,900 --> 00:47:24,890
就像管道缓冲区一样，

805
00:47:25,130 --> 00:47:26,210
当你调用 send 时，

806
00:47:27,180 --> 00:47:30,150
它会将你的消息附加到这个缓冲区，

807
00:47:30,150 --> 00:47:31,620
等待 P2 接收消息。

808
00:47:32,070 --> 00:47:34,350
事实上几乎总是，

809
00:47:36,060 --> 00:47:39,570
在这些系统中，你很少仅仅想要发送一条信息，

810
00:47:39,840 --> 00:47:41,910
你几乎总是想得到回应，

811
00:47:41,910 --> 00:47:46,050
你需要 RPC ，远程过程调用操作，

812
00:47:46,050 --> 00:47:49,770
所以， P1 可能会紧跟其后的是接收，

813
00:47:49,770 --> 00:47:52,140
以尝试获得响应，

814
00:47:52,320 --> 00:47:53,040
但总的来说，

815
00:47:53,500 --> 00:47:56,410
让我们暂时设想一下我们正在进行单向 IPC ，

816
00:47:56,410 --> 00:48:01,330
所以 send 会将你的消息附加到内核缓冲区中，

817
00:48:01,600 --> 00:48:05,770
我们必须将消息字节从用户空间复制到这个缓冲区，

818
00:48:05,860 --> 00:48:08,830
然后返回，进程一可以做一些其他事情，

819
00:48:08,830 --> 00:48:11,650
比如可能准备接收回复，

820
00:48:12,430 --> 00:48:13,240
过了一会儿，

821
00:48:13,240 --> 00:48:18,060
P2 想要接收下一条消息，

822
00:48:18,060 --> 00:48:20,100
只要调用 recv 系统调用，

823
00:48:21,290 --> 00:48:26,180
它将返回发送者的 id ，

824
00:48:26,800 --> 00:48:30,070
并将消息复制到 P2 的内存中，

825
00:48:30,550 --> 00:48:33,430
把前面的消息从队列里拿出来，

826
00:48:33,430 --> 00:48:34,780
复制到 P2 的内存里，

827
00:48:36,550 --> 00:48:37,420
然后返回。

828
00:48:40,800 --> 00:48:42,330
所以。

829
00:48:46,890 --> 00:48:49,380
这个叫做，

830
00:48:50,130 --> 00:48:52,290
有一些词来形容这个，

831
00:48:52,350 --> 00:48:55,590
你会在今天的论文中看到，

832
00:48:55,650 --> 00:48:59,520
这称为异步方案，

833
00:49:01,230 --> 00:49:04,320
因为 P1 发送消息而不需要等待任何东西，

834
00:49:04,320 --> 00:49:06,390
它只是追加到队列并返回，

835
00:49:07,170 --> 00:49:09,570
它被称为缓冲系统，

836
00:49:12,520 --> 00:49:16,750
因为内核复制这个消息到缓冲区中，

837
00:49:16,750 --> 00:49:18,880
到 send 的内部缓冲区中，

838
00:49:18,880 --> 00:49:21,100
然后稍后当接收发生时，

839
00:49:21,100 --> 00:49:23,380
它将消息从缓冲区复制到目标，

840
00:49:23,380 --> 00:49:25,210
所以这是异步缓冲。

841
00:49:27,040 --> 00:49:29,770
如果你正在进行完整的请求响应对，

842
00:49:29,920 --> 00:49:31,240
然后 P1 将调用 send ，

843
00:49:31,240 --> 00:49:32,230
send 将会返回，

844
00:49:32,260 --> 00:49:33,820
然后 P1 直接，

845
00:49:33,880 --> 00:49:37,390
让我们假设这两组缓冲区，

846
00:49:37,390 --> 00:49:38,410
每个方向一组，

847
00:49:38,860 --> 00:49:41,200
P1 立即调用 recv ，

848
00:49:42,880 --> 00:49:48,400
recv 将等待某些内容出现在应答缓冲区中，

849
00:49:48,640 --> 00:49:50,500
所以它不得不让出 CPU ，

850
00:49:50,500 --> 00:49:51,280
它会做一些事情，

851
00:49:51,280 --> 00:49:53,830
在 xv6 中，调用 sleep 并让出 CPU ，

852
00:49:55,030 --> 00:49:56,800
在单个 CPU 系统上，

853
00:49:56,800 --> 00:49:58,480
可能只有在这一点上，

854
00:49:58,690 --> 00:50:01,990
P1 放弃 CPU ， P2 才可以运行。

855
00:50:02,630 --> 00:50:06,740
事实上，这个时代的硬件几乎都是单核的，

856
00:50:07,910 --> 00:50:11,180
当然，这篇论文是在单核硬件上运行的，

857
00:50:11,180 --> 00:50:12,770
所以 P1 将会，

858
00:50:13,040 --> 00:50:15,440
P1 执行， P1 不执行，

859
00:50:15,440 --> 00:50:17,510
直到 P1 最终获得 CPU ，

860
00:50:17,510 --> 00:50:20,300
recv 等待这里出现的消息，

861
00:50:20,480 --> 00:50:23,780
并且只有到那时， P2 才能被调度，调用 recv ，

862
00:50:24,320 --> 00:50:25,670
recv 复制消息，

863
00:50:25,700 --> 00:50:28,970
然后 P2 调用它的 send ，

864
00:50:32,800 --> 00:50:34,120
追加其回复。

865
00:50:36,110 --> 00:50:38,630
然后 send 系统调用返回到 P2 ，

866
00:50:38,630 --> 00:50:41,150
在某一时刻， P2 可能会让出 CPU ，

867
00:50:41,180 --> 00:50:42,530
可能是计时器响起，

868
00:50:42,830 --> 00:50:45,890
然后 P1 将在内核中恢复执行，

869
00:50:46,190 --> 00:50:47,780
看到那里有一条消息，

870
00:50:47,780 --> 00:50:49,370
然后返回到用户空间，

871
00:50:50,330 --> 00:50:51,530
所以这意味着，

872
00:50:51,530 --> 00:50:54,080
这个设计是缓慢的设计。

873
00:50:54,990 --> 00:50:59,010
为了得到请求和响应，

874
00:50:59,430 --> 00:51:06,510
需要四个系统调用，两个 send ，两个 recv ，

875
00:51:06,690 --> 00:51:08,920
每一次用户内核穿越，

876
00:51:08,920 --> 00:51:11,080
每一次都相当昂贵，

877
00:51:11,380 --> 00:51:13,990
这里需要休眠，

878
00:51:14,110 --> 00:51:17,770
这个 recv 必须休眠，等待数据出现，

879
00:51:18,040 --> 00:51:21,100
有一个完整调用调度器循环，

880
00:51:21,100 --> 00:51:23,590
以及从 P1 到 P2 的上下文切换，

881
00:51:24,100 --> 00:51:25,180
才能实现这个。

882
00:51:25,180 --> 00:51:29,770
每个内核穿越和上下文切换都可能是昂贵的，

883
00:51:29,770 --> 00:51:32,800
因为你每次跨越内核用户边界时，

884
00:51:32,800 --> 00:51:34,360
你交换页表，

885
00:51:34,540 --> 00:51:37,360
那个，

886
00:51:37,930 --> 00:51:42,640
它几乎肯定会扰乱 CPU 缓存，

887
00:51:42,640 --> 00:51:44,410
比如更改页表，

888
00:51:44,500 --> 00:51:49,240
可能会刷新 TLB ，虚拟内存查找缓存，

889
00:51:49,240 --> 00:51:50,530
这会让事情变慢。

890
00:51:52,220 --> 00:51:55,980
所以，这是一种相当慢的方式，

891
00:51:56,070 --> 00:51:58,890
涉及大量内核穿越消息，

892
00:51:58,890 --> 00:52:01,050
在用户和内核之间复制消息，

893
00:52:01,110 --> 00:52:03,810
可能分配缓冲区等等，

894
00:52:04,830 --> 00:52:06,060
但事实证明，

895
00:52:06,060 --> 00:52:08,520
对于这个[]案例，

896
00:52:08,520 --> 00:52:11,250
你发送请求，并且希望得到响应，

897
00:52:11,370 --> 00:52:17,610
你可以将其简化为相当简单的设计，

898
00:52:17,970 --> 00:52:20,310
事实上，这就是它前进的方向。

899
00:52:21,870 --> 00:52:24,840
这是在一份著名的论文上发表的，

900
00:52:25,080 --> 00:52:27,570
称为通过内核设计改进 IPC ，

901
00:52:27,720 --> 00:52:30,450
在今天的论文前几年发表。

902
00:52:34,670 --> 00:52:36,890
所以它做了几件不同的事情，

903
00:52:36,950 --> 00:52:40,400
首先，它是同步的。

904
00:52:42,330 --> 00:52:43,320
这就是，

905
00:52:44,700 --> 00:52:51,300
这里没有丢弃任何东西，

906
00:52:51,300 --> 00:52:52,590
返回并等待，

907
00:52:52,740 --> 00:52:56,190
让另一个进程提取数据，

908
00:52:56,520 --> 00:52:57,420
它感觉像，

909
00:52:57,420 --> 00:53:02,730
不是 send 等待 recv 和 recv 等待 send 。

910
00:53:02,730 --> 00:53:08,430
所以， P1 想要发送，我调用 send ，

911
00:53:11,280 --> 00:53:14,520
它不会将我的消息复制到缓冲区，

912
00:53:14,520 --> 00:53:17,790
P1 现在直接，

913
00:53:17,790 --> 00:53:21,800
如果 P1 在 L4 内核中发送，

914
00:53:21,800 --> 00:53:24,290
等待 P2 调用 recv ，

915
00:53:24,470 --> 00:53:28,460
并且如果 P2 已经在内核中等待调用 recv ，

916
00:53:28,670 --> 00:53:33,910
P2 要么已经在内核中，等待调用 recv ，

917
00:53:34,300 --> 00:53:37,270
或者 P1 send 并等待，

918
00:53:37,300 --> 00:53:39,340
等待 P2 的下一个调用 recv ，

919
00:53:39,370 --> 00:53:42,280
当两者都到达这里时，

920
00:53:42,430 --> 00:53:46,190
当 P1 在内核中，它调用 send ，

921
00:53:46,190 --> 00:53:47,990
P2 在内核中，调用 recv ，

922
00:53:48,050 --> 00:53:49,670
只有那时才会有事情发生，

923
00:53:49,790 --> 00:53:55,510
这个速度快的原因之一是，

924
00:53:55,810 --> 00:53:57,610
如果 P2 已经在 recv ，

925
00:53:57,610 --> 00:54:01,910
然后 P1 ，当它在内核中执行 send 时，

926
00:54:01,940 --> 00:54:07,490
可以没有上下文切换或通用调度，

927
00:54:07,550 --> 00:54:11,880
可以直接跳回 P2 的用户空间，

928
00:54:11,910 --> 00:54:15,260
就像是从这个 recv 返回，

929
00:54:15,260 --> 00:54:17,480
这是一条通过内核的更快的路径，

930
00:54:17,570 --> 00:54:22,850
比起保存寄存器，放弃 CPU ，调用调度器，

931
00:54:23,210 --> 00:54:25,160
并找到一个新的进程来运行，

932
00:54:25,160 --> 00:54:29,750
相反， P1 send 知道有等待的 recv ，

933
00:54:29,870 --> 00:54:35,300
然后立刻跳到了 P2 ，

934
00:54:35,930 --> 00:54:37,610
就像它是从 recv 返回一样。

935
00:54:39,080 --> 00:54:43,460
他们开发的方案也是无缓冲的，

936
00:54:47,540 --> 00:54:48,920
它可以部分做到这一点，

937
00:54:48,920 --> 00:54:50,660
因为它是同步的，

938
00:54:52,220 --> 00:54:55,160
当 send 和 recv 都在内核中，

939
00:54:55,220 --> 00:54:57,650
信息可以，

940
00:54:58,040 --> 00:54:59,870
send 发送一些信息，

941
00:55:00,780 --> 00:55:04,950
内核可以直接将消息从用户空间复制到用户空间，

942
00:55:04,950 --> 00:55:08,250
而不必首先复制到内核中，然后再从内核中返回，

943
00:55:08,430 --> 00:55:13,050
由于双方都在等待对方的系统调用，

944
00:55:13,050 --> 00:55:13,950
发生的事，

945
00:55:14,040 --> 00:55:17,880
这意味着它们在等待这两个指针已经知道，

946
00:55:17,880 --> 00:55:21,970
recv 指定它希望将消息存放在何处，

947
00:55:22,060 --> 00:55:22,990
所以，在这一点上，

948
00:55:23,260 --> 00:55:26,170
我们知道这两个地址，然后内核可以直接复制，

949
00:55:26,200 --> 00:55:27,970
而不是通过内核。

950
00:55:29,160 --> 00:55:35,510
如果消息非常小，

951
00:55:35,510 --> 00:55:37,310
可能只有几十个字节，

952
00:55:37,340 --> 00:55:42,200
然后，它可以在没有任何复制的情况下在寄存器中传递，

953
00:55:45,270 --> 00:55:46,830
你可以称之为零拷贝。

954
00:55:49,810 --> 00:55:53,740
请记住，只有当 P2 已经处于 recv 状态时， send 才会继续，

955
00:55:53,740 --> 00:55:56,680
send 直接跳转到 P2 ，

956
00:55:56,770 --> 00:55:59,230
这条通过内核的代码路径

957
00:55:59,530 --> 00:56:03,550
注意不会干扰一堆寄存器，

958
00:56:03,790 --> 00:56:06,400
这意味着 P1 可以把它的系统调用，

959
00:56:06,430 --> 00:56:07,900
如果消息很短，

960
00:56:07,990 --> 00:56:11,680
它可以把消息放在某些指定的寄存器中，

961
00:56:11,680 --> 00:56:16,240
内核保证在 P2 之前保留这些寄存器，

962
00:56:16,240 --> 00:56:17,050
这意味着，

963
00:56:18,370 --> 00:56:23,440
当内核作为 send 的结果从 recv 系统调用返回时，

964
00:56:23,680 --> 00:56:27,790
这些指定寄存器的内容保存了那个消息，

965
00:56:28,120 --> 00:56:31,480
根本不需要从一个内存复制到另一个内存，

966
00:56:31,900 --> 00:56:33,160
根本不用移动，

967
00:56:33,160 --> 00:56:34,690
它们只是在寄存器中，

968
00:56:34,690 --> 00:56:36,430
在那里它们可以非常快地被访问。

969
00:56:38,770 --> 00:56:41,470
这当然只适用于小信息，

970
00:56:41,980 --> 00:56:49,200
对于非常大的消息， L4 可以在 IPC 消息中携带页面映射，

971
00:56:49,200 --> 00:56:51,150
所以对于巨大的信息来说，

972
00:56:53,600 --> 00:56:57,320
比如从文件里读取块之类的结果，

973
00:56:59,840 --> 00:57:03,260
你可以只发送将映射到目标地址空间的页面，

974
00:57:03,260 --> 00:57:05,420
同样不需要任何复制。

975
00:57:06,390 --> 00:57:08,850
所以它是通过页面映射来完成的，

976
00:57:09,330 --> 00:57:10,770
提供页面，

977
00:57:11,540 --> 00:57:17,290
或提供访问权限以共享页面。

978
00:57:18,390 --> 00:57:20,100
所以小消息是快的，

979
00:57:20,580 --> 00:57:22,380
大消息也是相当快的，

980
00:57:22,380 --> 00:57:24,420
你仍然需要根据目标调整页表，

981
00:57:24,420 --> 00:57:26,280
但这比复制要快得多。

982
00:57:27,180 --> 00:57:30,150
L4 玩的最后一个把戏是，

983
00:57:30,270 --> 00:57:34,920
注意，如果你正在对请求和响应执行 RPC ，

984
00:57:35,040 --> 00:57:42,380
是非常程式化的对等的系统调用，

985
00:57:42,380 --> 00:57:44,900
你也可以将系统调用合并起来，

986
00:57:44,930 --> 00:57:48,650
合并 send 和 recv 系统调用，以减少内核穿越，

987
00:57:48,650 --> 00:57:51,260
所以，对于 RPC 的特殊情况，

988
00:57:51,260 --> 00:57:54,930
这几乎总是人们在做的事情，

989
00:57:55,500 --> 00:57:56,580
当他们使用 IPC 时，

990
00:57:56,580 --> 00:57:58,680
这里有一个 call 系统调用，

991
00:58:00,790 --> 00:58:06,470
call 基本上是 send 加 recv 的组合，

992
00:58:08,640 --> 00:58:10,680
但是没有返回到用户空间，

993
00:58:10,680 --> 00:58:13,260
然后重新进入内核空间，

994
00:58:13,260 --> 00:58:17,090
这是一对系统调用执行的，

995
00:58:17,300 --> 00:58:19,100
在服务器端，

996
00:58:19,100 --> 00:58:22,230
只有一个调用，

997
00:58:22,230 --> 00:58:27,270
可以发送来自一个系统调用的应答，

998
00:58:27,270 --> 00:58:33,850
然后等待来自任何人的下一次系统调用的请求消息。

999
00:58:34,690 --> 00:58:37,660
这是一个回应的发送，

1000
00:58:37,660 --> 00:58:40,420
但是等待接收下一个请求，

1001
00:58:40,600 --> 00:58:43,270
这又一次将内核穿越的数量减少了一半，

1002
00:58:44,500 --> 00:58:45,880
事实证明，

1003
00:58:46,000 --> 00:58:49,900
所有这些优化的总和，

1004
00:58:49,930 --> 00:58:52,420
现在对于较短的 RPC ，

1005
00:58:52,420 --> 00:58:57,210
它是一个典型的工作负载，

1006
00:58:57,360 --> 00:59:02,120
所有这些会导致加速 20 倍。

1007
00:59:02,990 --> 00:59:04,640
这是他们的论文所说的，

1008
00:59:04,640 --> 00:59:06,530
比以前的系统快了 20 倍，

1009
00:59:06,530 --> 00:59:10,880
大概有点像我在之前的设计中展示的。

1010
00:59:12,880 --> 00:59:14,320
所以这是一个令人印象深刻的，

1011
00:59:15,980 --> 00:59:19,910
这篇论文是在几年前由一些相同的作者发表的，

1012
00:59:19,910 --> 00:59:21,440
但在人们阅读之前的几年，

1013
00:59:21,440 --> 00:59:26,990
这让人们对微内核有了更多的好感。

1014
00:59:27,780 --> 00:59:30,150
IPC 是可以相当快的。

1015
00:59:32,240 --> 00:59:37,450
关于 L4 玩的这些 IPC 技巧，有什么问题吗？

1016
00:59:39,340 --> 00:59:40,990
是的，我想我错过了这个，

1017
00:59:40,990 --> 00:59:46,720
但是，当进程发送有接收消息时，

1018
00:59:46,900 --> 00:59:48,700
它什么时候在使用那个系统调用？

1019
00:59:50,200 --> 00:59:53,830
好的，实际上，对于 RPC ，对于请求响应，

1020
00:59:53,860 --> 01:00:01,540
事实上，进程使用这对系统调用，

1021
01:00:01,570 --> 01:00:03,850
而不是 send 和 recv 。

1022
01:00:04,420 --> 01:00:07,330
所以，是的， call 有两个参数，

1023
01:00:07,330 --> 01:00:11,200
你要发送的消息和放置响应的位置，

1024
01:00:11,320 --> 01:00:13,270
在内核内部，只是将这两者结合起来，

1025
01:00:13,570 --> 01:00:15,370
你可以认为这是一种 hack ，

1026
01:00:15,370 --> 01:00:19,510
但由于 IPC 非常频繁，

1027
01:00:20,160 --> 01:00:24,590
它值得使用一些 hack 来让它更快。

1028
01:00:25,340 --> 01:00:28,070
在上面的图表里，在方框中，

1029
01:00:28,070 --> 01:00:32,390
你让 P2 运行 recv 系统调用，

1030
01:00:32,510 --> 01:00:35,480
是什么促使 P2 。

1031
01:00:37,280 --> 01:00:40,130
好的，在我的 RPC 世界里，

1032
01:00:40,190 --> 01:00:42,050
我们有客户端，

1033
01:00:43,840 --> 01:00:46,240
它们向服务器发送请求，

1034
01:00:49,940 --> 01:00:51,710
服务器将做一些回应，

1035
01:00:51,710 --> 01:00:53,690
所以既然 P2 是服务器，

1036
01:00:53,690 --> 01:00:56,180
我们想象 P2 处于 while 循环中，

1037
01:00:56,210 --> 01:00:59,930
它将从任何客户端接收下一条消息，

1038
01:00:59,990 --> 01:01:01,580
做一点工作来处理它，

1039
01:01:01,580 --> 01:01:03,350
在数据库中查找一些数据或其他操作，

1040
01:01:03,350 --> 01:01:04,460
然后发送回复，

1041
01:01:04,490 --> 01:01:06,590
返回到循环的顶部并再次等待，

1042
01:01:06,800 --> 01:01:08,690
所以最接近的情况是，

1043
01:01:08,690 --> 01:01:15,500
我们希望 P2 会把所有的时间都花在等待来自任何人的下一条消息上，

1044
01:01:15,860 --> 01:01:17,090
可以从任何人那里请求。

1045
01:01:19,170 --> 01:01:21,060
这个设计确实，

1046
01:01:23,560 --> 01:01:26,200
它有点依赖于 P2 ，

1047
01:01:26,380 --> 01:01:27,610
当它在其他时间，

1048
01:01:27,610 --> 01:01:29,020
就是在内核中，

1049
01:01:29,050 --> 01:01:33,460
在一个 recv 系统调用上，等待下一个请求，

1050
01:01:33,460 --> 01:01:40,030
所以下一个请求可以直接从该系统调用返回。

1051
01:01:40,560 --> 01:01:42,150
这是一条捷径，

1052
01:01:42,210 --> 01:01:44,550
在这个设计中是非常高效的。

1053
01:01:48,560 --> 01:01:50,000
抱歉，我只是想跟进一下，

1054
01:01:50,540 --> 01:01:51,410
也就是说，

1055
01:01:51,800 --> 01:01:55,340
你说它来自 P1 返回 P2 ，

1056
01:01:55,950 --> 01:01:57,210
所以想要回来，

1057
01:01:57,330 --> 01:02:00,300
你需要回复，所以。

1058
01:02:00,870 --> 01:02:05,100
是的，我们希望 P2 会发送一个响应，

1059
01:02:05,540 --> 01:02:10,250
并且响应的发送反向遵循基本相同的代码路径，

1060
01:02:10,250 --> 01:02:12,050
当 P2 发送响应时，

1061
01:02:14,240 --> 01:02:17,660
有效地使 P1 返回，

1062
01:02:18,320 --> 01:02:21,020
我是说， P1 实际上是在调用 call 系统调用，

1063
01:02:21,230 --> 01:02:25,460
所以， P2 响应的传递导致 call ，

1064
01:02:25,490 --> 01:02:28,310
返回从这个系统调用回到 P1 。

1065
01:02:29,530 --> 01:02:31,660
好的，我明白了，谢谢。

1066
01:02:31,960 --> 01:02:34,150
这与通常的设置略有不同，

1067
01:02:34,150 --> 01:02:37,420
你认为可以跳转到内核和系统调用，

1068
01:02:37,420 --> 01:02:38,530
你执行该系统调用，

1069
01:02:38,530 --> 01:02:41,410
它将返回代表 P1 的所有工作，

1070
01:02:41,470 --> 01:02:43,480
这是管道读写工作的方式，

1071
01:02:43,600 --> 01:02:46,180
这里，你知道 P1 进入内核，

1072
01:02:46,750 --> 01:02:48,280
P1 进入内核，返回却是 P2 .

1073
01:02:53,540 --> 01:02:55,880
有点奇怪，但速度很快。

1074
01:03:02,540 --> 01:03:11,540
好的，所以这是对人们使用微内核的一种很大的贡献，

1075
01:03:13,780 --> 01:03:15,250
人们愿意使用微内核

1076
01:03:15,250 --> 01:03:20,620
作为宏内核的潜在替代品，

1077
01:03:20,620 --> 01:03:24,340
但是，你仍然需要解决这个问题，

1078
01:03:24,340 --> 01:03:25,420
即使 RPC 很快，

1079
01:03:25,420 --> 01:03:27,520
比如你从哪里得到操作系统的其他部分，

1080
01:03:28,720 --> 01:03:31,390
内核只有百分之几的所有东西，

1081
01:03:31,390 --> 01:03:32,890
比如文件系统和网络堆栈，

1082
01:03:32,890 --> 01:03:35,290
我们希望使用完整的操作系统。

1083
01:03:35,700 --> 01:03:36,900
其他的部分，我们该怎么办，

1084
01:03:37,740 --> 01:03:42,660
这个问题通常在大学研究项目的背景下提出，

1085
01:03:42,660 --> 01:03:44,670
他们资源相对有限，

1086
01:03:46,890 --> 01:03:50,550
我们需要从某个地方获得所有这些用户级别的服务。

1087
01:03:51,060 --> 01:03:54,780
实际上，有一些专门的应用程序，

1088
01:03:54,780 --> 01:03:56,430
这不是一个太大的问题，

1089
01:03:56,430 --> 01:04:01,110
如果我们运行的是某种设备，控制器，

1090
01:04:01,110 --> 01:04:05,980
或者你的车的点火控制系统，

1091
01:04:05,980 --> 01:04:09,430
这只运行了几千行代码，

1092
01:04:09,430 --> 01:04:11,650
可能只需要一个文件系统，

1093
01:04:12,340 --> 01:04:14,830
然后，我们可以在用户级别使用很少的东西，

1094
01:04:14,830 --> 01:04:18,520
微内核对于这类应用来说完全是有意义的，

1095
01:04:18,850 --> 01:04:20,560
但是人们，

1096
01:04:21,140 --> 01:04:23,330
当这些项目真的有目标的时候，

1097
01:04:23,330 --> 01:04:27,320
使用它完全取代现有的操作系统，

1098
01:04:27,320 --> 01:04:29,300
他们希望能构建一些东西，

1099
01:04:29,300 --> 01:04:32,330
人们想要在他们的工作站上运行的东西，

1100
01:04:32,330 --> 01:04:33,890
在他们的服务器上运行，无处不在，

1101
01:04:33,890 --> 01:04:36,590
完全替换大的宏内核，

1102
01:04:37,100 --> 01:04:39,320
但是要做到这一点，你需要一个真正的，

1103
01:04:39,320 --> 01:04:41,660
你需要操作系统所能做的所有东西。

1104
01:04:43,280 --> 01:04:49,640
一种可能性，更多是一种哲学上的可能性，

1105
01:04:49,640 --> 01:04:53,540
就是重新实现你需要的一切，

1106
01:04:53,540 --> 01:04:56,240
而是以一种微内核的方式，

1107
01:04:56,240 --> 01:04:59,150
就像大量不同的用户级进程，

1108
01:04:59,420 --> 01:05:01,070
但那只是，

1109
01:05:01,830 --> 01:05:04,890
实际上人们，有很多项目都是这么做的，

1110
01:05:04,890 --> 01:05:06,870
但这是一项繁重的工作，

1111
01:05:07,710 --> 01:05:11,160
更具体地说，人们真的想运行，

1112
01:05:11,190 --> 01:05:13,570
为了让我使用笔记本电脑，

1113
01:05:13,600 --> 01:05:15,580
它必须运行 Emacs ，

1114
01:05:15,970 --> 01:05:18,460
它必须运行我最喜欢的 C 编译器，

1115
01:05:18,520 --> 01:05:21,490
否则我绝对不会切换到你们的操作系统。

1116
01:05:22,040 --> 01:05:26,390
这意味着微内核要想获得任何形式的采用，

1117
01:05:26,390 --> 01:05:29,090
它们必须能够支持现有的应用程序，

1118
01:05:29,330 --> 01:05:31,280
它们必须能够兼容，

1119
01:05:31,400 --> 01:05:39,740
提供完全相同的或者至少在更高级别的 API 上相同的系统调用，

1120
01:05:39,740 --> 01:05:41,570
它们必须完全兼容

1121
01:05:41,570 --> 01:05:44,390
一些现有的操作系统，比如 Unix Linux ，

1122
01:05:44,480 --> 01:05:47,180
为了让任何人都愿意换。

1123
01:05:47,920 --> 01:05:51,280
所以这些项目面临着一个更具体的问题，

1124
01:05:51,280 --> 01:05:52,480
它们将如何得到，

1125
01:05:52,540 --> 01:05:57,940
它们如何实现与现有应用程序的兼容性，

1126
01:05:57,940 --> 01:06:00,070
为 Linux 或 Windows 或其他平台编写的应用程序，

1127
01:06:00,070 --> 01:06:02,830
但是对于这个项目来说，是 Linux ，

1128
01:06:03,970 --> 01:06:08,760
不是编写他们自己的全新的用户级服务器，

1129
01:06:08,760 --> 01:06:12,510
它们模仿 Linux ，他们决定走一条更容易的路，

1130
01:06:12,540 --> 01:06:13,740
很多项目都是这样做的，

1131
01:06:13,740 --> 01:06:22,920
直接在他们的微内核上运行已有的宏内核，

1132
01:06:23,930 --> 01:06:25,700
而不是重新实现一些新的东西，

1133
01:06:25,850 --> 01:06:28,700
这正是今天论文的主题。

1134
01:06:31,340 --> 01:06:38,370
事实上， L4 微内核在底部，

1135
01:06:42,860 --> 01:06:46,190
但也像一个相当大的服务器，

1136
01:06:46,460 --> 01:06:53,710
它们将完整的 Linux 内核作为用户级进程运行，

1137
01:06:54,420 --> 01:06:57,210
这听起来可能有点令人惊讶，

1138
01:06:57,210 --> 01:07:00,000
内核不是用户级进程，内核就是内核，

1139
01:07:00,930 --> 01:07:02,580
你认为它是在硬件上运行的，

1140
01:07:02,580 --> 01:07:05,190
但实际上 Linux 内核，

1141
01:07:05,220 --> 01:07:08,610
如你所见，在 QEMU 中运行 xv6 ，

1142
01:07:08,610 --> 01:07:10,530
就是在用户空间中运行的，

1143
01:07:11,190 --> 01:07:12,870
内核只是一个程序，

1144
01:07:12,900 --> 01:07:14,880
所以，只要稍加修改，

1145
01:07:14,940 --> 01:07:18,900
它就可以在用户级别运行，

1146
01:07:19,200 --> 01:07:21,030
所以他们必须修改 Linux ，

1147
01:07:21,030 --> 01:07:24,480
他们在 Linux 中使用了很多低级的东西，

1148
01:07:24,480 --> 01:07:25,890
比如 Linux 中的代码，

1149
01:07:25,890 --> 01:07:28,590
期望能够直接修改页表

1150
01:07:28,590 --> 01:07:31,290
或读写处理器寄存器，

1151
01:07:31,440 --> 01:07:33,720
他们需要修改一些低级别的东西，

1152
01:07:34,230 --> 01:07:36,210
Linux 的某些部分必须改变，

1153
01:07:37,820 --> 01:07:41,270
为了将它们转换为进行系统调用，

1154
01:07:41,270 --> 01:07:45,740
或者通过 L4 发送 IPC 消息，而不是直接访问硬件，

1155
01:07:45,980 --> 01:07:47,060
但在很大程度上，

1156
01:07:47,210 --> 01:07:50,930
它们可以直接运行几乎所有 Linux ，而不需要修改，

1157
01:07:50,930 --> 01:07:53,330
所以这意味着他们得到 Linux 的一部分，

1158
01:07:53,390 --> 01:07:59,210
文件系统和网络支持以及各种设备驱动程序，

1159
01:08:00,810 --> 01:08:02,610
Linux 带来的东西，

1160
01:08:03,380 --> 01:08:06,760
而不必编写他们自己的版本。

1161
01:08:08,230 --> 01:08:11,590
事实上，这个设置的方式是，

1162
01:08:11,590 --> 01:08:17,740
Linux 内核作为一个 L4 任务运行，

1163
01:08:18,610 --> 01:08:23,110
但是每个 Linux 进程作为单独的 L4 任务运行，

1164
01:08:23,110 --> 01:08:25,350
当您登录到这个 Linux 时，

1165
01:08:25,350 --> 01:08:28,650
你让它为你运行一个 shell ，一个终端窗口或其他东西，

1166
01:08:28,770 --> 01:08:31,740
它将启动一个 L4 任务，

1167
01:08:32,260 --> 01:08:35,470
它将在用户级别运行 Linux 程序，

1168
01:08:36,760 --> 01:08:38,410
所以这里 Linux 有一个任务，

1169
01:08:38,410 --> 01:08:44,670
以及在 Linux 下启动的每个 Linux 进程都有一个任务，

1170
01:08:44,670 --> 01:08:53,580
Linux 不是直接修改 VI 进程使用的页表，

1171
01:08:53,670 --> 01:08:57,840
Linux 将发送写 IPC 给 L4 ，

1172
01:08:57,840 --> 01:09:01,080
以使 L4 修改 VI 的页表。

1173
01:09:05,060 --> 01:09:08,980
关于这里的基本方案，有什么问题吗？

1174
01:09:14,120 --> 01:09:18,350
另一件事改变的事，

1175
01:09:18,650 --> 01:09:20,030
很多小事都变了，

1176
01:09:20,030 --> 01:09:23,660
但是，有一件特别有趣的事情是，

1177
01:09:23,810 --> 01:09:26,030
当 VI 想要进行系统调用时，

1178
01:09:26,030 --> 01:09:29,190
所以，如果 VI 不知道它在 L4 上运行，

1179
01:09:29,670 --> 01:09:32,430
在这个方案中，

1180
01:09:32,430 --> 01:09:36,660
实际上所有这些程序认为自己运行在 Linux 上，

1181
01:09:36,690 --> 01:09:38,700
当 VI 想要进行系统调用时，

1182
01:09:38,820 --> 01:09:42,420
L4 不支持的系统调用，

1183
01:09:42,660 --> 01:09:45,840
它不是在进行 L4 系统调用，而是进行 Linux 系统调用，

1184
01:09:46,050 --> 01:09:48,270
所以 VI 系统调用，比如 fork ，

1185
01:09:48,360 --> 01:09:54,330
这里有一个很小的库，链接到，

1186
01:09:56,010 --> 01:09:59,580
Linux 进程将返回调用，

1187
01:09:59,580 --> 01:10:04,920
比如 fork exec pipe read 或 write 之类的调用，返回到 IPC 消息，

1188
01:10:05,070 --> 01:10:09,330
它将发送到 Linux 任务，

1189
01:10:09,450 --> 01:10:11,820
并等待 Linux 任务的响应，

1190
01:10:11,820 --> 01:10:14,310
然后返回，像系统调用返回一样。

1191
01:10:15,670 --> 01:10:21,830
所以，这些小库将系统调用返回到 Linux 的 IPC 消息中，

1192
01:10:22,010 --> 01:10:23,090
这意味着，

1193
01:10:23,210 --> 01:10:27,170
如果 Linux 内核任务没有做任何事情，

1194
01:10:27,290 --> 01:10:31,700
它在一个 recv 调用上，等待接收下一个系统调用请求 IPC ，

1195
01:10:31,700 --> 01:10:34,340
来自这些进程中的任何一个。

1196
01:10:39,040 --> 01:10:39,820
这导致了，

1197
01:10:41,330 --> 01:10:43,850
这导致了明显的不同，

1198
01:10:43,850 --> 01:10:48,500
这种 Linux 的工作方式与普通 Linux 的工作方式，

1199
01:10:49,280 --> 01:10:51,080
在普通的 Linux 中，比如 xv6 ，

1200
01:10:51,080 --> 01:10:56,660
每个用户级进程都有一个对应的内核线程，

1201
01:10:56,660 --> 01:10:59,170
并且当程序进行系统调用时，

1202
01:10:59,960 --> 01:11:03,110
内核代表该系统调用运行一个线程，

1203
01:11:03,470 --> 01:11:07,100
在普通 Linux 中，

1204
01:11:07,100 --> 01:11:10,580
当 Linux 在内核线程之间切换时，

1205
01:11:10,610 --> 01:11:14,210
这意味着从一个进程切换到另一个进程，

1206
01:11:14,830 --> 01:11:16,720
所以这是一对一的关系，

1207
01:11:16,720 --> 01:11:21,840
Linux 内核运行的内核线程，

1208
01:11:22,170 --> 01:11:24,810
和 Linux 完成后要运行的进程之间，

1209
01:11:24,900 --> 01:11:26,610
在这里，连接被打断了，

1210
01:11:26,670 --> 01:11:30,060
实际上，这个 Linux 服务器中，

1211
01:11:30,090 --> 01:11:33,000
一个内核线程对应于。

1212
01:11:34,230 --> 01:11:35,910
抱歉，让我再说一遍，

1213
01:11:35,910 --> 01:11:41,710
Linux 内核服务器在单个 L4 线程中运行，

1214
01:11:41,740 --> 01:11:47,500
所以在 Linux 中一次只有一个控制线程在执行，

1215
01:11:48,280 --> 01:11:51,790
然而，就像在 xv6 中一样，

1216
01:11:52,370 --> 01:11:55,430
这个控制线程切换

1217
01:11:55,460 --> 01:12:00,920
使用非常类似于 xv6 上下文切换的技术，

1218
01:12:01,550 --> 01:12:07,190
可以在对应于每个用户进程的内核线程之间切换，

1219
01:12:07,220 --> 01:12:10,840
但是这些，

1220
01:12:10,900 --> 01:12:13,840
这些内核线程纯粹在 Linux 内部实现的，

1221
01:12:13,840 --> 01:12:15,790
与 L4 级线程无关，

1222
01:12:15,820 --> 01:12:17,380
这里只有一个 L4 线程，

1223
01:12:17,980 --> 01:12:22,420
但是哪个用户进程正在运行由 L4 确定，

1224
01:12:22,940 --> 01:12:25,160
所以在这个设置中，

1225
01:12:25,190 --> 01:12:31,400
Linux 可能服务于执行 VI 的内核线程的请求，

1226
01:12:31,430 --> 01:12:33,080
服务 VI 系统调用，

1227
01:12:33,380 --> 01:12:37,640
同时， L4 引起 shell 在用户空间中运行，

1228
01:12:38,080 --> 01:12:41,760
这与 xv6 或 linux 中的情况非常不同，

1229
01:12:41,760 --> 01:12:44,400
在它们之中存在直接关系，

1230
01:12:44,400 --> 01:12:50,460
在活动内核线程和相应的用户级线程之间，

1231
01:12:50,460 --> 01:12:51,930
在这里，L4 运行，

1232
01:12:51,930 --> 01:12:56,790
Linux 内核中的这些线程更加私有，

1233
01:12:56,790 --> 01:13:01,890
关于 Linux 能够并发执行系统调用，

1234
01:13:01,890 --> 01:13:03,390
在不同的执行阶段，

1235
01:13:03,450 --> 01:13:08,020
可能一个进程正在等待磁盘，

1236
01:13:08,320 --> 01:13:14,560
Linux 可以运行不同进程内核线程来服务进程系统调用。

1237
01:13:20,480 --> 01:13:27,470
所以，你可能会想，为什么这个设计没有直接使用 L4 线程

1238
01:13:27,470 --> 01:13:34,570
来实现 Linux 内部的各种不同的内核线程，

1239
01:13:35,110 --> 01:13:39,160
为什么 Linux 实现自己的内部线程，

1240
01:13:39,160 --> 01:13:40,540
而不是使用 L4 线程，

1241
01:13:40,720 --> 01:13:42,940
答案是，在那个时候，

1242
01:13:43,960 --> 01:13:47,460
a ，他们没有多核硬件，

1243
01:13:47,490 --> 01:13:49,170
他们使用的是单核硬件，

1244
01:13:49,170 --> 01:13:51,510
所以，这里没有性能优势，

1245
01:13:51,810 --> 01:13:56,040
在内核中同时执行多个线程，

1246
01:13:56,040 --> 01:13:57,240
因为只有一个核心，

1247
01:13:58,530 --> 01:14:00,240
所以，第二个线程无法执行，

1248
01:14:00,450 --> 01:14:02,970
因为硬件的原因，一次只能执行一个线程，

1249
01:14:03,480 --> 01:14:06,360
另一个可能更有说服力的原因是，

1250
01:14:06,360 --> 01:14:09,120
那时候，他们用的这个 Linux 版本，

1251
01:14:09,850 --> 01:14:12,280
没有支持，

1252
01:14:12,430 --> 01:14:16,150
这需要有多个线程，多个核心，

1253
01:14:16,150 --> 01:14:18,280
同时在内核内执行，

1254
01:14:18,490 --> 01:14:21,370
他们使用的是单处理器 Linux ，

1255
01:14:21,400 --> 01:14:25,600
足够老的 Linux ，它只有一个核心用于内核，

1256
01:14:27,420 --> 01:14:30,840
它没有像 xv6 那样的自旋锁，

1257
01:14:30,870 --> 01:14:36,880
这允许在内核内正确执行多个多核，

1258
01:14:36,940 --> 01:14:39,070
所以，不会有性能优势，

1259
01:14:40,090 --> 01:14:43,450
在内核内具有多个活动的 L4 线程，

1260
01:14:44,290 --> 01:14:47,380
但它需要添加，

1261
01:14:47,590 --> 01:14:48,790
为了增加性能，

1262
01:14:48,790 --> 01:14:51,670
添加自旋锁和其他内容，

1263
01:14:51,670 --> 01:14:53,890
用来支持并发性，

1264
01:14:53,980 --> 01:14:55,830
所以他们没有这么做。

1265
01:14:57,570 --> 01:15:00,960
这种安排的一个缺点是，

1266
01:15:01,740 --> 01:15:03,810
在普通 Linux 中，在原生 Linux 中，

1267
01:15:03,810 --> 01:15:05,670
就像你直接在笔记本电脑上运行的，

1268
01:15:05,730 --> 01:15:09,630
Linux 有很多复杂的调度机制，

1269
01:15:09,630 --> 01:15:12,990
可以对不同的进程设置优先级，

1270
01:15:12,990 --> 01:15:15,240
或者保证各种公平，

1271
01:15:17,080 --> 01:15:19,690
这很好，因为在你的笔记本电脑上，

1272
01:15:19,690 --> 01:15:24,520
因为 Linux 控制着每个核心上运行的进程，

1273
01:15:24,550 --> 01:15:26,890
但在这个设置中， Linux 根本不能控制这一点，

1274
01:15:27,280 --> 01:15:31,380
Linux 无法控制什么进程正在运行，

1275
01:15:31,500 --> 01:15:35,190
因为执行此调度的是 L4 ，而不是 Linux ，

1276
01:15:35,370 --> 01:15:37,740
这些进程由 L4 调度，

1277
01:15:37,740 --> 01:15:42,660
所以，他们失去了让 Linux 负责调度的能力。

1278
01:15:44,640 --> 01:15:46,110
这有点缺陷，

1279
01:15:46,110 --> 01:15:53,850
尽管我确信后来的 L4 版本有针对 Linux 或类似系统的某种方式，

1280
01:15:53,850 --> 01:15:55,260
为了告诉 L4 调度器，

1281
01:15:55,260 --> 01:15:59,490
请给这个进程更高的优先权或者别的什么，

1282
01:16:00,540 --> 01:16:01,500
所以这有点奇怪。

1283
01:16:06,950 --> 01:16:08,630
好的。

1284
01:16:11,390 --> 01:16:16,510
所以，他们花了这么多功夫才让这件事开始。

1285
01:16:17,780 --> 01:16:21,260
而且，你应该问问自己，

1286
01:16:21,260 --> 01:16:27,920
这篇关于微内核的论文带给我们的教训是什么？

1287
01:16:29,970 --> 01:16:32,040
有一件事，所以对我们来说，

1288
01:16:32,040 --> 01:16:34,290
这篇论文有很多有趣的花絮，

1289
01:16:34,290 --> 01:16:35,490
关于微内核如何工作，

1290
01:16:35,490 --> 01:16:36,660
关于 Linux 如何工作，

1291
01:16:36,660 --> 01:16:39,930
以及如何设置如何设计这样的系统，

1292
01:16:39,930 --> 01:16:41,700
这可能很有趣，

1293
01:16:42,600 --> 01:16:47,310
但在一个更大的世界里，人们想要吸取一些教训，

1294
01:16:47,730 --> 01:16:48,810
他们需要的，

1295
01:16:49,790 --> 01:16:51,380
我在这篇论文中介绍了一些经验教训，

1296
01:16:51,680 --> 01:16:57,530
论文没有真正回答微内核是不是一个好主意，

1297
01:16:57,980 --> 01:16:59,720
这并不是这里真正发生的事情，

1298
01:17:00,530 --> 01:17:04,280
这篇论文讨论了，

1299
01:17:04,310 --> 01:17:11,510
微内核是否有足够的性能来值得使用，

1300
01:17:11,780 --> 01:17:13,280
原因是，

1301
01:17:13,280 --> 01:17:18,710
在这篇论文发表之前的五年或者十年，

1302
01:17:19,550 --> 01:17:21,170
有一个著名的测量结果，

1303
01:17:21,170 --> 01:17:24,500
在之前的一种称为 Mach 的微内核上，

1304
01:17:24,650 --> 01:17:28,430
基本上在这种配置下运行，

1305
01:17:29,000 --> 01:17:32,230
但这是不同的，内部设计完全不同，

1306
01:17:32,230 --> 01:17:34,060
但都是一样的架构。

1307
01:17:35,020 --> 01:17:39,780
早先这个微内核项目的名字叫 Mach ，

1308
01:17:40,230 --> 01:17:41,880
有对 Mach 的测量，

1309
01:17:41,880 --> 01:17:47,220
表示 Mach 比普通 Unix 慢得多，

1310
01:17:47,700 --> 01:17:49,770
当它在这个配置中运行时，

1311
01:17:49,770 --> 01:17:52,530
这有很多原因，

1312
01:17:52,530 --> 01:17:54,900
必须使用 IPC 系统，

1313
01:17:54,900 --> 01:17:56,970
并不像你希望的那样优化，

1314
01:17:57,090 --> 01:17:59,730
它们是有更多地切换上下文，

1315
01:17:59,730 --> 01:18:05,510
使用内核穿越和高速缓存未命中等等，

1316
01:18:05,510 --> 01:18:08,540
Mach 慢的原因有很多，

1317
01:18:08,540 --> 01:18:11,510
但是很多人看到这些基准测试结果，

1318
01:18:11,510 --> 01:18:14,420
显示 Mach 比原始操作系统慢得多，

1319
01:18:14,420 --> 01:18:18,920
并认为微内核是无可救药的低效的，

1320
01:18:19,040 --> 01:18:21,680
不太可能快到可以竞争，

1321
01:18:21,680 --> 01:18:25,520
我们都应该使用宏内核。

1322
01:18:26,320 --> 01:18:31,690
今天的论文就像是对这一论点的回答，

1323
01:18:31,690 --> 01:18:34,540
在某种程度上是对这一论点的反驳，

1324
01:18:34,570 --> 01:18:36,220
这篇论文的重点是展示

1325
01:18:36,220 --> 01:18:38,230
你可以构建这个架构，

1326
01:18:38,230 --> 01:18:41,500
如果你注意优化性能，

1327
01:18:41,620 --> 01:18:44,680
你可以得到有竞争力的性能，

1328
01:18:44,680 --> 01:18:48,580
与直接运行 Unix 的原生操作系统相比，

1329
01:18:49,000 --> 01:18:54,140
所以，你不能简单地根据性能来排除微内核，

1330
01:18:54,380 --> 01:18:56,210
你可能因为其他原因不想要它们，

1331
01:18:56,210 --> 01:19:00,470
但你不能以性能作为拒绝的理由，

1332
01:19:01,010 --> 01:19:07,330
提出这一论点的很大一部分原因是，

1333
01:19:07,330 --> 01:19:11,320
他们使用我几分钟前提到的技术使 IPC 变得更快，

1334
01:19:11,500 --> 01:19:17,100
你可以看到这一点，我认为在一个非常简单的基准表 2 中，

1335
01:19:17,100 --> 01:19:18,750
如果你有论文的复制，

1336
01:19:18,960 --> 01:19:25,800
表 2 是在硬件上以普通方式运行的原生 Linux 的测量结果，

1337
01:19:26,070 --> 01:19:28,080
在原生 Linux 上，他们展示了

1338
01:19:28,080 --> 01:19:30,600
他们的硬件和 Linux 版本，

1339
01:19:30,780 --> 01:19:37,020
一个个简单的系统调用 getpid 花费了 1.7 微秒，

1340
01:19:37,900 --> 01:19:40,000
它们还表明，

1341
01:19:40,150 --> 01:19:45,040
在 L4 设置相同的东西，

1342
01:19:45,160 --> 01:19:48,280
你必须发送 IPC 请求并获得 IPC 响应，

1343
01:19:48,310 --> 01:19:50,710
仅针对 getpid 系统调用，

1344
01:19:51,040 --> 01:19:58,360
在 L4 Linux 下，这需要 4 微秒的时间，

1345
01:19:58,360 --> 01:19:59,830
这意味着两倍的时间，

1346
01:19:59,830 --> 01:20:02,710
但是有两倍的工作在进行，

1347
01:20:02,710 --> 01:20:05,710
因为你进行两组用户内核穿越，

1348
01:20:05,710 --> 01:20:09,280
不只是一个简单的系统调用，

1349
01:20:09,370 --> 01:20:11,020
也就是说，他们可以声称，

1350
01:20:11,020 --> 01:20:16,660
他们让这些 IPC 基础系统调用的花费降到了最低，

1351
01:20:16,690 --> 01:20:20,950
这是系统调用原生 Linux 花费的两倍，

1352
01:20:21,010 --> 01:20:24,400
所以，他们的表现几乎和你预期的一样好。

1353
01:20:26,400 --> 01:20:30,990
当然，现在他们的系统速度仍然只有原生 Linux 的一半，

1354
01:20:33,220 --> 01:20:34,750
这不是很清楚，

1355
01:20:34,750 --> 01:20:38,620
除非你做一些测量，系统调用是否运行了两次，

1356
01:20:38,620 --> 01:20:42,670
或者简单的系统调用花费两倍的时间是灾难还是不是问题。

1357
01:20:43,150 --> 01:20:44,620
为了表明这一点，

1358
01:20:44,650 --> 01:20:47,500
这可能是一场灾难，如果你执行大量系统调用，

1359
01:20:47,500 --> 01:20:51,820
或者可能不成问题，如果你执行的系统调用相对较少，

1360
01:20:51,820 --> 01:20:54,790
或者每个系统调用有很多工作，

1361
01:20:55,200 --> 01:20:57,510
可能系统调用比 getpid 更复杂。

1362
01:20:57,870 --> 01:21:03,540
论文中的答案是 A 图基准测试，

1363
01:21:04,040 --> 01:21:06,470
使用这个名为 AIM 的基准测试，

1364
01:21:06,740 --> 01:21:07,820
这只是一个，

1365
01:21:08,360 --> 01:21:10,910
它是一个各种不同的系统调用的基准测试，

1366
01:21:10,910 --> 01:21:13,070
它读写文件，创建进程，

1367
01:21:13,070 --> 01:21:16,370
用内核做进程做的所有事情，

1368
01:21:16,820 --> 01:21:19,070
他们在图 A 中显示，

1369
01:21:19,220 --> 01:21:23,450
他们的设置运行的是一个更完整的应用程序，

1370
01:21:24,420 --> 01:21:26,010
不仅仅是 getpid ，

1371
01:21:26,310 --> 01:21:29,730
运行速度仅比本地 Linux 慢几个百分点，

1372
01:21:29,940 --> 01:21:32,310
所以，你可以预期，

1373
01:21:32,310 --> 01:21:34,620
无论你想在计算机上运行什么，

1374
01:21:34,800 --> 01:21:38,250
在 L4 上运行几乎与 Linux 同样快，

1375
01:21:38,250 --> 01:21:40,620
就像在普通操作系统下一样，

1376
01:21:41,040 --> 01:21:42,210
在原生操作系统下，

1377
01:21:42,480 --> 01:21:45,600
所以，它们

1378
01:21:45,600 --> 01:21:50,630
基本上和直接运行 Linux 一样快，

1379
01:21:50,630 --> 01:21:53,630
所以，你应该认真对待它们。

1380
01:21:55,530 --> 01:21:58,140
好的，这是一个令人印象深刻的结果，

1381
01:21:58,200 --> 01:22:02,250
这是一个出乎意料的，并且很酷，

1382
01:22:02,940 --> 01:22:07,830
快进 20 年后，这一切就结束了，

1383
01:22:07,830 --> 01:22:08,790
正如我之前提到的，

1384
01:22:08,790 --> 01:22:12,480
人们在很多嵌入式环境中使用 L4 ，

1385
01:22:12,480 --> 01:22:14,010
特别是它用得很多，

1386
01:22:14,160 --> 01:22:18,210
智能手机上运行 L4 的例子很多，

1387
01:22:18,630 --> 01:22:21,510
隐藏在人们的视线之外，但不管怎样，

1388
01:22:22,160 --> 01:22:24,080
并且所有运行的各种自定义软件，

1389
01:22:24,080 --> 01:22:30,410
在这种情况下，它们不必与 Unix 兼容，

1390
01:22:30,740 --> 01:22:33,680
微内核在其他更一般的情况下，

1391
01:22:33,680 --> 01:22:37,340
如工作站或服务器中从未真正流行起来，

1392
01:22:37,340 --> 01:22:40,850
这并不是因为这个设计一定有什么问题，

1393
01:22:40,970 --> 01:22:46,010
只是为了取代一些现有的软件，

1394
01:22:46,160 --> 01:22:48,980
你的新东西必须是更好的，

1395
01:22:48,980 --> 01:22:51,080
让人们将会被激励去转换。

1396
01:22:51,520 --> 01:22:55,090
这些微内核是很好的，自然优雅，

1397
01:22:55,840 --> 01:22:58,600
但是人们很难确切指出

1398
01:22:58,600 --> 01:23:00,190
为什么它要好得多，

1399
01:23:00,190 --> 01:23:01,810
他们应该不厌其烦地

1400
01:23:01,900 --> 01:23:05,830
从 Linux 或他们正在运行的切换过来，

1401
01:23:05,830 --> 01:23:08,230
所以它从来没有真正流行起来，

1402
01:23:08,230 --> 01:23:09,790
不一定是出于很好的原因，

1403
01:23:09,790 --> 01:23:12,910
因为它们看起来要好得多。

1404
01:23:13,590 --> 01:23:14,400
另一方面，

1405
01:23:14,580 --> 01:23:18,360
来自这个架构的许多想法都产生了持久的影响，

1406
01:23:18,600 --> 01:23:22,320
人们得出，

1407
01:23:22,710 --> 01:23:26,550
更多有趣和灵活的方式来使用虚拟内存，

1408
01:23:26,550 --> 01:23:30,210
为了在微内核上支持操作系统，

1409
01:23:30,390 --> 01:23:33,060
这些更复杂的接口

1410
01:23:33,120 --> 01:23:38,550
通过 mmap 等方式进入 Linux 等主流操作系统，

1411
01:23:39,090 --> 01:23:42,870
这种在顶层运行操作系统的想法，

1412
01:23:43,320 --> 01:23:48,150
作为低级操作系统之上的服务器，

1413
01:23:48,270 --> 01:23:52,500
在今天以虚拟机监视器的形式非常流行，

1414
01:23:52,500 --> 01:23:57,120
它们在各地使用各种云托管服务。

1415
01:23:57,610 --> 01:24:03,710
对可扩展性的需求，你可以修改用户级服务，

1416
01:24:03,770 --> 01:24:08,270
在 Linux 中发挥作用的方式是可加载的内核模块，

1417
01:24:08,270 --> 01:24:12,830
允许你动态加载修改 Linux 内核的工作方式，

1418
01:24:13,910 --> 01:24:16,280
当然还有客户端服务器的类型，

1419
01:24:16,280 --> 01:24:18,650
对客户端服务器体系结构的良好支持，

1420
01:24:19,180 --> 01:24:21,400
也进入了像 MacOS 这样的内核，

1421
01:24:21,400 --> 01:24:24,040
它具有良好的 IPC 和良好的客户端服务器。

1422
01:24:25,700 --> 01:24:27,320
这就是我对这堂课要说的全部内容，

1423
01:24:27,350 --> 01:24:31,700
我很乐意留下来回答问题，谢谢。

1424
01:24:36,690 --> 01:24:37,290
谢谢。

1425
01:24:37,950 --> 01:24:38,400
不用谢。

1426
01:24:40,150 --> 01:24:41,590
哦，我想问一下，

1427
01:24:41,590 --> 01:24:47,600
我们现在讨论的论文关于页表，

1428
01:24:48,100 --> 01:24:50,290
我想是在 4.2 ，

1429
01:24:50,470 --> 01:24:52,990
它说的是如何，

1430
01:24:54,960 --> 01:24:58,020
我想这和你之前提到的差不多，

1431
01:24:58,050 --> 01:25:02,250
你说有一种错误的方式可以做到这一点，

1432
01:25:02,580 --> 01:25:05,340
我想可能有点类似，

1433
01:25:05,370 --> 01:25:09,720
但是如果做这件事，

1434
01:25:09,720 --> 01:25:13,630
你现在在照片里解释的这件事，

1435
01:25:14,280 --> 01:25:20,430
在这种情况下，页表是如何工作的？

1436
01:25:20,550 --> 01:25:26,370
好的，你可能指的是 4.3 节，双空间错误。

1437
01:25:26,610 --> 01:25:27,150
哦，是的，抱歉， 4.3 。

1438
01:25:28,380 --> 01:25:30,660
是的，这是一个有点复杂的故事，

1439
01:25:30,660 --> 01:25:33,990
但让我们看看，

1440
01:25:35,710 --> 01:25:38,920
背景的一部分是 Linux 在那些日子里的工作方式，

1441
01:25:38,920 --> 01:25:41,440
事实上，直到最近，都是

1442
01:25:41,560 --> 01:25:44,380
当你在用户级别运行时，

1443
01:25:44,860 --> 01:25:46,810
页表实际上有，

1444
01:25:46,810 --> 01:25:49,870
进程页面，用户级页映射，

1445
01:25:49,960 --> 01:25:52,600
并且所有内核都映射到这个页表中，

1446
01:25:53,300 --> 01:25:54,890
在 x86 上，

1447
01:25:54,920 --> 01:25:59,600
所以，当你进行系统调用并跳入内核时，

1448
01:26:00,140 --> 01:26:02,510
内核已映射到页表中，

1449
01:26:02,750 --> 01:26:05,090
因此不需要页表切换，

1450
01:26:05,480 --> 01:26:06,620
当你进行系统调用时，

1451
01:26:06,620 --> 01:26:08,930
它的成本要低得多，

1452
01:26:09,290 --> 01:26:10,820
因为没有页表切换，

1453
01:26:10,820 --> 01:26:12,020
如果你在 xv6 中调用，

1454
01:26:12,020 --> 01:26:14,120
你知道 trampoline 代码切换页表，

1455
01:26:14,120 --> 01:26:17,060
这是一件昂贵的事情，

1456
01:26:17,060 --> 01:26:22,190
因为它刷新虚拟到物理映射的 TLB 高速缓存。

1457
01:26:22,810 --> 01:26:23,890
无论如何，为了提高效率，

1458
01:26:23,890 --> 01:26:27,760
Linux 在同一页表中映射内核和用户空间，

1459
01:26:28,030 --> 01:26:30,630
具有很快的系统调用，

1460
01:26:30,660 --> 01:26:37,210
原因并不是很清楚，

1461
01:26:37,210 --> 01:26:42,360
他们决定执行相同的操作来设置 Unix 服务器中的映射。

1462
01:26:43,950 --> 01:26:46,610
好的，他们想要的是，

1463
01:26:46,610 --> 01:26:51,180
当 VI ，当一个进程将系统调用发送到这里时，

1464
01:26:51,270 --> 01:26:53,790
他们希望页表处于活动状态，

1465
01:26:53,790 --> 01:26:58,430
在 Linux 服务器上处理那个系统调用的时候，

1466
01:26:58,520 --> 01:27:01,730
包括所有虚拟内存映射，

1467
01:27:01,730 --> 01:27:04,730
send 系统调用的进程的映射。

1468
01:27:06,980 --> 01:27:07,970
这至少使它，

1469
01:27:09,030 --> 01:27:13,770
更容易的查找传给系统调用参数的虚拟地址，

1470
01:27:13,770 --> 01:27:15,030
比如发送给 read ，

1471
01:27:15,720 --> 01:27:18,180
之所以效果不佳，

1472
01:27:18,180 --> 01:27:19,080
原因有很多，

1473
01:27:19,080 --> 01:27:24,870
一是 L4 对 Linux 的东西一无所知，

1474
01:27:25,020 --> 01:27:27,150
L4 只知道有两个进程，

1475
01:27:27,150 --> 01:27:30,270
所以，当你将 IPC 从一个进程发送到另一个进程时，

1476
01:27:30,270 --> 01:27:32,100
L4 只是切换页表，

1477
01:27:32,370 --> 01:27:33,570
它总是只切换页表，

1478
01:27:33,570 --> 01:27:36,000
这个页表， VI 的页表，

1479
01:27:36,630 --> 01:27:39,090
L4 将页表与 Linux 内核相关联，

1480
01:27:39,090 --> 01:27:40,620
只是总是切换页表，

1481
01:27:40,710 --> 01:27:42,330
所以，你甚至不能，

1482
01:27:42,330 --> 01:27:46,000
由于 L4 系统调用的实现方式不同，

1483
01:27:46,000 --> 01:27:48,070
并且涉及 L4 的事实是，

1484
01:27:48,160 --> 01:27:51,670
在系统调用期间没有办法保留页表，

1485
01:27:52,230 --> 01:27:53,310
那是不可能的，

1486
01:27:53,850 --> 01:27:56,640
因为 L4 总是切换页表，

1487
01:27:56,940 --> 01:27:58,650
当它在从一个进程切换到另一个进程时，

1488
01:27:58,680 --> 01:28:03,000
所以，他们永远不会获得无需切换页表的效率优势，

1489
01:28:03,030 --> 01:28:08,060
当它一旦从用户到内核的切换时。

1490
01:28:08,860 --> 01:28:12,370
但我认为他们想要方便

1491
01:28:12,370 --> 01:28:16,830
能够直接使用用户提供的虚拟地址，

1492
01:28:17,630 --> 01:28:21,760
但这意味着映射是活跃的，

1493
01:28:21,790 --> 01:28:26,860
取决于它们代表哪个进程执行系统调用，

1494
01:28:27,160 --> 01:28:30,010
所以 Linux 不可能有任何一个页表，

1495
01:28:31,330 --> 01:28:36,510
LINUX 页表是否使用取决于发送系统调用 RPC 的进程，

1496
01:28:36,540 --> 01:28:39,630
但是 L4 不知道怎么玩这个游戏，

1497
01:28:39,840 --> 01:28:44,520
L4 将单个页表与每个进程与每个任务相关联，

1498
01:28:44,760 --> 01:28:47,910
所以它只会切换到那个页表，

1499
01:28:47,910 --> 01:28:48,840
所以运气不好，

1500
01:28:48,840 --> 01:28:52,850
Linux 没有任何方法使页表不同，

1501
01:28:52,850 --> 01:28:55,730
根据 send 系统调用的不同，

1502
01:28:56,210 --> 01:28:57,470
为了解决这个问题，

1503
01:28:57,650 --> 01:29:03,170
他们制作了一堆内核的共享内存副本，

1504
01:29:03,720 --> 01:29:06,330
每个进程一个，

1505
01:29:06,360 --> 01:29:08,700
所以每个内核的共享内存副本，

1506
01:29:09,290 --> 01:29:12,860
将所有内核内存映射到其中，

1507
01:29:12,860 --> 01:29:15,560
所以它们都是相同的内核数据结构，

1508
01:29:15,590 --> 01:29:22,780
但是每个进程都有一个与之相关联的专用内核任务，

1509
01:29:22,780 --> 01:29:26,260
所以，这允许他们对 L4 使用技巧，

1510
01:29:26,260 --> 01:29:28,150
并切换到适当的页表，

1511
01:29:28,150 --> 01:29:31,090
包括进程加上内核，

1512
01:29:31,420 --> 01:29:34,060
具体取决于哪个进程系统调用请求。

1513
01:29:34,720 --> 01:29:37,780
我觉得那挺管用的，

1514
01:29:37,780 --> 01:29:41,230
但是他们说他们工作很慢之类的，

1515
01:29:41,590 --> 01:29:44,080
因为有很多任务。

1516
01:29:46,810 --> 01:29:48,280
不管怎么说，这是个复杂的故事，

1517
01:29:48,280 --> 01:29:50,200
我认为这件事的效果不是很好。

1518
01:29:50,560 --> 01:29:52,360
好的，我明白了，

1519
01:29:52,360 --> 01:29:57,250
我想这很好地解释了为什么这个东西更难，

1520
01:29:57,250 --> 01:30:00,170
比我们做的 xv6 ，好的。

1521
01:30:00,880 --> 01:30:02,890
是的，这个，因为没有，

1522
01:30:03,500 --> 01:30:05,750
你有这张图片 xv6 甚至标准的 Linux

1523
01:30:05,750 --> 01:30:07,130
都比这个简单得多，

1524
01:30:07,610 --> 01:30:10,430
你只是直接跳到内核中，

1525
01:30:10,430 --> 01:30:13,940
并且内核对所有分页硬件有直接控制权，

1526
01:30:14,090 --> 01:30:16,070
当它运行 L4 时就没有了。

1527
01:30:17,120 --> 01:30:19,820
好的，我明白了，谢谢。

1528
01:30:21,190 --> 01:30:23,590
我们会问，为什么，

1529
01:30:23,590 --> 01:30:31,180
看起来有些任务比其他任务更适合放在内核之外，

1530
01:30:31,270 --> 01:30:34,480
但是这个 L4 使用微内核的方法，

1531
01:30:34,480 --> 01:30:36,910
似乎总是要么什么都有，要么什么都不是，

1532
01:30:36,940 --> 01:30:41,350
比如要么有一个宏内核来做所有的事情，要么什么都不做，

1533
01:30:41,350 --> 01:30:47,020
比如我觉得分页和其他一些事情在内核中可能非常有效，

1534
01:30:47,020 --> 01:30:48,970
然后可能像文件系统，

1535
01:30:48,970 --> 01:30:51,850
需要交换的东西可能在外部，

1536
01:30:52,420 --> 01:30:56,740
然后，甚至可以拥有一个具有某些功能的内核，

1537
01:30:56,740 --> 01:30:59,980
但是你可以选择不使用它，而提供你自己的，

1538
01:31:00,540 --> 01:31:02,280
有没有什么。

1539
01:31:02,280 --> 01:31:05,310
你说的绝对是对的，

1540
01:31:05,310 --> 01:31:10,440
确实有很多微内核或与微内核相关的项目，

1541
01:31:11,130 --> 01:31:13,950
它们中的许多制造了各种各样的混合内核，

1542
01:31:14,190 --> 01:31:16,740
比如有几个不同版本的 Mach ，

1543
01:31:16,740 --> 01:31:19,810
其中一些是混合内核，

1544
01:31:19,810 --> 01:31:22,570
有这样一个微内核 IPC ，

1545
01:31:22,570 --> 01:31:27,480
但内核中是一个完整的 Unix ，

1546
01:31:27,630 --> 01:31:32,440
比如， Mach 2.5 就是在内部使用混合内核，

1547
01:31:33,480 --> 01:31:36,690
微内核和 Unix 几乎都在同一个内核中。

1548
01:31:36,990 --> 01:31:38,730
你可以进行系统调用，

1549
01:31:38,730 --> 01:31:42,540
而且一些东西使用了微内核的方式，

1550
01:31:42,540 --> 01:31:45,900
但是有些东西他们只是用了 Mach 的内核，

1551
01:31:46,170 --> 01:31:47,880
它在 Mach 内核中，

1552
01:31:48,000 --> 01:31:49,980
Unix 内核被内置到 Mach 内核中，

1553
01:31:50,280 --> 01:31:56,160
一种现代 MacOS 构建方式也与所描述的方式类似，

1554
01:31:56,160 --> 01:32:00,930
MacOS 有一个完整的操作系统，

1555
01:32:00,930 --> 01:32:02,430
里面有一个文件系统和所有的东西，

1556
01:32:02,430 --> 01:32:07,020
但它也很好地支持 IPC 和类似的线程，

1557
01:32:07,020 --> 01:32:12,300
所有你想要构建的微内核式服务。

1558
01:32:13,570 --> 01:32:17,980
谷歌的 Fuchsia 是不是也实现了其中一些想法？

1559
01:32:18,490 --> 01:32:19,390
我敢打赌是的。

1560
01:32:22,180 --> 01:32:24,160
所以不管怎样，没有一种方法，

1561
01:32:24,940 --> 01:32:28,000
有些人希望一个纯粹的，

1562
01:32:28,670 --> 01:32:32,360
非常纯粹的计划能够奏效，

1563
01:32:36,860 --> 01:32:38,510
这不是唯一可能的前进道路。

1564
01:32:41,030 --> 01:32:42,110
好的，谢谢，

1565
01:32:42,140 --> 01:32:43,820
我要去我的下一节课了，

1566
01:32:43,820 --> 01:32:45,050
但是我们会再见的。

1567
01:32:45,950 --> 01:32:46,400
再见。

1568
01:32:48,790 --> 01:32:49,300
谢谢。

1569
01:32:49,940 --> 01:32:50,480
不用谢。

1570
01:32:52,460 --> 01:32:53,900
哦，我没有，

1571
01:32:53,960 --> 01:32:55,250
我只想说一句，

1572
01:32:55,280 --> 01:32:57,110
我觉得很有意思，

1573
01:32:57,110 --> 01:33:00,720
它好像慢了 5% ，

1574
01:33:00,720 --> 01:33:02,490
但它做的工作要多得多，

1575
01:33:02,580 --> 01:33:03,990
是的，它非常有意思。

1576
01:33:06,120 --> 01:33:09,330
你的意思是，即使它做更多的工作也只是稍微慢一点，

1577
01:33:09,960 --> 01:33:15,210
IPC 的性能真的是[]。

1578
01:33:15,690 --> 01:33:18,480
当然，还有一件事需要记住，

1579
01:33:19,310 --> 01:33:20,510
如果你开始做，

1580
01:33:20,540 --> 01:33:24,410
如果你在每个系统调用中做大量的工作，

1581
01:33:25,380 --> 01:33:28,590
查找文件和目录什么的，

1582
01:33:28,650 --> 01:33:30,390
那么系统调用的成本，

1583
01:33:30,390 --> 01:33:33,780
IPC 本身成本就开始变得不那么重要了。

1584
01:33:34,890 --> 01:33:38,100
所以，更快的系统调用加上实际程序的组合

1585
01:33:38,100 --> 01:33:40,770
可以做一些不同于进行系统调用的事情。

1586
01:33:41,750 --> 01:33:45,170
但你也会希望交换页表。

1587
01:33:45,260 --> 01:33:45,740
是的。

1588
01:33:45,890 --> 01:33:46,910
其他系统有的。

1589
01:33:47,330 --> 01:33:48,320
是的，尽管论文，

1590
01:33:48,320 --> 01:33:49,370
我没有谈到它，

1591
01:33:49,370 --> 01:33:51,350
但是论文有一些巧妙的技巧，

1592
01:33:51,350 --> 01:33:54,980
可以避免切换页表的成本，

1593
01:33:55,010 --> 01:33:58,940
我不知道你是否还记得，

1594
01:33:58,940 --> 01:34:03,320
在第 6 页中，我们讨论的是标记 TLB 为很小的空间，

1595
01:34:03,560 --> 01:34:07,940
他们有一些聪明的想法来避免切换页表，

1596
01:34:08,600 --> 01:34:10,820
这是我在读这份论文之前听说过的。

1597
01:34:12,340 --> 01:34:15,430
太酷了，非常感谢，再见。

1598
01:34:16,020 --> 01:34:16,470
再见。

