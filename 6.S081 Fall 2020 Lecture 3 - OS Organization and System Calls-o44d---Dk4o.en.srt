1
00:00:07,759 --> 00:00:11,270

am i loud and clear yep sounds good

2
00:00:11,270 --> 00:00:11,280
am i loud and clear yep sounds good
 

3
00:00:11,280 --> 00:00:13,830
am i loud and clear yep sounds good
okay great uh so good afternoon or good

4
00:00:13,830 --> 00:00:13,840
okay great uh so good afternoon or good
 

5
00:00:13,840 --> 00:00:15,509
okay great uh so good afternoon or good
evening or good morning or a good night

6
00:00:15,509 --> 00:00:15,519
evening or good morning or a good night
 

7
00:00:15,519 --> 00:00:17,910
evening or good morning or a good night
wherever you are

8
00:00:17,910 --> 00:00:17,920
wherever you are
 

9
00:00:17,920 --> 00:00:19,990
wherever you are
let's get started on the like i said

10
00:00:19,990 --> 00:00:20,000
let's get started on the like i said
 

11
00:00:20,000 --> 00:00:21,349
let's get started on the like i said
this third lecture in

12
00:00:21,349 --> 00:00:21,359
this third lecture in
 

13
00:00:21,359 --> 00:00:23,910
this third lecture in
so 81 which is going to be about ois

14
00:00:23,910 --> 00:00:23,920
so 81 which is going to be about ois
 

15
00:00:23,920 --> 00:00:25,349
so 81 which is going to be about ois
organization

16
00:00:25,349 --> 00:00:25,359
organization
 

17
00:00:25,359 --> 00:00:28,950
organization
and the topics for today

18
00:00:28,950 --> 00:00:28,960
and the topics for today
 

19
00:00:28,960 --> 00:00:32,229
and the topics for today
are

20
00:00:32,229 --> 00:00:32,239

 

21
00:00:32,239 --> 00:00:34,870

four things that i want to touch on one

22
00:00:34,870 --> 00:00:34,880
four things that i want to touch on one
 

23
00:00:34,880 --> 00:00:36,470
four things that i want to touch on one
is isolation

24
00:00:36,470 --> 00:00:36,480
is isolation
 

25
00:00:36,480 --> 00:00:39,270
is isolation
which you'll see is the driving design

26
00:00:39,270 --> 00:00:39,280
which you'll see is the driving design
 

27
00:00:39,280 --> 00:00:40,389
which you'll see is the driving design
goal

28
00:00:40,389 --> 00:00:40,399
goal
 

29
00:00:40,399 --> 00:00:42,869
goal
for os organization i'll talk a little

30
00:00:42,869 --> 00:00:42,879
for os organization i'll talk a little
 

31
00:00:42,879 --> 00:00:43,510
for os organization i'll talk a little
bit about

32
00:00:43,510 --> 00:00:43,520
bit about
 

33
00:00:43,520 --> 00:00:47,270
bit about
kernel and user mode

34
00:00:47,270 --> 00:00:47,280

 

35
00:00:47,280 --> 00:00:50,229

as a way of isolating the kernel from or

36
00:00:50,229 --> 00:00:50,239
as a way of isolating the kernel from or
 

37
00:00:50,239 --> 00:00:51,670
as a way of isolating the kernel from or
the operating system from

38
00:00:51,670 --> 00:00:51,680
the operating system from
 

39
00:00:51,680 --> 00:00:54,069
the operating system from
user applications uh then i'll talk

40
00:00:54,069 --> 00:00:54,079
user applications uh then i'll talk
 

41
00:00:54,079 --> 00:00:55,670
user applications uh then i'll talk
about system calls

42
00:00:55,670 --> 00:00:55,680
about system calls
 

43
00:00:55,680 --> 00:00:58,389
about system calls
which is a way for you know user

44
00:00:58,389 --> 00:00:58,399
which is a way for you know user
 

45
00:00:58,399 --> 00:01:00,310
which is a way for you know user
applications to basically transition

46
00:01:00,310 --> 00:01:00,320
applications to basically transition
 

47
00:01:00,320 --> 00:01:01,349
applications to basically transition
into the kernel

48
00:01:01,349 --> 00:01:01,359
into the kernel
 

49
00:01:01,359 --> 00:01:03,430
into the kernel
uh so they can ask for services and

50
00:01:03,430 --> 00:01:03,440
uh so they can ask for services and
 

51
00:01:03,440 --> 00:01:04,869
uh so they can ask for services and
we'll look at a little bit how this all

52
00:01:04,869 --> 00:01:04,879
we'll look at a little bit how this all
 

53
00:01:04,879 --> 00:01:05,270
we'll look at a little bit how this all
is

54
00:01:05,270 --> 00:01:05,280
is
 

55
00:01:05,280 --> 00:01:08,230
is
instantiated in a simple form uh inside

56
00:01:08,230 --> 00:01:08,240
instantiated in a simple form uh inside
 

57
00:01:08,240 --> 00:01:08,630
instantiated in a simple form uh inside
of

58
00:01:08,630 --> 00:01:08,640
of
 

59
00:01:08,640 --> 00:01:12,149
of
x36 so that is the the point for today

60
00:01:12,149 --> 00:01:12,159
x36 so that is the the point for today
 

61
00:01:12,159 --> 00:01:15,590
x36 so that is the the point for today
um and just to sort of

62
00:01:15,590 --> 00:01:15,600
um and just to sort of
 

63
00:01:15,600 --> 00:01:19,510
um and just to sort of
remind you uh where we were

64
00:01:19,510 --> 00:01:19,520
remind you uh where we were
 

65
00:01:19,520 --> 00:01:22,149
remind you uh where we were
after the first lecture uh the picture

66
00:01:22,149 --> 00:01:22,159
after the first lecture uh the picture
 

67
00:01:22,159 --> 00:01:22,950
after the first lecture uh the picture
sort of in your head

68
00:01:22,950 --> 00:01:22,960
sort of in your head
 

69
00:01:22,960 --> 00:01:24,710
sort of in your head
that you should have in your head is you

70
00:01:24,710 --> 00:01:24,720
that you should have in your head is you
 

71
00:01:24,720 --> 00:01:26,390
that you should have in your head is you
know there are processes

72
00:01:26,390 --> 00:01:26,400
know there are processes
 

73
00:01:26,400 --> 00:01:30,789
know there are processes
like the shell like echo

74
00:01:30,789 --> 00:01:30,799

 

75
00:01:30,799 --> 00:01:34,310

or whatever

76
00:01:34,310 --> 00:01:34,320

 

77
00:01:34,320 --> 00:01:35,670

find you know whatever some of the

78
00:01:35,670 --> 00:01:35,680
find you know whatever some of the
 

79
00:01:35,680 --> 00:01:37,830
find you know whatever some of the
utilities that you implemented

80
00:01:37,830 --> 00:01:37,840
utilities that you implemented
 

81
00:01:37,840 --> 00:01:40,149
utilities that you implemented
they're running on top of an operating

82
00:01:40,149 --> 00:01:40,159
they're running on top of an operating
 

83
00:01:40,159 --> 00:01:42,469
they're running on top of an operating
system

84
00:01:42,469 --> 00:01:42,479
system
 

85
00:01:42,479 --> 00:01:43,910
system
and you know the operating system

86
00:01:43,910 --> 00:01:43,920
and you know the operating system
 

87
00:01:43,920 --> 00:01:45,429
and you know the operating system
abstracts you know some of the hardware

88
00:01:45,429 --> 00:01:45,439
abstracts you know some of the hardware
 

89
00:01:45,439 --> 00:01:46,710
abstracts you know some of the hardware
resources

90
00:01:46,710 --> 00:01:46,720
resources
 

91
00:01:46,720 --> 00:01:49,990
resources
you know like a disk or cpu and you know

92
00:01:49,990 --> 00:01:50,000
you know like a disk or cpu and you know
 

93
00:01:50,000 --> 00:01:51,350
you know like a disk or cpu and you know
basically the interface between the

94
00:01:51,350 --> 00:01:51,360
basically the interface between the
 

95
00:01:51,360 --> 00:01:53,030
basically the interface between the
operating systems and the

96
00:01:53,030 --> 00:01:53,040
operating systems and the
 

97
00:01:53,040 --> 00:01:54,550
operating systems and the
is not typically referred to as a system

98
00:01:54,550 --> 00:01:54,560
is not typically referred to as a system
 

99
00:01:54,560 --> 00:01:56,230
is not typically referred to as a system
called interface and the interface that

100
00:01:56,230 --> 00:01:56,240
called interface and the interface that
 

101
00:01:56,240 --> 00:01:57,350
called interface and the interface that
we've been looking at

102
00:01:57,350 --> 00:01:57,360
we've been looking at
 

103
00:01:57,360 --> 00:02:01,749
we've been looking at
is the unix interface

104
00:02:01,749 --> 00:02:01,759

 

105
00:02:01,759 --> 00:02:05,030

and here what we see

106
00:02:05,030 --> 00:02:05,040

 

107
00:02:05,040 --> 00:02:08,229

is so that was roughly you know actually

108
00:02:08,229 --> 00:02:08,239
is so that was roughly you know actually
 

109
00:02:08,239 --> 00:02:10,070
is so that was roughly you know actually
with that unix interface you've been

110
00:02:10,070 --> 00:02:10,080
with that unix interface you've been
 

111
00:02:10,080 --> 00:02:11,910
with that unix interface you've been
playing around in lab one

112
00:02:11,910 --> 00:02:11,920
playing around in lab one
 

113
00:02:11,920 --> 00:02:14,229
playing around in lab one
uh were in the util app where you used

114
00:02:14,229 --> 00:02:14,239
uh were in the util app where you used
 

115
00:02:14,239 --> 00:02:15,589
uh were in the util app where you used
you know the system called interstates

116
00:02:15,589 --> 00:02:15,599
you know the system called interstates
 

117
00:02:15,599 --> 00:02:16,790
you know the system called interstates
or the unix api

118
00:02:16,790 --> 00:02:16,800
or the unix api
 

119
00:02:16,800 --> 00:02:18,150
or the unix api
to actually implement different sets of

120
00:02:18,150 --> 00:02:18,160
to actually implement different sets of
 

121
00:02:18,160 --> 00:02:20,150
to actually implement different sets of
applications and so

122
00:02:20,150 --> 00:02:20,160
applications and so
 

123
00:02:20,160 --> 00:02:22,790
applications and so
lab one uh user lab was mostly focused

124
00:02:22,790 --> 00:02:22,800
lab one uh user lab was mostly focused
 

125
00:02:22,800 --> 00:02:23,270
lab one uh user lab was mostly focused
on

126
00:02:23,270 --> 00:02:23,280
on
 

127
00:02:23,280 --> 00:02:25,030
on
you know sort of using you know this

128
00:02:25,030 --> 00:02:25,040
you know sort of using you know this
 

129
00:02:25,040 --> 00:02:26,630
you know sort of using you know this
part uh

130
00:02:26,630 --> 00:02:26,640
part uh
 

131
00:02:26,640 --> 00:02:28,790
part uh
of the design picture here and what

132
00:02:28,790 --> 00:02:28,800
of the design picture here and what
 

133
00:02:28,800 --> 00:02:30,550
of the design picture here and what
we're gonna be doing now

134
00:02:30,550 --> 00:02:30,560
we're gonna be doing now
 

135
00:02:30,560 --> 00:02:32,390
we're gonna be doing now
in this first lecture or this lecture

136
00:02:32,390 --> 00:02:32,400
in this first lecture or this lecture
 

137
00:02:32,400 --> 00:02:33,830
in this first lecture or this lecture
and many subsequent lectures

138
00:02:33,830 --> 00:02:33,840
and many subsequent lectures
 

139
00:02:33,840 --> 00:02:35,830
and many subsequent lectures
we're gonna really look actually how

140
00:02:35,830 --> 00:02:35,840
we're gonna really look actually how
 

141
00:02:35,840 --> 00:02:38,309
we're gonna really look actually how
that interface is actually implemented

142
00:02:38,309 --> 00:02:38,319
that interface is actually implemented
 

143
00:02:38,319 --> 00:02:39,830
that interface is actually implemented
in fact almost all the semester we're

144
00:02:39,830 --> 00:02:39,840
in fact almost all the semester we're
 

145
00:02:39,840 --> 00:02:42,150
in fact almost all the semester we're
going to be spending time on

146
00:02:42,150 --> 00:02:42,160
going to be spending time on
 

147
00:02:42,160 --> 00:02:43,750
going to be spending time on
figuring out actually how to implement

148
00:02:43,750 --> 00:02:43,760
figuring out actually how to implement
 

149
00:02:43,760 --> 00:02:45,509
figuring out actually how to implement
the interface and so this is going to be

150
00:02:45,509 --> 00:02:45,519
the interface and so this is going to be
 

151
00:02:45,519 --> 00:02:46,710
the interface and so this is going to be
the first lecture

152
00:02:46,710 --> 00:02:46,720
the first lecture
 

153
00:02:46,720 --> 00:02:49,509
the first lecture
of that kind of style and uh

154
00:02:49,509 --> 00:02:49,519
of that kind of style and uh
 

155
00:02:49,519 --> 00:02:50,309
of that kind of style and uh
unfortunately

156
00:02:50,309 --> 00:02:50,319
unfortunately
 

157
00:02:50,319 --> 00:02:52,390
unfortunately
uh you know a lot of you asked really

158
00:02:52,390 --> 00:02:52,400
uh you know a lot of you asked really
 

159
00:02:52,400 --> 00:02:53,509
uh you know a lot of you asked really
great questions uh

160
00:02:53,509 --> 00:02:53,519
great questions uh
 

161
00:02:53,519 --> 00:02:56,550
great questions uh
over email um or submitted a great

162
00:02:56,550 --> 00:02:56,560
over email um or submitted a great
 

163
00:02:56,560 --> 00:02:57,910
over email um or submitted a great
question to the website

164
00:02:57,910 --> 00:02:57,920
question to the website
 

165
00:02:57,920 --> 00:03:00,550
question to the website
uh and we won't be able uh you know to

166
00:03:00,550 --> 00:03:00,560
uh and we won't be able uh you know to
 

167
00:03:00,560 --> 00:03:01,830
uh and we won't be able uh you know to
go into great amount of detail

168
00:03:01,830 --> 00:03:01,840
go into great amount of detail
 

169
00:03:01,840 --> 00:03:03,430
go into great amount of detail
immediately in the sort of first lecture

170
00:03:03,430 --> 00:03:03,440
immediately in the sort of first lecture
 

171
00:03:03,440 --> 00:03:04,949
immediately in the sort of first lecture
that takes an inside loop of the

172
00:03:04,949 --> 00:03:04,959
that takes an inside loop of the
 

173
00:03:04,959 --> 00:03:05,830
that takes an inside loop of the
operating system

174
00:03:05,830 --> 00:03:05,840
operating system
 

175
00:03:05,840 --> 00:03:06,949
operating system
so we're going to touch on a lot of

176
00:03:06,949 --> 00:03:06,959
so we're going to touch on a lot of
 

177
00:03:06,959 --> 00:03:08,949
so we're going to touch on a lot of
different things but many things will

178
00:03:08,949 --> 00:03:08,959
different things but many things will
 

179
00:03:08,959 --> 00:03:11,030
different things but many things will
become more clear

180
00:03:11,030 --> 00:03:11,040
become more clear
 

181
00:03:11,040 --> 00:03:12,390
become more clear
in subsequent lectures where we're going

182
00:03:12,390 --> 00:03:12,400
in subsequent lectures where we're going
 

183
00:03:12,400 --> 00:03:14,790
in subsequent lectures where we're going
to explore them in more depth

184
00:03:14,790 --> 00:03:14,800
to explore them in more depth
 

185
00:03:14,800 --> 00:03:17,270
to explore them in more depth
but nevertheless if there's something

186
00:03:17,270 --> 00:03:17,280
but nevertheless if there's something
 

187
00:03:17,280 --> 00:03:18,070
but nevertheless if there's something
unclear

188
00:03:18,070 --> 00:03:18,080
unclear
 

189
00:03:18,080 --> 00:03:20,149
unclear
uh feel free to interrupt and ask a

190
00:03:20,149 --> 00:03:20,159
uh feel free to interrupt and ask a
 

191
00:03:20,159 --> 00:03:21,910
uh feel free to interrupt and ask a
question

192
00:03:21,910 --> 00:03:21,920
question
 

193
00:03:21,920 --> 00:03:24,630
question
and maybe just to start off uh before

194
00:03:24,630 --> 00:03:24,640
and maybe just to start off uh before
 

195
00:03:24,640 --> 00:03:26,229
and maybe just to start off uh before
actually going any further

196
00:03:26,229 --> 00:03:26,239
actually going any further
 

197
00:03:26,239 --> 00:03:28,710
actually going any further
uh let me ask you a question and sort of

198
00:03:28,710 --> 00:03:28,720
uh let me ask you a question and sort of
 

199
00:03:28,720 --> 00:03:29,350
uh let me ask you a question and sort of
get yes

200
00:03:29,350 --> 00:03:29,360
get yes
 

201
00:03:29,360 --> 00:03:31,350
get yes
questions and answering hopefully going

202
00:03:31,350 --> 00:03:31,360
questions and answering hopefully going
 

203
00:03:31,360 --> 00:03:32,550
questions and answering hopefully going
and ask you like

204
00:03:32,550 --> 00:03:32,560
and ask you like
 

205
00:03:32,560 --> 00:03:33,990
and ask you like
what is the sort of most interesting

206
00:03:33,990 --> 00:03:34,000
what is the sort of most interesting
 

207
00:03:34,000 --> 00:03:36,229
what is the sort of most interesting
thing that you learned from the

208
00:03:36,229 --> 00:03:36,239
thing that you learned from the
 

209
00:03:36,239 --> 00:03:38,869
thing that you learned from the
beautiful app and i'll start by

210
00:03:38,869 --> 00:03:38,879
beautiful app and i'll start by
 

211
00:03:38,879 --> 00:03:40,229
beautiful app and i'll start by
answering that question myself

212
00:03:40,229 --> 00:03:40,239
answering that question myself
 

213
00:03:40,239 --> 00:03:41,830
answering that question myself
uh one of the things that actually

214
00:03:41,830 --> 00:03:41,840
uh one of the things that actually
 

215
00:03:41,840 --> 00:03:44,309
uh one of the things that actually
surprised me after writing or doing the

216
00:03:44,309 --> 00:03:44,319
surprised me after writing or doing the
 

217
00:03:44,319 --> 00:03:46,710
surprised me after writing or doing the
usual app is that

218
00:03:46,710 --> 00:03:46,720
usual app is that
 

219
00:03:46,720 --> 00:03:49,030
usual app is that
i use xrx a lot more frequently than i

220
00:03:49,030 --> 00:03:49,040
i use xrx a lot more frequently than i
 

221
00:03:49,040 --> 00:03:50,470
i use xrx a lot more frequently than i
used to do i had another

222
00:03:50,470 --> 00:03:50,480
used to do i had another
 

223
00:03:50,480 --> 00:03:52,070
used to do i had another
way of doing basically the same thing as

224
00:03:52,070 --> 00:03:52,080
way of doing basically the same thing as
 

225
00:03:52,080 --> 00:03:53,509
way of doing basically the same thing as
xrx

226
00:03:53,509 --> 00:03:53,519
xrx
 

227
00:03:53,519 --> 00:03:56,949
xrx
instead of commands and after actually

228
00:03:56,949 --> 00:03:56,959
instead of commands and after actually
 

229
00:03:56,959 --> 00:03:57,750
instead of commands and after actually
doing the

230
00:03:57,750 --> 00:03:57,760
doing the
 

231
00:03:57,760 --> 00:03:59,429
doing the
xrg lab i was just like oh that's much

232
00:03:59,429 --> 00:03:59,439
xrg lab i was just like oh that's much
 

233
00:03:59,439 --> 00:04:00,869
xrg lab i was just like oh that's much
more convenient actually to use it in

234
00:04:00,869 --> 00:04:00,879
more convenient actually to use it in
 

235
00:04:00,879 --> 00:04:01,350
more convenient actually to use it in
that way

236
00:04:01,350 --> 00:04:01,360
that way
 

237
00:04:01,360 --> 00:04:03,830
that way
and so since then i've been a much more

238
00:04:03,830 --> 00:04:03,840
and so since then i've been a much more
 

239
00:04:03,840 --> 00:04:04,869
and so since then i've been a much more
aggressive user

240
00:04:04,869 --> 00:04:04,879
aggressive user
 

241
00:04:04,879 --> 00:04:07,350
aggressive user
of x-arcs and i'm just wondering you

242
00:04:07,350 --> 00:04:07,360
of x-arcs and i'm just wondering you
 

243
00:04:07,360 --> 00:04:08,229
of x-arcs and i'm just wondering you
know what the

244
00:04:08,229 --> 00:04:08,239
know what the
 

245
00:04:08,239 --> 00:04:10,710
know what the
you know what the experience has been

246
00:04:10,710 --> 00:04:10,720
you know what the experience has been
 

247
00:04:10,720 --> 00:04:11,670
you know what the experience has been
for some of you

248
00:04:11,670 --> 00:04:11,680
for some of you
 

249
00:04:11,680 --> 00:04:14,630
for some of you
and so maybe i'll call out a few names

250
00:04:14,630 --> 00:04:14,640
and so maybe i'll call out a few names
 

251
00:04:14,640 --> 00:04:15,589
and so maybe i'll call out a few names
and

252
00:04:15,589 --> 00:04:15,599
and
 

253
00:04:15,599 --> 00:04:17,509
and
maybe you can mute your microphone then

254
00:04:17,509 --> 00:04:17,519
maybe you can mute your microphone then
 

255
00:04:17,519 --> 00:04:19,110
maybe you can mute your microphone then
and sort of test it

256
00:04:19,110 --> 00:04:19,120
and sort of test it
 

257
00:04:19,120 --> 00:04:20,870
and sort of test it
and say a little bit about like your

258
00:04:20,870 --> 00:04:20,880
and say a little bit about like your
 

259
00:04:20,880 --> 00:04:23,350
and say a little bit about like your
experience with the youtube lab

260
00:04:23,350 --> 00:04:23,360
experience with the youtube lab
 

261
00:04:23,360 --> 00:04:26,070
experience with the youtube lab
uh so let me you know pick some people

262
00:04:26,070 --> 00:04:26,080
uh so let me you know pick some people
 

263
00:04:26,080 --> 00:04:26,550
uh so let me you know pick some people
uh

264
00:04:26,550 --> 00:04:26,560
uh
 

265
00:04:26,560 --> 00:04:33,030
uh
andrew you

266
00:04:33,030 --> 00:04:33,040

 

267
00:04:33,040 --> 00:04:36,070

andrew are you online we're listening uh

268
00:04:36,070 --> 00:04:36,080
andrew are you online we're listening uh
 

269
00:04:36,080 --> 00:04:37,510
andrew are you online we're listening uh
the most interesting thing for me was

270
00:04:37,510 --> 00:04:37,520
the most interesting thing for me was
 

271
00:04:37,520 --> 00:04:38,870
the most interesting thing for me was
just the pipes

272
00:04:38,870 --> 00:04:38,880
just the pipes
 

273
00:04:38,880 --> 00:04:42,629
just the pipes
on how to write concurrent programs

274
00:04:42,629 --> 00:04:42,639
on how to write concurrent programs
 

275
00:04:42,639 --> 00:04:43,830
on how to write concurrent programs
had you done any sort of pipe

276
00:04:43,830 --> 00:04:43,840
had you done any sort of pipe
 

277
00:04:43,840 --> 00:04:46,469
had you done any sort of pipe
programming before no i haven't i've

278
00:04:46,469 --> 00:04:46,479
programming before no i haven't i've
 

279
00:04:46,479 --> 00:04:47,990
programming before no i haven't i've
seen the old concurrent stuff but i

280
00:04:47,990 --> 00:04:48,000
seen the old concurrent stuff but i
 

281
00:04:48,000 --> 00:04:50,550
seen the old concurrent stuff but i
haven't seen like os level pipes before

282
00:04:50,550 --> 00:04:50,560
haven't seen like os level pipes before
 

283
00:04:50,560 --> 00:04:55,350
haven't seen like os level pipes before
okay how about uh elizabeth weeks

284
00:04:55,350 --> 00:04:55,360

 

285
00:04:55,360 --> 00:04:57,510

uh yeah i'd agree with that i also

286
00:04:57,510 --> 00:04:57,520
uh yeah i'd agree with that i also
 

287
00:04:57,520 --> 00:04:58,710
uh yeah i'd agree with that i also
thought that the like

288
00:04:58,710 --> 00:04:58,720
thought that the like
 

289
00:04:58,720 --> 00:05:00,629
thought that the like
os pipes were super interesting and like

290
00:05:00,629 --> 00:05:00,639
os pipes were super interesting and like
 

291
00:05:00,639 --> 00:05:02,469
os pipes were super interesting and like
the primes um

292
00:05:02,469 --> 00:05:02,479
the primes um
 

293
00:05:02,479 --> 00:05:05,110
the primes um
example specifically was cool to kind of

294
00:05:05,110 --> 00:05:05,120
example specifically was cool to kind of
 

295
00:05:05,120 --> 00:05:06,550
example specifically was cool to kind of
figure out and realize that like i

296
00:05:06,550 --> 00:05:06,560
figure out and realize that like i
 

297
00:05:06,560 --> 00:05:08,310
figure out and realize that like i
needed to close certain pipes and just

298
00:05:08,310 --> 00:05:08,320
needed to close certain pipes and just
 

299
00:05:08,320 --> 00:05:09,110
needed to close certain pipes and just
like

300
00:05:09,110 --> 00:05:09,120
like
 

301
00:05:09,120 --> 00:05:11,110
like
are they kind of related to each other

302
00:05:11,110 --> 00:05:11,120
are they kind of related to each other
 

303
00:05:11,120 --> 00:05:13,110
are they kind of related to each other
yeah yeah presumably you did find the

304
00:05:13,110 --> 00:05:13,120
yeah yeah presumably you did find the
 

305
00:05:13,120 --> 00:05:13,830
yeah yeah presumably you did find the
pipes of

306
00:05:13,830 --> 00:05:13,840
pipes of
 

307
00:05:13,840 --> 00:05:16,469
pipes of
crime is a little bit harder than uh you

308
00:05:16,469 --> 00:05:16,479
crime is a little bit harder than uh you
 

309
00:05:16,479 --> 00:05:17,430
crime is a little bit harder than uh you
might have thought

310
00:05:17,430 --> 00:05:17,440
might have thought
 

311
00:05:17,440 --> 00:05:19,990
might have thought
uh because it surprises me every time a

312
00:05:19,990 --> 00:05:20,000
uh because it surprises me every time a
 

313
00:05:20,000 --> 00:05:22,070
uh because it surprises me every time a
little bit tricky to get it right

314
00:05:22,070 --> 00:05:22,080
little bit tricky to get it right
 

315
00:05:22,080 --> 00:05:26,310
little bit tricky to get it right
uh jessica she

316
00:05:26,310 --> 00:05:26,320

 

317
00:05:26,320 --> 00:05:29,029

um i also thought the primes exercise

318
00:05:29,029 --> 00:05:29,039
um i also thought the primes exercise
 

319
00:05:29,039 --> 00:05:33,029
um i also thought the primes exercise
was most interesting

320
00:05:33,029 --> 00:05:33,039

 

321
00:05:33,039 --> 00:05:34,790

did it take you a lot of time or was it

322
00:05:34,790 --> 00:05:34,800
did it take you a lot of time or was it
 

323
00:05:34,800 --> 00:05:36,830
did it take you a lot of time or was it
not too bad

324
00:05:36,830 --> 00:05:36,840
not too bad
 

325
00:05:36,840 --> 00:05:39,990
not too bad
um it took me

326
00:05:39,990 --> 00:05:40,000
um it took me
 

327
00:05:40,000 --> 00:05:41,749
um it took me
more time after i realized my initial

328
00:05:41,749 --> 00:05:41,759
more time after i realized my initial
 

329
00:05:41,759 --> 00:05:42,870
more time after i realized my initial
implementation wasn't actually

330
00:05:42,870 --> 00:05:42,880
implementation wasn't actually
 

331
00:05:42,880 --> 00:05:44,150
implementation wasn't actually
concurrent so it was interesting to

332
00:05:44,150 --> 00:05:44,160
concurrent so it was interesting to
 

333
00:05:44,160 --> 00:05:45,430
concurrent so it was interesting to
think about like

334
00:05:45,430 --> 00:05:45,440
think about like
 

335
00:05:45,440 --> 00:05:48,550
think about like
what the differences are there okay

336
00:05:48,550 --> 00:05:48,560
what the differences are there okay
 

337
00:05:48,560 --> 00:05:53,909
what the differences are there okay
how about the uh robert murphy

338
00:05:53,909 --> 00:05:53,919

 

339
00:05:53,919 --> 00:05:57,110

yeah i think that the the my experience

340
00:05:57,110 --> 00:05:57,120
yeah i think that the the my experience
 

341
00:05:57,120 --> 00:05:58,070
yeah i think that the the my experience
was really just

342
00:05:58,070 --> 00:05:58,080
was really just
 

343
00:05:58,080 --> 00:06:01,110
was really just
um i found it really challenging to

344
00:06:01,110 --> 00:06:01,120
um i found it really challenging to
 

345
00:06:01,120 --> 00:06:01,670
um i found it really challenging to
program

346
00:06:01,670 --> 00:06:01,680
program
 

347
00:06:01,680 --> 00:06:03,990
program
in in the uh original way that was set

348
00:06:03,990 --> 00:06:04,000
in in the uh original way that was set
 

349
00:06:04,000 --> 00:06:05,270
in in the uh original way that was set
up so i actually created like a bunch of

350
00:06:05,270 --> 00:06:05,280
up so i actually created like a bunch of
 

351
00:06:05,280 --> 00:06:06,790
up so i actually created like a bunch of
helper functions that wrapped around

352
00:06:06,790 --> 00:06:06,800
helper functions that wrapped around
 

353
00:06:06,800 --> 00:06:07,350
helper functions that wrapped around
things

354
00:06:07,350 --> 00:06:07,360
things
 

355
00:06:07,360 --> 00:06:11,590
things
um so that's i guess what i did

356
00:06:11,590 --> 00:06:11,600
um so that's i guess what i did
 

357
00:06:11,600 --> 00:06:14,629
um so that's i guess what i did
okay any uh i might

358
00:06:14,629 --> 00:06:14,639
okay any uh i might
 

359
00:06:14,639 --> 00:06:17,990
okay any uh i might
also have sort of any piece of wisdom

360
00:06:17,990 --> 00:06:18,000
also have sort of any piece of wisdom
 

361
00:06:18,000 --> 00:06:21,110
also have sort of any piece of wisdom
amanda go ahead i i kind of liked it and

362
00:06:21,110 --> 00:06:21,120
amanda go ahead i i kind of liked it and
 

363
00:06:21,120 --> 00:06:23,430
amanda go ahead i i kind of liked it and
found it surprising slash cool that

364
00:06:23,430 --> 00:06:23,440
found it surprising slash cool that
 

365
00:06:23,440 --> 00:06:26,629
found it surprising slash cool that
um s2d and and std out are just filed

366
00:06:26,629 --> 00:06:26,639
um s2d and and std out are just filed
 

367
00:06:26,639 --> 00:06:27,749
um s2d and and std out are just filed
scripters themselves

368
00:06:27,749 --> 00:06:27,759
scripters themselves
 

369
00:06:27,759 --> 00:06:31,270
scripters themselves
zero and one yeah yeah yeah good yeah

370
00:06:31,270 --> 00:06:31,280
zero and one yeah yeah yeah good yeah
 

371
00:06:31,280 --> 00:06:33,110
zero and one yeah yeah yeah good yeah
yeah and xv6 doesn't hide that from you

372
00:06:33,110 --> 00:06:33,120
yeah and xv6 doesn't hide that from you
 

373
00:06:33,120 --> 00:06:35,749
yeah and xv6 doesn't hide that from you
at all at least in a normal ce

374
00:06:35,749 --> 00:06:35,759
at all at least in a normal ce
 

375
00:06:35,759 --> 00:06:37,110
at all at least in a normal ce
library that's a little bit wrapped up

376
00:06:37,110 --> 00:06:37,120
library that's a little bit wrapped up
 

377
00:06:37,120 --> 00:06:39,510
library that's a little bit wrapped up
in a uh in a

378
00:06:39,510 --> 00:06:39,520
in a uh in a
 

379
00:06:39,520 --> 00:06:42,230
in a uh in a
in an interface but uh xv6 doesn't hide

380
00:06:42,230 --> 00:06:42,240
in an interface but uh xv6 doesn't hide
 

381
00:06:42,240 --> 00:06:43,749
in an interface but uh xv6 doesn't hide
it for you but in the end it boils down

382
00:06:43,749 --> 00:06:43,759
it for you but in the end it boils down
 

383
00:06:43,759 --> 00:06:44,390
it for you but in the end it boils down
in d2

384
00:06:44,390 --> 00:06:44,400
in d2
 

385
00:06:44,400 --> 00:06:46,150
in d2
you know just file descriptor zero one

386
00:06:46,150 --> 00:06:46,160
you know just file descriptor zero one
 

387
00:06:46,160 --> 00:06:49,270
you know just file descriptor zero one
and two i guess for standard error

388
00:06:49,270 --> 00:06:49,280
and two i guess for standard error
 

389
00:06:49,280 --> 00:06:53,830
and two i guess for standard error
good good alexander

390
00:06:53,830 --> 00:06:53,840
good good alexander
 

391
00:06:53,840 --> 00:06:57,270
good good alexander
um i guess um one thing i was surprised

392
00:06:57,270 --> 00:06:57,280
um i guess um one thing i was surprised
 

393
00:06:57,280 --> 00:06:57,830
um i guess um one thing i was surprised
about

394
00:06:57,830 --> 00:06:57,840
about
 

395
00:06:57,840 --> 00:07:02,870
about
uh was also from the primes problem um

396
00:07:02,870 --> 00:07:02,880
uh was also from the primes problem um
 

397
00:07:02,880 --> 00:07:06,070
uh was also from the primes problem um
i had this bug that i spent hours on

398
00:07:06,070 --> 00:07:06,080
i had this bug that i spent hours on
 

399
00:07:06,080 --> 00:07:08,230
i had this bug that i spent hours on
and the thing was that i didn't realize

400
00:07:08,230 --> 00:07:08,240
and the thing was that i didn't realize
 

401
00:07:08,240 --> 00:07:09,830
and the thing was that i didn't realize
that actually there were

402
00:07:09,830 --> 00:07:09,840
that actually there were
 

403
00:07:09,840 --> 00:07:14,070
that actually there were
whenever you were um

404
00:07:14,070 --> 00:07:14,080

 

405
00:07:14,080 --> 00:07:16,790

opening a pipe and then for like calling

406
00:07:16,790 --> 00:07:16,800
opening a pipe and then for like calling
 

407
00:07:16,800 --> 00:07:17,350
opening a pipe and then for like calling
fork

408
00:07:17,350 --> 00:07:17,360
fork
 

409
00:07:17,360 --> 00:07:20,550
fork
then basically there would be four uh

410
00:07:20,550 --> 00:07:20,560
then basically there would be four uh
 

411
00:07:20,560 --> 00:07:23,510
then basically there would be four uh
ends to the pipe because that pipe it's

412
00:07:23,510 --> 00:07:23,520
ends to the pipe because that pipe it's
 

413
00:07:23,520 --> 00:07:24,390
ends to the pipe because that pipe it's
kind of

414
00:07:24,390 --> 00:07:24,400
kind of
 

415
00:07:24,400 --> 00:07:26,870
kind of
uh goes both to the child process and

416
00:07:26,870 --> 00:07:26,880
uh goes both to the child process and
 

417
00:07:26,880 --> 00:07:27,430
uh goes both to the child process and
the price

418
00:07:27,430 --> 00:07:27,440
the price
 

419
00:07:27,440 --> 00:07:29,990
the price
the parent process and but i was only

420
00:07:29,990 --> 00:07:30,000
the parent process and but i was only
 

421
00:07:30,000 --> 00:07:32,950
the parent process and but i was only
closing two of those

422
00:07:32,950 --> 00:07:32,960
closing two of those
 

423
00:07:32,960 --> 00:07:36,870
closing two of those
so yeah that was a common common problem

424
00:07:36,870 --> 00:07:36,880
so yeah that was a common common problem
 

425
00:07:36,880 --> 00:07:39,270
so yeah that was a common common problem
it made sense but for some reason

426
00:07:39,270 --> 00:07:39,280
it made sense but for some reason
 

427
00:07:39,280 --> 00:07:40,150
it made sense but for some reason
because

428
00:07:40,150 --> 00:07:40,160
because
 

429
00:07:40,160 --> 00:07:43,110
because
especially the textbook says that when

430
00:07:43,110 --> 00:07:43,120
especially the textbook says that when
 

431
00:07:43,120 --> 00:07:44,150
especially the textbook says that when
you fork

432
00:07:44,150 --> 00:07:44,160
you fork
 

433
00:07:44,160 --> 00:07:46,469
you fork
uh all of the open file descriptors get

434
00:07:46,469 --> 00:07:46,479
uh all of the open file descriptors get
 

435
00:07:46,479 --> 00:07:47,350
uh all of the open file descriptors get
copied

436
00:07:47,350 --> 00:07:47,360
copied
 

437
00:07:47,360 --> 00:07:49,830
copied
but i didn't think about it then yeah no

438
00:07:49,830 --> 00:07:49,840
but i didn't think about it then yeah no
 

439
00:07:49,840 --> 00:07:50,950
but i didn't think about it then yeah no
it's hard to i mean there's a lot of

440
00:07:50,950 --> 00:07:50,960
it's hard to i mean there's a lot of
 

441
00:07:50,960 --> 00:07:52,309
it's hard to i mean there's a lot of
details in that interface and you know

442
00:07:52,309 --> 00:07:52,319
details in that interface and you know
 

443
00:07:52,319 --> 00:07:53,749
details in that interface and you know
the only way to get actually really

444
00:07:53,749 --> 00:07:53,759
the only way to get actually really
 

445
00:07:53,759 --> 00:07:55,189
the only way to get actually really
familiar with it actually is to program

446
00:07:55,189 --> 00:07:55,199
familiar with it actually is to program
 

447
00:07:55,199 --> 00:07:56,869
familiar with it actually is to program
with it and then

448
00:07:56,869 --> 00:07:56,879
with it and then
 

449
00:07:56,879 --> 00:08:00,070
with it and then
experience it okay good well

450
00:08:00,070 --> 00:08:00,080
experience it okay good well
 

451
00:08:00,080 --> 00:08:02,150
experience it okay good well
i hope you enjoyed the lab uh and you

452
00:08:02,150 --> 00:08:02,160
i hope you enjoyed the lab uh and you
 

453
00:08:02,160 --> 00:08:03,350
i hope you enjoyed the lab uh and you
know of course i hope you'll enjoy the

454
00:08:03,350 --> 00:08:03,360
know of course i hope you'll enjoy the
 

455
00:08:03,360 --> 00:08:04,550
know of course i hope you'll enjoy the
subsequent labs too

456
00:08:04,550 --> 00:08:04,560
subsequent labs too
 

457
00:08:04,560 --> 00:08:06,070
subsequent labs too
so the lecture for today in some sense

458
00:08:06,070 --> 00:08:06,080
so the lecture for today in some sense
 

459
00:08:06,080 --> 00:08:08,309
so the lecture for today in some sense
is really you know partially to help you

460
00:08:08,309 --> 00:08:08,319
is really you know partially to help you
 

461
00:08:08,319 --> 00:08:10,150
is really you know partially to help you
to get going on the

462
00:08:10,150 --> 00:08:10,160
to get going on the
 

463
00:08:10,160 --> 00:08:13,110
to get going on the
uh the cisco lab if you haven't already

464
00:08:13,110 --> 00:08:13,120
uh the cisco lab if you haven't already
 

465
00:08:13,120 --> 00:08:14,469
uh the cisco lab if you haven't already
started and so again

466
00:08:14,469 --> 00:08:14,479
started and so again
 

467
00:08:14,479 --> 00:08:16,070
started and so again
uh you know feel free to interrupt and

468
00:08:16,070 --> 00:08:16,080
uh you know feel free to interrupt and
 

469
00:08:16,080 --> 00:08:17,589
uh you know feel free to interrupt and
ask questions

470
00:08:17,589 --> 00:08:17,599
ask questions
 

471
00:08:17,599 --> 00:08:20,869
ask questions
okay so the first thing i want to do uh

472
00:08:20,869 --> 00:08:20,879
okay so the first thing i want to do uh
 

473
00:08:20,879 --> 00:08:23,909
okay so the first thing i want to do uh
is uh talk a little bit about

474
00:08:23,909 --> 00:08:23,919
is uh talk a little bit about
 

475
00:08:23,919 --> 00:08:26,710
is uh talk a little bit about
isolation uh and you know why it's

476
00:08:26,710 --> 00:08:26,720
isolation uh and you know why it's
 

477
00:08:26,720 --> 00:08:27,830
isolation uh and you know why it's
important and

478
00:08:27,830 --> 00:08:27,840
important and
 

479
00:08:27,840 --> 00:08:30,150
important and
why we might care and you know the basic

480
00:08:30,150 --> 00:08:30,160
why we might care and you know the basic
 

481
00:08:30,160 --> 00:08:31,909
why we might care and you know the basic
stories you know reasonably simple

482
00:08:31,909 --> 00:08:31,919
stories you know reasonably simple
 

483
00:08:31,919 --> 00:08:33,350
stories you know reasonably simple
you know we have multiple applications

484
00:08:33,350 --> 00:08:33,360
you know we have multiple applications
 

485
00:08:33,360 --> 00:08:34,949
you know we have multiple applications
here we got the shell we got echo

486
00:08:34,949 --> 00:08:34,959
here we got the shell we got echo
 

487
00:08:34,959 --> 00:08:36,870
here we got the shell we got echo
we find and it would be great correct

488
00:08:36,870 --> 00:08:36,880
we find and it would be great correct
 

489
00:08:36,880 --> 00:08:38,790
we find and it would be great correct
that if you had a bug in the shell or

490
00:08:38,790 --> 00:08:38,800
that if you had a bug in the shell or
 

491
00:08:38,800 --> 00:08:41,190
that if you had a bug in the shell or
for example in your primes program that

492
00:08:41,190 --> 00:08:41,200
for example in your primes program that
 

493
00:08:41,200 --> 00:08:42,630
for example in your primes program that
actually didn't affect any of the other

494
00:08:42,630 --> 00:08:42,640
actually didn't affect any of the other
 

495
00:08:42,640 --> 00:08:43,990
actually didn't affect any of the other
applications you know particularly it

496
00:08:43,990 --> 00:08:44,000
applications you know particularly it
 

497
00:08:44,000 --> 00:08:45,509
applications you know particularly it
would be bad for example if it affected

498
00:08:45,509 --> 00:08:45,519
would be bad for example if it affected
 

499
00:08:45,519 --> 00:08:46,949
would be bad for example if it affected
the shell because probably the seller

500
00:08:46,949 --> 00:08:46,959
the shell because probably the seller
 

501
00:08:46,959 --> 00:08:48,550
the shell because probably the seller
you're using to actually you know kill

502
00:08:48,550 --> 00:08:48,560
you're using to actually you know kill
 

503
00:08:48,560 --> 00:08:50,949
you're using to actually you know kill
the program if something goes bad

504
00:08:50,949 --> 00:08:50,959
the program if something goes bad
 

505
00:08:50,959 --> 00:08:53,110
the program if something goes bad
so you want sort of strong isolation

506
00:08:53,110 --> 00:08:53,120
so you want sort of strong isolation
 

507
00:08:53,120 --> 00:08:54,230
so you want sort of strong isolation
between these uh

508
00:08:54,230 --> 00:08:54,240
between these uh
 

509
00:08:54,240 --> 00:08:56,710
between these uh
different applications and similarly you

510
00:08:56,710 --> 00:08:56,720
different applications and similarly you
 

511
00:08:56,720 --> 00:08:57,910
different applications and similarly you
know the os

512
00:08:57,910 --> 00:08:57,920
know the os
 

513
00:08:57,920 --> 00:08:59,509
know the os
is sort of the servant you know for all

514
00:08:59,509 --> 00:08:59,519
is sort of the servant you know for all
 

515
00:08:59,519 --> 00:09:01,190
is sort of the servant you know for all
the applications uh

516
00:09:01,190 --> 00:09:01,200
the applications uh
 

517
00:09:01,200 --> 00:09:02,470
the applications uh
and you would like it to be the case

518
00:09:02,470 --> 00:09:02,480
and you would like it to be the case
 

519
00:09:02,480 --> 00:09:04,550
and you would like it to be the case
that you know if again you know you make

520
00:09:04,550 --> 00:09:04,560
that you know if again you know you make
 

521
00:09:04,560 --> 00:09:06,550
that you know if again you know you make
a bug in one of your util programs that

522
00:09:06,550 --> 00:09:06,560
a bug in one of your util programs that
 

523
00:09:06,560 --> 00:09:07,750
a bug in one of your util programs that
actually the operating system doesn't

524
00:09:07,750 --> 00:09:07,760
actually the operating system doesn't
 

525
00:09:07,760 --> 00:09:09,269
actually the operating system doesn't
crash you know exactly you pass some

526
00:09:09,269 --> 00:09:09,279
crash you know exactly you pass some
 

527
00:09:09,279 --> 00:09:10,389
crash you know exactly you pass some
strange argument to the

528
00:09:10,389 --> 00:09:10,399
strange argument to the
 

529
00:09:10,399 --> 00:09:12,150
strange argument to the
operating system uh you know should be

530
00:09:12,150 --> 00:09:12,160
operating system uh you know should be
 

531
00:09:12,160 --> 00:09:13,269
operating system uh you know should be
the case that the operating system

532
00:09:13,269 --> 00:09:13,279
the case that the operating system
 

533
00:09:13,279 --> 00:09:14,630
the case that the operating system
handles that well

534
00:09:14,630 --> 00:09:14,640
handles that well
 

535
00:09:14,640 --> 00:09:16,150
handles that well
and so again you would like to be

536
00:09:16,150 --> 00:09:16,160
and so again you would like to be
 

537
00:09:16,160 --> 00:09:18,230
and so again you would like to be
there's a strong isolation between

538
00:09:18,230 --> 00:09:18,240
there's a strong isolation between
 

539
00:09:18,240 --> 00:09:22,310
there's a strong isolation between
uh the the applications and

540
00:09:22,310 --> 00:09:22,320
uh the the applications and
 

541
00:09:22,320 --> 00:09:25,350
uh the the applications and
the operating system itself um and one

542
00:09:25,350 --> 00:09:25,360
the operating system itself um and one
 

543
00:09:25,360 --> 00:09:26,870
the operating system itself um and one
way to think about this a little bit is

544
00:09:26,870 --> 00:09:26,880
way to think about this a little bit is
 

545
00:09:26,880 --> 00:09:27,509
way to think about this a little bit is
to say

546
00:09:27,509 --> 00:09:27,519
to say
 

547
00:09:27,519 --> 00:09:29,269
to say
is ask ourselves the question you know

548
00:09:29,269 --> 00:09:29,279
is ask ourselves the question you know
 

549
00:09:29,279 --> 00:09:30,790
is ask ourselves the question you know
what what would happen if there's

550
00:09:30,790 --> 00:09:30,800
what what would happen if there's
 

551
00:09:30,800 --> 00:09:31,670
what what would happen if there's
actually

552
00:09:31,670 --> 00:09:31,680
actually
 

553
00:09:31,680 --> 00:09:33,509
actually
no operating system so like you know

554
00:09:33,509 --> 00:09:33,519
no operating system so like you know
 

555
00:09:33,519 --> 00:09:35,350
no operating system so like you know
consider some straw man design

556
00:09:35,350 --> 00:09:35,360
consider some straw man design
 

557
00:09:35,360 --> 00:09:40,070
consider some straw man design
design

558
00:09:40,070 --> 00:09:40,080

 

559
00:09:40,080 --> 00:09:45,350

where there is no operating system

560
00:09:45,350 --> 00:09:45,360

 

561
00:09:45,360 --> 00:09:46,870

or you can think about it as the

562
00:09:46,870 --> 00:09:46,880
or you can think about it as the
 

563
00:09:46,880 --> 00:09:48,310
or you can think about it as the
operating system basically basically

564
00:09:48,310 --> 00:09:48,320
operating system basically basically
 

565
00:09:48,320 --> 00:09:49,829
operating system basically basically
just being a library you know sort of

566
00:09:49,829 --> 00:09:49,839
just being a library you know sort of
 

567
00:09:49,839 --> 00:09:50,310
just being a library you know sort of
thinking of

568
00:09:50,310 --> 00:09:50,320
thinking of
 

569
00:09:50,320 --> 00:09:52,630
thinking of
you know in terms of python uh maybe

570
00:09:52,630 --> 00:09:52,640
you know in terms of python uh maybe
 

571
00:09:52,640 --> 00:09:53,829
you know in terms of python uh maybe
just import os

572
00:09:53,829 --> 00:09:53,839
just import os
 

573
00:09:53,839 --> 00:09:56,310
just import os
and import os basically loads the whole

574
00:09:56,310 --> 00:09:56,320
and import os basically loads the whole
 

575
00:09:56,320 --> 00:09:57,670
and import os basically loads the whole
operating system inside of your

576
00:09:57,670 --> 00:09:57,680
operating system inside of your
 

577
00:09:57,680 --> 00:09:58,630
operating system inside of your
application

578
00:09:58,630 --> 00:09:58,640
application
 

579
00:09:58,640 --> 00:09:59,910
application
and that's you know the programming

580
00:09:59,910 --> 00:09:59,920
and that's you know the programming
 

581
00:09:59,920 --> 00:10:01,829
and that's you know the programming
interface you use

582
00:10:01,829 --> 00:10:01,839
interface you use
 

583
00:10:01,839 --> 00:10:03,990
interface you use
so if you think about that sort of way

584
00:10:03,990 --> 00:10:04,000
so if you think about that sort of way
 

585
00:10:04,000 --> 00:10:05,430
so if you think about that sort of way
of thinking so let's say we have to

586
00:10:05,430 --> 00:10:05,440
of thinking so let's say we have to
 

587
00:10:05,440 --> 00:10:06,310
of thinking so let's say we have to
shell here

588
00:10:06,310 --> 00:10:06,320
shell here
 

589
00:10:06,320 --> 00:10:07,910
shell here
you know maybe it includes the you know

590
00:10:07,910 --> 00:10:07,920
you know maybe it includes the you know
 

591
00:10:07,920 --> 00:10:09,670
you know maybe it includes the you know
the library for

592
00:10:09,670 --> 00:10:09,680
the library for
 

593
00:10:09,680 --> 00:10:12,470
the library for
the os and maybe we have some other

594
00:10:12,470 --> 00:10:12,480
the os and maybe we have some other
 

595
00:10:12,480 --> 00:10:14,470
the os and maybe we have some other
application echo

596
00:10:14,470 --> 00:10:14,480
application echo
 

597
00:10:14,480 --> 00:10:16,710
application echo
uh and then basically you know these

598
00:10:16,710 --> 00:10:16,720
uh and then basically you know these
 

599
00:10:16,720 --> 00:10:18,069
uh and then basically you know these
these applications

600
00:10:18,069 --> 00:10:18,079
these applications
 

601
00:10:18,079 --> 00:10:20,630
these applications
if there's no operating system really it

602
00:10:20,630 --> 00:10:20,640
if there's no operating system really it
 

603
00:10:20,640 --> 00:10:21,910
if there's no operating system really it
would directly interact with the

604
00:10:21,910 --> 00:10:21,920
would directly interact with the
 

605
00:10:21,920 --> 00:10:23,030
would directly interact with the
hardware

606
00:10:23,030 --> 00:10:23,040
hardware
 

607
00:10:23,040 --> 00:10:24,550
hardware
so for example you know they would

608
00:10:24,550 --> 00:10:24,560
so for example you know they would
 

609
00:10:24,560 --> 00:10:26,790
so for example you know they would
actually see you know there's a cpu core

610
00:10:26,790 --> 00:10:26,800
actually see you know there's a cpu core
 

611
00:10:26,800 --> 00:10:29,590
actually see you know there's a cpu core
you know there's another cpu core and

612
00:10:29,590 --> 00:10:29,600
you know there's another cpu core and
 

613
00:10:29,600 --> 00:10:30,870
you know there's another cpu core and
you know maybe there's a disk

614
00:10:30,870 --> 00:10:30,880
you know maybe there's a disk
 

615
00:10:30,880 --> 00:10:32,550
you know maybe there's a disk
and they interact directly with the disc

616
00:10:32,550 --> 00:10:32,560
and they interact directly with the disc
 

617
00:10:32,560 --> 00:10:34,230
and they interact directly with the disc
blocks and maybe there's memory and they

618
00:10:34,230 --> 00:10:34,240
blocks and maybe there's memory and they
 

619
00:10:34,240 --> 00:10:35,670
blocks and maybe there's memory and they
will directly interact with the memory

620
00:10:35,670 --> 00:10:35,680
will directly interact with the memory
 

621
00:10:35,680 --> 00:10:37,670
will directly interact with the memory
of the machine

622
00:10:37,670 --> 00:10:37,680
of the machine
 

623
00:10:37,680 --> 00:10:39,990
of the machine
and so there's really no layer between

624
00:10:39,990 --> 00:10:40,000
and so there's really no layer between
 

625
00:10:40,000 --> 00:10:41,670
and so there's really no layer between
no abstraction layer between basically

626
00:10:41,670 --> 00:10:41,680
no abstraction layer between basically
 

627
00:10:41,680 --> 00:10:43,269
no abstraction layer between basically
the applications

628
00:10:43,269 --> 00:10:43,279
the applications
 

629
00:10:43,279 --> 00:10:46,230
the applications
and the hardware and it turns out that

630
00:10:46,230 --> 00:10:46,240
and the hardware and it turns out that
 

631
00:10:46,240 --> 00:10:48,389
and the hardware and it turns out that
it's just not such a great design

632
00:10:48,389 --> 00:10:48,399
it's just not such a great design
 

633
00:10:48,399 --> 00:10:51,430
it's just not such a great design
uh for uh isolation

634
00:10:51,430 --> 00:10:51,440
uh for uh isolation
 

635
00:10:51,440 --> 00:10:53,190
uh for uh isolation
and you can see how isolation might be

636
00:10:53,190 --> 00:10:53,200
and you can see how isolation might be
 

637
00:10:53,200 --> 00:10:55,990
and you can see how isolation might be
broken let's assume for example that you

638
00:10:55,990 --> 00:10:56,000
broken let's assume for example that you
 

639
00:10:56,000 --> 00:10:56,550
broken let's assume for example that you
know

640
00:10:56,550 --> 00:10:56,560
know
 

641
00:10:56,560 --> 00:10:57,910
know
one of the goals graph the operating

642
00:10:57,910 --> 00:10:57,920
one of the goals graph the operating
 

643
00:10:57,920 --> 00:11:00,310
one of the goals graph the operating
system is run multiple applications

644
00:11:00,310 --> 00:11:00,320
system is run multiple applications
 

645
00:11:00,320 --> 00:11:02,310
system is run multiple applications
and so that has to be the case that in

646
00:11:02,310 --> 00:11:02,320
and so that has to be the case that in
 

647
00:11:02,320 --> 00:11:03,990
and so that has to be the case that in
once in a while it will switch

648
00:11:03,990 --> 00:11:04,000
once in a while it will switch
 

649
00:11:04,000 --> 00:11:05,350
once in a while it will switch
from one application to another

650
00:11:05,350 --> 00:11:05,360
from one application to another
 

651
00:11:05,360 --> 00:11:07,030
from one application to another
application let's say the hardware has

652
00:11:07,030 --> 00:11:07,040
application let's say the hardware has
 

653
00:11:07,040 --> 00:11:07,829
application let's say the hardware has
only one

654
00:11:07,829 --> 00:11:07,839
only one
 

655
00:11:07,839 --> 00:11:09,910
only one
cpu and so we're running the shell

656
00:11:09,910 --> 00:11:09,920
cpu and so we're running the shell
 

657
00:11:09,920 --> 00:11:11,430
cpu and so we're running the shell
saying that one cpu

658
00:11:11,430 --> 00:11:11,440
saying that one cpu
 

659
00:11:11,440 --> 00:11:12,870
saying that one cpu
but you know periodically and other

660
00:11:12,870 --> 00:11:12,880
but you know periodically and other
 

661
00:11:12,880 --> 00:11:15,430
but you know periodically and other
applications should be able to run too

662
00:11:15,430 --> 00:11:15,440
applications should be able to run too
 

663
00:11:15,440 --> 00:11:17,190
applications should be able to run too
well we have no operating system you

664
00:11:17,190 --> 00:11:17,200
well we have no operating system you
 

665
00:11:17,200 --> 00:11:18,710
well we have no operating system you
know to do it for us

666
00:11:18,710 --> 00:11:18,720
know to do it for us
 

667
00:11:18,720 --> 00:11:20,069
know to do it for us
then the shell basically has to sort of

668
00:11:20,069 --> 00:11:20,079
then the shell basically has to sort of
 

669
00:11:20,079 --> 00:11:24,069
then the shell basically has to sort of
give up you know the cpu once in a while

670
00:11:24,069 --> 00:11:24,079
give up you know the cpu once in a while
 

671
00:11:24,079 --> 00:11:26,310
give up you know the cpu once in a while
and so to be a nice person and say like

672
00:11:26,310 --> 00:11:26,320
and so to be a nice person and say like
 

673
00:11:26,320 --> 00:11:27,430
and so to be a nice person and say like
well you know i've run for a little

674
00:11:27,430 --> 00:11:27,440
well you know i've run for a little
 

675
00:11:27,440 --> 00:11:29,110
well you know i've run for a little
while now you get a chance to run

676
00:11:29,110 --> 00:11:29,120
while now you get a chance to run
 

677
00:11:29,120 --> 00:11:30,630
while now you get a chance to run
and this is sometimes called cooperative

678
00:11:30,630 --> 00:11:30,640
and this is sometimes called cooperative
 

679
00:11:30,640 --> 00:11:32,550
and this is sometimes called cooperative
scheduling um

680
00:11:32,550 --> 00:11:32,560
scheduling um
 

681
00:11:32,560 --> 00:11:34,389
scheduling um
but that's not so great for isolation

682
00:11:34,389 --> 00:11:34,399
but that's not so great for isolation
 

683
00:11:34,399 --> 00:11:36,069
but that's not so great for isolation
you know for example what what if you

684
00:11:36,069 --> 00:11:36,079
you know for example what what if you
 

685
00:11:36,079 --> 00:11:37,829
you know for example what what if you
know some function in the shell has an

686
00:11:37,829 --> 00:11:37,839
know some function in the shell has an
 

687
00:11:37,839 --> 00:11:38,870
know some function in the shell has an
infinite loop

688
00:11:38,870 --> 00:11:38,880
infinite loop
 

689
00:11:38,880 --> 00:11:40,550
infinite loop
and therefore it will never actually

690
00:11:40,550 --> 00:11:40,560
and therefore it will never actually
 

691
00:11:40,560 --> 00:11:42,710
and therefore it will never actually
give up the cpu and then no other

692
00:11:42,710 --> 00:11:42,720
give up the cpu and then no other
 

693
00:11:42,720 --> 00:11:44,310
give up the cpu and then no other
you know applications could run

694
00:11:44,310 --> 00:11:44,320
you know applications could run
 

695
00:11:44,320 --> 00:11:45,829
you know applications could run
including maybe the application that

696
00:11:45,829 --> 00:11:45,839
including maybe the application that
 

697
00:11:45,839 --> 00:11:47,110
including maybe the application that
would like stop or kill

698
00:11:47,110 --> 00:11:47,120
would like stop or kill
 

699
00:11:47,120 --> 00:11:49,670
would like stop or kill
you know the shell and so uh we

700
00:11:49,670 --> 00:11:49,680
you know the shell and so uh we
 

701
00:11:49,680 --> 00:11:51,829
you know the shell and so uh we
basically don't get any sort of form of

702
00:11:51,829 --> 00:11:51,839
basically don't get any sort of form of
 

703
00:11:51,839 --> 00:11:52,550
basically don't get any sort of form of
enforced

704
00:11:52,550 --> 00:11:52,560
enforced
 

705
00:11:52,560 --> 00:11:54,790
enforced
multiplexing and that's something that

706
00:11:54,790 --> 00:11:54,800
multiplexing and that's something that
 

707
00:11:54,800 --> 00:11:55,750
multiplexing and that's something that
we'd like to have

708
00:11:55,750 --> 00:11:55,760
we'd like to have
 

709
00:11:55,760 --> 00:11:57,430
we'd like to have
where you know no matter what the

710
00:11:57,430 --> 00:11:57,440
where you know no matter what the
 

711
00:11:57,440 --> 00:11:59,670
where you know no matter what the
application does it will be forced to

712
00:11:59,670 --> 00:11:59,680
application does it will be forced to
 

713
00:11:59,680 --> 00:12:01,670
application does it will be forced to
give up the cpu once in a while

714
00:12:01,670 --> 00:12:01,680
give up the cpu once in a while
 

715
00:12:01,680 --> 00:12:04,870
give up the cpu once in a while
so that other applications go wrong

716
00:12:04,870 --> 00:12:04,880
so that other applications go wrong
 

717
00:12:04,880 --> 00:12:05,990
so that other applications go wrong
similarly you know if you think about

718
00:12:05,990 --> 00:12:06,000
similarly you know if you think about
 

719
00:12:06,000 --> 00:12:08,310
similarly you know if you think about
this drama and design uh

720
00:12:08,310 --> 00:12:08,320
this drama and design uh
 

721
00:12:08,320 --> 00:12:10,230
this drama and design uh
you know we have there's like physical

722
00:12:10,230 --> 00:12:10,240
you know we have there's like physical
 

723
00:12:10,240 --> 00:12:11,509
you know we have there's like physical
memory right and all

724
00:12:11,509 --> 00:12:11,519
memory right and all
 

725
00:12:11,519 --> 00:12:13,509
memory right and all
i drew the picture here as for the

726
00:12:13,509 --> 00:12:13,519
i drew the picture here as for the
 

727
00:12:13,519 --> 00:12:14,629
i drew the picture here as for the
application sitting on the top of the

728
00:12:14,629 --> 00:12:14,639
application sitting on the top of the
 

729
00:12:14,639 --> 00:12:15,509
application sitting on the top of the
hardware

730
00:12:15,509 --> 00:12:15,519
hardware
 

731
00:12:15,519 --> 00:12:17,829
hardware
but you know there's physical memory and

732
00:12:17,829 --> 00:12:17,839
but you know there's physical memory and
 

733
00:12:17,839 --> 00:12:18,870
but you know there's physical memory and
basically the text

734
00:12:18,870 --> 00:12:18,880
basically the text
 

735
00:12:18,880 --> 00:12:20,629
basically the text
in the code and the data for these

736
00:12:20,629 --> 00:12:20,639
in the code and the data for these
 

737
00:12:20,639 --> 00:12:22,310
in the code and the data for these
applications actually sits in physical

738
00:12:22,310 --> 00:12:22,320
applications actually sits in physical
 

739
00:12:22,320 --> 00:12:24,629
applications actually sits in physical
memory right so here's memory

740
00:12:24,629 --> 00:12:24,639
memory right so here's memory
 

741
00:12:24,639 --> 00:12:27,110
memory right so here's memory
and here's me saying the you know the

742
00:12:27,110 --> 00:12:27,120
and here's me saying the you know the
 

743
00:12:27,120 --> 00:12:28,629
and here's me saying the you know the
part of physical memory that's used by

744
00:12:28,629 --> 00:12:28,639
part of physical memory that's used by
 

745
00:12:28,639 --> 00:12:29,350
part of physical memory that's used by
the shell

746
00:12:29,350 --> 00:12:29,360
the shell
 

747
00:12:29,360 --> 00:12:30,949
the shell
and here's maybe the part of the

748
00:12:30,949 --> 00:12:30,959
and here's maybe the part of the
 

749
00:12:30,959 --> 00:12:32,710
and here's maybe the part of the
physical memory that's used by

750
00:12:32,710 --> 00:12:32,720
physical memory that's used by
 

751
00:12:32,720 --> 00:12:35,670
physical memory that's used by
echo application and so you're gonna you

752
00:12:35,670 --> 00:12:35,680
echo application and so you're gonna you
 

753
00:12:35,680 --> 00:12:36,389
echo application and so you're gonna you
know and

754
00:12:36,389 --> 00:12:36,399
know and
 

755
00:12:36,399 --> 00:12:38,550
know and
again what we see here if we use like

756
00:12:38,550 --> 00:12:38,560
again what we see here if we use like
 

757
00:12:38,560 --> 00:12:40,710
again what we see here if we use like
simply simplistically like this

758
00:12:40,710 --> 00:12:40,720
simply simplistically like this
 

759
00:12:40,720 --> 00:12:44,069
simply simplistically like this
uh there's sort of no uh boundary

760
00:12:44,069 --> 00:12:44,079
uh there's sort of no uh boundary
 

761
00:12:44,079 --> 00:12:47,269
uh there's sort of no uh boundary
between these two guys if for example if

762
00:12:47,269 --> 00:12:47,279
between these two guys if for example if
 

763
00:12:47,279 --> 00:12:49,670
between these two guys if for example if
you know echo you know stores through

764
00:12:49,670 --> 00:12:49,680
you know echo you know stores through
 

765
00:12:49,680 --> 00:12:51,670
you know echo you know stores through
location that for example belongs you

766
00:12:51,670 --> 00:12:51,680
location that for example belongs you
 

767
00:12:51,680 --> 00:12:52,790
location that for example belongs you
know to

768
00:12:52,790 --> 00:12:52,800
know to
 

769
00:12:52,800 --> 00:12:55,030
know to
the shell like location 1000 and writes

770
00:12:55,030 --> 00:12:55,040
the shell like location 1000 and writes
 

771
00:12:55,040 --> 00:12:56,310
the shell like location 1000 and writes
a value there

772
00:12:56,310 --> 00:12:56,320
a value there
 

773
00:12:56,320 --> 00:12:58,470
a value there
you know whatever x uh then it would

774
00:12:58,470 --> 00:12:58,480
you know whatever x uh then it would
 

775
00:12:58,480 --> 00:13:00,230
you know whatever x uh then it would
just overwrite the physical memory of

776
00:13:00,230 --> 00:13:00,240
just overwrite the physical memory of
 

777
00:13:00,240 --> 00:13:00,949
just overwrite the physical memory of
the

778
00:13:00,949 --> 00:13:00,959
the
 

779
00:13:00,959 --> 00:13:03,190
the
shell memory and so that you know be

780
00:13:03,190 --> 00:13:03,200
shell memory and so that you know be
 

781
00:13:03,200 --> 00:13:05,030
shell memory and so that you know be
pretty undesirable okay because then a

782
00:13:05,030 --> 00:13:05,040
pretty undesirable okay because then a
 

783
00:13:05,040 --> 00:13:05,990
pretty undesirable okay because then a
bug you know an echo

784
00:13:05,990 --> 00:13:06,000
bug you know an echo
 

785
00:13:06,000 --> 00:13:08,069
bug you know an echo
could actually percolate into the shell

786
00:13:08,069 --> 00:13:08,079
could actually percolate into the shell
 

787
00:13:08,079 --> 00:13:09,269
could actually percolate into the shell
and you know it's going to be very

788
00:13:09,269 --> 00:13:09,279
and you know it's going to be very
 

789
00:13:09,279 --> 00:13:10,710
and you know it's going to be very
tricky to debug and that kind of stuff

790
00:13:10,710 --> 00:13:10,720
tricky to debug and that kind of stuff
 

791
00:13:10,720 --> 00:13:12,069
tricky to debug and that kind of stuff
and so this basically again

792
00:13:12,069 --> 00:13:12,079
and so this basically again
 

793
00:13:12,079 --> 00:13:15,350
and so this basically again
gives us like no strong isolation

794
00:13:15,350 --> 00:13:15,360
gives us like no strong isolation
 

795
00:13:15,360 --> 00:13:18,710
gives us like no strong isolation
what we'd like is uh to have

796
00:13:18,710 --> 00:13:18,720
what we'd like is uh to have
 

797
00:13:18,720 --> 00:13:21,269
what we'd like is uh to have
memory isolation so that one application

798
00:13:21,269 --> 00:13:21,279
memory isolation so that one application
 

799
00:13:21,279 --> 00:13:22,710
memory isolation so that one application
cannot overwrite

800
00:13:22,710 --> 00:13:22,720
cannot overwrite
 

801
00:13:22,720 --> 00:13:26,230
cannot overwrite
the uh memory of another application

802
00:13:26,230 --> 00:13:26,240
the uh memory of another application
 

803
00:13:26,240 --> 00:13:29,269
the uh memory of another application
um and it's a

804
00:13:29,269 --> 00:13:29,279
um and it's a
 

805
00:13:29,279 --> 00:13:32,150
um and it's a
you know one reason you know i mean

806
00:13:32,150 --> 00:13:32,160
you know one reason you know i mean
 

807
00:13:32,160 --> 00:13:33,509
you know one reason you know i mean
probably the main reason to actually

808
00:13:33,509 --> 00:13:33,519
probably the main reason to actually
 

809
00:13:33,519 --> 00:13:34,790
probably the main reason to actually
have an operating system

810
00:13:34,790 --> 00:13:34,800
have an operating system
 

811
00:13:34,800 --> 00:13:36,710
have an operating system
is basically to enforce you know both

812
00:13:36,710 --> 00:13:36,720
is basically to enforce you know both
 

813
00:13:36,720 --> 00:13:37,990
is basically to enforce you know both
the multiplexing

814
00:13:37,990 --> 00:13:38,000
the multiplexing
 

815
00:13:38,000 --> 00:13:40,470
the multiplexing
uh and to enforce you know strong memory

816
00:13:40,470 --> 00:13:40,480
uh and to enforce you know strong memory
 

817
00:13:40,480 --> 00:13:41,430
uh and to enforce you know strong memory
isolation

818
00:13:41,430 --> 00:13:41,440
isolation
 

819
00:13:41,440 --> 00:13:42,629
isolation
and if you didn't have an operating

820
00:13:42,629 --> 00:13:42,639
and if you didn't have an operating
 

821
00:13:42,639 --> 00:13:44,150
and if you didn't have an operating
system and the applicants were directly

822
00:13:44,150 --> 00:13:44,160
system and the applicants were directly
 

823
00:13:44,160 --> 00:13:45,430
system and the applicants were directly
interacting with the hardware

824
00:13:45,430 --> 00:13:45,440
interacting with the hardware
 

825
00:13:45,440 --> 00:13:47,910
interacting with the hardware
it would be very hard to achieve that

826
00:13:47,910 --> 00:13:47,920
it would be very hard to achieve that
 

827
00:13:47,920 --> 00:13:48,550
it would be very hard to achieve that
and so

828
00:13:48,550 --> 00:13:48,560
and so
 

829
00:13:48,560 --> 00:13:49,990
and so
this design of basically you know

830
00:13:49,990 --> 00:13:50,000
this design of basically you know
 

831
00:13:50,000 --> 00:13:51,590
this design of basically you know
operating system as a library

832
00:13:51,590 --> 00:13:51,600
operating system as a library
 

833
00:13:51,600 --> 00:13:53,590
operating system as a library
is not a very common design you may see

834
00:13:53,590 --> 00:13:53,600
is not a very common design you may see
 

835
00:13:53,600 --> 00:13:55,189
is not a very common design you may see
it in some real-time systems

836
00:13:55,189 --> 00:13:55,199
it in some real-time systems
 

837
00:13:55,199 --> 00:13:56,949
it in some real-time systems
where basically applications trust each

838
00:13:56,949 --> 00:13:56,959
where basically applications trust each
 

839
00:13:56,959 --> 00:13:58,949
where basically applications trust each
other but in most other

840
00:13:58,949 --> 00:13:58,959
other but in most other
 

841
00:13:58,959 --> 00:14:00,710
other but in most other
operating systems you know there's an

842
00:14:00,710 --> 00:14:00,720
operating systems you know there's an
 

843
00:14:00,720 --> 00:14:02,310
operating systems you know there's an
operating system that really enforces

844
00:14:02,310 --> 00:14:02,320
operating system that really enforces
 

845
00:14:02,320 --> 00:14:03,110
operating system that really enforces
you know that kind of

846
00:14:03,110 --> 00:14:03,120
you know that kind of
 

847
00:14:03,120 --> 00:14:06,389
you know that kind of
isolation so if we

848
00:14:06,389 --> 00:14:06,399
isolation so if we
 

849
00:14:06,399 --> 00:14:08,470
isolation so if we
look a little bit now at the unix

850
00:14:08,470 --> 00:14:08,480
look a little bit now at the unix
 

851
00:14:08,480 --> 00:14:14,310
look a little bit now at the unix
interface from this perspective

852
00:14:14,310 --> 00:14:14,320

 

853
00:14:14,320 --> 00:14:16,389

then we see that the interface actually

854
00:14:16,389 --> 00:14:16,399
then we see that the interface actually
 

855
00:14:16,399 --> 00:14:18,629
then we see that the interface actually
is carefully designed

856
00:14:18,629 --> 00:14:18,639
is carefully designed
 

857
00:14:18,639 --> 00:14:21,509
is carefully designed
so that it actually is feasible to

858
00:14:21,509 --> 00:14:21,519
so that it actually is feasible to
 

859
00:14:21,519 --> 00:14:22,230
so that it actually is feasible to
implement

860
00:14:22,230 --> 00:14:22,240
implement
 

861
00:14:22,240 --> 00:14:25,670
implement
that enforced uh isolation

862
00:14:25,670 --> 00:14:25,680
that enforced uh isolation
 

863
00:14:25,680 --> 00:14:27,269
that enforced uh isolation
in terms of multiplexing in terms of

864
00:14:27,269 --> 00:14:27,279
in terms of multiplexing in terms of
 

865
00:14:27,279 --> 00:14:29,430
in terms of multiplexing in terms of
physical memory and the way that is sort

866
00:14:29,430 --> 00:14:29,440
physical memory and the way that is sort
 

867
00:14:29,440 --> 00:14:29,670
physical memory and the way that is sort
of

868
00:14:29,670 --> 00:14:29,680
of
 

869
00:14:29,680 --> 00:14:32,150
of
done is that the interface basically

870
00:14:32,150 --> 00:14:32,160
done is that the interface basically
 

871
00:14:32,160 --> 00:14:33,030
done is that the interface basically
abstracts

872
00:14:33,030 --> 00:14:33,040
abstracts
 

873
00:14:33,040 --> 00:14:37,269
abstracts
the hardware

874
00:14:37,269 --> 00:14:37,279

 

875
00:14:37,279 --> 00:14:40,870

the hardware resources

876
00:14:40,870 --> 00:14:40,880

 

877
00:14:40,880 --> 00:14:43,269

in a way that then it makes it easy to

878
00:14:43,269 --> 00:14:43,279
in a way that then it makes it easy to
 

879
00:14:43,279 --> 00:14:44,310
in a way that then it makes it easy to
actually do

880
00:14:44,310 --> 00:14:44,320
actually do
 

881
00:14:44,320 --> 00:14:46,389
actually do
or not easier and it makes it possible

882
00:14:46,389 --> 00:14:46,399
or not easier and it makes it possible
 

883
00:14:46,399 --> 00:14:48,710
or not easier and it makes it possible
you know to provide you know the strong

884
00:14:48,710 --> 00:14:48,720
you know to provide you know the strong
 

885
00:14:48,720 --> 00:14:51,910
you know to provide you know the strong
isolation um and you know maybe

886
00:14:51,910 --> 00:14:51,920
isolation um and you know maybe
 

887
00:14:51,920 --> 00:14:54,710
isolation um and you know maybe
it gives you some examples uh so

888
00:14:54,710 --> 00:14:54,720
it gives you some examples uh so
 

889
00:14:54,720 --> 00:14:56,310
it gives you some examples uh so
processes now we've seen them like the

890
00:14:56,310 --> 00:14:56,320
processes now we've seen them like the
 

891
00:14:56,320 --> 00:14:59,590
processes now we've seen them like the
things that are created by fork

892
00:14:59,590 --> 00:14:59,600
things that are created by fork
 

893
00:14:59,600 --> 00:15:01,509
things that are created by fork
you know they're not you know literally

894
00:15:01,509 --> 00:15:01,519
you know they're not you know literally
 

895
00:15:01,519 --> 00:15:03,670
you know they're not you know literally
a cpu right i mean

896
00:15:03,670 --> 00:15:03,680
a cpu right i mean
 

897
00:15:03,680 --> 00:15:05,590
a cpu right i mean
but they correspond to like what a cpu

898
00:15:05,590 --> 00:15:05,600
but they correspond to like what a cpu
 

899
00:15:05,600 --> 00:15:07,910
but they correspond to like what a cpu
is and it allows you to run computation

900
00:15:07,910 --> 00:15:07,920
is and it allows you to run computation
 

901
00:15:07,920 --> 00:15:09,670
is and it allows you to run computation
but you know because you know they're

902
00:15:09,670 --> 00:15:09,680
but you know because you know they're
 

903
00:15:09,680 --> 00:15:11,269
but you know because you know they're
the applications cannot directly

904
00:15:11,269 --> 00:15:11,279
the applications cannot directly
 

905
00:15:11,279 --> 00:15:13,269
the applications cannot directly
interact with the cpu but only for this

906
00:15:13,269 --> 00:15:13,279
interact with the cpu but only for this
 

907
00:15:13,279 --> 00:15:14,629
interact with the cpu but only for this
process abstraction

908
00:15:14,629 --> 00:15:14,639
process abstraction
 

909
00:15:14,639 --> 00:15:16,870
process abstraction
the kernel sort of behind the scenes you

910
00:15:16,870 --> 00:15:16,880
the kernel sort of behind the scenes you
 

911
00:15:16,880 --> 00:15:20,150
the kernel sort of behind the scenes you
know can switch between processes

912
00:15:20,150 --> 00:15:20,160
know can switch between processes
 

913
00:15:20,160 --> 00:15:22,310
know can switch between processes
so instead of having you know direct

914
00:15:22,310 --> 00:15:22,320
so instead of having you know direct
 

915
00:15:22,320 --> 00:15:24,150
so instead of having you know direct
cpus to manipulate

916
00:15:24,150 --> 00:15:24,160
cpus to manipulate
 

917
00:15:24,160 --> 00:15:25,990
cpus to manipulate
or given to the application the

918
00:15:25,990 --> 00:15:26,000
or given to the application the
 

919
00:15:26,000 --> 00:15:27,750
or given to the application the
operating system provides processes

920
00:15:27,750 --> 00:15:27,760
operating system provides processes
 

921
00:15:27,760 --> 00:15:29,749
operating system provides processes
that extract the weight or the cpu

922
00:15:29,749 --> 00:15:29,759
that extract the weight or the cpu
 

923
00:15:29,759 --> 00:15:31,350
that extract the weight or the cpu
itself so that actually the operating

924
00:15:31,350 --> 00:15:31,360
itself so that actually the operating
 

925
00:15:31,360 --> 00:15:32,550
itself so that actually the operating
system can multiplex

926
00:15:32,550 --> 00:15:32,560
system can multiplex
 

927
00:15:32,560 --> 00:15:34,870
system can multiplex
and one cpu or multiple cpus among

928
00:15:34,870 --> 00:15:34,880
and one cpu or multiple cpus among
 

929
00:15:34,880 --> 00:15:37,189
and one cpu or multiple cpus among
multiple applications

930
00:15:37,189 --> 00:15:37,199
multiple applications
 

931
00:15:37,199 --> 00:15:40,629
multiple applications
similarly if you think about exec exec

932
00:15:40,629 --> 00:15:40,639
similarly if you think about exec exec
 

933
00:15:40,639 --> 00:15:44,550
similarly if you think about exec exec
provides a memory image um and

934
00:15:44,550 --> 00:15:44,560
provides a memory image um and
 

935
00:15:44,560 --> 00:15:47,030
provides a memory image um and
uh armando yeah go ahead ask your

936
00:15:47,030 --> 00:15:47,040
uh armando yeah go ahead ask your
 

937
00:15:47,040 --> 00:15:47,829
uh armando yeah go ahead ask your
question

938
00:15:47,829 --> 00:15:47,839
question
 

939
00:15:47,839 --> 00:15:49,749
question
one question about like processes sort

940
00:15:49,749 --> 00:15:49,759
one question about like processes sort
 

941
00:15:49,759 --> 00:15:51,670
one question about like processes sort
of like obstructing

942
00:15:51,670 --> 00:15:51,680
of like obstructing
 

943
00:15:51,680 --> 00:15:55,189
of like obstructing
the cpu is it that

944
00:15:55,189 --> 00:15:55,199
the cpu is it that
 

945
00:15:55,199 --> 00:15:58,310
the cpu is it that
one process uses part of the cpu

946
00:15:58,310 --> 00:15:58,320
one process uses part of the cpu
 

947
00:15:58,320 --> 00:16:01,350
one process uses part of the cpu
and another process uses a like more a

948
00:16:01,350 --> 00:16:01,360
and another process uses a like more a
 

949
00:16:01,360 --> 00:16:02,870
and another process uses a like more a
different part of that cpu or a

950
00:16:02,870 --> 00:16:02,880
different part of that cpu or a
 

951
00:16:02,880 --> 00:16:03,829
different part of that cpu or a
different cpu

952
00:16:03,829 --> 00:16:03,839
different cpu
 

953
00:16:03,839 --> 00:16:06,710
different cpu
if it's like a multi-core or like what

954
00:16:06,710 --> 00:16:06,720
if it's like a multi-core or like what
 

955
00:16:06,720 --> 00:16:08,310
if it's like a multi-core or like what
do you mean by processes instead of a

956
00:16:08,310 --> 00:16:08,320
do you mean by processes instead of a
 

957
00:16:08,320 --> 00:16:09,030
do you mean by processes instead of a
cpu

958
00:16:09,030 --> 00:16:09,040
cpu
 

959
00:16:09,040 --> 00:16:11,990
cpu
yeah okay so i really mean one cpu

960
00:16:11,990 --> 00:16:12,000
yeah okay so i really mean one cpu
 

961
00:16:12,000 --> 00:16:14,069
yeah okay so i really mean one cpu
abstracted away into a process so okay

962
00:16:14,069 --> 00:16:14,079
abstracted away into a process so okay
 

963
00:16:14,079 --> 00:16:15,670
abstracted away into a process so okay
so the way to think about it is the

964
00:16:15,670 --> 00:16:15,680
so the way to think about it is the
 

965
00:16:15,680 --> 00:16:18,870
so the way to think about it is the
uh the risc 5 core or risk 5 processor

966
00:16:18,870 --> 00:16:18,880
uh the risc 5 core or risk 5 processor
 

967
00:16:18,880 --> 00:16:19,749
uh the risc 5 core or risk 5 processor
that we're using

968
00:16:19,749 --> 00:16:19,759
that we're using
 

969
00:16:19,759 --> 00:16:22,870
that we're using
in the lab that's actually four cores

970
00:16:22,870 --> 00:16:22,880
in the lab that's actually four cores
 

971
00:16:22,880 --> 00:16:25,350
in the lab that's actually four cores
uh and so you can run four processes

972
00:16:25,350 --> 00:16:25,360
uh and so you can run four processes
 

973
00:16:25,360 --> 00:16:27,430
uh and so you can run four processes
concurrently or in parallel you know one

974
00:16:27,430 --> 00:16:27,440
concurrently or in parallel you know one
 

975
00:16:27,440 --> 00:16:29,189
concurrently or in parallel you know one
process on each core

976
00:16:29,189 --> 00:16:29,199
process on each core
 

977
00:16:29,199 --> 00:16:30,710
process on each core
and what the operating system does is

978
00:16:30,710 --> 00:16:30,720
and what the operating system does is
 

979
00:16:30,720 --> 00:16:32,389
and what the operating system does is
let's say you have eight applications or

980
00:16:32,389 --> 00:16:32,399
let's say you have eight applications or
 

981
00:16:32,399 --> 00:16:33,670
let's say you have eight applications or
seven applications

982
00:16:33,670 --> 00:16:33,680
seven applications
 

983
00:16:33,680 --> 00:16:36,230
seven applications
it will take some core and multiplexes

984
00:16:36,230 --> 00:16:36,240
it will take some core and multiplexes
 

985
00:16:36,240 --> 00:16:37,430
it will take some core and multiplexes
time multiplexes

986
00:16:37,430 --> 00:16:37,440
time multiplexes
 

987
00:16:37,440 --> 00:16:38,790
time multiplexes
between different processes so for

988
00:16:38,790 --> 00:16:38,800
between different processes so for
 

989
00:16:38,800 --> 00:16:41,110
between different processes so for
example it will run you know one app

990
00:16:41,110 --> 00:16:41,120
example it will run you know one app
 

991
00:16:41,120 --> 00:16:43,030
example it will run you know one app
process for 100 milliseconds

992
00:16:43,030 --> 00:16:43,040
process for 100 milliseconds
 

993
00:16:43,040 --> 00:16:45,670
process for 100 milliseconds
then stop unload you know that process

994
00:16:45,670 --> 00:16:45,680
then stop unload you know that process
 

995
00:16:45,680 --> 00:16:46,310
then stop unload you know that process
out of the

996
00:16:46,310 --> 00:16:46,320
out of the
 

997
00:16:46,320 --> 00:16:49,749
out of the
cpu or out of the core loading the next

998
00:16:49,749 --> 00:16:49,759
cpu or out of the core loading the next
 

999
00:16:49,759 --> 00:16:50,550
cpu or out of the core loading the next
uh

1000
00:16:50,550 --> 00:16:50,560
uh
 

1001
00:16:50,560 --> 00:16:52,389
uh
application or the next process and runs

1002
00:16:52,389 --> 00:16:52,399
application or the next process and runs
 

1003
00:16:52,399 --> 00:16:53,990
application or the next process and runs
that for 100 milliseconds

1004
00:16:53,990 --> 00:16:54,000
that for 100 milliseconds
 

1005
00:16:54,000 --> 00:16:55,910
that for 100 milliseconds
and it just enforces that no application

1006
00:16:55,910 --> 00:16:55,920
and it just enforces that no application
 

1007
00:16:55,920 --> 00:16:57,509
and it just enforces that no application
can run or no process can run longer

1008
00:16:57,509 --> 00:16:57,519
can run or no process can run longer
 

1009
00:16:57,519 --> 00:16:59,110
can run or no process can run longer
than 100 milliseconds

1010
00:16:59,110 --> 00:16:59,120
than 100 milliseconds
 

1011
00:16:59,120 --> 00:17:00,790
than 100 milliseconds
and we'll see exactly how this is done

1012
00:17:00,790 --> 00:17:00,800
and we'll see exactly how this is done
 

1013
00:17:00,800 --> 00:17:02,310
and we'll see exactly how this is done
in a couple lectures but that's sort of

1014
00:17:02,310 --> 00:17:02,320
in a couple lectures but that's sort of
 

1015
00:17:02,320 --> 00:17:04,150
in a couple lectures but that's sort of
the basic idea

1016
00:17:04,150 --> 00:17:04,160
the basic idea
 

1017
00:17:04,160 --> 00:17:06,549
the basic idea
okay but multiple processes cannot use

1018
00:17:06,549 --> 00:17:06,559
okay but multiple processes cannot use
 

1019
00:17:06,559 --> 00:17:08,470
okay but multiple processes cannot use
the same cpu at the same time

1020
00:17:08,470 --> 00:17:08,480
the same cpu at the same time
 

1021
00:17:08,480 --> 00:17:11,270
the same cpu at the same time
no it's time multiplied you run for one

1022
00:17:11,270 --> 00:17:11,280
no it's time multiplied you run for one
 

1023
00:17:11,280 --> 00:17:12,630
no it's time multiplied you run for one
for a while then you run the next one

1024
00:17:12,630 --> 00:17:12,640
for a while then you run the next one
 

1025
00:17:12,640 --> 00:17:13,990
for a while then you run the next one
for a while

1026
00:17:13,990 --> 00:17:14,000
for a while
 

1027
00:17:14,000 --> 00:17:17,110
for a while
all right thank you okay so

1028
00:17:17,110 --> 00:17:17,120
all right thank you okay so
 

1029
00:17:17,120 --> 00:17:19,110
all right thank you okay so
one way to think about exec is that it

1030
00:17:19,110 --> 00:17:19,120
one way to think about exec is that it
 

1031
00:17:19,120 --> 00:17:20,630
one way to think about exec is that it
actually

1032
00:17:20,630 --> 00:17:20,640
actually
 

1033
00:17:20,640 --> 00:17:28,309
actually
abstracts memory

1034
00:17:28,309 --> 00:17:28,319

 

1035
00:17:28,319 --> 00:17:31,029

so for example if you think about the

1036
00:17:31,029 --> 00:17:31,039
so for example if you think about the
 

1037
00:17:31,039 --> 00:17:32,789
so for example if you think about the
actual system call you know takes a file

1038
00:17:32,789 --> 00:17:32,799
actual system call you know takes a file
 

1039
00:17:32,799 --> 00:17:33,750
actual system call you know takes a file
name you know

1040
00:17:33,750 --> 00:17:33,760
name you know
 

1041
00:17:33,760 --> 00:17:35,750
name you know
and in that file is basically the memory

1042
00:17:35,750 --> 00:17:35,760
and in that file is basically the memory
 

1043
00:17:35,760 --> 00:17:36,950
and in that file is basically the memory
image of

1044
00:17:36,950 --> 00:17:36,960
image of
 

1045
00:17:36,960 --> 00:17:39,110
image of
a program store you know it's text you

1046
00:17:39,110 --> 00:17:39,120
a program store you know it's text you
 

1047
00:17:39,120 --> 00:17:40,230
a program store you know it's text you
know sometimes it's uh

1048
00:17:40,230 --> 00:17:40,240
know sometimes it's uh
 

1049
00:17:40,240 --> 00:17:43,750
know sometimes it's uh
global data uh and and that forms

1050
00:17:43,750 --> 00:17:43,760
global data uh and and that forms
 

1051
00:17:43,760 --> 00:17:47,190
global data uh and and that forms
the the memory uh of the application

1052
00:17:47,190 --> 00:17:47,200
the the memory uh of the application
 

1053
00:17:47,200 --> 00:17:49,590
the the memory uh of the application
now the application can grow its memory

1054
00:17:49,590 --> 00:17:49,600
now the application can grow its memory
 

1055
00:17:49,600 --> 00:17:51,350
now the application can grow its memory
for example by calling s-break

1056
00:17:51,350 --> 00:17:51,360
for example by calling s-break
 

1057
00:17:51,360 --> 00:17:54,310
for example by calling s-break
uh and uh extend there by extending its

1058
00:17:54,310 --> 00:17:54,320
uh and uh extend there by extending its
 

1059
00:17:54,320 --> 00:17:55,510
uh and uh extend there by extending its
data segment

1060
00:17:55,510 --> 00:17:55,520
data segment
 

1061
00:17:55,520 --> 00:17:57,190
data segment
but it doesn't really have a direct

1062
00:17:57,190 --> 00:17:57,200
but it doesn't really have a direct
 

1063
00:17:57,200 --> 00:17:59,029
but it doesn't really have a direct
aspect to physical memory you know

1064
00:17:59,029 --> 00:17:59,039
aspect to physical memory you know
 

1065
00:17:59,039 --> 00:18:02,070
aspect to physical memory you know
you can't just ask or no i want you know

1066
00:18:02,070 --> 00:18:02,080
you can't just ask or no i want you know
 

1067
00:18:02,080 --> 00:18:04,630
you can't just ask or no i want you know
addresses you know physical memory uh 1k

1068
00:18:04,630 --> 00:18:04,640
addresses you know physical memory uh 1k
 

1069
00:18:04,640 --> 00:18:05,510
addresses you know physical memory uh 1k
to 2k

1070
00:18:05,510 --> 00:18:05,520
to 2k
 

1071
00:18:05,520 --> 00:18:07,590
to 2k
uh you know there's no way of getting at

1072
00:18:07,590 --> 00:18:07,600
uh you know there's no way of getting at
 

1073
00:18:07,600 --> 00:18:08,950
uh you know there's no way of getting at
that and again the reason that there's

1074
00:18:08,950 --> 00:18:08,960
that and again the reason that there's
 

1075
00:18:08,960 --> 00:18:10,630
that and again the reason that there's
no way that you can get at that

1076
00:18:10,630 --> 00:18:10,640
no way that you can get at that
 

1077
00:18:10,640 --> 00:18:12,310
no way that you can get at that
is because the operating system usually

1078
00:18:12,310 --> 00:18:12,320
is because the operating system usually
 

1079
00:18:12,320 --> 00:18:14,150
is because the operating system usually
wants to provide memory isolation

1080
00:18:14,150 --> 00:18:14,160
wants to provide memory isolation
 

1081
00:18:14,160 --> 00:18:15,590
wants to provide memory isolation
and therefore wants to be in control or

1082
00:18:15,590 --> 00:18:15,600
and therefore wants to be in control or
 

1083
00:18:15,600 --> 00:18:18,070
and therefore wants to be in control or
sort of intermediate and intermediate

1084
00:18:18,070 --> 00:18:18,080
sort of intermediate and intermediate
 

1085
00:18:18,080 --> 00:18:19,510
sort of intermediate and intermediate
between the applications and the

1086
00:18:19,510 --> 00:18:19,520
between the applications and the
 

1087
00:18:19,520 --> 00:18:21,590
between the applications and the
physical hardware and exec is you know

1088
00:18:21,590 --> 00:18:21,600
physical hardware and exec is you know
 

1089
00:18:21,600 --> 00:18:23,110
physical hardware and exec is you know
sort of a system call that

1090
00:18:23,110 --> 00:18:23,120
sort of a system call that
 

1091
00:18:23,120 --> 00:18:25,590
sort of a system call that
you know capture or shows that there's

1092
00:18:25,590 --> 00:18:25,600
you know capture or shows that there's
 

1093
00:18:25,600 --> 00:18:27,029
you know capture or shows that there's
like no direct

1094
00:18:27,029 --> 00:18:27,039
like no direct
 

1095
00:18:27,039 --> 00:18:30,230
like no direct
access to the memory another example of

1096
00:18:30,230 --> 00:18:30,240
access to the memory another example of
 

1097
00:18:30,240 --> 00:18:33,190
access to the memory another example of
this is like files

1098
00:18:33,190 --> 00:18:33,200
this is like files
 

1099
00:18:33,200 --> 00:18:34,789
this is like files
files basically abstract away disk

1100
00:18:34,789 --> 00:18:34,799
files basically abstract away disk
 

1101
00:18:34,799 --> 00:18:41,430
files basically abstract away disk
blocks

1102
00:18:41,430 --> 00:18:41,440

 

1103
00:18:41,440 --> 00:18:43,990

so instead of reading and writing uh the

1104
00:18:43,990 --> 00:18:44,000
so instead of reading and writing uh the
 

1105
00:18:44,000 --> 00:18:45,669
so instead of reading and writing uh the
disc blocks of the the

1106
00:18:45,669 --> 00:18:45,679
disc blocks of the the
 

1107
00:18:45,679 --> 00:18:47,110
disc blocks of the the
the disc that sits attached to your

1108
00:18:47,110 --> 00:18:47,120
the disc that sits attached to your
 

1109
00:18:47,120 --> 00:18:49,110
the disc that sits attached to your
computer uh that's actually just not

1110
00:18:49,110 --> 00:18:49,120
computer uh that's actually just not
 

1111
00:18:49,120 --> 00:18:51,110
computer uh that's actually just not
allowed in unix you know the only way to

1112
00:18:51,110 --> 00:18:51,120
allowed in unix you know the only way to
 

1113
00:18:51,120 --> 00:18:53,190
allowed in unix you know the only way to
interact or with the storage system

1114
00:18:53,190 --> 00:18:53,200
interact or with the storage system
 

1115
00:18:53,200 --> 00:18:54,630
interact or with the storage system
is through files and you can read and

1116
00:18:54,630 --> 00:18:54,640
is through files and you can read and
 

1117
00:18:54,640 --> 00:18:56,310
is through files and you can read and
write files you provide a convenient

1118
00:18:56,310 --> 00:18:56,320
write files you provide a convenient
 

1119
00:18:56,320 --> 00:18:58,230
write files you provide a convenient
abstraction you can name files

1120
00:18:58,230 --> 00:18:58,240
abstraction you can name files
 

1121
00:18:58,240 --> 00:18:59,990
abstraction you can name files
et cetera et cetera but then the

1122
00:18:59,990 --> 00:19:00,000
et cetera et cetera but then the
 

1123
00:19:00,000 --> 00:19:02,150
et cetera et cetera but then the
operating system in itself can actually

1124
00:19:02,150 --> 00:19:02,160
operating system in itself can actually
 

1125
00:19:02,160 --> 00:19:04,950
operating system in itself can actually
decide how to map those files to

1126
00:19:04,950 --> 00:19:04,960
decide how to map those files to
 

1127
00:19:04,960 --> 00:19:06,950
decide how to map those files to
this box and make sure that for example

1128
00:19:06,950 --> 00:19:06,960
this box and make sure that for example
 

1129
00:19:06,960 --> 00:19:09,350
this box and make sure that for example
this block only shows up in one file and

1130
00:19:09,350 --> 00:19:09,360
this block only shows up in one file and
 

1131
00:19:09,360 --> 00:19:10,549
this block only shows up in one file and
that you know user a

1132
00:19:10,549 --> 00:19:10,559
that you know user a
 

1133
00:19:10,559 --> 00:19:12,710
that you know user a
cannot actually you know manipulate or

1134
00:19:12,710 --> 00:19:12,720
cannot actually you know manipulate or
 

1135
00:19:12,720 --> 00:19:13,590
cannot actually you know manipulate or
read or write

1136
00:19:13,590 --> 00:19:13,600
read or write
 

1137
00:19:13,600 --> 00:19:17,029
read or write
you know the files of uh user b uh and

1138
00:19:17,029 --> 00:19:17,039
you know the files of uh user b uh and
 

1139
00:19:17,039 --> 00:19:17,510
you know the files of uh user b uh and
again

1140
00:19:17,510 --> 00:19:17,520
again
 

1141
00:19:17,520 --> 00:19:19,190
again
you know this you know that sort of

1142
00:19:19,190 --> 00:19:19,200
you know this you know that sort of
 

1143
00:19:19,200 --> 00:19:20,630
you know this you know that sort of
interface that

1144
00:19:20,630 --> 00:19:20,640
interface that
 

1145
00:19:20,640 --> 00:19:22,470
interface that
the file abstraction allows that sort of

1146
00:19:22,470 --> 00:19:22,480
the file abstraction allows that sort of
 

1147
00:19:22,480 --> 00:19:24,390
the file abstraction allows that sort of
strong isolation between

1148
00:19:24,390 --> 00:19:24,400
strong isolation between
 

1149
00:19:24,400 --> 00:19:25,990
strong isolation between
even different users and you know to

1150
00:19:25,990 --> 00:19:26,000
even different users and you know to
 

1151
00:19:26,000 --> 00:19:29,270
even different users and you know to
different processes of the same user

1152
00:19:29,270 --> 00:19:29,280
different processes of the same user
 

1153
00:19:29,280 --> 00:19:30,789
different processes of the same user
and so you see that you know in some

1154
00:19:30,789 --> 00:19:30,799
and so you see that you know in some
 

1155
00:19:30,799 --> 00:19:32,150
and so you see that you know in some
ways you know the system called

1156
00:19:32,150 --> 00:19:32,160
ways you know the system called
 

1157
00:19:32,160 --> 00:19:33,510
ways you know the system called
interface or the unix interface that

1158
00:19:33,510 --> 00:19:33,520
interface or the unix interface that
 

1159
00:19:33,520 --> 00:19:35,110
interface or the unix interface that
you've been programming with you know in

1160
00:19:35,110 --> 00:19:35,120
you've been programming with you know in
 

1161
00:19:35,120 --> 00:19:36,070
you've been programming with you know in
the util lab

1162
00:19:36,070 --> 00:19:36,080
the util lab
 

1163
00:19:36,080 --> 00:19:38,070
the util lab
seems to be sort of carefully designed

1164
00:19:38,070 --> 00:19:38,080
seems to be sort of carefully designed
 

1165
00:19:38,080 --> 00:19:40,230
seems to be sort of carefully designed
to abstract the resources in a way

1166
00:19:40,230 --> 00:19:40,240
to abstract the resources in a way
 

1167
00:19:40,240 --> 00:19:41,830
to abstract the resources in a way
so that you know the operating system

1168
00:19:41,830 --> 00:19:41,840
so that you know the operating system
 

1169
00:19:41,840 --> 00:19:43,430
so that you know the operating system
the implementation of the interface

1170
00:19:43,430 --> 00:19:43,440
the implementation of the interface
 

1171
00:19:43,440 --> 00:19:45,029
the implementation of the interface
can actually multiplex you know the

1172
00:19:45,029 --> 00:19:45,039
can actually multiplex you know the
 

1173
00:19:45,039 --> 00:19:47,190
can actually multiplex you know the
resources on multiple applications

1174
00:19:47,190 --> 00:19:47,200
resources on multiple applications
 

1175
00:19:47,200 --> 00:19:53,990
resources on multiple applications
and provides strong strong isolation

1176
00:19:53,990 --> 00:19:54,000

 

1177
00:19:54,000 --> 00:19:56,230

any questions about that we have a

1178
00:19:56,230 --> 00:19:56,240
any questions about that we have a
 

1179
00:19:56,240 --> 00:19:57,750
any questions about that we have a
question in the chat that says uh do

1180
00:19:57,750 --> 00:19:57,760
question in the chat that says uh do
 

1181
00:19:57,760 --> 00:19:59,669
question in the chat that says uh do
more complex kernels try to reschedule

1182
00:19:59,669 --> 00:19:59,679
more complex kernels try to reschedule
 

1183
00:19:59,679 --> 00:20:01,590
more complex kernels try to reschedule
processes on the same core to reduce

1184
00:20:01,590 --> 00:20:01,600
processes on the same core to reduce
 

1185
00:20:01,600 --> 00:20:02,710
processes on the same core to reduce
cash misses

1186
00:20:02,710 --> 00:20:02,720
cash misses
 

1187
00:20:02,720 --> 00:20:05,590
cash misses
oh yeah uh there's something called

1188
00:20:05,590 --> 00:20:05,600
oh yeah uh there's something called
 

1189
00:20:05,600 --> 00:20:06,549
oh yeah uh there's something called
cache affinity

1190
00:20:06,549 --> 00:20:06,559
cache affinity
 

1191
00:20:06,559 --> 00:20:09,190
cache affinity
uh uh you know the scan version in you

1192
00:20:09,190 --> 00:20:09,200
uh uh you know the scan version in you
 

1193
00:20:09,200 --> 00:20:10,870
uh uh you know the scan version in you
know modern operating systems are

1194
00:20:10,870 --> 00:20:10,880
know modern operating systems are
 

1195
00:20:10,880 --> 00:20:13,190
know modern operating systems are
very sophisticated and indeed you know

1196
00:20:13,190 --> 00:20:13,200
very sophisticated and indeed you know
 

1197
00:20:13,200 --> 00:20:14,870
very sophisticated and indeed you know
trying to avoid cache misses and things

1198
00:20:14,870 --> 00:20:14,880
trying to avoid cache misses and things
 

1199
00:20:14,880 --> 00:20:16,310
trying to avoid cache misses and things
like that and to optimize in the

1200
00:20:16,310 --> 00:20:16,320
like that and to optimize in the
 

1201
00:20:16,320 --> 00:20:17,590
like that and to optimize in the
performance

1202
00:20:17,590 --> 00:20:17,600
performance
 

1203
00:20:17,600 --> 00:20:19,430
performance
and you know we'll see some of that much

1204
00:20:19,430 --> 00:20:19,440
and you know we'll see some of that much
 

1205
00:20:19,440 --> 00:20:20,950
and you know we'll see some of that much
later in the semester you know when

1206
00:20:20,950 --> 00:20:20,960
later in the semester you know when
 

1207
00:20:20,960 --> 00:20:21,270
later in the semester you know when
we're

1208
00:20:21,270 --> 00:20:21,280
we're
 

1209
00:20:21,280 --> 00:20:22,549
we're
going to be talking about high

1210
00:20:22,549 --> 00:20:22,559
going to be talking about high
 

1211
00:20:22,559 --> 00:20:24,950
going to be talking about high
performance networking uh that will show

1212
00:20:24,950 --> 00:20:24,960
performance networking uh that will show
 

1213
00:20:24,960 --> 00:20:26,230
performance networking uh that will show
up there

1214
00:20:26,230 --> 00:20:26,240
up there
 

1215
00:20:26,240 --> 00:20:28,870
up there
another question from chat where in xv6

1216
00:20:28,870 --> 00:20:28,880
another question from chat where in xv6
 

1217
00:20:28,880 --> 00:20:30,789
another question from chat where in xv6
can we see how the os multiplexes

1218
00:20:30,789 --> 00:20:30,799
can we see how the os multiplexes
 

1219
00:20:30,799 --> 00:20:31,909
can we see how the os multiplexes
processes

1220
00:20:31,909 --> 00:20:31,919
processes
 

1221
00:20:31,919 --> 00:20:35,350
processes
uh we're gonna there's a couple pile of

1222
00:20:35,350 --> 00:20:35,360
uh we're gonna there's a couple pile of
 

1223
00:20:35,360 --> 00:20:37,190
uh we're gonna there's a couple pile of
files that are relevant but proc.c

1224
00:20:37,190 --> 00:20:37,200
files that are relevant but proc.c
 

1225
00:20:37,200 --> 00:20:39,430
files that are relevant but proc.c
is probably the most relevant one uh

1226
00:20:39,430 --> 00:20:39,440
is probably the most relevant one uh
 

1227
00:20:39,440 --> 00:20:40,789
is probably the most relevant one uh
this will be a topic of

1228
00:20:40,789 --> 00:20:40,799
this will be a topic of
 

1229
00:20:40,799 --> 00:20:43,190
this will be a topic of
lecture in like two or three weeks and

1230
00:20:43,190 --> 00:20:43,200
lecture in like two or three weeks and
 

1231
00:20:43,200 --> 00:20:44,470
lecture in like two or three weeks and
we're going to go in great amount of

1232
00:20:44,470 --> 00:20:44,480
we're going to go in great amount of
 

1233
00:20:44,480 --> 00:20:45,830
we're going to go in great amount of
detail and show exactly how the

1234
00:20:45,830 --> 00:20:45,840
detail and show exactly how the
 

1235
00:20:45,840 --> 00:20:48,230
detail and show exactly how the
multiplexing happens

1236
00:20:48,230 --> 00:20:48,240
multiplexing happens
 

1237
00:20:48,240 --> 00:20:49,510
multiplexing happens
so one way to think about this lecture

1238
00:20:49,510 --> 00:20:49,520
so one way to think about this lecture
 

1239
00:20:49,520 --> 00:20:50,630
so one way to think about this lecture
is a little bit of an introduction to a

1240
00:20:50,630 --> 00:20:50,640
is a little bit of an introduction to a
 

1241
00:20:50,640 --> 00:20:51,750
is a little bit of an introduction to a
lot of different pieces

1242
00:20:51,750 --> 00:20:51,760
lot of different pieces
 

1243
00:20:51,760 --> 00:20:53,669
lot of different pieces
and you know because we've got to start

1244
00:20:53,669 --> 00:20:53,679
and you know because we've got to start
 

1245
00:20:53,679 --> 00:20:56,390
and you know because we've got to start
somewhere

1246
00:20:56,390 --> 00:20:56,400

 

1247
00:20:56,400 --> 00:21:00,870

okay so um so we go back into this

1248
00:21:00,870 --> 00:21:00,880
okay so um so we go back into this
 

1249
00:21:00,880 --> 00:21:03,110
okay so um so we go back into this
picture here that i showed a little bit

1250
00:21:03,110 --> 00:21:03,120
picture here that i showed a little bit
 

1251
00:21:03,120 --> 00:21:04,149
picture here that i showed a little bit
a while ago

1252
00:21:04,149 --> 00:21:04,159
a while ago
 

1253
00:21:04,159 --> 00:21:05,990
a while ago
we have this uh the shell running the

1254
00:21:05,990 --> 00:21:06,000
we have this uh the shell running the
 

1255
00:21:06,000 --> 00:21:07,830
we have this uh the shell running the
echo running or not that picture i want

1256
00:21:07,830 --> 00:21:07,840
echo running or not that picture i want
 

1257
00:21:07,840 --> 00:21:08,710
echo running or not that picture i want
this picture

1258
00:21:08,710 --> 00:21:08,720
this picture
 

1259
00:21:08,720 --> 00:21:10,149
this picture
here on this side we've got the

1260
00:21:10,149 --> 00:21:10,159
here on this side we've got the
 

1261
00:21:10,159 --> 00:21:11,190
here on this side we've got the
operating system we have the

1262
00:21:11,190 --> 00:21:11,200
operating system we have the
 

1263
00:21:11,200 --> 00:21:12,549
operating system we have the
applications running

1264
00:21:12,549 --> 00:21:12,559
applications running
 

1265
00:21:12,559 --> 00:21:14,630
applications running
and one thing we should be worried about

1266
00:21:14,630 --> 00:21:14,640
and one thing we should be worried about
 

1267
00:21:14,640 --> 00:21:15,909
and one thing we should be worried about
this square words that the operating

1268
00:21:15,909 --> 00:21:15,919
this square words that the operating
 

1269
00:21:15,919 --> 00:21:17,590
this square words that the operating
system so it should be

1270
00:21:17,590 --> 00:21:17,600
system so it should be
 

1271
00:21:17,600 --> 00:21:23,029
system so it should be
uh oh i should be defensive

1272
00:21:23,029 --> 00:21:23,039

 

1273
00:21:23,039 --> 00:21:25,430

and this is sort of an important mindset

1274
00:21:25,430 --> 00:21:25,440
and this is sort of an important mindset
 

1275
00:21:25,440 --> 00:21:26,149
and this is sort of an important mindset
you know that you

1276
00:21:26,149 --> 00:21:26,159
you know that you
 

1277
00:21:26,159 --> 00:21:28,230
you know that you
have to get used to uh when you're doing

1278
00:21:28,230 --> 00:21:28,240
have to get used to uh when you're doing
 

1279
00:21:28,240 --> 00:21:30,149
have to get used to uh when you're doing
kernel development

1280
00:21:30,149 --> 00:21:30,159
kernel development
 

1281
00:21:30,159 --> 00:21:31,750
kernel development
the operating system you know has to

1282
00:21:31,750 --> 00:21:31,760
the operating system you know has to
 

1283
00:21:31,760 --> 00:21:33,430
the operating system you know has to
ensure uh

1284
00:21:33,430 --> 00:21:33,440
ensure uh
 

1285
00:21:33,440 --> 00:21:34,630
ensure uh
that everything you know everything

1286
00:21:34,630 --> 00:21:34,640
that everything you know everything
 

1287
00:21:34,640 --> 00:21:36,549
that everything you know everything
works out and so uh

1288
00:21:36,549 --> 00:21:36,559
works out and so uh
 

1289
00:21:36,559 --> 00:21:38,390
works out and so uh
yeah it has to set up things up so that

1290
00:21:38,390 --> 00:21:38,400
yeah it has to set up things up so that
 

1291
00:21:38,400 --> 00:21:40,390
yeah it has to set up things up so that
you know an app cannot crash the

1292
00:21:40,390 --> 00:21:40,400
you know an app cannot crash the
 

1293
00:21:40,400 --> 00:21:45,590
you know an app cannot crash the
operating system

1294
00:21:45,590 --> 00:21:45,600
operating system
 

1295
00:21:45,600 --> 00:21:46,950
operating system
it would be too bad they have an

1296
00:21:46,950 --> 00:21:46,960
it would be too bad they have an
 

1297
00:21:46,960 --> 00:21:49,430
it would be too bad they have an
application uh that either by accident

1298
00:21:49,430 --> 00:21:49,440
application uh that either by accident
 

1299
00:21:49,440 --> 00:21:51,590
application uh that either by accident
or maliciously passes you know a tricky

1300
00:21:51,590 --> 00:21:51,600
or maliciously passes you know a tricky
 

1301
00:21:51,600 --> 00:21:53,190
or maliciously passes you know a tricky
argument bad argument to

1302
00:21:53,190 --> 00:21:53,200
argument bad argument to
 

1303
00:21:53,200 --> 00:21:54,789
argument bad argument to
the operating system and the oxford

1304
00:21:54,789 --> 00:21:54,799
the operating system and the oxford
 

1305
00:21:54,799 --> 00:21:56,549
the operating system and the oxford
system would crash that basically means

1306
00:21:56,549 --> 00:21:56,559
system would crash that basically means
 

1307
00:21:56,559 --> 00:21:57,990
system would crash that basically means
sort of denial service for

1308
00:21:57,990 --> 00:21:58,000
sort of denial service for
 

1309
00:21:58,000 --> 00:22:00,870
sort of denial service for
every other application so the operating

1310
00:22:00,870 --> 00:22:00,880
every other application so the operating
 

1311
00:22:00,880 --> 00:22:02,470
every other application so the operating
system has to be written in a way that

1312
00:22:02,470 --> 00:22:02,480
system has to be written in a way that
 

1313
00:22:02,480 --> 00:22:04,390
system has to be written in a way that
you know it can deal and handle

1314
00:22:04,390 --> 00:22:04,400
you know it can deal and handle
 

1315
00:22:04,400 --> 00:22:06,230
you know it can deal and handle
malicious applications

1316
00:22:06,230 --> 00:22:06,240
malicious applications
 

1317
00:22:06,240 --> 00:22:08,310
malicious applications
and particularly another concern is that

1318
00:22:08,310 --> 00:22:08,320
and particularly another concern is that
 

1319
00:22:08,320 --> 00:22:10,710
and particularly another concern is that
an application should not be able

1320
00:22:10,710 --> 00:22:10,720
an application should not be able
 

1321
00:22:10,720 --> 00:22:21,110
an application should not be able
cannot break out of its isolation

1322
00:22:21,110 --> 00:22:21,120

 

1323
00:22:21,120 --> 00:22:23,110

i mean the application might be

1324
00:22:23,110 --> 00:22:23,120
i mean the application might be
 

1325
00:22:23,120 --> 00:22:24,310
i mean the application might be
definitely malicious maybe

1326
00:22:24,310 --> 00:22:24,320
definitely malicious maybe
 

1327
00:22:24,320 --> 00:22:27,830
definitely malicious maybe
written by an attacker and attacker

1328
00:22:27,830 --> 00:22:27,840
written by an attacker and attacker
 

1329
00:22:27,840 --> 00:22:28,230
written by an attacker and attacker
probably

1330
00:22:28,230 --> 00:22:28,240
probably
 

1331
00:22:28,240 --> 00:22:30,230
probably
you know would like to break out of the

1332
00:22:30,230 --> 00:22:30,240
you know would like to break out of the
 

1333
00:22:30,240 --> 00:22:31,909
you know would like to break out of the
application for example and take control

1334
00:22:31,909 --> 00:22:31,919
application for example and take control
 

1335
00:22:31,919 --> 00:22:32,870
application for example and take control
over the kernel

1336
00:22:32,870 --> 00:22:32,880
over the kernel
 

1337
00:22:32,880 --> 00:22:34,070
over the kernel
and once you have control over the

1338
00:22:34,070 --> 00:22:34,080
and once you have control over the
 

1339
00:22:34,080 --> 00:22:35,909
and once you have control over the
kernel then you can do anything because

1340
00:22:35,909 --> 00:22:35,919
kernel then you can do anything because
 

1341
00:22:35,919 --> 00:22:36,950
kernel then you can do anything because
you know the kernel is

1342
00:22:36,950 --> 00:22:36,960
you know the kernel is
 

1343
00:22:36,960 --> 00:22:39,270
you know the kernel is
in control of all the hardware resources

1344
00:22:39,270 --> 00:22:39,280
in control of all the hardware resources
 

1345
00:22:39,280 --> 00:22:40,789
in control of all the hardware resources
and so the operating system has to be or

1346
00:22:40,789 --> 00:22:40,799
and so the operating system has to be or
 

1347
00:22:40,799 --> 00:22:42,789
and so the operating system has to be or
the kernel has to be written defensively

1348
00:22:42,789 --> 00:22:42,799
the kernel has to be written defensively
 

1349
00:22:42,799 --> 00:22:45,510
the kernel has to be written defensively
uh you know to avoid uh those kinds of

1350
00:22:45,510 --> 00:22:45,520
uh you know to avoid uh those kinds of
 

1351
00:22:45,520 --> 00:22:46,630
uh you know to avoid uh those kinds of
things

1352
00:22:46,630 --> 00:22:46,640
things
 

1353
00:22:46,640 --> 00:22:49,270
things
uh it turns out to be very tricky uh to

1354
00:22:49,270 --> 00:22:49,280
uh it turns out to be very tricky uh to
 

1355
00:22:49,280 --> 00:22:50,950
uh it turns out to be very tricky uh to
actually get right

1356
00:22:50,950 --> 00:22:50,960
actually get right
 

1357
00:22:50,960 --> 00:22:52,630
actually get right
in fact using linux you know they're

1358
00:22:52,630 --> 00:22:52,640
in fact using linux you know they're
 

1359
00:22:52,640 --> 00:22:54,149
in fact using linux you know they're
still periodic

1360
00:22:54,149 --> 00:22:54,159
still periodic
 

1361
00:22:54,159 --> 00:22:56,390
still periodic
bugs you know kernel bugs or blocks that

1362
00:22:56,390 --> 00:22:56,400
bugs you know kernel bugs or blocks that
 

1363
00:22:56,400 --> 00:22:57,270
bugs you know kernel bugs or blocks that
actually allow

1364
00:22:57,270 --> 00:22:57,280
actually allow
 

1365
00:22:57,280 --> 00:23:00,310
actually allow
an application to exploit uh or to break

1366
00:23:00,310 --> 00:23:00,320
an application to exploit uh or to break
 

1367
00:23:00,320 --> 00:23:01,990
an application to exploit uh or to break
out of this isolation domain

1368
00:23:01,990 --> 00:23:02,000
out of this isolation domain
 

1369
00:23:02,000 --> 00:23:05,190
out of this isolation domain
and to take control uh but this is

1370
00:23:05,190 --> 00:23:05,200
and to take control uh but this is
 

1371
00:23:05,200 --> 00:23:07,029
and to take control uh but this is
continuous concern and we like to do as

1372
00:23:07,029 --> 00:23:07,039
continuous concern and we like to do as
 

1373
00:23:07,039 --> 00:23:08,789
continuous concern and we like to do as
a good job as possible

1374
00:23:08,789 --> 00:23:08,799
a good job as possible
 

1375
00:23:08,799 --> 00:23:10,470
a good job as possible
and this is the mindset you have to have

1376
00:23:10,470 --> 00:23:10,480
and this is the mindset you have to have
 

1377
00:23:10,480 --> 00:23:11,830
and this is the mindset you have to have
you know when you're developing a kernel

1378
00:23:11,830 --> 00:23:11,840
you know when you're developing a kernel
 

1379
00:23:11,840 --> 00:23:12,310
you know when you're developing a kernel
that

1380
00:23:12,310 --> 00:23:12,320
that
 

1381
00:23:12,320 --> 00:23:15,350
that
actually applications are uh

1382
00:23:15,350 --> 00:23:15,360
actually applications are uh
 

1383
00:23:15,360 --> 00:23:18,710
actually applications are uh
perhaps malicious now this means that

1384
00:23:18,710 --> 00:23:18,720
perhaps malicious now this means that
 

1385
00:23:18,720 --> 00:23:19,270
perhaps malicious now this means that
the means

1386
00:23:19,270 --> 00:23:19,280
the means
 

1387
00:23:19,280 --> 00:23:26,549
the means
there has to be strong isolation

1388
00:23:26,549 --> 00:23:26,559

 

1389
00:23:26,559 --> 00:23:31,430

between the apps

1390
00:23:31,430 --> 00:23:31,440

 

1391
00:23:31,440 --> 00:23:35,750

and the os and if the os you know

1392
00:23:35,750 --> 00:23:35,760
and the os and if the os you know
 

1393
00:23:35,760 --> 00:23:38,070
and the os and if the os you know
needs to be defensive and uh needs to be

1394
00:23:38,070 --> 00:23:38,080
needs to be defensive and uh needs to be
 

1395
00:23:38,080 --> 00:23:39,750
needs to be defensive and uh needs to be
in a position that can defenses there

1396
00:23:39,750 --> 00:23:39,760
in a position that can defenses there
 

1397
00:23:39,760 --> 00:23:41,350
in a position that can defenses there
has to be sort of a strong wall between

1398
00:23:41,350 --> 00:23:41,360
has to be sort of a strong wall between
 

1399
00:23:41,360 --> 00:23:42,870
has to be sort of a strong wall between
the applications so that the operating

1400
00:23:42,870 --> 00:23:42,880
the applications so that the operating
 

1401
00:23:42,880 --> 00:23:44,470
the applications so that the operating
system can actually enforce

1402
00:23:44,470 --> 00:23:44,480
system can actually enforce
 

1403
00:23:44,480 --> 00:23:45,990
system can actually enforce
you know whatever policies it wants to

1404
00:23:45,990 --> 00:23:46,000
you know whatever policies it wants to
 

1405
00:23:46,000 --> 00:23:47,510
you know whatever policies it wants to
enforce

1406
00:23:47,510 --> 00:23:47,520
enforce
 

1407
00:23:47,520 --> 00:23:49,750
enforce
and this is typically done the typical

1408
00:23:49,750 --> 00:23:49,760
and this is typically done the typical
 

1409
00:23:49,760 --> 00:23:51,350
and this is typically done the typical
approach to achieving this strong

1410
00:23:51,350 --> 00:23:51,360
approach to achieving this strong
 

1411
00:23:51,360 --> 00:23:52,470
approach to achieving this strong
isolation

1412
00:23:52,470 --> 00:23:52,480
isolation
 

1413
00:23:52,480 --> 00:23:57,750
isolation
is using hardware support

1414
00:23:57,750 --> 00:23:57,760

 

1415
00:23:57,760 --> 00:23:59,110

and we'll give a little bit of flavor of

1416
00:23:59,110 --> 00:23:59,120
and we'll give a little bit of flavor of
 

1417
00:23:59,120 --> 00:24:00,630
and we'll give a little bit of flavor of
that in this lecture but we'll come back

1418
00:24:00,630 --> 00:24:00,640
that in this lecture but we'll come back
 

1419
00:24:00,640 --> 00:24:02,070
that in this lecture but we'll come back
to it in much more detail in subsequent

1420
00:24:02,070 --> 00:24:02,080
to it in much more detail in subsequent
 

1421
00:24:02,080 --> 00:24:03,990
to it in much more detail in subsequent
lectures and those are two

1422
00:24:03,990 --> 00:24:04,000
lectures and those are two
 

1423
00:24:04,000 --> 00:24:07,110
lectures and those are two
two parts of this hardware support one

1424
00:24:07,110 --> 00:24:07,120
two parts of this hardware support one
 

1425
00:24:07,120 --> 00:24:08,630
two parts of this hardware support one
is something that's called user kernel

1426
00:24:08,630 --> 00:24:08,640
is something that's called user kernel
 

1427
00:24:08,640 --> 00:24:10,149
is something that's called user kernel
mode

1428
00:24:10,149 --> 00:24:10,159
mode
 

1429
00:24:10,159 --> 00:24:13,269
mode
slash kernel mode in risk five it's

1430
00:24:13,269 --> 00:24:13,279
slash kernel mode in risk five it's
 

1431
00:24:13,279 --> 00:24:15,110
slash kernel mode in risk five it's
called supervisor mode but it's the same

1432
00:24:15,110 --> 00:24:15,120
called supervisor mode but it's the same
 

1433
00:24:15,120 --> 00:24:16,710
called supervisor mode but it's the same
thing

1434
00:24:16,710 --> 00:24:16,720
thing
 

1435
00:24:16,720 --> 00:24:24,149
thing
and then page tables or virtual memory

1436
00:24:24,149 --> 00:24:24,159

 

1437
00:24:24,159 --> 00:24:27,110

so all processors uh sort of all sort of

1438
00:24:27,110 --> 00:24:27,120
so all processors uh sort of all sort of
 

1439
00:24:27,120 --> 00:24:28,470
so all processors uh sort of all sort of
series processors

1440
00:24:28,470 --> 00:24:28,480
series processors
 

1441
00:24:28,480 --> 00:24:31,029
series processors
uh that are intended to run an operating

1442
00:24:31,029 --> 00:24:31,039
uh that are intended to run an operating
 

1443
00:24:31,039 --> 00:24:32,870
uh that are intended to run an operating
system in multiple applications

1444
00:24:32,870 --> 00:24:32,880
system in multiple applications
 

1445
00:24:32,880 --> 00:24:34,950
system in multiple applications
uh have support you know for either for

1446
00:24:34,950 --> 00:24:34,960
uh have support you know for either for
 

1447
00:24:34,960 --> 00:24:36,630
uh have support you know for either for
user kernel mode and virtual memory you

1448
00:24:36,630 --> 00:24:36,640
user kernel mode and virtual memory you
 

1449
00:24:36,640 --> 00:24:38,230
user kernel mode and virtual memory you
know it might mean men of stated or

1450
00:24:38,230 --> 00:24:38,240
know it might mean men of stated or
 

1451
00:24:38,240 --> 00:24:39,190
know it might mean men of stated or
implemented in all

1452
00:24:39,190 --> 00:24:39,200
implemented in all
 

1453
00:24:39,200 --> 00:24:40,950
implemented in all
slightly different ways but basically

1454
00:24:40,950 --> 00:24:40,960
slightly different ways but basically
 

1455
00:24:40,960 --> 00:24:43,110
slightly different ways but basically
all processors have it

1456
00:24:43,110 --> 00:24:43,120
all processors have it
 

1457
00:24:43,120 --> 00:24:45,430
all processors have it
um and our risk 5 processor that we're

1458
00:24:45,430 --> 00:24:45,440
um and our risk 5 processor that we're
 

1459
00:24:45,440 --> 00:24:46,470
um and our risk 5 processor that we're
using in this

1460
00:24:46,470 --> 00:24:46,480
using in this
 

1461
00:24:46,480 --> 00:24:49,750
using in this
class has that support too so

1462
00:24:49,750 --> 00:24:49,760
class has that support too so
 

1463
00:24:49,760 --> 00:24:51,029
class has that support too so
let me talk a little bit i'm going to

1464
00:24:51,029 --> 00:24:51,039
let me talk a little bit i'm going to
 

1465
00:24:51,039 --> 00:24:52,549
let me talk a little bit i'm going to
talk a little bit about user mode in

1466
00:24:52,549 --> 00:24:52,559
talk a little bit about user mode in
 

1467
00:24:52,559 --> 00:24:53,990
talk a little bit about user mode in
kernel mode first and then i'll talk a

1468
00:24:53,990 --> 00:24:54,000
kernel mode first and then i'll talk a
 

1469
00:24:54,000 --> 00:24:56,470
kernel mode first and then i'll talk a
little bit about virtual memory

1470
00:24:56,470 --> 00:24:56,480
little bit about virtual memory
 

1471
00:24:56,480 --> 00:24:59,510
little bit about virtual memory
mostly at the highest level possible

1472
00:24:59,510 --> 00:24:59,520
mostly at the highest level possible
 

1473
00:24:59,520 --> 00:25:00,710
mostly at the highest level possible
because there's a lot of important

1474
00:25:00,710 --> 00:25:00,720
because there's a lot of important
 

1475
00:25:00,720 --> 00:25:02,230
because there's a lot of important
details that i won't be able to cover

1476
00:25:02,230 --> 00:25:02,240
details that i won't be able to cover
 

1477
00:25:02,240 --> 00:25:04,710
details that i won't be able to cover
those in this lecture

1478
00:25:04,710 --> 00:25:04,720
those in this lecture
 

1479
00:25:04,720 --> 00:25:12,830
those in this lecture
so let's first talk about user kernel

1480
00:25:12,830 --> 00:25:12,840

 

1481
00:25:12,840 --> 00:25:14,549

mode

1482
00:25:14,549 --> 00:25:14,559
mode
 

1483
00:25:14,559 --> 00:25:16,310
mode
and basically what it means is that the

1484
00:25:16,310 --> 00:25:16,320
and basically what it means is that the
 

1485
00:25:16,320 --> 00:25:17,590
and basically what it means is that the
processor has two

1486
00:25:17,590 --> 00:25:17,600
processor has two
 

1487
00:25:17,600 --> 00:25:19,750
processor has two
modes of operation you know one is user

1488
00:25:19,750 --> 00:25:19,760
modes of operation you know one is user
 

1489
00:25:19,760 --> 00:25:22,390
modes of operation you know one is user
mode and the other one is kernel mode

1490
00:25:22,390 --> 00:25:22,400
mode and the other one is kernel mode
 

1491
00:25:22,400 --> 00:25:25,430
mode and the other one is kernel mode
and when running in kernel mode

1492
00:25:25,430 --> 00:25:25,440
and when running in kernel mode
 

1493
00:25:25,440 --> 00:25:27,669
and when running in kernel mode
the cpu can execute privilege

1494
00:25:27,669 --> 00:25:27,679
the cpu can execute privilege
 

1495
00:25:27,679 --> 00:25:35,269
the cpu can execute privilege
instructions

1496
00:25:35,269 --> 00:25:35,279

 

1497
00:25:35,279 --> 00:25:37,590

i'll come back to the in a second it out

1498
00:25:37,590 --> 00:25:37,600
i'll come back to the in a second it out
 

1499
00:25:37,600 --> 00:25:39,510
i'll come back to the in a second it out
when running in user mode

1500
00:25:39,510 --> 00:25:39,520
when running in user mode
 

1501
00:25:39,520 --> 00:25:42,230
when running in user mode
the cpu can only execute in unprivileged

1502
00:25:42,230 --> 00:25:42,240
the cpu can only execute in unprivileged
 

1503
00:25:42,240 --> 00:25:49,830
the cpu can only execute in unprivileged
instructions

1504
00:25:49,830 --> 00:25:49,840

 

1505
00:25:49,840 --> 00:25:51,510

and um structures are the instructions

1506
00:25:51,510 --> 00:25:51,520
and um structures are the instructions
 

1507
00:25:51,520 --> 00:25:52,950
and um structures are the instructions
you're well familiar with you know

1508
00:25:52,950 --> 00:25:52,960
you're well familiar with you know
 

1509
00:25:52,960 --> 00:25:55,909
you're well familiar with you know
think about like add sub you know adding

1510
00:25:55,909 --> 00:25:55,919
think about like add sub you know adding
 

1511
00:25:55,919 --> 00:25:56,230
think about like add sub you know adding
the

1512
00:25:56,230 --> 00:25:56,240
the
 

1513
00:25:56,240 --> 00:25:57,590
the
two registers together you know

1514
00:25:57,590 --> 00:25:57,600
two registers together you know
 

1515
00:25:57,600 --> 00:25:59,110
two registers together you know
subtracting through register so it's

1516
00:25:59,110 --> 00:25:59,120
subtracting through register so it's
 

1517
00:25:59,120 --> 00:25:59,909
subtracting through register so it's
really basic

1518
00:25:59,909 --> 00:25:59,919
really basic
 

1519
00:25:59,919 --> 00:26:02,230
really basic
you know you know procedure calls you

1520
00:26:02,230 --> 00:26:02,240
you know you know procedure calls you
 

1521
00:26:02,240 --> 00:26:03,350
you know you know procedure calls you
know jr

1522
00:26:03,350 --> 00:26:03,360
know jr
 

1523
00:26:03,360 --> 00:26:05,430
know jr
all that kind of stuff branches you know

1524
00:26:05,430 --> 00:26:05,440
all that kind of stuff branches you know
 

1525
00:26:05,440 --> 00:26:07,350
all that kind of stuff branches you know
those are all

1526
00:26:07,350 --> 00:26:07,360
those are all
 

1527
00:26:07,360 --> 00:26:09,590
those are all
uh privilege instructions that any user

1528
00:26:09,590 --> 00:26:09,600
uh privilege instructions that any user
 

1529
00:26:09,600 --> 00:26:11,909
uh privilege instructions that any user
application is allowed to execute

1530
00:26:11,909 --> 00:26:11,919
application is allowed to execute
 

1531
00:26:11,919 --> 00:26:14,230
application is allowed to execute
privileged instructions are structured

1532
00:26:14,230 --> 00:26:14,240
privileged instructions are structured
 

1533
00:26:14,240 --> 00:26:15,029
privileged instructions are structured
basically

1534
00:26:15,029 --> 00:26:15,039
basically
 

1535
00:26:15,039 --> 00:26:18,149
basically
are involved in manipulating the

1536
00:26:18,149 --> 00:26:18,159
are involved in manipulating the
 

1537
00:26:18,159 --> 00:26:19,350
are involved in manipulating the
hardware directly

1538
00:26:19,350 --> 00:26:19,360
hardware directly
 

1539
00:26:19,360 --> 00:26:21,590
hardware directly
setting up protections and things like

1540
00:26:21,590 --> 00:26:21,600
setting up protections and things like
 

1541
00:26:21,600 --> 00:26:23,110
setting up protections and things like
that so for example setting up a page

1542
00:26:23,110 --> 00:26:23,120
that so for example setting up a page
 

1543
00:26:23,120 --> 00:26:27,350
that so for example setting up a page
table register

1544
00:26:27,350 --> 00:26:27,360

 

1545
00:26:27,360 --> 00:26:31,750

which we'll talk about later or

1546
00:26:31,750 --> 00:26:31,760

 

1547
00:26:31,760 --> 00:26:39,190

you know disabling clock interrupts

1548
00:26:39,190 --> 00:26:39,200
you know disabling clock interrupts
 

1549
00:26:39,200 --> 00:26:40,390
you know disabling clock interrupts
and so there's all kinds of sort of

1550
00:26:40,390 --> 00:26:40,400
and so there's all kinds of sort of
 

1551
00:26:40,400 --> 00:26:42,310
and so there's all kinds of sort of
state on the processor that the

1552
00:26:42,310 --> 00:26:42,320
state on the processor that the
 

1553
00:26:42,320 --> 00:26:43,750
state on the processor that the
operating system you know is tended to

1554
00:26:43,750 --> 00:26:43,760
operating system you know is tended to
 

1555
00:26:43,760 --> 00:26:44,470
operating system you know is tended to
use

1556
00:26:44,470 --> 00:26:44,480
use
 

1557
00:26:44,480 --> 00:26:46,470
use
and manipulating that state is you know

1558
00:26:46,470 --> 00:26:46,480
and manipulating that state is you know
 

1559
00:26:46,480 --> 00:26:47,990
and manipulating that state is you know
completely uh

1560
00:26:47,990 --> 00:26:48,000
completely uh
 

1561
00:26:48,000 --> 00:26:50,310
completely uh
is done for privileged instructions and

1562
00:26:50,310 --> 00:26:50,320
is done for privileged instructions and
 

1563
00:26:50,320 --> 00:26:52,390
is done for privileged instructions and
so for example when a user application

1564
00:26:52,390 --> 00:26:52,400
so for example when a user application
 

1565
00:26:52,400 --> 00:26:54,070
so for example when a user application
tries to actually execute a privileged

1566
00:26:54,070 --> 00:26:54,080
tries to actually execute a privileged
 

1567
00:26:54,080 --> 00:26:56,230
tries to actually execute a privileged
instruction uh then the

1568
00:26:56,230 --> 00:26:56,240
instruction uh then the
 

1569
00:26:56,240 --> 00:26:57,909
instruction uh then the
processor voltage won't execute it

1570
00:26:57,909 --> 00:26:57,919
processor voltage won't execute it
 

1571
00:26:57,919 --> 00:26:59,430
processor voltage won't execute it
because if a critical instruction in

1572
00:26:59,430 --> 00:26:59,440
because if a critical instruction in
 

1573
00:26:59,440 --> 00:27:01,029
because if a critical instruction in
user mode is disallowed

1574
00:27:01,029 --> 00:27:01,039
user mode is disallowed
 

1575
00:27:01,039 --> 00:27:03,430
user mode is disallowed
and basically that will result in the

1576
00:27:03,430 --> 00:27:03,440
and basically that will result in the
 

1577
00:27:03,440 --> 00:27:04,710
and basically that will result in the
transfer control

1578
00:27:04,710 --> 00:27:04,720
transfer control
 

1579
00:27:04,720 --> 00:27:06,710
transfer control
from user space from user mode to kernel

1580
00:27:06,710 --> 00:27:06,720
from user space from user mode to kernel
 

1581
00:27:06,720 --> 00:27:08,070
from user space from user mode to kernel
mode so that then the operating system

1582
00:27:08,070 --> 00:27:08,080
mode so that then the operating system
 

1583
00:27:08,080 --> 00:27:09,590
mode so that then the operating system
can actually take control and maybe if i

1584
00:27:09,590 --> 00:27:09,600
can actually take control and maybe if i
 

1585
00:27:09,600 --> 00:27:11,029
can actually take control and maybe if i
kill the application because it's

1586
00:27:11,029 --> 00:27:11,039
kill the application because it's
 

1587
00:27:11,039 --> 00:27:14,789
kill the application because it's
misbehaving to get a little bit of a

1588
00:27:14,789 --> 00:27:14,799
misbehaving to get a little bit of a
 

1589
00:27:14,799 --> 00:27:15,669
misbehaving to get a little bit of a
sense

1590
00:27:15,669 --> 00:27:15,679
sense
 

1591
00:27:15,679 --> 00:27:17,269
sense
uh the difference between the two and

1592
00:27:17,269 --> 00:27:17,279
uh the difference between the two and
 

1593
00:27:17,279 --> 00:27:18,389
uh the difference between the two and
the privilege and imprivillage

1594
00:27:18,389 --> 00:27:18,399
the privilege and imprivillage
 

1595
00:27:18,399 --> 00:27:20,070
the privilege and imprivillage
instructions

1596
00:27:20,070 --> 00:27:20,080
instructions
 

1597
00:27:20,080 --> 00:27:23,110
instructions
let me switch display for a second and

1598
00:27:23,110 --> 00:27:23,120
let me switch display for a second and
 

1599
00:27:23,120 --> 00:27:24,710
let me switch display for a second and
here on the right side you have the

1600
00:27:24,710 --> 00:27:24,720
here on the right side you have the
 

1601
00:27:24,720 --> 00:27:25,830
here on the right side you have the
display

1602
00:27:25,830 --> 00:27:25,840
display
 

1603
00:27:25,840 --> 00:27:29,029
display
is a document you know the risk 5

1604
00:27:29,029 --> 00:27:29,039
is a document you know the risk 5
 

1605
00:27:29,039 --> 00:27:31,830
is a document you know the risk 5
privilege architecture document and that

1606
00:27:31,830 --> 00:27:31,840
privilege architecture document and that
 

1607
00:27:31,840 --> 00:27:33,430
privilege architecture document and that
document contains all the previous

1608
00:27:33,430 --> 00:27:33,440
document contains all the previous
 

1609
00:27:33,440 --> 00:27:33,990
document contains all the previous
instructions

1610
00:27:33,990 --> 00:27:34,000
instructions
 

1611
00:27:34,000 --> 00:27:36,630
instructions
you know it's linked from the website uh

1612
00:27:36,630 --> 00:27:36,640
you know it's linked from the website uh
 

1613
00:27:36,640 --> 00:27:37,110
you know it's linked from the website uh
under

1614
00:27:37,110 --> 00:27:37,120
under
 

1615
00:27:37,120 --> 00:27:40,389
under
the references page and in the

1616
00:27:40,389 --> 00:27:40,399
the references page and in the
 

1617
00:27:40,399 --> 00:27:42,950
the references page and in the
next couple of weeks uh you know or

1618
00:27:42,950 --> 00:27:42,960
next couple of weeks uh you know or
 

1619
00:27:42,960 --> 00:27:43,830
next couple of weeks uh you know or
almost months

1620
00:27:43,830 --> 00:27:43,840
almost months
 

1621
00:27:43,840 --> 00:27:45,510
almost months
you know you will be playing around you

1622
00:27:45,510 --> 00:27:45,520
you know you will be playing around you
 

1623
00:27:45,520 --> 00:27:47,190
you know you will be playing around you
know all these prisoners instructions

1624
00:27:47,190 --> 00:27:47,200
know all these prisoners instructions
 

1625
00:27:47,200 --> 00:27:49,269
know all these prisoners instructions
that you know are

1626
00:27:49,269 --> 00:27:49,279
that you know are
 

1627
00:27:49,279 --> 00:27:51,590
that you know are
shown here and in fact many of them will

1628
00:27:51,590 --> 00:27:51,600
shown here and in fact many of them will
 

1629
00:27:51,600 --> 00:27:52,789
shown here and in fact many of them will
you know show up and

1630
00:27:52,789 --> 00:27:52,799
you know show up and
 

1631
00:27:52,799 --> 00:27:53,990
you know show up and
some of them will actually show up in

1632
00:27:53,990 --> 00:27:54,000
some of them will actually show up in
 

1633
00:27:54,000 --> 00:27:55,350
some of them will actually show up in
the next lecture in a great amount of

1634
00:27:55,350 --> 00:27:55,360
the next lecture in a great amount of
 

1635
00:27:55,360 --> 00:27:56,549
the next lecture in a great amount of
detail

1636
00:27:56,549 --> 00:27:56,559
detail
 

1637
00:27:56,559 --> 00:27:58,950
detail
but users think about this as there are

1638
00:27:58,950 --> 00:27:58,960
but users think about this as there are
 

1639
00:27:58,960 --> 00:28:00,389
but users think about this as there are
previous instructions that user

1640
00:28:00,389 --> 00:28:00,399
previous instructions that user
 

1641
00:28:00,399 --> 00:28:01,510
previous instructions that user
applications should not be able to

1642
00:28:01,510 --> 00:28:01,520
applications should not be able to
 

1643
00:28:01,520 --> 00:28:02,310
applications should not be able to
execute

1644
00:28:02,310 --> 00:28:02,320
execute
 

1645
00:28:02,320 --> 00:28:04,149
execute
and those can only be executed in kernel

1646
00:28:04,149 --> 00:28:04,159
and those can only be executed in kernel
 

1647
00:28:04,159 --> 00:28:05,750
and those can only be executed in kernel
mode

1648
00:28:05,750 --> 00:28:05,760
mode
 

1649
00:28:05,760 --> 00:28:08,549
mode
so that's one aspect of you know this

1650
00:28:08,549 --> 00:28:08,559
so that's one aspect of you know this
 

1651
00:28:08,559 --> 00:28:09,990
so that's one aspect of you know this
sort of hardware support for strong

1652
00:28:09,990 --> 00:28:10,000
sort of hardware support for strong
 

1653
00:28:10,000 --> 00:28:13,669
sort of hardware support for strong
isolation

1654
00:28:13,669 --> 00:28:13,679

 

1655
00:28:13,679 --> 00:28:16,950

just a quick question like the

1656
00:28:16,950 --> 00:28:16,960
just a quick question like the
 

1657
00:28:16,960 --> 00:28:18,389
just a quick question like the
what i'm imagining in my head is

1658
00:28:18,389 --> 00:28:18,399
what i'm imagining in my head is
 

1659
00:28:18,399 --> 00:28:20,149
what i'm imagining in my head is
something like if kernel mode

1660
00:28:20,149 --> 00:28:20,159
something like if kernel mode
 

1661
00:28:20,159 --> 00:28:23,750
something like if kernel mode
allow else don't like what who is

1662
00:28:23,750 --> 00:28:23,760
allow else don't like what who is
 

1663
00:28:23,760 --> 00:28:25,510
allow else don't like what who is
running that code and checking if it's

1664
00:28:25,510 --> 00:28:25,520
running that code and checking if it's
 

1665
00:28:25,520 --> 00:28:27,029
running that code and checking if it's
current mode and how do they know if

1666
00:28:27,029 --> 00:28:27,039
current mode and how do they know if
 

1667
00:28:27,039 --> 00:28:28,070
current mode and how do they know if
it's in kernel mode

1668
00:28:28,070 --> 00:28:28,080
it's in kernel mode
 

1669
00:28:28,080 --> 00:28:30,149
it's in kernel mode
is it like a flag or something yeah it's

1670
00:28:30,149 --> 00:28:30,159
is it like a flag or something yeah it's
 

1671
00:28:30,159 --> 00:28:31,830
is it like a flag or something yeah it's
basically a flag in the processor

1672
00:28:31,830 --> 00:28:31,840
basically a flag in the processor
 

1673
00:28:31,840 --> 00:28:34,230
basically a flag in the processor
you know literally there's a bit in the

1674
00:28:34,230 --> 00:28:34,240
you know literally there's a bit in the
 

1675
00:28:34,240 --> 00:28:36,070
you know literally there's a bit in the
processor that says you know your

1676
00:28:36,070 --> 00:28:36,080
processor that says you know your
 

1677
00:28:36,080 --> 00:28:39,269
processor that says you know your
user mode you know one is saying uh

1678
00:28:39,269 --> 00:28:39,279
user mode you know one is saying uh
 

1679
00:28:39,279 --> 00:28:41,110
user mode you know one is saying uh
typically one is user mode and zero is

1680
00:28:41,110 --> 00:28:41,120
typically one is user mode and zero is
 

1681
00:28:41,120 --> 00:28:42,310
typically one is user mode and zero is
kernel mode

1682
00:28:42,310 --> 00:28:42,320
kernel mode
 

1683
00:28:42,320 --> 00:28:43,990
kernel mode
and so when the processor decodes an

1684
00:28:43,990 --> 00:28:44,000
and so when the processor decodes an
 

1685
00:28:44,000 --> 00:28:46,470
and so when the processor decodes an
instruction uh looks at the op code

1686
00:28:46,470 --> 00:28:46,480
instruction uh looks at the op code
 

1687
00:28:46,480 --> 00:28:47,830
instruction uh looks at the op code
if the op code is a privilege

1688
00:28:47,830 --> 00:28:47,840
if the op code is a privilege
 

1689
00:28:47,840 --> 00:28:49,750
if the op code is a privilege
instruction and the

1690
00:28:49,750 --> 00:28:49,760
instruction and the
 

1691
00:28:49,760 --> 00:28:51,750
instruction and the
bit is set to one and will deny

1692
00:28:51,750 --> 00:28:51,760
bit is set to one and will deny
 

1693
00:28:51,760 --> 00:28:54,230
bit is set to one and will deny
executing that instruction

1694
00:28:54,230 --> 00:28:54,240
executing that instruction
 

1695
00:28:54,240 --> 00:28:56,789
executing that instruction
it's like divided by zero you're not

1696
00:28:56,789 --> 00:28:56,799
it's like divided by zero you're not
 

1697
00:28:56,799 --> 00:28:58,149
it's like divided by zero you're not
allowed to do that

1698
00:28:58,149 --> 00:28:58,159
allowed to do that
 

1699
00:28:58,159 --> 00:29:00,549
allowed to do that
okay but if that bit has changed like if

1700
00:29:00,549 --> 00:29:00,559
okay but if that bit has changed like if
 

1701
00:29:00,559 --> 00:29:01,350
okay but if that bit has changed like if
some way you

1702
00:29:01,350 --> 00:29:01,360
some way you
 

1703
00:29:01,360 --> 00:29:03,430
some way you
you were just able to overwrite that bit

1704
00:29:03,430 --> 00:29:03,440
you were just able to overwrite that bit
 

1705
00:29:03,440 --> 00:29:05,909
you were just able to overwrite that bit
then that's the only thing controlling

1706
00:29:05,909 --> 00:29:05,919
then that's the only thing controlling
 

1707
00:29:05,919 --> 00:29:07,909
then that's the only thing controlling
yeah so what do you think what the

1708
00:29:07,909 --> 00:29:07,919
yeah so what do you think what the
 

1709
00:29:07,919 --> 00:29:09,909
yeah so what do you think what the
instruction that overrides a bit is that

1710
00:29:09,909 --> 00:29:09,919
instruction that overrides a bit is that
 

1711
00:29:09,919 --> 00:29:11,590
instruction that overrides a bit is that
a prefix instructor or an unprivileged

1712
00:29:11,590 --> 00:29:11,600
a prefix instructor or an unprivileged
 

1713
00:29:11,600 --> 00:29:19,269
a prefix instructor or an unprivileged
instruction

1714
00:29:19,269 --> 00:29:19,279

 

1715
00:29:19,279 --> 00:29:22,870

is it a question

1716
00:29:22,870 --> 00:29:22,880

 

1717
00:29:22,880 --> 00:29:24,870

clearly you know the the instruction

1718
00:29:24,870 --> 00:29:24,880
clearly you know the the instruction
 

1719
00:29:24,880 --> 00:29:26,149
clearly you know the the instruction
that you know sets the bit

1720
00:29:26,149 --> 00:29:26,159
that you know sets the bit
 

1721
00:29:26,159 --> 00:29:27,669
that you know sets the bit
must be a previous instruction because

1722
00:29:27,669 --> 00:29:27,679
must be a previous instruction because
 

1723
00:29:27,679 --> 00:29:29,510
must be a previous instruction because
the user application should not be able

1724
00:29:29,510 --> 00:29:29,520
the user application should not be able
 

1725
00:29:29,520 --> 00:29:31,269
the user application should not be able
to set the bit to kernel mode correct

1726
00:29:31,269 --> 00:29:31,279
to set the bit to kernel mode correct
 

1727
00:29:31,279 --> 00:29:33,110
to set the bit to kernel mode correct
and then you know be able to actually

1728
00:29:33,110 --> 00:29:33,120
and then you know be able to actually
 

1729
00:29:33,120 --> 00:29:34,630
and then you know be able to actually
uh run all kinds of preflight

1730
00:29:34,630 --> 00:29:34,640
uh run all kinds of preflight
 

1731
00:29:34,640 --> 00:29:36,630
uh run all kinds of preflight
instructions and so that bit is

1732
00:29:36,630 --> 00:29:36,640
instructions and so that bit is
 

1733
00:29:36,640 --> 00:29:39,029
instructions and so that bit is
protected

1734
00:29:39,029 --> 00:29:39,039
protected
 

1735
00:29:39,039 --> 00:29:44,149
protected
does that make sense okay yeah

1736
00:29:44,149 --> 00:29:44,159

 

1737
00:29:44,159 --> 00:29:46,549

um okay good so uh so let's use the

1738
00:29:46,549 --> 00:29:46,559
um okay good so uh so let's use the
 

1739
00:29:46,559 --> 00:29:48,070
um okay good so uh so let's use the
kernel mode or at least you know

1740
00:29:48,070 --> 00:29:48,080
kernel mode or at least you know
 

1741
00:29:48,080 --> 00:29:50,549
kernel mode or at least you know
the top view of the kernel mode it turns

1742
00:29:50,549 --> 00:29:50,559
the top view of the kernel mode it turns
 

1743
00:29:50,559 --> 00:29:52,070
the top view of the kernel mode it turns
out the risk five has a

1744
00:29:52,070 --> 00:29:52,080
out the risk five has a
 

1745
00:29:52,080 --> 00:29:53,909
out the risk five has a
as a number of you asked about has a

1746
00:29:53,909 --> 00:29:53,919
as a number of you asked about has a
 

1747
00:29:53,919 --> 00:29:55,909
as a number of you asked about has a
third mode called machine mode

1748
00:29:55,909 --> 00:29:55,919
third mode called machine mode
 

1749
00:29:55,919 --> 00:29:58,310
third mode called machine mode
uh we're mostly going to ignore that and

1750
00:29:58,310 --> 00:29:58,320
uh we're mostly going to ignore that and
 

1751
00:29:58,320 --> 00:30:00,070
uh we're mostly going to ignore that and
so i'm not going to much say about it

1752
00:30:00,070 --> 00:30:00,080
so i'm not going to much say about it
 

1753
00:30:00,080 --> 00:30:01,590
so i'm not going to much say about it
basically there's one more left because

1754
00:30:01,590 --> 00:30:01,600
basically there's one more left because
 

1755
00:30:01,600 --> 00:30:03,029
basically there's one more left because
basically three levels of privileges

1756
00:30:03,029 --> 00:30:03,039
basically three levels of privileges
 

1757
00:30:03,039 --> 00:30:05,110
basically three levels of privileges
instead of two level three figures

1758
00:30:05,110 --> 00:30:05,120
instead of two level three figures
 

1759
00:30:05,120 --> 00:30:08,870
instead of two level three figures
i'm here go ahead right so i'm wondering

1760
00:30:08,870 --> 00:30:08,880
i'm here go ahead right so i'm wondering
 

1761
00:30:08,880 --> 00:30:11,110
i'm here go ahead right so i'm wondering
with respect to security if

1762
00:30:11,110 --> 00:30:11,120
with respect to security if
 

1763
00:30:11,120 --> 00:30:13,590
with respect to security if
all user code does go through the kernel

1764
00:30:13,590 --> 00:30:13,600
all user code does go through the kernel
 

1765
00:30:13,600 --> 00:30:15,510
all user code does go through the kernel
the intent is that things are secure

1766
00:30:15,510 --> 00:30:15,520
the intent is that things are secure
 

1767
00:30:15,520 --> 00:30:19,350
the intent is that things are secure
but is there a way for uh a user of the

1768
00:30:19,350 --> 00:30:19,360
but is there a way for uh a user of the
 

1769
00:30:19,360 --> 00:30:20,470
but is there a way for uh a user of the
computer

1770
00:30:20,470 --> 00:30:20,480
computer
 

1771
00:30:20,480 --> 00:30:23,430
computer
to completely uh go around the operating

1772
00:30:23,430 --> 00:30:23,440
to completely uh go around the operating
 

1773
00:30:23,440 --> 00:30:25,190
to completely uh go around the operating
system

1774
00:30:25,190 --> 00:30:25,200
system
 

1775
00:30:25,200 --> 00:30:28,549
system
no not really at least you know if done

1776
00:30:28,549 --> 00:30:28,559
no not really at least you know if done
 

1777
00:30:28,559 --> 00:30:29,190
no not really at least you know if done
carefully

1778
00:30:29,190 --> 00:30:29,200
carefully
 

1779
00:30:29,200 --> 00:30:32,630
carefully
not

1780
00:30:32,630 --> 00:30:32,640

 

1781
00:30:32,640 --> 00:30:34,389

and if possible like you know that might

1782
00:30:34,389 --> 00:30:34,399
and if possible like you know that might
 

1783
00:30:34,399 --> 00:30:35,990
and if possible like you know that might
be the case that some programs have

1784
00:30:35,990 --> 00:30:36,000
be the case that some programs have
 

1785
00:30:36,000 --> 00:30:37,510
be the case that some programs have
additional privileges

1786
00:30:37,510 --> 00:30:37,520
additional privileges
 

1787
00:30:37,520 --> 00:30:39,909
additional privileges
uh that the operating system will uh

1788
00:30:39,909 --> 00:30:39,919
uh that the operating system will uh
 

1789
00:30:39,919 --> 00:30:40,950
uh that the operating system will uh
respect

1790
00:30:40,950 --> 00:30:40,960
respect
 

1791
00:30:40,960 --> 00:30:42,789
respect
uh but those privileges are not given to

1792
00:30:42,789 --> 00:30:42,799
uh but those privileges are not given to
 

1793
00:30:42,799 --> 00:30:45,029
uh but those privileges are not given to
every user you know example only the

1794
00:30:45,029 --> 00:30:45,039
every user you know example only the
 

1795
00:30:45,039 --> 00:30:47,110
every user you know example only the
root user has certain privileges that

1796
00:30:47,110 --> 00:30:47,120
root user has certain privileges that
 

1797
00:30:47,120 --> 00:30:48,310
root user has certain privileges that
allow you to do

1798
00:30:48,310 --> 00:30:48,320
allow you to do
 

1799
00:30:48,320 --> 00:30:51,110
allow you to do
uh security sensitive operations what

1800
00:30:51,110 --> 00:30:51,120
uh security sensitive operations what
 

1801
00:30:51,120 --> 00:30:52,230
uh security sensitive operations what
about bios

1802
00:30:52,230 --> 00:30:52,240
about bios
 

1803
00:30:52,240 --> 00:30:55,430
about bios
does bias happen before os or

1804
00:30:55,430 --> 00:30:55,440
does bias happen before os or
 

1805
00:30:55,440 --> 00:30:59,350
does bias happen before os or
after yeah so the bios this is the

1806
00:30:59,350 --> 00:30:59,360
after yeah so the bios this is the
 

1807
00:30:59,360 --> 00:31:01,190
after yeah so the bios this is the
the piece of software that basically

1808
00:31:01,190 --> 00:31:01,200
the piece of software that basically
 

1809
00:31:01,200 --> 00:31:03,269
the piece of software that basically
comes with the computer

1810
00:31:03,269 --> 00:31:03,279
comes with the computer
 

1811
00:31:03,279 --> 00:31:06,230
comes with the computer
and that's booted first and now the buys

1812
00:31:06,230 --> 00:31:06,240
and that's booted first and now the buys
 

1813
00:31:06,240 --> 00:31:07,990
and that's booted first and now the buys
basically boots the operating system

1814
00:31:07,990 --> 00:31:08,000
basically boots the operating system
 

1815
00:31:08,000 --> 00:31:11,269
basically boots the operating system
uh so the bios is a trusted pieces code

1816
00:31:11,269 --> 00:31:11,279
uh so the bios is a trusted pieces code
 

1817
00:31:11,279 --> 00:31:13,509
uh so the bios is a trusted pieces code
that better be correct and better be not

1818
00:31:13,509 --> 00:31:13,519
that better be correct and better be not
 

1819
00:31:13,519 --> 00:31:16,950
that better be correct and better be not
malicious

1820
00:31:16,950 --> 00:31:16,960

 

1821
00:31:16,960 --> 00:31:20,789

noah go ahead uh yeah so you mentioned

1822
00:31:20,789 --> 00:31:20,799
noah go ahead uh yeah so you mentioned
 

1823
00:31:20,799 --> 00:31:21,750
noah go ahead uh yeah so you mentioned
that the uh

1824
00:31:21,750 --> 00:31:21,760
that the uh
 

1825
00:31:21,760 --> 00:31:24,630
that the uh
you know the um instruction to set the

1826
00:31:24,630 --> 00:31:24,640
you know the um instruction to set the
 

1827
00:31:24,640 --> 00:31:25,909
you know the um instruction to set the
uh the kernel mode bit

1828
00:31:25,909 --> 00:31:25,919
uh the kernel mode bit
 

1829
00:31:25,919 --> 00:31:28,389
uh the kernel mode bit
is a privileged instruction how would a

1830
00:31:28,389 --> 00:31:28,399
is a privileged instruction how would a
 

1831
00:31:28,399 --> 00:31:29,350
is a privileged instruction how would a
user program

1832
00:31:29,350 --> 00:31:29,360
user program
 

1833
00:31:29,360 --> 00:31:32,470
user program
ever then be able to you know get like

1834
00:31:32,470 --> 00:31:32,480
ever then be able to you know get like
 

1835
00:31:32,480 --> 00:31:33,990
ever then be able to you know get like
like you know essentially have the

1836
00:31:33,990 --> 00:31:34,000
like you know essentially have the
 

1837
00:31:34,000 --> 00:31:35,990
like you know essentially have the
kernel execute any kernel instructions

1838
00:31:35,990 --> 00:31:36,000
kernel execute any kernel instructions
 

1839
00:31:36,000 --> 00:31:36,470
kernel execute any kernel instructions
if

1840
00:31:36,470 --> 00:31:36,480
if
 

1841
00:31:36,480 --> 00:31:38,630
if
like the very instruction to access

1842
00:31:38,630 --> 00:31:38,640
like the very instruction to access
 

1843
00:31:38,640 --> 00:31:39,509
like the very instruction to access
kernel mode

1844
00:31:39,509 --> 00:31:39,519
kernel mode
 

1845
00:31:39,519 --> 00:31:40,950
kernel mode
is itself a privileged instruction i

1846
00:31:40,950 --> 00:31:40,960
is itself a privileged instruction i
 

1847
00:31:40,960 --> 00:31:42,630
is itself a privileged instruction i
guess it seems like there's immediately

1848
00:31:42,630 --> 00:31:42,640
guess it seems like there's immediately
 

1849
00:31:42,640 --> 00:31:44,149
guess it seems like there's immediately
a barrier for a user program

1850
00:31:44,149 --> 00:31:44,159
a barrier for a user program
 

1851
00:31:44,159 --> 00:31:47,190
a barrier for a user program
ever changing that bit yeah yeah uh

1852
00:31:47,190 --> 00:31:47,200
ever changing that bit yeah yeah uh
 

1853
00:31:47,200 --> 00:31:48,310
ever changing that bit yeah yeah uh
that's correct and

1854
00:31:48,310 --> 00:31:48,320
that's correct and
 

1855
00:31:48,320 --> 00:31:49,590
that's correct and
that's exactly the way we want it

1856
00:31:49,590 --> 00:31:49,600
that's exactly the way we want it
 

1857
00:31:49,600 --> 00:31:52,070
that's exactly the way we want it
correct uh so one way to think about it

1858
00:31:52,070 --> 00:31:52,080
correct uh so one way to think about it
 

1859
00:31:52,080 --> 00:31:53,909
correct uh so one way to think about it
and this is not exactly how it works in

1860
00:31:53,909 --> 00:31:53,919
and this is not exactly how it works in
 

1861
00:31:53,919 --> 00:31:55,830
and this is not exactly how it works in
on the risk five but like if you

1862
00:31:55,830 --> 00:31:55,840
on the risk five but like if you
 

1863
00:31:55,840 --> 00:31:57,830
on the risk five but like if you
execute a previous instruction in user

1864
00:31:57,830 --> 00:31:57,840
execute a previous instruction in user
 

1865
00:31:57,840 --> 00:31:59,190
execute a previous instruction in user
space would try to execute

1866
00:31:59,190 --> 00:31:59,200
space would try to execute
 

1867
00:31:59,200 --> 00:33:08,149
space would try to execute
a privileged instruction

1868
00:33:08,149 --> 00:33:08,159

 

1869
00:33:08,159 --> 00:33:10,549

i'm back sorry about that it looked like

1870
00:33:10,549 --> 00:33:10,559
i'm back sorry about that it looked like
 

1871
00:33:10,559 --> 00:33:11,590
i'm back sorry about that it looked like
my

1872
00:33:11,590 --> 00:33:11,600
my
 

1873
00:33:11,600 --> 00:33:15,830
my
zoom client uh crashed uh on me

1874
00:33:15,830 --> 00:33:15,840
zoom client uh crashed uh on me
 

1875
00:33:15,840 --> 00:33:18,789
zoom client uh crashed uh on me
uh i apologize for that i don't really

1876
00:33:18,789 --> 00:33:18,799
uh i apologize for that i don't really
 

1877
00:33:18,799 --> 00:33:20,070
uh i apologize for that i don't really
know why

1878
00:33:20,070 --> 00:33:20,080
know why
 

1879
00:33:20,080 --> 00:33:25,509
know why
but it did um

1880
00:33:25,509 --> 00:33:25,519
but it did um
 

1881
00:33:25,519 --> 00:33:28,230
but it did um
can everybody hear me again yep you're

1882
00:33:28,230 --> 00:33:28,240
can everybody hear me again yep you're
 

1883
00:33:28,240 --> 00:33:28,870
can everybody hear me again yep you're
good

1884
00:33:28,870 --> 00:33:28,880
good
 

1885
00:33:28,880 --> 00:33:32,149
good
all good all right well

1886
00:33:32,149 --> 00:33:32,159
all good all right well
 

1887
00:33:32,159 --> 00:33:35,909
all good all right well
they're somewhere a bug

1888
00:33:35,909 --> 00:33:35,919

 

1889
00:33:35,919 --> 00:33:39,029

okay so back to

1890
00:33:39,029 --> 00:33:39,039
okay so back to
 

1891
00:33:39,039 --> 00:33:42,549
okay so back to
uh back to

1892
00:33:42,549 --> 00:33:42,559
uh back to
 

1893
00:33:42,559 --> 00:33:45,430
uh back to
uh the second piece of hardware support

1894
00:33:45,430 --> 00:33:45,440
uh the second piece of hardware support
 

1895
00:33:45,440 --> 00:33:47,350
uh the second piece of hardware support
which almost all cpus provide

1896
00:33:47,350 --> 00:33:47,360
which almost all cpus provide
 

1897
00:33:47,360 --> 00:33:50,549
which almost all cpus provide
uh which cpus provide

1898
00:33:50,549 --> 00:33:50,559
uh which cpus provide
 

1899
00:33:50,559 --> 00:34:02,710
uh which cpus provide
virtual memory

1900
00:34:02,710 --> 00:34:02,720

 

1901
00:34:02,720 --> 00:34:03,990

and i'm going to talk about this on

1902
00:34:03,990 --> 00:34:04,000
and i'm going to talk about this on
 

1903
00:34:04,000 --> 00:34:06,230
and i'm going to talk about this on
wednesday much much more

1904
00:34:06,230 --> 00:34:06,240
wednesday much much more
 

1905
00:34:06,240 --> 00:34:08,710
wednesday much much more
detail but basically the process has

1906
00:34:08,710 --> 00:34:08,720
detail but basically the process has
 

1907
00:34:08,720 --> 00:34:09,990
detail but basically the process has
something you know what it's called the

1908
00:34:09,990 --> 00:34:10,000
something you know what it's called the
 

1909
00:34:10,000 --> 00:34:12,069
something you know what it's called the
page table

1910
00:34:12,069 --> 00:34:12,079
page table
 

1911
00:34:12,079 --> 00:34:13,669
page table
and you've seen this a little bit i

1912
00:34:13,669 --> 00:34:13,679
and you've seen this a little bit i
 

1913
00:34:13,679 --> 00:34:15,829
and you've seen this a little bit i
think in double o4 and the page bagel

1914
00:34:15,829 --> 00:34:15,839
think in double o4 and the page bagel
 

1915
00:34:15,839 --> 00:34:16,389
think in double o4 and the page bagel
basically

1916
00:34:16,389 --> 00:34:16,399
basically
 

1917
00:34:16,399 --> 00:34:21,430
basically
maps virtual addresses

1918
00:34:21,430 --> 00:34:21,440
maps virtual addresses
 

1919
00:34:21,440 --> 00:34:25,270
maps virtual addresses
to physical addresses

1920
00:34:25,270 --> 00:34:25,280

 

1921
00:34:25,280 --> 00:34:27,030

and the basic idea is to give every

1922
00:34:27,030 --> 00:34:27,040
and the basic idea is to give every
 

1923
00:34:27,040 --> 00:34:28,629
and the basic idea is to give every
process

1924
00:34:28,629 --> 00:34:28,639
process
 

1925
00:34:28,639 --> 00:34:34,230
process
its own page table

1926
00:34:34,230 --> 00:34:34,240
its own page table
 

1927
00:34:34,240 --> 00:34:38,149
its own page table
and in this way you know the

1928
00:34:38,149 --> 00:34:38,159
and in this way you know the
 

1929
00:34:38,159 --> 00:34:40,230
and in this way you know the
the process can actually only use or is

1930
00:34:40,230 --> 00:34:40,240
the process can actually only use or is
 

1931
00:34:40,240 --> 00:34:41,750
the process can actually only use or is
only allowed to access that piece of

1932
00:34:41,750 --> 00:34:41,760
only allowed to access that piece of
 

1933
00:34:41,760 --> 00:34:43,270
only allowed to access that piece of
physical memory that actually shows up

1934
00:34:43,270 --> 00:34:43,280
physical memory that actually shows up
 

1935
00:34:43,280 --> 00:34:44,629
physical memory that actually shows up
in this page table

1936
00:34:44,629 --> 00:34:44,639
in this page table
 

1937
00:34:44,639 --> 00:34:46,069
in this page table
and so if you set up if the operating

1938
00:34:46,069 --> 00:34:46,079
and so if you set up if the operating
 

1939
00:34:46,079 --> 00:34:48,310
and so if you set up if the operating
system sets the page tables up in a way

1940
00:34:48,310 --> 00:34:48,320
system sets the page tables up in a way
 

1941
00:34:48,320 --> 00:34:51,349
system sets the page tables up in a way
that uh every uh process has disjoined

1942
00:34:51,349 --> 00:34:51,359
that uh every uh process has disjoined
 

1943
00:34:51,359 --> 00:34:52,470
that uh every uh process has disjoined
you know physical memory

1944
00:34:52,470 --> 00:34:52,480
you know physical memory
 

1945
00:34:52,480 --> 00:34:54,149
you know physical memory
then a process can't even access you

1946
00:34:54,149 --> 00:34:54,159
then a process can't even access you
 

1947
00:34:54,159 --> 00:34:55,750
then a process can't even access you
know somebody else's physical memory

1948
00:34:55,750 --> 00:34:55,760
know somebody else's physical memory
 

1949
00:34:55,760 --> 00:34:57,430
know somebody else's physical memory
because it's not even in its page tables

1950
00:34:57,430 --> 00:34:57,440
because it's not even in its page tables
 

1951
00:34:57,440 --> 00:34:58,870
because it's not even in its page tables
so there's nothing like no way even to

1952
00:34:58,870 --> 00:34:58,880
so there's nothing like no way even to
 

1953
00:34:58,880 --> 00:35:00,150
so there's nothing like no way even to
create an address or

1954
00:35:00,150 --> 00:35:00,160
create an address or
 

1955
00:35:00,160 --> 00:35:02,069
create an address or
write down an address that will allow a

1956
00:35:02,069 --> 00:35:02,079
write down an address that will allow a
 

1957
00:35:02,079 --> 00:35:04,230
write down an address that will allow a
process to access somebody else's

1958
00:35:04,230 --> 00:35:04,240
process to access somebody else's
 

1959
00:35:04,240 --> 00:35:06,150
process to access somebody else's
physical memory and so this gives us

1960
00:35:06,150 --> 00:35:06,160
physical memory and so this gives us
 

1961
00:35:06,160 --> 00:35:09,910
physical memory and so this gives us
strong memory isolation

1962
00:35:09,910 --> 00:35:09,920

 

1963
00:35:09,920 --> 00:35:12,950

basically page stable defines a view on

1964
00:35:12,950 --> 00:35:12,960
basically page stable defines a view on
 

1965
00:35:12,960 --> 00:35:13,510
basically page stable defines a view on
memory

1966
00:35:13,510 --> 00:35:13,520
memory
 

1967
00:35:13,520 --> 00:35:16,630
memory
and every where the user process has

1968
00:35:16,630 --> 00:35:16,640
and every where the user process has
 

1969
00:35:16,640 --> 00:35:19,109
and every where the user process has
its own view of memory independent of

1970
00:35:19,109 --> 00:35:19,119
its own view of memory independent of
 

1971
00:35:19,119 --> 00:35:20,150
its own view of memory independent of
each other

1972
00:35:20,150 --> 00:35:20,160
each other
 

1973
00:35:20,160 --> 00:35:22,310
each other
and this gives us very strong memory

1974
00:35:22,310 --> 00:35:22,320
and this gives us very strong memory
 

1975
00:35:22,320 --> 00:35:24,310
and this gives us very strong memory
isolation

1976
00:35:24,310 --> 00:35:24,320
isolation
 

1977
00:35:24,320 --> 00:35:26,069
isolation
and so now what we can do if we can

1978
00:35:26,069 --> 00:35:26,079
and so now what we can do if we can
 

1979
00:35:26,079 --> 00:35:27,750
and so now what we can do if we can
think a little bit in this way

1980
00:35:27,750 --> 00:35:27,760
think a little bit in this way
 

1981
00:35:27,760 --> 00:35:30,710
think a little bit in this way
then we can redraw the picture a little

1982
00:35:30,710 --> 00:35:30,720
then we can redraw the picture a little
 

1983
00:35:30,720 --> 00:35:31,670
then we can redraw the picture a little
bit earlier

1984
00:35:31,670 --> 00:35:31,680
bit earlier
 

1985
00:35:31,680 --> 00:35:32,870
bit earlier
and because we think about this as

1986
00:35:32,870 --> 00:35:32,880
and because we think about this as
 

1987
00:35:32,880 --> 00:35:35,510
and because we think about this as
follows you know we have a box

1988
00:35:35,510 --> 00:35:35,520
follows you know we have a box
 

1989
00:35:35,520 --> 00:35:38,550
follows you know we have a box
yeah and ls sits in that box and we have

1990
00:35:38,550 --> 00:35:38,560
yeah and ls sits in that box and we have
 

1991
00:35:38,560 --> 00:35:39,430
yeah and ls sits in that box and we have
another box

1992
00:35:39,430 --> 00:35:39,440
another box
 

1993
00:35:39,440 --> 00:35:43,670
another box
and you know echo sits in that box

1994
00:35:43,670 --> 00:35:43,680
and you know echo sits in that box
 

1995
00:35:43,680 --> 00:35:45,670
and you know echo sits in that box
and that box basically has an address a

1996
00:35:45,670 --> 00:35:45,680
and that box basically has an address a
 

1997
00:35:45,680 --> 00:35:47,349
and that box basically has an address a
virtual address range starting from zero

1998
00:35:47,349 --> 00:35:47,359
virtual address range starting from zero
 

1999
00:35:47,359 --> 00:35:49,349
virtual address range starting from zero
to like whatever some number two to the

2000
00:35:49,349 --> 00:35:49,359
to like whatever some number two to the
 

2001
00:35:49,359 --> 00:35:50,790
to like whatever some number two to the
power whatever the

2002
00:35:50,790 --> 00:35:50,800
power whatever the
 

2003
00:35:50,800 --> 00:35:53,510
power whatever the
number is uh in risk five which we'll

2004
00:35:53,510 --> 00:35:53,520
number is uh in risk five which we'll
 

2005
00:35:53,520 --> 00:35:54,550
number is uh in risk five which we'll
talk about on

2006
00:35:54,550 --> 00:35:54,560
talk about on
 

2007
00:35:54,560 --> 00:35:56,870
talk about on
on wednesday and similarly you know the

2008
00:35:56,870 --> 00:35:56,880
on wednesday and similarly you know the
 

2009
00:35:56,880 --> 00:35:58,630
on wednesday and similarly you know the
dress range for echo is you know

2010
00:35:58,630 --> 00:35:58,640
dress range for echo is you know
 

2011
00:35:58,640 --> 00:35:59,109
dress range for echo is you know
something

2012
00:35:59,109 --> 00:35:59,119
something
 

2013
00:35:59,119 --> 00:36:00,550
something
whatever it's saying to to the

2014
00:36:00,550 --> 00:36:00,560
whatever it's saying to to the
 

2015
00:36:00,560 --> 00:36:02,870
whatever it's saying to to the
powershell max and so

2016
00:36:02,870 --> 00:36:02,880
powershell max and so
 

2017
00:36:02,880 --> 00:36:05,829
powershell max and so
uh ls has a member location zero echo

2018
00:36:05,829 --> 00:36:05,839
uh ls has a member location zero echo
 

2019
00:36:05,839 --> 00:36:07,750
uh ls has a member location zero echo
has a location like a zero and you just

2020
00:36:07,750 --> 00:36:07,760
has a location like a zero and you just
 

2021
00:36:07,760 --> 00:36:08,870
has a location like a zero and you just
completely separate it

2022
00:36:08,870 --> 00:36:08,880
completely separate it
 

2023
00:36:08,880 --> 00:36:10,710
completely separate it
and if the operating system maps those

2024
00:36:10,710 --> 00:36:10,720
and if the operating system maps those
 

2025
00:36:10,720 --> 00:36:12,069
and if the operating system maps those
virtual addresses zero to different

2026
00:36:12,069 --> 00:36:12,079
virtual addresses zero to different
 

2027
00:36:12,079 --> 00:36:13,829
virtual addresses zero to different
pieces of physical addresses

2028
00:36:13,829 --> 00:36:13,839
pieces of physical addresses
 

2029
00:36:13,839 --> 00:36:15,990
pieces of physical addresses
then basically ls cannot access echo's

2030
00:36:15,990 --> 00:36:16,000
then basically ls cannot access echo's
 

2031
00:36:16,000 --> 00:36:18,950
then basically ls cannot access echo's
memory and echo cannot access ls memory

2032
00:36:18,950 --> 00:36:18,960
memory and echo cannot access ls memory
 

2033
00:36:18,960 --> 00:36:20,150
memory and echo cannot access ls memory
and similarly you know the kernel

2034
00:36:20,150 --> 00:36:20,160
and similarly you know the kernel
 

2035
00:36:20,160 --> 00:36:22,390
and similarly you know the kernel
actually you know sits below it

2036
00:36:22,390 --> 00:36:22,400
actually you know sits below it
 

2037
00:36:22,400 --> 00:36:24,150
actually you know sits below it
you know also has his own at least an

2038
00:36:24,150 --> 00:36:24,160
you know also has his own at least an
 

2039
00:36:24,160 --> 00:36:25,430
you know also has his own at least an
xv6 has his own

2040
00:36:25,430 --> 00:36:25,440
xv6 has his own
 

2041
00:36:25,440 --> 00:36:27,670
xv6 has his own
address range independent of the

2042
00:36:27,670 --> 00:36:27,680
address range independent of the
 

2043
00:36:27,680 --> 00:36:29,030
address range independent of the
applications

2044
00:36:29,030 --> 00:36:29,040
applications
 

2045
00:36:29,040 --> 00:36:30,950
applications
and we can think about the user kernel

2046
00:36:30,950 --> 00:36:30,960
and we can think about the user kernel
 

2047
00:36:30,960 --> 00:36:32,390
and we can think about the user kernel
mode as sort of sitting

2048
00:36:32,390 --> 00:36:32,400
mode as sort of sitting
 

2049
00:36:32,400 --> 00:36:34,710
mode as sort of sitting
in between you know the boundary uh you

2050
00:36:34,710 --> 00:36:34,720
in between you know the boundary uh you
 

2051
00:36:34,720 --> 00:36:36,710
in between you know the boundary uh you
know things that actually run

2052
00:36:36,710 --> 00:36:36,720
know things that actually run
 

2053
00:36:36,720 --> 00:36:40,870
know things that actually run
in user space running user mode

2054
00:36:40,870 --> 00:36:40,880
in user space running user mode
 

2055
00:36:40,880 --> 00:36:42,470
in user space running user mode
and things that sit in the kernel run in

2056
00:36:42,470 --> 00:36:42,480
and things that sit in the kernel run in
 

2057
00:36:42,480 --> 00:36:47,430
and things that sit in the kernel run in
kernel mode

2058
00:36:47,430 --> 00:36:47,440

 

2059
00:36:47,440 --> 00:36:48,790

and that's sort of the picture you know

2060
00:36:48,790 --> 00:36:48,800
and that's sort of the picture you know
 

2061
00:36:48,800 --> 00:36:50,390
and that's sort of the picture you know
that you should answer like the os you

2062
00:36:50,390 --> 00:36:50,400
that you should answer like the os you
 

2063
00:36:50,400 --> 00:36:51,910
that you should answer like the os you
know sits there you know sitting in

2064
00:36:51,910 --> 00:36:51,920
know sits there you know sitting in
 

2065
00:36:51,920 --> 00:36:52,870
know sits there you know sitting in
kernel mode

2066
00:36:52,870 --> 00:36:52,880
kernel mode
 

2067
00:36:52,880 --> 00:36:54,390
kernel mode
and so this is the picture that you

2068
00:36:54,390 --> 00:36:54,400
and so this is the picture that you
 

2069
00:36:54,400 --> 00:36:56,470
and so this is the picture that you
should have in your head

2070
00:36:56,470 --> 00:36:56,480
should have in your head
 

2071
00:36:56,480 --> 00:36:58,630
should have in your head
now as described so far this picture is

2072
00:36:58,630 --> 00:36:58,640
now as described so far this picture is
 

2073
00:36:58,640 --> 00:36:59,750
now as described so far this picture is
a little bit too strict

2074
00:36:59,750 --> 00:36:59,760
a little bit too strict
 

2075
00:36:59,760 --> 00:37:01,190
a little bit too strict
you know we have basically put

2076
00:37:01,190 --> 00:37:01,200
you know we have basically put
 

2077
00:37:01,200 --> 00:37:02,870
you know we have basically put
everything in the box but there's no way

2078
00:37:02,870 --> 00:37:02,880
everything in the box but there's no way
 

2079
00:37:02,880 --> 00:37:04,630
everything in the box but there's no way
for one box to transfer control to

2080
00:37:04,630 --> 00:37:04,640
for one box to transfer control to
 

2081
00:37:04,640 --> 00:37:05,670
for one box to transfer control to
another box

2082
00:37:05,670 --> 00:37:05,680
another box
 

2083
00:37:05,680 --> 00:37:07,109
another box
and clearly when that needs to happen

2084
00:37:07,109 --> 00:37:07,119
and clearly when that needs to happen
 

2085
00:37:07,119 --> 00:37:08,870
and clearly when that needs to happen
right because for example als you know

2086
00:37:08,870 --> 00:37:08,880
right because for example als you know
 

2087
00:37:08,880 --> 00:37:10,230
right because for example als you know
probably wants to call

2088
00:37:10,230 --> 00:37:10,240
probably wants to call
 

2089
00:37:10,240 --> 00:37:13,430
probably wants to call
you know reit the read system call or

2090
00:37:13,430 --> 00:37:13,440
you know reit the read system call or
 

2091
00:37:13,440 --> 00:37:14,950
you know reit the read system call or
write system call

2092
00:37:14,950 --> 00:37:14,960
write system call
 

2093
00:37:14,960 --> 00:37:16,710
write system call
or maybe you know whatever the shell

2094
00:37:16,710 --> 00:37:16,720
or maybe you know whatever the shell
 

2095
00:37:16,720 --> 00:37:18,790
or maybe you know whatever the shell
wants to call fork or an exit

2096
00:37:18,790 --> 00:37:18,800
wants to call fork or an exit
 

2097
00:37:18,800 --> 00:37:21,349
wants to call fork or an exit
and so there has to be a way for an

2098
00:37:21,349 --> 00:37:21,359
and so there has to be a way for an
 

2099
00:37:21,359 --> 00:37:21,990
and so there has to be a way for an
application

2100
00:37:21,990 --> 00:37:22,000
application
 

2101
00:37:22,000 --> 00:37:24,150
application
or user application to transfer control

2102
00:37:24,150 --> 00:37:24,160
or user application to transfer control
 

2103
00:37:24,160 --> 00:37:26,150
or user application to transfer control
in a coordinated manner

2104
00:37:26,150 --> 00:37:26,160
in a coordinated manner
 

2105
00:37:26,160 --> 00:37:28,710
in a coordinated manner
to the kernel so that the kernel can

2106
00:37:28,710 --> 00:37:28,720
to the kernel so that the kernel can
 

2107
00:37:28,720 --> 00:37:31,829
to the kernel so that the kernel can
actually provide services

2108
00:37:31,829 --> 00:37:31,839

 

2109
00:37:31,839 --> 00:37:34,470

and so there's a plan basically in

2110
00:37:34,470 --> 00:37:34,480
and so there's a plan basically in
 

2111
00:37:34,480 --> 00:37:35,510
and so there's a plan basically in
addition to this

2112
00:37:35,510 --> 00:37:35,520
addition to this
 

2113
00:37:35,520 --> 00:37:36,790
addition to this
two pieces of hardware support that i

2114
00:37:36,790 --> 00:37:36,800
two pieces of hardware support that i
 

2115
00:37:36,800 --> 00:37:39,510
two pieces of hardware support that i
talked so far talked about so far

2116
00:37:39,510 --> 00:37:39,520
talked so far talked about so far
 

2117
00:37:39,520 --> 00:37:42,950
talked so far talked about so far
is a way of controlled way of entering

2118
00:37:42,950 --> 00:37:42,960
is a way of controlled way of entering
 

2119
00:37:42,960 --> 00:37:49,430
is a way of controlled way of entering
the kernel

2120
00:37:49,430 --> 00:37:49,440

 

2121
00:37:49,440 --> 00:37:51,589

it turns out actually on risk five uh

2122
00:37:51,589 --> 00:37:51,599
it turns out actually on risk five uh
 

2123
00:37:51,599 --> 00:37:53,430
it turns out actually on risk five uh
there is a an instruction

2124
00:37:53,430 --> 00:37:53,440
there is a an instruction
 

2125
00:37:53,440 --> 00:37:55,670
there is a an instruction
uh for this it's called the e-call

2126
00:37:55,670 --> 00:37:55,680
uh for this it's called the e-call
 

2127
00:37:55,680 --> 00:37:57,910
uh for this it's called the e-call
instruction

2128
00:37:57,910 --> 00:37:57,920
instruction
 

2129
00:37:57,920 --> 00:37:59,589
instruction
and the e-call instruction takes one

2130
00:37:59,589 --> 00:37:59,599
and the e-call instruction takes one
 

2131
00:37:59,599 --> 00:38:02,069
and the e-call instruction takes one
argument a number

2132
00:38:02,069 --> 00:38:02,079
argument a number
 

2133
00:38:02,079 --> 00:38:04,630
argument a number
and so in a user application that wants

2134
00:38:04,630 --> 00:38:04,640
and so in a user application that wants
 

2135
00:38:04,640 --> 00:38:06,550
and so in a user application that wants
to transfer control into the kernel

2136
00:38:06,550 --> 00:38:06,560
to transfer control into the kernel
 

2137
00:38:06,560 --> 00:38:07,750
to transfer control into the kernel
basically can call the e-call

2138
00:38:07,750 --> 00:38:07,760
basically can call the e-call
 

2139
00:38:07,760 --> 00:38:09,510
basically can call the e-call
instruction with a number it's like two

2140
00:38:09,510 --> 00:38:09,520
instruction with a number it's like two
 

2141
00:38:09,520 --> 00:38:10,870
instruction with a number it's like two
or three or four or five

2142
00:38:10,870 --> 00:38:10,880
or three or four or five
 

2143
00:38:10,880 --> 00:38:12,790
or three or four or five
and that number basically is the system

2144
00:38:12,790 --> 00:38:12,800
and that number basically is the system
 

2145
00:38:12,800 --> 00:38:14,870
and that number basically is the system
call number

2146
00:38:14,870 --> 00:38:14,880
call number
 

2147
00:38:14,880 --> 00:38:21,750
call number
that the application wants to invoke

2148
00:38:21,750 --> 00:38:21,760

 

2149
00:38:21,760 --> 00:38:23,589

and that uh basically what that does it

2150
00:38:23,589 --> 00:38:23,599
and that uh basically what that does it
 

2151
00:38:23,599 --> 00:38:25,030
and that uh basically what that does it
actually enters the kernel at a

2152
00:38:25,030 --> 00:38:25,040
actually enters the kernel at a
 

2153
00:38:25,040 --> 00:38:25,910
actually enters the kernel at a
particular

2154
00:38:25,910 --> 00:38:25,920
particular
 

2155
00:38:25,920 --> 00:38:28,870
particular
uh point uh or a particular location in

2156
00:38:28,870 --> 00:38:28,880
uh point uh or a particular location in
 

2157
00:38:28,880 --> 00:38:30,150
uh point uh or a particular location in
the cont

2158
00:38:30,150 --> 00:38:30,160
the cont
 

2159
00:38:30,160 --> 00:38:31,750
the cont
in the kernel that's controlled by the

2160
00:38:31,750 --> 00:38:31,760
in the kernel that's controlled by the
 

2161
00:38:31,760 --> 00:38:34,550
in the kernel that's controlled by the
kernel and as we'll see in xv6

2162
00:38:34,550 --> 00:38:34,560
kernel and as we'll see in xv6
 

2163
00:38:34,560 --> 00:38:37,510
kernel and as we'll see in xv6
uh in some later lectures uh you know

2164
00:38:37,510 --> 00:38:37,520
uh in some later lectures uh you know
 

2165
00:38:37,520 --> 00:38:39,030
uh in some later lectures uh you know
there's basically a single

2166
00:38:39,030 --> 00:38:39,040
there's basically a single
 

2167
00:38:39,040 --> 00:38:42,710
there's basically a single
system called entry point and um

2168
00:38:42,710 --> 00:38:42,720
system called entry point and um
 

2169
00:38:42,720 --> 00:38:44,310
system called entry point and um
and every time an application calls

2170
00:38:44,310 --> 00:38:44,320
and every time an application calls
 

2171
00:38:44,320 --> 00:38:45,990
and every time an application calls
e-call you know the application

2172
00:38:45,990 --> 00:38:46,000
e-call you know the application
 

2173
00:38:46,000 --> 00:38:47,270
e-call you know the application
enters the kernel of that particular

2174
00:38:47,270 --> 00:38:47,280
enters the kernel of that particular
 

2175
00:38:47,280 --> 00:38:49,270
enters the kernel of that particular
point so one

2176
00:38:49,270 --> 00:38:49,280
point so one
 

2177
00:38:49,280 --> 00:38:51,510
point so one
um so one way to think about this is

2178
00:38:51,510 --> 00:38:51,520
um so one way to think about this is
 

2179
00:38:51,520 --> 00:38:53,750
um so one way to think about this is
that if you have fork

2180
00:38:53,750 --> 00:38:53,760
that if you have fork
 

2181
00:38:53,760 --> 00:38:56,870
that if you have fork
you know fork you know call in user

2182
00:38:56,870 --> 00:38:56,880
you know fork you know call in user
 

2183
00:38:56,880 --> 00:38:58,470
you know fork you know call in user
space for example the shell or your

2184
00:38:58,470 --> 00:38:58,480
space for example the shell or your
 

2185
00:38:58,480 --> 00:38:59,190
space for example the shell or your
prangs

2186
00:38:59,190 --> 00:38:59,200
prangs
 

2187
00:38:59,200 --> 00:39:01,270
prangs
program called fork well whatever it

2188
00:39:01,270 --> 00:39:01,280
program called fork well whatever it
 

2189
00:39:01,280 --> 00:39:02,950
program called fork well whatever it
calls fork it doesn't really call the

2190
00:39:02,950 --> 00:39:02,960
calls fork it doesn't really call the
 

2191
00:39:02,960 --> 00:39:04,630
calls fork it doesn't really call the
operating system directly you know the

2192
00:39:04,630 --> 00:39:04,640
operating system directly you know the
 

2193
00:39:04,640 --> 00:39:06,710
operating system directly you know the
corresponding function in the kernel

2194
00:39:06,710 --> 00:39:06,720
corresponding function in the kernel
 

2195
00:39:06,720 --> 00:39:08,630
corresponding function in the kernel
instead you know what it does it

2196
00:39:08,630 --> 00:39:08,640
instead you know what it does it
 

2197
00:39:08,640 --> 00:39:11,750
instead you know what it does it
actually calls an e-call

2198
00:39:11,750 --> 00:39:11,760

 

2199
00:39:11,760 --> 00:39:15,190

with you know the number for a fork

2200
00:39:15,190 --> 00:39:15,200
with you know the number for a fork
 

2201
00:39:15,200 --> 00:39:18,390
with you know the number for a fork
which you know and then that actually

2202
00:39:18,390 --> 00:39:18,400
which you know and then that actually
 

2203
00:39:18,400 --> 00:39:20,710
which you know and then that actually
jumps into the kernel

2204
00:39:20,710 --> 00:39:20,720
jumps into the kernel
 

2205
00:39:20,720 --> 00:39:23,190
jumps into the kernel
so this is a kernel transition and

2206
00:39:23,190 --> 00:39:23,200
so this is a kernel transition and
 

2207
00:39:23,200 --> 00:39:24,950
so this is a kernel transition and
there's the user side here's the kernel

2208
00:39:24,950 --> 00:39:24,960
there's the user side here's the kernel
 

2209
00:39:24,960 --> 00:39:25,910
there's the user side here's the kernel
side

2210
00:39:25,910 --> 00:39:25,920
side
 

2211
00:39:25,920 --> 00:39:28,390
side
and then on the kernel side you know

2212
00:39:28,390 --> 00:39:28,400
and then on the kernel side you know
 

2213
00:39:28,400 --> 00:39:29,990
and then on the kernel side you know
there's a function called syscall

2214
00:39:29,990 --> 00:39:30,000
there's a function called syscall
 

2215
00:39:30,000 --> 00:39:33,190
there's a function called syscall
in cisco.c and that basically every

2216
00:39:33,190 --> 00:39:33,200
in cisco.c and that basically every
 

2217
00:39:33,200 --> 00:39:34,470
in cisco.c and that basically every
system call will end up

2218
00:39:34,470 --> 00:39:34,480
system call will end up
 

2219
00:39:34,480 --> 00:39:36,310
system call will end up
at that particular system call function

2220
00:39:36,310 --> 00:39:36,320
at that particular system call function
 

2221
00:39:36,320 --> 00:39:37,670
at that particular system call function
and the system call will look at the

2222
00:39:37,670 --> 00:39:37,680
and the system call will look at the
 

2223
00:39:37,680 --> 00:39:38,390
and the system call will look at the
number

2224
00:39:38,390 --> 00:39:38,400
number
 

2225
00:39:38,400 --> 00:39:39,829
number
and then decide and the number is

2226
00:39:39,829 --> 00:39:39,839
and then decide and the number is
 

2227
00:39:39,839 --> 00:39:41,270
and then decide and the number is
actually passed in the register i think

2228
00:39:41,270 --> 00:39:41,280
actually passed in the register i think
 

2229
00:39:41,280 --> 00:39:43,190
actually passed in the register i think
it's a0

2230
00:39:43,190 --> 00:39:43,200
it's a0
 

2231
00:39:43,200 --> 00:39:45,030
it's a0
and it's just called can look at that

2232
00:39:45,030 --> 00:39:45,040
and it's just called can look at that
 

2233
00:39:45,040 --> 00:39:46,790
and it's just called can look at that
register look at a0

2234
00:39:46,790 --> 00:39:46,800
register look at a0
 

2235
00:39:46,800 --> 00:39:48,230
register look at a0
see what the number is and then for

2236
00:39:48,230 --> 00:39:48,240
see what the number is and then for
 

2237
00:39:48,240 --> 00:39:52,950
see what the number is and then for
example call the forex system call

2238
00:39:52,950 --> 00:39:52,960

 

2239
00:39:52,960 --> 00:39:54,790

and so just to make a little clear so

2240
00:39:54,790 --> 00:39:54,800
and so just to make a little clear so
 

2241
00:39:54,800 --> 00:39:56,069
and so just to make a little clear so
this is this hard boundary

2242
00:39:56,069 --> 00:39:56,079
this is this hard boundary
 

2243
00:39:56,079 --> 00:39:58,630
this is this hard boundary
between the user and kernel so the user

2244
00:39:58,630 --> 00:39:58,640
between the user and kernel so the user
 

2245
00:39:58,640 --> 00:39:59,430
between the user and kernel so the user
cannot

2246
00:39:59,430 --> 00:39:59,440
cannot
 

2247
00:39:59,440 --> 00:40:03,109
cannot
call you know the disks for directly

2248
00:40:03,109 --> 00:40:03,119
call you know the disks for directly
 

2249
00:40:03,119 --> 00:40:04,870
call you know the disks for directly
you know the only way you know user

2250
00:40:04,870 --> 00:40:04,880
you know the only way you know user
 

2251
00:40:04,880 --> 00:40:06,790
you know the only way you know user
application can actually invoke you know

2252
00:40:06,790 --> 00:40:06,800
application can actually invoke you know
 

2253
00:40:06,800 --> 00:40:08,309
application can actually invoke you know
the system call for fork

2254
00:40:08,309 --> 00:40:08,319
the system call for fork
 

2255
00:40:08,319 --> 00:40:09,430
the system call for fork
is actually through this e-coll

2256
00:40:09,430 --> 00:40:09,440
is actually through this e-coll
 

2257
00:40:09,440 --> 00:40:12,470
is actually through this e-coll
instruction

2258
00:40:12,470 --> 00:40:12,480

 

2259
00:40:12,480 --> 00:40:18,710

and so i have another

2260
00:40:18,710 --> 00:40:18,720

 

2261
00:40:18,720 --> 00:40:22,710

if i have another

2262
00:40:22,710 --> 00:40:22,720

 

2263
00:40:22,720 --> 00:40:27,670

another system called let's say right

2264
00:40:27,670 --> 00:40:27,680

 

2265
00:40:27,680 --> 00:40:29,109

it does something similar you know the

2266
00:40:29,109 --> 00:40:29,119
it does something similar you know the
 

2267
00:40:29,119 --> 00:40:31,750
it does something similar you know the
right uh system called cannot call

2268
00:40:31,750 --> 00:40:31,760
right uh system called cannot call
 

2269
00:40:31,760 --> 00:40:33,829
right uh system called cannot call
you know the right you know code

2270
00:40:33,829 --> 00:40:33,839
you know the right you know code
 

2271
00:40:33,839 --> 00:40:35,030
you know the right you know code
directly into the kernel

2272
00:40:35,030 --> 00:40:35,040
directly into the kernel
 

2273
00:40:35,040 --> 00:40:37,589
directly into the kernel
instead uh what it does it calls what's

2274
00:40:37,589 --> 00:40:37,599
instead uh what it does it calls what's
 

2275
00:40:37,599 --> 00:40:38,309
instead uh what it does it calls what's
these these

2276
00:40:38,309 --> 00:40:38,319
these these
 

2277
00:40:38,319 --> 00:40:41,109
these these
these little rappers are called uh

2278
00:40:41,109 --> 00:40:41,119
these little rappers are called uh
 

2279
00:40:41,119 --> 00:40:44,470
these little rappers are called uh
system call stops and we'll call ecall

2280
00:40:44,470 --> 00:40:44,480
system call stops and we'll call ecall
 

2281
00:40:44,480 --> 00:40:45,990
system call stops and we'll call ecall
a function called write that actually

2282
00:40:45,990 --> 00:40:46,000
a function called write that actually
 

2283
00:40:46,000 --> 00:40:47,589
a function called write that actually
execute the equal instruction you know

2284
00:40:47,589 --> 00:40:47,599
execute the equal instruction you know
 

2285
00:40:47,599 --> 00:40:50,309
execute the equal instruction you know
with the argument you know says right

2286
00:40:50,309 --> 00:40:50,319
with the argument you know says right
 

2287
00:40:50,319 --> 00:40:51,910
with the argument you know says right
to indicate you know the write system

2288
00:40:51,910 --> 00:40:51,920
to indicate you know the write system
 

2289
00:40:51,920 --> 00:40:53,910
to indicate you know the write system
call and add again you know transcript

2290
00:40:53,910 --> 00:40:53,920
call and add again you know transcript
 

2291
00:40:53,920 --> 00:40:55,510
call and add again you know transcript
control to syscall

2292
00:40:55,510 --> 00:40:55,520
control to syscall
 

2293
00:40:55,520 --> 00:40:58,950
control to syscall
and then syscall uh can actually

2294
00:40:58,950 --> 00:40:58,960
and then syscall uh can actually
 

2295
00:40:58,960 --> 00:41:01,109
and then syscall uh can actually
uh view multiplexing to the right system

2296
00:41:01,109 --> 00:41:01,119
uh view multiplexing to the right system
 

2297
00:41:01,119 --> 00:41:02,550
uh view multiplexing to the right system
call for two

2298
00:41:02,550 --> 00:41:02,560
call for two
 

2299
00:41:02,560 --> 00:41:09,349
call for two
questions please go ahead

2300
00:41:09,349 --> 00:41:09,359

 

2301
00:41:09,359 --> 00:41:12,790

um so i think my hand was off

2302
00:41:12,790 --> 00:41:12,800
um so i think my hand was off
 

2303
00:41:12,800 --> 00:41:15,990
um so i think my hand was off
okay i can go ahead um um

2304
00:41:15,990 --> 00:41:16,000
okay i can go ahead um um
 

2305
00:41:16,000 --> 00:41:19,109
okay i can go ahead um um
the question i had was um how does

2306
00:41:19,109 --> 00:41:19,119
the question i had was um how does
 

2307
00:41:19,119 --> 00:41:23,030
the question i had was um how does
or where does the kernel check um

2308
00:41:23,030 --> 00:41:23,040
or where does the kernel check um
 

2309
00:41:23,040 --> 00:41:26,069
or where does the kernel check um
for for example fork or write if it is

2310
00:41:26,069 --> 00:41:26,079
for for example fork or write if it is
 

2311
00:41:26,079 --> 00:41:27,510
for for example fork or write if it is
allowed or not

2312
00:41:27,510 --> 00:41:27,520
allowed or not
 

2313
00:41:27,520 --> 00:41:29,670
allowed or not
um right now you're just passing in like

2314
00:41:29,670 --> 00:41:29,680
um right now you're just passing in like
 

2315
00:41:29,680 --> 00:41:31,670
um right now you're just passing in like
you know you're just calling ecall and

2316
00:41:31,670 --> 00:41:31,680
you know you're just calling ecall and
 

2317
00:41:31,680 --> 00:41:33,270
you know you're just calling ecall and
the system call number

2318
00:41:33,270 --> 00:41:33,280
the system call number
 

2319
00:41:33,280 --> 00:41:35,430
the system call number
but where does the kernel basically

2320
00:41:35,430 --> 00:41:35,440
but where does the kernel basically
 

2321
00:41:35,440 --> 00:41:37,349
but where does the kernel basically
decide whether this application

2322
00:41:37,349 --> 00:41:37,359
decide whether this application
 

2323
00:41:37,359 --> 00:41:39,589
decide whether this application
should be able to invoke this particular

2324
00:41:39,589 --> 00:41:39,599
should be able to invoke this particular
 

2325
00:41:39,599 --> 00:41:41,430
should be able to invoke this particular
uh kernel syscall

2326
00:41:41,430 --> 00:41:41,440
uh kernel syscall
 

2327
00:41:41,440 --> 00:41:43,670
uh kernel syscall
yeah so a great question so in principle

2328
00:41:43,670 --> 00:41:43,680
yeah so a great question so in principle
 

2329
00:41:43,680 --> 00:41:45,910
yeah so a great question so in principle
the on the kernel side correct when we

2330
00:41:45,910 --> 00:41:45,920
the on the kernel side correct when we
 

2331
00:41:45,920 --> 00:41:46,790
the on the kernel side correct when we
actually spark

2332
00:41:46,790 --> 00:41:46,800
actually spark
 

2333
00:41:46,800 --> 00:41:49,589
actually spark
call runs i can implement any secure

2334
00:41:49,589 --> 00:41:49,599
call runs i can implement any secure
 

2335
00:41:49,599 --> 00:41:51,109
call runs i can implement any secure
check it wants you know i can look at

2336
00:41:51,109 --> 00:41:51,119
check it wants you know i can look at
 

2337
00:41:51,119 --> 00:41:52,630
check it wants you know i can look at
the arguments you know of the system

2338
00:41:52,630 --> 00:41:52,640
the arguments you know of the system
 

2339
00:41:52,640 --> 00:41:53,270
the arguments you know of the system
call

2340
00:41:53,270 --> 00:41:53,280
call
 

2341
00:41:53,280 --> 00:41:54,550
call
and decide whether actually the

2342
00:41:54,550 --> 00:41:54,560
and decide whether actually the
 

2343
00:41:54,560 --> 00:41:56,550
and decide whether actually the
application should be allowed to execute

2344
00:41:56,550 --> 00:41:56,560
application should be allowed to execute
 

2345
00:41:56,560 --> 00:41:57,990
application should be allowed to execute
the system call fork

2346
00:41:57,990 --> 00:41:58,000
the system call fork
 

2347
00:41:58,000 --> 00:42:01,030
the system call fork
now in user in unix any application can

2348
00:42:01,030 --> 00:42:01,040
now in user in unix any application can
 

2349
00:42:01,040 --> 00:42:02,309
now in user in unix any application can
actually call farc

2350
00:42:02,309 --> 00:42:02,319
actually call farc
 

2351
00:42:02,319 --> 00:42:04,230
actually call farc
but let's say you take write you know

2352
00:42:04,230 --> 00:42:04,240
but let's say you take write you know
 

2353
00:42:04,240 --> 00:42:05,510
but let's say you take write you know
right you know needs to check

2354
00:42:05,510 --> 00:42:05,520
right you know needs to check
 

2355
00:42:05,520 --> 00:42:07,910
right you know needs to check
whether uh the implementation of write

2356
00:42:07,910 --> 00:42:07,920
whether uh the implementation of write
 

2357
00:42:07,920 --> 00:42:09,589
whether uh the implementation of write
needs to check whether the address that

2358
00:42:09,589 --> 00:42:09,599
needs to check whether the address that
 

2359
00:42:09,599 --> 00:42:10,550
needs to check whether the address that
is actually passed

2360
00:42:10,550 --> 00:42:10,560
is actually passed
 

2361
00:42:10,560 --> 00:42:13,910
is actually passed
into right actually is a part of the

2362
00:42:13,910 --> 00:42:13,920
into right actually is a part of the
 

2363
00:42:13,920 --> 00:42:15,750
into right actually is a part of the
user applications

2364
00:42:15,750 --> 00:42:15,760
user applications
 

2365
00:42:15,760 --> 00:42:17,510
user applications
and so that you know the kernel is not

2366
00:42:17,510 --> 00:42:17,520
and so that you know the kernel is not
 

2367
00:42:17,520 --> 00:42:18,870
and so that you know the kernel is not
tricked to

2368
00:42:18,870 --> 00:42:18,880
tricked to
 

2369
00:42:18,880 --> 00:42:21,990
tricked to
writing data for somewhere else it

2370
00:42:21,990 --> 00:42:22,000
writing data for somewhere else it
 

2371
00:42:22,000 --> 00:42:23,030
writing data for somewhere else it
actually doesn't belong to the

2372
00:42:23,030 --> 00:42:23,040
actually doesn't belong to the
 

2373
00:42:23,040 --> 00:42:25,589
actually doesn't belong to the
application

2374
00:42:25,589 --> 00:42:25,599
application
 

2375
00:42:25,599 --> 00:42:30,309
application
they're more hints you know please ask

2376
00:42:30,309 --> 00:42:30,319
they're more hints you know please ask
 

2377
00:42:30,319 --> 00:42:33,030
they're more hints you know please ask
uh yeah i had a quick question um so how

2378
00:42:33,030 --> 00:42:33,040
uh yeah i had a quick question um so how
 

2379
00:42:33,040 --> 00:42:33,430
uh yeah i had a quick question um so how
does

2380
00:42:33,430 --> 00:42:33,440
does
 

2381
00:42:33,440 --> 00:42:36,230
does
the kernel seize back control from a

2382
00:42:36,230 --> 00:42:36,240
the kernel seize back control from a
 

2383
00:42:36,240 --> 00:42:37,430
the kernel seize back control from a
user application

2384
00:42:37,430 --> 00:42:37,440
user application
 

2385
00:42:37,440 --> 00:42:39,510
user application
in the case where the user application

2386
00:42:39,510 --> 00:42:39,520
in the case where the user application
 

2387
00:42:39,520 --> 00:42:40,630
in the case where the user application
is acting maliciously

2388
00:42:40,630 --> 00:42:40,640
is acting maliciously
 

2389
00:42:40,640 --> 00:42:43,829
is acting maliciously
or it's in an infinite loop yeah so the

2390
00:42:43,829 --> 00:42:43,839
or it's in an infinite loop yeah so the
 

2391
00:42:43,839 --> 00:42:45,910
or it's in an infinite loop yeah so the
way the plan for that and again we're

2392
00:42:45,910 --> 00:42:45,920
way the plan for that and again we're
 

2393
00:42:45,920 --> 00:42:46,950
way the plan for that and again we're
going to talk about in much more detail

2394
00:42:46,950 --> 00:42:46,960
going to talk about in much more detail
 

2395
00:42:46,960 --> 00:42:47,829
going to talk about in much more detail
in a couple weeks

2396
00:42:47,829 --> 00:42:47,839
in a couple weeks
 

2397
00:42:47,839 --> 00:42:50,470
in a couple weeks
uh is that the kernel actually programs

2398
00:42:50,470 --> 00:42:50,480
uh is that the kernel actually programs
 

2399
00:42:50,480 --> 00:42:51,910
uh is that the kernel actually programs
the hardware to

2400
00:42:51,910 --> 00:42:51,920
the hardware to
 

2401
00:42:51,920 --> 00:42:55,510
the hardware to
set a timer and uh after the timer goes

2402
00:42:55,510 --> 00:42:55,520
set a timer and uh after the timer goes
 

2403
00:42:55,520 --> 00:42:56,150
set a timer and uh after the timer goes
off

2404
00:42:56,150 --> 00:42:56,160
off
 

2405
00:42:56,160 --> 00:42:58,870
off
uh that will cause a transfer from usage

2406
00:42:58,870 --> 00:42:58,880
uh that will cause a transfer from usage
 

2407
00:42:58,880 --> 00:43:00,390
uh that will cause a transfer from usage
space to kernel mode so at that point

2408
00:43:00,390 --> 00:43:00,400
space to kernel mode so at that point
 

2409
00:43:00,400 --> 00:43:02,230
space to kernel mode so at that point
the kernel isn't backing control

2410
00:43:02,230 --> 00:43:02,240
the kernel isn't backing control
 

2411
00:43:02,240 --> 00:43:04,470
the kernel isn't backing control
and then the kernel can reschedule uh

2412
00:43:04,470 --> 00:43:04,480
and then the kernel can reschedule uh
 

2413
00:43:04,480 --> 00:43:05,750
and then the kernel can reschedule uh
the cpu to another

2414
00:43:05,750 --> 00:43:05,760
the cpu to another
 

2415
00:43:05,760 --> 00:43:09,589
the cpu to another
uh process okay make sense thank you

2416
00:43:09,589 --> 00:43:09,599
uh process okay make sense thank you
 

2417
00:43:09,599 --> 00:43:11,190
uh process okay make sense thank you
yeah and we'll see that the exact

2418
00:43:11,190 --> 00:43:11,200
yeah and we'll see that the exact
 

2419
00:43:11,200 --> 00:43:12,710
yeah and we'll see that the exact
details you know we'll

2420
00:43:12,710 --> 00:43:12,720
details you know we'll
 

2421
00:43:12,720 --> 00:43:15,829
details you know we'll
see in a little while you have one more

2422
00:43:15,829 --> 00:43:15,839
see in a little while you have one more
 

2423
00:43:15,839 --> 00:43:18,790
see in a little while you have one more
questions

2424
00:43:18,790 --> 00:43:18,800

 

2425
00:43:18,800 --> 00:43:20,309

yeah so this is more of a high level

2426
00:43:20,309 --> 00:43:20,319
yeah so this is more of a high level
 

2427
00:43:20,319 --> 00:43:22,230
yeah so this is more of a high level
question but what drives

2428
00:43:22,230 --> 00:43:22,240
question but what drives
 

2429
00:43:22,240 --> 00:43:25,589
question but what drives
the designers of an operating system's

2430
00:43:25,589 --> 00:43:25,599
the designers of an operating system's
 

2431
00:43:25,599 --> 00:43:29,030
the designers of an operating system's
implementation to use a language like c

2432
00:43:29,030 --> 00:43:29,040
implementation to use a language like c
 

2433
00:43:29,040 --> 00:43:32,309
implementation to use a language like c
ah okay so great question

2434
00:43:32,309 --> 00:43:32,319
ah okay so great question
 

2435
00:43:32,319 --> 00:43:36,710
ah okay so great question
um she gives you a lot of control

2436
00:43:36,710 --> 00:43:36,720
um she gives you a lot of control
 

2437
00:43:36,720 --> 00:43:40,710
um she gives you a lot of control
over hardware and so uh

2438
00:43:40,710 --> 00:43:40,720
over hardware and so uh
 

2439
00:43:40,720 --> 00:43:42,390
over hardware and so uh
so example you know you need to program

2440
00:43:42,390 --> 00:43:42,400
so example you know you need to program
 

2441
00:43:42,400 --> 00:43:44,790
so example you know you need to program
the timer chip uh

2442
00:43:44,790 --> 00:43:44,800
the timer chip uh
 

2443
00:43:44,800 --> 00:43:47,589
the timer chip uh
the in c that is actually easy to do uh

2444
00:43:47,589 --> 00:43:47,599
the in c that is actually easy to do uh
 

2445
00:43:47,599 --> 00:43:48,950
the in c that is actually easy to do uh
because you get a lot of low level

2446
00:43:48,950 --> 00:43:48,960
because you get a lot of low level
 

2447
00:43:48,960 --> 00:43:50,390
because you get a lot of low level
control over

2448
00:43:50,390 --> 00:43:50,400
control over
 

2449
00:43:50,400 --> 00:43:52,630
control over
any hardware resource and partly because

2450
00:43:52,630 --> 00:43:52,640
any hardware resource and partly because
 

2451
00:43:52,640 --> 00:43:56,069
any hardware resource and partly because
you can cast anything to anything

2452
00:43:56,069 --> 00:43:56,079
you can cast anything to anything
 

2453
00:43:56,079 --> 00:43:58,790
you can cast anything to anything
and so c is basically very convenient

2454
00:43:58,790 --> 00:43:58,800
and so c is basically very convenient
 

2455
00:43:58,800 --> 00:44:00,390
and so c is basically very convenient
program language if you have to do very

2456
00:44:00,390 --> 00:44:00,400
program language if you have to do very
 

2457
00:44:00,400 --> 00:44:01,750
program language if you have to do very
low level programming

2458
00:44:01,750 --> 00:44:01,760
low level programming
 

2459
00:44:01,760 --> 00:44:06,630
low level programming
particularly interacting with hardware

2460
00:44:06,630 --> 00:44:06,640

 

2461
00:44:06,640 --> 00:44:07,990

it doesn't mean you can't do it in other

2462
00:44:07,990 --> 00:44:08,000
it doesn't mean you can't do it in other
 

2463
00:44:08,000 --> 00:44:09,829
it doesn't mean you can't do it in other
languages uh but this is historically

2464
00:44:09,829 --> 00:44:09,839
languages uh but this is historically
 

2465
00:44:09,839 --> 00:44:12,870
languages uh but this is historically
the reason why ce has been successful

2466
00:44:12,870 --> 00:44:12,880
the reason why ce has been successful
 

2467
00:44:12,880 --> 00:44:16,630
the reason why ce has been successful
i see thanks why is c so much more

2468
00:44:16,630 --> 00:44:16,640
i see thanks why is c so much more
 

2469
00:44:16,640 --> 00:44:17,910
i see thanks why is c so much more
popular than uh

2470
00:44:17,910 --> 00:44:17,920
popular than uh
 

2471
00:44:17,920 --> 00:44:20,790
popular than uh
c plus only for historic reasons in like

2472
00:44:20,790 --> 00:44:20,800
c plus only for historic reasons in like
 

2473
00:44:20,800 --> 00:44:22,790
c plus only for historic reasons in like
these kinds of applications

2474
00:44:22,790 --> 00:44:22,800
these kinds of applications
 

2475
00:44:22,800 --> 00:44:26,069
these kinds of applications
or uh is there uh any other reason that

2476
00:44:26,069 --> 00:44:26,079
or uh is there uh any other reason that
 

2477
00:44:26,079 --> 00:44:26,550
or uh is there uh any other reason that
like

2478
00:44:26,550 --> 00:44:26,560
like
 

2479
00:44:26,560 --> 00:44:29,349
like
no like most os don't haven't adopted c

2480
00:44:29,349 --> 00:44:29,359
no like most os don't haven't adopted c
 

2481
00:44:29,359 --> 00:44:30,470
no like most os don't haven't adopted c
plus plus

2482
00:44:30,470 --> 00:44:30,480
plus plus
 

2483
00:44:30,480 --> 00:44:31,910
plus plus
yeah so most operating system you know

2484
00:44:31,910 --> 00:44:31,920
yeah so most operating system you know
 

2485
00:44:31,920 --> 00:44:33,109
yeah so most operating system you know
there are i think operating systems

2486
00:44:33,109 --> 00:44:33,119
there are i think operating systems
 

2487
00:44:33,119 --> 00:44:34,390
there are i think operating systems
written in c plus plus

2488
00:44:34,390 --> 00:44:34,400
written in c plus plus
 

2489
00:44:34,400 --> 00:44:36,309
written in c plus plus
uh totally possible probably the most

2490
00:44:36,309 --> 00:44:36,319
uh totally possible probably the most
 

2491
00:44:36,319 --> 00:44:37,910
uh totally possible probably the most
ones that you know you know

2492
00:44:37,910 --> 00:44:37,920
ones that you know you know
 

2493
00:44:37,920 --> 00:44:40,630
ones that you know you know
are not written in c plus plus uh and

2494
00:44:40,630 --> 00:44:40,640
are not written in c plus plus uh and
 

2495
00:44:40,640 --> 00:44:41,910
are not written in c plus plus uh and
the various reasons for it

2496
00:44:41,910 --> 00:44:41,920
the various reasons for it
 

2497
00:44:41,920 --> 00:44:45,109
the various reasons for it
uh you know linux is mostly c or no c

2498
00:44:45,109 --> 00:44:45,119
uh you know linux is mostly c or no c
 

2499
00:44:45,119 --> 00:44:46,550
uh you know linux is mostly c or no c
plus plus nothing partially because

2500
00:44:46,550 --> 00:44:46,560
plus plus nothing partially because
 

2501
00:44:46,560 --> 00:44:48,829
plus plus nothing partially because
linus just doesn't like c

2502
00:44:48,829 --> 00:44:48,839
linus just doesn't like c
 

2503
00:44:48,839 --> 00:44:54,550
linus just doesn't like c
plus

2504
00:44:54,550 --> 00:44:54,560

 

2505
00:44:54,560 --> 00:45:04,230

any other questions

2506
00:45:04,230 --> 00:45:04,240
any other questions
 

2507
00:45:04,240 --> 00:45:06,790
any other questions
okay so so in this view of the world

2508
00:45:06,790 --> 00:45:06,800
okay so so in this view of the world
 

2509
00:45:06,800 --> 00:45:07,589
okay so so in this view of the world
right where

2510
00:45:07,589 --> 00:45:07,599
right where
 

2511
00:45:07,599 --> 00:45:09,589
right where
uh you know we have a way of

2512
00:45:09,589 --> 00:45:09,599
uh you know we have a way of
 

2513
00:45:09,599 --> 00:45:10,630
uh you know we have a way of
transferring control

2514
00:45:10,630 --> 00:45:10,640
transferring control
 

2515
00:45:10,640 --> 00:45:13,349
transferring control
into uh the operating system using uh

2516
00:45:13,349 --> 00:45:13,359
into uh the operating system using uh
 

2517
00:45:13,359 --> 00:45:15,829
into uh the operating system using uh
system calls or this e-call instruction

2518
00:45:15,829 --> 00:45:15,839
system calls or this e-call instruction
 

2519
00:45:15,839 --> 00:45:18,710
system calls or this e-call instruction
uh and so the kernel is now responsible

2520
00:45:18,710 --> 00:45:18,720
uh and so the kernel is now responsible
 

2521
00:45:18,720 --> 00:45:19,589
uh and so the kernel is now responsible
for

2522
00:45:19,589 --> 00:45:19,599
for
 

2523
00:45:19,599 --> 00:45:21,670
for
uh implementing actually the the actual

2524
00:45:21,670 --> 00:45:21,680
uh implementing actually the the actual
 

2525
00:45:21,680 --> 00:45:22,870
uh implementing actually the the actual
functions and

2526
00:45:22,870 --> 00:45:22,880
functions and
 

2527
00:45:22,880 --> 00:45:25,030
functions and
ensuring uh you know checking arguments

2528
00:45:25,030 --> 00:45:25,040
ensuring uh you know checking arguments
 

2529
00:45:25,040 --> 00:45:26,470
ensuring uh you know checking arguments
and things like that to make sure that

2530
00:45:26,470 --> 00:45:26,480
and things like that to make sure that
 

2531
00:45:26,480 --> 00:45:27,829
and things like that to make sure that
you know the

2532
00:45:27,829 --> 00:45:27,839
you know the
 

2533
00:45:27,839 --> 00:45:29,430
you know the
uh it's not being tricked in something

2534
00:45:29,430 --> 00:45:29,440
uh it's not being tricked in something
 

2535
00:45:29,440 --> 00:45:30,950
uh it's not being tricked in something
uh doing something badly

2536
00:45:30,950 --> 00:45:30,960
uh doing something badly
 

2537
00:45:30,960 --> 00:45:33,030
uh doing something badly
and so in this view of the world the

2538
00:45:33,030 --> 00:45:33,040
and so in this view of the world the
 

2539
00:45:33,040 --> 00:45:37,109
and so in this view of the world the
kernel is sometimes called

2540
00:45:37,109 --> 00:45:37,119

 

2541
00:45:37,119 --> 00:45:46,950

you know it's the trusted computing base

2542
00:45:46,950 --> 00:45:46,960
you know it's the trusted computing base
 

2543
00:45:46,960 --> 00:45:48,710
you know it's the trusted computing base
sometimes called in security terms the

2544
00:45:48,710 --> 00:45:48,720
sometimes called in security terms the
 

2545
00:45:48,720 --> 00:45:50,470
sometimes called in security terms the
tcp

2546
00:45:50,470 --> 00:45:50,480
tcp
 

2547
00:45:50,480 --> 00:45:53,510
tcp
um and you know basically you know what

2548
00:45:53,510 --> 00:45:53,520
um and you know basically you know what
 

2549
00:45:53,520 --> 00:45:54,950
um and you know basically you know what
does it mean for it to be the trusted

2550
00:45:54,950 --> 00:45:54,960
does it mean for it to be the trusted
 

2551
00:45:54,960 --> 00:45:56,150
does it mean for it to be the trusted
computing mix well

2552
00:45:56,150 --> 00:45:56,160
computing mix well
 

2553
00:45:56,160 --> 00:45:57,829
computing mix well
it must be correct you know kernels must

2554
00:45:57,829 --> 00:45:57,839
it must be correct you know kernels must
 

2555
00:45:57,839 --> 00:46:05,670
it must be correct you know kernels must
have no bugs

2556
00:46:05,670 --> 00:46:05,680

 

2557
00:46:05,680 --> 00:46:07,270

because if there's a bug in the kernel

2558
00:46:07,270 --> 00:46:07,280
because if there's a bug in the kernel
 

2559
00:46:07,280 --> 00:46:08,630
because if there's a bug in the kernel
you know the way to think about it is

2560
00:46:08,630 --> 00:46:08,640
you know the way to think about it is
 

2561
00:46:08,640 --> 00:46:10,630
you know the way to think about it is
that maybe an attacker is able sort of

2562
00:46:10,630 --> 00:46:10,640
that maybe an attacker is able sort of
 

2563
00:46:10,640 --> 00:46:11,910
that maybe an attacker is able sort of
to

2564
00:46:11,910 --> 00:46:11,920
to
 

2565
00:46:11,920 --> 00:46:14,230
to
tickle the bug and turn the bug into an

2566
00:46:14,230 --> 00:46:14,240
tickle the bug and turn the bug into an
 

2567
00:46:14,240 --> 00:46:15,270
tickle the bug and turn the bug into an
exploit

2568
00:46:15,270 --> 00:46:15,280
exploit
 

2569
00:46:15,280 --> 00:46:17,270
exploit
and you know that exploit may maybe

2570
00:46:17,270 --> 00:46:17,280
and you know that exploit may maybe
 

2571
00:46:17,280 --> 00:46:19,109
and you know that exploit may maybe
allow that particular attacker to

2572
00:46:19,109 --> 00:46:19,119
allow that particular attacker to
 

2573
00:46:19,119 --> 00:46:21,270
allow that particular attacker to
break out of isolation or maybe take

2574
00:46:21,270 --> 00:46:21,280
break out of isolation or maybe take
 

2575
00:46:21,280 --> 00:46:23,109
break out of isolation or maybe take
some control over the kernel

2576
00:46:23,109 --> 00:46:23,119
some control over the kernel
 

2577
00:46:23,119 --> 00:46:24,550
some control over the kernel
and so it's really important that you

2578
00:46:24,550 --> 00:46:24,560
and so it's really important that you
 

2579
00:46:24,560 --> 00:46:25,910
and so it's really important that you
know the kernel really you know has to

2580
00:46:25,910 --> 00:46:25,920
know the kernel really you know has to
 

2581
00:46:25,920 --> 00:46:29,589
know the kernel really you know has to
have as few bugs as possible

2582
00:46:29,589 --> 00:46:29,599
have as few bugs as possible
 

2583
00:46:29,599 --> 00:46:31,510
have as few bugs as possible
and basically the kernel you know must

2584
00:46:31,510 --> 00:46:31,520
and basically the kernel you know must
 

2585
00:46:31,520 --> 00:46:35,349
and basically the kernel you know must
treat

2586
00:46:35,349 --> 00:46:35,359

 

2587
00:46:35,359 --> 00:46:38,470

let's treat user apps or applications or

2588
00:46:38,470 --> 00:46:38,480
let's treat user apps or applications or
 

2589
00:46:38,480 --> 00:46:41,670
let's treat user apps or applications or
processes

2590
00:46:41,670 --> 00:46:41,680

 

2591
00:46:41,680 --> 00:46:47,030

that's malicious

2592
00:46:47,030 --> 00:46:47,040

 

2593
00:46:47,040 --> 00:46:48,790

and basically as i said before you know

2594
00:46:48,790 --> 00:46:48,800
and basically as i said before you know
 

2595
00:46:48,800 --> 00:46:50,309
and basically as i said before you know
basically the german designer seems to

2596
00:46:50,309 --> 00:46:50,319
basically the german designer seems to
 

2597
00:46:50,319 --> 00:46:52,150
basically the german designer seems to
have sort of a security mindset

2598
00:46:52,150 --> 00:46:52,160
have sort of a security mindset
 

2599
00:46:52,160 --> 00:46:53,829
have sort of a security mindset
uh you know when writing and

2600
00:46:53,829 --> 00:46:53,839
uh you know when writing and
 

2601
00:46:53,839 --> 00:46:56,069
uh you know when writing and
implementing uh kernel code

2602
00:46:56,069 --> 00:46:56,079
implementing uh kernel code
 

2603
00:46:56,079 --> 00:46:58,950
implementing uh kernel code
and uh and you know it's hard to achieve

2604
00:46:58,950 --> 00:46:58,960
and uh and you know it's hard to achieve
 

2605
00:46:58,960 --> 00:46:59,910
and uh and you know it's hard to achieve
this goal right we're

2606
00:46:59,910 --> 00:46:59,920
this goal right we're
 

2607
00:46:59,920 --> 00:47:02,150
this goal right we're
having no bugs if you're playing system

2608
00:47:02,150 --> 00:47:02,160
having no bugs if you're playing system
 

2609
00:47:02,160 --> 00:47:03,430
having no bugs if you're playing system
gigantically big

2610
00:47:03,430 --> 00:47:03,440
gigantically big
 

2611
00:47:03,440 --> 00:47:05,190
gigantically big
uh is not that straightforward and you

2612
00:47:05,190 --> 00:47:05,200
uh is not that straightforward and you
 

2613
00:47:05,200 --> 00:47:06,950
uh is not that straightforward and you
know almost every operating system you

2614
00:47:06,950 --> 00:47:06,960
know almost every operating system you
 

2615
00:47:06,960 --> 00:47:07,990
know almost every operating system you
know that this

2616
00:47:07,990 --> 00:47:08,000
know that this
 

2617
00:47:08,000 --> 00:47:10,550
know that this
you use or is widely used uh once in a

2618
00:47:10,550 --> 00:47:10,560
you use or is widely used uh once in a
 

2619
00:47:10,560 --> 00:47:12,309
you use or is widely used uh once in a
while actually has a security bug

2620
00:47:12,309 --> 00:47:12,319
while actually has a security bug
 

2621
00:47:12,319 --> 00:47:15,109
while actually has a security bug
and you know they get fixed over time

2622
00:47:15,109 --> 00:47:15,119
and you know they get fixed over time
 

2623
00:47:15,119 --> 00:47:16,470
and you know they get fixed over time
but basically

2624
00:47:16,470 --> 00:47:16,480
but basically
 

2625
00:47:16,480 --> 00:47:18,390
but basically
no matter what there's always a new

2626
00:47:18,390 --> 00:47:18,400
no matter what there's always a new
 

2627
00:47:18,400 --> 00:47:20,069
no matter what there's always a new
exploit at some point

2628
00:47:20,069 --> 00:47:20,079
exploit at some point
 

2629
00:47:20,079 --> 00:47:22,230
exploit at some point
down the line and you know we'll see

2630
00:47:22,230 --> 00:47:22,240
down the line and you know we'll see
 

2631
00:47:22,240 --> 00:47:24,390
down the line and you know we'll see
later why it's so tricky to get it all

2632
00:47:24,390 --> 00:47:24,400
later why it's so tricky to get it all
 

2633
00:47:24,400 --> 00:47:26,790
later why it's so tricky to get it all
right but you know the sort of

2634
00:47:26,790 --> 00:47:26,800
right but you know the sort of
 

2635
00:47:26,800 --> 00:47:28,549
right but you know the sort of
understandable like

2636
00:47:28,549 --> 00:47:28,559
understandable like
 

2637
00:47:28,559 --> 00:47:29,990
understandable like
you know the kernel has to do tricky

2638
00:47:29,990 --> 00:47:30,000
you know the kernel has to do tricky
 

2639
00:47:30,000 --> 00:47:33,030
you know the kernel has to do tricky
stuff uh it has to manipulate hardware

2640
00:47:33,030 --> 00:47:33,040
stuff uh it has to manipulate hardware
 

2641
00:47:33,040 --> 00:47:34,950
stuff uh it has to manipulate hardware
uh it has to be very careful and it's

2642
00:47:34,950 --> 00:47:34,960
uh it has to be very careful and it's
 

2643
00:47:34,960 --> 00:47:36,870
uh it has to be very careful and it's
checking and it's very easy to make a

2644
00:47:36,870 --> 00:47:36,880
checking and it's very easy to make a
 

2645
00:47:36,880 --> 00:47:38,150
checking and it's very easy to make a
small slip up

2646
00:47:38,150 --> 00:47:38,160
small slip up
 

2647
00:47:38,160 --> 00:47:42,069
small slip up
and you know half a buck

2648
00:47:42,069 --> 00:47:42,079

 

2649
00:47:42,079 --> 00:47:47,030

and so

2650
00:47:47,030 --> 00:47:47,040

 

2651
00:47:47,040 --> 00:47:49,190

an interesting question correct is then

2652
00:47:49,190 --> 00:47:49,200
an interesting question correct is then
 

2653
00:47:49,200 --> 00:47:50,150
an interesting question correct is then
what should run

2654
00:47:50,150 --> 00:47:50,160
what should run
 

2655
00:47:50,160 --> 00:47:51,750
what should run
in kernel mode because it's really the

2656
00:47:51,750 --> 00:47:51,760
in kernel mode because it's really the
 

2657
00:47:51,760 --> 00:47:53,670
in kernel mode because it's really the
kernel code that actually is in kernel

2658
00:47:53,670 --> 00:47:53,680
kernel code that actually is in kernel
 

2659
00:47:53,680 --> 00:47:54,309
kernel code that actually is in kernel
mode

2660
00:47:54,309 --> 00:47:54,319
mode
 

2661
00:47:54,319 --> 00:47:57,430
mode
that is the uh sensitive code right that

2662
00:47:57,430 --> 00:47:57,440
that is the uh sensitive code right that
 

2663
00:47:57,440 --> 00:47:59,270
that is the uh sensitive code right that
is the trusted computing days

2664
00:47:59,270 --> 00:47:59,280
is the trusted computing days
 

2665
00:47:59,280 --> 00:48:02,870
is the trusted computing days
um and one answer you know to that

2666
00:48:02,870 --> 00:48:02,880
um and one answer you know to that
 

2667
00:48:02,880 --> 00:48:05,270
um and one answer you know to that
question is like well you know we have

2668
00:48:05,270 --> 00:48:05,280
question is like well you know we have
 

2669
00:48:05,280 --> 00:48:06,630
question is like well you know we have
our

2670
00:48:06,630 --> 00:48:06,640
our
 

2671
00:48:06,640 --> 00:48:08,549
our
user kernel boundary so here's user

2672
00:48:08,549 --> 00:48:08,559
user kernel boundary so here's user
 

2673
00:48:08,559 --> 00:48:10,710
user kernel boundary so here's user
here's kernel and

2674
00:48:10,710 --> 00:48:10,720
here's kernel and
 

2675
00:48:10,720 --> 00:48:13,750
here's kernel and
uh here's our applications running

2676
00:48:13,750 --> 00:48:13,760
uh here's our applications running
 

2677
00:48:13,760 --> 00:48:15,910
uh here's our applications running
and here is you know the program running

2678
00:48:15,910 --> 00:48:15,920
and here is you know the program running
 

2679
00:48:15,920 --> 00:48:16,790
and here is you know the program running
in kernel mode

2680
00:48:16,790 --> 00:48:16,800
in kernel mode
 

2681
00:48:16,800 --> 00:48:18,710
in kernel mode
one option is to stick the whole

2682
00:48:18,710 --> 00:48:18,720
one option is to stick the whole
 

2683
00:48:18,720 --> 00:48:19,990
one option is to stick the whole
operating system in kernel

2684
00:48:19,990 --> 00:48:20,000
operating system in kernel
 

2685
00:48:20,000 --> 00:48:23,190
operating system in kernel
mode so example uh in most unix

2686
00:48:23,190 --> 00:48:23,200
mode so example uh in most unix
 

2687
00:48:23,200 --> 00:48:24,870
mode so example uh in most unix
operating systems the whole

2688
00:48:24,870 --> 00:48:24,880
operating systems the whole
 

2689
00:48:24,880 --> 00:48:26,870
operating systems the whole
unix implementation runs inside of

2690
00:48:26,870 --> 00:48:26,880
unix implementation runs inside of
 

2691
00:48:26,880 --> 00:48:29,589
unix implementation runs inside of
kernel mode so for example in xv6

2692
00:48:29,589 --> 00:48:29,599
kernel mode so for example in xv6
 

2693
00:48:29,599 --> 00:48:32,390
kernel mode so for example in xv6
all the operating system services are

2694
00:48:32,390 --> 00:48:32,400
all the operating system services are
 

2695
00:48:32,400 --> 00:48:33,030
all the operating system services are
basically

2696
00:48:33,030 --> 00:48:33,040
basically
 

2697
00:48:33,040 --> 00:48:35,990
basically
in kernel mode and this is called

2698
00:48:35,990 --> 00:48:36,000
in kernel mode and this is called
 

2699
00:48:36,000 --> 00:48:39,829
in kernel mode and this is called
monolithic

2700
00:48:39,829 --> 00:48:39,839

 

2701
00:48:39,839 --> 00:48:47,510

kernel design

2702
00:48:47,510 --> 00:48:47,520

 

2703
00:48:47,520 --> 00:48:50,710

and you know there there's a couple

2704
00:48:50,710 --> 00:48:50,720
and you know there there's a couple
 

2705
00:48:50,720 --> 00:48:52,069
and you know there there's a couple
things in the way to think about it

2706
00:48:52,069 --> 00:48:52,079
things in the way to think about it
 

2707
00:48:52,079 --> 00:48:54,790
things in the way to think about it
um one you know it's probably not so

2708
00:48:54,790 --> 00:48:54,800
um one you know it's probably not so
 

2709
00:48:54,800 --> 00:48:56,630
um one you know it's probably not so
good for bugs right

2710
00:48:56,630 --> 00:48:56,640
good for bugs right
 

2711
00:48:56,640 --> 00:49:00,069
good for bugs right
um because any bug

2712
00:49:00,069 --> 00:49:00,079
um because any bug
 

2713
00:49:00,079 --> 00:49:01,510
um because any bug
you know that you might have in a

2714
00:49:01,510 --> 00:49:01,520
you know that you might have in a
 

2715
00:49:01,520 --> 00:49:03,270
you know that you might have in a
monolithical design you know might

2716
00:49:03,270 --> 00:49:03,280
monolithical design you know might
 

2717
00:49:03,280 --> 00:49:04,710
monolithical design you know might
actually turn into an

2718
00:49:04,710 --> 00:49:04,720
actually turn into an
 

2719
00:49:04,720 --> 00:49:07,349
actually turn into an
exploit and that would be bad uh so we

2720
00:49:07,349 --> 00:49:07,359
exploit and that would be bad uh so we
 

2721
00:49:07,359 --> 00:49:09,109
exploit and that would be bad uh so we
have a large operating system running

2722
00:49:09,109 --> 00:49:09,119
have a large operating system running
 

2723
00:49:09,119 --> 00:49:10,870
have a large operating system running
inside of the kernel it's likely that

2724
00:49:10,870 --> 00:49:10,880
inside of the kernel it's likely that
 

2725
00:49:10,880 --> 00:49:12,230
inside of the kernel it's likely that
they're going to be more books like any

2726
00:49:12,230 --> 00:49:12,240
they're going to be more books like any
 

2727
00:49:12,240 --> 00:49:14,069
they're going to be more books like any
statistics that you look up it says like

2728
00:49:14,069 --> 00:49:14,079
statistics that you look up it says like
 

2729
00:49:14,079 --> 00:49:16,549
statistics that you look up it says like
every 3000 lines of code will have you

2730
00:49:16,549 --> 00:49:16,559
every 3000 lines of code will have you
 

2731
00:49:16,559 --> 00:49:18,309
every 3000 lines of code will have you
know some small number of bucks

2732
00:49:18,309 --> 00:49:18,319
know some small number of bucks
 

2733
00:49:18,319 --> 00:49:19,750
know some small number of bucks
and so if you have many many more lines

2734
00:49:19,750 --> 00:49:19,760
and so if you have many many more lines
 

2735
00:49:19,760 --> 00:49:21,190
and so if you have many many more lines
of code you're running in the kernel box

2736
00:49:21,190 --> 00:49:21,200
of code you're running in the kernel box
 

2737
00:49:21,200 --> 00:49:22,710
of code you're running in the kernel box
you know the probability of the chance

2738
00:49:22,710 --> 00:49:22,720
you know the probability of the chance
 

2739
00:49:22,720 --> 00:49:23,829
you know the probability of the chance
that you have

2740
00:49:23,829 --> 00:49:23,839
that you have
 

2741
00:49:23,839 --> 00:49:26,549
that you have
uh and then the series buck you know it

2742
00:49:26,549 --> 00:49:26,559
uh and then the series buck you know it
 

2743
00:49:26,559 --> 00:49:27,430
uh and then the series buck you know it
goes up a little bit

2744
00:49:27,430 --> 00:49:27,440
goes up a little bit
 

2745
00:49:27,440 --> 00:49:29,589
goes up a little bit
and so the downside from the molecular

2746
00:49:29,589 --> 00:49:29,599
and so the downside from the molecular
 

2747
00:49:29,599 --> 00:49:30,870
and so the downside from the molecular
kernel design from the security

2748
00:49:30,870 --> 00:49:30,880
kernel design from the security
 

2749
00:49:30,880 --> 00:49:32,309
kernel design from the security
perspective is that there's a lot of

2750
00:49:32,309 --> 00:49:32,319
perspective is that there's a lot of
 

2751
00:49:32,319 --> 00:49:33,430
perspective is that there's a lot of
code in

2752
00:49:33,430 --> 00:49:33,440
code in
 

2753
00:49:33,440 --> 00:49:36,790
code in
the kernel uh the plus though

2754
00:49:36,790 --> 00:49:36,800
the kernel uh the plus though
 

2755
00:49:36,800 --> 00:49:39,109
the kernel uh the plus though
is you know typically if you're thinking

2756
00:49:39,109 --> 00:49:39,119
is you know typically if you're thinking
 

2757
00:49:39,119 --> 00:49:40,470
is you know typically if you're thinking
about an operating system it contains of

2758
00:49:40,470 --> 00:49:40,480
about an operating system it contains of
 

2759
00:49:40,480 --> 00:49:41,670
about an operating system it contains of
all kinds of different pieces you know

2760
00:49:41,670 --> 00:49:41,680
all kinds of different pieces you know
 

2761
00:49:41,680 --> 00:49:43,589
all kinds of different pieces you know
you might have to file system piece

2762
00:49:43,589 --> 00:49:43,599
you might have to file system piece
 

2763
00:49:43,599 --> 00:49:45,750
you might have to file system piece
you might have the virtual memory piece

2764
00:49:45,750 --> 00:49:45,760
you might have the virtual memory piece
 

2765
00:49:45,760 --> 00:49:48,230
you might have the virtual memory piece
uh you might have you know processes you

2766
00:49:48,230 --> 00:49:48,240
uh you might have you know processes you
 

2767
00:49:48,240 --> 00:49:48,790
uh you might have you know processes you
know

2768
00:49:48,790 --> 00:49:48,800
know
 

2769
00:49:48,800 --> 00:49:50,069
know
and so there are all kinds of sub

2770
00:49:50,069 --> 00:49:50,079
and so there are all kinds of sub
 

2771
00:49:50,079 --> 00:49:51,750
and so there are all kinds of sub
modules inside of the operating system

2772
00:49:51,750 --> 00:49:51,760
modules inside of the operating system
 

2773
00:49:51,760 --> 00:49:54,069
modules inside of the operating system
that implement particular functionality

2774
00:49:54,069 --> 00:49:54,079
that implement particular functionality
 

2775
00:49:54,079 --> 00:49:55,750
that implement particular functionality
and the plus side of that is there's

2776
00:49:55,750 --> 00:49:55,760
and the plus side of that is there's
 

2777
00:49:55,760 --> 00:49:58,950
and the plus side of that is there's
going to be tight integration possible

2778
00:49:58,950 --> 00:49:58,960
going to be tight integration possible
 

2779
00:49:58,960 --> 00:50:00,870
going to be tight integration possible
between these different sub modules if

2780
00:50:00,870 --> 00:50:00,880
between these different sub modules if
 

2781
00:50:00,880 --> 00:50:03,430
between these different sub modules if
they're all sitting in the same program

2782
00:50:03,430 --> 00:50:03,440
they're all sitting in the same program
 

2783
00:50:03,440 --> 00:50:05,030
they're all sitting in the same program
and that can actually lead you know to

2784
00:50:05,030 --> 00:50:05,040
and that can actually lead you know to
 

2785
00:50:05,040 --> 00:50:11,109
and that can actually lead you know to
great performance

2786
00:50:11,109 --> 00:50:11,119

 

2787
00:50:11,119 --> 00:50:12,470

uh an example if you look at an

2788
00:50:12,470 --> 00:50:12,480
uh an example if you look at an
 

2789
00:50:12,480 --> 00:50:14,630
uh an example if you look at an
operating system on linux it actually

2790
00:50:14,630 --> 00:50:14,640
operating system on linux it actually
 

2791
00:50:14,640 --> 00:50:17,670
operating system on linux it actually
achieves uh very impressive performance

2792
00:50:17,670 --> 00:50:17,680
achieves uh very impressive performance
 

2793
00:50:17,680 --> 00:50:20,870
achieves uh very impressive performance
and so this is one uh sort of one design

2794
00:50:20,870 --> 00:50:20,880
and so this is one uh sort of one design
 

2795
00:50:20,880 --> 00:50:22,950
and so this is one uh sort of one design
uh another design which basically

2796
00:50:22,950 --> 00:50:22,960
uh another design which basically
 

2797
00:50:22,960 --> 00:50:24,790
uh another design which basically
focuses on reducing the amount of code

2798
00:50:24,790 --> 00:50:24,800
focuses on reducing the amount of code
 

2799
00:50:24,800 --> 00:50:25,910
focuses on reducing the amount of code
in the kernel

2800
00:50:25,910 --> 00:50:25,920
in the kernel
 

2801
00:50:25,920 --> 00:50:35,030
in the kernel
is what's called microkernel design

2802
00:50:35,030 --> 00:50:35,040

 

2803
00:50:35,040 --> 00:50:37,030

and in this design the goal is actually

2804
00:50:37,030 --> 00:50:37,040
and in this design the goal is actually
 

2805
00:50:37,040 --> 00:50:38,470
and in this design the goal is actually
to run as few

2806
00:50:38,470 --> 00:50:38,480
to run as few
 

2807
00:50:38,480 --> 00:50:40,950
to run as few
lights as possible in kernel mode and so

2808
00:50:40,950 --> 00:50:40,960
lights as possible in kernel mode and so
 

2809
00:50:40,960 --> 00:50:41,910
lights as possible in kernel mode and so
for example there is

2810
00:50:41,910 --> 00:50:41,920
for example there is
 

2811
00:50:41,920 --> 00:50:44,950
for example there is
something often kernel but the kernel

2812
00:50:44,950 --> 00:50:44,960
something often kernel but the kernel
 

2813
00:50:44,960 --> 00:50:46,230
something often kernel but the kernel
has very few

2814
00:50:46,230 --> 00:50:46,240
has very few
 

2815
00:50:46,240 --> 00:50:48,710
has very few
uh components to it so for example it

2816
00:50:48,710 --> 00:50:48,720
uh components to it so for example it
 

2817
00:50:48,720 --> 00:50:50,150
uh components to it so for example it
typically has some form

2818
00:50:50,150 --> 00:50:50,160
typically has some form
 

2819
00:50:50,160 --> 00:50:53,510
typically has some form
of ipc or message passing a little bit

2820
00:50:53,510 --> 00:50:53,520
of ipc or message passing a little bit
 

2821
00:50:53,520 --> 00:50:54,230
of ipc or message passing a little bit
of

2822
00:50:54,230 --> 00:50:54,240
of
 

2823
00:50:54,240 --> 00:50:57,670
of
vm support very minimal basically only

2824
00:50:57,670 --> 00:50:57,680
vm support very minimal basically only
 

2825
00:50:57,680 --> 00:50:58,069
vm support very minimal basically only
the thing

2826
00:50:58,069 --> 00:50:58,079
the thing
 

2827
00:50:58,079 --> 00:50:59,990
the thing
necessarily for page tables and

2828
00:50:59,990 --> 00:51:00,000
necessarily for page tables and
 

2829
00:51:00,000 --> 00:51:01,910
necessarily for page tables and
something to multiplex

2830
00:51:01,910 --> 00:51:01,920
something to multiplex
 

2831
00:51:01,920 --> 00:51:06,829
something to multiplex
uh different cpus so some multiplexing

2832
00:51:06,829 --> 00:51:06,839
uh different cpus so some multiplexing
 

2833
00:51:06,839 --> 00:51:09,589
uh different cpus so some multiplexing
code

2834
00:51:09,589 --> 00:51:09,599
code
 

2835
00:51:09,599 --> 00:51:11,750
code
but generally the goal is to run the

2836
00:51:11,750 --> 00:51:11,760
but generally the goal is to run the
 

2837
00:51:11,760 --> 00:51:13,990
but generally the goal is to run the
bulk of the operating system outside of

2838
00:51:13,990 --> 00:51:14,000
bulk of the operating system outside of
 

2839
00:51:14,000 --> 00:51:14,870
bulk of the operating system outside of
the kernel

2840
00:51:14,870 --> 00:51:14,880
the kernel
 

2841
00:51:14,880 --> 00:51:17,030
the kernel
and so for example again as we have our

2842
00:51:17,030 --> 00:51:17,040
and so for example again as we have our
 

2843
00:51:17,040 --> 00:51:18,549
and so for example again as we have our
you know boundary here

2844
00:51:18,549 --> 00:51:18,559
you know boundary here
 

2845
00:51:18,559 --> 00:51:21,030
you know boundary here
uh what we'll do is actually we'll run

2846
00:51:21,030 --> 00:51:21,040
uh what we'll do is actually we'll run
 

2847
00:51:21,040 --> 00:51:23,270
uh what we'll do is actually we'll run
other parts of the kernel as usual

2848
00:51:23,270 --> 00:51:23,280
other parts of the kernel as usual
 

2849
00:51:23,280 --> 00:51:25,750
other parts of the kernel as usual
normal user applications so example we

2850
00:51:25,750 --> 00:51:25,760
normal user applications so example we
 

2851
00:51:25,760 --> 00:51:26,630
normal user applications so example we
might have an

2852
00:51:26,630 --> 00:51:26,640
might have an
 

2853
00:51:26,640 --> 00:51:34,390
might have an
oops

2854
00:51:34,390 --> 00:51:34,400

 

2855
00:51:34,400 --> 00:51:37,510

you might have a user process still okay

2856
00:51:37,510 --> 00:51:37,520
you might have a user process still okay
 

2857
00:51:37,520 --> 00:51:38,309
you might have a user process still okay
it's not going to intended but it

2858
00:51:38,309 --> 00:51:38,319
it's not going to intended but it
 

2859
00:51:38,319 --> 00:51:39,270
it's not going to intended but it
doesn't really matter

2860
00:51:39,270 --> 00:51:39,280
doesn't really matter
 

2861
00:51:39,280 --> 00:51:42,710
doesn't really matter
you know that's the file server and

2862
00:51:42,710 --> 00:51:42,720
you know that's the file server and
 

2863
00:51:42,720 --> 00:51:44,870
you know that's the file server and
so and the file server is just a regular

2864
00:51:44,870 --> 00:51:44,880
so and the file server is just a regular
 

2865
00:51:44,880 --> 00:51:46,230
so and the file server is just a regular
user space

2866
00:51:46,230 --> 00:51:46,240
user space
 

2867
00:51:46,240 --> 00:51:48,549
user space
so user space kernel so even though i

2868
00:51:48,549 --> 00:51:48,559
so user space kernel so even though i
 

2869
00:51:48,559 --> 00:51:49,990
so user space kernel so even though i
drew uh by accident

2870
00:51:49,990 --> 00:51:50,000
drew uh by accident
 

2871
00:51:50,000 --> 00:51:52,390
drew uh by accident
in red i intended to draw out in black

2872
00:51:52,390 --> 00:51:52,400
in red i intended to draw out in black
 

2873
00:51:52,400 --> 00:51:54,230
in red i intended to draw out in black
uh the faucets are mine run like a user

2874
00:51:54,230 --> 00:51:54,240
uh the faucets are mine run like a user
 

2875
00:51:54,240 --> 00:51:55,829
uh the faucets are mine run like a user
application like you know

2876
00:51:55,829 --> 00:51:55,839
application like you know
 

2877
00:51:55,839 --> 00:51:59,030
application like you know
echo you know the shell they're all

2878
00:51:59,030 --> 00:51:59,040
echo you know the shell they're all
 

2879
00:51:59,040 --> 00:52:00,630
echo you know the shell they're all
running user space and we might have

2880
00:52:00,630 --> 00:52:00,640
running user space and we might have
 

2881
00:52:00,640 --> 00:52:02,069
running user space and we might have
other you know user applications like

2882
00:52:02,069 --> 00:52:02,079
other you know user applications like
 

2883
00:52:02,079 --> 00:52:02,549
other you know user applications like
the

2884
00:52:02,549 --> 00:52:02,559
the
 

2885
00:52:02,559 --> 00:52:04,069
the
parts of the vm system might actually

2886
00:52:04,069 --> 00:52:04,079
parts of the vm system might actually
 

2887
00:52:04,079 --> 00:52:06,950
parts of the vm system might actually
run a regular user application

2888
00:52:06,950 --> 00:52:06,960
run a regular user application
 

2889
00:52:06,960 --> 00:52:10,390
run a regular user application
in um in user mode and so this is sort

2890
00:52:10,390 --> 00:52:10,400
in um in user mode and so this is sort
 

2891
00:52:10,400 --> 00:52:11,990
in um in user mode and so this is sort
of a nice design correct because

2892
00:52:11,990 --> 00:52:12,000
of a nice design correct because
 

2893
00:52:12,000 --> 00:52:13,109
of a nice design correct because
you know the amount of code that

2894
00:52:13,109 --> 00:52:13,119
you know the amount of code that
 

2895
00:52:13,119 --> 00:52:18,710
you know the amount of code that
presumably that's in the kernel is small

2896
00:52:18,710 --> 00:52:18,720
presumably that's in the kernel is small
 

2897
00:52:18,720 --> 00:52:21,990
presumably that's in the kernel is small
it's small and small means hopefully

2898
00:52:21,990 --> 00:52:22,000
it's small and small means hopefully
 

2899
00:52:22,000 --> 00:52:28,069
it's small and small means hopefully
fewer bucks

2900
00:52:28,069 --> 00:52:28,079

 

2901
00:52:28,079 --> 00:52:30,069

the one issue and of course it's like

2902
00:52:30,069 --> 00:52:30,079
the one issue and of course it's like
 

2903
00:52:30,079 --> 00:52:31,430
the one issue and of course it's like
you know we have to arrange that the

2904
00:52:31,430 --> 00:52:31,440
you know we have to arrange that the
 

2905
00:52:31,440 --> 00:52:33,030
you know we have to arrange that the
shell can talk to the file system for

2906
00:52:33,030 --> 00:52:33,040
shell can talk to the file system for
 

2907
00:52:33,040 --> 00:52:35,030
shell can talk to the file system for
example you know the shell calls exec

2908
00:52:35,030 --> 00:52:35,040
example you know the shell calls exec
 

2909
00:52:35,040 --> 00:52:36,630
example you know the shell calls exec
and there has to be a way you've got to

2910
00:52:36,630 --> 00:52:36,640
and there has to be a way you've got to
 

2911
00:52:36,640 --> 00:52:38,230
and there has to be a way you've got to
get into the file system and so

2912
00:52:38,230 --> 00:52:38,240
get into the file system and so
 

2913
00:52:38,240 --> 00:52:39,990
get into the file system and so
typically that way that works is that

2914
00:52:39,990 --> 00:52:40,000
typically that way that works is that
 

2915
00:52:40,000 --> 00:52:41,990
typically that way that works is that
the shell will send a message you know

2916
00:52:41,990 --> 00:52:42,000
the shell will send a message you know
 

2917
00:52:42,000 --> 00:52:43,910
the shell will send a message you know
through the ipc system

2918
00:52:43,910 --> 00:52:43,920
through the ipc system
 

2919
00:52:43,920 --> 00:52:45,990
through the ipc system
to the kernel the kernel will look at it

2920
00:52:45,990 --> 00:52:46,000
to the kernel the kernel will look at it
 

2921
00:52:46,000 --> 00:52:47,030
to the kernel the kernel will look at it
and say like oh you know this is

2922
00:52:47,030 --> 00:52:47,040
and say like oh you know this is
 

2923
00:52:47,040 --> 00:52:48,710
and say like oh you know this is
intended for the file system so the file

2924
00:52:48,710 --> 00:52:48,720
intended for the file system so the file
 

2925
00:52:48,720 --> 00:52:51,430
intended for the file system so the file
system sends it to the file system

2926
00:52:51,430 --> 00:52:51,440
system sends it to the file system
 

2927
00:52:51,440 --> 00:52:53,829
system sends it to the file system
the file system doesn't work you know

2928
00:52:53,829 --> 00:52:53,839
the file system doesn't work you know
 

2929
00:52:53,839 --> 00:52:55,349
the file system doesn't work you know
sends a message back

2930
00:52:55,349 --> 00:52:55,359
sends a message back
 

2931
00:52:55,359 --> 00:52:56,870
sends a message back
saying like you know here's the results

2932
00:52:56,870 --> 00:52:56,880
saying like you know here's the results
 

2933
00:52:56,880 --> 00:52:58,710
saying like you know here's the results
of your exact system call

2934
00:52:58,710 --> 00:52:58,720
of your exact system call
 

2935
00:52:58,720 --> 00:53:00,630
of your exact system call
and then you know sends it back to the

2936
00:53:00,630 --> 00:53:00,640
and then you know sends it back to the
 

2937
00:53:00,640 --> 00:53:01,750
and then you know sends it back to the
shell

2938
00:53:01,750 --> 00:53:01,760
shell
 

2939
00:53:01,760 --> 00:53:04,230
shell
and so uh these are typically

2940
00:53:04,230 --> 00:53:04,240
and so uh these are typically
 

2941
00:53:04,240 --> 00:53:05,910
and so uh these are typically
implemented using messages

2942
00:53:05,910 --> 00:53:05,920
implemented using messages
 

2943
00:53:05,920 --> 00:53:08,549
implemented using messages
uh and so for any interaction with the

2944
00:53:08,549 --> 00:53:08,559
uh and so for any interaction with the
 

2945
00:53:08,559 --> 00:53:09,510
uh and so for any interaction with the
file server

2946
00:53:09,510 --> 00:53:09,520
file server
 

2947
00:53:09,520 --> 00:53:11,510
file server
now you have to jump once into the

2948
00:53:11,510 --> 00:53:11,520
now you have to jump once into the
 

2949
00:53:11,520 --> 00:53:13,109
now you have to jump once into the
kernel once out of the kernel

2950
00:53:13,109 --> 00:53:13,119
kernel once out of the kernel
 

2951
00:53:13,119 --> 00:53:14,790
kernel once out of the kernel
once into the kernel once out of the

2952
00:53:14,790 --> 00:53:14,800
once into the kernel once out of the
 

2953
00:53:14,800 --> 00:53:16,630
once into the kernel once out of the
kernel if you compare that with the

2954
00:53:16,630 --> 00:53:16,640
kernel if you compare that with the
 

2955
00:53:16,640 --> 00:53:17,829
kernel if you compare that with the
previous design

2956
00:53:17,829 --> 00:53:17,839
previous design
 

2957
00:53:17,839 --> 00:53:19,670
previous design
like if this guy wants to talk to the

2958
00:53:19,670 --> 00:53:19,680
like if this guy wants to talk to the
 

2959
00:53:19,680 --> 00:53:21,829
like if this guy wants to talk to the
file system it's one system to call in

2960
00:53:21,829 --> 00:53:21,839
file system it's one system to call in
 

2961
00:53:21,839 --> 00:53:24,390
file system it's one system to call in
and one basically called back out and so

2962
00:53:24,390 --> 00:53:24,400
and one basically called back out and so
 

2963
00:53:24,400 --> 00:53:25,030
and one basically called back out and so
you double

2964
00:53:25,030 --> 00:53:25,040
you double
 

2965
00:53:25,040 --> 00:53:28,790
you double
the numer of system call entries

2966
00:53:28,790 --> 00:53:28,800
the numer of system call entries
 

2967
00:53:28,800 --> 00:53:32,150
the numer of system call entries
and so uh one typical problem or

2968
00:53:32,150 --> 00:53:32,160
and so uh one typical problem or
 

2969
00:53:32,160 --> 00:53:33,670
and so uh one typical problem or
challenge with offer with the micro

2970
00:53:33,670 --> 00:53:33,680
challenge with offer with the micro
 

2971
00:53:33,680 --> 00:53:34,870
challenge with offer with the micro
kernel approach is

2972
00:53:34,870 --> 00:53:34,880
kernel approach is
 

2973
00:53:34,880 --> 00:53:36,470
kernel approach is
uh is actually how to achieve good

2974
00:53:36,470 --> 00:53:36,480
uh is actually how to achieve good
 

2975
00:53:36,480 --> 00:53:38,630
uh is actually how to achieve good
performance and it has sort of two

2976
00:53:38,630 --> 00:53:38,640
performance and it has sort of two
 

2977
00:53:38,640 --> 00:53:40,829
performance and it has sort of two
components to it

2978
00:53:40,829 --> 00:53:40,839
components to it
 

2979
00:53:40,839 --> 00:53:43,829
components to it
one uh you know just jumping back and

2980
00:53:43,829 --> 00:53:43,839
one uh you know just jumping back and
 

2981
00:53:43,839 --> 00:53:44,230
one uh you know just jumping back and
forth

2982
00:53:44,230 --> 00:53:44,240
forth
 

2983
00:53:44,240 --> 00:53:45,670
forth
you know between user mode and kernel

2984
00:53:45,670 --> 00:53:45,680
you know between user mode and kernel
 

2985
00:53:45,680 --> 00:53:47,430
you know between user mode and kernel
mode to actually get something done

2986
00:53:47,430 --> 00:53:47,440
mode to actually get something done
 

2987
00:53:47,440 --> 00:53:49,510
mode to actually get something done
and the second part is because you know

2988
00:53:49,510 --> 00:53:49,520
and the second part is because you know
 

2989
00:53:49,520 --> 00:53:51,270
and the second part is because you know
the different pieces are really well

2990
00:53:51,270 --> 00:53:51,280
the different pieces are really well
 

2991
00:53:51,280 --> 00:53:52,870
the different pieces are really well
isolated from each other a tight

2992
00:53:52,870 --> 00:53:52,880
isolated from each other a tight
 

2993
00:53:52,880 --> 00:53:55,190
isolated from each other a tight
integration is less you know

2994
00:53:55,190 --> 00:53:55,200
integration is less you know
 

2995
00:53:55,200 --> 00:53:56,870
integration is less you know
more complicated to range than for

2996
00:53:56,870 --> 00:53:56,880
more complicated to range than for
 

2997
00:53:56,880 --> 00:53:58,230
more complicated to range than for
example in the monolithic kernel where

2998
00:53:58,230 --> 00:53:58,240
example in the monolithic kernel where
 

2999
00:53:58,240 --> 00:53:58,870
example in the monolithic kernel where
basically

3000
00:53:58,870 --> 00:53:58,880
basically
 

3001
00:53:58,880 --> 00:54:00,630
basically
everybody can you know for example the

3002
00:54:00,630 --> 00:54:00,640
everybody can you know for example the
 

3003
00:54:00,640 --> 00:54:01,990
everybody can you know for example the
file system in the virtual memory system

3004
00:54:01,990 --> 00:54:02,000
file system in the virtual memory system
 

3005
00:54:02,000 --> 00:54:02,870
file system in the virtual memory system
can easily

3006
00:54:02,870 --> 00:54:02,880
can easily
 

3007
00:54:02,880 --> 00:54:05,270
can easily
share a page cache which is a little bit

3008
00:54:05,270 --> 00:54:05,280
share a page cache which is a little bit
 

3009
00:54:05,280 --> 00:54:06,950
share a page cache which is a little bit
harder to achieve in the microkernel

3010
00:54:06,950 --> 00:54:06,960
harder to achieve in the microkernel
 

3011
00:54:06,960 --> 00:54:08,470
harder to achieve in the microkernel
design and therefore it's sometimes more

3012
00:54:08,470 --> 00:54:08,480
design and therefore it's sometimes more
 

3013
00:54:08,480 --> 00:54:09,430
design and therefore it's sometimes more
difficult

3014
00:54:09,430 --> 00:54:09,440
difficult
 

3015
00:54:09,440 --> 00:54:12,470
difficult
to get high performance now these

3016
00:54:12,470 --> 00:54:12,480
to get high performance now these
 

3017
00:54:12,480 --> 00:54:13,510
to get high performance now these
distinctions

3018
00:54:13,510 --> 00:54:13,520
distinctions
 

3019
00:54:13,520 --> 00:54:14,790
distinctions
you know between microcurrent and

3020
00:54:14,790 --> 00:54:14,800
you know between microcurrent and
 

3021
00:54:14,800 --> 00:54:16,630
you know between microcurrent and
monocle are very high level

3022
00:54:16,630 --> 00:54:16,640
monocle are very high level
 

3023
00:54:16,640 --> 00:54:19,190
monocle are very high level
so in practice both types of kernel

3024
00:54:19,190 --> 00:54:19,200
so in practice both types of kernel
 

3025
00:54:19,200 --> 00:54:19,750
so in practice both types of kernel
designs

3026
00:54:19,750 --> 00:54:19,760
designs
 

3027
00:54:19,760 --> 00:54:23,430
designs
show up most desktop operating systems

3028
00:54:23,430 --> 00:54:23,440
show up most desktop operating systems
 

3029
00:54:23,440 --> 00:54:24,309
show up most desktop operating systems
are typically

3030
00:54:24,309 --> 00:54:24,319
are typically
 

3031
00:54:24,319 --> 00:54:26,230
are typically
monolithical systems mostly for

3032
00:54:26,230 --> 00:54:26,240
monolithical systems mostly for
 

3033
00:54:26,240 --> 00:54:27,750
monolithical systems mostly for
historical reasons

3034
00:54:27,750 --> 00:54:27,760
historical reasons
 

3035
00:54:27,760 --> 00:54:31,510
historical reasons
uh a lot of the if you run very intense

3036
00:54:31,510 --> 00:54:31,520
uh a lot of the if you run very intense
 

3037
00:54:31,520 --> 00:54:33,349
uh a lot of the if you run very intense
you know os intense applications for

3038
00:54:33,349 --> 00:54:33,359
you know os intense applications for
 

3039
00:54:33,359 --> 00:54:34,470
you know os intense applications for
example in the data center

3040
00:54:34,470 --> 00:54:34,480
example in the data center
 

3041
00:54:34,480 --> 00:54:35,910
example in the data center
they typically run on a mole

3042
00:54:35,910 --> 00:54:35,920
they typically run on a mole
 

3043
00:54:35,920 --> 00:54:38,069
they typically run on a mole
monolithical kernel

3044
00:54:38,069 --> 00:54:38,079
monolithical kernel
 

3045
00:54:38,079 --> 00:54:39,510
monolithical kernel
mostly because for example linux

3046
00:54:39,510 --> 00:54:39,520
mostly because for example linux
 

3047
00:54:39,520 --> 00:54:41,109
mostly because for example linux
provides great performance

3048
00:54:41,109 --> 00:54:41,119
provides great performance
 

3049
00:54:41,119 --> 00:54:44,549
provides great performance
but many uh embedding settings uh

3050
00:54:44,549 --> 00:54:44,559
but many uh embedding settings uh
 

3051
00:54:44,559 --> 00:54:47,750
but many uh embedding settings uh
like minix or cell 4

3052
00:54:47,750 --> 00:54:47,760
like minix or cell 4
 

3053
00:54:47,760 --> 00:54:49,910
like minix or cell 4
those all tend to be micro kernel

3054
00:54:49,910 --> 00:54:49,920
those all tend to be micro kernel
 

3055
00:54:49,920 --> 00:54:51,349
those all tend to be micro kernel
designs

3056
00:54:51,349 --> 00:54:51,359
designs
 

3057
00:54:51,359 --> 00:54:53,829
designs
and so both designs are popular uh if

3058
00:54:53,829 --> 00:54:53,839
and so both designs are popular uh if
 

3059
00:54:53,839 --> 00:54:55,109
and so both designs are popular uh if
you probably start a new operating

3060
00:54:55,109 --> 00:54:55,119
you probably start a new operating
 

3061
00:54:55,119 --> 00:54:56,789
you probably start a new operating
system from scratch

3062
00:54:56,789 --> 00:54:56,799
system from scratch
 

3063
00:54:56,799 --> 00:54:59,589
system from scratch
you probably start with uh you may you

3064
00:54:59,589 --> 00:54:59,599
you probably start with uh you may you
 

3065
00:54:59,599 --> 00:55:00,789
you probably start with uh you may you
know uh

3066
00:55:00,789 --> 00:55:00,799
know uh
 

3067
00:55:00,799 --> 00:55:03,910
know uh
you may start with a microkernel design

3068
00:55:03,910 --> 00:55:03,920
you may start with a microkernel design
 

3069
00:55:03,920 --> 00:55:05,670
you may start with a microkernel design
and once you have a monolithical design

3070
00:55:05,670 --> 00:55:05,680
and once you have a monolithical design
 

3071
00:55:05,680 --> 00:55:07,190
and once you have a monolithical design
like for example linux you know it's

3072
00:55:07,190 --> 00:55:07,200
like for example linux you know it's
 

3073
00:55:07,200 --> 00:55:07,670
like for example linux you know it's
going to be

3074
00:55:07,670 --> 00:55:07,680
going to be
 

3075
00:55:07,680 --> 00:55:09,750
going to be
it would be a ton of work to rewrite it

3076
00:55:09,750 --> 00:55:09,760
it would be a ton of work to rewrite it
 

3077
00:55:09,760 --> 00:55:11,349
it would be a ton of work to rewrite it
into a micro kernel design and that's

3078
00:55:11,349 --> 00:55:11,359
into a micro kernel design and that's
 

3079
00:55:11,359 --> 00:55:12,950
into a micro kernel design and that's
maybe you know just not conducive to the

3080
00:55:12,950 --> 00:55:12,960
maybe you know just not conducive to the
 

3081
00:55:12,960 --> 00:55:14,309
maybe you know just not conducive to the
incentives you know people probably want

3082
00:55:14,309 --> 00:55:14,319
incentives you know people probably want
 

3083
00:55:14,319 --> 00:55:15,430
incentives you know people probably want
to spend rather time

3084
00:55:15,430 --> 00:55:15,440
to spend rather time
 

3085
00:55:15,440 --> 00:55:17,750
to spend rather time
implementing new features than actually

3086
00:55:17,750 --> 00:55:17,760
implementing new features than actually
 

3087
00:55:17,760 --> 00:55:18,630
implementing new features than actually
uh

3088
00:55:18,630 --> 00:55:18,640
uh
 

3089
00:55:18,640 --> 00:55:22,789
uh
uh you know restructuring their kernel

3090
00:55:22,789 --> 00:55:22,799
uh you know restructuring their kernel
 

3091
00:55:22,799 --> 00:55:24,789
uh you know restructuring their kernel
and so these are sort of the two main

3092
00:55:24,789 --> 00:55:24,799
and so these are sort of the two main
 

3093
00:55:24,799 --> 00:55:25,829
and so these are sort of the two main
designs

3094
00:55:25,829 --> 00:55:25,839
designs
 

3095
00:55:25,839 --> 00:55:29,190
designs
uh as you know xv6 is a it falls into

3096
00:55:29,190 --> 00:55:29,200
uh as you know xv6 is a it falls into
 

3097
00:55:29,200 --> 00:55:31,349
uh as you know xv6 is a it falls into
monolithical design as most classic unix

3098
00:55:31,349 --> 00:55:31,359
monolithical design as most classic unix
 

3099
00:55:31,359 --> 00:55:34,470
monolithical design as most classic unix
systems do but later in the semester

3100
00:55:34,470 --> 00:55:34,480
systems do but later in the semester
 

3101
00:55:34,480 --> 00:55:36,230
systems do but later in the semester
we'll talk a lot more in detail about

3102
00:55:36,230 --> 00:55:36,240
we'll talk a lot more in detail about
 

3103
00:55:36,240 --> 00:55:40,069
we'll talk a lot more in detail about
some of the microkernel designs

3104
00:55:40,069 --> 00:55:40,079

 

3105
00:55:40,079 --> 00:55:41,510

any questions about this because this

3106
00:55:41,510 --> 00:55:41,520
any questions about this because this
 

3107
00:55:41,520 --> 00:55:43,750
any questions about this because this
was a hot topic in the

3108
00:55:43,750 --> 00:55:43,760
was a hot topic in the
 

3109
00:55:43,760 --> 00:55:54,630
was a hot topic in the
in the email questions

3110
00:55:54,630 --> 00:55:54,640

 

3111
00:55:54,640 --> 00:55:57,750

okay uh okay so let me switch

3112
00:55:57,750 --> 00:55:57,760
okay uh okay so let me switch
 

3113
00:55:57,760 --> 00:55:59,589
okay uh okay so let me switch
a little bit i'm going to fill it to

3114
00:55:59,589 --> 00:55:59,599
a little bit i'm going to fill it to
 

3115
00:55:59,599 --> 00:56:01,430
a little bit i'm going to fill it to
some code and so to see how all this

3116
00:56:01,430 --> 00:56:01,440
some code and so to see how all this
 

3117
00:56:01,440 --> 00:56:02,069
some code and so to see how all this
plays out

3118
00:56:02,069 --> 00:56:02,079
plays out
 

3119
00:56:02,079 --> 00:56:05,990
plays out
in xv6

3120
00:56:05,990 --> 00:56:06,000

 

3121
00:56:06,000 --> 00:56:09,829

uh so here's a two windows

3122
00:56:09,829 --> 00:56:09,839
uh so here's a two windows
 

3123
00:56:09,839 --> 00:56:12,789
uh so here's a two windows
uh and you know your emacs we know with

3124
00:56:12,789 --> 00:56:12,799
uh and you know your emacs we know with
 

3125
00:56:12,799 --> 00:56:14,950
uh and you know your emacs we know with
like the proc structure

3126
00:56:14,950 --> 00:56:14,960
like the proc structure
 

3127
00:56:14,960 --> 00:56:17,510
like the proc structure
and the first thing i want to do is uh

3128
00:56:17,510 --> 00:56:17,520
and the first thing i want to do is uh
 

3129
00:56:17,520 --> 00:56:17,990
and the first thing i want to do is uh
you know

3130
00:56:17,990 --> 00:56:18,000
you know
 

3131
00:56:18,000 --> 00:56:19,589
you know
look a little bit at the code base uh

3132
00:56:19,589 --> 00:56:19,599
look a little bit at the code base uh
 

3133
00:56:19,599 --> 00:56:21,030
look a little bit at the code base uh
you've probably already done this

3134
00:56:21,030 --> 00:56:21,040
you've probably already done this
 

3135
00:56:21,040 --> 00:56:22,309
you've probably already done this
but you see that the code is sort of

3136
00:56:22,309 --> 00:56:22,319
but you see that the code is sort of
 

3137
00:56:22,319 --> 00:56:24,950
but you see that the code is sort of
organized along three uh

3138
00:56:24,950 --> 00:56:24,960
organized along three uh
 

3139
00:56:24,960 --> 00:56:28,069
organized along three uh
in three parts one the kernel and

3140
00:56:28,069 --> 00:56:28,079
in three parts one the kernel and
 

3141
00:56:28,079 --> 00:56:30,069
in three parts one the kernel and
we can kernel that basically includes

3142
00:56:30,069 --> 00:56:30,079
we can kernel that basically includes
 

3143
00:56:30,079 --> 00:56:31,510
we can kernel that basically includes
all the

3144
00:56:31,510 --> 00:56:31,520
all the
 

3145
00:56:31,520 --> 00:56:34,150
all the
kernel files and so xv6 being a

3146
00:56:34,150 --> 00:56:34,160
kernel files and so xv6 being a
 

3147
00:56:34,160 --> 00:56:35,430
kernel files and so xv6 being a
monolithical kernel

3148
00:56:35,430 --> 00:56:35,440
monolithical kernel
 

3149
00:56:35,440 --> 00:56:37,829
monolithical kernel
basically all these programs are

3150
00:56:37,829 --> 00:56:37,839
basically all these programs are
 

3151
00:56:37,839 --> 00:56:39,349
basically all these programs are
compiled things there's a single binary

3152
00:56:39,349 --> 00:56:39,359
compiled things there's a single binary
 

3153
00:56:39,359 --> 00:56:40,710
compiled things there's a single binary
called the kernel and that's actually

3154
00:56:40,710 --> 00:56:40,720
called the kernel and that's actually
 

3155
00:56:40,720 --> 00:56:43,349
called the kernel and that's actually
what we run in kernel mode

3156
00:56:43,349 --> 00:56:43,359
what we run in kernel mode
 

3157
00:56:43,359 --> 00:56:45,750
what we run in kernel mode
um and then you know there's user and

3158
00:56:45,750 --> 00:56:45,760
um and then you know there's user and
 

3159
00:56:45,760 --> 00:56:46,470
um and then you know there's user and
those are the

3160
00:56:46,470 --> 00:56:46,480
those are the
 

3161
00:56:46,480 --> 00:56:47,990
those are the
basically the programs that run in user

3162
00:56:47,990 --> 00:56:48,000
basically the programs that run in user
 

3163
00:56:48,000 --> 00:56:49,670
basically the programs that run in user
mode and this is why you know one is

3164
00:56:49,670 --> 00:56:49,680
mode and this is why you know one is
 

3165
00:56:49,680 --> 00:56:50,950
mode and this is why you know one is
called kernel the other called

3166
00:56:50,950 --> 00:56:50,960
called kernel the other called
 

3167
00:56:50,960 --> 00:56:53,349
called kernel the other called
user and then there's one more program

3168
00:56:53,349 --> 00:56:53,359
user and then there's one more program
 

3169
00:56:53,359 --> 00:56:54,950
user and then there's one more program
called makefs

3170
00:56:54,950 --> 00:56:54,960
called makefs
 

3171
00:56:54,960 --> 00:56:57,270
called makefs
which actually builds an empty file

3172
00:56:57,270 --> 00:56:57,280
which actually builds an empty file
 

3173
00:56:57,280 --> 00:56:58,549
which actually builds an empty file
system image

3174
00:56:58,549 --> 00:56:58,559
system image
 

3175
00:56:58,559 --> 00:57:01,109
system image
that we have stored on disk so that we

3176
00:57:01,109 --> 00:57:01,119
that we have stored on disk so that we
 

3177
00:57:01,119 --> 00:57:01,670
that we have stored on disk so that we
can get

3178
00:57:01,670 --> 00:57:01,680
can get
 

3179
00:57:01,680 --> 00:57:09,109
can get
off the ground with an empty file system

3180
00:57:09,109 --> 00:57:09,119

 

3181
00:57:09,119 --> 00:57:11,910

okay so before so let me switch back

3182
00:57:11,910 --> 00:57:11,920
okay so before so let me switch back
 

3183
00:57:11,920 --> 00:57:12,309
okay so before so let me switch back
again

3184
00:57:12,309 --> 00:57:12,319
again
 

3185
00:57:12,319 --> 00:57:13,990
again
to i want to say a little bit about how

3186
00:57:13,990 --> 00:57:14,000
to i want to say a little bit about how
 

3187
00:57:14,000 --> 00:57:16,069
to i want to say a little bit about how
the kernel is compiled

3188
00:57:16,069 --> 00:57:16,079
the kernel is compiled
 

3189
00:57:16,079 --> 00:57:17,750
the kernel is compiled
uh because you probably have seen this

3190
00:57:17,750 --> 00:57:17,760
uh because you probably have seen this
 

3191
00:57:17,760 --> 00:57:19,829
uh because you probably have seen this
and might not really have realized it

3192
00:57:19,829 --> 00:57:19,839
and might not really have realized it
 

3193
00:57:19,839 --> 00:57:22,390
and might not really have realized it
uh and sort of important to understand

3194
00:57:22,390 --> 00:57:22,400
uh and sort of important to understand
 

3195
00:57:22,400 --> 00:57:23,109
uh and sort of important to understand
uh

3196
00:57:23,109 --> 00:57:23,119
uh
 

3197
00:57:23,119 --> 00:57:25,910
uh
so when the kernel the construction of

3198
00:57:25,910 --> 00:57:25,920
so when the kernel the construction of
 

3199
00:57:25,920 --> 00:57:26,549
so when the kernel the construction of
the kernel

3200
00:57:26,549 --> 00:57:26,559
the kernel
 

3201
00:57:26,559 --> 00:57:28,309
the kernel
the make file basically you know takes

3202
00:57:28,309 --> 00:57:28,319
the make file basically you know takes
 

3203
00:57:28,319 --> 00:57:30,069
the make file basically you know takes
you know one of these cs files like

3204
00:57:30,069 --> 00:57:30,079
you know one of these cs files like
 

3205
00:57:30,079 --> 00:57:31,829
you know one of these cs files like
proc.c

3206
00:57:31,829 --> 00:57:31,839
proc.c
 

3207
00:57:31,839 --> 00:57:34,870
proc.c
you know invokes you know the gcc the

3208
00:57:34,870 --> 00:57:34,880
you know invokes you know the gcc the
 

3209
00:57:34,880 --> 00:57:38,829
you know invokes you know the gcc the
cc compiler that generates a file called

3210
00:57:38,829 --> 00:57:38,839
cc compiler that generates a file called
 

3211
00:57:38,839 --> 00:57:40,150
cc compiler that generates a file called
proc.s

3212
00:57:40,150 --> 00:57:40,160
proc.s
 

3213
00:57:40,160 --> 00:57:44,710
proc.s
that goes to the assembler

3214
00:57:44,710 --> 00:57:44,720

 

3215
00:57:44,720 --> 00:57:49,270

and this is basically a risk 5 assembly

3216
00:57:49,270 --> 00:57:49,280

 

3217
00:57:49,280 --> 00:57:51,190

and that actually produces a file called

3218
00:57:51,190 --> 00:57:51,200
and that actually produces a file called
 

3219
00:57:51,200 --> 00:57:52,309
and that actually produces a file called
proc.o

3220
00:57:52,309 --> 00:57:52,319
proc.o
 

3221
00:57:52,319 --> 00:57:53,990
proc.o
and basically that's you know the binary

3222
00:57:53,990 --> 00:57:54,000
and basically that's you know the binary
 

3223
00:57:54,000 --> 00:57:56,230
and basically that's you know the binary
version of the assembler so

3224
00:57:56,230 --> 00:57:56,240
version of the assembler so
 

3225
00:57:56,240 --> 00:57:58,549
version of the assembler so
um and you know the makefile does this

3226
00:57:58,549 --> 00:57:58,559
um and you know the makefile does this
 

3227
00:57:58,559 --> 00:57:59,270
um and you know the makefile does this
for all

3228
00:57:59,270 --> 00:57:59,280
for all
 

3229
00:57:59,280 --> 00:58:01,109
for all
you know part files of the kernel so for

3230
00:58:01,109 --> 00:58:01,119
you know part files of the kernel so for
 

3231
00:58:01,119 --> 00:58:02,390
you know part files of the kernel so for
example uh you know

3232
00:58:02,390 --> 00:58:02,400
example uh you know
 

3233
00:58:02,400 --> 00:58:05,109
example uh you know
pipe there's another one you know same

3234
00:58:05,109 --> 00:58:05,119
pipe there's another one you know same
 

3235
00:58:05,119 --> 00:58:05,750
pipe there's another one you know same
story

3236
00:58:05,750 --> 00:58:05,760
story
 

3237
00:58:05,760 --> 00:58:09,190
story
gcc compiles it to pipe.s

3238
00:58:09,190 --> 00:58:09,200
gcc compiles it to pipe.s
 

3239
00:58:09,200 --> 00:58:10,630
gcc compiles it to pipe.s
and we're going to go through 3d

3240
00:58:10,630 --> 00:58:10,640
and we're going to go through 3d
 

3241
00:58:10,640 --> 00:58:13,990
and we're going to go through 3d
assembler and we've got a pipe.o

3242
00:58:13,990 --> 00:58:14,000
assembler and we've got a pipe.o
 

3243
00:58:14,000 --> 00:58:17,109
assembler and we've got a pipe.o
and basically then the loader you know

3244
00:58:17,109 --> 00:58:17,119
and basically then the loader you know
 

3245
00:58:17,119 --> 00:58:19,430
and basically then the loader you know
takes all these dot o files

3246
00:58:19,430 --> 00:58:19,440
takes all these dot o files
 

3247
00:58:19,440 --> 00:58:22,150
takes all these dot o files
from all the different files and links

3248
00:58:22,150 --> 00:58:22,160
from all the different files and links
 

3249
00:58:22,160 --> 00:58:23,030
from all the different files and links
them together

3250
00:58:23,030 --> 00:58:23,040
them together
 

3251
00:58:23,040 --> 00:58:24,789
them together
and produces the current and produces

3252
00:58:24,789 --> 00:58:24,799
and produces the current and produces
 

3253
00:58:24,799 --> 00:58:28,390
and produces the current and produces
the kernel

3254
00:58:28,390 --> 00:58:28,400

 

3255
00:58:28,400 --> 00:58:29,750

and that is actually and then what we've

3256
00:58:29,750 --> 00:58:29,760
and that is actually and then what we've
 

3257
00:58:29,760 --> 00:58:31,510
and that is actually and then what we've
run and the

3258
00:58:31,510 --> 00:58:31,520
run and the
 

3259
00:58:31,520 --> 00:58:32,950
run and the
you know for your convenience you know

3260
00:58:32,950 --> 00:58:32,960
you know for your convenience you know
 

3261
00:58:32,960 --> 00:58:34,829
you know for your convenience you know
the makefile also produces a file called

3262
00:58:34,829 --> 00:58:34,839
the makefile also produces a file called
 

3263
00:58:34,839 --> 00:58:39,030
the makefile also produces a file called
kernel.asm

3264
00:58:39,030 --> 00:58:39,040

 

3265
00:58:39,040 --> 00:58:43,270

that has the complete kernel

3266
00:58:43,270 --> 00:58:43,280
that has the complete kernel
 

3267
00:58:43,280 --> 00:58:45,750
that has the complete kernel
disassembled and you can just look at it

3268
00:58:45,750 --> 00:58:45,760
disassembled and you can just look at it
 

3269
00:58:45,760 --> 00:58:47,510
disassembled and you can just look at it
and you know that helps later on

3270
00:58:47,510 --> 00:58:47,520
and you know that helps later on
 

3271
00:58:47,520 --> 00:58:48,870
and you know that helps later on
when you have kernel bugs and it's easy

3272
00:58:48,870 --> 00:58:48,880
when you have kernel bugs and it's easy
 

3273
00:58:48,880 --> 00:58:50,870
when you have kernel bugs and it's easy
to see which instruction

3274
00:58:50,870 --> 00:58:50,880
to see which instruction
 

3275
00:58:50,880 --> 00:58:52,710
to see which instruction
was executed at the point you got the

3276
00:58:52,710 --> 00:58:52,720
was executed at the point you got the
 

3277
00:58:52,720 --> 00:58:54,069
was executed at the point you got the
debug so

3278
00:58:54,069 --> 00:58:54,079
debug so
 

3279
00:58:54,079 --> 00:58:57,190
debug so
example if i uh

3280
00:58:57,190 --> 00:58:57,200
example if i uh
 

3281
00:58:57,200 --> 00:59:00,309
example if i uh
here kernel.asm

3282
00:59:00,309 --> 00:59:00,319
here kernel.asm
 

3283
00:59:00,319 --> 00:59:03,349
here kernel.asm
we see here's the kernel file

3284
00:59:03,349 --> 00:59:03,359
we see here's the kernel file
 

3285
00:59:03,359 --> 00:59:06,710
we see here's the kernel file
uh disassembly instructions and uh

3286
00:59:06,710 --> 00:59:06,720
uh disassembly instructions and uh
 

3287
00:59:06,720 --> 00:59:08,230
uh disassembly instructions and uh
and one thing you note for example is

3288
00:59:08,230 --> 00:59:08,240
and one thing you note for example is
 

3289
00:59:08,240 --> 00:59:10,950
and one thing you note for example is
that the first uh instruction is located

3290
00:59:10,950 --> 00:59:10,960
that the first uh instruction is located
 

3291
00:59:10,960 --> 00:59:12,710
that the first uh instruction is located
at this address eight zero zero zero

3292
00:59:12,710 --> 00:59:12,720
at this address eight zero zero zero
 

3293
00:59:12,720 --> 00:59:13,910
at this address eight zero zero zero
zero zero

3294
00:59:13,910 --> 00:59:13,920
zero zero
 

3295
00:59:13,920 --> 00:59:16,470
zero zero
um and that is in whatever aupc

3296
00:59:16,470 --> 00:59:16,480
um and that is in whatever aupc
 

3297
00:59:16,480 --> 00:59:19,660
um and that is in whatever aupc
instruction the risk life instruction

3298
00:59:19,660 --> 00:59:19,670
instruction the risk life instruction
 

3299
00:59:19,670 --> 00:59:20,710
instruction the risk life instruction
[Music]

3300
00:59:20,710 --> 00:59:20,720
[Music]
 

3301
00:59:20,720 --> 00:59:23,990
[Music]
and anybody knows what this is

3302
00:59:23,990 --> 00:59:24,000
and anybody knows what this is
 

3303
00:59:24,000 --> 00:59:25,910
and anybody knows what this is
zero zero eight one one seven or eight

3304
00:59:25,910 --> 00:59:25,920
zero zero eight one one seven or eight
 

3305
00:59:25,920 --> 00:59:34,630
zero zero eight one one seven or eight
three one or three six five oh five

3306
00:59:34,630 --> 00:59:34,640

 

3307
00:59:34,640 --> 00:59:36,789

anyone who wants to answer that question

3308
00:59:36,789 --> 00:59:36,799
anyone who wants to answer that question
 

3309
00:59:36,799 --> 00:59:37,990
anyone who wants to answer that question
that's the

3310
00:59:37,990 --> 00:59:38,000
that's the
 

3311
00:59:38,000 --> 00:59:39,829
that's the
hex version of the assembly instructions

3312
00:59:39,829 --> 00:59:39,839
hex version of the assembly instructions
 

3313
00:59:39,839 --> 00:59:41,030
hex version of the assembly instructions
on the right

3314
00:59:41,030 --> 00:59:41,040
on the right
 

3315
00:59:41,040 --> 00:59:43,430
on the right
yeah exactly so what here on the zero

3316
00:59:43,430 --> 00:59:43,440
yeah exactly so what here on the zero
 

3317
00:59:43,440 --> 00:59:46,630
yeah exactly so what here on the zero
zero a117 is exactly the same thing as

3318
00:59:46,630 --> 00:59:46,640
zero a117 is exactly the same thing as
 

3319
00:59:46,640 --> 00:59:48,230
zero a117 is exactly the same thing as
the symbolic you know the textual

3320
00:59:48,230 --> 00:59:48,240
the symbolic you know the textual
 

3321
00:59:48,240 --> 00:59:50,390
the symbolic you know the textual
version of that a upc

3322
00:59:50,390 --> 00:59:50,400
version of that a upc
 

3323
00:59:50,400 --> 00:59:52,390
version of that a upc
and so basically this is the binary

3324
00:59:52,390 --> 00:59:52,400
and so basically this is the binary
 

3325
00:59:52,400 --> 00:59:55,589
and so basically this is the binary
encoding of the actual instruction

3326
00:59:55,589 --> 00:59:55,599
encoding of the actual instruction
 

3327
00:59:55,599 --> 00:59:57,430
encoding of the actual instruction
and so and every instruction has a

3328
00:59:57,430 --> 00:59:57,440
and so and every instruction has a
 

3329
00:59:57,440 --> 00:59:58,630
and so and every instruction has a
binary encoding

3330
00:59:58,630 --> 00:59:58,640
binary encoding
 

3331
00:59:58,640 --> 01:00:00,470
binary encoding
and you know the kernel of the exam file

3332
01:00:00,470 --> 01:00:00,480
and you know the kernel of the exam file
 

3333
01:00:00,480 --> 01:00:03,510
and you know the kernel of the exam file
actually shows those binary encodings

3334
01:00:03,510 --> 01:00:03,520
actually shows those binary encodings
 

3335
01:00:03,520 --> 01:00:04,710
actually shows those binary encodings
and this is sometimes convenient when

3336
01:00:04,710 --> 01:00:04,720
and this is sometimes convenient when
 

3337
01:00:04,720 --> 01:00:06,390
and this is sometimes convenient when
you look at gdb and you want to know

3338
01:00:06,390 --> 01:00:06,400
you look at gdb and you want to know
 

3339
01:00:06,400 --> 01:00:07,829
you look at gdb and you want to know
what actually is going on you know you

3340
01:00:07,829 --> 01:00:07,839
what actually is going on you know you
 

3341
01:00:07,839 --> 01:00:08,870
what actually is going on you know you
can see actually what the binary

3342
01:00:08,870 --> 01:00:08,880
can see actually what the binary
 

3343
01:00:08,880 --> 01:00:12,069
can see actually what the binary
encoding is

3344
01:00:12,069 --> 01:00:12,079

 

3345
01:00:12,079 --> 01:00:15,190

okay okay so then when we

3346
01:00:15,190 --> 01:00:15,200
okay okay so then when we
 

3347
01:00:15,200 --> 01:00:17,430
okay okay so then when we
run xv6 i'm going to run on the inside

3348
01:00:17,430 --> 01:00:17,440
run xv6 i'm going to run on the inside
 

3349
01:00:17,440 --> 01:00:18,950
run xv6 i'm going to run on the inside
of actually let me first run it

3350
01:00:18,950 --> 01:00:18,960
of actually let me first run it
 

3351
01:00:18,960 --> 01:00:21,910
of actually let me first run it
without gdb uh you know we'll compile a

3352
01:00:21,910 --> 01:00:21,920
without gdb uh you know we'll compile a
 

3353
01:00:21,920 --> 01:00:23,030
without gdb uh you know we'll compile a
bunch of stuff and then it

3354
01:00:23,030 --> 01:00:23,040
bunch of stuff and then it
 

3355
01:00:23,040 --> 01:00:26,549
bunch of stuff and then it
invokes uh qmu right then this is a

3356
01:00:26,549 --> 01:00:26,559
invokes uh qmu right then this is a
 

3357
01:00:26,559 --> 01:00:28,630
invokes uh qmu right then this is a
basically c program

3358
01:00:28,630 --> 01:00:28,640
basically c program
 

3359
01:00:28,640 --> 01:00:30,870
basically c program
that simulates or emulates a risk five

3360
01:00:30,870 --> 01:00:30,880
that simulates or emulates a risk five
 

3361
01:00:30,880 --> 01:00:32,069
that simulates or emulates a risk five
processor

3362
01:00:32,069 --> 01:00:32,079
processor
 

3363
01:00:32,079 --> 01:00:33,670
processor
and you can see here in the dash kernel

3364
01:00:33,670 --> 01:00:33,680
and you can see here in the dash kernel
 

3365
01:00:33,680 --> 01:00:36,309
and you can see here in the dash kernel
flag it actually passes the kernel

3366
01:00:36,309 --> 01:00:36,319
flag it actually passes the kernel
 

3367
01:00:36,319 --> 01:00:39,589
flag it actually passes the kernel
uh and uh the program to be run

3368
01:00:39,589 --> 01:00:39,599
uh and uh the program to be run
 

3369
01:00:39,599 --> 01:00:42,870
uh and uh the program to be run
inside of qmu and qmu and

3370
01:00:42,870 --> 01:00:42,880
inside of qmu and qmu and
 

3371
01:00:42,880 --> 01:00:45,190
inside of qmu and qmu and
the kernel agreed uh basically the the

3372
01:00:45,190 --> 01:00:45,200
the kernel agreed uh basically the the
 

3373
01:00:45,200 --> 01:00:46,950
the kernel agreed uh basically the the
starting place for any program

3374
01:00:46,950 --> 01:00:46,960
starting place for any program
 

3375
01:00:46,960 --> 01:00:48,710
starting place for any program
is this address eight zero zero zero

3376
01:00:48,710 --> 01:00:48,720
is this address eight zero zero zero
 

3377
01:00:48,720 --> 01:00:49,990
is this address eight zero zero zero
zero

3378
01:00:49,990 --> 01:00:50,000
zero
 

3379
01:00:50,000 --> 01:00:51,430
zero
and we see that we pass a couple other

3380
01:00:51,430 --> 01:00:51,440
and we see that we pass a couple other
 

3381
01:00:51,440 --> 01:00:53,430
and we see that we pass a couple other
flags to team u it says here m that's

3382
01:00:53,430 --> 01:00:53,440
flags to team u it says here m that's
 

3383
01:00:53,440 --> 01:00:56,069
flags to team u it says here m that's
the amount of memory that the machine

3384
01:00:56,069 --> 01:00:56,079
the amount of memory that the machine
 

3385
01:00:56,079 --> 01:00:57,750
the amount of memory that the machine
this virtual machine has

3386
01:00:57,750 --> 01:00:57,760
this virtual machine has
 

3387
01:00:57,760 --> 01:01:00,230
this virtual machine has
this virtual risk fight machine it

3388
01:01:00,230 --> 01:01:00,240
this virtual risk fight machine it
 

3389
01:01:00,240 --> 01:01:02,950
this virtual risk fight machine it
passes in how many of course there are

3390
01:01:02,950 --> 01:01:02,960
passes in how many of course there are
 

3391
01:01:02,960 --> 01:01:06,230
passes in how many of course there are
it passes in the machine the disk drive

3392
01:01:06,230 --> 01:01:06,240
it passes in the machine the disk drive
 

3393
01:01:06,240 --> 01:01:08,789
it passes in the machine the disk drive
which contains the file fsnf image and

3394
01:01:08,789 --> 01:01:08,799
which contains the file fsnf image and
 

3395
01:01:08,799 --> 01:01:10,150
which contains the file fsnf image and
so basically a bunch of things are sort

3396
01:01:10,150 --> 01:01:10,160
so basically a bunch of things are sort
 

3397
01:01:10,160 --> 01:01:11,990
so basically a bunch of things are sort
of set up to make you know qmu behave

3398
01:01:11,990 --> 01:01:12,000
of set up to make you know qmu behave
 

3399
01:01:12,000 --> 01:01:14,470
of set up to make you know qmu behave
like a real computer

3400
01:01:14,470 --> 01:01:14,480
like a real computer
 

3401
01:01:14,480 --> 01:01:17,190
like a real computer
and so one way when you think about qmu

3402
01:01:17,190 --> 01:01:17,200
and so one way when you think about qmu
 

3403
01:01:17,200 --> 01:01:17,750
and so one way when you think about qmu
you really

3404
01:01:17,750 --> 01:01:17,760
you really
 

3405
01:01:17,760 --> 01:01:20,069
you really
should not think about it as a cd

3406
01:01:20,069 --> 01:01:20,079
should not think about it as a cd
 

3407
01:01:20,079 --> 01:01:21,430
should not think about it as a cd
program really the way you should think

3408
01:01:21,430 --> 01:01:21,440
program really the way you should think
 

3409
01:01:21,440 --> 01:01:22,230
program really the way you should think
about it

3410
01:01:22,230 --> 01:01:22,240
about it
 

3411
01:01:22,240 --> 01:01:25,430
about it
is as follows uh

3412
01:01:25,430 --> 01:01:25,440
is as follows uh
 

3413
01:01:25,440 --> 01:01:30,870
is as follows uh
you should think about it as um

3414
01:01:30,870 --> 01:01:30,880

 

3415
01:01:30,880 --> 01:01:34,309

as this uh namely a real

3416
01:01:34,309 --> 01:01:34,319
as this uh namely a real
 

3417
01:01:34,319 --> 01:01:37,109
as this uh namely a real
board uh so for example this on the left

3418
01:01:37,109 --> 01:01:37,119
board uh so for example this on the left
 

3419
01:01:37,119 --> 01:01:38,230
board uh so for example this on the left
you know this is a

3420
01:01:38,230 --> 01:01:38,240
you know this is a
 

3421
01:01:38,240 --> 01:01:40,390
you know this is a
risk five board uh actually there's a

3422
01:01:40,390 --> 01:01:40,400
risk five board uh actually there's a
 

3423
01:01:40,400 --> 01:01:42,470
risk five board uh actually there's a
risk five board that sits in my office

3424
01:01:42,470 --> 01:01:42,480
risk five board that sits in my office
 

3425
01:01:42,480 --> 01:01:44,870
risk five board that sits in my office
and you know it can boot uh more or less

3426
01:01:44,870 --> 01:01:44,880
and you know it can boot uh more or less
 

3427
01:01:44,880 --> 01:01:46,230
and you know it can boot uh more or less
xv6

3428
01:01:46,230 --> 01:01:46,240
xv6
 

3429
01:01:46,240 --> 01:01:49,030
xv6
and so when you're running you know qmu

3430
01:01:49,030 --> 01:01:49,040
and so when you're running you know qmu
 

3431
01:01:49,040 --> 01:01:50,470
and so when you're running you know qmu
uh with your kernel you should think

3432
01:01:50,470 --> 01:01:50,480
uh with your kernel you should think
 

3433
01:01:50,480 --> 01:01:51,829
uh with your kernel you should think
about it that actually you're running it

3434
01:01:51,829 --> 01:01:51,839
about it that actually you're running it
 

3435
01:01:51,839 --> 01:01:53,270
about it that actually you're running it
on this board

3436
01:01:53,270 --> 01:01:53,280
on this board
 

3437
01:01:53,280 --> 01:01:55,589
on this board
and you know the board has an on off

3438
01:01:55,589 --> 01:01:55,599
and you know the board has an on off
 

3439
01:01:55,599 --> 01:01:56,390
and you know the board has an on off
button

3440
01:01:56,390 --> 01:01:56,400
button
 

3441
01:01:56,400 --> 01:02:00,309
button
uh here's actually the risk 5 processor

3442
01:02:00,309 --> 01:02:00,319
uh here's actually the risk 5 processor
 

3443
01:02:00,319 --> 01:02:03,190
uh here's actually the risk 5 processor
uh you know there's room for peripherals

3444
01:02:03,190 --> 01:02:03,200
uh you know there's room for peripherals
 

3445
01:02:03,200 --> 01:02:04,710
uh you know there's room for peripherals
as for example one of these

3446
01:02:04,710 --> 01:02:04,720
as for example one of these
 

3447
01:02:04,720 --> 01:02:07,430
as for example one of these
connectors is a connector for ethernet

3448
01:02:07,430 --> 01:02:07,440
connectors is a connector for ethernet
 

3449
01:02:07,440 --> 01:02:08,309
connectors is a connector for ethernet
uh

3450
01:02:08,309 --> 01:02:08,319
uh
 

3451
01:02:08,319 --> 01:02:11,430
uh
one is the pcie slots uh there are some

3452
01:02:11,430 --> 01:02:11,440
one is the pcie slots uh there are some
 

3453
01:02:11,440 --> 01:02:13,029
one is the pcie slots uh there are some
ram chips on the

3454
01:02:13,029 --> 01:02:13,039
ram chips on the
 

3455
01:02:13,039 --> 01:02:14,549
ram chips on the
you know the board i don't exactly know

3456
01:02:14,549 --> 01:02:14,559
you know the board i don't exactly know
 

3457
01:02:14,559 --> 01:02:16,470
you know the board i don't exactly know
where they are but there are

3458
01:02:16,470 --> 01:02:16,480
where they are but there are
 

3459
01:02:16,480 --> 01:02:19,349
where they are but there are
um and so this is sort of a that's the

3460
01:02:19,349 --> 01:02:19,359
um and so this is sort of a that's the
 

3461
01:02:19,359 --> 01:02:21,109
um and so this is sort of a that's the
physical hardware the computer actually

3462
01:02:21,109 --> 01:02:21,119
physical hardware the computer actually
 

3463
01:02:21,119 --> 01:02:23,589
physical hardware the computer actually
that actually you're programming so xv6

3464
01:02:23,589 --> 01:02:23,599
that actually you're programming so xv6
 

3465
01:02:23,599 --> 01:02:26,710
that actually you're programming so xv6
manages this board uh and that's the the

3466
01:02:26,710 --> 01:02:26,720
manages this board uh and that's the the
 

3467
01:02:26,720 --> 01:02:28,950
manages this board uh and that's the the
picture you should have in your head

3468
01:02:28,950 --> 01:02:28,960
picture you should have in your head
 

3469
01:02:28,960 --> 01:02:31,829
picture you should have in your head
and in fact if you zoom in you know you

3470
01:02:31,829 --> 01:02:31,839
and in fact if you zoom in you know you
 

3471
01:02:31,839 --> 01:02:33,109
and in fact if you zoom in you know you
can find all the documentation

3472
01:02:33,109 --> 01:02:33,119
can find all the documentation
 

3473
01:02:33,119 --> 01:02:34,789
can find all the documentation
of like what actually sits inside of

3474
01:02:34,789 --> 01:02:34,799
of like what actually sits inside of
 

3475
01:02:34,799 --> 01:02:36,390
of like what actually sits inside of
this uh

3476
01:02:36,390 --> 01:02:36,400
this uh
 

3477
01:02:36,400 --> 01:02:38,630
this uh
and inside of this you know this is the

3478
01:02:38,630 --> 01:02:38,640
and inside of this you know this is the
 

3479
01:02:38,640 --> 01:02:39,990
and inside of this you know this is the
inside of this risc five

3480
01:02:39,990 --> 01:02:40,000
inside of this risc five
 

3481
01:02:40,000 --> 01:02:42,309
inside of this risc five
you know processor the the schema for

3482
01:02:42,309 --> 01:02:42,319
you know processor the the schema for
 

3483
01:02:42,319 --> 01:02:43,910
you know processor the the schema for
the risk five processor is

3484
01:02:43,910 --> 01:02:43,920
the risk five processor is
 

3485
01:02:43,920 --> 01:02:46,710
the risk five processor is
shown in this picture here uh and you

3486
01:02:46,710 --> 01:02:46,720
shown in this picture here uh and you
 

3487
01:02:46,720 --> 01:02:48,150
shown in this picture here uh and you
know we see here for example there are

3488
01:02:48,150 --> 01:02:48,160
know we see here for example there are
 

3489
01:02:48,160 --> 01:02:51,510
know we see here for example there are
multiple cores in fact the four cores

3490
01:02:51,510 --> 01:02:51,520
multiple cores in fact the four cores
 

3491
01:02:51,520 --> 01:02:55,029
multiple cores in fact the four cores
uh you know there is a l2 cache

3492
01:02:55,029 --> 01:02:55,039
uh you know there is a l2 cache
 

3493
01:02:55,039 --> 01:02:58,069
uh you know there is a l2 cache
uh there's a connector to dram uh

3494
01:02:58,069 --> 01:02:58,079
uh there's a connector to dram uh
 

3495
01:02:58,079 --> 01:02:59,670
uh there's a connector to dram uh
you know there's a bunch of ways to

3496
01:02:59,670 --> 01:02:59,680
you know there's a bunch of ways to
 

3497
01:02:59,680 --> 01:03:01,109
you know there's a bunch of ways to
connect to the outside world so for

3498
01:03:01,109 --> 01:03:01,119
connect to the outside world so for
 

3499
01:03:01,119 --> 01:03:02,069
connect to the outside world so for
example here's your

3500
01:03:02,069 --> 01:03:02,079
example here's your
 

3501
01:03:02,079 --> 01:03:04,789
example here's your
zero and uh zero is actually connected

3502
01:03:04,789 --> 01:03:04,799
zero and uh zero is actually connected
 

3503
01:03:04,799 --> 01:03:05,670
zero and uh zero is actually connected
on one end

3504
01:03:05,670 --> 01:03:05,680
on one end
 

3505
01:03:05,680 --> 01:03:07,349
on one end
you know to the keyboard and to the

3506
01:03:07,349 --> 01:03:07,359
you know to the keyboard and to the
 

3507
01:03:07,359 --> 01:03:09,270
you know to the keyboard and to the
other end to the display

3508
01:03:09,270 --> 01:03:09,280
other end to the display
 

3509
01:03:09,280 --> 01:03:11,270
other end to the display
um and you know there's some ways to

3510
01:03:11,270 --> 01:03:11,280
um and you know there's some ways to
 

3511
01:03:11,280 --> 01:03:12,470
um and you know there's some ways to
actually uh

3512
01:03:12,470 --> 01:03:12,480
actually uh
 

3513
01:03:12,480 --> 01:03:15,430
actually uh
get clocks uh going i'm i'll talk about

3514
01:03:15,430 --> 01:03:15,440
get clocks uh going i'm i'll talk about
 

3515
01:03:15,440 --> 01:03:17,270
get clocks uh going i'm i'll talk about
it in much more detail later

3516
01:03:17,270 --> 01:03:17,280
it in much more detail later
 

3517
01:03:17,280 --> 01:03:18,789
it in much more detail later
but these are all the components that

3518
01:03:18,789 --> 01:03:18,799
but these are all the components that
 

3519
01:03:18,799 --> 01:03:20,870
but these are all the components that
basically you know the xv6 or

3520
01:03:20,870 --> 01:03:20,880
basically you know the xv6 or
 

3521
01:03:20,880 --> 01:03:22,549
basically you know the xv6 or
and things that you'll be modifying to

3522
01:03:22,549 --> 01:03:22,559
and things that you'll be modifying to
 

3523
01:03:22,559 --> 01:03:24,950
and things that you'll be modifying to
interact with actually the real hardware

3524
01:03:24,950 --> 01:03:24,960
interact with actually the real hardware
 

3525
01:03:24,960 --> 01:03:27,829
interact with actually the real hardware
in fact the computer system or the

3526
01:03:27,829 --> 01:03:27,839
in fact the computer system or the
 

3527
01:03:27,839 --> 01:03:29,589
in fact the computer system or the
computer board that actually is

3528
01:03:29,589 --> 01:03:29,599
computer board that actually is
 

3529
01:03:29,599 --> 01:03:32,950
computer board that actually is
emulated by qmu is pretty close

3530
01:03:32,950 --> 01:03:32,960
emulated by qmu is pretty close
 

3531
01:03:32,960 --> 01:03:35,270
emulated by qmu is pretty close
you know minor some small details to

3532
01:03:35,270 --> 01:03:35,280
you know minor some small details to
 

3533
01:03:35,280 --> 01:03:36,950
you know minor some small details to
this particular you know computer board

3534
01:03:36,950 --> 01:03:36,960
this particular you know computer board
 

3535
01:03:36,960 --> 01:03:40,309
this particular you know computer board
which is made by sci-fi

3536
01:03:40,309 --> 01:03:40,319

 

3537
01:03:40,319 --> 01:03:41,670

and unfortunately i can't show you the

3538
01:03:41,670 --> 01:03:41,680
and unfortunately i can't show you the
 

3539
01:03:41,680 --> 01:03:43,990
and unfortunately i can't show you the
real thing as i said sits in my office

3540
01:03:43,990 --> 01:03:44,000
real thing as i said sits in my office
 

3541
01:03:44,000 --> 01:03:45,510
real thing as i said sits in my office
you know and i haven't been in my office

3542
01:03:45,510 --> 01:03:45,520
you know and i haven't been in my office
 

3543
01:03:45,520 --> 01:03:47,430
you know and i haven't been in my office
since march probably collecting a lot of

3544
01:03:47,430 --> 01:03:47,440
since march probably collecting a lot of
 

3545
01:03:47,440 --> 01:03:47,910
since march probably collecting a lot of
dust

3546
01:03:47,910 --> 01:03:47,920
dust
 

3547
01:03:47,920 --> 01:03:50,230
dust
uh but it's important to keep in your

3548
01:03:50,230 --> 01:03:50,240
uh but it's important to keep in your
 

3549
01:03:50,240 --> 01:03:52,069
uh but it's important to keep in your
head and when you're running qmu

3550
01:03:52,069 --> 01:03:52,079
head and when you're running qmu
 

3551
01:03:52,079 --> 01:03:53,829
head and when you're running qmu
you're running basically on real

3552
01:03:53,829 --> 01:03:53,839
you're running basically on real
 

3553
01:03:53,839 --> 01:03:55,829
you're running basically on real
hardware and just happens to be

3554
01:03:55,829 --> 01:03:55,839
hardware and just happens to be
 

3555
01:03:55,839 --> 01:04:02,470
hardware and just happens to be
implementing the software

3556
01:04:02,470 --> 01:04:02,480

 

3557
01:04:02,480 --> 01:04:05,349

does that make sense password second

3558
01:04:05,349 --> 01:04:05,359
does that make sense password second
 

3559
01:04:05,359 --> 01:04:11,430
does that make sense password second
tier

3560
01:04:11,430 --> 01:04:11,440

 

3561
01:04:11,440 --> 01:04:13,190

so let me say a little bit more about

3562
01:04:13,190 --> 01:04:13,200
so let me say a little bit more about
 

3563
01:04:13,200 --> 01:04:15,510
so let me say a little bit more about
this so what does it mean for qmu to

3564
01:04:15,510 --> 01:04:15,520
this so what does it mean for qmu to
 

3565
01:04:15,520 --> 01:04:20,309
this so what does it mean for qmu to
emulate

3566
01:04:20,309 --> 01:04:20,319

 

3567
01:04:20,319 --> 01:04:24,870

a risk 5 processor

3568
01:04:24,870 --> 01:04:24,880

 

3569
01:04:24,880 --> 01:04:26,549

well literally you know if you think

3570
01:04:26,549 --> 01:04:26,559
well literally you know if you think
 

3571
01:04:26,559 --> 01:04:28,390
well literally you know if you think
about it like you know as i said you

3572
01:04:28,390 --> 01:04:28,400
about it like you know as i said you
 

3573
01:04:28,400 --> 01:04:29,670
about it like you know as i said you
know people use a csv

3574
01:04:29,670 --> 01:04:29,680
know people use a csv
 

3575
01:04:29,680 --> 01:04:31,349
know people use a csv
program it's an open source c program

3576
01:04:31,349 --> 01:04:31,359
program it's an open source c program
 

3577
01:04:31,359 --> 01:04:33,109
program it's an open source c program
it's a big program you can actually just

3578
01:04:33,109 --> 01:04:33,119
it's a big program you can actually just
 

3579
01:04:33,119 --> 01:04:36,309
it's a big program you can actually just
you know download it or git clone it but

3580
01:04:36,309 --> 01:04:36,319
you know download it or git clone it but
 

3581
01:04:36,319 --> 01:04:38,710
you know download it or git clone it but
internally into c uh it is basically a

3582
01:04:38,710 --> 01:04:38,720
internally into c uh it is basically a
 

3583
01:04:38,720 --> 01:04:42,069
internally into c uh it is basically a
for loop an infinite for loop

3584
01:04:42,069 --> 01:04:42,079
for loop an infinite for loop
 

3585
01:04:42,079 --> 01:04:43,589
for loop an infinite for loop
that basically does nothing else then

3586
01:04:43,589 --> 01:04:43,599
that basically does nothing else then
 

3587
01:04:43,599 --> 01:04:48,630
that basically does nothing else then
read instruction

3588
01:04:48,630 --> 01:04:48,640

 

3589
01:04:48,640 --> 01:04:49,990

the risk five instruction you know

3590
01:04:49,990 --> 01:04:50,000
the risk five instruction you know
 

3591
01:04:50,000 --> 01:04:51,670
the risk five instruction you know
basically reach you know

3592
01:04:51,670 --> 01:04:51,680
basically reach you know
 

3593
01:04:51,680 --> 01:04:54,870
basically reach you know
four bytes or eight bytes and

3594
01:04:54,870 --> 01:04:54,880
four bytes or eight bytes and
 

3595
01:04:54,880 --> 01:04:56,789
four bytes or eight bytes and
basically looks at the bits in that

3596
01:04:56,789 --> 01:04:56,799
basically looks at the bits in that
 

3597
01:04:56,799 --> 01:04:58,710
basically looks at the bits in that
instruction and decodes them

3598
01:04:58,710 --> 01:04:58,720
instruction and decodes them
 

3599
01:04:58,720 --> 01:05:03,510
instruction and decodes them
you know figures out what the op code is

3600
01:05:03,510 --> 01:05:03,520

 

3601
01:05:03,520 --> 01:05:04,950

and we saw that for some of the

3602
01:05:04,950 --> 01:05:04,960
and we saw that for some of the
 

3603
01:05:04,960 --> 01:05:06,710
and we saw that for some of the
instructions the binary version of those

3604
01:05:06,710 --> 01:05:06,720
instructions the binary version of those
 

3605
01:05:06,720 --> 01:05:07,670
instructions the binary version of those
instructions in the

3606
01:05:07,670 --> 01:05:07,680
instructions in the
 

3607
01:05:07,680 --> 01:05:09,990
instructions in the
dot asm file and so it decodes the

3608
01:05:09,990 --> 01:05:10,000
dot asm file and so it decodes the
 

3609
01:05:10,000 --> 01:05:11,430
dot asm file and so it decodes the
instructions so for example maybe it

3610
01:05:11,430 --> 01:05:11,440
instructions so for example maybe it
 

3611
01:05:11,440 --> 01:05:13,510
instructions so for example maybe it
will decide this is an ad instruction

3612
01:05:13,510 --> 01:05:13,520
will decide this is an ad instruction
 

3613
01:05:13,520 --> 01:05:15,589
will decide this is an ad instruction
or there's a sub instruction you know

3614
01:05:15,589 --> 01:05:15,599
or there's a sub instruction you know
 

3615
01:05:15,599 --> 01:05:16,870
or there's a sub instruction you know
risk five sub-construction and then

3616
01:05:16,870 --> 01:05:16,880
risk five sub-construction and then
 

3617
01:05:16,880 --> 01:05:17,510
risk five sub-construction and then
basically

3618
01:05:17,510 --> 01:05:17,520
basically
 

3619
01:05:17,520 --> 01:05:25,190
basically
it executes the instruction in software

3620
01:05:25,190 --> 01:05:25,200

 

3621
01:05:25,200 --> 01:05:26,950

and you know that basically is all what

3622
01:05:26,950 --> 01:05:26,960
and you know that basically is all what
 

3623
01:05:26,960 --> 01:05:28,390
and you know that basically is all what
it does you know for every core

3624
01:05:28,390 --> 01:05:28,400
it does you know for every core
 

3625
01:05:28,400 --> 01:05:30,870
it does you know for every core
you know it runs this particular loop

3626
01:05:30,870 --> 01:05:30,880
you know it runs this particular loop
 

3627
01:05:30,880 --> 01:05:32,789
you know it runs this particular loop
and in addition sort of doing this loop

3628
01:05:32,789 --> 01:05:32,799
and in addition sort of doing this loop
 

3629
01:05:32,799 --> 01:05:34,069
and in addition sort of doing this loop
it has to maintain some state so

3630
01:05:34,069 --> 01:05:34,079
it has to maintain some state so
 

3631
01:05:34,079 --> 01:05:36,950
it has to maintain some state so
maintain state for all the registers

3632
01:05:36,950 --> 01:05:36,960
maintain state for all the registers
 

3633
01:05:36,960 --> 01:05:40,309
maintain state for all the registers
so it has a c declaration for like x0

3634
01:05:40,309 --> 01:05:40,319
so it has a c declaration for like x0
 

3635
01:05:40,319 --> 01:05:44,230
so it has a c declaration for like x0
register 0 x1 etc

3636
01:05:44,230 --> 01:05:44,240
register 0 x1 etc
 

3637
01:05:44,240 --> 01:05:45,510
register 0 x1 etc
and so basically when it executes

3638
01:05:45,510 --> 01:05:45,520
and so basically when it executes
 

3639
01:05:45,520 --> 01:05:47,190
and so basically when it executes
instruction for example the instruction

3640
01:05:47,190 --> 01:05:47,200
instruction for example the instruction
 

3641
01:05:47,200 --> 01:05:48,829
instruction for example the instruction
is like whatever

3642
01:05:48,829 --> 01:05:48,839
is like whatever
 

3643
01:05:48,839 --> 01:05:51,829
is like whatever
and you know a0

3644
01:05:51,829 --> 01:05:51,839
and you know a0
 

3645
01:05:51,839 --> 01:05:54,549
and you know a0
you know you know one through seven and

3646
01:05:54,549 --> 01:05:54,559
you know you know one through seven and
 

3647
01:05:54,559 --> 01:05:55,750
you know you know one through seven and
store it in a zero

3648
01:05:55,750 --> 01:05:55,760
store it in a zero
 

3649
01:05:55,760 --> 01:05:57,270
store it in a zero
then basically takes a constant seven

3650
01:05:57,270 --> 01:05:57,280
then basically takes a constant seven
 

3651
01:05:57,280 --> 01:05:59,029
then basically takes a constant seven
and one adds them up and sticks it in a

3652
01:05:59,029 --> 01:05:59,039
and one adds them up and sticks it in a
 

3653
01:05:59,039 --> 01:05:59,910
and one adds them up and sticks it in a
zero

3654
01:05:59,910 --> 01:05:59,920
zero
 

3655
01:05:59,920 --> 01:06:01,270
zero
right so examples towards the seven

3656
01:06:01,270 --> 01:06:01,280
right so examples towards the seven
 

3657
01:06:01,280 --> 01:06:03,109
right so examples towards the seven
meter and then it executes the next

3658
01:06:03,109 --> 01:06:03,119
meter and then it executes the next
 

3659
01:06:03,119 --> 01:06:04,470
meter and then it executes the next
instruction and it keeps going keeps

3660
01:06:04,470 --> 01:06:04,480
instruction and it keeps going keeps
 

3661
01:06:04,480 --> 01:06:05,750
instruction and it keeps going keeps
going

3662
01:06:05,750 --> 01:06:05,760
going
 

3663
01:06:05,760 --> 01:06:07,750
going
in addition to basically emulating or

3664
01:06:07,750 --> 01:06:07,760
in addition to basically emulating or
 

3665
01:06:07,760 --> 01:06:09,270
in addition to basically emulating or
correctly all the improv

3666
01:06:09,270 --> 01:06:09,280
correctly all the improv
 

3667
01:06:09,280 --> 01:06:11,349
correctly all the improv
privilege instructions it also emulates

3668
01:06:11,349 --> 01:06:11,359
privilege instructions it also emulates
 

3669
01:06:11,359 --> 01:06:13,349
privilege instructions it also emulates
all the privilege instructions

3670
01:06:13,349 --> 01:06:13,359
all the privilege instructions
 

3671
01:06:13,359 --> 01:06:15,670
all the privilege instructions
so that is in essence uh what key mu

3672
01:06:15,670 --> 01:06:15,680
so that is in essence uh what key mu
 

3673
01:06:15,680 --> 01:06:16,470
so that is in essence uh what key mu
does

3674
01:06:16,470 --> 01:06:16,480
does
 

3675
01:06:16,480 --> 01:06:18,470
does
uh and but the best picture for you to

3676
01:06:18,470 --> 01:06:18,480
uh and but the best picture for you to
 

3677
01:06:18,480 --> 01:06:19,589
uh and but the best picture for you to
have in your head is that basically

3678
01:06:19,589 --> 01:06:19,599
have in your head is that basically
 

3679
01:06:19,599 --> 01:06:21,190
have in your head is that basically
you're running on a real physical risk

3680
01:06:21,190 --> 01:06:21,200
you're running on a real physical risk
 

3681
01:06:21,200 --> 01:06:22,549
you're running on a real physical risk
five processor

3682
01:06:22,549 --> 01:06:22,559
five processor
 

3683
01:06:22,559 --> 01:06:24,150
five processor
like the ones you have probably you know

3684
01:06:24,150 --> 01:06:24,160
like the ones you have probably you know
 

3685
01:06:24,160 --> 01:06:26,150
like the ones you have probably you know
many of you implemented one i think in

3686
01:06:26,150 --> 01:06:26,160
many of you implemented one i think in
 

3687
01:06:26,160 --> 01:06:30,230
many of you implemented one i think in
double o4

3688
01:06:30,230 --> 01:06:30,240

 

3689
01:06:30,240 --> 01:06:33,589

any questions about this um hi

3690
01:06:33,589 --> 01:06:33,599
any questions about this um hi
 

3691
01:06:33,599 --> 01:06:36,069
any questions about this um hi
yeah i was wondering if it does any

3692
01:06:36,069 --> 01:06:36,079
yeah i was wondering if it does any
 

3693
01:06:36,079 --> 01:06:37,349
yeah i was wondering if it does any
hardware tricks

3694
01:06:37,349 --> 01:06:37,359
hardware tricks
 

3695
01:06:37,359 --> 01:06:39,270
hardware tricks
so like overlapping instructions or

3696
01:06:39,270 --> 01:06:39,280
so like overlapping instructions or
 

3697
01:06:39,280 --> 01:06:41,029
so like overlapping instructions or
anything

3698
01:06:41,029 --> 01:06:41,039
anything
 

3699
01:06:41,039 --> 01:06:44,309
anything
uh no uh it runs on a real processor

3700
01:06:44,309 --> 01:06:44,319
uh no uh it runs on a real processor
 

3701
01:06:44,319 --> 01:06:46,470
uh no uh it runs on a real processor
below it correct so when you run qmu

3702
01:06:46,470 --> 01:06:46,480
below it correct so when you run qmu
 

3703
01:06:46,480 --> 01:06:49,190
below it correct so when you run qmu
and runs probably on an x86 processor

3704
01:06:49,190 --> 01:06:49,200
and runs probably on an x86 processor
 

3705
01:06:49,200 --> 01:06:50,549
and runs probably on an x86 processor
that x86 processor

3706
01:06:50,549 --> 01:06:50,559
that x86 processor
 

3707
01:06:50,559 --> 01:06:52,150
that x86 processor
does all kinds of tricks you know to

3708
01:06:52,150 --> 01:06:52,160
does all kinds of tricks you know to
 

3709
01:06:52,160 --> 01:06:53,670
does all kinds of tricks you know to
pipeline instructions and things like

3710
01:06:53,670 --> 01:06:53,680
pipeline instructions and things like
 

3711
01:06:53,680 --> 01:06:54,150
pipeline instructions and things like
that

3712
01:06:54,150 --> 01:06:54,160
that
 

3713
01:06:54,160 --> 01:06:56,069
that
right so the way you think about qmu

3714
01:06:56,069 --> 01:06:56,079
right so the way you think about qmu
 

3715
01:06:56,079 --> 01:07:00,470
right so the way you think about qmu
it's just a c program

3716
01:07:00,470 --> 01:07:00,480
it's just a c program
 

3717
01:07:00,480 --> 01:07:08,309
it's just a c program
makes sense thank you

3718
01:07:08,309 --> 01:07:08,319

 

3719
01:07:08,319 --> 01:07:11,430

what about multi-threading so if the the

3720
01:07:11,430 --> 01:07:11,440
what about multi-threading so if the the
 

3721
01:07:11,440 --> 01:07:12,150
what about multi-threading so if the the
cmu

3722
01:07:12,150 --> 01:07:12,160
cmu
 

3723
01:07:12,160 --> 01:07:14,390
cmu
supports you said four cores or does it

3724
01:07:14,390 --> 01:07:14,400
supports you said four cores or does it
 

3725
01:07:14,400 --> 01:07:15,589
supports you said four cores or does it
only support one

3726
01:07:15,589 --> 01:07:15,599
only support one
 

3727
01:07:15,599 --> 01:07:17,589
only support one
and it is if that case does it have

3728
01:07:17,589 --> 01:07:17,599
and it is if that case does it have
 

3729
01:07:17,599 --> 01:07:19,990
and it is if that case does it have
actually multiple threads running it

3730
01:07:19,990 --> 01:07:20,000
actually multiple threads running it
 

3731
01:07:20,000 --> 01:07:22,309
actually multiple threads running it
yeah so uh actually the qmu that we use

3732
01:07:22,309 --> 01:07:22,319
yeah so uh actually the qmu that we use
 

3733
01:07:22,319 --> 01:07:23,029
yeah so uh actually the qmu that we use
on uh

3734
01:07:23,029 --> 01:07:23,039
on uh
 

3735
01:07:23,039 --> 01:07:24,470
on uh
athena and probably the ones that you

3736
01:07:24,470 --> 01:07:24,480
athena and probably the ones that you
 

3737
01:07:24,480 --> 01:07:26,309
athena and probably the ones that you
actually download uh

3738
01:07:26,309 --> 01:07:26,319
actually download uh
 

3739
01:07:26,319 --> 01:07:28,470
actually download uh
they will use multiple threads

3740
01:07:28,470 --> 01:07:28,480
they will use multiple threads
 

3741
01:07:28,480 --> 01:07:30,309
they will use multiple threads
internally so kim you internally use it

3742
01:07:30,309 --> 01:07:30,319
internally so kim you internally use it
 

3743
01:07:30,319 --> 01:07:31,270
internally so kim you internally use it
to get parallelism

3744
01:07:31,270 --> 01:07:31,280
to get parallelism
 

3745
01:07:31,280 --> 01:07:34,309
to get parallelism
so in fact these four cores that are

3746
01:07:34,309 --> 01:07:34,319
so in fact these four cores that are
 

3747
01:07:34,319 --> 01:07:35,670
so in fact these four cores that are
being emulated are sort of being

3748
01:07:35,670 --> 01:07:35,680
being emulated are sort of being
 

3749
01:07:35,680 --> 01:07:39,990
being emulated are sort of being
emulated in parallel

3750
01:07:39,990 --> 01:07:40,000

 

3751
01:07:40,000 --> 01:07:41,349

and we'll see that in one of the labs

3752
01:07:41,349 --> 01:07:41,359
and we'll see that in one of the labs
 

3753
01:07:41,359 --> 01:07:44,390
and we'll see that in one of the labs
later how that plays out

3754
01:07:44,390 --> 01:07:44,400
later how that plays out
 

3755
01:07:44,400 --> 01:07:45,910
later how that plays out
and so definitely there's a real

3756
01:07:45,910 --> 01:07:45,920
and so definitely there's a real
 

3757
01:07:45,920 --> 01:07:47,270
and so definitely there's a real
parallelism going on between the

3758
01:07:47,270 --> 01:07:47,280
parallelism going on between the
 

3759
01:07:47,280 --> 01:07:54,150
parallelism going on between the
different cores

3760
01:07:54,150 --> 01:07:54,160

 

3761
01:07:54,160 --> 01:07:58,309

okay so i'm gonna do a little bit of uh

3762
01:07:58,309 --> 01:07:58,319
okay so i'm gonna do a little bit of uh
 

3763
01:07:58,319 --> 01:08:01,430
okay so i'm gonna do a little bit of uh
uh you know walking through uh

3764
01:08:01,430 --> 01:08:01,440
uh you know walking through uh
 

3765
01:08:01,440 --> 01:08:03,349
uh you know walking through uh
uh xv6 to get a little bit of sense what

3766
01:08:03,349 --> 01:08:03,359
uh xv6 to get a little bit of sense what
 

3767
01:08:03,359 --> 01:08:05,109
uh xv6 to get a little bit of sense what
the layout of the land is

3768
01:08:05,109 --> 01:08:05,119
the layout of the land is
 

3769
01:08:05,119 --> 01:08:06,710
the layout of the land is
uh and you know in the later lecture

3770
01:08:06,710 --> 01:08:06,720
uh and you know in the later lecture
 

3771
01:08:06,720 --> 01:08:09,029
uh and you know in the later lecture
again we're gonna go in much more detail

3772
01:08:09,029 --> 01:08:09,039
again we're gonna go in much more detail
 

3773
01:08:09,039 --> 01:08:12,309
again we're gonna go in much more detail
so i'm gonna fire up uh qmu under uh

3774
01:08:12,309 --> 01:08:12,319
so i'm gonna fire up uh qmu under uh
 

3775
01:08:12,319 --> 01:08:15,029
so i'm gonna fire up uh qmu under uh
uh with gdp support so basically qmu has

3776
01:08:15,029 --> 01:08:15,039
uh with gdp support so basically qmu has
 

3777
01:08:15,039 --> 01:08:17,510
uh with gdp support so basically qmu has
inside of it a gdp server

3778
01:08:17,510 --> 01:08:17,520
inside of it a gdp server
 

3779
01:08:17,520 --> 01:08:19,910
inside of it a gdp server
um and so it starts it up and then it

3780
01:08:19,910 --> 01:08:19,920
um and so it starts it up and then it
 

3781
01:08:19,920 --> 01:08:21,430
um and so it starts it up and then it
just waits you know for

3782
01:08:21,430 --> 01:08:21,440
just waits you know for
 

3783
01:08:21,440 --> 01:08:24,870
just waits you know for
uh gdp to connect to that

3784
01:08:24,870 --> 01:08:24,880
uh gdp to connect to that
 

3785
01:08:24,880 --> 01:08:26,309
uh gdp to connect to that
so i'm going to start here on my

3786
01:08:26,309 --> 01:08:26,319
so i'm going to start here on my
 

3787
01:08:26,319 --> 01:08:28,870
so i'm going to start here on my
computer and this is a risc 64 linux new

3788
01:08:28,870 --> 01:08:28,880
computer and this is a risc 64 linux new
 

3789
01:08:28,880 --> 01:08:29,990
computer and this is a risc 64 linux new
gdb

3790
01:08:29,990 --> 01:08:30,000
gdb
 

3791
01:08:30,000 --> 01:08:31,829
gdb
on some of your machines it might be

3792
01:08:31,829 --> 01:08:31,839
on some of your machines it might be
 

3793
01:08:31,839 --> 01:08:33,110
on some of your machines it might be
multi-arch or

3794
01:08:33,110 --> 01:08:33,120
multi-arch or
 

3795
01:08:33,120 --> 01:08:35,430
multi-arch or
something else but basically the gdp

3796
01:08:35,430 --> 01:08:35,440
something else but basically the gdp
 

3797
01:08:35,440 --> 01:08:37,030
something else but basically the gdp
compiled for risk 64.

3798
01:08:37,030 --> 01:08:37,040
compiled for risk 64.
 

3799
01:08:37,040 --> 01:08:40,950
compiled for risk 64.
risk 564. and

3800
01:08:40,950 --> 01:08:40,960
risk 564. and
 

3801
01:08:40,960 --> 01:08:43,030
risk 564. and
i'm going to set the breakpoint at entry

3802
01:08:43,030 --> 01:08:43,040
i'm going to set the breakpoint at entry
 

3803
01:08:43,040 --> 01:08:44,229
i'm going to set the breakpoint at entry
because that's the first

3804
01:08:44,229 --> 01:08:44,239
because that's the first
 

3805
01:08:44,239 --> 01:08:45,510
because that's the first
we know that's roughly the first

3806
01:08:45,510 --> 01:08:45,520
we know that's roughly the first
 

3807
01:08:45,520 --> 01:08:48,070
we know that's roughly the first
instruction that actually where team

3808
01:08:48,070 --> 01:08:48,080
instruction that actually where team
 

3809
01:08:48,080 --> 01:08:50,390
instruction that actually where team
is going to jump to so i set the

3810
01:08:50,390 --> 01:08:50,400
is going to jump to so i set the
 

3811
01:08:50,400 --> 01:08:52,149
is going to jump to so i set the
breakpoint i run

3812
01:08:52,149 --> 01:08:52,159
breakpoint i run
 

3813
01:08:52,159 --> 01:08:54,229
breakpoint i run
and basically it doesn't actually break

3814
01:08:54,229 --> 01:08:54,239
and basically it doesn't actually break
 

3815
01:08:54,239 --> 01:08:56,229
and basically it doesn't actually break
exactly at eight zero zero zero but at

3816
01:08:56,229 --> 01:08:56,239
exactly at eight zero zero zero but at
 

3817
01:08:56,239 --> 01:08:57,269
exactly at eight zero zero zero but at
zero a

3818
01:08:57,269 --> 01:08:57,279
zero a
 

3819
01:08:57,279 --> 01:08:59,030
zero a
and if we look here on the right you

3820
01:08:59,030 --> 01:08:59,040
and if we look here on the right you
 

3821
01:08:59,040 --> 01:09:01,110
and if we look here on the right you
know we see that zero a is

3822
01:09:01,110 --> 01:09:01,120
know we see that zero a is
 

3823
01:09:01,120 --> 01:09:04,630
know we see that zero a is
uh right reading the control system

3824
01:09:04,630 --> 01:09:04,640
uh right reading the control system
 

3825
01:09:04,640 --> 01:09:05,590
uh right reading the control system
register

3826
01:09:05,590 --> 01:09:05,600
register
 

3827
01:09:05,600 --> 01:09:09,510
register
mr id and loading that value into a1

3828
01:09:09,510 --> 01:09:09,520
mr id and loading that value into a1
 

3829
01:09:09,520 --> 01:09:11,749
mr id and loading that value into a1
and so basically qmu simulates that

3830
01:09:11,749 --> 01:09:11,759
and so basically qmu simulates that
 

3831
01:09:11,759 --> 01:09:13,110
and so basically qmu simulates that
instruction then we can execute that

3832
01:09:13,110 --> 01:09:13,120
instruction then we can execute that
 

3833
01:09:13,120 --> 01:09:14,470
instruction then we can execute that
instruction then we go to the next

3834
01:09:14,470 --> 01:09:14,480
instruction then we go to the next
 

3835
01:09:14,480 --> 01:09:17,669
instruction then we go to the next
instruction

3836
01:09:17,669 --> 01:09:17,679

 

3837
01:09:17,679 --> 01:09:20,390

and basically this address address800 is

3838
01:09:20,390 --> 01:09:20,400
and basically this address address800 is
 

3839
01:09:20,400 --> 01:09:21,829
and basically this address address800 is
just basically something that was

3840
01:09:21,829 --> 01:09:21,839
just basically something that was
 

3841
01:09:21,839 --> 01:09:24,870
just basically something that was
agreed on you know uh

3842
01:09:24,870 --> 01:09:24,880
agreed on you know uh
 

3843
01:09:24,880 --> 01:09:27,749
agreed on you know uh
by qmu or commutal you know basically

3844
01:09:27,749 --> 01:09:27,759
by qmu or commutal you know basically
 

3845
01:09:27,759 --> 01:09:29,590
by qmu or commutal you know basically
says like you want to use qmu

3846
01:09:29,590 --> 01:09:29,600
says like you want to use qmu
 

3847
01:09:29,600 --> 01:09:30,630
says like you want to use qmu
the first instruction we're going to

3848
01:09:30,630 --> 01:09:30,640
the first instruction we're going to
 

3849
01:09:30,640 --> 01:09:33,030
the first instruction we're going to
jump to is at that particular location

3850
01:09:33,030 --> 01:09:33,040
jump to is at that particular location
 

3851
01:09:33,040 --> 01:09:36,309
jump to is at that particular location
and we basically arranged for the kernel

3852
01:09:36,309 --> 01:09:36,319
and we basically arranged for the kernel
 

3853
01:09:36,319 --> 01:09:38,229
and we basically arranged for the kernel
loader

3854
01:09:38,229 --> 01:09:38,239
loader
 

3855
01:09:38,239 --> 01:09:40,709
loader
to load the kernel of that program so

3856
01:09:40,709 --> 01:09:40,719
to load the kernel of that program so
 

3857
01:09:40,719 --> 01:09:42,630
to load the kernel of that program so
there's a file kernel ld

3858
01:09:42,630 --> 01:09:42,640
there's a file kernel ld
 

3859
01:09:42,640 --> 01:09:44,789
there's a file kernel ld
that basically specifies how the kernel

3860
01:09:44,789 --> 01:09:44,799
that basically specifies how the kernel
 

3861
01:09:44,799 --> 01:09:45,910
that basically specifies how the kernel
should be loaded

3862
01:09:45,910 --> 01:09:45,920
should be loaded
 

3863
01:09:45,920 --> 01:09:47,669
should be loaded
and you see here that basically the

3864
01:09:47,669 --> 01:09:47,679
and you see here that basically the
 

3865
01:09:47,679 --> 01:09:49,510
and you see here that basically the
first address that the kernel is going

3866
01:09:49,510 --> 01:09:49,520
first address that the kernel is going
 

3867
01:09:49,520 --> 01:09:50,950
first address that the kernel is going
to use is actually that particular

3868
01:09:50,950 --> 01:09:50,960
to use is actually that particular
 

3869
01:09:50,960 --> 01:09:54,070
to use is actually that particular
address that basic pmu specified

3870
01:09:54,070 --> 01:09:54,080
address that basic pmu specified
 

3871
01:09:54,080 --> 01:09:58,070
address that basic pmu specified
this is how we get off the ground

3872
01:09:58,070 --> 01:09:58,080

 

3873
01:09:58,080 --> 01:10:04,790

let's make that does that make sense

3874
01:10:04,790 --> 01:10:04,800

 

3875
01:10:04,800 --> 01:10:07,669

okay um and we see also that here

3876
01:10:07,669 --> 01:10:07,679
okay um and we see also that here
 

3877
01:10:07,679 --> 01:10:08,470
okay um and we see also that here
actually gdp

3878
01:10:08,470 --> 01:10:08,480
actually gdp
 

3879
01:10:08,480 --> 01:10:10,149
actually gdp
shows the binary encoding of the

3880
01:10:10,149 --> 01:10:10,159
shows the binary encoding of the
 

3881
01:10:10,159 --> 01:10:11,590
shows the binary encoding of the
instructions

3882
01:10:11,590 --> 01:10:11,600
instructions
 

3883
01:10:11,600 --> 01:10:13,430
instructions
and so we see that basically i guess the

3884
01:10:13,430 --> 01:10:13,440
and so we see that basically i guess the
 

3885
01:10:13,440 --> 01:10:17,270
and so we see that basically i guess the
csrr is a

3886
01:10:17,270 --> 01:10:17,280
csrr is a
 

3887
01:10:17,280 --> 01:10:19,110
csrr is a
four by destruction and an eye is a two

3888
01:10:19,110 --> 01:10:19,120
four by destruction and an eye is a two
 

3889
01:10:19,120 --> 01:10:22,070
four by destruction and an eye is a two
byte instruction

3890
01:10:22,070 --> 01:10:22,080

 

3891
01:10:22,080 --> 01:10:24,870

okay um so i'm going to see you know

3892
01:10:24,870 --> 01:10:24,880
okay um so i'm going to see you know
 

3893
01:10:24,880 --> 01:10:26,070
okay um so i'm going to see you know
basically so actually

3894
01:10:26,070 --> 01:10:26,080
basically so actually
 

3895
01:10:26,080 --> 01:10:29,270
basically so actually
six basically starts at entry.s uh and

3896
01:10:29,270 --> 01:10:29,280
six basically starts at entry.s uh and
 

3897
01:10:29,280 --> 01:10:31,189
six basically starts at entry.s uh and
we have no paging with no isolation and

3898
01:10:31,189 --> 01:10:31,199
we have no paging with no isolation and
 

3899
01:10:31,199 --> 01:10:33,189
we have no paging with no isolation and
in fact it starts in m mode

3900
01:10:33,189 --> 01:10:33,199
in fact it starts in m mode
 

3901
01:10:33,199 --> 01:10:35,590
in fact it starts in m mode
uh the exclusive jumps as quickly as

3902
01:10:35,590 --> 01:10:35,600
uh the exclusive jumps as quickly as
 

3903
01:10:35,600 --> 01:10:36,550
uh the exclusive jumps as quickly as
possible to

3904
01:10:36,550 --> 01:10:36,560
possible to
 

3905
01:10:36,560 --> 01:10:39,430
possible to
uh kernel mode or supervisor mode that's

3906
01:10:39,430 --> 01:10:39,440
uh kernel mode or supervisor mode that's
 

3907
01:10:39,440 --> 01:10:40,470
uh kernel mode or supervisor mode that's
called in risk five

3908
01:10:40,470 --> 01:10:40,480
called in risk five
 

3909
01:10:40,480 --> 01:10:41,990
called in risk five
i'm just going to set a breakpoint and

3910
01:10:41,990 --> 01:10:42,000
i'm just going to set a breakpoint and
 

3911
01:10:42,000 --> 01:10:43,750
i'm just going to set a breakpoint and
main uh which actually runs in

3912
01:10:43,750 --> 01:10:43,760
main uh which actually runs in
 

3913
01:10:43,760 --> 01:10:45,030
main uh which actually runs in
supervisor mode so i'm going to run

3914
01:10:45,030 --> 01:10:45,040
supervisor mode so i'm going to run
 

3915
01:10:45,040 --> 01:10:46,310
supervisor mode so i'm going to run
there

3916
01:10:46,310 --> 01:10:46,320
there
 

3917
01:10:46,320 --> 01:10:48,149
there
and then i get to the first instruction

3918
01:10:48,149 --> 01:10:48,159
and then i get to the first instruction
 

3919
01:10:48,159 --> 01:10:50,630
and then i get to the first instruction
of main so

3920
01:10:50,630 --> 01:10:50,640
of main so
 

3921
01:10:50,640 --> 01:10:53,830
of main so
let me show this here's main

3922
01:10:53,830 --> 01:10:53,840
let me show this here's main
 

3923
01:10:53,840 --> 01:10:57,189
let me show this here's main
and i'd like to run

3924
01:10:57,189 --> 01:10:57,199
and i'd like to run
 

3925
01:10:57,199 --> 01:11:01,910
and i'd like to run
gdb in this layout split mode

3926
01:11:01,910 --> 01:11:01,920

 

3927
01:11:01,920 --> 01:11:04,070

and so you can see in gdb actually and

3928
01:11:04,070 --> 01:11:04,080
and so you can see in gdb actually and
 

3929
01:11:04,080 --> 01:11:05,510
and so you can see in gdb actually and
what the next instruction is being

3930
01:11:05,510 --> 01:11:05,520
what the next instruction is being
 

3931
01:11:05,520 --> 01:11:06,870
what the next instruction is being
executed so you see there's a great

3932
01:11:06,870 --> 01:11:06,880
executed so you see there's a great
 

3933
01:11:06,880 --> 01:11:07,270
executed so you see there's a great
point

3934
01:11:07,270 --> 01:11:07,280
point
 

3935
01:11:07,280 --> 01:11:09,750
point
at that particular instruction since

3936
01:11:09,750 --> 01:11:09,760
at that particular instruction since
 

3937
01:11:09,760 --> 01:11:10,830
at that particular instruction since
this is a

3938
01:11:10,830 --> 01:11:10,840
this is a
 

3939
01:11:10,840 --> 01:11:14,229
this is a
wren uh qmu with one cpu

3940
01:11:14,229 --> 01:11:14,239
wren uh qmu with one cpu
 

3941
01:11:14,239 --> 01:11:15,910
wren uh qmu with one cpu
uh just makes it the gdp a little bit

3942
01:11:15,910 --> 01:11:15,920
uh just makes it the gdp a little bit
 

3943
01:11:15,920 --> 01:11:18,310
uh just makes it the gdp a little bit
easier so there's not only one core

3944
01:11:18,310 --> 01:11:18,320
easier so there's not only one core
 

3945
01:11:18,320 --> 01:11:21,110
easier so there's not only one core
active so commute emulates only one

3946
01:11:21,110 --> 01:11:21,120
active so commute emulates only one
 

3947
01:11:21,120 --> 01:11:22,149
active so commute emulates only one
single core

3948
01:11:22,149 --> 01:11:22,159
single core
 

3949
01:11:22,159 --> 01:11:25,030
single core
and i can step through that and so i can

3950
01:11:25,030 --> 01:11:25,040
and i can step through that and so i can
 

3951
01:11:25,040 --> 01:11:26,470
and i can step through that and so i can
go to the next instruction

3952
01:11:26,470 --> 01:11:26,480
go to the next instruction
 

3953
01:11:26,480 --> 01:11:27,990
go to the next instruction
and that is calls a function called

3954
01:11:27,990 --> 01:11:28,000
and that is calls a function called
 

3955
01:11:28,000 --> 01:11:30,229
and that is calls a function called
console init which does exactly what you

3956
01:11:30,229 --> 01:11:30,239
console init which does exactly what you
 

3957
01:11:30,239 --> 01:11:31,669
console init which does exactly what you
imagine it does it actually sets up the

3958
01:11:31,669 --> 01:11:31,679
imagine it does it actually sets up the
 

3959
01:11:31,679 --> 01:11:32,870
imagine it does it actually sets up the
console

3960
01:11:32,870 --> 01:11:32,880
console
 

3961
01:11:32,880 --> 01:11:34,709
console
and so once we set up the console we can

3962
01:11:34,709 --> 01:11:34,719
and so once we set up the console we can
 

3963
01:11:34,719 --> 01:11:36,149
and so once we set up the console we can
actually uh print to it

3964
01:11:36,149 --> 01:11:36,159
actually uh print to it
 

3965
01:11:36,159 --> 01:11:38,630
actually uh print to it
and so you'll see in a second we'll get

3966
01:11:38,630 --> 01:11:38,640
and so you'll see in a second we'll get
 

3967
01:11:38,640 --> 01:11:39,669
and so you'll see in a second we'll get
a new line

3968
01:11:39,669 --> 01:11:39,679
a new line
 

3969
01:11:39,679 --> 01:11:43,189
a new line
and we'll get xv6 booting okay so

3970
01:11:43,189 --> 01:11:43,199
and we'll get xv6 booting okay so
 

3971
01:11:43,199 --> 01:11:45,990
and we'll get xv6 booting okay so
there's a whole bunch of additional uh

3972
01:11:45,990 --> 01:11:46,000
there's a whole bunch of additional uh
 

3973
01:11:46,000 --> 01:11:48,550
there's a whole bunch of additional uh
code to set things up you know there's a

3974
01:11:48,550 --> 01:11:48,560
code to set things up you know there's a
 

3975
01:11:48,560 --> 01:11:50,310
code to set things up you know there's a
setting up the page allocator you know

3976
01:11:50,310 --> 01:11:50,320
setting up the page allocator you know
 

3977
01:11:50,320 --> 01:11:51,910
setting up the page allocator you know
setting up uh

3978
01:11:51,910 --> 01:11:51,920
setting up uh
 

3979
01:11:51,920 --> 01:11:53,350
setting up uh
virtual memory which i'll talk about on

3980
01:11:53,350 --> 01:11:53,360
virtual memory which i'll talk about on
 

3981
01:11:53,360 --> 01:11:55,350
virtual memory which i'll talk about on
wednesday loading actually starting

3982
01:11:55,350 --> 01:11:55,360
wednesday loading actually starting
 

3983
01:11:55,360 --> 01:11:56,870
wednesday loading actually starting
turning paging on which i also talked

3984
01:11:56,870 --> 01:11:56,880
turning paging on which i also talked
 

3985
01:11:56,880 --> 01:11:58,229
turning paging on which i also talked
about on wednesday

3986
01:11:58,229 --> 01:11:58,239
about on wednesday
 

3987
01:11:58,239 --> 01:12:00,709
about on wednesday
uh setting up the initial processes or

3988
01:12:00,709 --> 01:12:00,719
uh setting up the initial processes or
 

3989
01:12:00,719 --> 01:12:02,470
uh setting up the initial processes or
sending the process table

3990
01:12:02,470 --> 01:12:02,480
sending the process table
 

3991
01:12:02,480 --> 01:12:04,390
sending the process table
uh setting up code you know to do the

3992
01:12:04,390 --> 01:12:04,400
uh setting up code you know to do the
 

3993
01:12:04,400 --> 01:12:06,229
uh setting up code you know to do the
usual kernel transition

3994
01:12:06,229 --> 01:12:06,239
usual kernel transition
 

3995
01:12:06,239 --> 01:12:08,950
usual kernel transition
uh setting up the interrupt control the

3996
01:12:08,950 --> 01:12:08,960
uh setting up the interrupt control the
 

3997
01:12:08,960 --> 01:12:09,430
uh setting up the interrupt control the
click

3998
01:12:09,430 --> 01:12:09,440
click
 

3999
01:12:09,440 --> 01:12:11,110
click
uh we'll talk about when we talk about

4000
01:12:11,110 --> 01:12:11,120
uh we'll talk about when we talk about
 

4001
01:12:11,120 --> 01:12:12,470
uh we'll talk about when we talk about
interrupts but this is one like thing

4002
01:12:12,470 --> 01:12:12,480
interrupts but this is one like thing
 

4003
01:12:12,480 --> 01:12:13,270
interrupts but this is one like thing
that

4004
01:12:13,270 --> 01:12:13,280
that
 

4005
01:12:13,280 --> 01:12:15,270
that
uh we're going to be using to basically

4006
01:12:15,270 --> 01:12:15,280
uh we're going to be using to basically
 

4007
01:12:15,280 --> 01:12:17,430
uh we're going to be using to basically
talk to the disk or talk to the

4008
01:12:17,430 --> 01:12:17,440
talk to the disk or talk to the
 

4009
01:12:17,440 --> 01:12:19,830
talk to the disk or talk to the
console using interrupts uh sets up the

4010
01:12:19,830 --> 01:12:19,840
console using interrupts uh sets up the
 

4011
01:12:19,840 --> 01:12:21,030
console using interrupts uh sets up the
file system

4012
01:12:21,030 --> 01:12:21,040
file system
 

4013
01:12:21,040 --> 01:12:23,510
file system
allocates a buffer cache internet

4014
01:12:23,510 --> 01:12:23,520
allocates a buffer cache internet
 

4015
01:12:23,520 --> 01:12:24,229
allocates a buffer cache internet
emulation

4016
01:12:24,229 --> 01:12:24,239
emulation
 

4017
01:12:24,239 --> 01:12:26,390
emulation
initializes the inode cache initialize

4018
01:12:26,390 --> 01:12:26,400
initializes the inode cache initialize
 

4019
01:12:26,400 --> 01:12:28,950
initializes the inode cache initialize
the file system initializes the disk

4020
01:12:28,950 --> 01:12:28,960
the file system initializes the disk
 

4021
01:12:28,960 --> 01:12:31,030
the file system initializes the disk
and then basically once all sort of

4022
01:12:31,030 --> 01:12:31,040
and then basically once all sort of
 

4023
01:12:31,040 --> 01:12:32,390
and then basically once all sort of
things are set up you know when the

4024
01:12:32,390 --> 01:12:32,400
things are set up you know when the
 

4025
01:12:32,400 --> 01:12:33,590
things are set up you know when the
operating system is running

4026
01:12:33,590 --> 01:12:33,600
operating system is running
 

4027
01:12:33,600 --> 01:12:34,870
operating system is running
it's going to start running the first

4028
01:12:34,870 --> 01:12:34,880
it's going to start running the first
 

4029
01:12:34,880 --> 01:12:37,990
it's going to start running the first
process and this is the user in it

4030
01:12:37,990 --> 01:12:38,000
process and this is the user in it
 

4031
01:12:38,000 --> 01:12:39,669
process and this is the user in it
so this is a little bit of interesting

4032
01:12:39,669 --> 01:12:39,679
so this is a little bit of interesting
 

4033
01:12:39,679 --> 01:12:41,669
so this is a little bit of interesting
so i'm going to go to user init

4034
01:12:41,669 --> 01:12:41,679
so i'm going to go to user init
 

4035
01:12:41,679 --> 01:12:43,350
so i'm going to go to user init
for a second and i've got a single step

4036
01:12:43,350 --> 01:12:43,360
for a second and i've got a single step
 

4037
01:12:43,360 --> 01:12:46,229
for a second and i've got a single step
there

4038
01:12:46,229 --> 01:12:46,239

 

4039
01:12:46,239 --> 01:12:48,070

before continuing you know any questions

4040
01:12:48,070 --> 01:12:48,080
before continuing you know any questions
 

4041
01:12:48,080 --> 01:12:54,149
before continuing you know any questions
about this

4042
01:12:54,149 --> 01:12:54,159

 

4043
01:12:54,159 --> 01:12:56,390

is there a specific order in which the

4044
01:12:56,390 --> 01:12:56,400
is there a specific order in which the
 

4045
01:12:56,400 --> 01:12:58,470
is there a specific order in which the
setup functions need to be called

4046
01:12:58,470 --> 01:12:58,480
setup functions need to be called
 

4047
01:12:58,480 --> 01:13:01,750
setup functions need to be called
yes some function must be run after

4048
01:13:01,750 --> 01:13:01,760
yes some function must be run after
 

4049
01:13:01,760 --> 01:13:02,550
yes some function must be run after
other functions

4050
01:13:02,550 --> 01:13:02,560
other functions
 

4051
01:13:02,560 --> 01:13:05,430
other functions
and they're in particular in their some

4052
01:13:05,430 --> 01:13:05,440
and they're in particular in their some
 

4053
01:13:05,440 --> 01:13:06,709
and they're in particular in their some
of them doesn't matter but for you of

4054
01:13:06,709 --> 01:13:06,719
of them doesn't matter but for you of
 

4055
01:13:06,719 --> 01:13:07,990
of them doesn't matter but for you of
them yeah it's important that they run

4056
01:13:07,990 --> 01:13:08,000
them yeah it's important that they run
 

4057
01:13:08,000 --> 01:13:11,270
them yeah it's important that they run
after other ones

4058
01:13:11,270 --> 01:13:11,280

 

4059
01:13:11,280 --> 01:13:16,870

good point okay uh let me go to

4060
01:13:16,870 --> 01:13:16,880

 

4061
01:13:16,880 --> 01:13:19,669

uh so here's user in it and basically

4062
01:13:19,669 --> 01:13:19,679
uh so here's user in it and basically
 

4063
01:13:19,679 --> 01:13:21,030
uh so here's user in it and basically
user in it there's a little bit of

4064
01:13:21,030 --> 01:13:21,040
user in it there's a little bit of
 

4065
01:13:21,040 --> 01:13:23,189
user in it there's a little bit of
glue code or immunization code to sort

4066
01:13:23,189 --> 01:13:23,199
glue code or immunization code to sort
 

4067
01:13:23,199 --> 01:13:24,950
glue code or immunization code to sort
of take advantage of all the

4068
01:13:24,950 --> 01:13:24,960
of take advantage of all the
 

4069
01:13:24,960 --> 01:13:26,870
of take advantage of all the
general infrastructure that xv6 had to

4070
01:13:26,870 --> 01:13:26,880
general infrastructure that xv6 had to
 

4071
01:13:26,880 --> 01:13:28,229
general infrastructure that xv6 had to
basically get the first process of the

4072
01:13:28,229 --> 01:13:28,239
basically get the first process of the
 

4073
01:13:28,239 --> 01:13:29,590
basically get the first process of the
ground

4074
01:13:29,590 --> 01:13:29,600
ground
 

4075
01:13:29,600 --> 01:13:31,830
ground
you know x26 needs some image right we

4076
01:13:31,830 --> 01:13:31,840
you know x26 needs some image right we
 

4077
01:13:31,840 --> 01:13:34,229
you know x26 needs some image right we
can't run the file system really yet

4078
01:13:34,229 --> 01:13:34,239
can't run the file system really yet
 

4079
01:13:34,239 --> 01:13:37,750
can't run the file system really yet
or do exec and so the x36 needs sort of

4080
01:13:37,750 --> 01:13:37,760
or do exec and so the x36 needs sort of
 

4081
01:13:37,760 --> 01:13:39,110
or do exec and so the x36 needs sort of
a small little program to sort of get

4082
01:13:39,110 --> 01:13:39,120
a small little program to sort of get
 

4083
01:13:39,120 --> 01:13:39,830
a small little program to sort of get
off the ground

4084
01:13:39,830 --> 01:13:39,840
off the ground
 

4085
01:13:39,840 --> 01:13:43,030
off the ground
and that small little program is in its

4086
01:13:43,030 --> 01:13:43,040
and that small little program is in its
 

4087
01:13:43,040 --> 01:13:44,070
and that small little program is in its
code

4088
01:13:44,070 --> 01:13:44,080
code
 

4089
01:13:44,080 --> 01:13:45,669
code
and the binary version of that program

4090
01:13:45,669 --> 01:13:45,679
and the binary version of that program
 

4091
01:13:45,679 --> 01:13:47,750
and the binary version of that program
is actually linked or

4092
01:13:47,750 --> 01:13:47,760
is actually linked or
 

4093
01:13:47,760 --> 01:13:50,149
is actually linked or
declared statically into the kernel in

4094
01:13:50,149 --> 01:13:50,159
declared statically into the kernel in
 

4095
01:13:50,159 --> 01:13:54,229
declared statically into the kernel in
fact that code corresponds

4096
01:13:54,229 --> 01:13:54,239

 

4097
01:13:54,239 --> 01:14:00,229

to this particular user program

4098
01:14:00,229 --> 01:14:00,239
to this particular user program
 

4099
01:14:00,239 --> 01:14:02,390
to this particular user program
uh it's a but it's a little program

4100
01:14:02,390 --> 01:14:02,400
uh it's a but it's a little program
 

4101
01:14:02,400 --> 01:14:03,750
uh it's a but it's a little program
written in assembly

4102
01:14:03,750 --> 01:14:03,760
written in assembly
 

4103
01:14:03,760 --> 01:14:05,430
written in assembly
and basically it does it loads the

4104
01:14:05,430 --> 01:14:05,440
and basically it does it loads the
 

4105
01:14:05,440 --> 01:14:07,270
and basically it does it loads the
address within it into

4106
01:14:07,270 --> 01:14:07,280
address within it into
 

4107
01:14:07,280 --> 01:14:10,070
address within it into
a zero it draws the address of rv into

4108
01:14:10,070 --> 01:14:10,080
a zero it draws the address of rv into
 

4109
01:14:10,080 --> 01:14:11,030
a zero it draws the address of rv into
a1

4110
01:14:11,030 --> 01:14:11,040
a1
 

4111
01:14:11,040 --> 01:14:12,950
a1
and then it loads the number for this

4112
01:14:12,950 --> 01:14:12,960
and then it loads the number for this
 

4113
01:14:12,960 --> 01:14:14,870
and then it loads the number for this
exact system call into a7

4114
01:14:14,870 --> 01:14:14,880
exact system call into a7
 

4115
01:14:14,880 --> 01:14:18,390
exact system call into a7
and then look at here it calls e call

4116
01:14:18,390 --> 01:14:18,400
and then look at here it calls e call
 

4117
01:14:18,400 --> 01:14:19,830
and then look at here it calls e call
so basically what ina does is like

4118
01:14:19,830 --> 01:14:19,840
so basically what ina does is like
 

4119
01:14:19,840 --> 01:14:21,510
so basically what ina does is like
running three instructions

4120
01:14:21,510 --> 01:14:21,520
running three instructions
 

4121
01:14:21,520 --> 01:14:22,870
running three instructions
and then running the fourth instruction

4122
01:14:22,870 --> 01:14:22,880
and then running the fourth instruction
 

4123
01:14:22,880 --> 01:14:25,750
and then running the fourth instruction
to basically transfer back control to

4124
01:14:25,750 --> 01:14:25,760
to basically transfer back control to
 

4125
01:14:25,760 --> 01:14:30,149
to basically transfer back control to
the uh back control to the

4126
01:14:30,149 --> 01:14:30,159
the uh back control to the
 

4127
01:14:30,159 --> 01:14:31,830
the uh back control to the
operating system so for example if i set

4128
01:14:31,830 --> 01:14:31,840
operating system so for example if i set
 

4129
01:14:31,840 --> 01:14:33,669
operating system so for example if i set
a breakpoint in

4130
01:14:33,669 --> 01:14:33,679
a breakpoint in
 

4131
01:14:33,679 --> 01:14:36,550
a breakpoint in
syscall uh and i keep running then

4132
01:14:36,550 --> 01:14:36,560
syscall uh and i keep running then
 

4133
01:14:36,560 --> 01:14:37,590
syscall uh and i keep running then
basically you know

4134
01:14:37,590 --> 01:14:37,600
basically you know
 

4135
01:14:37,600 --> 01:14:40,310
basically you know
user init you know will create the

4136
01:14:40,310 --> 01:14:40,320
user init you know will create the
 

4137
01:14:40,320 --> 01:14:41,270
user init you know will create the
initial process

4138
01:14:41,270 --> 01:14:41,280
initial process
 

4139
01:14:41,280 --> 01:14:43,990
initial process
return to user space run these three

4140
01:14:43,990 --> 01:14:44,000
return to user space run these three
 

4141
01:14:44,000 --> 01:14:45,189
return to user space run these three
instructions

4142
01:14:45,189 --> 01:14:45,199
instructions
 

4143
01:14:45,199 --> 01:14:46,709
instructions
or four instructions and basically come

4144
01:14:46,709 --> 01:14:46,719
or four instructions and basically come
 

4145
01:14:46,719 --> 01:14:48,950
or four instructions and basically come
back into kernel space

4146
01:14:48,950 --> 01:14:48,960
back into kernel space
 

4147
01:14:48,960 --> 01:14:50,390
back into kernel space
so basically this is the first system

4148
01:14:50,390 --> 01:14:50,400
so basically this is the first system
 

4149
01:14:50,400 --> 01:14:52,229
so basically this is the first system
call that any user

4150
01:14:52,229 --> 01:14:52,239
call that any user
 

4151
01:14:52,239 --> 01:14:54,310
call that any user
application in xv6 runs so let's see

4152
01:14:54,310 --> 01:14:54,320
application in xv6 runs so let's see
 

4153
01:14:54,320 --> 01:14:56,950
application in xv6 runs so let's see
what happens if i'm right

4154
01:14:56,950 --> 01:14:56,960
what happens if i'm right
 

4155
01:14:56,960 --> 01:14:59,430
what happens if i'm right
so we're going to continue and we

4156
01:14:59,430 --> 01:14:59,440
so we're going to continue and we
 

4157
01:14:59,440 --> 01:15:01,110
so we're going to continue and we
actually got to syscall

4158
01:15:01,110 --> 01:15:01,120
actually got to syscall
 

4159
01:15:01,120 --> 01:15:04,630
actually got to syscall
so

4160
01:15:04,630 --> 01:15:04,640

 

4161
01:15:04,640 --> 01:15:06,950

so against this call we can look at it

4162
01:15:06,950 --> 01:15:06,960
so against this call we can look at it
 

4163
01:15:06,960 --> 01:15:09,270
so against this call we can look at it
it's a function at the bottom

4164
01:15:09,270 --> 01:15:09,280
it's a function at the bottom
 

4165
01:15:09,280 --> 01:15:11,750
it's a function at the bottom
and so we're back into kernel space now

4166
01:15:11,750 --> 01:15:11,760
and so we're back into kernel space now
 

4167
01:15:11,760 --> 01:15:13,510
and so we're back into kernel space now
and we can sort of walk through and see

4168
01:15:13,510 --> 01:15:13,520
and we can sort of walk through and see
 

4169
01:15:13,520 --> 01:15:14,950
and we can sort of walk through and see
actually what happens exactly

4170
01:15:14,950 --> 01:15:14,960
actually what happens exactly
 

4171
01:15:14,960 --> 01:15:17,990
actually what happens exactly
in syscall so i'm going to single step a

4172
01:15:17,990 --> 01:15:18,000
in syscall so i'm going to single step a
 

4173
01:15:18,000 --> 01:15:19,189
in syscall so i'm going to single step a
little bit

4174
01:15:19,189 --> 01:15:19,199
little bit
 

4175
01:15:19,199 --> 01:15:21,189
little bit
uh it looks about the current the

4176
01:15:21,189 --> 01:15:21,199
uh it looks about the current the
 

4177
01:15:21,199 --> 01:15:22,790
uh it looks about the current the
process is if it's in it you know

4178
01:15:22,790 --> 01:15:22,800
process is if it's in it you know
 

4179
01:15:22,800 --> 01:15:25,189
process is if it's in it you know
that pulls out the system call number

4180
01:15:25,189 --> 01:15:25,199
that pulls out the system call number
 

4181
01:15:25,199 --> 01:15:27,910
that pulls out the system call number
that's used so we can now print num

4182
01:15:27,910 --> 01:15:27,920
that's used so we can now print num
 

4183
01:15:27,920 --> 01:15:30,550
that's used so we can now print num
and we'll see it at seven and if we look

4184
01:15:30,550 --> 01:15:30,560
and we'll see it at seven and if we look
 

4185
01:15:30,560 --> 01:15:31,430
and we'll see it at seven and if we look
at

4186
01:15:31,430 --> 01:15:31,440
at
 

4187
01:15:31,440 --> 01:15:34,550
at
oops

4188
01:15:34,550 --> 01:15:34,560

 

4189
01:15:34,560 --> 01:15:38,550

user or kernel syscall.h

4190
01:15:38,550 --> 01:15:38,560
user or kernel syscall.h
 

4191
01:15:38,560 --> 01:15:40,070
user or kernel syscall.h
that declares all the system call

4192
01:15:40,070 --> 01:15:40,080
that declares all the system call
 

4193
01:15:40,080 --> 01:15:41,830
that declares all the system call
numbers and we see seven

4194
01:15:41,830 --> 01:15:41,840
numbers and we see seven
 

4195
01:15:41,840 --> 01:15:45,110
numbers and we see seven
that is indeed system called exec and so

4196
01:15:45,110 --> 01:15:45,120
that is indeed system called exec and so
 

4197
01:15:45,120 --> 01:15:46,630
that is indeed system called exec and so
basically this tells the kernel that you

4198
01:15:46,630 --> 01:15:46,640
basically this tells the kernel that you
 

4199
01:15:46,640 --> 01:15:46,870
basically this tells the kernel that you
know

4200
01:15:46,870 --> 01:15:46,880
know
 

4201
01:15:46,880 --> 01:15:49,830
know
some user application uh called an ecall

4202
01:15:49,830 --> 01:15:49,840
some user application uh called an ecall
 

4203
01:15:49,840 --> 01:15:50,550
some user application uh called an ecall
instruction

4204
01:15:50,550 --> 01:15:50,560
instruction
 

4205
01:15:50,560 --> 01:15:52,550
instruction
and with the intention of calling the

4206
01:15:52,550 --> 01:15:52,560
and with the intention of calling the
 

4207
01:15:52,560 --> 01:15:53,750
and with the intention of calling the
system call

4208
01:15:53,750 --> 01:15:53,760
system call
 

4209
01:15:53,760 --> 01:15:57,990
system call
for uh uh

4210
01:15:57,990 --> 01:15:58,000
for uh uh
 

4211
01:15:58,000 --> 01:15:59,270
for uh uh
with the intention of running the exact

4212
01:15:59,270 --> 01:15:59,280
with the intention of running the exact
 

4213
01:15:59,280 --> 01:16:01,830
with the intention of running the exact
system hall and so again we can single

4214
01:16:01,830 --> 01:16:01,840
system hall and so again we can single
 

4215
01:16:01,840 --> 01:16:03,030
system hall and so again we can single
step a little bit further

4216
01:16:03,030 --> 01:16:03,040
step a little bit further
 

4217
01:16:03,040 --> 01:16:04,870
step a little bit further
uh we go to the next thing this is the

4218
01:16:04,870 --> 01:16:04,880
uh we go to the next thing this is the
 

4219
01:16:04,880 --> 01:16:06,470
uh we go to the next thing this is the
line that executes the system call so

4220
01:16:06,470 --> 01:16:06,480
line that executes the system call so
 

4221
01:16:06,480 --> 01:16:07,669
line that executes the system call so
let's go there

4222
01:16:07,669 --> 01:16:07,679
let's go there
 

4223
01:16:07,679 --> 01:16:09,830
let's go there
and you see that basically the number is

4224
01:16:09,830 --> 01:16:09,840
and you see that basically the number is
 

4225
01:16:09,840 --> 01:16:11,750
and you see that basically the number is
used into index into an array

4226
01:16:11,750 --> 01:16:11,760
used into index into an array
 

4227
01:16:11,760 --> 01:16:13,110
used into index into an array
and the array has a bunch of function

4228
01:16:13,110 --> 01:16:13,120
and the array has a bunch of function
 

4229
01:16:13,120 --> 01:16:14,790
and the array has a bunch of function
pointers and

4230
01:16:14,790 --> 01:16:14,800
pointers and
 

4231
01:16:14,800 --> 01:16:17,590
pointers and
presumably the sys entry you know points

4232
01:16:17,590 --> 01:16:17,600
presumably the sys entry you know points
 

4233
01:16:17,600 --> 01:16:18,630
presumably the sys entry you know points
to the

4234
01:16:18,630 --> 01:16:18,640
to the
 

4235
01:16:18,640 --> 01:16:20,870
to the
sysex function so we're going to single

4236
01:16:20,870 --> 01:16:20,880
sysex function so we're going to single
 

4237
01:16:20,880 --> 01:16:22,950
sysex function so we're going to single
step into this

4238
01:16:22,950 --> 01:16:22,960
step into this
 

4239
01:16:22,960 --> 01:16:25,590
step into this
and we see that we're actually at the

4240
01:16:25,590 --> 01:16:25,600
and we see that we're actually at the
 

4241
01:16:25,600 --> 01:16:29,830
and we see that we're actually at the
system

4242
01:16:29,830 --> 01:16:29,840

 

4243
01:16:29,840 --> 01:16:33,510

so this is in sys file now we can move

4244
01:16:33,510 --> 01:16:33,520
so this is in sys file now we can move
 

4245
01:16:33,520 --> 01:16:34,870
so this is in sys file now we can move
it a little bit more

4246
01:16:34,870 --> 01:16:34,880
it a little bit more
 

4247
01:16:34,880 --> 01:16:38,310
it a little bit more
in a bigger window and we basically see

4248
01:16:38,310 --> 01:16:38,320
in a bigger window and we basically see
 

4249
01:16:38,320 --> 01:16:41,830
in a bigger window and we basically see
here the system call

4250
01:16:41,830 --> 01:16:41,840
here the system call
 

4251
01:16:41,840 --> 01:16:43,189
here the system call
and the first thing that you see is

4252
01:16:43,189 --> 01:16:43,199
and the first thing that you see is
 

4253
01:16:43,199 --> 01:16:45,110
and the first thing that you see is
actually it actually gets arguments from

4254
01:16:45,110 --> 01:16:45,120
actually it actually gets arguments from
 

4255
01:16:45,120 --> 01:16:47,669
actually it actually gets arguments from
user space so it gets the path name

4256
01:16:47,669 --> 01:16:47,679
user space so it gets the path name
 

4257
01:16:47,679 --> 01:16:50,950
user space so it gets the path name
so we can like jump a little bit further

4258
01:16:50,950 --> 01:16:50,960
so we can like jump a little bit further
 

4259
01:16:50,960 --> 01:16:57,110
so we can like jump a little bit further
uh mindsets

4260
01:16:57,110 --> 01:16:57,120

 

4261
01:16:57,120 --> 01:16:59,350

basically allocates space for arguments

4262
01:16:59,350 --> 01:16:59,360
basically allocates space for arguments
 

4263
01:16:59,360 --> 01:17:00,790
basically allocates space for arguments
you know copies all the arguments from

4264
01:17:00,790 --> 01:17:00,800
you know copies all the arguments from
 

4265
01:17:00,800 --> 01:17:02,310
you know copies all the arguments from
user space to kernel space

4266
01:17:02,310 --> 01:17:02,320
user space to kernel space
 

4267
01:17:02,320 --> 01:17:03,750
user space to kernel space
we'll look at that in great amount of

4268
01:17:03,750 --> 01:17:03,760
we'll look at that in great amount of
 

4269
01:17:03,760 --> 01:17:05,669
we'll look at that in great amount of
detail in a couple weeks so don't worry

4270
01:17:05,669 --> 01:17:05,679
detail in a couple weeks so don't worry
 

4271
01:17:05,679 --> 01:17:07,189
detail in a couple weeks so don't worry
about it too much yet

4272
01:17:07,189 --> 01:17:07,199
about it too much yet
 

4273
01:17:07,199 --> 01:17:09,590
about it too much yet
but basically there's some code to move

4274
01:17:09,590 --> 01:17:09,600
but basically there's some code to move
 

4275
01:17:09,600 --> 01:17:10,950
but basically there's some code to move
arguments from user space to kernel

4276
01:17:10,950 --> 01:17:10,960
arguments from user space to kernel
 

4277
01:17:10,960 --> 01:17:12,390
arguments from user space to kernel
space you know from the kernel

4278
01:17:12,390 --> 01:17:12,400
space you know from the kernel
 

4279
01:17:12,400 --> 01:17:13,590
space you know from the kernel
from the user address space to the

4280
01:17:13,590 --> 01:17:13,600
from the user address space to the
 

4281
01:17:13,600 --> 01:17:15,750
from the user address space to the
kernel address space and if we now look

4282
01:17:15,750 --> 01:17:15,760
kernel address space and if we now look
 

4283
01:17:15,760 --> 01:17:15,990
kernel address space and if we now look
at

4284
01:17:15,990 --> 01:17:16,000
at
 

4285
01:17:16,000 --> 01:17:18,790
at
path we can print the path hopefully and

4286
01:17:18,790 --> 01:17:18,800
path we can print the path hopefully and
 

4287
01:17:18,800 --> 01:17:20,790
path we can print the path hopefully and
we'll see actually that you know that is

4288
01:17:20,790 --> 01:17:20,800
we'll see actually that you know that is
 

4289
01:17:20,800 --> 01:17:21,669
we'll see actually that you know that is
a string

4290
01:17:21,669 --> 01:17:21,679
a string
 

4291
01:17:21,679 --> 01:17:24,229
a string
and we'll see that basically what that

4292
01:17:24,229 --> 01:17:24,239
and we'll see that basically what that
 

4293
01:17:24,239 --> 01:17:25,270
and we'll see that basically what that
little inner code

4294
01:17:25,270 --> 01:17:25,280
little inner code
 

4295
01:17:25,280 --> 01:17:27,990
little inner code
program does is trying to exec you know

4296
01:17:27,990 --> 01:17:28,000
program does is trying to exec you know
 

4297
01:17:28,000 --> 01:17:28,790
program does is trying to exec you know
the init

4298
01:17:28,790 --> 01:17:28,800
the init
 

4299
01:17:28,800 --> 01:17:31,110
the init
program which is yet another you know

4300
01:17:31,110 --> 01:17:31,120
program which is yet another you know
 

4301
01:17:31,120 --> 01:17:32,709
program which is yet another you know
program so let's look at that for a

4302
01:17:32,709 --> 01:17:32,719
program so let's look at that for a
 

4303
01:17:32,719 --> 01:17:34,310
program so let's look at that for a
second just to see

4304
01:17:34,310 --> 01:17:34,320
second just to see
 

4305
01:17:34,320 --> 01:17:38,070
second just to see
what that is

4306
01:17:38,070 --> 01:17:38,080

 

4307
01:17:38,080 --> 01:17:40,390

so here we have in it and in it

4308
01:17:40,390 --> 01:17:40,400
so here we have in it and in it
 

4309
01:17:40,400 --> 01:17:41,830
so here we have in it and in it
basically sets up a couple things

4310
01:17:41,830 --> 01:17:41,840
basically sets up a couple things
 

4311
01:17:41,840 --> 01:17:43,750
basically sets up a couple things
just for user space you know it opens to

4312
01:17:43,750 --> 01:17:43,760
just for user space you know it opens to
 

4313
01:17:43,760 --> 01:17:45,189
just for user space you know it opens to
console the file descriptor for the

4314
01:17:45,189 --> 01:17:45,199
console the file descriptor for the
 

4315
01:17:45,199 --> 01:17:46,470
console the file descriptor for the
console it dubs it

4316
01:17:46,470 --> 01:17:46,480
console it dubs it
 

4317
01:17:46,480 --> 01:17:49,830
console it dubs it
you know a couple times calls fork and

4318
01:17:49,830 --> 01:17:49,840
you know a couple times calls fork and
 

4319
01:17:49,840 --> 01:17:51,110
you know a couple times calls fork and
basically the first thing it does is

4320
01:17:51,110 --> 01:17:51,120
basically the first thing it does is
 

4321
01:17:51,120 --> 01:17:52,950
basically the first thing it does is
actually it tries to create a new

4322
01:17:52,950 --> 01:17:52,960
actually it tries to create a new
 

4323
01:17:52,960 --> 01:17:53,910
actually it tries to create a new
process

4324
01:17:53,910 --> 01:17:53,920
process
 

4325
01:17:53,920 --> 01:17:56,709
process
and it will exit the jail shell and so

4326
01:17:56,709 --> 01:17:56,719
and it will exit the jail shell and so
 

4327
01:17:56,719 --> 01:17:57,590
and it will exit the jail shell and so
this will

4328
01:17:57,590 --> 01:17:57,600
this will
 

4329
01:17:57,600 --> 01:17:59,750
this will
in the end result uh as the shell being

4330
01:17:59,750 --> 01:17:59,760
in the end result uh as the shell being
 

4331
01:17:59,760 --> 01:18:00,870
in the end result uh as the shell being
run

4332
01:18:00,870 --> 01:18:00,880
run
 

4333
01:18:00,880 --> 01:18:02,550
run
so for example if i would continue i

4334
01:18:02,550 --> 01:18:02,560
so for example if i would continue i
 

4335
01:18:02,560 --> 01:18:04,390
so for example if i would continue i
probably break again it says exec and if

4336
01:18:04,390 --> 01:18:04,400
probably break again it says exec and if
 

4337
01:18:04,400 --> 01:18:06,070
probably break again it says exec and if
i look at the arguments i will see that

4338
01:18:06,070 --> 01:18:06,080
i look at the arguments i will see that
 

4339
01:18:06,080 --> 01:18:06,950
i look at the arguments i will see that
actually

4340
01:18:06,950 --> 01:18:06,960
actually
 

4341
01:18:06,960 --> 01:18:09,669
actually
the exact system call is being called to

4342
01:18:09,669 --> 01:18:09,679
the exact system call is being called to
 

4343
01:18:09,679 --> 01:18:10,310
the exact system call is being called to
execs

4344
01:18:10,310 --> 01:18:10,320
execs
 

4345
01:18:10,320 --> 01:18:12,709
execs
the shell and once you accept the shell

4346
01:18:12,709 --> 01:18:12,719
the shell and once you accept the shell
 

4347
01:18:12,719 --> 01:18:14,470
the shell and once you accept the shell
you know let's do that

4348
01:18:14,470 --> 01:18:14,480
you know let's do that
 

4349
01:18:14,480 --> 01:18:17,030
you know let's do that
then we'll do a couple more system calls

4350
01:18:17,030 --> 01:18:17,040
then we'll do a couple more system calls
 

4351
01:18:17,040 --> 01:18:21,430
then we'll do a couple more system calls
and at some point we'll see the

4352
01:18:21,430 --> 01:18:21,440

 

4353
01:18:21,440 --> 01:18:23,030

continue then basically the shell starts

4354
01:18:23,030 --> 01:18:23,040
continue then basically the shell starts
 

4355
01:18:23,040 --> 01:18:24,870
continue then basically the shell starts
running

4356
01:18:24,870 --> 01:18:24,880
running
 

4357
01:18:24,880 --> 01:18:26,550
running
so it gives you a little bit of a sense

4358
01:18:26,550 --> 01:18:26,560
so it gives you a little bit of a sense
 

4359
01:18:26,560 --> 01:18:28,630
so it gives you a little bit of a sense
you know actually how xv6 gets off the

4360
01:18:28,630 --> 01:18:28,640
you know actually how xv6 gets off the
 

4361
01:18:28,640 --> 01:18:29,430
you know actually how xv6 gets off the
ground

4362
01:18:29,430 --> 01:18:29,440
ground
 

4363
01:18:29,440 --> 01:18:31,590
ground
how the first shell actually has to run

4364
01:18:31,590 --> 01:18:31,600
how the first shell actually has to run
 

4365
01:18:31,600 --> 01:18:33,189
how the first shell actually has to run
and we saw the sort of

4366
01:18:33,189 --> 01:18:33,199
and we saw the sort of
 

4367
01:18:33,199 --> 01:18:34,790
and we saw the sort of
a little bit of an overview about how

4368
01:18:34,790 --> 01:18:34,800
a little bit of an overview about how
 

4369
01:18:34,800 --> 01:18:36,310
a little bit of an overview about how
the first you know when the first system

4370
01:18:36,310 --> 01:18:36,320
the first you know when the first system
 

4371
01:18:36,320 --> 01:18:38,149
the first you know when the first system
call actually happened

4372
01:18:38,149 --> 01:18:38,159
call actually happened
 

4373
01:18:38,159 --> 01:18:39,750
call actually happened
we haven't really looked at the detail

4374
01:18:39,750 --> 01:18:39,760
we haven't really looked at the detail
 

4375
01:18:39,760 --> 01:18:41,590
we haven't really looked at the detail
machinery for these system calls now how

4376
01:18:41,590 --> 01:18:41,600
machinery for these system calls now how
 

4377
01:18:41,600 --> 01:18:43,189
machinery for these system calls now how
to get in and out of the kernel

4378
01:18:43,189 --> 01:18:43,199
to get in and out of the kernel
 

4379
01:18:43,199 --> 01:18:44,310
to get in and out of the kernel
we're going to talk about that in a

4380
01:18:44,310 --> 01:18:44,320
we're going to talk about that in a
 

4381
01:18:44,320 --> 01:18:46,229
we're going to talk about that in a
couple weeks or two weeks in the in

4382
01:18:46,229 --> 01:18:46,239
couple weeks or two weeks in the in
 

4383
01:18:46,239 --> 01:18:47,910
couple weeks or two weeks in the in
lecture in great amount of detail

4384
01:18:47,910 --> 01:18:47,920
lecture in great amount of detail
 

4385
01:18:47,920 --> 01:18:49,669
lecture in great amount of detail
but this is sort of enough for you to

4386
01:18:49,669 --> 01:18:49,679
but this is sort of enough for you to
 

4387
01:18:49,679 --> 01:18:51,430
but this is sort of enough for you to
understand actually how to do the uh

4388
01:18:51,430 --> 01:18:51,440
understand actually how to do the uh
 

4389
01:18:51,440 --> 01:18:53,590
understand actually how to do the uh
cisco lab you know that we assigned for

4390
01:18:53,590 --> 01:18:53,600
cisco lab you know that we assigned for
 

4391
01:18:53,600 --> 01:18:55,110
cisco lab you know that we assigned for
this week

4392
01:18:55,110 --> 01:18:55,120
this week
 

4393
01:18:55,120 --> 01:18:56,470
this week
and so these are the pieces that you

4394
01:18:56,470 --> 01:18:56,480
and so these are the pieces that you
 

4395
01:18:56,480 --> 01:18:59,030
and so these are the pieces that you
will be interacting with

4396
01:18:59,030 --> 01:18:59,040
will be interacting with
 

4397
01:18:59,040 --> 01:19:01,189
will be interacting with
any questions before i wrap up because

4398
01:19:01,189 --> 01:19:01,199
any questions before i wrap up because
 

4399
01:19:01,199 --> 01:19:08,229
any questions before i wrap up because
we're almost out of time

4400
01:19:08,229 --> 01:19:08,239
we're almost out of time
 

4401
01:19:08,239 --> 01:19:15,590
we're almost out of time
you're free to fire away

4402
01:19:15,590 --> 01:19:15,600

 

4403
01:19:15,600 --> 01:19:18,630

are we going to do anything with uh

4404
01:19:18,630 --> 01:19:18,640
are we going to do anything with uh
 

4405
01:19:18,640 --> 01:19:22,070
are we going to do anything with uh
networks or like networking and labs yes

4406
01:19:22,070 --> 01:19:22,080
networks or like networking and labs yes
 

4407
01:19:22,080 --> 01:19:23,189
networks or like networking and labs yes
the last lap is

4408
01:19:23,189 --> 01:19:23,199
the last lap is
 

4409
01:19:23,199 --> 01:19:25,430
the last lap is
uh you will implement a network driver

4410
01:19:25,430 --> 01:19:25,440
uh you will implement a network driver
 

4411
01:19:25,440 --> 01:19:26,709
uh you will implement a network driver
and so you will write the code that

4412
01:19:26,709 --> 01:19:26,719
and so you will write the code that
 

4413
01:19:26,719 --> 01:19:28,149
and so you will write the code that
interacts with the hardware and you have

4414
01:19:28,149 --> 01:19:28,159
interacts with the hardware and you have
 

4415
01:19:28,159 --> 01:19:29,270
interacts with the hardware and you have
to manipulate the

4416
01:19:29,270 --> 01:19:29,280
to manipulate the
 

4417
01:19:29,280 --> 01:19:32,310
to manipulate the
the registers of the network driver

4418
01:19:32,310 --> 01:19:32,320
the registers of the network driver
 

4419
01:19:32,320 --> 01:19:35,189
the registers of the network driver
uh over the network cart that basically

4420
01:19:35,189 --> 01:19:35,199
uh over the network cart that basically
 

4421
01:19:35,199 --> 01:19:35,750
uh over the network cart that basically
connects

4422
01:19:35,750 --> 01:19:35,760
connects
 

4423
01:19:35,760 --> 01:19:37,430
connects
you know to this risk 5 board you know

4424
01:19:37,430 --> 01:19:37,440
you know to this risk 5 board you know
 

4425
01:19:37,440 --> 01:19:38,870
you know to this risk 5 board you know
you saw that it was a block

4426
01:19:38,870 --> 01:19:38,880
you saw that it was a block
 

4427
01:19:38,880 --> 01:19:40,950
you saw that it was a block
basically to plug in an ethernet control

4428
01:19:40,950 --> 01:19:40,960
basically to plug in an ethernet control
 

4429
01:19:40,960 --> 01:19:43,189
basically to plug in an ethernet control
cable and so there's an ethernet

4430
01:19:43,189 --> 01:19:43,199
cable and so there's an ethernet
 

4431
01:19:43,199 --> 01:19:45,030
cable and so there's an ethernet
card and so you're going to be

4432
01:19:45,030 --> 01:19:45,040
card and so you're going to be
 

4433
01:19:45,040 --> 01:19:46,229
card and so you're going to be
programming that card and you're going

4434
01:19:46,229 --> 01:19:46,239
programming that card and you're going
 

4435
01:19:46,239 --> 01:19:46,870
programming that card and you're going
to

4436
01:19:46,870 --> 01:19:46,880
to
 

4437
01:19:46,880 --> 01:19:48,830
to
actually send some packets across the

4438
01:19:48,830 --> 01:19:48,840
actually send some packets across the
 

4439
01:19:48,840 --> 01:19:51,669
actually send some packets across the
internet

4440
01:19:51,669 --> 01:19:51,679
internet
 

4441
01:19:51,679 --> 01:19:58,070
internet
great thanks yeah it's the last lap

4442
01:19:58,070 --> 01:19:58,080

 

4443
01:19:58,080 --> 01:20:04,149

any other questions

4444
01:20:04,149 --> 01:20:04,159
any other questions
 

4445
01:20:04,159 --> 01:20:05,990
any other questions
okay let me wrap up here i think the

4446
01:20:05,990 --> 01:20:06,000
okay let me wrap up here i think the
 

4447
01:20:06,000 --> 01:20:07,590
okay let me wrap up here i think the
system called lab itself

4448
01:20:07,590 --> 01:20:07,600
system called lab itself
 

4449
01:20:07,600 --> 01:20:10,149
system called lab itself
um because we're not really going great

4450
01:20:10,149 --> 01:20:10,159
um because we're not really going great
 

4451
01:20:10,159 --> 01:20:11,110
um because we're not really going great
amount of detail

4452
01:20:11,110 --> 01:20:11,120
amount of detail
 

4453
01:20:11,120 --> 01:20:12,709
amount of detail
hopefully shouldn't be too bad uh might

4454
01:20:12,709 --> 01:20:12,719
hopefully shouldn't be too bad uh might
 

4455
01:20:12,719 --> 01:20:14,870
hopefully shouldn't be too bad uh might
be easier than the util app

4456
01:20:14,870 --> 01:20:14,880
be easier than the util app
 

4457
01:20:14,880 --> 01:20:17,270
be easier than the util app
uh the last next lap however might be

4458
01:20:17,270 --> 01:20:17,280
uh the last next lap however might be
 

4459
01:20:17,280 --> 01:20:17,990
uh the last next lap however might be
more difficult

4460
01:20:17,990 --> 01:20:18,000
more difficult
 

4461
01:20:18,000 --> 01:20:19,430
more difficult
and so it's always hard to get all these

4462
01:20:19,430 --> 01:20:19,440
and so it's always hard to get all these
 

4463
01:20:19,440 --> 01:20:21,430
and so it's always hard to get all these
labs right but this is collab hopefully

4464
01:20:21,430 --> 01:20:21,440
labs right but this is collab hopefully
 

4465
01:20:21,440 --> 01:20:22,550
labs right but this is collab hopefully
it shouldn't be uh

4466
01:20:22,550 --> 01:20:22,560
it shouldn't be uh
 

4467
01:20:22,560 --> 01:20:24,709
it shouldn't be uh
too difficult but please don't start

4468
01:20:24,709 --> 01:20:24,719
too difficult but please don't start
 

4469
01:20:24,719 --> 01:20:26,310
too difficult but please don't start
don't wait until the night before you

4470
01:20:26,310 --> 01:20:26,320
don't wait until the night before you
 

4471
01:20:26,320 --> 01:20:27,590
don't wait until the night before you
know get going early

4472
01:20:27,590 --> 01:20:27,600
know get going early
 

4473
01:20:27,600 --> 01:20:28,950
know get going early
so that if you're running some obscure

4474
01:20:28,950 --> 01:20:28,960
so that if you're running some obscure
 

4475
01:20:28,960 --> 01:20:30,629
so that if you're running some obscure
bug that we can actually help you out

4476
01:20:30,629 --> 01:20:30,639
bug that we can actually help you out
 

4477
01:20:30,639 --> 01:20:32,070
bug that we can actually help you out
and make sure that

4478
01:20:32,070 --> 01:20:32,080
and make sure that
 

4479
01:20:32,080 --> 01:20:35,189
and make sure that
your program works in the end

4480
01:20:35,189 --> 01:20:35,199
your program works in the end
 

4481
01:20:35,199 --> 01:20:39,110
your program works in the end
with that i'll sign off and i'll see you

4482
01:20:39,110 --> 01:20:39,120
with that i'll sign off and i'll see you
 

4483
01:20:39,120 --> 01:20:47,840
with that i'll sign off and i'll see you
in wednesday

