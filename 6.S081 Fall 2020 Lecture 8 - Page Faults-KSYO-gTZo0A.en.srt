1
00:00:12,320 --> 00:00:12,870

okay

2
00:00:12,870 --> 00:00:12,880
okay
 

3
00:00:12,880 --> 00:00:18,950
okay
quick sound check can everybody hear me

4
00:00:18,950 --> 00:00:18,960

 

5
00:00:18,960 --> 00:00:22,470

yep okay good uh anyway let's

6
00:00:22,470 --> 00:00:22,480
yep okay good uh anyway let's
 

7
00:00:22,480 --> 00:00:25,429
yep okay good uh anyway let's
get let's get going um you know good

8
00:00:25,429 --> 00:00:25,439
get let's get going um you know good
 

9
00:00:25,439 --> 00:00:26,950
get let's get going um you know good
afternoon or good evening or good

10
00:00:26,950 --> 00:00:26,960
afternoon or good evening or good
 

11
00:00:26,960 --> 00:00:27,589
afternoon or good evening or good
morning

12
00:00:27,589 --> 00:00:27,599
morning
 

13
00:00:27,599 --> 00:00:30,070
morning
uh whatever good night wherever you are

14
00:00:30,070 --> 00:00:30,080
uh whatever good night wherever you are
 

15
00:00:30,080 --> 00:00:30,870
uh whatever good night wherever you are
uh

16
00:00:30,870 --> 00:00:30,880
uh
 

17
00:00:30,880 --> 00:00:32,630
uh
so today's lecture uh is going to be

18
00:00:32,630 --> 00:00:32,640
so today's lecture uh is going to be
 

19
00:00:32,640 --> 00:00:34,790
so today's lecture uh is going to be
about the page faults

20
00:00:34,790 --> 00:00:34,800
about the page faults
 

21
00:00:34,800 --> 00:00:38,310
about the page faults
and a particular uh we're gonna

22
00:00:38,310 --> 00:00:38,320
and a particular uh we're gonna
 

23
00:00:38,320 --> 00:00:39,860
and a particular uh we're gonna
uh the plan is to

24
00:00:39,860 --> 00:00:39,870
uh the plan is to
 

25
00:00:39,870 --> 00:00:41,910
uh the plan is to
[Music]

26
00:00:41,910 --> 00:00:41,920
[Music]
 

27
00:00:41,920 --> 00:00:46,069
[Music]
cover or implement

28
00:00:46,069 --> 00:00:46,079
cover or implement
 

29
00:00:46,079 --> 00:00:50,470
cover or implement
you know implement a number

30
00:00:50,470 --> 00:00:50,480

 

31
00:00:50,480 --> 00:00:53,990

virtual memory features

32
00:00:53,990 --> 00:00:54,000

 

33
00:00:54,000 --> 00:01:03,670

using page faults

34
00:01:03,670 --> 00:01:03,680

 

35
00:01:03,680 --> 00:01:05,670

um and the features that we're going to

36
00:01:05,670 --> 00:01:05,680
um and the features that we're going to
 

37
00:01:05,680 --> 00:01:07,750
um and the features that we're going to
be looking at are

38
00:01:07,750 --> 00:01:07,760
be looking at are
 

39
00:01:07,760 --> 00:01:10,870
be looking at are
lazy allocation which is the uh topic of

40
00:01:10,870 --> 00:01:10,880
lazy allocation which is the uh topic of
 

41
00:01:10,880 --> 00:01:12,950
lazy allocation which is the uh topic of
the next lab

42
00:01:12,950 --> 00:01:12,960
the next lab
 

43
00:01:12,960 --> 00:01:15,910
the next lab
um yeah we're going to look at the

44
00:01:15,910 --> 00:01:15,920
um yeah we're going to look at the
 

45
00:01:15,920 --> 00:01:16,789
um yeah we're going to look at the
demand

46
00:01:16,789 --> 00:01:16,799
demand
 

47
00:01:16,799 --> 00:01:20,789
demand
copy and write fork

48
00:01:20,789 --> 00:01:20,799

 

49
00:01:20,799 --> 00:01:27,350

demand paging

50
00:01:27,350 --> 00:01:27,360
demand paging
 

51
00:01:27,360 --> 00:01:32,550
demand paging
and memory map files or map

52
00:01:32,550 --> 00:01:32,560

 

53
00:01:32,560 --> 00:01:35,910

and almost

54
00:01:35,910 --> 00:01:35,920
and almost
 

55
00:01:35,920 --> 00:01:37,429
and almost
you know sort of a series operating

56
00:01:37,429 --> 00:01:37,439
you know sort of a series operating
 

57
00:01:37,439 --> 00:01:39,429
you know sort of a series operating
system actually implements all these

58
00:01:39,429 --> 00:01:39,439
system actually implements all these
 

59
00:01:39,439 --> 00:01:42,149
system actually implements all these
features so if you look inside of linux

60
00:01:42,149 --> 00:01:42,159
features so if you look inside of linux
 

61
00:01:42,159 --> 00:01:43,670
features so if you look inside of linux
you'll see all these features actually

62
00:01:43,670 --> 00:01:43,680
you'll see all these features actually
 

63
00:01:43,680 --> 00:01:44,069
you'll see all these features actually
uh

64
00:01:44,069 --> 00:01:44,079
uh
 

65
00:01:44,079 --> 00:01:47,030
uh
are implemented uh in xc6 as it stands

66
00:01:47,030 --> 00:01:47,040
are implemented uh in xc6 as it stands
 

67
00:01:47,040 --> 00:01:48,950
are implemented uh in xc6 as it stands
none of them are implemented

68
00:01:48,950 --> 00:01:48,960
none of them are implemented
 

69
00:01:48,960 --> 00:01:51,109
none of them are implemented
and uh and the fact that what a page

70
00:01:51,109 --> 00:01:51,119
and uh and the fact that what a page
 

71
00:01:51,119 --> 00:01:53,030
and uh and the fact that what a page
fault does in xc6

72
00:01:53,030 --> 00:01:53,040
fault does in xc6
 

73
00:01:53,040 --> 00:01:54,469
fault does in xc6
if the page vault happens in user phase

74
00:01:54,469 --> 00:01:54,479
if the page vault happens in user phase
 

75
00:01:54,479 --> 00:01:56,469
if the page vault happens in user phase
basis basically kill the process

76
00:01:56,469 --> 00:01:56,479
basis basically kill the process
 

77
00:01:56,479 --> 00:01:58,789
basis basically kill the process
but nothing interesting uh and so in

78
00:01:58,789 --> 00:01:58,799
but nothing interesting uh and so in
 

79
00:01:58,799 --> 00:01:59,910
but nothing interesting uh and so in
this lecture we're going to explore

80
00:01:59,910 --> 00:01:59,920
this lecture we're going to explore
 

81
00:01:59,920 --> 00:02:01,109
this lecture we're going to explore
again what interesting things you could

82
00:02:01,109 --> 00:02:01,119
again what interesting things you could
 

83
00:02:01,119 --> 00:02:03,190
again what interesting things you could
do in the page fault handler

84
00:02:03,190 --> 00:02:03,200
do in the page fault handler
 

85
00:02:03,200 --> 00:02:04,389
do in the page fault handler
to actually implement these three

86
00:02:04,389 --> 00:02:04,399
to actually implement these three
 

87
00:02:04,399 --> 00:02:06,389
to actually implement these three
features so this lecture is a little bit

88
00:02:06,389 --> 00:02:06,399
features so this lecture is a little bit
 

89
00:02:06,399 --> 00:02:07,270
features so this lecture is a little bit
less

90
00:02:07,270 --> 00:02:07,280
less
 

91
00:02:07,280 --> 00:02:09,510
less
walking through code and understanding

92
00:02:09,510 --> 00:02:09,520
walking through code and understanding
 

93
00:02:09,520 --> 00:02:10,710
walking through code and understanding
uh existing code

94
00:02:10,710 --> 00:02:10,720
uh existing code
 

95
00:02:10,720 --> 00:02:13,350
uh existing code
a little bit more design level uh in the

96
00:02:13,350 --> 00:02:13,360
a little bit more design level uh in the
 

97
00:02:13,360 --> 00:02:13,750
a little bit more design level uh in the
sense

98
00:02:13,750 --> 00:02:13,760
sense
 

99
00:02:13,760 --> 00:02:16,550
sense
we don't even have code to look at uh

100
00:02:16,550 --> 00:02:16,560
we don't even have code to look at uh
 

101
00:02:16,560 --> 00:02:17,589
we don't even have code to look at uh
another thing that's important to

102
00:02:17,589 --> 00:02:17,599
another thing that's important to
 

103
00:02:17,599 --> 00:02:19,030
another thing that's important to
mention is that lazy allocation is the

104
00:02:19,030 --> 00:02:19,040
mention is that lazy allocation is the
 

105
00:02:19,040 --> 00:02:20,390
mention is that lazy allocation is the
topic of the next lap and

106
00:02:20,390 --> 00:02:20,400
topic of the next lap and
 

107
00:02:20,400 --> 00:02:23,510
topic of the next lap and
hopefully it will push out today um and

108
00:02:23,510 --> 00:02:23,520
hopefully it will push out today um and
 

109
00:02:23,520 --> 00:02:26,150
hopefully it will push out today um and
copy and write fork it's going to be a

110
00:02:26,150 --> 00:02:26,160
copy and write fork it's going to be a
 

111
00:02:26,160 --> 00:02:27,750
copy and write fork it's going to be a
topic of one of the labs

112
00:02:27,750 --> 00:02:27,760
topic of one of the labs
 

113
00:02:27,760 --> 00:02:30,470
topic of one of the labs
and uh map is going to be another topic

114
00:02:30,470 --> 00:02:30,480
and uh map is going to be another topic
 

115
00:02:30,480 --> 00:02:32,550
and uh map is going to be another topic
of one of the subsequent labs

116
00:02:32,550 --> 00:02:32,560
of one of the subsequent labs
 

117
00:02:32,560 --> 00:02:34,150
of one of the subsequent labs
so this is going to you know this is one

118
00:02:34,150 --> 00:02:34,160
so this is going to you know this is one
 

119
00:02:34,160 --> 00:02:35,750
so this is going to you know this is one
of the interesting parts of an operating

120
00:02:35,750 --> 00:02:35,760
of the interesting parts of an operating
 

121
00:02:35,760 --> 00:02:36,550
of the interesting parts of an operating
system

122
00:02:36,550 --> 00:02:36,560
system
 

123
00:02:36,560 --> 00:02:37,830
system
and we're going to be spending quite a

124
00:02:37,830 --> 00:02:37,840
and we're going to be spending quite a
 

125
00:02:37,840 --> 00:02:41,110
and we're going to be spending quite a
bit of time on it in the labs

126
00:02:41,110 --> 00:02:41,120
bit of time on it in the labs
 

127
00:02:41,120 --> 00:02:43,910
bit of time on it in the labs
now you know before diving sort of into

128
00:02:43,910 --> 00:02:43,920
now you know before diving sort of into
 

129
00:02:43,920 --> 00:02:45,509
now you know before diving sort of into
details

130
00:02:45,509 --> 00:02:45,519
details
 

131
00:02:45,519 --> 00:02:48,790
details
it is probably helpful to take a little

132
00:02:48,790 --> 00:02:48,800
it is probably helpful to take a little
 

133
00:02:48,800 --> 00:02:49,430
it is probably helpful to take a little
bit of a

134
00:02:49,430 --> 00:02:49,440
bit of a
 

135
00:02:49,440 --> 00:02:51,910
bit of a
step back and so you can think about

136
00:02:51,910 --> 00:02:51,920
step back and so you can think about
 

137
00:02:51,920 --> 00:02:54,630
step back and so you can think about
virtual memory having

138
00:02:54,630 --> 00:02:54,640
virtual memory having
 

139
00:02:54,640 --> 00:03:02,470
virtual memory having
two major benefits

140
00:03:02,470 --> 00:03:02,480

 

141
00:03:02,480 --> 00:03:05,670

one is isolation so

142
00:03:05,670 --> 00:03:05,680
one is isolation so
 

143
00:03:05,680 --> 00:03:08,229
one is isolation so
isolation in the sense that uh virtual

144
00:03:08,229 --> 00:03:08,239
isolation in the sense that uh virtual
 

145
00:03:08,239 --> 00:03:09,910
isolation in the sense that uh virtual
memory allows the operating system to

146
00:03:09,910 --> 00:03:09,920
memory allows the operating system to
 

147
00:03:09,920 --> 00:03:11,589
memory allows the operating system to
give every application its own address

148
00:03:11,589 --> 00:03:11,599
give every application its own address
 

149
00:03:11,599 --> 00:03:12,070
give every application its own address
space

150
00:03:12,070 --> 00:03:12,080
space
 

151
00:03:12,080 --> 00:03:14,550
space
and so it's impossible for you know one

152
00:03:14,550 --> 00:03:14,560
and so it's impossible for you know one
 

153
00:03:14,560 --> 00:03:15,670
and so it's impossible for you know one
application to muck

154
00:03:15,670 --> 00:03:15,680
application to muck
 

155
00:03:15,680 --> 00:03:17,830
application to muck
you know or by accident or maliciously

156
00:03:17,830 --> 00:03:17,840
you know or by accident or maliciously
 

157
00:03:17,840 --> 00:03:20,149
you know or by accident or maliciously
to modify another application's address

158
00:03:20,149 --> 00:03:20,159
to modify another application's address
 

159
00:03:20,159 --> 00:03:21,030
to modify another application's address
space

160
00:03:21,030 --> 00:03:21,040
space
 

161
00:03:21,040 --> 00:03:22,630
space
uh it also provides isolation between

162
00:03:22,630 --> 00:03:22,640
uh it also provides isolation between
 

163
00:03:22,640 --> 00:03:24,309
uh it also provides isolation between
the user and kernel address space as we

164
00:03:24,309 --> 00:03:24,319
the user and kernel address space as we
 

165
00:03:24,319 --> 00:03:26,550
the user and kernel address space as we
talked about quite a bit and as you've

166
00:03:26,550 --> 00:03:26,560
talked about quite a bit and as you've
 

167
00:03:26,560 --> 00:03:29,110
talked about quite a bit and as you've
seen in the page table lab

168
00:03:29,110 --> 00:03:29,120
seen in the page table lab
 

169
00:03:29,120 --> 00:03:31,030
seen in the page table lab
but sort of another view or another

170
00:03:31,030 --> 00:03:31,040
but sort of another view or another
 

171
00:03:31,040 --> 00:03:32,869
but sort of another view or another
benefit

172
00:03:32,869 --> 00:03:32,879
benefit
 

173
00:03:32,879 --> 00:03:34,550
benefit
of you know virtual memory that you know

174
00:03:34,550 --> 00:03:34,560
of you know virtual memory that you know
 

175
00:03:34,560 --> 00:03:36,229
of you know virtual memory that you know
i alluded to a couple times

176
00:03:36,229 --> 00:03:36,239
i alluded to a couple times
 

177
00:03:36,239 --> 00:03:44,830
i alluded to a couple times
earlier is that it provides a level of

178
00:03:44,830 --> 00:03:44,840

 

179
00:03:44,840 --> 00:03:47,270

interaction

180
00:03:47,270 --> 00:03:47,280
interaction
 

181
00:03:47,280 --> 00:03:49,190
interaction
now the processor the instructions you

182
00:03:49,190 --> 00:03:49,200
now the processor the instructions you
 

183
00:03:49,200 --> 00:03:51,670
now the processor the instructions you
can all use virtual addresses

184
00:03:51,670 --> 00:03:51,680
can all use virtual addresses
 

185
00:03:51,680 --> 00:03:53,830
can all use virtual addresses
uh but the kernel gets to sort of define

186
00:03:53,830 --> 00:03:53,840
uh but the kernel gets to sort of define
 

187
00:03:53,840 --> 00:03:54,710
uh but the kernel gets to sort of define
the mapping

188
00:03:54,710 --> 00:03:54,720
the mapping
 

189
00:03:54,720 --> 00:03:56,710
the mapping
from virtual addresses to physical

190
00:03:56,710 --> 00:03:56,720
from virtual addresses to physical
 

191
00:03:56,720 --> 00:03:58,789
from virtual addresses to physical
addresses

192
00:03:58,789 --> 00:03:58,799
addresses
 

193
00:03:58,799 --> 00:04:01,589
addresses
and that allows all kinds of interesting

194
00:04:01,589 --> 00:04:01,599
and that allows all kinds of interesting
 

195
00:04:01,599 --> 00:04:02,550
and that allows all kinds of interesting
uh

196
00:04:02,550 --> 00:04:02,560
uh
 

197
00:04:02,560 --> 00:04:05,670
uh
uh interesting features

198
00:04:05,670 --> 00:04:05,680
uh interesting features
 

199
00:04:05,680 --> 00:04:06,869
uh interesting features
like the ones i'm going to be talking

200
00:04:06,869 --> 00:04:06,879
like the ones i'm going to be talking
 

201
00:04:06,879 --> 00:04:10,949
like the ones i'm going to be talking
about in the in this lecture um

202
00:04:10,949 --> 00:04:10,959

 

203
00:04:10,959 --> 00:04:24,790

the second

204
00:04:24,790 --> 00:04:24,800

 

205
00:04:24,800 --> 00:04:26,469

kernel has controls this particular

206
00:04:26,469 --> 00:04:26,479
kernel has controls this particular
 

207
00:04:26,479 --> 00:04:29,350
kernel has controls this particular
mapping from a virtual to

208
00:04:29,350 --> 00:04:29,360
mapping from a virtual to
 

209
00:04:29,360 --> 00:04:31,749
mapping from a virtual to
a physical address space and most so far

210
00:04:31,749 --> 00:04:31,759
a physical address space and most so far
 

211
00:04:31,759 --> 00:04:33,270
a physical address space and most so far
in excuses that mapping has to be

212
00:04:33,270 --> 00:04:33,280
in excuses that mapping has to be
 

213
00:04:33,280 --> 00:04:35,510
in excuses that mapping has to be
quite boring you know in fact in the

214
00:04:35,510 --> 00:04:35,520
quite boring you know in fact in the
 

215
00:04:35,520 --> 00:04:37,510
quite boring you know in fact in the
kernel it's mostly direct mapping

216
00:04:37,510 --> 00:04:37,520
kernel it's mostly direct mapping
 

217
00:04:37,520 --> 00:04:39,030
kernel it's mostly direct mapping
and a couple sort of interesting things

218
00:04:39,030 --> 00:04:39,040
and a couple sort of interesting things
 

219
00:04:39,040 --> 00:04:41,909
and a couple sort of interesting things
that we do with the x26 kernel does you

220
00:04:41,909 --> 00:04:41,919
that we do with the x26 kernel does you
 

221
00:04:41,919 --> 00:04:43,830
that we do with the x26 kernel does you
know with this mapping one as we've seen

222
00:04:43,830 --> 00:04:43,840
know with this mapping one as we've seen
 

223
00:04:43,840 --> 00:04:47,189
know with this mapping one as we've seen
is the trampoline page allowed the

224
00:04:47,189 --> 00:04:47,199
is the trampoline page allowed the
 

225
00:04:47,199 --> 00:04:48,390
is the trampoline page allowed the
kernel to map

226
00:04:48,390 --> 00:04:48,400
kernel to map
 

227
00:04:48,400 --> 00:04:50,710
kernel to map
one page into many address spaces

228
00:04:50,710 --> 00:04:50,720
one page into many address spaces
 

229
00:04:50,720 --> 00:04:52,310
one page into many address spaces
another interesting case that we have

230
00:04:52,310 --> 00:04:52,320
another interesting case that we have
 

231
00:04:52,320 --> 00:04:53,110
another interesting case that we have
seen

232
00:04:53,110 --> 00:04:53,120
seen
 

233
00:04:53,120 --> 00:04:56,629
seen
is the you know guard protect

234
00:04:56,629 --> 00:04:56,639
is the you know guard protect
 

235
00:04:56,639 --> 00:04:58,790
is the you know guard protect
the stack uh both in the kernel and both

236
00:04:58,790 --> 00:04:58,800
the stack uh both in the kernel and both
 

237
00:04:58,800 --> 00:05:01,029
the stack uh both in the kernel and both
and in kernel space both in user space

238
00:05:01,029 --> 00:05:01,039
and in kernel space both in user space
 

239
00:05:01,039 --> 00:05:02,950
and in kernel space both in user space
any kernel space

240
00:05:02,950 --> 00:05:02,960
any kernel space
 

241
00:05:02,960 --> 00:05:04,070
any kernel space
but if you sort of think about it you

242
00:05:04,070 --> 00:05:04,080
but if you sort of think about it you
 

243
00:05:04,080 --> 00:05:05,990
but if you sort of think about it you
know so far that mapping

244
00:05:05,990 --> 00:05:06,000
know so far that mapping
 

245
00:05:06,000 --> 00:05:08,070
know so far that mapping
you know has been relatively static you

246
00:05:08,070 --> 00:05:08,080
you know has been relatively static you
 

247
00:05:08,080 --> 00:05:09,029
you know has been relatively static you
know the

248
00:05:09,029 --> 00:05:09,039
know the
 

249
00:05:09,039 --> 00:05:11,189
know the
you we set it up once you know maybe per

250
00:05:11,189 --> 00:05:11,199
you we set it up once you know maybe per
 

251
00:05:11,199 --> 00:05:12,870
you we set it up once you know maybe per
user uh with the kernel page table

252
00:05:12,870 --> 00:05:12,880
user uh with the kernel page table
 

253
00:05:12,880 --> 00:05:14,710
user uh with the kernel page table
mapping we set up once in the beginning

254
00:05:14,710 --> 00:05:14,720
mapping we set up once in the beginning
 

255
00:05:14,720 --> 00:05:18,070
mapping we set up once in the beginning
and for processes once at fork and there

256
00:05:18,070 --> 00:05:18,080
and for processes once at fork and there
 

257
00:05:18,080 --> 00:05:18,469
and for processes once at fork and there
sort of

258
00:05:18,469 --> 00:05:18,479
sort of
 

259
00:05:18,479 --> 00:05:19,830
sort of
the kernel doesn't really do anything

260
00:05:19,830 --> 00:05:19,840
the kernel doesn't really do anything
 

261
00:05:19,840 --> 00:05:21,590
the kernel doesn't really do anything
else with this mapping

262
00:05:21,590 --> 00:05:21,600
else with this mapping
 

263
00:05:21,600 --> 00:05:24,710
else with this mapping
and what page fault gives us is actually

264
00:05:24,710 --> 00:05:24,720
and what page fault gives us is actually
 

265
00:05:24,720 --> 00:05:26,390
and what page fault gives us is actually
to make these mappings

266
00:05:26,390 --> 00:05:26,400
to make these mappings
 

267
00:05:26,400 --> 00:05:34,550
to make these mappings
dynamic so i'm using page faults

268
00:05:34,550 --> 00:05:34,560

 

269
00:05:34,560 --> 00:05:37,749

yeah we can change or the kernel can

270
00:05:37,749 --> 00:05:37,759
yeah we can change or the kernel can
 

271
00:05:37,759 --> 00:05:37,990
yeah we can change or the kernel can
change

272
00:05:37,990 --> 00:05:38,000
change
 

273
00:05:38,000 --> 00:05:45,430
change
the mapping

274
00:05:45,430 --> 00:05:45,440

 

275
00:05:45,440 --> 00:05:47,590

so dynamically on the fly and this turns

276
00:05:47,590 --> 00:05:47,600
so dynamically on the fly and this turns
 

277
00:05:47,600 --> 00:05:48,710
so dynamically on the fly and this turns
out to be an extra

278
00:05:48,710 --> 00:05:48,720
out to be an extra
 

279
00:05:48,720 --> 00:05:52,390
out to be an extra
extremely uh powerful uh

280
00:05:52,390 --> 00:05:52,400
extremely uh powerful uh
 

281
00:05:52,400 --> 00:05:55,110
extremely uh powerful uh
mechanism so if you can combine page

282
00:05:55,110 --> 00:05:55,120
mechanism so if you can combine page
 

283
00:05:55,120 --> 00:05:56,309
mechanism so if you can combine page
tables

284
00:05:56,309 --> 00:05:56,319
tables
 

285
00:05:56,319 --> 00:05:59,590
tables
and page faults uh you uh have an

286
00:05:59,590 --> 00:05:59,600
and page faults uh you uh have an
 

287
00:05:59,600 --> 00:06:00,390
and page faults uh you uh have an
enormous

288
00:06:00,390 --> 00:06:00,400
enormous
 

289
00:06:00,400 --> 00:06:01,749
enormous
the kernel has an enormous amount of

290
00:06:01,749 --> 00:06:01,759
the kernel has an enormous amount of
 

291
00:06:01,759 --> 00:06:04,230
the kernel has an enormous amount of
flexibility and the flexibility comes

292
00:06:04,230 --> 00:06:04,240
flexibility and the flexibility comes
 

293
00:06:04,240 --> 00:06:05,189
flexibility and the flexibility comes
down because you can

294
00:06:05,189 --> 00:06:05,199
down because you can
 

295
00:06:05,199 --> 00:06:07,350
down because you can
change this level of direction on on the

296
00:06:07,350 --> 00:06:07,360
change this level of direction on on the
 

297
00:06:07,360 --> 00:06:09,909
change this level of direction on on the
fly

298
00:06:09,909 --> 00:06:09,919

 

299
00:06:09,919 --> 00:06:11,830

and so what we're going to be doing is

300
00:06:11,830 --> 00:06:11,840
and so what we're going to be doing is
 

301
00:06:11,840 --> 00:06:13,749
and so what we're going to be doing is
basically looking at all kinds of

302
00:06:13,749 --> 00:06:13,759
basically looking at all kinds of
 

303
00:06:13,759 --> 00:06:17,590
basically looking at all kinds of
usages of this dynamic remapping or

304
00:06:17,590 --> 00:06:17,600
usages of this dynamic remapping or
 

305
00:06:17,600 --> 00:06:20,469
usages of this dynamic remapping or
dynamic changing of the page tables that

306
00:06:20,469 --> 00:06:20,479
dynamic changing of the page tables that
 

307
00:06:20,479 --> 00:06:21,590
dynamic changing of the page tables that
gives us

308
00:06:21,590 --> 00:06:21,600
gives us
 

309
00:06:21,600 --> 00:06:24,710
gives us
interesting features

310
00:06:24,710 --> 00:06:24,720

 

311
00:06:24,720 --> 00:06:26,390

um so the first thing we may want to

312
00:06:26,390 --> 00:06:26,400
um so the first thing we may want to
 

313
00:06:26,400 --> 00:06:28,070
um so the first thing we may want to
think about is a little bit

314
00:06:28,070 --> 00:06:28,080
think about is a little bit
 

315
00:06:28,080 --> 00:06:30,309
think about is a little bit
uh is you know what information is

316
00:06:30,309 --> 00:06:30,319
uh is you know what information is
 

317
00:06:30,319 --> 00:06:32,309
uh is you know what information is
needed you know so if you're in the

318
00:06:32,309 --> 00:06:32,319
needed you know so if you're in the
 

319
00:06:32,319 --> 00:06:35,670
needed you know so if you're in the
page vault happens um

320
00:06:35,670 --> 00:06:35,680
page vault happens um
 

321
00:06:35,680 --> 00:06:39,350
page vault happens um
and uh you know the kernel wants to

322
00:06:39,350 --> 00:06:39,360
and uh you know the kernel wants to
 

323
00:06:39,360 --> 00:06:41,029
and uh you know the kernel wants to
respond to this page fault you know what

324
00:06:41,029 --> 00:06:41,039
respond to this page fault you know what
 

325
00:06:41,039 --> 00:06:42,469
respond to this page fault you know what
you know information doesn't need

326
00:06:42,469 --> 00:06:42,479
you know information doesn't need
 

327
00:06:42,479 --> 00:06:45,590
you know information doesn't need
to actually be able to respond and you

328
00:06:45,590 --> 00:06:45,600
to actually be able to respond and you
 

329
00:06:45,600 --> 00:06:47,189
to actually be able to respond and you
know sort of quite

330
00:06:47,189 --> 00:06:47,199
know sort of quite
 

331
00:06:47,199 --> 00:06:48,710
know sort of quite
know obviously you know we'd like to

332
00:06:48,710 --> 00:06:48,720
know obviously you know we'd like to
 

333
00:06:48,720 --> 00:06:52,629
know obviously you know we'd like to
have the virtual dress

334
00:06:52,629 --> 00:06:52,639

 

335
00:06:52,639 --> 00:06:55,670

off uh the virtual address with

336
00:06:55,670 --> 00:06:55,680
off uh the virtual address with
 

337
00:06:55,680 --> 00:06:59,749
off uh the virtual address with
defaulting

338
00:06:59,749 --> 00:06:59,759

 

339
00:06:59,759 --> 00:07:03,270

uh or the cost of page fault

340
00:07:03,270 --> 00:07:03,280
uh or the cost of page fault
 

341
00:07:03,280 --> 00:07:06,390
uh or the cost of page fault
uh let me not say it actually i want to

342
00:07:06,390 --> 00:07:06,400
uh let me not say it actually i want to
 

343
00:07:06,400 --> 00:07:09,110
uh let me not say it actually i want to
say is

344
00:07:09,110 --> 00:07:09,120

 

345
00:07:09,120 --> 00:07:15,350

the folding virtual dress

346
00:07:15,350 --> 00:07:15,360

 

347
00:07:15,360 --> 00:07:16,950

and you know you've seen presumably some

348
00:07:16,950 --> 00:07:16,960
and you know you've seen presumably some
 

349
00:07:16,960 --> 00:07:18,790
and you know you've seen presumably some
of these panic uh calls in

350
00:07:18,790 --> 00:07:18,800
of these panic uh calls in
 

351
00:07:18,800 --> 00:07:21,270
of these panic uh calls in
your page fault lab uh and you know the

352
00:07:21,270 --> 00:07:21,280
your page fault lab uh and you know the
 

353
00:07:21,280 --> 00:07:23,110
your page fault lab uh and you know the
kernel actually has access to them

354
00:07:23,110 --> 00:07:23,120
kernel actually has access to them
 

355
00:07:23,120 --> 00:07:24,790
kernel actually has access to them
uh in fact it prints them out when

356
00:07:24,790 --> 00:07:24,800
uh in fact it prints them out when
 

357
00:07:24,800 --> 00:07:26,230
uh in fact it prints them out when
actually page fold happens

358
00:07:26,230 --> 00:07:26,240
actually page fold happens
 

359
00:07:26,240 --> 00:07:28,469
actually page fold happens
and uh you know it happens to be sitting

360
00:07:28,469 --> 00:07:28,479
and uh you know it happens to be sitting
 

361
00:07:28,479 --> 00:07:30,790
and uh you know it happens to be sitting
in the st

362
00:07:30,790 --> 00:07:30,800
in the st
 

363
00:07:30,800 --> 00:07:35,510
in the st
valley register

364
00:07:35,510 --> 00:07:35,520

 

365
00:07:35,520 --> 00:07:39,270

so when a user application

366
00:07:39,270 --> 00:07:39,280
so when a user application
 

367
00:07:39,280 --> 00:07:41,670
so when a user application
causes a paid fault the paid fall

368
00:07:41,670 --> 00:07:41,680
causes a paid fault the paid fall
 

369
00:07:41,680 --> 00:07:43,430
causes a paid fault the paid fall
basically invokes the same

370
00:07:43,430 --> 00:07:43,440
basically invokes the same
 

371
00:07:43,440 --> 00:07:45,909
basically invokes the same
track machinery that robert discussed in

372
00:07:45,909 --> 00:07:45,919
track machinery that robert discussed in
 

373
00:07:45,919 --> 00:07:47,189
track machinery that robert discussed in
the last lecture

374
00:07:47,189 --> 00:07:47,199
the last lecture
 

375
00:07:47,199 --> 00:07:49,830
the last lecture
it's almost completely identical but in

376
00:07:49,830 --> 00:07:49,840
it's almost completely identical but in
 

377
00:07:49,840 --> 00:07:51,430
it's almost completely identical but in
the case of a page fault it also will

378
00:07:51,430 --> 00:07:51,440
the case of a page fault it also will
 

379
00:07:51,440 --> 00:07:53,189
the case of a page fault it also will
put the defaulting address

380
00:07:53,189 --> 00:07:53,199
put the defaulting address
 

381
00:07:53,199 --> 00:07:57,270
put the defaulting address
into that st valve register

382
00:07:57,270 --> 00:07:57,280
into that st valve register
 

383
00:07:57,280 --> 00:07:59,189
into that st valve register
so that is uh one thing that we probably

384
00:07:59,189 --> 00:07:59,199
so that is uh one thing that we probably
 

385
00:07:59,199 --> 00:08:00,309
so that is uh one thing that we probably
want to know

386
00:08:00,309 --> 00:08:00,319
want to know
 

387
00:08:00,319 --> 00:08:01,350
want to know
the second thing that we probably want

388
00:08:01,350 --> 00:08:01,360
the second thing that we probably want
 

389
00:08:01,360 --> 00:08:11,589
the second thing that we probably want
to know is the type of default

390
00:08:11,589 --> 00:08:11,599

 

391
00:08:11,599 --> 00:08:14,070

uh because it may be in terms of uh uh

392
00:08:14,070 --> 00:08:14,080
uh because it may be in terms of uh uh
 

393
00:08:14,080 --> 00:08:14,950
uh because it may be in terms of uh uh
we may want to do

394
00:08:14,950 --> 00:08:14,960
we may want to do
 

395
00:08:14,960 --> 00:08:17,110
we may want to do
respond differently differently in terms

396
00:08:17,110 --> 00:08:17,120
respond differently differently in terms
 

397
00:08:17,120 --> 00:08:17,990
respond differently differently in terms
of to

398
00:08:17,990 --> 00:08:18,000
of to
 

399
00:08:18,000 --> 00:08:20,309
of to
uh a page fault due to a load

400
00:08:20,309 --> 00:08:20,319
uh a page fault due to a load
 

401
00:08:20,319 --> 00:08:21,110
uh a page fault due to a load
instruction

402
00:08:21,110 --> 00:08:21,120
instruction
 

403
00:08:21,120 --> 00:08:23,110
instruction
or a page filter due to store

404
00:08:23,110 --> 00:08:23,120
or a page filter due to store
 

405
00:08:23,120 --> 00:08:25,510
or a page filter due to store
instruction or page fall due to like a

406
00:08:25,510 --> 00:08:25,520
instruction or page fall due to like a
 

407
00:08:25,520 --> 00:08:26,790
instruction or page fall due to like a
jump instruction

408
00:08:26,790 --> 00:08:26,800
jump instruction
 

409
00:08:26,800 --> 00:08:29,830
jump instruction
um and so in fact you know if you look

410
00:08:29,830 --> 00:08:29,840
um and so in fact you know if you look
 

411
00:08:29,840 --> 00:08:31,110
um and so in fact you know if you look
in the risc 5

412
00:08:31,110 --> 00:08:31,120
in the risc 5
 

413
00:08:31,120 --> 00:08:34,469
in the risc 5
documentation um

414
00:08:34,469 --> 00:08:34,479
documentation um
 

415
00:08:34,479 --> 00:08:37,750
documentation um
here's the race 5 documentation in here

416
00:08:37,750 --> 00:08:37,760
here's the race 5 documentation in here
 

417
00:08:37,760 --> 00:08:40,230
here's the race 5 documentation in here
in the s-cause register that we was

418
00:08:40,230 --> 00:08:40,240
in the s-cause register that we was
 

419
00:08:40,240 --> 00:08:42,149
in the s-cause register that we was
mentioned in the track lecture

420
00:08:42,149 --> 00:08:42,159
mentioned in the track lecture
 

421
00:08:42,159 --> 00:08:47,509
mentioned in the track lecture
there are a number of uh

422
00:08:47,509 --> 00:08:47,519

 

423
00:08:47,519 --> 00:08:49,350

causes that actually related to page

424
00:08:49,350 --> 00:08:49,360
causes that actually related to page
 

425
00:08:49,360 --> 00:08:53,110
causes that actually related to page
faults so example if you look at

426
00:08:53,110 --> 00:08:53,120
faults so example if you look at
 

427
00:08:53,120 --> 00:08:56,949
faults so example if you look at
number 13 is a load page fault number 15

428
00:08:56,949 --> 00:08:56,959
number 13 is a load page fault number 15
 

429
00:08:56,959 --> 00:08:59,030
number 13 is a load page fault number 15
is the store page fault and the number

430
00:08:59,030 --> 00:08:59,040
is the store page fault and the number
 

431
00:08:59,040 --> 00:09:01,350
is the store page fault and the number
12 is in the instruction page fault

432
00:09:01,350 --> 00:09:01,360
12 is in the instruction page fault
 

433
00:09:01,360 --> 00:09:03,829
12 is in the instruction page fault
so these are the uh in the s cause

434
00:09:03,829 --> 00:09:03,839
so these are the uh in the s cause
 

435
00:09:03,839 --> 00:09:04,550
so these are the uh in the s cause
register

436
00:09:04,550 --> 00:09:04,560
register
 

437
00:09:04,560 --> 00:09:08,710
register
and we get that information

438
00:09:08,710 --> 00:09:08,720
and we get that information
 

439
00:09:08,720 --> 00:09:10,870
and we get that information
and so there's three different types you

440
00:09:10,870 --> 00:09:10,880
and so there's three different types you
 

441
00:09:10,880 --> 00:09:12,070
and so there's three different types you
know the read

442
00:09:12,070 --> 00:09:12,080
know the read
 

443
00:09:12,080 --> 00:09:16,710
know the read
write and uh instruction

444
00:09:16,710 --> 00:09:16,720
write and uh instruction
 

445
00:09:16,720 --> 00:09:19,910
write and uh instruction
and just going back you know the the one

446
00:09:19,910 --> 00:09:19,920
and just going back you know the the one
 

447
00:09:19,920 --> 00:09:23,670
and just going back you know the the one
uh s know that actually uh was caused by

448
00:09:23,670 --> 00:09:23,680
uh s know that actually uh was caused by
 

449
00:09:23,680 --> 00:09:25,670
uh s know that actually uh was caused by
uh the ecal instruction to do actually a

450
00:09:25,670 --> 00:09:25,680
uh the ecal instruction to do actually a
 

451
00:09:25,680 --> 00:09:26,710
uh the ecal instruction to do actually a
kernel transfer

452
00:09:26,710 --> 00:09:26,720
kernel transfer
 

453
00:09:26,720 --> 00:09:29,110
kernel transfer
is number eight right so that's the one

454
00:09:29,110 --> 00:09:29,120
is number eight right so that's the one
 

455
00:09:29,120 --> 00:09:30,070
is number eight right so that's the one
that we saw in

456
00:09:30,070 --> 00:09:30,080
that we saw in
 

457
00:09:30,080 --> 00:09:31,910
that we saw in
the trap lecture that we spent a lot of

458
00:09:31,910 --> 00:09:31,920
the trap lecture that we spent a lot of
 

459
00:09:31,920 --> 00:09:33,590
the trap lecture that we spent a lot of
time thinking about in the trap lecture

460
00:09:33,590 --> 00:09:33,600
time thinking about in the trap lecture
 

461
00:09:33,600 --> 00:09:35,590
time thinking about in the trap lecture
but basically all the other page faults

462
00:09:35,590 --> 00:09:35,600
but basically all the other page faults
 

463
00:09:35,600 --> 00:09:37,350
but basically all the other page faults
or exceptions

464
00:09:37,350 --> 00:09:37,360
or exceptions
 

465
00:09:37,360 --> 00:09:39,750
or exceptions
use the same you know mechanism to

466
00:09:39,750 --> 00:09:39,760
use the same you know mechanism to
 

467
00:09:39,760 --> 00:09:41,269
use the same you know mechanism to
transfer from user space to kernel

468
00:09:41,269 --> 00:09:41,279
transfer from user space to kernel
 

469
00:09:41,279 --> 00:09:41,829
transfer from user space to kernel
transfer

470
00:09:41,829 --> 00:09:41,839
transfer
 

471
00:09:41,839 --> 00:09:44,870
transfer
to kernel space and um

472
00:09:44,870 --> 00:09:44,880
to kernel space and um
 

473
00:09:44,880 --> 00:09:46,470
to kernel space and um
once given the kernel space in the case

474
00:09:46,470 --> 00:09:46,480
once given the kernel space in the case
 

475
00:09:46,480 --> 00:09:48,150
once given the kernel space in the case
of the page fault you know the std value

476
00:09:48,150 --> 00:09:48,160
of the page fault you know the std value
 

477
00:09:48,160 --> 00:09:49,190
of the page fault you know the std value
is

478
00:09:49,190 --> 00:09:49,200
is
 

479
00:09:49,200 --> 00:09:52,389
is
set yes cause register set then the

480
00:09:52,389 --> 00:09:52,399
set yes cause register set then the
 

481
00:09:52,399 --> 00:09:53,190
set yes cause register set then the
third thing

482
00:09:53,190 --> 00:09:53,200
third thing
 

483
00:09:53,200 --> 00:09:56,230
third thing
that we probably want to know is the

484
00:09:56,230 --> 00:09:56,240
that we probably want to know is the
 

485
00:09:56,240 --> 00:09:58,870
that we probably want to know is the
instruction

486
00:09:58,870 --> 00:09:58,880
instruction
 

487
00:09:58,880 --> 00:10:02,829
instruction
or to address the virtual address of the

488
00:10:02,829 --> 00:10:02,839
or to address the virtual address of the
 

489
00:10:02,839 --> 00:10:05,509
or to address the virtual address of the
instruction

490
00:10:05,509 --> 00:10:05,519
instruction
 

491
00:10:05,519 --> 00:10:14,870
instruction
that cost the page fault

492
00:10:14,870 --> 00:10:14,880

 

493
00:10:14,880 --> 00:10:17,509

and you know anybody remember where you

494
00:10:17,509 --> 00:10:17,519
and you know anybody remember where you
 

495
00:10:17,519 --> 00:10:19,190
and you know anybody remember where you
know from the trap lecture where that

496
00:10:19,190 --> 00:10:19,200
know from the trap lecture where that
 

497
00:10:19,200 --> 00:10:20,870
know from the trap lecture where that
where the instruction is where that

498
00:10:20,870 --> 00:10:20,880
where the instruction is where that
 

499
00:10:20,880 --> 00:10:25,190
where the instruction is where that
address is

500
00:10:25,190 --> 00:10:25,200

 

501
00:10:25,200 --> 00:10:28,550

anybody is it uh sepsi

502
00:10:28,550 --> 00:10:28,560
anybody is it uh sepsi
 

503
00:10:28,560 --> 00:10:32,069
anybody is it uh sepsi
yeah exactly and there was this regisepc

504
00:10:32,069 --> 00:10:32,079
yeah exactly and there was this regisepc
 

505
00:10:32,079 --> 00:10:34,069
yeah exactly and there was this regisepc
correct the supervisor exception

506
00:10:34,069 --> 00:10:34,079
correct the supervisor exception
 

507
00:10:34,079 --> 00:10:35,750
correct the supervisor exception
exception program counter

508
00:10:35,750 --> 00:10:35,760
exception program counter
 

509
00:10:35,760 --> 00:10:37,509
exception program counter
uh there is where it is and where is

510
00:10:37,509 --> 00:10:37,519
uh there is where it is and where is
 

511
00:10:37,519 --> 00:10:40,630
uh there is where it is and where is
that saved

512
00:10:40,630 --> 00:10:40,640

 

513
00:10:40,640 --> 00:10:44,949

as part of the trap handling code

514
00:10:44,949 --> 00:10:44,959

 

515
00:10:44,959 --> 00:10:46,870

in the trap frame yeah it ends up in the

516
00:10:46,870 --> 00:10:46,880
in the trap frame yeah it ends up in the
 

517
00:10:46,880 --> 00:10:49,110
in the trap frame yeah it ends up in the
trap frame correct there's a trap frame

518
00:10:49,110 --> 00:10:49,120
trap frame correct there's a trap frame
 

519
00:10:49,120 --> 00:10:52,550
trap frame correct there's a trap frame
epc actually has the exception program

520
00:10:52,550 --> 00:10:52,560
epc actually has the exception program
 

521
00:10:52,560 --> 00:10:53,990
epc actually has the exception program
camera

522
00:10:53,990 --> 00:10:54,000
camera
 

523
00:10:54,000 --> 00:10:55,430
camera
so we sort of think about the hardware

524
00:10:55,430 --> 00:10:55,440
so we sort of think about the hardware
 

525
00:10:55,440 --> 00:10:57,350
so we sort of think about the hardware
mechanism and what xv6 does

526
00:10:57,350 --> 00:10:57,360
mechanism and what xv6 does
 

527
00:10:57,360 --> 00:10:58,949
mechanism and what xv6 does
uh we have free piece of information

528
00:10:58,949 --> 00:10:58,959
uh we have free piece of information
 

529
00:10:58,959 --> 00:11:00,310
uh we have free piece of information
they're probably extremely valuable to

530
00:11:00,310 --> 00:11:00,320
they're probably extremely valuable to
 

531
00:11:00,320 --> 00:11:02,630
they're probably extremely valuable to
us when we get actually paid for namely

532
00:11:02,630 --> 00:11:02,640
us when we get actually paid for namely
 

533
00:11:02,640 --> 00:11:05,750
us when we get actually paid for namely
the the drastic cost default the type of

534
00:11:05,750 --> 00:11:05,760
the the drastic cost default the type of
 

535
00:11:05,760 --> 00:11:06,710
the the drastic cost default the type of
default

536
00:11:06,710 --> 00:11:06,720
default
 

537
00:11:06,720 --> 00:11:08,870
default
and the exception program counter like

538
00:11:08,870 --> 00:11:08,880
and the exception program counter like
 

539
00:11:08,880 --> 00:11:11,110
and the exception program counter like
where how did it happen in user space

540
00:11:11,110 --> 00:11:11,120
where how did it happen in user space
 

541
00:11:11,120 --> 00:11:12,389
where how did it happen in user space
and the reason that we care a lot about

542
00:11:12,389 --> 00:11:12,399
and the reason that we care a lot about
 

543
00:11:12,399 --> 00:11:13,910
and the reason that we care a lot about
the exception program counter correct is

544
00:11:13,910 --> 00:11:13,920
the exception program counter correct is
 

545
00:11:13,920 --> 00:11:14,550
the exception program counter correct is
because

546
00:11:14,550 --> 00:11:14,560
because
 

547
00:11:14,560 --> 00:11:16,550
because
uh when that we probably want to repair

548
00:11:16,550 --> 00:11:16,560
uh when that we probably want to repair
 

549
00:11:16,560 --> 00:11:17,670
uh when that we probably want to repair
you know in the handler we're going to

550
00:11:17,670 --> 00:11:17,680
you know in the handler we're going to
 

551
00:11:17,680 --> 00:11:18,150
you know in the handler we're going to
repair

552
00:11:18,150 --> 00:11:18,160
repair
 

553
00:11:18,160 --> 00:11:20,310
repair
the page table and then we're going to

554
00:11:20,310 --> 00:11:20,320
the page table and then we're going to
 

555
00:11:20,320 --> 00:11:22,470
the page table and then we're going to
basically restart the same instruction

556
00:11:22,470 --> 00:11:22,480
basically restart the same instruction
 

557
00:11:22,480 --> 00:11:24,230
basically restart the same instruction
and you know hopefully the after

558
00:11:24,230 --> 00:11:24,240
and you know hopefully the after
 

559
00:11:24,240 --> 00:11:25,750
and you know hopefully the after
repairing the page fault or

560
00:11:25,750 --> 00:11:25,760
repairing the page fault or
 

561
00:11:25,760 --> 00:11:27,110
repairing the page fault or
repairing the page tables that

562
00:11:27,110 --> 00:11:27,120
repairing the page tables that
 

563
00:11:27,120 --> 00:11:28,790
repairing the page tables that
instruction can just run without any

564
00:11:28,790 --> 00:11:28,800
instruction can just run without any
 

565
00:11:28,800 --> 00:11:29,430
instruction can just run without any
trouble

566
00:11:29,430 --> 00:11:29,440
trouble
 

567
00:11:29,440 --> 00:11:30,550
trouble
and so it's important that we can be

568
00:11:30,550 --> 00:11:30,560
and so it's important that we can be
 

569
00:11:30,560 --> 00:11:32,389
and so it's important that we can be
able to resume the instruction that

570
00:11:32,389 --> 00:11:32,399
able to resume the instruction that
 

571
00:11:32,399 --> 00:11:33,509
able to resume the instruction that
actually

572
00:11:33,509 --> 00:11:33,519
actually
 

573
00:11:33,519 --> 00:11:38,230
actually
that we that cost default

574
00:11:38,230 --> 00:11:38,240

 

575
00:11:38,240 --> 00:11:42,870

does that all make sense

576
00:11:42,870 --> 00:11:42,880
does that all make sense
 

577
00:11:42,880 --> 00:11:45,990
does that all make sense
okay um so now i want to look at

578
00:11:45,990 --> 00:11:46,000
okay um so now i want to look at
 

579
00:11:46,000 --> 00:11:47,590
okay um so now i want to look at
you know also the basic mechanism and

580
00:11:47,590 --> 00:11:47,600
you know also the basic mechanism and
 

581
00:11:47,600 --> 00:11:49,829
you know also the basic mechanism and
the basic information that the risk 5 is

582
00:11:49,829 --> 00:11:49,839
the basic information that the risk 5 is
 

583
00:11:49,839 --> 00:11:51,269
the basic information that the risk 5 is
actually giving us

584
00:11:51,269 --> 00:11:51,279
actually giving us
 

585
00:11:51,279 --> 00:11:54,790
actually giving us
and i want to look at a basically go

586
00:11:54,790 --> 00:11:54,800
and i want to look at a basically go
 

587
00:11:54,800 --> 00:11:56,710
and i want to look at a basically go
through a list of

588
00:11:56,710 --> 00:11:56,720
through a list of
 

589
00:11:56,720 --> 00:11:59,910
through a list of
uh you know features uh that will help

590
00:11:59,910 --> 00:11:59,920
uh you know features uh that will help
 

591
00:11:59,920 --> 00:12:00,710
uh you know features uh that will help
us you know

592
00:12:00,710 --> 00:12:00,720
us you know
 

593
00:12:00,720 --> 00:12:03,190
us you know
understand actually how we can uh use

594
00:12:03,190 --> 00:12:03,200
understand actually how we can uh use
 

595
00:12:03,200 --> 00:12:04,870
understand actually how we can uh use
the patrol handler to

596
00:12:04,870 --> 00:12:04,880
the patrol handler to
 

597
00:12:04,880 --> 00:12:08,550
the patrol handler to
uh repair the page table and

598
00:12:08,550 --> 00:12:08,560
uh repair the page table and
 

599
00:12:08,560 --> 00:12:10,870
uh repair the page table and
do interesting things so the first thing

600
00:12:10,870 --> 00:12:10,880
do interesting things so the first thing
 

601
00:12:10,880 --> 00:12:11,990
do interesting things so the first thing
i want to look at

602
00:12:11,990 --> 00:12:12,000
i want to look at
 

603
00:12:12,000 --> 00:12:17,190
i want to look at
is allocation

604
00:12:17,190 --> 00:12:17,200

 

605
00:12:17,200 --> 00:12:25,190

in particular you know s-break

606
00:12:25,190 --> 00:12:25,200
in particular you know s-break
 

607
00:12:25,200 --> 00:12:27,750
in particular you know s-break
so fast break is the system call that

608
00:12:27,750 --> 00:12:27,760
so fast break is the system call that
 

609
00:12:27,760 --> 00:12:29,269
so fast break is the system call that
xv6 provides

610
00:12:29,269 --> 00:12:29,279
xv6 provides
 

611
00:12:29,279 --> 00:12:31,910
xv6 provides
that uh allows an application to

612
00:12:31,910 --> 00:12:31,920
that uh allows an application to
 

613
00:12:31,920 --> 00:12:32,949
that uh allows an application to
basically grow

614
00:12:32,949 --> 00:12:32,959
basically grow
 

615
00:12:32,959 --> 00:12:34,470
basically grow
grow its heap right so when the

616
00:12:34,470 --> 00:12:34,480
grow its heap right so when the
 

617
00:12:34,480 --> 00:12:36,150
grow its heap right so when the
application uh

618
00:12:36,150 --> 00:12:36,160
application uh
 

619
00:12:36,160 --> 00:12:39,590
application uh
starts uh you know s break uh points

620
00:12:39,590 --> 00:12:39,600
starts uh you know s break uh points
 

621
00:12:39,600 --> 00:12:41,110
starts uh you know s break uh points
here

622
00:12:41,110 --> 00:12:41,120
here
 

623
00:12:41,120 --> 00:12:42,790
here
you know at the bottom of the heap you

624
00:12:42,790 --> 00:12:42,800
you know at the bottom of the heap you
 

625
00:12:42,800 --> 00:12:44,310
you know at the bottom of the heap you
know at the top of the stack

626
00:12:44,310 --> 00:12:44,320
know at the top of the stack
 

627
00:12:44,320 --> 00:12:45,829
know at the top of the stack
and in fact you know it's the same place

628
00:12:45,829 --> 00:12:45,839
and in fact you know it's the same place
 

629
00:12:45,839 --> 00:12:47,350
and in fact you know it's the same place
where you know p

630
00:12:47,350 --> 00:12:47,360
where you know p
 

631
00:12:47,360 --> 00:12:50,310
where you know p
size basically you know points to and so

632
00:12:50,310 --> 00:12:50,320
size basically you know points to and so
 

633
00:12:50,320 --> 00:12:52,389
size basically you know points to and so
when s break is called uh for example

634
00:12:52,389 --> 00:12:52,399
when s break is called uh for example
 

635
00:12:52,399 --> 00:12:54,069
when s break is called uh for example
aspect is called with like one two three

636
00:12:54,069 --> 00:12:54,079
aspect is called with like one two three
 

637
00:12:54,079 --> 00:12:55,430
aspect is called with like one two three
four five you know the number of pages

638
00:12:55,430 --> 00:12:55,440
four five you know the number of pages
 

639
00:12:55,440 --> 00:12:57,430
four five you know the number of pages
that you know you want to allocate

640
00:12:57,430 --> 00:12:57,440
that you know you want to allocate
 

641
00:12:57,440 --> 00:13:00,470
that you know you want to allocate
the uh aspect system call it basically

642
00:13:00,470 --> 00:13:00,480
the uh aspect system call it basically
 

643
00:13:00,480 --> 00:13:01,670
the uh aspect system call it basically
bumps up

644
00:13:01,670 --> 00:13:01,680
bumps up
 

645
00:13:01,680 --> 00:13:06,790
bumps up
you know this boundary

646
00:13:06,790 --> 00:13:06,800
you know this boundary
 

647
00:13:06,800 --> 00:13:09,829
you know this boundary
do something there and then that uh

648
00:13:09,829 --> 00:13:09,839
do something there and then that uh
 

649
00:13:09,839 --> 00:13:12,310
do something there and then that uh
and so what that means that when the s

650
00:13:12,310 --> 00:13:12,320
and so what that means that when the s
 

651
00:13:12,320 --> 00:13:13,509
and so what that means that when the s
break actually happens

652
00:13:13,509 --> 00:13:13,519
break actually happens
 

653
00:13:13,519 --> 00:13:15,509
break actually happens
or the aspect system call is called the

654
00:13:15,509 --> 00:13:15,519
or the aspect system call is called the
 

655
00:13:15,519 --> 00:13:16,870
or the aspect system call is called the
kernel will allocate some physical

656
00:13:16,870 --> 00:13:16,880
kernel will allocate some physical
 

657
00:13:16,880 --> 00:13:17,670
kernel will allocate some physical
memory

658
00:13:17,670 --> 00:13:17,680
memory
 

659
00:13:17,680 --> 00:13:20,790
memory
uh map it into the address space of

660
00:13:20,790 --> 00:13:20,800
uh map it into the address space of
 

661
00:13:20,800 --> 00:13:24,310
uh map it into the address space of
the user application uh zero the memory

662
00:13:24,310 --> 00:13:24,320
the user application uh zero the memory
 

663
00:13:24,320 --> 00:13:25,509
the user application uh zero the memory
and then basically return it from the

664
00:13:25,509 --> 00:13:25,519
and then basically return it from the
 

665
00:13:25,519 --> 00:13:28,150
and then basically return it from the
system call

666
00:13:28,150 --> 00:13:28,160

 

667
00:13:28,160 --> 00:13:30,470

and you know every time it's just and

668
00:13:30,470 --> 00:13:30,480
and you know every time it's just and
 

669
00:13:30,480 --> 00:13:31,829
and you know every time it's just and
the application can grow

670
00:13:31,829 --> 00:13:31,839
the application can grow
 

671
00:13:31,839 --> 00:13:34,069
the application can grow
you know that physical memory that or

672
00:13:34,069 --> 00:13:34,079
you know that physical memory that or
 

673
00:13:34,079 --> 00:13:35,350
you know that physical memory that or
memory that it needs

674
00:13:35,350 --> 00:13:35,360
memory that it needs
 

675
00:13:35,360 --> 00:13:37,750
memory that it needs
or it might want uh by just calling

676
00:13:37,750 --> 00:13:37,760
or it might want uh by just calling
 

677
00:13:37,760 --> 00:13:38,870
or it might want uh by just calling
multiple times to uh

678
00:13:38,870 --> 00:13:38,880
multiple times to uh
 

679
00:13:38,880 --> 00:13:41,030
multiple times to uh
s-brick uh the application can also

680
00:13:41,030 --> 00:13:41,040
s-brick uh the application can also
 

681
00:13:41,040 --> 00:13:42,230
s-brick uh the application can also
decrease or

682
00:13:42,230 --> 00:13:42,240
decrease or
 

683
00:13:42,240 --> 00:13:44,150
decrease or
shrink in its address phase by calling

684
00:13:44,150 --> 00:13:44,160
shrink in its address phase by calling
 

685
00:13:44,160 --> 00:13:46,710
shrink in its address phase by calling
estimate with a negative number

686
00:13:46,710 --> 00:13:46,720
estimate with a negative number
 

687
00:13:46,720 --> 00:13:48,069
estimate with a negative number
but i want to focus on the case where

688
00:13:48,069 --> 00:13:48,079
but i want to focus on the case where
 

689
00:13:48,079 --> 00:13:50,790
but i want to focus on the case where
we're growing uh the address space

690
00:13:50,790 --> 00:13:50,800
we're growing uh the address space
 

691
00:13:50,800 --> 00:13:54,150
we're growing uh the address space
and in xy6 as it is uh

692
00:13:54,150 --> 00:13:54,160
and in xy6 as it is uh
 

693
00:13:54,160 --> 00:13:57,350
and in xy6 as it is uh
the uh this break is eager

694
00:13:57,350 --> 00:13:57,360
the uh this break is eager
 

695
00:13:57,360 --> 00:13:59,189
the uh this break is eager
and or does what we're going to call

696
00:13:59,189 --> 00:13:59,199
and or does what we're going to call
 

697
00:13:59,199 --> 00:14:03,750
and or does what we're going to call
eager allocation

698
00:14:03,750 --> 00:14:03,760
eager allocation
 

699
00:14:03,760 --> 00:14:07,910
eager allocation
namely as soon as the uh

700
00:14:07,910 --> 00:14:07,920
namely as soon as the uh
 

701
00:14:07,920 --> 00:14:10,550
namely as soon as the uh
s-break is called the kernel will

702
00:14:10,550 --> 00:14:10,560
s-break is called the kernel will
 

703
00:14:10,560 --> 00:14:11,750
s-break is called the kernel will
immediately allocate

704
00:14:11,750 --> 00:14:11,760
immediately allocate
 

705
00:14:11,760 --> 00:14:13,829
immediately allocate
the physical memory that the application

706
00:14:13,829 --> 00:14:13,839
the physical memory that the application
 

707
00:14:13,839 --> 00:14:15,509
the physical memory that the application
is asking for

708
00:14:15,509 --> 00:14:15,519
is asking for
 

709
00:14:15,519 --> 00:14:17,350
is asking for
and now it turns out that in practice

710
00:14:17,350 --> 00:14:17,360
and now it turns out that in practice
 

711
00:14:17,360 --> 00:14:18,949
and now it turns out that in practice
it's actually hard for applications to

712
00:14:18,949 --> 00:14:18,959
it's actually hard for applications to
 

713
00:14:18,959 --> 00:14:20,069
it's actually hard for applications to
predict

714
00:14:20,069 --> 00:14:20,079
predict
 

715
00:14:20,079 --> 00:14:24,389
predict
uh how much memory they need so

716
00:14:24,389 --> 00:14:24,399
uh how much memory they need so
 

717
00:14:24,399 --> 00:14:28,790
uh how much memory they need so
typically applications

718
00:14:28,790 --> 00:14:28,800

 

719
00:14:28,800 --> 00:14:36,470

tend to over ask

720
00:14:36,470 --> 00:14:36,480

 

721
00:14:36,480 --> 00:14:37,910

and so they ask a lot more than they

722
00:14:37,910 --> 00:14:37,920
and so they ask a lot more than they
 

723
00:14:37,920 --> 00:14:39,990
and so they ask a lot more than they
really need uh and

724
00:14:39,990 --> 00:14:40,000
really need uh and
 

725
00:14:40,000 --> 00:14:42,629
really need uh and
uh often that will which means that

726
00:14:42,629 --> 00:14:42,639
uh often that will which means that
 

727
00:14:42,639 --> 00:14:44,470
uh often that will which means that
basically you know the address space uh

728
00:14:44,470 --> 00:14:44,480
basically you know the address space uh
 

729
00:14:44,480 --> 00:14:45,910
basically you know the address space uh
will grow quite a bit

730
00:14:45,910 --> 00:14:45,920
will grow quite a bit
 

731
00:14:45,920 --> 00:14:47,350
will grow quite a bit
uh even with memory that's actually

732
00:14:47,350 --> 00:14:47,360
uh even with memory that's actually
 

733
00:14:47,360 --> 00:14:49,509
uh even with memory that's actually
never used by the application

734
00:14:49,509 --> 00:14:49,519
never used by the application
 

735
00:14:49,519 --> 00:14:51,350
never used by the application
you might think like oh that's stupid uh

736
00:14:51,350 --> 00:14:51,360
you might think like oh that's stupid uh
 

737
00:14:51,360 --> 00:14:52,550
you might think like oh that's stupid uh
how could that happen

738
00:14:52,550 --> 00:14:52,560
how could that happen
 

739
00:14:52,560 --> 00:14:54,230
how could that happen
well you know think about like if you

740
00:14:54,230 --> 00:14:54,240
well you know think about like if you
 

741
00:14:54,240 --> 00:14:55,670
well you know think about like if you
write an application program

742
00:14:55,670 --> 00:14:55,680
write an application program
 

743
00:14:55,680 --> 00:14:58,550
write an application program
and uh the typical application program

744
00:14:58,550 --> 00:14:58,560
and uh the typical application program
 

745
00:14:58,560 --> 00:15:00,310
and uh the typical application program
maybe it read some input or you know it

746
00:15:00,310 --> 00:15:00,320
maybe it read some input or you know it
 

747
00:15:00,320 --> 00:15:01,670
maybe it read some input or you know it
has a matrix something that

748
00:15:01,670 --> 00:15:01,680
has a matrix something that
 

749
00:15:01,680 --> 00:15:04,790
has a matrix something that
uses for some computation um

750
00:15:04,790 --> 00:15:04,800
uses for some computation um
 

751
00:15:04,800 --> 00:15:06,310
uses for some computation um
and often the application writers sort

752
00:15:06,310 --> 00:15:06,320
and often the application writers sort
 

753
00:15:06,320 --> 00:15:08,870
and often the application writers sort
of plans for the worst case you know

754
00:15:08,870 --> 00:15:08,880
of plans for the worst case you know
 

755
00:15:08,880 --> 00:15:10,389
of plans for the worst case you know
it you know allocates memory for the

756
00:15:10,389 --> 00:15:10,399
it you know allocates memory for the
 

757
00:15:10,399 --> 00:15:11,590
it you know allocates memory for the
biggest matrix that you know the

758
00:15:11,590 --> 00:15:11,600
biggest matrix that you know the
 

759
00:15:11,600 --> 00:15:11,990
biggest matrix that you know the
application

760
00:15:11,990 --> 00:15:12,000
application
 

761
00:15:12,000 --> 00:15:14,790
application
might never ever need but in the common

762
00:15:14,790 --> 00:15:14,800
might never ever need but in the common
 

763
00:15:14,800 --> 00:15:15,350
might never ever need but in the common
case

764
00:15:15,350 --> 00:15:15,360
case
 

765
00:15:15,360 --> 00:15:16,870
case
the application may be computed with a

766
00:15:16,870 --> 00:15:16,880
the application may be computed with a
 

767
00:15:16,880 --> 00:15:18,790
the application may be computed with a
much smaller you know input or a much

768
00:15:18,790 --> 00:15:18,800
much smaller you know input or a much
 

769
00:15:18,800 --> 00:15:19,750
much smaller you know input or a much
smaller

770
00:15:19,750 --> 00:15:19,760
smaller
 

771
00:15:19,760 --> 00:15:23,670
smaller
matrix and so it's quite common

772
00:15:23,670 --> 00:15:23,680
matrix and so it's quite common
 

773
00:15:23,680 --> 00:15:25,269
matrix and so it's quite common
in fact for application programmers and

774
00:15:25,269 --> 00:15:25,279
in fact for application programmers and
 

775
00:15:25,279 --> 00:15:26,389
in fact for application programmers and
probably if you know you think about

776
00:15:26,389 --> 00:15:26,399
probably if you know you think about
 

777
00:15:26,399 --> 00:15:27,829
probably if you know you think about
your own application you've written

778
00:15:27,829 --> 00:15:27,839
your own application you've written
 

779
00:15:27,839 --> 00:15:30,629
your own application you've written
to actually over ask and actually under

780
00:15:30,629 --> 00:15:30,639
to actually over ask and actually under
 

781
00:15:30,639 --> 00:15:32,069
to actually over ask and actually under
use

782
00:15:32,069 --> 00:15:32,079
use
 

783
00:15:32,079 --> 00:15:35,189
use
uh and again we'd like to in principle

784
00:15:35,189 --> 00:15:35,199
uh and again we'd like to in principle
 

785
00:15:35,199 --> 00:15:35,829
uh and again we'd like to in principle
not a big

786
00:15:35,829 --> 00:15:35,839
not a big
 

787
00:15:35,839 --> 00:15:37,670
not a big
problem but you know using actually uh

788
00:15:37,670 --> 00:15:37,680
problem but you know using actually uh
 

789
00:15:37,680 --> 00:15:39,910
problem but you know using actually uh
virtual memory and page fault handlers

790
00:15:39,910 --> 00:15:39,920
virtual memory and page fault handlers
 

791
00:15:39,920 --> 00:15:42,230
virtual memory and page fault handlers
we can actually totally

792
00:15:42,230 --> 00:15:42,240
we can actually totally
 

793
00:15:42,240 --> 00:15:44,470
we can actually totally
totally respond to that in sort of an

794
00:15:44,470 --> 00:15:44,480
totally respond to that in sort of an
 

795
00:15:44,480 --> 00:15:46,790
totally respond to that in sort of an
intelligent manner

796
00:15:46,790 --> 00:15:46,800
intelligent manner
 

797
00:15:46,800 --> 00:15:59,110
intelligent manner
and by basically doing lazy allocation

798
00:15:59,110 --> 00:15:59,120

 

799
00:15:59,120 --> 00:16:02,230

and then the basic idea is very simple

800
00:16:02,230 --> 00:16:02,240
and then the basic idea is very simple
 

801
00:16:02,240 --> 00:16:06,310
and then the basic idea is very simple
and s break

802
00:16:06,310 --> 00:16:06,320

 

803
00:16:06,320 --> 00:16:07,590

we're basically going to do almost

804
00:16:07,590 --> 00:16:07,600
we're basically going to do almost
 

805
00:16:07,600 --> 00:16:09,269
we're basically going to do almost
nothing and the only thing that we need

806
00:16:09,269 --> 00:16:09,279
nothing and the only thing that we need
 

807
00:16:09,279 --> 00:16:10,870
nothing and the only thing that we need
to know remember is of course that we

808
00:16:10,870 --> 00:16:10,880
to know remember is of course that we
 

809
00:16:10,880 --> 00:16:12,389
to know remember is of course that we
did grow the address space so the only

810
00:16:12,389 --> 00:16:12,399
did grow the address space so the only
 

811
00:16:12,399 --> 00:16:13,269
did grow the address space so the only
thing really what we're going to be

812
00:16:13,269 --> 00:16:13,279
thing really what we're going to be
 

813
00:16:13,279 --> 00:16:13,749
thing really what we're going to be
doing

814
00:16:13,749 --> 00:16:13,759
doing
 

815
00:16:13,759 --> 00:16:18,150
doing
is actually bumping up you know p size

816
00:16:18,150 --> 00:16:18,160

 

817
00:16:18,160 --> 00:16:21,590

you know whatever with the number uh

818
00:16:21,590 --> 00:16:21,600
you know whatever with the number uh
 

819
00:16:21,600 --> 00:16:23,430
you know whatever with the number uh
you know set two sides to whatever the

820
00:16:23,430 --> 00:16:23,440
you know set two sides to whatever the
 

821
00:16:23,440 --> 00:16:25,509
you know set two sides to whatever the
new size plus you know n

822
00:16:25,509 --> 00:16:25,519
new size plus you know n
 

823
00:16:25,519 --> 00:16:26,790
new size plus you know n
and where n is the amount of memory

824
00:16:26,790 --> 00:16:26,800
and where n is the amount of memory
 

825
00:16:26,800 --> 00:16:28,949
and where n is the amount of memory
that's allocated and then

826
00:16:28,949 --> 00:16:28,959
that's allocated and then
 

827
00:16:28,959 --> 00:16:30,790
that's allocated and then
you know so that but we don't allocate

828
00:16:30,790 --> 00:16:30,800
you know so that but we don't allocate
 

829
00:16:30,800 --> 00:16:32,230
you know so that but we don't allocate
the kernel doesn't allocate any physical

830
00:16:32,230 --> 00:16:32,240
the kernel doesn't allocate any physical
 

831
00:16:32,240 --> 00:16:33,509
the kernel doesn't allocate any physical
memory at that particular point of time

832
00:16:33,509 --> 00:16:33,519
memory at that particular point of time
 

833
00:16:33,519 --> 00:16:34,710
memory at that particular point of time
it doesn't zero it that there's

834
00:16:34,710 --> 00:16:34,720
it doesn't zero it that there's
 

835
00:16:34,720 --> 00:16:36,069
it doesn't zero it that there's
absolutely nothing

836
00:16:36,069 --> 00:16:36,079
absolutely nothing
 

837
00:16:36,079 --> 00:16:38,629
absolutely nothing
um then at some point the application

838
00:16:38,629 --> 00:16:38,639
um then at some point the application
 

839
00:16:38,639 --> 00:16:40,470
um then at some point the application
will use or might use that memory

840
00:16:40,470 --> 00:16:40,480
will use or might use that memory
 

841
00:16:40,480 --> 00:16:41,110
will use or might use that memory
correctly if

842
00:16:41,110 --> 00:16:41,120
correctly if
 

843
00:16:41,120 --> 00:16:42,150
correctly if
it's actually one of the pieces of

844
00:16:42,150 --> 00:16:42,160
it's actually one of the pieces of
 

845
00:16:42,160 --> 00:16:44,389
it's actually one of the pieces of
memory that it really needs uh

846
00:16:44,389 --> 00:16:44,399
memory that it really needs uh
 

847
00:16:44,399 --> 00:16:47,509
memory that it really needs uh
and that will cause a page fault

848
00:16:47,509 --> 00:16:47,519
and that will cause a page fault
 

849
00:16:47,519 --> 00:16:51,030
and that will cause a page fault
because we didn't map that memory

850
00:16:51,030 --> 00:16:51,040
because we didn't map that memory
 

851
00:16:51,040 --> 00:16:53,350
because we didn't map that memory
actually into the page map yet

852
00:16:53,350 --> 00:16:53,360
actually into the page map yet
 

853
00:16:53,360 --> 00:16:56,870
actually into the page map yet
and so if we dereference a virtual dress

854
00:16:56,870 --> 00:16:56,880
and so if we dereference a virtual dress
 

855
00:16:56,880 --> 00:16:59,030
and so if we dereference a virtual dress
you know above you know this piece size

856
00:16:59,030 --> 00:16:59,040
you know above you know this piece size
 

857
00:16:59,040 --> 00:16:59,910
you know above you know this piece size
uh but below

858
00:16:59,910 --> 00:16:59,920
uh but below
 

859
00:16:59,920 --> 00:17:02,710
uh but below
pcs plus n uh what we like to be

860
00:17:02,710 --> 00:17:02,720
pcs plus n uh what we like to be
 

861
00:17:02,720 --> 00:17:03,269
pcs plus n uh what we like to be
happening

862
00:17:03,269 --> 00:17:03,279
happening
 

863
00:17:03,279 --> 00:17:05,110
happening
is that you know the kernel will

864
00:17:05,110 --> 00:17:05,120
is that you know the kernel will
 

865
00:17:05,120 --> 00:17:06,949
is that you know the kernel will
allocate a page and uh restarts

866
00:17:06,949 --> 00:17:06,959
allocate a page and uh restarts
 

867
00:17:06,959 --> 00:17:08,230
allocate a page and uh restarts
instruction

868
00:17:08,230 --> 00:17:08,240
instruction
 

869
00:17:08,240 --> 00:17:10,870
instruction
so if we get a page fault and we see

870
00:17:10,870 --> 00:17:10,880
so if we get a page fault and we see
 

871
00:17:10,880 --> 00:17:12,549
so if we get a page fault and we see
that the virtual address

872
00:17:12,549 --> 00:17:12,559
that the virtual address
 

873
00:17:12,559 --> 00:17:15,270
that the virtual address
is you know bigger than pizza uh it is

874
00:17:15,270 --> 00:17:15,280
is you know bigger than pizza uh it is
 

875
00:17:15,280 --> 00:17:15,990
is you know bigger than pizza uh it is
below

876
00:17:15,990 --> 00:17:16,000
below
 

877
00:17:16,000 --> 00:17:21,669
below
sorry it's a little key size

878
00:17:21,669 --> 00:17:21,679

 

879
00:17:21,679 --> 00:17:23,829

for p size then we know that this must

880
00:17:23,829 --> 00:17:23,839
for p size then we know that this must
 

881
00:17:23,839 --> 00:17:25,510
for p size then we know that this must
be a virtual address and i guess above

882
00:17:25,510 --> 00:17:25,520
be a virtual address and i guess above
 

883
00:17:25,520 --> 00:17:28,710
be a virtual address and i guess above
the stack

884
00:17:28,710 --> 00:17:28,720

 

885
00:17:28,720 --> 00:17:31,110

you know that this is a an address that

886
00:17:31,110 --> 00:17:31,120
you know that this is a an address that
 

887
00:17:31,120 --> 00:17:32,470
you know that this is a an address that
actually comes out of the heap

888
00:17:32,470 --> 00:17:32,480
actually comes out of the heap
 

889
00:17:32,480 --> 00:17:34,150
actually comes out of the heap
but for which we the kernel hasn't

890
00:17:34,150 --> 00:17:34,160
but for which we the kernel hasn't
 

891
00:17:34,160 --> 00:17:35,909
but for which we the kernel hasn't
allocated any

892
00:17:35,909 --> 00:17:35,919
allocated any
 

893
00:17:35,919 --> 00:17:39,029
allocated any
uh physical memory yet and so the

894
00:17:39,029 --> 00:17:39,039
uh physical memory yet and so the
 

895
00:17:39,039 --> 00:17:40,390
uh physical memory yet and so the
response to this paid fault you know

896
00:17:40,390 --> 00:17:40,400
response to this paid fault you know
 

897
00:17:40,400 --> 00:17:41,669
response to this paid fault you know
could be reasonable straightforward you

898
00:17:41,669 --> 00:17:41,679
could be reasonable straightforward you
 

899
00:17:41,679 --> 00:17:43,669
could be reasonable straightforward you
know in the patrol panel itself

900
00:17:43,669 --> 00:17:43,679
know in the patrol panel itself
 

901
00:17:43,679 --> 00:17:48,549
know in the patrol panel itself
we can allocate a page and using k alec

902
00:17:48,549 --> 00:17:48,559
we can allocate a page and using k alec
 

903
00:17:48,559 --> 00:17:55,669
we can allocate a page and using k alec
allocate one page zero to page

904
00:17:55,669 --> 00:17:55,679

 

905
00:17:55,679 --> 00:17:58,390

map the page into the page table so

906
00:17:58,390 --> 00:17:58,400
map the page into the page table so
 

907
00:17:58,400 --> 00:18:02,870
map the page into the page table so
updating the page tables

908
00:18:02,870 --> 00:18:02,880

 

909
00:18:02,880 --> 00:18:04,150

and then basically restart the

910
00:18:04,150 --> 00:18:04,160
and then basically restart the
 

911
00:18:04,160 --> 00:18:06,870
and then basically restart the
instruction

912
00:18:06,870 --> 00:18:06,880

 

913
00:18:06,880 --> 00:18:08,630

so for example if there was a load

914
00:18:08,630 --> 00:18:08,640
so for example if there was a load
 

915
00:18:08,640 --> 00:18:10,390
so for example if there was a load
instruction or store instruction

916
00:18:10,390 --> 00:18:10,400
instruction or store instruction
 

917
00:18:10,400 --> 00:18:11,990
instruction or store instruction
that wrote where i was trying to read

918
00:18:11,990 --> 00:18:12,000
that wrote where i was trying to read
 

919
00:18:12,000 --> 00:18:14,230
that wrote where i was trying to read
you know from that uh not

920
00:18:14,230 --> 00:18:14,240
you know from that uh not
 

921
00:18:14,240 --> 00:18:16,390
you know from that uh not
allocated you know piece of memory that

922
00:18:16,390 --> 00:18:16,400
allocated you know piece of memory that
 

923
00:18:16,400 --> 00:18:18,310
allocated you know piece of memory that
actually the process has

924
00:18:18,310 --> 00:18:18,320
actually the process has
 

925
00:18:18,320 --> 00:18:20,950
actually the process has
uh now after we mapped in this you know

926
00:18:20,950 --> 00:18:20,960
uh now after we mapped in this you know
 

927
00:18:20,960 --> 00:18:21,909
uh now after we mapped in this you know
physical page

928
00:18:21,909 --> 00:18:21,919
physical page
 

929
00:18:21,919 --> 00:18:23,750
physical page
uh the restarting instructions should

930
00:18:23,750 --> 00:18:23,760
uh the restarting instructions should
 

931
00:18:23,760 --> 00:18:25,190
uh the restarting instructions should
just work

932
00:18:25,190 --> 00:18:25,200
just work
 

933
00:18:25,200 --> 00:18:28,230
just work
i'm here go ahead

934
00:18:28,230 --> 00:18:28,240
i'm here go ahead
 

935
00:18:28,240 --> 00:18:31,190
i'm here go ahead
right so i was wondering in in the case

936
00:18:31,190 --> 00:18:31,200
right so i was wondering in in the case
 

937
00:18:31,200 --> 00:18:32,470
right so i was wondering in in the case
where we're doing eager

938
00:18:32,470 --> 00:18:32,480
where we're doing eager
 

939
00:18:32,480 --> 00:18:35,350
where we're doing eager
allocation uh and there comes a point

940
00:18:35,350 --> 00:18:35,360
allocation uh and there comes a point
 

941
00:18:35,360 --> 00:18:37,510
allocation uh and there comes a point
where a process consumes so much memory

942
00:18:37,510 --> 00:18:37,520
where a process consumes so much memory
 

943
00:18:37,520 --> 00:18:39,510
where a process consumes so much memory
that it actually exhausts the physical

944
00:18:39,510 --> 00:18:39,520
that it actually exhausts the physical
 

945
00:18:39,520 --> 00:18:40,070
that it actually exhausts the physical
memory

946
00:18:40,070 --> 00:18:40,080
memory
 

947
00:18:40,080 --> 00:18:43,110
memory
resource uh if we don't do eager

948
00:18:43,110 --> 00:18:43,120
resource uh if we don't do eager
 

949
00:18:43,120 --> 00:18:43,909
resource uh if we don't do eager
allocation

950
00:18:43,909 --> 00:18:43,919
allocation
 

951
00:18:43,919 --> 00:18:47,350
allocation
we do lazy instead at what point would

952
00:18:47,350 --> 00:18:47,360
we do lazy instead at what point would
 

953
00:18:47,360 --> 00:18:49,029
we do lazy instead at what point would
the application know that there's no

954
00:18:49,029 --> 00:18:49,039
the application know that there's no
 

955
00:18:49,039 --> 00:18:50,710
the application know that there's no
physical memory

956
00:18:50,710 --> 00:18:50,720
physical memory
 

957
00:18:50,720 --> 00:18:53,750
physical memory
ah that's a great question uh well

958
00:18:53,750 --> 00:18:53,760
ah that's a great question uh well
 

959
00:18:53,760 --> 00:18:54,710
ah that's a great question uh well
basically you know

960
00:18:54,710 --> 00:18:54,720
basically you know
 

961
00:18:54,720 --> 00:18:55,990
basically you know
it almost looks through the application

962
00:18:55,990 --> 00:18:56,000
it almost looks through the application
 

963
00:18:56,000 --> 00:18:58,310
it almost looks through the application
there there's this illusion of

964
00:18:58,310 --> 00:18:58,320
there there's this illusion of
 

965
00:18:58,320 --> 00:19:00,950
there there's this illusion of
unlimited physical about memory you know

966
00:19:00,950 --> 00:19:00,960
unlimited physical about memory you know
 

967
00:19:00,960 --> 00:19:02,230
unlimited physical about memory you know
at some point of course you know

968
00:19:02,230 --> 00:19:02,240
at some point of course you know
 

969
00:19:02,240 --> 00:19:04,150
at some point of course you know
it you know might use so much you know

970
00:19:04,150 --> 00:19:04,160
it you know might use so much you know
 

971
00:19:04,160 --> 00:19:05,510
it you know might use so much you know
that basically okay so

972
00:19:05,510 --> 00:19:05,520
that basically okay so
 

973
00:19:05,520 --> 00:19:07,430
that basically okay so
it may use all physical memory and so if

974
00:19:07,430 --> 00:19:07,440
it may use all physical memory and so if
 

975
00:19:07,440 --> 00:19:09,350
it may use all physical memory and so if
then it touches one more page

976
00:19:09,350 --> 00:19:09,360
then it touches one more page
 

977
00:19:09,360 --> 00:19:11,029
then it touches one more page
which there's no physical memory present

978
00:19:11,029 --> 00:19:11,039
which there's no physical memory present
 

979
00:19:11,039 --> 00:19:12,870
which there's no physical memory present
at that particular point in time

980
00:19:12,870 --> 00:19:12,880
at that particular point in time
 

981
00:19:12,880 --> 00:19:13,990
at that particular point in time
then you know there's a couple of

982
00:19:13,990 --> 00:19:14,000
then you know there's a couple of
 

983
00:19:14,000 --> 00:19:15,350
then you know there's a couple of
actions that the colonel can take and

984
00:19:15,350 --> 00:19:15,360
actions that the colonel can take and
 

985
00:19:15,360 --> 00:19:16,230
actions that the colonel can take and
i'll talk about

986
00:19:16,230 --> 00:19:16,240
i'll talk about
 

987
00:19:16,240 --> 00:19:18,470
i'll talk about
the more sophisticated ones later uh

988
00:19:18,470 --> 00:19:18,480
the more sophisticated ones later uh
 

989
00:19:18,480 --> 00:19:20,230
the more sophisticated ones later uh
what you're going to be doing in the

990
00:19:20,230 --> 00:19:20,240
what you're going to be doing in the
 

991
00:19:20,240 --> 00:19:24,150
what you're going to be doing in the
lazy lab is you know if the is uh up

992
00:19:24,150 --> 00:19:24,160
lazy lab is you know if the is uh up
 

993
00:19:24,160 --> 00:19:26,789
lazy lab is you know if the is uh up
and there's no no more free memory uh

994
00:19:26,789 --> 00:19:26,799
and there's no no more free memory uh
 

995
00:19:26,799 --> 00:19:27,909
and there's no no more free memory uh
you just

996
00:19:27,909 --> 00:19:27,919
you just
 

997
00:19:27,919 --> 00:19:29,430
you just
return an error or actually you kill the

998
00:19:29,430 --> 00:19:29,440
return an error or actually you kill the
 

999
00:19:29,440 --> 00:19:32,630
return an error or actually you kill the
process in that particular case

1000
00:19:32,630 --> 00:19:32,640
process in that particular case
 

1001
00:19:32,640 --> 00:19:34,630
process in that particular case
uh and so because you're out of memory

1002
00:19:34,630 --> 00:19:34,640
uh and so because you're out of memory
 

1003
00:19:34,640 --> 00:19:36,150
uh and so because you're out of memory
so there's nothing the kernel can do

1004
00:19:36,150 --> 00:19:36,160
so there's nothing the kernel can do
 

1005
00:19:36,160 --> 00:19:38,070
so there's nothing the kernel can do
and at that point you know you return or

1006
00:19:38,070 --> 00:19:38,080
and at that point you know you return or
 

1007
00:19:38,080 --> 00:19:39,669
and at that point you know you return or
kill the process

1008
00:19:39,669 --> 00:19:39,679
kill the process
 

1009
00:19:39,679 --> 00:19:42,070
kill the process
yeah that's a that you're going to do in

1010
00:19:42,070 --> 00:19:42,080
yeah that's a that you're going to do in
 

1011
00:19:42,080 --> 00:19:43,110
yeah that's a that you're going to do in
the lazy lab we'll see

1012
00:19:43,110 --> 00:19:43,120
the lazy lab we'll see
 

1013
00:19:43,120 --> 00:19:44,470
the lazy lab we'll see
later in this lecture you could be more

1014
00:19:44,470 --> 00:19:44,480
later in this lecture you could be more
 

1015
00:19:44,480 --> 00:19:47,990
later in this lecture you could be more
sophisticated than that

1016
00:19:47,990 --> 00:19:48,000

 

1017
00:19:48,000 --> 00:19:50,070

uh i think this is generally brings up a

1018
00:19:50,070 --> 00:19:50,080
uh i think this is generally brings up a
 

1019
00:19:50,080 --> 00:19:51,990
uh i think this is generally brings up a
topic that is if we have a collection of

1020
00:19:51,990 --> 00:19:52,000
topic that is if we have a collection of
 

1021
00:19:52,000 --> 00:19:53,830
topic that is if we have a collection of
processes running on

1022
00:19:53,830 --> 00:19:53,840
processes running on
 

1023
00:19:53,840 --> 00:19:55,590
processes running on
an operating system there is a limited

1024
00:19:55,590 --> 00:19:55,600
an operating system there is a limited
 

1025
00:19:55,600 --> 00:19:57,029
an operating system there is a limited
amount of physical memory and that

1026
00:19:57,029 --> 00:19:57,039
amount of physical memory and that
 

1027
00:19:57,039 --> 00:19:57,669
amount of physical memory and that
limited

1028
00:19:57,669 --> 00:19:57,679
limited
 

1029
00:19:57,679 --> 00:19:59,110
limited
physical memory must be shared in some

1030
00:19:59,110 --> 00:19:59,120
physical memory must be shared in some
 

1031
00:19:59,120 --> 00:20:00,950
physical memory must be shared in some
way between the applications

1032
00:20:00,950 --> 00:20:00,960
way between the applications
 

1033
00:20:00,960 --> 00:20:02,870
way between the applications
and so i'll talk a little bit much more

1034
00:20:02,870 --> 00:20:02,880
and so i'll talk a little bit much more
 

1035
00:20:02,880 --> 00:20:04,230
and so i'll talk a little bit much more
about it in

1036
00:20:04,230 --> 00:20:04,240
about it in
 

1037
00:20:04,240 --> 00:20:07,350
about it in
10-20 minutes

1038
00:20:07,350 --> 00:20:07,360
10-20 minutes
 

1039
00:20:07,360 --> 00:20:10,470
10-20 minutes
okay uh there's a question to check uh

1040
00:20:10,470 --> 00:20:10,480
okay uh there's a question to check uh
 

1041
00:20:10,480 --> 00:20:11,510
okay uh there's a question to check uh
in the chat

1042
00:20:11,510 --> 00:20:11,520
in the chat
 

1043
00:20:11,520 --> 00:20:16,230
in the chat
why is the condition virtual address uh

1044
00:20:16,230 --> 00:20:16,240

 

1045
00:20:16,240 --> 00:20:18,070

virtual justice loans next we start at

1046
00:20:18,070 --> 00:20:18,080
virtual justice loans next we start at
 

1047
00:20:18,080 --> 00:20:19,750
virtual justice loans next we start at
zero

1048
00:20:19,750 --> 00:20:19,760
zero
 

1049
00:20:19,760 --> 00:20:22,470
zero
okay this is a question about this

1050
00:20:22,470 --> 00:20:22,480
okay this is a question about this
 

1051
00:20:22,480 --> 00:20:26,149
okay this is a question about this
particular check here

1052
00:20:26,149 --> 00:20:26,159

 

1053
00:20:26,159 --> 00:20:30,230

so remember

1054
00:20:30,230 --> 00:20:30,240

 

1055
00:20:30,240 --> 00:20:33,270

we have our stack here and

1056
00:20:33,270 --> 00:20:33,280
we have our stack here and
 

1057
00:20:33,280 --> 00:20:36,630
we have our stack here and
we have our data here and we have our

1058
00:20:36,630 --> 00:20:36,640
we have our data here and we have our
 

1059
00:20:36,640 --> 00:20:37,110
we have our data here and we have our
text

1060
00:20:37,110 --> 00:20:37,120
text
 

1061
00:20:37,120 --> 00:20:39,830
text
in the user process and basically we

1062
00:20:39,830 --> 00:20:39,840
in the user process and basically we
 

1063
00:20:39,840 --> 00:20:40,549
in the user process and basically we
bumped up

1064
00:20:40,549 --> 00:20:40,559
bumped up
 

1065
00:20:40,559 --> 00:20:44,870
bumped up
you know p size to something bigger

1066
00:20:44,870 --> 00:20:44,880

 

1067
00:20:44,880 --> 00:20:47,110

uh we've dumped it up the growth we

1068
00:20:47,110 --> 00:20:47,120
uh we've dumped it up the growth we
 

1069
00:20:47,120 --> 00:20:48,710
uh we've dumped it up the growth we
haven't allocated memory here yet so

1070
00:20:48,710 --> 00:20:48,720
haven't allocated memory here yet so
 

1071
00:20:48,720 --> 00:20:49,510
haven't allocated memory here yet so
this memory has

1072
00:20:49,510 --> 00:20:49,520
this memory has
 

1073
00:20:49,520 --> 00:20:51,270
this memory has
not been physically allocated yet so

1074
00:20:51,270 --> 00:20:51,280
not been physically allocated yet so
 

1075
00:20:51,280 --> 00:20:52,950
not been physically allocated yet so
this check just checks

1076
00:20:52,950 --> 00:20:52,960
this check just checks
 

1077
00:20:52,960 --> 00:20:55,029
this check just checks
if the address falls below p size and it

1078
00:20:55,029 --> 00:20:55,039
if the address falls below p size and it
 

1079
00:20:55,039 --> 00:20:56,630
if the address falls below p size and it
actually is a valid you know address

1080
00:20:56,630 --> 00:20:56,640
actually is a valid you know address
 

1081
00:20:56,640 --> 00:20:58,390
actually is a valid you know address
in the user address space if it were

1082
00:20:58,390 --> 00:20:58,400
in the user address space if it were
 

1083
00:20:58,400 --> 00:21:00,390
in the user address space if it were
above p size presumably that's a

1084
00:21:00,390 --> 00:21:00,400
above p size presumably that's a
 

1085
00:21:00,400 --> 00:21:01,990
above p size presumably that's a
programming error

1086
00:21:01,990 --> 00:21:02,000
programming error
 

1087
00:21:02,000 --> 00:21:03,830
programming error
in the program or the user application

1088
00:21:03,830 --> 00:21:03,840
in the program or the user application
 

1089
00:21:03,840 --> 00:21:05,270
in the program or the user application
who's trying to dereference a memory

1090
00:21:05,270 --> 00:21:05,280
who's trying to dereference a memory
 

1091
00:21:05,280 --> 00:21:07,350
who's trying to dereference a memory
that actually doesn't have

1092
00:21:07,350 --> 00:21:07,360
that actually doesn't have
 

1093
00:21:07,360 --> 00:21:11,350
that actually doesn't have
hopefully that answers the question

1094
00:21:11,350 --> 00:21:11,360

 

1095
00:21:11,360 --> 00:21:14,870

yeah thank you okay good so

1096
00:21:14,870 --> 00:21:14,880
yeah thank you okay good so
 

1097
00:21:14,880 --> 00:21:17,350
yeah thank you okay good so
to get a little bit of a feel uh you

1098
00:21:17,350 --> 00:21:17,360
to get a little bit of a feel uh you
 

1099
00:21:17,360 --> 00:21:18,390
to get a little bit of a feel uh you
know for what that actually

1100
00:21:18,390 --> 00:21:18,400
know for what that actually
 

1101
00:21:18,400 --> 00:21:21,990
know for what that actually
means uh in uh this lazy allocation

1102
00:21:21,990 --> 00:21:22,000
means uh in uh this lazy allocation
 

1103
00:21:22,000 --> 00:21:25,669
means uh in uh this lazy allocation
uh and that's probably uh the only

1104
00:21:25,669 --> 00:21:25,679
uh and that's probably uh the only
 

1105
00:21:25,679 --> 00:21:27,590
uh and that's probably uh the only
uh sort of programming or tooth uh

1106
00:21:27,590 --> 00:21:27,600
uh sort of programming or tooth uh
 

1107
00:21:27,600 --> 00:21:29,430
uh sort of programming or tooth uh
things that we're gonna be doing

1108
00:21:29,430 --> 00:21:29,440
things that we're gonna be doing
 

1109
00:21:29,440 --> 00:21:32,710
things that we're gonna be doing
today is uh let's try to sort of uh

1110
00:21:32,710 --> 00:21:32,720
today is uh let's try to sort of uh
 

1111
00:21:32,720 --> 00:21:34,950
today is uh let's try to sort of uh
sketch out or look actually how it would

1112
00:21:34,950 --> 00:21:34,960
sketch out or look actually how it would
 

1113
00:21:34,960 --> 00:21:35,750
sketch out or look actually how it would
look in

1114
00:21:35,750 --> 00:21:35,760
look in
 

1115
00:21:35,760 --> 00:21:39,270
look in
in code and the two holes you'll see

1116
00:21:39,270 --> 00:21:39,280
in code and the two holes you'll see
 

1117
00:21:39,280 --> 00:21:40,470
in code and the two holes you'll see
that it will be surprising

1118
00:21:40,470 --> 00:21:40,480
that it will be surprising
 

1119
00:21:40,480 --> 00:21:44,230
that it will be surprising
easy and furthermore it's probably a big

1120
00:21:44,230 --> 00:21:44,240
easy and furthermore it's probably a big
 

1121
00:21:44,240 --> 00:21:45,110
easy and furthermore it's probably a big
help

1122
00:21:45,110 --> 00:21:45,120
help
 

1123
00:21:45,120 --> 00:21:48,789
help
for the lazy lab and so that hopefully

1124
00:21:48,789 --> 00:21:48,799
for the lazy lab and so that hopefully
 

1125
00:21:48,799 --> 00:21:49,430
for the lazy lab and so that hopefully
that will help you

1126
00:21:49,430 --> 00:21:49,440
that will help you
 

1127
00:21:49,440 --> 00:21:52,549
that will help you
get going pretty straightforwardly

1128
00:21:52,549 --> 00:21:52,559
get going pretty straightforwardly
 

1129
00:21:52,559 --> 00:21:54,070
get going pretty straightforwardly
and it allows us also to look at a

1130
00:21:54,070 --> 00:21:54,080
and it allows us also to look at a
 

1131
00:21:54,080 --> 00:21:59,669
and it allows us also to look at a
couple uh page fault

1132
00:21:59,669 --> 00:21:59,679
couple uh page fault
 

1133
00:21:59,679 --> 00:22:02,630
couple uh page fault
um i had a question actually regarding a

1134
00:22:02,630 --> 00:22:02,640
um i had a question actually regarding a
 

1135
00:22:02,640 --> 00:22:03,990
um i had a question actually regarding a
point that i made in chat

1136
00:22:03,990 --> 00:22:04,000
point that i made in chat
 

1137
00:22:04,000 --> 00:22:05,350
point that i made in chat
why do we actually need to kill the

1138
00:22:05,350 --> 00:22:05,360
why do we actually need to kill the
 

1139
00:22:05,360 --> 00:22:07,110
why do we actually need to kill the
application couldn't the operating

1140
00:22:07,110 --> 00:22:07,120
application couldn't the operating
 

1141
00:22:07,120 --> 00:22:08,870
application couldn't the operating
system just return like a narrative

1142
00:22:08,870 --> 00:22:08,880
system just return like a narrative
 

1143
00:22:08,880 --> 00:22:09,990
system just return like a narrative
you are out of memory try and do

1144
00:22:09,990 --> 00:22:10,000
you are out of memory try and do
 

1145
00:22:10,000 --> 00:22:12,149
you are out of memory try and do
something else

1146
00:22:12,149 --> 00:22:12,159
something else
 

1147
00:22:12,159 --> 00:22:13,430
something else
let's respond that question to a little

1148
00:22:13,430 --> 00:22:13,440
let's respond that question to a little
 

1149
00:22:13,440 --> 00:22:15,190
let's respond that question to a little
bit later you know

1150
00:22:15,190 --> 00:22:15,200
bit later you know
 

1151
00:22:15,200 --> 00:22:16,390
bit later you know
in the page fault we're going to just

1152
00:22:16,390 --> 00:22:16,400
in the page fault we're going to just
 

1153
00:22:16,400 --> 00:22:18,950
in the page fault we're going to just
kill the process uh but you know we can

1154
00:22:18,950 --> 00:22:18,960
kill the process uh but you know we can
 

1155
00:22:18,960 --> 00:22:20,149
kill the process uh but you know we can
be more sophisticated

1156
00:22:20,149 --> 00:22:20,159
be more sophisticated
 

1157
00:22:20,159 --> 00:22:22,789
be more sophisticated
uh in pixel lab real kernels are more

1158
00:22:22,789 --> 00:22:22,799
uh in pixel lab real kernels are more
 

1159
00:22:22,799 --> 00:22:25,029
uh in pixel lab real kernels are more
sophisticated

1160
00:22:25,029 --> 00:22:25,039
sophisticated
 

1161
00:22:25,039 --> 00:22:26,950
sophisticated
okay uh although in the end they might

1162
00:22:26,950 --> 00:22:26,960
okay uh although in the end they might
 

1163
00:22:26,960 --> 00:22:28,549
okay uh although in the end they might
still kill us you know if there's just

1164
00:22:28,549 --> 00:22:28,559
still kill us you know if there's just
 

1165
00:22:28,559 --> 00:22:30,310
still kill us you know if there's just
no more memory what whatsoever to be

1166
00:22:30,310 --> 00:22:30,320
no more memory what whatsoever to be
 

1167
00:22:30,320 --> 00:22:31,669
no more memory what whatsoever to be
gotten you know there's basically no

1168
00:22:31,669 --> 00:22:31,679
gotten you know there's basically no
 

1169
00:22:31,679 --> 00:22:32,870
gotten you know there's basically no
choice

1170
00:22:32,870 --> 00:22:32,880
choice
 

1171
00:22:32,880 --> 00:22:36,149
choice
um okay uh so the first thing uh we're

1172
00:22:36,149 --> 00:22:36,159
um okay uh so the first thing uh we're
 

1173
00:22:36,159 --> 00:22:37,750
um okay uh so the first thing uh we're
gonna do we're gonna modify so

1174
00:22:37,750 --> 00:22:37,760
gonna do we're gonna modify so
 

1175
00:22:37,760 --> 00:22:39,350
gonna do we're gonna modify so
you remember that cis practice you know

1176
00:22:39,350 --> 00:22:39,360
you remember that cis practice you know
 

1177
00:22:39,360 --> 00:22:40,870
you remember that cis practice you know
actually grows the address space of the

1178
00:22:40,870 --> 00:22:40,880
actually grows the address space of the
 

1179
00:22:40,880 --> 00:22:42,390
actually grows the address space of the
application allocates memory and all

1180
00:22:42,390 --> 00:22:42,400
application allocates memory and all
 

1181
00:22:42,400 --> 00:22:43,190
application allocates memory and all
that kind of stuff

1182
00:22:43,190 --> 00:22:43,200
that kind of stuff
 

1183
00:22:43,200 --> 00:22:45,190
that kind of stuff
we're just not going to do that we're

1184
00:22:45,190 --> 00:22:45,200
we're just not going to do that we're
 

1185
00:22:45,200 --> 00:22:48,789
we're just not going to do that we're
just going to set p size you know to

1186
00:22:48,789 --> 00:22:48,799
just going to set p size you know to
 

1187
00:22:48,799 --> 00:22:51,990
just going to set p size you know to
p size plus n

1188
00:22:51,990 --> 00:22:52,000
p size plus n
 

1189
00:22:52,000 --> 00:22:53,750
p size plus n
so let's assume that we're only growing

1190
00:22:53,750 --> 00:22:53,760
so let's assume that we're only growing
 

1191
00:22:53,760 --> 00:22:56,149
so let's assume that we're only growing
and not worry about uh shrinking for now

1192
00:22:56,149 --> 00:22:56,159
and not worry about uh shrinking for now
 

1193
00:22:56,159 --> 00:22:58,310
and not worry about uh shrinking for now
and that is what we're going to be doing

1194
00:22:58,310 --> 00:22:58,320
and that is what we're going to be doing
 

1195
00:22:58,320 --> 00:23:00,870
and that is what we're going to be doing
so this grows the virtual dress space

1196
00:23:00,870 --> 00:23:00,880
so this grows the virtual dress space
 

1197
00:23:00,880 --> 00:23:03,750
so this grows the virtual dress space
uh by end and that's all all we're going

1198
00:23:03,750 --> 00:23:03,760
uh by end and that's all all we're going
 

1199
00:23:03,760 --> 00:23:05,990
uh by end and that's all all we're going
to be doing

1200
00:23:05,990 --> 00:23:06,000
to be doing
 

1201
00:23:06,000 --> 00:23:07,430
to be doing
let's see if i can make no programming

1202
00:23:07,430 --> 00:23:07,440
let's see if i can make no programming
 

1203
00:23:07,440 --> 00:23:09,110
let's see if i can make no programming
mistakes i did make a programming

1204
00:23:09,110 --> 00:23:09,120
mistakes i did make a programming
 

1205
00:23:09,120 --> 00:23:10,549
mistakes i did make a programming
mistake

1206
00:23:10,549 --> 00:23:10,559
mistake
 

1207
00:23:10,559 --> 00:23:14,470
mistake
uh i guess i don't have product key here

1208
00:23:14,470 --> 00:23:14,480
uh i guess i don't have product key here
 

1209
00:23:14,480 --> 00:23:23,750
uh i guess i don't have product key here
so i'll like proc

1210
00:23:23,750 --> 00:23:23,760
so i'll like proc
 

1211
00:23:23,760 --> 00:23:25,669
so i'll like proc
it's good yeah so the program just runs

1212
00:23:25,669 --> 00:23:25,679
it's good yeah so the program just runs
 

1213
00:23:25,679 --> 00:23:27,510
it's good yeah so the program just runs
uh or at least we boot

1214
00:23:27,510 --> 00:23:27,520
uh or at least we boot
 

1215
00:23:27,520 --> 00:23:30,390
uh or at least we boot
uh i think if we do like echo high uh

1216
00:23:30,390 --> 00:23:30,400
uh i think if we do like echo high uh
 

1217
00:23:30,400 --> 00:23:32,230
uh i think if we do like echo high uh
we're gonna get actually a page fault

1218
00:23:32,230 --> 00:23:32,240
we're gonna get actually a page fault
 

1219
00:23:32,240 --> 00:23:33,909
we're gonna get actually a page fault
and the reason that we get a paid fault

1220
00:23:33,909 --> 00:23:33,919
and the reason that we get a paid fault
 

1221
00:23:33,919 --> 00:23:35,270
and the reason that we get a paid fault
is because uh

1222
00:23:35,270 --> 00:23:35,280
is because uh
 

1223
00:23:35,280 --> 00:23:38,470
is because uh
the shell uh who's gonna fork you know

1224
00:23:38,470 --> 00:23:38,480
the shell uh who's gonna fork you know
 

1225
00:23:38,480 --> 00:23:39,270
the shell uh who's gonna fork you know
echo and

1226
00:23:39,270 --> 00:23:39,280
echo and
 

1227
00:23:39,280 --> 00:23:41,430
echo and
then you know the child is gonna exec

1228
00:23:41,430 --> 00:23:41,440
then you know the child is gonna exec
 

1229
00:23:41,440 --> 00:23:43,510
then you know the child is gonna exec
echo uh the shell actually allocates

1230
00:23:43,510 --> 00:23:43,520
echo uh the shell actually allocates
 

1231
00:23:43,520 --> 00:23:44,549
echo uh the shell actually allocates
some memory

1232
00:23:44,549 --> 00:23:44,559
some memory
 

1233
00:23:44,559 --> 00:23:47,510
some memory
and so the shell calls s-break and

1234
00:23:47,510 --> 00:23:47,520
and so the shell calls s-break and
 

1235
00:23:47,520 --> 00:23:48,630
and so the shell calls s-break and
things are not looking good

1236
00:23:48,630 --> 00:23:48,640
things are not looking good
 

1237
00:23:48,640 --> 00:23:50,710
things are not looking good
but it's sort of interesting to look at

1238
00:23:50,710 --> 00:23:50,720
but it's sort of interesting to look at
 

1239
00:23:50,720 --> 00:23:51,669
but it's sort of interesting to look at
you know the

1240
00:23:51,669 --> 00:23:51,679
you know the
 

1241
00:23:51,679 --> 00:23:54,310
you know the
uh information here so here's our it

1242
00:23:54,310 --> 00:23:54,320
uh information here so here's our it
 

1243
00:23:54,320 --> 00:23:55,669
uh information here so here's our it
prints out the s-cos

1244
00:23:55,669 --> 00:23:55,679
prints out the s-cos
 

1245
00:23:55,679 --> 00:23:58,870
prints out the s-cos
uh register uh when the value in s-cos

1246
00:23:58,870 --> 00:23:58,880
uh register uh when the value in s-cos
 

1247
00:23:58,880 --> 00:24:00,549
uh register uh when the value in s-cos
and we see it's 15.

1248
00:24:00,549 --> 00:24:00,559
and we see it's 15.
 

1249
00:24:00,559 --> 00:24:06,710
and we see it's 15.
uh anybody remember what 15 is

1250
00:24:06,710 --> 00:24:06,720

 

1251
00:24:06,720 --> 00:24:07,909

you know from the table i just showed

1252
00:24:07,909 --> 00:24:07,919
you know from the table i just showed
 

1253
00:24:07,919 --> 00:24:09,350
you know from the table i just showed
you a little bit a while ago that

1254
00:24:09,350 --> 00:24:09,360
you a little bit a while ago that
 

1255
00:24:09,360 --> 00:24:10,310
you a little bit a while ago that
actually is the write

1256
00:24:10,310 --> 00:24:10,320
actually is the write
 

1257
00:24:10,320 --> 00:24:13,510
actually is the write
or store page fault we see that is

1258
00:24:13,510 --> 00:24:13,520
or store page fault we see that is
 

1259
00:24:13,520 --> 00:24:16,470
or store page fault we see that is
process free that's probably the shell

1260
00:24:16,470 --> 00:24:16,480
process free that's probably the shell
 

1261
00:24:16,480 --> 00:24:17,830
process free that's probably the shell
and we actually see the

1262
00:24:17,830 --> 00:24:17,840
and we actually see the
 

1263
00:24:17,840 --> 00:24:19,750
and we actually see the
exception program encounter it's one two

1264
00:24:19,750 --> 00:24:19,760
exception program encounter it's one two
 

1265
00:24:19,760 --> 00:24:21,990
exception program encounter it's one two
a four and we see the address given the

1266
00:24:21,990 --> 00:24:22,000
a four and we see the address given the
 

1267
00:24:22,000 --> 00:24:23,590
a four and we see the address given the
virtual address on which we fault which

1268
00:24:23,590 --> 00:24:23,600
virtual address on which we fault which
 

1269
00:24:23,600 --> 00:24:25,350
virtual address on which we fault which
is four thousand eight

1270
00:24:25,350 --> 00:24:25,360
is four thousand eight
 

1271
00:24:25,360 --> 00:24:27,350
is four thousand eight
and so let's uh look at the you know we

1272
00:24:27,350 --> 00:24:27,360
and so let's uh look at the you know we
 

1273
00:24:27,360 --> 00:24:29,510
and so let's uh look at the you know we
can look at the

1274
00:24:29,510 --> 00:24:29,520
can look at the
 

1275
00:24:29,520 --> 00:24:32,789
can look at the
assembly of the shell the make files

1276
00:24:32,789 --> 00:24:32,799
assembly of the shell the make files
 

1277
00:24:32,799 --> 00:24:34,710
assembly of the shell the make files
nice of us nice enough for us to

1278
00:24:34,710 --> 00:24:34,720
nice of us nice enough for us to
 

1279
00:24:34,720 --> 00:24:36,230
nice of us nice enough for us to
actually generate that

1280
00:24:36,230 --> 00:24:36,240
actually generate that
 

1281
00:24:36,240 --> 00:24:39,350
actually generate that
and we can look at the address uh

1282
00:24:39,350 --> 00:24:39,360
and we can look at the address uh
 

1283
00:24:39,360 --> 00:24:42,390
and we can look at the address uh
1284 and

1284
00:24:42,390 --> 00:24:42,400
1284 and
 

1285
00:24:42,400 --> 00:24:44,310
1284 and
you know we see indeed you know there

1286
00:24:44,310 --> 00:24:44,320
you know we see indeed you know there
 

1287
00:24:44,320 --> 00:24:45,909
you know we see indeed you know there
there's a story instruction correct the

1288
00:24:45,909 --> 00:24:45,919
there's a story instruction correct the
 

1289
00:24:45,919 --> 00:24:47,190
there's a story instruction correct the
store instruction

1290
00:24:47,190 --> 00:24:47,200
store instruction
 

1291
00:24:47,200 --> 00:24:49,430
store instruction
and uh it looks like that's where we're

1292
00:24:49,430 --> 00:24:49,440
and uh it looks like that's where we're
 

1293
00:24:49,440 --> 00:24:50,870
and uh it looks like that's where we're
faulting

1294
00:24:50,870 --> 00:24:50,880
faulting
 

1295
00:24:50,880 --> 00:24:53,350
faulting
uh so if you scroll back a little bit

1296
00:24:53,350 --> 00:24:53,360
uh so if you scroll back a little bit
 

1297
00:24:53,360 --> 00:24:55,350
uh so if you scroll back a little bit
and look at this assembly here

1298
00:24:55,350 --> 00:24:55,360
and look at this assembly here
 

1299
00:24:55,360 --> 00:24:58,230
and look at this assembly here
uh you know we see uh that actually this

1300
00:24:58,230 --> 00:24:58,240
uh you know we see uh that actually this
 

1301
00:24:58,240 --> 00:25:00,070
uh you know we see uh that actually this
is in part of the implementation of

1302
00:25:00,070 --> 00:25:00,080
is in part of the implementation of
 

1303
00:25:00,080 --> 00:25:01,430
is in part of the implementation of
malloc

1304
00:25:01,430 --> 00:25:01,440
malloc
 

1305
00:25:01,440 --> 00:25:03,590
malloc
so that seems uh totally reasonable

1306
00:25:03,590 --> 00:25:03,600
so that seems uh totally reasonable
 

1307
00:25:03,600 --> 00:25:05,350
so that seems uh totally reasonable
correct here's the malek implementation

1308
00:25:05,350 --> 00:25:05,360
correct here's the malek implementation
 

1309
00:25:05,360 --> 00:25:07,510
correct here's the malek implementation
not surprising that we presumably use

1310
00:25:07,510 --> 00:25:07,520
not surprising that we presumably use
 

1311
00:25:07,520 --> 00:25:08,710
not surprising that we presumably use
s-break to get some

1312
00:25:08,710 --> 00:25:08,720
s-break to get some
 

1313
00:25:08,720 --> 00:25:13,029
s-break to get some
memory for implementing the user malloc

1314
00:25:13,029 --> 00:25:13,039
memory for implementing the user malloc
 

1315
00:25:13,039 --> 00:25:15,669
memory for implementing the user malloc
and we're basically initializing the

1316
00:25:15,669 --> 00:25:15,679
and we're basically initializing the
 

1317
00:25:15,679 --> 00:25:17,029
and we're basically initializing the
free list of

1318
00:25:17,029 --> 00:25:17,039
free list of
 

1319
00:25:17,039 --> 00:25:18,870
free list of
using the memory that we've just gotten

1320
00:25:18,870 --> 00:25:18,880
using the memory that we've just gotten
 

1321
00:25:18,880 --> 00:25:20,149
using the memory that we've just gotten
from the kernel

1322
00:25:20,149 --> 00:25:20,159
from the kernel
 

1323
00:25:20,159 --> 00:25:23,909
from the kernel
and this line 12 a4

1324
00:25:23,909 --> 00:25:23,919

 

1325
00:25:23,919 --> 00:25:25,669

joomla writes you know i guess it's

1326
00:25:25,669 --> 00:25:25,679
joomla writes you know i guess it's
 

1327
00:25:25,679 --> 00:25:27,350
joomla writes you know i guess it's
right something in size

1328
00:25:27,350 --> 00:25:27,360
right something in size
 

1329
00:25:27,360 --> 00:25:30,789
right something in size
and uh but we we're writing to memory

1330
00:25:30,789 --> 00:25:30,799
and uh but we we're writing to memory
 

1331
00:25:30,799 --> 00:25:33,110
and uh but we we're writing to memory
that actually hasn't been allocated

1332
00:25:33,110 --> 00:25:33,120
that actually hasn't been allocated
 

1333
00:25:33,120 --> 00:25:34,470
that actually hasn't been allocated
another reason that we can see that the

1334
00:25:34,470 --> 00:25:34,480
another reason that we can see that the
 

1335
00:25:34,480 --> 00:25:36,549
another reason that we can see that the
memory is probably not allocated is

1336
00:25:36,549 --> 00:25:36,559
memory is probably not allocated is
 

1337
00:25:36,559 --> 00:25:38,710
memory is probably not allocated is
uh the i think the shell actually has

1338
00:25:38,710 --> 00:25:38,720
uh the i think the shell actually has
 

1339
00:25:38,720 --> 00:25:39,750
uh the i think the shell actually has
four pages

1340
00:25:39,750 --> 00:25:39,760
four pages
 

1341
00:25:39,760 --> 00:25:42,630
four pages
of text and data and we're basically

1342
00:25:42,630 --> 00:25:42,640
of text and data and we're basically
 

1343
00:25:42,640 --> 00:25:44,549
of text and data and we're basically
sitting just above the fourth

1344
00:25:44,549 --> 00:25:44,559
sitting just above the fourth
 

1345
00:25:44,559 --> 00:25:46,070
sitting just above the fourth
page in the fifth page in fact we're

1346
00:25:46,070 --> 00:25:46,080
page in the fifth page in fact we're
 

1347
00:25:46,080 --> 00:25:47,909
page in the fifth page in fact we're
sitting eight bytes above it

1348
00:25:47,909 --> 00:25:47,919
sitting eight bytes above it
 

1349
00:25:47,919 --> 00:25:51,029
sitting eight bytes above it
that sort of makes sense uh we look at

1350
00:25:51,029 --> 00:25:51,039
that sort of makes sense uh we look at
 

1351
00:25:51,039 --> 00:25:54,630
that sort of makes sense uh we look at
the instruction again where's 1284

1352
00:25:54,630 --> 00:25:54,640
the instruction again where's 1284
 

1353
00:25:54,640 --> 00:25:56,549
the instruction again where's 1284
you see here that basically probably a

1354
00:25:56,549 --> 00:25:56,559
you see here that basically probably a
 

1355
00:25:56,559 --> 00:25:57,990
you see here that basically probably a
user general holds

1356
00:25:57,990 --> 00:25:58,000
user general holds
 

1357
00:25:58,000 --> 00:26:00,870
user general holds
you know four thousand and eight is the

1358
00:26:00,870 --> 00:26:00,880
you know four thousand and eight is the
 

1359
00:26:00,880 --> 00:26:02,710
you know four thousand and eight is the
uh additional offset you know that we're

1360
00:26:02,710 --> 00:26:02,720
uh additional offset you know that we're
 

1361
00:26:02,720 --> 00:26:04,870
uh additional offset you know that we're
actually dereferencing

1362
00:26:04,870 --> 00:26:04,880
actually dereferencing
 

1363
00:26:04,880 --> 00:26:07,830
actually dereferencing
so that's the default and now what we

1364
00:26:07,830 --> 00:26:07,840
so that's the default and now what we
 

1365
00:26:07,840 --> 00:26:09,669
so that's the default and now what we
like to do is you know

1366
00:26:09,669 --> 00:26:09,679
like to do is you know
 

1367
00:26:09,679 --> 00:26:14,149
like to do is you know
do something slightly more sophisticated

1368
00:26:14,149 --> 00:26:14,159
do something slightly more sophisticated
 

1369
00:26:14,159 --> 00:26:16,549
do something slightly more sophisticated
than we're currently doing and so let's

1370
00:26:16,549 --> 00:26:16,559
than we're currently doing and so let's
 

1371
00:26:16,559 --> 00:26:22,830
than we're currently doing and so let's
go to proc

1372
00:26:22,830 --> 00:26:22,840

 

1373
00:26:22,840 --> 00:26:27,269

trap.c

1374
00:26:27,269 --> 00:26:27,279

 

1375
00:26:27,279 --> 00:26:29,990

and uh look at user trap right because

1376
00:26:29,990 --> 00:26:30,000
and uh look at user trap right because
 

1377
00:26:30,000 --> 00:26:34,470
and uh look at user trap right because
this happens in user trap

1378
00:26:34,470 --> 00:26:34,480

 

1379
00:26:34,480 --> 00:26:36,149

uh mutual trap is the function that we

1380
00:26:36,149 --> 00:26:36,159
uh mutual trap is the function that we
 

1381
00:26:36,159 --> 00:26:39,190
uh mutual trap is the function that we
uh that robert discussed uh a week ago

1382
00:26:39,190 --> 00:26:39,200
uh that robert discussed uh a week ago
 

1383
00:26:39,200 --> 00:26:41,110
uh that robert discussed uh a week ago
uh and you know just go through the

1384
00:26:41,110 --> 00:26:41,120
uh and you know just go through the
 

1385
00:26:41,120 --> 00:26:42,390
uh and you know just go through the
different causes

1386
00:26:42,390 --> 00:26:42,400
different causes
 

1387
00:26:42,400 --> 00:26:44,710
different causes
and perform some action so we're a

1388
00:26:44,710 --> 00:26:44,720
and perform some action so we're a
 

1389
00:26:44,720 --> 00:26:45,510
and perform some action so we're a
little bit here

1390
00:26:45,510 --> 00:26:45,520
little bit here
 

1391
00:26:45,520 --> 00:26:48,070
little bit here
uh this line is s-class is eight and you

1392
00:26:48,070 --> 00:26:48,080
uh this line is s-class is eight and you
 

1393
00:26:48,080 --> 00:26:49,430
uh this line is s-class is eight and you
know that's the point we're gonna do

1394
00:26:49,430 --> 00:26:49,440
know that's the point we're gonna do
 

1395
00:26:49,440 --> 00:26:51,350
know that's the point we're gonna do
process system calls

1396
00:26:51,350 --> 00:26:51,360
process system calls
 

1397
00:26:51,360 --> 00:26:53,029
process system calls
uh then there's a line that checks

1398
00:26:53,029 --> 00:26:53,039
uh then there's a line that checks
 

1399
00:26:53,039 --> 00:26:55,269
uh then there's a line that checks
whether it was any uh device interrupt

1400
00:26:55,269 --> 00:26:55,279
whether it was any uh device interrupt
 

1401
00:26:55,279 --> 00:26:56,870
whether it was any uh device interrupt
and processes inside of the device

1402
00:26:56,870 --> 00:26:56,880
and processes inside of the device
 

1403
00:26:56,880 --> 00:26:57,750
and processes inside of the device
interrupt

1404
00:26:57,750 --> 00:26:57,760
interrupt
 

1405
00:26:57,760 --> 00:26:59,350
interrupt
and if there's none of those to happen

1406
00:26:59,350 --> 00:26:59,360
and if there's none of those to happen
 

1407
00:26:59,360 --> 00:27:01,510
and if there's none of those to happen
then basically we get this trap

1408
00:27:01,510 --> 00:27:01,520
then basically we get this trap
 

1409
00:27:01,520 --> 00:27:03,909
then basically we get this trap
and the process is being killed and

1410
00:27:03,909 --> 00:27:03,919
and the process is being killed and
 

1411
00:27:03,919 --> 00:27:05,110
and the process is being killed and
basically what we need to do

1412
00:27:05,110 --> 00:27:05,120
basically what we need to do
 

1413
00:27:05,120 --> 00:27:06,950
basically what we need to do
is you know we need to add some code

1414
00:27:06,950 --> 00:27:06,960
is you know we need to add some code
 

1415
00:27:06,960 --> 00:27:09,990
is you know we need to add some code
here that you know checks

1416
00:27:09,990 --> 00:27:10,000
here that you know checks
 

1417
00:27:10,000 --> 00:27:12,310
here that you know checks
uh for another case right basically i

1418
00:27:12,310 --> 00:27:12,320
uh for another case right basically i
 

1419
00:27:12,320 --> 00:27:13,830
uh for another case right basically i
guess the case that we want to look for

1420
00:27:13,830 --> 00:27:13,840
guess the case that we want to look for
 

1421
00:27:13,840 --> 00:27:15,669
guess the case that we want to look for
outlet is if

1422
00:27:15,669 --> 00:27:15,679
outlet is if
 

1423
00:27:15,679 --> 00:27:22,630
outlet is if
uh our s cos is causing a

1424
00:27:22,630 --> 00:27:22,640

 

1425
00:27:22,640 --> 00:27:27,430

is 15

1426
00:27:27,430 --> 00:27:27,440

 

1427
00:27:27,440 --> 00:27:31,990

we want to do something else

1428
00:27:31,990 --> 00:27:32,000

 

1429
00:27:32,000 --> 00:27:35,110

does that make sense so what do you want

1430
00:27:35,110 --> 00:27:35,120
does that make sense so what do you want
 

1431
00:27:35,120 --> 00:27:41,990
does that make sense so what do you want
to do here

1432
00:27:41,990 --> 00:27:42,000

 

1433
00:27:42,000 --> 00:27:43,990

what is sort of the plan for attack you

1434
00:27:43,990 --> 00:27:44,000
what is sort of the plan for attack you
 

1435
00:27:44,000 --> 00:27:50,389
what is sort of the plan for attack you
know for these couple lines of code

1436
00:27:50,389 --> 00:27:50,399

 

1437
00:27:50,399 --> 00:27:53,510

we want to check if p size

1438
00:27:53,510 --> 00:27:53,520
we want to check if p size
 

1439
00:27:53,520 --> 00:27:57,750
we want to check if p size
is more than the virtual address

1440
00:27:57,750 --> 00:27:57,760
is more than the virtual address
 

1441
00:27:57,760 --> 00:28:00,789
is more than the virtual address
not um in

1442
00:28:00,789 --> 00:28:00,799
not um in
 

1443
00:28:00,799 --> 00:28:04,070
not um in
sd val perhaps yeah

1444
00:28:04,070 --> 00:28:04,080
sd val perhaps yeah
 

1445
00:28:04,080 --> 00:28:08,470
sd val perhaps yeah
yeah yeah oh and this is the case then

1446
00:28:08,470 --> 00:28:08,480
yeah yeah oh and this is the case then
 

1447
00:28:08,480 --> 00:28:11,750
yeah yeah oh and this is the case then
do something like uv

1448
00:28:11,750 --> 00:28:11,760
do something like uv
 

1449
00:28:11,760 --> 00:28:15,029
do something like uv
um um malloc i think

1450
00:28:15,029 --> 00:28:15,039
um um malloc i think
 

1451
00:28:15,039 --> 00:28:17,190
um um malloc i think
there's one way we could do it uh so i'm

1452
00:28:17,190 --> 00:28:17,200
there's one way we could do it uh so i'm
 

1453
00:28:17,200 --> 00:28:18,470
there's one way we could do it uh so i'm
going to cut some corners just

1454
00:28:18,470 --> 00:28:18,480
going to cut some corners just
 

1455
00:28:18,480 --> 00:28:20,789
going to cut some corners just
for the demo and uh presumably in the in

1456
00:28:20,789 --> 00:28:20,799
for the demo and uh presumably in the in
 

1457
00:28:20,799 --> 00:28:21,990
for the demo and uh presumably in the in
the lab itself you will need to do a

1458
00:28:21,990 --> 00:28:22,000
the lab itself you will need to do a
 

1459
00:28:22,000 --> 00:28:23,190
the lab itself you will need to do a
little bit more work

1460
00:28:23,190 --> 00:28:23,200
little bit more work
 

1461
00:28:23,200 --> 00:28:26,070
little bit more work
uh but basically here's the sort of i

1462
00:28:26,070 --> 00:28:26,080
uh but basically here's the sort of i
 

1463
00:28:26,080 --> 00:28:26,549
uh but basically here's the sort of i
think the

1464
00:28:26,549 --> 00:28:26,559
think the
 

1465
00:28:26,559 --> 00:28:29,990
think the
frequent segment of code that we need

1466
00:28:29,990 --> 00:28:30,000
frequent segment of code that we need
 

1467
00:28:30,000 --> 00:28:34,070
frequent segment of code that we need
so let's see where i was

1468
00:28:34,070 --> 00:28:34,080
so let's see where i was
 

1469
00:28:34,080 --> 00:28:38,070
so let's see where i was
here's usually trap

1470
00:28:38,070 --> 00:28:38,080

 

1471
00:28:38,080 --> 00:28:41,110

let me just kind of paste it into it

1472
00:28:41,110 --> 00:28:41,120
let me just kind of paste it into it
 

1473
00:28:41,120 --> 00:28:43,590
let me just kind of paste it into it
and then we can look at it you know just

1474
00:28:43,590 --> 00:28:43,600
and then we can look at it you know just
 

1475
00:28:43,600 --> 00:28:45,269
and then we can look at it you know just
a print statement for debugging uh and

1476
00:28:45,269 --> 00:28:45,279
a print statement for debugging uh and
 

1477
00:28:45,279 --> 00:28:46,230
a print statement for debugging uh and
basically

1478
00:28:46,230 --> 00:28:46,240
basically
 

1479
00:28:46,240 --> 00:28:47,990
basically
what i'm going to do in this handler i'm

1480
00:28:47,990 --> 00:28:48,000
what i'm going to do in this handler i'm
 

1481
00:28:48,000 --> 00:28:50,149
what i'm going to do in this handler i'm
going to allocate the physical page

1482
00:28:50,149 --> 00:28:50,159
going to allocate the physical page
 

1483
00:28:50,159 --> 00:28:52,310
going to allocate the physical page
uh if there's no physical pace meaning

1484
00:28:52,310 --> 00:28:52,320
uh if there's no physical pace meaning
 

1485
00:28:52,320 --> 00:28:53,830
uh if there's no physical pace meaning
we're out of memory i'm just

1486
00:28:53,830 --> 00:28:53,840
we're out of memory i'm just
 

1487
00:28:53,840 --> 00:28:55,909
we're out of memory i'm just
we're going to kill the process for now

1488
00:28:55,909 --> 00:28:55,919
we're going to kill the process for now
 

1489
00:28:55,919 --> 00:28:58,149
we're going to kill the process for now
uh if there's a physical page you know

1490
00:28:58,149 --> 00:28:58,159
uh if there's a physical page you know
 

1491
00:28:58,159 --> 00:28:59,750
uh if there's a physical page you know
we'll zero the page

1492
00:28:59,750 --> 00:28:59,760
we'll zero the page
 

1493
00:28:59,760 --> 00:29:02,630
we'll zero the page
and then we just map the page at the

1494
00:29:02,630 --> 00:29:02,640
and then we just map the page at the
 

1495
00:29:02,640 --> 00:29:03,750
and then we just map the page at the
appropriate address

1496
00:29:03,750 --> 00:29:03,760
appropriate address
 

1497
00:29:03,760 --> 00:29:06,789
appropriate address
in the uh address space of the user

1498
00:29:06,789 --> 00:29:06,799
in the uh address space of the user
 

1499
00:29:06,799 --> 00:29:09,590
in the uh address space of the user
in particular we map it on the rounded

1500
00:29:09,590 --> 00:29:09,600
in particular we map it on the rounded
 

1501
00:29:09,600 --> 00:29:10,870
in particular we map it on the rounded
down virtual address

1502
00:29:10,870 --> 00:29:10,880
down virtual address
 

1503
00:29:10,880 --> 00:29:13,269
down virtual address
right so the faulting address is 4008

1504
00:29:13,269 --> 00:29:13,279
right so the faulting address is 4008
 

1505
00:29:13,279 --> 00:29:14,070
right so the faulting address is 4008
here

1506
00:29:14,070 --> 00:29:14,080
here
 

1507
00:29:14,080 --> 00:29:16,549
here
uh and so that's eight bytes into you

1508
00:29:16,549 --> 00:29:16,559
uh and so that's eight bytes into you
 

1509
00:29:16,559 --> 00:29:17,750
uh and so that's eight bytes into you
know the fifth page

1510
00:29:17,750 --> 00:29:17,760
know the fifth page
 

1511
00:29:17,760 --> 00:29:19,830
know the fifth page
and we want to map that physical page at

1512
00:29:19,830 --> 00:29:19,840
and we want to map that physical page at
 

1513
00:29:19,840 --> 00:29:21,110
and we want to map that physical page at
the bottom of the physical

1514
00:29:21,110 --> 00:29:21,120
the bottom of the physical
 

1515
00:29:21,120 --> 00:29:23,590
the bottom of the physical
the virtual page so at four thousand so

1516
00:29:23,590 --> 00:29:23,600
the virtual page so at four thousand so
 

1517
00:29:23,600 --> 00:29:25,110
the virtual page so at four thousand so
round it down to four thousand and then

1518
00:29:25,110 --> 00:29:25,120
round it down to four thousand and then
 

1519
00:29:25,120 --> 00:29:26,630
round it down to four thousand and then
we map four files into this physical

1520
00:29:26,630 --> 00:29:26,640
we map four files into this physical
 

1521
00:29:26,640 --> 00:29:27,830
we map four files into this physical
page

1522
00:29:27,830 --> 00:29:27,840
page
 

1523
00:29:27,840 --> 00:29:29,190
page
and then of course we have to set the

1524
00:29:29,190 --> 00:29:29,200
and then of course we have to set the
 

1525
00:29:29,200 --> 00:29:31,430
and then of course we have to set the
usual permission bits you know the ubid

1526
00:29:31,430 --> 00:29:31,440
usual permission bits you know the ubid
 

1527
00:29:31,440 --> 00:29:33,909
usual permission bits you know the ubid
the read and write

1528
00:29:33,909 --> 00:29:33,919
the read and write
 

1529
00:29:33,919 --> 00:29:38,310
the read and write
does that make sense

1530
00:29:38,310 --> 00:29:38,320

 

1531
00:29:38,320 --> 00:29:42,470

yeah i guess i can get rid of this line

1532
00:29:42,470 --> 00:29:42,480

 

1533
00:29:42,480 --> 00:29:49,750

uh so let's see let's try this out

1534
00:29:49,750 --> 00:29:49,760

 

1535
00:29:49,760 --> 00:29:54,470

and i guess i made some mistakes

1536
00:29:54,470 --> 00:29:54,480
and i guess i made some mistakes
 

1537
00:29:54,480 --> 00:29:56,389
and i guess i made some mistakes
i think that on the else you don't have

1538
00:29:56,389 --> 00:29:56,399
i think that on the else you don't have
 

1539
00:29:56,399 --> 00:29:59,350
i think that on the else you don't have
an opening bracket at the bottom

1540
00:29:59,350 --> 00:29:59,360
an opening bracket at the bottom
 

1541
00:29:59,360 --> 00:30:00,610
an opening bracket at the bottom
oh yeah

1542
00:30:00,610 --> 00:30:00,620
oh yeah
 

1543
00:30:00,620 --> 00:30:03,110
oh yeah
[Music]

1544
00:30:03,110 --> 00:30:03,120
[Music]
 

1545
00:30:03,120 --> 00:30:06,830
[Music]
no i do have it do i need one more oh

1546
00:30:06,830 --> 00:30:06,840
no i do have it do i need one more oh
 

1547
00:30:06,840 --> 00:30:08,030
no i do have it do i need one more oh
yeah

1548
00:30:08,030 --> 00:30:08,040
yeah
 

1549
00:30:08,040 --> 00:30:10,230
yeah
[Music]

1550
00:30:10,230 --> 00:30:10,240
[Music]
 

1551
00:30:10,240 --> 00:30:12,230
[Music]
oh sorry i meant on the ls right here

1552
00:30:12,230 --> 00:30:12,240
oh sorry i meant on the ls right here
 

1553
00:30:12,240 --> 00:30:13,990
oh sorry i meant on the ls right here
you don't have an opening bracket

1554
00:30:13,990 --> 00:30:14,000
you don't have an opening bracket
 

1555
00:30:14,000 --> 00:30:17,669
you don't have an opening bracket
right like uh lenses else printf user

1556
00:30:17,669 --> 00:30:17,679
right like uh lenses else printf user
 

1557
00:30:17,679 --> 00:30:18,870
right like uh lenses else printf user
trap

1558
00:30:18,870 --> 00:30:18,880
trap
 

1559
00:30:18,880 --> 00:30:24,630
trap
unexpected cause thank you thank you

1560
00:30:24,630 --> 00:30:24,640

 

1561
00:30:24,640 --> 00:30:27,510

hopefully it'll help a lot with

1562
00:30:27,510 --> 00:30:27,520
hopefully it'll help a lot with
 

1563
00:30:27,520 --> 00:30:29,669
hopefully it'll help a lot with
excellence so echo high

1564
00:30:29,669 --> 00:30:29,679
excellence so echo high
 

1565
00:30:29,679 --> 00:30:31,029
excellence so echo high
uh now of course we're going to be

1566
00:30:31,029 --> 00:30:31,039
uh now of course we're going to be
 

1567
00:30:31,039 --> 00:30:32,630
uh now of course we're going to be
optimistic and we hope that works uh

1568
00:30:32,630 --> 00:30:32,640
optimistic and we hope that works uh
 

1569
00:30:32,640 --> 00:30:34,470
optimistic and we hope that works uh
i'll tell you it won't work but

1570
00:30:34,470 --> 00:30:34,480
i'll tell you it won't work but
 

1571
00:30:34,480 --> 00:30:36,630
i'll tell you it won't work but
uh but we did get two page faults right

1572
00:30:36,630 --> 00:30:36,640
uh but we did get two page faults right
 

1573
00:30:36,640 --> 00:30:37,990
uh but we did get two page faults right
we got a page filled at four thousand

1574
00:30:37,990 --> 00:30:38,000
we got a page filled at four thousand
 

1575
00:30:38,000 --> 00:30:39,350
we got a page filled at four thousand
eight you know apparently we practiced

1576
00:30:39,350 --> 00:30:39,360
eight you know apparently we practiced
 

1577
00:30:39,360 --> 00:30:41,269
eight you know apparently we practiced
them because we got another page fault

1578
00:30:41,269 --> 00:30:41,279
them because we got another page fault
 

1579
00:30:41,279 --> 00:30:43,430
them because we got another page fault
and so we only problem that we've left

1580
00:30:43,430 --> 00:30:43,440
and so we only problem that we've left
 

1581
00:30:43,440 --> 00:30:44,710
and so we only problem that we've left
is there's a

1582
00:30:44,710 --> 00:30:44,720
is there's a
 

1583
00:30:44,720 --> 00:30:48,830
is there's a
uvm app you know comes complaining that

1584
00:30:48,830 --> 00:30:48,840
uvm app you know comes complaining that
 

1585
00:30:48,840 --> 00:30:51,350
uvm app you know comes complaining that
um

1586
00:30:51,350 --> 00:30:51,360
um
 

1587
00:30:51,360 --> 00:30:52,870
um
it's complaining that there's some page

1588
00:30:52,870 --> 00:30:52,880
it's complaining that there's some page
 

1589
00:30:52,880 --> 00:30:54,710
it's complaining that there's some page
that we're uh

1590
00:30:54,710 --> 00:30:54,720
that we're uh
 

1591
00:30:54,720 --> 00:30:57,029
that we're uh
trying to unmap is actually not mapped

1592
00:30:57,029 --> 00:30:57,039
trying to unmap is actually not mapped
 

1593
00:30:57,039 --> 00:31:02,470
trying to unmap is actually not mapped
and what could that be

1594
00:31:02,470 --> 00:31:02,480

 

1595
00:31:02,480 --> 00:31:03,909

why would you think even we get this

1596
00:31:03,909 --> 00:31:03,919
why would you think even we get this
 

1597
00:31:03,919 --> 00:31:07,269
why would you think even we get this
panic

1598
00:31:07,269 --> 00:31:07,279

 

1599
00:31:07,279 --> 00:31:13,590

anybody

1600
00:31:13,590 --> 00:31:13,600

 

1601
00:31:13,600 --> 00:31:16,830

what memory is being unmapped here most

1602
00:31:16,830 --> 00:31:16,840
what memory is being unmapped here most
 

1603
00:31:16,840 --> 00:31:21,830
what memory is being unmapped here most
likely

1604
00:31:21,830 --> 00:31:21,840

 

1605
00:31:21,840 --> 00:31:24,310

the one that was lazily allocated and

1606
00:31:24,310 --> 00:31:24,320
the one that was lazily allocated and
 

1607
00:31:24,320 --> 00:31:25,990
the one that was lazily allocated and
not actually allocated

1608
00:31:25,990 --> 00:31:26,000
not actually allocated
 

1609
00:31:26,000 --> 00:31:27,750
not actually allocated
yeah exactly you know the memory that

1610
00:31:27,750 --> 00:31:27,760
yeah exactly you know the memory that
 

1611
00:31:27,760 --> 00:31:29,350
yeah exactly you know the memory that
was lazily allocated but actually

1612
00:31:29,350 --> 00:31:29,360
was lazily allocated but actually
 

1613
00:31:29,360 --> 00:31:31,190
was lazily allocated but actually
hasn't been used yet right and so there

1614
00:31:31,190 --> 00:31:31,200
hasn't been used yet right and so there
 

1615
00:31:31,200 --> 00:31:32,710
hasn't been used yet right and so there
is no physical page for that particular

1616
00:31:32,710 --> 00:31:32,720
is no physical page for that particular
 

1617
00:31:32,720 --> 00:31:34,149
is no physical page for that particular
laserly memory

1618
00:31:34,149 --> 00:31:34,159
laserly memory
 

1619
00:31:34,159 --> 00:31:39,110
laserly memory
and so uh this case when the pt is zero

1620
00:31:39,110 --> 00:31:39,120
and so uh this case when the pt is zero
 

1621
00:31:39,120 --> 00:31:41,190
and so uh this case when the pt is zero
you know there's no mapping yet it's not

1622
00:31:41,190 --> 00:31:41,200
you know there's no mapping yet it's not
 

1623
00:31:41,200 --> 00:31:42,630
you know there's no mapping yet it's not
really a panic you know this is actually

1624
00:31:42,630 --> 00:31:42,640
really a panic you know this is actually
 

1625
00:31:42,640 --> 00:31:44,230
really a panic you know this is actually
what we expected you know it could

1626
00:31:44,230 --> 00:31:44,240
what we expected you know it could
 

1627
00:31:44,240 --> 00:31:44,830
what we expected you know it could
happen

1628
00:31:44,830 --> 00:31:44,840
happen
 

1629
00:31:44,840 --> 00:31:47,509
happen
right and in fact for that page we just

1630
00:31:47,509 --> 00:31:47,519
right and in fact for that page we just
 

1631
00:31:47,519 --> 00:31:48,549
right and in fact for that page we just
don't have to do anything

1632
00:31:48,549 --> 00:31:48,559
don't have to do anything
 

1633
00:31:48,559 --> 00:31:50,310
don't have to do anything
right we can just continue you know go

1634
00:31:50,310 --> 00:31:50,320
right we can just continue you know go
 

1635
00:31:50,320 --> 00:31:53,509
right we can just continue you know go
to the next page

1636
00:31:53,509 --> 00:31:53,519

 

1637
00:31:53,519 --> 00:31:58,630

does that make sense so let's do that

1638
00:31:58,630 --> 00:31:58,640
does that make sense so let's do that
 

1639
00:31:58,640 --> 00:32:00,710
does that make sense so let's do that
and now let's do the echo high and boom

1640
00:32:00,710 --> 00:32:00,720
and now let's do the echo high and boom
 

1641
00:32:00,720 --> 00:32:02,310
and now let's do the echo high and boom
we got two page faults and but high

1642
00:32:02,310 --> 00:32:02,320
we got two page faults and but high
 

1643
00:32:02,320 --> 00:32:02,789
we got two page faults and but high
works

1644
00:32:02,789 --> 00:32:02,799
works
 

1645
00:32:02,799 --> 00:32:06,230
works
and so we're basically uh uh

1646
00:32:06,230 --> 00:32:06,240
and so we're basically uh uh
 

1647
00:32:06,240 --> 00:32:08,789
and so we're basically uh uh
you know have sort of a very basic

1648
00:32:08,789 --> 00:32:08,799
you know have sort of a very basic
 

1649
00:32:08,799 --> 00:32:09,590
you know have sort of a very basic
minimal

1650
00:32:09,590 --> 00:32:09,600
minimal
 

1651
00:32:09,600 --> 00:32:14,630
minimal
lazy allocation scheme working

1652
00:32:14,630 --> 00:32:14,640
lazy allocation scheme working
 

1653
00:32:14,640 --> 00:32:17,669
lazy allocation scheme working
any questions about this sorry i didn't

1654
00:32:17,669 --> 00:32:17,679
any questions about this sorry i didn't
 

1655
00:32:17,679 --> 00:32:18,630
any questions about this sorry i didn't
really follow

1656
00:32:18,630 --> 00:32:18,640
really follow
 

1657
00:32:18,640 --> 00:32:20,789
really follow
why you could just continue uh could you

1658
00:32:20,789 --> 00:32:20,799
why you could just continue uh could you
 

1659
00:32:20,799 --> 00:32:21,990
why you could just continue uh could you
explain that again

1660
00:32:21,990 --> 00:32:22,000
explain that again
 

1661
00:32:22,000 --> 00:32:25,750
explain that again
yeah um so the

1662
00:32:25,750 --> 00:32:25,760
yeah um so the
 

1663
00:32:25,760 --> 00:32:28,310
yeah um so the
the bug indicated that we had that we're

1664
00:32:28,310 --> 00:32:28,320
the bug indicated that we had that we're
 

1665
00:32:28,320 --> 00:32:29,750
the bug indicated that we had that we're
trying to free page

1666
00:32:29,750 --> 00:32:29,760
trying to free page
 

1667
00:32:29,760 --> 00:32:32,950
trying to free page
that actually is not mapped and

1668
00:32:32,950 --> 00:32:32,960
that actually is not mapped and
 

1669
00:32:32,960 --> 00:32:34,549
that actually is not mapped and
you know how could that happen well the

1670
00:32:34,549 --> 00:32:34,559
you know how could that happen well the
 

1671
00:32:34,559 --> 00:32:37,110
you know how could that happen well the
only reason that could happen is because

1672
00:32:37,110 --> 00:32:37,120
only reason that could happen is because
 

1673
00:32:37,120 --> 00:32:40,630
only reason that could happen is because
s-break moved up key size

1674
00:32:40,630 --> 00:32:40,640
s-break moved up key size
 

1675
00:32:40,640 --> 00:32:42,310
s-break moved up key size
but never used the application never

1676
00:32:42,310 --> 00:32:42,320
but never used the application never
 

1677
00:32:42,320 --> 00:32:44,149
but never used the application never
used in that memory and so

1678
00:32:44,149 --> 00:32:44,159
used in that memory and so
 

1679
00:32:44,159 --> 00:32:45,750
used in that memory and so
it actually has no mapping yet because

1680
00:32:45,750 --> 00:32:45,760
it actually has no mapping yet because
 

1681
00:32:45,760 --> 00:32:47,509
it actually has no mapping yet because
it was actually not allocated

1682
00:32:47,509 --> 00:32:47,519
it was actually not allocated
 

1683
00:32:47,519 --> 00:32:48,950
it was actually not allocated
right because we're lazily allocating

1684
00:32:48,950 --> 00:32:48,960
right because we're lazily allocating
 

1685
00:32:48,960 --> 00:32:50,630
right because we're lazily allocating
we're only allocating physical memory

1686
00:32:50,630 --> 00:32:50,640
we're only allocating physical memory
 

1687
00:32:50,640 --> 00:32:51,750
we're only allocating physical memory
for those pages

1688
00:32:51,750 --> 00:32:51,760
for those pages
 

1689
00:32:51,760 --> 00:32:53,990
for those pages
when we need it if we didn't need it

1690
00:32:53,990 --> 00:32:54,000
when we need it if we didn't need it
 

1691
00:32:54,000 --> 00:32:55,350
when we need it if we didn't need it
then there will be no mapping and so

1692
00:32:55,350 --> 00:32:55,360
then there will be no mapping and so
 

1693
00:32:55,360 --> 00:32:56,470
then there will be no mapping and so
it's totally reasonable that there

1694
00:32:56,470 --> 00:32:56,480
it's totally reasonable that there
 

1695
00:32:56,480 --> 00:32:58,230
it's totally reasonable that there
actually is going to be a case

1696
00:32:58,230 --> 00:32:58,240
actually is going to be a case
 

1697
00:32:58,240 --> 00:33:00,470
actually is going to be a case
where there's no mapping for a virtual

1698
00:33:00,470 --> 00:33:00,480
where there's no mapping for a virtual
 

1699
00:33:00,480 --> 00:33:01,909
where there's no mapping for a virtual
address because it actually wasn't

1700
00:33:01,909 --> 00:33:01,919
address because it actually wasn't
 

1701
00:33:01,919 --> 00:33:03,110
address because it actually wasn't
allocated yet

1702
00:33:03,110 --> 00:33:03,120
allocated yet
 

1703
00:33:03,120 --> 00:33:05,269
allocated yet
and for that case we just have to do

1704
00:33:05,269 --> 00:33:05,279
and for that case we just have to do
 

1705
00:33:05,279 --> 00:33:06,950
and for that case we just have to do
nothing you know

1706
00:33:06,950 --> 00:33:06,960
nothing you know
 

1707
00:33:06,960 --> 00:33:08,630
nothing you know
uh we can't free the page correctly

1708
00:33:08,630 --> 00:33:08,640
uh we can't free the page correctly
 

1709
00:33:08,640 --> 00:33:10,310
uh we can't free the page correctly
there is no free page and so the best

1710
00:33:10,310 --> 00:33:10,320
there is no free page and so the best
 

1711
00:33:10,320 --> 00:33:11,909
there is no free page and so the best
thing is to do continue and just go to

1712
00:33:11,909 --> 00:33:11,919
thing is to do continue and just go to
 

1713
00:33:11,919 --> 00:33:12,710
thing is to do continue and just go to
the next page and

1714
00:33:12,710 --> 00:33:12,720
the next page and
 

1715
00:33:12,720 --> 00:33:15,750
the next page and
look okay that makes sense

1716
00:33:15,750 --> 00:33:15,760
look okay that makes sense
 

1717
00:33:15,760 --> 00:33:17,750
look okay that makes sense
thank you yeah we didn't know do

1718
00:33:17,750 --> 00:33:17,760
thank you yeah we didn't know do
 

1719
00:33:17,760 --> 00:33:19,110
thank you yeah we didn't know do
continue but basically

1720
00:33:19,110 --> 00:33:19,120
continue but basically
 

1721
00:33:19,120 --> 00:33:21,350
continue but basically
you know just kept going then we would

1722
00:33:21,350 --> 00:33:21,360
you know just kept going then we would
 

1723
00:33:21,360 --> 00:33:25,669
you know just kept going then we would
actually free the page and i'll be

1724
00:33:25,669 --> 00:33:25,679

 

1725
00:33:25,679 --> 00:33:27,669

that's why it continues there makes

1726
00:33:27,669 --> 00:33:27,679
that's why it continues there makes
 

1727
00:33:27,679 --> 00:33:30,710
that's why it continues there makes
sense

1728
00:33:30,710 --> 00:33:30,720

 

1729
00:33:30,720 --> 00:33:33,990

uh another question in

1730
00:33:33,990 --> 00:33:34,000
uh another question in
 

1731
00:33:34,000 --> 00:33:37,110
uh another question in
uvm on map i assume the panic was that

1732
00:33:37,110 --> 00:33:37,120
uvm on map i assume the panic was that
 

1733
00:33:37,120 --> 00:33:37,990
uvm on map i assume the panic was that
was there

1734
00:33:37,990 --> 00:33:38,000
was there
 

1735
00:33:38,000 --> 00:33:41,029
was there
was there for a reason so a more correct

1736
00:33:41,029 --> 00:33:41,039
was there for a reason so a more correct
 

1737
00:33:41,039 --> 00:33:43,029
was there for a reason so a more correct
a more reasonable implementation is to

1738
00:33:43,029 --> 00:33:43,039
a more reasonable implementation is to
 

1739
00:33:43,039 --> 00:33:44,470
a more reasonable implementation is to
have two versions

1740
00:33:44,470 --> 00:33:44,480
have two versions
 

1741
00:33:44,480 --> 00:33:45,669
have two versions
and we would use the one that doesn't

1742
00:33:45,669 --> 00:33:45,679
and we would use the one that doesn't
 

1743
00:33:45,679 --> 00:33:48,070
and we would use the one that doesn't
panic yeah okay

1744
00:33:48,070 --> 00:33:48,080
panic yeah okay
 

1745
00:33:48,080 --> 00:33:50,389
panic yeah okay
why was the uvm the panic there well

1746
00:33:50,389 --> 00:33:50,399
why was the uvm the panic there well
 

1747
00:33:50,399 --> 00:33:52,630
why was the uvm the panic there well
there was basically an invariant

1748
00:33:52,630 --> 00:33:52,640
there was basically an invariant
 

1749
00:33:52,640 --> 00:33:55,029
there was basically an invariant
that used to be true for the unmodified

1750
00:33:55,029 --> 00:33:55,039
that used to be true for the unmodified
 

1751
00:33:55,039 --> 00:33:55,909
that used to be true for the unmodified
xv6

1752
00:33:55,909 --> 00:33:55,919
xv6
 

1753
00:33:55,919 --> 00:33:57,909
xv6
right actually unmodified xc6 should

1754
00:33:57,909 --> 00:33:57,919
right actually unmodified xc6 should
 

1755
00:33:57,919 --> 00:33:59,509
right actually unmodified xc6 should
never have a case where there's user

1756
00:33:59,509 --> 00:33:59,519
never have a case where there's user
 

1757
00:33:59,519 --> 00:34:01,350
never have a case where there's user
memory that was not mapped

1758
00:34:01,350 --> 00:34:01,360
memory that was not mapped
 

1759
00:34:01,360 --> 00:34:03,269
memory that was not mapped
and so therefore the panel goes up we

1760
00:34:03,269 --> 00:34:03,279
and so therefore the panel goes up we
 

1761
00:34:03,279 --> 00:34:05,430
and so therefore the panel goes up we
now changed the design of xc6

1762
00:34:05,430 --> 00:34:05,440
now changed the design of xc6
 

1763
00:34:05,440 --> 00:34:07,669
now changed the design of xc6
and so we have to just uh and this

1764
00:34:07,669 --> 00:34:07,679
and so we have to just uh and this
 

1765
00:34:07,679 --> 00:34:08,710
and so we have to just uh and this
invariant is just not

1766
00:34:08,710 --> 00:34:08,720
invariant is just not
 

1767
00:34:08,720 --> 00:34:10,389
invariant is just not
no longer true and so we've got to

1768
00:34:10,389 --> 00:34:10,399
no longer true and so we've got to
 

1769
00:34:10,399 --> 00:34:12,389
no longer true and so we've got to
remove the panic and you know

1770
00:34:12,389 --> 00:34:12,399
remove the panic and you know
 

1771
00:34:12,399 --> 00:34:17,430
remove the panic and you know
uh because anybody is just not true

1772
00:34:17,430 --> 00:34:17,440

 

1773
00:34:17,440 --> 00:34:20,629

legitimately not true anymore

1774
00:34:20,629 --> 00:34:20,639
legitimately not true anymore
 

1775
00:34:20,639 --> 00:34:23,669
legitimately not true anymore
i see thanks

1776
00:34:23,669 --> 00:34:23,679

 

1777
00:34:23,679 --> 00:34:27,349

does this make sense so um

1778
00:34:27,349 --> 00:34:27,359
does this make sense so um
 

1779
00:34:27,359 --> 00:34:30,629
does this make sense so um
so a couple of comments

1780
00:34:30,629 --> 00:34:30,639
so a couple of comments
 

1781
00:34:30,639 --> 00:34:33,109
so a couple of comments
this will hopefully help a lot with the

1782
00:34:33,109 --> 00:34:33,119
this will hopefully help a lot with the
 

1783
00:34:33,119 --> 00:34:35,109
this will hopefully help a lot with the
next lap in fact this is like one of the

1784
00:34:35,109 --> 00:34:35,119
next lap in fact this is like one of the
 

1785
00:34:35,119 --> 00:34:37,349
next lap in fact this is like one of the
three components of the labs of the next

1786
00:34:37,349 --> 00:34:37,359
three components of the labs of the next
 

1787
00:34:37,359 --> 00:34:38,950
three components of the labs of the next
lap so it's one of the first things you

1788
00:34:38,950 --> 00:34:38,960
lap so it's one of the first things you
 

1789
00:34:38,960 --> 00:34:40,069
lap so it's one of the first things you
have to do

1790
00:34:40,069 --> 00:34:40,079
have to do
 

1791
00:34:40,079 --> 00:34:41,589
have to do
and hopefully this will save you some

1792
00:34:41,589 --> 00:34:41,599
and hopefully this will save you some
 

1793
00:34:41,599 --> 00:34:43,589
and hopefully this will save you some
time uh maybe make up for

1794
00:34:43,589 --> 00:34:43,599
time uh maybe make up for
 

1795
00:34:43,599 --> 00:34:44,790
time uh maybe make up for
you know all the pain that you went

1796
00:34:44,790 --> 00:34:44,800
you know all the pain that you went
 

1797
00:34:44,800 --> 00:34:47,510
you know all the pain that you went
through in the patrol to

1798
00:34:47,510 --> 00:34:47,520
through in the patrol to
 

1799
00:34:47,520 --> 00:34:50,790
through in the patrol to
lab but clearly it's not enough

1800
00:34:50,790 --> 00:34:50,800
lab but clearly it's not enough
 

1801
00:34:50,800 --> 00:34:53,829
lab but clearly it's not enough
right so like what things are you know

1802
00:34:53,829 --> 00:34:53,839
right so like what things are you know
 

1803
00:34:53,839 --> 00:34:55,190
right so like what things are you know
we made these changes but more things

1804
00:34:55,190 --> 00:34:55,200
we made these changes but more things
 

1805
00:34:55,200 --> 00:35:00,950
we made these changes but more things
are still probably broken

1806
00:35:00,950 --> 00:35:00,960

 

1807
00:35:00,960 --> 00:35:02,630

now one radio was mentioned i actually

1808
00:35:02,630 --> 00:35:02,640
now one radio was mentioned i actually
 

1809
00:35:02,640 --> 00:35:04,470
now one radio was mentioned i actually
didn't do the check whether actually the

1810
00:35:04,470 --> 00:35:04,480
didn't do the check whether actually the
 

1811
00:35:04,480 --> 00:35:05,510
didn't do the check whether actually the
virtual address

1812
00:35:05,510 --> 00:35:05,520
virtual address
 

1813
00:35:05,520 --> 00:35:07,349
virtual address
was below p size correct which we

1814
00:35:07,349 --> 00:35:07,359
was below p size correct which we
 

1815
00:35:07,359 --> 00:35:08,790
was below p size correct which we
probably should do

1816
00:35:08,790 --> 00:35:08,800
probably should do
 

1817
00:35:08,800 --> 00:35:17,430
probably should do
any other things that might be broken

1818
00:35:17,430 --> 00:35:17,440
any other things that might be broken
 

1819
00:35:17,440 --> 00:35:24,950
any other things that might be broken
anybody

1820
00:35:24,950 --> 00:35:24,960

 

1821
00:35:24,960 --> 00:35:27,190

the number of bytes to grow the process

1822
00:35:27,190 --> 00:35:27,200
the number of bytes to grow the process
 

1823
00:35:27,200 --> 00:35:28,310
the number of bytes to grow the process
by an s break

1824
00:35:28,310 --> 00:35:28,320
by an s break
 

1825
00:35:28,320 --> 00:35:30,710
by an s break
is an int and not an unsigned end so

1826
00:35:30,710 --> 00:35:30,720
is an int and not an unsigned end so
 

1827
00:35:30,720 --> 00:35:33,510
is an int and not an unsigned end so
negative numbers could be used

1828
00:35:33,510 --> 00:35:33,520
negative numbers could be used
 

1829
00:35:33,520 --> 00:35:34,870
negative numbers could be used
yes and then negative numbers can use

1830
00:35:34,870 --> 00:35:34,880
yes and then negative numbers can use
 

1831
00:35:34,880 --> 00:35:36,069
yes and then negative numbers can use
and that means shrinking the address

1832
00:35:36,069 --> 00:35:36,079
and that means shrinking the address
 

1833
00:35:36,079 --> 00:35:36,550
and that means shrinking the address
space

1834
00:35:36,550 --> 00:35:36,560
space
 

1835
00:35:36,560 --> 00:35:38,069
space
right and so we shrink the address space

1836
00:35:38,069 --> 00:35:38,079
right and so we shrink the address space
 

1837
00:35:38,079 --> 00:35:40,069
right and so we shrink the address space
we also have to be a little bit careful

1838
00:35:40,069 --> 00:35:40,079
we also have to be a little bit careful
 

1839
00:35:40,079 --> 00:35:41,910
we also have to be a little bit careful
uh so it turns out there's a whole bunch

1840
00:35:41,910 --> 00:35:41,920
uh so it turns out there's a whole bunch
 

1841
00:35:41,920 --> 00:35:43,430
uh so it turns out there's a whole bunch
of as usual uh

1842
00:35:43,430 --> 00:35:43,440
of as usual uh
 

1843
00:35:43,440 --> 00:35:44,550
of as usual uh
in an operating system there are a whole

1844
00:35:44,550 --> 00:35:44,560
in an operating system there are a whole
 

1845
00:35:44,560 --> 00:35:46,069
in an operating system there are a whole
bunch of different cases right where in

1846
00:35:46,069 --> 00:35:46,079
bunch of different cases right where in
 

1847
00:35:46,079 --> 00:35:46,870
bunch of different cases right where in
which

1848
00:35:46,870 --> 00:35:46,880
which
 

1849
00:35:46,880 --> 00:35:48,550
which
uh we're going to be looking at this

1850
00:35:48,550 --> 00:35:48,560
uh we're going to be looking at this
 

1851
00:35:48,560 --> 00:35:50,069
uh we're going to be looking at this
particular page table entry

1852
00:35:50,069 --> 00:35:50,079
particular page table entry
 

1853
00:35:50,079 --> 00:35:51,510
particular page table entry
and for all those different cases we

1854
00:35:51,510 --> 00:35:51,520
and for all those different cases we
 

1855
00:35:51,520 --> 00:35:53,190
and for all those different cases we
might actually have to modify xj6

1856
00:35:53,190 --> 00:35:53,200
might actually have to modify xj6
 

1857
00:35:53,200 --> 00:35:54,310
might actually have to modify xj6
slightly

1858
00:35:54,310 --> 00:35:54,320
slightly
 

1859
00:35:54,320 --> 00:35:55,990
slightly
and and that's exactly what basically

1860
00:35:55,990 --> 00:35:56,000
and and that's exactly what basically
 

1861
00:35:56,000 --> 00:35:58,230
and and that's exactly what basically
the lab is about is you know doing good

1862
00:35:58,230 --> 00:35:58,240
the lab is about is you know doing good
 

1863
00:35:58,240 --> 00:35:59,829
the lab is about is you know doing good
enough job that basically you can pass

1864
00:35:59,829 --> 00:35:59,839
enough job that basically you can pass
 

1865
00:35:59,839 --> 00:36:00,870
enough job that basically you can pass
user tests

1866
00:36:00,870 --> 00:36:00,880
user tests
 

1867
00:36:00,880 --> 00:36:02,550
user tests
and user tests will stress a whole bunch

1868
00:36:02,550 --> 00:36:02,560
and user tests will stress a whole bunch
 

1869
00:36:02,560 --> 00:36:03,910
and user tests will stress a whole bunch
of other cases that

1870
00:36:03,910 --> 00:36:03,920
of other cases that
 

1871
00:36:03,920 --> 00:36:07,510
of other cases that
you will need to deal with

1872
00:36:07,510 --> 00:36:07,520

 

1873
00:36:07,520 --> 00:36:11,270

okay

1874
00:36:11,270 --> 00:36:11,280

 

1875
00:36:11,280 --> 00:36:18,230

any questions so far

1876
00:36:18,230 --> 00:36:18,240

 

1877
00:36:18,240 --> 00:36:20,310

okay let me uh in that case i want to

1878
00:36:20,310 --> 00:36:20,320
okay let me uh in that case i want to
 

1879
00:36:20,320 --> 00:36:21,349
okay let me uh in that case i want to
talk about a bunch of

1880
00:36:21,349 --> 00:36:21,359
talk about a bunch of
 

1881
00:36:21,359 --> 00:36:25,430
talk about a bunch of
other usages or cool

1882
00:36:25,430 --> 00:36:25,440
other usages or cool
 

1883
00:36:25,440 --> 00:36:27,430
other usages or cool
things you can do once you have page

1884
00:36:27,430 --> 00:36:27,440
things you can do once you have page
 

1885
00:36:27,440 --> 00:36:29,349
things you can do once you have page
faults and page tables and you update

1886
00:36:29,349 --> 00:36:29,359
faults and page tables and you update
 

1887
00:36:29,359 --> 00:36:31,589
faults and page tables and you update
them dynamically

1888
00:36:31,589 --> 00:36:31,599
them dynamically
 

1889
00:36:31,599 --> 00:36:34,950
them dynamically
another one that is almost trivial

1890
00:36:34,950 --> 00:36:34,960
another one that is almost trivial
 

1891
00:36:34,960 --> 00:36:38,390
another one that is almost trivial
but you know commonly used is

1892
00:36:38,390 --> 00:36:38,400
but you know commonly used is
 

1893
00:36:38,400 --> 00:36:42,470
but you know commonly used is
what's called zero fill

1894
00:36:42,470 --> 00:36:42,480

 

1895
00:36:42,480 --> 00:36:51,270

zero fill on demand

1896
00:36:51,270 --> 00:36:51,280

 

1897
00:36:51,280 --> 00:36:54,310

uh it turns out that in uh

1898
00:36:54,310 --> 00:36:54,320
uh it turns out that in uh
 

1899
00:36:54,320 --> 00:36:55,750
uh it turns out that in uh
operating systems you know there are

1900
00:36:55,750 --> 00:36:55,760
operating systems you know there are
 

1901
00:36:55,760 --> 00:36:58,150
operating systems you know there are
many null pages um

1902
00:36:58,150 --> 00:36:58,160
many null pages um
 

1903
00:36:58,160 --> 00:37:01,030
many null pages um
and uh so for example if you look at the

1904
00:37:01,030 --> 00:37:01,040
and uh so for example if you look at the
 

1905
00:37:01,040 --> 00:37:01,270
and uh so for example if you look at the
uh

1906
00:37:01,270 --> 00:37:01,280
uh
 

1907
00:37:01,280 --> 00:37:04,470
uh
an address space in user space uh

1908
00:37:04,470 --> 00:37:04,480
an address space in user space uh
 

1909
00:37:04,480 --> 00:37:06,790
an address space in user space uh
you know xp6 doesn't really is not

1910
00:37:06,790 --> 00:37:06,800
you know xp6 doesn't really is not
 

1911
00:37:06,800 --> 00:37:08,790
you know xp6 doesn't really is not
advanced uh but like if you look at the

1912
00:37:08,790 --> 00:37:08,800
advanced uh but like if you look at the
 

1913
00:37:08,800 --> 00:37:10,630
advanced uh but like if you look at the
layout of the binary

1914
00:37:10,630 --> 00:37:10,640
layout of the binary
 

1915
00:37:10,640 --> 00:37:12,230
layout of the binary
uh and ain't it out you know there's

1916
00:37:12,230 --> 00:37:12,240
uh and ain't it out you know there's
 

1917
00:37:12,240 --> 00:37:14,150
uh and ain't it out you know there's
some text there's what's called the data

1918
00:37:14,150 --> 00:37:14,160
some text there's what's called the data
 

1919
00:37:14,160 --> 00:37:15,030
some text there's what's called the data
segment

1920
00:37:15,030 --> 00:37:15,040
segment
 

1921
00:37:15,040 --> 00:37:16,390
segment
and there is typically also about

1922
00:37:16,390 --> 00:37:16,400
and there is typically also about
 

1923
00:37:16,400 --> 00:37:20,950
and there is typically also about
something that's called the bss segment

1924
00:37:20,950 --> 00:37:20,960

 

1925
00:37:20,960 --> 00:37:22,470

and so when the compiler you know

1926
00:37:22,470 --> 00:37:22,480
and so when the compiler you know
 

1927
00:37:22,480 --> 00:37:24,069
and so when the compiler you know
produces uh

1928
00:37:24,069 --> 00:37:24,079
produces uh
 

1929
00:37:24,079 --> 00:37:25,589
produces uh
the binary you know basically fills in

1930
00:37:25,589 --> 00:37:25,599
the binary you know basically fills in
 

1931
00:37:25,599 --> 00:37:27,430
the binary you know basically fills in
these three segments the text is you

1932
00:37:27,430 --> 00:37:27,440
these three segments the text is you
 

1933
00:37:27,440 --> 00:37:28,390
these three segments the text is you
know the instructions

1934
00:37:28,390 --> 00:37:28,400
know the instructions
 

1935
00:37:28,400 --> 00:37:30,069
know the instructions
no the data is basically global

1936
00:37:30,069 --> 00:37:30,079
no the data is basically global
 

1937
00:37:30,079 --> 00:37:31,990
no the data is basically global
variables that actually have a value

1938
00:37:31,990 --> 00:37:32,000
variables that actually have a value
 

1939
00:37:32,000 --> 00:37:35,430
variables that actually have a value
that is not zero so an initialized uh

1940
00:37:35,430 --> 00:37:35,440
that is not zero so an initialized uh
 

1941
00:37:35,440 --> 00:37:41,829
that is not zero so an initialized uh
data

1942
00:37:41,829 --> 00:37:41,839

 

1943
00:37:41,839 --> 00:37:44,230

and bbzs is basically a description that

1944
00:37:44,230 --> 00:37:44,240
and bbzs is basically a description that
 

1945
00:37:44,240 --> 00:37:44,950
and bbzs is basically a description that
says

1946
00:37:44,950 --> 00:37:44,960
says
 

1947
00:37:44,960 --> 00:37:46,630
says
well there's a whole bunch of variables

1948
00:37:46,630 --> 00:37:46,640
well there's a whole bunch of variables
 

1949
00:37:46,640 --> 00:37:48,710
well there's a whole bunch of variables
and at least basically their sizes

1950
00:37:48,710 --> 00:37:48,720
and at least basically their sizes
 

1951
00:37:48,720 --> 00:37:51,829
and at least basically their sizes
and they also be zero and the reason

1952
00:37:51,829 --> 00:37:51,839
and they also be zero and the reason
 

1953
00:37:51,839 --> 00:37:53,190
and they also be zero and the reason
that they're basically not

1954
00:37:53,190 --> 00:37:53,200
that they're basically not
 

1955
00:37:53,200 --> 00:37:55,670
that they're basically not
listed out you know or the memory is not

1956
00:37:55,670 --> 00:37:55,680
listed out you know or the memory is not
 

1957
00:37:55,680 --> 00:37:57,109
listed out you know or the memory is not
right there in the file is because you

1958
00:37:57,109 --> 00:37:57,119
right there in the file is because you
 

1959
00:37:57,119 --> 00:37:57,910
right there in the file is because you
know that'll save

1960
00:37:57,910 --> 00:37:57,920
know that'll save
 

1961
00:37:57,920 --> 00:37:59,030
know that'll save
a lot of you know for example if you

1962
00:37:59,030 --> 00:37:59,040
a lot of you know for example if you
 

1963
00:37:59,040 --> 00:38:01,349
a lot of you know for example if you
declare a big matrix in c

1964
00:38:01,349 --> 00:38:01,359
declare a big matrix in c
 

1965
00:38:01,359 --> 00:38:02,710
declare a big matrix in c
on the top of the file as a global

1966
00:38:02,710 --> 00:38:02,720
on the top of the file as a global
 

1967
00:38:02,720 --> 00:38:04,470
on the top of the file as a global
variable and it's automatically going to

1968
00:38:04,470 --> 00:38:04,480
variable and it's automatically going to
 

1969
00:38:04,480 --> 00:38:06,150
variable and it's automatically going to
distribute all zeros

1970
00:38:06,150 --> 00:38:06,160
distribute all zeros
 

1971
00:38:06,160 --> 00:38:08,550
distribute all zeros
why allocate all that space in the file

1972
00:38:08,550 --> 00:38:08,560
why allocate all that space in the file
 

1973
00:38:08,560 --> 00:38:10,230
why allocate all that space in the file
uh just like note that basically you

1974
00:38:10,230 --> 00:38:10,240
uh just like note that basically you
 

1975
00:38:10,240 --> 00:38:11,750
uh just like note that basically you
know for this particular variable

1976
00:38:11,750 --> 00:38:11,760
know for this particular variable
 

1977
00:38:11,760 --> 00:38:13,589
know for this particular variable
you know the in the content should be

1978
00:38:13,589 --> 00:38:13,599
you know the in the content should be
 

1979
00:38:13,599 --> 00:38:15,190
you know the in the content should be
zero

1980
00:38:15,190 --> 00:38:15,200
zero
 

1981
00:38:15,200 --> 00:38:17,270
zero
and then basically on exec on a normal

1982
00:38:17,270 --> 00:38:17,280
and then basically on exec on a normal
 

1983
00:38:17,280 --> 00:38:18,790
and then basically on exec on a normal
operating system on exec

1984
00:38:18,790 --> 00:38:18,800
operating system on exec
 

1985
00:38:18,800 --> 00:38:22,710
operating system on exec
you know we'll look at these three uh uh

1986
00:38:22,710 --> 00:38:22,720
you know we'll look at these three uh uh
 

1987
00:38:22,720 --> 00:38:24,470
you know we'll look at these three uh uh
segments and that's the usual thing that

1988
00:38:24,470 --> 00:38:24,480
segments and that's the usual thing that
 

1989
00:38:24,480 --> 00:38:26,710
segments and that's the usual thing that
xv6 does you know for text and data

1990
00:38:26,710 --> 00:38:26,720
xv6 does you know for text and data
 

1991
00:38:26,720 --> 00:38:28,630
xv6 does you know for text and data
but they're from bess you know it will

1992
00:38:28,630 --> 00:38:28,640
but they're from bess you know it will
 

1993
00:38:28,640 --> 00:38:29,829
but they're from bess you know it will
allocate you know

1994
00:38:29,829 --> 00:38:29,839
allocate you know
 

1995
00:38:29,839 --> 00:38:32,550
allocate you know
memory uh to hold the bss and basically

1996
00:38:32,550 --> 00:38:32,560
memory uh to hold the bss and basically
 

1997
00:38:32,560 --> 00:38:33,990
memory uh to hold the bss and basically
stick zeros in there

1998
00:38:33,990 --> 00:38:34,000
stick zeros in there
 

1999
00:38:34,000 --> 00:38:37,670
stick zeros in there
so you know allocate an address space

2000
00:38:37,670 --> 00:38:37,680
so you know allocate an address space
 

2001
00:38:37,680 --> 00:38:39,990
so you know allocate an address space
takes the data in it and sticks to avoid

2002
00:38:39,990 --> 00:38:40,000
takes the data in it and sticks to avoid
 

2003
00:38:40,000 --> 00:38:41,670
takes the data in it and sticks to avoid
it and then you know basically

2004
00:38:41,670 --> 00:38:41,680
it and then you know basically
 

2005
00:38:41,680 --> 00:38:45,190
it and then you know basically
uh you know the equivalent of the bzs

2006
00:38:45,190 --> 00:38:45,200
uh you know the equivalent of the bzs
 

2007
00:38:45,200 --> 00:38:45,990
uh you know the equivalent of the bzs
you know all the global

2008
00:38:45,990 --> 00:38:46,000
you know all the global
 

2009
00:38:46,000 --> 00:38:47,270
you know all the global
variables that are basically zero and

2010
00:38:47,270 --> 00:38:47,280
variables that are basically zero and
 

2011
00:38:47,280 --> 00:38:51,349
variables that are basically zero and
there may be many many pages

2012
00:38:51,349 --> 00:38:51,359

 

2013
00:38:51,359 --> 00:38:52,710

and all those pages basically have to

2014
00:38:52,710 --> 00:38:52,720
and all those pages basically have to
 

2015
00:38:52,720 --> 00:38:55,430
and all those pages basically have to
have the content zero

2016
00:38:55,430 --> 00:38:55,440
have the content zero
 

2017
00:38:55,440 --> 00:38:57,030
have the content zero
so that's the virtual address space and

2018
00:38:57,030 --> 00:38:57,040
so that's the virtual address space and
 

2019
00:38:57,040 --> 00:38:58,950
so that's the virtual address space and
so typical trick you know to do is to

2020
00:38:58,950 --> 00:38:58,960
so typical trick you know to do is to
 

2021
00:38:58,960 --> 00:38:59,829
so typical trick you know to do is to
say like wow

2022
00:38:59,829 --> 00:38:59,839
say like wow
 

2023
00:38:59,839 --> 00:39:01,349
say like wow
i got so many pages that need to have

2024
00:39:01,349 --> 00:39:01,359
i got so many pages that need to have
 

2025
00:39:01,359 --> 00:39:02,950
i got so many pages that need to have
zero what i'm going to do

2026
00:39:02,950 --> 00:39:02,960
zero what i'm going to do
 

2027
00:39:02,960 --> 00:39:05,990
zero what i'm going to do
in physical memory this is the virtual

2028
00:39:05,990 --> 00:39:06,000
in physical memory this is the virtual
 

2029
00:39:06,000 --> 00:39:07,190
in physical memory this is the virtual
address space

2030
00:39:07,190 --> 00:39:07,200
address space
 

2031
00:39:07,200 --> 00:39:08,790
address space
and it's the physical address you know

2032
00:39:08,790 --> 00:39:08,800
and it's the physical address you know
 

2033
00:39:08,800 --> 00:39:11,109
and it's the physical address you know
memory uh what i'm going to really do is

2034
00:39:11,109 --> 00:39:11,119
memory uh what i'm going to really do is
 

2035
00:39:11,119 --> 00:39:14,230
memory uh what i'm going to really do is
i'm just going to allocate one zero page

2036
00:39:14,230 --> 00:39:14,240
i'm just going to allocate one zero page
 

2037
00:39:14,240 --> 00:39:16,710
i'm just going to allocate one zero page
i fill it with zeros and basically map

2038
00:39:16,710 --> 00:39:16,720
i fill it with zeros and basically map
 

2039
00:39:16,720 --> 00:39:18,470
i fill it with zeros and basically map
all the other pages

2040
00:39:18,470 --> 00:39:18,480
all the other pages
 

2041
00:39:18,480 --> 00:39:24,069
all the other pages
to that one page

2042
00:39:24,069 --> 00:39:24,079

 

2043
00:39:24,079 --> 00:39:26,550

you know saving myself you know lots you

2044
00:39:26,550 --> 00:39:26,560
you know saving myself you know lots you
 

2045
00:39:26,560 --> 00:39:27,990
you know saving myself you know lots you
know lots of physical memory at least at

2046
00:39:27,990 --> 00:39:28,000
know lots of physical memory at least at
 

2047
00:39:28,000 --> 00:39:29,430
know lots of physical memory at least at
startup

2048
00:39:29,430 --> 00:39:29,440
startup
 

2049
00:39:29,440 --> 00:39:31,270
startup
um and of course those mappings has to

2050
00:39:31,270 --> 00:39:31,280
um and of course those mappings has to
 

2051
00:39:31,280 --> 00:39:33,589
um and of course those mappings has to
be limit care uh dominance care

2052
00:39:33,589 --> 00:39:33,599
be limit care uh dominance care
 

2053
00:39:33,599 --> 00:39:35,990
be limit care uh dominance care
we can't market you know we cannot allow

2054
00:39:35,990 --> 00:39:36,000
we can't market you know we cannot allow
 

2055
00:39:36,000 --> 00:39:37,589
we can't market you know we cannot allow
rights to it right because everybody's

2056
00:39:37,589 --> 00:39:37,599
rights to it right because everybody's
 

2057
00:39:37,599 --> 00:39:38,870
rights to it right because everybody's
relying on the fact that it actually

2058
00:39:38,870 --> 00:39:38,880
relying on the fact that it actually
 

2059
00:39:38,880 --> 00:39:39,589
relying on the fact that it actually
stays zero

2060
00:39:39,589 --> 00:39:39,599
stays zero
 

2061
00:39:39,599 --> 00:39:43,349
stays zero
so we just map it read only

2062
00:39:43,349 --> 00:39:43,359
so we just map it read only
 

2063
00:39:43,359 --> 00:39:44,950
so we just map it read only
and then at some point when an

2064
00:39:44,950 --> 00:39:44,960
and then at some point when an
 

2065
00:39:44,960 --> 00:39:47,430
and then at some point when an
application starts writing to one of you

2066
00:39:47,430 --> 00:39:47,440
application starts writing to one of you
 

2067
00:39:47,440 --> 00:39:47,990
application starts writing to one of you
know the

2068
00:39:47,990 --> 00:39:48,000
know the
 

2069
00:39:48,000 --> 00:39:49,829
know the
basically starts it doesn't load or

2070
00:39:49,829 --> 00:39:49,839
basically starts it doesn't load or
 

2071
00:39:49,839 --> 00:39:51,430
basically starts it doesn't load or
store to one of the

2072
00:39:51,430 --> 00:39:51,440
store to one of the
 

2073
00:39:51,440 --> 00:39:54,470
store to one of the
pages that actually are part of the vess

2074
00:39:54,470 --> 00:39:54,480
pages that actually are part of the vess
 

2075
00:39:54,480 --> 00:39:55,829
pages that actually are part of the vess
so because it wants you to you know

2076
00:39:55,829 --> 00:39:55,839
so because it wants you to you know
 

2077
00:39:55,839 --> 00:39:57,750
so because it wants you to you know
whatever store one or two variable

2078
00:39:57,750 --> 00:39:57,760
whatever store one or two variable
 

2079
00:39:57,760 --> 00:39:58,710
whatever store one or two variable
content in there

2080
00:39:58,710 --> 00:39:58,720
content in there
 

2081
00:39:58,720 --> 00:40:06,230
content in there
and we're going to get a page fault

2082
00:40:06,230 --> 00:40:06,240

 

2083
00:40:06,240 --> 00:40:08,829

and so what should we do on the page

2084
00:40:08,829 --> 00:40:08,839
and so what should we do on the page
 

2085
00:40:08,839 --> 00:40:10,470
and so what should we do on the page
fault

2086
00:40:10,470 --> 00:40:10,480
fault
 

2087
00:40:10,480 --> 00:40:15,109
fault
in this particular case

2088
00:40:15,109 --> 00:40:15,119

 

2089
00:40:15,119 --> 00:40:23,750

anybody

2090
00:40:23,750 --> 00:40:23,760

 

2091
00:40:23,760 --> 00:40:26,790

go ahead anybody idea what should we do

2092
00:40:26,790 --> 00:40:26,800
go ahead anybody idea what should we do
 

2093
00:40:26,800 --> 00:40:28,470
go ahead anybody idea what should we do
in the page fault here

2094
00:40:28,470 --> 00:40:28,480
in the page fault here
 

2095
00:40:28,480 --> 00:40:31,589
in the page fault here
i think we should make a new page

2096
00:40:31,589 --> 00:40:31,599
i think we should make a new page
 

2097
00:40:31,599 --> 00:40:35,270
i think we should make a new page
and uh write zeros there and rerun the

2098
00:40:35,270 --> 00:40:35,280
and uh write zeros there and rerun the
 

2099
00:40:35,280 --> 00:40:36,390
and uh write zeros there and rerun the
instruction

2100
00:40:36,390 --> 00:40:36,400
instruction
 

2101
00:40:36,400 --> 00:40:38,550
instruction
yeah exactly so let's let's assume this

2102
00:40:38,550 --> 00:40:38,560
yeah exactly so let's let's assume this
 

2103
00:40:38,560 --> 00:40:40,150
yeah exactly so let's let's assume this
for my drawing that actually the

2104
00:40:40,150 --> 00:40:40,160
for my drawing that actually the
 

2105
00:40:40,160 --> 00:40:41,829
for my drawing that actually the
uh store instruction happened to the one

2106
00:40:41,829 --> 00:40:41,839
uh store instruction happened to the one
 

2107
00:40:41,839 --> 00:40:43,270
uh store instruction happened to the one
at the top

2108
00:40:43,270 --> 00:40:43,280
at the top
 

2109
00:40:43,280 --> 00:40:44,630
at the top
and what we really want to do basically

2110
00:40:44,630 --> 00:40:44,640
and what we really want to do basically
 

2111
00:40:44,640 --> 00:40:46,870
and what we really want to do basically
is allocate a new physical page a new

2112
00:40:46,870 --> 00:40:46,880
is allocate a new physical page a new
 

2113
00:40:46,880 --> 00:40:48,870
is allocate a new physical page a new
page in memory you know catalog put

2114
00:40:48,870 --> 00:40:48,880
page in memory you know catalog put
 

2115
00:40:48,880 --> 00:40:49,990
page in memory you know catalog put
zeros in there because

2116
00:40:49,990 --> 00:40:50,000
zeros in there because
 

2117
00:40:50,000 --> 00:40:51,670
zeros in there because
that's what we're expecting and then we

2118
00:40:51,670 --> 00:40:51,680
that's what we're expecting and then we
 

2119
00:40:51,680 --> 00:40:53,030
that's what we're expecting and then we
can change the top

2120
00:40:53,030 --> 00:40:53,040
can change the top
 

2121
00:40:53,040 --> 00:40:54,550
can change the top
mapping right for the one for this

2122
00:40:54,550 --> 00:40:54,560
mapping right for the one for this
 

2123
00:40:54,560 --> 00:40:57,030
mapping right for the one for this
particular because for this guy

2124
00:40:57,030 --> 00:40:57,040
particular because for this guy
 

2125
00:40:57,040 --> 00:40:59,430
particular because for this guy
uh or let me assume that this is this

2126
00:40:59,430 --> 00:40:59,440
uh or let me assume that this is this
 

2127
00:40:59,440 --> 00:41:01,510
uh or let me assume that this is this
one we can change this mapping you know

2128
00:41:01,510 --> 00:41:01,520
one we can change this mapping you know
 

2129
00:41:01,520 --> 00:41:01,990
one we can change this mapping you know
to be

2130
00:41:01,990 --> 00:41:02,000
to be
 

2131
00:41:02,000 --> 00:41:05,990
to be
read write and point it to

2132
00:41:05,990 --> 00:41:06,000
read write and point it to
 

2133
00:41:06,000 --> 00:41:11,829
read write and point it to
the new page

2134
00:41:11,829 --> 00:41:11,839

 

2135
00:41:11,839 --> 00:41:15,430

and then you know basically so copy

2136
00:41:15,430 --> 00:41:15,440
and then you know basically so copy
 

2137
00:41:15,440 --> 00:41:20,710
and then you know basically so copy
let's update pte and then restart the

2138
00:41:20,710 --> 00:41:20,720
let's update pte and then restart the
 

2139
00:41:20,720 --> 00:41:28,630
let's update pte and then restart the
structure

2140
00:41:28,630 --> 00:41:28,640

 

2141
00:41:28,640 --> 00:41:33,270

and that's it why is this ineffective

2142
00:41:33,270 --> 00:41:33,280
and that's it why is this ineffective
 

2143
00:41:33,280 --> 00:41:34,470
and that's it why is this ineffective
why do you think this is actually in

2144
00:41:34,470 --> 00:41:34,480
why do you think this is actually in
 

2145
00:41:34,480 --> 00:41:39,670
why do you think this is actually in
good optimization

2146
00:41:39,670 --> 00:41:39,680

 

2147
00:41:39,680 --> 00:41:49,190

why do operating systems do it

2148
00:41:49,190 --> 00:41:49,200
why do operating systems do it
 

2149
00:41:49,200 --> 00:41:52,309
why do operating systems do it
anybody

2150
00:41:52,309 --> 00:41:52,319

 

2151
00:41:52,319 --> 00:41:57,109

you don't need it yeah um

2152
00:41:57,109 --> 00:41:57,119
you don't need it yeah um
 

2153
00:41:57,119 --> 00:41:59,190
you don't need it yeah um
you don't need to use as much memory as

2154
00:41:59,190 --> 00:41:59,200
you don't need to use as much memory as
 

2155
00:41:59,200 --> 00:42:01,430
you don't need to use as much memory as
the user requested so it's just better

2156
00:42:01,430 --> 00:42:01,440
the user requested so it's just better
 

2157
00:42:01,440 --> 00:42:02,550
the user requested so it's just better
to um

2158
00:42:02,550 --> 00:42:02,560
to um
 

2159
00:42:02,560 --> 00:42:05,109
to um
bill it when it when you need it yeah

2160
00:42:05,109 --> 00:42:05,119
bill it when it when you need it yeah
 

2161
00:42:05,119 --> 00:42:05,670
bill it when it when you need it yeah
actually

2162
00:42:05,670 --> 00:42:05,680
actually
 

2163
00:42:05,680 --> 00:42:07,349
actually
similar like to the lazy allocation

2164
00:42:07,349 --> 00:42:07,359
similar like to the lazy allocation
 

2165
00:42:07,359 --> 00:42:09,030
similar like to the lazy allocation
basically if the

2166
00:42:09,030 --> 00:42:09,040
basically if the
 

2167
00:42:09,040 --> 00:42:12,069
basically if the
program say allocated a huge array you

2168
00:42:12,069 --> 00:42:12,079
program say allocated a huge array you
 

2169
00:42:12,079 --> 00:42:14,790
program say allocated a huge array you
know for the worst possible input

2170
00:42:14,790 --> 00:42:14,800
know for the worst possible input
 

2171
00:42:14,800 --> 00:42:16,230
know for the worst possible input
it's a global array it all has to be

2172
00:42:16,230 --> 00:42:16,240
it's a global array it all has to be
 

2173
00:42:16,240 --> 00:42:17,750
it's a global array it all has to be
zeros but maybe the only fraction is

2174
00:42:17,750 --> 00:42:17,760
zeros but maybe the only fraction is
 

2175
00:42:17,760 --> 00:42:19,190
zeros but maybe the only fraction is
being used

2176
00:42:19,190 --> 00:42:19,200
being used
 

2177
00:42:19,200 --> 00:42:28,790
being used
right what's the second advantage

2178
00:42:28,790 --> 00:42:28,800

 

2179
00:42:28,800 --> 00:42:30,069

second advantage you have to do less

2180
00:42:30,069 --> 00:42:30,079
second advantage you have to do less
 

2181
00:42:30,079 --> 00:42:32,069
second advantage you have to do less
work in exec right and so

2182
00:42:32,069 --> 00:42:32,079
work in exec right and so
 

2183
00:42:32,079 --> 00:42:34,550
work in exec right and so
the program may start quicker and get

2184
00:42:34,550 --> 00:42:34,560
the program may start quicker and get
 

2185
00:42:34,560 --> 00:42:36,150
the program may start quicker and get
basically better interactive performance

2186
00:42:36,150 --> 00:42:36,160
basically better interactive performance
 

2187
00:42:36,160 --> 00:42:37,510
basically better interactive performance
okay because you don't really have to

2188
00:42:37,510 --> 00:42:37,520
okay because you don't really have to
 

2189
00:42:37,520 --> 00:42:38,790
okay because you don't really have to
allocate memory you don't really have a

2190
00:42:38,790 --> 00:42:38,800
allocate memory you don't really have a
 

2191
00:42:38,800 --> 00:42:40,150
allocate memory you don't really have a
zero memory you only have to allocate

2192
00:42:40,150 --> 00:42:40,160
zero memory you only have to allocate
 

2193
00:42:40,160 --> 00:42:41,349
zero memory you only have to allocate
the zero to one page

2194
00:42:41,349 --> 00:42:41,359
the zero to one page
 

2195
00:42:41,359 --> 00:42:42,470
the zero to one page
and the rest is you know you're just

2196
00:42:42,470 --> 00:42:42,480
and the rest is you know you're just
 

2197
00:42:42,480 --> 00:42:44,390
and the rest is you know you're just
mapping the page table so you just have

2198
00:42:44,390 --> 00:42:44,400
mapping the page table so you just have
 

2199
00:42:44,400 --> 00:42:47,109
mapping the page table so you just have
to write the pte entries

2200
00:42:47,109 --> 00:42:47,119
to write the pte entries
 

2201
00:42:47,119 --> 00:42:50,870
to write the pte entries
does that make sense but aren't

2202
00:42:50,870 --> 00:42:50,880
does that make sense but aren't
 

2203
00:42:50,880 --> 00:42:54,150
does that make sense but aren't
updates or writes

2204
00:42:54,150 --> 00:42:54,160

 

2205
00:42:54,160 --> 00:42:56,710

so they will become slower because every

2206
00:42:56,710 --> 00:42:56,720
so they will become slower because every
 

2207
00:42:56,720 --> 00:42:57,190
so they will become slower because every
time

2208
00:42:57,190 --> 00:42:57,200
time
 

2209
00:42:57,200 --> 00:43:00,309
time
a page fall will occur and yeah so you

2210
00:43:00,309 --> 00:43:00,319
a page fall will occur and yeah so you
 

2211
00:43:00,319 --> 00:43:01,750
a page fall will occur and yeah so you
know there's absolutely a good point

2212
00:43:01,750 --> 00:43:01,760
know there's absolutely a good point
 

2213
00:43:01,760 --> 00:43:04,069
know there's absolutely a good point
uh so we basically postpone some of the

2214
00:43:04,069 --> 00:43:04,079
uh so we basically postpone some of the
 

2215
00:43:04,079 --> 00:43:04,950
uh so we basically postpone some of the
cost to later

2216
00:43:04,950 --> 00:43:04,960
cost to later
 

2217
00:43:04,960 --> 00:43:07,750
cost to later
right um at the point that we do the

2218
00:43:07,750 --> 00:43:07,760
right um at the point that we do the
 

2219
00:43:07,760 --> 00:43:08,870
right um at the point that we do the
page fault

2220
00:43:08,870 --> 00:43:08,880
page fault
 

2221
00:43:08,880 --> 00:43:11,190
page fault
and you know we're partially relying or

2222
00:43:11,190 --> 00:43:11,200
and you know we're partially relying or
 

2223
00:43:11,200 --> 00:43:12,630
and you know we're partially relying or
hoping that maybe not all the pages are

2224
00:43:12,630 --> 00:43:12,640
hoping that maybe not all the pages are
 

2225
00:43:12,640 --> 00:43:13,750
hoping that maybe not all the pages are
being used

2226
00:43:13,750 --> 00:43:13,760
being used
 

2227
00:43:13,760 --> 00:43:15,829
being used
uh but like for example if the page is

2228
00:43:15,829 --> 00:43:15,839
uh but like for example if the page is
 

2229
00:43:15,839 --> 00:43:18,470
uh but like for example if the page is
496 496 bytes

2230
00:43:18,470 --> 00:43:18,480
496 496 bytes
 

2231
00:43:18,480 --> 00:43:19,829
496 496 bytes
uh you know basically we're gonna take

2232
00:43:19,829 --> 00:43:19,839
uh you know basically we're gonna take
 

2233
00:43:19,839 --> 00:43:22,069
uh you know basically we're gonna take
one page wall per four thousand ninety

2234
00:43:22,069 --> 00:43:22,079
one page wall per four thousand ninety
 

2235
00:43:22,079 --> 00:43:22,390
one page wall per four thousand ninety
six

2236
00:43:22,390 --> 00:43:22,400
six
 

2237
00:43:22,400 --> 00:43:25,270
six
zeros right and so do some rotation

2238
00:43:25,270 --> 00:43:25,280
zeros right and so do some rotation
 

2239
00:43:25,280 --> 00:43:27,670
zeros right and so do some rotation
there

2240
00:43:27,670 --> 00:43:27,680
there
 

2241
00:43:27,680 --> 00:43:29,349
there
but it's a good great point you know

2242
00:43:29,349 --> 00:43:29,359
but it's a good great point you know
 

2243
00:43:29,359 --> 00:43:30,630
but it's a good great point you know
certainly we have made paint we have

2244
00:43:30,630 --> 00:43:30,640
certainly we have made paint we have
 

2245
00:43:30,640 --> 00:43:31,270
certainly we have made paint we have
income

2246
00:43:31,270 --> 00:43:31,280
income
 

2247
00:43:31,280 --> 00:43:33,349
income
we have added the cost of the page fault

2248
00:43:33,349 --> 00:43:33,359
we have added the cost of the page fault
 

2249
00:43:33,359 --> 00:43:34,710
we have added the cost of the page fault
how much is the cost of the page fault

2250
00:43:34,710 --> 00:43:34,720
how much is the cost of the page fault
 

2251
00:43:34,720 --> 00:43:35,510
how much is the cost of the page fault
how

2252
00:43:35,510 --> 00:43:35,520
how
 

2253
00:43:35,520 --> 00:43:38,309
how
how should we think about that is that

2254
00:43:38,309 --> 00:43:38,319
how should we think about that is that
 

2255
00:43:38,319 --> 00:43:39,109
how should we think about that is that
comparable to

2256
00:43:39,109 --> 00:43:39,119
comparable to
 

2257
00:43:39,119 --> 00:43:41,109
comparable to
store instruction or is much more

2258
00:43:41,109 --> 00:43:41,119
store instruction or is much more
 

2259
00:43:41,119 --> 00:43:48,630
store instruction or is much more
expensive

2260
00:43:48,630 --> 00:43:48,640

 

2261
00:43:48,640 --> 00:43:52,630

more expensive right yeah why

2262
00:43:52,630 --> 00:43:52,640
more expensive right yeah why
 

2263
00:43:52,640 --> 00:43:56,309
more expensive right yeah why
well a store will just uh

2264
00:43:56,309 --> 00:43:56,319
well a store will just uh
 

2265
00:43:56,319 --> 00:43:59,030
well a store will just uh
like need to require it will take some

2266
00:43:59,030 --> 00:43:59,040
like need to require it will take some
 

2267
00:43:59,040 --> 00:43:59,670
like need to require it will take some
time to

2268
00:43:59,670 --> 00:43:59,680
time to
 

2269
00:43:59,680 --> 00:44:02,950
time to
get through the to ram but the

2270
00:44:02,950 --> 00:44:02,960
get through the to ram but the
 

2271
00:44:02,960 --> 00:44:05,510
get through the to ram but the
fault will have to go to the cornell

2272
00:44:05,510 --> 00:44:05,520
fault will have to go to the cornell
 

2273
00:44:05,520 --> 00:44:06,069
fault will have to go to the cornell
yeah

2274
00:44:06,069 --> 00:44:06,079
yeah
 

2275
00:44:06,079 --> 00:44:08,309
yeah
so in fact how many store instructions

2276
00:44:08,309 --> 00:44:08,319
so in fact how many store instructions
 

2277
00:44:08,319 --> 00:44:10,069
so in fact how many store instructions
were there even in the

2278
00:44:10,069 --> 00:44:10,079
were there even in the
 

2279
00:44:10,079 --> 00:44:12,150
were there even in the
uh the trap handling code that robert

2280
00:44:12,150 --> 00:44:12,160
uh the trap handling code that robert
 

2281
00:44:12,160 --> 00:44:13,510
uh the trap handling code that robert
showed you last week

2282
00:44:13,510 --> 00:44:13,520
showed you last week
 

2283
00:44:13,520 --> 00:44:15,190
showed you last week
or actually that you're doing currently

2284
00:44:15,190 --> 00:44:15,200
or actually that you're doing currently
 

2285
00:44:15,200 --> 00:44:19,430
or actually that you're doing currently
in the uh trap block

2286
00:44:19,430 --> 00:44:19,440

 

2287
00:44:19,440 --> 00:44:22,309

uh well oh at least like a hundred yeah

2288
00:44:22,309 --> 00:44:22,319
uh well oh at least like a hundred yeah
 

2289
00:44:22,319 --> 00:44:23,670
uh well oh at least like a hundred yeah
at least a hundred current used to save

2290
00:44:23,670 --> 00:44:23,680
at least a hundred current used to save
 

2291
00:44:23,680 --> 00:44:25,670
at least a hundred current used to save
restore registers

2292
00:44:25,670 --> 00:44:25,680
restore registers
 

2293
00:44:25,680 --> 00:44:27,190
restore registers
uh so there's quite a bit and so there's

2294
00:44:27,190 --> 00:44:27,200
uh so there's quite a bit and so there's
 

2295
00:44:27,200 --> 00:44:28,710
uh so there's quite a bit and so there's
the both the overhead of

2296
00:44:28,710 --> 00:44:28,720
the both the overhead of
 

2297
00:44:28,720 --> 00:44:30,470
the both the overhead of
transferring from user space to kernel

2298
00:44:30,470 --> 00:44:30,480
transferring from user space to kernel
 

2299
00:44:30,480 --> 00:44:32,230
transferring from user space to kernel
space as well like all the instructions

2300
00:44:32,230 --> 00:44:32,240
space as well like all the instructions
 

2301
00:44:32,240 --> 00:44:33,750
space as well like all the instructions
that are being executed

2302
00:44:33,750 --> 00:44:33,760
that are being executed
 

2303
00:44:33,760 --> 00:44:37,190
that are being executed
uh to save and restore state so the page

2304
00:44:37,190 --> 00:44:37,200
uh to save and restore state so the page
 

2305
00:44:37,200 --> 00:44:38,309
uh to save and restore state so the page
fault is definitely not

2306
00:44:38,309 --> 00:44:38,319
fault is definitely not
 

2307
00:44:38,319 --> 00:44:40,309
fault is definitely not
free so the question that was asked

2308
00:44:40,309 --> 00:44:40,319
free so the question that was asked
 

2309
00:44:40,319 --> 00:44:45,510
free so the question that was asked
earlier is a very good question

2310
00:44:45,510 --> 00:44:45,520

 

2311
00:44:45,520 --> 00:44:48,870

okay so let's uh look at some more

2312
00:44:48,870 --> 00:44:48,880
okay so let's uh look at some more
 

2313
00:44:48,880 --> 00:44:52,150
okay so let's uh look at some more
uh optimizations that one can do

2314
00:44:52,150 --> 00:44:52,160
uh optimizations that one can do
 

2315
00:44:52,160 --> 00:44:54,150
uh optimizations that one can do
these ones are sort of reasonably boring

2316
00:44:54,150 --> 00:44:54,160
these ones are sort of reasonably boring
 

2317
00:44:54,160 --> 00:44:56,069
these ones are sort of reasonably boring
or maybe reasonable straightforward

2318
00:44:56,069 --> 00:44:56,079
or maybe reasonable straightforward
 

2319
00:44:56,079 --> 00:44:58,390
or maybe reasonable straightforward
uh and we're gonna hopefully get a

2320
00:44:58,390 --> 00:44:58,400
uh and we're gonna hopefully get a
 

2321
00:44:58,400 --> 00:44:59,349
uh and we're gonna hopefully get a
little bit more

2322
00:44:59,349 --> 00:44:59,359
little bit more
 

2323
00:44:59,359 --> 00:45:02,470
little bit more
a couple more exciting ones

2324
00:45:02,470 --> 00:45:02,480
a couple more exciting ones
 

2325
00:45:02,480 --> 00:45:05,109
a couple more exciting ones
let's see what's next one i wanted to do

2326
00:45:05,109 --> 00:45:05,119
let's see what's next one i wanted to do
 

2327
00:45:05,119 --> 00:45:05,670
let's see what's next one i wanted to do
uh

2328
00:45:05,670 --> 00:45:05,680
uh
 

2329
00:45:05,680 --> 00:45:09,270
uh
next one is a very common one uh

2330
00:45:09,270 --> 00:45:09,280
next one is a very common one uh
 

2331
00:45:09,280 --> 00:45:10,950
next one is a very common one uh
many operating systems implemented and

2332
00:45:10,950 --> 00:45:10,960
many operating systems implemented and
 

2333
00:45:10,960 --> 00:45:12,950
many operating systems implemented and
in fact it will also be one of the

2334
00:45:12,950 --> 00:45:12,960
in fact it will also be one of the
 

2335
00:45:12,960 --> 00:45:14,069
in fact it will also be one of the
topics in

2336
00:45:14,069 --> 00:45:14,079
topics in
 

2337
00:45:14,079 --> 00:45:19,109
topics in
one of the labs so let's do the next one

2338
00:45:19,109 --> 00:45:19,119
one of the labs so let's do the next one
 

2339
00:45:19,119 --> 00:45:22,390
one of the labs so let's do the next one
uh and that is copy

2340
00:45:22,390 --> 00:45:22,400
uh and that is copy
 

2341
00:45:22,400 --> 00:45:27,670
uh and that is copy
on the right fork

2342
00:45:27,670 --> 00:45:27,680

 

2343
00:45:27,680 --> 00:45:34,950

or something it's called cow fork

2344
00:45:34,950 --> 00:45:34,960

 

2345
00:45:34,960 --> 00:45:38,069

um and you know the uh

2346
00:45:38,069 --> 00:45:38,079
um and you know the uh
 

2347
00:45:38,079 --> 00:45:39,910
um and you know the uh
the observation uh is you know pretty

2348
00:45:39,910 --> 00:45:39,920
the observation uh is you know pretty
 

2349
00:45:39,920 --> 00:45:41,510
the observation uh is you know pretty
straightforward in fact we made

2350
00:45:41,510 --> 00:45:41,520
straightforward in fact we made
 

2351
00:45:41,520 --> 00:45:42,790
straightforward in fact we made
this observation a couple times in

2352
00:45:42,790 --> 00:45:42,800
this observation a couple times in
 

2353
00:45:42,800 --> 00:45:45,109
this observation a couple times in
lecture um

2354
00:45:45,109 --> 00:45:45,119
lecture um
 

2355
00:45:45,119 --> 00:45:48,630
lecture um
but when uh

2356
00:45:48,630 --> 00:45:48,640

 

2357
00:45:48,640 --> 00:45:50,309

let's say you know the shell right there

2358
00:45:50,309 --> 00:45:50,319
let's say you know the shell right there
 

2359
00:45:50,319 --> 00:45:52,550
let's say you know the shell right there
we were in fact shot in a second ago

2360
00:45:52,550 --> 00:45:52,560
we were in fact shot in a second ago
 

2361
00:45:52,560 --> 00:45:54,630
we were in fact shot in a second ago
it's like if the shell runs

2362
00:45:54,630 --> 00:45:54,640
it's like if the shell runs
 

2363
00:45:54,640 --> 00:45:57,589
it's like if the shell runs
and it processes a command it actually

2364
00:45:57,589 --> 00:45:57,599
and it processes a command it actually
 

2365
00:45:57,599 --> 00:45:58,309
and it processes a command it actually
does a fork

2366
00:45:58,309 --> 00:45:58,319
does a fork
 

2367
00:45:58,319 --> 00:46:01,510
does a fork
to create a child and so the fork you

2368
00:46:01,510 --> 00:46:01,520
to create a child and so the fork you
 

2369
00:46:01,520 --> 00:46:02,950
to create a child and so the fork you
know basically creates a copy of the

2370
00:46:02,950 --> 00:46:02,960
know basically creates a copy of the
 

2371
00:46:02,960 --> 00:46:04,069
know basically creates a copy of the
shell

2372
00:46:04,069 --> 00:46:04,079
shell
 

2373
00:46:04,079 --> 00:46:05,510
shell
and so we've got a parent and we've got

2374
00:46:05,510 --> 00:46:05,520
and so we've got a parent and we've got
 

2375
00:46:05,520 --> 00:46:07,750
and so we've got a parent and we've got
the child and then the child of almost

2376
00:46:07,750 --> 00:46:07,760
the child and then the child of almost
 

2377
00:46:07,760 --> 00:46:09,190
the child and then the child of almost
one of the first things it does is an

2378
00:46:09,190 --> 00:46:09,200
one of the first things it does is an
 

2379
00:46:09,200 --> 00:46:09,750
one of the first things it does is an
exit

2380
00:46:09,750 --> 00:46:09,760
exit
 

2381
00:46:09,760 --> 00:46:10,870
exit
and then you execute a couple

2382
00:46:10,870 --> 00:46:10,880
and then you execute a couple
 

2383
00:46:10,880 --> 00:46:13,190
and then you execute a couple
instructions and then it actually exits

2384
00:46:13,190 --> 00:46:13,200
instructions and then it actually exits
 

2385
00:46:13,200 --> 00:46:16,790
instructions and then it actually exits
you know for example to run echo

2386
00:46:16,790 --> 00:46:16,800

 

2387
00:46:16,800 --> 00:46:19,910

and as we now know uh

2388
00:46:19,910 --> 00:46:19,920
and as we now know uh
 

2389
00:46:19,920 --> 00:46:21,670
and as we now know uh
in the last lap you know the fork

2390
00:46:21,670 --> 00:46:21,680
in the last lap you know the fork
 

2391
00:46:21,680 --> 00:46:22,950
in the last lap you know the fork
creates a complete duplicate

2392
00:46:22,950 --> 00:46:22,960
creates a complete duplicate
 

2393
00:46:22,960 --> 00:46:25,510
creates a complete duplicate
of the shell address space and then

2394
00:46:25,510 --> 00:46:25,520
of the shell address space and then
 

2395
00:46:25,520 --> 00:46:26,790
of the shell address space and then
exactly the first thing it basically

2396
00:46:26,790 --> 00:46:26,800
exactly the first thing it basically
 

2397
00:46:26,800 --> 00:46:28,790
exactly the first thing it basically
does it you know throws that away

2398
00:46:28,790 --> 00:46:28,800
does it you know throws that away
 

2399
00:46:28,800 --> 00:46:30,710
does it you know throws that away
and then replaces it with an address

2400
00:46:30,710 --> 00:46:30,720
and then replaces it with an address
 

2401
00:46:30,720 --> 00:46:33,030
and then replaces it with an address
face you know containing echo

2402
00:46:33,030 --> 00:46:33,040
face you know containing echo
 

2403
00:46:33,040 --> 00:46:35,670
face you know containing echo
and so it seems slightly wasteful right

2404
00:46:35,670 --> 00:46:35,680
and so it seems slightly wasteful right
 

2405
00:46:35,680 --> 00:46:37,510
and so it seems slightly wasteful right
like you know so here let's say we have

2406
00:46:37,510 --> 00:46:37,520
like you know so here let's say we have
 

2407
00:46:37,520 --> 00:46:38,390
like you know so here let's say we have
our

2408
00:46:38,390 --> 00:46:38,400
our
 

2409
00:46:38,400 --> 00:46:41,750
our
parent virtual dress space

2410
00:46:41,750 --> 00:46:41,760
parent virtual dress space
 

2411
00:46:41,760 --> 00:46:46,069
parent virtual dress space
and then here we have the child

2412
00:46:46,069 --> 00:46:46,079

 

2413
00:46:46,079 --> 00:46:48,950

and what we're actually doing and here's

2414
00:46:48,950 --> 00:46:48,960
and what we're actually doing and here's
 

2415
00:46:48,960 --> 00:46:52,870
and what we're actually doing and here's
physical memory

2416
00:46:52,870 --> 00:46:52,880

 

2417
00:46:52,880 --> 00:46:55,030

and in the normal case in xv6 or in

2418
00:46:55,030 --> 00:46:55,040
and in the normal case in xv6 or in
 

2419
00:46:55,040 --> 00:46:56,550
and in the normal case in xv6 or in
unmodified xv6

2420
00:46:56,550 --> 00:46:56,560
unmodified xv6
 

2421
00:46:56,560 --> 00:46:57,670
unmodified xv6
you know there's a bunch of like there

2422
00:46:57,670 --> 00:46:57,680
you know there's a bunch of like there
 

2423
00:46:57,680 --> 00:46:59,589
you know there's a bunch of like there
were four pages we saw

2424
00:46:59,589 --> 00:46:59,599
were four pages we saw
 

2425
00:46:59,599 --> 00:47:02,309
were four pages we saw
that the shell has one two three four

2426
00:47:02,309 --> 00:47:02,319
that the shell has one two three four
 

2427
00:47:02,319 --> 00:47:03,030
that the shell has one two three four
and

2428
00:47:03,030 --> 00:47:03,040
and
 

2429
00:47:03,040 --> 00:47:06,309
and
uh you know when we start when a fork

2430
00:47:06,309 --> 00:47:06,319
uh you know when we start when a fork
 

2431
00:47:06,319 --> 00:47:08,870
uh you know when we start when a fork
uh runs it basically gets a duplicate of

2432
00:47:08,870 --> 00:47:08,880
uh runs it basically gets a duplicate of
 

2433
00:47:08,880 --> 00:47:09,990
uh runs it basically gets a duplicate of
those four pages one

2434
00:47:09,990 --> 00:47:10,000
those four pages one
 

2435
00:47:10,000 --> 00:47:12,309
those four pages one
two three four and copies all the

2436
00:47:12,309 --> 00:47:12,319
two three four and copies all the
 

2437
00:47:12,319 --> 00:47:13,190
two three four and copies all the
content

2438
00:47:13,190 --> 00:47:13,200
content
 

2439
00:47:13,200 --> 00:47:15,430
content
you know from those pages the parenting

2440
00:47:15,430 --> 00:47:15,440
you know from those pages the parenting
 

2441
00:47:15,440 --> 00:47:17,109
you know from those pages the parenting
to the child

2442
00:47:17,109 --> 00:47:17,119
to the child
 

2443
00:47:17,119 --> 00:47:20,630
to the child
um and you know then as soon as exit

2444
00:47:20,630 --> 00:47:20,640
um and you know then as soon as exit
 

2445
00:47:20,640 --> 00:47:21,910
um and you know then as soon as exit
happens basically we're going to free

2446
00:47:21,910 --> 00:47:21,920
happens basically we're going to free
 

2447
00:47:21,920 --> 00:47:23,430
happens basically we're going to free
these pages

2448
00:47:23,430 --> 00:47:23,440
these pages
 

2449
00:47:23,440 --> 00:47:25,750
these pages
and allocate new pages to actually have

2450
00:47:25,750 --> 00:47:25,760
and allocate new pages to actually have
 

2451
00:47:25,760 --> 00:47:28,069
and allocate new pages to actually have
the content of echo in it

2452
00:47:28,069 --> 00:47:28,079
the content of echo in it
 

2453
00:47:28,079 --> 00:47:31,670
the content of echo in it
so a good optimization one that actually

2454
00:47:31,670 --> 00:47:31,680
so a good optimization one that actually
 

2455
00:47:31,680 --> 00:47:33,190
so a good optimization one that actually
tends to be very effective

2456
00:47:33,190 --> 00:47:33,200
tends to be very effective
 

2457
00:47:33,200 --> 00:47:35,589
tends to be very effective
for this particular sequence is that you

2458
00:47:35,589 --> 00:47:35,599
for this particular sequence is that you
 

2459
00:47:35,599 --> 00:47:36,950
for this particular sequence is that you
know if we

2460
00:47:36,950 --> 00:47:36,960
know if we
 

2461
00:47:36,960 --> 00:47:39,430
know if we
uh if the parent has these four mappings

2462
00:47:39,430 --> 00:47:39,440
uh if the parent has these four mappings
 

2463
00:47:39,440 --> 00:47:41,829
uh if the parent has these four mappings
you know in its address space

2464
00:47:41,829 --> 00:47:41,839
you know in its address space
 

2465
00:47:41,839 --> 00:47:43,670
you know in its address space
you know going from whatever the zero

2466
00:47:43,670 --> 00:47:43,680
you know going from whatever the zero
 

2467
00:47:43,680 --> 00:47:45,910
you know going from whatever the zero
goes here the first one goes there

2468
00:47:45,910 --> 00:47:45,920
goes here the first one goes there
 

2469
00:47:45,920 --> 00:47:49,190
goes here the first one goes there
and whatever instead you know when we

2470
00:47:49,190 --> 00:47:49,200
and whatever instead you know when we
 

2471
00:47:49,200 --> 00:47:50,710
and whatever instead you know when we
create the child address space instead

2472
00:47:50,710 --> 00:47:50,720
create the child address space instead
 

2473
00:47:50,720 --> 00:47:52,309
create the child address space instead
of creating copying and allocating new

2474
00:47:52,309 --> 00:47:52,319
of creating copying and allocating new
 

2475
00:47:52,319 --> 00:47:53,190
of creating copying and allocating new
physical memory

2476
00:47:53,190 --> 00:47:53,200
physical memory
 

2477
00:47:53,200 --> 00:47:56,150
physical memory
what we could do is just share the

2478
00:47:56,150 --> 00:47:56,160
what we could do is just share the
 

2479
00:47:56,160 --> 00:47:57,030
what we could do is just share the
physical pages

2480
00:47:57,030 --> 00:47:57,040
physical pages
 

2481
00:47:57,040 --> 00:47:59,270
physical pages
that the parent actually already has

2482
00:47:59,270 --> 00:47:59,280
that the parent actually already has
 

2483
00:47:59,280 --> 00:48:00,390
that the parent actually already has
allocated

2484
00:48:00,390 --> 00:48:00,400
allocated
 

2485
00:48:00,400 --> 00:48:02,790
allocated
and so we can just set the pte's for the

2486
00:48:02,790 --> 00:48:02,800
and so we can just set the pte's for the
 

2487
00:48:02,800 --> 00:48:04,230
and so we can just set the pte's for the
child you know to the same

2488
00:48:04,230 --> 00:48:04,240
child you know to the same
 

2489
00:48:04,240 --> 00:48:06,390
child you know to the same
pointing to the same physical pages as

2490
00:48:06,390 --> 00:48:06,400
pointing to the same physical pages as
 

2491
00:48:06,400 --> 00:48:08,549
pointing to the same physical pages as
in the parent

2492
00:48:08,549 --> 00:48:08,559
in the parent
 

2493
00:48:08,559 --> 00:48:09,589
in the parent
and we're going to be a little bit

2494
00:48:09,589 --> 00:48:09,599
and we're going to be a little bit
 

2495
00:48:09,599 --> 00:48:11,109
and we're going to be a little bit
careful again correct because if the

2496
00:48:11,109 --> 00:48:11,119
careful again correct because if the
 

2497
00:48:11,119 --> 00:48:11,589
careful again correct because if the
child

2498
00:48:11,589 --> 00:48:11,599
child
 

2499
00:48:11,599 --> 00:48:14,549
child
wants to modify one of these pages that

2500
00:48:14,549 --> 00:48:14,559
wants to modify one of these pages that
 

2501
00:48:14,559 --> 00:48:15,589
wants to modify one of these pages that
update should not be

2502
00:48:15,589 --> 00:48:15,599
update should not be
 

2503
00:48:15,599 --> 00:48:17,349
update should not be
visible to the parent because we want

2504
00:48:17,349 --> 00:48:17,359
visible to the parent because we want
 

2505
00:48:17,359 --> 00:48:18,950
visible to the parent because we want
strong isolation between the parent and

2506
00:48:18,950 --> 00:48:18,960
strong isolation between the parent and
 

2507
00:48:18,960 --> 00:48:20,470
strong isolation between the parent and
child so we need to be a little bit more

2508
00:48:20,470 --> 00:48:20,480
child so we need to be a little bit more
 

2509
00:48:20,480 --> 00:48:21,270
child so we need to be a little bit more
careful

2510
00:48:21,270 --> 00:48:21,280
careful
 

2511
00:48:21,280 --> 00:48:22,870
careful
so to be a little bit more careful now

2512
00:48:22,870 --> 00:48:22,880
so to be a little bit more careful now
 

2513
00:48:22,880 --> 00:48:25,430
so to be a little bit more careful now
what we can do is just map those pages

2514
00:48:25,430 --> 00:48:25,440
what we can do is just map those pages
 

2515
00:48:25,440 --> 00:48:28,069
what we can do is just map those pages
both in the child and in the parent

2516
00:48:28,069 --> 00:48:28,079
both in the child and in the parent
 

2517
00:48:28,079 --> 00:48:32,870
both in the child and in the parent
read-only

2518
00:48:32,870 --> 00:48:32,880

 

2519
00:48:32,880 --> 00:48:34,790

and then of course we're going to get a

2520
00:48:34,790 --> 00:48:34,800
and then of course we're going to get a
 

2521
00:48:34,800 --> 00:48:36,630
and then of course we're going to get a
page fault at some point

2522
00:48:36,630 --> 00:48:36,640
page fault at some point
 

2523
00:48:36,640 --> 00:48:37,910
page fault at some point
because the parent is going to run or

2524
00:48:37,910 --> 00:48:37,920
because the parent is going to run or
 

2525
00:48:37,920 --> 00:48:40,150
because the parent is going to run or
the child is going to run

2526
00:48:40,150 --> 00:48:40,160
the child is going to run
 

2527
00:48:40,160 --> 00:48:43,349
the child is going to run
and uh and maybe you know the child or

2528
00:48:43,349 --> 00:48:43,359
and uh and maybe you know the child or
 

2529
00:48:43,359 --> 00:48:44,230
and uh and maybe you know the child or
the parent will

2530
00:48:44,230 --> 00:48:44,240
the parent will
 

2531
00:48:44,240 --> 00:48:46,870
the parent will
do a store instruction to maybe save the

2532
00:48:46,870 --> 00:48:46,880
do a store instruction to maybe save the
 

2533
00:48:46,880 --> 00:48:47,589
do a store instruction to maybe save the
data

2534
00:48:47,589 --> 00:48:47,599
data
 

2535
00:48:47,599 --> 00:48:49,990
data
to some global variable or somewhere and

2536
00:48:49,990 --> 00:48:50,000
to some global variable or somewhere and
 

2537
00:48:50,000 --> 00:48:51,270
to some global variable or somewhere and
at that point you know where

2538
00:48:51,270 --> 00:48:51,280
at that point you know where
 

2539
00:48:51,280 --> 00:48:53,109
at that point you know where
the that will cause a page fault because

2540
00:48:53,109 --> 00:48:53,119
the that will cause a page fault because
 

2541
00:48:53,119 --> 00:48:54,870
the that will cause a page fault because
you know we're writing to a page that is

2542
00:48:54,870 --> 00:48:54,880
you know we're writing to a page that is
 

2543
00:48:54,880 --> 00:48:55,349
you know we're writing to a page that is
mapped

2544
00:48:55,349 --> 00:48:55,359
mapped
 

2545
00:48:55,359 --> 00:48:57,510
mapped
only so we get a page fault and so what

2546
00:48:57,510 --> 00:48:57,520
only so we get a page fault and so what
 

2547
00:48:57,520 --> 00:48:58,870
only so we get a page fault and so what
do we need to do well we need to make a

2548
00:48:58,870 --> 00:48:58,880
do we need to do well we need to make a
 

2549
00:48:58,880 --> 00:49:03,030
do we need to do well we need to make a
copy of the page

2550
00:49:03,030 --> 00:49:03,040
copy of the page
 

2551
00:49:03,040 --> 00:49:05,270
copy of the page
so let's assume that it's the child that

2552
00:49:05,270 --> 00:49:05,280
so let's assume that it's the child that
 

2553
00:49:05,280 --> 00:49:06,309
so let's assume that it's the child that
actually uh

2554
00:49:06,309 --> 00:49:06,319
actually uh
 

2555
00:49:06,319 --> 00:49:08,309
actually uh
does the story instruction so we

2556
00:49:08,309 --> 00:49:08,319
does the story instruction so we
 

2557
00:49:08,319 --> 00:49:10,309
does the story instruction so we
allocate a new page

2558
00:49:10,309 --> 00:49:10,319
allocate a new page
 

2559
00:49:10,319 --> 00:49:13,430
allocate a new page
uh we copy you know the content

2560
00:49:13,430 --> 00:49:13,440
uh we copy you know the content
 

2561
00:49:13,440 --> 00:49:16,230
uh we copy you know the content
uh off the page that were faulted on

2562
00:49:16,230 --> 00:49:16,240
uh off the page that were faulted on
 

2563
00:49:16,240 --> 00:49:17,750
uh off the page that were faulted on
into this new page

2564
00:49:17,750 --> 00:49:17,760
into this new page
 

2565
00:49:17,760 --> 00:49:20,549
into this new page
we mapped that page into the child and

2566
00:49:20,549 --> 00:49:20,559
we mapped that page into the child and
 

2567
00:49:20,559 --> 00:49:21,349
we mapped that page into the child and
this time we can

2568
00:49:21,349 --> 00:49:21,359
this time we can
 

2569
00:49:21,359 --> 00:49:22,950
this time we can
happen to read write because it's now

2570
00:49:22,950 --> 00:49:22,960
happen to read write because it's now
 

2571
00:49:22,960 --> 00:49:24,950
happen to read write because it's now
private page only you know visible in

2572
00:49:24,950 --> 00:49:24,960
private page only you know visible in
 

2573
00:49:24,960 --> 00:49:26,549
private page only you know visible in
the child's address space

2574
00:49:26,549 --> 00:49:26,559
the child's address space
 

2575
00:49:26,559 --> 00:49:28,309
the child's address space
and in fact the page that will actually

2576
00:49:28,309 --> 00:49:28,319
and in fact the page that will actually
 

2577
00:49:28,319 --> 00:49:30,230
and in fact the page that will actually
be folded on we can also now map read

2578
00:49:30,230 --> 00:49:30,240
be folded on we can also now map read
 

2579
00:49:30,240 --> 00:49:31,190
be folded on we can also now map read
write

2580
00:49:31,190 --> 00:49:31,200
write
 

2581
00:49:31,200 --> 00:49:35,270
write
into the parent and so we copy the page

2582
00:49:35,270 --> 00:49:35,280
into the parent and so we copy the page
 

2583
00:49:35,280 --> 00:49:44,870
into the parent and so we copy the page
map it and restart the instruction

2584
00:49:44,870 --> 00:49:44,880
map it and restart the instruction
 

2585
00:49:44,880 --> 00:49:46,230
map it and restart the instruction
and when restarting instruction really

2586
00:49:46,230 --> 00:49:46,240
and when restarting instruction really
 

2587
00:49:46,240 --> 00:49:48,230
and when restarting instruction really
means you know doing user read you know

2588
00:49:48,230 --> 00:49:48,240
means you know doing user read you know
 

2589
00:49:48,240 --> 00:49:51,030
means you know doing user read you know
the same way that uh we returned to user

2590
00:49:51,030 --> 00:49:51,040
the same way that uh we returned to user
 

2591
00:49:51,040 --> 00:49:51,910
the same way that uh we returned to user
space

2592
00:49:51,910 --> 00:49:51,920
space
 

2593
00:49:51,920 --> 00:49:56,549
space
uh in uh last week's lecture

2594
00:49:56,549 --> 00:49:56,559

 

2595
00:49:56,559 --> 00:49:58,390

does this make sense any questions about

2596
00:49:58,390 --> 00:49:58,400
does this make sense any questions about
 

2597
00:49:58,400 --> 00:49:59,670
does this make sense any questions about
this one

2598
00:49:59,670 --> 00:49:59,680
this one
 

2599
00:49:59,680 --> 00:50:02,630
this one
i'm sorry um when you say we mapped the

2600
00:50:02,630 --> 00:50:02,640
i'm sorry um when you say we mapped the
 

2601
00:50:02,640 --> 00:50:03,829
i'm sorry um when you say we mapped the
parents

2602
00:50:03,829 --> 00:50:03,839
parents
 

2603
00:50:03,839 --> 00:50:07,270
parents
um virtual address to we also

2604
00:50:07,270 --> 00:50:07,280
um virtual address to we also
 

2605
00:50:07,280 --> 00:50:10,150
um virtual address to we also
read write uh how do we find it out is

2606
00:50:10,150 --> 00:50:10,160
read write uh how do we find it out is
 

2607
00:50:10,160 --> 00:50:10,950
read write uh how do we find it out is
it the same as

2608
00:50:10,950 --> 00:50:10,960
it the same as
 

2609
00:50:10,960 --> 00:50:13,670
it the same as
the child's oh yeah because the the

2610
00:50:13,670 --> 00:50:13,680
the child's oh yeah because the the
 

2611
00:50:13,680 --> 00:50:15,510
the child's oh yeah because the the
dress space of the child is a duplicate

2612
00:50:15,510 --> 00:50:15,520
dress space of the child is a duplicate
 

2613
00:50:15,520 --> 00:50:16,549
dress space of the child is a duplicate
of the

2614
00:50:16,549 --> 00:50:16,559
of the
 

2615
00:50:16,559 --> 00:50:19,430
of the
apparent address space right so if we

2616
00:50:19,430 --> 00:50:19,440
apparent address space right so if we
 

2617
00:50:19,440 --> 00:50:21,589
apparent address space right so if we
fall to the particular virtual dress

2618
00:50:21,589 --> 00:50:21,599
fall to the particular virtual dress
 

2619
00:50:21,599 --> 00:50:23,430
fall to the particular virtual dress
since the address spaces are equal you

2620
00:50:23,430 --> 00:50:23,440
since the address spaces are equal you
 

2621
00:50:23,440 --> 00:50:25,589
since the address spaces are equal you
know the it's the same virtual address

2622
00:50:25,589 --> 00:50:25,599
know the it's the same virtual address
 

2623
00:50:25,599 --> 00:50:26,470
know the it's the same virtual address
both in the parent's

2624
00:50:26,470 --> 00:50:26,480
both in the parent's
 

2625
00:50:26,480 --> 00:50:28,150
both in the parent's
address space and in the child's address

2626
00:50:28,150 --> 00:50:28,160
address space and in the child's address
 

2627
00:50:28,160 --> 00:50:31,510
address space and in the child's address
space

2628
00:50:31,510 --> 00:50:31,520

 

2629
00:50:31,520 --> 00:50:36,710

makes sense thank you

2630
00:50:36,710 --> 00:50:36,720

 

2631
00:50:36,720 --> 00:50:40,950

another question for let's say

2632
00:50:40,950 --> 00:50:40,960
another question for let's say
 

2633
00:50:40,960 --> 00:50:44,309
another question for let's say
like some parentless process maybe like

2634
00:50:44,309 --> 00:50:44,319
like some parentless process maybe like
 

2635
00:50:44,319 --> 00:50:46,150
like some parentless process maybe like
the first one that launches

2636
00:50:46,150 --> 00:50:46,160
the first one that launches
 

2637
00:50:46,160 --> 00:50:49,430
the first one that launches
does it use its pages

2638
00:50:49,430 --> 00:50:49,440
does it use its pages
 

2639
00:50:49,440 --> 00:50:52,630
does it use its pages
does it set just read permissions or

2640
00:50:52,630 --> 00:50:52,640
does it set just read permissions or
 

2641
00:50:52,640 --> 00:50:53,990
does it set just read permissions or
does it start off with read

2642
00:50:53,990 --> 00:50:54,000
does it start off with read
 

2643
00:50:54,000 --> 00:50:56,630
does it start off with read
write well we can and when it forks it

2644
00:50:56,630 --> 00:50:56,640
write well we can and when it forks it
 

2645
00:50:56,640 --> 00:50:57,910
write well we can and when it forks it
modifies

2646
00:50:57,910 --> 00:50:57,920
modifies
 

2647
00:50:57,920 --> 00:51:01,430
modifies
yeah okay it's up to you in fact

2648
00:51:01,430 --> 00:51:01,440
yeah okay it's up to you in fact
 

2649
00:51:01,440 --> 00:51:04,470
yeah okay it's up to you in fact
this is also one lap uh you're gonna

2650
00:51:04,470 --> 00:51:04,480
this is also one lap uh you're gonna
 

2651
00:51:04,480 --> 00:51:05,750
this is also one lap uh you're gonna
implement copy and write

2652
00:51:05,750 --> 00:51:05,760
implement copy and write
 

2653
00:51:05,760 --> 00:51:08,630
implement copy and write
uh after the lazy lab uh and you know

2654
00:51:08,630 --> 00:51:08,640
uh after the lazy lab uh and you know
 

2655
00:51:08,640 --> 00:51:09,910
uh after the lazy lab uh and you know
you have some freedom you know the easy

2656
00:51:09,910 --> 00:51:09,920
you have some freedom you know the easy
 

2657
00:51:09,920 --> 00:51:11,510
you have some freedom you know the easy
thing to do is just also map it read

2658
00:51:11,510 --> 00:51:11,520
thing to do is just also map it read
 

2659
00:51:11,520 --> 00:51:12,309
thing to do is just also map it read
only

2660
00:51:12,309 --> 00:51:12,319
only
 

2661
00:51:12,319 --> 00:51:14,390
only
you will get a page fault and then

2662
00:51:14,390 --> 00:51:14,400
you will get a page fault and then
 

2663
00:51:14,400 --> 00:51:16,230
you will get a page fault and then
you'll do whatever you normally also

2664
00:51:16,230 --> 00:51:16,240
you'll do whatever you normally also
 

2665
00:51:16,240 --> 00:51:17,910
you'll do whatever you normally also
would do in the copy and write

2666
00:51:17,910 --> 00:51:17,920
would do in the copy and write
 

2667
00:51:17,920 --> 00:51:20,230
would do in the copy and write
so you can use the same mechanism in

2668
00:51:20,230 --> 00:51:20,240
so you can use the same mechanism in
 

2669
00:51:20,240 --> 00:51:22,710
so you can use the same mechanism in
both cases

2670
00:51:22,710 --> 00:51:22,720
both cases
 

2671
00:51:22,720 --> 00:51:24,309
both cases
there's no reason to actually specialize

2672
00:51:24,309 --> 00:51:24,319
there's no reason to actually specialize
 

2673
00:51:24,319 --> 00:51:26,309
there's no reason to actually specialize
or do something

2674
00:51:26,309 --> 00:51:26,319
or do something
 

2675
00:51:26,319 --> 00:51:29,990
or do something
separate for the first process

2676
00:51:29,990 --> 00:51:30,000

 

2677
00:51:30,000 --> 00:51:33,829

okay thanks so um

2678
00:51:33,829 --> 00:51:33,839
okay thanks so um
 

2679
00:51:33,839 --> 00:51:36,710
okay thanks so um
i also have a question um given that we

2680
00:51:36,710 --> 00:51:36,720
i also have a question um given that we
 

2681
00:51:36,720 --> 00:51:37,990
i also have a question um given that we
like kind of copy

2682
00:51:37,990 --> 00:51:38,000
like kind of copy
 

2683
00:51:38,000 --> 00:51:41,030
like kind of copy
whole tables sorry whole pages around

2684
00:51:41,030 --> 00:51:41,040
whole tables sorry whole pages around
 

2685
00:51:41,040 --> 00:51:44,309
whole tables sorry whole pages around
pretty often um does

2686
00:51:44,309 --> 00:51:44,319
pretty often um does
 

2687
00:51:44,319 --> 00:51:47,349
pretty often um does
any like memory hardware implement

2688
00:51:47,349 --> 00:51:47,359
any like memory hardware implement
 

2689
00:51:47,359 --> 00:51:49,270
any like memory hardware implement
like a specific instruction because

2690
00:51:49,270 --> 00:51:49,280
like a specific instruction because
 

2691
00:51:49,280 --> 00:51:50,630
like a specific instruction because
basically memory

2692
00:51:50,630 --> 00:51:50,640
basically memory
 

2693
00:51:50,640 --> 00:51:52,790
basically memory
hardware will usually just have like

2694
00:51:52,790 --> 00:51:52,800
hardware will usually just have like
 

2695
00:51:52,800 --> 00:51:54,230
hardware will usually just have like
some data lines to say

2696
00:51:54,230 --> 00:51:54,240
some data lines to say
 

2697
00:51:54,240 --> 00:51:57,670
some data lines to say
read me or store this memory

2698
00:51:57,670 --> 00:51:57,680
read me or store this memory
 

2699
00:51:57,680 --> 00:52:00,549
read me or store this memory
because we have like oh copy page a to

2700
00:52:00,549 --> 00:52:00,559
because we have like oh copy page a to
 

2701
00:52:00,559 --> 00:52:02,470
because we have like oh copy page a to
page b

2702
00:52:02,470 --> 00:52:02,480
page b
 

2703
00:52:02,480 --> 00:52:05,430
page b
yeah there's a x86 for example has uh

2704
00:52:05,430 --> 00:52:05,440
yeah there's a x86 for example has uh
 

2705
00:52:05,440 --> 00:52:07,030
yeah there's a x86 for example has uh
hardware instructions for copying

2706
00:52:07,030 --> 00:52:07,040
hardware instructions for copying
 

2707
00:52:07,040 --> 00:52:08,549
hardware instructions for copying
rangers memory

2708
00:52:08,549 --> 00:52:08,559
rangers memory
 

2709
00:52:08,559 --> 00:52:12,150
rangers memory
uh you know vs5 doesn't uh

2710
00:52:12,150 --> 00:52:12,160
uh you know vs5 doesn't uh
 

2711
00:52:12,160 --> 00:52:15,829
uh you know vs5 doesn't uh
uh but of course you know in a very high

2712
00:52:15,829 --> 00:52:15,839
uh but of course you know in a very high
 

2713
00:52:15,839 --> 00:52:17,510
uh but of course you know in a very high
performance implementation

2714
00:52:17,510 --> 00:52:17,520
performance implementation
 

2715
00:52:17,520 --> 00:52:20,309
performance implementation
uh the all these recent rights will be

2716
00:52:20,309 --> 00:52:20,319
uh the all these recent rights will be
 

2717
00:52:20,319 --> 00:52:21,990
uh the all these recent rights will be
pipelined

2718
00:52:21,990 --> 00:52:22,000
pipelined
 

2719
00:52:22,000 --> 00:52:23,750
pipelined
and you know hopefully run at the speed

2720
00:52:23,750 --> 00:52:23,760
and you know hopefully run at the speed
 

2721
00:52:23,760 --> 00:52:28,150
and you know hopefully run at the speed
of the memory bandwidth

2722
00:52:28,150 --> 00:52:28,160

 

2723
00:52:28,160 --> 00:52:30,309

note that actually uh you know in

2724
00:52:30,309 --> 00:52:30,319
note that actually uh you know in
 

2725
00:52:30,319 --> 00:52:32,150
note that actually uh you know in
principle we might be lucky and we're

2726
00:52:32,150 --> 00:52:32,160
principle we might be lucky and we're
 

2727
00:52:32,160 --> 00:52:33,349
principle we might be lucky and we're
saving correct on

2728
00:52:33,349 --> 00:52:33,359
saving correct on
 

2729
00:52:33,359 --> 00:52:35,589
saving correct on
loads and stores or copies because in

2730
00:52:35,589 --> 00:52:35,599
loads and stores or copies because in
 

2731
00:52:35,599 --> 00:52:36,710
loads and stores or copies because in
this particular picture

2732
00:52:36,710 --> 00:52:36,720
this particular picture
 

2733
00:52:36,720 --> 00:52:39,190
this particular picture
i made only one copy and in the

2734
00:52:39,190 --> 00:52:39,200
i made only one copy and in the
 

2735
00:52:39,200 --> 00:52:41,270
i made only one copy and in the
unmodified case we would have copied all

2736
00:52:41,270 --> 00:52:41,280
unmodified case we would have copied all
 

2737
00:52:41,280 --> 00:52:43,030
unmodified case we would have copied all
four pages

2738
00:52:43,030 --> 00:52:43,040
four pages
 

2739
00:52:43,040 --> 00:52:44,470
four pages
and so hopefully you know this is just

2740
00:52:44,470 --> 00:52:44,480
and so hopefully you know this is just
 

2741
00:52:44,480 --> 00:52:46,309
and so hopefully you know this is just
like strictly better both in terms of

2742
00:52:46,309 --> 00:52:46,319
like strictly better both in terms of
 

2743
00:52:46,319 --> 00:52:47,510
like strictly better both in terms of
memory consumption and

2744
00:52:47,510 --> 00:52:47,520
memory consumption and
 

2745
00:52:47,520 --> 00:52:49,030
memory consumption and
in terms of performance you know fork

2746
00:52:49,030 --> 00:52:49,040
in terms of performance you know fork
 

2747
00:52:49,040 --> 00:52:53,990
in terms of performance you know fork
will just be faster

2748
00:52:53,990 --> 00:52:54,000

 

2749
00:52:54,000 --> 00:52:57,430

i have a quick question um when

2750
00:52:57,430 --> 00:52:57,440
i have a quick question um when
 

2751
00:52:57,440 --> 00:52:59,990
i have a quick question um when
when the page fault occurs and and we

2752
00:52:59,990 --> 00:53:00,000
when the page fault occurs and and we
 

2753
00:53:00,000 --> 00:53:00,549
when the page fault occurs and and we
see that

2754
00:53:00,549 --> 00:53:00,559
see that
 

2755
00:53:00,559 --> 00:53:02,630
see that
like it was it was essentially like we

2756
00:53:02,630 --> 00:53:02,640
like it was it was essentially like we
 

2757
00:53:02,640 --> 00:53:04,069
like it was it was essentially like we
were trying to write to a read-only

2758
00:53:04,069 --> 00:53:04,079
were trying to write to a read-only
 

2759
00:53:04,079 --> 00:53:04,790
were trying to write to a read-only
address

2760
00:53:04,790 --> 00:53:04,800
address
 

2761
00:53:04,800 --> 00:53:07,589
address
um how does the colonel tell uh like

2762
00:53:07,589 --> 00:53:07,599
um how does the colonel tell uh like
 

2763
00:53:07,599 --> 00:53:08,470
um how does the colonel tell uh like
that this is a

2764
00:53:08,470 --> 00:53:08,480
that this is a
 

2765
00:53:08,480 --> 00:53:10,390
that this is a
situation where it's copy on right fork

2766
00:53:10,390 --> 00:53:10,400
situation where it's copy on right fork
 

2767
00:53:10,400 --> 00:53:12,230
situation where it's copy on right fork
versus just a situation where the memory

2768
00:53:12,230 --> 00:53:12,240
versus just a situation where the memory
 

2769
00:53:12,240 --> 00:53:13,910
versus just a situation where the memory
it was trying to write was was marked as

2770
00:53:13,910 --> 00:53:13,920
it was trying to write was was marked as
 

2771
00:53:13,920 --> 00:53:15,430
it was trying to write was was marked as
read only for some

2772
00:53:15,430 --> 00:53:15,440
read only for some
 

2773
00:53:15,440 --> 00:53:17,190
read only for some
like legitimate reason other than copy

2774
00:53:17,190 --> 00:53:17,200
like legitimate reason other than copy
 

2775
00:53:17,200 --> 00:53:18,630
like legitimate reason other than copy
on right fork is it just kind of an

2776
00:53:18,630 --> 00:53:18,640
on right fork is it just kind of an
 

2777
00:53:18,640 --> 00:53:19,270
on right fork is it just kind of an
invariant

2778
00:53:19,270 --> 00:53:19,280
invariant
 

2779
00:53:19,280 --> 00:53:21,990
invariant
that if if uh if it's user memory then

2780
00:53:21,990 --> 00:53:22,000
that if if uh if it's user memory then
 

2781
00:53:22,000 --> 00:53:23,910
that if if uh if it's user memory then
it will be mapped read write unless it

2782
00:53:23,910 --> 00:53:23,920
it will be mapped read write unless it
 

2783
00:53:23,920 --> 00:53:25,750
it will be mapped read write unless it
was a result of copy on port

2784
00:53:25,750 --> 00:53:25,760
was a result of copy on port
 

2785
00:53:25,760 --> 00:53:29,190
was a result of copy on port
yeah right so it is a an invariant that

2786
00:53:29,190 --> 00:53:29,200
yeah right so it is a an invariant that
 

2787
00:53:29,200 --> 00:53:30,710
yeah right so it is a an invariant that
needs to be maintained in the kernel and

2788
00:53:30,710 --> 00:53:30,720
needs to be maintained in the kernel and
 

2789
00:53:30,720 --> 00:53:31,109
needs to be maintained in the kernel and
the

2790
00:53:31,109 --> 00:53:31,119
the
 

2791
00:53:31,119 --> 00:53:32,870
the
kernel must recognize in some way that

2792
00:53:32,870 --> 00:53:32,880
kernel must recognize in some way that
 

2793
00:53:32,880 --> 00:53:34,390
kernel must recognize in some way that
this is a copy and write page if you

2794
00:53:34,390 --> 00:53:34,400
this is a copy and write page if you
 

2795
00:53:34,400 --> 00:53:35,270
this is a copy and write page if you
will

2796
00:53:35,270 --> 00:53:35,280
will
 

2797
00:53:35,280 --> 00:53:37,109
will
um and so i'm very glad you asked a

2798
00:53:37,109 --> 00:53:37,119
um and so i'm very glad you asked a
 

2799
00:53:37,119 --> 00:53:39,270
um and so i'm very glad you asked a
question because uh turns out you know

2800
00:53:39,270 --> 00:53:39,280
question because uh turns out you know
 

2801
00:53:39,280 --> 00:53:41,270
question because uh turns out you know
the risk five hardware almost all page

2802
00:53:41,270 --> 00:53:41,280
the risk five hardware almost all page
 

2803
00:53:41,280 --> 00:53:41,990
the risk five hardware almost all page
table hardware

2804
00:53:41,990 --> 00:53:42,000
table hardware
 

2805
00:53:42,000 --> 00:53:45,109
table hardware
actually has support for this uh and we

2806
00:53:45,109 --> 00:53:45,119
actually has support for this uh and we
 

2807
00:53:45,119 --> 00:53:46,549
actually has support for this uh and we
didn't mention that earlier but here's

2808
00:53:46,549 --> 00:53:46,559
didn't mention that earlier but here's
 

2809
00:53:46,559 --> 00:53:47,030
didn't mention that earlier but here's
our

2810
00:53:47,030 --> 00:53:47,040
our
 

2811
00:53:47,040 --> 00:53:48,950
our
you know our usual you know whatever two

2812
00:53:48,950 --> 00:53:48,960
you know our usual you know whatever two
 

2813
00:53:48,960 --> 00:53:51,910
you know our usual you know whatever two
level uh or multi-level uh page table

2814
00:53:51,910 --> 00:53:51,920
level uh or multi-level uh page table
 

2815
00:53:51,920 --> 00:53:55,990
level uh or multi-level uh page table
here's our pte

2816
00:53:55,990 --> 00:53:56,000
here's our pte
 

2817
00:53:56,000 --> 00:53:58,069
here's our pte
and if you look at the pte you know i

2818
00:53:58,069 --> 00:53:58,079
and if you look at the pte you know i
 

2819
00:53:58,079 --> 00:53:59,750
and if you look at the pte you know i
talked about the bits you know

2820
00:53:59,750 --> 00:53:59,760
talked about the bits you know
 

2821
00:53:59,760 --> 00:54:02,069
talked about the bits you know
one zero through seven but not about

2822
00:54:02,069 --> 00:54:02,079
one zero through seven but not about
 

2823
00:54:02,079 --> 00:54:03,190
one zero through seven but not about
these two bits

2824
00:54:03,190 --> 00:54:03,200
these two bits
 

2825
00:54:03,200 --> 00:54:07,109
these two bits
rsw and

2826
00:54:07,109 --> 00:54:07,119
rsw and
 

2827
00:54:07,119 --> 00:54:09,109
rsw and
they are reserved for supervisor

2828
00:54:09,109 --> 00:54:09,119
they are reserved for supervisor
 

2829
00:54:09,119 --> 00:54:10,790
they are reserved for supervisor
software so

2830
00:54:10,790 --> 00:54:10,800
software so
 

2831
00:54:10,800 --> 00:54:12,470
software so
the supervisor software you know this is

2832
00:54:12,470 --> 00:54:12,480
the supervisor software you know this is
 

2833
00:54:12,480 --> 00:54:14,150
the supervisor software you know this is
the kernel uh

2834
00:54:14,150 --> 00:54:14,160
the kernel uh
 

2835
00:54:14,160 --> 00:54:17,510
the kernel uh
can use these bits at its own free will

2836
00:54:17,510 --> 00:54:17,520
can use these bits at its own free will
 

2837
00:54:17,520 --> 00:54:19,670
can use these bits at its own free will
and so one thing one could do is like

2838
00:54:19,670 --> 00:54:19,680
and so one thing one could do is like
 

2839
00:54:19,680 --> 00:54:21,430
and so one thing one could do is like
say decide that bit a basically means

2840
00:54:21,430 --> 00:54:21,440
say decide that bit a basically means
 

2841
00:54:21,440 --> 00:54:23,270
say decide that bit a basically means
this is a copy and write page or copy to

2842
00:54:23,270 --> 00:54:23,280
this is a copy and write page or copy to
 

2843
00:54:23,280 --> 00:54:24,470
this is a copy and write page or copy to
write fault

2844
00:54:24,470 --> 00:54:24,480
write fault
 

2845
00:54:24,480 --> 00:54:27,349
write fault
and so when the kernel programs you know

2846
00:54:27,349 --> 00:54:27,359
and so when the kernel programs you know
 

2847
00:54:27,359 --> 00:54:28,870
and so when the kernel programs you know
these page tables

2848
00:54:28,870 --> 00:54:28,880
these page tables
 

2849
00:54:28,880 --> 00:54:30,790
these page tables
for you know copy and write you know you

2850
00:54:30,790 --> 00:54:30,800
for you know copy and write you know you
 

2851
00:54:30,800 --> 00:54:32,790
for you know copy and write you know you
can just pull to on the pte's you know

2852
00:54:32,790 --> 00:54:32,800
can just pull to on the pte's you know
 

2853
00:54:32,800 --> 00:54:36,789
can just pull to on the pte's you know
for these particular pages

2854
00:54:36,789 --> 00:54:36,799

 

2855
00:54:36,799 --> 00:54:38,789

the bits you know set a bit uh copy and

2856
00:54:38,789 --> 00:54:38,799
the bits you know set a bit uh copy and
 

2857
00:54:38,799 --> 00:54:39,910
the bits you know set a bit uh copy and
write so that when the

2858
00:54:39,910 --> 00:54:39,920
write so that when the
 

2859
00:54:39,920 --> 00:54:42,549
write so that when the
page fault happens and we see that the

2860
00:54:42,549 --> 00:54:42,559
page fault happens and we see that the
 

2861
00:54:42,559 --> 00:54:44,230
page fault happens and we see that the
copy and right bit is set

2862
00:54:44,230 --> 00:54:44,240
copy and right bit is set
 

2863
00:54:44,240 --> 00:54:46,789
copy and right bit is set
then we just go off and do this and

2864
00:54:46,789 --> 00:54:46,799
then we just go off and do this and
 

2865
00:54:46,799 --> 00:54:49,829
then we just go off and do this and
otherwise we do something else

2866
00:54:49,829 --> 00:54:49,839
otherwise we do something else
 

2867
00:54:49,839 --> 00:54:54,069
otherwise we do something else
for example maybe it's a lazy allocation

2868
00:54:54,069 --> 00:54:54,079

 

2869
00:54:54,079 --> 00:54:57,829

does that make sense yeah thank you

2870
00:54:57,829 --> 00:54:57,839
does that make sense yeah thank you
 

2871
00:54:57,839 --> 00:55:01,030
does that make sense yeah thank you
and in fact in uh in the lab you know

2872
00:55:01,030 --> 00:55:01,040
and in fact in uh in the lab you know
 

2873
00:55:01,040 --> 00:55:02,390
and in fact in uh in the lab you know
one of the things you will be doing is

2874
00:55:02,390 --> 00:55:02,400
one of the things you will be doing is
 

2875
00:55:02,400 --> 00:55:03,589
one of the things you will be doing is
probably use that bit

2876
00:55:03,589 --> 00:55:03,599
probably use that bit
 

2877
00:55:03,599 --> 00:55:05,430
probably use that bit
you know set a copy and write bit in the

2878
00:55:05,430 --> 00:55:05,440
you know set a copy and write bit in the
 

2879
00:55:05,440 --> 00:55:07,990
you know set a copy and write bit in the
pte

2880
00:55:07,990 --> 00:55:08,000

 

2881
00:55:08,000 --> 00:55:09,910

there's one more wrinkle that will show

2882
00:55:09,910 --> 00:55:09,920
there's one more wrinkle that will show
 

2883
00:55:09,920 --> 00:55:12,549
there's one more wrinkle that will show
up in the copy and write lab is that

2884
00:55:12,549 --> 00:55:12,559
up in the copy and write lab is that
 

2885
00:55:12,559 --> 00:55:15,990
up in the copy and write lab is that
there's some currently in xg6 basically

2886
00:55:15,990 --> 00:55:16,000
there's some currently in xg6 basically
 

2887
00:55:16,000 --> 00:55:18,309
there's some currently in xg6 basically
a physical page more or less only

2888
00:55:18,309 --> 00:55:18,319
a physical page more or less only
 

2889
00:55:18,319 --> 00:55:19,750
a physical page more or less only
belongs to one

2890
00:55:19,750 --> 00:55:19,760
belongs to one
 

2891
00:55:19,760 --> 00:55:21,589
belongs to one
process with the exception of the

2892
00:55:21,589 --> 00:55:21,599
process with the exception of the
 

2893
00:55:21,599 --> 00:55:23,109
process with the exception of the
trampoline page

2894
00:55:23,109 --> 00:55:23,119
trampoline page
 

2895
00:55:23,119 --> 00:55:24,470
trampoline page
which is the family page we're never

2896
00:55:24,470 --> 00:55:24,480
which is the family page we're never
 

2897
00:55:24,480 --> 00:55:26,309
which is the family page we're never
free so that is not really a particular

2898
00:55:26,309 --> 00:55:26,319
free so that is not really a particular
 

2899
00:55:26,319 --> 00:55:28,069
free so that is not really a particular
big issue

2900
00:55:28,069 --> 00:55:28,079
big issue
 

2901
00:55:28,079 --> 00:55:31,270
big issue
but for these pages you know now we have

2902
00:55:31,270 --> 00:55:31,280
but for these pages you know now we have
 

2903
00:55:31,280 --> 00:55:33,430
but for these pages you know now we have
multiple processes or multiple dress

2904
00:55:33,430 --> 00:55:33,440
multiple processes or multiple dress
 

2905
00:55:33,440 --> 00:55:35,030
multiple processes or multiple dress
spaces pointing to the same physical

2906
00:55:35,030 --> 00:55:35,040
spaces pointing to the same physical
 

2907
00:55:35,040 --> 00:55:35,990
spaces pointing to the same physical
address

2908
00:55:35,990 --> 00:55:36,000
address
 

2909
00:55:36,000 --> 00:55:39,030
address
and so for example if the parent exits

2910
00:55:39,030 --> 00:55:39,040
and so for example if the parent exits
 

2911
00:55:39,040 --> 00:55:40,630
and so for example if the parent exits
right away we got a little bit care and

2912
00:55:40,630 --> 00:55:40,640
right away we got a little bit care and
 

2913
00:55:40,640 --> 00:55:42,230
right away we got a little bit care and
be careful correct because

2914
00:55:42,230 --> 00:55:42,240
be careful correct because
 

2915
00:55:42,240 --> 00:55:44,630
be careful correct because
can we free that page immediately if the

2916
00:55:44,630 --> 00:55:44,640
can we free that page immediately if the
 

2917
00:55:44,640 --> 00:55:49,750
can we free that page immediately if the
parent exits

2918
00:55:49,750 --> 00:55:49,760
parent exits
 

2919
00:55:49,760 --> 00:55:52,470
parent exits
oh maybe not because there may be

2920
00:55:52,470 --> 00:55:52,480
oh maybe not because there may be
 

2921
00:55:52,480 --> 00:55:53,589
oh maybe not because there may be
multiple

2922
00:55:53,589 --> 00:55:53,599
multiple
 

2923
00:55:53,599 --> 00:55:55,589
multiple
children processes yeah there might be a

2924
00:55:55,589 --> 00:55:55,599
children processes yeah there might be a
 

2925
00:55:55,599 --> 00:55:57,349
children processes yeah there might be a
child correct using that page and so

2926
00:55:57,349 --> 00:55:57,359
child correct using that page and so
 

2927
00:55:57,359 --> 00:55:59,750
child correct using that page and so
we if the colonel would free that page

2928
00:55:59,750 --> 00:55:59,760
we if the colonel would free that page
 

2929
00:55:59,760 --> 00:56:00,549
we if the colonel would free that page
then

2930
00:56:00,549 --> 00:56:00,559
then
 

2931
00:56:00,559 --> 00:56:02,710
then
uh you know we're going to be in trouble

2932
00:56:02,710 --> 00:56:02,720
uh you know we're going to be in trouble
 

2933
00:56:02,720 --> 00:56:04,150
uh you know we're going to be in trouble
because basically the

2934
00:56:04,150 --> 00:56:04,160
because basically the
 

2935
00:56:04,160 --> 00:56:06,870
because basically the
if you look at k3 k3 actually uh writes

2936
00:56:06,870 --> 00:56:06,880
if you look at k3 k3 actually uh writes
 

2937
00:56:06,880 --> 00:56:08,069
if you look at k3 k3 actually uh writes
all kinds of ones on

2938
00:56:08,069 --> 00:56:08,079
all kinds of ones on
 

2939
00:56:08,079 --> 00:56:10,309
all kinds of ones on
three page and so then the child runs

2940
00:56:10,309 --> 00:56:10,319
three page and so then the child runs
 

2941
00:56:10,319 --> 00:56:11,270
three page and so then the child runs
with that page you know all kinds of

2942
00:56:11,270 --> 00:56:11,280
with that page you know all kinds of
 

2943
00:56:11,280 --> 00:56:13,910
with that page you know all kinds of
bizarre things are going to happen

2944
00:56:13,910 --> 00:56:13,920
bizarre things are going to happen
 

2945
00:56:13,920 --> 00:56:15,589
bizarre things are going to happen
so what should the rule be now for

2946
00:56:15,589 --> 00:56:15,599
so what should the rule be now for
 

2947
00:56:15,599 --> 00:56:23,430
so what should the rule be now for
freeing

2948
00:56:23,430 --> 00:56:23,440

 

2949
00:56:23,440 --> 00:56:27,589

i'm free if you don't have children

2950
00:56:27,589 --> 00:56:27,599
i'm free if you don't have children
 

2951
00:56:27,599 --> 00:56:30,309
i'm free if you don't have children
i guess yeah maybe a better way or sort

2952
00:56:30,309 --> 00:56:30,319
i guess yeah maybe a better way or sort
 

2953
00:56:30,319 --> 00:56:31,510
i guess yeah maybe a better way or sort
of a more general version of that

2954
00:56:31,510 --> 00:56:31,520
of a more general version of that
 

2955
00:56:31,520 --> 00:56:33,190
of a more general version of that
statement is to say well what we really

2956
00:56:33,190 --> 00:56:33,200
statement is to say well what we really
 

2957
00:56:33,200 --> 00:56:34,069
statement is to say well what we really
need to do

2958
00:56:34,069 --> 00:56:34,079
need to do
 

2959
00:56:34,079 --> 00:56:38,789
need to do
is we need to ref count

2960
00:56:38,789 --> 00:56:38,799

 

2961
00:56:38,799 --> 00:56:42,230

every physical page and when we free the

2962
00:56:42,230 --> 00:56:42,240
every physical page and when we free the
 

2963
00:56:42,240 --> 00:56:42,630
every physical page and when we free the
page

2964
00:56:42,630 --> 00:56:42,640
page
 

2965
00:56:42,640 --> 00:56:45,270
page
we decrease the ref count by one and if

2966
00:56:45,270 --> 00:56:45,280
we decrease the ref count by one and if
 

2967
00:56:45,280 --> 00:56:46,950
we decrease the ref count by one and if
the ref ground reaches zero then

2968
00:56:46,950 --> 00:56:46,960
the ref ground reaches zero then
 

2969
00:56:46,960 --> 00:56:48,870
the ref ground reaches zero then
actually we can free the page

2970
00:56:48,870 --> 00:56:48,880
actually we can free the page
 

2971
00:56:48,880 --> 00:56:50,630
actually we can free the page
and so you will have to introduce uh

2972
00:56:50,630 --> 00:56:50,640
and so you will have to introduce uh
 

2973
00:56:50,640 --> 00:56:52,630
and so you will have to introduce uh
some additional data structure or some

2974
00:56:52,630 --> 00:56:52,640
some additional data structure or some
 

2975
00:56:52,640 --> 00:56:55,030
some additional data structure or some
meta information in the copy and write a

2976
00:56:55,030 --> 00:56:55,040
meta information in the copy and write a
 

2977
00:56:55,040 --> 00:56:59,670
meta information in the copy and write a
lot to actually do that ref counting

2978
00:56:59,670 --> 00:56:59,680
lot to actually do that ref counting
 

2979
00:56:59,680 --> 00:57:01,430
lot to actually do that ref counting
where can we store this because this if

2980
00:57:01,430 --> 00:57:01,440
where can we store this because this if
 

2981
00:57:01,440 --> 00:57:03,430
where can we store this because this if
we ever have to ref count every single

2982
00:57:03,430 --> 00:57:03,440
we ever have to ref count every single
 

2983
00:57:03,440 --> 00:57:05,270
we ever have to ref count every single
page that could be a lot

2984
00:57:05,270 --> 00:57:05,280
page that could be a lot
 

2985
00:57:05,280 --> 00:57:07,589
page that could be a lot
yeah we well for every physical page of

2986
00:57:07,589 --> 00:57:07,599
yeah we well for every physical page of
 

2987
00:57:07,599 --> 00:57:08,950
yeah we well for every physical page of
memory we you'll have to do a rough

2988
00:57:08,950 --> 00:57:08,960
memory we you'll have to do a rough
 

2989
00:57:08,960 --> 00:57:11,030
memory we you'll have to do a rough
count yeah

2990
00:57:11,030 --> 00:57:11,040
count yeah
 

2991
00:57:11,040 --> 00:57:12,390
count yeah
you can get away with a little bit less

2992
00:57:12,390 --> 00:57:12,400
you can get away with a little bit less
 

2993
00:57:12,400 --> 00:57:13,589
you can get away with a little bit less
but then we're in the for the for

2994
00:57:13,589 --> 00:57:13,599
but then we're in the for the for
 

2995
00:57:13,599 --> 00:57:14,870
but then we're in the for the for
simplification in lab we're going to use

2996
00:57:14,870 --> 00:57:14,880
simplification in lab we're going to use
 

2997
00:57:14,880 --> 00:57:15,829
simplification in lab we're going to use
that for every one

2998
00:57:15,829 --> 00:57:15,839
that for every one
 

2999
00:57:15,839 --> 00:57:19,030
that for every one
physical so for every 496 bytes we need

3000
00:57:19,030 --> 00:57:19,040
physical so for every 496 bytes we need
 

3001
00:57:19,040 --> 00:57:23,589
physical so for every 496 bytes we need
to maintain a reference count

3002
00:57:23,589 --> 00:57:23,599

 

3003
00:57:23,599 --> 00:57:26,230

can we write that down in those other

3004
00:57:26,230 --> 00:57:26,240
can we write that down in those other
 

3005
00:57:26,240 --> 00:57:27,109
can we write that down in those other
two free

3006
00:57:27,109 --> 00:57:27,119
two free
 

3007
00:57:27,119 --> 00:57:30,710
two free
bits and say that no more

3008
00:57:30,710 --> 00:57:30,720
bits and say that no more
 

3009
00:57:30,720 --> 00:57:34,309
bits and say that no more
for um good good

3010
00:57:34,309 --> 00:57:34,319
for um good good
 

3011
00:57:34,319 --> 00:57:37,430
for um good good
yeah i'm

3012
00:57:37,430 --> 00:57:37,440
yeah i'm
 

3013
00:57:37,440 --> 00:57:39,910
yeah i'm
not unreasonable but uh you know if you

3014
00:57:39,910 --> 00:57:39,920
not unreasonable but uh you know if you
 

3015
00:57:39,920 --> 00:57:41,750
not unreasonable but uh you know if you
reform it multiple times

3016
00:57:41,750 --> 00:57:41,760
reform it multiple times
 

3017
00:57:41,760 --> 00:57:44,789
reform it multiple times
that'd be too bad right and after three

3018
00:57:44,789 --> 00:57:44,799
that'd be too bad right and after three
 

3019
00:57:44,799 --> 00:57:46,309
that'd be too bad right and after three
times your four times you can't don't

3020
00:57:46,309 --> 00:57:46,319
times your four times you can't don't
 

3021
00:57:46,319 --> 00:57:51,990
times your four times you can't don't
you can't do the optimization anymore

3022
00:57:51,990 --> 00:57:52,000

 

3023
00:57:52,000 --> 00:57:53,510

but yeah you know there's some freedom

3024
00:57:53,510 --> 00:57:53,520
but yeah you know there's some freedom
 

3025
00:57:53,520 --> 00:57:55,190
but yeah you know there's some freedom
here uh

3026
00:57:55,190 --> 00:57:55,200
here uh
 

3027
00:57:55,200 --> 00:57:58,710
here uh
also um do you really need to use that

3028
00:57:58,710 --> 00:57:58,720
also um do you really need to use that
 

3029
00:57:58,720 --> 00:58:01,030
also um do you really need to use that
bit to specify if it's a copy on write

3030
00:58:01,030 --> 00:58:01,040
bit to specify if it's a copy on write
 

3031
00:58:01,040 --> 00:58:01,990
bit to specify if it's a copy on write
because

3032
00:58:01,990 --> 00:58:02,000
because
 

3033
00:58:02,000 --> 00:58:05,349
because
the kernel could also uh maintain some

3034
00:58:05,349 --> 00:58:05,359
the kernel could also uh maintain some
 

3035
00:58:05,359 --> 00:58:08,390
the kernel could also uh maintain some
information about the processes that

3036
00:58:08,390 --> 00:58:08,400
information about the processes that
 

3037
00:58:08,400 --> 00:58:11,190
information about the processes that
yes yeah yeah yeah you could you could

3038
00:58:11,190 --> 00:58:11,200
yes yeah yeah yeah you could you could
 

3039
00:58:11,200 --> 00:58:12,710
yes yeah yeah yeah you could you could
maintain some other meta information

3040
00:58:12,710 --> 00:58:12,720
maintain some other meta information
 

3041
00:58:12,720 --> 00:58:14,470
maintain some other meta information
along with the process address days to

3042
00:58:14,470 --> 00:58:14,480
along with the process address days to
 

3043
00:58:14,480 --> 00:58:15,589
along with the process address days to
say basically well

3044
00:58:15,589 --> 00:58:15,599
say basically well
 

3045
00:58:15,599 --> 00:58:17,109
say basically well
virtual addresses between this and that

3046
00:58:17,109 --> 00:58:17,119
virtual addresses between this and that
 

3047
00:58:17,119 --> 00:58:19,190
virtual addresses between this and that
are text addresses so we have a page

3048
00:58:19,190 --> 00:58:19,200
are text addresses so we have a page
 

3049
00:58:19,200 --> 00:58:20,309
are text addresses so we have a page
fault there and

3050
00:58:20,309 --> 00:58:20,319
fault there and
 

3051
00:58:20,319 --> 00:58:23,510
fault there and
it must be copyright or something

3052
00:58:23,510 --> 00:58:23,520
it must be copyright or something
 

3053
00:58:23,520 --> 00:58:24,950
it must be copyright or something
and in fact one of the later labs you

3054
00:58:24,950 --> 00:58:24,960
and in fact one of the later labs you
 

3055
00:58:24,960 --> 00:58:27,030
and in fact one of the later labs you
know you you will certainly extend

3056
00:58:27,030 --> 00:58:27,040
know you you will certainly extend
 

3057
00:58:27,040 --> 00:58:29,349
know you you will certainly extend
uh the meta information that xv6

3058
00:58:29,349 --> 00:58:29,359
uh the meta information that xv6
 

3059
00:58:29,359 --> 00:58:30,549
uh the meta information that xv6
maintains

3060
00:58:30,549 --> 00:58:30,559
maintains
 

3061
00:58:30,559 --> 00:58:33,990
maintains
exactly for that reason

3062
00:58:33,990 --> 00:58:34,000

 

3063
00:58:34,000 --> 00:58:35,750

there's a bit of freedom here when you

3064
00:58:35,750 --> 00:58:35,760
there's a bit of freedom here when you
 

3065
00:58:35,760 --> 00:58:40,870
there's a bit of freedom here when you
start implementing these labs

3066
00:58:40,870 --> 00:58:40,880

 

3067
00:58:40,880 --> 00:59:03,990

any further questions about this

3068
00:59:03,990 --> 00:59:04,000

 

3069
00:59:04,000 --> 00:59:07,030

okay uh then let's go to the next one uh

3070
00:59:07,030 --> 00:59:07,040
okay uh then let's go to the next one uh
 

3071
00:59:07,040 --> 00:59:08,230
okay uh then let's go to the next one uh
this is something that's called

3072
00:59:08,230 --> 00:59:08,240
this is something that's called
 

3073
00:59:08,240 --> 00:59:11,349
this is something that's called
uh demand paging

3074
00:59:11,349 --> 00:59:11,359
uh demand paging
 

3075
00:59:11,359 --> 00:59:13,270
uh demand paging
another very popular one and most

3076
00:59:13,270 --> 00:59:13,280
another very popular one and most
 

3077
00:59:13,280 --> 00:59:15,829
another very popular one and most
operating systems implemented

3078
00:59:15,829 --> 00:59:15,839
operating systems implemented
 

3079
00:59:15,839 --> 00:59:19,190
operating systems implemented
um and so the the uh you know it just

3080
00:59:19,190 --> 00:59:19,200
um and so the the uh you know it just
 

3081
00:59:19,200 --> 00:59:20,470
um and so the the uh you know it just
goes back basically to

3082
00:59:20,470 --> 00:59:20,480
goes back basically to
 

3083
00:59:20,480 --> 00:59:24,150
goes back basically to
exec

3084
00:59:24,150 --> 00:59:24,160

 

3085
00:59:24,160 --> 00:59:27,349

so currently in unmodified xv6 you know

3086
00:59:27,349 --> 00:59:27,359
so currently in unmodified xv6 you know
 

3087
00:59:27,359 --> 00:59:29,190
so currently in unmodified xv6 you know
x6 actually loads

3088
00:59:29,190 --> 00:59:29,200
x6 actually loads
 

3089
00:59:29,200 --> 00:59:32,230
x6 actually loads
the text segment

3090
00:59:32,230 --> 00:59:32,240
the text segment
 

3091
00:59:32,240 --> 00:59:35,430
the text segment
and the data segment from file and maps

3092
00:59:35,430 --> 00:59:35,440
and the data segment from file and maps
 

3093
00:59:35,440 --> 00:59:37,270
and the data segment from file and maps
it in

3094
00:59:37,270 --> 00:59:37,280
it in
 

3095
00:59:37,280 --> 00:59:40,630
it in
eagerly in basically

3096
00:59:40,630 --> 00:59:40,640
eagerly in basically
 

3097
00:59:40,640 --> 00:59:46,950
eagerly in basically
into the page table

3098
00:59:46,950 --> 00:59:46,960
into the page table
 

3099
00:59:46,960 --> 00:59:48,870
into the page table
and basically the same observation that

3100
00:59:48,870 --> 00:59:48,880
and basically the same observation that
 

3101
00:59:48,880 --> 00:59:50,069
and basically the same observation that
we made for lazy

3102
00:59:50,069 --> 00:59:50,079
we made for lazy
 

3103
00:59:50,079 --> 00:59:52,789
we made for lazy
and zero filled is that well what we

3104
00:59:52,789 --> 00:59:52,799
and zero filled is that well what we
 

3105
00:59:52,799 --> 00:59:54,630
and zero filled is that well what we
could do is like why do it eagerly

3106
00:59:54,630 --> 00:59:54,640
could do is like why do it eagerly
 

3107
00:59:54,640 --> 00:59:57,109
could do is like why do it eagerly
why not let's wait a little while uh

3108
00:59:57,109 --> 00:59:57,119
why not let's wait a little while uh
 

3109
00:59:57,119 --> 00:59:59,030
why not let's wait a little while uh
until to see if actually the application

3110
00:59:59,030 --> 00:59:59,040
until to see if actually the application
 

3111
00:59:59,040 --> 01:00:00,710
until to see if actually the application
really needs you know those particular

3112
01:00:00,710 --> 01:00:00,720
really needs you know those particular
 

3113
01:00:00,720 --> 01:00:02,150
really needs you know those particular
set of instructions you know the

3114
01:00:02,150 --> 01:00:02,160
set of instructions you know the
 

3115
01:00:02,160 --> 01:00:05,510
set of instructions you know the
the binary might be very big uh and

3116
01:00:05,510 --> 01:00:05,520
the binary might be very big uh and
 

3117
01:00:05,520 --> 01:00:08,710
the binary might be very big uh and
instead of actually uh loading it all

3118
01:00:08,710 --> 01:00:08,720
instead of actually uh loading it all
 

3119
01:00:08,720 --> 01:00:10,150
instead of actually uh loading it all
in you know from disk it tends to be

3120
01:00:10,150 --> 01:00:10,160
in you know from disk it tends to be
 

3121
01:00:10,160 --> 01:00:12,150
in you know from disk it tends to be
expensive operation uh

3122
01:00:12,150 --> 01:00:12,160
expensive operation uh
 

3123
01:00:12,160 --> 01:00:13,589
expensive operation uh
maybe the data segment is much bigger

3124
01:00:13,589 --> 01:00:13,599
maybe the data segment is much bigger
 

3125
01:00:13,599 --> 01:00:15,510
maybe the data segment is much bigger
than it really needs than the typical

3126
01:00:15,510 --> 01:00:15,520
than it really needs than the typical
 

3127
01:00:15,520 --> 01:00:16,230
than it really needs than the typical
use case

3128
01:00:16,230 --> 01:00:16,240
use case
 

3129
01:00:16,240 --> 01:00:18,630
use case
uh requires we don't really have to do

3130
01:00:18,630 --> 01:00:18,640
uh requires we don't really have to do
 

3131
01:00:18,640 --> 01:00:19,589
uh requires we don't really have to do
that

3132
01:00:19,589 --> 01:00:19,599
that
 

3133
01:00:19,599 --> 01:00:22,710
that
and so instead of uh on exec

3134
01:00:22,710 --> 01:00:22,720
and so instead of uh on exec
 

3135
01:00:22,720 --> 01:00:24,549
and so instead of uh on exec
instead of actually you know we allocate

3136
01:00:24,549 --> 01:00:24,559
instead of actually you know we allocate
 

3137
01:00:24,559 --> 01:00:25,990
instead of actually you know we allocate
the virtual address space you know we'll

3138
01:00:25,990 --> 01:00:26,000
the virtual address space you know we'll
 

3139
01:00:26,000 --> 01:00:26,630
the virtual address space you know we'll
allocate the

3140
01:00:26,630 --> 01:00:26,640
allocate the
 

3141
01:00:26,640 --> 01:00:30,069
allocate the
address base for the text and the data

3142
01:00:30,069 --> 01:00:30,079
address base for the text and the data
 

3143
01:00:30,079 --> 01:00:33,829
address base for the text and the data
uh that's it in the file but in the ptes

3144
01:00:33,829 --> 01:00:33,839
uh that's it in the file but in the ptes
 

3145
01:00:33,839 --> 01:00:35,670
uh that's it in the file but in the ptes
we're going to not map them at all you

3146
01:00:35,670 --> 01:00:35,680
we're going to not map them at all you
 

3147
01:00:35,680 --> 01:00:37,030
we're going to not map them at all you
know it's going to keep you know in the

3148
01:00:37,030 --> 01:00:37,040
know it's going to keep you know in the
 

3149
01:00:37,040 --> 01:00:37,670
know it's going to keep you know in the
pte

3150
01:00:37,670 --> 01:00:37,680
pte
 

3151
01:00:37,680 --> 01:00:39,270
pte
for one of these pages you know we're

3152
01:00:39,270 --> 01:00:39,280
for one of these pages you know we're
 

3153
01:00:39,280 --> 01:00:40,789
for one of these pages you know we're
just going to not set the valid bit so

3154
01:00:40,789 --> 01:00:40,799
just going to not set the valid bit so
 

3155
01:00:40,799 --> 01:00:44,150
just going to not set the valid bit so
the validated to zero

3156
01:00:44,150 --> 01:00:44,160

 

3157
01:00:44,160 --> 01:00:46,230

uh and of course you know when we're

3158
01:00:46,230 --> 01:00:46,240
uh and of course you know when we're
 

3159
01:00:46,240 --> 01:00:47,270
uh and of course you know when we're
going to get our first

3160
01:00:47,270 --> 01:00:47,280
going to get our first
 

3161
01:00:47,280 --> 01:00:50,549
going to get our first
page fault if we do this

3162
01:00:50,549 --> 01:00:50,559
page fault if we do this
 

3163
01:00:50,559 --> 01:00:52,950
page fault if we do this
in exec and let's say we modify xc6 to

3164
01:00:52,950 --> 01:00:52,960
in exec and let's say we modify xc6 to
 

3165
01:00:52,960 --> 01:00:54,309
in exec and let's say we modify xc6 to
do this

3166
01:00:54,309 --> 01:00:54,319
do this
 

3167
01:00:54,319 --> 01:00:59,910
do this
when will our first default happen

3168
01:00:59,910 --> 01:00:59,920

 

3169
01:00:59,920 --> 01:01:01,270

what's the first instruction that is

3170
01:01:01,270 --> 01:01:01,280
what's the first instruction that is
 

3171
01:01:01,280 --> 01:01:05,190
what's the first instruction that is
being run for user address

3172
01:01:05,190 --> 01:01:05,200

 

3173
01:01:05,200 --> 01:01:09,670

or user program

3174
01:01:09,670 --> 01:01:09,680

 

3175
01:01:09,680 --> 01:01:12,549

where does the user program start is it

3176
01:01:12,549 --> 01:01:12,559
where does the user program start is it
 

3177
01:01:12,559 --> 01:01:13,510
where does the user program start is it
loading the

3178
01:01:13,510 --> 01:01:13,520
loading the
 

3179
01:01:13,520 --> 01:01:16,710
loading the
initial code newbie a minute yeah yeah

3180
01:01:16,710 --> 01:01:16,720
initial code newbie a minute yeah yeah
 

3181
01:01:16,720 --> 01:01:18,630
initial code newbie a minute yeah yeah
okay we were just keeping that

3182
01:01:18,630 --> 01:01:18,640
okay we were just keeping that
 

3183
01:01:18,640 --> 01:01:20,150
okay we were just keeping that
piece correct that's the whole point of

3184
01:01:20,150 --> 01:01:20,160
piece correct that's the whole point of
 

3185
01:01:20,160 --> 01:01:22,390
piece correct that's the whole point of
like modifying exec and not called the

3186
01:01:22,390 --> 01:01:22,400
like modifying exec and not called the
 

3187
01:01:22,400 --> 01:01:23,030
like modifying exec and not called the
uvm

3188
01:01:23,030 --> 01:01:23,040
uvm
 

3189
01:01:23,040 --> 01:01:28,549
uvm
in it where

3190
01:01:28,549 --> 01:01:28,559

 

3191
01:01:28,559 --> 01:01:30,390

so most you know when we actually if you

3192
01:01:30,390 --> 01:01:30,400
so most you know when we actually if you
 

3193
01:01:30,400 --> 01:01:31,670
so most you know when we actually if you
remember from four regret or something

3194
01:01:31,670 --> 01:01:31,680
remember from four regret or something
 

3195
01:01:31,680 --> 01:01:33,270
remember from four regret or something
like that you know that place where an

3196
01:01:33,270 --> 01:01:33,280
like that you know that place where an
 

3197
01:01:33,280 --> 01:01:34,870
like that you know that place where an
application starts is exactly address

3198
01:01:34,870 --> 01:01:34,880
application starts is exactly address
 

3199
01:01:34,880 --> 01:01:35,829
application starts is exactly address
zero so

3200
01:01:35,829 --> 01:01:35,839
zero so
 

3201
01:01:35,839 --> 01:01:37,430
zero so
my picture is a little bit you know he's

3202
01:01:37,430 --> 01:01:37,440
my picture is a little bit you know he's
 

3203
01:01:37,440 --> 01:01:39,750
my picture is a little bit you know he's
leading here but so here's text here's

3204
01:01:39,750 --> 01:01:39,760
leading here but so here's text here's
 

3205
01:01:39,760 --> 01:01:40,549
leading here but so here's text here's
zero

3206
01:01:40,549 --> 01:01:40,559
zero
 

3207
01:01:40,559 --> 01:01:42,549
zero
it goes up to some number and basically

3208
01:01:42,549 --> 01:01:42,559
it goes up to some number and basically
 

3209
01:01:42,559 --> 01:01:44,710
it goes up to some number and basically
the first instruction whatever sits here

3210
01:01:44,710 --> 01:01:44,720
the first instruction whatever sits here
 

3211
01:01:44,720 --> 01:01:45,910
the first instruction whatever sits here
that's the first instruction that we're

3212
01:01:45,910 --> 01:01:45,920
that's the first instruction that we're
 

3213
01:01:45,920 --> 01:01:47,430
that's the first instruction that we're
going to actually that address that's

3214
01:01:47,430 --> 01:01:47,440
going to actually that address that's
 

3215
01:01:47,440 --> 01:01:48,710
going to actually that address that's
the first instruction we're going to get

3216
01:01:48,710 --> 01:01:48,720
the first instruction we're going to get
 

3217
01:01:48,720 --> 01:01:49,589
the first instruction we're going to get
a page folder

3218
01:01:49,589 --> 01:01:49,599
a page folder
 

3219
01:01:49,599 --> 01:02:02,789
a page folder
right because we have not loaded it

3220
01:02:02,789 --> 01:02:02,799

 

3221
01:02:02,799 --> 01:02:07,829

so what to do on the page fault

3222
01:02:07,829 --> 01:02:07,839
so what to do on the page fault
 

3223
01:02:07,839 --> 01:02:08,950
so what to do on the page fault
well what we're going to do in the page

3224
01:02:08,950 --> 01:02:08,960
well what we're going to do in the page
 

3225
01:02:08,960 --> 01:02:10,870
well what we're going to do in the page
fault is basically we'll note

3226
01:02:10,870 --> 01:02:10,880
fault is basically we'll note
 

3227
01:02:10,880 --> 01:02:13,670
fault is basically we'll note
ah this is uh what's one of these uh uh

3228
01:02:13,670 --> 01:02:13,680
ah this is uh what's one of these uh uh
 

3229
01:02:13,680 --> 01:02:15,270
ah this is uh what's one of these uh uh
on demand pages

3230
01:02:15,270 --> 01:02:15,280
on demand pages
 

3231
01:02:15,280 --> 01:02:18,309
on demand pages
uh we have to remember somewhere earlier

3232
01:02:18,309 --> 01:02:18,319
uh we have to remember somewhere earlier
 

3233
01:02:18,319 --> 01:02:19,990
uh we have to remember somewhere earlier
that you know this corresponds to

3234
01:02:19,990 --> 01:02:20,000
that you know this corresponds to
 

3235
01:02:20,000 --> 01:02:23,109
that you know this corresponds to
some uh that this corresponds to some

3236
01:02:23,109 --> 01:02:23,119
some uh that this corresponds to some
 

3237
01:02:23,119 --> 01:02:25,750
some uh that this corresponds to some
file

3238
01:02:25,750 --> 01:02:25,760

 

3239
01:02:25,760 --> 01:02:26,950

and basically what we're going to do in

3240
01:02:26,950 --> 01:02:26,960
and basically what we're going to do in
 

3241
01:02:26,960 --> 01:02:30,309
and basically what we're going to do in
the patrol handler is read

3242
01:02:30,309 --> 01:02:30,319
the patrol handler is read
 

3243
01:02:30,319 --> 01:02:34,309
the patrol handler is read
you know that block or page

3244
01:02:34,309 --> 01:02:34,319
you know that block or page
 

3245
01:02:34,319 --> 01:02:38,069
you know that block or page
from file

3246
01:02:38,069 --> 01:02:38,079

 

3247
01:02:38,079 --> 01:02:41,910

into memory

3248
01:02:41,910 --> 01:02:41,920

 

3249
01:02:41,920 --> 01:02:45,670

map that memory

3250
01:02:45,670 --> 01:02:45,680

 

3251
01:02:45,680 --> 01:02:49,430

into the page table

3252
01:02:49,430 --> 01:02:49,440
into the page table
 

3253
01:02:49,440 --> 01:02:56,710
into the page table
and restart the instruction

3254
01:02:56,710 --> 01:02:56,720

 

3255
01:02:56,720 --> 01:02:59,349

and then we're off and running right and

3256
01:02:59,349 --> 01:02:59,359
and then we're off and running right and
 

3257
01:02:59,359 --> 01:03:00,870
and then we're off and running right and
so we're going to get

3258
01:03:00,870 --> 01:03:00,880
so we're going to get
 

3259
01:03:00,880 --> 01:03:02,870
so we're going to get
in the worst case if the user program

3260
01:03:02,870 --> 01:03:02,880
in the worst case if the user program
 

3261
01:03:02,880 --> 01:03:04,230
in the worst case if the user program
uses all of its text

3262
01:03:04,230 --> 01:03:04,240
uses all of its text
 

3263
01:03:04,240 --> 01:03:05,910
uses all of its text
uses all of this data then we're going

3264
01:03:05,910 --> 01:03:05,920
uses all of this data then we're going
 

3265
01:03:05,920 --> 01:03:07,829
uses all of this data then we're going
to get a page fault for every page you

3266
01:03:07,829 --> 01:03:07,839
to get a page fault for every page you
 

3267
01:03:07,839 --> 01:03:08,390
to get a page fault for every page you
know in

3268
01:03:08,390 --> 01:03:08,400
know in
 

3269
01:03:08,400 --> 01:03:12,950
know in
uh in the program

3270
01:03:12,950 --> 01:03:12,960
uh in the program
 

3271
01:03:12,960 --> 01:03:14,390
uh in the program
but you know we get lucky and the

3272
01:03:14,390 --> 01:03:14,400
but you know we get lucky and the
 

3273
01:03:14,400 --> 01:03:15,990
but you know we get lucky and the
program know doesn't use all of its

3274
01:03:15,990 --> 01:03:16,000
program know doesn't use all of its
 

3275
01:03:16,000 --> 01:03:17,510
program know doesn't use all of its
data segment or doesn't use all of this

3276
01:03:17,510 --> 01:03:17,520
data segment or doesn't use all of this
 

3277
01:03:17,520 --> 01:03:19,910
data segment or doesn't use all of this
text segment then you know we might save

3278
01:03:19,910 --> 01:03:19,920
text segment then you know we might save
 

3279
01:03:19,920 --> 01:03:22,069
text segment then you know we might save
some memory and uh we certainly make

3280
01:03:22,069 --> 01:03:22,079
some memory and uh we certainly make
 

3281
01:03:22,079 --> 01:03:24,230
some memory and uh we certainly make
exact you know perform you know

3282
01:03:24,230 --> 01:03:24,240
exact you know perform you know
 

3283
01:03:24,240 --> 01:03:25,990
exact you know perform you know
much quicker and so be a little bit more

3284
01:03:25,990 --> 01:03:26,000
much quicker and so be a little bit more
 

3285
01:03:26,000 --> 01:03:27,349
much quicker and so be a little bit more
interactive and as soon as the program

3286
01:03:27,349 --> 01:03:27,359
interactive and as soon as the program
 

3287
01:03:27,359 --> 01:03:28,789
interactive and as soon as the program
starts boom it's running

3288
01:03:28,789 --> 01:03:28,799
starts boom it's running
 

3289
01:03:28,799 --> 01:03:30,789
starts boom it's running
my we hardly have to do any work in

3290
01:03:30,789 --> 01:03:30,799
my we hardly have to do any work in
 

3291
01:03:30,799 --> 01:03:33,430
my we hardly have to do any work in
exactly

3292
01:03:33,430 --> 01:03:33,440

 

3293
01:03:33,440 --> 01:03:34,950

does that make this optimization make

3294
01:03:34,950 --> 01:03:34,960
does that make this optimization make
 

3295
01:03:34,960 --> 01:03:42,069
does that make this optimization make
sense

3296
01:03:42,069 --> 01:03:42,079

 

3297
01:03:42,079 --> 01:03:44,630

okay so then there's a sort of a slight

3298
01:03:44,630 --> 01:03:44,640
okay so then there's a sort of a slight
 

3299
01:03:44,640 --> 01:03:51,270
okay so then there's a sort of a slight
extension to demand paging

3300
01:03:51,270 --> 01:03:51,280

 

3301
01:03:51,280 --> 01:03:52,789

so this is the second part of the net

3302
01:03:52,789 --> 01:03:52,799
so this is the second part of the net
 

3303
01:03:52,799 --> 01:03:56,470
so this is the second part of the net
paging

3304
01:03:56,470 --> 01:03:56,480

 

3305
01:03:56,480 --> 01:04:01,610

yeah sorry right there more

3306
01:04:01,610 --> 01:04:01,620
yeah sorry right there more
 

3307
01:04:01,620 --> 01:04:04,630
yeah sorry right there more
[Music]

3308
01:04:04,630 --> 01:04:04,640
[Music]
 

3309
01:04:04,640 --> 01:04:07,510
[Music]
so part two demand paging this principle

3310
01:04:07,510 --> 01:04:07,520
so part two demand paging this principle
 

3311
01:04:07,520 --> 01:04:09,190
so part two demand paging this principle
there's a little bit of a problem here

3312
01:04:09,190 --> 01:04:09,200
there's a little bit of a problem here
 

3313
01:04:09,200 --> 01:04:11,190
there's a little bit of a problem here
that we haven't really discussed it

3314
01:04:11,190 --> 01:04:11,200
that we haven't really discussed it
 

3315
01:04:11,200 --> 01:04:12,789
that we haven't really discussed it
might be the case you know maybe the

3316
01:04:12,789 --> 01:04:12,799
might be the case you know maybe the
 

3317
01:04:12,799 --> 01:04:14,549
might be the case you know maybe the
file that we're actually reading or the

3318
01:04:14,549 --> 01:04:14,559
file that we're actually reading or the
 

3319
01:04:14,559 --> 01:04:15,990
file that we're actually reading or the
text and data segment are even bigger

3320
01:04:15,990 --> 01:04:16,000
text and data segment are even bigger
 

3321
01:04:16,000 --> 01:04:17,670
text and data segment are even bigger
than what actually is in physical memory

3322
01:04:17,670 --> 01:04:17,680
than what actually is in physical memory
 

3323
01:04:17,680 --> 01:04:18,230
than what actually is in physical memory
or

3324
01:04:18,230 --> 01:04:18,240
or
 

3325
01:04:18,240 --> 01:04:20,789
or
if multiple applications uh started with

3326
01:04:20,789 --> 01:04:20,799
if multiple applications uh started with
 

3327
01:04:20,799 --> 01:04:21,750
if multiple applications uh started with
demand paging

3328
01:04:21,750 --> 01:04:21,760
demand paging
 

3329
01:04:21,760 --> 01:04:25,029
demand paging
maybe their sum of their binaries

3330
01:04:25,029 --> 01:04:25,039
maybe their sum of their binaries
 

3331
01:04:25,039 --> 01:04:26,549
maybe their sum of their binaries
is basically bigger than actually it's a

3332
01:04:26,549 --> 01:04:26,559
is basically bigger than actually it's a
 

3333
01:04:26,559 --> 01:04:28,630
is basically bigger than actually it's a
physical memory

3334
01:04:28,630 --> 01:04:28,640
physical memory
 

3335
01:04:28,640 --> 01:04:31,109
physical memory
and so uh the typical thing you know

3336
01:04:31,109 --> 01:04:31,119
and so uh the typical thing you know
 

3337
01:04:31,119 --> 01:04:32,150
and so uh the typical thing you know
what

3338
01:04:32,150 --> 01:04:32,160
what
 

3339
01:04:32,160 --> 01:04:34,789
what
if you go down this demand paging uh

3340
01:04:34,789 --> 01:04:34,799
if you go down this demand paging uh
 

3341
01:04:34,799 --> 01:04:35,270
if you go down this demand paging uh
round

3342
01:04:35,270 --> 01:04:35,280
round
 

3343
01:04:35,280 --> 01:04:38,870
round
is to actually if you run out of memory

3344
01:04:38,870 --> 01:04:38,880
is to actually if you run out of memory
 

3345
01:04:38,880 --> 01:04:41,750
is to actually if you run out of memory
so if caliber returns zero if out of

3346
01:04:41,750 --> 01:04:41,760
so if caliber returns zero if out of
 

3347
01:04:41,760 --> 01:04:45,349
so if caliber returns zero if out of
memory

3348
01:04:45,349 --> 01:04:45,359

 

3349
01:04:45,359 --> 01:04:48,150

so for example you know your demand page

3350
01:04:48,150 --> 01:04:48,160
so for example you know your demand page
 

3351
01:04:48,160 --> 01:04:50,069
so for example you know your demand page
you get a page fault at some

3352
01:04:50,069 --> 01:04:50,079
you get a page fault at some
 

3353
01:04:50,079 --> 01:04:53,829
you get a page fault at some
uh page that needs to be uh paged in

3354
01:04:53,829 --> 01:04:53,839
uh page that needs to be uh paged in
 

3355
01:04:53,839 --> 01:04:56,789
uh page that needs to be uh paged in
from the file system but you don't have

3356
01:04:56,789 --> 01:04:56,799
from the file system but you don't have
 

3357
01:04:56,799 --> 01:04:58,230
from the file system but you don't have
any more free pages

3358
01:04:58,230 --> 01:04:58,240
any more free pages
 

3359
01:04:58,240 --> 01:05:00,309
any more free pages
you need to do something and so the

3360
01:05:00,309 --> 01:05:00,319
you need to do something and so the
 

3361
01:05:00,319 --> 01:05:01,589
you need to do something and so the
typical and this comes back

3362
01:05:01,589 --> 01:05:01,599
typical and this comes back
 

3363
01:05:01,599 --> 01:05:03,109
typical and this comes back
to an earlier question example the same

3364
01:05:03,109 --> 01:05:03,119
to an earlier question example the same
 

3365
01:05:03,119 --> 01:05:05,430
to an earlier question example the same
is true for lazy or

3366
01:05:05,430 --> 01:05:05,440
is true for lazy or
 

3367
01:05:05,440 --> 01:05:06,630
is true for lazy or
you know what to do if you run out of

3368
01:05:06,630 --> 01:05:06,640
you know what to do if you run out of
 

3369
01:05:06,640 --> 01:05:08,789
you know what to do if you run out of
memory so if you run out of memory

3370
01:05:08,789 --> 01:05:08,799
memory so if you run out of memory
 

3371
01:05:08,799 --> 01:05:11,510
memory so if you run out of memory
one option that you really clearly have

3372
01:05:11,510 --> 01:05:11,520
one option that you really clearly have
 

3373
01:05:11,520 --> 01:05:13,109
one option that you really clearly have
is to

3374
01:05:13,109 --> 01:05:13,119
is to
 

3375
01:05:13,119 --> 01:05:19,109
is to
evict a pitch

3376
01:05:19,109 --> 01:05:19,119

 

3377
01:05:19,119 --> 01:05:20,789

you can example instead of you know you

3378
01:05:20,789 --> 01:05:20,799
you can example instead of you know you
 

3379
01:05:20,799 --> 01:05:22,309
you can example instead of you know you
can for example invicta page and write

3380
01:05:22,309 --> 01:05:22,319
can for example invicta page and write
 

3381
01:05:22,319 --> 01:05:22,950
can for example invicta page and write
it you know

3382
01:05:22,950 --> 01:05:22,960
it you know
 

3383
01:05:22,960 --> 01:05:26,150
it you know
to the file back so for example if it's

3384
01:05:26,150 --> 01:05:26,160
to the file back so for example if it's
 

3385
01:05:26,160 --> 01:05:27,029
to the file back so for example if it's
a

3386
01:05:27,029 --> 01:05:27,039
a
 

3387
01:05:27,039 --> 01:05:28,950
a
data page that got modified you know you

3388
01:05:28,950 --> 01:05:28,960
data page that got modified you know you
 

3389
01:05:28,960 --> 01:05:30,789
data page that got modified you know you
can write it back you know to the file

3390
01:05:30,789 --> 01:05:30,799
can write it back you know to the file
 

3391
01:05:30,799 --> 01:05:32,150
can write it back you know to the file
system

3392
01:05:32,150 --> 01:05:32,160
system
 

3393
01:05:32,160 --> 01:05:34,870
system
um and then once you've hit the page

3394
01:05:34,870 --> 01:05:34,880
um and then once you've hit the page
 

3395
01:05:34,880 --> 01:05:36,630
um and then once you've hit the page
then you have a new free page

3396
01:05:36,630 --> 01:05:36,640
then you have a new free page
 

3397
01:05:36,640 --> 01:05:39,670
then you have a new free page
and you can put the uh use that you know

3398
01:05:39,670 --> 01:05:39,680
and you can put the uh use that you know
 

3399
01:05:39,680 --> 01:05:46,870
and you can put the uh use that you know
use the new the just free page

3400
01:05:46,870 --> 01:05:46,880

 

3401
01:05:46,880 --> 01:05:49,829

to satisfy you know the fault that you

3402
01:05:49,829 --> 01:05:49,839
to satisfy you know the fault that you
 

3403
01:05:49,839 --> 01:05:50,549
to satisfy you know the fault that you
had

3404
01:05:50,549 --> 01:05:50,559
had
 

3405
01:05:50,559 --> 01:05:51,750
had
and then basically restart the

3406
01:05:51,750 --> 01:05:51,760
and then basically restart the
 

3407
01:05:51,760 --> 01:05:58,710
and then basically restart the
instruction again

3408
01:05:58,710 --> 01:05:58,720

 

3409
01:05:58,720 --> 01:05:59,990

again restart the instruction is a

3410
01:05:59,990 --> 01:06:00,000
again restart the instruction is a
 

3411
01:06:00,000 --> 01:06:01,349
again restart the instruction is a
little bit more complicated because the

3412
01:06:01,349 --> 01:06:01,359
little bit more complicated because the
 

3413
01:06:01,359 --> 01:06:02,309
little bit more complicated because the
whole

3414
01:06:02,309 --> 01:06:02,319
whole
 

3415
01:06:02,319 --> 01:06:05,510
whole
machinery to basically do useret and

3416
01:06:05,510 --> 01:06:05,520
machinery to basically do useret and
 

3417
01:06:05,520 --> 01:06:08,470
machinery to basically do useret and
uh start it and transfer back to user

3418
01:06:08,470 --> 01:06:08,480
uh start it and transfer back to user
 

3419
01:06:08,480 --> 01:06:11,029
uh start it and transfer back to user
space etc

3420
01:06:11,029 --> 01:06:11,039
space etc
 

3421
01:06:11,039 --> 01:06:12,630
space etc
uh and so this is a you know typical

3422
01:06:12,630 --> 01:06:12,640
uh and so this is a you know typical
 

3423
01:06:12,640 --> 01:06:14,789
uh and so this is a you know typical
operating system we'll do this um

3424
01:06:14,789 --> 01:06:14,799
operating system we'll do this um
 

3425
01:06:14,799 --> 01:06:16,549
operating system we'll do this um
and of course the key question is like

3426
01:06:16,549 --> 01:06:16,559
and of course the key question is like
 

3427
01:06:16,559 --> 01:06:19,990
and of course the key question is like
what page to evict

3428
01:06:19,990 --> 01:06:20,000

 

3429
01:06:20,000 --> 01:06:23,109

which one to choose so what are what are

3430
01:06:23,109 --> 01:06:23,119
which one to choose so what are what are
 

3431
01:06:23,119 --> 01:06:25,829
which one to choose so what are what are
some candidates you know what

3432
01:06:25,829 --> 01:06:25,839
some candidates you know what
 

3433
01:06:25,839 --> 01:06:27,589
some candidates you know what
what would be your reasonable policy for

3434
01:06:27,589 --> 01:06:27,599
what would be your reasonable policy for
 

3435
01:06:27,599 --> 01:06:30,309
what would be your reasonable policy for
choosing a page to evict

3436
01:06:30,309 --> 01:06:30,319
choosing a page to evict
 

3437
01:06:30,319 --> 01:06:33,589
choosing a page to evict
least recently used yeah so this is the

3438
01:06:33,589 --> 01:06:33,599
least recently used yeah so this is the
 

3439
01:06:33,599 --> 01:06:36,549
least recently used yeah so this is the
most commonly used strategy least

3440
01:06:36,549 --> 01:06:36,559
most commonly used strategy least
 

3441
01:06:36,559 --> 01:06:43,910
most commonly used strategy least
recently used

3442
01:06:43,910 --> 01:06:43,920

 

3443
01:06:43,920 --> 01:06:47,829

or lru

3444
01:06:47,829 --> 01:06:47,839
or lru
 

3445
01:06:47,839 --> 01:06:51,190
or lru
and that is the page that uh that's

3446
01:06:51,190 --> 01:06:51,200
and that is the page that uh that's
 

3447
01:06:51,200 --> 01:06:52,230
and that is the page that uh that's
typically yours

3448
01:06:52,230 --> 01:06:52,240
typically yours
 

3449
01:06:52,240 --> 01:06:54,630
typically yours
is thrown out there's a couple sort of

3450
01:06:54,630 --> 01:06:54,640
is thrown out there's a couple sort of
 

3451
01:06:54,640 --> 01:06:56,549
is thrown out there's a couple sort of
twists that typically are

3452
01:06:56,549 --> 01:06:56,559
twists that typically are
 

3453
01:06:56,559 --> 01:06:59,349
twists that typically are
small optimizations that do if you have

3454
01:06:59,349 --> 01:06:59,359
small optimizations that do if you have
 

3455
01:06:59,359 --> 01:07:01,430
small optimizations that do if you have
to evict the page and

3456
01:07:01,430 --> 01:07:01,440
to evict the page and
 

3457
01:07:01,440 --> 01:07:03,430
to evict the page and
um you have a choice between a dirty

3458
01:07:03,430 --> 01:07:03,440
um you have a choice between a dirty
 

3459
01:07:03,440 --> 01:07:05,349
um you have a choice between a dirty
page and a non-dirty page so dirty page

3460
01:07:05,349 --> 01:07:05,359
page and a non-dirty page so dirty page
 

3461
01:07:05,359 --> 01:07:07,349
page and a non-dirty page so dirty page
is a page where there was a store to

3462
01:07:07,349 --> 01:07:07,359
is a page where there was a store to
 

3463
01:07:07,359 --> 01:07:09,109
is a page where there was a store to
and the non-dirty page is a store page

3464
01:07:09,109 --> 01:07:09,119
and the non-dirty page is a store page
 

3465
01:07:09,119 --> 01:07:10,630
and the non-dirty page is a store page
that basically only has been read but

3466
01:07:10,630 --> 01:07:10,640
that basically only has been read but
 

3467
01:07:10,640 --> 01:07:11,670
that basically only has been read but
not written to

3468
01:07:11,670 --> 01:07:11,680
not written to
 

3469
01:07:11,680 --> 01:07:16,630
not written to
which one would you prefer to vic first

3470
01:07:16,630 --> 01:07:16,640

 

3471
01:07:16,640 --> 01:07:18,789

a three one because you would have to

3472
01:07:18,789 --> 01:07:18,799
a three one because you would have to
 

3473
01:07:18,799 --> 01:07:22,150
a three one because you would have to
write the dirty one at some point anyway

3474
01:07:22,150 --> 01:07:22,160
write the dirty one at some point anyway
 

3475
01:07:22,160 --> 01:07:24,870
write the dirty one at some point anyway
yeah uh so so we're gonna say again

3476
01:07:24,870 --> 01:07:24,880
yeah uh so so we're gonna say again
 

3477
01:07:24,880 --> 01:07:25,670
yeah uh so so we're gonna say again
actually

3478
01:07:25,670 --> 01:07:25,680
actually
 

3479
01:07:25,680 --> 01:07:28,390
actually
double check there um i said dirty

3480
01:07:28,390 --> 01:07:28,400
double check there um i said dirty
 

3481
01:07:28,400 --> 01:07:29,109
double check there um i said dirty
because

3482
01:07:29,109 --> 01:07:29,119
because
 

3483
01:07:29,119 --> 01:07:30,950
because
30 pages would need to be written to

3484
01:07:30,950 --> 01:07:30,960
30 pages would need to be written to
 

3485
01:07:30,960 --> 01:07:33,190
30 pages would need to be written to
memory at some point

3486
01:07:33,190 --> 01:07:33,200
memory at some point
 

3487
01:07:33,200 --> 01:07:36,630
memory at some point
yeah that's true uh but then maybe now

3488
01:07:36,630 --> 01:07:36,640
yeah that's true uh but then maybe now
 

3489
01:07:36,640 --> 01:07:37,670
yeah that's true uh but then maybe now
you have to write it twice

3490
01:07:37,670 --> 01:07:37,680
you have to write it twice
 

3491
01:07:37,680 --> 01:07:39,109
you have to write it twice
you know once you write it maybe it's

3492
01:07:39,109 --> 01:07:39,119
you know once you write it maybe it's
 

3493
01:07:39,119 --> 01:07:41,349
you know once you write it maybe it's
modified later again

3494
01:07:41,349 --> 01:07:41,359
modified later again
 

3495
01:07:41,359 --> 01:07:42,710
modified later again
and so actually typically when an

3496
01:07:42,710 --> 01:07:42,720
and so actually typically when an
 

3497
01:07:42,720 --> 01:07:44,710
and so actually typically when an
operator oh i see okay the dropping

3498
01:07:44,710 --> 01:07:44,720
operator oh i see okay the dropping
 

3499
01:07:44,720 --> 01:07:46,789
operator oh i see okay the dropping
system is exactly the opposite

3500
01:07:46,789 --> 01:07:46,799
system is exactly the opposite
 

3501
01:07:46,799 --> 01:07:48,549
system is exactly the opposite
uh they choose a page that actually has

3502
01:07:48,549 --> 01:07:48,559
uh they choose a page that actually has
 

3503
01:07:48,559 --> 01:07:50,390
uh they choose a page that actually has
not been written or is not dirty because

3504
01:07:50,390 --> 01:07:50,400
not been written or is not dirty because
 

3505
01:07:50,400 --> 01:07:51,670
not been written or is not dirty because
you don't have to do anything

3506
01:07:51,670 --> 01:07:51,680
you don't have to do anything
 

3507
01:07:51,680 --> 01:07:54,390
you don't have to do anything
you can just reuse it you can just take

3508
01:07:54,390 --> 01:07:54,400
you can just reuse it you can just take
 

3509
01:07:54,400 --> 01:07:55,510
you can just reuse it you can just take
uh

3510
01:07:55,510 --> 01:07:55,520
uh
 

3511
01:07:55,520 --> 01:07:57,430
uh
if it was present in pt in page table

3512
01:07:57,430 --> 01:07:57,440
if it was present in pt in page table
 

3513
01:07:57,440 --> 01:07:59,750
if it was present in pt in page table
one your market there is non-valid

3514
01:07:59,750 --> 01:07:59,760
one your market there is non-valid
 

3515
01:07:59,760 --> 01:08:02,549
one your market there is non-valid
and then uh you're done and then you can

3516
01:08:02,549 --> 01:08:02,559
and then uh you're done and then you can
 

3517
01:08:02,559 --> 01:08:05,190
and then uh you're done and then you can
reuse that page in another page table

3518
01:08:05,190 --> 01:08:05,200
reuse that page in another page table
 

3519
01:08:05,200 --> 01:08:07,510
reuse that page in another page table
and so the preference and typically take

3520
01:08:07,510 --> 01:08:07,520
and so the preference and typically take
 

3521
01:08:07,520 --> 01:08:08,710
and so the preference and typically take
pages that have been

3522
01:08:08,710 --> 01:08:08,720
pages that have been
 

3523
01:08:08,720 --> 01:08:13,589
pages that have been
uh not you know non-dirty ones first

3524
01:08:13,589 --> 01:08:13,599

 

3525
01:08:13,599 --> 01:08:15,190

can i just ask for a clarification on

3526
01:08:15,190 --> 01:08:15,200
can i just ask for a clarification on
 

3527
01:08:15,200 --> 01:08:17,189
can i just ask for a clarification on
the 30

3528
01:08:17,189 --> 01:08:17,199
the 30
 

3529
01:08:17,199 --> 01:08:20,309
the 30
pages so

3530
01:08:20,309 --> 01:08:20,319
pages so
 

3531
01:08:20,319 --> 01:08:23,590
pages so
um i i know like in a cache

3532
01:08:23,590 --> 01:08:23,600
um i i know like in a cache
 

3533
01:08:23,600 --> 01:08:25,510
um i i know like in a cache
when we have memory and then we say okay

3534
01:08:25,510 --> 01:08:25,520
when we have memory and then we say okay
 

3535
01:08:25,520 --> 01:08:27,349
when we have memory and then we say okay
a line is dirty because it hasn't been

3536
01:08:27,349 --> 01:08:27,359
a line is dirty because it hasn't been
 

3537
01:08:27,359 --> 01:08:28,550
a line is dirty because it hasn't been
written to memory

3538
01:08:28,550 --> 01:08:28,560
written to memory
 

3539
01:08:28,560 --> 01:08:30,390
written to memory
but what about a page in memory like

3540
01:08:30,390 --> 01:08:30,400
but what about a page in memory like
 

3541
01:08:30,400 --> 01:08:32,229
but what about a page in memory like
what does it correspond to like how is

3542
01:08:32,229 --> 01:08:32,239
what does it correspond to like how is
 

3543
01:08:32,239 --> 01:08:33,510
what does it correspond to like how is
it dirty where does it have to be

3544
01:08:33,510 --> 01:08:33,520
it dirty where does it have to be
 

3545
01:08:33,520 --> 01:08:34,709
it dirty where does it have to be
written back to

3546
01:08:34,709 --> 01:08:34,719
written back to
 

3547
01:08:34,719 --> 01:08:36,309
written back to
it just exists in memory right isn't

3548
01:08:36,309 --> 01:08:36,319
it just exists in memory right isn't
 

3549
01:08:36,319 --> 01:08:38,149
it just exists in memory right isn't
that the whole whole thing like it

3550
01:08:38,149 --> 01:08:38,159
that the whole whole thing like it
 

3551
01:08:38,159 --> 01:08:40,070
that the whole whole thing like it
doesn't exist anywhere else really

3552
01:08:40,070 --> 01:08:40,080
doesn't exist anywhere else really
 

3553
01:08:40,080 --> 01:08:42,390
doesn't exist anywhere else really
so when can it be dirty yeah okay so for

3554
01:08:42,390 --> 01:08:42,400
so when can it be dirty yeah okay so for
 

3555
01:08:42,400 --> 01:08:43,910
so when can it be dirty yeah okay so for
example if it's the demand page file

3556
01:08:43,910 --> 01:08:43,920
example if it's the demand page file
 

3557
01:08:43,920 --> 01:08:45,189
example if it's the demand page file
page

3558
01:08:45,189 --> 01:08:45,199
page
 

3559
01:08:45,199 --> 01:08:46,550
page
uh actually we'll talk about this in a

3560
01:08:46,550 --> 01:08:46,560
uh actually we'll talk about this in a
 

3561
01:08:46,560 --> 01:08:49,349
uh actually we'll talk about this in a
second like in the next uh

3562
01:08:49,349 --> 01:08:49,359
second like in the next uh
 

3563
01:08:49,359 --> 01:08:50,950
second like in the next uh
maybe a prefetch a little bit too much

3564
01:08:50,950 --> 01:08:50,960
maybe a prefetch a little bit too much
 

3565
01:08:50,960 --> 01:08:53,749
maybe a prefetch a little bit too much
but if you uh with memory map files

3566
01:08:53,749 --> 01:08:53,759
but if you uh with memory map files
 

3567
01:08:53,759 --> 01:08:56,870
but if you uh with memory map files
where you map a file into uh

3568
01:08:56,870 --> 01:08:56,880
where you map a file into uh
 

3569
01:08:56,880 --> 01:08:59,510
where you map a file into uh
memory uh and then the restore to it

3570
01:08:59,510 --> 01:08:59,520
memory uh and then the restore to it
 

3571
01:08:59,520 --> 01:09:01,189
memory uh and then the restore to it
then you would dirty that page

3572
01:09:01,189 --> 01:09:01,199
then you would dirty that page
 

3573
01:09:01,199 --> 01:09:03,349
then you would dirty that page
okay so that only applies when like a

3574
01:09:03,349 --> 01:09:03,359
okay so that only applies when like a
 

3575
01:09:03,359 --> 01:09:05,590
okay so that only applies when like a
page actually responds not just to some

3576
01:09:05,590 --> 01:09:05,600
page actually responds not just to some
 

3577
01:09:05,600 --> 01:09:07,590
page actually responds not just to some
memory but also to a file or something

3578
01:09:07,590 --> 01:09:07,600
memory but also to a file or something
 

3579
01:09:07,600 --> 01:09:07,990
memory but also to a file or something
else

3580
01:09:07,990 --> 01:09:08,000
else
 

3581
01:09:08,000 --> 01:09:12,950
else
exactly okay okay that makes sense yeah

3582
01:09:12,950 --> 01:09:12,960

 

3583
01:09:12,960 --> 01:09:15,349

okay so just to uh you know just to make

3584
01:09:15,349 --> 01:09:15,359
okay so just to uh you know just to make
 

3585
01:09:15,359 --> 01:09:17,349
okay so just to uh you know just to make
one more two more points

3586
01:09:17,349 --> 01:09:17,359
one more two more points
 

3587
01:09:17,359 --> 01:09:20,870
one more two more points
related to this uh if you look at this

3588
01:09:20,870 --> 01:09:20,880
related to this uh if you look at this
 

3589
01:09:20,880 --> 01:09:24,470
related to this uh if you look at this
uh the ptes again so we saw this irish w

3590
01:09:24,470 --> 01:09:24,480
uh the ptes again so we saw this irish w
 

3591
01:09:24,480 --> 01:09:25,110
uh the ptes again so we saw this irish w
bit

3592
01:09:25,110 --> 01:09:25,120
bit
 

3593
01:09:25,120 --> 01:09:26,870
bit
uh and you'll notice there actually is a

3594
01:09:26,870 --> 01:09:26,880
uh and you'll notice there actually is a
 

3595
01:09:26,880 --> 01:09:29,269
uh and you'll notice there actually is a
bit seven that is the dirty bit

3596
01:09:29,269 --> 01:09:29,279
bit seven that is the dirty bit
 

3597
01:09:29,279 --> 01:09:31,269
bit seven that is the dirty bit
so when the paging hardware when the

3598
01:09:31,269 --> 01:09:31,279
so when the paging hardware when the
 

3599
01:09:31,279 --> 01:09:33,269
so when the paging hardware when the
hardware ever writes you know to a page

3600
01:09:33,269 --> 01:09:33,279
hardware ever writes you know to a page
 

3601
01:09:33,279 --> 01:09:35,030
hardware ever writes you know to a page
and watches at the dirty bits so the

3602
01:09:35,030 --> 01:09:35,040
and watches at the dirty bits so the
 

3603
01:09:35,040 --> 01:09:36,550
and watches at the dirty bits so the
operating system later can see you ah

3604
01:09:36,550 --> 01:09:36,560
operating system later can see you ah
 

3605
01:09:36,560 --> 01:09:37,590
operating system later can see you ah
this actually page

3606
01:09:37,590 --> 01:09:37,600
this actually page
 

3607
01:09:37,600 --> 01:09:39,349
this actually page
can easily see this page that's actually

3608
01:09:39,349 --> 01:09:39,359
can easily see this page that's actually
 

3609
01:09:39,359 --> 01:09:41,269
can easily see this page that's actually
written to

3610
01:09:41,269 --> 01:09:41,279
written to
 

3611
01:09:41,279 --> 01:09:46,149
written to
and similarly there is a uh an a bit

3612
01:09:46,149 --> 01:09:46,159
and similarly there is a uh an a bit
 

3613
01:09:46,159 --> 01:09:48,950
and similarly there is a uh an a bit
uh that stands for access and so

3614
01:09:48,950 --> 01:09:48,960
uh that stands for access and so
 

3615
01:09:48,960 --> 01:09:50,550
uh that stands for access and so
whenever a page is either written

3616
01:09:50,550 --> 01:09:50,560
whenever a page is either written
 

3617
01:09:50,560 --> 01:09:53,349
whenever a page is either written
or written either read or written the

3618
01:09:53,349 --> 01:09:53,359
or written either read or written the
 

3619
01:09:53,359 --> 01:09:55,030
or written either read or written the
access bit will be set

3620
01:09:55,030 --> 01:09:55,040
access bit will be set
 

3621
01:09:55,040 --> 01:10:07,350
access bit will be set
and uh and why is that useful to know

3622
01:10:07,350 --> 01:10:07,360

 

3623
01:10:07,360 --> 01:10:09,669

in what way could that help the colonel

3624
01:10:09,669 --> 01:10:09,679
in what way could that help the colonel
 

3625
01:10:09,679 --> 01:10:12,229
in what way could that help the colonel
well the ones that haven't been

3626
01:10:12,229 --> 01:10:12,239
well the ones that haven't been
 

3627
01:10:12,239 --> 01:10:15,590
well the ones that haven't been
accessed you can you can evict right

3628
01:10:15,590 --> 01:10:15,600
accessed you can you can evict right
 

3629
01:10:15,600 --> 01:10:17,590
accessed you can you can evict right
yeah like another way of saying that if

3630
01:10:17,590 --> 01:10:17,600
yeah like another way of saying that if
 

3631
01:10:17,600 --> 01:10:18,950
yeah like another way of saying that if
you want to implement these recently

3632
01:10:18,950 --> 01:10:18,960
you want to implement these recently
 

3633
01:10:18,960 --> 01:10:20,310
you want to implement these recently
used

3634
01:10:20,310 --> 01:10:20,320
used
 

3635
01:10:20,320 --> 01:10:23,910
used
uh if uh you find a page that basically

3636
01:10:23,910 --> 01:10:23,920
uh if uh you find a page that basically
 

3637
01:10:23,920 --> 01:10:25,270
uh if uh you find a page that basically
hasn't been accessed in some period of

3638
01:10:25,270 --> 01:10:25,280
hasn't been accessed in some period of
 

3639
01:10:25,280 --> 01:10:26,550
hasn't been accessed in some period of
time you know it actually hasn't been

3640
01:10:26,550 --> 01:10:26,560
time you know it actually hasn't been
 

3641
01:10:26,560 --> 01:10:28,149
time you know it actually hasn't been
recently used so it actually is a

3642
01:10:28,149 --> 01:10:28,159
recently used so it actually is a
 

3643
01:10:28,159 --> 01:10:29,510
recently used so it actually is a
candidate for eviction

3644
01:10:29,510 --> 01:10:29,520
candidate for eviction
 

3645
01:10:29,520 --> 01:10:31,430
candidate for eviction
while the pages that have the access bit

3646
01:10:31,430 --> 01:10:31,440
while the pages that have the access bit
 

3647
01:10:31,440 --> 01:10:32,950
while the pages that have the access bit
set are not really candidates for

3648
01:10:32,950 --> 01:10:32,960
set are not really candidates for
 

3649
01:10:32,960 --> 01:10:34,709
set are not really candidates for
eviction

3650
01:10:34,709 --> 01:10:34,719
eviction
 

3651
01:10:34,719 --> 01:10:37,350
eviction
and so the abit is typically used or the

3652
01:10:37,350 --> 01:10:37,360
and so the abit is typically used or the
 

3653
01:10:37,360 --> 01:10:39,030
and so the abit is typically used or the
actual bit is typically used

3654
01:10:39,030 --> 01:10:39,040
actual bit is typically used
 

3655
01:10:39,040 --> 01:10:44,550
actual bit is typically used
to actually implement this lru strategy

3656
01:10:44,550 --> 01:10:44,560
to actually implement this lru strategy
 

3657
01:10:44,560 --> 01:10:48,550
to actually implement this lru strategy
okay but would you have to reset um

3658
01:10:48,550 --> 01:10:48,560
okay but would you have to reset um
 

3659
01:10:48,560 --> 01:10:52,310
okay but would you have to reset um
the accessed bits to not accessed every

3660
01:10:52,310 --> 01:10:52,320
the accessed bits to not accessed every
 

3661
01:10:52,320 --> 01:10:53,510
the accessed bits to not accessed every
once in a while or

3662
01:10:53,510 --> 01:10:53,520
once in a while or
 

3663
01:10:53,520 --> 01:10:55,189
once in a while or
yeah exactly that's exactly what the

3664
01:10:55,189 --> 01:10:55,199
yeah exactly that's exactly what the
 

3665
01:10:55,199 --> 01:10:57,430
yeah exactly that's exactly what the
typical operating system will do

3666
01:10:57,430 --> 01:10:57,440
typical operating system will do
 

3667
01:10:57,440 --> 01:10:58,950
typical operating system will do
and if they don't do it maybe for all

3668
01:10:58,950 --> 01:10:58,960
and if they don't do it maybe for all
 

3669
01:10:58,960 --> 01:11:00,709
and if they don't do it maybe for all
memory they sweep through memory

3670
01:11:00,709 --> 01:11:00,719
memory they sweep through memory
 

3671
01:11:00,719 --> 01:11:02,470
memory they sweep through memory
that's a little you know there's some

3672
01:11:02,470 --> 01:11:02,480
that's a little you know there's some
 

3673
01:11:02,480 --> 01:11:03,830
that's a little you know there's some
famous algorithm for this called the

3674
01:11:03,830 --> 01:11:03,840
famous algorithm for this called the
 

3675
01:11:03,840 --> 01:11:05,590
famous algorithm for this called the
clock algorithm that is like one way of

3676
01:11:05,590 --> 01:11:05,600
clock algorithm that is like one way of
 

3677
01:11:05,600 --> 01:11:10,870
clock algorithm that is like one way of
doing it

3678
01:11:10,870 --> 01:11:10,880

 

3679
01:11:10,880 --> 01:11:12,709

very well would you need to set it why

3680
01:11:12,709 --> 01:11:12,719
very well would you need to set it why
 

3681
01:11:12,719 --> 01:11:14,630
very well would you need to set it why
would you need to reset it

3682
01:11:14,630 --> 01:11:14,640
would you need to reset it
 

3683
01:11:14,640 --> 01:11:16,390
would you need to reset it
well if you want to know whether page is

3684
01:11:16,390 --> 01:11:16,400
well if you want to know whether page is
 

3685
01:11:16,400 --> 01:11:18,229
well if you want to know whether page is
recently used uh

3686
01:11:18,229 --> 01:11:18,239
recently used uh
 

3687
01:11:18,239 --> 01:11:19,750
recently used uh
you need and you make a periodic

3688
01:11:19,750 --> 01:11:19,760
you need and you make a periodic
 

3689
01:11:19,760 --> 01:11:22,229
you need and you make a periodic
decision uh then say maybe every 100

3690
01:11:22,229 --> 01:11:22,239
decision uh then say maybe every 100
 

3691
01:11:22,239 --> 01:11:24,070
decision uh then say maybe every 100
milliseconds or whatever every second

3692
01:11:24,070 --> 01:11:24,080
milliseconds or whatever every second
 

3693
01:11:24,080 --> 01:11:26,310
milliseconds or whatever every second
you know you clear the axis bit

3694
01:11:26,310 --> 01:11:26,320
you know you clear the axis bit
 

3695
01:11:26,320 --> 01:11:27,990
you know you clear the axis bit
and if it then gets accessed in the next

3696
01:11:27,990 --> 01:11:28,000
and if it then gets accessed in the next
 

3697
01:11:28,000 --> 01:11:29,189
and if it then gets accessed in the next
hundred milliseconds you know it was

3698
01:11:29,189 --> 01:11:29,199
hundred milliseconds you know it was
 

3699
01:11:29,199 --> 01:11:32,630
hundred milliseconds you know it was
used in the last hundred milliseconds

3700
01:11:32,630 --> 01:11:32,640
used in the last hundred milliseconds
 

3701
01:11:32,640 --> 01:11:34,550
used in the last hundred milliseconds
and the pages that don't have the axis

3702
01:11:34,550 --> 01:11:34,560
and the pages that don't have the axis
 

3703
01:11:34,560 --> 01:11:36,149
and the pages that don't have the axis
bit set were not used in the last in the

3704
01:11:36,149 --> 01:11:36,159
bit set were not used in the last in the
 

3705
01:11:36,159 --> 01:11:39,030
bit set were not used in the last in the
milliseconds

3706
01:11:39,030 --> 01:11:39,040

 

3707
01:11:39,040 --> 01:11:40,550

and so then you can keep counters of

3708
01:11:40,550 --> 01:11:40,560
and so then you can keep counters of
 

3709
01:11:40,560 --> 01:11:42,229
and so then you can keep counters of
like how intentionally they're used and

3710
01:11:42,229 --> 01:11:42,239
like how intentionally they're used and
 

3711
01:11:42,239 --> 01:11:44,229
like how intentionally they're used and
what is the and throughout the really

3712
01:11:44,229 --> 01:11:44,239
what is the and throughout the really
 

3713
01:11:44,239 --> 01:11:45,669
what is the and throughout the really
it's basically the stepping stone to

3714
01:11:45,669 --> 01:11:45,679
it's basically the stepping stone to
 

3715
01:11:45,679 --> 01:11:47,510
it's basically the stepping stone to
build a sort of sophisticated lru

3716
01:11:47,510 --> 01:11:47,520
build a sort of sophisticated lru
 

3717
01:11:47,520 --> 01:11:52,790
build a sort of sophisticated lru
implementation

3718
01:11:52,790 --> 01:11:52,800

 

3719
01:11:52,800 --> 01:11:56,630

okay um i want to talk about one more

3720
01:11:56,630 --> 01:11:56,640
okay um i want to talk about one more
 

3721
01:11:56,640 --> 01:11:59,669
okay um i want to talk about one more
just to uh

3722
01:11:59,669 --> 01:11:59,679

 

3723
01:11:59,679 --> 01:12:01,030

and then that's the last one actually

3724
01:12:01,030 --> 01:12:01,040
and then that's the last one actually
 

3725
01:12:01,040 --> 01:12:02,870
and then that's the last one actually
that you also will be implementing in

3726
01:12:02,870 --> 01:12:02,880
that you also will be implementing in
 

3727
01:12:02,880 --> 01:12:06,709
that you also will be implementing in
uh one of the labs and that is

3728
01:12:06,709 --> 01:12:06,719
uh one of the labs and that is
 

3729
01:12:06,719 --> 01:12:21,030
uh one of the labs and that is
memory map files

3730
01:12:21,030 --> 01:12:21,040

 

3731
01:12:21,040 --> 01:12:23,430

and the idea is that uh you know here we

3732
01:12:23,430 --> 01:12:23,440
and the idea is that uh you know here we
 

3733
01:12:23,440 --> 01:12:24,070
and the idea is that uh you know here we
have

3734
01:12:24,070 --> 01:12:24,080
have
 

3735
01:12:24,080 --> 01:12:26,550
have
our address space what we really want to

3736
01:12:26,550 --> 01:12:26,560
our address space what we really want to
 

3737
01:12:26,560 --> 01:12:27,910
our address space what we really want to
do is basically be able to

3738
01:12:27,910 --> 01:12:27,920
do is basically be able to
 

3739
01:12:27,920 --> 01:12:30,070
do is basically be able to
load a whole file or parts of the file

3740
01:12:30,070 --> 01:12:30,080
load a whole file or parts of the file
 

3741
01:12:30,080 --> 01:12:31,270
load a whole file or parts of the file
into the address space

3742
01:12:31,270 --> 01:12:31,280
into the address space
 

3743
01:12:31,280 --> 01:12:32,870
into the address space
so that we can just manipulate you know

3744
01:12:32,870 --> 01:12:32,880
so that we can just manipulate you know
 

3745
01:12:32,880 --> 01:12:34,390
so that we can just manipulate you know
the content of the file using load and

3746
01:12:34,390 --> 01:12:34,400
the content of the file using load and
 

3747
01:12:34,400 --> 01:12:38,149
the content of the file using load and
store instructions

3748
01:12:38,149 --> 01:12:38,159

 

3749
01:12:38,159 --> 01:12:42,390

instead of read you know lc can write

3750
01:12:42,390 --> 01:12:42,400
instead of read you know lc can write
 

3751
01:12:42,400 --> 01:12:44,149
instead of read you know lc can write
and to be able to support that you know

3752
01:12:44,149 --> 01:12:44,159
and to be able to support that you know
 

3753
01:12:44,159 --> 01:12:45,750
and to be able to support that you know
a typical operating system

3754
01:12:45,750 --> 01:12:45,760
a typical operating system
 

3755
01:12:45,760 --> 01:12:48,070
a typical operating system
amongst modern operating systems could

3756
01:12:48,070 --> 01:12:48,080
amongst modern operating systems could
 

3757
01:12:48,080 --> 01:12:52,149
amongst modern operating systems could
provide a system call called nmap

3758
01:12:52,149 --> 01:12:52,159
provide a system call called nmap
 

3759
01:12:52,159 --> 01:12:54,790
provide a system call called nmap
and basically mf takes a virtual address

3760
01:12:54,790 --> 01:12:54,800
and basically mf takes a virtual address
 

3761
01:12:54,800 --> 01:12:56,870
and basically mf takes a virtual address
or you know pixel virtual address

3762
01:12:56,870 --> 01:12:56,880
or you know pixel virtual address
 

3763
01:12:56,880 --> 01:13:00,790
or you know pixel virtual address
length uh protection

3764
01:13:00,790 --> 01:13:00,800
length uh protection
 

3765
01:13:00,800 --> 01:13:02,870
length uh protection
from flags which we're not going to talk

3766
01:13:02,870 --> 01:13:02,880
from flags which we're not going to talk
 

3767
01:13:02,880 --> 01:13:05,350
from flags which we're not going to talk
about and then a file descriptor of an

3768
01:13:05,350 --> 01:13:05,360
about and then a file descriptor of an
 

3769
01:13:05,360 --> 01:13:06,630
about and then a file descriptor of an
open file

3770
01:13:06,630 --> 01:13:06,640
open file
 

3771
01:13:06,640 --> 01:13:09,669
open file
and then offset and basically what this

3772
01:13:09,669 --> 01:13:09,679
and then offset and basically what this
 

3773
01:13:09,679 --> 01:13:12,149
and then offset and basically what this
says is like you should you know map

3774
01:13:12,149 --> 01:13:12,159
says is like you should you know map
 

3775
01:13:12,159 --> 01:13:14,790
says is like you should you know map
you know this file descriptor if this is

3776
01:13:14,790 --> 01:13:14,800
you know this file descriptor if this is
 

3777
01:13:14,800 --> 01:13:16,390
you know this file descriptor if this is
address you know the virtual address

3778
01:13:16,390 --> 01:13:16,400
address you know the virtual address
 

3779
01:13:16,400 --> 01:13:18,870
address you know the virtual address
you know the file descriptor starting

3780
01:13:18,870 --> 01:13:18,880
you know the file descriptor starting
 

3781
01:13:18,880 --> 01:13:20,070
you know the file descriptor starting
from offset

3782
01:13:20,070 --> 01:13:20,080
from offset
 

3783
01:13:20,080 --> 01:13:22,630
from offset
you know in the file f you know map that

3784
01:13:22,630 --> 01:13:22,640
you know in the file f you know map that
 

3785
01:13:22,640 --> 01:13:23,270
you know in the file f you know map that
in

3786
01:13:23,270 --> 01:13:23,280
in
 

3787
01:13:23,280 --> 01:13:26,390
in
add to address at the virtual address va

3788
01:13:26,390 --> 01:13:26,400
add to address at the virtual address va
 

3789
01:13:26,400 --> 01:13:28,390
add to address at the virtual address va
and do that we have some protection like

3790
01:13:28,390 --> 01:13:28,400
and do that we have some protection like
 

3791
01:13:28,400 --> 01:13:30,550
and do that we have some protection like
read write etc

3792
01:13:30,550 --> 01:13:30,560
read write etc
 

3793
01:13:30,560 --> 01:13:33,110
read write etc
and so let's say it's a read write then

3794
01:13:33,110 --> 01:13:33,120
and so let's say it's a read write then
 

3795
01:13:33,120 --> 01:13:34,149
and so let's say it's a read write then
you know the

3796
01:13:34,149 --> 01:13:34,159
you know the
 

3797
01:13:34,159 --> 01:13:37,830
you know the
kernel uh when so the way the kernel

3798
01:13:37,830 --> 01:13:37,840
kernel uh when so the way the kernel
 

3799
01:13:37,840 --> 01:13:39,189
kernel uh when so the way the kernel
implements nmap

3800
01:13:39,189 --> 01:13:39,199
implements nmap
 

3801
01:13:39,199 --> 01:13:41,430
implements nmap
is you know if it does it eagerly uh

3802
01:13:41,430 --> 01:13:41,440
is you know if it does it eagerly uh
 

3803
01:13:41,440 --> 01:13:42,390
is you know if it does it eagerly uh
which is like most

3804
01:13:42,390 --> 01:13:42,400
which is like most
 

3805
01:13:42,400 --> 01:13:44,310
which is like most
the system don't do it easily you know

3806
01:13:44,310 --> 01:13:44,320
the system don't do it easily you know
 

3807
01:13:44,320 --> 01:13:45,990
the system don't do it easily you know
basically copy

3808
01:13:45,990 --> 01:13:46,000
basically copy
 

3809
01:13:46,000 --> 01:13:47,590
basically copy
read all the bytes they're starting from

3810
01:13:47,590 --> 01:13:47,600
read all the bytes they're starting from
 

3811
01:13:47,600 --> 01:13:49,590
read all the bytes they're starting from
offset uh lang bytes starting from

3812
01:13:49,590 --> 01:13:49,600
offset uh lang bytes starting from
 

3813
01:13:49,600 --> 01:13:50,709
offset uh lang bytes starting from
offset into

3814
01:13:50,709 --> 01:13:50,719
offset into
 

3815
01:13:50,719 --> 01:13:54,470
offset into
uh memory sets up the uh ptes

3816
01:13:54,470 --> 01:13:54,480
uh memory sets up the uh ptes
 

3817
01:13:54,480 --> 01:13:57,590
uh memory sets up the uh ptes
to point to the physical memory for

3818
01:13:57,590 --> 01:13:57,600
to point to the physical memory for
 

3819
01:13:57,600 --> 01:13:59,910
to point to the physical memory for
where their blocks are located and then

3820
01:13:59,910 --> 01:13:59,920
where their blocks are located and then
 

3821
01:13:59,920 --> 01:14:01,669
where their blocks are located and then
basically from then on

3822
01:14:01,669 --> 01:14:01,679
basically from then on
 

3823
01:14:01,679 --> 01:14:04,870
basically from then on
the uh application can usually should

3824
01:14:04,870 --> 01:14:04,880
the uh application can usually should
 

3825
01:14:04,880 --> 01:14:06,390
the uh application can usually should
use load and store instructions to

3826
01:14:06,390 --> 01:14:06,400
use load and store instructions to
 

3827
01:14:06,400 --> 01:14:07,910
use load and store instructions to
actually modify

3828
01:14:07,910 --> 01:14:07,920
actually modify
 

3829
01:14:07,920 --> 01:14:10,470
actually modify
the file and then maybe when they uh

3830
01:14:10,470 --> 01:14:10,480
the file and then maybe when they uh
 

3831
01:14:10,480 --> 01:14:11,910
the file and then maybe when they uh
where we're all done

3832
01:14:11,910 --> 01:14:11,920
where we're all done
 

3833
01:14:11,920 --> 01:14:13,510
where we're all done
there's typically a corresponding

3834
01:14:13,510 --> 01:14:13,520
there's typically a corresponding
 

3835
01:14:13,520 --> 01:14:15,270
there's typically a corresponding
unmapped call

3836
01:14:15,270 --> 01:14:15,280
unmapped call
 

3837
01:14:15,280 --> 01:14:18,390
unmapped call
that an app length

3838
01:14:18,390 --> 01:14:18,400
that an app length
 

3839
01:14:18,400 --> 01:14:20,550
that an app length
that allows the application to say like

3840
01:14:20,550 --> 01:14:20,560
that allows the application to say like
 

3841
01:14:20,560 --> 01:14:22,310
that allows the application to say like
okay i'm done with this particular file

3842
01:14:22,310 --> 01:14:22,320
okay i'm done with this particular file
 

3843
01:14:22,320 --> 01:14:24,070
okay i'm done with this particular file
and at the point of the unmapped and we

3844
01:14:24,070 --> 01:14:24,080
and at the point of the unmapped and we
 

3845
01:14:24,080 --> 01:14:32,070
and at the point of the unmapped and we
need to write back the dirty blocks

3846
01:14:32,070 --> 01:14:32,080

 

3847
01:14:32,080 --> 01:14:33,430

and we can easily figure out which

3848
01:14:33,430 --> 01:14:33,440
and we can easily figure out which
 

3849
01:14:33,440 --> 01:14:35,590
and we can easily figure out which
blocks are dirty because

3850
01:14:35,590 --> 01:14:35,600
blocks are dirty because
 

3851
01:14:35,600 --> 01:14:38,630
blocks are dirty because
they have to d bit set in the pte

3852
01:14:38,630 --> 01:14:38,640
they have to d bit set in the pte
 

3853
01:14:38,640 --> 01:14:41,030
they have to d bit set in the pte
now of course in any memory

3854
01:14:41,030 --> 01:14:41,040
now of course in any memory
 

3855
01:14:41,040 --> 01:14:42,229
now of course in any memory
sophisticated memory

3856
01:14:42,229 --> 01:14:42,239
sophisticated memory
 

3857
01:14:42,239 --> 01:14:44,950
sophisticated memory
uh implementation uh this is all done

3858
01:14:44,950 --> 01:14:44,960
uh implementation uh this is all done
 

3859
01:14:44,960 --> 01:14:46,550
uh implementation uh this is all done
lately you know you just don't map the

3860
01:14:46,550 --> 01:14:46,560
lately you know you just don't map the
 

3861
01:14:46,560 --> 01:14:47,669
lately you know you just don't map the
file immediately

3862
01:14:47,669 --> 01:14:47,679
file immediately
 

3863
01:14:47,679 --> 01:14:49,270
file immediately
uh you just keep a record somewhere on

3864
01:14:49,270 --> 01:14:49,280
uh you just keep a record somewhere on
 

3865
01:14:49,280 --> 01:14:51,110
uh you just keep a record somewhere on
the site saying like well you know this

3866
01:14:51,110 --> 01:14:51,120
the site saying like well you know this
 

3867
01:14:51,120 --> 01:14:51,990
the site saying like well you know this
pte

3868
01:14:51,990 --> 01:14:52,000
pte
 

3869
01:14:52,000 --> 01:14:53,430
pte
you know really belongs to this

3870
01:14:53,430 --> 01:14:53,440
you know really belongs to this
 

3871
01:14:53,440 --> 01:14:54,950
you know really belongs to this
particular file descriptor so there's

3872
01:14:54,950 --> 01:14:54,960
particular file descriptor so there's
 

3873
01:14:54,960 --> 01:14:55,510
particular file descriptor so there's
some

3874
01:14:55,510 --> 01:14:55,520
some
 

3875
01:14:55,520 --> 01:14:57,189
some
information maintained on the site which

3876
01:14:57,189 --> 01:14:57,199
information maintained on the site which
 

3877
01:14:57,199 --> 01:14:58,790
information maintained on the site which
is typically called

3878
01:14:58,790 --> 01:14:58,800
is typically called
 

3879
01:14:58,800 --> 01:15:00,790
is typically called
in the structure called the vma or the

3880
01:15:00,790 --> 01:15:00,800
in the structure called the vma or the
 

3881
01:15:00,800 --> 01:15:07,590
in the structure called the vma or the
virtual memory area

3882
01:15:07,590 --> 01:15:07,600

 

3883
01:15:07,600 --> 01:15:09,030

and for example for this file f that

3884
01:15:09,030 --> 01:15:09,040
and for example for this file f that
 

3885
01:15:09,040 --> 01:15:11,669
and for example for this file f that
would be one vma and in a vma we record

3886
01:15:11,669 --> 01:15:11,679
would be one vma and in a vma we record
 

3887
01:15:11,679 --> 01:15:13,590
would be one vma and in a vma we record
you know the file descriptor the offset

3888
01:15:13,590 --> 01:15:13,600
you know the file descriptor the offset
 

3889
01:15:13,600 --> 01:15:16,229
you know the file descriptor the offset
et cetera where the actual content of

3890
01:15:16,229 --> 01:15:16,239
et cetera where the actual content of
 

3891
01:15:16,239 --> 01:15:17,510
et cetera where the actual content of
that memory

3892
01:15:17,510 --> 01:15:17,520
that memory
 

3893
01:15:17,520 --> 01:15:20,630
that memory
lists and so when we uh get a page fault

3894
01:15:20,630 --> 01:15:20,640
lists and so when we uh get a page fault
 

3895
01:15:20,640 --> 01:15:22,390
lists and so when we uh get a page fault
for a particular address that sits in

3896
01:15:22,390 --> 01:15:22,400
for a particular address that sits in
 

3897
01:15:22,400 --> 01:15:23,669
for a particular address that sits in
this you know dma

3898
01:15:23,669 --> 01:15:23,679
this you know dma
 

3899
01:15:23,679 --> 01:15:25,510
this you know dma
and we can go off and the kernel can

3900
01:15:25,510 --> 01:15:25,520
and we can go off and the kernel can
 

3901
01:15:25,520 --> 01:15:26,709
and we can go off and the kernel can
read it from disk

3902
01:15:26,709 --> 01:15:26,719
read it from disk
 

3903
01:15:26,719 --> 01:15:30,229
read it from disk
and uh bring it into memory

3904
01:15:30,229 --> 01:15:30,239
and uh bring it into memory
 

3905
01:15:30,239 --> 01:15:32,310
and uh bring it into memory
and uh in response to an early question

3906
01:15:32,310 --> 01:15:32,320
and uh in response to an early question
 

3907
01:15:32,320 --> 01:15:33,270
and uh in response to an early question
this is like one of the reasons that

3908
01:15:33,270 --> 01:15:33,280
this is like one of the reasons that
 

3909
01:15:33,280 --> 01:15:34,709
this is like one of the reasons that
this dirty bit is important because at

3910
01:15:34,709 --> 01:15:34,719
this dirty bit is important because at
 

3911
01:15:34,719 --> 01:15:35,030
this dirty bit is important because at
the

3912
01:15:35,030 --> 01:15:35,040
the
 

3913
01:15:35,040 --> 01:15:36,950
the
map you have to write back the dirty

3914
01:15:36,950 --> 01:15:36,960
map you have to write back the dirty
 

3915
01:15:36,960 --> 01:15:40,709
map you have to write back the dirty
blocks

3916
01:15:40,709 --> 01:15:40,719

 

3917
01:15:40,719 --> 01:15:43,830

does this make sense

3918
01:15:43,830 --> 01:15:43,840

 

3919
01:15:43,840 --> 01:15:47,270

um i have a quick question yeah uh

3920
01:15:47,270 --> 01:15:47,280
um i have a quick question yeah uh
 

3921
01:15:47,280 --> 01:15:50,070
um i have a quick question yeah uh
maybe this is a more general issue but

3922
01:15:50,070 --> 01:15:50,080
maybe this is a more general issue but
 

3923
01:15:50,080 --> 01:15:51,430
maybe this is a more general issue but
could it ever be an issue if say

3924
01:15:51,430 --> 01:15:51,440
could it ever be an issue if say
 

3925
01:15:51,440 --> 01:15:53,110
could it ever be an issue if say
multiple processes are

3926
01:15:53,110 --> 01:15:53,120
multiple processes are
 

3927
01:15:53,120 --> 01:15:55,110
multiple processes are
memory mapping the same file on

3928
01:15:55,110 --> 01:15:55,120
memory mapping the same file on
 

3929
01:15:55,120 --> 01:15:56,149
memory mapping the same file on
secondary storage

3930
01:15:56,149 --> 01:15:56,159
secondary storage
 

3931
01:15:56,159 --> 01:15:58,310
secondary storage
and then they like like synchronization

3932
01:15:58,310 --> 01:15:58,320
and then they like like synchronization
 

3933
01:15:58,320 --> 01:15:59,430
and then they like like synchronization
issues yeah

3934
01:15:59,430 --> 01:15:59,440
issues yeah
 

3935
01:15:59,440 --> 01:16:01,750
issues yeah
good question uh so what is the

3936
01:16:01,750 --> 01:16:01,760
good question uh so what is the
 

3937
01:16:01,760 --> 01:16:03,590
good question uh so what is the
semantics in units in general like what

3938
01:16:03,590 --> 01:16:03,600
semantics in units in general like what
 

3939
01:16:03,600 --> 01:16:05,430
semantics in units in general like what
happens if multiple processes are read

3940
01:16:05,430 --> 01:16:05,440
happens if multiple processes are read
 

3941
01:16:05,440 --> 01:16:06,870
happens if multiple processes are read
or write to the same file using reading

3942
01:16:06,870 --> 01:16:06,880
or write to the same file using reading
 

3943
01:16:06,880 --> 01:16:18,790
or write to the same file using reading
over the right system calls

3944
01:16:18,790 --> 01:16:18,800

 

3945
01:16:18,800 --> 01:16:22,390

does unix guarantee anything

3946
01:16:22,390 --> 01:16:22,400

 

3947
01:16:22,400 --> 01:16:26,630

oh it's undefined yeah this is like no

3948
01:16:26,630 --> 01:16:26,640
oh it's undefined yeah this is like no
 

3949
01:16:26,640 --> 01:16:28,070
oh it's undefined yeah this is like no
the right the reason right will show up

3950
01:16:28,070 --> 01:16:28,080
the right the reason right will show up
 

3951
01:16:28,080 --> 01:16:29,910
the right the reason right will show up
in some order or the rights will show up

3952
01:16:29,910 --> 01:16:29,920
in some order or the rights will show up
 

3953
01:16:29,920 --> 01:16:31,590
in some order or the rights will show up
in some order so if two processes you

3954
01:16:31,590 --> 01:16:31,600
in some order so if two processes you
 

3955
01:16:31,600 --> 01:16:34,390
in some order so if two processes you
write to the same block off the file you

3956
01:16:34,390 --> 01:16:34,400
write to the same block off the file you
 

3957
01:16:34,400 --> 01:16:34,630
write to the same block off the file you
know

3958
01:16:34,630 --> 01:16:34,640
know
 

3959
01:16:34,640 --> 01:16:36,229
know
either the first process writes go or

3960
01:16:36,229 --> 01:16:36,239
either the first process writes go or
 

3961
01:16:36,239 --> 01:16:37,669
either the first process writes go or
the second process rights go

3962
01:16:37,669 --> 01:16:37,679
the second process rights go
 

3963
01:16:37,679 --> 01:16:39,830
the second process rights go
one of the two and so here's basically

3964
01:16:39,830 --> 01:16:39,840
one of the two and so here's basically
 

3965
01:16:39,840 --> 01:16:41,030
one of the two and so here's basically
the same thing you know we don't really

3966
01:16:41,030 --> 01:16:41,040
the same thing you know we don't really
 

3967
01:16:41,040 --> 01:16:42,950
the same thing you know we don't really
have to guarantee anything

3968
01:16:42,950 --> 01:16:42,960
have to guarantee anything
 

3969
01:16:42,960 --> 01:16:44,709
have to guarantee anything
if you want to do a more sophisticated

3970
01:16:44,709 --> 01:16:44,719
if you want to do a more sophisticated
 

3971
01:16:44,719 --> 01:16:46,630
if you want to do a more sophisticated
unix operating system support file

3972
01:16:46,630 --> 01:16:46,640
unix operating system support file
 

3973
01:16:46,640 --> 01:16:47,590
unix operating system support file
walking

3974
01:16:47,590 --> 01:16:47,600
walking
 

3975
01:16:47,600 --> 01:16:50,149
walking
where you can lock files and then you

3976
01:16:50,149 --> 01:16:50,159
where you can lock files and then you
 

3977
01:16:50,159 --> 01:16:50,630
where you can lock files and then you
can

3978
01:16:50,630 --> 01:16:50,640
can
 

3979
01:16:50,640 --> 01:16:52,870
can
properly synchronize but by default

3980
01:16:52,870 --> 01:16:52,880
properly synchronize but by default
 

3981
01:16:52,880 --> 01:16:55,430
properly synchronize but by default
there's no synchronization

3982
01:16:55,430 --> 01:16:55,440
there's no synchronization
 

3983
01:16:55,440 --> 01:17:01,830
there's no synchronization
or no synchronization at this level

3984
01:17:01,830 --> 01:17:01,840
or no synchronization at this level
 

3985
01:17:01,840 --> 01:17:06,070
or no synchronization at this level
makes sense i'm sorry what is length

3986
01:17:06,070 --> 01:17:06,080
makes sense i'm sorry what is length
 

3987
01:17:06,080 --> 01:17:09,270
makes sense i'm sorry what is length
and what is flags oh flags uh ling

3988
01:17:09,270 --> 01:17:09,280
and what is flags oh flags uh ling
 

3989
01:17:09,280 --> 01:17:11,350
and what is flags oh flags uh ling
is the length of the you know the area

3990
01:17:11,350 --> 01:17:11,360
is the length of the you know the area
 

3991
01:17:11,360 --> 01:17:12,790
is the length of the you know the area
you want to map the files the number of

3992
01:17:12,790 --> 01:17:12,800
you want to map the files the number of
 

3993
01:17:12,800 --> 01:17:13,830
you want to map the files the number of
bytes

3994
01:17:13,830 --> 01:17:13,840
bytes
 

3995
01:17:13,840 --> 01:17:16,950
bytes
uh prod is read write x flags you know

3996
01:17:16,950 --> 01:17:16,960
uh prod is read write x flags you know
 

3997
01:17:16,960 --> 01:17:18,950
uh prod is read write x flags you know
is you'll see that when you do the map

3998
01:17:18,950 --> 01:17:18,960
is you'll see that when you do the map
 

3999
01:17:18,960 --> 01:17:19,990
is you'll see that when you do the map
uh

4000
01:17:19,990 --> 01:17:20,000
uh
 

4001
01:17:20,000 --> 01:17:21,830
uh
i think this has to do with whether the

4002
01:17:21,830 --> 01:17:21,840
i think this has to do with whether the
 

4003
01:17:21,840 --> 01:17:24,229
i think this has to do with whether the
area is mapped private or shared

4004
01:17:24,229 --> 01:17:24,239
area is mapped private or shared
 

4005
01:17:24,239 --> 01:17:26,550
area is mapped private or shared
uh if it's not shared then you know it

4006
01:17:26,550 --> 01:17:26,560
uh if it's not shared then you know it
 

4007
01:17:26,560 --> 01:17:35,030
uh if it's not shared then you know it
can be shared among multiple processes

4008
01:17:35,030 --> 01:17:35,040

 

4009
01:17:35,040 --> 01:17:41,750

any further questions about this

4010
01:17:41,750 --> 01:17:41,760

 

4011
01:17:41,760 --> 01:17:43,990

if some other process modifies the file

4012
01:17:43,990 --> 01:17:44,000
if some other process modifies the file
 

4013
01:17:44,000 --> 01:17:46,229
if some other process modifies the file
and disk that means that this will not

4014
01:17:46,229 --> 01:17:46,239
and disk that means that this will not
 

4015
01:17:46,239 --> 01:17:48,470
and disk that means that this will not
be reflected here right

4016
01:17:48,470 --> 01:17:48,480
be reflected here right
 

4017
01:17:48,480 --> 01:17:51,350
be reflected here right
uh that's correct uh unless i think if

4018
01:17:51,350 --> 01:17:51,360
uh that's correct uh unless i think if
 

4019
01:17:51,360 --> 01:17:51,830
uh that's correct uh unless i think if
it's not

4020
01:17:51,830 --> 01:17:51,840
it's not
 

4021
01:17:51,840 --> 01:17:53,350
it's not
shared then you're supposed to reflect

4022
01:17:53,350 --> 01:17:53,360
shared then you're supposed to reflect
 

4023
01:17:53,360 --> 01:17:55,110
shared then you're supposed to reflect
those changes

4024
01:17:55,110 --> 01:17:55,120
those changes
 

4025
01:17:55,120 --> 01:17:56,630
those changes
right but then they would be using the

4026
01:17:56,630 --> 01:17:56,640
right but then they would be using the
 

4027
01:17:56,640 --> 01:17:58,840
right but then they would be using the
same file descriptor right

4028
01:17:58,840 --> 01:17:58,850
same file descriptor right
 

4029
01:17:58,850 --> 01:18:01,189
same file descriptor right
[Music]

4030
01:18:01,189 --> 01:18:01,199
[Music]
 

4031
01:18:01,199 --> 01:18:03,669
[Music]
i'm hazy on the exact you know semantics

4032
01:18:03,669 --> 01:18:03,679
i'm hazy on the exact you know semantics
 

4033
01:18:03,679 --> 01:18:04,470
i'm hazy on the exact you know semantics
of

4034
01:18:04,470 --> 01:18:04,480
of
 

4035
01:18:04,480 --> 01:18:06,310
of
nmap when things are shared and what

4036
01:18:06,310 --> 01:18:06,320
nmap when things are shared and what
 

4037
01:18:06,320 --> 01:18:08,149
nmap when things are shared and what
exactly happens there

4038
01:18:08,149 --> 01:18:08,159
exactly happens there
 

4039
01:18:08,159 --> 01:18:09,750
exactly happens there
okay i get so i guess in like the

4040
01:18:09,750 --> 01:18:09,760
okay i get so i guess in like the
 

4041
01:18:09,760 --> 01:18:11,669
okay i get so i guess in like the
idiomatic case yeah and the shared

4042
01:18:11,669 --> 01:18:11,679
idiomatic case yeah and the shared
 

4043
01:18:11,679 --> 01:18:14,790
idiomatic case yeah and the shared
they would have to reflect it but

4044
01:18:14,790 --> 01:18:14,800
they would have to reflect it but
 

4045
01:18:14,800 --> 01:18:16,870
they would have to reflect it but
if a process just like actually opened

4046
01:18:16,870 --> 01:18:16,880
if a process just like actually opened
 

4047
01:18:16,880 --> 01:18:17,990
if a process just like actually opened
the same file name

4048
01:18:17,990 --> 01:18:18,000
the same file name
 

4049
01:18:18,000 --> 01:18:21,510
the same file name
completely set separately i think

4050
01:18:21,510 --> 01:18:21,520
completely set separately i think
 

4051
01:18:21,520 --> 01:18:23,910
completely set separately i think
it could be unsynced even if it's shared

4052
01:18:23,910 --> 01:18:23,920
it could be unsynced even if it's shared
 

4053
01:18:23,920 --> 01:18:30,950
it could be unsynced even if it's shared
yeah that's correct

4054
01:18:30,950 --> 01:18:30,960

 

4055
01:18:30,960 --> 01:18:33,590

okay so uh so this is after the file

4056
01:18:33,590 --> 01:18:33,600
okay so uh so this is after the file
 

4057
01:18:33,600 --> 01:18:34,310
okay so uh so this is after the file
system lab

4058
01:18:34,310 --> 01:18:34,320
system lab
 

4059
01:18:34,320 --> 01:18:37,590
system lab
you actually do memory map files and

4060
01:18:37,590 --> 01:18:37,600
you actually do memory map files and
 

4061
01:18:37,600 --> 01:18:38,790
you actually do memory map files and
that will be our last

4062
01:18:38,790 --> 01:18:38,800
that will be our last
 

4063
01:18:38,800 --> 01:18:41,030
that will be our last
virtual memory sort of laugh unless you

4064
01:18:41,030 --> 01:18:41,040
virtual memory sort of laugh unless you
 

4065
01:18:41,040 --> 01:18:42,550
virtual memory sort of laugh unless you
decide at the end to do more virtual

4066
01:18:42,550 --> 01:18:42,560
decide at the end to do more virtual
 

4067
01:18:42,560 --> 01:18:43,669
decide at the end to do more virtual
memory uh

4068
01:18:43,669 --> 01:18:43,679
memory uh
 

4069
01:18:43,679 --> 01:18:45,750
memory uh
uh features or exercises uh whatever you

4070
01:18:45,750 --> 01:18:45,760
uh features or exercises uh whatever you
 

4071
01:18:45,760 --> 01:18:47,030
uh features or exercises uh whatever you
want to do uh

4072
01:18:47,030 --> 01:18:47,040
want to do uh
 

4073
01:18:47,040 --> 01:18:48,790
want to do uh
anyway so the main choice this will

4074
01:18:48,790 --> 01:18:48,800
anyway so the main choice this will
 

4075
01:18:48,800 --> 01:18:51,189
anyway so the main choice this will
conclude this lecture um

4076
01:18:51,189 --> 01:18:51,199
conclude this lecture um
 

4077
01:18:51,199 --> 01:18:55,910
conclude this lecture um
the you know sort of summary

4078
01:18:55,910 --> 01:18:55,920

 

4079
01:18:55,920 --> 01:18:57,510

you know we have loot in the past you

4080
01:18:57,510 --> 01:18:57,520
you know we have loot in the past you
 

4081
01:18:57,520 --> 01:18:59,350
you know we have loot in the past you
know sort of in great uh detail

4082
01:18:59,350 --> 01:18:59,360
know sort of in great uh detail
 

4083
01:18:59,360 --> 01:19:02,630
know sort of in great uh detail
exactly you know uh page tables work

4084
01:19:02,630 --> 01:19:02,640
exactly you know uh page tables work
 

4085
01:19:02,640 --> 01:19:04,550
exactly you know uh page tables work
uh you've done a couple laps and one lap

4086
01:19:04,550 --> 01:19:04,560
uh you've done a couple laps and one lap
 

4087
01:19:04,560 --> 01:19:06,630
uh you've done a couple laps and one lap
the page tables we've looked a lot at

4088
01:19:06,630 --> 01:19:06,640
the page tables we've looked a lot at
 

4089
01:19:06,640 --> 01:19:08,470
the page tables we've looked a lot at
like how traps work

4090
01:19:08,470 --> 01:19:08,480
like how traps work
 

4091
01:19:08,480 --> 01:19:11,910
like how traps work
and and you know page faults and it

4092
01:19:11,910 --> 01:19:11,920
and and you know page faults and it
 

4093
01:19:11,920 --> 01:19:13,510
and and you know page faults and it
turns out you know if you combine the

4094
01:19:13,510 --> 01:19:13,520
turns out you know if you combine the
 

4095
01:19:13,520 --> 01:19:16,149
turns out you know if you combine the
two

4096
01:19:16,149 --> 01:19:16,159

 

4097
01:19:16,159 --> 01:19:17,510

you know you're going to get you can

4098
01:19:17,510 --> 01:19:17,520
you know you're going to get you can
 

4099
01:19:17,520 --> 01:19:19,270
you know you're going to get you can
implement very powerful

4100
01:19:19,270 --> 01:19:19,280
implement very powerful
 

4101
01:19:19,280 --> 01:19:22,470
implement very powerful
and elegant

4102
01:19:22,470 --> 01:19:22,480
and elegant
 

4103
01:19:22,480 --> 01:19:25,669
and elegant
uh virtual memory features

4104
01:19:25,669 --> 01:19:25,679
uh virtual memory features
 

4105
01:19:25,679 --> 01:19:27,030
uh virtual memory features
and you know went through a whole list

4106
01:19:27,030 --> 01:19:27,040
and you know went through a whole list
 

4107
01:19:27,040 --> 01:19:28,790
and you know went through a whole list
of them uh

4108
01:19:28,790 --> 01:19:28,800
of them uh
 

4109
01:19:28,800 --> 01:19:30,070
of them uh
mostly focusing on the ones that

4110
01:19:30,070 --> 01:19:30,080
mostly focusing on the ones that
 

4111
01:19:30,080 --> 01:19:31,110
mostly focusing on the ones that
actually going to be implementing in

4112
01:19:31,110 --> 01:19:31,120
actually going to be implementing in
 

4113
01:19:31,120 --> 01:19:32,390
actually going to be implementing in
future labs

4114
01:19:32,390 --> 01:19:32,400
future labs
 

4115
01:19:32,400 --> 01:19:34,709
future labs
uh but you know this is only a subset

4116
01:19:34,709 --> 01:19:34,719
uh but you know this is only a subset
 

4117
01:19:34,719 --> 01:19:36,229
uh but you know this is only a subset
very sample

4118
01:19:36,229 --> 01:19:36,239
very sample
 

4119
01:19:36,239 --> 01:19:37,750
very sample
of the ones that you know some operating

4120
01:19:37,750 --> 01:19:37,760
of the ones that you know some operating
 

4121
01:19:37,760 --> 01:19:39,189
of the ones that you know some operating
systems implemented and the typical

4122
01:19:39,189 --> 01:19:39,199
systems implemented and the typical
 

4123
01:19:39,199 --> 01:19:40,630
systems implemented and the typical
operating systems implement all the ones

4124
01:19:40,630 --> 01:19:40,640
operating systems implement all the ones
 

4125
01:19:40,640 --> 01:19:42,229
operating systems implement all the ones
that actually discussed today

4126
01:19:42,229 --> 01:19:42,239
that actually discussed today
 

4127
01:19:42,239 --> 01:19:45,669
that actually discussed today
so you look at linux it has all of them

4128
01:19:45,669 --> 01:19:45,679
so you look at linux it has all of them
 

4129
01:19:45,679 --> 01:19:48,149
so you look at linux it has all of them
and many more interesting other tricks

4130
01:19:48,149 --> 01:19:48,159
and many more interesting other tricks
 

4131
01:19:48,159 --> 01:19:49,270
and many more interesting other tricks
but this hopefully gives you a good

4132
01:19:49,270 --> 01:19:49,280
but this hopefully gives you a good
 

4133
01:19:49,280 --> 01:19:51,110
but this hopefully gives you a good
sense you know sort of how the power of

4134
01:19:51,110 --> 01:19:51,120
sense you know sort of how the power of
 

4135
01:19:51,120 --> 01:19:52,070
sense you know sort of how the power of
virtual memory

4136
01:19:52,070 --> 01:19:52,080
virtual memory
 

4137
01:19:52,080 --> 01:19:54,070
virtual memory
uh once you dynamically can change the

4138
01:19:54,070 --> 01:19:54,080
uh once you dynamically can change the
 

4139
01:19:54,080 --> 01:19:55,750
uh once you dynamically can change the
page tables uh in the page fault

4140
01:19:55,750 --> 01:19:55,760
page tables uh in the page fault
 

4141
01:19:55,760 --> 01:19:58,709
page tables uh in the page fault
headline

4142
01:19:58,709 --> 01:19:58,719

 

4143
01:19:58,719 --> 01:20:01,669

i think this is exactly that 25 so maybe

4144
01:20:01,669 --> 01:20:01,679
i think this is exactly that 25 so maybe
 

4145
01:20:01,679 --> 01:20:02,630
i think this is exactly that 25 so maybe
it is a good point to

4146
01:20:02,630 --> 01:20:02,640
it is a good point to
 

4147
01:20:02,640 --> 01:20:04,229
it is a good point to
stop but if you have any questions you

4148
01:20:04,229 --> 01:20:04,239
stop but if you have any questions you
 

4149
01:20:04,239 --> 01:20:07,750
stop but if you have any questions you
know feel free to ask them

4150
01:20:07,750 --> 01:20:07,760

 

4151
01:20:07,760 --> 01:20:09,590

and if not you know we should good luck

4152
01:20:09,590 --> 01:20:09,600
and if not you know we should good luck
 

4153
01:20:09,600 --> 01:20:11,910
and if not you know we should good luck
finishing uh the trap lab

4154
01:20:11,910 --> 01:20:11,920
finishing uh the trap lab
 

4155
01:20:11,920 --> 01:20:15,430
finishing uh the trap lab
and i hope it's not as painful as the uh

4156
01:20:15,430 --> 01:20:15,440
and i hope it's not as painful as the uh
 

4157
01:20:15,440 --> 01:20:21,590
and i hope it's not as painful as the uh
or not as hard as the page table lab

4158
01:20:21,590 --> 01:20:21,600

 

4159
01:20:21,600 --> 01:20:23,910

oh sorry i had another question when you

4160
01:20:23,910 --> 01:20:23,920
oh sorry i had another question when you
 

4161
01:20:23,920 --> 01:20:24,790
oh sorry i had another question when you
map in the

4162
01:20:24,790 --> 01:20:24,800
map in the
 

4163
01:20:24,800 --> 01:20:27,750
map in the
in the previous slide um when you map

4164
01:20:27,750 --> 01:20:27,760
in the previous slide um when you map
 

4165
01:20:27,760 --> 01:20:29,750
in the previous slide um when you map
the whole file or like when you put it

4166
01:20:29,750 --> 01:20:29,760
the whole file or like when you put it
 

4167
01:20:29,760 --> 01:20:30,709
the whole file or like when you put it
into memory

4168
01:20:30,709 --> 01:20:30,719
into memory
 

4169
01:20:30,719 --> 01:20:32,550
into memory
and it turns out to be longer than

4170
01:20:32,550 --> 01:20:32,560
and it turns out to be longer than
 

4171
01:20:32,560 --> 01:20:35,830
and it turns out to be longer than
length um

4172
01:20:35,830 --> 01:20:35,840
length um
 

4173
01:20:35,840 --> 01:20:38,790
length um
then what happens so if the file doesn't

4174
01:20:38,790 --> 01:20:38,800
then what happens so if the file doesn't
 

4175
01:20:38,800 --> 01:20:40,950
then what happens so if the file doesn't
fit in the virtual address space

4176
01:20:40,950 --> 01:20:40,960
fit in the virtual address space
 

4177
01:20:40,960 --> 01:20:44,629
fit in the virtual address space
oh i guess so like length is how

4178
01:20:44,629 --> 01:20:44,639
oh i guess so like length is how
 

4179
01:20:44,639 --> 01:20:48,310
oh i guess so like length is how
much of the file we want yes

4180
01:20:48,310 --> 01:20:48,320
much of the file we want yes
 

4181
01:20:48,320 --> 01:20:50,229
much of the file we want yes
yeah so length is just like we want to

4182
01:20:50,229 --> 01:20:50,239
yeah so length is just like we want to
 

4183
01:20:50,239 --> 01:20:51,430
yeah so length is just like we want to
map like 10 bytes

4184
01:20:51,430 --> 01:20:51,440
map like 10 bytes
 

4185
01:20:51,440 --> 01:20:53,750
map like 10 bytes
out of the file descriptor starting and

4186
01:20:53,750 --> 01:20:53,760
out of the file descriptor starting and
 

4187
01:20:53,760 --> 01:20:55,590
out of the file descriptor starting and
offset off

4188
01:20:55,590 --> 01:20:55,600
offset off
 

4189
01:20:55,600 --> 01:20:58,390
offset off
oh okay okay so if the file is longer

4190
01:20:58,390 --> 01:20:58,400
oh okay okay so if the file is longer
 

4191
01:20:58,400 --> 01:20:59,510
oh okay okay so if the file is longer
then we're not gonna

4192
01:20:59,510 --> 01:20:59,520
then we're not gonna
 

4193
01:20:59,520 --> 01:21:01,669
then we're not gonna
put all of it into memory yeah yeah we

4194
01:21:01,669 --> 01:21:01,679
put all of it into memory yeah yeah we
 

4195
01:21:01,679 --> 01:21:03,590
put all of it into memory yeah yeah we
can always yeah exactly

4196
01:21:03,590 --> 01:21:03,600
can always yeah exactly
 

4197
01:21:03,600 --> 01:21:08,390
can always yeah exactly
okay i see thank you

4198
01:21:08,390 --> 01:21:08,400

 

4199
01:21:08,400 --> 01:21:09,990

um thank you i've got a question i've

4200
01:21:09,990 --> 01:21:10,000
um thank you i've got a question i've
 

4201
01:21:10,000 --> 01:21:10,950
um thank you i've got a question i've
got a question about

4202
01:21:10,950 --> 01:21:10,960
got a question about
 

4203
01:21:10,960 --> 01:21:12,709
got a question about
[Music]

4204
01:21:12,709 --> 01:21:12,719
[Music]
 

4205
01:21:12,719 --> 01:21:16,709
[Music]
evicting pages so

4206
01:21:16,709 --> 01:21:16,719
evicting pages so
 

4207
01:21:16,719 --> 01:21:18,149
evicting pages so
so we talked about it under like the man

4208
01:21:18,149 --> 01:21:18,159
so we talked about it under like the man
 

4209
01:21:18,159 --> 01:21:19,830
so we talked about it under like the man
caging part two but is that like a

4210
01:21:19,830 --> 01:21:19,840
caging part two but is that like a
 

4211
01:21:19,840 --> 01:21:20,470
caging part two but is that like a
general

4212
01:21:20,470 --> 01:21:20,480
general
 

4213
01:21:20,480 --> 01:21:21,990
general
procedure we would use in any of these

4214
01:21:21,990 --> 01:21:22,000
procedure we would use in any of these
 

4215
01:21:22,000 --> 01:21:23,830
procedure we would use in any of these
techniques if we discover that we're out

4216
01:21:23,830 --> 01:21:23,840
techniques if we discover that we're out
 

4217
01:21:23,840 --> 01:21:24,070
techniques if we discover that we're out
of

4218
01:21:24,070 --> 01:21:24,080
of
 

4219
01:21:24,080 --> 01:21:26,629
of
physical boundary yeah as the common

4220
01:21:26,629 --> 01:21:26,639
physical boundary yeah as the common
 

4221
01:21:26,639 --> 01:21:29,110
physical boundary yeah as the common
basically mechanisms like so even in

4222
01:21:29,110 --> 01:21:29,120
basically mechanisms like so even in
 

4223
01:21:29,120 --> 01:21:31,189
basically mechanisms like so even in
lazy allocation we run at the point

4224
01:21:31,189 --> 01:21:31,199
lazy allocation we run at the point
 

4225
01:21:31,199 --> 01:21:33,030
lazy allocation we run at the point
where uh

4226
01:21:33,030 --> 01:21:33,040
where uh
 

4227
01:21:33,040 --> 01:21:34,790
where uh
there's no memory available anymore to

4228
01:21:34,790 --> 01:21:34,800
there's no memory available anymore to
 

4229
01:21:34,800 --> 01:21:36,149
there's no memory available anymore to
allocate to the page

4230
01:21:36,149 --> 01:21:36,159
allocate to the page
 

4231
01:21:36,159 --> 01:21:38,790
allocate to the page
and you know we support demand paging or

4232
01:21:38,790 --> 01:21:38,800
and you know we support demand paging or
 

4233
01:21:38,800 --> 01:21:40,629
and you know we support demand paging or
whatever we use evict you know some page

4234
01:21:40,629 --> 01:21:40,639
whatever we use evict you know some page
 

4235
01:21:40,639 --> 01:21:41,030
whatever we use evict you know some page
you know

4236
01:21:41,030 --> 01:21:41,040
you know
 

4237
01:21:41,040 --> 01:21:44,470
you know
typically using lru okay and one way to

4238
01:21:44,470 --> 01:21:44,480
typically using lru okay and one way to
 

4239
01:21:44,480 --> 01:21:46,229
typically using lru okay and one way to
think about it is that in the steady

4240
01:21:46,229 --> 01:21:46,239
think about it is that in the steady
 

4241
01:21:46,239 --> 01:21:47,750
think about it is that in the steady
state the operating system basically

4242
01:21:47,750 --> 01:21:47,760
state the operating system basically
 

4243
01:21:47,760 --> 01:21:48,709
state the operating system basically
runs

4244
01:21:48,709 --> 01:21:48,719
runs
 

4245
01:21:48,719 --> 01:21:52,470
runs
uh with all memory in use at any time

4246
01:21:52,470 --> 01:21:52,480
uh with all memory in use at any time
 

4247
01:21:52,480 --> 01:21:56,629
uh with all memory in use at any time
and want to use old memory

4248
01:21:56,629 --> 01:21:56,639
and want to use old memory
 

4249
01:21:56,639 --> 01:21:58,310
and want to use old memory
and so when we start something new you

4250
01:21:58,310 --> 01:21:58,320
and so when we start something new you
 

4251
01:21:58,320 --> 01:21:59,830
and so when we start something new you
know we have to make some room

4252
01:21:59,830 --> 01:21:59,840
know we have to make some room
 

4253
01:21:59,840 --> 01:22:01,510
know we have to make some room
and you know lru is basically a way to

4254
01:22:01,510 --> 01:22:01,520
and you know lru is basically a way to
 

4255
01:22:01,520 --> 01:22:03,270
and you know lru is basically a way to
do it

4256
01:22:03,270 --> 01:22:03,280
do it
 

4257
01:22:03,280 --> 01:22:10,000
do it
okay make sense thank you

