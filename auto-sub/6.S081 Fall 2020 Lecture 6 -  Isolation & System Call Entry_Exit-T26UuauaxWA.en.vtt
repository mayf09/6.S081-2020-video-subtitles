WEBVTT
Kind: captions
Language: en

00:00:02.320 --> 00:00:03.830 align:start position:0%
 
all<00:00:02.480><c> right</c>

00:00:03.830 --> 00:00:03.840 align:start position:0%
all right
 

00:00:03.840 --> 00:00:06.710 align:start position:0%
all right
um<00:00:04.240><c> i'd</c><00:00:04.400><c> like</c><00:00:04.560><c> to</c><00:00:04.720><c> get</c><00:00:04.960><c> started</c><00:00:05.839><c> first</c><00:00:06.160><c> can</c><00:00:06.480><c> uh</c>

00:00:06.710 --> 00:00:06.720 align:start position:0%
um i'd like to get started first can uh
 

00:00:06.720 --> 00:00:09.190 align:start position:0%
um i'd like to get started first can uh
can<00:00:06.879><c> anyone</c><00:00:07.279><c> hear</c><00:00:07.440><c> me</c>

00:00:09.190 --> 00:00:09.200 align:start position:0%
can anyone hear me
 

00:00:09.200 --> 00:00:13.190 align:start position:0%
can anyone hear me
yes<00:00:10.400><c> good</c><00:00:10.880><c> thank</c><00:00:11.040><c> you</c><00:00:11.200><c> very</c><00:00:11.360><c> much</c>

00:00:13.190 --> 00:00:13.200 align:start position:0%
yes good thank you very much
 

00:00:13.200 --> 00:00:16.470 align:start position:0%
yes good thank you very much
all<00:00:13.360><c> right</c><00:00:13.519><c> today</c><00:00:14.080><c> i</c><00:00:14.320><c> want</c><00:00:14.480><c> to</c><00:00:14.639><c> talk</c><00:00:14.880><c> about</c>

00:00:16.470 --> 00:00:16.480 align:start position:0%
all right today i want to talk about
 

00:00:16.480 --> 00:00:19.109 align:start position:0%
all right today i want to talk about
the<00:00:16.800><c> transition</c><00:00:17.440><c> between</c><00:00:17.840><c> running</c><00:00:18.240><c> and</c><00:00:18.720><c> user</c>

00:00:19.109 --> 00:00:19.119 align:start position:0%
the transition between running and user
 

00:00:19.119 --> 00:00:19.670 align:start position:0%
the transition between running and user
code

00:00:19.670 --> 00:00:19.680 align:start position:0%
code
 

00:00:19.680 --> 00:00:21.830 align:start position:0%
code
running<00:00:19.920><c> programs</c><00:00:20.320><c> in</c><00:00:20.400><c> user</c><00:00:20.720><c> code</c><00:00:21.199><c> and</c>

00:00:21.830 --> 00:00:21.840 align:start position:0%
running programs in user code and
 

00:00:21.840 --> 00:00:23.349 align:start position:0%
running programs in user code and
executing<00:00:22.400><c> in</c><00:00:22.480><c> the</c><00:00:22.640><c> kernel</c>

00:00:23.349 --> 00:00:23.359 align:start position:0%
executing in the kernel
 

00:00:23.359 --> 00:00:24.790 align:start position:0%
executing in the kernel
and<00:00:23.439><c> this</c><00:00:23.600><c> is</c><00:00:23.760><c> the</c><00:00:23.840><c> transition</c><00:00:24.320><c> that</c><00:00:24.480><c> has</c><00:00:24.640><c> to</c>

00:00:24.790 --> 00:00:24.800 align:start position:0%
and this is the transition that has to
 

00:00:24.800 --> 00:00:26.710 align:start position:0%
and this is the transition that has to
happen<00:00:25.199><c> whenever</c><00:00:25.599><c> a</c><00:00:25.760><c> program</c><00:00:26.000><c> makes</c><00:00:26.240><c> a</c><00:00:26.320><c> system</c>

00:00:26.710 --> 00:00:26.720 align:start position:0%
happen whenever a program makes a system
 

00:00:26.720 --> 00:00:27.429 align:start position:0%
happen whenever a program makes a system
call

00:00:27.429 --> 00:00:27.439 align:start position:0%
call
 

00:00:27.439 --> 00:00:29.349 align:start position:0%
call
or<00:00:27.680><c> if</c><00:00:27.760><c> it</c><00:00:27.920><c> experiences</c><00:00:28.400><c> a</c><00:00:28.480><c> fault</c><00:00:28.800><c> like</c><00:00:28.960><c> a</c><00:00:29.039><c> page</c>

00:00:29.349 --> 00:00:29.359 align:start position:0%
or if it experiences a fault like a page
 

00:00:29.359 --> 00:00:30.950 align:start position:0%
or if it experiences a fault like a page
fault<00:00:29.599><c> or</c><00:00:29.679><c> divide</c><00:00:30.000><c> by</c><00:00:30.240><c> zero</c>

00:00:30.950 --> 00:00:30.960 align:start position:0%
fault or divide by zero
 

00:00:30.960 --> 00:00:33.910 align:start position:0%
fault or divide by zero
or<00:00:31.199><c> if</c><00:00:31.359><c> a</c><00:00:31.439><c> device</c><00:00:32.640><c> decides</c><00:00:33.040><c> to</c><00:00:33.200><c> interrupt</c><00:00:33.600><c> and</c>

00:00:33.910 --> 00:00:33.920 align:start position:0%
or if a device decides to interrupt and
 

00:00:33.920 --> 00:00:35.990 align:start position:0%
or if a device decides to interrupt and
needs<00:00:34.160><c> to</c><00:00:34.239><c> be</c><00:00:34.399><c> served</c><00:00:34.800><c> by</c><00:00:34.960><c> a</c><00:00:35.120><c> kernel</c><00:00:35.600><c> device</c>

00:00:35.990 --> 00:00:36.000 align:start position:0%
needs to be served by a kernel device
 

00:00:36.000 --> 00:00:38.150 align:start position:0%
needs to be served by a kernel device
driver

00:00:38.150 --> 00:00:38.160 align:start position:0%
driver
 

00:00:38.160 --> 00:00:40.389 align:start position:0%
driver
there's<00:00:38.399><c> a</c><00:00:38.480><c> lot</c><00:00:38.640><c> of</c><00:00:38.719><c> careful</c><00:00:39.040><c> design</c><00:00:39.840><c> and</c><00:00:40.239><c> sort</c>

00:00:40.389 --> 00:00:40.399 align:start position:0%
there's a lot of careful design and sort
 

00:00:40.399 --> 00:00:43.110 align:start position:0%
there's a lot of careful design and sort
of<00:00:40.559><c> important</c><00:00:41.040><c> details</c><00:00:41.600><c> that</c><00:00:41.760><c> go</c><00:00:42.000><c> into</c><00:00:42.320><c> the</c>

00:00:43.110 --> 00:00:43.120 align:start position:0%
of important details that go into the
 

00:00:43.120 --> 00:00:46.069 align:start position:0%
of important details that go into the
how<00:00:43.280><c> these</c><00:00:43.600><c> traps</c><00:00:45.120><c> from</c><00:00:45.360><c> user</c><00:00:45.600><c> to</c><00:00:45.760><c> kernel</c>

00:00:46.069 --> 00:00:46.079 align:start position:0%
how these traps from user to kernel
 

00:00:46.079 --> 00:00:46.790 align:start position:0%
how these traps from user to kernel
happen

00:00:46.790 --> 00:00:46.800 align:start position:0%
happen
 

00:00:46.800 --> 00:00:49.430 align:start position:0%
happen
and<00:00:46.960><c> the</c><00:00:47.039><c> details</c><00:00:47.440><c> are</c><00:00:48.000><c> pretty</c><00:00:48.239><c> important</c><00:00:48.800><c> for</c>

00:00:49.430 --> 00:00:49.440 align:start position:0%
and the details are pretty important for
 

00:00:49.440 --> 00:00:51.910 align:start position:0%
and the details are pretty important for
enforcing<00:00:49.920><c> isolation</c><00:00:50.559><c> security</c>

00:00:51.910 --> 00:00:51.920 align:start position:0%
enforcing isolation security
 

00:00:51.920 --> 00:00:53.910 align:start position:0%
enforcing isolation security
and<00:00:52.079><c> also</c><00:00:52.320><c> perform</c><00:00:52.879><c> per</c><00:00:53.120><c> performance</c><00:00:53.680><c> there's</c>

00:00:53.910 --> 00:00:53.920 align:start position:0%
and also perform per performance there's
 

00:00:53.920 --> 00:00:55.590 align:start position:0%
and also perform per performance there's
many<00:00:54.160><c> programs</c><00:00:54.559><c> that</c>

00:00:55.590 --> 00:00:55.600 align:start position:0%
many programs that
 

00:00:55.600 --> 00:00:57.510 align:start position:0%
many programs that
transition<00:00:56.000><c> to</c><00:00:56.079><c> the</c><00:00:56.160><c> kernel</c><00:00:56.640><c> a</c><00:00:56.719><c> lot</c><00:00:57.199><c> either</c>

00:00:57.510 --> 00:00:57.520 align:start position:0%
transition to the kernel a lot either
 

00:00:57.520 --> 00:00:59.430 align:start position:0%
transition to the kernel a lot either
due<00:00:57.680><c> to</c><00:00:57.840><c> system</c><00:00:58.160><c> calls</c><00:00:58.399><c> or</c><00:00:58.559><c> page</c>

00:00:59.430 --> 00:00:59.440 align:start position:0%
due to system calls or page
 

00:00:59.440 --> 00:01:02.150 align:start position:0%
due to system calls or page
page<00:00:59.760><c> faults</c><00:01:01.199><c> and</c><00:01:01.440><c> it</c><00:01:01.520><c> can</c><00:01:01.680><c> be</c><00:01:01.840><c> super</c>

00:01:02.150 --> 00:01:02.160 align:start position:0%
page faults and it can be super
 

00:01:02.160 --> 00:01:02.709 align:start position:0%
page faults and it can be super
important

00:01:02.709 --> 00:01:02.719 align:start position:0%
important
 

00:01:02.719 --> 00:01:05.030 align:start position:0%
important
that<00:01:02.960><c> the</c><00:01:03.199><c> uh</c><00:01:04.000><c> trap</c><00:01:04.320><c> mechanism</c><00:01:04.799><c> is</c><00:01:04.960><c> as</c>

00:01:05.030 --> 00:01:05.040 align:start position:0%
that the uh trap mechanism is as
 

00:01:05.040 --> 00:01:07.510 align:start position:0%
that the uh trap mechanism is as
streamlined<00:01:05.600><c> as</c><00:01:05.760><c> possible</c>

00:01:07.510 --> 00:01:07.520 align:start position:0%
streamlined as possible
 

00:01:07.520 --> 00:01:10.950 align:start position:0%
streamlined as possible
all<00:01:07.680><c> right</c><00:01:07.920><c> so</c><00:01:08.560><c> um</c><00:01:09.280><c> starting</c><00:01:09.680><c> situation</c><00:01:10.240><c> is</c>

00:01:10.950 --> 00:01:10.960 align:start position:0%
all right so um starting situation is
 

00:01:10.960 --> 00:01:14.870 align:start position:0%
all right so um starting situation is
pretty<00:01:11.200><c> familiar</c>

00:01:14.870 --> 00:01:14.880 align:start position:0%
 
 

00:01:14.880 --> 00:01:17.190 align:start position:0%
 
we<00:01:15.040><c> have</c><00:01:15.280><c> our</c><00:01:15.759><c> user</c><00:01:16.240><c> program</c><00:01:16.640><c> i'll</c><00:01:16.799><c> use</c><00:01:16.960><c> the</c>

00:01:17.190 --> 00:01:17.200 align:start position:0%
we have our user program i'll use the
 

00:01:17.200 --> 00:01:19.350 align:start position:0%
we have our user program i'll use the
shell<00:01:17.520><c> as</c><00:01:17.680><c> an</c><00:01:17.840><c> example</c>

00:01:19.350 --> 00:01:19.360 align:start position:0%
shell as an example
 

00:01:19.360 --> 00:01:23.510 align:start position:0%
shell as an example
it's<00:01:19.520><c> running</c><00:01:19.840><c> up</c><00:01:19.920><c> in</c><00:01:20.000><c> user</c><00:01:20.320><c> space</c><00:01:20.799><c> and</c>

00:01:23.510 --> 00:01:23.520 align:start position:0%
 
 

00:01:23.520 --> 00:01:24.950 align:start position:0%
 
we<00:01:23.759><c> have</c><00:01:23.840><c> the</c><00:01:23.920><c> kernel</c><00:01:24.320><c> and</c><00:01:24.400><c> what</c><00:01:24.560><c> the</c><00:01:24.720><c> shell</c>

00:01:24.950 --> 00:01:24.960 align:start position:0%
we have the kernel and what the shell
 

00:01:24.960 --> 00:01:27.510 align:start position:0%
we have the kernel and what the shell
would<00:01:25.119><c> like</c><00:01:25.280><c> to</c><00:01:25.360><c> do</c><00:01:25.439><c> is</c><00:01:25.520><c> make</c><00:01:25.759><c> a</c><00:01:25.920><c> system</c><00:01:26.320><c> call</c>

00:01:27.510 --> 00:01:27.520 align:start position:0%
would like to do is make a system call
 

00:01:27.520 --> 00:01:29.749 align:start position:0%
would like to do is make a system call
into<00:01:27.759><c> the</c><00:01:27.920><c> kernel</c><00:01:29.040><c> and</c><00:01:29.200><c> i'm</c><00:01:29.360><c> going</c><00:01:29.439><c> to</c><00:01:29.520><c> use</c>

00:01:29.749 --> 00:01:29.759 align:start position:0%
into the kernel and i'm going to use
 

00:01:29.759 --> 00:01:31.910 align:start position:0%
into the kernel and i'm going to use
write<00:01:30.400><c> and</c><00:01:30.560><c> use</c><00:01:30.720><c> this</c><00:01:31.040><c> shell</c><00:01:31.360><c> writing</c><00:01:31.680><c> its</c>

00:01:31.910 --> 00:01:31.920 align:start position:0%
write and use this shell writing its
 

00:01:31.920 --> 00:01:33.670 align:start position:0%
write and use this shell writing its
prompt<00:01:32.320><c> the</c><00:01:32.479><c> very</c><00:01:32.799><c> first</c>

00:01:33.670 --> 00:01:33.680 align:start position:0%
prompt the very first
 

00:01:33.680 --> 00:01:35.990 align:start position:0%
prompt the very first
write<00:01:33.920><c> that</c><00:01:34.159><c> happens</c><00:01:34.560><c> after</c><00:01:34.799><c> you</c><00:01:34.880><c> boot</c><00:01:35.119><c> xv6</c>

00:01:35.990 --> 00:01:36.000 align:start position:0%
write that happens after you boot xv6
 

00:01:36.000 --> 00:01:37.429 align:start position:0%
write that happens after you boot xv6
and<00:01:36.159><c> use</c><00:01:36.400><c> the</c><00:01:36.479><c> shell</c><00:01:36.720><c> trying</c><00:01:36.960><c> to</c><00:01:37.040><c> write</c>

00:01:37.429 --> 00:01:37.439 align:start position:0%
and use the shell trying to write
 

00:01:37.439 --> 00:01:39.990 align:start position:0%
and use the shell trying to write
make<00:01:37.600><c> the</c><00:01:37.759><c> right</c><00:01:37.920><c> system</c><00:01:38.320><c> call</c><00:01:38.560><c> as</c><00:01:38.720><c> an</c><00:01:38.840><c> example</c>

00:01:39.990 --> 00:01:40.000 align:start position:0%
make the right system call as an example
 

00:01:40.000 --> 00:01:42.230 align:start position:0%
make the right system call as an example
and<00:01:40.079><c> so</c><00:01:40.240><c> we</c><00:01:40.400><c> need</c><00:01:40.479><c> to</c><00:01:40.560><c> figure</c><00:01:40.880><c> out</c><00:01:41.040><c> how</c><00:01:41.200><c> to</c>

00:01:42.230 --> 00:01:42.240 align:start position:0%
and so we need to figure out how to
 

00:01:42.240 --> 00:01:44.469 align:start position:0%
and so we need to figure out how to
actually<00:01:42.640><c> get</c><00:01:43.200><c> execution</c><00:01:43.759><c> to</c><00:01:43.920><c> transfer</c><00:01:44.320><c> from</c>

00:01:44.469 --> 00:01:44.479 align:start position:0%
actually get execution to transfer from
 

00:01:44.479 --> 00:01:45.830 align:start position:0%
actually get execution to transfer from
running<00:01:44.799><c> in</c><00:01:44.880><c> the</c><00:01:44.960><c> show</c>

00:01:45.830 --> 00:01:45.840 align:start position:0%
running in the show
 

00:01:45.840 --> 00:01:48.630 align:start position:0%
running in the show
in<00:01:46.000><c> user</c><00:01:46.399><c> space</c><00:01:46.799><c> with</c><00:01:46.960><c> user</c><00:01:47.280><c> privileges</c><00:01:48.479><c> to</c>

00:01:48.630 --> 00:01:48.640 align:start position:0%
in user space with user privileges to
 

00:01:48.640 --> 00:01:50.069 align:start position:0%
in user space with user privileges to
running<00:01:48.880><c> in</c><00:01:48.960><c> the</c><00:01:49.040><c> kernel</c><00:01:49.360><c> with</c><00:01:49.520><c> supervisor</c>

00:01:50.069 --> 00:01:50.079 align:start position:0%
running in the kernel with supervisor
 

00:01:50.079 --> 00:01:52.069 align:start position:0%
running in the kernel with supervisor
privileges

00:01:52.069 --> 00:01:52.079 align:start position:0%
privileges
 

00:01:52.079 --> 00:01:54.389 align:start position:0%
privileges
the<00:01:52.320><c> state</c><00:01:52.720><c> of</c><00:01:52.799><c> the</c><00:01:52.960><c> hardware</c><00:01:53.520><c> is</c><00:01:54.000><c> it's</c><00:01:54.320><c> going</c>

00:01:54.389 --> 00:01:54.399 align:start position:0%
the state of the hardware is it's going
 

00:01:54.399 --> 00:01:55.510 align:start position:0%
the state of the hardware is it's going
to<00:01:54.479><c> be</c><00:01:54.640><c> very</c><00:01:54.799><c> important</c><00:01:55.119><c> because</c><00:01:55.280><c> a</c><00:01:55.360><c> lot</c><00:01:55.439><c> of</c>

00:01:55.510 --> 00:01:55.520 align:start position:0%
to be very important because a lot of
 

00:01:55.520 --> 00:01:56.950 align:start position:0%
to be very important because a lot of
what<00:01:55.680><c> we're</c><00:01:55.759><c> doing</c><00:01:56.079><c> is</c><00:01:56.240><c> kind</c><00:01:56.399><c> of</c>

00:01:56.950 --> 00:01:56.960 align:start position:0%
what we're doing is kind of
 

00:01:56.960 --> 00:01:59.510 align:start position:0%
what we're doing is kind of
changing<00:01:57.280><c> the</c><00:01:57.360><c> hardware</c><00:01:57.840><c> state</c><00:01:58.159><c> from</c><00:01:59.200><c> state</c>

00:01:59.510 --> 00:01:59.520 align:start position:0%
changing the hardware state from state
 

00:01:59.520 --> 00:02:02.870 align:start position:0%
changing the hardware state from state
appropriate<00:01:59.920><c> for</c><00:02:00.079><c> running</c><00:02:00.399><c> user</c><00:02:00.799><c> code</c><00:02:01.200><c> to</c><00:02:01.439><c> um</c>

00:02:02.870 --> 00:02:02.880 align:start position:0%
appropriate for running user code to um
 

00:02:02.880 --> 00:02:04.310 align:start position:0%
appropriate for running user code to um
state<00:02:03.119><c> appropriate</c><00:02:03.600><c> for</c><00:02:03.759><c> running</c><00:02:04.000><c> kernel</c>

00:02:04.310 --> 00:02:04.320 align:start position:0%
state appropriate for running kernel
 

00:02:04.320 --> 00:02:05.990 align:start position:0%
state appropriate for running kernel
code

00:02:05.990 --> 00:02:06.000 align:start position:0%
code
 

00:02:06.000 --> 00:02:08.869 align:start position:0%
code
the<00:02:06.159><c> state</c><00:02:06.399><c> that</c><00:02:06.560><c> we</c><00:02:06.719><c> care</c><00:02:06.960><c> about</c><00:02:07.840><c> um</c><00:02:08.640><c> you</c><00:02:08.720><c> know</c>

00:02:08.869 --> 00:02:08.879 align:start position:0%
the state that we care about um you know
 

00:02:08.879 --> 00:02:10.869 align:start position:0%
the state that we care about um you know
the<00:02:08.959><c> biggest</c><00:02:09.280><c> state</c><00:02:09.520><c> is</c><00:02:09.679><c> maybe</c><00:02:10.000><c> the</c><00:02:10.319><c> uh</c>

00:02:10.869 --> 00:02:10.879 align:start position:0%
the biggest state is maybe the uh
 

00:02:10.879 --> 00:02:14.390 align:start position:0%
the biggest state is maybe the uh
32<00:02:11.520><c> user</c><00:02:11.840><c> registers</c><00:02:13.440><c> as</c><00:02:13.599><c> you</c><00:02:13.760><c> remember</c><00:02:14.080><c> this</c>

00:02:14.390 --> 00:02:14.400 align:start position:0%
32 user registers as you remember this
 

00:02:14.400 --> 00:02:15.430 align:start position:0%
32 user registers as you remember this
from

00:02:15.430 --> 00:02:15.440 align:start position:0%
from
 

00:02:15.440 --> 00:02:17.990 align:start position:0%
from
monday's<00:02:15.840><c> discussion</c><00:02:16.800><c> we</c><00:02:16.959><c> have</c><00:02:17.440><c> all</c><00:02:17.599><c> the</c><00:02:17.680><c> user</c>

00:02:17.990 --> 00:02:18.000 align:start position:0%
monday's discussion we have all the user
 

00:02:18.000 --> 00:02:19.990 align:start position:0%
monday's discussion we have all the user
registers<00:02:18.480><c> things</c><00:02:18.800><c> like</c><00:02:19.040><c> a0</c>

00:02:19.990 --> 00:02:20.000 align:start position:0%
registers things like a0
 

00:02:20.000 --> 00:02:24.390 align:start position:0%
registers things like a0
and<00:02:20.239><c> a1</c><00:02:22.959><c> risk</c><00:02:23.200><c> 5</c><00:02:23.440><c> has</c><00:02:23.599><c> a</c><00:02:23.680><c> whole</c><00:02:23.840><c> lot</c><00:02:24.000><c> of</c><00:02:24.160><c> these</c>

00:02:24.390 --> 00:02:24.400 align:start position:0%
and a1 risk 5 has a whole lot of these
 

00:02:24.400 --> 00:02:26.070 align:start position:0%
and a1 risk 5 has a whole lot of these
32<00:02:24.959><c> in</c><00:02:25.040><c> total</c>

00:02:26.070 --> 00:02:26.080 align:start position:0%
32 in total
 

00:02:26.080 --> 00:02:27.750 align:start position:0%
32 in total
and<00:02:26.239><c> we</c><00:02:26.400><c> can</c><00:02:26.560><c> expect</c><00:02:26.879><c> user</c><00:02:27.120><c> code</c><00:02:27.360><c> to</c><00:02:27.440><c> use</c><00:02:27.680><c> all</c>

00:02:27.750 --> 00:02:27.760 align:start position:0%
and we can expect user code to use all
 

00:02:27.760 --> 00:02:29.190 align:start position:0%
and we can expect user code to use all
of<00:02:27.920><c> them</c><00:02:28.560><c> right</c><00:02:28.720><c> it's</c><00:02:28.879><c> going</c><00:02:28.959><c> to</c><00:02:29.040><c> get</c><00:02:29.120><c> the</c>

00:02:29.190 --> 00:02:29.200 align:start position:0%
of them right it's going to get the
 

00:02:29.200 --> 00:02:30.790 align:start position:0%
of them right it's going to get the
highest<00:02:29.520><c> performance</c><00:02:30.000><c> if</c><00:02:30.160><c> it</c><00:02:30.239><c> uses</c><00:02:30.560><c> all</c><00:02:30.720><c> of</c>

00:02:30.790 --> 00:02:30.800 align:start position:0%
highest performance if it uses all of
 

00:02:30.800 --> 00:02:31.750 align:start position:0%
highest performance if it uses all of
them

00:02:31.750 --> 00:02:31.760 align:start position:0%
them
 

00:02:31.760 --> 00:02:33.430 align:start position:0%
them
many<00:02:31.920><c> of</c><00:02:32.000><c> them</c><00:02:32.160><c> have</c><00:02:32.319><c> special</c><00:02:32.720><c> purposes</c><00:02:33.200><c> a</c><00:02:33.280><c> few</c>

00:02:33.430 --> 00:02:33.440 align:start position:0%
many of them have special purposes a few
 

00:02:33.440 --> 00:02:34.790 align:start position:0%
many of them have special purposes a few
which<00:02:33.680><c> we'll</c><00:02:33.840><c> see</c>

00:02:34.790 --> 00:02:34.800 align:start position:0%
which we'll see
 

00:02:34.800 --> 00:02:36.470 align:start position:0%
which we'll see
a<00:02:34.959><c> particularly</c><00:02:35.360><c> interesting</c><00:02:35.760><c> one</c><00:02:36.080><c> is</c><00:02:36.239><c> the</c>

00:02:36.470 --> 00:02:36.480 align:start position:0%
a particularly interesting one is the
 

00:02:36.480 --> 00:02:38.550 align:start position:0%
a particularly interesting one is the
stack<00:02:36.879><c> pointer</c><00:02:37.519><c> is</c><00:02:37.680><c> actually</c><00:02:38.000><c> one</c><00:02:38.239><c> of</c><00:02:38.319><c> these</c>

00:02:38.550 --> 00:02:38.560 align:start position:0%
stack pointer is actually one of these
 

00:02:38.560 --> 00:02:39.750 align:start position:0%
stack pointer is actually one of these
32

00:02:39.750 --> 00:02:39.760 align:start position:0%
32
 

00:02:39.760 --> 00:02:44.390 align:start position:0%
32
general<00:02:40.000><c> purpose</c><00:02:40.400><c> registers</c>

00:02:44.390 --> 00:02:44.400 align:start position:0%
 
 

00:02:44.400 --> 00:02:46.309 align:start position:0%
 
okay<00:02:44.640><c> we</c><00:02:44.720><c> have</c><00:02:44.879><c> these</c><00:02:45.040><c> registers</c><00:02:45.840><c> including</c><00:02:46.160><c> a</c>

00:02:46.309 --> 00:02:46.319 align:start position:0%
okay we have these registers including a
 

00:02:46.319 --> 00:02:47.750 align:start position:0%
okay we have these registers including a
stack<00:02:46.640><c> pointer</c>

00:02:47.750 --> 00:02:47.760 align:start position:0%
stack pointer
 

00:02:47.760 --> 00:02:49.350 align:start position:0%
stack pointer
there's<00:02:48.000><c> a</c><00:02:48.080><c> separate</c><00:02:48.560><c> program</c><00:02:48.959><c> counter</c>

00:02:49.350 --> 00:02:49.360 align:start position:0%
there's a separate program counter
 

00:02:49.360 --> 00:02:52.710 align:start position:0%
there's a separate program counter
register<00:02:50.160><c> in</c><00:02:50.239><c> the</c><00:02:50.400><c> hardware</c>

00:02:52.710 --> 00:02:52.720 align:start position:0%
register in the hardware
 

00:02:52.720 --> 00:02:55.430 align:start position:0%
register in the hardware
there's<00:02:53.040><c> the</c><00:02:53.200><c> current</c><00:02:53.680><c> mode</c><00:02:54.319><c> either</c>

00:02:55.430 --> 00:02:55.440 align:start position:0%
there's the current mode either
 

00:02:55.440 --> 00:02:57.430 align:start position:0%
there's the current mode either
supervisor<00:02:56.160><c> or</c><00:02:56.239><c> user</c><00:02:56.560><c> and</c><00:02:56.720><c> of</c><00:02:56.800><c> course</c><00:02:56.959><c> it's</c>

00:02:57.430 --> 00:02:57.440 align:start position:0%
supervisor or user and of course it's
 

00:02:57.440 --> 00:03:00.309 align:start position:0%
supervisor or user and of course it's
user<00:02:57.760><c> mode</c><00:02:58.560><c> when</c><00:02:58.720><c> we're</c><00:02:58.959><c> executing</c><00:02:59.440><c> up</c><00:02:59.599><c> in</c><00:02:59.680><c> the</c>

00:03:00.309 --> 00:03:00.319 align:start position:0%
user mode when we're executing up in the
 

00:03:00.319 --> 00:03:03.030 align:start position:0%
user mode when we're executing up in the
in<00:03:00.400><c> the</c><00:03:00.560><c> shell</c>

00:03:03.030 --> 00:03:03.040 align:start position:0%
 
 

00:03:03.040 --> 00:03:04.630 align:start position:0%
 
and<00:03:03.120><c> then</c><00:03:03.280><c> there's</c><00:03:03.440><c> a</c><00:03:03.519><c> bunch</c><00:03:03.760><c> of</c><00:03:03.920><c> registers</c>

00:03:04.630 --> 00:03:04.640 align:start position:0%
and then there's a bunch of registers
 

00:03:04.640 --> 00:03:06.869 align:start position:0%
and then there's a bunch of registers
special<00:03:04.959><c> registers</c><00:03:05.599><c> that</c><00:03:05.840><c> control</c>

00:03:06.869 --> 00:03:06.879 align:start position:0%
special registers that control
 

00:03:06.879 --> 00:03:09.110 align:start position:0%
special registers that control
how<00:03:07.040><c> the</c><00:03:07.360><c> cpu</c><00:03:07.760><c> works</c><00:03:08.000><c> like</c><00:03:08.159><c> there's</c><00:03:08.400><c> the</c><00:03:08.560><c> sat</c><00:03:08.879><c> p</c>

00:03:09.110 --> 00:03:09.120 align:start position:0%
how the cpu works like there's the sat p
 

00:03:09.120 --> 00:03:10.149 align:start position:0%
how the cpu works like there's the sat p
register<00:03:09.599><c> that</c>

00:03:10.149 --> 00:03:10.159 align:start position:0%
register that
 

00:03:10.159 --> 00:03:13.110 align:start position:0%
register that
contains<00:03:10.560><c> a</c><00:03:10.640><c> pointer</c><00:03:10.959><c> to</c><00:03:11.120><c> the</c><00:03:12.000><c> page</c><00:03:12.319><c> table</c><00:03:12.959><c> and</c>

00:03:13.110 --> 00:03:13.120 align:start position:0%
contains a pointer to the page table and
 

00:03:13.120 --> 00:03:14.149 align:start position:0%
contains a pointer to the page table and
it'll<00:03:13.280><c> turn</c><00:03:13.519><c> out</c><00:03:13.599><c> there's</c><00:03:13.760><c> a</c><00:03:13.840><c> couple</c><00:03:14.000><c> of</c>

00:03:14.149 --> 00:03:14.159 align:start position:0%
it'll turn out there's a couple of
 

00:03:14.159 --> 00:03:15.670 align:start position:0%
it'll turn out there's a couple of
others<00:03:14.400><c> that</c><00:03:14.560><c> are</c><00:03:14.640><c> super</c><00:03:14.959><c> important</c><00:03:15.360><c> for</c><00:03:15.440><c> this</c>

00:03:15.670 --> 00:03:15.680 align:start position:0%
others that are super important for this
 

00:03:15.680 --> 00:03:16.550 align:start position:0%
others that are super important for this
discussion

00:03:16.550 --> 00:03:16.560 align:start position:0%
discussion
 

00:03:16.560 --> 00:03:19.990 align:start position:0%
discussion
there's<00:03:16.800><c> this</c><00:03:17.040><c> st</c><00:03:17.680><c> which</c><00:03:18.319><c> is</c>

00:03:19.990 --> 00:03:20.000 align:start position:0%
there's this st which is
 

00:03:20.000 --> 00:03:22.309 align:start position:0%
there's this st which is
addressing<00:03:20.480><c> the</c><00:03:20.560><c> instruction</c><00:03:21.040><c> that</c><00:03:22.080><c> should</c>

00:03:22.309 --> 00:03:22.319 align:start position:0%
addressing the instruction that should
 

00:03:22.319 --> 00:03:23.990 align:start position:0%
addressing the instruction that should
handle<00:03:22.720><c> traps</c><00:03:23.040><c> in</c><00:03:23.120><c> the</c><00:03:23.280><c> kernel</c>

00:03:23.990 --> 00:03:24.000 align:start position:0%
handle traps in the kernel
 

00:03:24.000 --> 00:03:27.910 align:start position:0%
handle traps in the kernel
um<00:03:25.440><c> there's</c><00:03:25.760><c> a</c><00:03:26.159><c> register</c><00:03:26.720><c> called</c><00:03:26.959><c> scpc</c><00:03:27.680><c> for</c>

00:03:27.910 --> 00:03:27.920 align:start position:0%
um there's a register called scpc for
 

00:03:27.920 --> 00:03:29.750 align:start position:0%
um there's a register called scpc for
saving<00:03:28.319><c> the</c><00:03:28.480><c> program</c><00:03:28.799><c> counter</c><00:03:29.040><c> during</c><00:03:29.280><c> a</c><00:03:29.360><c> trap</c>

00:03:29.750 --> 00:03:29.760 align:start position:0%
saving the program counter during a trap
 

00:03:29.760 --> 00:03:30.229 align:start position:0%
saving the program counter during a trap
and

00:03:30.229 --> 00:03:30.239 align:start position:0%
and
 

00:03:30.239 --> 00:03:32.390 align:start position:0%
and
we'll<00:03:30.400><c> see</c><00:03:30.560><c> there's</c><00:03:30.799><c> another</c><00:03:31.040><c> one</c><00:03:31.280><c> called</c><00:03:32.159><c> s</c>

00:03:32.390 --> 00:03:32.400 align:start position:0%
we'll see there's another one called s
 

00:03:32.400 --> 00:03:33.430 align:start position:0%
we'll see there's another one called s
scratch

00:03:33.430 --> 00:03:33.440 align:start position:0%
scratch
 

00:03:33.440 --> 00:03:35.350 align:start position:0%
scratch
which<00:03:33.680><c> is</c><00:03:33.760><c> also</c><00:03:34.000><c> very</c><00:03:34.159><c> important</c><00:03:34.959><c> so</c><00:03:35.120><c> this</c><00:03:35.280><c> is</c>

00:03:35.350 --> 00:03:35.360 align:start position:0%
which is also very important so this is
 

00:03:35.360 --> 00:03:37.670 align:start position:0%
which is also very important so this is
the<00:03:35.519><c> state</c><00:03:35.920><c> of</c><00:03:36.000><c> the</c><00:03:36.080><c> running</c><00:03:36.319><c> machine</c>

00:03:37.670 --> 00:03:37.680 align:start position:0%
the state of the running machine
 

00:03:37.680 --> 00:03:39.190 align:start position:0%
the state of the running machine
at<00:03:37.760><c> the</c><00:03:37.920><c> time</c><00:03:38.080><c> of</c><00:03:38.159><c> the</c><00:03:38.319><c> system</c><00:03:38.640><c> call</c><00:03:38.959><c> and</c><00:03:39.120><c> we</c>

00:03:39.190 --> 00:03:39.200 align:start position:0%
at the time of the system call and we
 

00:03:39.200 --> 00:03:40.630 align:start position:0%
at the time of the system call and we
actually<00:03:39.440><c> need</c><00:03:39.599><c> to</c><00:03:39.840><c> change</c><00:03:40.080><c> a</c><00:03:40.159><c> bunch</c><00:03:40.400><c> of</c><00:03:40.480><c> this</c>

00:03:40.630 --> 00:03:40.640 align:start position:0%
actually need to change a bunch of this
 

00:03:40.640 --> 00:03:41.910 align:start position:0%
actually need to change a bunch of this
state<00:03:40.959><c> or</c><00:03:41.120><c> do</c><00:03:41.360><c> things</c>

00:03:41.910 --> 00:03:41.920 align:start position:0%
state or do things
 

00:03:41.920 --> 00:03:44.390 align:start position:0%
state or do things
to<00:03:42.080><c> the</c><00:03:42.239><c> state</c><00:03:42.640><c> as</c><00:03:42.959><c> part</c><00:03:43.280><c> of</c><00:03:43.760><c> getting</c><00:03:44.080><c> into</c><00:03:44.319><c> the</c>

00:03:44.390 --> 00:03:44.400 align:start position:0%
to the state as part of getting into the
 

00:03:44.400 --> 00:03:46.229 align:start position:0%
to the state as part of getting into the
kernel

00:03:46.229 --> 00:03:46.239 align:start position:0%
kernel
 

00:03:46.239 --> 00:03:47.830 align:start position:0%
kernel
and<00:03:46.480><c> setting</c><00:03:46.720><c> ourselves</c><00:03:47.120><c> up</c><00:03:47.280><c> to</c><00:03:47.440><c> run</c><00:03:47.599><c> just</c>

00:03:47.830 --> 00:03:47.840 align:start position:0%
and setting ourselves up to run just
 

00:03:47.840 --> 00:03:50.229 align:start position:0%
and setting ourselves up to run just
ordinary<00:03:48.319><c> c</c><00:03:48.560><c> functions</c><00:03:49.040><c> in</c><00:03:49.120><c> the</c><00:03:49.280><c> kernel</c>

00:03:50.229 --> 00:03:50.239 align:start position:0%
ordinary c functions in the kernel
 

00:03:50.239 --> 00:03:52.949 align:start position:0%
ordinary c functions in the kernel
certainly<00:03:50.560><c> at</c><00:03:50.720><c> the</c><00:03:51.519><c> instant</c><00:03:51.840><c> of</c><00:03:51.920><c> the</c><00:03:52.000><c> trap</c><00:03:52.799><c> all</c>

00:03:52.949 --> 00:03:52.959 align:start position:0%
certainly at the instant of the trap all
 

00:03:52.959 --> 00:03:54.550 align:start position:0%
certainly at the instant of the trap all
the<00:03:53.120><c> state</c><00:03:53.360><c> of</c><00:03:53.439><c> the</c><00:03:53.519><c> cpu</c><00:03:53.920><c> is</c><00:03:54.000><c> set</c><00:03:54.159><c> up</c><00:03:54.239><c> to</c><00:03:54.400><c> run</c>

00:03:54.550 --> 00:03:54.560 align:start position:0%
the state of the cpu is set up to run
 

00:03:54.560 --> 00:03:55.429 align:start position:0%
the state of the cpu is set up to run
user<00:03:54.879><c> code</c>

00:03:55.429 --> 00:03:55.439 align:start position:0%
user code
 

00:03:55.439 --> 00:03:58.309 align:start position:0%
user code
not<00:03:56.000><c> um</c><00:03:56.400><c> not</c><00:03:56.640><c> kernel</c><00:03:56.959><c> code</c><00:03:57.840><c> so</c><00:03:58.000><c> the</c><00:03:58.159><c> things</c>

00:03:58.309 --> 00:03:58.319 align:start position:0%
not um not kernel code so the things
 

00:03:58.319 --> 00:03:58.710 align:start position:0%
not um not kernel code so the things
that<00:03:58.480><c> are</c>

00:03:58.710 --> 00:03:58.720 align:start position:0%
that are
 

00:03:58.720 --> 00:03:59.990 align:start position:0%
that are
going<00:03:58.799><c> to</c><00:03:58.879><c> need</c><00:03:59.040><c> to</c><00:03:59.120><c> happen</c><00:03:59.519><c> is</c><00:03:59.599><c> kind</c><00:03:59.760><c> of</c><00:03:59.920><c> a</c>

00:03:59.990 --> 00:04:00.000 align:start position:0%
going to need to happen is kind of a
 

00:04:00.000 --> 00:04:02.470 align:start position:0%
going to need to happen is kind of a
preview<00:04:00.400><c> of</c><00:04:00.480><c> what</c><00:04:00.720><c> i'll</c><00:04:00.799><c> talk</c><00:04:01.040><c> about</c>

00:04:02.470 --> 00:04:02.480 align:start position:0%
preview of what i'll talk about
 

00:04:02.480 --> 00:04:05.350 align:start position:0%
preview of what i'll talk about
one<00:04:02.720><c> is</c><00:04:02.879><c> that</c><00:04:04.000><c> we</c><00:04:04.159><c> need</c><00:04:04.319><c> to</c><00:04:04.400><c> save</c><00:04:04.720><c> all</c><00:04:04.959><c> 32</c>

00:04:05.350 --> 00:04:05.360 align:start position:0%
one is that we need to save all 32
 

00:04:05.360 --> 00:04:06.309 align:start position:0%
one is that we need to save all 32
registers<00:04:05.920><c> because</c>

00:04:06.309 --> 00:04:06.319 align:start position:0%
registers because
 

00:04:06.319 --> 00:04:09.429 align:start position:0%
registers because
we<00:04:06.480><c> want</c><00:04:06.799><c> to</c><00:04:07.680><c> resume</c><00:04:08.480><c> the</c><00:04:08.720><c> user</c><00:04:09.040><c> code</c>

00:04:09.429 --> 00:04:09.439 align:start position:0%
we want to resume the user code
 

00:04:09.439 --> 00:04:11.030 align:start position:0%
we want to resume the user code
transparently

00:04:11.030 --> 00:04:11.040 align:start position:0%
transparently
 

00:04:11.040 --> 00:04:12.070 align:start position:0%
transparently
particularly<00:04:11.360><c> if</c><00:04:11.519><c> there's</c><00:04:11.680><c> a</c><00:04:11.760><c> device</c>

00:04:12.070 --> 00:04:12.080 align:start position:0%
particularly if there's a device
 

00:04:12.080 --> 00:04:13.429 align:start position:0%
particularly if there's a device
interrupt<00:04:12.400><c> which</c><00:04:12.560><c> the</c><00:04:12.720><c> user</c><00:04:12.879><c> code</c><00:04:13.200><c> isn't</c>

00:04:13.429 --> 00:04:13.439 align:start position:0%
interrupt which the user code isn't
 

00:04:13.439 --> 00:04:14.390 align:start position:0%
interrupt which the user code isn't
expecting

00:04:14.390 --> 00:04:14.400 align:start position:0%
expecting
 

00:04:14.400 --> 00:04:15.350 align:start position:0%
expecting
and<00:04:14.480><c> we</c><00:04:14.640><c> want</c><00:04:14.799><c> to</c><00:04:14.879><c> be</c><00:04:14.959><c> able</c><00:04:15.120><c> to</c><00:04:15.200><c> have</c><00:04:15.280><c> the</c>

00:04:15.350 --> 00:04:15.360 align:start position:0%
and we want to be able to have the
 

00:04:15.360 --> 00:04:17.590 align:start position:0%
and we want to be able to have the
kernel<00:04:15.680><c> serve</c><00:04:15.920><c> the</c><00:04:16.079><c> interrupt</c><00:04:16.479><c> and</c><00:04:16.560><c> then</c>

00:04:17.590 --> 00:04:17.600 align:start position:0%
kernel serve the interrupt and then
 

00:04:17.600 --> 00:04:19.430 align:start position:0%
kernel serve the interrupt and then
resume<00:04:18.000><c> the</c><00:04:18.239><c> user</c><00:04:18.560><c> code</c><00:04:18.799><c> without</c><00:04:19.280><c> ever</c>

00:04:19.430 --> 00:04:19.440 align:start position:0%
resume the user code without ever
 

00:04:19.440 --> 00:04:20.870 align:start position:0%
resume the user code without ever
noticing<00:04:19.840><c> any</c><00:04:20.079><c> difference</c><00:04:20.479><c> and</c><00:04:20.560><c> that</c><00:04:20.720><c> means</c>

00:04:20.870 --> 00:04:20.880 align:start position:0%
noticing any difference and that means
 

00:04:20.880 --> 00:04:22.390 align:start position:0%
noticing any difference and that means
that<00:04:21.040><c> these</c><00:04:21.199><c> 32</c><00:04:21.600><c> registers</c><00:04:22.079><c> can't</c><00:04:22.240><c> be</c>

00:04:22.390 --> 00:04:22.400 align:start position:0%
that these 32 registers can't be
 

00:04:22.400 --> 00:04:23.990 align:start position:0%
that these 32 registers can't be
disturbed<00:04:22.960><c> by</c><00:04:23.120><c> the</c><00:04:23.199><c> kernel</c>

00:04:23.990 --> 00:04:24.000 align:start position:0%
disturbed by the kernel
 

00:04:24.000 --> 00:04:25.990 align:start position:0%
disturbed by the kernel
which<00:04:24.400><c> and</c><00:04:24.720><c> since</c><00:04:24.960><c> the</c><00:04:25.040><c> kernel</c><00:04:25.520><c> needs</c><00:04:25.759><c> to</c><00:04:25.840><c> use</c>

00:04:25.990 --> 00:04:26.000 align:start position:0%
which and since the kernel needs to use
 

00:04:26.000 --> 00:04:27.590 align:start position:0%
which and since the kernel needs to use
the<00:04:26.160><c> registers</c><00:04:26.639><c> it</c><00:04:26.720><c> has</c><00:04:26.960><c> to</c><00:04:27.120><c> save</c><00:04:27.280><c> them</c><00:04:27.520><c> all</c>

00:04:27.590 --> 00:04:27.600 align:start position:0%
the registers it has to save them all
 

00:04:27.600 --> 00:04:27.990 align:start position:0%
the registers it has to save them all
somewhere

00:04:27.990 --> 00:04:28.000 align:start position:0%
somewhere
 

00:04:28.000 --> 00:04:31.110 align:start position:0%
somewhere
first<00:04:28.320><c> these</c><00:04:28.560><c> need</c><00:04:28.720><c> to</c><00:04:28.800><c> be</c><00:04:28.960><c> saved</c><00:04:30.479><c> um</c><00:04:30.960><c> the</c>

00:04:31.110 --> 00:04:31.120 align:start position:0%
first these need to be saved um the
 

00:04:31.120 --> 00:04:32.710 align:start position:0%
first these need to be saved um the
program<00:04:31.440><c> counter</c><00:04:31.759><c> also</c><00:04:32.000><c> needs</c><00:04:32.160><c> to</c><00:04:32.240><c> be</c><00:04:32.400><c> saved</c>

00:04:32.710 --> 00:04:32.720 align:start position:0%
program counter also needs to be saved
 

00:04:32.720 --> 00:04:33.270 align:start position:0%
program counter also needs to be saved
somewhere

00:04:33.270 --> 00:04:33.280 align:start position:0%
somewhere
 

00:04:33.280 --> 00:04:35.430 align:start position:0%
somewhere
because<00:04:33.440><c> we</c><00:04:33.600><c> need</c><00:04:33.759><c> to</c><00:04:34.080><c> you</c><00:04:34.160><c> know</c><00:04:34.320><c> it's</c><00:04:34.479><c> a</c><00:04:34.560><c> user</c>

00:04:35.430 --> 00:04:35.440 align:start position:0%
because we need to you know it's a user
 

00:04:35.440 --> 00:04:37.670 align:start position:0%
because we need to you know it's a user
it's<00:04:35.600><c> almost</c><00:04:35.840><c> like</c><00:04:36.000><c> a</c><00:04:36.080><c> user</c><00:04:36.320><c> register</c><00:04:36.800><c> so</c>

00:04:37.670 --> 00:04:37.680 align:start position:0%
it's almost like a user register so
 

00:04:37.680 --> 00:04:39.670 align:start position:0%
it's almost like a user register so
we<00:04:37.759><c> need</c><00:04:37.919><c> to</c><00:04:38.080><c> continue</c><00:04:38.400><c> executing</c><00:04:38.880><c> the</c><00:04:39.360><c> user</c>

00:04:39.670 --> 00:04:39.680 align:start position:0%
we need to continue executing the user
 

00:04:39.680 --> 00:04:41.110 align:start position:0%
we need to continue executing the user
program<00:04:40.000><c> where</c><00:04:40.160><c> it</c><00:04:40.240><c> left</c><00:04:40.479><c> off</c>

00:04:41.110 --> 00:04:41.120 align:start position:0%
program where it left off
 

00:04:41.120 --> 00:04:43.430 align:start position:0%
program where it left off
we<00:04:41.280><c> need</c><00:04:41.440><c> to</c><00:04:41.520><c> switch</c><00:04:41.759><c> the</c><00:04:42.000><c> mode</c><00:04:42.639><c> to</c><00:04:42.800><c> supervisor</c>

00:04:43.430 --> 00:04:43.440 align:start position:0%
we need to switch the mode to supervisor
 

00:04:43.440 --> 00:04:45.670 align:start position:0%
we need to switch the mode to supervisor
mode

00:04:45.670 --> 00:04:45.680 align:start position:0%
mode
 

00:04:45.680 --> 00:04:46.790 align:start position:0%
mode
because<00:04:45.919><c> we</c><00:04:46.000><c> need</c><00:04:46.160><c> to</c><00:04:46.240><c> use</c><00:04:46.400><c> various</c>

00:04:46.790 --> 00:04:46.800 align:start position:0%
because we need to use various
 

00:04:46.800 --> 00:04:49.350 align:start position:0%
because we need to use various
privileges<00:04:47.280><c> in</c><00:04:47.360><c> the</c><00:04:47.440><c> kernel</c>

00:04:49.350 --> 00:04:49.360 align:start position:0%
privileges in the kernel
 

00:04:49.360 --> 00:04:52.550 align:start position:0%
privileges in the kernel
this<00:04:50.880><c> page</c><00:04:51.440><c> table</c><00:04:51.759><c> pointer</c><00:04:52.160><c> is</c><00:04:52.240><c> currently</c>

00:04:52.550 --> 00:04:52.560 align:start position:0%
this page table pointer is currently
 

00:04:52.560 --> 00:04:54.390 align:start position:0%
this page table pointer is currently
pointing<00:04:52.880><c> towards</c><00:04:53.120><c> the</c><00:04:53.280><c> user</c><00:04:53.600><c> page</c><00:04:53.919><c> table</c>

00:04:54.390 --> 00:04:54.400 align:start position:0%
pointing towards the user page table
 

00:04:54.400 --> 00:04:57.430 align:start position:0%
pointing towards the user page table
which<00:04:54.720><c> only</c><00:04:54.960><c> contains</c><00:04:56.639><c> just</c><00:04:56.800><c> the</c><00:04:56.960><c> mappings</c>

00:04:57.430 --> 00:04:57.440 align:start position:0%
which only contains just the mappings
 

00:04:57.440 --> 00:04:59.430 align:start position:0%
which only contains just the mappings
that<00:04:57.600><c> user</c><00:04:57.919><c> programs</c><00:04:58.479><c> need</c>

00:04:59.430 --> 00:04:59.440 align:start position:0%
that user programs need
 

00:04:59.440 --> 00:05:01.189 align:start position:0%
that user programs need
plus<00:04:59.600><c> one</c><00:04:59.840><c> or</c><00:04:59.919><c> two</c><00:05:00.080><c> more</c><00:05:00.240><c> as</c><00:05:00.400><c> we'll</c><00:05:00.560><c> see</c><00:05:00.720><c> but</c>

00:05:01.189 --> 00:05:01.199 align:start position:0%
plus one or two more as we'll see but
 

00:05:01.199 --> 00:05:03.110 align:start position:0%
plus one or two more as we'll see but
the<00:05:01.360><c> user</c><00:05:01.600><c> page</c><00:05:01.840><c> table</c><00:05:02.080><c> does</c><00:05:02.240><c> not</c><00:05:02.400><c> contain</c><00:05:02.880><c> the</c>

00:05:03.110 --> 00:05:03.120 align:start position:0%
the user page table does not contain the
 

00:05:03.120 --> 00:05:05.189 align:start position:0%
the user page table does not contain the
mappings<00:05:03.600><c> for</c><00:05:03.759><c> the</c><00:05:03.840><c> bulk</c><00:05:04.080><c> of</c><00:05:04.160><c> the</c><00:05:04.320><c> kernel</c><00:05:04.639><c> data</c>

00:05:05.189 --> 00:05:05.199 align:start position:0%
mappings for the bulk of the kernel data
 

00:05:05.199 --> 00:05:06.950 align:start position:0%
mappings for the bulk of the kernel data
so<00:05:05.360><c> we</c><00:05:05.440><c> need</c><00:05:05.600><c> to</c><00:05:05.759><c> switch</c><00:05:06.000><c> page</c><00:05:06.320><c> tables</c><00:05:06.639><c> before</c>

00:05:06.950 --> 00:05:06.960 align:start position:0%
so we need to switch page tables before
 

00:05:06.960 --> 00:05:10.469 align:start position:0%
so we need to switch page tables before
we<00:05:07.120><c> can</c><00:05:07.680><c> run</c><00:05:07.919><c> most</c><00:05:08.160><c> kernel</c><00:05:08.479><c> code</c>

00:05:10.469 --> 00:05:10.479 align:start position:0%
we can run most kernel code
 

00:05:10.479 --> 00:05:12.230 align:start position:0%
we can run most kernel code
we<00:05:10.639><c> need</c><00:05:10.800><c> to</c><00:05:10.880><c> switch</c><00:05:11.199><c> the</c><00:05:11.440><c> stack</c><00:05:11.759><c> pointer</c><00:05:12.160><c> to</c>

00:05:12.230 --> 00:05:12.240 align:start position:0%
we need to switch the stack pointer to
 

00:05:12.240 --> 00:05:13.830 align:start position:0%
we need to switch the stack pointer to
point<00:05:12.400><c> to</c><00:05:12.479><c> a</c><00:05:12.639><c> stack</c><00:05:12.960><c> that's</c><00:05:13.280><c> in</c><00:05:13.440><c> the</c><00:05:13.520><c> kernel</c>

00:05:13.830 --> 00:05:13.840 align:start position:0%
point to a stack that's in the kernel
 

00:05:13.840 --> 00:05:14.710 align:start position:0%
point to a stack that's in the kernel
somewhere<00:05:14.240><c> because</c>

00:05:14.710 --> 00:05:14.720 align:start position:0%
somewhere because
 

00:05:14.720 --> 00:05:19.749 align:start position:0%
somewhere because
we<00:05:14.880><c> need</c><00:05:15.039><c> a</c><00:05:15.120><c> stack</c><00:05:15.440><c> to</c><00:05:15.600><c> call</c><00:05:16.240><c> c</c><00:05:16.479><c> functions</c><00:05:16.960><c> on</c>

00:05:19.749 --> 00:05:19.759 align:start position:0%
 
 

00:05:19.759 --> 00:05:21.909 align:start position:0%
 
and<00:05:19.919><c> finally</c><00:05:20.240><c> we</c><00:05:20.320><c> need</c><00:05:20.479><c> to</c><00:05:20.720><c> jump</c><00:05:21.120><c> into</c><00:05:21.680><c> once</c>

00:05:21.909 --> 00:05:21.919 align:start position:0%
and finally we need to jump into once
 

00:05:21.919 --> 00:05:23.430 align:start position:0%
and finally we need to jump into once
we've<00:05:22.080><c> set</c><00:05:22.240><c> all</c><00:05:22.320><c> this</c><00:05:22.560><c> up</c><00:05:22.720><c> and</c><00:05:22.800><c> switched</c><00:05:23.199><c> all</c>

00:05:23.430 --> 00:05:23.440 align:start position:0%
we've set all this up and switched all
 

00:05:23.440 --> 00:05:25.510 align:start position:0%
we've set all this up and switched all
this<00:05:23.919><c> all</c><00:05:24.000><c> these</c><00:05:24.240><c> resources</c><00:05:24.800><c> to</c><00:05:24.960><c> be</c>

00:05:25.510 --> 00:05:25.520 align:start position:0%
this all these resources to be
 

00:05:25.520 --> 00:05:27.909 align:start position:0%
this all these resources to be
appropriate<00:05:26.160><c> for</c><00:05:26.479><c> use</c><00:05:26.720><c> in</c><00:05:26.800><c> the</c><00:05:26.960><c> kernel</c><00:05:27.759><c> we</c>

00:05:27.909 --> 00:05:27.919 align:start position:0%
appropriate for use in the kernel we
 

00:05:27.919 --> 00:05:28.790 align:start position:0%
appropriate for use in the kernel we
need<00:05:28.080><c> to</c><00:05:28.240><c> jump</c><00:05:28.479><c> to</c>

00:05:28.790 --> 00:05:28.800 align:start position:0%
need to jump to
 

00:05:28.800 --> 00:05:32.550 align:start position:0%
need to jump to
kernel<00:05:29.120><c> c</c><00:05:29.360><c> code</c><00:05:29.600><c> and</c><00:05:30.000><c> once</c><00:05:30.240><c> we're</c><00:05:30.400><c> in</c><00:05:30.800><c> c</c><00:05:31.120><c> code</c>

00:05:32.550 --> 00:05:32.560 align:start position:0%
kernel c code and once we're in c code
 

00:05:32.560 --> 00:05:36.230 align:start position:0%
kernel c code and once we're in c code
life<00:05:32.800><c> is</c><00:05:32.960><c> much</c><00:05:33.199><c> more</c><00:05:35.440><c> sort</c><00:05:35.600><c> of</c><00:05:35.680><c> business</c><00:05:36.080><c> as</c>

00:05:36.230 --> 00:05:36.240 align:start position:0%
life is much more sort of business as
 

00:05:36.240 --> 00:05:37.270 align:start position:0%
life is much more sort of business as
usual<00:05:36.560><c> we're</c><00:05:36.720><c> just</c><00:05:36.880><c> running</c>

00:05:37.270 --> 00:05:37.280 align:start position:0%
usual we're just running
 

00:05:37.280 --> 00:05:39.830 align:start position:0%
usual we're just running
a<00:05:37.360><c> c</c><00:05:37.520><c> program</c><00:05:37.840><c> in</c><00:05:38.000><c> this</c><00:05:38.160><c> kernel</c><00:05:38.960><c> um</c><00:05:39.199><c> and</c><00:05:39.520><c> so</c><00:05:39.680><c> for</c>

00:05:39.830 --> 00:05:39.840 align:start position:0%
a c program in this kernel um and so for
 

00:05:39.840 --> 00:05:40.870 align:start position:0%
a c program in this kernel um and so for
today<00:05:40.160><c> at</c><00:05:40.240><c> least</c><00:05:40.479><c> we'll</c>

00:05:40.870 --> 00:05:40.880 align:start position:0%
today at least we'll
 

00:05:40.880 --> 00:05:43.510 align:start position:0%
today at least we'll
we'll<00:05:41.120><c> talk</c><00:05:41.280><c> about</c><00:05:41.440><c> what</c><00:05:41.600><c> the</c><00:05:41.759><c> kernel</c><00:05:42.720><c> does</c><00:05:43.440><c> in</c>

00:05:43.510 --> 00:05:43.520 align:start position:0%
we'll talk about what the kernel does in
 

00:05:43.520 --> 00:05:44.629 align:start position:0%
we'll talk about what the kernel does in
the<00:05:43.600><c> c</c><00:05:43.759><c> code</c><00:05:44.000><c> later</c>

00:05:44.629 --> 00:05:44.639 align:start position:0%
the c code later
 

00:05:44.639 --> 00:05:46.710 align:start position:0%
the c code later
but<00:05:44.800><c> today</c><00:05:45.759><c> the</c><00:05:45.919><c> discussion</c><00:05:46.320><c> is</c><00:05:46.400><c> really</c><00:05:46.560><c> how</c>

00:05:46.710 --> 00:05:46.720 align:start position:0%
but today the discussion is really how
 

00:05:46.720 --> 00:05:48.390 align:start position:0%
but today the discussion is really how
to<00:05:46.880><c> get</c><00:05:46.960><c> from</c><00:05:47.120><c> user</c><00:05:47.360><c> space</c><00:05:47.759><c> into</c><00:05:47.919><c> the</c><00:05:48.000><c> kernel</c>

00:05:48.390 --> 00:05:48.400 align:start position:0%
to get from user space into the kernel
 

00:05:48.400 --> 00:05:51.029 align:start position:0%
to get from user space into the kernel
into<00:05:48.560><c> a</c><00:05:48.639><c> position</c><00:05:49.039><c> where</c><00:05:49.280><c> we</c><00:05:49.360><c> can</c><00:05:49.600><c> run</c>

00:05:51.029 --> 00:05:51.039 align:start position:0%
into a position where we can run
 

00:05:51.039 --> 00:05:54.469 align:start position:0%
into a position where we can run
c<00:05:51.280><c> code</c><00:05:52.000><c> in</c><00:05:52.080><c> the</c><00:05:52.240><c> kernel</c><00:05:53.840><c> there's</c><00:05:54.080><c> a</c><00:05:54.160><c> couple</c><00:05:54.320><c> of</c>

00:05:54.469 --> 00:05:54.479 align:start position:0%
c code in the kernel there's a couple of
 

00:05:54.479 --> 00:05:56.150 align:start position:0%
c code in the kernel there's a couple of
high<00:05:54.639><c> level</c><00:05:54.960><c> goals</c><00:05:55.280><c> that</c><00:05:55.360><c> can</c><00:05:55.600><c> strain</c>

00:05:56.150 --> 00:05:56.160 align:start position:0%
high level goals that can strain
 

00:05:56.160 --> 00:05:59.430 align:start position:0%
high level goals that can strain
our<00:05:56.400><c> design</c><00:05:56.880><c> options</c><00:05:57.280><c> for</c><00:05:57.440><c> this</c><00:05:58.560><c> one</c><00:05:58.800><c> is</c><00:05:58.960><c> that</c>

00:05:59.430 --> 00:05:59.440 align:start position:0%
our design options for this one is that
 

00:05:59.440 --> 00:06:01.270 align:start position:0%
our design options for this one is that
for<00:05:59.600><c> security</c><00:06:00.160><c> and</c><00:06:00.319><c> isolation</c><00:06:00.800><c> we</c><00:06:00.960><c> really</c>

00:06:01.270 --> 00:06:01.280 align:start position:0%
for security and isolation we really
 

00:06:01.280 --> 00:06:02.950 align:start position:0%
for security and isolation we really
don't<00:06:01.440><c> want</c><00:06:01.680><c> to</c><00:06:01.759><c> let</c><00:06:02.080><c> user</c><00:06:02.479><c> code</c>

00:06:02.950 --> 00:06:02.960 align:start position:0%
don't want to let user code
 

00:06:02.960 --> 00:06:05.430 align:start position:0%
don't want to let user code
interfere<00:06:03.759><c> with</c><00:06:04.319><c> this</c><00:06:04.720><c> user</c><00:06:05.120><c> kernel</c>

00:06:05.430 --> 00:06:05.440 align:start position:0%
interfere with this user kernel
 

00:06:05.440 --> 00:06:06.070 align:start position:0%
interfere with this user kernel
transition

00:06:06.070 --> 00:06:06.080 align:start position:0%
transition
 

00:06:06.080 --> 00:06:07.510 align:start position:0%
transition
in<00:06:06.160><c> a</c><00:06:06.240><c> way</c><00:06:06.400><c> that</c><00:06:06.720><c> could</c><00:06:06.880><c> be</c><00:06:06.960><c> damaging</c><00:06:07.440><c> to</c>

00:06:07.510 --> 00:06:07.520 align:start position:0%
in a way that could be damaging to
 

00:06:07.520 --> 00:06:10.070 align:start position:0%
in a way that could be damaging to
security<00:06:08.319><c> and</c><00:06:08.400><c> so</c><00:06:08.560><c> that</c><00:06:08.720><c> means</c><00:06:08.960><c> that</c>

00:06:10.070 --> 00:06:10.080 align:start position:0%
security and so that means that
 

00:06:10.080 --> 00:06:12.870 align:start position:0%
security and so that means that
the<00:06:10.319><c> sort</c><00:06:10.479><c> of</c><00:06:10.639><c> hardware</c><00:06:11.280><c> and</c><00:06:11.919><c> kernel</c>

00:06:12.870 --> 00:06:12.880 align:start position:0%
the sort of hardware and kernel
 

00:06:12.880 --> 00:06:14.790 align:start position:0%
the sort of hardware and kernel
mechanisms<00:06:13.440><c> that</c><00:06:13.600><c> are</c><00:06:13.680><c> involved</c><00:06:14.000><c> in</c><00:06:14.080><c> traps</c>

00:06:14.790 --> 00:06:14.800 align:start position:0%
mechanisms that are involved in traps
 

00:06:14.800 --> 00:06:17.110 align:start position:0%
mechanisms that are involved in traps
really<00:06:15.120><c> can't</c><00:06:15.440><c> count</c><00:06:15.759><c> on</c><00:06:16.160><c> anything</c><00:06:16.560><c> from</c><00:06:16.800><c> user</c>

00:06:17.110 --> 00:06:17.120 align:start position:0%
really can't count on anything from user
 

00:06:17.120 --> 00:06:17.830 align:start position:0%
really can't count on anything from user
space

00:06:17.830 --> 00:06:17.840 align:start position:0%
space
 

00:06:17.840 --> 00:06:19.590 align:start position:0%
space
you<00:06:17.919><c> know</c><00:06:18.240><c> we</c><00:06:18.400><c> can't</c><00:06:18.560><c> assume</c><00:06:19.039><c> anything</c><00:06:19.360><c> about</c>

00:06:19.590 --> 00:06:19.600 align:start position:0%
you know we can't assume anything about
 

00:06:19.600 --> 00:06:20.950 align:start position:0%
you know we can't assume anything about
these<00:06:19.840><c> registers</c><00:06:20.400><c> they</c><00:06:20.479><c> could</c><00:06:20.639><c> be</c><00:06:20.800><c> just</c>

00:06:20.950 --> 00:06:20.960 align:start position:0%
these registers they could be just
 

00:06:20.960 --> 00:06:23.430 align:start position:0%
these registers they could be just
filled<00:06:21.280><c> with</c><00:06:21.440><c> terribly</c><00:06:21.840><c> malicious</c><00:06:22.319><c> values</c>

00:06:23.430 --> 00:06:23.440 align:start position:0%
filled with terribly malicious values
 

00:06:23.440 --> 00:06:26.150 align:start position:0%
filled with terribly malicious values
um<00:06:24.160><c> so</c><00:06:24.400><c> basically</c><00:06:24.800><c> the</c><00:06:25.120><c> xp6</c><00:06:25.600><c> scrap</c><00:06:25.759><c> handler</c>

00:06:26.150 --> 00:06:26.160 align:start position:0%
um so basically the xp6 scrap handler
 

00:06:26.160 --> 00:06:27.430 align:start position:0%
um so basically the xp6 scrap handler
doesn't<00:06:26.319><c> really</c><00:06:26.479><c> even</c><00:06:26.720><c> look</c><00:06:26.880><c> at</c><00:06:27.039><c> these</c>

00:06:27.430 --> 00:06:27.440 align:start position:0%
doesn't really even look at these
 

00:06:27.440 --> 00:06:31.189 align:start position:0%
doesn't really even look at these
registers<00:06:27.919><c> it</c><00:06:28.080><c> just</c><00:06:28.240><c> saves</c><00:06:28.479><c> them</c><00:06:28.639><c> away</c><00:06:29.680><c> um</c>

00:06:31.189 --> 00:06:31.199 align:start position:0%
registers it just saves them away um
 

00:06:31.199 --> 00:06:33.430 align:start position:0%
registers it just saves them away um
so<00:06:31.440><c> okay</c><00:06:31.680><c> so</c><00:06:32.479><c> we're</c><00:06:32.639><c> going</c><00:06:32.720><c> to</c><00:06:33.039><c> want</c><00:06:33.199><c> to</c><00:06:33.280><c> be</c>

00:06:33.430 --> 00:06:33.440 align:start position:0%
so okay so we're going to want to be
 

00:06:33.440 --> 00:06:34.230 align:start position:0%
so okay so we're going to want to be
careful

00:06:34.230 --> 00:06:34.240 align:start position:0%
careful
 

00:06:34.240 --> 00:06:35.909 align:start position:0%
careful
to<00:06:34.319><c> preserve</c><00:06:34.720><c> isolation</c><00:06:35.280><c> during</c><00:06:35.520><c> this</c><00:06:35.680><c> trap</c>

00:06:35.909 --> 00:06:35.919 align:start position:0%
to preserve isolation during this trap
 

00:06:35.919 --> 00:06:37.270 align:start position:0%
to preserve isolation during this trap
mechanism<00:06:36.400><c> against</c>

00:06:37.270 --> 00:06:37.280 align:start position:0%
mechanism against
 

00:06:37.280 --> 00:06:40.150 align:start position:0%
mechanism against
intentionally<00:06:38.319><c> malicious</c><00:06:38.880><c> user</c><00:06:39.199><c> code</c><00:06:40.000><c> and</c>

00:06:40.150 --> 00:06:40.160 align:start position:0%
intentionally malicious user code and
 

00:06:40.160 --> 00:06:41.430 align:start position:0%
intentionally malicious user code and
the<00:06:40.240><c> other</c><00:06:40.400><c> thing</c><00:06:40.560><c> that's</c><00:06:40.800><c> important</c>

00:06:41.430 --> 00:06:41.440 align:start position:0%
the other thing that's important
 

00:06:41.440 --> 00:06:43.510 align:start position:0%
the other thing that's important
is<00:06:41.520><c> that</c><00:06:42.319><c> we</c><00:06:42.479><c> want</c><00:06:42.560><c> to</c><00:06:42.639><c> be</c><00:06:42.800><c> transparent</c><00:06:43.360><c> to</c>

00:06:43.510 --> 00:06:43.520 align:start position:0%
is that we want to be transparent to
 

00:06:43.520 --> 00:06:45.510 align:start position:0%
is that we want to be transparent to
user<00:06:43.759><c> code</c><00:06:44.080><c> we'd</c><00:06:44.240><c> like</c><00:06:44.400><c> to</c><00:06:44.479><c> be</c><00:06:44.639><c> able</c><00:06:44.800><c> to</c>

00:06:45.510 --> 00:06:45.520 align:start position:0%
user code we'd like to be able to
 

00:06:45.520 --> 00:06:47.110 align:start position:0%
user code we'd like to be able to
take<00:06:45.759><c> the</c><00:06:45.840><c> trap</c><00:06:46.240><c> and</c><00:06:46.400><c> do</c><00:06:46.560><c> our</c><00:06:46.639><c> business</c><00:06:46.960><c> in</c><00:06:47.039><c> the</c>

00:06:47.110 --> 00:06:47.120 align:start position:0%
take the trap and do our business in the
 

00:06:47.120 --> 00:06:49.189 align:start position:0%
take the trap and do our business in the
kernel<00:06:47.520><c> and</c><00:06:47.919><c> resume</c><00:06:48.319><c> the</c><00:06:48.400><c> user</c><00:06:48.639><c> code</c><00:06:48.880><c> without</c>

00:06:49.189 --> 00:06:49.199 align:start position:0%
kernel and resume the user code without
 

00:06:49.199 --> 00:06:50.790 align:start position:0%
kernel and resume the user code without
it<00:06:49.360><c> ever</c><00:06:49.520><c> having</c><00:06:49.680><c> to</c><00:06:49.840><c> notice</c><00:06:50.240><c> that</c><00:06:50.400><c> anything</c>

00:06:50.790 --> 00:06:50.800 align:start position:0%
it ever having to notice that anything
 

00:06:50.800 --> 00:06:51.990 align:start position:0%
it ever having to notice that anything
funny<00:06:51.120><c> happened</c>

00:06:51.990 --> 00:06:52.000 align:start position:0%
funny happened
 

00:06:52.000 --> 00:06:53.189 align:start position:0%
funny happened
and<00:06:52.080><c> that's</c><00:06:52.240><c> just</c><00:06:52.400><c> to</c><00:06:52.479><c> make</c><00:06:52.639><c> it</c><00:06:52.800><c> easier</c><00:06:53.039><c> to</c>

00:06:53.189 --> 00:06:53.199 align:start position:0%
and that's just to make it easier to
 

00:06:53.199 --> 00:06:56.710 align:start position:0%
and that's just to make it easier to
write<00:06:53.360><c> user</c><00:06:53.680><c> code</c>

00:06:56.710 --> 00:06:56.720 align:start position:0%
 
 

00:06:56.720 --> 00:07:00.309 align:start position:0%
 
and<00:06:57.520><c> something</c><00:06:57.840><c> to</c><00:06:58.080><c> note</c><00:06:59.520><c> we</c><00:06:59.680><c> care</c><00:06:59.919><c> about</c>

00:07:00.309 --> 00:07:00.319 align:start position:0%
and something to note we care about
 

00:07:00.319 --> 00:07:02.150 align:start position:0%
and something to note we care about
isolation<00:07:00.960><c> security</c><00:07:01.440><c> here</c><00:07:01.599><c> today</c><00:07:01.840><c> we're</c><00:07:02.000><c> just</c>

00:07:02.150 --> 00:07:02.160 align:start position:0%
isolation security here today we're just
 

00:07:02.160 --> 00:07:04.790 align:start position:0%
isolation security here today we're just
going<00:07:02.240><c> to</c><00:07:02.319><c> talk</c><00:07:02.560><c> about</c><00:07:02.800><c> the</c>

00:07:04.790 --> 00:07:04.800 align:start position:0%
going to talk about the
 

00:07:04.800 --> 00:07:06.309 align:start position:0%
going to talk about the
sort<00:07:04.880><c> of</c><00:07:05.039><c> aspect</c><00:07:05.440><c> of</c><00:07:05.520><c> security</c><00:07:05.919><c> that</c><00:07:06.000><c> involves</c>

00:07:06.309 --> 00:07:06.319 align:start position:0%
sort of aspect of security that involves
 

00:07:06.319 --> 00:07:08.309 align:start position:0%
sort of aspect of security that involves
getting<00:07:06.560><c> into</c><00:07:06.800><c> the</c><00:07:06.880><c> kernel</c><00:07:07.440><c> but</c><00:07:07.599><c> of</c><00:07:07.680><c> course</c>

00:07:08.309 --> 00:07:08.319 align:start position:0%
getting into the kernel but of course
 

00:07:08.319 --> 00:07:09.909 align:start position:0%
getting into the kernel but of course
the<00:07:08.560><c> system</c><00:07:08.800><c> called</c><00:07:09.039><c> implementations</c><00:07:09.840><c> you</c>

00:07:09.909 --> 00:07:09.919 align:start position:0%
the system called implementations you
 

00:07:09.919 --> 00:07:11.909 align:start position:0%
the system called implementations you
know<00:07:10.080><c> the</c><00:07:10.160><c> actual</c><00:07:10.720><c> right</c><00:07:11.120><c> implementation</c><00:07:11.759><c> in</c>

00:07:11.909 --> 00:07:11.919 align:start position:0%
know the actual right implementation in
 

00:07:11.919 --> 00:07:12.950 align:start position:0%
know the actual right implementation in
the<00:07:12.000><c> kernel</c>

00:07:12.950 --> 00:07:12.960 align:start position:0%
the kernel
 

00:07:12.960 --> 00:07:14.710 align:start position:0%
the kernel
also<00:07:13.360><c> everything</c><00:07:13.680><c> in</c><00:07:13.759><c> the</c><00:07:13.840><c> kernel</c><00:07:14.160><c> has</c><00:07:14.400><c> to</c><00:07:14.479><c> be</c>

00:07:14.710 --> 00:07:14.720 align:start position:0%
also everything in the kernel has to be
 

00:07:14.720 --> 00:07:16.390 align:start position:0%
also everything in the kernel has to be
careful<00:07:15.199><c> has</c><00:07:15.360><c> to</c><00:07:15.440><c> be</c><00:07:15.520><c> written</c><00:07:15.840><c> carefully</c><00:07:16.319><c> and</c>

00:07:16.390 --> 00:07:16.400 align:start position:0%
careful has to be written carefully and
 

00:07:16.400 --> 00:07:18.390 align:start position:0%
careful has to be written carefully and
securely<00:07:16.960><c> also</c>

00:07:18.390 --> 00:07:18.400 align:start position:0%
securely also
 

00:07:18.400 --> 00:07:21.189 align:start position:0%
securely also
so<00:07:19.199><c> even</c><00:07:19.520><c> if</c><00:07:19.599><c> this</c><00:07:19.919><c> transition</c><00:07:20.880><c> into</c><00:07:21.120><c> the</c>

00:07:21.189 --> 00:07:21.199 align:start position:0%
so even if this transition into the
 

00:07:21.199 --> 00:07:21.830 align:start position:0%
so even if this transition into the
kernel<00:07:21.599><c> is</c>

00:07:21.830 --> 00:07:21.840 align:start position:0%
kernel is
 

00:07:21.840 --> 00:07:23.589 align:start position:0%
kernel is
perfectly<00:07:22.240><c> secure</c><00:07:22.960><c> the</c><00:07:23.039><c> whole</c><00:07:23.199><c> rest</c><00:07:23.440><c> of</c><00:07:23.520><c> the</c>

00:07:23.589 --> 00:07:23.599 align:start position:0%
perfectly secure the whole rest of the
 

00:07:23.599 --> 00:07:24.870 align:start position:0%
perfectly secure the whole rest of the
kernel<00:07:24.000><c> has</c><00:07:24.160><c> to</c><00:07:24.319><c> be</c>

00:07:24.870 --> 00:07:24.880 align:start position:0%
kernel has to be
 

00:07:24.880 --> 00:07:26.790 align:start position:0%
kernel has to be
written<00:07:25.199><c> securely</c><00:07:25.759><c> and</c><00:07:25.919><c> sort</c><00:07:26.080><c> of</c><00:07:26.240><c> mindful</c>

00:07:26.790 --> 00:07:26.800 align:start position:0%
written securely and sort of mindful
 

00:07:26.800 --> 00:07:31.909 align:start position:0%
written securely and sort of mindful
that<00:07:27.360><c> user</c><00:07:27.680><c> code</c><00:07:27.919><c> may</c><00:07:28.080><c> be</c><00:07:28.240><c> trying</c><00:07:28.479><c> to</c><00:07:28.560><c> trick</c><00:07:28.840><c> it</c>

00:07:31.909 --> 00:07:31.919 align:start position:0%
 
 

00:07:31.919 --> 00:07:33.830 align:start position:0%
 
a<00:07:32.400><c> particularly</c><00:07:33.039><c> important</c><00:07:33.360><c> thing</c><00:07:33.520><c> i</c><00:07:33.599><c> want</c><00:07:33.759><c> to</c>

00:07:33.830 --> 00:07:33.840 align:start position:0%
a particularly important thing i want to
 

00:07:33.840 --> 00:07:36.150 align:start position:0%
a particularly important thing i want to
talk<00:07:34.000><c> about</c><00:07:34.240><c> is</c><00:07:34.479><c> what</c><00:07:34.639><c> it</c><00:07:34.800><c> is</c><00:07:34.960><c> that</c><00:07:35.199><c> the</c><00:07:35.440><c> mode</c>

00:07:36.150 --> 00:07:36.160 align:start position:0%
talk about is what it is that the mode
 

00:07:36.160 --> 00:07:39.189 align:start position:0%
talk about is what it is that the mode
flag<00:07:37.039><c> controls</c>

00:07:39.189 --> 00:07:39.199 align:start position:0%
flag controls
 

00:07:39.199 --> 00:07:41.270 align:start position:0%
flag controls
this<00:07:39.440><c> mode</c><00:07:39.759><c> is</c><00:07:39.919><c> either</c><00:07:40.319><c> user</c><00:07:40.639><c> or</c><00:07:40.720><c> supervisor</c>

00:07:41.270 --> 00:07:41.280 align:start position:0%
this mode is either user or supervisor
 

00:07:41.280 --> 00:07:42.710 align:start position:0%
this mode is either user or supervisor
of<00:07:41.360><c> course</c><00:07:41.599><c> it's</c><00:07:41.919><c> user</c>

00:07:42.710 --> 00:07:42.720 align:start position:0%
of course it's user
 

00:07:42.720 --> 00:07:44.790 align:start position:0%
of course it's user
when<00:07:42.880><c> we're</c><00:07:43.039><c> up</c><00:07:43.199><c> in</c><00:07:43.280><c> user</c><00:07:43.520><c> space</c><00:07:43.919><c> and</c><00:07:44.479><c> the</c><00:07:44.639><c> mode</c>

00:07:44.790 --> 00:07:44.800 align:start position:0%
when we're up in user space and the mode
 

00:07:44.800 --> 00:07:46.230 align:start position:0%
when we're up in user space and the mode
flag<00:07:45.039><c> is</c><00:07:45.120><c> set</c><00:07:45.280><c> to</c><00:07:45.440><c> supervisor</c><00:07:45.919><c> when</c><00:07:46.080><c> we're</c>

00:07:46.230 --> 00:07:46.240 align:start position:0%
flag is set to supervisor when we're
 

00:07:46.240 --> 00:07:47.589 align:start position:0%
flag is set to supervisor when we're
executing<00:07:46.639><c> in</c><00:07:46.800><c> the</c><00:07:46.879><c> kernel</c>

00:07:47.589 --> 00:07:47.599 align:start position:0%
executing in the kernel
 

00:07:47.599 --> 00:07:50.710 align:start position:0%
executing in the kernel
but<00:07:47.759><c> it's</c><00:07:47.919><c> important</c><00:07:48.240><c> to</c><00:07:48.319><c> know</c><00:07:48.479><c> exactly</c><00:07:50.080><c> what</c>

00:07:50.710 --> 00:07:50.720 align:start position:0%
but it's important to know exactly what
 

00:07:50.720 --> 00:07:53.670 align:start position:0%
but it's important to know exactly what
privileges<00:07:51.759><c> we</c><00:07:52.000><c> gain</c><00:07:52.639><c> by</c><00:07:52.879><c> changing</c><00:07:53.199><c> the</c><00:07:53.360><c> mode</c>

00:07:53.670 --> 00:07:53.680 align:start position:0%
privileges we gain by changing the mode
 

00:07:53.680 --> 00:07:55.189 align:start position:0%
privileges we gain by changing the mode
from<00:07:53.840><c> user</c><00:07:54.160><c> to</c><00:07:54.319><c> supervisor</c>

00:07:55.189 --> 00:07:55.199 align:start position:0%
from user to supervisor
 

00:07:55.199 --> 00:07:58.309 align:start position:0%
from user to supervisor
and<00:07:55.280><c> it</c><00:07:55.360><c> turns</c><00:07:55.680><c> out</c><00:07:57.280><c> these</c><00:07:57.520><c> extra</c><00:07:57.840><c> privileges</c>

00:07:58.309 --> 00:07:58.319 align:start position:0%
and it turns out these extra privileges
 

00:07:58.319 --> 00:07:59.029 align:start position:0%
and it turns out these extra privileges
are

00:07:59.029 --> 00:07:59.039 align:start position:0%
are
 

00:07:59.039 --> 00:08:01.830 align:start position:0%
are
fairly<00:07:59.680><c> restrictive</c><00:08:01.039><c> that</c><00:08:01.280><c> is</c><00:08:01.360><c> what</c><00:08:01.520><c> you</c><00:08:01.680><c> can</c>

00:08:01.830 --> 00:08:01.840 align:start position:0%
fairly restrictive that is what you can
 

00:08:01.840 --> 00:08:03.749 align:start position:0%
fairly restrictive that is what you can
do<00:08:02.080><c> in</c><00:08:02.240><c> supervisor</c><00:08:02.879><c> mode</c><00:08:03.120><c> that</c><00:08:03.199><c> you</c><00:08:03.440><c> couldn't</c>

00:08:03.749 --> 00:08:03.759 align:start position:0%
do in supervisor mode that you couldn't
 

00:08:03.759 --> 00:08:05.830 align:start position:0%
do in supervisor mode that you couldn't
do<00:08:04.000><c> in</c><00:08:04.080><c> user</c><00:08:04.400><c> mode</c>

00:08:05.830 --> 00:08:05.840 align:start position:0%
do in user mode
 

00:08:05.840 --> 00:08:09.830 align:start position:0%
do in user mode
is<00:08:06.000><c> not</c><00:08:06.240><c> maybe</c><00:08:06.639><c> as</c>

00:08:09.830 --> 00:08:09.840 align:start position:0%
 
 

00:08:09.840 --> 00:08:11.189 align:start position:0%
 
privileged<00:08:10.240><c> as</c><00:08:10.319><c> you</c><00:08:10.400><c> might</c><00:08:10.560><c> think</c><00:08:10.800><c> so</c><00:08:10.960><c> this</c><00:08:11.120><c> is</c>

00:08:11.189 --> 00:08:11.199 align:start position:0%
privileged as you might think so this is
 

00:08:11.199 --> 00:08:13.830 align:start position:0%
privileged as you might think so this is
supervisor<00:08:11.840><c> mode</c><00:08:12.800><c> like</c><00:08:13.120><c> exactly</c><00:08:13.520><c> what</c><00:08:13.680><c> it</c>

00:08:13.830 --> 00:08:13.840 align:start position:0%
supervisor mode like exactly what it
 

00:08:13.840 --> 00:08:17.110 align:start position:0%
supervisor mode like exactly what it
controls

00:08:17.110 --> 00:08:17.120 align:start position:0%
 
 

00:08:17.120 --> 00:08:19.909 align:start position:0%
 
one<00:08:17.360><c> thing</c><00:08:17.599><c> it</c><00:08:17.680><c> does</c><00:08:18.080><c> is</c><00:08:18.960><c> you</c><00:08:19.120><c> can</c><00:08:19.280><c> now</c><00:08:19.599><c> read</c>

00:08:19.909 --> 00:08:19.919 align:start position:0%
one thing it does is you can now read
 

00:08:19.919 --> 00:08:20.629 align:start position:0%
one thing it does is you can now read
and<00:08:20.080><c> write</c>

00:08:20.629 --> 00:08:20.639 align:start position:0%
and write
 

00:08:20.639 --> 00:08:25.029 align:start position:0%
and write
the<00:08:20.800><c> control</c><00:08:21.199><c> registers</c><00:08:23.039><c> and</c>

00:08:25.029 --> 00:08:25.039 align:start position:0%
the control registers and
 

00:08:25.039 --> 00:08:26.710 align:start position:0%
the control registers and
that<00:08:25.199><c> is</c><00:08:25.360><c> if</c><00:08:25.360><c> if</c><00:08:25.680><c> you're</c><00:08:25.840><c> in</c><00:08:25.919><c> supervisor</c><00:08:26.479><c> mode</c>

00:08:26.710 --> 00:08:26.720 align:start position:0%
that is if if you're in supervisor mode
 

00:08:26.720 --> 00:08:29.029 align:start position:0%
that is if if you're in supervisor mode
you<00:08:26.800><c> can</c><00:08:26.960><c> read</c><00:08:27.120><c> and</c><00:08:27.199><c> write</c><00:08:27.440><c> sat</c><00:08:27.840><c> p</c>

00:08:29.029 --> 00:08:29.039 align:start position:0%
you can read and write sat p
 

00:08:29.039 --> 00:08:31.270 align:start position:0%
you can read and write sat p
uh<00:08:29.280><c> the</c><00:08:29.680><c> page</c><00:08:29.919><c> table</c><00:08:30.160><c> pointer</c><00:08:30.479><c> this</c><00:08:30.720><c> st</c><00:08:31.039><c> vac</c>

00:08:31.270 --> 00:08:31.280 align:start position:0%
uh the page table pointer this st vac
 

00:08:31.280 --> 00:08:32.870 align:start position:0%
uh the page table pointer this st vac
pointer<00:08:31.599><c> which</c><00:08:31.840><c> controls</c>

00:08:32.870 --> 00:08:32.880 align:start position:0%
pointer which controls
 

00:08:32.880 --> 00:08:35.990 align:start position:0%
pointer which controls
where<00:08:33.200><c> traps</c><00:08:33.519><c> go</c><00:08:33.760><c> in</c><00:08:33.839><c> the</c><00:08:33.919><c> kernel</c><00:08:34.719><c> um</c>

00:08:35.990 --> 00:08:36.000 align:start position:0%
where traps go in the kernel um
 

00:08:36.000 --> 00:08:37.909 align:start position:0%
where traps go in the kernel um
this<00:08:36.240><c> register</c><00:08:36.719><c> that</c><00:08:37.200><c> holds</c><00:08:37.519><c> the</c><00:08:37.599><c> save</c>

00:08:37.909 --> 00:08:37.919 align:start position:0%
this register that holds the save
 

00:08:37.919 --> 00:08:39.589 align:start position:0%
this register that holds the save
program<00:08:38.320><c> counter</c><00:08:38.640><c> during</c><00:08:38.800><c> a</c><00:08:38.880><c> trap</c><00:08:39.200><c> in</c><00:08:39.279><c> this</c>

00:08:39.589 --> 00:08:39.599 align:start position:0%
program counter during a trap in this
 

00:08:39.599 --> 00:08:42.870 align:start position:0%
program counter during a trap in this
s<00:08:39.760><c> scratch</c><00:08:40.880><c> register</c><00:08:41.360><c> plus</c><00:08:41.519><c> a</c><00:08:41.599><c> few</c><00:08:41.839><c> others</c>

00:08:42.870 --> 00:08:42.880 align:start position:0%
s scratch register plus a few others
 

00:08:42.880 --> 00:08:44.230 align:start position:0%
s scratch register plus a few others
so<00:08:43.120><c> supervisor</c><00:08:43.680><c> couldn't</c><00:08:43.839><c> read</c><00:08:44.000><c> and</c><00:08:44.080><c> write</c>

00:08:44.230 --> 00:08:44.240 align:start position:0%
so supervisor couldn't read and write
 

00:08:44.240 --> 00:08:46.870 align:start position:0%
so supervisor couldn't read and write
these<00:08:44.399><c> registers</c><00:08:45.040><c> and</c><00:08:45.200><c> user</c><00:08:45.440><c> code</c><00:08:45.680><c> could</c><00:08:45.839><c> not</c>

00:08:46.870 --> 00:08:46.880 align:start position:0%
these registers and user code could not
 

00:08:46.880 --> 00:08:48.870 align:start position:0%
these registers and user code could not
the<00:08:47.120><c> only</c><00:08:47.360><c> other</c><00:08:47.519><c> thing</c><00:08:47.760><c> supervisor</c><00:08:48.399><c> code</c><00:08:48.720><c> can</c>

00:08:48.870 --> 00:08:48.880 align:start position:0%
the only other thing supervisor code can
 

00:08:48.880 --> 00:08:50.470 align:start position:0%
the only other thing supervisor code can
do<00:08:49.440><c> is</c>

00:08:50.470 --> 00:08:50.480 align:start position:0%
do is
 

00:08:50.480 --> 00:08:55.829 align:start position:0%
do is
it<00:08:50.640><c> can</c><00:08:50.880><c> use</c><00:08:52.839><c> pte's</c>

00:08:55.829 --> 00:08:55.839 align:start position:0%
it can use pte's
 

00:08:55.839 --> 00:08:59.030 align:start position:0%
it can use pte's
that<00:08:56.080><c> have</c><00:08:56.240><c> the</c><00:08:56.399><c> pteu</c><00:08:57.200><c> flag</c><00:08:57.600><c> set</c>

00:08:59.030 --> 00:08:59.040 align:start position:0%
that have the pteu flag set
 

00:08:59.040 --> 00:09:00.150 align:start position:0%
that have the pteu flag set
i<00:08:59.120><c> don't</c><00:08:59.279><c> know</c><00:08:59.360><c> if</c><00:08:59.440><c> you</c><00:08:59.519><c> remember</c><00:08:59.839><c> but</c><00:09:00.000><c> there's</c>

00:09:00.150 --> 00:09:00.160 align:start position:0%
i don't know if you remember but there's
 

00:09:00.160 --> 00:09:02.710 align:start position:0%
i don't know if you remember but there's
this<00:09:00.399><c> ptu</c><00:09:00.959><c> flag</c><00:09:01.600><c> to</c><00:09:01.680><c> be</c><00:09:01.839><c> set</c><00:09:02.080><c> or</c><00:09:02.160><c> not</c><00:09:02.320><c> said</c><00:09:02.560><c> in</c>

00:09:02.710 --> 00:09:02.720 align:start position:0%
this ptu flag to be set or not said in
 

00:09:02.720 --> 00:09:03.110 align:start position:0%
this ptu flag to be set or not said in
each

00:09:03.110 --> 00:09:03.120 align:start position:0%
each
 

00:09:03.120 --> 00:09:06.630 align:start position:0%
each
page<00:09:03.440><c> table</c><00:09:03.760><c> entry</c><00:09:05.920><c> a</c><00:09:06.080><c> flag</c>

00:09:06.630 --> 00:09:06.640 align:start position:0%
page table entry a flag
 

00:09:06.640 --> 00:09:09.910 align:start position:0%
page table entry a flag
that<00:09:07.279><c> has</c><00:09:07.600><c> this</c><00:09:07.920><c> sorry</c><00:09:09.519><c> sorry</c>

00:09:09.910 --> 00:09:09.920 align:start position:0%
that has this sorry sorry
 

00:09:09.920 --> 00:09:13.190 align:start position:0%
that has this sorry sorry
you<00:09:10.000><c> can</c><00:09:10.160><c> use</c><00:09:10.399><c> ptes</c><00:09:12.640><c> that</c>

00:09:13.190 --> 00:09:13.200 align:start position:0%
you can use ptes that
 

00:09:13.200 --> 00:09:16.630 align:start position:0%
you can use ptes that
don't<00:09:13.519><c> have</c><00:09:13.680><c> the</c><00:09:13.839><c> ptu</c><00:09:14.720><c> flag</c><00:09:15.040><c> set</c><00:09:15.600><c> if</c><00:09:15.760><c> the</c><00:09:15.920><c> pteu</c>

00:09:16.630 --> 00:09:16.640 align:start position:0%
don't have the ptu flag set if the pteu
 

00:09:16.640 --> 00:09:18.630 align:start position:0%
don't have the ptu flag set if the pteu
flag<00:09:16.959><c> is</c><00:09:17.040><c> set</c><00:09:17.360><c> it</c><00:09:17.519><c> means</c><00:09:17.680><c> that</c><00:09:17.839><c> user</c><00:09:18.160><c> code</c><00:09:18.399><c> can</c>

00:09:18.630 --> 00:09:18.640 align:start position:0%
flag is set it means that user code can
 

00:09:18.640 --> 00:09:20.550 align:start position:0%
flag is set it means that user code can
use<00:09:18.800><c> that</c><00:09:18.959><c> page</c><00:09:19.200><c> table</c><00:09:19.519><c> entry</c>

00:09:20.550 --> 00:09:20.560 align:start position:0%
use that page table entry
 

00:09:20.560 --> 00:09:22.230 align:start position:0%
use that page table entry
if<00:09:20.720><c> this</c><00:09:20.880><c> flag</c><00:09:21.200><c> isn't</c><00:09:21.360><c> set</c><00:09:21.519><c> in</c><00:09:21.600><c> a</c><00:09:21.680><c> page</c><00:09:22.000><c> table</c>

00:09:22.230 --> 00:09:22.240 align:start position:0%
if this flag isn't set in a page table
 

00:09:22.240 --> 00:09:23.590 align:start position:0%
if this flag isn't set in a page table
entry<00:09:22.480><c> it</c><00:09:22.560><c> means</c><00:09:22.959><c> only</c>

00:09:23.590 --> 00:09:23.600 align:start position:0%
entry it means only
 

00:09:23.600 --> 00:09:26.710 align:start position:0%
entry it means only
supervisor<00:09:24.160><c> mode</c><00:09:24.399><c> can</c><00:09:24.560><c> use</c><00:09:24.800><c> it</c><00:09:25.519><c> um</c><00:09:26.480><c> and</c><00:09:26.560><c> you</c>

00:09:26.710 --> 00:09:26.720 align:start position:0%
supervisor mode can use it um and you
 

00:09:26.720 --> 00:09:26.949 align:start position:0%
supervisor mode can use it um and you
know

00:09:26.949 --> 00:09:26.959 align:start position:0%
know
 

00:09:26.959 --> 00:09:28.710 align:start position:0%
know
we'll<00:09:27.200><c> see</c><00:09:27.360><c> that's</c><00:09:27.600><c> important</c><00:09:27.920><c> in</c><00:09:28.480><c> a</c><00:09:28.560><c> little</c>

00:09:28.710 --> 00:09:28.720 align:start position:0%
we'll see that's important in a little
 

00:09:28.720 --> 00:09:29.990 align:start position:0%
we'll see that's important in a little
bit<00:09:28.959><c> but</c>

00:09:29.990 --> 00:09:30.000 align:start position:0%
bit but
 

00:09:30.000 --> 00:09:31.430 align:start position:0%
bit but
um<00:09:30.399><c> these</c><00:09:30.560><c> are</c><00:09:30.640><c> really</c><00:09:30.880><c> the</c><00:09:30.959><c> only</c><00:09:31.120><c> things</c><00:09:31.279><c> that</c>

00:09:31.430 --> 00:09:31.440 align:start position:0%
um these are really the only things that
 

00:09:31.440 --> 00:09:32.790 align:start position:0%
um these are really the only things that
supervisor<00:09:32.000><c> mode</c><00:09:32.160><c> can</c><00:09:32.320><c> do</c><00:09:32.399><c> it</c><00:09:32.480><c> can't</c><00:09:32.640><c> do</c>

00:09:32.790 --> 00:09:32.800 align:start position:0%
supervisor mode can do it can't do
 

00:09:32.800 --> 00:09:35.509 align:start position:0%
supervisor mode can do it can't do
anything<00:09:33.120><c> else</c><00:09:33.279><c> in</c><00:09:33.440><c> particular</c><00:09:33.920><c> for</c><00:09:34.160><c> example</c>

00:09:35.509 --> 00:09:35.519 align:start position:0%
anything else in particular for example
 

00:09:35.519 --> 00:09:38.550 align:start position:0%
anything else in particular for example
supervisor<00:09:36.240><c> mode</c><00:09:36.720><c> code</c><00:09:37.519><c> can't</c><00:09:37.920><c> just</c>

00:09:38.550 --> 00:09:38.560 align:start position:0%
supervisor mode code can't just
 

00:09:38.560 --> 00:09:41.509 align:start position:0%
supervisor mode code can't just
read<00:09:38.800><c> and</c><00:09:38.880><c> write</c><00:09:39.120><c> arbitrary</c><00:09:39.600><c> addresses</c><00:09:41.279><c> say</c>

00:09:41.509 --> 00:09:41.519 align:start position:0%
read and write arbitrary addresses say
 

00:09:41.519 --> 00:09:42.470 align:start position:0%
read and write arbitrary addresses say
physical<00:09:41.839><c> addresses</c>

00:09:42.470 --> 00:09:42.480 align:start position:0%
physical addresses
 

00:09:42.480 --> 00:09:45.350 align:start position:0%
physical addresses
no<00:09:43.279><c> supervisor</c><00:09:43.920><c> mode</c><00:09:44.560><c> is</c><00:09:44.880><c> forced</c><00:09:45.120><c> to</c><00:09:45.200><c> go</c>

00:09:45.350 --> 00:09:45.360 align:start position:0%
no supervisor mode is forced to go
 

00:09:45.360 --> 00:09:46.310 align:start position:0%
no supervisor mode is forced to go
through<00:09:45.519><c> the</c><00:09:45.600><c> page</c><00:09:45.839><c> table</c>

00:09:46.310 --> 00:09:46.320 align:start position:0%
through the page table
 

00:09:46.320 --> 00:09:48.550 align:start position:0%
through the page table
just<00:09:46.480><c> like</c><00:09:46.720><c> any</c><00:09:46.959><c> other</c><00:09:47.120><c> code</c><00:09:48.000><c> if</c><00:09:48.160><c> a</c><00:09:48.240><c> virtual</c>

00:09:48.550 --> 00:09:48.560 align:start position:0%
just like any other code if a virtual
 

00:09:48.560 --> 00:09:49.990 align:start position:0%
just like any other code if a virtual
address<00:09:49.200><c> isn't</c><00:09:49.440><c> in</c><00:09:49.519><c> the</c><00:09:49.680><c> page</c>

00:09:49.990 --> 00:09:50.000 align:start position:0%
address isn't in the page
 

00:09:50.000 --> 00:09:51.350 align:start position:0%
address isn't in the page
isn't<00:09:50.240><c> it</c><00:09:50.240><c> in</c><00:09:50.320><c> the</c><00:09:50.399><c> current</c><00:09:50.720><c> page</c><00:09:50.959><c> table</c>

00:09:51.350 --> 00:09:51.360 align:start position:0%
isn't it in the current page table
 

00:09:51.360 --> 00:09:53.030 align:start position:0%
isn't it in the current page table
pointed<00:09:51.600><c> to</c><00:09:51.760><c> by</c><00:09:51.920><c> sat</c><00:09:52.240><c> p</c>

00:09:53.030 --> 00:09:53.040 align:start position:0%
pointed to by sat p
 

00:09:53.040 --> 00:09:56.310 align:start position:0%
pointed to by sat p
um<00:09:53.920><c> or</c><00:09:54.240><c> if</c><00:09:54.320><c> it</c><00:09:54.399><c> has</c><00:09:54.640><c> the</c><00:09:54.720><c> pteu</c><00:09:55.440><c> bit</c><00:09:55.839><c> flag</c>

00:09:56.310 --> 00:09:56.320 align:start position:0%
um or if it has the pteu bit flag
 

00:09:56.320 --> 00:09:58.470 align:start position:0%
um or if it has the pteu bit flag
set<00:09:56.880><c> which</c><00:09:57.120><c> means</c><00:09:57.360><c> it's</c><00:09:57.519><c> the</c><00:09:57.600><c> user</c><00:09:57.839><c> ppe</c><00:09:58.320><c> then</c>

00:09:58.470 --> 00:09:58.480 align:start position:0%
set which means it's the user ppe then
 

00:09:58.480 --> 00:09:59.670 align:start position:0%
set which means it's the user ppe then
supervisor<00:09:59.040><c> mode</c><00:09:59.279><c> code</c>

00:09:59.670 --> 00:09:59.680 align:start position:0%
supervisor mode code
 

00:09:59.680 --> 00:10:02.949 align:start position:0%
supervisor mode code
cannot<00:10:00.160><c> use</c><00:10:00.320><c> that</c><00:10:00.560><c> address</c><00:10:01.519><c> so</c><00:10:01.680><c> we're</c><00:10:02.160><c> even</c>

00:10:02.949 --> 00:10:02.959 align:start position:0%
cannot use that address so we're even
 

00:10:02.959 --> 00:10:05.269 align:start position:0%
cannot use that address so we're even
in<00:10:03.120><c> supervisor</c><00:10:03.680><c> mode</c><00:10:03.920><c> were</c><00:10:04.079><c> restricted</c><00:10:05.120><c> to</c>

00:10:05.269 --> 00:10:05.279 align:start position:0%
in supervisor mode were restricted to
 

00:10:05.279 --> 00:10:06.389 align:start position:0%
in supervisor mode were restricted to
whatever

00:10:06.389 --> 00:10:06.399 align:start position:0%
whatever
 

00:10:06.399 --> 00:10:08.790 align:start position:0%
whatever
virtual<00:10:06.720><c> address</c><00:10:07.839><c> virtual</c><00:10:08.160><c> addresses</c><00:10:08.560><c> were</c>

00:10:08.790 --> 00:10:08.800 align:start position:0%
virtual address virtual addresses were
 

00:10:08.800 --> 00:10:12.150 align:start position:0%
virtual address virtual addresses were
set<00:10:08.959><c> up</c><00:10:09.120><c> in</c><00:10:09.200><c> the</c><00:10:09.360><c> current</c><00:10:09.760><c> page</c><00:10:10.079><c> table</c>

00:10:12.150 --> 00:10:12.160 align:start position:0%
set up in the current page table
 

00:10:12.160 --> 00:10:15.110 align:start position:0%
set up in the current page table
um<00:10:13.200><c> and</c><00:10:13.279><c> that's</c><00:10:13.600><c> it</c><00:10:14.000><c> so</c><00:10:14.480><c> we're</c><00:10:14.640><c> just</c><00:10:14.800><c> allowed</c>

00:10:15.110 --> 00:10:15.120 align:start position:0%
um and that's it so we're just allowed
 

00:10:15.120 --> 00:10:17.190 align:start position:0%
um and that's it so we're just allowed
to<00:10:15.200><c> do</c><00:10:15.360><c> these</c><00:10:15.519><c> things</c><00:10:15.760><c> so</c><00:10:15.920><c> you</c><00:10:16.079><c> know</c><00:10:16.160><c> we'll</c><00:10:16.399><c> see</c>

00:10:17.190 --> 00:10:17.200 align:start position:0%
to do these things so you know we'll see
 

00:10:17.200 --> 00:10:20.870 align:start position:0%
to do these things so you know we'll see
as<00:10:17.680><c> a</c><00:10:18.959><c> significant</c><00:10:19.519><c> constraint</c><00:10:20.079><c> on</c><00:10:20.240><c> what</c><00:10:20.399><c> the</c>

00:10:20.870 --> 00:10:20.880 align:start position:0%
as a significant constraint on what the
 

00:10:20.880 --> 00:10:24.069 align:start position:0%
as a significant constraint on what the
trap<00:10:21.200><c> code</c><00:10:21.519><c> can</c><00:10:21.680><c> do</c><00:10:23.279><c> when</c><00:10:23.519><c> we're</c><00:10:23.680><c> entering</c><00:10:24.000><c> the</c>

00:10:24.069 --> 00:10:24.079 align:start position:0%
trap code can do when we're entering the
 

00:10:24.079 --> 00:10:25.190 align:start position:0%
trap code can do when we're entering the
kernel

00:10:25.190 --> 00:10:25.200 align:start position:0%
kernel
 

00:10:25.200 --> 00:10:27.350 align:start position:0%
kernel
can't<00:10:25.360><c> do</c><00:10:25.519><c> just</c><00:10:25.760><c> anything</c><00:10:26.959><c> i'm</c><00:10:27.120><c> going</c><00:10:27.279><c> to</c>

00:10:27.350 --> 00:10:27.360 align:start position:0%
can't do just anything i'm going to
 

00:10:27.360 --> 00:10:28.310 align:start position:0%
can't do just anything i'm going to
preview<00:10:27.839><c> a</c><00:10:27.920><c> bit</c>

00:10:28.310 --> 00:10:28.320 align:start position:0%
preview a bit
 

00:10:28.320 --> 00:10:30.949 align:start position:0%
preview a bit
i'm<00:10:28.480><c> going</c><00:10:28.640><c> to</c><00:10:29.200><c> spend</c><00:10:29.519><c> most</c><00:10:29.680><c> of</c><00:10:29.760><c> this</c><00:10:30.000><c> lecture</c>

00:10:30.949 --> 00:10:30.959 align:start position:0%
i'm going to spend most of this lecture
 

00:10:30.959 --> 00:10:32.710 align:start position:0%
i'm going to spend most of this lecture
in<00:10:31.120><c> gdb</c>

00:10:32.710 --> 00:10:32.720 align:start position:0%
in gdb
 

00:10:32.720 --> 00:10:35.509 align:start position:0%
in gdb
actually<00:10:33.120><c> tracing</c><00:10:33.680><c> through</c><00:10:34.000><c> the</c><00:10:34.160><c> execution</c>

00:10:35.509 --> 00:10:35.519 align:start position:0%
actually tracing through the execution
 

00:10:35.519 --> 00:10:36.310 align:start position:0%
actually tracing through the execution
of

00:10:36.310 --> 00:10:36.320 align:start position:0%
of
 

00:10:36.320 --> 00:10:39.750 align:start position:0%
of
a<00:10:36.480><c> trap</c><00:10:36.880><c> entry</c><00:10:37.200><c> into</c><00:10:37.360><c> the</c><00:10:37.440><c> kernel</c><00:10:37.839><c> in</c><00:10:38.000><c> return</c>

00:10:39.750 --> 00:10:39.760 align:start position:0%
a trap entry into the kernel in return
 

00:10:39.760 --> 00:10:45.269 align:start position:0%
a trap entry into the kernel in return
this<00:10:39.920><c> can</c><00:10:40.079><c> be</c><00:10:40.160><c> a</c><00:10:40.240><c> lot</c><00:10:40.399><c> of</c><00:10:40.480><c> details</c><00:10:42.079><c> in</c><00:10:42.240><c> order</c><00:10:42.560><c> to</c>

00:10:45.269 --> 00:10:45.279 align:start position:0%
 
 

00:10:45.279 --> 00:10:48.949 align:start position:0%
 
uh<00:10:45.519><c> maybe</c><00:10:46.000><c> sort</c><00:10:46.160><c> of</c><00:10:46.720><c> help</c><00:10:46.959><c> you</c>

00:10:48.949 --> 00:10:48.959 align:start position:0%
uh maybe sort of help you
 

00:10:48.959 --> 00:10:51.430 align:start position:0%
uh maybe sort of help you
see<00:10:49.120><c> ahead</c><00:10:49.360><c> to</c><00:10:49.519><c> what's</c><00:10:49.680><c> coming</c><00:10:51.120><c> we're</c><00:10:51.360><c> going</c>

00:10:51.430 --> 00:10:51.440 align:start position:0%
see ahead to what's coming we're going
 

00:10:51.440 --> 00:10:53.030 align:start position:0%
see ahead to what's coming we're going
to<00:10:51.519><c> be</c>

00:10:53.030 --> 00:10:53.040 align:start position:0%
to be
 

00:10:53.040 --> 00:10:56.230 align:start position:0%
to be
tracing<00:10:53.920><c> the</c><00:10:54.320><c> shells</c><00:10:54.959><c> call</c><00:10:55.440><c> to</c>

00:10:56.230 --> 00:10:56.240 align:start position:0%
tracing the shells call to
 

00:10:56.240 --> 00:10:57.990 align:start position:0%
tracing the shells call to
right<00:10:57.040><c> which</c><00:10:57.279><c> from</c><00:10:57.440><c> the</c><00:10:57.519><c> shell's</c><00:10:57.760><c> point</c><00:10:57.920><c> of</c>

00:10:57.990 --> 00:10:58.000 align:start position:0%
right which from the shell's point of
 

00:10:58.000 --> 00:10:59.990 align:start position:0%
right which from the shell's point of
view<00:10:58.240><c> is</c><00:10:58.320><c> just</c><00:10:58.480><c> a</c><00:10:58.800><c> c</c><00:10:59.120><c> function</c><00:10:59.440><c> call</c><00:10:59.680><c> as</c><00:10:59.839><c> part</c>

00:10:59.990 --> 00:11:00.000 align:start position:0%
view is just a c function call as part
 

00:11:00.000 --> 00:11:01.829 align:start position:0%
view is just a c function call as part
of<00:11:00.079><c> the</c><00:11:00.240><c> shell</c>

00:11:01.829 --> 00:11:01.839 align:start position:0%
of the shell
 

00:11:01.839 --> 00:11:04.470 align:start position:0%
of the shell
in<00:11:02.000><c> fact</c><00:11:02.720><c> wright</c><00:11:03.120><c> makes</c><00:11:03.360><c> this</c><00:11:03.680><c> uh</c><00:11:04.160><c> might</c>

00:11:04.470 --> 00:11:04.480 align:start position:0%
in fact wright makes this uh might
 

00:11:04.480 --> 00:11:05.829 align:start position:0%
in fact wright makes this uh might
that's<00:11:04.720><c> use</c><00:11:04.959><c> the</c><00:11:05.040><c> system</c><00:11:05.360><c> call</c>

00:11:05.829 --> 00:11:05.839 align:start position:0%
that's use the system call
 

00:11:05.839 --> 00:11:09.750 align:start position:0%
that's use the system call
by<00:11:06.079><c> issuing</c><00:11:06.399><c> the</c><00:11:06.560><c> e-call</c><00:11:07.040><c> instruction</c>

00:11:09.750 --> 00:11:09.760 align:start position:0%
 
 

00:11:09.760 --> 00:11:12.630 align:start position:0%
 
which<00:11:11.360><c> switches</c><00:11:11.760><c> into</c><00:11:11.920><c> the</c><00:11:12.000><c> kernel</c><00:11:12.320><c> which</c><00:11:12.560><c> is</c>

00:11:12.630 --> 00:11:12.640 align:start position:0%
which switches into the kernel which is
 

00:11:12.640 --> 00:11:14.389 align:start position:0%
which switches into the kernel which is
a<00:11:12.720><c> supervisor</c><00:11:13.200><c> mode</c><00:11:13.440><c> where</c><00:11:13.600><c> that</c><00:11:13.920><c> goes</c>

00:11:14.389 --> 00:11:14.399 align:start position:0%
a supervisor mode where that goes
 

00:11:14.399 --> 00:11:16.230 align:start position:0%
a supervisor mode where that goes
immediately<00:11:15.040><c> that</c><00:11:15.279><c> is</c><00:11:15.360><c> the</c><00:11:15.600><c> very</c><00:11:15.920><c> first</c>

00:11:16.230 --> 00:11:16.240 align:start position:0%
immediately that is the very first
 

00:11:16.240 --> 00:11:18.069 align:start position:0%
immediately that is the very first
instruction<00:11:17.200><c> that's</c><00:11:17.440><c> executed</c><00:11:17.920><c> in</c><00:11:18.000><c> the</c>

00:11:18.069 --> 00:11:18.079 align:start position:0%
instruction that's executed in the
 

00:11:18.079 --> 00:11:20.150 align:start position:0%
instruction that's executed in the
kernel<00:11:18.399><c> in</c><00:11:18.480><c> supervisor</c><00:11:19.200><c> mode</c>

00:11:20.150 --> 00:11:20.160 align:start position:0%
kernel in supervisor mode
 

00:11:20.160 --> 00:11:22.550 align:start position:0%
kernel in supervisor mode
is<00:11:20.399><c> in</c><00:11:20.480><c> a</c><00:11:20.640><c> function</c><00:11:21.120><c> written</c><00:11:21.440><c> in</c><00:11:21.600><c> assembler</c>

00:11:22.550 --> 00:11:22.560 align:start position:0%
is in a function written in assembler
 

00:11:22.560 --> 00:11:23.829 align:start position:0%
is in a function written in assembler
called

00:11:23.829 --> 00:11:23.839 align:start position:0%
called
 

00:11:23.839 --> 00:11:27.430 align:start position:0%
called
userback<00:11:26.079><c> and</c><00:11:26.480><c> this</c><00:11:26.720><c> is</c><00:11:26.880><c> in</c><00:11:26.959><c> the</c>

00:11:27.430 --> 00:11:27.440 align:start position:0%
userback and this is in the
 

00:11:27.440 --> 00:11:33.269 align:start position:0%
userback and this is in the
part<00:11:27.600><c> of</c><00:11:27.680><c> the</c><00:11:27.920><c> trampoline</c><00:11:29.519><c> um</c>

00:11:33.269 --> 00:11:33.279 align:start position:0%
 
 

00:11:33.279 --> 00:11:36.069 align:start position:0%
 
uh<00:11:33.600><c> in</c><00:11:33.880><c> trampoline.s</c><00:11:35.360><c> in</c><00:11:35.440><c> the</c><00:11:35.519><c> kernel</c><00:11:35.839><c> source</c>

00:11:36.069 --> 00:11:36.079 align:start position:0%
uh in trampoline.s in the kernel source
 

00:11:36.079 --> 00:11:37.750 align:start position:0%
uh in trampoline.s in the kernel source
so<00:11:36.240><c> the</c><00:11:36.320><c> very</c><00:11:36.640><c> first</c><00:11:36.880><c> code</c><00:11:37.120><c> that's</c><00:11:37.360><c> executed</c>

00:11:37.750 --> 00:11:37.760 align:start position:0%
so the very first code that's executed
 

00:11:37.760 --> 00:11:38.790 align:start position:0%
so the very first code that's executed
is<00:11:37.920><c> this</c><00:11:38.000><c> uservec</c>

00:11:38.790 --> 00:11:38.800 align:start position:0%
is this uservec
 

00:11:38.800 --> 00:11:43.110 align:start position:0%
is this uservec
assembler<00:11:39.440><c> function</c><00:11:40.839><c> um</c><00:11:41.920><c> then</c><00:11:42.240><c> next</c>

00:11:43.110 --> 00:11:43.120 align:start position:0%
assembler function um then next
 

00:11:43.120 --> 00:11:44.870 align:start position:0%
assembler function um then next
the<00:11:43.360><c> that</c><00:11:43.519><c> assembler</c><00:11:43.920><c> function</c><00:11:44.240><c> jumps</c><00:11:44.480><c> into</c><00:11:44.720><c> c</c>

00:11:44.870 --> 00:11:44.880 align:start position:0%
the that assembler function jumps into c
 

00:11:44.880 --> 00:11:46.790 align:start position:0%
the that assembler function jumps into c
code<00:11:45.200><c> in</c><00:11:45.279><c> particular</c><00:11:46.079><c> a</c><00:11:46.240><c> function</c><00:11:46.560><c> called</c>

00:11:46.790 --> 00:11:46.800 align:start position:0%
code in particular a function called
 

00:11:46.800 --> 00:11:48.230 align:start position:0%
code in particular a function called
usertrap

00:11:48.230 --> 00:11:48.240 align:start position:0%
usertrap
 

00:11:48.240 --> 00:11:51.750 align:start position:0%
usertrap
in<00:11:48.480><c> trap.c</c><00:11:50.720><c> um</c><00:11:51.040><c> and</c><00:11:51.120><c> now</c><00:11:51.360><c> we're</c>

00:11:51.750 --> 00:11:51.760 align:start position:0%
in trap.c um and now we're
 

00:11:51.760 --> 00:11:54.150 align:start position:0%
in trap.c um and now we're
getting<00:11:52.000><c> it</c><00:11:52.079><c> to</c><00:11:52.240><c> c</c><00:11:52.480><c> code</c><00:11:52.880><c> so</c><00:11:53.600><c> things</c><00:11:53.839><c> are</c><00:11:54.000><c> much</c>

00:11:54.150 --> 00:11:54.160 align:start position:0%
getting it to c code so things are much
 

00:11:54.160 --> 00:11:55.430 align:start position:0%
getting it to c code so things are much
easier<00:11:54.480><c> to</c><00:11:54.560><c> understand</c>

00:11:55.430 --> 00:11:55.440 align:start position:0%
easier to understand
 

00:11:55.440 --> 00:11:57.750 align:start position:0%
easier to understand
user<00:11:55.760><c> trap</c><00:11:56.079><c> sees</c><00:11:56.399><c> oh</c><00:11:57.120><c> we're</c><00:11:57.279><c> executing</c><00:11:57.680><c> a</c>

00:11:57.750 --> 00:11:57.760 align:start position:0%
user trap sees oh we're executing a
 

00:11:57.760 --> 00:11:58.870 align:start position:0%
user trap sees oh we're executing a
system<00:11:58.079><c> call</c>

00:11:58.870 --> 00:11:58.880 align:start position:0%
system call
 

00:11:58.880 --> 00:12:02.710 align:start position:0%
system call
and<00:11:59.040><c> it</c><00:11:59.120><c> calls</c><00:11:59.360><c> a</c><00:11:59.440><c> function</c><00:11:59.760><c> called</c><00:12:00.000><c> syscall</c>

00:12:02.710 --> 00:12:02.720 align:start position:0%
 
 

00:12:02.720 --> 00:12:04.150 align:start position:0%
 
which<00:12:02.880><c> looks</c><00:12:03.120><c> up</c><00:12:03.279><c> the</c><00:12:03.360><c> system</c><00:12:03.600><c> call</c><00:12:03.839><c> number</c><00:12:04.079><c> in</c>

00:12:04.150 --> 00:12:04.160 align:start position:0%
which looks up the system call number in
 

00:12:04.160 --> 00:12:06.550 align:start position:0%
which looks up the system call number in
a<00:12:04.240><c> table</c><00:12:05.120><c> and</c><00:12:05.680><c> calls</c><00:12:06.000><c> the</c><00:12:06.079><c> particular</c>

00:12:06.550 --> 00:12:06.560 align:start position:0%
a table and calls the particular
 

00:12:06.560 --> 00:12:08.870 align:start position:0%
a table and calls the particular
function<00:12:06.959><c> inside</c><00:12:07.279><c> the</c><00:12:07.440><c> kernel</c><00:12:07.920><c> that</c>

00:12:08.870 --> 00:12:08.880 align:start position:0%
function inside the kernel that
 

00:12:08.880 --> 00:12:10.389 align:start position:0%
function inside the kernel that
implements<00:12:09.279><c> that</c><00:12:09.440><c> system</c><00:12:09.760><c> calling</c><00:12:10.079><c> for</c><00:12:10.240><c> us</c>

00:12:10.389 --> 00:12:10.399 align:start position:0%
implements that system calling for us
 

00:12:10.399 --> 00:12:12.310 align:start position:0%
implements that system calling for us
it's<00:12:10.639><c> going</c><00:12:10.720><c> to</c><00:12:10.800><c> be</c><00:12:11.519><c> right</c><00:12:11.839><c> and</c><00:12:11.920><c> right</c><00:12:12.079><c> does</c>

00:12:12.310 --> 00:12:12.320 align:start position:0%
it's going to be right and right does
 

00:12:12.320 --> 00:12:15.030 align:start position:0%
it's going to be right and right does
this<00:12:12.480><c> business</c><00:12:12.880><c> it</c><00:12:13.040><c> happens</c><00:12:13.519><c> to</c><00:12:13.760><c> you</c><00:12:13.839><c> know</c>

00:12:15.030 --> 00:12:15.040 align:start position:0%
this business it happens to you know
 

00:12:15.040 --> 00:12:17.110 align:start position:0%
this business it happens to you know
uh<00:12:15.360><c> arrange</c><00:12:15.839><c> for</c><00:12:16.000><c> the</c><00:12:16.160><c> whatever</c><00:12:16.639><c> bytes</c><00:12:16.959><c> were</c>

00:12:17.110 --> 00:12:17.120 align:start position:0%
uh arrange for the whatever bytes were
 

00:12:17.120 --> 00:12:20.150 align:start position:0%
uh arrange for the whatever bytes were
written<00:12:17.360><c> to</c><00:12:17.680><c> appear</c><00:12:18.079><c> on</c><00:12:18.160><c> the</c><00:12:18.240><c> console</c>

00:12:20.150 --> 00:12:20.160 align:start position:0%
written to appear on the console
 

00:12:20.160 --> 00:12:22.389 align:start position:0%
written to appear on the console
and<00:12:20.320><c> when</c><00:12:20.480><c> it's</c><00:12:20.639><c> finished</c><00:12:21.440><c> it</c><00:12:21.600><c> returns</c><00:12:22.079><c> back</c>

00:12:22.389 --> 00:12:22.399 align:start position:0%
and when it's finished it returns back
 

00:12:22.399 --> 00:12:24.870 align:start position:0%
and when it's finished it returns back
up<00:12:22.560><c> to</c><00:12:22.720><c> this</c><00:12:23.120><c> system</c><00:12:23.519><c> call</c><00:12:23.680><c> function</c>

00:12:24.870 --> 00:12:24.880 align:start position:0%
up to this system call function
 

00:12:24.880 --> 00:12:26.550 align:start position:0%
up to this system call function
and<00:12:24.959><c> then</c><00:12:25.200><c> the</c><00:12:25.360><c> system</c><00:12:25.680><c> call</c><00:12:25.839><c> function</c><00:12:26.160><c> on</c><00:12:26.399><c> in</c>

00:12:26.550 --> 00:12:26.560 align:start position:0%
and then the system call function on in
 

00:12:26.560 --> 00:12:28.069 align:start position:0%
and then the system call function on in
order<00:12:26.800><c> to</c><00:12:26.880><c> return</c><00:12:27.279><c> back</c><00:12:27.440><c> to</c><00:12:27.519><c> user</c><00:12:27.760><c> space</c>

00:12:28.069 --> 00:12:28.079 align:start position:0%
order to return back to user space
 

00:12:28.079 --> 00:12:29.670 align:start position:0%
order to return back to user space
because<00:12:28.160><c> we</c><00:12:28.320><c> want</c><00:12:28.480><c> to</c><00:12:28.560><c> resume</c>

00:12:29.670 --> 00:12:29.680 align:start position:0%
because we want to resume
 

00:12:29.680 --> 00:12:32.230 align:start position:0%
because we want to resume
after<00:12:29.920><c> the</c><00:12:30.079><c> z</c><00:12:30.320><c> call</c><00:12:31.680><c> there's</c><00:12:31.839><c> a</c><00:12:31.920><c> bunch</c><00:12:32.160><c> of</c>

00:12:32.230 --> 00:12:32.240 align:start position:0%
after the z call there's a bunch of
 

00:12:32.240 --> 00:12:32.949 align:start position:0%
after the z call there's a bunch of
stuff

00:12:32.949 --> 00:12:32.959 align:start position:0%
stuff
 

00:12:32.959 --> 00:12:35.350 align:start position:0%
stuff
we'll<00:12:33.200><c> see</c><00:12:33.360><c> that</c><00:12:33.519><c> has</c><00:12:33.680><c> to</c><00:12:33.839><c> happen</c><00:12:34.959><c> in</c><00:12:35.040><c> order</c><00:12:35.200><c> to</c>

00:12:35.350 --> 00:12:35.360 align:start position:0%
we'll see that has to happen in order to
 

00:12:35.360 --> 00:12:36.629 align:start position:0%
we'll see that has to happen in order to
return<00:12:35.600><c> to</c><00:12:35.760><c> user</c><00:12:36.000><c> space</c><00:12:36.240><c> so</c><00:12:36.399><c> there's</c><00:12:36.560><c> a</c>

00:12:36.629 --> 00:12:36.639 align:start position:0%
return to user space so there's a
 

00:12:36.639 --> 00:12:40.310 align:start position:0%
return to user space so there's a
separate<00:12:36.959><c> function</c><00:12:37.279><c> called</c><00:12:37.600><c> user</c>

00:12:40.310 --> 00:12:40.320 align:start position:0%
 
 

00:12:40.320 --> 00:12:43.829 align:start position:0%
 
trap<00:12:40.880><c> rat</c><00:12:43.040><c> it's</c><00:12:43.120><c> written</c><00:12:43.440><c> in</c><00:12:43.600><c> c</c>

00:12:43.829 --> 00:12:43.839 align:start position:0%
trap rat it's written in c
 

00:12:43.839 --> 00:12:47.030 align:start position:0%
trap rat it's written in c
it's<00:12:44.000><c> in</c><00:12:44.079><c> trap.c</c><00:12:45.040><c> that</c><00:12:46.160><c> does</c><00:12:46.480><c> the</c><00:12:46.720><c> part</c><00:12:46.959><c> of</c>

00:12:47.030 --> 00:12:47.040 align:start position:0%
it's in trap.c that does the part of
 

00:12:47.040 --> 00:12:48.790 align:start position:0%
it's in trap.c that does the part of
this<00:12:47.200><c> return</c><00:12:47.600><c> to</c><00:12:47.680><c> user</c><00:12:48.000><c> space</c><00:12:48.399><c> that's</c>

00:12:48.790 --> 00:12:48.800 align:start position:0%
this return to user space that's
 

00:12:48.800 --> 00:12:50.470 align:start position:0%
this return to user space that's
convenient<00:12:49.279><c> to</c><00:12:49.360><c> do</c><00:12:49.519><c> in</c><00:12:49.680><c> c</c><00:12:49.920><c> code</c>

00:12:50.470 --> 00:12:50.480 align:start position:0%
convenient to do in c code
 

00:12:50.480 --> 00:12:51.509 align:start position:0%
convenient to do in c code
there's<00:12:50.639><c> some</c><00:12:50.800><c> final</c><00:12:51.040><c> things</c><00:12:51.279><c> that</c><00:12:51.360><c> really</c>

00:12:51.509 --> 00:12:51.519 align:start position:0%
there's some final things that really
 

00:12:51.519 --> 00:12:54.790 align:start position:0%
there's some final things that really
can<00:12:51.680><c> only</c><00:12:51.839><c> be</c><00:12:52.000><c> done</c><00:12:52.160><c> in</c><00:12:52.320><c> assembly</c><00:12:52.720><c> code</c>

00:12:54.790 --> 00:12:54.800 align:start position:0%
can only be done in assembly code
 

00:12:54.800 --> 00:12:56.230 align:start position:0%
can only be done in assembly code
and<00:12:54.959><c> the</c><00:12:55.040><c> code</c><00:12:55.279><c> for</c><00:12:55.440><c> that</c><00:12:55.680><c> is</c><00:12:55.839><c> written</c><00:12:56.079><c> in</c>

00:12:56.230 --> 00:12:56.240 align:start position:0%
and the code for that is written in
 

00:12:56.240 --> 00:12:57.590 align:start position:0%
and the code for that is written in
assembler<00:12:56.639><c> and</c><00:12:56.800><c> it's</c><00:12:57.040><c> again</c><00:12:57.360><c> in</c><00:12:57.440><c> this</c>

00:12:57.590 --> 00:12:57.600 align:start position:0%
assembler and it's again in this
 

00:12:57.600 --> 00:12:58.870 align:start position:0%
assembler and it's again in this
trampoline<00:12:58.160><c> page</c>

00:12:58.870 --> 00:12:58.880 align:start position:0%
trampoline page
 

00:12:58.880 --> 00:13:04.150 align:start position:0%
trampoline page
in<00:12:59.040><c> a</c><00:12:59.120><c> function</c><00:12:59.440><c> called</c><00:12:59.680><c> user</c><00:13:00.000><c> ret</c>

00:13:04.150 --> 00:13:04.160 align:start position:0%
 
 

00:13:04.160 --> 00:13:07.110 align:start position:0%
 
to<00:13:04.320><c> the</c><00:13:04.639><c> last</c><00:13:05.360><c> some</c><00:13:05.600><c> last</c><00:13:06.079><c> assembly</c><00:13:06.880><c> stuff</c>

00:13:07.110 --> 00:13:07.120 align:start position:0%
to the last some last assembly stuff
 

00:13:07.120 --> 00:13:08.790 align:start position:0%
to the last some last assembly stuff
that<00:13:07.200><c> has</c><00:13:07.360><c> to</c><00:13:07.519><c> happen</c><00:13:07.680><c> and</c><00:13:07.920><c> finally</c>

00:13:08.790 --> 00:13:08.800 align:start position:0%
that has to happen and finally
 

00:13:08.800 --> 00:13:11.910 align:start position:0%
that has to happen and finally
um<00:13:10.160><c> this</c><00:13:10.399><c> assembly</c><00:13:10.800><c> function</c><00:13:11.200><c> issues</c><00:13:11.600><c> the</c>

00:13:11.910 --> 00:13:11.920 align:start position:0%
um this assembly function issues the
 

00:13:11.920 --> 00:13:13.750 align:start position:0%
um this assembly function issues the
machine<00:13:12.399><c> instruction</c><00:13:12.959><c> that</c><00:13:13.120><c> returns</c><00:13:13.519><c> back</c><00:13:13.680><c> in</c>

00:13:13.750 --> 00:13:13.760 align:start position:0%
machine instruction that returns back in
 

00:13:13.760 --> 00:13:15.350 align:start position:0%
machine instruction that returns back in
the<00:13:13.839><c> user</c><00:13:14.079><c> space</c><00:13:14.560><c> and</c>

00:13:15.350 --> 00:13:15.360 align:start position:0%
the user space and
 

00:13:15.360 --> 00:13:20.629 align:start position:0%
the user space and
resume<00:13:15.839><c> execution</c><00:13:18.160><c> after</c><00:13:18.399><c> the</c><00:13:18.839><c> e-column</c>

00:13:20.629 --> 00:13:20.639 align:start position:0%
resume execution after the e-column
 

00:13:20.639 --> 00:13:22.150 align:start position:0%
resume execution after the e-column
all<00:13:20.800><c> right</c><00:13:20.959><c> does</c><00:13:21.120><c> anybody</c><00:13:21.519><c> want</c><00:13:21.600><c> to</c><00:13:21.680><c> answer</c>

00:13:22.150 --> 00:13:22.160 align:start position:0%
all right does anybody want to answer
 

00:13:22.160 --> 00:13:24.550 align:start position:0%
all right does anybody want to answer
ask<00:13:22.320><c> a</c><00:13:22.480><c> question</c><00:13:22.720><c> i'm</c><00:13:23.120><c> about</c><00:13:23.360><c> to</c><00:13:23.519><c> switch</c><00:13:23.760><c> into</c>

00:13:24.550 --> 00:13:24.560 align:start position:0%
ask a question i'm about to switch into
 

00:13:24.560 --> 00:13:27.030 align:start position:0%
ask a question i'm about to switch into
looking<00:13:24.800><c> at</c><00:13:24.880><c> stuff</c><00:13:25.040><c> with</c><00:13:25.200><c> gdb</c><00:13:26.320><c> um</c><00:13:26.800><c> any</c>

00:13:27.030 --> 00:13:27.040 align:start position:0%
looking at stuff with gdb um any
 

00:13:27.040 --> 00:13:32.829 align:start position:0%
looking at stuff with gdb um any
questions<00:13:27.360><c> about</c><00:13:27.600><c> the</c><00:13:27.839><c> sort</c><00:13:28.000><c> of</c><00:13:28.079><c> high</c><00:13:28.320><c> level</c>

00:13:32.829 --> 00:13:32.839 align:start position:0%
 
 

00:13:32.839 --> 00:13:37.030 align:start position:0%
 
picture

00:13:37.030 --> 00:13:37.040 align:start position:0%
 
 

00:13:37.040 --> 00:13:40.790 align:start position:0%
 
all<00:13:37.120><c> right</c><00:13:37.839><c> i</c><00:13:38.240><c> am</c><00:13:38.399><c> going</c><00:13:38.639><c> to</c>

00:13:40.790 --> 00:13:40.800 align:start position:0%
all right i am going to
 

00:13:40.800 --> 00:13:44.069 align:start position:0%
all right i am going to
sorry<00:13:42.320><c> um</c><00:13:43.440><c> let</c><00:13:43.600><c> me</c><00:13:43.680><c> see</c>

00:13:44.069 --> 00:13:44.079 align:start position:0%
sorry um let me see
 

00:13:44.079 --> 00:13:48.069 align:start position:0%
sorry um let me see
what<00:13:44.320><c> mode</c><00:13:44.560><c> our</c><00:13:44.720><c> vm.c</c><00:13:45.680><c> functions</c><00:13:46.160><c> run</c><00:13:46.839><c> in</c><00:13:47.680><c> uh</c>

00:13:48.069 --> 00:13:48.079 align:start position:0%
what mode our vm.c functions run in uh
 

00:13:48.079 --> 00:13:49.910 align:start position:0%
what mode our vm.c functions run in uh
vm.c<00:13:48.639><c> functions</c><00:13:49.040><c> everything</c><00:13:49.279><c> in</c><00:13:49.360><c> there</c><00:13:49.680><c> is</c><00:13:49.839><c> a</c>

00:13:49.910 --> 00:13:49.920 align:start position:0%
vm.c functions everything in there is a
 

00:13:49.920 --> 00:13:51.110 align:start position:0%
vm.c functions everything in there is a
part<00:13:50.079><c> of</c><00:13:50.160><c> the</c><00:13:50.240><c> kernel</c><00:13:50.560><c> and</c><00:13:50.639><c> it's</c><00:13:50.800><c> running</c>

00:13:51.110 --> 00:13:51.120 align:start position:0%
part of the kernel and it's running
 

00:13:51.120 --> 00:13:54.790 align:start position:0%
part of the kernel and it's running
supervisor<00:13:51.680><c> mode</c>

00:13:54.790 --> 00:13:54.800 align:start position:0%
 
 

00:13:54.800 --> 00:14:00.389 align:start position:0%
 
um<00:13:57.680><c> yeah</c>

00:14:00.389 --> 00:14:00.399 align:start position:0%
 
 

00:14:00.399 --> 00:14:02.389 align:start position:0%
 
okay<00:14:00.880><c> somebody</c><00:14:01.199><c> asks</c><00:14:01.519><c> why</c><00:14:01.760><c> these</c><00:14:02.000><c> functions</c>

00:14:02.389 --> 00:14:02.399 align:start position:0%
okay somebody asks why these functions
 

00:14:02.399 --> 00:14:03.670 align:start position:0%
okay somebody asks why these functions
are<00:14:02.480><c> named</c><00:14:02.720><c> this</c><00:14:02.880><c> way</c>

00:14:03.670 --> 00:14:03.680 align:start position:0%
are named this way
 

00:14:03.680 --> 00:14:07.670 align:start position:0%
are named this way
um<00:14:05.920><c> uh</c><00:14:06.160><c> the</c><00:14:06.320><c> naming</c><00:14:06.639><c> is</c><00:14:06.720><c> a</c><00:14:06.800><c> bit</c><00:14:06.959><c> of</c><00:14:07.040><c> a</c><00:14:07.120><c> disaster</c>

00:14:07.670 --> 00:14:07.680 align:start position:0%
um uh the naming is a bit of a disaster
 

00:14:07.680 --> 00:14:09.910 align:start position:0%
um uh the naming is a bit of a disaster
and<00:14:07.920><c> for</c><00:14:08.079><c> next</c><00:14:08.320><c> year</c><00:14:08.560><c> i'm</c><00:14:08.720><c> resolved</c><00:14:09.279><c> to</c>

00:14:09.910 --> 00:14:09.920 align:start position:0%
and for next year i'm resolved to
 

00:14:09.920 --> 00:14:13.670 align:start position:0%
and for next year i'm resolved to
make<00:14:10.079><c> them</c><00:14:10.240><c> more</c><00:14:10.480><c> rational</c>

00:14:13.670 --> 00:14:13.680 align:start position:0%
 
 

00:14:13.680 --> 00:14:15.110 align:start position:0%
 
i<00:14:13.760><c> think</c><00:14:13.920><c> the</c><00:14:14.160><c> naming</c><00:14:14.480><c> question</c><00:14:14.800><c> might</c><00:14:14.959><c> have</c>

00:14:15.110 --> 00:14:15.120 align:start position:0%
i think the naming question might have
 

00:14:15.120 --> 00:14:17.189 align:start position:0%
i think the naming question might have
referred<00:14:15.519><c> to</c><00:14:15.680><c> the</c><00:14:16.000><c> name</c><00:14:16.240><c> of</c><00:14:16.320><c> the</c><00:14:16.480><c> registers</c>

00:14:17.189 --> 00:14:17.199 align:start position:0%
referred to the name of the registers
 

00:14:17.199 --> 00:14:19.509 align:start position:0%
referred to the name of the registers
in<00:14:17.279><c> the</c><00:14:17.440><c> previous</c><00:14:18.320><c> board</c><00:14:18.959><c> they</c><00:14:19.120><c> all</c><00:14:19.279><c> started</c>

00:14:19.509 --> 00:14:19.519 align:start position:0%
in the previous board they all started
 

00:14:19.519 --> 00:14:20.230 align:start position:0%
in the previous board they all started
like<00:14:19.680><c> yes</c>

00:14:20.230 --> 00:14:20.240 align:start position:0%
like yes
 

00:14:20.240 --> 00:14:21.610 align:start position:0%
like yes
for<00:14:20.560><c> supervisor</c>

00:14:21.610 --> 00:14:21.620 align:start position:0%
for supervisor
 

00:14:21.620 --> 00:14:24.069 align:start position:0%
for supervisor
[Music]

00:14:24.069 --> 00:14:24.079 align:start position:0%
[Music]
 

00:14:24.079 --> 00:14:27.670 align:start position:0%
[Music]
other<00:14:24.320><c> than</c><00:14:24.399><c> that</c><00:14:24.720><c> it's</c><00:14:26.240><c> there's</c><00:14:26.639><c> five</c><00:14:26.959><c> people</c>

00:14:27.670 --> 00:14:27.680 align:start position:0%
other than that it's there's five people
 

00:14:27.680 --> 00:14:30.870 align:start position:0%
other than that it's there's five people
pick<00:14:27.839><c> these</c><00:14:28.079><c> names</c><00:14:30.000><c> somebody's</c><00:14:30.399><c> asking</c><00:14:30.720><c> don't</c>

00:14:30.870 --> 00:14:30.880 align:start position:0%
pick these names somebody's asking don't
 

00:14:30.880 --> 00:14:32.310 align:start position:0%
pick these names somebody's asking don't
the<00:14:30.959><c> vm.c</c><00:14:31.600><c> functions</c>

00:14:32.310 --> 00:14:32.320 align:start position:0%
the vm.c functions
 

00:14:32.320 --> 00:14:34.710 align:start position:0%
the vm.c functions
access<00:14:32.639><c> physical</c><00:14:32.959><c> memory</c><00:14:33.680><c> directly</c><00:14:34.320><c> that's</c>

00:14:34.710 --> 00:14:34.720 align:start position:0%
access physical memory directly that's
 

00:14:34.720 --> 00:14:35.829 align:start position:0%
access physical memory directly that's
absolutely<00:14:35.199><c> true</c>

00:14:35.829 --> 00:14:35.839 align:start position:0%
absolutely true
 

00:14:35.839 --> 00:14:37.110 align:start position:0%
absolutely true
the<00:14:36.000><c> reason</c><00:14:36.320><c> why</c><00:14:36.480><c> they're</c><00:14:36.639><c> allowed</c><00:14:36.880><c> to</c><00:14:36.959><c> do</c>

00:14:37.110 --> 00:14:37.120 align:start position:0%
the reason why they're allowed to do
 

00:14:37.120 --> 00:14:39.350 align:start position:0%
the reason why they're allowed to do
that<00:14:37.360><c> though</c><00:14:37.600><c> is</c><00:14:37.760><c> that</c><00:14:37.839><c> the</c><00:14:38.000><c> kernel</c><00:14:38.399><c> carefully</c>

00:14:39.350 --> 00:14:39.360 align:start position:0%
that though is that the kernel carefully
 

00:14:39.360 --> 00:14:41.670 align:start position:0%
that though is that the kernel carefully
sets<00:14:39.680><c> up</c><00:14:39.839><c> direct</c><00:14:40.399><c> mappings</c><00:14:41.040><c> in</c><00:14:41.120><c> the</c><00:14:41.279><c> page</c>

00:14:41.670 --> 00:14:41.680 align:start position:0%
sets up direct mappings in the page
 

00:14:41.680 --> 00:14:42.470 align:start position:0%
sets up direct mappings in the page
table

00:14:42.470 --> 00:14:42.480 align:start position:0%
table
 

00:14:42.480 --> 00:14:44.310 align:start position:0%
table
there's<00:14:42.959><c> many</c><00:14:43.199><c> many</c><00:14:43.440><c> pte's</c><00:14:43.839><c> in</c><00:14:43.920><c> the</c><00:14:44.000><c> page</c>

00:14:44.310 --> 00:14:44.320 align:start position:0%
there's many many pte's in the page
 

00:14:44.320 --> 00:14:46.710 align:start position:0%
there's many many pte's in the page
table<00:14:44.639><c> which</c><00:14:44.959><c> cause</c>

00:14:46.710 --> 00:14:46.720 align:start position:0%
table which cause
 

00:14:46.720 --> 00:14:49.030 align:start position:0%
table which cause
whenever<00:14:47.120><c> the</c><00:14:47.279><c> colonel</c><00:14:48.320><c> tries</c><00:14:48.560><c> to</c><00:14:48.720><c> read</c><00:14:48.959><c> or</c>

00:14:49.030 --> 00:14:49.040 align:start position:0%
whenever the colonel tries to read or
 

00:14:49.040 --> 00:14:50.710 align:start position:0%
whenever the colonel tries to read or
write<00:14:49.279><c> a</c><00:14:49.440><c> physical</c><00:14:49.839><c> address</c><00:14:50.240><c> it</c><00:14:50.399><c> actually</c><00:14:50.639><c> is</c>

00:14:50.710 --> 00:14:50.720 align:start position:0%
write a physical address it actually is
 

00:14:50.720 --> 00:14:53.030 align:start position:0%
write a physical address it actually is
a<00:14:50.800><c> virtual</c><00:14:51.199><c> address</c><00:14:51.519><c> that's</c><00:14:51.839><c> translated</c>

00:14:53.030 --> 00:14:53.040 align:start position:0%
a virtual address that's translated
 

00:14:53.040 --> 00:14:55.030 align:start position:0%
a virtual address that's translated
by<00:14:53.199><c> the</c><00:14:53.360><c> kernel</c><00:14:53.680><c> page</c><00:14:53.920><c> table</c><00:14:54.320><c> into</c><00:14:54.560><c> the</c>

00:14:55.030 --> 00:14:55.040 align:start position:0%
by the kernel page table into the
 

00:14:55.040 --> 00:14:56.389 align:start position:0%
by the kernel page table into the
physical<00:14:55.360><c> address</c><00:14:55.680><c> that's</c><00:14:55.920><c> equal</c>

00:14:56.389 --> 00:14:56.399 align:start position:0%
physical address that's equal
 

00:14:56.399 --> 00:14:59.189 align:start position:0%
physical address that's equal
to<00:14:56.560><c> the</c><00:14:56.800><c> virtual</c><00:14:57.120><c> address</c><00:14:57.440><c> it</c><00:14:57.519><c> was</c><00:14:57.680><c> issued</c><00:14:58.720><c> so</c>

00:14:59.189 --> 00:14:59.199 align:start position:0%
to the virtual address it was issued so
 

00:14:59.199 --> 00:15:01.590 align:start position:0%
to the virtual address it was issued so
it's<00:14:59.360><c> like</c><00:14:59.600><c> super</c><00:14:59.839><c> convenient</c><00:15:00.320><c> in</c><00:15:00.399><c> the</c><00:15:00.480><c> kernel</c>

00:15:01.590 --> 00:15:01.600 align:start position:0%
it's like super convenient in the kernel
 

00:15:01.600 --> 00:15:03.590 align:start position:0%
it's like super convenient in the kernel
once<00:15:01.839><c> you're</c><00:15:02.079><c> using</c><00:15:02.320><c> the</c><00:15:02.480><c> kernel</c><00:15:02.880><c> page</c><00:15:03.199><c> table</c>

00:15:03.590 --> 00:15:03.600 align:start position:0%
once you're using the kernel page table
 

00:15:03.600 --> 00:15:05.189 align:start position:0%
once you're using the kernel page table
because<00:15:03.920><c> the</c><00:15:04.079><c> kernel</c><00:15:04.320><c> has</c><00:15:04.480><c> all</c><00:15:04.639><c> these</c><00:15:04.800><c> direct</c>

00:15:05.189 --> 00:15:05.199 align:start position:0%
because the kernel has all these direct
 

00:15:05.199 --> 00:15:06.389 align:start position:0%
because the kernel has all these direct
mappings

00:15:06.389 --> 00:15:06.399 align:start position:0%
mappings
 

00:15:06.399 --> 00:15:09.990 align:start position:0%
mappings
but<00:15:06.880><c> until</c><00:15:07.440><c> we've</c><00:15:07.760><c> set</c><00:15:08.000><c> up</c><00:15:09.120><c> the</c><00:15:09.279><c> current</c>

00:15:09.990 --> 00:15:10.000 align:start position:0%
but until we've set up the current
 

00:15:10.000 --> 00:15:12.310 align:start position:0%
but until we've set up the current
until<00:15:10.959><c> the</c><00:15:11.120><c> trap</c><00:15:11.360><c> machinery</c><00:15:11.839><c> has</c><00:15:11.920><c> switched</c><00:15:12.240><c> to</c>

00:15:12.310 --> 00:15:12.320 align:start position:0%
until the trap machinery has switched to
 

00:15:12.320 --> 00:15:13.670 align:start position:0%
until the trap machinery has switched to
the<00:15:12.399><c> kernel</c><00:15:12.639><c> page</c><00:15:12.959><c> table</c>

00:15:13.670 --> 00:15:13.680 align:start position:0%
the kernel page table
 

00:15:13.680 --> 00:15:15.750 align:start position:0%
the kernel page table
none<00:15:13.839><c> of</c><00:15:13.920><c> those</c><00:15:14.079><c> mappings</c><00:15:14.480><c> are</c><00:15:14.639><c> available</c><00:15:15.360><c> so</c>

00:15:15.750 --> 00:15:15.760 align:start position:0%
none of those mappings are available so
 

00:15:15.760 --> 00:15:16.870 align:start position:0%
none of those mappings are available so
until<00:15:16.079><c> the</c>

00:15:16.870 --> 00:15:16.880 align:start position:0%
until the
 

00:15:16.880 --> 00:15:18.150 align:start position:0%
until the
kernel<00:15:17.199><c> trap</c><00:15:17.440><c> code</c><00:15:17.680><c> is</c><00:15:17.760><c> switched</c><00:15:18.000><c> to</c><00:15:18.079><c> the</c>

00:15:18.150 --> 00:15:18.160 align:start position:0%
kernel trap code is switched to the
 

00:15:18.160 --> 00:15:19.430 align:start position:0%
kernel trap code is switched to the
kernel<00:15:18.399><c> page</c><00:15:18.560><c> table</c><00:15:18.880><c> we're</c><00:15:18.959><c> still</c><00:15:19.120><c> using</c><00:15:19.360><c> the</c>

00:15:19.430 --> 00:15:19.440 align:start position:0%
kernel page table we're still using the
 

00:15:19.440 --> 00:15:21.189 align:start position:0%
kernel page table we're still using the
user<00:15:19.680><c> page</c><00:15:19.920><c> table</c><00:15:20.160><c> which</c><00:15:20.320><c> has</c><00:15:20.560><c> none</c><00:15:20.800><c> of</c><00:15:20.959><c> these</c>

00:15:21.189 --> 00:15:21.199 align:start position:0%
user page table which has none of these
 

00:15:21.199 --> 00:15:23.350 align:start position:0%
user page table which has none of these
convenient<00:15:21.680><c> mappings</c>

00:15:23.350 --> 00:15:23.360 align:start position:0%
convenient mappings
 

00:15:23.360 --> 00:15:29.749 align:start position:0%
convenient mappings
for<00:15:23.600><c> physical</c><00:15:24.839><c> addresses</c>

00:15:29.749 --> 00:15:29.759 align:start position:0%
 
 

00:15:29.759 --> 00:15:34.710 align:start position:0%
 
okay

00:15:34.710 --> 00:15:34.720 align:start position:0%
 
 

00:15:34.720 --> 00:15:37.829 align:start position:0%
 
can<00:15:34.880><c> i</c><00:15:34.959><c> ask</c><00:15:35.120><c> a</c><00:15:35.199><c> question</c><00:15:36.079><c> please</c><00:15:37.199><c> um</c>

00:15:37.829 --> 00:15:37.839 align:start position:0%
can i ask a question please um
 

00:15:37.839 --> 00:15:41.110 align:start position:0%
can i ask a question please um
so<00:15:38.839><c> um</c><00:15:40.320><c> um</c>

00:15:41.110 --> 00:15:41.120 align:start position:0%
so um um
 

00:15:41.120 --> 00:15:43.110 align:start position:0%
so um um
i<00:15:41.279><c> don't</c><00:15:41.440><c> know</c><00:15:41.759><c> this</c><00:15:42.000><c> is</c><00:15:42.160><c> maybe</c><00:15:42.480><c> not</c><00:15:42.720><c> exactly</c>

00:15:43.110 --> 00:15:43.120 align:start position:0%
i don't know this is maybe not exactly
 

00:15:43.120 --> 00:15:45.030 align:start position:0%
i don't know this is maybe not exactly
relevant<00:15:43.600><c> to</c><00:15:43.759><c> what</c><00:15:44.000><c> was</c><00:15:44.160><c> just</c><00:15:44.399><c> said</c><00:15:44.720><c> but</c>

00:15:45.030 --> 00:15:45.040 align:start position:0%
relevant to what was just said but
 

00:15:45.040 --> 00:15:48.230 align:start position:0%
relevant to what was just said but
um<00:15:46.160><c> the</c><00:15:46.480><c> read</c><00:15:46.800><c> and</c><00:15:46.880><c> write</c><00:15:47.199><c> system</c><00:15:47.600><c> calls</c><00:15:47.920><c> right</c>

00:15:48.230 --> 00:15:48.240 align:start position:0%
um the read and write system calls right
 

00:15:48.240 --> 00:15:48.870 align:start position:0%
um the read and write system calls right
like<00:15:48.480><c> those</c>

00:15:48.870 --> 00:15:48.880 align:start position:0%
like those
 

00:15:48.880 --> 00:15:51.509 align:start position:0%
like those
are<00:15:49.120><c> pretty</c><00:15:49.480><c> expensive</c><00:15:50.639><c> compared</c><00:15:51.040><c> to</c><00:15:51.199><c> just</c><00:15:51.440><c> a</c>

00:15:51.509 --> 00:15:51.519 align:start position:0%
are pretty expensive compared to just a
 

00:15:51.519 --> 00:15:52.150 align:start position:0%
are pretty expensive compared to just a
memory

00:15:52.150 --> 00:15:52.160 align:start position:0%
memory
 

00:15:52.160 --> 00:15:53.350 align:start position:0%
memory
store<00:15:52.560><c> because</c><00:15:52.720><c> you</c><00:15:52.880><c> have</c><00:15:53.040><c> to</c><00:15:53.120><c> actually</c>

00:15:53.350 --> 00:15:53.360 align:start position:0%
store because you have to actually
 

00:15:53.360 --> 00:15:55.430 align:start position:0%
store because you have to actually
switch<00:15:53.759><c> modes</c><00:15:54.079><c> and</c><00:15:54.240><c> go</c><00:15:54.399><c> back</c><00:15:54.639><c> and</c><00:15:54.720><c> forth</c>

00:15:55.430 --> 00:15:55.440 align:start position:0%
switch modes and go back and forth
 

00:15:55.440 --> 00:15:57.749 align:start position:0%
switch modes and go back and forth
would<00:15:55.680><c> it</c><00:15:55.759><c> be</c><00:15:56.000><c> possible</c><00:15:56.480><c> to</c><00:15:56.639><c> just</c><00:15:56.959><c> like</c>

00:15:57.749 --> 00:15:57.759 align:start position:0%
would it be possible to just like
 

00:15:57.759 --> 00:15:59.990 align:start position:0%
would it be possible to just like
instead<00:15:58.160><c> of</c><00:15:58.399><c> when</c><00:15:58.639><c> when</c><00:15:58.880><c> you</c><00:15:59.040><c> open</c><00:15:59.360><c> a</c><00:15:59.519><c> file</c>

00:15:59.990 --> 00:16:00.000 align:start position:0%
instead of when when you open a file
 

00:16:00.000 --> 00:16:01.430 align:start position:0%
instead of when when you open a file
instead<00:16:00.320><c> of</c><00:16:00.480><c> getting</c><00:16:00.800><c> back</c><00:16:01.040><c> a</c><00:16:01.199><c> file</c>

00:16:01.430 --> 00:16:01.440 align:start position:0%
instead of getting back a file
 

00:16:01.440 --> 00:16:03.350 align:start position:0%
instead of getting back a file
descriptor<00:16:02.000><c> that</c><00:16:02.160><c> you</c><00:16:02.320><c> call</c><00:16:02.639><c> with</c><00:16:02.880><c> the</c><00:16:02.959><c> system</c>

00:16:03.350 --> 00:16:03.360 align:start position:0%
descriptor that you call with the system
 

00:16:03.360 --> 00:16:03.990 align:start position:0%
descriptor that you call with the system
call

00:16:03.990 --> 00:16:04.000 align:start position:0%
call
 

00:16:04.000 --> 00:16:07.110 align:start position:0%
call
to<00:16:04.160><c> get</c><00:16:04.399><c> a</c><00:16:05.600><c> page</c><00:16:06.000><c> table</c><00:16:06.399><c> mapping</c>

00:16:07.110 --> 00:16:07.120 align:start position:0%
to get a page table mapping
 

00:16:07.120 --> 00:16:08.949 align:start position:0%
to get a page table mapping
and<00:16:07.199><c> then</c><00:16:07.440><c> you</c><00:16:07.519><c> would</c><00:16:07.680><c> just</c><00:16:08.000><c> write</c><00:16:08.240><c> to</c><00:16:08.480><c> a</c>

00:16:08.949 --> 00:16:08.959 align:start position:0%
and then you would just write to a
 

00:16:08.959 --> 00:16:10.550 align:start position:0%
and then you would just write to a
certain<00:16:09.360><c> address</c>

00:16:10.550 --> 00:16:10.560 align:start position:0%
certain address
 

00:16:10.560 --> 00:16:13.509 align:start position:0%
certain address
that's<00:16:10.800><c> just</c><00:16:11.120><c> mapped</c><00:16:11.680><c> to</c><00:16:11.920><c> the</c><00:16:12.240><c> device</c><00:16:13.199><c> and</c><00:16:13.360><c> you</c>

00:16:13.509 --> 00:16:13.519 align:start position:0%
that's just mapped to the device and you
 

00:16:13.519 --> 00:16:15.350 align:start position:0%
that's just mapped to the device and you
can<00:16:13.680><c> set</c><00:16:13.839><c> up</c><00:16:14.000><c> the</c><00:16:14.079><c> restrictions</c><00:16:14.800><c> so</c><00:16:14.959><c> that</c>

00:16:15.350 --> 00:16:15.360 align:start position:0%
can set up the restrictions so that
 

00:16:15.360 --> 00:16:17.829 align:start position:0%
can set up the restrictions so that
the<00:16:16.240><c> the</c><00:16:16.480><c> program</c><00:16:16.800><c> can</c><00:16:16.959><c> only</c><00:16:17.279><c> write</c><00:16:17.519><c> to</c><00:16:17.759><c> a</c>

00:16:17.829 --> 00:16:17.839 align:start position:0%
the the program can only write to a
 

00:16:17.839 --> 00:16:19.110 align:start position:0%
the the program can only write to a
device<00:16:18.240><c> to</c><00:16:18.480><c> like</c><00:16:18.720><c> a</c>

00:16:19.110 --> 00:16:19.120 align:start position:0%
device to like a
 

00:16:19.120 --> 00:16:20.790 align:start position:0%
device to like a
file<00:16:19.360><c> descriptor</c><00:16:19.839><c> that</c><00:16:20.079><c> it's</c><00:16:20.240><c> allowed</c><00:16:20.560><c> to</c>

00:16:20.790 --> 00:16:20.800 align:start position:0%
file descriptor that it's allowed to
 

00:16:20.800 --> 00:16:22.550 align:start position:0%
file descriptor that it's allowed to
which<00:16:21.040><c> is</c><00:16:21.360><c> allowed</c><00:16:21.680><c> to</c><00:16:21.839><c> through</c><00:16:22.079><c> the</c><00:16:22.160><c> virtual</c>

00:16:22.550 --> 00:16:22.560 align:start position:0%
which is allowed to through the virtual
 

00:16:22.560 --> 00:16:23.030 align:start position:0%
which is allowed to through the virtual
page

00:16:23.030 --> 00:16:23.040 align:start position:0%
page
 

00:16:23.040 --> 00:16:24.790 align:start position:0%
page
table<00:16:23.360><c> mapping</c><00:16:23.759><c> instead</c><00:16:24.079><c> of</c><00:16:24.240><c> jumping</c><00:16:24.480><c> to</c><00:16:24.639><c> the</c>

00:16:24.790 --> 00:16:24.800 align:start position:0%
table mapping instead of jumping to the
 

00:16:24.800 --> 00:16:26.150 align:start position:0%
table mapping instead of jumping to the
kernel<00:16:25.199><c> and</c><00:16:25.279><c> back</c>

00:16:26.150 --> 00:16:26.160 align:start position:0%
kernel and back
 

00:16:26.160 --> 00:16:28.230 align:start position:0%
kernel and back
yeah<00:16:26.480><c> that's</c><00:16:26.720><c> a</c><00:16:26.800><c> good</c><00:16:26.959><c> observation</c><00:16:28.000><c> and</c>

00:16:28.230 --> 00:16:28.240 align:start position:0%
yeah that's a good observation and
 

00:16:28.240 --> 00:16:29.509 align:start position:0%
yeah that's a good observation and
indeed<00:16:29.040><c> uh</c>

00:16:29.509 --> 00:16:29.519 align:start position:0%
indeed uh
 

00:16:29.519 --> 00:16:31.189 align:start position:0%
indeed uh
many<00:16:29.839><c> operating</c><00:16:30.160><c> systems</c><00:16:30.480><c> provide</c><00:16:30.880><c> this</c>

00:16:31.189 --> 00:16:31.199 align:start position:0%
many operating systems provide this
 

00:16:31.199 --> 00:16:33.749 align:start position:0%
many operating systems provide this
what's<00:16:31.600><c> called</c><00:16:32.000><c> memory</c><00:16:32.480><c> mapped</c><00:16:32.800><c> file</c><00:16:33.199><c> access</c>

00:16:33.749 --> 00:16:33.759 align:start position:0%
what's called memory mapped file access
 

00:16:33.759 --> 00:16:34.389 align:start position:0%
what's called memory mapped file access
where

00:16:34.389 --> 00:16:34.399 align:start position:0%
where
 

00:16:34.399 --> 00:16:36.550 align:start position:0%
where
indeed<00:16:35.279><c> you</c><00:16:35.440><c> map</c><00:16:35.680><c> pages</c><00:16:36.000><c> that</c><00:16:36.079><c> correspond</c><00:16:36.480><c> to</c>

00:16:36.550 --> 00:16:36.560 align:start position:0%
indeed you map pages that correspond to
 

00:16:36.560 --> 00:16:37.910 align:start position:0%
indeed you map pages that correspond to
the<00:16:36.639><c> file</c><00:16:36.959><c> contents</c>

00:16:37.910 --> 00:16:37.920 align:start position:0%
the file contents
 

00:16:37.920 --> 00:16:40.470 align:start position:0%
the file contents
into<00:16:38.160><c> the</c><00:16:38.399><c> into</c><00:16:38.639><c> your</c><00:16:38.800><c> virtual</c><00:16:39.360><c> into</c><00:16:39.519><c> the</c><00:16:39.680><c> user</c>

00:16:40.470 --> 00:16:40.480 align:start position:0%
into the into your virtual into the user
 

00:16:40.480 --> 00:16:42.069 align:start position:0%
into the into your virtual into the user
virtual<00:16:40.800><c> address</c><00:16:41.120><c> space</c><00:16:41.360><c> so</c><00:16:41.519><c> you</c><00:16:41.600><c> can</c><00:16:41.759><c> read</c><00:16:42.000><c> or</c>

00:16:42.069 --> 00:16:42.079 align:start position:0%
virtual address space so you can read or
 

00:16:42.079 --> 00:16:42.629 align:start position:0%
virtual address space so you can read or
write<00:16:42.320><c> them</c>

00:16:42.629 --> 00:16:42.639 align:start position:0%
write them
 

00:16:42.639 --> 00:16:45.350 align:start position:0%
write them
directly<00:16:43.120><c> through</c><00:16:43.279><c> memory</c><00:16:44.800><c> in</c><00:16:44.959><c> fact</c><00:16:45.120><c> you'll</c>

00:16:45.350 --> 00:16:45.360 align:start position:0%
directly through memory in fact you'll
 

00:16:45.360 --> 00:16:46.949 align:start position:0%
directly through memory in fact you'll
be<00:16:45.519><c> implementing</c><00:16:46.000><c> a</c><00:16:46.079><c> version</c><00:16:46.399><c> of</c><00:16:46.480><c> this</c>

00:16:46.949 --> 00:16:46.959 align:start position:0%
be implementing a version of this
 

00:16:46.959 --> 00:16:51.189 align:start position:0%
be implementing a version of this
in<00:16:47.199><c> the</c><00:16:47.600><c> map</c><00:16:48.079><c> lab</c><00:16:48.560><c> in</c><00:16:48.720><c> a</c><00:16:48.800><c> couple</c><00:16:49.040><c> of</c><00:16:49.199><c> weeks</c>

00:16:51.189 --> 00:16:51.199 align:start position:0%
in the map lab in a couple of weeks
 

00:16:51.199 --> 00:16:54.069 align:start position:0%
in the map lab in a couple of weeks
and<00:16:51.600><c> indeed</c><00:16:52.079><c> as</c><00:16:52.240><c> you</c><00:16:52.880><c> apply</c><00:16:53.279><c> it's</c><00:16:53.440><c> a</c><00:16:53.519><c> good</c><00:16:53.759><c> deal</c>

00:16:54.069 --> 00:16:54.079 align:start position:0%
and indeed as you apply it's a good deal
 

00:16:54.079 --> 00:16:54.870 align:start position:0%
and indeed as you apply it's a good deal
faster

00:16:54.870 --> 00:16:54.880 align:start position:0%
faster
 

00:16:54.880 --> 00:16:56.550 align:start position:0%
faster
for<00:16:55.040><c> many</c><00:16:55.279><c> programs</c><00:16:55.759><c> than</c><00:16:55.920><c> calling</c><00:16:56.160><c> a</c><00:16:56.240><c> medium</c>

00:16:56.550 --> 00:16:56.560 align:start position:0%
for many programs than calling a medium
 

00:16:56.560 --> 00:16:59.110 align:start position:0%
for many programs than calling a medium
right

00:16:59.110 --> 00:16:59.120 align:start position:0%
 
 

00:16:59.120 --> 00:17:02.310 align:start position:0%
 
okay

00:17:02.310 --> 00:17:02.320 align:start position:0%
 
 

00:17:02.320 --> 00:17:19.510 align:start position:0%
 
i'm<00:17:02.480><c> gonna</c><00:17:03.120><c> switch</c><00:17:03.759><c> to</c><00:17:04.000><c> the</c><00:17:04.880><c> gdb</c><00:17:16.839><c> world</c>

00:17:19.510 --> 00:17:19.520 align:start position:0%
i'm gonna switch to the gdb world
 

00:17:19.520 --> 00:17:20.949 align:start position:0%
i'm gonna switch to the gdb world
all<00:17:19.600><c> right</c><00:17:19.760><c> at</c><00:17:19.760><c> this</c><00:17:20.000><c> point</c><00:17:20.240><c> everybody</c><00:17:20.720><c> should</c>

00:17:20.949 --> 00:17:20.959 align:start position:0%
all right at this point everybody should
 

00:17:20.959 --> 00:17:26.309 align:start position:0%
all right at this point everybody should
uh

00:17:26.309 --> 00:17:26.319 align:start position:0%
 
 

00:17:26.319 --> 00:17:31.190 align:start position:0%
 
see<00:17:26.640><c> my</c><00:17:27.120><c> screen</c><00:17:27.600><c> share</c>

00:17:31.190 --> 00:17:31.200 align:start position:0%
 
 

00:17:31.200 --> 00:17:33.270 align:start position:0%
 
we're<00:17:31.360><c> going</c><00:17:31.440><c> to</c><00:17:31.520><c> watch</c><00:17:31.760><c> an</c><00:17:32.080><c> xv</c><00:17:32.400><c> system</c><00:17:32.799><c> call</c>

00:17:33.270 --> 00:17:33.280 align:start position:0%
we're going to watch an xv system call
 

00:17:33.280 --> 00:17:35.190 align:start position:0%
we're going to watch an xv system call
the<00:17:33.600><c> write</c>

00:17:35.190 --> 00:17:35.200 align:start position:0%
the write
 

00:17:35.200 --> 00:17:38.070 align:start position:0%
the write
the<00:17:35.360><c> shells</c><00:17:35.840><c> right</c><00:17:36.080><c> of</c><00:17:36.240><c> its</c><00:17:36.480><c> initial</c><00:17:36.880><c> prompt</c>

00:17:38.070 --> 00:17:38.080 align:start position:0%
the shells right of its initial prompt
 

00:17:38.080 --> 00:17:39.430 align:start position:0%
the shells right of its initial prompt
make<00:17:38.240><c> its</c><00:17:38.400><c> way</c><00:17:38.559><c> through</c><00:17:38.720><c> the</c><00:17:38.799><c> system</c><00:17:39.039><c> you</c><00:17:39.200><c> can</c>

00:17:39.430 --> 00:17:39.440 align:start position:0%
make its way through the system you can
 

00:17:39.440 --> 00:17:39.750 align:start position:0%
make its way through the system you can
see

00:17:39.750 --> 00:17:39.760 align:start position:0%
see
 

00:17:39.760 --> 00:17:42.390 align:start position:0%
see
the<00:17:40.000><c> user</c><00:17:40.480><c> code</c><00:17:40.960><c> that</c><00:17:41.120><c> initiates</c><00:17:41.679><c> this</c><00:17:42.160><c> in</c>

00:17:42.390 --> 00:17:42.400 align:start position:0%
the user code that initiates this in
 

00:17:42.400 --> 00:17:44.789 align:start position:0%
the user code that initiates this in
sh.c

00:17:44.789 --> 00:17:44.799 align:start position:0%
sh.c
 

00:17:44.799 --> 00:17:45.990 align:start position:0%
sh.c
and<00:17:44.960><c> i'm</c><00:17:45.120><c> showing</c><00:17:45.440><c> that</c><00:17:45.520><c> here</c><00:17:45.760><c> it's</c><00:17:45.840><c> just</c>

00:17:45.990 --> 00:17:46.000 align:start position:0%
and i'm showing that here it's just
 

00:17:46.000 --> 00:17:49.110 align:start position:0%
and i'm showing that here it's just
making<00:17:47.360><c> the</c><00:17:47.520><c> right</c><00:17:47.840><c> system</c><00:17:48.240><c> call</c>

00:17:49.110 --> 00:17:49.120 align:start position:0%
making the right system call
 

00:17:49.120 --> 00:17:51.990 align:start position:0%
making the right system call
with<00:17:49.360><c> this</c><00:17:49.520><c> dollar</c><00:17:49.840><c> sign</c><00:17:50.160><c> prompt</c><00:17:51.039><c> um</c><00:17:51.600><c> let</c><00:17:51.760><c> me</c>

00:17:51.990 --> 00:17:52.000 align:start position:0%
with this dollar sign prompt um let me
 

00:17:52.000 --> 00:17:58.830 align:start position:0%
with this dollar sign prompt um let me
fire<00:17:52.400><c> up</c>

00:17:58.830 --> 00:17:58.840 align:start position:0%
 
 

00:17:58.840 --> 00:18:03.350 align:start position:0%
 
gdb

00:18:03.350 --> 00:18:03.360 align:start position:0%
 
 

00:18:03.360 --> 00:18:06.710 align:start position:0%
 
excellent<00:18:04.160><c> so</c><00:18:05.440><c> what</c><00:18:05.600><c> actually</c><00:18:05.919><c> happens</c><00:18:06.480><c> when</c>

00:18:06.710 --> 00:18:06.720 align:start position:0%
excellent so what actually happens when
 

00:18:06.720 --> 00:18:07.270 align:start position:0%
excellent so what actually happens when
user

00:18:07.270 --> 00:18:07.280 align:start position:0%
user
 

00:18:07.280 --> 00:18:09.909 align:start position:0%
user
code<00:18:07.760><c> when</c><00:18:07.919><c> the</c><00:18:08.160><c> shell</c><00:18:08.480><c> calls</c><00:18:08.799><c> right</c><00:18:09.200><c> right</c><00:18:09.520><c> is</c>

00:18:09.909 --> 00:18:09.919 align:start position:0%
code when the shell calls right right is
 

00:18:09.919 --> 00:18:10.789 align:start position:0%
code when the shell calls right right is
just<00:18:10.240><c> a</c>

00:18:10.789 --> 00:18:10.799 align:start position:0%
just a
 

00:18:10.799 --> 00:18:13.909 align:start position:0%
just a
it's<00:18:10.960><c> a</c><00:18:11.039><c> library</c><00:18:11.440><c> function</c><00:18:11.760><c> that's</c><00:18:13.440><c> part</c><00:18:13.679><c> of</c>

00:18:13.909 --> 00:18:13.919 align:start position:0%
it's a library function that's part of
 

00:18:13.919 --> 00:18:15.830 align:start position:0%
it's a library function that's part of
the

00:18:15.830 --> 00:18:15.840 align:start position:0%
the
 

00:18:15.840 --> 00:18:18.390 align:start position:0%
the
that's<00:18:16.080><c> linked</c><00:18:16.320><c> into</c><00:18:16.480><c> the</c><00:18:16.640><c> shell</c><00:18:17.840><c> and</c><00:18:18.000><c> you</c><00:18:18.160><c> can</c>

00:18:18.390 --> 00:18:18.400 align:start position:0%
that's linked into the shell and you can
 

00:18:18.400 --> 00:18:20.080 align:start position:0%
that's linked into the shell and you can
see<00:18:18.640><c> the</c><00:18:18.960><c> source</c><00:18:19.280><c> for</c><00:18:19.520><c> it</c><00:18:19.760><c> in</c>

00:18:20.080 --> 00:18:20.090 align:start position:0%
see the source for it in
 

00:18:20.090 --> 00:18:21.950 align:start position:0%
see the source for it in
[Music]

00:18:21.950 --> 00:18:21.960 align:start position:0%
[Music]
 

00:18:21.960 --> 00:18:24.630 align:start position:0%
[Music]
usys.s

00:18:24.630 --> 00:18:24.640 align:start position:0%
usys.s
 

00:18:24.640 --> 00:18:26.710 align:start position:0%
usys.s
so<00:18:24.880><c> it's</c><00:18:25.360><c> this</c><00:18:25.600><c> couple</c><00:18:25.760><c> of</c><00:18:25.919><c> instructions</c><00:18:26.480><c> here</c>

00:18:26.710 --> 00:18:26.720 align:start position:0%
so it's this couple of instructions here
 

00:18:26.720 --> 00:18:29.430 align:start position:0%
so it's this couple of instructions here
is<00:18:26.840><c> the</c><00:18:27.919><c> implementation</c><00:18:28.720><c> of</c><00:18:28.880><c> the</c><00:18:29.039><c> write</c>

00:18:29.430 --> 00:18:29.440 align:start position:0%
is the implementation of the write
 

00:18:29.440 --> 00:18:30.230 align:start position:0%
is the implementation of the write
function

00:18:30.230 --> 00:18:30.240 align:start position:0%
function
 

00:18:30.240 --> 00:18:33.669 align:start position:0%
function
that<00:18:30.400><c> the</c><00:18:30.559><c> shell</c><00:18:30.799><c> is</c><00:18:30.880><c> actually</c><00:18:31.200><c> calling</c><00:18:32.160><c> and</c>

00:18:33.669 --> 00:18:33.679 align:start position:0%
that the shell is actually calling and
 

00:18:33.679 --> 00:18:35.669 align:start position:0%
that the shell is actually calling and
this<00:18:33.840><c> is</c><00:18:33.919><c> a</c><00:18:34.000><c> very</c><00:18:34.240><c> short</c><00:18:34.480><c> function</c><00:18:35.120><c> all</c><00:18:35.280><c> it's</c>

00:18:35.669 --> 00:18:35.679 align:start position:0%
this is a very short function all it's
 

00:18:35.679 --> 00:18:37.669 align:start position:0%
this is a very short function all it's
doing<00:18:36.080><c> is</c><00:18:36.400><c> loading</c><00:18:36.720><c> into</c><00:18:36.960><c> a7</c>

00:18:37.669 --> 00:18:37.679 align:start position:0%
doing is loading into a7
 

00:18:37.679 --> 00:18:39.990 align:start position:0%
doing is loading into a7
a<00:18:37.760><c> number</c><00:18:38.480><c> cis</c><00:18:38.880><c> write</c><00:18:39.200><c> which</c><00:18:39.440><c> is</c><00:18:39.520><c> just</c>

00:18:39.990 --> 00:18:40.000 align:start position:0%
a number cis write which is just
 

00:18:40.000 --> 00:18:42.150 align:start position:0%
a number cis write which is just
symbolically<00:18:40.559><c> defined</c><00:18:40.960><c> to</c><00:18:41.039><c> be</c><00:18:41.200><c> 16</c><00:18:41.760><c> that</c><00:18:41.840><c> tells</c>

00:18:42.150 --> 00:18:42.160 align:start position:0%
symbolically defined to be 16 that tells
 

00:18:42.160 --> 00:18:43.750 align:start position:0%
symbolically defined to be 16 that tells
the<00:18:42.240><c> kernel</c>

00:18:43.750 --> 00:18:43.760 align:start position:0%
the kernel
 

00:18:43.760 --> 00:18:47.029 align:start position:0%
the kernel
i<00:18:43.919><c> want</c><00:18:44.080><c> to</c><00:18:44.400><c> run</c><00:18:44.559><c> the</c><00:18:44.799><c> 16th</c><00:18:46.240><c> system</c><00:18:46.559><c> call</c><00:18:46.799><c> which</c>

00:18:47.029 --> 00:18:47.039 align:start position:0%
i want to run the 16th system call which
 

00:18:47.039 --> 00:18:48.549 align:start position:0%
i want to run the 16th system call which
happens<00:18:47.280><c> to</c><00:18:47.360><c> be</c><00:18:47.520><c> right</c>

00:18:48.549 --> 00:18:48.559 align:start position:0%
happens to be right
 

00:18:48.559 --> 00:18:50.549 align:start position:0%
happens to be right
and<00:18:48.640><c> then</c><00:18:48.799><c> this</c><00:18:48.960><c> little</c><00:18:49.200><c> function</c><00:18:50.080><c> uses</c><00:18:50.400><c> the</c>

00:18:50.549 --> 00:18:50.559 align:start position:0%
and then this little function uses the
 

00:18:50.559 --> 00:18:52.470 align:start position:0%
and then this little function uses the
e-call<00:18:51.039><c> instruction</c>

00:18:52.470 --> 00:18:52.480 align:start position:0%
e-call instruction
 

00:18:52.480 --> 00:18:55.029 align:start position:0%
e-call instruction
which<00:18:52.720><c> is</c><00:18:52.799><c> what</c><00:18:53.039><c> actually</c><00:18:54.400><c> gets</c><00:18:54.640><c> the</c><00:18:54.799><c> code</c>

00:18:55.029 --> 00:18:55.039 align:start position:0%
which is what actually gets the code
 

00:18:55.039 --> 00:18:56.390 align:start position:0%
which is what actually gets the code
into<00:18:55.200><c> the</c><00:18:55.280><c> kernel</c><00:18:55.760><c> the</c><00:18:55.919><c> kernel</c>

00:18:56.390 --> 00:18:56.400 align:start position:0%
into the kernel the kernel
 

00:18:56.400 --> 00:18:59.029 align:start position:0%
into the kernel the kernel
does<00:18:56.640><c> its</c><00:18:56.799><c> thing</c><00:18:57.760><c> um</c><00:18:58.559><c> and</c><00:18:58.640><c> then</c><00:18:58.799><c> when</c><00:18:58.960><c> the</c>

00:18:59.029 --> 00:18:59.039 align:start position:0%
does its thing um and then when the
 

00:18:59.039 --> 00:19:01.510 align:start position:0%
does its thing um and then when the
kernel<00:18:59.280><c> is</c><00:18:59.360><c> finally</c><00:18:59.600><c> done</c><00:18:59.840><c> it</c><00:18:59.919><c> returns</c>

00:19:01.510 --> 00:19:01.520 align:start position:0%
kernel is finally done it returns
 

00:19:01.520 --> 00:19:03.190 align:start position:0%
kernel is finally done it returns
back<00:19:01.840><c> into</c><00:19:02.080><c> user</c><00:19:02.320><c> space</c><00:19:02.640><c> to</c><00:19:02.720><c> execute</c><00:19:03.120><c> the</c>

00:19:03.190 --> 00:19:03.200 align:start position:0%
back into user space to execute the
 

00:19:03.200 --> 00:19:04.950 align:start position:0%
back into user space to execute the
instruction<00:19:03.679><c> after</c><00:19:03.919><c> the</c><00:19:04.080><c> e-call</c>

00:19:04.950 --> 00:19:04.960 align:start position:0%
instruction after the e-call
 

00:19:04.960 --> 00:19:07.669 align:start position:0%
instruction after the e-call
which<00:19:05.200><c> is</c><00:19:05.280><c> that</c><00:19:05.520><c> rhett</c><00:19:06.240><c> that</c><00:19:06.640><c> returns</c><00:19:07.360><c> back</c><00:19:07.520><c> to</c>

00:19:07.669 --> 00:19:07.679 align:start position:0%
which is that rhett that returns back to
 

00:19:07.679 --> 00:19:08.870 align:start position:0%
which is that rhett that returns back to
the<00:19:07.840><c> shell</c>

00:19:08.870 --> 00:19:08.880 align:start position:0%
the shell
 

00:19:08.880 --> 00:19:10.870 align:start position:0%
the shell
returns<00:19:09.360><c> from</c><00:19:09.440><c> that</c><00:19:09.600><c> right</c><00:19:10.080><c> library</c><00:19:10.480><c> function</c>

00:19:10.870 --> 00:19:10.880 align:start position:0%
returns from that right library function
 

00:19:10.880 --> 00:19:12.950 align:start position:0%
returns from that right library function
back<00:19:11.039><c> into</c><00:19:11.200><c> the</c><00:19:11.360><c> shell</c>

00:19:12.950 --> 00:19:12.960 align:start position:0%
back into the shell
 

00:19:12.960 --> 00:19:14.630 align:start position:0%
back into the shell
so<00:19:13.120><c> what</c><00:19:13.280><c> i'd</c><00:19:13.440><c> like</c><00:19:13.600><c> to</c><00:19:13.679><c> do</c><00:19:13.919><c> in</c><00:19:14.000><c> order</c><00:19:14.240><c> to</c><00:19:14.480><c> show</c>

00:19:14.630 --> 00:19:14.640 align:start position:0%
so what i'd like to do in order to show
 

00:19:14.640 --> 00:19:15.990 align:start position:0%
so what i'd like to do in order to show
the<00:19:14.799><c> system</c><00:19:15.039><c> call</c><00:19:15.280><c> part</c><00:19:15.440><c> of</c><00:19:15.520><c> this</c>

00:19:15.990 --> 00:19:16.000 align:start position:0%
the system call part of this
 

00:19:16.000 --> 00:19:17.430 align:start position:0%
the system call part of this
i'm<00:19:16.320><c> going</c><00:19:16.400><c> to</c><00:19:16.480><c> start</c><00:19:16.640><c> by</c><00:19:16.799><c> putting</c><00:19:17.039><c> a</c><00:19:17.120><c> break</c>

00:19:17.430 --> 00:19:17.440 align:start position:0%
i'm going to start by putting a break
 

00:19:17.440 --> 00:19:19.029 align:start position:0%
i'm going to start by putting a break
point<00:19:18.400><c> on</c><00:19:18.640><c> that</c>

00:19:19.029 --> 00:19:19.039 align:start position:0%
point on that
 

00:19:19.039 --> 00:19:22.390 align:start position:0%
point on that
e-call<00:19:19.840><c> instruction</c><00:19:21.760><c> and</c>

00:19:22.390 --> 00:19:22.400 align:start position:0%
e-call instruction and
 

00:19:22.400 --> 00:19:24.310 align:start position:0%
e-call instruction and
we<00:19:22.559><c> need</c><00:19:22.720><c> to</c><00:19:22.799><c> know</c><00:19:22.960><c> its</c><00:19:23.120><c> address</c><00:19:23.440><c> of</c><00:19:23.520><c> course</c>

00:19:24.310 --> 00:19:24.320 align:start position:0%
we need to know its address of course
 

00:19:24.320 --> 00:19:26.029 align:start position:0%
we need to know its address of course
but<00:19:24.559><c> we</c><00:19:24.720><c> can</c><00:19:24.799><c> find</c><00:19:25.039><c> that</c><00:19:25.200><c> out</c><00:19:25.360><c> by</c><00:19:25.520><c> looking</c><00:19:25.840><c> in</c>

00:19:26.029 --> 00:19:26.039 align:start position:0%
but we can find that out by looking in
 

00:19:26.039 --> 00:19:28.150 align:start position:0%
but we can find that out by looking in
sh.asm<00:19:27.120><c> which</c><00:19:27.360><c> the</c>

00:19:28.150 --> 00:19:28.160 align:start position:0%
sh.asm which the
 

00:19:28.160 --> 00:19:31.590 align:start position:0%
sh.asm which the
xp6<00:19:28.640><c> compilation</c><00:19:29.440><c> process</c><00:19:29.840><c> produces</c><00:19:31.120><c> um</c><00:19:31.440><c> and</c>

00:19:31.590 --> 00:19:31.600 align:start position:0%
xp6 compilation process produces um and
 

00:19:31.600 --> 00:19:32.990 align:start position:0%
xp6 compilation process produces um and
an

00:19:32.990 --> 00:19:33.000 align:start position:0%
an
 

00:19:33.000 --> 00:19:36.230 align:start position:0%
an
xbsh.asm<00:19:34.080><c> there's</c><00:19:34.400><c> a</c><00:19:35.280><c> assembly</c><00:19:35.760><c> code</c><00:19:36.000><c> with</c>

00:19:36.230 --> 00:19:36.240 align:start position:0%
xbsh.asm there's a assembly code with
 

00:19:36.240 --> 00:19:37.510 align:start position:0%
xbsh.asm there's a assembly code with
addresses

00:19:37.510 --> 00:19:37.520 align:start position:0%
addresses
 

00:19:37.520 --> 00:19:41.510 align:start position:0%
addresses
of<00:19:38.160><c> the</c><00:19:38.400><c> um</c><00:19:40.400><c> the</c><00:19:40.559><c> instructions</c>

00:19:41.510 --> 00:19:41.520 align:start position:0%
of the um the instructions
 

00:19:41.520 --> 00:19:43.510 align:start position:0%
of the um the instructions
for<00:19:42.000><c> the</c><00:19:42.160><c> shell</c><00:19:42.880><c> so</c><00:19:43.039><c> i'm</c><00:19:43.120><c> going</c><00:19:43.200><c> to</c><00:19:43.280><c> put</c><00:19:43.440><c> a</c>

00:19:43.510 --> 00:19:43.520 align:start position:0%
for the shell so i'm going to put a
 

00:19:43.520 --> 00:19:44.630 align:start position:0%
for the shell so i'm going to put a
breakpoint<00:19:44.080><c> on</c><00:19:44.240><c> the</c><00:19:44.400><c> e</c>

00:19:44.630 --> 00:19:44.640 align:start position:0%
breakpoint on the e
 

00:19:44.640 --> 00:19:47.909 align:start position:0%
breakpoint on the e
call<00:19:44.880><c> instruction</c><00:19:45.360><c> which</c><00:19:45.600><c> is</c><00:19:45.760><c> it</c><00:19:47.120><c> d</c><00:19:47.440><c> address</c>

00:19:47.909 --> 00:19:47.919 align:start position:0%
call instruction which is it d address
 

00:19:47.919 --> 00:19:51.270 align:start position:0%
call instruction which is it d address
de6

00:19:51.270 --> 00:19:51.280 align:start position:0%
 
 

00:19:51.280 --> 00:19:52.870 align:start position:0%
 
excellent<00:19:51.600><c> now</c><00:19:51.760><c> i'm</c><00:19:51.840><c> going</c><00:19:51.919><c> to</c><00:19:52.480><c> actually</c>

00:19:52.870 --> 00:19:52.880 align:start position:0%
excellent now i'm going to actually
 

00:19:52.880 --> 00:19:54.549 align:start position:0%
excellent now i'm going to actually
start<00:19:53.200><c> xc6</c><00:19:53.760><c> running</c>

00:19:54.549 --> 00:19:54.559 align:start position:0%
start xc6 running
 

00:19:54.559 --> 00:19:57.669 align:start position:0%
start xc6 running
and<00:19:54.720><c> i'm</c><00:19:54.880><c> hoping</c><00:19:55.200><c> to</c><00:19:56.160><c> have</c><00:19:56.320><c> the</c><00:19:56.480><c> system</c><00:19:56.799><c> break</c>

00:19:57.669 --> 00:19:57.679 align:start position:0%
and i'm hoping to have the system break
 

00:19:57.679 --> 00:20:01.990 align:start position:0%
and i'm hoping to have the system break
in<00:19:57.760><c> the</c><00:19:57.919><c> shell</c><00:19:58.720><c> just</c><00:19:58.960><c> before</c><00:19:59.280><c> executing</c><00:19:59.679><c> ecall</c>

00:20:01.990 --> 00:20:02.000 align:start position:0%
in the shell just before executing ecall
 

00:20:02.000 --> 00:20:04.789 align:start position:0%
in the shell just before executing ecall
all<00:20:02.159><c> right</c><00:20:02.480><c> excellent</c><00:20:03.280><c> um</c><00:20:03.840><c> we're</c><00:20:04.000><c> now</c><00:20:04.480><c> you</c><00:20:04.640><c> can</c>

00:20:04.789 --> 00:20:04.799 align:start position:0%
all right excellent um we're now you can
 

00:20:04.799 --> 00:20:06.549 align:start position:0%
all right excellent um we're now you can
see<00:20:04.960><c> from</c><00:20:05.120><c> gdb</c><00:20:05.520><c> we're</c><00:20:05.679><c> about</c><00:20:06.159><c> to</c>

00:20:06.549 --> 00:20:06.559 align:start position:0%
see from gdb we're about to
 

00:20:06.559 --> 00:20:11.350 align:start position:0%
see from gdb we're about to
uh<00:20:07.840><c> we're</c><00:20:08.000><c> about</c><00:20:08.240><c> to</c><00:20:08.320><c> execute</c><00:20:08.720><c> that</c><00:20:08.880><c> e</c><00:20:09.120><c> call</c>

00:20:11.350 --> 00:20:11.360 align:start position:0%
uh we're about to execute that e call
 

00:20:11.360 --> 00:20:15.029 align:start position:0%
uh we're about to execute that e call
let's<00:20:11.600><c> just</c><00:20:11.919><c> check</c><00:20:14.240><c> that</c><00:20:14.400><c> we</c><00:20:14.559><c> are</c><00:20:14.720><c> where</c><00:20:14.880><c> we</c>

00:20:15.029 --> 00:20:15.039 align:start position:0%
let's just check that we are where we
 

00:20:15.039 --> 00:20:15.990 align:start position:0%
let's just check that we are where we
think<00:20:15.200><c> we</c><00:20:15.440><c> are</c>

00:20:15.990 --> 00:20:16.000 align:start position:0%
think we are
 

00:20:16.000 --> 00:20:17.909 align:start position:0%
think we are
let's<00:20:16.400><c> print</c><00:20:16.799><c> we</c><00:20:16.960><c> can</c><00:20:17.120><c> print</c><00:20:17.360><c> the</c><00:20:17.520><c> program</c>

00:20:17.909 --> 00:20:17.919 align:start position:0%
let's print we can print the program
 

00:20:17.919 --> 00:20:20.390 align:start position:0%
let's print we can print the program
counter<00:20:18.640><c> this</c><00:20:18.880><c> is</c><00:20:18.960><c> 0x</c><00:20:19.440><c> to</c><00:20:19.520><c> e6</c><00:20:19.919><c> just</c><00:20:20.080><c> what</c><00:20:20.240><c> we</c>

00:20:20.390 --> 00:20:20.400 align:start position:0%
counter this is 0x to e6 just what we
 

00:20:20.400 --> 00:20:25.909 align:start position:0%
counter this is 0x to e6 just what we
asked<00:20:20.640><c> for</c>

00:20:25.909 --> 00:20:25.919 align:start position:0%
 
 

00:20:25.919 --> 00:20:30.070 align:start position:0%
 
we<00:20:26.080><c> can</c><00:20:26.159><c> also</c><00:20:26.480><c> print</c><00:20:26.799><c> the</c><00:20:27.600><c> all</c><00:20:27.760><c> 32</c><00:20:28.320><c> registers</c>

00:20:30.070 --> 00:20:30.080 align:start position:0%
we can also print the all 32 registers
 

00:20:30.080 --> 00:20:32.789 align:start position:0%
we can also print the all 32 registers
and<00:20:31.200><c> some</c><00:20:31.360><c> of</c><00:20:31.440><c> these</c><00:20:31.600><c> values</c><00:20:32.320><c> whatever</c><00:20:32.640><c> we</c>

00:20:32.789 --> 00:20:32.799 align:start position:0%
and some of these values whatever we
 

00:20:32.799 --> 00:20:34.070 align:start position:0%
and some of these values whatever we
don't<00:20:32.960><c> know</c><00:20:33.200><c> we</c><00:20:33.360><c> don't</c><00:20:33.520><c> care</c><00:20:33.679><c> what</c><00:20:33.840><c> they</c>

00:20:34.070 --> 00:20:34.080 align:start position:0%
don't know we don't care what they
 

00:20:34.080 --> 00:20:37.430 align:start position:0%
don't know we don't care what they
are<00:20:34.480><c> but</c><00:20:34.720><c> a0</c><00:20:35.440><c> a1</c><00:20:35.840><c> and</c><00:20:36.000><c> a2</c><00:20:36.720><c> are</c><00:20:36.960><c> the</c><00:20:37.120><c> three</c>

00:20:37.430 --> 00:20:37.440 align:start position:0%
are but a0 a1 and a2 are the three
 

00:20:37.440 --> 00:20:38.950 align:start position:0%
are but a0 a1 and a2 are the three
arguments<00:20:37.919><c> that</c><00:20:38.080><c> the</c><00:20:38.240><c> shell</c><00:20:38.559><c> passed</c>

00:20:38.950 --> 00:20:38.960 align:start position:0%
arguments that the shell passed
 

00:20:38.960 --> 00:20:41.669 align:start position:0%
arguments that the shell passed
right<00:20:40.559><c> so</c><00:20:40.720><c> those</c><00:20:40.880><c> arguments</c><00:20:41.360><c> are</c><00:20:41.520><c> file</c>

00:20:41.669 --> 00:20:41.679 align:start position:0%
right so those arguments are file
 

00:20:41.679 --> 00:20:42.710 align:start position:0%
right so those arguments are file
descriptor<00:20:42.320><c> two</c>

00:20:42.710 --> 00:20:42.720 align:start position:0%
descriptor two
 

00:20:42.720 --> 00:20:45.430 align:start position:0%
descriptor two
in<00:20:42.880><c> a</c><00:20:43.039><c> zero</c><00:20:43.919><c> um</c><00:20:44.240><c> the</c><00:20:44.480><c> pointer</c><00:20:44.799><c> to</c><00:20:44.960><c> the</c><00:20:45.039><c> buffer</c>

00:20:45.430 --> 00:20:45.440 align:start position:0%
in a zero um the pointer to the buffer
 

00:20:45.440 --> 00:20:47.110 align:start position:0%
in a zero um the pointer to the buffer
of<00:20:45.520><c> characters</c><00:20:46.080><c> that</c><00:20:46.159><c> the</c><00:20:46.400><c> shell</c><00:20:46.640><c> wants</c><00:20:46.960><c> to</c>

00:20:47.110 --> 00:20:47.120 align:start position:0%
of characters that the shell wants to
 

00:20:47.120 --> 00:20:48.710 align:start position:0%
of characters that the shell wants to
write<00:20:47.440><c> in</c><00:20:47.679><c> a1</c>

00:20:48.710 --> 00:20:48.720 align:start position:0%
write in a1
 

00:20:48.720 --> 00:20:50.310 align:start position:0%
write in a1
and<00:20:48.880><c> the</c><00:20:48.960><c> number</c><00:20:49.200><c> of</c><00:20:49.360><c> characters</c><00:20:49.760><c> it</c><00:20:49.919><c> wants</c><00:20:50.159><c> to</c>

00:20:50.310 --> 00:20:50.320 align:start position:0%
and the number of characters it wants to
 

00:20:50.320 --> 00:20:52.390 align:start position:0%
and the number of characters it wants to
write<00:20:50.640><c> in</c><00:20:50.960><c> a2</c>

00:20:52.390 --> 00:20:52.400 align:start position:0%
write in a2
 

00:20:52.400 --> 00:20:53.750 align:start position:0%
write in a2
and<00:20:52.480><c> we</c><00:20:52.640><c> can</c><00:20:52.799><c> convince</c><00:20:53.200><c> ourselves</c><00:20:53.520><c> that</c><00:20:53.679><c> we're</c>

00:20:53.750 --> 00:20:53.760 align:start position:0%
and we can convince ourselves that we're
 

00:20:53.760 --> 00:20:55.270 align:start position:0%
and we can convince ourselves that we're
looking<00:20:54.080><c> at</c><00:20:54.480><c> the</c><00:20:54.559><c> code</c><00:20:54.799><c> we</c><00:20:54.960><c> think</c><00:20:55.120><c> we're</c>

00:20:55.270 --> 00:20:55.280 align:start position:0%
looking at the code we think we're
 

00:20:55.280 --> 00:20:56.870 align:start position:0%
looking at the code we think we're
looking<00:20:55.600><c> at</c>

00:20:56.870 --> 00:20:56.880 align:start position:0%
looking at
 

00:20:56.880 --> 00:21:00.390 align:start position:0%
looking at
by<00:20:57.039><c> actually</c><00:20:57.360><c> printing</c><00:20:57.760><c> out</c>

00:21:00.390 --> 00:21:00.400 align:start position:0%
 
 

00:21:00.400 --> 00:21:02.149 align:start position:0%
 
the<00:21:00.559><c> bytes</c><00:21:01.200><c> in</c><00:21:01.280><c> that</c><00:21:01.520><c> buffer</c><00:21:01.919><c> that</c><00:21:02.000><c> the</c>

00:21:02.149 --> 00:21:02.159 align:start position:0%
the bytes in that buffer that the
 

00:21:02.159 --> 00:21:03.909 align:start position:0%
the bytes in that buffer that the
shuttle<00:21:02.480><c> wants</c><00:21:02.640><c> to</c><00:21:02.799><c> write</c><00:21:03.039><c> and</c><00:21:03.200><c> indeed</c><00:21:03.679><c> it's</c><00:21:03.840><c> a</c>

00:21:03.909 --> 00:21:03.919 align:start position:0%
shuttle wants to write and indeed it's a
 

00:21:03.919 --> 00:21:05.110 align:start position:0%
shuttle wants to write and indeed it's a
dollar<00:21:04.320><c> sign</c>

00:21:05.110 --> 00:21:05.120 align:start position:0%
dollar sign
 

00:21:05.120 --> 00:21:08.149 align:start position:0%
dollar sign
and<00:21:05.280><c> a</c><00:21:05.440><c> space</c><00:21:06.080><c> so</c><00:21:07.280><c> um</c>

00:21:08.149 --> 00:21:08.159 align:start position:0%
and a space so um
 

00:21:08.159 --> 00:21:10.070 align:start position:0%
and a space so um
we're<00:21:08.400><c> at</c><00:21:08.480><c> the</c><00:21:08.640><c> system</c><00:21:08.960><c> call</c><00:21:09.200><c> that</c><00:21:09.360><c> we</c><00:21:09.760><c> we</c><00:21:09.919><c> hope</c>

00:21:10.070 --> 00:21:10.080 align:start position:0%
we're at the system call that we we hope
 

00:21:10.080 --> 00:21:11.350 align:start position:0%
we're at the system call that we we hope
to<00:21:10.240><c> be</c><00:21:10.400><c> at</c>

00:21:11.350 --> 00:21:11.360 align:start position:0%
to be at
 

00:21:11.360 --> 00:21:13.270 align:start position:0%
to be at
one<00:21:11.520><c> thing</c><00:21:11.679><c> to</c><00:21:11.760><c> notice</c><00:21:12.080><c> is</c><00:21:12.240><c> that</c><00:21:12.400><c> the</c><00:21:12.960><c> program</c>

00:21:13.270 --> 00:21:13.280 align:start position:0%
one thing to notice is that the program
 

00:21:13.280 --> 00:21:14.710 align:start position:0%
one thing to notice is that the program
counter<00:21:13.600><c> and</c><00:21:13.679><c> the</c><00:21:13.760><c> stack</c><00:21:14.000><c> point</c><00:21:14.159><c> are</c><00:21:14.320><c> both</c><00:21:14.559><c> at</c>

00:21:14.710 --> 00:21:14.720 align:start position:0%
counter and the stack point are both at
 

00:21:14.720 --> 00:21:15.990 align:start position:0%
counter and the stack point are both at
low<00:21:14.960><c> addresses</c>

00:21:15.990 --> 00:21:16.000 align:start position:0%
low addresses
 

00:21:16.000 --> 00:21:18.149 align:start position:0%
low addresses
address<00:21:16.320><c> is</c><00:21:16.400><c> quite</c><00:21:16.640><c> close</c><00:21:16.880><c> to</c><00:21:17.039><c> zero</c><00:21:17.280><c> and</c><00:21:17.440><c> that</c>

00:21:18.149 --> 00:21:18.159 align:start position:0%
address is quite close to zero and that
 

00:21:18.159 --> 00:21:19.510 align:start position:0%
address is quite close to zero and that
um

00:21:19.510 --> 00:21:19.520 align:start position:0%
um
 

00:21:19.520 --> 00:21:21.750 align:start position:0%
um
just<00:21:19.760><c> reinforces</c><00:21:20.480><c> our</c><00:21:20.880><c> belief</c><00:21:21.360><c> that</c><00:21:21.520><c> we're</c>

00:21:21.750 --> 00:21:21.760 align:start position:0%
just reinforces our belief that we're
 

00:21:21.760 --> 00:21:22.630 align:start position:0%
just reinforces our belief that we're
still<00:21:22.000><c> executing</c>

00:21:22.630 --> 00:21:22.640 align:start position:0%
still executing
 

00:21:22.640 --> 00:21:24.950 align:start position:0%
still executing
in<00:21:22.960><c> user</c><00:21:23.360><c> and</c><00:21:23.520><c> the</c><00:21:23.600><c> user</c><00:21:23.919><c> address</c><00:21:24.320><c> space</c><00:21:24.720><c> where</c>

00:21:24.950 --> 00:21:24.960 align:start position:0%
in user and the user address space where
 

00:21:24.960 --> 00:21:26.549 align:start position:0%
in user and the user address space where
all<00:21:25.120><c> the</c><00:21:25.280><c> addresses</c><00:21:25.679><c> are</c><00:21:25.840><c> quite</c><00:21:26.000><c> small</c><00:21:26.400><c> once</c>

00:21:26.549 --> 00:21:26.559 align:start position:0%
all the addresses are quite small once
 

00:21:26.559 --> 00:21:27.750 align:start position:0%
all the addresses are quite small once
we<00:21:26.720><c> get</c><00:21:26.720><c> into</c><00:21:26.880><c> the</c><00:21:26.960><c> kernel</c><00:21:27.280><c> you</c><00:21:27.440><c> see</c><00:21:27.600><c> the</c>

00:21:27.750 --> 00:21:27.760 align:start position:0%
we get into the kernel you see the
 

00:21:27.760 --> 00:21:28.789 align:start position:0%
we get into the kernel you see the
addresses<00:21:28.159><c> are</c>

00:21:28.789 --> 00:21:28.799 align:start position:0%
addresses are
 

00:21:28.799 --> 00:21:30.230 align:start position:0%
addresses are
the<00:21:28.880><c> kernels</c><00:21:29.280><c> actually</c><00:21:29.440><c> loaded</c><00:21:29.840><c> much</c><00:21:30.000><c> much</c>

00:21:30.230 --> 00:21:30.240 align:start position:0%
the kernels actually loaded much much
 

00:21:30.240 --> 00:21:34.950 align:start position:0%
the kernels actually loaded much much
higher<00:21:30.480><c> in</c><00:21:30.559><c> memory</c>

00:21:34.950 --> 00:21:34.960 align:start position:0%
 
 

00:21:34.960 --> 00:21:39.110 align:start position:0%
 
okay<00:21:37.039><c> we</c><00:21:37.840><c> the</c><00:21:38.080><c> point</c><00:21:38.320><c> of</c><00:21:38.400><c> the</c><00:21:38.480><c> system</c><00:21:38.799><c> call</c><00:21:39.039><c> is</c>

00:21:39.110 --> 00:21:39.120 align:start position:0%
okay we the point of the system call is
 

00:21:39.120 --> 00:21:39.510 align:start position:0%
okay we the point of the system call is
to

00:21:39.510 --> 00:21:39.520 align:start position:0%
to
 

00:21:39.520 --> 00:21:41.110 align:start position:0%
to
switch<00:21:39.840><c> around</c><00:21:40.159><c> a</c><00:21:40.240><c> lot</c><00:21:40.400><c> of</c><00:21:40.480><c> state</c><00:21:40.799><c> one</c><00:21:40.960><c> of</c><00:21:41.039><c> the</c>

00:21:41.110 --> 00:21:41.120 align:start position:0%
switch around a lot of state one of the
 

00:21:41.120 --> 00:21:42.710 align:start position:0%
switch around a lot of state one of the
most<00:21:41.360><c> important</c><00:21:41.760><c> pieces</c><00:21:42.080><c> of</c><00:21:42.240><c> state</c>

00:21:42.710 --> 00:21:42.720 align:start position:0%
most important pieces of state
 

00:21:42.720 --> 00:21:44.390 align:start position:0%
most important pieces of state
that<00:21:43.039><c> has</c><00:21:43.280><c> to</c><00:21:43.360><c> get</c><00:21:43.520><c> switched</c><00:21:44.000><c> and</c><00:21:44.159><c> that</c><00:21:44.240><c> we</c>

00:21:44.390 --> 00:21:44.400 align:start position:0%
that has to get switched and that we
 

00:21:44.400 --> 00:21:46.310 align:start position:0%
that has to get switched and that we
have<00:21:44.480><c> to</c><00:21:44.640><c> live</c><00:21:44.799><c> with</c><00:21:44.960><c> before</c><00:21:45.280><c> it's</c><00:21:45.440><c> switched</c>

00:21:46.310 --> 00:21:46.320 align:start position:0%
have to live with before it's switched
 

00:21:46.320 --> 00:21:48.870 align:start position:0%
have to live with before it's switched
is<00:21:46.480><c> the</c><00:21:46.640><c> current</c><00:21:46.960><c> page</c><00:21:47.280><c> table</c><00:21:48.400><c> of</c><00:21:48.480><c> course</c><00:21:48.720><c> we</c>

00:21:48.870 --> 00:21:48.880 align:start position:0%
is the current page table of course we
 

00:21:48.880 --> 00:21:49.990 align:start position:0%
is the current page table of course we
can<00:21:48.960><c> look</c><00:21:49.200><c> at</c>

00:21:49.990 --> 00:21:50.000 align:start position:0%
can look at
 

00:21:50.000 --> 00:21:53.029 align:start position:0%
can look at
uh<00:21:50.559><c> sat</c><00:21:50.880><c> p</c>

00:21:53.029 --> 00:21:53.039 align:start position:0%
uh sat p
 

00:21:53.039 --> 00:21:55.029 align:start position:0%
uh sat p
um<00:21:53.600><c> but</c><00:21:53.840><c> all</c><00:21:54.000><c> we</c><00:21:54.080><c> get</c><00:21:54.240><c> there</c><00:21:54.480><c> is</c><00:21:54.559><c> the</c><00:21:54.720><c> address</c>

00:21:55.029 --> 00:21:55.039 align:start position:0%
um but all we get there is the address
 

00:21:55.039 --> 00:21:56.310 align:start position:0%
um but all we get there is the address
in<00:21:55.120><c> physical</c><00:21:55.440><c> memory</c><00:21:55.760><c> the</c><00:21:55.840><c> page</c><00:21:56.080><c> table</c>

00:21:56.310 --> 00:21:56.320 align:start position:0%
in physical memory the page table
 

00:21:56.320 --> 00:21:57.990 align:start position:0%
in physical memory the page table
doesn't<00:21:56.559><c> actually</c><00:21:56.799><c> tell</c><00:21:56.960><c> us</c><00:21:57.120><c> much</c><00:21:57.440><c> about</c><00:21:57.840><c> what</c>

00:21:57.990 --> 00:21:58.000 align:start position:0%
doesn't actually tell us much about what
 

00:21:58.000 --> 00:21:59.110 align:start position:0%
doesn't actually tell us much about what
the<00:21:58.159><c> mappings</c><00:21:58.640><c> are</c>

00:21:59.110 --> 00:21:59.120 align:start position:0%
the mappings are
 

00:21:59.120 --> 00:22:02.310 align:start position:0%
the mappings are
what<00:21:59.280><c> the</c><00:21:59.360><c> page</c><00:21:59.600><c> table</c><00:21:59.919><c> looks</c><00:22:00.080><c> like</c><00:22:01.200><c> luckily</c>

00:22:02.310 --> 00:22:02.320 align:start position:0%
what the page table looks like luckily
 

00:22:02.320 --> 00:22:05.750 align:start position:0%
what the page table looks like luckily
there's<00:22:02.559><c> a</c><00:22:02.640><c> way</c><00:22:03.200><c> in</c><00:22:04.240><c> qmu</c><00:22:04.799><c> to</c><00:22:04.960><c> ask</c><00:22:05.200><c> it</c><00:22:05.280><c> to</c><00:22:05.440><c> print</c>

00:22:05.750 --> 00:22:05.760 align:start position:0%
there's a way in qmu to ask it to print
 

00:22:05.760 --> 00:22:06.950 align:start position:0%
there's a way in qmu to ask it to print
the<00:22:05.840><c> current</c><00:22:06.159><c> page</c><00:22:06.480><c> table</c>

00:22:06.950 --> 00:22:06.960 align:start position:0%
the current page table
 

00:22:06.960 --> 00:22:10.149 align:start position:0%
the current page table
and<00:22:07.120><c> if</c><00:22:07.280><c> i</c><00:22:08.000><c> print</c><00:22:08.240><c> ctrl</c><00:22:08.720><c> a</c><00:22:09.120><c> c</c><00:22:09.440><c> i</c><00:22:09.600><c> get</c><00:22:09.760><c> into</c><00:22:10.000><c> the</c>

00:22:10.149 --> 00:22:10.159 align:start position:0%
and if i print ctrl a c i get into the
 

00:22:10.159 --> 00:22:11.430 align:start position:0%
and if i print ctrl a c i get into the
qmu

00:22:11.430 --> 00:22:11.440 align:start position:0%
qmu
 

00:22:11.440 --> 00:22:14.149 align:start position:0%
qmu
monitor<00:22:12.000><c> or</c><00:22:12.240><c> console</c><00:22:13.280><c> and</c><00:22:13.440><c> if</c><00:22:13.600><c> i</c><00:22:13.679><c> then</c><00:22:13.840><c> type</c>

00:22:14.149 --> 00:22:14.159 align:start position:0%
monitor or console and if i then type
 

00:22:14.159 --> 00:22:16.230 align:start position:0%
monitor or console and if i then type
info<00:22:14.480><c> mam</c>

00:22:16.230 --> 00:22:16.240 align:start position:0%
info mam
 

00:22:16.240 --> 00:22:19.430 align:start position:0%
info mam
it'll<00:22:16.559><c> print</c><00:22:17.200><c> the</c><00:22:17.360><c> complete</c><00:22:17.760><c> page</c><00:22:18.080><c> table</c>

00:22:19.430 --> 00:22:19.440 align:start position:0%
it'll print the complete page table
 

00:22:19.440 --> 00:22:21.029 align:start position:0%
it'll print the complete page table
now<00:22:19.600><c> this</c><00:22:19.760><c> is</c><00:22:19.840><c> a</c><00:22:19.919><c> very</c><00:22:20.080><c> small</c><00:22:20.400><c> page</c><00:22:20.640><c> table</c><00:22:20.960><c> that</c>

00:22:21.029 --> 00:22:21.039 align:start position:0%
now this is a very small page table that
 

00:22:21.039 --> 00:22:23.669 align:start position:0%
now this is a very small page table that
contains<00:22:21.520><c> only</c><00:22:21.840><c> six</c><00:22:22.159><c> mappings</c>

00:22:23.669 --> 00:22:23.679 align:start position:0%
contains only six mappings
 

00:22:23.679 --> 00:22:25.190 align:start position:0%
contains only six mappings
of<00:22:23.760><c> course</c><00:22:24.000><c> it's</c><00:22:24.159><c> the</c><00:22:24.400><c> page</c><00:22:24.640><c> table</c><00:22:24.960><c> for</c><00:22:25.039><c> the</c>

00:22:25.190 --> 00:22:25.200 align:start position:0%
of course it's the page table for the
 

00:22:25.200 --> 00:22:28.070 align:start position:0%
of course it's the page table for the
shell<00:22:26.400><c> shell's</c><00:22:26.720><c> a</c><00:22:26.799><c> pretty</c><00:22:27.039><c> small</c>

00:22:28.070 --> 00:22:28.080 align:start position:0%
shell shell's a pretty small
 

00:22:28.080 --> 00:22:30.950 align:start position:0%
shell shell's a pretty small
program<00:22:29.200><c> and</c><00:22:29.360><c> these</c><00:22:29.600><c> six</c><00:22:29.919><c> mappings</c><00:22:30.480><c> are</c><00:22:30.799><c> in</c>

00:22:30.950 --> 00:22:30.960 align:start position:0%
program and these six mappings are in
 

00:22:30.960 --> 00:22:31.909 align:start position:0%
program and these six mappings are in
order

00:22:31.909 --> 00:22:31.919 align:start position:0%
order
 

00:22:31.919 --> 00:22:34.950 align:start position:0%
order
the<00:22:32.240><c> shell's</c><00:22:32.720><c> instructions</c><00:22:34.240><c> the</c><00:22:34.480><c> shell's</c>

00:22:34.950 --> 00:22:34.960 align:start position:0%
the shell's instructions the shell's
 

00:22:34.960 --> 00:22:35.830 align:start position:0%
the shell's instructions the shell's
data

00:22:35.830 --> 00:22:35.840 align:start position:0%
data
 

00:22:35.840 --> 00:22:39.510 align:start position:0%
data
an<00:22:36.159><c> invalid</c><00:22:36.799><c> page</c><00:22:37.280><c> which</c><00:22:37.679><c> access</c><00:22:38.240><c> the</c>

00:22:39.510 --> 00:22:39.520 align:start position:0%
an invalid page which access the
 

00:22:39.520 --> 00:22:41.510 align:start position:0%
an invalid page which access the
stack<00:22:39.919><c> a</c><00:22:40.080><c> guard</c><00:22:40.400><c> page</c><00:22:40.720><c> in</c><00:22:40.799><c> case</c><00:22:41.039><c> the</c><00:22:41.200><c> shuttle</c>

00:22:41.510 --> 00:22:41.520 align:start position:0%
stack a guard page in case the shuttle
 

00:22:41.520 --> 00:22:43.350 align:start position:0%
stack a guard page in case the shuttle
tries<00:22:41.760><c> to</c><00:22:41.840><c> use</c><00:22:42.080><c> too</c><00:22:42.240><c> much</c><00:22:42.400><c> stack</c><00:22:42.720><c> space</c>

00:22:43.350 --> 00:22:43.360 align:start position:0%
tries to use too much stack space
 

00:22:43.360 --> 00:22:45.430 align:start position:0%
tries to use too much stack space
and<00:22:43.520><c> we</c><00:22:43.600><c> can</c><00:22:43.760><c> see</c><00:22:43.919><c> it's</c><00:22:44.080><c> invalid</c><00:22:44.640><c> because</c><00:22:45.280><c> it</c>

00:22:45.430 --> 00:22:45.440 align:start position:0%
and we can see it's invalid because it
 

00:22:45.440 --> 00:22:47.350 align:start position:0%
and we can see it's invalid because it
doesn't<00:22:45.840><c> have</c><00:22:46.000><c> the</c><00:22:46.240><c> u</c><00:22:46.480><c> flag</c><00:22:46.960><c> set</c>

00:22:47.350 --> 00:22:47.360 align:start position:0%
doesn't have the u flag set
 

00:22:47.360 --> 00:22:50.789 align:start position:0%
doesn't have the u flag set
over<00:22:47.600><c> here</c><00:22:49.440><c> in</c><00:22:49.520><c> this</c><00:22:49.760><c> attribute</c><00:22:50.320><c> or</c><00:22:50.480><c> flag</c>

00:22:50.789 --> 00:22:50.799 align:start position:0%
over here in this attribute or flag
 

00:22:50.799 --> 00:22:52.630 align:start position:0%
over here in this attribute or flag
column

00:22:52.630 --> 00:22:52.640 align:start position:0%
column
 

00:22:52.640 --> 00:22:54.789 align:start position:0%
column
these<00:22:52.880><c> are</c><00:22:52.960><c> all</c><00:22:53.120><c> the</c><00:22:53.280><c> pte</c><00:22:53.760><c> underscore</c><00:22:54.240><c> flags</c>

00:22:54.789 --> 00:22:54.799 align:start position:0%
these are all the pte underscore flags
 

00:22:54.799 --> 00:22:55.909 align:start position:0%
these are all the pte underscore flags
rw<00:22:55.200><c> and</c><00:22:55.360><c> x</c><00:22:55.600><c> are</c>

00:22:55.909 --> 00:22:55.919 align:start position:0%
rw and x are
 

00:22:55.919 --> 00:22:57.990 align:start position:0%
rw and x are
just<00:22:56.080><c> control</c><00:22:56.480><c> whether</c><00:22:56.799><c> a</c><00:22:57.120><c> page</c><00:22:57.360><c> can</c><00:22:57.520><c> be</c><00:22:57.679><c> read</c>

00:22:57.990 --> 00:22:58.000 align:start position:0%
just control whether a page can be read
 

00:22:58.000 --> 00:22:59.909 align:start position:0%
just control whether a page can be read
or<00:22:58.159><c> written</c><00:22:58.400><c> or</c><00:22:58.559><c> executed</c>

00:22:59.909 --> 00:22:59.919 align:start position:0%
or written or executed
 

00:22:59.919 --> 00:23:01.669 align:start position:0%
or written or executed
the<00:23:00.080><c> next</c><00:23:00.320><c> column</c><00:23:00.640><c> is</c><00:23:00.720><c> you</c><00:23:01.039><c> and</c><00:23:01.120><c> that's</c>

00:23:01.669 --> 00:23:01.679 align:start position:0%
the next column is you and that's
 

00:23:01.679 --> 00:23:03.669 align:start position:0%
the next column is you and that's
whether<00:23:01.919><c> or</c><00:23:02.000><c> not</c><00:23:02.159><c> the</c><00:23:02.240><c> pteu</c><00:23:02.880><c> flag</c><00:23:03.200><c> is</c><00:23:03.280><c> set</c><00:23:03.520><c> and</c>

00:23:03.669 --> 00:23:03.679 align:start position:0%
whether or not the pteu flag is set and
 

00:23:03.679 --> 00:23:05.430 align:start position:0%
whether or not the pteu flag is set and
user<00:23:03.919><c> code</c><00:23:04.159><c> can</c><00:23:04.320><c> only</c><00:23:04.559><c> get</c><00:23:04.720><c> at</c>

00:23:05.430 --> 00:23:05.440 align:start position:0%
user code can only get at
 

00:23:05.440 --> 00:23:08.310 align:start position:0%
user code can only get at
pde<00:23:05.919><c> entries</c><00:23:06.480><c> for</c><00:23:06.640><c> which</c><00:23:06.799><c> the</c><00:23:06.960><c> u</c><00:23:07.120><c> flag</c><00:23:07.440><c> is</c><00:23:07.600><c> set</c>

00:23:08.310 --> 00:23:08.320 align:start position:0%
pde entries for which the u flag is set
 

00:23:08.320 --> 00:23:12.789 align:start position:0%
pde entries for which the u flag is set
um

00:23:12.789 --> 00:23:12.799 align:start position:0%
 
 

00:23:12.799 --> 00:23:14.310 align:start position:0%
 
i<00:23:12.960><c> don't</c><00:23:13.120><c> know</c><00:23:13.280><c> what</c><00:23:13.440><c> the</c><00:23:13.520><c> next</c><00:23:13.760><c> column</c><00:23:14.080><c> is</c><00:23:14.240><c> i</c>

00:23:14.310 --> 00:23:14.320 align:start position:0%
i don't know what the next column is i
 

00:23:14.320 --> 00:23:16.630 align:start position:0%
i don't know what the next column is i
have<00:23:14.400><c> to</c><00:23:14.559><c> admit</c><00:23:15.600><c> and</c><00:23:15.760><c> the</c><00:23:15.840><c> next</c><00:23:16.000><c> column</c><00:23:16.240><c> is</c><00:23:16.400><c> a</c>

00:23:16.630 --> 00:23:16.640 align:start position:0%
have to admit and the next column is a
 

00:23:16.640 --> 00:23:18.390 align:start position:0%
have to admit and the next column is a
for<00:23:16.799><c> whether</c><00:23:17.039><c> the</c><00:23:17.280><c> page</c><00:23:17.600><c> table</c><00:23:17.840><c> entries</c><00:23:18.240><c> have</c>

00:23:18.390 --> 00:23:18.400 align:start position:0%
for whether the page table entries have
 

00:23:18.400 --> 00:23:19.590 align:start position:0%
for whether the page table entries have
ever<00:23:18.559><c> been</c><00:23:18.720><c> used</c><00:23:19.280><c> and</c>

00:23:19.590 --> 00:23:19.600 align:start position:0%
ever been used and
 

00:23:19.600 --> 00:23:22.630 align:start position:0%
ever been used and
d<00:23:20.000><c> for</c><00:23:20.240><c> whether</c><00:23:20.559><c> or</c><00:23:20.840><c> write</c><00:23:22.159><c> has</c><00:23:22.240><c> ever</c><00:23:22.480><c> been</c>

00:23:22.630 --> 00:23:22.640 align:start position:0%
d for whether or write has ever been
 

00:23:22.640 --> 00:23:28.149 align:start position:0%
d for whether or write has ever been
issued<00:23:22.960><c> for</c><00:23:23.039><c> this</c><00:23:23.280><c> address</c>

00:23:28.149 --> 00:23:28.159 align:start position:0%
 
 

00:23:28.159 --> 00:23:29.830 align:start position:0%
 
okay<00:23:28.400><c> so</c><00:23:28.559><c> we</c><00:23:28.720><c> have</c><00:23:28.799><c> this</c><00:23:28.880><c> tiny</c><00:23:29.200><c> page</c><00:23:29.600><c> and</c><00:23:29.760><c> the</c>

00:23:29.830 --> 00:23:29.840 align:start position:0%
okay so we have this tiny page and the
 

00:23:29.840 --> 00:23:31.909 align:start position:0%
okay so we have this tiny page and the
last<00:23:30.080><c> two</c><00:23:30.480><c> page</c><00:23:30.799><c> table</c><00:23:31.039><c> entries</c><00:23:31.360><c> by</c><00:23:31.520><c> the</c><00:23:31.600><c> way</c>

00:23:31.909 --> 00:23:31.919 align:start position:0%
last two page table entries by the way
 

00:23:31.919 --> 00:23:32.630 align:start position:0%
last two page table entries by the way
are<00:23:32.159><c> way</c><00:23:32.400><c> up</c>

00:23:32.630 --> 00:23:32.640 align:start position:0%
are way up
 

00:23:32.640 --> 00:23:36.630 align:start position:0%
are way up
at<00:23:32.880><c> um</c><00:23:33.360><c> enormous</c><00:23:34.720><c> virtual</c><00:23:35.039><c> addresses</c>

00:23:36.630 --> 00:23:36.640 align:start position:0%
at um enormous virtual addresses
 

00:23:36.640 --> 00:23:38.950 align:start position:0%
at um enormous virtual addresses
close<00:23:36.880><c> to</c><00:23:37.039><c> the</c><00:23:37.280><c> very</c><00:23:37.520><c> close</c><00:23:37.679><c> to</c><00:23:37.840><c> the</c><00:23:38.080><c> top</c><00:23:38.799><c> of</c>

00:23:38.950 --> 00:23:38.960 align:start position:0%
close to the very close to the top of
 

00:23:38.960 --> 00:23:40.549 align:start position:0%
close to the very close to the top of
the<00:23:39.200><c> virtual</c><00:23:39.520><c> address</c><00:23:39.840><c> space</c>

00:23:40.549 --> 00:23:40.559 align:start position:0%
the virtual address space
 

00:23:40.559 --> 00:23:43.430 align:start position:0%
the virtual address space
and<00:23:40.720><c> this</c><00:23:40.880><c> is</c><00:23:41.200><c> these</c><00:23:41.520><c> two</c><00:23:42.159><c> um</c><00:23:43.039><c> as</c><00:23:43.200><c> you</c><00:23:43.279><c> read</c>

00:23:43.430 --> 00:23:43.440 align:start position:0%
and this is these two um as you read
 

00:23:43.440 --> 00:23:44.630 align:start position:0%
and this is these two um as you read
about<00:23:43.600><c> in</c><00:23:43.679><c> the</c><00:23:43.760><c> book</c><00:23:44.000><c> and</c><00:23:44.080><c> we'll</c><00:23:44.159><c> hear</c><00:23:44.400><c> much</c>

00:23:44.630 --> 00:23:44.640 align:start position:0%
about in the book and we'll hear much
 

00:23:44.640 --> 00:23:46.710 align:start position:0%
about in the book and we'll hear much
more<00:23:44.799><c> about</c><00:23:45.039><c> are</c><00:23:45.200><c> the</c><00:23:45.440><c> trap</c><00:23:45.760><c> frame</c><00:23:46.080><c> page</c>

00:23:46.710 --> 00:23:46.720 align:start position:0%
more about are the trap frame page
 

00:23:46.720 --> 00:23:49.029 align:start position:0%
more about are the trap frame page
and<00:23:47.679><c> now</c><00:23:47.840><c> the</c><00:23:48.000><c> trampoline</c><00:23:48.480><c> page</c><00:23:48.720><c> and</c><00:23:48.880><c> as</c><00:23:48.960><c> you</c>

00:23:49.029 --> 00:23:49.039 align:start position:0%
and now the trampoline page and as you
 

00:23:49.039 --> 00:23:50.870 align:start position:0%
and now the trampoline page and as you
can<00:23:49.200><c> see</c><00:23:49.440><c> neither</c><00:23:49.919><c> of</c><00:23:50.000><c> them</c>

00:23:50.870 --> 00:23:50.880 align:start position:0%
can see neither of them
 

00:23:50.880 --> 00:23:54.230 align:start position:0%
can see neither of them
has<00:23:51.120><c> the</c><00:23:51.279><c> u-bits</c><00:23:51.840><c> set</c><00:23:52.480><c> so</c><00:23:53.520><c> user</c><00:23:53.840><c> code</c><00:23:54.080><c> can't</c>

00:23:54.230 --> 00:23:54.240 align:start position:0%
has the u-bits set so user code can't
 

00:23:54.240 --> 00:23:55.510 align:start position:0%
has the u-bits set so user code can't
get<00:23:54.400><c> at</c><00:23:54.640><c> either</c><00:23:54.880><c> of</c><00:23:55.039><c> these</c>

00:23:55.510 --> 00:23:55.520 align:start position:0%
get at either of these
 

00:23:55.520 --> 00:23:57.750 align:start position:0%
get at either of these
can't<00:23:55.679><c> use</c><00:23:55.919><c> either</c><00:23:56.159><c> of</c><00:23:56.159><c> these</c><00:23:56.400><c> addresses</c><00:23:57.600><c> but</c>

00:23:57.750 --> 00:23:57.760 align:start position:0%
can't use either of these addresses but
 

00:23:57.760 --> 00:23:59.350 align:start position:0%
can't use either of these addresses but
once<00:23:58.000><c> we</c><00:23:58.080><c> enter</c><00:23:58.320><c> supervisor</c><00:23:58.799><c> mode</c><00:23:59.039><c> we</c><00:23:59.120><c> can</c><00:23:59.200><c> get</c>

00:23:59.350 --> 00:23:59.360 align:start position:0%
once we enter supervisor mode we can get
 

00:23:59.360 --> 00:24:05.029 align:start position:0%
once we enter supervisor mode we can get
at<00:23:59.520><c> these</c><00:23:59.679><c> two</c><00:24:02.840><c> pages</c>

00:24:05.029 --> 00:24:05.039 align:start position:0%
at these two pages
 

00:24:05.039 --> 00:24:08.549 align:start position:0%
at these two pages
all<00:24:05.200><c> right</c><00:24:07.120><c> um</c><00:24:07.760><c> one</c><00:24:07.919><c> thing</c><00:24:08.080><c> you</c><00:24:08.159><c> notice</c><00:24:08.400><c> about</c>

00:24:08.549 --> 00:24:08.559 align:start position:0%
all right um one thing you notice about
 

00:24:08.559 --> 00:24:09.990 align:start position:0%
all right um one thing you notice about
this<00:24:08.720><c> page</c><00:24:08.960><c> table</c>

00:24:09.990 --> 00:24:10.000 align:start position:0%
this page table
 

00:24:10.000 --> 00:24:11.510 align:start position:0%
this page table
is<00:24:10.080><c> there's</c><00:24:10.320><c> no</c><00:24:10.480><c> mappings</c><00:24:10.960><c> for</c><00:24:11.120><c> anything</c><00:24:11.440><c> in</c>

00:24:11.510 --> 00:24:11.520 align:start position:0%
is there's no mappings for anything in
 

00:24:11.520 --> 00:24:13.350 align:start position:0%
is there's no mappings for anything in
the<00:24:11.679><c> kernel</c><00:24:12.480><c> you</c><00:24:12.559><c> know</c><00:24:12.640><c> there's</c><00:24:12.799><c> no</c><00:24:13.039><c> physical</c>

00:24:13.350 --> 00:24:13.360 align:start position:0%
the kernel you know there's no physical
 

00:24:13.360 --> 00:24:15.029 align:start position:0%
the kernel you know there's no physical
address<00:24:13.679><c> mappings</c><00:24:14.159><c> there's</c><00:24:14.320><c> no</c><00:24:14.559><c> mappings</c><00:24:14.960><c> for</c>

00:24:15.029 --> 00:24:15.039 align:start position:0%
address mappings there's no mappings for
 

00:24:15.039 --> 00:24:16.549 align:start position:0%
address mappings there's no mappings for
the<00:24:15.200><c> kernel's</c><00:24:15.600><c> data</c><00:24:15.919><c> or</c><00:24:16.000><c> the</c><00:24:16.159><c> kernel's</c>

00:24:16.549 --> 00:24:16.559 align:start position:0%
the kernel's data or the kernel's
 

00:24:16.559 --> 00:24:18.070 align:start position:0%
the kernel's data or the kernel's
instructions<00:24:17.200><c> or</c><00:24:17.360><c> anything</c><00:24:17.679><c> else</c>

00:24:18.070 --> 00:24:18.080 align:start position:0%
instructions or anything else
 

00:24:18.080 --> 00:24:20.310 align:start position:0%
instructions or anything else
this<00:24:18.320><c> is</c><00:24:18.480><c> uh</c><00:24:18.720><c> except</c><00:24:19.039><c> for</c><00:24:19.200><c> the</c><00:24:19.279><c> last</c><00:24:19.440><c> two</c><00:24:19.919><c> just</c>

00:24:20.310 --> 00:24:20.320 align:start position:0%
this is uh except for the last two just
 

00:24:20.320 --> 00:24:21.990 align:start position:0%
this is uh except for the last two just
the<00:24:20.480><c> very</c><00:24:20.720><c> last</c><00:24:20.880><c> two</c><00:24:21.120><c> pages</c>

00:24:21.990 --> 00:24:22.000 align:start position:0%
the very last two pages
 

00:24:22.000 --> 00:24:23.669 align:start position:0%
the very last two pages
now<00:24:22.159><c> this</c><00:24:22.240><c> is</c><00:24:22.320><c> a</c><00:24:22.400><c> page</c><00:24:22.640><c> table</c><00:24:23.039><c> almost</c><00:24:23.279><c> entirely</c>

00:24:23.669 --> 00:24:23.679 align:start position:0%
now this is a page table almost entirely
 

00:24:23.679 --> 00:24:26.070 align:start position:0%
now this is a page table almost entirely
dedicated<00:24:24.240><c> to</c><00:24:24.400><c> user</c><00:24:24.799><c> execution</c><00:24:25.440><c> and</c><00:24:25.679><c> is</c><00:24:25.760><c> not</c>

00:24:26.070 --> 00:24:26.080 align:start position:0%
dedicated to user execution and is not
 

00:24:26.080 --> 00:24:27.909 align:start position:0%
dedicated to user execution and is not
directly<00:24:26.480><c> particularly</c><00:24:26.960><c> useful</c><00:24:27.760><c> for</c>

00:24:27.909 --> 00:24:27.919 align:start position:0%
directly particularly useful for
 

00:24:27.919 --> 00:24:30.310 align:start position:0%
directly particularly useful for
executing<00:24:28.400><c> the</c><00:24:28.480><c> kernel</c>

00:24:30.310 --> 00:24:30.320 align:start position:0%
executing the kernel
 

00:24:30.320 --> 00:24:33.110 align:start position:0%
executing the kernel
all<00:24:30.400><c> right</c><00:24:31.760><c> what's</c><00:24:32.080><c> the</c><00:24:32.400><c> what's</c><00:24:32.640><c> the</c><00:24:32.799><c> a</c>

00:24:33.110 --> 00:24:33.120 align:start position:0%
all right what's the what's the a
 

00:24:33.120 --> 00:24:34.310 align:start position:0%
all right what's the what's the a
attribute<00:24:33.760><c> on</c><00:24:34.000><c> the</c>

00:24:34.310 --> 00:24:34.320 align:start position:0%
attribute on the
 

00:24:34.320 --> 00:24:37.269 align:start position:0%
attribute on the
on<00:24:34.559><c> the</c><00:24:35.440><c> page</c><00:24:35.760><c> table</c><00:24:36.000><c> listing</c><00:24:36.400><c> on</c><00:24:36.559><c> the</c><00:24:36.640><c> top</c><00:24:37.120><c> i</c>

00:24:37.269 --> 00:24:37.279 align:start position:0%
on the page table listing on the top i
 

00:24:37.279 --> 00:24:38.789 align:start position:0%
on the page table listing on the top i
believe<00:24:37.600><c> this</c><00:24:37.760><c> means</c><00:24:38.000><c> the</c><00:24:38.080><c> page</c><00:24:38.400><c> table</c><00:24:38.640><c> has</c>

00:24:38.789 --> 00:24:38.799 align:start position:0%
believe this means the page table has
 

00:24:38.799 --> 00:24:39.990 align:start position:0%
believe this means the page table has
ever<00:24:39.039><c> been</c>

00:24:39.990 --> 00:24:40.000 align:start position:0%
ever been
 

00:24:40.000 --> 00:24:41.909 align:start position:0%
ever been
this<00:24:40.240><c> page</c><00:24:40.480><c> table</c><00:24:40.880><c> entry</c><00:24:41.279><c> has</c><00:24:41.520><c> ever</c><00:24:41.679><c> been</c>

00:24:41.909 --> 00:24:41.919 align:start position:0%
this page table entry has ever been
 

00:24:41.919 --> 00:24:43.029 align:start position:0%
this page table entry has ever been
accessed

00:24:43.029 --> 00:24:43.039 align:start position:0%
accessed
 

00:24:43.039 --> 00:24:46.230 align:start position:0%
accessed
uh<00:24:43.200><c> by</c><00:24:43.440><c> code</c><00:24:45.279><c> that</c><00:24:45.520><c> is</c>

00:24:46.230 --> 00:24:46.240 align:start position:0%
uh by code that is
 

00:24:46.240 --> 00:24:49.029 align:start position:0%
uh by code that is
whether<00:24:46.559><c> it's</c><00:24:46.720><c> ever</c><00:24:46.960><c> issued</c><00:24:47.360><c> an</c><00:24:47.520><c> address</c><00:24:48.080><c> that</c>

00:24:49.029 --> 00:24:49.039 align:start position:0%
whether it's ever issued an address that
 

00:24:49.039 --> 00:24:52.149 align:start position:0%
whether it's ever issued an address that
refers<00:24:49.360><c> to</c><00:24:49.520><c> this</c><00:24:49.679><c> page</c><00:24:49.919><c> table</c><00:24:50.159><c> entry</c>

00:24:52.149 --> 00:24:52.159 align:start position:0%
refers to this page table entry
 

00:24:52.159 --> 00:24:54.630 align:start position:0%
refers to this page table entry
um<00:24:52.799><c> and</c><00:24:52.880><c> the</c><00:24:53.039><c> d</c><00:24:53.360><c> is</c><00:24:53.440><c> whether</c><00:24:53.760><c> the</c><00:24:54.159><c> program</c><00:24:54.480><c> has</c>

00:24:54.630 --> 00:24:54.640 align:start position:0%
um and the d is whether the program has
 

00:24:54.640 --> 00:24:56.630 align:start position:0%
um and the d is whether the program has
ever<00:24:54.799><c> written</c>

00:24:56.630 --> 00:24:56.640 align:start position:0%
ever written
 

00:24:56.640 --> 00:24:59.990 align:start position:0%
ever written
uh<00:24:57.120><c> ever</c><00:24:57.360><c> done</c><00:24:57.600><c> a</c><00:24:57.679><c> store</c><00:24:59.600><c> through</c><00:24:59.760><c> this</c>

00:24:59.990 --> 00:25:00.000 align:start position:0%
uh ever done a store through this
 

00:25:00.000 --> 00:25:02.950 align:start position:0%
uh ever done a store through this
page<00:25:00.240><c> table</c><00:25:00.559><c> entry</c><00:25:01.039><c> and</c><00:25:01.200><c> these</c><00:25:01.440><c> are</c><00:25:02.559><c> bits</c><00:25:02.799><c> that</c>

00:25:02.950 --> 00:25:02.960 align:start position:0%
page table entry and these are bits that
 

00:25:02.960 --> 00:25:04.549 align:start position:0%
page table entry and these are bits that
the<00:25:03.120><c> hardware</c><00:25:03.520><c> maintains</c><00:25:04.159><c> for</c><00:25:04.320><c> the</c>

00:25:04.549 --> 00:25:04.559 align:start position:0%
the hardware maintains for the
 

00:25:04.559 --> 00:25:06.149 align:start position:0%
the hardware maintains for the
convenience<00:25:05.039><c> of</c><00:25:05.120><c> the</c><00:25:05.279><c> operating</c><00:25:05.679><c> system</c><00:25:06.000><c> and</c>

00:25:06.149 --> 00:25:06.159 align:start position:0%
convenience of the operating system and
 

00:25:06.159 --> 00:25:07.669 align:start position:0%
convenience of the operating system and
operating<00:25:06.480><c> systems</c><00:25:06.799><c> more</c><00:25:07.039><c> sophisticated</c>

00:25:07.669 --> 00:25:07.679 align:start position:0%
operating systems more sophisticated
 

00:25:07.679 --> 00:25:08.070 align:start position:0%
operating systems more sophisticated
than

00:25:08.070 --> 00:25:08.080 align:start position:0%
than
 

00:25:08.080 --> 00:25:12.470 align:start position:0%
than
xv6<00:25:10.559><c> may</c><00:25:10.799><c> need</c><00:25:10.960><c> to</c><00:25:11.120><c> evict</c><00:25:11.520><c> pages</c>

00:25:12.470 --> 00:25:12.480 align:start position:0%
xv6 may need to evict pages
 

00:25:12.480 --> 00:25:13.669 align:start position:0%
xv6 may need to evict pages
if<00:25:12.559><c> they're</c><00:25:12.720><c> running</c><00:25:12.960><c> short</c><00:25:13.200><c> on</c><00:25:13.360><c> physical</c>

00:25:13.669 --> 00:25:13.679 align:start position:0%
if they're running short on physical
 

00:25:13.679 --> 00:25:15.830 align:start position:0%
if they're running short on physical
memory<00:25:14.000><c> they</c><00:25:14.159><c> may</c><00:25:14.400><c> need</c><00:25:14.559><c> to</c><00:25:14.799><c> write</c>

00:25:15.830 --> 00:25:15.840 align:start position:0%
memory they may need to write
 

00:25:15.840 --> 00:25:18.950 align:start position:0%
memory they may need to write
some<00:25:16.000><c> pages</c><00:25:16.400><c> of</c><00:25:16.480><c> memory</c><00:25:16.880><c> to</c><00:25:17.039><c> disk</c><00:25:18.480><c> and</c>

00:25:18.950 --> 00:25:18.960 align:start position:0%
some pages of memory to disk and
 

00:25:18.960 --> 00:25:21.110 align:start position:0%
some pages of memory to disk and
invalidate<00:25:19.520><c> the</c><00:25:19.600><c> page</c><00:25:19.840><c> table</c><00:25:20.159><c> entries</c><00:25:20.559><c> to</c>

00:25:21.110 --> 00:25:21.120 align:start position:0%
invalidate the page table entries to
 

00:25:21.120 --> 00:25:22.950 align:start position:0%
invalidate the page table entries to
free<00:25:21.360><c> up</c><00:25:21.440><c> the</c><00:25:21.520><c> physical</c><00:25:21.840><c> memory</c>

00:25:22.950 --> 00:25:22.960 align:start position:0%
free up the physical memory
 

00:25:22.960 --> 00:25:25.590 align:start position:0%
free up the physical memory
and<00:25:23.520><c> many</c><00:25:23.840><c> policies</c><00:25:24.400><c> you</c><00:25:24.480><c> could</c><00:25:24.720><c> imagine</c><00:25:25.039><c> a</c>

00:25:25.590 --> 00:25:25.600 align:start position:0%
and many policies you could imagine a
 

00:25:25.600 --> 00:25:27.110 align:start position:0%
and many policies you could imagine a
operating<00:25:26.080><c> system</c><00:25:26.400><c> using</c><00:25:26.640><c> to</c>

00:25:27.110 --> 00:25:27.120 align:start position:0%
operating system using to
 

00:25:27.120 --> 00:25:29.190 align:start position:0%
operating system using to
pick<00:25:27.279><c> which</c><00:25:27.520><c> pages</c><00:25:27.760><c> to</c><00:25:28.000><c> exist</c><00:25:28.799><c> um</c><00:25:29.039><c> we'll</c>

00:25:29.190 --> 00:25:29.200 align:start position:0%
pick which pages to exist um we'll
 

00:25:29.200 --> 00:25:30.950 align:start position:0%
pick which pages to exist um we'll
consult<00:25:29.600><c> the</c><00:25:29.760><c> a</c><00:25:30.000><c> bits</c><00:25:30.320><c> to</c><00:25:30.400><c> see</c><00:25:30.559><c> whether</c><00:25:30.799><c> this</c>

00:25:30.950 --> 00:25:30.960 align:start position:0%
consult the a bits to see whether this
 

00:25:30.960 --> 00:25:33.510 align:start position:0%
consult the a bits to see whether this
page<00:25:31.279><c> table</c><00:25:31.600><c> entry</c><00:25:31.919><c> has</c><00:25:32.000><c> ever</c><00:25:32.240><c> even</c><00:25:32.400><c> been</c><00:25:32.640><c> used</c>

00:25:33.510 --> 00:25:33.520 align:start position:0%
page table entry has ever even been used
 

00:25:33.520 --> 00:25:34.950 align:start position:0%
page table entry has ever even been used
um<00:25:33.760><c> and</c><00:25:33.840><c> if</c><00:25:33.919><c> it</c><00:25:34.080><c> hasn't</c><00:25:34.240><c> been</c><00:25:34.400><c> used</c><00:25:34.640><c> or</c><00:25:34.799><c> haven't</c>

00:25:34.950 --> 00:25:34.960 align:start position:0%
um and if it hasn't been used or haven't
 

00:25:34.960 --> 00:25:36.549 align:start position:0%
um and if it hasn't been used or haven't
been<00:25:35.120><c> used</c><00:25:35.360><c> recently</c><00:25:35.840><c> then</c>

00:25:36.549 --> 00:25:36.559 align:start position:0%
been used recently then
 

00:25:36.559 --> 00:25:38.870 align:start position:0%
been used recently then
that's<00:25:36.799><c> a</c><00:25:36.799><c> good</c><00:25:36.960><c> candidate</c><00:25:37.520><c> for</c><00:25:38.320><c> evicting</c><00:25:38.720><c> to</c>

00:25:38.870 --> 00:25:38.880 align:start position:0%
that's a good candidate for evicting to
 

00:25:38.880 --> 00:25:40.870 align:start position:0%
that's a good candidate for evicting to
disk

00:25:40.870 --> 00:25:40.880 align:start position:0%
disk
 

00:25:40.880 --> 00:25:44.390 align:start position:0%
disk
and<00:25:41.039><c> the</c><00:25:41.200><c> d</c><00:25:42.799><c> tells</c><00:25:43.120><c> the</c><00:25:43.279><c> kernel</c><00:25:43.760><c> that</c>

00:25:44.390 --> 00:25:44.400 align:start position:0%
and the d tells the kernel that
 

00:25:44.400 --> 00:25:47.190 align:start position:0%
and the d tells the kernel that
oh<00:25:44.720><c> this</c><00:25:45.200><c> page</c><00:25:45.440><c> has</c><00:25:45.600><c> actually</c><00:25:45.840><c> been</c><00:25:46.080><c> written</c>

00:25:47.190 --> 00:25:47.200 align:start position:0%
oh this page has actually been written
 

00:25:47.200 --> 00:25:50.710 align:start position:0%
oh this page has actually been written
since<00:25:47.440><c> it</c><00:25:47.520><c> was</c><00:25:47.679><c> read</c><00:25:47.919><c> from</c><00:25:48.159><c> disk</c>

00:25:50.710 --> 00:25:50.720 align:start position:0%
 
 

00:25:50.720 --> 00:25:55.430 align:start position:0%
 
xp6<00:25:51.120><c> doesn't</c><00:25:51.360><c> actually</c><00:25:51.520><c> use</c><00:25:51.760><c> either</c><00:25:52.000><c> of</c><00:25:52.080><c> these</c>

00:25:55.430 --> 00:25:55.440 align:start position:0%
 
 

00:25:55.440 --> 00:26:02.390 align:start position:0%
 
all<00:25:55.600><c> right</c><00:25:56.640><c> other</c><00:25:56.880><c> questions</c>

00:26:02.390 --> 00:26:02.400 align:start position:0%
 
 

00:26:02.400 --> 00:26:05.720 align:start position:0%
 
all<00:26:02.480><c> right</c><00:26:03.120><c> let's</c><00:26:03.679><c> execute</c><00:26:04.960><c> the</c><00:26:05.279><c> um</c>

00:26:05.720 --> 00:26:05.730 align:start position:0%
all right let's execute the um
 

00:26:05.730 --> 00:26:07.029 align:start position:0%
all right let's execute the um
[Music]

00:26:07.029 --> 00:26:07.039 align:start position:0%
[Music]
 

00:26:07.039 --> 00:26:09.110 align:start position:0%
[Music]
let<00:26:07.200><c> me</c><00:26:07.279><c> just</c><00:26:07.440><c> remind</c><00:26:07.919><c> us</c><00:26:08.640><c> where</c><00:26:08.799><c> we</c><00:26:08.960><c> are</c><00:26:09.039><c> i'm</c>

00:26:09.110 --> 00:26:09.120 align:start position:0%
let me just remind us where we are i'm
 

00:26:09.120 --> 00:26:10.390 align:start position:0%
let me just remind us where we are i'm
going<00:26:09.279><c> to</c><00:26:09.360><c> print</c><00:26:09.600><c> out</c><00:26:09.919><c> the</c>

00:26:10.390 --> 00:26:10.400 align:start position:0%
going to print out the
 

00:26:10.400 --> 00:26:11.990 align:start position:0%
going to print out the
contents<00:26:10.799><c> of</c><00:26:10.880><c> the</c><00:26:11.039><c> right</c><00:26:11.360><c> we're</c><00:26:11.520><c> in</c><00:26:11.600><c> the</c><00:26:11.679><c> right</c>

00:26:11.990 --> 00:26:12.000 align:start position:0%
contents of the right we're in the right
 

00:26:12.000 --> 00:26:13.669 align:start position:0%
contents of the right we're in the right
library<00:26:12.480><c> function</c>

00:26:13.669 --> 00:26:13.679 align:start position:0%
library function
 

00:26:13.679 --> 00:26:16.870 align:start position:0%
library function
in<00:26:13.919><c> uh</c>

00:26:16.870 --> 00:26:16.880 align:start position:0%
 
 

00:26:16.880 --> 00:26:19.269 align:start position:0%
 
in<00:26:16.960><c> the</c><00:26:17.120><c> shell</c><00:26:18.080><c> and</c><00:26:18.240><c> the</c><00:26:18.400><c> program</c><00:26:18.720><c> counter</c><00:26:19.120><c> is</c>

00:26:19.269 --> 00:26:19.279 align:start position:0%
in the shell and the program counter is
 

00:26:19.279 --> 00:26:20.630 align:start position:0%
in the shell and the program counter is
pointing<00:26:19.600><c> to</c><00:26:19.679><c> the</c><00:26:19.760><c> e-call</c><00:26:20.080><c> instruction</c><00:26:20.480><c> we're</c>

00:26:20.630 --> 00:26:20.640 align:start position:0%
pointing to the e-call instruction we're
 

00:26:20.640 --> 00:26:23.110 align:start position:0%
pointing to the e-call instruction we're
about<00:26:20.799><c> to</c><00:26:20.960><c> execute</c><00:26:21.279><c> the</c><00:26:21.360><c> e-call</c><00:26:21.760><c> instruction</c>

00:26:23.110 --> 00:26:23.120 align:start position:0%
about to execute the e-call instruction
 

00:26:23.120 --> 00:26:24.470 align:start position:0%
about to execute the e-call instruction
we're<00:26:23.279><c> still</c><00:26:23.440><c> in</c><00:26:23.520><c> user</c><00:26:23.760><c> space</c><00:26:24.080><c> but</c><00:26:24.240><c> we</c><00:26:24.320><c> won't</c>

00:26:24.470 --> 00:26:24.480 align:start position:0%
we're still in user space but we won't
 

00:26:24.480 --> 00:26:26.710 align:start position:0%
we're still in user space but we won't
be<00:26:24.640><c> for</c><00:26:24.799><c> long</c><00:26:25.679><c> um</c>

00:26:26.710 --> 00:26:26.720 align:start position:0%
be for long um
 

00:26:26.720 --> 00:26:30.310 align:start position:0%
be for long um
boom<00:26:27.279><c> i</c><00:26:27.440><c> executed</c><00:26:27.919><c> the</c><00:26:28.000><c> e-call</c><00:26:28.320><c> instruction</c>

00:26:30.310 --> 00:26:30.320 align:start position:0%
boom i executed the e-call instruction
 

00:26:30.320 --> 00:26:33.510 align:start position:0%
boom i executed the e-call instruction
okay<00:26:30.720><c> so</c><00:26:31.279><c> first</c><00:26:31.440><c> question</c><00:26:31.760><c> is</c><00:26:31.840><c> where</c><00:26:32.080><c> are</c><00:26:32.240><c> we</c>

00:26:33.510 --> 00:26:33.520 align:start position:0%
okay so first question is where are we
 

00:26:33.520 --> 00:26:36.390 align:start position:0%
okay so first question is where are we
after<00:26:33.840><c> the</c><00:26:33.919><c> e-call</c><00:26:35.840><c> we</c><00:26:36.000><c> can</c><00:26:36.080><c> look</c><00:26:36.240><c> at</c><00:26:36.320><c> the</c>

00:26:36.390 --> 00:26:36.400 align:start position:0%
after the e-call we can look at the
 

00:26:36.400 --> 00:26:38.470 align:start position:0%
after the e-call we can look at the
program<00:26:36.840><c> counter</c>

00:26:38.470 --> 00:26:38.480 align:start position:0%
program counter
 

00:26:38.480 --> 00:26:40.470 align:start position:0%
program counter
we<00:26:38.640><c> see</c><00:26:38.799><c> this</c><00:26:38.960><c> now</c><00:26:39.679><c> used</c><00:26:39.840><c> to</c><00:26:39.919><c> be</c><00:26:40.000><c> a</c><00:26:40.080><c> very</c><00:26:40.240><c> low</c>

00:26:40.470 --> 00:26:40.480 align:start position:0%
we see this now used to be a very low
 

00:26:40.480 --> 00:26:42.710 align:start position:0%
we see this now used to be a very low
number<00:26:40.799><c> de6</c><00:26:41.440><c> now</c><00:26:41.600><c> it's</c><00:26:41.679><c> a</c><00:26:41.760><c> very</c><00:26:42.000><c> high</c><00:26:42.240><c> number</c>

00:26:42.710 --> 00:26:42.720 align:start position:0%
number de6 now it's a very high number
 

00:26:42.720 --> 00:26:44.230 align:start position:0%
number de6 now it's a very high number
in<00:26:42.799><c> fact</c><00:26:43.039><c> we</c><00:26:43.200><c> look</c><00:26:43.360><c> at</c><00:26:43.440><c> the</c><00:26:43.760><c> the</c><00:26:43.919><c> program</c>

00:26:44.230 --> 00:26:44.240 align:start position:0%
in fact we look at the the program
 

00:26:44.240 --> 00:26:46.149 align:start position:0%
in fact we look at the the program
counter<00:26:44.480><c> as</c><00:26:44.559><c> a</c><00:26:44.640><c> virtual</c><00:26:44.960><c> address</c>

00:26:46.149 --> 00:26:46.159 align:start position:0%
counter as a virtual address
 

00:26:46.159 --> 00:26:50.149 align:start position:0%
counter as a virtual address
like<00:26:46.400><c> all</c><00:26:46.559><c> addresses</c><00:26:47.039><c> that</c><00:26:48.000><c> instructions</c><00:26:48.559><c> use</c>

00:26:50.149 --> 00:26:50.159 align:start position:0%
like all addresses that instructions use
 

00:26:50.159 --> 00:26:52.390 align:start position:0%
like all addresses that instructions use
and<00:26:50.320><c> we</c><00:26:50.480><c> can</c><00:26:50.799><c> look</c><00:26:51.039><c> in</c><00:26:51.120><c> the</c><00:26:51.200><c> page</c><00:26:51.520><c> table</c>

00:26:52.390 --> 00:26:52.400 align:start position:0%
and we can look in the page table
 

00:26:52.400 --> 00:26:53.590 align:start position:0%
and we can look in the page table
actually<00:26:52.640><c> let's</c><00:26:52.799><c> just</c><00:26:52.960><c> check</c><00:26:53.120><c> what</c><00:26:53.279><c> the</c><00:26:53.360><c> page</c>

00:26:53.590 --> 00:26:53.600 align:start position:0%
actually let's just check what the page
 

00:26:53.600 --> 00:26:54.390 align:start position:0%
actually let's just check what the page
table<00:26:54.000><c> is</c>

00:26:54.390 --> 00:26:54.400 align:start position:0%
table is
 

00:26:54.400 --> 00:26:58.070 align:start position:0%
table is
just<00:26:54.960><c> be</c><00:26:55.120><c> sure</c><00:26:55.440><c> i'm</c><00:26:55.520><c> going</c><00:26:55.679><c> to</c><00:26:56.960><c> ask</c><00:26:57.360><c> qmu</c><00:26:57.919><c> for</c>

00:26:58.070 --> 00:26:58.080 align:start position:0%
just be sure i'm going to ask qmu for
 

00:26:58.080 --> 00:26:59.590 align:start position:0%
just be sure i'm going to ask qmu for
info<00:26:58.400><c> mam</c><00:26:58.640><c> again</c>

00:26:59.590 --> 00:26:59.600 align:start position:0%
info mam again
 

00:26:59.600 --> 00:27:02.230 align:start position:0%
info mam again
it's<00:26:59.760><c> the</c><00:26:59.840><c> very</c><00:27:00.080><c> same</c><00:27:00.320><c> page</c><00:27:00.559><c> table</c><00:27:02.080><c> so</c>

00:27:02.230 --> 00:27:02.240 align:start position:0%
it's the very same page table so
 

00:27:02.240 --> 00:27:03.510 align:start position:0%
it's the very same page table so
nothing's<00:27:02.559><c> changed</c><00:27:02.880><c> there</c>

00:27:03.510 --> 00:27:03.520 align:start position:0%
nothing's changed there
 

00:27:03.520 --> 00:27:05.909 align:start position:0%
nothing's changed there
we'll<00:27:03.679><c> look</c><00:27:03.919><c> up</c><00:27:04.159><c> our</c><00:27:04.880><c> new</c><00:27:05.279><c> current</c><00:27:05.520><c> program</c>

00:27:05.909 --> 00:27:05.919 align:start position:0%
we'll look up our new current program
 

00:27:05.919 --> 00:27:06.630 align:start position:0%
we'll look up our new current program
counter<00:27:06.240><c> there</c>

00:27:06.630 --> 00:27:06.640 align:start position:0%
counter there
 

00:27:06.640 --> 00:27:10.149 align:start position:0%
counter there
the<00:27:06.799><c> program</c><00:27:07.120><c> counter</c><00:27:07.840><c> is</c><00:27:08.080><c> at</c><00:27:08.240><c> the</c>

00:27:10.149 --> 00:27:10.159 align:start position:0%
the program counter is at the
 

00:27:10.159 --> 00:27:11.510 align:start position:0%
the program counter is at the
right<00:27:10.400><c> at</c><00:27:10.559><c> the</c><00:27:10.640><c> beginning</c><00:27:11.039><c> of</c><00:27:11.120><c> this</c>

00:27:11.510 --> 00:27:11.520 align:start position:0%
right at the beginning of this
 

00:27:11.520 --> 00:27:13.830 align:start position:0%
right at the beginning of this
trampoline<00:27:12.080><c> page</c><00:27:12.480><c> that's</c><00:27:12.720><c> mapped</c>

00:27:13.830 --> 00:27:13.840 align:start position:0%
trampoline page that's mapped
 

00:27:13.840 --> 00:27:17.430 align:start position:0%
trampoline page that's mapped
way<00:27:14.080><c> up</c><00:27:14.240><c> high</c><00:27:14.640><c> and</c><00:27:15.520><c> in</c><00:27:15.679><c> the</c><00:27:15.760><c> user</c><00:27:16.080><c> memory</c>

00:27:17.430 --> 00:27:17.440 align:start position:0%
way up high and in the user memory
 

00:27:17.440 --> 00:27:19.269 align:start position:0%
way up high and in the user memory
that's<00:27:17.679><c> where</c><00:27:17.840><c> we're</c><00:27:18.000><c> executing</c><00:27:18.799><c> we</c><00:27:18.960><c> can</c><00:27:19.120><c> see</c>

00:27:19.269 --> 00:27:19.279 align:start position:0%
that's where we're executing we can see
 

00:27:19.279 --> 00:27:21.269 align:start position:0%
that's where we're executing we can see
the<00:27:19.440><c> instructions</c><00:27:20.159><c> that</c><00:27:20.320><c> are</c><00:27:20.480><c> there</c>

00:27:21.269 --> 00:27:21.279 align:start position:0%
the instructions that are there
 

00:27:21.279 --> 00:27:31.510 align:start position:0%
the instructions that are there
i'm<00:27:21.600><c> going</c><00:27:21.679><c> to</c><00:27:21.840><c> use</c>

00:27:31.510 --> 00:27:31.520 align:start position:0%
 
 

00:27:31.520 --> 00:27:34.549 align:start position:0%
 
these<00:27:31.760><c> are</c><00:27:31.840><c> the</c><00:27:32.840><c> instructions</c>

00:27:34.549 --> 00:27:34.559 align:start position:0%
these are the instructions
 

00:27:34.559 --> 00:27:36.389 align:start position:0%
these are the instructions
the<00:27:34.720><c> very</c><00:27:34.960><c> first</c><00:27:35.279><c> instructions</c><00:27:35.919><c> that</c><00:27:36.159><c> the</c>

00:27:36.389 --> 00:27:36.399 align:start position:0%
the very first instructions that the
 

00:27:36.399 --> 00:27:38.470 align:start position:0%
the very first instructions that the
kernel<00:27:36.799><c> executes</c><00:27:37.279><c> in</c><00:27:37.440><c> supervisor</c><00:27:38.000><c> mode</c><00:27:38.399><c> at</c>

00:27:38.470 --> 00:27:38.480 align:start position:0%
kernel executes in supervisor mode at
 

00:27:38.480 --> 00:27:39.110 align:start position:0%
kernel executes in supervisor mode at
the<00:27:38.640><c> beginning</c>

00:27:39.110 --> 00:27:39.120 align:start position:0%
the beginning
 

00:27:39.120 --> 00:27:40.950 align:start position:0%
the beginning
very<00:27:39.360><c> beginning</c><00:27:39.679><c> of</c><00:27:39.760><c> the</c><00:27:39.919><c> trap</c><00:27:40.559><c> and</c><00:27:40.720><c> through</c>

00:27:40.950 --> 00:27:40.960 align:start position:0%
very beginning of the trap and through
 

00:27:40.960 --> 00:27:42.789 align:start position:0%
very beginning of the trap and through
some<00:27:41.200><c> weirdness</c><00:27:41.600><c> in</c><00:27:41.760><c> gdb</c><00:27:42.240><c> we've</c><00:27:42.480><c> actually</c>

00:27:42.789 --> 00:27:42.799 align:start position:0%
some weirdness in gdb we've actually
 

00:27:42.799 --> 00:27:45.430 align:start position:0%
some weirdness in gdb we've actually
already<00:27:43.200><c> executed</c><00:27:43.679><c> the</c><00:27:43.760><c> first</c><00:27:44.000><c> instruction</c>

00:27:45.430 --> 00:27:45.440 align:start position:0%
already executed the first instruction
 

00:27:45.440 --> 00:27:49.029 align:start position:0%
already executed the first instruction
at<00:27:45.520><c> the</c><00:27:45.600><c> very</c><00:27:45.840><c> beginning</c><00:27:46.159><c> of</c><00:27:46.240><c> this</c><00:27:46.480><c> page</c>

00:27:49.029 --> 00:27:49.039 align:start position:0%
at the very beginning of this page
 

00:27:49.039 --> 00:27:51.269 align:start position:0%
at the very beginning of this page
and<00:27:49.520><c> we're</c><00:27:49.679><c> about</c><00:27:49.919><c> to</c><00:27:50.480><c> execute</c><00:27:50.880><c> the</c><00:27:51.039><c> second</c>

00:27:51.269 --> 00:27:51.279 align:start position:0%
and we're about to execute the second
 

00:27:51.279 --> 00:27:53.430 align:start position:0%
and we're about to execute the second
instruction

00:27:53.430 --> 00:27:53.440 align:start position:0%
instruction
 

00:27:53.440 --> 00:27:57.029 align:start position:0%
instruction
we<00:27:53.600><c> can</c><00:27:53.679><c> look</c><00:27:53.840><c> at</c><00:27:53.919><c> the</c><00:27:54.000><c> registers</c>

00:27:57.029 --> 00:27:57.039 align:start position:0%
 
 

00:27:57.039 --> 00:27:58.070 align:start position:0%
 
i<00:27:57.200><c> don't</c><00:27:57.279><c> know</c><00:27:57.360><c> if</c><00:27:57.520><c> you</c><00:27:57.600><c> remember</c><00:27:57.840><c> these</c>

00:27:58.070 --> 00:27:58.080 align:start position:0%
i don't know if you remember these
 

00:27:58.080 --> 00:28:00.230 align:start position:0%
i don't know if you remember these
register<00:27:58.480><c> values</c><00:27:58.880><c> but</c><00:27:59.360><c> nothing</c><00:27:59.679><c> has</c><00:27:59.840><c> changed</c>

00:28:00.230 --> 00:28:00.240 align:start position:0%
register values but nothing has changed
 

00:28:00.240 --> 00:28:02.070 align:start position:0%
register values but nothing has changed
here<00:28:00.399><c> these</c><00:28:00.640><c> are</c><00:28:00.799><c> exactly</c><00:28:01.279><c> the</c><00:28:01.360><c> same</c><00:28:01.600><c> register</c>

00:28:02.070 --> 00:28:02.080 align:start position:0%
here these are exactly the same register
 

00:28:02.080 --> 00:28:04.470 align:start position:0%
here these are exactly the same register
contents<00:28:02.559><c> that</c><00:28:02.640><c> the</c><00:28:02.799><c> user</c><00:28:03.120><c> program</c><00:28:03.440><c> has</c>

00:28:04.470 --> 00:28:04.480 align:start position:0%
contents that the user program has
 

00:28:04.480 --> 00:28:06.789 align:start position:0%
contents that the user program has
had<00:28:04.799><c> so</c><00:28:04.960><c> these</c><00:28:05.120><c> are</c><00:28:05.279><c> all</c><00:28:05.360><c> full</c><00:28:05.600><c> of</c><00:28:06.000><c> user</c><00:28:06.320><c> values</c>

00:28:06.789 --> 00:28:06.799 align:start position:0%
had so these are all full of user values
 

00:28:06.799 --> 00:28:07.590 align:start position:0%
had so these are all full of user values
for<00:28:06.960><c> many</c><00:28:07.200><c> of</c><00:28:07.279><c> them</c>

00:28:07.590 --> 00:28:07.600 align:start position:0%
for many of them
 

00:28:07.600 --> 00:28:09.430 align:start position:0%
for many of them
or<00:28:07.840><c> all</c><00:28:08.000><c> of</c><00:28:08.080><c> them</c><00:28:08.240><c> for</c><00:28:08.399><c> all</c><00:28:08.480><c> we</c><00:28:08.640><c> know</c><00:28:09.279><c> they're</c>

00:28:09.430 --> 00:28:09.440 align:start position:0%
or all of them for all we know they're
 

00:28:09.440 --> 00:28:11.350 align:start position:0%
or all of them for all we know they're
the<00:28:09.600><c> only</c><00:28:09.840><c> locations</c><00:28:10.320><c> these</c><00:28:10.559><c> value</c><00:28:10.880><c> exists</c><00:28:11.120><c> so</c>

00:28:11.350 --> 00:28:11.360 align:start position:0%
the only locations these value exists so
 

00:28:11.360 --> 00:28:12.870 align:start position:0%
the only locations these value exists so
we<00:28:11.520><c> have</c><00:28:11.679><c> to</c><00:28:11.760><c> be</c><00:28:11.840><c> very</c><00:28:12.000><c> careful</c><00:28:12.320><c> that</c><00:28:12.480><c> we</c><00:28:12.640><c> can't</c>

00:28:12.870 --> 00:28:12.880 align:start position:0%
we have to be very careful that we can't
 

00:28:12.880 --> 00:28:13.669 align:start position:0%
we have to be very careful that we can't
actually<00:28:13.120><c> use</c>

00:28:13.669 --> 00:28:13.679 align:start position:0%
actually use
 

00:28:13.679 --> 00:28:16.710 align:start position:0%
actually use
any<00:28:14.240><c> registers</c><00:28:14.880><c> at</c><00:28:14.960><c> this</c><00:28:15.200><c> point</c><00:28:16.159><c> without</c>

00:28:16.710 --> 00:28:16.720 align:start position:0%
any registers at this point without
 

00:28:16.720 --> 00:28:19.029 align:start position:0%
any registers at this point without
first<00:28:17.120><c> saving</c><00:28:17.440><c> those</c><00:28:17.679><c> registers</c><00:28:18.240><c> somewhere</c>

00:28:19.029 --> 00:28:19.039 align:start position:0%
first saving those registers somewhere
 

00:28:19.039 --> 00:28:20.470 align:start position:0%
first saving those registers somewhere
so<00:28:19.200><c> we</c><00:28:19.360><c> can</c><00:28:19.440><c> restore</c><00:28:19.919><c> them</c>

00:28:20.470 --> 00:28:20.480 align:start position:0%
so we can restore them
 

00:28:20.480 --> 00:28:22.070 align:start position:0%
so we can restore them
because<00:28:20.720><c> if</c><00:28:20.880><c> the</c><00:28:21.039><c> kernel</c><00:28:21.279><c> was</c><00:28:21.440><c> to</c><00:28:21.600><c> use</c><00:28:21.840><c> any</c><00:28:22.000><c> of</c>

00:28:22.070 --> 00:28:22.080 align:start position:0%
because if the kernel was to use any of
 

00:28:22.080 --> 00:28:23.830 align:start position:0%
because if the kernel was to use any of
these<00:28:22.320><c> registers</c><00:28:22.799><c> at</c><00:28:22.880><c> this</c><00:28:23.039><c> point</c><00:28:23.200><c> it</c><00:28:23.360><c> would</c>

00:28:23.830 --> 00:28:23.840 align:start position:0%
these registers at this point it would
 

00:28:23.840 --> 00:28:27.990 align:start position:0%
these registers at this point it would
overwrite<00:28:26.640><c> whatever</c><00:28:26.960><c> that</c><00:28:27.120><c> user</c><00:28:27.360><c> value</c><00:28:27.760><c> is</c>

00:28:27.990 --> 00:28:28.000 align:start position:0%
overwrite whatever that user value is
 

00:28:28.000 --> 00:28:29.669 align:start position:0%
overwrite whatever that user value is
and<00:28:28.080><c> then</c><00:28:28.320><c> if</c><00:28:28.480><c> we</c><00:28:28.640><c> try</c><00:28:28.880><c> to</c><00:28:28.960><c> resume</c><00:28:29.279><c> the</c><00:28:29.360><c> user</c>

00:28:29.669 --> 00:28:29.679 align:start position:0%
and then if we try to resume the user
 

00:28:29.679 --> 00:28:30.950 align:start position:0%
and then if we try to resume the user
program<00:28:29.919><c> we</c><00:28:30.080><c> wouldn't</c><00:28:30.320><c> be</c><00:28:30.399><c> able</c><00:28:30.559><c> to</c><00:28:30.640><c> set</c><00:28:30.799><c> up</c>

00:28:30.950 --> 00:28:30.960 align:start position:0%
program we wouldn't be able to set up
 

00:28:30.960 --> 00:28:32.789 align:start position:0%
program we wouldn't be able to set up
its<00:28:31.120><c> registers</c><00:28:31.840><c> with</c><00:28:32.000><c> the</c><00:28:32.080><c> correct</c><00:28:32.399><c> values</c>

00:28:32.789 --> 00:28:32.799 align:start position:0%
its registers with the correct values
 

00:28:32.799 --> 00:28:33.590 align:start position:0%
its registers with the correct values
and<00:28:32.880><c> the</c>

00:28:33.590 --> 00:28:33.600 align:start position:0%
and the
 

00:28:33.600 --> 00:28:35.190 align:start position:0%
and the
user<00:28:33.919><c> program</c><00:28:34.240><c> would</c><00:28:34.320><c> just</c><00:28:34.720><c> do</c><00:28:34.960><c> something</c>

00:28:35.190 --> 00:28:35.200 align:start position:0%
user program would just do something
 

00:28:35.200 --> 00:28:37.029 align:start position:0%
user program would just do something
totally<00:28:35.600><c> wrong</c>

00:28:37.029 --> 00:28:37.039 align:start position:0%
totally wrong
 

00:28:37.039 --> 00:28:40.310 align:start position:0%
totally wrong
um<00:28:37.440><c> a</c><00:28:37.520><c> question</c><00:28:38.399><c> yes</c><00:28:39.360><c> could</c><00:28:39.520><c> you</c><00:28:39.760><c> return</c><00:28:40.159><c> to</c>

00:28:40.310 --> 00:28:40.320 align:start position:0%
um a question yes could you return to
 

00:28:40.320 --> 00:28:40.630 align:start position:0%
um a question yes could you return to
the

00:28:40.630 --> 00:28:40.640 align:start position:0%
the
 

00:28:40.640 --> 00:28:43.269 align:start position:0%
the
instructions<00:28:41.760><c> panel</c><00:28:42.159><c> that</c><00:28:42.320><c> you</c><00:28:42.559><c> had</c><00:28:42.720><c> before</c>

00:28:43.269 --> 00:28:43.279 align:start position:0%
instructions panel that you had before
 

00:28:43.279 --> 00:28:46.230 align:start position:0%
instructions panel that you had before
i'm<00:28:43.360><c> wondering</c><00:28:43.679><c> what</c><00:28:43.919><c> the</c><00:28:44.200><c> crrw</c>

00:28:46.230 --> 00:28:46.240 align:start position:0%
i'm wondering what the crrw
 

00:28:46.240 --> 00:28:51.269 align:start position:0%
i'm wondering what the crrw
instruction<00:28:46.720><c> is</c><00:28:46.799><c> doing</c>

00:28:51.269 --> 00:28:51.279 align:start position:0%
 
 

00:28:51.279 --> 00:28:54.070 align:start position:0%
 
the<00:28:51.440><c> csr</c><00:28:52.080><c> rw</c><00:28:52.480><c> okay</c><00:28:52.720><c> we'll</c><00:28:52.880><c> talk</c><00:28:53.120><c> about</c><00:28:53.279><c> this</c><00:28:53.520><c> uh</c>

00:28:54.070 --> 00:28:54.080 align:start position:0%
the csr rw okay we'll talk about this uh
 

00:28:54.080 --> 00:28:55.430 align:start position:0%
the csr rw okay we'll talk about this uh
in<00:28:54.320><c> in</c><00:28:54.559><c> a</c><00:28:54.640><c> few</c><00:28:54.799><c> minutes</c>

00:28:55.430 --> 00:28:55.440 align:start position:0%
in in a few minutes
 

00:28:55.440 --> 00:28:57.269 align:start position:0%
in in a few minutes
um<00:28:56.080><c> but</c><00:28:56.240><c> the</c><00:28:56.320><c> answer</c><00:28:56.559><c> to</c><00:28:56.640><c> your</c><00:28:56.799><c> question</c><00:28:57.120><c> is</c>

00:28:57.269 --> 00:28:57.279 align:start position:0%
um but the answer to your question is
 

00:28:57.279 --> 00:28:59.510 align:start position:0%
um but the answer to your question is
that<00:28:57.520><c> instruction</c><00:28:58.320><c> swaps</c>

00:28:59.510 --> 00:28:59.520 align:start position:0%
that instruction swaps
 

00:28:59.520 --> 00:29:02.710 align:start position:0%
that instruction swaps
a0<00:29:00.720><c> with</c><00:29:00.960><c> the</c><00:29:01.039><c> contents</c><00:29:01.679><c> of</c><00:29:01.840><c> the</c><00:29:02.159><c> special</c>

00:29:02.710 --> 00:29:02.720 align:start position:0%
a0 with the contents of the special
 

00:29:02.720 --> 00:29:07.029 align:start position:0%
a0 with the contents of the special
scratch<00:29:03.279><c> register</c><00:29:04.720><c> um</c><00:29:05.600><c> and</c><00:29:05.760><c> so</c><00:29:06.000><c> in</c>

00:29:07.029 --> 00:29:07.039 align:start position:0%
scratch register um and so in
 

00:29:07.039 --> 00:29:09.110 align:start position:0%
scratch register um and so in
yeah<00:29:07.760><c> okay</c><00:29:08.080><c> and</c><00:29:08.399><c> this</c><00:29:08.559><c> is</c><00:29:08.640><c> like</c><00:29:08.799><c> super</c>

00:29:09.110 --> 00:29:09.120 align:start position:0%
yeah okay and this is like super
 

00:29:09.120 --> 00:29:10.389 align:start position:0%
yeah okay and this is like super
important

00:29:10.389 --> 00:29:10.399 align:start position:0%
important
 

00:29:10.399 --> 00:29:12.789 align:start position:0%
important
and<00:29:11.520><c> basically</c><00:29:11.919><c> answers</c><00:29:12.240><c> the</c><00:29:12.320><c> question</c><00:29:12.559><c> how</c>

00:29:12.789 --> 00:29:12.799 align:start position:0%
and basically answers the question how
 

00:29:12.799 --> 00:29:13.590 align:start position:0%
and basically answers the question how
can<00:29:12.960><c> the</c>

00:29:13.590 --> 00:29:13.600 align:start position:0%
can the
 

00:29:13.600 --> 00:29:15.590 align:start position:0%
can the
this<00:29:14.080><c> kernel</c><00:29:14.399><c> trap</c><00:29:14.640><c> code</c><00:29:14.880><c> do</c><00:29:15.039><c> anything</c><00:29:15.440><c> if</c><00:29:15.520><c> it</c>

00:29:15.590 --> 00:29:15.600 align:start position:0%
this kernel trap code do anything if it
 

00:29:15.600 --> 00:29:17.430 align:start position:0%
this kernel trap code do anything if it
can't<00:29:15.840><c> use</c><00:29:16.000><c> any</c><00:29:16.240><c> registers</c>

00:29:17.430 --> 00:29:17.440 align:start position:0%
can't use any registers
 

00:29:17.440 --> 00:29:19.029 align:start position:0%
can't use any registers
the<00:29:17.600><c> answer</c><00:29:17.840><c> to</c><00:29:17.840><c> that</c><00:29:18.000><c> question</c><00:29:18.320><c> is</c><00:29:18.480><c> it</c><00:29:18.640><c> exit</c>

00:29:19.029 --> 00:29:19.039 align:start position:0%
the answer to that question is it exit
 

00:29:19.039 --> 00:29:21.549 align:start position:0%
the answer to that question is it exit
really<00:29:19.279><c> has</c><00:29:19.520><c> to</c><00:29:19.600><c> execute</c><00:29:20.320><c> this</c>

00:29:21.549 --> 00:29:21.559 align:start position:0%
really has to execute this
 

00:29:21.559 --> 00:29:25.110 align:start position:0%
really has to execute this
csrw<00:29:22.640><c> a0</c><00:29:23.279><c> scratch</c><00:29:23.840><c> instruction</c>

00:29:25.110 --> 00:29:25.120 align:start position:0%
csrw a0 scratch instruction
 

00:29:25.120 --> 00:29:28.549 align:start position:0%
csrw a0 scratch instruction
that<00:29:25.440><c> simultaneously</c><00:29:26.399><c> saves</c><00:29:26.799><c> a0</c><00:29:27.360><c> in</c><00:29:27.440><c> scratch</c>

00:29:28.549 --> 00:29:28.559 align:start position:0%
that simultaneously saves a0 in scratch
 

00:29:28.559 --> 00:29:31.750 align:start position:0%
that simultaneously saves a0 in scratch
and<00:29:28.720><c> happens</c><00:29:29.039><c> to</c><00:29:29.200><c> load</c><00:29:29.520><c> scratch</c><00:29:30.080><c> into</c><00:29:30.320><c> a0</c>

00:29:31.750 --> 00:29:31.760 align:start position:0%
and happens to load scratch into a0
 

00:29:31.760 --> 00:29:34.149 align:start position:0%
and happens to load scratch into a0
so<00:29:32.000><c> now</c><00:29:32.159><c> the</c><00:29:32.320><c> kernel</c><00:29:32.640><c> can</c><00:29:32.799><c> use</c><00:29:33.520><c> a0</c><00:29:34.000><c> for</c>

00:29:34.149 --> 00:29:34.159 align:start position:0%
so now the kernel can use a0 for
 

00:29:34.159 --> 00:29:35.110 align:start position:0%
so now the kernel can use a0 for
whatever<00:29:34.480><c> it</c><00:29:34.559><c> wants</c><00:29:34.799><c> to</c>

00:29:35.110 --> 00:29:35.120 align:start position:0%
whatever it wants to
 

00:29:35.120 --> 00:29:38.950 align:start position:0%
whatever it wants to
after<00:29:35.440><c> this</c><00:29:35.600><c> instruction</c>

00:29:38.950 --> 00:29:38.960 align:start position:0%
 
 

00:29:38.960 --> 00:29:42.389 align:start position:0%
 
okay<00:29:39.279><c> thanks</c><00:29:40.000><c> yeah</c><00:29:41.840><c> okay</c><00:29:42.080><c> so</c>

00:29:42.389 --> 00:29:42.399 align:start position:0%
okay thanks yeah okay so
 

00:29:42.399 --> 00:29:44.750 align:start position:0%
okay thanks yeah okay so
we're<00:29:42.559><c> currently</c><00:29:42.960><c> this</c><00:29:43.200><c> address</c><00:29:43.520><c> this</c><00:29:43.760><c> three</c>

00:29:44.750 --> 00:29:44.760 align:start position:0%
we're currently this address this three
 

00:29:44.760 --> 00:29:45.990 align:start position:0%
we're currently this address this three
ffff000

00:29:45.990 --> 00:29:46.000 align:start position:0%
ffff000
 

00:29:46.000 --> 00:29:48.070 align:start position:0%
ffff000
um<00:29:46.240><c> this</c><00:29:46.399><c> last</c><00:29:46.640><c> page</c><00:29:46.960><c> is</c><00:29:47.039><c> the</c><00:29:47.200><c> trampoline</c><00:29:47.679><c> page</c>

00:29:48.070 --> 00:29:48.080 align:start position:0%
um this last page is the trampoline page
 

00:29:48.080 --> 00:29:49.510 align:start position:0%
um this last page is the trampoline page
and<00:29:48.320><c> we're</c><00:29:48.480><c> currently</c><00:29:48.880><c> executing</c>

00:29:49.510 --> 00:29:49.520 align:start position:0%
and we're currently executing
 

00:29:49.520 --> 00:29:51.750 align:start position:0%
and we're currently executing
in<00:29:49.679><c> the</c><00:29:49.840><c> trampoline</c><00:29:50.399><c> page</c><00:29:51.120><c> which</c><00:29:51.360><c> contains</c>

00:29:51.750 --> 00:29:51.760 align:start position:0%
in the trampoline page which contains
 

00:29:51.760 --> 00:29:54.149 align:start position:0%
in the trampoline page which contains
the<00:29:52.080><c> very</c><00:29:52.399><c> first</c><00:29:52.840><c> instructions</c>

00:29:54.149 --> 00:29:54.159 align:start position:0%
the very first instructions
 

00:29:54.159 --> 00:29:57.990 align:start position:0%
the very first instructions
of<00:29:54.240><c> the</c><00:29:54.399><c> kernel's</c><00:29:54.880><c> trap</c><00:29:55.200><c> handling</c><00:29:55.679><c> code</c>

00:29:57.990 --> 00:29:58.000 align:start position:0%
of the kernel's trap handling code
 

00:29:58.000 --> 00:30:00.630 align:start position:0%
of the kernel's trap handling code
ecall<00:29:58.480><c> doesn't</c><00:29:58.720><c> switch</c><00:29:59.120><c> page</c><00:29:59.440><c> tables</c><00:30:00.399><c> that's</c>

00:30:00.630 --> 00:30:00.640 align:start position:0%
ecall doesn't switch page tables that's
 

00:30:00.640 --> 00:30:02.310 align:start position:0%
ecall doesn't switch page tables that's
a<00:30:00.720><c> very</c><00:30:00.880><c> important</c><00:30:01.200><c> thing</c><00:30:01.360><c> about</c><00:30:01.600><c> ecall</c><00:30:02.159><c> and</c>

00:30:02.310 --> 00:30:02.320 align:start position:0%
a very important thing about ecall and
 

00:30:02.320 --> 00:30:03.510 align:start position:0%
a very important thing about ecall and
what<00:30:02.480><c> that</c><00:30:02.720><c> means</c><00:30:03.039><c> is</c><00:30:03.120><c> that</c>

00:30:03.510 --> 00:30:03.520 align:start position:0%
what that means is that
 

00:30:03.520 --> 00:30:05.190 align:start position:0%
what that means is that
these<00:30:03.760><c> very</c><00:30:04.000><c> first</c><00:30:04.240><c> instructions</c><00:30:04.799><c> have</c><00:30:04.960><c> to</c><00:30:05.039><c> be</c>

00:30:05.190 --> 00:30:05.200 align:start position:0%
these very first instructions have to be
 

00:30:05.200 --> 00:30:08.549 align:start position:0%
these very first instructions have to be
present<00:30:05.760><c> in</c><00:30:06.080><c> every</c><00:30:06.399><c> user</c><00:30:06.799><c> page</c><00:30:07.120><c> table</c>

00:30:08.549 --> 00:30:08.559 align:start position:0%
present in every user page table
 

00:30:08.559 --> 00:30:09.909 align:start position:0%
present in every user page table
because<00:30:08.799><c> since</c><00:30:08.960><c> z-call</c><00:30:09.279><c> doesn't</c><00:30:09.440><c> switch</c><00:30:09.679><c> page</c>

00:30:09.909 --> 00:30:09.919 align:start position:0%
because since z-call doesn't switch page
 

00:30:09.919 --> 00:30:11.750 align:start position:0%
because since z-call doesn't switch page
tables<00:30:10.159><c> we</c><00:30:10.320><c> need</c><00:30:10.399><c> to</c><00:30:10.480><c> be</c><00:30:10.640><c> executing</c><00:30:11.360><c> the</c><00:30:11.520><c> first</c>

00:30:11.750 --> 00:30:11.760 align:start position:0%
tables we need to be executing the first
 

00:30:11.760 --> 00:30:12.950 align:start position:0%
tables we need to be executing the first
bit<00:30:11.919><c> of</c><00:30:12.000><c> the</c><00:30:12.080><c> kernel</c>

00:30:12.950 --> 00:30:12.960 align:start position:0%
bit of the kernel
 

00:30:12.960 --> 00:30:14.470 align:start position:0%
bit of the kernel
somewhere<00:30:13.360><c> in</c><00:30:13.440><c> the</c><00:30:13.520><c> user</c><00:30:13.840><c> page</c><00:30:14.080><c> table</c><00:30:14.399><c> and</c>

00:30:14.470 --> 00:30:14.480 align:start position:0%
somewhere in the user page table and
 

00:30:14.480 --> 00:30:16.070 align:start position:0%
somewhere in the user page table and
it's<00:30:14.640><c> this</c><00:30:14.799><c> trampoline</c><00:30:15.360><c> page</c>

00:30:16.070 --> 00:30:16.080 align:start position:0%
it's this trampoline page
 

00:30:16.080 --> 00:30:17.510 align:start position:0%
it's this trampoline page
which<00:30:16.320><c> the</c><00:30:16.399><c> kernel</c><00:30:16.640><c> carefully</c><00:30:17.039><c> maps</c><00:30:17.360><c> into</c>

00:30:17.510 --> 00:30:17.520 align:start position:0%
which the kernel carefully maps into
 

00:30:17.520 --> 00:30:19.909 align:start position:0%
which the kernel carefully maps into
every<00:30:17.760><c> user</c><00:30:18.399><c> page</c><00:30:18.799><c> table</c>

00:30:19.909 --> 00:30:19.919 align:start position:0%
every user page table
 

00:30:19.919 --> 00:30:21.909 align:start position:0%
every user page table
that<00:30:20.000><c> gives</c><00:30:20.240><c> the</c><00:30:20.320><c> kernel</c><00:30:20.720><c> a</c><00:30:20.799><c> place</c><00:30:21.200><c> to</c><00:30:21.440><c> execute</c>

00:30:21.909 --> 00:30:21.919 align:start position:0%
that gives the kernel a place to execute
 

00:30:21.919 --> 00:30:23.350 align:start position:0%
that gives the kernel a place to execute
at<00:30:22.080><c> the</c><00:30:22.159><c> very</c><00:30:22.480><c> beginning</c><00:30:22.880><c> of</c><00:30:22.960><c> a</c><00:30:23.039><c> trap</c><00:30:23.279><c> when</c>

00:30:23.350 --> 00:30:23.360 align:start position:0%
at the very beginning of a trap when
 

00:30:23.360 --> 00:30:25.269 align:start position:0%
at the very beginning of a trap when
we're<00:30:23.520><c> still</c><00:30:23.760><c> using</c><00:30:24.000><c> the</c><00:30:24.080><c> user</c><00:30:24.399><c> page</c><00:30:24.640><c> table</c>

00:30:25.269 --> 00:30:25.279 align:start position:0%
we're still using the user page table
 

00:30:25.279 --> 00:30:28.789 align:start position:0%
we're still using the user page table
and<00:30:25.360><c> the</c><00:30:25.520><c> way</c><00:30:25.679><c> this</c><00:30:25.840><c> is</c><00:30:26.000><c> controlled</c>

00:30:28.789 --> 00:30:28.799 align:start position:0%
 
 

00:30:28.799 --> 00:30:30.549 align:start position:0%
 
is<00:30:28.960><c> through</c><00:30:29.120><c> the</c><00:30:29.279><c> st</c><00:30:29.679><c> vec</c><00:30:29.919><c> register</c><00:30:30.320><c> this</c><00:30:30.480><c> is</c>

00:30:30.549 --> 00:30:30.559 align:start position:0%
is through the st vec register this is
 

00:30:30.559 --> 00:30:32.389 align:start position:0%
is through the st vec register this is
another<00:30:31.039><c> privileged</c>

00:30:32.389 --> 00:30:32.399 align:start position:0%
another privileged
 

00:30:32.399 --> 00:30:34.389 align:start position:0%
another privileged
register<00:30:32.880><c> only</c><00:30:33.200><c> readable</c><00:30:33.679><c> by</c><00:30:33.840><c> the</c><00:30:34.000><c> writable</c>

00:30:34.389 --> 00:30:34.399 align:start position:0%
register only readable by the writable
 

00:30:34.399 --> 00:30:36.070 align:start position:0%
register only readable by the writable
by<00:30:34.559><c> the</c><00:30:34.840><c> supervisor</c>

00:30:36.070 --> 00:30:36.080 align:start position:0%
by the supervisor
 

00:30:36.080 --> 00:30:37.750 align:start position:0%
by the supervisor
and<00:30:36.240><c> the</c><00:30:36.320><c> kernel</c><00:30:36.720><c> before</c><00:30:37.039><c> it</c><00:30:37.200><c> entered</c><00:30:37.520><c> user</c>

00:30:37.750 --> 00:30:37.760 align:start position:0%
and the kernel before it entered user
 

00:30:37.760 --> 00:30:39.669 align:start position:0%
and the kernel before it entered user
space<00:30:38.080><c> set</c><00:30:38.240><c> up</c><00:30:38.399><c> the</c><00:30:38.559><c> st</c><00:30:38.960><c> vec</c>

00:30:39.669 --> 00:30:39.679 align:start position:0%
space set up the st vec
 

00:30:39.679 --> 00:30:41.350 align:start position:0%
space set up the st vec
to<00:30:39.840><c> point</c><00:30:40.000><c> to</c><00:30:40.159><c> the</c><00:30:40.240><c> place</c><00:30:40.559><c> where</c><00:30:40.720><c> the</c><00:30:40.880><c> colonel</c>

00:30:41.350 --> 00:30:41.360 align:start position:0%
to point to the place where the colonel
 

00:30:41.360 --> 00:30:42.950 align:start position:0%
to point to the place where the colonel
wanted<00:30:41.760><c> traps</c><00:30:42.080><c> to</c><00:30:42.240><c> go</c>

00:30:42.950 --> 00:30:42.960 align:start position:0%
wanted traps to go
 

00:30:42.960 --> 00:30:44.470 align:start position:0%
wanted traps to go
and<00:30:43.120><c> so</c><00:30:43.279><c> as</c><00:30:43.440><c> you</c><00:30:43.520><c> can</c><00:30:43.600><c> see</c><00:30:43.840><c> the</c><00:30:43.919><c> kernel</c><00:30:44.240><c> has</c>

00:30:44.470 --> 00:30:44.480 align:start position:0%
and so as you can see the kernel has
 

00:30:44.480 --> 00:30:46.630 align:start position:0%
and so as you can see the kernel has
previously<00:30:45.039><c> set</c><00:30:45.279><c> up</c><00:30:45.360><c> this</c><00:30:45.679><c> st</c><00:30:46.000><c> deck</c>

00:30:46.630 --> 00:30:46.640 align:start position:0%
previously set up this st deck
 

00:30:46.640 --> 00:30:49.909 align:start position:0%
previously set up this st deck
to<00:30:46.799><c> this</c><00:30:47.039><c> three</c><00:30:48.200><c> ffff000</c><00:30:49.279><c> address</c><00:30:49.679><c> which</c><00:30:49.840><c> is</c>

00:30:49.909 --> 00:30:49.919 align:start position:0%
to this three ffff000 address which is
 

00:30:49.919 --> 00:30:52.470 align:start position:0%
to this three ffff000 address which is
the<00:30:50.080><c> beginning</c><00:30:50.480><c> of</c><00:30:50.559><c> the</c><00:30:50.720><c> trampoline</c><00:30:51.279><c> page</c>

00:30:52.470 --> 00:30:52.480 align:start position:0%
the beginning of the trampoline page
 

00:30:52.480 --> 00:30:55.350 align:start position:0%
the beginning of the trampoline page
and<00:30:52.559><c> it's</c><00:30:52.720><c> this</c><00:30:52.960><c> st</c><00:30:53.360><c> vec</c><00:30:53.600><c> register</c><00:30:54.559><c> that</c><00:30:55.120><c> its</c>

00:30:55.350 --> 00:30:55.360 align:start position:0%
and it's this st vec register that its
 

00:30:55.360 --> 00:30:57.190 align:start position:0%
and it's this st vec register that its
contents<00:30:55.919><c> is</c><00:30:56.000><c> the</c><00:30:56.159><c> reason</c><00:30:56.480><c> why</c><00:30:56.799><c> after</c><00:30:57.039><c> the</c>

00:30:57.190 --> 00:30:57.200 align:start position:0%
contents is the reason why after the
 

00:30:57.200 --> 00:30:58.070 align:start position:0%
contents is the reason why after the
e-call

00:30:58.070 --> 00:30:58.080 align:start position:0%
e-call
 

00:30:58.080 --> 00:31:01.710 align:start position:0%
e-call
we<00:30:58.320><c> ended</c><00:30:58.559><c> up</c><00:30:59.360><c> executing</c><00:31:00.159><c> at</c><00:31:00.240><c> this</c><00:31:00.480><c> particular</c>

00:31:01.710 --> 00:31:01.720 align:start position:0%
we ended up executing at this particular
 

00:31:01.720 --> 00:31:04.950 align:start position:0%
we ended up executing at this particular
place<00:31:02.840><c> um</c>

00:31:04.950 --> 00:31:04.960 align:start position:0%
place um
 

00:31:04.960 --> 00:31:06.149 align:start position:0%
place um
and<00:31:05.120><c> finally</c><00:31:05.360><c> i</c><00:31:05.440><c> just</c><00:31:05.600><c> want</c><00:31:05.679><c> to</c><00:31:05.760><c> remind</c><00:31:06.080><c> you</c>

00:31:06.149 --> 00:31:06.159 align:start position:0%
and finally i just want to remind you
 

00:31:06.159 --> 00:31:07.750 align:start position:0%
and finally i just want to remind you
that<00:31:06.320><c> even</c><00:31:06.559><c> though</c><00:31:06.640><c> the</c><00:31:06.880><c> trampoline</c><00:31:07.360><c> and</c><00:31:07.519><c> trap</c>

00:31:07.750 --> 00:31:07.760 align:start position:0%
that even though the trampoline and trap
 

00:31:07.760 --> 00:31:09.750 align:start position:0%
that even though the trampoline and trap
frame<00:31:08.159><c> pages</c><00:31:08.559><c> are</c><00:31:08.640><c> mapped</c><00:31:09.039><c> into</c><00:31:09.279><c> the</c><00:31:09.360><c> user</c>

00:31:09.750 --> 00:31:09.760 align:start position:0%
frame pages are mapped into the user
 

00:31:09.760 --> 00:31:11.990 align:start position:0%
frame pages are mapped into the user
page<00:31:10.080><c> table</c><00:31:10.480><c> user</c><00:31:10.799><c> address</c><00:31:11.039><c> space</c>

00:31:11.990 --> 00:31:12.000 align:start position:0%
page table user address space
 

00:31:12.000 --> 00:31:15.029 align:start position:0%
page table user address space
the<00:31:12.159><c> user</c><00:31:12.640><c> code</c><00:31:13.120><c> cannot</c><00:31:13.519><c> write</c><00:31:13.760><c> them</c>

00:31:15.029 --> 00:31:15.039 align:start position:0%
the user code cannot write them
 

00:31:15.039 --> 00:31:17.269 align:start position:0%
the user code cannot write them
because<00:31:15.360><c> the</c><00:31:15.519><c> pdes</c><00:31:16.080><c> for</c><00:31:16.240><c> them</c><00:31:16.720><c> don't</c><00:31:16.960><c> have</c><00:31:17.120><c> the</c>

00:31:17.269 --> 00:31:17.279 align:start position:0%
because the pdes for them don't have the
 

00:31:17.279 --> 00:31:19.990 align:start position:0%
because the pdes for them don't have the
pteu<00:31:18.000><c> flag</c><00:31:18.399><c> so</c><00:31:18.559><c> they're</c><00:31:18.720><c> protected</c>

00:31:19.990 --> 00:31:20.000 align:start position:0%
pteu flag so they're protected
 

00:31:20.000 --> 00:31:22.470 align:start position:0%
pteu flag so they're protected
against<00:31:20.399><c> user</c><00:31:20.720><c> code</c><00:31:21.760><c> and</c><00:31:21.919><c> that's</c><00:31:22.080><c> why</c><00:31:22.240><c> this</c>

00:31:22.470 --> 00:31:22.480 align:start position:0%
against user code and that's why this
 

00:31:22.480 --> 00:31:23.029 align:start position:0%
against user code and that's why this
trick<00:31:22.720><c> is</c>

00:31:23.029 --> 00:31:23.039 align:start position:0%
trick is
 

00:31:23.039 --> 00:31:24.310 align:start position:0%
trick is
part<00:31:23.200><c> of</c><00:31:23.279><c> the</c><00:31:23.360><c> reason</c><00:31:23.519><c> why</c><00:31:23.679><c> this</c><00:31:23.840><c> trick</c><00:31:24.159><c> is</c>

00:31:24.310 --> 00:31:24.320 align:start position:0%
part of the reason why this trick is
 

00:31:24.320 --> 00:31:27.269 align:start position:0%
part of the reason why this trick is
safe

00:31:27.269 --> 00:31:27.279 align:start position:0%
 
 

00:31:27.279 --> 00:31:29.269 align:start position:0%
 
um<00:31:27.919><c> i've</c><00:31:28.080><c> been</c><00:31:28.240><c> sort</c><00:31:28.399><c> of</c><00:31:28.640><c> telling</c><00:31:28.960><c> you</c><00:31:29.120><c> and</c>

00:31:29.269 --> 00:31:29.279 align:start position:0%
um i've been sort of telling you and
 

00:31:29.279 --> 00:31:31.590 align:start position:0%
um i've been sort of telling you and
assuming<00:31:30.000><c> that</c><00:31:30.159><c> we're</c><00:31:30.399><c> in</c><00:31:30.480><c> supervisor</c><00:31:31.120><c> mode</c>

00:31:31.590 --> 00:31:31.600 align:start position:0%
assuming that we're in supervisor mode
 

00:31:31.600 --> 00:31:33.190 align:start position:0%
assuming that we're in supervisor mode
i<00:31:31.679><c> don't</c><00:31:31.760><c> know</c><00:31:32.000><c> any</c><00:31:32.159><c> way</c><00:31:32.320><c> of</c><00:31:32.399><c> finding</c><00:31:32.799><c> out</c><00:31:32.960><c> what</c>

00:31:33.190 --> 00:31:33.200 align:start position:0%
i don't know any way of finding out what
 

00:31:33.200 --> 00:31:34.630 align:start position:0%
i don't know any way of finding out what
mode<00:31:33.679><c> the</c><00:31:33.760><c> machine</c><00:31:34.159><c> is</c><00:31:34.320><c> in</c>

00:31:34.630 --> 00:31:34.640 align:start position:0%
mode the machine is in
 

00:31:34.640 --> 00:31:37.830 align:start position:0%
mode the machine is in
directly<00:31:36.320><c> but</c><00:31:36.559><c> i</c><00:31:36.640><c> do</c><00:31:36.799><c> observe</c><00:31:37.279><c> that</c><00:31:37.519><c> the</c>

00:31:37.830 --> 00:31:37.840 align:start position:0%
directly but i do observe that the
 

00:31:37.840 --> 00:31:39.750 align:start position:0%
directly but i do observe that the
program<00:31:38.240><c> counter</c><00:31:38.640><c> is</c><00:31:38.799><c> currently</c><00:31:39.120><c> executing</c>

00:31:39.750 --> 00:31:39.760 align:start position:0%
program counter is currently executing
 

00:31:39.760 --> 00:31:41.750 align:start position:0%
program counter is currently executing
in<00:31:39.840><c> a</c><00:31:40.000><c> page</c><00:31:40.320><c> the</c><00:31:40.480><c> trampoline</c><00:31:40.960><c> page</c>

00:31:41.750 --> 00:31:41.760 align:start position:0%
in a page the trampoline page
 

00:31:41.760 --> 00:31:44.950 align:start position:0%
in a page the trampoline page
that<00:31:42.080><c> doesn't</c><00:31:42.320><c> have</c><00:31:42.480><c> a</c><00:31:42.640><c> pdeu</c><00:31:43.519><c> flag</c><00:31:44.080><c> set</c>

00:31:44.950 --> 00:31:44.960 align:start position:0%
that doesn't have a pdeu flag set
 

00:31:44.960 --> 00:31:47.110 align:start position:0%
that doesn't have a pdeu flag set
and<00:31:45.039><c> that</c><00:31:45.200><c> can</c><00:31:45.360><c> only</c><00:31:45.600><c> happen</c><00:31:45.919><c> without</c><00:31:46.240><c> a</c><00:31:46.320><c> crash</c>

00:31:47.110 --> 00:31:47.120 align:start position:0%
and that can only happen without a crash
 

00:31:47.120 --> 00:31:49.029 align:start position:0%
and that can only happen without a crash
if<00:31:47.279><c> we</c><00:31:47.360><c> are</c><00:31:47.519><c> in</c><00:31:47.600><c> supervisor</c><00:31:48.240><c> mode</c><00:31:48.480><c> so</c><00:31:48.640><c> i</c>

00:31:49.029 --> 00:31:49.039 align:start position:0%
if we are in supervisor mode so i
 

00:31:49.039 --> 00:31:51.990 align:start position:0%
if we are in supervisor mode so i
deduce<00:31:49.760><c> from</c><00:31:49.919><c> the</c><00:31:50.080><c> lack</c><00:31:50.240><c> of</c><00:31:50.399><c> a</c><00:31:50.480><c> crash</c><00:31:51.519><c> um</c><00:31:51.840><c> and</c>

00:31:51.990 --> 00:31:52.000 align:start position:0%
deduce from the lack of a crash um and
 

00:31:52.000 --> 00:31:52.310 align:start position:0%
deduce from the lack of a crash um and
the

00:31:52.310 --> 00:31:52.320 align:start position:0%
the
 

00:31:52.320 --> 00:31:53.830 align:start position:0%
the
value<00:31:52.640><c> of</c><00:31:52.720><c> the</c><00:31:52.799><c> program</c><00:31:53.120><c> calendar</c><00:31:53.440><c> that</c><00:31:53.600><c> we</c>

00:31:53.830 --> 00:31:53.840 align:start position:0%
value of the program calendar that we
 

00:31:53.840 --> 00:31:57.990 align:start position:0%
value of the program calendar that we
must<00:31:54.159><c> be</c><00:31:54.399><c> in</c><00:31:54.559><c> supervisor</c><00:31:55.120><c> mode</c>

00:31:57.990 --> 00:31:58.000 align:start position:0%
 
 

00:31:58.000 --> 00:32:00.310 align:start position:0%
 
how<00:31:58.159><c> we</c><00:31:58.320><c> got</c><00:31:58.480><c> here</c><00:31:58.720><c> of</c><00:31:58.799><c> course</c><00:31:59.360><c> uh</c><00:31:59.679><c> is</c><00:32:00.159><c> through</c>

00:32:00.310 --> 00:32:00.320 align:start position:0%
how we got here of course uh is through
 

00:32:00.320 --> 00:32:02.470 align:start position:0%
how we got here of course uh is through
ecall<00:32:00.799><c> ecall</c><00:32:01.279><c> really</c><00:32:01.519><c> just</c><00:32:01.679><c> changes</c><00:32:02.159><c> three</c>

00:32:02.470 --> 00:32:02.480 align:start position:0%
ecall ecall really just changes three
 

00:32:02.480 --> 00:32:03.350 align:start position:0%
ecall ecall really just changes three
things

00:32:03.350 --> 00:32:03.360 align:start position:0%
things
 

00:32:03.360 --> 00:32:06.070 align:start position:0%
things
um<00:32:03.679><c> first</c><00:32:04.720><c> e</c><00:32:04.880><c> call</c><00:32:05.039><c> changes</c><00:32:05.360><c> mode</c><00:32:05.600><c> from</c><00:32:05.840><c> user</c>

00:32:06.070 --> 00:32:06.080 align:start position:0%
um first e call changes mode from user
 

00:32:06.080 --> 00:32:07.830 align:start position:0%
um first e call changes mode from user
to<00:32:06.240><c> supervisor</c>

00:32:07.830 --> 00:32:07.840 align:start position:0%
to supervisor
 

00:32:07.840 --> 00:32:10.310 align:start position:0%
to supervisor
second<00:32:08.559><c> ecall</c><00:32:09.120><c> saves</c><00:32:09.519><c> the</c><00:32:09.679><c> program</c><00:32:10.000><c> counter</c>

00:32:10.310 --> 00:32:10.320 align:start position:0%
second ecall saves the program counter
 

00:32:10.320 --> 00:32:13.190 align:start position:0%
second ecall saves the program counter
register<00:32:10.960><c> in</c><00:32:11.039><c> the</c><00:32:11.279><c> sepc</c><00:32:12.240><c> register</c><00:32:12.799><c> so</c><00:32:12.960><c> we</c><00:32:13.039><c> can</c>

00:32:13.190 --> 00:32:13.200 align:start position:0%
register in the sepc register so we can
 

00:32:13.200 --> 00:32:14.870 align:start position:0%
register in the sepc register so we can
see<00:32:13.360><c> the</c><00:32:13.519><c> effect</c><00:32:13.840><c> of</c><00:32:13.919><c> that</c>

00:32:14.870 --> 00:32:14.880 align:start position:0%
see the effect of that
 

00:32:14.880 --> 00:32:16.870 align:start position:0%
see the effect of that
print<00:32:15.120><c> the</c><00:32:15.200><c> program</c><00:32:15.600><c> register</c><00:32:16.559><c> program</c>

00:32:16.870 --> 00:32:16.880 align:start position:0%
print the program register program
 

00:32:16.880 --> 00:32:18.149 align:start position:0%
print the program register program
counter<00:32:17.120><c> it's</c><00:32:17.279><c> certainly</c><00:32:17.600><c> no</c><00:32:17.760><c> longer</c><00:32:18.080><c> the</c>

00:32:18.149 --> 00:32:18.159 align:start position:0%
counter it's certainly no longer the
 

00:32:18.159 --> 00:32:19.350 align:start position:0%
counter it's certainly no longer the
user<00:32:18.480><c> program</c><00:32:18.799><c> counter</c>

00:32:19.350 --> 00:32:19.360 align:start position:0%
user program counter
 

00:32:19.360 --> 00:32:22.389 align:start position:0%
user program counter
even<00:32:19.519><c> though</c><00:32:19.760><c> all</c><00:32:19.840><c> the</c><00:32:20.000><c> other</c><00:32:20.159><c> registers</c><00:32:20.720><c> were</c>

00:32:22.389 --> 00:32:22.399 align:start position:0%
even though all the other registers were
 

00:32:22.399 --> 00:32:26.549 align:start position:0%
even though all the other registers were
it's<00:32:22.640><c> this</c><00:32:23.519><c> value</c><00:32:23.919><c> copied</c><00:32:24.240><c> from</c><00:32:24.480><c> sdvac</c>

00:32:26.549 --> 00:32:26.559 align:start position:0%
it's this value copied from sdvac
 

00:32:26.559 --> 00:32:30.710 align:start position:0%
it's this value copied from sdvac
and<00:32:26.720><c> we</c><00:32:26.799><c> can</c><00:32:26.960><c> also</c><00:32:27.279><c> print</c><00:32:28.640><c> uh</c><00:32:29.039><c> the</c><00:32:29.360><c> saved</c>

00:32:30.710 --> 00:32:30.720 align:start position:0%
and we can also print uh the saved
 

00:32:30.720 --> 00:32:33.750 align:start position:0%
and we can also print uh the saved
um<00:32:31.120><c> it's</c><00:32:31.440><c> the</c><00:32:31.760><c> supervisor</c><00:32:32.799><c> exception</c><00:32:33.360><c> program</c>

00:32:33.750 --> 00:32:33.760 align:start position:0%
um it's the supervisor exception program
 

00:32:33.760 --> 00:32:35.269 align:start position:0%
um it's the supervisor exception program
counter<00:32:34.080><c> is</c><00:32:34.240><c> what</c><00:32:34.399><c> that</c><00:32:34.559><c> stands</c><00:32:34.880><c> for</c>

00:32:35.269 --> 00:32:35.279 align:start position:0%
counter is what that stands for
 

00:32:35.279 --> 00:32:37.269 align:start position:0%
counter is what that stands for
but<00:32:35.440><c> this</c><00:32:35.600><c> is</c><00:32:35.679><c> where</c><00:32:35.919><c> ecall</c><00:32:36.480><c> saves</c><00:32:36.880><c> the</c><00:32:36.960><c> user</c>

00:32:37.269 --> 00:32:37.279 align:start position:0%
but this is where ecall saves the user
 

00:32:37.279 --> 00:32:39.509 align:start position:0%
but this is where ecall saves the user
pro<00:32:37.840><c> prime</c><00:32:38.159><c> counter</c>

00:32:39.509 --> 00:32:39.519 align:start position:0%
pro prime counter
 

00:32:39.519 --> 00:32:41.990 align:start position:0%
pro prime counter
and<00:32:39.600><c> that</c><00:32:39.760><c> has</c><00:32:40.000><c> the</c><00:32:40.159><c> familiar</c><00:32:40.640><c> value</c><00:32:41.200><c> de6</c>

00:32:41.990 --> 00:32:42.000 align:start position:0%
and that has the familiar value de6
 

00:32:42.000 --> 00:32:42.710 align:start position:0%
and that has the familiar value de6
which<00:32:42.240><c> is</c>

00:32:42.710 --> 00:32:42.720 align:start position:0%
which is
 

00:32:42.720 --> 00:32:45.830 align:start position:0%
which is
the<00:32:42.880><c> address</c><00:32:43.360><c> in</c><00:32:43.440><c> user</c><00:32:43.840><c> space</c><00:32:45.279><c> of</c><00:32:45.360><c> the</c><00:32:45.440><c> e-call</c>

00:32:45.830 --> 00:32:45.840 align:start position:0%
the address in user space of the e-call
 

00:32:45.840 --> 00:32:47.029 align:start position:0%
the address in user space of the e-call
instruction

00:32:47.029 --> 00:32:47.039 align:start position:0%
instruction
 

00:32:47.039 --> 00:32:48.470 align:start position:0%
instruction
so<00:32:47.200><c> we</c><00:32:47.279><c> got</c><00:32:47.440><c> that</c><00:32:47.600><c> one</c><00:32:47.760><c> register</c><00:32:48.240><c> at</c><00:32:48.320><c> least</c>

00:32:48.470 --> 00:32:48.480 align:start position:0%
so we got that one register at least
 

00:32:48.480 --> 00:32:50.389 align:start position:0%
so we got that one register at least
saved<00:32:48.720><c> away</c><00:32:49.039><c> by</c><00:32:49.200><c> e-call</c>

00:32:50.389 --> 00:32:50.399 align:start position:0%
saved away by e-call
 

00:32:50.399 --> 00:32:52.070 align:start position:0%
saved away by e-call
and<00:32:50.559><c> the</c><00:32:50.640><c> final</c><00:32:50.960><c> thing</c><00:32:51.120><c> that</c><00:32:51.279><c> e-call</c><00:32:51.679><c> does</c><00:32:51.919><c> the</c>

00:32:52.070 --> 00:32:52.080 align:start position:0%
and the final thing that e-call does the
 

00:32:52.080 --> 00:32:53.830 align:start position:0%
and the final thing that e-call does the
third<00:32:52.240><c> thing</c><00:32:52.480><c> it</c><00:32:52.559><c> does</c><00:32:52.799><c> is</c><00:32:53.120><c> jump</c>

00:32:53.830 --> 00:32:53.840 align:start position:0%
third thing it does is jump
 

00:32:53.840 --> 00:32:56.789 align:start position:0%
third thing it does is jump
to<00:32:54.000><c> the</c><00:32:54.159><c> instruction</c><00:32:54.880><c> that</c><00:32:55.679><c> s</c><00:32:55.919><c> t</c><00:32:56.159><c> vic</c><00:32:56.480><c> points</c>

00:32:56.789 --> 00:32:56.799 align:start position:0%
to the instruction that s t vic points
 

00:32:56.799 --> 00:33:00.460 align:start position:0%
to the instruction that s t vic points
to

00:33:00.460 --> 00:33:00.470 align:start position:0%
 
 

00:33:00.470 --> 00:33:02.310 align:start position:0%
 
[Music]

00:33:02.310 --> 00:33:02.320 align:start position:0%
[Music]
 

00:33:02.320 --> 00:33:05.990 align:start position:0%
[Music]
all<00:33:02.480><c> right</c><00:33:03.600><c> um</c><00:33:04.799><c> so</c><00:33:04.960><c> what</c><00:33:05.200><c> needs</c><00:33:05.360><c> to</c><00:33:05.440><c> happen</c><00:33:05.760><c> now</c>

00:33:05.990 --> 00:33:06.000 align:start position:0%
all right um so what needs to happen now
 

00:33:06.000 --> 00:33:07.269 align:start position:0%
all right um so what needs to happen now
ecal<00:33:06.240><c> has</c><00:33:06.320><c> done</c><00:33:06.480><c> a</c><00:33:06.559><c> little</c><00:33:06.720><c> bit</c><00:33:06.799><c> of</c><00:33:06.880><c> work</c><00:33:07.120><c> for</c>

00:33:07.269 --> 00:33:07.279 align:start position:0%
ecal has done a little bit of work for
 

00:33:07.279 --> 00:33:08.149 align:start position:0%
ecal has done a little bit of work for
us<00:33:07.519><c> but</c>

00:33:08.149 --> 00:33:08.159 align:start position:0%
us but
 

00:33:08.159 --> 00:33:09.750 align:start position:0%
us but
it<00:33:08.240><c> turns</c><00:33:08.480><c> out</c><00:33:08.559><c> we're</c><00:33:08.720><c> nowhere</c><00:33:09.039><c> near</c><00:33:09.279><c> ready</c><00:33:09.519><c> to</c>

00:33:09.750 --> 00:33:09.760 align:start position:0%
it turns out we're nowhere near ready to
 

00:33:09.760 --> 00:33:11.509 align:start position:0%
it turns out we're nowhere near ready to
actually<00:33:10.000><c> execute</c><00:33:10.480><c> ordinary</c><00:33:10.880><c> c</c><00:33:11.039><c> code</c><00:33:11.279><c> in</c><00:33:11.360><c> the</c>

00:33:11.509 --> 00:33:11.519 align:start position:0%
actually execute ordinary c code in the
 

00:33:11.519 --> 00:33:12.470 align:start position:0%
actually execute ordinary c code in the
kernel

00:33:12.470 --> 00:33:12.480 align:start position:0%
kernel
 

00:33:12.480 --> 00:33:14.710 align:start position:0%
kernel
what<00:33:12.720><c> has</c><00:33:12.880><c> to</c><00:33:12.960><c> happen</c><00:33:13.279><c> now</c><00:33:14.000><c> is</c><00:33:14.240><c> we</c><00:33:14.399><c> need</c><00:33:14.559><c> to</c>

00:33:14.710 --> 00:33:14.720 align:start position:0%
what has to happen now is we need to
 

00:33:14.720 --> 00:33:17.909 align:start position:0%
what has to happen now is we need to
save<00:33:15.039><c> the</c><00:33:15.200><c> 32</c><00:33:15.760><c> user</c><00:33:16.159><c> register</c><00:33:16.799><c> contents</c>

00:33:17.909 --> 00:33:17.919 align:start position:0%
save the 32 user register contents
 

00:33:17.919 --> 00:33:19.669 align:start position:0%
save the 32 user register contents
so<00:33:18.080><c> we</c><00:33:18.159><c> can</c><00:33:18.320><c> later</c><00:33:18.559><c> restore</c><00:33:19.039><c> them</c><00:33:19.279><c> and</c><00:33:19.360><c> when</c><00:33:19.600><c> we</c>

00:33:19.669 --> 00:33:19.679 align:start position:0%
so we can later restore them and when we
 

00:33:19.679 --> 00:33:21.830 align:start position:0%
so we can later restore them and when we
want<00:33:19.840><c> to</c><00:33:20.000><c> resume</c><00:33:20.399><c> the</c><00:33:20.559><c> user</c><00:33:20.880><c> code</c>

00:33:21.830 --> 00:33:21.840 align:start position:0%
want to resume the user code
 

00:33:21.840 --> 00:33:23.669 align:start position:0%
want to resume the user code
now<00:33:22.080><c> we</c><00:33:22.159><c> need</c><00:33:22.320><c> to</c><00:33:22.399><c> switch</c><00:33:22.720><c> to</c><00:33:22.880><c> the</c><00:33:23.039><c> kernel</c><00:33:23.360><c> page</c>

00:33:23.669 --> 00:33:23.679 align:start position:0%
now we need to switch to the kernel page
 

00:33:23.679 --> 00:33:25.190 align:start position:0%
now we need to switch to the kernel page
table<00:33:24.080><c> because</c><00:33:24.480><c> currently</c><00:33:24.799><c> we're</c><00:33:24.880><c> using</c><00:33:25.120><c> the</c>

00:33:25.190 --> 00:33:25.200 align:start position:0%
table because currently we're using the
 

00:33:25.200 --> 00:33:26.710 align:start position:0%
table because currently we're using the
user<00:33:25.440><c> page</c><00:33:25.679><c> table</c>

00:33:26.710 --> 00:33:26.720 align:start position:0%
user page table
 

00:33:26.720 --> 00:33:28.630 align:start position:0%
user page table
we<00:33:26.880><c> need</c><00:33:27.039><c> to</c><00:33:27.360><c> create</c><00:33:27.600><c> a</c><00:33:27.760><c> stack</c><00:33:28.159><c> or</c><00:33:28.320><c> find</c><00:33:28.559><c> a</c>

00:33:28.630 --> 00:33:28.640 align:start position:0%
we need to create a stack or find a
 

00:33:28.640 --> 00:33:29.990 align:start position:0%
we need to create a stack or find a
stack<00:33:28.960><c> and</c><00:33:29.120><c> set</c><00:33:29.360><c> the</c><00:33:29.440><c> stack</c><00:33:29.760><c> point</c><00:33:29.919><c> of</c>

00:33:29.990 --> 00:33:30.000 align:start position:0%
stack and set the stack point of
 

00:33:30.000 --> 00:33:31.430 align:start position:0%
stack and set the stack point of
register<00:33:30.399><c> to</c><00:33:30.559><c> point</c><00:33:30.799><c> to</c><00:33:30.960><c> the</c>

00:33:31.430 --> 00:33:31.440 align:start position:0%
register to point to the
 

00:33:31.440 --> 00:33:33.830 align:start position:0%
register to point to the
kernel<00:33:31.840><c> stack</c><00:33:32.240><c> so</c><00:33:32.399><c> we</c><00:33:32.559><c> can</c><00:33:32.640><c> run</c><00:33:32.960><c> c</c><00:33:33.120><c> code</c><00:33:33.600><c> which</c>

00:33:33.830 --> 00:33:33.840 align:start position:0%
kernel stack so we can run c code which
 

00:33:33.840 --> 00:33:34.950 align:start position:0%
kernel stack so we can run c code which
requires<00:33:34.240><c> the</c><00:33:34.399><c> stack</c>

00:33:34.950 --> 00:33:34.960 align:start position:0%
requires the stack
 

00:33:34.960 --> 00:33:36.310 align:start position:0%
requires the stack
and<00:33:35.039><c> then</c><00:33:35.200><c> we</c><00:33:35.279><c> need</c><00:33:35.440><c> to</c><00:33:35.519><c> actually</c><00:33:35.840><c> jump</c><00:33:36.080><c> to</c>

00:33:36.310 --> 00:33:36.320 align:start position:0%
and then we need to actually jump to
 

00:33:36.320 --> 00:33:38.549 align:start position:0%
and then we need to actually jump to
some<00:33:36.559><c> sensible</c><00:33:37.039><c> place</c>

00:33:38.549 --> 00:33:38.559 align:start position:0%
some sensible place
 

00:33:38.559 --> 00:33:41.830 align:start position:0%
some sensible place
in<00:33:38.640><c> the</c><00:33:38.799><c> c</c><00:33:39.039><c> code</c><00:33:39.360><c> in</c><00:33:39.440><c> the</c><00:33:39.519><c> kernel</c><00:33:40.799><c> now</c><00:33:41.519><c> as</c><00:33:41.679><c> an</c>

00:33:41.830 --> 00:33:41.840 align:start position:0%
in the c code in the kernel now as an
 

00:33:41.840 --> 00:33:43.509 align:start position:0%
in the c code in the kernel now as an
aside

00:33:43.509 --> 00:33:43.519 align:start position:0%
aside
 

00:33:43.519 --> 00:33:44.870 align:start position:0%
aside
you<00:33:43.679><c> know</c><00:33:43.760><c> e-call</c><00:33:44.159><c> didn't</c><00:33:44.320><c> do</c><00:33:44.480><c> any</c><00:33:44.640><c> of</c><00:33:44.720><c> these</c>

00:33:44.870 --> 00:33:44.880 align:start position:0%
you know e-call didn't do any of these
 

00:33:44.880 --> 00:33:46.950 align:start position:0%
you know e-call didn't do any of these
things<00:33:45.200><c> for</c><00:33:45.440><c> us</c><00:33:45.919><c> um</c>

00:33:46.950 --> 00:33:46.960 align:start position:0%
things for us um
 

00:33:46.960 --> 00:33:48.789 align:start position:0%
things for us um
you<00:33:47.120><c> know</c><00:33:47.279><c> but</c><00:33:47.440><c> you</c><00:33:47.600><c> could</c><00:33:47.840><c> have</c><00:33:48.000><c> we</c><00:33:48.320><c> the</c>

00:33:48.789 --> 00:33:48.799 align:start position:0%
you know but you could have we the
 

00:33:48.799 --> 00:33:50.710 align:start position:0%
you know but you could have we the
hardware<00:33:49.279><c> could</c><00:33:49.440><c> have</c><00:33:49.600><c> defined</c><00:33:50.000><c> e-call</c><00:33:50.399><c> to</c><00:33:50.559><c> do</c>

00:33:50.710 --> 00:33:50.720 align:start position:0%
hardware could have defined e-call to do
 

00:33:50.720 --> 00:33:53.430 align:start position:0%
hardware could have defined e-call to do
much<00:33:51.039><c> more</c>

00:33:53.430 --> 00:33:53.440 align:start position:0%
much more
 

00:33:53.440 --> 00:33:55.269 align:start position:0%
much more
many<00:33:53.679><c> more</c><00:33:53.840><c> of</c><00:33:53.919><c> these</c><00:33:54.159><c> steps</c><00:33:54.559><c> for</c><00:33:54.799><c> us</c><00:33:55.039><c> instead</c>

00:33:55.269 --> 00:33:55.279 align:start position:0%
many more of these steps for us instead
 

00:33:55.279 --> 00:33:56.870 align:start position:0%
many more of these steps for us instead
of<00:33:55.360><c> leaving</c><00:33:55.679><c> them</c><00:33:55.760><c> to</c><00:33:55.919><c> software</c><00:33:56.240><c> and</c><00:33:56.399><c> as</c>

00:33:56.870 --> 00:33:56.880 align:start position:0%
of leaving them to software and as
 

00:33:56.880 --> 00:33:59.350 align:start position:0%
of leaving them to software and as
we'll<00:33:57.120><c> see</c><00:33:57.519><c> the</c><00:33:58.080><c> doing</c><00:33:58.320><c> the</c><00:33:58.559><c> software</c><00:33:58.880><c> is</c><00:33:59.039><c> not</c>

00:33:59.350 --> 00:33:59.360 align:start position:0%
we'll see the doing the software is not
 

00:33:59.360 --> 00:34:01.029 align:start position:0%
we'll see the doing the software is not
particularly<00:33:59.919><c> straightforward</c>

00:34:01.029 --> 00:34:01.039 align:start position:0%
particularly straightforward
 

00:34:01.039 --> 00:34:02.710 align:start position:0%
particularly straightforward
um<00:34:01.279><c> so</c><00:34:01.440><c> you</c><00:34:01.519><c> should</c><00:34:01.760><c> ask</c><00:34:01.919><c> yourself</c><00:34:02.240><c> why</c><00:34:02.559><c> the</c>

00:34:02.710 --> 00:34:02.720 align:start position:0%
um so you should ask yourself why the
 

00:34:02.720 --> 00:34:04.630 align:start position:0%
um so you should ask yourself why the
ecall<00:34:03.200><c> doesn't</c><00:34:03.440><c> do</c><00:34:03.679><c> more</c><00:34:03.919><c> of</c><00:34:04.000><c> the</c><00:34:04.159><c> work</c>

00:34:04.630 --> 00:34:04.640 align:start position:0%
ecall doesn't do more of the work
 

00:34:04.640 --> 00:34:06.310 align:start position:0%
ecall doesn't do more of the work
of<00:34:05.039><c> getting</c><00:34:05.279><c> from</c><00:34:05.440><c> user</c><00:34:05.760><c> space</c><00:34:06.000><c> into</c><00:34:06.240><c> the</c>

00:34:06.310 --> 00:34:06.320 align:start position:0%
of getting from user space into the
 

00:34:06.320 --> 00:34:08.550 align:start position:0%
of getting from user space into the
kernel<00:34:06.960><c> and</c><00:34:07.120><c> why</c><00:34:07.279><c> doesn't</c><00:34:07.600><c> it</c>

00:34:08.550 --> 00:34:08.560 align:start position:0%
kernel and why doesn't it
 

00:34:08.560 --> 00:34:11.829 align:start position:0%
kernel and why doesn't it
save<00:34:08.800><c> their</c><00:34:09.040><c> user</c><00:34:09.280><c> registers</c><00:34:10.000><c> or</c><00:34:11.119><c> switch</c>

00:34:11.829 --> 00:34:11.839 align:start position:0%
save their user registers or switch
 

00:34:11.839 --> 00:34:13.349 align:start position:0%
save their user registers or switch
page<00:34:12.159><c> table</c><00:34:12.480><c> pointers</c><00:34:12.879><c> to</c><00:34:12.960><c> point</c><00:34:13.119><c> to</c><00:34:13.280><c> the</c>

00:34:13.349 --> 00:34:13.359 align:start position:0%
page table pointers to point to the
 

00:34:13.359 --> 00:34:15.109 align:start position:0%
page table pointers to point to the
kernel<00:34:13.679><c> page</c><00:34:13.919><c> table</c><00:34:14.399><c> or</c>

00:34:15.109 --> 00:34:15.119 align:start position:0%
kernel page table or
 

00:34:15.119 --> 00:34:17.030 align:start position:0%
kernel page table or
automatically<00:34:15.760><c> set</c><00:34:16.000><c> the</c><00:34:16.240><c> stack</c><00:34:16.560><c> pointer</c><00:34:16.879><c> to</c>

00:34:17.030 --> 00:34:17.040 align:start position:0%
automatically set the stack pointer to
 

00:34:17.040 --> 00:34:18.950 align:start position:0%
automatically set the stack pointer to
point<00:34:17.280><c> to</c><00:34:17.359><c> the</c><00:34:17.599><c> kernel</c><00:34:17.919><c> stack</c>

00:34:18.950 --> 00:34:18.960 align:start position:0%
point to the kernel stack
 

00:34:18.960 --> 00:34:21.589 align:start position:0%
point to the kernel stack
or<00:34:19.200><c> jump</c><00:34:19.520><c> right</c><00:34:19.760><c> to</c><00:34:20.000><c> kernel</c><00:34:20.399><c> c</c><00:34:20.639><c> code</c><00:34:21.119><c> geez</c>

00:34:21.589 --> 00:34:21.599 align:start position:0%
or jump right to kernel c code geez
 

00:34:21.599 --> 00:34:22.790 align:start position:0%
or jump right to kernel c code geez
rather<00:34:21.839><c> than</c><00:34:22.079><c> having</c><00:34:22.240><c> to</c><00:34:22.320><c> go</c><00:34:22.480><c> through</c><00:34:22.639><c> all</c>

00:34:22.790 --> 00:34:22.800 align:start position:0%
rather than having to go through all
 

00:34:22.800 --> 00:34:23.829 align:start position:0%
rather than having to go through all
this

00:34:23.829 --> 00:34:23.839 align:start position:0%
this
 

00:34:23.839 --> 00:34:26.869 align:start position:0%
this
complicated<00:34:24.399><c> assembly</c><00:34:24.800><c> code</c>

00:34:26.869 --> 00:34:26.879 align:start position:0%
complicated assembly code
 

00:34:26.879 --> 00:34:28.550 align:start position:0%
complicated assembly code
and<00:34:27.040><c> there's</c><00:34:27.359><c> actually</c><00:34:27.599><c> been</c><00:34:27.839><c> machines</c><00:34:28.399><c> that</c>

00:34:28.550 --> 00:34:28.560 align:start position:0%
and there's actually been machines that
 

00:34:28.560 --> 00:34:30.950 align:start position:0%
and there's actually been machines that
have<00:34:28.720><c> done</c><00:34:28.960><c> all</c><00:34:29.119><c> of</c><00:34:29.200><c> these</c><00:34:29.440><c> things</c>

00:34:30.950 --> 00:34:30.960 align:start position:0%
have done all of these things
 

00:34:30.960 --> 00:34:35.669 align:start position:0%
have done all of these things
in<00:34:31.119><c> hardware</c><00:34:33.520><c> during</c><00:34:33.839><c> system</c><00:34:34.159><c> calls</c>

00:34:35.669 --> 00:34:35.679 align:start position:0%
in hardware during system calls
 

00:34:35.679 --> 00:34:36.950 align:start position:0%
in hardware during system calls
the<00:34:35.919><c> risk</c><00:34:36.159><c> five</c><00:34:36.320><c> doesn't</c><00:34:36.480><c> do</c><00:34:36.639><c> any</c><00:34:36.800><c> of</c><00:34:36.879><c> them</c>

00:34:36.950 --> 00:34:36.960 align:start position:0%
the risk five doesn't do any of them
 

00:34:36.960 --> 00:34:38.389 align:start position:0%
the risk five doesn't do any of them
numbers<00:34:37.280><c> five</c><00:34:37.520><c> really</c><00:34:37.679><c> the</c><00:34:37.839><c> attitude</c><00:34:38.159><c> they've</c>

00:34:38.389 --> 00:34:38.399 align:start position:0%
numbers five really the attitude they've
 

00:34:38.399 --> 00:34:39.669 align:start position:0%
numbers five really the attitude they've
taken<00:34:38.720><c> is</c><00:34:38.879><c> that</c><00:34:39.040><c> ecall</c>

00:34:39.669 --> 00:34:39.679 align:start position:0%
taken is that ecall
 

00:34:39.679 --> 00:34:41.750 align:start position:0%
taken is that ecall
does<00:34:40.000><c> the</c><00:34:40.320><c> absolute</c><00:34:40.879><c> minimum</c><00:34:41.520><c> that's</c>

00:34:41.750 --> 00:34:41.760 align:start position:0%
does the absolute minimum that's
 

00:34:41.760 --> 00:34:43.829 align:start position:0%
does the absolute minimum that's
required<00:34:42.639><c> that</c><00:34:42.800><c> it</c><00:34:42.879><c> could</c><00:34:43.040><c> possibly</c><00:34:43.520><c> do</c><00:34:43.760><c> and</c>

00:34:43.829 --> 00:34:43.839 align:start position:0%
required that it could possibly do and
 

00:34:43.839 --> 00:34:45.750 align:start position:0%
required that it could possibly do and
leave<00:34:44.079><c> everything</c><00:34:44.399><c> else</c><00:34:44.639><c> up</c><00:34:44.720><c> to</c><00:34:44.879><c> software</c>

00:34:45.750 --> 00:34:45.760 align:start position:0%
leave everything else up to software
 

00:34:45.760 --> 00:34:47.669 align:start position:0%
leave everything else up to software
and<00:34:45.919><c> the</c><00:34:46.079><c> reason</c><00:34:46.399><c> for</c><00:34:46.560><c> this</c><00:34:46.800><c> is</c><00:34:46.960><c> because</c><00:34:47.520><c> the</c>

00:34:47.669 --> 00:34:47.679 align:start position:0%
and the reason for this is because the
 

00:34:47.679 --> 00:34:49.909 align:start position:0%
and the reason for this is because the
risk<00:34:47.919><c> 5</c><00:34:48.159><c> designers</c><00:34:48.639><c> want</c><00:34:48.800><c> to</c><00:34:48.960><c> allow</c><00:34:49.359><c> maximum</c>

00:34:49.909 --> 00:34:49.919 align:start position:0%
risk 5 designers want to allow maximum
 

00:34:49.919 --> 00:34:51.109 align:start position:0%
risk 5 designers want to allow maximum
flexibility

00:34:51.109 --> 00:34:51.119 align:start position:0%
flexibility
 

00:34:51.119 --> 00:34:53.190 align:start position:0%
flexibility
to<00:34:51.280><c> the</c><00:34:51.599><c> software</c><00:34:52.159><c> the</c><00:34:52.320><c> operating</c><00:34:52.800><c> system</c>

00:34:53.190 --> 00:34:53.200 align:start position:0%
to the software the operating system
 

00:34:53.200 --> 00:34:54.950 align:start position:0%
to the software the operating system
programmers<00:34:53.839><c> to</c><00:34:54.000><c> design</c><00:34:54.320><c> the</c>

00:34:54.950 --> 00:34:54.960 align:start position:0%
programmers to design the
 

00:34:54.960 --> 00:34:56.629 align:start position:0%
programmers to design the
program<00:34:55.440><c> operating</c><00:34:55.760><c> system</c><00:34:56.159><c> however</c><00:34:56.480><c> they</c>

00:34:56.629 --> 00:34:56.639 align:start position:0%
program operating system however they
 

00:34:56.639 --> 00:34:58.470 align:start position:0%
program operating system however they
like

00:34:58.470 --> 00:34:58.480 align:start position:0%
like
 

00:34:58.480 --> 00:35:01.270 align:start position:0%
like
and<00:34:58.640><c> so</c><00:34:59.040><c> you</c><00:34:59.200><c> can</c><00:34:59.359><c> imagine</c><00:34:59.680><c> ways</c><00:35:00.160><c> xv6</c><00:35:01.040><c> really</c>

00:35:01.270 --> 00:35:01.280 align:start position:0%
and so you can imagine ways xv6 really
 

00:35:01.280 --> 00:35:02.950 align:start position:0%
and so you can imagine ways xv6 really
doesn't<00:35:01.599><c> use</c><00:35:01.839><c> this</c><00:35:02.000><c> freedom</c>

00:35:02.950 --> 00:35:02.960 align:start position:0%
doesn't use this freedom
 

00:35:02.960 --> 00:35:04.950 align:start position:0%
doesn't use this freedom
but<00:35:03.200><c> other</c><00:35:03.440><c> operating</c><00:35:03.839><c> systems</c><00:35:04.240><c> do</c><00:35:04.560><c> so</c><00:35:04.720><c> some</c>

00:35:04.950 --> 00:35:04.960 align:start position:0%
but other operating systems do so some
 

00:35:04.960 --> 00:35:06.550 align:start position:0%
but other operating systems do so some
examples<00:35:05.920><c> of</c>

00:35:06.550 --> 00:35:06.560 align:start position:0%
examples of
 

00:35:06.560 --> 00:35:08.790 align:start position:0%
examples of
things<00:35:06.960><c> that</c><00:35:07.200><c> are</c><00:35:07.359><c> kind</c><00:35:07.520><c> of</c><00:35:07.760><c> enabled</c><00:35:08.560><c> for</c><00:35:08.720><c> the</c>

00:35:08.790 --> 00:35:08.800 align:start position:0%
things that are kind of enabled for the
 

00:35:08.800 --> 00:35:10.310 align:start position:0%
things that are kind of enabled for the
software<00:35:09.200><c> to</c><00:35:09.359><c> do</c>

00:35:10.310 --> 00:35:10.320 align:start position:0%
software to do
 

00:35:10.320 --> 00:35:14.550 align:start position:0%
software to do
because<00:35:10.640><c> e-call</c><00:35:11.040><c> is</c><00:35:11.200><c> so</c><00:35:11.359><c> simple</c>

00:35:14.550 --> 00:35:14.560 align:start position:0%
 
 

00:35:14.560 --> 00:35:17.030 align:start position:0%
 
maybe<00:35:15.200><c> some</c><00:35:15.440><c> operating</c><00:35:15.839><c> systems</c><00:35:16.320><c> can</c><00:35:16.560><c> execute</c>

00:35:17.030 --> 00:35:17.040 align:start position:0%
maybe some operating systems can execute
 

00:35:17.040 --> 00:35:18.069 align:start position:0%
maybe some operating systems can execute
some

00:35:18.069 --> 00:35:18.079 align:start position:0%
some
 

00:35:18.079 --> 00:35:19.829 align:start position:0%
some
traps<00:35:18.560><c> some</c><00:35:18.800><c> system</c><00:35:19.119><c> calls</c><00:35:19.440><c> without</c>

00:35:19.829 --> 00:35:19.839 align:start position:0%
traps some system calls without
 

00:35:19.839 --> 00:35:21.349 align:start position:0%
traps some system calls without
switching<00:35:20.240><c> page</c><00:35:20.560><c> tables</c>

00:35:21.349 --> 00:35:21.359 align:start position:0%
switching page tables
 

00:35:21.359 --> 00:35:23.030 align:start position:0%
switching page tables
the<00:35:21.599><c> switching</c><00:35:21.920><c> page</c><00:35:22.320><c> page</c><00:35:22.640><c> table</c><00:35:22.880><c> is</c>

00:35:23.030 --> 00:35:23.040 align:start position:0%
the switching page page table is
 

00:35:23.040 --> 00:35:25.910 align:start position:0%
the switching page page table is
expensive<00:35:23.599><c> if</c><00:35:23.760><c> vcall</c><00:35:24.160><c> forces</c><00:35:24.560><c> you</c><00:35:24.640><c> to</c><00:35:24.800><c> do</c><00:35:24.960><c> it</c>

00:35:25.910 --> 00:35:25.920 align:start position:0%
expensive if vcall forces you to do it
 

00:35:25.920 --> 00:35:27.910 align:start position:0%
expensive if vcall forces you to do it
that<00:35:26.160><c> rules</c><00:35:26.480><c> out</c><00:35:26.560><c> the</c><00:35:26.720><c> possibility</c><00:35:27.359><c> of</c><00:35:27.599><c> very</c>

00:35:27.910 --> 00:35:27.920 align:start position:0%
that rules out the possibility of very
 

00:35:27.920 --> 00:35:29.430 align:start position:0%
that rules out the possibility of very
streamlined

00:35:29.430 --> 00:35:29.440 align:start position:0%
streamlined
 

00:35:29.440 --> 00:35:31.270 align:start position:0%
streamlined
implementations<00:35:30.079><c> for</c><00:35:30.240><c> some</c><00:35:30.480><c> system</c><00:35:30.880><c> calls</c>

00:35:31.270 --> 00:35:31.280 align:start position:0%
implementations for some system calls
 

00:35:31.280 --> 00:35:34.390 align:start position:0%
implementations for some system calls
that<00:35:31.440><c> don't</c><00:35:31.599><c> switch</c><00:35:31.920><c> page</c><00:35:32.240><c> tables</c>

00:35:34.390 --> 00:35:34.400 align:start position:0%
that don't switch page tables
 

00:35:34.400 --> 00:35:36.710 align:start position:0%
that don't switch page tables
some<00:35:34.640><c> operating</c><00:35:35.040><c> systems</c><00:35:35.359><c> map</c><00:35:35.599><c> both</c><00:35:35.920><c> user</c><00:35:36.320><c> and</c>

00:35:36.710 --> 00:35:36.720 align:start position:0%
some operating systems map both user and
 

00:35:36.720 --> 00:35:37.990 align:start position:0%
some operating systems map both user and
kernel

00:35:37.990 --> 00:35:38.000 align:start position:0%
kernel
 

00:35:38.000 --> 00:35:39.589 align:start position:0%
kernel
virtual<00:35:38.320><c> addresses</c><00:35:38.800><c> into</c><00:35:38.960><c> a</c><00:35:39.040><c> single</c><00:35:39.359><c> page</c>

00:35:39.589 --> 00:35:39.599 align:start position:0%
virtual addresses into a single page
 

00:35:39.599 --> 00:35:41.349 align:start position:0%
virtual addresses into a single page
table<00:35:39.920><c> and</c><00:35:40.000><c> use</c><00:35:40.160><c> the</c><00:35:40.240><c> same</c><00:35:40.560><c> page</c><00:35:40.880><c> table</c><00:35:41.200><c> for</c>

00:35:41.349 --> 00:35:41.359 align:start position:0%
table and use the same page table for
 

00:35:41.359 --> 00:35:42.870 align:start position:0%
table and use the same page table for
both<00:35:41.520><c> user</c><00:35:41.839><c> and</c><00:35:41.920><c> kernel</c><00:35:42.240><c> and</c><00:35:42.320><c> therefore</c><00:35:42.720><c> don't</c>

00:35:42.870 --> 00:35:42.880 align:start position:0%
both user and kernel and therefore don't
 

00:35:42.880 --> 00:35:43.990 align:start position:0%
both user and kernel and therefore don't
even<00:35:43.119><c> have</c><00:35:43.280><c> to</c><00:35:43.359><c> switch</c><00:35:43.680><c> page</c>

00:35:43.990 --> 00:35:44.000 align:start position:0%
even have to switch page
 

00:35:44.000 --> 00:35:46.470 align:start position:0%
even have to switch page
tables<00:35:44.400><c> ever</c><00:35:45.359><c> when</c><00:35:45.680><c> transitioning</c><00:35:46.160><c> between</c>

00:35:46.470 --> 00:35:46.480 align:start position:0%
tables ever when transitioning between
 

00:35:46.480 --> 00:35:47.829 align:start position:0%
tables ever when transitioning between
user<00:35:46.800><c> and</c><00:35:46.880><c> kernel</c>

00:35:47.829 --> 00:35:47.839 align:start position:0%
user and kernel
 

00:35:47.839 --> 00:35:49.349 align:start position:0%
user and kernel
and<00:35:47.920><c> for</c><00:35:48.079><c> them</c><00:35:48.320><c> also</c><00:35:48.640><c> if</c><00:35:48.800><c> you</c><00:35:48.880><c> call</c><00:35:49.040><c> switch</c>

00:35:49.349 --> 00:35:49.359 align:start position:0%
and for them also if you call switch
 

00:35:49.359 --> 00:35:51.109 align:start position:0%
and for them also if you call switch
page<00:35:49.599><c> tables</c><00:35:49.920><c> that</c><00:35:50.000><c> would</c><00:35:50.079><c> just</c><00:35:50.240><c> be</c><00:35:50.320><c> a</c><00:35:50.400><c> waste</c>

00:35:51.109 --> 00:35:51.119 align:start position:0%
page tables that would just be a waste
 

00:35:51.119 --> 00:35:53.750 align:start position:0%
page tables that would just be a waste
and<00:35:51.280><c> slow</c><00:35:51.520><c> things</c><00:35:51.760><c> down</c><00:35:53.200><c> maybe</c><00:35:53.440><c> in</c><00:35:53.599><c> some</c>

00:35:53.750 --> 00:35:53.760 align:start position:0%
and slow things down maybe in some
 

00:35:53.760 --> 00:35:55.349 align:start position:0%
and slow things down maybe in some
circumstances

00:35:55.349 --> 00:35:55.359 align:start position:0%
circumstances
 

00:35:55.359 --> 00:35:57.910 align:start position:0%
circumstances
system<00:35:55.680><c> calls</c><00:35:55.920><c> for</c><00:35:56.079><c> example</c><00:35:57.200><c> some</c><00:35:57.359><c> registers</c>

00:35:57.910 --> 00:35:57.920 align:start position:0%
system calls for example some registers
 

00:35:57.920 --> 00:35:59.270 align:start position:0%
system calls for example some registers
don't<00:35:58.079><c> have</c><00:35:58.240><c> to</c><00:35:58.320><c> be</c><00:35:58.560><c> saved</c>

00:35:59.270 --> 00:35:59.280 align:start position:0%
don't have to be saved
 

00:35:59.280 --> 00:36:00.630 align:start position:0%
don't have to be saved
and<00:35:59.440><c> which</c><00:35:59.599><c> ones</c><00:35:59.839><c> have</c><00:36:00.000><c> to</c><00:36:00.079><c> be</c><00:36:00.160><c> saved</c><00:36:00.400><c> or</c><00:36:00.480><c> not</c>

00:36:00.630 --> 00:36:00.640 align:start position:0%
and which ones have to be saved or not
 

00:36:00.640 --> 00:36:02.310 align:start position:0%
and which ones have to be saved or not
sort<00:36:00.800><c> of</c><00:36:00.880><c> depends</c><00:36:01.200><c> on</c><00:36:01.280><c> the</c><00:36:01.440><c> software</c><00:36:02.160><c> the</c>

00:36:02.310 --> 00:36:02.320 align:start position:0%
sort of depends on the software the
 

00:36:02.320 --> 00:36:04.150 align:start position:0%
sort of depends on the software the
language<00:36:02.880><c> and</c><00:36:02.960><c> the</c><00:36:03.040><c> compiler</c><00:36:03.680><c> but</c>

00:36:04.150 --> 00:36:04.160 align:start position:0%
language and the compiler but
 

00:36:04.160 --> 00:36:05.349 align:start position:0%
language and the compiler but
you<00:36:04.240><c> might</c><00:36:04.400><c> be</c><00:36:04.480><c> able</c><00:36:04.560><c> to</c><00:36:04.640><c> save</c><00:36:04.880><c> a</c><00:36:04.880><c> lot</c><00:36:05.040><c> of</c><00:36:05.119><c> time</c>

00:36:05.349 --> 00:36:05.359 align:start position:0%
you might be able to save a lot of time
 

00:36:05.359 --> 00:36:07.829 align:start position:0%
you might be able to save a lot of time
by<00:36:05.520><c> saving</c><00:36:06.000><c> fewer</c><00:36:06.320><c> than</c><00:36:06.480><c> 32</c><00:36:06.960><c> registers</c><00:36:07.599><c> so</c><00:36:07.760><c> you</c>

00:36:07.829 --> 00:36:07.839 align:start position:0%
by saving fewer than 32 registers so you
 

00:36:07.839 --> 00:36:09.910 align:start position:0%
by saving fewer than 32 registers so you
don't<00:36:07.920><c> want</c><00:36:08.160><c> equal</c><00:36:08.480><c> to</c><00:36:08.560><c> kind</c><00:36:08.720><c> of</c><00:36:08.880><c> force</c><00:36:09.200><c> you</c>

00:36:09.910 --> 00:36:09.920 align:start position:0%
don't want equal to kind of force you
 

00:36:09.920 --> 00:36:11.589 align:start position:0%
don't want equal to kind of force you
you<00:36:10.079><c> don't</c><00:36:10.240><c> necessarily</c><00:36:10.880><c> want</c><00:36:11.040><c> equal</c><00:36:11.359><c> to</c>

00:36:11.589 --> 00:36:11.599 align:start position:0%
you don't necessarily want equal to
 

00:36:11.599 --> 00:36:14.630 align:start position:0%
you don't necessarily want equal to
force<00:36:11.920><c> you</c><00:36:12.000><c> to</c><00:36:12.160><c> save</c><00:36:12.400><c> all</c><00:36:12.560><c> the</c><00:36:12.640><c> registers</c>

00:36:14.630 --> 00:36:14.640 align:start position:0%
force you to save all the registers
 

00:36:14.640 --> 00:36:16.310 align:start position:0%
force you to save all the registers
and<00:36:14.800><c> finally</c><00:36:15.119><c> maybe</c><00:36:15.359><c> no</c><00:36:15.520><c> stack</c><00:36:15.839><c> at</c><00:36:16.000><c> all</c><00:36:16.160><c> is</c>

00:36:16.310 --> 00:36:16.320 align:start position:0%
and finally maybe no stack at all is
 

00:36:16.320 --> 00:36:18.950 align:start position:0%
and finally maybe no stack at all is
required<00:36:16.720><c> for</c><00:36:16.880><c> some</c><00:36:17.119><c> simple</c><00:36:17.520><c> system</c><00:36:17.839><c> calls</c><00:36:18.240><c> so</c>

00:36:18.950 --> 00:36:18.960 align:start position:0%
required for some simple system calls so
 

00:36:18.960 --> 00:36:21.430 align:start position:0%
required for some simple system calls so
again<00:36:20.240><c> for</c><00:36:20.480><c> operating</c><00:36:20.800><c> systems</c><00:36:21.119><c> that</c><00:36:21.200><c> care</c><00:36:21.359><c> a</c>

00:36:21.430 --> 00:36:21.440 align:start position:0%
again for operating systems that care a
 

00:36:21.440 --> 00:36:22.950 align:start position:0%
again for operating systems that care a
lot<00:36:21.599><c> about</c><00:36:21.839><c> performance</c><00:36:22.480><c> it's</c><00:36:22.640><c> good</c><00:36:22.800><c> that</c>

00:36:22.950 --> 00:36:22.960 align:start position:0%
lot about performance it's good that
 

00:36:22.960 --> 00:36:24.230 align:start position:0%
lot about performance it's good that
ecall<00:36:23.359><c> doesn't</c><00:36:23.680><c> force</c>

00:36:24.230 --> 00:36:24.240 align:start position:0%
ecall doesn't force
 

00:36:24.240 --> 00:36:27.750 align:start position:0%
ecall doesn't force
any<00:36:24.480><c> particular</c><00:36:24.880><c> stack</c><00:36:25.200><c> policy</c><00:36:25.680><c> on</c><00:36:25.839><c> you</c>

00:36:27.750 --> 00:36:27.760 align:start position:0%
any particular stack policy on you
 

00:36:27.760 --> 00:36:31.030 align:start position:0%
any particular stack policy on you
and<00:36:27.920><c> again</c><00:36:28.160><c> there's</c><00:36:28.720><c> many</c><00:36:29.200><c> clever</c><00:36:30.480><c> uh</c>

00:36:31.030 --> 00:36:31.040 align:start position:0%
and again there's many clever uh
 

00:36:31.040 --> 00:36:33.990 align:start position:0%
and again there's many clever uh
hardware<00:36:31.680><c> software</c><00:36:32.320><c> schemes</c><00:36:32.960><c> for</c><00:36:33.680><c> very</c>

00:36:33.990 --> 00:36:34.000 align:start position:0%
hardware software schemes for very
 

00:36:34.000 --> 00:36:35.990 align:start position:0%
hardware software schemes for very
streamlined<00:36:34.720><c> high</c><00:36:34.960><c> performance</c>

00:36:35.990 --> 00:36:36.000 align:start position:0%
streamlined high performance
 

00:36:36.000 --> 00:36:37.829 align:start position:0%
streamlined high performance
system<00:36:36.400><c> calls</c><00:36:36.640><c> and</c><00:36:36.800><c> traps</c><00:36:37.280><c> just</c><00:36:37.440><c> because</c><00:36:37.680><c> the</c>

00:36:37.829 --> 00:36:37.839 align:start position:0%
system calls and traps just because the
 

00:36:37.839 --> 00:36:39.030 align:start position:0%
system calls and traps just because the
performance<00:36:38.320><c> of</c><00:36:38.400><c> this</c><00:36:38.560><c> stuff</c><00:36:38.800><c> is</c>

00:36:39.030 --> 00:36:39.040 align:start position:0%
performance of this stuff is
 

00:36:39.040 --> 00:36:40.870 align:start position:0%
performance of this stuff is
like<00:36:39.599><c> super</c><00:36:39.920><c> important</c><00:36:40.320><c> and</c><00:36:40.400><c> people</c><00:36:40.640><c> worry</c>

00:36:40.870 --> 00:36:40.880 align:start position:0%
like super important and people worry
 

00:36:40.880 --> 00:36:43.109 align:start position:0%
like super important and people worry
about<00:36:41.040><c> it</c><00:36:41.280><c> a</c><00:36:41.359><c> lot</c>

00:36:43.109 --> 00:36:43.119 align:start position:0%
about it a lot
 

00:36:43.119 --> 00:36:46.550 align:start position:0%
about it a lot
okay<00:36:44.320><c> so</c><00:36:44.480><c> back</c><00:36:44.640><c> to</c><00:36:44.800><c> xv6</c><00:36:45.359><c> and</c><00:36:45.599><c> risk</c><00:36:45.920><c> five</c>

00:36:46.550 --> 00:36:46.560 align:start position:0%
okay so back to xv6 and risk five
 

00:36:46.560 --> 00:36:49.670 align:start position:0%
okay so back to xv6 and risk five
um<00:36:48.240><c> the</c><00:36:48.320><c> first</c><00:36:48.480><c> thing</c><00:36:48.640><c> we</c><00:36:48.800><c> need</c><00:36:48.960><c> to</c><00:36:49.040><c> do</c><00:36:49.280><c> is</c><00:36:49.440><c> save</c>

00:36:49.670 --> 00:36:49.680 align:start position:0%
um the first thing we need to do is save
 

00:36:49.680 --> 00:36:50.790 align:start position:0%
um the first thing we need to do is save
some<00:36:49.920><c> registers</c><00:36:50.480><c> we</c>

00:36:50.790 --> 00:36:50.800 align:start position:0%
some registers we
 

00:36:50.800 --> 00:36:53.270 align:start position:0%
some registers we
can<00:36:50.960><c> do</c><00:36:51.200><c> hardly</c><00:36:51.680><c> anything</c><00:36:52.480><c> on</c><00:36:52.560><c> the</c><00:36:52.720><c> risk</c><00:36:52.960><c> 5</c>

00:36:53.270 --> 00:36:53.280 align:start position:0%
can do hardly anything on the risk 5
 

00:36:53.280 --> 00:36:54.470 align:start position:0%
can do hardly anything on the risk 5
without<00:36:53.599><c> a</c><00:36:53.680><c> few</c>

00:36:54.470 --> 00:36:54.480 align:start position:0%
without a few
 

00:36:54.480 --> 00:36:56.950 align:start position:0%
without a few
registers<00:36:56.160><c> without</c><00:36:56.480><c> being</c><00:36:56.640><c> able</c><00:36:56.720><c> to</c><00:36:56.800><c> use</c>

00:36:56.950 --> 00:36:56.960 align:start position:0%
registers without being able to use
 

00:36:56.960 --> 00:36:58.710 align:start position:0%
registers without being able to use
register<00:36:57.520><c> so</c><00:36:57.680><c> what</c><00:36:57.839><c> are</c><00:36:57.920><c> our</c><00:36:58.079><c> options</c><00:36:58.480><c> for</c>

00:36:58.710 --> 00:36:58.720 align:start position:0%
register so what are our options for
 

00:36:58.720 --> 00:37:01.430 align:start position:0%
register so what are our options for
saving<00:36:59.119><c> user</c><00:36:59.440><c> registers</c>

00:37:01.430 --> 00:37:01.440 align:start position:0%
saving user registers
 

00:37:01.440 --> 00:37:03.430 align:start position:0%
saving user registers
in<00:37:02.000><c> on</c><00:37:02.160><c> some</c><00:37:02.400><c> other</c><00:37:02.560><c> machine</c><00:37:02.960><c> we</c><00:37:03.119><c> might</c><00:37:03.280><c> be</c>

00:37:03.430 --> 00:37:03.440 align:start position:0%
in on some other machine we might be
 

00:37:03.440 --> 00:37:05.190 align:start position:0%
in on some other machine we might be
able<00:37:03.599><c> to</c><00:37:03.680><c> just</c><00:37:03.920><c> write</c><00:37:04.320><c> the</c><00:37:04.560><c> contents</c><00:37:05.040><c> of</c><00:37:05.119><c> the</c>

00:37:05.190 --> 00:37:05.200 align:start position:0%
able to just write the contents of the
 

00:37:05.200 --> 00:37:07.109 align:start position:0%
able to just write the contents of the
32<00:37:05.599><c> registers</c><00:37:06.079><c> somewhere</c><00:37:06.400><c> convenient</c><00:37:06.960><c> in</c>

00:37:07.109 --> 00:37:07.119 align:start position:0%
32 registers somewhere convenient in
 

00:37:07.119 --> 00:37:09.109 align:start position:0%
32 registers somewhere convenient in
physical<00:37:07.440><c> memory</c>

00:37:09.109 --> 00:37:09.119 align:start position:0%
physical memory
 

00:37:09.119 --> 00:37:10.390 align:start position:0%
physical memory
we<00:37:09.280><c> can't</c><00:37:09.520><c> actually</c><00:37:09.760><c> really</c><00:37:09.920><c> do</c><00:37:10.079><c> that</c><00:37:10.240><c> on</c><00:37:10.320><c> the</c>

00:37:10.390 --> 00:37:10.400 align:start position:0%
we can't actually really do that on the
 

00:37:10.400 --> 00:37:12.150 align:start position:0%
we can't actually really do that on the
risk<00:37:10.640><c> 5</c><00:37:11.040><c> because</c>

00:37:12.150 --> 00:37:12.160 align:start position:0%
risk 5 because
 

00:37:12.160 --> 00:37:13.430 align:start position:0%
risk 5 because
supervisor<00:37:12.640><c> code</c><00:37:12.880><c> isn't</c><00:37:13.040><c> allowed</c><00:37:13.359><c> to</c>

00:37:13.430 --> 00:37:13.440 align:start position:0%
supervisor code isn't allowed to
 

00:37:13.440 --> 00:37:15.190 align:start position:0%
supervisor code isn't allowed to
directly<00:37:13.839><c> access</c><00:37:14.160><c> physical</c><00:37:14.480><c> memory</c><00:37:14.960><c> we</c><00:37:15.040><c> can</c>

00:37:15.190 --> 00:37:15.200 align:start position:0%
directly access physical memory we can
 

00:37:15.200 --> 00:37:16.710 align:start position:0%
directly access physical memory we can
only<00:37:15.440><c> use</c><00:37:15.599><c> what's</c><00:37:15.839><c> in</c><00:37:16.000><c> the</c><00:37:16.079><c> page</c><00:37:16.320><c> table</c>

00:37:16.710 --> 00:37:16.720 align:start position:0%
only use what's in the page table
 

00:37:16.720 --> 00:37:20.630 align:start position:0%
only use what's in the page table
there's<00:37:17.200><c> not</c><00:37:17.440><c> much</c><00:37:17.680><c> in</c><00:37:17.760><c> the</c><00:37:17.839><c> page</c><00:37:18.079><c> table</c>

00:37:20.630 --> 00:37:20.640 align:start position:0%
 
 

00:37:20.640 --> 00:37:23.750 align:start position:0%
 
another<00:37:21.119><c> possibility</c><00:37:21.760><c> that</c><00:37:22.240><c> xv6</c><00:37:23.040><c> doesn't</c><00:37:23.359><c> do</c>

00:37:23.750 --> 00:37:23.760 align:start position:0%
another possibility that xv6 doesn't do
 

00:37:23.760 --> 00:37:26.870 align:start position:0%
another possibility that xv6 doesn't do
is<00:37:24.079><c> simply</c><00:37:24.560><c> setting</c><00:37:24.880><c> the</c><00:37:25.040><c> sat</c><00:37:25.359><c> p</c><00:37:26.000><c> to</c><00:37:26.240><c> uh</c><00:37:26.640><c> to</c><00:37:26.800><c> the</c>

00:37:26.870 --> 00:37:26.880 align:start position:0%
is simply setting the sat p to uh to the
 

00:37:26.880 --> 00:37:28.310 align:start position:0%
is simply setting the sat p to uh to the
kernel<00:37:27.200><c> page</c><00:37:27.520><c> table</c><00:37:27.839><c> right</c><00:37:28.000><c> and</c><00:37:28.079><c> then</c><00:37:28.240><c> we</c>

00:37:28.310 --> 00:37:28.320 align:start position:0%
kernel page table right and then we
 

00:37:28.320 --> 00:37:28.870 align:start position:0%
kernel page table right and then we
could

00:37:28.870 --> 00:37:28.880 align:start position:0%
could
 

00:37:28.880 --> 00:37:30.630 align:start position:0%
could
use<00:37:29.040><c> all</c><00:37:29.280><c> the</c><00:37:29.359><c> kernel</c><00:37:29.599><c> mappings</c><00:37:30.079><c> and</c><00:37:30.240><c> use</c><00:37:30.400><c> them</c>

00:37:30.630 --> 00:37:30.640 align:start position:0%
use all the kernel mappings and use them
 

00:37:30.640 --> 00:37:34.150 align:start position:0%
use all the kernel mappings and use them
maybe<00:37:30.880><c> to</c><00:37:31.680><c> help</c><00:37:31.920><c> us</c><00:37:32.079><c> save</c><00:37:32.320><c> the</c><00:37:32.400><c> user</c><00:37:32.720><c> registers</c>

00:37:34.150 --> 00:37:34.160 align:start position:0%
maybe to help us save the user registers
 

00:37:34.160 --> 00:37:35.670 align:start position:0%
maybe to help us save the user registers
and<00:37:34.240><c> that'd</c><00:37:34.400><c> be</c><00:37:34.560><c> legal</c><00:37:34.880><c> the</c><00:37:35.040><c> supervisor</c><00:37:35.520><c> can</c>

00:37:35.670 --> 00:37:35.680 align:start position:0%
and that'd be legal the supervisor can
 

00:37:35.680 --> 00:37:37.990 align:start position:0%
and that'd be legal the supervisor can
certainly<00:37:35.920><c> change</c><00:37:36.160><c> that</c><00:37:36.400><c> b</c>

00:37:37.990 --> 00:37:38.000 align:start position:0%
certainly change that b
 

00:37:38.000 --> 00:37:40.069 align:start position:0%
certainly change that b
however<00:37:38.400><c> at</c><00:37:38.480><c> this</c><00:37:38.640><c> point</c><00:37:38.960><c> in</c><00:37:39.040><c> the</c><00:37:39.760><c> trap</c>

00:37:40.069 --> 00:37:40.079 align:start position:0%
however at this point in the trap
 

00:37:40.079 --> 00:37:42.150 align:start position:0%
however at this point in the trap
handler<00:37:40.720><c> namely</c><00:37:41.119><c> the</c><00:37:41.200><c> beginning</c>

00:37:42.150 --> 00:37:42.160 align:start position:0%
handler namely the beginning
 

00:37:42.160 --> 00:37:43.589 align:start position:0%
handler namely the beginning
we<00:37:42.320><c> don't</c><00:37:42.480><c> even</c><00:37:42.640><c> know</c><00:37:42.800><c> the</c><00:37:42.960><c> address</c><00:37:43.359><c> of</c><00:37:43.440><c> the</c>

00:37:43.589 --> 00:37:43.599 align:start position:0%
we don't even know the address of the
 

00:37:43.599 --> 00:37:46.069 align:start position:0%
we don't even know the address of the
kernel<00:37:43.920><c> page</c><00:37:44.240><c> table</c><00:37:44.960><c> and</c><00:37:45.200><c> furthermore</c><00:37:45.839><c> the</c>

00:37:46.069 --> 00:37:46.079 align:start position:0%
kernel page table and furthermore the
 

00:37:46.079 --> 00:37:47.750 align:start position:0%
kernel page table and furthermore the
instruction<00:37:46.720><c> that</c><00:37:46.800><c> you</c><00:37:47.040><c> execute</c>

00:37:47.750 --> 00:37:47.760 align:start position:0%
instruction that you execute
 

00:37:47.760 --> 00:37:50.870 align:start position:0%
instruction that you execute
to<00:37:48.079><c> change</c><00:37:48.560><c> sat</c><00:37:48.960><c> p</c><00:37:49.680><c> require</c><00:37:50.160><c> that</c><00:37:50.320><c> the</c><00:37:50.480><c> address</c>

00:37:50.870 --> 00:37:50.880 align:start position:0%
to change sat p require that the address
 

00:37:50.880 --> 00:37:52.790 align:start position:0%
to change sat p require that the address
that<00:37:50.960><c> you're</c><00:37:51.200><c> loading</c><00:37:51.520><c> into</c><00:37:51.760><c> sap</c><00:37:52.240><c> come</c><00:37:52.480><c> from</c><00:37:52.720><c> a</c>

00:37:52.790 --> 00:37:52.800 align:start position:0%
that you're loading into sap come from a
 

00:37:52.800 --> 00:37:53.589 align:start position:0%
that you're loading into sap come from a
register

00:37:53.589 --> 00:37:53.599 align:start position:0%
register
 

00:37:53.599 --> 00:37:55.990 align:start position:0%
register
so<00:37:53.839><c> to</c><00:37:54.240><c> even</c><00:37:54.720><c> execute</c><00:37:55.119><c> the</c><00:37:55.280><c> instruction</c><00:37:55.760><c> to</c>

00:37:55.990 --> 00:37:56.000 align:start position:0%
so to even execute the instruction to
 

00:37:56.000 --> 00:37:56.630 align:start position:0%
so to even execute the instruction to
change

00:37:56.630 --> 00:37:56.640 align:start position:0%
change
 

00:37:56.640 --> 00:38:00.069 align:start position:0%
change
page<00:37:57.040><c> tables</c><00:37:58.079><c> we</c><00:37:58.240><c> need</c><00:37:58.400><c> some</c><00:37:58.640><c> spare</c><00:37:59.040><c> registers</c>

00:38:00.069 --> 00:38:00.079 align:start position:0%
page tables we need some spare registers
 

00:38:00.079 --> 00:38:02.310 align:start position:0%
page tables we need some spare registers
in<00:38:00.240><c> order</c><00:38:00.480><c> to</c><00:38:01.440><c> put</c><00:38:01.680><c> the</c><00:38:01.760><c> new</c><00:38:01.920><c> page</c><00:38:02.160><c> table</c>

00:38:02.310 --> 00:38:02.320 align:start position:0%
in order to put the new page table
 

00:38:02.320 --> 00:38:03.910 align:start position:0%
in order to put the new page table
address<00:38:02.560><c> in</c><00:38:02.720><c> those</c><00:38:02.880><c> registers</c><00:38:03.280><c> so</c><00:38:03.440><c> we</c><00:38:03.520><c> can</c>

00:38:03.910 --> 00:38:03.920 align:start position:0%
address in those registers so we can
 

00:38:03.920 --> 00:38:05.190 align:start position:0%
address in those registers so we can
execute

00:38:05.190 --> 00:38:05.200 align:start position:0%
execute
 

00:38:05.200 --> 00:38:08.870 align:start position:0%
execute
the<00:38:05.440><c> sat</c><00:38:05.680><c> p</c><00:38:05.920><c> modifying</c><00:38:06.480><c> instruction</c>

00:38:08.870 --> 00:38:08.880 align:start position:0%
the sat p modifying instruction
 

00:38:08.880 --> 00:38:11.109 align:start position:0%
the sat p modifying instruction
all<00:38:09.040><c> right</c><00:38:09.119><c> so</c><00:38:09.280><c> we</c><00:38:09.359><c> really</c><00:38:09.680><c> need</c><00:38:09.839><c> to</c><00:38:10.800><c> save</c><00:38:11.040><c> the</c>

00:38:11.109 --> 00:38:11.119 align:start position:0%
all right so we really need to save the
 

00:38:11.119 --> 00:38:13.349 align:start position:0%
all right so we really need to save the
user<00:38:11.359><c> registers</c>

00:38:13.349 --> 00:38:13.359 align:start position:0%
user registers
 

00:38:13.359 --> 00:38:17.109 align:start position:0%
user registers
there's<00:38:13.839><c> two</c><00:38:14.240><c> parts</c><00:38:15.200><c> to</c><00:38:15.359><c> the</c><00:38:15.920><c> solution</c><00:38:16.560><c> for</c>

00:38:17.109 --> 00:38:17.119 align:start position:0%
there's two parts to the solution for
 

00:38:17.119 --> 00:38:20.069 align:start position:0%
there's two parts to the solution for
how<00:38:17.359><c> xv6</c><00:38:18.000><c> does</c><00:38:18.160><c> this</c><00:38:18.400><c> on</c><00:38:18.480><c> the</c><00:38:18.720><c> on</c><00:38:18.880><c> the</c><00:38:18.960><c> risk</c><00:38:19.280><c> 5</c>

00:38:20.069 --> 00:38:20.079 align:start position:0%
how xv6 does this on the on the risk 5
 

00:38:20.079 --> 00:38:21.349 align:start position:0%
how xv6 does this on the on the risk 5
one<00:38:20.400><c> is</c>

00:38:21.349 --> 00:38:21.359 align:start position:0%
one is
 

00:38:21.359 --> 00:38:25.190 align:start position:0%
one is
part<00:38:21.520><c> of</c><00:38:21.599><c> the</c><00:38:21.680><c> solution</c><00:38:22.240><c> is</c><00:38:22.400><c> that</c><00:38:23.839><c> xv6</c>

00:38:25.190 --> 00:38:25.200 align:start position:0%
part of the solution is that xv6
 

00:38:25.200 --> 00:38:27.270 align:start position:0%
part of the solution is that xv6
into<00:38:25.440><c> every</c><00:38:25.680><c> user</c><00:38:26.000><c> address</c><00:38:26.560><c> every</c><00:38:26.720><c> user</c><00:38:27.040><c> page</c>

00:38:27.270 --> 00:38:27.280 align:start position:0%
into every user address every user page
 

00:38:27.280 --> 00:38:28.550 align:start position:0%
into every user address every user page
table<00:38:27.599><c> maps</c><00:38:27.839><c> this</c><00:38:28.160><c> trap</c>

00:38:28.550 --> 00:38:28.560 align:start position:0%
table maps this trap
 

00:38:28.560 --> 00:38:32.390 align:start position:0%
table maps this trap
frame<00:38:30.240><c> page</c><00:38:30.960><c> and</c><00:38:31.200><c> every</c><00:38:31.440><c> process</c><00:38:31.839><c> has</c><00:38:32.000><c> its</c><00:38:32.160><c> own</c>

00:38:32.390 --> 00:38:32.400 align:start position:0%
frame page and every process has its own
 

00:38:32.400 --> 00:38:34.150 align:start position:0%
frame page and every process has its own
trap<00:38:32.720><c> frame</c><00:38:32.960><c> page</c>

00:38:34.150 --> 00:38:34.160 align:start position:0%
trap frame page
 

00:38:34.160 --> 00:38:37.430 align:start position:0%
trap frame page
um<00:38:34.480><c> and</c><00:38:34.720><c> the</c><00:38:35.680><c> crafting</c><00:38:36.240><c> free</c><00:38:36.720><c> page</c>

00:38:37.430 --> 00:38:37.440 align:start position:0%
um and the crafting free page
 

00:38:37.440 --> 00:38:38.790 align:start position:0%
um and the crafting free page
actually<00:38:37.760><c> contains</c><00:38:38.079><c> some</c><00:38:38.240><c> interesting</c><00:38:38.720><c> a</c>

00:38:38.790 --> 00:38:38.800 align:start position:0%
actually contains some interesting a
 

00:38:38.800 --> 00:38:40.630 align:start position:0%
actually contains some interesting a
bunch<00:38:39.040><c> of</c><00:38:39.119><c> different</c><00:38:39.280><c> kinds</c><00:38:39.520><c> of</c><00:38:39.599><c> data</c><00:38:40.000><c> but</c>

00:38:40.630 --> 00:38:40.640 align:start position:0%
bunch of different kinds of data but
 

00:38:40.640 --> 00:38:42.069 align:start position:0%
bunch of different kinds of data but
at<00:38:40.720><c> this</c><00:38:40.880><c> point</c><00:38:41.119><c> the</c><00:38:41.200><c> most</c><00:38:41.359><c> important</c><00:38:41.680><c> data</c><00:38:42.000><c> it</c>

00:38:42.069 --> 00:38:42.079 align:start position:0%
at this point the most important data it
 

00:38:42.079 --> 00:38:44.870 align:start position:0%
at this point the most important data it
contains<00:38:42.800><c> is</c><00:38:43.200><c> 32</c><00:38:43.760><c> slots</c>

00:38:44.870 --> 00:38:44.880 align:start position:0%
contains is 32 slots
 

00:38:44.880 --> 00:38:47.829 align:start position:0%
contains is 32 slots
empty<00:38:45.280><c> slots</c><00:38:45.920><c> in</c><00:38:46.079><c> memory</c><00:38:47.040><c> in</c><00:38:47.119><c> which</c><00:38:47.359><c> to</c><00:38:47.520><c> save</c>

00:38:47.829 --> 00:38:47.839 align:start position:0%
empty slots in memory in which to save
 

00:38:47.839 --> 00:38:49.349 align:start position:0%
empty slots in memory in which to save
the<00:38:48.000><c> 32</c><00:38:48.560><c> registers</c>

00:38:49.349 --> 00:38:49.359 align:start position:0%
the 32 registers
 

00:38:49.359 --> 00:38:51.990 align:start position:0%
the 32 registers
so<00:38:50.400><c> the</c><00:38:50.560><c> good</c><00:38:50.720><c> news</c><00:38:50.960><c> right</c><00:38:51.119><c> now</c><00:38:51.359><c> in</c><00:38:51.440><c> the</c><00:38:51.760><c> trap</c>

00:38:51.990 --> 00:38:52.000 align:start position:0%
so the good news right now in the trap
 

00:38:52.000 --> 00:38:53.990 align:start position:0%
so the good news right now in the trap
handling<00:38:52.320><c> code</c><00:38:52.560><c> is</c><00:38:52.720><c> we</c><00:38:52.880><c> have</c><00:38:53.119><c> a</c><00:38:53.280><c> mapping</c><00:38:53.760><c> we're</c>

00:38:53.990 --> 00:38:54.000 align:start position:0%
handling code is we have a mapping we're
 

00:38:54.000 --> 00:38:55.589 align:start position:0%
handling code is we have a mapping we're
guaranteed<00:38:54.400><c> to</c><00:38:54.560><c> have</c><00:38:54.640><c> a</c><00:38:54.720><c> mapping</c>

00:38:55.589 --> 00:38:55.599 align:start position:0%
guaranteed to have a mapping
 

00:38:55.599 --> 00:38:57.510 align:start position:0%
guaranteed to have a mapping
set<00:38:55.839><c> up</c><00:38:55.920><c> by</c><00:38:56.079><c> the</c><00:38:56.160><c> kernel</c><00:38:56.480><c> previously</c><00:38:57.280><c> in</c><00:38:57.359><c> the</c>

00:38:57.510 --> 00:38:57.520 align:start position:0%
set up by the kernel previously in the
 

00:38:57.520 --> 00:38:59.270 align:start position:0%
set up by the kernel previously in the
user<00:38:57.839><c> page</c><00:38:58.160><c> table</c>

00:38:59.270 --> 00:38:59.280 align:start position:0%
user page table
 

00:38:59.280 --> 00:39:01.750 align:start position:0%
user page table
that<00:38:59.599><c> points</c><00:38:59.920><c> to</c><00:39:00.079><c> a</c><00:39:00.160><c> place</c><00:39:00.640><c> where</c><00:39:01.520><c> that's</c>

00:39:01.750 --> 00:39:01.760 align:start position:0%
that points to a place where that's
 

00:39:01.760 --> 00:39:04.230 align:start position:0%
that points to a place where that's
prepared<00:39:02.320><c> for</c><00:39:02.480><c> us</c><00:39:02.640><c> to</c><00:39:02.800><c> save</c><00:39:03.119><c> this</c><00:39:03.440><c> processes</c>

00:39:04.230 --> 00:39:04.240 align:start position:0%
prepared for us to save this processes
 

00:39:04.240 --> 00:39:07.750 align:start position:0%
prepared for us to save this processes
user<00:39:04.560><c> registers</c>

00:39:07.750 --> 00:39:07.760 align:start position:0%
 
 

00:39:07.760 --> 00:39:09.589 align:start position:0%
 
and<00:39:07.920><c> it's</c><00:39:08.079><c> here</c><00:39:08.320><c> it's</c><00:39:08.640><c> three</c><00:39:08.960><c> it's</c><00:39:09.119><c> always</c>

00:39:09.589 --> 00:39:09.599 align:start position:0%
and it's here it's three it's always
 

00:39:09.599 --> 00:39:11.430 align:start position:0%
and it's here it's three it's always
three<00:39:09.839><c> f</c><00:39:10.240><c> f</c>

00:39:11.430 --> 00:39:11.440 align:start position:0%
three f f
 

00:39:11.440 --> 00:39:15.109 align:start position:0%
three f f
e<00:39:11.760><c> zero</c><00:39:12.079><c> zero</c><00:39:12.320><c> zero</c><00:39:13.200><c> virtual</c><00:39:13.520><c> address</c>

00:39:15.109 --> 00:39:15.119 align:start position:0%
e zero zero zero virtual address
 

00:39:15.119 --> 00:39:16.870 align:start position:0%
e zero zero zero virtual address
and<00:39:15.280><c> if</c><00:39:15.359><c> you</c><00:39:15.440><c> want</c><00:39:15.599><c> to</c><00:39:15.680><c> see</c><00:39:15.839><c> what's</c><00:39:16.240><c> there</c>

00:39:16.870 --> 00:39:16.880 align:start position:0%
and if you want to see what's there
 

00:39:16.880 --> 00:39:20.550 align:start position:0%
and if you want to see what's there
actually<00:39:17.280><c> in</c><00:39:17.359><c> that</c><00:39:17.520><c> trap</c><00:39:17.920><c> frame</c><00:39:18.160><c> it's</c>

00:39:20.550 --> 00:39:20.560 align:start position:0%
 
 

00:39:20.560 --> 00:39:28.950 align:start position:0%
 
what<00:39:21.040><c> xv6</c><00:39:21.839><c> puts</c><00:39:22.160><c> there</c><00:39:22.560><c> is</c><00:39:22.800><c> defined</c><00:39:26.839><c> in</c>

00:39:28.950 --> 00:39:28.960 align:start position:0%
what xv6 puts there is defined in
 

00:39:28.960 --> 00:39:31.190 align:start position:0%
what xv6 puts there is defined in
proc.h<00:39:30.000><c> and</c><00:39:30.240><c> struck</c><00:39:30.560><c> frat</c><00:39:30.800><c> frame</c><00:39:30.960><c> which</c><00:39:31.119><c> is</c>

00:39:31.190 --> 00:39:31.200 align:start position:0%
proc.h and struck frat frame which is
 

00:39:31.200 --> 00:39:33.190 align:start position:0%
proc.h and struck frat frame which is
right<00:39:31.359><c> here</c><00:39:31.599><c> so</c><00:39:31.760><c> you</c><00:39:31.839><c> can</c><00:39:32.079><c> see</c>

00:39:33.190 --> 00:39:33.200 align:start position:0%
right here so you can see
 

00:39:33.200 --> 00:39:36.230 align:start position:0%
right here so you can see
um<00:39:34.720><c> what's</c><00:39:34.960><c> supposed</c><00:39:35.200><c> to</c><00:39:35.280><c> go</c><00:39:35.440><c> in</c><00:39:35.599><c> each</c><00:39:35.760><c> slot</c>

00:39:36.230 --> 00:39:36.240 align:start position:0%
um what's supposed to go in each slot
 

00:39:36.240 --> 00:39:39.589 align:start position:0%
um what's supposed to go in each slot
and<00:39:36.800><c> there's</c><00:39:37.119><c> a</c><00:39:37.680><c> 32</c><00:39:38.240><c> slots</c><00:39:38.640><c> you</c><00:39:38.720><c> know</c><00:39:38.880><c> named</c><00:39:39.119><c> ra</c>

00:39:39.589 --> 00:39:39.599 align:start position:0%
and there's a 32 slots you know named ra
 

00:39:39.599 --> 00:39:42.470 align:start position:0%
and there's a 32 slots you know named ra
sb<00:39:40.000><c> gp</c><00:39:40.400><c> whatever</c><00:39:40.960><c> which</c><00:39:41.200><c> are</c><00:39:41.760><c> places</c><00:39:42.079><c> to</c><00:39:42.240><c> save</c>

00:39:42.470 --> 00:39:42.480 align:start position:0%
sb gp whatever which are places to save
 

00:39:42.480 --> 00:39:43.990 align:start position:0%
sb gp whatever which are places to save
registers<00:39:42.880><c> there's</c><00:39:43.040><c> also</c><00:39:43.280><c> these</c><00:39:43.440><c> five</c><00:39:43.760><c> things</c>

00:39:43.990 --> 00:39:44.000 align:start position:0%
registers there's also these five things
 

00:39:44.000 --> 00:39:45.589 align:start position:0%
registers there's also these five things
at<00:39:44.079><c> the</c><00:39:44.240><c> beginning</c>

00:39:45.589 --> 00:39:45.599 align:start position:0%
at the beginning
 

00:39:45.599 --> 00:39:47.349 align:start position:0%
at the beginning
which<00:39:45.920><c> we'll</c><00:39:46.160><c> see</c><00:39:46.320><c> will</c><00:39:46.480><c> come</c><00:39:46.640><c> in</c><00:39:46.720><c> handy</c><00:39:47.040><c> very</c>

00:39:47.349 --> 00:39:47.359 align:start position:0%
which we'll see will come in handy very
 

00:39:47.359 --> 00:39:49.190 align:start position:0%
which we'll see will come in handy very
soon<00:39:47.680><c> which</c><00:39:47.920><c> are</c><00:39:48.079><c> values</c>

00:39:49.190 --> 00:39:49.200 align:start position:0%
soon which are values
 

00:39:49.200 --> 00:39:50.870 align:start position:0%
soon which are values
that<00:39:49.359><c> the</c><00:39:49.520><c> colonel</c><00:39:49.839><c> previously</c><00:39:50.400><c> placed</c><00:39:50.800><c> in</c>

00:39:50.870 --> 00:39:50.880 align:start position:0%
that the colonel previously placed in
 

00:39:50.880 --> 00:39:53.990 align:start position:0%
that the colonel previously placed in
these<00:39:51.119><c> slots</c><00:39:51.599><c> in</c><00:39:51.760><c> the</c><00:39:52.160><c> trap</c><00:39:52.480><c> frame</c>

00:39:53.990 --> 00:39:54.000 align:start position:0%
these slots in the trap frame
 

00:39:54.000 --> 00:39:55.829 align:start position:0%
these slots in the trap frame
like<00:39:54.400><c> for</c><00:39:54.560><c> example</c><00:39:54.880><c> this</c><00:39:55.119><c> very</c><00:39:55.280><c> first</c><00:39:55.520><c> slot</c><00:39:55.760><c> in</c>

00:39:55.829 --> 00:39:55.839 align:start position:0%
like for example this very first slot in
 

00:39:55.839 --> 00:39:57.750 align:start position:0%
like for example this very first slot in
the<00:39:55.920><c> trap</c><00:39:56.240><c> frame</c><00:39:56.720><c> contains</c><00:39:57.200><c> a</c><00:39:57.280><c> pointer</c><00:39:57.599><c> to</c><00:39:57.680><c> the</c>

00:39:57.750 --> 00:39:57.760 align:start position:0%
the trap frame contains a pointer to the
 

00:39:57.760 --> 00:39:58.870 align:start position:0%
the trap frame contains a pointer to the
kernel<00:39:58.000><c> page</c><00:39:58.320><c> table</c>

00:39:58.870 --> 00:39:58.880 align:start position:0%
kernel page table
 

00:39:58.880 --> 00:40:00.230 align:start position:0%
kernel page table
and<00:39:59.040><c> this</c><00:39:59.200><c> will</c><00:39:59.359><c> be</c><00:39:59.440><c> the</c><00:39:59.599><c> value</c><00:39:59.920><c> that</c><00:40:00.079><c> we're</c>

00:40:00.230 --> 00:40:00.240 align:start position:0%
and this will be the value that we're
 

00:40:00.240 --> 00:40:02.470 align:start position:0%
and this will be the value that we're
about<00:40:00.720><c> we're</c><00:40:00.880><c> very</c><00:40:01.200><c> soon</c><00:40:01.440><c> gonna</c>

00:40:02.470 --> 00:40:02.480 align:start position:0%
about we're very soon gonna
 

00:40:02.480 --> 00:40:04.069 align:start position:0%
about we're very soon gonna
uh<00:40:02.640><c> the</c><00:40:02.800><c> trap</c><00:40:02.960><c> handling</c><00:40:03.280><c> code</c><00:40:03.520><c> is</c><00:40:03.599><c> gonna</c><00:40:03.760><c> load</c>

00:40:04.069 --> 00:40:04.079 align:start position:0%
uh the trap handling code is gonna load
 

00:40:04.079 --> 00:40:06.230 align:start position:0%
uh the trap handling code is gonna load
into<00:40:04.319><c> sat</c><00:40:04.640><c> p</c>

00:40:06.230 --> 00:40:06.240 align:start position:0%
into sat p
 

00:40:06.240 --> 00:40:08.950 align:start position:0%
into sat p
okay<00:40:06.560><c> so</c><00:40:07.680><c> half</c><00:40:07.920><c> the</c><00:40:08.079><c> answer</c><00:40:08.319><c> to</c><00:40:08.560><c> how</c><00:40:08.720><c> to</c><00:40:08.800><c> say</c>

00:40:08.950 --> 00:40:08.960 align:start position:0%
okay so half the answer to how to say
 

00:40:08.960 --> 00:40:10.790 align:start position:0%
okay so half the answer to how to say
the<00:40:09.119><c> registers</c><00:40:09.599><c> is</c><00:40:09.680><c> that</c>

00:40:10.790 --> 00:40:10.800 align:start position:0%
the registers is that
 

00:40:10.800 --> 00:40:12.950 align:start position:0%
the registers is that
the<00:40:10.960><c> kernel</c><00:40:11.280><c> has</c><00:40:11.839><c> conveniently</c><00:40:12.400><c> mapped</c><00:40:12.800><c> this</c>

00:40:12.950 --> 00:40:12.960 align:start position:0%
the kernel has conveniently mapped this
 

00:40:12.960 --> 00:40:14.309 align:start position:0%
the kernel has conveniently mapped this
trap<00:40:13.280><c> frame</c>

00:40:14.309 --> 00:40:14.319 align:start position:0%
trap frame
 

00:40:14.319 --> 00:40:16.069 align:start position:0%
trap frame
into<00:40:14.560><c> every</c><00:40:14.800><c> user</c><00:40:15.040><c> page</c><00:40:15.280><c> table</c><00:40:15.599><c> the</c><00:40:15.680><c> other</c><00:40:15.920><c> is</c>

00:40:16.069 --> 00:40:16.079 align:start position:0%
into every user page table the other is
 

00:40:16.079 --> 00:40:18.230 align:start position:0%
into every user page table the other is
this<00:40:16.480><c> uh</c><00:40:16.960><c> instruction</c><00:40:17.520><c> this</c><00:40:17.760><c> scratch</c>

00:40:18.230 --> 00:40:18.240 align:start position:0%
this uh instruction this scratch
 

00:40:18.240 --> 00:40:19.829 align:start position:0%
this uh instruction this scratch
register<00:40:18.800><c> which</c><00:40:19.040><c> we</c>

00:40:19.829 --> 00:40:19.839 align:start position:0%
register which we
 

00:40:19.839 --> 00:40:22.230 align:start position:0%
register which we
uh<00:40:20.240><c> mentioned</c><00:40:20.560><c> before</c><00:40:21.520><c> um</c><00:40:21.680><c> so</c><00:40:21.920><c> there's</c><00:40:22.079><c> the</c>

00:40:22.230 --> 00:40:22.240 align:start position:0%
uh mentioned before um so there's the
 

00:40:22.240 --> 00:40:24.150 align:start position:0%
uh mentioned before um so there's the
special<00:40:22.800><c> scratch</c><00:40:23.119><c> register</c>

00:40:24.150 --> 00:40:24.160 align:start position:0%
special scratch register
 

00:40:24.160 --> 00:40:26.630 align:start position:0%
special scratch register
provided<00:40:24.560><c> by</c><00:40:24.880><c> risk</c><00:40:25.200><c> 5</c><00:40:25.839><c> for</c><00:40:26.160><c> exactly</c><00:40:26.560><c> the</c>

00:40:26.630 --> 00:40:26.640 align:start position:0%
provided by risk 5 for exactly the
 

00:40:26.640 --> 00:40:30.150 align:start position:0%
provided by risk 5 for exactly the
purpose<00:40:26.960><c> we're</c><00:40:27.119><c> about</c><00:40:27.280><c> to</c><00:40:27.359><c> use</c><00:40:27.599><c> it</c><00:40:27.760><c> for</c>

00:40:30.150 --> 00:40:30.160 align:start position:0%
 
 

00:40:30.160 --> 00:40:31.750 align:start position:0%
 
the<00:40:30.319><c> kernel</c><00:40:30.640><c> when</c><00:40:30.800><c> it</c><00:40:30.960><c> before</c><00:40:31.200><c> goes</c><00:40:31.359><c> into</c><00:40:31.520><c> user</c>

00:40:31.750 --> 00:40:31.760 align:start position:0%
the kernel when it before goes into user
 

00:40:31.760 --> 00:40:33.510 align:start position:0%
the kernel when it before goes into user
space<00:40:32.079><c> puts</c><00:40:32.319><c> a</c><00:40:32.400><c> pointer</c><00:40:32.720><c> there</c><00:40:32.960><c> to</c><00:40:33.040><c> the</c><00:40:33.200><c> trap</c>

00:40:33.510 --> 00:40:33.520 align:start position:0%
space puts a pointer there to the trap
 

00:40:33.520 --> 00:40:35.270 align:start position:0%
space puts a pointer there to the trap
frame<00:40:33.839><c> basically</c><00:40:34.240><c> just</c><00:40:34.480><c> point</c>

00:40:35.270 --> 00:40:35.280 align:start position:0%
frame basically just point
 

00:40:35.280 --> 00:40:38.309 align:start position:0%
frame basically just point
puts<00:40:35.599><c> into</c><00:40:36.400><c> sat</c><00:40:36.720><c> p</c><00:40:36.960><c> this</c>

00:40:38.309 --> 00:40:38.319 align:start position:0%
puts into sat p this
 

00:40:38.319 --> 00:40:40.790 align:start position:0%
puts into sat p this
this<00:40:38.560><c> address</c><00:40:39.440><c> um</c><00:40:39.760><c> just</c><00:40:40.079><c> for</c><00:40:40.240><c> the</c><00:40:40.319><c> convenience</c>

00:40:40.790 --> 00:40:40.800 align:start position:0%
this address um just for the convenience
 

00:40:40.800 --> 00:40:42.230 align:start position:0%
this address um just for the convenience
of<00:40:40.880><c> the</c><00:40:40.960><c> trap</c><00:40:41.200><c> handling</c><00:40:41.599><c> code</c>

00:40:42.230 --> 00:40:42.240 align:start position:0%
of the trap handling code
 

00:40:42.240 --> 00:40:43.430 align:start position:0%
of the trap handling code
more<00:40:42.480><c> importantly</c><00:40:42.880><c> though</c><00:40:43.119><c> there's</c><00:40:43.280><c> an</c>

00:40:43.430 --> 00:40:43.440 align:start position:0%
more importantly though there's an
 

00:40:43.440 --> 00:40:45.109 align:start position:0%
more importantly though there's an
instruction<00:40:43.839><c> on</c><00:40:43.920><c> the</c><00:40:44.000><c> risk</c><00:40:44.240><c> 5</c><00:40:44.800><c> that</c><00:40:44.960><c> it's</c>

00:40:45.109 --> 00:40:45.119 align:start position:0%
instruction on the risk 5 that it's
 

00:40:45.119 --> 00:40:46.309 align:start position:0%
instruction on the risk 5 that it's
going<00:40:45.200><c> to</c><00:40:45.280><c> allow</c><00:40:45.520><c> us</c><00:40:45.599><c> to</c><00:40:45.839><c> swap</c>

00:40:46.309 --> 00:40:46.319 align:start position:0%
going to allow us to swap
 

00:40:46.319 --> 00:40:48.550 align:start position:0%
going to allow us to swap
any<00:40:46.560><c> register</c><00:40:47.520><c> and</c><00:40:47.599><c> that's</c><00:40:47.920><c> scratch</c><00:40:48.400><c> which</c>

00:40:48.550 --> 00:40:48.560 align:start position:0%
any register and that's scratch which
 

00:40:48.560 --> 00:40:51.430 align:start position:0%
any register and that's scratch which
will<00:40:48.800><c> save</c><00:40:49.119><c> that</c><00:40:49.280><c> register</c><00:40:49.920><c> as</c><00:40:50.079><c> well</c><00:40:50.319><c> as</c>

00:40:51.430 --> 00:40:51.440 align:start position:0%
will save that register as well as
 

00:40:51.440 --> 00:40:54.550 align:start position:0%
will save that register as well as
load<00:40:51.839><c> the</c><00:40:52.880><c> value</c><00:40:53.200><c> of</c><00:40:53.359><c> s</c><00:40:53.520><c> scratch</c><00:40:54.319><c> into</c>

00:40:54.550 --> 00:40:54.560 align:start position:0%
load the value of s scratch into
 

00:40:54.560 --> 00:40:56.630 align:start position:0%
load the value of s scratch into
whatever<00:40:54.880><c> register</c><00:40:55.280><c> we</c><00:40:55.440><c> specified</c>

00:40:56.630 --> 00:40:56.640 align:start position:0%
whatever register we specified
 

00:40:56.640 --> 00:40:59.510 align:start position:0%
whatever register we specified
as<00:40:56.800><c> you</c><00:40:56.880><c> can</c><00:40:57.119><c> see</c><00:40:58.800><c> if</c><00:40:58.960><c> i</c><00:40:59.119><c> look</c><00:40:59.280><c> at</c><00:40:59.359><c> the</c>

00:40:59.510 --> 00:40:59.520 align:start position:0%
as you can see if i look at the
 

00:40:59.520 --> 00:41:02.950 align:start position:0%
as you can see if i look at the
trampoline<00:41:00.079><c> code</c>

00:41:02.950 --> 00:41:02.960 align:start position:0%
 
 

00:41:02.960 --> 00:41:03.990 align:start position:0%
 
we're<00:41:03.200><c> right</c><00:41:03.440><c> at</c><00:41:03.520><c> the</c><00:41:03.599><c> beginning</c><00:41:03.839><c> of</c><00:41:03.920><c> the</c>

00:41:03.990 --> 00:41:04.000 align:start position:0%
we're right at the beginning of the
 

00:41:04.000 --> 00:41:05.990 align:start position:0%
we're right at the beginning of the
trampoline<00:41:04.560><c> code</c><00:41:04.880><c> here</c>

00:41:05.990 --> 00:41:06.000 align:start position:0%
trampoline code here
 

00:41:06.000 --> 00:41:07.589 align:start position:0%
trampoline code here
the<00:41:06.160><c> very</c><00:41:06.400><c> first</c><00:41:06.560><c> thing</c><00:41:06.800><c> it</c><00:41:06.880><c> does</c><00:41:07.200><c> is</c><00:41:07.359><c> this</c>

00:41:07.589 --> 00:41:07.599 align:start position:0%
the very first thing it does is this
 

00:41:07.599 --> 00:41:11.030 align:start position:0%
the very first thing it does is this
csrw

00:41:11.030 --> 00:41:11.040 align:start position:0%
 
 

00:41:11.040 --> 00:41:12.870 align:start position:0%
 
instruction<00:41:11.839><c> this</c><00:41:12.000><c> is</c><00:41:12.160><c> the</c><00:41:12.319><c> source</c><00:41:12.640><c> in</c><00:41:12.720><c> this</c>

00:41:12.870 --> 00:41:12.880 align:start position:0%
instruction this is the source in this
 

00:41:12.880 --> 00:41:14.950 align:start position:0%
instruction this is the source in this
window<00:41:14.000><c> over</c><00:41:14.240><c> in</c><00:41:14.319><c> this</c><00:41:14.400><c> window</c><00:41:14.720><c> we</c><00:41:14.800><c> can</c>

00:41:14.950 --> 00:41:14.960 align:start position:0%
window over in this window we can
 

00:41:14.960 --> 00:41:17.270 align:start position:0%
window over in this window we can
actually<00:41:15.200><c> see</c><00:41:15.359><c> what</c><00:41:15.599><c> gdb</c><00:41:16.079><c> sees</c><00:41:16.319><c> in</c><00:41:16.400><c> the</c><00:41:16.480><c> kernel</c>

00:41:17.270 --> 00:41:17.280 align:start position:0%
actually see what gdb sees in the kernel
 

00:41:17.280 --> 00:41:20.230 align:start position:0%
actually see what gdb sees in the kernel
and<00:41:17.440><c> we've</c><00:41:17.680><c> actually</c><00:41:18.000><c> just</c><00:41:18.839><c> executed</c><00:41:20.000><c> this</c>

00:41:20.230 --> 00:41:20.240 align:start position:0%
and we've actually just executed this
 

00:41:20.240 --> 00:41:22.150 align:start position:0%
and we've actually just executed this
swap<00:41:20.640><c> instruction</c>

00:41:22.150 --> 00:41:22.160 align:start position:0%
swap instruction
 

00:41:22.160 --> 00:41:24.550 align:start position:0%
swap instruction
and<00:41:22.400><c> i</c><00:41:22.480><c> swapped</c><00:41:22.800><c> a0</c><00:41:23.200><c> with</c><00:41:23.359><c> scratch</c><00:41:24.240><c> in</c><00:41:24.319><c> order</c>

00:41:24.550 --> 00:41:24.560 align:start position:0%
and i swapped a0 with scratch in order
 

00:41:24.560 --> 00:41:27.109 align:start position:0%
and i swapped a0 with scratch in order
to<00:41:24.720><c> see</c><00:41:24.880><c> what</c><00:41:25.040><c> it</c><00:41:25.200><c> did</c><00:41:25.440><c> let's</c><00:41:25.760><c> print</c><00:41:26.079><c> out</c>

00:41:27.109 --> 00:41:27.119 align:start position:0%
to see what it did let's print out
 

00:41:27.119 --> 00:41:30.230 align:start position:0%
to see what it did let's print out
a0<00:41:28.400><c> a0</c><00:41:29.040><c> is</c><00:41:29.119><c> now</c><00:41:29.359><c> this</c>

00:41:30.230 --> 00:41:30.240 align:start position:0%
a0 a0 is now this
 

00:41:30.240 --> 00:41:34.550 align:start position:0%
a0 a0 is now this
three<00:41:31.240><c> fffe00</c><00:41:32.560><c> value</c><00:41:32.880><c> which</c><00:41:33.040><c> is</c><00:41:33.200><c> a</c><00:41:33.280><c> pointer</c>

00:41:34.550 --> 00:41:34.560 align:start position:0%
three fffe00 value which is a pointer
 

00:41:34.560 --> 00:41:36.230 align:start position:0%
three fffe00 value which is a pointer
which<00:41:34.800><c> is</c><00:41:34.880><c> the</c><00:41:34.960><c> virtual</c><00:41:35.280><c> address</c><00:41:35.680><c> of</c><00:41:35.760><c> the</c><00:41:35.920><c> trap</c>

00:41:36.230 --> 00:41:36.240 align:start position:0%
which is the virtual address of the trap
 

00:41:36.240 --> 00:41:38.150 align:start position:0%
which is the virtual address of the trap
frame<00:41:36.720><c> which</c><00:41:36.960><c> used</c><00:41:37.119><c> to</c><00:41:37.200><c> be</c><00:41:37.359><c> in</c><00:41:37.520><c> s</c><00:41:37.680><c> scratch</c><00:41:38.000><c> but</c>

00:41:38.150 --> 00:41:38.160 align:start position:0%
frame which used to be in s scratch but
 

00:41:38.160 --> 00:41:39.510 align:start position:0%
frame which used to be in s scratch but
we<00:41:38.240><c> just</c><00:41:38.400><c> swapped</c><00:41:38.800><c> it</c>

00:41:39.510 --> 00:41:39.520 align:start position:0%
we just swapped it
 

00:41:39.520 --> 00:41:41.190 align:start position:0%
we just swapped it
and<00:41:39.599><c> then</c><00:41:39.760><c> we</c><00:41:39.920><c> can</c><00:41:40.079><c> print</c><00:41:40.400><c> out</c><00:41:40.560><c> what's</c><00:41:40.800><c> in</c><00:41:40.960><c> s</c>

00:41:41.190 --> 00:41:41.200 align:start position:0%
and then we can print out what's in s
 

00:41:41.200 --> 00:41:43.670 align:start position:0%
and then we can print out what's in s
scratch

00:41:43.670 --> 00:41:43.680 align:start position:0%
 
 

00:41:43.680 --> 00:41:45.589 align:start position:0%
 
and<00:41:43.839><c> it's</c><00:41:44.160><c> 2</c><00:41:44.400><c> which</c><00:41:44.560><c> is</c><00:41:44.640><c> the</c><00:41:44.800><c> old</c><00:41:45.040><c> value</c><00:41:45.440><c> of</c><00:41:45.520><c> the</c>

00:41:45.589 --> 00:41:45.599 align:start position:0%
and it's 2 which is the old value of the
 

00:41:45.599 --> 00:41:48.470 align:start position:0%
and it's 2 which is the old value of the
a0<00:41:46.160><c> register</c><00:41:46.560><c> of</c><00:41:46.640><c> course</c><00:41:46.880><c> a0</c><00:41:47.440><c> held</c><00:41:47.839><c> the</c><00:41:48.000><c> first</c>

00:41:48.470 --> 00:41:48.480 align:start position:0%
a0 register of course a0 held the first
 

00:41:48.480 --> 00:41:51.190 align:start position:0%
a0 register of course a0 held the first
argument<00:41:49.359><c> to</c><00:41:49.520><c> the</c><00:41:49.680><c> right</c><00:41:50.000><c> function</c><00:41:50.800><c> which</c><00:41:51.040><c> is</c>

00:41:51.190 --> 00:41:51.200 align:start position:0%
argument to the right function which is
 

00:41:51.200 --> 00:41:52.710 align:start position:0%
argument to the right function which is
file<00:41:51.440><c> descriptor</c><00:41:52.000><c> 2</c><00:41:52.319><c> which</c>

00:41:52.710 --> 00:41:52.720 align:start position:0%
file descriptor 2 which
 

00:41:52.720 --> 00:41:54.630 align:start position:0%
file descriptor 2 which
you<00:41:52.800><c> know</c><00:41:53.119><c> is</c><00:41:53.280><c> what</c><00:41:53.440><c> the</c><00:41:53.520><c> shell</c><00:41:53.839><c> pass</c><00:41:54.319><c> so</c><00:41:54.480><c> we</c>

00:41:54.630 --> 00:41:54.640 align:start position:0%
you know is what the shell pass so we
 

00:41:54.640 --> 00:41:56.870 align:start position:0%
you know is what the shell pass so we
saved<00:41:54.880><c> away</c><00:41:55.119><c> a0</c>

00:41:56.870 --> 00:41:56.880 align:start position:0%
saved away a0
 

00:41:56.880 --> 00:42:00.230 align:start position:0%
saved away a0
and<00:41:57.119><c> we</c><00:41:57.280><c> have</c><00:41:57.359><c> a</c><00:41:57.440><c> pointer</c><00:41:57.680><c> to</c><00:41:57.839><c> the</c><00:41:57.920><c> trap</c><00:41:58.160><c> frame</c>

00:42:00.230 --> 00:42:00.240 align:start position:0%
and we have a pointer to the trap frame
 

00:42:00.240 --> 00:42:02.150 align:start position:0%
and we have a pointer to the trap frame
and<00:42:00.400><c> it</c><00:42:00.480><c> turns</c><00:42:00.720><c> out</c><00:42:00.880><c> now</c><00:42:01.119><c> that</c><00:42:01.520><c> we're</c><00:42:01.680><c> well</c><00:42:02.000><c> on</c>

00:42:02.150 --> 00:42:02.160 align:start position:0%
and it turns out now that we're well on
 

00:42:02.160 --> 00:42:03.990 align:start position:0%
and it turns out now that we're well on
our<00:42:02.240><c> way</c><00:42:02.480><c> to</c><00:42:02.640><c> be</c><00:42:02.720><c> able</c><00:42:02.880><c> to</c><00:42:02.960><c> save</c><00:42:03.200><c> the</c><00:42:03.280><c> registers</c>

00:42:03.990 --> 00:42:04.000 align:start position:0%
our way to be able to save the registers
 

00:42:04.000 --> 00:42:07.670 align:start position:0%
our way to be able to save the registers
in<00:42:04.160><c> fact</c><00:42:05.119><c> that's</c><00:42:05.359><c> what</c><00:42:05.520><c> the</c><00:42:05.760><c> very</c><00:42:06.000><c> next</c><00:42:06.800><c> um</c>

00:42:07.670 --> 00:42:07.680 align:start position:0%
in fact that's what the very next um
 

00:42:07.680 --> 00:42:10.150 align:start position:0%
in fact that's what the very next um
30<00:42:08.000><c> odd</c><00:42:08.319><c> instructions</c><00:42:08.960><c> do</c><00:42:09.760><c> in</c><00:42:09.920><c> this</c>

00:42:10.150 --> 00:42:10.160 align:start position:0%
30 odd instructions do in this
 

00:42:10.160 --> 00:42:11.349 align:start position:0%
30 odd instructions do in this
trampoline<00:42:10.720><c> code</c>

00:42:11.349 --> 00:42:11.359 align:start position:0%
trampoline code
 

00:42:11.359 --> 00:42:14.309 align:start position:0%
trampoline code
it<00:42:11.520><c> just</c><00:42:11.760><c> systematically</c><00:42:13.200><c> executes</c><00:42:13.599><c> these</c><00:42:13.839><c> sd</c>

00:42:14.309 --> 00:42:14.319 align:start position:0%
it just systematically executes these sd
 

00:42:14.319 --> 00:42:16.390 align:start position:0%
it just systematically executes these sd
instructions<00:42:14.880><c> you</c><00:42:15.200><c> just</c><00:42:15.359><c> save</c>

00:42:16.390 --> 00:42:16.400 align:start position:0%
instructions you just save
 

00:42:16.400 --> 00:42:19.109 align:start position:0%
instructions you just save
64-bit<00:42:17.520><c> store</c><00:42:17.920><c> instructions</c><00:42:18.480><c> to</c><00:42:18.640><c> store</c><00:42:18.960><c> every</c>

00:42:19.109 --> 00:42:19.119 align:start position:0%
64-bit store instructions to store every
 

00:42:19.119 --> 00:42:20.550 align:start position:0%
64-bit store instructions to store every
single<00:42:19.440><c> register</c>

00:42:20.550 --> 00:42:20.560 align:start position:0%
single register
 

00:42:20.560 --> 00:42:23.990 align:start position:0%
single register
to<00:42:20.720><c> a</c><00:42:20.880><c> different</c><00:42:22.240><c> offset</c><00:42:22.960><c> in</c><00:42:23.200><c> the</c><00:42:23.359><c> trap</c><00:42:23.599><c> frame</c>

00:42:23.990 --> 00:42:24.000 align:start position:0%
to a different offset in the trap frame
 

00:42:24.000 --> 00:42:24.950 align:start position:0%
to a different offset in the trap frame
a0

00:42:24.950 --> 00:42:24.960 align:start position:0%
a0
 

00:42:24.960 --> 00:42:26.790 align:start position:0%
a0
if<00:42:25.119><c> you</c><00:42:25.200><c> recall</c><00:42:25.680><c> now</c><00:42:25.920><c> contains</c><00:42:26.400><c> after</c><00:42:26.640><c> the</c>

00:42:26.790 --> 00:42:26.800 align:start position:0%
if you recall now contains after the
 

00:42:26.800 --> 00:42:28.470 align:start position:0%
if you recall now contains after the
swap<00:42:27.119><c> contains</c><00:42:27.520><c> a</c><00:42:27.680><c> pointer</c><00:42:28.000><c> to</c><00:42:28.160><c> the</c>

00:42:28.470 --> 00:42:28.480 align:start position:0%
swap contains a pointer to the
 

00:42:28.480 --> 00:42:32.069 align:start position:0%
swap contains a pointer to the
trap<00:42:28.800><c> frame</c><00:42:29.520><c> that</c><00:42:29.760><c> is</c><00:42:30.720><c> contains</c><00:42:31.200><c> the</c>

00:42:32.069 --> 00:42:32.079 align:start position:0%
trap frame that is contains the
 

00:42:32.079 --> 00:42:34.710 align:start position:0%
trap frame that is contains the
virtual<00:42:32.400><c> address</c><00:42:32.640><c> of</c><00:42:32.800><c> this</c><00:42:32.960><c> page</c><00:42:34.480><c> and</c><00:42:34.560><c> we're</c>

00:42:34.710 --> 00:42:34.720 align:start position:0%
virtual address of this page and we're
 

00:42:34.720 --> 00:42:36.069 align:start position:0%
virtual address of this page and we're
just<00:42:34.960><c> storing</c>

00:42:36.069 --> 00:42:36.079 align:start position:0%
just storing
 

00:42:36.079 --> 00:42:37.670 align:start position:0%
just storing
each<00:42:36.319><c> register</c><00:42:36.720><c> at</c><00:42:36.800><c> a</c><00:42:36.880><c> different</c><00:42:37.200><c> offset</c><00:42:37.599><c> in</c>

00:42:37.670 --> 00:42:37.680 align:start position:0%
each register at a different offset in
 

00:42:37.680 --> 00:42:41.990 align:start position:0%
each register at a different offset in
the<00:42:37.760><c> track</c><00:42:38.000><c> frame</c>

00:42:41.990 --> 00:42:42.000 align:start position:0%
 
 

00:42:42.000 --> 00:42:43.349 align:start position:0%
 
all<00:42:42.160><c> these</c><00:42:42.319><c> stores</c><00:42:42.560><c> are</c><00:42:42.640><c> a</c><00:42:42.720><c> bit</c><00:42:42.880><c> boring</c><00:42:43.200><c> so</c><00:42:43.280><c> i</c>

00:42:43.349 --> 00:42:43.359 align:start position:0%
all these stores are a bit boring so i
 

00:42:43.359 --> 00:42:45.430 align:start position:0%
all these stores are a bit boring so i
think<00:42:43.520><c> i'm</c><00:42:43.599><c> going</c><00:42:43.680><c> to</c><00:42:43.839><c> skip</c><00:42:44.160><c> over</c><00:42:44.319><c> them</c>

00:42:45.430 --> 00:42:45.440 align:start position:0%
think i'm going to skip over them
 

00:42:45.440 --> 00:42:45.870 align:start position:0%
think i'm going to skip over them
um

00:42:45.870 --> 00:42:45.880 align:start position:0%
um
 

00:42:45.880 --> 00:42:48.470 align:start position:0%
um
[Music]

00:42:48.470 --> 00:42:48.480 align:start position:0%
[Music]
 

00:42:48.480 --> 00:42:49.670 align:start position:0%
[Music]
and<00:42:48.640><c> let</c><00:42:48.800><c> me</c><00:42:48.880><c> set</c><00:42:49.040><c> a</c><00:42:49.119><c> breakpoint</c><00:42:49.440><c> a</c><00:42:49.520><c> little</c>

00:42:49.670 --> 00:42:49.680 align:start position:0%
and let me set a breakpoint a little
 

00:42:49.680 --> 00:42:55.430 align:start position:0%
and let me set a breakpoint a little
farther<00:42:50.079><c> on</c>

00:42:55.430 --> 00:42:55.440 align:start position:0%
 
 

00:42:55.440 --> 00:42:59.990 align:start position:0%
 
professor<00:42:56.079><c> question</c><00:42:56.839><c> yes</c><00:42:58.240><c> how</c><00:42:58.400><c> did</c><00:42:58.640><c> the</c>

00:42:59.990 --> 00:43:00.000 align:start position:0%
professor question yes how did the
 

00:43:00.000 --> 00:43:03.349 align:start position:0%
professor question yes how did the
address<00:43:00.480><c> of</c><00:43:00.560><c> the</c><00:43:00.720><c> trap</c><00:43:01.119><c> frame</c><00:43:02.480><c> end</c><00:43:02.720><c> up</c><00:43:02.880><c> in</c><00:43:03.119><c> s</c>

00:43:03.349 --> 00:43:03.359 align:start position:0%
address of the trap frame end up in s
 

00:43:03.359 --> 00:43:05.910 align:start position:0%
address of the trap frame end up in s
scratch<00:43:03.760><c> when</c><00:43:03.920><c> we</c><00:43:04.079><c> swapped</c><00:43:04.400><c> it</c><00:43:04.480><c> with</c><00:43:04.640><c> a0</c>

00:43:05.910 --> 00:43:05.920 align:start position:0%
scratch when we swapped it with a0
 

00:43:05.920 --> 00:43:09.430 align:start position:0%
scratch when we swapped it with a0
okay<00:43:06.240><c> before</c><00:43:07.119><c> the</c><00:43:07.280><c> kernel</c>

00:43:09.430 --> 00:43:09.440 align:start position:0%
okay before the kernel
 

00:43:09.440 --> 00:43:11.910 align:start position:0%
okay before the kernel
before<00:43:10.000><c> it</c><00:43:10.720><c> previously</c><00:43:11.359><c> transitioned</c><00:43:11.839><c> to</c>

00:43:11.910 --> 00:43:11.920 align:start position:0%
before it previously transitioned to
 

00:43:11.920 --> 00:43:14.390 align:start position:0%
before it previously transitioned to
user<00:43:12.240><c> space</c>

00:43:14.390 --> 00:43:14.400 align:start position:0%
user space
 

00:43:14.400 --> 00:43:17.829 align:start position:0%
user space
set<00:43:14.880><c> s</c><00:43:15.119><c> scratch</c><00:43:16.000><c> to</c><00:43:16.160><c> be</c><00:43:16.319><c> equal</c><00:43:16.800><c> to</c>

00:43:17.829 --> 00:43:17.839 align:start position:0%
set s scratch to be equal to
 

00:43:17.839 --> 00:43:20.790 align:start position:0%
set s scratch to be equal to
three<00:43:18.160><c> f</c><00:43:18.480><c> f</c><00:43:19.119><c> e</c><00:43:19.280><c> zero</c><00:43:19.520><c> zero</c><00:43:19.839><c> zero</c><00:43:20.319><c> the</c><00:43:20.400><c> virtual</c>

00:43:20.790 --> 00:43:20.800 align:start position:0%
three f f e zero zero zero the virtual
 

00:43:20.800 --> 00:43:22.710 align:start position:0%
three f f e zero zero zero the virtual
address<00:43:21.119><c> of</c><00:43:21.200><c> the</c><00:43:21.280><c> trap</c><00:43:21.520><c> frame</c>

00:43:22.710 --> 00:43:22.720 align:start position:0%
address of the trap frame
 

00:43:22.720 --> 00:43:24.150 align:start position:0%
address of the trap frame
so<00:43:22.960><c> all</c><00:43:23.119><c> the</c><00:43:23.200><c> time</c><00:43:23.359><c> when</c><00:43:23.520><c> we</c><00:43:23.680><c> were</c><00:43:23.760><c> executing</c>

00:43:24.150 --> 00:43:24.160 align:start position:0%
so all the time when we were executing
 

00:43:24.160 --> 00:43:25.990 align:start position:0%
so all the time when we were executing
in<00:43:24.240><c> user</c><00:43:24.480><c> space</c><00:43:24.720><c> in</c><00:43:24.880><c> the</c><00:43:24.960><c> shell</c><00:43:25.359><c> s</c><00:43:25.359><c> scratch</c><00:43:25.839><c> had</c>

00:43:25.990 --> 00:43:26.000 align:start position:0%
in user space in the shell s scratch had
 

00:43:26.000 --> 00:43:29.109 align:start position:0%
in user space in the shell s scratch had
this<00:43:26.160><c> pointer</c><00:43:26.560><c> to</c><00:43:26.640><c> the</c><00:43:26.720><c> trap</c><00:43:26.960><c> frame</c>

00:43:29.109 --> 00:43:29.119 align:start position:0%
this pointer to the trap frame
 

00:43:29.119 --> 00:43:34.390 align:start position:0%
this pointer to the trap frame
and<00:43:29.280><c> then</c><00:43:30.400><c> the</c><00:43:30.560><c> shell</c><00:43:30.880><c> executes</c><00:43:31.599><c> uh</c>

00:43:34.390 --> 00:43:34.400 align:start position:0%
 
 

00:43:34.400 --> 00:43:37.430 align:start position:0%
 
ecall<00:43:36.319><c> which</c><00:43:36.640><c> jumps</c><00:43:36.880><c> to</c><00:43:37.040><c> the</c><00:43:37.040><c> beginning</c><00:43:37.359><c> of</c>

00:43:37.430 --> 00:43:37.440 align:start position:0%
ecall which jumps to the beginning of
 

00:43:37.440 --> 00:43:39.030 align:start position:0%
ecall which jumps to the beginning of
the<00:43:37.599><c> trampoline</c><00:43:38.319><c> and</c><00:43:38.400><c> the</c><00:43:38.480><c> very</c><00:43:38.800><c> first</c>

00:43:39.030 --> 00:43:39.040 align:start position:0%
the trampoline and the very first
 

00:43:39.040 --> 00:43:40.069 align:start position:0%
the trampoline and the very first
instruction<00:43:39.359><c> in</c><00:43:39.440><c> the</c><00:43:39.599><c> trampoline</c>

00:43:40.069 --> 00:43:40.079 align:start position:0%
instruction in the trampoline
 

00:43:40.079 --> 00:43:42.950 align:start position:0%
instruction in the trampoline
is<00:43:40.240><c> this</c><00:43:40.319><c> csr</c><00:43:41.200><c> rw</c><00:43:41.680><c> instruction</c><00:43:42.079><c> which</c><00:43:42.400><c> swaps</c>

00:43:42.950 --> 00:43:42.960 align:start position:0%
is this csr rw instruction which swaps
 

00:43:42.960 --> 00:43:44.790 align:start position:0%
is this csr rw instruction which swaps
a0<00:43:43.440><c> into</c><00:43:43.599><c> scratch</c>

00:43:44.790 --> 00:43:44.800 align:start position:0%
a0 into scratch
 

00:43:44.800 --> 00:43:46.230 align:start position:0%
a0 into scratch
and<00:43:44.880><c> so</c><00:43:45.040><c> now</c><00:43:45.200><c> the</c><00:43:45.280><c> old</c><00:43:45.440><c> value</c><00:43:45.680><c> of</c><00:43:45.760><c> the</c><00:43:45.839><c> scratch</c>

00:43:46.230 --> 00:43:46.240 align:start position:0%
and so now the old value of the scratch
 

00:43:46.240 --> 00:43:47.670 align:start position:0%
and so now the old value of the scratch
namely<00:43:46.560><c> the</c><00:43:46.640><c> point</c><00:43:46.800><c> of</c><00:43:46.960><c> the</c><00:43:47.040><c> trap</c><00:43:47.280><c> frame</c><00:43:47.520><c> is</c>

00:43:47.670 --> 00:43:47.680 align:start position:0%
namely the point of the trap frame is
 

00:43:47.680 --> 00:43:49.990 align:start position:0%
namely the point of the trap frame is
now<00:43:47.920><c> in</c><00:43:48.079><c> a0</c>

00:43:49.990 --> 00:43:50.000 align:start position:0%
now in a0
 

00:43:50.000 --> 00:43:53.109 align:start position:0%
now in a0
does<00:43:50.160><c> that</c><00:43:50.400><c> answer</c><00:43:50.560><c> your</c><00:43:50.720><c> question</c>

00:43:53.109 --> 00:43:53.119 align:start position:0%
 
 

00:43:53.119 --> 00:43:55.589 align:start position:0%
 
as<00:43:53.359><c> i</c><00:43:53.440><c> guess</c><00:43:53.680><c> i'm</c><00:43:53.839><c> wondering</c><00:43:54.319><c> where</c><00:43:54.560><c> in</c><00:43:54.720><c> the</c><00:43:55.440><c> i</c>

00:43:55.589 --> 00:43:55.599 align:start position:0%
as i guess i'm wondering where in the i
 

00:43:55.599 --> 00:43:57.829 align:start position:0%
as i guess i'm wondering where in the i
look<00:43:56.079><c> does</c><00:43:56.240><c> this</c><00:43:56.480><c> happen</c>

00:43:57.829 --> 00:43:57.839 align:start position:0%
look does this happen
 

00:43:57.839 --> 00:43:59.910 align:start position:0%
look does this happen
during<00:43:58.240><c> the</c><00:43:58.400><c> allocation</c><00:43:59.040><c> of</c><00:43:59.119><c> the</c><00:43:59.440><c> process</c>

00:43:59.910 --> 00:43:59.920 align:start position:0%
during the allocation of the process
 

00:43:59.920 --> 00:44:01.430 align:start position:0%
during the allocation of the process
like<00:44:00.160><c> where</c><00:44:00.319><c> does</c><00:44:00.560><c> the</c><00:44:00.640><c> scratch</c><00:44:00.960><c> register</c>

00:44:01.430 --> 00:44:01.440 align:start position:0%
like where does the scratch register
 

00:44:01.440 --> 00:44:01.990 align:start position:0%
like where does the scratch register
live

00:44:01.990 --> 00:44:02.000 align:start position:0%
live
 

00:44:02.000 --> 00:44:03.430 align:start position:0%
live
where<00:44:02.240><c> does</c><00:44:02.400><c> this</c><00:44:02.800><c> as</c><00:44:02.960><c> well</c><00:44:03.119><c> the</c><00:44:03.200><c> scratch</c>

00:44:03.430 --> 00:44:03.440 align:start position:0%
where does this as well the scratch
 

00:44:03.440 --> 00:44:05.109 align:start position:0%
where does this as well the scratch
order<00:44:03.839><c> itself</c><00:44:04.160><c> lives</c>

00:44:05.109 --> 00:44:05.119 align:start position:0%
order itself lives
 

00:44:05.119 --> 00:44:07.589 align:start position:0%
order itself lives
on<00:44:05.280><c> the</c><00:44:05.359><c> cpu</c><00:44:06.480><c> it's</c><00:44:06.640><c> a</c><00:44:06.800><c> special</c><00:44:07.119><c> register</c><00:44:07.520><c> in</c>

00:44:07.589 --> 00:44:07.599 align:start position:0%
on the cpu it's a special register in
 

00:44:07.599 --> 00:44:08.950 align:start position:0%
on the cpu it's a special register in
the<00:44:07.680><c> cpu</c>

00:44:08.950 --> 00:44:08.960 align:start position:0%
the cpu
 

00:44:08.960 --> 00:44:12.230 align:start position:0%
the cpu
where<00:44:09.280><c> and</c><00:44:09.440><c> the</c><00:44:09.680><c> colonel</c><00:44:10.160><c> sets</c><00:44:10.480><c> it</c><00:44:11.680><c> um</c>

00:44:12.230 --> 00:44:12.240 align:start position:0%
where and the colonel sets it um
 

00:44:12.240 --> 00:44:15.349 align:start position:0%
where and the colonel sets it um
well<00:44:14.400><c> uh</c>

00:44:15.349 --> 00:44:15.359 align:start position:0%
well uh
 

00:44:15.359 --> 00:44:17.430 align:start position:0%
well uh
it's<00:44:15.839><c> a</c><00:44:15.839><c> little</c><00:44:16.000><c> bit</c><00:44:16.160><c> involved</c><00:44:16.560><c> the</c><00:44:17.040><c> actual</c>

00:44:17.430 --> 00:44:17.440 align:start position:0%
it's a little bit involved the actual
 

00:44:17.440 --> 00:44:18.950 align:start position:0%
it's a little bit involved the actual
place<00:44:17.680><c> where</c><00:44:17.839><c> it's</c><00:44:18.000><c> set</c><00:44:18.240><c> or</c><00:44:18.400><c> what</c><00:44:18.560><c> i'm</c><00:44:18.640><c> now</c>

00:44:18.950 --> 00:44:18.960 align:start position:0%
place where it's set or what i'm now
 

00:44:18.960 --> 00:44:20.829 align:start position:0%
place where it's set or what i'm now
showing<00:44:19.200><c> you</c><00:44:19.359><c> on</c><00:44:19.440><c> the</c><00:44:19.599><c> right</c><00:44:19.839><c> here</c>

00:44:20.829 --> 00:44:20.839 align:start position:0%
showing you on the right here
 

00:44:20.839 --> 00:44:24.069 align:start position:0%
showing you on the right here
is<00:44:21.920><c> um</c><00:44:22.400><c> the</c><00:44:22.560><c> code</c><00:44:23.040><c> that</c><00:44:23.200><c> the</c><00:44:23.359><c> kernel</c><00:44:23.760><c> x</c>

00:44:24.069 --> 00:44:24.079 align:start position:0%
is um the code that the kernel x
 

00:44:24.079 --> 00:44:26.550 align:start position:0%
is um the code that the kernel x
the<00:44:24.319><c> last</c><00:44:24.800><c> two</c><00:44:25.119><c> instructions</c><00:44:26.240><c> that</c><00:44:26.400><c> the</c>

00:44:26.550 --> 00:44:26.560 align:start position:0%
the last two instructions that the
 

00:44:26.560 --> 00:44:27.910 align:start position:0%
the last two instructions that the
kernel<00:44:26.960><c> executes</c>

00:44:27.910 --> 00:44:27.920 align:start position:0%
kernel executes
 

00:44:27.920 --> 00:44:30.950 align:start position:0%
kernel executes
while<00:44:28.079><c> returning</c><00:44:28.560><c> a</c><00:44:28.640><c> user</c><00:44:28.960><c> space</c><00:44:30.640><c> and</c><00:44:30.720><c> what's</c>

00:44:30.950 --> 00:44:30.960 align:start position:0%
while returning a user space and what's
 

00:44:30.960 --> 00:44:31.990 align:start position:0%
while returning a user space and what's
happening<00:44:31.440><c> is</c><00:44:31.599><c> that</c>

00:44:31.990 --> 00:44:32.000 align:start position:0%
happening is that
 

00:44:32.000 --> 00:44:33.589 align:start position:0%
happening is that
the<00:44:32.240><c> very</c><00:44:32.560><c> last</c><00:44:32.800><c> thing</c><00:44:32.960><c> it</c><00:44:33.040><c> does</c><00:44:33.280><c> after</c><00:44:33.520><c> the</c>

00:44:33.589 --> 00:44:33.599 align:start position:0%
the very last thing it does after the
 

00:44:33.599 --> 00:44:35.589 align:start position:0%
the very last thing it does after the
kernel<00:44:34.000><c> restores</c>

00:44:35.589 --> 00:44:35.599 align:start position:0%
kernel restores
 

00:44:35.599 --> 00:44:37.750 align:start position:0%
kernel restores
all<00:44:35.760><c> the</c><00:44:35.839><c> user</c><00:44:36.160><c> registers</c><00:44:36.880><c> and</c><00:44:37.119><c> is</c><00:44:37.520><c> you</c><00:44:37.680><c> know</c>

00:44:37.750 --> 00:44:37.760 align:start position:0%
all the user registers and is you know
 

00:44:37.760 --> 00:44:39.670 align:start position:0%
all the user registers and is you know
just<00:44:38.000><c> about</c><00:44:38.160><c> ready</c><00:44:38.400><c> to</c><00:44:38.560><c> return</c><00:44:38.800><c> to</c><00:44:38.880><c> user</c><00:44:39.119><c> space</c>

00:44:39.670 --> 00:44:39.680 align:start position:0%
just about ready to return to user space
 

00:44:39.680 --> 00:44:40.950 align:start position:0%
just about ready to return to user space
it<00:44:39.920><c> actually</c><00:44:40.079><c> does</c><00:44:40.240><c> another</c><00:44:40.560><c> one</c><00:44:40.720><c> of</c><00:44:40.800><c> these</c>

00:44:40.950 --> 00:44:40.960 align:start position:0%
it actually does another one of these
 

00:44:40.960 --> 00:44:43.589 align:start position:0%
it actually does another one of these
swaps<00:44:42.000><c> the</c><00:44:42.160><c> kernel</c><00:44:42.400><c> has</c><00:44:42.480><c> set</c><00:44:42.720><c> up</c><00:44:42.800><c> a0</c><00:44:43.359><c> to</c><00:44:43.440><c> be</c>

00:44:43.589 --> 00:44:43.599 align:start position:0%
swaps the kernel has set up a0 to be
 

00:44:43.599 --> 00:44:45.430 align:start position:0%
swaps the kernel has set up a0 to be
equal<00:44:43.760><c> to</c><00:44:43.920><c> the</c><00:44:44.000><c> trap</c><00:44:44.240><c> frame</c>

00:44:45.430 --> 00:44:45.440 align:start position:0%
equal to the trap frame
 

00:44:45.440 --> 00:44:48.829 align:start position:0%
equal to the trap frame
and<00:44:45.599><c> s</c><00:44:45.760><c> scratch</c><00:44:46.160><c> still</c><00:44:46.400><c> holds</c><00:44:46.880><c> the</c><00:44:47.040><c> saved</c><00:44:47.920><c> user</c>

00:44:48.829 --> 00:44:48.839 align:start position:0%
and s scratch still holds the saved user
 

00:44:48.839 --> 00:44:51.829 align:start position:0%
and s scratch still holds the saved user
a0<00:44:49.839><c> so</c><00:44:50.000><c> the</c><00:44:50.079><c> kernel</c><00:44:50.319><c> does</c><00:44:50.560><c> this</c><00:44:50.720><c> swap</c><00:44:51.119><c> which</c>

00:44:51.829 --> 00:44:51.839 align:start position:0%
a0 so the kernel does this swap which
 

00:44:51.839 --> 00:44:53.510 align:start position:0%
a0 so the kernel does this swap which
ends<00:44:52.000><c> up</c><00:44:52.079><c> with</c><00:44:52.319><c> scratch</c><00:44:52.720><c> having</c><00:44:53.040><c> a</c><00:44:53.119><c> pointer</c><00:44:53.440><c> to</c>

00:44:53.510 --> 00:44:53.520 align:start position:0%
ends up with scratch having a pointer to
 

00:44:53.520 --> 00:44:57.910 align:start position:0%
ends up with scratch having a pointer to
the<00:44:54.480><c> trap</c><00:44:54.800><c> frame</c><00:44:55.119><c> and</c><00:44:55.280><c> a0</c><00:44:55.920><c> having</c><00:44:56.160><c> the</c><00:44:56.400><c> saved</c>

00:44:57.910 --> 00:44:57.920 align:start position:0%
the trap frame and a0 having the saved
 

00:44:57.920 --> 00:45:00.950 align:start position:0%
the trap frame and a0 having the saved
user<00:44:58.240><c> a0</c><00:44:58.720><c> and</c><00:44:58.880><c> then</c><00:44:59.040><c> this</c><00:44:59.359><c> s</c><00:44:59.520><c> rep</c><00:44:59.760><c> returns</c>

00:45:00.950 --> 00:45:00.960 align:start position:0%
user a0 and then this s rep returns
 

00:45:00.960 --> 00:45:03.430 align:start position:0%
user a0 and then this s rep returns
to<00:45:01.119><c> user</c><00:45:01.440><c> space</c><00:45:02.160><c> so</c><00:45:02.240><c> you</c><00:45:02.319><c> may</c><00:45:02.480><c> wonder</c><00:45:02.720><c> how</c><00:45:02.960><c> a0</c>

00:45:03.430 --> 00:45:03.440 align:start position:0%
to user space so you may wonder how a0
 

00:45:03.440 --> 00:45:06.470 align:start position:0%
to user space so you may wonder how a0
ever<00:45:03.599><c> got</c><00:45:03.760><c> to</c><00:45:03.920><c> have</c><00:45:04.079><c> the</c><00:45:04.240><c> value</c><00:45:04.640><c> of</c><00:45:04.800><c> the</c><00:45:05.040><c> uh</c>

00:45:06.470 --> 00:45:06.480 align:start position:0%
ever got to have the value of the uh
 

00:45:06.480 --> 00:45:08.790 align:start position:0%
ever got to have the value of the uh
the<00:45:06.640><c> address</c><00:45:06.960><c> of</c><00:45:07.040><c> the</c><00:45:07.119><c> trap</c><00:45:07.359><c> frame</c><00:45:08.480><c> answer</c>

00:45:08.790 --> 00:45:08.800 align:start position:0%
the address of the trap frame answer
 

00:45:08.800 --> 00:45:09.510 align:start position:0%
the address of the trap frame answer
that<00:45:09.040><c> question</c>

00:45:09.510 --> 00:45:09.520 align:start position:0%
that question
 

00:45:09.520 --> 00:45:13.190 align:start position:0%
that question
is<00:45:09.680><c> that</c><00:45:10.240><c> um</c>

00:45:13.190 --> 00:45:13.200 align:start position:0%
 
 

00:45:13.200 --> 00:45:17.109 align:start position:0%
 
we're<00:45:13.359><c> now</c><00:45:13.599><c> looking</c><00:45:14.240><c> in</c><00:45:14.640><c> trap.c</c>

00:45:17.109 --> 00:45:17.119 align:start position:0%
we're now looking in trap.c
 

00:45:17.119 --> 00:45:20.309 align:start position:0%
we're now looking in trap.c
at<00:45:17.280><c> this</c><00:45:17.920><c> last</c><00:45:18.480><c> c</c><00:45:18.880><c> function</c><00:45:19.359><c> to</c><00:45:19.520><c> run</c>

00:45:20.309 --> 00:45:20.319 align:start position:0%
at this last c function to run
 

00:45:20.319 --> 00:45:24.630 align:start position:0%
at this last c function to run
on<00:45:20.480><c> the</c><00:45:20.640><c> way</c><00:45:21.839><c> out</c><00:45:22.319><c> to</c><00:45:22.560><c> user</c><00:45:22.880><c> space</c>

00:45:24.630 --> 00:45:24.640 align:start position:0%
on the way out to user space
 

00:45:24.640 --> 00:45:26.309 align:start position:0%
on the way out to user space
and<00:45:24.720><c> the</c><00:45:24.880><c> last</c><00:45:25.119><c> thing</c><00:45:25.280><c> the</c><00:45:25.440><c> c</c><00:45:25.680><c> function</c><00:45:26.079><c> does</c>

00:45:26.309 --> 00:45:26.319 align:start position:0%
and the last thing the c function does
 

00:45:26.319 --> 00:45:29.430 align:start position:0%
and the last thing the c function does
is<00:45:26.880><c> calls</c><00:45:27.200><c> this</c><00:45:27.440><c> function</c><00:45:27.920><c> here</c>

00:45:29.430 --> 00:45:29.440 align:start position:0%
is calls this function here
 

00:45:29.440 --> 00:45:32.309 align:start position:0%
is calls this function here
whatever<00:45:30.480><c> this</c><00:45:30.800><c> fn</c><00:45:31.200><c> is</c><00:45:31.359><c> and</c><00:45:31.520><c> the</c><00:45:31.760><c> arguments</c><00:45:32.240><c> it</c>

00:45:32.309 --> 00:45:32.319 align:start position:0%
whatever this fn is and the arguments it
 

00:45:32.319 --> 00:45:33.589 align:start position:0%
whatever this fn is and the arguments it
passes

00:45:33.589 --> 00:45:33.599 align:start position:0%
passes
 

00:45:33.599 --> 00:45:37.190 align:start position:0%
passes
are<00:45:33.760><c> the</c><00:45:34.000><c> trap</c><00:45:34.319><c> frame</c><00:45:34.640><c> and</c><00:45:34.800><c> the</c><00:45:35.200><c> user</c>

00:45:37.190 --> 00:45:37.200 align:start position:0%
are the trap frame and the user
 

00:45:37.200 --> 00:45:40.790 align:start position:0%
are the trap frame and the user
page<00:45:37.599><c> table</c><00:45:38.480><c> and</c><00:45:38.720><c> so</c><00:45:39.599><c> in</c><00:45:39.839><c> c</c><00:45:40.079><c> code</c><00:45:40.400><c> when</c><00:45:40.560><c> you</c>

00:45:40.790 --> 00:45:40.800 align:start position:0%
page table and so in c code when you
 

00:45:40.800 --> 00:45:42.550 align:start position:0%
page table and so in c code when you
call<00:45:41.040><c> a</c><00:45:41.119><c> function</c><00:45:41.599><c> the</c><00:45:41.680><c> first</c><00:45:41.920><c> argument</c><00:45:42.319><c> goes</c>

00:45:42.550 --> 00:45:42.560 align:start position:0%
call a function the first argument goes
 

00:45:42.560 --> 00:45:42.950 align:start position:0%
call a function the first argument goes
into

00:45:42.950 --> 00:45:42.960 align:start position:0%
into
 

00:45:42.960 --> 00:45:46.630 align:start position:0%
into
a<00:45:43.119><c> zero</c><00:45:44.079><c> that's</c><00:45:44.400><c> basically</c><00:45:44.800><c> y</c><00:45:44.800><c> why</c><00:45:45.040><c> a0</c>

00:45:46.630 --> 00:45:46.640 align:start position:0%
a zero that's basically y why a0
 

00:45:46.640 --> 00:45:49.109 align:start position:0%
a zero that's basically y why a0
held<00:45:46.880><c> a</c><00:45:46.960><c> pointer</c><00:45:47.200><c> to</c><00:45:47.280><c> the</c><00:45:47.359><c> trap</c><00:45:47.680><c> frame</c><00:45:49.040><c> and</c>

00:45:49.109 --> 00:45:49.119 align:start position:0%
held a pointer to the trap frame and
 

00:45:49.119 --> 00:45:51.270 align:start position:0%
held a pointer to the trap frame and
this<00:45:49.440><c> function</c><00:45:49.839><c> its</c><00:45:50.079><c> value</c><00:45:50.480><c> is</c><00:45:50.560><c> set</c><00:45:50.800><c> up</c><00:45:50.960><c> here</c>

00:45:51.270 --> 00:45:51.280 align:start position:0%
this function its value is set up here
 

00:45:51.280 --> 00:45:52.550 align:start position:0%
this function its value is set up here
to<00:45:51.440><c> be</c>

00:45:52.550 --> 00:45:52.560 align:start position:0%
to be
 

00:45:52.560 --> 00:45:55.270 align:start position:0%
to be
in<00:45:52.720><c> that</c><00:45:52.960><c> trampoline</c><00:45:53.599><c> page</c><00:45:54.000><c> towards</c><00:45:54.319><c> the</c><00:45:54.560><c> end</c>

00:45:55.270 --> 00:45:55.280 align:start position:0%
in that trampoline page towards the end
 

00:45:55.280 --> 00:45:59.750 align:start position:0%
in that trampoline page towards the end
that<00:45:55.520><c> code</c><00:45:55.839><c> i</c><00:45:56.000><c> showed</c><00:45:56.240><c> you</c>

00:45:59.750 --> 00:45:59.760 align:start position:0%
 
 

00:45:59.760 --> 00:46:03.910 align:start position:0%
 
this<00:46:00.000><c> code</c><00:46:02.160><c> is</c><00:46:02.319><c> that</c><00:46:02.640><c> uh</c>

00:46:03.910 --> 00:46:03.920 align:start position:0%
this code is that uh
 

00:46:03.920 --> 00:46:07.670 align:start position:0%
this code is that uh
is<00:46:04.079><c> that</c><00:46:04.160><c> a</c><00:46:04.240><c> good</c><00:46:04.400><c> answer</c><00:46:06.000><c> yes</c><00:46:06.400><c> thanks</c>

00:46:07.670 --> 00:46:07.680 align:start position:0%
is that a good answer yes thanks
 

00:46:07.680 --> 00:46:10.550 align:start position:0%
is that a good answer yes thanks
i'm<00:46:08.000><c> sorry</c><00:46:08.319><c> i</c><00:46:08.560><c> also</c><00:46:09.359><c> was</c><00:46:09.520><c> confused</c><00:46:10.000><c> about</c><00:46:10.240><c> that</c>

00:46:10.550 --> 00:46:10.560 align:start position:0%
i'm sorry i also was confused about that
 

00:46:10.560 --> 00:46:10.950 align:start position:0%
i'm sorry i also was confused about that
i<00:46:10.640><c> was</c>

00:46:10.950 --> 00:46:10.960 align:start position:0%
i was
 

00:46:10.960 --> 00:46:13.190 align:start position:0%
i was
not<00:46:11.119><c> sure</c><00:46:11.920><c> so</c><00:46:12.079><c> when</c><00:46:12.240><c> you</c><00:46:12.400><c> start</c><00:46:12.880><c> when</c><00:46:13.040><c> you</c>

00:46:13.190 --> 00:46:13.200 align:start position:0%
not sure so when you start when you
 

00:46:13.200 --> 00:46:15.270 align:start position:0%
not sure so when you start when you
start<00:46:13.440><c> your</c><00:46:13.920><c> process</c>

00:46:15.270 --> 00:46:15.280 align:start position:0%
start your process
 

00:46:15.280 --> 00:46:17.270 align:start position:0%
start your process
and<00:46:15.839><c> it's</c><00:46:16.160><c> it's</c><00:46:16.319><c> good</c><00:46:16.560><c> and</c><00:46:16.640><c> running</c><00:46:16.960><c> and</c><00:46:17.040><c> then</c>

00:46:17.270 --> 00:46:17.280 align:start position:0%
and it's it's good and running and then
 

00:46:17.280 --> 00:46:18.550 align:start position:0%
and it's it's good and running and then
at<00:46:17.359><c> some</c><00:46:17.520><c> point</c><00:46:17.839><c> it</c><00:46:17.920><c> doesn't</c>

00:46:18.550 --> 00:46:18.560 align:start position:0%
at some point it doesn't
 

00:46:18.560 --> 00:46:21.589 align:start position:0%
at some point it doesn't
equal<00:46:19.200><c> i</c><00:46:19.359><c> guess</c><00:46:19.680><c> in</c><00:46:19.760><c> some</c><00:46:20.160><c> or</c><00:46:21.040><c> something</c><00:46:21.520><c> and</c>

00:46:21.589 --> 00:46:21.599 align:start position:0%
equal i guess in some or something and
 

00:46:21.599 --> 00:46:23.510 align:start position:0%
equal i guess in some or something and
then

00:46:23.510 --> 00:46:23.520 align:start position:0%
then
 

00:46:23.520 --> 00:46:26.309 align:start position:0%
then
when<00:46:23.760><c> did</c><00:46:23.920><c> you</c><00:46:24.160><c> call</c><00:46:24.720><c> this</c><00:46:25.040><c> return</c><00:46:25.520><c> function</c>

00:46:26.309 --> 00:46:26.319 align:start position:0%
when did you call this return function
 

00:46:26.319 --> 00:46:26.710 align:start position:0%
when did you call this return function
because

00:46:26.710 --> 00:46:26.720 align:start position:0%
because
 

00:46:26.720 --> 00:46:28.630 align:start position:0%
because
it<00:46:26.880><c> should</c><00:46:27.119><c> have</c><00:46:27.280><c> been</c><00:46:27.520><c> called</c><00:46:27.920><c> before</c><00:46:28.319><c> the</c>

00:46:28.630 --> 00:46:28.640 align:start position:0%
it should have been called before the
 

00:46:28.640 --> 00:46:29.910 align:start position:0%
it should have been called before the
call

00:46:29.910 --> 00:46:29.920 align:start position:0%
call
 

00:46:29.920 --> 00:46:33.109 align:start position:0%
call
but<00:46:30.079><c> it</c><00:46:30.160><c> didn't</c><00:46:30.720><c> return</c><00:46:31.200><c> from</c><00:46:32.800><c> you</c><00:46:32.880><c> didn't</c>

00:46:33.109 --> 00:46:33.119 align:start position:0%
but it didn't return from you didn't
 

00:46:33.119 --> 00:46:34.390 align:start position:0%
but it didn't return from you didn't
return<00:46:33.440><c> before</c>

00:46:34.390 --> 00:46:34.400 align:start position:0%
return before
 

00:46:34.400 --> 00:46:35.670 align:start position:0%
return before
i<00:46:34.560><c> i</c><00:46:34.640><c> don't</c><00:46:34.800><c> know</c><00:46:34.960><c> i</c><00:46:35.119><c> don't</c><00:46:35.200><c> understand</c><00:46:35.520><c> what</c>

00:46:35.670 --> 00:46:35.680 align:start position:0%
i i don't know i don't understand what
 

00:46:35.680 --> 00:46:38.950 align:start position:0%
i i don't know i don't understand what
you<00:46:35.760><c> call</c><00:46:35.920><c> the</c><00:46:36.319><c> either</c><00:46:36.960><c> trafford</c>

00:46:38.950 --> 00:46:38.960 align:start position:0%
you call the either trafford
 

00:46:38.960 --> 00:46:40.870 align:start position:0%
you call the either trafford
okay<00:46:39.680><c> well</c><00:46:39.839><c> maybe</c><00:46:40.079><c> one</c><00:46:40.319><c> answer</c><00:46:40.560><c> to</c><00:46:40.720><c> this</c>

00:46:40.870 --> 00:46:40.880 align:start position:0%
okay well maybe one answer to this
 

00:46:40.880 --> 00:46:42.069 align:start position:0%
okay well maybe one answer to this
question<00:46:41.440><c> is</c><00:46:41.520><c> that</c>

00:46:42.069 --> 00:46:42.079 align:start position:0%
question is that
 

00:46:42.079 --> 00:46:46.710 align:start position:0%
question is that
the<00:46:42.240><c> kernel</c><00:46:43.839><c> always</c><00:46:44.640><c> or</c><00:46:44.800><c> the</c><00:46:45.040><c> the</c><00:46:45.200><c> machine</c>

00:46:46.710 --> 00:46:46.720 align:start position:0%
the kernel always or the the machine
 

00:46:46.720 --> 00:46:49.750 align:start position:0%
the kernel always or the the machine
boots<00:46:47.119><c> up</c><00:46:47.680><c> in</c><00:46:47.839><c> the</c><00:46:48.000><c> kernel</c>

00:46:49.750 --> 00:46:49.760 align:start position:0%
boots up in the kernel
 

00:46:49.760 --> 00:46:51.109 align:start position:0%
boots up in the kernel
so<00:46:50.000><c> so</c><00:46:50.160><c> when</c><00:46:50.240><c> the</c><00:46:50.319><c> machine</c><00:46:50.560><c> starts</c><00:46:50.880><c> it's</c><00:46:51.040><c> in</c>

00:46:51.109 --> 00:46:51.119 align:start position:0%
so so when the machine starts it's in
 

00:46:51.119 --> 00:46:53.589 align:start position:0%
so so when the machine starts it's in
the<00:46:51.200><c> kernel</c><00:46:52.000><c> anytime</c>

00:46:53.589 --> 00:46:53.599 align:start position:0%
the kernel anytime
 

00:46:53.599 --> 00:46:56.790 align:start position:0%
the kernel anytime
the<00:46:53.839><c> only</c><00:46:54.160><c> way</c><00:46:54.400><c> to</c><00:46:54.480><c> get</c><00:46:54.640><c> into</c><00:46:54.880><c> user</c><00:46:55.280><c> space</c>

00:46:56.790 --> 00:46:56.800 align:start position:0%
the only way to get into user space
 

00:46:56.800 --> 00:46:58.630 align:start position:0%
the only way to get into user space
you<00:46:56.880><c> know</c><00:46:57.040><c> the</c><00:46:57.200><c> very</c><00:46:57.440><c> first</c><00:46:57.760><c> time</c><00:46:58.160><c> or</c><00:46:58.480><c> when</c>

00:46:58.630 --> 00:46:58.640 align:start position:0%
you know the very first time or when
 

00:46:58.640 --> 00:47:01.190 align:start position:0%
you know the very first time or when
returning<00:46:59.280><c> from</c><00:46:59.599><c> a</c><00:46:59.760><c> system</c><00:47:00.160><c> call</c>

00:47:01.190 --> 00:47:01.200 align:start position:0%
returning from a system call
 

00:47:01.200 --> 00:47:03.589 align:start position:0%
returning from a system call
is<00:47:01.599><c> in</c><00:47:01.760><c> fact</c><00:47:02.240><c> to</c><00:47:02.480><c> execute</c><00:47:02.880><c> this</c><00:47:03.119><c> s-red</c>

00:47:03.589 --> 00:47:03.599 align:start position:0%
is in fact to execute this s-red
 

00:47:03.599 --> 00:47:04.950 align:start position:0%
is in fact to execute this s-red
instruction

00:47:04.950 --> 00:47:04.960 align:start position:0%
instruction
 

00:47:04.960 --> 00:47:07.510 align:start position:0%
instruction
that<00:47:05.599><c> that</c><00:47:06.240><c> this</c><00:47:06.400><c> escrow</c><00:47:06.800><c> instruction</c><00:47:07.280><c> is</c><00:47:07.359><c> the</c>

00:47:07.510 --> 00:47:07.520 align:start position:0%
that that this escrow instruction is the
 

00:47:07.520 --> 00:47:08.950 align:start position:0%
that that this escrow instruction is the
way<00:47:07.680><c> that</c><00:47:07.839><c> the</c><00:47:07.920><c> risk</c><00:47:08.240><c> find</c>

00:47:08.950 --> 00:47:08.960 align:start position:0%
way that the risk find
 

00:47:08.960 --> 00:47:11.109 align:start position:0%
way that the risk find
five<00:47:09.280><c> defines</c><00:47:10.079><c> to</c><00:47:10.319><c> transition</c><00:47:10.880><c> from</c>

00:47:11.109 --> 00:47:11.119 align:start position:0%
five defines to transition from
 

00:47:11.119 --> 00:47:12.550 align:start position:0%
five defines to transition from
supervisor<00:47:11.760><c> mode</c>

00:47:12.550 --> 00:47:12.560 align:start position:0%
supervisor mode
 

00:47:12.560 --> 00:47:16.230 align:start position:0%
supervisor mode
into<00:47:12.800><c> user</c><00:47:13.200><c> mode</c><00:47:14.880><c> and</c><00:47:15.040><c> so</c>

00:47:16.230 --> 00:47:16.240 align:start position:0%
into user mode and so
 

00:47:16.240 --> 00:47:19.109 align:start position:0%
into user mode and so
before<00:47:16.960><c> any</c><00:47:17.200><c> user</c><00:47:17.440><c> code</c><00:47:17.680><c> ever</c><00:47:17.920><c> executes</c><00:47:18.960><c> the</c>

00:47:19.109 --> 00:47:19.119 align:start position:0%
before any user code ever executes the
 

00:47:19.119 --> 00:47:20.230 align:start position:0%
before any user code ever executes the
kernel

00:47:20.230 --> 00:47:20.240 align:start position:0%
kernel
 

00:47:20.240 --> 00:47:21.910 align:start position:0%
kernel
executes<00:47:20.720><c> the</c><00:47:20.800><c> code</c><00:47:21.040><c> i'm</c><00:47:21.200><c> showing</c><00:47:21.440><c> you</c><00:47:21.599><c> here</c>

00:47:21.910 --> 00:47:21.920 align:start position:0%
executes the code i'm showing you here
 

00:47:21.920 --> 00:47:25.109 align:start position:0%
executes the code i'm showing you here
in<00:47:22.079><c> these</c><00:47:22.720><c> these</c><00:47:22.960><c> two</c><00:47:23.200><c> editor</c><00:47:23.520><c> buffers</c>

00:47:25.109 --> 00:47:25.119 align:start position:0%
in these these two editor buffers
 

00:47:25.119 --> 00:47:27.750 align:start position:0%
in these these two editor buffers
that<00:47:25.359><c> set</c><00:47:25.599><c> up</c><00:47:25.760><c> all</c><00:47:25.839><c> kinds</c><00:47:26.079><c> of</c><00:47:26.240><c> things</c><00:47:26.720><c> like</c>

00:47:27.750 --> 00:47:27.760 align:start position:0%
that set up all kinds of things like
 

00:47:27.760 --> 00:47:28.710 align:start position:0%
that set up all kinds of things like
scratch<00:47:28.480><c> and</c>

00:47:28.710 --> 00:47:28.720 align:start position:0%
scratch and
 

00:47:28.720 --> 00:47:33.190 align:start position:0%
scratch and
st<00:47:29.119><c> back</c>

00:47:33.190 --> 00:47:33.200 align:start position:0%
 
 

00:47:33.200 --> 00:47:36.630 align:start position:0%
 
okay<00:47:33.520><c> i</c><00:47:33.680><c> see</c><00:47:34.079><c> thank</c><00:47:34.319><c> you</c><00:47:35.119><c> you're</c><00:47:35.280><c> welcome</c>

00:47:36.630 --> 00:47:36.640 align:start position:0%
okay i see thank you you're welcome
 

00:47:36.640 --> 00:47:38.630 align:start position:0%
okay i see thank you you're welcome
oh<00:47:37.040><c> i</c><00:47:37.119><c> have</c><00:47:37.359><c> a</c><00:47:37.440><c> question</c><00:47:37.920><c> i'm</c><00:47:38.000><c> not</c><00:47:38.160><c> sure</c><00:47:38.319><c> if</c><00:47:38.480><c> we</c>

00:47:38.630 --> 00:47:38.640 align:start position:0%
oh i have a question i'm not sure if we
 

00:47:38.640 --> 00:47:40.390 align:start position:0%
oh i have a question i'm not sure if we
touched<00:47:39.040><c> on</c><00:47:39.119><c> this</c><00:47:39.440><c> or</c><00:47:39.680><c> if</c><00:47:39.839><c> i'm</c><00:47:40.000><c> like</c><00:47:40.240><c> you</c><00:47:40.319><c> know</c>

00:47:40.390 --> 00:47:40.400 align:start position:0%
touched on this or if i'm like you know
 

00:47:40.400 --> 00:47:41.510 align:start position:0%
touched on this or if i'm like you know
i<00:47:40.559><c> missed</c><00:47:40.800><c> it</c><00:47:40.960><c> but</c>

00:47:41.510 --> 00:47:41.520 align:start position:0%
i missed it but
 

00:47:41.520 --> 00:47:43.589 align:start position:0%
i missed it but
uh<00:47:41.839><c> when</c><00:47:42.000><c> we</c><00:47:42.240><c> called</c><00:47:42.480><c> the</c><00:47:42.640><c> e-call</c><00:47:43.040><c> instruction</c>

00:47:43.589 --> 00:47:43.599 align:start position:0%
uh when we called the e-call instruction
 

00:47:43.599 --> 00:47:45.109 align:start position:0%
uh when we called the e-call instruction
in<00:47:43.680><c> the</c><00:47:43.760><c> assembly</c><00:47:44.240><c> code</c>

00:47:45.109 --> 00:47:45.119 align:start position:0%
in the assembly code
 

00:47:45.119 --> 00:47:47.190 align:start position:0%
in the assembly code
uh<00:47:45.359><c> what</c><00:47:45.599><c> triggers</c><00:47:46.000><c> the</c><00:47:46.079><c> trampoline</c><00:47:46.720><c> code</c><00:47:47.040><c> to</c>

00:47:47.190 --> 00:47:47.200 align:start position:0%
uh what triggers the trampoline code to
 

00:47:47.200 --> 00:47:48.230 align:start position:0%
uh what triggers the trampoline code to
start<00:47:47.760><c> like</c>

00:47:48.230 --> 00:47:48.240 align:start position:0%
start like
 

00:47:48.240 --> 00:47:51.510 align:start position:0%
start like
is<00:47:48.400><c> it</c><00:47:48.480><c> the</c><00:47:48.640><c> switch</c><00:47:49.040><c> of</c><00:47:49.200><c> the</c><00:47:50.000><c> um</c><00:47:50.480><c> cpu</c><00:47:50.960><c> mode</c><00:47:51.280><c> from</c>

00:47:51.510 --> 00:47:51.520 align:start position:0%
is it the switch of the um cpu mode from
 

00:47:51.520 --> 00:47:52.549 align:start position:0%
is it the switch of the um cpu mode from
supervisor

00:47:52.549 --> 00:47:52.559 align:start position:0%
supervisor
 

00:47:52.559 --> 00:47:54.390 align:start position:0%
supervisor
i'm<00:47:52.640><c> sorry</c><00:47:52.880><c> from</c><00:47:53.119><c> user</c><00:47:53.520><c> supervisor</c><00:47:54.160><c> is</c><00:47:54.319><c> it</c>

00:47:54.390 --> 00:47:54.400 align:start position:0%
i'm sorry from user supervisor is it
 

00:47:54.400 --> 00:47:55.589 align:start position:0%
i'm sorry from user supervisor is it
something<00:47:54.720><c> else</c>

00:47:55.589 --> 00:47:55.599 align:start position:0%
something else
 

00:47:55.599 --> 00:47:59.430 align:start position:0%
something else
okay<00:47:56.319><c> um</c><00:47:58.079><c> so</c><00:47:58.240><c> the</c><00:47:58.319><c> code</c><00:47:58.559><c> we're</c><00:47:58.720><c> executing</c><00:47:59.280><c> is</c>

00:47:59.430 --> 00:47:59.440 align:start position:0%
okay um so the code we're executing is
 

00:47:59.440 --> 00:48:00.950 align:start position:0%
okay um so the code we're executing is
this<00:47:59.680><c> e-call</c>

00:48:00.950 --> 00:48:00.960 align:start position:0%
this e-call
 

00:48:00.960 --> 00:48:03.430 align:start position:0%
this e-call
the<00:48:01.200><c> shell</c><00:48:01.520><c> executes</c><00:48:01.920><c> it</c><00:48:02.079><c> in</c><00:48:02.160><c> user</c><00:48:02.480><c> space</c><00:48:03.280><c> and</c>

00:48:03.430 --> 00:48:03.440 align:start position:0%
the shell executes it in user space and
 

00:48:03.440 --> 00:48:05.030 align:start position:0%
the shell executes it in user space and
e-call<00:48:03.839><c> does</c><00:48:04.000><c> a</c><00:48:04.079><c> couple</c><00:48:04.400><c> things</c>

00:48:05.030 --> 00:48:05.040 align:start position:0%
e-call does a couple things
 

00:48:05.040 --> 00:48:07.910 align:start position:0%
e-call does a couple things
the<00:48:05.280><c> e-call</c><00:48:05.760><c> instruction</c><00:48:06.960><c> sets</c><00:48:07.280><c> the</c><00:48:07.440><c> mode</c><00:48:07.760><c> to</c>

00:48:07.910 --> 00:48:07.920 align:start position:0%
the e-call instruction sets the mode to
 

00:48:07.920 --> 00:48:09.430 align:start position:0%
the e-call instruction sets the mode to
supervisor

00:48:09.430 --> 00:48:09.440 align:start position:0%
supervisor
 

00:48:09.440 --> 00:48:13.589 align:start position:0%
supervisor
and<00:48:10.640><c> the</c><00:48:10.800><c> e-call</c><00:48:11.280><c> instruction</c>

00:48:13.589 --> 00:48:13.599 align:start position:0%
and the e-call instruction
 

00:48:13.599 --> 00:48:16.870 align:start position:0%
and the e-call instruction
saves<00:48:14.000><c> the</c><00:48:14.160><c> program</c><00:48:14.559><c> counter</c><00:48:14.960><c> and</c><00:48:15.119><c> epc</c><00:48:16.400><c> and</c>

00:48:16.870 --> 00:48:16.880 align:start position:0%
saves the program counter and epc and
 

00:48:16.880 --> 00:48:19.030 align:start position:0%
saves the program counter and epc and
the<00:48:16.960><c> e-call</c><00:48:17.440><c> instruction</c><00:48:18.160><c> sets</c><00:48:18.559><c> the</c><00:48:18.720><c> program</c>

00:48:19.030 --> 00:48:19.040 align:start position:0%
the e-call instruction sets the program
 

00:48:19.040 --> 00:48:21.670 align:start position:0%
the e-call instruction sets the program
counter<00:48:19.440><c> equal</c><00:48:19.760><c> to</c>

00:48:21.670 --> 00:48:21.680 align:start position:0%
counter equal to
 

00:48:21.680 --> 00:48:24.790 align:start position:0%
counter equal to
the<00:48:21.760><c> control</c><00:48:22.160><c> register</c><00:48:22.640><c> called</c><00:48:22.960><c> st</c><00:48:23.359><c> vac</c><00:48:24.240><c> so</c>

00:48:24.790 --> 00:48:24.800 align:start position:0%
the control register called st vac so
 

00:48:24.800 --> 00:48:26.069 align:start position:0%
the control register called st vac so
and<00:48:24.880><c> that</c><00:48:25.119><c> seebeck</c><00:48:25.520><c> is</c><00:48:25.599><c> one</c><00:48:25.680><c> of</c><00:48:25.760><c> the</c><00:48:25.839><c> many</c>

00:48:26.069 --> 00:48:26.079 align:start position:0%
and that seebeck is one of the many
 

00:48:26.079 --> 00:48:27.750 align:start position:0%
and that seebeck is one of the many
things<00:48:26.319><c> which</c><00:48:26.559><c> the</c><00:48:26.640><c> kernel</c><00:48:27.040><c> sets</c><00:48:27.359><c> up</c><00:48:27.440><c> before</c>

00:48:27.750 --> 00:48:27.760 align:start position:0%
things which the kernel sets up before
 

00:48:27.760 --> 00:48:31.589 align:start position:0%
things which the kernel sets up before
entering<00:48:28.000><c> user</c><00:48:28.319><c> space</c>

00:48:31.589 --> 00:48:31.599 align:start position:0%
 
 

00:48:31.599 --> 00:48:34.150 align:start position:0%
 
and<00:48:31.760><c> so</c><00:48:31.920><c> here's</c><00:48:32.240><c> sdvac</c><00:48:32.800><c> scpec</c><00:48:33.280><c> is</c><00:48:33.440><c> just</c><00:48:34.000><c> the</c>

00:48:34.150 --> 00:48:34.160 align:start position:0%
and so here's sdvac scpec is just the
 

00:48:34.160 --> 00:48:35.349 align:start position:0%
and so here's sdvac scpec is just the
kernel<00:48:34.559><c> set</c><00:48:34.880><c> it</c>

00:48:35.349 --> 00:48:35.359 align:start position:0%
kernel set it
 

00:48:35.359 --> 00:48:37.510 align:start position:0%
kernel set it
to<00:48:35.599><c> the</c><00:48:35.680><c> beginning</c><00:48:36.000><c> of</c><00:48:36.079><c> the</c><00:48:36.240><c> trampoline</c><00:48:36.880><c> page</c>

00:48:37.510 --> 00:48:37.520 align:start position:0%
to the beginning of the trampoline page
 

00:48:37.520 --> 00:48:38.710 align:start position:0%
to the beginning of the trampoline page
that<00:48:37.760><c> is</c>

00:48:38.710 --> 00:48:38.720 align:start position:0%
that is
 

00:48:38.720 --> 00:48:41.910 align:start position:0%
that is
this<00:48:38.960><c> address</c><00:48:39.280><c> here</c><00:48:41.040><c> so</c><00:48:41.200><c> that</c><00:48:41.280><c> when</c><00:48:41.520><c> e-call</c>

00:48:41.910 --> 00:48:41.920 align:start position:0%
this address here so that when e-call
 

00:48:41.920 --> 00:48:43.510 align:start position:0%
this address here so that when e-call
happens<00:48:42.319><c> e-call</c><00:48:42.800><c> just</c>

00:48:43.510 --> 00:48:43.520 align:start position:0%
happens e-call just
 

00:48:43.520 --> 00:48:45.430 align:start position:0%
happens e-call just
copies<00:48:43.920><c> s-t-vec</c><00:48:44.559><c> into</c><00:48:44.720><c> the</c><00:48:44.800><c> program</c><00:48:45.119><c> counter</c>

00:48:45.430 --> 00:48:45.440 align:start position:0%
copies s-t-vec into the program counter
 

00:48:45.440 --> 00:48:47.349 align:start position:0%
copies s-t-vec into the program counter
and<00:48:45.599><c> continues</c><00:48:46.240><c> but</c><00:48:46.480><c> now</c>

00:48:47.349 --> 00:48:47.359 align:start position:0%
and continues but now
 

00:48:47.359 --> 00:48:49.510 align:start position:0%
and continues but now
and<00:48:47.520><c> the</c><00:48:47.599><c> program</c><00:48:47.920><c> counter</c><00:48:48.240><c> is</c><00:48:48.400><c> executing</c>

00:48:49.510 --> 00:48:49.520 align:start position:0%
and the program counter is executing
 

00:48:49.520 --> 00:48:54.549 align:start position:0%
and the program counter is executing
this<00:48:49.680><c> address</c><00:48:50.240><c> in</c><00:48:50.319><c> the</c><00:48:50.400><c> trampoline</c><00:48:50.960><c> page</c>

00:48:54.549 --> 00:48:54.559 align:start position:0%
 
 

00:48:54.559 --> 00:49:00.390 align:start position:0%
 
that<00:48:54.720><c> clarifies</c><00:48:55.280><c> it</c><00:48:55.440><c> thank</c><00:48:55.680><c> you</c><00:48:56.960><c> okay</c>

00:49:00.390 --> 00:49:00.400 align:start position:0%
 
 

00:49:00.400 --> 00:49:03.990 align:start position:0%
 
i<00:49:00.800><c> also</c><00:49:01.040><c> have</c><00:49:01.200><c> a</c><00:49:01.359><c> question</c><00:49:02.640><c> um</c>

00:49:03.990 --> 00:49:04.000 align:start position:0%
i also have a question um
 

00:49:04.000 --> 00:49:07.030 align:start position:0%
i also have a question um
why<00:49:05.280><c> so</c><00:49:05.520><c> some</c><00:49:05.760><c> of</c><00:49:05.839><c> the</c><00:49:06.079><c> registers</c><00:49:06.640><c> that</c><00:49:06.800><c> are</c>

00:49:07.030 --> 00:49:07.040 align:start position:0%
why so some of the registers that are
 

00:49:07.040 --> 00:49:08.150 align:start position:0%
why so some of the registers that are
saved

00:49:08.150 --> 00:49:08.160 align:start position:0%
saved
 

00:49:08.160 --> 00:49:11.910 align:start position:0%
saved
in<00:49:08.319><c> the</c><00:49:08.480><c> trap</c><00:49:08.800><c> frame</c><00:49:09.599><c> should</c><00:49:09.920><c> not</c><00:49:10.640><c> um</c>

00:49:11.910 --> 00:49:11.920 align:start position:0%
in the trap frame should not um
 

00:49:11.920 --> 00:49:15.030 align:start position:0%
in the trap frame should not um
are<00:49:12.160><c> also</c><00:49:13.440><c> registers</c><00:49:14.079><c> that</c><00:49:14.480><c> um</c>

00:49:15.030 --> 00:49:15.040 align:start position:0%
are also registers that um
 

00:49:15.040 --> 00:49:18.069 align:start position:0%
are also registers that um
the<00:49:15.280><c> user</c><00:49:15.520><c> program</c><00:49:15.920><c> had</c><00:49:16.160><c> access</c><00:49:16.480><c> to</c>

00:49:18.069 --> 00:49:18.079 align:start position:0%
the user program had access to
 

00:49:18.079 --> 00:49:21.109 align:start position:0%
the user program had access to
why<00:49:19.599><c> why</c><00:49:20.079><c> why</c><00:49:20.319><c> did</c><00:49:20.559><c> we</c>

00:49:21.109 --> 00:49:21.119 align:start position:0%
why why why did we
 

00:49:21.119 --> 00:49:24.549 align:start position:0%
why why why did we
need<00:49:21.599><c> to</c><00:49:23.200><c> um</c>

00:49:24.549 --> 00:49:24.559 align:start position:0%
need to um
 

00:49:24.559 --> 00:49:27.990 align:start position:0%
need to um
use<00:49:26.400><c> a</c><00:49:26.559><c> new</c>

00:49:27.990 --> 00:49:28.000 align:start position:0%
use a new
 

00:49:28.000 --> 00:49:30.870 align:start position:0%
use a new
region<00:49:28.400><c> in</c><00:49:28.480><c> memory</c><00:49:28.960><c> and</c><00:49:29.040><c> not</c><00:49:29.280><c> use</c><00:49:29.599><c> the</c><00:49:30.240><c> program</c>

00:49:30.870 --> 00:49:30.880 align:start position:0%
region in memory and not use the program
 

00:49:30.880 --> 00:49:34.630 align:start position:0%
region in memory and not use the program
stack

00:49:34.630 --> 00:49:34.640 align:start position:0%
 
 

00:49:34.640 --> 00:49:37.430 align:start position:0%
 
okay<00:49:35.119><c> um</c><00:49:35.760><c> well</c><00:49:36.480><c> there's</c><00:49:36.720><c> maybe</c><00:49:36.960><c> two</c><00:49:37.119><c> questions</c>

00:49:37.430 --> 00:49:37.440 align:start position:0%
okay um well there's maybe two questions
 

00:49:37.440 --> 00:49:39.030 align:start position:0%
okay um well there's maybe two questions
here<00:49:37.680><c> one</c><00:49:37.839><c> is</c>

00:49:39.030 --> 00:49:39.040 align:start position:0%
here one is
 

00:49:39.040 --> 00:49:41.190 align:start position:0%
here one is
maybe<00:49:39.280><c> why</c><00:49:39.440><c> do</c><00:49:39.599><c> we</c><00:49:39.680><c> have</c><00:49:39.760><c> to</c><00:49:39.920><c> save</c><00:49:41.040><c> the</c>

00:49:41.190 --> 00:49:41.200 align:start position:0%
maybe why do we have to save the
 

00:49:41.200 --> 00:49:43.750 align:start position:0%
maybe why do we have to save the
registers<00:49:41.760><c> at</c><00:49:41.920><c> all</c>

00:49:43.750 --> 00:49:43.760 align:start position:0%
registers at all
 

00:49:43.760 --> 00:49:45.109 align:start position:0%
registers at all
the<00:49:44.000><c> the</c><00:49:44.160><c> reason</c><00:49:44.400><c> why</c><00:49:44.559><c> the</c><00:49:44.640><c> kernel</c><00:49:44.880><c> has</c><00:49:45.040><c> to</c>

00:49:45.109 --> 00:49:45.119 align:start position:0%
the the reason why the kernel has to
 

00:49:45.119 --> 00:49:47.109 align:start position:0%
the the reason why the kernel has to
save<00:49:45.359><c> the</c><00:49:45.440><c> registers</c><00:49:46.079><c> is</c><00:49:46.240><c> that</c><00:49:46.400><c> the</c><00:49:46.480><c> kernel</c>

00:49:47.109 --> 00:49:47.119 align:start position:0%
save the registers is that the kernel
 

00:49:47.119 --> 00:49:50.470 align:start position:0%
save the registers is that the kernel
is<00:49:47.280><c> about</c><00:49:47.440><c> to</c><00:49:47.599><c> run</c><00:49:47.839><c> c</c><00:49:48.079><c> code</c><00:49:48.640><c> that</c><00:49:50.000><c> overwrites</c>

00:49:50.470 --> 00:49:50.480 align:start position:0%
is about to run c code that overwrites
 

00:49:50.480 --> 00:49:52.069 align:start position:0%
is about to run c code that overwrites
those<00:49:50.720><c> registers</c>

00:49:52.069 --> 00:49:52.079 align:start position:0%
those registers
 

00:49:52.079 --> 00:49:54.549 align:start position:0%
those registers
um<00:49:52.880><c> and</c><00:49:53.440><c> if</c><00:49:53.599><c> we</c><00:49:53.680><c> ever</c><00:49:53.839><c> want</c><00:49:54.000><c> to</c><00:49:54.079><c> resume</c><00:49:54.480><c> the</c>

00:49:54.549 --> 00:49:54.559 align:start position:0%
um and if we ever want to resume the
 

00:49:54.559 --> 00:49:56.230 align:start position:0%
um and if we ever want to resume the
user<00:49:54.800><c> code</c><00:49:55.040><c> correctly</c><00:49:55.440><c> we</c><00:49:55.520><c> need</c><00:49:55.680><c> to</c><00:49:55.760><c> resume</c><00:49:56.160><c> it</c>

00:49:56.230 --> 00:49:56.240 align:start position:0%
user code correctly we need to resume it
 

00:49:56.240 --> 00:49:57.430 align:start position:0%
user code correctly we need to resume it
with<00:49:56.480><c> its</c><00:49:56.640><c> registers</c>

00:49:57.430 --> 00:49:57.440 align:start position:0%
with its registers
 

00:49:57.440 --> 00:49:59.670 align:start position:0%
with its registers
having<00:49:57.680><c> their</c><00:49:57.839><c> original</c><00:49:58.240><c> values</c><00:49:59.440><c> that</c><00:49:59.599><c> you</c>

00:49:59.670 --> 00:49:59.680 align:start position:0%
having their original values that you
 

00:49:59.680 --> 00:50:00.950 align:start position:0%
having their original values that you
know<00:49:59.839><c> as</c><00:50:00.000><c> of</c><00:50:00.079><c> when</c><00:50:00.240><c> the</c><00:50:00.319><c> e</c><00:50:00.480><c> call</c>

00:50:00.950 --> 00:50:00.960 align:start position:0%
know as of when the e call
 

00:50:00.960 --> 00:50:03.109 align:start position:0%
know as of when the e call
was<00:50:01.359><c> executed</c><00:50:02.160><c> so</c><00:50:02.319><c> we</c><00:50:02.400><c> have</c><00:50:02.480><c> to</c><00:50:02.559><c> save</c><00:50:02.800><c> all</c><00:50:02.960><c> the</c>

00:50:03.109 --> 00:50:03.119 align:start position:0%
was executed so we have to save all the
 

00:50:03.119 --> 00:50:04.790 align:start position:0%
was executed so we have to save all the
registers

00:50:04.790 --> 00:50:04.800 align:start position:0%
registers
 

00:50:04.800 --> 00:50:07.990 align:start position:0%
registers
in<00:50:04.880><c> the</c><00:50:04.960><c> trap</c><00:50:05.280><c> frame</c><00:50:06.880><c> so</c><00:50:07.040><c> that</c><00:50:07.280><c> later</c><00:50:07.599><c> on</c><00:50:07.839><c> we</c>

00:50:07.990 --> 00:50:08.000 align:start position:0%
in the trap frame so that later on we
 

00:50:08.000 --> 00:50:08.710 align:start position:0%
in the trap frame so that later on we
can<00:50:08.160><c> restore</c>

00:50:08.710 --> 00:50:08.720 align:start position:0%
can restore
 

00:50:08.720 --> 00:50:12.069 align:start position:0%
can restore
all<00:50:08.880><c> of</c><00:50:08.960><c> their</c><00:50:09.119><c> values</c><00:50:10.559><c> just</c><00:50:10.720><c> before</c><00:50:11.599><c> resuming</c>

00:50:12.069 --> 00:50:12.079 align:start position:0%
all of their values just before resuming
 

00:50:12.079 --> 00:50:14.309 align:start position:0%
all of their values just before resuming
the<00:50:12.160><c> user</c><00:50:12.480><c> code</c>

00:50:14.309 --> 00:50:14.319 align:start position:0%
the user code
 

00:50:14.319 --> 00:50:15.510 align:start position:0%
the user code
maybe<00:50:14.480><c> the</c><00:50:14.640><c> other</c><00:50:14.720><c> half</c><00:50:14.880><c> of</c><00:50:14.960><c> your</c><00:50:15.119><c> question</c><00:50:15.440><c> is</c>

00:50:15.510 --> 00:50:15.520 align:start position:0%
maybe the other half of your question is
 

00:50:15.520 --> 00:50:17.670 align:start position:0%
maybe the other half of your question is
how<00:50:15.760><c> come</c><00:50:16.079><c> they're</c><00:50:16.319><c> saved</c><00:50:16.880><c> in</c><00:50:16.960><c> the</c><00:50:17.040><c> crap</c><00:50:17.359><c> frame</c>

00:50:17.670 --> 00:50:17.680 align:start position:0%
how come they're saved in the crap frame
 

00:50:17.680 --> 00:50:19.510 align:start position:0%
how come they're saved in the crap frame
and<00:50:17.760><c> not</c><00:50:18.000><c> on</c><00:50:18.079><c> the</c><00:50:18.160><c> user</c><00:50:18.480><c> stack</c>

00:50:19.510 --> 00:50:19.520 align:start position:0%
and not on the user stack
 

00:50:19.520 --> 00:50:22.069 align:start position:0%
and not on the user stack
um<00:50:20.640><c> the</c><00:50:20.800><c> answer</c><00:50:21.040><c> to</c><00:50:21.119><c> that</c><00:50:21.359><c> is</c><00:50:21.520><c> that</c><00:50:21.680><c> we're</c><00:50:21.920><c> not</c>

00:50:22.069 --> 00:50:22.079 align:start position:0%
um the answer to that is that we're not
 

00:50:22.079 --> 00:50:24.790 align:start position:0%
um the answer to that is that we're not
sure<00:50:22.400><c> the</c><00:50:22.480><c> user</c><00:50:22.720><c> program</c><00:50:23.200><c> even</c><00:50:23.440><c> has</c><00:50:23.680><c> a</c><00:50:23.839><c> stack</c>

00:50:24.790 --> 00:50:24.800 align:start position:0%
sure the user program even has a stack
 

00:50:24.800 --> 00:50:25.829 align:start position:0%
sure the user program even has a stack
there<00:50:24.960><c> are</c><00:50:25.119><c> certainly</c><00:50:25.440><c> programming</c>

00:50:25.829 --> 00:50:25.839 align:start position:0%
there are certainly programming
 

00:50:25.839 --> 00:50:28.790 align:start position:0%
there are certainly programming
languages<00:50:26.319><c> that</c><00:50:27.040><c> don't</c><00:50:27.280><c> have</c><00:50:27.440><c> a</c><00:50:27.599><c> stack</c>

00:50:28.790 --> 00:50:28.800 align:start position:0%
languages that don't have a stack
 

00:50:28.800 --> 00:50:30.470 align:start position:0%
languages that don't have a stack
and<00:50:29.119><c> the</c><00:50:29.200><c> stack</c><00:50:29.520><c> pointer</c><00:50:30.000><c> doesn't</c><00:50:30.240><c> point</c><00:50:30.400><c> to</c>

00:50:30.470 --> 00:50:30.480 align:start position:0%
and the stack pointer doesn't point to
 

00:50:30.480 --> 00:50:32.309 align:start position:0%
and the stack pointer doesn't point to
anything<00:50:30.880><c> in</c><00:50:30.960><c> particular</c><00:50:31.440><c> or</c><00:50:31.760><c> might</c><00:50:31.920><c> be</c><00:50:32.079><c> have</c>

00:50:32.309 --> 00:50:32.319 align:start position:0%
anything in particular or might be have
 

00:50:32.319 --> 00:50:33.349 align:start position:0%
anything in particular or might be have
value<00:50:32.640><c> zero</c>

00:50:33.349 --> 00:50:33.359 align:start position:0%
value zero
 

00:50:33.359 --> 00:50:34.790 align:start position:0%
value zero
there's<00:50:33.680><c> also</c><00:50:33.920><c> programming</c><00:50:34.240><c> languages</c><00:50:34.640><c> that</c>

00:50:34.790 --> 00:50:34.800 align:start position:0%
there's also programming languages that
 

00:50:34.800 --> 00:50:36.870 align:start position:0%
there's also programming languages that
yeah<00:50:35.040><c> they</c><00:50:35.119><c> have</c><00:50:35.200><c> a</c><00:50:35.280><c> stack</c><00:50:35.680><c> but</c><00:50:36.319><c> it's</c><00:50:36.559><c> in</c><00:50:36.640><c> like</c>

00:50:36.870 --> 00:50:36.880 align:start position:0%
yeah they have a stack but it's in like
 

00:50:36.880 --> 00:50:38.470 align:start position:0%
yeah they have a stack but it's in like
a<00:50:36.960><c> format</c><00:50:37.520><c> that's</c>

00:50:38.470 --> 00:50:38.480 align:start position:0%
a format that's
 

00:50:38.480 --> 00:50:39.990 align:start position:0%
a format that's
you<00:50:38.640><c> know</c><00:50:38.800><c> some</c><00:50:38.960><c> weird</c><00:50:39.280><c> format</c><00:50:39.760><c> that</c><00:50:39.920><c> the</c>

00:50:39.990 --> 00:50:40.000 align:start position:0%
you know some weird format that the
 

00:50:40.000 --> 00:50:41.829 align:start position:0%
you know some weird format that the
kernel<00:50:40.319><c> doesn't</c><00:50:40.559><c> understand</c>

00:50:41.829 --> 00:50:41.839 align:start position:0%
kernel doesn't understand
 

00:50:41.839 --> 00:50:43.349 align:start position:0%
kernel doesn't understand
uh<00:50:42.000><c> maybe</c><00:50:42.319><c> because</c><00:50:42.640><c> the</c><00:50:42.960><c> programming</c>

00:50:43.349 --> 00:50:43.359 align:start position:0%
uh maybe because the programming
 

00:50:43.359 --> 00:50:45.430 align:start position:0%
uh maybe because the programming
language<00:50:43.760><c> allocates</c><00:50:44.240><c> its</c><00:50:44.400><c> stack</c><00:50:44.800><c> in</c><00:50:45.040><c> small</c>

00:50:45.430 --> 00:50:45.440 align:start position:0%
language allocates its stack in small
 

00:50:45.440 --> 00:50:46.710 align:start position:0%
language allocates its stack in small
blocks

00:50:46.710 --> 00:50:46.720 align:start position:0%
blocks
 

00:50:46.720 --> 00:50:49.349 align:start position:0%
blocks
uh<00:50:47.040><c> from</c><00:50:47.200><c> the</c><00:50:47.359><c> heap</c><00:50:48.559><c> and</c><00:50:48.800><c> the</c><00:50:48.960><c> programming</c>

00:50:49.349 --> 00:50:49.359 align:start position:0%
uh from the heap and the programming
 

00:50:49.359 --> 00:50:51.349 align:start position:0%
uh from the heap and the programming
language<00:50:49.760><c> runtime</c><00:50:50.319><c> understands</c><00:50:50.720><c> how</c><00:50:50.880><c> to</c>

00:50:51.349 --> 00:50:51.359 align:start position:0%
language runtime understands how to
 

00:50:51.359 --> 00:50:52.710 align:start position:0%
language runtime understands how to
you<00:50:51.520><c> know</c><00:50:51.680><c> use</c><00:50:51.920><c> these</c><00:50:52.079><c> small</c><00:50:52.319><c> blocks</c><00:50:52.640><c> of</c>

00:50:52.710 --> 00:50:52.720 align:start position:0%
you know use these small blocks of
 

00:50:52.720 --> 00:50:54.390 align:start position:0%
you know use these small blocks of
memory<00:50:53.040><c> as</c><00:50:53.119><c> a</c><00:50:53.200><c> stack</c><00:50:53.599><c> but</c>

00:50:54.390 --> 00:50:54.400 align:start position:0%
memory as a stack but
 

00:50:54.400 --> 00:50:57.670 align:start position:0%
memory as a stack but
you<00:50:54.559><c> know</c><00:50:54.640><c> the</c><00:50:54.720><c> kernel</c><00:50:55.040><c> has</c><00:50:55.200><c> no</c><00:50:55.359><c> idea</c>

00:50:57.670 --> 00:50:57.680 align:start position:0%
you know the kernel has no idea
 

00:50:57.680 --> 00:50:59.990 align:start position:0%
you know the kernel has no idea
so<00:50:57.839><c> we</c><00:50:58.880><c> if</c><00:50:59.040><c> we</c><00:50:59.200><c> want</c><00:50:59.359><c> to</c><00:50:59.440><c> be</c><00:50:59.520><c> able</c><00:50:59.599><c> to</c><00:50:59.680><c> run</c><00:50:59.839><c> sort</c>

00:50:59.990 --> 00:51:00.000 align:start position:0%
so we if we want to be able to run sort
 

00:51:00.000 --> 00:51:01.430 align:start position:0%
so we if we want to be able to run sort
of<00:51:00.079><c> arbitrary</c><00:51:00.480><c> user</c><00:51:00.720><c> programs</c><00:51:01.119><c> written</c><00:51:01.359><c> in</c>

00:51:01.430 --> 00:51:01.440 align:start position:0%
of arbitrary user programs written in
 

00:51:01.440 --> 00:51:02.630 align:start position:0%
of arbitrary user programs written in
lots<00:51:01.599><c> of</c><00:51:01.680><c> different</c><00:51:01.839><c> languages</c>

00:51:02.630 --> 00:51:02.640 align:start position:0%
lots of different languages
 

00:51:02.640 --> 00:51:04.309 align:start position:0%
lots of different languages
the<00:51:02.800><c> kernel</c><00:51:03.119><c> can't</c><00:51:03.280><c> make</c><00:51:03.520><c> any</c><00:51:03.680><c> assumptions</c>

00:51:04.309 --> 00:51:04.319 align:start position:0%
the kernel can't make any assumptions
 

00:51:04.319 --> 00:51:05.829 align:start position:0%
the kernel can't make any assumptions
about

00:51:05.829 --> 00:51:05.839 align:start position:0%
about
 

00:51:05.839 --> 00:51:08.870 align:start position:0%
about
what<00:51:06.160><c> parts</c><00:51:06.640><c> of</c><00:51:07.040><c> user</c><00:51:07.359><c> memory</c><00:51:07.839><c> it's</c><00:51:08.000><c> allowed</c>

00:51:08.870 --> 00:51:08.880 align:start position:0%
what parts of user memory it's allowed
 

00:51:08.880 --> 00:51:11.190 align:start position:0%
what parts of user memory it's allowed
exists<00:51:09.440><c> or</c><00:51:09.760><c> valid</c><00:51:10.319><c> or</c><00:51:10.400><c> it's</c><00:51:10.559><c> allowed</c><00:51:10.800><c> to</c><00:51:10.960><c> read</c>

00:51:11.190 --> 00:51:11.200 align:start position:0%
exists or valid or it's allowed to read
 

00:51:11.200 --> 00:51:12.309 align:start position:0%
exists or valid or it's allowed to read
or<00:51:11.280><c> write</c>

00:51:12.309 --> 00:51:12.319 align:start position:0%
or write
 

00:51:12.319 --> 00:51:13.589 align:start position:0%
or write
and<00:51:12.400><c> so</c><00:51:12.559><c> the</c><00:51:12.640><c> kernel</c><00:51:12.960><c> has</c><00:51:13.119><c> to</c><00:51:13.200><c> be</c><00:51:13.280><c> sort</c><00:51:13.440><c> of</c>

00:51:13.589 --> 00:51:13.599 align:start position:0%
and so the kernel has to be sort of
 

00:51:13.599 --> 00:51:15.510 align:start position:0%
and so the kernel has to be sort of
self-contained<00:51:14.400><c> in</c><00:51:14.720><c> saving</c><00:51:15.040><c> and</c><00:51:15.119><c> destroying</c>

00:51:15.510 --> 00:51:15.520 align:start position:0%
self-contained in saving and destroying
 

00:51:15.520 --> 00:51:17.510 align:start position:0%
self-contained in saving and destroying
the<00:51:15.599><c> registers</c>

00:51:17.510 --> 00:51:17.520 align:start position:0%
the registers
 

00:51:17.520 --> 00:51:19.750 align:start position:0%
the registers
that's<00:51:17.760><c> why</c><00:51:17.920><c> the</c><00:51:18.079><c> kernel</c><00:51:19.119><c> saves</c><00:51:19.440><c> this</c><00:51:19.520><c> stuff</c>

00:51:19.750 --> 00:51:19.760 align:start position:0%
that's why the kernel saves this stuff
 

00:51:19.760 --> 00:51:20.549 align:start position:0%
that's why the kernel saves this stuff
in<00:51:19.920><c> its</c><00:51:20.160><c> own</c>

00:51:20.549 --> 00:51:20.559 align:start position:0%
in its own
 

00:51:20.559 --> 00:51:22.950 align:start position:0%
in its own
memory<00:51:20.960><c> in</c><00:51:21.040><c> the</c><00:51:21.119><c> trap</c><00:51:21.359><c> frame</c><00:51:21.680><c> rather</c><00:51:21.920><c> than</c><00:51:22.160><c> in</c>

00:51:22.950 --> 00:51:22.960 align:start position:0%
memory in the trap frame rather than in
 

00:51:22.960 --> 00:51:24.549 align:start position:0%
memory in the trap frame rather than in
user<00:51:23.280><c> memory</c>

00:51:24.549 --> 00:51:24.559 align:start position:0%
user memory
 

00:51:24.559 --> 00:51:29.829 align:start position:0%
user memory
okay

00:51:29.829 --> 00:51:29.839 align:start position:0%
 
 

00:51:29.839 --> 00:51:40.069 align:start position:0%
 
okay<00:51:31.839><c> anything</c><00:51:34.839><c> else</c>

00:51:40.069 --> 00:51:40.079 align:start position:0%
 
 

00:51:40.079 --> 00:51:42.069 align:start position:0%
 
okay<00:51:40.319><c> we're</c><00:51:40.559><c> still</c><00:51:41.200><c> right</c><00:51:41.440><c> at</c><00:51:41.520><c> the</c><00:51:41.599><c> beginning</c>

00:51:42.069 --> 00:51:42.079 align:start position:0%
okay we're still right at the beginning
 

00:51:42.079 --> 00:51:44.390 align:start position:0%
okay we're still right at the beginning
of<00:51:42.319><c> um</c>

00:51:44.390 --> 00:51:44.400 align:start position:0%
of um
 

00:51:44.400 --> 00:51:48.069 align:start position:0%
of um
the<00:51:44.559><c> code</c><00:51:46.079><c> in</c><00:51:46.960><c> trampoline</c>

00:51:48.069 --> 00:51:48.079 align:start position:0%
the code in trampoline
 

00:51:48.079 --> 00:51:51.270 align:start position:0%
the code in trampoline
um<00:51:48.400><c> this</c><00:51:48.640><c> code</c><00:51:49.040><c> is</c><00:51:50.319><c> unfortunately</c><00:51:50.880><c> we</c><00:51:50.960><c> refer</c>

00:51:51.270 --> 00:51:51.280 align:start position:0%
um this code is unfortunately we refer
 

00:51:51.280 --> 00:51:52.309 align:start position:0%
um this code is unfortunately we refer
to<00:51:51.440><c> it</c><00:51:51.520><c> both</c>

00:51:52.309 --> 00:51:52.319 align:start position:0%
to it both
 

00:51:52.319 --> 00:51:56.470 align:start position:0%
to it both
as<00:51:52.559><c> uservac</c><00:51:53.680><c> um</c><00:51:54.800><c> and</c><00:51:55.040><c> as</c><00:51:55.200><c> the</c><00:51:55.280><c> trampoline</c><00:51:55.839><c> code</c>

00:51:56.470 --> 00:51:56.480 align:start position:0%
as uservac um and as the trampoline code
 

00:51:56.480 --> 00:51:58.470 align:start position:0%
as uservac um and as the trampoline code
we<00:51:56.640><c> barely</c><00:51:56.960><c> started</c><00:51:57.280><c> executing</c><00:51:57.760><c> it</c><00:51:58.079><c> i</c><00:51:58.160><c> think</c><00:51:58.319><c> i</c>

00:51:58.470 --> 00:51:58.480 align:start position:0%
we barely started executing it i think i
 

00:51:58.480 --> 00:52:00.470 align:start position:0%
we barely started executing it i think i
just<00:51:58.640><c> set</c><00:51:58.800><c> a</c><00:51:58.960><c> breakpoint</c>

00:52:00.470 --> 00:52:00.480 align:start position:0%
just set a breakpoint
 

00:52:00.480 --> 00:52:04.069 align:start position:0%
just set a breakpoint
um<00:52:00.960><c> in</c><00:52:01.040><c> this</c><00:52:01.359><c> code</c><00:52:02.960><c> um</c>

00:52:04.069 --> 00:52:04.079 align:start position:0%
um in this code um
 

00:52:04.079 --> 00:52:06.069 align:start position:0%
um in this code um
after<00:52:04.480><c> all</c><00:52:04.559><c> the</c><00:52:04.720><c> registers</c><00:52:05.200><c> have</c><00:52:05.359><c> been</c><00:52:05.520><c> saved</c>

00:52:06.069 --> 00:52:06.079 align:start position:0%
after all the registers have been saved
 

00:52:06.079 --> 00:52:09.990 align:start position:0%
after all the registers have been saved
i<00:52:06.319><c> think</c><00:52:06.480><c> i</c><00:52:06.559><c> set</c><00:52:06.800><c> a</c>

00:52:09.990 --> 00:52:10.000 align:start position:0%
 
 

00:52:10.000 --> 00:52:12.150 align:start position:0%
 
uh<00:52:10.319><c> breakpoint</c><00:52:10.720><c> of</c><00:52:10.800><c> this</c><00:52:11.040><c> instruction</c><00:52:11.760><c> um</c><00:52:12.000><c> so</c>

00:52:12.150 --> 00:52:12.160 align:start position:0%
uh breakpoint of this instruction um so
 

00:52:12.160 --> 00:52:13.589 align:start position:0%
uh breakpoint of this instruction um so
we'll<00:52:12.319><c> continue</c><00:52:12.640><c> executing</c>

00:52:13.589 --> 00:52:13.599 align:start position:0%
we'll continue executing
 

00:52:13.599 --> 00:52:15.190 align:start position:0%
we'll continue executing
skip<00:52:13.920><c> over</c><00:52:14.079><c> all</c><00:52:14.240><c> these</c><00:52:14.480><c> saves</c><00:52:14.800><c> of</c><00:52:14.960><c> all</c><00:52:15.040><c> the</c>

00:52:15.190 --> 00:52:15.200 align:start position:0%
skip over all these saves of all the
 

00:52:15.200 --> 00:52:17.670 align:start position:0%
skip over all these saves of all the
user<00:52:15.440><c> registers</c><00:52:16.079><c> the</c><00:52:16.160><c> crap</c><00:52:16.480><c> frame</c>

00:52:17.670 --> 00:52:17.680 align:start position:0%
user registers the crap frame
 

00:52:17.680 --> 00:52:20.230 align:start position:0%
user registers the crap frame
okay<00:52:17.920><c> and</c><00:52:18.079><c> now</c><00:52:19.119><c> we're</c><00:52:19.280><c> executing</c><00:52:19.760><c> this</c><00:52:19.920><c> load</c>

00:52:20.230 --> 00:52:20.240 align:start position:0%
okay and now we're executing this load
 

00:52:20.240 --> 00:52:22.390 align:start position:0%
okay and now we're executing this load
instruction<00:52:20.800><c> this</c><00:52:21.040><c> load</c><00:52:21.280><c> instruction</c>

00:52:22.390 --> 00:52:22.400 align:start position:0%
instruction this load instruction
 

00:52:22.400 --> 00:52:24.630 align:start position:0%
instruction this load instruction
is<00:52:23.040><c> loading</c><00:52:23.440><c> into</c><00:52:23.680><c> the</c><00:52:23.839><c> stack</c><00:52:24.240><c> pointer</c>

00:52:24.630 --> 00:52:24.640 align:start position:0%
is loading into the stack pointer
 

00:52:24.640 --> 00:52:25.430 align:start position:0%
is loading into the stack pointer
register

00:52:25.430 --> 00:52:25.440 align:start position:0%
register
 

00:52:25.440 --> 00:52:27.270 align:start position:0%
register
and<00:52:25.520><c> what</c><00:52:25.680><c> it's</c><00:52:25.839><c> loading</c><00:52:26.160><c> is</c><00:52:26.319><c> the</c><00:52:26.480><c> value</c><00:52:27.119><c> is</c>

00:52:27.270 --> 00:52:27.280 align:start position:0%
and what it's loading is the value is
 

00:52:27.280 --> 00:52:29.349 align:start position:0%
and what it's loading is the value is
the<00:52:27.440><c> eighth</c><00:52:27.920><c> slot</c>

00:52:29.349 --> 00:52:29.359 align:start position:0%
the eighth slot
 

00:52:29.359 --> 00:52:32.390 align:start position:0%
the eighth slot
in<00:52:29.520><c> the</c><00:52:30.079><c> block</c><00:52:30.319><c> of</c><00:52:30.400><c> memory</c><00:52:30.800><c> pointed</c><00:52:31.040><c> to</c><00:52:31.200><c> by</c><00:52:31.440><c> a0</c>

00:52:32.390 --> 00:52:32.400 align:start position:0%
in the block of memory pointed to by a0
 

00:52:32.400 --> 00:52:34.790 align:start position:0%
in the block of memory pointed to by a0
we<00:52:32.640><c> remember</c><00:52:33.040><c> a0</c><00:52:33.520><c> points</c><00:52:33.839><c> this</c><00:52:34.160><c> the</c><00:52:34.400><c> trap</c>

00:52:34.790 --> 00:52:34.800 align:start position:0%
we remember a0 points this the trap
 

00:52:34.800 --> 00:52:35.750 align:start position:0%
we remember a0 points this the trap
frame

00:52:35.750 --> 00:52:35.760 align:start position:0%
frame
 

00:52:35.760 --> 00:52:38.470 align:start position:0%
frame
to<00:52:36.000><c> this</c><00:52:36.480><c> uh</c><00:52:36.720><c> virtual</c><00:52:37.119><c> address</c><00:52:38.079><c> you</c><00:52:38.240><c> know</c><00:52:38.319><c> the</c>

00:52:38.470 --> 00:52:38.480 align:start position:0%
to this uh virtual address you know the
 

00:52:38.480 --> 00:52:40.870 align:start position:0%
to this uh virtual address you know the
second<00:52:38.720><c> to</c><00:52:38.880><c> last</c><00:52:39.200><c> page</c>

00:52:40.870 --> 00:52:40.880 align:start position:0%
second to last page
 

00:52:40.880 --> 00:52:44.790 align:start position:0%
second to last page
and<00:52:40.960><c> the</c><00:52:41.119><c> format</c><00:52:41.440><c> of</c><00:52:41.520><c> the</c><00:52:41.599><c> trap</c><00:52:41.920><c> page</c><00:52:43.839><c> of</c><00:52:44.000><c> the</c>

00:52:44.790 --> 00:52:44.800 align:start position:0%
and the format of the trap page of the
 

00:52:44.800 --> 00:52:47.750 align:start position:0%
and the format of the trap page of the
trap<00:52:45.119><c> frame</c><00:52:46.720><c> here's</c><00:52:47.040><c> the</c><00:52:47.119><c> form</c><00:52:47.280><c> of</c><00:52:47.359><c> the</c><00:52:47.440><c> trap</c>

00:52:47.750 --> 00:52:47.760 align:start position:0%
trap frame here's the form of the trap
 

00:52:47.760 --> 00:52:48.230 align:start position:0%
trap frame here's the form of the trap
name

00:52:48.230 --> 00:52:48.240 align:start position:0%
name
 

00:52:48.240 --> 00:52:51.109 align:start position:0%
name
we've<00:52:48.720><c> conveniently</c><00:52:49.359><c> labeled</c><00:52:49.760><c> each</c><00:52:50.800><c> field</c>

00:52:51.109 --> 00:52:51.119 align:start position:0%
we've conveniently labeled each field
 

00:52:51.119 --> 00:52:51.750 align:start position:0%
we've conveniently labeled each field
with<00:52:51.359><c> its</c>

00:52:51.750 --> 00:52:51.760 align:start position:0%
with its
 

00:52:51.760 --> 00:52:54.230 align:start position:0%
with its
offset<00:52:52.319><c> in</c><00:52:52.400><c> bytes</c><00:52:53.359><c> so</c><00:52:53.520><c> that</c><00:52:53.599><c> means</c><00:52:53.839><c> that</c><00:52:54.000><c> load</c>

00:52:54.230 --> 00:52:54.240 align:start position:0%
offset in bytes so that means that load
 

00:52:54.240 --> 00:52:54.870 align:start position:0%
offset in bytes so that means that load
in<00:52:54.319><c> the</c>

00:52:54.870 --> 00:52:54.880 align:start position:0%
in the
 

00:52:54.880 --> 00:52:57.349 align:start position:0%
in the
eighth<00:52:56.400><c> starting</c><00:52:56.640><c> at</c><00:52:56.720><c> the</c><00:52:56.800><c> eighth</c><00:52:57.040><c> byte</c><00:52:57.280><c> of</c>

00:52:57.349 --> 00:52:57.359 align:start position:0%
eighth starting at the eighth byte of
 

00:52:57.359 --> 00:52:59.349 align:start position:0%
eighth starting at the eighth byte of
the<00:52:57.440><c> trap</c><00:52:57.680><c> frame</c><00:52:57.920><c> means</c><00:52:58.160><c> we're</c><00:52:58.319><c> loading</c>

00:52:59.349 --> 00:52:59.359 align:start position:0%
the trap frame means we're loading
 

00:52:59.359 --> 00:53:01.430 align:start position:0%
the trap frame means we're loading
the<00:52:59.599><c> kernel</c><00:53:00.000><c> stack</c><00:53:00.319><c> pointer</c><00:53:00.640><c> and</c><00:53:00.800><c> the</c><00:53:01.200><c> one</c><00:53:01.359><c> of</c>

00:53:01.430 --> 00:53:01.440 align:start position:0%
the kernel stack pointer and the one of
 

00:53:01.440 --> 00:53:02.950 align:start position:0%
the kernel stack pointer and the one of
the<00:53:01.520><c> things</c><00:53:01.760><c> the</c><00:53:01.839><c> kernel</c><00:53:02.240><c> sets</c><00:53:02.559><c> up</c>

00:53:02.950 --> 00:53:02.960 align:start position:0%
the things the kernel sets up
 

00:53:02.960 --> 00:53:05.030 align:start position:0%
the things the kernel sets up
before<00:53:03.440><c> entering</c><00:53:03.760><c> user</c><00:53:04.079><c> space</c><00:53:04.400><c> is</c><00:53:04.559><c> it</c><00:53:04.720><c> sets</c>

00:53:05.030 --> 00:53:05.040 align:start position:0%
before entering user space is it sets
 

00:53:05.040 --> 00:53:07.030 align:start position:0%
before entering user space is it sets
this<00:53:05.359><c> slot</c><00:53:05.760><c> in</c><00:53:05.920><c> the</c><00:53:06.000><c> trap</c><00:53:06.319><c> frame</c>

00:53:07.030 --> 00:53:07.040 align:start position:0%
this slot in the trap frame
 

00:53:07.040 --> 00:53:10.069 align:start position:0%
this slot in the trap frame
to<00:53:07.200><c> be</c><00:53:07.280><c> equal</c><00:53:07.520><c> to</c><00:53:07.760><c> this</c><00:53:08.000><c> processes</c>

00:53:10.069 --> 00:53:10.079 align:start position:0%
to be equal to this processes
 

00:53:10.079 --> 00:53:12.549 align:start position:0%
to be equal to this processes
uh<00:53:10.319><c> kernel</c><00:53:10.640><c> stack</c><00:53:11.599><c> so</c><00:53:11.760><c> what</c><00:53:11.839><c> this</c><00:53:12.079><c> instruction</c>

00:53:12.549 --> 00:53:12.559 align:start position:0%
uh kernel stack so what this instruction
 

00:53:12.559 --> 00:53:14.549 align:start position:0%
uh kernel stack so what this instruction
here<00:53:12.720><c> is</c><00:53:12.880><c> doing</c><00:53:13.280><c> is</c>

00:53:14.549 --> 00:53:14.559 align:start position:0%
here is doing is
 

00:53:14.559 --> 00:53:17.030 align:start position:0%
here is doing is
initializing<00:53:15.359><c> the</c><00:53:16.000><c> stack</c><00:53:16.400><c> pointer</c><00:53:16.720><c> to</c><00:53:16.880><c> point</c>

00:53:17.030 --> 00:53:17.040 align:start position:0%
initializing the stack pointer to point
 

00:53:17.040 --> 00:53:17.829 align:start position:0%
initializing the stack pointer to point
to<00:53:17.200><c> the</c><00:53:17.359><c> top</c>

00:53:17.829 --> 00:53:17.839 align:start position:0%
to the top
 

00:53:17.839 --> 00:53:20.390 align:start position:0%
to the top
of<00:53:18.079><c> this</c><00:53:18.319><c> processes</c><00:53:19.280><c> kernel</c><00:53:19.599><c> stack</c><00:53:20.160><c> which</c><00:53:20.319><c> is</c>

00:53:20.390 --> 00:53:20.400 align:start position:0%
of this processes kernel stack which is
 

00:53:20.400 --> 00:53:22.710 align:start position:0%
of this processes kernel stack which is
part<00:53:20.559><c> of</c><00:53:20.640><c> what</c><00:53:20.800><c> you</c><00:53:20.880><c> need</c><00:53:21.040><c> to</c><00:53:21.119><c> do</c><00:53:21.359><c> in</c><00:53:21.440><c> order</c><00:53:21.680><c> to</c>

00:53:22.710 --> 00:53:22.720 align:start position:0%
part of what you need to do in order to
 

00:53:22.720 --> 00:53:25.910 align:start position:0%
part of what you need to do in order to
to<00:53:22.880><c> run</c><00:53:23.119><c> user</c><00:53:23.440><c> code</c>

00:53:25.910 --> 00:53:25.920 align:start position:0%
 
 

00:53:25.920 --> 00:53:27.750 align:start position:0%
 
all<00:53:26.079><c> right</c><00:53:26.240><c> so</c><00:53:26.400><c> what's</c><00:53:26.640><c> left</c><00:53:26.960><c> or</c><00:53:27.119><c> within</c><00:53:27.359><c> a</c><00:53:27.440><c> few</c>

00:53:27.750 --> 00:53:27.760 align:start position:0%
all right so what's left or within a few
 

00:53:27.760 --> 00:53:29.109 align:start position:0%
all right so what's left or within a few
instructions<00:53:28.319><c> of</c><00:53:28.480><c> getting</c><00:53:28.720><c> to</c><00:53:28.800><c> the</c><00:53:28.880><c> end</c><00:53:29.040><c> of</c>

00:53:29.109 --> 00:53:29.119 align:start position:0%
instructions of getting to the end of
 

00:53:29.119 --> 00:53:30.710 align:start position:0%
instructions of getting to the end of
this<00:53:29.200><c> trampoline</c><00:53:29.760><c> code</c>

00:53:30.710 --> 00:53:30.720 align:start position:0%
this trampoline code
 

00:53:30.720 --> 00:53:34.470 align:start position:0%
this trampoline code
um<00:53:32.079><c> we</c><00:53:32.240><c> loaded</c><00:53:32.559><c> the</c><00:53:33.040><c> stack</c><00:53:33.440><c> pointer</c>

00:53:34.470 --> 00:53:34.480 align:start position:0%
um we loaded the stack pointer
 

00:53:34.480 --> 00:53:36.069 align:start position:0%
um we loaded the stack pointer
so<00:53:34.720><c> maybe</c><00:53:34.960><c> i</c><00:53:35.040><c> can</c><00:53:35.280><c> print</c><00:53:35.440><c> the</c><00:53:35.599><c> stack</c><00:53:35.839><c> pointer</c>

00:53:36.069 --> 00:53:36.079 align:start position:0%
so maybe i can print the stack pointer
 

00:53:36.079 --> 00:53:39.109 align:start position:0%
so maybe i can print the stack pointer
for<00:53:36.240><c> you</c><00:53:36.400><c> let's</c><00:53:36.640><c> see</c>

00:53:39.109 --> 00:53:39.119 align:start position:0%
 
 

00:53:39.119 --> 00:53:46.790 align:start position:0%
 
yeah<00:53:39.280><c> this</c><00:53:39.440><c> is</c><00:53:40.839><c> um</c>

00:53:46.790 --> 00:53:46.800 align:start position:0%
 
 

00:53:46.800 --> 00:53:50.390 align:start position:0%
 
uh<00:53:48.720><c> all</c><00:53:48.800><c> right</c><00:53:48.960><c> well</c><00:53:49.200><c> this</c><00:53:49.359><c> is</c><00:53:49.440><c> the</c><00:53:49.760><c> kernels</c>

00:53:50.390 --> 00:53:50.400 align:start position:0%
uh all right well this is the kernels
 

00:53:50.400 --> 00:53:52.069 align:start position:0%
uh all right well this is the kernels
this<00:53:50.640><c> process</c><00:53:50.960><c> is</c><00:53:51.119><c> kernel</c><00:53:51.359><c> stack</c><00:53:51.680><c> it's</c><00:53:51.839><c> up</c><00:53:51.920><c> in</c>

00:53:52.069 --> 00:53:52.079 align:start position:0%
this process is kernel stack it's up in
 

00:53:52.079 --> 00:53:55.270 align:start position:0%
this process is kernel stack it's up in
high<00:53:52.319><c> memory</c><00:53:52.880><c> because</c><00:53:53.359><c> xv6</c>

00:53:55.270 --> 00:53:55.280 align:start position:0%
high memory because xv6
 

00:53:55.280 --> 00:53:59.109 align:start position:0%
high memory because xv6
um<00:53:56.880><c> treats</c><00:53:57.200><c> kernel</c><00:53:57.520><c> sex</c><00:53:58.240><c> especially</c><00:53:58.800><c> so</c><00:53:58.960><c> that</c>

00:53:59.109 --> 00:53:59.119 align:start position:0%
um treats kernel sex especially so that
 

00:53:59.119 --> 00:54:01.109 align:start position:0%
um treats kernel sex especially so that
you<00:53:59.200><c> can</c><00:53:59.359><c> put</c><00:53:59.599><c> a</c><00:53:59.760><c> guard</c><00:54:00.160><c> page</c>

00:54:01.109 --> 00:54:01.119 align:start position:0%
you can put a guard page
 

00:54:01.119 --> 00:54:04.710 align:start position:0%
you can put a guard page
under<00:54:01.359><c> each</c><00:54:01.599><c> kernel</c><00:54:01.920><c> stack</c><00:54:04.079><c> okay</c><00:54:04.319><c> so</c><00:54:04.480><c> this</c>

00:54:04.710 --> 00:54:04.720 align:start position:0%
under each kernel stack okay so this
 

00:54:04.720 --> 00:54:06.870 align:start position:0%
under each kernel stack okay so this
load<00:54:05.119><c> into</c><00:54:05.440><c> tp</c>

00:54:06.870 --> 00:54:06.880 align:start position:0%
load into tp
 

00:54:06.880 --> 00:54:09.750 align:start position:0%
load into tp
it<00:54:07.040><c> turns</c><00:54:07.280><c> out</c><00:54:07.440><c> that</c><00:54:08.240><c> because</c><00:54:09.280><c> there's</c><00:54:09.520><c> no</c>

00:54:09.750 --> 00:54:09.760 align:start position:0%
it turns out that because there's no
 

00:54:09.760 --> 00:54:11.670 align:start position:0%
it turns out that because there's no
direct<00:54:10.160><c> way</c><00:54:10.319><c> in</c><00:54:10.400><c> risk</c><00:54:10.720><c> five</c><00:54:11.119><c> to</c><00:54:11.200><c> figure</c><00:54:11.520><c> out</c>

00:54:11.670 --> 00:54:11.680 align:start position:0%
direct way in risk five to figure out
 

00:54:11.680 --> 00:54:12.790 align:start position:0%
direct way in risk five to figure out
what<00:54:11.920><c> core</c>

00:54:12.790 --> 00:54:12.800 align:start position:0%
what core
 

00:54:12.800 --> 00:54:14.630 align:start position:0%
what core
which<00:54:13.040><c> of</c><00:54:13.119><c> the</c><00:54:13.760><c> multiple</c><00:54:14.160><c> cores</c><00:54:14.480><c> you're</c>

00:54:14.630 --> 00:54:14.640 align:start position:0%
which of the multiple cores you're
 

00:54:14.640 --> 00:54:15.990 align:start position:0%
which of the multiple cores you're
running<00:54:14.880><c> on</c>

00:54:15.990 --> 00:54:16.000 align:start position:0%
running on
 

00:54:16.000 --> 00:54:19.829 align:start position:0%
running on
xv6<00:54:16.640><c> actually</c><00:54:18.160><c> keeps</c><00:54:18.480><c> the</c><00:54:18.800><c> core</c><00:54:19.200><c> number</c>

00:54:19.829 --> 00:54:19.839 align:start position:0%
xv6 actually keeps the core number
 

00:54:19.839 --> 00:54:22.870 align:start position:0%
xv6 actually keeps the core number
called<00:54:20.000><c> the</c><00:54:20.160><c> heart</c><00:54:20.480><c> id</c><00:54:21.359><c> in</c><00:54:21.440><c> the</c><00:54:21.599><c> tp</c><00:54:22.160><c> register</c>

00:54:22.870 --> 00:54:22.880 align:start position:0%
called the heart id in the tp register
 

00:54:22.880 --> 00:54:24.470 align:start position:0%
called the heart id in the tp register
and<00:54:22.960><c> this</c><00:54:23.119><c> is</c><00:54:23.280><c> used</c><00:54:23.520><c> in</c><00:54:23.599><c> a</c><00:54:23.680><c> bunch</c><00:54:23.920><c> of</c><00:54:24.000><c> places</c><00:54:24.400><c> in</c>

00:54:24.470 --> 00:54:24.480 align:start position:0%
and this is used in a bunch of places in
 

00:54:24.480 --> 00:54:26.710 align:start position:0%
and this is used in a bunch of places in
the<00:54:24.559><c> kernel</c><00:54:24.960><c> for</c><00:54:25.119><c> example</c>

00:54:26.710 --> 00:54:26.720 align:start position:0%
the kernel for example
 

00:54:26.720 --> 00:54:29.589 align:start position:0%
the kernel for example
it's<00:54:26.880><c> part</c><00:54:27.119><c> of</c><00:54:27.280><c> the</c><00:54:27.359><c> machinery</c><00:54:28.079><c> for</c><00:54:29.280><c> kernel</c>

00:54:29.589 --> 00:54:29.599 align:start position:0%
it's part of the machinery for kernel
 

00:54:29.599 --> 00:54:31.349 align:start position:0%
it's part of the machinery for kernel
code<00:54:29.839><c> to</c><00:54:29.920><c> figure</c><00:54:30.160><c> out</c><00:54:30.319><c> what</c><00:54:30.640><c> process</c>

00:54:31.349 --> 00:54:31.359 align:start position:0%
code to figure out what process
 

00:54:31.359 --> 00:54:36.710 align:start position:0%
code to figure out what process
is<00:54:31.520><c> currently</c><00:54:32.880><c> running</c><00:54:33.200><c> on</c><00:54:33.359><c> that</c><00:54:33.599><c> core</c>

00:54:36.710 --> 00:54:36.720 align:start position:0%
 
 

00:54:36.720 --> 00:54:41.030 align:start position:0%
 
okay<00:54:36.960><c> and</c><00:54:37.040><c> if</c><00:54:37.119><c> we</c><00:54:37.280><c> execute</c><00:54:37.760><c> this</c><00:54:38.319><c> hopefully</c><00:54:38.960><c> uh</c>

00:54:41.030 --> 00:54:41.040 align:start position:0%
okay and if we execute this hopefully uh
 

00:54:41.040 --> 00:54:43.030 align:start position:0%
okay and if we execute this hopefully uh
tp<00:54:41.839><c> we're</c><00:54:42.000><c> running</c><00:54:42.240><c> on</c><00:54:42.319><c> core</c><00:54:42.559><c> zero</c><00:54:42.799><c> and</c><00:54:42.880><c> that</c>

00:54:43.030 --> 00:54:43.040 align:start position:0%
tp we're running on core zero and that
 

00:54:43.040 --> 00:54:44.630 align:start position:0%
tp we're running on core zero and that
makes<00:54:43.200><c> sense</c><00:54:43.520><c> because</c><00:54:43.760><c> i've</c><00:54:43.920><c> configured</c>

00:54:44.630 --> 00:54:44.640 align:start position:0%
makes sense because i've configured
 

00:54:44.640 --> 00:54:48.470 align:start position:0%
makes sense because i've configured
qmu<00:54:45.200><c> to</c><00:54:45.359><c> only</c><00:54:45.599><c> give</c><00:54:46.079><c> one</c><00:54:46.400><c> core</c><00:54:47.440><c> to</c><00:54:47.599><c> xv6</c><00:54:48.160><c> so</c><00:54:48.319><c> we</c>

00:54:48.470 --> 00:54:48.480 align:start position:0%
qmu to only give one core to xv6 so we
 

00:54:48.480 --> 00:54:53.109 align:start position:0%
qmu to only give one core to xv6 so we
are<00:54:48.559><c> indeed</c><00:54:48.799><c> running</c><00:54:49.040><c> on</c><00:54:49.119><c> core</c><00:54:50.839><c> zero</c>

00:54:53.109 --> 00:54:53.119 align:start position:0%
are indeed running on core zero
 

00:54:53.119 --> 00:54:56.150 align:start position:0%
are indeed running on core zero
this<00:54:53.359><c> next</c><00:54:53.680><c> thing</c><00:54:54.319><c> uh</c><00:54:55.119><c> is</c><00:54:55.359><c> loading</c><00:54:55.839><c> the</c>

00:54:56.150 --> 00:54:56.160 align:start position:0%
this next thing uh is loading the
 

00:54:56.160 --> 00:54:57.190 align:start position:0%
this next thing uh is loading the
address

00:54:57.190 --> 00:54:57.200 align:start position:0%
address
 

00:54:57.200 --> 00:55:00.710 align:start position:0%
address
of<00:54:59.599><c> um</c><00:54:59.839><c> well</c><00:55:00.079><c> actually</c><00:55:00.319><c> the</c>

00:55:00.710 --> 00:55:00.720 align:start position:0%
of um well actually the
 

00:55:00.720 --> 00:55:04.870 align:start position:0%
of um well actually the
the<00:55:00.880><c> load</c><00:55:01.119><c> into</c><00:55:01.359><c> t0</c>

00:55:04.870 --> 00:55:04.880 align:start position:0%
 
 

00:55:04.880 --> 00:55:08.470 align:start position:0%
 
um<00:55:06.240><c> i</c><00:55:06.400><c> think</c><00:55:06.720><c> loaded</c><00:55:07.280><c> a</c>

00:55:08.470 --> 00:55:08.480 align:start position:0%
um i think loaded a
 

00:55:08.480 --> 00:55:11.910 align:start position:0%
um i think loaded a
pointer<00:55:09.040><c> to</c><00:55:11.119><c> the</c><00:55:11.280><c> first</c><00:55:11.599><c> c</c>

00:55:11.910 --> 00:55:11.920 align:start position:0%
pointer to the first c
 

00:55:11.920 --> 00:55:13.190 align:start position:0%
pointer to the first c
function<00:55:12.240><c> that</c><00:55:12.319><c> we're</c><00:55:12.480><c> going</c><00:55:12.559><c> to</c><00:55:12.640><c> execute</c>

00:55:13.190 --> 00:55:13.200 align:start position:0%
function that we're going to execute
 

00:55:13.200 --> 00:55:14.950 align:start position:0%
function that we're going to execute
which<00:55:13.440><c> is</c><00:55:13.599><c> user</c><00:55:13.920><c> trap</c><00:55:14.240><c> so</c><00:55:14.400><c> we</c><00:55:14.480><c> use</c><00:55:14.640><c> that</c><00:55:14.799><c> in</c><00:55:14.880><c> a</c>

00:55:14.950 --> 00:55:14.960 align:start position:0%
which is user trap so we use that in a
 

00:55:14.960 --> 00:55:16.069 align:start position:0%
which is user trap so we use that in a
few<00:55:15.119><c> instructions</c><00:55:15.599><c> to</c><00:55:15.760><c> just</c>

00:55:16.069 --> 00:55:16.079 align:start position:0%
few instructions to just
 

00:55:16.079 --> 00:55:20.789 align:start position:0%
few instructions to just
jump<00:55:16.720><c> um</c><00:55:17.359><c> to</c><00:55:17.520><c> the</c><00:55:17.680><c> user</c><00:55:18.000><c> trap</c><00:55:18.319><c> c</c><00:55:18.839><c> function</c>

00:55:20.789 --> 00:55:20.799 align:start position:0%
jump um to the user trap c function
 

00:55:20.799 --> 00:55:24.309 align:start position:0%
jump um to the user trap c function
this<00:55:21.040><c> load</c><00:55:21.280><c> into</c><00:55:21.520><c> t1</c><00:55:22.079><c> here</c><00:55:23.599><c> is</c><00:55:23.760><c> loading</c><00:55:24.160><c> the</c>

00:55:24.309 --> 00:55:24.319 align:start position:0%
this load into t1 here is loading the
 

00:55:24.319 --> 00:55:27.109 align:start position:0%
this load into t1 here is loading the
address<00:55:24.880><c> of</c><00:55:25.040><c> the</c>

00:55:27.109 --> 00:55:27.119 align:start position:0%
address of the
 

00:55:27.119 --> 00:55:30.230 align:start position:0%
address of the
kernel<00:55:27.440><c> page</c><00:55:27.680><c> table</c><00:55:28.319><c> so</c><00:55:28.559><c> we</c><00:55:28.640><c> can</c><00:55:28.799><c> print</c>

00:55:30.230 --> 00:55:30.240 align:start position:0%
kernel page table so we can print
 

00:55:30.240 --> 00:55:32.710 align:start position:0%
kernel page table so we can print
so<00:55:30.400><c> we're</c><00:55:30.559><c> about</c><00:55:30.720><c> to</c><00:55:30.880><c> switch</c><00:55:31.200><c> page</c><00:55:31.440><c> tables</c>

00:55:32.710 --> 00:55:32.720 align:start position:0%
so we're about to switch page tables
 

00:55:32.720 --> 00:55:34.710 align:start position:0%
so we're about to switch page tables
turns<00:55:33.040><c> out</c><00:55:33.280><c> the</c><00:55:33.920><c> uh</c>

00:55:34.710 --> 00:55:34.720 align:start position:0%
turns out the uh
 

00:55:34.720 --> 00:55:35.990 align:start position:0%
turns out the uh
this<00:55:34.880><c> thing</c><00:55:35.119><c> in</c><00:55:35.200><c> t1</c><00:55:35.520><c> is</c><00:55:35.599><c> not</c><00:55:35.760><c> actually</c>

00:55:35.990 --> 00:55:36.000 align:start position:0%
this thing in t1 is not actually
 

00:55:36.000 --> 00:55:37.670 align:start position:0%
this thing in t1 is not actually
literally<00:55:36.400><c> the</c><00:55:36.559><c> address</c><00:55:36.960><c> of</c><00:55:37.040><c> the</c><00:55:37.200><c> kernel</c><00:55:37.440><c> page</c>

00:55:37.670 --> 00:55:37.680 align:start position:0%
literally the address of the kernel page
 

00:55:37.680 --> 00:55:39.109 align:start position:0%
literally the address of the kernel page
table<00:55:38.000><c> it's</c><00:55:38.160><c> the</c><00:55:38.240><c> thing</c><00:55:38.480><c> you</c><00:55:38.640><c> need</c><00:55:38.799><c> to</c><00:55:38.960><c> put</c>

00:55:39.109 --> 00:55:39.119 align:start position:0%
table it's the thing you need to put
 

00:55:39.119 --> 00:55:40.950 align:start position:0%
table it's the thing you need to put
into<00:55:39.359><c> sat</c><00:55:39.760><c> p</c>

00:55:40.950 --> 00:55:40.960 align:start position:0%
into sat p
 

00:55:40.960 --> 00:55:44.069 align:start position:0%
into sat p
um<00:55:42.000><c> which</c><00:55:42.240><c> is</c><00:55:42.400><c> a</c><00:55:43.280><c> has</c><00:55:43.520><c> the</c><00:55:43.599><c> address</c><00:55:43.920><c> of</c><00:55:44.000><c> the</c>

00:55:44.069 --> 00:55:44.079 align:start position:0%
um which is a has the address of the
 

00:55:44.079 --> 00:55:45.670 align:start position:0%
um which is a has the address of the
kernel<00:55:44.319><c> page</c><00:55:44.559><c> table</c><00:55:44.799><c> but</c><00:55:44.960><c> shifted</c><00:55:45.280><c> around</c>

00:55:45.670 --> 00:55:45.680 align:start position:0%
kernel page table but shifted around
 

00:55:45.680 --> 00:55:48.230 align:start position:0%
kernel page table but shifted around
with<00:55:45.839><c> some</c><00:55:46.000><c> extra</c><00:55:46.319><c> flag</c><00:55:46.559><c> bit</c><00:55:46.799><c> set</c><00:55:47.760><c> but</c><00:55:47.920><c> as</c><00:55:48.079><c> soon</c>

00:55:48.230 --> 00:55:48.240 align:start position:0%
with some extra flag bit set but as soon
 

00:55:48.240 --> 00:55:49.829 align:start position:0%
with some extra flag bit set but as soon
as<00:55:48.400><c> the</c><00:55:48.480><c> csrw</c>

00:55:49.829 --> 00:55:49.839 align:start position:0%
as the csrw
 

00:55:49.839 --> 00:55:51.670 align:start position:0%
as the csrw
instruction<00:55:50.319><c> executes</c><00:55:50.720><c> we'll</c><00:55:50.960><c> switch</c><00:55:51.359><c> page</c>

00:55:51.670 --> 00:55:51.680 align:start position:0%
instruction executes we'll switch page
 

00:55:51.680 --> 00:55:53.349 align:start position:0%
instruction executes we'll switch page
tables<00:55:52.000><c> from</c><00:55:52.160><c> the</c><00:55:52.400><c> user</c><00:55:52.720><c> page</c><00:55:52.960><c> table</c><00:55:53.200><c> to</c><00:55:53.280><c> the</c>

00:55:53.349 --> 00:55:53.359 align:start position:0%
tables from the user page table to the
 

00:55:53.359 --> 00:55:54.309 align:start position:0%
tables from the user page table to the
kernel<00:55:53.599><c> page</c><00:55:53.839><c> table</c>

00:55:54.309 --> 00:55:54.319 align:start position:0%
kernel page table
 

00:55:54.319 --> 00:55:55.589 align:start position:0%
kernel page table
and<00:55:54.480><c> let</c><00:55:54.640><c> me</c><00:55:54.720><c> just</c><00:55:54.880><c> reinforce</c><00:55:55.359><c> that</c><00:55:55.440><c> by</c>

00:55:55.589 --> 00:55:55.599 align:start position:0%
and let me just reinforce that by
 

00:55:55.599 --> 00:55:57.510 align:start position:0%
and let me just reinforce that by
looking<00:55:55.839><c> at</c><00:55:55.920><c> the</c><00:55:56.000><c> current</c><00:55:56.240><c> page</c><00:55:56.559><c> table</c>

00:55:57.510 --> 00:55:57.520 align:start position:0%
looking at the current page table
 

00:55:57.520 --> 00:55:59.829 align:start position:0%
looking at the current page table
right<00:55:57.760><c> now</c><00:55:58.880><c> we're</c><00:55:59.040><c> still</c><00:55:59.280><c> executing</c><00:55:59.680><c> with</c>

00:55:59.829 --> 00:55:59.839 align:start position:0%
right now we're still executing with
 

00:55:59.839 --> 00:56:00.870 align:start position:0%
right now we're still executing with
this<00:56:00.000><c> very</c><00:56:00.240><c> small</c>

00:56:00.870 --> 00:56:00.880 align:start position:0%
this very small
 

00:56:00.880 --> 00:56:03.349 align:start position:0%
this very small
user<00:56:01.200><c> page</c><00:56:01.520><c> table</c><00:56:02.240><c> and</c><00:56:02.480><c> run</c><00:56:02.720><c> step</c><00:56:02.960><c> by</c><00:56:03.200><c> to</c>

00:56:03.349 --> 00:56:03.359 align:start position:0%
user page table and run step by to
 

00:56:03.359 --> 00:56:04.390 align:start position:0%
user page table and run step by to
execute

00:56:04.390 --> 00:56:04.400 align:start position:0%
execute
 

00:56:04.400 --> 00:56:10.950 align:start position:0%
execute
the<00:56:04.960><c> load</c><00:56:05.359><c> into</c><00:56:05.680><c> sat</c><00:56:06.000><c> p</c>

00:56:10.950 --> 00:56:10.960 align:start position:0%
 
 

00:56:10.960 --> 00:56:12.309 align:start position:0%
 
and<00:56:11.119><c> we'll</c><00:56:11.280><c> look</c><00:56:11.520><c> again</c><00:56:11.760><c> at</c><00:56:11.839><c> the</c><00:56:11.839><c> kernel</c><00:56:12.079><c> page</c>

00:56:12.309 --> 00:56:12.319 align:start position:0%
and we'll look again at the kernel page
 

00:56:12.319 --> 00:56:13.750 align:start position:0%
and we'll look again at the kernel page
and<00:56:12.400><c> now</c><00:56:12.559><c> we're</c><00:56:12.640><c> in</c><00:56:12.799><c> a</c><00:56:12.880><c> completely</c><00:56:13.280><c> different</c>

00:56:13.750 --> 00:56:13.760 align:start position:0%
and now we're in a completely different
 

00:56:13.760 --> 00:56:15.349 align:start position:0%
and now we're in a completely different
page<00:56:14.000><c> table</c><00:56:14.240><c> right</c><00:56:14.400><c> this</c><00:56:14.559><c> is</c><00:56:14.720><c> the</c><00:56:14.799><c> kernel</c><00:56:15.119><c> page</c>

00:56:15.349 --> 00:56:15.359 align:start position:0%
page table right this is the kernel page
 

00:56:15.359 --> 00:56:16.309 align:start position:0%
page table right this is the kernel page
table

00:56:16.309 --> 00:56:16.319 align:start position:0%
table
 

00:56:16.319 --> 00:56:17.510 align:start position:0%
table
and<00:56:16.559><c> you</c><00:56:16.640><c> can</c><00:56:16.720><c> see</c><00:56:16.880><c> all</c><00:56:17.040><c> these</c><00:56:17.200><c> different</c>

00:56:17.510 --> 00:56:17.520 align:start position:0%
and you can see all these different
 

00:56:17.520 --> 00:56:19.670 align:start position:0%
and you can see all these different
regions<00:56:18.000><c> of</c><00:56:18.160><c> memory</c><00:56:18.640><c> and</c><00:56:18.720><c> device</c><00:56:19.280><c> control</c>

00:56:19.670 --> 00:56:19.680 align:start position:0%
regions of memory and device control
 

00:56:19.680 --> 00:56:22.950 align:start position:0%
regions of memory and device control
registers<00:56:20.160><c> and</c><00:56:20.240><c> whatnot</c><00:56:20.720><c> that</c><00:56:20.880><c> the</c><00:56:21.119><c> uh</c>

00:56:22.950 --> 00:56:22.960 align:start position:0%
registers and whatnot that the uh
 

00:56:22.960 --> 00:56:26.069 align:start position:0%
registers and whatnot that the uh
kernel<00:56:23.520><c> sets</c><00:56:23.839><c> up</c><00:56:24.079><c> in</c><00:56:24.240><c> its</c><00:56:24.480><c> own</c><00:56:25.200><c> uh</c><00:56:25.599><c> big</c><00:56:25.839><c> kernel</c>

00:56:26.069 --> 00:56:26.079 align:start position:0%
kernel sets up in its own uh big kernel
 

00:56:26.079 --> 00:56:26.789 align:start position:0%
kernel sets up in its own uh big kernel
page<00:56:26.400><c> date</c>

00:56:26.789 --> 00:56:26.799 align:start position:0%
page date
 

00:56:26.799 --> 00:56:28.829 align:start position:0%
page date
so<00:56:26.960><c> we've</c><00:56:27.280><c> successfully</c><00:56:27.839><c> switched</c><00:56:28.160><c> page</c>

00:56:28.829 --> 00:56:28.839 align:start position:0%
so we've successfully switched page
 

00:56:28.839 --> 00:56:30.950 align:start position:0%
so we've successfully switched page
tables<00:56:29.680><c> and</c><00:56:29.839><c> now</c><00:56:30.000><c> the</c><00:56:30.160><c> kernel</c><00:56:30.400><c> page</c><00:56:30.640><c> tables</c>

00:56:30.950 --> 00:56:30.960 align:start position:0%
tables and now the kernel page tables
 

00:56:30.960 --> 00:56:31.349 align:start position:0%
tables and now the kernel page tables
and

00:56:31.349 --> 00:56:31.359 align:start position:0%
and
 

00:56:31.359 --> 00:56:32.549 align:start position:0%
and
so<00:56:31.520><c> we're</c><00:56:31.680><c> like</c><00:56:31.920><c> in</c><00:56:32.000><c> pretty</c><00:56:32.160><c> good</c><00:56:32.240><c> shape</c><00:56:32.480><c> at</c>

00:56:32.549 --> 00:56:32.559 align:start position:0%
so we're like in pretty good shape at
 

00:56:32.559 --> 00:56:34.390 align:start position:0%
so we're like in pretty good shape at
this<00:56:32.720><c> point</c><00:56:32.960><c> because</c><00:56:33.119><c> we</c><00:56:33.280><c> have</c><00:56:33.359><c> a</c><00:56:33.440><c> stack</c>

00:56:34.390 --> 00:56:34.400 align:start position:0%
this point because we have a stack
 

00:56:34.400 --> 00:56:36.470 align:start position:0%
this point because we have a stack
um<00:56:34.960><c> we</c><00:56:35.119><c> have</c><00:56:35.200><c> the</c><00:56:35.440><c> kernel</c><00:56:35.680><c> page</c><00:56:35.920><c> table</c><00:56:36.240><c> we</c><00:56:36.400><c> can</c>

00:56:36.470 --> 00:56:36.480 align:start position:0%
um we have the kernel page table we can
 

00:56:36.480 --> 00:56:38.630 align:start position:0%
um we have the kernel page table we can
read<00:56:36.720><c> my</c><00:56:36.880><c> kernel</c><00:56:37.119><c> data</c><00:56:37.520><c> we're</c><00:56:37.680><c> really</c>

00:56:38.630 --> 00:56:38.640 align:start position:0%
read my kernel data we're really
 

00:56:38.640 --> 00:56:42.069 align:start position:0%
read my kernel data we're really
pretty<00:56:38.799><c> much</c><00:56:39.040><c> ready</c><00:56:39.440><c> to</c><00:56:41.040><c> execute</c><00:56:41.440><c> c</c><00:56:41.680><c> code</c><00:56:41.920><c> in</c>

00:56:42.069 --> 00:56:42.079 align:start position:0%
pretty much ready to execute c code in
 

00:56:42.079 --> 00:56:43.270 align:start position:0%
pretty much ready to execute c code in
the<00:56:42.160><c> kernel</c>

00:56:43.270 --> 00:56:43.280 align:start position:0%
the kernel
 

00:56:43.280 --> 00:56:46.630 align:start position:0%
the kernel
one<00:56:43.520><c> puzzle</c><00:56:43.920><c> though</c><00:56:44.319><c> is</c><00:56:45.839><c> how</c><00:56:46.240><c> come</c>

00:56:46.630 --> 00:56:46.640 align:start position:0%
one puzzle though is how come
 

00:56:46.640 --> 00:56:49.109 align:start position:0%
one puzzle though is how come
we<00:56:46.799><c> didn't</c><00:56:47.040><c> just</c><00:56:47.280><c> crash</c><00:56:48.400><c> after</c><00:56:48.799><c> all</c><00:56:48.880><c> we</c><00:56:49.040><c> were</c>

00:56:49.109 --> 00:56:49.119 align:start position:0%
we didn't just crash after all we were
 

00:56:49.119 --> 00:56:50.950 align:start position:0%
we didn't just crash after all we were
executing<00:56:49.520><c> somewhere</c><00:56:49.920><c> in</c><00:56:50.000><c> memory</c>

00:56:50.950 --> 00:56:50.960 align:start position:0%
executing somewhere in memory
 

00:56:50.960 --> 00:56:52.390 align:start position:0%
executing somewhere in memory
and<00:56:51.119><c> the</c><00:56:51.200><c> program</c><00:56:51.520><c> counter</c><00:56:51.760><c> holds</c><00:56:52.000><c> a</c><00:56:52.079><c> virtual</c>

00:56:52.390 --> 00:56:52.400 align:start position:0%
and the program counter holds a virtual
 

00:56:52.400 --> 00:56:54.069 align:start position:0%
and the program counter holds a virtual
address<00:56:53.440><c> if</c><00:56:53.760><c> we</c>

00:56:54.069 --> 00:56:54.079 align:start position:0%
address if we
 

00:56:54.079 --> 00:56:57.109 align:start position:0%
address if we
switch<00:56:54.559><c> page</c><00:56:55.040><c> tables</c><00:56:56.160><c> why</c><00:56:56.400><c> doesn't</c><00:56:56.720><c> that</c>

00:56:57.109 --> 00:56:57.119 align:start position:0%
switch page tables why doesn't that
 

00:56:57.119 --> 00:56:59.430 align:start position:0%
switch page tables why doesn't that
um<00:56:57.680><c> just</c><00:56:57.920><c> cause</c><00:56:58.160><c> some</c><00:56:58.559><c> random</c><00:56:58.880><c> garbage</c><00:56:59.280><c> or</c>

00:56:59.430 --> 00:56:59.440 align:start position:0%
um just cause some random garbage or
 

00:56:59.440 --> 00:57:00.710 align:start position:0%
um just cause some random garbage or
nothing<00:56:59.680><c> at</c><00:56:59.839><c> all</c>

00:57:00.710 --> 00:57:00.720 align:start position:0%
nothing at all
 

00:57:00.720 --> 00:57:03.030 align:start position:0%
nothing at all
uh<00:57:00.960><c> to</c><00:57:01.119><c> be</c><00:57:01.280><c> mapped</c><00:57:01.599><c> in</c><00:57:01.760><c> the</c><00:57:01.839><c> new</c><00:57:02.079><c> page</c><00:57:02.480><c> table</c>

00:57:03.030 --> 00:57:03.040 align:start position:0%
uh to be mapped in the new page table
 

00:57:03.040 --> 00:57:05.349 align:start position:0%
uh to be mapped in the new page table
under<00:57:03.280><c> foot</c><00:57:03.520><c> where</c><00:57:03.680><c> we</c><00:57:03.839><c> were</c><00:57:04.000><c> executing</c>

00:57:05.349 --> 00:57:05.359 align:start position:0%
under foot where we were executing
 

00:57:05.359 --> 00:57:06.549 align:start position:0%
under foot where we were executing
and<00:57:05.440><c> we're</c><00:57:05.599><c> not</c><00:57:05.760><c> crashing</c><00:57:06.079><c> here</c><00:57:06.319><c> actually</c>

00:57:06.549 --> 00:57:06.559 align:start position:0%
and we're not crashing here actually
 

00:57:06.559 --> 00:57:08.710 align:start position:0%
and we're not crashing here actually
executing<00:57:07.040><c> these</c><00:57:07.200><c> instructions</c>

00:57:08.710 --> 00:57:08.720 align:start position:0%
executing these instructions
 

00:57:08.720 --> 00:57:13.270 align:start position:0%
executing these instructions
um<00:57:09.200><c> any</c><00:57:09.440><c> guesses</c><00:57:09.760><c> what's</c><00:57:10.000><c> going</c><00:57:10.839><c> on</c>

00:57:13.270 --> 00:57:13.280 align:start position:0%
um any guesses what's going on
 

00:57:13.280 --> 00:57:16.950 align:start position:0%
um any guesses what's going on
i<00:57:13.440><c> think</c><00:57:13.680><c> it's</c><00:57:13.839><c> because</c><00:57:14.799><c> oh</c><00:57:15.119><c> sorry</c>

00:57:16.950 --> 00:57:16.960 align:start position:0%
i think it's because oh sorry
 

00:57:16.960 --> 00:57:19.670 align:start position:0%
i think it's because oh sorry
um<00:57:17.599><c> because</c><00:57:17.920><c> we're</c><00:57:18.240><c> still</c><00:57:18.640><c> in</c><00:57:18.799><c> the</c><00:57:19.040><c> trampoline</c>

00:57:19.670 --> 00:57:19.680 align:start position:0%
um because we're still in the trampoline
 

00:57:19.680 --> 00:57:20.950 align:start position:0%
um because we're still in the trampoline
code<00:57:20.000><c> and</c><00:57:20.079><c> the</c><00:57:20.240><c> trampoline</c>

00:57:20.950 --> 00:57:20.960 align:start position:0%
code and the trampoline
 

00:57:20.960 --> 00:57:23.430 align:start position:0%
code and the trampoline
is<00:57:21.280><c> mapped</c><00:57:21.920><c> at</c><00:57:22.079><c> the</c><00:57:22.240><c> same</c><00:57:22.480><c> virtual</c><00:57:22.960><c> address</c>

00:57:23.430 --> 00:57:23.440 align:start position:0%
is mapped at the same virtual address
 

00:57:23.440 --> 00:57:23.990 align:start position:0%
is mapped at the same virtual address
both<00:57:23.760><c> in</c>

00:57:23.990 --> 00:57:24.000 align:start position:0%
both in
 

00:57:24.000 --> 00:57:26.870 align:start position:0%
both in
user<00:57:24.720><c> and</c><00:57:24.960><c> kernel</c><00:57:26.160><c> that's</c><00:57:26.400><c> absolutely</c>

00:57:26.870 --> 00:57:26.880 align:start position:0%
user and kernel that's absolutely
 

00:57:26.880 --> 00:57:28.069 align:start position:0%
user and kernel that's absolutely
correct

00:57:28.069 --> 00:57:28.079 align:start position:0%
correct
 

00:57:28.079 --> 00:57:29.829 align:start position:0%
correct
and<00:57:28.160><c> so</c><00:57:28.640><c> you</c><00:57:28.960><c> i</c><00:57:29.119><c> don't</c><00:57:29.200><c> know</c><00:57:29.280><c> if</c><00:57:29.359><c> you</c><00:57:29.520><c> remember</c>

00:57:29.829 --> 00:57:29.839 align:start position:0%
and so you i don't know if you remember
 

00:57:29.839 --> 00:57:31.270 align:start position:0%
and so you i don't know if you remember
what<00:57:30.000><c> was</c><00:57:30.160><c> mapped</c><00:57:30.480><c> here</c><00:57:30.640><c> in</c><00:57:30.720><c> the</c><00:57:30.799><c> user</c><00:57:31.040><c> page</c>

00:57:31.270 --> 00:57:31.280 align:start position:0%
what was mapped here in the user page
 

00:57:31.280 --> 00:57:31.829 align:start position:0%
what was mapped here in the user page
table

00:57:31.829 --> 00:57:31.839 align:start position:0%
table
 

00:57:31.839 --> 00:57:33.750 align:start position:0%
table
but<00:57:32.079><c> this</c><00:57:32.319><c> mapping</c><00:57:32.799><c> here</c><00:57:33.119><c> at</c><00:57:33.280><c> the</c><00:57:33.359><c> end</c><00:57:33.520><c> of</c><00:57:33.599><c> the</c>

00:57:33.750 --> 00:57:33.760 align:start position:0%
but this mapping here at the end of the
 

00:57:33.760 --> 00:57:35.910 align:start position:0%
but this mapping here at the end of the
kernel<00:57:34.079><c> page</c><00:57:34.319><c> table</c><00:57:34.799><c> is</c><00:57:34.960><c> exactly</c><00:57:35.520><c> the</c><00:57:35.680><c> same</c>

00:57:35.910 --> 00:57:35.920 align:start position:0%
kernel page table is exactly the same
 

00:57:35.920 --> 00:57:38.390 align:start position:0%
kernel page table is exactly the same
mapping<00:57:36.400><c> in</c><00:57:36.480><c> the</c><00:57:36.640><c> same</c><00:57:36.960><c> place</c>

00:57:38.390 --> 00:57:38.400 align:start position:0%
mapping in the same place
 

00:57:38.400 --> 00:57:41.190 align:start position:0%
mapping in the same place
as<00:57:38.960><c> the</c><00:57:39.119><c> trampoline</c><00:57:39.680><c> mapping</c><00:57:40.799><c> at</c><00:57:40.880><c> the</c><00:57:41.040><c> end</c><00:57:41.119><c> of</c>

00:57:41.190 --> 00:57:41.200 align:start position:0%
as the trampoline mapping at the end of
 

00:57:41.200 --> 00:57:42.390 align:start position:0%
as the trampoline mapping at the end of
the<00:57:41.280><c> user</c><00:57:41.599><c> page</c><00:57:41.920><c> table</c>

00:57:42.390 --> 00:57:42.400 align:start position:0%
the user page table
 

00:57:42.400 --> 00:57:44.630 align:start position:0%
the user page table
all<00:57:42.559><c> the</c><00:57:42.720><c> other</c><00:57:42.880><c> mappings</c><00:57:43.280><c> are</c><00:57:43.359><c> different</c><00:57:44.480><c> but</c>

00:57:44.630 --> 00:57:44.640 align:start position:0%
all the other mappings are different but
 

00:57:44.640 --> 00:57:45.990 align:start position:0%
all the other mappings are different but
this<00:57:44.880><c> mapping</c><00:57:45.200><c> is</c><00:57:45.359><c> the</c><00:57:45.440><c> same</c><00:57:45.680><c> this</c><00:57:45.839><c> is</c><00:57:45.920><c> the</c>

00:57:45.990 --> 00:57:46.000 align:start position:0%
this mapping is the same this is the
 

00:57:46.000 --> 00:57:47.349 align:start position:0%
this mapping is the same this is the
mapping<00:57:46.319><c> that</c><00:57:46.480><c> holds</c><00:57:46.720><c> the</c><00:57:46.799><c> instructions</c><00:57:47.280><c> we</c>

00:57:47.349 --> 00:57:47.359 align:start position:0%
mapping that holds the instructions we
 

00:57:47.359 --> 00:57:48.950 align:start position:0%
mapping that holds the instructions we
were<00:57:47.440><c> executing</c><00:57:48.000><c> and</c><00:57:48.160><c> because</c><00:57:48.400><c> it</c><00:57:48.559><c> didn't</c>

00:57:48.950 --> 00:57:48.960 align:start position:0%
were executing and because it didn't
 

00:57:48.960 --> 00:57:51.829 align:start position:0%
were executing and because it didn't
change<00:57:49.440><c> when</c><00:57:49.599><c> we</c><00:57:49.680><c> switch</c><00:57:50.000><c> page</c><00:57:50.240><c> tables</c>

00:57:51.829 --> 00:57:51.839 align:start position:0%
change when we switch page tables
 

00:57:51.839 --> 00:57:53.829 align:start position:0%
change when we switch page tables
we<00:57:52.000><c> actually</c><00:57:52.319><c> continue</c><00:57:52.799><c> executing</c><00:57:53.520><c> and</c><00:57:53.599><c> we're</c>

00:57:53.829 --> 00:57:53.839 align:start position:0%
we actually continue executing and we're
 

00:57:53.839 --> 00:57:55.510 align:start position:0%
we actually continue executing and we're
still<00:57:54.079><c> executing</c><00:57:54.640><c> the</c><00:57:54.720><c> same</c><00:57:55.040><c> sequence</c><00:57:55.359><c> of</c>

00:57:55.510 --> 00:57:55.520 align:start position:0%
still executing the same sequence of
 

00:57:55.520 --> 00:57:57.190 align:start position:0%
still executing the same sequence of
instructions

00:57:57.190 --> 00:57:57.200 align:start position:0%
instructions
 

00:57:57.200 --> 00:58:00.309 align:start position:0%
instructions
and<00:57:57.359><c> not</c><00:57:57.520><c> crashing</c>

00:58:00.309 --> 00:58:00.319 align:start position:0%
 
 

00:58:00.319 --> 00:58:01.910 align:start position:0%
 
and<00:58:00.400><c> so</c><00:58:00.559><c> that's</c><00:58:00.799><c> the</c><00:58:00.960><c> sort</c><00:58:01.119><c> of</c><00:58:01.280><c> special</c><00:58:01.680><c> thing</c>

00:58:01.910 --> 00:58:01.920 align:start position:0%
and so that's the sort of special thing
 

00:58:01.920 --> 00:58:03.510 align:start position:0%
and so that's the sort of special thing
about<00:58:02.160><c> the</c><00:58:02.240><c> trampoline</c><00:58:02.799><c> page</c><00:58:03.119><c> it's</c>

00:58:03.510 --> 00:58:03.520 align:start position:0%
about the trampoline page it's
 

00:58:03.520 --> 00:58:07.430 align:start position:0%
about the trampoline page it's
it's<00:58:03.760><c> mapped</c><00:58:05.040><c> both</c><00:58:05.280><c> into</c><00:58:05.520><c> user</c>

00:58:07.430 --> 00:58:07.440 align:start position:0%
it's mapped both into user
 

00:58:07.440 --> 00:58:10.230 align:start position:0%
it's mapped both into user
page<00:58:07.680><c> tables</c><00:58:08.160><c> and</c><00:58:08.480><c> into</c><00:58:08.720><c> the</c><00:58:09.680><c> kernel</c><00:58:10.000><c> page</c>

00:58:10.230 --> 00:58:10.240 align:start position:0%
page tables and into the kernel page
 

00:58:10.240 --> 00:58:10.870 align:start position:0%
page tables and into the kernel page
table

00:58:10.870 --> 00:58:10.880 align:start position:0%
table
 

00:58:10.880 --> 00:58:12.390 align:start position:0%
table
and<00:58:11.040><c> the</c><00:58:11.119><c> reason</c><00:58:11.359><c> it's</c><00:58:11.440><c> called</c><00:58:11.680><c> a</c><00:58:11.760><c> trampoline</c>

00:58:12.390 --> 00:58:12.400 align:start position:0%
and the reason it's called a trampoline
 

00:58:12.400 --> 00:58:14.230 align:start position:0%
and the reason it's called a trampoline
page<00:58:12.720><c> is</c><00:58:13.440><c> because</c><00:58:13.599><c> you</c><00:58:13.760><c> sort</c><00:58:13.920><c> of</c>

00:58:14.230 --> 00:58:14.240 align:start position:0%
page is because you sort of
 

00:58:14.240 --> 00:58:17.510 align:start position:0%
page is because you sort of
bounce<00:58:14.640><c> on</c><00:58:14.880><c> it</c><00:58:16.000><c> on</c><00:58:16.160><c> the</c><00:58:16.240><c> way</c><00:58:16.480><c> from</c><00:58:16.640><c> user</c><00:58:16.960><c> space</c>

00:58:17.510 --> 00:58:17.520 align:start position:0%
bounce on it on the way from user space
 

00:58:17.520 --> 00:58:20.630 align:start position:0%
bounce on it on the way from user space
to<00:58:17.680><c> kernel</c><00:58:18.319><c> space</c>

00:58:20.630 --> 00:58:20.640 align:start position:0%
to kernel space
 

00:58:20.640 --> 00:58:22.630 align:start position:0%
to kernel space
and<00:58:20.799><c> with</c><00:58:20.960><c> the</c><00:58:21.119><c> next</c><00:58:21.359><c> instruction</c><00:58:21.920><c> this</c><00:58:22.240><c> jr</c>

00:58:22.630 --> 00:58:22.640 align:start position:0%
and with the next instruction this jr
 

00:58:22.640 --> 00:58:24.230 align:start position:0%
and with the next instruction this jr
we're<00:58:22.799><c> about</c><00:58:22.960><c> to</c><00:58:23.119><c> bounce</c>

00:58:24.230 --> 00:58:24.240 align:start position:0%
we're about to bounce
 

00:58:24.240 --> 00:58:26.789 align:start position:0%
we're about to bounce
right<00:58:24.480><c> out</c><00:58:24.640><c> of</c><00:58:24.720><c> the</c><00:58:24.880><c> trampoline</c><00:58:26.000><c> um</c><00:58:26.319><c> into</c>

00:58:26.789 --> 00:58:26.799 align:start position:0%
right out of the trampoline um into
 

00:58:26.799 --> 00:58:27.349 align:start position:0%
right out of the trampoline um into
kernel<00:58:27.119><c> c</c>

00:58:27.349 --> 00:58:27.359 align:start position:0%
kernel c
 

00:58:27.359 --> 00:58:29.990 align:start position:0%
kernel c
code<00:58:28.319><c> and</c><00:58:28.480><c> to</c><00:58:28.640><c> see</c><00:58:28.799><c> where</c><00:58:28.960><c> we're</c><00:58:29.040><c> going</c><00:58:29.280><c> jr</c><00:58:29.839><c> is</c>

00:58:29.990 --> 00:58:30.000 align:start position:0%
code and to see where we're going jr is
 

00:58:30.000 --> 00:58:30.950 align:start position:0%
code and to see where we're going jr is
just<00:58:30.160><c> like</c>

00:58:30.950 --> 00:58:30.960 align:start position:0%
just like
 

00:58:30.960 --> 00:58:33.030 align:start position:0%
just like
jump<00:58:31.200><c> to</c><00:58:31.359><c> a</c><00:58:31.440><c> subroutine</c><00:58:32.240><c> this</c><00:58:32.480><c> operating</c><00:58:32.880><c> is</c>

00:58:33.030 --> 00:58:33.040 align:start position:0%
jump to a subroutine this operating is
 

00:58:33.040 --> 00:58:36.710 align:start position:0%
jump to a subroutine this operating is
pointed<00:58:33.280><c> to</c><00:58:33.440><c> by</c><00:58:33.680><c> register</c><00:58:34.839><c> t0</c><00:58:35.920><c> print</c><00:58:36.160><c> t0</c><00:58:36.640><c> to</c>

00:58:36.710 --> 00:58:36.720 align:start position:0%
pointed to by register t0 print t0 to
 

00:58:36.720 --> 00:58:39.589 align:start position:0%
pointed to by register t0 print t0 to
see<00:58:36.880><c> where</c><00:58:37.040><c> we're</c><00:58:37.119><c> going</c>

00:58:39.589 --> 00:58:39.599 align:start position:0%
 
 

00:58:39.599 --> 00:58:43.589 align:start position:0%
 
uh<00:58:40.000><c> maybe</c><00:58:40.240><c> we'll</c><00:58:42.400><c> print</c><00:58:42.640><c> some</c><00:58:42.880><c> instructions</c>

00:58:43.589 --> 00:58:43.599 align:start position:0%
uh maybe we'll print some instructions
 

00:58:43.599 --> 00:58:46.470 align:start position:0%
uh maybe we'll print some instructions
there

00:58:46.470 --> 00:58:46.480 align:start position:0%
 
 

00:58:46.480 --> 00:58:47.910 align:start position:0%
 
okay<00:58:46.799><c> so</c><00:58:46.960><c> these</c><00:58:47.119><c> are</c><00:58:47.200><c> the</c><00:58:47.359><c> instructions</c><00:58:47.760><c> we're</c>

00:58:47.910 --> 00:58:47.920 align:start position:0%
okay so these are the instructions we're
 

00:58:47.920 --> 00:58:49.670 align:start position:0%
okay so these are the instructions we're
about<00:58:48.079><c> to</c><00:58:48.160><c> jump</c><00:58:48.400><c> to</c><00:58:48.720><c> they're</c><00:58:48.960><c> in</c><00:58:49.040><c> the</c>

00:58:49.670 --> 00:58:49.680 align:start position:0%
about to jump to they're in the
 

00:58:49.680 --> 00:58:51.109 align:start position:0%
about to jump to they're in the
the<00:58:49.920><c> beginning</c><00:58:50.319><c> of</c><00:58:50.400><c> the</c><00:58:50.480><c> function</c><00:58:50.880><c> called</c>

00:58:51.109 --> 00:58:51.119 align:start position:0%
the beginning of the function called
 

00:58:51.119 --> 00:58:53.589 align:start position:0%
the beginning of the function called
user<00:58:51.520><c> trap</c>

00:58:53.589 --> 00:58:53.599 align:start position:0%
user trap
 

00:58:53.599 --> 00:58:57.349 align:start position:0%
user trap
user<00:58:53.920><c> trap</c><00:58:54.319><c> is</c><00:58:55.359><c> just</c><00:58:55.760><c> a</c><00:58:56.079><c> c</c><00:58:56.400><c> function</c>

00:58:57.349 --> 00:58:57.359 align:start position:0%
user trap is just a c function
 

00:58:57.359 --> 00:59:00.950 align:start position:0%
user trap is just a c function
defined<00:58:57.760><c> in</c><00:58:57.839><c> trap</c><00:58:58.079><c> dot</c><00:58:58.400><c> c</c>

00:59:00.950 --> 00:59:00.960 align:start position:0%
 
 

00:59:00.960 --> 00:59:02.789 align:start position:0%
 
here's<00:59:01.280><c> user</c><00:59:01.520><c> trap</c><00:59:02.079><c> now</c><00:59:02.240><c> we're</c><00:59:02.400><c> about</c><00:59:02.640><c> we're</c>

00:59:02.789 --> 00:59:02.799 align:start position:0%
here's user trap now we're about we're
 

00:59:02.799 --> 00:59:04.390 align:start position:0%
here's user trap now we're about we're
about<00:59:02.960><c> to</c><00:59:03.119><c> jump</c><00:59:03.280><c> from</c><00:59:03.520><c> assembly</c><00:59:03.920><c> code</c><00:59:04.079><c> to</c><00:59:04.160><c> user</c>

00:59:04.390 --> 00:59:04.400 align:start position:0%
about to jump from assembly code to user
 

00:59:04.400 --> 00:59:05.430 align:start position:0%
about to jump from assembly code to user
trap<00:59:04.720><c> with</c><00:59:04.880><c> a</c><00:59:04.960><c> stack</c>

00:59:05.430 --> 00:59:05.440 align:start position:0%
trap with a stack
 

00:59:05.440 --> 00:59:07.750 align:start position:0%
trap with a stack
with<00:59:05.599><c> a</c><00:59:05.680><c> kernel</c><00:59:06.000><c> page</c><00:59:06.319><c> table</c><00:59:07.119><c> uh</c><00:59:07.440><c> let</c><00:59:07.599><c> me</c>

00:59:07.750 --> 00:59:07.760 align:start position:0%
with a kernel page table uh let me
 

00:59:07.760 --> 00:59:09.910 align:start position:0%
with a kernel page table uh let me
actually<00:59:08.079><c> do</c><00:59:08.400><c> the</c>

00:59:09.910 --> 00:59:09.920 align:start position:0%
actually do the
 

00:59:09.920 --> 00:59:12.309 align:start position:0%
actually do the
execute<00:59:10.400><c> the</c><00:59:10.559><c> instruction</c><00:59:12.000><c> and</c><00:59:12.079><c> now</c><00:59:12.240><c> i'm</c>

00:59:12.309 --> 00:59:12.319 align:start position:0%
execute the instruction and now i'm
 

00:59:12.319 --> 00:59:13.250 align:start position:0%
execute the instruction and now i'm
going<00:59:12.400><c> to</c><00:59:12.559><c> turn</c><00:59:12.880><c> on</c>

00:59:13.250 --> 00:59:13.260 align:start position:0%
going to turn on
 

00:59:13.260 --> 00:59:14.710 align:start position:0%
going to turn on
[Music]

00:59:14.710 --> 00:59:14.720 align:start position:0%
[Music]
 

00:59:14.720 --> 00:59:18.549 align:start position:0%
[Music]
um<00:59:17.520><c> turn</c><00:59:17.680><c> on</c><00:59:17.839><c> displaying</c><00:59:18.240><c> of</c><00:59:18.319><c> c</c>

00:59:18.549 --> 00:59:18.559 align:start position:0%
um turn on displaying of c
 

00:59:18.559 --> 00:59:21.109 align:start position:0%
um turn on displaying of c
code<00:59:18.960><c> and</c><00:59:19.280><c> gdb</c><00:59:19.760><c> now</c><00:59:19.920><c> that</c><00:59:20.000><c> we're</c><00:59:20.079><c> executing</c><00:59:20.880><c> c</c>

00:59:21.109 --> 00:59:21.119 align:start position:0%
code and gdb now that we're executing c
 

00:59:21.119 --> 00:59:23.750 align:start position:0%
code and gdb now that we're executing c
code

00:59:23.750 --> 00:59:23.760 align:start position:0%
 
 

00:59:23.760 --> 00:59:25.030 align:start position:0%
 
okay<00:59:23.920><c> so</c><00:59:24.079><c> now</c><00:59:24.240><c> we're</c><00:59:24.319><c> in</c><00:59:24.400><c> a</c><00:59:24.480><c> much</c><00:59:24.559><c> more</c><00:59:24.720><c> sane</c>

00:59:25.030 --> 00:59:25.040 align:start position:0%
okay so now we're in a much more sane
 

00:59:25.040 --> 00:59:27.270 align:start position:0%
okay so now we're in a much more sane
world<00:59:25.280><c> we're</c><00:59:25.520><c> just</c><00:59:25.760><c> executing</c><00:59:26.160><c> c</c><00:59:26.400><c> code</c>

00:59:27.270 --> 00:59:27.280 align:start position:0%
world we're just executing c code
 

00:59:27.280 --> 00:59:28.230 align:start position:0%
world we're just executing c code
should<00:59:27.440><c> be</c><00:59:27.599><c> a</c><00:59:27.599><c> little</c><00:59:27.760><c> bit</c><00:59:27.839><c> easier</c><00:59:28.160><c> to</c>

00:59:28.230 --> 00:59:28.240 align:start position:0%
should be a little bit easier to
 

00:59:28.240 --> 00:59:30.870 align:start position:0%
should be a little bit easier to
understand<00:59:29.119><c> and</c><00:59:29.280><c> there's</c>

00:59:30.870 --> 00:59:30.880 align:start position:0%
understand and there's
 

00:59:30.880 --> 00:59:32.230 align:start position:0%
understand and there's
you<00:59:31.040><c> know</c><00:59:31.119><c> we'll</c><00:59:31.280><c> still</c><00:59:31.440><c> spend</c><00:59:31.680><c> some</c><00:59:31.920><c> time</c>

00:59:32.230 --> 00:59:32.240 align:start position:0%
you know we'll still spend some time
 

00:59:32.240 --> 00:59:34.470 align:start position:0%
you know we'll still spend some time
reading<00:59:32.559><c> and</c><00:59:32.640><c> writing</c><00:59:33.359><c> various</c><00:59:33.839><c> interesting</c>

00:59:34.470 --> 00:59:34.480 align:start position:0%
reading and writing various interesting
 

00:59:34.480 --> 00:59:37.510 align:start position:0%
reading and writing various interesting
control<00:59:34.880><c> registers</c><00:59:35.520><c> but</c><00:59:36.319><c> um</c>

00:59:37.510 --> 00:59:37.520 align:start position:0%
control registers but um
 

00:59:37.520 --> 00:59:39.430 align:start position:0%
control registers but um
the<00:59:37.680><c> environment</c><00:59:38.240><c> is</c><00:59:38.720><c> hopefully</c><00:59:39.040><c> a</c><00:59:39.119><c> good</c><00:59:39.200><c> deal</c>

00:59:39.430 --> 00:59:39.440 align:start position:0%
the environment is hopefully a good deal
 

00:59:39.440 --> 00:59:40.710 align:start position:0%
the environment is hopefully a good deal
less<00:59:39.680><c> mysterious</c><00:59:40.400><c> than</c>

00:59:40.710 --> 00:59:40.720 align:start position:0%
less mysterious than
 

00:59:40.720 --> 00:59:47.990 align:start position:0%
less mysterious than
it<00:59:40.799><c> was</c><00:59:41.040><c> in</c><00:59:41.119><c> the</c><00:59:41.200><c> track</c><00:59:41.440><c> frame</c><00:59:43.440><c> all</c><00:59:44.839><c> right</c>

00:59:47.990 --> 00:59:48.000 align:start position:0%
 
 

00:59:48.000 --> 00:59:49.990 align:start position:0%
 
any<00:59:48.400><c> function</c><00:59:48.799><c> any</c><00:59:49.119><c> any</c><00:59:49.359><c> questions</c><00:59:49.760><c> at</c><00:59:49.760><c> this</c>

00:59:49.990 --> 00:59:50.000 align:start position:0%
any function any any questions at this
 

00:59:50.000 --> 00:59:53.829 align:start position:0%
any function any any questions at this
point

00:59:53.829 --> 00:59:53.839 align:start position:0%
 
 

00:59:53.839 --> 00:59:56.470 align:start position:0%
 
um<00:59:54.240><c> i</c><00:59:54.640><c> have</c><00:59:54.880><c> a</c><00:59:55.040><c> question</c><00:59:55.520><c> why</c><00:59:55.680><c> didn't</c><00:59:56.000><c> we</c><00:59:56.240><c> see</c>

00:59:56.470 --> 00:59:56.480 align:start position:0%
um i have a question why didn't we see
 

00:59:56.480 --> 00:59:58.150 align:start position:0%
um i have a question why didn't we see
with<00:59:56.720><c> the</c><00:59:56.799><c> gdb</c>

00:59:58.150 --> 00:59:58.160 align:start position:0%
with the gdb
 

00:59:58.160 --> 01:00:02.950 align:start position:0%
with the gdb
um<00:59:58.880><c> what</c><00:59:59.200><c> equal</c><00:59:59.839><c> does</c>

01:00:02.950 --> 01:00:02.960 align:start position:0%
 
 

01:00:02.960 --> 01:00:06.150 align:start position:0%
 
i<01:00:03.200><c> i</c><01:00:03.680><c> maybe</c><01:00:04.000><c> i</c><01:00:04.079><c> missed</c><01:00:04.400><c> it</c><01:00:04.559><c> but</c><01:00:04.880><c> um</c><01:00:05.760><c> i</c>

01:00:06.150 --> 01:00:06.160 align:start position:0%
i i maybe i missed it but um i
 

01:00:06.160 --> 01:00:08.549 align:start position:0%
i i maybe i missed it but um i
think<01:00:06.400><c> we</c><01:00:06.960><c> jumped</c><01:00:07.359><c> directly</c><01:00:07.920><c> into</c><01:00:08.319><c> the</c>

01:00:08.549 --> 01:00:08.559 align:start position:0%
think we jumped directly into the
 

01:00:08.559 --> 01:00:11.829 align:start position:0%
think we jumped directly into the
trampoline

01:00:11.829 --> 01:00:11.839 align:start position:0%
 
 

01:00:11.839 --> 01:00:16.230 align:start position:0%
 
he<01:00:12.079><c> called</c><01:00:13.119><c> ecall</c><01:00:13.760><c> did</c><01:00:14.559><c> jump</c>

01:00:16.230 --> 01:00:16.240 align:start position:0%
he called ecall did jump
 

01:00:16.240 --> 01:00:19.670 align:start position:0%
he called ecall did jump
what<01:00:16.480><c> ecall</c><01:00:17.119><c> does</c><01:00:18.240><c> is</c>

01:00:19.670 --> 01:00:19.680 align:start position:0%
what ecall does is
 

01:00:19.680 --> 01:00:22.309 align:start position:0%
what ecall does is
just<01:00:20.319><c> switch</c><01:00:20.720><c> just</c><01:00:21.119><c> changes</c><01:00:21.520><c> the</c><01:00:21.839><c> mode</c><01:00:22.079><c> bit</c><01:00:22.240><c> to</c>

01:00:22.309 --> 01:00:22.319 align:start position:0%
just switch just changes the mode bit to
 

01:00:22.319 --> 01:00:23.910 align:start position:0%
just switch just changes the mode bit to
be<01:00:22.480><c> supervisor</c>

01:00:23.910 --> 01:00:23.920 align:start position:0%
be supervisor
 

01:00:23.920 --> 01:00:29.349 align:start position:0%
be supervisor
and<01:00:26.880><c> equals</c><01:00:27.440><c> sets</c><01:00:27.920><c> the</c>

01:00:29.349 --> 01:00:29.359 align:start position:0%
and equals sets the
 

01:00:29.359 --> 01:00:31.270 align:start position:0%
and equals sets the
program<01:00:29.760><c> counter</c><01:00:30.079><c> register</c><01:00:30.559><c> to</c><01:00:30.640><c> be</c><01:00:30.799><c> equal</c><01:00:31.119><c> to</c>

01:00:31.270 --> 01:00:31.280 align:start position:0%
program counter register to be equal to
 

01:00:31.280 --> 01:00:32.789 align:start position:0%
program counter register to be equal to
the<01:00:31.760><c> whatever</c><01:00:32.160><c> happens</c>

01:00:32.789 --> 01:00:32.799 align:start position:0%
the whatever happens
 

01:00:32.799 --> 01:00:34.470 align:start position:0%
the whatever happens
whatever<01:00:33.119><c> the</c><01:00:33.200><c> kernel</c><01:00:33.599><c> happened</c><01:00:33.839><c> to</c><01:00:34.000><c> store</c><01:00:34.319><c> in</c>

01:00:34.470 --> 01:00:34.480 align:start position:0%
whatever the kernel happened to store in
 

01:00:34.480 --> 01:00:36.230 align:start position:0%
whatever the kernel happened to store in
st<01:00:34.880><c> back</c>

01:00:36.230 --> 01:00:36.240 align:start position:0%
st back
 

01:00:36.240 --> 01:00:38.910 align:start position:0%
st back
kernel<01:00:36.559><c> stored</c><01:00:36.799><c> this</c><01:00:37.040><c> value</c><01:00:37.440><c> i</c><01:00:37.839><c> just</c><01:00:38.000><c> printed</c>

01:00:38.910 --> 01:00:38.920 align:start position:0%
kernel stored this value i just printed
 

01:00:38.920 --> 01:00:40.390 align:start position:0%
kernel stored this value i just printed
3dff00<01:00:39.920><c> which</c><01:00:40.160><c> is</c>

01:00:40.390 --> 01:00:40.400 align:start position:0%
3dff00 which is
 

01:00:40.400 --> 01:00:42.470 align:start position:0%
3dff00 which is
the<01:00:40.480><c> beginning</c><01:00:40.720><c> of</c><01:00:40.799><c> the</c><01:00:40.880><c> trampoline</c><01:00:41.359><c> page</c><01:00:42.319><c> the</c>

01:00:42.470 --> 01:00:42.480 align:start position:0%
the beginning of the trampoline page the
 

01:00:42.480 --> 01:00:43.670 align:start position:0%
the beginning of the trampoline page the
kernel<01:00:42.799><c> stores</c>

01:00:43.670 --> 01:00:43.680 align:start position:0%
kernel stores
 

01:00:43.680 --> 01:00:45.589 align:start position:0%
kernel stores
this<01:00:43.920><c> number</c><01:00:44.240><c> in</c><01:00:44.400><c> st</c><01:00:44.799><c> vac</c><01:00:45.040><c> before</c><01:00:45.280><c> entering</c>

01:00:45.589 --> 01:00:45.599 align:start position:0%
this number in st vac before entering
 

01:00:45.599 --> 01:00:47.190 align:start position:0%
this number in st vac before entering
user<01:00:45.920><c> space</c>

01:00:47.190 --> 01:00:47.200 align:start position:0%
user space
 

01:00:47.200 --> 01:00:49.670 align:start position:0%
user space
so<01:00:47.440><c> where</c><01:00:47.839><c> ecall</c><01:00:48.400><c> goes</c><01:00:49.040><c> that</c><01:00:49.280><c> is</c><01:00:49.359><c> where</c><01:00:49.520><c> it</c>

01:00:49.670 --> 01:00:49.680 align:start position:0%
so where ecall goes that is where it
 

01:00:49.680 --> 01:00:50.789 align:start position:0%
so where ecall goes that is where it
says<01:00:49.920><c> the</c><01:00:50.000><c> program</c>

01:00:50.789 --> 01:00:50.799 align:start position:0%
says the program
 

01:00:50.799 --> 01:00:54.150 align:start position:0%
says the program
counter<01:00:51.200><c> to</c><01:00:51.920><c> is</c><01:00:52.480><c> st</c><01:00:52.960><c> vac</c><01:00:53.680><c> which</c><01:00:53.920><c> is</c><01:00:54.079><c> the</c>

01:00:54.150 --> 01:00:54.160 align:start position:0%
counter to is st vac which is the
 

01:00:54.160 --> 01:00:58.390 align:start position:0%
counter to is st vac which is the
beginning<01:00:54.559><c> of</c><01:00:54.640><c> the</c><01:00:54.799><c> trampoline</c><01:00:55.280><c> page</c>

01:00:58.390 --> 01:00:58.400 align:start position:0%
 
 

01:00:58.400 --> 01:01:02.309 align:start position:0%
 
does<01:00:58.559><c> that</c><01:00:58.799><c> answer</c><01:00:59.040><c> your</c><01:00:59.200><c> question</c>

01:01:02.309 --> 01:01:02.319 align:start position:0%
 
 

01:01:02.319 --> 01:01:08.549 align:start position:0%
 
yes<01:01:03.119><c> i</c><01:01:03.280><c> think</c><01:01:03.520><c> so</c><01:01:04.319><c> okay</c>

01:01:08.549 --> 01:01:08.559 align:start position:0%
 
 

01:01:08.559 --> 01:01:11.349 align:start position:0%
 
okay<01:01:08.799><c> so</c><01:01:08.960><c> now</c><01:01:09.119><c> we're</c><01:01:09.359><c> in</c><01:01:09.520><c> uh</c><01:01:09.839><c> when</c><01:01:10.079><c> user</c><01:01:10.400><c> trap</c>

01:01:11.349 --> 01:01:11.359 align:start position:0%
okay so now we're in uh when user trap
 

01:01:11.359 --> 01:01:13.270 align:start position:0%
okay so now we're in uh when user trap
user<01:01:11.680><c> tribe</c><01:01:11.920><c> is</c><01:01:12.079><c> entered</c><01:01:12.480><c> actually</c><01:01:12.720><c> just</c><01:01:12.960><c> like</c>

01:01:13.270 --> 01:01:13.280 align:start position:0%
user tribe is entered actually just like
 

01:01:13.280 --> 01:01:16.950 align:start position:0%
user tribe is entered actually just like
the<01:01:13.440><c> trampoline</c><01:01:13.920><c> page</c><01:01:14.319><c> and</c>

01:01:16.950 --> 01:01:16.960 align:start position:0%
 
 

01:01:16.960 --> 01:01:18.950 align:start position:0%
 
just<01:01:17.119><c> like</c><01:01:17.280><c> the</c><01:01:17.359><c> trampoline</c><01:01:17.839><c> page</c><01:01:18.720><c> for</c><01:01:18.880><c> a</c>

01:01:18.950 --> 01:01:18.960 align:start position:0%
just like the trampoline page for a
 

01:01:18.960 --> 01:01:20.549 align:start position:0%
just like the trampoline page for a
number<01:01:19.200><c> of</c><01:01:19.440><c> different</c><01:01:19.760><c> kinds</c><01:01:20.079><c> of</c><01:01:20.160><c> traps</c>

01:01:20.549 --> 01:01:20.559 align:start position:0%
number of different kinds of traps
 

01:01:20.559 --> 01:01:21.589 align:start position:0%
number of different kinds of traps
there's<01:01:20.720><c> system</c><01:01:21.119><c> calls</c>

01:01:21.589 --> 01:01:21.599 align:start position:0%
there's system calls
 

01:01:21.599 --> 01:01:23.589 align:start position:0%
there's system calls
there's<01:01:21.839><c> exceptions</c><01:01:22.400><c> like</c><01:01:22.559><c> dividing</c><01:01:22.960><c> by</c><01:01:23.119><c> zero</c>

01:01:23.589 --> 01:01:23.599 align:start position:0%
there's exceptions like dividing by zero
 

01:01:23.599 --> 01:01:26.069 align:start position:0%
there's exceptions like dividing by zero
or<01:01:23.839><c> using</c><01:01:24.160><c> a</c><01:01:24.400><c> unmapped</c><01:01:25.040><c> virtual</c><01:01:25.359><c> address</c>

01:01:26.069 --> 01:01:26.079 align:start position:0%
or using a unmapped virtual address
 

01:01:26.079 --> 01:01:27.589 align:start position:0%
or using a unmapped virtual address
and<01:01:26.240><c> there's</c><01:01:26.480><c> a</c><01:01:26.559><c> device</c><01:01:26.960><c> interrupts</c><01:01:27.359><c> and</c><01:01:27.520><c> they</c>

01:01:27.589 --> 01:01:27.599 align:start position:0%
and there's a device interrupts and they
 

01:01:27.599 --> 01:01:30.470 align:start position:0%
and there's a device interrupts and they
all<01:01:27.760><c> come</c><01:01:28.000><c> here</c><01:01:28.960><c> and</c><01:01:29.119><c> so</c>

01:01:30.470 --> 01:01:30.480 align:start position:0%
all come here and so
 

01:01:30.480 --> 01:01:32.870 align:start position:0%
all come here and so
user<01:01:30.799><c> trap</c><01:01:31.040><c> sort</c><01:01:31.200><c> of</c><01:01:31.359><c> saves</c><01:01:31.680><c> and</c><01:01:31.760><c> restores</c>

01:01:32.870 --> 01:01:32.880 align:start position:0%
user trap sort of saves and restores
 

01:01:32.880 --> 01:01:34.630 align:start position:0%
user trap sort of saves and restores
hardware<01:01:33.280><c> state</c><01:01:33.440><c> but</c><01:01:33.599><c> it</c><01:01:33.760><c> also</c><01:01:33.920><c> needs</c><01:01:34.160><c> to</c>

01:01:34.630 --> 01:01:34.640 align:start position:0%
hardware state but it also needs to
 

01:01:34.640 --> 01:01:37.670 align:start position:0%
hardware state but it also needs to
look<01:01:34.880><c> at</c><01:01:34.960><c> the</c><01:01:35.119><c> state</c><01:01:35.520><c> at</c><01:01:35.680><c> the</c><01:01:36.720><c> cause</c><01:01:37.119><c> of</c><01:01:37.280><c> the</c><01:01:37.119><c> of</c>

01:01:37.670 --> 01:01:37.680 align:start position:0%
look at the state at the cause of the of
 

01:01:37.680 --> 01:01:38.470 align:start position:0%
look at the state at the cause of the of
the<01:01:37.839><c> trap</c>

01:01:38.470 --> 01:01:38.480 align:start position:0%
the trap
 

01:01:38.480 --> 01:01:42.150 align:start position:0%
the trap
to<01:01:38.640><c> figure</c><01:01:38.880><c> out</c><01:01:39.359><c> what</c><01:01:39.520><c> to</c><01:01:39.680><c> do</c><01:01:39.839><c> with</c><01:01:40.079><c> it</c><01:01:40.799><c> um</c>

01:01:42.150 --> 01:01:42.160 align:start position:0%
to figure out what to do with it um
 

01:01:42.160 --> 01:01:43.670 align:start position:0%
to figure out what to do with it um
and<01:01:42.319><c> so</c><01:01:42.480><c> we're</c><01:01:42.559><c> gonna</c><01:01:42.720><c> see</c><01:01:42.880><c> both</c><01:01:43.119><c> things</c><01:01:43.359><c> as</c><01:01:43.520><c> we</c>

01:01:43.670 --> 01:01:43.680 align:start position:0%
and so we're gonna see both things as we
 

01:01:43.680 --> 01:01:46.230 align:start position:0%
and so we're gonna see both things as we
execute<01:01:44.079><c> along</c><01:01:44.559><c> in</c><01:01:44.880><c> user</c><01:01:45.200><c> trap</c>

01:01:46.230 --> 01:01:46.240 align:start position:0%
execute along in user trap
 

01:01:46.240 --> 01:01:49.430 align:start position:0%
execute along in user trap
let<01:01:46.400><c> me</c><01:01:46.480><c> just</c><01:01:47.280><c> um</c>

01:01:49.430 --> 01:01:49.440 align:start position:0%
let me just um
 

01:01:49.440 --> 01:01:52.710 align:start position:0%
let me just um
run<01:01:49.680><c> stuff</c><01:01:49.920><c> in</c><01:01:50.000><c> user</c><01:01:50.319><c> trap</c><01:01:50.640><c> let's</c><01:01:50.880><c> see</c>

01:01:52.710 --> 01:01:52.720 align:start position:0%
run stuff in user trap let's see
 

01:01:52.720 --> 01:01:54.950 align:start position:0%
run stuff in user trap let's see
the<01:01:52.799><c> first</c><01:01:53.040><c> thing</c><01:01:53.200><c> it</c><01:01:53.280><c> does</c><01:01:53.520><c> here</c><01:01:53.760><c> is</c><01:01:53.920><c> that</c><01:01:54.319><c> it</c>

01:01:54.950 --> 01:01:54.960 align:start position:0%
the first thing it does here is that it
 

01:01:54.960 --> 01:01:55.910 align:start position:0%
the first thing it does here is that it
changes<01:01:55.440><c> that</c><01:01:55.680><c> s</c>

01:01:55.910 --> 01:01:55.920 align:start position:0%
changes that s
 

01:01:55.920 --> 01:02:00.390 align:start position:0%
changes that s
t<01:01:56.160><c> back</c><01:01:56.400><c> register</c><01:01:57.359><c> um</c><01:01:58.079><c> it</c><01:01:58.319><c> turns</c><01:01:58.640><c> out</c><01:01:58.720><c> that</c><01:01:58.960><c> the</c>

01:02:00.390 --> 01:02:00.400 align:start position:0%
t back register um it turns out that the
 

01:02:00.400 --> 01:02:03.430 align:start position:0%
t back register um it turns out that the
the<01:02:00.640><c> way</c><01:02:01.039><c> xv6</c><01:02:01.680><c> handles</c><01:02:02.079><c> traps</c><01:02:02.880><c> is</c><01:02:03.039><c> different</c>

01:02:03.430 --> 01:02:03.440 align:start position:0%
the way xv6 handles traps is different
 

01:02:03.440 --> 01:02:04.870 align:start position:0%
the way xv6 handles traps is different
depending<01:02:03.839><c> on</c><01:02:03.920><c> whether</c><01:02:04.160><c> they</c><01:02:04.240><c> come</c><01:02:04.400><c> from</c><01:02:04.559><c> user</c>

01:02:04.870 --> 01:02:04.880 align:start position:0%
depending on whether they come from user
 

01:02:04.880 --> 01:02:06.789 align:start position:0%
depending on whether they come from user
space<01:02:05.359><c> or</c><01:02:05.520><c> from</c><01:02:05.680><c> the</c><01:02:05.839><c> kernel</c>

01:02:06.789 --> 01:02:06.799 align:start position:0%
space or from the kernel
 

01:02:06.799 --> 01:02:08.069 align:start position:0%
space or from the kernel
we've<01:02:07.039><c> only</c><01:02:07.280><c> been</c><01:02:07.440><c> talking</c><01:02:07.760><c> about</c><01:02:07.920><c> what</c>

01:02:08.069 --> 01:02:08.079 align:start position:0%
we've only been talking about what
 

01:02:08.079 --> 01:02:10.870 align:start position:0%
we've only been talking about what
happens<01:02:08.400><c> if</c><01:02:08.480><c> a</c><01:02:08.559><c> trap</c><01:02:09.359><c> occurs</c><01:02:09.760><c> from</c><01:02:09.920><c> user</c><01:02:10.240><c> space</c>

01:02:10.870 --> 01:02:10.880 align:start position:0%
happens if a trap occurs from user space
 

01:02:10.880 --> 01:02:12.630 align:start position:0%
happens if a trap occurs from user space
there's<01:02:11.119><c> a</c><01:02:11.200><c> quite</c><01:02:11.520><c> different</c><01:02:12.160><c> sequence</c><01:02:12.480><c> of</c>

01:02:12.630 --> 01:02:12.640 align:start position:0%
there's a quite different sequence of
 

01:02:12.640 --> 01:02:14.069 align:start position:0%
there's a quite different sequence of
events

01:02:14.069 --> 01:02:14.079 align:start position:0%
events
 

01:02:14.079 --> 01:02:16.069 align:start position:0%
events
for<01:02:14.240><c> traps</c><01:02:14.559><c> that</c><01:02:14.640><c> come</c><01:02:14.799><c> from</c><01:02:14.960><c> the</c><01:02:15.119><c> kernel</c><01:02:15.839><c> that</c>

01:02:16.069 --> 01:02:16.079 align:start position:0%
for traps that come from the kernel that
 

01:02:16.079 --> 01:02:17.750 align:start position:0%
for traps that come from the kernel that
occur<01:02:16.480><c> while</c><01:02:16.720><c> in</c><01:02:16.799><c> the</c><01:02:16.880><c> kernel</c><01:02:17.200><c> because</c><01:02:17.440><c> after</c>

01:02:17.750 --> 01:02:17.760 align:start position:0%
occur while in the kernel because after
 

01:02:17.760 --> 01:02:18.789 align:start position:0%
occur while in the kernel because after
all<01:02:17.920><c> for</c><01:02:18.079><c> example</c>

01:02:18.789 --> 01:02:18.799 align:start position:0%
all for example
 

01:02:18.799 --> 01:02:21.109 align:start position:0%
all for example
the<01:02:18.960><c> kernel</c><01:02:20.079><c> is</c><01:02:20.240><c> already</c><01:02:20.480><c> using</c><01:02:20.720><c> the</c><01:02:20.799><c> kernel</c>

01:02:21.109 --> 01:02:21.119 align:start position:0%
the kernel is already using the kernel
 

01:02:21.119 --> 01:02:21.990 align:start position:0%
the kernel is already using the kernel
page<01:02:21.440><c> table</c>

01:02:21.990 --> 01:02:22.000 align:start position:0%
page table
 

01:02:22.000 --> 01:02:24.150 align:start position:0%
page table
um<01:02:22.559><c> you</c><01:02:22.640><c> know</c><01:02:22.720><c> if</c><01:02:22.880><c> a</c><01:02:22.960><c> trap</c><01:02:23.280><c> occurs</c><01:02:24.000><c> while</c>

01:02:24.150 --> 01:02:24.160 align:start position:0%
um you know if a trap occurs while
 

01:02:24.160 --> 01:02:25.190 align:start position:0%
um you know if a trap occurs while
you're<01:02:24.319><c> in</c><01:02:24.400><c> the</c><01:02:24.480><c> kernel</c><01:02:24.720><c> you</c><01:02:24.880><c> already</c><01:02:25.119><c> have</c>

01:02:25.190 --> 01:02:25.200 align:start position:0%
you're in the kernel you already have
 

01:02:25.200 --> 01:02:26.470 align:start position:0%
you're in the kernel you already have
the<01:02:25.359><c> kernel</c><01:02:25.599><c> page</c><01:02:25.839><c> tables</c><01:02:26.079><c> there's</c><01:02:26.240><c> a</c><01:02:26.319><c> whole</c>

01:02:26.470 --> 01:02:26.480 align:start position:0%
the kernel page tables there's a whole
 

01:02:26.480 --> 01:02:27.510 align:start position:0%
the kernel page tables there's a whole
bunch<01:02:26.640><c> of</c><01:02:26.720><c> stuff</c><01:02:26.880><c> that</c><01:02:27.039><c> doesn't</c><01:02:27.280><c> have</c><01:02:27.440><c> to</c>

01:02:27.510 --> 01:02:27.520 align:start position:0%
bunch of stuff that doesn't have to
 

01:02:27.520 --> 01:02:28.549 align:start position:0%
bunch of stuff that doesn't have to
happen

01:02:28.549 --> 01:02:28.559 align:start position:0%
happen
 

01:02:28.559 --> 01:02:31.750 align:start position:0%
happen
if<01:02:28.720><c> the</c><01:02:28.880><c> trap</c><01:02:29.599><c> occurred</c><01:02:30.079><c> while</c><01:02:30.319><c> in</c><01:02:30.480><c> the</c><01:02:30.559><c> kernel</c>

01:02:31.750 --> 01:02:31.760 align:start position:0%
if the trap occurred while in the kernel
 

01:02:31.760 --> 01:02:33.750 align:start position:0%
if the trap occurred while in the kernel
so<01:02:31.920><c> before</c><01:02:32.799><c> getting</c><01:02:33.039><c> much</c><01:02:33.280><c> further</c><01:02:33.599><c> in</c><01:02:33.680><c> the</c>

01:02:33.750 --> 01:02:33.760 align:start position:0%
so before getting much further in the
 

01:02:33.760 --> 01:02:35.349 align:start position:0%
so before getting much further in the
kernel<01:02:34.079><c> code</c><01:02:34.720><c> we</c><01:02:34.960><c> change</c>

01:02:35.349 --> 01:02:35.359 align:start position:0%
kernel code we change
 

01:02:35.359 --> 01:02:37.349 align:start position:0%
kernel code we change
sd<01:02:35.760><c> vac</c><01:02:36.160><c> to</c><01:02:36.319><c> point</c><01:02:36.480><c> to</c><01:02:36.640><c> this</c><01:02:36.799><c> kernel</c><01:02:37.119><c> vect</c>

01:02:37.349 --> 01:02:37.359 align:start position:0%
sd vac to point to this kernel vect
 

01:02:37.359 --> 01:02:38.549 align:start position:0%
sd vac to point to this kernel vect
which<01:02:37.520><c> is</c><01:02:37.680><c> the</c><01:02:38.000><c> kernel</c>

01:02:38.549 --> 01:02:38.559 align:start position:0%
which is the kernel
 

01:02:38.559 --> 01:02:40.870 align:start position:0%
which is the kernel
trap<01:02:39.039><c> handler</c><01:02:39.839><c> rather</c><01:02:40.160><c> than</c><01:02:40.240><c> the</c><01:02:40.319><c> user</c><01:02:40.640><c> trap</c>

01:02:40.870 --> 01:02:40.880 align:start position:0%
trap handler rather than the user trap
 

01:02:40.880 --> 01:02:44.549 align:start position:0%
trap handler rather than the user trap
handler

01:02:44.549 --> 01:02:44.559 align:start position:0%
 
 

01:02:44.559 --> 01:02:46.150 align:start position:0%
 
we<01:02:44.720><c> need</c><01:02:44.880><c> to</c><01:02:45.200><c> for</c><01:02:45.359><c> various</c><01:02:45.680><c> reasons</c><01:02:45.920><c> we</c><01:02:46.079><c> need</c>

01:02:46.150 --> 01:02:46.160 align:start position:0%
we need to for various reasons we need
 

01:02:46.160 --> 01:02:47.990 align:start position:0%
we need to for various reasons we need
to<01:02:46.240><c> figure</c><01:02:46.480><c> out</c><01:02:46.640><c> what</c><01:02:46.880><c> process</c><01:02:47.200><c> we're</c><01:02:47.440><c> running</c>

01:02:47.990 --> 01:02:48.000 align:start position:0%
to figure out what process we're running
 

01:02:48.000 --> 01:02:49.589 align:start position:0%
to figure out what process we're running
we<01:02:48.160><c> do</c><01:02:48.319><c> that</c><01:02:48.400><c> by</c><01:02:48.640><c> calling</c><01:02:48.880><c> this</c><01:02:49.039><c> myproc</c>

01:02:49.589 --> 01:02:49.599 align:start position:0%
we do that by calling this myproc
 

01:02:49.599 --> 01:02:51.589 align:start position:0%
we do that by calling this myproc
function<01:02:50.480><c> and</c><01:02:50.559><c> my</c><01:02:50.799><c> proc</c><01:02:51.039><c> actually</c><01:02:51.280><c> looks</c><01:02:51.440><c> at</c>

01:02:51.589 --> 01:02:51.599 align:start position:0%
function and my proc actually looks at
 

01:02:51.599 --> 01:02:52.230 align:start position:0%
function and my proc actually looks at
an<01:02:51.760><c> array</c>

01:02:52.230 --> 01:02:52.240 align:start position:0%
an array
 

01:02:52.240 --> 01:02:55.029 align:start position:0%
an array
indexed<01:02:52.640><c> by</c><01:02:52.799><c> the</c><01:02:53.039><c> current</c><01:02:53.839><c> core</c><01:02:54.160><c> number</c><01:02:54.640><c> the</c>

01:02:55.029 --> 01:02:55.039 align:start position:0%
indexed by the current core number the
 

01:02:55.039 --> 01:02:55.990 align:start position:0%
indexed by the current core number the
heart<01:02:55.359><c> id</c>

01:02:55.990 --> 01:02:56.000 align:start position:0%
heart id
 

01:02:56.000 --> 01:03:00.069 align:start position:0%
heart id
which<01:02:56.240><c> you</c><01:02:56.400><c> remember</c><01:02:56.640><c> we</c><01:02:56.799><c> put</c><01:02:57.039><c> in</c><01:02:57.680><c> tp</c>

01:03:00.069 --> 01:03:00.079 align:start position:0%
which you remember we put in tp
 

01:03:00.079 --> 01:03:01.430 align:start position:0%
which you remember we put in tp
that's<01:03:00.319><c> how</c><01:03:00.480><c> myproduct</c><01:03:00.880><c> figures</c><01:03:01.119><c> out</c><01:03:01.200><c> what</c>

01:03:01.430 --> 01:03:01.440 align:start position:0%
that's how myproduct figures out what
 

01:03:01.440 --> 01:03:07.190 align:start position:0%
that's how myproduct figures out what
process<01:03:01.839><c> is</c><01:03:01.920><c> currently</c><01:03:02.240><c> running</c>

01:03:07.190 --> 01:03:07.200 align:start position:0%
 
 

01:03:07.200 --> 01:03:09.750 align:start position:0%
 
we<01:03:07.359><c> need</c><01:03:07.520><c> to</c><01:03:07.680><c> save</c><01:03:08.160><c> that</c><01:03:08.480><c> saved</c><01:03:08.799><c> user</c><01:03:09.440><c> program</c>

01:03:09.750 --> 01:03:09.760 align:start position:0%
we need to save that saved user program
 

01:03:09.760 --> 01:03:11.270 align:start position:0%
we need to save that saved user program
counter<01:03:10.079><c> it's</c><01:03:10.240><c> still</c><01:03:10.480><c> sitting</c><01:03:10.799><c> there</c>

01:03:11.270 --> 01:03:11.280 align:start position:0%
counter it's still sitting there
 

01:03:11.280 --> 01:03:15.109 align:start position:0%
counter it's still sitting there
in<01:03:13.599><c> an</c><01:03:13.839><c> sepc</c>

01:03:15.109 --> 01:03:15.119 align:start position:0%
in an sepc
 

01:03:15.119 --> 01:03:17.270 align:start position:0%
in an sepc
but<01:03:15.839><c> because</c><01:03:16.160><c> one</c><01:03:16.319><c> of</c><01:03:16.319><c> the</c><01:03:16.400><c> things</c><01:03:16.640><c> that</c><01:03:16.880><c> could</c>

01:03:17.270 --> 01:03:17.280 align:start position:0%
but because one of the things that could
 

01:03:17.280 --> 01:03:18.870 align:start position:0%
but because one of the things that could
happen<01:03:17.760><c> while</c><01:03:17.920><c> we're</c><01:03:18.079><c> in</c><01:03:18.160><c> the</c><01:03:18.319><c> kernel</c><01:03:18.640><c> is</c><01:03:18.720><c> that</c>

01:03:18.870 --> 01:03:18.880 align:start position:0%
happen while we're in the kernel is that
 

01:03:18.880 --> 01:03:19.190 align:start position:0%
happen while we're in the kernel is that
we

01:03:19.190 --> 01:03:19.200 align:start position:0%
we
 

01:03:19.200 --> 01:03:21.750 align:start position:0%
we
might<01:03:19.599><c> switch</c><01:03:19.920><c> to</c><01:03:20.079><c> another</c><01:03:20.480><c> process</c><01:03:21.359><c> and</c><01:03:21.520><c> that</c>

01:03:21.750 --> 01:03:21.760 align:start position:0%
might switch to another process and that
 

01:03:21.760 --> 01:03:23.190 align:start position:0%
might switch to another process and that
other<01:03:22.000><c> process</c><01:03:22.400><c> might</c>

01:03:23.190 --> 01:03:23.200 align:start position:0%
other process might
 

01:03:23.200 --> 01:03:26.470 align:start position:0%
other process might
go<01:03:23.359><c> into</c><01:03:23.839><c> that</c><01:03:24.079><c> process</c><01:03:24.640><c> user</c><01:03:24.960><c> space</c><01:03:26.000><c> and</c><01:03:26.079><c> that</c>

01:03:26.470 --> 01:03:26.480 align:start position:0%
go into that process user space and that
 

01:03:26.480 --> 01:03:29.109 align:start position:0%
go into that process user space and that
other<01:03:26.720><c> process</c><01:03:27.200><c> might</c><01:03:28.319><c> make</c><01:03:28.559><c> a</c><01:03:28.640><c> system</c><01:03:28.880><c> call</c>

01:03:29.109 --> 01:03:29.119 align:start position:0%
other process might make a system call
 

01:03:29.119 --> 01:03:29.990 align:start position:0%
other process might make a system call
which<01:03:29.359><c> causes</c>

01:03:29.990 --> 01:03:30.000 align:start position:0%
which causes
 

01:03:30.000 --> 01:03:32.710 align:start position:0%
which causes
scpc<01:03:30.559><c> to</c><01:03:30.640><c> be</c><01:03:30.799><c> overwritten</c><01:03:31.599><c> we</c><01:03:31.760><c> have</c><01:03:31.920><c> to</c><01:03:32.240><c> save</c>

01:03:32.710 --> 01:03:32.720 align:start position:0%
scpc to be overwritten we have to save
 

01:03:32.720 --> 01:03:33.270 align:start position:0%
scpc to be overwritten we have to save
our

01:03:33.270 --> 01:03:33.280 align:start position:0%
our
 

01:03:33.280 --> 01:03:36.710 align:start position:0%
our
sepc<01:03:34.640><c> in</c><01:03:34.960><c> um</c><01:03:35.520><c> some</c><01:03:35.680><c> memory</c><01:03:36.000><c> associated</c><01:03:36.559><c> with</c>

01:03:36.710 --> 01:03:36.720 align:start position:0%
sepc in um some memory associated with
 

01:03:36.720 --> 01:03:37.589 align:start position:0%
sepc in um some memory associated with
this<01:03:36.960><c> process</c>

01:03:37.589 --> 01:03:37.599 align:start position:0%
this process
 

01:03:37.599 --> 01:03:39.589 align:start position:0%
this process
so<01:03:37.760><c> it</c><01:03:37.839><c> doesn't</c><01:03:38.000><c> get</c><01:03:38.240><c> overwritten</c><01:03:39.440><c> and</c><01:03:39.520><c> it</c>

01:03:39.589 --> 01:03:39.599 align:start position:0%
so it doesn't get overwritten and it
 

01:03:39.599 --> 01:03:41.589 align:start position:0%
so it doesn't get overwritten and it
gets<01:03:40.160><c> you</c><01:03:40.319><c> know</c><01:03:40.400><c> we</c><01:03:40.559><c> use</c><01:03:40.720><c> this</c><01:03:40.880><c> trap</c><01:03:41.200><c> frame</c>

01:03:41.589 --> 01:03:41.599 align:start position:0%
gets you know we use this trap frame
 

01:03:41.599 --> 01:03:43.910 align:start position:0%
gets you know we use this trap frame
to<01:03:42.079><c> save</c><01:03:42.400><c> epc</c><01:03:42.960><c> as</c><01:03:43.039><c> well</c><01:03:43.200><c> as</c><01:03:43.359><c> lots</c><01:03:43.520><c> of</c><01:03:43.680><c> other</c>

01:03:43.910 --> 01:03:43.920 align:start position:0%
to save epc as well as lots of other
 

01:03:43.920 --> 01:03:45.349 align:start position:0%
to save epc as well as lots of other
stuff

01:03:45.349 --> 01:03:45.359 align:start position:0%
stuff
 

01:03:45.359 --> 01:03:47.750 align:start position:0%
stuff
and<01:03:45.440><c> anyway</c><01:03:45.760><c> that's</c><01:03:45.920><c> what</c><01:03:46.079><c> this</c><01:03:47.359><c> current</c><01:03:47.520><c> line</c>

01:03:47.750 --> 01:03:47.760 align:start position:0%
and anyway that's what this current line
 

01:03:47.760 --> 01:03:49.589 align:start position:0%
and anyway that's what this current line
of<01:03:47.839><c> code</c><01:03:48.079><c> is</c><01:03:48.160><c> doing</c>

01:03:49.589 --> 01:03:49.599 align:start position:0%
of code is doing
 

01:03:49.599 --> 01:03:52.309 align:start position:0%
of code is doing
the<01:03:49.760><c> next</c><01:03:49.920><c> thing</c><01:03:50.079><c> that</c><01:03:50.160><c> happens</c><01:03:50.480><c> we</c><01:03:50.640><c> need</c><01:03:50.880><c> to</c>

01:03:52.309 --> 01:03:52.319 align:start position:0%
the next thing that happens we need to
 

01:03:52.319 --> 01:03:56.470 align:start position:0%
the next thing that happens we need to
figure<01:03:52.640><c> out</c>

01:03:56.470 --> 01:03:56.480 align:start position:0%
 
 

01:03:56.480 --> 01:03:59.270 align:start position:0%
 
why<01:03:56.720><c> we</c><01:03:56.960><c> came</c><01:03:57.200><c> here</c><01:03:57.760><c> the</c><01:03:58.079><c> s</c><01:03:58.400><c> cause</c><01:03:58.880><c> the</c><01:03:59.039><c> risk</c>

01:03:59.270 --> 01:03:59.280 align:start position:0%
why we came here the s cause the risk
 

01:03:59.280 --> 01:04:00.870 align:start position:0%
why we came here the s cause the risk
five<01:03:59.520><c> s</c><01:03:59.760><c> cause</c><01:04:00.079><c> register</c>

01:04:00.870 --> 01:04:00.880 align:start position:0%
five s cause register
 

01:04:00.880 --> 01:04:02.630 align:start position:0%
five s cause register
has<01:04:01.119><c> a</c><01:04:01.200><c> different</c><01:04:01.440><c> number</c><01:04:01.760><c> depending</c><01:04:02.079><c> on</c><01:04:02.319><c> why</c>

01:04:02.630 --> 01:04:02.640 align:start position:0%
has a different number depending on why
 

01:04:02.640 --> 01:04:04.150 align:start position:0%
has a different number depending on why
this<01:04:02.799><c> trap</c><01:04:03.119><c> occurred</c>

01:04:04.150 --> 01:04:04.160 align:start position:0%
this trap occurred
 

01:04:04.160 --> 01:04:06.870 align:start position:0%
this trap occurred
you<01:04:04.240><c> know</c><01:04:05.280><c> uh</c><01:04:05.520><c> some</c><01:04:05.680><c> kind</c><01:04:05.839><c> of</c><01:04:06.000><c> exception</c><01:04:06.480><c> or</c>

01:04:06.870 --> 01:04:06.880 align:start position:0%
you know uh some kind of exception or
 

01:04:06.880 --> 01:04:08.549 align:start position:0%
you know uh some kind of exception or
versus<01:04:07.359><c> system</c><01:04:07.680><c> call</c><01:04:07.920><c> versus</c><01:04:08.240><c> device</c>

01:04:08.549 --> 01:04:08.559 align:start position:0%
versus system call versus device
 

01:04:08.559 --> 01:04:09.349 align:start position:0%
versus system call versus device
interrupt

01:04:09.349 --> 01:04:09.359 align:start position:0%
interrupt
 

01:04:09.359 --> 01:04:11.750 align:start position:0%
interrupt
value<01:04:09.680><c> eight</c><01:04:09.920><c> means</c><01:04:10.799><c> we're</c><01:04:11.039><c> here</c><01:04:11.280><c> we</c><01:04:11.440><c> took</c><01:04:11.680><c> a</c>

01:04:11.750 --> 01:04:11.760 align:start position:0%
value eight means we're here we took a
 

01:04:11.760 --> 01:04:15.109 align:start position:0%
value eight means we're here we took a
trap<01:04:12.079><c> because</c><01:04:12.240><c> of</c><01:04:12.400><c> a</c><01:04:12.480><c> system</c><01:04:12.799><c> call</c>

01:04:15.109 --> 01:04:15.119 align:start position:0%
 
 

01:04:15.119 --> 01:04:17.829 align:start position:0%
 
and<01:04:15.359><c> hopefully</c><01:04:15.839><c> indeed</c><01:04:17.039><c> this</c><01:04:17.280><c> calls</c><01:04:17.520><c> us</c><01:04:17.680><c> eight</c>

01:04:17.829 --> 01:04:17.839 align:start position:0%
and hopefully indeed this calls us eight
 

01:04:17.839 --> 01:04:19.270 align:start position:0%
and hopefully indeed this calls us eight
it<01:04:17.920><c> does</c><01:04:18.160><c> have</c><01:04:18.319><c> eight</c><01:04:18.480><c> because</c>

01:04:19.270 --> 01:04:19.280 align:start position:0%
it does have eight because
 

01:04:19.280 --> 01:04:21.430 align:start position:0%
it does have eight because
we're<01:04:19.440><c> here</c><01:04:19.599><c> because</c><01:04:19.839><c> of</c><01:04:19.920><c> a</c><01:04:20.000><c> system</c><01:04:20.319><c> call</c><01:04:21.039><c> um</c>

01:04:21.430 --> 01:04:21.440 align:start position:0%
we're here because of a system call um
 

01:04:21.440 --> 01:04:22.630 align:start position:0%
we're here because of a system call um
so<01:04:21.599><c> we're</c><01:04:21.680><c> gonna</c><01:04:21.839><c> execute</c><01:04:22.160><c> this</c>

01:04:22.630 --> 01:04:22.640 align:start position:0%
so we're gonna execute this
 

01:04:22.640 --> 01:04:25.990 align:start position:0%
so we're gonna execute this
this<01:04:22.880><c> if</c><01:04:23.119><c> statement</c><01:04:24.839><c> um</c>

01:04:25.990 --> 01:04:26.000 align:start position:0%
this if statement um
 

01:04:26.000 --> 01:04:27.750 align:start position:0%
this if statement um
first<01:04:26.160><c> thing</c><01:04:26.319><c> is</c><01:04:26.480><c> if</c><01:04:26.640><c> some</c><01:04:27.039><c> other</c><01:04:27.280><c> process</c><01:04:27.680><c> has</c>

01:04:27.750 --> 01:04:27.760 align:start position:0%
first thing is if some other process has
 

01:04:27.760 --> 01:04:29.029 align:start position:0%
first thing is if some other process has
killed<01:04:28.079><c> this</c><01:04:28.240><c> process</c><01:04:28.559><c> we</c><01:04:28.720><c> don't</c><01:04:28.799><c> want</c><01:04:28.880><c> to</c>

01:04:29.029 --> 01:04:29.039 align:start position:0%
killed this process we don't want to
 

01:04:29.039 --> 01:04:29.829 align:start position:0%
killed this process we don't want to
continue<01:04:29.520><c> but</c>

01:04:29.829 --> 01:04:29.839 align:start position:0%
continue but
 

01:04:29.839 --> 01:04:33.910 align:start position:0%
continue but
that's<01:04:30.079><c> not</c><01:04:30.240><c> the</c><01:04:30.319><c> case</c><01:04:30.559><c> for</c><01:04:30.720><c> our</c><01:04:30.960><c> shell</c><01:04:32.799><c> um</c>

01:04:33.910 --> 01:04:33.920 align:start position:0%
that's not the case for our shell um
 

01:04:33.920 --> 01:04:37.109 align:start position:0%
that's not the case for our shell um
it<01:04:34.079><c> turns</c><01:04:34.400><c> out</c><01:04:34.559><c> that</c><01:04:34.720><c> the</c><01:04:34.880><c> risk</c><01:04:35.200><c> 5</c><01:04:36.240><c> the</c><01:04:36.720><c> program</c>

01:04:37.109 --> 01:04:37.119 align:start position:0%
it turns out that the risk 5 the program
 

01:04:37.119 --> 01:04:39.990 align:start position:0%
it turns out that the risk 5 the program
counter<01:04:37.359><c> that</c><01:04:37.520><c> gets</c><01:04:37.839><c> stored</c><01:04:38.480><c> in</c><01:04:38.839><c> sepc</c>

01:04:39.990 --> 01:04:40.000 align:start position:0%
counter that gets stored in sepc
 

01:04:40.000 --> 01:04:42.789 align:start position:0%
counter that gets stored in sepc
is<01:04:40.559><c> the</c><01:04:40.720><c> address</c><01:04:41.119><c> of</c><01:04:41.200><c> the</c><01:04:41.440><c> instruction</c><01:04:42.400><c> that</c>

01:04:42.789 --> 01:04:42.799 align:start position:0%
is the address of the instruction that
 

01:04:42.799 --> 01:04:45.270 align:start position:0%
is the address of the instruction that
caused<01:04:43.520><c> the</c><01:04:43.760><c> trap</c>

01:04:45.270 --> 01:04:45.280 align:start position:0%
caused the trap
 

01:04:45.280 --> 01:04:47.349 align:start position:0%
caused the trap
but<01:04:45.520><c> when</c><01:04:45.680><c> we</c><01:04:45.920><c> resume</c><01:04:46.400><c> we</c><01:04:46.480><c> want</c><01:04:46.640><c> to</c><01:04:46.720><c> resume</c><01:04:47.200><c> at</c>

01:04:47.349 --> 01:04:47.359 align:start position:0%
but when we resume we want to resume at
 

01:04:47.359 --> 01:04:48.710 align:start position:0%
but when we resume we want to resume at
the<01:04:47.520><c> next</c><01:04:47.920><c> instruction</c>

01:04:48.710 --> 01:04:48.720 align:start position:0%
the next instruction
 

01:04:48.720 --> 01:04:51.430 align:start position:0%
the next instruction
after<01:04:49.280><c> the</c><01:04:49.520><c> e-call</c><01:04:50.319><c> and</c><01:04:50.559><c> so</c><01:04:50.720><c> therefore</c><01:04:51.039><c> we</c>

01:04:51.430 --> 01:04:51.440 align:start position:0%
after the e-call and so therefore we
 

01:04:51.440 --> 01:04:51.829 align:start position:0%
after the e-call and so therefore we
this

01:04:51.829 --> 01:04:51.839 align:start position:0%
this
 

01:04:51.839 --> 01:04:53.670 align:start position:0%
this
code<01:04:52.319><c> for</c><01:04:52.559><c> system</c><01:04:52.960><c> calls</c><01:04:53.200><c> which</c><01:04:53.359><c> need</c><01:04:53.520><c> to</c>

01:04:53.670 --> 01:04:53.680 align:start position:0%
code for system calls which need to
 

01:04:53.680 --> 01:04:56.150 align:start position:0%
code for system calls which need to
return

01:04:56.150 --> 01:04:56.160 align:start position:0%
 
 

01:04:56.160 --> 01:04:58.950 align:start position:0%
 
we<01:04:56.400><c> add</c><01:04:56.640><c> four</c><01:04:57.119><c> to</c><01:04:57.359><c> the</c><01:04:57.599><c> saved</c><01:04:58.319><c> user</c><01:04:58.640><c> program</c>

01:04:58.950 --> 01:04:58.960 align:start position:0%
we add four to the saved user program
 

01:04:58.960 --> 01:05:00.789 align:start position:0%
we add four to the saved user program
counter<01:04:59.359><c> so</c><01:04:59.520><c> that</c><01:04:59.680><c> we</c>

01:05:00.789 --> 01:05:00.799 align:start position:0%
counter so that we
 

01:05:00.799 --> 01:05:02.470 align:start position:0%
counter so that we
resume<01:05:01.200><c> on</c><01:05:01.359><c> the</c><01:05:01.440><c> next</c><01:05:01.760><c> instruction</c><01:05:02.240><c> and</c><01:05:02.319><c> don't</c>

01:05:02.470 --> 01:05:02.480 align:start position:0%
resume on the next instruction and don't
 

01:05:02.480 --> 01:05:03.829 align:start position:0%
resume on the next instruction and don't
just<01:05:02.799><c> re-execute</c>

01:05:03.829 --> 01:05:03.839 align:start position:0%
just re-execute
 

01:05:03.839 --> 01:05:08.230 align:start position:0%
just re-execute
the<01:05:06.839><c> e-call</c>

01:05:08.230 --> 01:05:08.240 align:start position:0%
the e-call
 

01:05:08.240 --> 01:05:11.829 align:start position:0%
the e-call
all<01:05:08.400><c> right</c><01:05:08.640><c> next</c><01:05:09.280><c> it</c><01:05:09.359><c> turns</c><01:05:09.680><c> out</c><01:05:09.839><c> that</c><01:05:10.480><c> xv6</c>

01:05:11.829 --> 01:05:11.839 align:start position:0%
all right next it turns out that xv6
 

01:05:11.839 --> 01:05:13.670 align:start position:0%
all right next it turns out that xv6
enables<01:05:12.319><c> interrupts</c><01:05:12.960><c> while</c><01:05:13.119><c> it's</c><01:05:13.280><c> handling</c>

01:05:13.670 --> 01:05:13.680 align:start position:0%
enables interrupts while it's handling
 

01:05:13.680 --> 01:05:16.230 align:start position:0%
enables interrupts while it's handling
system<01:05:14.000><c> calls</c><01:05:14.319><c> just</c><01:05:14.480><c> so</c><01:05:14.559><c> that</c><01:05:14.720><c> interrupts</c>

01:05:16.230 --> 01:05:16.240 align:start position:0%
system calls just so that interrupts
 

01:05:16.240 --> 01:05:18.309 align:start position:0%
system calls just so that interrupts
can<01:05:16.400><c> be</c><01:05:16.559><c> served</c><01:05:16.880><c> faster</c><01:05:17.680><c> some</c><01:05:17.839><c> system</c><01:05:18.160><c> calls</c>

01:05:18.309 --> 01:05:18.319 align:start position:0%
can be served faster some system calls
 

01:05:18.319 --> 01:05:20.220 align:start position:0%
can be served faster some system calls
take<01:05:18.480><c> a</c><01:05:18.559><c> lot</c><01:05:18.720><c> of</c><01:05:18.799><c> time</c>

01:05:20.220 --> 01:05:20.230 align:start position:0%
take a lot of time
 

01:05:20.230 --> 01:05:21.349 align:start position:0%
take a lot of time
[Music]

01:05:21.349 --> 01:05:21.359 align:start position:0%
[Music]
 

01:05:21.359 --> 01:05:23.670 align:start position:0%
[Music]
uh<01:05:21.680><c> interrupts</c><01:05:22.079><c> are</c><01:05:22.240><c> always</c><01:05:22.559><c> turned</c><01:05:22.880><c> off</c><01:05:23.520><c> by</c>

01:05:23.670 --> 01:05:23.680 align:start position:0%
uh interrupts are always turned off by
 

01:05:23.680 --> 01:05:24.630 align:start position:0%
uh interrupts are always turned off by
the<01:05:24.000><c> risc-v</c>

01:05:24.630 --> 01:05:24.640 align:start position:0%
the risc-v
 

01:05:24.640 --> 01:05:27.270 align:start position:0%
the risc-v
trap<01:05:24.960><c> hardware</c><01:05:26.160><c> um</c><01:05:26.640><c> and</c><01:05:26.799><c> so</c><01:05:26.960><c> we</c><01:05:27.039><c> have</c><01:05:27.119><c> to</c>

01:05:27.270 --> 01:05:27.280 align:start position:0%
trap hardware um and so we have to
 

01:05:27.280 --> 01:05:28.069 align:start position:0%
trap hardware um and so we have to
explicitly

01:05:28.069 --> 01:05:28.079 align:start position:0%
explicitly
 

01:05:28.079 --> 01:05:30.470 align:start position:0%
explicitly
turn<01:05:28.319><c> them</c><01:05:28.400><c> back</c><01:05:28.640><c> on</c><01:05:28.799><c> at</c><01:05:28.880><c> this</c><01:05:29.039><c> point</c><01:05:30.160><c> um</c><01:05:30.400><c> and</c>

01:05:30.470 --> 01:05:30.480 align:start position:0%
turn them back on at this point um and
 

01:05:30.480 --> 01:05:32.549 align:start position:0%
turn them back on at this point um and
the<01:05:30.559><c> next</c><01:05:30.720><c> thing</c><01:05:30.880><c> that</c><01:05:31.039><c> happens</c>

01:05:32.549 --> 01:05:32.559 align:start position:0%
the next thing that happens
 

01:05:32.559 --> 01:05:34.390 align:start position:0%
the next thing that happens
is<01:05:32.720><c> we</c><01:05:32.880><c> call</c><01:05:33.039><c> this</c><01:05:33.200><c> syscall</c><01:05:33.680><c> function</c><01:05:34.079><c> the</c><01:05:34.160><c> job</c>

01:05:34.390 --> 01:05:34.400 align:start position:0%
is we call this syscall function the job
 

01:05:34.400 --> 01:05:37.430 align:start position:0%
is we call this syscall function the job
of<01:05:34.839><c> syscall</c><01:05:35.920><c> i'll</c><01:05:36.079><c> just</c><01:05:36.319><c> enter</c><01:05:36.640><c> it</c>

01:05:37.430 --> 01:05:37.440 align:start position:0%
of syscall i'll just enter it
 

01:05:37.440 --> 01:05:40.470 align:start position:0%
of syscall i'll just enter it
um<01:05:39.039><c> it's</c><01:05:39.200><c> defined</c><01:05:39.760><c> in</c>

01:05:40.470 --> 01:05:40.480 align:start position:0%
um it's defined in
 

01:05:40.480 --> 01:05:43.510 align:start position:0%
um it's defined in
just<01:05:40.720><c> called.c</c><01:05:42.720><c> here</c><01:05:42.880><c> we</c><01:05:43.039><c> are</c>

01:05:43.510 --> 01:05:43.520 align:start position:0%
just called.c here we are
 

01:05:43.520 --> 01:05:44.950 align:start position:0%
just called.c here we are
what<01:05:43.680><c> it</c><01:05:43.760><c> does</c><01:05:43.920><c> is</c><01:05:44.079><c> it</c><01:05:44.160><c> looks</c><01:05:44.400><c> up</c><01:05:44.480><c> the</c><01:05:44.640><c> system</c>

01:05:44.950 --> 01:05:44.960 align:start position:0%
what it does is it looks up the system
 

01:05:44.960 --> 01:05:46.560 align:start position:0%
what it does is it looks up the system
call<01:05:45.200><c> number</c><01:05:45.680><c> in</c><01:05:45.920><c> this</c><01:05:46.240><c> um</c>

01:05:46.560 --> 01:05:46.570 align:start position:0%
call number in this um
 

01:05:46.570 --> 01:05:47.670 align:start position:0%
call number in this um
[Music]

01:05:47.670 --> 01:05:47.680 align:start position:0%
[Music]
 

01:05:47.680 --> 01:05:50.150 align:start position:0%
[Music]
big<01:05:47.920><c> table</c><01:05:48.240><c> of</c><01:05:48.400><c> system</c><01:05:48.720><c> calls</c><01:05:49.599><c> at</c><01:05:49.760><c> the</c><01:05:49.839><c> top</c><01:05:50.079><c> of</c>

01:05:50.150 --> 01:05:50.160 align:start position:0%
big table of system calls at the top of
 

01:05:50.160 --> 01:05:51.670 align:start position:0%
big table of system calls at the top of
the<01:05:50.240><c> page</c>

01:05:51.670 --> 01:05:51.680 align:start position:0%
the page
 

01:05:51.680 --> 01:05:54.309 align:start position:0%
the page
um<01:05:52.480><c> if</c><01:05:52.640><c> you</c><01:05:52.720><c> remember</c><01:05:53.119><c> the</c><01:05:53.359><c> shells</c><01:05:54.000><c> write</c>

01:05:54.309 --> 01:05:54.319 align:start position:0%
um if you remember the shells write
 

01:05:54.319 --> 01:05:54.789 align:start position:0%
um if you remember the shells write
function

01:05:54.789 --> 01:05:54.799 align:start position:0%
function
 

01:05:54.799 --> 01:05:57.750 align:start position:0%
function
set<01:05:55.440><c> register</c><01:05:56.000><c> a7</c><01:05:56.799><c> to</c><01:05:56.960><c> be</c><01:05:57.119><c> the</c><01:05:57.280><c> system</c><01:05:57.520><c> call</c>

01:05:57.750 --> 01:05:57.760 align:start position:0%
set register a7 to be the system call
 

01:05:57.760 --> 01:05:58.710 align:start position:0%
set register a7 to be the system call
number<01:05:58.160><c> namely</c>

01:05:58.710 --> 01:05:58.720 align:start position:0%
number namely
 

01:05:58.720 --> 01:06:01.990 align:start position:0%
number namely
16<01:05:59.359><c> for</c><01:05:59.520><c> write</c><01:06:00.720><c> so</c><01:06:00.880><c> what</c><01:06:01.039><c> cisco</c><01:06:01.440><c> does</c><01:06:01.680><c> is</c><01:06:01.839><c> it</c>

01:06:01.990 --> 01:06:02.000 align:start position:0%
16 for write so what cisco does is it
 

01:06:02.000 --> 01:06:04.549 align:start position:0%
16 for write so what cisco does is it
retrieves<01:06:02.720><c> the</c><01:06:02.960><c> saved</c><01:06:03.520><c> a7</c>

01:06:04.549 --> 01:06:04.559 align:start position:0%
retrieves the saved a7
 

01:06:04.559 --> 01:06:06.870 align:start position:0%
retrieves the saved a7
that<01:06:04.720><c> was</c><01:06:04.960><c> saved</c><01:06:05.280><c> away</c><01:06:05.680><c> in</c><01:06:05.760><c> the</c><01:06:05.920><c> trap</c><01:06:06.240><c> fame</c><01:06:06.640><c> by</c>

01:06:06.870 --> 01:06:06.880 align:start position:0%
that was saved away in the trap fame by
 

01:06:06.880 --> 01:06:10.309 align:start position:0%
that was saved away in the trap fame by
the<01:06:06.960><c> trampoline</c><01:06:07.599><c> code</c>

01:06:10.309 --> 01:06:10.319 align:start position:0%
 
 

01:06:10.319 --> 01:06:11.910 align:start position:0%
 
and<01:06:10.480><c> it</c><01:06:10.640><c> uses</c><01:06:10.880><c> that</c><01:06:11.039><c> to</c><01:06:11.200><c> index</c><01:06:11.599><c> into</c><01:06:11.760><c> this</c>

01:06:11.910 --> 01:06:11.920 align:start position:0%
and it uses that to index into this
 

01:06:11.920 --> 01:06:13.349 align:start position:0%
and it uses that to index into this
table<01:06:12.400><c> of</c>

01:06:13.349 --> 01:06:13.359 align:start position:0%
table of
 

01:06:13.359 --> 01:06:14.950 align:start position:0%
table of
pointers<01:06:13.839><c> to</c><01:06:14.000><c> functions</c><01:06:14.400><c> that</c><01:06:14.559><c> implement</c>

01:06:14.950 --> 01:06:14.960 align:start position:0%
pointers to functions that implement
 

01:06:14.960 --> 01:06:17.430 align:start position:0%
pointers to functions that implement
each<01:06:15.200><c> system</c><01:06:15.599><c> call</c>

01:06:17.430 --> 01:06:17.440 align:start position:0%
each system call
 

01:06:17.440 --> 01:06:21.190 align:start position:0%
each system call
so<01:06:18.720><c> we're</c><01:06:18.880><c> going</c><01:06:18.960><c> to</c><01:06:20.079><c> fish</c><01:06:20.319><c> this</c><01:06:20.640><c> number</c>

01:06:21.190 --> 01:06:21.200 align:start position:0%
so we're going to fish this number
 

01:06:21.200 --> 01:06:23.589 align:start position:0%
so we're going to fish this number
i'm<01:06:21.359><c> going</c><01:06:21.440><c> to</c><01:06:21.599><c> print</c><01:06:21.839><c> num</c><01:06:22.160><c> now</c><01:06:22.720><c> that's</c><01:06:23.039><c> the</c>

01:06:23.589 --> 01:06:23.599 align:start position:0%
i'm going to print num now that's the
 

01:06:23.599 --> 01:06:25.829 align:start position:0%
i'm going to print num now that's the
save<01:06:23.920><c> d7</c><01:06:24.319><c> indeed</c><01:06:24.640><c> it's</c><01:06:24.799><c> 16</c>

01:06:25.829 --> 01:06:25.839 align:start position:0%
save d7 indeed it's 16
 

01:06:25.839 --> 01:06:27.910 align:start position:0%
save d7 indeed it's 16
the<01:06:26.000><c> same</c><01:06:26.319><c> 16</c><01:06:26.799><c> that</c><01:06:27.119><c> the</c><01:06:27.280><c> shell</c><01:06:27.520><c> originally</c>

01:06:27.910 --> 01:06:27.920 align:start position:0%
the same 16 that the shell originally
 

01:06:27.920 --> 01:06:30.829 align:start position:0%
the same 16 that the shell originally
put<01:06:28.160><c> there</c>

01:06:30.829 --> 01:06:30.839 align:start position:0%
 
 

01:06:30.839 --> 01:06:34.069 align:start position:0%
 
um<01:06:32.640><c> the</c><01:06:32.799><c> system</c><01:06:33.200><c> call</c>

01:06:34.069 --> 01:06:34.079 align:start position:0%
um the system call
 

01:06:34.079 --> 01:06:37.109 align:start position:0%
um the system call
code<01:06:34.559><c> indexes</c><01:06:35.039><c> into</c><01:06:35.200><c> that</c><01:06:35.359><c> syscalls</c><01:06:36.000><c> table</c><01:06:37.039><c> we</c>

01:06:37.109 --> 01:06:37.119 align:start position:0%
code indexes into that syscalls table we
 

01:06:37.119 --> 01:06:38.309 align:start position:0%
code indexes into that syscalls table we
can<01:06:37.280><c> find</c><01:06:37.520><c> out</c><01:06:37.599><c> what</c><01:06:37.839><c> function</c>

01:06:38.309 --> 01:06:38.319 align:start position:0%
can find out what function
 

01:06:38.319 --> 01:06:40.950 align:start position:0%
can find out what function
come<01:06:38.720><c> it's</c><01:06:39.839><c> got</c><01:06:40.079><c> out</c><01:06:40.240><c> of</c><01:06:40.319><c> the</c><01:06:40.400><c> system</c><01:06:40.720><c> call</c>

01:06:40.950 --> 01:06:40.960 align:start position:0%
come it's got out of the system call
 

01:06:40.960 --> 01:06:42.309 align:start position:0%
come it's got out of the system call
table

01:06:42.309 --> 01:06:42.319 align:start position:0%
table
 

01:06:42.319 --> 01:06:44.309 align:start position:0%
table
uh<01:06:42.480><c> by</c><01:06:42.720><c> stepping</c><01:06:43.039><c> into</c><01:06:43.359><c> it</c><01:06:43.760><c> right</c><01:06:43.920><c> now</c><01:06:44.079><c> we're</c>

01:06:44.309 --> 01:06:44.319 align:start position:0%
uh by stepping into it right now we're
 

01:06:44.319 --> 01:06:46.069 align:start position:0%
uh by stepping into it right now we're
in<01:06:44.480><c> write</c><01:06:44.880><c> or</c><01:06:45.039><c> insist</c><01:06:45.440><c> write</c>

01:06:46.069 --> 01:06:46.079 align:start position:0%
in write or insist write
 

01:06:46.079 --> 01:06:49.670 align:start position:0%
in write or insist write
so<01:06:49.039><c> isn't</c><01:06:49.280><c> this</c>

01:06:49.670 --> 01:06:49.680 align:start position:0%
so isn't this
 

01:06:49.680 --> 01:06:53.589 align:start position:0%
so isn't this
file.c<01:06:52.559><c> this</c><01:06:52.799><c> write</c><01:06:53.039><c> is</c><01:06:53.200><c> the</c>

01:06:53.589 --> 01:06:53.599 align:start position:0%
file.c this write is the
 

01:06:53.599 --> 01:06:56.230 align:start position:0%
file.c this write is the
kernel<01:06:54.079><c> implementation</c><01:06:55.039><c> of</c><01:06:55.839><c> the</c><01:06:56.000><c> write</c>

01:06:56.230 --> 01:06:56.240 align:start position:0%
kernel implementation of the write
 

01:06:56.240 --> 01:06:57.910 align:start position:0%
kernel implementation of the write
system<01:06:56.559><c> call</c>

01:06:57.910 --> 01:06:57.920 align:start position:0%
system call
 

01:06:57.920 --> 01:06:59.670 align:start position:0%
system call
i'm<01:06:58.079><c> not</c><01:06:58.240><c> going</c><01:06:58.319><c> to</c><01:06:58.400><c> go</c><01:06:58.559><c> into</c><01:06:58.720><c> this</c><01:06:58.960><c> it's</c><01:06:59.039><c> like</c>

01:06:59.670 --> 01:06:59.680 align:start position:0%
i'm not going to go into this it's like
 

01:06:59.680 --> 01:07:01.190 align:start position:0%
i'm not going to go into this it's like
fairly<01:07:00.000><c> complicated</c><01:07:00.559><c> what</c><01:07:00.720><c> happens</c><01:07:01.039><c> from</c>

01:07:01.190 --> 01:07:01.200 align:start position:0%
fairly complicated what happens from
 

01:07:01.200 --> 01:07:02.390 align:start position:0%
fairly complicated what happens from
here<01:07:01.440><c> on</c>

01:07:02.390 --> 01:07:02.400 align:start position:0%
here on
 

01:07:02.400 --> 01:07:03.990 align:start position:0%
here on
in<01:07:02.640><c> and</c><01:07:02.720><c> the</c><01:07:02.880><c> implementation</c><01:07:03.440><c> of</c><01:07:03.520><c> the</c><01:07:03.680><c> system</c>

01:07:03.990 --> 01:07:04.000 align:start position:0%
in and the implementation of the system
 

01:07:04.000 --> 01:07:05.910 align:start position:0%
in and the implementation of the system
call<01:07:04.799><c> for</c><01:07:04.960><c> this</c><01:07:05.119><c> lecture</c><01:07:05.359><c> i'm</c><01:07:05.520><c> only</c><01:07:05.680><c> really</c>

01:07:05.910 --> 01:07:05.920 align:start position:0%
call for this lecture i'm only really
 

01:07:05.920 --> 01:07:07.190 align:start position:0%
call for this lecture i'm only really
interested<01:07:06.319><c> in</c><01:07:06.400><c> getting</c><01:07:06.640><c> into</c><01:07:06.880><c> and</c><01:07:07.039><c> out</c><01:07:07.119><c> of</c>

01:07:07.190 --> 01:07:07.200 align:start position:0%
interested in getting into and out of
 

01:07:07.200 --> 01:07:08.069 align:start position:0%
interested in getting into and out of
the<01:07:07.280><c> kernel</c>

01:07:08.069 --> 01:07:08.079 align:start position:0%
the kernel
 

01:07:08.079 --> 01:07:12.829 align:start position:0%
the kernel
um<01:07:09.200><c> so</c><01:07:09.359><c> i'm</c><01:07:09.599><c> going</c><01:07:09.920><c> to</c>

01:07:12.829 --> 01:07:12.839 align:start position:0%
 
 

01:07:12.839 --> 01:07:26.470 align:start position:0%
 
um<01:07:14.960><c> step</c><01:07:15.359><c> over</c>

01:07:26.470 --> 01:07:26.480 align:start position:0%
 
 

01:07:26.480 --> 01:07:28.309 align:start position:0%
 
the<01:07:26.640><c> actual</c><01:07:26.880><c> implementation</c><01:07:27.520><c> system</c><01:07:27.839><c> call</c>

01:07:28.309 --> 01:07:28.319 align:start position:0%
the actual implementation system call
 

01:07:28.319 --> 01:07:29.910 align:start position:0%
the actual implementation system call
one<01:07:28.559><c> thing</c><01:07:28.880><c> an</c><01:07:29.039><c> interesting</c><01:07:29.359><c> thing</c><01:07:29.520><c> to</c><01:07:29.680><c> note</c>

01:07:29.910 --> 01:07:29.920 align:start position:0%
one thing an interesting thing to note
 

01:07:29.920 --> 01:07:30.549 align:start position:0%
one thing an interesting thing to note
is<01:07:30.079><c> that</c>

01:07:30.549 --> 01:07:30.559 align:start position:0%
is that
 

01:07:30.559 --> 01:07:31.990 align:start position:0%
is that
the<01:07:30.799><c> system</c><01:07:31.119><c> calls</c><01:07:31.359><c> need</c><01:07:31.520><c> to</c><01:07:31.599><c> find</c><01:07:31.839><c> their</c>

01:07:31.990 --> 01:07:32.000 align:start position:0%
the system calls need to find their
 

01:07:32.000 --> 01:07:33.750 align:start position:0%
the system calls need to find their
arguments<01:07:32.799><c> so</c><01:07:33.119><c> you</c><01:07:33.200><c> know</c><01:07:33.359><c> remember</c><01:07:33.599><c> the</c>

01:07:33.750 --> 01:07:33.760 align:start position:0%
arguments so you know remember the
 

01:07:33.760 --> 01:07:35.109 align:start position:0%
arguments so you know remember the
arguments<01:07:34.240><c> to</c><01:07:34.480><c> write</c><01:07:34.799><c> or</c>

01:07:35.109 --> 01:07:35.119 align:start position:0%
arguments to write or
 

01:07:35.119 --> 01:07:37.510 align:start position:0%
arguments to write or
two<01:07:35.599><c> and</c><01:07:35.680><c> a</c><01:07:35.760><c> buffer</c><01:07:36.079><c> pointer</c><01:07:36.480><c> and</c><01:07:36.640><c> another</c><01:07:36.960><c> two</c>

01:07:37.510 --> 01:07:37.520 align:start position:0%
two and a buffer pointer and another two
 

01:07:37.520 --> 01:07:38.870 align:start position:0%
two and a buffer pointer and another two
and<01:07:37.680><c> the</c><01:07:37.920><c> way</c><01:07:38.240><c> that</c><01:07:38.480><c> the</c>

01:07:38.870 --> 01:07:38.880 align:start position:0%
and the way that the
 

01:07:38.880 --> 01:07:40.549 align:start position:0%
and the way that the
system<01:07:39.200><c> called</c><01:07:39.440><c> code</c><01:07:39.599><c> gets</c><01:07:39.839><c> at</c><01:07:39.920><c> them</c><01:07:40.160><c> is</c><01:07:40.319><c> just</c>

01:07:40.549 --> 01:07:40.559 align:start position:0%
system called code gets at them is just
 

01:07:40.559 --> 01:07:45.990 align:start position:0%
system called code gets at them is just
looking<01:07:40.880><c> at</c><01:07:41.039><c> this</c><01:07:41.440><c> um</c>

01:07:45.990 --> 01:07:46.000 align:start position:0%
 
 

01:07:46.000 --> 01:07:49.510 align:start position:0%
 
well<01:07:48.079><c> looking</c><01:07:48.400><c> in</c><01:07:48.480><c> the</c><01:07:48.559><c> trap</c><01:07:48.799><c> frame</c>

01:07:49.510 --> 01:07:49.520 align:start position:0%
well looking in the trap frame
 

01:07:49.520 --> 01:07:50.870 align:start position:0%
well looking in the trap frame
so<01:07:49.680><c> just</c><01:07:49.839><c> like</c><01:07:50.000><c> we</c><01:07:50.160><c> could</c><01:07:50.319><c> look</c><01:07:50.480><c> in</c><01:07:50.559><c> the</c><01:07:50.640><c> trap</c>

01:07:50.870 --> 01:07:50.880 align:start position:0%
so just like we could look in the trap
 

01:07:50.880 --> 01:07:53.510 align:start position:0%
so just like we could look in the trap
frame<01:07:51.039><c> for</c><01:07:51.200><c> a7</c><01:07:52.000><c> we</c><01:07:52.160><c> can</c><01:07:52.240><c> look</c><01:07:52.400><c> for</c><01:07:52.559><c> a0</c>

01:07:53.510 --> 01:07:53.520 align:start position:0%
frame for a7 we can look for a0
 

01:07:53.520 --> 01:07:55.109 align:start position:0%
frame for a7 we can look for a0
and<01:07:53.599><c> that's</c><01:07:53.920><c> the</c><01:07:54.000><c> first</c><01:07:54.319><c> argument</c><01:07:54.640><c> we</c><01:07:54.799><c> look</c><01:07:54.960><c> at</c>

01:07:55.109 --> 01:07:55.119 align:start position:0%
and that's the first argument we look at
 

01:07:55.119 --> 01:07:56.789 align:start position:0%
and that's the first argument we look at
a1<01:07:55.520><c> that's</c><01:07:55.760><c> that</c><01:07:55.920><c> buffer</c><01:07:56.240><c> pointer</c><01:07:56.480><c> we</c><01:07:56.640><c> can</c>

01:07:56.789 --> 01:07:56.799 align:start position:0%
a1 that's that buffer pointer we can
 

01:07:56.799 --> 01:07:58.710 align:start position:0%
a1 that's that buffer pointer we can
look<01:07:56.880><c> at</c><01:07:57.039><c> a2</c><01:07:57.440><c> that's</c><01:07:57.599><c> the</c><01:07:57.680><c> second</c><01:07:58.000><c> argument</c>

01:07:58.710 --> 01:07:58.720 align:start position:0%
look at a2 that's the second argument
 

01:07:58.720 --> 01:08:02.470 align:start position:0%
look at a2 that's the second argument
the<01:07:58.880><c> number</c><01:07:59.200><c> of</c>

01:08:02.470 --> 01:08:02.480 align:start position:0%
 
 

01:08:02.480 --> 01:08:06.230 align:start position:0%
 
bytes<01:08:02.799><c> to</c><01:08:03.039><c> write</c><01:08:05.280><c> okay</c><01:08:05.520><c> so</c><01:08:05.760><c> the</c><01:08:05.839><c> system</c><01:08:06.079><c> call</c>

01:08:06.230 --> 01:08:06.240 align:start position:0%
bytes to write okay so the system call
 

01:08:06.240 --> 01:08:07.750 align:start position:0%
bytes to write okay so the system call
does<01:08:06.480><c> its</c><01:08:06.640><c> job</c><01:08:06.880><c> and</c><01:08:06.960><c> then</c>

01:08:07.750 --> 01:08:07.760 align:start position:0%
does its job and then
 

01:08:07.760 --> 01:08:13.109 align:start position:0%
does its job and then
cis<01:08:08.079><c> write</c><01:08:08.400><c> finally</c><01:08:08.839><c> returns</c>

01:08:13.109 --> 01:08:13.119 align:start position:0%
 
 

01:08:13.119 --> 01:08:15.270 align:start position:0%
 
and<01:08:13.839><c> we're</c><01:08:14.000><c> going</c><01:08:14.079><c> to</c><01:08:14.160><c> watch</c><01:08:14.400><c> what</c><01:08:14.559><c> happens</c>

01:08:15.270 --> 01:08:15.280 align:start position:0%
and we're going to watch what happens
 

01:08:15.280 --> 01:08:17.110 align:start position:0%
and we're going to watch what happens
the<01:08:15.440><c> reason</c><01:08:15.760><c> for</c><01:08:15.920><c> this</c><01:08:16.159><c> assignment</c><01:08:16.719><c> here</c><01:08:16.960><c> the</c>

01:08:17.110 --> 01:08:17.120 align:start position:0%
the reason for this assignment here the
 

01:08:17.120 --> 01:08:19.030 align:start position:0%
the reason for this assignment here the
reason<01:08:17.359><c> why</c><01:08:17.520><c> we're</c><01:08:17.759><c> assigning</c>

01:08:19.030 --> 01:08:19.040 align:start position:0%
reason why we're assigning
 

01:08:19.040 --> 01:08:22.709 align:start position:0%
reason why we're assigning
to<01:08:19.440><c> a0</c><01:08:20.000><c> in</c><01:08:20.080><c> the</c><01:08:20.159><c> trap</c><01:08:20.560><c> frame</c><01:08:21.440><c> is</c><01:08:21.600><c> that</c>

01:08:22.709 --> 01:08:22.719 align:start position:0%
to a0 in the trap frame is that
 

01:08:22.719 --> 01:08:24.470 align:start position:0%
to a0 in the trap frame is that
this<01:08:23.120><c> system</c><01:08:23.440><c> calls</c><01:08:23.679><c> all</c><01:08:23.759><c> have</c><01:08:23.920><c> a</c><01:08:24.000><c> return</c>

01:08:24.470 --> 01:08:24.480 align:start position:0%
this system calls all have a return
 

01:08:24.480 --> 01:08:25.990 align:start position:0%
this system calls all have a return
value

01:08:25.990 --> 01:08:26.000 align:start position:0%
value
 

01:08:26.000 --> 01:08:27.669 align:start position:0%
value
like<01:08:26.239><c> write</c><01:08:26.560><c> returns</c><01:08:26.880><c> the</c><01:08:26.960><c> number</c><01:08:27.199><c> of</c><01:08:27.359><c> bytes</c>

01:08:27.669 --> 01:08:27.679 align:start position:0%
like write returns the number of bytes
 

01:08:27.679 --> 01:08:30.149 align:start position:0%
like write returns the number of bytes
written<01:08:28.719><c> and</c><01:08:28.880><c> the</c><01:08:28.960><c> convention</c><01:08:29.600><c> and</c><01:08:29.759><c> for</c><01:08:30.000><c> c</c>

01:08:30.149 --> 01:08:30.159 align:start position:0%
written and the convention and for c
 

01:08:30.159 --> 01:08:31.910 align:start position:0%
written and the convention and for c
code<01:08:30.480><c> on</c><01:08:30.560><c> the</c><01:08:30.640><c> risk</c><01:08:30.880><c> five</c><01:08:31.199><c> is</c><01:08:31.359><c> that</c>

01:08:31.910 --> 01:08:31.920 align:start position:0%
code on the risk five is that
 

01:08:31.920 --> 01:08:34.950 align:start position:0%
code on the risk five is that
return<01:08:32.400><c> values</c><01:08:33.040><c> are</c><01:08:33.359><c> placed</c><01:08:33.679><c> in</c><01:08:33.759><c> register</c><01:08:34.239><c> a0</c>

01:08:34.950 --> 01:08:34.960 align:start position:0%
return values are placed in register a0
 

01:08:34.960 --> 01:08:36.870 align:start position:0%
return values are placed in register a0
by<01:08:35.120><c> whatever</c><01:08:35.520><c> function</c><01:08:35.839><c> you're</c><01:08:36.000><c> calling</c><01:08:36.719><c> and</c>

01:08:36.870 --> 01:08:36.880 align:start position:0%
by whatever function you're calling and
 

01:08:36.880 --> 01:08:39.110 align:start position:0%
by whatever function you're calling and
so<01:08:37.120><c> to</c><01:08:37.279><c> simulate</c><01:08:37.839><c> a</c><01:08:37.920><c> return</c><01:08:38.319><c> value</c><01:08:38.719><c> we</c><01:08:38.880><c> just</c>

01:08:39.110 --> 01:08:39.120 align:start position:0%
so to simulate a return value we just
 

01:08:39.120 --> 01:08:40.470 align:start position:0%
so to simulate a return value we just
stick<01:08:39.359><c> the</c><01:08:39.520><c> return</c><01:08:39.839><c> value</c>

01:08:40.470 --> 01:08:40.480 align:start position:0%
stick the return value
 

01:08:40.480 --> 01:08:43.110 align:start position:0%
stick the return value
in<01:08:40.719><c> a0</c><01:08:41.279><c> in</c><01:08:41.359><c> the</c><01:08:41.440><c> trap</c><01:08:41.759><c> frame</c><01:08:42.480><c> and</c><01:08:42.640><c> we'll</c><01:08:42.799><c> see</c><01:08:42.960><c> by</c>

01:08:43.110 --> 01:08:43.120 align:start position:0%
in a0 in the trap frame and we'll see by
 

01:08:43.120 --> 01:08:45.749 align:start position:0%
in a0 in the trap frame and we'll see by
and<01:08:43.279><c> by</c><01:08:43.600><c> that</c><01:08:43.759><c> when</c><01:08:43.920><c> we</c><01:08:44.159><c> return</c><01:08:44.400><c> to</c><01:08:44.560><c> user</c><01:08:44.799><c> space</c>

01:08:45.749 --> 01:08:45.759 align:start position:0%
and by that when we return to user space
 

01:08:45.759 --> 01:08:48.550 align:start position:0%
and by that when we return to user space
this<01:08:46.080><c> a0</c><01:08:46.560><c> slot</c><01:08:46.880><c> in</c><01:08:46.960><c> the</c><01:08:47.040><c> trap</c><01:08:47.359><c> frame</c><01:08:47.679><c> is</c>

01:08:48.550 --> 01:08:48.560 align:start position:0%
this a0 slot in the trap frame is
 

01:08:48.560 --> 01:08:50.309 align:start position:0%
this a0 slot in the trap frame is
restored<01:08:49.120><c> back</c><01:08:49.279><c> into</c><01:08:49.520><c> the</c><01:08:49.600><c> actual</c><01:08:49.839><c> a0</c>

01:08:50.309 --> 01:08:50.319 align:start position:0%
restored back into the actual a0
 

01:08:50.319 --> 01:08:50.870 align:start position:0%
restored back into the actual a0
register

01:08:50.870 --> 01:08:50.880 align:start position:0%
register
 

01:08:50.880 --> 01:08:56.550 align:start position:0%
register
and<01:08:51.359><c> the</c><01:08:51.520><c> shell</c><01:08:51.839><c> sees</c><01:08:52.400><c> that</c><01:08:52.640><c> a0</c><01:08:53.120><c> value</c><01:08:53.520><c> as</c><01:08:53.759><c> um</c>

01:08:56.550 --> 01:08:56.560 align:start position:0%
 
 

01:08:56.560 --> 01:08:59.910 align:start position:0%
 
as<01:08:56.799><c> the</c><01:08:56.880><c> return</c><01:08:57.120><c> value</c><01:08:57.440><c> from</c><01:08:57.600><c> right</c><01:08:58.640><c> and</c><01:08:59.440><c> if</c><01:08:59.600><c> we</c>

01:08:59.910 --> 01:08:59.920 align:start position:0%
as the return value from right and if we
 

01:08:59.920 --> 01:09:02.630 align:start position:0%
as the return value from right and if we
just<01:09:00.159><c> execute</c><01:09:00.640><c> through</c><01:09:00.799><c> this</c><01:09:01.359><c> and</c><01:09:01.520><c> print</c><01:09:02.159><c> pro</c>

01:09:02.630 --> 01:09:02.640 align:start position:0%
just execute through this and print pro
 

01:09:02.640 --> 01:09:03.430 align:start position:0%
just execute through this and print pro
trap

01:09:03.430 --> 01:09:03.440 align:start position:0%
trap
 

01:09:03.440 --> 01:09:06.789 align:start position:0%
trap
frame<01:09:04.400><c> starter</c><01:09:05.759><c> we'll</c><01:09:05.920><c> see</c><01:09:06.000><c> it</c><01:09:06.159><c> as</c><01:09:06.239><c> value</c><01:09:06.560><c> 2</c>

01:09:06.789 --> 01:09:06.799 align:start position:0%
frame starter we'll see it as value 2
 

01:09:06.799 --> 01:09:08.709 align:start position:0%
frame starter we'll see it as value 2
what<01:09:06.960><c> that</c><01:09:07.120><c> means</c><01:09:07.440><c> is</c><01:09:07.520><c> that</c><01:09:07.759><c> right</c>

01:09:08.709 --> 01:09:08.719 align:start position:0%
what that means is that right
 

01:09:08.719 --> 01:09:10.470 align:start position:0%
what that means is that right
return<01:09:09.040><c> value</c><01:09:09.279><c> is</c><01:09:09.440><c> 2</c><01:09:09.679><c> saying</c><01:09:09.920><c> that</c><01:09:10.159><c> it</c>

01:09:10.470 --> 01:09:10.480 align:start position:0%
return value is 2 saying that it
 

01:09:10.480 --> 01:09:12.470 align:start position:0%
return value is 2 saying that it
actually<01:09:10.799><c> wrote</c><01:09:11.359><c> two</c><01:09:11.600><c> bytes</c><01:09:12.000><c> just</c><01:09:12.239><c> as</c>

01:09:12.470 --> 01:09:12.480 align:start position:0%
actually wrote two bytes just as
 

01:09:12.480 --> 01:09:13.910 align:start position:0%
actually wrote two bytes just as
instructed

01:09:13.910 --> 01:09:13.920 align:start position:0%
instructed
 

01:09:13.920 --> 01:09:18.709 align:start position:0%
instructed
okay<01:09:14.159><c> at</c><01:09:14.239><c> this</c><01:09:14.400><c> point</c><01:09:14.560><c> we're</c><01:09:14.799><c> back</c><01:09:15.120><c> in</c>

01:09:18.709 --> 01:09:18.719 align:start position:0%
 
 

01:09:18.719 --> 01:09:22.709 align:start position:0%
 
trap.c<01:09:19.759><c> in</c><01:09:19.920><c> usertrap</c><01:09:21.600><c> um</c>

01:09:22.709 --> 01:09:22.719 align:start position:0%
trap.c in usertrap um
 

01:09:22.719 --> 01:09:24.789 align:start position:0%
trap.c in usertrap um
just<01:09:23.120><c> after</c><01:09:23.520><c> the</c><01:09:23.679><c> called</c><01:09:24.000><c> assist</c><01:09:24.319><c> call</c><01:09:24.560><c> so</c>

01:09:24.789 --> 01:09:24.799 align:start position:0%
just after the called assist call so
 

01:09:24.799 --> 01:09:26.550 align:start position:0%
just after the called assist call so
we're<01:09:24.880><c> now</c><01:09:25.040><c> with</c><01:09:25.199><c> this</c>

01:09:26.550 --> 01:09:26.560 align:start position:0%
we're now with this
 

01:09:26.560 --> 01:09:28.390 align:start position:0%
we're now with this
pierrot<01:09:27.120><c> which</c><01:09:27.279><c> is</c><01:09:27.440><c> checking</c><01:09:27.759><c> if</c><01:09:27.920><c> the</c><01:09:28.000><c> func</c><01:09:28.239><c> if</c>

01:09:28.390 --> 01:09:28.400 align:start position:0%
pierrot which is checking if the func if
 

01:09:28.400 --> 01:09:30.149 align:start position:0%
pierrot which is checking if the func if
the<01:09:28.719><c> process</c><01:09:29.040><c> has</c><01:09:29.120><c> been</c><01:09:29.359><c> killed</c><01:09:29.759><c> because</c>

01:09:30.149 --> 01:09:30.159 align:start position:0%
the process has been killed because
 

01:09:30.159 --> 01:09:31.590 align:start position:0%
the process has been killed because
we<01:09:30.319><c> don't</c><01:09:30.400><c> want</c><01:09:30.480><c> to</c><01:09:30.560><c> resume</c><01:09:30.960><c> executing</c><01:09:31.359><c> it's</c>

01:09:31.590 --> 01:09:31.600 align:start position:0%
we don't want to resume executing it's
 

01:09:31.600 --> 01:09:33.269 align:start position:0%
we don't want to resume executing it's
already<01:09:31.839><c> been</c><01:09:31.920><c> killed</c><01:09:32.159><c> but</c><01:09:32.319><c> of</c><01:09:32.400><c> course</c>

01:09:33.269 --> 01:09:33.279 align:start position:0%
already been killed but of course
 

01:09:33.279 --> 01:09:36.470 align:start position:0%
already been killed but of course
our<01:09:33.440><c> shell</c><01:09:33.679><c> has</c><01:09:33.759><c> not</c><01:09:34.000><c> been</c><01:09:34.159><c> killed</c><01:09:35.920><c> skip</c><01:09:36.239><c> over</c>

01:09:36.470 --> 01:09:36.480 align:start position:0%
our shell has not been killed skip over
 

01:09:36.480 --> 01:09:38.229 align:start position:0%
our shell has not been killed skip over
this

01:09:38.229 --> 01:09:38.239 align:start position:0%
this
 

01:09:38.239 --> 01:09:42.309 align:start position:0%
this
and<01:09:38.400><c> then</c><01:09:39.040><c> um</c><01:09:40.560><c> user</c><01:09:40.880><c> trap</c><01:09:41.279><c> calls</c><01:09:41.679><c> a</c><01:09:41.839><c> separate</c>

01:09:42.309 --> 01:09:42.319 align:start position:0%
and then um user trap calls a separate
 

01:09:42.319 --> 01:09:42.870 align:start position:0%
and then um user trap calls a separate
function

01:09:42.870 --> 01:09:42.880 align:start position:0%
function
 

01:09:42.880 --> 01:09:45.510 align:start position:0%
function
user<01:09:43.199><c> trap</c><01:09:43.600><c> red</c><01:09:44.000><c> in</c><01:09:44.159><c> order</c><01:09:44.480><c> to</c><01:09:44.640><c> set</c><01:09:44.880><c> up</c><01:09:45.199><c> all</c><01:09:45.359><c> the</c>

01:09:45.510 --> 01:09:45.520 align:start position:0%
user trap red in order to set up all the
 

01:09:45.520 --> 01:09:47.269 align:start position:0%
user trap red in order to set up all the
stuff<01:09:45.920><c> that</c><01:09:46.080><c> i</c><01:09:46.239><c> talked</c><01:09:46.480><c> about</c><01:09:46.799><c> previously</c>

01:09:47.269 --> 01:09:47.279 align:start position:0%
stuff that i talked about previously
 

01:09:47.279 --> 01:09:48.309 align:start position:0%
stuff that i talked about previously
whenever<01:09:47.679><c> i</c><01:09:47.839><c> said</c>

01:09:48.309 --> 01:09:48.319 align:start position:0%
whenever i said
 

01:09:48.319 --> 01:09:50.149 align:start position:0%
whenever i said
well<01:09:48.480><c> before</c><01:09:48.880><c> entering</c><01:09:49.279><c> user</c><01:09:49.520><c> space</c><01:09:50.000><c> the</c>

01:09:50.149 --> 01:09:50.159 align:start position:0%
well before entering user space the
 

01:09:50.159 --> 01:09:52.870 align:start position:0%
well before entering user space the
kernel<01:09:50.480><c> does</c><01:09:50.880><c> blah</c><01:09:51.120><c> blah</c><01:09:51.279><c> blah</c>

01:09:52.870 --> 01:09:52.880 align:start position:0%
kernel does blah blah blah
 

01:09:52.880 --> 01:09:55.669 align:start position:0%
kernel does blah blah blah
it's<01:09:53.120><c> user</c><01:09:53.520><c> trap</c><01:09:53.839><c> red</c><01:09:54.640><c> that's</c><01:09:54.960><c> responsible</c>

01:09:55.669 --> 01:09:55.679 align:start position:0%
it's user trap red that's responsible
 

01:09:55.679 --> 01:09:56.310 align:start position:0%
it's user trap red that's responsible
for

01:09:56.310 --> 01:09:56.320 align:start position:0%
for
 

01:09:56.320 --> 01:10:00.390 align:start position:0%
for
setting<01:09:56.640><c> all</c><01:09:56.800><c> that</c><01:09:56.960><c> stuff</c><01:09:57.280><c> up</c>

01:10:00.390 --> 01:10:00.400 align:start position:0%
 
 

01:10:00.400 --> 01:10:01.590 align:start position:0%
 
and<01:10:00.560><c> so</c><01:10:00.719><c> we</c><01:10:00.800><c> can</c><01:10:00.880><c> look</c><01:10:01.040><c> at</c><01:10:01.120><c> all</c><01:10:01.199><c> the</c><01:10:01.360><c> different</c>

01:10:01.590 --> 01:10:01.600 align:start position:0%
and so we can look at all the different
 

01:10:01.600 --> 01:10:09.590 align:start position:0%
and so we can look at all the different
things<01:10:01.920><c> it</c><01:10:02.000><c> does</c><01:10:03.040><c> um</c>

01:10:09.590 --> 01:10:09.600 align:start position:0%
 
 

01:10:09.600 --> 01:10:13.990 align:start position:0%
 
it<01:10:09.920><c> um</c><01:10:11.840><c> it</c><01:10:12.000><c> turns</c><01:10:12.400><c> interrupts</c><01:10:12.880><c> off</c>

01:10:13.990 --> 01:10:14.000 align:start position:0%
it um it turns interrupts off
 

01:10:14.000 --> 01:10:15.350 align:start position:0%
it um it turns interrupts off
they<01:10:14.080><c> were</c><01:10:14.239><c> turned</c><01:10:14.480><c> on</c><01:10:14.640><c> for</c><01:10:14.800><c> the</c><01:10:14.880><c> duration</c><01:10:15.199><c> of</c>

01:10:15.350 --> 01:10:15.360 align:start position:0%
they were turned on for the duration of
 

01:10:15.360 --> 01:10:17.030 align:start position:0%
they were turned on for the duration of
a<01:10:15.440><c> system</c><01:10:15.760><c> call</c><01:10:16.239><c> they're</c><01:10:16.480><c> turned</c><01:10:16.719><c> off</c><01:10:16.880><c> now</c>

01:10:17.030 --> 01:10:17.040 align:start position:0%
a system call they're turned off now
 

01:10:17.040 --> 01:10:20.229 align:start position:0%
a system call they're turned off now
because<01:10:17.280><c> we're</c><01:10:17.520><c> about</c><01:10:18.000><c> to</c><01:10:18.239><c> change</c><01:10:18.640><c> the</c><01:10:18.880><c> st</c><01:10:19.360><c> vec</c>

01:10:20.229 --> 01:10:20.239 align:start position:0%
because we're about to change the st vec
 

01:10:20.239 --> 01:10:24.070 align:start position:0%
because we're about to change the st vec
to<01:10:20.400><c> point</c><01:10:20.800><c> to</c><01:10:21.120><c> the</c><01:10:22.080><c> user</c>

01:10:24.070 --> 01:10:24.080 align:start position:0%
to point to the user
 

01:10:24.080 --> 01:10:26.470 align:start position:0%
to point to the user
trap<01:10:24.480><c> handler</c><01:10:25.600><c> whereas</c><01:10:25.920><c> while</c><01:10:26.159><c> we're</c><01:10:26.320><c> in</c><01:10:26.400><c> the</c>

01:10:26.470 --> 01:10:26.480 align:start position:0%
trap handler whereas while we're in the
 

01:10:26.480 --> 01:10:27.830 align:start position:0%
trap handler whereas while we're in the
kernel<01:10:26.719><c> it</c><01:10:26.800><c> was</c><01:10:26.880><c> pointing</c><01:10:27.120><c> to</c><01:10:27.280><c> the</c><01:10:27.440><c> kernel</c>

01:10:27.830 --> 01:10:27.840 align:start position:0%
kernel it was pointing to the kernel
 

01:10:27.840 --> 01:10:28.709 align:start position:0%
kernel it was pointing to the kernel
trap<01:10:28.080><c> handler</c>

01:10:28.709 --> 01:10:28.719 align:start position:0%
trap handler
 

01:10:28.719 --> 01:10:30.470 align:start position:0%
trap handler
so<01:10:28.880><c> we</c><01:10:28.960><c> turn</c><01:10:29.199><c> off</c><01:10:29.360><c> interrupts</c><01:10:29.760><c> because</c><01:10:30.239><c> once</c>

01:10:30.470 --> 01:10:30.480 align:start position:0%
so we turn off interrupts because once
 

01:10:30.480 --> 01:10:32.790 align:start position:0%
so we turn off interrupts because once
we<01:10:30.800><c> changed</c><01:10:31.600><c> st</c><01:10:31.920><c> vector</c><01:10:32.239><c> point</c><01:10:32.400><c> to</c><01:10:32.480><c> the</c><01:10:32.560><c> user</c>

01:10:32.790 --> 01:10:32.800 align:start position:0%
we changed st vector point to the user
 

01:10:32.800 --> 01:10:34.229 align:start position:0%
we changed st vector point to the user
trap<01:10:33.040><c> handler</c><01:10:33.360><c> we're</c><01:10:33.520><c> still</c><01:10:33.679><c> executing</c><01:10:34.159><c> in</c>

01:10:34.229 --> 01:10:34.239 align:start position:0%
trap handler we're still executing in
 

01:10:34.239 --> 01:10:34.950 align:start position:0%
trap handler we're still executing in
the<01:10:34.320><c> kernel</c>

01:10:34.950 --> 01:10:34.960 align:start position:0%
the kernel
 

01:10:34.960 --> 01:10:37.350 align:start position:0%
the kernel
and<01:10:35.280><c> if</c><01:10:35.440><c> an</c><01:10:35.600><c> interrupt</c><01:10:35.920><c> should</c><01:10:36.159><c> occur</c><01:10:37.040><c> then</c><01:10:37.280><c> it</c>

01:10:37.350 --> 01:10:37.360 align:start position:0%
and if an interrupt should occur then it
 

01:10:37.360 --> 01:10:39.110 align:start position:0%
and if an interrupt should occur then it
would<01:10:37.520><c> go</c><01:10:37.679><c> to</c><01:10:37.760><c> the</c><01:10:37.840><c> user</c><01:10:38.159><c> trap</c><01:10:38.400><c> handler</c><01:10:38.960><c> even</c>

01:10:39.110 --> 01:10:39.120 align:start position:0%
would go to the user trap handler even
 

01:10:39.120 --> 01:10:40.630 align:start position:0%
would go to the user trap handler even
though<01:10:39.280><c> we're</c><01:10:39.440><c> executing</c><01:10:39.920><c> in</c><01:10:40.000><c> the</c><01:10:40.080><c> kernel</c>

01:10:40.630 --> 01:10:40.640 align:start position:0%
though we're executing in the kernel
 

01:10:40.640 --> 01:10:44.229 align:start position:0%
though we're executing in the kernel
and<01:10:40.800><c> for</c><01:10:40.960><c> various</c><01:10:41.520><c> detailed</c><01:10:42.000><c> reasons</c><01:10:42.880><c> um</c>

01:10:44.229 --> 01:10:44.239 align:start position:0%
and for various detailed reasons um
 

01:10:44.239 --> 01:10:45.590 align:start position:0%
and for various detailed reasons um
that<01:10:44.480><c> would</c><01:10:44.800><c> cause</c><01:10:45.120><c> the</c><01:10:45.199><c> kernel</c><01:10:45.520><c> to</c>

01:10:45.590 --> 01:10:45.600 align:start position:0%
that would cause the kernel to
 

01:10:45.600 --> 01:10:48.630 align:start position:0%
that would cause the kernel to
malfunction<01:10:46.480><c> so</c><01:10:46.640><c> we</c><01:10:46.719><c> turn</c><01:10:46.960><c> off</c><01:10:47.120><c> interrupts</c>

01:10:48.630 --> 01:10:48.640 align:start position:0%
malfunction so we turn off interrupts
 

01:10:48.640 --> 01:10:50.070 align:start position:0%
malfunction so we turn off interrupts
and<01:10:48.800><c> they're</c><01:10:48.960><c> left</c><01:10:49.199><c> off</c><01:10:49.360><c> from</c><01:10:49.600><c> between</c><01:10:49.920><c> the</c>

01:10:50.070 --> 01:10:50.080 align:start position:0%
and they're left off from between the
 

01:10:50.080 --> 01:10:52.790 align:start position:0%
and they're left off from between the
time<01:10:51.040><c> or</c><01:10:51.120><c> from</c><01:10:51.360><c> the</c><01:10:51.440><c> very</c><01:10:51.679><c> next</c><01:10:51.920><c> line</c><01:10:52.080><c> where</c><01:10:52.239><c> we</c>

01:10:52.790 --> 01:10:52.800 align:start position:0%
time or from the very next line where we
 

01:10:52.800 --> 01:10:55.030 align:start position:0%
time or from the very next line where we
set<01:10:53.040><c> up</c><01:10:53.120><c> the</c><01:10:53.360><c> s</c><01:10:53.520><c> t</c><01:10:53.760><c> vec</c><01:10:54.400><c> to</c><01:10:54.560><c> point</c><01:10:54.800><c> to</c><01:10:54.880><c> the</c>

01:10:55.030 --> 01:10:55.040 align:start position:0%
set up the s t vec to point to the
 

01:10:55.040 --> 01:10:56.070 align:start position:0%
set up the s t vec to point to the
trampoline

01:10:56.070 --> 01:10:56.080 align:start position:0%
trampoline
 

01:10:56.080 --> 01:10:58.310 align:start position:0%
trampoline
all<01:10:56.239><c> the</c><01:10:56.320><c> way</c><01:10:56.480><c> through</c><01:10:56.640><c> the</c><01:10:56.880><c> final</c><01:10:57.840><c> s</c><01:10:58.080><c> red</c>

01:10:58.310 --> 01:10:58.320 align:start position:0%
all the way through the final s red
 

01:10:58.320 --> 01:11:01.189 align:start position:0%
all the way through the final s red
instruction<01:10:59.040><c> that</c><01:10:59.199><c> returns</c><01:10:59.600><c> to</c><01:10:59.760><c> user</c><01:11:00.000><c> space</c>

01:11:01.189 --> 01:11:01.199 align:start position:0%
instruction that returns to user space
 

01:11:01.199 --> 01:11:02.630 align:start position:0%
instruction that returns to user space
it<01:11:01.280><c> turns</c><01:11:01.520><c> out</c><01:11:01.600><c> that</c><01:11:01.760><c> s</c><01:11:01.920><c> red</c><01:11:02.159><c> instruction</c><01:11:02.560><c> at</c>

01:11:02.630 --> 01:11:02.640 align:start position:0%
it turns out that s red instruction at
 

01:11:02.640 --> 01:11:04.390 align:start position:0%
it turns out that s red instruction at
the<01:11:02.719><c> end</c><01:11:02.800><c> of</c><01:11:02.880><c> the</c><01:11:03.040><c> trampoline</c>

01:11:04.390 --> 01:11:04.400 align:start position:0%
the end of the trampoline
 

01:11:04.400 --> 01:11:07.430 align:start position:0%
the end of the trampoline
um<01:11:05.360><c> turns</c><01:11:05.679><c> interrupts</c><01:11:06.159><c> back</c><01:11:06.400><c> on</c><01:11:07.120><c> so</c><01:11:07.280><c> the</c>

01:11:07.430 --> 01:11:07.440 align:start position:0%
um turns interrupts back on so the
 

01:11:07.440 --> 01:11:09.110 align:start position:0%
um turns interrupts back on so the
interrupts<01:11:07.840><c> are</c><01:11:08.000><c> on</c><01:11:08.159><c> when</c><01:11:08.320><c> we're</c><01:11:08.560><c> executing</c>

01:11:09.110 --> 01:11:09.120 align:start position:0%
interrupts are on when we're executing
 

01:11:09.120 --> 01:11:10.550 align:start position:0%
interrupts are on when we're executing
in<01:11:09.280><c> uh</c>

01:11:10.550 --> 01:11:10.560 align:start position:0%
in uh
 

01:11:10.560 --> 01:11:11.910 align:start position:0%
in uh
user<01:11:10.880><c> code</c><01:11:11.120><c> even</c><01:11:11.280><c> though</c><01:11:11.360><c> we</c><01:11:11.520><c> just</c><01:11:11.679><c> turned</c>

01:11:11.910 --> 01:11:11.920 align:start position:0%
user code even though we just turned
 

01:11:11.920 --> 01:11:14.870 align:start position:0%
user code even though we just turned
them<01:11:12.080><c> off</c><01:11:13.520><c> the</c><01:11:13.679><c> next</c><01:11:13.920><c> couple</c><01:11:14.159><c> of</c><01:11:14.320><c> lines</c>

01:11:14.870 --> 01:11:14.880 align:start position:0%
them off the next couple of lines
 

01:11:14.880 --> 01:11:17.669 align:start position:0%
them off the next couple of lines
fill<01:11:15.199><c> in</c><01:11:15.840><c> those</c><01:11:16.159><c> trap</c><01:11:16.480><c> frame</c><01:11:16.880><c> slots</c><01:11:17.360><c> that</c><01:11:17.520><c> we</c>

01:11:17.669 --> 01:11:17.679 align:start position:0%
fill in those trap frame slots that we
 

01:11:17.679 --> 01:11:19.669 align:start position:0%
fill in those trap frame slots that we
saw<01:11:17.840><c> before</c><01:11:18.159><c> that</c><01:11:18.320><c> hold</c><01:11:18.640><c> various</c>

01:11:19.669 --> 01:11:19.679 align:start position:0%
saw before that hold various
 

01:11:19.679 --> 01:11:22.070 align:start position:0%
saw before that hold various
values<01:11:20.080><c> that</c><01:11:20.239><c> are</c><01:11:20.320><c> convenient</c><01:11:21.760><c> for</c><01:11:21.920><c> the</c>

01:11:22.070 --> 01:11:22.080 align:start position:0%
values that are convenient for the
 

01:11:22.080 --> 01:11:23.270 align:start position:0%
values that are convenient for the
trampoline<01:11:22.719><c> code</c>

01:11:23.270 --> 01:11:23.280 align:start position:0%
trampoline code
 

01:11:23.280 --> 01:11:27.189 align:start position:0%
trampoline code
so<01:11:25.520><c> the</c><01:11:25.679><c> code</c><01:11:25.920><c> here</c><01:11:26.080><c> stashes</c><01:11:26.480><c> away</c><01:11:26.719><c> a</c><01:11:26.800><c> pointer</c>

01:11:27.189 --> 01:11:27.199 align:start position:0%
so the code here stashes away a pointer
 

01:11:27.199 --> 01:11:28.390 align:start position:0%
so the code here stashes away a pointer
to<01:11:27.280><c> the</c><01:11:27.440><c> kernel</c>

01:11:28.390 --> 01:11:28.400 align:start position:0%
to the kernel
 

01:11:28.400 --> 01:11:31.669 align:start position:0%
to the kernel
page<01:11:28.800><c> table</c><01:11:29.840><c> in</c><01:11:29.920><c> the</c><01:11:30.080><c> trap</c><01:11:30.400><c> frame</c><01:11:31.120><c> it</c><01:11:31.199><c> stashes</c>

01:11:31.669 --> 01:11:31.679 align:start position:0%
page table in the trap frame it stashes
 

01:11:31.679 --> 01:11:31.990 align:start position:0%
page table in the trap frame it stashes
away

01:11:31.990 --> 01:11:32.000 align:start position:0%
away
 

01:11:32.000 --> 01:11:36.870 align:start position:0%
away
a<01:11:32.159><c> pointer</c><01:11:32.640><c> to</c><01:11:32.880><c> this</c><01:11:33.360><c> processes</c><01:11:34.719><c> kernel</c><01:11:35.120><c> stack</c>

01:11:36.870 --> 01:11:36.880 align:start position:0%
a pointer to this processes kernel stack
 

01:11:36.880 --> 01:11:41.270 align:start position:0%
a pointer to this processes kernel stack
uh<01:11:37.040><c> it</c><01:11:37.120><c> stashes</c><01:11:37.520><c> away</c><01:11:37.760><c> in</c><01:11:37.840><c> the</c><01:11:37.920><c> trap</c><01:11:38.840><c> frame</c>

01:11:41.270 --> 01:11:41.280 align:start position:0%
uh it stashes away in the trap frame
 

01:11:41.280 --> 01:11:42.870 align:start position:0%
uh it stashes away in the trap frame
a<01:11:41.440><c> pointer</c><01:11:41.760><c> to</c><01:11:41.840><c> the</c><01:11:42.000><c> user</c><01:11:42.239><c> track</c><01:11:42.560><c> function</c>

01:11:42.870 --> 01:11:42.880 align:start position:0%
a pointer to the user track function
 

01:11:42.880 --> 01:11:44.790 align:start position:0%
a pointer to the user track function
which<01:11:43.120><c> is</c><01:11:43.280><c> what</c><01:11:43.600><c> the</c><01:11:43.760><c> trampoline</c><01:11:44.239><c> code</c><01:11:44.480><c> jumped</c>

01:11:44.790 --> 01:11:44.800 align:start position:0%
which is what the trampoline code jumped
 

01:11:44.800 --> 01:11:47.669 align:start position:0%
which is what the trampoline code jumped
to<01:11:45.040><c> at</c><01:11:45.120><c> the</c><01:11:45.199><c> very</c><01:11:45.600><c> end</c>

01:11:47.669 --> 01:11:47.679 align:start position:0%
to at the very end
 

01:11:47.679 --> 01:11:49.430 align:start position:0%
to at the very end
and<01:11:47.760><c> it</c><01:11:47.920><c> stashes</c><01:11:48.239><c> the</c><01:11:48.320><c> way</c><01:11:48.480><c> the</c><01:11:48.640><c> current</c><01:11:49.120><c> core</c>

01:11:49.430 --> 01:11:49.440 align:start position:0%
and it stashes the way the current core
 

01:11:49.440 --> 01:11:50.790 align:start position:0%
and it stashes the way the current core
number

01:11:50.790 --> 01:11:50.800 align:start position:0%
number
 

01:11:50.800 --> 01:11:54.149 align:start position:0%
number
read<01:11:51.040><c> from</c><01:11:51.280><c> the</c><01:11:51.360><c> tp</c><01:11:51.760><c> register</c><01:11:52.320><c> so</c><01:11:52.480><c> that</c><01:11:52.840><c> the</c>

01:11:54.149 --> 01:11:54.159 align:start position:0%
read from the tp register so that the
 

01:11:54.159 --> 01:11:55.830 align:start position:0%
read from the tp register so that the
trampoline<01:11:54.719><c> code</c><01:11:54.960><c> can</c><01:11:55.120><c> just</c><01:11:55.280><c> restore</c><01:11:55.679><c> that</c>

01:11:55.830 --> 01:11:55.840 align:start position:0%
trampoline code can just restore that
 

01:11:55.840 --> 01:11:58.229 align:start position:0%
trampoline code can just restore that
same<01:11:56.080><c> value</c><01:11:57.120><c> because</c><01:11:57.360><c> user</c><01:11:57.679><c> code</c><01:11:57.920><c> may</c><01:11:58.080><c> have</c>

01:11:58.229 --> 01:11:58.239 align:start position:0%
same value because user code may have
 

01:11:58.239 --> 01:12:01.270 align:start position:0%
same value because user code may have
disturbed<01:11:58.719><c> it</c>

01:12:01.270 --> 01:12:01.280 align:start position:0%
 
 

01:12:01.280 --> 01:12:04.390 align:start position:0%
 
all<01:12:01.360><c> right</c><01:12:02.320><c> yes</c><01:12:02.960><c> um</c><01:12:03.440><c> why</c><01:12:03.600><c> didn't</c><01:12:03.840><c> we</c><01:12:04.000><c> save</c><01:12:04.239><c> the</c>

01:12:04.390 --> 01:12:04.400 align:start position:0%
all right yes um why didn't we save the
 

01:12:04.400 --> 01:12:08.310 align:start position:0%
all right yes um why didn't we save the
sepc<01:12:05.199><c> in</c><01:12:05.280><c> the</c><01:12:06.840><c> trampoline</c>

01:12:08.310 --> 01:12:08.320 align:start position:0%
sepc in the trampoline
 

01:12:08.320 --> 01:12:11.350 align:start position:0%
sepc in the trampoline
it<01:12:08.480><c> could</c><01:12:08.719><c> have</c>

01:12:11.350 --> 01:12:11.360 align:start position:0%
 
 

01:12:11.360 --> 01:12:13.350 align:start position:0%
 
uh<01:12:11.600><c> yeah</c><01:12:11.760><c> yeah</c><01:12:12.000><c> i</c><01:12:12.080><c> mean</c><01:12:12.239><c> that</c><01:12:12.400><c> that</c><01:12:12.560><c> the</c><01:12:12.800><c> scpc</c>

01:12:13.350 --> 01:12:13.360 align:start position:0%
uh yeah yeah i mean that that the scpc
 

01:12:13.360 --> 01:12:14.390 align:start position:0%
uh yeah yeah i mean that that the scpc
could<01:12:13.520><c> have</c><01:12:13.600><c> been</c>

01:12:14.390 --> 01:12:14.400 align:start position:0%
could have been
 

01:12:14.400 --> 01:12:16.070 align:start position:0%
could have been
the<01:12:14.560><c> trampoline</c><01:12:14.880><c> code</c><01:12:15.199><c> happens</c><01:12:15.520><c> not</c><01:12:15.679><c> to</c><01:12:15.840><c> save</c>

01:12:16.070 --> 01:12:16.080 align:start position:0%
the trampoline code happens not to save
 

01:12:16.080 --> 01:12:17.910 align:start position:0%
the trampoline code happens not to save
it<01:12:16.239><c> along</c><01:12:16.480><c> with</c><01:12:16.560><c> the</c><01:12:16.640><c> other</c><01:12:16.800><c> registers</c>

01:12:17.910 --> 01:12:17.920 align:start position:0%
it along with the other registers
 

01:12:17.920 --> 01:12:21.430 align:start position:0%
it along with the other registers
we<01:12:18.239><c> perfectly</c><01:12:18.640><c> well</c><01:12:18.880><c> could</c><01:12:19.040><c> modify</c><01:12:19.679><c> the</c><01:12:20.880><c> xv6</c>

01:12:21.430 --> 01:12:21.440 align:start position:0%
we perfectly well could modify the xv6
 

01:12:21.440 --> 01:12:23.110 align:start position:0%
we perfectly well could modify the xv6
to<01:12:21.840><c> save</c><01:12:22.080><c> it</c><01:12:22.159><c> i</c><01:12:22.239><c> mean</c><01:12:22.400><c> where</c><01:12:22.560><c> it</c><01:12:22.640><c> is</c><01:12:22.800><c> actually</c>

01:12:23.110 --> 01:12:23.120 align:start position:0%
to save it i mean where it is actually
 

01:12:23.120 --> 01:12:25.030 align:start position:0%
to save it i mean where it is actually
saved<01:12:23.440><c> as</c><01:12:23.520><c> you</c>

01:12:25.030 --> 01:12:25.040 align:start position:0%
saved as you
 

01:12:25.040 --> 01:12:27.830 align:start position:0%
saved as you
probably<01:12:25.280><c> remember</c><01:12:25.840><c> is</c><01:12:26.880><c> just</c><01:12:27.120><c> happen</c><01:12:27.360><c> to</c><01:12:27.600><c> save</c>

01:12:27.830 --> 01:12:27.840 align:start position:0%
probably remember is just happen to save
 

01:12:27.840 --> 01:12:29.830 align:start position:0%
probably remember is just happen to save
it<01:12:28.000><c> in</c><01:12:28.080><c> user</c><01:12:28.400><c> trap</c><01:12:28.640><c> and</c><01:12:28.800><c> c</c><01:12:28.960><c> code</c><01:12:29.280><c> instead</c><01:12:29.520><c> of</c><01:12:29.679><c> an</c>

01:12:29.830 --> 01:12:29.840 align:start position:0%
it in user trap and c code instead of an
 

01:12:29.840 --> 01:12:31.590 align:start position:0%
it in user trap and c code instead of an
assembly<01:12:30.239><c> code</c>

01:12:31.590 --> 01:12:31.600 align:start position:0%
assembly code
 

01:12:31.600 --> 01:12:34.950 align:start position:0%
assembly code
in<01:12:31.760><c> the</c><01:12:31.840><c> trampoline</c><01:12:32.320><c> code</c>

01:12:34.950 --> 01:12:34.960 align:start position:0%
 
 

01:12:34.960 --> 01:12:36.870 align:start position:0%
 
um<01:12:35.600><c> i</c><01:12:35.679><c> don't</c><01:12:35.840><c> think</c><01:12:36.000><c> this</c><01:12:36.239><c> i</c><01:12:36.320><c> can't</c><01:12:36.480><c> think</c><01:12:36.640><c> of</c><01:12:36.800><c> a</c>

01:12:36.870 --> 01:12:36.880 align:start position:0%
um i don't think this i can't think of a
 

01:12:36.880 --> 01:12:38.470 align:start position:0%
um i don't think this i can't think of a
good<01:12:36.960><c> reason</c><01:12:37.199><c> to</c><01:12:37.360><c> do</c><01:12:37.520><c> it</c><01:12:37.600><c> one</c><01:12:37.840><c> way</c><01:12:38.159><c> or</c><01:12:38.320><c> the</c>

01:12:38.470 --> 01:12:38.480 align:start position:0%
good reason to do it one way or the
 

01:12:38.480 --> 01:12:40.310 align:start position:0%
good reason to do it one way or the
other

01:12:40.310 --> 01:12:40.320 align:start position:0%
other
 

01:12:40.320 --> 01:12:42.470 align:start position:0%
other
the<01:12:40.480><c> user</c><01:12:40.800><c> registers</c><01:12:41.520><c> really</c><01:12:41.920><c> have</c><01:12:42.159><c> to</c><01:12:42.239><c> be</c>

01:12:42.470 --> 01:12:42.480 align:start position:0%
the user registers really have to be
 

01:12:42.480 --> 01:12:45.189 align:start position:0%
the user registers really have to be
saved<01:12:43.120><c> in</c><01:12:43.280><c> the</c><01:12:43.440><c> assembly</c><01:12:43.920><c> code</c>

01:12:45.189 --> 01:12:45.199 align:start position:0%
saved in the assembly code
 

01:12:45.199 --> 01:12:47.750 align:start position:0%
saved in the assembly code
because<01:12:45.600><c> any</c><01:12:45.920><c> c</c><01:12:46.159><c> code</c><01:12:46.400><c> is</c><01:12:46.560><c> entitled</c><01:12:47.440><c> for</c><01:12:47.600><c> all</c>

01:12:47.750 --> 01:12:47.760 align:start position:0%
because any c code is entitled for all
 

01:12:47.760 --> 01:12:49.189 align:start position:0%
because any c code is entitled for all
we<01:12:47.840><c> know</c><01:12:48.000><c> the</c><01:12:48.080><c> compiler</c><01:12:48.560><c> generates</c><01:12:48.960><c> code</c>

01:12:49.189 --> 01:12:49.199 align:start position:0%
we know the compiler generates code
 

01:12:49.199 --> 01:12:53.110 align:start position:0%
we know the compiler generates code
which<01:12:49.360><c> modifies</c><01:12:49.920><c> any</c>

01:12:53.110 --> 01:12:53.120 align:start position:0%
 
 

01:12:53.120 --> 01:12:54.870 align:start position:0%
 
user<01:12:53.440><c> register</c><01:12:53.840><c> so</c><01:12:53.920><c> those</c><01:12:54.159><c> user</c><01:12:54.400><c> registers</c>

01:12:54.870 --> 01:12:54.880 align:start position:0%
user register so those user registers
 

01:12:54.880 --> 01:12:56.709 align:start position:0%
user register so those user registers
are<01:12:55.600><c> pretty</c><01:12:55.760><c> important</c><01:12:56.080><c> to</c><01:12:56.159><c> save</c><01:12:56.320><c> them</c><01:12:56.480><c> in</c>

01:12:56.709 --> 01:12:56.719 align:start position:0%
are pretty important to save them in
 

01:12:56.719 --> 01:12:58.950 align:start position:0%
are pretty important to save them in
assembly<01:12:57.040><c> code</c><01:12:57.280><c> before</c><01:12:57.600><c> entering</c><01:12:57.920><c> c</c>

01:12:58.950 --> 01:12:58.960 align:start position:0%
assembly code before entering c
 

01:12:58.960 --> 01:13:00.950 align:start position:0%
assembly code before entering c
but<01:12:59.120><c> the</c><01:12:59.360><c> epc</c><01:12:59.840><c> we</c><01:13:00.239><c> could</c><01:13:00.400><c> have</c><01:13:00.480><c> been</c><01:13:00.640><c> saved</c>

01:13:00.950 --> 01:13:00.960 align:start position:0%
but the epc we could have been saved
 

01:13:00.960 --> 01:13:04.470 align:start position:0%
but the epc we could have been saved
earlier<01:13:01.360><c> or</c><01:13:02.840><c> later</c>

01:13:04.470 --> 01:13:04.480 align:start position:0%
earlier or later
 

01:13:04.480 --> 01:13:06.550 align:start position:0%
earlier or later
okay<01:13:04.640><c> so</c><01:13:04.800><c> we're</c><01:13:04.880><c> in</c><01:13:05.040><c> user</c><01:13:05.280><c> trap</c><01:13:05.600><c> red</c><01:13:05.840><c> sort</c><01:13:06.080><c> of</c>

01:13:06.550 --> 01:13:06.560 align:start position:0%
okay so we're in user trap red sort of
 

01:13:06.560 --> 01:13:08.870 align:start position:0%
okay so we're in user trap red sort of
preparing<01:13:07.199><c> the</c><01:13:07.360><c> trap</c><01:13:07.600><c> we</c><01:13:07.760><c> prepared</c><01:13:08.320><c> the</c><01:13:08.560><c> trap</c>

01:13:08.870 --> 01:13:08.880 align:start position:0%
preparing the trap we prepared the trap
 

01:13:08.880 --> 01:13:10.390 align:start position:0%
preparing the trap we prepared the trap
frame<01:13:09.280><c> with</c><01:13:09.440><c> all</c><01:13:09.600><c> these</c><01:13:09.760><c> values</c><01:13:10.159><c> that</c><01:13:10.320><c> are</c>

01:13:10.390 --> 01:13:10.400 align:start position:0%
frame with all these values that are
 

01:13:10.400 --> 01:13:12.070 align:start position:0%
frame with all these values that are
going<01:13:10.640><c> to</c><01:13:10.800><c> be</c><01:13:10.960><c> needed</c>

01:13:12.070 --> 01:13:12.080 align:start position:0%
going to be needed
 

01:13:12.080 --> 01:13:15.030 align:start position:0%
going to be needed
um<01:13:12.400><c> next</c><01:13:12.719><c> time</c><01:13:14.159><c> there's</c><01:13:14.400><c> a</c><01:13:14.480><c> transition</c><01:13:14.880><c> from</c>

01:13:15.030 --> 01:13:15.040 align:start position:0%
um next time there's a transition from
 

01:13:15.040 --> 01:13:16.310 align:start position:0%
um next time there's a transition from
user<01:13:15.280><c> space</c><01:13:15.520><c> to</c><01:13:15.679><c> kernel</c>

01:13:16.310 --> 01:13:16.320 align:start position:0%
user space to kernel
 

01:13:16.320 --> 01:13:20.070 align:start position:0%
user space to kernel
next<01:13:16.840><c> trap</c>

01:13:20.070 --> 01:13:20.080 align:start position:0%
 
 

01:13:20.080 --> 01:13:21.189 align:start position:0%
 
there's<01:13:20.320><c> a</c><01:13:20.400><c> couple</c><01:13:20.560><c> things</c><01:13:20.719><c> we</c><01:13:20.800><c> have</c><01:13:20.880><c> to</c><01:13:21.040><c> set</c>

01:13:21.189 --> 01:13:21.199 align:start position:0%
there's a couple things we have to set
 

01:13:21.199 --> 01:13:23.430 align:start position:0%
there's a couple things we have to set
up<01:13:21.360><c> in</c><01:13:21.440><c> the</c><01:13:21.679><c> s</c><01:13:22.000><c> status</c>

01:13:23.430 --> 01:13:23.440 align:start position:0%
up in the s status
 

01:13:23.440 --> 01:13:27.110 align:start position:0%
up in the s status
control<01:13:24.000><c> register</c><01:13:26.080><c> it</c><01:13:26.159><c> turns</c><01:13:26.480><c> out</c><01:13:26.560><c> this</c>

01:13:27.110 --> 01:13:27.120 align:start position:0%
control register it turns out this
 

01:13:27.120 --> 01:13:30.310 align:start position:0%
control register it turns out this
spp<01:13:28.159><c> bit</c><01:13:28.960><c> in</c><01:13:29.120><c> s</c><01:13:29.360><c> status</c>

01:13:30.310 --> 01:13:30.320 align:start position:0%
spp bit in s status
 

01:13:30.320 --> 01:13:33.350 align:start position:0%
spp bit in s status
controls<01:13:31.120><c> weather</c><01:13:31.760><c> controls</c><01:13:32.239><c> the</c><01:13:32.560><c> mode</c>

01:13:33.350 --> 01:13:33.360 align:start position:0%
controls weather controls the mode
 

01:13:33.360 --> 01:13:36.870 align:start position:0%
controls weather controls the mode
that<01:13:34.560><c> s</c><01:13:34.880><c> red</c><01:13:35.360><c> returns</c><01:13:35.920><c> to</c><01:13:36.080><c> and</c><01:13:36.159><c> by</c><01:13:36.400><c> clearing</c><01:13:36.719><c> it</c>

01:13:36.870 --> 01:13:36.880 align:start position:0%
that s red returns to and by clearing it
 

01:13:36.880 --> 01:13:37.830 align:start position:0%
that s red returns to and by clearing it
we're<01:13:37.040><c> just</c><01:13:37.199><c> saying</c>

01:13:37.830 --> 01:13:37.840 align:start position:0%
we're just saying
 

01:13:37.840 --> 01:13:40.950 align:start position:0%
we're just saying
oh<01:13:38.000><c> look</c><01:13:38.159><c> next</c><01:13:38.320><c> time</c><01:13:38.480><c> we</c><01:13:39.199><c> execute</c><01:13:40.159><c> sret</c>

01:13:40.950 --> 01:13:40.960 align:start position:0%
oh look next time we execute sret
 

01:13:40.960 --> 01:13:42.709 align:start position:0%
oh look next time we execute sret
we<01:13:41.120><c> want</c><01:13:41.280><c> to</c><01:13:41.360><c> go</c><01:13:41.440><c> to</c><01:13:41.600><c> user</c><01:13:41.920><c> mode</c><01:13:42.239><c> instead</c><01:13:42.560><c> of</c>

01:13:42.709 --> 01:13:42.719 align:start position:0%
we want to go to user mode instead of
 

01:13:42.719 --> 01:13:44.709 align:start position:0%
we want to go to user mode instead of
supervisor<01:13:43.440><c> mode</c>

01:13:44.709 --> 01:13:44.719 align:start position:0%
supervisor mode
 

01:13:44.719 --> 01:13:48.550 align:start position:0%
supervisor mode
and<01:13:44.880><c> this</c><01:13:45.199><c> spie</c><01:13:46.000><c> bit</c><01:13:46.719><c> controls</c><01:13:47.199><c> whether</c>

01:13:48.550 --> 01:13:48.560 align:start position:0%
and this spie bit controls whether
 

01:13:48.560 --> 01:13:51.669 align:start position:0%
and this spie bit controls whether
interrupts<01:13:48.960><c> will</c><01:13:49.120><c> be</c><01:13:49.280><c> enabled</c><01:13:51.199><c> after</c><01:13:51.520><c> we</c>

01:13:51.669 --> 01:13:51.679 align:start position:0%
interrupts will be enabled after we
 

01:13:51.679 --> 01:13:52.790 align:start position:0%
interrupts will be enabled after we
execute<01:13:52.159><c> s-red</c>

01:13:52.790 --> 01:13:52.800 align:start position:0%
execute s-red
 

01:13:52.800 --> 01:13:54.709 align:start position:0%
execute s-red
and<01:13:53.520><c> you</c><01:13:53.679><c> know</c><01:13:53.760><c> after</c><01:13:54.000><c> we</c><01:13:54.080><c> get</c><01:13:54.239><c> into</c><01:13:54.400><c> user</c>

01:13:54.709 --> 01:13:54.719 align:start position:0%
and you know after we get into user
 

01:13:54.719 --> 01:13:56.790 align:start position:0%
and you know after we get into user
space<01:13:55.199><c> and</c><01:13:55.360><c> we</c><01:13:55.520><c> do</c><01:13:55.679><c> want</c><01:13:55.840><c> them</c><01:13:56.000><c> to</c><01:13:56.080><c> be</c><01:13:56.159><c> enabled</c>

01:13:56.790 --> 01:13:56.800 align:start position:0%
space and we do want them to be enabled
 

01:13:56.800 --> 01:13:59.750 align:start position:0%
space and we do want them to be enabled
so<01:13:57.520><c> i'm</c><01:13:57.679><c> going</c><01:13:57.760><c> to</c><01:13:57.920><c> set</c><01:13:58.159><c> that</c><01:13:58.400><c> spie</c><01:13:59.120><c> bit</c><01:13:59.679><c> and</c>

01:13:59.750 --> 01:13:59.760 align:start position:0%
so i'm going to set that spie bit and
 

01:13:59.760 --> 01:14:00.709 align:start position:0%
so i'm going to set that spie bit and
then<01:13:59.840><c> we're</c><01:14:00.000><c> going</c><01:14:00.080><c> to</c><01:14:00.159><c> write</c><01:14:00.320><c> this</c><01:14:00.560><c> new</c>

01:14:00.709 --> 01:14:00.719 align:start position:0%
then we're going to write this new
 

01:14:00.719 --> 01:14:03.350 align:start position:0%
then we're going to write this new
modified<01:14:01.280><c> status</c><01:14:01.840><c> into</c><01:14:02.000><c> the</c><01:14:02.159><c> actual</c><01:14:02.480><c> hardware</c>

01:14:03.350 --> 01:14:03.360 align:start position:0%
modified status into the actual hardware
 

01:14:03.360 --> 01:14:06.550 align:start position:0%
modified status into the actual hardware
status<01:14:03.840><c> register</c>

01:14:06.550 --> 01:14:06.560 align:start position:0%
 
 

01:14:06.560 --> 01:14:10.310 align:start position:0%
 
it<01:14:06.719><c> turns</c><01:14:06.960><c> out</c><01:14:07.040><c> what</c><01:14:07.280><c> sret</c><01:14:07.840><c> does</c>

01:14:10.310 --> 01:14:10.320 align:start position:0%
 
 

01:14:10.320 --> 01:14:11.590 align:start position:0%
 
you<01:14:10.480><c> know</c><01:14:10.560><c> the</c><01:14:10.640><c> sro</c><01:14:11.040><c> we're</c><01:14:11.120><c> going</c><01:14:11.199><c> to</c><01:14:11.280><c> execute</c>

01:14:11.590 --> 01:14:11.600 align:start position:0%
you know the sro we're going to execute
 

01:14:11.600 --> 01:14:12.950 align:start position:0%
you know the sro we're going to execute
right<01:14:11.760><c> at</c><01:14:11.840><c> the</c><01:14:11.920><c> end</c><01:14:12.000><c> of</c><01:14:12.080><c> the</c><01:14:12.159><c> trampoline</c><01:14:12.719><c> code</c>

01:14:12.950 --> 01:14:12.960 align:start position:0%
right at the end of the trampoline code
 

01:14:12.960 --> 01:14:14.470 align:start position:0%
right at the end of the trampoline code
what<01:14:13.120><c> that</c><01:14:13.360><c> s</c><01:14:13.520><c> red</c><01:14:13.760><c> does</c>

01:14:14.470 --> 01:14:14.480 align:start position:0%
what that s red does
 

01:14:14.480 --> 01:14:17.270 align:start position:0%
what that s red does
is<01:14:14.719><c> um</c><01:14:15.440><c> sets</c><01:14:15.679><c> the</c><01:14:15.840><c> program</c><01:14:16.159><c> counter</c><01:14:16.560><c> equal</c><01:14:16.880><c> to</c>

01:14:17.270 --> 01:14:17.280 align:start position:0%
is um sets the program counter equal to
 

01:14:17.280 --> 01:14:19.830 align:start position:0%
is um sets the program counter equal to
the<01:14:17.440><c> sepc</c><01:14:18.400><c> register</c>

01:14:19.830 --> 01:14:19.840 align:start position:0%
the sepc register
 

01:14:19.840 --> 01:14:21.910 align:start position:0%
the sepc register
so<01:14:20.000><c> we're</c><01:14:20.159><c> now</c><01:14:20.320><c> going</c><01:14:20.480><c> to</c><01:14:20.560><c> set</c><01:14:20.800><c> up</c><01:14:20.880><c> the</c><01:14:21.120><c> sepc</c>

01:14:21.910 --> 01:14:21.920 align:start position:0%
so we're now going to set up the sepc
 

01:14:21.920 --> 01:14:23.270 align:start position:0%
so we're now going to set up the sepc
register<01:14:22.480><c> to</c><01:14:22.640><c> have</c>

01:14:23.270 --> 01:14:23.280 align:start position:0%
register to have
 

01:14:23.280 --> 01:14:27.350 align:start position:0%
register to have
the<01:14:23.440><c> saved</c><01:14:24.000><c> user</c><01:14:25.280><c> program</c><01:14:25.679><c> counter</c>

01:14:27.350 --> 01:14:27.360 align:start position:0%
the saved user program counter
 

01:14:27.360 --> 01:14:29.990 align:start position:0%
the saved user program counter
which<01:14:27.600><c> if</c><01:14:27.760><c> you</c><01:14:27.840><c> recall</c><01:14:28.320><c> we</c><01:14:29.120><c> recently</c><01:14:29.600><c> saved</c><01:14:29.920><c> in</c>

01:14:29.990 --> 01:14:30.000 align:start position:0%
which if you recall we recently saved in
 

01:14:30.000 --> 01:14:31.430 align:start position:0%
which if you recall we recently saved in
the<01:14:30.080><c> trap</c><01:14:30.320><c> frame</c><01:14:30.640><c> that's</c><01:14:30.880><c> what's</c><01:14:31.120><c> happening</c>

01:14:31.430 --> 01:14:31.440 align:start position:0%
the trap frame that's what's happening
 

01:14:31.440 --> 01:14:34.149 align:start position:0%
the trap frame that's what's happening
here

01:14:34.149 --> 01:14:34.159 align:start position:0%
 
 

01:14:34.159 --> 01:14:36.550 align:start position:0%
 
if<01:14:34.320><c> you</c><01:14:34.400><c> remember</c><01:14:34.719><c> also</c><01:14:34.960><c> the</c><01:14:35.120><c> trap</c><01:14:35.440><c> frame</c>

01:14:36.550 --> 01:14:36.560 align:start position:0%
if you remember also the trap frame
 

01:14:36.560 --> 01:14:39.430 align:start position:0%
if you remember also the trap frame
contain<01:14:36.960><c> a</c><01:14:37.120><c> pointer</c><01:14:37.600><c> to</c>

01:14:39.430 --> 01:14:39.440 align:start position:0%
contain a pointer to
 

01:14:39.440 --> 01:14:41.430 align:start position:0%
contain a pointer to
the<01:14:39.840><c> kernel</c><01:14:40.239><c> page</c><01:14:40.560><c> table</c><01:14:40.960><c> because</c><01:14:41.280><c> the</c>

01:14:41.430 --> 01:14:41.440 align:start position:0%
the kernel page table because the
 

01:14:41.440 --> 01:14:43.590 align:start position:0%
the kernel page table because the
trampoline<01:14:41.840><c> needs</c><01:14:42.000><c> to</c><01:14:42.159><c> switch</c><01:14:42.400><c> to</c><01:14:42.560><c> it</c>

01:14:43.590 --> 01:14:43.600 align:start position:0%
trampoline needs to switch to it
 

01:14:43.600 --> 01:14:45.750 align:start position:0%
trampoline needs to switch to it
we<01:14:43.760><c> need</c><01:14:43.920><c> to</c><01:14:44.080><c> cook</c><01:14:44.320><c> up</c><01:14:44.560><c> the</c><01:14:44.880><c> special</c><01:14:45.520><c> bit</c>

01:14:45.750 --> 01:14:45.760 align:start position:0%
we need to cook up the special bit
 

01:14:45.760 --> 01:14:48.070 align:start position:0%
we need to cook up the special bit
pattern<01:14:46.080><c> that</c><01:14:46.239><c> you</c><01:14:46.320><c> need</c><01:14:46.480><c> to</c><01:14:46.640><c> write</c><01:14:46.800><c> to</c><01:14:46.960><c> satp</c>

01:14:48.070 --> 01:14:48.080 align:start position:0%
pattern that you need to write to satp
 

01:14:48.080 --> 01:14:52.709 align:start position:0%
pattern that you need to write to satp
that's<01:14:48.320><c> done</c><01:14:48.640><c> here</c><01:14:50.719><c> and</c>

01:14:52.709 --> 01:14:52.719 align:start position:0%
that's done here and
 

01:14:52.719 --> 01:14:55.430 align:start position:0%
that's done here and
i'm<01:14:52.880><c> sorry</c><01:14:53.520><c> we're</c><01:14:54.000><c> now</c><01:14:54.320><c> preparing</c><01:14:54.960><c> a</c><01:14:55.120><c> pointer</c>

01:14:55.430 --> 01:14:55.440 align:start position:0%
i'm sorry we're now preparing a pointer
 

01:14:55.440 --> 01:14:57.830 align:start position:0%
i'm sorry we're now preparing a pointer
to<01:14:55.600><c> the</c><01:14:55.760><c> user</c><01:14:56.239><c> page</c><01:14:56.640><c> table</c>

01:14:57.830 --> 01:14:57.840 align:start position:0%
to the user page table
 

01:14:57.840 --> 01:14:59.590 align:start position:0%
to the user page table
which<01:14:58.080><c> we</c><01:14:58.239><c> need</c><01:14:58.400><c> to</c><01:14:58.560><c> switch</c><01:14:58.880><c> to</c><01:14:59.199><c> on</c><01:14:59.280><c> the</c><01:14:59.360><c> way</c>

01:14:59.590 --> 01:14:59.600 align:start position:0%
which we need to switch to on the way
 

01:14:59.600 --> 01:15:02.470 align:start position:0%
which we need to switch to on the way
into<01:14:59.760><c> user</c><01:15:00.080><c> space</c>

01:15:02.470 --> 01:15:02.480 align:start position:0%
into user space
 

01:15:02.480 --> 01:15:04.070 align:start position:0%
into user space
we're<01:15:02.640><c> actually</c><01:15:03.120><c> going</c><01:15:03.199><c> to</c><01:15:03.280><c> do</c><01:15:03.440><c> that</c><01:15:03.600><c> switch</c>

01:15:04.070 --> 01:15:04.080 align:start position:0%
we're actually going to do that switch
 

01:15:04.080 --> 01:15:05.990 align:start position:0%
we're actually going to do that switch
in<01:15:04.239><c> assembly</c><01:15:04.719><c> code</c><01:15:05.360><c> because</c><01:15:05.600><c> it</c><01:15:05.679><c> has</c><01:15:05.920><c> to</c>

01:15:05.990 --> 01:15:06.000 align:start position:0%
in assembly code because it has to
 

01:15:06.000 --> 01:15:06.470 align:start position:0%
in assembly code because it has to
happen

01:15:06.470 --> 01:15:06.480 align:start position:0%
happen
 

01:15:06.480 --> 01:15:09.110 align:start position:0%
happen
in<01:15:06.560><c> the</c><01:15:06.800><c> trampoline</c><01:15:08.000><c> because</c><01:15:08.400><c> only</c><01:15:08.719><c> code</c><01:15:09.040><c> in</c>

01:15:09.110 --> 01:15:09.120 align:start position:0%
in the trampoline because only code in
 

01:15:09.120 --> 01:15:10.870 align:start position:0%
in the trampoline because only code in
the<01:15:09.280><c> trampoline</c><01:15:09.840><c> is</c><01:15:09.920><c> mapped</c><01:15:10.239><c> in</c><01:15:10.320><c> both</c><01:15:10.560><c> user</c>

01:15:10.870 --> 01:15:10.880 align:start position:0%
the trampoline is mapped in both user
 

01:15:10.880 --> 01:15:12.310 align:start position:0%
the trampoline is mapped in both user
and<01:15:10.960><c> kernel</c><01:15:11.360><c> space</c>

01:15:12.310 --> 01:15:12.320 align:start position:0%
and kernel space
 

01:15:12.320 --> 01:15:15.110 align:start position:0%
and kernel space
so<01:15:12.480><c> we</c><01:15:12.640><c> can</c><01:15:12.800><c> only</c><01:15:13.040><c> really</c><01:15:14.239><c> switch</c><01:15:14.560><c> page</c><01:15:14.800><c> tables</c>

01:15:15.110 --> 01:15:15.120 align:start position:0%
so we can only really switch page tables
 

01:15:15.120 --> 01:15:16.470 align:start position:0%
so we can only really switch page tables
when<01:15:15.199><c> we're</c><01:15:15.360><c> executing</c><01:15:15.760><c> on</c><01:15:15.840><c> the</c><01:15:15.920><c> trampoline</c>

01:15:16.470 --> 01:15:16.480 align:start position:0%
when we're executing on the trampoline
 

01:15:16.480 --> 01:15:17.590 align:start position:0%
when we're executing on the trampoline
but<01:15:16.560><c> we're</c><01:15:16.800><c> not</c><01:15:17.040><c> executing</c><01:15:17.440><c> on</c><01:15:17.520><c> the</c>

01:15:17.590 --> 01:15:17.600 align:start position:0%
but we're not executing on the
 

01:15:17.600 --> 01:15:18.790 align:start position:0%
but we're not executing on the
trampoline<01:15:18.159><c> yet</c>

01:15:18.790 --> 01:15:18.800 align:start position:0%
trampoline yet
 

01:15:18.800 --> 01:15:20.229 align:start position:0%
trampoline yet
we're<01:15:19.040><c> still</c><01:15:19.199><c> just</c><01:15:19.360><c> in</c><01:15:19.520><c> an</c><01:15:19.679><c> ordinary</c><01:15:20.000><c> c</c>

01:15:20.229 --> 01:15:20.239 align:start position:0%
we're still just in an ordinary c
 

01:15:20.239 --> 01:15:22.550 align:start position:0%
we're still just in an ordinary c
function<01:15:20.560><c> so</c><01:15:20.719><c> we</c><01:15:20.800><c> prepare</c><01:15:21.199><c> this</c><01:15:21.440><c> pointer</c>

01:15:22.550 --> 01:15:22.560 align:start position:0%
function so we prepare this pointer
 

01:15:22.560 --> 01:15:24.070 align:start position:0%
function so we prepare this pointer
and<01:15:22.880><c> we're</c><01:15:23.040><c> going</c><01:15:23.120><c> to</c><01:15:23.360><c> pass</c><01:15:23.760><c> it</c><01:15:23.840><c> to</c><01:15:24.000><c> the</c>

01:15:24.070 --> 01:15:24.080 align:start position:0%
and we're going to pass it to the
 

01:15:24.080 --> 01:15:26.550 align:start position:0%
and we're going to pass it to the
assembly<01:15:24.560><c> code</c><01:15:25.280><c> as</c><01:15:25.520><c> the</c><01:15:25.600><c> second</c><01:15:25.920><c> argument</c><01:15:26.400><c> in</c>

01:15:26.550 --> 01:15:26.560 align:start position:0%
assembly code as the second argument in
 

01:15:26.560 --> 01:15:30.790 align:start position:0%
assembly code as the second argument in
a1

01:15:30.790 --> 01:15:30.800 align:start position:0%
 
 

01:15:30.800 --> 01:15:32.310 align:start position:0%
 
what<01:15:30.960><c> this</c><01:15:31.199><c> line</c><01:15:31.440><c> here</c><01:15:31.679><c> doing</c><01:15:31.920><c> is</c><01:15:32.080><c> just</c>

01:15:32.310 --> 01:15:32.320 align:start position:0%
what this line here doing is just
 

01:15:32.320 --> 01:15:33.990 align:start position:0%
what this line here doing is just
calculating<01:15:33.040><c> the</c><01:15:33.199><c> address</c>

01:15:33.990 --> 01:15:34.000 align:start position:0%
calculating the address
 

01:15:34.000 --> 01:15:36.870 align:start position:0%
calculating the address
of<01:15:34.239><c> where</c><01:15:34.400><c> we</c><01:15:34.560><c> want</c><01:15:34.719><c> to</c><01:15:34.960><c> jump</c><01:15:35.280><c> to</c><01:15:36.560><c> at</c><01:15:36.640><c> the</c><01:15:36.719><c> end</c>

01:15:36.870 --> 01:15:36.880 align:start position:0%
of where we want to jump to at the end
 

01:15:36.880 --> 01:15:39.830 align:start position:0%
of where we want to jump to at the end
of<01:15:36.960><c> the</c><01:15:37.040><c> trampoline</c><01:15:37.600><c> code</c><01:15:37.920><c> and</c><01:15:38.080><c> it</c><01:15:38.320><c> turns</c><01:15:38.800><c> out</c>

01:15:39.830 --> 01:15:39.840 align:start position:0%
of the trampoline code and it turns out
 

01:15:39.840 --> 01:15:42.470 align:start position:0%
of the trampoline code and it turns out
that<01:15:40.080><c> there's</c><01:15:40.320><c> a</c><01:15:41.520><c> that</c><01:15:41.679><c> we</c><01:15:41.920><c> where</c><01:15:42.080><c> we</c><01:15:42.239><c> want</c><01:15:42.400><c> to</c>

01:15:42.470 --> 01:15:42.480 align:start position:0%
that there's a that we where we want to
 

01:15:42.480 --> 01:15:44.390 align:start position:0%
that there's a that we where we want to
go<01:15:42.640><c> is</c><01:15:42.800><c> user</c><01:15:43.120><c> read</c><01:15:43.360><c> user</c><01:15:43.600><c> writes</c><01:15:43.840><c> the</c><01:15:43.920><c> address</c>

01:15:44.390 --> 01:15:44.400 align:start position:0%
go is user read user writes the address
 

01:15:44.400 --> 01:15:46.149 align:start position:0%
go is user read user writes the address
of<01:15:44.560><c> the</c><01:15:44.719><c> instructions</c><01:15:45.440><c> that'll</c><01:15:45.679><c> take</c><01:15:45.840><c> us</c><01:15:46.000><c> back</c>

01:15:46.149 --> 01:15:46.159 align:start position:0%
of the instructions that'll take us back
 

01:15:46.159 --> 01:15:47.510 align:start position:0%
of the instructions that'll take us back
to<01:15:46.320><c> user</c><01:15:46.560><c> space</c>

01:15:47.510 --> 01:15:47.520 align:start position:0%
to user space
 

01:15:47.520 --> 01:15:52.470 align:start position:0%
to user space
and<01:15:47.760><c> this</c><01:15:47.920><c> little</c><01:15:48.239><c> formula</c><01:15:49.360><c> works</c><01:15:49.760><c> out</c><01:15:50.840><c> um</c>

01:15:52.470 --> 01:15:52.480 align:start position:0%
and this little formula works out um
 

01:15:52.480 --> 01:15:55.110 align:start position:0%
and this little formula works out um
the<01:15:53.040><c> address</c><01:15:53.440><c> and</c><01:15:53.600><c> the</c><01:15:54.400><c> virtual</c><01:15:54.719><c> address</c><01:15:55.040><c> and</c>

01:15:55.110 --> 01:15:55.120 align:start position:0%
the address and the virtual address and
 

01:15:55.120 --> 01:15:56.310 align:start position:0%
the address and the virtual address and
the<01:15:55.199><c> trampoline</c>

01:15:56.310 --> 01:15:56.320 align:start position:0%
the trampoline
 

01:15:56.320 --> 01:15:57.990 align:start position:0%
the trampoline
that<01:15:56.480><c> corresponds</c><01:15:57.120><c> to</c><01:15:57.280><c> that</c><01:15:57.440><c> user</c><01:15:57.679><c> rat</c>

01:15:57.990 --> 01:15:58.000 align:start position:0%
that corresponds to that user rat
 

01:15:58.000 --> 01:15:59.990 align:start position:0%
that corresponds to that user rat
function

01:15:59.990 --> 01:16:00.000 align:start position:0%
function
 

01:16:00.000 --> 01:16:04.830 align:start position:0%
function
um

01:16:04.830 --> 01:16:04.840 align:start position:0%
 
 

01:16:04.840 --> 01:16:07.510 align:start position:0%
 
oops<01:16:06.000><c> okay</c><01:16:06.239><c> so</c><01:16:06.400><c> we</c><01:16:06.560><c> calculate</c><01:16:07.040><c> the</c><01:16:07.120><c> address</c><01:16:07.440><c> of</c>

01:16:07.510 --> 01:16:07.520 align:start position:0%
oops okay so we calculate the address of
 

01:16:07.520 --> 01:16:09.590 align:start position:0%
oops okay so we calculate the address of
that

01:16:09.590 --> 01:16:09.600 align:start position:0%
that
 

01:16:09.600 --> 01:16:12.709 align:start position:0%
that
user<01:16:09.920><c> at</c><01:16:10.080><c> function</c><01:16:10.800><c> and</c><01:16:10.960><c> then</c><01:16:11.440><c> this</c><01:16:11.760><c> mess</c><01:16:12.480><c> this</c>

01:16:12.709 --> 01:16:12.719 align:start position:0%
user at function and then this mess this
 

01:16:12.719 --> 01:16:14.070 align:start position:0%
user at function and then this mess this
next<01:16:13.040><c> line</c>

01:16:14.070 --> 01:16:14.080 align:start position:0%
next line
 

01:16:14.080 --> 01:16:17.189 align:start position:0%
next line
call<01:16:14.800><c> uses</c><01:16:15.199><c> this</c><01:16:15.520><c> fn</c>

01:16:17.189 --> 01:16:17.199 align:start position:0%
call uses this fn
 

01:16:17.199 --> 01:16:19.189 align:start position:0%
call uses this fn
variable<01:16:17.679><c> as</c><01:16:17.760><c> a</c><01:16:17.920><c> function</c><01:16:18.320><c> pointer</c><01:16:18.719><c> and</c><01:16:18.880><c> jumps</c>

01:16:19.189 --> 01:16:19.199 align:start position:0%
variable as a function pointer and jumps
 

01:16:19.199 --> 01:16:21.030 align:start position:0%
variable as a function pointer and jumps
to<01:16:19.280><c> that</c><01:16:19.520><c> function</c><01:16:20.080><c> with</c><01:16:20.320><c> these</c><01:16:20.719><c> two</c>

01:16:21.030 --> 01:16:21.040 align:start position:0%
to that function with these two
 

01:16:21.040 --> 01:16:24.229 align:start position:0%
to that function with these two
arguments<01:16:22.000><c> in</c><01:16:22.159><c> a0</c><01:16:22.640><c> and</c><01:16:22.800><c> a1</c>

01:16:24.229 --> 01:16:24.239 align:start position:0%
arguments in a0 and a1
 

01:16:24.239 --> 01:16:28.709 align:start position:0%
arguments in a0 and a1
we<01:16:24.400><c> can</c><01:16:24.480><c> now</c><01:16:24.719><c> just</c><01:16:24.880><c> go</c><01:16:25.199><c> to</c>

01:16:28.709 --> 01:16:28.719 align:start position:0%
 
 

01:16:28.719 --> 01:16:33.669 align:start position:0%
 
trampoline<01:16:29.280><c> code</c>

01:16:33.669 --> 01:16:33.679 align:start position:0%
 
 

01:16:33.679 --> 01:16:36.470 align:start position:0%
 
in<01:16:33.760><c> the</c><01:16:33.920><c> trampoline</c><01:16:34.480><c> code</c><01:16:34.719><c> there's</c><01:16:36.239><c> um</c>

01:16:36.470 --> 01:16:36.480 align:start position:0%
in the trampoline code there's um
 

01:16:36.480 --> 01:16:38.630 align:start position:0%
in the trampoline code there's um
[Music]

01:16:38.630 --> 01:16:38.640 align:start position:0%
[Music]
 

01:16:38.640 --> 01:16:39.910 align:start position:0%
[Music]
well<01:16:38.800><c> first</c><01:16:39.040><c> we</c><01:16:39.199><c> switch</c><01:16:39.360><c> to</c><01:16:39.440><c> the</c><01:16:39.520><c> user</c><01:16:39.679><c> page</c>

01:16:39.910 --> 01:16:39.920 align:start position:0%
well first we switch to the user page
 

01:16:39.920 --> 01:16:41.350 align:start position:0%
well first we switch to the user page
table<01:16:40.159><c> so</c><01:16:40.239><c> it</c><01:16:40.320><c> means</c><01:16:40.560><c> actually</c><01:16:40.880><c> execute</c><01:16:41.199><c> this</c>

01:16:41.350 --> 01:16:41.360 align:start position:0%
table so it means actually execute this
 

01:16:41.360 --> 01:16:43.510 align:start position:0%
table so it means actually execute this
and<01:16:41.520><c> we</c><01:16:41.679><c> can</c><01:16:41.760><c> see</c><01:16:41.920><c> the</c><01:16:42.080><c> page</c><01:16:42.320><c> tables</c><01:16:42.719><c> change</c>

01:16:43.510 --> 01:16:43.520 align:start position:0%
and we can see the page tables change
 

01:16:43.520 --> 01:16:45.910 align:start position:0%
and we can see the page tables change
just<01:16:43.679><c> for</c><01:16:43.920><c> chuckles</c><01:16:45.120><c> we're</c><01:16:45.360><c> still</c><01:16:45.520><c> using</c><01:16:45.760><c> the</c>

01:16:45.910 --> 01:16:45.920 align:start position:0%
just for chuckles we're still using the
 

01:16:45.920 --> 01:16:48.470 align:start position:0%
just for chuckles we're still using the
giant<01:16:46.320><c> kernel</c><01:16:46.640><c> page</c><01:16:46.960><c> table</c>

01:16:48.470 --> 01:16:48.480 align:start position:0%
giant kernel page table
 

01:16:48.480 --> 01:16:52.390 align:start position:0%
giant kernel page table
um<01:16:50.640><c> i'm</c><01:16:50.800><c> going</c><01:16:50.960><c> to</c><01:16:51.040><c> run</c><01:16:51.280><c> through</c><01:16:51.520><c> user</c><01:16:51.840><c> trapret</c>

01:16:52.390 --> 01:16:52.400 align:start position:0%
um i'm going to run through user trapret
 

01:16:52.400 --> 01:16:53.110 align:start position:0%
um i'm going to run through user trapret
quickly

01:16:53.110 --> 01:16:53.120 align:start position:0%
quickly
 

01:16:53.120 --> 01:16:54.550 align:start position:0%
quickly
until<01:16:53.440><c> we</c><01:16:53.520><c> get</c><01:16:53.600><c> to</c><01:16:53.679><c> the</c><01:16:53.760><c> point</c><01:16:53.920><c> where</c><01:16:54.159><c> it</c><01:16:54.239><c> jumps</c>

01:16:54.550 --> 01:16:54.560 align:start position:0%
until we get to the point where it jumps
 

01:16:54.560 --> 01:16:59.030 align:start position:0%
until we get to the point where it jumps
to<01:16:54.719><c> the</c><01:16:54.800><c> trampoline</c>

01:16:59.030 --> 01:16:59.040 align:start position:0%
 
 

01:16:59.040 --> 01:17:07.189 align:start position:0%
 
all<01:16:59.199><c> right</c><01:16:59.360><c> we're</c><01:16:59.520><c> in</c><01:16:59.600><c> the</c><01:16:59.679><c> trampoline</c><01:17:01.440><c> um</c>

01:17:07.189 --> 01:17:07.199 align:start position:0%
 
 

01:17:07.199 --> 01:17:08.390 align:start position:0%
 
these<01:17:07.440><c> are</c><01:17:07.520><c> the</c><01:17:07.600><c> instructions</c><01:17:08.080><c> so</c><01:17:08.159><c> we're</c>

01:17:08.390 --> 01:17:08.400 align:start position:0%
these are the instructions so we're
 

01:17:08.400 --> 01:17:09.910 align:start position:0%
these are the instructions so we're
about<01:17:08.640><c> to</c><01:17:08.719><c> start</c><01:17:08.960><c> executing</c><01:17:09.360><c> the</c><01:17:09.440><c> trampoline</c>

01:17:09.910 --> 01:17:09.920 align:start position:0%
about to start executing the trampoline
 

01:17:09.920 --> 01:17:10.390 align:start position:0%
about to start executing the trampoline
code

01:17:10.390 --> 01:17:10.400 align:start position:0%
code
 

01:17:10.400 --> 01:17:14.470 align:start position:0%
code
right<01:17:10.560><c> here</c><01:17:10.800><c> we</c><01:17:10.880><c> can</c><01:17:11.040><c> now</c><01:17:13.199><c> again</c>

01:17:14.470 --> 01:17:14.480 align:start position:0%
right here we can now again
 

01:17:14.480 --> 01:17:16.550 align:start position:0%
right here we can now again
let's<01:17:15.040><c> print</c><01:17:15.280><c> the</c><01:17:15.360><c> page</c><01:17:15.600><c> table</c><01:17:16.239><c> it's</c><01:17:16.400><c> still</c>

01:17:16.550 --> 01:17:16.560 align:start position:0%
let's print the page table it's still
 

01:17:16.560 --> 01:17:18.470 align:start position:0%
let's print the page table it's still
the<01:17:16.640><c> kernel</c><01:17:16.880><c> page</c><01:17:17.199><c> table</c>

01:17:18.470 --> 01:17:18.480 align:start position:0%
the kernel page table
 

01:17:18.480 --> 01:17:21.030 align:start position:0%
the kernel page table
um<01:17:20.239><c> the</c><01:17:20.400><c> first</c><01:17:20.560><c> thing</c><01:17:20.719><c> that's</c><01:17:20.880><c> going</c><01:17:20.960><c> to</c>

01:17:21.030 --> 01:17:21.040 align:start position:0%
um the first thing that's going to
 

01:17:21.040 --> 01:17:22.630 align:start position:0%
um the first thing that's going to
happen<01:17:21.280><c> here</c><01:17:21.520><c> though</c><01:17:21.760><c> is</c><01:17:21.920><c> that</c><01:17:22.159><c> the</c>

01:17:22.630 --> 01:17:22.640 align:start position:0%
happen here though is that the
 

01:17:22.640 --> 01:17:25.030 align:start position:0%
happen here though is that the
trampoline<01:17:23.120><c> code</c><01:17:23.360><c> is</c><01:17:23.520><c> going</c><01:17:23.600><c> to</c><01:17:23.840><c> load</c><01:17:24.239><c> the</c>

01:17:25.030 --> 01:17:25.040 align:start position:0%
trampoline code is going to load the
 

01:17:25.040 --> 01:17:27.669 align:start position:0%
trampoline code is going to load the
that<01:17:25.280><c> pointer</c><01:17:25.600><c> to</c><01:17:25.760><c> the</c><01:17:25.840><c> user</c><01:17:26.080><c> page</c><01:17:26.480><c> table</c>

01:17:27.669 --> 01:17:27.679 align:start position:0%
that pointer to the user page table
 

01:17:27.679 --> 01:17:30.790 align:start position:0%
that pointer to the user page table
into<01:17:27.920><c> the</c><01:17:28.000><c> sat</c><01:17:28.239><c> p</c><01:17:28.840><c> register</c><01:17:30.159><c> so</c><01:17:30.400><c> we</c><01:17:30.560><c> switch</c>

01:17:30.790 --> 01:17:30.800 align:start position:0%
into the sat p register so we switch
 

01:17:30.800 --> 01:17:33.350 align:start position:0%
into the sat p register so we switch
page<01:17:31.120><c> tables</c><01:17:31.520><c> if</c><01:17:31.600><c> i</c><01:17:31.679><c> type</c><01:17:32.000><c> info</c><01:17:32.239><c> map</c><01:17:32.480><c> now</c>

01:17:33.350 --> 01:17:33.360 align:start position:0%
page tables if i type info map now
 

01:17:33.360 --> 01:17:35.110 align:start position:0%
page tables if i type info map now
we<01:17:33.520><c> now</c><01:17:33.679><c> have</c><01:17:33.760><c> a</c><01:17:33.840><c> much</c><01:17:34.159><c> smaller</c><01:17:34.560><c> user</c><01:17:34.880><c> page</c>

01:17:35.110 --> 01:17:35.120 align:start position:0%
we now have a much smaller user page
 

01:17:35.120 --> 01:17:36.870 align:start position:0%
we now have a much smaller user page
table<01:17:35.440><c> but</c><01:17:35.920><c> luckily</c>

01:17:36.870 --> 01:17:36.880 align:start position:0%
table but luckily
 

01:17:36.880 --> 01:17:38.630 align:start position:0%
table but luckily
still<01:17:37.120><c> with</c><01:17:37.280><c> the</c><01:17:37.360><c> trampoline</c><01:17:37.840><c> page</c><01:17:38.080><c> map</c><01:17:38.400><c> so</c><01:17:38.560><c> we</c>

01:17:38.630 --> 01:17:38.640 align:start position:0%
still with the trampoline page map so we
 

01:17:38.640 --> 01:17:43.189 align:start position:0%
still with the trampoline page map so we
don't<01:17:38.880><c> crash</c><01:17:39.440><c> on</c><01:17:39.520><c> the</c><01:17:39.600><c> next</c><01:17:39.840><c> instruction</c>

01:17:43.189 --> 01:17:43.199 align:start position:0%
 
 

01:17:43.199 --> 01:17:47.350 align:start position:0%
 
the<01:17:43.360><c> next</c><01:17:43.600><c> thing</c><01:17:43.760><c> that</c><01:17:43.840><c> happens</c><01:17:44.239><c> is</c><01:17:44.400><c> this</c><01:17:44.719><c> um</c>

01:17:47.350 --> 01:17:47.360 align:start position:0%
 
 

01:17:47.360 --> 01:17:51.590 align:start position:0%
 
um<01:17:50.000><c> i</c><01:17:50.159><c> showed</c><01:17:50.320><c> you</c><01:17:50.480><c> a</c><01:17:50.560><c> while</c><01:17:50.800><c> ago</c><01:17:51.040><c> that</c><01:17:51.199><c> the</c>

01:17:51.590 --> 01:17:51.600 align:start position:0%
um i showed you a while ago that the
 

01:17:51.600 --> 01:17:53.830 align:start position:0%
um i showed you a while ago that the
second<01:17:51.920><c> to</c><01:17:52.000><c> last</c><01:17:52.320><c> thing</c><01:17:52.640><c> that</c><01:17:52.880><c> this</c><01:17:53.440><c> sequence</c>

01:17:53.830 --> 01:17:53.840 align:start position:0%
second to last thing that this sequence
 

01:17:53.840 --> 01:17:55.590 align:start position:0%
second to last thing that this sequence
of<01:17:53.920><c> code</c><01:17:54.159><c> does</c><01:17:54.480><c> on</c><01:17:54.560><c> the</c><01:17:54.640><c> way</c><01:17:54.800><c> to</c><01:17:54.880><c> user</c><01:17:55.120><c> space</c>

01:17:55.590 --> 01:17:55.600 align:start position:0%
of code does on the way to user space
 

01:17:55.600 --> 01:17:58.709 align:start position:0%
of code does on the way to user space
is<01:17:56.159><c> swaps</c><01:17:57.040><c> s</c><01:17:57.280><c> scratch</c><01:17:57.520><c> with</c><01:17:57.760><c> a</c><01:17:57.920><c> zero</c>

01:17:58.709 --> 01:17:58.719 align:start position:0%
is swaps s scratch with a zero
 

01:17:58.719 --> 01:18:00.790 align:start position:0%
is swaps s scratch with a zero
so<01:17:58.880><c> we</c><01:17:59.040><c> need</c><01:17:59.199><c> to</c><01:17:59.360><c> set</c><01:17:59.520><c> up</c><01:17:59.679><c> s</c><01:17:59.840><c> scratch</c><01:18:00.400><c> with</c><01:18:00.560><c> the</c>

01:18:00.790 --> 01:18:00.800 align:start position:0%
so we need to set up s scratch with the
 

01:18:00.800 --> 01:18:03.270 align:start position:0%
so we need to set up s scratch with the
saved<01:18:01.440><c> user</c><01:18:01.760><c> a0</c><01:18:02.400><c> so</c><01:18:02.560><c> that</c><01:18:02.640><c> when</c><01:18:02.800><c> we</c><01:18:02.960><c> do</c><01:18:03.120><c> that</c>

01:18:03.270 --> 01:18:03.280 align:start position:0%
saved user a0 so that when we do that
 

01:18:03.280 --> 01:18:04.630 align:start position:0%
saved user a0 so that when we do that
swap

01:18:04.630 --> 01:18:04.640 align:start position:0%
swap
 

01:18:04.640 --> 01:18:07.430 align:start position:0%
swap
a0<01:18:05.040><c> will</c><01:18:05.280><c> end</c><01:18:05.440><c> up</c><01:18:05.520><c> having</c><01:18:05.760><c> the</c><01:18:05.920><c> saved</c><01:18:06.640><c> user</c><01:18:07.040><c> a0</c>

01:18:07.430 --> 01:18:07.440 align:start position:0%
a0 will end up having the saved user a0
 

01:18:07.440 --> 01:18:08.229 align:start position:0%
a0 will end up having the saved user a0
it<01:18:07.520><c> turns</c><01:18:07.840><c> out</c>

01:18:08.229 --> 01:18:08.239 align:start position:0%
it turns out
 

01:18:08.239 --> 01:18:10.550 align:start position:0%
it turns out
a0<01:18:08.719><c> is</c><01:18:08.800><c> a</c><01:18:09.440><c> pointer</c><01:18:09.760><c> to</c><01:18:09.840><c> the</c><01:18:09.920><c> trap</c><01:18:10.239><c> frame</c>

01:18:10.550 --> 01:18:10.560 align:start position:0%
a0 is a pointer to the trap frame
 

01:18:10.560 --> 01:18:11.669 align:start position:0%
a0 is a pointer to the trap frame
because

01:18:11.669 --> 01:18:11.679 align:start position:0%
because
 

01:18:11.679 --> 01:18:13.590 align:start position:0%
because
the<01:18:11.840><c> c</c><01:18:12.080><c> code</c><01:18:12.400><c> passed</c><01:18:12.800><c> that</c><01:18:13.040><c> as</c><01:18:13.199><c> the</c><01:18:13.280><c> first</c>

01:18:13.590 --> 01:18:13.600 align:start position:0%
the c code passed that as the first
 

01:18:13.600 --> 01:18:15.270 align:start position:0%
the c code passed that as the first
argument<01:18:14.480><c> 112</c>

01:18:15.270 --> 01:18:15.280 align:start position:0%
argument 112
 

01:18:15.280 --> 01:18:18.790 align:start position:0%
argument 112
of<01:18:15.520><c> a0</c><01:18:16.080><c> is</c><01:18:16.239><c> the</c><01:18:16.640><c> address</c><01:18:17.040><c> of</c><01:18:17.120><c> the</c><01:18:17.280><c> saved</c><01:18:17.600><c> a0</c>

01:18:18.790 --> 01:18:18.800 align:start position:0%
of a0 is the address of the saved a0
 

01:18:18.800 --> 01:18:19.830 align:start position:0%
of a0 is the address of the saved a0
in<01:18:18.880><c> the</c><01:18:18.960><c> track</c><01:18:19.280><c> frame</c><01:18:19.440><c> so</c><01:18:19.600><c> we're</c><01:18:19.679><c> going</c><01:18:19.760><c> to</c>

01:18:19.830 --> 01:18:19.840 align:start position:0%
in the track frame so we're going to
 

01:18:19.840 --> 01:18:22.790 align:start position:0%
in the track frame so we're going to
load<01:18:20.159><c> that</c><01:18:21.120><c> and</c><01:18:21.199><c> then</c><01:18:21.520><c> into</c><01:18:21.760><c> t0</c><01:18:22.239><c> and</c><01:18:22.320><c> then</c><01:18:22.560><c> load</c>

01:18:22.790 --> 01:18:22.800 align:start position:0%
load that and then into t0 and then load
 

01:18:22.800 --> 01:18:23.510 align:start position:0%
load that and then into t0 and then load
that<01:18:23.040><c> into</c>

01:18:23.510 --> 01:18:23.520 align:start position:0%
that into
 

01:18:23.520 --> 01:18:25.350 align:start position:0%
that into
scratch<01:18:24.560><c> at</c><01:18:24.719><c> this</c><01:18:24.800><c> point</c><01:18:24.960><c> we're</c><01:18:25.199><c> still</c>

01:18:25.350 --> 01:18:25.360 align:start position:0%
scratch at this point we're still
 

01:18:25.360 --> 01:18:27.030 align:start position:0%
scratch at this point we're still
running<01:18:25.600><c> with</c><01:18:25.760><c> the</c>

01:18:27.030 --> 01:18:27.040 align:start position:0%
running with the
 

01:18:27.040 --> 01:18:31.189 align:start position:0%
running with the
kernel<01:18:27.440><c> stuff</c><01:18:27.840><c> and</c><01:18:28.000><c> all</c><01:18:28.159><c> the</c><01:18:29.280><c> registers</c>

01:18:31.189 --> 01:18:31.199 align:start position:0%
kernel stuff and all the registers
 

01:18:31.199 --> 01:18:34.390 align:start position:0%
kernel stuff and all the registers
the<01:18:31.360><c> next</c><01:18:31.600><c> 32</c><01:18:32.000><c> instructions</c><01:18:32.640><c> though</c><01:18:33.760><c> load</c><01:18:34.159><c> out</c>

01:18:34.390 --> 01:18:34.400 align:start position:0%
the next 32 instructions though load out
 

01:18:34.400 --> 01:18:35.590 align:start position:0%
the next 32 instructions though load out
of<01:18:34.480><c> the</c><01:18:34.560><c> trap</c><01:18:34.960><c> frame</c><01:18:35.280><c> which</c>

01:18:35.590 --> 01:18:35.600 align:start position:0%
of the trap frame which
 

01:18:35.600 --> 01:18:38.630 align:start position:0%
of the trap frame which
a0<01:18:36.080><c> points</c><01:18:36.400><c> to</c><01:18:37.520><c> load</c><01:18:37.840><c> all</c><01:18:38.080><c> of</c><01:18:38.159><c> the</c>

01:18:38.630 --> 01:18:38.640 align:start position:0%
a0 points to load all of the
 

01:18:38.640 --> 01:18:41.110 align:start position:0%
a0 points to load all of the
saved<01:18:39.040><c> user</c><01:18:39.360><c> registers</c><01:18:40.480><c> out</c><01:18:40.640><c> of</c><01:18:40.719><c> the</c><01:18:40.800><c> trap</c>

01:18:41.110 --> 01:18:41.120 align:start position:0%
saved user registers out of the trap
 

01:18:41.120 --> 01:18:45.110 align:start position:0%
saved user registers out of the trap
frame

01:18:45.110 --> 01:18:45.120 align:start position:0%
 
 

01:18:45.120 --> 01:18:47.030 align:start position:0%
 
into<01:18:45.360><c> the</c><01:18:45.520><c> actual</c><01:18:45.840><c> register</c><01:18:46.320><c> so</c><01:18:46.480><c> we're</c><01:18:46.800><c> like</c>

01:18:47.030 --> 01:18:47.040 align:start position:0%
into the actual register so we're like
 

01:18:47.040 --> 01:18:48.870 align:start position:0%
into the actual register so we're like
really<01:18:47.360><c> close</c><01:18:47.600><c> to</c><01:18:47.760><c> being</c><01:18:48.000><c> able</c><01:18:48.159><c> to</c>

01:18:48.870 --> 01:18:48.880 align:start position:0%
really close to being able to
 

01:18:48.880 --> 01:18:50.630 align:start position:0%
really close to being able to
the<01:18:48.960><c> point</c><01:18:49.120><c> where</c><01:18:49.360><c> we</c><01:18:49.440><c> can</c><01:18:49.520><c> run</c><01:18:49.760><c> user</c><01:18:50.080><c> code</c><01:18:50.560><c> i'm</c>

01:18:50.630 --> 01:18:50.640 align:start position:0%
the point where we can run user code i'm
 

01:18:50.640 --> 01:18:56.070 align:start position:0%
the point where we can run user code i'm
going<01:18:50.800><c> to</c><01:18:50.880><c> skip</c><01:18:51.199><c> over</c><01:18:51.440><c> all</c><01:18:51.520><c> these</c><01:18:52.840><c> loads</c>

01:18:56.070 --> 01:18:56.080 align:start position:0%
 
 

01:18:56.080 --> 01:18:59.030 align:start position:0%
 
any<01:18:56.320><c> questions</c><01:18:56.800><c> before</c><01:18:57.120><c> we</c><01:18:57.280><c> uh</c><01:18:58.640><c> approach</c>

01:18:59.030 --> 01:18:59.040 align:start position:0%
any questions before we uh approach
 

01:18:59.040 --> 01:19:02.310 align:start position:0%
any questions before we uh approach
closer<01:18:59.360><c> to</c><01:18:59.440><c> user</c><01:18:59.760><c> space</c>

01:19:02.310 --> 01:19:02.320 align:start position:0%
 
 

01:19:02.320 --> 01:19:04.709 align:start position:0%
 
i<01:19:02.480><c> have</c><01:19:02.560><c> one</c><01:19:02.800><c> quick</c><01:19:03.120><c> question</c><01:19:03.920><c> is</c><01:19:04.080><c> the</c><01:19:04.239><c> value</c>

01:19:04.709 --> 01:19:04.719 align:start position:0%
i have one quick question is the value
 

01:19:04.719 --> 01:19:07.750 align:start position:0%
i have one quick question is the value
in<01:19:05.280><c> the</c><01:19:05.440><c> trap</c><01:19:05.760><c> frame</c><01:19:06.080><c> a0</c><01:19:06.640><c> now</c><01:19:06.880><c> the</c><01:19:07.360><c> return</c>

01:19:07.750 --> 01:19:07.760 align:start position:0%
in the trap frame a0 now the return
 

01:19:07.760 --> 01:19:11.430 align:start position:0%
in the trap frame a0 now the return
value<01:19:08.080><c> of</c><01:19:08.159><c> that</c><01:19:08.320><c> system</c><01:19:08.719><c> call</c><01:19:08.880><c> that</c><01:19:09.040><c> we</c><01:19:09.120><c> made</c>

01:19:11.430 --> 01:19:11.440 align:start position:0%
 
 

01:19:11.440 --> 01:19:14.790 align:start position:0%
 
um

01:19:14.790 --> 01:19:14.800 align:start position:0%
 
 

01:19:14.800 --> 01:19:18.149 align:start position:0%
 
yeah<01:19:15.679><c> yeah</c><01:19:15.920><c> the</c><01:19:16.000><c> relay</c><01:19:16.400><c> zero</c><01:19:16.800><c> holds</c><01:19:17.199><c> just</c><01:19:17.679><c> this</c>

01:19:18.149 --> 01:19:18.159 align:start position:0%
yeah yeah the relay zero holds just this
 

01:19:18.159 --> 01:19:20.870 align:start position:0%
yeah yeah the relay zero holds just this
under<01:19:18.400><c> the</c><01:19:18.480><c> trap</c><01:19:18.719><c> frame</c><01:19:19.040><c> but</c><01:19:19.199><c> the</c><01:19:20.320><c> after</c><01:19:20.640><c> we</c>

01:19:20.870 --> 01:19:20.880 align:start position:0%
under the trap frame but the after we
 

01:19:20.880 --> 01:19:21.590 align:start position:0%
under the trap frame but the after we
execute

01:19:21.590 --> 01:19:21.600 align:start position:0%
execute
 

01:19:21.600 --> 01:19:24.950 align:start position:0%
execute
the<01:19:21.920><c> well</c><01:19:24.480><c> s</c>

01:19:24.950 --> 01:19:24.960 align:start position:0%
the well s
 

01:19:24.960 --> 01:19:27.590 align:start position:0%
the well s
okay<01:19:25.440><c> the</c><01:19:25.760><c> current</c><01:19:26.239><c> location</c><01:19:26.880><c> of</c><01:19:27.040><c> the</c><01:19:27.120><c> user</c>

01:19:27.590 --> 01:19:27.600 align:start position:0%
okay the current location of the user
 

01:19:27.600 --> 01:19:29.189 align:start position:0%
okay the current location of the user
saved

01:19:29.189 --> 01:19:29.199 align:start position:0%
saved
 

01:19:29.199 --> 01:19:32.550 align:start position:0%
saved
uh<01:19:30.719><c> yes</c><01:19:31.040><c> i</c><01:19:31.120><c> was</c><01:19:31.360><c> calling</c><01:19:31.679><c> it</c><01:19:31.760><c> the</c><01:19:31.920><c> user</c><01:19:32.239><c> saved</c>

01:19:32.550 --> 01:19:32.560 align:start position:0%
uh yes i was calling it the user saved
 

01:19:32.560 --> 01:19:33.750 align:start position:0%
uh yes i was calling it the user saved
a0<01:19:32.960><c> but</c><01:19:33.120><c> in</c><01:19:33.199><c> fact</c>

01:19:33.750 --> 01:19:33.760 align:start position:0%
a0 but in fact
 

01:19:33.760 --> 01:19:36.149 align:start position:0%
a0 but in fact
the<01:19:33.920><c> system</c><01:19:34.320><c> call</c><01:19:34.800><c> returns</c><01:19:35.280><c> stuff</c><01:19:35.600><c> overwrote</c>

01:19:36.149 --> 01:19:36.159 align:start position:0%
the system call returns stuff overwrote
 

01:19:36.159 --> 01:19:39.189 align:start position:0%
the system call returns stuff overwrote
it<01:19:36.719><c> with</c><01:19:36.880><c> the</c><01:19:37.040><c> return</c><01:19:37.520><c> value</c><01:19:37.840><c> that</c><01:19:38.000><c> we</c><01:19:38.320><c> want</c>

01:19:39.189 --> 01:19:39.199 align:start position:0%
it with the return value that we want
 

01:19:39.199 --> 01:19:41.990 align:start position:0%
it with the return value that we want
the<01:19:39.440><c> shell</c><01:19:39.760><c> to</c><01:19:39.920><c> see</c><01:19:40.080><c> in</c><01:19:40.239><c> a0</c><01:19:41.440><c> so</c><01:19:41.600><c> the</c><01:19:41.760><c> current</c>

01:19:41.990 --> 01:19:42.000 align:start position:0%
the shell to see in a0 so the current
 

01:19:42.000 --> 01:19:44.070 align:start position:0%
the shell to see in a0 so the current
location<01:19:42.400><c> of</c><01:19:42.480><c> that</c><01:19:42.719><c> a0</c><01:19:43.120><c> which</c><01:19:43.360><c> we</c><01:19:43.600><c> overwrote</c>

01:19:44.070 --> 01:19:44.080 align:start position:0%
location of that a0 which we overwrote
 

01:19:44.080 --> 01:19:45.669 align:start position:0%
location of that a0 which we overwrote
with<01:19:44.400><c> 2</c>

01:19:45.669 --> 01:19:45.679 align:start position:0%
with 2
 

01:19:45.679 --> 01:19:47.669 align:start position:0%
with 2
as<01:19:45.840><c> the</c><01:19:45.920><c> return</c><01:19:46.400><c> value</c><01:19:46.800><c> is</c><01:19:47.040><c> s</c><01:19:47.199><c> scrap</c><01:19:47.520><c> so</c><01:19:47.600><c> i'm</c>

01:19:47.669 --> 01:19:47.679 align:start position:0%
as the return value is s scrap so i'm
 

01:19:47.679 --> 01:19:49.270 align:start position:0%
as the return value is s scrap so i'm
going<01:19:47.760><c> to</c><01:19:47.920><c> point</c><01:19:48.159><c> s</c><01:19:48.320><c> scratch</c><01:19:48.719><c> and</c><01:19:48.800><c> hope</c><01:19:49.120><c> that</c>

01:19:49.270 --> 01:19:49.280 align:start position:0%
going to point s scratch and hope that
 

01:19:49.280 --> 01:19:51.189 align:start position:0%
going to point s scratch and hope that
it's<01:19:49.440><c> equal</c><01:19:49.679><c> to</c><01:19:49.840><c> two</c>

01:19:51.189 --> 01:19:51.199 align:start position:0%
it's equal to two
 

01:19:51.199 --> 01:19:55.750 align:start position:0%
it's equal to two
it<01:19:51.440><c> is</c><01:19:51.520><c> equal</c><01:19:51.760><c> to</c><01:19:51.920><c> two</c><01:19:52.800><c> um</c>

01:19:55.750 --> 01:19:55.760 align:start position:0%
 
 

01:19:55.760 --> 01:19:58.229 align:start position:0%
 
does<01:19:56.000><c> that</c><01:19:56.159><c> answer</c><01:19:56.400><c> your</c><01:19:56.480><c> question</c><01:19:57.920><c> yes</c><01:19:58.159><c> i</c>

01:19:58.229 --> 01:19:58.239 align:start position:0%
does that answer your question yes i
 

01:19:58.239 --> 01:19:58.950 align:start position:0%
does that answer your question yes i
think<01:19:58.400><c> so</c>

01:19:58.950 --> 01:19:58.960 align:start position:0%
think so
 

01:19:58.960 --> 01:20:01.669 align:start position:0%
think so
okay<01:19:59.440><c> i'm</c><01:19:59.600><c> gonna</c><01:20:00.080><c> uh</c><01:20:00.800><c> skip</c><01:20:01.120><c> over</c><01:20:01.280><c> all</c><01:20:01.440><c> these</c>

01:20:01.669 --> 01:20:01.679 align:start position:0%
okay i'm gonna uh skip over all these
 

01:20:01.679 --> 01:20:02.630 align:start position:0%
okay i'm gonna uh skip over all these
loads

01:20:02.630 --> 01:20:02.640 align:start position:0%
loads
 

01:20:02.640 --> 01:20:05.430 align:start position:0%
loads
the<01:20:02.840><c> restore</c><01:20:04.080><c> the</c><01:20:04.239><c> saved</c><01:20:04.560><c> user</c><01:20:04.800><c> values</c><01:20:05.199><c> out</c><01:20:05.360><c> of</c>

01:20:05.430 --> 01:20:05.440 align:start position:0%
the restore the saved user values out of
 

01:20:05.440 --> 01:20:08.149 align:start position:0%
the restore the saved user values out of
the<01:20:05.520><c> trap</c><01:20:05.760><c> frame</c><01:20:06.000><c> into</c><01:20:06.159><c> the</c><01:20:06.239><c> registers</c>

01:20:08.149 --> 01:20:08.159 align:start position:0%
the trap frame into the registers
 

01:20:08.159 --> 01:20:09.510 align:start position:0%
the trap frame into the registers
why<01:20:08.320><c> don't</c><01:20:08.480><c> i</c><01:20:08.560><c> print</c><01:20:08.800><c> out</c><01:20:08.880><c> the</c><01:20:08.960><c> registers</c><01:20:09.440><c> at</c>

01:20:09.510 --> 01:20:09.520 align:start position:0%
why don't i print out the registers at
 

01:20:09.520 --> 01:20:11.350 align:start position:0%
why don't i print out the registers at
this<01:20:09.679><c> point</c>

01:20:11.350 --> 01:20:11.360 align:start position:0%
this point
 

01:20:11.360 --> 01:20:16.550 align:start position:0%
this point
um<01:20:12.239><c> actually</c><01:20:12.480><c> gonna</c>

01:20:16.550 --> 01:20:16.560 align:start position:0%
 
 

01:20:16.560 --> 01:20:18.229 align:start position:0%
 
print<01:20:16.800><c> out</c><01:20:16.880><c> the</c><01:20:16.960><c> registers</c><01:20:17.840><c> i</c><01:20:18.000><c> don't</c><01:20:18.080><c> know</c><01:20:18.159><c> if</c>

01:20:18.229 --> 01:20:18.239 align:start position:0%
print out the registers i don't know if
 

01:20:18.239 --> 01:20:19.750 align:start position:0%
print out the registers i don't know if
these<01:20:18.400><c> look</c><01:20:18.560><c> familiar</c><01:20:18.960><c> but</c><01:20:19.120><c> they</c><01:20:19.360><c> happen</c><01:20:19.600><c> to</c>

01:20:19.750 --> 01:20:19.760 align:start position:0%
these look familiar but they happen to
 

01:20:19.760 --> 01:20:20.390 align:start position:0%
these look familiar but they happen to
be

01:20:20.390 --> 01:20:20.400 align:start position:0%
be
 

01:20:20.400 --> 01:20:22.229 align:start position:0%
be
the<01:20:20.639><c> same</c><01:20:20.880><c> set</c><01:20:21.040><c> of</c><01:20:21.120><c> user</c><01:20:21.440><c> registers</c><01:20:21.920><c> we</c><01:20:22.080><c> saw</c>

01:20:22.229 --> 01:20:22.239 align:start position:0%
the same set of user registers we saw
 

01:20:22.239 --> 01:20:23.590 align:start position:0%
the same set of user registers we saw
way<01:20:22.480><c> back</c><01:20:22.719><c> at</c><01:20:22.800><c> the</c><01:20:22.880><c> beginning</c><01:20:23.280><c> of</c><01:20:23.360><c> this</c>

01:20:23.590 --> 01:20:23.600 align:start position:0%
way back at the beginning of this
 

01:20:23.600 --> 01:20:24.790 align:start position:0%
way back at the beginning of this
exercise

01:20:24.790 --> 01:20:24.800 align:start position:0%
exercise
 

01:20:24.800 --> 01:20:28.709 align:start position:0%
exercise
for<01:20:24.960><c> example</c><01:20:25.679><c> a1</c><01:20:27.360><c> or</c><01:20:27.520><c> the</c><01:20:27.679><c> stack</c><01:20:28.000><c> pointer</c>

01:20:28.709 --> 01:20:28.719 align:start position:0%
for example a1 or the stack pointer
 

01:20:28.719 --> 01:20:30.629 align:start position:0%
for example a1 or the stack pointer
holds<01:20:29.040><c> this</c><01:20:29.199><c> small</c><01:20:29.520><c> value</c><01:20:29.920><c> appropriate</c><01:20:30.400><c> for</c><01:20:30.560><c> a</c>

01:20:30.629 --> 01:20:30.639 align:start position:0%
holds this small value appropriate for a
 

01:20:30.639 --> 01:20:32.870 align:start position:0%
holds this small value appropriate for a
user<01:20:30.880><c> stack</c><01:20:31.199><c> low</c><01:20:31.440><c> in</c><01:20:31.520><c> memory</c>

01:20:32.870 --> 01:20:32.880 align:start position:0%
user stack low in memory
 

01:20:32.880 --> 01:20:35.590 align:start position:0%
user stack low in memory
a1<01:20:33.440><c> is</c><01:20:33.520><c> that</c><01:20:33.679><c> buffer</c><01:20:34.080><c> pointer</c><01:20:34.480><c> that</c><01:20:35.040><c> we</c><01:20:35.280><c> passed</c>

01:20:35.590 --> 01:20:35.600 align:start position:0%
a1 is that buffer pointer that we passed
 

01:20:35.600 --> 01:20:36.550 align:start position:0%
a1 is that buffer pointer that we passed
to<01:20:35.679><c> write</c>

01:20:36.550 --> 01:20:36.560 align:start position:0%
to write
 

01:20:36.560 --> 01:20:39.510 align:start position:0%
to write
2<01:20:36.960><c> is</c><01:20:37.040><c> that</c><01:20:37.199><c> number</c><01:20:37.520><c> of</c><01:20:37.679><c> bytes</c><01:20:38.480><c> a0</c><01:20:39.040><c> however</c><01:20:39.360><c> is</c>

01:20:39.510 --> 01:20:39.520 align:start position:0%
2 is that number of bytes a0 however is
 

01:20:39.520 --> 01:20:40.709 align:start position:0%
2 is that number of bytes a0 however is
the<01:20:39.600><c> exception</c><01:20:40.080><c> is</c>

01:20:40.709 --> 01:20:40.719 align:start position:0%
the exception is
 

01:20:40.719 --> 01:20:44.709 align:start position:0%
the exception is
not<01:20:42.400><c> a</c><01:20:42.639><c> saved</c><01:20:43.360><c> user</c><01:20:43.760><c> value</c><01:20:44.159><c> because</c><01:20:44.400><c> it</c><01:20:44.560><c> still</c>

01:20:44.709 --> 01:20:44.719 align:start position:0%
not a saved user value because it still
 

01:20:44.719 --> 01:20:47.030 align:start position:0%
not a saved user value because it still
has<01:20:44.960><c> the</c><01:20:45.040><c> pointer</c><01:20:45.360><c> to</c><01:20:45.440><c> our</c><01:20:45.600><c> trap</c><01:20:45.920><c> frame</c><01:20:46.159><c> in</c><01:20:46.320><c> it</c>

01:20:47.030 --> 01:20:47.040 align:start position:0%
has the pointer to our trap frame in it
 

01:20:47.040 --> 01:20:52.790 align:start position:0%
has the pointer to our trap frame in it
um<01:20:49.120><c> but</c><01:20:49.280><c> let's</c><01:20:49.440><c> look</c><01:20:49.600><c> we're</c><01:20:49.760><c> about</c><01:20:49.920><c> to</c><01:20:50.080><c> execute</c>

01:20:52.790 --> 01:20:52.800 align:start position:0%
 
 

01:20:52.800 --> 01:20:55.990 align:start position:0%
 
um<01:20:53.760><c> we're</c><01:20:54.000><c> about</c><01:20:54.159><c> to</c><01:20:54.320><c> execute</c><01:20:54.719><c> is</c><01:20:54.880><c> this</c>

01:20:55.990 --> 01:20:56.000 align:start position:0%
um we're about to execute is this
 

01:20:56.000 --> 01:20:59.350 align:start position:0%
um we're about to execute is this
csr<01:20:57.840><c> rwa0</c><01:20:58.880><c> scratch</c>

01:20:59.350 --> 01:20:59.360 align:start position:0%
csr rwa0 scratch
 

01:20:59.360 --> 01:21:02.070 align:start position:0%
csr rwa0 scratch
right<01:20:59.600><c> at</c><01:20:59.679><c> the</c><01:20:59.920><c> end</c><01:21:00.320><c> of</c><01:21:01.280><c> trampoline</c><01:21:01.920><c> just</c>

01:21:02.070 --> 01:21:02.080 align:start position:0%
right at the end of trampoline just
 

01:21:02.080 --> 01:21:03.510 align:start position:0%
right at the end of trampoline just
before<01:21:02.320><c> returning</c><01:21:02.800><c> to</c><01:21:02.880><c> user</c><01:21:03.120><c> space</c><01:21:03.280><c> this</c><01:21:03.440><c> is</c>

01:21:03.510 --> 01:21:03.520 align:start position:0%
before returning to user space this is
 

01:21:03.520 --> 01:21:06.310 align:start position:0%
before returning to user space this is
going<01:21:03.600><c> to</c><01:21:03.679><c> swap</c><01:21:04.080><c> a0</c><01:21:04.560><c> and</c><01:21:04.719><c> scratch</c>

01:21:06.310 --> 01:21:06.320 align:start position:0%
going to swap a0 and scratch
 

01:21:06.320 --> 01:21:12.629 align:start position:0%
going to swap a0 and scratch
scratch<01:21:07.360><c> indeed</c><01:21:07.760><c> has</c>

01:21:12.629 --> 01:21:12.639 align:start position:0%
 
 

01:21:12.639 --> 01:21:16.629 align:start position:0%
 
ah<01:21:13.199><c> that's</c><01:21:13.280><c> scratch</c>

01:21:16.629 --> 01:21:16.639 align:start position:0%
 
 

01:21:16.639 --> 01:21:18.149 align:start position:0%
 
has<01:21:16.880><c> two</c><01:21:17.120><c> which</c><01:21:17.280><c> is</c><01:21:17.440><c> going</c><01:21:17.520><c> to</c><01:21:17.600><c> be</c><01:21:17.679><c> the</c><01:21:17.760><c> return</c>

01:21:18.149 --> 01:21:18.159 align:start position:0%
has two which is going to be the return
 

01:21:18.159 --> 01:21:19.669 align:start position:0%
has two which is going to be the return
value<01:21:18.800><c> a0</c>

01:21:19.669 --> 01:21:19.679 align:start position:0%
value a0
 

01:21:19.679 --> 01:21:26.709 align:start position:0%
value a0
has<01:21:19.920><c> this</c><01:21:21.199><c> kernel</c><01:21:21.920><c> pointer</c><01:21:22.320><c> and</c><01:21:22.480><c> it</c><01:21:22.719><c> points</c><01:21:23.040><c> to</c>

01:21:26.709 --> 01:21:26.719 align:start position:0%
 
 

01:21:26.719 --> 01:21:28.149 align:start position:0%
 
points<01:21:26.880><c> to</c><01:21:27.040><c> the</c><01:21:27.120><c> trap</c><01:21:27.280><c> frame</c><01:21:27.520><c> but</c><01:21:27.760><c> after</c>

01:21:28.149 --> 01:21:28.159 align:start position:0%
points to the trap frame but after
 

01:21:28.159 --> 01:21:30.070 align:start position:0%
points to the trap frame but after
executing<01:21:28.719><c> the</c><01:21:28.920><c> csrw</c>

01:21:30.070 --> 01:21:30.080 align:start position:0%
executing the csrw
 

01:21:30.080 --> 01:21:32.229 align:start position:0%
executing the csrw
instruction<01:21:30.480><c> to</c><01:21:30.639><c> swap</c><01:21:30.960><c> them</c><01:21:31.679><c> hopefully</c><01:21:32.080><c> we'll</c>

01:21:32.229 --> 01:21:32.239 align:start position:0%
instruction to swap them hopefully we'll
 

01:21:32.239 --> 01:21:33.189 align:start position:0%
instruction to swap them hopefully we'll
see<01:21:32.480><c> that</c>

01:21:33.189 --> 01:21:33.199 align:start position:0%
see that
 

01:21:33.199 --> 01:21:36.870 align:start position:0%
see that
um<01:21:33.679><c> a0</c><01:21:34.800><c> holds</c><01:21:35.040><c> this</c><01:21:35.199><c> return</c><01:21:35.520><c> value</c><01:21:35.760><c> of</c><01:21:35.920><c> two</c>

01:21:36.870 --> 01:21:36.880 align:start position:0%
um a0 holds this return value of two
 

01:21:36.880 --> 01:21:40.149 align:start position:0%
um a0 holds this return value of two
and<01:21:39.440><c> s</c>

01:21:40.149 --> 01:21:40.159 align:start position:0%
and s
 

01:21:40.159 --> 01:21:42.709 align:start position:0%
and s
scratch<01:21:41.280><c> holds</c><01:21:41.600><c> a</c><01:21:41.679><c> pointer</c><01:21:42.159><c> to</c><01:21:42.239><c> the</c><01:21:42.400><c> trap</c>

01:21:42.709 --> 01:21:42.719 align:start position:0%
scratch holds a pointer to the trap
 

01:21:42.719 --> 01:21:44.229 align:start position:0%
scratch holds a pointer to the trap
frame<01:21:43.040><c> which</c><01:21:43.280><c> is</c>

01:21:44.229 --> 01:21:44.239 align:start position:0%
frame which is
 

01:21:44.239 --> 01:21:47.430 align:start position:0%
frame which is
the<01:21:44.480><c> second</c><01:21:44.800><c> to</c><01:21:44.880><c> last</c><01:21:45.199><c> page</c><01:21:45.440><c> in</c><01:21:45.600><c> memory</c><01:21:46.639><c> um</c>

01:21:47.430 --> 01:21:47.440 align:start position:0%
the second to last page in memory um
 

01:21:47.440 --> 01:21:49.110 align:start position:0%
the second to last page in memory um
and<01:21:48.080><c> that</c><01:21:48.320><c> value</c><01:21:48.560><c> is</c><01:21:48.639><c> going</c><01:21:48.719><c> to</c><01:21:48.800><c> stay</c><01:21:48.960><c> in</c>

01:21:49.110 --> 01:21:49.120 align:start position:0%
and that value is going to stay in
 

01:21:49.120 --> 01:21:50.629 align:start position:0%
and that value is going to stay in
scratch<01:21:49.600><c> until</c><01:21:49.840><c> the</c><01:21:50.000><c> user</c>

01:21:50.629 --> 01:21:50.639 align:start position:0%
scratch until the user
 

01:21:50.639 --> 01:21:52.390 align:start position:0%
scratch until the user
program<01:21:51.120><c> does</c><01:21:51.280><c> another</c><01:21:51.600><c> trap</c><01:21:52.000><c> and</c><01:21:52.080><c> at</c><01:21:52.239><c> that</c>

01:21:52.390 --> 01:21:52.400 align:start position:0%
program does another trap and at that
 

01:21:52.400 --> 01:21:54.709 align:start position:0%
program does another trap and at that
point<01:21:53.440><c> the</c><01:21:53.679><c> trap</c><01:21:54.000><c> handling</c><01:21:54.320><c> code</c><01:21:54.480><c> that</c><01:21:54.639><c> we</c>

01:21:54.709 --> 01:21:54.719 align:start position:0%
point the trap handling code that we
 

01:21:54.719 --> 01:21:56.070 align:start position:0%
point the trap handling code that we
talked<01:21:54.880><c> about</c><01:21:55.040><c> before</c><01:21:55.440><c> we'll</c>

01:21:56.070 --> 01:21:56.080 align:start position:0%
talked about before we'll
 

01:21:56.080 --> 01:21:57.590 align:start position:0%
talked about before we'll
be<01:21:56.159><c> able</c><01:21:56.320><c> to</c><01:21:56.400><c> use</c><01:21:56.560><c> that</c><01:21:56.800><c> scratch</c><01:21:57.120><c> to</c><01:21:57.280><c> get</c><01:21:57.440><c> at</c>

01:21:57.590 --> 01:21:57.600 align:start position:0%
be able to use that scratch to get at
 

01:21:57.600 --> 01:22:01.590 align:start position:0%
be able to use that scratch to get at
the<01:21:57.679><c> trap</c><01:21:57.920><c> frame</c><01:21:58.960><c> all</c><01:21:59.120><c> right</c><01:21:59.280><c> we're</c><01:21:59.520><c> still</c>

01:22:01.590 --> 01:22:01.600 align:start position:0%
the trap frame all right we're still
 

01:22:01.600 --> 01:22:03.990 align:start position:0%
the trap frame all right we're still
in<01:22:01.679><c> the</c><01:22:01.760><c> kernel</c><01:22:02.639><c> but</c><01:22:03.280><c> this</c><01:22:03.440><c> is</c><01:22:03.600><c> our</c><01:22:03.679><c> last</c>

01:22:03.990 --> 01:22:04.000 align:start position:0%
in the kernel but this is our last
 

01:22:04.000 --> 01:22:06.550 align:start position:0%
in the kernel but this is our last
instruction<01:22:04.400><c> in</c><01:22:04.480><c> the</c><01:22:04.560><c> kernel</c>

01:22:06.550 --> 01:22:06.560 align:start position:0%
instruction in the kernel
 

01:22:06.560 --> 01:22:10.790 align:start position:0%
instruction in the kernel
and<01:22:06.719><c> when</c><01:22:06.880><c> i</c><01:22:07.040><c> execute</c><01:22:07.440><c> this</c><01:22:07.679><c> s-ret</c><01:22:09.360><c> it</c><01:22:09.600><c> will</c><01:22:09.920><c> uh</c>

01:22:10.790 --> 01:22:10.800 align:start position:0%
and when i execute this s-ret it will uh
 

01:22:10.800 --> 01:22:14.149 align:start position:0%
and when i execute this s-ret it will uh
switch<01:22:11.120><c> to</c><01:22:11.280><c> user</c><01:22:11.520><c> mode</c><01:22:12.560><c> um</c><01:22:13.600><c> before</c><01:22:13.840><c> i</c><01:22:13.920><c> do</c><01:22:14.000><c> that</c>

01:22:14.149 --> 01:22:14.159 align:start position:0%
switch to user mode um before i do that
 

01:22:14.159 --> 01:22:17.270 align:start position:0%
switch to user mode um before i do that
let's<01:22:14.320><c> look</c><01:22:14.560><c> at</c>

01:22:17.270 --> 01:22:17.280 align:start position:0%
 
 

01:22:17.280 --> 01:22:19.750 align:start position:0%
 
it'll<01:22:17.840><c> switch</c><01:22:18.080><c> to</c><01:22:18.159><c> user</c><01:22:18.400><c> mode</c><01:22:18.639><c> it'll</c><01:22:19.360><c> copy</c>

01:22:19.750 --> 01:22:19.760 align:start position:0%
it'll switch to user mode it'll copy
 

01:22:19.760 --> 01:22:22.950 align:start position:0%
it'll switch to user mode it'll copy
sepc<01:22:20.480><c> to</c><01:22:20.639><c> the</c><01:22:20.800><c> pc</c><01:22:21.199><c> because</c><01:22:21.360><c> we're</c><01:22:21.600><c> still</c>

01:22:22.950 --> 01:22:22.960 align:start position:0%
sepc to the pc because we're still
 

01:22:22.960 --> 01:22:26.950 align:start position:0%
sepc to the pc because we're still
um

01:22:26.950 --> 01:22:26.960 align:start position:0%
 
 

01:22:26.960 --> 01:22:28.950 align:start position:0%
 
we're<01:22:27.199><c> still</c><01:22:27.440><c> executing</c><01:22:27.920><c> with</c><01:22:28.080><c> the</c><01:22:28.159><c> pc</c><01:22:28.560><c> that's</c>

01:22:28.950 --> 01:22:28.960 align:start position:0%
we're still executing with the pc that's
 

01:22:28.960 --> 01:22:30.550 align:start position:0%
we're still executing with the pc that's
in<01:22:29.120><c> the</c><01:22:29.520><c> trampoline</c>

01:22:30.550 --> 01:22:30.560 align:start position:0%
in the trampoline
 

01:22:30.560 --> 01:22:33.510 align:start position:0%
in the trampoline
so<01:22:31.040><c> esret's</c><01:22:31.520><c> gonna</c><01:22:32.400><c> switch</c><01:22:32.719><c> to</c><01:22:32.880><c> user</c><01:22:33.120><c> mode</c>

01:22:33.510 --> 01:22:33.520 align:start position:0%
so esret's gonna switch to user mode
 

01:22:33.520 --> 01:22:34.790 align:start position:0%
so esret's gonna switch to user mode
copy<01:22:33.920><c> scpc</c>

01:22:34.790 --> 01:22:34.800 align:start position:0%
copy scpc
 

01:22:34.800 --> 01:22:36.630 align:start position:0%
copy scpc
to<01:22:35.239><c> pc</c>

01:22:36.630 --> 01:22:36.640 align:start position:0%
to pc
 

01:22:36.640 --> 01:22:37.830 align:start position:0%
to pc
[Music]

01:22:37.830 --> 01:22:37.840 align:start position:0%
[Music]
 

01:22:37.840 --> 01:22:40.629 align:start position:0%
[Music]
and<01:22:37.920><c> then</c><01:22:38.080><c> resume</c><01:22:38.480><c> executing</c><01:22:39.440><c> so</c><01:22:39.600><c> i'm</c><01:22:39.679><c> gonna</c>

01:22:40.629 --> 01:22:40.639 align:start position:0%
and then resume executing so i'm gonna
 

01:22:40.639 --> 01:22:41.189 align:start position:0%
and then resume executing so i'm gonna
run<01:22:40.880><c> the</c>

01:22:41.189 --> 01:22:41.199 align:start position:0%
run the
 

01:22:41.199 --> 01:22:45.350 align:start position:0%
run the
sret<01:22:42.719><c> boom</c><01:22:43.600><c> um</c>

01:22:45.350 --> 01:22:45.360 align:start position:0%
sret boom um
 

01:22:45.360 --> 01:22:48.629 align:start position:0%
sret boom um
now<01:22:45.600><c> we're</c><01:22:45.840><c> back</c><01:22:46.159><c> at</c><01:22:47.120><c> um</c>

01:22:48.629 --> 01:22:48.639 align:start position:0%
now we're back at um
 

01:22:48.639 --> 01:22:51.110 align:start position:0%
now we're back at um
back<01:22:48.880><c> at</c><01:22:48.960><c> address</c><01:22:49.280><c> zero</c><01:22:49.600><c> x</c><01:22:49.760><c> dea</c><01:22:50.480><c> which</c><01:22:50.639><c> is</c><01:22:50.800><c> a</c>

01:22:51.110 --> 01:22:51.120 align:start position:0%
back at address zero x dea which is a
 

01:22:51.120 --> 01:22:52.390 align:start position:0%
back at address zero x dea which is a
low<01:22:51.360><c> address</c>

01:22:52.390 --> 01:22:52.400 align:start position:0%
low address
 

01:22:52.400 --> 01:22:56.149 align:start position:0%
low address
likely<01:22:52.639><c> to</c><01:22:52.719><c> be</c><01:22:52.880><c> user</c><01:22:53.199><c> memory</c><01:22:54.320><c> and</c><01:22:54.480><c> it's</c><01:22:54.719><c> the</c>

01:22:56.149 --> 01:22:56.159 align:start position:0%
likely to be user memory and it's the
 

01:22:56.159 --> 01:22:59.430 align:start position:0%
likely to be user memory and it's the
look<01:22:56.320><c> back</c><01:22:56.560><c> at</c><01:22:56.840><c> sh.asm</c><01:22:58.560><c> and</c><01:22:58.800><c> address</c>

01:22:59.430 --> 01:22:59.440 align:start position:0%
look back at sh.asm and address
 

01:22:59.440 --> 01:23:03.990 align:start position:0%
look back at sh.asm and address
xerox<01:22:59.920><c> dea</c>

01:23:03.990 --> 01:23:04.000 align:start position:0%
 
 

01:23:04.000 --> 01:23:06.870 align:start position:0%
 
is<01:23:04.239><c> indeed</c><01:23:05.440><c> the</c><01:23:05.600><c> address</c><01:23:06.159><c> of</c><01:23:06.239><c> the</c><01:23:06.400><c> return</c>

01:23:06.870 --> 01:23:06.880 align:start position:0%
is indeed the address of the return
 

01:23:06.880 --> 01:23:09.910 align:start position:0%
is indeed the address of the return
function<01:23:07.280><c> at</c><01:23:07.360><c> the</c><01:23:07.520><c> end</c><01:23:07.679><c> of</c><01:23:07.840><c> write</c>

01:23:09.910 --> 01:23:09.920 align:start position:0%
function at the end of write
 

01:23:09.920 --> 01:23:12.950 align:start position:0%
function at the end of write
and

01:23:12.950 --> 01:23:12.960 align:start position:0%
 
 

01:23:12.960 --> 01:23:14.790 align:start position:0%
 
a0<01:23:13.520><c> is</c><01:23:13.679><c> this</c><01:23:13.920><c> return</c><01:23:14.320><c> value</c><01:23:14.560><c> that</c><01:23:14.719><c> was</c>

01:23:14.790 --> 01:23:14.800 align:start position:0%
a0 is this return value that was
 

01:23:14.800 --> 01:23:16.629 align:start position:0%
a0 is this return value that was
supposed<01:23:14.960><c> to</c><01:23:15.040><c> be</c><01:23:15.199><c> turning</c>

01:23:16.629 --> 01:23:16.639 align:start position:0%
supposed to be turning
 

01:23:16.639 --> 01:23:18.950 align:start position:0%
supposed to be turning
so<01:23:16.800><c> we're</c><01:23:16.880><c> back</c><01:23:17.120><c> in</c><01:23:17.199><c> user</c><01:23:17.440><c> space</c><01:23:18.000><c> and</c><01:23:18.159><c> we</c><01:23:18.320><c> can</c>

01:23:18.950 --> 01:23:18.960 align:start position:0%
so we're back in user space and we can
 

01:23:18.960 --> 01:23:19.990 align:start position:0%
so we're back in user space and we can
about<01:23:19.280><c> to</c><01:23:19.360><c> do</c><01:23:19.520><c> the</c><01:23:19.600><c> return</c>

01:23:19.990 --> 01:23:20.000 align:start position:0%
about to do the return
 

01:23:20.000 --> 01:23:22.229 align:start position:0%
about to do the return
back<01:23:20.159><c> to</c><01:23:20.320><c> the</c><01:23:20.480><c> shell</c><01:23:20.800><c> from</c><01:23:20.960><c> the</c><01:23:21.040><c> right</c><01:23:21.280><c> system</c>

01:23:22.229 --> 01:23:22.239 align:start position:0%
back to the shell from the right system
 

01:23:22.239 --> 01:23:23.510 align:start position:0%
back to the shell from the right system
from<01:23:22.480><c> the</c><01:23:22.560><c> right</c><01:23:22.719><c> library</c><01:23:23.120><c> function</c><01:23:23.440><c> that</c>

01:23:23.510 --> 01:23:23.520 align:start position:0%
from the right library function that
 

01:23:23.520 --> 01:23:25.110 align:start position:0%
from the right library function that
made<01:23:23.679><c> the</c><01:23:23.760><c> system</c><01:23:24.080><c> call</c>

01:23:25.110 --> 01:23:25.120 align:start position:0%
made the system call
 

01:23:25.120 --> 01:23:28.790 align:start position:0%
made the system call
okay<01:23:25.360><c> any</c><01:23:25.600><c> questions</c>

01:23:28.790 --> 01:23:28.800 align:start position:0%
 
 

01:23:28.800 --> 01:23:30.790 align:start position:0%
 
uh<01:23:29.120><c> sorry</c><01:23:29.440><c> can</c><01:23:29.600><c> you</c><01:23:29.760><c> repeat</c><01:23:30.159><c> again</c><01:23:30.560><c> what</c>

01:23:30.790 --> 01:23:30.800 align:start position:0%
uh sorry can you repeat again what
 

01:23:30.800 --> 01:23:31.830 align:start position:0%
uh sorry can you repeat again what
happens<01:23:31.280><c> with</c><01:23:31.440><c> the</c>

01:23:31.830 --> 01:23:31.840 align:start position:0%
happens with the
 

01:23:31.840 --> 01:23:37.669 align:start position:0%
happens with the
interrupt<01:23:32.800><c> during</c><01:23:33.280><c> s</c><01:23:33.840><c> red</c>

01:23:37.669 --> 01:23:37.679 align:start position:0%
 
 

01:23:37.679 --> 01:23:40.149 align:start position:0%
 
what<01:23:37.840><c> happened</c><01:23:38.159><c> with</c><01:23:38.400><c> interrupts</c><01:23:39.760><c> you</c><01:23:39.920><c> said</c>

01:23:40.149 --> 01:23:40.159 align:start position:0%
what happened with interrupts you said
 

01:23:40.159 --> 01:23:41.430 align:start position:0%
what happened with interrupts you said
you<01:23:40.320><c> are</c><01:23:40.560><c> turning</c><01:23:40.960><c> them</c>

01:23:41.430 --> 01:23:41.440 align:start position:0%
you are turning them
 

01:23:41.440 --> 01:23:44.070 align:start position:0%
you are turning them
off<01:23:42.239><c> but</c><01:23:42.400><c> then</c><01:23:42.639><c> something</c><01:23:42.960><c> else</c><01:23:43.679><c> turns</c><01:23:44.000><c> them</c>

01:23:44.070 --> 01:23:44.080 align:start position:0%
off but then something else turns them
 

01:23:44.080 --> 01:23:46.830 align:start position:0%
off but then something else turns them
back<01:23:44.400><c> on</c>

01:23:46.830 --> 01:23:46.840 align:start position:0%
 
 

01:23:46.840 --> 01:23:50.310 align:start position:0%
 
s-rat<01:23:48.080><c> um</c><01:23:48.480><c> s-red</c><01:23:48.880><c> enables</c><01:23:49.280><c> interrupts</c>

01:23:50.310 --> 01:23:50.320 align:start position:0%
s-rat um s-red enables interrupts
 

01:23:50.320 --> 01:23:52.950 align:start position:0%
s-rat um s-red enables interrupts
so<01:23:50.480><c> this</c><01:23:50.800><c> s-ret</c><01:23:51.679><c> the</c><01:23:51.920><c> very</c><01:23:52.239><c> last</c><01:23:52.480><c> instruction</c>

01:23:52.950 --> 01:23:52.960 align:start position:0%
so this s-ret the very last instruction
 

01:23:52.960 --> 01:23:54.629 align:start position:0%
so this s-ret the very last instruction
that<01:23:53.040><c> we're</c><01:23:53.199><c> executing</c><01:23:53.760><c> in</c><01:23:53.840><c> supervisor</c><01:23:54.400><c> mode</c>

01:23:54.629 --> 01:23:54.639 align:start position:0%
that we're executing in supervisor mode
 

01:23:54.639 --> 01:23:56.149 align:start position:0%
that we're executing in supervisor mode
in<01:23:54.719><c> the</c><01:23:54.800><c> kernel</c>

01:23:56.149 --> 01:23:56.159 align:start position:0%
in the kernel
 

01:23:56.159 --> 01:23:58.229 align:start position:0%
in the kernel
um<01:23:56.719><c> i</c><01:23:56.880><c> forgot</c><01:23:57.199><c> to</c><01:23:57.280><c> say</c><01:23:57.440><c> that</c><01:23:57.600><c> just</c><01:23:57.760><c> now</c><01:23:57.920><c> but</c><01:23:58.080><c> as</c>

01:23:58.229 --> 01:23:58.239 align:start position:0%
um i forgot to say that just now but as
 

01:23:58.239 --> 01:23:59.910 align:start position:0%
um i forgot to say that just now but as
well<01:23:58.560><c> as</c><01:23:58.800><c> setting</c><01:23:59.040><c> the</c><01:23:59.280><c> program</c><01:23:59.600><c> counter</c>

01:23:59.910 --> 01:23:59.920 align:start position:0%
well as setting the program counter
 

01:23:59.920 --> 01:24:00.629 align:start position:0%
well as setting the program counter
equal<01:24:00.159><c> to</c><01:24:00.320><c> the</c>

01:24:00.629 --> 01:24:00.639 align:start position:0%
equal to the
 

01:24:00.639 --> 01:24:03.669 align:start position:0%
equal to the
scpc<01:24:01.520><c> and</c><01:24:02.000><c> switching</c><01:24:02.320><c> to</c><01:24:02.400><c> user</c><01:24:02.719><c> mode</c><01:24:03.440><c> s</c>

01:24:03.669 --> 01:24:03.679 align:start position:0%
scpc and switching to user mode s
 

01:24:03.679 --> 01:24:07.910 align:start position:0%
scpc and switching to user mode s
red<01:24:03.920><c> is</c><01:24:04.000><c> going</c><01:24:04.159><c> to</c><01:24:04.480><c> re-enable</c><01:24:06.080><c> interrupts</c>

01:24:07.910 --> 01:24:07.920 align:start position:0%
red is going to re-enable interrupts
 

01:24:07.920 --> 01:24:10.390 align:start position:0%
red is going to re-enable interrupts
does<01:24:08.080><c> that</c><01:24:08.239><c> mean</c><01:24:09.199><c> you</c><01:24:09.280><c> know</c><01:24:09.360><c> that's</c><01:24:10.000><c> you</c><01:24:10.080><c> know</c>

01:24:10.390 --> 01:24:10.400 align:start position:0%
does that mean you know that's you know
 

01:24:10.400 --> 01:24:11.669 align:start position:0%
does that mean you know that's you know
user<01:24:10.639><c> programs</c><01:24:10.960><c> that</c><01:24:11.040><c> may</c><01:24:11.199><c> run</c><01:24:11.360><c> for</c><01:24:11.440><c> a</c><01:24:11.520><c> long</c>

01:24:11.669 --> 01:24:11.679 align:start position:0%
user programs that may run for a long
 

01:24:11.679 --> 01:24:13.110 align:start position:0%
user programs that may run for a long
time<01:24:11.840><c> it'd</c><01:24:12.000><c> be</c><01:24:12.159><c> nice</c><01:24:12.400><c> to</c><01:24:12.480><c> be</c><01:24:12.560><c> able</c><01:24:12.719><c> to</c><01:24:12.880><c> take</c>

01:24:13.110 --> 01:24:13.120 align:start position:0%
time it'd be nice to be able to take
 

01:24:13.120 --> 01:24:15.830 align:start position:0%
time it'd be nice to be able to take
disk<01:24:13.360><c> interrupts</c><01:24:13.760><c> or</c><01:24:13.840><c> whatever</c>

01:24:15.830 --> 01:24:15.840 align:start position:0%
disk interrupts or whatever
 

01:24:15.840 --> 01:24:18.950 align:start position:0%
disk interrupts or whatever
user<01:24:16.159><c> programs</c><01:24:16.639><c> are</c><01:24:16.800><c> running</c><01:24:18.239><c> i</c><01:24:18.400><c> see</c><01:24:18.719><c> thank</c>

01:24:18.950 --> 01:24:18.960 align:start position:0%
user programs are running i see thank
 

01:24:18.960 --> 01:24:20.790 align:start position:0%
user programs are running i see thank
you

01:24:20.790 --> 01:24:20.800 align:start position:0%
you
 

01:24:20.800 --> 01:24:28.070 align:start position:0%
you
other<01:24:21.040><c> questions</c>

01:24:28.070 --> 01:24:28.080 align:start position:0%
 
 

01:24:28.080 --> 01:24:31.510 align:start position:0%
 
okay<01:24:28.400><c> to</c><01:24:28.639><c> uh</c><01:24:28.800><c> to</c><01:24:28.960><c> wrap</c><01:24:29.199><c> up</c><01:24:29.360><c> the</c><01:24:30.480><c> system</c><01:24:30.800><c> calls</c>

01:24:31.510 --> 01:24:31.520 align:start position:0%
okay to uh to wrap up the system calls
 

01:24:31.520 --> 01:24:33.030 align:start position:0%
okay to uh to wrap up the system calls
sort<01:24:31.679><c> of</c><01:24:31.840><c> look</c><01:24:32.000><c> like</c><01:24:32.239><c> function</c><01:24:32.639><c> calls</c><01:24:32.880><c> that</c>

01:24:33.030 --> 01:24:33.040 align:start position:0%
sort of look like function calls that
 

01:24:33.040 --> 01:24:35.189 align:start position:0%
sort of look like function calls that
are<01:24:33.199><c> kind</c><01:24:33.360><c> of</c><01:24:33.520><c> meant</c><01:24:33.840><c> to</c><01:24:34.080><c> be</c><01:24:34.320><c> thought</c><01:24:34.639><c> of</c><01:24:34.880><c> a</c><01:24:34.960><c> lot</c>

01:24:35.189 --> 01:24:35.199 align:start position:0%
are kind of meant to be thought of a lot
 

01:24:35.199 --> 01:24:36.229 align:start position:0%
are kind of meant to be thought of a lot
like<01:24:35.440><c> function</c><01:24:35.760><c> calls</c>

01:24:36.229 --> 01:24:36.239 align:start position:0%
like function calls
 

01:24:36.239 --> 01:24:39.189 align:start position:0%
like function calls
but<01:24:36.960><c> um</c><01:24:37.280><c> the</c><01:24:37.679><c> user</c><01:24:38.000><c> kernel</c><01:24:38.239><c> transitions</c><01:24:38.800><c> are</c>

01:24:39.189 --> 01:24:39.199 align:start position:0%
but um the user kernel transitions are
 

01:24:39.199 --> 01:24:41.110 align:start position:0%
but um the user kernel transitions are
much<01:24:39.360><c> more</c><01:24:39.600><c> complex</c><01:24:40.080><c> than</c>

01:24:41.110 --> 01:24:41.120 align:start position:0%
much more complex than
 

01:24:41.120 --> 01:24:43.350 align:start position:0%
much more complex than
than<01:24:41.360><c> function</c><01:24:41.679><c> calls</c><01:24:42.000><c> are</c><01:24:42.880><c> a</c><01:24:43.040><c> lot</c><01:24:43.199><c> of</c><01:24:43.280><c> the</c>

01:24:43.350 --> 01:24:43.360 align:start position:0%
than function calls are a lot of the
 

01:24:43.360 --> 01:24:45.510 align:start position:0%
than function calls are a lot of the
complexities<01:24:44.080><c> due</c><01:24:44.239><c> to</c><01:24:44.400><c> the</c><01:24:44.480><c> requirement</c>

01:24:45.510 --> 01:24:45.520 align:start position:0%
complexities due to the requirement
 

01:24:45.520 --> 01:24:47.189 align:start position:0%
complexities due to the requirement
for<01:24:45.760><c> isolation</c><01:24:46.320><c> the</c><01:24:46.480><c> kernel</c><01:24:46.800><c> just</c><01:24:46.960><c> can't</c>

01:24:47.189 --> 01:24:47.199 align:start position:0%
for isolation the kernel just can't
 

01:24:47.199 --> 01:24:49.270 align:start position:0%
for isolation the kernel just can't
trust<01:24:47.440><c> anything</c><01:24:47.840><c> in</c><01:24:47.920><c> user</c><01:24:48.239><c> space</c>

01:24:49.270 --> 01:24:49.280 align:start position:0%
trust anything in user space
 

01:24:49.280 --> 01:24:52.070 align:start position:0%
trust anything in user space
and<01:24:49.520><c> also</c><01:24:50.320><c> the</c><01:24:50.480><c> desire</c><01:24:50.960><c> to</c><01:24:51.040><c> have</c><01:24:51.600><c> simple</c><01:24:51.920><c> and</c>

01:24:52.070 --> 01:24:52.080 align:start position:0%
and also the desire to have simple and
 

01:24:52.080 --> 01:24:54.950 align:start position:0%
and also the desire to have simple and
very<01:24:52.400><c> fast</c><01:24:52.719><c> hardware</c><01:24:53.120><c> mechanisms</c><01:24:53.679><c> so</c><01:24:53.840><c> really</c>

01:24:54.950 --> 01:24:54.960 align:start position:0%
very fast hardware mechanisms so really
 

01:24:54.960 --> 01:24:56.310 align:start position:0%
very fast hardware mechanisms so really
xp6<01:24:55.360><c> doesn't</c><01:24:55.600><c> care</c><01:24:55.760><c> that</c><01:24:55.920><c> much</c><01:24:56.080><c> about</c>

01:24:56.310 --> 01:24:56.320 align:start position:0%
xp6 doesn't care that much about
 

01:24:56.320 --> 01:24:57.910 align:start position:0%
xp6 doesn't care that much about
performance<01:24:56.800><c> but</c><01:24:57.040><c> in</c><01:24:57.199><c> general</c><01:24:57.520><c> operating</c>

01:24:57.910 --> 01:24:57.920 align:start position:0%
performance but in general operating
 

01:24:57.920 --> 01:24:59.590 align:start position:0%
performance but in general operating
system<01:24:58.400><c> designers</c><01:24:59.120><c> and</c><01:24:59.199><c> the</c>

01:24:59.590 --> 01:24:59.600 align:start position:0%
system designers and the
 

01:24:59.600 --> 01:25:02.629 align:start position:0%
system designers and the
cpu<01:24:59.920><c> designers</c><01:25:00.960><c> are</c><01:25:01.199><c> very</c><01:25:01.600><c> interested</c><01:25:02.159><c> in</c><01:25:02.239><c> the</c>

01:25:02.629 --> 01:25:02.639 align:start position:0%
cpu designers are very interested in the
 

01:25:02.639 --> 01:25:04.870 align:start position:0%
cpu designers are very interested in the
sort<01:25:02.800><c> of</c><01:25:02.960><c> speed</c><01:25:03.280><c> at</c><01:25:03.440><c> which</c><01:25:03.600><c> you</c><01:25:03.760><c> can</c><01:25:03.920><c> do</c><01:25:04.800><c> the</c>

01:25:04.870 --> 01:25:04.880 align:start position:0%
sort of speed at which you can do the
 

01:25:04.880 --> 01:25:07.990 align:start position:0%
sort of speed at which you can do the
efficiency<01:25:05.440><c> of</c><01:25:05.600><c> traps</c>

01:25:07.990 --> 01:25:08.000 align:start position:0%
efficiency of traps
 

01:25:08.000 --> 01:25:09.830 align:start position:0%
efficiency of traps
xp6<01:25:08.560><c> does</c><01:25:08.800><c> it</c><01:25:09.040><c> you</c><01:25:09.199><c> know</c><01:25:09.360><c> does</c><01:25:09.600><c> all</c><01:25:09.679><c> these</c>

01:25:09.830 --> 01:25:09.840 align:start position:0%
xp6 does it you know does all these
 

01:25:09.840 --> 01:25:11.270 align:start position:0%
xp6 does it you know does all these
things<01:25:10.080><c> in</c><01:25:10.159><c> a</c><01:25:10.239><c> particular</c><01:25:10.719><c> way</c><01:25:10.880><c> there's</c>

01:25:11.270 --> 01:25:11.280 align:start position:0%
things in a particular way there's
 

01:25:11.280 --> 01:25:13.750 align:start position:0%
things in a particular way there's
certainly<01:25:11.679><c> other</c><01:25:11.840><c> ways</c><01:25:12.080><c> to</c><01:25:12.159><c> do</c><01:25:12.320><c> them</c><01:25:13.360><c> a</c><01:25:13.440><c> few</c>

01:25:13.750 --> 01:25:13.760 align:start position:0%
certainly other ways to do them a few
 

01:25:13.760 --> 01:25:14.390 align:start position:0%
certainly other ways to do them a few
questions

01:25:14.390 --> 01:25:14.400 align:start position:0%
questions
 

01:25:14.400 --> 01:25:16.550 align:start position:0%
questions
a<01:25:14.480><c> few</c><01:25:14.639><c> design</c><01:25:15.280><c> questions</c><01:25:15.840><c> alternatives</c><01:25:16.480><c> you</c>

01:25:16.550 --> 01:25:16.560 align:start position:0%
a few design questions alternatives you
 

01:25:16.560 --> 01:25:18.950 align:start position:0%
a few design questions alternatives you
could<01:25:16.719><c> think</c><01:25:16.960><c> about</c>

01:25:18.950 --> 01:25:18.960 align:start position:0%
could think about
 

01:25:18.960 --> 01:25:21.030 align:start position:0%
could think about
one<01:25:19.199><c> is</c><01:25:19.440><c> is</c><01:25:19.679><c> can</c><01:25:19.840><c> you</c><01:25:20.000><c> think</c><01:25:20.159><c> of</c><01:25:20.239><c> ways</c><01:25:20.639><c> to</c><01:25:20.719><c> make</c>

01:25:21.030 --> 01:25:21.040 align:start position:0%
one is is can you think of ways to make
 

01:25:21.040 --> 01:25:21.990 align:start position:0%
one is is can you think of ways to make
the

01:25:21.990 --> 01:25:22.000 align:start position:0%
the
 

01:25:22.000 --> 01:25:24.790 align:start position:0%
the
hardware<01:25:22.639><c> or</c><01:25:22.960><c> software</c><01:25:23.440><c> aspects</c><01:25:24.239><c> redesign</c>

01:25:24.790 --> 01:25:24.800 align:start position:0%
hardware or software aspects redesign
 

01:25:24.800 --> 01:25:26.709 align:start position:0%
hardware or software aspects redesign
xv6<01:25:25.280><c> redesigned</c><01:25:25.760><c> the</c><01:25:25.840><c> risk</c><01:25:26.080><c> five</c>

01:25:26.709 --> 01:25:26.719 align:start position:0%
xv6 redesigned the risk five
 

01:25:26.719 --> 01:25:29.669 align:start position:0%
xv6 redesigned the risk five
to<01:25:26.880><c> make</c><01:25:27.040><c> this</c><01:25:27.199><c> whole</c><01:25:27.440><c> sequence</c><01:25:27.920><c> simpler</c><01:25:28.639><c> um</c>

01:25:29.669 --> 01:25:29.679 align:start position:0%
to make this whole sequence simpler um
 

01:25:29.679 --> 01:25:31.350 align:start position:0%
to make this whole sequence simpler um
or<01:25:30.000><c> could</c><01:25:30.239><c> you</c><01:25:30.320><c> think</c><01:25:30.480><c> of</c><01:25:30.639><c> ways</c><01:25:30.960><c> to</c><01:25:31.040><c> make</c><01:25:31.280><c> the</c>

01:25:31.350 --> 01:25:31.360 align:start position:0%
or could you think of ways to make the
 

01:25:31.360 --> 01:25:32.310 align:start position:0%
or could you think of ways to make the
whole<01:25:31.600><c> sequence</c>

01:25:32.310 --> 01:25:32.320 align:start position:0%
whole sequence
 

01:25:32.320 --> 01:25:34.550 align:start position:0%
whole sequence
faster<01:25:33.600><c> and</c><01:25:33.760><c> another</c><01:25:34.000><c> sort</c><01:25:34.159><c> of</c><01:25:34.239><c> set</c><01:25:34.400><c> of</c>

01:25:34.550 --> 01:25:34.560 align:start position:0%
faster and another sort of set of
 

01:25:34.560 --> 01:25:37.830 align:start position:0%
faster and another sort of set of
questions<01:25:34.880><c> to</c><01:25:34.960><c> keep</c><01:25:35.120><c> in</c><01:25:35.199><c> the</c><01:25:35.280><c> back</c><01:25:35.520><c> your</c><01:25:35.760><c> head</c>

01:25:37.830 --> 01:25:37.840 align:start position:0%
questions to keep in the back your head
 

01:25:37.840 --> 01:25:41.110 align:start position:0%
questions to keep in the back your head
is<01:25:38.719><c> whether</c><01:25:39.040><c> or</c><01:25:39.199><c> not</c><01:25:40.080><c> malicious</c><01:25:40.639><c> programs</c>

01:25:41.110 --> 01:25:41.120 align:start position:0%
is whether or not malicious programs
 

01:25:41.120 --> 01:25:43.030 align:start position:0%
is whether or not malicious programs
could<01:25:41.360><c> abuse</c><01:25:41.760><c> any</c><01:25:41.920><c> of</c><01:25:42.000><c> these</c><01:25:42.239><c> mechanisms</c>

01:25:43.030 --> 01:25:43.040 align:start position:0%
could abuse any of these mechanisms
 

01:25:43.040 --> 01:25:47.990 align:start position:0%
could abuse any of these mechanisms
to<01:25:45.280><c> break</c><01:25:45.600><c> isolation</c>

01:25:47.990 --> 01:25:48.000 align:start position:0%
to break isolation
 

01:25:48.000 --> 01:25:49.990 align:start position:0%
to break isolation
all<01:25:48.159><c> right</c><01:25:48.639><c> that</c><01:25:48.880><c> is</c><01:25:49.199><c> all</c><01:25:49.360><c> i</c><01:25:49.440><c> have</c><01:25:49.600><c> to</c><01:25:49.679><c> say</c><01:25:49.840><c> for</c>

01:25:49.990 --> 01:25:50.000 align:start position:0%
all right that is all i have to say for
 

01:25:50.000 --> 01:25:51.270 align:start position:0%
all right that is all i have to say for
this<01:25:50.159><c> lecture</c><01:25:50.800><c> i'm</c>

01:25:51.270 --> 01:25:51.280 align:start position:0%
this lecture i'm
 

01:25:51.280 --> 01:25:54.629 align:start position:0%
this lecture i'm
happy<01:25:51.600><c> to</c><01:25:51.760><c> take</c><01:25:52.840><c> questions</c>

01:25:54.629 --> 01:25:54.639 align:start position:0%
happy to take questions
 

01:25:54.639 --> 01:25:56.709 align:start position:0%
happy to take questions
uh<01:25:54.800><c> sorry</c><01:25:55.120><c> i</c><01:25:55.199><c> have</c><01:25:55.440><c> another</c><01:25:55.760><c> question</c><01:25:56.480><c> please</c>

01:25:56.709 --> 01:25:56.719 align:start position:0%
uh sorry i have another question please
 

01:25:56.719 --> 01:25:58.390 align:start position:0%
uh sorry i have another question please
um<01:25:56.960><c> i</c><01:25:57.199><c> saw</c><01:25:57.440><c> that</c><01:25:57.520><c> there</c><01:25:57.760><c> is</c>

01:25:58.390 --> 01:25:58.400 align:start position:0%
um i saw that there is
 

01:25:58.400 --> 01:26:01.750 align:start position:0%
um i saw that there is
a<01:25:58.880><c> um</c><01:25:59.840><c> u</c><01:26:00.400><c> i</c><01:26:00.719><c> e</c><01:26:01.120><c> regis</c>

01:26:01.750 --> 01:26:01.760 align:start position:0%
a um u i e regis
 

01:26:01.760 --> 01:26:05.189 align:start position:0%
a um u i e regis
or<01:26:02.480><c> yeah</c><01:26:02.880><c> i</c><01:26:02.960><c> think</c><01:26:03.280><c> register</c><01:26:03.760><c> in</c><01:26:03.920><c> status</c>

01:26:05.189 --> 01:26:05.199 align:start position:0%
or yeah i think register in status
 

01:26:05.199 --> 01:26:08.310 align:start position:0%
or yeah i think register in status
but<01:26:05.360><c> we</c><01:26:05.520><c> don't</c><01:26:05.840><c> use</c><01:26:06.080><c> it</c><01:26:07.280><c> we</c><01:26:07.440><c> just</c><01:26:07.600><c> use</c>

01:26:08.310 --> 01:26:08.320 align:start position:0%
but we don't use it we just use
 

01:26:08.320 --> 01:26:11.030 align:start position:0%
but we don't use it we just use
s<01:26:08.880><c> i</c><01:26:09.120><c> e</c><01:26:09.440><c> and</c><01:26:09.600><c> we</c><01:26:09.840><c> set</c><01:26:10.000><c> it</c><01:26:10.080><c> to</c><01:26:10.320><c> false</c><01:26:10.639><c> in</c><01:26:10.800><c> user</c>

01:26:11.030 --> 01:26:11.040 align:start position:0%
s i e and we set it to false in user
 

01:26:11.040 --> 01:26:13.030 align:start position:0%
s i e and we set it to false in user
space<01:26:11.360><c> why</c><01:26:11.600><c> couldn't</c><01:26:11.760><c> we</c><01:26:11.920><c> use</c>

01:26:13.030 --> 01:26:13.040 align:start position:0%
space why couldn't we use
 

01:26:13.040 --> 01:26:17.110 align:start position:0%
space why couldn't we use
the<01:26:13.520><c> ui</c><01:26:15.040><c> gosh</c>

01:26:17.110 --> 01:26:17.120 align:start position:0%
the ui gosh
 

01:26:17.120 --> 01:26:21.590 align:start position:0%
the ui gosh
the<01:26:17.280><c> answer</c><01:26:17.520><c> is</c><01:26:17.600><c> going</c><01:26:17.679><c> to</c><01:26:17.760><c> be</c><01:26:17.920><c> i</c><01:26:18.000><c> don't</c><01:26:18.239><c> know</c>

01:26:21.590 --> 01:26:21.600 align:start position:0%
 
 

01:26:21.600 --> 01:26:22.010 align:start position:0%
 
um

01:26:22.010 --> 01:26:22.020 align:start position:0%
um
 

01:26:22.020 --> 01:26:24.709 align:start position:0%
um
[Music]

01:26:24.709 --> 01:26:24.719 align:start position:0%
[Music]
 

01:26:24.719 --> 01:26:27.910 align:start position:0%
[Music]
uh<01:26:24.960><c> we're</c><01:26:25.600><c> sp</c><01:26:26.320><c> what</c><01:26:26.480><c> we</c><01:26:26.719><c> set</c><01:26:27.040><c> is</c><01:26:27.360><c> s</c><01:26:27.600><c> what</c><01:26:27.760><c> we</c>

01:26:27.910 --> 01:26:27.920 align:start position:0%
uh we're sp what we set is s what we
 

01:26:27.920 --> 01:26:28.390 align:start position:0%
uh we're sp what we set is s what we
said<01:26:28.159><c> is</c>

01:26:28.390 --> 01:26:28.400 align:start position:0%
said is
 

01:26:28.400 --> 01:26:33.750 align:start position:0%
said is
spi<01:26:30.639><c> we</c><01:26:30.880><c> may</c><01:26:31.040><c> actually</c><01:26:31.440><c> end</c><01:26:31.679><c> up</c><01:26:31.920><c> setting</c>

01:26:33.750 --> 01:26:33.760 align:start position:0%
spi we may actually end up setting
 

01:26:33.760 --> 01:26:36.470 align:start position:0%
spi we may actually end up setting
um<01:26:34.239><c> i</c><01:26:34.320><c> know</c><01:26:34.480><c> nothing</c><01:26:34.800><c> about</c><01:26:34.960><c> uie</c><01:26:35.920><c> i'm</c><01:26:36.080><c> going</c><01:26:36.239><c> to</c>

01:26:36.470 --> 01:26:36.480 align:start position:0%
um i know nothing about uie i'm going to
 

01:26:36.480 --> 01:26:37.510 align:start position:0%
um i know nothing about uie i'm going to
guess

01:26:37.510 --> 01:26:37.520 align:start position:0%
guess
 

01:26:37.520 --> 01:26:39.590 align:start position:0%
guess
let<01:26:37.679><c> me</c><01:26:37.840><c> see</c><01:26:38.400><c> i'm</c><01:26:38.560><c> going</c><01:26:38.719><c> to</c><01:26:38.800><c> guess</c><01:26:39.199><c> that</c><01:26:39.360><c> what</c>

01:26:39.590 --> 01:26:39.600 align:start position:0%
let me see i'm going to guess that what
 

01:26:39.600 --> 01:26:42.470 align:start position:0%
let me see i'm going to guess that what
actually<01:26:39.920><c> happens</c><01:26:40.400><c> here</c>

01:26:42.470 --> 01:26:42.480 align:start position:0%
actually happens here
 

01:26:42.480 --> 01:26:48.310 align:start position:0%
actually happens here
i'm<01:26:42.719><c> in</c><01:26:42.880><c> this</c><01:26:43.120><c> code</c><01:26:43.440><c> where</c><01:26:43.679><c> we're</c>

01:26:48.310 --> 01:26:48.320 align:start position:0%
 
 

01:26:48.320 --> 01:26:51.270 align:start position:0%
 
okay<01:26:48.560><c> so</c><01:26:48.719><c> here</c><01:26:48.880><c> we</c><01:26:49.120><c> are</c><01:26:49.440><c> in</c><01:26:50.400><c> user</c><01:26:50.719><c> trap</c><01:26:51.040><c> red</c>

01:26:51.270 --> 01:26:51.280 align:start position:0%
okay so here we are in user trap red
 

01:26:51.280 --> 01:26:53.229 align:start position:0%
okay so here we are in user trap red
we're<01:26:51.440><c> returning</c><01:26:52.080><c> or</c><01:26:52.400><c> setting</c>

01:26:53.229 --> 01:26:53.239 align:start position:0%
we're returning or setting
 

01:26:53.239 --> 01:26:56.149 align:start position:0%
we're returning or setting
s-p-i-e<01:26:54.400><c> in</c><01:26:54.480><c> the</c><01:26:54.639><c> s-status</c>

01:26:56.149 --> 01:26:56.159 align:start position:0%
s-p-i-e in the s-status
 

01:26:56.159 --> 01:27:00.070 align:start position:0%
s-p-i-e in the s-status
and<01:26:57.199><c> i</c><01:26:57.360><c> believe</c><01:26:58.480><c> the</c><01:26:58.719><c> s-red</c><01:26:59.199><c> instruction</c><01:26:59.760><c> will</c>

01:27:00.070 --> 01:27:00.080 align:start position:0%
and i believe the s-red instruction will
 

01:27:00.080 --> 01:27:03.990 align:start position:0%
and i believe the s-red instruction will
copy<01:27:01.120><c> this</c><01:27:01.480><c> s-p-i-e</c><01:27:02.719><c> and</c><01:27:02.960><c> this</c><01:27:03.120><c> is</c><01:27:03.199><c> this</c>

01:27:03.990 --> 01:27:04.000 align:start position:0%
copy this s-p-i-e and this is this
 

01:27:04.000 --> 01:27:05.510 align:start position:0%
copy this s-p-i-e and this is this
previous<01:27:04.719><c> the</c><01:27:04.880><c> name</c><01:27:05.040><c> of</c><01:27:05.120><c> this</c><01:27:05.280><c> is</c><01:27:05.360><c> the</c>

01:27:05.510 --> 01:27:05.520 align:start position:0%
previous the name of this is the
 

01:27:05.520 --> 01:27:08.310 align:start position:0%
previous the name of this is the
supervisor<01:27:06.320><c> previous</c><01:27:06.880><c> interrupt</c><01:27:07.360><c> enable</c>

01:27:08.310 --> 01:27:08.320 align:start position:0%
supervisor previous interrupt enable
 

01:27:08.320 --> 01:27:11.350 align:start position:0%
supervisor previous interrupt enable
i<01:27:08.480><c> suspect</c><01:27:08.960><c> s</c><01:27:09.440><c> copies</c><01:27:09.920><c> that</c><01:27:10.239><c> bit</c>

01:27:11.350 --> 01:27:11.360 align:start position:0%
i suspect s copies that bit
 

01:27:11.360 --> 01:27:15.030 align:start position:0%
i suspect s copies that bit
into<01:27:11.920><c> the</c><01:27:12.159><c> uh</c>

01:27:15.030 --> 01:27:15.040 align:start position:0%
 
 

01:27:15.040 --> 01:27:16.790 align:start position:0%
 
into<01:27:15.360><c> whatever</c><01:27:15.600><c> controls</c><01:27:16.080><c> interrupts</c><01:27:16.639><c> in</c>

01:27:16.790 --> 01:27:16.800 align:start position:0%
into whatever controls interrupts in
 

01:27:16.800 --> 01:27:20.149 align:start position:0%
into whatever controls interrupts in
user<01:27:17.040><c> mode</c><01:27:17.280><c> which</c><01:27:17.440><c> is</c><01:27:17.840><c> possibly</c><01:27:18.239><c> this</c><01:27:18.400><c> ui</c>

01:27:20.149 --> 01:27:20.159 align:start position:0%
user mode which is possibly this ui
 

01:27:20.159 --> 01:27:24.470 align:start position:0%
user mode which is possibly this ui
and<01:27:20.320><c> s</c><01:27:20.480><c> status</c><01:27:21.840><c> how's</c><01:27:22.080><c> that</c><01:27:22.239><c> for</c><01:27:22.400><c> a</c><01:27:22.480><c> guess</c>

01:27:24.470 --> 01:27:24.480 align:start position:0%
and s status how's that for a guess
 

01:27:24.480 --> 01:27:31.840 align:start position:0%
and s status how's that for a guess
i<01:27:24.639><c> see</c><01:27:24.880><c> thank</c><01:27:28.840><c> you</c>

