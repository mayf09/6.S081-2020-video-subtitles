WEBVTT
Kind: captions
Language: en

00:00:05.440 --> 00:00:07.990 align:start position:0%
 
all<00:00:05.600><c> right</c>

00:00:07.990 --> 00:00:08.000 align:start position:0%
 
 

00:00:08.000 --> 00:00:11.910 align:start position:0%
 
um<00:00:09.440><c> the</c><00:00:10.400><c> sort</c><00:00:10.559><c> of</c><00:00:10.719><c> underlying</c><00:00:11.280><c> topic</c>

00:00:11.910 --> 00:00:11.920 align:start position:0%
um the sort of underlying topic
 

00:00:11.920 --> 00:00:15.350 align:start position:0%
um the sort of underlying topic
for<00:00:12.080><c> today</c><00:00:12.559><c> is</c><00:00:12.639><c> really</c><00:00:14.480><c> getting</c><00:00:14.719><c> multi-core</c>

00:00:15.350 --> 00:00:15.360 align:start position:0%
for today is really getting multi-core
 

00:00:15.360 --> 00:00:18.230 align:start position:0%
for today is really getting multi-core
getting<00:00:15.599><c> good</c><00:00:15.920><c> multi-core</c><00:00:16.480><c> performance</c>

00:00:18.230 --> 00:00:18.240 align:start position:0%
getting good multi-core performance
 

00:00:18.240 --> 00:00:19.750 align:start position:0%
getting good multi-core performance
getting<00:00:18.480><c> good</c><00:00:18.640><c> performance</c><00:00:19.119><c> on</c><00:00:19.199><c> multi-core</c>

00:00:19.750 --> 00:00:19.760 align:start position:0%
getting good performance on multi-core
 

00:00:19.760 --> 00:00:22.390 align:start position:0%
getting good performance on multi-core
hardware<00:00:20.880><c> um</c>

00:00:22.390 --> 00:00:22.400 align:start position:0%
hardware um
 

00:00:22.400 --> 00:00:25.189 align:start position:0%
hardware um
and<00:00:23.039><c> that's</c><00:00:23.279><c> actually</c><00:00:24.400><c> like</c><00:00:24.560><c> a</c><00:00:24.720><c> very</c>

00:00:25.189 --> 00:00:25.199 align:start position:0%
and that's actually like a very
 

00:00:25.199 --> 00:00:27.189 align:start position:0%
and that's actually like a very
interesting<00:00:25.920><c> and</c>

00:00:27.189 --> 00:00:27.199 align:start position:0%
interesting and
 

00:00:27.199 --> 00:00:30.630 align:start position:0%
interesting and
deep<00:00:28.160><c> um</c><00:00:28.880><c> fascinating</c><00:00:29.519><c> topic</c>

00:00:30.630 --> 00:00:30.640 align:start position:0%
deep um fascinating topic
 

00:00:30.640 --> 00:00:32.549 align:start position:0%
deep um fascinating topic
with<00:00:30.800><c> many</c><00:00:31.519><c> many</c><00:00:31.760><c> different</c><00:00:32.079><c> interesting</c>

00:00:32.549 --> 00:00:32.559 align:start position:0%
with many many different interesting
 

00:00:32.559 --> 00:00:34.549 align:start position:0%
with many many different interesting
aspects

00:00:34.549 --> 00:00:34.559 align:start position:0%
aspects
 

00:00:34.559 --> 00:00:37.510 align:start position:0%
aspects
um<00:00:35.120><c> today</c><00:00:36.399><c> we're</c><00:00:36.559><c> just</c><00:00:36.719><c> going</c><00:00:36.800><c> to</c><00:00:36.960><c> bite</c><00:00:37.200><c> off</c><00:00:37.360><c> a</c>

00:00:37.510 --> 00:00:37.520 align:start position:0%
um today we're just going to bite off a
 

00:00:37.520 --> 00:00:39.430 align:start position:0%
um today we're just going to bite off a
fairly<00:00:37.840><c> small</c><00:00:38.160><c> piece</c>

00:00:39.430 --> 00:00:39.440 align:start position:0%
fairly small piece
 

00:00:39.440 --> 00:00:43.670 align:start position:0%
fairly small piece
and<00:00:39.520><c> that's</c><00:00:39.760><c> how</c><00:00:39.920><c> to</c><00:00:40.079><c> get</c><00:00:41.680><c> good</c><00:00:41.920><c> performance</c>

00:00:43.670 --> 00:00:43.680 align:start position:0%
and that's how to get good performance
 

00:00:43.680 --> 00:00:47.029 align:start position:0%
and that's how to get good performance
for<00:00:44.239><c> shared</c><00:00:44.640><c> data</c><00:00:45.039><c> in</c><00:00:45.120><c> the</c><00:00:45.280><c> kernel</c><00:00:46.640><c> that's</c>

00:00:47.029 --> 00:00:47.039 align:start position:0%
for shared data in the kernel that's
 

00:00:47.039 --> 00:00:47.750 align:start position:0%
for shared data in the kernel that's
read

00:00:47.750 --> 00:00:47.760 align:start position:0%
read
 

00:00:47.760 --> 00:00:50.229 align:start position:0%
read
much<00:00:48.000><c> more</c><00:00:48.239><c> often</c><00:00:48.480><c> than</c><00:00:48.719><c> it's</c><00:00:48.879><c> written</c><00:00:50.079><c> and</c>

00:00:50.229 --> 00:00:50.239 align:start position:0%
much more often than it's written and
 

00:00:50.239 --> 00:00:51.350 align:start position:0%
much more often than it's written and
you<00:00:50.320><c> know</c><00:00:50.399><c> it</c><00:00:50.480><c> turns</c><00:00:50.719><c> out</c><00:00:50.800><c> there's</c><00:00:51.039><c> many</c><00:00:51.199><c> kind</c>

00:00:51.350 --> 00:00:51.360 align:start position:0%
you know it turns out there's many kind
 

00:00:51.360 --> 00:00:53.910 align:start position:0%
you know it turns out there's many kind
of<00:00:51.440><c> specific</c><00:00:51.920><c> cases</c>

00:00:53.910 --> 00:00:53.920 align:start position:0%
of specific cases
 

00:00:53.920 --> 00:00:56.790 align:start position:0%
of specific cases
in<00:00:54.000><c> which</c><00:00:55.520><c> different</c><00:00:55.840><c> ideas</c><00:00:56.320><c> for</c><00:00:56.559><c> getting</c>

00:00:56.790 --> 00:00:56.800 align:start position:0%
in which different ideas for getting
 

00:00:56.800 --> 00:00:58.790 align:start position:0%
in which different ideas for getting
good<00:00:57.039><c> multi-core</c><00:00:57.600><c> performance</c><00:00:58.239><c> are</c><00:00:58.399><c> useful</c>

00:00:58.790 --> 00:00:58.800 align:start position:0%
good multi-core performance are useful
 

00:00:58.800 --> 00:01:02.709 align:start position:0%
good multi-core performance are useful
and

00:01:02.709 --> 00:01:02.719 align:start position:0%
 
 

00:01:02.719 --> 00:01:03.830 align:start position:0%
 
what<00:01:02.879><c> we're</c><00:01:03.039><c> going</c><00:01:03.039><c> to</c><00:01:03.120><c> look</c><00:01:03.280><c> at</c><00:01:03.440><c> today</c><00:01:03.680><c> is</c>

00:01:03.830 --> 00:01:03.840 align:start position:0%
what we're going to look at today is
 

00:01:03.840 --> 00:01:05.670 align:start position:0%
what we're going to look at today is
linux's<00:01:04.320><c> rcu</c><00:01:04.799><c> which</c><00:01:05.040><c> has</c><00:01:05.199><c> been</c><00:01:05.439><c> very</c>

00:01:05.670 --> 00:01:05.680 align:start position:0%
linux's rcu which has been very
 

00:01:05.680 --> 00:01:06.789 align:start position:0%
linux's rcu which has been very
successful<00:01:06.240><c> for</c>

00:01:06.789 --> 00:01:06.799 align:start position:0%
successful for
 

00:01:06.799 --> 00:01:08.469 align:start position:0%
successful for
sort<00:01:06.960><c> of</c><00:01:07.040><c> read</c><00:01:07.280><c> heavy</c><00:01:07.600><c> data</c><00:01:08.000><c> read</c><00:01:08.159><c> heavy</c>

00:01:08.469 --> 00:01:08.479 align:start position:0%
sort of read heavy data read heavy
 

00:01:08.479 --> 00:01:09.990 align:start position:0%
sort of read heavy data read heavy
kernel<00:01:08.799><c> data</c>

00:01:09.990 --> 00:01:10.000 align:start position:0%
kernel data
 

00:01:10.000 --> 00:01:13.030 align:start position:0%
kernel data
um<00:01:11.360><c> the</c><00:01:11.600><c> uh</c>

00:01:13.030 --> 00:01:13.040 align:start position:0%
um the uh
 

00:01:13.040 --> 00:01:16.149 align:start position:0%
um the uh
general<00:01:13.760><c> sort</c><00:01:14.000><c> of</c><00:01:14.799><c> uh</c><00:01:15.119><c> background</c><00:01:15.680><c> here</c><00:01:15.920><c> is</c>

00:01:16.149 --> 00:01:16.159 align:start position:0%
general sort of uh background here is
 

00:01:16.159 --> 00:01:16.710 align:start position:0%
general sort of uh background here is
that

00:01:16.710 --> 00:01:16.720 align:start position:0%
that
 

00:01:16.720 --> 00:01:19.270 align:start position:0%
that
if<00:01:16.880><c> you</c><00:01:17.040><c> have</c><00:01:17.600><c> modern</c><00:01:18.000><c> machines</c><00:01:18.479><c> with</c><00:01:18.960><c> four</c><00:01:19.119><c> or</c>

00:01:19.270 --> 00:01:19.280 align:start position:0%
if you have modern machines with four or
 

00:01:19.280 --> 00:01:21.270 align:start position:0%
if you have modern machines with four or
eight<00:01:19.520><c> or</c><00:01:19.680><c> 16</c><00:01:20.240><c> or</c><00:01:20.479><c> 64</c>

00:01:21.270 --> 00:01:21.280 align:start position:0%
eight or 16 or 64
 

00:01:21.280 --> 00:01:23.590 align:start position:0%
eight or 16 or 64
or<00:01:21.439><c> however</c><00:01:21.840><c> many</c><00:01:22.400><c> uh</c><00:01:22.799><c> cores</c><00:01:23.200><c> running</c><00:01:23.520><c> in</c>

00:01:23.590 --> 00:01:23.600 align:start position:0%
or however many uh cores running in
 

00:01:23.600 --> 00:01:26.630 align:start position:0%
or however many uh cores running in
parallel<00:01:24.000><c> and</c><00:01:24.159><c> sharing</c><00:01:24.479><c> memory</c>

00:01:26.630 --> 00:01:26.640 align:start position:0%
parallel and sharing memory
 

00:01:26.640 --> 00:01:31.350 align:start position:0%
parallel and sharing memory
the<00:01:28.400><c> kernel</c><00:01:28.880><c> is</c><00:01:29.040><c> really</c><00:01:29.360><c> a</c><00:01:29.439><c> parallel</c><00:01:29.920><c> process</c>

00:01:31.350 --> 00:01:31.360 align:start position:0%
the kernel is really a parallel process
 

00:01:31.360 --> 00:01:34.149 align:start position:0%
the kernel is really a parallel process
it's<00:01:31.520><c> a</c><00:01:31.600><c> parallel</c><00:01:32.079><c> program</c><00:01:33.200><c> and</c><00:01:33.920><c> if</c><00:01:34.000><c> you're</c>

00:01:34.149 --> 00:01:34.159 align:start position:0%
it's a parallel program and if you're
 

00:01:34.159 --> 00:01:35.429 align:start position:0%
it's a parallel program and if you're
going<00:01:34.240><c> to</c><00:01:34.320><c> get</c><00:01:34.479><c> good</c><00:01:34.640><c> performance</c><00:01:35.119><c> you</c><00:01:35.280><c> need</c>

00:01:35.429 --> 00:01:35.439 align:start position:0%
going to get good performance you need
 

00:01:35.439 --> 00:01:37.030 align:start position:0%
going to get good performance you need
to<00:01:35.520><c> make</c><00:01:35.680><c> sure</c><00:01:35.840><c> that</c><00:01:36.000><c> the</c><00:01:36.079><c> kernel</c><00:01:36.479><c> can</c><00:01:36.640><c> run</c><00:01:36.960><c> a</c>

00:01:37.030 --> 00:01:37.040 align:start position:0%
to make sure that the kernel can run a
 

00:01:37.040 --> 00:01:37.910 align:start position:0%
to make sure that the kernel can run a
lot<00:01:37.200><c> of</c><00:01:37.360><c> its</c><00:01:37.520><c> work</c>

00:01:37.910 --> 00:01:37.920 align:start position:0%
lot of its work
 

00:01:37.920 --> 00:01:39.670 align:start position:0%
lot of its work
as<00:01:38.000><c> much</c><00:01:38.240><c> as</c><00:01:38.320><c> possible</c><00:01:38.880><c> in</c><00:01:38.960><c> parallel</c><00:01:39.520><c> on</c>

00:01:39.670 --> 00:01:39.680 align:start position:0%
as much as possible in parallel on
 

00:01:39.680 --> 00:01:41.590 align:start position:0%
as much as possible in parallel on
different<00:01:40.000><c> cores</c><00:01:40.479><c> in</c><00:01:40.640><c> order</c><00:01:40.880><c> to</c><00:01:41.040><c> get</c>

00:01:41.590 --> 00:01:41.600 align:start position:0%
different cores in order to get
 

00:01:41.600 --> 00:01:43.190 align:start position:0%
different cores in order to get
that<00:01:41.759><c> much</c><00:01:42.079><c> more</c><00:01:42.560><c> you</c><00:01:42.640><c> know</c><00:01:42.799><c> if</c><00:01:42.880><c> you</c><00:01:42.960><c> can</c><00:01:43.040><c> run</c>

00:01:43.190 --> 00:01:43.200 align:start position:0%
that much more you know if you can run
 

00:01:43.200 --> 00:01:44.950 align:start position:0%
that much more you know if you can run
the<00:01:43.360><c> kernel</c>

00:01:44.950 --> 00:01:44.960 align:start position:0%
the kernel
 

00:01:44.960 --> 00:01:47.270 align:start position:0%
the kernel
in<00:01:45.119><c> parallel</c><00:01:45.680><c> on</c><00:01:45.920><c> eight</c><00:01:46.240><c> cores</c><00:01:46.799><c> all</c><00:01:46.960><c> of</c><00:01:47.040><c> them</c>

00:01:47.270 --> 00:01:47.280 align:start position:0%
in parallel on eight cores all of them
 

00:01:47.280 --> 00:01:48.789 align:start position:0%
in parallel on eight cores all of them
do<00:01:47.520><c> useful</c><00:01:47.840><c> work</c><00:01:48.000><c> you</c><00:01:48.159><c> can</c><00:01:48.240><c> get</c>

00:01:48.789 --> 00:01:48.799 align:start position:0%
do useful work you can get
 

00:01:48.799 --> 00:01:51.990 align:start position:0%
do useful work you can get
eight<00:01:49.119><c> times</c><00:01:49.520><c> the</c><00:01:49.680><c> performance</c><00:01:51.040><c> um</c><00:01:51.600><c> than</c><00:01:51.840><c> if</c>

00:01:51.990 --> 00:01:52.000 align:start position:0%
eight times the performance um than if
 

00:01:52.000 --> 00:01:53.670 align:start position:0%
eight times the performance um than if
the<00:01:52.320><c> kernel</c><00:01:52.560><c> could</c><00:01:52.799><c> only</c><00:01:52.960><c> run</c><00:01:53.119><c> on</c><00:01:53.280><c> a</c><00:01:53.360><c> single</c>

00:01:53.670 --> 00:01:53.680 align:start position:0%
the kernel could only run on a single
 

00:01:53.680 --> 00:01:54.710 align:start position:0%
the kernel could only run on a single
core

00:01:54.710 --> 00:01:54.720 align:start position:0%
core
 

00:01:54.720 --> 00:01:57.910 align:start position:0%
core
and<00:01:56.719><c> at</c><00:01:56.960><c> a</c><00:01:57.040><c> high</c><00:01:57.200><c> level</c>

00:01:57.910 --> 00:01:57.920 align:start position:0%
and at a high level
 

00:01:57.920 --> 00:02:00.950 align:start position:0%
and at a high level
this<00:01:58.560><c> should</c><00:01:58.799><c> clearly</c><00:01:59.200><c> be</c><00:01:59.439><c> possible</c>

00:02:00.950 --> 00:02:00.960 align:start position:0%
this should clearly be possible
 

00:02:00.960 --> 00:02:02.469 align:start position:0%
this should clearly be possible
if<00:02:01.119><c> you</c><00:02:01.200><c> have</c><00:02:01.280><c> lots</c><00:02:01.520><c> and</c><00:02:01.600><c> lots</c><00:02:01.840><c> of</c><00:02:01.920><c> processes</c>

00:02:02.469 --> 00:02:02.479 align:start position:0%
if you have lots and lots of processes
 

00:02:02.479 --> 00:02:04.789 align:start position:0%
if you have lots and lots of processes
running<00:02:02.799><c> on</c><00:02:02.880><c> your</c><00:02:03.040><c> computer</c>

00:02:04.789 --> 00:02:04.799 align:start position:0%
running on your computer
 

00:02:04.799 --> 00:02:06.149 align:start position:0%
running on your computer
well<00:02:05.040><c> first</c><00:02:05.200><c> of</c><00:02:05.280><c> all</c><00:02:05.439><c> the</c><00:02:05.520><c> processes</c><00:02:06.000><c> aren't</c>

00:02:06.149 --> 00:02:06.159 align:start position:0%
well first of all the processes aren't
 

00:02:06.159 --> 00:02:09.029 align:start position:0%
well first of all the processes aren't
running<00:02:06.399><c> and</c><00:02:06.719><c> executing</c><00:02:07.200><c> in</c><00:02:07.280><c> the</c><00:02:07.360><c> kernel</c>

00:02:09.029 --> 00:02:09.039 align:start position:0%
running and executing in the kernel
 

00:02:09.039 --> 00:02:10.949 align:start position:0%
running and executing in the kernel
then<00:02:09.520><c> we</c><00:02:09.759><c> have</c><00:02:09.840><c> very</c><00:02:10.000><c> little</c><00:02:10.239><c> to</c><00:02:10.319><c> worry</c><00:02:10.640><c> about</c>

00:02:10.949 --> 00:02:10.959 align:start position:0%
then we have very little to worry about
 

00:02:10.959 --> 00:02:12.710 align:start position:0%
then we have very little to worry about
they're<00:02:11.120><c> likely</c><00:02:11.440><c> to</c><00:02:11.520><c> run</c><00:02:11.760><c> in</c><00:02:11.920><c> parallel</c>

00:02:12.710 --> 00:02:12.720 align:start position:0%
they're likely to run in parallel
 

00:02:12.720 --> 00:02:15.510 align:start position:0%
they're likely to run in parallel
without<00:02:12.959><c> any</c><00:02:13.520><c> kernel</c><00:02:13.760><c> having</c><00:02:14.080><c> to</c><00:02:14.319><c> do</c><00:02:14.560><c> anything</c>

00:02:15.510 --> 00:02:15.520 align:start position:0%
without any kernel having to do anything
 

00:02:15.520 --> 00:02:16.790 align:start position:0%
without any kernel having to do anything
if<00:02:15.760><c> the</c><00:02:15.920><c> process</c><00:02:16.400><c> is</c>

00:02:16.790 --> 00:02:16.800 align:start position:0%
if the process is
 

00:02:16.800 --> 00:02:18.309 align:start position:0%
if the process is
if<00:02:16.879><c> you</c><00:02:16.959><c> have</c><00:02:17.120><c> many</c><00:02:17.360><c> applications</c><00:02:17.920><c> running</c>

00:02:18.309 --> 00:02:18.319 align:start position:0%
if you have many applications running
 

00:02:18.319 --> 00:02:20.550 align:start position:0%
if you have many applications running
and<00:02:18.400><c> they're</c><00:02:18.720><c> all</c><00:02:18.800><c> making</c><00:02:19.120><c> system</c><00:02:19.520><c> calls</c>

00:02:20.550 --> 00:02:20.560 align:start position:0%
and they're all making system calls
 

00:02:20.560 --> 00:02:23.670 align:start position:0%
and they're all making system calls
a<00:02:20.720><c> lot</c><00:02:20.959><c> of</c><00:02:21.040><c> the</c><00:02:21.200><c> time</c><00:02:22.560><c> different</c><00:02:22.959><c> system</c><00:02:23.280><c> calls</c>

00:02:23.670 --> 00:02:23.680 align:start position:0%
a lot of the time different system calls
 

00:02:23.680 --> 00:02:25.190 align:start position:0%
a lot of the time different system calls
made<00:02:23.840><c> by</c><00:02:24.080><c> different</c><00:02:24.319><c> processes</c>

00:02:25.190 --> 00:02:25.200 align:start position:0%
made by different processes
 

00:02:25.200 --> 00:02:26.390 align:start position:0%
made by different processes
just<00:02:25.440><c> seem</c><00:02:25.680><c> like</c><00:02:25.840><c> they</c><00:02:26.000><c> ought</c><00:02:26.160><c> to</c><00:02:26.239><c> be</c>

00:02:26.390 --> 00:02:26.400 align:start position:0%
just seem like they ought to be
 

00:02:26.400 --> 00:02:27.830 align:start position:0%
just seem like they ought to be
independent<00:02:27.040><c> and</c><00:02:27.200><c> should</c><00:02:27.440><c> be</c><00:02:27.520><c> able</c><00:02:27.680><c> to</c>

00:02:27.830 --> 00:02:27.840 align:start position:0%
independent and should be able to
 

00:02:27.840 --> 00:02:28.869 align:start position:0%
independent and should be able to
proceed

00:02:28.869 --> 00:02:28.879 align:start position:0%
proceed
 

00:02:28.879 --> 00:02:30.790 align:start position:0%
proceed
in<00:02:29.200><c> many</c><00:02:29.520><c> cases</c><00:02:29.840><c> though</c><00:02:30.080><c> certainly</c><00:02:30.400><c> not</c><00:02:30.560><c> all</c>

00:02:30.790 --> 00:02:30.800 align:start position:0%
in many cases though certainly not all
 

00:02:30.800 --> 00:02:32.630 align:start position:0%
in many cases though certainly not all
but<00:02:31.120><c> should</c><00:02:31.360><c> be</c><00:02:31.440><c> able</c><00:02:31.680><c> to</c><00:02:31.760><c> proceed</c><00:02:32.160><c> completely</c>

00:02:32.630 --> 00:02:32.640 align:start position:0%
but should be able to proceed completely
 

00:02:32.640 --> 00:02:33.990 align:start position:0%
but should be able to proceed completely
without<00:02:33.040><c> interference</c>

00:02:33.990 --> 00:02:34.000 align:start position:0%
without interference
 

00:02:34.000 --> 00:02:37.030 align:start position:0%
without interference
like<00:02:34.239><c> if</c><00:02:34.319><c> two</c><00:02:34.560><c> processes</c><00:02:35.040><c> are</c><00:02:35.200><c> forking</c><00:02:36.319><c> um</c>

00:02:37.030 --> 00:02:37.040 align:start position:0%
like if two processes are forking um
 

00:02:37.040 --> 00:02:39.430 align:start position:0%
like if two processes are forking um
or<00:02:37.200><c> two</c><00:02:37.440><c> processes</c><00:02:38.000><c> are</c><00:02:38.480><c> reading</c><00:02:38.959><c> different</c>

00:02:39.430 --> 00:02:39.440 align:start position:0%
or two processes are reading different
 

00:02:39.440 --> 00:02:40.710 align:start position:0%
or two processes are reading different
pipes<00:02:40.000><c> or</c>

00:02:40.710 --> 00:02:40.720 align:start position:0%
pipes or
 

00:02:40.720 --> 00:02:42.390 align:start position:0%
pipes or
you<00:02:40.879><c> know</c><00:02:41.120><c> reading</c><00:02:41.440><c> or</c><00:02:41.519><c> writing</c><00:02:42.000><c> different</c>

00:02:42.390 --> 00:02:42.400 align:start position:0%
you know reading or writing different
 

00:02:42.400 --> 00:02:43.750 align:start position:0%
you know reading or writing different
files<00:02:43.360><c> um</c>

00:02:43.750 --> 00:02:43.760 align:start position:0%
files um
 

00:02:43.760 --> 00:02:45.750 align:start position:0%
files um
there's<00:02:44.000><c> no</c><00:02:44.480><c> obvious</c><00:02:44.959><c> reason</c><00:02:45.280><c> why</c><00:02:45.599><c> these</c>

00:02:45.750 --> 00:02:45.760 align:start position:0%
there's no obvious reason why these
 

00:02:45.760 --> 00:02:47.509 align:start position:0%
there's no obvious reason why these
should<00:02:46.000><c> interfere</c><00:02:46.400><c> with</c><00:02:46.560><c> each</c><00:02:46.720><c> other</c>

00:02:47.509 --> 00:02:47.519 align:start position:0%
should interfere with each other
 

00:02:47.519 --> 00:02:49.589 align:start position:0%
should interfere with each other
um<00:02:48.560><c> you</c><00:02:48.720><c> know</c><00:02:48.800><c> why</c><00:02:48.959><c> they</c><00:02:49.120><c> shouldn't</c><00:02:49.360><c> be</c><00:02:49.440><c> able</c>

00:02:49.589 --> 00:02:49.599 align:start position:0%
um you know why they shouldn't be able
 

00:02:49.599 --> 00:02:51.030 align:start position:0%
um you know why they shouldn't be able
to<00:02:49.680><c> execute</c><00:02:50.000><c> in</c><00:02:50.080><c> parallel</c><00:02:50.560><c> at</c><00:02:50.800><c> n</c>

00:02:51.030 --> 00:02:51.040 align:start position:0%
to execute in parallel at n
 

00:02:51.040 --> 00:02:53.509 align:start position:0%
to execute in parallel at n
times<00:02:51.440><c> the</c><00:02:51.519><c> total</c><00:02:51.840><c> throughput</c><00:02:53.120><c> but</c><00:02:53.360><c> the</c>

00:02:53.509 --> 00:02:53.519 align:start position:0%
times the total throughput but the
 

00:02:53.519 --> 00:02:55.509 align:start position:0%
times the total throughput but the
problem<00:02:53.840><c> is</c><00:02:54.000><c> the</c><00:02:54.080><c> kernel</c><00:02:54.480><c> has</c><00:02:54.640><c> a</c><00:02:54.800><c> lot</c><00:02:55.120><c> of</c>

00:02:55.509 --> 00:02:55.519 align:start position:0%
problem is the kernel has a lot of
 

00:02:55.519 --> 00:02:58.710 align:start position:0%
problem is the kernel has a lot of
shared<00:02:56.080><c> resources</c><00:02:57.280><c> um</c>

00:02:58.710 --> 00:02:58.720 align:start position:0%
shared resources um
 

00:02:58.720 --> 00:03:01.430 align:start position:0%
shared resources um
in<00:02:58.879><c> order</c><00:02:59.120><c> to</c><00:03:00.480><c> you</c><00:03:00.560><c> know</c><00:03:00.879><c> for</c><00:03:01.040><c> other</c><00:03:01.200><c> good</c>

00:03:01.430 --> 00:03:01.440 align:start position:0%
in order to you know for other good
 

00:03:01.440 --> 00:03:02.710 align:start position:0%
in order to you know for other good
reasons<00:03:01.760><c> the</c><00:03:01.840><c> kernel</c><00:03:02.159><c> shares</c><00:03:02.400><c> a</c><00:03:02.480><c> lot</c><00:03:02.640><c> of</c>

00:03:02.710 --> 00:03:02.720 align:start position:0%
reasons the kernel shares a lot of
 

00:03:02.720 --> 00:03:04.149 align:start position:0%
reasons the kernel shares a lot of
resources<00:03:03.200><c> like</c><00:03:03.440><c> memory</c>

00:03:04.149 --> 00:03:04.159 align:start position:0%
resources like memory
 

00:03:04.159 --> 00:03:07.270 align:start position:0%
resources like memory
and<00:03:04.800><c> cpus</c><00:03:05.599><c> and</c><00:03:05.760><c> a</c><00:03:05.920><c> disk</c><00:03:06.239><c> cache</c><00:03:06.640><c> and</c><00:03:06.720><c> an</c><00:03:06.879><c> ino</c>

00:03:07.270 --> 00:03:07.280 align:start position:0%
and cpus and a disk cache and an ino
 

00:03:07.280 --> 00:03:07.990 align:start position:0%
and cpus and a disk cache and an ino
cache

00:03:07.990 --> 00:03:08.000 align:start position:0%
cache
 

00:03:08.000 --> 00:03:09.509 align:start position:0%
cache
and<00:03:08.159><c> all</c><00:03:08.239><c> this</c><00:03:08.400><c> other</c><00:03:08.640><c> stuff</c><00:03:08.800><c> that's</c><00:03:09.040><c> actually</c>

00:03:09.509 --> 00:03:09.519 align:start position:0%
and all this other stuff that's actually
 

00:03:09.519 --> 00:03:11.589 align:start position:0%
and all this other stuff that's actually
under<00:03:09.760><c> the</c><00:03:09.920><c> hood</c><00:03:10.640><c> shared</c><00:03:10.959><c> between</c><00:03:11.280><c> different</c>

00:03:11.589 --> 00:03:11.599 align:start position:0%
under the hood shared between different
 

00:03:11.599 --> 00:03:13.350 align:start position:0%
under the hood shared between different
processes

00:03:13.350 --> 00:03:13.360 align:start position:0%
processes
 

00:03:13.360 --> 00:03:15.350 align:start position:0%
processes
and<00:03:14.080><c> that</c><00:03:14.239><c> means</c><00:03:14.480><c> that</c><00:03:14.720><c> even</c><00:03:14.959><c> if</c><00:03:15.200><c> two</c>

00:03:15.350 --> 00:03:15.360 align:start position:0%
and that means that even if two
 

00:03:15.360 --> 00:03:16.949 align:start position:0%
and that means that even if two
processors<00:03:16.159><c> are</c><00:03:16.319><c> doing</c>

00:03:16.949 --> 00:03:16.959 align:start position:0%
processors are doing
 

00:03:16.959 --> 00:03:18.630 align:start position:0%
processors are doing
system<00:03:17.360><c> calls</c><00:03:17.760><c> two</c><00:03:17.920><c> processes</c><00:03:18.400><c> that</c><00:03:18.480><c> have</c>

00:03:18.630 --> 00:03:18.640 align:start position:0%
system calls two processes that have
 

00:03:18.640 --> 00:03:19.910 align:start position:0%
system calls two processes that have
totally<00:03:18.879><c> never</c><00:03:19.120><c> heard</c><00:03:19.280><c> of</c><00:03:19.440><c> each</c><00:03:19.599><c> other</c><00:03:19.760><c> and</c>

00:03:19.910 --> 00:03:19.920 align:start position:0%
totally never heard of each other and
 

00:03:19.920 --> 00:03:21.430 align:start position:0%
totally never heard of each other and
aren't<00:03:20.080><c> trying</c><00:03:20.239><c> to</c><00:03:20.319><c> interact</c><00:03:20.800><c> make</c><00:03:21.040><c> system</c>

00:03:21.430 --> 00:03:21.440 align:start position:0%
aren't trying to interact make system
 

00:03:21.440 --> 00:03:21.990 align:start position:0%
aren't trying to interact make system
calls

00:03:21.990 --> 00:03:22.000 align:start position:0%
calls
 

00:03:22.000 --> 00:03:23.830 align:start position:0%
calls
if<00:03:22.159><c> those</c><00:03:22.319><c> system</c><00:03:22.560><c> calls</c><00:03:22.959><c> happen</c><00:03:23.200><c> to</c><00:03:23.360><c> allocate</c>

00:03:23.830 --> 00:03:23.840 align:start position:0%
if those system calls happen to allocate
 

00:03:23.840 --> 00:03:25.190 align:start position:0%
if those system calls happen to allocate
memory<00:03:24.239><c> or</c><00:03:24.400><c> use</c><00:03:24.640><c> the</c>

00:03:25.190 --> 00:03:25.200 align:start position:0%
memory or use the
 

00:03:25.200 --> 00:03:27.910 align:start position:0%
memory or use the
disk<00:03:25.519><c> cache</c><00:03:26.879><c> or</c><00:03:27.120><c> involve</c><00:03:27.440><c> scheduling</c>

00:03:27.910 --> 00:03:27.920 align:start position:0%
disk cache or involve scheduling
 

00:03:27.920 --> 00:03:28.789 align:start position:0%
disk cache or involve scheduling
decisions

00:03:28.789 --> 00:03:28.799 align:start position:0%
decisions
 

00:03:28.799 --> 00:03:33.190 align:start position:0%
decisions
they<00:03:29.040><c> may</c><00:03:29.200><c> well</c><00:03:29.680><c> end</c><00:03:30.000><c> up</c><00:03:30.799><c> both</c><00:03:31.120><c> using</c>

00:03:33.190 --> 00:03:33.200 align:start position:0%
they may well end up both using
 

00:03:33.200 --> 00:03:34.550 align:start position:0%
they may well end up both using
data<00:03:33.440><c> structures</c><00:03:33.920><c> in</c><00:03:34.000><c> the</c><00:03:34.080><c> kernel</c><00:03:34.480><c> and</c>

00:03:34.550 --> 00:03:34.560 align:start position:0%
data structures in the kernel and
 

00:03:34.560 --> 00:03:36.390 align:start position:0%
data structures in the kernel and
therefore<00:03:35.040><c> we</c><00:03:35.200><c> need</c><00:03:35.440><c> some</c><00:03:35.680><c> story</c>

00:03:36.390 --> 00:03:36.400 align:start position:0%
therefore we need some story
 

00:03:36.400 --> 00:03:37.670 align:start position:0%
therefore we need some story
for<00:03:36.560><c> how</c><00:03:36.720><c> they're</c><00:03:36.879><c> both</c><00:03:37.120><c> supposed</c><00:03:37.360><c> to</c><00:03:37.440><c> use</c><00:03:37.599><c> the</c>

00:03:37.670 --> 00:03:37.680 align:start position:0%
for how they're both supposed to use the
 

00:03:37.680 --> 00:03:40.229 align:start position:0%
for how they're both supposed to use the
same<00:03:37.920><c> data</c><00:03:38.239><c> without</c>

00:03:40.229 --> 00:03:40.239 align:start position:0%
same data without
 

00:03:40.239 --> 00:03:41.830 align:start position:0%
same data without
getting<00:03:40.480><c> underfoot</c><00:03:41.040><c> without</c><00:03:41.360><c> interfering</c>

00:03:41.830 --> 00:03:41.840 align:start position:0%
getting underfoot without interfering
 

00:03:41.840 --> 00:03:43.110 align:start position:0%
getting underfoot without interfering
with<00:03:42.080><c> each</c><00:03:42.239><c> other</c><00:03:42.640><c> and</c><00:03:42.799><c> there's</c><00:03:42.959><c> been</c>

00:03:43.110 --> 00:03:43.120 align:start position:0%
with each other and there's been
 

00:03:43.120 --> 00:03:45.110 align:start position:0%
with each other and there's been
enormous<00:03:43.599><c> effort</c><00:03:43.920><c> over</c><00:03:44.159><c> the</c><00:03:44.239><c> years</c><00:03:44.640><c> in</c><00:03:44.799><c> making</c>

00:03:45.110 --> 00:03:45.120 align:start position:0%
enormous effort over the years in making
 

00:03:45.120 --> 00:03:46.070 align:start position:0%
enormous effort over the years in making
kernels

00:03:46.070 --> 00:03:46.080 align:start position:0%
kernels
 

00:03:46.080 --> 00:03:47.750 align:start position:0%
kernels
and<00:03:46.159><c> making</c><00:03:46.560><c> all</c><00:03:46.720><c> these</c><00:03:46.959><c> cases</c><00:03:47.280><c> and</c><00:03:47.360><c> kernels</c>

00:03:47.750 --> 00:03:47.760 align:start position:0%
and making all these cases and kernels
 

00:03:47.760 --> 00:03:51.030 align:start position:0%
and making all these cases and kernels
run<00:03:48.000><c> fast</c>

00:03:51.030 --> 00:03:51.040 align:start position:0%
 
 

00:03:51.040 --> 00:03:53.429 align:start position:0%
 
we've<00:03:51.280><c> seen</c><00:03:51.519><c> one</c><00:03:51.760><c> of</c><00:03:51.840><c> course</c><00:03:52.400><c> that's</c><00:03:52.959><c> oriented</c>

00:03:53.429 --> 00:03:53.439 align:start position:0%
we've seen one of course that's oriented
 

00:03:53.439 --> 00:03:56.550 align:start position:0%
we've seen one of course that's oriented
towards<00:03:53.760><c> correctness</c><00:03:54.319><c> namely</c><00:03:54.640><c> spin</c><00:03:54.959><c> locks</c>

00:03:56.550 --> 00:03:56.560 align:start position:0%
towards correctness namely spin locks
 

00:03:56.560 --> 00:03:59.670 align:start position:0%
towards correctness namely spin locks
spinlocks<00:03:57.120><c> are</c><00:03:57.519><c> straightforward</c><00:03:59.280><c> as</c><00:03:59.439><c> such</c>

00:03:59.670 --> 00:03:59.680 align:start position:0%
spinlocks are straightforward as such
 

00:03:59.680 --> 00:03:59.990 align:start position:0%
spinlocks are straightforward as such
things

00:03:59.990 --> 00:04:00.000 align:start position:0%
things
 

00:04:00.000 --> 00:04:02.390 align:start position:0%
things
go<00:04:00.239><c> and</c><00:04:00.400><c> easy</c><00:04:00.640><c> to</c><00:04:00.799><c> reason</c><00:04:01.120><c> about</c><00:04:01.439><c> but</c><00:04:02.080><c> you</c><00:04:02.239><c> know</c>

00:04:02.390 --> 00:04:02.400 align:start position:0%
go and easy to reason about but you know
 

00:04:02.400 --> 00:04:04.229 align:start position:0%
go and easy to reason about but you know
what<00:04:02.640><c> a</c><00:04:02.720><c> spin</c><00:04:02.959><c> lock</c><00:04:03.200><c> does</c><00:04:03.599><c> is</c>

00:04:04.229 --> 00:04:04.239 align:start position:0%
what a spin lock does is
 

00:04:04.239 --> 00:04:06.789 align:start position:0%
what a spin lock does is
prevent<00:04:04.720><c> execution</c><00:04:05.360><c> it</c><00:04:05.519><c> prevents</c><00:04:06.000><c> its</c><00:04:06.239><c> job</c><00:04:06.640><c> is</c>

00:04:06.789 --> 00:04:06.799 align:start position:0%
prevent execution it prevents its job is
 

00:04:06.799 --> 00:04:07.429 align:start position:0%
prevent execution it prevents its job is
to<00:04:06.959><c> prevent</c>

00:04:07.429 --> 00:04:07.439 align:start position:0%
to prevent
 

00:04:07.439 --> 00:04:10.309 align:start position:0%
to prevent
parallelism<00:04:09.280><c> in</c><00:04:09.439><c> cases</c><00:04:09.840><c> where</c><00:04:10.000><c> there</c><00:04:10.159><c> might</c>

00:04:10.309 --> 00:04:10.319 align:start position:0%
parallelism in cases where there might
 

00:04:10.319 --> 00:04:12.149 align:start position:0%
parallelism in cases where there might
be<00:04:10.480><c> a</c><00:04:10.640><c> problem</c><00:04:10.959><c> between</c><00:04:11.280><c> two</c><00:04:11.519><c> processes</c>

00:04:12.149 --> 00:04:12.159 align:start position:0%
be a problem between two processes
 

00:04:12.159 --> 00:04:14.550 align:start position:0%
be a problem between two processes
so<00:04:12.319><c> spinlocks</c><00:04:12.799><c> are</c><00:04:12.879><c> just</c><00:04:13.200><c> directly</c><00:04:13.680><c> a</c><00:04:13.760><c> way</c><00:04:14.319><c> to</c>

00:04:14.550 --> 00:04:14.560 align:start position:0%
so spinlocks are just directly a way to
 

00:04:14.560 --> 00:04:16.949 align:start position:0%
so spinlocks are just directly a way to
decrease<00:04:15.120><c> performance</c><00:04:15.760><c> that's</c><00:04:16.000><c> all</c><00:04:16.160><c> they</c><00:04:16.320><c> do</c>

00:04:16.949 --> 00:04:16.959 align:start position:0%
decrease performance that's all they do
 

00:04:16.959 --> 00:04:19.110 align:start position:0%
decrease performance that's all they do
of<00:04:17.120><c> course</c><00:04:18.160><c> they</c><00:04:18.320><c> make</c><00:04:18.479><c> it</c><00:04:18.560><c> easy</c><00:04:18.799><c> to</c><00:04:18.880><c> reason</c>

00:04:19.110 --> 00:04:19.120 align:start position:0%
of course they make it easy to reason
 

00:04:19.120 --> 00:04:20.390 align:start position:0%
of course they make it easy to reason
about<00:04:19.280><c> correctness</c><00:04:19.759><c> but</c><00:04:19.919><c> they</c>

00:04:20.390 --> 00:04:20.400 align:start position:0%
about correctness but they
 

00:04:20.400 --> 00:04:23.749 align:start position:0%
about correctness but they
absolutely<00:04:21.280><c> prevent</c><00:04:21.680><c> parallel</c><00:04:22.160><c> execution</c>

00:04:23.749 --> 00:04:23.759 align:start position:0%
absolutely prevent parallel execution
 

00:04:23.759 --> 00:04:25.670 align:start position:0%
absolutely prevent parallel execution
and<00:04:24.160><c> you</c><00:04:24.240><c> know</c><00:04:24.479><c> that's</c><00:04:25.120><c> not</c><00:04:25.360><c> always</c><00:04:25.520><c> that</c>

00:04:25.670 --> 00:04:25.680 align:start position:0%
and you know that's not always that
 

00:04:25.680 --> 00:04:28.870 align:start position:0%
and you know that's not always that
desirable

00:04:28.870 --> 00:04:28.880 align:start position:0%
 
 

00:04:28.880 --> 00:04:32.150 align:start position:0%
 
okay<00:04:29.120><c> so</c><00:04:29.280><c> again</c><00:04:29.520><c> we're</c><00:04:29.680><c> going</c><00:04:29.759><c> to</c><00:04:29.840><c> focus</c>

00:04:32.150 --> 00:04:32.160 align:start position:0%
okay so again we're going to focus
 

00:04:32.160 --> 00:04:34.790 align:start position:0%
okay so again we're going to focus
on<00:04:32.639><c> read</c><00:04:32.960><c> heavy</c><00:04:33.360><c> date</c><00:04:33.600><c> on</c><00:04:33.680><c> the</c><00:04:33.919><c> case</c><00:04:34.240><c> in</c><00:04:34.320><c> which</c>

00:04:34.790 --> 00:04:34.800 align:start position:0%
on read heavy date on the case in which
 

00:04:34.800 --> 00:04:36.310 align:start position:0%
on read heavy date on the case in which
you<00:04:34.960><c> have</c><00:04:35.040><c> data</c><00:04:35.280><c> that's</c><00:04:35.520><c> mostly</c><00:04:35.919><c> read</c>

00:04:36.310 --> 00:04:36.320 align:start position:0%
you have data that's mostly read
 

00:04:36.320 --> 00:04:38.629 align:start position:0%
you have data that's mostly read
and<00:04:36.639><c> relatively</c><00:04:37.120><c> rarely</c><00:04:37.520><c> lit</c><00:04:37.840><c> written</c><00:04:38.560><c> and</c>

00:04:38.629 --> 00:04:38.639 align:start position:0%
and relatively rarely lit written and
 

00:04:38.639 --> 00:04:40.150 align:start position:0%
and relatively rarely lit written and
the<00:04:38.800><c> main</c><00:04:39.040><c> example</c><00:04:39.360><c> i'm</c><00:04:39.440><c> going</c><00:04:39.600><c> to</c><00:04:39.680><c> use</c>

00:04:40.150 --> 00:04:40.160 align:start position:0%
the main example i'm going to use
 

00:04:40.160 --> 00:04:43.189 align:start position:0%
the main example i'm going to use
is<00:04:40.320><c> a</c><00:04:40.400><c> linked</c><00:04:40.639><c> list</c><00:04:40.960><c> a</c><00:04:41.040><c> singly</c><00:04:41.440><c> linked</c><00:04:41.680><c> list</c><00:04:42.479><c> um</c>

00:04:43.189 --> 00:04:43.199 align:start position:0%
is a linked list a singly linked list um
 

00:04:43.199 --> 00:04:45.430 align:start position:0%
is a linked list a singly linked list um
and<00:04:43.360><c> so</c><00:04:43.600><c> you</c><00:04:43.680><c> can</c><00:04:43.840><c> think</c><00:04:44.080><c> of</c><00:04:44.400><c> uh</c><00:04:45.040><c> just</c><00:04:45.199><c> the</c>

00:04:45.430 --> 00:04:45.440 align:start position:0%
and so you can think of uh just the
 

00:04:45.440 --> 00:04:46.710 align:start position:0%
and so you can think of uh just the
standard<00:04:45.840><c> link</c><00:04:46.080><c> to</c><00:04:46.240><c> style</c>

00:04:46.710 --> 00:04:46.720 align:start position:0%
standard link to style
 

00:04:46.720 --> 00:04:49.749 align:start position:0%
standard link to style
this<00:04:47.040><c> diagram</c><00:04:47.520><c> there's</c><00:04:48.160><c> some</c><00:04:48.400><c> sort</c><00:04:48.560><c> of</c><00:04:48.800><c> maybe</c>

00:04:49.749 --> 00:04:49.759 align:start position:0%
this diagram there's some sort of maybe
 

00:04:49.759 --> 00:04:52.710 align:start position:0%
this diagram there's some sort of maybe
global<00:04:50.560><c> variable</c><00:04:51.199><c> that's</c><00:04:51.440><c> a</c><00:04:51.600><c> pointer</c><00:04:52.400><c> this</c>

00:04:52.710 --> 00:04:52.720 align:start position:0%
global variable that's a pointer this
 

00:04:52.720 --> 00:04:53.030 align:start position:0%
global variable that's a pointer this
head

00:04:53.030 --> 00:04:53.040 align:start position:0%
head
 

00:04:53.040 --> 00:04:56.230 align:start position:0%
head
pointer<00:04:54.000><c> um</c><00:04:54.639><c> just</c><00:04:54.880><c> a</c><00:04:55.040><c> pointer</c><00:04:55.440><c> and</c>

00:04:56.230 --> 00:04:56.240 align:start position:0%
pointer um just a pointer and
 

00:04:56.240 --> 00:04:59.510 align:start position:0%
pointer um just a pointer and
uh<00:04:56.639><c> there's</c><00:04:56.800><c> a</c><00:04:56.880><c> bunch</c><00:04:57.040><c> of</c><00:04:57.199><c> list</c><00:04:57.520><c> elements</c><00:04:59.199><c> um</c>

00:04:59.510 --> 00:04:59.520 align:start position:0%
uh there's a bunch of list elements um
 

00:04:59.520 --> 00:04:59.830 align:start position:0%
uh there's a bunch of list elements um
and

00:04:59.830 --> 00:04:59.840 align:start position:0%
and
 

00:04:59.840 --> 00:05:02.390 align:start position:0%
and
each<00:05:00.080><c> list</c><00:05:00.400><c> element</c><00:05:00.800><c> has</c><00:05:01.039><c> a</c><00:05:01.600><c> some</c><00:05:01.840><c> data</c><00:05:02.160><c> in</c><00:05:02.240><c> it</c>

00:05:02.390 --> 00:05:02.400 align:start position:0%
each list element has a some data in it
 

00:05:02.400 --> 00:05:04.150 align:start position:0%
each list element has a some data in it
we'll<00:05:02.560><c> just</c><00:05:02.720><c> say</c><00:05:02.880><c> it's</c><00:05:03.039><c> a</c><00:05:03.120><c> string</c><00:05:03.520><c> like</c>

00:05:04.150 --> 00:05:04.160 align:start position:0%
we'll just say it's a string like
 

00:05:04.160 --> 00:05:07.510 align:start position:0%
we'll just say it's a string like
you<00:05:04.320><c> know</c><00:05:06.000><c> hello</c><00:05:06.639><c> is</c><00:05:06.800><c> the</c><00:05:06.880><c> sort</c><00:05:07.120><c> of</c>

00:05:07.510 --> 00:05:07.520 align:start position:0%
you know hello is the sort of
 

00:05:07.520 --> 00:05:10.070 align:start position:0%
you know hello is the sort of
data<00:05:07.840><c> in</c><00:05:07.919><c> this</c><00:05:08.160><c> element</c><00:05:09.360><c> and</c><00:05:09.520><c> each</c><00:05:09.680><c> element</c>

00:05:10.070 --> 00:05:10.080 align:start position:0%
data in this element and each element
 

00:05:10.080 --> 00:05:12.230 align:start position:0%
data in this element and each element
also<00:05:10.320><c> has</c><00:05:10.479><c> a</c><00:05:10.560><c> next</c><00:05:10.880><c> pointer</c>

00:05:12.230 --> 00:05:12.240 align:start position:0%
also has a next pointer
 

00:05:12.240 --> 00:05:19.189 align:start position:0%
also has a next pointer
that<00:05:13.919><c> points</c><00:05:14.560><c> the</c><00:05:14.720><c> next</c><00:05:14.880><c> list</c><00:05:15.199><c> element</c>

00:05:19.189 --> 00:05:19.199 align:start position:0%
 
 

00:05:19.199 --> 00:05:21.510 align:start position:0%
 
and<00:05:19.280><c> then</c><00:05:19.520><c> finally</c><00:05:19.919><c> there's</c><00:05:20.160><c> a</c><00:05:20.880><c> pointer</c><00:05:21.280><c> that</c>

00:05:21.510 --> 00:05:21.520 align:start position:0%
and then finally there's a pointer that
 

00:05:21.520 --> 00:05:23.189 align:start position:0%
and then finally there's a pointer that
points<00:05:21.919><c> to</c>

00:05:23.189 --> 00:05:23.199 align:start position:0%
points to
 

00:05:23.199 --> 00:05:26.390 align:start position:0%
points to
zero<00:05:23.520><c> to</c><00:05:23.600><c> mark</c><00:05:23.759><c> the</c><00:05:23.919><c> answer</c><00:05:25.520><c> um</c><00:05:26.160><c> very</c>

00:05:26.390 --> 00:05:26.400 align:start position:0%
zero to mark the answer um very
 

00:05:26.400 --> 00:05:28.390 align:start position:0%
zero to mark the answer um very
straightforward

00:05:28.390 --> 00:05:28.400 align:start position:0%
straightforward
 

00:05:28.400 --> 00:05:29.670 align:start position:0%
straightforward
um<00:05:28.639><c> and</c><00:05:28.800><c> again</c><00:05:28.960><c> we're</c><00:05:29.120><c> going</c><00:05:29.199><c> to</c><00:05:29.280><c> assume</c><00:05:29.520><c> that</c>

00:05:29.670 --> 00:05:29.680 align:start position:0%
um and again we're going to assume that
 

00:05:29.680 --> 00:05:31.270 align:start position:0%
um and again we're going to assume that
most<00:05:30.160><c> uses</c><00:05:30.560><c> of</c><00:05:30.639><c> this</c><00:05:30.880><c> list</c><00:05:31.120><c> that</c><00:05:31.199><c> we're</c>

00:05:31.270 --> 00:05:31.280 align:start position:0%
most uses of this list that we're
 

00:05:31.280 --> 00:05:33.350 align:start position:0%
most uses of this list that we're
interested<00:05:31.680><c> in</c><00:05:31.840><c> are</c><00:05:32.080><c> just</c><00:05:32.320><c> reads</c>

00:05:33.350 --> 00:05:33.360 align:start position:0%
interested in are just reads
 

00:05:33.360 --> 00:05:35.990 align:start position:0%
interested in are just reads
you<00:05:33.440><c> know</c><00:05:33.600><c> the</c><00:05:34.800><c> the</c><00:05:35.280><c> kernel</c><00:05:35.600><c> thread</c><00:05:35.840><c> or</c>

00:05:35.990 --> 00:05:36.000 align:start position:0%
you know the the kernel thread or
 

00:05:36.000 --> 00:05:37.510 align:start position:0%
you know the the kernel thread or
whatever<00:05:36.240><c> it</c><00:05:36.320><c> is</c><00:05:36.400><c> that's</c><00:05:36.639><c> using</c><00:05:36.880><c> this</c><00:05:37.120><c> list</c>

00:05:37.510 --> 00:05:37.520 align:start position:0%
whatever it is that's using this list
 

00:05:37.520 --> 00:05:38.790 align:start position:0%
whatever it is that's using this list
it's<00:05:37.600><c> just</c><00:05:37.759><c> scanning</c><00:05:38.160><c> a</c><00:05:38.240><c> list</c><00:05:38.479><c> looking</c><00:05:38.639><c> for</c>

00:05:38.790 --> 00:05:38.800 align:start position:0%
it's just scanning a list looking for
 

00:05:38.800 --> 00:05:40.150 align:start position:0%
it's just scanning a list looking for
something<00:05:39.039><c> it's</c><00:05:39.120><c> not</c><00:05:39.280><c> trying</c><00:05:39.520><c> to</c><00:05:39.600><c> modify</c><00:05:40.000><c> the</c>

00:05:40.150 --> 00:05:40.160 align:start position:0%
something it's not trying to modify the
 

00:05:40.160 --> 00:05:41.510 align:start position:0%
something it's not trying to modify the
list

00:05:41.510 --> 00:05:41.520 align:start position:0%
list
 

00:05:41.520 --> 00:05:44.070 align:start position:0%
list
and<00:05:41.840><c> occasional</c><00:05:42.479><c> writers</c><00:05:43.039><c> though</c><00:05:43.759><c> you</c><00:05:43.919><c> know</c>

00:05:44.070 --> 00:05:44.080 align:start position:0%
and occasional writers though you know
 

00:05:44.080 --> 00:05:45.189 align:start position:0%
and occasional writers though you know
if<00:05:44.320><c> all</c>

00:05:45.189 --> 00:05:45.199 align:start position:0%
if all
 

00:05:45.199 --> 00:05:47.749 align:start position:0%
if all
if<00:05:45.440><c> there</c><00:05:45.520><c> were</c><00:05:45.759><c> zero</c><00:05:46.160><c> writers</c><00:05:46.880><c> ever</c><00:05:47.600><c> we</c>

00:05:47.749 --> 00:05:47.759 align:start position:0%
if there were zero writers ever we
 

00:05:47.759 --> 00:05:49.029 align:start position:0%
if there were zero writers ever we
wouldn't<00:05:48.000><c> need</c><00:05:48.160><c> to</c><00:05:48.400><c> have</c><00:05:48.560><c> to</c><00:05:48.639><c> worry</c><00:05:48.880><c> about</c>

00:05:49.029 --> 00:05:49.039 align:start position:0%
wouldn't need to have to worry about
 

00:05:49.039 --> 00:05:50.710 align:start position:0%
wouldn't need to have to worry about
this<00:05:49.199><c> at</c><00:05:49.360><c> all</c><00:05:49.600><c> because</c><00:05:49.840><c> it'd</c><00:05:49.919><c> be</c><00:05:50.080><c> a</c>

00:05:50.710 --> 00:05:50.720 align:start position:0%
this at all because it'd be a
 

00:05:50.720 --> 00:05:52.870 align:start position:0%
this at all because it'd be a
completely<00:05:51.199><c> static</c><00:05:51.600><c> list</c><00:05:51.840><c> never</c><00:05:52.160><c> changes</c><00:05:52.720><c> we</c>

00:05:52.870 --> 00:05:52.880 align:start position:0%
completely static list never changes we
 

00:05:52.880 --> 00:05:54.150 align:start position:0%
completely static list never changes we
can<00:05:52.960><c> read</c><00:05:53.199><c> it</c><00:05:53.280><c> freely</c>

00:05:54.150 --> 00:05:54.160 align:start position:0%
can read it freely
 

00:05:54.160 --> 00:05:55.430 align:start position:0%
can read it freely
but<00:05:54.320><c> we're</c><00:05:54.479><c> going</c><00:05:54.560><c> to</c><00:05:54.720><c> imagine</c><00:05:55.039><c> that</c><00:05:55.280><c> every</c>

00:05:55.430 --> 00:05:55.440 align:start position:0%
but we're going to imagine that every
 

00:05:55.440 --> 00:05:56.790 align:start position:0%
but we're going to imagine that every
once<00:05:55.680><c> in</c><00:05:55.759><c> a</c><00:05:55.840><c> while</c><00:05:56.000><c> somebody</c><00:05:56.319><c> comes</c><00:05:56.479><c> along</c><00:05:56.720><c> and</c>

00:05:56.790 --> 00:05:56.800 align:start position:0%
once in a while somebody comes along and
 

00:05:56.800 --> 00:05:58.469 align:start position:0%
once in a while somebody comes along and
wants<00:05:57.039><c> to</c><00:05:57.120><c> write</c><00:05:57.360><c> the</c><00:05:57.520><c> list</c><00:05:57.759><c> so</c><00:05:57.919><c> that</c><00:05:58.080><c> may</c><00:05:58.240><c> mean</c>

00:05:58.469 --> 00:05:58.479 align:start position:0%
wants to write the list so that may mean
 

00:05:58.479 --> 00:05:59.270 align:start position:0%
wants to write the list so that may mean
that

00:05:59.270 --> 00:05:59.280 align:start position:0%
that
 

00:05:59.280 --> 00:06:02.230 align:start position:0%
that
some<00:05:59.520><c> other</c><00:05:59.759><c> thread</c><00:06:00.160><c> wants</c><00:06:00.400><c> to</c><00:06:00.639><c> change</c><00:06:02.080><c> the</c>

00:06:02.230 --> 00:06:02.240 align:start position:0%
some other thread wants to change the
 

00:06:02.240 --> 00:06:04.309 align:start position:0%
some other thread wants to change the
data<00:06:02.560><c> stored</c><00:06:02.800><c> in</c><00:06:02.880><c> the</c><00:06:02.960><c> list</c><00:06:03.199><c> element</c><00:06:03.600><c> or</c><00:06:03.680><c> maybe</c>

00:06:04.309 --> 00:06:04.319 align:start position:0%
data stored in the list element or maybe
 

00:06:04.319 --> 00:06:07.270 align:start position:0%
data stored in the list element or maybe
delete<00:06:04.800><c> an</c><00:06:04.960><c> element</c><00:06:05.600><c> or</c><00:06:05.680><c> maybe</c><00:06:06.479><c> insert</c><00:06:06.960><c> a</c><00:06:07.039><c> new</c>

00:06:07.270 --> 00:06:07.280 align:start position:0%
delete an element or maybe insert a new
 

00:06:07.280 --> 00:06:08.950 align:start position:0%
delete an element or maybe insert a new
element<00:06:07.600><c> somewhere</c>

00:06:08.950 --> 00:06:08.960 align:start position:0%
element somewhere
 

00:06:08.960 --> 00:06:11.430 align:start position:0%
element somewhere
so<00:06:09.120><c> even</c><00:06:09.360><c> though</c><00:06:09.520><c> it's</c><00:06:09.840><c> we're</c><00:06:10.400><c> aiming</c><00:06:10.720><c> at</c>

00:06:11.430 --> 00:06:11.440 align:start position:0%
so even though it's we're aiming at
 

00:06:11.440 --> 00:06:12.550 align:start position:0%
so even though it's we're aiming at
mostly

00:06:12.550 --> 00:06:12.560 align:start position:0%
mostly
 

00:06:12.560 --> 00:06:14.309 align:start position:0%
mostly
reads<00:06:12.960><c> we</c><00:06:13.039><c> do</c><00:06:13.199><c> have</c><00:06:13.360><c> to</c><00:06:13.440><c> worry</c><00:06:13.680><c> about</c><00:06:13.919><c> rights</c>

00:06:14.309 --> 00:06:14.319 align:start position:0%
reads we do have to worry about rights
 

00:06:14.319 --> 00:06:15.909 align:start position:0%
reads we do have to worry about rights
we<00:06:14.479><c> need</c><00:06:14.639><c> to</c><00:06:14.720><c> make</c><00:06:14.880><c> the</c><00:06:14.960><c> read</c><00:06:15.360><c> safe</c><00:06:15.680><c> in</c><00:06:15.840><c> the</c>

00:06:15.909 --> 00:06:15.919 align:start position:0%
we need to make the read safe in the
 

00:06:15.919 --> 00:06:19.189 align:start position:0%
we need to make the read safe in the
face<00:06:16.160><c> of</c><00:06:16.240><c> rights</c>

00:06:19.189 --> 00:06:19.199 align:start position:0%
 
 

00:06:19.199 --> 00:06:21.510 align:start position:0%
 
and<00:06:19.280><c> of</c><00:06:19.360><c> course</c><00:06:19.520><c> in</c><00:06:19.759><c> xv6</c><00:06:20.240><c> we</c><00:06:20.400><c> just</c><00:06:20.560><c> have</c><00:06:20.639><c> a</c><00:06:20.800><c> lock</c>

00:06:21.510 --> 00:06:21.520 align:start position:0%
and of course in xv6 we just have a lock
 

00:06:21.520 --> 00:06:22.629 align:start position:0%
and of course in xv6 we just have a lock
protecting<00:06:22.000><c> this</c><00:06:22.240><c> list</c>

00:06:22.629 --> 00:06:22.639 align:start position:0%
protecting this list
 

00:06:22.639 --> 00:06:24.469 align:start position:0%
protecting this list
and<00:06:22.800><c> a</c><00:06:22.960><c> reader</c><00:06:23.520><c> now</c><00:06:23.680><c> you</c><00:06:23.759><c> know</c><00:06:23.919><c> not</c><00:06:24.080><c> only</c><00:06:24.240><c> would</c>

00:06:24.469 --> 00:06:24.479 align:start position:0%
and a reader now you know not only would
 

00:06:24.479 --> 00:06:26.390 align:start position:0%
and a reader now you know not only would
writers<00:06:24.880><c> in</c><00:06:25.039><c> xv6</c><00:06:25.520><c> not</c><00:06:25.680><c> only</c><00:06:25.840><c> would</c><00:06:26.000><c> writers</c>

00:06:26.390 --> 00:06:26.400 align:start position:0%
writers in xv6 not only would writers
 

00:06:26.400 --> 00:06:27.510 align:start position:0%
writers in xv6 not only would writers
have<00:06:26.560><c> to</c><00:06:26.639><c> acquire</c><00:06:26.960><c> the</c><00:06:27.120><c> lock</c>

00:06:27.510 --> 00:06:27.520 align:start position:0%
have to acquire the lock
 

00:06:27.520 --> 00:06:28.950 align:start position:0%
have to acquire the lock
but<00:06:27.759><c> readers</c><00:06:28.080><c> would</c><00:06:28.240><c> have</c><00:06:28.400><c> to</c><00:06:28.479><c> acquire</c><00:06:28.880><c> the</c>

00:06:28.950 --> 00:06:28.960 align:start position:0%
but readers would have to acquire the
 

00:06:28.960 --> 00:06:31.270 align:start position:0%
but readers would have to acquire the
lock<00:06:29.280><c> too</c><00:06:30.080><c> because</c><00:06:30.479><c> we've</c><00:06:30.560><c> got</c><00:06:30.720><c> to</c><00:06:30.800><c> rule</c><00:06:31.120><c> out</c>

00:06:31.270 --> 00:06:31.280 align:start position:0%
lock too because we've got to rule out
 

00:06:31.280 --> 00:06:32.710 align:start position:0%
lock too because we've got to rule out
the<00:06:31.360><c> situation</c><00:06:32.000><c> in</c><00:06:32.080><c> which</c>

00:06:32.710 --> 00:06:32.720 align:start position:0%
the situation in which
 

00:06:32.720 --> 00:06:34.629 align:start position:0%
the situation in which
while<00:06:32.960><c> we're</c><00:06:33.199><c> reading</c><00:06:33.919><c> somebody's</c><00:06:34.400><c> actually</c>

00:06:34.629 --> 00:06:34.639 align:start position:0%
while we're reading somebody's actually
 

00:06:34.639 --> 00:06:35.909 align:start position:0%
while we're reading somebody's actually
modifying<00:06:35.120><c> the</c><00:06:35.199><c> list</c><00:06:35.440><c> because</c><00:06:35.600><c> that</c><00:06:35.759><c> could</c>

00:06:35.909 --> 00:06:35.919 align:start position:0%
modifying the list because that could
 

00:06:35.919 --> 00:06:37.590 align:start position:0%
modifying the list because that could
cause

00:06:37.590 --> 00:06:37.600 align:start position:0%
cause
 

00:06:37.600 --> 00:06:41.189 align:start position:0%
cause
sort<00:06:37.759><c> of</c><00:06:39.039><c> the</c><00:06:39.199><c> reader</c><00:06:39.520><c> to</c><00:06:39.680><c> see</c><00:06:40.080><c> a</c><00:06:40.319><c> half</c><00:06:40.639><c> updated</c>

00:06:41.189 --> 00:06:41.199 align:start position:0%
sort of the reader to see a half updated
 

00:06:41.199 --> 00:06:43.430 align:start position:0%
sort of the reader to see a half updated
value<00:06:41.680><c> or</c><00:06:41.919><c> follow</c><00:06:42.319><c> an</c><00:06:42.560><c> invalid</c><00:06:43.039><c> pointer</c><00:06:43.360><c> or</c>

00:06:43.430 --> 00:06:43.440 align:start position:0%
value or follow an invalid pointer or
 

00:06:43.440 --> 00:06:43.990 align:start position:0%
value or follow an invalid pointer or
something

00:06:43.990 --> 00:06:44.000 align:start position:0%
something
 

00:06:44.000 --> 00:06:48.550 align:start position:0%
something
so<00:06:44.160><c> in</c><00:06:44.240><c> xv6</c><00:06:44.639><c> we</c><00:06:44.800><c> have</c><00:06:44.960><c> locks</c><00:06:46.840><c> um</c>

00:06:48.550 --> 00:06:48.560 align:start position:0%
so in xv6 we have locks um
 

00:06:48.560 --> 00:06:50.870 align:start position:0%
so in xv6 we have locks um
but<00:06:49.199><c> uh</c><00:06:49.440><c> that</c><00:06:49.599><c> has</c><00:06:49.759><c> the</c><00:06:49.840><c> defect</c><00:06:50.240><c> that</c><00:06:50.560><c> if</c><00:06:50.800><c> the</c>

00:06:50.870 --> 00:06:50.880 align:start position:0%
but uh that has the defect that if the
 

00:06:50.880 --> 00:06:52.710 align:start position:0%
but uh that has the defect that if the
common<00:06:51.280><c> cases</c><00:06:51.680><c> there's</c><00:06:51.840><c> no</c><00:06:52.080><c> writers</c>

00:06:52.710 --> 00:06:52.720 align:start position:0%
common cases there's no writers
 

00:06:52.720 --> 00:06:55.430 align:start position:0%
common cases there's no writers
it<00:06:52.960><c> it</c><00:06:53.120><c> means</c><00:06:53.520><c> that</c><00:06:53.919><c> um</c><00:06:54.800><c> every</c><00:06:54.960><c> time</c><00:06:55.199><c> somebody</c>

00:06:55.430 --> 00:06:55.440 align:start position:0%
it it means that um every time somebody
 

00:06:55.440 --> 00:06:56.870 align:start position:0%
it it means that um every time somebody
comes<00:06:55.680><c> along</c><00:06:55.919><c> and</c><00:06:56.000><c> reads</c>

00:06:56.870 --> 00:06:56.880 align:start position:0%
comes along and reads
 

00:06:56.880 --> 00:07:00.070 align:start position:0%
comes along and reads
they<00:06:57.759><c> in</c><00:06:57.919><c> xv6</c><00:06:58.479><c> they</c><00:06:58.560><c> grab</c><00:06:58.800><c> an</c><00:06:58.960><c> exclusive</c>

00:07:00.070 --> 00:07:00.080 align:start position:0%
they in xv6 they grab an exclusive
 

00:07:00.080 --> 00:07:02.950 align:start position:0%
they in xv6 they grab an exclusive
like<00:07:00.319><c> xp6</c><00:07:00.800><c> spin</c><00:07:00.960><c> locks</c><00:07:01.199><c> are</c><00:07:01.360><c> exclusive</c><00:07:02.319><c> even</c>

00:07:02.950 --> 00:07:02.960 align:start position:0%
like xp6 spin locks are exclusive even
 

00:07:02.960 --> 00:07:04.469 align:start position:0%
like xp6 spin locks are exclusive even
if<00:07:03.120><c> you</c><00:07:03.199><c> have</c><00:07:03.360><c> just</c><00:07:03.599><c> two</c><00:07:03.840><c> readers</c>

00:07:04.469 --> 00:07:04.479 align:start position:0%
if you have just two readers
 

00:07:04.479 --> 00:07:07.110 align:start position:0%
if you have just two readers
only<00:07:04.800><c> one</c><00:07:05.039><c> of</c><00:07:05.120><c> them</c><00:07:05.280><c> can</c><00:07:05.440><c> proceed</c><00:07:05.840><c> at</c><00:07:06.000><c> a</c><00:07:06.080><c> time</c>

00:07:07.110 --> 00:07:07.120 align:start position:0%
only one of them can proceed at a time
 

00:07:07.120 --> 00:07:07.510 align:start position:0%
only one of them can proceed at a time
so

00:07:07.510 --> 00:07:07.520 align:start position:0%
so
 

00:07:07.520 --> 00:07:10.950 align:start position:0%
so
what<00:07:07.680><c> we'd</c><00:07:08.000><c> like</c><00:07:08.960><c> um</c><00:07:09.680><c> or</c><00:07:10.080><c> sort</c><00:07:10.240><c> of</c><00:07:10.400><c> one</c><00:07:10.639><c> way</c><00:07:10.800><c> to</c>

00:07:10.950 --> 00:07:10.960 align:start position:0%
what we'd like um or sort of one way to
 

00:07:10.960 --> 00:07:12.390 align:start position:0%
what we'd like um or sort of one way to
improve<00:07:11.280><c> this</c><00:07:11.440><c> situation</c>

00:07:12.390 --> 00:07:12.400 align:start position:0%
improve this situation
 

00:07:12.400 --> 00:07:15.189 align:start position:0%
improve this situation
would<00:07:12.639><c> be</c><00:07:12.800><c> to</c><00:07:12.960><c> have</c><00:07:13.120><c> a</c><00:07:13.520><c> new</c><00:07:13.759><c> kind</c><00:07:14.000><c> of</c><00:07:14.160><c> lock</c><00:07:14.639><c> that</c>

00:07:15.189 --> 00:07:15.199 align:start position:0%
would be to have a new kind of lock that
 

00:07:15.199 --> 00:07:15.990 align:start position:0%
would be to have a new kind of lock that
allows

00:07:15.990 --> 00:07:16.000 align:start position:0%
allows
 

00:07:16.000 --> 00:07:19.990 align:start position:0%
allows
multiple<00:07:16.479><c> readers</c><00:07:17.120><c> but</c><00:07:17.360><c> only</c><00:07:17.599><c> one</c><00:07:17.840><c> writer</c>

00:07:19.990 --> 00:07:20.000 align:start position:0%
multiple readers but only one writer
 

00:07:20.000 --> 00:07:22.070 align:start position:0%
multiple readers but only one writer
so<00:07:20.160><c> i'm</c><00:07:20.240><c> going</c><00:07:20.319><c> to</c><00:07:20.400><c> explore</c><00:07:20.800><c> those</c><00:07:21.039><c> next</c>

00:07:22.070 --> 00:07:22.080 align:start position:0%
so i'm going to explore those next
 

00:07:22.080 --> 00:07:23.589 align:start position:0%
so i'm going to explore those next
actually<00:07:22.960><c> both</c><00:07:23.199><c> because</c><00:07:23.360><c> they're</c>

00:07:23.589 --> 00:07:23.599 align:start position:0%
actually both because they're
 

00:07:23.599 --> 00:07:25.029 align:start position:0%
actually both because they're
interesting

00:07:25.029 --> 00:07:25.039 align:start position:0%
interesting
 

00:07:25.039 --> 00:07:28.070 align:start position:0%
interesting
and<00:07:25.360><c> because</c><00:07:25.759><c> they're</c><00:07:26.160><c> they</c><00:07:26.319><c> help</c><00:07:26.639><c> motivate</c>

00:07:28.070 --> 00:07:28.080 align:start position:0%
and because they're they help motivate
 

00:07:28.080 --> 00:07:30.150 align:start position:0%
and because they're they help motivate
the<00:07:28.240><c> need</c><00:07:28.479><c> for</c><00:07:28.720><c> rcu</c><00:07:29.440><c> which</c><00:07:29.680><c> we'll</c><00:07:29.759><c> talk</c><00:07:29.919><c> about</c>

00:07:30.150 --> 00:07:30.160 align:start position:0%
the need for rcu which we'll talk about
 

00:07:30.160 --> 00:07:31.909 align:start position:0%
the need for rcu which we'll talk about
in<00:07:30.479><c> a</c><00:07:30.639><c> little</c><00:07:30.800><c> while</c>

00:07:31.909 --> 00:07:31.919 align:start position:0%
in a little while
 

00:07:31.919 --> 00:07:33.909 align:start position:0%
in a little while
um<00:07:32.639><c> so</c><00:07:32.880><c> there's</c><00:07:33.039><c> this</c><00:07:33.199><c> notion</c><00:07:33.520><c> called</c><00:07:33.680><c> read</c>

00:07:33.909 --> 00:07:33.919 align:start position:0%
um so there's this notion called read
 

00:07:33.919 --> 00:07:37.830 align:start position:0%
um so there's this notion called read
write<00:07:34.240><c> locks</c>

00:07:37.830 --> 00:07:37.840 align:start position:0%
 
 

00:07:37.840 --> 00:07:39.589 align:start position:0%
 
and<00:07:38.400><c> the</c><00:07:38.560><c> interface</c><00:07:38.880><c> is</c><00:07:39.120><c> a</c><00:07:39.120><c> little</c><00:07:39.360><c> more</c>

00:07:39.589 --> 00:07:39.599 align:start position:0%
and the interface is a little more
 

00:07:39.599 --> 00:07:41.270 align:start position:0%
and the interface is a little more
complicated<00:07:40.240><c> than</c><00:07:40.400><c> the</c><00:07:40.639><c> spin</c><00:07:40.880><c> locks</c><00:07:41.120><c> we're</c>

00:07:41.270 --> 00:07:41.280 align:start position:0%
complicated than the spin locks we're
 

00:07:41.280 --> 00:07:41.990 align:start position:0%
complicated than the spin locks we're
used<00:07:41.520><c> to</c>

00:07:41.990 --> 00:07:42.000 align:start position:0%
used to
 

00:07:42.000 --> 00:07:43.589 align:start position:0%
used to
we're<00:07:42.160><c> going</c><00:07:42.240><c> to</c><00:07:42.400><c> imagine</c><00:07:42.800><c> that</c><00:07:43.199><c> there's</c><00:07:43.360><c> one</c>

00:07:43.589 --> 00:07:43.599 align:start position:0%
we're going to imagine that there's one
 

00:07:43.599 --> 00:07:45.589 align:start position:0%
we're going to imagine that there's one
set<00:07:43.759><c> of</c><00:07:43.919><c> call</c><00:07:44.240><c> that</c><00:07:44.720><c> you</c><00:07:44.960><c> call</c><00:07:45.120><c> if</c><00:07:45.280><c> you</c><00:07:45.440><c> just</c>

00:07:45.589 --> 00:07:45.599 align:start position:0%
set of call that you call if you just
 

00:07:45.599 --> 00:07:46.790 align:start position:0%
set of call that you call if you just
want<00:07:45.759><c> to</c><00:07:45.840><c> read</c><00:07:46.160><c> something</c>

00:07:46.790 --> 00:07:46.800 align:start position:0%
want to read something
 

00:07:46.800 --> 00:07:50.150 align:start position:0%
want to read something
so<00:07:46.960><c> we're</c><00:07:47.120><c> going</c><00:07:47.199><c> to</c><00:07:47.360><c> imagine</c><00:07:47.759><c> an</c><00:07:48.080><c> r</c><00:07:48.319><c> lock</c><00:07:48.720><c> call</c>

00:07:50.150 --> 00:07:50.160 align:start position:0%
so we're going to imagine an r lock call
 

00:07:50.160 --> 00:07:53.589 align:start position:0%
so we're going to imagine an r lock call
and<00:07:50.319><c> you</c><00:07:50.479><c> pass</c><00:07:50.800><c> it</c><00:07:50.960><c> a</c><00:07:51.919><c> a</c><00:07:52.080><c> lock</c>

00:07:53.589 --> 00:07:53.599 align:start position:0%
and you pass it a a lock
 

00:07:53.599 --> 00:07:57.270 align:start position:0%
and you pass it a a lock
and<00:07:53.759><c> then</c><00:07:54.000><c> also</c><00:07:54.240><c> an</c><00:07:54.400><c> r</c><00:07:54.720><c> unlock</c><00:07:55.120><c> call</c>

00:07:57.270 --> 00:07:57.280 align:start position:0%
and then also an r unlock call
 

00:07:57.280 --> 00:08:00.469 align:start position:0%
and then also an r unlock call
um<00:07:59.199><c> and</c><00:07:59.440><c> readers</c><00:07:59.759><c> call</c><00:08:00.000><c> these</c><00:08:00.240><c> and</c><00:08:00.319><c> then</c>

00:08:00.469 --> 00:08:00.479 align:start position:0%
um and readers call these and then
 

00:08:00.479 --> 00:08:01.510 align:start position:0%
um and readers call these and then
there's<00:08:00.639><c> a</c><00:08:00.800><c> write</c>

00:08:01.510 --> 00:08:01.520 align:start position:0%
there's a write
 

00:08:01.520 --> 00:08:04.790 align:start position:0%
there's a write
block<00:08:01.919><c> call</c><00:08:02.400><c> and</c><00:08:02.639><c> a</c><00:08:02.800><c> write</c><00:08:03.120><c> unlock</c><00:08:03.520><c> call</c><00:08:03.840><c> also</c>

00:08:04.790 --> 00:08:04.800 align:start position:0%
block call and a write unlock call also
 

00:08:04.800 --> 00:08:07.909 align:start position:0%
block call and a write unlock call also
and<00:08:05.520><c> the</c><00:08:05.680><c> semantics</c><00:08:06.319><c> are</c>

00:08:07.909 --> 00:08:07.919 align:start position:0%
and the semantics are
 

00:08:07.919 --> 00:08:10.950 align:start position:0%
and the semantics are
that<00:08:08.960><c> you</c><00:08:09.120><c> can</c><00:08:09.360><c> either</c><00:08:10.400><c> have</c>

00:08:10.950 --> 00:08:10.960 align:start position:0%
that you can either have
 

00:08:10.960 --> 00:08:14.390 align:start position:0%
that you can either have
multiple<00:08:11.680><c> readers</c><00:08:13.199><c> acquire</c><00:08:13.759><c> the</c><00:08:13.919><c> block</c><00:08:14.240><c> for</c>

00:08:14.390 --> 00:08:14.400 align:start position:0%
multiple readers acquire the block for
 

00:08:14.400 --> 00:08:15.589 align:start position:0%
multiple readers acquire the block for
reading

00:08:15.589 --> 00:08:15.599 align:start position:0%
reading
 

00:08:15.599 --> 00:08:19.029 align:start position:0%
reading
so<00:08:15.840><c> we</c><00:08:15.919><c> do</c><00:08:16.319><c> then</c><00:08:16.560><c> would</c><00:08:16.800><c> get</c><00:08:17.039><c> parallelism</c><00:08:18.160><c> or</c>

00:08:19.029 --> 00:08:19.039 align:start position:0%
so we do then would get parallelism or
 

00:08:19.039 --> 00:08:22.070 align:start position:0%
so we do then would get parallelism or
you<00:08:19.199><c> can</c><00:08:19.360><c> have</c><00:08:19.680><c> exactly</c><00:08:20.240><c> one</c><00:08:20.560><c> writer</c>

00:08:22.070 --> 00:08:22.080 align:start position:0%
you can have exactly one writer
 

00:08:22.080 --> 00:08:24.390 align:start position:0%
you can have exactly one writer
have<00:08:22.319><c> acquired</c><00:08:22.800><c> the</c><00:08:22.960><c> lock</c><00:08:23.759><c> but</c><00:08:23.919><c> you</c><00:08:24.080><c> can</c><00:08:24.160><c> never</c>

00:08:24.390 --> 00:08:24.400 align:start position:0%
have acquired the lock but you can never
 

00:08:24.400 --> 00:08:25.749 align:start position:0%
have acquired the lock but you can never
have<00:08:24.479><c> a</c><00:08:24.560><c> mix</c><00:08:25.039><c> you</c><00:08:25.120><c> can</c><00:08:25.199><c> never</c>

00:08:25.749 --> 00:08:25.759 align:start position:0%
have a mix you can never
 

00:08:25.759 --> 00:08:28.469 align:start position:0%
have a mix you can never
be<00:08:25.919><c> in</c><00:08:26.000><c> this</c><00:08:26.240><c> the</c><00:08:27.039><c> locks</c><00:08:27.440><c> rule</c><00:08:27.759><c> out</c><00:08:27.919><c> the</c><00:08:28.000><c> possib</c>

00:08:28.469 --> 00:08:28.479 align:start position:0%
be in this the locks rule out the possib
 

00:08:28.479 --> 00:08:28.869 align:start position:0%
be in this the locks rule out the possib
read

00:08:28.869 --> 00:08:28.879 align:start position:0%
read
 

00:08:28.879 --> 00:08:30.390 align:start position:0%
read
read<00:08:29.120><c> write</c><00:08:29.360><c> blocks</c><00:08:29.919><c> rule</c><00:08:30.160><c> out</c><00:08:30.319><c> the</c>

00:08:30.390 --> 00:08:30.400 align:start position:0%
read write blocks rule out the
 

00:08:30.400 --> 00:08:32.230 align:start position:0%
read write blocks rule out the
possibility<00:08:31.039><c> of</c><00:08:31.520><c> somebody</c><00:08:31.840><c> having</c>

00:08:32.230 --> 00:08:32.240 align:start position:0%
possibility of somebody having
 

00:08:32.240 --> 00:08:33.990 align:start position:0%
possibility of somebody having
locked<00:08:32.560><c> the</c><00:08:32.640><c> lock</c><00:08:32.880><c> for</c><00:08:33.039><c> writing</c><00:08:33.519><c> and</c><00:08:33.680><c> also</c>

00:08:33.990 --> 00:08:34.000 align:start position:0%
locked the lock for writing and also
 

00:08:34.000 --> 00:08:35.589 align:start position:0%
locked the lock for writing and also
reading<00:08:34.240><c> at</c><00:08:34.320><c> the</c><00:08:34.479><c> same</c><00:08:34.719><c> time</c><00:08:35.039><c> you</c><00:08:35.200><c> either</c><00:08:35.440><c> get</c>

00:08:35.589 --> 00:08:35.599 align:start position:0%
reading at the same time you either get
 

00:08:35.599 --> 00:08:36.550 align:start position:0%
reading at the same time you either get
one<00:08:35.760><c> writer</c>

00:08:36.550 --> 00:08:36.560 align:start position:0%
one writer
 

00:08:36.560 --> 00:08:41.029 align:start position:0%
one writer
or<00:08:36.800><c> lots</c><00:08:37.039><c> of</c><00:08:37.120><c> readers</c><00:08:38.080><c> but</c><00:08:38.240><c> nothing</c><00:08:38.560><c> else</c><00:08:39.360><c> um</c>

00:08:41.029 --> 00:08:41.039 align:start position:0%
or lots of readers but nothing else um
 

00:08:41.039 --> 00:08:44.710 align:start position:0%
or lots of readers but nothing else um
so<00:08:41.200><c> that's</c><00:08:41.440><c> the</c><00:08:42.479><c> uh</c><00:08:42.719><c> question</c><00:08:43.440><c> yes</c>

00:08:44.710 --> 00:08:44.720 align:start position:0%
so that's the uh question yes
 

00:08:44.720 --> 00:08:47.829 align:start position:0%
so that's the uh question yes
uh<00:08:44.959><c> this</c><00:08:45.200><c> may</c><00:08:45.360><c> be</c><00:08:45.760><c> an</c><00:08:46.240><c> implementation</c><00:08:46.959><c> detail</c>

00:08:47.829 --> 00:08:47.839 align:start position:0%
uh this may be an implementation detail
 

00:08:47.839 --> 00:08:50.230 align:start position:0%
uh this may be an implementation detail
but<00:08:48.080><c> what</c><00:08:48.320><c> kind</c><00:08:48.560><c> of</c><00:08:48.800><c> mechanisms</c><00:08:49.519><c> does</c><00:08:49.760><c> this</c>

00:08:50.230 --> 00:08:50.240 align:start position:0%
but what kind of mechanisms does this
 

00:08:50.240 --> 00:08:51.829 align:start position:0%
but what kind of mechanisms does this
locking<00:08:50.640><c> scheme</c><00:08:51.040><c> put</c><00:08:51.279><c> in</c><00:08:51.440><c> place</c>

00:08:51.829 --> 00:08:51.839 align:start position:0%
locking scheme put in place
 

00:08:51.839 --> 00:08:55.269 align:start position:0%
locking scheme put in place
to<00:08:52.000><c> prevent</c><00:08:53.440><c> uh</c><00:08:54.080><c> someone</c><00:08:54.720><c> writing</c>

00:08:55.269 --> 00:08:55.279 align:start position:0%
to prevent uh someone writing
 

00:08:55.279 --> 00:08:57.430 align:start position:0%
to prevent uh someone writing
while<00:08:55.519><c> they</c><00:08:55.760><c> hold</c><00:08:56.080><c> a</c><00:08:56.240><c> read</c><00:08:56.480><c> lock</c><00:08:57.120><c> nothing</c>

00:08:57.430 --> 00:08:57.440 align:start position:0%
while they hold a read lock nothing
 

00:08:57.440 --> 00:08:59.430 align:start position:0%
while they hold a read lock nothing
nothing<00:08:57.760><c> it's</c><00:08:57.839><c> just</c><00:08:58.000><c> like</c><00:08:58.240><c> xp6</c><00:08:58.800><c> locks</c>

00:08:59.430 --> 00:08:59.440 align:start position:0%
nothing it's just like xp6 locks
 

00:08:59.440 --> 00:09:01.750 align:start position:0%
nothing it's just like xp6 locks
they're<00:08:59.680><c> completely</c><00:09:01.279><c> we're</c><00:09:01.440><c> talking</c><00:09:01.600><c> about</c>

00:09:01.750 --> 00:09:01.760 align:start position:0%
they're completely we're talking about
 

00:09:01.760 --> 00:09:04.230 align:start position:0%
they're completely we're talking about
kernel<00:09:02.080><c> code</c><00:09:02.399><c> written</c><00:09:02.640><c> by</c><00:09:02.880><c> trusted</c>

00:09:04.230 --> 00:09:04.240 align:start position:0%
kernel code written by trusted
 

00:09:04.240 --> 00:09:06.550 align:start position:0%
kernel code written by trusted
responsible<00:09:04.880><c> developers</c><00:09:05.600><c> and</c><00:09:05.839><c> so</c><00:09:06.160><c> just</c><00:09:06.399><c> like</c>

00:09:06.550 --> 00:09:06.560 align:start position:0%
responsible developers and so just like
 

00:09:06.560 --> 00:09:08.310 align:start position:0%
responsible developers and so just like
spinlocks<00:09:07.120><c> in</c><00:09:07.279><c> xv6</c>

00:09:08.310 --> 00:09:08.320 align:start position:0%
spinlocks in xv6
 

00:09:08.320 --> 00:09:09.670 align:start position:0%
spinlocks in xv6
if<00:09:08.480><c> the</c><00:09:08.640><c> code</c><00:09:08.880><c> that's</c><00:09:09.040><c> using</c><00:09:09.279><c> the</c><00:09:09.360><c> lock</c><00:09:09.600><c> is</c>

00:09:09.670 --> 00:09:09.680 align:start position:0%
if the code that's using the lock is
 

00:09:09.680 --> 00:09:12.470 align:start position:0%
if the code that's using the lock is
incorrect<00:09:11.279><c> it's</c><00:09:11.440><c> incorrect</c>

00:09:12.470 --> 00:09:12.480 align:start position:0%
incorrect it's incorrect
 

00:09:12.480 --> 00:09:16.470 align:start position:0%
incorrect it's incorrect
there's<00:09:12.720><c> no</c><00:09:13.040><c> okay</c><00:09:15.279><c> and</c><00:09:15.519><c> this</c><00:09:15.680><c> is</c><00:09:15.839><c> the</c><00:09:15.920><c> way</c>

00:09:16.470 --> 00:09:16.480 align:start position:0%
there's no okay and this is the way
 

00:09:16.480 --> 00:09:19.430 align:start position:0%
there's no okay and this is the way
you<00:09:16.640><c> know</c><00:09:16.800><c> typical</c><00:09:17.200><c> kernels</c><00:09:17.600><c> are</c><00:09:17.680><c> written</c><00:09:19.279><c> you</c>

00:09:19.430 --> 00:09:19.440 align:start position:0%
you know typical kernels are written you
 

00:09:19.440 --> 00:09:22.070 align:start position:0%
you know typical kernels are written you
just<00:09:19.600><c> have</c><00:09:19.760><c> to</c><00:09:19.920><c> assume</c><00:09:20.839><c> that</c>

00:09:22.070 --> 00:09:22.080 align:start position:0%
just have to assume that
 

00:09:22.080 --> 00:09:23.190 align:start position:0%
just have to assume that
people<00:09:22.320><c> developing</c><00:09:22.720><c> the</c><00:09:22.800><c> kernel</c><00:09:23.120><c> are</c>

00:09:23.190 --> 00:09:23.200 align:start position:0%
people developing the kernel are
 

00:09:23.200 --> 00:09:26.070 align:start position:0%
people developing the kernel are
following<00:09:23.519><c> their</c><00:09:23.680><c> own</c><00:09:23.839><c> rules</c>

00:09:26.070 --> 00:09:26.080 align:start position:0%
following their own rules
 

00:09:26.080 --> 00:09:27.910 align:start position:0%
following their own rules
okay<00:09:26.720><c> okay</c><00:09:26.959><c> and</c><00:09:27.040><c> again</c><00:09:27.279><c> the</c><00:09:27.360><c> reason</c><00:09:27.600><c> why</c><00:09:27.760><c> we</c>

00:09:27.910 --> 00:09:27.920 align:start position:0%
okay okay and again the reason why we
 

00:09:27.920 --> 00:09:29.430 align:start position:0%
okay okay and again the reason why we
care<00:09:28.399><c> is</c><00:09:28.560><c> that</c>

00:09:29.430 --> 00:09:29.440 align:start position:0%
care is that
 

00:09:29.440 --> 00:09:32.230 align:start position:0%
care is that
if<00:09:29.600><c> we</c><00:09:29.760><c> have</c><00:09:29.920><c> a</c><00:09:30.080><c> mostly</c><00:09:30.560><c> a</c><00:09:30.640><c> read</c><00:09:30.959><c> mostly</c><00:09:31.920><c> data</c>

00:09:32.230 --> 00:09:32.240 align:start position:0%
if we have a mostly a read mostly data
 

00:09:32.240 --> 00:09:34.230 align:start position:0%
if we have a mostly a read mostly data
structure<00:09:32.640><c> we'd</c><00:09:32.880><c> love</c><00:09:33.040><c> to</c><00:09:33.200><c> have</c>

00:09:34.230 --> 00:09:34.240 align:start position:0%
structure we'd love to have
 

00:09:34.240 --> 00:09:35.750 align:start position:0%
structure we'd love to have
multiple<00:09:34.640><c> readers</c><00:09:34.959><c> be</c><00:09:35.120><c> able</c><00:09:35.279><c> to</c><00:09:35.360><c> use</c><00:09:35.519><c> it</c><00:09:35.680><c> at</c>

00:09:35.750 --> 00:09:35.760 align:start position:0%
multiple readers be able to use it at
 

00:09:35.760 --> 00:09:37.829 align:start position:0%
multiple readers be able to use it at
the<00:09:35.920><c> same</c><00:09:36.320><c> time</c><00:09:36.720><c> to</c><00:09:36.959><c> get</c>

00:09:37.829 --> 00:09:37.839 align:start position:0%
the same time to get
 

00:09:37.839 --> 00:09:41.030 align:start position:0%
the same time to get
genuine<00:09:38.880><c> speed</c><00:09:39.279><c> up</c><00:09:39.519><c> from</c><00:09:39.839><c> having</c>

00:09:41.030 --> 00:09:41.040 align:start position:0%
genuine speed up from having
 

00:09:41.040 --> 00:09:44.070 align:start position:0%
genuine speed up from having
multiple<00:09:41.440><c> cores</c>

00:09:44.070 --> 00:09:44.080 align:start position:0%
 
 

00:09:44.080 --> 00:09:47.509 align:start position:0%
 
all<00:09:44.240><c> right</c><00:09:44.640><c> so</c><00:09:45.519><c> um</c><00:09:46.640><c> if</c><00:09:46.800><c> there</c><00:09:46.880><c> were</c><00:09:47.040><c> no</c><00:09:47.200><c> problem</c>

00:09:47.509 --> 00:09:47.519 align:start position:0%
all right so um if there were no problem
 

00:09:47.519 --> 00:09:48.870 align:start position:0%
all right so um if there were no problem
here<00:09:47.680><c> this</c><00:09:47.839><c> would</c><00:09:48.000><c> just</c><00:09:48.160><c> be</c><00:09:48.240><c> the</c><00:09:48.399><c> answer</c><00:09:48.720><c> we</c>

00:09:48.870 --> 00:09:48.880 align:start position:0%
here this would just be the answer we
 

00:09:48.880 --> 00:09:51.910 align:start position:0%
here this would just be the answer we
wouldn't<00:09:49.200><c> have</c><00:09:49.360><c> need</c><00:09:49.680><c> to</c><00:09:49.920><c> read</c><00:09:50.080><c> today's</c><00:09:50.560><c> paper</c>

00:09:51.910 --> 00:09:51.920 align:start position:0%
wouldn't have need to read today's paper
 

00:09:51.920 --> 00:09:53.990 align:start position:0%
wouldn't have need to read today's paper
but<00:09:52.320><c> it</c><00:09:52.399><c> turns</c><00:09:52.720><c> out</c><00:09:52.959><c> that</c><00:09:53.360><c> if</c><00:09:53.519><c> you</c><00:09:53.600><c> dig</c><00:09:53.760><c> into</c>

00:09:53.990 --> 00:09:54.000 align:start position:0%
but it turns out that if you dig into
 

00:09:54.000 --> 00:09:56.630 align:start position:0%
but it turns out that if you dig into
the<00:09:54.080><c> details</c><00:09:54.399><c> of</c><00:09:54.480><c> what</c><00:09:54.640><c> actually</c><00:09:55.040><c> happens</c>

00:09:56.630 --> 00:09:56.640 align:start position:0%
the details of what actually happens
 

00:09:56.640 --> 00:09:59.110 align:start position:0%
the details of what actually happens
when<00:09:56.880><c> you</c><00:09:56.959><c> use</c><00:09:57.200><c> read</c><00:09:57.440><c> write</c><00:09:57.680><c> locks</c><00:09:58.640><c> especially</c>

00:09:59.110 --> 00:09:59.120 align:start position:0%
when you use read write locks especially
 

00:09:59.120 --> 00:09:59.829 align:start position:0%
when you use read write locks especially
for

00:09:59.829 --> 00:09:59.839 align:start position:0%
for
 

00:09:59.839 --> 00:10:02.389 align:start position:0%
for
data<00:10:00.080><c> that's</c><00:10:00.320><c> actually</c><00:10:00.640><c> read</c><00:10:00.880><c> a</c><00:10:00.959><c> lot</c><00:10:02.160><c> there's</c>

00:10:02.389 --> 00:10:02.399 align:start position:0%
data that's actually read a lot there's
 

00:10:02.399 --> 00:10:03.590 align:start position:0%
data that's actually read a lot there's
some<00:10:02.560><c> problems</c>

00:10:03.590 --> 00:10:03.600 align:start position:0%
some problems
 

00:10:03.600 --> 00:10:05.990 align:start position:0%
some problems
and<00:10:03.920><c> in</c><00:10:04.079><c> order</c><00:10:04.320><c> to</c><00:10:05.120><c> see</c><00:10:05.360><c> what's</c><00:10:05.519><c> going</c><00:10:05.760><c> on</c><00:10:05.839><c> we</c>

00:10:05.990 --> 00:10:06.000 align:start position:0%
and in order to see what's going on we
 

00:10:06.000 --> 00:10:06.710 align:start position:0%
and in order to see what's going on we
actually<00:10:06.240><c> have</c><00:10:06.320><c> to</c><00:10:06.399><c> look</c><00:10:06.560><c> at</c><00:10:06.640><c> the</c>

00:10:06.710 --> 00:10:06.720 align:start position:0%
actually have to look at the
 

00:10:06.720 --> 00:10:09.430 align:start position:0%
actually have to look at the
implementation

00:10:09.430 --> 00:10:09.440 align:start position:0%
implementation
 

00:10:09.440 --> 00:10:15.110 align:start position:0%
implementation
linux<00:10:09.760><c> indeed</c><00:10:10.240><c> has</c><00:10:10.640><c> a</c><00:10:11.920><c> read</c><00:10:12.160><c> write</c><00:10:12.399><c> lock</c>

00:10:15.110 --> 00:10:15.120 align:start position:0%
 
 

00:10:15.120 --> 00:10:18.550 align:start position:0%
 
implementation<00:10:15.760><c> in</c><00:10:15.920><c> it</c><00:10:16.079><c> and</c><00:10:16.240><c> this</c><00:10:16.839><c> is</c><00:10:17.519><c> um</c>

00:10:18.550 --> 00:10:18.560 align:start position:0%
implementation in it and this is um
 

00:10:18.560 --> 00:10:22.230 align:start position:0%
implementation in it and this is um
a<00:10:18.720><c> kind</c><00:10:18.959><c> of</c><00:10:20.079><c> simplified</c><00:10:20.720><c> version</c><00:10:21.200><c> of</c><00:10:21.360><c> the</c>

00:10:22.230 --> 00:10:22.240 align:start position:0%
a kind of simplified version of the
 

00:10:22.240 --> 00:10:24.949 align:start position:0%
a kind of simplified version of the
linux<00:10:22.640><c> code</c><00:10:23.760><c> the</c><00:10:23.920><c> idea</c><00:10:24.320><c> is</c><00:10:24.399><c> that</c><00:10:24.560><c> we</c><00:10:24.720><c> have</c><00:10:24.880><c> a</c>

00:10:24.949 --> 00:10:24.959 align:start position:0%
linux code the idea is that we have a
 

00:10:24.959 --> 00:10:25.990 align:start position:0%
linux code the idea is that we have a
struct<00:10:25.440><c> rw</c>

00:10:25.990 --> 00:10:26.000 align:start position:0%
struct rw
 

00:10:26.000 --> 00:10:29.190 align:start position:0%
struct rw
lock<00:10:26.720><c> which</c><00:10:26.959><c> is</c><00:10:27.040><c> like</c><00:10:27.440><c> struck</c><00:10:27.760><c> lock</c><00:10:28.079><c> in</c><00:10:28.399><c> xv6</c>

00:10:29.190 --> 00:10:29.200 align:start position:0%
lock which is like struck lock in xv6
 

00:10:29.200 --> 00:10:32.230 align:start position:0%
lock which is like struck lock in xv6
and<00:10:29.279><c> it</c><00:10:29.360><c> has</c><00:10:29.519><c> a</c><00:10:29.680><c> count</c><00:10:30.000><c> in</c><00:10:30.160><c> it</c>

00:10:32.230 --> 00:10:32.240 align:start position:0%
and it has a count in it
 

00:10:32.240 --> 00:10:34.310 align:start position:0%
and it has a count in it
if<00:10:32.399><c> the</c><00:10:32.480><c> count</c><00:10:32.800><c> is</c><00:10:32.959><c> zero</c><00:10:33.600><c> that</c><00:10:33.839><c> means</c><00:10:34.000><c> that</c><00:10:34.160><c> the</c>

00:10:34.310 --> 00:10:34.320 align:start position:0%
if the count is zero that means that the
 

00:10:34.320 --> 00:10:35.910 align:start position:0%
if the count is zero that means that the
lock<00:10:34.560><c> is</c><00:10:34.720><c> not</c><00:10:34.880><c> held</c><00:10:35.120><c> by</c><00:10:35.279><c> anybody</c>

00:10:35.910 --> 00:10:35.920 align:start position:0%
lock is not held by anybody
 

00:10:35.920 --> 00:10:37.990 align:start position:0%
lock is not held by anybody
in<00:10:36.079><c> any</c><00:10:36.320><c> form</c><00:10:36.800><c> if</c><00:10:36.959><c> the</c><00:10:37.040><c> count</c><00:10:37.360><c> is</c><00:10:37.440><c> negative</c><00:10:37.760><c> one</c>

00:10:37.990 --> 00:10:38.000 align:start position:0%
in any form if the count is negative one
 

00:10:38.000 --> 00:10:41.030 align:start position:0%
in any form if the count is negative one
that<00:10:38.160><c> means</c><00:10:38.640><c> that</c><00:10:38.800><c> a</c><00:10:38.880><c> writer</c><00:10:39.200><c> has</c><00:10:39.440><c> it</c><00:10:39.519><c> locked</c>

00:10:41.030 --> 00:10:41.040 align:start position:0%
that means that a writer has it locked
 

00:10:41.040 --> 00:10:42.470 align:start position:0%
that means that a writer has it locked
and<00:10:41.200><c> if</c><00:10:41.360><c> the</c><00:10:41.440><c> count</c><00:10:41.680><c> is</c><00:10:41.760><c> greater</c><00:10:42.079><c> than</c><00:10:42.240><c> zero</c>

00:10:42.470 --> 00:10:42.480 align:start position:0%
and if the count is greater than zero
 

00:10:42.480 --> 00:10:44.230 align:start position:0%
and if the count is greater than zero
that<00:10:42.640><c> means</c><00:10:42.959><c> that</c><00:10:43.279><c> n</c>

00:10:44.230 --> 00:10:44.240 align:start position:0%
that means that n
 

00:10:44.240 --> 00:10:46.069 align:start position:0%
that means that n
readers<00:10:44.959><c> have</c><00:10:45.200><c> it</c><00:10:45.279><c> locked</c><00:10:45.680><c> and</c><00:10:45.760><c> we</c><00:10:45.839><c> need</c><00:10:46.000><c> to</c>

00:10:46.069 --> 00:10:46.079 align:start position:0%
readers have it locked and we need to
 

00:10:46.079 --> 00:10:47.430 align:start position:0%
readers have it locked and we need to
keep<00:10:46.320><c> track</c><00:10:46.560><c> of</c><00:10:46.720><c> them</c><00:10:46.880><c> because</c>

00:10:47.430 --> 00:10:47.440 align:start position:0%
keep track of them because
 

00:10:47.440 --> 00:10:48.949 align:start position:0%
keep track of them because
we<00:10:47.600><c> can</c><00:10:47.760><c> only</c><00:10:47.920><c> let</c><00:10:48.079><c> a</c><00:10:48.160><c> writer</c><00:10:48.560><c> in</c><00:10:48.720><c> if</c><00:10:48.800><c> the</c>

00:10:48.949 --> 00:10:48.959 align:start position:0%
we can only let a writer in if the
 

00:10:48.959 --> 00:10:58.790 align:start position:0%
we can only let a writer in if the
number<00:10:49.120><c> of</c><00:10:49.200><c> readers</c><00:10:49.680><c> descends</c><00:10:50.160><c> to</c><00:10:50.320><c> zero</c>

00:10:58.790 --> 00:10:58.800 align:start position:0%
 
 

00:10:58.800 --> 00:11:02.949 align:start position:0%
 
okay<00:10:58.959><c> so</c><00:10:59.120><c> somebody</c><00:10:59.440><c> asked</c><00:10:59.600><c> about</c><00:10:59.920><c> addings</c>

00:11:02.949 --> 00:11:02.959 align:start position:0%
 
 

00:11:02.959 --> 00:11:05.509 align:start position:0%
 
no<00:11:04.399><c> i'm</c><00:11:04.480><c> not</c><00:11:04.640><c> sure</c><00:11:04.800><c> if</c><00:11:04.880><c> there's</c><00:11:05.040><c> a</c><00:11:05.120><c> question</c><00:11:05.360><c> in</c>

00:11:05.509 --> 00:11:05.519 align:start position:0%
no i'm not sure if there's a question in
 

00:11:05.519 --> 00:11:06.550 align:start position:0%
no i'm not sure if there's a question in
the<00:11:05.600><c> chat</c>

00:11:06.550 --> 00:11:06.560 align:start position:0%
the chat
 

00:11:06.560 --> 00:11:11.990 align:start position:0%
the chat
interrupt<00:11:06.880><c> me</c><00:11:07.040><c> if</c><00:11:07.120><c> there</c><00:11:07.279><c> is</c><00:11:08.160><c> um</c>

00:11:11.990 --> 00:11:12.000 align:start position:0%
 
 

00:11:12.000 --> 00:11:16.150 align:start position:0%
 
the<00:11:12.240><c> read</c><00:11:13.440><c> lock</c><00:11:14.560><c> function</c>

00:11:16.150 --> 00:11:16.160 align:start position:0%
the read lock function
 

00:11:16.160 --> 00:11:19.829 align:start position:0%
the read lock function
um<00:11:18.320><c> it</c><00:11:18.480><c> has</c><00:11:18.640><c> to</c><00:11:18.720><c> sit</c><00:11:18.880><c> in</c><00:11:18.959><c> a</c><00:11:19.040><c> loop</c><00:11:19.360><c> because</c>

00:11:19.829 --> 00:11:19.839 align:start position:0%
um it has to sit in a loop because
 

00:11:19.839 --> 00:11:21.110 align:start position:0%
um it has to sit in a loop because
if<00:11:20.000><c> there's</c><00:11:20.160><c> a</c><00:11:20.240><c> writer</c><00:11:20.560><c> we</c><00:11:20.720><c> have</c><00:11:20.800><c> to</c><00:11:20.880><c> wait</c><00:11:21.040><c> for</c>

00:11:21.110 --> 00:11:21.120 align:start position:0%
if there's a writer we have to wait for
 

00:11:21.120 --> 00:11:25.590 align:start position:0%
if there's a writer we have to wait for
the<00:11:21.200><c> writer</c>

00:11:25.590 --> 00:11:25.600 align:start position:0%
 
 

00:11:25.600 --> 00:11:31.509 align:start position:0%
 
it<00:11:26.839><c> looks</c>

00:11:31.509 --> 00:11:31.519 align:start position:0%
 
 

00:11:31.519 --> 00:11:35.030 align:start position:0%
 
it<00:11:31.680><c> grabs</c><00:11:32.000><c> a</c><00:11:32.079><c> copy</c><00:11:32.320><c> of</c><00:11:32.399><c> the</c><00:11:32.480><c> current</c><00:11:32.880><c> end</c><00:11:33.120><c> value</c>

00:11:35.030 --> 00:11:35.040 align:start position:0%
it grabs a copy of the current end value
 

00:11:35.040 --> 00:11:36.069 align:start position:0%
it grabs a copy of the current end value
if<00:11:35.200><c> it's</c><00:11:35.279><c> less</c><00:11:35.440><c> than</c><00:11:35.600><c> zero</c><00:11:35.839><c> that</c><00:11:35.920><c> means</c>

00:11:36.069 --> 00:11:36.079 align:start position:0%
if it's less than zero that means
 

00:11:36.079 --> 00:11:37.590 align:start position:0%
if it's less than zero that means
there's<00:11:36.240><c> a</c><00:11:36.320><c> writer</c><00:11:36.800><c> and</c><00:11:36.880><c> we</c><00:11:37.040><c> just</c><00:11:37.279><c> need</c><00:11:37.440><c> to</c>

00:11:37.590 --> 00:11:37.600 align:start position:0%
there's a writer and we just need to
 

00:11:37.600 --> 00:11:38.710 align:start position:0%
there's a writer and we just need to
continue<00:11:38.000><c> our</c><00:11:38.079><c> loop</c><00:11:38.240><c> and</c><00:11:38.399><c> we're</c><00:11:38.480><c> going</c><00:11:38.560><c> to</c>

00:11:38.710 --> 00:11:38.720 align:start position:0%
continue our loop and we're going to
 

00:11:38.720 --> 00:11:39.269 align:start position:0%
continue our loop and we're going to
spin

00:11:39.269 --> 00:11:39.279 align:start position:0%
spin
 

00:11:39.279 --> 00:11:41.590 align:start position:0%
spin
waiting<00:11:39.519><c> for</c><00:11:39.680><c> the</c><00:11:39.760><c> writer</c><00:11:40.079><c> to</c><00:11:40.160><c> go</c><00:11:40.320><c> away</c>

00:11:41.590 --> 00:11:41.600 align:start position:0%
waiting for the writer to go away
 

00:11:41.600 --> 00:11:44.949 align:start position:0%
waiting for the writer to go away
otherwise<00:11:42.000><c> we</c><00:11:42.160><c> want</c><00:11:42.320><c> to</c><00:11:42.399><c> increment</c>

00:11:44.949 --> 00:11:44.959 align:start position:0%
 
 

00:11:44.959 --> 00:11:48.310 align:start position:0%
 
that<00:11:45.200><c> value</c><00:11:46.800><c> but</c><00:11:47.120><c> we</c><00:11:47.360><c> only</c><00:11:47.519><c> want</c><00:11:47.680><c> to</c><00:11:47.839><c> increment</c>

00:11:48.310 --> 00:11:48.320 align:start position:0%
that value but we only want to increment
 

00:11:48.320 --> 00:11:48.630 align:start position:0%
that value but we only want to increment
it

00:11:48.630 --> 00:11:48.640 align:start position:0%
it
 

00:11:48.640 --> 00:11:50.949 align:start position:0%
it
if<00:11:48.800><c> it's</c><00:11:49.360><c> still</c><00:11:50.000><c> greater</c><00:11:50.240><c> than</c><00:11:50.399><c> or</c><00:11:50.560><c> equal</c><00:11:50.800><c> to</c>

00:11:50.949 --> 00:11:50.959 align:start position:0%
if it's still greater than or equal to
 

00:11:50.959 --> 00:11:52.710 align:start position:0%
if it's still greater than or equal to
zero<00:11:51.360><c> so</c><00:11:51.519><c> we</c><00:11:51.680><c> can't</c>

00:11:52.710 --> 00:11:52.720 align:start position:0%
zero so we can't
 

00:11:52.720 --> 00:11:54.230 align:start position:0%
zero so we can't
there's<00:11:52.959><c> many</c><00:11:53.120><c> things</c><00:11:53.360><c> we</c><00:11:53.440><c> can't</c><00:11:53.680><c> do</c><00:11:53.920><c> we</c><00:11:54.000><c> can't</c>

00:11:54.230 --> 00:11:54.240 align:start position:0%
there's many things we can't do we can't
 

00:11:54.240 --> 00:11:57.269 align:start position:0%
there's many things we can't do we can't
for<00:11:54.320><c> example</c><00:11:54.720><c> just</c><00:11:54.959><c> add</c><00:11:55.360><c> one</c><00:11:55.600><c> with</c><00:11:55.839><c> standard</c>

00:11:57.269 --> 00:11:57.279 align:start position:0%
for example just add one with standard
 

00:11:57.279 --> 00:12:00.310 align:start position:0%
for example just add one with standard
n<00:11:57.519><c> equals</c><00:11:57.839><c> n</c><00:11:58.000><c> plus</c><00:11:58.320><c> one</c><00:11:59.519><c> because</c><00:11:59.760><c> if</c><00:11:59.920><c> a</c><00:12:00.000><c> writer</c>

00:12:00.310 --> 00:12:00.320 align:start position:0%
n equals n plus one because if a writer
 

00:12:00.320 --> 00:12:01.190 align:start position:0%
n equals n plus one because if a writer
sneaks<00:12:00.720><c> in</c>

00:12:01.190 --> 00:12:01.200 align:start position:0%
sneaks in
 

00:12:01.200 --> 00:12:02.870 align:start position:0%
sneaks in
between<00:12:01.519><c> when</c><00:12:01.680><c> we</c><00:12:01.839><c> check</c><00:12:02.079><c> the</c><00:12:02.160><c> value</c><00:12:02.480><c> of</c><00:12:02.639><c> n</c><00:12:02.800><c> and</c>

00:12:02.870 --> 00:12:02.880 align:start position:0%
between when we check the value of n and
 

00:12:02.880 --> 00:12:05.430 align:start position:0%
between when we check the value of n and
when<00:12:03.040><c> we</c><00:12:03.200><c> actually</c><00:12:03.440><c> try</c><00:12:03.600><c> to</c><00:12:03.680><c> increment</c><00:12:04.160><c> it</c>

00:12:05.430 --> 00:12:05.440 align:start position:0%
when we actually try to increment it
 

00:12:05.440 --> 00:12:06.790 align:start position:0%
when we actually try to increment it
then<00:12:05.680><c> we</c><00:12:05.839><c> may</c><00:12:06.079><c> actually</c><00:12:06.320><c> go</c><00:12:06.480><c> ahead</c><00:12:06.639><c> and</c>

00:12:06.790 --> 00:12:06.800 align:start position:0%
then we may actually go ahead and
 

00:12:06.800 --> 00:12:08.310 align:start position:0%
then we may actually go ahead and
increment<00:12:07.200><c> it</c><00:12:07.360><c> at</c><00:12:07.440><c> the</c><00:12:07.519><c> same</c><00:12:07.760><c> time</c><00:12:07.920><c> that</c><00:12:08.079><c> some</c>

00:12:08.310 --> 00:12:08.320 align:start position:0%
increment it at the same time that some
 

00:12:08.320 --> 00:12:10.069 align:start position:0%
increment it at the same time that some
writer<00:12:08.720><c> is</c><00:12:08.800><c> setting</c><00:12:09.120><c> it</c><00:12:09.200><c> to</c><00:12:09.279><c> minus</c><00:12:09.680><c> one</c>

00:12:10.069 --> 00:12:10.079 align:start position:0%
writer is setting it to minus one
 

00:12:10.079 --> 00:12:11.829 align:start position:0%
writer is setting it to minus one
which<00:12:10.240><c> is</c><00:12:10.399><c> wrong</c><00:12:10.800><c> so</c><00:12:10.959><c> we</c><00:12:11.120><c> need</c><00:12:11.279><c> to</c><00:12:11.440><c> increment</c>

00:12:11.829 --> 00:12:11.839 align:start position:0%
which is wrong so we need to increment
 

00:12:11.839 --> 00:12:14.389 align:start position:0%
which is wrong so we need to increment
it<00:12:12.240><c> only</c><00:12:12.639><c> if</c><00:12:12.880><c> it</c><00:12:12.959><c> hasn't</c><00:12:13.360><c> changed</c><00:12:13.760><c> value</c>

00:12:14.389 --> 00:12:14.399 align:start position:0%
it only if it hasn't changed value
 

00:12:14.399 --> 00:12:16.550 align:start position:0%
it only if it hasn't changed value
since<00:12:14.639><c> we</c><00:12:14.880><c> checked</c><00:12:15.200><c> it</c><00:12:15.680><c> and</c><00:12:15.839><c> verified</c><00:12:16.399><c> that</c>

00:12:16.550 --> 00:12:16.560 align:start position:0%
since we checked it and verified that
 

00:12:16.560 --> 00:12:18.870 align:start position:0%
since we checked it and verified that
it's<00:12:16.720><c> greater</c><00:12:16.959><c> than</c><00:12:17.120><c> or</c><00:12:17.360><c> equal</c><00:12:17.519><c> to</c><00:12:17.680><c> zero</c>

00:12:18.870 --> 00:12:18.880 align:start position:0%
it's greater than or equal to zero
 

00:12:18.880 --> 00:12:22.069 align:start position:0%
it's greater than or equal to zero
and<00:12:19.680><c> um</c><00:12:20.959><c> the</c><00:12:21.120><c> way</c><00:12:21.279><c> people</c><00:12:21.519><c> do</c><00:12:21.680><c> that</c><00:12:21.839><c> is</c><00:12:21.920><c> they</c>

00:12:22.069 --> 00:12:22.079 align:start position:0%
and um the way people do that is they
 

00:12:22.079 --> 00:12:23.269 align:start position:0%
and um the way people do that is they
take<00:12:22.240><c> advantage</c><00:12:22.720><c> of</c>

00:12:23.269 --> 00:12:23.279 align:start position:0%
take advantage of
 

00:12:23.279 --> 00:12:24.949 align:start position:0%
take advantage of
special<00:12:23.760><c> atomic</c><00:12:24.320><c> or</c><00:12:24.480><c> interlocked</c>

00:12:24.949 --> 00:12:24.959 align:start position:0%
special atomic or interlocked
 

00:12:24.959 --> 00:12:26.310 align:start position:0%
special atomic or interlocked
instructions<00:12:25.839><c> which</c><00:12:26.079><c> you</c>

00:12:26.310 --> 00:12:26.320 align:start position:0%
instructions which you
 

00:12:26.320 --> 00:12:28.949 align:start position:0%
instructions which you
saw<00:12:26.560><c> before</c><00:12:27.120><c> for</c><00:12:27.279><c> the</c><00:12:27.519><c> um</c><00:12:28.480><c> for</c><00:12:28.560><c> our</c>

00:12:28.949 --> 00:12:28.959 align:start position:0%
saw before for the um for our
 

00:12:28.959 --> 00:12:29.990 align:start position:0%
saw before for the um for our
implementation<00:12:29.680><c> of</c>

00:12:29.990 --> 00:12:30.000 align:start position:0%
implementation of
 

00:12:30.000 --> 00:12:33.030 align:start position:0%
implementation of
spinlocks<00:12:30.560><c> and</c><00:12:30.639><c> xv6</c><00:12:32.320><c> and</c><00:12:32.480><c> the</c><00:12:32.560><c> interlocked</c>

00:12:33.030 --> 00:12:33.040 align:start position:0%
spinlocks and xv6 and the interlocked
 

00:12:33.040 --> 00:12:34.230 align:start position:0%
spinlocks and xv6 and the interlocked
instruction<00:12:33.519><c> that</c>

00:12:34.230 --> 00:12:34.240 align:start position:0%
instruction that
 

00:12:34.240 --> 00:12:35.670 align:start position:0%
instruction that
one<00:12:34.399><c> that's</c><00:12:34.639><c> particularly</c><00:12:35.040><c> convenient</c><00:12:35.519><c> to</c>

00:12:35.670 --> 00:12:35.680 align:start position:0%
one that's particularly convenient to
 

00:12:35.680 --> 00:12:38.230 align:start position:0%
one that's particularly convenient to
use<00:12:35.920><c> is</c><00:12:36.000><c> something</c><00:12:36.320><c> called</c><00:12:36.639><c> compare</c><00:12:37.040><c> and</c><00:12:37.200><c> swap</c>

00:12:38.230 --> 00:12:38.240 align:start position:0%
use is something called compare and swap
 

00:12:38.240 --> 00:12:39.590 align:start position:0%
use is something called compare and swap
the<00:12:38.320><c> idea</c><00:12:38.560><c> is</c><00:12:38.639><c> that</c><00:12:38.720><c> compare</c><00:12:38.959><c> and</c><00:12:39.040><c> swap</c><00:12:39.360><c> takes</c>

00:12:39.590 --> 00:12:39.600 align:start position:0%
the idea is that compare and swap takes
 

00:12:39.600 --> 00:12:41.670 align:start position:0%
the idea is that compare and swap takes
three<00:12:39.839><c> arguments</c>

00:12:41.670 --> 00:12:41.680 align:start position:0%
three arguments
 

00:12:41.680 --> 00:12:43.829 align:start position:0%
three arguments
the<00:12:41.839><c> address</c><00:12:42.320><c> of</c><00:12:42.399><c> some</c><00:12:42.959><c> location</c><00:12:43.440><c> of</c><00:12:43.519><c> memory</c>

00:12:43.829 --> 00:12:43.839 align:start position:0%
the address of some location of memory
 

00:12:43.839 --> 00:12:46.230 align:start position:0%
the address of some location of memory
that<00:12:44.000><c> we</c><00:12:44.079><c> want</c><00:12:44.240><c> to</c><00:12:44.560><c> act</c><00:12:44.880><c> on</c>

00:12:46.230 --> 00:12:46.240 align:start position:0%
that we want to act on
 

00:12:46.240 --> 00:12:49.430 align:start position:0%
that we want to act on
the<00:12:46.480><c> value</c><00:12:46.880><c> that</c><00:12:47.279><c> we</c><00:12:47.680><c> think</c><00:12:48.000><c> it</c><00:12:48.160><c> holds</c><00:12:49.200><c> and</c><00:12:49.279><c> the</c>

00:12:49.430 --> 00:12:49.440 align:start position:0%
the value that we think it holds and the
 

00:12:49.440 --> 00:12:52.069 align:start position:0%
the value that we think it holds and the
value<00:12:49.760><c> that</c><00:12:49.920><c> we'd</c><00:12:50.160><c> like</c><00:12:50.399><c> it</c><00:12:50.480><c> to</c><00:12:50.839><c> hold</c><00:12:51.839><c> and</c><00:12:52.000><c> the</c>

00:12:52.069 --> 00:12:52.079 align:start position:0%
value that we'd like it to hold and the
 

00:12:52.079 --> 00:12:53.750 align:start position:0%
value that we'd like it to hold and the
semantics<00:12:52.639><c> of</c><00:12:52.720><c> compare</c><00:12:53.040><c> and</c><00:12:53.120><c> swap</c><00:12:53.440><c> are</c><00:12:53.600><c> that</c>

00:12:53.750 --> 00:12:53.760 align:start position:0%
semantics of compare and swap are that
 

00:12:53.760 --> 00:12:54.389 align:start position:0%
semantics of compare and swap are that
the<00:12:53.839><c> hardware</c>

00:12:54.389 --> 00:12:54.399 align:start position:0%
the hardware
 

00:12:54.399 --> 00:12:57.509 align:start position:0%
the hardware
checks<00:12:55.200><c> the</c><00:12:55.360><c> hardware</c><00:12:55.760><c> first</c><00:12:56.480><c> sort</c><00:12:56.720><c> of</c>

00:12:57.509 --> 00:12:57.519 align:start position:0%
checks the hardware first sort of
 

00:12:57.519 --> 00:12:59.590 align:start position:0%
checks the hardware first sort of
you<00:12:57.680><c> know</c><00:12:58.000><c> basically</c><00:12:58.399><c> sets</c><00:12:58.639><c> an</c><00:12:58.800><c> internal</c><00:12:59.279><c> lock</c>

00:12:59.590 --> 00:12:59.600 align:start position:0%
you know basically sets an internal lock
 

00:12:59.600 --> 00:13:00.710 align:start position:0%
you know basically sets an internal lock
that<00:13:00.240><c> makes</c>

00:13:00.710 --> 00:13:00.720 align:start position:0%
that makes
 

00:13:00.720 --> 00:13:02.870 align:start position:0%
that makes
only<00:13:01.040><c> one</c><00:13:01.360><c> compare</c><00:13:01.760><c> and</c><00:13:01.839><c> swap</c><00:13:02.240><c> execute</c><00:13:02.639><c> at</c><00:13:02.800><c> a</c>

00:13:02.870 --> 00:13:02.880 align:start position:0%
only one compare and swap execute at a
 

00:13:02.880 --> 00:13:05.269 align:start position:0%
only one compare and swap execute at a
time<00:13:03.120><c> on</c><00:13:03.200><c> a</c><00:13:03.279><c> given</c><00:13:03.519><c> locate</c><00:13:04.000><c> memory</c><00:13:04.320><c> location</c>

00:13:05.269 --> 00:13:05.279 align:start position:0%
time on a given locate memory location
 

00:13:05.279 --> 00:13:07.269 align:start position:0%
time on a given locate memory location
then<00:13:05.440><c> the</c><00:13:05.519><c> hardware</c><00:13:06.000><c> checks</c><00:13:06.399><c> that</c><00:13:07.040><c> the</c>

00:13:07.269 --> 00:13:07.279 align:start position:0%
then the hardware checks that the
 

00:13:07.279 --> 00:13:08.790 align:start position:0%
then the hardware checks that the
current<00:13:07.600><c> value</c><00:13:07.839><c> of</c><00:13:07.920><c> that</c><00:13:08.079><c> location</c>

00:13:08.790 --> 00:13:08.800 align:start position:0%
current value of that location
 

00:13:08.800 --> 00:13:12.790 align:start position:0%
current value of that location
is<00:13:09.040><c> indeed</c><00:13:09.519><c> still</c><00:13:09.920><c> x</c><00:13:10.399><c> and</c><00:13:10.720><c> if</c><00:13:10.880><c> it's</c><00:13:11.120><c> still</c><00:13:11.440><c> x</c>

00:13:12.790 --> 00:13:12.800 align:start position:0%
is indeed still x and if it's still x
 

00:13:12.800 --> 00:13:14.870 align:start position:0%
is indeed still x and if it's still x
it<00:13:12.959><c> sets</c><00:13:13.279><c> it</c><00:13:13.360><c> to</c><00:13:13.519><c> this</c><00:13:13.760><c> third</c><00:13:14.000><c> argument</c><00:13:14.480><c> which</c>

00:13:14.870 --> 00:13:14.880 align:start position:0%
it sets it to this third argument which
 

00:13:14.880 --> 00:13:16.870 align:start position:0%
it sets it to this third argument which
is<00:13:14.959><c> going</c><00:13:15.040><c> to</c><00:13:15.120><c> be</c><00:13:15.279><c> x</c><00:13:15.519><c> plus</c><00:13:15.760><c> one</c>

00:13:16.870 --> 00:13:16.880 align:start position:0%
is going to be x plus one
 

00:13:16.880 --> 00:13:19.030 align:start position:0%
is going to be x plus one
and<00:13:16.959><c> then</c><00:13:17.120><c> the</c><00:13:17.279><c> instruction</c><00:13:17.680><c> yields</c><00:13:18.160><c> one</c>

00:13:19.030 --> 00:13:19.040 align:start position:0%
and then the instruction yields one
 

00:13:19.040 --> 00:13:21.350 align:start position:0%
and then the instruction yields one
that's<00:13:19.279><c> this</c><00:13:19.440><c> value</c>

00:13:21.350 --> 00:13:21.360 align:start position:0%
that's this value
 

00:13:21.360 --> 00:13:22.870 align:start position:0%
that's this value
if<00:13:21.519><c> compare</c><00:13:21.839><c> and</c><00:13:21.920><c> swap</c><00:13:22.320><c> observes</c><00:13:22.639><c> that</c><00:13:22.800><c> the</c>

00:13:22.870 --> 00:13:22.880 align:start position:0%
if compare and swap observes that the
 

00:13:22.880 --> 00:13:24.870 align:start position:0%
if compare and swap observes that the
current<00:13:23.120><c> value</c><00:13:23.440><c> isn't</c><00:13:23.839><c> x</c>

00:13:24.870 --> 00:13:24.880 align:start position:0%
current value isn't x
 

00:13:24.880 --> 00:13:26.870 align:start position:0%
current value isn't x
um<00:13:25.519><c> then</c><00:13:25.680><c> it</c><00:13:26.000><c> then</c><00:13:26.160><c> it</c><00:13:26.240><c> doesn't</c><00:13:26.480><c> change</c><00:13:26.800><c> the</c>

00:13:26.870 --> 00:13:26.880 align:start position:0%
um then it then it doesn't change the
 

00:13:26.880 --> 00:13:29.030 align:start position:0%
um then it then it doesn't change the
value<00:13:27.519><c> the</c><00:13:27.680><c> memory</c><00:13:28.000><c> location</c><00:13:28.399><c> and</c><00:13:28.480><c> it</c><00:13:28.639><c> returns</c>

00:13:29.030 --> 00:13:29.040 align:start position:0%
value the memory location and it returns
 

00:13:29.040 --> 00:13:30.150 align:start position:0%
value the memory location and it returns
zero

00:13:30.150 --> 00:13:30.160 align:start position:0%
zero
 

00:13:30.160 --> 00:13:34.230 align:start position:0%
zero
so<00:13:30.320><c> this</c><00:13:30.560><c> is</c><00:13:31.040><c> basically</c><00:13:31.440><c> an</c><00:13:32.839><c> atomic</c><00:13:33.920><c> if</c><00:13:34.079><c> the</c>

00:13:34.230 --> 00:13:34.240 align:start position:0%
so this is basically an atomic if the
 

00:13:34.240 --> 00:13:37.190 align:start position:0%
so this is basically an atomic if the
location<00:13:34.639><c> is</c><00:13:34.800><c> x</c><00:13:35.040><c> set</c><00:13:35.200><c> it</c><00:13:35.279><c> to</c><00:13:35.440><c> x</c><00:13:35.680><c> plus</c><00:13:35.920><c> one</c>

00:13:37.190 --> 00:13:37.200 align:start position:0%
location is x set it to x plus one
 

00:13:37.200 --> 00:13:38.389 align:start position:0%
location is x set it to x plus one
and<00:13:37.360><c> it</c><00:13:37.440><c> has</c><00:13:37.600><c> to</c><00:13:37.680><c> be</c><00:13:37.760><c> atomic</c><00:13:38.160><c> because</c><00:13:38.240><c> there's</c>

00:13:38.389 --> 00:13:38.399 align:start position:0%
and it has to be atomic because there's
 

00:13:38.399 --> 00:13:40.150 align:start position:0%
and it has to be atomic because there's
really<00:13:38.639><c> two</c><00:13:38.800><c> things</c><00:13:39.040><c> going</c><00:13:39.360><c> on</c><00:13:39.600><c> the</c><00:13:39.760><c> hardware</c>

00:13:40.150 --> 00:13:40.160 align:start position:0%
really two things going on the hardware
 

00:13:40.160 --> 00:13:40.629 align:start position:0%
really two things going on the hardware
is

00:13:40.629 --> 00:13:40.639 align:start position:0%
is
 

00:13:40.639 --> 00:13:42.710 align:start position:0%
is
checking<00:13:40.959><c> the</c><00:13:41.120><c> current</c><00:13:41.440><c> value</c><00:13:42.160><c> and</c><00:13:42.399><c> setting</c>

00:13:42.710 --> 00:13:42.720 align:start position:0%
checking the current value and setting
 

00:13:42.720 --> 00:13:45.590 align:start position:0%
checking the current value and setting
it<00:13:42.800><c> to</c><00:13:42.959><c> a</c><00:13:43.040><c> new</c><00:13:43.199><c> value</c>

00:13:45.590 --> 00:13:45.600 align:start position:0%
 
 

00:13:45.600 --> 00:13:49.829 align:start position:0%
 
any<00:13:45.839><c> questions</c><00:13:46.079><c> about</c><00:13:46.320><c> compare</c><00:13:46.639><c> and</c><00:13:46.839><c> swap</c>

00:13:49.829 --> 00:13:49.839 align:start position:0%
any questions about compare and swap
 

00:13:49.839 --> 00:13:52.710 align:start position:0%
any questions about compare and swap
i<00:13:50.000><c> have</c><00:13:50.240><c> a</c><00:13:50.320><c> question</c><00:13:50.959><c> if</c><00:13:52.079><c> there</c><00:13:52.320><c> would</c><00:13:52.480><c> be</c><00:13:52.639><c> a</c>

00:13:52.710 --> 00:13:52.720 align:start position:0%
i have a question if there would be a
 

00:13:52.720 --> 00:13:53.350 align:start position:0%
i have a question if there would be a
reader

00:13:53.350 --> 00:13:53.360 align:start position:0%
reader
 

00:13:53.360 --> 00:13:56.790 align:start position:0%
reader
and<00:13:54.079><c> uh</c><00:13:54.720><c> our</c><00:13:55.040><c> lock</c><00:13:55.680><c> needs</c><00:13:56.000><c> to</c>

00:13:56.790 --> 00:13:56.800 align:start position:0%
and uh our lock needs to
 

00:13:56.800 --> 00:14:00.310 align:start position:0%
and uh our lock needs to
continue<00:13:58.000><c> would</c><00:13:59.040><c> w</c><00:13:59.680><c> unlock</c>

00:14:00.310 --> 00:14:00.320 align:start position:0%
continue would w unlock
 

00:14:00.320 --> 00:14:03.670 align:start position:0%
continue would w unlock
reset<00:14:00.959><c> the</c><00:14:01.120><c> value</c><00:14:01.680><c> back</c><00:14:02.000><c> to</c><00:14:02.240><c> x</c><00:14:03.120><c> oh</c><00:14:03.360><c> i'm</c>

00:14:03.670 --> 00:14:03.680 align:start position:0%
reset the value back to x oh i'm
 

00:14:03.680 --> 00:14:07.670 align:start position:0%
reset the value back to x oh i'm
i'm<00:14:04.160><c> uh</c><00:14:05.120><c> well</c><00:14:05.360><c> w</c><00:14:05.839><c> unlock</c>

00:14:07.670 --> 00:14:07.680 align:start position:0%
i'm uh well w unlock
 

00:14:07.680 --> 00:14:10.870 align:start position:0%
i'm uh well w unlock
if<00:14:07.839><c> there's</c><00:14:08.000><c> a</c><00:14:08.160><c> writer</c><00:14:09.440><c> w</c><00:14:09.920><c> unlock</c><00:14:10.480><c> which</c>

00:14:10.870 --> 00:14:10.880 align:start position:0%
if there's a writer w unlock which
 

00:14:10.880 --> 00:14:14.389 align:start position:0%
if there's a writer w unlock which
i'm<00:14:11.040><c> afraid</c><00:14:11.360><c> i</c><00:14:11.360><c> didn't</c><00:14:11.600><c> show</c><00:14:11.920><c> sets</c><00:14:12.320><c> n</c><00:14:12.560><c> to</c><00:14:12.800><c> zero</c>

00:14:14.389 --> 00:14:14.399 align:start position:0%
i'm afraid i didn't show sets n to zero
 

00:14:14.399 --> 00:14:17.750 align:start position:0%
i'm afraid i didn't show sets n to zero
because<00:14:14.560><c> there</c><00:14:14.720><c> can</c><00:14:14.880><c> only</c><00:14:15.120><c> be</c><00:14:15.279><c> one</c><00:14:15.519><c> writer</c>

00:14:17.750 --> 00:14:17.760 align:start position:0%
because there can only be one writer
 

00:14:17.760 --> 00:14:20.870 align:start position:0%
because there can only be one writer
if<00:14:17.920><c> there's</c><00:14:18.399><c> what</c><00:14:18.720><c> read</c><00:14:19.120><c> unlock</c><00:14:19.600><c> does</c>

00:14:20.870 --> 00:14:20.880 align:start position:0%
if there's what read unlock does
 

00:14:20.880 --> 00:14:24.230 align:start position:0%
if there's what read unlock does
is<00:14:21.120><c> use</c><00:14:21.440><c> another</c><00:14:21.839><c> compare</c><00:14:22.240><c> and</c><00:14:22.399><c> swap</c>

00:14:24.230 --> 00:14:24.240 align:start position:0%
is use another compare and swap
 

00:14:24.240 --> 00:14:27.269 align:start position:0%
is use another compare and swap
to<00:14:24.480><c> decrement</c><00:14:25.279><c> in</c>

00:14:27.269 --> 00:14:27.279 align:start position:0%
to decrement in
 

00:14:27.279 --> 00:14:31.829 align:start position:0%
to decrement in
okay<00:14:28.839><c> because</c><00:14:30.000><c> what</c><00:14:30.240><c> happens</c><00:14:30.720><c> if</c>

00:14:31.829 --> 00:14:31.839 align:start position:0%
okay because what happens if
 

00:14:31.839 --> 00:14:35.269 align:start position:0%
okay because what happens if
um<00:14:33.120><c> a</c><00:14:33.360><c> writer</c><00:14:34.240><c> locks</c>

00:14:35.269 --> 00:14:35.279 align:start position:0%
um a writer locks
 

00:14:35.279 --> 00:14:38.470 align:start position:0%
um a writer locks
uh<00:14:35.920><c> the</c><00:14:36.160><c> lock</c><00:14:36.720><c> between</c><00:14:37.680><c> when</c><00:14:38.079><c> x</c>

00:14:38.470 --> 00:14:38.480 align:start position:0%
uh the lock between when x
 

00:14:38.480 --> 00:14:41.829 align:start position:0%
uh the lock between when x
is<00:14:38.639><c> being</c><00:14:39.040><c> computed</c><00:14:40.399><c> and</c>

00:14:41.829 --> 00:14:41.839 align:start position:0%
is being computed and
 

00:14:41.839 --> 00:14:45.110 align:start position:0%
is being computed and
so<00:14:42.079><c> right</c><00:14:42.839><c> here</c><00:14:44.480><c> uh</c><00:14:44.800><c> no</c>

00:14:45.110 --> 00:14:45.120 align:start position:0%
so right here uh no
 

00:14:45.120 --> 00:14:49.990 align:start position:0%
so right here uh no
between<00:14:45.600><c> the</c><00:14:45.920><c> if</c><00:14:46.399><c> and</c><00:14:47.839><c> x</c>

00:14:49.990 --> 00:14:50.000 align:start position:0%
between the if and x
 

00:14:50.000 --> 00:14:52.949 align:start position:0%
between the if and x
somehow<00:14:51.040><c> okay</c><00:14:51.600><c> okay</c><00:14:52.160><c> it's</c><00:14:52.480><c> i'm</c><00:14:52.560><c> not</c><00:14:52.720><c> sure</c><00:14:52.880><c> i</c>

00:14:52.949 --> 00:14:52.959 align:start position:0%
somehow okay okay it's i'm not sure i
 

00:14:52.959 --> 00:14:54.949 align:start position:0%
somehow okay okay it's i'm not sure i
understand<00:14:53.440><c> exactly</c>

00:14:54.949 --> 00:14:54.959 align:start position:0%
understand exactly
 

00:14:54.959 --> 00:14:56.870 align:start position:0%
understand exactly
what<00:14:55.680><c> time</c><00:14:55.920><c> you're</c><00:14:56.160><c> asking</c><00:14:56.399><c> but</c><00:14:56.560><c> it's</c>

00:14:56.870 --> 00:14:56.880 align:start position:0%
what time you're asking but it's
 

00:14:56.880 --> 00:14:58.710 align:start position:0%
what time you're asking but it's
absolutely<00:14:57.199><c> a</c><00:14:57.279><c> good</c><00:14:57.440><c> question</c><00:14:57.839><c> what</c><00:14:58.079><c> happens</c>

00:14:58.710 --> 00:14:58.720 align:start position:0%
absolutely a good question what happens
 

00:14:58.720 --> 00:15:02.069 align:start position:0%
absolutely a good question what happens
if<00:14:59.120><c> w</c><00:14:59.519><c> lock</c><00:15:00.240><c> is</c><00:15:00.480><c> called</c><00:15:01.360><c> somewhere</c><00:15:01.839><c> during</c>

00:15:02.069 --> 00:15:02.079 align:start position:0%
if w lock is called somewhere during
 

00:15:02.079 --> 00:15:03.750 align:start position:0%
if w lock is called somewhere during
this<00:15:02.320><c> sequence</c>

00:15:03.750 --> 00:15:03.760 align:start position:0%
this sequence
 

00:15:03.760 --> 00:15:06.230 align:start position:0%
this sequence
and<00:15:04.320><c> for</c><00:15:04.480><c> me</c><00:15:04.639><c> the</c><00:15:04.800><c> most</c><00:15:05.040><c> dangerous</c><00:15:05.440><c> time</c><00:15:05.680><c> for</c><00:15:05.920><c> w</c>

00:15:06.230 --> 00:15:06.240 align:start position:0%
and for me the most dangerous time for w
 

00:15:06.240 --> 00:15:07.350 align:start position:0%
and for me the most dangerous time for w
lock<00:15:06.480><c> to</c><00:15:06.639><c> be</c><00:15:06.800><c> called</c>

00:15:07.350 --> 00:15:07.360 align:start position:0%
lock to be called
 

00:15:07.360 --> 00:15:10.389 align:start position:0%
lock to be called
is<00:15:08.399><c> after</c><00:15:08.800><c> this</c><00:15:09.199><c> check</c><00:15:09.760><c> but</c><00:15:09.920><c> before</c><00:15:10.240><c> the</c>

00:15:10.389 --> 00:15:10.399 align:start position:0%
is after this check but before the
 

00:15:10.399 --> 00:15:12.470 align:start position:0%
is after this check but before the
compare<00:15:10.800><c> and</c><00:15:10.959><c> swap</c>

00:15:12.470 --> 00:15:12.480 align:start position:0%
compare and swap
 

00:15:12.480 --> 00:15:15.350 align:start position:0%
compare and swap
so<00:15:12.800><c> let's</c><00:15:13.040><c> imagine</c><00:15:13.440><c> that</c><00:15:14.720><c> read</c><00:15:14.959><c> lock</c><00:15:15.199><c> has</c>

00:15:15.350 --> 00:15:15.360 align:start position:0%
so let's imagine that read lock has
 

00:15:15.360 --> 00:15:17.509 align:start position:0%
so let's imagine that read lock has
gotten<00:15:15.600><c> as</c><00:15:15.680><c> far</c><00:15:15.920><c> as</c><00:15:16.079><c> seeing</c><00:15:16.320><c> that</c><00:15:16.560><c> x</c><00:15:16.880><c> that</c>

00:15:17.509 --> 00:15:17.519 align:start position:0%
gotten as far as seeing that x that
 

00:15:17.519 --> 00:15:20.949 align:start position:0%
gotten as far as seeing that x that
x<00:15:17.760><c> or</c><00:15:17.920><c> l</c><00:15:18.160><c> alright</c><00:15:18.959><c> n</c><00:15:19.360><c> is</c><00:15:19.519><c> zero</c>

00:15:20.949 --> 00:15:20.959 align:start position:0%
x or l alright n is zero
 

00:15:20.959 --> 00:15:22.550 align:start position:0%
x or l alright n is zero
okay<00:15:21.199><c> so</c><00:15:21.360><c> maybe</c><00:15:21.600><c> we're</c><00:15:21.760><c> right</c><00:15:22.000><c> here</c><00:15:22.399><c> right</c>

00:15:22.550 --> 00:15:22.560 align:start position:0%
okay so maybe we're right here right
 

00:15:22.560 --> 00:15:24.790 align:start position:0%
okay so maybe we're right here right
here

00:15:24.790 --> 00:15:24.800 align:start position:0%
here
 

00:15:24.800 --> 00:15:28.710 align:start position:0%
here
and<00:15:25.199><c> x</c><00:15:25.440><c> is</c><00:15:25.600><c> equal</c><00:15:25.920><c> to</c><00:15:26.079><c> zero</c>

00:15:28.710 --> 00:15:28.720 align:start position:0%
 
 

00:15:28.720 --> 00:15:32.790 align:start position:0%
 
um<00:15:31.519><c> and</c><00:15:31.839><c> we've</c><00:15:32.000><c> already</c><00:15:32.240><c> checked</c><00:15:32.480><c> it</c>

00:15:32.790 --> 00:15:32.800 align:start position:0%
um and we've already checked it
 

00:15:32.800 --> 00:15:34.629 align:start position:0%
um and we've already checked it
so<00:15:33.040><c> the</c><00:15:33.120><c> check</c><00:15:33.360><c> is</c><00:15:33.519><c> finished</c><00:15:33.920><c> and</c><00:15:34.000><c> then</c><00:15:34.399><c> right</c>

00:15:34.629 --> 00:15:34.639 align:start position:0%
so the check is finished and then right
 

00:15:34.639 --> 00:15:36.150 align:start position:0%
so the check is finished and then right
at<00:15:34.720><c> this</c><00:15:34.880><c> time</c><00:15:35.120><c> on</c><00:15:35.279><c> another</c><00:15:35.600><c> core</c>

00:15:36.150 --> 00:15:36.160 align:start position:0%
at this time on another core
 

00:15:36.160 --> 00:15:39.269 align:start position:0%
at this time on another core
some<00:15:36.399><c> other</c><00:15:36.560><c> thread</c><00:15:36.959><c> calls</c><00:15:37.279><c> w</c><00:15:37.759><c> lock</c>

00:15:39.269 --> 00:15:39.279 align:start position:0%
some other thread calls w lock
 

00:15:39.279 --> 00:15:40.949 align:start position:0%
some other thread calls w lock
and<00:15:39.519><c> it</c><00:15:39.680><c> actually</c><00:15:40.000><c> gets</c><00:15:40.240><c> its</c><00:15:40.480><c> compare</c><00:15:40.880><c> and</c>

00:15:40.949 --> 00:15:40.959 align:start position:0%
and it actually gets its compare and
 

00:15:40.959 --> 00:15:43.509 align:start position:0%
and it actually gets its compare and
swap<00:15:41.360><c> in</c><00:15:41.600><c> first</c>

00:15:43.509 --> 00:15:43.519 align:start position:0%
swap in first
 

00:15:43.519 --> 00:15:45.189 align:start position:0%
swap in first
so<00:15:43.759><c> on</c><00:15:43.839><c> the</c><00:15:44.000><c> other</c><00:15:44.240><c> core</c><00:15:44.720><c> that's</c><00:15:44.959><c> trying</c><00:15:45.120><c> to</c>

00:15:45.189 --> 00:15:45.199 align:start position:0%
so on the other core that's trying to
 

00:15:45.199 --> 00:15:47.269 align:start position:0%
so on the other core that's trying to
grab<00:15:45.440><c> the</c><00:15:45.600><c> right</c><00:15:45.759><c> lock</c>

00:15:47.269 --> 00:15:47.279 align:start position:0%
grab the right lock
 

00:15:47.279 --> 00:15:49.269 align:start position:0%
grab the right lock
compare<00:15:47.600><c> and</c><00:15:47.680><c> swap</c><00:15:48.000><c> is</c><00:15:48.160><c> going</c><00:15:48.240><c> to</c><00:15:48.320><c> see</c><00:15:48.480><c> if</c><00:15:48.720><c> lron</c>

00:15:49.269 --> 00:15:49.279 align:start position:0%
compare and swap is going to see if lron
 

00:15:49.279 --> 00:15:51.269 align:start position:0%
compare and swap is going to see if lron
is<00:15:49.360><c> zero</c><00:15:49.680><c> let's</c><00:15:49.920><c> assume</c><00:15:50.240><c> that</c><00:15:50.480><c> n</c><00:15:50.639><c> is</c><00:15:50.800><c> zero</c>

00:15:51.269 --> 00:15:51.279 align:start position:0%
is zero let's assume that n is zero
 

00:15:51.279 --> 00:15:53.910 align:start position:0%
is zero let's assume that n is zero
so<00:15:51.440><c> that</c><00:15:52.320><c> this</c><00:15:52.560><c> test</c><00:15:52.880><c> is</c><00:15:53.040><c> true</c><00:15:53.759><c> and</c><00:15:53.839><c> the</c>

00:15:53.910 --> 00:15:53.920 align:start position:0%
so that this test is true and the
 

00:15:53.920 --> 00:15:55.430 align:start position:0%
so that this test is true and the
compare<00:15:54.240><c> and</c><00:15:54.399><c> swap</c><00:15:54.720><c> is</c>

00:15:55.430 --> 00:15:55.440 align:start position:0%
compare and swap is
 

00:15:55.440 --> 00:15:57.430 align:start position:0%
compare and swap is
on<00:15:55.519><c> that</c><00:15:55.759><c> other</c><00:15:55.920><c> core</c><00:15:56.160><c> is</c><00:15:56.240><c> gonna</c><00:15:56.560><c> set</c><00:15:57.040><c> n</c><00:15:57.279><c> to</c>

00:15:57.430 --> 00:15:57.440 align:start position:0%
on that other core is gonna set n to
 

00:15:57.440 --> 00:15:59.990 align:start position:0%
on that other core is gonna set n to
negative<00:15:57.759><c> one</c><00:15:58.000><c> so</c><00:15:58.160><c> now</c><00:15:58.320><c> the</c><00:15:58.399><c> lock's</c><00:15:58.720><c> locked</c>

00:15:59.990 --> 00:16:00.000 align:start position:0%
negative one so now the lock's locked
 

00:16:00.000 --> 00:16:03.030 align:start position:0%
negative one so now the lock's locked
um<00:16:00.240><c> but</c><00:16:00.399><c> we</c><00:16:00.639><c> still</c><00:16:00.959><c> think</c><00:16:01.360><c> that</c><00:16:01.839><c> n</c><00:16:02.240><c> is</c><00:16:02.399><c> zero</c><00:16:02.959><c> in</c>

00:16:03.030 --> 00:16:03.040 align:start position:0%
um but we still think that n is zero in
 

00:16:03.040 --> 00:16:04.389 align:start position:0%
um but we still think that n is zero in
this<00:16:03.360><c> code</c>

00:16:04.389 --> 00:16:04.399 align:start position:0%
this code
 

00:16:04.399 --> 00:16:06.629 align:start position:0%
this code
uh<00:16:04.560><c> even</c><00:16:04.800><c> the</c><00:16:04.959><c> lock's</c><00:16:05.360><c> locked</c><00:16:06.240><c> and</c><00:16:06.399><c> now</c><00:16:06.560><c> we're</c>

00:16:06.629 --> 00:16:06.639 align:start position:0%
uh even the lock's locked and now we're
 

00:16:06.639 --> 00:16:08.470 align:start position:0%
uh even the lock's locked and now we're
gonna<00:16:06.800><c> execute</c><00:16:07.440><c> now</c><00:16:07.600><c> back</c><00:16:07.839><c> on</c><00:16:07.920><c> the</c><00:16:08.079><c> reading</c>

00:16:08.470 --> 00:16:08.480 align:start position:0%
gonna execute now back on the reading
 

00:16:08.480 --> 00:16:09.670 align:start position:0%
gonna execute now back on the reading
core

00:16:09.670 --> 00:16:09.680 align:start position:0%
core
 

00:16:09.680 --> 00:16:11.509 align:start position:0%
core
we're<00:16:09.839><c> going</c><00:16:10.000><c> to</c><00:16:10.079><c> execute</c><00:16:10.399><c> compare</c><00:16:10.720><c> and</c><00:16:10.800><c> swap</c>

00:16:11.509 --> 00:16:11.519 align:start position:0%
we're going to execute compare and swap
 

00:16:11.519 --> 00:16:13.110 align:start position:0%
we're going to execute compare and swap
but<00:16:11.680><c> we're</c><00:16:11.839><c> going</c><00:16:12.000><c> to</c><00:16:12.079><c> pass</c><00:16:12.560><c> 0</c>

00:16:13.110 --> 00:16:13.120 align:start position:0%
but we're going to pass 0
 

00:16:13.120 --> 00:16:14.949 align:start position:0%
but we're going to pass 0
here<00:16:13.519><c> right</c><00:16:13.759><c> this</c><00:16:13.920><c> is</c><00:16:14.000><c> the</c><00:16:14.160><c> value</c><00:16:14.480><c> we</c><00:16:14.639><c> actually</c>

00:16:14.949 --> 00:16:14.959 align:start position:0%
here right this is the value we actually
 

00:16:14.959 --> 00:16:16.150 align:start position:0%
here right this is the value we actually
we're<00:16:15.120><c> going</c><00:16:15.199><c> to</c><00:16:15.279><c> pass</c><00:16:15.519><c> in</c><00:16:15.600><c> the</c><00:16:15.680><c> value</c><00:16:16.000><c> we</c>

00:16:16.150 --> 00:16:16.160 align:start position:0%
we're going to pass in the value we
 

00:16:16.160 --> 00:16:16.629 align:start position:0%
we're going to pass in the value we
actually

00:16:16.629 --> 00:16:16.639 align:start position:0%
actually
 

00:16:16.639 --> 00:16:19.590 align:start position:0%
actually
looked<00:16:17.040><c> at</c><00:16:17.519><c> not</c><00:16:17.759><c> the</c><00:16:17.839><c> current</c><00:16:18.160><c> value</c><00:16:18.480><c> of</c><00:16:18.639><c> n</c><00:16:19.440><c> and</c>

00:16:19.590 --> 00:16:19.600 align:start position:0%
looked at not the current value of n and
 

00:16:19.600 --> 00:16:21.269 align:start position:0%
looked at not the current value of n and
when<00:16:19.759><c> we</c><00:16:19.920><c> looked</c><00:16:20.160><c> at</c><00:16:20.320><c> it</c><00:16:20.399><c> it</c><00:16:20.480><c> was</c><00:16:20.639><c> 0.</c><00:16:20.959><c> so</c><00:16:21.120><c> we're</c>

00:16:21.269 --> 00:16:21.279 align:start position:0%
when we looked at it it was 0. so we're
 

00:16:21.279 --> 00:16:21.749 align:start position:0%
when we looked at it it was 0. so we're
going<00:16:21.360><c> to</c><00:16:21.440><c> pass</c>

00:16:21.749 --> 00:16:21.759 align:start position:0%
going to pass
 

00:16:21.759 --> 00:16:23.749 align:start position:0%
going to pass
zero<00:16:22.160><c> here</c><00:16:22.800><c> and</c><00:16:22.959><c> we're</c><00:16:23.120><c> telling</c><00:16:23.360><c> compare</c><00:16:23.680><c> and</c>

00:16:23.749 --> 00:16:23.759 align:start position:0%
zero here and we're telling compare and
 

00:16:23.759 --> 00:16:25.350 align:start position:0%
zero here and we're telling compare and
swap<00:16:24.079><c> look</c><00:16:24.639><c> only</c>

00:16:25.350 --> 00:16:25.360 align:start position:0%
swap look only
 

00:16:25.360 --> 00:16:28.470 align:start position:0%
swap look only
add<00:16:25.600><c> one</c><00:16:25.839><c> to</c><00:16:26.160><c> only</c><00:16:26.959><c> set</c><00:16:27.199><c> it</c><00:16:27.279><c> to</c><00:16:27.440><c> one</c><00:16:28.079><c> if</c><00:16:28.320><c> its</c>

00:16:28.470 --> 00:16:28.480 align:start position:0%
add one to only set it to one if its
 

00:16:28.480 --> 00:16:30.310 align:start position:0%
add one to only set it to one if its
current<00:16:28.800><c> value</c><00:16:29.040><c> is</c><00:16:29.199><c> zero</c>

00:16:30.310 --> 00:16:30.320 align:start position:0%
current value is zero
 

00:16:30.320 --> 00:16:31.829 align:start position:0%
current value is zero
but<00:16:30.560><c> it's</c><00:16:30.639><c> not</c><00:16:30.880><c> zero</c><00:16:31.120><c> at</c><00:16:31.279><c> this</c><00:16:31.440><c> point</c><00:16:31.680><c> it's</c>

00:16:31.829 --> 00:16:31.839 align:start position:0%
but it's not zero at this point it's
 

00:16:31.839 --> 00:16:33.910 align:start position:0%
but it's not zero at this point it's
minus<00:16:32.240><c> one</c><00:16:32.720><c> and</c><00:16:32.880><c> so</c><00:16:33.040><c> this</c><00:16:33.120><c> compare</c><00:16:33.440><c> and</c><00:16:33.519><c> swap</c>

00:16:33.910 --> 00:16:33.920 align:start position:0%
minus one and so this compare and swap
 

00:16:33.920 --> 00:16:34.550 align:start position:0%
minus one and so this compare and swap
fails

00:16:34.550 --> 00:16:34.560 align:start position:0%
fails
 

00:16:34.560 --> 00:16:38.470 align:start position:0%
fails
does<00:16:34.880><c> not</c><00:16:35.120><c> modify</c><00:16:36.000><c> n</c><00:16:37.120><c> returns</c><00:16:37.600><c> zero</c>

00:16:38.470 --> 00:16:38.480 align:start position:0%
does not modify n returns zero
 

00:16:38.480 --> 00:16:39.749 align:start position:0%
does not modify n returns zero
and<00:16:38.639><c> so</c><00:16:38.880><c> that</c><00:16:38.959><c> means</c><00:16:39.120><c> we'll</c><00:16:39.279><c> go</c><00:16:39.360><c> back</c><00:16:39.519><c> to</c><00:16:39.680><c> the</c>

00:16:39.749 --> 00:16:39.759 align:start position:0%
and so that means we'll go back to the
 

00:16:39.759 --> 00:16:41.749 align:start position:0%
and so that means we'll go back to the
top<00:16:40.000><c> of</c><00:16:40.079><c> this</c><00:16:40.240><c> loop</c><00:16:40.480><c> and</c><00:16:40.560><c> try</c><00:16:40.800><c> again</c><00:16:41.440><c> of</c><00:16:41.519><c> course</c>

00:16:41.749 --> 00:16:41.759 align:start position:0%
top of this loop and try again of course
 

00:16:41.759 --> 00:16:42.389 align:start position:0%
top of this loop and try again of course
now

00:16:42.389 --> 00:16:42.399 align:start position:0%
now
 

00:16:42.399 --> 00:16:45.509 align:start position:0%
now
n<00:16:42.639><c> is</c><00:16:42.720><c> minus</c><00:16:43.120><c> one</c>

00:16:45.509 --> 00:16:45.519 align:start position:0%
 
 

00:16:45.519 --> 00:16:47.269 align:start position:0%
 
um<00:16:45.759><c> this</c><00:16:46.000><c> might</c><00:16:46.160><c> be</c><00:16:46.320><c> related</c><00:16:46.639><c> to</c><00:16:46.800><c> the</c><00:16:46.959><c> previous</c>

00:16:47.269 --> 00:16:47.279 align:start position:0%
um this might be related to the previous
 

00:16:47.279 --> 00:16:49.110 align:start position:0%
um this might be related to the previous
question<00:16:47.600><c> a</c><00:16:47.680><c> bit</c><00:16:48.000><c> but</c>

00:16:49.110 --> 00:16:49.120 align:start position:0%
question a bit but
 

00:16:49.120 --> 00:16:52.629 align:start position:0%
question a bit but
is<00:16:49.279><c> it</c><00:16:49.440><c> possible</c><00:16:50.079><c> for</c><00:16:50.399><c> an</c><00:16:50.720><c> interrupt</c><00:16:51.279><c> to</c><00:16:51.440><c> occur</c>

00:16:52.629 --> 00:16:52.639 align:start position:0%
is it possible for an interrupt to occur
 

00:16:52.639 --> 00:16:55.590 align:start position:0%
is it possible for an interrupt to occur
uh<00:16:53.120><c> when</c><00:16:53.360><c> that</c><00:16:53.680><c> x</c><00:16:53.920><c> plus</c><00:16:54.240><c> 1</c><00:16:54.639><c> is</c><00:16:54.800><c> being</c><00:16:54.959><c> computed</c>

00:16:55.590 --> 00:16:55.600 align:start position:0%
uh when that x plus 1 is being computed
 

00:16:55.600 --> 00:16:56.310 align:start position:0%
uh when that x plus 1 is being computed
in<00:16:55.680><c> the</c><00:16:55.839><c> cast</c>

00:16:56.310 --> 00:16:56.320 align:start position:0%
in the cast
 

00:16:56.320 --> 00:16:59.350 align:start position:0%
in the cast
parameter<00:16:56.959><c> or</c><00:16:57.199><c> cas</c><00:16:58.240><c> parameter</c><00:16:59.040><c> you</c><00:16:59.120><c> mean</c>

00:16:59.350 --> 00:16:59.360 align:start position:0%
parameter or cas parameter you mean
 

00:16:59.360 --> 00:17:01.670 align:start position:0%
parameter or cas parameter you mean
before<00:16:59.759><c> we</c><00:16:59.920><c> actually</c><00:17:00.240><c> execute</c><00:17:00.800><c> cas</c><00:17:01.279><c> but</c><00:17:01.440><c> while</c>

00:17:01.670 --> 00:17:01.680 align:start position:0%
before we actually execute cas but while
 

00:17:01.680 --> 00:17:03.269 align:start position:0%
before we actually execute cas but while
we're<00:17:01.839><c> computing</c><00:17:02.240><c> its</c><00:17:02.399><c> arguments</c>

00:17:03.269 --> 00:17:03.279 align:start position:0%
we're computing its arguments
 

00:17:03.279 --> 00:17:05.590 align:start position:0%
we're computing its arguments
right<00:17:03.680><c> so</c><00:17:03.920><c> like</c><00:17:04.079><c> you</c><00:17:04.319><c> compute</c><00:17:04.799><c> or</c><00:17:04.959><c> you</c><00:17:05.120><c> pass</c><00:17:05.439><c> in</c>

00:17:05.590 --> 00:17:05.600 align:start position:0%
right so like you compute or you pass in
 

00:17:05.600 --> 00:17:06.390 align:start position:0%
right so like you compute or you pass in
the<00:17:05.919><c> x</c>

00:17:06.390 --> 00:17:06.400 align:start position:0%
the x
 

00:17:06.400 --> 00:17:09.110 align:start position:0%
the x
uh<00:17:06.959><c> argument</c><00:17:07.439><c> and</c><00:17:07.520><c> that's</c><00:17:07.760><c> okay</c><00:17:08.160><c> but</c><00:17:08.400><c> you</c>

00:17:09.110 --> 00:17:09.120 align:start position:0%
uh argument and that's okay but you
 

00:17:09.120 --> 00:17:10.949 align:start position:0%
uh argument and that's okay but you
before<00:17:09.520><c> you</c><00:17:09.600><c> compute</c><00:17:10.000><c> the</c><00:17:10.079><c> x</c><00:17:10.319><c> plus</c><00:17:10.559><c> one</c><00:17:10.799><c> or</c>

00:17:10.949 --> 00:17:10.959 align:start position:0%
before you compute the x plus one or
 

00:17:10.959 --> 00:17:12.470 align:start position:0%
before you compute the x plus one or
while<00:17:11.199><c> you're</c><00:17:11.360><c> computing</c><00:17:11.760><c> x</c><00:17:11.919><c> plus</c><00:17:12.160><c> one</c>

00:17:12.470 --> 00:17:12.480 align:start position:0%
while you're computing x plus one
 

00:17:12.480 --> 00:17:15.590 align:start position:0%
while you're computing x plus one
an<00:17:12.640><c> interrupt</c><00:17:13.120><c> occurs</c><00:17:14.160><c> um</c><00:17:14.640><c> until</c><00:17:14.959><c> x</c><00:17:15.120><c> plus</c><00:17:15.360><c> one</c>

00:17:15.590 --> 00:17:15.600 align:start position:0%
an interrupt occurs um until x plus one
 

00:17:15.600 --> 00:17:16.150 align:start position:0%
an interrupt occurs um until x plus one
is<00:17:15.679><c> wrong</c>

00:17:16.150 --> 00:17:16.160 align:start position:0%
is wrong
 

00:17:16.160 --> 00:17:18.470 align:start position:0%
is wrong
so<00:17:17.039><c> if</c><00:17:17.280><c> an</c><00:17:17.439><c> interrupt</c><00:17:17.760><c> occurs</c><00:17:18.160><c> while</c><00:17:18.319><c> we're</c>

00:17:18.470 --> 00:17:18.480 align:start position:0%
so if an interrupt occurs while we're
 

00:17:18.480 --> 00:17:19.750 align:start position:0%
so if an interrupt occurs while we're
computing<00:17:18.799><c> x</c><00:17:19.039><c> plus</c><00:17:19.199><c> one</c><00:17:19.360><c> that</c><00:17:19.520><c> means</c><00:17:19.679><c> we</c>

00:17:19.750 --> 00:17:19.760 align:start position:0%
computing x plus one that means we
 

00:17:19.760 --> 00:17:20.470 align:start position:0%
computing x plus one that means we
haven't

00:17:20.470 --> 00:17:20.480 align:start position:0%
haven't
 

00:17:20.480 --> 00:17:22.309 align:start position:0%
haven't
cas<00:17:20.959><c> is</c><00:17:21.039><c> actually</c><00:17:21.280><c> an</c><00:17:21.439><c> instruction</c><00:17:22.079><c> it's</c><00:17:22.240><c> a</c>

00:17:22.309 --> 00:17:22.319 align:start position:0%
cas is actually an instruction it's a
 

00:17:22.319 --> 00:17:24.150 align:start position:0%
cas is actually an instruction it's a
single<00:17:22.640><c> machine</c><00:17:22.959><c> instruction</c>

00:17:24.150 --> 00:17:24.160 align:start position:0%
single machine instruction
 

00:17:24.160 --> 00:17:25.590 align:start position:0%
single machine instruction
so<00:17:24.400><c> if</c><00:17:24.480><c> we're</c><00:17:24.640><c> computing</c><00:17:25.039><c> s</c><00:17:25.199><c> plus</c><00:17:25.360><c> one</c><00:17:25.520><c> that</c>

00:17:25.590 --> 00:17:25.600 align:start position:0%
so if we're computing s plus one that
 

00:17:25.600 --> 00:17:27.909 align:start position:0%
so if we're computing s plus one that
means<00:17:25.760><c> we</c><00:17:25.839><c> haven't</c><00:17:26.079><c> called</c><00:17:26.400><c> cas</c><00:17:26.959><c> yet</c>

00:17:27.909 --> 00:17:27.919 align:start position:0%
means we haven't called cas yet
 

00:17:27.919 --> 00:17:30.630 align:start position:0%
means we haven't called cas yet
if<00:17:28.079><c> the</c><00:17:28.240><c> interrupt</c><00:17:28.720><c> happens</c><00:17:30.080><c> and</c><00:17:30.320><c> all</c><00:17:30.480><c> kinds</c>

00:17:30.630 --> 00:17:30.640 align:start position:0%
if the interrupt happens and all kinds
 

00:17:30.640 --> 00:17:32.789 align:start position:0%
if the interrupt happens and all kinds
of<00:17:30.720><c> things</c><00:17:30.960><c> may</c><00:17:31.200><c> happen</c>

00:17:32.789 --> 00:17:32.799 align:start position:0%
of things may happen
 

00:17:32.799 --> 00:17:34.390 align:start position:0%
of things may happen
we're<00:17:32.960><c> going</c><00:17:33.039><c> to</c><00:17:33.120><c> get</c><00:17:33.280><c> the</c><00:17:33.440><c> same</c><00:17:34.080><c> if</c><00:17:34.240><c> we</c>

00:17:34.390 --> 00:17:34.400 align:start position:0%
we're going to get the same if we
 

00:17:34.400 --> 00:17:37.909 align:start position:0%
we're going to get the same if we
originally<00:17:34.880><c> read</c><00:17:35.200><c> zero</c><00:17:35.679><c> here</c>

00:17:37.909 --> 00:17:37.919 align:start position:0%
originally read zero here
 

00:17:37.919 --> 00:17:40.710 align:start position:0%
originally read zero here
right<00:17:38.320><c> then</c><00:17:38.720><c> interrupt</c><00:17:39.120><c> or</c><00:17:39.200><c> no</c><00:17:39.440><c> interrupt</c>

00:17:40.710 --> 00:17:40.720 align:start position:0%
right then interrupt or no interrupt
 

00:17:40.720 --> 00:17:41.669 align:start position:0%
right then interrupt or no interrupt
we're<00:17:40.880><c> going</c><00:17:40.960><c> to</c><00:17:41.200><c> pass</c>

00:17:41.669 --> 00:17:41.679 align:start position:0%
we're going to pass
 

00:17:41.679 --> 00:17:44.070 align:start position:0%
we're going to pass
one<00:17:42.160><c> as</c><00:17:42.400><c> this</c><00:17:42.559><c> third</c><00:17:42.880><c> argument</c><00:17:43.760><c> because</c><00:17:43.919><c> the</c>

00:17:44.070 --> 00:17:44.080 align:start position:0%
one as this third argument because the
 

00:17:44.080 --> 00:17:45.350 align:start position:0%
one as this third argument because the
interrupt<00:17:44.320><c> is</c><00:17:44.400><c> not</c><00:17:44.559><c> going</c><00:17:44.640><c> to</c><00:17:44.720><c> reach</c><00:17:44.960><c> out</c><00:17:45.120><c> and</c>

00:17:45.350 --> 00:17:45.360 align:start position:0%
interrupt is not going to reach out and
 

00:17:45.360 --> 00:17:47.270 align:start position:0%
interrupt is not going to reach out and
change<00:17:45.679><c> this</c><00:17:45.840><c> is</c><00:17:45.919><c> a</c><00:17:46.080><c> local</c><00:17:46.400><c> this</c><00:17:46.640><c> x</c><00:17:46.799><c> is</c><00:17:46.960><c> a</c><00:17:47.039><c> local</c>

00:17:47.270 --> 00:17:47.280 align:start position:0%
change this is a local this x is a local
 

00:17:47.280 --> 00:17:48.789 align:start position:0%
change this is a local this x is a local
variable

00:17:48.789 --> 00:17:48.799 align:start position:0%
variable
 

00:17:48.799 --> 00:17:51.110 align:start position:0%
variable
for<00:17:48.960><c> this</c><00:17:49.120><c> code</c><00:17:49.600><c> so</c><00:17:50.160><c> the</c><00:17:50.480><c> interrupt</c><00:17:50.960><c> or</c>

00:17:51.110 --> 00:17:51.120 align:start position:0%
for this code so the interrupt or
 

00:17:51.120 --> 00:17:52.310 align:start position:0%
for this code so the interrupt or
context<00:17:51.440><c> which</c><00:17:51.679><c> or</c><00:17:51.760><c> anything</c><00:17:52.000><c> is</c><00:17:52.160><c> not</c><00:17:52.240><c> going</c>

00:17:52.310 --> 00:17:52.320 align:start position:0%
context which or anything is not going
 

00:17:52.320 --> 00:17:52.870 align:start position:0%
context which or anything is not going
to<00:17:52.480><c> change</c>

00:17:52.870 --> 00:17:52.880 align:start position:0%
to change
 

00:17:52.880 --> 00:17:56.230 align:start position:0%
to change
x<00:17:54.080><c> and</c><00:17:54.160><c> so</c><00:17:54.320><c> that</c><00:17:54.400><c> means</c><00:17:54.559><c> we're</c><00:17:54.640><c> going</c><00:17:54.799><c> to</c><00:17:54.880><c> pass</c>

00:17:56.230 --> 00:17:56.240 align:start position:0%
x and so that means we're going to pass
 

00:17:56.240 --> 00:17:59.750 align:start position:0%
x and so that means we're going to pass
0<00:17:56.640><c> and</c><00:17:56.720><c> 1</c><00:17:57.039><c> here</c><00:17:57.360><c> and</c><00:17:57.840><c> you</c><00:17:58.000><c> know</c>

00:17:59.750 --> 00:17:59.760 align:start position:0%
0 and 1 here and you know
 

00:17:59.760 --> 00:18:01.590 align:start position:0%
0 and 1 here and you know
if<00:18:00.080><c> n</c><00:18:00.400><c> is</c><00:18:00.480><c> still</c><00:18:00.720><c> zero</c><00:18:00.960><c> then</c><00:18:01.120><c> we'll</c><00:18:01.280><c> set</c><00:18:01.440><c> it</c><00:18:01.520><c> to</c>

00:18:01.590 --> 00:18:01.600 align:start position:0%
if n is still zero then we'll set it to
 

00:18:01.600 --> 00:18:03.029 align:start position:0%
if n is still zero then we'll set it to
one<00:18:01.840><c> and</c><00:18:01.919><c> that's</c><00:18:02.160><c> that's</c><00:18:02.400><c> what</c><00:18:02.559><c> we</c><00:18:02.640><c> want</c><00:18:02.880><c> if</c>

00:18:03.029 --> 00:18:03.039 align:start position:0%
one and that's that's what we want if
 

00:18:03.039 --> 00:18:04.230 align:start position:0%
one and that's that's what we want if
it's<00:18:03.120><c> not</c><00:18:03.280><c> still</c><00:18:03.520><c> zero</c><00:18:03.840><c> then</c>

00:18:04.230 --> 00:18:04.240 align:start position:0%
it's not still zero then
 

00:18:04.240 --> 00:18:06.710 align:start position:0%
it's not still zero then
compare<00:18:04.559><c> and</c><00:18:04.640><c> swap</c><00:18:04.880><c> won't</c><00:18:05.360><c> change</c><00:18:05.679><c> it</c><00:18:06.480><c> right</c><00:18:06.640><c> i</c>

00:18:06.710 --> 00:18:06.720 align:start position:0%
compare and swap won't change it right i
 

00:18:06.720 --> 00:18:07.909 align:start position:0%
compare and swap won't change it right i
guess<00:18:06.960><c> you</c><00:18:07.039><c> would</c><00:18:07.120><c> have</c><00:18:07.360><c> problems</c><00:18:07.679><c> if</c><00:18:07.840><c> you</c>

00:18:07.909 --> 00:18:07.919 align:start position:0%
guess you would have problems if you
 

00:18:07.919 --> 00:18:11.590 align:start position:0%
guess you would have problems if you
didn't<00:18:08.160><c> set</c><00:18:08.400><c> that</c><00:18:08.559><c> local</c><00:18:08.880><c> variable</c><00:18:09.280><c> then</c>

00:18:11.590 --> 00:18:11.600 align:start position:0%
 
 

00:18:11.600 --> 00:18:14.630 align:start position:0%
 
yeah<00:18:11.840><c> if</c><00:18:11.919><c> you</c><00:18:12.080><c> used</c><00:18:12.880><c> l</c><00:18:13.120><c> arrow</c><00:18:13.600><c> m</c><00:18:13.919><c> here</c>

00:18:14.630 --> 00:18:14.640 align:start position:0%
yeah if you used l arrow m here
 

00:18:14.640 --> 00:18:16.549 align:start position:0%
yeah if you used l arrow m here
yeah<00:18:14.880><c> and</c><00:18:15.039><c> l</c><00:18:15.280><c> arrow</c><00:18:15.520><c> n</c><00:18:15.679><c> plus</c><00:18:15.919><c> one</c><00:18:16.160><c> you</c><00:18:16.320><c> would</c>

00:18:16.549 --> 00:18:16.559 align:start position:0%
yeah and l arrow n plus one you would
 

00:18:16.559 --> 00:18:17.909 align:start position:0%
yeah and l arrow n plus one you would
almost<00:18:16.880><c> certainly</c><00:18:17.200><c> be</c><00:18:17.360><c> in</c><00:18:17.440><c> big</c><00:18:17.600><c> trouble</c>

00:18:17.909 --> 00:18:17.919 align:start position:0%
almost certainly be in big trouble
 

00:18:17.919 --> 00:18:18.870 align:start position:0%
almost certainly be in big trouble
because<00:18:18.160><c> then</c>

00:18:18.870 --> 00:18:18.880 align:start position:0%
because then
 

00:18:18.880 --> 00:18:21.350 align:start position:0%
because then
n<00:18:19.039><c> could</c><00:18:19.280><c> change</c><00:18:19.600><c> under</c><00:18:19.919><c> foot</c><00:18:20.400><c> at</c><00:18:20.559><c> any</c><00:18:20.799><c> time</c>

00:18:21.350 --> 00:18:21.360 align:start position:0%
n could change under foot at any time
 

00:18:21.360 --> 00:18:22.230 align:start position:0%
n could change under foot at any time
that's<00:18:21.520><c> why</c><00:18:21.679><c> we</c>

00:18:22.230 --> 00:18:22.240 align:start position:0%
that's why we
 

00:18:22.240 --> 00:18:25.190 align:start position:0%
that's why we
actually<00:18:22.720><c> grab</c><00:18:23.039><c> a</c><00:18:23.200><c> copy</c><00:18:23.600><c> and</c><00:18:24.480><c> grab</c><00:18:24.799><c> a</c><00:18:24.880><c> copy</c>

00:18:25.190 --> 00:18:25.200 align:start position:0%
actually grab a copy and grab a copy
 

00:18:25.200 --> 00:18:26.870 align:start position:0%
actually grab a copy and grab a copy
here<00:18:25.440><c> in</c><00:18:25.600><c> order</c><00:18:25.840><c> to</c><00:18:26.080><c> sort</c><00:18:26.240><c> of</c>

00:18:26.870 --> 00:18:26.880 align:start position:0%
here in order to sort of
 

00:18:26.880 --> 00:18:32.070 align:start position:0%
here in order to sort of
fix<00:18:27.200><c> a</c><00:18:27.280><c> specific</c><00:18:27.840><c> value</c><00:18:28.880><c> yeah</c><00:18:29.120><c> yes</c>

00:18:32.070 --> 00:18:32.080 align:start position:0%
 
 

00:18:32.080 --> 00:18:35.909 align:start position:0%
 
okay

00:18:35.909 --> 00:18:35.919 align:start position:0%
 
 

00:18:35.919 --> 00:18:38.549 align:start position:0%
 
um<00:18:36.720><c> if</c><00:18:36.960><c> two</c><00:18:37.200><c> readers</c><00:18:37.760><c> okay</c><00:18:37.919><c> so</c><00:18:38.080><c> i</c><00:18:38.240><c> cover</c><00:18:38.480><c> the</c>

00:18:38.549 --> 00:18:38.559 align:start position:0%
um if two readers okay so i cover the
 

00:18:38.559 --> 00:18:39.029 align:start position:0%
um if two readers okay so i cover the
case<00:18:38.720><c> of</c>

00:18:39.029 --> 00:18:39.039 align:start position:0%
case of
 

00:18:39.039 --> 00:18:42.150 align:start position:0%
case of
whatever<00:18:39.440><c> writer</c><00:18:40.960><c> calls</c><00:18:41.280><c> at</c><00:18:41.360><c> the</c><00:18:41.440><c> same</c>

00:18:42.150 --> 00:18:42.160 align:start position:0%
whatever writer calls at the same
 

00:18:42.160 --> 00:18:43.830 align:start position:0%
whatever writer calls at the same
w<00:18:42.400><c> lock</c><00:18:42.640><c> is</c><00:18:42.720><c> called</c><00:18:42.960><c> the</c><00:18:43.039><c> same</c><00:18:43.280><c> time</c><00:18:43.520><c> as</c><00:18:43.679><c> our</c>

00:18:43.830 --> 00:18:43.840 align:start position:0%
w lock is called the same time as our
 

00:18:43.840 --> 00:18:45.750 align:start position:0%
w lock is called the same time as our
lock

00:18:45.750 --> 00:18:45.760 align:start position:0%
lock
 

00:18:45.760 --> 00:18:47.190 align:start position:0%
lock
it's<00:18:45.919><c> also</c><00:18:46.160><c> interesting</c><00:18:46.480><c> to</c><00:18:46.559><c> wonder</c><00:18:46.880><c> what</c><00:18:47.039><c> if</c>

00:18:47.190 --> 00:18:47.200 align:start position:0%
it's also interesting to wonder what if
 

00:18:47.200 --> 00:18:48.789 align:start position:0%
it's also interesting to wonder what if
our<00:18:47.360><c> lock</c><00:18:47.600><c> is</c><00:18:47.679><c> called</c><00:18:47.919><c> at</c><00:18:48.000><c> the</c><00:18:48.080><c> same</c><00:18:48.320><c> time</c>

00:18:48.789 --> 00:18:48.799 align:start position:0%
our lock is called at the same time
 

00:18:48.799 --> 00:18:52.230 align:start position:0%
our lock is called at the same time
um<00:18:49.760><c> so</c><00:18:50.240><c> supposing</c><00:18:51.039><c> n</c><00:18:51.280><c> starts</c><00:18:51.520><c> at</c><00:18:51.679><c> a</c><00:18:51.760><c> zero</c><00:18:52.080><c> we</c>

00:18:52.230 --> 00:18:52.240 align:start position:0%
um so supposing n starts at a zero we
 

00:18:52.240 --> 00:18:54.230 align:start position:0%
um so supposing n starts at a zero we
know<00:18:52.480><c> if</c><00:18:52.640><c> two</c><00:18:52.880><c> r</c><00:18:53.120><c> locks</c>

00:18:54.230 --> 00:18:54.240 align:start position:0%
know if two r locks
 

00:18:54.240 --> 00:18:56.470 align:start position:0%
know if two r locks
are<00:18:54.400><c> called</c><00:18:54.640><c> at</c><00:18:54.799><c> the</c><00:18:54.880><c> same</c><00:18:55.120><c> time</c><00:18:55.520><c> what</c><00:18:55.679><c> we</c><00:18:56.080><c> want</c>

00:18:56.470 --> 00:18:56.480 align:start position:0%
are called at the same time what we want
 

00:18:56.480 --> 00:18:58.230 align:start position:0%
are called at the same time what we want
is<00:18:56.640><c> for</c><00:18:56.880><c> n</c><00:18:57.039><c> to</c><00:18:57.280><c> end</c><00:18:57.440><c> up</c><00:18:57.520><c> with</c><00:18:57.679><c> value</c>

00:18:58.230 --> 00:18:58.240 align:start position:0%
is for n to end up with value
 

00:18:58.240 --> 00:19:01.430 align:start position:0%
is for n to end up with value
two<00:18:59.120><c> and</c><00:18:59.360><c> for</c><00:18:59.600><c> both</c><00:19:00.000><c> our</c><00:19:00.240><c> locks</c><00:19:00.559><c> to</c><00:19:00.720><c> return</c>

00:19:01.430 --> 00:19:01.440 align:start position:0%
two and for both our locks to return
 

00:19:01.440 --> 00:19:03.430 align:start position:0%
two and for both our locks to return
that's<00:19:01.679><c> what</c><00:19:01.760><c> we</c><00:19:02.000><c> want</c><00:19:02.720><c> because</c><00:19:02.880><c> we</c><00:19:03.039><c> want</c><00:19:03.280><c> two</c>

00:19:03.430 --> 00:19:03.440 align:start position:0%
that's what we want because we want two
 

00:19:03.440 --> 00:19:05.029 align:start position:0%
that's what we want because we want two
readers<00:19:03.840><c> to</c><00:19:04.320><c> be</c><00:19:04.400><c> able</c><00:19:04.559><c> to</c><00:19:04.640><c> execute</c><00:19:04.960><c> in</c>

00:19:05.029 --> 00:19:05.039 align:start position:0%
readers to be able to execute in
 

00:19:05.039 --> 00:19:07.669 align:start position:0%
readers to be able to execute in
parallel<00:19:05.600><c> to</c><00:19:05.760><c> use</c><00:19:06.000><c> the</c><00:19:06.080><c> data</c><00:19:06.400><c> in</c><00:19:06.559><c> parallel</c>

00:19:07.669 --> 00:19:07.679 align:start position:0%
parallel to use the data in parallel
 

00:19:07.679 --> 00:19:11.510 align:start position:0%
parallel to use the data in parallel
um<00:19:09.280><c> okay</c><00:19:09.520><c> so</c>

00:19:11.510 --> 00:19:11.520 align:start position:0%
um okay so
 

00:19:11.520 --> 00:19:14.230 align:start position:0%
um okay so
they're<00:19:11.679><c> both</c><00:19:11.919><c> going</c><00:19:12.080><c> to</c><00:19:12.160><c> see</c><00:19:12.400><c> zero</c><00:19:13.840><c> at</c><00:19:14.000><c> this</c>

00:19:14.230 --> 00:19:14.240 align:start position:0%
they're both going to see zero at this
 

00:19:14.240 --> 00:19:15.110 align:start position:0%
they're both going to see zero at this
point<00:19:14.559><c> so</c>

00:19:15.110 --> 00:19:15.120 align:start position:0%
point so
 

00:19:15.120 --> 00:19:16.310 align:start position:0%
point so
at<00:19:15.200><c> this</c><00:19:15.440><c> point</c><00:19:15.600><c> both</c><00:19:15.840><c> of</c><00:19:15.919><c> them</c><00:19:16.080><c> are</c><00:19:16.160><c> going</c><00:19:16.240><c> to</c>

00:19:16.310 --> 00:19:16.320 align:start position:0%
at this point both of them are going to
 

00:19:16.320 --> 00:19:18.310 align:start position:0%
at this point both of them are going to
have<00:19:16.480><c> x</c><00:19:16.720><c> equal</c><00:19:16.880><c> to</c><00:19:17.039><c> zero</c><00:19:17.840><c> they're</c><00:19:18.000><c> both</c><00:19:18.240><c> going</c>

00:19:18.310 --> 00:19:18.320 align:start position:0%
have x equal to zero they're both going
 

00:19:18.320 --> 00:19:18.950 align:start position:0%
have x equal to zero they're both going
to<00:19:18.480><c> call</c>

00:19:18.950 --> 00:19:18.960 align:start position:0%
to call
 

00:19:18.960 --> 00:19:23.029 align:start position:0%
to call
compare<00:19:19.440><c> and</c><00:19:19.600><c> swap</c><00:19:20.000><c> with</c><00:19:20.640><c> zero</c><00:19:21.120><c> and</c><00:19:21.360><c> one</c>

00:19:23.029 --> 00:19:23.039 align:start position:0%
compare and swap with zero and one
 

00:19:23.039 --> 00:19:27.190 align:start position:0%
compare and swap with zero and one
um<00:19:25.600><c> only</c><00:19:25.919><c> one</c><00:19:26.160><c> of</c><00:19:26.240><c> those</c><00:19:26.400><c> two</c><00:19:26.640><c> compare</c><00:19:27.120><c> and</c>

00:19:27.190 --> 00:19:27.200 align:start position:0%
um only one of those two compare and
 

00:19:27.200 --> 00:19:28.390 align:start position:0%
um only one of those two compare and
swaps<00:19:27.679><c> hopefully</c>

00:19:28.390 --> 00:19:28.400 align:start position:0%
swaps hopefully
 

00:19:28.400 --> 00:19:30.150 align:start position:0%
swaps hopefully
exactly<00:19:28.960><c> one</c><00:19:29.200><c> of</c><00:19:29.280><c> those</c><00:19:29.440><c> two</c><00:19:29.600><c> comparison</c>

00:19:30.150 --> 00:19:30.160 align:start position:0%
exactly one of those two comparison
 

00:19:30.160 --> 00:19:31.669 align:start position:0%
exactly one of those two comparison
swaps<00:19:30.559><c> will</c><00:19:30.720><c> succeed</c>

00:19:31.669 --> 00:19:31.679 align:start position:0%
swaps will succeed
 

00:19:31.679 --> 00:19:34.150 align:start position:0%
swaps will succeed
whichever<00:19:32.160><c> one</c><00:19:32.799><c> you</c><00:19:32.960><c> know</c><00:19:33.360><c> parent</c><00:19:33.520><c> swap</c><00:19:34.000><c> it's</c>

00:19:34.150 --> 00:19:34.160 align:start position:0%
whichever one you know parent swap it's
 

00:19:34.160 --> 00:19:36.310 align:start position:0%
whichever one you know parent swap it's
an<00:19:34.320><c> atomic</c><00:19:34.799><c> instruction</c>

00:19:36.310 --> 00:19:36.320 align:start position:0%
an atomic instruction
 

00:19:36.320 --> 00:19:39.110 align:start position:0%
an atomic instruction
there<00:19:36.720><c> only</c><00:19:37.039><c> one</c><00:19:37.200><c> of</c><00:19:37.360><c> them</c><00:19:37.520><c> happens</c><00:19:37.840><c> at</c><00:19:38.000><c> a</c><00:19:38.160><c> time</c>

00:19:39.110 --> 00:19:39.120 align:start position:0%
there only one of them happens at a time
 

00:19:39.120 --> 00:19:40.630 align:start position:0%
there only one of them happens at a time
on<00:19:39.280><c> a</c><00:19:39.360><c> given</c><00:19:39.600><c> memory</c><00:19:40.000><c> location</c>

00:19:40.630 --> 00:19:40.640 align:start position:0%
on a given memory location
 

00:19:40.640 --> 00:19:43.830 align:start position:0%
on a given memory location
so<00:19:40.799><c> whichever</c><00:19:41.360><c> compare</c><00:19:42.880><c> on</c><00:19:42.960><c> top</c><00:19:43.280><c> is</c><00:19:43.440><c> first</c>

00:19:43.830 --> 00:19:43.840 align:start position:0%
so whichever compare on top is first
 

00:19:43.840 --> 00:19:44.950 align:start position:0%
so whichever compare on top is first
we'll<00:19:44.080><c> see</c>

00:19:44.950 --> 00:19:44.960 align:start position:0%
we'll see
 

00:19:44.960 --> 00:19:46.950 align:start position:0%
we'll see
uh<00:19:45.200><c> that</c><00:19:45.440><c> at</c><00:19:45.760><c> n</c><00:19:45.919><c> is</c><00:19:46.080><c> equal</c><00:19:46.240><c> to</c><00:19:46.400><c> zero</c><00:19:46.720><c> and</c><00:19:46.799><c> we'll</c>

00:19:46.950 --> 00:19:46.960 align:start position:0%
uh that at n is equal to zero and we'll
 

00:19:46.960 --> 00:19:48.230 align:start position:0%
uh that at n is equal to zero and we'll
set<00:19:47.120><c> it</c><00:19:47.200><c> to</c><00:19:47.360><c> one</c>

00:19:48.230 --> 00:19:48.240 align:start position:0%
set it to one
 

00:19:48.240 --> 00:19:50.870 align:start position:0%
set it to one
the<00:19:48.559><c> other</c><00:19:48.880><c> course</c><00:19:49.600><c> simultaneous</c><00:19:50.320><c> call</c><00:19:50.480><c> to</c><00:19:50.720><c> r</c>

00:19:50.870 --> 00:19:50.880 align:start position:0%
the other course simultaneous call to r
 

00:19:50.880 --> 00:19:51.350 align:start position:0%
the other course simultaneous call to r
lock

00:19:51.350 --> 00:19:51.360 align:start position:0%
lock
 

00:19:51.360 --> 00:19:54.390 align:start position:0%
lock
its<00:19:51.760><c> compare</c><00:19:52.080><c> swap</c><00:19:52.400><c> will</c><00:19:52.480><c> then</c><00:19:52.799><c> execute</c>

00:19:54.390 --> 00:19:54.400 align:start position:0%
its compare swap will then execute
 

00:19:54.400 --> 00:19:58.230 align:start position:0%
its compare swap will then execute
and<00:19:54.559><c> it'll</c><00:19:54.799><c> still</c><00:19:55.039><c> pass</c><00:19:55.360><c> zero</c><00:19:55.679><c> and</c><00:19:55.840><c> one</c><00:19:56.080><c> here</c>

00:19:58.230 --> 00:19:58.240 align:start position:0%
and it'll still pass zero and one here
 

00:19:58.240 --> 00:20:00.549 align:start position:0%
and it'll still pass zero and one here
but<00:19:58.720><c> n</c><00:19:59.039><c> will</c><00:19:59.200><c> now</c><00:19:59.440><c> be</c><00:19:59.600><c> equal</c><00:19:59.760><c> to</c><00:19:59.919><c> one</c><00:20:00.320><c> and</c><00:20:00.400><c> so</c>

00:20:00.549 --> 00:20:00.559 align:start position:0%
but n will now be equal to one and so
 

00:20:00.559 --> 00:20:02.789 align:start position:0%
but n will now be equal to one and so
the<00:20:00.720><c> compare</c><00:20:00.960><c> and</c><00:20:01.039><c> top</c><00:20:01.280><c> will</c><00:20:01.600><c> fail</c>

00:20:02.789 --> 00:20:02.799 align:start position:0%
the compare and top will fail
 

00:20:02.799 --> 00:20:07.270 align:start position:0%
the compare and top will fail
for<00:20:02.960><c> the</c><00:20:03.120><c> second</c><00:20:03.440><c> core</c><00:20:04.720><c> and</c><00:20:04.880><c> return</c><00:20:05.280><c> zero</c>

00:20:07.270 --> 00:20:07.280 align:start position:0%
for the second core and return zero
 

00:20:07.280 --> 00:20:08.630 align:start position:0%
for the second core and return zero
the<00:20:07.440><c> second</c><00:20:07.679><c> core</c><00:20:07.919><c> will</c><00:20:08.000><c> go</c><00:20:08.159><c> back</c><00:20:08.240><c> to</c><00:20:08.320><c> the</c><00:20:08.400><c> top</c>

00:20:08.630 --> 00:20:08.640 align:start position:0%
the second core will go back to the top
 

00:20:08.640 --> 00:20:10.390 align:start position:0%
the second core will go back to the top
of<00:20:08.720><c> this</c><00:20:08.960><c> loop</c><00:20:09.440><c> at</c><00:20:09.520><c> this</c><00:20:09.679><c> point</c><00:20:09.840><c> it'll</c><00:20:10.080><c> read</c>

00:20:10.390 --> 00:20:10.400 align:start position:0%
of this loop at this point it'll read
 

00:20:10.400 --> 00:20:11.510 align:start position:0%
of this loop at this point it'll read
one

00:20:11.510 --> 00:20:11.520 align:start position:0%
one
 

00:20:11.520 --> 00:20:14.710 align:start position:0%
one
um<00:20:12.480><c> that's</c><00:20:12.720><c> not</c><00:20:12.960><c> less</c><00:20:13.120><c> than</c><00:20:13.360><c> zero</c><00:20:13.679><c> so</c>

00:20:14.710 --> 00:20:14.720 align:start position:0%
um that's not less than zero so
 

00:20:14.720 --> 00:20:16.070 align:start position:0%
um that's not less than zero so
we'll<00:20:14.880><c> go</c><00:20:15.120><c> on</c><00:20:15.200><c> to</c><00:20:15.280><c> the</c><00:20:15.360><c> compare</c><00:20:15.679><c> and</c><00:20:15.760><c> swap</c><00:20:16.000><c> and</c>

00:20:16.070 --> 00:20:16.080 align:start position:0%
we'll go on to the compare and swap and
 

00:20:16.080 --> 00:20:17.830 align:start position:0%
we'll go on to the compare and swap and
now<00:20:16.240><c> it'll</c><00:20:16.480><c> pass</c><00:20:16.720><c> one</c><00:20:16.960><c> and</c><00:20:17.120><c> two</c>

00:20:17.830 --> 00:20:17.840 align:start position:0%
now it'll pass one and two
 

00:20:17.840 --> 00:20:19.990 align:start position:0%
now it'll pass one and two
and<00:20:18.000><c> now</c><00:20:18.240><c> the</c><00:20:18.559><c> second</c><00:20:19.360><c> read</c><00:20:19.600><c> lock</c><00:20:19.760><c> will</c>

00:20:19.990 --> 00:20:20.000 align:start position:0%
and now the second read lock will
 

00:20:20.000 --> 00:20:20.950 align:start position:0%
and now the second read lock will
succeed

00:20:20.950 --> 00:20:20.960 align:start position:0%
succeed
 

00:20:20.960 --> 00:20:23.590 align:start position:0%
succeed
both<00:20:21.200><c> of</c><00:20:21.280><c> them</c><00:20:21.440><c> will</c><00:20:21.520><c> have</c><00:20:21.679><c> the</c><00:20:21.840><c> log</c><00:20:23.360><c> so</c><00:20:23.520><c> the</c>

00:20:23.590 --> 00:20:23.600 align:start position:0%
both of them will have the log so the
 

00:20:23.600 --> 00:20:25.029 align:start position:0%
both of them will have the log so the
first<00:20:23.760><c> one</c><00:20:23.919><c> succeeded</c><00:20:24.320><c> in</c><00:20:24.400><c> the</c><00:20:24.480><c> first</c><00:20:24.640><c> stride</c>

00:20:25.029 --> 00:20:25.039 align:start position:0%
first one succeeded in the first stride
 

00:20:25.039 --> 00:20:26.230 align:start position:0%
first one succeeded in the first stride
the<00:20:25.120><c> second</c><00:20:25.360><c> one</c><00:20:25.520><c> actually</c><00:20:25.760><c> go</c><00:20:25.919><c> back</c>

00:20:26.230 --> 00:20:26.240 align:start position:0%
the second one actually go back
 

00:20:26.240 --> 00:20:31.350 align:start position:0%
the second one actually go back
to<00:20:26.400><c> the</c><00:20:26.880><c> loop</c><00:20:27.200><c> and</c><00:20:27.280><c> try</c><00:20:27.520><c> again</c>

00:20:31.350 --> 00:20:31.360 align:start position:0%
 
 

00:20:31.360 --> 00:20:35.510 align:start position:0%
 
any<00:20:32.840><c> questions</c>

00:20:35.510 --> 00:20:35.520 align:start position:0%
any questions
 

00:20:35.520 --> 00:20:38.710 align:start position:0%
any questions
um<00:20:36.400><c> oh</c><00:20:36.720><c> sorry</c><00:20:37.039><c> so</c><00:20:37.200><c> it</c><00:20:37.360><c> is</c><00:20:37.760><c> somehow</c><00:20:38.240><c> possible</c>

00:20:38.710 --> 00:20:38.720 align:start position:0%
um oh sorry so it is somehow possible
 

00:20:38.720 --> 00:20:39.669 align:start position:0%
um oh sorry so it is somehow possible
that

00:20:39.669 --> 00:20:39.679 align:start position:0%
that
 

00:20:39.679 --> 00:20:43.029 align:start position:0%
that
so<00:20:40.400><c> a</c><00:20:40.559><c> bunch</c><00:20:40.799><c> of</c><00:20:40.960><c> reads</c><00:20:41.679><c> come</c><00:20:42.559><c> and</c>

00:20:43.029 --> 00:20:43.039 align:start position:0%
so a bunch of reads come and
 

00:20:43.039 --> 00:20:45.270 align:start position:0%
so a bunch of reads come and
they<00:20:43.760><c> they're</c><00:20:44.159><c> they're</c><00:20:44.400><c> reading</c><00:20:44.720><c> their</c><00:20:44.960><c> stuff</c>

00:20:45.270 --> 00:20:45.280 align:start position:0%
they they're they're reading their stuff
 

00:20:45.280 --> 00:20:46.310 align:start position:0%
they they're they're reading their stuff
and<00:20:45.360><c> then</c>

00:20:46.310 --> 00:20:46.320 align:start position:0%
and then
 

00:20:46.320 --> 00:20:49.270 align:start position:0%
and then
a<00:20:46.559><c> ride</c><00:20:46.880><c> also</c><00:20:47.200><c> comes</c><00:20:47.679><c> and</c><00:20:47.919><c> it</c><00:20:48.080><c> also</c><00:20:48.320><c> wants</c><00:20:48.640><c> to</c>

00:20:49.270 --> 00:20:49.280 align:start position:0%
a ride also comes and it also wants to
 

00:20:49.280 --> 00:20:49.909 align:start position:0%
a ride also comes and it also wants to
write

00:20:49.909 --> 00:20:49.919 align:start position:0%
write
 

00:20:49.919 --> 00:20:51.909 align:start position:0%
write
but<00:20:50.080><c> then</c><00:20:50.240><c> some</c><00:20:50.480><c> other</c><00:20:50.720><c> reads</c><00:20:51.440><c> also</c><00:20:51.679><c> come</c>

00:20:51.909 --> 00:20:51.919 align:start position:0%
but then some other reads also come
 

00:20:51.919 --> 00:20:53.510 align:start position:0%
but then some other reads also come
after<00:20:52.159><c> the</c><00:20:52.320><c> right</c>

00:20:53.510 --> 00:20:53.520 align:start position:0%
after the right
 

00:20:53.520 --> 00:20:56.950 align:start position:0%
after the right
but<00:20:53.679><c> then</c><00:20:53.919><c> somehow</c><00:20:54.720><c> the</c><00:20:55.120><c> reads</c><00:20:56.240><c> like</c>

00:20:56.950 --> 00:20:56.960 align:start position:0%
but then somehow the reads like
 

00:20:56.960 --> 00:21:00.549 align:start position:0%
but then somehow the reads like
outrun<00:20:57.919><c> the</c><00:20:58.159><c> right</c><00:20:59.039><c> and</c><00:20:59.280><c> the</c>

00:21:00.549 --> 00:21:00.559 align:start position:0%
outrun the right and the
 

00:21:00.559 --> 00:21:04.149 align:start position:0%
outrun the right and the
right<00:21:01.039><c> still</c><00:21:01.280><c> has</c><00:21:01.520><c> to</c><00:21:02.000><c> wait</c><00:21:02.320><c> somehow</c><00:21:03.200><c> yes</c><00:21:03.520><c> so</c>

00:21:04.149 --> 00:21:04.159 align:start position:0%
right still has to wait somehow yes so
 

00:21:04.159 --> 00:21:07.110 align:start position:0%
right still has to wait somehow yes so
so<00:21:04.320><c> with</c><00:21:04.480><c> the</c><00:21:04.640><c> sequences</c><00:21:05.200><c> that</c><00:21:05.840><c> a</c><00:21:06.080><c> reader</c>

00:21:07.110 --> 00:21:07.120 align:start position:0%
so with the sequences that a reader
 

00:21:07.120 --> 00:21:08.549 align:start position:0%
so with the sequences that a reader
managed<00:21:07.440><c> to</c><00:21:07.600><c> acquire</c><00:21:08.000><c> the</c><00:21:08.159><c> lock</c>

00:21:08.549 --> 00:21:08.559 align:start position:0%
managed to acquire the lock
 

00:21:08.559 --> 00:21:10.230 align:start position:0%
managed to acquire the lock
one<00:21:08.799><c> or</c><00:21:08.880><c> more</c><00:21:08.960><c> readers</c><00:21:09.360><c> have</c><00:21:09.440><c> the</c><00:21:09.520><c> lock</c><00:21:09.760><c> so</c><00:21:09.919><c> now</c>

00:21:10.230 --> 00:21:10.240 align:start position:0%
one or more readers have the lock so now
 

00:21:10.240 --> 00:21:12.470 align:start position:0%
one or more readers have the lock so now
n<00:21:11.440><c> you</c><00:21:11.520><c> know</c><00:21:11.679><c> each</c><00:21:11.919><c> of</c><00:21:12.000><c> them</c>

00:21:12.470 --> 00:21:12.480 align:start position:0%
n you know each of them
 

00:21:12.480 --> 00:21:14.149 align:start position:0%
n you know each of them
this<00:21:12.720><c> is</c><00:21:12.880><c> called</c><00:21:13.120><c> a</c><00:21:13.200><c> compare</c><00:21:13.520><c> and</c><00:21:13.600><c> swap</c><00:21:14.080><c> you</c>

00:21:14.149 --> 00:21:14.159 align:start position:0%
this is called a compare and swap you
 

00:21:14.159 --> 00:21:15.990 align:start position:0%
this is called a compare and swap you
know<00:21:14.320><c> adds</c><00:21:14.640><c> one</c><00:21:14.880><c> to</c><00:21:15.039><c> n</c><00:21:15.280><c> for</c><00:21:15.440><c> each</c><00:21:15.679><c> reader</c>

00:21:15.990 --> 00:21:16.000 align:start position:0%
know adds one to n for each reader
 

00:21:16.000 --> 00:21:17.909 align:start position:0%
know adds one to n for each reader
so<00:21:16.159><c> now</c><00:21:16.400><c> n</c><00:21:16.640><c> is</c><00:21:16.720><c> greater</c><00:21:16.960><c> than</c><00:21:17.200><c> zero</c><00:21:17.679><c> because</c>

00:21:17.909 --> 00:21:17.919 align:start position:0%
so now n is greater than zero because
 

00:21:17.919 --> 00:21:20.070 align:start position:0%
so now n is greater than zero because
there's<00:21:18.960><c> multiple</c><00:21:19.360><c> readers</c>

00:21:20.070 --> 00:21:20.080 align:start position:0%
there's multiple readers
 

00:21:20.080 --> 00:21:21.669 align:start position:0%
there's multiple readers
if<00:21:20.240><c> a</c><00:21:20.320><c> writer</c><00:21:20.720><c> tries</c><00:21:20.880><c> to</c><00:21:20.960><c> require</c><00:21:21.280><c> the</c><00:21:21.360><c> lock</c><00:21:21.600><c> at</c>

00:21:21.669 --> 00:21:21.679 align:start position:0%
if a writer tries to require the lock at
 

00:21:21.679 --> 00:21:24.070 align:start position:0%
if a writer tries to require the lock at
this<00:21:22.000><c> point</c><00:21:23.039><c> um</c>

00:21:24.070 --> 00:21:24.080 align:start position:0%
this point um
 

00:21:24.080 --> 00:21:27.110 align:start position:0%
this point um
the<00:21:24.320><c> writers</c><00:21:24.880><c> compare</c><00:21:25.360><c> and</c><00:21:25.520><c> swap</c><00:21:26.400><c> the</c><00:21:26.559><c> compare</c>

00:21:27.110 --> 00:21:27.120 align:start position:0%
the writers compare and swap the compare
 

00:21:27.120 --> 00:21:28.070 align:start position:0%
the writers compare and swap the compare
value<00:21:27.520><c> is</c><00:21:27.600><c> zero</c>

00:21:28.070 --> 00:21:28.080 align:start position:0%
value is zero
 

00:21:28.080 --> 00:21:30.310 align:start position:0%
value is zero
so<00:21:28.240><c> compare</c><00:21:28.559><c> and</c><00:21:28.640><c> swap</c><00:21:28.960><c> will</c><00:21:29.360><c> only</c><00:21:29.840><c> change</c><00:21:30.240><c> n</c>

00:21:30.310 --> 00:21:30.320 align:start position:0%
so compare and swap will only change n
 

00:21:30.320 --> 00:21:32.070 align:start position:0%
so compare and swap will only change n
to<00:21:30.480><c> minus</c><00:21:30.960><c> one</c>

00:21:32.070 --> 00:21:32.080 align:start position:0%
to minus one
 

00:21:32.080 --> 00:21:34.630 align:start position:0%
to minus one
if<00:21:32.240><c> its</c><00:21:32.400><c> current</c><00:21:32.720><c> value</c><00:21:33.039><c> is</c><00:21:33.200><c> zero</c><00:21:34.159><c> but</c><00:21:34.320><c> we</c><00:21:34.480><c> know</c>

00:21:34.630 --> 00:21:34.640 align:start position:0%
if its current value is zero but we know
 

00:21:34.640 --> 00:21:35.750 align:start position:0%
if its current value is zero but we know
the<00:21:34.799><c> current</c><00:21:35.120><c> because</c><00:21:35.280><c> there's</c>

00:21:35.750 --> 00:21:35.760 align:start position:0%
the current because there's
 

00:21:35.760 --> 00:21:38.310 align:start position:0%
the current because there's
multiple<00:21:36.159><c> readers</c><00:21:37.360><c> the</c><00:21:37.520><c> current</c><00:21:37.760><c> value</c><00:21:38.000><c> of</c><00:21:38.159><c> n</c>

00:21:38.310 --> 00:21:38.320 align:start position:0%
multiple readers the current value of n
 

00:21:38.320 --> 00:21:40.070 align:start position:0%
multiple readers the current value of n
is<00:21:38.400><c> not</c><00:21:38.640><c> zero</c><00:21:39.039><c> and</c><00:21:39.200><c> so</c><00:21:39.360><c> the</c><00:21:39.440><c> compare</c><00:21:39.679><c> and</c><00:21:39.760><c> swap</c>

00:21:40.070 --> 00:21:40.080 align:start position:0%
is not zero and so the compare and swap
 

00:21:40.080 --> 00:21:41.350 align:start position:0%
is not zero and so the compare and swap
will<00:21:40.320><c> fail</c>

00:21:41.350 --> 00:21:41.360 align:start position:0%
will fail
 

00:21:41.360 --> 00:21:44.470 align:start position:0%
will fail
and<00:21:41.520><c> return</c><00:21:41.919><c> zero</c><00:21:42.320><c> in</c><00:21:42.400><c> the</c><00:21:43.120><c> writer</c><00:21:44.000><c> will</c>

00:21:44.470 --> 00:21:44.480 align:start position:0%
and return zero in the writer will
 

00:21:44.480 --> 00:21:47.190 align:start position:0%
and return zero in the writer will
sit<00:21:44.720><c> here</c><00:21:44.880><c> in</c><00:21:44.960><c> this</c><00:21:45.200><c> loop</c><00:21:46.400><c> basically</c><00:21:46.799><c> waiting</c>

00:21:47.190 --> 00:21:47.200 align:start position:0%
sit here in this loop basically waiting
 

00:21:47.200 --> 00:21:49.830 align:start position:0%
sit here in this loop basically waiting
until<00:21:47.520><c> n</c><00:21:47.679><c> is</c><00:21:47.840><c> equal</c><00:21:48.000><c> to</c><00:21:48.159><c> 0</c>

00:21:49.830 --> 00:21:49.840 align:start position:0%
until n is equal to 0
 

00:21:49.840 --> 00:21:52.070 align:start position:0%
until n is equal to 0
before<00:21:50.159><c> its</c><00:21:50.320><c> compare</c><00:21:50.640><c> and</c><00:21:50.720><c> swap</c><00:21:50.960><c> will</c><00:21:51.120><c> succeed</c>

00:21:52.070 --> 00:21:52.080 align:start position:0%
before its compare and swap will succeed
 

00:21:52.080 --> 00:21:53.190 align:start position:0%
before its compare and swap will succeed
and<00:21:52.240><c> return</c><00:21:52.799><c> and</c>

00:21:53.190 --> 00:21:53.200 align:start position:0%
and return and
 

00:21:53.200 --> 00:21:55.750 align:start position:0%
and return and
give<00:21:53.360><c> the</c><00:21:53.520><c> lock</c><00:21:53.760><c> to</c><00:21:53.840><c> the</c><00:21:53.919><c> writer</c><00:21:55.360><c> so</c><00:21:55.600><c> this</c>

00:21:55.750 --> 00:21:55.760 align:start position:0%
give the lock to the writer so this
 

00:21:55.760 --> 00:21:56.830 align:start position:0%
give the lock to the writer so this
certainly<00:21:56.000><c> means</c><00:21:56.159><c> the</c><00:21:56.240><c> writer</c><00:21:56.480><c> can</c><00:21:56.640><c> be</c>

00:21:56.830 --> 00:21:56.840 align:start position:0%
certainly means the writer can be
 

00:21:56.840 --> 00:21:58.310 align:start position:0%
certainly means the writer can be
starved

00:21:58.310 --> 00:21:58.320 align:start position:0%
starved
 

00:21:58.320 --> 00:21:59.990 align:start position:0%
starved
if<00:21:58.480><c> there's</c><00:21:58.640><c> a</c><00:21:58.720><c> lot</c><00:21:58.960><c> of</c><00:21:59.039><c> readers</c><00:21:59.679><c> and</c><00:21:59.840><c> may</c>

00:21:59.990 --> 00:22:00.000 align:start position:0%
if there's a lot of readers and may
 

00:22:00.000 --> 00:22:01.830 align:start position:0%
if there's a lot of readers and may
never<00:22:00.240><c> be</c><00:22:00.400><c> zero</c><00:22:00.799><c> and</c><00:22:01.039><c> so</c><00:22:01.200><c> the</c><00:22:01.280><c> right</c><00:22:01.440><c> may</c><00:22:01.600><c> never</c>

00:22:01.830 --> 00:22:01.840 align:start position:0%
never be zero and so the right may never
 

00:22:01.840 --> 00:22:03.270 align:start position:0%
never be zero and so the right may never
succeed<00:22:02.159><c> so</c><00:22:02.320><c> that's</c><00:22:02.480><c> a</c><00:22:02.559><c> defect</c><00:22:02.960><c> in</c><00:22:03.039><c> this</c>

00:22:03.270 --> 00:22:03.280 align:start position:0%
succeed so that's a defect in this
 

00:22:03.280 --> 00:22:06.390 align:start position:0%
succeed so that's a defect in this
locking<00:22:03.600><c> scheme</c>

00:22:06.390 --> 00:22:06.400 align:start position:0%
 
 

00:22:06.400 --> 00:22:09.590 align:start position:0%
 
thank<00:22:06.559><c> you</c><00:22:07.440><c> yeah</c><00:22:08.240><c> i</c><00:22:08.400><c> also</c><00:22:08.640><c> have</c><00:22:08.880><c> a</c><00:22:09.200><c> question</c>

00:22:09.590 --> 00:22:09.600 align:start position:0%
thank you yeah i also have a question
 

00:22:09.600 --> 00:22:10.470 align:start position:0%
thank you yeah i also have a question
about<00:22:09.919><c> the</c>

00:22:10.470 --> 00:22:10.480 align:start position:0%
about the
 

00:22:10.480 --> 00:22:12.710 align:start position:0%
about the
the<00:22:10.640><c> two</c><00:22:10.960><c> readers</c><00:22:11.360><c> scenario</c><00:22:11.840><c> that</c><00:22:12.159><c> i</c><00:22:12.480><c> just</c>

00:22:12.710 --> 00:22:12.720 align:start position:0%
the two readers scenario that i just
 

00:22:12.720 --> 00:22:14.549 align:start position:0%
the two readers scenario that i just
mentioned

00:22:14.549 --> 00:22:14.559 align:start position:0%
mentioned
 

00:22:14.559 --> 00:22:17.669 align:start position:0%
mentioned
it<00:22:14.960><c> appears</c><00:22:15.679><c> that</c><00:22:15.919><c> in</c><00:22:16.000><c> the</c><00:22:16.159><c> worst</c><00:22:16.799><c> case</c>

00:22:17.669 --> 00:22:17.679 align:start position:0%
it appears that in the worst case
 

00:22:17.679 --> 00:22:20.310 align:start position:0%
it appears that in the worst case
the<00:22:18.320><c> reader</c><00:22:18.720><c> that</c><00:22:18.960><c> arrives</c><00:22:19.360><c> second</c><00:22:19.840><c> has</c><00:22:20.000><c> to</c><00:22:20.080><c> go</c>

00:22:20.310 --> 00:22:20.320 align:start position:0%
the reader that arrives second has to go
 

00:22:20.320 --> 00:22:21.350 align:start position:0%
the reader that arrives second has to go
through<00:22:20.559><c> another</c>

00:22:21.350 --> 00:22:21.360 align:start position:0%
through another
 

00:22:21.360 --> 00:22:24.390 align:start position:0%
through another
iteration<00:22:21.919><c> of</c><00:22:22.000><c> the</c><00:22:22.159><c> loop</c><00:22:23.200><c> yes</c><00:22:23.679><c> sounds</c>

00:22:24.390 --> 00:22:24.400 align:start position:0%
iteration of the loop yes sounds
 

00:22:24.400 --> 00:22:26.789 align:start position:0%
iteration of the loop yes sounds
somewhat<00:22:24.840><c> wasteful</c><00:22:26.080><c> i</c><00:22:26.159><c> wonder</c><00:22:26.400><c> if</c><00:22:26.559><c> this</c>

00:22:26.789 --> 00:22:26.799 align:start position:0%
somewhat wasteful i wonder if this
 

00:22:26.799 --> 00:22:28.310 align:start position:0%
somewhat wasteful i wonder if this
generalizes<00:22:27.600><c> to</c><00:22:27.840><c> n</c>

00:22:28.310 --> 00:22:28.320 align:start position:0%
generalizes to n
 

00:22:28.320 --> 00:22:30.630 align:start position:0%
generalizes to n
writers<00:22:29.120><c> it</c><00:22:29.360><c> certainly</c><00:22:29.760><c> does</c><00:22:30.159><c> they</c><00:22:30.320><c> all</c><00:22:30.480><c> have</c>

00:22:30.630 --> 00:22:30.640 align:start position:0%
writers it certainly does they all have
 

00:22:30.640 --> 00:22:31.430 align:start position:0%
writers it certainly does they all have
to<00:22:30.799><c> get</c><00:22:30.960><c> lost</c>

00:22:31.430 --> 00:22:31.440 align:start position:0%
to get lost
 

00:22:31.440 --> 00:22:34.549 align:start position:0%
to get lost
and<00:22:31.760><c> start</c><00:22:32.000><c> again</c><00:22:32.640><c> you</c><00:22:32.880><c> put</c><00:22:33.120><c> your</c><00:22:33.280><c> finger</c><00:22:34.400><c> on</c>

00:22:34.549 --> 00:22:34.559 align:start position:0%
and start again you put your finger on
 

00:22:34.559 --> 00:22:35.909 align:start position:0%
and start again you put your finger on
why<00:22:34.799><c> people</c>

00:22:35.909 --> 00:22:35.919 align:start position:0%
why people
 

00:22:35.919 --> 00:22:39.430 align:start position:0%
why people
don't<00:22:36.240><c> like</c><00:22:36.480><c> this</c><00:22:36.720><c> scheme</c><00:22:38.080><c> um</c><00:22:38.640><c> if</c>

00:22:39.430 --> 00:22:39.440 align:start position:0%
don't like this scheme um if
 

00:22:39.440 --> 00:22:42.149 align:start position:0%
don't like this scheme um if
there's<00:22:39.600><c> a</c><00:22:39.679><c> lot</c><00:22:39.919><c> of</c><00:22:40.000><c> simultaneous</c><00:22:40.880><c> reader</c><00:22:41.600><c> um</c>

00:22:42.149 --> 00:22:42.159 align:start position:0%
there's a lot of simultaneous reader um
 

00:22:42.159 --> 00:22:43.669 align:start position:0%
there's a lot of simultaneous reader um
and<00:22:42.320><c> so</c><00:22:42.480><c> for</c>

00:22:43.669 --> 00:22:43.679 align:start position:0%
and so for
 

00:22:43.679 --> 00:22:47.350 align:start position:0%
and so for
for<00:22:43.840><c> the</c><00:22:43.919><c> reason</c><00:22:44.320><c> you</c><00:22:44.480><c> just</c><00:22:44.640><c> mentioned</c><00:22:45.919><c> um</c>

00:22:47.350 --> 00:22:47.360 align:start position:0%
for the reason you just mentioned um
 

00:22:47.360 --> 00:22:50.149 align:start position:0%
for the reason you just mentioned um
orlock<00:22:48.400><c> even</c><00:22:48.720><c> if</c><00:22:48.880><c> there's</c><00:22:49.039><c> no</c><00:22:49.200><c> writers</c><00:22:49.600><c> at</c><00:22:49.760><c> all</c>

00:22:50.149 --> 00:22:50.159 align:start position:0%
orlock even if there's no writers at all
 

00:22:50.159 --> 00:22:51.750 align:start position:0%
orlock even if there's no writers at all
if<00:22:50.320><c> there's</c><00:22:50.480><c> lots</c><00:22:50.720><c> of</c><00:22:50.880><c> readers</c><00:22:51.200><c> or</c><00:22:51.440><c> there's</c>

00:22:51.750 --> 00:22:51.760 align:start position:0%
if there's lots of readers or there's
 

00:22:51.760 --> 00:22:53.510 align:start position:0%
if there's lots of readers or there's
readers<00:22:52.080><c> on</c><00:22:52.240><c> many</c><00:22:52.480><c> cores</c>

00:22:53.510 --> 00:22:53.520 align:start position:0%
readers on many cores
 

00:22:53.520 --> 00:22:58.070 align:start position:0%
readers on many cores
our<00:22:53.760><c> lock</c><00:22:54.320><c> can</c><00:22:54.480><c> be</c><00:22:54.720><c> very</c><00:22:55.280><c> very</c><00:22:55.760><c> expensive</c>

00:22:58.070 --> 00:22:58.080 align:start position:0%
our lock can be very very expensive
 

00:22:58.080 --> 00:23:01.110 align:start position:0%
our lock can be very very expensive
and<00:22:59.520><c> one</c><00:22:59.760><c> thing</c><00:22:59.919><c> you</c><00:23:00.000><c> need</c><00:23:00.159><c> to</c><00:23:00.240><c> know</c><00:23:00.480><c> about</c><00:23:00.720><c> the</c>

00:23:01.110 --> 00:23:01.120 align:start position:0%
and one thing you need to know about the
 

00:23:01.120 --> 00:23:03.510 align:start position:0%
and one thing you need to know about the
our<00:23:01.280><c> lock</c><00:23:01.520><c> scheme</c><00:23:01.840><c> which</c><00:23:02.400><c> i</c><00:23:02.480><c> think</c><00:23:03.360><c> we've</c>

00:23:03.510 --> 00:23:03.520 align:start position:0%
our lock scheme which i think we've
 

00:23:03.520 --> 00:23:07.590 align:start position:0%
our lock scheme which i think we've
already<00:23:03.760><c> mentioned</c><00:23:04.159><c> in</c><00:23:04.240><c> class</c><00:23:04.640><c> is</c><00:23:04.799><c> that</c>

00:23:07.590 --> 00:23:07.600 align:start position:0%
 
 

00:23:07.600 --> 00:23:11.350 align:start position:0%
 
on<00:23:07.760><c> a</c><00:23:07.840><c> multi-core</c><00:23:08.400><c> system</c><00:23:09.200><c> every</c><00:23:09.600><c> core</c>

00:23:11.350 --> 00:23:11.360 align:start position:0%
on a multi-core system every core
 

00:23:11.360 --> 00:23:14.470 align:start position:0%
on a multi-core system every core
has<00:23:11.520><c> an</c><00:23:11.679><c> associated</c><00:23:12.320><c> cache</c><00:23:13.600><c> the</c><00:23:14.159><c> we'll</c><00:23:14.320><c> say</c>

00:23:14.470 --> 00:23:14.480 align:start position:0%
has an associated cache the we'll say
 

00:23:14.480 --> 00:23:16.470 align:start position:0%
has an associated cache the we'll say
it's<00:23:14.559><c> the</c><00:23:14.720><c> l1</c><00:23:15.200><c> cache</c><00:23:15.440><c> so</c><00:23:15.600><c> each</c><00:23:15.840><c> core</c><00:23:16.080><c> has</c><00:23:16.240><c> a</c><00:23:16.320><c> bit</c>

00:23:16.470 --> 00:23:16.480 align:start position:0%
it's the l1 cache so each core has a bit
 

00:23:16.480 --> 00:23:18.710 align:start position:0%
it's the l1 cache so each core has a bit
of<00:23:16.640><c> cache</c><00:23:16.960><c> memory</c>

00:23:18.710 --> 00:23:18.720 align:start position:0%
of cache memory
 

00:23:18.720 --> 00:23:19.909 align:start position:0%
of cache memory
and<00:23:18.880><c> whenever</c><00:23:19.200><c> it</c><00:23:19.280><c> reads</c><00:23:19.520><c> or</c><00:23:19.600><c> writes</c>

00:23:19.909 --> 00:23:19.919 align:start position:0%
and whenever it reads or writes
 

00:23:19.919 --> 00:23:22.789 align:start position:0%
and whenever it reads or writes
something

00:23:22.789 --> 00:23:22.799 align:start position:0%
 
 

00:23:22.799 --> 00:23:24.310 align:start position:0%
 
it<00:23:22.960><c> sits</c><00:23:23.200><c> in</c><00:23:23.280><c> the</c><00:23:23.440><c> cache</c><00:23:23.760><c> and</c><00:23:23.840><c> so</c><00:23:24.000><c> there</c><00:23:24.080><c> may</c><00:23:24.240><c> be</c>

00:23:24.310 --> 00:23:24.320 align:start position:0%
it sits in the cache and so there may be
 

00:23:24.320 --> 00:23:26.310 align:start position:0%
it sits in the cache and so there may be
lots<00:23:24.559><c> and</c><00:23:24.640><c> lots</c><00:23:24.880><c> of</c><00:23:25.039><c> cores</c><00:23:25.679><c> and</c><00:23:25.760><c> there's</c><00:23:26.000><c> some</c>

00:23:26.310 --> 00:23:26.320 align:start position:0%
lots and lots of cores and there's some
 

00:23:26.320 --> 00:23:27.510 align:start position:0%
lots and lots of cores and there's some
kind<00:23:26.559><c> of</c>

00:23:27.510 --> 00:23:27.520 align:start position:0%
kind of
 

00:23:27.520 --> 00:23:29.430 align:start position:0%
kind of
interconnect<00:23:28.159><c> network</c><00:23:28.799><c> that</c><00:23:28.960><c> allows</c><00:23:29.360><c> the</c>

00:23:29.430 --> 00:23:29.440 align:start position:0%
interconnect network that allows the
 

00:23:29.440 --> 00:23:31.430 align:start position:0%
interconnect network that allows the
course<00:23:29.679><c> to</c><00:23:29.840><c> talk</c><00:23:30.000><c> to</c><00:23:30.159><c> each</c><00:23:30.320><c> other</c>

00:23:31.430 --> 00:23:31.440 align:start position:0%
course to talk to each other
 

00:23:31.440 --> 00:23:34.390 align:start position:0%
course to talk to each other
because<00:23:31.919><c> of</c><00:23:32.000><c> course</c><00:23:33.120><c> if</c><00:23:33.760><c> lots</c><00:23:34.000><c> of</c><00:23:34.080><c> course</c><00:23:34.320><c> have</c>

00:23:34.390 --> 00:23:34.400 align:start position:0%
because of course if lots of course have
 

00:23:34.400 --> 00:23:35.430 align:start position:0%
because of course if lots of course have
some<00:23:34.640><c> data</c>

00:23:35.430 --> 00:23:35.440 align:start position:0%
some data
 

00:23:35.440 --> 00:23:37.590 align:start position:0%
some data
cached<00:23:36.240><c> and</c><00:23:36.400><c> one</c><00:23:36.559><c> of</c><00:23:36.640><c> the</c><00:23:36.720><c> cores</c><00:23:37.039><c> writes</c><00:23:37.360><c> that</c>

00:23:37.590 --> 00:23:37.600 align:start position:0%
cached and one of the cores writes that
 

00:23:37.600 --> 00:23:39.990 align:start position:0%
cached and one of the cores writes that
data<00:23:38.320><c> the</c><00:23:38.480><c> writing</c><00:23:38.799><c> core</c><00:23:39.120><c> has</c><00:23:39.360><c> to</c><00:23:39.520><c> tell</c><00:23:39.760><c> the</c>

00:23:39.990 --> 00:23:40.000 align:start position:0%
data the writing core has to tell the
 

00:23:40.000 --> 00:23:41.510 align:start position:0%
data the writing core has to tell the
other<00:23:40.240><c> cores</c><00:23:40.640><c> that</c><00:23:40.720><c> they're</c><00:23:40.960><c> not</c><00:23:41.120><c> allowed</c><00:23:41.440><c> to</c>

00:23:41.510 --> 00:23:41.520 align:start position:0%
other cores that they're not allowed to
 

00:23:41.520 --> 00:23:43.430 align:start position:0%
other cores that they're not allowed to
cache<00:23:41.760><c> the</c><00:23:41.919><c> data</c><00:23:42.159><c> anymore</c><00:23:42.720><c> which</c><00:23:42.880><c> is</c><00:23:43.039><c> called</c>

00:23:43.430 --> 00:23:43.440 align:start position:0%
cache the data anymore which is called
 

00:23:43.440 --> 00:23:46.789 align:start position:0%
cache the data anymore which is called
invalidation

00:23:46.789 --> 00:23:46.799 align:start position:0%
 
 

00:23:46.799 --> 00:23:51.269 align:start position:0%
 
so<00:23:48.240><c> what</c><00:23:48.480><c> actually</c><00:23:48.720><c> happens</c><00:23:49.039><c> if</c><00:23:49.200><c> you</c><00:23:49.360><c> have</c><00:23:49.600><c> n</c>

00:23:51.269 --> 00:23:51.279 align:start position:0%
so what actually happens if you have n
 

00:23:51.279 --> 00:23:54.310 align:start position:0%
so what actually happens if you have n
readers<00:23:52.480><c> and</c><00:23:52.640><c> people</c><00:23:52.960><c> calling</c><00:23:53.360><c> rlock</c><00:23:54.159><c> at</c>

00:23:54.310 --> 00:23:54.320 align:start position:0%
readers and people calling rlock at
 

00:23:54.320 --> 00:23:55.669 align:start position:0%
readers and people calling rlock at
about<00:23:54.559><c> the</c><00:23:54.640><c> same</c><00:23:54.880><c> time</c><00:23:55.200><c> on</c><00:23:55.360><c> n</c>

00:23:55.669 --> 00:23:55.679 align:start position:0%
about the same time on n
 

00:23:55.679 --> 00:24:00.390 align:start position:0%
about the same time on n
cores<00:23:58.640><c> they're</c><00:23:58.880><c> all</c><00:23:59.120><c> going</c><00:23:59.279><c> to</c><00:23:59.440><c> read</c>

00:24:00.390 --> 00:24:00.400 align:start position:0%
cores they're all going to read
 

00:24:00.400 --> 00:24:03.750 align:start position:0%
cores they're all going to read
n<00:24:01.360><c> sorry</c><00:24:01.679><c> this</c><00:24:01.919><c> l</c><00:24:02.159><c> arrow</c><00:24:02.559><c> n</c><00:24:02.799><c> value</c>

00:24:03.750 --> 00:24:03.760 align:start position:0%
n sorry this l arrow n value
 

00:24:03.760 --> 00:24:06.470 align:start position:0%
n sorry this l arrow n value
and<00:24:04.159><c> load</c><00:24:05.039><c> this</c><00:24:05.279><c> memory</c><00:24:05.520><c> location</c><00:24:06.000><c> into</c><00:24:06.240><c> their</c>

00:24:06.470 --> 00:24:06.480 align:start position:0%
and load this memory location into their
 

00:24:06.480 --> 00:24:09.909 align:start position:0%
and load this memory location into their
caches

00:24:09.909 --> 00:24:09.919 align:start position:0%
 
 

00:24:09.919 --> 00:24:11.269 align:start position:0%
 
they're<00:24:10.159><c> all</c><00:24:10.240><c> going</c><00:24:10.400><c> to</c><00:24:10.480><c> call</c><00:24:10.720><c> compare</c><00:24:11.120><c> and</c>

00:24:11.269 --> 00:24:11.279 align:start position:0%
they're all going to call compare and
 

00:24:11.279 --> 00:24:13.909 align:start position:0%
they're all going to call compare and
swap

00:24:13.909 --> 00:24:13.919 align:start position:0%
 
 

00:24:13.919 --> 00:24:15.590 align:start position:0%
 
what<00:24:14.159><c> the</c><00:24:14.320><c> first</c><00:24:14.480><c> one</c><00:24:14.640><c> to</c><00:24:15.120><c> actually</c><00:24:15.440><c> call</c>

00:24:15.590 --> 00:24:15.600 align:start position:0%
what the first one to actually call
 

00:24:15.600 --> 00:24:17.909 align:start position:0%
what the first one to actually call
compare<00:24:16.000><c> and</c><00:24:16.080><c> swap</c><00:24:16.720><c> is</c><00:24:16.880><c> going</c><00:24:16.960><c> to</c><00:24:17.200><c> modify</c><00:24:17.760><c> the</c>

00:24:17.909 --> 00:24:17.919 align:start position:0%
compare and swap is going to modify the
 

00:24:17.919 --> 00:24:19.750 align:start position:0%
compare and swap is going to modify the
data<00:24:18.320><c> but</c><00:24:18.559><c> in</c><00:24:18.720><c> order</c><00:24:18.960><c> for</c><00:24:19.039><c> it</c><00:24:19.120><c> to</c><00:24:19.279><c> modify</c><00:24:19.679><c> the</c>

00:24:19.750 --> 00:24:19.760 align:start position:0%
data but in order for it to modify the
 

00:24:19.760 --> 00:24:21.269 align:start position:0%
data but in order for it to modify the
data<00:24:20.000><c> it</c><00:24:20.080><c> has</c><00:24:20.240><c> to</c><00:24:20.400><c> invalidate</c><00:24:20.960><c> all</c><00:24:21.120><c> these</c>

00:24:21.269 --> 00:24:21.279 align:start position:0%
data it has to invalidate all these
 

00:24:21.279 --> 00:24:22.549 align:start position:0%
data it has to invalidate all these
other<00:24:21.520><c> copies</c>

00:24:22.549 --> 00:24:22.559 align:start position:0%
other copies
 

00:24:22.559 --> 00:24:24.630 align:start position:0%
other copies
and<00:24:22.640><c> so</c><00:24:23.200><c> the</c><00:24:23.440><c> compare</c><00:24:23.840><c> and</c><00:24:23.919><c> swap</c><00:24:24.240><c> instruction</c>

00:24:24.630 --> 00:24:24.640 align:start position:0%
and so the compare and swap instruction
 

00:24:24.640 --> 00:24:26.230 align:start position:0%
and so the compare and swap instruction
that<00:24:24.880><c> one</c><00:24:25.279><c> has</c><00:24:25.440><c> to</c><00:24:25.600><c> send</c><00:24:25.840><c> out</c><00:24:26.000><c> an</c>

00:24:26.230 --> 00:24:26.240 align:start position:0%
that one has to send out an
 

00:24:26.240 --> 00:24:27.830 align:start position:0%
that one has to send out an
invalidate<00:24:26.880><c> message</c><00:24:27.279><c> over</c><00:24:27.440><c> this</c><00:24:27.600><c> little</c>

00:24:27.830 --> 00:24:27.840 align:start position:0%
invalidate message over this little
 

00:24:27.840 --> 00:24:31.350 align:start position:0%
invalidate message over this little
network<00:24:28.640><c> to</c><00:24:28.799><c> each</c><00:24:29.039><c> of</c><00:24:29.120><c> the</c><00:24:29.200><c> other</c><00:24:29.520><c> end</c><00:24:29.760><c> cores</c>

00:24:31.350 --> 00:24:31.360 align:start position:0%
network to each of the other end cores
 

00:24:31.360 --> 00:24:33.350 align:start position:0%
network to each of the other end cores
right<00:24:31.840><c> and</c><00:24:31.919><c> then</c><00:24:32.080><c> it</c><00:24:32.240><c> returns</c><00:24:32.880><c> all</c><00:24:33.039><c> the</c><00:24:33.200><c> other</c>

00:24:33.350 --> 00:24:33.360 align:start position:0%
right and then it returns all the other
 

00:24:33.360 --> 00:24:35.669 align:start position:0%
right and then it returns all the other
course<00:24:33.600><c> the</c><00:24:33.760><c> n</c><00:24:34.000><c> minus</c><00:24:34.240><c> one</c><00:24:34.480><c> course</c><00:24:34.799><c> they</c><00:24:34.960><c> have</c>

00:24:35.669 --> 00:24:35.679 align:start position:0%
course the n minus one course they have
 

00:24:35.679 --> 00:24:37.350 align:start position:0%
course the n minus one course they have
um<00:24:36.000><c> their</c><00:24:36.159><c> compare</c><00:24:36.480><c> and</c><00:24:36.559><c> swaps</c><00:24:36.880><c> now</c><00:24:37.120><c> actually</c>

00:24:37.350 --> 00:24:37.360 align:start position:0%
um their compare and swaps now actually
 

00:24:37.360 --> 00:24:39.350 align:start position:0%
um their compare and swaps now actually
have<00:24:37.520><c> to</c><00:24:37.679><c> re-read</c>

00:24:39.350 --> 00:24:39.360 align:start position:0%
have to re-read
 

00:24:39.360 --> 00:24:41.430 align:start position:0%
have to re-read
again<00:24:39.760><c> requiring</c><00:24:40.320><c> traffic</c><00:24:40.640><c> over</c><00:24:40.799><c> the</c><00:24:40.880><c> network</c>

00:24:41.430 --> 00:24:41.440 align:start position:0%
again requiring traffic over the network
 

00:24:41.440 --> 00:24:44.149 align:start position:0%
again requiring traffic over the network
re-read

00:24:44.149 --> 00:24:44.159 align:start position:0%
 
 

00:24:44.159 --> 00:24:47.269 align:start position:0%
 
this<00:24:44.400><c> data</c><00:24:44.960><c> this</c><00:24:45.120><c> memory</c><00:24:45.440><c> location</c><00:24:46.960><c> compare</c>

00:24:47.269 --> 00:24:47.279 align:start position:0%
this data this memory location compare
 

00:24:47.279 --> 00:24:48.470 align:start position:0%
this data this memory location compare
it<00:24:47.360><c> with</c><00:24:47.520><c> x</c><00:24:47.679><c> and</c><00:24:47.760><c> they'll</c><00:24:47.919><c> have</c><00:24:48.080><c> failed</c>

00:24:48.470 --> 00:24:48.480 align:start position:0%
it with x and they'll have failed
 

00:24:48.480 --> 00:24:50.710 align:start position:0%
it with x and they'll have failed
because<00:24:48.720><c> they</c><00:24:48.880><c> all</c><00:24:49.039><c> call</c><00:24:49.279><c> x</c><00:24:49.440><c> with</c><00:24:49.600><c> zero</c>

00:24:50.710 --> 00:24:50.720 align:start position:0%
because they all call x with zero
 

00:24:50.720 --> 00:24:52.710 align:start position:0%
because they all call x with zero
then<00:24:50.960><c> the</c><00:24:51.120><c> remaining</c><00:24:51.600><c> n</c><00:24:51.840><c> minus</c><00:24:52.159><c> one</c><00:24:52.400><c> readers</c>

00:24:52.710 --> 00:24:52.720 align:start position:0%
then the remaining n minus one readers
 

00:24:52.720 --> 00:24:54.230 align:start position:0%
then the remaining n minus one readers
go<00:24:52.880><c> back</c><00:24:53.039><c> to</c><00:24:53.120><c> the</c><00:24:53.200><c> top</c><00:24:53.440><c> of</c><00:24:53.520><c> the</c><00:24:53.600><c> loop</c><00:24:53.840><c> and</c><00:24:54.000><c> all</c>

00:24:54.230 --> 00:24:54.240 align:start position:0%
go back to the top of the loop and all
 

00:24:54.240 --> 00:24:56.710 align:start position:0%
go back to the top of the loop and all
n<00:24:54.400><c> minus</c><00:24:54.720><c> one</c><00:24:54.880><c> of</c><00:24:54.960><c> them</c><00:24:55.120><c> again</c><00:24:55.520><c> read</c><00:24:55.760><c> the</c><00:24:55.840><c> data</c>

00:24:56.710 --> 00:24:56.720 align:start position:0%
n minus one of them again read the data
 

00:24:56.720 --> 00:24:59.430 align:start position:0%
n minus one of them again read the data
and<00:24:56.880><c> again</c><00:24:57.200><c> one</c><00:24:57.440><c> of</c><00:24:57.520><c> them</c><00:24:57.679><c> writes</c><00:24:58.080><c> it</c>

00:24:59.430 --> 00:24:59.440 align:start position:0%
and again one of them writes it
 

00:24:59.440 --> 00:25:01.990 align:start position:0%
and again one of them writes it
right<00:24:59.679><c> so</c><00:25:00.000><c> on</c><00:25:00.480><c> each</c><00:25:01.279><c> so</c><00:25:01.440><c> there's</c><00:25:01.600><c> going</c><00:25:01.679><c> to</c><00:25:01.760><c> be</c>

00:25:01.990 --> 00:25:02.000 align:start position:0%
right so on each so there's going to be
 

00:25:02.000 --> 00:25:05.029 align:start position:0%
right so on each so there's going to be
n<00:25:02.320><c> times</c><00:25:02.720><c> through</c><00:25:02.960><c> the</c><00:25:03.120><c> loop</c><00:25:03.440><c> once</c><00:25:03.679><c> for</c><00:25:03.919><c> each</c>

00:25:05.029 --> 00:25:05.039 align:start position:0%
n times through the loop once for each
 

00:25:05.039 --> 00:25:07.510 align:start position:0%
n times through the loop once for each
core<00:25:05.360><c> trying</c><00:25:05.520><c> to</c><00:25:05.679><c> acquire</c><00:25:06.000><c> the</c><00:25:06.159><c> lock</c><00:25:07.200><c> each</c><00:25:07.440><c> of</c>

00:25:07.510 --> 00:25:07.520 align:start position:0%
core trying to acquire the lock each of
 

00:25:07.520 --> 00:25:10.070 align:start position:0%
core trying to acquire the lock each of
those<00:25:07.760><c> trips</c><00:25:08.159><c> through</c><00:25:08.320><c> the</c><00:25:08.480><c> loop</c>

00:25:10.070 --> 00:25:10.080 align:start position:0%
those trips through the loop
 

00:25:10.080 --> 00:25:13.110 align:start position:0%
those trips through the loop
involves<00:25:11.279><c> order</c><00:25:11.760><c> n</c><00:25:12.080><c> messages</c><00:25:12.559><c> on</c><00:25:12.640><c> the</c><00:25:12.799><c> network</c>

00:25:13.110 --> 00:25:13.120 align:start position:0%
involves order n messages on the network
 

00:25:13.120 --> 00:25:14.230 align:start position:0%
involves order n messages on the network
because<00:25:13.440><c> at</c><00:25:13.600><c> least</c>

00:25:14.230 --> 00:25:14.240 align:start position:0%
because at least
 

00:25:14.240 --> 00:25:17.110 align:start position:0%
because at least
every<00:25:14.559><c> copy</c><00:25:14.880><c> of</c><00:25:15.039><c> the</c><00:25:15.200><c> cached</c><00:25:15.919><c> lron</c><00:25:16.720><c> has</c><00:25:16.880><c> to</c><00:25:16.960><c> be</c>

00:25:17.110 --> 00:25:17.120 align:start position:0%
every copy of the cached lron has to be
 

00:25:17.120 --> 00:25:20.390 align:start position:0%
every copy of the cached lron has to be
invalidated

00:25:20.390 --> 00:25:20.400 align:start position:0%
 
 

00:25:20.400 --> 00:25:23.830 align:start position:0%
 
and<00:25:20.480><c> that</c><00:25:20.640><c> means</c><00:25:20.880><c> that</c><00:25:21.120><c> the</c><00:25:21.840><c> total</c><00:25:22.320><c> cost</c><00:25:23.039><c> for</c><00:25:23.360><c> n</c>

00:25:23.830 --> 00:25:23.840 align:start position:0%
and that means that the total cost for n
 

00:25:23.840 --> 00:25:27.750 align:start position:0%
and that means that the total cost for n
cores<00:25:24.320><c> to</c><00:25:24.480><c> acquire</c><00:25:25.520><c> a</c><00:25:25.840><c> particular</c><00:25:26.320><c> lock</c>

00:25:27.750 --> 00:25:27.760 align:start position:0%
cores to acquire a particular lock
 

00:25:27.760 --> 00:25:32.310 align:start position:0%
cores to acquire a particular lock
even<00:25:28.159><c> for</c><00:25:28.400><c> reading</c><00:25:29.200><c> is</c><00:25:29.360><c> order</c><00:25:29.840><c> n</c>

00:25:32.310 --> 00:25:32.320 align:start position:0%
 
 

00:25:32.320 --> 00:25:33.350 align:start position:0%
 
and<00:25:32.400><c> that</c><00:25:32.559><c> means</c><00:25:32.720><c> as</c><00:25:32.880><c> you</c><00:25:32.960><c> increase</c><00:25:33.279><c> the</c>

00:25:33.350 --> 00:25:33.360 align:start position:0%
and that means as you increase the
 

00:25:33.360 --> 00:25:35.510 align:start position:0%
and that means as you increase the
number<00:25:33.520><c> of</c><00:25:33.679><c> cores</c><00:25:34.320><c> for</c><00:25:34.559><c> a</c><00:25:34.799><c> popular</c><00:25:35.200><c> piece</c><00:25:35.440><c> of</c>

00:25:35.510 --> 00:25:35.520 align:start position:0%
number of cores for a popular piece of
 

00:25:35.520 --> 00:25:36.390 align:start position:0%
number of cores for a popular piece of
data

00:25:36.390 --> 00:25:36.400 align:start position:0%
data
 

00:25:36.400 --> 00:25:39.750 align:start position:0%
data
the<00:25:36.640><c> uh</c><00:25:37.360><c> cost</c><00:25:38.240><c> for</c><00:25:38.400><c> everybody</c><00:25:39.200><c> to</c><00:25:39.360><c> lock</c><00:25:39.600><c> it</c>

00:25:39.750 --> 00:25:39.760 align:start position:0%
the uh cost for everybody to lock it
 

00:25:39.760 --> 00:25:40.149 align:start position:0%
the uh cost for everybody to lock it
just

00:25:40.149 --> 00:25:40.159 align:start position:0%
just
 

00:25:40.159 --> 00:25:46.549 align:start position:0%
just
once<00:25:42.720><c> goes</c><00:25:42.960><c> up</c><00:25:43.200><c> sorry</c><00:25:43.440><c> it's</c><00:25:43.600><c> order</c><00:25:43.840><c> n</c><00:25:44.000><c> squared</c>

00:25:46.549 --> 00:25:46.559 align:start position:0%
 
 

00:25:46.559 --> 00:25:49.830 align:start position:0%
 
the<00:25:46.720><c> total</c><00:25:47.120><c> cost</c><00:25:47.919><c> and</c><00:25:48.159><c> time</c>

00:25:49.830 --> 00:25:49.840 align:start position:0%
the total cost and time
 

00:25:49.840 --> 00:25:51.750 align:start position:0%
the total cost and time
or<00:25:50.080><c> messages</c><00:25:50.559><c> sent</c><00:25:50.799><c> over</c><00:25:51.039><c> this</c><00:25:51.279><c> interconnect</c>

00:25:51.750 --> 00:25:51.760 align:start position:0%
or messages sent over this interconnect
 

00:25:51.760 --> 00:25:54.149 align:start position:0%
or messages sent over this interconnect
is<00:25:51.919><c> n</c><00:25:52.159><c> squared</c>

00:25:54.149 --> 00:25:54.159 align:start position:0%
is n squared
 

00:25:54.159 --> 00:25:56.789 align:start position:0%
is n squared
and<00:25:54.240><c> this</c><00:25:54.400><c> is</c><00:25:54.480><c> a</c><00:25:54.640><c> very</c><00:25:54.799><c> bad</c><00:25:55.120><c> deal</c><00:25:56.320><c> right</c><00:25:56.640><c> you</c>

00:25:56.789 --> 00:25:56.799 align:start position:0%
and this is a very bad deal right you
 

00:25:56.799 --> 00:25:58.149 align:start position:0%
and this is a very bad deal right you
would<00:25:56.960><c> hope</c><00:25:57.200><c> that</c><00:25:57.440><c> if</c><00:25:57.520><c> you</c><00:25:57.679><c> needed</c><00:25:57.919><c> to</c><00:25:58.000><c> do</c>

00:25:58.149 --> 00:25:58.159 align:start position:0%
would hope that if you needed to do
 

00:25:58.159 --> 00:25:59.510 align:start position:0%
would hope that if you needed to do
something<00:25:58.559><c> ten</c><00:25:58.799><c> times</c>

00:25:59.510 --> 00:25:59.520 align:start position:0%
something ten times
 

00:25:59.520 --> 00:26:00.789 align:start position:0%
something ten times
you<00:25:59.679><c> know</c><00:25:59.840><c> ten</c><00:26:00.000><c> different</c><00:26:00.240><c> cores</c><00:26:00.480><c> needed</c><00:26:00.720><c> to</c>

00:26:00.789 --> 00:26:00.799 align:start position:0%
you know ten different cores needed to
 

00:26:00.799 --> 00:26:02.870 align:start position:0%
you know ten different cores needed to
do<00:26:00.960><c> something</c><00:26:01.840><c> especially</c>

00:26:02.870 --> 00:26:02.880 align:start position:0%
do something especially
 

00:26:02.880 --> 00:26:04.470 align:start position:0%
do something especially
you<00:26:03.039><c> know</c><00:26:03.120><c> given</c><00:26:03.440><c> that</c><00:26:03.520><c> they're</c><00:26:03.760><c> just</c><00:26:04.159><c> reading</c>

00:26:04.470 --> 00:26:04.480 align:start position:0%
you know given that they're just reading
 

00:26:04.480 --> 00:26:06.149 align:start position:0%
you know given that they're just reading
the<00:26:04.640><c> list</c><00:26:04.960><c> they're</c><00:26:05.120><c> not</c><00:26:05.360><c> modifying</c><00:26:05.919><c> it</c>

00:26:06.149 --> 00:26:06.159 align:start position:0%
the list they're not modifying it
 

00:26:06.159 --> 00:26:07.510 align:start position:0%
the list they're not modifying it
you'd<00:26:06.400><c> hope</c><00:26:06.559><c> that</c><00:26:06.720><c> they</c><00:26:06.799><c> could</c><00:26:06.960><c> really</c><00:26:07.200><c> run</c><00:26:07.440><c> in</c>

00:26:07.510 --> 00:26:07.520 align:start position:0%
you'd hope that they could really run in
 

00:26:07.520 --> 00:26:09.590 align:start position:0%
you'd hope that they could really run in
parallel<00:26:08.159><c> that</c><00:26:08.400><c> is</c><00:26:08.480><c> the</c><00:26:08.640><c> total</c><00:26:09.039><c> wall</c><00:26:09.279><c> clock</c>

00:26:09.590 --> 00:26:09.600 align:start position:0%
parallel that is the total wall clock
 

00:26:09.600 --> 00:26:10.549 align:start position:0%
parallel that is the total wall clock
time<00:26:09.919><c> for</c>

00:26:10.549 --> 00:26:10.559 align:start position:0%
time for
 

00:26:10.559 --> 00:26:13.669 align:start position:0%
time for
16<00:26:11.200><c> cores</c><00:26:11.919><c> to</c><00:26:12.080><c> read</c><00:26:12.400><c> something</c>

00:26:13.669 --> 00:26:13.679 align:start position:0%
16 cores to read something
 

00:26:13.679 --> 00:26:15.029 align:start position:0%
16 cores to read something
should<00:26:13.840><c> be</c><00:26:14.000><c> the</c><00:26:14.080><c> same</c><00:26:14.320><c> as</c><00:26:14.480><c> the</c><00:26:14.559><c> total</c><00:26:14.880><c> wall</c>

00:26:15.029 --> 00:26:15.039 align:start position:0%
should be the same as the total wall
 

00:26:15.039 --> 00:26:16.470 align:start position:0%
should be the same as the total wall
clock<00:26:15.360><c> time</c><00:26:15.520><c> for</c><00:26:15.679><c> one</c><00:26:15.919><c> chord</c><00:26:16.159><c> to</c><00:26:16.240><c> read</c>

00:26:16.470 --> 00:26:16.480 align:start position:0%
clock time for one chord to read
 

00:26:16.480 --> 00:26:17.430 align:start position:0%
clock time for one chord to read
something<00:26:16.799><c> because</c><00:26:16.960><c> that's</c><00:26:17.120><c> what</c>

00:26:17.430 --> 00:26:17.440 align:start position:0%
something because that's what
 

00:26:17.440 --> 00:26:19.590 align:start position:0%
something because that's what
that's<00:26:17.679><c> what</c><00:26:17.760><c> getting</c><00:26:18.000><c> parallelism</c><00:26:18.799><c> means</c><00:26:19.440><c> is</c>

00:26:19.590 --> 00:26:19.600 align:start position:0%
that's what getting parallelism means is
 

00:26:19.600 --> 00:26:23.110 align:start position:0%
that's what getting parallelism means is
that<00:26:20.159><c> you</c><00:26:20.320><c> can</c><00:26:20.400><c> do</c><00:26:20.559><c> things</c><00:26:20.880><c> at</c><00:26:20.960><c> the</c><00:26:21.039><c> same</c><00:26:21.360><c> time</c>

00:26:23.110 --> 00:26:23.120 align:start position:0%
that you can do things at the same time
 

00:26:23.120 --> 00:26:25.029 align:start position:0%
that you can do things at the same time
but<00:26:23.279><c> here</c><00:26:23.760><c> the</c><00:26:23.919><c> more</c><00:26:24.159><c> cores</c><00:26:24.480><c> i</c><00:26:24.559><c> try</c><00:26:24.720><c> to</c><00:26:24.799><c> read</c>

00:26:25.029 --> 00:26:25.039 align:start position:0%
but here the more cores i try to read
 

00:26:25.039 --> 00:26:26.390 align:start position:0%
but here the more cores i try to read
this<00:26:25.279><c> the</c><00:26:25.440><c> more</c><00:26:25.600><c> expensive</c>

00:26:26.390 --> 00:26:26.400 align:start position:0%
this the more expensive
 

00:26:26.400 --> 00:26:29.590 align:start position:0%
this the more expensive
the<00:26:26.559><c> lock</c><00:26:26.880><c> acquisition</c><00:26:27.520><c> is</c><00:26:28.159><c> and</c><00:26:28.320><c> so</c><00:26:29.120><c> um</c>

00:26:29.590 --> 00:26:29.600 align:start position:0%
the lock acquisition is and so um
 

00:26:29.600 --> 00:26:32.230 align:start position:0%
the lock acquisition is and so um
what's<00:26:29.840><c> going</c><00:26:30.159><c> on</c><00:26:30.400><c> is</c><00:26:30.559><c> that</c><00:26:31.279><c> this</c><00:26:31.679><c> style</c><00:26:32.080><c> of</c>

00:26:32.230 --> 00:26:32.240 align:start position:0%
what's going on is that this style of
 

00:26:32.240 --> 00:26:33.269 align:start position:0%
what's going on is that this style of
locks

00:26:33.269 --> 00:26:33.279 align:start position:0%
locks
 

00:26:33.279 --> 00:26:35.990 align:start position:0%
locks
has<00:26:33.440><c> converted</c><00:26:34.000><c> read-only</c><00:26:34.720><c> access</c><00:26:35.440><c> to</c><00:26:35.600><c> data</c>

00:26:35.990 --> 00:26:36.000 align:start position:0%
has converted read-only access to data
 

00:26:36.000 --> 00:26:36.710 align:start position:0%
has converted read-only access to data
you<00:26:36.080><c> know</c><00:26:36.240><c> the</c><00:26:36.400><c> list</c>

00:26:36.710 --> 00:26:36.720 align:start position:0%
you know the list
 

00:26:36.720 --> 00:26:38.710 align:start position:0%
you know the list
is<00:26:37.039><c> probably</c><00:26:37.520><c> sitting</c><00:26:37.760><c> in</c><00:26:37.919><c> the</c><00:26:38.080><c> cache</c><00:26:38.480><c> already</c>

00:26:38.710 --> 00:26:38.720 align:start position:0%
is probably sitting in the cache already
 

00:26:38.720 --> 00:26:40.630 align:start position:0%
is probably sitting in the cache already
because<00:26:38.880><c> nobody's</c><00:26:39.279><c> modifying</c><00:26:39.760><c> the</c><00:26:39.919><c> list</c>

00:26:40.630 --> 00:26:40.640 align:start position:0%
because nobody's modifying the list
 

00:26:40.640 --> 00:26:43.750 align:start position:0%
because nobody's modifying the list
right<00:26:41.279><c> so</c><00:26:41.440><c> the</c><00:26:41.600><c> actual</c><00:26:42.000><c> access</c><00:26:42.960><c> to</c><00:26:43.120><c> the</c><00:26:43.360><c> list</c>

00:26:43.750 --> 00:26:43.760 align:start position:0%
right so the actual access to the list
 

00:26:43.760 --> 00:26:46.549 align:start position:0%
right so the actual access to the list
might<00:26:44.000><c> only</c><00:26:44.240><c> take</c><00:26:44.400><c> a</c><00:26:44.480><c> few</c><00:26:44.720><c> dozen</c><00:26:45.039><c> cycles</c><00:26:46.400><c> but</c>

00:26:46.549 --> 00:26:46.559 align:start position:0%
might only take a few dozen cycles but
 

00:26:46.559 --> 00:26:48.870 align:start position:0%
might only take a few dozen cycles but
if<00:26:46.720><c> the</c><00:26:46.799><c> date</c><00:26:47.039><c> is</c><00:26:47.200><c> popular</c><00:26:47.760><c> getting</c><00:26:48.080><c> the</c><00:26:48.400><c> lock</c>

00:26:48.870 --> 00:26:48.880 align:start position:0%
if the date is popular getting the lock
 

00:26:48.880 --> 00:26:51.190 align:start position:0%
if the date is popular getting the lock
can<00:26:49.039><c> take</c><00:26:49.360><c> hundreds</c><00:26:49.840><c> or</c><00:26:50.080><c> thousands</c><00:26:50.559><c> of</c><00:26:50.720><c> cycles</c>

00:26:51.190 --> 00:26:51.200 align:start position:0%
can take hundreds or thousands of cycles
 

00:26:51.200 --> 00:26:51.990 align:start position:0%
can take hundreds or thousands of cycles
because<00:26:51.440><c> of</c><00:26:51.520><c> this</c><00:26:51.760><c> n</c>

00:26:51.990 --> 00:26:52.000 align:start position:0%
because of this n
 

00:26:52.000 --> 00:26:54.310 align:start position:0%
because of this n
squared<00:26:52.400><c> effect</c><00:26:53.360><c> and</c><00:26:53.440><c> the</c><00:26:53.600><c> fact</c><00:26:53.760><c> that</c><00:26:54.000><c> instead</c>

00:26:54.310 --> 00:26:54.320 align:start position:0%
squared effect and the fact that instead
 

00:26:54.320 --> 00:26:56.149 align:start position:0%
squared effect and the fact that instead
of<00:26:54.480><c> it</c><00:26:54.559><c> being</c><00:26:54.799><c> cached</c><00:26:55.200><c> accesses</c>

00:26:56.149 --> 00:26:56.159 align:start position:0%
of it being cached accesses
 

00:26:56.159 --> 00:26:58.070 align:start position:0%
of it being cached accesses
it's<00:26:56.559><c> these</c><00:26:56.880><c> accesses</c><00:26:57.360><c> that</c><00:26:57.520><c> have</c><00:26:57.679><c> to</c><00:26:57.760><c> go</c><00:26:57.919><c> over</c>

00:26:58.070 --> 00:26:58.080 align:start position:0%
it's these accesses that have to go over
 

00:26:58.080 --> 00:26:59.669 align:start position:0%
it's these accesses that have to go over
the<00:26:58.240><c> bus</c>

00:26:59.669 --> 00:26:59.679 align:start position:0%
the bus
 

00:26:59.679 --> 00:27:02.310 align:start position:0%
the bus
this<00:26:59.919><c> interconnect</c><00:27:00.480><c> in</c><00:27:00.640><c> order</c><00:27:00.960><c> to</c><00:27:01.600><c> invalidate</c>

00:27:02.310 --> 00:27:02.320 align:start position:0%
this interconnect in order to invalidate
 

00:27:02.320 --> 00:27:02.870 align:start position:0%
this interconnect in order to invalidate
and

00:27:02.870 --> 00:27:02.880 align:start position:0%
and
 

00:27:02.880 --> 00:27:06.310 align:start position:0%
and
do<00:27:03.039><c> these</c><00:27:03.279><c> cache</c><00:27:03.760><c> coherence</c><00:27:04.840><c> operations</c><00:27:05.919><c> so</c>

00:27:06.310 --> 00:27:06.320 align:start position:0%
do these cache coherence operations so
 

00:27:06.320 --> 00:27:09.830 align:start position:0%
do these cache coherence operations so
this<00:27:06.640><c> these</c><00:27:07.039><c> locks</c><00:27:07.520><c> have</c><00:27:07.679><c> turned</c>

00:27:09.830 --> 00:27:09.840 align:start position:0%
this these locks have turned
 

00:27:09.840 --> 00:27:11.830 align:start position:0%
this these locks have turned
a<00:27:10.000><c> very</c><00:27:10.320><c> cheap</c><00:27:10.640><c> read-only</c><00:27:11.120><c> access</c><00:27:11.440><c> to</c><00:27:11.600><c> data</c>

00:27:11.830 --> 00:27:11.840 align:start position:0%
a very cheap read-only access to data
 

00:27:11.840 --> 00:27:13.990 align:start position:0%
a very cheap read-only access to data
into<00:27:12.080><c> an</c><00:27:12.240><c> extremely</c><00:27:12.720><c> expensive</c>

00:27:13.990 --> 00:27:14.000 align:start position:0%
into an extremely expensive
 

00:27:14.000 --> 00:27:18.230 align:start position:0%
into an extremely expensive
read-write<00:27:14.640><c> access</c><00:27:15.360><c> to</c><00:27:15.919><c> this</c><00:27:16.240><c> data</c>

00:27:18.230 --> 00:27:18.240 align:start position:0%
read-write access to this data
 

00:27:18.240 --> 00:27:20.310 align:start position:0%
read-write access to this data
and<00:27:18.640><c> we'll</c><00:27:18.799><c> probably</c><00:27:19.200><c> completely</c><00:27:19.679><c> destroy</c>

00:27:20.310 --> 00:27:20.320 align:start position:0%
and we'll probably completely destroy
 

00:27:20.320 --> 00:27:21.669 align:start position:0%
and we'll probably completely destroy
any<00:27:20.559><c> possible</c><00:27:20.960><c> parallel</c>

00:27:21.669 --> 00:27:21.679 align:start position:0%
any possible parallel
 

00:27:21.679 --> 00:27:24.310 align:start position:0%
any possible parallel
performance<00:27:22.960><c> um</c><00:27:23.279><c> if</c><00:27:23.440><c> what</c><00:27:23.600><c> you</c><00:27:23.760><c> were</c><00:27:24.000><c> doing</c>

00:27:24.310 --> 00:27:24.320 align:start position:0%
performance um if what you were doing
 

00:27:24.320 --> 00:27:25.510 align:start position:0%
performance um if what you were doing
you<00:27:24.480><c> know</c><00:27:24.640><c> if</c>

00:27:25.510 --> 00:27:25.520 align:start position:0%
you know if
 

00:27:25.520 --> 00:27:27.190 align:start position:0%
you know if
the<00:27:25.679><c> actual</c><00:27:25.919><c> data</c><00:27:26.240><c> was</c><00:27:26.399><c> fairly</c><00:27:26.720><c> simple</c><00:27:27.039><c> to</c>

00:27:27.190 --> 00:27:27.200 align:start position:0%
the actual data was fairly simple to
 

00:27:27.200 --> 00:27:29.990 align:start position:0%
the actual data was fairly simple to
read<00:27:28.320><c> the</c><00:27:28.480><c> lock</c><00:27:28.720><c> will</c><00:27:28.880><c> dominate</c><00:27:29.360><c> and</c><00:27:29.440><c> destroy</c>

00:27:29.990 --> 00:27:30.000 align:start position:0%
read the lock will dominate and destroy
 

00:27:30.000 --> 00:27:33.269 align:start position:0%
read the lock will dominate and destroy
parallel<00:27:30.399><c> performance</c>

00:27:33.269 --> 00:27:33.279 align:start position:0%
 
 

00:27:33.279 --> 00:27:36.230 align:start position:0%
 
so<00:27:33.520><c> any</c><00:27:33.679><c> questions</c><00:27:34.080><c> about</c><00:27:34.320><c> this</c><00:27:35.760><c> performance</c>

00:27:36.230 --> 00:27:36.240 align:start position:0%
so any questions about this performance
 

00:27:36.240 --> 00:27:43.430 align:start position:0%
so any questions about this performance
story

00:27:43.430 --> 00:27:43.440 align:start position:0%
 
 

00:27:43.440 --> 00:27:46.149 align:start position:0%
 
in<00:27:43.600><c> a</c><00:27:43.679><c> sense</c><00:27:44.159><c> you</c><00:27:44.320><c> know</c><00:27:44.799><c> the</c><00:27:45.120><c> bad</c><00:27:45.440><c> performance</c>

00:27:46.149 --> 00:27:46.159 align:start position:0%
in a sense you know the bad performance
 

00:27:46.159 --> 00:27:47.830 align:start position:0%
in a sense you know the bad performance
of<00:27:46.240><c> read</c><00:27:46.559><c> write</c>

00:27:47.830 --> 00:27:47.840 align:start position:0%
of read write
 

00:27:47.840 --> 00:27:51.909 align:start position:0%
of read write
is<00:27:48.799><c> the</c><00:27:48.960><c> reason</c><00:27:49.279><c> for</c><00:27:49.440><c> the</c><00:27:49.600><c> existence</c><00:27:50.080><c> of</c><00:27:50.240><c> rcu</c>

00:27:51.909 --> 00:27:51.919 align:start position:0%
is the reason for the existence of rcu
 

00:27:51.919 --> 00:27:55.590 align:start position:0%
is the reason for the existence of rcu
because<00:27:52.399><c> if</c><00:27:52.640><c> this</c><00:27:53.200><c> was</c><00:27:53.440><c> efficient</c>

00:27:55.590 --> 00:27:55.600 align:start position:0%
because if this was efficient
 

00:27:55.600 --> 00:27:59.029 align:start position:0%
because if this was efficient
then<00:27:57.360><c> there'll</c><00:27:57.520><c> be</c><00:27:57.679><c> no</c><00:27:57.919><c> need</c><00:27:58.480><c> to</c><00:27:58.640><c> do</c><00:27:58.799><c> better</c>

00:27:59.029 --> 00:27:59.039 align:start position:0%
then there'll be no need to do better
 

00:27:59.039 --> 00:28:00.070 align:start position:0%
then there'll be no need to do better
than<00:27:59.200><c> that</c>

00:28:00.070 --> 00:28:00.080 align:start position:0%
than that
 

00:28:00.080 --> 00:28:02.630 align:start position:0%
than that
right<00:28:00.480><c> but</c><00:28:00.640><c> it's</c><00:28:00.799><c> terribly</c><00:28:01.120><c> inefficient</c><00:28:01.840><c> um</c>

00:28:02.630 --> 00:28:02.640 align:start position:0%
right but it's terribly inefficient um
 

00:28:02.640 --> 00:28:03.190 align:start position:0%
right but it's terribly inefficient um
and

00:28:03.190 --> 00:28:03.200 align:start position:0%
and
 

00:28:03.200 --> 00:28:05.590 align:start position:0%
and
it<00:28:03.760><c> it's</c><00:28:04.399><c> there's</c><00:28:04.559><c> two</c><00:28:04.799><c> things</c><00:28:05.039><c> going</c><00:28:05.200><c> on</c><00:28:05.360><c> one</c>

00:28:05.590 --> 00:28:05.600 align:start position:0%
it it's there's two things going on one
 

00:28:05.600 --> 00:28:07.430 align:start position:0%
it it's there's two things going on one
is<00:28:05.679><c> the</c><00:28:05.840><c> details</c><00:28:06.399><c> of</c><00:28:06.480><c> this</c><00:28:06.720><c> oh</c><00:28:06.880><c> there</c><00:28:07.120><c> needs</c><00:28:07.360><c> to</c>

00:28:07.430 --> 00:28:07.440 align:start position:0%
is the details of this oh there needs to
 

00:28:07.440 --> 00:28:08.950 align:start position:0%
is the details of this oh there needs to
be<00:28:07.520><c> a</c><00:28:07.600><c> total</c><00:28:07.919><c> of</c><00:28:08.080><c> n</c><00:28:08.159><c> squared</c><00:28:08.559><c> trips</c><00:28:08.799><c> through</c>

00:28:08.950 --> 00:28:08.960 align:start position:0%
be a total of n squared trips through
 

00:28:08.960 --> 00:28:09.830 align:start position:0%
be a total of n squared trips through
this<00:28:09.200><c> loop</c><00:28:09.440><c> if</c>

00:28:09.830 --> 00:28:09.840 align:start position:0%
this loop if
 

00:28:09.840 --> 00:28:11.750 align:start position:0%
this loop if
we<00:28:10.000><c> have</c><00:28:10.159><c> n</c><00:28:10.320><c> cores</c><00:28:10.720><c> is</c><00:28:11.120><c> sort</c><00:28:11.279><c> of</c><00:28:11.360><c> one</c><00:28:11.520><c> way</c><00:28:11.679><c> of</c>

00:28:11.750 --> 00:28:11.760 align:start position:0%
we have n cores is sort of one way of
 

00:28:11.760 --> 00:28:13.269 align:start position:0%
we have n cores is sort of one way of
looking<00:28:12.000><c> at</c><00:28:12.159><c> it</c><00:28:12.480><c> the</c><00:28:12.640><c> other</c><00:28:12.799><c> way</c><00:28:12.880><c> of</c><00:28:13.039><c> looking</c>

00:28:13.269 --> 00:28:13.279 align:start position:0%
looking at it the other way of looking
 

00:28:13.279 --> 00:28:14.070 align:start position:0%
looking at it the other way of looking
at<00:28:13.440><c> it</c><00:28:13.520><c> is</c><00:28:13.679><c> that</c>

00:28:14.070 --> 00:28:14.080 align:start position:0%
at it is that
 

00:28:14.080 --> 00:28:16.950 align:start position:0%
at it is that
we're<00:28:14.840><c> writing</c><00:28:15.919><c> you</c><00:28:16.000><c> know</c><00:28:16.159><c> regardless</c><00:28:16.720><c> of</c><00:28:16.880><c> the</c>

00:28:16.950 --> 00:28:16.960 align:start position:0%
we're writing you know regardless of the
 

00:28:16.960 --> 00:28:18.950 align:start position:0%
we're writing you know regardless of the
details<00:28:17.360><c> of</c><00:28:17.440><c> what's</c><00:28:17.760><c> going</c><00:28:18.000><c> on</c><00:28:18.240><c> here</c>

00:28:18.950 --> 00:28:18.960 align:start position:0%
details of what's going on here
 

00:28:18.960 --> 00:28:20.710 align:start position:0%
details of what's going on here
these<00:28:19.200><c> locks</c><00:28:19.520><c> have</c><00:28:19.679><c> turned</c><00:28:19.919><c> a</c><00:28:20.080><c> read-only</c>

00:28:20.710 --> 00:28:20.720 align:start position:0%
these locks have turned a read-only
 

00:28:20.720 --> 00:28:22.470 align:start position:0%
these locks have turned a read-only
access<00:28:21.520><c> which</c><00:28:21.679><c> could</c><00:28:21.840><c> be</c><00:28:22.000><c> cached</c><00:28:22.320><c> and</c>

00:28:22.470 --> 00:28:22.480 align:start position:0%
access which could be cached and
 

00:28:22.480 --> 00:28:24.310 align:start position:0%
access which could be cached and
extremely<00:28:23.039><c> fast</c>

00:28:24.310 --> 00:28:24.320 align:start position:0%
extremely fast
 

00:28:24.320 --> 00:28:26.710 align:start position:0%
extremely fast
into<00:28:24.640><c> an</c><00:28:24.880><c> access</c><00:28:25.200><c> that</c><00:28:25.440><c> one</c><00:28:25.600><c> way</c><00:28:25.760><c> or</c><00:28:25.919><c> another</c>

00:28:26.710 --> 00:28:26.720 align:start position:0%
into an access that one way or another
 

00:28:26.720 --> 00:28:27.669 align:start position:0%
into an access that one way or another
involves<00:28:27.120><c> a</c><00:28:27.279><c> right</c>

00:28:27.669 --> 00:28:27.679 align:start position:0%
involves a right
 

00:28:27.679 --> 00:28:30.070 align:start position:0%
involves a right
one<00:28:27.919><c> or</c><00:28:28.000><c> more</c><00:28:28.240><c> rights</c><00:28:29.120><c> and</c><00:28:29.360><c> rights</c><00:28:29.679><c> are</c><00:28:29.760><c> just</c>

00:28:30.070 --> 00:28:30.080 align:start position:0%
one or more rights and rights are just
 

00:28:30.080 --> 00:28:32.230 align:start position:0%
one or more rights and rights are just
much<00:28:30.320><c> more</c><00:28:30.559><c> expensive</c><00:28:31.039><c> than</c><00:28:31.279><c> reads</c>

00:28:32.230 --> 00:28:32.240 align:start position:0%
much more expensive than reads
 

00:28:32.240 --> 00:28:33.669 align:start position:0%
much more expensive than reads
if<00:28:32.399><c> we're</c><00:28:32.559><c> writing</c><00:28:32.960><c> data</c><00:28:33.200><c> that</c><00:28:33.360><c> might</c><00:28:33.520><c> be</c>

00:28:33.669 --> 00:28:33.679 align:start position:0%
if we're writing data that might be
 

00:28:33.679 --> 00:28:35.510 align:start position:0%
if we're writing data that might be
shared

00:28:35.510 --> 00:28:35.520 align:start position:0%
shared
 

00:28:35.520 --> 00:28:39.110 align:start position:0%
shared
with<00:28:35.760><c> other</c><00:28:36.000><c> cores</c><00:28:37.120><c> because</c><00:28:37.679><c> a</c><00:28:38.240><c> read</c>

00:28:39.110 --> 00:28:39.120 align:start position:0%
with other cores because a read
 

00:28:39.120 --> 00:28:40.630 align:start position:0%
with other cores because a read
for<00:28:39.279><c> data</c><00:28:39.520><c> that's</c><00:28:39.679><c> not</c><00:28:39.840><c> modified</c><00:28:40.399><c> can</c><00:28:40.480><c> be</c>

00:28:40.630 --> 00:28:40.640 align:start position:0%
for data that's not modified can be
 

00:28:40.640 --> 00:28:42.389 align:start position:0%
for data that's not modified can be
satisfied<00:28:41.200><c> in</c><00:28:41.279><c> a</c><00:28:41.360><c> couple</c><00:28:41.679><c> cycles</c><00:28:42.000><c> out</c><00:28:42.159><c> of</c><00:28:42.240><c> your</c>

00:28:42.389 --> 00:28:42.399 align:start position:0%
satisfied in a couple cycles out of your
 

00:28:42.399 --> 00:28:43.430 align:start position:0%
satisfied in a couple cycles out of your
own<00:28:42.559><c> cache</c>

00:28:43.430 --> 00:28:43.440 align:start position:0%
own cache
 

00:28:43.440 --> 00:28:46.230 align:start position:0%
own cache
a<00:28:43.600><c> write</c><00:28:44.080><c> any</c><00:28:44.399><c> right</c><00:28:44.640><c> to</c><00:28:44.799><c> data</c><00:28:45.679><c> that</c><00:28:45.919><c> may</c><00:28:46.080><c> be</c>

00:28:46.230 --> 00:28:46.240 align:start position:0%
a write any right to data that may be
 

00:28:46.240 --> 00:28:47.350 align:start position:0%
a write any right to data that may be
cached<00:28:46.559><c> by</c><00:28:46.720><c> other</c><00:28:46.880><c> cores</c>

00:28:47.350 --> 00:28:47.360 align:start position:0%
cached by other cores
 

00:28:47.360 --> 00:28:49.269 align:start position:0%
cached by other cores
has<00:28:47.520><c> to</c><00:28:47.679><c> involve</c><00:28:48.320><c> communication</c><00:28:48.880><c> between</c>

00:28:49.269 --> 00:28:49.279 align:start position:0%
has to involve communication between
 

00:28:49.279 --> 00:28:51.750 align:start position:0%
has to involve communication between
cores<00:28:50.159><c> to</c><00:28:50.399><c> invalidate</c><00:28:50.960><c> other</c><00:28:51.200><c> copies</c>

00:28:51.750 --> 00:28:51.760 align:start position:0%
cores to invalidate other copies
 

00:28:51.760 --> 00:28:54.549 align:start position:0%
cores to invalidate other copies
so<00:28:51.919><c> no</c><00:28:52.159><c> matter</c><00:28:52.480><c> how</c><00:28:52.640><c> you</c><00:28:52.880><c> slice</c><00:28:53.279><c> it</c><00:28:54.240><c> anything</c>

00:28:54.549 --> 00:28:54.559 align:start position:0%
so no matter how you slice it anything
 

00:28:54.559 --> 00:28:56.310 align:start position:0%
so no matter how you slice it anything
that<00:28:54.720><c> involves</c><00:28:55.120><c> a</c><00:28:55.200><c> right</c><00:28:55.440><c> to</c><00:28:55.600><c> share</c><00:28:55.840><c> data</c><00:28:56.159><c> is</c><00:28:56.240><c> a</c>

00:28:56.310 --> 00:28:56.320 align:start position:0%
that involves a right to share data is a
 

00:28:56.320 --> 00:28:58.149 align:start position:0%
that involves a right to share data is a
disaster<00:28:56.880><c> for</c><00:28:57.039><c> performance</c>

00:28:58.149 --> 00:28:58.159 align:start position:0%
disaster for performance
 

00:28:58.159 --> 00:29:00.470 align:start position:0%
disaster for performance
if<00:28:58.640><c> if</c><00:28:59.200><c> you</c><00:28:59.440><c> otherwise</c><00:28:59.840><c> could</c><00:29:00.000><c> have</c><00:29:00.080><c> been</c><00:29:00.240><c> read</c>

00:29:00.470 --> 00:29:00.480 align:start position:0%
if if you otherwise could have been read
 

00:29:00.480 --> 00:29:01.430 align:start position:0%
if if you otherwise could have been read
only

00:29:01.430 --> 00:29:01.440 align:start position:0%
only
 

00:29:01.440 --> 00:29:04.870 align:start position:0%
only
so<00:29:01.600><c> the</c><00:29:01.679><c> details</c><00:29:02.240><c> of</c><00:29:02.559><c> this</c><00:29:02.799><c> loop</c><00:29:04.399><c> are</c><00:29:04.640><c> sort</c><00:29:04.799><c> of</c>

00:29:04.870 --> 00:29:04.880 align:start position:0%
so the details of this loop are sort of
 

00:29:04.880 --> 00:29:06.470 align:start position:0%
so the details of this loop are sort of
less<00:29:05.120><c> important</c><00:29:05.440><c> than</c><00:29:05.600><c> the</c><00:29:05.679><c> fact</c><00:29:05.919><c> that</c><00:29:06.080><c> it</c>

00:29:06.470 --> 00:29:06.480 align:start position:0%
less important than the fact that it
 

00:29:06.480 --> 00:29:10.070 align:start position:0%
less important than the fact that it
did<00:29:06.720><c> a</c><00:29:06.799><c> right</c><00:29:08.320><c> to</c><00:29:08.480><c> share</c><00:29:08.799><c> data</c>

00:29:10.070 --> 00:29:10.080 align:start position:0%
did a right to share data
 

00:29:10.080 --> 00:29:12.230 align:start position:0%
did a right to share data
so<00:29:10.240><c> what</c><00:29:10.399><c> we're</c><00:29:10.559><c> looking</c><00:29:10.720><c> for</c><00:29:10.960><c> is</c><00:29:11.120><c> a</c><00:29:11.200><c> way</c><00:29:11.919><c> to</c><00:29:12.080><c> be</c>

00:29:12.230 --> 00:29:12.240 align:start position:0%
so what we're looking for is a way to be
 

00:29:12.240 --> 00:29:14.630 align:start position:0%
so what we're looking for is a way to be
able<00:29:12.399><c> to</c><00:29:12.559><c> read</c><00:29:13.039><c> data</c>

00:29:14.630 --> 00:29:14.640 align:start position:0%
able to read data
 

00:29:14.640 --> 00:29:17.669 align:start position:0%
able to read data
without<00:29:15.039><c> rights</c><00:29:16.799><c> right</c><00:29:17.120><c> we</c><00:29:17.279><c> want</c><00:29:17.360><c> to</c><00:29:17.440><c> be</c><00:29:17.520><c> able</c>

00:29:17.669 --> 00:29:17.679 align:start position:0%
without rights right we want to be able
 

00:29:17.679 --> 00:29:19.350 align:start position:0%
without rights right we want to be able
to<00:29:17.760><c> scan</c><00:29:18.080><c> that</c><00:29:18.320><c> list</c>

00:29:19.350 --> 00:29:19.360 align:start position:0%
to scan that list
 

00:29:19.360 --> 00:29:21.990 align:start position:0%
to scan that list
um<00:29:20.480><c> without</c><00:29:20.880><c> doing</c><00:29:21.039><c> any</c><00:29:21.200><c> rights</c><00:29:21.440><c> whatsoever</c>

00:29:21.990 --> 00:29:22.000 align:start position:0%
um without doing any rights whatsoever
 

00:29:22.000 --> 00:29:22.630 align:start position:0%
um without doing any rights whatsoever
including

00:29:22.630 --> 00:29:22.640 align:start position:0%
including
 

00:29:22.640 --> 00:29:24.630 align:start position:0%
including
any<00:29:22.880><c> rights</c><00:29:23.440><c> that</c><00:29:23.600><c> might</c><00:29:23.760><c> be</c><00:29:24.000><c> required</c><00:29:24.399><c> to</c><00:29:24.480><c> do</c>

00:29:24.630 --> 00:29:24.640 align:start position:0%
any rights that might be required to do
 

00:29:24.640 --> 00:29:26.070 align:start position:0%
any rights that might be required to do
some<00:29:24.799><c> kind</c><00:29:24.960><c> of</c><00:29:25.039><c> locking</c><00:29:25.520><c> thing</c>

00:29:26.070 --> 00:29:26.080 align:start position:0%
some kind of locking thing
 

00:29:26.080 --> 00:29:27.830 align:start position:0%
some kind of locking thing
they<00:29:26.240><c> were</c><00:29:26.320><c> looking</c><00:29:26.559><c> for</c><00:29:26.720><c> really</c><00:29:26.960><c> really</c>

00:29:27.830 --> 00:29:27.840 align:start position:0%
they were looking for really really
 

00:29:27.840 --> 00:29:32.230 align:start position:0%
they were looking for really really
read-only<00:29:28.399><c> access</c><00:29:28.720><c> to</c><00:29:28.880><c> data</c>

00:29:32.230 --> 00:29:32.240 align:start position:0%
 
 

00:29:32.240 --> 00:29:35.590 align:start position:0%
 
okay

00:29:35.590 --> 00:29:35.600 align:start position:0%
 
 

00:29:35.600 --> 00:29:39.430 align:start position:0%
 
so<00:29:36.720><c> one</c><00:29:36.960><c> possibility</c>

00:29:39.430 --> 00:29:39.440 align:start position:0%
so one possibility
 

00:29:39.440 --> 00:29:40.710 align:start position:0%
so one possibility
that's<00:29:39.520><c> not</c><00:29:39.679><c> a</c><00:29:39.760><c> possibility</c><00:29:40.320><c> but</c><00:29:40.480><c> it's</c><00:29:40.559><c> sort</c>

00:29:40.710 --> 00:29:40.720 align:start position:0%
that's not a possibility but it's sort
 

00:29:40.720 --> 00:29:42.870 align:start position:0%
that's not a possibility but it's sort
of<00:29:40.799><c> a</c><00:29:40.880><c> thought</c><00:29:41.120><c> experiment</c><00:29:41.679><c> is</c><00:29:42.320><c> we</c><00:29:42.559><c> just</c><00:29:42.720><c> have</c>

00:29:42.870 --> 00:29:42.880 align:start position:0%
of a thought experiment is we just have
 

00:29:42.880 --> 00:29:45.029 align:start position:0%
of a thought experiment is we just have
the<00:29:42.960><c> readers</c><00:29:43.200><c> not</c><00:29:43.360><c> bother</c><00:29:43.679><c> locking</c>

00:29:45.029 --> 00:29:45.039 align:start position:0%
the readers not bother locking
 

00:29:45.039 --> 00:29:46.389 align:start position:0%
the readers not bother locking
right<00:29:45.279><c> you</c><00:29:45.360><c> know</c><00:29:45.520><c> occasionally</c><00:29:46.159><c> you</c><00:29:46.240><c> get</c>

00:29:46.389 --> 00:29:46.399 align:start position:0%
right you know occasionally you get
 

00:29:46.399 --> 00:29:47.909 align:start position:0%
right you know occasionally you get
lucky<00:29:46.720><c> and</c><00:29:46.799><c> it</c><00:29:46.880><c> turns</c><00:29:47.200><c> out</c><00:29:47.279><c> that</c><00:29:47.440><c> readers</c><00:29:47.760><c> can</c>

00:29:47.909 --> 00:29:47.919 align:start position:0%
lucky and it turns out that readers can
 

00:29:47.919 --> 00:29:49.669 align:start position:0%
lucky and it turns out that readers can
read<00:29:48.159><c> stuff</c>

00:29:49.669 --> 00:29:49.679 align:start position:0%
read stuff
 

00:29:49.679 --> 00:29:51.269 align:start position:0%
read stuff
and<00:29:49.760><c> that</c><00:29:50.000><c> only</c><00:29:50.240><c> writers</c><00:29:50.559><c> need</c><00:29:50.720><c> to</c><00:29:50.880><c> lock</c><00:29:51.120><c> so</c>

00:29:51.269 --> 00:29:51.279 align:start position:0%
and that only writers need to lock so
 

00:29:51.279 --> 00:29:52.870 align:start position:0%
and that only writers need to lock so
we'll<00:29:51.440><c> just</c><00:29:51.600><c> do</c><00:29:51.679><c> a</c><00:29:51.760><c> quick</c><00:29:52.000><c> experiment</c><00:29:52.559><c> to</c><00:29:52.640><c> see</c>

00:29:52.870 --> 00:29:52.880 align:start position:0%
we'll just do a quick experiment to see
 

00:29:52.880 --> 00:29:54.549 align:start position:0%
we'll just do a quick experiment to see
whether

00:29:54.549 --> 00:29:54.559 align:start position:0%
whether
 

00:29:54.559 --> 00:29:57.750 align:start position:0%
whether
we<00:29:54.720><c> could</c><00:29:54.960><c> have</c><00:29:56.159><c> a</c><00:29:56.399><c> lock</c><00:29:57.120><c> just</c>

00:29:57.750 --> 00:29:57.760 align:start position:0%
we could have a lock just
 

00:29:57.760 --> 00:30:00.710 align:start position:0%
we could have a lock just
have<00:29:58.000><c> readers</c><00:29:58.320><c> just</c><00:29:58.480><c> read</c><00:29:58.720><c> the</c><00:29:58.880><c> list</c><00:29:59.279><c> without</c>

00:30:00.710 --> 00:30:00.720 align:start position:0%
have readers just read the list without
 

00:30:00.720 --> 00:30:02.230 align:start position:0%
have readers just read the list without
locking<00:30:01.120><c> it</c>

00:30:02.230 --> 00:30:02.240 align:start position:0%
locking it
 

00:30:02.240 --> 00:30:03.830 align:start position:0%
locking it
so<00:30:02.399><c> suppose</c><00:30:02.640><c> we</c><00:30:02.799><c> have</c><00:30:02.880><c> this</c><00:30:03.039><c> list</c><00:30:03.360><c> and</c><00:30:03.520><c> it</c><00:30:03.600><c> has</c>

00:30:03.830 --> 00:30:03.840 align:start position:0%
so suppose we have this list and it has
 

00:30:03.840 --> 00:30:11.990 align:start position:0%
so suppose we have this list and it has
some<00:30:04.559><c> you</c><00:30:04.640><c> know</c><00:30:06.840><c> strings</c>

00:30:11.990 --> 00:30:12.000 align:start position:0%
 
 

00:30:12.000 --> 00:30:16.789 align:start position:0%
 
and<00:30:13.440><c> uh</c>

00:30:16.789 --> 00:30:16.799 align:start position:0%
 
 

00:30:16.799 --> 00:30:18.789 align:start position:0%
 
we're<00:30:16.960><c> going</c><00:30:17.039><c> to</c><00:30:17.120><c> read</c><00:30:17.360><c> it</c><00:30:17.520><c> okay</c><00:30:17.840><c> so</c><00:30:18.480><c> nothing</c>

00:30:18.789 --> 00:30:18.799 align:start position:0%
we're going to read it okay so nothing
 

00:30:18.799 --> 00:30:20.310 align:start position:0%
we're going to read it okay so nothing
goes<00:30:18.960><c> wrong</c><00:30:19.120><c> if</c><00:30:19.200><c> there's</c><00:30:19.360><c> no</c><00:30:19.520><c> writer</c><00:30:19.919><c> right</c>

00:30:20.310 --> 00:30:20.320 align:start position:0%
goes wrong if there's no writer right
 

00:30:20.320 --> 00:30:21.590 align:start position:0%
goes wrong if there's no writer right
you<00:30:20.480><c> just</c><00:30:20.640><c> read</c><00:30:20.880><c> the</c><00:30:20.960><c> list</c><00:30:21.279><c> it's</c><00:30:21.440><c> not</c><00:30:21.520><c> a</c>

00:30:21.590 --> 00:30:21.600 align:start position:0%
you just read the list it's not a
 

00:30:21.600 --> 00:30:23.350 align:start position:0%
you just read the list it's not a
problem<00:30:22.159><c> so</c><00:30:22.399><c> we</c><00:30:22.480><c> got</c><00:30:22.640><c> to</c><00:30:22.720><c> imagine</c><00:30:23.039><c> there's</c><00:30:23.200><c> a</c>

00:30:23.350 --> 00:30:23.360 align:start position:0%
problem so we got to imagine there's a
 

00:30:23.360 --> 00:30:24.549 align:start position:0%
problem so we got to imagine there's a
writer

00:30:24.549 --> 00:30:24.559 align:start position:0%
writer
 

00:30:24.559 --> 00:30:27.510 align:start position:0%
writer
and<00:30:24.880><c> there's</c><00:30:25.120><c> probably</c><00:30:25.600><c> three</c><00:30:25.919><c> cases</c><00:30:26.880><c> if</c><00:30:27.279><c> you</c>

00:30:27.510 --> 00:30:27.520 align:start position:0%
and there's probably three cases if you
 

00:30:27.520 --> 00:30:28.950 align:start position:0%
and there's probably three cases if you
read<00:30:27.840><c> a</c><00:30:27.919><c> list</c>

00:30:28.950 --> 00:30:28.960 align:start position:0%
read a list
 

00:30:28.960 --> 00:30:33.430 align:start position:0%
read a list
while<00:30:29.440><c> some</c><00:30:29.679><c> other</c><00:30:29.840><c> course</c><00:30:31.120><c> modifying</c><00:30:31.760><c> it</c>

00:30:33.430 --> 00:30:33.440 align:start position:0%
while some other course modifying it
 

00:30:33.440 --> 00:30:35.830 align:start position:0%
while some other course modifying it
so<00:30:33.679><c> one</c><00:30:34.000><c> case</c><00:30:34.720><c> is</c><00:30:34.880><c> that</c><00:30:34.960><c> the</c><00:30:35.120><c> writer</c><00:30:35.440><c> is</c><00:30:35.520><c> just</c>

00:30:35.830 --> 00:30:35.840 align:start position:0%
so one case is that the writer is just
 

00:30:35.840 --> 00:30:38.470 align:start position:0%
so one case is that the writer is just
changing<00:30:36.240><c> the</c><00:30:36.399><c> content</c>

00:30:38.470 --> 00:30:38.480 align:start position:0%
changing the content
 

00:30:38.480 --> 00:30:41.190 align:start position:0%
changing the content
that<00:30:38.720><c> is</c><00:30:39.919><c> not</c><00:30:40.159><c> adding</c><00:30:40.399><c> or</c><00:30:40.480><c> deleting</c><00:30:40.799><c> anyone</c><00:30:41.120><c> is</c>

00:30:41.190 --> 00:30:41.200 align:start position:0%
that is not adding or deleting anyone is
 

00:30:41.200 --> 00:30:42.950 align:start position:0%
that is not adding or deleting anyone is
necessarily<00:30:41.760><c> a</c><00:30:42.000><c> writer</c><00:30:42.320><c> is</c><00:30:42.399><c> just</c><00:30:42.640><c> changing</c>

00:30:42.950 --> 00:30:42.960 align:start position:0%
necessarily a writer is just changing
 

00:30:42.960 --> 00:30:45.269 align:start position:0%
necessarily a writer is just changing
the<00:30:43.120><c> string</c><00:30:43.440><c> to</c><00:30:43.520><c> be</c><00:30:43.679><c> some</c><00:30:43.840><c> other</c><00:30:44.080><c> string</c>

00:30:45.269 --> 00:30:45.279 align:start position:0%
the string to be some other string
 

00:30:45.279 --> 00:30:47.590 align:start position:0%
the string to be some other string
so<00:30:45.440><c> one</c><00:30:45.679><c> is</c><00:30:45.840><c> the</c><00:30:46.799><c> writer</c><00:30:47.039><c> is</c><00:30:47.200><c> changing</c><00:30:47.520><c> the</c>

00:30:47.590 --> 00:30:47.600 align:start position:0%
so one is the writer is changing the
 

00:30:47.600 --> 00:30:48.710 align:start position:0%
so one is the writer is changing the
content

00:30:48.710 --> 00:30:48.720 align:start position:0%
content
 

00:30:48.720 --> 00:30:51.029 align:start position:0%
content
two<00:30:49.039><c> is</c><00:30:49.200><c> the</c><00:30:49.360><c> writer</c><00:30:49.840><c> is</c><00:30:50.240><c> inserting</c><00:30:50.799><c> a</c><00:30:50.880><c> new</c>

00:30:51.029 --> 00:30:51.039 align:start position:0%
two is the writer is inserting a new
 

00:30:51.039 --> 00:30:53.430 align:start position:0%
two is the writer is inserting a new
list<00:30:51.279><c> element</c>

00:30:53.430 --> 00:30:53.440 align:start position:0%
list element
 

00:30:53.440 --> 00:30:56.230 align:start position:0%
list element
and<00:30:53.679><c> the</c><00:30:53.760><c> third</c><00:30:54.080><c> case</c><00:30:55.360><c> is</c><00:30:55.600><c> if</c><00:30:55.679><c> the</c><00:30:55.840><c> writer</c><00:30:56.159><c> is</c>

00:30:56.230 --> 00:30:56.240 align:start position:0%
and the third case is if the writer is
 

00:30:56.240 --> 00:30:56.870 align:start position:0%
and the third case is if the writer is
deleting<00:30:56.559><c> a</c>

00:30:56.870 --> 00:30:56.880 align:start position:0%
deleting a
 

00:30:56.880 --> 00:30:59.590 align:start position:0%
deleting a
list<00:30:57.200><c> element</c><00:30:58.399><c> and</c><00:30:58.640><c> i</c><00:30:58.720><c> want</c><00:30:58.799><c> to</c><00:30:58.960><c> examine</c><00:30:59.360><c> these</c>

00:30:59.590 --> 00:30:59.600 align:start position:0%
list element and i want to examine these
 

00:30:59.600 --> 00:31:02.630 align:start position:0%
list element and i want to examine these
because

00:31:02.630 --> 00:31:02.640 align:start position:0%
 
 

00:31:02.640 --> 00:31:04.549 align:start position:0%
 
we<00:31:02.799><c> need</c><00:31:02.960><c> a</c><00:31:03.120><c> story</c><00:31:03.360><c> for</c><00:31:03.519><c> each</c><00:31:03.840><c> and</c><00:31:04.000><c> rcu</c>

00:31:04.549 --> 00:31:04.559 align:start position:0%
we need a story for each and rcu
 

00:31:04.559 --> 00:31:07.509 align:start position:0%
we need a story for each and rcu
actually<00:31:04.799><c> kind</c><00:31:04.960><c> of</c><00:31:05.039><c> has</c><00:31:05.200><c> a</c><00:31:05.279><c> story</c><00:31:05.600><c> for</c><00:31:05.760><c> each</c><00:31:06.080><c> so</c>

00:31:07.509 --> 00:31:07.519 align:start position:0%
actually kind of has a story for each so
 

00:31:07.519 --> 00:31:09.430 align:start position:0%
actually kind of has a story for each so
the<00:31:07.760><c> danger</c><00:31:08.720><c> so</c><00:31:08.960><c> i'm</c><00:31:09.039><c> just</c><00:31:09.120><c> talking</c><00:31:09.360><c> about</c>

00:31:09.430 --> 00:31:09.440 align:start position:0%
the danger so i'm just talking about
 

00:31:09.440 --> 00:31:10.870 align:start position:0%
the danger so i'm just talking about
what<00:31:09.600><c> goes</c><00:31:09.840><c> wrong</c><00:31:10.000><c> if</c><00:31:10.159><c> somebody's</c><00:31:10.480><c> reading</c><00:31:10.799><c> a</c>

00:31:10.870 --> 00:31:10.880 align:start position:0%
what goes wrong if somebody's reading a
 

00:31:10.880 --> 00:31:12.789 align:start position:0%
what goes wrong if somebody's reading a
list<00:31:11.279><c> while</c><00:31:11.440><c> another</c><00:31:11.679><c> course</c><00:31:11.919><c> writing</c><00:31:12.240><c> it</c>

00:31:12.789 --> 00:31:12.799 align:start position:0%
list while another course writing it
 

00:31:12.799 --> 00:31:15.430 align:start position:0%
list while another course writing it
if<00:31:13.279><c> the</c><00:31:13.440><c> writer</c><00:31:14.000><c> wants</c><00:31:14.240><c> to</c><00:31:14.559><c> it</c><00:31:14.720><c> just</c><00:31:15.039><c> changes</c>

00:31:15.430 --> 00:31:15.440 align:start position:0%
if the writer wants to it just changes
 

00:31:15.440 --> 00:31:16.549 align:start position:0%
if the writer wants to it just changes
the<00:31:15.600><c> string</c>

00:31:16.549 --> 00:31:16.559 align:start position:0%
the string
 

00:31:16.559 --> 00:31:18.310 align:start position:0%
the string
then<00:31:16.720><c> the</c><00:31:16.880><c> danger</c><00:31:17.279><c> is</c><00:31:17.440><c> that</c><00:31:17.519><c> the</c><00:31:17.760><c> reader</c><00:31:18.159><c> will</c>

00:31:18.310 --> 00:31:18.320 align:start position:0%
then the danger is that the reader will
 

00:31:18.320 --> 00:31:20.310 align:start position:0%
then the danger is that the reader will
be<00:31:18.559><c> actually</c><00:31:19.120><c> reading</c><00:31:19.519><c> the</c><00:31:19.679><c> bytes</c><00:31:20.000><c> of</c><00:31:20.080><c> this</c>

00:31:20.310 --> 00:31:20.320 align:start position:0%
be actually reading the bytes of this
 

00:31:20.320 --> 00:31:21.430 align:start position:0%
be actually reading the bytes of this
string<00:31:20.799><c> or</c><00:31:20.960><c> whatever</c>

00:31:21.430 --> 00:31:21.440 align:start position:0%
string or whatever
 

00:31:21.440 --> 00:31:23.590 align:start position:0%
string or whatever
else<00:31:21.679><c> is</c><00:31:22.000><c> in</c><00:31:22.080><c> the</c><00:31:22.159><c> list</c><00:31:22.480><c> element</c><00:31:23.200><c> while</c><00:31:23.440><c> the</c>

00:31:23.590 --> 00:31:23.600 align:start position:0%
else is in the list element while the
 

00:31:23.600 --> 00:31:24.470 align:start position:0%
else is in the list element while the
writer

00:31:24.470 --> 00:31:24.480 align:start position:0%
writer
 

00:31:24.480 --> 00:31:27.190 align:start position:0%
writer
is<00:31:24.720><c> modifying</c><00:31:25.279><c> the</c><00:31:25.440><c> same</c><00:31:25.760><c> bytes</c><00:31:26.640><c> and</c><00:31:26.880><c> so</c><00:31:27.039><c> if</c><00:31:27.120><c> we</c>

00:31:27.190 --> 00:31:27.200 align:start position:0%
is modifying the same bytes and so if we
 

00:31:27.200 --> 00:31:28.310 align:start position:0%
is modifying the same bytes and so if we
don't<00:31:27.279><c> do</c><00:31:27.440><c> anything</c><00:31:27.679><c> special</c>

00:31:28.310 --> 00:31:28.320 align:start position:0%
don't do anything special
 

00:31:28.320 --> 00:31:30.389 align:start position:0%
don't do anything special
the<00:31:28.480><c> reader</c><00:31:28.880><c> will</c><00:31:29.039><c> see</c><00:31:29.279><c> some</c><00:31:29.600><c> mixture</c><00:31:30.159><c> of</c><00:31:30.240><c> the</c>

00:31:30.389 --> 00:31:30.399 align:start position:0%
the reader will see some mixture of the
 

00:31:30.399 --> 00:31:31.350 align:start position:0%
the reader will see some mixture of the
old<00:31:30.720><c> bytes</c>

00:31:31.350 --> 00:31:31.360 align:start position:0%
old bytes
 

00:31:31.360 --> 00:31:34.470 align:start position:0%
old bytes
and<00:31:31.440><c> the</c><00:31:31.600><c> new</c><00:31:31.840><c> bytes</c><00:31:33.600><c> and</c><00:31:33.760><c> that's</c><00:31:34.000><c> probably</c><00:31:34.399><c> a</c>

00:31:34.470 --> 00:31:34.480 align:start position:0%
and the new bytes and that's probably a
 

00:31:34.480 --> 00:31:36.230 align:start position:0%
and the new bytes and that's probably a
disaster

00:31:36.230 --> 00:31:36.240 align:start position:0%
disaster
 

00:31:36.240 --> 00:31:38.230 align:start position:0%
disaster
that's<00:31:36.480><c> one</c><00:31:36.640><c> case</c><00:31:36.880><c> we</c><00:31:36.960><c> have</c><00:31:37.039><c> to</c><00:31:37.120><c> worry</c><00:31:37.440><c> about</c>

00:31:38.230 --> 00:31:38.240 align:start position:0%
that's one case we have to worry about
 

00:31:38.240 --> 00:31:39.830 align:start position:0%
that's one case we have to worry about
another<00:31:38.640><c> possibility</c><00:31:39.200><c> is</c><00:31:39.360><c> that</c><00:31:39.440><c> the</c><00:31:39.519><c> writer</c>

00:31:39.830 --> 00:31:39.840 align:start position:0%
another possibility is that the writer
 

00:31:39.840 --> 00:31:41.990 align:start position:0%
another possibility is that the writer
is<00:31:40.080><c> inserting</c><00:31:40.799><c> a</c><00:31:40.960><c> new</c><00:31:41.279><c> element</c>

00:31:41.990 --> 00:31:42.000 align:start position:0%
is inserting a new element
 

00:31:42.000 --> 00:31:44.389 align:start position:0%
is inserting a new element
and<00:31:42.159><c> of</c><00:31:42.240><c> course</c><00:31:42.640><c> what</c><00:31:42.799><c> that</c><00:31:43.039><c> means</c><00:31:43.519><c> is</c><00:31:43.679><c> that</c>

00:31:44.389 --> 00:31:44.399 align:start position:0%
and of course what that means is that
 

00:31:44.399 --> 00:31:45.509 align:start position:0%
and of course what that means is that
you<00:31:44.480><c> know</c><00:31:44.640><c> supposing</c>

00:31:45.509 --> 00:31:45.519 align:start position:0%
you know supposing
 

00:31:45.519 --> 00:31:47.350 align:start position:0%
you know supposing
for<00:31:45.840><c> the</c><00:31:46.080><c> writer</c><00:31:46.399><c> wants</c><00:31:46.640><c> to</c><00:31:46.799><c> insert</c><00:31:47.120><c> the</c><00:31:47.200><c> new</c>

00:31:47.350 --> 00:31:47.360 align:start position:0%
for the writer wants to insert the new
 

00:31:47.360 --> 00:31:48.789 align:start position:0%
for the writer wants to insert the new
element<00:31:47.679><c> at</c><00:31:47.760><c> the</c><00:31:47.840><c> head</c><00:31:48.159><c> the</c><00:31:48.320><c> writer</c><00:31:48.559><c> is</c><00:31:48.640><c> going</c>

00:31:48.789 --> 00:31:48.799 align:start position:0%
element at the head the writer is going
 

00:31:48.799 --> 00:31:49.509 align:start position:0%
element at the head the writer is going
to<00:31:48.880><c> cook</c><00:31:49.120><c> up</c>

00:31:49.509 --> 00:31:49.519 align:start position:0%
to cook up
 

00:31:49.519 --> 00:31:50.950 align:start position:0%
to cook up
some<00:31:49.679><c> new</c><00:31:49.919><c> element</c><00:31:50.399><c> going</c><00:31:50.480><c> to</c><00:31:50.559><c> change</c><00:31:50.880><c> the</c>

00:31:50.950 --> 00:31:50.960 align:start position:0%
some new element going to change the
 

00:31:50.960 --> 00:31:52.950 align:start position:0%
some new element going to change the
head<00:31:51.200><c> pointer</c><00:31:51.440><c> to</c><00:31:51.600><c> point</c><00:31:51.840><c> to</c><00:31:52.000><c> it</c><00:31:52.480><c> i'm</c><00:31:52.720><c> going</c><00:31:52.880><c> to</c>

00:31:52.950 --> 00:31:52.960 align:start position:0%
head pointer to point to it i'm going to
 

00:31:52.960 --> 00:31:53.590 align:start position:0%
head pointer to point to it i'm going to
change

00:31:53.590 --> 00:31:53.600 align:start position:0%
change
 

00:31:53.600 --> 00:31:56.549 align:start position:0%
change
the<00:31:53.919><c> uh</c><00:31:54.640><c> new</c><00:31:54.880><c> element</c><00:31:55.279><c> to</c><00:31:55.519><c> point</c><00:31:55.760><c> at</c><00:31:55.840><c> the</c><00:31:56.080><c> old</c>

00:31:56.549 --> 00:31:56.559 align:start position:0%
the uh new element to point at the old
 

00:31:56.559 --> 00:31:57.990 align:start position:0%
the uh new element to point at the old
first<00:31:56.880><c> element</c>

00:31:57.990 --> 00:31:58.000 align:start position:0%
first element
 

00:31:58.000 --> 00:32:01.190 align:start position:0%
first element
right<00:31:58.240><c> and</c><00:31:59.200><c> um</c>

00:32:01.190 --> 00:32:01.200 align:start position:0%
right and um
 

00:32:01.200 --> 00:32:04.470 align:start position:0%
right and um
so<00:32:01.440><c> the</c><00:32:01.519><c> danger</c><00:32:02.000><c> here</c><00:32:03.200><c> if</c><00:32:03.440><c> a</c><00:32:03.600><c> reader</c><00:32:04.000><c> reads</c>

00:32:04.470 --> 00:32:04.480 align:start position:0%
so the danger here if a reader reads
 

00:32:04.480 --> 00:32:06.549 align:start position:0%
so the danger here if a reader reads
is<00:32:04.640><c> reading</c><00:32:04.880><c> the</c><00:32:05.039><c> list</c><00:32:05.840><c> while</c><00:32:06.000><c> the</c><00:32:06.159><c> writer</c><00:32:06.399><c> is</c>

00:32:06.549 --> 00:32:06.559 align:start position:0%
is reading the list while the writer is
 

00:32:06.559 --> 00:32:07.830 align:start position:0%
is reading the list while the writer is
inserting<00:32:07.279><c> is</c><00:32:07.440><c> that</c>

00:32:07.830 --> 00:32:07.840 align:start position:0%
inserting is that
 

00:32:07.840 --> 00:32:11.990 align:start position:0%
inserting is that
maybe<00:32:09.279><c> uh</c><00:32:10.080><c> you</c><00:32:10.159><c> know</c><00:32:10.320><c> if</c><00:32:10.399><c> we</c><00:32:10.559><c> really</c><00:32:10.799><c> blow</c><00:32:11.120><c> it</c>

00:32:11.990 --> 00:32:12.000 align:start position:0%
maybe uh you know if we really blow it
 

00:32:12.000 --> 00:32:15.269 align:start position:0%
maybe uh you know if we really blow it
the<00:32:12.240><c> uh</c><00:32:13.440><c> um</c>

00:32:15.269 --> 00:32:15.279 align:start position:0%
the uh um
 

00:32:15.279 --> 00:32:17.909 align:start position:0%
the uh um
the<00:32:15.440><c> writer</c><00:32:16.480><c> may</c><00:32:16.799><c> set</c><00:32:17.120><c> the</c><00:32:17.279><c> head</c><00:32:17.519><c> pointer</c><00:32:17.840><c> to</c>

00:32:17.909 --> 00:32:17.919 align:start position:0%
the writer may set the head pointer to
 

00:32:17.919 --> 00:32:19.269 align:start position:0%
the writer may set the head pointer to
point<00:32:18.080><c> to</c><00:32:18.159><c> the</c><00:32:18.320><c> new</c><00:32:18.480><c> element</c>

00:32:19.269 --> 00:32:19.279 align:start position:0%
point to the new element
 

00:32:19.279 --> 00:32:21.750 align:start position:0%
point to the new element
before<00:32:19.760><c> the</c><00:32:19.919><c> new</c><00:32:20.159><c> element's</c><00:32:20.559><c> initialized</c>

00:32:21.750 --> 00:32:21.760 align:start position:0%
before the new element's initialized
 

00:32:21.760 --> 00:32:23.509 align:start position:0%
before the new element's initialized
that<00:32:22.000><c> is</c><00:32:22.080><c> while</c><00:32:22.240><c> it</c><00:32:22.320><c> maybe</c><00:32:22.559><c> contains</c><00:32:23.039><c> garbage</c>

00:32:23.509 --> 00:32:23.519 align:start position:0%
that is while it maybe contains garbage
 

00:32:23.519 --> 00:32:24.470 align:start position:0%
that is while it maybe contains garbage
for<00:32:23.600><c> the</c><00:32:23.760><c> string</c>

00:32:24.470 --> 00:32:24.480 align:start position:0%
for the string
 

00:32:24.480 --> 00:32:27.830 align:start position:0%
for the string
or<00:32:24.640><c> some</c><00:32:25.039><c> illegal</c><00:32:25.600><c> pointer</c><00:32:26.960><c> as</c><00:32:27.120><c> the</c><00:32:27.279><c> next</c>

00:32:27.830 --> 00:32:27.840 align:start position:0%
or some illegal pointer as the next
 

00:32:27.840 --> 00:32:29.830 align:start position:0%
or some illegal pointer as the next
element

00:32:29.830 --> 00:32:29.840 align:start position:0%
element
 

00:32:29.840 --> 00:32:31.350 align:start position:0%
element
so<00:32:30.000><c> that's</c><00:32:30.240><c> the</c><00:32:30.399><c> thing</c><00:32:30.559><c> that</c><00:32:30.720><c> could</c><00:32:30.880><c> go</c><00:32:31.039><c> wrong</c>

00:32:31.350 --> 00:32:31.360 align:start position:0%
so that's the thing that could go wrong
 

00:32:31.360 --> 00:32:33.830 align:start position:0%
so that's the thing that could go wrong
if<00:32:31.519><c> a</c><00:32:31.600><c> writer's</c><00:32:32.000><c> inserting</c>

00:32:33.830 --> 00:32:33.840 align:start position:0%
if a writer's inserting
 

00:32:33.840 --> 00:32:36.950 align:start position:0%
if a writer's inserting
so<00:32:34.000><c> let's</c>

00:32:36.950 --> 00:32:36.960 align:start position:0%
 
 

00:32:36.960 --> 00:32:40.830 align:start position:0%
 
um<00:32:37.760><c> and</c><00:32:37.919><c> if</c><00:32:38.000><c> the</c><00:32:38.080><c> writer</c><00:32:38.320><c> is</c><00:32:38.480><c> deleting</c>

00:32:40.830 --> 00:32:40.840 align:start position:0%
um and if the writer is deleting
 

00:32:40.840 --> 00:32:43.430 align:start position:0%
um and if the writer is deleting
then<00:32:42.240><c> you</c><00:32:42.399><c> know</c><00:32:42.480><c> what</c><00:32:42.640><c> it</c><00:32:42.720><c> means</c><00:32:42.880><c> to</c><00:32:43.039><c> delete</c><00:32:43.279><c> an</c>

00:32:43.430 --> 00:32:43.440 align:start position:0%
then you know what it means to delete an
 

00:32:43.440 --> 00:32:44.470 align:start position:0%
then you know what it means to delete an
element<00:32:43.840><c> is</c><00:32:44.000><c> first</c>

00:32:44.470 --> 00:32:44.480 align:start position:0%
element is first
 

00:32:44.480 --> 00:32:46.149 align:start position:0%
element is first
to<00:32:44.720><c> change</c><00:32:45.279><c> let's</c><00:32:45.440><c> say</c><00:32:45.600><c> we're</c><00:32:45.760><c> deleting</c><00:32:46.080><c> the</c>

00:32:46.149 --> 00:32:46.159 align:start position:0%
to change let's say we're deleting the
 

00:32:46.159 --> 00:32:47.750 align:start position:0%
to change let's say we're deleting the
first<00:32:46.399><c> element</c><00:32:46.720><c> we</c><00:32:46.799><c> change</c><00:32:47.039><c> the</c><00:32:47.120><c> head</c><00:32:47.360><c> pointer</c>

00:32:47.750 --> 00:32:47.760 align:start position:0%
first element we change the head pointer
 

00:32:47.760 --> 00:32:49.509 align:start position:0%
first element we change the head pointer
to<00:32:47.919><c> point</c><00:32:48.159><c> to</c><00:32:48.320><c> the</c><00:32:48.480><c> second</c><00:32:48.880><c> element</c>

00:32:49.509 --> 00:32:49.519 align:start position:0%
to point to the second element
 

00:32:49.519 --> 00:32:51.509 align:start position:0%
to point to the second element
and<00:32:49.600><c> then</c><00:32:49.840><c> call</c><00:32:50.240><c> free</c><00:32:50.720><c> on</c><00:32:50.799><c> the</c><00:32:50.880><c> first</c><00:32:51.200><c> element</c>

00:32:51.509 --> 00:32:51.519 align:start position:0%
and then call free on the first element
 

00:32:51.519 --> 00:32:54.549 align:start position:0%
and then call free on the first element
to<00:32:51.679><c> return</c><00:32:52.000><c> this</c><00:32:52.159><c> to</c><00:32:52.320><c> the</c><00:32:52.399><c> free</c><00:32:52.640><c> list</c>

00:32:54.549 --> 00:32:54.559 align:start position:0%
to return this to the free list
 

00:32:54.559 --> 00:32:57.029 align:start position:0%
to return this to the free list
and<00:32:54.960><c> the</c><00:32:55.120><c> danger</c><00:32:55.600><c> here</c><00:32:56.399><c> you</c><00:32:56.480><c> know</c><00:32:56.640><c> if</c><00:32:56.720><c> the</c>

00:32:57.029 --> 00:32:57.039 align:start position:0%
and the danger here you know if the
 

00:32:57.039 --> 00:32:59.029 align:start position:0%
and the danger here you know if the
reader<00:32:57.440><c> sees</c><00:32:57.679><c> the</c><00:32:57.760><c> new</c><00:32:57.919><c> head</c><00:32:58.159><c> pointer</c>

00:32:59.029 --> 00:32:59.039 align:start position:0%
reader sees the new head pointer
 

00:32:59.039 --> 00:33:00.470 align:start position:0%
reader sees the new head pointer
that's<00:32:59.279><c> fine</c><00:32:59.519><c> they're</c><00:32:59.679><c> just</c><00:32:59.840><c> going</c><00:33:00.000><c> to</c><00:33:00.159><c> go</c><00:33:00.399><c> on</c>

00:33:00.470 --> 00:33:00.480 align:start position:0%
that's fine they're just going to go on
 

00:33:00.480 --> 00:33:02.149 align:start position:0%
that's fine they're just going to go on
to<00:33:00.640><c> the</c><00:33:01.200><c> second</c><00:33:01.519><c> elements</c>

00:33:02.149 --> 00:33:02.159 align:start position:0%
to the second elements
 

00:33:02.159 --> 00:33:04.870 align:start position:0%
to the second elements
first<00:33:03.200><c> if</c><00:33:03.360><c> the</c><00:33:03.519><c> reader</c><00:33:03.919><c> actually</c><00:33:04.240><c> was</c><00:33:04.559><c> looking</c>

00:33:04.870 --> 00:33:04.880 align:start position:0%
first if the reader actually was looking
 

00:33:04.880 --> 00:33:06.070 align:start position:0%
first if the reader actually was looking
at<00:33:04.960><c> the</c><00:33:05.120><c> first</c><00:33:05.440><c> element</c>

00:33:06.070 --> 00:33:06.080 align:start position:0%
at the first element
 

00:33:06.080 --> 00:33:08.310 align:start position:0%
at the first element
and<00:33:06.240><c> then</c><00:33:06.399><c> the</c><00:33:06.559><c> writer</c><00:33:07.120><c> freed</c><00:33:07.519><c> it</c><00:33:08.000><c> then</c><00:33:08.240><c> the</c>

00:33:08.310 --> 00:33:08.320 align:start position:0%
and then the writer freed it then the
 

00:33:08.320 --> 00:33:09.750 align:start position:0%
and then the writer freed it then the
problem<00:33:08.640><c> we</c><00:33:08.720><c> have</c><00:33:08.960><c> is</c><00:33:09.039><c> now</c><00:33:09.200><c> the</c><00:33:09.360><c> reader</c><00:33:09.679><c> is</c>

00:33:09.750 --> 00:33:09.760 align:start position:0%
problem we have is now the reader is
 

00:33:09.760 --> 00:33:10.710 align:start position:0%
problem we have is now the reader is
looking<00:33:10.000><c> at</c><00:33:10.159><c> element</c>

00:33:10.710 --> 00:33:10.720 align:start position:0%
looking at element
 

00:33:10.720 --> 00:33:12.950 align:start position:0%
looking at element
that's<00:33:11.039><c> on</c><00:33:11.200><c> the</c><00:33:11.279><c> free</c><00:33:11.600><c> list</c><00:33:12.399><c> and</c><00:33:12.559><c> could</c><00:33:12.799><c> be</c>

00:33:12.950 --> 00:33:12.960 align:start position:0%
that's on the free list and could be
 

00:33:12.960 --> 00:33:14.549 align:start position:0%
that's on the free list and could be
allocated<00:33:13.600><c> for</c><00:33:13.760><c> some</c><00:33:14.000><c> other</c><00:33:14.159><c> use</c><00:33:14.399><c> and</c>

00:33:14.549 --> 00:33:14.559 align:start position:0%
allocated for some other use and
 

00:33:14.559 --> 00:33:15.269 align:start position:0%
allocated for some other use and
overwritten

00:33:15.269 --> 00:33:15.279 align:start position:0%
overwritten
 

00:33:15.279 --> 00:33:17.269 align:start position:0%
overwritten
for<00:33:15.440><c> some</c><00:33:15.600><c> completely</c><00:33:16.080><c> other</c><00:33:16.320><c> use</c><00:33:16.960><c> while</c><00:33:17.120><c> the</c>

00:33:17.269 --> 00:33:17.279 align:start position:0%
for some completely other use while the
 

00:33:17.279 --> 00:33:19.269 align:start position:0%
for some completely other use while the
reader's<00:33:17.679><c> still</c><00:33:17.840><c> looking</c><00:33:18.159><c> at</c><00:33:18.240><c> this</c><00:33:18.480><c> element</c>

00:33:19.269 --> 00:33:19.279 align:start position:0%
reader's still looking at this element
 

00:33:19.279 --> 00:33:20.630 align:start position:0%
reader's still looking at this element
so<00:33:19.440><c> from</c><00:33:19.600><c> the</c><00:33:19.679><c> reader</c><00:33:20.000><c> point</c><00:33:20.159><c> of</c><00:33:20.240><c> view</c><00:33:20.320><c> now</c><00:33:20.559><c> all</c>

00:33:20.630 --> 00:33:20.640 align:start position:0%
so from the reader point of view now all
 

00:33:20.640 --> 00:33:21.750 align:start position:0%
so from the reader point of view now all
of<00:33:20.720><c> a</c><00:33:20.799><c> sudden</c><00:33:20.960><c> the</c><00:33:21.120><c> elements</c><00:33:21.440><c> filled</c><00:33:21.679><c> with</c>

00:33:21.750 --> 00:33:21.760 align:start position:0%
of a sudden the elements filled with
 

00:33:21.760 --> 00:33:22.789 align:start position:0%
of a sudden the elements filled with
garbage

00:33:22.789 --> 00:33:22.799 align:start position:0%
garbage
 

00:33:22.799 --> 00:33:25.190 align:start position:0%
garbage
and<00:33:22.960><c> said</c><00:33:23.200><c> it</c><00:33:23.279><c> was</c><00:33:23.440><c> expecting</c><00:33:24.640><c> so</c><00:33:24.799><c> that's</c><00:33:25.039><c> the</c>

00:33:25.190 --> 00:33:25.200 align:start position:0%
and said it was expecting so that's the
 

00:33:25.200 --> 00:33:27.590 align:start position:0%
and said it was expecting so that's the
third<00:33:25.440><c> case</c><00:33:25.760><c> we</c><00:33:25.919><c> have</c><00:33:26.080><c> to</c><00:33:26.320><c> uh</c>

00:33:27.590 --> 00:33:27.600 align:start position:0%
third case we have to uh
 

00:33:27.600 --> 00:33:29.509 align:start position:0%
third case we have to uh
if<00:33:27.760><c> we</c><00:33:27.840><c> want</c><00:33:28.000><c> to</c><00:33:28.080><c> have</c><00:33:28.240><c> lock</c><00:33:28.880><c> we</c><00:33:28.960><c> want</c><00:33:29.120><c> to</c><00:33:29.200><c> have</c>

00:33:29.509 --> 00:33:29.519 align:start position:0%
if we want to have lock we want to have
 

00:33:29.519 --> 00:33:31.909 align:start position:0%
if we want to have lock we want to have
absolutely<00:33:30.000><c> no</c><00:33:30.240><c> blocks</c><00:33:30.559><c> for</c><00:33:30.720><c> beaters</c>

00:33:31.909 --> 00:33:31.919 align:start position:0%
absolutely no blocks for beaters
 

00:33:31.919 --> 00:33:33.269 align:start position:0%
absolutely no blocks for beaters
we<00:33:32.000><c> have</c><00:33:32.159><c> to</c><00:33:32.240><c> worry</c><00:33:32.559><c> about</c><00:33:32.720><c> these</c><00:33:32.960><c> three</c>

00:33:33.269 --> 00:33:33.279 align:start position:0%
we have to worry about these three
 

00:33:33.279 --> 00:33:35.830 align:start position:0%
we have to worry about these three
situations

00:33:35.830 --> 00:33:35.840 align:start position:0%
situations
 

00:33:35.840 --> 00:33:37.830 align:start position:0%
situations
and<00:33:36.000><c> i'm</c><00:33:36.080><c> not</c><00:33:36.240><c> talking</c><00:33:36.480><c> about</c><00:33:36.720><c> writer</c><00:33:37.360><c> versus</c>

00:33:37.830 --> 00:33:37.840 align:start position:0%
and i'm not talking about writer versus
 

00:33:37.840 --> 00:33:39.750 align:start position:0%
and i'm not talking about writer versus
writer<00:33:38.720><c> problems</c><00:33:39.120><c> here</c><00:33:39.279><c> because</c><00:33:39.519><c> i'm</c>

00:33:39.750 --> 00:33:39.760 align:start position:0%
writer problems here because i'm
 

00:33:39.760 --> 00:33:42.389 align:start position:0%
writer problems here because i'm
just<00:33:40.240><c> assuming</c><00:33:40.640><c> for</c><00:33:40.799><c> this</c><00:33:40.960><c> entire</c><00:33:41.679><c> lecture</c>

00:33:42.389 --> 00:33:42.399 align:start position:0%
just assuming for this entire lecture
 

00:33:42.399 --> 00:33:44.389 align:start position:0%
just assuming for this entire lecture
that<00:33:42.640><c> writers</c><00:33:43.120><c> still</c><00:33:43.279><c> use</c><00:33:43.600><c> locks</c>

00:33:44.389 --> 00:33:44.399 align:start position:0%
that writers still use locks
 

00:33:44.399 --> 00:33:46.549 align:start position:0%
that writers still use locks
there's<00:33:44.720><c> still</c><00:33:44.960><c> some</c><00:33:45.279><c> ordinary</c><00:33:45.760><c> like</c><00:33:46.000><c> xv6</c>

00:33:46.549 --> 00:33:46.559 align:start position:0%
there's still some ordinary like xv6
 

00:33:46.559 --> 00:33:47.990 align:start position:0%
there's still some ordinary like xv6
style<00:33:46.880><c> spin</c><00:33:47.200><c> lock</c><00:33:47.519><c> here</c>

00:33:47.990 --> 00:33:48.000 align:start position:0%
style spin lock here
 

00:33:48.000 --> 00:33:50.470 align:start position:0%
style spin lock here
and<00:33:48.240><c> writers</c><00:33:49.360><c> acquire</c><00:33:49.760><c> this</c><00:33:49.919><c> lock</c><00:33:50.159><c> before</c>

00:33:50.470 --> 00:33:50.480 align:start position:0%
and writers acquire this lock before
 

00:33:50.480 --> 00:33:51.430 align:start position:0%
and writers acquire this lock before
doing<00:33:50.720><c> anything</c>

00:33:51.430 --> 00:33:51.440 align:start position:0%
doing anything
 

00:33:51.440 --> 00:33:53.350 align:start position:0%
doing anything
but<00:33:51.679><c> readers</c><00:33:52.480><c> don't</c><00:33:52.720><c> require</c><00:33:53.039><c> any</c><00:33:53.200><c> luck</c>

00:33:53.350 --> 00:33:53.360 align:start position:0%
but readers don't require any luck
 

00:33:53.360 --> 00:33:55.909 align:start position:0%
but readers don't require any luck
whatsoever

00:33:55.909 --> 00:33:55.919 align:start position:0%
whatsoever
 

00:33:55.919 --> 00:34:01.909 align:start position:0%
whatsoever
questions<00:33:56.240><c> about</c><00:33:56.399><c> these</c><00:33:56.559><c> dangers</c>

00:34:01.909 --> 00:34:01.919 align:start position:0%
 
 

00:34:01.919 --> 00:34:06.149 align:start position:0%
 
okay<00:34:04.799><c> the</c><00:34:04.960><c> point</c><00:34:05.120><c> is</c><00:34:05.279><c> we</c><00:34:05.279><c> we</c><00:34:05.679><c> can't</c><00:34:05.919><c> just</c>

00:34:06.149 --> 00:34:06.159 align:start position:0%
okay the point is we we can't just
 

00:34:06.159 --> 00:34:06.630 align:start position:0%
okay the point is we we can't just
simply

00:34:06.630 --> 00:34:06.640 align:start position:0%
simply
 

00:34:06.640 --> 00:34:09.430 align:start position:0%
simply
have<00:34:06.799><c> readers</c><00:34:07.120><c> read</c><00:34:07.279><c> within</c><00:34:07.600><c> locks</c><00:34:09.200><c> but</c><00:34:09.359><c> it</c>

00:34:09.430 --> 00:34:09.440 align:start position:0%
have readers read within locks but it
 

00:34:09.440 --> 00:34:11.829 align:start position:0%
have readers read within locks but it
turns<00:34:09.679><c> out</c><00:34:09.839><c> we</c><00:34:10.000><c> can</c>

00:34:11.829 --> 00:34:11.839 align:start position:0%
turns out we can
 

00:34:11.839 --> 00:34:13.909 align:start position:0%
turns out we can
fix<00:34:12.320><c> these</c><00:34:12.639><c> specific</c><00:34:13.119><c> problems</c><00:34:13.599><c> and</c><00:34:13.679><c> that</c>

00:34:13.909 --> 00:34:13.919 align:start position:0%
fix these specific problems and that
 

00:34:13.919 --> 00:34:16.310 align:start position:0%
fix these specific problems and that
takes<00:34:14.159><c> us</c><00:34:14.399><c> to</c>

00:34:16.310 --> 00:34:16.320 align:start position:0%
takes us to
 

00:34:16.320 --> 00:34:20.389 align:start position:0%
takes us to
rcu<00:34:18.879><c> and</c><00:34:19.040><c> rc</c><00:34:19.280><c> has</c><00:34:19.440><c> a</c><00:34:19.520><c> couple</c><00:34:19.679><c> of</c><00:34:19.839><c> ideas</c><00:34:20.159><c> in</c><00:34:20.320><c> it</c>

00:34:20.389 --> 00:34:20.399 align:start position:0%
rcu and rc has a couple of ideas in it
 

00:34:20.399 --> 00:34:21.270 align:start position:0%
rcu and rc has a couple of ideas in it
that<00:34:20.639><c> uh</c>

00:34:21.270 --> 00:34:21.280 align:start position:0%
that uh
 

00:34:21.280 --> 00:34:24.869 align:start position:0%
that uh
or<00:34:21.520><c> rcu</c><00:34:22.000><c> is</c><00:34:22.639><c> by</c><00:34:22.879><c> the</c><00:34:22.960><c> way</c><00:34:23.760><c> it's</c><00:34:24.000><c> as</c><00:34:24.159><c> much</c><00:34:24.560><c> a</c><00:34:24.720><c> kind</c>

00:34:24.869 --> 00:34:24.879 align:start position:0%
or rcu is by the way it's as much a kind
 

00:34:24.879 --> 00:34:25.190 align:start position:0%
or rcu is by the way it's as much a kind
of

00:34:25.190 --> 00:34:25.200 align:start position:0%
of
 

00:34:25.200 --> 00:34:28.149 align:start position:0%
of
approach<00:34:25.760><c> to</c><00:34:25.919><c> concurrency</c><00:34:27.119><c> um</c><00:34:27.599><c> concurrency</c>

00:34:28.149 --> 00:34:28.159 align:start position:0%
approach to concurrency um concurrency
 

00:34:28.159 --> 00:34:29.510 align:start position:0%
approach to concurrency um concurrency
control<00:34:28.639><c> as</c><00:34:28.800><c> it</c><00:34:28.960><c> is</c><00:34:29.119><c> a</c>

00:34:29.510 --> 00:34:29.520 align:start position:0%
control as it is a
 

00:34:29.520 --> 00:34:31.909 align:start position:0%
control as it is a
particular<00:34:30.000><c> algorithm</c><00:34:31.119><c> right</c><00:34:31.359><c> it's</c><00:34:31.520><c> a</c><00:34:31.599><c> way</c><00:34:31.760><c> of</c>

00:34:31.909 --> 00:34:31.919 align:start position:0%
particular algorithm right it's a way of
 

00:34:31.919 --> 00:34:32.950 align:start position:0%
particular algorithm right it's a way of
structuring

00:34:32.950 --> 00:34:32.960 align:start position:0%
structuring
 

00:34:32.960 --> 00:34:35.430 align:start position:0%
structuring
it's<00:34:33.119><c> an</c><00:34:33.359><c> approach</c><00:34:33.839><c> to</c><00:34:34.639><c> structuring</c><00:34:35.119><c> readers</c>

00:34:35.430 --> 00:34:35.440 align:start position:0%
it's an approach to structuring readers
 

00:34:35.440 --> 00:34:37.190 align:start position:0%
it's an approach to structuring readers
and<00:34:35.520><c> writers</c><00:34:36.000><c> so</c><00:34:36.159><c> that</c>

00:34:37.190 --> 00:34:37.200 align:start position:0%
and writers so that
 

00:34:37.200 --> 00:34:39.669 align:start position:0%
and writers so that
they<00:34:37.359><c> can</c><00:34:37.520><c> get</c><00:34:37.679><c> along</c><00:34:38.879><c> with</c><00:34:39.119><c> the</c><00:34:39.200><c> readers</c><00:34:39.599><c> not</c>

00:34:39.669 --> 00:34:39.679 align:start position:0%
they can get along with the readers not
 

00:34:39.679 --> 00:34:43.829 align:start position:0%
they can get along with the readers not
having<00:34:40.000><c> to</c><00:34:40.079><c> take</c><00:34:40.320><c> logs</c>

00:34:43.829 --> 00:34:43.839 align:start position:0%
 
 

00:34:43.839 --> 00:34:45.589 align:start position:0%
 
the<00:34:44.079><c> general</c><00:34:44.320><c> game</c><00:34:44.480><c> with</c><00:34:44.720><c> recopy</c><00:34:45.200><c> update</c><00:34:45.440><c> is</c>

00:34:45.589 --> 00:34:45.599 align:start position:0%
the general game with recopy update is
 

00:34:45.599 --> 00:34:46.710 align:start position:0%
the general game with recopy update is
we're<00:34:45.679><c> going</c><00:34:45.839><c> to</c><00:34:46.000><c> fix</c><00:34:46.240><c> those</c><00:34:46.480><c> three</c>

00:34:46.710 --> 00:34:46.720 align:start position:0%
we're going to fix those three
 

00:34:46.720 --> 00:34:48.470 align:start position:0%
we're going to fix those three
situations<00:34:47.520><c> in</c><00:34:47.599><c> which</c><00:34:47.839><c> readers</c><00:34:48.159><c> might</c><00:34:48.320><c> get</c>

00:34:48.470 --> 00:34:48.480 align:start position:0%
situations in which readers might get
 

00:34:48.480 --> 00:34:49.349 align:start position:0%
situations in which readers might get
into<00:34:48.720><c> trouble</c>

00:34:49.349 --> 00:34:49.359 align:start position:0%
into trouble
 

00:34:49.359 --> 00:34:51.750 align:start position:0%
into trouble
if<00:34:49.520><c> there's</c><00:34:50.480><c> concurrent</c><00:34:50.960><c> writers</c><00:34:51.440><c> and</c><00:34:51.599><c> we're</c>

00:34:51.750 --> 00:34:51.760 align:start position:0%
if there's concurrent writers and we're
 

00:34:51.760 --> 00:34:52.790 align:start position:0%
if there's concurrent writers and we're
going<00:34:51.839><c> to</c><00:34:52.079><c> do</c><00:34:52.240><c> it</c>

00:34:52.790 --> 00:34:52.800 align:start position:0%
going to do it
 

00:34:52.800 --> 00:34:54.310 align:start position:0%
going to do it
by<00:34:52.960><c> making</c><00:34:53.280><c> the</c><00:34:53.359><c> writers</c><00:34:53.760><c> a</c><00:34:53.760><c> little</c><00:34:53.919><c> bit</c><00:34:54.079><c> more</c>

00:34:54.310 --> 00:34:54.320 align:start position:0%
by making the writers a little bit more
 

00:34:54.320 --> 00:34:56.389 align:start position:0%
by making the writers a little bit more
complicated

00:34:56.389 --> 00:34:56.399 align:start position:0%
complicated
 

00:34:56.399 --> 00:34:57.430 align:start position:0%
complicated
so<00:34:56.560><c> the</c><00:34:56.639><c> writer</c><00:34:56.960><c> is</c><00:34:57.040><c> going</c><00:34:57.119><c> to</c><00:34:57.200><c> end</c><00:34:57.359><c> up</c>

00:34:57.430 --> 00:34:57.440 align:start position:0%
so the writer is going to end up
 

00:34:57.440 --> 00:35:00.230 align:start position:0%
so the writer is going to end up
somewhat<00:34:57.760><c> slower</c><00:34:59.359><c> they</c><00:34:59.520><c> still</c><00:34:59.680><c> need</c><00:34:59.839><c> to</c><00:35:00.000><c> lock</c>

00:35:00.230 --> 00:35:00.240 align:start position:0%
somewhat slower they still need to lock
 

00:35:00.240 --> 00:35:02.230 align:start position:0%
somewhat slower they still need to lock
plus<00:35:00.480><c> follow</c><00:35:00.720><c> some</c><00:35:00.960><c> extra</c><00:35:01.200><c> rules</c>

00:35:02.230 --> 00:35:02.240 align:start position:0%
plus follow some extra rules
 

00:35:02.240 --> 00:35:03.829 align:start position:0%
plus follow some extra rules
but<00:35:02.400><c> the</c><00:35:02.560><c> reward</c><00:35:02.960><c> will</c><00:35:03.040><c> be</c><00:35:03.200><c> the</c><00:35:03.280><c> readers</c><00:35:03.680><c> will</c>

00:35:03.829 --> 00:35:03.839 align:start position:0%
but the reward will be the readers will
 

00:35:03.839 --> 00:35:05.589 align:start position:0%
but the reward will be the readers will
be<00:35:03.920><c> dramatically</c><00:35:04.480><c> faster</c>

00:35:05.589 --> 00:35:05.599 align:start position:0%
be dramatically faster
 

00:35:05.599 --> 00:35:07.190 align:start position:0%
be dramatically faster
because<00:35:05.760><c> they</c><00:35:05.839><c> can</c><00:35:06.000><c> operate</c><00:35:06.320><c> without</c><00:35:06.640><c> locks</c>

00:35:07.190 --> 00:35:07.200 align:start position:0%
because they can operate without locks
 

00:35:07.200 --> 00:35:11.750 align:start position:0%
because they can operate without locks
and<00:35:07.280><c> without</c><00:35:07.839><c> ever</c><00:35:08.079><c> writing</c><00:35:08.400><c> memory</c>

00:35:11.750 --> 00:35:11.760 align:start position:0%
 
 

00:35:11.760 --> 00:35:15.190 align:start position:0%
 
okay<00:35:12.160><c> so</c><00:35:13.760><c> the</c><00:35:13.920><c> first</c><00:35:14.160><c> big</c><00:35:14.400><c> idea</c>

00:35:15.190 --> 00:35:15.200 align:start position:0%
okay so the first big idea
 

00:35:15.200 --> 00:35:21.190 align:start position:0%
okay so the first big idea
in<00:35:16.079><c> rcu</c>

00:35:21.190 --> 00:35:21.200 align:start position:0%
 
 

00:35:21.200 --> 00:35:24.630 align:start position:0%
 
is<00:35:21.359><c> that</c><00:35:23.440><c> in</c><00:35:23.599><c> that</c><00:35:23.760><c> first</c>

00:35:24.630 --> 00:35:24.640 align:start position:0%
is that in that first
 

00:35:24.640 --> 00:35:26.390 align:start position:0%
is that in that first
trouble<00:35:24.960><c> situation</c><00:35:25.440><c> we</c><00:35:25.599><c> talked</c><00:35:25.839><c> about</c><00:35:26.079><c> before</c>

00:35:26.390 --> 00:35:26.400 align:start position:0%
trouble situation we talked about before
 

00:35:26.400 --> 00:35:28.310 align:start position:0%
trouble situation we talked about before
where<00:35:26.560><c> the</c><00:35:26.720><c> writer</c><00:35:27.119><c> is</c><00:35:27.359><c> updating</c><00:35:27.920><c> a</c><00:35:28.000><c> list</c>

00:35:28.310 --> 00:35:28.320 align:start position:0%
where the writer is updating a list
 

00:35:28.320 --> 00:35:28.950 align:start position:0%
where the writer is updating a list
element

00:35:28.950 --> 00:35:28.960 align:start position:0%
element
 

00:35:28.960 --> 00:35:32.230 align:start position:0%
element
the<00:35:29.280><c> content</c><00:35:29.599><c> of</c><00:35:29.760><c> a</c><00:35:29.839><c> list</c><00:35:30.160><c> element</c>

00:35:32.230 --> 00:35:32.240 align:start position:0%
the content of a list element
 

00:35:32.240 --> 00:35:33.910 align:start position:0%
the content of a list element
we're<00:35:32.400><c> going</c><00:35:32.560><c> to</c><00:35:32.800><c> actually</c><00:35:33.280><c> outlaw</c><00:35:33.760><c> that</c>

00:35:33.910 --> 00:35:33.920 align:start position:0%
we're going to actually outlaw that
 

00:35:33.920 --> 00:35:35.430 align:start position:0%
we're going to actually outlaw that
we're<00:35:34.079><c> going</c><00:35:34.160><c> to</c><00:35:34.240><c> say</c><00:35:34.480><c> writers</c><00:35:35.040><c> are</c><00:35:35.280><c> not</c>

00:35:35.430 --> 00:35:35.440 align:start position:0%
we're going to say writers are not
 

00:35:35.440 --> 00:35:36.150 align:start position:0%
we're going to say writers are not
allowed

00:35:36.150 --> 00:35:36.160 align:start position:0%
allowed
 

00:35:36.160 --> 00:35:39.349 align:start position:0%
allowed
to<00:35:36.320><c> modify</c><00:35:36.800><c> the</c><00:35:37.040><c> contents</c><00:35:38.000><c> of</c>

00:35:39.349 --> 00:35:39.359 align:start position:0%
to modify the contents of
 

00:35:39.359 --> 00:35:44.150 align:start position:0%
to modify the contents of
list<00:35:39.680><c> elements</c><00:35:40.160><c> instead</c><00:35:42.160><c> if</c><00:35:42.240><c> we</c><00:35:42.400><c> have</c><00:35:42.839><c> a</c>

00:35:44.150 --> 00:35:44.160 align:start position:0%
list elements instead if we have a
 

00:35:44.160 --> 00:35:45.750 align:start position:0%
list elements instead if we have a
linked<00:35:44.400><c> list</c><00:35:44.720><c> like</c><00:35:44.880><c> this</c><00:35:45.119><c> with</c><00:35:45.280><c> a</c><00:35:45.359><c> couple</c><00:35:45.599><c> of</c>

00:35:45.750 --> 00:35:45.760 align:start position:0%
linked list like this with a couple of
 

00:35:45.760 --> 00:35:52.069 align:start position:0%
linked list like this with a couple of
elements

00:35:52.069 --> 00:35:52.079 align:start position:0%
 
 

00:35:52.079 --> 00:35:54.390 align:start position:0%
 
if<00:35:52.320><c> a</c><00:35:52.400><c> writer</c><00:35:52.720><c> wanted</c><00:35:53.040><c> to</c><00:35:53.280><c> update</c><00:35:53.680><c> the</c><00:35:53.920><c> content</c>

00:35:54.390 --> 00:35:54.400 align:start position:0%
if a writer wanted to update the content
 

00:35:54.400 --> 00:35:57.270 align:start position:0%
if a writer wanted to update the content
of<00:35:54.560><c> element</c><00:35:55.040><c> 2</c>

00:35:57.270 --> 00:35:57.280 align:start position:0%
of element 2
 

00:35:57.280 --> 00:35:59.109 align:start position:0%
of element 2
instead<00:35:57.599><c> of</c><00:35:57.760><c> changing</c><00:35:58.079><c> it</c><00:35:58.240><c> in</c><00:35:58.400><c> place</c><00:35:58.800><c> which</c>

00:35:59.109 --> 00:35:59.119 align:start position:0%
instead of changing it in place which
 

00:35:59.119 --> 00:36:00.630 align:start position:0%
instead of changing it in place which
wouldn't<00:35:59.440><c> do</c><00:35:59.920><c> it</c><00:36:00.079><c> would</c><00:36:00.240><c> actually</c>

00:36:00.630 --> 00:36:00.640 align:start position:0%
wouldn't do it would actually
 

00:36:00.640 --> 00:36:03.030 align:start position:0%
wouldn't do it would actually
cook<00:36:00.960><c> up</c><00:36:01.280><c> it</c><00:36:01.359><c> would</c><00:36:01.599><c> call</c><00:36:01.839><c> the</c><00:36:02.000><c> allocator</c><00:36:02.880><c> to</c>

00:36:03.030 --> 00:36:03.040 align:start position:0%
cook up it would call the allocator to
 

00:36:03.040 --> 00:36:04.870 align:start position:0%
cook up it would call the allocator to
allocate<00:36:03.520><c> a</c><00:36:03.680><c> new</c>

00:36:04.870 --> 00:36:04.880 align:start position:0%
allocate a new
 

00:36:04.880 --> 00:36:08.230 align:start position:0%
allocate a new
element

00:36:08.230 --> 00:36:08.240 align:start position:0%
 
 

00:36:08.240 --> 00:36:10.069 align:start position:0%
 
it<00:36:08.400><c> would</c><00:36:08.880><c> initialize</c><00:36:09.599><c> the</c><00:36:09.680><c> element</c>

00:36:10.069 --> 00:36:10.079 align:start position:0%
it would initialize the element
 

00:36:10.079 --> 00:36:13.589 align:start position:0%
it would initialize the element
completely<00:36:10.720><c> so</c><00:36:11.119><c> whatever</c><00:36:11.839><c> new</c><00:36:12.320><c> content</c>

00:36:13.589 --> 00:36:13.599 align:start position:0%
completely so whatever new content
 

00:36:13.599 --> 00:36:16.550 align:start position:0%
completely so whatever new content
you<00:36:13.760><c> know</c><00:36:15.040><c> we</c><00:36:15.200><c> wanted</c><00:36:15.440><c> to</c><00:36:15.599><c> put</c><00:36:15.760><c> here</c><00:36:16.320><c> instead</c>

00:36:16.550 --> 00:36:16.560 align:start position:0%
you know we wanted to put here instead
 

00:36:16.560 --> 00:36:17.910 align:start position:0%
you know we wanted to put here instead
of<00:36:16.640><c> the</c><00:36:16.720><c> old</c><00:36:16.960><c> content</c>

00:36:17.910 --> 00:36:17.920 align:start position:0%
of the old content
 

00:36:17.920 --> 00:36:22.390 align:start position:0%
of the old content
the<00:36:18.160><c> writer</c><00:36:18.480><c> would</c><00:36:20.800><c> set</c><00:36:21.040><c> the</c><00:36:21.119><c> next</c><00:36:21.440><c> pointer</c>

00:36:22.390 --> 00:36:22.400 align:start position:0%
the writer would set the next pointer
 

00:36:22.400 --> 00:36:23.990 align:start position:0%
the writer would set the next pointer
on<00:36:22.480><c> this</c><00:36:22.720><c> new</c><00:36:22.960><c> element</c><00:36:23.359><c> so</c><00:36:23.520><c> that</c><00:36:23.680><c> this</c><00:36:23.839><c> new</c>

00:36:23.990 --> 00:36:24.000 align:start position:0%
on this new element so that this new
 

00:36:24.000 --> 00:36:26.150 align:start position:0%
on this new element so that this new
element<00:36:24.400><c> is</c><00:36:24.480><c> now</c><00:36:24.839><c> completely</c><00:36:25.760><c> correct</c>

00:36:26.150 --> 00:36:26.160 align:start position:0%
element is now completely correct
 

00:36:26.160 --> 00:36:27.109 align:start position:0%
element is now completely correct
looking

00:36:27.109 --> 00:36:27.119 align:start position:0%
looking
 

00:36:27.119 --> 00:36:30.630 align:start position:0%
looking
and<00:36:27.280><c> then</c><00:36:27.920><c> in</c><00:36:28.079><c> a</c><00:36:28.320><c> single</c><00:36:28.800><c> write</c><00:36:29.680><c> to</c><00:36:29.839><c> e1's</c><00:36:30.320><c> next</c>

00:36:30.630 --> 00:36:30.640 align:start position:0%
and then in a single write to e1's next
 

00:36:30.640 --> 00:36:31.430 align:start position:0%
and then in a single write to e1's next
pointer

00:36:31.430 --> 00:36:31.440 align:start position:0%
pointer
 

00:36:31.440 --> 00:36:33.990 align:start position:0%
pointer
the<00:36:31.599><c> writer</c><00:36:32.000><c> would</c><00:36:32.400><c> switch</c><00:36:33.040><c> e1</c><00:36:33.440><c> from</c><00:36:33.680><c> pointing</c>

00:36:33.990 --> 00:36:34.000 align:start position:0%
the writer would switch e1 from pointing
 

00:36:34.000 --> 00:36:34.630 align:start position:0%
the writer would switch e1 from pointing
to<00:36:34.160><c> the</c>

00:36:34.630 --> 00:36:34.640 align:start position:0%
to the
 

00:36:34.640 --> 00:36:38.230 align:start position:0%
to the
from<00:36:35.839><c> pointing</c><00:36:36.160><c> to</c><00:36:36.320><c> the</c><00:36:36.480><c> old</c><00:36:37.119><c> version</c><00:36:37.440><c> of</c><00:36:37.520><c> e2</c>

00:36:38.230 --> 00:36:38.240 align:start position:0%
from pointing to the old version of e2
 

00:36:38.240 --> 00:36:40.870 align:start position:0%
from pointing to the old version of e2
to<00:36:38.400><c> pointing</c><00:36:38.720><c> to</c><00:36:38.800><c> the</c><00:36:38.960><c> new</c><00:36:39.200><c> version</c><00:36:39.440><c> of</c><00:36:39.599><c> e2</c><00:36:40.720><c> so</c>

00:36:40.870 --> 00:36:40.880 align:start position:0%
to pointing to the new version of e2 so
 

00:36:40.880 --> 00:36:42.310 align:start position:0%
to pointing to the new version of e2 so
the<00:36:40.960><c> game</c><00:36:41.200><c> is</c><00:36:41.359><c> instead</c><00:36:41.599><c> of</c><00:36:41.680><c> updating</c>

00:36:42.310 --> 00:36:42.320 align:start position:0%
the game is instead of updating
 

00:36:42.320 --> 00:36:43.589 align:start position:0%
the game is instead of updating
things<00:36:42.560><c> in</c><00:36:42.640><c> place</c><00:36:42.800><c> we're</c><00:36:42.960><c> going</c><00:36:43.040><c> to</c><00:36:43.119><c> replace</c>

00:36:43.589 --> 00:36:43.599 align:start position:0%
things in place we're going to replace
 

00:36:43.599 --> 00:36:46.630 align:start position:0%
things in place we're going to replace
them<00:36:43.760><c> with</c><00:36:43.920><c> new</c><00:36:44.160><c> versions</c>

00:36:46.630 --> 00:36:46.640 align:start position:0%
them with new versions
 

00:36:46.640 --> 00:36:50.310 align:start position:0%
them with new versions
of<00:36:46.800><c> the</c><00:36:46.880><c> same</c><00:36:47.200><c> data</c><00:36:47.599><c> and</c><00:36:47.680><c> so</c><00:36:48.560><c> um</c>

00:36:50.310 --> 00:36:50.320 align:start position:0%
of the same data and so um
 

00:36:50.320 --> 00:36:52.710 align:start position:0%
of the same data and so um
so<00:36:50.560><c> now</c><00:36:50.720><c> a</c><00:36:50.880><c> reader</c><00:36:51.680><c> you</c><00:36:51.839><c> know</c><00:36:52.160><c> reader's</c><00:36:52.480><c> gotten</c>

00:36:52.710 --> 00:36:52.720 align:start position:0%
so now a reader you know reader's gotten
 

00:36:52.720 --> 00:36:54.630 align:start position:0%
so now a reader you know reader's gotten
as<00:36:52.880><c> far</c><00:36:53.040><c> as</c><00:36:53.280><c> e1</c><00:36:53.680><c> and</c><00:36:53.839><c> it's</c><00:36:54.079><c> just</c><00:36:54.320><c> looking</c><00:36:54.560><c> at</c>

00:36:54.630 --> 00:36:54.640 align:start position:0%
as far as e1 and it's just looking at
 

00:36:54.640 --> 00:36:56.069 align:start position:0%
as far as e1 and it's just looking at
e1's<00:36:55.040><c> next</c><00:36:55.359><c> pointer</c>

00:36:56.069 --> 00:36:56.079 align:start position:0%
e1's next pointer
 

00:36:56.079 --> 00:36:57.430 align:start position:0%
e1's next pointer
the<00:36:56.160><c> reader</c><00:36:56.480><c> is</c><00:36:56.560><c> going</c><00:36:56.640><c> to</c><00:36:56.800><c> either</c><00:36:57.040><c> see</c><00:36:57.280><c> the</c>

00:36:57.430 --> 00:36:57.440 align:start position:0%
the reader is going to either see the
 

00:36:57.440 --> 00:36:59.349 align:start position:0%
the reader is going to either see the
old<00:36:57.599><c> next</c><00:36:57.839><c> pointer</c><00:36:58.240><c> which</c><00:36:58.400><c> points</c><00:36:58.720><c> to</c><00:36:58.800><c> e2</c><00:36:59.200><c> and</c>

00:36:59.349 --> 00:36:59.359 align:start position:0%
old next pointer which points to e2 and
 

00:36:59.359 --> 00:37:00.390 align:start position:0%
old next pointer which points to e2 and
that's<00:36:59.599><c> fine</c><00:36:59.920><c> because</c>

00:37:00.390 --> 00:37:00.400 align:start position:0%
that's fine because
 

00:37:00.400 --> 00:37:02.710 align:start position:0%
that's fine because
nobody<00:37:00.720><c> was</c><00:37:00.880><c> changing</c><00:37:01.200><c> e2</c><00:37:02.000><c> or</c><00:37:02.160><c> the</c><00:37:02.320><c> reader</c><00:37:02.640><c> is</c>

00:37:02.710 --> 00:37:02.720 align:start position:0%
nobody was changing e2 or the reader is
 

00:37:02.720 --> 00:37:04.550 align:start position:0%
nobody was changing e2 or the reader is
going<00:37:02.800><c> to</c><00:37:02.880><c> see</c><00:37:03.040><c> the</c><00:37:03.359><c> new</c>

00:37:04.550 --> 00:37:04.560 align:start position:0%
going to see the new
 

00:37:04.560 --> 00:37:09.670 align:start position:0%
going to see the new
next<00:37:04.960><c> pointer</c><00:37:05.680><c> and</c><00:37:05.839><c> look</c><00:37:06.079><c> at</c><00:37:06.160><c> the</c><00:37:06.839><c> new</c>

00:37:09.670 --> 00:37:09.680 align:start position:0%
next pointer and look at the new
 

00:37:09.680 --> 00:37:13.349 align:start position:0%
next pointer and look at the new
list<00:37:10.000><c> element</c><00:37:11.440><c> and</c><00:37:11.680><c> either</c><00:37:11.920><c> way</c><00:37:12.240><c> since</c><00:37:12.560><c> the</c>

00:37:13.349 --> 00:37:13.359 align:start position:0%
list element and either way since the
 

00:37:13.359 --> 00:37:16.390 align:start position:0%
list element and either way since the
writer<00:37:14.400><c> initially</c><00:37:15.280><c> initialized</c><00:37:15.920><c> this</c>

00:37:16.390 --> 00:37:16.400 align:start position:0%
writer initially initialized this
 

00:37:16.400 --> 00:37:18.550 align:start position:0%
writer initially initialized this
list<00:37:16.720><c> element</c><00:37:17.520><c> before</c><00:37:17.920><c> setting</c><00:37:18.160><c> anyone's</c>

00:37:18.550 --> 00:37:18.560 align:start position:0%
list element before setting anyone's
 

00:37:18.560 --> 00:37:19.990 align:start position:0%
list element before setting anyone's
next<00:37:18.800><c> point</c><00:37:18.960><c> or</c><00:37:19.119><c> either</c><00:37:19.280><c> way</c><00:37:19.440><c> the</c><00:37:19.599><c> reader</c><00:37:19.920><c> is</c>

00:37:19.990 --> 00:37:20.000 align:start position:0%
next point or either way the reader is
 

00:37:20.000 --> 00:37:20.790 align:start position:0%
next point or either way the reader is
going<00:37:20.079><c> to</c><00:37:20.240><c> see</c>

00:37:20.790 --> 00:37:20.800 align:start position:0%
going to see
 

00:37:20.800 --> 00:37:22.630 align:start position:0%
going to see
like<00:37:21.040><c> a</c><00:37:21.200><c> correct</c><00:37:21.599><c> next</c><00:37:21.839><c> pointer</c><00:37:22.240><c> that</c><00:37:22.400><c> points</c>

00:37:22.630 --> 00:37:22.640 align:start position:0%
like a correct next pointer that points
 

00:37:22.640 --> 00:37:28.069 align:start position:0%
like a correct next pointer that points
to<00:37:22.800><c> e3</c>

00:37:28.069 --> 00:37:28.079 align:start position:0%
 
 

00:37:28.079 --> 00:37:29.510 align:start position:0%
 
so<00:37:28.240><c> the</c><00:37:28.320><c> point</c><00:37:28.560><c> is</c><00:37:28.640><c> the</c><00:37:28.800><c> reader</c><00:37:29.119><c> will</c><00:37:29.280><c> never</c>

00:37:29.510 --> 00:37:29.520 align:start position:0%
so the point is the reader will never
 

00:37:29.520 --> 00:37:31.510 align:start position:0%
so the point is the reader will never
see<00:37:29.760><c> a</c><00:37:30.160><c> string</c><00:37:30.480><c> that's</c><00:37:30.800><c> in</c><00:37:30.880><c> the</c><00:37:31.040><c> process</c><00:37:31.440><c> of</c>

00:37:31.510 --> 00:37:31.520 align:start position:0%
see a string that's in the process of
 

00:37:31.520 --> 00:37:32.069 align:start position:0%
see a string that's in the process of
being

00:37:32.069 --> 00:37:32.079 align:start position:0%
being
 

00:37:32.079 --> 00:37:34.829 align:start position:0%
being
a<00:37:32.400><c> content</c><00:37:32.720><c> that's</c><00:37:32.960><c> in</c><00:37:33.040><c> the</c><00:37:33.119><c> process</c><00:37:33.520><c> of</c><00:37:33.599><c> being</c>

00:37:34.829 --> 00:37:34.839 align:start position:0%
a content that's in the process of being
 

00:37:34.839 --> 00:37:37.109 align:start position:0%
a content that's in the process of being
modified

00:37:37.109 --> 00:37:37.119 align:start position:0%
modified
 

00:37:37.119 --> 00:37:45.829 align:start position:0%
modified
any<00:37:37.359><c> questions</c><00:37:37.760><c> about</c><00:37:39.599><c> this</c><00:37:39.839><c> particular</c><00:37:40.400><c> idea</c>

00:37:45.829 --> 00:37:45.839 align:start position:0%
 
 

00:37:45.839 --> 00:37:49.430 align:start position:0%
 
what<00:37:46.000><c> about</c><00:37:46.320><c> saying</c><00:37:47.040><c> sorry</c>

00:37:49.430 --> 00:37:49.440 align:start position:0%
 
 

00:37:49.440 --> 00:37:53.030 align:start position:0%
 
okay<00:37:49.760><c> i</c><00:37:49.839><c> can</c><00:37:50.160><c> go</c><00:37:50.320><c> ahead</c><00:37:50.640><c> um</c><00:37:51.520><c> will</c><00:37:51.760><c> the</c>

00:37:53.030 --> 00:37:53.040 align:start position:0%
okay i can go ahead um will the
 

00:37:53.040 --> 00:37:56.470 align:start position:0%
okay i can go ahead um will the
link<00:37:53.359><c> between</c><00:37:53.760><c> e2</c><00:37:54.160><c> and</c><00:37:54.240><c> e3</c><00:37:55.359><c> be</c><00:37:55.680><c> deleted</c><00:37:56.240><c> or</c>

00:37:56.470 --> 00:37:56.480 align:start position:0%
link between e2 and e3 be deleted or
 

00:37:56.480 --> 00:37:57.430 align:start position:0%
link between e2 and e3 be deleted or
will<00:37:56.720><c> it</c><00:37:56.880><c> be</c><00:37:57.040><c> left</c>

00:37:57.430 --> 00:37:57.440 align:start position:0%
will it be left
 

00:37:57.440 --> 00:38:00.470 align:start position:0%
will it be left
there<00:37:57.680><c> in</c><00:37:58.079><c> case</c><00:37:58.400><c> that</c><00:37:58.640><c> or</c><00:37:58.800><c> either</c><00:37:59.359><c> um</c><00:38:00.000><c> somehow</c>

00:38:00.470 --> 00:38:00.480 align:start position:0%
there in case that or either um somehow
 

00:38:00.480 --> 00:38:01.430 align:start position:0%
there in case that or either um somehow
reached<00:38:00.880><c> e2</c>

00:38:01.430 --> 00:38:01.440 align:start position:0%
reached e2
 

00:38:01.440 --> 00:38:04.950 align:start position:0%
reached e2
now<00:38:02.240><c> we're</c><00:38:02.400><c> just</c><00:38:02.640><c> gonna</c><00:38:02.880><c> leave</c><00:38:03.200><c> it</c><00:38:04.240><c> so</c><00:38:04.480><c> well</c>

00:38:04.950 --> 00:38:04.960 align:start position:0%
now we're just gonna leave it so well
 

00:38:04.960 --> 00:38:06.790 align:start position:0%
now we're just gonna leave it so well
i'll<00:38:05.119><c> come</c><00:38:05.280><c> to</c><00:38:05.440><c> this</c><00:38:05.760><c> this</c><00:38:05.920><c> is</c><00:38:06.000><c> a</c><00:38:06.320><c> excellent</c>

00:38:06.790 --> 00:38:06.800 align:start position:0%
i'll come to this this is a excellent
 

00:38:06.800 --> 00:38:08.790 align:start position:0%
i'll come to this this is a excellent
question<00:38:07.839><c> um</c>

00:38:08.790 --> 00:38:08.800 align:start position:0%
question um
 

00:38:08.800 --> 00:38:10.870 align:start position:0%
question um
and<00:38:08.960><c> it's</c><00:38:09.200><c> actually</c><00:38:09.520><c> the</c><00:38:09.680><c> main</c><00:38:10.480><c> piece</c><00:38:10.720><c> of</c>

00:38:10.870 --> 00:38:10.880 align:start position:0%
and it's actually the main piece of
 

00:38:10.880 --> 00:38:12.950 align:start position:0%
and it's actually the main piece of
complexity<00:38:11.520><c> in</c><00:38:11.680><c> rcu</c>

00:38:12.950 --> 00:38:12.960 align:start position:0%
complexity in rcu
 

00:38:12.960 --> 00:38:14.470 align:start position:0%
complexity in rcu
but<00:38:13.119><c> for</c><00:38:13.280><c> now</c><00:38:13.440><c> we're</c><00:38:13.599><c> just</c><00:38:13.760><c> going</c><00:38:13.920><c> to</c><00:38:14.079><c> imagine</c>

00:38:14.470 --> 00:38:14.480 align:start position:0%
but for now we're just going to imagine
 

00:38:14.480 --> 00:38:19.270 align:start position:0%
but for now we're just going to imagine
that<00:38:14.560><c> e2</c><00:38:14.880><c> is</c><00:38:14.960><c> left</c><00:38:15.200><c> alone</c><00:38:15.599><c> for</c><00:38:15.760><c> the</c><00:38:16.839><c> moment</c>

00:38:19.270 --> 00:38:19.280 align:start position:0%
that e2 is left alone for the moment
 

00:38:19.280 --> 00:38:21.589 align:start position:0%
that e2 is left alone for the moment
the<00:38:19.520><c> link</c><00:38:19.839><c> from</c><00:38:20.000><c> e</c><00:38:20.160><c> to</c><00:38:20.400><c> e</c><00:38:20.640><c> to</c><00:38:20.800><c> e3</c><00:38:21.200><c> we</c><00:38:21.280><c> don't</c><00:38:21.440><c> need</c>

00:38:21.589 --> 00:38:21.599 align:start position:0%
the link from e to e to e3 we don't need
 

00:38:21.599 --> 00:38:23.030 align:start position:0%
the link from e to e to e3 we don't need
to<00:38:21.680><c> worry</c><00:38:21.920><c> about</c><00:38:22.079><c> it</c><00:38:22.240><c> anyway</c><00:38:22.640><c> right</c><00:38:22.880><c> because</c>

00:38:23.030 --> 00:38:23.040 align:start position:0%
to worry about it anyway right because
 

00:38:23.040 --> 00:38:24.150 align:start position:0%
to worry about it anyway right because
that's<00:38:23.280><c> a</c><00:38:23.359><c> part</c><00:38:23.520><c> of</c><00:38:23.680><c> e2</c>

00:38:24.150 --> 00:38:24.160 align:start position:0%
that's a part of e2
 

00:38:24.160 --> 00:38:26.710 align:start position:0%
that's a part of e2
and<00:38:24.240><c> like</c><00:38:24.640><c> in</c><00:38:25.200><c> normal</c><00:38:25.599><c> implementations</c><00:38:26.560><c> we</c>

00:38:26.710 --> 00:38:26.720 align:start position:0%
and like in normal implementations we
 

00:38:26.720 --> 00:38:28.069 align:start position:0%
and like in normal implementations we
just<00:38:26.960><c> free</c><00:38:27.200><c> that</c><00:38:27.440><c> anyway</c>

00:38:28.069 --> 00:38:28.079 align:start position:0%
just free that anyway
 

00:38:28.079 --> 00:38:30.630 align:start position:0%
just free that anyway
like<00:38:28.320><c> with</c><00:38:28.560><c> no</c><00:38:28.800><c> rcu</c><00:38:29.680><c> involved</c><00:38:30.079><c> we</c><00:38:30.240><c> don't</c><00:38:30.400><c> ever</c>

00:38:30.630 --> 00:38:30.640 align:start position:0%
like with no rcu involved we don't ever
 

00:38:30.640 --> 00:38:31.990 align:start position:0%
like with no rcu involved we don't ever
need<00:38:30.800><c> to</c><00:38:30.880><c> worry</c><00:38:31.200><c> about</c><00:38:31.359><c> that</c><00:38:31.599><c> link</c>

00:38:31.990 --> 00:38:32.000 align:start position:0%
need to worry about that link
 

00:38:32.000 --> 00:38:34.470 align:start position:0%
need to worry about that link
right<00:38:32.960><c> well</c><00:38:33.119><c> the</c><00:38:33.280><c> danger</c><00:38:33.680><c> is</c><00:38:33.839><c> that's</c><00:38:34.160><c> that</c>

00:38:34.470 --> 00:38:34.480 align:start position:0%
right well the danger is that's that
 

00:38:34.480 --> 00:38:36.550 align:start position:0%
right well the danger is that's that
just<00:38:34.800><c> before</c><00:38:35.200><c> we</c><00:38:35.440><c> changed</c>

00:38:36.550 --> 00:38:36.560 align:start position:0%
just before we changed
 

00:38:36.560 --> 00:38:38.870 align:start position:0%
just before we changed
this<00:38:36.800><c> next</c><00:38:37.119><c> pointer</c><00:38:37.839><c> that</c><00:38:38.000><c> some</c><00:38:38.240><c> reader</c><00:38:38.640><c> had</c>

00:38:38.870 --> 00:38:38.880 align:start position:0%
this next pointer that some reader had
 

00:38:38.880 --> 00:38:41.589 align:start position:0%
this next pointer that some reader had
followed<00:38:39.200><c> the</c><00:38:39.280><c> next</c><00:38:39.520><c> pointer</c><00:38:39.839><c> to</c><00:38:39.920><c> e2</c>

00:38:41.589 --> 00:38:41.599 align:start position:0%
followed the next pointer to e2
 

00:38:41.599 --> 00:38:42.870 align:start position:0%
followed the next pointer to e2
right<00:38:41.760><c> so</c><00:38:41.920><c> overall</c><00:38:42.320><c> what</c><00:38:42.480><c> we're</c><00:38:42.560><c> worried</c>

00:38:42.870 --> 00:38:42.880 align:start position:0%
right so overall what we're worried
 

00:38:42.880 --> 00:38:44.310 align:start position:0%
right so overall what we're worried
about<00:38:43.040><c> here</c><00:38:43.200><c> is</c><00:38:43.280><c> that</c><00:38:43.359><c> oh</c><00:38:43.520><c> some</c><00:38:43.920><c> some</c><00:38:44.079><c> reader</c>

00:38:44.310 --> 00:38:44.320 align:start position:0%
about here is that oh some some reader
 

00:38:44.320 --> 00:38:45.510 align:start position:0%
about here is that oh some some reader
on<00:38:44.400><c> some</c><00:38:44.560><c> chords</c><00:38:44.800><c> actually</c><00:38:45.119><c> right</c><00:38:45.280><c> now</c>

00:38:45.510 --> 00:38:45.520 align:start position:0%
on some chords actually right now
 

00:38:45.520 --> 00:38:46.950 align:start position:0%
on some chords actually right now
reading<00:38:45.839><c> e2</c>

00:38:46.950 --> 00:38:46.960 align:start position:0%
reading e2
 

00:38:46.960 --> 00:38:50.230 align:start position:0%
reading e2
so<00:38:47.680><c> we'd</c><00:38:47.920><c> better</c><00:38:48.160><c> not</c><00:38:48.320><c> free</c><00:38:48.560><c> it</c><00:38:49.839><c> right</c><00:38:50.000><c> away</c>

00:38:50.230 --> 00:38:50.240 align:start position:0%
so we'd better not free it right away
 

00:38:50.240 --> 00:38:50.790 align:start position:0%
so we'd better not free it right away
right

00:38:50.790 --> 00:38:50.800 align:start position:0%
right
 

00:38:50.800 --> 00:38:52.470 align:start position:0%
right
right<00:38:51.520><c> so</c><00:38:51.680><c> that's</c><00:38:51.839><c> what</c><00:38:51.920><c> i</c><00:38:52.000><c> think</c><00:38:52.079><c> that's</c><00:38:52.400><c> all</c>

00:38:52.470 --> 00:38:52.480 align:start position:0%
right so that's what i think that's all
 

00:38:52.480 --> 00:38:53.990 align:start position:0%
right so that's what i think that's all
we're<00:38:52.640><c> saying</c><00:38:52.800><c> is</c><00:38:52.960><c> you</c><00:38:53.119><c> better</c><00:38:53.280><c> not</c><00:38:53.440><c> free</c><00:38:53.680><c> e2</c>

00:38:53.990 --> 00:38:54.000 align:start position:0%
we're saying is you better not free e2
 

00:38:54.000 --> 00:38:55.030 align:start position:0%
we're saying is you better not free e2
right<00:38:54.160><c> away</c>

00:38:55.030 --> 00:38:55.040 align:start position:0%
right away
 

00:38:55.040 --> 00:39:00.390 align:start position:0%
right away
just<00:38:55.200><c> leave</c><00:38:55.359><c> it</c><00:38:58.839><c> alone</c><00:38:59.920><c> um</c>

00:39:00.390 --> 00:39:00.400 align:start position:0%
just leave it alone um
 

00:39:00.400 --> 00:39:03.829 align:start position:0%
just leave it alone um
as<00:39:00.560><c> a</c><00:39:00.640><c> piece</c><00:39:00.800><c> of</c><00:39:00.960><c> jargon</c><00:39:02.720><c> um</c>

00:39:03.829 --> 00:39:03.839 align:start position:0%
as a piece of jargon um
 

00:39:03.839 --> 00:39:07.349 align:start position:0%
as a piece of jargon um
the<00:39:04.079><c> right</c><00:39:04.480><c> the</c><00:39:04.720><c> swap</c><00:39:05.359><c> of</c><00:39:06.000><c> e1's</c>

00:39:07.349 --> 00:39:07.359 align:start position:0%
the right the swap of e1's
 

00:39:07.359 --> 00:39:09.750 align:start position:0%
the right the swap of e1's
next<00:39:07.680><c> pointer</c><00:39:08.079><c> from</c><00:39:08.480><c> the</c><00:39:08.720><c> old</c><00:39:08.960><c> e2</c><00:39:09.359><c> to</c><00:39:09.440><c> the</c><00:39:09.520><c> new</c>

00:39:09.750 --> 00:39:09.760 align:start position:0%
next pointer from the old e2 to the new
 

00:39:09.760 --> 00:39:10.630 align:start position:0%
next pointer from the old e2 to the new
e2

00:39:10.630 --> 00:39:10.640 align:start position:0%
e2
 

00:39:10.640 --> 00:39:13.510 align:start position:0%
e2
um<00:39:11.359><c> i</c><00:39:11.839><c> in</c><00:39:11.920><c> my</c><00:39:12.079><c> head</c><00:39:12.400><c> i</c><00:39:12.560><c> call</c><00:39:12.720><c> this</c><00:39:12.880><c> a</c><00:39:13.040><c> committing</c>

00:39:13.510 --> 00:39:13.520 align:start position:0%
um i in my head i call this a committing
 

00:39:13.520 --> 00:39:14.470 align:start position:0%
um i in my head i call this a committing
right

00:39:14.470 --> 00:39:14.480 align:start position:0%
right
 

00:39:14.480 --> 00:39:17.750 align:start position:0%
right
there's<00:39:14.720><c> a</c><00:39:16.640><c> then</c><00:39:17.040><c> part</c><00:39:17.200><c> of</c><00:39:17.280><c> the</c><00:39:17.359><c> reason</c><00:39:17.599><c> why</c>

00:39:17.750 --> 00:39:17.760 align:start position:0%
there's a then part of the reason why
 

00:39:17.760 --> 00:39:19.270 align:start position:0%
there's a then part of the reason why
this<00:39:17.920><c> works</c><00:39:18.160><c> is</c><00:39:18.240><c> that</c><00:39:18.560><c> with</c><00:39:18.720><c> a</c><00:39:18.960><c> single</c>

00:39:19.270 --> 00:39:19.280 align:start position:0%
this works is that with a single
 

00:39:19.280 --> 00:39:20.390 align:start position:0%
this works is that with a single
committing<00:39:19.760><c> right</c><00:39:19.920><c> which</c><00:39:20.160><c> is</c>

00:39:20.390 --> 00:39:20.400 align:start position:0%
committing right which is
 

00:39:20.400 --> 00:39:22.710 align:start position:0%
committing right which is
atomic<00:39:20.960><c> like</c><00:39:21.280><c> rights</c><00:39:21.520><c> to</c><00:39:21.680><c> pointers</c><00:39:22.480><c> on</c><00:39:22.640><c> the</c>

00:39:22.710 --> 00:39:22.720 align:start position:0%
atomic like rights to pointers on the
 

00:39:22.720 --> 00:39:24.230 align:start position:0%
atomic like rights to pointers on the
machines<00:39:23.119><c> we</c><00:39:23.280><c> use</c><00:39:23.520><c> are</c>

00:39:24.230 --> 00:39:24.240 align:start position:0%
machines we use are
 

00:39:24.240 --> 00:39:26.230 align:start position:0%
machines we use are
atomic<00:39:24.720><c> in</c><00:39:24.800><c> the</c><00:39:24.960><c> sense</c><00:39:25.200><c> that</c><00:39:25.760><c> either</c><00:39:26.079><c> the</c>

00:39:26.230 --> 00:39:26.240 align:start position:0%
atomic in the sense that either the
 

00:39:26.240 --> 00:39:27.670 align:start position:0%
atomic in the sense that either the
right<00:39:26.480><c> to</c><00:39:26.640><c> the</c><00:39:26.720><c> point</c><00:39:26.960><c> or</c><00:39:27.040><c> happened</c><00:39:27.359><c> or</c><00:39:27.440><c> didn't</c>

00:39:27.670 --> 00:39:27.680 align:start position:0%
right to the point or happened or didn't
 

00:39:27.680 --> 00:39:28.230 align:start position:0%
right to the point or happened or didn't
happen

00:39:28.230 --> 00:39:28.240 align:start position:0%
happen
 

00:39:28.240 --> 00:39:30.069 align:start position:0%
happen
from<00:39:28.400><c> the</c><00:39:28.480><c> perspective</c><00:39:28.880><c> of</c><00:39:29.040><c> readers</c><00:39:29.760><c> because</c>

00:39:30.069 --> 00:39:30.079 align:start position:0%
from the perspective of readers because
 

00:39:30.079 --> 00:39:31.829 align:start position:0%
from the perspective of readers because
they're<00:39:30.240><c> atomic</c><00:39:30.960><c> basically</c><00:39:31.280><c> with</c><00:39:31.440><c> that</c><00:39:31.599><c> one</c>

00:39:31.829 --> 00:39:31.839 align:start position:0%
they're atomic basically with that one
 

00:39:31.839 --> 00:39:33.430 align:start position:0%
they're atomic basically with that one
instruction

00:39:33.430 --> 00:39:33.440 align:start position:0%
instruction
 

00:39:33.440 --> 00:39:36.470 align:start position:0%
instruction
with<00:39:33.599><c> the</c><00:39:33.760><c> one</c><00:39:34.000><c> atomic</c><00:39:34.640><c> store</c><00:39:35.119><c> we</c><00:39:35.280><c> can</c><00:39:36.079><c> it's</c><00:39:36.320><c> an</c>

00:39:36.470 --> 00:39:36.480 align:start position:0%
with the one atomic store we can it's an
 

00:39:36.480 --> 00:39:39.190 align:start position:0%
with the one atomic store we can it's an
ordinary<00:39:36.880><c> store</c><00:39:37.200><c> but</c>

00:39:39.190 --> 00:39:39.200 align:start position:0%
ordinary store but
 

00:39:39.200 --> 00:39:42.150 align:start position:0%
ordinary store but
it's<00:39:39.359><c> indivisible</c><00:39:41.119><c> we</c><00:39:41.359><c> switch</c><00:39:41.680><c> e1</c><00:39:42.000><c> from</c>

00:39:42.150 --> 00:39:42.160 align:start position:0%
it's indivisible we switch e1 from
 

00:39:42.160 --> 00:39:43.910 align:start position:0%
it's indivisible we switch e1 from
pointing<00:39:42.400><c> to</c><00:39:42.480><c> the</c><00:39:42.640><c> old</c>

00:39:43.910 --> 00:39:43.920 align:start position:0%
pointing to the old
 

00:39:43.920 --> 00:39:45.109 align:start position:0%
pointing to the old
the<00:39:44.079><c> next</c><00:39:44.320><c> pointer</c><00:39:44.560><c> from</c><00:39:44.720><c> pointing</c><00:39:44.960><c> to</c><00:39:45.040><c> the</c>

00:39:45.109 --> 00:39:45.119 align:start position:0%
the next pointer from pointing to the
 

00:39:45.119 --> 00:39:46.950 align:start position:0%
the next pointer from pointing to the
old<00:39:45.359><c> one</c><00:39:45.680><c> to</c><00:39:45.760><c> the</c><00:39:45.839><c> new</c><00:39:46.000><c> one</c><00:39:46.240><c> and</c><00:39:46.320><c> that</c><00:39:46.560><c> right</c><00:39:46.800><c> is</c>

00:39:46.950 --> 00:39:46.960 align:start position:0%
old one to the new one and that right is
 

00:39:46.960 --> 00:39:49.430 align:start position:0%
old one to the new one and that right is
what<00:39:47.200><c> sort</c><00:39:47.359><c> of</c><00:39:47.440><c> commits</c><00:39:47.920><c> us</c><00:39:48.079><c> to</c>

00:39:49.430 --> 00:39:49.440 align:start position:0%
what sort of commits us to
 

00:39:49.440 --> 00:39:55.750 align:start position:0%
what sort of commits us to
now<00:39:50.000><c> using</c><00:39:50.320><c> the</c><00:39:50.480><c> second</c><00:39:51.599><c> version</c>

00:39:55.750 --> 00:39:55.760 align:start position:0%
 
 

00:39:55.760 --> 00:39:58.870 align:start position:0%
 
this<00:39:56.000><c> is</c><00:39:56.079><c> a</c><00:39:56.240><c> very</c><00:39:56.480><c> basic</c><00:39:56.880><c> technique</c><00:39:57.680><c> a</c><00:39:58.160><c> a</c><00:39:58.640><c> very</c>

00:39:58.870 --> 00:39:58.880 align:start position:0%
this is a very basic technique a a very
 

00:39:58.880 --> 00:40:00.870 align:start position:0%
this is a very basic technique a a very
important<00:39:59.280><c> technique</c><00:39:59.680><c> for</c><00:39:59.839><c> rcu</c>

00:40:00.870 --> 00:40:00.880 align:start position:0%
important technique for rcu
 

00:40:00.880 --> 00:40:04.390 align:start position:0%
important technique for rcu
and<00:40:02.160><c> what</c><00:40:02.320><c> it</c><00:40:02.480><c> means</c><00:40:02.800><c> is</c><00:40:02.960><c> that</c><00:40:03.599><c> rcu</c>

00:40:04.390 --> 00:40:04.400 align:start position:0%
and what it means is that rcu
 

00:40:04.400 --> 00:40:07.109 align:start position:0%
and what it means is that rcu
is<00:40:04.720><c> really</c><00:40:05.680><c> mostly</c><00:40:06.160><c> applicable</c><00:40:06.640><c> to</c><00:40:06.800><c> data</c>

00:40:07.109 --> 00:40:07.119 align:start position:0%
is really mostly applicable to data
 

00:40:07.119 --> 00:40:09.430 align:start position:0%
is really mostly applicable to data
structures<00:40:07.760><c> for</c><00:40:07.920><c> which</c><00:40:08.160><c> you</c><00:40:08.319><c> can</c><00:40:08.640><c> have</c>

00:40:09.430 --> 00:40:09.440 align:start position:0%
structures for which you can have
 

00:40:09.440 --> 00:40:12.390 align:start position:0%
structures for which you can have
single<00:40:09.839><c> committing</c><00:40:10.400><c> rights</c><00:40:11.680><c> so</c><00:40:12.079><c> that</c><00:40:12.240><c> means</c>

00:40:12.390 --> 00:40:12.400 align:start position:0%
single committing rights so that means
 

00:40:12.400 --> 00:40:13.589 align:start position:0%
single committing rights so that means
there's<00:40:12.480><c> some</c><00:40:12.640><c> data</c><00:40:12.960><c> structures</c><00:40:13.280><c> which</c><00:40:13.440><c> are</c>

00:40:13.589 --> 00:40:13.599 align:start position:0%
there's some data structures which are
 

00:40:13.599 --> 00:40:15.190 align:start position:0%
there's some data structures which are
quite<00:40:13.839><c> awkward</c><00:40:14.240><c> in</c><00:40:14.319><c> this</c><00:40:14.560><c> scheme</c><00:40:14.800><c> like</c><00:40:15.040><c> a</c>

00:40:15.190 --> 00:40:15.200 align:start position:0%
quite awkward in this scheme like a
 

00:40:15.200 --> 00:40:18.069 align:start position:0%
quite awkward in this scheme like a
doubly<00:40:15.680><c> linked</c><00:40:16.079><c> list</c>

00:40:18.069 --> 00:40:18.079 align:start position:0%
doubly linked list
 

00:40:18.079 --> 00:40:20.710 align:start position:0%
doubly linked list
where<00:40:18.400><c> every</c><00:40:19.359><c> element</c><00:40:19.760><c> is</c><00:40:19.839><c> pointed</c><00:40:20.240><c> to</c><00:40:20.400><c> from</c>

00:40:20.710 --> 00:40:20.720 align:start position:0%
where every element is pointed to from
 

00:40:20.720 --> 00:40:22.550 align:start position:0%
where every element is pointed to from
two<00:40:21.040><c> different</c><00:40:21.359><c> pointers</c>

00:40:22.550 --> 00:40:22.560 align:start position:0%
two different pointers
 

00:40:22.560 --> 00:40:25.430 align:start position:0%
two different pointers
now<00:40:22.720><c> we</c><00:40:22.960><c> can't</c><00:40:23.280><c> get</c><00:40:23.520><c> rid</c><00:40:23.760><c> of</c><00:40:24.000><c> a</c><00:40:24.720><c> list</c><00:40:25.040><c> element</c>

00:40:25.430 --> 00:40:25.440 align:start position:0%
now we can't get rid of a list element
 

00:40:25.440 --> 00:40:26.870 align:start position:0%
now we can't get rid of a list element
with<00:40:25.599><c> a</c><00:40:25.680><c> single</c><00:40:26.000><c> committing</c><00:40:26.480><c> write</c>

00:40:26.870 --> 00:40:26.880 align:start position:0%
with a single committing write
 

00:40:26.880 --> 00:40:28.710 align:start position:0%
with a single committing write
because<00:40:27.040><c> there's</c><00:40:27.280><c> two</c><00:40:27.440><c> pointers</c><00:40:27.839><c> to</c><00:40:28.079><c> it</c><00:40:28.480><c> we</c>

00:40:28.710 --> 00:40:28.720 align:start position:0%
because there's two pointers to it we
 

00:40:28.720 --> 00:40:30.390 align:start position:0%
because there's two pointers to it we
can't<00:40:29.359><c> on</c><00:40:29.520><c> most</c><00:40:29.760><c> machines</c><00:40:30.079><c> you</c><00:40:30.160><c> can't</c>

00:40:30.390 --> 00:40:30.400 align:start position:0%
can't on most machines you can't
 

00:40:30.400 --> 00:40:31.750 align:start position:0%
can't on most machines you can't
atomically<00:40:31.119><c> change</c>

00:40:31.750 --> 00:40:31.760 align:start position:0%
atomically change
 

00:40:31.760 --> 00:40:33.430 align:start position:0%
atomically change
two<00:40:32.000><c> different</c><00:40:32.319><c> memory</c><00:40:32.640><c> locations</c><00:40:33.280><c> at</c><00:40:33.359><c> the</c>

00:40:33.430 --> 00:40:33.440 align:start position:0%
two different memory locations at the
 

00:40:33.440 --> 00:40:35.190 align:start position:0%
two different memory locations at the
same<00:40:33.680><c> time</c>

00:40:35.190 --> 00:40:35.200 align:start position:0%
same time
 

00:40:35.200 --> 00:40:36.950 align:start position:0%
same time
so<00:40:35.599><c> doubly</c><00:40:35.920><c> linked</c><00:40:36.079><c> lists</c><00:40:36.319><c> are</c><00:40:36.480><c> not</c><00:40:36.640><c> so</c><00:40:36.800><c> good</c>

00:40:36.950 --> 00:40:36.960 align:start position:0%
so doubly linked lists are not so good
 

00:40:36.960 --> 00:40:38.550 align:start position:0%
so doubly linked lists are not so good
for<00:40:37.119><c> rcu</c>

00:40:38.550 --> 00:40:38.560 align:start position:0%
for rcu
 

00:40:38.560 --> 00:40:40.790 align:start position:0%
for rcu
a<00:40:38.640><c> data</c><00:40:38.880><c> structure</c><00:40:39.200><c> that</c><00:40:39.359><c> is</c><00:40:39.520><c> good</c><00:40:39.760><c> is</c><00:40:39.920><c> a</c><00:40:40.000><c> tree</c>

00:40:40.790 --> 00:40:40.800 align:start position:0%
a data structure that is good is a tree
 

00:40:40.800 --> 00:40:43.270 align:start position:0%
a data structure that is good is a tree
and<00:40:41.040><c> if</c><00:40:41.200><c> you</c><00:40:41.280><c> have</c><00:40:41.440><c> a</c>

00:40:43.270 --> 00:40:43.280 align:start position:0%
and if you have a
 

00:40:43.280 --> 00:40:49.349 align:start position:0%
and if you have a
tree<00:40:43.680><c> of</c>

00:40:49.349 --> 00:40:49.359 align:start position:0%
 
 

00:40:49.359 --> 00:40:51.990 align:start position:0%
 
a<00:40:49.520><c> tree</c><00:40:49.680><c> of</c><00:40:49.760><c> nodes</c><00:40:50.079><c> like</c><00:40:50.319><c> this</c><00:40:50.960><c> then</c><00:40:51.440><c> we</c><00:40:51.599><c> can</c><00:40:51.680><c> do</c>

00:40:51.990 --> 00:40:52.000 align:start position:0%
a tree of nodes like this then we can do
 

00:40:52.000 --> 00:40:54.150 align:start position:0%
a tree of nodes like this then we can do
you know<00:40:52.160><c> suppose</c><00:40:52.480><c> we</c><00:40:52.640><c> want</c><00:40:52.800><c> to</c><00:40:52.960><c> change</c>

00:40:54.150 --> 00:40:54.160 align:start position:0%
you know suppose we want to change
 

00:40:54.160 --> 00:40:56.870 align:start position:0%
you know suppose we want to change
we<00:40:54.240><c> want</c><00:40:54.400><c> to</c><00:40:54.480><c> modify</c><00:40:54.960><c> this</c><00:40:55.200><c> value</c><00:40:55.520><c> down</c><00:40:55.839><c> here</c>

00:40:56.870 --> 00:40:56.880 align:start position:0%
we want to modify this value down here
 

00:40:56.880 --> 00:41:00.950 align:start position:0%
we want to modify this value down here
what<00:40:57.040><c> we</c><00:40:57.200><c> can</c><00:40:57.359><c> do</c>

00:41:00.950 --> 00:41:00.960 align:start position:0%
 
 

00:41:00.960 --> 00:41:03.190 align:start position:0%
 
there's<00:41:01.119><c> some</c><00:41:01.359><c> head</c><00:41:01.839><c> to</c><00:41:02.000><c> the</c><00:41:02.079><c> tree</c><00:41:02.880><c> what</c><00:41:03.119><c> we</c>

00:41:03.190 --> 00:41:03.200 align:start position:0%
there's some head to the tree what we
 

00:41:03.200 --> 00:41:05.430 align:start position:0%
there's some head to the tree what we
can<00:41:03.359><c> do</c><00:41:03.520><c> is</c><00:41:03.839><c> cook</c><00:41:04.079><c> up</c>

00:41:05.430 --> 00:41:05.440 align:start position:0%
can do is cook up
 

00:41:05.440 --> 00:41:08.870 align:start position:0%
can do is cook up
a<00:41:05.599><c> new</c><00:41:07.200><c> a</c><00:41:07.359><c> new</c><00:41:07.599><c> version</c><00:41:08.000><c> of</c><00:41:08.160><c> this</c><00:41:08.400><c> part</c><00:41:08.640><c> of</c><00:41:08.720><c> the</c>

00:41:08.870 --> 00:41:08.880 align:start position:0%
a new a new version of this part of the
 

00:41:08.880 --> 00:41:10.950 align:start position:0%
a new a new version of this part of the
tree<00:41:09.200><c> here</c>

00:41:10.950 --> 00:41:10.960 align:start position:0%
tree here
 

00:41:10.960 --> 00:41:12.710 align:start position:0%
tree here
and<00:41:11.119><c> with</c><00:41:11.359><c> the</c><00:41:11.440><c> single</c><00:41:11.760><c> committing</c><00:41:12.240><c> right</c><00:41:12.560><c> to</c>

00:41:12.710 --> 00:41:12.720 align:start position:0%
and with the single committing right to
 

00:41:12.720 --> 00:41:14.230 align:start position:0%
and with the single committing right to
the<00:41:12.880><c> head</c><00:41:13.200><c> pointer</c>

00:41:14.230 --> 00:41:14.240 align:start position:0%
the head pointer
 

00:41:14.240 --> 00:41:15.910 align:start position:0%
the head pointer
switch<00:41:14.560><c> to</c><00:41:14.720><c> the</c><00:41:14.880><c> new</c><00:41:15.119><c> version</c><00:41:15.359><c> of</c><00:41:15.440><c> the</c><00:41:15.599><c> tree</c>

00:41:15.910 --> 00:41:15.920 align:start position:0%
switch to the new version of the tree
 

00:41:15.920 --> 00:41:17.990 align:start position:0%
switch to the new version of the tree
and<00:41:16.000><c> so</c><00:41:16.400><c> the</c><00:41:16.560><c> new</c><00:41:16.800><c> version</c><00:41:17.040><c> of</c><00:41:17.119><c> the</c><00:41:17.200><c> tree</c>

00:41:17.990 --> 00:41:18.000 align:start position:0%
and so the new version of the tree
 

00:41:18.000 --> 00:41:20.230 align:start position:0%
and so the new version of the tree
which<00:41:18.240><c> will</c><00:41:18.560><c> you</c><00:41:18.640><c> know</c><00:41:19.040><c> the</c><00:41:19.200><c> writer</c><00:41:19.520><c> will</c>

00:41:20.230 --> 00:41:20.240 align:start position:0%
which will you know the writer will
 

00:41:20.240 --> 00:41:21.430 align:start position:0%
which will you know the writer will
allocate

00:41:21.430 --> 00:41:21.440 align:start position:0%
allocate
 

00:41:21.440 --> 00:41:24.790 align:start position:0%
allocate
what<00:41:21.839><c> um</c><00:41:22.240><c> sort</c><00:41:22.480><c> of</c><00:41:22.640><c> create</c>

00:41:24.790 --> 00:41:24.800 align:start position:0%
what um sort of create
 

00:41:24.800 --> 00:41:28.069 align:start position:0%
what um sort of create
um<00:41:27.200><c> uh</c><00:41:27.359><c> can</c><00:41:27.599><c> actually</c>

00:41:28.069 --> 00:41:28.079 align:start position:0%
um uh can actually
 

00:41:28.079 --> 00:41:30.230 align:start position:0%
um uh can actually
share<00:41:28.560><c> for</c><00:41:29.280><c> convenience</c><00:41:29.760><c> can</c><00:41:29.920><c> share</c>

00:41:30.230 --> 00:41:30.240 align:start position:0%
share for convenience can share
 

00:41:30.240 --> 00:41:31.990 align:start position:0%
share for convenience can share
structure<00:41:30.800><c> the</c><00:41:30.960><c> unmodified</c><00:41:31.599><c> part</c><00:41:31.760><c> with</c><00:41:31.920><c> the</c>

00:41:31.990 --> 00:41:32.000 align:start position:0%
structure the unmodified part with the
 

00:41:32.000 --> 00:41:32.790 align:start position:0%
structure the unmodified part with the
old<00:41:32.240><c> tree</c>

00:41:32.790 --> 00:41:32.800 align:start position:0%
old tree
 

00:41:32.800 --> 00:41:34.470 align:start position:0%
old tree
and<00:41:32.960><c> then</c><00:41:33.200><c> with</c><00:41:33.440><c> a</c><00:41:33.520><c> single</c><00:41:33.839><c> committing</c><00:41:34.240><c> right</c>

00:41:34.470 --> 00:41:34.480 align:start position:0%
and then with a single committing right
 

00:41:34.480 --> 00:41:36.069 align:start position:0%
and then with a single committing right
we're<00:41:34.640><c> going</c><00:41:34.800><c> to</c><00:41:34.880><c> change</c><00:41:35.200><c> the</c><00:41:35.359><c> head</c><00:41:35.599><c> pointer</c>

00:41:36.069 --> 00:41:36.079 align:start position:0%
we're going to change the head pointer
 

00:41:36.079 --> 00:41:36.630 align:start position:0%
we're going to change the head pointer
to

00:41:36.630 --> 00:41:36.640 align:start position:0%
to
 

00:41:36.640 --> 00:41:37.990 align:start position:0%
to
the<00:41:36.800><c> tree</c><00:41:37.040><c> head</c><00:41:37.200><c> pointer</c><00:41:37.520><c> to</c><00:41:37.680><c> point</c><00:41:37.839><c> to</c><00:41:37.920><c> the</c>

00:41:37.990 --> 00:41:38.000 align:start position:0%
the tree head pointer to point to the
 

00:41:38.000 --> 00:41:42.309 align:start position:0%
the tree head pointer to point to the
new<00:41:38.160><c> version</c>

00:41:42.309 --> 00:41:42.319 align:start position:0%
 
 

00:41:42.319 --> 00:41:43.750 align:start position:0%
 
but<00:41:42.480><c> for</c><00:41:42.640><c> other</c><00:41:42.800><c> data</c><00:41:43.040><c> structures</c><00:41:43.440><c> that</c><00:41:43.599><c> don't</c>

00:41:43.750 --> 00:41:43.760 align:start position:0%
but for other data structures that don't
 

00:41:43.760 --> 00:41:45.829 align:start position:0%
but for other data structures that don't
look<00:41:43.920><c> like</c><00:41:44.079><c> lister</c><00:41:44.400><c> trees</c><00:41:44.800><c> it's</c><00:41:45.200><c> not</c><00:41:45.440><c> so</c><00:41:45.599><c> easy</c>

00:41:45.829 --> 00:41:45.839 align:start position:0%
look like lister trees it's not so easy
 

00:41:45.839 --> 00:41:51.670 align:start position:0%
look like lister trees it's not so easy
to<00:41:45.920><c> use</c><00:41:46.839><c> rcu</c>

00:41:51.670 --> 00:41:51.680 align:start position:0%
 
 

00:41:51.680 --> 00:41:55.670 align:start position:0%
 
okay<00:41:53.760><c> so</c><00:41:53.920><c> that's</c><00:41:54.079><c> the</c><00:41:54.160><c> first</c><00:41:54.480><c> idea</c>

00:41:55.670 --> 00:41:55.680 align:start position:0%
okay so that's the first idea
 

00:41:55.680 --> 00:42:03.910 align:start position:0%
okay so that's the first idea
any<00:41:55.920><c> last</c><00:42:00.839><c> questions</c>

00:42:03.910 --> 00:42:03.920 align:start position:0%
 
 

00:42:03.920 --> 00:42:14.470 align:start position:0%
 
the<00:42:04.240><c> second</c><00:42:04.560><c> idea</c>

00:42:14.470 --> 00:42:14.480 align:start position:0%
 
 

00:42:14.480 --> 00:42:16.950 align:start position:0%
 
one<00:42:14.640><c> of</c><00:42:14.720><c> the</c><00:42:14.880><c> problems</c><00:42:15.520><c> with</c><00:42:15.839><c> uh</c><00:42:16.640><c> one</c><00:42:16.800><c> of</c><00:42:16.880><c> the</c>

00:42:16.950 --> 00:42:16.960 align:start position:0%
one of the problems with uh one of the
 

00:42:16.960 --> 00:42:18.470 align:start position:0%
one of the problems with uh one of the
potential<00:42:17.520><c> problems</c>

00:42:18.470 --> 00:42:18.480 align:start position:0%
potential problems
 

00:42:18.480 --> 00:42:22.150 align:start position:0%
potential problems
with<00:42:19.440><c> uh</c>

00:42:22.150 --> 00:42:22.160 align:start position:0%
 
 

00:42:22.160 --> 00:42:25.510 align:start position:0%
 
um<00:42:24.079><c> the</c><00:42:24.319><c> scheme</c><00:42:24.640><c> i</c><00:42:24.720><c> just</c>

00:42:25.510 --> 00:42:25.520 align:start position:0%
um the scheme i just
 

00:42:25.520 --> 00:42:29.430 align:start position:0%
um the scheme i just
described<00:42:28.400><c> and</c><00:42:28.480><c> we're</c><00:42:28.640><c> gonna</c><00:42:28.800><c> cook</c><00:42:29.040><c> up</c><00:42:29.119><c> a</c><00:42:29.200><c> new</c>

00:42:29.430 --> 00:42:29.440 align:start position:0%
described and we're gonna cook up a new
 

00:42:29.440 --> 00:42:31.349 align:start position:0%
described and we're gonna cook up a new
e2

00:42:31.349 --> 00:42:31.359 align:start position:0%
e2
 

00:42:31.359 --> 00:42:33.750 align:start position:0%
e2
prime<00:42:31.680><c> and</c><00:42:32.079><c> what</c><00:42:32.240><c> i</c><00:42:32.400><c> said</c><00:42:32.640><c> was</c><00:42:32.880><c> oh</c><00:42:33.119><c> well</c><00:42:33.280><c> we'll</c>

00:42:33.750 --> 00:42:33.760 align:start position:0%
prime and what i said was oh well we'll
 

00:42:33.760 --> 00:42:36.150 align:start position:0%
prime and what i said was oh well we'll
initialize<00:42:34.319><c> the</c><00:42:34.480><c> content</c><00:42:34.880><c> for</c><00:42:35.040><c> e2</c><00:42:35.520><c> prime</c><00:42:36.000><c> and</c>

00:42:36.150 --> 00:42:36.160 align:start position:0%
initialize the content for e2 prime and
 

00:42:36.160 --> 00:42:36.710 align:start position:0%
initialize the content for e2 prime and
we'll

00:42:36.710 --> 00:42:36.720 align:start position:0%
we'll
 

00:42:36.720 --> 00:42:39.270 align:start position:0%
we'll
you<00:42:36.880><c> know</c><00:42:37.119><c> set</c><00:42:37.359><c> its</c><00:42:37.520><c> next</c><00:42:37.839><c> pointer</c><00:42:38.160><c> correctly</c>

00:42:39.270 --> 00:42:39.280 align:start position:0%
you know set its next pointer correctly
 

00:42:39.280 --> 00:42:39.750 align:start position:0%
you know set its next pointer correctly
and

00:42:39.750 --> 00:42:39.760 align:start position:0%
and
 

00:42:39.760 --> 00:42:43.750 align:start position:0%
and
after<00:42:40.319><c> that</c><00:42:42.160><c> we'll</c><00:42:42.400><c> set</c><00:42:42.640><c> e1's</c><00:42:43.119><c> next</c><00:42:43.359><c> pointer</c>

00:42:43.750 --> 00:42:43.760 align:start position:0%
after that we'll set e1's next pointer
 

00:42:43.760 --> 00:42:46.390 align:start position:0%
after that we'll set e1's next pointer
to<00:42:43.920><c> point</c><00:42:44.079><c> to</c><00:42:44.240><c> e2</c>

00:42:46.390 --> 00:42:46.400 align:start position:0%
to point to e2
 

00:42:46.400 --> 00:42:49.270 align:start position:0%
to point to e2
as<00:42:46.640><c> you</c><00:42:46.800><c> may</c><00:42:46.960><c> recall</c><00:42:47.520><c> from</c><00:42:48.720><c> discussions</c><00:42:49.119><c> of</c>

00:42:49.270 --> 00:42:49.280 align:start position:0%
as you may recall from discussions of
 

00:42:49.280 --> 00:42:50.309 align:start position:0%
as you may recall from discussions of
xv6

00:42:50.309 --> 00:42:50.319 align:start position:0%
xv6
 

00:42:50.319 --> 00:42:52.150 align:start position:0%
xv6
by<00:42:50.480><c> default</c><00:42:50.880><c> there's</c><00:42:51.119><c> no</c><00:42:51.359><c> after</c><00:42:51.680><c> that</c><00:42:52.000><c> on</c>

00:42:52.150 --> 00:42:52.160 align:start position:0%
by default there's no after that on
 

00:42:52.160 --> 00:42:54.150 align:start position:0%
by default there's no after that on
these<00:42:52.400><c> machines</c>

00:42:54.150 --> 00:42:54.160 align:start position:0%
these machines
 

00:42:54.160 --> 00:42:56.550 align:start position:0%
these machines
the<00:42:54.319><c> compiler</c><00:42:54.960><c> and</c><00:42:55.040><c> the</c><00:42:55.200><c> hardware</c><00:42:56.240><c> all</c>

00:42:56.550 --> 00:42:56.560 align:start position:0%
the compiler and the hardware all
 

00:42:56.560 --> 00:42:58.550 align:start position:0%
the compiler and the hardware all
basically<00:42:56.880><c> all</c><00:42:57.040><c> compilers</c><00:42:57.839><c> and</c>

00:42:58.550 --> 00:42:58.560 align:start position:0%
basically all compilers and
 

00:42:58.560 --> 00:43:01.750 align:start position:0%
basically all compilers and
many<00:42:58.800><c> microprocessors</c><00:43:00.480><c> reorder</c><00:43:01.280><c> memory</c>

00:43:01.750 --> 00:43:01.760 align:start position:0%
many microprocessors reorder memory
 

00:43:01.760 --> 00:43:03.270 align:start position:0%
many microprocessors reorder memory
operations

00:43:03.270 --> 00:43:03.280 align:start position:0%
operations
 

00:43:03.280 --> 00:43:06.630 align:start position:0%
operations
so<00:43:04.400><c> if</c><00:43:04.560><c> you</c><00:43:04.800><c> simply</c><00:43:05.359><c> you</c><00:43:05.520><c> know</c><00:43:05.839><c> say</c>

00:43:06.630 --> 00:43:06.640 align:start position:0%
so if you simply you know say
 

00:43:06.640 --> 00:43:11.829 align:start position:0%
so if you simply you know say
we<00:43:06.800><c> allocate</c><00:43:07.280><c> a</c><00:43:07.440><c> new</c><00:43:09.359><c> element</c>

00:43:11.829 --> 00:43:11.839 align:start position:0%
we allocate a new element
 

00:43:11.839 --> 00:43:13.990 align:start position:0%
we allocate a new element
we<00:43:12.000><c> just</c><00:43:12.240><c> wrote</c><00:43:12.560><c> this</c><00:43:12.800><c> c</c><00:43:13.119><c> code</c><00:43:13.440><c> you</c><00:43:13.599><c> know</c><00:43:13.760><c> e</c>

00:43:13.990 --> 00:43:14.000 align:start position:0%
we just wrote this c code you know e
 

00:43:14.000 --> 00:43:16.470 align:start position:0%
we just wrote this c code you know e
arrow<00:43:14.400><c> next</c>

00:43:16.470 --> 00:43:16.480 align:start position:0%
arrow next
 

00:43:16.480 --> 00:43:19.589 align:start position:0%
arrow next
equals<00:43:17.920><c> you</c><00:43:18.079><c> know</c><00:43:18.240><c> e3</c>

00:43:19.589 --> 00:43:19.599 align:start position:0%
equals you know e3
 

00:43:19.599 --> 00:43:25.190 align:start position:0%
equals you know e3
and<00:43:19.760><c> then</c><00:43:20.800><c> e1</c><00:43:21.920><c> arrow</c><00:43:22.319><c> next</c>

00:43:25.190 --> 00:43:25.200 align:start position:0%
 
 

00:43:25.200 --> 00:43:28.230 align:start position:0%
 
equals<00:43:25.599><c> e</c><00:43:26.720><c> this</c><00:43:26.880><c> is</c><00:43:26.960><c> not</c><00:43:27.119><c> going</c><00:43:27.280><c> to</c><00:43:27.359><c> work</c><00:43:27.680><c> well</c>

00:43:28.230 --> 00:43:28.240 align:start position:0%
equals e this is not going to work well
 

00:43:28.240 --> 00:43:29.670 align:start position:0%
equals e this is not going to work well
this<00:43:28.400><c> is</c><00:43:28.560><c> not</c><00:43:28.640><c> going</c><00:43:28.720><c> to</c><00:43:28.800><c> work</c><00:43:28.960><c> reliably</c><00:43:29.520><c> it's</c>

00:43:29.670 --> 00:43:29.680 align:start position:0%
this is not going to work reliably it's
 

00:43:29.680 --> 00:43:32.230 align:start position:0%
this is not going to work reliably it's
going<00:43:29.760><c> to</c><00:43:29.839><c> work</c><00:43:30.000><c> fine</c><00:43:30.240><c> when</c><00:43:30.400><c> you</c><00:43:30.480><c> test</c><00:43:30.800><c> it</c>

00:43:32.230 --> 00:43:32.240 align:start position:0%
going to work fine when you test it
 

00:43:32.240 --> 00:43:33.990 align:start position:0%
going to work fine when you test it
but<00:43:32.480><c> it</c><00:43:32.560><c> won't</c><00:43:32.720><c> work</c><00:43:32.960><c> in</c><00:43:33.040><c> real</c><00:43:33.280><c> life</c><00:43:33.680><c> all</c><00:43:33.839><c> the</c>

00:43:33.990 --> 00:43:34.000 align:start position:0%
but it won't work in real life all the
 

00:43:34.000 --> 00:43:35.990 align:start position:0%
but it won't work in real life all the
time<00:43:34.400><c> occasionally</c><00:43:34.880><c> it'll</c><00:43:35.040><c> go</c><00:43:35.200><c> wrong</c><00:43:35.599><c> and</c>

00:43:35.990 --> 00:43:36.000 align:start position:0%
time occasionally it'll go wrong and
 

00:43:36.000 --> 00:43:39.349 align:start position:0%
time occasionally it'll go wrong and
the<00:43:36.160><c> reason</c><00:43:36.480><c> is</c><00:43:36.640><c> that</c><00:43:37.440><c> the</c><00:43:37.599><c> compiler</c>

00:43:39.349 --> 00:43:39.359 align:start position:0%
the reason is that the compiler
 

00:43:39.359 --> 00:43:41.990 align:start position:0%
the reason is that the compiler
may<00:43:39.599><c> end</c><00:43:39.760><c> up</c><00:43:40.000><c> reordering</c><00:43:40.640><c> these</c><00:43:40.880><c> rights</c><00:43:41.839><c> or</c>

00:43:41.990 --> 00:43:42.000 align:start position:0%
may end up reordering these rights or
 

00:43:42.000 --> 00:43:43.589 align:start position:0%
may end up reordering these rights or
the<00:43:42.160><c> machine</c><00:43:42.480><c> may</c><00:43:42.640><c> end</c><00:43:42.800><c> up</c><00:43:42.880><c> reordering</c><00:43:43.440><c> these</c>

00:43:43.589 --> 00:43:43.599 align:start position:0%
the machine may end up reordering these
 

00:43:43.599 --> 00:43:44.309 align:start position:0%
the machine may end up reordering these
rights<00:43:44.000><c> or</c>

00:43:44.309 --> 00:43:44.319 align:start position:0%
rights or
 

00:43:44.319 --> 00:43:46.150 align:start position:0%
rights or
the<00:43:44.560><c> reading</c><00:43:45.040><c> code</c><00:43:45.359><c> which</c><00:43:45.599><c> reads</c><00:43:45.920><c> these</c>

00:43:46.150 --> 00:43:46.160 align:start position:0%
the reading code which reads these
 

00:43:46.160 --> 00:43:47.349 align:start position:0%
the reading code which reads these
various<00:43:46.560><c> things</c>

00:43:47.349 --> 00:43:47.359 align:start position:0%
various things
 

00:43:47.359 --> 00:43:49.190 align:start position:0%
various things
the<00:43:47.520><c> compiler</c><00:43:48.240><c> or</c><00:43:48.319><c> the</c><00:43:48.480><c> machine</c><00:43:49.119><c> the</c>

00:43:49.190 --> 00:43:49.200 align:start position:0%
the compiler or the machine the
 

00:43:49.200 --> 00:43:50.710 align:start position:0%
the compiler or the machine the
microprocessor<00:43:50.000><c> may</c><00:43:50.160><c> end</c><00:43:50.400><c> up</c>

00:43:50.710 --> 00:43:50.720 align:start position:0%
microprocessor may end up
 

00:43:50.720 --> 00:43:53.510 align:start position:0%
microprocessor may end up
reordering<00:43:51.839><c> the</c><00:43:52.000><c> reader's</c><00:43:52.480><c> reads</c><00:43:53.200><c> and</c><00:43:53.359><c> of</c>

00:43:53.510 --> 00:43:53.520 align:start position:0%
reordering the reader's reads and of
 

00:43:53.520 --> 00:43:54.870 align:start position:0%
reordering the reader's reads and of
course

00:43:54.870 --> 00:43:54.880 align:start position:0%
course
 

00:43:54.880 --> 00:43:58.150 align:start position:0%
course
if<00:43:55.040><c> we</c><00:43:55.200><c> set</c><00:43:55.599><c> e1</c><00:43:56.000><c> arrow</c><00:43:56.400><c> next</c><00:43:57.200><c> to</c><00:43:57.359><c> point</c><00:43:57.599><c> to</c><00:43:57.680><c> e2</c>

00:43:58.150 --> 00:43:58.160 align:start position:0%
if we set e1 arrow next to point to e2
 

00:43:58.160 --> 00:43:59.589 align:start position:0%
if we set e1 arrow next to point to e2
before

00:43:59.589 --> 00:43:59.599 align:start position:0%
before
 

00:43:59.599 --> 00:44:02.069 align:start position:0%
before
we<00:43:59.760><c> initialize</c><00:44:00.319><c> the</c><00:44:00.400><c> content</c><00:44:00.800><c> of</c><00:44:00.960><c> e2</c><00:44:01.760><c> so</c><00:44:01.920><c> that</c>

00:44:02.069 --> 00:44:02.079 align:start position:0%
we initialize the content of e2 so that
 

00:44:02.079 --> 00:44:02.710 align:start position:0%
we initialize the content of e2 so that
it's

00:44:02.710 --> 00:44:02.720 align:start position:0%
it's
 

00:44:02.720 --> 00:44:05.670 align:start position:0%
it's
string<00:44:03.040><c> that</c><00:44:03.119><c> holds</c><00:44:03.520><c> or</c><00:44:03.599><c> his</c><00:44:03.760><c> next</c><00:44:04.079><c> pointer</c>

00:44:05.670 --> 00:44:05.680 align:start position:0%
string that holds or his next pointer
 

00:44:05.680 --> 00:44:07.109 align:start position:0%
string that holds or his next pointer
point<00:44:05.920><c> off</c><00:44:06.079><c> into</c><00:44:06.319><c> space</c>

00:44:07.109 --> 00:44:07.119 align:start position:0%
point off into space
 

00:44:07.119 --> 00:44:08.390 align:start position:0%
point off into space
then<00:44:07.359><c> some</c><00:44:07.520><c> reader's</c><00:44:07.920><c> going</c><00:44:08.000><c> to</c><00:44:08.079><c> see</c><00:44:08.240><c> this</c>

00:44:08.390 --> 00:44:08.400 align:start position:0%
then some reader's going to see this
 

00:44:08.400 --> 00:44:10.069 align:start position:0%
then some reader's going to see this
point<00:44:08.640><c> or</c><00:44:08.720><c> follow</c><00:44:09.040><c> it</c><00:44:09.119><c> read</c><00:44:09.359><c> garbage</c><00:44:09.920><c> and</c>

00:44:10.069 --> 00:44:10.079 align:start position:0%
point or follow it read garbage and
 

00:44:10.079 --> 00:44:11.910 align:start position:0%
point or follow it read garbage and
crash

00:44:11.910 --> 00:44:11.920 align:start position:0%
crash
 

00:44:11.920 --> 00:44:14.390 align:start position:0%
crash
so<00:44:12.160><c> the</c><00:44:12.640><c> second</c><00:44:12.960><c> idea</c><00:44:13.359><c> is</c><00:44:13.440><c> that</c><00:44:13.599><c> both</c><00:44:13.920><c> readers</c>

00:44:14.390 --> 00:44:14.400 align:start position:0%
so the second idea is that both readers
 

00:44:14.400 --> 00:44:17.270 align:start position:0%
so the second idea is that both readers
and<00:44:14.720><c> writers</c><00:44:15.200><c> have</c><00:44:15.359><c> to</c><00:44:15.440><c> use</c><00:44:15.599><c> memory</c><00:44:16.000><c> barriers</c>

00:44:17.270 --> 00:44:17.280 align:start position:0%
and writers have to use memory barriers
 

00:44:17.280 --> 00:44:19.270 align:start position:0%
and writers have to use memory barriers
now<00:44:17.520><c> even</c><00:44:17.680><c> though</c><00:44:17.760><c> we're</c><00:44:17.920><c> not</c><00:44:18.079><c> locking</c><00:44:19.119><c> or</c>

00:44:19.270 --> 00:44:19.280 align:start position:0%
now even though we're not locking or
 

00:44:19.280 --> 00:44:22.870 align:start position:0%
now even though we're not locking or
really<00:44:19.599><c> because</c><00:44:19.920><c> we're</c><00:44:20.079><c> not</c><00:44:20.240><c> locking</c>

00:44:22.870 --> 00:44:22.880 align:start position:0%
 
 

00:44:22.880 --> 00:44:25.030 align:start position:0%
 
the<00:44:23.040><c> writers</c><00:44:23.680><c> and</c><00:44:23.920><c> the</c><00:44:24.160><c> readers</c><00:44:24.560><c> have</c><00:44:24.800><c> to</c><00:44:24.880><c> use</c>

00:44:25.030 --> 00:44:25.040 align:start position:0%
the writers and the readers have to use
 

00:44:25.040 --> 00:44:26.390 align:start position:0%
the writers and the readers have to use
a<00:44:25.119><c> barrier</c><00:44:25.839><c> and</c>

00:44:26.390 --> 00:44:26.400 align:start position:0%
a barrier and
 

00:44:26.400 --> 00:44:28.150 align:start position:0%
a barrier and
for<00:44:26.640><c> writers</c><00:44:27.040><c> the</c><00:44:27.119><c> place</c><00:44:27.359><c> the</c><00:44:27.520><c> barrier</c><00:44:27.920><c> has</c><00:44:28.000><c> to</c>

00:44:28.150 --> 00:44:28.160 align:start position:0%
for writers the place the barrier has to
 

00:44:28.160 --> 00:44:30.710 align:start position:0%
for writers the place the barrier has to
go<00:44:28.319><c> is</c><00:44:28.480><c> before</c><00:44:28.960><c> the</c><00:44:29.119><c> committing</c><00:44:29.680><c> right</c>

00:44:30.710 --> 00:44:30.720 align:start position:0%
go is before the committing right
 

00:44:30.720 --> 00:44:36.069 align:start position:0%
go is before the committing right
so<00:44:30.880><c> we</c><00:44:31.040><c> need</c><00:44:31.200><c> a</c><00:44:31.280><c> barrier</c><00:44:34.839><c> here</c>

00:44:36.069 --> 00:44:36.079 align:start position:0%
so we need a barrier here
 

00:44:36.079 --> 00:44:39.030 align:start position:0%
so we need a barrier here
that<00:44:36.400><c> tells</c><00:44:36.800><c> the</c><00:44:36.960><c> hardware</c><00:44:38.160><c> and</c><00:44:38.319><c> the</c><00:44:38.400><c> compiler</c>

00:44:39.030 --> 00:44:39.040 align:start position:0%
that tells the hardware and the compiler
 

00:44:39.040 --> 00:44:39.670 align:start position:0%
that tells the hardware and the compiler
look

00:44:39.670 --> 00:44:39.680 align:start position:0%
look
 

00:44:39.680 --> 00:44:42.390 align:start position:0%
look
all<00:44:39.839><c> the</c><00:44:40.000><c> writes</c><00:44:40.720><c> before</c><00:44:41.200><c> this</c><00:44:41.440><c> barrier</c>

00:44:42.390 --> 00:44:42.400 align:start position:0%
all the writes before this barrier
 

00:44:42.400 --> 00:44:42.870 align:start position:0%
all the writes before this barrier
please

00:44:42.870 --> 00:44:42.880 align:start position:0%
please
 

00:44:42.880 --> 00:44:45.270 align:start position:0%
please
finish<00:44:43.200><c> them</c><00:44:43.760><c> before</c><00:44:44.400><c> doing</c><00:44:44.640><c> any</c><00:44:44.880><c> writes</c>

00:44:45.270 --> 00:44:45.280 align:start position:0%
finish them before doing any writes
 

00:44:45.280 --> 00:44:46.550 align:start position:0%
finish them before doing any writes
after<00:44:45.520><c> the</c><00:44:45.680><c> barrier</c>

00:44:46.550 --> 00:44:46.560 align:start position:0%
after the barrier
 

00:44:46.560 --> 00:44:49.109 align:start position:0%
after the barrier
so<00:44:46.720><c> that</c><00:44:46.960><c> e2</c><00:44:47.440><c> is</c><00:44:47.520><c> fully</c><00:44:47.839><c> initialized</c><00:44:48.560><c> before</c>

00:44:49.109 --> 00:44:49.119 align:start position:0%
so that e2 is fully initialized before
 

00:44:49.119 --> 00:44:50.950 align:start position:0%
so that e2 is fully initialized before
we<00:44:49.280><c> set</c><00:44:49.520><c> e1</c><00:44:49.920><c> to</c><00:44:50.000><c> point</c><00:44:50.240><c> to</c><00:44:50.400><c> it</c>

00:44:50.950 --> 00:44:50.960 align:start position:0%
we set e1 to point to it
 

00:44:50.960 --> 00:44:54.950 align:start position:0%
we set e1 to point to it
and<00:44:51.200><c> on</c><00:44:51.359><c> the</c><00:44:51.440><c> read</c><00:44:51.839><c> side</c>

00:44:54.950 --> 00:44:54.960 align:start position:0%
 
 

00:44:54.960 --> 00:44:59.109 align:start position:0%
 
the<00:44:55.119><c> reader</c><00:44:55.440><c> needs</c><00:44:55.760><c> to</c><00:44:56.079><c> load</c><00:44:57.359><c> e1</c><00:44:57.920><c> arrow</c><00:44:58.240><c> next</c>

00:44:59.109 --> 00:44:59.119 align:start position:0%
the reader needs to load e1 arrow next
 

00:44:59.119 --> 00:45:01.510 align:start position:0%
the reader needs to load e1 arrow next
into<00:44:59.359><c> some</c><00:45:00.319><c> you</c><00:45:00.400><c> know</c><00:45:00.640><c> temporary</c><00:45:00.960><c> location</c><00:45:01.440><c> or</c>

00:45:01.510 --> 00:45:01.520 align:start position:0%
into some you know temporary location or
 

00:45:01.520 --> 00:45:02.309 align:start position:0%
into some you know temporary location or
register

00:45:02.309 --> 00:45:02.319 align:start position:0%
register
 

00:45:02.319 --> 00:45:06.950 align:start position:0%
register
so<00:45:02.480><c> we'll</c><00:45:02.640><c> just</c><00:45:02.800><c> say</c><00:45:03.920><c> register</c><00:45:04.400><c> one</c><00:45:05.119><c> equals</c>

00:45:06.950 --> 00:45:06.960 align:start position:0%
so we'll just say register one equals
 

00:45:06.960 --> 00:45:11.829 align:start position:0%
so we'll just say register one equals
e1<00:45:07.359><c> arrow</c><00:45:07.680><c> next</c>

00:45:11.829 --> 00:45:11.839 align:start position:0%
 
 

00:45:11.839 --> 00:45:16.390 align:start position:0%
 
then<00:45:12.000><c> the</c><00:45:12.160><c> reader</c><00:45:12.480><c> needs</c><00:45:12.720><c> a</c><00:45:12.800><c> barrier</c>

00:45:16.390 --> 00:45:16.400 align:start position:0%
 
 

00:45:16.400 --> 00:45:18.309 align:start position:0%
 
and<00:45:16.560><c> then</c><00:45:16.720><c> the</c><00:45:16.880><c> reader</c><00:45:17.280><c> is</c><00:45:17.359><c> going</c><00:45:17.520><c> to</c><00:45:17.599><c> look</c><00:45:17.839><c> at</c>

00:45:18.309 --> 00:45:18.319 align:start position:0%
and then the reader is going to look at
 

00:45:18.319 --> 00:45:20.470 align:start position:0%
and then the reader is going to look at
r1

00:45:20.470 --> 00:45:20.480 align:start position:0%
r1
 

00:45:20.480 --> 00:45:24.630 align:start position:0%
r1
arrow<00:45:21.520><c> it's</c><00:45:21.760><c> content</c><00:45:22.400><c> and</c><00:45:22.480><c> r1</c><00:45:23.040><c> arrow</c><00:45:23.440><c> next</c>

00:45:24.630 --> 00:45:24.640 align:start position:0%
arrow it's content and r1 arrow next
 

00:45:24.640 --> 00:45:26.550 align:start position:0%
arrow it's content and r1 arrow next
and<00:45:24.800><c> what</c><00:45:24.960><c> this</c><00:45:25.200><c> barrier</c><00:45:25.599><c> on</c><00:45:25.680><c> the</c><00:45:25.839><c> reader</c><00:45:26.160><c> says</c>

00:45:26.550 --> 00:45:26.560 align:start position:0%
and what this barrier on the reader says
 

00:45:26.560 --> 00:45:28.230 align:start position:0%
and what this barrier on the reader says
is

00:45:28.230 --> 00:45:28.240 align:start position:0%
is
 

00:45:28.240 --> 00:45:31.589 align:start position:0%
is
don't<00:45:28.640><c> issue</c><00:45:29.040><c> any</c><00:45:29.280><c> of</c><00:45:29.440><c> these</c><00:45:29.760><c> loads</c>

00:45:31.589 --> 00:45:31.599 align:start position:0%
don't issue any of these loads
 

00:45:31.599 --> 00:45:34.470 align:start position:0%
don't issue any of these loads
until<00:45:32.319><c> after</c><00:45:32.720><c> we've</c><00:45:32.960><c> completed</c><00:45:33.440><c> this</c><00:45:33.680><c> load</c><00:45:34.319><c> so</c>

00:45:34.470 --> 00:45:34.480 align:start position:0%
until after we've completed this load so
 

00:45:34.480 --> 00:45:37.270 align:start position:0%
until after we've completed this load so
the<00:45:34.640><c> reader</c><00:45:34.960><c> is</c><00:45:35.119><c> going</c><00:45:35.200><c> to</c>

00:45:37.270 --> 00:45:37.280 align:start position:0%
the reader is going to
 

00:45:37.280 --> 00:45:39.670 align:start position:0%
the reader is going to
look<00:45:37.440><c> at</c><00:45:37.520><c> e1r</c><00:45:38.000><c> next</c><00:45:38.240><c> and</c><00:45:38.319><c> either</c><00:45:39.040><c> get</c><00:45:39.200><c> the</c><00:45:39.359><c> old</c>

00:45:39.670 --> 00:45:39.680 align:start position:0%
look at e1r next and either get the old
 

00:45:39.680 --> 00:45:42.630 align:start position:0%
look at e1r next and either get the old
e2<00:45:40.079><c> or</c><00:45:40.160><c> the</c><00:45:40.319><c> new</c><00:45:40.560><c> e2</c>

00:45:42.630 --> 00:45:42.640 align:start position:0%
e2 or the new e2
 

00:45:42.640 --> 00:45:45.270 align:start position:0%
e2 or the new e2
and<00:45:42.800><c> then</c><00:45:43.119><c> the</c><00:45:43.280><c> barrier</c><00:45:43.760><c> says</c><00:45:44.000><c> that</c><00:45:44.800><c> only</c><00:45:45.040><c> then</c>

00:45:45.270 --> 00:45:45.280 align:start position:0%
and then the barrier says that only then
 

00:45:45.280 --> 00:45:45.990 align:start position:0%
and then the barrier says that only then
are<00:45:45.359><c> we</c><00:45:45.520><c> going</c><00:45:45.599><c> to</c><00:45:45.680><c> start</c>

00:45:45.990 --> 00:45:46.000 align:start position:0%
are we going to start
 

00:45:46.000 --> 00:45:51.349 align:start position:0%
are we going to start
looking<00:45:46.400><c> at</c><00:45:47.119><c> only</c><00:45:47.440><c> after</c><00:45:47.680><c> we've</c><00:45:47.920><c> grabbed</c><00:45:48.240><c> this</c>

00:45:51.349 --> 00:45:51.359 align:start position:0%
 
 

00:45:51.359 --> 00:45:53.670 align:start position:0%
 
all<00:45:51.520><c> these</c><00:45:51.760><c> reads</c><00:45:52.079><c> have</c><00:45:52.160><c> to</c><00:45:52.319><c> execute</c><00:45:53.440><c> after</c>

00:45:53.670 --> 00:45:53.680 align:start position:0%
all these reads have to execute after
 

00:45:53.680 --> 00:45:56.150 align:start position:0%
all these reads have to execute after
this<00:45:54.000><c> read</c>

00:45:56.150 --> 00:45:56.160 align:start position:0%
this read
 

00:45:56.160 --> 00:45:57.510 align:start position:0%
this read
and<00:45:56.319><c> since</c><00:45:56.560><c> the</c><00:45:56.640><c> writer</c><00:45:56.960><c> guaranteed</c><00:45:57.440><c> to</c>

00:45:57.510 --> 00:45:57.520 align:start position:0%
and since the writer guaranteed to
 

00:45:57.520 --> 00:45:59.430 align:start position:0%
and since the writer guaranteed to
initialize<00:45:58.000><c> the</c><00:45:58.160><c> content</c>

00:45:59.430 --> 00:45:59.440 align:start position:0%
initialize the content
 

00:45:59.440 --> 00:46:02.470 align:start position:0%
initialize the content
before<00:46:01.119><c> committing</c><00:46:01.520><c> the</c><00:46:01.680><c> pointer</c><00:46:02.000><c> to</c><00:46:02.160><c> eat</c><00:46:02.319><c> the</c>

00:46:02.470 --> 00:46:02.480 align:start position:0%
before committing the pointer to eat the
 

00:46:02.480 --> 00:46:03.829 align:start position:0%
before committing the pointer to eat the
new<00:46:02.720><c> e2</c>

00:46:03.829 --> 00:46:03.839 align:start position:0%
new e2
 

00:46:03.839 --> 00:46:06.230 align:start position:0%
new e2
that<00:46:04.000><c> means</c><00:46:04.240><c> these</c><00:46:04.480><c> reads</c><00:46:05.119><c> if</c><00:46:05.280><c> this</c><00:46:05.920><c> pointer</c>

00:46:06.230 --> 00:46:06.240 align:start position:0%
that means these reads if this pointer
 

00:46:06.240 --> 00:46:08.150 align:start position:0%
that means these reads if this pointer
points<00:46:06.400><c> to</c><00:46:06.560><c> the</c><00:46:06.640><c> new</c><00:46:06.800><c> et2</c><00:46:07.599><c> that</c><00:46:07.760><c> means</c><00:46:08.000><c> these</c>

00:46:08.150 --> 00:46:08.160 align:start position:0%
points to the new et2 that means these
 

00:46:08.160 --> 00:46:09.430 align:start position:0%
points to the new et2 that means these
reads<00:46:08.400><c> are</c><00:46:08.480><c> guaranteed</c><00:46:08.960><c> to</c><00:46:09.119><c> see</c><00:46:09.280><c> the</c>

00:46:09.430 --> 00:46:09.440 align:start position:0%
reads are guaranteed to see the
 

00:46:09.440 --> 00:46:14.870 align:start position:0%
reads are guaranteed to see the
initialized<00:46:12.839><c> content</c>

00:46:14.870 --> 00:46:14.880 align:start position:0%
initialized content
 

00:46:14.880 --> 00:46:19.030 align:start position:0%
initialized content
okay<00:46:17.040><c> um</c><00:46:17.440><c> so</c><00:46:17.599><c> we</c><00:46:17.839><c> saw</c><00:46:18.079><c> a</c><00:46:18.079><c> little</c><00:46:18.240><c> bit</c><00:46:18.400><c> of</c><00:46:18.480><c> this</c>

00:46:19.030 --> 00:46:19.040 align:start position:0%
okay um so we saw a little bit of this
 

00:46:19.040 --> 00:46:22.710 align:start position:0%
okay um so we saw a little bit of this
how<00:46:19.200><c> can</c><00:46:19.440><c> you</c><00:46:20.000><c> i'm</c><00:46:20.240><c> sorry</c><00:46:21.520><c> yeah</c><00:46:21.680><c> i</c><00:46:21.760><c> was</c><00:46:21.920><c> just</c>

00:46:22.710 --> 00:46:22.720 align:start position:0%
how can you i'm sorry yeah i was just
 

00:46:22.720 --> 00:46:25.430 align:start position:0%
how can you i'm sorry yeah i was just
i<00:46:22.880><c> was</c><00:46:23.040><c> confused</c><00:46:23.440><c> about</c><00:46:23.599><c> a</c><00:46:23.680><c> reader</c><00:46:24.240><c> so</c><00:46:25.119><c> how</c><00:46:25.280><c> can</c>

00:46:25.430 --> 00:46:25.440 align:start position:0%
i was confused about a reader so how can
 

00:46:25.440 --> 00:46:25.990 align:start position:0%
i was confused about a reader so how can
you

00:46:25.990 --> 00:46:26.000 align:start position:0%
you
 

00:46:26.000 --> 00:46:29.270 align:start position:0%
you
read<00:46:27.040><c> one</c><00:46:28.560><c> around</c>

00:46:29.270 --> 00:46:29.280 align:start position:0%
read one around
 

00:46:29.280 --> 00:46:34.150 align:start position:0%
read one around
like<00:46:30.160><c> anything</c><00:46:30.800><c> before</c><00:46:31.280><c> you</c><00:46:32.000><c> read</c><00:46:32.319><c> our</c><00:46:32.560><c> one</c>

00:46:34.150 --> 00:46:34.160 align:start position:0%
like anything before you read our one
 

00:46:34.160 --> 00:46:37.589 align:start position:0%
like anything before you read our one
i<00:46:34.240><c> guess</c><00:46:34.480><c> that's</c><00:46:35.760><c> how</c><00:46:36.079><c> how</c><00:46:36.480><c> how</c><00:46:36.720><c> are</c><00:46:36.800><c> they</c>

00:46:37.589 --> 00:46:37.599 align:start position:0%
i guess that's how how how are they
 

00:46:37.599 --> 00:46:40.870 align:start position:0%
i guess that's how how how are they
so<00:46:39.680><c> yeah</c><00:46:39.839><c> i</c><00:46:39.920><c> guess</c><00:46:40.160><c> like</c>

00:46:40.870 --> 00:46:40.880 align:start position:0%
so yeah i guess like
 

00:46:40.880 --> 00:46:43.829 align:start position:0%
so yeah i guess like
if<00:46:41.200><c> even</c><00:46:41.520><c> if</c><00:46:41.680><c> it</c><00:46:42.319><c> reordered</c><00:46:42.880><c> that</c><00:46:43.200><c> how</c><00:46:43.440><c> would</c>

00:46:43.829 --> 00:46:43.839 align:start position:0%
if even if it reordered that how would
 

00:46:43.839 --> 00:46:45.589 align:start position:0%
if even if it reordered that how would
how'd<00:46:44.160><c> it</c><00:46:44.319><c> be</c><00:46:44.560><c> able</c><00:46:44.800><c> to</c><00:46:45.040><c> read</c>

00:46:45.589 --> 00:46:45.599 align:start position:0%
how'd it be able to read
 

00:46:45.599 --> 00:46:49.190 align:start position:0%
how'd it be able to read
r1x<00:46:46.960><c> before</c><00:46:47.440><c> it</c><00:46:47.680><c> read</c><00:46:48.560><c> he</c><00:46:48.720><c> won</c>

00:46:49.190 --> 00:46:49.200 align:start position:0%
r1x before it read he won
 

00:46:49.200 --> 00:46:54.309 align:start position:0%
r1x before it read he won
next<00:46:51.200><c> uh</c>

00:46:54.309 --> 00:46:54.319 align:start position:0%
 
 

00:46:54.319 --> 00:46:59.589 align:start position:0%
 
you<00:46:54.880><c> uh</c><00:46:55.280><c> i</c><00:46:55.359><c> think</c><00:46:55.520><c> you've</c><00:46:55.680><c> stumped</c><00:46:56.079><c> me</c><00:46:56.640><c> um</c>

00:46:59.589 --> 00:46:59.599 align:start position:0%
 
 

00:46:59.599 --> 00:47:01.109 align:start position:0%
 
yeah<00:46:59.839><c> i</c><00:46:59.920><c> mean</c><00:47:00.319><c> what</c><00:47:00.480><c> you're</c><00:47:00.560><c> pointing</c><00:47:00.880><c> out</c><00:47:01.040><c> is</c>

00:47:01.109 --> 00:47:01.119 align:start position:0%
yeah i mean what you're pointing out is
 

00:47:01.119 --> 00:47:02.069 align:start position:0%
yeah i mean what you're pointing out is
that<00:47:01.200><c> before</c><00:47:01.440><c> you</c><00:47:01.599><c> even</c><00:47:01.760><c> know</c><00:47:01.920><c> what</c><00:47:02.000><c> the</c>

00:47:02.069 --> 00:47:02.079 align:start position:0%
that before you even know what the
 

00:47:02.079 --> 00:47:03.430 align:start position:0%
that before you even know what the
pointer<00:47:02.560><c> is</c>

00:47:03.430 --> 00:47:03.440 align:start position:0%
pointer is
 

00:47:03.440 --> 00:47:05.190 align:start position:0%
pointer is
uh<00:47:03.839><c> you</c><00:47:04.000><c> can't</c><00:47:04.160><c> possibly</c><00:47:04.560><c> actually</c><00:47:04.800><c> issue</c><00:47:05.040><c> the</c>

00:47:05.190 --> 00:47:05.200 align:start position:0%
uh you can't possibly actually issue the
 

00:47:05.200 --> 00:47:06.630 align:start position:0%
uh you can't possibly actually issue the
reads<00:47:05.920><c> the</c>

00:47:06.630 --> 00:47:06.640 align:start position:0%
reads the
 

00:47:06.640 --> 00:47:11.109 align:start position:0%
reads the
um<00:47:08.800><c> a</c><00:47:09.520><c> a</c><00:47:09.680><c> possibility</c>

00:47:11.109 --> 00:47:11.119 align:start position:0%
um a a possibility
 

00:47:11.119 --> 00:47:13.270 align:start position:0%
um a a possibility
is<00:47:11.280><c> that</c><00:47:12.079><c> whatever</c><00:47:12.400><c> this</c><00:47:12.560><c> pointer</c><00:47:12.880><c> points</c><00:47:13.119><c> to</c>

00:47:13.270 --> 00:47:13.280 align:start position:0%
is that whatever this pointer points to
 

00:47:13.280 --> 00:47:15.990 align:start position:0%
is that whatever this pointer points to
maybe<00:47:13.520><c> is</c><00:47:13.760><c> already</c><00:47:14.319><c> cached</c><00:47:14.800><c> on</c><00:47:14.880><c> this</c><00:47:15.119><c> core</c>

00:47:15.990 --> 00:47:16.000 align:start position:0%
maybe is already cached on this core
 

00:47:16.000 --> 00:47:17.589 align:start position:0%
maybe is already cached on this core
due<00:47:16.160><c> to</c><00:47:16.319><c> some</c><00:47:16.560><c> maybe</c><00:47:16.800><c> you</c><00:47:16.880><c> know</c><00:47:17.040><c> this</c><00:47:17.280><c> memory</c>

00:47:17.589 --> 00:47:17.599 align:start position:0%
due to some maybe you know this memory
 

00:47:17.599 --> 00:47:19.510 align:start position:0%
due to some maybe you know this memory
was<00:47:17.839><c> had</c><00:47:18.000><c> been</c><00:47:18.560><c> you</c><00:47:18.720><c> know</c>

00:47:19.510 --> 00:47:19.520 align:start position:0%
was had been you know
 

00:47:19.520 --> 00:47:20.870 align:start position:0%
was had been you know
a<00:47:19.599><c> minute</c><00:47:19.839><c> ago</c><00:47:20.079><c> used</c><00:47:20.319><c> for</c><00:47:20.400><c> something</c><00:47:20.720><c> else</c>

00:47:20.870 --> 00:47:20.880 align:start position:0%
a minute ago used for something else
 

00:47:20.880 --> 00:47:22.710 align:start position:0%
a minute ago used for something else
something<00:47:21.200><c> totally</c><00:47:21.599><c> else</c><00:47:22.319><c> and</c>

00:47:22.710 --> 00:47:22.720 align:start position:0%
something totally else and
 

00:47:22.720 --> 00:47:25.030 align:start position:0%
something totally else and
we<00:47:22.880><c> have</c><00:47:23.440><c> an</c><00:47:23.599><c> old</c><00:47:23.920><c> version</c><00:47:24.240><c> of</c><00:47:24.319><c> this</c><00:47:24.559><c> cached</c><00:47:24.880><c> on</c>

00:47:25.030 --> 00:47:25.040 align:start position:0%
we have an old version of this cached on
 

00:47:25.040 --> 00:47:26.230 align:start position:0%
we have an old version of this cached on
our<00:47:25.200><c> core</c>

00:47:26.230 --> 00:47:26.240 align:start position:0%
our core
 

00:47:26.240 --> 00:47:29.750 align:start position:0%
our core
um<00:47:27.520><c> at</c><00:47:27.760><c> the</c><00:47:27.839><c> address</c><00:47:28.480><c> at</c><00:47:28.640><c> this</c><00:47:28.880><c> address</c><00:47:29.359><c> but</c>

00:47:29.750 --> 00:47:29.760 align:start position:0%
um at the address at this address but
 

00:47:29.760 --> 00:47:32.950 align:start position:0%
um at the address at this address but
for<00:47:29.920><c> some</c><00:47:30.079><c> previous</c><00:47:30.480><c> use</c><00:47:30.640><c> of</c><00:47:30.720><c> the</c><00:47:30.800><c> memory</c><00:47:32.480><c> if</c>

00:47:32.950 --> 00:47:32.960 align:start position:0%
for some previous use of the memory if
 

00:47:32.960 --> 00:47:36.150 align:start position:0%
for some previous use of the memory if
this<00:47:33.280><c> read</c><00:47:33.680><c> was</c><00:47:33.920><c> to</c><00:47:34.079><c> use</c><00:47:34.640><c> the</c><00:47:35.200><c> old</c><00:47:35.680><c> cached</c>

00:47:36.150 --> 00:47:36.160 align:start position:0%
this read was to use the old cached
 

00:47:36.160 --> 00:47:37.510 align:start position:0%
this read was to use the old cached
value

00:47:37.510 --> 00:47:37.520 align:start position:0%
value
 

00:47:37.520 --> 00:47:39.430 align:start position:0%
value
i'm<00:47:37.680><c> not</c><00:47:37.839><c> sure</c><00:47:38.000><c> this</c><00:47:38.160><c> can</c><00:47:38.319><c> happen</c><00:47:39.119><c> i'm</c><00:47:39.280><c> just</c>

00:47:39.430 --> 00:47:39.440 align:start position:0%
i'm not sure this can happen i'm just
 

00:47:39.440 --> 00:47:41.109 align:start position:0%
i'm not sure this can happen i'm just
making<00:47:39.680><c> this</c><00:47:39.839><c> up</c><00:47:40.000><c> for</c><00:47:40.160><c> you</c><00:47:40.480><c> but</c><00:47:40.640><c> if</c><00:47:40.800><c> this</c><00:47:40.960><c> read</c>

00:47:41.109 --> 00:47:41.119 align:start position:0%
making this up for you but if this read
 

00:47:41.119 --> 00:47:42.630 align:start position:0%
making this up for you but if this read
could<00:47:41.280><c> use</c><00:47:41.440><c> the</c><00:47:41.599><c> old</c><00:47:41.760><c> cache</c><00:47:42.079><c> value</c><00:47:42.400><c> then</c><00:47:42.480><c> we'd</c>

00:47:42.630 --> 00:47:42.640 align:start position:0%
could use the old cache value then we'd
 

00:47:42.640 --> 00:47:45.750 align:start position:0%
could use the old cache value then we'd
be<00:47:42.800><c> in</c><00:47:42.880><c> big</c><00:47:43.119><c> trouble</c>

00:47:45.750 --> 00:47:45.760 align:start position:0%
 
 

00:47:45.760 --> 00:47:47.270 align:start position:0%
 
and<00:47:46.240><c> i</c><00:47:46.319><c> don't</c><00:47:46.480><c> know</c><00:47:46.640><c> if</c><00:47:46.720><c> the</c><00:47:46.800><c> machine</c><00:47:47.119><c> would</c>

00:47:47.270 --> 00:47:47.280 align:start position:0%
and i don't know if the machine would
 

00:47:47.280 --> 00:47:50.829 align:start position:0%
and i don't know if the machine would
actually<00:47:47.520><c> do</c><00:47:47.760><c> that</c><00:47:48.400><c> or</c><00:47:48.640><c> whether</c>

00:47:50.829 --> 00:47:50.839 align:start position:0%
actually do that or whether
 

00:47:50.839 --> 00:47:52.630 align:start position:0%
actually do that or whether
um

00:47:52.630 --> 00:47:52.640 align:start position:0%
um
 

00:47:52.640 --> 00:47:56.309 align:start position:0%
um
um<00:47:53.839><c> another</c><00:47:54.240><c> possibility</c><00:47:54.800><c> is</c><00:47:54.960><c> that</c><00:47:55.119><c> the</c>

00:47:56.309 --> 00:47:56.319 align:start position:0%
um another possibility is that the
 

00:47:56.319 --> 00:48:02.470 align:start position:0%
um another possibility is that the
compiler<00:47:57.200><c> you</c><00:47:57.359><c> know</c>

00:48:02.470 --> 00:48:02.480 align:start position:0%
 
 

00:48:02.480 --> 00:48:04.710 align:start position:0%
 
the<00:48:02.640><c> real</c><00:48:02.880><c> answers</c><00:48:03.200><c> i</c><00:48:03.280><c> don't</c><00:48:03.440><c> know</c><00:48:04.400><c> i</c><00:48:04.559><c> should</c>

00:48:04.710 --> 00:48:04.720 align:start position:0%
the real answers i don't know i should
 

00:48:04.720 --> 00:48:06.150 align:start position:0%
the real answers i don't know i should
go<00:48:04.880><c> off</c><00:48:05.040><c> and</c><00:48:05.119><c> think</c><00:48:05.280><c> about</c><00:48:05.599><c> uh</c><00:48:05.920><c> what</c><00:48:06.079><c> a</c>

00:48:06.150 --> 00:48:06.160 align:start position:0%
go off and think about uh what a
 

00:48:06.160 --> 00:48:08.230 align:start position:0%
go off and think about uh what a
specific<00:48:06.640><c> example</c><00:48:06.960><c> would</c><00:48:07.119><c> be</c>

00:48:08.230 --> 00:48:08.240 align:start position:0%
specific example would be
 

00:48:08.240 --> 00:48:10.870 align:start position:0%
specific example would be
okay<00:48:08.720><c> okay</c><00:48:08.960><c> i</c><00:48:09.040><c> see</c><00:48:09.200><c> the</c><00:48:09.359><c> cash</c><00:48:09.920><c> version</c><00:48:10.640><c> makes</c>

00:48:10.870 --> 00:48:10.880 align:start position:0%
okay okay i see the cash version makes
 

00:48:10.880 --> 00:48:11.430 align:start position:0%
okay okay i see the cash version makes
sense

00:48:11.430 --> 00:48:11.440 align:start position:0%
sense
 

00:48:11.440 --> 00:48:13.270 align:start position:0%
sense
yes<00:48:11.760><c> yeah</c><00:48:11.920><c> i'm</c><00:48:12.000><c> not</c><00:48:12.240><c> actually</c><00:48:12.640><c> completely</c>

00:48:13.270 --> 00:48:13.280 align:start position:0%
yes yeah i'm not actually completely
 

00:48:13.280 --> 00:48:14.950 align:start position:0%
yes yeah i'm not actually completely
sure<00:48:13.520><c> it</c><00:48:13.599><c> could</c><00:48:13.920><c> could</c><00:48:14.160><c> happen</c>

00:48:14.950 --> 00:48:14.960 align:start position:0%
sure it could could happen
 

00:48:14.960 --> 00:48:18.870 align:start position:0%
sure it could could happen
in<00:48:15.119><c> real</c><00:48:15.359><c> life</c><00:48:16.000><c> um</c>

00:48:18.870 --> 00:48:18.880 align:start position:0%
 
 

00:48:18.880 --> 00:48:22.870 align:start position:0%
 
that's<00:48:19.119><c> a</c><00:48:19.200><c> good</c><00:48:19.359><c> question</c>

00:48:22.870 --> 00:48:22.880 align:start position:0%
 
 

00:48:22.880 --> 00:48:26.549 align:start position:0%
 
okay<00:48:24.240><c> um</c><00:48:25.119><c> so</c><00:48:25.280><c> that's</c><00:48:25.440><c> the</c><00:48:25.599><c> second</c><00:48:25.920><c> idea</c>

00:48:26.549 --> 00:48:26.559 align:start position:0%
okay um so that's the second idea
 

00:48:26.559 --> 00:48:28.069 align:start position:0%
okay um so that's the second idea
the<00:48:26.800><c> third</c><00:48:27.119><c> problem</c><00:48:27.440><c> we</c><00:48:27.520><c> have</c><00:48:27.760><c> which</c><00:48:27.920><c> is</c>

00:48:28.069 --> 00:48:28.079 align:start position:0%
the third problem we have which is
 

00:48:28.079 --> 00:48:29.750 align:start position:0%
the third problem we have which is
something<00:48:28.559><c> somebody</c><00:48:28.960><c> raised</c><00:48:29.280><c> before</c>

00:48:29.750 --> 00:48:29.760 align:start position:0%
something somebody raised before
 

00:48:29.760 --> 00:48:34.630 align:start position:0%
something somebody raised before
is<00:48:29.839><c> that</c><00:48:30.480><c> the</c><00:48:30.720><c> writer</c><00:48:32.640><c> is</c><00:48:32.800><c> going</c><00:48:32.880><c> to</c><00:48:33.040><c> swap</c><00:48:33.520><c> the</c>

00:48:34.630 --> 00:48:34.640 align:start position:0%
is that the writer is going to swap the
 

00:48:34.640 --> 00:48:36.549 align:start position:0%
is that the writer is going to swap the
e1<00:48:34.960><c> pointer</c><00:48:35.280><c> to</c><00:48:35.440><c> point</c><00:48:35.599><c> to</c><00:48:35.680><c> the</c><00:48:35.760><c> new</c><00:48:35.920><c> e2</c><00:48:36.319><c> but</c>

00:48:36.549 --> 00:48:36.559 align:start position:0%
e1 pointer to point to the new e2 but
 

00:48:36.559 --> 00:48:38.150 align:start position:0%
e1 pointer to point to the new e2 but
there<00:48:36.800><c> could</c><00:48:36.960><c> be</c><00:48:37.119><c> readers</c>

00:48:38.150 --> 00:48:38.160 align:start position:0%
there could be readers
 

00:48:38.160 --> 00:48:40.309 align:start position:0%
there could be readers
um<00:48:38.960><c> you</c><00:48:39.040><c> know</c><00:48:39.200><c> who</c><00:48:39.440><c> started</c><00:48:39.760><c> looking</c><00:48:40.000><c> at</c><00:48:40.160><c> who</c>

00:48:40.309 --> 00:48:40.319 align:start position:0%
um you know who started looking at who
 

00:48:40.319 --> 00:48:41.510 align:start position:0%
um you know who started looking at who
followed<00:48:40.559><c> this</c><00:48:40.720><c> point</c><00:48:40.880><c> or</c><00:48:40.960><c> just</c><00:48:41.119><c> before</c><00:48:41.359><c> we</c>

00:48:41.510 --> 00:48:41.520 align:start position:0%
followed this point or just before we
 

00:48:41.520 --> 00:48:42.790 align:start position:0%
followed this point or just before we
change<00:48:41.760><c> the</c><00:48:41.839><c> writer</c><00:48:42.160><c> change</c><00:48:42.480><c> it</c>

00:48:42.790 --> 00:48:42.800 align:start position:0%
change the writer change it
 

00:48:42.800 --> 00:48:45.829 align:start position:0%
change the writer change it
who<00:48:42.960><c> are</c><00:48:43.119><c> still</c><00:48:43.280><c> looking</c><00:48:43.520><c> at</c><00:48:43.680><c> e2</c>

00:48:45.829 --> 00:48:45.839 align:start position:0%
who are still looking at e2
 

00:48:45.839 --> 00:48:47.349 align:start position:0%
who are still looking at e2
we<00:48:46.000><c> need</c><00:48:46.160><c> to</c><00:48:46.319><c> free</c><00:48:46.559><c> this</c><00:48:46.720><c> list</c><00:48:47.040><c> element</c>

00:48:47.349 --> 00:48:47.359 align:start position:0%
we need to free this list element
 

00:48:47.359 --> 00:48:49.349 align:start position:0%
we need to free this list element
someday

00:48:49.349 --> 00:48:49.359 align:start position:0%
someday
 

00:48:49.359 --> 00:48:50.790 align:start position:0%
someday
but<00:48:49.520><c> we</c><00:48:49.760><c> better</c><00:48:49.920><c> not</c><00:48:50.079><c> free</c><00:48:50.319><c> it</c><00:48:50.480><c> while</c><00:48:50.640><c> some</c>

00:48:50.790 --> 00:48:50.800 align:start position:0%
but we better not free it while some
 

00:48:50.800 --> 00:48:52.230 align:start position:0%
but we better not free it while some
reader's<00:48:51.119><c> still</c><00:48:51.280><c> using</c><00:48:51.599><c> it</c><00:48:51.680><c> so</c><00:48:51.839><c> we</c><00:48:51.920><c> need</c><00:48:52.079><c> to</c>

00:48:52.230 --> 00:48:52.240 align:start position:0%
reader's still using it so we need to
 

00:48:52.240 --> 00:48:53.910 align:start position:0%
reader's still using it so we need to
somehow<00:48:52.559><c> wait</c><00:48:52.720><c> until</c><00:48:53.040><c> the</c><00:48:53.119><c> last</c><00:48:53.440><c> reader</c><00:48:53.760><c> has</c>

00:48:53.910 --> 00:48:53.920 align:start position:0%
somehow wait until the last reader has
 

00:48:53.920 --> 00:48:58.390 align:start position:0%
somehow wait until the last reader has
finished<00:48:54.319><c> using</c><00:48:54.640><c> e2</c><00:48:55.119><c> before</c><00:48:55.359><c> we</c><00:48:55.520><c> can</c><00:48:55.680><c> free</c><00:48:56.000><c> it</c>

00:48:58.390 --> 00:48:58.400 align:start position:0%
 
 

00:48:58.400 --> 00:49:00.069 align:start position:0%
 
now<00:48:58.559><c> that's</c><00:48:58.880><c> the</c><00:48:59.200><c> sort</c><00:48:59.359><c> of</c><00:48:59.520><c> third</c><00:48:59.760><c> and</c><00:48:59.839><c> final</c>

00:49:00.069 --> 00:49:00.079 align:start position:0%
now that's the sort of third and final
 

00:49:00.079 --> 00:49:01.750 align:start position:0%
now that's the sort of third and final
main<00:49:00.400><c> problem</c><00:49:01.280><c> that</c>

00:49:01.750 --> 00:49:01.760 align:start position:0%
main problem that
 

00:49:01.760 --> 00:49:04.150 align:start position:0%
main problem that
rcu<00:49:02.240><c> solves</c><00:49:02.800><c> is</c><00:49:03.200><c> how</c><00:49:03.440><c> long</c><00:49:03.599><c> should</c><00:49:03.760><c> the</c><00:49:03.839><c> writer</c>

00:49:04.150 --> 00:49:04.160 align:start position:0%
rcu solves is how long should the writer
 

00:49:04.160 --> 00:49:05.670 align:start position:0%
rcu solves is how long should the writer
wait<00:49:04.720><c> before</c><00:49:05.040><c> it</c>

00:49:05.670 --> 00:49:05.680 align:start position:0%
wait before it
 

00:49:05.680 --> 00:49:08.790 align:start position:0%
wait before it
frees<00:49:06.079><c> e2</c>

00:49:08.790 --> 00:49:08.800 align:start position:0%
 
 

00:49:08.800 --> 00:49:10.309 align:start position:0%
 
there's<00:49:09.280><c> you</c><00:49:09.359><c> could</c><00:49:09.520><c> imagine</c><00:49:09.920><c> a</c><00:49:10.000><c> number</c><00:49:10.240><c> of</c>

00:49:10.309 --> 00:49:10.319 align:start position:0%
there's you could imagine a number of
 

00:49:10.319 --> 00:49:12.069 align:start position:0%
there's you could imagine a number of
ways<00:49:10.559><c> of</c><00:49:10.640><c> doing</c><00:49:10.800><c> this</c>

00:49:12.069 --> 00:49:12.079 align:start position:0%
ways of doing this
 

00:49:12.079 --> 00:49:13.430 align:start position:0%
ways of doing this
for<00:49:12.240><c> example</c><00:49:12.800><c> we</c><00:49:12.960><c> could</c><00:49:13.040><c> put</c><00:49:13.200><c> a</c><00:49:13.280><c> little</c>

00:49:13.430 --> 00:49:13.440 align:start position:0%
for example we could put a little
 

00:49:13.440 --> 00:49:15.270 align:start position:0%
for example we could put a little
reference<00:49:13.760><c> count</c><00:49:14.079><c> in</c><00:49:14.160><c> every</c><00:49:14.400><c> list</c><00:49:14.640><c> element</c>

00:49:15.270 --> 00:49:15.280 align:start position:0%
reference count in every list element
 

00:49:15.280 --> 00:49:16.870 align:start position:0%
reference count in every list element
and<00:49:15.359><c> have</c><00:49:15.520><c> readers</c><00:49:15.920><c> increment</c><00:49:16.400><c> it</c><00:49:16.720><c> and</c>

00:49:16.870 --> 00:49:16.880 align:start position:0%
and have readers increment it and
 

00:49:16.880 --> 00:49:18.309 align:start position:0%
and have readers increment it and
operators<00:49:17.520><c> wait</c>

00:49:18.309 --> 00:49:18.319 align:start position:0%
operators wait
 

00:49:18.319 --> 00:49:19.510 align:start position:0%
operators wait
readers<00:49:18.640><c> increment</c><00:49:19.040><c> it</c><00:49:19.119><c> when</c><00:49:19.200><c> they</c><00:49:19.359><c> start</c>

00:49:19.510 --> 00:49:19.520 align:start position:0%
readers increment it when they start
 

00:49:19.520 --> 00:49:21.670 align:start position:0%
readers increment it when they start
using<00:49:19.760><c> a</c><00:49:19.839><c> list</c><00:49:20.160><c> element</c><00:49:20.880><c> decrement</c>

00:49:21.670 --> 00:49:21.680 align:start position:0%
using a list element decrement
 

00:49:21.680 --> 00:49:23.030 align:start position:0%
using a list element decrement
it<00:49:21.839><c> when</c><00:49:22.000><c> they're</c><00:49:22.160><c> done</c><00:49:22.400><c> using</c><00:49:22.640><c> the</c><00:49:22.720><c> list</c>

00:49:23.030 --> 00:49:23.040 align:start position:0%
it when they're done using the list
 

00:49:23.040 --> 00:49:25.430 align:start position:0%
it when they're done using the list
element<00:49:23.359><c> and</c><00:49:23.440><c> have</c><00:49:23.599><c> the</c><00:49:23.760><c> writer</c><00:49:24.079><c> wait</c><00:49:24.400><c> for</c><00:49:24.559><c> the</c>

00:49:25.430 --> 00:49:25.440 align:start position:0%
element and have the writer wait for the
 

00:49:25.440 --> 00:49:27.030 align:start position:0%
element and have the writer wait for the
reference<00:49:25.839><c> count</c><00:49:26.079><c> on</c><00:49:26.240><c> this</c><00:49:26.400><c> element</c><00:49:26.640><c> to</c><00:49:26.720><c> go</c><00:49:26.880><c> to</c>

00:49:27.030 --> 00:49:27.040 align:start position:0%
reference count on this element to go to
 

00:49:27.040 --> 00:49:29.349 align:start position:0%
reference count on this element to go to
zero<00:49:28.079><c> we</c><00:49:28.240><c> would</c><00:49:28.400><c> regret</c><00:49:28.720><c> that</c><00:49:28.960><c> instantly</c>

00:49:29.349 --> 00:49:29.359 align:start position:0%
zero we would regret that instantly
 

00:49:29.359 --> 00:49:30.150 align:start position:0%
zero we would regret that instantly
because

00:49:30.150 --> 00:49:30.160 align:start position:0%
because
 

00:49:30.160 --> 00:49:33.030 align:start position:0%
because
the<00:49:30.400><c> whole</c><00:49:31.680><c> point</c><00:49:31.920><c> of</c><00:49:32.000><c> rcu</c><00:49:32.559><c> is</c><00:49:32.640><c> to</c><00:49:32.800><c> allow</c>

00:49:33.030 --> 00:49:33.040 align:start position:0%
the whole point of rcu is to allow
 

00:49:33.040 --> 00:49:33.750 align:start position:0%
the whole point of rcu is to allow
reading

00:49:33.750 --> 00:49:33.760 align:start position:0%
reading
 

00:49:33.760 --> 00:49:36.390 align:start position:0%
reading
without<00:49:34.400><c> writing</c><00:49:35.440><c> um</c><00:49:35.680><c> because</c><00:49:35.920><c> we</c><00:49:36.000><c> know</c><00:49:36.160><c> that</c>

00:49:36.390 --> 00:49:36.400 align:start position:0%
without writing um because we know that
 

00:49:36.400 --> 00:49:36.950 align:start position:0%
without writing um because we know that
if

00:49:36.950 --> 00:49:36.960 align:start position:0%
if
 

00:49:36.960 --> 00:49:40.150 align:start position:0%
if
lots<00:49:37.200><c> of</c><00:49:37.520><c> readers</c><00:49:38.000><c> are</c><00:49:38.960><c> uh</c><00:49:39.680><c> changing</c><00:49:40.000><c> this</c>

00:49:40.150 --> 00:49:40.160 align:start position:0%
lots of readers are uh changing this
 

00:49:40.160 --> 00:49:41.349 align:start position:0%
lots of readers are uh changing this
reference<00:49:40.480><c> account</c><00:49:40.640><c> it's</c><00:49:40.800><c> gonna</c><00:49:40.880><c> be</c><00:49:41.040><c> terribly</c>

00:49:41.349 --> 00:49:41.359 align:start position:0%
reference account it's gonna be terribly
 

00:49:41.359 --> 00:49:42.390 align:start position:0%
reference account it's gonna be terribly
expensive

00:49:42.390 --> 00:49:42.400 align:start position:0%
expensive
 

00:49:42.400 --> 00:49:44.309 align:start position:0%
expensive
to<00:49:42.559><c> do</c><00:49:42.720><c> the</c><00:49:42.880><c> rights</c><00:49:43.440><c> involved</c><00:49:43.839><c> in</c><00:49:43.920><c> maintaining</c>

00:49:44.309 --> 00:49:44.319 align:start position:0%
to do the rights involved in maintaining
 

00:49:44.319 --> 00:49:45.829 align:start position:0%
to do the rights involved in maintaining
a<00:49:44.400><c> reference</c><00:49:44.720><c> count</c><00:49:45.040><c> so</c><00:49:45.119><c> we</c><00:49:45.359><c> absolutely</c><00:49:45.680><c> don't</c>

00:49:45.829 --> 00:49:45.839 align:start position:0%
a reference count so we absolutely don't
 

00:49:45.839 --> 00:49:47.430 align:start position:0%
a reference count so we absolutely don't
want<00:49:46.000><c> reference</c><00:49:46.400><c> counts</c>

00:49:47.430 --> 00:49:47.440 align:start position:0%
want reference counts
 

00:49:47.440 --> 00:49:48.870 align:start position:0%
want reference counts
another<00:49:47.680><c> possibility</c><00:49:48.240><c> would</c><00:49:48.480><c> be</c><00:49:48.640><c> use</c><00:49:48.800><c> a</c>

00:49:48.870 --> 00:49:48.880 align:start position:0%
another possibility would be use a
 

00:49:48.880 --> 00:49:52.309 align:start position:0%
another possibility would be use a
garbage<00:49:49.280><c> collected</c><00:49:49.760><c> language</c>

00:49:52.309 --> 00:49:52.319 align:start position:0%
 
 

00:49:52.319 --> 00:49:54.309 align:start position:0%
 
and<00:49:52.559><c> in</c><00:49:52.640><c> a</c><00:49:52.720><c> garbage</c><00:49:53.040><c> collected</c><00:49:53.359><c> language</c><00:49:54.240><c> you</c>

00:49:54.309 --> 00:49:54.319 align:start position:0%
and in a garbage collected language you
 

00:49:54.319 --> 00:49:55.990 align:start position:0%
and in a garbage collected language you
don't<00:49:54.559><c> ever</c><00:49:54.720><c> free</c><00:49:54.960><c> anything</c><00:49:55.359><c> explicitly</c>

00:49:55.990 --> 00:49:56.000 align:start position:0%
don't ever free anything explicitly
 

00:49:56.000 --> 00:49:56.470 align:start position:0%
don't ever free anything explicitly
instead

00:49:56.470 --> 00:49:56.480 align:start position:0%
instead
 

00:49:56.480 --> 00:49:57.910 align:start position:0%
instead
the<00:49:56.559><c> garbage</c><00:49:57.040><c> collector</c><00:49:57.599><c> does</c><00:49:57.839><c> the</c>

00:49:57.910 --> 00:49:57.920 align:start position:0%
the garbage collector does the
 

00:49:57.920 --> 00:49:59.589 align:start position:0%
the garbage collector does the
bookkeeping<00:49:58.480><c> required</c>

00:49:59.589 --> 00:49:59.599 align:start position:0%
bookkeeping required
 

00:49:59.599 --> 00:50:02.470 align:start position:0%
bookkeeping required
to<00:49:59.920><c> decide</c><00:50:00.400><c> if</c><00:50:00.640><c> any</c><00:50:01.200><c> thread</c><00:50:01.680><c> for</c><00:50:01.920><c> example</c><00:50:02.319><c> or</c>

00:50:02.470 --> 00:50:02.480 align:start position:0%
to decide if any thread for example or
 

00:50:02.480 --> 00:50:03.750 align:start position:0%
to decide if any thread for example or
any<00:50:02.720><c> data</c><00:50:03.040><c> structure</c>

00:50:03.750 --> 00:50:03.760 align:start position:0%
any data structure
 

00:50:03.760 --> 00:50:05.910 align:start position:0%
any data structure
has<00:50:04.000><c> a</c><00:50:04.240><c> still</c><00:50:04.480><c> has</c><00:50:04.640><c> a</c><00:50:04.720><c> reference</c><00:50:05.119><c> to</c><00:50:05.280><c> this</c>

00:50:05.910 --> 00:50:05.920 align:start position:0%
has a still has a reference to this
 

00:50:05.920 --> 00:50:07.670 align:start position:0%
has a still has a reference to this
element<00:50:06.480><c> and</c><00:50:06.640><c> the</c><00:50:06.720><c> garbage</c><00:50:07.119><c> collector</c><00:50:07.440><c> once</c>

00:50:07.670 --> 00:50:07.680 align:start position:0%
element and the garbage collector once
 

00:50:07.680 --> 00:50:08.790 align:start position:0%
element and the garbage collector once
it<00:50:07.839><c> proves</c>

00:50:08.790 --> 00:50:08.800 align:start position:0%
it proves
 

00:50:08.800 --> 00:50:10.870 align:start position:0%
it proves
this<00:50:09.040><c> element</c><00:50:09.520><c> can't</c><00:50:09.760><c> possibly</c><00:50:10.240><c> be</c><00:50:10.400><c> ever</c><00:50:10.640><c> used</c>

00:50:10.870 --> 00:50:10.880 align:start position:0%
this element can't possibly be ever used
 

00:50:10.880 --> 00:50:12.710 align:start position:0%
this element can't possibly be ever used
again<00:50:11.680><c> only</c><00:50:11.920><c> then</c><00:50:12.079><c> will</c><00:50:12.240><c> the</c><00:50:12.319><c> garbage</c>

00:50:12.710 --> 00:50:12.720 align:start position:0%
again only then will the garbage
 

00:50:12.720 --> 00:50:13.910 align:start position:0%
again only then will the garbage
collector<00:50:13.119><c> free</c><00:50:13.359><c> this</c>

00:50:13.910 --> 00:50:13.920 align:start position:0%
collector free this
 

00:50:13.920 --> 00:50:17.190 align:start position:0%
collector free this
so<00:50:14.160><c> that's</c><00:50:14.400><c> another</c><00:50:15.920><c> quite</c><00:50:16.240><c> possibly</c>

00:50:17.190 --> 00:50:17.200 align:start position:0%
so that's another quite possibly
 

00:50:17.200 --> 00:50:20.150 align:start position:0%
so that's another quite possibly
reasonable<00:50:19.040><c> scheme</c><00:50:19.359><c> for</c><00:50:19.440><c> deciding</c><00:50:19.839><c> when</c><00:50:20.000><c> to</c>

00:50:20.150 --> 00:50:20.160 align:start position:0%
reasonable scheme for deciding when to
 

00:50:20.160 --> 00:50:21.910 align:start position:0%
reasonable scheme for deciding when to
free<00:50:20.400><c> this</c><00:50:20.559><c> list</c><00:50:20.800><c> element</c>

00:50:21.910 --> 00:50:21.920 align:start position:0%
free this list element
 

00:50:21.920 --> 00:50:24.710 align:start position:0%
free this list element
you<00:50:22.000><c> know</c><00:50:22.559><c> linux</c><00:50:22.960><c> which</c><00:50:23.200><c> uses</c><00:50:23.520><c> rcu</c><00:50:24.480><c> is</c><00:50:24.559><c> not</c>

00:50:24.710 --> 00:50:24.720 align:start position:0%
you know linux which uses rcu is not
 

00:50:24.720 --> 00:50:26.309 align:start position:0%
you know linux which uses rcu is not
written<00:50:24.960><c> in</c><00:50:25.040><c> a</c><00:50:25.119><c> garbage</c><00:50:25.440><c> collected</c><00:50:25.760><c> language</c>

00:50:26.309 --> 00:50:26.319 align:start position:0%
written in a garbage collected language
 

00:50:26.319 --> 00:50:27.589 align:start position:0%
written in a garbage collected language
so

00:50:27.589 --> 00:50:27.599 align:start position:0%
so
 

00:50:27.599 --> 00:50:29.190 align:start position:0%
so
and<00:50:28.079><c> we're</c><00:50:28.240><c> not</c><00:50:28.400><c> even</c><00:50:28.559><c> sure</c><00:50:28.800><c> the</c><00:50:28.880><c> garbage</c>

00:50:29.190 --> 00:50:29.200 align:start position:0%
and we're not even sure the garbage
 

00:50:29.200 --> 00:50:30.950 align:start position:0%
and we're not even sure the garbage
collection<00:50:29.760><c> would</c><00:50:30.000><c> be</c><00:50:30.319><c> would</c><00:50:30.559><c> improve</c>

00:50:30.950 --> 00:50:30.960 align:start position:0%
collection would be would improve
 

00:50:30.960 --> 00:50:34.230 align:start position:0%
collection would be would improve
performance<00:50:32.160><c> um</c><00:50:33.280><c> so</c><00:50:33.440><c> we</c><00:50:33.599><c> can't</c><00:50:33.839><c> use</c><00:50:34.079><c> a</c>

00:50:34.230 --> 00:50:34.240 align:start position:0%
performance um so we can't use a
 

00:50:34.240 --> 00:50:35.670 align:start position:0%
performance um so we can't use a
standard<00:50:34.559><c> garbage</c><00:50:34.880><c> collector</c><00:50:35.280><c> here</c><00:50:35.520><c> and</c>

00:50:35.670 --> 00:50:35.680 align:start position:0%
standard garbage collector here and
 

00:50:35.680 --> 00:50:38.309 align:start position:0%
standard garbage collector here and
instead

00:50:38.309 --> 00:50:38.319 align:start position:0%
 
 

00:50:38.319 --> 00:50:41.829 align:start position:0%
 
rcu<00:50:38.880><c> uses</c><00:50:39.119><c> another</c><00:50:40.480><c> uh</c>

00:50:41.829 --> 00:50:41.839 align:start position:0%
rcu uses another uh
 

00:50:41.839 --> 00:50:43.750 align:start position:0%
rcu uses another uh
sort<00:50:42.000><c> of</c><00:50:42.079><c> a</c><00:50:42.160><c> trick</c><00:50:42.960><c> that</c><00:50:43.119><c> works</c><00:50:43.359><c> well</c><00:50:43.599><c> in</c><00:50:43.680><c> the</c>

00:50:43.750 --> 00:50:43.760 align:start position:0%
sort of a trick that works well in the
 

00:50:43.760 --> 00:50:44.950 align:start position:0%
sort of a trick that works well in the
kernel<00:50:44.480><c> for</c>

00:50:44.950 --> 00:50:44.960 align:start position:0%
kernel for
 

00:50:44.960 --> 00:50:52.870 align:start position:0%
kernel for
delaying<00:50:45.760><c> freeze</c>

00:50:52.870 --> 00:50:52.880 align:start position:0%
 
 

00:50:52.880 --> 00:50:56.630 align:start position:0%
 
and<00:50:53.200><c> so</c><00:50:53.359><c> that</c>

00:50:56.630 --> 00:50:56.640 align:start position:0%
 
 

00:50:56.640 --> 00:50:58.870 align:start position:0%
 
idea<00:50:57.520><c> is</c><00:50:57.680><c> that</c><00:50:57.839><c> the</c><00:50:58.079><c> readers</c><00:50:58.400><c> and</c><00:50:58.480><c> writers</c>

00:50:58.870 --> 00:50:58.880 align:start position:0%
idea is that the readers and writers
 

00:50:58.880 --> 00:51:00.230 align:start position:0%
idea is that the readers and writers
have<00:50:59.040><c> to</c>

00:51:00.230 --> 00:51:00.240 align:start position:0%
have to
 

00:51:00.240 --> 00:51:02.390 align:start position:0%
have to
each<00:51:00.559><c> follow</c><00:51:00.880><c> a</c><00:51:01.040><c> rule</c><00:51:01.839><c> that</c><00:51:02.000><c> will</c><00:51:02.079><c> allow</c>

00:51:02.390 --> 00:51:02.400 align:start position:0%
each follow a rule that will allow
 

00:51:02.400 --> 00:51:03.829 align:start position:0%
each follow a rule that will allow
writers<00:51:02.720><c> to</c><00:51:03.040><c> delay</c>

00:51:03.829 --> 00:51:03.839 align:start position:0%
writers to delay
 

00:51:03.839 --> 00:51:08.950 align:start position:0%
writers to delay
the<00:51:04.000><c> free</c><00:51:06.839><c> readers</c><00:51:07.920><c> are</c><00:51:08.079><c> not</c><00:51:08.240><c> allowed</c><00:51:08.559><c> to</c><00:51:08.720><c> hold</c>

00:51:08.950 --> 00:51:08.960 align:start position:0%
the free readers are not allowed to hold
 

00:51:08.960 --> 00:51:11.670 align:start position:0%
the free readers are not allowed to hold
a<00:51:09.119><c> pointer</c><00:51:09.520><c> to</c><00:51:09.680><c> rcu</c><00:51:10.240><c> protected</c><00:51:10.800><c> data</c><00:51:11.200><c> across</c><00:51:11.520><c> a</c>

00:51:11.670 --> 00:51:11.680 align:start position:0%
a pointer to rcu protected data across a
 

00:51:11.680 --> 00:51:12.549 align:start position:0%
a pointer to rcu protected data across a
context<00:51:12.079><c> switch</c>

00:51:12.549 --> 00:51:12.559 align:start position:0%
context switch
 

00:51:12.559 --> 00:51:14.630 align:start position:0%
context switch
so<00:51:12.800><c> a</c><00:51:12.960><c> reader</c><00:51:13.359><c> is</c><00:51:13.520><c> not</c><00:51:13.680><c> allowed</c><00:51:13.920><c> to</c><00:51:14.079><c> hold</c><00:51:14.559><c> a</c>

00:51:14.630 --> 00:51:14.640 align:start position:0%
so a reader is not allowed to hold a
 

00:51:14.640 --> 00:51:16.950 align:start position:0%
so a reader is not allowed to hold a
pointer

00:51:16.950 --> 00:51:16.960 align:start position:0%
pointer
 

00:51:16.960 --> 00:51:20.069 align:start position:0%
pointer
to<00:51:17.119><c> one</c><00:51:17.280><c> of</c><00:51:17.359><c> those</c><00:51:17.920><c> list</c><00:51:18.240><c> elements</c><00:51:18.640><c> across</c><00:51:19.920><c> a</c>

00:51:20.069 --> 00:51:20.079 align:start position:0%
to one of those list elements across a
 

00:51:20.079 --> 00:51:21.430 align:start position:0%
to one of those list elements across a
context<00:51:20.480><c> switch</c>

00:51:21.430 --> 00:51:21.440 align:start position:0%
context switch
 

00:51:21.440 --> 00:51:26.390 align:start position:0%
context switch
so<00:51:21.599><c> the</c><00:51:21.760><c> readers</c>

00:51:26.390 --> 00:51:26.400 align:start position:0%
 
 

00:51:26.400 --> 00:51:31.030 align:start position:0%
 
they<00:51:26.559><c> cannot</c><00:51:26.960><c> yield</c><00:51:27.200><c> the</c><00:51:27.359><c> cpu</c>

00:51:31.030 --> 00:51:31.040 align:start position:0%
 
 

00:51:31.040 --> 00:51:37.589 align:start position:0%
 
in<00:51:31.200><c> a</c><00:51:31.440><c> rcu</c><00:51:31.920><c> critical</c><00:51:34.839><c> section</c>

00:51:37.589 --> 00:51:37.599 align:start position:0%
in a rcu critical section
 

00:51:37.599 --> 00:51:40.630 align:start position:0%
in a rcu critical section
and<00:51:37.680><c> then</c><00:51:37.839><c> what</c><00:51:38.000><c> the</c><00:51:38.079><c> writers</c><00:51:38.559><c> do</c><00:51:38.960><c> is</c>

00:51:40.630 --> 00:51:40.640 align:start position:0%
and then what the writers do is
 

00:51:40.640 --> 00:51:46.870 align:start position:0%
and then what the writers do is
they<00:51:40.880><c> delay</c><00:51:41.200><c> the</c><00:51:41.440><c> free</c>

00:51:46.870 --> 00:51:46.880 align:start position:0%
 
 

00:51:46.880 --> 00:51:50.950 align:start position:0%
 
until<00:51:47.280><c> every</c><00:51:48.839><c> core</c>

00:51:50.950 --> 00:51:50.960 align:start position:0%
until every core
 

00:51:50.960 --> 00:52:00.549 align:start position:0%
until every core
has<00:51:51.200><c> context</c><00:51:51.599><c> switches</c><00:51:52.160><c> at</c><00:51:52.319><c> least</c><00:51:52.640><c> once</c>

00:52:00.549 --> 00:52:00.559 align:start position:0%
 
 

00:52:00.559 --> 00:52:02.150 align:start position:0%
 
so<00:52:00.720><c> this</c><00:52:00.800><c> is</c><00:52:00.960><c> easy</c><00:52:01.200><c> enough</c><00:52:01.680><c> like</c><00:52:01.839><c> this</c><00:52:02.079><c> is</c>

00:52:02.150 --> 00:52:02.160 align:start position:0%
so this is easy enough like this is
 

00:52:02.160 --> 00:52:04.069 align:start position:0%
so this is easy enough like this is
actually<00:52:02.480><c> also</c><00:52:02.720><c> a</c><00:52:02.800><c> rule</c><00:52:03.040><c> for</c><00:52:03.200><c> spin</c><00:52:03.520><c> locks</c><00:52:03.839><c> in</c><00:52:04.000><c> a</c>

00:52:04.069 --> 00:52:04.079 align:start position:0%
actually also a rule for spin locks in a
 

00:52:04.079 --> 00:52:05.430 align:start position:0%
actually also a rule for spin locks in a
spin<00:52:04.319><c> lock</c><00:52:04.480><c> critical</c><00:52:04.800><c> section</c><00:52:05.119><c> you</c><00:52:05.200><c> can't</c>

00:52:05.430 --> 00:52:05.440 align:start position:0%
spin lock critical section you can't
 

00:52:05.440 --> 00:52:07.750 align:start position:0%
spin lock critical section you can't
yield<00:52:05.760><c> the</c><00:52:05.920><c> cpu</c>

00:52:07.750 --> 00:52:07.760 align:start position:0%
yield the cpu
 

00:52:07.760 --> 00:52:09.190 align:start position:0%
yield the cpu
but<00:52:08.000><c> nevertheless</c><00:52:08.559><c> though</c><00:52:08.720><c> you</c><00:52:08.880><c> you</c><00:52:09.040><c> have</c><00:52:09.119><c> to</c>

00:52:09.190 --> 00:52:09.200 align:start position:0%
but nevertheless though you you have to
 

00:52:09.200 --> 00:52:11.349 align:start position:0%
but nevertheless though you you have to
be<00:52:09.280><c> a</c><00:52:09.359><c> bit</c><00:52:09.520><c> careful</c>

00:52:11.349 --> 00:52:11.359 align:start position:0%
be a bit careful
 

00:52:11.359 --> 00:52:14.470 align:start position:0%
be a bit careful
this<00:52:11.520><c> is</c><00:52:11.680><c> a</c><00:52:11.760><c> little</c><00:52:11.920><c> more</c><00:52:12.079><c> involved</c><00:52:14.079><c> but</c><00:52:14.319><c> it's</c>

00:52:14.470 --> 00:52:14.480 align:start position:0%
this is a little more involved but it's
 

00:52:14.480 --> 00:52:15.510 align:start position:0%
this is a little more involved but it's
relatively

00:52:15.510 --> 00:52:15.520 align:start position:0%
relatively
 

00:52:15.520 --> 00:52:17.589 align:start position:0%
relatively
clear<00:52:15.920><c> when</c><00:52:16.160><c> each</c><00:52:16.400><c> each</c><00:52:16.960><c> core</c><00:52:17.200><c> knows</c><00:52:17.440><c> its</c>

00:52:17.589 --> 00:52:17.599 align:start position:0%
clear when each each core knows its
 

00:52:17.599 --> 00:52:19.030 align:start position:0%
clear when each each core knows its
context<00:52:18.000><c> switching</c>

00:52:19.030 --> 00:52:19.040 align:start position:0%
context switching
 

00:52:19.040 --> 00:52:20.710 align:start position:0%
context switching
and<00:52:19.200><c> so</c><00:52:19.359><c> this</c><00:52:19.520><c> is</c><00:52:19.599><c> a</c><00:52:19.680><c> pretty</c><00:52:19.839><c> well</c><00:52:20.079><c> defined</c>

00:52:20.710 --> 00:52:20.720 align:start position:0%
and so this is a pretty well defined
 

00:52:20.720 --> 00:52:25.030 align:start position:0%
and so this is a pretty well defined
point<00:52:21.280><c> for</c><00:52:21.440><c> the</c><00:52:21.839><c> writer</c><00:52:22.160><c> to</c><00:52:22.240><c> have</c><00:52:22.400><c> to</c><00:52:22.480><c> wait</c><00:52:22.800><c> for</c>

00:52:25.030 --> 00:52:25.040 align:start position:0%
 
 

00:52:25.040 --> 00:52:26.870 align:start position:0%
 
and<00:52:25.200><c> just</c><00:52:25.599><c> require</c><00:52:26.000><c> some</c><00:52:26.240><c> implementation</c>

00:52:26.870 --> 00:52:26.880 align:start position:0%
and just require some implementation
 

00:52:26.880 --> 00:52:28.390 align:start position:0%
and just require some implementation
this<00:52:27.040><c> also</c><00:52:27.359><c> requires</c><00:52:27.760><c> this</c><00:52:28.000><c> may</c><00:52:28.160><c> be</c><00:52:28.319><c> a</c>

00:52:28.390 --> 00:52:28.400 align:start position:0%
this also requires this may be a
 

00:52:28.400 --> 00:52:30.150 align:start position:0%
this also requires this may be a
significant<00:52:28.880><c> delay</c><00:52:29.200><c> it</c><00:52:29.280><c> may</c><00:52:29.440><c> be</c><00:52:29.599><c> a</c>

00:52:30.150 --> 00:52:30.160 align:start position:0%
significant delay it may be a
 

00:52:30.160 --> 00:52:31.750 align:start position:0%
significant delay it may be a
millisecond<00:52:30.720><c> or</c><00:52:30.800><c> a</c><00:52:30.880><c> significant</c><00:52:31.359><c> fraction</c><00:52:31.599><c> of</c>

00:52:31.750 --> 00:52:31.760 align:start position:0%
millisecond or a significant fraction of
 

00:52:31.760 --> 00:52:33.109 align:start position:0%
millisecond or a significant fraction of
a<00:52:31.839><c> millisecond</c><00:52:32.319><c> that</c><00:52:32.480><c> the</c><00:52:32.559><c> writer</c><00:52:32.800><c> has</c><00:52:32.960><c> to</c>

00:52:33.109 --> 00:52:33.119 align:start position:0%
a millisecond that the writer has to
 

00:52:33.119 --> 00:52:33.910 align:start position:0%
a millisecond that the writer has to
wait

00:52:33.910 --> 00:52:33.920 align:start position:0%
wait
 

00:52:33.920 --> 00:52:35.430 align:start position:0%
wait
before<00:52:34.240><c> it's</c><00:52:34.319><c> allowed</c><00:52:34.640><c> to</c><00:52:34.800><c> free</c><00:52:35.040><c> that</c><00:52:35.200><c> list</c>

00:52:35.430 --> 00:52:35.440 align:start position:0%
before it's allowed to free that list
 

00:52:35.440 --> 00:52:37.510 align:start position:0%
before it's allowed to free that list
element<00:52:36.240><c> to</c><00:52:36.400><c> be</c><00:52:36.559><c> sure</c><00:52:36.720><c> that</c><00:52:36.880><c> no</c><00:52:37.040><c> reader</c><00:52:37.359><c> could</c>

00:52:37.510 --> 00:52:37.520 align:start position:0%
element to be sure that no reader could
 

00:52:37.520 --> 00:52:41.270 align:start position:0%
element to be sure that no reader could
possibly<00:52:38.000><c> still</c><00:52:38.160><c> be</c><00:52:38.319><c> using</c><00:52:38.640><c> it</c>

00:52:41.270 --> 00:52:41.280 align:start position:0%
 
 

00:52:41.280 --> 00:52:44.309 align:start position:0%
 
people<00:52:41.520><c> have</c><00:52:41.599><c> come</c><00:52:41.839><c> up</c><00:52:41.920><c> with</c><00:52:42.079><c> a</c>

00:52:44.309 --> 00:52:44.319 align:start position:0%
 
 

00:52:44.319 --> 00:52:46.549 align:start position:0%
 
bunch<00:52:44.720><c> of</c><00:52:45.040><c> techniques</c><00:52:45.599><c> for</c><00:52:46.000><c> actually</c>

00:52:46.549 --> 00:52:46.559 align:start position:0%
bunch of techniques for actually
 

00:52:46.559 --> 00:52:48.950 align:start position:0%
bunch of techniques for actually
implementing<00:52:47.200><c> this</c><00:52:47.440><c> weight</c>

00:52:48.950 --> 00:52:48.960 align:start position:0%
implementing this weight
 

00:52:48.960 --> 00:52:50.549 align:start position:0%
implementing this weight
the<00:52:49.280><c> most</c><00:52:49.520><c> the</c><00:52:49.680><c> straightforward</c><00:52:50.240><c> one</c><00:52:50.400><c> the</c>

00:52:50.549 --> 00:52:50.559 align:start position:0%
the most the straightforward one the
 

00:52:50.559 --> 00:52:52.549 align:start position:0%
the most the straightforward one the
paper<00:52:50.880><c> talks</c><00:52:51.119><c> about</c><00:52:51.760><c> is</c><00:52:51.839><c> that</c><00:52:52.000><c> the</c><00:52:52.160><c> writing</c>

00:52:52.549 --> 00:52:52.559 align:start position:0%
paper talks about is that the writing
 

00:52:52.559 --> 00:52:53.430 align:start position:0%
paper talks about is that the writing
thread

00:52:53.430 --> 00:52:53.440 align:start position:0%
thread
 

00:52:53.440 --> 00:52:56.549 align:start position:0%
thread
simply<00:52:53.920><c> arranges</c><00:52:54.720><c> with</c><00:52:54.880><c> the</c><00:52:55.280><c> scheduler</c><00:52:56.400><c> to</c>

00:52:56.549 --> 00:52:56.559 align:start position:0%
simply arranges with the scheduler to
 

00:52:56.559 --> 00:52:57.829 align:start position:0%
simply arranges with the scheduler to
have<00:52:56.640><c> the</c><00:52:56.880><c> writing</c><00:52:57.200><c> thread</c>

00:52:57.829 --> 00:52:57.839 align:start position:0%
have the writing thread
 

00:52:57.839 --> 00:53:00.710 align:start position:0%
have the writing thread
be<00:52:58.079><c> executed</c><00:52:58.720><c> briefly</c><00:52:59.520><c> on</c><00:53:00.079><c> every</c><00:53:00.319><c> one</c><00:53:00.480><c> of</c><00:53:00.640><c> the</c>

00:53:00.710 --> 00:53:00.720 align:start position:0%
be executed briefly on every one of the
 

00:53:00.720 --> 00:53:02.230 align:start position:0%
be executed briefly on every one of the
cores<00:53:01.119><c> in</c><00:53:01.200><c> the</c><00:53:01.359><c> system</c>

00:53:02.230 --> 00:53:02.240 align:start position:0%
cores in the system
 

00:53:02.240 --> 00:53:05.349 align:start position:0%
cores in the system
and<00:53:02.319><c> what</c><00:53:02.480><c> that</c><00:53:02.640><c> means</c><00:53:02.880><c> is</c><00:53:02.960><c> that</c><00:53:03.359><c> that</c>

00:53:05.349 --> 00:53:05.359 align:start position:0%
and what that means is that that
 

00:53:05.359 --> 00:53:06.950 align:start position:0%
and what that means is that that
every<00:53:05.599><c> one</c><00:53:05.760><c> of</c><00:53:05.839><c> the</c><00:53:05.920><c> cores</c><00:53:06.240><c> must</c><00:53:06.480><c> have</c><00:53:06.640><c> done</c><00:53:06.880><c> a</c>

00:53:06.950 --> 00:53:06.960 align:start position:0%
every one of the cores must have done a
 

00:53:06.960 --> 00:53:10.230 align:start position:0%
every one of the cores must have done a
context<00:53:07.440><c> switch</c><00:53:08.240><c> during</c><00:53:08.480><c> this</c><00:53:08.720><c> process</c>

00:53:10.230 --> 00:53:10.240 align:start position:0%
context switch during this process
 

00:53:10.240 --> 00:53:11.670 align:start position:0%
context switch during this process
and<00:53:10.400><c> since</c><00:53:10.640><c> readers</c><00:53:11.040><c> can't</c><00:53:11.200><c> hold</c><00:53:11.440><c> stuff</c>

00:53:11.670 --> 00:53:11.680 align:start position:0%
and since readers can't hold stuff
 

00:53:11.680 --> 00:53:13.190 align:start position:0%
and since readers can't hold stuff
across<00:53:12.000><c> context</c><00:53:12.319><c> switches</c><00:53:12.720><c> that</c><00:53:12.800><c> means</c><00:53:13.040><c> that</c>

00:53:13.190 --> 00:53:13.200 align:start position:0%
across context switches that means that
 

00:53:13.200 --> 00:53:20.630 align:start position:0%
across context switches that means that
the<00:53:13.280><c> writer</c><00:53:13.520><c> has</c><00:53:13.599><c> now</c><00:53:13.839><c> waited</c><00:53:14.160><c> long</c><00:53:14.400><c> enough</c>

00:53:20.630 --> 00:53:20.640 align:start position:0%
 
 

00:53:20.640 --> 00:53:23.030 align:start position:0%
 
and<00:53:20.720><c> so</c><00:53:20.880><c> the</c><00:53:21.040><c> way</c><00:53:21.200><c> the</c><00:53:21.599><c> actual</c><00:53:22.000><c> writer</c><00:53:22.559><c> code</c>

00:53:23.030 --> 00:53:23.040 align:start position:0%
and so the way the actual writer code
 

00:53:23.040 --> 00:53:24.630 align:start position:0%
and so the way the actual writer code
looks<00:53:23.280><c> like</c><00:53:23.599><c> is</c>

00:53:24.630 --> 00:53:24.640 align:start position:0%
looks like is
 

00:53:24.640 --> 00:53:25.829 align:start position:0%
looks like is
the<00:53:24.800><c> writing</c><00:53:25.040><c> code</c><00:53:25.280><c> does</c><00:53:25.440><c> whatever</c>

00:53:25.829 --> 00:53:25.839 align:start position:0%
the writing code does whatever
 

00:53:25.839 --> 00:53:27.270 align:start position:0%
the writing code does whatever
modifications<00:53:26.559><c> it's</c><00:53:26.640><c> going</c><00:53:26.720><c> to</c><00:53:26.800><c> do</c><00:53:26.960><c> to</c><00:53:27.119><c> the</c>

00:53:27.270 --> 00:53:27.280 align:start position:0%
modifications it's going to do to the
 

00:53:27.280 --> 00:53:30.630 align:start position:0%
modifications it's going to do to the
data<00:53:27.920><c> and</c><00:53:28.000><c> then</c><00:53:28.240><c> it</c><00:53:28.319><c> calls</c><00:53:28.720><c> this</c>

00:53:30.630 --> 00:53:30.640 align:start position:0%
data and then it calls this
 

00:53:30.640 --> 00:53:35.510 align:start position:0%
data and then it calls this
synchronize<00:53:31.119><c> rcu</c><00:53:31.680><c> call</c>

00:53:35.510 --> 00:53:35.520 align:start position:0%
 
 

00:53:35.520 --> 00:53:41.349 align:start position:0%
 
which<00:53:36.000><c> actually</c><00:53:36.319><c> implements</c><00:53:36.880><c> two</c>

00:53:41.349 --> 00:53:41.359 align:start position:0%
 
 

00:53:41.359 --> 00:53:44.549 align:start position:0%
 
um<00:53:41.920><c> and</c><00:53:42.160><c> then</c><00:53:42.720><c> the</c><00:53:42.960><c> writer</c><00:53:44.079><c> uh</c>

00:53:44.549 --> 00:53:44.559 align:start position:0%
um and then the writer uh
 

00:53:44.559 --> 00:53:47.589 align:start position:0%
um and then the writer uh
frees<00:53:44.960><c> whatever</c><00:53:45.280><c> the</c><00:53:45.440><c> old</c><00:53:45.680><c> element</c><00:53:46.160><c> was</c><00:53:47.440><c> and</c>

00:53:47.589 --> 00:53:47.599 align:start position:0%
frees whatever the old element was and
 

00:53:47.599 --> 00:53:48.470 align:start position:0%
frees whatever the old element was and
so<00:53:47.760><c> that</c><00:53:47.839><c> means</c><00:53:48.160><c> that</c>

00:53:48.470 --> 00:53:48.480 align:start position:0%
so that means that
 

00:53:48.480 --> 00:53:49.670 align:start position:0%
so that means that
you<00:53:48.559><c> know</c><00:53:48.720><c> the</c><00:53:48.800><c> writer</c><00:53:49.119><c> is</c><00:53:49.200><c> doing</c><00:53:49.359><c> whatever</c>

00:53:49.670 --> 00:53:49.680 align:start position:0%
you know the writer is doing whatever
 

00:53:49.680 --> 00:53:51.510 align:start position:0%
you know the writer is doing whatever
it's<00:53:49.839><c> doing</c><00:53:50.240><c> you</c><00:53:50.319><c> know</c><00:53:50.720><c> at</c><00:53:50.800><c> this</c><00:53:51.040><c> point</c><00:53:51.359><c> let's</c>

00:53:51.510 --> 00:53:51.520 align:start position:0%
it's doing you know at this point let's
 

00:53:51.520 --> 00:53:52.790 align:start position:0%
it's doing you know at this point let's
say<00:53:51.680><c> it's</c><00:53:51.839><c> doing</c><00:53:52.160><c> the</c>

00:53:52.790 --> 00:53:52.800 align:start position:0%
say it's doing the
 

00:53:52.800 --> 00:54:00.390 align:start position:0%
say it's doing the
you<00:53:52.880><c> know</c><00:53:53.599><c> e1</c><00:53:55.200><c> arrow</c><00:53:55.680><c> next</c>

00:54:00.390 --> 00:54:00.400 align:start position:0%
 
 

00:54:00.400 --> 00:54:04.549 align:start position:0%
 
is<00:54:00.559><c> equal</c><00:54:00.800><c> to</c><00:54:00.960><c> the</c><00:54:01.119><c> new</c><00:54:01.280><c> list</c><00:54:01.599><c> element</c>

00:54:04.549 --> 00:54:04.559 align:start position:0%
 
 

00:54:04.559 --> 00:54:11.190 align:start position:0%
 
and<00:54:04.640><c> so</c><00:54:04.960><c> you</c><00:54:05.040><c> know</c><00:54:08.839><c> uh</c>

00:54:11.190 --> 00:54:11.200 align:start position:0%
and so you know uh
 

00:54:11.200 --> 00:54:13.270 align:start position:0%
and so you know uh
this<00:54:11.359><c> synchronized</c><00:54:11.920><c> rcu</c><00:54:12.400><c> causes</c><00:54:12.720><c> a</c><00:54:12.960><c> force</c><00:54:13.200><c> as</c>

00:54:13.270 --> 00:54:13.280 align:start position:0%
this synchronized rcu causes a force as
 

00:54:13.280 --> 00:54:15.589 align:start position:0%
this synchronized rcu causes a force as
a<00:54:13.359><c> context</c><00:54:13.760><c> switch</c><00:54:14.079><c> on</c>

00:54:15.589 --> 00:54:15.599 align:start position:0%
a context switch on
 

00:54:15.599 --> 00:54:18.309 align:start position:0%
a context switch on
every<00:54:15.920><c> core</c><00:54:16.720><c> um</c><00:54:17.040><c> so</c><00:54:17.280><c> any</c><00:54:17.599><c> core</c><00:54:17.920><c> that</c><00:54:18.079><c> could</c>

00:54:18.309 --> 00:54:18.319 align:start position:0%
every core um so any core that could
 

00:54:18.319 --> 00:54:19.030 align:start position:0%
every core um so any core that could
have

00:54:19.030 --> 00:54:19.040 align:start position:0%
have
 

00:54:19.040 --> 00:54:20.630 align:start position:0%
have
read<00:54:19.599><c> you</c><00:54:19.760><c> know</c><00:54:19.839><c> any</c><00:54:20.000><c> core</c><00:54:20.240><c> that</c><00:54:20.319><c> could</c><00:54:20.480><c> have</c>

00:54:20.630 --> 00:54:20.640 align:start position:0%
read you know any core that could have
 

00:54:20.640 --> 00:54:22.470 align:start position:0%
read you know any core that could have
read<00:54:21.440><c> the</c><00:54:21.760><c> old</c>

00:54:22.470 --> 00:54:22.480 align:start position:0%
read the old
 

00:54:22.480 --> 00:54:28.069 align:start position:0%
read the old
value<00:54:23.440><c> must</c><00:54:23.760><c> have</c><00:54:23.920><c> read</c><00:54:24.079><c> it</c><00:54:24.240><c> at</c><00:54:24.319><c> this</c><00:54:24.559><c> point</c>

00:54:28.069 --> 00:54:28.079 align:start position:0%
 
 

00:54:28.079 --> 00:54:29.430 align:start position:0%
 
i<00:54:28.240><c> must</c><00:54:28.480><c> have</c><00:54:28.559><c> read</c><00:54:28.720><c> it</c><00:54:28.800><c> at</c><00:54:28.880><c> this</c><00:54:29.040><c> point</c><00:54:29.280><c> in</c>

00:54:29.430 --> 00:54:29.440 align:start position:0%
i must have read it at this point in
 

00:54:29.440 --> 00:54:31.349 align:start position:0%
i must have read it at this point in
time<00:54:29.920><c> if</c><00:54:30.240><c> after</c><00:54:30.559><c> that</c><00:54:30.720><c> point</c><00:54:30.960><c> of</c><00:54:31.040><c> time</c><00:54:31.200><c> we've</c>

00:54:31.349 --> 00:54:31.359 align:start position:0%
time if after that point of time we've
 

00:54:31.359 --> 00:54:32.950 align:start position:0%
time if after that point of time we've
done<00:54:31.520><c> a</c><00:54:31.599><c> context</c><00:54:32.000><c> switch</c><00:54:32.240><c> on</c><00:54:32.400><c> every</c><00:54:32.640><c> chord</c>

00:54:32.950 --> 00:54:32.960 align:start position:0%
done a context switch on every chord
 

00:54:32.960 --> 00:54:34.870 align:start position:0%
done a context switch on every chord
that<00:54:33.119><c> means</c><00:54:33.359><c> that</c><00:54:33.520><c> no</c><00:54:33.839><c> core</c><00:54:34.160><c> that</c><00:54:34.400><c> read</c><00:54:34.720><c> the</c>

00:54:34.870 --> 00:54:34.880 align:start position:0%
that means that no core that read the
 

00:54:34.880 --> 00:54:36.150 align:start position:0%
that means that no core that read the
old<00:54:35.200><c> value</c>

00:54:36.150 --> 00:54:36.160 align:start position:0%
old value
 

00:54:36.160 --> 00:54:38.870 align:start position:0%
old value
could<00:54:36.400><c> still</c><00:54:36.960><c> have</c><00:54:37.200><c> a</c><00:54:37.280><c> pointer</c><00:54:37.680><c> to</c><00:54:37.760><c> that</c><00:54:38.000><c> value</c>

00:54:38.870 --> 00:54:38.880 align:start position:0%
could still have a pointer to that value
 

00:54:38.880 --> 00:54:40.470 align:start position:0%
could still have a pointer to that value
at<00:54:39.040><c> this</c><00:54:39.280><c> point</c><00:54:39.599><c> in</c><00:54:39.680><c> time</c>

00:54:40.470 --> 00:54:40.480 align:start position:0%
at this point in time
 

00:54:40.480 --> 00:54:42.230 align:start position:0%
at this point in time
due<00:54:40.640><c> to</c><00:54:40.799><c> rule</c><00:54:41.040><c> one</c><00:54:41.680><c> and</c><00:54:41.839><c> that</c><00:54:42.000><c> means</c><00:54:42.160><c> that</c>

00:54:42.230 --> 00:54:42.240 align:start position:0%
due to rule one and that means that
 

00:54:42.240 --> 00:54:47.349 align:start position:0%
due to rule one and that means that
we're<00:54:42.400><c> allowed</c><00:54:42.640><c> to</c><00:54:42.720><c> free</c><00:54:43.040><c> the</c><00:54:43.119><c> old</c><00:54:43.359><c> value</c>

00:54:47.349 --> 00:54:47.359 align:start position:0%
 
 

00:54:47.359 --> 00:54:55.670 align:start position:0%
 
any<00:54:50.839><c> questions</c>

00:54:55.670 --> 00:54:55.680 align:start position:0%
 
 

00:54:55.680 --> 00:54:57.670 align:start position:0%
 
you<00:54:55.839><c> may</c><00:54:56.000><c> object</c><00:54:56.480><c> that</c><00:54:56.559><c> this</c><00:54:57.119><c> synchronized</c>

00:54:57.670 --> 00:54:57.680 align:start position:0%
you may object that this synchronized
 

00:54:57.680 --> 00:54:59.030 align:start position:0%
you may object that this synchronized
rcu<00:54:58.160><c> will</c><00:54:58.319><c> take</c><00:54:58.559><c> a</c>

00:54:59.030 --> 00:54:59.040 align:start position:0%
rcu will take a
 

00:54:59.040 --> 00:55:01.510 align:start position:0%
rcu will take a
significant<00:54:59.680><c> perhaps</c><00:55:00.240><c> fraction</c><00:55:00.640><c> of</c><00:55:00.799><c> a</c>

00:55:01.510 --> 00:55:01.520 align:start position:0%
significant perhaps fraction of a
 

00:55:01.520 --> 00:55:03.430 align:start position:0%
significant perhaps fraction of a
millisecond<00:55:02.160><c> that's</c><00:55:02.480><c> quite</c><00:55:02.720><c> true</c>

00:55:03.430 --> 00:55:03.440 align:start position:0%
millisecond that's quite true
 

00:55:03.440 --> 00:55:07.589 align:start position:0%
millisecond that's quite true
um<00:55:04.799><c> it</c><00:55:05.040><c> that</c><00:55:05.359><c> uh</c><00:55:06.400><c> so</c><00:55:06.559><c> that's</c><00:55:06.799><c> too</c><00:55:06.960><c> bad</c>

00:55:07.589 --> 00:55:07.599 align:start position:0%
um it that uh so that's too bad
 

00:55:07.599 --> 00:55:10.470 align:start position:0%
um it that uh so that's too bad
um<00:55:09.040><c> one</c><00:55:09.200><c> of</c><00:55:09.280><c> the</c><00:55:09.359><c> justifications</c><00:55:10.160><c> is</c><00:55:10.240><c> that</c>

00:55:10.470 --> 00:55:10.480 align:start position:0%
um one of the justifications is that
 

00:55:10.480 --> 00:55:11.109 align:start position:0%
um one of the justifications is that
writing

00:55:11.109 --> 00:55:11.119 align:start position:0%
writing
 

00:55:11.119 --> 00:55:12.710 align:start position:0%
writing
you<00:55:11.280><c> know</c><00:55:11.359><c> for</c><00:55:11.520><c> rcu</c><00:55:11.839><c> protected</c><00:55:12.240><c> data</c><00:55:12.480><c> writing</c>

00:55:12.710 --> 00:55:12.720 align:start position:0%
you know for rcu protected data writing
 

00:55:12.720 --> 00:55:14.630 align:start position:0%
you know for rcu protected data writing
is<00:55:12.799><c> going</c><00:55:12.880><c> to</c><00:55:12.960><c> be</c><00:55:13.119><c> relatively</c><00:55:13.839><c> rare</c><00:55:14.319><c> so</c><00:55:14.480><c> the</c>

00:55:14.630 --> 00:55:14.640 align:start position:0%
is going to be relatively rare so the
 

00:55:14.640 --> 00:55:15.990 align:start position:0%
is going to be relatively rare so the
fact<00:55:14.799><c> that</c><00:55:14.960><c> the</c><00:55:15.040><c> rights</c><00:55:15.280><c> take</c><00:55:15.520><c> longer</c>

00:55:15.990 --> 00:55:16.000 align:start position:0%
fact that the rights take longer
 

00:55:16.000 --> 00:55:19.349 align:start position:0%
fact that the rights take longer
may<00:55:16.160><c> not</c><00:55:16.720><c> will</c><00:55:17.280><c> probably</c><00:55:17.680><c> not</c><00:55:18.480><c> affect</c><00:55:18.880><c> overall</c>

00:55:19.349 --> 00:55:19.359 align:start position:0%
may not will probably not affect overall
 

00:55:19.359 --> 00:55:21.190 align:start position:0%
may not will probably not affect overall
performance<00:55:19.920><c> very</c><00:55:20.160><c> much</c>

00:55:21.190 --> 00:55:21.200 align:start position:0%
performance very much
 

00:55:21.200 --> 00:55:22.950 align:start position:0%
performance very much
for<00:55:21.359><c> the</c><00:55:21.520><c> situations</c><00:55:22.079><c> in</c><00:55:22.160><c> which</c><00:55:22.480><c> the</c><00:55:22.640><c> writer</c>

00:55:22.950 --> 00:55:22.960 align:start position:0%
for the situations in which the writer
 

00:55:22.960 --> 00:55:24.390 align:start position:0%
for the situations in which the writer
really<00:55:23.119><c> doesn't</c><00:55:23.359><c> want</c><00:55:23.520><c> to</c><00:55:23.599><c> wait</c><00:55:24.160><c> there's</c>

00:55:24.390 --> 00:55:24.400 align:start position:0%
really doesn't want to wait there's
 

00:55:24.400 --> 00:55:26.789 align:start position:0%
really doesn't want to wait there's
another<00:55:24.799><c> call</c>

00:55:26.789 --> 00:55:26.799 align:start position:0%
another call
 

00:55:26.799 --> 00:55:30.470 align:start position:0%
another call
that<00:55:27.680><c> that</c><00:55:27.920><c> defers</c><00:55:28.640><c> even</c><00:55:28.880><c> the</c><00:55:29.040><c> weight</c>

00:55:30.470 --> 00:55:30.480 align:start position:0%
that that defers even the weight
 

00:55:30.480 --> 00:55:35.030 align:start position:0%
that that defers even the weight
called<00:55:30.720><c> call</c><00:55:32.839><c> rcu</c>

00:55:35.030 --> 00:55:35.040 align:start position:0%
called call rcu
 

00:55:35.040 --> 00:55:38.549 align:start position:0%
called call rcu
and<00:55:35.119><c> the</c><00:55:35.280><c> idea</c><00:55:35.520><c> is</c><00:55:35.599><c> you</c><00:55:35.760><c> pass</c><00:55:36.079><c> it</c><00:55:36.240><c> the</c><00:55:37.119><c> um</c>

00:55:38.549 --> 00:55:38.559 align:start position:0%
and the idea is you pass it the um
 

00:55:38.559 --> 00:55:41.270 align:start position:0%
and the idea is you pass it the um
in<00:55:38.640><c> the</c><00:55:38.799><c> usual</c><00:55:39.440><c> use</c><00:55:39.760><c> case</c><00:55:40.640><c> you</c><00:55:40.799><c> pass</c><00:55:41.040><c> it</c><00:55:41.200><c> a</c>

00:55:41.270 --> 00:55:41.280 align:start position:0%
in the usual use case you pass it a
 

00:55:41.280 --> 00:55:43.430 align:start position:0%
in the usual use case you pass it a
pointer<00:55:41.599><c> to</c><00:55:41.760><c> the</c><00:55:42.000><c> object</c><00:55:42.400><c> you</c><00:55:42.480><c> want</c><00:55:42.640><c> to</c><00:55:42.720><c> free</c>

00:55:43.430 --> 00:55:43.440 align:start position:0%
pointer to the object you want to free
 

00:55:43.440 --> 00:55:46.150 align:start position:0%
pointer to the object you want to free
and<00:55:43.599><c> then</c><00:55:44.400><c> a</c><00:55:44.559><c> callback</c><00:55:45.200><c> function</c><00:55:45.680><c> that</c><00:55:45.920><c> just</c>

00:55:46.150 --> 00:55:46.160 align:start position:0%
and then a callback function that just
 

00:55:46.160 --> 00:55:48.309 align:start position:0%
and then a callback function that just
calls<00:55:46.839><c> free</c>

00:55:48.309 --> 00:55:48.319 align:start position:0%
calls free
 

00:55:48.319 --> 00:55:50.630 align:start position:0%
calls free
on<00:55:48.480><c> this</c><00:55:48.720><c> pointer</c><00:55:49.440><c> and</c><00:55:49.599><c> the</c><00:55:49.760><c> rcu</c><00:55:50.319><c> system</c>

00:55:50.630 --> 00:55:50.640 align:start position:0%
on this pointer and the rcu system
 

00:55:50.640 --> 00:55:52.309 align:start position:0%
on this pointer and the rcu system
basically<00:55:51.040><c> stashes</c><00:55:51.599><c> away</c>

00:55:52.309 --> 00:55:52.319 align:start position:0%
basically stashes away
 

00:55:52.319 --> 00:55:55.349 align:start position:0%
basically stashes away
the<00:55:52.480><c> call</c><00:55:52.799><c> rcu</c><00:55:53.760><c> stashes</c><00:55:54.319><c> away</c>

00:55:55.349 --> 00:55:55.359 align:start position:0%
the call rcu stashes away
 

00:55:55.359 --> 00:55:57.430 align:start position:0%
the call rcu stashes away
these<00:55:55.599><c> two</c><00:55:55.760><c> values</c><00:55:56.160><c> on</c><00:55:56.240><c> a</c><00:55:56.400><c> list</c><00:55:57.119><c> and</c><00:55:57.200><c> then</c>

00:55:57.430 --> 00:55:57.440 align:start position:0%
these two values on a list and then
 

00:55:57.440 --> 00:55:59.430 align:start position:0%
these two values on a list and then
immediately<00:55:57.920><c> returns</c>

00:55:59.430 --> 00:55:59.440 align:start position:0%
immediately returns
 

00:55:59.440 --> 00:56:02.630 align:start position:0%
immediately returns
and<00:55:59.520><c> then</c><00:55:59.760><c> does</c><00:56:00.000><c> some</c><00:56:00.839><c> bookkeeping</c><00:56:02.240><c> typically</c>

00:56:02.630 --> 00:56:02.640 align:start position:0%
and then does some bookkeeping typically
 

00:56:02.640 --> 00:56:04.309 align:start position:0%
and then does some bookkeeping typically
involving<00:56:03.119><c> basically</c>

00:56:04.309 --> 00:56:04.319 align:start position:0%
involving basically
 

00:56:04.319 --> 00:56:07.030 align:start position:0%
involving basically
looking<00:56:04.640><c> at</c><00:56:04.799><c> the</c><00:56:06.000><c> counts</c><00:56:06.480><c> of</c><00:56:06.640><c> how</c><00:56:06.799><c> many</c>

00:56:07.030 --> 00:56:07.040 align:start position:0%
looking at the counts of how many
 

00:56:07.040 --> 00:56:08.630 align:start position:0%
looking at the counts of how many
context<00:56:07.359><c> switches</c><00:56:07.760><c> have</c><00:56:07.839><c> occurred</c><00:56:08.240><c> on</c><00:56:08.319><c> each</c>

00:56:08.630 --> 00:56:08.640 align:start position:0%
context switches have occurred on each
 

00:56:08.640 --> 00:56:10.150 align:start position:0%
context switches have occurred on each
core

00:56:10.150 --> 00:56:10.160 align:start position:0%
core
 

00:56:10.160 --> 00:56:12.549 align:start position:0%
core
the<00:56:10.319><c> system</c><00:56:11.520><c> sort</c><00:56:11.680><c> of</c><00:56:11.839><c> in</c><00:56:11.920><c> the</c><00:56:12.000><c> background</c>

00:56:12.549 --> 00:56:12.559 align:start position:0%
the system sort of in the background
 

00:56:12.559 --> 00:56:14.470 align:start position:0%
the system sort of in the background
after<00:56:12.960><c> caller</c><00:56:13.280><c> c</c><00:56:13.520><c> returns</c>

00:56:14.470 --> 00:56:14.480 align:start position:0%
after caller c returns
 

00:56:14.480 --> 00:56:16.789 align:start position:0%
after caller c returns
does<00:56:14.640><c> some</c><00:56:14.799><c> bookkeeping</c><00:56:15.200><c> to</c><00:56:15.520><c> wait</c><00:56:15.760><c> until</c><00:56:16.559><c> all</c>

00:56:16.789 --> 00:56:16.799 align:start position:0%
does some bookkeeping to wait until all
 

00:56:16.799 --> 00:56:18.789 align:start position:0%
does some bookkeeping to wait until all
cores<00:56:17.280><c> a</c><00:56:17.359><c> context</c><00:56:17.680><c> switch</c><00:56:18.079><c> and</c><00:56:18.240><c> then</c><00:56:18.480><c> calls</c>

00:56:18.789 --> 00:56:18.799 align:start position:0%
cores a context switch and then calls
 

00:56:18.799 --> 00:56:20.309 align:start position:0%
cores a context switch and then calls
this<00:56:19.040><c> callback</c><00:56:19.520><c> function</c>

00:56:20.309 --> 00:56:20.319 align:start position:0%
this callback function
 

00:56:20.319 --> 00:56:22.309 align:start position:0%
this callback function
with<00:56:20.480><c> this</c><00:56:20.720><c> argument</c><00:56:21.440><c> and</c><00:56:21.520><c> so</c><00:56:21.680><c> this</c><00:56:21.839><c> is</c><00:56:21.920><c> a</c><00:56:22.079><c> way</c>

00:56:22.309 --> 00:56:22.319 align:start position:0%
with this argument and so this is a way
 

00:56:22.319 --> 00:56:23.750 align:start position:0%
with this argument and so this is a way
of<00:56:22.480><c> avoiding</c><00:56:22.880><c> the</c><00:56:23.040><c> wait</c>

00:56:23.750 --> 00:56:23.760 align:start position:0%
of avoiding the wait
 

00:56:23.760 --> 00:56:28.829 align:start position:0%
of avoiding the wait
because<00:56:25.040><c> this</c><00:56:25.280><c> call</c><00:56:25.920><c> returns</c><00:56:26.400><c> instantly</c>

00:56:28.829 --> 00:56:28.839 align:start position:0%
because this call returns instantly
 

00:56:28.839 --> 00:56:31.750 align:start position:0%
because this call returns instantly
um<00:56:30.640><c> on</c><00:56:30.720><c> the</c><00:56:30.799><c> other</c><00:56:30.960><c> hand</c><00:56:31.119><c> you're</c><00:56:31.280><c> discouraged</c>

00:56:31.750 --> 00:56:31.760 align:start position:0%
um on the other hand you're discouraged
 

00:56:31.760 --> 00:56:33.270 align:start position:0%
um on the other hand you're discouraged
from<00:56:31.920><c> using</c><00:56:32.240><c> it</c><00:56:32.400><c> because</c>

00:56:33.270 --> 00:56:33.280 align:start position:0%
from using it because
 

00:56:33.280 --> 00:56:37.270 align:start position:0%
from using it because
um<00:56:33.839><c> now</c><00:56:34.319><c> this</c><00:56:34.640><c> list</c><00:56:35.599><c> that</c><00:56:36.160><c> um</c>

00:56:37.270 --> 00:56:37.280 align:start position:0%
um now this list that um
 

00:56:37.280 --> 00:56:39.750 align:start position:0%
um now this list that um
if<00:56:37.680><c> people</c><00:56:38.160><c> if</c><00:56:38.319><c> the</c><00:56:38.480><c> colonel</c><00:56:38.720><c> calls</c><00:56:39.040><c> call</c><00:56:39.280><c> rcu</c>

00:56:39.750 --> 00:56:39.760 align:start position:0%
if people if the colonel calls call rcu
 

00:56:39.760 --> 00:56:40.710 align:start position:0%
if people if the colonel calls call rcu
a<00:56:39.839><c> lot</c>

00:56:40.710 --> 00:56:40.720 align:start position:0%
a lot
 

00:56:40.720 --> 00:56:44.309 align:start position:0%
a lot
then<00:56:41.200><c> the</c><00:56:41.359><c> list</c><00:56:41.680><c> that</c><00:56:41.920><c> holds</c><00:56:42.640><c> these</c><00:56:43.040><c> uh</c><00:56:43.920><c> values</c>

00:56:44.309 --> 00:56:44.319 align:start position:0%
then the list that holds these uh values
 

00:56:44.319 --> 00:56:45.750 align:start position:0%
then the list that holds these uh values
and<00:56:44.400><c> get</c><00:56:44.559><c> very</c><00:56:44.880><c> long</c>

00:56:45.750 --> 00:56:45.760 align:start position:0%
and get very long
 

00:56:45.760 --> 00:56:48.309 align:start position:0%
and get very long
and<00:56:46.480><c> it</c><00:56:46.640><c> means</c><00:56:46.880><c> that</c><00:56:47.599><c> there</c><00:56:47.760><c> may</c><00:56:47.920><c> be</c><00:56:48.000><c> a</c><00:56:48.079><c> lot</c><00:56:48.240><c> of</c>

00:56:48.309 --> 00:56:48.319 align:start position:0%
and it means that there may be a lot of
 

00:56:48.319 --> 00:56:50.069 align:start position:0%
and it means that there may be a lot of
memory<00:56:48.640><c> that's</c><00:56:48.799><c> not</c><00:56:49.040><c> being</c><00:56:49.280><c> freed</c>

00:56:50.069 --> 00:56:50.079 align:start position:0%
memory that's not being freed
 

00:56:50.079 --> 00:56:52.950 align:start position:0%
memory that's not being freed
all<00:56:50.240><c> the</c><00:56:50.400><c> data</c><00:56:50.720><c> all</c><00:56:50.880><c> the</c><00:56:51.760><c> uh</c><00:56:52.079><c> this</c><00:56:52.319><c> lit</c><00:56:52.720><c> this</c>

00:56:52.950 --> 00:56:52.960 align:start position:0%
all the data all the uh this lit this
 

00:56:52.960 --> 00:56:54.069 align:start position:0%
all the data all the uh this lit this
list<00:56:53.119><c> goes</c><00:56:53.359><c> very</c><00:56:53.599><c> long</c>

00:56:54.069 --> 00:56:54.079 align:start position:0%
list goes very long
 

00:56:54.079 --> 00:56:58.230 align:start position:0%
list goes very long
each<00:56:54.319><c> list</c><00:56:54.640><c> element</c><00:56:55.440><c> of</c><00:56:55.599><c> a</c><00:56:56.319><c> is</c><00:56:56.839><c> a</c><00:56:57.920><c> has</c><00:56:58.160><c> a</c>

00:56:58.230 --> 00:56:58.240 align:start position:0%
each list element of a is a has a
 

00:56:58.240 --> 00:56:59.829 align:start position:0%
each list element of a is a has a
pointer<00:56:58.640><c> in</c><00:56:58.799><c> it</c><00:56:58.880><c> that</c><00:56:59.119><c> should</c><00:56:59.280><c> be</c><00:56:59.440><c> freed</c><00:56:59.760><c> a</c>

00:56:59.829 --> 00:56:59.839 align:start position:0%
pointer in it that should be freed a
 

00:56:59.839 --> 00:57:01.109 align:start position:0%
pointer in it that should be freed a
pointer<00:57:00.079><c> to</c><00:57:00.240><c> an</c><00:57:00.400><c> object</c><00:57:00.640><c> that</c><00:57:00.799><c> should</c><00:57:00.960><c> be</c>

00:57:01.109 --> 00:57:01.119 align:start position:0%
pointer to an object that should be
 

00:57:01.119 --> 00:57:01.990 align:start position:0%
pointer to an object that should be
freed

00:57:01.990 --> 00:57:02.000 align:start position:0%
freed
 

00:57:02.000 --> 00:57:03.750 align:start position:0%
freed
and<00:57:02.240><c> so</c><00:57:02.400><c> under</c><00:57:02.640><c> extreme</c><00:57:02.960><c> circumstances</c><00:57:03.680><c> you</c>

00:57:03.750 --> 00:57:03.760 align:start position:0%
and so under extreme circumstances you
 

00:57:03.760 --> 00:57:05.750 align:start position:0%
and so under extreme circumstances you
can<00:57:03.920><c> run</c><00:57:04.079><c> a</c><00:57:04.160><c> system</c><00:57:04.799><c> if</c><00:57:04.880><c> you're</c><00:57:04.960><c> not</c><00:57:05.119><c> careful</c>

00:57:05.750 --> 00:57:05.760 align:start position:0%
can run a system if you're not careful
 

00:57:05.760 --> 00:57:08.470 align:start position:0%
can run a system if you're not careful
a<00:57:05.839><c> lot</c><00:57:06.079><c> of</c><00:57:06.160><c> calls</c><00:57:06.400><c> to</c><00:57:06.480><c> rcu</c><00:57:07.119><c> call</c><00:57:07.359><c> rcu</c><00:57:07.839><c> can</c><00:57:08.160><c> run</c><00:57:08.400><c> a</c>

00:57:08.470 --> 00:57:08.480 align:start position:0%
a lot of calls to rcu call rcu can run a
 

00:57:08.480 --> 00:57:09.589 align:start position:0%
a lot of calls to rcu call rcu can run a
system<00:57:08.720><c> out</c><00:57:08.799><c> of</c><00:57:08.880><c> memory</c><00:57:09.200><c> because</c><00:57:09.359><c> all</c><00:57:09.520><c> the</c>

00:57:09.589 --> 00:57:09.599 align:start position:0%
system out of memory because all the
 

00:57:09.599 --> 00:57:11.270 align:start position:0%
system out of memory because all the
memory<00:57:09.920><c> ends</c><00:57:10.160><c> up</c><00:57:10.319><c> on</c><00:57:10.400><c> this</c><00:57:10.559><c> list</c><00:57:10.880><c> of</c>

00:57:11.270 --> 00:57:11.280 align:start position:0%
memory ends up on this list of
 

00:57:11.280 --> 00:57:14.470 align:start position:0%
memory ends up on this list of
deferred<00:57:11.760><c> freeze</c>

00:57:14.470 --> 00:57:14.480 align:start position:0%
 
 

00:57:14.480 --> 00:57:16.309 align:start position:0%
 
so<00:57:14.640><c> people</c><00:57:14.799><c> don't</c><00:57:14.960><c> like</c><00:57:15.119><c> to</c><00:57:15.200><c> use</c><00:57:15.440><c> this</c><00:57:15.760><c> if</c><00:57:16.160><c> they</c>

00:57:16.309 --> 00:57:16.319 align:start position:0%
so people don't like to use this if they
 

00:57:16.319 --> 00:57:21.510 align:start position:0%
so people don't like to use this if they
don't<00:57:16.559><c> have</c><00:57:16.720><c> to</c>

00:57:21.510 --> 00:57:21.520 align:start position:0%
 
 

00:57:21.520 --> 00:57:28.150 align:start position:0%
 
okay<00:57:24.839><c> to</c><00:57:25.520><c> uh</c>

00:57:28.150 --> 00:57:28.160 align:start position:0%
 
 

00:57:28.160 --> 00:57:32.630 align:start position:0%
 
please<00:57:28.480><c> ask</c><00:57:28.799><c> questions</c><00:57:29.280><c> if</c><00:57:29.520><c> uh</c>

00:57:32.630 --> 00:57:32.640 align:start position:0%
 
 

00:57:32.640 --> 00:57:35.670 align:start position:0%
 
if<00:57:32.799><c> you</c><00:57:32.880><c> have</c><00:57:33.200><c> questions</c><00:57:33.920><c> so</c><00:57:34.079><c> this</c><00:57:34.319><c> doesn't</c><00:57:34.880><c> um</c>

00:57:35.670 --> 00:57:35.680 align:start position:0%
if you have questions so this doesn't um
 

00:57:35.680 --> 00:57:38.789 align:start position:0%
if you have questions so this doesn't um
this<00:57:36.079><c> prevents</c><00:57:36.799><c> us</c><00:57:37.200><c> free</c><00:57:37.920><c> that's</c><00:57:38.240><c> prevents</c><00:57:38.640><c> us</c>

00:57:38.789 --> 00:57:38.799 align:start position:0%
this prevents us free that's prevents us
 

00:57:38.799 --> 00:57:40.230 align:start position:0%
this prevents us free that's prevents us
from<00:57:38.960><c> freeing</c><00:57:39.440><c> something</c><00:57:39.839><c> that</c>

00:57:40.230 --> 00:57:40.240 align:start position:0%
from freeing something that
 

00:57:40.240 --> 00:57:42.309 align:start position:0%
from freeing something that
somebody's<00:57:40.720><c> still</c><00:57:41.040><c> using</c><00:57:41.839><c> but</c><00:57:42.000><c> it</c><00:57:42.079><c> doesn't</c>

00:57:42.309 --> 00:57:42.319 align:start position:0%
somebody's still using but it doesn't
 

00:57:42.319 --> 00:57:43.670 align:start position:0%
somebody's still using but it doesn't
prevent<00:57:42.799><c> us</c>

00:57:43.670 --> 00:57:43.680 align:start position:0%
prevent us
 

00:57:43.680 --> 00:57:46.870 align:start position:0%
prevent us
from<00:57:44.319><c> modif</c><00:57:44.799><c> like</c><00:57:45.280><c> having</c><00:57:45.760><c> the</c><00:57:46.000><c> reader</c><00:57:46.480><c> see</c>

00:57:46.870 --> 00:57:46.880 align:start position:0%
from modif like having the reader see
 

00:57:46.880 --> 00:57:49.190 align:start position:0%
from modif like having the reader see
a<00:57:47.359><c> half-baked</c><00:57:48.240><c> version</c><00:57:48.559><c> of</c><00:57:48.720><c> something</c>

00:57:49.190 --> 00:57:49.200 align:start position:0%
a half-baked version of something
 

00:57:49.200 --> 00:57:51.270 align:start position:0%
a half-baked version of something
because<00:57:49.520><c> it's</c><00:57:49.680><c> being</c><00:57:50.000><c> modified</c><00:57:50.640><c> right</c>

00:57:51.270 --> 00:57:51.280 align:start position:0%
because it's being modified right
 

00:57:51.280 --> 00:57:54.870 align:start position:0%
because it's being modified right
idea<00:57:51.760><c> one</c><00:57:52.000><c> prevented</c><00:57:52.480><c> that</c><00:57:52.839><c> yeah</c>

00:57:54.870 --> 00:57:54.880 align:start position:0%
idea one prevented that yeah
 

00:57:54.880 --> 00:57:57.750 align:start position:0%
idea one prevented that yeah
okay<00:57:55.440><c> so</c><00:57:55.599><c> the</c><00:57:55.839><c> the</c><00:57:56.319><c> the</c><00:57:56.559><c> idea</c><00:57:56.880><c> behind</c><00:57:57.200><c> idea</c><00:57:57.520><c> one</c>

00:57:57.750 --> 00:57:57.760 align:start position:0%
okay so the the the idea behind idea one
 

00:57:57.760 --> 00:57:58.470 align:start position:0%
okay so the the the idea behind idea one
is<00:57:57.920><c> that</c>

00:57:58.470 --> 00:57:58.480 align:start position:0%
is that
 

00:57:58.480 --> 00:58:00.150 align:start position:0%
is that
instead<00:57:58.799><c> of</c><00:57:58.960><c> updating</c><00:57:59.359><c> a</c><00:57:59.440><c> list</c><00:57:59.680><c> element</c><00:58:00.079><c> in</c>

00:58:00.150 --> 00:58:00.160 align:start position:0%
instead of updating a list element in
 

00:58:00.160 --> 00:58:02.150 align:start position:0%
instead of updating a list element in
place<00:58:00.799><c> which</c><00:58:00.960><c> would</c><00:58:01.359><c> absolutely</c>

00:58:02.150 --> 00:58:02.160 align:start position:0%
place which would absolutely
 

00:58:02.160 --> 00:58:04.150 align:start position:0%
place which would absolutely
cause<00:58:02.400><c> the</c><00:58:02.559><c> problem</c><00:58:02.799><c> you</c><00:58:03.040><c> mentioned</c><00:58:03.760><c> when</c>

00:58:04.150 --> 00:58:04.160 align:start position:0%
cause the problem you mentioned when
 

00:58:04.160 --> 00:58:05.750 align:start position:0%
cause the problem you mentioned when
writers<00:58:04.559><c> are</c><00:58:04.640><c> not</c><00:58:04.799><c> allowed</c>

00:58:05.750 --> 00:58:05.760 align:start position:0%
writers are not allowed
 

00:58:05.760 --> 00:58:08.390 align:start position:0%
writers are not allowed
to<00:58:05.920><c> update</c><00:58:06.240><c> rcu</c><00:58:06.640><c> protected</c><00:58:06.960><c> data</c><00:58:07.280><c> in</c><00:58:07.440><c> place</c>

00:58:08.390 --> 00:58:08.400 align:start position:0%
to update rcu protected data in place
 

00:58:08.400 --> 00:58:09.270 align:start position:0%
to update rcu protected data in place
instead<00:58:08.799><c> they</c>

00:58:09.270 --> 00:58:09.280 align:start position:0%
instead they
 

00:58:09.280 --> 00:58:12.309 align:start position:0%
instead they
cook<00:58:09.520><c> up</c><00:58:09.599><c> a</c><00:58:09.839><c> new</c><00:58:10.960><c> data</c><00:58:11.280><c> element</c>

00:58:12.309 --> 00:58:12.319 align:start position:0%
cook up a new data element
 

00:58:12.319 --> 00:58:13.829 align:start position:0%
cook up a new data element
and<00:58:12.559><c> sort</c><00:58:12.720><c> of</c><00:58:12.799><c> swap</c><00:58:13.200><c> it</c><00:58:13.280><c> into</c><00:58:13.520><c> the</c><00:58:13.599><c> data</c>

00:58:13.829 --> 00:58:13.839 align:start position:0%
and sort of swap it into the data
 

00:58:13.839 --> 00:58:16.950 align:start position:0%
and sort of swap it into the data
structure<00:58:14.319><c> with</c><00:58:14.480><c> a</c><00:58:14.880><c> single</c><00:58:15.200><c> committing</c><00:58:15.599><c> right</c>

00:58:16.950 --> 00:58:16.960 align:start position:0%
structure with a single committing right
 

00:58:16.960 --> 00:58:19.270 align:start position:0%
structure with a single committing right
oh<00:58:17.200><c> oh</c><00:58:17.440><c> and</c><00:58:17.599><c> the</c><00:58:17.760><c> swapping</c><00:58:18.319><c> will</c><00:58:18.400><c> be</c><00:58:18.640><c> atomic</c><00:58:19.119><c> so</c>

00:58:19.270 --> 00:58:19.280 align:start position:0%
oh oh and the swapping will be atomic so
 

00:58:19.280 --> 00:58:21.270 align:start position:0%
oh oh and the swapping will be atomic so
there's<00:58:19.520><c> no</c><00:58:19.760><c> problem</c><00:58:20.160><c> over</c><00:58:20.319><c> like</c>

00:58:21.270 --> 00:58:21.280 align:start position:0%
there's no problem over like
 

00:58:21.280 --> 00:58:22.870 align:start position:0%
there's no problem over like
because<00:58:21.520><c> that's</c><00:58:21.760><c> a</c><00:58:22.000><c> single</c><00:58:22.319><c> pointer</c><00:58:22.720><c> right</c>

00:58:22.870 --> 00:58:22.880 align:start position:0%
because that's a single pointer right
 

00:58:22.880 --> 00:58:24.870 align:start position:0%
because that's a single pointer right
which<00:58:23.119><c> is</c><00:58:23.280><c> atomic</c><00:58:23.760><c> whereas</c><00:58:24.240><c> overwriting</c><00:58:24.799><c> a</c>

00:58:24.870 --> 00:58:24.880 align:start position:0%
which is atomic whereas overwriting a
 

00:58:24.880 --> 00:58:25.750 align:start position:0%
which is atomic whereas overwriting a
string<00:58:25.280><c> is</c>

00:58:25.750 --> 00:58:25.760 align:start position:0%
string is
 

00:58:25.760 --> 00:58:30.950 align:start position:0%
string is
completely<00:58:26.240><c> not</c><00:58:26.400><c> atomic</c><00:58:28.160><c> that</c><00:58:28.319><c> makes</c><00:58:28.480><c> sense</c>

00:58:30.950 --> 00:58:30.960 align:start position:0%
 
 

00:58:30.960 --> 00:58:34.309 align:start position:0%
 
other<00:58:31.200><c> questions</c><00:58:33.359><c> um</c><00:58:33.920><c> does</c>

00:58:34.309 --> 00:58:34.319 align:start position:0%
other questions um does
 

00:58:34.319 --> 00:58:37.670 align:start position:0%
other questions um does
condition<00:58:34.880><c> one</c><00:58:35.440><c> in</c><00:58:36.160><c> um</c>

00:58:37.670 --> 00:58:37.680 align:start position:0%
condition one in um
 

00:58:37.680 --> 00:58:39.510 align:start position:0%
condition one in um
idea<00:58:38.079><c> three</c><00:58:38.319><c> mean</c><00:58:38.480><c> we</c><00:58:38.640><c> need</c><00:58:38.720><c> to</c><00:58:38.880><c> be</c><00:58:39.040><c> careful</c>

00:58:39.510 --> 00:58:39.520 align:start position:0%
idea three mean we need to be careful
 

00:58:39.520 --> 00:58:41.430 align:start position:0%
idea three mean we need to be careful
about<00:58:40.079><c> how</c><00:58:40.319><c> much</c><00:58:40.640><c> work</c><00:58:40.880><c> we</c><00:58:41.040><c> put</c>

00:58:41.430 --> 00:58:41.440 align:start position:0%
about how much work we put
 

00:58:41.440 --> 00:58:43.589 align:start position:0%
about how much work we put
inside<00:58:41.760><c> those</c><00:58:42.000><c> protected</c><00:58:42.559><c> sections</c><00:58:43.119><c> since</c><00:58:43.440><c> it</c>

00:58:43.589 --> 00:58:43.599 align:start position:0%
inside those protected sections since it
 

00:58:43.599 --> 00:58:44.950 align:start position:0%
inside those protected sections since it
kind<00:58:43.760><c> of</c><00:58:43.920><c> hogs</c><00:58:44.319><c> the</c>

00:58:44.950 --> 00:58:44.960 align:start position:0%
kind of hogs the
 

00:58:44.960 --> 00:58:48.150 align:start position:0%
kind of hogs the
the<00:58:45.119><c> core</c><00:58:45.440><c> for</c><00:58:46.000><c> that</c><00:58:46.240><c> entire</c><00:58:46.559><c> section</c>

00:58:48.150 --> 00:58:48.160 align:start position:0%
the core for that entire section
 

00:58:48.160 --> 00:58:52.470 align:start position:0%
the core for that entire section
yes<00:58:48.640><c> yes</c><00:58:49.119><c> so</c><00:58:49.119><c> so</c><00:58:49.520><c> this</c><00:58:49.680><c> is</c><00:58:49.920><c> uh</c><00:58:50.960><c> that's</c><00:58:51.200><c> right</c><00:58:51.440><c> so</c>

00:58:52.470 --> 00:58:52.480 align:start position:0%
yes yes so so this is uh that's right so
 

00:58:52.480 --> 00:58:54.549 align:start position:0%
yes yes so so this is uh that's right so
um<00:58:52.960><c> readers</c><00:58:53.359><c> in</c><00:58:53.440><c> the</c><00:58:53.599><c> sort</c><00:58:53.760><c> of</c><00:58:53.839><c> rcu</c><00:58:54.240><c> critical</c>

00:58:54.549 --> 00:58:54.559 align:start position:0%
um readers in the sort of rcu critical
 

00:58:54.559 --> 00:58:55.910 align:start position:0%
um readers in the sort of rcu critical
section<00:58:54.960><c> while</c><00:58:55.119><c> they're</c><00:58:55.280><c> looking</c><00:58:55.599><c> at</c><00:58:55.680><c> the</c>

00:58:55.910 --> 00:58:55.920 align:start position:0%
section while they're looking at the
 

00:58:55.920 --> 00:58:58.230 align:start position:0%
section while they're looking at the
protected<00:58:56.400><c> data</c><00:58:56.799><c> they</c><00:58:56.960><c> can't</c><00:58:57.200><c> context</c><00:58:57.599><c> switch</c>

00:58:58.230 --> 00:58:58.240 align:start position:0%
protected data they can't context switch
 

00:58:58.240 --> 00:59:01.990 align:start position:0%
protected data they can't context switch
and<00:58:58.400><c> so</c><00:58:58.559><c> you're</c><00:58:59.520><c> um</c>

00:59:01.990 --> 00:59:02.000 align:start position:0%
 
 

00:59:02.000 --> 00:59:03.349 align:start position:0%
 
you<00:59:02.160><c> know</c><00:59:02.240><c> you</c><00:59:02.400><c> want</c><00:59:02.559><c> to</c><00:59:02.640><c> keep</c><00:59:02.799><c> those</c><00:59:02.960><c> critical</c>

00:59:03.349 --> 00:59:03.359 align:start position:0%
you know you want to keep those critical
 

00:59:03.359 --> 00:59:06.870 align:start position:0%
you know you want to keep those critical
sections<00:59:03.680><c> short</c><00:59:04.799><c> now</c>

00:59:06.870 --> 00:59:06.880 align:start position:0%
sections short now
 

00:59:06.880 --> 00:59:09.670 align:start position:0%
sections short now
and<00:59:06.960><c> then</c><00:59:07.119><c> that's</c><00:59:07.359><c> a</c><00:59:07.440><c> consideration</c><00:59:08.319><c> um</c><00:59:09.280><c> the</c>

00:59:09.670 --> 00:59:09.680 align:start position:0%
and then that's a consideration um the
 

00:59:09.680 --> 00:59:11.670 align:start position:0%
and then that's a consideration um the
the<00:59:09.839><c> way</c><00:59:10.000><c> it</c><00:59:10.160><c> plays</c><00:59:10.559><c> out</c><00:59:10.799><c> though</c>

00:59:11.670 --> 00:59:11.680 align:start position:0%
the way it plays out though
 

00:59:11.680 --> 00:59:14.230 align:start position:0%
the way it plays out though
is<00:59:11.839><c> that</c><00:59:12.079><c> the</c><00:59:12.240><c> way</c><00:59:12.400><c> rcu's</c><00:59:12.880><c> been</c><00:59:13.040><c> deployed</c><00:59:14.079><c> is</c>

00:59:14.230 --> 00:59:14.240 align:start position:0%
is that the way rcu's been deployed is
 

00:59:14.240 --> 00:59:15.750 align:start position:0%
is that the way rcu's been deployed is
typically<00:59:14.640><c> that</c><00:59:14.799><c> there'll</c><00:59:14.960><c> be</c><00:59:15.119><c> some</c><00:59:15.359><c> piece</c><00:59:15.599><c> of</c>

00:59:15.750 --> 00:59:15.760 align:start position:0%
typically that there'll be some piece of
 

00:59:15.760 --> 00:59:16.789 align:start position:0%
typically that there'll be some piece of
code<00:59:16.000><c> in</c><00:59:16.160><c> linux</c>

00:59:16.789 --> 00:59:16.799 align:start position:0%
code in linux
 

00:59:16.799 --> 00:59:18.630 align:start position:0%
code in linux
that<00:59:16.960><c> was</c><00:59:17.119><c> protected</c><00:59:17.599><c> with</c><00:59:17.760><c> ordinary</c><00:59:18.240><c> locks</c>

00:59:18.630 --> 00:59:18.640 align:start position:0%
that was protected with ordinary locks
 

00:59:18.640 --> 00:59:20.309 align:start position:0%
that was protected with ordinary locks
or<00:59:18.880><c> read</c><00:59:19.119><c> write</c><00:59:19.359><c> logs</c>

00:59:20.309 --> 00:59:20.319 align:start position:0%
or read write logs
 

00:59:20.319 --> 00:59:22.870 align:start position:0%
or read write logs
and<00:59:20.559><c> somebody</c><00:59:21.200><c> you</c><00:59:21.359><c> know</c><00:59:21.520><c> for</c><00:59:21.680><c> some</c><00:59:21.920><c> workloads</c>

00:59:22.870 --> 00:59:22.880 align:start position:0%
and somebody you know for some workloads
 

00:59:22.880 --> 00:59:23.670 align:start position:0%
and somebody you know for some workloads
um

00:59:23.670 --> 00:59:23.680 align:start position:0%
um
 

00:59:23.680 --> 00:59:26.710 align:start position:0%
um
we'll<00:59:23.839><c> see</c><00:59:24.079><c> oh</c><00:59:24.240><c> that</c><00:59:24.480><c> lock</c><00:59:24.720><c> is</c><00:59:24.880><c> a</c><00:59:25.040><c> terrible</c>

00:59:26.710 --> 00:59:26.720 align:start position:0%
we'll see oh that lock is a terrible
 

00:59:26.720 --> 00:59:28.470 align:start position:0%
we'll see oh that lock is a terrible
performance<00:59:27.200><c> problem</c><00:59:27.599><c> and</c><00:59:27.680><c> they're</c><00:59:27.920><c> gonna</c>

00:59:28.470 --> 00:59:28.480 align:start position:0%
performance problem and they're gonna
 

00:59:28.480 --> 00:59:31.349 align:start position:0%
performance problem and they're gonna
replace<00:59:29.359><c> the</c><00:59:29.599><c> locking</c><00:59:30.000><c> critical</c><00:59:30.480><c> section</c>

00:59:31.349 --> 00:59:31.359 align:start position:0%
replace the locking critical section
 

00:59:31.359 --> 00:59:34.470 align:start position:0%
replace the locking critical section
with<00:59:31.520><c> an</c><00:59:31.680><c> rcu</c><00:59:32.240><c> critical</c><00:59:32.640><c> section</c><00:59:34.160><c> although</c>

00:59:34.470 --> 00:59:34.480 align:start position:0%
with an rcu critical section although
 

00:59:34.480 --> 00:59:36.789 align:start position:0%
with an rcu critical section although
sometimes<00:59:34.880><c> it's</c><00:59:34.960><c> more</c><00:59:35.200><c> involved</c><00:59:35.520><c> than</c><00:59:35.599><c> that</c>

00:59:36.789 --> 00:59:36.799 align:start position:0%
sometimes it's more involved than that
 

00:59:36.799 --> 00:59:38.630 align:start position:0%
sometimes it's more involved than that
and<00:59:36.960><c> since</c><00:59:37.280><c> locking</c><00:59:37.680><c> critical</c><00:59:38.000><c> sections</c><00:59:38.319><c> were</c>

00:59:38.630 --> 00:59:38.640 align:start position:0%
and since locking critical sections were
 

00:59:38.640 --> 00:59:40.710 align:start position:0%
and since locking critical sections were
already<00:59:39.440><c> it</c><00:59:39.520><c> was</c><00:59:39.760><c> extremely</c><00:59:40.240><c> important</c><00:59:40.640><c> to</c>

00:59:40.710 --> 00:59:40.720 align:start position:0%
already it was extremely important to
 

00:59:40.720 --> 00:59:41.670 align:start position:0%
already it was extremely important to
make<00:59:40.880><c> them</c><00:59:41.119><c> short</c>

00:59:41.670 --> 00:59:41.680 align:start position:0%
make them short
 

00:59:41.680 --> 00:59:43.430 align:start position:0%
make them short
because<00:59:41.920><c> while</c><00:59:42.079><c> you</c><00:59:42.240><c> hold</c><00:59:42.480><c> a</c><00:59:42.559><c> lock</c><00:59:43.119><c> there</c><00:59:43.280><c> may</c>

00:59:43.430 --> 00:59:43.440 align:start position:0%
because while you hold a lock there may
 

00:59:43.440 --> 00:59:44.870 align:start position:0%
because while you hold a lock there may
be<00:59:43.520><c> lots</c><00:59:43.760><c> of</c><00:59:43.839><c> other</c><00:59:44.000><c> cores</c><00:59:44.240><c> waiting</c><00:59:44.559><c> for</c><00:59:44.640><c> that</c>

00:59:44.870 --> 00:59:44.880 align:start position:0%
be lots of other cores waiting for that
 

00:59:44.880 --> 00:59:46.230 align:start position:0%
be lots of other cores waiting for that
lock<00:59:45.119><c> so</c><00:59:45.280><c> there's</c><00:59:45.440><c> a</c><00:59:45.520><c> lot</c><00:59:45.680><c> of</c><00:59:45.839><c> pressure</c><00:59:46.160><c> to</c>

00:59:46.230 --> 00:59:46.240 align:start position:0%
lock so there's a lot of pressure to
 

00:59:46.240 --> 00:59:46.870 align:start position:0%
lock so there's a lot of pressure to
keep

00:59:46.870 --> 00:59:46.880 align:start position:0%
keep
 

00:59:46.880 --> 00:59:49.589 align:start position:0%
keep
ordinary<00:59:47.359><c> lock</c><00:59:47.599><c> critical</c><00:59:48.000><c> sections</c><00:59:48.400><c> short</c>

00:59:49.589 --> 00:59:49.599 align:start position:0%
ordinary lock critical sections short
 

00:59:49.599 --> 00:59:51.990 align:start position:0%
ordinary lock critical sections short
because<00:59:49.920><c> rcu</c><00:59:50.400><c> critical</c><00:59:50.720><c> sections</c><00:59:51.119><c> are</c><00:59:51.200><c> often</c>

00:59:51.990 --> 00:59:52.000 align:start position:0%
because rcu critical sections are often
 

00:59:52.000 --> 00:59:54.870 align:start position:0%
because rcu critical sections are often
sort<00:59:52.240><c> of</c><00:59:52.400><c> revised</c><00:59:53.599><c> lock</c><00:59:53.920><c> critical</c><00:59:54.640><c> things</c>

00:59:54.870 --> 00:59:54.880 align:start position:0%
sort of revised lock critical things
 

00:59:54.880 --> 00:59:56.549 align:start position:0%
sort of revised lock critical things
that<00:59:54.960><c> used</c><00:59:55.119><c> to</c><00:59:55.200><c> be</c><00:59:55.280><c> locked</c><00:59:55.520><c> critical</c><00:59:55.920><c> sections</c>

00:59:56.549 --> 00:59:56.559 align:start position:0%
that used to be locked critical sections
 

00:59:56.559 --> 01:00:00.150 align:start position:0%
that used to be locked critical sections
they<00:59:56.720><c> tend</c><00:59:56.960><c> to</c><00:59:57.040><c> be</c><00:59:57.200><c> short</c><00:59:57.520><c> also</c><00:59:59.520><c> and</c>

01:00:00.150 --> 01:00:00.160 align:start position:0%
they tend to be short also and
 

01:00:00.160 --> 01:00:03.589 align:start position:0%
they tend to be short also and
you<01:00:00.319><c> know</c><01:00:00.400><c> that</c><01:00:00.559><c> means</c><01:00:00.880><c> that</c><01:00:03.119><c> you</c><01:00:03.280><c> know</c><01:00:03.440><c> not</c>

01:00:03.589 --> 01:00:03.599 align:start position:0%
you know that means that you know not
 

01:00:03.599 --> 01:00:04.630 align:start position:0%
you know that means that you know not
always<01:00:04.000><c> but</c>

01:00:04.630 --> 01:00:04.640 align:start position:0%
always but
 

01:00:04.640 --> 01:00:08.870 align:start position:0%
always but
usually<01:00:05.760><c> um</c><01:00:06.319><c> there's</c><01:00:06.559><c> not</c><01:00:06.799><c> a</c>

01:00:08.870 --> 01:00:08.880 align:start position:0%
usually um there's not a
 

01:00:08.880 --> 01:00:10.789 align:start position:0%
usually um there's not a
not<01:00:09.119><c> a</c><01:00:09.200><c> direct</c><01:00:09.520><c> worry</c><01:00:09.920><c> about</c><01:00:10.079><c> keeping</c><01:00:10.400><c> the</c><01:00:10.480><c> rcu</c>

01:00:10.789 --> 01:00:10.799 align:start position:0%
not a direct worry about keeping the rcu
 

01:00:10.799 --> 01:00:12.950 align:start position:0%
not a direct worry about keeping the rcu
critical<01:00:11.200><c> section</c><01:00:11.520><c> short</c>

01:00:12.950 --> 01:00:12.960 align:start position:0%
critical section short
 

01:00:12.960 --> 01:00:15.670 align:start position:0%
critical section short
um<01:00:13.359><c> although</c><01:00:13.599><c> it</c><01:00:13.760><c> is</c><01:00:13.920><c> a</c><01:00:14.000><c> constraint</c><01:00:15.359><c> the</c><01:00:15.520><c> the</c>

01:00:15.670 --> 01:00:15.680 align:start position:0%
um although it is a constraint the the
 

01:00:15.680 --> 01:00:16.710 align:start position:0%
um although it is a constraint the the
real<01:00:15.839><c> constraint</c><01:00:16.240><c> actually</c><01:00:16.400><c> is</c><01:00:16.480><c> you're</c><01:00:16.640><c> not</c>

01:00:16.710 --> 01:00:16.720 align:start position:0%
real constraint actually is you're not
 

01:00:16.720 --> 01:00:18.710 align:start position:0%
real constraint actually is you're not
allowed<01:00:16.960><c> to</c><01:00:17.040><c> hold</c><01:00:17.280><c> pointers</c><01:00:17.680><c> over</c><01:00:17.920><c> con</c>

01:00:18.710 --> 01:00:18.720 align:start position:0%
allowed to hold pointers over con
 

01:00:18.720 --> 01:00:21.030 align:start position:0%
allowed to hold pointers over con
pointers<01:00:19.119><c> to</c><01:00:19.280><c> rcu</c><01:00:19.760><c> data</c><01:00:20.319><c> over</c><01:00:20.559><c> context</c>

01:00:21.030 --> 01:00:21.040 align:start position:0%
pointers to rcu data over context
 

01:00:21.040 --> 01:00:22.230 align:start position:0%
pointers to rcu data over context
switches

01:00:22.230 --> 01:00:22.240 align:start position:0%
switches
 

01:00:22.240 --> 01:00:24.950 align:start position:0%
switches
um<01:00:23.520><c> and</c><01:00:23.680><c> that's</c><01:00:23.920><c> actually</c><01:00:24.400><c> that</c><01:00:24.559><c> mean</c><01:00:24.720><c> you</c>

01:00:24.950 --> 01:00:24.960 align:start position:0%
um and that's actually that mean you
 

01:00:24.960 --> 01:00:26.710 align:start position:0%
um and that's actually that mean you
can't<01:00:25.119><c> for</c><01:00:25.280><c> example</c><01:00:25.599><c> read</c><01:00:25.839><c> the</c><01:00:26.000><c> disk</c><01:00:26.400><c> and</c>

01:00:26.710 --> 01:00:26.720 align:start position:0%
can't for example read the disk and
 

01:00:26.720 --> 01:00:28.950 align:start position:0%
can't for example read the disk and
wait<01:00:26.960><c> for</c><01:00:27.119><c> the</c><01:00:27.200><c> disk</c><01:00:27.440><c> weed</c><01:00:27.599><c> to</c><01:00:27.680><c> complete</c><01:00:28.400><c> while</c>

01:00:28.950 --> 01:00:28.960 align:start position:0%
wait for the disk weed to complete while
 

01:00:28.960 --> 01:00:30.549 align:start position:0%
wait for the disk weed to complete while
while<01:00:29.200><c> holding</c><01:00:29.520><c> on</c><01:00:29.760><c> a</c><01:00:29.839><c> pointer</c>

01:00:30.549 --> 01:00:30.559 align:start position:0%
while holding on a pointer
 

01:00:30.559 --> 01:00:34.470 align:start position:0%
while holding on a pointer
onto<01:00:30.799><c> a</c><01:00:30.880><c> pointer</c><01:00:31.280><c> to</c><01:00:31.599><c> rcu</c><01:00:32.000><c> protected</c><01:00:32.480><c> data</c>

01:00:34.470 --> 01:00:34.480 align:start position:0%
onto a pointer to rcu protected data
 

01:00:34.480 --> 01:00:36.870 align:start position:0%
onto a pointer to rcu protected data
so<01:00:34.720><c> it's</c><01:00:34.799><c> not</c><01:00:35.119><c> quite</c><01:00:35.359><c> so</c><01:00:35.520><c> much</c><01:00:35.839><c> the</c><01:00:36.559><c> or</c><01:00:36.799><c> the</c>

01:00:36.870 --> 01:00:36.880 align:start position:0%
so it's not quite so much the or the
 

01:00:36.880 --> 01:00:38.309 align:start position:0%
so it's not quite so much the or the
thing<01:00:37.040><c> that</c><01:00:37.200><c> usually</c><01:00:37.440><c> comes</c><01:00:37.680><c> up</c><01:00:37.839><c> is</c><01:00:37.920><c> not</c><01:00:38.160><c> the</c>

01:00:38.309 --> 01:00:38.319 align:start position:0%
thing that usually comes up is not the
 

01:00:38.319 --> 01:00:39.829 align:start position:0%
thing that usually comes up is not the
length<01:00:38.559><c> of</c><01:00:38.640><c> the</c><01:00:38.720><c> critical</c><01:00:39.119><c> section</c><01:00:39.440><c> so</c><01:00:39.599><c> much</c>

01:00:39.829 --> 01:00:39.839 align:start position:0%
length of the critical section so much
 

01:00:39.839 --> 01:00:40.470 align:start position:0%
length of the critical section so much
as

01:00:40.470 --> 01:00:40.480 align:start position:0%
as
 

01:00:40.480 --> 01:00:48.789 align:start position:0%
as
the<01:00:41.119><c> prohibition</c><01:00:41.839><c> against</c><01:00:42.240><c> yielding</c><01:00:42.799><c> cpu</c>

01:00:48.789 --> 01:00:48.799 align:start position:0%
 
 

01:00:48.799 --> 01:00:53.349 align:start position:0%
 
okay

01:00:53.349 --> 01:00:53.359 align:start position:0%
 
 

01:00:53.359 --> 01:00:56.309 align:start position:0%
 
let's<01:00:53.520><c> see</c><01:00:53.760><c> so</c><01:00:54.319><c> just</c><01:00:54.559><c> to</c><01:00:54.640><c> kind</c><01:00:54.799><c> of</c><01:00:55.520><c> firm</c><01:00:55.920><c> up</c><01:00:56.160><c> but</c>

01:00:56.309 --> 01:00:56.319 align:start position:0%
let's see so just to kind of firm up but
 

01:00:56.319 --> 01:00:57.030 align:start position:0%
let's see so just to kind of firm up but
i

01:00:57.030 --> 01:00:57.040 align:start position:0%
i
 

01:00:57.040 --> 01:00:59.589 align:start position:0%
i
all<01:00:57.200><c> the</c><01:00:57.359><c> stuff</c><01:00:57.520><c> i</c><01:00:57.680><c> just</c><01:00:57.839><c> talked</c><01:00:58.079><c> about</c><01:00:59.280><c> here's</c>

01:00:59.589 --> 01:00:59.599 align:start position:0%
all the stuff i just talked about here's
 

01:00:59.599 --> 01:01:01.270 align:start position:0%
all the stuff i just talked about here's
a

01:01:01.270 --> 01:01:01.280 align:start position:0%
a
 

01:01:01.280 --> 01:01:03.589 align:start position:0%
a
kind<01:01:01.440><c> of</c><01:01:01.520><c> what</c><01:01:01.680><c> you</c><01:01:01.760><c> would</c><01:01:02.079><c> see</c><01:01:02.480><c> in</c><01:01:02.640><c> a</c><01:01:02.799><c> simple</c>

01:01:03.589 --> 01:01:03.599 align:start position:0%
kind of what you would see in a simple
 

01:01:03.599 --> 01:01:05.270 align:start position:0%
kind of what you would see in a simple
use<01:01:04.160><c> of</c>

01:01:05.270 --> 01:01:05.280 align:start position:0%
use of
 

01:01:05.280 --> 01:01:08.150 align:start position:0%
use of
rcu<01:01:05.920><c> so</c><01:01:06.079><c> this</c><01:01:06.240><c> is</c><01:01:06.400><c> code</c><01:01:07.359><c> you</c><01:01:07.520><c> might</c><01:01:07.760><c> see</c><01:01:07.920><c> for</c>

01:01:08.150 --> 01:01:08.160 align:start position:0%
rcu so this is code you might see for
 

01:01:08.160 --> 01:01:11.510 align:start position:0%
rcu so this is code you might see for
reading<01:01:08.480><c> a</c><01:01:08.839><c> list</c>

01:01:11.510 --> 01:01:11.520 align:start position:0%
reading a list
 

01:01:11.520 --> 01:01:13.030 align:start position:0%
reading a list
an<01:01:11.760><c> rcu</c><01:01:12.160><c> protected</c><01:01:12.480><c> list</c><01:01:12.720><c> and</c><01:01:12.799><c> this</c><01:01:12.880><c> is</c><01:01:12.960><c> the</c>

01:01:13.030 --> 01:01:13.040 align:start position:0%
an rcu protected list and this is the
 

01:01:13.040 --> 01:01:14.710 align:start position:0%
an rcu protected list and this is the
code<01:01:13.200><c> you</c><01:01:13.359><c> might</c><01:01:13.520><c> see</c><01:01:13.680><c> it</c><01:01:13.920><c> on</c><01:01:14.000><c> the</c><01:01:14.079><c> right</c><01:01:14.400><c> side</c>

01:01:14.710 --> 01:01:14.720 align:start position:0%
code you might see it on the right side
 

01:01:14.720 --> 01:01:15.030 align:start position:0%
code you might see it on the right side
if

01:01:15.030 --> 01:01:15.040 align:start position:0%
if
 

01:01:15.040 --> 01:01:17.750 align:start position:0%
if
for<01:01:15.200><c> code</c><01:01:15.440><c> that</c><01:01:15.599><c> just</c><01:01:15.920><c> wants</c><01:01:16.160><c> to</c><01:01:17.520><c> the</c>

01:01:17.750 --> 01:01:17.760 align:start position:0%
for code that just wants to the
 

01:01:17.760 --> 01:01:19.670 align:start position:0%
for code that just wants to the
particular<01:01:18.240><c> case</c><01:01:18.480><c> of</c><01:01:18.559><c> replacing</c><01:01:19.040><c> the</c><01:01:19.200><c> first</c>

01:01:19.670 --> 01:01:19.680 align:start position:0%
particular case of replacing the first
 

01:01:19.680 --> 01:01:22.390 align:start position:0%
particular case of replacing the first
list<01:01:20.000><c> element</c><01:01:20.640><c> so</c><01:01:20.799><c> in</c><01:01:20.880><c> the</c><01:01:20.960><c> read</c><01:01:21.280><c> side</c><01:01:22.160><c> there</c>

01:01:22.390 --> 01:01:22.400 align:start position:0%
list element so in the read side there
 

01:01:22.400 --> 01:01:24.230 align:start position:0%
list element so in the read side there
is<01:01:22.559><c> actually</c><01:01:22.880><c> this</c><01:01:23.599><c> um</c>

01:01:24.230 --> 01:01:24.240 align:start position:0%
is actually this um
 

01:01:24.240 --> 01:01:27.589 align:start position:0%
is actually this um
these<01:01:24.640><c> read</c><01:01:24.880><c> lock</c><01:01:25.200><c> and</c><01:01:25.280><c> read</c><01:01:25.599><c> unlock</c><01:01:26.240><c> calls</c>

01:01:27.589 --> 01:01:27.599 align:start position:0%
these read lock and read unlock calls
 

01:01:27.599 --> 01:01:30.710 align:start position:0%
these read lock and read unlock calls
those<01:01:28.000><c> do</c><01:01:28.400><c> almost</c><01:01:28.960><c> nothing</c><01:01:29.520><c> almost</c><01:01:29.920><c> nothing</c>

01:01:30.710 --> 01:01:30.720 align:start position:0%
those do almost nothing almost nothing
 

01:01:30.720 --> 01:01:34.230 align:start position:0%
those do almost nothing almost nothing
um<01:01:32.079><c> the</c><01:01:32.319><c> only</c><01:01:32.960><c> the</c><01:01:33.200><c> only</c><01:01:33.520><c> little</c><01:01:33.839><c> thing</c><01:01:34.079><c> they</c>

01:01:34.230 --> 01:01:34.240 align:start position:0%
um the only the only little thing they
 

01:01:34.240 --> 01:01:34.549 align:start position:0%
um the only the only little thing they
do

01:01:34.549 --> 01:01:34.559 align:start position:0%
do
 

01:01:34.559 --> 01:01:37.750 align:start position:0%
do
is<01:01:34.799><c> set</c><01:01:35.040><c> a</c><01:01:35.200><c> flag</c><01:01:35.920><c> that</c><01:01:36.160><c> says</c><01:01:36.559><c> or</c><01:01:36.799><c> rcu</c><01:01:37.280><c> relock</c>

01:01:37.750 --> 01:01:37.760 align:start position:0%
is set a flag that says or rcu relock
 

01:01:37.760 --> 01:01:40.069 align:start position:0%
is set a flag that says or rcu relock
sets<01:01:38.000><c> a</c><01:01:38.079><c> flag</c><01:01:38.400><c> that</c><01:01:38.559><c> says</c><01:01:39.520><c> if</c><01:01:39.680><c> a</c><01:01:39.760><c> timer</c>

01:01:40.069 --> 01:01:40.079 align:start position:0%
sets a flag that says if a timer
 

01:01:40.079 --> 01:01:41.109 align:start position:0%
sets a flag that says if a timer
interrupt<01:01:40.480><c> happens</c>

01:01:41.109 --> 01:01:41.119 align:start position:0%
interrupt happens
 

01:01:41.119 --> 01:01:43.030 align:start position:0%
interrupt happens
please<01:01:41.440><c> don't</c><01:01:41.680><c> context</c><01:01:42.079><c> switch</c><01:01:42.720><c> because</c><01:01:42.880><c> i'm</c>

01:01:43.030 --> 01:01:43.040 align:start position:0%
please don't context switch because i'm
 

01:01:43.040 --> 01:01:44.630 align:start position:0%
please don't context switch because i'm
in<01:01:43.119><c> the</c><01:01:43.200><c> middle</c><01:01:43.520><c> of</c><01:01:43.680><c> a</c>

01:01:44.630 --> 01:01:44.640 align:start position:0%
in the middle of a
 

01:01:44.640 --> 01:01:46.470 align:start position:0%
in the middle of a
rcu<01:01:45.200><c> critical</c><01:01:45.599><c> section</c><01:01:45.920><c> so</c><01:01:46.079><c> that's</c><01:01:46.240><c> all</c><01:01:46.400><c> it</c>

01:01:46.470 --> 01:01:46.480 align:start position:0%
rcu critical section so that's all it
 

01:01:46.480 --> 01:01:48.230 align:start position:0%
rcu critical section so that's all it
really<01:01:46.640><c> does</c><01:01:46.880><c> is</c><01:01:47.040><c> set</c><01:01:47.200><c> a</c><01:01:47.280><c> flag</c><01:01:47.599><c> that</c>

01:01:48.230 --> 01:01:48.240 align:start position:0%
really does is set a flag that
 

01:01:48.240 --> 01:01:50.230 align:start position:0%
really does is set a flag that
prohibits<01:01:49.040><c> timer</c><01:01:49.440><c> interrupt</c><01:01:49.839><c> context</c>

01:01:50.230 --> 01:01:50.240 align:start position:0%
prohibits timer interrupt context
 

01:01:50.240 --> 01:01:51.670 align:start position:0%
prohibits timer interrupt context
switches<01:01:50.720><c> the</c><01:01:50.799><c> interrupt</c><01:01:51.119><c> may</c><01:01:51.280><c> still</c><01:01:51.440><c> happen</c>

01:01:51.670 --> 01:01:51.680 align:start position:0%
switches the interrupt may still happen
 

01:01:51.680 --> 01:01:53.349 align:start position:0%
switches the interrupt may still happen
but<01:01:51.839><c> it</c><01:01:51.920><c> won't</c><01:01:52.160><c> context</c><01:01:52.480><c> switch</c>

01:01:53.349 --> 01:01:53.359 align:start position:0%
but it won't context switch
 

01:01:53.359 --> 01:01:56.069 align:start position:0%
but it won't context switch
and<01:01:53.440><c> then</c><01:01:53.599><c> read</c><01:01:53.920><c> unlock</c><01:01:54.880><c> unsets</c><01:01:55.359><c> that</c><01:01:55.520><c> flag</c>

01:01:56.069 --> 01:01:56.079 align:start position:0%
and then read unlock unsets that flag
 

01:01:56.079 --> 01:01:56.870 align:start position:0%
and then read unlock unsets that flag
really<01:01:56.319><c> it's</c><01:01:56.480><c> a</c>

01:01:56.870 --> 01:01:56.880 align:start position:0%
really it's a
 

01:01:56.880 --> 01:01:59.750 align:start position:0%
really it's a
you<01:01:57.039><c> know</c><01:01:57.200><c> counter</c><01:01:57.599><c> of</c><01:01:57.839><c> nested</c><01:01:58.960><c> rcu</c><01:01:59.359><c> critical</c>

01:01:59.750 --> 01:01:59.760 align:start position:0%
you know counter of nested rcu critical
 

01:01:59.760 --> 01:02:00.390 align:start position:0%
you know counter of nested rcu critical
sections

01:02:00.390 --> 01:02:00.400 align:start position:0%
sections
 

01:02:00.400 --> 01:02:01.750 align:start position:0%
sections
so<01:02:00.559><c> these</c><01:02:00.720><c> two</c><01:02:00.880><c> functions</c><01:02:01.200><c> are</c><01:02:01.280><c> extremely</c>

01:02:01.750 --> 01:02:01.760 align:start position:0%
so these two functions are extremely
 

01:02:01.760 --> 01:02:04.630 align:start position:0%
so these two functions are extremely
fast<01:02:02.000><c> and</c><01:02:02.079><c> do</c><01:02:02.240><c> almost</c><01:02:02.559><c> nothing</c>

01:02:04.630 --> 01:02:04.640 align:start position:0%
fast and do almost nothing
 

01:02:04.640 --> 01:02:06.470 align:start position:0%
fast and do almost nothing
and<01:02:04.720><c> then</c><01:02:04.960><c> this</c><01:02:05.200><c> loop</c><01:02:05.440><c> would</c><01:02:05.680><c> sort</c><01:02:05.839><c> of</c><01:02:06.000><c> scan</c>

01:02:06.470 --> 01:02:06.480 align:start position:0%
and then this loop would sort of scan
 

01:02:06.480 --> 01:02:09.029 align:start position:0%
and then this loop would sort of scan
down<01:02:06.799><c> the</c><01:02:07.039><c> uh</c>

01:02:09.029 --> 01:02:09.039 align:start position:0%
down the uh
 

01:02:09.039 --> 01:02:13.109 align:start position:0%
down the uh
um<01:02:10.240><c> our</c><01:02:10.480><c> list</c><01:02:11.359><c> this</c><01:02:11.680><c> is</c><01:02:11.760><c> the</c><01:02:12.000><c> call</c>

01:02:13.109 --> 01:02:13.119 align:start position:0%
um our list this is the call
 

01:02:13.119 --> 01:02:16.069 align:start position:0%
um our list this is the call
that<01:02:13.359><c> um</c><01:02:14.240><c> inserts</c><01:02:14.640><c> the</c><01:02:14.799><c> memory</c><01:02:15.280><c> barrier</c><01:02:15.920><c> so</c>

01:02:16.069 --> 01:02:16.079 align:start position:0%
that um inserts the memory barrier so
 

01:02:16.079 --> 01:02:17.829 align:start position:0%
that um inserts the memory barrier so
what<01:02:16.319><c> rc</c>

01:02:17.829 --> 01:02:17.839 align:start position:0%
what rc
 

01:02:17.839 --> 01:02:19.990 align:start position:0%
what rc
this<01:02:18.000><c> really</c><01:02:18.240><c> boils</c><01:02:18.480><c> down</c><01:02:18.640><c> to</c><01:02:18.799><c> just</c><01:02:18.960><c> a</c><01:02:19.039><c> couple</c>

01:02:19.990 --> 01:02:20.000 align:start position:0%
this really boils down to just a couple
 

01:02:20.000 --> 01:02:21.029 align:start position:0%
this really boils down to just a couple
of<01:02:20.160><c> instructions</c>

01:02:21.029 --> 01:02:21.039 align:start position:0%
of instructions
 

01:02:21.039 --> 01:02:24.630 align:start position:0%
of instructions
it<01:02:21.119><c> just</c><01:02:21.680><c> reads</c>

01:02:24.630 --> 01:02:24.640 align:start position:0%
 
 

01:02:24.640 --> 01:02:26.470 align:start position:0%
 
it<01:02:24.799><c> grabs</c><01:02:25.359><c> a</c><01:02:25.440><c> copy</c><01:02:25.760><c> of</c><01:02:25.839><c> this</c><01:02:26.079><c> pointer</c><01:02:26.319><c> from</c>

01:02:26.470 --> 01:02:26.480 align:start position:0%
it grabs a copy of this pointer from
 

01:02:26.480 --> 01:02:29.190 align:start position:0%
it grabs a copy of this pointer from
memory<01:02:27.359><c> issues</c><01:02:27.760><c> a</c><01:02:27.839><c> memory</c><01:02:28.240><c> barrier</c>

01:02:29.190 --> 01:02:29.200 align:start position:0%
memory issues a memory barrier
 

01:02:29.200 --> 01:02:37.109 align:start position:0%
memory issues a memory barrier
and<01:02:29.280><c> then</c><01:02:29.680><c> returns</c><01:02:30.160><c> that</c><01:02:32.839><c> pointer</c>

01:02:37.109 --> 01:02:37.119 align:start position:0%
 
 

01:02:37.119 --> 01:02:39.270 align:start position:0%
 
and<01:02:37.200><c> then</c><01:02:37.359><c> we</c><01:02:37.520><c> can</c><01:02:37.599><c> look</c><01:02:37.839><c> at</c><01:02:37.920><c> the</c><01:02:38.000><c> content</c><01:02:39.200><c> and</c>

01:02:39.270 --> 01:02:39.280 align:start position:0%
and then we can look at the content and
 

01:02:39.280 --> 01:02:41.750 align:start position:0%
and then we can look at the content and
go<01:02:39.440><c> on</c><01:02:39.520><c> to</c><01:02:39.599><c> the</c><01:02:39.680><c> next</c><01:02:39.920><c> list</c><01:02:40.240><c> element</c>

01:02:41.750 --> 01:02:41.760 align:start position:0%
go on to the next list element
 

01:02:41.760 --> 01:02:45.349 align:start position:0%
go on to the next list element
so<01:02:41.920><c> the</c><01:02:42.000><c> readers</c><01:02:44.480><c> quite</c><01:02:44.720><c> simple</c>

01:02:45.349 --> 01:02:45.359 align:start position:0%
so the readers quite simple
 

01:02:45.359 --> 01:02:47.109 align:start position:0%
so the readers quite simple
the<01:02:45.520><c> writer's</c><01:02:45.839><c> a</c><01:02:45.920><c> little</c><01:02:46.079><c> more</c><01:02:46.240><c> involved</c>

01:02:47.109 --> 01:02:47.119 align:start position:0%
the writer's a little more involved
 

01:02:47.119 --> 01:02:49.670 align:start position:0%
the writer's a little more involved
writers<01:02:47.599><c> still</c>

01:02:49.670 --> 01:02:49.680 align:start position:0%
writers still
 

01:02:49.680 --> 01:02:51.510 align:start position:0%
writers still
you<01:02:49.760><c> know</c><01:02:49.839><c> the</c><01:02:50.000><c> rcu</c><01:02:50.400><c> doesn't</c><01:02:50.559><c> help</c><01:02:51.039><c> writers</c>

01:02:51.510 --> 01:02:51.520 align:start position:0%
you know the rcu doesn't help writers
 

01:02:51.520 --> 01:02:52.950 align:start position:0%
you know the rcu doesn't help writers
avoid<01:02:51.920><c> interfering</c><01:02:52.319><c> with</c><01:02:52.480><c> each</c><01:02:52.640><c> other</c><01:02:52.799><c> so</c>

01:02:52.950 --> 01:02:52.960 align:start position:0%
avoid interfering with each other so
 

01:02:52.960 --> 01:02:54.630 align:start position:0%
avoid interfering with each other so
writers<01:02:53.280><c> still</c><01:02:53.440><c> have</c><01:02:53.599><c> to</c><01:02:53.680><c> have</c><01:02:53.839><c> some</c><01:02:54.000><c> way</c><01:02:54.240><c> of</c>

01:02:54.630 --> 01:02:54.640 align:start position:0%
writers still have to have some way of
 

01:02:54.640 --> 01:02:56.470 align:start position:0%
writers still have to have some way of
making<01:02:54.880><c> sure</c><01:02:55.119><c> only</c><01:02:55.359><c> one</c><01:02:55.520><c> writer</c><01:02:55.920><c> modifies</c><01:02:56.400><c> the</c>

01:02:56.470 --> 01:02:56.480 align:start position:0%
making sure only one writer modifies the
 

01:02:56.480 --> 01:02:58.549 align:start position:0%
making sure only one writer modifies the
list<01:02:56.720><c> at</c><01:02:56.799><c> a</c><01:02:56.960><c> time</c><01:02:57.599><c> in</c><01:02:57.680><c> this</c><01:02:57.839><c> case</c>

01:02:58.549 --> 01:02:58.559 align:start position:0%
list at a time in this case
 

01:02:58.559 --> 01:03:01.029 align:start position:0%
list at a time in this case
i'm<01:02:58.640><c> just</c><01:02:58.880><c> imagining</c><01:02:59.280><c> we're</c><01:02:59.440><c> going</c><01:02:59.520><c> to</c><01:02:59.599><c> use</c>

01:03:01.029 --> 01:03:01.039 align:start position:0%
i'm just imagining we're going to use
 

01:03:01.039 --> 01:03:02.630 align:start position:0%
i'm just imagining we're going to use
ordinary<01:03:01.440><c> spin</c><01:03:01.760><c> locks</c><01:03:02.160><c> so</c><01:03:02.319><c> the</c><01:03:02.400><c> writer</c>

01:03:02.630 --> 01:03:02.640 align:start position:0%
ordinary spin locks so the writer
 

01:03:02.640 --> 01:03:04.549 align:start position:0%
ordinary spin locks so the writer
requires<01:03:03.039><c> the</c><01:03:03.200><c> lock</c>

01:03:04.549 --> 01:03:04.559 align:start position:0%
requires the lock
 

01:03:04.559 --> 01:03:06.230 align:start position:0%
requires the lock
if<01:03:04.720><c> we're</c><01:03:04.960><c> replacing</c><01:03:05.520><c> the</c><01:03:05.599><c> first</c><01:03:05.920><c> list</c>

01:03:06.230 --> 01:03:06.240 align:start position:0%
if we're replacing the first list
 

01:03:06.240 --> 01:03:07.589 align:start position:0%
if we're replacing the first list
element

01:03:07.589 --> 01:03:07.599 align:start position:0%
element
 

01:03:07.599 --> 01:03:10.309 align:start position:0%
element
we<01:03:07.760><c> need</c><01:03:07.920><c> to</c><01:03:08.000><c> save</c><01:03:08.240><c> a</c><01:03:08.319><c> copy</c><01:03:09.119><c> at</c><01:03:09.200><c> the</c><01:03:09.359><c> beginning</c>

01:03:10.309 --> 01:03:10.319 align:start position:0%
we need to save a copy at the beginning
 

01:03:10.319 --> 01:03:11.029 align:start position:0%
we need to save a copy at the beginning
because<01:03:10.480><c> we're</c><01:03:10.640><c> going</c><01:03:10.720><c> to</c><01:03:10.799><c> need</c><01:03:10.960><c> to</c>

01:03:11.029 --> 01:03:11.039 align:start position:0%
because we're going to need to
 

01:03:11.039 --> 01:03:12.230 align:start position:0%
because we're going to need to
eventually<01:03:11.520><c> free</c><01:03:11.839><c> it</c>

01:03:12.230 --> 01:03:12.240 align:start position:0%
eventually free it
 

01:03:12.240 --> 01:03:13.750 align:start position:0%
eventually free it
so<01:03:12.400><c> we</c><01:03:12.480><c> save</c><01:03:12.720><c> this</c><01:03:12.799><c> copy</c><01:03:13.119><c> of</c><01:03:13.200><c> the</c><01:03:13.280><c> oldest</c>

01:03:13.750 --> 01:03:13.760 align:start position:0%
so we save this copy of the oldest
 

01:03:13.760 --> 01:03:15.750 align:start position:0%
so we save this copy of the oldest
element<01:03:14.400><c> and</c><01:03:14.480><c> now</c><01:03:14.720><c> where</c><01:03:15.119><c> this</c><01:03:15.280><c> code</c><01:03:15.520><c> plays</c>

01:03:15.750 --> 01:03:15.760 align:start position:0%
element and now where this code plays
 

01:03:15.760 --> 01:03:17.510 align:start position:0%
element and now where this code plays
that<01:03:15.920><c> trick</c><01:03:16.240><c> i</c><01:03:16.319><c> talked</c><01:03:16.559><c> again</c><01:03:16.880><c> about</c>

01:03:17.510 --> 01:03:17.520 align:start position:0%
that trick i talked again about
 

01:03:17.520 --> 01:03:19.270 align:start position:0%
that trick i talked again about
allocating<01:03:18.079><c> a</c><01:03:18.160><c> complete</c><01:03:18.480><c> new</c><01:03:18.640><c> list</c><01:03:18.960><c> element</c>

01:03:19.270 --> 01:03:19.280 align:start position:0%
allocating a complete new list element
 

01:03:19.280 --> 01:03:21.349 align:start position:0%
allocating a complete new list element
to<01:03:19.440><c> hold</c><01:03:19.680><c> the</c><01:03:19.760><c> sort</c><01:03:20.000><c> of</c><01:03:20.160><c> updated</c>

01:03:21.349 --> 01:03:21.359 align:start position:0%
to hold the sort of updated
 

01:03:21.359 --> 01:03:24.069 align:start position:0%
to hold the sort of updated
uh<01:03:21.920><c> content</c><01:03:23.200><c> so</c><01:03:23.359><c> we're</c><01:03:23.520><c> going</c><01:03:23.599><c> to</c><01:03:23.680><c> allocate</c><01:03:24.000><c> a</c>

01:03:24.069 --> 01:03:24.079 align:start position:0%
uh content so we're going to allocate a
 

01:03:24.079 --> 01:03:25.589 align:start position:0%
uh content so we're going to allocate a
new<01:03:24.319><c> list</c><01:03:24.640><c> element</c><01:03:24.960><c> we're</c><01:03:25.119><c> going</c><01:03:25.200><c> to</c>

01:03:25.589 --> 01:03:25.599 align:start position:0%
new list element we're going to
 

01:03:25.599 --> 01:03:27.510 align:start position:0%
new list element we're going to
set<01:03:25.839><c> its</c><01:03:26.000><c> content</c><01:03:26.559><c> we're</c><01:03:26.720><c> going</c><01:03:26.799><c> to</c><01:03:27.200><c> set</c><01:03:27.440><c> the</c>

01:03:27.510 --> 01:03:27.520 align:start position:0%
set its content we're going to set the
 

01:03:27.520 --> 01:03:29.910 align:start position:0%
set its content we're going to set the
next<01:03:27.880><c> pointer</c>

01:03:29.910 --> 01:03:29.920 align:start position:0%
next pointer
 

01:03:29.920 --> 01:03:31.990 align:start position:0%
next pointer
to<01:03:30.079><c> the</c><01:03:30.160><c> next</c><01:03:30.400><c> pointer</c><01:03:30.720><c> in</c><01:03:30.799><c> the</c><01:03:30.960><c> old</c><01:03:31.680><c> first</c>

01:03:31.990 --> 01:03:32.000 align:start position:0%
to the next pointer in the old first
 

01:03:32.000 --> 01:03:34.309 align:start position:0%
to the next pointer in the old first
list<01:03:32.240><c> element</c><01:03:32.880><c> because</c><01:03:33.039><c> we're</c><01:03:33.200><c> replacing</c><01:03:33.760><c> it</c>

01:03:34.309 --> 01:03:34.319 align:start position:0%
list element because we're replacing it
 

01:03:34.319 --> 01:03:37.990 align:start position:0%
list element because we're replacing it
and<01:03:34.400><c> then</c><01:03:34.640><c> this</c><01:03:34.880><c> rcu</c><01:03:35.359><c> assign</c><01:03:35.839><c> pointer</c>

01:03:37.990 --> 01:03:38.000 align:start position:0%
and then this rcu assign pointer
 

01:03:38.000 --> 01:03:40.630 align:start position:0%
and then this rcu assign pointer
issues<01:03:38.400><c> a</c><01:03:38.480><c> memory</c><01:03:38.960><c> barrier</c><01:03:40.079><c> so</c><01:03:40.240><c> that</c><01:03:40.400><c> all</c>

01:03:40.630 --> 01:03:40.640 align:start position:0%
issues a memory barrier so that all
 

01:03:40.640 --> 01:03:41.349 align:start position:0%
issues a memory barrier so that all
these

01:03:41.349 --> 01:03:41.359 align:start position:0%
these
 

01:03:41.359 --> 01:03:44.390 align:start position:0%
these
these<01:03:41.599><c> writes</c><01:03:41.920><c> happened</c>

01:03:44.390 --> 01:03:44.400 align:start position:0%
these writes happened
 

01:03:44.400 --> 01:03:47.349 align:start position:0%
these writes happened
and<01:03:44.559><c> then</c><01:03:44.960><c> sets</c><01:03:46.240><c> the</c><01:03:46.400><c> pointer</c><01:03:46.799><c> pointed</c><01:03:47.039><c> to</c><01:03:47.280><c> by</c>

01:03:47.349 --> 01:03:47.359 align:start position:0%
and then sets the pointer pointed to by
 

01:03:47.359 --> 01:03:48.870 align:start position:0%
and then sets the pointer pointed to by
this<01:03:47.520><c> first</c><01:03:47.839><c> argument</c><01:03:48.160><c> to</c><01:03:48.319><c> be</c><01:03:48.400><c> equal</c><01:03:48.559><c> to</c><01:03:48.720><c> that</c>

01:03:48.870 --> 01:03:48.880 align:start position:0%
this first argument to be equal to that
 

01:03:48.880 --> 01:03:49.670 align:start position:0%
this first argument to be equal to that
so<01:03:49.039><c> basically</c>

01:03:49.670 --> 01:03:49.680 align:start position:0%
so basically
 

01:03:49.680 --> 01:03:51.670 align:start position:0%
so basically
this<01:03:49.920><c> just</c><01:03:50.240><c> issues</c><01:03:50.559><c> a</c><01:03:50.640><c> memory</c><01:03:50.960><c> barrier</c><01:03:51.599><c> and</c>

01:03:51.670 --> 01:03:51.680 align:start position:0%
this just issues a memory barrier and
 

01:03:51.680 --> 01:03:53.109 align:start position:0%
this just issues a memory barrier and
then<01:03:51.920><c> sets</c><01:03:52.240><c> head</c><01:03:52.480><c> equal</c><01:03:52.720><c> to</c>

01:03:53.109 --> 01:03:53.119 align:start position:0%
then sets head equal to
 

01:03:53.119 --> 01:03:56.230 align:start position:0%
then sets head equal to
e<01:03:54.559><c> and</c><01:03:54.640><c> now</c><01:03:54.799><c> we</c><01:03:54.960><c> can</c><01:03:55.039><c> release</c><01:03:55.359><c> the</c><01:03:55.440><c> lock</c>

01:03:56.230 --> 01:03:56.240 align:start position:0%
e and now we can release the lock
 

01:03:56.240 --> 01:03:58.309 align:start position:0%
e and now we can release the lock
we<01:03:56.400><c> still</c><01:03:56.559><c> have</c><01:03:56.720><c> a</c><01:03:56.799><c> pointer</c><01:03:57.200><c> to</c><01:03:57.359><c> the</c><01:03:57.520><c> old</c><01:03:58.079><c> first</c>

01:03:58.309 --> 01:03:58.319 align:start position:0%
we still have a pointer to the old first
 

01:03:58.319 --> 01:03:59.750 align:start position:0%
we still have a pointer to the old first
list<01:03:58.640><c> element</c>

01:03:59.750 --> 01:03:59.760 align:start position:0%
list element
 

01:03:59.760 --> 01:04:01.349 align:start position:0%
list element
called<01:04:00.000><c> synchronize</c><01:04:00.559><c> rcu</c><01:04:00.960><c> to</c><01:04:01.039><c> make</c><01:04:01.200><c> sure</c>

01:04:01.349 --> 01:04:01.359 align:start position:0%
called synchronize rcu to make sure
 

01:04:01.359 --> 01:04:04.150 align:start position:0%
called synchronize rcu to make sure
every<01:04:02.720><c> um</c>

01:04:04.150 --> 01:04:04.160 align:start position:0%
every um
 

01:04:04.160 --> 01:04:07.349 align:start position:0%
every um
cpu<01:04:04.640><c> that</c><01:04:04.720><c> could</c><01:04:04.960><c> have</c><01:04:05.039><c> grabbed</c><01:04:05.680><c> a</c><01:04:06.000><c> uh</c>

01:04:07.349 --> 01:04:07.359 align:start position:0%
cpu that could have grabbed a uh
 

01:04:07.359 --> 01:04:09.270 align:start position:0%
cpu that could have grabbed a uh
pointer<01:04:07.680><c> to</c><01:04:07.839><c> the</c><01:04:07.920><c> old</c><01:04:08.079><c> list</c><01:04:08.319><c> element</c><01:04:08.720><c> before</c>

01:04:09.270 --> 01:04:09.280 align:start position:0%
pointer to the old list element before
 

01:04:09.280 --> 01:04:11.029 align:start position:0%
pointer to the old list element before
we<01:04:09.440><c> did</c><01:04:09.599><c> the</c><01:04:09.760><c> committing</c><01:04:10.319><c> right</c>

01:04:11.029 --> 01:04:11.039 align:start position:0%
we did the committing right
 

01:04:11.039 --> 01:04:13.510 align:start position:0%
we did the committing right
has<01:04:11.200><c> yielded</c><01:04:11.599><c> the</c><01:04:11.680><c> cpu</c><01:04:12.799><c> and</c><01:04:12.880><c> therefore</c><01:04:13.200><c> given</c>

01:04:13.510 --> 01:04:13.520 align:start position:0%
has yielded the cpu and therefore given
 

01:04:13.520 --> 01:04:14.470 align:start position:0%
has yielded the cpu and therefore given
up<01:04:13.680><c> its</c>

01:04:14.470 --> 01:04:14.480 align:start position:0%
up its
 

01:04:14.480 --> 01:04:16.710 align:start position:0%
up its
pointered<01:04:14.880><c> rc</c><01:04:15.200><c> protected</c><01:04:15.599><c> data</c><01:04:16.240><c> and</c><01:04:16.400><c> now</c><01:04:16.640><c> we</c>

01:04:16.710 --> 01:04:16.720 align:start position:0%
pointered rc protected data and now we
 

01:04:16.720 --> 01:04:18.789 align:start position:0%
pointered rc protected data and now we
can<01:04:16.960><c> free</c><01:04:17.200><c> the</c><01:04:17.359><c> old</c>

01:04:18.789 --> 01:04:18.799 align:start position:0%
can free the old
 

01:04:18.799 --> 01:04:23.349 align:start position:0%
can free the old
list<01:04:19.039><c> element</c>

01:04:23.349 --> 01:04:23.359 align:start position:0%
 
 

01:04:23.359 --> 01:04:35.670 align:start position:0%
 
any<01:04:24.839><c> questions</c>

01:04:35.670 --> 01:04:35.680 align:start position:0%
 
 

01:04:35.680 --> 01:04:39.750 align:start position:0%
 
all<01:04:35.839><c> right</c><01:04:36.880><c> um</c>

01:04:39.750 --> 01:04:39.760 align:start position:0%
 
 

01:04:39.760 --> 01:04:43.029 align:start position:0%
 
uh

01:04:43.029 --> 01:04:43.039 align:start position:0%
 
 

01:04:43.039 --> 01:04:46.309 align:start position:0%
 
there<01:04:43.280><c> are</c><01:04:45.280><c> rcu</c>

01:04:46.309 --> 01:04:46.319 align:start position:0%
there are rcu
 

01:04:46.319 --> 01:04:48.470 align:start position:0%
there are rcu
one<01:04:46.480><c> thing</c><01:04:46.640><c> to</c><01:04:46.720><c> note</c><01:04:46.960><c> about</c><01:04:47.119><c> this</c><01:04:47.359><c> is</c><01:04:47.520><c> that</c>

01:04:48.470 --> 01:04:48.480 align:start position:0%
one thing to note about this is that
 

01:04:48.480 --> 01:04:50.230 align:start position:0%
one thing to note about this is that
while<01:04:48.880><c> in</c><01:04:48.960><c> the</c><01:04:49.119><c> reader</c><01:04:49.599><c> while</c><01:04:49.760><c> we're</c><01:04:50.000><c> allowed</c>

01:04:50.230 --> 01:04:50.240 align:start position:0%
while in the reader while we're allowed
 

01:04:50.240 --> 01:04:50.549 align:start position:0%
while in the reader while we're allowed
to

01:04:50.549 --> 01:04:50.559 align:start position:0%
to
 

01:04:50.559 --> 01:04:52.390 align:start position:0%
to
look<01:04:50.880><c> at</c><01:04:50.960><c> this</c><01:04:51.200><c> list</c><01:04:51.520><c> element</c><01:04:51.920><c> inside</c><01:04:52.240><c> the</c>

01:04:52.390 --> 01:04:52.400 align:start position:0%
look at this list element inside the
 

01:04:52.400 --> 01:04:53.670 align:start position:0%
look at this list element inside the
loop<01:04:52.640><c> here</c>

01:04:53.670 --> 01:04:53.680 align:start position:0%
loop here
 

01:04:53.680 --> 01:04:55.589 align:start position:0%
loop here
one<01:04:53.839><c> thing</c><01:04:54.000><c> we're</c><01:04:54.240><c> not</c><01:04:54.480><c> allowed</c><01:04:54.799><c> to</c><01:04:54.960><c> do</c><01:04:55.359><c> is</c>

01:04:55.589 --> 01:04:55.599 align:start position:0%
one thing we're not allowed to do is
 

01:04:55.599 --> 01:04:57.349 align:start position:0%
one thing we're not allowed to do is
return<01:04:56.000><c> the</c><01:04:56.160><c> list</c><01:04:56.480><c> element</c>

01:04:57.349 --> 01:04:57.359 align:start position:0%
return the list element
 

01:04:57.359 --> 01:05:00.470 align:start position:0%
return the list element
so<01:04:57.920><c> for</c><01:04:58.079><c> example</c><01:04:58.559><c> we</c><01:04:58.880><c> using</c><01:04:59.200><c> rcu</c><01:04:59.680><c> we</c><01:04:59.920><c> couldn't</c>

01:05:00.470 --> 01:05:00.480 align:start position:0%
so for example we using rcu we couldn't
 

01:05:00.480 --> 01:05:03.670 align:start position:0%
so for example we using rcu we couldn't
write<01:05:00.960><c> a</c><01:05:01.200><c> lookup</c><01:05:01.680><c> a</c><01:05:01.839><c> list</c><01:05:02.160><c> lookup</c><01:05:02.640><c> function</c>

01:05:03.670 --> 01:05:03.680 align:start position:0%
write a lookup a list lookup function
 

01:05:03.680 --> 01:05:07.349 align:start position:0%
write a lookup a list lookup function
that<01:05:03.920><c> returned</c><01:05:05.440><c> either</c><01:05:05.839><c> the</c><01:05:06.000><c> list</c><01:05:06.319><c> element</c>

01:05:07.349 --> 01:05:07.359 align:start position:0%
that returned either the list element
 

01:05:07.359 --> 01:05:10.549 align:start position:0%
that returned either the list element
or<01:05:08.160><c> a</c><01:05:08.400><c> pointer</c><01:05:08.960><c> into</c>

01:05:10.549 --> 01:05:10.559 align:start position:0%
or a pointer into
 

01:05:10.559 --> 01:05:12.549 align:start position:0%
or a pointer into
data<01:05:10.960><c> held</c><01:05:11.359><c> in</c><01:05:11.440><c> the</c><01:05:11.599><c> list</c><01:05:11.920><c> element</c><01:05:12.319><c> like</c><01:05:12.480><c> a</c>

01:05:12.549 --> 01:05:12.559 align:start position:0%
data held in the list element like a
 

01:05:12.559 --> 01:05:13.990 align:start position:0%
data held in the list element like a
string<01:05:12.880><c> that</c><01:05:12.960><c> was</c><01:05:13.119><c> embedded</c><01:05:13.520><c> in</c><01:05:13.599><c> the</c><01:05:13.680><c> list</c>

01:05:13.990 --> 01:05:14.000 align:start position:0%
string that was embedded in the list
 

01:05:14.000 --> 01:05:18.390 align:start position:0%
string that was embedded in the list
element

01:05:18.390 --> 01:05:18.400 align:start position:0%
 
 

01:05:18.400 --> 01:05:20.309 align:start position:0%
 
because<01:05:18.880><c> then</c><01:05:19.039><c> we'd</c><01:05:19.280><c> be</c><01:05:19.359><c> in</c><01:05:19.680><c> then</c><01:05:19.839><c> we</c><01:05:20.000><c> would</c><01:05:20.160><c> no</c>

01:05:20.309 --> 01:05:20.319 align:start position:0%
because then we'd be in then we would no
 

01:05:20.319 --> 01:05:22.069 align:start position:0%
because then we'd be in then we would no
longer<01:05:20.640><c> be</c><01:05:20.799><c> in</c><01:05:20.960><c> control</c><01:05:21.280><c> you</c><01:05:21.440><c> know</c>

01:05:22.069 --> 01:05:22.079 align:start position:0%
longer be in control you know
 

01:05:22.079 --> 01:05:23.910 align:start position:0%
longer be in control you know
it<01:05:22.240><c> has</c><01:05:22.400><c> to</c><01:05:22.480><c> be</c><01:05:22.640><c> the</c><01:05:22.720><c> case</c><01:05:22.960><c> that</c><01:05:23.359><c> we</c><01:05:23.520><c> don't</c><01:05:23.760><c> look</c>

01:05:23.910 --> 01:05:23.920 align:start position:0%
it has to be the case that we don't look
 

01:05:23.920 --> 01:05:26.789 align:start position:0%
it has to be the case that we don't look
at<01:05:24.000><c> rc</c><01:05:24.400><c> protected</c><01:05:24.720><c> data</c><01:05:25.119><c> outside</c>

01:05:26.789 --> 01:05:26.799 align:start position:0%
at rc protected data outside
 

01:05:26.799 --> 01:05:29.270 align:start position:0%
at rc protected data outside
um<01:05:27.359><c> this</c><01:05:27.599><c> rcu</c><01:05:28.000><c> critical</c><01:05:28.400><c> section</c><01:05:28.799><c> or</c><01:05:28.880><c> we</c><01:05:29.119><c> don't</c>

01:05:29.270 --> 01:05:29.280 align:start position:0%
um this rcu critical section or we don't
 

01:05:29.280 --> 01:05:30.470 align:start position:0%
um this rcu critical section or we don't
do<01:05:29.440><c> a</c><01:05:29.520><c> context</c><01:05:29.920><c> which</c><01:05:30.160><c> if</c>

01:05:30.470 --> 01:05:30.480 align:start position:0%
do a context which if
 

01:05:30.480 --> 01:05:31.910 align:start position:0%
do a context which if
we<01:05:30.559><c> just</c><01:05:30.799><c> write</c><01:05:30.960><c> a</c><01:05:31.200><c> generic</c><01:05:31.520><c> function</c><01:05:31.839><c> that</c>

01:05:31.910 --> 01:05:31.920 align:start position:0%
we just write a generic function that
 

01:05:31.920 --> 01:05:33.829 align:start position:0%
we just write a generic function that
returns<01:05:32.240><c> a</c><01:05:32.319><c> list</c><01:05:32.559><c> element</c><01:05:33.200><c> then</c><01:05:33.359><c> for</c><01:05:33.599><c> all</c><01:05:33.680><c> we</c>

01:05:33.829 --> 01:05:33.839 align:start position:0%
returns a list element then for all we
 

01:05:33.839 --> 01:05:35.589 align:start position:0%
returns a list element then for all we
know<01:05:34.000><c> the</c><01:05:34.160><c> caller</c>

01:05:35.589 --> 01:05:35.599 align:start position:0%
know the caller
 

01:05:35.599 --> 01:05:36.789 align:start position:0%
know the caller
you<01:05:35.680><c> know</c><01:05:36.000><c> maybe</c><01:05:36.240><c> we</c><01:05:36.319><c> can</c><01:05:36.400><c> persuade</c><01:05:36.720><c> the</c>

01:05:36.789 --> 01:05:36.799 align:start position:0%
you know maybe we can persuade the
 

01:05:36.799 --> 01:05:39.910 align:start position:0%
you know maybe we can persuade the
caller<01:05:37.039><c> to</c><01:05:37.200><c> follow</c><01:05:37.359><c> some</c><01:05:37.520><c> rules</c><01:05:37.760><c> too</c><01:05:38.000><c> but</c><01:05:38.559><c> um</c>

01:05:39.910 --> 01:05:39.920 align:start position:0%
caller to follow some rules too but um
 

01:05:39.920 --> 01:05:42.789 align:start position:0%
caller to follow some rules too but um
for<01:05:40.160><c> all</c><01:05:40.319><c> we</c><01:05:40.480><c> know</c><01:05:41.920><c> uh</c><01:05:42.240><c> the</c><01:05:42.319><c> caller</c><01:05:42.640><c> may</c>

01:05:42.789 --> 01:05:42.799 align:start position:0%
for all we know uh the caller may
 

01:05:42.799 --> 01:05:43.910 align:start position:0%
for all we know uh the caller may
context<01:05:43.200><c> switch</c>

01:05:43.910 --> 01:05:43.920 align:start position:0%
context switch
 

01:05:43.920 --> 01:05:47.750 align:start position:0%
context switch
or<01:05:45.520><c> um</c><01:05:46.400><c> or</c><01:05:46.559><c> we'd</c><01:05:46.720><c> run</c><01:05:46.880><c> into</c><01:05:47.119><c> trouble</c><01:05:47.440><c> i</c><01:05:47.520><c> that</c><01:05:47.680><c> we</c>

01:05:47.750 --> 01:05:47.760 align:start position:0%
or um or we'd run into trouble i that we
 

01:05:47.760 --> 01:05:50.069 align:start position:0%
or um or we'd run into trouble i that we
call<01:05:48.000><c> rc</c><01:05:48.400><c> read</c><01:05:48.640><c> unlock</c><01:05:49.119><c> before</c><01:05:49.359><c> returning</c><01:05:49.920><c> the</c>

01:05:50.069 --> 01:05:50.079 align:start position:0%
call rc read unlock before returning the
 

01:05:50.079 --> 01:05:51.349 align:start position:0%
call rc read unlock before returning the
list<01:05:50.400><c> element</c>

01:05:51.349 --> 01:05:51.359 align:start position:0%
list element
 

01:05:51.359 --> 01:05:52.950 align:start position:0%
list element
which<01:05:51.599><c> is</c><01:05:51.680><c> illegal</c><01:05:52.079><c> because</c><01:05:52.319><c> now</c><01:05:52.480><c> a</c><01:05:52.640><c> timer</c>

01:05:52.950 --> 01:05:52.960 align:start position:0%
which is illegal because now a timer
 

01:05:52.960 --> 01:05:54.710 align:start position:0%
which is illegal because now a timer
interrupt<01:05:53.280><c> could</c><01:05:53.440><c> force</c><01:05:53.680><c> a</c><01:05:53.760><c> switch</c>

01:05:54.710 --> 01:05:54.720 align:start position:0%
interrupt could force a switch
 

01:05:54.720 --> 01:05:57.349 align:start position:0%
interrupt could force a switch
or<01:05:54.960><c> we</c><01:05:55.119><c> don't</c><01:05:55.280><c> call</c><01:05:55.520><c> rcub.unlock</c><01:05:56.559><c> so</c><01:05:57.039><c> the</c><01:05:57.200><c> use</c>

01:05:57.349 --> 01:05:57.359 align:start position:0%
or we don't call rcub.unlock so the use
 

01:05:57.359 --> 01:06:00.789 align:start position:0%
or we don't call rcub.unlock so the use
of<01:05:57.520><c> rcu</c><01:05:58.000><c> sort</c><01:05:58.160><c> of</c>

01:06:00.789 --> 01:06:00.799 align:start position:0%
 
 

01:06:00.799 --> 01:06:02.309 align:start position:0%
 
does<01:06:00.960><c> put</c><01:06:01.119><c> some</c><01:06:01.359><c> additional</c><01:06:01.680><c> constraints</c><01:06:02.160><c> on</c>

01:06:02.309 --> 01:06:02.319 align:start position:0%
does put some additional constraints on
 

01:06:02.319 --> 01:06:03.829 align:start position:0%
does put some additional constraints on
readers<01:06:02.799><c> that</c>

01:06:03.829 --> 01:06:03.839 align:start position:0%
readers that
 

01:06:03.839 --> 01:06:06.870 align:start position:0%
readers that
wouldn't<01:06:04.079><c> have</c><01:06:04.240><c> existed</c><01:06:04.559><c> before</c><01:06:06.240><c> a</c><01:06:06.559><c> question</c>

01:06:06.870 --> 01:06:06.880 align:start position:0%
wouldn't have existed before a question
 

01:06:06.880 --> 01:06:07.829 align:start position:0%
wouldn't have existed before a question
about<01:06:07.119><c> that</c>

01:06:07.829 --> 01:06:07.839 align:start position:0%
about that
 

01:06:07.839 --> 01:06:10.549 align:start position:0%
about that
yes<01:06:08.240><c> so</c><01:06:08.559><c> are</c><01:06:08.640><c> you</c><01:06:08.799><c> saying</c><01:06:09.039><c> in</c><01:06:09.200><c> particular</c><01:06:09.839><c> that</c>

01:06:10.549 --> 01:06:10.559 align:start position:0%
yes so are you saying in particular that
 

01:06:10.559 --> 01:06:11.829 align:start position:0%
yes so are you saying in particular that
if<01:06:10.799><c> we</c><01:06:11.039><c> had</c>

01:06:11.829 --> 01:06:11.839 align:start position:0%
if we had
 

01:06:11.839 --> 01:06:15.109 align:start position:0%
if we had
some<01:06:12.319><c> form</c><01:06:12.559><c> of</c><01:06:12.880><c> uh</c><01:06:13.280><c> like</c><01:06:14.000><c> read</c><01:06:14.640><c> element</c>

01:06:15.109 --> 01:06:15.119 align:start position:0%
some form of uh like read element
 

01:06:15.119 --> 01:06:18.390 align:start position:0%
some form of uh like read element
at<01:06:15.440><c> index</c><01:06:16.400><c> i</c><01:06:17.200><c> method</c>

01:06:18.390 --> 01:06:18.400 align:start position:0%
at index i method
 

01:06:18.400 --> 01:06:20.789 align:start position:0%
at index i method
that<01:06:18.799><c> there</c><01:06:18.960><c> is</c><01:06:19.200><c> no</c><01:06:19.440><c> way</c><01:06:19.760><c> to</c><01:06:19.920><c> structure</c><01:06:20.400><c> this</c>

01:06:20.789 --> 01:06:20.799 align:start position:0%
that there is no way to structure this
 

01:06:20.799 --> 01:06:22.950 align:start position:0%
that there is no way to structure this
so<01:06:20.960><c> that</c><01:06:21.280><c> it</c><01:06:21.440><c> could</c><01:06:21.680><c> return</c><01:06:22.079><c> the</c><01:06:22.319><c> value</c>

01:06:22.950 --> 01:06:22.960 align:start position:0%
so that it could return the value
 

01:06:22.960 --> 01:06:25.349 align:start position:0%
so that it could return the value
held<01:06:23.280><c> by</c><01:06:23.440><c> the</c><01:06:23.839><c> node</c><01:06:24.160><c> at</c><01:06:24.319><c> element</c><01:06:24.720><c> i</c><01:06:25.119><c> it</c><01:06:25.280><c> could</c>

01:06:25.349 --> 01:06:25.359 align:start position:0%
held by the node at element i it could
 

01:06:25.359 --> 01:06:27.829 align:start position:0%
held by the node at element i it could
return<01:06:25.760><c> a</c><01:06:25.839><c> copy</c>

01:06:27.829 --> 01:06:27.839 align:start position:0%
return a copy
 

01:06:27.839 --> 01:06:30.069 align:start position:0%
return a copy
so<01:06:28.000><c> what</c><01:06:28.240><c> would</c><01:06:28.400><c> work</c><01:06:28.960><c> you</c><01:06:29.039><c> know</c><01:06:29.119><c> if</c><01:06:29.280><c> erox</c><01:06:29.920><c> is</c><01:06:30.000><c> a</c>

01:06:30.069 --> 01:06:30.079 align:start position:0%
so what would work you know if erox is a
 

01:06:30.079 --> 01:06:31.670 align:start position:0%
so what would work you know if erox is a
string<01:06:30.400><c> we</c><01:06:30.559><c> could</c><01:06:30.720><c> return</c><01:06:31.039><c> a</c><01:06:31.119><c> copy</c><01:06:31.359><c> of</c><01:06:31.440><c> this</c>

01:06:31.670 --> 01:06:31.680 align:start position:0%
string we could return a copy of this
 

01:06:31.680 --> 01:06:31.990 align:start position:0%
string we could return a copy of this
string

01:06:31.990 --> 01:06:32.000 align:start position:0%
string
 

01:06:32.000 --> 01:06:34.870 align:start position:0%
string
and<01:06:32.079><c> that's</c><01:06:32.319><c> fine</c><01:06:34.000><c> what</c><01:06:34.240><c> would</c><01:06:34.400><c> be</c><01:06:34.640><c> a</c>

01:06:34.870 --> 01:06:34.880 align:start position:0%
and that's fine what would be a
 

01:06:34.880 --> 01:06:36.950 align:start position:0%
and that's fine what would be a
violation<01:06:35.440><c> of</c><01:06:35.520><c> the</c><01:06:35.599><c> rcu</c><01:06:36.160><c> rules</c><01:06:36.400><c> is</c><01:06:36.559><c> if</c><01:06:36.720><c> we</c>

01:06:36.950 --> 01:06:36.960 align:start position:0%
violation of the rcu rules is if we
 

01:06:36.960 --> 01:06:37.670 align:start position:0%
violation of the rcu rules is if we
returned<01:06:37.440><c> a</c>

01:06:37.670 --> 01:06:37.680 align:start position:0%
returned a
 

01:06:37.680 --> 01:06:40.309 align:start position:0%
returned a
pointer<01:06:38.559><c> to</c><01:06:38.799><c> this</c><01:06:39.039><c> very</c><01:06:39.440><c> string</c><01:06:40.000><c> sitting</c>

01:06:40.309 --> 01:06:40.319 align:start position:0%
pointer to this very string sitting
 

01:06:40.319 --> 01:06:40.870 align:start position:0%
pointer to this very string sitting
inside

01:06:40.870 --> 01:06:40.880 align:start position:0%
inside
 

01:06:40.880 --> 01:06:44.789 align:start position:0%
inside
you<01:06:40.960><c> know</c><01:06:42.880><c> a</c><01:06:43.039><c> point</c>

01:06:44.789 --> 01:06:44.799 align:start position:0%
you know a point
 

01:06:44.799 --> 01:06:46.150 align:start position:0%
you know a point
it<01:06:44.880><c> would</c><01:06:45.039><c> be</c><01:06:45.119><c> a</c><01:06:45.200><c> mistake</c><01:06:45.520><c> to</c><01:06:45.680><c> return</c><01:06:46.079><c> a</c>

01:06:46.150 --> 01:06:46.160 align:start position:0%
it would be a mistake to return a
 

01:06:46.160 --> 01:06:50.710 align:start position:0%
it would be a mistake to return a
pointer<01:06:46.720><c> into</c><01:06:47.599><c> somewhere</c><01:06:48.000><c> into</c><01:06:48.319><c> e</c>

01:06:50.710 --> 01:06:50.720 align:start position:0%
 
 

01:06:50.720 --> 01:06:52.470 align:start position:0%
 
like<01:06:50.880><c> if</c><01:06:51.039><c> the</c><01:06:51.119><c> string</c><01:06:51.440><c> is</c><01:06:51.520><c> stored</c><01:06:51.920><c> inside</c><01:06:52.319><c> the</c>

01:06:52.470 --> 01:06:52.480 align:start position:0%
like if the string is stored inside the
 

01:06:52.480 --> 01:06:53.990 align:start position:0%
like if the string is stored inside the
list<01:06:52.720><c> element</c><01:06:53.039><c> we</c><01:06:53.119><c> better</c><01:06:53.359><c> not</c><01:06:53.520><c> return</c><01:06:53.839><c> this</c>

01:06:53.990 --> 01:06:54.000 align:start position:0%
list element we better not return this
 

01:06:54.000 --> 01:06:56.789 align:start position:0%
list element we better not return this
pointer<01:06:54.319><c> to</c><01:06:54.400><c> that</c><01:06:54.559><c> string</c>

01:06:56.789 --> 01:06:56.799 align:start position:0%
pointer to that string
 

01:06:56.799 --> 01:07:00.150 align:start position:0%
pointer to that string
because<01:06:57.359><c> then</c><01:06:57.599><c> the</c><01:06:58.839><c> uh</c>

01:07:00.150 --> 01:07:00.160 align:start position:0%
because then the uh
 

01:07:00.160 --> 01:07:03.990 align:start position:0%
because then the uh
then<01:07:00.400><c> we'll</c><01:07:00.480><c> be</c><01:07:02.960><c> we</c><01:07:03.119><c> have</c><01:07:03.280><c> to</c><01:07:03.440><c> not</c><01:07:03.599><c> context</c>

01:07:03.990 --> 01:07:04.000 align:start position:0%
then we'll be we have to not context
 

01:07:04.000 --> 01:07:05.910 align:start position:0%
then we'll be we have to not context
switch<01:07:04.240><c> while</c><01:07:04.400><c> we're</c><01:07:04.480><c> holding</c><01:07:04.720><c> a</c><01:07:04.799><c> pointer</c>

01:07:05.910 --> 01:07:05.920 align:start position:0%
switch while we're holding a pointer
 

01:07:05.920 --> 01:07:08.950 align:start position:0%
switch while we're holding a pointer
into<01:07:06.319><c> rcu</c><01:07:06.720><c> protected</c><01:07:07.039><c> data</c><01:07:07.920><c> and</c><01:07:08.240><c> the</c><01:07:08.720><c> you</c><01:07:08.799><c> know</c>

01:07:08.950 --> 01:07:08.960 align:start position:0%
into rcu protected data and the you know
 

01:07:08.960 --> 01:07:10.789 align:start position:0%
into rcu protected data and the you know
the<01:07:09.039><c> convention</c><01:07:09.760><c> is</c>

01:07:10.789 --> 01:07:10.799 align:start position:0%
the convention is
 

01:07:10.799 --> 01:07:12.230 align:start position:0%
the convention is
you<01:07:10.880><c> know</c><01:07:11.039><c> you</c><01:07:11.200><c> just</c><01:07:11.359><c> use</c><01:07:11.520><c> that</c><01:07:11.680><c> data</c><01:07:12.000><c> within</c>

01:07:12.230 --> 01:07:12.240 align:start position:0%
you know you just use that data within
 

01:07:12.240 --> 01:07:14.230 align:start position:0%
you know you just use that data within
this<01:07:12.400><c> critical</c><01:07:12.839><c> section</c>

01:07:14.230 --> 01:07:14.240 align:start position:0%
this critical section
 

01:07:14.240 --> 01:07:15.430 align:start position:0%
this critical section
and<01:07:14.400><c> so</c><01:07:14.559><c> it</c><01:07:14.559><c> would</c><01:07:14.720><c> almost</c><01:07:14.960><c> certainly</c><01:07:15.280><c> be</c>

01:07:15.430 --> 01:07:15.440 align:start position:0%
and so it would almost certainly be
 

01:07:15.440 --> 01:07:17.190 align:start position:0%
and so it would almost certainly be
breaking<01:07:15.680><c> the</c><01:07:15.760><c> convention</c><01:07:16.240><c> or</c><01:07:16.400><c> this</c><01:07:16.880><c> setup</c>

01:07:17.190 --> 01:07:17.200 align:start position:0%
breaking the convention or this setup
 

01:07:17.200 --> 01:07:18.710 align:start position:0%
breaking the convention or this setup
would<01:07:17.359><c> have</c><01:07:17.440><c> to</c><01:07:17.440><c> be</c><01:07:17.599><c> much</c><01:07:17.680><c> more</c><01:07:17.839><c> complicated</c>

01:07:18.710 --> 01:07:18.720 align:start position:0%
would have to be much more complicated
 

01:07:18.720 --> 01:07:21.270 align:start position:0%
would have to be much more complicated
if<01:07:18.880><c> we</c><01:07:18.960><c> ended</c><01:07:19.200><c> up</c><01:07:19.280><c> returning</c><01:07:19.839><c> pointers</c><01:07:20.559><c> into</c>

01:07:21.270 --> 01:07:21.280 align:start position:0%
if we ended up returning pointers into
 

01:07:21.280 --> 01:07:24.069 align:start position:0%
if we ended up returning pointers into
the<01:07:21.440><c> protected</c><01:07:21.839><c> data</c>

01:07:24.069 --> 01:07:24.079 align:start position:0%
the protected data
 

01:07:24.079 --> 01:07:29.190 align:start position:0%
the protected data
thank<01:07:24.319><c> you</c><01:07:26.880><c> um</c>

01:07:29.190 --> 01:07:29.200 align:start position:0%
thank you um
 

01:07:29.200 --> 01:07:31.990 align:start position:0%
thank you um
the<01:07:30.079><c> so</c><01:07:30.240><c> i</c><01:07:30.480><c> just</c><01:07:30.559><c> want</c><01:07:30.799><c> to</c><01:07:31.200><c> sort</c><01:07:31.359><c> of</c><01:07:31.599><c> return</c>

01:07:31.990 --> 01:07:32.000 align:start position:0%
the so i just want to sort of return
 

01:07:32.000 --> 01:07:33.829 align:start position:0%
the so i just want to sort of return
briefly<01:07:32.319><c> to</c><01:07:32.480><c> the</c><01:07:32.559><c> performance</c><01:07:33.119><c> story</c>

01:07:33.829 --> 01:07:33.839 align:start position:0%
briefly to the performance story
 

01:07:33.839 --> 01:07:37.029 align:start position:0%
briefly to the performance story
um<01:07:36.319><c> it's</c>

01:07:37.029 --> 01:07:37.039 align:start position:0%
um it's
 

01:07:37.039 --> 01:07:40.309 align:start position:0%
um it's
um<01:07:37.599><c> it's</c><01:07:37.760><c> hard</c><01:07:37.920><c> to</c><01:07:38.079><c> characterize</c><01:07:38.880><c> sort</c><01:07:39.039><c> of</c>

01:07:40.309 --> 01:07:40.319 align:start position:0%
um it's hard to characterize sort of
 

01:07:40.319 --> 01:07:42.230 align:start position:0%
um it's hard to characterize sort of
what<01:07:40.480><c> the</c><01:07:40.640><c> performance</c><01:07:41.280><c> is</c><01:07:41.520><c> i</c><01:07:41.599><c> mean</c><01:07:41.920><c> in</c><01:07:42.079><c> a</c>

01:07:42.230 --> 01:07:42.240 align:start position:0%
what the performance is i mean in a
 

01:07:42.240 --> 01:07:45.190 align:start position:0%
what the performance is i mean in a
sense<01:07:43.119><c> uh</c>

01:07:45.190 --> 01:07:45.200 align:start position:0%
sense uh
 

01:07:45.200 --> 01:07:46.950 align:start position:0%
sense uh
the<01:07:45.839><c> let's</c><01:07:46.000><c> see</c><01:07:46.160><c> the</c><01:07:46.559><c> the</c><01:07:46.720><c> overall</c>

01:07:46.950 --> 01:07:46.960 align:start position:0%
the let's see the the overall
 

01:07:46.960 --> 01:07:49.430 align:start position:0%
the let's see the the overall
performance<01:07:47.359><c> story</c><01:07:47.680><c> is</c><01:07:47.760><c> that</c><01:07:48.000><c> if</c><01:07:48.160><c> you</c><01:07:48.240><c> use</c><01:07:48.480><c> rcu</c>

01:07:49.430 --> 01:07:49.440 align:start position:0%
performance story is that if you use rcu
 

01:07:49.440 --> 01:07:50.789 align:start position:0%
performance story is that if you use rcu
reads<01:07:49.680><c> are</c><01:07:49.839><c> extremely</c><01:07:50.240><c> fast</c><01:07:50.480><c> they</c><01:07:50.640><c> just</c>

01:07:50.789 --> 01:07:50.799 align:start position:0%
reads are extremely fast they just
 

01:07:50.799 --> 01:07:52.789 align:start position:0%
reads are extremely fast they just
proceed<01:07:51.520><c> at</c><01:07:51.839><c> you</c><01:07:51.920><c> know</c><01:07:52.079><c> whatever</c>

01:07:52.789 --> 01:07:52.799 align:start position:0%
proceed at you know whatever
 

01:07:52.799 --> 01:07:55.589 align:start position:0%
proceed at you know whatever
they<01:07:52.960><c> have</c><01:07:53.119><c> sort</c><01:07:53.200><c> of</c><01:07:53.359><c> no</c><01:07:53.599><c> overhead</c><01:07:54.480><c> above</c><01:07:55.359><c> the</c>

01:07:55.589 --> 01:07:55.599 align:start position:0%
they have sort of no overhead above the
 

01:07:55.599 --> 01:07:57.430 align:start position:0%
they have sort of no overhead above the
ordinary<01:07:56.240><c> overhead</c><01:07:56.720><c> of</c><01:07:56.799><c> looking</c><01:07:57.119><c> at</c><01:07:57.200><c> that</c>

01:07:57.430 --> 01:07:57.440 align:start position:0%
ordinary overhead of looking at that
 

01:07:57.440 --> 01:07:59.349 align:start position:0%
ordinary overhead of looking at that
data<01:07:57.839><c> so</c><01:07:58.000><c> if</c><01:07:58.160><c> your</c><01:07:58.400><c> list</c><01:07:58.799><c> is</c>

01:07:59.349 --> 01:07:59.359 align:start position:0%
data so if your list is
 

01:07:59.359 --> 01:08:01.670 align:start position:0%
data so if your list is
a<01:07:59.520><c> billion</c><01:08:00.000><c> elements</c><01:08:00.480><c> long</c><01:08:00.720><c> yeah</c><01:08:01.359><c> reading</c><01:08:01.599><c> the</c>

01:08:01.670 --> 01:08:01.680 align:start position:0%
a billion elements long yeah reading the
 

01:08:01.680 --> 01:08:03.910 align:start position:0%
a billion elements long yeah reading the
list<01:08:01.920><c> will</c><01:08:02.000><c> take</c><01:08:02.160><c> a</c><01:08:02.240><c> long</c><01:08:02.480><c> time</c><01:08:02.720><c> but</c><01:08:02.960><c> it's</c><01:08:03.119><c> not</c>

01:08:03.910 --> 01:08:03.920 align:start position:0%
list will take a long time but it's not
 

01:08:03.920 --> 01:08:05.270 align:start position:0%
list will take a long time but it's not
because<01:08:04.160><c> of</c><01:08:04.319><c> synchronization</c><01:08:04.960><c> it's</c><01:08:05.119><c> just</c>

01:08:05.270 --> 01:08:05.280 align:start position:0%
because of synchronization it's just
 

01:08:05.280 --> 01:08:07.750 align:start position:0%
because of synchronization it's just
because<01:08:05.440><c> you're</c><01:08:05.599><c> doing</c><01:08:05.760><c> a</c><01:08:05.760><c> lot</c><01:08:05.920><c> of</c><01:08:06.000><c> work</c>

01:08:07.750 --> 01:08:07.760 align:start position:0%
because you're doing a lot of work
 

01:08:07.760 --> 01:08:10.950 align:start position:0%
because you're doing a lot of work
for<01:08:07.920><c> readers</c><01:08:09.440><c> so</c><01:08:10.000><c> you</c><01:08:10.160><c> can</c><01:08:10.480><c> almost</c>

01:08:10.950 --> 01:08:10.960 align:start position:0%
for readers so you can almost
 

01:08:10.960 --> 01:08:14.150 align:start position:0%
for readers so you can almost
view<01:08:12.240><c> rcu</c><01:08:12.799><c> as</c><01:08:12.960><c> having</c><01:08:13.280><c> zero</c><01:08:13.599><c> overhead</c><01:08:14.000><c> for</c>

01:08:14.150 --> 01:08:14.160 align:start position:0%
view rcu as having zero overhead for
 

01:08:14.160 --> 01:08:14.789 align:start position:0%
view rcu as having zero overhead for
readers

01:08:14.789 --> 01:08:14.799 align:start position:0%
readers
 

01:08:14.799 --> 01:08:17.829 align:start position:0%
readers
and<01:08:14.960><c> the</c>

01:08:17.829 --> 01:08:17.839 align:start position:0%
 
 

01:08:17.839 --> 01:08:21.110 align:start position:0%
 
exceptions<01:08:18.319><c> are</c><01:08:18.400><c> minor</c><01:08:19.199><c> rcu</c><01:08:19.600><c> beadlock</c>

01:08:21.110 --> 01:08:21.120 align:start position:0%
exceptions are minor rcu beadlock
 

01:08:21.120 --> 01:08:22.630 align:start position:0%
exceptions are minor rcu beadlock
you<01:08:21.199><c> know</c><01:08:21.359><c> just</c><01:08:21.600><c> a</c><01:08:21.679><c> tiny</c><01:08:22.000><c> amount</c><01:08:22.159><c> of</c><01:08:22.239><c> work</c><01:08:22.480><c> to</c>

01:08:22.630 --> 01:08:22.640 align:start position:0%
you know just a tiny amount of work to
 

01:08:22.640 --> 01:08:25.269 align:start position:0%
you know just a tiny amount of work to
set<01:08:22.799><c> this</c><01:08:22.960><c> flag</c><01:08:23.279><c> saying</c><01:08:23.600><c> no</c><01:08:24.000><c> contact</c><01:08:24.319><c> switches</c>

01:08:25.269 --> 01:08:25.279 align:start position:0%
set this flag saying no contact switches
 

01:08:25.279 --> 01:08:27.510 align:start position:0%
set this flag saying no contact switches
and<01:08:25.520><c> rcu</c><01:08:26.159><c> dereference</c><01:08:26.880><c> issues</c><01:08:27.120><c> a</c><01:08:27.199><c> memory</c>

01:08:27.510 --> 01:08:27.520 align:start position:0%
and rcu dereference issues a memory
 

01:08:27.520 --> 01:08:30.309 align:start position:0%
and rcu dereference issues a memory
barrier<01:08:28.000><c> which</c>

01:08:30.309 --> 01:08:30.319 align:start position:0%
 
 

01:08:30.319 --> 01:08:32.870 align:start position:0%
 
actually<01:08:30.560><c> might</c><01:08:30.799><c> slow</c><01:08:31.040><c> you</c><01:08:31.199><c> down</c><01:08:31.520><c> by</c><01:08:31.920><c> dozens</c><01:08:32.799><c> a</c>

01:08:32.870 --> 01:08:32.880 align:start position:0%
actually might slow you down by dozens a
 

01:08:32.880 --> 01:08:35.910 align:start position:0%
actually might slow you down by dozens a
few<01:08:33.040><c> dozen</c><01:08:33.359><c> cycles</c>

01:08:35.910 --> 01:08:35.920 align:start position:0%
 
 

01:08:35.920 --> 01:08:39.189 align:start position:0%
 
but<01:08:36.159><c> it</c><01:08:36.239><c> much</c><01:08:36.560><c> cheaper</c><01:08:36.960><c> than</c><01:08:38.000><c> uh</c>

01:08:39.189 --> 01:08:39.199 align:start position:0%
but it much cheaper than uh
 

01:08:39.199 --> 01:08:42.630 align:start position:0%
but it much cheaper than uh
a<01:08:39.359><c> lot</c><01:08:41.199><c> the</c><01:08:41.359><c> performance</c><01:08:41.759><c> story</c><01:08:42.080><c> for</c><01:08:42.239><c> writers</c>

01:08:42.630 --> 01:08:42.640 align:start position:0%
a lot the performance story for writers
 

01:08:42.640 --> 01:08:43.829 align:start position:0%
a lot the performance story for writers
is<01:08:42.799><c> much</c><01:08:43.040><c> sadder</c>

01:08:43.829 --> 01:08:43.839 align:start position:0%
is much sadder
 

01:08:43.839 --> 01:08:45.269 align:start position:0%
is much sadder
you<01:08:44.000><c> had</c><01:08:44.080><c> to</c><01:08:44.159><c> do</c><01:08:44.319><c> all</c><01:08:44.480><c> the</c><01:08:44.640><c> stuff</c><01:08:44.880><c> you</c><01:08:45.040><c> always</c>

01:08:45.269 --> 01:08:45.279 align:start position:0%
you had to do all the stuff you always
 

01:08:45.279 --> 01:08:47.189 align:start position:0%
you had to do all the stuff you always
had<01:08:45.440><c> to</c><01:08:45.520><c> do</c><01:08:45.759><c> using</c><01:08:46.080><c> locks</c><01:08:46.560><c> in</c><01:08:46.640><c> fact</c><01:08:46.960><c> you</c><01:08:47.120><c> have</c>

01:08:47.189 --> 01:08:47.199 align:start position:0%
had to do using locks in fact you have
 

01:08:47.199 --> 01:08:49.030 align:start position:0%
had to do using locks in fact you have
to<01:08:47.440><c> acquire</c><01:08:47.759><c> and</c><01:08:47.839><c> release</c><01:08:48.159><c> locks</c>

01:08:49.030 --> 01:08:49.040 align:start position:0%
to acquire and release locks
 

01:08:49.040 --> 01:08:51.910 align:start position:0%
to acquire and release locks
in<01:08:49.120><c> the</c><01:08:49.279><c> writer</c><01:08:50.640><c> and</c><01:08:51.040><c> you</c><01:08:51.199><c> have</c><01:08:51.359><c> this</c>

01:08:51.910 --> 01:08:51.920 align:start position:0%
in the writer and you have this
 

01:08:51.920 --> 01:08:53.430 align:start position:0%
in the writer and you have this
potentially<01:08:52.480><c> extremely</c><01:08:52.880><c> expensive</c><01:08:53.279><c> call</c>

01:08:53.430 --> 01:08:53.440 align:start position:0%
potentially extremely expensive call
 

01:08:53.440 --> 01:08:54.149 align:start position:0%
potentially extremely expensive call
this<01:08:53.759><c> or</c>

01:08:54.149 --> 01:08:54.159 align:start position:0%
this or
 

01:08:54.159 --> 01:08:55.829 align:start position:0%
this or
time<01:08:54.480><c> consuming</c><01:08:54.960><c> called</c><01:08:55.199><c> the</c><01:08:55.279><c> synchronized</c>

01:08:55.829 --> 01:08:55.839 align:start position:0%
time consuming called the synchronized
 

01:08:55.839 --> 01:08:57.829 align:start position:0%
time consuming called the synchronized
rcu<01:08:56.560><c> in</c><01:08:56.640><c> fact</c><01:08:56.880><c> you</c><01:08:56.960><c> can</c><01:08:57.120><c> give</c><01:08:57.359><c> a</c><01:08:57.520><c> you</c><01:08:57.679><c> know</c>

01:08:57.829 --> 01:08:57.839 align:start position:0%
rcu in fact you can give a you know
 

01:08:57.839 --> 01:08:59.829 align:start position:0%
rcu in fact you can give a you know
internally<01:08:58.319><c> synchronized</c><01:08:58.880><c> rcu</c>

01:08:59.829 --> 01:08:59.839 align:start position:0%
internally synchronized rcu
 

01:08:59.839 --> 01:09:01.749 align:start position:0%
internally synchronized rcu
gives<01:09:00.080><c> up</c><01:09:00.239><c> the</c><01:09:00.319><c> cpu</c><01:09:00.880><c> so</c><01:09:01.040><c> you</c><01:09:01.120><c> don't</c><01:09:01.440><c> doesn't</c>

01:09:01.749 --> 01:09:01.759 align:start position:0%
gives up the cpu so you don't doesn't
 

01:09:01.759 --> 01:09:03.749 align:start position:0%
gives up the cpu so you don't doesn't
spin<01:09:02.560><c> necessarily</c>

01:09:03.749 --> 01:09:03.759 align:start position:0%
spin necessarily
 

01:09:03.759 --> 01:09:07.430 align:start position:0%
spin necessarily
um<01:09:05.359><c> but</c><01:09:05.600><c> it</c><01:09:06.000><c> may</c><01:09:06.239><c> require</c><01:09:06.640><c> a</c><01:09:06.640><c> lot</c><01:09:06.799><c> of</c><01:09:06.880><c> elapsed</c>

01:09:07.430 --> 01:09:07.440 align:start position:0%
um but it may require a lot of elapsed
 

01:09:07.440 --> 01:09:09.669 align:start position:0%
um but it may require a lot of elapsed
time<01:09:07.920><c> waiting</c><01:09:08.159><c> for</c><01:09:08.400><c> every</c><01:09:08.640><c> other</c><01:09:08.880><c> core</c><01:09:09.199><c> to</c>

01:09:09.669 --> 01:09:09.679 align:start position:0%
time waiting for every other core to
 

01:09:09.679 --> 01:09:12.470 align:start position:0%
time waiting for every other core to
context<01:09:10.000><c> switch</c>

01:09:12.470 --> 01:09:12.480 align:start position:0%
 
 

01:09:12.480 --> 01:09:15.430 align:start position:0%
 
so<01:09:12.960><c> depending</c><01:09:13.359><c> on</c><01:09:13.440><c> the</c><01:09:13.600><c> mix</c><01:09:13.839><c> of</c><01:09:13.920><c> reason</c><01:09:14.319><c> rights</c>

01:09:15.430 --> 01:09:15.440 align:start position:0%
so depending on the mix of reason rights
 

01:09:15.440 --> 01:09:16.470 align:start position:0%
so depending on the mix of reason rights
um

01:09:16.470 --> 01:09:16.480 align:start position:0%
um
 

01:09:16.480 --> 01:09:19.110 align:start position:0%
um
and<01:09:16.719><c> how</c><01:09:16.880><c> much</c><01:09:17.040><c> work</c><01:09:17.279><c> was</c><01:09:17.520><c> being</c><01:09:17.759><c> done</c><01:09:18.799><c> inside</c>

01:09:19.110 --> 01:09:19.120 align:start position:0%
and how much work was being done inside
 

01:09:19.120 --> 01:09:20.950 align:start position:0%
and how much work was being done inside
the<01:09:19.279><c> read</c><01:09:19.520><c> critical</c><01:09:19.920><c> section</c>

01:09:20.950 --> 01:09:20.960 align:start position:0%
the read critical section
 

01:09:20.960 --> 01:09:23.669 align:start position:0%
the read critical section
the<01:09:21.199><c> uh</c><01:09:21.920><c> performance</c><01:09:22.560><c> increase</c><01:09:23.279><c> varies</c>

01:09:23.669 --> 01:09:23.679 align:start position:0%
the uh performance increase varies
 

01:09:23.679 --> 01:09:25.669 align:start position:0%
the uh performance increase varies
tremendously<01:09:24.400><c> from</c>

01:09:25.669 --> 01:09:25.679 align:start position:0%
tremendously from
 

01:09:25.679 --> 01:09:28.550 align:start position:0%
tremendously from
um<01:09:26.159><c> much</c><01:09:26.400><c> much</c><01:09:26.719><c> faster</c><01:09:27.839><c> if</c><01:09:28.000><c> these</c><01:09:28.239><c> critical</c>

01:09:28.550 --> 01:09:28.560 align:start position:0%
um much much faster if these critical
 

01:09:28.560 --> 01:09:29.749 align:start position:0%
um much much faster if these critical
sections<01:09:28.880><c> were</c><01:09:29.120><c> short</c>

01:09:29.749 --> 01:09:29.759 align:start position:0%
sections were short
 

01:09:29.759 --> 01:09:32.309 align:start position:0%
sections were short
and<01:09:29.839><c> there's</c><01:09:30.080><c> few</c><01:09:30.319><c> rights</c><01:09:30.880><c> to</c><01:09:31.520><c> perhaps</c><01:09:32.000><c> even</c>

01:09:32.309 --> 01:09:32.319 align:start position:0%
and there's few rights to perhaps even
 

01:09:32.319 --> 01:09:34.149 align:start position:0%
and there's few rights to perhaps even
slower

01:09:34.149 --> 01:09:34.159 align:start position:0%
slower
 

01:09:34.159 --> 01:09:37.430 align:start position:0%
slower
if<01:09:34.400><c> rights</c><01:09:34.719><c> are</c><01:09:34.799><c> very</c><01:09:35.040><c> common</c>

01:09:37.430 --> 01:09:37.440 align:start position:0%
 
 

01:09:37.440 --> 01:09:40.309 align:start position:0%
 
and<01:09:37.600><c> so</c><01:09:37.759><c> when</c><01:09:38.000><c> people</c><01:09:38.319><c> apply</c><01:09:38.640><c> rcu</c><01:09:39.199><c> to</c><01:09:40.000><c> kernel</c>

01:09:40.309 --> 01:09:40.319 align:start position:0%
and so when people apply rcu to kernel
 

01:09:40.319 --> 01:09:42.070 align:start position:0%
and so when people apply rcu to kernel
stuff<01:09:40.480><c> they</c><01:09:40.719><c> actually</c>

01:09:42.070 --> 01:09:42.080 align:start position:0%
stuff they actually
 

01:09:42.080 --> 01:09:44.229 align:start position:0%
stuff they actually
you<01:09:42.400><c> absolutely</c><01:09:42.799><c> have</c><01:09:43.040><c> to</c><01:09:43.520><c> do</c><01:09:43.679><c> performance</c>

01:09:44.229 --> 01:09:44.239 align:start position:0%
you absolutely have to do performance
 

01:09:44.239 --> 01:09:46.149 align:start position:0%
you absolutely have to do performance
tests<01:09:44.960><c> against</c><01:09:45.279><c> a</c><01:09:45.359><c> bunch</c><01:09:45.600><c> of</c><01:09:45.679><c> workloads</c><01:09:46.080><c> in</c>

01:09:46.149 --> 01:09:46.159 align:start position:0%
tests against a bunch of workloads in
 

01:09:46.159 --> 01:09:47.829 align:start position:0%
tests against a bunch of workloads in
order<01:09:46.319><c> to</c><01:09:46.400><c> figure</c><01:09:46.719><c> out</c><01:09:46.880><c> whether</c>

01:09:47.829 --> 01:09:47.839 align:start position:0%
order to figure out whether
 

01:09:47.839 --> 01:09:50.709 align:start position:0%
order to figure out whether
using<01:09:48.159><c> rcu</c><01:09:48.560><c> is</c><01:09:48.640><c> a</c><01:09:48.719><c> win</c><01:09:48.960><c> for</c><01:09:49.120><c> you</c><01:09:49.520><c> because</c><01:09:50.560><c> it's</c>

01:09:50.709 --> 01:09:50.719 align:start position:0%
using rcu is a win for you because it's
 

01:09:50.719 --> 01:09:55.430 align:start position:0%
using rcu is a win for you because it's
so<01:09:50.880><c> dependent</c><01:09:51.279><c> on</c><01:09:51.359><c> the</c><01:09:51.440><c> workload</c>

01:09:55.430 --> 01:09:55.440 align:start position:0%
 
 

01:09:55.440 --> 01:10:00.870 align:start position:0%
 
i<01:09:55.760><c> have</c><01:09:56.000><c> a</c><01:09:56.560><c> maybe</c><01:09:56.800><c> a</c><01:09:56.880><c> tangential</c><01:09:57.520><c> question</c><01:09:58.400><c> but</c>

01:10:00.870 --> 01:10:00.880 align:start position:0%
 
 

01:10:00.880 --> 01:10:02.550 align:start position:0%
 
we've<01:10:01.120><c> seen</c><01:10:01.360><c> that</c><01:10:01.520><c> i</c><01:10:01.679><c> guess</c><01:10:02.080><c> when</c><01:10:02.239><c> there's</c>

01:10:02.550 --> 01:10:02.560 align:start position:0%
we've seen that i guess when there's
 

01:10:02.560 --> 01:10:04.709 align:start position:0%
we've seen that i guess when there's
multiple<01:10:03.120><c> cores</c><01:10:03.520><c> being</c><01:10:03.760><c> used</c><01:10:04.159><c> there's</c>

01:10:04.709 --> 01:10:04.719 align:start position:0%
multiple cores being used there's
 

01:10:04.719 --> 01:10:07.990 align:start position:0%
multiple cores being used there's
some<01:10:05.040><c> added</c><01:10:05.360><c> complexity</c><01:10:06.239><c> to</c><01:10:06.480><c> our</c><01:10:07.280><c> usual</c>

01:10:07.990 --> 01:10:08.000 align:start position:0%
some added complexity to our usual
 

01:10:08.000 --> 01:10:09.189 align:start position:0%
some added complexity to our usual
implementations

01:10:09.189 --> 01:10:09.199 align:start position:0%
implementations
 

01:10:09.199 --> 01:10:11.510 align:start position:0%
implementations
and<01:10:09.360><c> it's</c><01:10:09.520><c> often</c><01:10:09.920><c> the</c><01:10:10.159><c> like</c><01:10:10.480><c> these</c><01:10:11.040><c> atomic</c>

01:10:11.510 --> 01:10:11.520 align:start position:0%
and it's often the like these atomic
 

01:10:11.520 --> 01:10:12.950 align:start position:0%
and it's often the like these atomic
instructions

01:10:12.950 --> 01:10:12.960 align:start position:0%
instructions
 

01:10:12.960 --> 01:10:15.510 align:start position:0%
instructions
kind<01:10:13.120><c> of</c><01:10:13.360><c> come</c><01:10:13.600><c> to</c><01:10:13.760><c> the</c><01:10:13.920><c> rescue</c><01:10:15.199><c> and</c><01:10:15.360><c> that's</c>

01:10:15.510 --> 01:10:15.520 align:start position:0%
kind of come to the rescue and that's
 

01:10:15.520 --> 01:10:16.630 align:start position:0%
kind of come to the rescue and that's
assuming<01:10:15.920><c> there's</c><01:10:16.239><c> one</c>

01:10:16.630 --> 01:10:16.640 align:start position:0%
assuming there's one
 

01:10:16.640 --> 01:10:20.390 align:start position:0%
assuming there's one
shared<01:10:17.040><c> memory</c><01:10:17.440><c> system</c><01:10:18.239><c> but</c><01:10:18.400><c> i</c><01:10:18.560><c> wonder</c><01:10:19.600><c> like</c>

01:10:20.390 --> 01:10:20.400 align:start position:0%
shared memory system but i wonder like
 

01:10:20.400 --> 01:10:22.550 align:start position:0%
shared memory system but i wonder like
what<01:10:20.560><c> happens</c><01:10:20.960><c> if</c><01:10:21.199><c> a</c><01:10:21.679><c> machine</c><01:10:22.080><c> is</c><01:10:22.159><c> trying</c><01:10:22.400><c> to</c>

01:10:22.550 --> 01:10:22.560 align:start position:0%
what happens if a machine is trying to
 

01:10:22.560 --> 01:10:23.510 align:start position:0%
what happens if a machine is trying to
maintain<01:10:23.120><c> like</c>

01:10:23.510 --> 01:10:23.520 align:start position:0%
maintain like
 

01:10:23.520 --> 01:10:27.110 align:start position:0%
maintain like
multiple<01:10:25.280><c> ram</c><01:10:25.600><c> systems</c><01:10:26.159><c> how</c><01:10:26.320><c> does</c><01:10:26.560><c> it</c>

01:10:27.110 --> 01:10:27.120 align:start position:0%
multiple ram systems how does it
 

01:10:27.120 --> 01:10:30.870 align:start position:0%
multiple ram systems how does it
unify<01:10:28.840><c> those</c>

01:10:30.870 --> 01:10:30.880 align:start position:0%
unify those
 

01:10:30.880 --> 01:10:34.630 align:start position:0%
unify those
um<01:10:32.400><c> the</c><01:10:32.560><c> ordinary</c>

01:10:34.630 --> 01:10:34.640 align:start position:0%
um the ordinary
 

01:10:34.640 --> 01:10:40.870 align:start position:0%
um the ordinary
um<01:10:36.560><c> well</c>

01:10:40.870 --> 01:10:40.880 align:start position:0%
 
 

01:10:40.880 --> 01:10:43.669 align:start position:0%
 
at<01:10:41.040><c> a</c><01:10:41.280><c> uh</c><01:10:42.239><c> at</c><01:10:42.320><c> the</c><01:10:42.480><c> level</c><01:10:42.719><c> we're</c><01:10:42.880><c> talking</c><01:10:43.199><c> about</c>

01:10:43.669 --> 01:10:43.679 align:start position:0%
at a uh at the level we're talking about
 

01:10:43.679 --> 01:10:47.270 align:start position:0%
at a uh at the level we're talking about
the<01:10:43.840><c> machine</c><01:10:44.239><c> has</c><01:10:44.320><c> one</c><01:10:44.560><c> ram</c><01:10:44.880><c> system</c>

01:10:47.270 --> 01:10:47.280 align:start position:0%
 
 

01:10:47.280 --> 01:10:51.189 align:start position:0%
 
okay<01:10:47.520><c> the</c><01:10:48.480><c> you</c><01:10:48.640><c> know</c><01:10:48.960><c> the</c><01:10:49.920><c> um</c>

01:10:51.189 --> 01:10:51.199 align:start position:0%
okay the you know the um
 

01:10:51.199 --> 01:10:53.990 align:start position:0%
okay the you know the um
yeah<01:10:52.480><c> it's</c><01:10:52.719><c> um</c><01:10:53.280><c> for</c><01:10:53.440><c> all</c><01:10:53.520><c> those</c><01:10:53.760><c> sort</c><01:10:53.840><c> of</c>

01:10:53.990 --> 01:10:54.000 align:start position:0%
yeah it's um for all those sort of
 

01:10:54.000 --> 01:10:55.270 align:start position:0%
yeah it's um for all those sort of
ordinary<01:10:54.400><c> computers</c><01:10:54.719><c> you</c><01:10:54.880><c> would</c><01:10:54.960><c> buy</c><01:10:55.120><c> that</c>

01:10:55.270 --> 01:10:55.280 align:start position:0%
ordinary computers you would buy that
 

01:10:55.280 --> 01:10:56.149 align:start position:0%
ordinary computers you would buy that
have<01:10:55.440><c> multiple</c>

01:10:56.149 --> 01:10:56.159 align:start position:0%
have multiple
 

01:10:56.159 --> 01:10:59.350 align:start position:0%
have multiple
cores<01:10:57.360><c> you</c><01:10:57.520><c> can</c><01:10:58.320><c> pretty</c><01:10:58.560><c> much</c><01:10:58.880><c> program</c><01:10:59.199><c> them</c>

01:10:59.350 --> 01:10:59.360 align:start position:0%
cores you can pretty much program them
 

01:10:59.360 --> 01:11:01.110 align:start position:0%
cores you can pretty much program them
as<01:10:59.520><c> if</c><01:10:59.679><c> they</c><01:10:59.760><c> were</c><01:10:59.840><c> just</c><01:11:00.000><c> one</c><01:11:00.239><c> ram</c><01:11:00.560><c> system</c>

01:11:01.110 --> 01:11:01.120 align:start position:0%
as if they were just one ram system
 

01:11:01.120 --> 01:11:03.110 align:start position:0%
as if they were just one ram system
shared<01:11:01.440><c> among</c><01:11:01.760><c> all</c><01:11:01.840><c> the</c><01:11:02.000><c> cores</c><01:11:02.400><c> that's</c><01:11:02.640><c> the</c>

01:11:03.110 --> 01:11:03.120 align:start position:0%
shared among all the cores that's the
 

01:11:03.120 --> 01:11:04.229 align:start position:0%
shared among all the cores that's the
logical<01:11:03.520><c> model</c><01:11:03.920><c> the</c>

01:11:04.229 --> 01:11:04.239 align:start position:0%
logical model the
 

01:11:04.239 --> 01:11:06.390 align:start position:0%
logical model the
hardware<01:11:04.640><c> provides</c><01:11:05.120><c> you</c><01:11:05.920><c> at</c><01:11:06.000><c> a</c><01:11:06.080><c> physical</c>

01:11:06.390 --> 01:11:06.400 align:start position:0%
hardware provides you at a physical
 

01:11:06.400 --> 01:11:08.070 align:start position:0%
hardware provides you at a physical
level<01:11:06.640><c> it's</c><01:11:06.800><c> not</c><01:11:06.960><c> like</c><01:11:07.199><c> that</c>

01:11:08.070 --> 01:11:08.080 align:start position:0%
level it's not like that
 

01:11:08.080 --> 01:11:10.870 align:start position:0%
level it's not like that
often<01:11:09.760><c> there's</c><01:11:10.000><c> plenty</c><01:11:10.239><c> of</c><01:11:10.320><c> machines</c><01:11:10.719><c> out</c>

01:11:10.870 --> 01:11:10.880 align:start position:0%
often there's plenty of machines out
 

01:11:10.880 --> 01:11:11.990 align:start position:0%
often there's plenty of machines out
there<01:11:11.120><c> that</c><01:11:11.360><c> have</c>

01:11:11.990 --> 01:11:12.000 align:start position:0%
there that have
 

01:11:12.000 --> 01:11:15.430 align:start position:0%
there that have
this<01:11:12.480><c> physical</c><01:11:13.040><c> arrangement</c><01:11:13.840><c> we</c><01:11:14.080><c> have</c><01:11:14.480><c> a</c><01:11:14.800><c> cpu</c>

01:11:15.430 --> 01:11:15.440 align:start position:0%
this physical arrangement we have a cpu
 

01:11:15.440 --> 01:11:16.470 align:start position:0%
this physical arrangement we have a cpu
chip

01:11:16.470 --> 01:11:16.480 align:start position:0%
chip
 

01:11:16.480 --> 01:11:19.750 align:start position:0%
chip
so<01:11:16.640><c> here's</c><01:11:16.880><c> one</c><01:11:17.120><c> cpu</c><01:11:17.679><c> chip</c><01:11:18.000><c> maybe</c><01:11:18.320><c> with</c>

01:11:19.750 --> 01:11:19.760 align:start position:0%
so here's one cpu chip maybe with
 

01:11:19.760 --> 01:11:23.189 align:start position:0%
so here's one cpu chip maybe with
lots<01:11:20.080><c> of</c><01:11:20.159><c> cores</c><01:11:20.560><c> on</c><01:11:20.719><c> it</c><01:11:21.360><c> right</c><01:11:22.400><c> and</c>

01:11:23.189 --> 01:11:23.199 align:start position:0%
lots of cores on it right and
 

01:11:23.199 --> 01:11:24.709 align:start position:0%
lots of cores on it right and
you<01:11:23.280><c> know</c><01:11:23.440><c> you</c><01:11:23.520><c> can</c><01:11:23.600><c> get</c><01:11:23.840><c> cpu</c><01:11:24.159><c> chips</c><01:11:24.400><c> with</c><01:11:24.640><c> i</c>

01:11:24.709 --> 01:11:24.719 align:start position:0%
you know you can get cpu chips with i
 

01:11:24.719 --> 01:11:26.229 align:start position:0%
you know you can get cpu chips with i
don't<01:11:24.800><c> know</c><01:11:24.880><c> how</c><01:11:24.960><c> many</c><01:11:25.120><c> cores</c><01:11:25.440><c> these</c><01:11:25.600><c> days</c><01:11:25.840><c> 32</c>

01:11:26.229 --> 01:11:26.239 align:start position:0%
don't know how many cores these days 32
 

01:11:26.239 --> 01:11:27.590 align:start position:0%
don't know how many cores these days 32
cores<01:11:26.560><c> say</c><01:11:26.719><c> let's</c><01:11:26.880><c> say</c><01:11:27.040><c> you</c><01:11:27.120><c> want</c><01:11:27.199><c> to</c><01:11:27.280><c> build</c><01:11:27.520><c> a</c>

01:11:27.590 --> 01:11:27.600 align:start position:0%
cores say let's say you want to build a
 

01:11:27.600 --> 01:11:30.070 align:start position:0%
cores say let's say you want to build a
64<01:11:28.080><c> core</c><01:11:28.320><c> machine</c><01:11:28.640><c> you</c><01:11:28.719><c> can</c><01:11:28.880><c> only</c><01:11:29.040><c> buy</c><01:11:29.199><c> 32</c>

01:11:30.070 --> 01:11:30.080 align:start position:0%
64 core machine you can only buy 32
 

01:11:30.080 --> 01:11:33.270 align:start position:0%
64 core machine you can only buy 32
core<01:11:30.400><c> chips</c><01:11:31.120><c> well</c><01:11:31.360><c> you</c><01:11:31.440><c> can</c><01:11:31.920><c> make</c><01:11:32.159><c> a</c><01:11:32.320><c> board</c>

01:11:33.270 --> 01:11:33.280 align:start position:0%
core chips well you can make a board
 

01:11:33.280 --> 01:11:35.110 align:start position:0%
core chips well you can make a board
i<01:11:33.360><c> think</c><01:11:33.600><c> it</c><01:11:33.679><c> has</c><01:11:33.920><c> two</c><01:11:34.159><c> sockets</c><01:11:34.640><c> for</c><01:11:34.800><c> chips</c><01:11:35.040><c> on</c>

01:11:35.110 --> 01:11:35.120 align:start position:0%
i think it has two sockets for chips on
 

01:11:35.120 --> 01:11:38.470 align:start position:0%
i think it has two sockets for chips on
it<01:11:35.199><c> so</c><01:11:35.360><c> now</c><01:11:35.520><c> we</c><01:11:35.600><c> have</c><01:11:35.679><c> two</c><01:11:36.000><c> chips</c>

01:11:38.470 --> 01:11:38.480 align:start position:0%
 
 

01:11:38.480 --> 01:11:40.550 align:start position:0%
 
the<01:11:38.640><c> fastest</c><01:11:39.040><c> way</c><01:11:39.199><c> to</c><01:11:39.280><c> get</c><01:11:39.440><c> app</c><01:11:39.600><c> memory</c><01:11:40.320><c> is</c><01:11:40.480><c> to</c>

01:11:40.550 --> 01:11:40.560 align:start position:0%
the fastest way to get app memory is to
 

01:11:40.560 --> 01:11:42.470 align:start position:0%
the fastest way to get app memory is to
have<01:11:40.719><c> the</c><01:11:40.800><c> memory</c><01:11:41.199><c> more</c><01:11:41.440><c> or</c><01:11:41.520><c> less</c><01:11:41.760><c> as</c><01:11:42.000><c> directly</c>

01:11:42.470 --> 01:11:42.480 align:start position:0%
have the memory more or less as directly
 

01:11:42.480 --> 01:11:45.030 align:start position:0%
have the memory more or less as directly
attached<01:11:43.040><c> to</c><01:11:43.199><c> the</c><01:11:43.280><c> cpu</c><01:11:43.760><c> chip</c><01:11:44.000><c> as</c><01:11:44.239><c> possible</c>

01:11:45.030 --> 01:11:45.040 align:start position:0%
attached to the cpu chip as possible
 

01:11:45.040 --> 01:11:46.950 align:start position:0%
attached to the cpu chip as possible
so<01:11:45.199><c> what</c><01:11:45.360><c> you</c><01:11:45.440><c> would</c><01:11:45.520><c> do</c><01:11:45.679><c> is</c><01:11:45.840><c> you'd</c><01:11:46.000><c> have</c><01:11:46.159><c> like</c>

01:11:46.950 --> 01:11:46.960 align:start position:0%
so what you would do is you'd have like
 

01:11:46.960 --> 01:11:48.470 align:start position:0%
so what you would do is you'd have like
a<01:11:47.120><c> very</c><01:11:47.520><c> fat</c>

01:11:48.470 --> 01:11:48.480 align:start position:0%
a very fat
 

01:11:48.480 --> 01:11:51.350 align:start position:0%
a very fat
set<01:11:48.640><c> of</c><01:11:48.719><c> wires</c><01:11:49.280><c> here</c><01:11:50.320><c> to</c><01:11:50.560><c> right</c><01:11:50.800><c> next</c><01:11:51.040><c> to</c><01:11:51.120><c> the</c>

01:11:51.350 --> 01:11:51.360 align:start position:0%
set of wires here to right next to the
 

01:11:51.360 --> 01:11:52.470 align:start position:0%
set of wires here to right next to the
chip

01:11:52.470 --> 01:11:52.480 align:start position:0%
chip
 

01:11:52.480 --> 01:11:56.149 align:start position:0%
chip
um<01:11:52.719><c> a</c><01:11:52.800><c> bunch</c><01:11:53.040><c> of</c><01:11:53.199><c> ram</c><01:11:55.199><c> so</c><01:11:55.440><c> it</c><01:11:55.520><c> has</c><01:11:55.760><c> direct</c>

01:11:56.149 --> 01:11:56.159 align:start position:0%
um a bunch of ram so it has direct
 

01:11:56.159 --> 01:11:57.430 align:start position:0%
um a bunch of ram so it has direct
access<01:11:56.480><c> and</c><01:11:56.560><c> of</c><01:11:56.640><c> course</c><01:11:56.800><c> this</c><01:11:57.040><c> chip's</c><01:11:57.360><c> going</c>

01:11:57.430 --> 01:11:57.440 align:start position:0%
access and of course this chip's going
 

01:11:57.440 --> 01:11:58.390 align:start position:0%
access and of course this chip's going
to<01:11:57.520><c> want</c><01:11:57.679><c> its</c><01:11:57.840><c> own</c><01:11:58.000><c> ram</c>

01:11:58.390 --> 01:11:58.400 align:start position:0%
to want its own ram
 

01:11:58.400 --> 01:12:01.590 align:start position:0%
to want its own ram
also<01:11:59.440><c> all</c><01:11:59.600><c> right</c><01:12:00.080><c> so</c><01:12:00.960><c> this</c><01:12:01.120><c> is</c><01:12:01.280><c> i'm</c><01:12:01.440><c> just</c>

01:12:01.590 --> 01:12:01.600 align:start position:0%
also all right so this is i'm just
 

01:12:01.600 --> 01:12:02.630 align:start position:0%
also all right so this is i'm just
drawing<01:12:01.760><c> a</c><01:12:01.840><c> picture</c><01:12:02.080><c> of</c><01:12:02.159><c> what</c><01:12:02.239><c> you</c><01:12:02.320><c> would</c><01:12:02.480><c> see</c>

01:12:02.630 --> 01:12:02.640 align:start position:0%
drawing a picture of what you would see
 

01:12:02.640 --> 01:12:03.910 align:start position:0%
drawing a picture of what you would see
if<01:12:02.800><c> you</c><01:12:02.880><c> opened</c><01:12:03.199><c> up</c><01:12:03.360><c> a</c>

01:12:03.910 --> 01:12:03.920 align:start position:0%
if you opened up a
 

01:12:03.920 --> 01:12:10.550 align:start position:0%
if you opened up a
pc<01:12:04.400><c> with</c><01:12:05.120><c> two</c><01:12:05.360><c> processor</c><01:12:05.840><c> chips</c><01:12:06.080><c> in</c><01:12:06.239><c> it</c><01:12:06.840><c> ram</c>

01:12:10.550 --> 01:12:10.560 align:start position:0%
 
 

01:12:10.560 --> 01:12:11.910 align:start position:0%
 
but<01:12:10.719><c> now</c><01:12:10.960><c> we're</c><01:12:11.120><c> faced</c><01:12:11.360><c> with</c><01:12:11.440><c> a</c><01:12:11.520><c> problem</c><01:12:11.760><c> what</c>

01:12:11.910 --> 01:12:11.920 align:start position:0%
but now we're faced with a problem what
 

01:12:11.920 --> 01:12:14.390 align:start position:0%
but now we're faced with a problem what
happens<01:12:12.239><c> if</c><01:12:12.400><c> a</c><01:12:12.880><c> software</c><01:12:13.280><c> over</c><01:12:13.440><c> on</c><01:12:13.600><c> this</c><01:12:13.840><c> chip</c>

01:12:14.390 --> 01:12:14.400 align:start position:0%
happens if a software over on this chip
 

01:12:14.400 --> 01:12:15.990 align:start position:0%
happens if a software over on this chip
uses<01:12:14.719><c> a</c><01:12:14.800><c> memory</c><01:12:15.120><c> location</c><01:12:15.520><c> it's</c><01:12:15.760><c> actually</c>

01:12:15.990 --> 01:12:16.000 align:start position:0%
uses a memory location it's actually
 

01:12:16.000 --> 01:12:17.830 align:start position:0%
uses a memory location it's actually
stored<01:12:16.320><c> in</c><01:12:16.400><c> this</c><01:12:16.640><c> ram</c>

01:12:17.830 --> 01:12:17.840 align:start position:0%
stored in this ram
 

01:12:17.840 --> 01:12:21.430 align:start position:0%
stored in this ram
so<01:12:18.080><c> in</c><01:12:18.239><c> fact</c><01:12:18.400><c> there's</c><01:12:18.640><c> also</c><01:12:18.960><c> a</c><01:12:19.840><c> interconnect</c>

01:12:21.430 --> 01:12:21.440 align:start position:0%
so in fact there's also a interconnect
 

01:12:21.440 --> 01:12:24.229 align:start position:0%
so in fact there's also a interconnect
between<01:12:21.840><c> these</c><01:12:22.080><c> two</c><01:12:22.320><c> chips</c><01:12:23.679><c> generally</c><01:12:24.080><c> an</c>

01:12:24.229 --> 01:12:24.239 align:start position:0%
between these two chips generally an
 

01:12:24.239 --> 01:12:26.790 align:start position:0%
between these two chips generally an
extremely<01:12:24.800><c> fast</c><01:12:25.199><c> interconnect</c><01:12:25.840><c> like</c>

01:12:26.790 --> 01:12:26.800 align:start position:0%
extremely fast interconnect like
 

01:12:26.800 --> 01:12:29.750 align:start position:0%
extremely fast interconnect like
gigabytes<01:12:27.360><c> per</c><01:12:27.520><c> second</c><01:12:29.120><c> and</c><01:12:29.280><c> the</c><01:12:29.440><c> chips</c><01:12:29.679><c> are</c>

01:12:29.750 --> 01:12:29.760 align:start position:0%
gigabytes per second and the chips are
 

01:12:29.760 --> 01:12:30.950 align:start position:0%
gigabytes per second and the chips are
smart<01:12:30.080><c> enough</c><01:12:30.320><c> to</c><01:12:30.400><c> know</c><01:12:30.560><c> that</c><01:12:30.719><c> certain</c>

01:12:30.950 --> 01:12:30.960 align:start position:0%
smart enough to know that certain
 

01:12:30.960 --> 01:12:32.550 align:start position:0%
smart enough to know that certain
physical<01:12:31.280><c> memory</c><01:12:31.600><c> locations</c><01:12:32.080><c> are</c><01:12:32.239><c> in</c><01:12:32.320><c> this</c>

01:12:32.550 --> 01:12:32.560 align:start position:0%
physical memory locations are in this
 

01:12:32.560 --> 01:12:33.590 align:start position:0%
physical memory locations are in this
bank<01:12:32.800><c> of</c><01:12:32.960><c> ram</c>

01:12:33.590 --> 01:12:33.600 align:start position:0%
bank of ram
 

01:12:33.600 --> 01:12:35.350 align:start position:0%
bank of ram
and<01:12:33.760><c> other</c><01:12:34.000><c> physical</c><01:12:34.320><c> locations</c><01:12:35.040><c> physical</c>

01:12:35.350 --> 01:12:35.360 align:start position:0%
and other physical locations physical
 

01:12:35.360 --> 01:12:37.030 align:start position:0%
and other physical locations physical
memory<01:12:35.679><c> addresses</c><01:12:36.080><c> are</c><01:12:36.159><c> in</c><01:12:36.320><c> this</c><01:12:36.400><c> bank</c><01:12:36.640><c> of</c><01:12:36.719><c> ram</c>

01:12:37.030 --> 01:12:37.040 align:start position:0%
memory addresses are in this bank of ram
 

01:12:37.040 --> 01:12:39.590 align:start position:0%
memory addresses are in this bank of ram
and<01:12:37.120><c> if</c><01:12:37.199><c> software</c><01:12:37.600><c> here</c>

01:12:39.590 --> 01:12:39.600 align:start position:0%
and if software here
 

01:12:39.600 --> 01:12:41.350 align:start position:0%
and if software here
uses<01:12:40.000><c> a</c><01:12:40.159><c> physical</c><01:12:40.480><c> address</c><01:12:40.880><c> is</c><01:12:40.960><c> over</c><01:12:41.120><c> in</c><01:12:41.280><c> this</c>

01:12:41.350 --> 01:12:41.360 align:start position:0%
uses a physical address is over in this
 

01:12:41.360 --> 01:12:43.270 align:start position:0%
uses a physical address is over in this
one<01:12:41.520><c> the</c><01:12:41.840><c> chip</c><01:12:42.080><c> is</c><01:12:42.239><c> clever</c><01:12:42.560><c> enough</c><01:12:42.800><c> to</c><01:12:42.880><c> send</c><01:12:43.120><c> a</c>

01:12:43.270 --> 01:12:43.280 align:start position:0%
one the chip is clever enough to send a
 

01:12:43.280 --> 01:12:43.830 align:start position:0%
one the chip is clever enough to send a
message

01:12:43.830 --> 01:12:43.840 align:start position:0%
message
 

01:12:43.840 --> 01:12:45.669 align:start position:0%
message
it's<01:12:44.000><c> basically</c><01:12:44.239><c> a</c><01:12:44.320><c> little</c><01:12:44.560><c> network</c><01:12:45.280><c> send</c><01:12:45.520><c> a</c>

01:12:45.669 --> 01:12:45.679 align:start position:0%
it's basically a little network send a
 

01:12:45.679 --> 01:12:47.110 align:start position:0%
it's basically a little network send a
message<01:12:46.080><c> over</c><01:12:46.239><c> to</c><01:12:46.320><c> this</c><01:12:46.560><c> chip</c><01:12:46.719><c> telling</c><01:12:47.040><c> it</c>

01:12:47.110 --> 01:12:47.120 align:start position:0%
message over to this chip telling it
 

01:12:47.120 --> 01:12:48.790 align:start position:0%
message over to this chip telling it
look<01:12:47.280><c> i</c><01:12:47.440><c> need</c><01:12:47.600><c> to</c><01:12:47.679><c> read</c><01:12:47.840><c> some</c><01:12:48.000><c> ram</c><01:12:48.400><c> please</c><01:12:48.640><c> do</c>

01:12:48.790 --> 01:12:48.800 align:start position:0%
look i need to read some ram please do
 

01:12:48.800 --> 01:12:49.350 align:start position:0%
look i need to read some ram please do
it<01:12:48.960><c> and</c>

01:12:49.350 --> 01:12:49.360 align:start position:0%
it and
 

01:12:49.360 --> 01:12:50.950 align:start position:0%
it and
i'll<01:12:49.520><c> go</c><01:12:49.679><c> read</c><01:12:49.920><c> its</c><01:12:50.080><c> ram</c><01:12:50.320><c> and</c><01:12:50.400><c> send</c><01:12:50.560><c> the</c><01:12:50.640><c> result</c>

01:12:50.950 --> 01:12:50.960 align:start position:0%
i'll go read its ram and send the result
 

01:12:50.960 --> 01:12:53.189 align:start position:0%
i'll go read its ram and send the result
back<01:12:51.920><c> you</c><01:12:52.000><c> know</c><01:12:52.159><c> you</c><01:12:52.239><c> can</c><01:12:52.400><c> buy</c><01:12:52.560><c> four</c><01:12:52.880><c> chip</c>

01:12:53.189 --> 01:12:53.199 align:start position:0%
back you know you can buy four chip
 

01:12:53.199 --> 01:12:55.430 align:start position:0%
back you know you can buy four chip
arrangements<01:12:53.760><c> with</c><01:12:54.000><c> the</c><01:12:54.080><c> same</c><01:12:54.320><c> thing</c><01:12:54.560><c> with</c><01:12:54.800><c> a</c>

01:12:55.430 --> 01:12:55.440 align:start position:0%
arrangements with the same thing with a
 

01:12:55.440 --> 01:12:57.590 align:start position:0%
arrangements with the same thing with a
complex<01:12:56.000><c> interconnect</c><01:12:56.560><c> like</c><01:12:56.719><c> this</c><01:12:57.440><c> so</c>

01:12:57.590 --> 01:12:57.600 align:start position:0%
complex interconnect like this so
 

01:12:57.600 --> 01:12:59.189 align:start position:0%
complex interconnect like this so
there's<01:12:57.760><c> a</c><01:12:57.840><c> huge</c><01:12:58.320><c> amount</c><01:12:58.640><c> of</c>

01:12:59.189 --> 01:12:59.199 align:start position:0%
there's a huge amount of
 

01:12:59.199 --> 01:13:02.310 align:start position:0%
there's a huge amount of
engineering<01:12:59.840><c> going</c><01:13:00.080><c> on</c><01:13:00.320><c> in</c><01:13:00.480><c> order</c><01:13:00.800><c> to</c><01:13:01.760><c> map</c><01:13:02.080><c> the</c>

01:13:02.310 --> 01:13:02.320 align:start position:0%
engineering going on in order to map the
 

01:13:02.320 --> 01:13:04.630 align:start position:0%
engineering going on in order to map the
straightforward<01:13:03.120><c> shared</c><01:13:03.520><c> ram</c><01:13:03.840><c> model</c>

01:13:04.630 --> 01:13:04.640 align:start position:0%
straightforward shared ram model
 

01:13:04.640 --> 01:13:06.070 align:start position:0%
straightforward shared ram model
onto<01:13:04.880><c> what's</c><01:13:05.120><c> sort</c><01:13:05.280><c> of</c><01:13:05.360><c> feasible</c><01:13:05.760><c> to</c><01:13:05.840><c> build</c>

01:13:06.070 --> 01:13:06.080 align:start position:0%
onto what's sort of feasible to build
 

01:13:06.080 --> 01:13:08.310 align:start position:0%
onto what's sort of feasible to build
with<01:13:06.239><c> high</c><01:13:06.480><c> performance</c>

01:13:08.310 --> 01:13:08.320 align:start position:0%
with high performance
 

01:13:08.320 --> 01:13:10.709 align:start position:0%
with high performance
in<01:13:08.400><c> real</c><01:13:08.640><c> life</c><01:13:08.880><c> and</c><01:13:09.120><c> fit</c><01:13:09.440><c> in</c><01:13:10.239><c> two</c><01:13:10.480><c> or</c><01:13:10.560><c> three</c>

01:13:10.709 --> 01:13:10.719 align:start position:0%
in real life and fit in two or three
 

01:13:10.719 --> 01:13:14.790 align:start position:0%
in real life and fit in two or three
dimensions

01:13:14.790 --> 01:13:14.800 align:start position:0%
 
 

01:13:14.800 --> 01:13:17.110 align:start position:0%
 
that<01:13:15.040><c> answer</c><01:13:15.280><c> your</c><01:13:15.360><c> question</c><01:13:16.719><c> yeah</c><01:13:16.960><c> that</c>

01:13:17.110 --> 01:13:17.120 align:start position:0%
that answer your question yeah that
 

01:13:17.120 --> 01:13:21.830 align:start position:0%
that answer your question yeah that
provides<01:13:17.679><c> a</c><01:13:17.760><c> lot</c><01:13:17.920><c> of</c><01:13:18.000><c> context</c><01:13:18.560><c> thank</c><01:13:18.719><c> you</c>

01:13:21.830 --> 01:13:21.840 align:start position:0%
 
 

01:13:21.840 --> 01:13:30.830 align:start position:0%
 
okay

01:13:30.830 --> 01:13:30.840 align:start position:0%
 
 

01:13:30.840 --> 01:13:32.870 align:start position:0%
 
um

01:13:32.870 --> 01:13:32.880 align:start position:0%
um
 

01:13:32.880 --> 01:13:39.910 align:start position:0%
um
any<01:13:33.040><c> questions</c><01:13:33.360><c> on</c><01:13:33.440><c> the</c><01:13:33.600><c> actual</c><01:13:33.920><c> technique</c><01:13:34.880><c> um</c>

01:13:39.910 --> 01:13:39.920 align:start position:0%
 
 

01:13:39.920 --> 01:13:43.510 align:start position:0%
 
all<01:13:40.080><c> right</c><01:13:40.239><c> so</c><01:13:41.920><c> um</c><01:13:42.560><c> as</c><01:13:42.880><c> i'm</c><01:13:43.199><c> sure</c><01:13:43.360><c> you've</c>

01:13:43.510 --> 01:13:43.520 align:start position:0%
all right so um as i'm sure you've
 

01:13:43.520 --> 01:13:44.630 align:start position:0%
all right so um as i'm sure you've
gotten<01:13:43.679><c> the</c><01:13:43.840><c> sense</c><01:13:44.239><c> our</c>

01:13:44.630 --> 01:13:44.640 align:start position:0%
gotten the sense our
 

01:13:44.640 --> 01:13:47.430 align:start position:0%
gotten the sense our
of<01:13:44.960><c> rcu</c><01:13:45.520><c> is</c><01:13:45.600><c> not</c><01:13:46.000><c> universally</c><01:13:46.640><c> applicable</c>

01:13:47.430 --> 01:13:47.440 align:start position:0%
of rcu is not universally applicable
 

01:13:47.440 --> 01:13:48.950 align:start position:0%
of rcu is not universally applicable
there's<01:13:47.679><c> not</c><01:13:47.920><c> you</c><01:13:48.000><c> can't</c><01:13:48.239><c> just</c>

01:13:48.950 --> 01:13:48.960 align:start position:0%
there's not you can't just
 

01:13:48.960 --> 01:13:50.470 align:start position:0%
there's not you can't just
take<01:13:49.199><c> every</c><01:13:49.440><c> situation</c><01:13:49.840><c> in</c><01:13:49.920><c> which</c><01:13:50.159><c> using</c>

01:13:50.470 --> 01:13:50.480 align:start position:0%
take every situation in which using
 

01:13:50.480 --> 01:13:51.990 align:start position:0%
take every situation in which using
spinlocks<01:13:51.040><c> and</c><01:13:51.120><c> getting</c><01:13:51.520><c> bad</c>

01:13:51.990 --> 01:13:52.000 align:start position:0%
spinlocks and getting bad
 

01:13:52.000 --> 01:13:53.750 align:start position:0%
spinlocks and getting bad
parallel<01:13:52.400><c> performance</c><01:13:53.040><c> and</c><01:13:53.120><c> convert</c><01:13:53.520><c> it</c><01:13:53.600><c> to</c>

01:13:53.750 --> 01:13:53.760 align:start position:0%
parallel performance and convert it to
 

01:13:53.760 --> 01:13:55.750 align:start position:0%
parallel performance and convert it to
rcu<01:13:54.320><c> and</c><01:13:54.640><c> get</c><01:13:54.800><c> better</c><01:13:55.040><c> performance</c>

01:13:55.750 --> 01:13:55.760 align:start position:0%
rcu and get better performance
 

01:13:55.760 --> 01:13:57.750 align:start position:0%
rcu and get better performance
because<01:13:56.080><c> it</c><01:13:56.880><c> the</c><01:13:57.120><c> main</c><01:13:57.280><c> reason</c><01:13:57.520><c> is</c><01:13:57.679><c> it</c>

01:13:57.750 --> 01:13:57.760 align:start position:0%
because it the main reason is it
 

01:13:57.760 --> 01:13:59.270 align:start position:0%
because it the main reason is it
completely<01:13:58.080><c> doesn't</c><01:13:58.320><c> help</c><01:13:58.560><c> rights</c>

01:13:59.270 --> 01:13:59.280 align:start position:0%
completely doesn't help rights
 

01:13:59.280 --> 01:14:02.310 align:start position:0%
completely doesn't help rights
makes<01:13:59.520><c> them</c><01:13:59.679><c> slower</c><01:14:00.640><c> now</c><01:14:01.120><c> really</c><01:14:01.360><c> only</c><01:14:02.000><c> helps</c>

01:14:02.310 --> 01:14:02.320 align:start position:0%
makes them slower now really only helps
 

01:14:02.320 --> 01:14:03.430 align:start position:0%
makes them slower now really only helps
performance<01:14:02.880><c> if</c><01:14:02.960><c> you</c>

01:14:03.430 --> 01:14:03.440 align:start position:0%
performance if you
 

01:14:03.440 --> 01:14:05.189 align:start position:0%
performance if you
if<01:14:03.600><c> the</c><01:14:03.760><c> reads</c><01:14:04.159><c> outnumber</c><01:14:04.560><c> the</c><01:14:04.719><c> rights</c>

01:14:05.189 --> 01:14:05.199 align:start position:0%
if the reads outnumber the rights
 

01:14:05.199 --> 01:14:07.990 align:start position:0%
if the reads outnumber the rights
considerably

01:14:07.990 --> 01:14:08.000 align:start position:0%
 
 

01:14:08.000 --> 01:14:09.910 align:start position:0%
 
it<01:14:08.400><c> has</c><01:14:08.640><c> this</c><01:14:08.880><c> restriction</c><01:14:09.360><c> that</c><01:14:09.520><c> you</c><01:14:09.600><c> can't</c>

01:14:09.910 --> 01:14:09.920 align:start position:0%
it has this restriction that you can't
 

01:14:09.920 --> 01:14:12.630 align:start position:0%
it has this restriction that you can't
hold<01:14:10.560><c> pointers</c><01:14:11.040><c> to</c><01:14:11.440><c> protect</c><01:14:11.840><c> the</c><01:14:11.920><c> data</c><01:14:12.159><c> across</c>

01:14:12.630 --> 01:14:12.640 align:start position:0%
hold pointers to protect the data across
 

01:14:12.640 --> 01:14:14.709 align:start position:0%
hold pointers to protect the data across
sleep<01:14:13.040><c> which</c><01:14:13.280><c> just</c><01:14:13.679><c> makes</c><01:14:13.920><c> some</c><01:14:14.159><c> kind</c><01:14:14.320><c> of</c><01:14:14.400><c> code</c>

01:14:14.709 --> 01:14:14.719 align:start position:0%
sleep which just makes some kind of code
 

01:14:14.719 --> 01:14:15.750 align:start position:0%
sleep which just makes some kind of code
quite<01:14:14.960><c> awkward</c>

01:14:15.750 --> 01:14:15.760 align:start position:0%
quite awkward
 

01:14:15.760 --> 01:14:17.750 align:start position:0%
quite awkward
if<01:14:15.920><c> you</c><01:14:16.080><c> actually</c><01:14:16.320><c> need</c><01:14:16.480><c> to</c><01:14:16.640><c> sleep</c><01:14:17.360><c> you</c><01:14:17.520><c> may</c>

01:14:17.750 --> 01:14:17.760 align:start position:0%
if you actually need to sleep you may
 

01:14:17.760 --> 01:14:19.189 align:start position:0%
if you actually need to sleep you may
then<01:14:18.000><c> need</c><01:14:18.159><c> to</c><01:14:18.320><c> re-look</c><01:14:18.880><c> up</c>

01:14:19.189 --> 01:14:19.199 align:start position:0%
then need to re-look up
 

01:14:19.199 --> 01:14:21.990 align:start position:0%
then need to re-look up
whatever<01:14:19.520><c> it</c><01:14:19.679><c> is</c><01:14:21.040><c> you</c><01:14:21.199><c> know</c><01:14:21.360><c> to</c><01:14:21.440><c> do</c><01:14:21.600><c> another</c>

01:14:21.990 --> 01:14:22.000 align:start position:0%
whatever it is you know to do another
 

01:14:22.000 --> 01:14:23.750 align:start position:0%
whatever it is you know to do another
rcu<01:14:22.400><c> critical</c><01:14:22.800><c> section</c><01:14:23.120><c> after</c><01:14:23.360><c> the</c><01:14:23.440><c> sleep</c>

01:14:23.750 --> 01:14:23.760 align:start position:0%
rcu critical section after the sleep
 

01:14:23.760 --> 01:14:24.630 align:start position:0%
rcu critical section after the sleep
completes

01:14:24.630 --> 01:14:24.640 align:start position:0%
completes
 

01:14:24.640 --> 01:14:28.070 align:start position:0%
completes
in<01:14:24.800><c> order</c><01:14:25.120><c> to</c><01:14:25.280><c> look</c><01:14:25.440><c> again</c><01:14:26.080><c> for</c><01:14:26.239><c> the</c><01:14:26.880><c> um</c>

01:14:28.070 --> 01:14:28.080 align:start position:0%
in order to look again for the um
 

01:14:28.080 --> 01:14:29.510 align:start position:0%
in order to look again for the um
for<01:14:28.239><c> the</c><01:14:28.320><c> data</c><01:14:28.640><c> that</c><01:14:28.719><c> you</c><01:14:28.880><c> originally</c><01:14:29.360><c> were</c>

01:14:29.510 --> 01:14:29.520 align:start position:0%
for the data that you originally were
 

01:14:29.520 --> 01:14:31.910 align:start position:0%
for the data that you originally were
looking<01:14:29.840><c> at</c><01:14:30.159><c> assuming</c><01:14:30.560><c> it</c><01:14:30.640><c> still</c><01:14:30.880><c> even</c><01:14:31.120><c> exists</c>

01:14:31.910 --> 01:14:31.920 align:start position:0%
looking at assuming it still even exists
 

01:14:31.920 --> 01:14:33.110 align:start position:0%
looking at assuming it still even exists
so<01:14:32.080><c> it</c><01:14:32.159><c> just</c><01:14:32.320><c> makes</c><01:14:32.560><c> code</c><01:14:32.800><c> a</c><01:14:32.800><c> bit</c><01:14:32.960><c> more</c>

01:14:33.110 --> 01:14:33.120 align:start position:0%
so it just makes code a bit more
 

01:14:33.120 --> 01:14:36.070 align:start position:0%
so it just makes code a bit more
complicated<01:14:34.640><c> um</c>

01:14:36.070 --> 01:14:36.080 align:start position:0%
complicated um
 

01:14:36.080 --> 01:14:38.310 align:start position:0%
complicated um
the<01:14:36.320><c> data</c><01:14:36.640><c> structures</c><01:14:37.199><c> the</c><01:14:38.000><c> the</c><01:14:38.159><c> most</c>

01:14:38.310 --> 01:14:38.320 align:start position:0%
the data structures the the most
 

01:14:38.320 --> 01:14:39.830 align:start position:0%
the data structures the the most
straightforward<01:14:38.800><c> way</c><01:14:38.960><c> to</c><01:14:39.040><c> apply</c><01:14:39.360><c> it</c><01:14:39.520><c> is</c><01:14:39.679><c> the</c>

01:14:39.830 --> 01:14:39.840 align:start position:0%
straightforward way to apply it is the
 

01:14:39.840 --> 01:14:41.510 align:start position:0%
straightforward way to apply it is the
data<01:14:40.159><c> structures</c><01:14:40.640><c> that</c>

01:14:41.510 --> 01:14:41.520 align:start position:0%
data structures that
 

01:14:41.520 --> 01:14:43.830 align:start position:0%
data structures that
have<01:14:41.679><c> a</c><01:14:42.239><c> structure</c><01:14:42.719><c> that's</c><01:14:43.120><c> amenable</c><01:14:43.679><c> to</c>

01:14:43.830 --> 01:14:43.840 align:start position:0%
have a structure that's amenable to
 

01:14:43.840 --> 01:14:46.149 align:start position:0%
have a structure that's amenable to
single<01:14:44.239><c> committing</c><01:14:44.719><c> rates</c><01:14:45.120><c> for</c><01:14:45.360><c> updates</c>

01:14:46.149 --> 01:14:46.159 align:start position:0%
single committing rates for updates
 

01:14:46.159 --> 01:14:47.910 align:start position:0%
single committing rates for updates
so<01:14:46.400><c> you</c><01:14:46.560><c> can't</c><01:14:46.719><c> modify</c><01:14:47.120><c> things</c><01:14:47.360><c> in</c><01:14:47.520><c> place</c><01:14:47.760><c> so</c>

01:14:47.910 --> 01:14:47.920 align:start position:0%
so you can't modify things in place so
 

01:14:47.920 --> 01:14:51.510 align:start position:0%
so you can't modify things in place so
you<01:14:48.000><c> have</c><01:14:48.159><c> to</c><01:14:48.719><c> replace</c><01:14:49.280><c> stuff</c>

01:14:51.510 --> 01:14:51.520 align:start position:0%
you have to replace stuff
 

01:14:51.520 --> 01:14:54.390 align:start position:0%
you have to replace stuff
and<01:14:51.679><c> so</c><01:14:51.840><c> you</c><01:14:52.320><c> you</c><01:14:52.400><c> know</c><01:14:52.640><c> lists</c><01:14:52.960><c> and</c><01:14:53.040><c> trees</c><01:14:53.520><c> but</c>

01:14:54.390 --> 01:14:54.400 align:start position:0%
and so you you know lists and trees but
 

01:14:54.400 --> 01:14:56.229 align:start position:0%
and so you you know lists and trees but
not<01:14:54.640><c> more</c><01:14:54.800><c> complex</c><01:14:55.280><c> data</c><01:14:55.520><c> structures</c>

01:14:56.229 --> 01:14:56.239 align:start position:0%
not more complex data structures
 

01:14:56.239 --> 01:14:59.750 align:start position:0%
not more complex data structures
the<01:14:56.320><c> paper</c><01:14:56.640><c> mentions</c><01:14:57.040><c> some</c><01:14:58.960><c> more</c><01:14:59.199><c> complicated</c>

01:14:59.750 --> 01:14:59.760 align:start position:0%
the paper mentions some more complicated
 

01:14:59.760 --> 01:15:01.510 align:start position:0%
the paper mentions some more complicated
ways<01:15:00.000><c> like</c><01:15:00.159><c> sequence</c><01:15:00.560><c> locks</c>

01:15:01.510 --> 01:15:01.520 align:start position:0%
ways like sequence locks
 

01:15:01.520 --> 01:15:04.709 align:start position:0%
ways like sequence locks
to<01:15:01.679><c> be</c><01:15:01.840><c> able</c><01:15:02.000><c> to</c><01:15:02.719><c> um</c><01:15:03.440><c> update</c><01:15:03.840><c> stuff</c><01:15:04.080><c> in</c><01:15:04.159><c> place</c>

01:15:04.709 --> 01:15:04.719 align:start position:0%
to be able to um update stuff in place
 

01:15:04.719 --> 01:15:06.950 align:start position:0%
to be able to um update stuff in place
you<01:15:04.880><c> know</c><01:15:05.040><c> despite</c><01:15:06.159><c> readers</c><01:15:06.560><c> that</c><01:15:06.719><c> aren't</c>

01:15:06.950 --> 01:15:06.960 align:start position:0%
you know despite readers that aren't
 

01:15:06.960 --> 01:15:08.390 align:start position:0%
you know despite readers that aren't
using<01:15:07.199><c> locks</c><01:15:07.600><c> but</c><01:15:07.760><c> they're</c><01:15:08.000><c> good</c><01:15:08.159><c> to</c>

01:15:08.390 --> 01:15:08.400 align:start position:0%
using locks but they're good to
 

01:15:08.400 --> 01:15:10.790 align:start position:0%
using locks but they're good to
more<01:15:08.560><c> complicated</c><01:15:09.280><c> and</c><01:15:10.000><c> the</c><01:15:10.159><c> situations</c>

01:15:10.790 --> 01:15:10.800 align:start position:0%
more complicated and the situations
 

01:15:10.800 --> 01:15:12.310 align:start position:0%
more complicated and the situations
under<01:15:10.960><c> which</c><01:15:11.199><c> they</c>

01:15:12.310 --> 01:15:12.320 align:start position:0%
under which they
 

01:15:12.320 --> 01:15:13.830 align:start position:0%
under which they
actually<01:15:12.640><c> improve</c><01:15:12.960><c> performance</c><01:15:13.440><c> are</c><01:15:13.679><c> more</c>

01:15:13.830 --> 01:15:13.840 align:start position:0%
actually improve performance are more
 

01:15:13.840 --> 01:15:16.790 align:start position:0%
actually improve performance are more
restricted

01:15:16.790 --> 01:15:16.800 align:start position:0%
 
 

01:15:16.800 --> 01:15:20.229 align:start position:0%
 
another<01:15:17.679><c> subtle</c><01:15:19.360><c> problem</c><01:15:19.679><c> is</c><01:15:19.760><c> that</c><01:15:19.920><c> readers</c>

01:15:20.229 --> 01:15:20.239 align:start position:0%
another subtle problem is that readers
 

01:15:20.239 --> 01:15:22.870 align:start position:0%
another subtle problem is that readers
can<01:15:20.400><c> see</c><01:15:20.640><c> stale</c><01:15:21.120><c> data</c>

01:15:22.870 --> 01:15:22.880 align:start position:0%
can see stale data
 

01:15:22.880 --> 01:15:26.310 align:start position:0%
can see stale data
uh<01:15:24.080><c> without</c><01:15:24.560><c> any</c><01:15:24.800><c> obvious</c><01:15:25.280><c> bound</c><01:15:25.679><c> on</c><01:15:25.840><c> how</c><01:15:26.080><c> long</c>

01:15:26.310 --> 01:15:26.320 align:start position:0%
uh without any obvious bound on how long
 

01:15:26.320 --> 01:15:28.229 align:start position:0%
uh without any obvious bound on how long
they<01:15:26.480><c> can</c><01:15:26.640><c> see</c><01:15:26.880><c> the</c><01:15:26.960><c> stale</c><01:15:27.280><c> data</c><01:15:27.600><c> for</c><01:15:27.920><c> because</c>

01:15:28.229 --> 01:15:28.239 align:start position:0%
they can see the stale data for because
 

01:15:28.239 --> 01:15:30.070 align:start position:0%
they can see the stale data for because
if<01:15:28.320><c> some</c><01:15:28.640><c> reader</c>

01:15:30.070 --> 01:15:30.080 align:start position:0%
if some reader
 

01:15:30.080 --> 01:15:32.229 align:start position:0%
if some reader
gets<01:15:30.320><c> a</c><01:15:30.480><c> pointer</c><01:15:30.960><c> to</c><01:15:31.120><c> an</c><01:15:31.360><c> rcu</c><01:15:31.760><c> protected</c>

01:15:32.229 --> 01:15:32.239 align:start position:0%
gets a pointer to an rcu protected
 

01:15:32.239 --> 01:15:33.590 align:start position:0%
gets a pointer to an rcu protected
object

01:15:33.590 --> 01:15:33.600 align:start position:0%
object
 

01:15:33.600 --> 01:15:37.750 align:start position:0%
object
just<01:15:33.840><c> before</c><01:15:34.159><c> a</c><01:15:34.400><c> writer</c><01:15:35.600><c> replaces</c><01:15:36.239><c> it</c>

01:15:37.750 --> 01:15:37.760 align:start position:0%
just before a writer replaces it
 

01:15:37.760 --> 01:15:39.750 align:start position:0%
just before a writer replaces it
the<01:15:37.920><c> reader</c><01:15:38.239><c> may</c><01:15:38.800><c> still</c><01:15:39.040><c> hold</c><01:15:39.360><c> on</c><01:15:39.440><c> to</c><01:15:39.600><c> that</c>

01:15:39.750 --> 01:15:39.760 align:start position:0%
the reader may still hold on to that
 

01:15:39.760 --> 01:15:41.990 align:start position:0%
the reader may still hold on to that
data<01:15:40.640><c> for</c><01:15:40.880><c> quite</c><01:15:41.120><c> a</c><01:15:41.199><c> long</c><01:15:41.360><c> time</c><01:15:41.600><c> at</c><01:15:41.679><c> least</c><01:15:41.920><c> on</c>

01:15:41.990 --> 01:15:42.000 align:start position:0%
data for quite a long time at least on
 

01:15:42.000 --> 01:15:43.750 align:start position:0%
data for quite a long time at least on
the<01:15:42.080><c> scale</c><01:15:42.560><c> of</c>

01:15:43.750 --> 01:15:43.760 align:start position:0%
the scale of
 

01:15:43.760 --> 01:15:46.950 align:start position:0%
the scale of
modern<01:15:44.080><c> computer</c><01:15:44.560><c> instructions</c>

01:15:46.950 --> 01:15:46.960 align:start position:0%
modern computer instructions
 

01:15:46.960 --> 01:15:49.189 align:start position:0%
modern computer instructions
and<01:15:47.280><c> a</c><01:15:47.360><c> lot</c><01:15:47.520><c> of</c><01:15:47.600><c> the</c><01:15:47.760><c> time</c><01:15:48.480><c> this</c><01:15:48.640><c> turns</c><01:15:48.880><c> out</c><01:15:49.040><c> not</c>

01:15:49.189 --> 01:15:49.199 align:start position:0%
and a lot of the time this turns out not
 

01:15:49.199 --> 01:15:51.110 align:start position:0%
and a lot of the time this turns out not
to<01:15:49.360><c> matter</c><01:15:49.600><c> much</c>

01:15:51.110 --> 01:15:51.120 align:start position:0%
to matter much
 

01:15:51.120 --> 01:15:53.030 align:start position:0%
to matter much
but<01:15:51.280><c> the</c><01:15:51.440><c> paper</c><01:15:51.760><c> mentions</c><01:15:52.159><c> some</c><01:15:52.400><c> situations</c>

01:15:53.030 --> 01:15:53.040 align:start position:0%
but the paper mentions some situations
 

01:15:53.040 --> 01:15:55.270 align:start position:0%
but the paper mentions some situations
which<01:15:53.280><c> i</c><01:15:53.360><c> actually</c><01:15:53.600><c> don't</c><01:15:53.760><c> really</c><01:15:54.000><c> understand</c>

01:15:55.270 --> 01:15:55.280 align:start position:0%
which i actually don't really understand
 

01:15:55.280 --> 01:15:59.350 align:start position:0%
which i actually don't really understand
in<01:15:55.440><c> which</c><01:15:57.120><c> people</c><01:15:57.520><c> expect</c>

01:15:59.350 --> 01:15:59.360 align:start position:0%
in which people expect
 

01:15:59.360 --> 01:16:01.910 align:start position:0%
in which people expect
rights<01:15:59.679><c> to</c><01:15:59.840><c> actually</c><01:16:00.159><c> take</c><01:16:00.400><c> effect</c><01:16:01.520><c> after</c><01:16:01.760><c> the</c>

01:16:01.910 --> 01:16:01.920 align:start position:0%
rights to actually take effect after the
 

01:16:01.920 --> 01:16:03.270 align:start position:0%
rights to actually take effect after the
write<01:16:02.159><c> completes</c>

01:16:03.270 --> 01:16:03.280 align:start position:0%
write completes
 

01:16:03.280 --> 01:16:05.430 align:start position:0%
write completes
and<01:16:03.440><c> therefore</c><01:16:03.760><c> in</c><01:16:03.840><c> which</c><01:16:04.719><c> readers</c><01:16:05.120><c> seeing</c>

01:16:05.430 --> 01:16:05.440 align:start position:0%
and therefore in which readers seeing
 

01:16:05.440 --> 01:16:15.750 align:start position:0%
and therefore in which readers seeing
stale<01:16:05.679><c> data</c><01:16:06.080><c> is</c><01:16:06.239><c> a</c><01:16:06.320><c> bit</c><01:16:06.480><c> of</c><01:16:06.560><c> a</c><01:16:06.640><c> surprise</c>

01:16:15.750 --> 01:16:15.760 align:start position:0%
 
 

01:16:15.760 --> 01:16:18.790 align:start position:0%
 
you<01:16:15.920><c> may</c><01:16:16.159><c> also</c><01:16:16.560><c> as</c><01:16:16.800><c> a</c><01:16:17.199><c> separate</c><01:16:17.600><c> topic</c><01:16:18.080><c> wonder</c>

01:16:18.790 --> 01:16:18.800 align:start position:0%
you may also as a separate topic wonder
 

01:16:18.800 --> 01:16:20.870 align:start position:0%
you may also as a separate topic wonder
what<01:16:18.960><c> happens</c><01:16:19.360><c> if</c><01:16:19.520><c> you</c><01:16:19.679><c> have</c><01:16:20.320><c> right</c><01:16:20.560><c> heavy</c>

01:16:20.870 --> 01:16:20.880 align:start position:0%
what happens if you have right heavy
 

01:16:20.880 --> 01:16:22.550 align:start position:0%
what happens if you have right heavy
data<01:16:21.199><c> like</c><01:16:21.440><c> rc</c><01:16:21.760><c> is</c><01:16:21.840><c> all</c><01:16:22.000><c> about</c><01:16:22.159><c> read</c><01:16:22.320><c> heavy</c>

01:16:22.550 --> 01:16:22.560 align:start position:0%
data like rc is all about read heavy
 

01:16:22.560 --> 01:16:24.550 align:start position:0%
data like rc is all about read heavy
data<01:16:22.800><c> but</c><01:16:22.960><c> that's</c><01:16:23.120><c> just</c><01:16:23.360><c> one</c><01:16:23.920><c> of</c><01:16:24.080><c> many</c>

01:16:24.550 --> 01:16:24.560 align:start position:0%
data but that's just one of many
 

01:16:24.560 --> 01:16:26.790 align:start position:0%
data but that's just one of many
situations<01:16:25.360><c> you</c><01:16:25.520><c> might</c><01:16:25.760><c> care</c><01:16:26.000><c> about</c><01:16:26.640><c> for</c>

01:16:26.790 --> 01:16:26.800 align:start position:0%
situations you might care about for
 

01:16:26.800 --> 01:16:27.669 align:start position:0%
situations you might care about for
getting<01:16:27.120><c> parallel</c>

01:16:27.669 --> 01:16:27.679 align:start position:0%
getting parallel
 

01:16:27.679 --> 01:16:30.550 align:start position:0%
getting parallel
performance<01:16:29.600><c> you</c><01:16:29.760><c> also</c><01:16:30.000><c> care</c><01:16:30.159><c> about</c><01:16:30.400><c> right</c>

01:16:30.550 --> 01:16:30.560 align:start position:0%
performance you also care about right
 

01:16:30.560 --> 01:16:31.830 align:start position:0%
performance you also care about right
heavy<01:16:30.880><c> data</c>

01:16:31.830 --> 01:16:31.840 align:start position:0%
heavy data
 

01:16:31.840 --> 01:16:35.189 align:start position:0%
heavy data
actually<01:16:32.159><c> in</c><01:16:32.239><c> the</c><01:16:33.360><c> extremes</c><01:16:34.239><c> in</c><01:16:34.480><c> some</c><01:16:34.800><c> extreme</c>

01:16:35.189 --> 01:16:35.199 align:start position:0%
actually in the extremes in some extreme
 

01:16:35.199 --> 01:16:37.110 align:start position:0%
actually in the extremes in some extreme
cases<01:16:35.520><c> of</c><01:16:35.600><c> rate</c><01:16:35.840><c> iv</c><01:16:36.080><c> data</c><01:16:36.400><c> you</c><01:16:36.480><c> can</c><01:16:36.640><c> do</c><01:16:36.880><c> quite</c>

01:16:37.110 --> 01:16:37.120 align:start position:0%
cases of rate iv data you can do quite
 

01:16:37.120 --> 01:16:38.870 align:start position:0%
cases of rate iv data you can do quite
well<01:16:37.440><c> there's</c><01:16:37.679><c> no</c>

01:16:38.870 --> 01:16:38.880 align:start position:0%
well there's no
 

01:16:38.880 --> 01:16:40.709 align:start position:0%
well there's no
technique<01:16:39.280><c> i</c><01:16:39.440><c> know</c><01:16:39.679><c> of</c><01:16:39.760><c> for</c><01:16:39.920><c> write-heavy</c><01:16:40.400><c> data</c>

01:16:40.709 --> 01:16:40.719 align:start position:0%
technique i know of for write-heavy data
 

01:16:40.719 --> 01:16:42.070 align:start position:0%
technique i know of for write-heavy data
that's<01:16:41.120><c> quite</c><01:16:41.520><c> as</c>

01:16:42.070 --> 01:16:42.080 align:start position:0%
that's quite as
 

01:16:42.080 --> 01:16:45.350 align:start position:0%
that's quite as
universally<01:16:42.640><c> applicable</c><01:16:43.120><c> as</c><01:16:43.280><c> rcu</c><01:16:44.560><c> um</c>

01:16:45.350 --> 01:16:45.360 align:start position:0%
universally applicable as rcu um
 

01:16:45.360 --> 01:16:47.590 align:start position:0%
universally applicable as rcu um
but<01:16:45.520><c> there</c><01:16:45.679><c> are</c><01:16:45.840><c> still</c><01:16:46.159><c> ideas</c><01:16:46.719><c> for</c><01:16:47.040><c> for</c><01:16:47.280><c> coping</c>

01:16:47.590 --> 01:16:47.600 align:start position:0%
but there are still ideas for for coping
 

01:16:47.600 --> 01:16:48.390 align:start position:0%
but there are still ideas for for coping
with

01:16:48.390 --> 01:16:48.400 align:start position:0%
with
 

01:16:48.400 --> 01:16:50.070 align:start position:0%
with
data<01:16:48.640><c> that's</c><01:16:48.800><c> mostly</c><01:16:49.120><c> written</c><01:16:49.679><c> so</c><01:16:49.840><c> the</c><01:16:49.920><c> most</c>

01:16:50.070 --> 01:16:50.080 align:start position:0%
data that's mostly written so the most
 

01:16:50.080 --> 01:16:52.070 align:start position:0%
data that's mostly written so the most
powerful<01:16:50.560><c> idea</c><01:16:50.960><c> is</c><01:16:51.040><c> to</c><01:16:51.280><c> restructure</c><01:16:51.920><c> your</c>

01:16:52.070 --> 01:16:52.080 align:start position:0%
powerful idea is to restructure your
 

01:16:52.080 --> 01:16:53.189 align:start position:0%
powerful idea is to restructure your
data

01:16:53.189 --> 01:16:53.199 align:start position:0%
data
 

01:16:53.199 --> 01:16:55.030 align:start position:0%
data
restructure<01:16:53.679><c> the</c><01:16:53.760><c> data</c><01:16:54.080><c> structure</c><01:16:54.640><c> so</c><01:16:54.880><c> it's</c>

01:16:55.030 --> 01:16:55.040 align:start position:0%
restructure the data structure so it's
 

01:16:55.040 --> 01:16:57.189 align:start position:0%
restructure the data structure so it's
not<01:16:55.280><c> shared</c><01:16:56.159><c> and</c><01:16:56.320><c> sometimes</c><01:16:56.719><c> you</c><01:16:56.800><c> can</c><01:16:56.960><c> do</c><01:16:57.040><c> that</c>

01:16:57.189 --> 01:16:57.199 align:start position:0%
not shared and sometimes you can do that
 

01:16:57.199 --> 01:16:58.870 align:start position:0%
not shared and sometimes you can do that
sometimes<01:16:57.600><c> the</c><01:16:57.760><c> sharing</c><01:16:58.080><c> is</c><01:16:58.159><c> just</c><01:16:58.400><c> completely</c>

01:16:58.870 --> 01:16:58.880 align:start position:0%
sometimes the sharing is just completely
 

01:16:58.880 --> 01:17:00.390 align:start position:0%
sometimes the sharing is just completely
gratuitous

01:17:00.390 --> 01:17:00.400 align:start position:0%
gratuitous
 

01:17:00.400 --> 01:17:01.830 align:start position:0%
gratuitous
and<01:17:00.560><c> you</c><01:17:00.640><c> can</c><01:17:00.880><c> get</c><01:17:01.120><c> rid</c><01:17:01.280><c> of</c><01:17:01.440><c> it</c><01:17:01.520><c> once</c><01:17:01.679><c> you</c>

01:17:01.830 --> 01:17:01.840 align:start position:0%
and you can get rid of it once you
 

01:17:01.840 --> 01:17:03.910 align:start position:0%
and you can get rid of it once you
realize<01:17:02.239><c> it's</c><01:17:02.400><c> a</c><01:17:02.480><c> problem</c>

01:17:03.910 --> 01:17:03.920 align:start position:0%
realize it's a problem
 

01:17:03.920 --> 01:17:06.149 align:start position:0%
realize it's a problem
but<01:17:04.320><c> it's</c><01:17:04.560><c> also</c><01:17:04.880><c> often</c><01:17:05.199><c> the</c><01:17:05.280><c> case</c><01:17:05.520><c> that</c><01:17:05.679><c> there</c>

01:17:06.149 --> 01:17:06.159 align:start position:0%
but it's also often the case that there
 

01:17:06.159 --> 01:17:08.470 align:start position:0%
but it's also often the case that there
that<01:17:06.640><c> while</c><01:17:06.800><c> you</c><01:17:06.960><c> do</c><01:17:07.199><c> sometimes</c><01:17:07.840><c> need</c><01:17:08.000><c> to</c><01:17:08.159><c> have</c>

01:17:08.470 --> 01:17:08.480 align:start position:0%
that while you do sometimes need to have
 

01:17:08.480 --> 01:17:11.669 align:start position:0%
that while you do sometimes need to have
shared<01:17:08.800><c> data</c><01:17:09.600><c> that</c><01:17:10.080><c> the</c><01:17:10.239><c> common</c><01:17:10.800><c> case</c><01:17:11.360><c> doesn't</c>

01:17:11.669 --> 01:17:11.679 align:start position:0%
shared data that the common case doesn't
 

01:17:11.679 --> 01:17:12.229 align:start position:0%
shared data that the common case doesn't
require

01:17:12.229 --> 01:17:12.239 align:start position:0%
require
 

01:17:12.239 --> 01:17:14.870 align:start position:0%
require
different<01:17:12.719><c> cores</c><01:17:13.440><c> to</c><01:17:13.600><c> write</c><01:17:13.840><c> the</c><01:17:14.000><c> same</c><01:17:14.320><c> data</c>

01:17:14.870 --> 01:17:14.880 align:start position:0%
different cores to write the same data
 

01:17:14.880 --> 01:17:16.870 align:start position:0%
different cores to write the same data
even<01:17:15.040><c> though</c><01:17:15.199><c> they</c><01:17:15.360><c> need</c><01:17:15.520><c> to</c><01:17:15.600><c> write</c>

01:17:16.870 --> 01:17:16.880 align:start position:0%
even though they need to write
 

01:17:16.880 --> 01:17:18.470 align:start position:0%
even though they need to write
some<01:17:17.040><c> of</c><01:17:17.120><c> the</c><01:17:17.199><c> data</c><01:17:17.520><c> a</c><01:17:17.600><c> lot</c><01:17:17.920><c> and</c><01:17:18.080><c> so</c><01:17:18.239><c> you've</c>

01:17:18.470 --> 01:17:18.480 align:start position:0%
some of the data a lot and so you've
 

01:17:18.480 --> 01:17:20.310 align:start position:0%
some of the data a lot and so you've
actually<01:17:18.719><c> seen</c><01:17:18.960><c> that</c><01:17:19.120><c> in</c><01:17:19.280><c> the</c><01:17:19.360><c> labs</c>

01:17:20.310 --> 01:17:20.320 align:start position:0%
actually seen that in the labs
 

01:17:20.320 --> 01:17:23.590 align:start position:0%
actually seen that in the labs
in<01:17:20.480><c> the</c><01:17:20.640><c> locking</c><01:17:21.120><c> lab</c>

01:17:23.590 --> 01:17:23.600 align:start position:0%
 
 

01:17:23.600 --> 01:17:26.310 align:start position:0%
 
in<01:17:23.760><c> the</c><01:17:24.080><c> k</c><01:17:24.400><c> alloc</c><01:17:25.120><c> part</c><01:17:25.360><c> of</c><01:17:25.440><c> the</c><01:17:25.600><c> lab</c><01:17:26.080><c> you</c>

01:17:26.310 --> 01:17:26.320 align:start position:0%
in the k alloc part of the lab you
 

01:17:26.320 --> 01:17:28.149 align:start position:0%
in the k alloc part of the lab you
restructured<01:17:27.040><c> the</c><01:17:27.120><c> free</c><01:17:27.440><c> list</c><01:17:27.679><c> so</c><01:17:27.840><c> that</c><01:17:27.920><c> each</c>

01:17:28.149 --> 01:17:28.159 align:start position:0%
restructured the free list so that each
 

01:17:28.159 --> 01:17:30.070 align:start position:0%
restructured the free list so that each
core<01:17:28.400><c> has</c><01:17:28.560><c> a</c><01:17:28.640><c> dedicated</c><01:17:29.199><c> free</c><01:17:29.440><c> list</c>

01:17:30.070 --> 01:17:30.080 align:start position:0%
core has a dedicated free list
 

01:17:30.080 --> 01:17:31.910 align:start position:0%
core has a dedicated free list
thus<01:17:30.320><c> converting</c><01:17:30.880><c> a</c><01:17:31.040><c> right</c><01:17:31.280><c> heavy</c><01:17:31.600><c> data</c>

01:17:31.910 --> 01:17:31.920 align:start position:0%
thus converting a right heavy data
 

01:17:31.920 --> 01:17:33.830 align:start position:0%
thus converting a right heavy data
structure<01:17:32.400><c> the</c><01:17:32.560><c> free</c><01:17:32.800><c> list</c>

01:17:33.830 --> 01:17:33.840 align:start position:0%
structure the free list
 

01:17:33.840 --> 01:17:37.270 align:start position:0%
structure the free list
into<01:17:34.159><c> one</c><01:17:34.560><c> that</c><01:17:34.800><c> was</c><01:17:36.000><c> sort</c><01:17:36.159><c> of</c><01:17:36.320><c> semi-private</c>

01:17:37.270 --> 01:17:37.280 align:start position:0%
into one that was sort of semi-private
 

01:17:37.280 --> 01:17:37.590 align:start position:0%
into one that was sort of semi-private
per

01:17:37.590 --> 01:17:37.600 align:start position:0%
per
 

01:17:37.600 --> 01:17:39.590 align:start position:0%
per
core<01:17:37.920><c> so</c><01:17:38.159><c> most</c><01:17:38.400><c> of</c><01:17:38.560><c> the</c><01:17:38.640><c> times</c><01:17:39.040><c> cores</c><01:17:39.440><c> just</c>

01:17:39.590 --> 01:17:39.600 align:start position:0%
core so most of the times cores just
 

01:17:39.600 --> 01:17:41.110 align:start position:0%
core so most of the times cores just
have<01:17:39.840><c> to</c>

01:17:41.110 --> 01:17:41.120 align:start position:0%
have to
 

01:17:41.120 --> 01:17:42.709 align:start position:0%
have to
don't<01:17:41.280><c> conflict</c><01:17:41.600><c> with</c><01:17:41.840><c> other</c><01:17:42.080><c> cores</c><01:17:42.480><c> because</c>

01:17:42.709 --> 01:17:42.719 align:start position:0%
don't conflict with other cores because
 

01:17:42.719 --> 01:17:44.470 align:start position:0%
don't conflict with other cores because
they<01:17:42.800><c> have</c><01:17:42.960><c> their</c><01:17:43.199><c> own</c><01:17:43.360><c> private</c><01:17:44.000><c> free</c><01:17:44.239><c> list</c>

01:17:44.470 --> 01:17:44.480 align:start position:0%
they have their own private free list
 

01:17:44.480 --> 01:17:45.750 align:start position:0%
they have their own private free list
and<01:17:44.560><c> the</c><01:17:44.719><c> only</c><01:17:45.040><c> time</c><01:17:45.280><c> you</c><01:17:45.360><c> have</c><01:17:45.440><c> to</c><01:17:45.520><c> look</c><01:17:45.679><c> at</c>

01:17:45.750 --> 01:17:45.760 align:start position:0%
and the only time you have to look at
 

01:17:45.760 --> 01:17:47.030 align:start position:0%
and the only time you have to look at
other<01:17:45.920><c> free</c><01:17:46.159><c> lists</c><01:17:46.480><c> is</c>

01:17:47.030 --> 01:17:47.040 align:start position:0%
other free lists is
 

01:17:47.040 --> 01:17:48.950 align:start position:0%
other free lists is
if<01:17:47.120><c> your</c><01:17:47.360><c> free</c><01:17:47.520><c> list</c><01:17:47.760><c> runs</c><01:17:48.080><c> out</c><01:17:48.560><c> so</c><01:17:48.719><c> there's</c>

01:17:48.950 --> 01:17:48.960 align:start position:0%
if your free list runs out so there's
 

01:17:48.960 --> 01:17:50.790 align:start position:0%
if your free list runs out so there's
actually<01:17:49.280><c> many</c><01:17:49.600><c> examples</c><01:17:50.080><c> of</c><01:17:50.239><c> this</c>

01:17:50.790 --> 01:17:50.800 align:start position:0%
actually many examples of this
 

01:17:50.800 --> 01:17:54.310 align:start position:0%
actually many examples of this
way<01:17:51.040><c> of</c><01:17:51.440><c> dealing</c><01:17:51.760><c> with</c><01:17:52.000><c> right</c><01:17:52.320><c> heavy</c><01:17:53.360><c> data</c>

01:17:54.310 --> 01:17:54.320 align:start position:0%
way of dealing with right heavy data
 

01:17:54.320 --> 01:17:56.470 align:start position:0%
way of dealing with right heavy data
in<01:17:54.400><c> the</c><01:17:54.560><c> kernel</c><01:17:55.760><c> i'm</c><01:17:55.920><c> thinking</c><01:17:56.239><c> of</c><01:17:56.320><c> the</c>

01:17:56.470 --> 01:17:56.480 align:start position:0%
in the kernel i'm thinking of the
 

01:17:56.480 --> 01:17:58.229 align:start position:0%
in the kernel i'm thinking of the
allocator<01:17:56.880><c> analytics</c><01:17:57.280><c> is</c><01:17:57.360><c> like</c><01:17:57.600><c> this</c>

01:17:58.229 --> 01:17:58.239 align:start position:0%
allocator analytics is like this
 

01:17:58.239 --> 01:18:02.229 align:start position:0%
allocator analytics is like this
linux<01:17:58.640><c> is</c><01:17:58.880><c> scheduling</c><01:17:59.600><c> lists</c><01:18:00.880><c> um</c>

01:18:02.229 --> 01:18:02.239 align:start position:0%
linux is scheduling lists um
 

01:18:02.239 --> 01:18:03.990 align:start position:0%
linux is scheduling lists um
there's<01:18:02.480><c> a</c><01:18:02.640><c> sort</c><01:18:02.800><c> of</c><01:18:03.040><c> separate</c><01:18:03.600><c> set</c><01:18:03.840><c> of</c>

01:18:03.990 --> 01:18:04.000 align:start position:0%
there's a sort of separate set of
 

01:18:04.000 --> 01:18:06.149 align:start position:0%
there's a sort of separate set of
threads<01:18:04.640><c> for</c><01:18:04.800><c> each</c><01:18:05.120><c> core</c><01:18:05.360><c> that</c><01:18:05.520><c> the</c><01:18:05.679><c> scheduler</c>

01:18:06.149 --> 01:18:06.159 align:start position:0%
threads for each core that the scheduler
 

01:18:06.159 --> 01:18:07.510 align:start position:0%
threads for each core that the scheduler
looks<01:18:06.400><c> at</c><01:18:06.560><c> most</c><01:18:06.800><c> of</c><01:18:06.880><c> the</c><01:18:07.040><c> time</c>

01:18:07.510 --> 01:18:07.520 align:start position:0%
looks at most of the time
 

01:18:07.520 --> 01:18:09.990 align:start position:0%
looks at most of the time
and<01:18:07.679><c> cores</c><01:18:08.080><c> only</c><01:18:08.320><c> have</c><01:18:08.480><c> to</c><01:18:09.440><c> look</c><01:18:09.600><c> at</c><01:18:09.760><c> each</c>

01:18:09.990 --> 01:18:10.000 align:start position:0%
and cores only have to look at each
 

01:18:10.000 --> 01:18:11.669 align:start position:0%
and cores only have to look at each
other's

01:18:11.669 --> 01:18:11.679 align:start position:0%
other's
 

01:18:11.679 --> 01:18:13.270 align:start position:0%
other's
scheduling<01:18:12.159><c> lists</c><01:18:12.400><c> if</c><01:18:12.480><c> they</c><01:18:12.640><c> run</c><01:18:12.880><c> out</c><01:18:12.960><c> of</c><01:18:13.040><c> work</c>

01:18:13.270 --> 01:18:13.280 align:start position:0%
scheduling lists if they run out of work
 

01:18:13.280 --> 01:18:15.270 align:start position:0%
scheduling lists if they run out of work
to<01:18:13.440><c> do</c><01:18:14.480><c> another</c><01:18:14.800><c> example</c>

01:18:15.270 --> 01:18:15.280 align:start position:0%
to do another example
 

01:18:15.280 --> 01:18:17.189 align:start position:0%
to do another example
statistics<01:18:16.000><c> counters</c><01:18:16.480><c> if</c><01:18:16.560><c> you're</c><01:18:16.800><c> counting</c>

01:18:17.189 --> 01:18:17.199 align:start position:0%
statistics counters if you're counting
 

01:18:17.199 --> 01:18:18.470 align:start position:0%
statistics counters if you're counting
something

01:18:18.470 --> 01:18:18.480 align:start position:0%
something
 

01:18:18.480 --> 01:18:20.870 align:start position:0%
something
and<01:18:18.560><c> the</c><01:18:18.640><c> counts</c><01:18:19.040><c> go</c><01:18:19.520><c> change</c><01:18:19.920><c> a</c><01:18:20.080><c> lot</c><01:18:20.480><c> but</c>

01:18:20.870 --> 01:18:20.880 align:start position:0%
and the counts go change a lot but
 

01:18:20.880 --> 01:18:22.390 align:start position:0%
and the counts go change a lot but
they're<01:18:21.040><c> rarely</c><01:18:21.600><c> read</c>

01:18:22.390 --> 01:18:22.400 align:start position:0%
they're rarely read
 

01:18:22.400 --> 01:18:24.709 align:start position:0%
they're rarely read
that<01:18:22.640><c> is</c><01:18:22.719><c> the</c><01:18:22.880><c> counts</c><01:18:23.120><c> are</c><01:18:23.600><c> truly</c><01:18:24.320><c> dominated</c>

01:18:24.709 --> 01:18:24.719 align:start position:0%
that is the counts are truly dominated
 

01:18:24.719 --> 01:18:27.030 align:start position:0%
that is the counts are truly dominated
by<01:18:24.880><c> rights</c><01:18:25.199><c> and</c><01:18:25.280><c> not</c><01:18:25.520><c> reads</c>

01:18:27.030 --> 01:18:27.040 align:start position:0%
by rights and not reads
 

01:18:27.040 --> 01:18:28.709 align:start position:0%
by rights and not reads
you<01:18:27.199><c> can</c><01:18:27.360><c> restructure</c><01:18:27.840><c> your</c><01:18:28.000><c> counter</c><01:18:28.400><c> so</c><01:18:28.560><c> that</c>

01:18:28.709 --> 01:18:28.719 align:start position:0%
you can restructure your counter so that
 

01:18:28.719 --> 01:18:30.709 align:start position:0%
you can restructure your counter so that
each<01:18:29.120><c> core</c>

01:18:30.709 --> 01:18:30.719 align:start position:0%
each core
 

01:18:30.719 --> 01:18:34.550 align:start position:0%
each core
has<01:18:30.960><c> a</c><01:18:31.120><c> separate</c><01:18:32.400><c> counter</c>

01:18:34.550 --> 01:18:34.560 align:start position:0%
has a separate counter
 

01:18:34.560 --> 01:18:36.149 align:start position:0%
has a separate counter
and<01:18:34.640><c> so</c><01:18:34.800><c> beast</c><01:18:35.040><c> core</c><01:18:35.280><c> just</c><01:18:35.440><c> modifies</c><01:18:35.920><c> its</c><01:18:36.080><c> own</c>

01:18:36.149 --> 01:18:36.159 align:start position:0%
and so beast core just modifies its own
 

01:18:36.159 --> 01:18:37.750 align:start position:0%
and so beast core just modifies its own
counter<01:18:36.480><c> when</c><01:18:36.640><c> it</c><01:18:36.719><c> needs</c><01:18:36.960><c> to</c>

01:18:37.750 --> 01:18:37.760 align:start position:0%
counter when it needs to
 

01:18:37.760 --> 01:18:39.990 align:start position:0%
counter when it needs to
change<01:18:38.000><c> the</c><01:18:38.239><c> count</c><01:18:38.880><c> and</c><01:18:39.040><c> if</c><01:18:39.199><c> you</c><01:18:39.280><c> want</c><01:18:39.440><c> to</c><01:18:39.600><c> read</c>

01:18:39.990 --> 01:18:40.000 align:start position:0%
change the count and if you want to read
 

01:18:40.000 --> 01:18:41.270 align:start position:0%
change the count and if you want to read
something<01:18:40.560><c> then</c>

01:18:41.270 --> 01:18:41.280 align:start position:0%
something then
 

01:18:41.280 --> 01:18:43.430 align:start position:0%
something then
you<01:18:41.440><c> have</c><01:18:41.600><c> to</c><01:18:41.679><c> go</c><01:18:41.920><c> out</c><01:18:42.080><c> and</c><01:18:42.320><c> lock</c><01:18:42.719><c> and</c><01:18:42.880><c> read</c><01:18:43.280><c> all</c>

01:18:43.430 --> 01:18:43.440 align:start position:0%
you have to go out and lock and read all
 

01:18:43.440 --> 01:18:45.430 align:start position:0%
you have to go out and lock and read all
the<01:18:43.600><c> per</c><01:18:43.920><c> core</c><01:18:44.320><c> counters</c>

01:18:45.430 --> 01:18:45.440 align:start position:0%
the per core counters
 

01:18:45.440 --> 01:18:47.030 align:start position:0%
the per core counters
so<01:18:45.600><c> that's</c><01:18:45.760><c> a</c><01:18:45.840><c> technique</c><01:18:46.320><c> to</c><01:18:46.480><c> make</c><01:18:46.719><c> rights</c>

01:18:47.030 --> 01:18:47.040 align:start position:0%
so that's a technique to make rights
 

01:18:47.040 --> 01:18:49.030 align:start position:0%
so that's a technique to make rights
very<01:18:47.280><c> fast</c><01:18:48.239><c> because</c><01:18:48.480><c> the</c><01:18:48.560><c> writers</c><01:18:48.880><c> just</c>

01:18:49.030 --> 01:18:49.040 align:start position:0%
very fast because the writers just
 

01:18:49.040 --> 01:18:51.750 align:start position:0%
very fast because the writers just
modify<01:18:49.440><c> the</c><01:18:49.679><c> local</c><01:18:50.080><c> per</c><01:18:50.320><c> core</c><01:18:50.560><c> counter</c>

01:18:51.750 --> 01:18:51.760 align:start position:0%
modify the local per core counter
 

01:18:51.760 --> 01:18:53.990 align:start position:0%
modify the local per core counter
but<01:18:51.920><c> the</c><01:18:52.080><c> reads</c><01:18:52.320><c> are</c><01:18:52.400><c> now</c><01:18:52.640><c> very</c><01:18:52.880><c> slow</c><01:18:53.760><c> and</c>

01:18:53.990 --> 01:18:54.000 align:start position:0%
but the reads are now very slow and
 

01:18:54.000 --> 01:18:55.030 align:start position:0%
but the reads are now very slow and
again<01:18:54.320><c> you</c><01:18:54.400><c> know</c><01:18:54.480><c> but</c><01:18:54.719><c> if</c>

01:18:55.030 --> 01:18:55.040 align:start position:0%
again you know but if
 

01:18:55.040 --> 01:18:57.110 align:start position:0%
again you know but if
if<01:18:55.199><c> your</c><01:18:55.840><c> counters</c><01:18:56.239><c> are</c><01:18:56.400><c> right</c><01:18:56.560><c> heavy</c><01:18:56.880><c> that's</c>

01:18:57.110 --> 01:18:57.120 align:start position:0%
if your counters are right heavy that's
 

01:18:57.120 --> 01:18:58.229 align:start position:0%
if your counters are right heavy that's
just<01:18:57.520><c> the</c><01:18:57.600><c> counters</c>

01:18:58.229 --> 01:18:58.239 align:start position:0%
just the counters
 

01:18:58.239 --> 01:19:01.110 align:start position:0%
just the counters
often<01:18:58.640><c> are</c><01:18:59.440><c> um</c><01:19:00.000><c> that</c><01:19:00.159><c> could</c><01:19:00.320><c> be</c><01:19:00.400><c> a</c><01:19:00.480><c> big</c><01:19:00.719><c> win</c>

01:19:01.110 --> 01:19:01.120 align:start position:0%
often are um that could be a big win
 

01:19:01.120 --> 01:19:03.750 align:start position:0%
often are um that could be a big win
shifting<01:19:01.440><c> the</c><01:19:01.520><c> work</c><01:19:01.760><c> now</c><01:19:01.920><c> to</c><01:19:02.080><c> the</c><01:19:02.159><c> reeds</c>

01:19:03.750 --> 01:19:03.760 align:start position:0%
shifting the work now to the reeds
 

01:19:03.760 --> 01:19:06.070 align:start position:0%
shifting the work now to the reeds
um<01:19:04.719><c> so</c><01:19:04.880><c> the</c><01:19:04.960><c> point</c><01:19:05.199><c> is</c><01:19:05.280><c> there</c><01:19:05.440><c> are</c><01:19:05.600><c> techniques</c>

01:19:06.070 --> 01:19:06.080 align:start position:0%
um so the point is there are techniques
 

01:19:06.080 --> 01:19:07.030 align:start position:0%
um so the point is there are techniques
even<01:19:06.239><c> though</c><01:19:06.320><c> we</c><01:19:06.400><c> didn't</c><01:19:06.560><c> talk</c><01:19:06.800><c> about</c><01:19:06.960><c> that</c>

01:19:07.030 --> 01:19:07.040 align:start position:0%
even though we didn't talk about that
 

01:19:07.040 --> 01:19:08.470 align:start position:0%
even though we didn't talk about that
much<01:19:07.280><c> there</c><01:19:07.440><c> are</c><01:19:07.600><c> also</c>

01:19:08.470 --> 01:19:08.480 align:start position:0%
much there are also
 

01:19:08.480 --> 01:19:11.350 align:start position:0%
much there are also
sometimes<01:19:09.040><c> techniques</c><01:19:09.520><c> that</c><01:19:09.679><c> help</c><01:19:10.960><c> for</c><01:19:11.120><c> write</c>

01:19:11.350 --> 01:19:11.360 align:start position:0%
sometimes techniques that help for write
 

01:19:11.360 --> 01:19:15.110 align:start position:0%
sometimes techniques that help for write
intensive<01:19:11.760><c> workloads</c>

01:19:15.110 --> 01:19:15.120 align:start position:0%
 
 

01:19:15.120 --> 01:19:18.630 align:start position:0%
 
um<01:19:15.920><c> to</c><01:19:16.080><c> wrap</c><01:19:16.400><c> up</c><01:19:16.640><c> the</c><01:19:17.760><c> rcu</c><01:19:18.320><c> the</c>

01:19:18.630 --> 01:19:18.640 align:start position:0%
um to wrap up the rcu the
 

01:19:18.640 --> 01:19:20.310 align:start position:0%
um to wrap up the rcu the
stuff<01:19:18.880><c> we</c><01:19:18.960><c> read</c><01:19:19.120><c> about</c><01:19:19.360><c> in</c><01:19:19.440><c> the</c><01:19:19.520><c> paper</c><01:19:20.159><c> is</c>

01:19:20.310 --> 01:19:20.320 align:start position:0%
stuff we read about in the paper is
 

01:19:20.320 --> 01:19:23.270 align:start position:0%
stuff we read about in the paper is
actually<01:19:20.560><c> a</c><01:19:20.640><c> giant</c><01:19:21.040><c> success</c><01:19:21.520><c> story</c><01:19:21.840><c> for</c><01:19:22.000><c> linux</c>

01:19:23.270 --> 01:19:23.280 align:start position:0%
actually a giant success story for linux
 

01:19:23.280 --> 01:19:26.229 align:start position:0%
actually a giant success story for linux
it's<01:19:23.440><c> used</c><01:19:23.840><c> all</c><01:19:24.080><c> over</c><01:19:24.320><c> linux</c><01:19:25.199><c> to</c><01:19:25.360><c> get</c><01:19:25.600><c> at</c><01:19:26.000><c> all</c>

01:19:26.229 --> 01:19:26.239 align:start position:0%
it's used all over linux to get at all
 

01:19:26.239 --> 01:19:27.750 align:start position:0%
it's used all over linux to get at all
kinds<01:19:26.480><c> of</c><01:19:26.640><c> different</c><01:19:26.880><c> data</c><01:19:27.199><c> because</c><01:19:27.360><c> it</c><01:19:27.440><c> just</c>

01:19:27.750 --> 01:19:27.760 align:start position:0%
kinds of different data because it just
 

01:19:27.760 --> 01:19:31.510 align:start position:0%
kinds of different data because it just
turns<01:19:28.159><c> out</c><01:19:28.880><c> that</c><01:19:29.520><c> read</c><01:19:29.840><c> and</c><01:19:30.480><c> read</c><01:19:30.800><c> mostly</c><01:19:31.199><c> data</c>

01:19:31.510 --> 01:19:31.520 align:start position:0%
turns out that read and read mostly data
 

01:19:31.520 --> 01:19:33.430 align:start position:0%
turns out that read and read mostly data
read<01:19:31.760><c> intensive</c><01:19:32.159><c> data</c><01:19:32.480><c> is</c><01:19:32.640><c> extremely</c><01:19:33.120><c> common</c>

01:19:33.430 --> 01:19:33.440 align:start position:0%
read intensive data is extremely common
 

01:19:33.440 --> 01:19:34.790 align:start position:0%
read intensive data is extremely common
like

01:19:34.790 --> 01:19:34.800 align:start position:0%
like
 

01:19:34.800 --> 01:19:36.470 align:start position:0%
like
cached<01:19:35.280><c> file</c><01:19:35.600><c> blocks</c><01:19:35.920><c> for</c><01:19:36.000><c> example</c><01:19:36.320><c> they're</c>

01:19:36.470 --> 01:19:36.480 align:start position:0%
cached file blocks for example they're
 

01:19:36.480 --> 01:19:38.470 align:start position:0%
cached file blocks for example they're
mostly<01:19:36.800><c> red</c>

01:19:38.470 --> 01:19:38.480 align:start position:0%
mostly red
 

01:19:38.480 --> 01:19:40.709 align:start position:0%
mostly red
so<01:19:38.719><c> a</c><01:19:38.800><c> technique</c><01:19:39.199><c> that</c><01:19:39.679><c> speeds</c><01:19:40.000><c> up</c><01:19:40.080><c> only</c><01:19:40.320><c> reads</c>

01:19:40.709 --> 01:19:40.719 align:start position:0%
so a technique that speeds up only reads
 

01:19:40.719 --> 01:19:42.070 align:start position:0%
so a technique that speeds up only reads
is

01:19:42.070 --> 01:19:42.080 align:start position:0%
is
 

01:19:42.080 --> 01:19:45.669 align:start position:0%
is
really<01:19:42.719><c> very</c><01:19:42.960><c> widely</c><01:19:43.360><c> applicable</c>

01:19:45.669 --> 01:19:45.679 align:start position:0%
really very widely applicable
 

01:19:45.679 --> 01:19:47.910 align:start position:0%
really very widely applicable
and<01:19:45.840><c> artsy</c><01:19:46.159><c> uses</c><01:19:46.480><c> particularly</c><01:19:47.120><c> magic</c>

01:19:47.910 --> 01:19:47.920 align:start position:0%
and artsy uses particularly magic
 

01:19:47.920 --> 01:19:49.990 align:start position:0%
and artsy uses particularly magic
there's<01:19:48.560><c> lots</c><01:19:48.800><c> of</c><01:19:48.960><c> other</c>

01:19:49.990 --> 01:19:50.000 align:start position:0%
there's lots of other
 

01:19:50.000 --> 01:19:52.550 align:start position:0%
there's lots of other
interesting<01:19:50.800><c> currency</c><01:19:51.199><c> techniques</c><01:19:52.320><c> uh</c>

01:19:52.550 --> 01:19:52.560 align:start position:0%
interesting currency techniques uh
 

01:19:52.560 --> 01:19:55.110 align:start position:0%
interesting currency techniques uh
synchronization<01:19:53.280><c> techniques</c><01:19:53.679><c> rcu</c><01:19:54.159><c> is</c><01:19:54.320><c> magic</c>

01:19:55.110 --> 01:19:55.120 align:start position:0%
synchronization techniques rcu is magic
 

01:19:55.120 --> 01:19:57.830 align:start position:0%
synchronization techniques rcu is magic
because<01:19:55.360><c> it</c><01:19:55.520><c> completely</c><01:19:56.159><c> eliminates</c><01:19:57.360><c> locking</c>

01:19:57.830 --> 01:19:57.840 align:start position:0%
because it completely eliminates locking
 

01:19:57.840 --> 01:19:59.590 align:start position:0%
because it completely eliminates locking
and<01:19:58.000><c> writing</c><01:19:58.400><c> for</c><01:19:58.560><c> the</c><01:19:58.719><c> readers</c>

01:19:59.590 --> 01:19:59.600 align:start position:0%
and writing for the readers
 

01:19:59.600 --> 01:20:02.229 align:start position:0%
and writing for the readers
so<01:19:59.760><c> that's</c><01:20:00.000><c> just</c><01:20:00.159><c> like</c><01:20:00.320><c> a</c><01:20:00.400><c> big</c><01:20:01.600><c> breakthrough</c>

01:20:02.229 --> 01:20:02.239 align:start position:0%
so that's just like a big breakthrough
 

01:20:02.239 --> 01:20:03.990 align:start position:0%
so that's just like a big breakthrough
compared<01:20:02.640><c> to</c><01:20:02.719><c> things</c><01:20:02.960><c> like</c><01:20:03.199><c> rewrite</c><01:20:03.679><c> locks</c>

01:20:03.990 --> 01:20:04.000 align:start position:0%
compared to things like rewrite locks
 

01:20:04.000 --> 01:20:05.110 align:start position:0%
compared to things like rewrite locks
which<01:20:04.239><c> were</c>

01:20:05.110 --> 01:20:05.120 align:start position:0%
which were
 

01:20:05.120 --> 01:20:08.950 align:start position:0%
which were
the<01:20:05.280><c> previous</c><01:20:06.239><c> uh</c><01:20:06.880><c> state</c><01:20:07.199><c> of</c><01:20:07.280><c> the</c><01:20:07.360><c> art</c>

01:20:08.950 --> 01:20:08.960 align:start position:0%
the previous uh state of the art
 

01:20:08.960 --> 01:20:10.470 align:start position:0%
the previous uh state of the art
and<01:20:09.120><c> the</c><01:20:09.199><c> key</c><01:20:09.440><c> idea</c><01:20:09.679><c> that</c><01:20:09.920><c> really</c><01:20:10.080><c> makes</c><01:20:10.320><c> it</c>

01:20:10.470 --> 01:20:10.480 align:start position:0%
and the key idea that really makes it
 

01:20:10.480 --> 01:20:13.110 align:start position:0%
and the key idea that really makes it
work<01:20:11.199><c> is</c><01:20:11.520><c> the</c><01:20:11.760><c> um</c>

01:20:13.110 --> 01:20:13.120 align:start position:0%
work is the um
 

01:20:13.120 --> 01:20:14.870 align:start position:0%
work is the um
sort<01:20:13.280><c> of</c><01:20:13.440><c> garbage</c><01:20:13.920><c> collection</c><01:20:14.400><c> like</c>

01:20:14.870 --> 01:20:14.880 align:start position:0%
sort of garbage collection like
 

01:20:14.880 --> 01:20:16.149 align:start position:0%
sort of garbage collection like
deferring

01:20:16.149 --> 01:20:16.159 align:start position:0%
deferring
 

01:20:16.159 --> 01:20:17.990 align:start position:0%
deferring
a<01:20:16.320><c> freeze</c><01:20:16.880><c> for</c><01:20:17.040><c> the</c><01:20:17.360><c> what</c><01:20:17.520><c> they</c><01:20:17.679><c> call</c><01:20:17.840><c> the</c>

01:20:17.990 --> 01:20:18.000 align:start position:0%
a freeze for the what they call the
 

01:20:18.000 --> 01:20:19.189 align:start position:0%
a freeze for the what they call the
grace<01:20:18.400><c> period</c>

01:20:19.189 --> 01:20:19.199 align:start position:0%
grace period
 

01:20:19.199 --> 01:20:21.030 align:start position:0%
grace period
until<01:20:19.520><c> all</c><01:20:19.679><c> the</c><01:20:19.760><c> readers</c><01:20:20.239><c> are</c><01:20:20.480><c> guaranteed</c><01:20:20.880><c> to</c>

01:20:21.030 --> 01:20:21.040 align:start position:0%
until all the readers are guaranteed to
 

01:20:21.040 --> 01:20:23.110 align:start position:0%
until all the readers are guaranteed to
be<01:20:21.120><c> finished</c><01:20:21.520><c> using</c><01:20:21.760><c> the</c><01:20:22.000><c> the</c><01:20:22.159><c> data</c>

01:20:23.110 --> 01:20:23.120 align:start position:0%
be finished using the the data
 

01:20:23.120 --> 01:20:25.430 align:start position:0%
be finished using the the data
so<01:20:23.280><c> you</c><01:20:23.360><c> can</c><01:20:24.239><c> as</c><01:20:24.320><c> well</c><01:20:24.560><c> as</c><01:20:24.639><c> a</c><01:20:24.719><c> synchronization</c>

01:20:25.430 --> 01:20:25.440 align:start position:0%
so you can as well as a synchronization
 

01:20:25.440 --> 01:20:27.110 align:start position:0%
so you can as well as a synchronization
technique<01:20:25.920><c> it's</c><01:20:26.080><c> actually</c><01:20:26.320><c> fair</c><01:20:26.560><c> to</c><01:20:26.719><c> view</c><01:20:26.960><c> it</c>

01:20:27.110 --> 01:20:27.120 align:start position:0%
technique it's actually fair to view it
 

01:20:27.120 --> 01:20:27.590 align:start position:0%
technique it's actually fair to view it
as<01:20:27.280><c> a</c>

01:20:27.590 --> 01:20:27.600 align:start position:0%
as a
 

01:20:27.600 --> 01:20:30.390 align:start position:0%
as a
um<01:20:28.400><c> very</c><01:20:28.639><c> much</c><01:20:28.880><c> so</c><01:20:29.120><c> as</c><01:20:29.280><c> a</c><01:20:29.440><c> kind</c><01:20:29.600><c> of</c><01:20:30.080><c> uh</c>

01:20:30.390 --> 01:20:30.400 align:start position:0%
um very much so as a kind of uh
 

01:20:30.400 --> 01:20:35.270 align:start position:0%
um very much so as a kind of uh
specialized<01:20:31.040><c> garbage</c><01:20:31.360><c> collection</c><01:20:31.760><c> technique</c>

01:20:35.270 --> 01:20:35.280 align:start position:0%
 
 

01:20:35.280 --> 01:20:38.070 align:start position:0%
 
and<01:20:35.440><c> that</c><01:20:35.760><c> is</c><01:20:35.840><c> all</c><01:20:36.000><c> i</c><01:20:36.080><c> have</c><01:20:36.159><c> to</c><01:20:36.320><c> say</c><01:20:36.880><c> so</c><01:20:37.760><c> i'm</c>

01:20:38.070 --> 01:20:38.080 align:start position:0%
and that is all i have to say so i'm
 

01:20:38.080 --> 01:20:43.430 align:start position:0%
and that is all i have to say so i'm
happy<01:20:38.320><c> to</c><01:20:38.400><c> take</c><01:20:38.639><c> questions</c>

01:20:43.430 --> 01:20:43.440 align:start position:0%
 
 

01:20:43.440 --> 01:20:46.310 align:start position:0%
 
oh<01:20:43.679><c> sorry</c><01:20:44.000><c> can</c><01:20:44.159><c> you</c><01:20:44.320><c> explain</c><01:20:44.800><c> the</c><01:20:45.520><c> uh</c><01:20:46.080><c> the</c>

01:20:46.310 --> 01:20:46.320 align:start position:0%
oh sorry can you explain the uh the
 

01:20:46.320 --> 01:20:47.750 align:start position:0%
oh sorry can you explain the uh the
stale

01:20:47.750 --> 01:20:47.760 align:start position:0%
stale
 

01:20:47.760 --> 01:20:51.030 align:start position:0%
stale
data<01:20:48.159><c> for</c><01:20:48.320><c> readers</c><01:20:49.360><c> so</c><01:20:49.600><c> i</c><01:20:49.679><c> don't</c><01:20:49.920><c> understand</c>

01:20:51.030 --> 01:20:51.040 align:start position:0%
data for readers so i don't understand
 

01:20:51.040 --> 01:20:54.629 align:start position:0%
data for readers so i don't understand
why<01:20:51.920><c> how</c><01:20:52.159><c> that</c><01:20:52.480><c> can</c><01:20:52.639><c> happen</c><01:20:53.040><c> because</c><01:20:54.000><c> you</c>

01:20:54.629 --> 01:20:54.639 align:start position:0%
why how that can happen because you
 

01:20:54.639 --> 01:20:58.310 align:start position:0%
why how that can happen because you
you<01:20:54.880><c> read</c><01:20:55.120><c> in</c><01:20:55.280><c> your</c><01:20:56.159><c> critical</c><01:20:56.880><c> section</c>

01:20:58.310 --> 01:20:58.320 align:start position:0%
you read in your critical section
 

01:20:58.320 --> 01:21:01.430 align:start position:0%
you read in your critical section
and<01:20:58.960><c> um</c><01:21:00.159><c> you</c><01:21:00.320><c> just</c><01:21:00.560><c> get</c><01:21:00.800><c> whatever</c>

01:21:01.430 --> 01:21:01.440 align:start position:0%
and um you just get whatever
 

01:21:01.440 --> 01:21:04.390 align:start position:0%
and um you just get whatever
data<01:21:01.760><c> is</c><01:21:01.920><c> there</c><01:21:02.320><c> at</c><01:21:02.400><c> that</c><01:21:02.639><c> point</c><01:21:04.000><c> and</c><01:21:04.080><c> then</c><01:21:04.239><c> you</c>

01:21:04.390 --> 01:21:04.400 align:start position:0%
data is there at that point and then you
 

01:21:04.400 --> 01:21:05.910 align:start position:0%
data is there at that point and then you
just

01:21:05.910 --> 01:21:05.920 align:start position:0%
just
 

01:21:05.920 --> 01:21:09.990 align:start position:0%
just
um<01:21:07.280><c> leave</c><01:21:08.000><c> yeah</c><01:21:08.880><c> it</c><01:21:09.040><c> actually</c><01:21:09.360><c> usually</c><01:21:09.679><c> is</c><01:21:09.840><c> not</c>

01:21:09.990 --> 01:21:10.000 align:start position:0%
um leave yeah it actually usually is not
 

01:21:10.000 --> 01:21:10.870 align:start position:0%
um leave yeah it actually usually is not
a<01:21:10.080><c> problem</c>

01:21:10.870 --> 01:21:10.880 align:start position:0%
a problem
 

01:21:10.880 --> 01:21:13.990 align:start position:0%
a problem
um<01:21:11.440><c> but</c><01:21:13.040><c> the</c><01:21:13.120><c> reason</c><01:21:13.360><c> why</c><01:21:13.520><c> it</c><01:21:13.679><c> ever</c>

01:21:13.990 --> 01:21:14.000 align:start position:0%
um but the reason why it ever
 

01:21:14.000 --> 01:21:18.390 align:start position:0%
um but the reason why it ever
might<01:21:14.400><c> come</c><01:21:14.639><c> up</c><01:21:15.679><c> well</c><01:21:16.159><c> ordinarily</c>

01:21:18.390 --> 01:21:18.400 align:start position:0%
might come up well ordinarily
 

01:21:18.400 --> 01:21:21.270 align:start position:0%
might come up well ordinarily
you<01:21:18.560><c> know</c><01:21:18.719><c> if</c><01:21:18.800><c> you</c><01:21:18.960><c> have</c><01:21:19.199><c> code</c><01:21:19.760><c> that</c><01:21:20.719><c> says</c><01:21:21.040><c> x</c>

01:21:21.270 --> 01:21:21.280 align:start position:0%
you know if you have code that says x
 

01:21:21.280 --> 01:21:22.950 align:start position:0%
you know if you have code that says x
equals<01:21:21.600><c> one</c>

01:21:22.950 --> 01:21:22.960 align:start position:0%
equals one
 

01:21:22.960 --> 01:21:26.830 align:start position:0%
equals one
and<01:21:23.120><c> then</c><01:21:23.360><c> you</c><01:21:24.239><c> you</c><01:21:24.400><c> know</c><01:21:24.639><c> print</c>

01:21:26.830 --> 01:21:26.840 align:start position:0%
and then you you know print
 

01:21:26.840 --> 01:21:31.030 align:start position:0%
and then you you know print
done<01:21:29.040><c> gosh</c><01:21:29.440><c> it's</c><01:21:29.679><c> pretty</c><01:21:30.080><c> surprising</c>

01:21:31.030 --> 01:21:31.040 align:start position:0%
done gosh it's pretty surprising
 

01:21:31.040 --> 01:21:34.310 align:start position:0%
done gosh it's pretty surprising
if<01:21:31.520><c> after</c><01:21:32.000><c> this</c><01:21:32.400><c> point</c><01:21:33.440><c> someone</c><01:21:33.840><c> reading</c><01:21:34.159><c> the</c>

01:21:34.310 --> 01:21:34.320 align:start position:0%
if after this point someone reading the
 

01:21:34.320 --> 01:21:35.270 align:start position:0%
if after this point someone reading the
data

01:21:35.270 --> 01:21:35.280 align:start position:0%
data
 

01:21:35.280 --> 01:21:39.430 align:start position:0%
data
sees<01:21:35.760><c> that</c><01:21:36.080><c> value</c><01:21:36.480><c> before</c><01:21:36.800><c> you</c><01:21:36.960><c> set</c><01:21:37.199><c> it</c><01:21:37.280><c> to</c><01:21:37.440><c> one</c>

01:21:39.430 --> 01:21:39.440 align:start position:0%
sees that value before you set it to one
 

01:21:39.440 --> 01:21:41.990 align:start position:0%
sees that value before you set it to one
right<01:21:39.600><c> that's</c><01:21:39.840><c> a</c><01:21:40.400><c> maybe</c><01:21:40.719><c> a</c><01:21:40.800><c> bit</c><01:21:40.960><c> of</c><01:21:41.040><c> a</c><01:21:41.199><c> surprise</c>

01:21:41.990 --> 01:21:42.000 align:start position:0%
right that's a maybe a bit of a surprise
 

01:21:42.000 --> 01:21:43.110 align:start position:0%
right that's a maybe a bit of a surprise
right

01:21:43.110 --> 01:21:43.120 align:start position:0%
right
 

01:21:43.120 --> 01:21:45.350 align:start position:0%
right
well<01:21:43.679><c> there's</c><01:21:43.920><c> a</c><01:21:44.000><c> sense</c><01:21:44.239><c> in</c><01:21:44.320><c> which</c><01:21:44.560><c> rcu</c><01:21:45.040><c> allows</c>

01:21:45.350 --> 01:21:45.360 align:start position:0%
well there's a sense in which rcu allows
 

01:21:45.360 --> 01:21:46.470 align:start position:0%
well there's a sense in which rcu allows
that<01:21:45.520><c> to</c><01:21:45.679><c> happen</c>

01:21:46.470 --> 01:21:46.480 align:start position:0%
that to happen
 

01:21:46.480 --> 01:21:48.709 align:start position:0%
that to happen
right<01:21:46.719><c> if</c><01:21:46.880><c> this</c><01:21:47.120><c> is</c><01:21:47.280><c> really</c><01:21:48.320><c> you</c><01:21:48.400><c> know</c><01:21:48.560><c> what</c>

01:21:48.709 --> 01:21:48.719 align:start position:0%
right if this is really you know what
 

01:21:48.719 --> 01:21:49.990 align:start position:0%
right if this is really you know what
we're<01:21:48.800><c> really</c><01:21:49.120><c> talking</c><01:21:49.520><c> about</c>

01:21:49.990 --> 01:21:50.000 align:start position:0%
we're really talking about
 

01:21:50.000 --> 01:21:54.950 align:start position:0%
we're really talking about
is<01:21:51.120><c> um</c><01:21:52.000><c> you</c><01:21:52.080><c> know</c><01:21:52.800><c> list</c>

01:21:54.950 --> 01:21:54.960 align:start position:0%
is um you know list
 

01:21:54.960 --> 01:21:58.470 align:start position:0%
is um you know list
replace<01:21:57.280><c> whatever</c><01:21:57.760><c> you</c><01:21:57.920><c> know</c><01:21:58.080><c> find</c><01:21:58.320><c> the</c>

01:21:58.470 --> 01:21:58.480 align:start position:0%
replace whatever you know find the
 

01:21:58.480 --> 01:22:00.149 align:start position:0%
replace whatever you know find the
element<01:21:58.719><c> that</c><01:21:58.960><c> is</c><01:21:59.120><c> one</c><01:21:59.360><c> in</c><01:21:59.520><c> it</c><01:21:59.679><c> and</c><01:21:59.840><c> change</c><01:22:00.080><c> it</c>

01:22:00.149 --> 01:22:00.159 align:start position:0%
element that is one in it and change it
 

01:22:00.159 --> 01:22:01.030 align:start position:0%
element that is one in it and change it
to<01:22:00.400><c> two</c>

01:22:01.030 --> 01:22:01.040 align:start position:0%
to two
 

01:22:01.040 --> 01:22:04.790 align:start position:0%
to two
with<01:22:01.280><c> our</c><01:22:01.440><c> you</c><01:22:01.520><c> know</c><01:22:01.679><c> using</c><01:22:02.000><c> rcu</c><01:22:03.679><c> right</c>

01:22:04.790 --> 01:22:04.800 align:start position:0%
with our you know using rcu right
 

01:22:04.800 --> 01:22:06.390 align:start position:0%
with our you know using rcu right
after<01:22:05.040><c> that</c><01:22:05.199><c> finishes</c><01:22:05.600><c> and</c><01:22:05.679><c> we</c><01:22:05.840><c> print</c><01:22:06.000><c> oh</c><01:22:06.159><c> yeah</c>

01:22:06.390 --> 01:22:06.400 align:start position:0%
after that finishes and we print oh yeah
 

01:22:06.400 --> 01:22:07.830 align:start position:0%
after that finishes and we print oh yeah
we're<01:22:06.560><c> done</c>

01:22:07.830 --> 01:22:07.840 align:start position:0%
we're done
 

01:22:07.840 --> 01:22:11.350 align:start position:0%
we're done
if<01:22:08.000><c> there's</c><01:22:08.239><c> some</c><01:22:08.840><c> reader</c><01:22:10.719><c> that</c><01:22:10.880><c> was</c><01:22:11.040><c> looking</c>

01:22:11.350 --> 01:22:11.360 align:start position:0%
if there's some reader that was looking
 

01:22:11.360 --> 01:22:12.070 align:start position:0%
if there's some reader that was looking
at<01:22:11.440><c> the</c><01:22:11.600><c> list</c>

01:22:12.070 --> 01:22:12.080 align:start position:0%
at the list
 

01:22:12.080 --> 01:22:14.790 align:start position:0%
at the list
right<01:22:12.560><c> they</c><01:22:12.880><c> may</c><01:22:13.360><c> have</c><01:22:13.600><c> you</c><01:22:13.760><c> know</c><01:22:14.080><c> just</c><01:22:14.480><c> gotten</c>

01:22:14.790 --> 01:22:14.800 align:start position:0%
right they may have you know just gotten
 

01:22:14.800 --> 01:22:16.790 align:start position:0%
right they may have you know just gotten
to<01:22:14.960><c> the</c><01:22:15.120><c> list</c><01:22:15.440><c> element</c><01:22:15.760><c> that</c><01:22:16.000><c> held</c><01:22:16.320><c> one</c><01:22:16.639><c> that</c>

01:22:16.790 --> 01:22:16.800 align:start position:0%
to the list element that held one that
 

01:22:16.800 --> 01:22:18.470 align:start position:0%
to the list element that held one that
we<01:22:16.960><c> replaced</c><01:22:17.360><c> with</c><01:22:17.600><c> two</c><01:22:17.920><c> and</c><01:22:18.080><c> then</c><01:22:18.239><c> a</c><01:22:18.320><c> good</c>

01:22:18.470 --> 01:22:18.480 align:start position:0%
we replaced with two and then a good
 

01:22:18.480 --> 01:22:19.910 align:start position:0%
we replaced with two and then a good
deal<01:22:18.800><c> longer</c><01:22:19.199><c> you</c><01:22:19.360><c> know</c>

01:22:19.910 --> 01:22:19.920 align:start position:0%
deal longer you know
 

01:22:19.920 --> 01:22:23.350 align:start position:0%
deal longer you know
and<01:22:20.000><c> then</c><01:22:20.159><c> they</c><01:22:20.320><c> do</c><01:22:20.480><c> the</c><01:22:20.560><c> actual</c><01:22:20.960><c> read</c><01:22:22.400><c> of</c>

01:22:23.350 --> 01:22:23.360 align:start position:0%
and then they do the actual read of
 

01:22:23.360 --> 01:22:27.030 align:start position:0%
and then they do the actual read of
the<01:22:23.520><c> list</c><01:22:23.920><c> element</c><01:22:24.400><c> you</c><01:22:24.480><c> know</c><01:22:24.639><c> they</c><01:22:24.800><c> look</c><01:22:25.040><c> at</c>

01:22:27.030 --> 01:22:27.040 align:start position:0%
the list element you know they look at
 

01:22:27.040 --> 01:22:28.550 align:start position:0%
the list element you know they look at
whatever<01:22:27.520><c> the</c><01:22:27.600><c> content</c><01:22:28.000><c> is</c><01:22:28.159><c> in</c><01:22:28.239><c> the</c><01:22:28.320><c> list</c>

01:22:28.550 --> 01:22:28.560 align:start position:0%
whatever the content is in the list
 

01:22:28.560 --> 01:22:30.390 align:start position:0%
whatever the content is in the list
element<01:22:28.880><c> after</c><01:22:29.120><c> we've</c><01:22:29.360><c> done</c><01:22:29.600><c> this</c>

01:22:30.390 --> 01:22:30.400 align:start position:0%
element after we've done this
 

01:22:30.400 --> 01:22:31.990 align:start position:0%
element after we've done this
you<01:22:30.480><c> know</c><01:22:30.800><c> they're</c><01:22:31.120><c> reading</c><01:22:31.520><c> the</c><01:22:31.679><c> list</c>

01:22:31.990 --> 01:22:32.000 align:start position:0%
you know they're reading the list
 

01:22:32.000 --> 01:22:34.310 align:start position:0%
you know they're reading the list
element<01:22:32.639><c> only</c><01:22:32.880><c> at</c><01:22:33.040><c> this</c><01:22:33.199><c> point</c><01:22:33.520><c> later</c><01:22:33.840><c> in</c><01:22:34.000><c> time</c>

01:22:34.310 --> 01:22:34.320 align:start position:0%
element only at this point later in time
 

01:22:34.320 --> 01:22:39.590 align:start position:0%
element only at this point later in time
and<01:22:34.400><c> they</c><01:22:34.639><c> see</c><01:22:34.880><c> the</c><01:22:35.040><c> old</c><01:22:36.840><c> value</c>

01:22:39.590 --> 01:22:39.600 align:start position:0%
and they see the old value
 

01:22:39.600 --> 01:22:41.189 align:start position:0%
and they see the old value
so<01:22:39.760><c> if</c><01:22:39.920><c> you're</c><01:22:40.000><c> not</c><01:22:40.239><c> prepared</c><01:22:40.639><c> for</c><01:22:40.800><c> this</c><01:22:41.040><c> so</c>

01:22:41.189 --> 01:22:41.199 align:start position:0%
so if you're not prepared for this so
 

01:22:41.199 --> 01:22:44.149 align:start position:0%
so if you're not prepared for this so
this<01:22:41.360><c> is</c><01:22:41.440><c> like</c><01:22:41.600><c> a</c><01:22:41.679><c> little</c><01:22:41.840><c> bit</c><01:22:42.080><c> odd</c><01:22:42.400><c> now</c>

01:22:44.149 --> 01:22:44.159 align:start position:0%
this is like a little bit odd now
 

01:22:44.159 --> 01:22:47.350 align:start position:0%
this is like a little bit odd now
um<01:22:45.840><c> i</c><01:22:45.920><c> mean</c>

01:22:47.350 --> 01:22:47.360 align:start position:0%
um i mean
 

01:22:47.360 --> 01:22:49.110 align:start position:0%
um i mean
they<01:22:47.520><c> may</c><01:22:47.679><c> even</c><01:22:47.840><c> do</c><01:22:48.000><c> a</c><01:22:48.080><c> memory</c><01:22:48.400><c> barrier</c><01:22:48.800><c> right</c>

01:22:49.110 --> 01:22:49.120 align:start position:0%
they may even do a memory barrier right
 

01:22:49.120 --> 01:22:50.709 align:start position:0%
they may even do a memory barrier right
i<01:22:49.199><c> mean</c><01:22:49.360><c> it's</c><01:22:49.440><c> not</c><01:22:49.600><c> a</c><01:22:49.679><c> memory</c><01:22:50.000><c> barrier</c><01:22:50.400><c> issue</c>

01:22:50.709 --> 01:22:50.719 align:start position:0%
i mean it's not a memory barrier issue
 

01:22:50.719 --> 01:22:53.910 align:start position:0%
i mean it's not a memory barrier issue
it's<01:22:50.800><c> just</c><01:22:50.960><c> like</c>

01:22:53.910 --> 01:22:53.920 align:start position:0%
 
 

01:22:53.920 --> 01:22:55.830 align:start position:0%
 
and<01:22:54.560><c> indeed</c><01:22:54.880><c> most</c><01:22:55.120><c> of</c><01:22:55.120><c> the</c><01:22:55.199><c> time</c><01:22:55.440><c> it</c><01:22:55.520><c> doesn't</c>

01:22:55.830 --> 01:22:55.840 align:start position:0%
and indeed most of the time it doesn't
 

01:22:55.840 --> 01:22:58.149 align:start position:0%
and indeed most of the time it doesn't
matter

01:22:58.149 --> 01:22:58.159 align:start position:0%
matter
 

01:22:58.159 --> 01:23:01.430 align:start position:0%
matter
i<01:22:58.400><c> see</c><01:22:58.560><c> so</c><01:22:58.719><c> this</c><01:22:58.880><c> is</c><01:22:59.040><c> when</c><01:22:59.920><c> this</c><01:23:00.560><c> replace</c>

01:23:01.430 --> 01:23:01.440 align:start position:0%
i see so this is when this replace
 

01:23:01.440 --> 01:23:04.550 align:start position:0%
i see so this is when this replace
is<01:23:02.480><c> very</c><01:23:03.280><c> close</c>

01:23:04.550 --> 01:23:04.560 align:start position:0%
is very close
 

01:23:04.560 --> 01:23:07.350 align:start position:0%
is very close
so<01:23:04.719><c> like</c><01:23:05.360><c> the</c><01:23:05.600><c> read</c><01:23:06.159><c> somehow</c><01:23:06.560><c> like</c><01:23:06.800><c> starts</c>

01:23:07.350 --> 01:23:07.360 align:start position:0%
so like the read somehow like starts
 

01:23:07.360 --> 01:23:08.149 align:start position:0%
so like the read somehow like starts
before

01:23:08.149 --> 01:23:08.159 align:start position:0%
before
 

01:23:08.159 --> 01:23:11.189 align:start position:0%
before
their<01:23:08.560><c> plays</c><01:23:08.880><c> but</c><01:23:10.000><c> it</c><01:23:10.159><c> just</c>

01:23:11.189 --> 01:23:11.199 align:start position:0%
their plays but it just
 

01:23:11.199 --> 01:23:14.709 align:start position:0%
their plays but it just
takes<01:23:11.520><c> a</c><01:23:11.679><c> while</c><01:23:12.080><c> and</c><01:23:12.480><c> yes</c><01:23:13.360><c> yeah</c><01:23:14.159><c> if</c><01:23:14.239><c> the</c><01:23:14.400><c> reader</c>

01:23:14.709 --> 01:23:14.719 align:start position:0%
takes a while and yes yeah if the reader
 

01:23:14.719 --> 01:23:17.030 align:start position:0%
takes a while and yes yeah if the reader
is<01:23:14.960><c> slower</c><01:23:15.440><c> than</c><01:23:15.600><c> the</c><01:23:15.760><c> writer</c><01:23:16.159><c> or</c><01:23:16.239><c> something</c>

01:23:17.030 --> 01:23:17.040 align:start position:0%
is slower than the writer or something
 

01:23:17.040 --> 01:23:20.550 align:start position:0%
is slower than the writer or something
now<01:23:18.400><c> you</c><01:23:18.480><c> know</c><01:23:18.840><c> be</c>

01:23:20.550 --> 01:23:20.560 align:start position:0%
now you know be
 

01:23:20.560 --> 01:23:22.709 align:start position:0%
now you know be
i<01:23:20.719><c> think</c><01:23:20.960><c> this</c><01:23:21.120><c> mostly</c><01:23:21.440><c> doesn't</c><01:23:21.679><c> matter</c>

01:23:22.709 --> 01:23:22.719 align:start position:0%
i think this mostly doesn't matter
 

01:23:22.719 --> 01:23:23.669 align:start position:0%
i think this mostly doesn't matter
because

01:23:23.669 --> 01:23:23.679 align:start position:0%
because
 

01:23:23.679 --> 01:23:25.830 align:start position:0%
because
after<01:23:24.000><c> all</c><01:23:24.639><c> the</c><01:23:24.800><c> reader</c><01:23:25.120><c> and</c><01:23:25.199><c> the</c><01:23:25.280><c> writer</c><01:23:25.600><c> were</c>

01:23:25.830 --> 01:23:25.840 align:start position:0%
after all the reader and the writer were
 

01:23:25.840 --> 01:23:26.870 align:start position:0%
after all the reader and the writer were
acting<01:23:26.080><c> concurrently</c>

01:23:26.870 --> 01:23:26.880 align:start position:0%
acting concurrently
 

01:23:26.880 --> 01:23:28.870 align:start position:0%
acting concurrently
and<01:23:27.920><c> you</c><01:23:28.080><c> know</c><01:23:28.159><c> if</c><01:23:28.320><c> two</c><01:23:28.480><c> things</c><01:23:28.639><c> happen</c>

01:23:28.870 --> 01:23:28.880 align:start position:0%
and you know if two things happen
 

01:23:28.880 --> 01:23:29.910 align:start position:0%
and you know if two things happen
concurrently

01:23:29.910 --> 01:23:29.920 align:start position:0%
concurrently
 

01:23:29.920 --> 01:23:33.189 align:start position:0%
concurrently
usually<01:23:30.320><c> you</c><01:23:32.159><c> you</c><01:23:32.480><c> would</c><01:23:32.719><c> never</c><01:23:33.040><c> have</c>

01:23:33.189 --> 01:23:33.199 align:start position:0%
usually you you would never have
 

01:23:33.199 --> 01:23:34.470 align:start position:0%
usually you you would never have
imagined<01:23:33.679><c> that</c><01:23:33.760><c> you</c><01:23:33.920><c> could</c><01:23:34.080><c> have</c><01:23:34.159><c> been</c>

01:23:34.470 --> 01:23:34.480 align:start position:0%
imagined that you could have been
 

01:23:34.480 --> 01:23:37.990 align:start position:0%
imagined that you could have been
guaranteed<01:23:34.960><c> much</c><01:23:35.280><c> about</c><01:23:36.480><c> the</c><01:23:36.639><c> exact</c><01:23:37.040><c> order</c>

01:23:37.990 --> 01:23:38.000 align:start position:0%
guaranteed much about the exact order
 

01:23:38.000 --> 01:23:39.510 align:start position:0%
guaranteed much about the exact order
if<01:23:38.159><c> the</c><01:23:38.320><c> two</c><01:23:38.560><c> operations</c><01:23:39.120><c> were</c><01:23:39.280><c> invoked</c>

01:23:39.510 --> 01:23:39.520 align:start position:0%
if the two operations were invoked
 

01:23:39.520 --> 01:23:41.990 align:start position:0%
if the two operations were invoked
concurrently

01:23:41.990 --> 01:23:42.000 align:start position:0%
concurrently
 

01:23:42.000 --> 01:23:45.350 align:start position:0%
concurrently
the<01:23:42.239><c> the</c><01:23:42.400><c> paper</c><01:23:42.800><c> claims</c><01:23:44.800><c> i</c><01:23:44.960><c> mean</c><01:23:45.040><c> the</c><01:23:45.120><c> paper</c>

01:23:45.350 --> 01:23:45.360 align:start position:0%
the the paper claims i mean the paper
 

01:23:45.360 --> 01:23:46.629 align:start position:0%
the the paper claims i mean the paper
has<01:23:45.520><c> an</c><01:23:45.600><c> example</c><01:23:46.000><c> in</c><01:23:46.080><c> which</c><01:23:46.239><c> they</c><01:23:46.320><c> said</c><01:23:46.560><c> it</c>

01:23:46.629 --> 01:23:46.639 align:start position:0%
has an example in which they said it
 

01:23:46.639 --> 01:23:47.510 align:start position:0%
has an example in which they said it
matters

01:23:47.510 --> 01:23:47.520 align:start position:0%
matters
 

01:23:47.520 --> 01:23:49.590 align:start position:0%
matters
it<01:23:47.679><c> turned</c><01:23:48.000><c> out</c><01:23:48.480><c> to</c><01:23:48.639><c> cause</c><01:23:48.880><c> a</c><01:23:48.960><c> real</c><01:23:49.199><c> problem</c>

01:23:49.590 --> 01:23:49.600 align:start position:0%
it turned out to cause a real problem
 

01:23:49.600 --> 01:23:53.590 align:start position:0%
it turned out to cause a real problem
although<01:23:49.920><c> i</c><01:23:50.080><c> don't</c><01:23:50.239><c> really</c><01:23:50.560><c> understand</c>

01:23:53.590 --> 01:23:53.600 align:start position:0%
 
 

01:23:53.600 --> 01:23:57.110 align:start position:0%
 
why<01:23:53.760><c> that</c><01:23:54.000><c> was</c><01:23:55.520><c> i</c><01:23:55.760><c> see</c><01:23:56.000><c> this</c><01:23:56.239><c> makes</c><01:23:56.480><c> sense</c>

01:23:57.110 --> 01:23:57.120 align:start position:0%
why that was i see this makes sense
 

01:23:57.120 --> 01:23:59.590 align:start position:0%
why that was i see this makes sense
and<01:23:57.280><c> my</c><01:23:57.520><c> other</c><01:23:57.840><c> question</c><01:23:58.159><c> was</c><01:23:58.960><c> it's</c><01:23:59.280><c> called</c>

01:23:59.590 --> 01:23:59.600 align:start position:0%
and my other question was it's called
 

01:23:59.600 --> 01:24:00.790 align:start position:0%
and my other question was it's called
rcu<01:24:00.080><c> because</c><01:24:00.480><c> of</c>

01:24:00.790 --> 01:24:00.800 align:start position:0%
rcu because of
 

01:24:00.800 --> 01:24:04.790 align:start position:0%
rcu because of
idea<01:24:01.199><c> one</c><01:24:01.760><c> is</c><01:24:02.080><c> that</c><01:24:02.320><c> right</c><01:24:02.960><c> read</c><01:24:03.280><c> copy</c><01:24:03.760><c> update</c>

01:24:04.790 --> 01:24:04.800 align:start position:0%
idea one is that right read copy update
 

01:24:04.800 --> 01:24:07.669 align:start position:0%
idea one is that right read copy update
yes<01:24:06.000><c> i</c><01:24:06.159><c> believe</c><01:24:06.480><c> it's</c><01:24:06.719><c> because</c><01:24:06.960><c> of</c><01:24:07.120><c> idea</c><01:24:07.440><c> one</c>

01:24:07.669 --> 01:24:07.679 align:start position:0%
yes i believe it's because of idea one
 

01:24:07.679 --> 01:24:09.030 align:start position:0%
yes i believe it's because of idea one
that<01:24:07.920><c> is</c><01:24:08.080><c> that</c>

01:24:09.030 --> 01:24:09.040 align:start position:0%
that is that
 

01:24:09.040 --> 01:24:12.629 align:start position:0%
that is that
instead<01:24:09.360><c> of</c><01:24:09.520><c> modifying</c><01:24:10.080><c> things</c><01:24:10.560><c> in</c><01:24:10.719><c> place</c><01:24:11.760><c> you</c>

01:24:12.629 --> 01:24:12.639 align:start position:0%
instead of modifying things in place you
 

01:24:12.639 --> 01:24:18.790 align:start position:0%
instead of modifying things in place you
make<01:24:12.880><c> a</c><01:24:12.960><c> copy</c><01:24:13.360><c> and</c><01:24:13.440><c> you</c><01:24:13.600><c> sort</c><01:24:14.840><c> of</c>

01:24:18.790 --> 01:24:18.800 align:start position:0%
 
 

01:24:18.800 --> 01:24:21.270 align:start position:0%
 
that's<01:24:19.040><c> the</c><01:24:19.120><c> real</c><01:24:19.360><c> thing</c><01:24:20.560><c> right</c><01:24:20.880><c> this</c><01:24:21.040><c> makes</c>

01:24:21.270 --> 01:24:21.280 align:start position:0%
that's the real thing right this makes
 

01:24:21.280 --> 01:24:24.470 align:start position:0%
that's the real thing right this makes
sense<01:24:21.679><c> thank</c><01:24:21.840><c> you</c><01:24:21.920><c> so</c><01:24:22.159><c> much</c>

01:24:24.470 --> 01:24:24.480 align:start position:0%
 
 

01:24:24.480 --> 01:24:27.750 align:start position:0%
 
yes<01:24:26.239><c> so</c><01:24:26.480><c> at</c><01:24:26.560><c> the</c><01:24:26.639><c> beginning</c><01:24:26.960><c> of</c><01:24:27.120><c> lecture</c><01:24:27.520><c> or</c>

01:24:27.750 --> 01:24:27.760 align:start position:0%
yes so at the beginning of lecture or
 

01:24:27.760 --> 01:24:29.110 align:start position:0%
yes so at the beginning of lecture or
towards<01:24:28.080><c> the</c><01:24:28.159><c> beginning</c><01:24:28.480><c> we</c><01:24:28.639><c> talked</c><01:24:28.880><c> about</c>

01:24:29.110 --> 01:24:29.120 align:start position:0%
towards the beginning we talked about
 

01:24:29.120 --> 01:24:29.990 align:start position:0%
towards the beginning we talked about
the<01:24:29.440><c> of</c><01:24:29.760><c> and</c>

01:24:29.990 --> 01:24:30.000 align:start position:0%
the of and
 

01:24:30.000 --> 01:24:32.149 align:start position:0%
the of and
squared<01:24:30.400><c> runtime</c><01:24:31.040><c> for</c><01:24:31.440><c> uh</c><01:24:31.679><c> the</c><01:24:31.840><c> cache</c>

01:24:32.149 --> 01:24:32.159 align:start position:0%
squared runtime for uh the cache
 

01:24:32.159 --> 01:24:33.910 align:start position:0%
squared runtime for uh the cache
coherence<01:24:32.719><c> protocols</c>

01:24:33.910 --> 01:24:33.920 align:start position:0%
coherence protocols
 

01:24:33.920 --> 01:24:36.870 align:start position:0%
coherence protocols
um<01:24:34.719><c> for</c><01:24:34.960><c> for</c><01:24:35.199><c> updating</c><01:24:35.520><c> the</c><01:24:35.600><c> read</c><01:24:35.760><c> write</c><01:24:36.000><c> locks</c>

01:24:36.870 --> 01:24:36.880 align:start position:0%
um for for updating the read write locks
 

01:24:36.880 --> 01:24:37.510 align:start position:0%
um for for updating the read write locks
um

01:24:37.510 --> 01:24:37.520 align:start position:0%
um
 

01:24:37.520 --> 01:24:40.070 align:start position:0%
um
isn't<01:24:37.760><c> this</c><01:24:38.080><c> also</c><01:24:38.400><c> a</c><01:24:38.560><c> problem</c><01:24:38.880><c> with</c><01:24:39.040><c> spinlocks</c>

01:24:40.070 --> 01:24:40.080 align:start position:0%
isn't this also a problem with spinlocks
 

01:24:40.080 --> 01:24:42.550 align:start position:0%
isn't this also a problem with spinlocks
where

01:24:42.550 --> 01:24:42.560 align:start position:0%
 
 

01:24:42.560 --> 01:24:45.830 align:start position:0%
 
yeah<01:24:42.960><c> okay</c><01:24:43.360><c> so</c><01:24:43.360><c> so</c><01:24:44.080><c> like</c><01:24:44.800><c> what's</c><01:24:45.360><c> the</c>

01:24:45.830 --> 01:24:45.840 align:start position:0%
yeah okay so so like what's the
 

01:24:45.840 --> 01:24:47.910 align:start position:0%
yeah okay so so like what's the
reason<01:24:46.239><c> why</c><01:24:46.480><c> we</c><01:24:46.560><c> didn't</c><01:24:46.800><c> discuss</c><01:24:47.199><c> that</c><01:24:47.679><c> that</c>

01:24:47.910 --> 01:24:47.920 align:start position:0%
reason why we didn't discuss that that
 

01:24:47.920 --> 01:24:49.430 align:start position:0%
reason why we didn't discuss that that
aspect

01:24:49.430 --> 01:24:49.440 align:start position:0%
aspect
 

01:24:49.440 --> 01:24:52.550 align:start position:0%
aspect
why<01:24:49.679><c> we</c><01:24:49.840><c> didn't</c><01:24:50.800><c> yeah</c><01:24:51.199><c> or</c><01:24:51.679><c> like</c><01:24:52.080><c> is</c><01:24:52.159><c> there</c><01:24:52.400><c> a</c>

01:24:52.550 --> 01:24:52.560 align:start position:0%
why we didn't yeah or like is there a
 

01:24:52.560 --> 01:24:53.430 align:start position:0%
why we didn't yeah or like is there a
reason<01:24:52.880><c> that</c>

01:24:53.430 --> 01:24:53.440 align:start position:0%
reason that
 

01:24:53.440 --> 01:24:55.270 align:start position:0%
reason that
that<01:24:53.679><c> still</c><01:24:53.920><c> exists</c><01:24:54.400><c> or</c><01:24:54.719><c> like</c><01:24:54.880><c> what</c><01:24:55.040><c> do</c>

01:24:55.270 --> 01:24:55.280 align:start position:0%
that still exists or like what do
 

01:24:55.280 --> 01:24:56.950 align:start position:0%
that still exists or like what do
spinlocks<01:24:55.760><c> do</c><01:24:55.920><c> to</c><01:24:56.080><c> address</c><01:24:56.400><c> that</c>

01:24:56.950 --> 01:24:56.960 align:start position:0%
spinlocks do to address that
 

01:24:56.960 --> 01:24:59.750 align:start position:0%
spinlocks do to address that
nothing<01:24:57.920><c> oh</c><01:24:58.239><c> okay</c><01:24:58.719><c> the</c><01:24:58.880><c> knocks</c><01:24:59.120><c> are</c><01:24:59.199><c> hideously</c>

01:24:59.750 --> 01:24:59.760 align:start position:0%
nothing oh okay the knocks are hideously
 

01:24:59.760 --> 01:25:00.550 align:start position:0%
nothing oh okay the knocks are hideously
expensive

01:25:00.550 --> 01:25:00.560 align:start position:0%
expensive
 

01:25:00.560 --> 01:25:02.870 align:start position:0%
expensive
if<01:25:00.719><c> they're</c><01:25:01.040><c> uh</c><01:25:01.760><c> or</c><01:25:02.159><c> standard</c><01:25:02.400><c> spin</c><01:25:02.639><c> locks</c>

01:25:02.870 --> 01:25:02.880 align:start position:0%
if they're uh or standard spin locks
 

01:25:02.880 --> 01:25:04.470 align:start position:0%
if they're uh or standard spin locks
like<01:25:03.040><c> xv6</c><01:25:03.600><c> has</c><01:25:03.920><c> are</c>

01:25:04.470 --> 01:25:04.480 align:start position:0%
like xv6 has are
 

01:25:04.480 --> 01:25:07.430 align:start position:0%
like xv6 has are
extremely<01:25:05.120><c> fast</c><01:25:06.080><c> if</c><01:25:06.320><c> the</c><01:25:06.560><c> lock</c><01:25:06.880><c> is</c><01:25:06.960><c> not</c>

01:25:07.430 --> 01:25:07.440 align:start position:0%
extremely fast if the lock is not
 

01:25:07.440 --> 01:25:09.430 align:start position:0%
extremely fast if the lock is not
particularly<01:25:07.920><c> contended</c>

01:25:09.430 --> 01:25:09.440 align:start position:0%
particularly contended
 

01:25:09.440 --> 01:25:12.629 align:start position:0%
particularly contended
and<01:25:10.080><c> terribly</c><01:25:10.639><c> slow</c><01:25:11.199><c> if</c><01:25:11.760><c> lots</c><01:25:12.080><c> of</c><01:25:12.159><c> cords</c><01:25:12.480><c> try</c>

01:25:12.629 --> 01:25:12.639 align:start position:0%
and terribly slow if lots of cords try
 

01:25:12.639 --> 01:25:14.629 align:start position:0%
and terribly slow if lots of cords try
to<01:25:12.719><c> get</c><01:25:12.800><c> this</c><01:25:12.960><c> unlock</c><01:25:13.199><c> at</c><01:25:13.280><c> the</c><01:25:13.360><c> same</c><01:25:13.600><c> time</c>

01:25:14.629 --> 01:25:14.639 align:start position:0%
to get this unlock at the same time
 

01:25:14.639 --> 01:25:16.310 align:start position:0%
to get this unlock at the same time
gotcha<01:25:15.199><c> okay</c><01:25:15.440><c> yeah</c><01:25:15.760><c> this</c><01:25:15.920><c> is</c><01:25:16.000><c> one</c><01:25:16.159><c> of</c><01:25:16.239><c> the</c>

01:25:16.310 --> 01:25:16.320 align:start position:0%
gotcha okay yeah this is one of the
 

01:25:16.320 --> 01:25:17.430 align:start position:0%
gotcha okay yeah this is one of the
things<01:25:16.480><c> that</c><01:25:16.560><c> makes</c><01:25:16.719><c> life</c><01:25:16.960><c> interesting</c><01:25:17.280><c> and</c>

01:25:17.430 --> 01:25:17.440 align:start position:0%
things that makes life interesting and
 

01:25:17.440 --> 01:25:19.669 align:start position:0%
things that makes life interesting and
you<01:25:17.520><c> know</c><01:25:17.600><c> there's</c>

01:25:19.669 --> 01:25:19.679 align:start position:0%
you know there's
 

01:25:19.679 --> 01:25:24.950 align:start position:0%
you know there's
i<01:25:19.760><c> mean</c><01:25:21.520><c> there's</c><01:25:22.480><c> there's</c><01:25:22.800><c> locks</c><01:25:23.199><c> that</c><01:25:23.440><c> are</c>

01:25:24.950 --> 01:25:24.960 align:start position:0%
i mean there's there's locks that are
 

01:25:24.960 --> 01:25:28.790 align:start position:0%
i mean there's there's locks that are
have<01:25:25.199><c> better</c><01:25:25.520><c> scaling</c><01:25:26.639><c> but</c><01:25:26.960><c> worse</c>

01:25:28.790 --> 01:25:28.800 align:start position:0%
have better scaling but worse
 

01:25:28.800 --> 01:25:30.629 align:start position:0%
have better scaling but worse
um<01:25:29.360><c> that</c><01:25:29.520><c> they</c><01:25:29.679><c> have</c><01:25:29.840><c> better</c><01:25:30.159><c> high</c><01:25:30.320><c> load</c>

01:25:30.629 --> 01:25:30.639 align:start position:0%
um that they have better high load
 

01:25:30.639 --> 01:25:31.990 align:start position:0%
um that they have better high load
performance<01:25:31.040><c> but</c><01:25:31.199><c> worse</c><01:25:31.520><c> low</c><01:25:31.760><c> load</c>

01:25:31.990 --> 01:25:32.000 align:start position:0%
performance but worse low load
 

01:25:32.000 --> 01:25:35.110 align:start position:0%
performance but worse low load
performance

01:25:35.110 --> 01:25:35.120 align:start position:0%
 
 

01:25:35.120 --> 01:25:37.510 align:start position:0%
 
but<01:25:35.360><c> i'm</c><01:25:35.520><c> not</c><01:25:35.679><c> aware</c><01:25:35.920><c> of</c><01:25:36.000><c> a</c><01:25:36.080><c> lock</c><01:25:36.400><c> that</c><01:25:36.560><c> is</c>

01:25:37.510 --> 01:25:37.520 align:start position:0%
but i'm not aware of a lock that is
 

01:25:37.520 --> 01:25:38.229 align:start position:0%
but i'm not aware of a lock that is
anyway

01:25:38.229 --> 01:25:38.239 align:start position:0%
anyway
 

01:25:38.239 --> 01:25:39.750 align:start position:0%
anyway
it's<01:25:38.560><c> hard</c><01:25:38.800><c> it's</c><01:25:38.880><c> hard</c><01:25:39.120><c> to</c><01:25:39.199><c> get</c><01:25:39.360><c> this</c><01:25:39.520><c> stuff</c>

01:25:39.750 --> 01:25:39.760 align:start position:0%
it's hard it's hard to get this stuff
 

01:25:39.760 --> 01:25:41.830 align:start position:0%
it's hard it's hard to get this stuff
right<01:25:40.000><c> it's</c><01:25:40.159><c> hard</c><01:25:40.320><c> to</c>

01:25:41.830 --> 01:25:41.840 align:start position:0%
right it's hard to
 

01:25:41.840 --> 01:25:50.950 align:start position:0%
right it's hard to
get<01:25:42.000><c> good</c><01:25:42.159><c> performance</c><01:25:42.560><c> in</c><01:25:42.639><c> these</c><01:25:42.800><c> machines</c>

01:25:50.950 --> 01:25:50.960 align:start position:0%
 
 

01:25:50.960 --> 01:25:54.149 align:start position:0%
 
other<01:25:52.840><c> questions</c>

01:25:54.149 --> 01:25:54.159 align:start position:0%
other questions
 

01:25:54.159 --> 01:25:57.669 align:start position:0%
other questions
uh<01:25:55.199><c> this</c><01:25:55.440><c> might</c><01:25:55.600><c> be</c><01:25:55.760><c> unrelated</c><01:25:56.560><c> but</c>

01:25:57.669 --> 01:25:57.679 align:start position:0%
uh this might be unrelated but
 

01:25:57.679 --> 01:25:59.750 align:start position:0%
uh this might be unrelated but
can<01:25:57.920><c> there</c><01:25:58.080><c> ever</c><01:25:58.320><c> be</c><01:25:58.480><c> like</c><01:25:58.639><c> lockings</c><01:25:59.360><c> between</c>

01:25:59.750 --> 01:25:59.760 align:start position:0%
can there ever be like lockings between
 

01:25:59.760 --> 01:26:03.270 align:start position:0%
can there ever be like lockings between
multiple<01:26:00.159><c> assists</c><01:26:00.639><c> different</c><01:26:00.960><c> systems</c>

01:26:03.270 --> 01:26:03.280 align:start position:0%
multiple assists different systems
 

01:26:03.280 --> 01:26:06.950 align:start position:0%
multiple assists different systems
um<01:26:04.080><c> for</c><01:26:04.320><c> like</c><01:26:05.600><c> not</c><01:26:05.840><c> just</c><01:26:06.080><c> contained</c><01:26:06.480><c> to</c><01:26:06.719><c> one</c>

01:26:06.950 --> 01:26:06.960 align:start position:0%
um for like not just contained to one
 

01:26:06.960 --> 01:26:08.229 align:start position:0%
um for like not just contained to one
system<01:26:07.280><c> maybe</c><01:26:07.600><c> like</c>

01:26:08.229 --> 01:26:08.239 align:start position:0%
system maybe like
 

01:26:08.239 --> 01:26:11.430 align:start position:0%
system maybe like
multiple<01:26:08.639><c> servers</c><01:26:09.040><c> perhaps</c><01:26:11.040><c> there</c><01:26:11.199><c> are</c>

01:26:11.430 --> 01:26:11.440 align:start position:0%
multiple servers perhaps there are
 

01:26:11.440 --> 01:26:14.229 align:start position:0%
multiple servers perhaps there are
absolutely<01:26:11.920><c> distributed</c><01:26:12.560><c> systems</c><01:26:13.040><c> in</c><01:26:13.199><c> which</c>

01:26:14.229 --> 01:26:14.239 align:start position:0%
absolutely distributed systems in which
 

01:26:14.239 --> 01:26:17.270 align:start position:0%
absolutely distributed systems in which
there's<01:26:14.560><c> a</c><01:26:14.719><c> sort</c><01:26:14.880><c> of</c><01:26:15.120><c> locking</c>

01:26:17.270 --> 01:26:17.280 align:start position:0%
there's a sort of locking
 

01:26:17.280 --> 01:26:20.550 align:start position:0%
there's a sort of locking
um<01:26:18.880><c> in</c><01:26:18.960><c> which</c><01:26:19.199><c> the</c><01:26:19.440><c> sort</c><01:26:19.600><c> of</c><01:26:19.679><c> universe</c><01:26:20.159><c> of</c><01:26:20.239><c> lock</c>

01:26:20.550 --> 01:26:20.560 align:start position:0%
um in which the sort of universe of lock
 

01:26:20.560 --> 01:26:23.430 align:start position:0%
um in which the sort of universe of lock
spans<01:26:21.040><c> multiple</c><01:26:21.600><c> machines</c>

01:26:23.430 --> 01:26:23.440 align:start position:0%
spans multiple machines
 

01:26:23.440 --> 01:26:25.110 align:start position:0%
spans multiple machines
when<01:26:23.679><c> places</c><01:26:24.000><c> comes</c><01:26:24.239><c> up</c><01:26:24.400><c> is</c><01:26:24.480><c> in</c><01:26:24.639><c> distributed</c>

01:26:25.110 --> 01:26:25.120 align:start position:0%
when places comes up is in distributed
 

01:26:25.120 --> 01:26:26.550 align:start position:0%
when places comes up is in distributed
databases<01:26:25.679><c> where</c><01:26:25.920><c> the</c>

01:26:26.550 --> 01:26:26.560 align:start position:0%
databases where the
 

01:26:26.560 --> 01:26:29.030 align:start position:0%
databases where the
data<01:26:27.520><c> you</c><01:26:27.600><c> know</c><01:26:27.760><c> you</c><01:26:27.840><c> have</c><01:26:28.080><c> met</c><01:26:28.560><c> you</c><01:26:28.639><c> display</c>

01:26:29.030 --> 01:26:29.040 align:start position:0%
data you know you have met you display
 

01:26:29.040 --> 01:26:30.470 align:start position:0%
data you know you have met you display
your<01:26:29.120><c> data</c><01:26:29.360><c> over</c><01:26:29.520><c> multiple</c><01:26:29.920><c> servers</c><01:26:30.239><c> but</c><01:26:30.400><c> if</c>

01:26:30.470 --> 01:26:30.480 align:start position:0%
your data over multiple servers but if
 

01:26:30.480 --> 01:26:32.070 align:start position:0%
your data over multiple servers but if
you<01:26:30.560><c> want</c><01:26:30.639><c> to</c><01:26:30.719><c> have</c><01:26:30.800><c> a</c><01:26:30.880><c> transaction</c>

01:26:32.070 --> 01:26:32.080 align:start position:0%
you want to have a transaction
 

01:26:32.080 --> 01:26:34.149 align:start position:0%
you want to have a transaction
that<01:26:32.320><c> you</c><01:26:32.400><c> know</c><01:26:32.560><c> uses</c><01:26:32.880><c> data</c><01:26:33.199><c> that's</c><01:26:33.840><c> you</c><01:26:33.920><c> know</c>

01:26:34.149 --> 01:26:34.159 align:start position:0%
that you know uses data that's you know
 

01:26:34.159 --> 01:26:35.189 align:start position:0%
that you know uses data that's you know
different<01:26:34.400><c> pieces</c><01:26:34.719><c> of</c><01:26:34.719><c> the</c><01:26:34.800><c> data</c><01:26:35.040><c> on</c>

01:26:35.189 --> 01:26:35.199 align:start position:0%
different pieces of the data on
 

01:26:35.199 --> 01:26:35.990 align:start position:0%
different pieces of the data on
different<01:26:35.440><c> servers</c>

01:26:35.990 --> 01:26:36.000 align:start position:0%
different servers
 

01:26:36.000 --> 01:26:38.390 align:start position:0%
different servers
you're<01:26:36.320><c> going</c><01:26:36.480><c> to</c><01:26:36.560><c> need</c><01:26:36.719><c> to</c><01:26:36.800><c> collect</c><01:26:37.280><c> locks</c>

01:26:38.390 --> 01:26:38.400 align:start position:0%
you're going to need to collect locks
 

01:26:38.400 --> 01:26:40.470 align:start position:0%
you're going to need to collect locks
that<01:26:38.560><c> were</c><01:26:38.960><c> uh</c>

01:26:40.470 --> 01:26:40.480 align:start position:0%
that were uh
 

01:26:40.480 --> 01:26:42.310 align:start position:0%
that were uh
you<01:26:40.639><c> need</c><01:26:40.800><c> to</c><01:26:41.199><c> basically</c><01:26:41.600><c> collect</c><01:26:41.920><c> locks</c><01:26:42.159><c> from</c>

01:26:42.310 --> 01:26:42.320 align:start position:0%
you need to basically collect locks from
 

01:26:42.320 --> 01:26:43.830 align:start position:0%
you need to basically collect locks from
multiple<01:26:42.719><c> servers</c>

01:26:43.830 --> 01:26:43.840 align:start position:0%
multiple servers
 

01:26:43.840 --> 01:26:47.510 align:start position:0%
multiple servers
um<01:26:44.480><c> another</c><01:26:44.800><c> place</c><01:26:45.040><c> that</c><01:26:45.199><c> comes</c><01:26:45.520><c> up</c>

01:26:47.510 --> 01:26:47.520 align:start position:0%
um another place that comes up
 

01:26:47.520 --> 01:26:50.790 align:start position:0%
um another place that comes up
although<01:26:48.159><c> well</c><01:26:49.840><c> there's</c><01:26:50.159><c> been</c><01:26:50.320><c> a</c><01:26:50.400><c> number</c><01:26:50.639><c> of</c>

01:26:50.790 --> 01:26:50.800 align:start position:0%
although well there's been a number of
 

01:26:50.800 --> 01:26:52.470 align:start position:0%
although well there's been a number of
systems<01:26:51.199><c> that</c><01:26:51.280><c> are</c><01:26:51.520><c> essentially</c><01:26:52.080><c> try</c>

01:26:52.470 --> 01:26:52.480 align:start position:0%
systems that are essentially try
 

01:26:52.480 --> 01:26:55.350 align:start position:0%
systems that are essentially try
to<01:26:52.880><c> mimic</c><01:26:53.760><c> shared</c><01:26:54.080><c> memory</c><01:26:54.639><c> across</c>

01:26:55.350 --> 01:26:55.360 align:start position:0%
to mimic shared memory across
 

01:26:55.360 --> 01:26:57.910 align:start position:0%
to mimic shared memory across
independent<01:26:55.840><c> machines</c>

01:26:57.910 --> 01:26:57.920 align:start position:0%
independent machines
 

01:26:57.920 --> 01:26:59.430 align:start position:0%
independent machines
with<01:26:58.159><c> machines</c><01:26:58.639><c> you</c><01:26:58.800><c> know</c><01:26:58.880><c> if</c><01:26:59.040><c> i</c><01:26:59.120><c> use</c><01:26:59.280><c> some</c>

01:26:59.430 --> 01:26:59.440 align:start position:0%
with machines you know if i use some
 

01:26:59.440 --> 01:27:01.590 align:start position:0%
with machines you know if i use some
memory<01:26:59.840><c> that's</c><01:27:00.239><c> in</c><01:27:00.320><c> your</c><01:27:00.480><c> machine</c><01:27:00.960><c> then</c>

01:27:01.590 --> 01:27:01.600 align:start position:0%
memory that's in your machine then
 

01:27:01.600 --> 01:27:02.870 align:start position:0%
memory that's in your machine then
you<01:27:01.760><c> know</c><01:27:01.840><c> there's</c><01:27:02.000><c> some</c><01:27:02.239><c> infrastructure</c>

01:27:02.870 --> 01:27:02.880 align:start position:0%
you know there's some infrastructure
 

01:27:02.880 --> 01:27:04.550 align:start position:0%
you know there's some infrastructure
stuff<01:27:03.120><c> that</c><01:27:03.280><c> causes</c><01:27:03.760><c> my</c><01:27:03.920><c> machine</c><01:27:04.159><c> to</c><01:27:04.239><c> talk</c><01:27:04.400><c> to</c>

01:27:04.550 --> 01:27:04.560 align:start position:0%
stuff that causes my machine to talk to
 

01:27:04.560 --> 01:27:06.390 align:start position:0%
stuff that causes my machine to talk to
your<01:27:04.719><c> machine</c><01:27:04.960><c> and</c><01:27:05.040><c> ask</c><01:27:05.199><c> for</c><01:27:05.360><c> the</c><01:27:05.440><c> memory</c>

01:27:06.390 --> 01:27:06.400 align:start position:0%
your machine and ask for the memory
 

01:27:06.400 --> 01:27:09.590 align:start position:0%
your machine and ask for the memory
and<01:27:06.960><c> um</c><01:27:09.040><c> uh</c>

01:27:09.590 --> 01:27:09.600 align:start position:0%
and um uh
 

01:27:09.600 --> 01:27:11.990 align:start position:0%
and um uh
you<01:27:09.760><c> know</c><01:27:10.480><c> then</c><01:27:10.719><c> the</c><01:27:10.800><c> game</c><01:27:11.040><c> is</c><01:27:11.199><c> usually</c><01:27:11.440><c> to</c><01:27:11.600><c> run</c>

01:27:11.990 --> 01:27:12.000 align:start position:0%
you know then the game is usually to run
 

01:27:12.000 --> 01:27:13.830 align:start position:0%
you know then the game is usually to run
existing<01:27:12.400><c> parallel</c><01:27:12.800><c> programs</c>

01:27:13.830 --> 01:27:13.840 align:start position:0%
existing parallel programs
 

01:27:13.840 --> 01:27:15.830 align:start position:0%
existing parallel programs
on<01:27:14.000><c> a</c><01:27:14.159><c> cluster</c><01:27:14.480><c> of</c><01:27:14.639><c> workstations</c><01:27:15.360><c> instead</c><01:27:15.679><c> of</c>

01:27:15.830 --> 01:27:15.840 align:start position:0%
on a cluster of workstations instead of
 

01:27:15.840 --> 01:27:17.189 align:start position:0%
on a cluster of workstations instead of
on<01:27:16.000><c> a</c>

01:27:17.189 --> 01:27:17.199 align:start position:0%
on a
 

01:27:17.199 --> 01:27:19.510 align:start position:0%
on a
big<01:27:17.440><c> multi-core</c><01:27:18.000><c> machine</c><01:27:18.880><c> hoping</c><01:27:19.280><c> it's</c><01:27:19.440><c> going</c>

01:27:19.510 --> 01:27:19.520 align:start position:0%
big multi-core machine hoping it's going
 

01:27:19.520 --> 01:27:20.550 align:start position:0%
big multi-core machine hoping it's going
to<01:27:19.600><c> be</c><01:27:19.760><c> cheaper</c>

01:27:20.550 --> 01:27:20.560 align:start position:0%
to be cheaper
 

01:27:20.560 --> 01:27:21.750 align:start position:0%
to be cheaper
and<01:27:20.719><c> you</c><01:27:20.880><c> know</c><01:27:20.960><c> something</c><01:27:21.199><c> needs</c><01:27:21.440><c> to</c><01:27:21.520><c> be</c><01:27:21.600><c> done</c>

01:27:21.750 --> 01:27:21.760 align:start position:0%
and you know something needs to be done
 

01:27:21.760 --> 01:27:23.350 align:start position:0%
and you know something needs to be done
about<01:27:21.920><c> spin</c><01:27:22.239><c> locks</c><01:27:22.480><c> there</c><01:27:22.800><c> or</c><01:27:22.960><c> whatever</c>

01:27:23.350 --> 01:27:23.360 align:start position:0%
about spin locks there or whatever
 

01:27:23.360 --> 01:27:24.470 align:start position:0%
about spin locks there or whatever
locking<01:27:23.679><c> you're</c><01:27:23.840><c> going</c><01:27:23.920><c> to</c><01:27:24.000><c> use</c><01:27:24.239><c> and</c><01:27:24.320><c> so</c>

01:27:24.470 --> 01:27:24.480 align:start position:0%
locking you're going to use and so
 

01:27:24.480 --> 01:27:26.550 align:start position:0%
locking you're going to use and so
people<01:27:24.719><c> have</c><01:27:24.800><c> invented</c><01:27:25.199><c> various</c><01:27:25.600><c> ways</c><01:27:25.920><c> to</c>

01:27:26.550 --> 01:27:26.560 align:start position:0%
people have invented various ways to
 

01:27:26.560 --> 01:27:28.310 align:start position:0%
people have invented various ways to
make<01:27:26.719><c> the</c><01:27:26.880><c> locking</c><01:27:27.199><c> work</c><01:27:27.440><c> out</c><01:27:27.600><c> well</c><01:27:28.080><c> in</c><01:27:28.159><c> that</c>

01:27:28.310 --> 01:27:28.320 align:start position:0%
make the locking work out well in that
 

01:27:28.320 --> 01:27:30.870 align:start position:0%
make the locking work out well in that
case<01:27:28.560><c> too</c>

01:27:30.870 --> 01:27:30.880 align:start position:0%
 
 

01:27:30.880 --> 01:27:33.350 align:start position:0%
 
using<01:27:32.320><c> techniques</c><01:27:32.719><c> that</c><01:27:32.800><c> are</c><01:27:32.880><c> not</c><01:27:33.199><c> you</c><01:27:33.280><c> know</c>

01:27:33.350 --> 01:27:33.360 align:start position:0%
using techniques that are not you know
 

01:27:33.360 --> 01:27:35.910 align:start position:0%
using techniques that are not you know
often<01:27:33.600><c> not</c><01:27:33.840><c> quite</c><01:27:34.000><c> the</c><01:27:34.080><c> same</c><01:27:34.320><c> as</c><01:27:34.400><c> this</c>

01:27:35.910 --> 01:27:35.920 align:start position:0%
often not quite the same as this
 

01:27:35.920 --> 01:27:38.950 align:start position:0%
often not quite the same as this
although<01:27:36.159><c> the</c><01:27:36.239><c> pressure</c><01:27:36.639><c> to</c><01:27:36.800><c> avoid</c><01:27:38.639><c> the</c>

01:27:38.950 --> 01:27:38.960 align:start position:0%
although the pressure to avoid the
 

01:27:38.960 --> 01:27:41.270 align:start position:0%
although the pressure to avoid the
the<01:27:39.760><c> pressure</c><01:27:40.080><c> to</c><01:27:40.159><c> avoid</c><01:27:40.480><c> costs</c><01:27:40.880><c> is</c><01:27:41.040><c> even</c>

01:27:41.270 --> 01:27:41.280 align:start position:0%
the pressure to avoid costs is even
 

01:27:41.280 --> 01:27:54.870 align:start position:0%
the pressure to avoid costs is even
higher<01:27:41.600><c> in</c><01:27:41.679><c> that</c><01:27:44.840><c> case</c>

01:27:54.870 --> 01:27:54.880 align:start position:0%
 
 

01:27:54.880 --> 01:28:01.110 align:start position:0%
 
anything<01:27:58.840><c> else</c>

01:28:01.110 --> 01:28:01.120 align:start position:0%
anything else
 

01:28:01.120 --> 01:28:08.159 align:start position:0%
anything else
thank<01:28:01.360><c> you</c><01:28:02.960><c> you're</c><01:28:05.159><c> welcome</c>

