WEBVTT
Kind: captions
Language: en

00:00:00.080 --> 00:00:03.830 align:start position:0%
 
anyone<00:00:00.399><c> hear</c><00:00:00.640><c> me</c><00:00:02.800><c> can</c><00:00:02.960><c> hear</c><00:00:03.199><c> you</c>

00:00:03.830 --> 00:00:03.840 align:start position:0%
anyone hear me can hear you
 

00:00:03.840 --> 00:00:07.430 align:start position:0%
anyone hear me can hear you
thank<00:00:04.080><c> you</c><00:00:04.400><c> all</c><00:00:04.560><c> right</c><00:00:04.799><c> um</c><00:00:06.480><c> i'd</c><00:00:06.799><c> like</c><00:00:06.960><c> to</c><00:00:07.120><c> spend</c>

00:00:07.430 --> 00:00:07.440 align:start position:0%
thank you all right um i'd like to spend
 

00:00:07.440 --> 00:00:08.790 align:start position:0%
thank you all right um i'd like to spend
today's<00:00:07.839><c> lecture</c>

00:00:08.790 --> 00:00:08.800 align:start position:0%
today's lecture
 

00:00:08.800 --> 00:00:11.669 align:start position:0%
today's lecture
talking<00:00:09.120><c> about</c><00:00:09.519><c> um</c><00:00:10.080><c> threads</c><00:00:10.559><c> and</c><00:00:10.800><c> how</c><00:00:11.040><c> xv6</c>

00:00:11.669 --> 00:00:11.679 align:start position:0%
talking about um threads and how xv6
 

00:00:11.679 --> 00:00:13.270 align:start position:0%
talking about um threads and how xv6
does<00:00:11.920><c> thread</c><00:00:12.160><c> switching</c>

00:00:13.270 --> 00:00:13.280 align:start position:0%
does thread switching
 

00:00:13.280 --> 00:00:15.589 align:start position:0%
does thread switching
this<00:00:13.519><c> is</c><00:00:13.679><c> a</c><00:00:14.080><c> sort</c><00:00:14.240><c> of</c><00:00:14.559><c> one</c><00:00:14.719><c> of</c><00:00:14.880><c> our</c><00:00:15.200><c> under</c><00:00:15.440><c> the</c>

00:00:15.589 --> 00:00:15.599 align:start position:0%
this is a sort of one of our under the
 

00:00:15.599 --> 00:00:16.630 align:start position:0%
this is a sort of one of our under the
hood<00:00:16.160><c> um</c>

00:00:16.630 --> 00:00:16.640 align:start position:0%
hood um
 

00:00:16.640 --> 00:00:19.429 align:start position:0%
hood um
lectures<00:00:16.960><c> about</c><00:00:17.199><c> x36</c><00:00:17.840><c> we've</c><00:00:18.800><c> had</c><00:00:19.039><c> lectures</c>

00:00:19.429 --> 00:00:19.439 align:start position:0%
lectures about x36 we've had lectures
 

00:00:19.439 --> 00:00:21.510 align:start position:0%
lectures about x36 we've had lectures
before<00:00:19.680><c> about</c><00:00:19.840><c> how</c><00:00:20.080><c> system</c><00:00:20.400><c> calls</c><00:00:20.800><c> interrupts</c>

00:00:21.510 --> 00:00:21.520 align:start position:0%
before about how system calls interrupts
 

00:00:21.520 --> 00:00:24.550 align:start position:0%
before about how system calls interrupts
page<00:00:21.760><c> tables</c><00:00:22.160><c> and</c><00:00:22.240><c> locks</c><00:00:22.640><c> work</c><00:00:23.439><c> um</c><00:00:24.320><c> today</c>

00:00:24.550 --> 00:00:24.560 align:start position:0%
page tables and locks work um today
 

00:00:24.560 --> 00:00:26.550 align:start position:0%
page tables and locks work um today
we're<00:00:24.720><c> going</c><00:00:24.800><c> to</c><00:00:24.960><c> talk</c><00:00:25.199><c> about</c>

00:00:26.550 --> 00:00:26.560 align:start position:0%
we're going to talk about
 

00:00:26.560 --> 00:00:28.390 align:start position:0%
we're going to talk about
how<00:00:26.720><c> it</c><00:00:26.880><c> is</c><00:00:26.960><c> that</c><00:00:27.199><c> xv6</c><00:00:27.599><c> switches</c><00:00:28.000><c> among</c>

00:00:28.390 --> 00:00:28.400 align:start position:0%
how it is that xv6 switches among
 

00:00:28.400 --> 00:00:31.990 align:start position:0%
how it is that xv6 switches among
different<00:00:28.640><c> processes</c><00:00:29.439><c> now</c>

00:00:31.990 --> 00:00:32.000 align:start position:0%
 
 

00:00:32.000 --> 00:00:33.430 align:start position:0%
 
the<00:00:32.160><c> reason</c><00:00:32.480><c> for</c><00:00:32.640><c> this</c><00:00:32.880><c> the</c><00:00:32.960><c> highest</c><00:00:33.200><c> level</c>

00:00:33.430 --> 00:00:33.440 align:start position:0%
the reason for this the highest level
 

00:00:33.440 --> 00:00:34.870 align:start position:0%
the reason for this the highest level
reason<00:00:33.680><c> for</c><00:00:33.840><c> this</c><00:00:34.079><c> is</c><00:00:34.160><c> that</c><00:00:34.399><c> people</c><00:00:34.719><c> like</c>

00:00:34.870 --> 00:00:34.880 align:start position:0%
reason for this is that people like
 

00:00:34.880 --> 00:00:36.389 align:start position:0%
reason for this is that people like
their<00:00:35.120><c> computer</c><00:00:35.600><c> to</c><00:00:35.760><c> be</c><00:00:35.840><c> able</c><00:00:36.000><c> to</c><00:00:36.079><c> do</c><00:00:36.239><c> more</c>

00:00:36.389 --> 00:00:36.399 align:start position:0%
their computer to be able to do more
 

00:00:36.399 --> 00:00:37.990 align:start position:0%
their computer to be able to do more
than<00:00:36.559><c> one</c><00:00:36.880><c> task</c>

00:00:37.990 --> 00:00:38.000 align:start position:0%
than one task
 

00:00:38.000 --> 00:00:40.630 align:start position:0%
than one task
at<00:00:38.079><c> the</c><00:00:38.239><c> same</c><00:00:38.559><c> time</c><00:00:39.600><c> so</c><00:00:39.760><c> the</c><00:00:39.840><c> reason</c><00:00:40.239><c> might</c><00:00:40.399><c> be</c>

00:00:40.630 --> 00:00:40.640 align:start position:0%
at the same time so the reason might be
 

00:00:40.640 --> 00:00:41.750 align:start position:0%
at the same time so the reason might be
that<00:00:40.719><c> you're</c><00:00:40.960><c> supporting</c><00:00:41.440><c> time</c>

00:00:41.750 --> 00:00:41.760 align:start position:0%
that you're supporting time
 

00:00:41.760 --> 00:00:44.389 align:start position:0%
that you're supporting time
sharing<00:00:42.239><c> like</c><00:00:42.719><c> a</c><00:00:42.879><c> female</c><00:00:43.200><c> allows</c><00:00:43.680><c> many</c><00:00:44.000><c> users</c>

00:00:44.389 --> 00:00:44.399 align:start position:0%
sharing like a female allows many users
 

00:00:44.399 --> 00:00:45.750 align:start position:0%
sharing like a female allows many users
to<00:00:44.480><c> log</c><00:00:44.719><c> in</c><00:00:44.800><c> at</c><00:00:44.879><c> the</c><00:00:44.960><c> same</c><00:00:45.200><c> time</c><00:00:45.440><c> and</c><00:00:45.520><c> then</c><00:00:45.680><c> you</c>

00:00:45.750 --> 00:00:45.760 align:start position:0%
to log in at the same time and then you
 

00:00:45.760 --> 00:00:47.510 align:start position:0%
to log in at the same time and then you
know<00:00:45.920><c> they</c><00:00:46.079><c> can</c><00:00:46.160><c> all</c><00:00:46.320><c> run</c><00:00:46.559><c> processes</c>

00:00:47.510 --> 00:00:47.520 align:start position:0%
know they can all run processes
 

00:00:47.520 --> 00:00:49.590 align:start position:0%
know they can all run processes
um<00:00:47.760><c> or</c><00:00:47.920><c> even</c><00:00:48.160><c> on</c><00:00:48.239><c> a</c><00:00:48.320><c> single</c><00:00:48.559><c> user</c><00:00:48.879><c> machine</c><00:00:49.440><c> or</c>

00:00:49.590 --> 00:00:49.600 align:start position:0%
um or even on a single user machine or
 

00:00:49.600 --> 00:00:50.950 align:start position:0%
um or even on a single user machine or
even<00:00:49.840><c> your</c><00:00:50.000><c> iphone</c>

00:00:50.950 --> 00:00:50.960 align:start position:0%
even your iphone
 

00:00:50.960 --> 00:00:53.350 align:start position:0%
even your iphone
um<00:00:51.600><c> you</c><00:00:51.760><c> may</c><00:00:51.920><c> run</c><00:00:52.239><c> many</c><00:00:52.480><c> different</c><00:00:52.800><c> processes</c>

00:00:53.350 --> 00:00:53.360 align:start position:0%
um you may run many different processes
 

00:00:53.360 --> 00:00:55.110 align:start position:0%
um you may run many different processes
and<00:00:53.840><c> expect</c><00:00:54.239><c> the</c><00:00:54.320><c> computer</c><00:00:54.719><c> to</c>

00:00:55.110 --> 00:00:55.120 align:start position:0%
and expect the computer to
 

00:00:55.120 --> 00:00:56.790 align:start position:0%
and expect the computer to
to<00:00:55.280><c> do</c><00:00:55.440><c> all</c><00:00:55.600><c> the</c><00:00:55.760><c> things</c><00:00:55.920><c> you</c><00:00:56.079><c> ask</c><00:00:56.320><c> of</c><00:00:56.480><c> it</c><00:00:56.640><c> not</c>

00:00:56.790 --> 00:00:56.800 align:start position:0%
to do all the things you ask of it not
 

00:00:56.800 --> 00:01:00.229 align:start position:0%
to do all the things you ask of it not
just<00:00:56.960><c> one</c><00:00:57.199><c> thing</c>

00:01:00.229 --> 00:01:00.239 align:start position:0%
 
 

00:01:00.239 --> 00:01:02.470 align:start position:0%
 
another<00:01:00.640><c> reason</c><00:01:01.199><c> that</c><00:01:01.359><c> people</c><00:01:02.160><c> like</c><00:01:02.320><c> to</c>

00:01:02.470 --> 00:01:02.480 align:start position:0%
another reason that people like to
 

00:01:02.480 --> 00:01:03.670 align:start position:0%
another reason that people like to
support<00:01:02.800><c> multiple</c><00:01:03.199><c> tasks</c>

00:01:03.670 --> 00:01:03.680 align:start position:0%
support multiple tasks
 

00:01:03.680 --> 00:01:06.630 align:start position:0%
support multiple tasks
is<00:01:03.840><c> because</c><00:01:04.400><c> it</c><00:01:04.559><c> can</c><00:01:04.720><c> ease</c><00:01:05.119><c> program</c><00:01:05.600><c> structure</c>

00:01:06.630 --> 00:01:06.640 align:start position:0%
is because it can ease program structure
 

00:01:06.640 --> 00:01:09.429 align:start position:0%
is because it can ease program structure
threads<00:01:07.040><c> in</c><00:01:07.119><c> particular</c><00:01:07.680><c> today's</c><00:01:08.080><c> topic</c>

00:01:09.429 --> 00:01:09.439 align:start position:0%
threads in particular today's topic
 

00:01:09.439 --> 00:01:11.429 align:start position:0%
threads in particular today's topic
are<00:01:09.680><c> sometimes</c><00:01:10.159><c> used</c><00:01:10.479><c> as</c><00:01:10.560><c> a</c><00:01:10.720><c> way</c><00:01:10.960><c> to</c><00:01:11.200><c> help</c>

00:01:11.429 --> 00:01:11.439 align:start position:0%
are sometimes used as a way to help
 

00:01:11.439 --> 00:01:13.750 align:start position:0%
are sometimes used as a way to help
people<00:01:11.840><c> to</c><00:01:11.920><c> help</c><00:01:12.240><c> programmers</c>

00:01:13.750 --> 00:01:13.760 align:start position:0%
people to help programmers
 

00:01:13.760 --> 00:01:15.830 align:start position:0%
people to help programmers
put<00:01:13.920><c> together</c><00:01:14.320><c> a</c><00:01:14.400><c> program</c><00:01:14.880><c> in</c><00:01:15.200><c> a</c><00:01:15.280><c> sort</c><00:01:15.439><c> of</c>

00:01:15.830 --> 00:01:15.840 align:start position:0%
put together a program in a sort of
 

00:01:15.840 --> 00:01:18.310 align:start position:0%
put together a program in a sort of
simple<00:01:16.159><c> elegant</c><00:01:16.560><c> way</c><00:01:16.880><c> to</c><00:01:17.040><c> reduce</c><00:01:17.360><c> complexity</c>

00:01:18.310 --> 00:01:18.320 align:start position:0%
simple elegant way to reduce complexity
 

00:01:18.320 --> 00:01:19.830 align:start position:0%
simple elegant way to reduce complexity
and<00:01:18.479><c> you</c><00:01:18.560><c> actually</c><00:01:18.799><c> saw</c><00:01:18.960><c> an</c><00:01:19.119><c> example</c><00:01:19.520><c> of</c><00:01:19.600><c> this</c>

00:01:19.830 --> 00:01:19.840 align:start position:0%
and you actually saw an example of this
 

00:01:19.840 --> 00:01:21.590 align:start position:0%
and you actually saw an example of this
in<00:01:19.920><c> the</c><00:01:20.000><c> first</c><00:01:20.320><c> lab</c><00:01:20.640><c> with</c><00:01:20.799><c> the</c><00:01:20.960><c> prime</c><00:01:21.280><c> number</c>

00:01:21.590 --> 00:01:21.600 align:start position:0%
in the first lab with the prime number
 

00:01:21.600 --> 00:01:23.109 align:start position:0%
in the first lab with the prime number
sieve<00:01:22.000><c> which</c>

00:01:23.109 --> 00:01:23.119 align:start position:0%
sieve which
 

00:01:23.119 --> 00:01:24.710 align:start position:0%
sieve which
didn't<00:01:23.360><c> use</c><00:01:23.520><c> threads</c><00:01:23.920><c> exactly</c><00:01:24.240><c> but</c><00:01:24.479><c> used</c>

00:01:24.710 --> 00:01:24.720 align:start position:0%
didn't use threads exactly but used
 

00:01:24.720 --> 00:01:26.870 align:start position:0%
didn't use threads exactly but used
multiple<00:01:25.200><c> processes</c><00:01:26.000><c> in</c><00:01:26.159><c> order</c><00:01:26.400><c> to</c><00:01:26.560><c> help</c>

00:01:26.870 --> 00:01:26.880 align:start position:0%
multiple processes in order to help
 

00:01:26.880 --> 00:01:30.149 align:start position:0%
multiple processes in order to help
structure<00:01:28.240><c> this</c><00:01:29.040><c> your</c><00:01:29.280><c> prime</c><00:01:29.520><c> numbers</c>

00:01:30.149 --> 00:01:30.159 align:start position:0%
structure this your prime numbers
 

00:01:30.159 --> 00:01:31.749 align:start position:0%
structure this your prime numbers
software<00:01:30.560><c> and</c><00:01:30.640><c> arguably</c><00:01:31.119><c> it's</c><00:01:31.280><c> sort</c><00:01:31.439><c> of</c><00:01:31.600><c> a</c>

00:01:31.749 --> 00:01:31.759 align:start position:0%
software and arguably it's sort of a
 

00:01:31.759 --> 00:01:34.550 align:start position:0%
software and arguably it's sort of a
more<00:01:32.960><c> convenient</c><00:01:33.520><c> or</c><00:01:33.680><c> elegant</c><00:01:34.079><c> or</c><00:01:34.159><c> simpler</c>

00:01:34.550 --> 00:01:34.560 align:start position:0%
more convenient or elegant or simpler
 

00:01:34.560 --> 00:01:35.830 align:start position:0%
more convenient or elegant or simpler
way<00:01:34.799><c> to</c>

00:01:35.830 --> 00:01:35.840 align:start position:0%
way to
 

00:01:35.840 --> 00:01:38.870 align:start position:0%
way to
write<00:01:36.079><c> that</c><00:01:36.240><c> software</c><00:01:38.000><c> and</c><00:01:38.159><c> a</c><00:01:38.240><c> final</c><00:01:38.560><c> reason</c>

00:01:38.870 --> 00:01:38.880 align:start position:0%
write that software and a final reason
 

00:01:38.880 --> 00:01:39.670 align:start position:0%
write that software and a final reason
why<00:01:39.119><c> people</c><00:01:39.360><c> use</c>

00:01:39.670 --> 00:01:39.680 align:start position:0%
why people use
 

00:01:39.680 --> 00:01:43.109 align:start position:0%
why people use
threads<00:01:40.400><c> is</c><00:01:40.880><c> to</c><00:01:41.680><c> get</c><00:01:42.000><c> parallel</c><00:01:42.479><c> speed</c><00:01:42.799><c> up</c><00:01:42.960><c> from</c>

00:01:43.109 --> 00:01:43.119 align:start position:0%
threads is to get parallel speed up from
 

00:01:43.119 --> 00:01:45.350 align:start position:0%
threads is to get parallel speed up from
multi-core<00:01:43.680><c> machines</c>

00:01:45.350 --> 00:01:45.360 align:start position:0%
multi-core machines
 

00:01:45.360 --> 00:01:47.990 align:start position:0%
multi-core machines
so<00:01:45.520><c> it's</c><00:01:45.680><c> common</c><00:01:46.079><c> to</c><00:01:46.720><c> break</c><00:01:47.040><c> up</c><00:01:47.200><c> your</c><00:01:47.360><c> program</c>

00:01:47.990 --> 00:01:48.000 align:start position:0%
so it's common to break up your program
 

00:01:48.000 --> 00:01:49.910 align:start position:0%
so it's common to break up your program
in<00:01:48.159><c> a</c><00:01:48.240><c> way</c><00:01:48.479><c> that</c>

00:01:49.910 --> 00:01:49.920 align:start position:0%
in a way that
 

00:01:49.920 --> 00:01:52.710 align:start position:0%
in a way that
using<00:01:50.320><c> threads</c><00:01:50.960><c> to</c><00:01:51.600><c> allow</c><00:01:52.000><c> different</c><00:01:52.240><c> parts</c>

00:01:52.710 --> 00:01:52.720 align:start position:0%
using threads to allow different parts
 

00:01:52.720 --> 00:01:53.990 align:start position:0%
using threads to allow different parts
of<00:01:52.880><c> the</c><00:01:52.960><c> same</c><00:01:53.200><c> program</c><00:01:53.600><c> to</c><00:01:53.759><c> run</c>

00:01:53.990 --> 00:01:54.000 align:start position:0%
of the same program to run
 

00:01:54.000 --> 00:01:55.830 align:start position:0%
of the same program to run
on<00:01:54.079><c> different</c><00:01:54.399><c> cores</c><00:01:55.040><c> and</c><00:01:55.439><c> you</c><00:01:55.520><c> know</c><00:01:55.600><c> if</c><00:01:55.680><c> you</c>

00:01:55.830 --> 00:01:55.840 align:start position:0%
on different cores and you know if you
 

00:01:55.840 --> 00:01:58.310 align:start position:0%
on different cores and you know if you
can<00:01:56.560><c> maybe</c><00:01:56.880><c> if</c><00:01:56.960><c> you're</c><00:01:57.119><c> lucky</c><00:01:57.520><c> if</c><00:01:57.680><c> you</c><00:01:57.759><c> can</c>

00:01:58.310 --> 00:01:58.320 align:start position:0%
can maybe if you're lucky if you can
 

00:01:58.320 --> 00:02:00.310 align:start position:0%
can maybe if you're lucky if you can
split<00:01:58.640><c> your</c><00:01:58.799><c> program</c><00:01:59.200><c> up</c><00:01:59.280><c> to</c><00:01:59.439><c> run</c><00:01:59.759><c> on</c><00:02:00.079><c> four</c>

00:02:00.310 --> 00:02:00.320 align:start position:0%
split your program up to run on four
 

00:02:00.320 --> 00:02:01.749 align:start position:0%
split your program up to run on four
threads<00:02:00.640><c> on</c><00:02:00.799><c> four</c><00:02:01.119><c> cores</c>

00:02:01.749 --> 00:02:01.759 align:start position:0%
threads on four cores
 

00:02:01.759 --> 00:02:03.190 align:start position:0%
threads on four cores
you<00:02:01.920><c> might</c><00:02:02.079><c> be</c><00:02:02.240><c> able</c><00:02:02.399><c> to</c><00:02:02.479><c> get</c><00:02:02.640><c> a</c><00:02:02.719><c> factor</c><00:02:03.040><c> of</c>

00:02:03.190 --> 00:02:03.200 align:start position:0%
you might be able to get a factor of
 

00:02:03.200 --> 00:02:06.709 align:start position:0%
you might be able to get a factor of
four<00:02:03.520><c> speed</c><00:02:03.840><c> up</c><00:02:04.079><c> and</c><00:02:04.159><c> how</c><00:02:04.320><c> fast</c><00:02:04.640><c> it</c><00:02:04.799><c> runs</c>

00:02:06.709 --> 00:02:06.719 align:start position:0%
four speed up and how fast it runs
 

00:02:06.719 --> 00:02:08.790 align:start position:0%
four speed up and how fast it runs
and<00:02:06.880><c> indeed</c><00:02:07.200><c> you</c><00:02:07.360><c> can</c><00:02:07.439><c> view</c><00:02:07.680><c> the</c><00:02:07.759><c> xv6</c><00:02:08.319><c> kernel</c>

00:02:08.790 --> 00:02:08.800 align:start position:0%
and indeed you can view the xv6 kernel
 

00:02:08.800 --> 00:02:09.990 align:start position:0%
and indeed you can view the xv6 kernel
as<00:02:09.679><c> a</c>

00:02:09.990 --> 00:02:10.000 align:start position:0%
as a
 

00:02:10.000 --> 00:02:13.990 align:start position:0%
as a
multi-core<00:02:10.800><c> parallel</c><00:02:11.280><c> program</c><00:02:12.800><c> so</c>

00:02:13.990 --> 00:02:14.000 align:start position:0%
multi-core parallel program so
 

00:02:14.000 --> 00:02:17.110 align:start position:0%
multi-core parallel program so
what<00:02:14.239><c> threads</c><00:02:14.720><c> are</c><00:02:15.040><c> is</c><00:02:15.280><c> an</c><00:02:15.440><c> abstraction</c>

00:02:17.110 --> 00:02:17.120 align:start position:0%
what threads are is an abstraction
 

00:02:17.120 --> 00:02:19.750 align:start position:0%
what threads are is an abstraction
to<00:02:17.280><c> simplify</c><00:02:17.840><c> programming</c><00:02:18.879><c> uh</c><00:02:19.280><c> when</c><00:02:19.440><c> you</c><00:02:19.520><c> have</c>

00:02:19.750 --> 00:02:19.760 align:start position:0%
to simplify programming uh when you have
 

00:02:19.760 --> 00:02:21.830 align:start position:0%
to simplify programming uh when you have
many<00:02:20.080><c> tasks</c><00:02:20.560><c> when</c><00:02:20.720><c> you</c><00:02:20.800><c> want</c><00:02:20.959><c> to</c><00:02:21.120><c> juggle</c><00:02:21.440><c> many</c>

00:02:21.830 --> 00:02:21.840 align:start position:0%
many tasks when you want to juggle many
 

00:02:21.840 --> 00:02:22.630 align:start position:0%
many tasks when you want to juggle many
tasks

00:02:22.630 --> 00:02:22.640 align:start position:0%
tasks
 

00:02:22.640 --> 00:02:25.350 align:start position:0%
tasks
so<00:02:23.120><c> what</c><00:02:23.280><c> a</c><00:02:23.360><c> thread</c><00:02:23.760><c> is</c><00:02:24.000><c> is</c><00:02:24.160><c> a</c><00:02:24.879><c> you</c><00:02:25.040><c> can</c><00:02:25.120><c> think</c>

00:02:25.350 --> 00:02:25.360 align:start position:0%
so what a thread is is a you can think
 

00:02:25.360 --> 00:02:26.949 align:start position:0%
so what a thread is is a you can think
of<00:02:25.520><c> a</c><00:02:25.599><c> thread</c><00:02:26.000><c> as</c><00:02:26.319><c> just</c><00:02:26.480><c> being</c>

00:02:26.949 --> 00:02:26.959 align:start position:0%
of a thread as just being
 

00:02:26.959 --> 00:02:29.270 align:start position:0%
of a thread as just being
a<00:02:27.200><c> single</c><00:02:27.680><c> serial</c><00:02:28.319><c> execution</c><00:02:28.879><c> if</c><00:02:29.040><c> you</c><00:02:29.120><c> just</c>

00:02:29.270 --> 00:02:29.280 align:start position:0%
a single serial execution if you just
 

00:02:29.280 --> 00:02:30.630 align:start position:0%
a single serial execution if you just
write<00:02:29.520><c> a</c><00:02:29.599><c> program</c><00:02:29.920><c> that</c><00:02:30.080><c> does</c><00:02:30.239><c> one</c><00:02:30.400><c> thing</c>

00:02:30.630 --> 00:02:30.640 align:start position:0%
write a program that does one thing
 

00:02:30.640 --> 00:02:33.670 align:start position:0%
write a program that does one thing
after<00:02:30.879><c> another</c><00:02:31.280><c> and</c><00:02:31.440><c> you</c><00:02:31.519><c> run</c><00:02:31.680><c> that</c><00:02:31.920><c> program</c>

00:02:33.670 --> 00:02:33.680 align:start position:0%
after another and you run that program
 

00:02:33.680 --> 00:02:35.190 align:start position:0%
after another and you run that program
that<00:02:34.080><c> you</c><00:02:34.160><c> know</c><00:02:34.319><c> you</c><00:02:34.400><c> can</c><00:02:34.560><c> view</c><00:02:34.800><c> the</c><00:02:34.879><c> program</c>

00:02:35.190 --> 00:02:35.200 align:start position:0%
that you know you can view the program
 

00:02:35.200 --> 00:02:38.390 align:start position:0%
that you know you can view the program
as<00:02:35.360><c> a</c><00:02:35.440><c> sort</c><00:02:35.599><c> of</c><00:02:35.840><c> single</c><00:02:36.239><c> thread</c><00:02:36.640><c> of</c><00:02:36.800><c> control</c>

00:02:38.390 --> 00:02:38.400 align:start position:0%
as a sort of single thread of control
 

00:02:38.400 --> 00:02:44.070 align:start position:0%
as a sort of single thread of control
so<00:02:39.360><c> um</c><00:02:40.080><c> and</c><00:02:40.239><c> this</c><00:02:40.400><c> is</c><00:02:40.480><c> a</c><00:02:40.640><c> loose</c><00:02:40.959><c> definition</c>

00:02:44.070 --> 00:02:44.080 align:start position:0%
 
 

00:02:44.080 --> 00:02:45.990 align:start position:0%
 
because<00:02:44.480><c> there's</c><00:02:44.640><c> many</c><00:02:44.959><c> different</c><00:02:45.680><c> sort</c><00:02:45.840><c> of</c>

00:02:45.990 --> 00:02:46.000 align:start position:0%
because there's many different sort of
 

00:02:46.000 --> 00:02:47.750 align:start position:0%
because there's many different sort of
flavors<00:02:46.480><c> of</c><00:02:46.560><c> what</c><00:02:46.720><c> people</c><00:02:46.879><c> mean</c><00:02:47.040><c> by</c><00:02:47.280><c> threads</c>

00:02:47.750 --> 00:02:47.760 align:start position:0%
flavors of what people mean by threads
 

00:02:47.760 --> 00:02:51.430 align:start position:0%
flavors of what people mean by threads
but<00:02:49.200><c> we'll</c><00:02:49.360><c> say</c><00:02:49.519><c> it's</c><00:02:49.760><c> one</c>

00:02:51.430 --> 00:02:51.440 align:start position:0%
but we'll say it's one
 

00:02:51.440 --> 00:02:54.790 align:start position:0%
but we'll say it's one
serial<00:02:52.080><c> execution</c><00:02:53.280><c> so</c><00:02:53.680><c> it's</c><00:02:53.920><c> what</c><00:02:54.080><c> you</c><00:02:54.239><c> get</c><00:02:54.560><c> if</c>

00:02:54.790 --> 00:02:54.800 align:start position:0%
serial execution so it's what you get if
 

00:02:54.800 --> 00:02:55.509 align:start position:0%
serial execution so it's what you get if
you

00:02:55.509 --> 00:02:55.519 align:start position:0%
you
 

00:02:55.519 --> 00:02:59.670 align:start position:0%
you
um<00:02:56.959><c> fire</c><00:02:57.360><c> up</c><00:02:57.599><c> one</c><00:02:58.319><c> cpu</c><00:02:58.879><c> and</c><00:02:59.040><c> have</c><00:02:59.200><c> it</c><00:02:59.440><c> you</c><00:02:59.519><c> know</c>

00:02:59.670 --> 00:02:59.680 align:start position:0%
um fire up one cpu and have it you know
 

00:02:59.680 --> 00:03:01.110 align:start position:0%
um fire up one cpu and have it you know
just<00:02:59.840><c> execute</c><00:03:00.239><c> one</c><00:03:00.480><c> instruction</c><00:03:00.959><c> after</c>

00:03:01.110 --> 00:03:01.120 align:start position:0%
just execute one instruction after
 

00:03:01.120 --> 00:03:05.509 align:start position:0%
just execute one instruction after
another<00:03:01.519><c> in</c><00:03:01.599><c> the</c><00:03:01.680><c> ordinary</c><00:03:02.840><c> way</c>

00:03:05.509 --> 00:03:05.519 align:start position:0%
another in the ordinary way
 

00:03:05.519 --> 00:03:07.110 align:start position:0%
another in the ordinary way
we<00:03:05.760><c> often</c><00:03:06.000><c> talk</c><00:03:06.239><c> about</c><00:03:06.400><c> a</c><00:03:06.480><c> thread</c><00:03:06.720><c> having</c>

00:03:07.110 --> 00:03:07.120 align:start position:0%
we often talk about a thread having
 

00:03:07.120 --> 00:03:08.710 align:start position:0%
we often talk about a thread having
state<00:03:07.680><c> because</c><00:03:07.920><c> it's</c><00:03:08.080><c> going</c><00:03:08.159><c> to</c><00:03:08.319><c> turn</c><00:03:08.560><c> out</c>

00:03:08.710 --> 00:03:08.720 align:start position:0%
state because it's going to turn out
 

00:03:08.720 --> 00:03:10.070 align:start position:0%
state because it's going to turn out
we're<00:03:08.879><c> going</c><00:03:09.040><c> to</c><00:03:09.120><c> want</c><00:03:09.280><c> to</c><00:03:09.440><c> save</c><00:03:09.680><c> away</c><00:03:10.000><c> a</c>

00:03:10.070 --> 00:03:10.080 align:start position:0%
we're going to want to save away a
 

00:03:10.080 --> 00:03:12.949 align:start position:0%
we're going to want to save away a
thread<00:03:10.400><c> state</c><00:03:10.720><c> and</c><00:03:10.879><c> restore</c><00:03:11.200><c> it</c><00:03:11.360><c> later</c>

00:03:12.949 --> 00:03:12.959 align:start position:0%
thread state and restore it later
 

00:03:12.959 --> 00:03:15.030 align:start position:0%
thread state and restore it later
and<00:03:13.360><c> so</c><00:03:14.159><c> the</c><00:03:14.319><c> right</c><00:03:14.480><c> way</c><00:03:14.640><c> to</c><00:03:14.720><c> think</c><00:03:14.800><c> about</c><00:03:14.959><c> a</c>

00:03:15.030 --> 00:03:15.040 align:start position:0%
and so the right way to think about a
 

00:03:15.040 --> 00:03:17.030 align:start position:0%
and so the right way to think about a
threat<00:03:15.360><c> state</c><00:03:15.519><c> for</c><00:03:15.680><c> the</c><00:03:15.840><c> most</c><00:03:16.159><c> part</c>

00:03:17.030 --> 00:03:17.040 align:start position:0%
threat state for the most part
 

00:03:17.040 --> 00:03:19.110 align:start position:0%
threat state for the most part
the<00:03:17.200><c> most</c><00:03:17.519><c> important</c><00:03:18.400><c> part</c><00:03:18.640><c> perhaps</c><00:03:18.959><c> the</c>

00:03:19.110 --> 00:03:19.120 align:start position:0%
the most important part perhaps the
 

00:03:19.120 --> 00:03:21.509 align:start position:0%
the most important part perhaps the
thread<00:03:19.440><c> state</c><00:03:19.760><c> is</c><00:03:19.920><c> its</c><00:03:20.159><c> program</c><00:03:20.640><c> counter</c>

00:03:21.509 --> 00:03:21.519 align:start position:0%
thread state is its program counter
 

00:03:21.519 --> 00:03:23.350 align:start position:0%
thread state is its program counter
because<00:03:21.840><c> it's</c><00:03:22.000><c> an</c><00:03:22.159><c> execution</c><00:03:22.720><c> we</c><00:03:22.879><c> care</c><00:03:23.120><c> a</c><00:03:23.200><c> lot</c>

00:03:23.350 --> 00:03:23.360 align:start position:0%
because it's an execution we care a lot
 

00:03:23.360 --> 00:03:25.670 align:start position:0%
because it's an execution we care a lot
about<00:03:23.680><c> where</c><00:03:24.000><c> is</c><00:03:24.159><c> it</c><00:03:24.480><c> in</c><00:03:24.640><c> its</c><00:03:24.799><c> execution</c>

00:03:25.670 --> 00:03:25.680 align:start position:0%
about where is it in its execution
 

00:03:25.680 --> 00:03:27.190 align:start position:0%
about where is it in its execution
and<00:03:25.840><c> what</c><00:03:26.000><c> address</c><00:03:26.400><c> is</c><00:03:26.560><c> it</c><00:03:26.720><c> executing</c>

00:03:27.190 --> 00:03:27.200 align:start position:0%
and what address is it executing
 

00:03:27.200 --> 00:03:28.949 align:start position:0%
and what address is it executing
instructions

00:03:28.949 --> 00:03:28.959 align:start position:0%
instructions
 

00:03:28.959 --> 00:03:31.670 align:start position:0%
instructions
but<00:03:29.200><c> also</c><00:03:30.400><c> we</c><00:03:30.560><c> care</c><00:03:30.799><c> about</c><00:03:30.959><c> the</c><00:03:31.200><c> rest</c><00:03:31.440><c> of</c><00:03:31.519><c> the</c>

00:03:31.670 --> 00:03:31.680 align:start position:0%
but also we care about the rest of the
 

00:03:31.680 --> 00:03:33.509 align:start position:0%
but also we care about the rest of the
microprocessor<00:03:32.480><c> state</c><00:03:32.799><c> that's</c><00:03:33.040><c> required</c><00:03:33.360><c> to</c>

00:03:33.509 --> 00:03:33.519 align:start position:0%
microprocessor state that's required to
 

00:03:33.519 --> 00:03:35.110 align:start position:0%
microprocessor state that's required to
support<00:03:33.920><c> this</c><00:03:34.159><c> execution</c>

00:03:35.110 --> 00:03:35.120 align:start position:0%
support this execution
 

00:03:35.120 --> 00:03:38.390 align:start position:0%
support this execution
and<00:03:35.280><c> so</c><00:03:35.440><c> that</c><00:03:35.599><c> means</c><00:03:35.840><c> it's</c><00:03:36.560><c> um</c>

00:03:38.390 --> 00:03:38.400 align:start position:0%
and so that means it's um
 

00:03:38.400 --> 00:03:40.070 align:start position:0%
and so that means it's um
the<00:03:38.959><c> state</c><00:03:39.200><c> of</c><00:03:39.360><c> a</c><00:03:39.440><c> threat</c><00:03:39.680><c> includes</c><00:03:40.000><c> the</c>

00:03:40.070 --> 00:03:40.080 align:start position:0%
the state of a threat includes the
 

00:03:40.080 --> 00:03:42.229 align:start position:0%
the state of a threat includes the
registers<00:03:40.799><c> that</c><00:03:40.959><c> the</c><00:03:41.040><c> compiler</c><00:03:41.519><c> uses</c><00:03:41.840><c> to</c><00:03:41.920><c> hold</c>

00:03:42.229 --> 00:03:42.239 align:start position:0%
registers that the compiler uses to hold
 

00:03:42.239 --> 00:03:43.350 align:start position:0%
registers that the compiler uses to hold
variables

00:03:43.350 --> 00:03:43.360 align:start position:0%
variables
 

00:03:43.360 --> 00:03:45.430 align:start position:0%
variables
and<00:03:43.519><c> also</c><00:03:43.840><c> because</c><00:03:44.239><c> the</c><00:03:44.959><c> just</c><00:03:45.120><c> the</c><00:03:45.200><c> way</c><00:03:45.360><c> the</c>

00:03:45.430 --> 00:03:45.440 align:start position:0%
and also because the just the way the
 

00:03:45.440 --> 00:03:47.270 align:start position:0%
and also because the just the way the
compiler<00:03:45.840><c> generates</c><00:03:46.319><c> code</c>

00:03:47.270 --> 00:03:47.280 align:start position:0%
compiler generates code
 

00:03:47.280 --> 00:03:50.949 align:start position:0%
compiler generates code
a<00:03:47.360><c> thread</c><00:03:47.680><c> state</c><00:03:48.080><c> includes</c><00:03:48.400><c> a</c><00:03:48.560><c> stack</c><00:03:50.159><c> so</c>

00:03:50.949 --> 00:03:50.959 align:start position:0%
a thread state includes a stack so
 

00:03:50.959 --> 00:03:53.110 align:start position:0%
a thread state includes a stack so
typically<00:03:51.519><c> each</c><00:03:51.840><c> thread</c><00:03:52.080><c> has</c><00:03:52.319><c> its</c><00:03:52.480><c> own</c><00:03:52.720><c> stack</c>

00:03:53.110 --> 00:03:53.120 align:start position:0%
typically each thread has its own stack
 

00:03:53.120 --> 00:03:54.710 align:start position:0%
typically each thread has its own stack
dedicated<00:03:53.599><c> to</c><00:03:53.680><c> executing</c><00:03:54.159><c> that</c><00:03:54.319><c> thread</c><00:03:54.640><c> and</c>

00:03:54.710 --> 00:03:54.720 align:start position:0%
dedicated to executing that thread and
 

00:03:54.720 --> 00:03:56.229 align:start position:0%
dedicated to executing that thread and
the<00:03:54.799><c> stack</c><00:03:55.200><c> records</c>

00:03:56.229 --> 00:03:56.239 align:start position:0%
the stack records
 

00:03:56.239 --> 00:04:01.350 align:start position:0%
the stack records
the<00:03:56.400><c> record</c><00:03:56.799><c> of</c><00:03:56.879><c> function</c><00:03:58.840><c> calls</c><00:03:59.920><c> uh</c><00:04:00.159><c> that</c><00:04:00.319><c> the</c>

00:04:01.350 --> 00:04:01.360 align:start position:0%
the record of function calls uh that the
 

00:04:01.360 --> 00:04:02.630 align:start position:0%
the record of function calls uh that the
reflect<00:04:01.760><c> the</c><00:04:01.840><c> current</c><00:04:02.159><c> point</c><00:04:02.480><c> in</c><00:04:02.560><c> the</c>

00:04:02.630 --> 00:04:02.640 align:start position:0%
reflect the current point in the
 

00:04:02.640 --> 00:04:05.110 align:start position:0%
reflect the current point in the
execution<00:04:03.280><c> of</c><00:04:03.680><c> of</c><00:04:03.840><c> that</c><00:04:04.000><c> thread</c>

00:04:05.110 --> 00:04:05.120 align:start position:0%
execution of of that thread
 

00:04:05.120 --> 00:04:07.670 align:start position:0%
execution of of that thread
um<00:04:05.519><c> and</c><00:04:05.680><c> so</c><00:04:05.840><c> what</c><00:04:06.000><c> a</c><00:04:06.159><c> threading</c><00:04:06.640><c> system</c><00:04:07.120><c> xv6</c>

00:04:07.670 --> 00:04:07.680 align:start position:0%
um and so what a threading system xv6
 

00:04:07.680 --> 00:04:08.630 align:start position:0%
um and so what a threading system xv6
includes

00:04:08.630 --> 00:04:08.640 align:start position:0%
includes
 

00:04:08.640 --> 00:04:10.229 align:start position:0%
includes
you<00:04:08.720><c> know</c><00:04:08.879><c> a</c><00:04:08.959><c> threading</c><00:04:09.280><c> system</c><00:04:09.599><c> inside</c><00:04:09.920><c> it</c>

00:04:10.229 --> 00:04:10.239 align:start position:0%
you know a threading system inside it
 

00:04:10.239 --> 00:04:11.990 align:start position:0%
you know a threading system inside it
what<00:04:10.400><c> a</c><00:04:10.480><c> threading</c><00:04:10.879><c> system</c><00:04:11.200><c> does</c><00:04:11.439><c> is</c>

00:04:11.990 --> 00:04:12.000 align:start position:0%
what a threading system does is
 

00:04:12.000 --> 00:04:15.509 align:start position:0%
what a threading system does is
manages<00:04:12.959><c> this</c><00:04:13.439><c> interleave</c><00:04:14.799><c> automate</c><00:04:15.280><c> the</c>

00:04:15.509 --> 00:04:15.519 align:start position:0%
manages this interleave automate the
 

00:04:15.519 --> 00:04:16.550 align:start position:0%
manages this interleave automate the
interleaving

00:04:16.550 --> 00:04:16.560 align:start position:0%
interleaving
 

00:04:16.560 --> 00:04:19.110 align:start position:0%
interleaving
of<00:04:16.720><c> multiple</c><00:04:17.280><c> threads</c><00:04:18.479><c> we'd</c><00:04:18.639><c> like</c><00:04:18.799><c> to</c><00:04:18.880><c> be</c><00:04:18.959><c> able</c>

00:04:19.110 --> 00:04:19.120 align:start position:0%
of multiple threads we'd like to be able
 

00:04:19.120 --> 00:04:20.150 align:start position:0%
of multiple threads we'd like to be able
to<00:04:19.199><c> fire</c><00:04:19.519><c> up</c>

00:04:20.150 --> 00:04:20.160 align:start position:0%
to fire up
 

00:04:20.160 --> 00:04:22.710 align:start position:0%
to fire up
two<00:04:20.560><c> or</c><00:04:21.040><c> four</c><00:04:21.280><c> or</c><00:04:21.359><c> 100</c><00:04:21.759><c> or</c><00:04:21.840><c> a</c><00:04:21.919><c> thousand</c><00:04:22.320><c> threads</c>

00:04:22.710 --> 00:04:22.720 align:start position:0%
two or four or 100 or a thousand threads
 

00:04:22.720 --> 00:04:23.430 align:start position:0%
two or four or 100 or a thousand threads
and<00:04:22.880><c> have</c>

00:04:23.430 --> 00:04:23.440 align:start position:0%
and have
 

00:04:23.440 --> 00:04:27.350 align:start position:0%
and have
the<00:04:23.520><c> threading</c><00:04:24.000><c> system</c><00:04:25.360><c> figure</c><00:04:25.680><c> out</c><00:04:26.000><c> how</c><00:04:26.160><c> to</c>

00:04:27.350 --> 00:04:27.360 align:start position:0%
the threading system figure out how to
 

00:04:27.360 --> 00:04:28.790 align:start position:0%
the threading system figure out how to
juggle<00:04:27.680><c> all</c><00:04:27.759><c> those</c><00:04:28.000><c> threads</c><00:04:28.320><c> and</c><00:04:28.400><c> cause</c><00:04:28.639><c> them</c>

00:04:28.790 --> 00:04:28.800 align:start position:0%
juggle all those threads and cause them
 

00:04:28.800 --> 00:04:33.670 align:start position:0%
juggle all those threads and cause them
all<00:04:28.880><c> to</c><00:04:29.040><c> make</c><00:04:29.199><c> progress</c><00:04:29.680><c> and</c><00:04:29.919><c> all</c><00:04:30.080><c> to</c><00:04:30.240><c> execute</c>

00:04:33.670 --> 00:04:33.680 align:start position:0%
 
 

00:04:33.680 --> 00:04:36.790 align:start position:0%
 
and<00:04:33.759><c> there's</c><00:04:34.000><c> really</c><00:04:35.680><c> two</c><00:04:35.840><c> main</c><00:04:36.240><c> strategies</c>

00:04:36.790 --> 00:04:36.800 align:start position:0%
and there's really two main strategies
 

00:04:36.800 --> 00:04:39.749 align:start position:0%
and there's really two main strategies
so<00:04:36.960><c> we</c><00:04:37.040><c> want</c><00:04:37.199><c> to</c><00:04:37.360><c> interleave</c>

00:04:39.749 --> 00:04:39.759 align:start position:0%
so we want to interleave
 

00:04:39.759 --> 00:04:43.350 align:start position:0%
so we want to interleave
this<00:04:39.919><c> is</c><00:04:40.080><c> going</c><00:04:40.160><c> to</c><00:04:40.320><c> be</c><00:04:40.840><c> a</c><00:04:42.560><c> big</c><00:04:42.800><c> topic</c><00:04:43.120><c> here</c><00:04:43.280><c> is</c>

00:04:43.350 --> 00:04:43.360 align:start position:0%
this is going to be a big topic here is
 

00:04:43.360 --> 00:04:45.670 align:start position:0%
this is going to be a big topic here is
how<00:04:43.520><c> to</c><00:04:43.680><c> interleave</c><00:04:44.160><c> threads</c>

00:04:45.670 --> 00:04:45.680 align:start position:0%
how to interleave threads
 

00:04:45.680 --> 00:04:48.870 align:start position:0%
how to interleave threads
many<00:04:46.000><c> threads</c><00:04:47.840><c> one</c><00:04:48.080><c> way</c><00:04:48.240><c> to</c><00:04:48.400><c> enter</c><00:04:48.639><c> these</c>

00:04:48.870 --> 00:04:48.880 align:start position:0%
many threads one way to enter these
 

00:04:48.880 --> 00:04:50.230 align:start position:0%
many threads one way to enter these
execution<00:04:49.280><c> of</c><00:04:49.360><c> many</c><00:04:49.600><c> threads</c><00:04:49.919><c> is</c><00:04:50.000><c> to</c><00:04:50.160><c> have</c>

00:04:50.230 --> 00:04:50.240 align:start position:0%
execution of many threads is to have
 

00:04:50.240 --> 00:04:55.030 align:start position:0%
execution of many threads is to have
multiple<00:04:50.720><c> cpus</c>

00:04:55.030 --> 00:04:55.040 align:start position:0%
 
 

00:04:55.040 --> 00:04:58.469 align:start position:0%
 
maybe<00:04:55.520><c> as</c><00:04:56.320><c> on</c><00:04:56.479><c> a</c><00:04:56.639><c> multi-core</c><00:04:57.199><c> processor</c>

00:04:58.469 --> 00:04:58.479 align:start position:0%
maybe as on a multi-core processor
 

00:04:58.479 --> 00:05:00.629 align:start position:0%
maybe as on a multi-core processor
and<00:04:58.560><c> then</c><00:04:58.880><c> each</c><00:04:59.360><c> cpu</c><00:04:59.759><c> can</c><00:04:59.919><c> run</c><00:05:00.160><c> its</c><00:05:00.320><c> own</c><00:05:00.400><c> thread</c>

00:05:00.629 --> 00:05:00.639 align:start position:0%
and then each cpu can run its own thread
 

00:05:00.639 --> 00:05:02.310 align:start position:0%
and then each cpu can run its own thread
so<00:05:00.800><c> if</c><00:05:00.960><c> you</c><00:05:01.039><c> have</c><00:05:01.120><c> four</c><00:05:01.360><c> cpus</c>

00:05:02.310 --> 00:05:02.320 align:start position:0%
so if you have four cpus
 

00:05:02.320 --> 00:05:05.029 align:start position:0%
so if you have four cpus
then<00:05:02.560><c> an</c><00:05:02.720><c> obvious</c><00:05:03.120><c> way</c><00:05:03.280><c> to</c><00:05:03.440><c> run</c><00:05:04.160><c> sorry</c><00:05:04.800><c> four</c>

00:05:05.029 --> 00:05:05.039 align:start position:0%
then an obvious way to run sorry four
 

00:05:05.039 --> 00:05:07.029 align:start position:0%
then an obvious way to run sorry four
threads<00:05:05.440><c> is</c><00:05:05.520><c> to</c><00:05:05.680><c> run</c><00:05:05.919><c> one</c><00:05:06.080><c> thread</c><00:05:06.320><c> per</c><00:05:06.479><c> cpu</c><00:05:06.960><c> and</c>

00:05:07.029 --> 00:05:07.039 align:start position:0%
threads is to run one thread per cpu and
 

00:05:07.039 --> 00:05:08.870 align:start position:0%
threads is to run one thread per cpu and
then<00:05:07.199><c> each</c><00:05:07.520><c> thread</c><00:05:07.840><c> automatically</c><00:05:08.400><c> gets</c><00:05:08.639><c> its</c>

00:05:08.870 --> 00:05:08.880 align:start position:0%
then each thread automatically gets its
 

00:05:08.880 --> 00:05:09.590 align:start position:0%
then each thread automatically gets its
own

00:05:09.590 --> 00:05:09.600 align:start position:0%
own
 

00:05:09.600 --> 00:05:11.510 align:start position:0%
own
program<00:05:09.919><c> counter</c><00:05:10.240><c> and</c><00:05:10.400><c> registers</c><00:05:10.960><c> that</c><00:05:11.199><c> is</c>

00:05:11.510 --> 00:05:11.520 align:start position:0%
program counter and registers that is
 

00:05:11.520 --> 00:05:12.790 align:start position:0%
program counter and registers that is
the<00:05:11.680><c> program</c><00:05:12.000><c> counter</c><00:05:12.240><c> and</c><00:05:12.400><c> registers</c>

00:05:12.790 --> 00:05:12.800 align:start position:0%
the program counter and registers
 

00:05:12.800 --> 00:05:14.230 align:start position:0%
the program counter and registers
associated<00:05:13.280><c> with</c><00:05:13.440><c> the</c>

00:05:14.230 --> 00:05:14.240 align:start position:0%
associated with the
 

00:05:14.240 --> 00:05:16.310 align:start position:0%
associated with the
cpu<00:05:14.639><c> is</c><00:05:14.720><c> running</c><00:05:15.039><c> on</c><00:05:15.680><c> but</c><00:05:15.840><c> if</c><00:05:15.919><c> you</c><00:05:16.080><c> have</c><00:05:16.160><c> four</c>

00:05:16.310 --> 00:05:16.320 align:start position:0%
cpu is running on but if you have four
 

00:05:16.320 --> 00:05:18.790 align:start position:0%
cpu is running on but if you have four
cpus<00:05:16.960><c> and</c><00:05:17.039><c> you</c><00:05:17.120><c> have</c><00:05:17.280><c> a</c><00:05:17.360><c> thousand</c><00:05:17.759><c> threads</c>

00:05:18.790 --> 00:05:18.800 align:start position:0%
cpus and you have a thousand threads
 

00:05:18.800 --> 00:05:21.830 align:start position:0%
cpus and you have a thousand threads
then<00:05:19.360><c> um</c>

00:05:21.830 --> 00:05:21.840 align:start position:0%
 
 

00:05:21.840 --> 00:05:24.390 align:start position:0%
 
you<00:05:21.919><c> know</c><00:05:22.000><c> how</c><00:05:22.320><c> using</c><00:05:22.639><c> one</c><00:05:22.880><c> corporate</c><00:05:23.199><c> thread</c>

00:05:24.390 --> 00:05:24.400 align:start position:0%
you know how using one corporate thread
 

00:05:24.400 --> 00:05:25.189 align:start position:0%
you know how using one corporate thread
is<00:05:24.560><c> not</c><00:05:24.720><c> going</c><00:05:24.800><c> to</c><00:05:24.880><c> be</c>

00:05:25.189 --> 00:05:25.199 align:start position:0%
is not going to be
 

00:05:25.199 --> 00:05:27.670 align:start position:0%
is not going to be
enough<00:05:25.520><c> of</c><00:05:25.600><c> an</c><00:05:25.840><c> answer</c><00:05:26.400><c> and</c><00:05:26.560><c> so</c><00:05:26.800><c> so</c><00:05:26.960><c> the</c><00:05:27.280><c> other</c>

00:05:27.670 --> 00:05:27.680 align:start position:0%
enough of an answer and so so the other
 

00:05:27.680 --> 00:05:28.310 align:start position:0%
enough of an answer and so so the other
main

00:05:28.310 --> 00:05:28.320 align:start position:0%
main
 

00:05:28.320 --> 00:05:31.830 align:start position:0%
main
strategy<00:05:28.800><c> that</c><00:05:28.960><c> we'll</c><00:05:29.199><c> see</c><00:05:30.560><c> indeed</c><00:05:30.880><c> the</c>

00:05:31.830 --> 00:05:31.840 align:start position:0%
strategy that we'll see indeed the
 

00:05:31.840 --> 00:05:35.029 align:start position:0%
strategy that we'll see indeed the
topic<00:05:32.240><c> of</c><00:05:32.639><c> most</c><00:05:32.880><c> of</c><00:05:32.960><c> this</c><00:05:33.120><c> lecture</c><00:05:33.919><c> is</c><00:05:34.639><c> how</c>

00:05:35.029 --> 00:05:35.039 align:start position:0%
topic of most of this lecture is how
 

00:05:35.039 --> 00:05:38.390 align:start position:0%
topic of most of this lecture is how
each<00:05:35.360><c> cpu</c><00:05:36.400><c> is</c><00:05:36.560><c> going</c><00:05:36.720><c> to</c><00:05:37.039><c> switch</c>

00:05:38.390 --> 00:05:38.400 align:start position:0%
each cpu is going to switch
 

00:05:38.400 --> 00:05:41.830 align:start position:0%
each cpu is going to switch
among<00:05:39.039><c> different</c><00:05:39.680><c> um</c><00:05:40.560><c> threads</c><00:05:41.280><c> so</c><00:05:41.520><c> if</c><00:05:41.600><c> i</c><00:05:41.680><c> have</c>

00:05:41.830 --> 00:05:41.840 align:start position:0%
among different um threads so if i have
 

00:05:41.840 --> 00:05:43.909 align:start position:0%
among different um threads so if i have
one<00:05:42.000><c> cpu</c><00:05:42.400><c> and</c><00:05:42.479><c> a</c><00:05:42.560><c> thousand</c><00:05:42.960><c> threads</c>

00:05:43.909 --> 00:05:43.919 align:start position:0%
one cpu and a thousand threads
 

00:05:43.919 --> 00:05:45.270 align:start position:0%
one cpu and a thousand threads
we're<00:05:44.080><c> going</c><00:05:44.160><c> to</c><00:05:44.479><c> we're</c><00:05:44.639><c> going</c><00:05:44.720><c> to</c><00:05:44.880><c> see</c><00:05:45.039><c> how</c>

00:05:45.270 --> 00:05:45.280 align:start position:0%
we're going to we're going to see how
 

00:05:45.280 --> 00:05:47.909 align:start position:0%
we're going to we're going to see how
xv6<00:05:45.919><c> builds</c><00:05:46.400><c> a</c><00:05:46.720><c> switching</c><00:05:47.199><c> system</c>

00:05:47.909 --> 00:05:47.919 align:start position:0%
xv6 builds a switching system
 

00:05:47.919 --> 00:05:49.830 align:start position:0%
xv6 builds a switching system
that<00:05:48.160><c> allows</c><00:05:48.479><c> xv6</c><00:05:48.880><c> to</c><00:05:48.960><c> run</c><00:05:49.120><c> one</c><00:05:49.280><c> thread</c><00:05:49.600><c> for</c><00:05:49.759><c> a</c>

00:05:49.830 --> 00:05:49.840 align:start position:0%
that allows xv6 to run one thread for a
 

00:05:49.840 --> 00:05:51.270 align:start position:0%
that allows xv6 to run one thread for a
while<00:05:50.240><c> and</c><00:05:50.320><c> then</c><00:05:50.639><c> switch</c>

00:05:51.270 --> 00:05:51.280 align:start position:0%
while and then switch
 

00:05:51.280 --> 00:05:53.350 align:start position:0%
while and then switch
and<00:05:51.600><c> set</c><00:05:51.919><c> aside</c><00:05:52.320><c> and</c><00:05:52.479><c> save</c><00:05:52.720><c> the</c><00:05:52.880><c> state</c><00:05:53.120><c> of</c><00:05:53.199><c> that</c>

00:05:53.350 --> 00:05:53.360 align:start position:0%
and set aside and save the state of that
 

00:05:53.360 --> 00:05:55.510 align:start position:0%
and set aside and save the state of that
one<00:05:53.520><c> thread</c><00:05:53.840><c> and</c><00:05:54.240><c> switch</c><00:05:54.560><c> to</c><00:05:54.720><c> executing</c><00:05:55.360><c> a</c>

00:05:55.510 --> 00:05:55.520 align:start position:0%
one thread and switch to executing a
 

00:05:55.520 --> 00:05:56.790 align:start position:0%
one thread and switch to executing a
second<00:05:55.759><c> thread</c><00:05:56.000><c> for</c><00:05:56.160><c> a</c><00:05:56.160><c> while</c><00:05:56.479><c> and</c><00:05:56.560><c> then</c><00:05:56.720><c> the</c>

00:05:56.790 --> 00:05:56.800 align:start position:0%
second thread for a while and then the
 

00:05:56.800 --> 00:05:58.550 align:start position:0%
second thread for a while and then the
third<00:05:57.039><c> thread</c><00:05:57.360><c> and</c><00:05:57.520><c> so</c><00:05:57.680><c> forth</c><00:05:57.919><c> until</c><00:05:58.160><c> it's</c>

00:05:58.550 --> 00:05:58.560 align:start position:0%
third thread and so forth until it's
 

00:05:58.560 --> 00:06:00.070 align:start position:0%
third thread and so forth until it's
executed<00:05:59.039><c> a</c><00:05:59.120><c> little</c><00:05:59.280><c> bit</c><00:05:59.440><c> of</c><00:05:59.520><c> each</c><00:05:59.680><c> thread</c><00:06:00.000><c> and</c>

00:06:00.070 --> 00:06:00.080 align:start position:0%
executed a little bit of each thread and
 

00:06:00.080 --> 00:06:01.670 align:start position:0%
executed a little bit of each thread and
then<00:06:00.960><c> go</c><00:06:01.120><c> back</c><00:06:01.360><c> and</c>

00:06:01.670 --> 00:06:01.680 align:start position:0%
then go back and
 

00:06:01.680 --> 00:06:03.749 align:start position:0%
then go back and
execute<00:06:02.080><c> more</c><00:06:02.479><c> of</c><00:06:02.639><c> the</c><00:06:03.039><c> of</c><00:06:03.120><c> the</c><00:06:03.199><c> first</c><00:06:03.440><c> thread</c>

00:06:03.749 --> 00:06:03.759 align:start position:0%
execute more of the of the first thread
 

00:06:03.759 --> 00:06:06.070 align:start position:0%
execute more of the of the first thread
and<00:06:03.919><c> so</c><00:06:04.840><c> on</c>

00:06:06.070 --> 00:06:06.080 align:start position:0%
and so on
 

00:06:06.080 --> 00:06:08.309 align:start position:0%
and so on
and<00:06:06.240><c> indeed</c><00:06:06.479><c> with</c><00:06:06.800><c> xv6</c><00:06:07.520><c> like</c><00:06:07.759><c> most</c><00:06:08.000><c> operating</c>

00:06:08.309 --> 00:06:08.319 align:start position:0%
and indeed with xv6 like most operating
 

00:06:08.319 --> 00:06:10.629 align:start position:0%
and indeed with xv6 like most operating
system<00:06:08.639><c> combines</c><00:06:09.199><c> the</c><00:06:09.440><c> sex</c><00:06:09.680><c> v6</c>

00:06:10.629 --> 00:06:10.639 align:start position:0%
system combines the sex v6
 

00:06:10.639 --> 00:06:12.950 align:start position:0%
system combines the sex v6
will<00:06:10.880><c> run</c><00:06:11.600><c> threads</c><00:06:12.000><c> on</c><00:06:12.240><c> all</c><00:06:12.400><c> the</c><00:06:12.560><c> cores</c><00:06:12.880><c> that</c>

00:06:12.950 --> 00:06:12.960 align:start position:0%
will run threads on all the cores that
 

00:06:12.960 --> 00:06:14.550 align:start position:0%
will run threads on all the cores that
are<00:06:13.120><c> available</c><00:06:13.520><c> and</c><00:06:13.680><c> each</c><00:06:13.919><c> core</c><00:06:14.240><c> will</c>

00:06:14.550 --> 00:06:14.560 align:start position:0%
are available and each core will
 

00:06:14.560 --> 00:06:17.350 align:start position:0%
are available and each core will
switch<00:06:15.759><c> among</c><00:06:16.160><c> threads</c><00:06:17.039><c> because</c><00:06:17.199><c> there's</c>

00:06:17.350 --> 00:06:17.360 align:start position:0%
switch among threads because there's
 

00:06:17.360 --> 00:06:17.990 align:start position:0%
switch among threads because there's
typical

00:06:17.990 --> 00:06:18.000 align:start position:0%
typical
 

00:06:18.000 --> 00:06:19.830 align:start position:0%
typical
typically<00:06:18.720><c> although</c><00:06:19.039><c> not</c><00:06:19.280><c> always</c><00:06:19.600><c> there's</c>

00:06:19.830 --> 00:06:19.840 align:start position:0%
typically although not always there's
 

00:06:19.840 --> 00:06:21.510 align:start position:0%
typically although not always there's
typically<00:06:20.240><c> many</c><00:06:20.479><c> more</c><00:06:20.639><c> threats</c><00:06:21.120><c> than</c><00:06:21.280><c> there</c>

00:06:21.510 --> 00:06:21.520 align:start position:0%
typically many more threats than there
 

00:06:21.520 --> 00:06:22.150 align:start position:0%
typically many more threats than there
are

00:06:22.150 --> 00:06:22.160 align:start position:0%
are
 

00:06:22.160 --> 00:06:25.430 align:start position:0%
are
cpus

00:06:25.430 --> 00:06:25.440 align:start position:0%
 
 

00:06:25.440 --> 00:06:29.189 align:start position:0%
 
one<00:06:27.280><c> of</c><00:06:27.440><c> the</c><00:06:27.600><c> many</c><00:06:27.840><c> ways</c><00:06:28.240><c> in</c><00:06:28.319><c> which</c>

00:06:29.189 --> 00:06:29.199 align:start position:0%
one of the many ways in which
 

00:06:29.199 --> 00:06:31.909 align:start position:0%
one of the many ways in which
different<00:06:30.000><c> threading</c><00:06:30.400><c> systems</c><00:06:31.199><c> or</c><00:06:31.440><c> instances</c>

00:06:31.909 --> 00:06:31.919 align:start position:0%
different threading systems or instances
 

00:06:31.919 --> 00:06:33.029 align:start position:0%
different threading systems or instances
of<00:06:32.000><c> threading</c><00:06:32.400><c> systems</c>

00:06:33.029 --> 00:06:33.039 align:start position:0%
of threading systems
 

00:06:33.039 --> 00:06:34.950 align:start position:0%
of threading systems
differ<00:06:33.680><c> is</c><00:06:33.840><c> in</c><00:06:33.919><c> whether</c><00:06:34.160><c> or</c><00:06:34.240><c> not</c><00:06:34.400><c> they</c><00:06:34.639><c> share</c>

00:06:34.950 --> 00:06:34.960 align:start position:0%
differ is in whether or not they share
 

00:06:34.960 --> 00:06:36.950 align:start position:0%
differ is in whether or not they share
memory

00:06:36.950 --> 00:06:36.960 align:start position:0%
memory
 

00:06:36.960 --> 00:06:42.790 align:start position:0%
memory
so<00:06:37.120><c> this</c><00:06:37.280><c> is</c><00:06:37.440><c> a</c><00:06:39.600><c> important</c>

00:06:42.790 --> 00:06:42.800 align:start position:0%
 
 

00:06:42.800 --> 00:06:46.629 align:start position:0%
 
point<00:06:45.199><c> one</c><00:06:45.440><c> possibility</c><00:06:46.160><c> is</c><00:06:46.240><c> that</c>

00:06:46.629 --> 00:06:46.639 align:start position:0%
point one possibility is that
 

00:06:46.639 --> 00:06:48.550 align:start position:0%
point one possibility is that
you<00:06:46.800><c> could</c><00:06:46.960><c> have</c><00:06:47.199><c> a</c><00:06:47.360><c> single</c><00:06:47.680><c> address</c><00:06:48.000><c> space</c>

00:06:48.550 --> 00:06:48.560 align:start position:0%
you could have a single address space
 

00:06:48.560 --> 00:06:50.230 align:start position:0%
you could have a single address space
with<00:06:48.800><c> many</c><00:06:49.039><c> threads</c><00:06:49.440><c> executing</c><00:06:50.000><c> in</c><00:06:50.080><c> that</c>

00:06:50.230 --> 00:06:50.240 align:start position:0%
with many threads executing in that
 

00:06:50.240 --> 00:06:51.670 align:start position:0%
with many threads executing in that
address<00:06:50.560><c> space</c><00:06:50.880><c> and</c><00:06:50.960><c> then</c><00:06:51.120><c> they</c><00:06:51.280><c> see</c><00:06:51.440><c> each</c>

00:06:51.670 --> 00:06:51.680 align:start position:0%
address space and then they see each
 

00:06:51.680 --> 00:06:52.950 align:start position:0%
address space and then they see each
other's<00:06:52.000><c> changes</c>

00:06:52.950 --> 00:06:52.960 align:start position:0%
other's changes
 

00:06:52.960 --> 00:06:55.350 align:start position:0%
other's changes
if<00:06:53.120><c> one</c><00:06:53.360><c> of</c><00:06:53.520><c> the</c><00:06:54.319><c> threads</c><00:06:54.800><c> sharing</c><00:06:55.199><c> some</c>

00:06:55.350 --> 00:06:55.360 align:start position:0%
if one of the threads sharing some
 

00:06:55.360 --> 00:06:57.350 align:start position:0%
if one of the threads sharing some
memory<00:06:55.759><c> modifies</c><00:06:56.240><c> a</c><00:06:56.479><c> variable</c><00:06:56.880><c> then</c>

00:06:57.350 --> 00:06:57.360 align:start position:0%
memory modifies a variable then
 

00:06:57.360 --> 00:06:58.550 align:start position:0%
memory modifies a variable then
the<00:06:57.440><c> other</c><00:06:57.599><c> thread</c><00:06:57.840><c> sharing</c><00:06:58.160><c> that</c><00:06:58.240><c> memory</c>

00:06:58.550 --> 00:06:58.560 align:start position:0%
the other thread sharing that memory
 

00:06:58.560 --> 00:07:01.350 align:start position:0%
the other thread sharing that memory
will<00:06:58.720><c> see</c><00:06:58.880><c> the</c><00:06:58.960><c> modification</c>

00:07:01.350 --> 00:07:01.360 align:start position:0%
will see the modification
 

00:07:01.360 --> 00:07:02.870 align:start position:0%
will see the modification
and<00:07:01.440><c> so</c><00:07:01.680><c> it's</c><00:07:01.840><c> in</c><00:07:01.919><c> the</c><00:07:02.000><c> context</c><00:07:02.400><c> of</c><00:07:02.560><c> threads</c>

00:07:02.870 --> 00:07:02.880 align:start position:0%
and so it's in the context of threads
 

00:07:02.880 --> 00:07:04.790 align:start position:0%
and so it's in the context of threads
running<00:07:03.199><c> and</c><00:07:03.759><c> sharing</c><00:07:04.080><c> memory</c><00:07:04.400><c> that</c><00:07:04.560><c> we</c><00:07:04.639><c> need</c>

00:07:04.790 --> 00:07:04.800 align:start position:0%
running and sharing memory that we need
 

00:07:04.800 --> 00:07:05.270 align:start position:0%
running and sharing memory that we need
things<00:07:04.960><c> like</c>

00:07:05.270 --> 00:07:05.280 align:start position:0%
things like
 

00:07:05.280 --> 00:07:07.909 align:start position:0%
things like
the<00:07:05.440><c> locks</c><00:07:06.000><c> that</c><00:07:07.120><c> you</c><00:07:07.280><c> saw</c><00:07:07.440><c> in</c><00:07:07.599><c> the</c><00:07:07.680><c> last</c>

00:07:07.909 --> 00:07:07.919 align:start position:0%
the locks that you saw in the last
 

00:07:07.919 --> 00:07:08.710 align:start position:0%
the locks that you saw in the last
lecture

00:07:08.710 --> 00:07:08.720 align:start position:0%
lecture
 

00:07:08.720 --> 00:07:12.309 align:start position:0%
lecture
um<00:07:10.400><c> xv6</c><00:07:11.599><c> kernel</c>

00:07:12.309 --> 00:07:12.319 align:start position:0%
um xv6 kernel
 

00:07:12.319 --> 00:07:16.070 align:start position:0%
um xv6 kernel
is<00:07:12.479><c> shared</c><00:07:12.800><c> memory</c><00:07:14.000><c> so</c><00:07:14.840><c> xv6</c>

00:07:16.070 --> 00:07:16.080 align:start position:0%
is shared memory so xv6
 

00:07:16.080 --> 00:07:18.390 align:start position:0%
is shared memory so xv6
there's<00:07:16.400><c> a</c><00:07:16.639><c> actually</c><00:07:17.039><c> because</c><00:07:17.199><c> has</c><00:07:17.440><c> a</c>

00:07:18.390 --> 00:07:18.400 align:start position:0%
there's a actually because has a
 

00:07:18.400 --> 00:07:19.749 align:start position:0%
there's a actually because has a
supports<00:07:18.720><c> a</c><00:07:18.800><c> notion</c><00:07:19.039><c> of</c><00:07:19.120><c> kernel</c><00:07:19.440><c> threads</c>

00:07:19.749 --> 00:07:19.759 align:start position:0%
supports a notion of kernel threads
 

00:07:19.759 --> 00:07:21.350 align:start position:0%
supports a notion of kernel threads
there's<00:07:19.919><c> one</c><00:07:20.080><c> kernel</c><00:07:20.479><c> thread</c>

00:07:21.350 --> 00:07:21.360 align:start position:0%
there's one kernel thread
 

00:07:21.360 --> 00:07:23.830 align:start position:0%
there's one kernel thread
per<00:07:22.080><c> process</c><00:07:22.560><c> that</c><00:07:22.720><c> executes</c><00:07:23.280><c> system</c><00:07:23.599><c> calls</c>

00:07:23.830 --> 00:07:23.840 align:start position:0%
per process that executes system calls
 

00:07:23.840 --> 00:07:24.790 align:start position:0%
per process that executes system calls
for<00:07:24.000><c> that</c><00:07:24.160><c> process</c>

00:07:24.790 --> 00:07:24.800 align:start position:0%
for that process
 

00:07:24.800 --> 00:07:26.870 align:start position:0%
for that process
all<00:07:24.960><c> those</c><00:07:25.120><c> kernel</c><00:07:25.440><c> threads</c><00:07:26.000><c> share</c><00:07:26.479><c> kernel</c>

00:07:26.870 --> 00:07:26.880 align:start position:0%
all those kernel threads share kernel
 

00:07:26.880 --> 00:07:28.230 align:start position:0%
all those kernel threads share kernel
memory

00:07:28.230 --> 00:07:28.240 align:start position:0%
memory
 

00:07:28.240 --> 00:07:34.469 align:start position:0%
memory
so<00:07:28.720><c> xv6</c><00:07:29.280><c> kernel</c><00:07:29.520><c> threads</c><00:07:29.840><c> do</c><00:07:30.080><c> share</c><00:07:30.319><c> memory</c><00:07:31.039><c> um</c>

00:07:34.469 --> 00:07:34.479 align:start position:0%
 
 

00:07:34.479 --> 00:07:37.589 align:start position:0%
 
and<00:07:36.880><c> on</c><00:07:37.039><c> the</c><00:07:37.120><c> other</c><00:07:37.280><c> end</c>

00:07:37.589 --> 00:07:37.599 align:start position:0%
and on the other end
 

00:07:37.599 --> 00:07:40.070 align:start position:0%
and on the other end
xv6<00:07:38.160><c> is</c><00:07:38.479><c> another</c><00:07:38.720><c> kind</c><00:07:38.960><c> of</c><00:07:39.039><c> threads</c><00:07:39.440><c> each</c><00:07:39.599><c> user</c>

00:07:40.070 --> 00:07:40.080 align:start position:0%
xv6 is another kind of threads each user
 

00:07:40.080 --> 00:07:40.950 align:start position:0%
xv6 is another kind of threads each user
process

00:07:40.950 --> 00:07:40.960 align:start position:0%
process
 

00:07:40.960 --> 00:07:42.469 align:start position:0%
process
essentially<00:07:41.520><c> has</c><00:07:41.759><c> a</c><00:07:41.840><c> single</c><00:07:42.080><c> thread</c><00:07:42.400><c> of</c>

00:07:42.469 --> 00:07:42.479 align:start position:0%
essentially has a single thread of
 

00:07:42.479 --> 00:07:44.070 align:start position:0%
essentially has a single thread of
control<00:07:42.880><c> that</c><00:07:43.120><c> executes</c><00:07:43.599><c> the</c><00:07:43.759><c> user</c>

00:07:44.070 --> 00:07:44.080 align:start position:0%
control that executes the user
 

00:07:44.080 --> 00:07:46.550 align:start position:0%
control that executes the user
instructions<00:07:44.720><c> for</c><00:07:44.800><c> that</c><00:07:45.120><c> process</c>

00:07:46.550 --> 00:07:46.560 align:start position:0%
instructions for that process
 

00:07:46.560 --> 00:07:49.830 align:start position:0%
instructions for that process
and<00:07:46.720><c> indeed</c><00:07:47.039><c> a</c><00:07:47.120><c> lot</c><00:07:47.280><c> of</c><00:07:47.360><c> the</c><00:07:48.479><c> xv6</c><00:07:49.440><c> kernel</c>

00:07:49.830 --> 00:07:49.840 align:start position:0%
and indeed a lot of the xv6 kernel
 

00:07:49.840 --> 00:07:51.029 align:start position:0%
and indeed a lot of the xv6 kernel
threading<00:07:50.240><c> machinery</c>

00:07:51.029 --> 00:07:51.039 align:start position:0%
threading machinery
 

00:07:51.039 --> 00:07:53.189 align:start position:0%
threading machinery
is<00:07:51.280><c> ultimately</c><00:07:51.840><c> in</c><00:07:51.919><c> support</c><00:07:52.400><c> of</c><00:07:52.800><c> being</c><00:07:53.039><c> able</c>

00:07:53.189 --> 00:07:53.199 align:start position:0%
is ultimately in support of being able
 

00:07:53.199 --> 00:07:55.589 align:start position:0%
is ultimately in support of being able
to<00:07:53.759><c> support</c><00:07:54.240><c> and</c><00:07:54.479><c> switch</c><00:07:54.800><c> among</c>

00:07:55.589 --> 00:07:55.599 align:start position:0%
to support and switch among
 

00:07:55.599 --> 00:07:58.150 align:start position:0%
to support and switch among
many<00:07:55.919><c> user</c><00:07:56.240><c> processes</c><00:07:56.879><c> each</c><00:07:57.120><c> user</c><00:07:57.440><c> process</c>

00:07:58.150 --> 00:07:58.160 align:start position:0%
many user processes each user process
 

00:07:58.160 --> 00:07:59.350 align:start position:0%
many user processes each user process
has<00:07:58.319><c> some</c><00:07:58.560><c> memory</c><00:07:58.960><c> and</c><00:07:59.120><c> a</c>

00:07:59.350 --> 00:07:59.360 align:start position:0%
has some memory and a
 

00:07:59.360 --> 00:08:01.350 align:start position:0%
has some memory and a
single<00:07:59.680><c> thread</c><00:07:59.919><c> that</c><00:08:00.080><c> runs</c><00:08:00.319><c> in</c><00:08:00.400><c> that</c><00:08:00.560><c> memory</c>

00:08:01.350 --> 00:08:01.360 align:start position:0%
single thread that runs in that memory
 

00:08:01.360 --> 00:08:04.070 align:start position:0%
single thread that runs in that memory
so<00:08:01.919><c> xv6</c>

00:08:04.070 --> 00:08:04.080 align:start position:0%
so xv6
 

00:08:04.080 --> 00:08:11.110 align:start position:0%
so xv6
user<00:08:04.560><c> processes</c>

00:08:11.110 --> 00:08:11.120 align:start position:0%
 
 

00:08:11.120 --> 00:08:13.589 align:start position:0%
 
each<00:08:11.440><c> process</c><00:08:12.240><c> has</c><00:08:12.479><c> one</c><00:08:12.720><c> thread</c><00:08:13.039><c> and</c><00:08:13.199><c> so</c>

00:08:13.589 --> 00:08:13.599 align:start position:0%
each process has one thread and so
 

00:08:13.599 --> 00:08:14.869 align:start position:0%
each process has one thread and so
there's<00:08:13.919><c> no</c>

00:08:14.869 --> 00:08:14.879 align:start position:0%
there's no
 

00:08:14.879 --> 00:08:18.150 align:start position:0%
there's no
sharing<00:08:15.280><c> of</c><00:08:15.440><c> memory</c><00:08:15.919><c> among</c><00:08:16.479><c> threads</c><00:08:17.360><c> um</c>

00:08:18.150 --> 00:08:18.160 align:start position:0%
sharing of memory among threads um
 

00:08:18.160 --> 00:08:20.390 align:start position:0%
sharing of memory among threads um
within<00:08:18.800><c> a</c><00:08:18.960><c> single</c><00:08:19.280><c> xp6</c><00:08:19.840><c> user</c><00:08:20.080><c> process</c><00:08:20.400><c> of</c>

00:08:20.390 --> 00:08:20.400 align:start position:0%
within a single xp6 user process of
 

00:08:20.400 --> 00:08:21.749 align:start position:0%
within a single xp6 user process of
course<00:08:20.639><c> you</c><00:08:20.720><c> could</c><00:08:20.800><c> have</c><00:08:20.879><c> multiple</c><00:08:21.199><c> processes</c>

00:08:21.749 --> 00:08:21.759 align:start position:0%
course you could have multiple processes
 

00:08:21.759 --> 00:08:22.309 align:start position:0%
course you could have multiple processes
but

00:08:22.309 --> 00:08:22.319 align:start position:0%
but
 

00:08:22.319 --> 00:08:24.150 align:start position:0%
but
each<00:08:22.560><c> of</c><00:08:22.639><c> those</c><00:08:22.879><c> processes</c><00:08:23.599><c> is</c><00:08:23.759><c> an</c><00:08:23.840><c> address</c>

00:08:24.150 --> 00:08:24.160 align:start position:0%
each of those processes is an address
 

00:08:24.160 --> 00:08:26.869 align:start position:0%
each of those processes is an address
space<00:08:24.639><c> with</c><00:08:24.800><c> a</c><00:08:24.879><c> single</c><00:08:25.199><c> thread</c>

00:08:26.869 --> 00:08:26.879 align:start position:0%
space with a single thread
 

00:08:26.879 --> 00:08:29.830 align:start position:0%
space with a single thread
the<00:08:27.120><c> processes</c><00:08:27.759><c> in</c><00:08:27.919><c> xv6</c><00:08:28.400><c> don't</c><00:08:28.560><c> share</c><00:08:28.800><c> memory</c>

00:08:29.830 --> 00:08:29.840 align:start position:0%
the processes in xv6 don't share memory
 

00:08:29.840 --> 00:08:31.430 align:start position:0%
the processes in xv6 don't share memory
in<00:08:30.080><c> other</c><00:08:30.319><c> more</c><00:08:30.560><c> sophisticated</c>

00:08:31.430 --> 00:08:31.440 align:start position:0%
in other more sophisticated
 

00:08:31.440 --> 00:08:35.190 align:start position:0%
in other more sophisticated
operating<00:08:31.919><c> systems</c><00:08:32.320><c> for</c><00:08:32.479><c> example</c><00:08:32.800><c> linux</c>

00:08:35.190 --> 00:08:35.200 align:start position:0%
operating systems for example linux
 

00:08:35.200 --> 00:08:38.389 align:start position:0%
operating systems for example linux
linux<00:08:35.599><c> at</c><00:08:35.680><c> user</c><00:08:36.000><c> level</c>

00:08:38.389 --> 00:08:38.399 align:start position:0%
 
 

00:08:38.399 --> 00:08:42.230 align:start position:0%
 
does<00:08:38.839><c> allow</c><00:08:40.560><c> multiple</c><00:08:41.120><c> threads</c><00:08:41.519><c> in</c><00:08:41.680><c> a</c><00:08:41.760><c> process</c>

00:08:42.230 --> 00:08:42.240 align:start position:0%
does allow multiple threads in a process
 

00:08:42.240 --> 00:08:43.110 align:start position:0%
does allow multiple threads in a process
and<00:08:42.320><c> the</c><00:08:42.479><c> processes</c>

00:08:43.110 --> 00:08:43.120 align:start position:0%
and the processes
 

00:08:43.120 --> 00:08:45.590 align:start position:0%
and the processes
and<00:08:43.200><c> those</c><00:08:43.519><c> threads</c><00:08:44.320><c> share</c><00:08:44.640><c> the</c><00:08:44.800><c> memory</c><00:08:45.440><c> of</c>

00:08:45.590 --> 00:08:45.600 align:start position:0%
and those threads share the memory of
 

00:08:45.600 --> 00:08:47.350 align:start position:0%
and those threads share the memory of
that<00:08:45.760><c> single</c><00:08:46.080><c> process</c><00:08:46.640><c> um</c>

00:08:47.350 --> 00:08:47.360 align:start position:0%
that single process um
 

00:08:47.360 --> 00:08:48.550 align:start position:0%
that single process um
and<00:08:47.440><c> that's</c><00:08:47.680><c> super</c><00:08:47.920><c> cool</c><00:08:48.160><c> if</c><00:08:48.240><c> you</c><00:08:48.320><c> want</c><00:08:48.480><c> to</c>

00:08:48.550 --> 00:08:48.560 align:start position:0%
and that's super cool if you want to
 

00:08:48.560 --> 00:08:51.110 align:start position:0%
and that's super cool if you want to
write<00:08:48.720><c> user</c><00:08:48.959><c> level</c><00:08:49.279><c> programs</c><00:08:49.680><c> that</c>

00:08:51.110 --> 00:08:51.120 align:start position:0%
write user level programs that
 

00:08:51.120 --> 00:08:53.030 align:start position:0%
write user level programs that
use<00:08:51.279><c> level</c><00:08:51.600><c> parallel</c><00:08:52.080><c> programs</c><00:08:52.640><c> that</c><00:08:52.959><c> you</c>

00:08:53.030 --> 00:08:53.040 align:start position:0%
use level parallel programs that you
 

00:08:53.040 --> 00:08:55.190 align:start position:0%
use level parallel programs that you
know<00:08:53.200><c> get</c><00:08:53.360><c> speed</c><00:08:53.680><c> up</c><00:08:53.760><c> from</c><00:08:53.920><c> multiple</c><00:08:54.320><c> cores</c>

00:08:55.190 --> 00:08:55.200 align:start position:0%
know get speed up from multiple cores
 

00:08:55.200 --> 00:08:57.750 align:start position:0%
know get speed up from multiple cores
better<00:08:55.440><c> requires</c><00:08:55.839><c> sort</c><00:08:56.000><c> of</c><00:08:56.080><c> another</c><00:08:56.800><c> it</c><00:08:57.279><c> uses</c>

00:08:57.750 --> 00:08:57.760 align:start position:0%
better requires sort of another it uses
 

00:08:57.760 --> 00:08:58.790 align:start position:0%
better requires sort of another it uses
you<00:08:57.839><c> know</c><00:08:58.000><c> a</c><00:08:58.000><c> lot</c><00:08:58.160><c> of</c><00:08:58.240><c> the</c><00:08:58.320><c> same</c><00:08:58.480><c> basic</c>

00:08:58.790 --> 00:08:58.800 align:start position:0%
you know a lot of the same basic
 

00:08:58.800 --> 00:08:59.750 align:start position:0%
you know a lot of the same basic
techniques<00:08:59.200><c> we're</c><00:08:59.360><c> going</c><00:08:59.440><c> to</c>

00:08:59.750 --> 00:08:59.760 align:start position:0%
techniques we're going to
 

00:08:59.760 --> 00:09:01.910 align:start position:0%
techniques we're going to
talk<00:08:59.920><c> about</c><00:09:00.160><c> today</c><00:09:00.560><c> but</c><00:09:01.279><c> there's</c><00:09:01.519><c> a</c><00:09:01.680><c> certain</c>

00:09:01.910 --> 00:09:01.920 align:start position:0%
talk about today but there's a certain
 

00:09:01.920 --> 00:09:03.829 align:start position:0%
talk about today but there's a certain
amount<00:09:02.160><c> more</c><00:09:02.320><c> sophistication</c><00:09:03.040><c> in</c><00:09:03.120><c> linux</c><00:09:03.680><c> to</c>

00:09:03.829 --> 00:09:03.839 align:start position:0%
amount more sophistication in linux to
 

00:09:03.839 --> 00:09:05.190 align:start position:0%
amount more sophistication in linux to
get<00:09:04.000><c> it</c><00:09:04.080><c> to</c>

00:09:05.190 --> 00:09:05.200 align:start position:0%
get it to
 

00:09:05.200 --> 00:09:06.949 align:start position:0%
get it to
keep<00:09:05.440><c> track</c><00:09:05.680><c> of</c><00:09:05.760><c> multiple</c><00:09:06.160><c> threads</c><00:09:06.720><c> per</c>

00:09:06.949 --> 00:09:06.959 align:start position:0%
keep track of multiple threads per
 

00:09:06.959 --> 00:09:12.230 align:start position:0%
keep track of multiple threads per
process<00:09:07.680><c> instead</c><00:09:07.920><c> of</c><00:09:08.000><c> just</c><00:09:08.240><c> one</c>

00:09:12.230 --> 00:09:12.240 align:start position:0%
 
 

00:09:12.240 --> 00:09:15.269 align:start position:0%
 
okay<00:09:13.519><c> at</c><00:09:13.680><c> a</c><00:09:14.080><c> sort</c><00:09:14.240><c> of</c><00:09:14.320><c> high</c><00:09:14.560><c> level</c><00:09:14.880><c> i</c><00:09:14.959><c> just</c><00:09:15.120><c> want</c>

00:09:15.269 --> 00:09:15.279 align:start position:0%
okay at a sort of high level i just want
 

00:09:15.279 --> 00:09:15.910 align:start position:0%
okay at a sort of high level i just want
to<00:09:15.440><c> mention</c>

00:09:15.910 --> 00:09:15.920 align:start position:0%
to mention
 

00:09:15.920 --> 00:09:19.030 align:start position:0%
to mention
that<00:09:16.240><c> there's</c><00:09:16.800><c> other</c><00:09:17.120><c> ways</c><00:09:17.839><c> to</c><00:09:18.160><c> support</c>

00:09:19.030 --> 00:09:19.040 align:start position:0%
that there's other ways to support
 

00:09:19.040 --> 00:09:21.190 align:start position:0%
that there's other ways to support
the<00:09:19.200><c> interleaving</c><00:09:19.839><c> of</c><00:09:20.000><c> multiple</c><00:09:20.480><c> tasks</c><00:09:20.959><c> on</c><00:09:21.120><c> a</c>

00:09:21.190 --> 00:09:21.200 align:start position:0%
the interleaving of multiple tasks on a
 

00:09:21.200 --> 00:09:23.030 align:start position:0%
the interleaving of multiple tasks on a
single<00:09:21.519><c> computer</c>

00:09:23.030 --> 00:09:23.040 align:start position:0%
single computer
 

00:09:23.040 --> 00:09:24.949 align:start position:0%
single computer
and<00:09:23.200><c> we're</c><00:09:23.360><c> not</c><00:09:23.519><c> going</c><00:09:23.600><c> to</c><00:09:23.680><c> talk</c><00:09:23.920><c> about</c><00:09:24.160><c> them</c>

00:09:24.949 --> 00:09:24.959 align:start position:0%
and we're not going to talk about them
 

00:09:24.959 --> 00:09:26.230 align:start position:0%
and we're not going to talk about them
but<00:09:25.120><c> if</c><00:09:25.279><c> you're</c><00:09:25.360><c> curious</c>

00:09:26.230 --> 00:09:26.240 align:start position:0%
but if you're curious
 

00:09:26.240 --> 00:09:28.230 align:start position:0%
but if you're curious
you<00:09:26.399><c> can</c><00:09:26.560><c> look</c><00:09:26.800><c> up</c><00:09:26.959><c> things</c><00:09:27.200><c> like</c><00:09:27.519><c> event</c><00:09:27.839><c> driven</c>

00:09:28.230 --> 00:09:28.240 align:start position:0%
you can look up things like event driven
 

00:09:28.240 --> 00:09:29.670 align:start position:0%
you can look up things like event driven
programming<00:09:29.040><c> or</c>

00:09:29.670 --> 00:09:29.680 align:start position:0%
programming or
 

00:09:29.680 --> 00:09:33.110 align:start position:0%
programming or
state<00:09:30.080><c> machines</c><00:09:31.760><c> and</c><00:09:31.920><c> these</c><00:09:32.160><c> are</c><00:09:32.399><c> non-thread</c>

00:09:33.110 --> 00:09:33.120 align:start position:0%
state machines and these are non-thread
 

00:09:33.120 --> 00:09:33.990 align:start position:0%
state machines and these are non-thread
techniques

00:09:33.990 --> 00:09:34.000 align:start position:0%
techniques
 

00:09:34.000 --> 00:09:36.389 align:start position:0%
techniques
to<00:09:34.399><c> share</c><00:09:34.720><c> one</c><00:09:35.040><c> computer</c><00:09:35.519><c> among</c><00:09:36.080><c> many</c>

00:09:36.389 --> 00:09:36.399 align:start position:0%
to share one computer among many
 

00:09:36.399 --> 00:09:37.509 align:start position:0%
to share one computer among many
different<00:09:36.720><c> tasks</c>

00:09:37.509 --> 00:09:37.519 align:start position:0%
different tasks
 

00:09:37.519 --> 00:09:40.790 align:start position:0%
different tasks
it<00:09:37.600><c> turns</c><00:09:37.920><c> out</c><00:09:39.200><c> you</c><00:09:39.279><c> know</c><00:09:39.440><c> in</c><00:09:39.600><c> sort</c><00:09:39.760><c> of</c><00:09:40.000><c> on</c><00:09:40.160><c> the</c>

00:09:40.790 --> 00:09:40.800 align:start position:0%
it turns out you know in sort of on the
 

00:09:40.800 --> 00:09:43.030 align:start position:0%
it turns out you know in sort of on the
spectrum<00:09:41.440><c> of</c><00:09:41.600><c> different</c><00:09:42.080><c> schemes</c><00:09:42.640><c> for</c>

00:09:43.030 --> 00:09:43.040 align:start position:0%
spectrum of different schemes for
 

00:09:43.040 --> 00:09:44.870 align:start position:0%
spectrum of different schemes for
supporting<00:09:43.440><c> multiple</c><00:09:43.760><c> tasks</c><00:09:44.080><c> on</c><00:09:44.160><c> a</c><00:09:44.240><c> computer</c>

00:09:44.870 --> 00:09:44.880 align:start position:0%
supporting multiple tasks on a computer
 

00:09:44.880 --> 00:09:46.790 align:start position:0%
supporting multiple tasks on a computer
threads<00:09:45.200><c> are</c><00:09:45.440><c> not</c><00:09:45.680><c> very</c><00:09:45.920><c> efficient</c><00:09:46.480><c> those</c><00:09:46.720><c> are</c>

00:09:46.790 --> 00:09:46.800 align:start position:0%
threads are not very efficient those are
 

00:09:46.800 --> 00:09:48.790 align:start position:0%
threads are not very efficient those are
the<00:09:46.880><c> more</c><00:09:47.040><c> efficient</c><00:09:47.440><c> schemes</c>

00:09:48.790 --> 00:09:48.800 align:start position:0%
the more efficient schemes
 

00:09:48.800 --> 00:09:50.389 align:start position:0%
the more efficient schemes
but<00:09:48.959><c> threads</c><00:09:49.360><c> are</c><00:09:49.519><c> usually</c><00:09:50.000><c> the</c><00:09:50.080><c> most</c>

00:09:50.389 --> 00:09:50.399 align:start position:0%
but threads are usually the most
 

00:09:50.399 --> 00:09:52.550 align:start position:0%
but threads are usually the most
convenient<00:09:50.959><c> way</c><00:09:51.600><c> the</c><00:09:51.680><c> most</c><00:09:52.000><c> programmer</c>

00:09:52.550 --> 00:09:52.560 align:start position:0%
convenient way the most programmer
 

00:09:52.560 --> 00:09:54.389 align:start position:0%
convenient way the most programmer
friendly<00:09:52.959><c> way</c>

00:09:54.389 --> 00:09:54.399 align:start position:0%
friendly way
 

00:09:54.399 --> 00:09:56.389 align:start position:0%
friendly way
to<00:09:54.560><c> support</c><00:09:54.959><c> lots</c><00:09:55.279><c> of</c><00:09:55.680><c> sort</c><00:09:55.920><c> of</c><00:09:56.000><c> different</c>

00:09:56.389 --> 00:09:56.399 align:start position:0%
to support lots of sort of different
 

00:09:56.399 --> 00:09:59.829 align:start position:0%
to support lots of sort of different
tasks

00:09:59.829 --> 00:09:59.839 align:start position:0%
 
 

00:09:59.839 --> 00:10:03.910 align:start position:0%
 
okay<00:10:02.000><c> there's</c><00:10:02.240><c> a</c><00:10:02.320><c> couple</c><00:10:02.839><c> of</c><00:10:03.279><c> uh</c>

00:10:03.910 --> 00:10:03.920 align:start position:0%
okay there's a couple of uh
 

00:10:03.920 --> 00:10:05.350 align:start position:0%
okay there's a couple of uh
challenges<00:10:04.480><c> that</c><00:10:04.640><c> we're</c><00:10:04.720><c> gonna</c><00:10:04.880><c> have</c><00:10:04.959><c> to</c><00:10:05.040><c> bite</c>

00:10:05.350 --> 00:10:05.360 align:start position:0%
challenges that we're gonna have to bite
 

00:10:05.360 --> 00:10:07.269 align:start position:0%
challenges that we're gonna have to bite
off<00:10:05.839><c> if</c><00:10:05.920><c> we</c><00:10:06.079><c> want</c><00:10:06.240><c> to</c><00:10:06.560><c> implement</c>

00:10:07.269 --> 00:10:07.279 align:start position:0%
off if we want to implement
 

00:10:07.279 --> 00:10:12.150 align:start position:0%
off if we want to implement
a<00:10:07.440><c> threading</c><00:10:07.839><c> system</c>

00:10:12.150 --> 00:10:12.160 align:start position:0%
 
 

00:10:12.160 --> 00:10:16.829 align:start position:0%
 
the<00:10:13.600><c> so</c><00:10:13.760><c> this</c><00:10:13.920><c> is</c><00:10:14.000><c> just</c><00:10:14.399><c> high</c><00:10:14.560><c> level</c>

00:10:16.829 --> 00:10:16.839 align:start position:0%
 
 

00:10:16.839 --> 00:10:21.190 align:start position:0%
 
challenges

00:10:21.190 --> 00:10:21.200 align:start position:0%
 
 

00:10:21.200 --> 00:10:24.630 align:start position:0%
 
um<00:10:22.959><c> one</c><00:10:23.200><c> is</c><00:10:23.360><c> as</c><00:10:23.519><c> i</c><00:10:23.600><c> mentioned</c><00:10:23.920><c> before</c><00:10:24.320><c> how</c><00:10:24.480><c> to</c>

00:10:24.630 --> 00:10:24.640 align:start position:0%
um one is as i mentioned before how to
 

00:10:24.640 --> 00:10:25.750 align:start position:0%
um one is as i mentioned before how to
actually

00:10:25.750 --> 00:10:25.760 align:start position:0%
actually
 

00:10:25.760 --> 00:10:28.790 align:start position:0%
actually
implement<00:10:26.160><c> the</c><00:10:26.320><c> switching</c><00:10:27.839><c> for</c><00:10:28.079><c> inter</c><00:10:28.399><c> the</c>

00:10:28.790 --> 00:10:28.800 align:start position:0%
implement the switching for inter the
 

00:10:28.800 --> 00:10:31.990 align:start position:0%
implement the switching for inter the
um<00:10:30.079><c> the</c><00:10:30.240><c> switching</c><00:10:30.640><c> that</c><00:10:30.800><c> allows</c><00:10:31.279><c> us</c><00:10:31.440><c> to</c>

00:10:31.990 --> 00:10:32.000 align:start position:0%
um the switching that allows us to
 

00:10:32.000 --> 00:10:35.030 align:start position:0%
um the switching that allows us to
interleave

00:10:35.030 --> 00:10:35.040 align:start position:0%
 
 

00:10:35.040 --> 00:10:38.069 align:start position:0%
 
the<00:10:35.279><c> execution</c><00:10:35.920><c> of</c><00:10:36.079><c> multiple</c><00:10:36.480><c> threads</c>

00:10:38.069 --> 00:10:38.079 align:start position:0%
the execution of multiple threads
 

00:10:38.079 --> 00:10:41.750 align:start position:0%
the execution of multiple threads
and<00:10:38.320><c> this</c><00:10:40.480><c> sort</c><00:10:40.720><c> of</c><00:10:40.800><c> broad</c><00:10:41.200><c> name</c><00:10:41.440><c> for</c><00:10:41.600><c> this</c>

00:10:41.750 --> 00:10:41.760 align:start position:0%
and this sort of broad name for this
 

00:10:41.760 --> 00:10:42.550 align:start position:0%
and this sort of broad name for this
process<00:10:42.240><c> of</c>

00:10:42.550 --> 00:10:42.560 align:start position:0%
process of
 

00:10:42.560 --> 00:10:44.310 align:start position:0%
process of
switching<00:10:43.040><c> deciding</c><00:10:43.600><c> oh</c><00:10:43.760><c> i'm</c><00:10:43.920><c> going</c><00:10:44.000><c> to</c><00:10:44.079><c> leave</c>

00:10:44.310 --> 00:10:44.320 align:start position:0%
switching deciding oh i'm going to leave
 

00:10:44.320 --> 00:10:46.389 align:start position:0%
switching deciding oh i'm going to leave
off<00:10:44.560><c> one</c><00:10:45.120><c> thread</c><00:10:45.519><c> and</c><00:10:45.680><c> start</c><00:10:45.920><c> executing</c>

00:10:46.389 --> 00:10:46.399 align:start position:0%
off one thread and start executing
 

00:10:46.399 --> 00:10:47.269 align:start position:0%
off one thread and start executing
another<00:10:46.720><c> thread</c>

00:10:47.269 --> 00:10:47.279 align:start position:0%
another thread
 

00:10:47.279 --> 00:10:51.590 align:start position:0%
another thread
it's<00:10:47.519><c> often</c><00:10:47.680><c> called</c><00:10:47.920><c> scheduling</c>

00:10:51.590 --> 00:10:51.600 align:start position:0%
 
 

00:10:51.600 --> 00:10:54.790 align:start position:0%
 
and<00:10:52.160><c> we'll</c><00:10:52.320><c> see</c><00:10:52.560><c> that</c><00:10:52.880><c> xv6</c><00:10:53.440><c> and</c><00:10:53.519><c> detects</c><00:10:54.240><c> as</c><00:10:54.480><c> a</c>

00:10:54.790 --> 00:10:54.800 align:start position:0%
and we'll see that xv6 and detects as a
 

00:10:54.800 --> 00:10:56.069 align:start position:0%
and we'll see that xv6 and detects as a
actual<00:10:55.120><c> piece</c><00:10:55.360><c> of</c><00:10:55.440><c> code</c><00:10:55.680><c> that's</c><00:10:55.920><c> the</c>

00:10:56.069 --> 00:10:56.079 align:start position:0%
actual piece of code that's the
 

00:10:56.079 --> 00:10:57.350 align:start position:0%
actual piece of code that's the
scheduler<00:10:56.560><c> indeed</c><00:10:56.800><c> it</c><00:10:56.880><c> has</c><00:10:57.040><c> multiple</c>

00:10:57.350 --> 00:10:57.360 align:start position:0%
scheduler indeed it has multiple
 

00:10:57.360 --> 00:10:59.509 align:start position:0%
scheduler indeed it has multiple
schedulers<00:10:57.920><c> one</c><00:10:58.079><c> per</c><00:10:58.320><c> core</c>

00:10:59.509 --> 00:10:59.519 align:start position:0%
schedulers one per core
 

00:10:59.519 --> 00:11:02.710 align:start position:0%
schedulers one per core
but<00:10:59.680><c> the</c><00:10:59.839><c> general</c><00:11:00.240><c> idea</c><00:11:00.640><c> of</c><00:11:01.760><c> how</c><00:11:01.920><c> do</c><00:11:02.000><c> you</c><00:11:02.160><c> drive</c>

00:11:02.710 --> 00:11:02.720 align:start position:0%
but the general idea of how do you drive
 

00:11:02.720 --> 00:11:04.150 align:start position:0%
but the general idea of how do you drive
the<00:11:02.959><c> decision</c><00:11:03.360><c> to</c><00:11:03.519><c> switch</c><00:11:03.680><c> from</c><00:11:03.839><c> one</c><00:11:04.000><c> to</c>

00:11:04.150 --> 00:11:04.160 align:start position:0%
the decision to switch from one to
 

00:11:04.160 --> 00:11:05.829 align:start position:0%
the decision to switch from one to
another<00:11:04.560><c> how</c><00:11:04.720><c> to</c><00:11:04.800><c> pick</c><00:11:05.040><c> the</c><00:11:05.120><c> next</c><00:11:05.360><c> thread</c><00:11:05.680><c> to</c>

00:11:05.829 --> 00:11:05.839 align:start position:0%
another how to pick the next thread to
 

00:11:05.839 --> 00:11:06.870 align:start position:0%
another how to pick the next thread to
run

00:11:06.870 --> 00:11:06.880 align:start position:0%
run
 

00:11:06.880 --> 00:11:11.190 align:start position:0%
run
is<00:11:07.040><c> called</c><00:11:07.279><c> scheduling</c>

00:11:11.190 --> 00:11:11.200 align:start position:0%
 
 

00:11:11.200 --> 00:11:12.470 align:start position:0%
 
another<00:11:11.519><c> question</c><00:11:11.839><c> is</c><00:11:12.079><c> if</c><00:11:12.240><c> you</c><00:11:12.320><c> want</c><00:11:12.399><c> to</c>

00:11:12.470 --> 00:11:12.480 align:start position:0%
another question is if you want to
 

00:11:12.480 --> 00:11:14.069 align:start position:0%
another question is if you want to
actually<00:11:13.040><c> implement</c><00:11:13.440><c> the</c><00:11:13.519><c> switch</c><00:11:13.839><c> from</c><00:11:13.920><c> one</c>

00:11:14.069 --> 00:11:14.079 align:start position:0%
actually implement the switch from one
 

00:11:14.079 --> 00:11:15.910 align:start position:0%
actually implement the switch from one
thread<00:11:14.320><c> to</c><00:11:14.480><c> another</c><00:11:14.720><c> you</c><00:11:14.800><c> need</c><00:11:14.959><c> to</c><00:11:15.200><c> save</c><00:11:15.680><c> and</c>

00:11:15.910 --> 00:11:15.920 align:start position:0%
thread to another you need to save and
 

00:11:15.920 --> 00:11:16.870 align:start position:0%
thread to another you need to save and
restore

00:11:16.870 --> 00:11:16.880 align:start position:0%
restore
 

00:11:16.880 --> 00:11:19.110 align:start position:0%
restore
so<00:11:17.040><c> we</c><00:11:17.200><c> need</c><00:11:17.360><c> to</c><00:11:17.440><c> decide</c><00:11:18.320><c> what</c><00:11:18.560><c> needs</c><00:11:18.800><c> to</c><00:11:18.880><c> be</c>

00:11:19.110 --> 00:11:19.120 align:start position:0%
so we need to decide what needs to be
 

00:11:19.120 --> 00:11:20.949 align:start position:0%
so we need to decide what needs to be
saved

00:11:20.949 --> 00:11:20.959 align:start position:0%
saved
 

00:11:20.959 --> 00:11:24.310 align:start position:0%
saved
and<00:11:21.120><c> where</c><00:11:21.360><c> to</c><00:11:21.519><c> save</c><00:11:21.760><c> it</c><00:11:22.959><c> when</c><00:11:23.839><c> what</c><00:11:24.079><c> needs</c><00:11:24.240><c> to</c>

00:11:24.310 --> 00:11:24.320 align:start position:0%
and where to save it when what needs to
 

00:11:24.320 --> 00:11:25.829 align:start position:0%
and where to save it when what needs to
be<00:11:24.399><c> saved</c><00:11:24.560><c> when</c><00:11:24.720><c> we</c><00:11:24.880><c> leave</c><00:11:25.120><c> off</c><00:11:25.279><c> executing</c><00:11:25.680><c> one</c>

00:11:25.829 --> 00:11:25.839 align:start position:0%
be saved when we leave off executing one
 

00:11:25.839 --> 00:11:28.310 align:start position:0%
be saved when we leave off executing one
thread<00:11:26.160><c> and</c><00:11:26.240><c> restored</c><00:11:27.040><c> when</c><00:11:27.920><c> we</c><00:11:28.079><c> want</c><00:11:28.240><c> to</c>

00:11:28.310 --> 00:11:28.320 align:start position:0%
thread and restored when we want to
 

00:11:28.320 --> 00:11:28.790 align:start position:0%
thread and restored when we want to
resume

00:11:28.790 --> 00:11:28.800 align:start position:0%
resume
 

00:11:28.800 --> 00:11:31.670 align:start position:0%
resume
executing<00:11:29.200><c> that</c><00:11:29.360><c> thread</c><00:11:29.680><c> at</c><00:11:29.920><c> some</c><00:11:30.160><c> later</c><00:11:30.399><c> time</c>

00:11:31.670 --> 00:11:31.680 align:start position:0%
executing that thread at some later time
 

00:11:31.680 --> 00:11:33.269 align:start position:0%
executing that thread at some later time
and<00:11:31.920><c> final</c><00:11:32.240><c> question</c><00:11:32.560><c> is</c><00:11:32.720><c> what</c><00:11:32.880><c> to</c><00:11:32.959><c> do</c><00:11:33.120><c> about</c>

00:11:33.269 --> 00:11:33.279 align:start position:0%
and final question is what to do about
 

00:11:33.279 --> 00:11:37.990 align:start position:0%
and final question is what to do about
compute<00:11:33.680><c> bound</c><00:11:34.000><c> threads</c>

00:11:37.990 --> 00:11:38.000 align:start position:0%
 
 

00:11:38.000 --> 00:11:42.230 align:start position:0%
 
the<00:11:40.079><c> many</c><00:11:40.320><c> of</c><00:11:40.399><c> the</c><00:11:40.839><c> options</c><00:11:41.680><c> um</c>

00:11:42.230 --> 00:11:42.240 align:start position:0%
the many of the options um
 

00:11:42.240 --> 00:11:43.509 align:start position:0%
the many of the options um
many<00:11:42.480><c> of</c><00:11:42.480><c> the</c><00:11:42.560><c> most</c><00:11:42.800><c> straightforward</c><00:11:43.200><c> options</c>

00:11:43.509 --> 00:11:43.519 align:start position:0%
many of the most straightforward options
 

00:11:43.519 --> 00:11:45.750 align:start position:0%
many of the most straightforward options
for<00:11:43.600><c> thread</c><00:11:43.839><c> switching</c><00:11:44.880><c> involve</c><00:11:45.279><c> the</c><00:11:45.440><c> thread</c>

00:11:45.750 --> 00:11:45.760 align:start position:0%
for thread switching involve the thread
 

00:11:45.760 --> 00:11:47.110 align:start position:0%
for thread switching involve the thread
sort<00:11:45.920><c> of</c><00:11:46.000><c> voluntarily</c><00:11:46.640><c> saying</c><00:11:46.800><c> well</c><00:11:47.040><c> i'm</c>

00:11:47.110 --> 00:11:47.120 align:start position:0%
sort of voluntarily saying well i'm
 

00:11:47.120 --> 00:11:49.110 align:start position:0%
sort of voluntarily saying well i'm
going<00:11:47.200><c> to</c><00:11:47.279><c> save</c><00:11:47.440><c> away</c><00:11:47.680><c> my</c><00:11:47.839><c> state</c><00:11:48.240><c> and</c><00:11:48.480><c> sort</c><00:11:48.720><c> of</c>

00:11:49.110 --> 00:11:49.120 align:start position:0%
going to save away my state and sort of
 

00:11:49.120 --> 00:11:50.790 align:start position:0%
going to save away my state and sort of
run<00:11:49.360><c> another</c><00:11:49.839><c> you</c><00:11:49.920><c> know</c><00:11:50.079><c> let</c><00:11:50.320><c> another</c><00:11:50.560><c> thread</c>

00:11:50.790 --> 00:11:50.800 align:start position:0%
run another you know let another thread
 

00:11:50.800 --> 00:11:52.790 align:start position:0%
run another you know let another thread
be<00:11:51.040><c> run</c><00:11:51.680><c> but</c><00:11:52.000><c> what</c><00:11:52.160><c> do</c><00:11:52.240><c> we</c><00:11:52.399><c> have</c><00:11:52.480><c> a</c><00:11:52.560><c> user</c>

00:11:52.790 --> 00:11:52.800 align:start position:0%
be run but what do we have a user
 

00:11:52.800 --> 00:11:53.590 align:start position:0%
be run but what do we have a user
program<00:11:53.200><c> that's</c>

00:11:53.590 --> 00:11:53.600 align:start position:0%
program that's
 

00:11:53.600 --> 00:11:55.269 align:start position:0%
program that's
you<00:11:53.680><c> know</c><00:11:53.839><c> doing</c><00:11:54.000><c> some</c><00:11:54.240><c> long</c><00:11:54.560><c> running</c>

00:11:55.269 --> 00:11:55.279 align:start position:0%
you know doing some long running
 

00:11:55.279 --> 00:11:57.509 align:start position:0%
you know doing some long running
calculation<00:11:55.920><c> that</c><00:11:56.079><c> might</c><00:11:56.320><c> take</c><00:11:56.560><c> hours</c>

00:11:57.509 --> 00:11:57.519 align:start position:0%
calculation that might take hours
 

00:11:57.519 --> 00:11:59.110 align:start position:0%
calculation that might take hours
um<00:11:58.079><c> it's</c><00:11:58.240><c> not</c><00:11:58.399><c> going</c><00:11:58.480><c> to</c><00:11:58.560><c> be</c><00:11:58.639><c> particularly</c>

00:11:59.110 --> 00:11:59.120 align:start position:0%
um it's not going to be particularly
 

00:11:59.120 --> 00:12:00.949 align:start position:0%
um it's not going to be particularly
thinking<00:11:59.440><c> about</c><00:11:59.839><c> oh</c><00:12:00.079><c> now</c><00:12:00.240><c> it'll</c><00:12:00.320><c> be</c><00:12:00.480><c> time</c><00:12:00.639><c> to</c>

00:12:00.949 --> 00:12:00.959 align:start position:0%
thinking about oh now it'll be time to
 

00:12:00.959 --> 00:12:02.790 align:start position:0%
thinking about oh now it'll be time to
good<00:12:01.120><c> time</c><00:12:01.360><c> to</c><00:12:01.440><c> let</c><00:12:01.600><c> something</c><00:12:01.839><c> else</c><00:12:02.079><c> run</c>

00:12:02.790 --> 00:12:02.800 align:start position:0%
good time to let something else run
 

00:12:02.800 --> 00:12:05.990 align:start position:0%
good time to let something else run
so<00:12:03.360><c> um</c><00:12:03.680><c> it's</c><00:12:03.839><c> most</c><00:12:04.160><c> convenient</c><00:12:05.440><c> to</c><00:12:05.600><c> have</c><00:12:05.839><c> some</c>

00:12:05.990 --> 00:12:06.000 align:start position:0%
so um it's most convenient to have some
 

00:12:06.000 --> 00:12:06.470 align:start position:0%
so um it's most convenient to have some
way<00:12:06.160><c> of</c>

00:12:06.470 --> 00:12:06.480 align:start position:0%
way of
 

00:12:06.480 --> 00:12:08.550 align:start position:0%
way of
sort<00:12:06.800><c> of</c><00:12:06.959><c> automatically</c><00:12:07.519><c> revoking</c><00:12:08.079><c> control</c>

00:12:08.550 --> 00:12:08.560 align:start position:0%
sort of automatically revoking control
 

00:12:08.560 --> 00:12:10.550 align:start position:0%
sort of automatically revoking control
from<00:12:09.040><c> some</c><00:12:09.360><c> long</c><00:12:09.600><c> running</c><00:12:09.839><c> compute</c><00:12:10.240><c> bound</c>

00:12:10.550 --> 00:12:10.560 align:start position:0%
from some long running compute bound
 

00:12:10.560 --> 00:12:11.990 align:start position:0%
from some long running compute bound
process

00:12:11.990 --> 00:12:12.000 align:start position:0%
process
 

00:12:12.000 --> 00:12:13.829 align:start position:0%
process
setting<00:12:12.320><c> it</c><00:12:12.480><c> aside</c><00:12:12.959><c> and</c><00:12:13.120><c> maybe</c><00:12:13.440><c> running</c><00:12:13.760><c> it</c>

00:12:13.829 --> 00:12:13.839 align:start position:0%
setting it aside and maybe running it
 

00:12:13.839 --> 00:12:17.030 align:start position:0%
setting it aside and maybe running it
later

00:12:17.030 --> 00:12:17.040 align:start position:0%
 
 

00:12:17.040 --> 00:12:18.230 align:start position:0%
 
all<00:12:17.120><c> right</c><00:12:17.279><c> so</c><00:12:17.440><c> i'm</c><00:12:17.600><c> going</c><00:12:17.680><c> to</c><00:12:17.839><c> talk</c><00:12:18.000><c> about</c>

00:12:18.230 --> 00:12:18.240 align:start position:0%
all right so i'm going to talk about
 

00:12:18.240 --> 00:12:20.949 align:start position:0%
all right so i'm going to talk about
these<00:12:19.120><c> i'm</c><00:12:19.279><c> actually</c><00:12:19.600><c> going</c><00:12:19.680><c> to</c><00:12:19.760><c> talk</c><00:12:19.920><c> about</c>

00:12:20.949 --> 00:12:20.959 align:start position:0%
these i'm actually going to talk about
 

00:12:20.959 --> 00:12:22.790 align:start position:0%
these i'm actually going to talk about
the<00:12:21.120><c> machinery</c><00:12:21.680><c> for</c><00:12:22.000><c> dealing</c><00:12:22.320><c> with</c><00:12:22.480><c> compute</c>

00:12:22.790 --> 00:12:22.800 align:start position:0%
the machinery for dealing with compute
 

00:12:22.800 --> 00:12:24.230 align:start position:0%
the machinery for dealing with compute
bound<00:12:23.120><c> threads</c>

00:12:24.230 --> 00:12:24.240 align:start position:0%
bound threads
 

00:12:24.240 --> 00:12:28.710 align:start position:0%
bound threads
first<00:12:27.200><c> and</c><00:12:27.440><c> the</c>

00:12:28.710 --> 00:12:28.720 align:start position:0%
first and the
 

00:12:28.720 --> 00:12:31.110 align:start position:0%
first and the
scheme<00:12:29.120><c> for</c><00:12:29.279><c> that</c><00:12:29.440><c> is</c><00:12:29.600><c> something</c><00:12:29.839><c> you've</c><00:12:30.880><c> come</c>

00:12:31.110 --> 00:12:31.120 align:start position:0%
scheme for that is something you've come
 

00:12:31.120 --> 00:12:32.389 align:start position:0%
scheme for that is something you've come
up<00:12:31.279><c> before</c>

00:12:32.389 --> 00:12:32.399 align:start position:0%
up before
 

00:12:32.399 --> 00:12:38.310 align:start position:0%
up before
and<00:12:32.560><c> that's</c><00:12:32.800><c> timer</c><00:12:36.839><c> interrupts</c>

00:12:38.310 --> 00:12:38.320 align:start position:0%
and that's timer interrupts
 

00:12:38.320 --> 00:12:42.629 align:start position:0%
and that's timer interrupts
and<00:12:38.639><c> the</c><00:12:38.880><c> idea</c><00:12:39.200><c> here</c><00:12:40.560><c> is</c><00:12:40.720><c> that</c><00:12:41.200><c> there's</c><00:12:41.519><c> a</c>

00:12:42.629 --> 00:12:42.639 align:start position:0%
and the idea here is that there's a
 

00:12:42.639 --> 00:12:45.590 align:start position:0%
and the idea here is that there's a
piece<00:12:42.880><c> of</c><00:12:42.959><c> hardware</c><00:12:43.680><c> on</c><00:12:44.079><c> each</c><00:12:44.720><c> cpu</c><00:12:45.200><c> on</c><00:12:45.360><c> each</c>

00:12:45.590 --> 00:12:45.600 align:start position:0%
piece of hardware on each cpu on each
 

00:12:45.600 --> 00:12:46.310 align:start position:0%
piece of hardware on each cpu on each
core

00:12:46.310 --> 00:12:46.320 align:start position:0%
core
 

00:12:46.320 --> 00:12:49.910 align:start position:0%
core
that<00:12:46.480><c> generates</c><00:12:47.040><c> periodic</c><00:12:48.160><c> interrupts</c>

00:12:49.910 --> 00:12:49.920 align:start position:0%
that generates periodic interrupts
 

00:12:49.920 --> 00:12:52.069 align:start position:0%
that generates periodic interrupts
and<00:12:50.160><c> the</c><00:12:50.639><c> xp6</c><00:12:51.200><c> or</c><00:12:51.360><c> any</c><00:12:51.519><c> operating</c><00:12:51.839><c> system</c>

00:12:52.069 --> 00:12:52.079 align:start position:0%
and the xp6 or any operating system
 

00:12:52.079 --> 00:12:53.590 align:start position:0%
and the xp6 or any operating system
really<00:12:52.320><c> arranges</c><00:12:52.800><c> to</c><00:12:52.959><c> you</c><00:12:53.040><c> know</c><00:12:53.200><c> have</c><00:12:53.360><c> those</c>

00:12:53.590 --> 00:12:53.600 align:start position:0%
really arranges to you know have those
 

00:12:53.600 --> 00:12:55.509 align:start position:0%
really arranges to you know have those
interrupts<00:12:54.000><c> delivered</c><00:12:54.320><c> to</c><00:12:54.399><c> the</c><00:12:54.480><c> kernel</c><00:12:54.880><c> so</c>

00:12:55.509 --> 00:12:55.519 align:start position:0%
interrupts delivered to the kernel so
 

00:12:55.519 --> 00:12:57.509 align:start position:0%
interrupts delivered to the kernel so
even<00:12:55.839><c> if</c><00:12:56.079><c> we're</c><00:12:56.240><c> running</c><00:12:56.639><c> at</c><00:12:56.720><c> user</c><00:12:57.040><c> level</c><00:12:57.360><c> and</c>

00:12:57.509 --> 00:12:57.519 align:start position:0%
even if we're running at user level and
 

00:12:57.519 --> 00:12:58.949 align:start position:0%
even if we're running at user level and
some<00:12:57.839><c> loop</c><00:12:58.160><c> that's</c><00:12:58.399><c> you</c><00:12:58.560><c> know</c>

00:12:58.949 --> 00:12:58.959 align:start position:0%
some loop that's you know
 

00:12:58.959 --> 00:13:01.750 align:start position:0%
some loop that's you know
computing<00:12:59.440><c> the</c><00:12:59.519><c> first</c><00:12:59.760><c> billion</c><00:13:00.480><c> digits</c><00:13:00.880><c> of</c><00:13:00.959><c> pi</c>

00:13:01.750 --> 00:13:01.760 align:start position:0%
computing the first billion digits of pi
 

00:13:01.760 --> 00:13:02.069 align:start position:0%
computing the first billion digits of pi
um

00:13:02.069 --> 00:13:02.079 align:start position:0%
um
 

00:13:02.079 --> 00:13:05.030 align:start position:0%
um
nevertheless<00:13:03.440><c> uh</c><00:13:03.760><c> the</c><00:13:04.079><c> timer</c><00:13:04.480><c> interrupts</c><00:13:04.959><c> to</c>

00:13:05.030 --> 00:13:05.040 align:start position:0%
nevertheless uh the timer interrupts to
 

00:13:05.040 --> 00:13:06.470 align:start position:0%
nevertheless uh the timer interrupts to
go<00:13:05.200><c> off</c><00:13:05.360><c> at</c><00:13:05.519><c> some</c><00:13:05.680><c> point</c><00:13:05.839><c> maybe</c><00:13:06.160><c> every</c><00:13:06.320><c> 10</c>

00:13:06.470 --> 00:13:06.480 align:start position:0%
go off at some point maybe every 10
 

00:13:06.480 --> 00:13:08.150 align:start position:0%
go off at some point maybe every 10
milliseconds

00:13:08.150 --> 00:13:08.160 align:start position:0%
milliseconds
 

00:13:08.160 --> 00:13:09.910 align:start position:0%
milliseconds
and<00:13:08.399><c> transfer</c><00:13:08.800><c> control</c><00:13:09.200><c> from</c><00:13:09.440><c> that</c><00:13:09.600><c> user</c>

00:13:09.910 --> 00:13:09.920 align:start position:0%
and transfer control from that user
 

00:13:09.920 --> 00:13:12.310 align:start position:0%
and transfer control from that user
level<00:13:10.240><c> code</c><00:13:11.040><c> into</c><00:13:11.279><c> the</c><00:13:11.519><c> interrupt</c><00:13:11.839><c> handler</c><00:13:12.240><c> in</c>

00:13:12.310 --> 00:13:12.320 align:start position:0%
level code into the interrupt handler in
 

00:13:12.320 --> 00:13:13.190 align:start position:0%
level code into the interrupt handler in
the<00:13:12.399><c> kernel</c><00:13:12.800><c> and</c><00:13:12.880><c> so</c>

00:13:13.190 --> 00:13:13.200 align:start position:0%
the kernel and so
 

00:13:13.200 --> 00:13:16.069 align:start position:0%
the kernel and so
that's<00:13:13.440><c> the</c><00:13:13.600><c> sort</c><00:13:13.760><c> of</c><00:13:14.560><c> first</c><00:13:14.880><c> step</c><00:13:15.360><c> in</c><00:13:15.920><c> the</c>

00:13:16.069 --> 00:13:16.079 align:start position:0%
that's the sort of first step in the
 

00:13:16.079 --> 00:13:17.430 align:start position:0%
that's the sort of first step in the
kernel<00:13:16.480><c> being</c><00:13:16.720><c> able</c><00:13:16.880><c> to</c>

00:13:17.430 --> 00:13:17.440 align:start position:0%
kernel being able to
 

00:13:17.440 --> 00:13:19.509 align:start position:0%
kernel being able to
gain<00:13:17.760><c> control</c><00:13:18.240><c> to</c><00:13:18.399><c> switch</c><00:13:18.720><c> among</c><00:13:19.120><c> different</c>

00:13:19.509 --> 00:13:19.519 align:start position:0%
gain control to switch among different
 

00:13:19.519 --> 00:13:21.750 align:start position:0%
gain control to switch among different
user<00:13:19.920><c> level</c><00:13:20.320><c> processes</c><00:13:20.880><c> through</c><00:13:21.200><c> user</c><00:13:21.519><c> level</c>

00:13:21.750 --> 00:13:21.760 align:start position:0%
user level processes through user level
 

00:13:21.760 --> 00:13:22.629 align:start position:0%
user level processes through user level
threads

00:13:22.629 --> 00:13:22.639 align:start position:0%
threads
 

00:13:22.639 --> 00:13:24.870 align:start position:0%
threads
even<00:13:22.959><c> if</c><00:13:23.120><c> those</c><00:13:23.360><c> user</c><00:13:23.600><c> level</c><00:13:23.839><c> threads</c><00:13:24.639><c> aren't</c>

00:13:24.870 --> 00:13:24.880 align:start position:0%
even if those user level threads aren't
 

00:13:24.880 --> 00:13:29.110 align:start position:0%
even if those user level threads aren't
cooperative

00:13:29.110 --> 00:13:29.120 align:start position:0%
 
 

00:13:29.120 --> 00:13:31.750 align:start position:0%
 
and<00:13:29.600><c> the</c><00:13:29.760><c> basic</c><00:13:30.160><c> scheme</c><00:13:30.560><c> is</c><00:13:30.720><c> that</c><00:13:31.519><c> in</c><00:13:31.600><c> the</c>

00:13:31.750 --> 00:13:31.760 align:start position:0%
and the basic scheme is that in the
 

00:13:31.760 --> 00:13:33.670 align:start position:0%
and the basic scheme is that in the
interrupt<00:13:32.160><c> handler</c><00:13:32.639><c> so</c><00:13:32.800><c> we</c><00:13:32.880><c> can</c><00:13:33.040><c> have</c><00:13:33.200><c> a</c>

00:13:33.670 --> 00:13:33.680 align:start position:0%
interrupt handler so we can have a
 

00:13:33.680 --> 00:13:38.150 align:start position:0%
interrupt handler so we can have a
kernel<00:13:34.079><c> handler</c><00:13:35.680><c> for</c><00:13:35.839><c> these</c><00:13:36.079><c> interrupts</c>

00:13:38.150 --> 00:13:38.160 align:start position:0%
kernel handler for these interrupts
 

00:13:38.160 --> 00:13:41.269 align:start position:0%
kernel handler for these interrupts
and<00:13:38.720><c> we'll</c><00:13:39.040><c> see</c><00:13:40.480><c> that</c><00:13:40.880><c> uh</c>

00:13:41.269 --> 00:13:41.279 align:start position:0%
and we'll see that uh
 

00:13:41.279 --> 00:13:44.310 align:start position:0%
and we'll see that uh
the<00:13:41.440><c> kernel</c><00:13:41.839><c> handler</c><00:13:43.279><c> yields</c>

00:13:44.310 --> 00:13:44.320 align:start position:0%
the kernel handler yields
 

00:13:44.320 --> 00:13:46.150 align:start position:0%
the kernel handler yields
this<00:13:44.560><c> is</c><00:13:44.639><c> the</c><00:13:44.800><c> sort</c><00:13:45.040><c> of</c><00:13:45.279><c> usual</c><00:13:45.680><c> name</c><00:13:45.839><c> for</c><00:13:46.000><c> this</c>

00:13:46.150 --> 00:13:46.160 align:start position:0%
this is the sort of usual name for this
 

00:13:46.160 --> 00:13:49.350 align:start position:0%
this is the sort of usual name for this
it<00:13:46.320><c> yields</c>

00:13:49.350 --> 00:13:49.360 align:start position:0%
 
 

00:13:49.360 --> 00:13:51.829 align:start position:0%
 
the<00:13:49.600><c> kernel</c><00:13:50.000><c> handler</c><00:13:50.800><c> sort</c><00:13:50.959><c> of</c><00:13:51.040><c> voluntarily</c>

00:13:51.829 --> 00:13:51.839 align:start position:0%
the kernel handler sort of voluntarily
 

00:13:51.839 --> 00:13:53.750 align:start position:0%
the kernel handler sort of voluntarily
yields<00:13:52.240><c> the</c><00:13:52.399><c> cpu</c><00:13:52.800><c> back</c><00:13:52.959><c> to</c><00:13:53.120><c> the</c><00:13:53.199><c> scheduler</c><00:13:53.680><c> and</c>

00:13:53.750 --> 00:13:53.760 align:start position:0%
yields the cpu back to the scheduler and
 

00:13:53.760 --> 00:13:54.790 align:start position:0%
yields the cpu back to the scheduler and
tells<00:13:54.000><c> the</c><00:13:54.079><c> schedule</c><00:13:54.480><c> look</c>

00:13:54.790 --> 00:13:54.800 align:start position:0%
tells the schedule look
 

00:13:54.800 --> 00:13:58.150 align:start position:0%
tells the schedule look
you<00:13:54.959><c> can</c><00:13:55.120><c> let</c><00:13:55.279><c> something</c><00:13:55.600><c> else</c><00:13:55.839><c> run</c><00:13:56.079><c> now</c>

00:13:58.150 --> 00:13:58.160 align:start position:0%
you can let something else run now
 

00:13:58.160 --> 00:14:01.990 align:start position:0%
you can let something else run now
and<00:13:58.320><c> this</c><00:13:58.560><c> yielding</c><00:13:59.120><c> is</c><00:13:59.279><c> really</c><00:13:59.600><c> a</c><00:14:00.079><c> form</c><00:14:00.839><c> of</c>

00:14:01.990 --> 00:14:02.000 align:start position:0%
and this yielding is really a form of
 

00:14:02.000 --> 00:14:05.350 align:start position:0%
and this yielding is really a form of
thread<00:14:02.399><c> switch</c><00:14:02.959><c> that</c><00:14:04.480><c> saves</c><00:14:04.720><c> away</c><00:14:04.959><c> the</c><00:14:05.120><c> state</c>

00:14:05.350 --> 00:14:05.360 align:start position:0%
thread switch that saves away the state
 

00:14:05.360 --> 00:14:06.629 align:start position:0%
thread switch that saves away the state
of<00:14:05.440><c> the</c><00:14:05.519><c> current</c><00:14:05.760><c> thread</c><00:14:06.079><c> and</c>

00:14:06.629 --> 00:14:06.639 align:start position:0%
of the current thread and
 

00:14:06.639 --> 00:14:09.670 align:start position:0%
of the current thread and
so<00:14:06.800><c> can</c><00:14:06.959><c> be</c><00:14:07.120><c> restored</c><00:14:07.519><c> later</c><00:14:08.560><c> um</c>

00:14:09.670 --> 00:14:09.680 align:start position:0%
so can be restored later um
 

00:14:09.680 --> 00:14:11.590 align:start position:0%
so can be restored later um
you<00:14:09.839><c> know</c><00:14:10.240><c> as</c><00:14:10.480><c> we'll</c><00:14:10.639><c> see</c><00:14:10.880><c> the</c><00:14:11.279><c> you</c><00:14:11.440><c> know</c><00:14:11.519><c> the</c>

00:14:11.590 --> 00:14:11.600 align:start position:0%
you know as we'll see the you know the
 

00:14:11.600 --> 00:14:12.870 align:start position:0%
you know as we'll see the you know the
full<00:14:11.839><c> story</c><00:14:12.160><c> here</c><00:14:12.320><c> actually</c><00:14:12.560><c> you've</c><00:14:12.639><c> seen</c><00:14:12.880><c> a</c>

00:14:12.870 --> 00:14:12.880 align:start position:0%
full story here actually you've seen a
 

00:14:12.880 --> 00:14:14.150 align:start position:0%
full story here actually you've seen a
lot<00:14:13.040><c> of</c><00:14:13.120><c> the</c><00:14:13.199><c> full</c><00:14:13.440><c> story</c><00:14:13.680><c> here</c><00:14:13.839><c> because</c><00:14:14.079><c> it</c>

00:14:14.150 --> 00:14:14.160 align:start position:0%
lot of the full story here because it
 

00:14:14.160 --> 00:14:15.829 align:start position:0%
lot of the full story here because it
involves<00:14:14.560><c> an</c><00:14:14.720><c> interrupt</c>

00:14:15.829 --> 00:14:15.839 align:start position:0%
involves an interrupt
 

00:14:15.839 --> 00:14:17.110 align:start position:0%
involves an interrupt
which<00:14:16.079><c> you</c><00:14:16.160><c> already</c><00:14:16.399><c> know</c><00:14:16.560><c> about</c><00:14:16.800><c> the</c><00:14:16.880><c> full</c>

00:14:17.110 --> 00:14:17.120 align:start position:0%
which you already know about the full
 

00:14:17.120 --> 00:14:19.189 align:start position:0%
which you already know about the full
story<00:14:17.360><c> somewhat</c><00:14:17.680><c> complex</c><00:14:18.240><c> but</c><00:14:18.800><c> the</c><00:14:18.880><c> basic</c>

00:14:19.189 --> 00:14:19.199 align:start position:0%
story somewhat complex but the basic
 

00:14:19.199 --> 00:14:21.269 align:start position:0%
story somewhat complex but the basic
idea<00:14:19.440><c> is</c><00:14:19.519><c> that</c><00:14:19.600><c> a</c><00:14:19.760><c> timer</c><00:14:20.079><c> interrupt</c>

00:14:21.269 --> 00:14:21.279 align:start position:0%
idea is that a timer interrupt
 

00:14:21.279 --> 00:14:22.710 align:start position:0%
idea is that a timer interrupt
gives<00:14:21.519><c> control</c><00:14:21.839><c> to</c><00:14:21.920><c> the</c><00:14:22.000><c> kernel</c><00:14:22.399><c> and</c><00:14:22.560><c> the</c>

00:14:22.710 --> 00:14:22.720 align:start position:0%
gives control to the kernel and the
 

00:14:22.720 --> 00:14:24.790 align:start position:0%
gives control to the kernel and the
kernel<00:14:23.360><c> voluntarily</c><00:14:24.160><c> yields</c>

00:14:24.790 --> 00:14:24.800 align:start position:0%
kernel voluntarily yields
 

00:14:24.800 --> 00:14:28.710 align:start position:0%
kernel voluntarily yields
the<00:14:24.959><c> cpu</c><00:14:26.720><c> this</c><00:14:26.959><c> is</c><00:14:27.120><c> called</c><00:14:27.600><c> as</c><00:14:27.760><c> a</c><00:14:27.920><c> piece</c><00:14:28.160><c> of</c>

00:14:28.710 --> 00:14:28.720 align:start position:0%
the cpu this is called as a piece of
 

00:14:28.720 --> 00:14:39.750 align:start position:0%
the cpu this is called as a piece of
terminology<00:14:29.440><c> preemptive</c><00:14:30.079><c> scheduling</c>

00:14:39.750 --> 00:14:39.760 align:start position:0%
 
 

00:14:39.760 --> 00:14:41.189 align:start position:0%
 
what<00:14:39.920><c> that</c><00:14:40.079><c> means</c><00:14:40.480><c> is</c><00:14:40.639><c> that</c><00:14:40.880><c> with</c><00:14:41.120><c> the</c>

00:14:41.189 --> 00:14:41.199 align:start position:0%
what that means is that with the
 

00:14:41.199 --> 00:14:43.750 align:start position:0%
what that means is that with the
preempted<00:14:41.760><c> means</c><00:14:42.399><c> is</c><00:14:42.560><c> that</c>

00:14:43.750 --> 00:14:43.760 align:start position:0%
preempted means is that
 

00:14:43.760 --> 00:14:46.230 align:start position:0%
preempted means is that
even<00:14:44.000><c> if</c><00:14:44.160><c> the</c><00:14:44.560><c> code</c><00:14:44.800><c> that's</c><00:14:44.959><c> running</c><00:14:45.279><c> doesn't</c>

00:14:46.230 --> 00:14:46.240 align:start position:0%
even if the code that's running doesn't
 

00:14:46.240 --> 00:14:48.069 align:start position:0%
even if the code that's running doesn't
you<00:14:46.320><c> know</c><00:14:46.480><c> doesn't</c><00:14:46.800><c> want</c><00:14:47.040><c> to</c>

00:14:48.069 --> 00:14:48.079 align:start position:0%
you know doesn't want to
 

00:14:48.079 --> 00:14:50.310 align:start position:0%
you know doesn't want to
you<00:14:48.240><c> know</c><00:14:48.639><c> doesn't</c><00:14:49.279><c> explicitly</c><00:14:49.920><c> yield</c><00:14:50.240><c> the</c>

00:14:50.310 --> 00:14:50.320 align:start position:0%
you know doesn't explicitly yield the
 

00:14:50.320 --> 00:14:51.110 align:start position:0%
you know doesn't explicitly yield the
cpu

00:14:51.110 --> 00:14:51.120 align:start position:0%
cpu
 

00:14:51.120 --> 00:14:52.550 align:start position:0%
cpu
the<00:14:51.279><c> timer</c><00:14:51.680><c> interrupt</c><00:14:52.000><c> is</c><00:14:52.160><c> going</c><00:14:52.240><c> to</c><00:14:52.320><c> take</c>

00:14:52.550 --> 00:14:52.560 align:start position:0%
the timer interrupt is going to take
 

00:14:52.560 --> 00:14:55.030 align:start position:0%
the timer interrupt is going to take
control<00:14:52.959><c> away</c><00:14:54.079><c> and</c><00:14:54.240><c> we're</c><00:14:54.399><c> going</c><00:14:54.480><c> to</c><00:14:54.639><c> yield</c>

00:14:55.030 --> 00:14:55.040 align:start position:0%
control away and we're going to yield
 

00:14:55.040 --> 00:14:56.629 align:start position:0%
control away and we're going to yield
for<00:14:55.279><c> it</c><00:14:55.440><c> and</c><00:14:55.600><c> the</c><00:14:55.680><c> opposite</c><00:14:56.079><c> of</c><00:14:56.160><c> preemptive</c>

00:14:56.629 --> 00:14:56.639 align:start position:0%
for it and the opposite of preemptive
 

00:14:56.639 --> 00:14:58.230 align:start position:0%
for it and the opposite of preemptive
scheduling

00:14:58.230 --> 00:14:58.240 align:start position:0%
scheduling
 

00:14:58.240 --> 00:15:01.509 align:start position:0%
scheduling
might<00:14:58.399><c> be</c><00:14:58.560><c> called</c><00:15:00.560><c> maybe</c><00:15:00.880><c> voluntary</c>

00:15:01.509 --> 00:15:01.519 align:start position:0%
might be called maybe voluntary
 

00:15:01.519 --> 00:15:04.949 align:start position:0%
might be called maybe voluntary
scheduling

00:15:04.949 --> 00:15:04.959 align:start position:0%
 
 

00:15:04.959 --> 00:15:06.870 align:start position:0%
 
and<00:15:05.120><c> the</c><00:15:05.279><c> interesting</c><00:15:05.600><c> thing</c><00:15:05.839><c> is</c><00:15:06.079><c> that</c><00:15:06.240><c> the</c>

00:15:06.870 --> 00:15:06.880 align:start position:0%
and the interesting thing is that the
 

00:15:06.880 --> 00:15:09.030 align:start position:0%
and the interesting thing is that the
you<00:15:06.959><c> know</c><00:15:07.120><c> the</c><00:15:07.279><c> implementation</c><00:15:08.000><c> in</c><00:15:08.160><c> xv6</c><00:15:08.720><c> and</c>

00:15:09.030 --> 00:15:09.040 align:start position:0%
you know the implementation in xv6 and
 

00:15:09.040 --> 00:15:10.550 align:start position:0%
you know the implementation in xv6 and
other<00:15:09.279><c> operating</c><00:15:09.600><c> systems</c><00:15:10.000><c> of</c><00:15:10.079><c> preemptive</c>

00:15:10.550 --> 00:15:10.560 align:start position:0%
other operating systems of preemptive
 

00:15:10.560 --> 00:15:12.389 align:start position:0%
other operating systems of preemptive
scheduling<00:15:11.199><c> is</c><00:15:11.279><c> this</c><00:15:11.519><c> time</c><00:15:11.760><c> interrupt</c><00:15:12.160><c> which</c>

00:15:12.389 --> 00:15:12.399 align:start position:0%
scheduling is this time interrupt which
 

00:15:12.399 --> 00:15:14.629 align:start position:0%
scheduling is this time interrupt which
forcibly<00:15:12.880><c> takes</c><00:15:13.040><c> away</c><00:15:13.279><c> the</c><00:15:13.440><c> cpu</c>

00:15:14.629 --> 00:15:14.639 align:start position:0%
forcibly takes away the cpu
 

00:15:14.639 --> 00:15:16.550 align:start position:0%
forcibly takes away the cpu
and<00:15:14.720><c> then</c><00:15:14.880><c> the</c><00:15:15.040><c> kernel</c><00:15:15.760><c> basically</c><00:15:16.160><c> does</c><00:15:16.399><c> a</c>

00:15:16.550 --> 00:15:16.560 align:start position:0%
and then the kernel basically does a
 

00:15:16.560 --> 00:15:18.230 align:start position:0%
and then the kernel basically does a
voluntary

00:15:18.230 --> 00:15:18.240 align:start position:0%
voluntary
 

00:15:18.240 --> 00:15:20.230 align:start position:0%
voluntary
yield<00:15:18.639><c> or</c><00:15:18.800><c> thread</c><00:15:19.199><c> thread</c><00:15:19.440><c> switch</c><00:15:19.760><c> on</c><00:15:19.839><c> behalf</c>

00:15:20.230 --> 00:15:20.240 align:start position:0%
yield or thread thread switch on behalf
 

00:15:20.240 --> 00:15:24.310 align:start position:0%
yield or thread thread switch on behalf
of<00:15:20.320><c> that</c><00:15:20.560><c> process</c>

00:15:24.310 --> 00:15:24.320 align:start position:0%
 
 

00:15:24.320 --> 00:15:27.910 align:start position:0%
 
now<00:15:24.959><c> um</c><00:15:25.920><c> another</c>

00:15:27.910 --> 00:15:27.920 align:start position:0%
now um another
 

00:15:27.920 --> 00:15:30.310 align:start position:0%
now um another
just<00:15:28.079><c> piece</c><00:15:28.320><c> of</c><00:15:29.120><c> terminology</c><00:15:29.759><c> that</c><00:15:29.920><c> comes</c><00:15:30.160><c> up</c>

00:15:30.310 --> 00:15:30.320 align:start position:0%
just piece of terminology that comes up
 

00:15:30.320 --> 00:15:31.430 align:start position:0%
just piece of terminology that comes up
here<00:15:30.639><c> is</c><00:15:30.800><c> that</c>

00:15:31.430 --> 00:15:31.440 align:start position:0%
here is that
 

00:15:31.440 --> 00:15:34.150 align:start position:0%
here is that
while<00:15:31.680><c> the</c><00:15:31.759><c> thread's</c><00:15:32.240><c> running</c><00:15:33.519><c> there's</c><00:15:33.759><c> a</c><00:15:34.000><c> we</c>

00:15:34.150 --> 00:15:34.160 align:start position:0%
while the thread's running there's a we
 

00:15:34.160 --> 00:15:35.749 align:start position:0%
while the thread's running there's a we
need<00:15:34.320><c> to</c>

00:15:35.749 --> 00:15:35.759 align:start position:0%
need to
 

00:15:35.759 --> 00:15:37.990 align:start position:0%
need to
distinguish<00:15:37.199><c> the</c><00:15:37.360><c> system</c><00:15:37.680><c> needs</c><00:15:37.839><c> to</c>

00:15:37.990 --> 00:15:38.000 align:start position:0%
distinguish the system needs to
 

00:15:38.000 --> 00:15:39.590 align:start position:0%
distinguish the system needs to
distinguish<00:15:38.399><c> between</c><00:15:38.800><c> threads</c><00:15:39.120><c> that</c><00:15:39.279><c> are</c>

00:15:39.590 --> 00:15:39.600 align:start position:0%
distinguish between threads that are
 

00:15:39.600 --> 00:15:42.790 align:start position:0%
distinguish between threads that are
currently<00:15:40.320><c> actually</c><00:15:40.720><c> running</c><00:15:41.120><c> on</c><00:15:41.360><c> some</c><00:15:41.680><c> cpu</c>

00:15:42.790 --> 00:15:42.800 align:start position:0%
currently actually running on some cpu
 

00:15:42.800 --> 00:15:45.990 align:start position:0%
currently actually running on some cpu
versus<00:15:43.680><c> threads</c><00:15:44.160><c> that</c><00:15:44.320><c> would</c><00:15:44.639><c> like</c><00:15:44.959><c> to</c><00:15:45.199><c> run</c>

00:15:45.990 --> 00:15:46.000 align:start position:0%
versus threads that would like to run
 

00:15:46.000 --> 00:15:48.230 align:start position:0%
versus threads that would like to run
but<00:15:46.320><c> aren't</c><00:15:46.639><c> currently</c><00:15:47.040><c> running</c><00:15:47.360><c> on</c><00:15:47.519><c> any</c><00:15:47.759><c> cpu</c>

00:15:48.230 --> 00:15:48.240 align:start position:0%
but aren't currently running on any cpu
 

00:15:48.240 --> 00:15:50.550 align:start position:0%
but aren't currently running on any cpu
but<00:15:48.399><c> you</c><00:15:48.480><c> know</c><00:15:48.959><c> could</c><00:15:49.199><c> run</c><00:15:49.519><c> if</c><00:15:49.680><c> a</c><00:15:49.759><c> cpu</c><00:15:50.160><c> became</c>

00:15:50.550 --> 00:15:50.560 align:start position:0%
but you know could run if a cpu became
 

00:15:50.560 --> 00:15:51.430 align:start position:0%
but you know could run if a cpu became
free

00:15:51.430 --> 00:15:51.440 align:start position:0%
free
 

00:15:51.440 --> 00:15:53.590 align:start position:0%
free
versus<00:15:51.839><c> threads</c><00:15:52.399><c> that</c><00:15:52.880><c> actually</c><00:15:53.120><c> don't</c><00:15:53.360><c> want</c>

00:15:53.590 --> 00:15:53.600 align:start position:0%
versus threads that actually don't want
 

00:15:53.600 --> 00:15:55.509 align:start position:0%
versus threads that actually don't want
to<00:15:53.680><c> run</c><00:15:54.000><c> because</c><00:15:54.160><c> they're</c><00:15:54.399><c> waiting</c><00:15:54.880><c> for</c><00:15:55.120><c> i</c><00:15:55.279><c> o</c>

00:15:55.509 --> 00:15:55.519 align:start position:0%
to run because they're waiting for i o
 

00:15:55.519 --> 00:15:56.150 align:start position:0%
to run because they're waiting for i o
or<00:15:55.680><c> waiting</c>

00:15:56.150 --> 00:15:56.160 align:start position:0%
or waiting
 

00:15:56.160 --> 00:15:59.990 align:start position:0%
or waiting
for<00:15:56.320><c> some</c><00:15:56.480><c> event</c><00:15:58.480><c> and</c><00:15:58.720><c> unfortunately</c><00:15:59.279><c> this</c>

00:15:59.990 --> 00:16:00.000 align:start position:0%
for some event and unfortunately this
 

00:16:00.000 --> 00:16:03.189 align:start position:0%
for some event and unfortunately this
distinction<00:16:00.560><c> is</c><00:16:00.720><c> often</c><00:16:00.959><c> called</c><00:16:01.199><c> state</c><00:16:02.959><c> even</c>

00:16:03.189 --> 00:16:03.199 align:start position:0%
distinction is often called state even
 

00:16:03.199 --> 00:16:03.990 align:start position:0%
distinction is often called state even
though

00:16:03.990 --> 00:16:04.000 align:start position:0%
though
 

00:16:04.000 --> 00:16:05.269 align:start position:0%
though
the<00:16:04.160><c> full</c><00:16:04.399><c> state</c><00:16:04.560><c> of</c><00:16:04.720><c> a</c><00:16:04.800><c> thread</c><00:16:04.959><c> is</c><00:16:05.040><c> actually</c>

00:16:05.269 --> 00:16:05.279 align:start position:0%
the full state of a thread is actually
 

00:16:05.279 --> 00:16:09.990 align:start position:0%
the full state of a thread is actually
much<00:16:05.519><c> more</c><00:16:05.680><c> complicated</c><00:16:06.160><c> than</c><00:16:06.240><c> that</c>

00:16:09.990 --> 00:16:10.000 align:start position:0%
 
 

00:16:10.000 --> 00:16:12.550 align:start position:0%
 
since<00:16:10.240><c> this</c><00:16:10.480><c> is</c><00:16:10.560><c> going</c><00:16:10.639><c> to</c><00:16:10.800><c> come</c><00:16:11.040><c> up</c><00:16:12.320><c> i</c><00:16:12.480><c> just</c>

00:16:12.550 --> 00:16:12.560 align:start position:0%
since this is going to come up i just
 

00:16:12.560 --> 00:16:13.189 align:start position:0%
since this is going to come up i just
want<00:16:12.720><c> to</c>

00:16:13.189 --> 00:16:13.199 align:start position:0%
want to
 

00:16:13.199 --> 00:16:14.550 align:start position:0%
want to
list<00:16:13.519><c> out</c><00:16:13.600><c> a</c><00:16:13.680><c> couple</c><00:16:13.920><c> of</c><00:16:14.000><c> states</c><00:16:14.320><c> that</c><00:16:14.399><c> we'll</c>

00:16:14.550 --> 00:16:14.560 align:start position:0%
list out a couple of states that we'll
 

00:16:14.560 --> 00:16:16.310 align:start position:0%
list out a couple of states that we'll
be<00:16:14.720><c> seeing</c>

00:16:16.310 --> 00:16:16.320 align:start position:0%
be seeing
 

00:16:16.320 --> 00:16:18.710 align:start position:0%
be seeing
and<00:16:16.639><c> these</c><00:16:16.800><c> are</c><00:16:16.959><c> states</c><00:16:17.360><c> that</c><00:16:17.920><c> xv6</c><00:16:18.480><c> actually</c>

00:16:18.710 --> 00:16:18.720 align:start position:0%
and these are states that xv6 actually
 

00:16:18.720 --> 00:16:19.829 align:start position:0%
and these are states that xv6 actually
maintains<00:16:19.279><c> there's</c>

00:16:19.829 --> 00:16:19.839 align:start position:0%
maintains there's
 

00:16:19.839 --> 00:16:21.749 align:start position:0%
maintains there's
a<00:16:20.000><c> state</c><00:16:20.240><c> called</c><00:16:20.480><c> running</c><00:16:20.880><c> which</c><00:16:21.040><c> means</c><00:16:21.440><c> ah</c>

00:16:21.749 --> 00:16:21.759 align:start position:0%
a state called running which means ah
 

00:16:21.759 --> 00:16:23.509 align:start position:0%
a state called running which means ah
it's<00:16:21.920><c> actually</c><00:16:22.160><c> executing</c><00:16:22.639><c> on</c><00:16:22.800><c> some</c>

00:16:23.509 --> 00:16:23.519 align:start position:0%
it's actually executing on some
 

00:16:23.519 --> 00:16:26.629 align:start position:0%
it's actually executing on some
core<00:16:23.839><c> on</c><00:16:24.000><c> some</c><00:16:24.160><c> cpu</c><00:16:24.639><c> right</c><00:16:24.800><c> now</c><00:16:25.680><c> there's</c>

00:16:26.629 --> 00:16:26.639 align:start position:0%
core on some cpu right now there's
 

00:16:26.639 --> 00:16:29.829 align:start position:0%
core on some cpu right now there's
runable

00:16:29.829 --> 00:16:29.839 align:start position:0%
 
 

00:16:29.839 --> 00:16:31.269 align:start position:0%
 
which<00:16:30.000><c> means</c><00:16:30.240><c> not</c><00:16:30.399><c> currently</c><00:16:30.800><c> executing</c>

00:16:31.269 --> 00:16:31.279 align:start position:0%
which means not currently executing
 

00:16:31.279 --> 00:16:34.069 align:start position:0%
which means not currently executing
anywhere<00:16:31.600><c> but</c><00:16:32.160><c> and</c><00:16:32.320><c> just</c><00:16:32.480><c> a</c><00:16:32.639><c> saved</c><00:16:33.040><c> state</c>

00:16:34.069 --> 00:16:34.079 align:start position:0%
anywhere but and just a saved state
 

00:16:34.079 --> 00:16:35.430 align:start position:0%
anywhere but and just a saved state
but<00:16:34.240><c> would</c><00:16:34.399><c> like</c><00:16:34.560><c> to</c><00:16:34.720><c> run</c><00:16:35.040><c> as</c><00:16:35.120><c> soon</c><00:16:35.279><c> as</c>

00:16:35.430 --> 00:16:35.440 align:start position:0%
but would like to run as soon as
 

00:16:35.440 --> 00:16:38.069 align:start position:0%
but would like to run as soon as
possible<00:16:36.480><c> and</c><00:16:36.560><c> then</c><00:16:36.800><c> it</c><00:16:36.880><c> turns</c><00:16:37.199><c> out</c><00:16:37.279><c> there's</c><00:16:37.519><c> a</c>

00:16:38.069 --> 00:16:38.079 align:start position:0%
possible and then it turns out there's a
 

00:16:38.079 --> 00:16:40.150 align:start position:0%
possible and then it turns out there's a
state<00:16:38.399><c> which</c><00:16:39.120><c> won't</c><00:16:39.279><c> come</c><00:16:39.519><c> out</c><00:16:39.600><c> much</c><00:16:39.839><c> today</c>

00:16:40.150 --> 00:16:40.160 align:start position:0%
state which won't come out much today
 

00:16:40.160 --> 00:16:41.749 align:start position:0%
state which won't come out much today
but<00:16:40.560><c> will</c><00:16:40.800><c> come</c><00:16:40.959><c> up</c><00:16:41.040><c> next</c><00:16:41.279><c> week</c><00:16:41.519><c> called</c>

00:16:41.749 --> 00:16:41.759 align:start position:0%
but will come up next week called
 

00:16:41.759 --> 00:16:43.030 align:start position:0%
but will come up next week called
sleeping<00:16:42.240><c> which</c><00:16:42.480><c> is</c>

00:16:43.030 --> 00:16:43.040 align:start position:0%
sleeping which is
 

00:16:43.040 --> 00:16:44.710 align:start position:0%
sleeping which is
means<00:16:43.279><c> the</c><00:16:43.519><c> threads</c><00:16:43.839><c> waiting</c><00:16:44.079><c> for</c><00:16:44.160><c> some</c><00:16:44.399><c> i</c><00:16:44.560><c> o</c>

00:16:44.710 --> 00:16:44.720 align:start position:0%
means the threads waiting for some i o
 

00:16:44.720 --> 00:16:47.189 align:start position:0%
means the threads waiting for some i o
event<00:16:45.440><c> and</c><00:16:45.839><c> only</c><00:16:46.079><c> wants</c><00:16:46.320><c> to</c><00:16:46.399><c> run</c><00:16:46.639><c> after</c><00:16:46.880><c> the</c><00:16:47.040><c> i</c>

00:16:47.189 --> 00:16:47.199 align:start position:0%
event and only wants to run after the i
 

00:16:47.199 --> 00:16:48.150 align:start position:0%
event and only wants to run after the i
o<00:16:47.279><c> event</c><00:16:47.600><c> occurs</c>

00:16:48.150 --> 00:16:48.160 align:start position:0%
o event occurs
 

00:16:48.160 --> 00:16:49.829 align:start position:0%
o event occurs
so<00:16:48.399><c> today</c><00:16:48.639><c> we're</c><00:16:48.800><c> mostly</c><00:16:49.120><c> concerned</c><00:16:49.519><c> with</c>

00:16:49.829 --> 00:16:49.839 align:start position:0%
so today we're mostly concerned with
 

00:16:49.839 --> 00:16:51.350 align:start position:0%
so today we're mostly concerned with
running<00:16:50.160><c> and</c><00:16:50.240><c> runnable</c><00:16:50.639><c> threads</c>

00:16:51.350 --> 00:16:51.360 align:start position:0%
running and runnable threads
 

00:16:51.360 --> 00:16:53.509 align:start position:0%
running and runnable threads
and<00:16:51.759><c> what</c><00:16:51.920><c> this</c><00:16:52.160><c> preemptive</c><00:16:52.639><c> switch</c><00:16:53.040><c> does</c>

00:16:53.509 --> 00:16:53.519 align:start position:0%
and what this preemptive switch does
 

00:16:53.519 --> 00:16:54.949 align:start position:0%
and what this preemptive switch does
what<00:16:53.680><c> this</c><00:16:53.839><c> timer</c><00:16:54.240><c> interrupt</c><00:16:54.560><c> does</c>

00:16:54.949 --> 00:16:54.959 align:start position:0%
what this timer interrupt does
 

00:16:54.959 --> 00:16:57.030 align:start position:0%
what this timer interrupt does
and<00:16:55.199><c> yield</c><00:16:55.519><c> is</c><00:16:55.600><c> basically</c><00:16:56.160><c> convert</c><00:16:56.560><c> a</c><00:16:56.639><c> running</c>

00:16:57.030 --> 00:16:57.040 align:start position:0%
and yield is basically convert a running
 

00:16:57.040 --> 00:16:58.790 align:start position:0%
and yield is basically convert a running
thread<00:16:57.519><c> whatever</c><00:16:57.920><c> thread</c><00:16:58.160><c> was</c><00:16:58.399><c> interrupted</c>

00:16:58.790 --> 00:16:58.800 align:start position:0%
thread whatever thread was interrupted
 

00:16:58.800 --> 00:16:59.829 align:start position:0%
thread whatever thread was interrupted
by<00:16:58.959><c> the</c><00:16:59.120><c> timer</c>

00:16:59.829 --> 00:16:59.839 align:start position:0%
by the timer
 

00:16:59.839 --> 00:17:02.710 align:start position:0%
by the timer
into<00:17:00.399><c> a</c><00:17:00.800><c> runnable</c><00:17:01.279><c> thread</c><00:17:02.079><c> that</c><00:17:02.240><c> is</c><00:17:02.480><c> thread</c>

00:17:02.710 --> 00:17:02.720 align:start position:0%
into a runnable thread that is thread
 

00:17:02.720 --> 00:17:03.350 align:start position:0%
into a runnable thread that is thread
that's

00:17:03.350 --> 00:17:03.360 align:start position:0%
that's
 

00:17:03.360 --> 00:17:05.669 align:start position:0%
that's
by<00:17:03.600><c> yielding</c><00:17:04.160><c> or</c><00:17:04.799><c> converting</c><00:17:05.199><c> that</c><00:17:05.360><c> thread</c>

00:17:05.669 --> 00:17:05.679 align:start position:0%
by yielding or converting that thread
 

00:17:05.679 --> 00:17:06.870 align:start position:0%
by yielding or converting that thread
into<00:17:05.839><c> a</c><00:17:05.919><c> thread</c><00:17:06.079><c> that's</c><00:17:06.240><c> not</c><00:17:06.400><c> running</c><00:17:06.720><c> right</c>

00:17:06.870 --> 00:17:06.880 align:start position:0%
into a thread that's not running right
 

00:17:06.880 --> 00:17:07.510 align:start position:0%
into a thread that's not running right
now<00:17:07.120><c> but</c>

00:17:07.510 --> 00:17:07.520 align:start position:0%
now but
 

00:17:07.520 --> 00:17:09.110 align:start position:0%
now but
would<00:17:07.679><c> actually</c><00:17:07.919><c> like</c><00:17:08.160><c> to</c><00:17:08.480><c> clearly</c><00:17:08.799><c> because</c>

00:17:09.110 --> 00:17:09.120 align:start position:0%
would actually like to clearly because
 

00:17:09.120 --> 00:17:11.110 align:start position:0%
would actually like to clearly because
it<00:17:09.280><c> was</c><00:17:09.520><c> running</c><00:17:09.839><c> at</c><00:17:10.000><c> the</c><00:17:10.079><c> time</c><00:17:10.319><c> of</c><00:17:10.400><c> the</c>

00:17:11.110 --> 00:17:11.120 align:start position:0%
it was running at the time of the
 

00:17:11.120 --> 00:17:14.230 align:start position:0%
it was running at the time of the
timer<00:17:11.439><c> interrupt</c>

00:17:14.230 --> 00:17:14.240 align:start position:0%
 
 

00:17:14.240 --> 00:17:17.510 align:start position:0%
 
okay<00:17:14.559><c> so</c><00:17:15.120><c> um</c><00:17:16.240><c> running</c><00:17:16.559><c> thread</c><00:17:16.880><c> it's</c><00:17:17.199><c> program</c>

00:17:17.510 --> 00:17:17.520 align:start position:0%
okay so um running thread it's program
 

00:17:17.520 --> 00:17:19.189 align:start position:0%
okay so um running thread it's program
counter<00:17:17.919><c> and</c><00:17:18.079><c> registers</c><00:17:18.880><c> are</c>

00:17:19.189 --> 00:17:19.199 align:start position:0%
counter and registers are
 

00:17:19.199 --> 00:17:21.750 align:start position:0%
counter and registers are
actually<00:17:19.679><c> in</c><00:17:19.839><c> the</c><00:17:20.000><c> cpu</c><00:17:21.199><c> you</c><00:17:21.360><c> know</c><00:17:21.520><c> in</c><00:17:21.600><c> the</c>

00:17:21.750 --> 00:17:21.760 align:start position:0%
actually in the cpu you know in the
 

00:17:21.760 --> 00:17:23.590 align:start position:0%
actually in the cpu you know in the
hardware<00:17:22.079><c> registers</c><00:17:22.559><c> of</c><00:17:22.720><c> the</c><00:17:22.799><c> cpu</c><00:17:23.360><c> that's</c>

00:17:23.590 --> 00:17:23.600 align:start position:0%
hardware registers of the cpu that's
 

00:17:23.600 --> 00:17:25.350 align:start position:0%
hardware registers of the cpu that's
executing<00:17:24.160><c> it</c>

00:17:25.350 --> 00:17:25.360 align:start position:0%
executing it
 

00:17:25.360 --> 00:17:28.470 align:start position:0%
executing it
a<00:17:25.600><c> runnable</c><00:17:26.160><c> thread</c><00:17:26.480><c> though</c><00:17:26.880><c> has</c><00:17:27.199><c> no</c><00:17:28.160><c> you</c><00:17:28.319><c> know</c>

00:17:28.470 --> 00:17:28.480 align:start position:0%
a runnable thread though has no you know
 

00:17:28.480 --> 00:17:30.390 align:start position:0%
a runnable thread though has no you know
it's<00:17:28.559><c> not</c><00:17:28.880><c> doesn't</c><00:17:29.200><c> have</c><00:17:29.360><c> a</c><00:17:29.440><c> cpu</c><00:17:29.840><c> associated</c>

00:17:30.390 --> 00:17:30.400 align:start position:0%
it's not doesn't have a cpu associated
 

00:17:30.400 --> 00:17:31.510 align:start position:0%
it's not doesn't have a cpu associated
with<00:17:30.559><c> it</c>

00:17:31.510 --> 00:17:31.520 align:start position:0%
with it
 

00:17:31.520 --> 00:17:33.669 align:start position:0%
with it
and<00:17:31.600><c> therefore</c><00:17:32.000><c> we</c><00:17:32.160><c> need</c><00:17:32.320><c> to</c><00:17:32.640><c> save</c><00:17:33.200><c> for</c><00:17:33.360><c> every</c>

00:17:33.669 --> 00:17:33.679 align:start position:0%
and therefore we need to save for every
 

00:17:33.679 --> 00:17:34.950 align:start position:0%
and therefore we need to save for every
runnable<00:17:34.160><c> state</c>

00:17:34.950 --> 00:17:34.960 align:start position:0%
runnable state
 

00:17:34.960 --> 00:17:38.310 align:start position:0%
runnable state
we<00:17:35.120><c> need</c><00:17:35.280><c> to</c><00:17:35.600><c> save</c><00:17:37.679><c> whatever</c>

00:17:38.310 --> 00:17:38.320 align:start position:0%
we need to save whatever
 

00:17:38.320 --> 00:17:41.110 align:start position:0%
we need to save whatever
cpu<00:17:38.960><c> state</c><00:17:39.360><c> whatever</c><00:17:39.919><c> state</c><00:17:40.240><c> the</c><00:17:40.320><c> cpu</c><00:17:40.880><c> was</c>

00:17:41.110 --> 00:17:41.120 align:start position:0%
cpu state whatever state the cpu was
 

00:17:41.120 --> 00:17:42.630 align:start position:0%
cpu state whatever state the cpu was
keeping

00:17:42.630 --> 00:17:42.640 align:start position:0%
keeping
 

00:17:42.640 --> 00:17:45.990 align:start position:0%
keeping
when<00:17:42.960><c> that</c><00:17:44.480><c> thread</c><00:17:44.799><c> was</c><00:17:45.039><c> running</c><00:17:45.600><c> so</c><00:17:45.760><c> we</c><00:17:45.840><c> need</c>

00:17:45.990 --> 00:17:46.000 align:start position:0%
when that thread was running so we need
 

00:17:46.000 --> 00:17:47.669 align:start position:0%
when that thread was running so we need
to<00:17:46.080><c> copy</c><00:17:46.400><c> the</c><00:17:46.559><c> cpu</c><00:17:47.039><c> contents</c>

00:17:47.669 --> 00:17:47.679 align:start position:0%
to copy the cpu contents
 

00:17:47.679 --> 00:17:48.950 align:start position:0%
to copy the cpu contents
you<00:17:47.760><c> know</c><00:17:47.840><c> which</c><00:17:48.000><c> is</c><00:17:48.080><c> not</c><00:17:48.320><c> ram</c><00:17:48.640><c> but</c><00:17:48.799><c> just</c>

00:17:48.950 --> 00:17:48.960 align:start position:0%
you know which is not ram but just
 

00:17:48.960 --> 00:17:51.909 align:start position:0%
you know which is not ram but just
registers<00:17:49.440><c> really</c><00:17:50.080><c> um</c><00:17:50.480><c> from</c><00:17:50.799><c> the</c><00:17:50.960><c> cpu</c>

00:17:51.909 --> 00:17:51.919 align:start position:0%
registers really um from the cpu
 

00:17:51.919 --> 00:17:54.310 align:start position:0%
registers really um from the cpu
into<00:17:52.240><c> memory</c><00:17:52.640><c> somewhere</c><00:17:53.280><c> to</c><00:17:53.440><c> save</c><00:17:53.760><c> them</c><00:17:54.160><c> when</c>

00:17:54.310 --> 00:17:54.320 align:start position:0%
into memory somewhere to save them when
 

00:17:54.320 --> 00:17:54.950 align:start position:0%
into memory somewhere to save them when
we

00:17:54.950 --> 00:17:54.960 align:start position:0%
we
 

00:17:54.960 --> 00:17:56.630 align:start position:0%
we
turn<00:17:55.200><c> a</c><00:17:55.280><c> thread</c><00:17:55.520><c> from</c><00:17:55.679><c> running</c><00:17:55.919><c> to</c><00:17:56.080><c> runnable</c>

00:17:56.630 --> 00:17:56.640 align:start position:0%
turn a thread from running to runnable
 

00:17:56.640 --> 00:17:57.990 align:start position:0%
turn a thread from running to runnable
and<00:17:56.799><c> again</c><00:17:57.039><c> this</c><00:17:57.280><c> is</c><00:17:57.440><c> the</c>

00:17:57.990 --> 00:17:58.000 align:start position:0%
and again this is the
 

00:17:58.000 --> 00:17:59.830 align:start position:0%
and again this is the
basically<00:17:58.720><c> the</c><00:17:58.880><c> state</c><00:17:59.120><c> we</c><00:17:59.280><c> have</c><00:17:59.360><c> to</c>

00:17:59.830 --> 00:17:59.840 align:start position:0%
basically the state we have to
 

00:17:59.840 --> 00:18:01.350 align:start position:0%
basically the state we have to
explicitly<00:18:00.559><c> save</c><00:18:00.799><c> here's</c>

00:18:01.350 --> 00:18:01.360 align:start position:0%
explicitly save here's
 

00:18:01.360 --> 00:18:04.070 align:start position:0%
explicitly save here's
just<00:18:01.600><c> the</c><00:18:01.760><c> state</c><00:18:02.960><c> the</c><00:18:03.120><c> executing</c><00:18:03.679><c> state</c><00:18:04.000><c> and</c>

00:18:04.070 --> 00:18:04.080 align:start position:0%
just the state the executing state and
 

00:18:04.080 --> 00:18:05.669 align:start position:0%
just the state the executing state and
the<00:18:04.160><c> cpu</c><00:18:04.640><c> which</c><00:18:04.799><c> is</c><00:18:04.960><c> the</c>

00:18:05.669 --> 00:18:05.679 align:start position:0%
the cpu which is the
 

00:18:05.679 --> 00:18:09.029 align:start position:0%
the cpu which is the
uh<00:18:06.160><c> program</c><00:18:06.559><c> counter</c><00:18:07.039><c> and</c><00:18:07.200><c> the</c>

00:18:09.029 --> 00:18:09.039 align:start position:0%
uh program counter and the
 

00:18:09.039 --> 00:18:11.430 align:start position:0%
uh program counter and the
registers<00:18:10.160><c> and</c><00:18:10.320><c> the</c><00:18:10.400><c> cpu</c><00:18:10.799><c> so</c><00:18:10.960><c> these</c><00:18:11.200><c> need</c><00:18:11.360><c> to</c>

00:18:11.430 --> 00:18:11.440 align:start position:0%
registers and the cpu so these need to
 

00:18:11.440 --> 00:18:12.870 align:start position:0%
registers and the cpu so these need to
be<00:18:11.600><c> saved</c>

00:18:12.870 --> 00:18:12.880 align:start position:0%
be saved
 

00:18:12.880 --> 00:18:15.669 align:start position:0%
be saved
when<00:18:13.120><c> we</c><00:18:13.200><c> convert</c><00:18:13.600><c> a</c><00:18:14.080><c> thread</c><00:18:14.320><c> to</c><00:18:14.480><c> runnable</c>

00:18:15.669 --> 00:18:15.679 align:start position:0%
when we convert a thread to runnable
 

00:18:15.679 --> 00:18:17.750 align:start position:0%
when we convert a thread to runnable
when<00:18:15.840><c> some</c><00:18:16.000><c> scheduler</c><00:18:16.559><c> finally</c><00:18:16.799><c> decides</c><00:18:17.360><c> to</c>

00:18:17.750 --> 00:18:17.760 align:start position:0%
when some scheduler finally decides to
 

00:18:17.760 --> 00:18:20.710 align:start position:0%
when some scheduler finally decides to
run<00:18:18.320><c> a</c><00:18:18.480><c> runnable</c><00:18:18.880><c> thread</c><00:18:19.840><c> then</c><00:18:20.080><c> as</c><00:18:20.480><c> part</c><00:18:20.640><c> of</c>

00:18:20.710 --> 00:18:20.720 align:start position:0%
run a runnable thread then as part of
 

00:18:20.720 --> 00:18:22.150 align:start position:0%
run a runnable thread then as part of
the<00:18:20.799><c> many</c><00:18:21.039><c> steps</c><00:18:21.360><c> and</c><00:18:21.520><c> getting</c><00:18:21.679><c> that</c><00:18:21.840><c> thread</c>

00:18:22.150 --> 00:18:22.160 align:start position:0%
the many steps and getting that thread
 

00:18:22.160 --> 00:18:23.029 align:start position:0%
the many steps and getting that thread
going<00:18:22.480><c> again</c>

00:18:23.029 --> 00:18:23.039 align:start position:0%
going again
 

00:18:23.039 --> 00:18:25.990 align:start position:0%
going again
and<00:18:23.200><c> resuming</c><00:18:23.679><c> it</c><00:18:25.120><c> we're</c><00:18:25.360><c> going</c><00:18:25.440><c> to</c><00:18:25.600><c> see</c><00:18:25.840><c> that</c>

00:18:25.990 --> 00:18:26.000 align:start position:0%
and resuming it we're going to see that
 

00:18:26.000 --> 00:18:27.990 align:start position:0%
and resuming it we're going to see that
the<00:18:26.320><c> program</c><00:18:26.720><c> count</c><00:18:26.960><c> the</c><00:18:27.200><c> saved</c><00:18:27.679><c> program</c>

00:18:27.990 --> 00:18:28.000 align:start position:0%
the program count the saved program
 

00:18:28.000 --> 00:18:29.669 align:start position:0%
the program count the saved program
counter<00:18:28.400><c> registers</c><00:18:29.039><c> are</c><00:18:29.200><c> copied</c>

00:18:29.669 --> 00:18:29.679 align:start position:0%
counter registers are copied
 

00:18:29.679 --> 00:18:32.950 align:start position:0%
counter registers are copied
back<00:18:30.000><c> into</c><00:18:30.400><c> the</c><00:18:31.520><c> cpus</c>

00:18:32.950 --> 00:18:32.960 align:start position:0%
back into the cpus
 

00:18:32.960 --> 00:18:34.470 align:start position:0%
back into the cpus
actual<00:18:33.280><c> register</c><00:18:33.760><c> on</c><00:18:33.840><c> the</c><00:18:33.919><c> cpu</c><00:18:34.240><c> that</c><00:18:34.400><c> the</c>

00:18:34.470 --> 00:18:34.480 align:start position:0%
actual register on the cpu that the
 

00:18:34.480 --> 00:18:38.870 align:start position:0%
actual register on the cpu that the
scheduler<00:18:34.880><c> decides</c><00:18:35.200><c> to</c><00:18:35.280><c> run</c><00:18:35.440><c> it</c><00:18:35.600><c> on</c>

00:18:38.870 --> 00:18:38.880 align:start position:0%
 
 

00:18:38.880 --> 00:18:41.990 align:start position:0%
 
all<00:18:39.039><c> right</c><00:18:40.400><c> any</c><00:18:40.640><c> questions</c><00:18:40.960><c> about</c><00:18:41.200><c> these</c><00:18:41.760><c> this</c>

00:18:41.990 --> 00:18:42.000 align:start position:0%
all right any questions about these this
 

00:18:42.000 --> 00:18:49.750 align:start position:0%
all right any questions about these this
terminology

00:18:49.750 --> 00:18:49.760 align:start position:0%
 
 

00:18:49.760 --> 00:18:51.669 align:start position:0%
 
all<00:18:49.919><c> right</c><00:18:50.160><c> i'm</c><00:18:50.320><c> going</c><00:18:50.400><c> to</c><00:18:50.880><c> now</c><00:18:51.120><c> sort</c><00:18:51.360><c> of</c><00:18:51.440><c> talk</c>

00:18:51.669 --> 00:18:51.679 align:start position:0%
all right i'm going to now sort of talk
 

00:18:51.679 --> 00:18:52.789 align:start position:0%
all right i'm going to now sort of talk
about<00:18:52.000><c> a</c>

00:18:52.789 --> 00:18:52.799 align:start position:0%
about a
 

00:18:52.799 --> 00:18:57.909 align:start position:0%
about a
sort<00:18:53.039><c> of</c><00:18:53.120><c> more</c><00:18:53.520><c> xv6</c><00:18:54.640><c> oriented</c><00:18:55.120><c> view</c><00:18:55.360><c> of</c><00:18:55.440><c> things</c>

00:18:57.909 --> 00:18:57.919 align:start position:0%
 
 

00:18:57.919 --> 00:19:01.430 align:start position:0%
 
i'm<00:18:58.080><c> going</c><00:18:58.240><c> to</c><00:18:58.320><c> draw</c><00:18:59.280><c> two</c><00:18:59.520><c> pictures</c><00:18:59.919><c> really</c><00:19:00.320><c> of</c>

00:19:01.430 --> 00:19:01.440 align:start position:0%
i'm going to draw two pictures really of
 

00:19:01.440 --> 00:19:03.270 align:start position:0%
i'm going to draw two pictures really of
threads<00:19:01.760><c> in</c><00:19:01.919><c> xy6</c><00:19:02.400><c> a</c><00:19:02.559><c> kind</c><00:19:02.720><c> of</c><00:19:02.799><c> simplified</c>

00:19:03.270 --> 00:19:03.280 align:start position:0%
threads in xy6 a kind of simplified
 

00:19:03.280 --> 00:19:05.510 align:start position:0%
threads in xy6 a kind of simplified
picture<00:19:03.679><c> and</c><00:19:03.840><c> a</c><00:19:04.080><c> more</c><00:19:04.320><c> detailed</c><00:19:04.799><c> picture</c>

00:19:05.510 --> 00:19:05.520 align:start position:0%
picture and a more detailed picture
 

00:19:05.520 --> 00:19:08.950 align:start position:0%
picture and a more detailed picture
so<00:19:05.679><c> as</c><00:19:05.840><c> usual</c><00:19:06.080><c> we</c><00:19:06.240><c> have</c><00:19:06.320><c> the</c><00:19:06.480><c> user</c>

00:19:08.950 --> 00:19:08.960 align:start position:0%
 
 

00:19:08.960 --> 00:19:12.870 align:start position:0%
 
stuff<00:19:09.280><c> up</c><00:19:09.440><c> here</c><00:19:09.760><c> and</c><00:19:09.919><c> the</c><00:19:10.400><c> kernel</c><00:19:10.720><c> down</c><00:19:10.960><c> here</c>

00:19:12.870 --> 00:19:12.880 align:start position:0%
stuff up here and the kernel down here
 

00:19:12.880 --> 00:19:15.990 align:start position:0%
stuff up here and the kernel down here
um<00:19:14.000><c> we</c><00:19:14.160><c> might</c><00:19:14.320><c> be</c><00:19:14.480><c> running</c><00:19:15.200><c> you</c><00:19:15.280><c> know</c><00:19:15.520><c> multiple</c>

00:19:15.990 --> 00:19:16.000 align:start position:0%
um we might be running you know multiple
 

00:19:16.000 --> 00:19:16.950 align:start position:0%
um we might be running you know multiple
processes

00:19:16.950 --> 00:19:16.960 align:start position:0%
processes
 

00:19:16.960 --> 00:19:19.510 align:start position:0%
processes
at<00:19:17.200><c> user</c><00:19:17.520><c> level</c><00:19:17.919><c> maybe</c><00:19:18.640><c> you</c><00:19:18.720><c> know</c><00:19:18.880><c> the</c><00:19:19.280><c> c</c>

00:19:19.510 --> 00:19:19.520 align:start position:0%
at user level maybe you know the c
 

00:19:19.520 --> 00:19:20.549 align:start position:0%
at user level maybe you know the c
compiler

00:19:20.549 --> 00:19:20.559 align:start position:0%
compiler
 

00:19:20.559 --> 00:19:24.549 align:start position:0%
compiler
and<00:19:20.720><c> the</c><00:19:21.280><c> ls</c><00:19:21.919><c> and</c><00:19:22.080><c> a</c><00:19:22.840><c> shell</c>

00:19:24.549 --> 00:19:24.559 align:start position:0%
and the ls and a shell
 

00:19:24.559 --> 00:19:26.310 align:start position:0%
and the ls and a shell
they<00:19:24.720><c> may</c><00:19:24.880><c> or</c><00:19:24.960><c> may</c><00:19:25.120><c> not</c><00:19:25.360><c> be</c><00:19:25.760><c> all</c><00:19:25.919><c> wanting</c><00:19:26.240><c> to</c>

00:19:26.310 --> 00:19:26.320 align:start position:0%
they may or may not be all wanting to
 

00:19:26.320 --> 00:19:29.270 align:start position:0%
they may or may not be all wanting to
run<00:19:26.559><c> at</c><00:19:26.640><c> the</c><00:19:26.720><c> same</c><00:19:26.960><c> time</c>

00:19:29.270 --> 00:19:29.280 align:start position:0%
run at the same time
 

00:19:29.280 --> 00:19:36.830 align:start position:0%
run at the same time
at<00:19:29.440><c> user</c><00:19:29.840><c> level</c><00:19:30.720><c> each</c><00:19:30.960><c> of</c><00:19:31.120><c> these</c><00:19:31.760><c> processes</c>

00:19:36.830 --> 00:19:36.840 align:start position:0%
 
 

00:19:36.840 --> 00:19:38.310 align:start position:0%
 
has

00:19:38.310 --> 00:19:38.320 align:start position:0%
has
 

00:19:38.320 --> 00:19:41.909 align:start position:0%
has
you<00:19:38.400><c> know</c><00:19:38.559><c> it</c><00:19:38.640><c> has</c><00:19:38.880><c> memory</c><00:19:40.480><c> and</c><00:19:40.640><c> of</c><00:19:40.880><c> particular</c>

00:19:41.909 --> 00:19:41.919 align:start position:0%
you know it has memory and of particular
 

00:19:41.919 --> 00:19:43.830 align:start position:0%
you know it has memory and of particular
interest<00:19:42.240><c> to</c><00:19:42.480><c> us</c><00:19:42.880><c> each</c><00:19:43.120><c> of</c><00:19:43.200><c> these</c><00:19:43.360><c> processes</c>

00:19:43.830 --> 00:19:43.840 align:start position:0%
interest to us each of these processes
 

00:19:43.840 --> 00:19:47.270 align:start position:0%
interest to us each of these processes
has<00:19:44.080><c> a</c><00:19:44.240><c> user</c><00:19:44.720><c> stack</c>

00:19:47.270 --> 00:19:47.280 align:start position:0%
 
 

00:19:47.280 --> 00:19:50.950 align:start position:0%
 
and<00:19:47.919><c> while</c><00:19:48.160><c> it's</c><00:19:48.400><c> running</c><00:19:48.799><c> it</c><00:19:48.960><c> as</c><00:19:49.200><c> registers</c>

00:19:50.950 --> 00:19:50.960 align:start position:0%
and while it's running it as registers
 

00:19:50.960 --> 00:19:53.830 align:start position:0%
and while it's running it as registers
in<00:19:51.120><c> the</c><00:19:51.200><c> risc</c><00:19:51.600><c> 5</c><00:19:52.080><c> hardware</c><00:19:52.640><c> so</c><00:19:53.200><c> pc</c><00:19:53.600><c> plus</c>

00:19:53.830 --> 00:19:53.840 align:start position:0%
in the risc 5 hardware so pc plus
 

00:19:53.840 --> 00:19:55.590 align:start position:0%
in the risc 5 hardware so pc plus
registers

00:19:55.590 --> 00:19:55.600 align:start position:0%
registers
 

00:19:55.600 --> 00:19:57.350 align:start position:0%
registers
all<00:19:55.679><c> right</c><00:19:55.840><c> so</c><00:19:56.720><c> while</c><00:19:56.960><c> the</c><00:19:57.039><c> program</c><00:19:57.280><c> is</c>

00:19:57.350 --> 00:19:57.360 align:start position:0%
all right so while the program is
 

00:19:57.360 --> 00:19:58.630 align:start position:0%
all right so while the program is
running<00:19:57.840><c> you</c><00:19:57.919><c> know</c><00:19:58.080><c> there's</c>

00:19:58.630 --> 00:19:58.640 align:start position:0%
running you know there's
 

00:19:58.640 --> 00:20:00.070 align:start position:0%
running you know there's
this<00:19:58.880><c> essentially</c><00:19:59.280><c> a</c><00:19:59.360><c> thread</c><00:19:59.600><c> of</c><00:19:59.679><c> control</c>

00:20:00.070 --> 00:20:00.080 align:start position:0%
this essentially a thread of control
 

00:20:00.080 --> 00:20:02.230 align:start position:0%
this essentially a thread of control
that's<00:20:00.799><c> running</c><00:20:01.039><c> up</c><00:20:01.200><c> at</c><00:20:01.280><c> user</c><00:20:01.520><c> level</c>

00:20:02.230 --> 00:20:02.240 align:start position:0%
that's running up at user level
 

00:20:02.240 --> 00:20:04.230 align:start position:0%
that's running up at user level
um<00:20:02.720><c> and</c><00:20:03.120><c> the</c><00:20:03.280><c> way</c><00:20:03.440><c> i'm</c><00:20:03.520><c> going</c><00:20:03.679><c> to</c><00:20:03.760><c> talk</c><00:20:03.919><c> about</c>

00:20:04.230 --> 00:20:04.240 align:start position:0%
um and the way i'm going to talk about
 

00:20:04.240 --> 00:20:06.230 align:start position:0%
um and the way i'm going to talk about
it<00:20:04.480><c> is</c><00:20:04.640><c> as</c><00:20:04.880><c> if</c>

00:20:06.230 --> 00:20:06.240 align:start position:0%
it is as if
 

00:20:06.240 --> 00:20:09.590 align:start position:0%
it is as if
there's<00:20:06.480><c> a</c><00:20:06.640><c> user</c><00:20:07.120><c> thread</c><00:20:07.840><c> that</c><00:20:08.960><c> consists</c><00:20:09.440><c> of</c>

00:20:09.590 --> 00:20:09.600 align:start position:0%
there's a user thread that consists of
 

00:20:09.600 --> 00:20:09.909 align:start position:0%
there's a user thread that consists of
the

00:20:09.909 --> 00:20:09.919 align:start position:0%
the
 

00:20:09.919 --> 00:20:11.990 align:start position:0%
the
user<00:20:10.240><c> stack</c><00:20:10.559><c> user</c><00:20:10.799><c> memory</c><00:20:11.280><c> user</c><00:20:11.679><c> program</c>

00:20:11.990 --> 00:20:12.000 align:start position:0%
user stack user memory user program
 

00:20:12.000 --> 00:20:13.590 align:start position:0%
user stack user memory user program
counter<00:20:12.320><c> user</c><00:20:12.559><c> registers</c>

00:20:13.590 --> 00:20:13.600 align:start position:0%
counter user registers
 

00:20:13.600 --> 00:20:15.350 align:start position:0%
counter user registers
if<00:20:13.840><c> the</c><00:20:13.919><c> program</c><00:20:14.240><c> makes</c><00:20:14.480><c> a</c><00:20:14.559><c> system</c><00:20:14.880><c> callers</c>

00:20:15.350 --> 00:20:15.360 align:start position:0%
if the program makes a system callers
 

00:20:15.360 --> 00:20:17.110 align:start position:0%
if the program makes a system callers
interrupted<00:20:16.080><c> and</c>

00:20:17.110 --> 00:20:17.120 align:start position:0%
interrupted and
 

00:20:17.120 --> 00:20:20.390 align:start position:0%
interrupted and
goes<00:20:17.360><c> into</c><00:20:17.600><c> the</c><00:20:17.679><c> kernel</c><00:20:19.840><c> then</c><00:20:20.000><c> this</c><00:20:20.159><c> stuff</c>

00:20:20.390 --> 00:20:20.400 align:start position:0%
goes into the kernel then this stuff
 

00:20:20.400 --> 00:20:21.430 align:start position:0%
goes into the kernel then this stuff
saved<00:20:20.640><c> away</c><00:20:20.960><c> in</c><00:20:21.039><c> the</c>

00:20:21.430 --> 00:20:21.440 align:start position:0%
saved away in the
 

00:20:21.440 --> 00:20:25.510 align:start position:0%
saved away in the
this<00:20:21.679><c> program's</c><00:20:22.080><c> trap</c><00:20:22.400><c> frame</c><00:20:23.600><c> and</c><00:20:24.400><c> a</c>

00:20:25.510 --> 00:20:25.520 align:start position:0%
this program's trap frame and a
 

00:20:25.520 --> 00:20:29.029 align:start position:0%
this program's trap frame and a
kernel<00:20:26.080><c> the</c><00:20:26.480><c> kernel</c><00:20:26.880><c> thread</c><00:20:27.440><c> for</c>

00:20:29.029 --> 00:20:29.039 align:start position:0%
kernel the kernel thread for
 

00:20:29.039 --> 00:20:32.149 align:start position:0%
kernel the kernel thread for
this<00:20:29.280><c> program</c><00:20:29.600><c> is</c><00:20:29.760><c> activated</c><00:20:30.720><c> and</c><00:20:30.880><c> so</c><00:20:31.840><c> this</c><00:20:32.080><c> is</c>

00:20:32.149 --> 00:20:32.159 align:start position:0%
this program is activated and so this is
 

00:20:32.159 --> 00:20:32.470 align:start position:0%
this program is activated and so this is
the

00:20:32.470 --> 00:20:32.480 align:start position:0%
the
 

00:20:32.480 --> 00:20:35.669 align:start position:0%
the
the<00:20:32.640><c> trap</c><00:20:32.880><c> frame</c><00:20:33.120><c> holds</c><00:20:33.520><c> saved</c><00:20:35.039><c> user</c><00:20:35.440><c> stuff</c>

00:20:35.669 --> 00:20:35.679 align:start position:0%
the trap frame holds saved user stuff
 

00:20:35.679 --> 00:20:36.950 align:start position:0%
the trap frame holds saved user stuff
after<00:20:35.919><c> we</c><00:20:36.000><c> saved</c><00:20:36.240><c> away</c><00:20:36.480><c> the</c><00:20:36.559><c> user</c>

00:20:36.950 --> 00:20:36.960 align:start position:0%
after we saved away the user
 

00:20:36.960 --> 00:20:39.990 align:start position:0%
after we saved away the user
piece<00:20:37.200><c> program</c><00:20:37.520><c> counter</c><00:20:37.919><c> registers</c><00:20:38.960><c> then</c><00:20:39.679><c> we</c>

00:20:39.990 --> 00:20:40.000 align:start position:0%
piece program counter registers then we
 

00:20:40.000 --> 00:20:41.830 align:start position:0%
piece program counter registers then we
switched<00:20:40.320><c> the</c><00:20:40.480><c> cpu</c><00:20:40.960><c> to</c><00:20:41.120><c> using</c><00:20:41.360><c> the</c><00:20:41.520><c> kernel</c>

00:20:41.830 --> 00:20:41.840 align:start position:0%
switched the cpu to using the kernel
 

00:20:41.840 --> 00:20:45.430 align:start position:0%
switched the cpu to using the kernel
stack

00:20:45.430 --> 00:20:45.440 align:start position:0%
 
 

00:20:45.440 --> 00:20:47.029 align:start position:0%
 
and<00:20:45.840><c> you</c><00:20:46.000><c> know</c><00:20:46.159><c> we</c><00:20:46.240><c> don't</c><00:20:46.400><c> need</c><00:20:46.559><c> to</c><00:20:46.640><c> restore</c>

00:20:47.029 --> 00:20:47.039 align:start position:0%
and you know we don't need to restore
 

00:20:47.039 --> 00:20:48.549 align:start position:0%
and you know we don't need to restore
registers<00:20:47.600><c> because</c>

00:20:48.549 --> 00:20:48.559 align:start position:0%
registers because
 

00:20:48.559 --> 00:20:52.549 align:start position:0%
registers because
um<00:20:49.440><c> the</c><00:20:50.880><c> the</c><00:20:51.200><c> kernel</c><00:20:51.600><c> thread</c><00:20:51.919><c> for</c><00:20:52.159><c> process</c>

00:20:52.549 --> 00:20:52.559 align:start position:0%
um the the kernel thread for process
 

00:20:52.559 --> 00:20:53.029 align:start position:0%
um the the kernel thread for process
isn't

00:20:53.029 --> 00:20:53.039 align:start position:0%
isn't
 

00:20:53.039 --> 00:20:54.789 align:start position:0%
isn't
really<00:20:53.440><c> running</c><00:20:53.760><c> and</c><00:20:53.919><c> has</c><00:20:54.080><c> no</c><00:20:54.240><c> real</c><00:20:54.559><c> save</c>

00:20:54.789 --> 00:20:54.799 align:start position:0%
really running and has no real save
 

00:20:54.799 --> 00:20:56.470 align:start position:0%
really running and has no real save
state<00:20:55.600><c> um</c>

00:20:56.470 --> 00:20:56.480 align:start position:0%
state um
 

00:20:56.480 --> 00:20:59.110 align:start position:0%
state um
when<00:20:56.640><c> the</c><00:20:56.720><c> user</c><00:20:57.840><c> thread</c><00:20:58.240><c> is</c><00:20:58.400><c> running</c><00:20:58.880><c> um</c>

00:20:59.110 --> 00:20:59.120 align:start position:0%
when the user thread is running um
 

00:20:59.120 --> 00:21:00.310 align:start position:0%
when the user thread is running um
instead<00:20:59.520><c> it's</c><00:20:59.679><c> sort</c><00:20:59.840><c> of</c><00:20:59.919><c> the</c>

00:21:00.310 --> 00:21:00.320 align:start position:0%
instead it's sort of the
 

00:21:00.320 --> 00:21:02.070 align:start position:0%
instead it's sort of the
kernel<00:21:00.640><c> thread</c><00:21:00.880><c> is</c><00:21:00.960><c> kind</c><00:21:01.120><c> of</c><00:21:01.280><c> activated</c><00:21:01.919><c> on</c>

00:21:02.070 --> 00:21:02.080 align:start position:0%
kernel thread is kind of activated on
 

00:21:02.080 --> 00:21:05.510 align:start position:0%
kernel thread is kind of activated on
its<00:21:02.240><c> stack</c><00:21:02.960><c> the</c><00:21:03.039><c> first</c><00:21:03.360><c> time</c><00:21:03.679><c> in</c>

00:21:05.510 --> 00:21:05.520 align:start position:0%
its stack the first time in
 

00:21:05.520 --> 00:21:12.149 align:start position:0%
its stack the first time in
the<00:21:05.760><c> trampoline</c><00:21:06.400><c> and</c><00:21:07.520><c> user</c><00:21:07.919><c> trap</c><00:21:08.240><c> code</c>

00:21:12.149 --> 00:21:12.159 align:start position:0%
 
 

00:21:12.159 --> 00:21:13.669 align:start position:0%
 
and<00:21:12.240><c> then</c><00:21:12.480><c> the</c><00:21:12.559><c> kernel</c><00:21:12.880><c> runs</c><00:21:13.200><c> for</c><00:21:13.280><c> a</c><00:21:13.360><c> while</c>

00:21:13.669 --> 00:21:13.679 align:start position:0%
and then the kernel runs for a while
 

00:21:13.679 --> 00:21:15.510 align:start position:0%
and then the kernel runs for a while
maybe<00:21:14.400><c> running</c><00:21:14.640><c> a</c><00:21:14.720><c> system</c><00:21:15.039><c> call</c><00:21:15.280><c> or</c><00:21:15.360><c> an</c>

00:21:15.510 --> 00:21:15.520 align:start position:0%
maybe running a system call or an
 

00:21:15.520 --> 00:21:18.310 align:start position:0%
maybe running a system call or an
interrupt<00:21:15.840><c> handler</c><00:21:16.240><c> or</c><00:21:16.320><c> whatever</c><00:21:16.640><c> it</c><00:21:16.720><c> may</c><00:21:16.880><c> be</c>

00:21:18.310 --> 00:21:18.320 align:start position:0%
interrupt handler or whatever it may be
 

00:21:18.320 --> 00:21:20.950 align:start position:0%
interrupt handler or whatever it may be
and<00:21:18.960><c> sometimes</c><00:21:19.919><c> uh</c><00:21:20.159><c> if</c><00:21:20.320><c> it's</c><00:21:20.400><c> a</c><00:21:20.480><c> system</c><00:21:20.799><c> call</c>

00:21:20.950 --> 00:21:20.960 align:start position:0%
and sometimes uh if it's a system call
 

00:21:20.960 --> 00:21:22.630 align:start position:0%
and sometimes uh if it's a system call
in<00:21:21.039><c> particular</c><00:21:21.440><c> we'll</c><00:21:21.600><c> just</c><00:21:21.760><c> simply</c><00:21:22.080><c> return</c>

00:21:22.630 --> 00:21:22.640 align:start position:0%
in particular we'll just simply return
 

00:21:22.640 --> 00:21:24.310 align:start position:0%
in particular we'll just simply return
from<00:21:22.799><c> this</c><00:21:23.039><c> point</c><00:21:23.360><c> back</c><00:21:23.600><c> to</c><00:21:23.760><c> the</c>

00:21:24.310 --> 00:21:24.320 align:start position:0%
from this point back to the
 

00:21:24.320 --> 00:21:26.630 align:start position:0%
from this point back to the
same<00:21:24.640><c> process</c><00:21:25.120><c> and</c><00:21:25.840><c> the</c><00:21:25.919><c> return</c><00:21:26.240><c> to</c><00:21:26.400><c> user</c>

00:21:26.630 --> 00:21:26.640 align:start position:0%
same process and the return to user
 

00:21:26.640 --> 00:21:27.750 align:start position:0%
same process and the return to user
space<00:21:26.880><c> will</c><00:21:27.039><c> restore</c>

00:21:27.750 --> 00:21:27.760 align:start position:0%
space will restore
 

00:21:27.760 --> 00:21:29.909 align:start position:0%
space will restore
the<00:21:28.240><c> this</c><00:21:28.640><c> program's</c><00:21:29.200><c> program</c><00:21:29.520><c> counter</c><00:21:29.840><c> and</c>

00:21:29.909 --> 00:21:29.919 align:start position:0%
the this program's program counter and
 

00:21:29.919 --> 00:21:30.950 align:start position:0%
the this program's program counter and
registers

00:21:30.950 --> 00:21:30.960 align:start position:0%
registers
 

00:21:30.960 --> 00:21:33.270 align:start position:0%
registers
but<00:21:31.200><c> it</c><00:21:31.280><c> could</c><00:21:31.520><c> also</c><00:21:31.760><c> be</c><00:21:31.919><c> that</c><00:21:32.159><c> instead</c><00:21:32.480><c> of</c>

00:21:33.270 --> 00:21:33.280 align:start position:0%
but it could also be that instead of
 

00:21:33.280 --> 00:21:35.029 align:start position:0%
but it could also be that instead of
simply<00:21:33.600><c> returning</c>

00:21:35.029 --> 00:21:35.039 align:start position:0%
simply returning
 

00:21:35.039 --> 00:21:36.470 align:start position:0%
simply returning
for<00:21:35.200><c> one</c><00:21:35.360><c> reason</c><00:21:35.679><c> or</c><00:21:35.760><c> another</c><00:21:36.080><c> maybe</c><00:21:36.320><c> because</c>

00:21:36.470 --> 00:21:36.480 align:start position:0%
for one reason or another maybe because
 

00:21:36.480 --> 00:21:38.070 align:start position:0%
for one reason or another maybe because
it<00:21:36.559><c> was</c><00:21:36.640><c> a</c><00:21:36.720><c> timer</c><00:21:37.120><c> interrupt</c><00:21:37.679><c> we're</c><00:21:37.840><c> actually</c>

00:21:38.070 --> 00:21:38.080 align:start position:0%
it was a timer interrupt we're actually
 

00:21:38.080 --> 00:21:40.310 align:start position:0%
it was a timer interrupt we're actually
going<00:21:38.240><c> to</c><00:21:38.400><c> switch</c><00:21:38.799><c> to</c><00:21:38.960><c> another</c><00:21:39.360><c> process</c><00:21:39.840><c> and</c>

00:21:40.310 --> 00:21:40.320 align:start position:0%
going to switch to another process and
 

00:21:40.320 --> 00:21:43.110 align:start position:0%
going to switch to another process and
the<00:21:40.559><c> very</c><00:21:40.880><c> high</c><00:21:41.039><c> level</c><00:21:41.280><c> view</c><00:21:41.520><c> of</c><00:21:41.600><c> that</c><00:21:41.840><c> is</c><00:21:42.000><c> that</c>

00:21:43.110 --> 00:21:43.120 align:start position:0%
the very high level view of that is that
 

00:21:43.120 --> 00:21:43.990 align:start position:0%
the very high level view of that is that
if<00:21:43.360><c> the</c>

00:21:43.990 --> 00:21:44.000 align:start position:0%
if the
 

00:21:44.000 --> 00:21:46.789 align:start position:0%
if the
xv6<00:21:44.480><c> scheduler</c><00:21:44.880><c> decides</c><00:21:45.200><c> to</c><00:21:46.320><c> switch</c><00:21:46.640><c> from</c>

00:21:46.789 --> 00:21:46.799 align:start position:0%
xv6 scheduler decides to switch from
 

00:21:46.799 --> 00:21:49.590 align:start position:0%
xv6 scheduler decides to switch from
this<00:21:47.039><c> process</c><00:21:47.600><c> to</c><00:21:47.840><c> a</c><00:21:47.919><c> different</c><00:21:48.159><c> process</c>

00:21:49.590 --> 00:21:49.600 align:start position:0%
this process to a different process
 

00:21:49.600 --> 00:21:51.270 align:start position:0%
this process to a different process
what<00:21:49.840><c> the</c><00:21:50.000><c> first</c><00:21:50.159><c> thing</c><00:21:50.320><c> that</c><00:21:50.480><c> really</c><00:21:50.799><c> happens</c>

00:21:51.270 --> 00:21:51.280 align:start position:0%
what the first thing that really happens
 

00:21:51.280 --> 00:21:53.110 align:start position:0%
what the first thing that really happens
is<00:21:51.440><c> that</c><00:21:51.919><c> we're</c><00:21:52.080><c> going</c><00:21:52.159><c> to</c><00:21:52.400><c> switch</c>

00:21:53.110 --> 00:21:53.120 align:start position:0%
is that we're going to switch
 

00:21:53.120 --> 00:21:55.510 align:start position:0%
is that we're going to switch
kernel<00:21:53.600><c> threads</c><00:21:54.480><c> from</c><00:21:54.799><c> this</c><00:21:55.039><c> processes</c>

00:21:55.510 --> 00:21:55.520 align:start position:0%
kernel threads from this processes
 

00:21:55.520 --> 00:21:56.390 align:start position:0%
kernel threads from this processes
kernel<00:21:55.919><c> thread</c>

00:21:56.390 --> 00:21:56.400 align:start position:0%
kernel thread
 

00:21:56.400 --> 00:21:58.390 align:start position:0%
kernel thread
to<00:21:56.559><c> the</c><00:21:56.720><c> other</c><00:21:56.960><c> processor's</c><00:21:57.440><c> kernel</c><00:21:57.679><c> thread</c>

00:21:58.390 --> 00:21:58.400 align:start position:0%
to the other processor's kernel thread
 

00:21:58.400 --> 00:21:59.750 align:start position:0%
to the other processor's kernel thread
and<00:21:58.480><c> then</c><00:21:58.640><c> the</c><00:21:58.799><c> other</c><00:21:58.960><c> processes</c><00:21:59.440><c> kernel</c>

00:21:59.750 --> 00:21:59.760 align:start position:0%
and then the other processes kernel
 

00:21:59.760 --> 00:22:01.990 align:start position:0%
and then the other processes kernel
thread<00:22:00.000><c> will</c><00:22:00.159><c> return</c><00:22:00.480><c> back</c><00:22:00.640><c> to</c><00:22:00.799><c> user</c><00:22:01.120><c> space</c><00:22:01.520><c> so</c>

00:22:01.990 --> 00:22:02.000 align:start position:0%
thread will return back to user space so
 

00:22:02.000 --> 00:22:03.830 align:start position:0%
thread will return back to user space so
supposing<00:22:02.480><c> that</c><00:22:02.559><c> the</c><00:22:02.720><c> c</c><00:22:02.880><c> compiler</c><00:22:03.280><c> rsa</c><00:22:03.600><c> needs</c>

00:22:03.830 --> 00:22:03.840 align:start position:0%
supposing that the c compiler rsa needs
 

00:22:03.840 --> 00:22:05.510 align:start position:0%
supposing that the c compiler rsa needs
to<00:22:03.919><c> read</c><00:22:04.159><c> the</c><00:22:04.240><c> disk</c>

00:22:05.510 --> 00:22:05.520 align:start position:0%
to read the disk
 

00:22:05.520 --> 00:22:07.990 align:start position:0%
to read the disk
and<00:22:05.679><c> so</c><00:22:05.840><c> it's</c><00:22:06.000><c> going</c><00:22:06.080><c> to</c><00:22:06.159><c> yield</c><00:22:06.480><c> the</c><00:22:06.559><c> cpu</c><00:22:07.840><c> while</c>

00:22:07.990 --> 00:22:08.000 align:start position:0%
and so it's going to yield the cpu while
 

00:22:08.000 --> 00:22:09.590 align:start position:0%
and so it's going to yield the cpu while
it's<00:22:08.240><c> sleeping</c><00:22:08.640><c> to</c><00:22:08.799><c> wait</c><00:22:08.960><c> for</c><00:22:09.120><c> the</c><00:22:09.200><c> disk</c><00:22:09.440><c> read</c>

00:22:09.590 --> 00:22:09.600 align:start position:0%
it's sleeping to wait for the disk read
 

00:22:09.600 --> 00:22:10.390 align:start position:0%
it's sleeping to wait for the disk read
to<00:22:09.760><c> complete</c>

00:22:10.390 --> 00:22:10.400 align:start position:0%
to complete
 

00:22:10.400 --> 00:22:12.710 align:start position:0%
to complete
maybe<00:22:10.720><c> ls</c><00:22:11.200><c> wants</c><00:22:11.440><c> to</c><00:22:11.600><c> execute</c><00:22:12.159><c> and</c><00:22:12.320><c> is</c><00:22:12.559><c> in</c>

00:22:12.710 --> 00:22:12.720 align:start position:0%
maybe ls wants to execute and is in
 

00:22:12.720 --> 00:22:14.630 align:start position:0%
maybe ls wants to execute and is in
runnable<00:22:13.200><c> state</c>

00:22:14.630 --> 00:22:14.640 align:start position:0%
runnable state
 

00:22:14.640 --> 00:22:16.950 align:start position:0%
runnable state
what<00:22:14.880><c> the</c><00:22:14.960><c> xv6</c><00:22:15.520><c> scheduler</c><00:22:15.840><c> maybe</c><00:22:16.320><c> may</c><00:22:16.559><c> do</c><00:22:16.880><c> is</c>

00:22:16.950 --> 00:22:16.960 align:start position:0%
what the xv6 scheduler maybe may do is
 

00:22:16.960 --> 00:22:18.070 align:start position:0%
what the xv6 scheduler maybe may do is
that<00:22:17.440><c> well</c>

00:22:18.070 --> 00:22:18.080 align:start position:0%
that well
 

00:22:18.080 --> 00:22:20.710 align:start position:0%
that well
um<00:22:18.400><c> if</c><00:22:18.720><c> ls</c><00:22:19.120><c> is</c><00:22:19.280><c> in</c><00:22:19.360><c> runnable</c><00:22:19.840><c> state</c><00:22:20.159><c> that</c><00:22:20.320><c> means</c>

00:22:20.710 --> 00:22:20.720 align:start position:0%
um if ls is in runnable state that means
 

00:22:20.720 --> 00:22:22.950 align:start position:0%
um if ls is in runnable state that means
it<00:22:21.039><c> left</c><00:22:21.360><c> off</c><00:22:21.600><c> somewhere</c><00:22:22.000><c> and</c><00:22:22.159><c> its</c><00:22:22.400><c> state</c>

00:22:22.950 --> 00:22:22.960 align:start position:0%
it left off somewhere and its state
 

00:22:22.960 --> 00:22:25.190 align:start position:0%
it left off somewhere and its state
was<00:22:23.200><c> saved</c><00:22:23.520><c> away</c><00:22:24.000><c> possibly</c><00:22:24.400><c> by</c><00:22:24.640><c> a</c><00:22:24.720><c> timer</c>

00:22:25.190 --> 00:22:25.200 align:start position:0%
was saved away possibly by a timer
 

00:22:25.200 --> 00:22:27.270 align:start position:0%
was saved away possibly by a timer
interrupt<00:22:25.840><c> and</c><00:22:26.000><c> so</c><00:22:26.159><c> the</c><00:22:26.320><c> ls</c><00:22:26.880><c> will</c><00:22:27.039><c> actually</c>

00:22:27.270 --> 00:22:27.280 align:start position:0%
interrupt and so the ls will actually
 

00:22:27.280 --> 00:22:28.230 align:start position:0%
interrupt and so the ls will actually
have<00:22:27.440><c> a</c><00:22:27.679><c> saved</c>

00:22:28.230 --> 00:22:28.240 align:start position:0%
have a saved
 

00:22:28.240 --> 00:22:30.789 align:start position:0%
have a saved
trap<00:22:28.559><c> frame</c><00:22:28.799><c> with</c><00:22:28.960><c> user</c><00:22:29.200><c> registers</c><00:22:30.400><c> and</c><00:22:30.559><c> its</c>

00:22:30.789 --> 00:22:30.799 align:start position:0%
trap frame with user registers and its
 

00:22:30.799 --> 00:22:31.750 align:start position:0%
trap frame with user registers and its
own

00:22:31.750 --> 00:22:31.760 align:start position:0%
own
 

00:22:31.760 --> 00:22:35.190 align:start position:0%
own
kernel<00:22:32.159><c> stack</c><00:22:33.600><c> and</c><00:22:33.840><c> as</c><00:22:34.080><c> it</c><00:22:34.159><c> turns</c><00:22:34.400><c> out</c><00:22:34.640><c> a</c><00:22:34.799><c> seed</c>

00:22:35.190 --> 00:22:35.200 align:start position:0%
kernel stack and as it turns out a seed
 

00:22:35.200 --> 00:22:38.230 align:start position:0%
kernel stack and as it turns out a seed
set<00:22:35.440><c> of</c>

00:22:38.230 --> 00:22:38.240 align:start position:0%
 
 

00:22:38.240 --> 00:22:39.990 align:start position:0%
 
kernel<00:22:38.640><c> registers</c><00:22:39.200><c> associated</c><00:22:39.679><c> with</c><00:22:39.840><c> the</c>

00:22:39.990 --> 00:22:40.000 align:start position:0%
kernel registers associated with the
 

00:22:40.000 --> 00:22:41.510 align:start position:0%
kernel registers associated with the
kernel<00:22:40.320><c> thread</c><00:22:41.120><c> which</c>

00:22:41.510 --> 00:22:41.520 align:start position:0%
kernel thread which
 

00:22:41.520 --> 00:22:44.470 align:start position:0%
kernel thread which
is<00:22:41.679><c> going</c><00:22:41.760><c> to</c><00:22:41.840><c> be</c><00:22:42.080><c> called</c><00:22:42.320><c> the</c><00:22:42.400><c> context</c><00:22:43.520><c> so</c><00:22:44.159><c> if</c>

00:22:44.470 --> 00:22:44.480 align:start position:0%
is going to be called the context so if
 

00:22:44.480 --> 00:22:46.390 align:start position:0%
is going to be called the context so if
xv6<00:22:44.960><c> switches</c><00:22:45.280><c> from</c><00:22:45.440><c> the</c><00:22:45.520><c> compiler</c>

00:22:46.390 --> 00:22:46.400 align:start position:0%
xv6 switches from the compiler
 

00:22:46.400 --> 00:22:50.310 align:start position:0%
xv6 switches from the compiler
kernel<00:22:46.799><c> thread</c><00:22:47.360><c> to</c><00:22:47.600><c> ls's</c><00:22:48.080><c> kernel</c><00:22:48.400><c> thread</c>

00:22:50.310 --> 00:22:50.320 align:start position:0%
kernel thread to ls's kernel thread
 

00:22:50.320 --> 00:22:53.830 align:start position:0%
kernel thread to ls's kernel thread
xv6<00:22:50.880><c> will</c><00:22:51.280><c> save</c><00:22:51.600><c> away</c><00:22:51.840><c> the</c><00:22:52.240><c> kernel</c><00:22:52.840><c> registers</c>

00:22:53.830 --> 00:22:53.840 align:start position:0%
xv6 will save away the kernel registers
 

00:22:53.840 --> 00:22:56.149 align:start position:0%
xv6 will save away the kernel registers
in<00:22:54.000><c> a</c><00:22:54.080><c> context</c><00:22:54.559><c> for</c><00:22:54.720><c> the</c>

00:22:56.149 --> 00:22:56.159 align:start position:0%
in a context for the
 

00:22:56.159 --> 00:22:59.909 align:start position:0%
in a context for the
seat<00:22:56.480><c> the</c><00:22:56.799><c> compiler's</c><00:22:57.440><c> kernel</c><00:22:57.760><c> thread</c>

00:22:59.909 --> 00:22:59.919 align:start position:0%
seat the compiler's kernel thread
 

00:22:59.919 --> 00:23:04.149 align:start position:0%
seat the compiler's kernel thread
switch<00:23:00.240><c> to</c><00:23:00.320><c> the</c><00:23:00.480><c> ls</c><00:23:00.799><c> thread</c><00:23:01.840><c> to</c><00:23:02.000><c> a</c><00:23:02.799><c> complex</c>

00:23:04.149 --> 00:23:04.159 align:start position:0%
switch to the ls thread to a complex
 

00:23:04.159 --> 00:23:05.909 align:start position:0%
switch to the ls thread to a complex
scheme<00:23:04.480><c> which</c><00:23:04.640><c> i'll</c><00:23:04.720><c> describe</c><00:23:05.360><c> a</c><00:23:05.600><c> little</c><00:23:05.760><c> bit</c>

00:23:05.909 --> 00:23:05.919 align:start position:0%
scheme which i'll describe a little bit
 

00:23:05.919 --> 00:23:08.710 align:start position:0%
scheme which i'll describe a little bit
later<00:23:06.799><c> will</c><00:23:06.960><c> restore</c>

00:23:08.710 --> 00:23:08.720 align:start position:0%
later will restore
 

00:23:08.720 --> 00:23:11.830 align:start position:0%
later will restore
ls's<00:23:10.159><c> kernel</c><00:23:10.480><c> thread</c><00:23:10.880><c> registers</c><00:23:11.440><c> from</c><00:23:11.600><c> the</c>

00:23:11.830 --> 00:23:11.840 align:start position:0%
ls's kernel thread registers from the
 

00:23:11.840 --> 00:23:12.310 align:start position:0%
ls's kernel thread registers from the
same

00:23:12.310 --> 00:23:12.320 align:start position:0%
same
 

00:23:12.320 --> 00:23:14.630 align:start position:0%
same
previously<00:23:12.880><c> saved</c><00:23:13.200><c> context</c><00:23:13.600><c> from</c><00:23:13.840><c> when</c><00:23:14.080><c> ls</c>

00:23:14.630 --> 00:23:14.640 align:start position:0%
previously saved context from when ls
 

00:23:14.640 --> 00:23:15.909 align:start position:0%
previously saved context from when ls
last<00:23:14.960><c> left</c><00:23:15.280><c> off</c>

00:23:15.909 --> 00:23:15.919 align:start position:0%
last left off
 

00:23:15.919 --> 00:23:17.750 align:start position:0%
last left off
maybe<00:23:16.240><c> ls</c><00:23:16.559><c> will</c><00:23:16.720><c> finish</c><00:23:17.039><c> whatever</c><00:23:17.440><c> system</c>

00:23:17.750 --> 00:23:17.760 align:start position:0%
maybe ls will finish whatever system
 

00:23:17.760 --> 00:23:20.310 align:start position:0%
maybe ls will finish whatever system
call<00:23:18.000><c> it</c><00:23:18.159><c> was</c><00:23:18.799><c> executing</c><00:23:19.440><c> you</c><00:23:19.520><c> know</c><00:23:19.679><c> what</c>

00:23:20.310 --> 00:23:20.320 align:start position:0%
call it was executing you know what
 

00:23:20.320 --> 00:23:24.310 align:start position:0%
call it was executing you know what
on<00:23:21.200><c> the</c><00:23:21.760><c> ls's</c><00:23:22.720><c> kernel</c><00:23:23.039><c> thread</c><00:23:23.280><c> stack</c>

00:23:24.310 --> 00:23:24.320 align:start position:0%
on the ls's kernel thread stack
 

00:23:24.320 --> 00:23:25.909 align:start position:0%
on the ls's kernel thread stack
um<00:23:24.559><c> and</c><00:23:24.640><c> then</c><00:23:24.799><c> return</c><00:23:25.120><c> back</c><00:23:25.280><c> to</c><00:23:25.440><c> ls</c><00:23:25.760><c> from</c><00:23:25.840><c> the</c>

00:23:25.909 --> 00:23:25.919 align:start position:0%
um and then return back to ls from the
 

00:23:25.919 --> 00:23:27.830 align:start position:0%
um and then return back to ls from the
system<00:23:26.240><c> call</c><00:23:26.480><c> and</c><00:23:26.640><c> on</c><00:23:26.720><c> the</c><00:23:26.880><c> way</c><00:23:27.200><c> to</c><00:23:27.360><c> return</c><00:23:27.760><c> to</c>

00:23:27.830 --> 00:23:27.840 align:start position:0%
system call and on the way to return to
 

00:23:27.840 --> 00:23:29.270 align:start position:0%
system call and on the way to return to
user<00:23:28.080><c> space</c><00:23:28.400><c> it'll</c><00:23:28.640><c> restore</c><00:23:29.039><c> these</c>

00:23:29.270 --> 00:23:29.280 align:start position:0%
user space it'll restore these
 

00:23:29.280 --> 00:23:31.029 align:start position:0%
user space it'll restore these
previously<00:23:29.919><c> saved</c>

00:23:31.029 --> 00:23:31.039 align:start position:0%
previously saved
 

00:23:31.039 --> 00:23:34.549 align:start position:0%
previously saved
user<00:23:31.360><c> registers</c><00:23:31.840><c> for</c><00:23:32.080><c> ls</c><00:23:32.799><c> um</c><00:23:33.360><c> and</c><00:23:33.520><c> then</c><00:23:33.760><c> resume</c>

00:23:34.549 --> 00:23:34.559 align:start position:0%
user registers for ls um and then resume
 

00:23:34.559 --> 00:23:37.830 align:start position:0%
user registers for ls um and then resume
executing<00:23:35.039><c> ls</c><00:23:35.679><c> so</c>

00:23:37.830 --> 00:23:37.840 align:start position:0%
executing ls so
 

00:23:37.840 --> 00:23:39.190 align:start position:0%
executing ls so
there's<00:23:38.080><c> a</c><00:23:38.159><c> bunch</c><00:23:38.400><c> of</c><00:23:38.480><c> details</c><00:23:38.880><c> here</c><00:23:39.039><c> which</c>

00:23:39.190 --> 00:23:39.200 align:start position:0%
there's a bunch of details here which
 

00:23:39.200 --> 00:23:41.029 align:start position:0%
there's a bunch of details here which
we'll<00:23:39.360><c> talk</c><00:23:39.520><c> about</c><00:23:39.919><c> but</c><00:23:40.480><c> uh</c>

00:23:41.029 --> 00:23:41.039 align:start position:0%
we'll talk about but uh
 

00:23:41.039 --> 00:23:42.870 align:start position:0%
we'll talk about but uh
maybe<00:23:41.279><c> the</c><00:23:41.520><c> main</c><00:23:41.840><c> point</c><00:23:42.159><c> here</c><00:23:42.400><c> is</c><00:23:42.559><c> that</c>

00:23:42.870 --> 00:23:42.880 align:start position:0%
maybe the main point here is that
 

00:23:42.880 --> 00:23:45.029 align:start position:0%
maybe the main point here is that
whenever<00:23:43.440><c> in</c><00:23:43.600><c> xv6</c>

00:23:45.029 --> 00:23:45.039 align:start position:0%
whenever in xv6
 

00:23:45.039 --> 00:23:47.830 align:start position:0%
whenever in xv6
see<00:23:45.360><c> direct</c><00:23:45.840><c> user</c><00:23:46.159><c> to</c><00:23:46.320><c> user</c><00:23:46.880><c> context</c><00:23:47.279><c> switches</c>

00:23:47.830 --> 00:23:47.840 align:start position:0%
see direct user to user context switches
 

00:23:47.840 --> 00:23:48.950 align:start position:0%
see direct user to user context switches
when<00:23:48.000><c> we're</c><00:23:48.159><c> switching</c>

00:23:48.950 --> 00:23:48.960 align:start position:0%
when we're switching
 

00:23:48.960 --> 00:23:52.070 align:start position:0%
when we're switching
from<00:23:49.200><c> one</c><00:23:49.440><c> process</c><00:23:49.840><c> to</c><00:23:50.000><c> another</c><00:23:50.320><c> always</c>

00:23:52.070 --> 00:23:52.080 align:start position:0%
from one process to another always
 

00:23:52.080 --> 00:23:55.590 align:start position:0%
from one process to another always
the<00:23:52.480><c> sort</c><00:23:52.720><c> of</c><00:23:54.080><c> strategy</c><00:23:54.640><c> by</c><00:23:54.799><c> which</c><00:23:55.039><c> xv6</c>

00:23:55.590 --> 00:23:55.600 align:start position:0%
the sort of strategy by which xv6
 

00:23:55.600 --> 00:23:57.430 align:start position:0%
the sort of strategy by which xv6
switches<00:23:55.919><c> from</c><00:23:56.080><c> executing</c><00:23:56.640><c> one</c><00:23:56.880><c> process</c><00:23:57.279><c> to</c>

00:23:57.430 --> 00:23:57.440 align:start position:0%
switches from executing one process to
 

00:23:57.440 --> 00:23:58.789 align:start position:0%
switches from executing one process to
another<00:23:57.840><c> process</c>

00:23:58.789 --> 00:23:58.799 align:start position:0%
another process
 

00:23:58.799 --> 00:24:00.789 align:start position:0%
another process
is<00:23:59.120><c> you</c><00:23:59.279><c> jump</c><00:23:59.520><c> into</c><00:23:59.679><c> the</c><00:23:59.760><c> kernel</c><00:24:00.159><c> save</c><00:24:00.480><c> the</c>

00:24:00.789 --> 00:24:00.799 align:start position:0%
is you jump into the kernel save the
 

00:24:00.799 --> 00:24:02.470 align:start position:0%
is you jump into the kernel save the
process<00:24:01.200><c> state</c><00:24:01.600><c> run</c><00:24:01.919><c> this</c>

00:24:02.470 --> 00:24:02.480 align:start position:0%
process state run this
 

00:24:02.480 --> 00:24:04.710 align:start position:0%
process state run this
process<00:24:02.880><c> as</c><00:24:03.120><c> kernel</c><00:24:03.440><c> thread</c><00:24:03.840><c> switch</c><00:24:04.320><c> to</c><00:24:04.480><c> the</c>

00:24:04.710 --> 00:24:04.720 align:start position:0%
process as kernel thread switch to the
 

00:24:04.720 --> 00:24:05.750 align:start position:0%
process as kernel thread switch to the
kernel<00:24:04.960><c> thread</c><00:24:05.279><c> of</c><00:24:05.440><c> a</c>

00:24:05.750 --> 00:24:05.760 align:start position:0%
kernel thread of a
 

00:24:05.760 --> 00:24:07.590 align:start position:0%
kernel thread of a
another<00:24:06.080><c> process</c><00:24:06.480><c> that's</c><00:24:06.640><c> suspended</c><00:24:07.200><c> itself</c>

00:24:07.590 --> 00:24:07.600 align:start position:0%
another process that's suspended itself
 

00:24:07.600 --> 00:24:09.510 align:start position:0%
another process that's suspended itself
and<00:24:07.760><c> then</c><00:24:08.320><c> return</c><00:24:08.799><c> and</c><00:24:08.880><c> restore</c><00:24:09.279><c> user</c>

00:24:09.510 --> 00:24:09.520 align:start position:0%
and then return and restore user
 

00:24:09.520 --> 00:24:10.950 align:start position:0%
and then return and restore user
registers<00:24:09.919><c> so</c><00:24:10.080><c> it's</c><00:24:10.240><c> always</c><00:24:10.559><c> the</c><00:24:10.640><c> sort</c><00:24:10.799><c> of</c>

00:24:10.950 --> 00:24:10.960 align:start position:0%
registers so it's always the sort of
 

00:24:10.960 --> 00:24:12.230 align:start position:0%
registers so it's always the sort of
indirect<00:24:11.360><c> strategy</c>

00:24:12.230 --> 00:24:12.240 align:start position:0%
indirect strategy
 

00:24:12.240 --> 00:24:13.510 align:start position:0%
indirect strategy
it's<00:24:12.400><c> actually</c><00:24:12.640><c> even</c><00:24:12.799><c> more</c><00:24:13.039><c> indirect</c><00:24:13.440><c> than</c>

00:24:13.510 --> 00:24:13.520 align:start position:0%
it's actually even more indirect than
 

00:24:13.520 --> 00:24:15.750 align:start position:0%
it's actually even more indirect than
this<00:24:14.480><c> to</c><00:24:14.640><c> threat</c><00:24:15.039><c> switch</c>

00:24:15.750 --> 00:24:15.760 align:start position:0%
this to threat switch
 

00:24:15.760 --> 00:24:17.350 align:start position:0%
this to threat switch
where<00:24:15.919><c> the</c><00:24:16.080><c> net</c><00:24:16.320><c> effect</c><00:24:16.640><c> is</c><00:24:16.720><c> to</c><00:24:16.880><c> switch</c><00:24:17.120><c> from</c>

00:24:17.350 --> 00:24:17.360 align:start position:0%
where the net effect is to switch from
 

00:24:17.360 --> 00:24:18.950 align:start position:0%
where the net effect is to switch from
one<00:24:17.760><c> user</c><00:24:18.080><c> process</c>

00:24:18.950 --> 00:24:18.960 align:start position:0%
one user process
 

00:24:18.960 --> 00:24:23.909 align:start position:0%
one user process
to<00:24:19.120><c> another</c><00:24:19.360><c> user</c><00:24:19.600><c> process</c>

00:24:23.909 --> 00:24:23.919 align:start position:0%
 
 

00:24:23.919 --> 00:24:28.950 align:start position:0%
 
questions<00:24:24.240><c> about</c><00:24:24.400><c> this</c><00:24:24.559><c> diagram</c><00:24:25.760><c> or</c><00:24:25.919><c> anything</c>

00:24:28.950 --> 00:24:28.960 align:start position:0%
 
 

00:24:28.960 --> 00:24:31.510 align:start position:0%
 
the<00:24:29.360><c> switch</c><00:24:29.760><c> to</c><00:24:29.919><c> the</c><00:24:30.240><c> scheduler</c><00:24:30.880><c> that</c><00:24:31.039><c> happens</c>

00:24:31.510 --> 00:24:31.520 align:start position:0%
the switch to the scheduler that happens
 

00:24:31.520 --> 00:24:31.990 align:start position:0%
the switch to the scheduler that happens
in<00:24:31.600><c> between</c>

00:24:31.990 --> 00:24:32.000 align:start position:0%
in between
 

00:24:32.000 --> 00:24:35.510 align:start position:0%
in between
those<00:24:32.240><c> two</c><00:24:32.480><c> right</c><00:24:33.279><c> yep</c><00:24:34.159><c> all</c><00:24:34.400><c> right</c>

00:24:35.510 --> 00:24:35.520 align:start position:0%
those two right yep all right
 

00:24:35.520 --> 00:24:37.430 align:start position:0%
those two right yep all right
let<00:24:35.679><c> me</c><00:24:35.760><c> talk</c><00:24:35.919><c> about</c><00:24:36.080><c> the</c><00:24:36.240><c> scheduler</c><00:24:37.039><c> so</c><00:24:37.200><c> the</c>

00:24:37.430 --> 00:24:37.440 align:start position:0%
let me talk about the scheduler so the
 

00:24:37.440 --> 00:24:38.710 align:start position:0%
let me talk about the scheduler so the
real<00:24:37.760><c> picture's</c><00:24:38.159><c> actually</c>

00:24:38.710 --> 00:24:38.720 align:start position:0%
real picture's actually
 

00:24:38.720 --> 00:24:41.909 align:start position:0%
real picture's actually
um<00:24:39.520><c> significantly</c><00:24:40.159><c> more</c><00:24:40.320><c> complex</c><00:24:40.880><c> than</c><00:24:41.039><c> that</c>

00:24:41.909 --> 00:24:41.919 align:start position:0%
um significantly more complex than that
 

00:24:41.919 --> 00:24:46.630 align:start position:0%
um significantly more complex than that
um<00:24:42.960><c> this</c><00:24:43.200><c> is</c><00:24:43.279><c> a</c><00:24:44.840><c> more</c>

00:24:46.630 --> 00:24:46.640 align:start position:0%
um this is a more
 

00:24:46.640 --> 00:24:48.070 align:start position:0%
um this is a more
going<00:24:46.720><c> to</c><00:24:46.799><c> be</c><00:24:46.960><c> more</c><00:24:47.120><c> full</c><00:24:47.360><c> diagram</c><00:24:47.760><c> let's</c><00:24:47.919><c> say</c>

00:24:48.070 --> 00:24:48.080 align:start position:0%
going to be more full diagram let's say
 

00:24:48.080 --> 00:24:51.029 align:start position:0%
going to be more full diagram let's say
we<00:24:48.159><c> have</c><00:24:48.320><c> process</c><00:24:48.720><c> 1</c>

00:24:51.029 --> 00:24:51.039 align:start position:0%
we have process 1
 

00:24:51.039 --> 00:24:55.350 align:start position:0%
we have process 1
which<00:24:51.279><c> is</c><00:24:51.440><c> executing</c><00:24:52.080><c> and</c><00:24:52.799><c> process</c><00:24:53.360><c> 2</c><00:24:53.760><c> which</c>

00:24:55.350 --> 00:24:55.360 align:start position:0%
which is executing and process 2 which
 

00:24:55.360 --> 00:24:58.070 align:start position:0%
which is executing and process 2 which
is<00:24:55.600><c> runnable</c><00:24:56.000><c> but</c><00:24:56.159><c> not</c><00:24:56.320><c> currently</c><00:24:56.720><c> running</c>

00:24:58.070 --> 00:24:58.080 align:start position:0%
is runnable but not currently running
 

00:24:58.080 --> 00:24:59.590 align:start position:0%
is runnable but not currently running
now<00:24:58.240><c> the</c><00:24:58.400><c> additional</c><00:24:58.720><c> layer</c><00:24:58.960><c> of</c><00:24:59.039><c> details</c><00:24:59.520><c> we</c>

00:24:59.590 --> 00:24:59.600 align:start position:0%
now the additional layer of details we
 

00:24:59.600 --> 00:25:01.269 align:start position:0%
now the additional layer of details we
actually<00:24:59.760><c> have</c><00:24:59.919><c> multiple</c><00:25:00.400><c> cores</c>

00:25:01.269 --> 00:25:01.279 align:start position:0%
actually have multiple cores
 

00:25:01.279 --> 00:25:04.310 align:start position:0%
actually have multiple cores
um<00:25:01.840><c> in</c><00:25:02.080><c> xv6</c><00:25:02.640><c> let's</c><00:25:02.799><c> say</c><00:25:02.960><c> we</c><00:25:03.120><c> have</c><00:25:03.279><c> two</c><00:25:03.520><c> cores</c><00:25:04.000><c> so</c>

00:25:04.310 --> 00:25:04.320 align:start position:0%
um in xv6 let's say we have two cores so
 

00:25:04.320 --> 00:25:06.310 align:start position:0%
um in xv6 let's say we have two cores so
that<00:25:04.480><c> means</c><00:25:04.720><c> that</c><00:25:04.880><c> sort</c><00:25:05.039><c> of</c><00:25:05.279><c> at</c><00:25:05.360><c> the</c><00:25:05.600><c> hardware</c>

00:25:06.310 --> 00:25:06.320 align:start position:0%
that means that sort of at the hardware
 

00:25:06.320 --> 00:25:07.750 align:start position:0%
that means that sort of at the hardware
level

00:25:07.750 --> 00:25:07.760 align:start position:0%
level
 

00:25:07.760 --> 00:25:11.350 align:start position:0%
level
um<00:25:08.720><c> we</c><00:25:08.880><c> have</c><00:25:09.679><c> cpu0</c><00:25:10.640><c> which</c><00:25:10.880><c> is</c><00:25:10.960><c> one</c><00:25:11.120><c> of</c><00:25:11.200><c> the</c>

00:25:11.350 --> 00:25:11.360 align:start position:0%
um we have cpu0 which is one of the
 

00:25:11.360 --> 00:25:12.630 align:start position:0%
um we have cpu0 which is one of the
cores

00:25:12.630 --> 00:25:12.640 align:start position:0%
cores
 

00:25:12.640 --> 00:25:19.909 align:start position:0%
cores
and<00:25:13.440><c> let's</c><00:25:13.679><c> say</c><00:25:13.919><c> cpu</c><00:25:14.400><c> one</c>

00:25:19.909 --> 00:25:19.919 align:start position:0%
 
 

00:25:19.919 --> 00:25:22.390 align:start position:0%
 
and<00:25:20.080><c> the</c><00:25:20.240><c> more</c><00:25:20.480><c> full</c><00:25:20.880><c> story</c><00:25:21.360><c> about</c><00:25:21.679><c> how</c><00:25:21.919><c> we</c><00:25:22.080><c> get</c>

00:25:22.390 --> 00:25:22.400 align:start position:0%
and the more full story about how we get
 

00:25:22.400 --> 00:25:23.510 align:start position:0%
and the more full story about how we get
from

00:25:23.510 --> 00:25:23.520 align:start position:0%
from
 

00:25:23.520 --> 00:25:26.630 align:start position:0%
from
executing<00:25:25.440><c> user</c><00:25:25.840><c> space</c>

00:25:26.630 --> 00:25:26.640 align:start position:0%
executing user space
 

00:25:26.640 --> 00:25:29.990 align:start position:0%
executing user space
to<00:25:27.279><c> in</c><00:25:27.440><c> one</c><00:25:27.919><c> process</c><00:25:28.640><c> executing</c><00:25:29.200><c> user</c><00:25:29.440><c> spaces</c>

00:25:29.990 --> 00:25:30.000 align:start position:0%
to in one process executing user spaces
 

00:25:30.000 --> 00:25:32.070 align:start position:0%
to in one process executing user spaces
in<00:25:30.080><c> another</c><00:25:30.880><c> runnable</c><00:25:31.200><c> but</c><00:25:31.360><c> not</c><00:25:31.520><c> yet</c><00:25:31.760><c> running</c>

00:25:32.070 --> 00:25:32.080 align:start position:0%
in another runnable but not yet running
 

00:25:32.080 --> 00:25:33.830 align:start position:0%
in another runnable but not yet running
process

00:25:33.830 --> 00:25:33.840 align:start position:0%
process
 

00:25:33.840 --> 00:25:36.149 align:start position:0%
process
now<00:25:34.000><c> the</c><00:25:34.159><c> first</c><00:25:34.400><c> part's</c><00:25:34.720><c> about</c><00:25:34.960><c> the</c><00:25:35.120><c> same</c><00:25:35.440><c> as</c><00:25:35.919><c> i</c>

00:25:36.149 --> 00:25:36.159 align:start position:0%
now the first part's about the same as i
 

00:25:36.159 --> 00:25:36.950 align:start position:0%
now the first part's about the same as i
talked<00:25:36.400><c> about</c>

00:25:36.950 --> 00:25:36.960 align:start position:0%
talked about
 

00:25:36.960 --> 00:25:40.630 align:start position:0%
talked about
and<00:25:37.200><c> they</c><00:25:37.440><c> say</c><00:25:37.679><c> a</c><00:25:37.760><c> timer</c><00:25:38.240><c> interrupt</c><00:25:38.880><c> forces</c>

00:25:40.630 --> 00:25:40.640 align:start position:0%
and they say a timer interrupt forces
 

00:25:40.640 --> 00:25:42.710 align:start position:0%
and they say a timer interrupt forces
transfer<00:25:41.039><c> control</c><00:25:41.520><c> from</c><00:25:41.679><c> the</c><00:25:42.000><c> user</c><00:25:42.320><c> process</c>

00:25:42.710 --> 00:25:42.720 align:start position:0%
transfer control from the user process
 

00:25:42.720 --> 00:25:46.149 align:start position:0%
transfer control from the user process
into<00:25:42.960><c> the</c><00:25:43.039><c> kernel</c><00:25:43.600><c> the</c><00:25:43.760><c> trampoline</c><00:25:44.400><c> code</c>

00:25:46.149 --> 00:25:46.159 align:start position:0%
into the kernel the trampoline code
 

00:25:46.159 --> 00:25:48.310 align:start position:0%
into the kernel the trampoline code
saves<00:25:46.480><c> the</c><00:25:46.559><c> user</c><00:25:46.880><c> registers</c><00:25:47.440><c> the</c><00:25:47.679><c> trap</c><00:25:48.000><c> frame</c>

00:25:48.310 --> 00:25:48.320 align:start position:0%
saves the user registers the trap frame
 

00:25:48.320 --> 00:25:51.430 align:start position:0%
saves the user registers the trap frame
for<00:25:48.480><c> process</c><00:25:48.960><c> one</c>

00:25:51.430 --> 00:25:51.440 align:start position:0%
 
 

00:25:51.440 --> 00:25:55.190 align:start position:0%
 
and<00:25:51.600><c> then</c><00:25:51.840><c> executes</c><00:25:54.159><c> user</c><00:25:54.480><c> trap</c><00:25:54.799><c> which</c>

00:25:55.190 --> 00:25:55.200 align:start position:0%
and then executes user trap which
 

00:25:55.200 --> 00:25:56.149 align:start position:0%
and then executes user trap which
you<00:25:55.279><c> know</c><00:25:55.360><c> figures</c><00:25:55.600><c> out</c><00:25:55.760><c> what</c><00:25:55.840><c> to</c><00:25:55.919><c> do</c><00:25:56.080><c> with</c>

00:25:56.149 --> 00:25:56.159 align:start position:0%
you know figures out what to do with
 

00:25:56.159 --> 00:25:58.149 align:start position:0%
you know figures out what to do with
this<00:25:56.320><c> trap</c><00:25:56.720><c> or</c><00:25:56.880><c> interrupt</c><00:25:57.520><c> you</c><00:25:57.600><c> know</c><00:25:57.760><c> system</c>

00:25:58.149 --> 00:25:58.159 align:start position:0%
this trap or interrupt you know system
 

00:25:58.159 --> 00:25:58.710 align:start position:0%
this trap or interrupt you know system
call

00:25:58.710 --> 00:25:58.720 align:start position:0%
call
 

00:25:58.720 --> 00:26:01.110 align:start position:0%
call
let's<00:25:58.880><c> say</c><00:25:59.039><c> it's</c><00:25:59.200><c> a</c><00:26:00.480><c> for</c><00:26:00.640><c> a</c><00:26:00.720><c> little</c><00:26:00.880><c> while</c>

00:26:01.110 --> 00:26:01.120 align:start position:0%
let's say it's a for a little while
 

00:26:01.120 --> 00:26:02.470 align:start position:0%
let's say it's a for a little while
we're<00:26:01.279><c> executing</c>

00:26:02.470 --> 00:26:02.480 align:start position:0%
we're executing
 

00:26:02.480 --> 00:26:06.149 align:start position:0%
we're executing
ordinary<00:26:03.039><c> kernel</c><00:26:03.440><c> c</c><00:26:03.760><c> code</c><00:26:05.279><c> on</c><00:26:05.520><c> the</c><00:26:05.760><c> kernel</c>

00:26:06.149 --> 00:26:06.159 align:start position:0%
ordinary kernel c code on the kernel
 

00:26:06.159 --> 00:26:10.310 align:start position:0%
ordinary kernel c code on the kernel
stack<00:26:06.559><c> of</c><00:26:06.720><c> process</c><00:26:08.840><c> one</c>

00:26:10.310 --> 00:26:10.320 align:start position:0%
stack of process one
 

00:26:10.320 --> 00:26:12.070 align:start position:0%
stack of process one
let's<00:26:10.480><c> say</c><00:26:10.799><c> process</c><00:26:11.200><c> one</c><00:26:11.440><c> the</c><00:26:11.600><c> kernel</c><00:26:11.919><c> code</c>

00:26:12.070 --> 00:26:12.080 align:start position:0%
let's say process one the kernel code
 

00:26:12.080 --> 00:26:13.909 align:start position:0%
let's say process one the kernel code
for<00:26:12.240><c> process</c><00:26:12.559><c> ones</c><00:26:12.799><c> decides</c><00:26:13.279><c> it</c><00:26:13.360><c> wants</c><00:26:13.600><c> to</c>

00:26:13.909 --> 00:26:13.919 align:start position:0%
for process ones decides it wants to
 

00:26:13.919 --> 00:26:16.870 align:start position:0%
for process ones decides it wants to
yield<00:26:14.240><c> the</c><00:26:14.400><c> cpu</c><00:26:15.600><c> um</c><00:26:16.240><c> it</c><00:26:16.320><c> does</c><00:26:16.559><c> a</c><00:26:16.640><c> bunch</c><00:26:16.799><c> of</c>

00:26:16.870 --> 00:26:16.880 align:start position:0%
yield the cpu um it does a bunch of
 

00:26:16.880 --> 00:26:18.549 align:start position:0%
yield the cpu um it does a bunch of
things<00:26:17.200><c> which</c><00:26:17.360><c> we'll</c><00:26:17.520><c> see</c><00:26:17.679><c> the</c><00:26:17.760><c> details</c><00:26:18.240><c> of</c>

00:26:18.549 --> 00:26:18.559 align:start position:0%
things which we'll see the details of
 

00:26:18.559 --> 00:26:21.510 align:start position:0%
things which we'll see the details of
um<00:26:19.600><c> that</c><00:26:19.840><c> end</c><00:26:20.000><c> up</c><00:26:20.080><c> in</c><00:26:20.240><c> a</c><00:26:20.320><c> call</c><00:26:20.559><c> to</c><00:26:20.720><c> this</c><00:26:20.960><c> routine</c>

00:26:21.510 --> 00:26:21.520 align:start position:0%
um that end up in a call to this routine
 

00:26:21.520 --> 00:26:22.789 align:start position:0%
um that end up in a call to this routine
switch

00:26:22.789 --> 00:26:22.799 align:start position:0%
switch
 

00:26:22.799 --> 00:26:24.789 align:start position:0%
switch
just<00:26:22.960><c> sort</c><00:26:23.120><c> of</c><00:26:23.200><c> the</c><00:26:24.000><c> one</c><00:26:24.159><c> of</c><00:26:24.240><c> the</c><00:26:24.400><c> central</c>

00:26:24.789 --> 00:26:24.799 align:start position:0%
just sort of the one of the central
 

00:26:24.799 --> 00:26:26.230 align:start position:0%
just sort of the one of the central
routines<00:26:25.279><c> in</c><00:26:25.360><c> this</c><00:26:25.520><c> story</c>

00:26:26.230 --> 00:26:26.240 align:start position:0%
routines in this story
 

00:26:26.240 --> 00:26:30.070 align:start position:0%
routines in this story
switch<00:26:26.720><c> saves</c><00:26:27.120><c> away</c><00:26:28.960><c> this</c><00:26:29.200><c> context</c><00:26:29.840><c> the</c>

00:26:30.070 --> 00:26:30.080 align:start position:0%
switch saves away this context the
 

00:26:30.080 --> 00:26:31.269 align:start position:0%
switch saves away this context the
registers

00:26:31.269 --> 00:26:31.279 align:start position:0%
registers
 

00:26:31.279 --> 00:26:33.029 align:start position:0%
registers
for<00:26:31.520><c> the</c><00:26:31.840><c> kernel</c><00:26:32.159><c> thread</c><00:26:32.400><c> that's</c><00:26:32.559><c> running</c><00:26:32.880><c> in</c>

00:26:33.029 --> 00:26:33.039 align:start position:0%
for the kernel thread that's running in
 

00:26:33.039 --> 00:26:34.789 align:start position:0%
for the kernel thread that's running in
context<00:26:33.440><c> want</c><00:26:33.600><c> so</c><00:26:33.760><c> there's</c><00:26:34.240><c> two</c><00:26:34.480><c> sets</c><00:26:34.720><c> of</c>

00:26:34.789 --> 00:26:34.799 align:start position:0%
context want so there's two sets of
 

00:26:34.799 --> 00:26:36.470 align:start position:0%
context want so there's two sets of
registers<00:26:35.360><c> the</c><00:26:35.440><c> user</c><00:26:35.760><c> registers</c>

00:26:36.470 --> 00:26:36.480 align:start position:0%
registers the user registers
 

00:26:36.480 --> 00:26:38.630 align:start position:0%
registers the user registers
the<00:26:36.640><c> trap</c><00:26:36.960><c> frame</c><00:26:37.919><c> the</c><00:26:38.080><c> kernel</c><00:26:38.320><c> thread</c>

00:26:38.630 --> 00:26:38.640 align:start position:0%
the trap frame the kernel thread
 

00:26:38.640 --> 00:26:42.470 align:start position:0%
the trap frame the kernel thread
registers<00:26:39.279><c> in</c><00:26:39.360><c> the</c><00:26:39.600><c> context</c>

00:26:42.470 --> 00:26:42.480 align:start position:0%
 
 

00:26:42.480 --> 00:26:44.310 align:start position:0%
 
switch<00:26:42.880><c> doesn't</c><00:26:43.200><c> actually</c><00:26:43.520><c> switch</c><00:26:43.840><c> switches</c>

00:26:44.310 --> 00:26:44.320 align:start position:0%
switch doesn't actually switch switches
 

00:26:44.320 --> 00:26:46.710 align:start position:0%
switch doesn't actually switch switches
from<00:26:45.200><c> one</c><00:26:45.520><c> content</c><00:26:45.919><c> from</c><00:26:46.080><c> one</c><00:26:46.320><c> thread</c><00:26:46.640><c> to</c>

00:26:46.710 --> 00:26:46.720 align:start position:0%
from one content from one thread to
 

00:26:46.720 --> 00:26:48.549 align:start position:0%
from one content from one thread to
another<00:26:47.200><c> but</c><00:26:47.440><c> in</c><00:26:47.679><c> fact</c>

00:26:48.549 --> 00:26:48.559 align:start position:0%
another but in fact
 

00:26:48.559 --> 00:26:52.070 align:start position:0%
another but in fact
the<00:26:48.720><c> way</c><00:26:49.200><c> xp6</c><00:26:49.760><c> is</c><00:26:49.919><c> designed</c><00:26:50.799><c> the</c><00:26:51.039><c> only</c><00:26:51.520><c> place</c>

00:26:52.070 --> 00:26:52.080 align:start position:0%
the way xp6 is designed the only place
 

00:26:52.080 --> 00:26:55.510 align:start position:0%
the way xp6 is designed the only place
that<00:26:52.320><c> a</c><00:26:53.760><c> user</c><00:26:54.159><c> thread</c><00:26:54.880><c> sorry</c><00:26:55.200><c> the</c><00:26:55.279><c> kernel</c>

00:26:55.510 --> 00:26:55.520 align:start position:0%
that a user thread sorry the kernel
 

00:26:55.520 --> 00:26:57.669 align:start position:0%
that a user thread sorry the kernel
thread<00:26:55.840><c> running</c><00:26:56.080><c> on</c><00:26:56.240><c> a</c><00:26:56.320><c> cpu</c><00:26:56.720><c> can</c><00:26:56.880><c> switch</c><00:26:57.200><c> to</c>

00:26:57.669 --> 00:26:57.679 align:start position:0%
thread running on a cpu can switch to
 

00:26:57.679 --> 00:26:59.510 align:start position:0%
thread running on a cpu can switch to
is<00:26:57.840><c> what's</c><00:26:58.080><c> called</c><00:26:58.320><c> the</c><00:26:58.559><c> scheduler</c><00:26:59.200><c> thread</c>

00:26:59.510 --> 00:26:59.520 align:start position:0%
is what's called the scheduler thread
 

00:26:59.520 --> 00:27:02.870 align:start position:0%
is what's called the scheduler thread
for<00:26:59.679><c> that</c><00:26:59.919><c> cpu</c>

00:27:02.870 --> 00:27:02.880 align:start position:0%
 
 

00:27:02.880 --> 00:27:04.549 align:start position:0%
 
so<00:27:03.039><c> we</c><00:27:03.200><c> can't</c><00:27:03.360><c> even</c><00:27:03.679><c> switch</c><00:27:04.000><c> directly</c><00:27:04.400><c> to</c>

00:27:04.549 --> 00:27:04.559 align:start position:0%
so we can't even switch directly to
 

00:27:04.559 --> 00:27:06.630 align:start position:0%
so we can't even switch directly to
another<00:27:04.880><c> process</c><00:27:05.679><c> we</c><00:27:05.840><c> can</c><00:27:06.000><c> only</c><00:27:06.159><c> switch</c><00:27:06.480><c> to</c>

00:27:06.630 --> 00:27:06.640 align:start position:0%
another process we can only switch to
 

00:27:06.640 --> 00:27:10.310 align:start position:0%
another process we can only switch to
the<00:27:06.880><c> scheduler</c><00:27:07.360><c> thread</c><00:27:07.600><c> so</c><00:27:07.760><c> there's</c><00:27:08.000><c> a</c>

00:27:10.310 --> 00:27:10.320 align:start position:0%
 
 

00:27:10.320 --> 00:27:13.590 align:start position:0%
 
the<00:27:10.480><c> complete</c><00:27:11.279><c> thread</c><00:27:11.760><c> apparatus</c>

00:27:13.590 --> 00:27:13.600 align:start position:0%
the complete thread apparatus
 

00:27:13.600 --> 00:27:16.390 align:start position:0%
the complete thread apparatus
dedicated<00:27:14.400><c> to</c><00:27:14.559><c> the</c><00:27:14.640><c> scheduler</c><00:27:15.279><c> for</c><00:27:15.520><c> cpu</c><00:27:16.000><c> zero</c>

00:27:16.390 --> 00:27:16.400 align:start position:0%
dedicated to the scheduler for cpu zero
 

00:27:16.400 --> 00:27:17.830 align:start position:0%
dedicated to the scheduler for cpu zero
since<00:27:16.640><c> we're</c><00:27:16.799><c> running</c><00:27:17.039><c> on</c><00:27:17.120><c> cpus</c>

00:27:17.830 --> 00:27:17.840 align:start position:0%
since we're running on cpus
 

00:27:17.840 --> 00:27:20.470 align:start position:0%
since we're running on cpus
this<00:27:18.000><c> switch</c><00:27:18.320><c> is</c><00:27:18.480><c> going</c><00:27:18.559><c> to</c><00:27:18.640><c> switch</c><00:27:19.039><c> to</c><00:27:20.159><c> the</c>

00:27:20.470 --> 00:27:20.480 align:start position:0%
this switch is going to switch to the
 

00:27:20.480 --> 00:27:22.870 align:start position:0%
this switch is going to switch to the
previously<00:27:21.360><c> saved</c>

00:27:22.870 --> 00:27:22.880 align:start position:0%
previously saved
 

00:27:22.880 --> 00:27:25.510 align:start position:0%
previously saved
registers<00:27:23.520><c> for</c><00:27:23.679><c> the</c><00:27:24.159><c> scheduler</c><00:27:24.799><c> thread</c><00:27:25.360><c> so</c>

00:27:25.510 --> 00:27:25.520 align:start position:0%
registers for the scheduler thread so
 

00:27:25.520 --> 00:27:29.590 align:start position:0%
registers for the scheduler thread so
let's<00:27:25.679><c> say</c><00:27:25.919><c> it's</c><00:27:26.080><c> scheduler</c><00:27:26.720><c> 0</c>

00:27:29.590 --> 00:27:29.600 align:start position:0%
 
 

00:27:29.600 --> 00:27:33.350 align:start position:0%
 
and<00:27:30.640><c> in</c><00:27:30.880><c> the</c><00:27:31.039><c> scheduler</c><00:27:31.840><c> for</c><00:27:32.000><c> cpu</c><00:27:32.480><c> 0</c>

00:27:33.350 --> 00:27:33.360 align:start position:0%
and in the scheduler for cpu 0
 

00:27:33.360 --> 00:27:35.990 align:start position:0%
and in the scheduler for cpu 0
switch<00:27:33.679><c> will</c><00:27:34.320><c> by</c><00:27:34.480><c> restoring</c><00:27:34.960><c> these</c><00:27:35.120><c> registers</c>

00:27:35.990 --> 00:27:36.000 align:start position:0%
switch will by restoring these registers
 

00:27:36.000 --> 00:27:37.430 align:start position:0%
switch will by restoring these registers
since<00:27:36.240><c> the</c><00:27:36.320><c> registers</c><00:27:36.720><c> include</c><00:27:36.960><c> the</c><00:27:37.120><c> stack</c>

00:27:37.430 --> 00:27:37.440 align:start position:0%
since the registers include the stack
 

00:27:37.440 --> 00:27:38.389 align:start position:0%
since the registers include the stack
pointer

00:27:38.389 --> 00:27:38.399 align:start position:0%
pointer
 

00:27:38.399 --> 00:27:40.870 align:start position:0%
pointer
the<00:27:38.559><c> return</c><00:27:38.960><c> from</c><00:27:39.120><c> switch</c><00:27:39.600><c> as</c><00:27:39.840><c> we'll</c><00:27:40.000><c> see</c><00:27:40.640><c> will</c>

00:27:40.870 --> 00:27:40.880 align:start position:0%
the return from switch as we'll see will
 

00:27:40.880 --> 00:27:43.750 align:start position:0%
the return from switch as we'll see will
now<00:27:41.120><c> actually</c>

00:27:43.750 --> 00:27:43.760 align:start position:0%
 
 

00:27:43.760 --> 00:27:48.789 align:start position:0%
 
return<00:27:44.399><c> up</c><00:27:44.640><c> to</c><00:27:45.919><c> the</c><00:27:46.840><c> um</c><00:27:47.919><c> scheduler</c>

00:27:48.789 --> 00:27:48.799 align:start position:0%
return up to the um scheduler
 

00:27:48.799 --> 00:27:52.549 align:start position:0%
return up to the um scheduler
function

00:27:52.549 --> 00:27:52.559 align:start position:0%
 
 

00:27:52.559 --> 00:27:55.110 align:start position:0%
 
on<00:27:53.039><c> cpu</c><00:27:53.520><c> zero</c><00:27:53.760><c> and</c><00:27:53.840><c> this</c><00:27:54.240><c> scheduler</c><00:27:54.799><c> function</c>

00:27:55.110 --> 00:27:55.120 align:start position:0%
on cpu zero and this scheduler function
 

00:27:55.120 --> 00:27:57.510 align:start position:0%
on cpu zero and this scheduler function
will<00:27:55.520><c> do</c><00:27:55.679><c> some</c><00:27:55.840><c> cleanup</c><00:27:56.320><c> to</c><00:27:56.559><c> finish</c><00:27:56.960><c> putting</c>

00:27:57.510 --> 00:27:57.520 align:start position:0%
will do some cleanup to finish putting
 

00:27:57.520 --> 00:27:59.590 align:start position:0%
will do some cleanup to finish putting
process<00:27:57.840><c> one</c><00:27:58.000><c> to</c><00:27:58.159><c> sleep</c><00:27:58.720><c> then</c><00:27:58.960><c> it'll</c><00:27:59.200><c> look</c><00:27:59.440><c> in</c>

00:27:59.590 --> 00:27:59.600 align:start position:0%
process one to sleep then it'll look in
 

00:27:59.600 --> 00:28:00.950 align:start position:0%
process one to sleep then it'll look in
the<00:27:59.840><c> process</c>

00:28:00.950 --> 00:28:00.960 align:start position:0%
the process
 

00:28:00.960 --> 00:28:02.389 align:start position:0%
the process
table<00:28:01.200><c> for</c><00:28:01.360><c> another</c><00:28:01.600><c> process</c><00:28:01.919><c> to</c><00:28:02.080><c> run</c><00:28:02.320><c> a</c>

00:28:02.389 --> 00:28:02.399 align:start position:0%
table for another process to run a
 

00:28:02.399 --> 00:28:04.549 align:start position:0%
table for another process to run a
runnable<00:28:02.799><c> process</c>

00:28:04.549 --> 00:28:04.559 align:start position:0%
runnable process
 

00:28:04.559 --> 00:28:07.909 align:start position:0%
runnable process
and<00:28:04.720><c> if</c><00:28:04.880><c> it</c><00:28:05.039><c> finds</c><00:28:05.600><c> one</c><00:28:07.039><c> and</c><00:28:07.279><c> so</c><00:28:07.440><c> we've</c>

00:28:07.909 --> 00:28:07.919 align:start position:0%
and if it finds one and so we've
 

00:28:07.919 --> 00:28:09.830 align:start position:0%
and if it finds one and so we've
sort<00:28:08.080><c> of</c><00:28:08.159><c> gone</c><00:28:08.399><c> down</c><00:28:08.720><c> here</c><00:28:09.039><c> and</c><00:28:09.279><c> up</c><00:28:09.440><c> into</c><00:28:09.679><c> the</c>

00:28:09.830 --> 00:28:09.840 align:start position:0%
sort of gone down here and up into the
 

00:28:09.840 --> 00:28:11.909 align:start position:0%
sort of gone down here and up into the
scheduler<00:28:10.720><c> if</c><00:28:10.880><c> the</c><00:28:11.039><c> scheduler</c><00:28:11.440><c> finds</c><00:28:11.679><c> another</c>

00:28:11.909 --> 00:28:11.919 align:start position:0%
scheduler if the scheduler finds another
 

00:28:11.919 --> 00:28:13.029 align:start position:0%
scheduler if the scheduler finds another
process<00:28:12.240><c> to</c><00:28:12.320><c> run</c><00:28:12.559><c> or</c><00:28:12.720><c> even</c>

00:28:13.029 --> 00:28:13.039 align:start position:0%
process to run or even
 

00:28:13.039 --> 00:28:15.590 align:start position:0%
process to run or even
finds<00:28:13.760><c> if</c><00:28:14.320><c> process</c><00:28:14.720><c> one</c><00:28:14.960><c> is</c><00:28:15.120><c> runnable</c><00:28:15.520><c> and</c>

00:28:15.590 --> 00:28:15.600 align:start position:0%
finds if process one is runnable and
 

00:28:15.600 --> 00:28:17.110 align:start position:0%
finds if process one is runnable and
still<00:28:15.840><c> wants</c><00:28:16.000><c> to</c><00:28:16.080><c> run</c><00:28:16.240><c> it</c><00:28:16.320><c> may</c><00:28:16.559><c> find</c><00:28:16.799><c> process</c>

00:28:17.110 --> 00:28:17.120 align:start position:0%
still wants to run it may find process
 

00:28:17.120 --> 00:28:18.710 align:start position:0%
still wants to run it may find process
one<00:28:17.279><c> nothing</c><00:28:17.600><c> else</c><00:28:17.840><c> nothing</c><00:28:18.159><c> else</c><00:28:18.320><c> wants</c><00:28:18.559><c> to</c>

00:28:18.710 --> 00:28:18.720 align:start position:0%
one nothing else nothing else wants to
 

00:28:18.720 --> 00:28:19.669 align:start position:0%
one nothing else nothing else wants to
run

00:28:19.669 --> 00:28:19.679 align:start position:0%
run
 

00:28:19.679 --> 00:28:21.830 align:start position:0%
run
but<00:28:19.840><c> in</c><00:28:20.000><c> any</c><00:28:20.159><c> case</c><00:28:20.320><c> the</c><00:28:20.480><c> scheduler</c><00:28:21.039><c> will</c><00:28:21.279><c> call</c>

00:28:21.830 --> 00:28:21.840 align:start position:0%
but in any case the scheduler will call
 

00:28:21.840 --> 00:28:23.190 align:start position:0%
but in any case the scheduler will call
switch<00:28:22.480><c> again</c><00:28:22.880><c> to</c>

00:28:23.190 --> 00:28:23.200 align:start position:0%
switch again to
 

00:28:23.200 --> 00:28:27.909 align:start position:0%
switch again to
switch<00:28:24.080><c> contexts</c><00:28:25.440><c> to</c><00:28:25.679><c> say</c><00:28:26.000><c> process</c><00:28:26.480><c> two</c>

00:28:27.909 --> 00:28:27.919 align:start position:0%
switch contexts to say process two
 

00:28:27.919 --> 00:28:29.669 align:start position:0%
switch contexts to say process two
in<00:28:28.000><c> the</c><00:28:28.159><c> process</c><00:28:28.399><c> of</c><00:28:28.480><c> which</c><00:28:28.640><c> it</c><00:28:28.799><c> will</c><00:28:29.039><c> save</c><00:28:29.520><c> its</c>

00:28:29.669 --> 00:28:29.679 align:start position:0%
in the process of which it will save its
 

00:28:29.679 --> 00:28:31.029 align:start position:0%
in the process of which it will save its
own<00:28:29.840><c> registers</c><00:28:30.559><c> again</c>

00:28:31.029 --> 00:28:31.039 align:start position:0%
own registers again
 

00:28:31.039 --> 00:28:33.750 align:start position:0%
own registers again
in<00:28:31.200><c> its</c><00:28:31.360><c> own</c><00:28:31.600><c> context</c><00:28:33.200><c> there'll</c><00:28:33.360><c> be</c><00:28:33.520><c> a</c>

00:28:33.750 --> 00:28:33.760 align:start position:0%
in its own context there'll be a
 

00:28:33.760 --> 00:28:35.830 align:start position:0%
in its own context there'll be a
previously<00:28:34.480><c> saved</c>

00:28:35.830 --> 00:28:35.840 align:start position:0%
previously saved
 

00:28:35.840 --> 00:28:37.909 align:start position:0%
previously saved
context<00:28:36.399><c> too</c><00:28:36.640><c> from</c><00:28:36.799><c> whenever</c><00:28:37.279><c> process</c><00:28:37.679><c> two</c>

00:28:37.909 --> 00:28:37.919 align:start position:0%
context too from whenever process two
 

00:28:37.919 --> 00:28:38.950 align:start position:0%
context too from whenever process two
left<00:28:38.240><c> off</c>

00:28:38.950 --> 00:28:38.960 align:start position:0%
left off
 

00:28:38.960 --> 00:28:41.029 align:start position:0%
left off
that<00:28:39.200><c> those</c><00:28:39.600><c> this</c><00:28:39.840><c> set</c><00:28:40.080><c> of</c><00:28:40.240><c> registers</c><00:28:40.720><c> will</c><00:28:40.880><c> be</c>

00:28:41.029 --> 00:28:41.039 align:start position:0%
that those this set of registers will be
 

00:28:41.039 --> 00:28:42.710 align:start position:0%
that those this set of registers will be
restored

00:28:42.710 --> 00:28:42.720 align:start position:0%
restored
 

00:28:42.720 --> 00:28:44.549 align:start position:0%
restored
process<00:28:43.120><c> two</c><00:28:43.279><c> will</c><00:28:43.520><c> have</c><00:28:43.600><c> made</c><00:28:43.840><c> a</c><00:28:44.000><c> previous</c>

00:28:44.549 --> 00:28:44.559 align:start position:0%
process two will have made a previous
 

00:28:44.559 --> 00:28:46.789 align:start position:0%
process two will have made a previous
call<00:28:44.799><c> to</c><00:28:45.039><c> switch</c>

00:28:46.789 --> 00:28:46.799 align:start position:0%
call to switch
 

00:28:46.799 --> 00:28:49.350 align:start position:0%
call to switch
um<00:28:48.000><c> to</c><00:28:48.159><c> switch</c><00:28:48.399><c> to</c><00:28:48.559><c> the</c><00:28:48.640><c> scheduler</c><00:28:49.120><c> thread</c>

00:28:49.350 --> 00:28:49.360 align:start position:0%
um to switch to the scheduler thread
 

00:28:49.360 --> 00:28:51.110 align:start position:0%
um to switch to the scheduler thread
just<00:28:49.520><c> like</c><00:28:49.679><c> process</c><00:28:50.080><c> one</c><00:28:50.320><c> did</c><00:28:50.480><c> when</c><00:28:50.720><c> it</c><00:28:50.799><c> left</c>

00:28:51.110 --> 00:28:51.120 align:start position:0%
just like process one did when it left
 

00:28:51.120 --> 00:28:51.669 align:start position:0%
just like process one did when it left
off

00:28:51.669 --> 00:28:51.679 align:start position:0%
off
 

00:28:51.679 --> 00:28:53.190 align:start position:0%
off
that<00:28:51.840><c> call</c><00:28:52.000><c> to</c><00:28:52.159><c> switch</c><00:28:52.480><c> will</c><00:28:52.640><c> return</c><00:28:53.039><c> to</c>

00:28:53.190 --> 00:28:53.200 align:start position:0%
that call to switch will return to
 

00:28:53.200 --> 00:28:54.870 align:start position:0%
that call to switch will return to
whatever

00:28:54.870 --> 00:28:54.880 align:start position:0%
whatever
 

00:28:54.880 --> 00:28:56.870 align:start position:0%
whatever
system<00:28:55.279><c> call</c><00:28:55.520><c> or</c><00:28:55.679><c> interrupt</c><00:28:56.080><c> process</c><00:28:56.480><c> two</c><00:28:56.720><c> was</c>

00:28:56.870 --> 00:28:56.880 align:start position:0%
system call or interrupt process two was
 

00:28:56.880 --> 00:28:58.950 align:start position:0%
system call or interrupt process two was
in<00:28:57.760><c> when</c><00:28:57.919><c> that's</c><00:28:58.159><c> finished</c>

00:28:58.950 --> 00:28:58.960 align:start position:0%
in when that's finished
 

00:28:58.960 --> 00:29:01.190 align:start position:0%
in when that's finished
there<00:28:59.120><c> will</c><00:28:59.279><c> be</c><00:28:59.440><c> a</c><00:28:59.679><c> previously</c><00:29:00.399><c> saved</c><00:29:00.880><c> trap</c>

00:29:01.190 --> 00:29:01.200 align:start position:0%
there will be a previously saved trap
 

00:29:01.200 --> 00:29:02.630 align:start position:0%
there will be a previously saved trap
frame<00:29:01.440><c> for</c><00:29:01.679><c> process</c><00:29:02.080><c> 2</c>

00:29:02.630 --> 00:29:02.640 align:start position:0%
frame for process 2
 

00:29:02.640 --> 00:29:04.310 align:start position:0%
frame for process 2
that<00:29:02.880><c> will</c><00:29:02.960><c> contain</c><00:29:03.279><c> user</c><00:29:03.520><c> registers</c><00:29:04.080><c> those</c>

00:29:04.310 --> 00:29:04.320 align:start position:0%
that will contain user registers those
 

00:29:04.320 --> 00:29:06.389 align:start position:0%
that will contain user registers those
will<00:29:04.399><c> be</c><00:29:04.559><c> restored</c><00:29:05.039><c> and</c><00:29:05.120><c> will</c>

00:29:06.389 --> 00:29:06.399 align:start position:0%
will be restored and will
 

00:29:06.399 --> 00:29:10.310 align:start position:0%
will be restored and will
return<00:29:06.880><c> back</c><00:29:07.120><c> up</c><00:29:07.200><c> into</c><00:29:07.360><c> user</c><00:29:07.679><c> space</c>

00:29:10.310 --> 00:29:10.320 align:start position:0%
 
 

00:29:10.320 --> 00:29:12.389 align:start position:0%
 
and<00:29:10.399><c> there's</c><00:29:10.640><c> a</c><00:29:10.720><c> complete</c><00:29:11.600><c> a</c><00:29:11.919><c> separate</c>

00:29:12.389 --> 00:29:12.399 align:start position:0%
and there's a complete a separate
 

00:29:12.399 --> 00:29:14.470 align:start position:0%
and there's a complete a separate
scheduler

00:29:14.470 --> 00:29:14.480 align:start position:0%
scheduler
 

00:29:14.480 --> 00:29:16.870 align:start position:0%
scheduler
thread<00:29:14.960><c> for</c><00:29:15.200><c> each</c><00:29:15.360><c> cpu</c><00:29:15.840><c> so</c><00:29:16.000><c> it'll</c><00:29:16.240><c> also</c><00:29:16.559><c> be</c>

00:29:16.870 --> 00:29:16.880 align:start position:0%
thread for each cpu so it'll also be
 

00:29:16.880 --> 00:29:19.830 align:start position:0%
thread for each cpu so it'll also be
saved

00:29:19.830 --> 00:29:19.840 align:start position:0%
 
 

00:29:19.840 --> 00:29:22.310 align:start position:0%
 
context<00:29:20.320><c> for</c><00:29:20.559><c> the</c><00:29:20.720><c> scheduler</c><00:29:21.279><c> thread</c><00:29:21.600><c> for</c><00:29:21.919><c> cpu</c>

00:29:22.310 --> 00:29:22.320 align:start position:0%
context for the scheduler thread for cpu
 

00:29:22.320 --> 00:29:23.990 align:start position:0%
context for the scheduler thread for cpu
one

00:29:23.990 --> 00:29:24.000 align:start position:0%
one
 

00:29:24.000 --> 00:29:27.750 align:start position:0%
one
and<00:29:24.720><c> a</c><00:29:24.880><c> scheduler</c><00:29:25.440><c> loop</c>

00:29:27.750 --> 00:29:27.760 align:start position:0%
and a scheduler loop
 

00:29:27.760 --> 00:29:29.430 align:start position:0%
and a scheduler loop
running<00:29:28.000><c> on</c><00:29:28.159><c> scheduler</c><00:29:28.640><c> one</c><00:29:28.880><c> and</c><00:29:29.039><c> whatever</c>

00:29:29.430 --> 00:29:29.440 align:start position:0%
running on scheduler one and whatever
 

00:29:29.440 --> 00:29:31.029 align:start position:0%
running on scheduler one and whatever
process<00:29:30.080><c> you</c><00:29:30.159><c> know</c><00:29:30.320><c> process</c><00:29:30.720><c> three</c><00:29:30.960><c> or</c>

00:29:31.029 --> 00:29:31.039 align:start position:0%
process you know process three or
 

00:29:31.039 --> 00:29:31.669 align:start position:0%
process you know process three or
something

00:29:31.669 --> 00:29:31.679 align:start position:0%
something
 

00:29:31.679 --> 00:29:33.909 align:start position:0%
something
is<00:29:31.840><c> running</c><00:29:32.080><c> on</c><00:29:32.240><c> cpu</c><00:29:32.640><c> one</c><00:29:32.880><c> when</c><00:29:33.120><c> it</c><00:29:33.360><c> decides</c><00:29:33.760><c> to</c>

00:29:33.909 --> 00:29:33.919 align:start position:0%
is running on cpu one when it decides to
 

00:29:33.919 --> 00:29:37.430 align:start position:0%
is running on cpu one when it decides to
give<00:29:34.080><c> up</c><00:29:34.159><c> the</c><00:29:34.240><c> cpu</c><00:29:34.720><c> it'll</c><00:29:35.039><c> switch</c><00:29:35.440><c> into</c>

00:29:37.430 --> 00:29:37.440 align:start position:0%
give up the cpu it'll switch into
 

00:29:37.440 --> 00:29:40.789 align:start position:0%
give up the cpu it'll switch into
the<00:29:37.600><c> scheduler</c><00:29:38.720><c> thread</c><00:29:39.039><c> for</c><00:29:39.279><c> it</c><00:29:39.840><c> for</c><00:29:40.080><c> its</c>

00:29:40.789 --> 00:29:40.799 align:start position:0%
the scheduler thread for it for its
 

00:29:40.799 --> 00:29:45.110 align:start position:0%
the scheduler thread for it for its
cpu<00:29:43.760><c> all</c><00:29:43.840><c> right</c><00:29:44.000><c> there's</c><00:29:44.159><c> a</c><00:29:44.480><c> question</c><00:29:44.880><c> where</c>

00:29:45.110 --> 00:29:45.120 align:start position:0%
cpu all right there's a question where
 

00:29:45.120 --> 00:29:48.149 align:start position:0%
cpu all right there's a question where
the<00:29:45.360><c> context</c><00:29:46.080><c> stored</c>

00:29:48.149 --> 00:29:48.159 align:start position:0%
the context stored
 

00:29:48.159 --> 00:29:51.269 align:start position:0%
the context stored
it<00:29:48.399><c> turns</c><00:29:48.799><c> out</c><00:29:49.039><c> that</c><00:29:49.360><c> for</c><00:29:49.679><c> the</c><00:29:50.799><c> operations</c>

00:29:51.269 --> 00:29:51.279 align:start position:0%
it turns out that for the operations
 

00:29:51.279 --> 00:29:52.710 align:start position:0%
it turns out that for the operations
i've<00:29:51.360><c> been</c><00:29:51.520><c> talking</c><00:29:51.840><c> about</c>

00:29:52.710 --> 00:29:52.720 align:start position:0%
i've been talking about
 

00:29:52.720 --> 00:29:57.190 align:start position:0%
i've been talking about
the<00:29:53.200><c> saved</c><00:29:54.080><c> in</c><00:29:54.159><c> fact</c><00:29:54.399><c> always</c><00:29:55.120><c> the</c>

00:29:57.190 --> 00:29:57.200 align:start position:0%
the saved in fact always the
 

00:29:57.200 --> 00:30:01.110 align:start position:0%
the saved in fact always the
for<00:29:57.440><c> a</c><00:29:57.760><c> thread</c><00:29:58.240><c> switch</c><00:29:59.520><c> um</c>

00:30:01.110 --> 00:30:01.120 align:start position:0%
for a thread switch um
 

00:30:01.120 --> 00:30:03.590 align:start position:0%
for a thread switch um
these<00:30:01.600><c> contexts</c><00:30:02.320><c> these</c><00:30:02.559><c> saved</c><00:30:02.880><c> register</c><00:30:03.360><c> sets</c>

00:30:03.590 --> 00:30:03.600 align:start position:0%
these contexts these saved register sets
 

00:30:03.600 --> 00:30:05.190 align:start position:0%
these contexts these saved register sets
for<00:30:03.760><c> kernel</c><00:30:04.000><c> threads</c><00:30:04.399><c> are</c><00:30:04.559><c> in</c><00:30:04.640><c> the</c><00:30:04.799><c> process</c>

00:30:05.190 --> 00:30:05.200 align:start position:0%
for kernel threads are in the process
 

00:30:05.200 --> 00:30:06.149 align:start position:0%
for kernel threads are in the process
structure

00:30:06.149 --> 00:30:06.159 align:start position:0%
structure
 

00:30:06.159 --> 00:30:09.029 align:start position:0%
structure
so<00:30:06.640><c> any</c><00:30:06.880><c> given</c><00:30:07.120><c> kernel</c><00:30:07.440><c> thread</c><00:30:07.679><c> can</c><00:30:07.919><c> only</c><00:30:08.720><c> have</c>

00:30:09.029 --> 00:30:09.039 align:start position:0%
so any given kernel thread can only have
 

00:30:09.039 --> 00:30:09.430 align:start position:0%
so any given kernel thread can only have
one

00:30:09.430 --> 00:30:09.440 align:start position:0%
one
 

00:30:09.440 --> 00:30:12.549 align:start position:0%
one
set<00:30:09.600><c> of</c><00:30:09.840><c> saved</c><00:30:10.480><c> kernel</c><00:30:10.880><c> registers</c><00:30:12.320><c> because</c>

00:30:12.549 --> 00:30:12.559 align:start position:0%
set of saved kernel registers because
 

00:30:12.559 --> 00:30:13.830 align:start position:0%
set of saved kernel registers because
each<00:30:12.880><c> thread</c><00:30:13.200><c> is</c>

00:30:13.830 --> 00:30:13.840 align:start position:0%
each thread is
 

00:30:13.840 --> 00:30:15.590 align:start position:0%
each thread is
only<00:30:14.080><c> executing</c><00:30:14.559><c> at</c><00:30:14.640><c> sort</c><00:30:14.799><c> of</c><00:30:14.880><c> a</c><00:30:14.960><c> single</c><00:30:15.279><c> place</c>

00:30:15.590 --> 00:30:15.600 align:start position:0%
only executing at sort of a single place
 

00:30:15.600 --> 00:30:16.870 align:start position:0%
only executing at sort of a single place
and<00:30:15.679><c> its</c><00:30:15.919><c> context</c>

00:30:16.870 --> 00:30:16.880 align:start position:0%
and its context
 

00:30:16.880 --> 00:30:19.110 align:start position:0%
and its context
kind<00:30:17.039><c> of</c><00:30:17.200><c> reflects</c><00:30:17.760><c> that</c><00:30:18.320><c> place</c><00:30:18.640><c> that</c><00:30:18.799><c> it</c><00:30:18.880><c> was</c>

00:30:19.110 --> 00:30:19.120 align:start position:0%
kind of reflects that place that it was
 

00:30:19.120 --> 00:30:20.950 align:start position:0%
kind of reflects that place that it was
executing<00:30:19.679><c> when</c><00:30:19.840><c> it</c><00:30:19.919><c> left</c><00:30:20.240><c> off</c><00:30:20.559><c> because</c>

00:30:20.950 --> 00:30:20.960 align:start position:0%
executing when it left off because
 

00:30:20.960 --> 00:30:23.269 align:start position:0%
executing when it left off because
a<00:30:21.039><c> thread</c><00:30:21.360><c> is</c><00:30:21.440><c> a</c><00:30:21.520><c> single</c><00:30:22.559><c> thread</c><00:30:22.799><c> of</c><00:30:22.880><c> control</c>

00:30:23.269 --> 00:30:23.279 align:start position:0%
a thread is a single thread of control
 

00:30:23.279 --> 00:30:24.470 align:start position:0%
a thread is a single thread of control
so<00:30:23.520><c> a</c><00:30:23.600><c> thread</c>

00:30:24.470 --> 00:30:24.480 align:start position:0%
so a thread
 

00:30:24.480 --> 00:30:26.470 align:start position:0%
so a thread
really<00:30:24.720><c> only</c><00:30:24.960><c> needs</c><00:30:25.200><c> one</c><00:30:25.440><c> context</c><00:30:26.240><c> full</c><00:30:26.399><c> of</c>

00:30:26.470 --> 00:30:26.480 align:start position:0%
really only needs one context full of
 

00:30:26.480 --> 00:30:28.070 align:start position:0%
really only needs one context full of
registers<00:30:27.279><c> so</c><00:30:27.440><c> it's</c><00:30:27.600><c> in</c><00:30:27.679><c> the</c><00:30:27.760><c> process</c>

00:30:28.070 --> 00:30:28.080 align:start position:0%
registers so it's in the process
 

00:30:28.080 --> 00:30:28.789 align:start position:0%
registers so it's in the process
structure<00:30:28.399><c> it's</c><00:30:28.559><c> p</c>

00:30:28.789 --> 00:30:28.799 align:start position:0%
structure it's p
 

00:30:28.799 --> 00:30:31.990 align:start position:0%
structure it's p
arrow

00:30:31.990 --> 00:30:32.000 align:start position:0%
 
 

00:30:32.000 --> 00:30:35.269 align:start position:0%
 
procontext

00:30:35.269 --> 00:30:35.279 align:start position:0%
 
 

00:30:35.279 --> 00:30:37.029 align:start position:0%
 
and<00:30:35.440><c> the</c><00:30:35.600><c> scheduler</c><00:30:36.080><c> each</c><00:30:36.240><c> scheduler</c><00:30:36.720><c> thread</c>

00:30:37.029 --> 00:30:37.039 align:start position:0%
and the scheduler each scheduler thread
 

00:30:37.039 --> 00:30:39.110 align:start position:0%
and the scheduler each scheduler thread
has<00:30:37.200><c> its</c><00:30:37.440><c> own</c><00:30:38.240><c> context</c><00:30:38.559><c> which</c><00:30:38.720><c> is</c><00:30:38.799><c> actually</c>

00:30:39.110 --> 00:30:39.120 align:start position:0%
has its own context which is actually
 

00:30:39.120 --> 00:30:40.149 align:start position:0%
has its own context which is actually
not<00:30:39.440><c> in</c><00:30:39.600><c> the</c>

00:30:40.149 --> 00:30:40.159 align:start position:0%
not in the
 

00:30:40.159 --> 00:30:42.389 align:start position:0%
not in the
there's<00:30:40.399><c> no</c><00:30:40.640><c> process</c><00:30:41.120><c> associated</c><00:30:41.600><c> with</c><00:30:41.760><c> this</c>

00:30:42.389 --> 00:30:42.399 align:start position:0%
there's no process associated with this
 

00:30:42.399 --> 00:30:43.590 align:start position:0%
there's no process associated with this
scheduler<00:30:42.960><c> thread</c>

00:30:43.590 --> 00:30:43.600 align:start position:0%
scheduler thread
 

00:30:43.600 --> 00:30:45.669 align:start position:0%
scheduler thread
so<00:30:43.760><c> this</c><00:30:43.840><c> is</c><00:30:44.000><c> actually</c><00:30:44.960><c> the</c><00:30:45.200><c> scheduler's</c>

00:30:45.669 --> 00:30:45.679 align:start position:0%
so this is actually the scheduler's
 

00:30:45.679 --> 00:30:47.590 align:start position:0%
so this is actually the scheduler's
contacts<00:30:46.159><c> is</c><00:30:46.240><c> stored</c><00:30:46.640><c> in</c>

00:30:47.590 --> 00:30:47.600 align:start position:0%
contacts is stored in
 

00:30:47.600 --> 00:30:51.350 align:start position:0%
contacts is stored in
the<00:30:47.760><c> struct</c><00:30:48.399><c> cpu</c><00:30:49.600><c> for</c><00:30:49.840><c> that</c><00:30:50.159><c> core</c>

00:30:51.350 --> 00:30:51.360 align:start position:0%
the struct cpu for that core
 

00:30:51.360 --> 00:30:53.269 align:start position:0%
the struct cpu for that core
there's<00:30:51.600><c> an</c><00:30:51.679><c> array</c><00:30:52.000><c> of</c><00:30:52.080><c> these</c><00:30:52.240><c> cpu</c><00:30:52.640><c> structs</c>

00:30:53.269 --> 00:30:53.279 align:start position:0%
there's an array of these cpu structs
 

00:30:53.279 --> 00:30:55.110 align:start position:0%
there's an array of these cpu structs
one<00:30:53.520><c> per</c><00:30:53.679><c> core</c><00:30:54.000><c> each</c><00:30:54.159><c> one</c><00:30:54.399><c> has</c><00:30:54.559><c> a</c>

00:30:55.110 --> 00:30:55.120 align:start position:0%
one per core each one has a
 

00:30:55.120 --> 00:30:58.230 align:start position:0%
one per core each one has a
context

00:30:58.230 --> 00:30:58.240 align:start position:0%
 
 

00:30:58.240 --> 00:30:59.990 align:start position:0%
 
uh<00:30:58.480><c> question</c><00:30:58.799><c> why</c><00:30:58.960><c> can't</c><00:30:59.200><c> we</c><00:30:59.360><c> include</c><00:30:59.760><c> the</c>

00:30:59.990 --> 00:31:00.000 align:start position:0%
uh question why can't we include the
 

00:31:00.000 --> 00:31:01.430 align:start position:0%
uh question why can't we include the
registers<00:31:00.480><c> in</c><00:31:00.640><c> the</c><00:31:00.720><c> trap</c><00:31:00.960><c> frame</c><00:31:01.200><c> for</c><00:31:01.279><c> the</c>

00:31:01.430 --> 00:31:01.440 align:start position:0%
registers in the trap frame for the
 

00:31:01.440 --> 00:31:02.630 align:start position:0%
registers in the trap frame for the
process

00:31:02.630 --> 00:31:02.640 align:start position:0%
process
 

00:31:02.640 --> 00:31:06.789 align:start position:0%
process
that<00:31:02.880><c> is</c><00:31:03.760><c> uh</c><00:31:04.080><c> you</c><00:31:04.240><c> know</c><00:31:04.399><c> actually</c><00:31:04.799><c> the</c>

00:31:06.789 --> 00:31:06.799 align:start position:0%
that is uh you know actually the
 

00:31:06.799 --> 00:31:08.389 align:start position:0%
that is uh you know actually the
those<00:31:07.120><c> registers</c><00:31:07.600><c> could</c><00:31:07.760><c> be</c><00:31:07.919><c> stored</c><00:31:08.240><c> in</c><00:31:08.320><c> the</c>

00:31:08.389 --> 00:31:08.399 align:start position:0%
those registers could be stored in the
 

00:31:08.399 --> 00:31:10.149 align:start position:0%
those registers could be stored in the
trap<00:31:08.640><c> frame</c><00:31:08.799><c> which</c><00:31:08.960><c> is</c><00:31:09.039><c> made</c><00:31:09.600><c> because</c><00:31:09.919><c> there's</c>

00:31:10.149 --> 00:31:10.159 align:start position:0%
trap frame which is made because there's
 

00:31:10.159 --> 00:31:12.310 align:start position:0%
trap frame which is made because there's
only<00:31:10.399><c> one</c><00:31:10.720><c> saved</c><00:31:11.120><c> set</c><00:31:11.360><c> of</c>

00:31:12.310 --> 00:31:12.320 align:start position:0%
only one saved set of
 

00:31:12.320 --> 00:31:15.029 align:start position:0%
only one saved set of
kernel<00:31:12.640><c> thread</c><00:31:12.960><c> registers</c><00:31:14.320><c> per</c><00:31:14.559><c> process</c><00:31:14.960><c> we</c>

00:31:15.029 --> 00:31:15.039 align:start position:0%
kernel thread registers per process we
 

00:31:15.039 --> 00:31:17.190 align:start position:0%
kernel thread registers per process we
could<00:31:15.279><c> save</c><00:31:15.519><c> them</c><00:31:15.679><c> in</c><00:31:15.840><c> any</c><00:31:16.000><c> data</c><00:31:16.320><c> structure</c>

00:31:17.190 --> 00:31:17.200 align:start position:0%
could save them in any data structure
 

00:31:17.200 --> 00:31:19.430 align:start position:0%
could save them in any data structure
for<00:31:17.360><c> which</c><00:31:17.600><c> there's</c><00:31:17.919><c> one</c><00:31:18.720><c> you</c><00:31:18.880><c> know</c><00:31:19.039><c> element</c>

00:31:19.430 --> 00:31:19.440 align:start position:0%
for which there's one you know element
 

00:31:19.440 --> 00:31:21.430 align:start position:0%
for which there's one you know element
of<00:31:20.000><c> instance</c><00:31:20.320><c> of</c><00:31:20.399><c> that</c><00:31:20.559><c> data</c><00:31:20.799><c> structure</c><00:31:21.200><c> per</c>

00:31:21.430 --> 00:31:21.440 align:start position:0%
of instance of that data structure per
 

00:31:21.440 --> 00:31:22.310 align:start position:0%
of instance of that data structure per
process

00:31:22.310 --> 00:31:22.320 align:start position:0%
process
 

00:31:22.320 --> 00:31:24.310 align:start position:0%
process
now<00:31:22.480><c> there's</c><00:31:22.640><c> one</c><00:31:22.880><c> struct</c><00:31:23.279><c> proc</c><00:31:23.919><c> process</c>

00:31:24.310 --> 00:31:24.320 align:start position:0%
now there's one struct proc process
 

00:31:24.320 --> 00:31:25.750 align:start position:0%
now there's one struct proc process
there's<00:31:24.480><c> one</c><00:31:24.720><c> struct</c><00:31:25.120><c> trap</c><00:31:25.360><c> frame</c><00:31:25.600><c> for</c>

00:31:25.750 --> 00:31:25.760 align:start position:0%
there's one struct trap frame for
 

00:31:25.760 --> 00:31:26.549 align:start position:0%
there's one struct trap frame for
process

00:31:26.549 --> 00:31:26.559 align:start position:0%
process
 

00:31:26.559 --> 00:31:28.070 align:start position:0%
process
we<00:31:26.720><c> could</c><00:31:26.880><c> store</c><00:31:27.200><c> the</c><00:31:27.279><c> registers</c><00:31:27.679><c> in</c><00:31:27.760><c> the</c><00:31:27.840><c> trap</c>

00:31:28.070 --> 00:31:28.080 align:start position:0%
we could store the registers in the trap
 

00:31:28.080 --> 00:31:31.190 align:start position:0%
we could store the registers in the trap
frame

00:31:31.190 --> 00:31:31.200 align:start position:0%
 
 

00:31:31.200 --> 00:31:33.990 align:start position:0%
 
but<00:31:31.919><c> i</c><00:31:32.000><c> mean</c><00:31:32.159><c> just</c><00:31:32.399><c> sort</c><00:31:32.559><c> of</c><00:31:32.720><c> for</c><00:31:33.600><c> maybe</c>

00:31:33.990 --> 00:31:34.000 align:start position:0%
but i mean just sort of for maybe
 

00:31:34.000 --> 00:31:36.070 align:start position:0%
but i mean just sort of for maybe
simplicity<00:31:34.640><c> or</c><00:31:34.799><c> clarity</c><00:31:35.200><c> of</c><00:31:35.279><c> code</c><00:31:35.600><c> the</c><00:31:35.840><c> trap</c>

00:31:36.070 --> 00:31:36.080 align:start position:0%
simplicity or clarity of code the trap
 

00:31:36.080 --> 00:31:36.549 align:start position:0%
simplicity or clarity of code the trap
frame

00:31:36.549 --> 00:31:36.559 align:start position:0%
frame
 

00:31:36.559 --> 00:31:39.669 align:start position:0%
frame
i<00:31:36.640><c> think</c><00:31:37.519><c> entirely</c><00:31:38.159><c> consists</c><00:31:38.720><c> of</c><00:31:38.960><c> uh</c>

00:31:39.669 --> 00:31:39.679 align:start position:0%
i think entirely consists of uh
 

00:31:39.679 --> 00:31:41.430 align:start position:0%
i think entirely consists of uh
data<00:31:40.000><c> that's</c><00:31:40.240><c> needed</c><00:31:40.559><c> when</c><00:31:40.880><c> entering</c><00:31:41.360><c> and</c>

00:31:41.430 --> 00:31:41.440 align:start position:0%
data that's needed when entering and
 

00:31:41.440 --> 00:31:43.029 align:start position:0%
data that's needed when entering and
leaving<00:31:41.760><c> the</c><00:31:41.919><c> kernel</c>

00:31:43.029 --> 00:31:43.039 align:start position:0%
leaving the kernel
 

00:31:43.039 --> 00:31:46.230 align:start position:0%
leaving the kernel
and<00:31:43.519><c> the</c><00:31:43.679><c> struct</c><00:31:44.000><c> context</c><00:31:44.640><c> is</c><00:31:45.760><c> consists</c><00:31:46.159><c> of</c>

00:31:46.230 --> 00:31:46.240 align:start position:0%
and the struct context is consists of
 

00:31:46.240 --> 00:31:47.430 align:start position:0%
and the struct context is consists of
the<00:31:46.399><c> stuff</c><00:31:46.640><c> that</c><00:31:46.720><c> needs</c><00:31:46.880><c> to</c><00:31:46.960><c> be</c><00:31:47.120><c> saved</c><00:31:47.279><c> and</c>

00:31:47.430 --> 00:31:47.440 align:start position:0%
the stuff that needs to be saved and
 

00:31:47.440 --> 00:31:48.230 align:start position:0%
the stuff that needs to be saved and
restored<00:31:47.919><c> when</c>

00:31:48.230 --> 00:31:48.240 align:start position:0%
restored when
 

00:31:48.240 --> 00:31:50.789 align:start position:0%
restored when
switching<00:31:48.720><c> to</c><00:31:48.960><c> and</c><00:31:49.120><c> from</c><00:31:49.679><c> between</c><00:31:50.159><c> the</c><00:31:50.480><c> kernel</c>

00:31:50.789 --> 00:31:50.799 align:start position:0%
switching to and from between the kernel
 

00:31:50.799 --> 00:31:51.590 align:start position:0%
switching to and from between the kernel
thread<00:31:51.120><c> and</c><00:31:51.200><c> the</c>

00:31:51.590 --> 00:31:51.600 align:start position:0%
thread and the
 

00:31:51.600 --> 00:31:55.509 align:start position:0%
thread and the
scheduler<00:31:52.080><c> thread</c><00:31:54.559><c> okay</c><00:31:54.880><c> question</c><00:31:55.200><c> is</c><00:31:55.279><c> yield</c>

00:31:55.509 --> 00:31:55.519 align:start position:0%
scheduler thread okay question is yield
 

00:31:55.519 --> 00:31:56.789 align:start position:0%
scheduler thread okay question is yield
something<00:31:55.760><c> that's</c><00:31:55.919><c> called</c><00:31:56.159><c> by</c><00:31:56.320><c> the</c><00:31:56.480><c> user</c><00:31:56.720><c> or</c>

00:31:56.789 --> 00:31:56.799 align:start position:0%
something that's called by the user or
 

00:31:56.799 --> 00:31:59.110 align:start position:0%
something that's called by the user or
the<00:31:56.880><c> kernel</c><00:31:57.200><c> it's</c><00:31:57.279><c> called</c><00:31:57.440><c> by</c><00:31:57.600><c> the</c><00:31:57.760><c> kernel</c>

00:31:59.110 --> 00:31:59.120 align:start position:0%
the kernel it's called by the kernel
 

00:31:59.120 --> 00:32:01.269 align:start position:0%
the kernel it's called by the kernel
so<00:31:59.279><c> the</c><00:31:59.679><c> user</c><00:32:00.159><c> threads</c><00:32:00.480><c> there's</c><00:32:00.799><c> not</c><00:32:00.960><c> really</c><00:32:01.200><c> a</c>

00:32:01.269 --> 00:32:01.279 align:start position:0%
so the user threads there's not really a
 

00:32:01.279 --> 00:32:03.990 align:start position:0%
so the user threads there's not really a
direct<00:32:01.600><c> way</c><00:32:01.840><c> in</c><00:32:02.000><c> xv6</c><00:32:02.559><c> for</c><00:32:02.720><c> user</c><00:32:03.039><c> threads</c><00:32:03.360><c> to</c>

00:32:03.990 --> 00:32:04.000 align:start position:0%
direct way in xv6 for user threads to
 

00:32:04.000 --> 00:32:07.350 align:start position:0%
direct way in xv6 for user threads to
talk<00:32:04.240><c> about</c><00:32:05.200><c> um</c><00:32:06.240><c> yielding</c><00:32:06.640><c> the</c><00:32:06.720><c> cpu</c><00:32:07.279><c> or</c>

00:32:07.350 --> 00:32:07.360 align:start position:0%
talk about um yielding the cpu or
 

00:32:07.360 --> 00:32:08.470 align:start position:0%
talk about um yielding the cpu or
switching

00:32:08.470 --> 00:32:08.480 align:start position:0%
switching
 

00:32:08.480 --> 00:32:11.190 align:start position:0%
switching
uh<00:32:09.200><c> it's</c><00:32:09.679><c> done</c><00:32:09.919><c> by</c><00:32:10.080><c> the</c><00:32:10.159><c> kernel</c><00:32:10.799><c> kind</c><00:32:10.960><c> of</c>

00:32:11.190 --> 00:32:11.200 align:start position:0%
uh it's done by the kernel kind of
 

00:32:11.200 --> 00:32:13.110 align:start position:0%
uh it's done by the kernel kind of
transparently

00:32:13.110 --> 00:32:13.120 align:start position:0%
transparently
 

00:32:13.120 --> 00:32:14.470 align:start position:0%
transparently
you<00:32:13.200><c> know</c><00:32:13.360><c> at</c><00:32:13.679><c> points</c><00:32:14.000><c> in</c><00:32:14.080><c> time</c><00:32:14.240><c> when</c><00:32:14.399><c> the</c>

00:32:14.470 --> 00:32:14.480 align:start position:0%
you know at points in time when the
 

00:32:14.480 --> 00:32:16.710 align:start position:0%
you know at points in time when the
kernel<00:32:14.799><c> feels</c><00:32:15.039><c> that</c><00:32:15.440><c> it</c><00:32:15.600><c> needs</c><00:32:15.919><c> to</c><00:32:16.000><c> happen</c>

00:32:16.710 --> 00:32:16.720 align:start position:0%
kernel feels that it needs to happen
 

00:32:16.720 --> 00:32:18.950 align:start position:0%
kernel feels that it needs to happen
if<00:32:16.880><c> there</c><00:32:16.960><c> are</c><00:32:17.120><c> threads</c><00:32:18.159><c> um</c><00:32:18.559><c> there</c><00:32:18.720><c> are</c><00:32:18.799><c> some</c>

00:32:18.950 --> 00:32:18.960 align:start position:0%
if there are threads um there are some
 

00:32:18.960 --> 00:32:21.269 align:start position:0%
if there are threads um there are some
times<00:32:19.279><c> when</c>

00:32:21.269 --> 00:32:21.279 align:start position:0%
times when
 

00:32:21.279 --> 00:32:23.750 align:start position:0%
times when
you<00:32:21.440><c> can</c><00:32:21.679><c> sort</c><00:32:21.919><c> of</c><00:32:22.240><c> guess</c><00:32:22.880><c> that</c><00:32:23.200><c> probably</c><00:32:23.679><c> a</c>

00:32:23.750 --> 00:32:23.760 align:start position:0%
you can sort of guess that probably a
 

00:32:23.760 --> 00:32:25.190 align:start position:0%
you can sort of guess that probably a
certain<00:32:24.080><c> system</c><00:32:24.480><c> call</c>

00:32:25.190 --> 00:32:25.200 align:start position:0%
certain system call
 

00:32:25.200 --> 00:32:28.630 align:start position:0%
certain system call
will<00:32:25.360><c> result</c><00:32:25.679><c> in</c><00:32:25.840><c> a</c><00:32:25.919><c> yield</c><00:32:26.399><c> like</c><00:32:27.519><c> if</c><00:32:27.760><c> a</c><00:32:27.919><c> process</c>

00:32:28.630 --> 00:32:28.640 align:start position:0%
will result in a yield like if a process
 

00:32:28.640 --> 00:32:30.789 align:start position:0%
will result in a yield like if a process
does<00:32:28.880><c> a</c><00:32:29.039><c> read</c><00:32:29.440><c> on</c><00:32:29.600><c> a</c><00:32:29.760><c> pipe</c><00:32:30.080><c> where</c><00:32:30.240><c> it</c><00:32:30.399><c> knows</c>

00:32:30.789 --> 00:32:30.799 align:start position:0%
does a read on a pipe where it knows
 

00:32:30.799 --> 00:32:32.230 align:start position:0%
does a read on a pipe where it knows
that<00:32:31.039><c> really</c><00:32:31.279><c> nothing</c><00:32:31.600><c> is</c><00:32:31.760><c> waiting</c><00:32:32.000><c> to</c><00:32:32.159><c> be</c>

00:32:32.230 --> 00:32:32.240 align:start position:0%
that really nothing is waiting to be
 

00:32:32.240 --> 00:32:33.909 align:start position:0%
that really nothing is waiting to be
read<00:32:32.399><c> on</c><00:32:32.559><c> the</c><00:32:32.720><c> pipe</c>

00:32:33.909 --> 00:32:33.919 align:start position:0%
read on the pipe
 

00:32:33.919 --> 00:32:36.549 align:start position:0%
read on the pipe
then<00:32:34.080><c> the</c><00:32:34.240><c> reed</c><00:32:34.480><c> will</c><00:32:34.640><c> block</c><00:32:35.760><c> you</c><00:32:35.919><c> can</c><00:32:36.080><c> predict</c>

00:32:36.549 --> 00:32:36.559 align:start position:0%
then the reed will block you can predict
 

00:32:36.559 --> 00:32:37.909 align:start position:0%
then the reed will block you can predict
the<00:32:36.640><c> read</c><00:32:36.799><c> will</c><00:32:36.960><c> block</c><00:32:37.279><c> and</c><00:32:37.360><c> that</c><00:32:37.519><c> the</c>

00:32:37.909 --> 00:32:37.919 align:start position:0%
the read will block and that the
 

00:32:37.919 --> 00:32:40.789 align:start position:0%
the read will block and that the
kernel<00:32:38.320><c> will</c><00:32:39.279><c> run</c><00:32:39.600><c> some</c><00:32:39.840><c> other</c><00:32:40.080><c> process</c><00:32:40.559><c> while</c>

00:32:40.789 --> 00:32:40.799 align:start position:0%
kernel will run some other process while
 

00:32:40.799 --> 00:32:41.350 align:start position:0%
kernel will run some other process while
we're

00:32:41.350 --> 00:32:41.360 align:start position:0%
we're
 

00:32:41.360 --> 00:32:45.350 align:start position:0%
we're
waiting<00:32:41.600><c> for</c><00:32:41.760><c> data</c><00:32:42.000><c> to</c><00:32:42.159><c> appear</c><00:32:42.399><c> in</c><00:32:42.480><c> the</c><00:32:42.640><c> pipe</c>

00:32:45.350 --> 00:32:45.360 align:start position:0%
 
 

00:32:45.360 --> 00:32:47.190 align:start position:0%
 
and<00:32:45.519><c> so</c><00:32:45.679><c> the</c><00:32:45.840><c> times</c><00:32:46.080><c> when</c><00:32:46.320><c> yield</c><00:32:46.720><c> is</c><00:32:46.880><c> called</c><00:32:47.120><c> in</c>

00:32:47.190 --> 00:32:47.200 align:start position:0%
and so the times when yield is called in
 

00:32:47.200 --> 00:32:48.870 align:start position:0%
and so the times when yield is called in
the<00:32:47.360><c> kernel</c><00:32:47.679><c> there's</c><00:32:47.919><c> really</c><00:32:48.159><c> two</c><00:32:48.320><c> main</c><00:32:48.640><c> times</c>

00:32:48.870 --> 00:32:48.880 align:start position:0%
the kernel there's really two main times
 

00:32:48.880 --> 00:32:49.430 align:start position:0%
the kernel there's really two main times
one<00:32:49.120><c> is</c>

00:32:49.430 --> 00:32:49.440 align:start position:0%
one is
 

00:32:49.440 --> 00:32:52.549 align:start position:0%
one is
if<00:32:49.600><c> a</c><00:32:49.679><c> timer</c><00:32:50.399><c> interrupt</c><00:32:50.799><c> goes</c><00:32:51.039><c> off</c><00:32:52.080><c> the</c><00:32:52.159><c> kernel</c>

00:32:52.549 --> 00:32:52.559 align:start position:0%
if a timer interrupt goes off the kernel
 

00:32:52.559 --> 00:32:54.389 align:start position:0%
if a timer interrupt goes off the kernel
always<00:32:52.799><c> yields</c>

00:32:54.389 --> 00:32:54.399 align:start position:0%
always yields
 

00:32:54.399 --> 00:32:57.590 align:start position:0%
always yields
you<00:32:54.480><c> know</c><00:32:54.720><c> just</c><00:32:55.519><c> on</c><00:32:55.519><c> on</c><00:32:55.919><c> the</c><00:32:56.080><c> theory</c><00:32:56.399><c> that</c>

00:32:57.590 --> 00:32:57.600 align:start position:0%
you know just on on the theory that
 

00:32:57.600 --> 00:33:01.029 align:start position:0%
you know just on on the theory that
uh<00:32:58.159><c> we</c><00:32:58.320><c> should</c><00:32:58.720><c> interleave</c><00:32:59.440><c> the</c><00:32:59.760><c> execution</c><00:33:00.399><c> of</c>

00:33:01.029 --> 00:33:01.039 align:start position:0%
uh we should interleave the execution of
 

00:33:01.039 --> 00:33:03.430 align:start position:0%
uh we should interleave the execution of
of<00:33:01.840><c> all</c><00:33:01.919><c> the</c><00:33:02.080><c> process</c><00:33:02.480><c> that</c><00:33:02.559><c> want</c><00:33:02.720><c> to</c><00:33:02.799><c> run</c><00:33:03.200><c> on</c>

00:33:03.430 --> 00:33:03.440 align:start position:0%
of all the process that want to run on
 

00:33:03.440 --> 00:33:05.350 align:start position:0%
of all the process that want to run on
timer<00:33:03.840><c> interrupt</c>

00:33:05.350 --> 00:33:05.360 align:start position:0%
timer interrupt
 

00:33:05.360 --> 00:33:08.230 align:start position:0%
timer interrupt
uh<00:33:05.679><c> periods</c><00:33:06.720><c> so</c><00:33:06.960><c> tom</c><00:33:07.200><c> renner</c><00:33:07.679><c> also</c><00:33:08.000><c> always</c>

00:33:08.230 --> 00:33:08.240 align:start position:0%
uh periods so tom renner also always
 

00:33:08.240 --> 00:33:09.350 align:start position:0%
uh periods so tom renner also always
calls<00:33:08.559><c> yield</c>

00:33:09.350 --> 00:33:09.360 align:start position:0%
calls yield
 

00:33:09.360 --> 00:33:11.430 align:start position:0%
calls yield
and<00:33:09.519><c> whenever</c><00:33:10.000><c> a</c><00:33:10.159><c> process</c><00:33:10.720><c> a</c><00:33:10.799><c> system</c><00:33:11.120><c> calls</c>

00:33:11.430 --> 00:33:11.440 align:start position:0%
and whenever a process a system calls
 

00:33:11.440 --> 00:33:12.950 align:start position:0%
and whenever a process a system calls
waiting<00:33:12.240><c> for</c><00:33:12.480><c> i</c><00:33:12.640><c> o</c>

00:33:12.950 --> 00:33:12.960 align:start position:0%
waiting for i o
 

00:33:12.960 --> 00:33:14.549 align:start position:0%
waiting for i o
like<00:33:13.440><c> waiting</c><00:33:13.760><c> for</c><00:33:13.840><c> you</c><00:33:13.919><c> to</c><00:33:14.080><c> type</c><00:33:14.240><c> the</c><00:33:14.320><c> next</c>

00:33:14.549 --> 00:33:14.559 align:start position:0%
like waiting for you to type the next
 

00:33:14.559 --> 00:33:16.310 align:start position:0%
like waiting for you to type the next
keystroke<00:33:15.039><c> you</c><00:33:15.120><c> know</c><00:33:15.279><c> does</c><00:33:15.519><c> a</c><00:33:15.600><c> read</c><00:33:16.000><c> of</c><00:33:16.080><c> the</c>

00:33:16.310 --> 00:33:16.320 align:start position:0%
keystroke you know does a read of the
 

00:33:16.320 --> 00:33:17.750 align:start position:0%
keystroke you know does a read of the
console<00:33:16.799><c> and</c><00:33:16.880><c> you</c><00:33:17.039><c> haven't</c><00:33:17.200><c> typed</c><00:33:17.440><c> the</c><00:33:17.519><c> key</c>

00:33:17.750 --> 00:33:17.760 align:start position:0%
console and you haven't typed the key
 

00:33:17.760 --> 00:33:18.549 align:start position:0%
console and you haven't typed the key
yet

00:33:18.549 --> 00:33:18.559 align:start position:0%
yet
 

00:33:18.559 --> 00:33:23.110 align:start position:0%
yet
then<00:33:19.039><c> the</c><00:33:20.480><c> the</c><00:33:20.640><c> machinery</c><00:33:21.200><c> to</c><00:33:21.360><c> wait</c><00:33:21.519><c> for</c><00:33:21.760><c> io</c>

00:33:23.110 --> 00:33:23.120 align:start position:0%
then the the machinery to wait for io
 

00:33:23.120 --> 00:33:25.350 align:start position:0%
then the the machinery to wait for io
calls<00:33:23.440><c> yield</c><00:33:23.840><c> it's</c><00:33:24.000><c> called</c><00:33:24.240><c> from</c><00:33:24.399><c> sleep</c>

00:33:25.350 --> 00:33:25.360 align:start position:0%
calls yield it's called from sleep
 

00:33:25.360 --> 00:33:29.190 align:start position:0%
calls yield it's called from sleep
something<00:33:25.600><c> we'll</c><00:33:25.760><c> talk</c><00:33:25.919><c> about</c><00:33:26.080><c> next</c><00:33:26.320><c> week</c>

00:33:29.190 --> 00:33:29.200 align:start position:0%
 
 

00:33:29.200 --> 00:33:32.470 align:start position:0%
 
all<00:33:29.360><c> right</c><00:33:31.600><c> um</c>

00:33:32.470 --> 00:33:32.480 align:start position:0%
all right um
 

00:33:32.480 --> 00:33:35.750 align:start position:0%
all right um
okay<00:33:33.360><c> another</c><00:33:33.760><c> question</c><00:33:34.480><c> yes</c>

00:33:35.750 --> 00:33:35.760 align:start position:0%
okay another question yes
 

00:33:35.760 --> 00:33:38.710 align:start position:0%
okay another question yes
oh<00:33:36.159><c> if</c><00:33:36.399><c> it</c><00:33:36.559><c> is</c><00:33:36.799><c> asleep</c><00:33:37.519><c> is</c><00:33:37.679><c> it</c><00:33:37.919><c> gonna</c><00:33:38.320><c> do</c><00:33:38.480><c> the</c>

00:33:38.710 --> 00:33:38.720 align:start position:0%
oh if it is asleep is it gonna do the
 

00:33:38.720 --> 00:33:39.909 align:start position:0%
oh if it is asleep is it gonna do the
same<00:33:39.039><c> thing</c><00:33:39.279><c> roughly</c>

00:33:39.909 --> 00:33:39.919 align:start position:0%
same thing roughly
 

00:33:39.919 --> 00:33:42.710 align:start position:0%
same thing roughly
so<00:33:40.159><c> it's</c><00:33:40.240><c> gonna</c><00:33:40.399><c> be</c><00:33:40.559><c> some</c><00:33:41.360><c> um</c><00:33:41.679><c> system</c><00:33:42.080><c> call</c><00:33:42.640><c> and</c>

00:33:42.710 --> 00:33:42.720 align:start position:0%
so it's gonna be some um system call and
 

00:33:42.720 --> 00:33:44.789 align:start position:0%
so it's gonna be some um system call and
then<00:33:42.960><c> it's</c><00:33:43.120><c> gonna</c><00:33:43.360><c> save</c><00:33:43.600><c> the</c><00:33:43.679><c> traffic</c>

00:33:44.789 --> 00:33:44.799 align:start position:0%
then it's gonna save the traffic
 

00:33:44.799 --> 00:33:47.830 align:start position:0%
then it's gonna save the traffic
and<00:33:45.519><c> um</c><00:33:46.320><c> then</c><00:33:46.799><c> basically</c><00:33:47.200><c> the</c><00:33:47.279><c> same</c><00:33:47.440><c> picture</c>

00:33:47.830 --> 00:33:47.840 align:start position:0%
and um then basically the same picture
 

00:33:47.840 --> 00:33:48.549 align:start position:0%
and um then basically the same picture
but

00:33:48.549 --> 00:33:48.559 align:start position:0%
but
 

00:33:48.559 --> 00:33:52.230 align:start position:0%
but
it's<00:33:48.799><c> just</c><00:33:49.600><c> um</c><00:33:50.080><c> that</c><00:33:50.960><c> the</c><00:33:51.200><c> thing</c><00:33:51.519><c> that</c>

00:33:52.230 --> 00:33:52.240 align:start position:0%
it's just um that the thing that
 

00:33:52.240 --> 00:33:54.710 align:start position:0%
it's just um that the thing that
made<00:33:52.880><c> the</c><00:33:53.279><c> process</c><00:33:53.760><c> go</c><00:33:53.919><c> into</c><00:33:54.080><c> the</c><00:33:54.159><c> kernel</c><00:33:54.559><c> was</c>

00:33:54.710 --> 00:33:54.720 align:start position:0%
made the process go into the kernel was
 

00:33:54.720 --> 00:33:56.870 align:start position:0%
made the process go into the kernel was
not<00:33:54.880><c> a</c><00:33:54.960><c> timer</c><00:33:55.279><c> interrupt</c><00:33:55.760><c> but</c>

00:33:56.870 --> 00:33:56.880 align:start position:0%
not a timer interrupt but
 

00:33:56.880 --> 00:34:00.470 align:start position:0%
not a timer interrupt but
um<00:33:57.840><c> the</c><00:33:58.000><c> processes</c><00:33:58.640><c> own</c><00:33:58.960><c> decision</c>

00:34:00.470 --> 00:34:00.480 align:start position:0%
um the processes own decision
 

00:34:00.480 --> 00:34:02.789 align:start position:0%
um the processes own decision
yeah<00:34:00.720><c> so</c><00:34:00.880><c> if</c><00:34:01.039><c> the</c><00:34:01.120><c> process</c><00:34:01.840><c> make</c><00:34:02.080><c> does</c><00:34:02.320><c> a</c><00:34:02.399><c> read</c>

00:34:02.789 --> 00:34:02.799 align:start position:0%
yeah so if the process make does a read
 

00:34:02.799 --> 00:34:04.149 align:start position:0%
yeah so if the process make does a read
system<00:34:03.200><c> call</c><00:34:03.440><c> and</c><00:34:03.519><c> that's</c><00:34:03.679><c> why</c><00:34:03.840><c> it's</c><00:34:04.000><c> in</c><00:34:04.080><c> the</c>

00:34:04.149 --> 00:34:04.159 align:start position:0%
system call and that's why it's in the
 

00:34:04.159 --> 00:34:05.350 align:start position:0%
system call and that's why it's in the
kernel

00:34:05.350 --> 00:34:05.360 align:start position:0%
kernel
 

00:34:05.360 --> 00:34:08.069 align:start position:0%
kernel
and<00:34:06.240><c> the</c><00:34:06.399><c> read</c><00:34:07.039><c> requires</c><00:34:07.519><c> the</c><00:34:07.600><c> process</c><00:34:07.919><c> to</c>

00:34:08.069 --> 00:34:08.079 align:start position:0%
and the read requires the process to
 

00:34:08.079 --> 00:34:09.909 align:start position:0%
and the read requires the process to
wait<00:34:08.399><c> for</c><00:34:08.639><c> the</c><00:34:08.800><c> disk</c>

00:34:09.909 --> 00:34:09.919 align:start position:0%
wait for the disk
 

00:34:09.919 --> 00:34:11.829 align:start position:0%
wait for the disk
to<00:34:10.079><c> do</c><00:34:10.240><c> to</c><00:34:10.399><c> finish</c><00:34:10.720><c> reading</c><00:34:11.119><c> or</c><00:34:11.359><c> to</c><00:34:11.520><c> wait</c><00:34:11.679><c> for</c>

00:34:11.829 --> 00:34:11.839 align:start position:0%
to do to finish reading or to wait for
 

00:34:11.839 --> 00:34:13.270 align:start position:0%
to do to finish reading or to wait for
data<00:34:12.159><c> to</c><00:34:12.399><c> appear</c><00:34:12.720><c> on</c><00:34:12.800><c> a</c><00:34:12.879><c> pipe</c>

00:34:13.270 --> 00:34:13.280 align:start position:0%
data to appear on a pipe
 

00:34:13.280 --> 00:34:15.270 align:start position:0%
data to appear on a pipe
then<00:34:13.520><c> actually</c><00:34:13.919><c> the</c><00:34:14.079><c> diagram's</c><00:34:14.639><c> exactly</c><00:34:15.119><c> the</c>

00:34:15.270 --> 00:34:15.280 align:start position:0%
then actually the diagram's exactly the
 

00:34:15.280 --> 00:34:16.389 align:start position:0%
then actually the diagram's exactly the
same<00:34:15.599><c> as</c><00:34:15.760><c> this</c>

00:34:16.389 --> 00:34:16.399 align:start position:0%
same as this
 

00:34:16.399 --> 00:34:19.829 align:start position:0%
same as this
the<00:34:18.399><c> enter</c><00:34:18.639><c> the</c><00:34:18.720><c> kernel</c><00:34:18.960><c> with</c><00:34:19.119><c> a</c><00:34:19.280><c> system</c><00:34:19.520><c> call</c>

00:34:19.829 --> 00:34:19.839 align:start position:0%
the enter the kernel with a system call
 

00:34:19.839 --> 00:34:20.790 align:start position:0%
the enter the kernel with a system call
a<00:34:20.000><c> trap</c><00:34:20.320><c> frame</c>

00:34:20.790 --> 00:34:20.800 align:start position:0%
a trap frame
 

00:34:20.800 --> 00:34:22.149 align:start position:0%
a trap frame
hold<00:34:21.040><c> the</c><00:34:21.200><c> save</c><00:34:21.440><c> user</c><00:34:21.679><c> registers</c><00:34:22.000><c> will</c>

00:34:22.149 --> 00:34:22.159 align:start position:0%
hold the save user registers will
 

00:34:22.159 --> 00:34:23.510 align:start position:0%
hold the save user registers will
execute<00:34:22.480><c> the</c><00:34:22.560><c> system</c><00:34:22.800><c> called</c><00:34:22.960><c> the</c><00:34:23.040><c> simple</c>

00:34:23.510 --> 00:34:23.520 align:start position:0%
execute the system called the simple
 

00:34:23.520 --> 00:34:24.389 align:start position:0%
execute the system called the simple
realize<00:34:23.919><c> ah</c>

00:34:24.389 --> 00:34:24.399 align:start position:0%
realize ah
 

00:34:24.399 --> 00:34:25.669 align:start position:0%
realize ah
i<00:34:24.480><c> need</c><00:34:24.639><c> to</c><00:34:24.720><c> wait</c><00:34:24.879><c> for</c><00:34:25.040><c> the</c><00:34:25.119><c> disk</c><00:34:25.359><c> to</c><00:34:25.440><c> finish</c>

00:34:25.669 --> 00:34:25.679 align:start position:0%
i need to wait for the disk to finish
 

00:34:25.679 --> 00:34:27.430 align:start position:0%
i need to wait for the disk to finish
reading<00:34:26.000><c> something</c>

00:34:27.430 --> 00:34:27.440 align:start position:0%
reading something
 

00:34:27.440 --> 00:34:29.430 align:start position:0%
reading something
the<00:34:27.679><c> system</c><00:34:28.000><c> call</c><00:34:28.240><c> code</c><00:34:28.480><c> will</c><00:34:28.639><c> call</c><00:34:28.879><c> sleep</c>

00:34:29.430 --> 00:34:29.440 align:start position:0%
the system call code will call sleep
 

00:34:29.440 --> 00:34:32.069 align:start position:0%
the system call code will call sleep
which<00:34:30.159><c> ends</c><00:34:30.320><c> up</c><00:34:30.480><c> calling</c><00:34:30.879><c> switch</c>

00:34:32.069 --> 00:34:32.079 align:start position:0%
which ends up calling switch
 

00:34:32.079 --> 00:34:35.750 align:start position:0%
which ends up calling switch
which<00:34:33.040><c> you</c><00:34:33.119><c> know</c><00:34:33.359><c> saves</c><00:34:33.599><c> away</c><00:34:33.919><c> the</c><00:34:34.320><c> kernel</c>

00:34:35.750 --> 00:34:35.760 align:start position:0%
which you know saves away the kernel
 

00:34:35.760 --> 00:34:37.510 align:start position:0%
which you know saves away the kernel
thread<00:34:36.159><c> registers</c><00:34:36.720><c> and</c><00:34:36.800><c> the</c><00:34:36.960><c> processes</c>

00:34:37.510 --> 00:34:37.520 align:start position:0%
thread registers and the processes
 

00:34:37.520 --> 00:34:40.069 align:start position:0%
thread registers and the processes
contacts<00:34:38.000><c> and</c><00:34:38.560><c> switches</c><00:34:39.040><c> to</c><00:34:39.200><c> this</c>

00:34:40.069 --> 00:34:40.079 align:start position:0%
contacts and switches to this
 

00:34:40.079 --> 00:34:41.750 align:start position:0%
contacts and switches to this
current<00:34:40.320><c> cpu</c><00:34:40.720><c> scheduler</c><00:34:41.040><c> to</c><00:34:41.200><c> let</c><00:34:41.359><c> some</c><00:34:41.520><c> other</c>

00:34:41.750 --> 00:34:41.760 align:start position:0%
current cpu scheduler to let some other
 

00:34:41.760 --> 00:34:43.990 align:start position:0%
current cpu scheduler to let some other
thread<00:34:42.079><c> run</c><00:34:42.960><c> while</c><00:34:43.280><c> this</c><00:34:43.520><c> thread</c>

00:34:43.990 --> 00:34:44.000 align:start position:0%
thread run while this thread
 

00:34:44.000 --> 00:34:47.109 align:start position:0%
thread run while this thread
is<00:34:44.320><c> waiting</c><00:34:44.560><c> for</c><00:34:44.720><c> the</c><00:34:44.800><c> discrete</c><00:34:45.200><c> to</c><00:34:45.359><c> finish</c><00:34:46.560><c> so</c>

00:34:47.109 --> 00:34:47.119 align:start position:0%
is waiting for the discrete to finish so
 

00:34:47.119 --> 00:34:48.790 align:start position:0%
is waiting for the discrete to finish so
everything<00:34:47.440><c> we're</c><00:34:47.599><c> going</c><00:34:47.679><c> to</c><00:34:47.839><c> talk</c><00:34:48.000><c> about</c><00:34:48.240><c> now</c>

00:34:48.790 --> 00:34:48.800 align:start position:0%
everything we're going to talk about now
 

00:34:48.800 --> 00:34:50.950 align:start position:0%
everything we're going to talk about now
except<00:34:49.119><c> for</c><00:34:49.280><c> the</c><00:34:49.359><c> timer</c><00:34:49.839><c> interrupt</c>

00:34:50.950 --> 00:34:50.960 align:start position:0%
except for the timer interrupt
 

00:34:50.960 --> 00:34:54.149 align:start position:0%
except for the timer interrupt
um<00:34:51.599><c> is</c><00:34:51.839><c> pretty</c><00:34:52.079><c> much</c><00:34:52.320><c> the</c><00:34:52.560><c> same</c><00:34:53.119><c> if</c><00:34:53.839><c> what's</c>

00:34:54.149 --> 00:34:54.159 align:start position:0%
um is pretty much the same if what's
 

00:34:54.159 --> 00:34:55.589 align:start position:0%
um is pretty much the same if what's
going<00:34:54.320><c> on</c><00:34:54.480><c> is</c><00:34:54.639><c> we're</c><00:34:54.800><c> in</c><00:34:54.879><c> a</c><00:34:54.960><c> system</c><00:34:55.280><c> call</c><00:34:55.520><c> and</c>

00:34:55.589 --> 00:34:55.599 align:start position:0%
going on is we're in a system call and
 

00:34:55.599 --> 00:34:56.629 align:start position:0%
going on is we're in a system call and
the<00:34:55.760><c> system</c><00:34:56.159><c> call</c>

00:34:56.629 --> 00:34:56.639 align:start position:0%
the system call
 

00:34:56.639 --> 00:34:58.870 align:start position:0%
the system call
needs<00:34:56.879><c> to</c><00:34:57.040><c> wait</c><00:34:57.280><c> for</c><00:34:57.440><c> some</c><00:34:57.680><c> for</c><00:34:57.839><c> i</c><00:34:58.079><c> o</c><00:34:58.560><c> and</c><00:34:58.720><c> give</c>

00:34:58.870 --> 00:34:58.880 align:start position:0%
needs to wait for some for i o and give
 

00:34:58.880 --> 00:35:02.310 align:start position:0%
needs to wait for some for i o and give
up<00:34:59.040><c> the</c><00:35:00.839><c> cpu</c>

00:35:02.310 --> 00:35:02.320 align:start position:0%
up the cpu
 

00:35:02.320 --> 00:35:04.150 align:start position:0%
up the cpu
for<00:35:02.480><c> the</c><00:35:02.560><c> purposes</c><00:35:02.960><c> of</c><00:35:03.359><c> today's</c><00:35:03.680><c> discussion</c>

00:35:04.150 --> 00:35:04.160 align:start position:0%
for the purposes of today's discussion
 

00:35:04.160 --> 00:35:08.950 align:start position:0%
for the purposes of today's discussion
the<00:35:04.480><c> two</c><00:35:04.640><c> situations</c><00:35:05.119><c> are</c><00:35:05.200><c> almost</c><00:35:05.520><c> identical</c>

00:35:08.950 --> 00:35:08.960 align:start position:0%
 
 

00:35:08.960 --> 00:35:10.950 align:start position:0%
 
okay<00:35:09.200><c> so</c><00:35:09.359><c> the</c><00:35:09.599><c> question</c><00:35:09.920><c> does</c><00:35:10.079><c> each</c><00:35:10.320><c> per</c><00:35:10.560><c> cpu</c>

00:35:10.950 --> 00:35:10.960 align:start position:0%
okay so the question does each per cpu
 

00:35:10.960 --> 00:35:12.230 align:start position:0%
okay so the question does each per cpu
scheduler<00:35:11.280><c> have</c><00:35:11.440><c> its</c><00:35:11.599><c> own</c><00:35:11.680><c> stack</c>

00:35:12.230 --> 00:35:12.240 align:start position:0%
scheduler have its own stack
 

00:35:12.240 --> 00:35:18.470 align:start position:0%
scheduler have its own stack
yes<00:35:13.280><c> there's</c><00:35:13.520><c> a</c><00:35:14.839><c> stack</c>

00:35:18.470 --> 00:35:18.480 align:start position:0%
 
 

00:35:18.480 --> 00:35:21.349 align:start position:0%
 
for<00:35:18.640><c> this</c><00:35:18.960><c> scheduler</c><00:35:19.520><c> and</c><00:35:19.680><c> a</c><00:35:20.480><c> stack</c><00:35:20.800><c> for</c><00:35:20.960><c> this</c>

00:35:21.349 --> 00:35:21.359 align:start position:0%
for this scheduler and a stack for this
 

00:35:21.359 --> 00:35:24.310 align:start position:0%
for this scheduler and a stack for this
separate<00:35:21.760><c> stack</c>

00:35:24.310 --> 00:35:24.320 align:start position:0%
 
 

00:35:24.320 --> 00:35:31.829 align:start position:0%
 
for<00:35:25.200><c> the</c><00:35:25.359><c> scheduler</c><00:35:25.760><c> for</c><00:35:25.839><c> cpu</c><00:35:28.839><c> one</c>

00:35:31.829 --> 00:35:31.839 align:start position:0%
for the scheduler for cpu one
 

00:35:31.839 --> 00:35:33.990 align:start position:0%
for the scheduler for cpu one
yeah<00:35:32.160><c> and</c><00:35:32.480><c> indeed</c><00:35:32.880><c> the</c><00:35:33.119><c> stacks</c><00:35:33.440><c> for</c><00:35:33.599><c> the</c><00:35:33.680><c> skies</c>

00:35:33.990 --> 00:35:34.000 align:start position:0%
yeah and indeed the stacks for the skies
 

00:35:34.000 --> 00:35:36.390 align:start position:0%
yeah and indeed the stacks for the skies
are<00:35:34.079><c> just</c><00:35:34.320><c> set</c><00:35:34.640><c> up</c>

00:35:36.390 --> 00:35:36.400 align:start position:0%
are just set up
 

00:35:36.400 --> 00:35:38.470 align:start position:0%
are just set up
in<00:35:36.560><c> fact</c><00:35:37.040><c> all</c><00:35:37.280><c> this</c><00:35:37.520><c> stuff</c><00:35:38.000><c> you</c><00:35:38.079><c> know</c><00:35:38.240><c> the</c>

00:35:38.470 --> 00:35:38.480 align:start position:0%
in fact all this stuff you know the
 

00:35:38.480 --> 00:35:41.270 align:start position:0%
in fact all this stuff you know the
context<00:35:39.280><c> and</c><00:35:39.359><c> the</c><00:35:39.599><c> stacks</c><00:35:40.000><c> for</c><00:35:40.240><c> the</c><00:35:40.320><c> scheduler</c>

00:35:41.270 --> 00:35:41.280 align:start position:0%
context and the stacks for the scheduler
 

00:35:41.280 --> 00:35:43.430 align:start position:0%
context and the stacks for the scheduler
threads<00:35:41.839><c> are</c><00:35:42.079><c> set</c><00:35:42.240><c> up</c><00:35:42.400><c> in</c><00:35:42.560><c> a</c><00:35:42.800><c> different</c><00:35:43.200><c> way</c>

00:35:43.430 --> 00:35:43.440 align:start position:0%
threads are set up in a different way
 

00:35:43.440 --> 00:35:46.470 align:start position:0%
threads are set up in a different way
than<00:35:43.599><c> for</c><00:35:43.760><c> user</c><00:35:44.160><c> processes</c>

00:35:46.470 --> 00:35:46.480 align:start position:0%
than for user processes
 

00:35:46.480 --> 00:35:48.950 align:start position:0%
than for user processes
they're<00:35:46.720><c> set</c><00:35:46.880><c> up</c><00:35:47.040><c> at</c><00:35:47.200><c> boot</c><00:35:47.520><c> time</c><00:35:48.480><c> if</c><00:35:48.640><c> you</c><00:35:48.720><c> poke</c>

00:35:48.950 --> 00:35:48.960 align:start position:0%
they're set up at boot time if you poke
 

00:35:48.960 --> 00:35:50.310 align:start position:0%
they're set up at boot time if you poke
around<00:35:49.359><c> in</c>

00:35:50.310 --> 00:35:50.320 align:start position:0%
around in
 

00:35:50.320 --> 00:35:54.150 align:start position:0%
around in
start.s<00:35:51.359><c> or</c><00:35:51.520><c> start.c</c><00:35:53.280><c> start.s</c><00:35:53.920><c> probably</c>

00:35:54.150 --> 00:35:54.160 align:start position:0%
start.s or start.c start.s probably
 

00:35:54.160 --> 00:35:55.910 align:start position:0%
start.s or start.c start.s probably
you'll<00:35:54.320><c> see</c><00:35:54.640><c> some</c><00:35:54.800><c> of</c><00:35:54.880><c> the</c><00:35:55.040><c> setup</c>

00:35:55.910 --> 00:35:55.920 align:start position:0%
you'll see some of the setup
 

00:35:55.920 --> 00:35:58.950 align:start position:0%
you'll see some of the setup
for<00:35:56.320><c> each</c><00:35:57.040><c> core's</c><00:35:57.920><c> scheduler</c><00:35:58.480><c> thread</c>

00:35:58.950 --> 00:35:58.960 align:start position:0%
for each core's scheduler thread
 

00:35:58.960 --> 00:36:01.589 align:start position:0%
for each core's scheduler thread
there's<00:35:59.119><c> a</c><00:35:59.440><c> place</c><00:35:59.680><c> with</c><00:35:59.760><c> a</c><00:35:59.839><c> stack</c><00:36:00.960><c> very</c><00:36:01.280><c> early</c>

00:36:01.589 --> 00:36:01.599 align:start position:0%
there's a place with a stack very early
 

00:36:01.599 --> 00:36:03.270 align:start position:0%
there's a place with a stack very early
in<00:36:01.680><c> the</c><00:36:01.839><c> assembly</c><00:36:02.240><c> code</c><00:36:02.480><c> during</c><00:36:02.720><c> boot</c>

00:36:03.270 --> 00:36:03.280 align:start position:0%
in the assembly code during boot
 

00:36:03.280 --> 00:36:06.150 align:start position:0%
in the assembly code during boot
where<00:36:03.520><c> the</c><00:36:03.920><c> stack</c><00:36:04.240><c> is</c><00:36:04.400><c> set</c><00:36:04.640><c> up</c><00:36:04.800><c> for</c><00:36:05.040><c> each</c><00:36:05.680><c> cpu</c>

00:36:06.150 --> 00:36:06.160 align:start position:0%
where the stack is set up for each cpu
 

00:36:06.160 --> 00:36:07.829 align:start position:0%
where the stack is set up for each cpu
and<00:36:06.320><c> it's</c><00:36:06.480><c> on</c><00:36:06.640><c> that</c><00:36:06.880><c> stack</c><00:36:07.200><c> that</c><00:36:07.359><c> this</c>

00:36:07.829 --> 00:36:07.839 align:start position:0%
and it's on that stack that this
 

00:36:07.839 --> 00:36:10.550 align:start position:0%
and it's on that stack that this
the<00:36:08.079><c> cpu</c><00:36:08.560><c> boots</c><00:36:08.960><c> on</c><00:36:09.680><c> and</c><00:36:09.839><c> then</c><00:36:10.079><c> runs</c><00:36:10.400><c> its</c>

00:36:10.550 --> 00:36:10.560 align:start position:0%
the cpu boots on and then runs its
 

00:36:10.560 --> 00:36:15.670 align:start position:0%
the cpu boots on and then runs its
scheduler<00:36:10.960><c> thread</c>

00:36:15.670 --> 00:36:15.680 align:start position:0%
 
 

00:36:15.680 --> 00:36:19.190 align:start position:0%
 
okay

00:36:19.190 --> 00:36:19.200 align:start position:0%
 
 

00:36:19.200 --> 00:36:21.670 align:start position:0%
 
one<00:36:19.359><c> piece</c><00:36:19.599><c> of</c><00:36:19.839><c> jargon</c><00:36:21.200><c> when</c><00:36:21.359><c> people</c><00:36:21.520><c> talk</c>

00:36:21.670 --> 00:36:21.680 align:start position:0%
one piece of jargon when people talk
 

00:36:21.680 --> 00:36:22.790 align:start position:0%
one piece of jargon when people talk
about<00:36:22.000><c> context</c>

00:36:22.790 --> 00:36:22.800 align:start position:0%
about context
 

00:36:22.800 --> 00:36:26.470 align:start position:0%
about context
switch<00:36:25.119><c> they're</c><00:36:25.359><c> talking</c><00:36:25.680><c> about</c>

00:36:26.470 --> 00:36:26.480 align:start position:0%
switch they're talking about
 

00:36:26.480 --> 00:36:30.790 align:start position:0%
switch they're talking about
usually<00:36:28.800><c> um</c>

00:36:30.790 --> 00:36:30.800 align:start position:0%
usually um
 

00:36:30.800 --> 00:36:33.670 align:start position:0%
usually um
this<00:36:31.760><c> act</c><00:36:32.000><c> of</c><00:36:32.160><c> switching</c><00:36:32.640><c> from</c><00:36:32.880><c> one</c><00:36:33.119><c> thread</c><00:36:33.520><c> to</c>

00:36:33.670 --> 00:36:33.680 align:start position:0%
this act of switching from one thread to
 

00:36:33.680 --> 00:36:35.670 align:start position:0%
this act of switching from one thread to
another<00:36:34.000><c> by</c><00:36:34.320><c> saving</c><00:36:34.640><c> one</c><00:36:34.880><c> set</c><00:36:35.040><c> of</c><00:36:35.119><c> register</c>

00:36:35.670 --> 00:36:35.680 align:start position:0%
another by saving one set of register
 

00:36:35.680 --> 00:36:37.190 align:start position:0%
another by saving one set of register
sets<00:36:36.000><c> for</c><00:36:36.160><c> the</c><00:36:36.320><c> old</c><00:36:36.480><c> thread</c>

00:36:37.190 --> 00:36:37.200 align:start position:0%
sets for the old thread
 

00:36:37.200 --> 00:36:39.349 align:start position:0%
sets for the old thread
and<00:36:37.359><c> restoring</c><00:36:38.079><c> previously</c><00:36:38.560><c> saved</c><00:36:38.880><c> registers</c>

00:36:39.349 --> 00:36:39.359 align:start position:0%
and restoring previously saved registers
 

00:36:39.359 --> 00:36:41.430 align:start position:0%
and restoring previously saved registers
for<00:36:39.520><c> the</c><00:36:39.680><c> thread</c><00:36:39.920><c> we're</c><00:36:40.079><c> switching</c><00:36:40.480><c> to</c>

00:36:41.430 --> 00:36:41.440 align:start position:0%
for the thread we're switching to
 

00:36:41.440 --> 00:36:42.550 align:start position:0%
for the thread we're switching to
so<00:36:41.520><c> that's</c><00:36:41.680><c> what's</c><00:36:42.000><c> usually</c><00:36:42.240><c> meant</c><00:36:42.400><c> by</c>

00:36:42.550 --> 00:36:42.560 align:start position:0%
so that's what's usually meant by
 

00:36:42.560 --> 00:36:44.230 align:start position:0%
so that's what's usually meant by
context<00:36:42.960><c> switch</c><00:36:43.200><c> also</c><00:36:43.440><c> though</c><00:36:43.680><c> sometimes</c>

00:36:44.230 --> 00:36:44.240 align:start position:0%
context switch also though sometimes
 

00:36:44.240 --> 00:36:47.270 align:start position:0%
context switch also though sometimes
it's<00:36:44.400><c> applied</c><00:36:44.720><c> to</c><00:36:44.880><c> the</c><00:36:45.040><c> complete</c>

00:36:47.270 --> 00:36:47.280 align:start position:0%
it's applied to the complete
 

00:36:47.280 --> 00:36:48.710 align:start position:0%
it's applied to the complete
dance<00:36:47.599><c> that</c><00:36:47.760><c> goes</c><00:36:47.920><c> on</c><00:36:48.079><c> when</c><00:36:48.240><c> switching</c><00:36:48.560><c> from</c>

00:36:48.710 --> 00:36:48.720 align:start position:0%
dance that goes on when switching from
 

00:36:48.720 --> 00:36:50.310 align:start position:0%
dance that goes on when switching from
one<00:36:48.960><c> user</c><00:36:49.200><c> process</c><00:36:49.760><c> to</c><00:36:49.920><c> another</c><00:36:50.240><c> and</c>

00:36:50.310 --> 00:36:50.320 align:start position:0%
one user process to another and
 

00:36:50.320 --> 00:36:51.910 align:start position:0%
one user process to another and
occasionally<00:36:50.880><c> you'll</c><00:36:51.040><c> see</c><00:36:51.200><c> context</c><00:36:51.520><c> switch</c>

00:36:51.910 --> 00:36:51.920 align:start position:0%
occasionally you'll see context switch
 

00:36:51.920 --> 00:36:53.030 align:start position:0%
occasionally you'll see context switch
apply<00:36:52.320><c> to</c>

00:36:53.030 --> 00:36:53.040 align:start position:0%
apply to
 

00:36:53.040 --> 00:36:55.349 align:start position:0%
apply to
switching<00:36:53.520><c> between</c><00:36:53.920><c> user</c><00:36:54.240><c> and</c><00:36:54.400><c> kernel</c><00:36:54.880><c> but</c>

00:36:55.349 --> 00:36:55.359 align:start position:0%
switching between user and kernel but
 

00:36:55.359 --> 00:36:57.430 align:start position:0%
switching between user and kernel but
for<00:36:55.599><c> us</c><00:36:55.760><c> we</c><00:36:55.920><c> mostly</c><00:36:56.160><c> mean</c><00:36:56.400><c> it</c>

00:36:57.430 --> 00:36:57.440 align:start position:0%
for us we mostly mean it
 

00:36:57.440 --> 00:37:01.190 align:start position:0%
for us we mostly mean it
for<00:36:58.640><c> switching</c><00:36:58.960><c> from</c><00:36:59.119><c> one</c><00:36:59.359><c> kernel</c><00:36:59.599><c> thread</c>

00:37:01.190 --> 00:37:01.200 align:start position:0%
for switching from one kernel thread
 

00:37:01.200 --> 00:37:05.990 align:start position:0%
for switching from one kernel thread
typically<00:37:01.520><c> to</c><00:37:01.680><c> a</c><00:37:02.800><c> scheduler</c><00:37:03.280><c> thread</c>

00:37:05.990 --> 00:37:06.000 align:start position:0%
 
 

00:37:06.000 --> 00:37:10.790 align:start position:0%
 
just<00:37:06.240><c> some</c><00:37:06.800><c> pieces</c><00:37:07.040><c> of</c><00:37:07.200><c> information</c><00:37:08.240><c> um</c>

00:37:10.790 --> 00:37:10.800 align:start position:0%
 
 

00:37:10.800 --> 00:37:14.390 align:start position:0%
 
that<00:37:11.040><c> are</c><00:37:11.440><c> handy</c><00:37:12.079><c> to</c><00:37:12.560><c> keep</c><00:37:12.800><c> in</c><00:37:12.880><c> mind</c><00:37:13.680><c> um</c>

00:37:14.390 --> 00:37:14.400 align:start position:0%
that are handy to keep in mind um
 

00:37:14.400 --> 00:37:16.550 align:start position:0%
that are handy to keep in mind um
every<00:37:14.720><c> core</c><00:37:15.119><c> just</c><00:37:15.280><c> does</c><00:37:15.520><c> one</c><00:37:15.680><c> thing</c><00:37:15.839><c> at</c><00:37:16.000><c> a</c><00:37:16.160><c> time</c>

00:37:16.550 --> 00:37:16.560 align:start position:0%
every core just does one thing at a time
 

00:37:16.560 --> 00:37:17.750 align:start position:0%
every core just does one thing at a time
each<00:37:16.960><c> core</c>

00:37:17.750 --> 00:37:17.760 align:start position:0%
each core
 

00:37:17.760 --> 00:37:20.069 align:start position:0%
each core
you<00:37:17.839><c> know</c><00:37:18.000><c> is</c><00:37:18.160><c> either</c><00:37:18.560><c> is</c><00:37:18.720><c> just</c><00:37:19.440><c> running</c><00:37:19.760><c> one</c>

00:37:20.069 --> 00:37:20.079 align:start position:0%
you know is either is just running one
 

00:37:20.079 --> 00:37:21.750 align:start position:0%
you know is either is just running one
thread<00:37:20.480><c> at</c><00:37:20.640><c> any</c><00:37:20.800><c> given</c><00:37:21.040><c> time</c><00:37:21.280><c> it's</c><00:37:21.440><c> either</c>

00:37:21.750 --> 00:37:21.760 align:start position:0%
thread at any given time it's either
 

00:37:21.760 --> 00:37:22.310 align:start position:0%
thread at any given time it's either
running

00:37:22.310 --> 00:37:22.320 align:start position:0%
running
 

00:37:22.320 --> 00:37:24.950 align:start position:0%
running
some<00:37:22.720><c> processes</c><00:37:23.680><c> user</c><00:37:24.000><c> thread</c><00:37:24.320><c> some</c><00:37:24.560><c> process</c>

00:37:24.950 --> 00:37:24.960 align:start position:0%
some processes user thread some process
 

00:37:24.960 --> 00:37:26.069 align:start position:0%
some processes user thread some process
kernel<00:37:25.280><c> thread</c>

00:37:26.069 --> 00:37:26.079 align:start position:0%
kernel thread
 

00:37:26.079 --> 00:37:28.550 align:start position:0%
kernel thread
or<00:37:26.480><c> that</c><00:37:26.720><c> core</c><00:37:27.040><c> scheduler</c><00:37:27.520><c> thread</c><00:37:28.079><c> so</c><00:37:28.240><c> at</c><00:37:28.400><c> any</c>

00:37:28.550 --> 00:37:28.560 align:start position:0%
or that core scheduler thread so at any
 

00:37:28.560 --> 00:37:29.670 align:start position:0%
or that core scheduler thread so at any
given<00:37:28.800><c> time</c><00:37:29.040><c> the</c><00:37:29.119><c> core</c>

00:37:29.670 --> 00:37:29.680 align:start position:0%
given time the core
 

00:37:29.680 --> 00:37:31.030 align:start position:0%
given time the core
is<00:37:29.760><c> not</c><00:37:29.920><c> doing</c><00:37:30.160><c> multiple</c><00:37:30.480><c> things</c><00:37:30.720><c> it's</c><00:37:30.880><c> just</c>

00:37:31.030 --> 00:37:31.040 align:start position:0%
is not doing multiple things it's just
 

00:37:31.040 --> 00:37:33.030 align:start position:0%
is not doing multiple things it's just
doing<00:37:31.280><c> one</c><00:37:31.520><c> thing</c><00:37:32.079><c> and</c><00:37:32.240><c> it's</c><00:37:32.400><c> this</c><00:37:32.640><c> switching</c>

00:37:33.030 --> 00:37:33.040 align:start position:0%
doing one thing and it's this switching
 

00:37:33.040 --> 00:37:35.510 align:start position:0%
doing one thing and it's this switching
that<00:37:33.200><c> sort</c><00:37:33.359><c> of</c><00:37:33.440><c> creates</c><00:37:33.760><c> the</c><00:37:33.920><c> illusion</c><00:37:34.640><c> of</c>

00:37:35.510 --> 00:37:35.520 align:start position:0%
that sort of creates the illusion of
 

00:37:35.520 --> 00:37:37.750 align:start position:0%
that sort of creates the illusion of
multiple<00:37:36.000><c> threads</c><00:37:36.960><c> running</c><00:37:37.280><c> at</c><00:37:37.440><c> different</c>

00:37:37.750 --> 00:37:37.760 align:start position:0%
multiple threads running at different
 

00:37:37.760 --> 00:37:39.990 align:start position:0%
multiple threads running at different
times<00:37:38.480><c> on</c><00:37:38.560><c> that</c><00:37:38.800><c> core</c>

00:37:39.990 --> 00:37:40.000 align:start position:0%
times on that core
 

00:37:40.000 --> 00:37:44.550 align:start position:0%
times on that core
similarly<00:37:42.640><c> each</c><00:37:42.960><c> thread</c>

00:37:44.550 --> 00:37:44.560 align:start position:0%
similarly each thread
 

00:37:44.560 --> 00:37:48.790 align:start position:0%
similarly each thread
is<00:37:45.760><c> running</c><00:37:46.079><c> up</c><00:37:46.800><c> it's</c><00:37:47.119><c> either</c><00:37:47.440><c> running</c><00:37:47.839><c> on</c>

00:37:48.790 --> 00:37:48.800 align:start position:0%
is running up it's either running on
 

00:37:48.800 --> 00:37:52.710 align:start position:0%
is running up it's either running on
exactly<00:37:49.280><c> one</c><00:37:49.599><c> core</c><00:37:50.720><c> or</c><00:37:51.680><c> its</c><00:37:52.000><c> state</c><00:37:52.240><c> has</c><00:37:52.400><c> been</c>

00:37:52.710 --> 00:37:52.720 align:start position:0%
exactly one core or its state has been
 

00:37:52.720 --> 00:37:54.710 align:start position:0%
exactly one core or its state has been
state<00:37:53.040><c> has</c><00:37:53.200><c> been</c><00:37:53.440><c> saved</c><00:37:54.000><c> and</c><00:37:54.160><c> we've</c><00:37:54.400><c> switched</c>

00:37:54.710 --> 00:37:54.720 align:start position:0%
state has been saved and we've switched
 

00:37:54.720 --> 00:37:56.310 align:start position:0%
state has been saved and we've switched
away<00:37:54.960><c> from</c><00:37:55.200><c> it</c>

00:37:56.310 --> 00:37:56.320 align:start position:0%
away from it
 

00:37:56.320 --> 00:37:58.470 align:start position:0%
away from it
so<00:37:56.640><c> so</c><00:37:57.119><c> you</c><00:37:57.200><c> know</c><00:37:57.359><c> thread</c><00:37:57.760><c> just</c><00:37:57.920><c> to</c><00:37:58.000><c> be</c><00:37:58.160><c> clear</c><00:37:58.400><c> a</c>

00:37:58.470 --> 00:37:58.480 align:start position:0%
so so you know thread just to be clear a
 

00:37:58.480 --> 00:38:00.230 align:start position:0%
so so you know thread just to be clear a
thread<00:37:58.720><c> never</c><00:37:58.960><c> runs</c><00:37:59.200><c> on</c><00:37:59.359><c> more</c><00:37:59.520><c> than</c><00:37:59.680><c> one</c><00:37:59.920><c> core</c>

00:38:00.230 --> 00:38:00.240 align:start position:0%
thread never runs on more than one core
 

00:38:00.240 --> 00:38:01.670 align:start position:0%
thread never runs on more than one core
thread<00:38:00.560><c> is</c><00:38:00.640><c> either</c><00:38:00.880><c> running</c><00:38:01.119><c> on</c><00:38:01.200><c> just</c><00:38:01.440><c> one</c>

00:38:01.670 --> 00:38:01.680 align:start position:0%
thread is either running on just one
 

00:38:01.680 --> 00:38:03.910 align:start position:0%
thread is either running on just one
core<00:38:02.160><c> or</c><00:38:02.400><c> it's</c><00:38:02.560><c> not</c><00:38:02.720><c> running</c><00:38:03.040><c> at</c><00:38:03.119><c> all</c><00:38:03.359><c> it</c><00:38:03.520><c> has</c>

00:38:03.910 --> 00:38:03.920 align:start position:0%
core or it's not running at all it has
 

00:38:03.920 --> 00:38:07.670 align:start position:0%
core or it's not running at all it has
it<00:38:04.000><c> has</c><00:38:04.240><c> saved</c><00:38:04.480><c> state</c><00:38:04.800><c> somewhere</c>

00:38:07.670 --> 00:38:07.680 align:start position:0%
 
 

00:38:07.680 --> 00:38:09.589 align:start position:0%
 
another<00:38:08.160><c> interesting</c><00:38:08.480><c> thing</c><00:38:08.720><c> about</c><00:38:08.880><c> the</c><00:38:08.960><c> xv6</c>

00:38:09.589 --> 00:38:09.599 align:start position:0%
another interesting thing about the xv6
 

00:38:09.599 --> 00:38:10.790 align:start position:0%
another interesting thing about the xv6
setup<00:38:10.160><c> is</c><00:38:10.320><c> that</c>

00:38:10.790 --> 00:38:10.800 align:start position:0%
setup is that
 

00:38:10.800 --> 00:38:14.710 align:start position:0%
setup is that
these<00:38:11.200><c> contexts</c><00:38:12.079><c> that</c><00:38:12.240><c> hold</c><00:38:13.200><c> saved</c>

00:38:14.710 --> 00:38:14.720 align:start position:0%
these contexts that hold saved
 

00:38:14.720 --> 00:38:17.990 align:start position:0%
these contexts that hold saved
kernel<00:38:15.599><c> thread</c><00:38:16.160><c> registers</c><00:38:17.520><c> they're</c><00:38:17.760><c> always</c>

00:38:17.990 --> 00:38:18.000 align:start position:0%
kernel thread registers they're always
 

00:38:18.000 --> 00:38:21.430 align:start position:0%
kernel thread registers they're always
produced<00:38:18.400><c> by</c><00:38:18.560><c> a</c><00:38:18.800><c> call</c><00:38:19.119><c> to</c><00:38:19.359><c> switch</c>

00:38:21.430 --> 00:38:21.440 align:start position:0%
produced by a call to switch
 

00:38:21.440 --> 00:38:23.829 align:start position:0%
produced by a call to switch
and<00:38:21.520><c> so</c><00:38:21.760><c> these</c><00:38:22.000><c> contacts</c><00:38:22.480><c> basically</c><00:38:23.280><c> always</c>

00:38:23.829 --> 00:38:23.839 align:start position:0%
and so these contacts basically always
 

00:38:23.839 --> 00:38:24.550 align:start position:0%
and so these contacts basically always
refer

00:38:24.550 --> 00:38:24.560 align:start position:0%
refer
 

00:38:24.560 --> 00:38:27.589 align:start position:0%
refer
to<00:38:25.520><c> you</c><00:38:25.599><c> know</c><00:38:25.680><c> the</c><00:38:25.920><c> state</c><00:38:26.240><c> of</c><00:38:26.320><c> the</c><00:38:26.560><c> thread</c><00:38:27.359><c> as</c>

00:38:27.589 --> 00:38:27.599 align:start position:0%
to you know the state of the thread as
 

00:38:27.599 --> 00:38:30.870 align:start position:0%
to you know the state of the thread as
it<00:38:27.680><c> was</c><00:38:27.920><c> executing</c><00:38:28.640><c> inside</c><00:38:29.040><c> a</c><00:38:29.119><c> call</c><00:38:29.359><c> to</c><00:38:29.599><c> switch</c>

00:38:30.870 --> 00:38:30.880 align:start position:0%
it was executing inside a call to switch
 

00:38:30.880 --> 00:38:34.870 align:start position:0%
it was executing inside a call to switch
um<00:38:33.280><c> and</c><00:38:33.680><c> you</c><00:38:33.839><c> know</c><00:38:34.000><c> the</c><00:38:34.079><c> way</c><00:38:34.320><c> we'll</c><00:38:34.560><c> see</c><00:38:34.720><c> that</c>

00:38:34.870 --> 00:38:34.880 align:start position:0%
um and you know the way we'll see that
 

00:38:34.880 --> 00:38:35.349 align:start position:0%
um and you know the way we'll see that
come<00:38:35.119><c> up</c>

00:38:35.349 --> 00:38:35.359 align:start position:0%
come up
 

00:38:35.359 --> 00:38:38.230 align:start position:0%
come up
is<00:38:35.520><c> that</c><00:38:35.839><c> when</c><00:38:36.079><c> we</c><00:38:36.960><c> uh</c><00:38:37.200><c> switch</c><00:38:37.440><c> from</c><00:38:37.680><c> one</c><00:38:38.160><c> to</c>

00:38:38.230 --> 00:38:38.240 align:start position:0%
is that when we uh switch from one to
 

00:38:38.240 --> 00:38:39.349 align:start position:0%
is that when we uh switch from one to
another<00:38:38.560><c> and</c><00:38:38.720><c> restore</c>

00:38:39.349 --> 00:38:39.359 align:start position:0%
another and restore
 

00:38:39.359 --> 00:38:41.510 align:start position:0%
another and restore
the<00:38:39.520><c> target</c><00:38:39.839><c> threads</c><00:38:40.240><c> context</c><00:38:41.119><c> the</c><00:38:41.280><c> first</c>

00:38:41.510 --> 00:38:41.520 align:start position:0%
the target threads context the first
 

00:38:41.520 --> 00:38:43.349 align:start position:0%
the target threads context the first
thing<00:38:41.680><c> it</c><00:38:41.760><c> will</c><00:38:41.920><c> do</c><00:38:42.160><c> is</c><00:38:42.320><c> return</c><00:38:42.880><c> from</c><00:38:43.119><c> a</c>

00:38:43.349 --> 00:38:43.359 align:start position:0%
thing it will do is return from a
 

00:38:43.359 --> 00:38:45.190 align:start position:0%
thing it will do is return from a
previous<00:38:44.000><c> call</c><00:38:44.240><c> to</c><00:38:44.480><c> switch</c>

00:38:45.190 --> 00:38:45.200 align:start position:0%
previous call to switch
 

00:38:45.200 --> 00:38:47.109 align:start position:0%
previous call to switch
so<00:38:45.440><c> these</c><00:38:45.599><c> contacts</c><00:38:46.079><c> sort</c><00:38:46.240><c> of</c><00:38:46.320><c> always</c><00:38:46.800><c> save</c>

00:38:47.109 --> 00:38:47.119 align:start position:0%
so these contacts sort of always save
 

00:38:47.119 --> 00:38:48.230 align:start position:0%
so these contacts sort of always save
state

00:38:48.230 --> 00:38:48.240 align:start position:0%
state
 

00:38:48.240 --> 00:38:52.470 align:start position:0%
state
in<00:38:48.640><c> as</c><00:38:48.880><c> it</c><00:38:49.040><c> is</c><00:38:49.200><c> in</c><00:38:49.520><c> switch</c>

00:38:52.470 --> 00:38:52.480 align:start position:0%
 
 

00:38:52.480 --> 00:38:55.990 align:start position:0%
 
okay<00:38:54.079><c> um</c>

00:38:55.990 --> 00:38:56.000 align:start position:0%
okay um
 

00:38:56.000 --> 00:38:58.630 align:start position:0%
okay um
any<00:38:56.160><c> more</c><00:38:56.400><c> questions</c><00:38:56.800><c> about</c><00:38:57.040><c> the</c><00:38:58.000><c> sort</c><00:38:58.160><c> of</c>

00:38:58.630 --> 00:38:58.640 align:start position:0%
any more questions about the sort of
 

00:38:58.640 --> 00:38:59.270 align:start position:0%
any more questions about the sort of
diagram

00:38:59.270 --> 00:38:59.280 align:start position:0%
diagram
 

00:38:59.280 --> 00:39:05.190 align:start position:0%
diagram
level<00:38:59.680><c> situation</c>

00:39:05.190 --> 00:39:05.200 align:start position:0%
 
 

00:39:05.200 --> 00:39:07.589 align:start position:0%
 
um<00:39:05.440><c> i</c><00:39:05.599><c> have</c><00:39:05.760><c> a</c><00:39:05.920><c> question</c><00:39:06.640><c> so</c><00:39:06.880><c> we're</c><00:39:07.040><c> using</c><00:39:07.440><c> the</c>

00:39:07.589 --> 00:39:07.599 align:start position:0%
um i have a question so we're using the
 

00:39:07.599 --> 00:39:09.109 align:start position:0%
um i have a question so we're using the
term<00:39:07.920><c> thread</c><00:39:08.240><c> all</c><00:39:08.400><c> the</c><00:39:08.560><c> time</c><00:39:08.800><c> but</c>

00:39:09.109 --> 00:39:09.119 align:start position:0%
term thread all the time but
 

00:39:09.119 --> 00:39:11.109 align:start position:0%
term thread all the time but
it<00:39:09.280><c> seems</c><00:39:09.520><c> to</c><00:39:09.680><c> me</c><00:39:09.839><c> like</c><00:39:10.079><c> our</c><00:39:10.320><c> implementation</c>

00:39:11.109 --> 00:39:11.119 align:start position:0%
it seems to me like our implementation
 

00:39:11.119 --> 00:39:13.109 align:start position:0%
it seems to me like our implementation
for<00:39:11.359><c> xv6</c>

00:39:13.109 --> 00:39:13.119 align:start position:0%
for xv6
 

00:39:13.119 --> 00:39:16.150 align:start position:0%
for xv6
process<00:39:13.760><c> is</c><00:39:14.000><c> it</c><00:39:14.400><c> is</c><00:39:14.640><c> only</c><00:39:14.960><c> one</c><00:39:15.280><c> thread</c><00:39:15.839><c> so</c><00:39:16.000><c> like</c>

00:39:16.150 --> 00:39:16.160 align:start position:0%
process is it is only one thread so like
 

00:39:16.160 --> 00:39:17.510 align:start position:0%
process is it is only one thread so like
could<00:39:16.320><c> it</c><00:39:16.480><c> be</c><00:39:16.720><c> possible</c><00:39:17.200><c> that</c>

00:39:17.510 --> 00:39:17.520 align:start position:0%
could it be possible that
 

00:39:17.520 --> 00:39:19.430 align:start position:0%
could it be possible that
one<00:39:17.760><c> process</c><00:39:18.160><c> could</c><00:39:18.320><c> have</c><00:39:18.560><c> multiple</c><00:39:19.040><c> threads</c>

00:39:19.430 --> 00:39:19.440 align:start position:0%
one process could have multiple threads
 

00:39:19.440 --> 00:39:21.670 align:start position:0%
one process could have multiple threads
or<00:39:20.079><c> am</c><00:39:20.240><c> i</c><00:39:20.400><c> wrong</c><00:39:20.640><c> here</c>

00:39:21.670 --> 00:39:21.680 align:start position:0%
or am i wrong here
 

00:39:21.680 --> 00:39:25.910 align:start position:0%
or am i wrong here
in<00:39:21.920><c> xv6</c><00:39:23.599><c> right</c><00:39:23.839><c> now</c>

00:39:25.910 --> 00:39:25.920 align:start position:0%
in xv6 right now
 

00:39:25.920 --> 00:39:28.230 align:start position:0%
in xv6 right now
there's<00:39:26.240><c> definitely</c><00:39:26.720><c> some</c><00:39:27.599><c> confusing</c><00:39:28.079><c> things</c>

00:39:28.230 --> 00:39:28.240 align:start position:0%
there's definitely some confusing things
 

00:39:28.240 --> 00:39:29.829 align:start position:0%
there's definitely some confusing things
about<00:39:28.480><c> the</c><00:39:28.560><c> way</c><00:39:28.720><c> we</c><00:39:28.880><c> use</c><00:39:29.040><c> the</c><00:39:29.119><c> words</c><00:39:29.520><c> here</c>

00:39:29.829 --> 00:39:29.839 align:start position:0%
about the way we use the words here
 

00:39:29.839 --> 00:39:32.950 align:start position:0%
about the way we use the words here
in<00:39:30.160><c> xv6</c><00:39:32.240><c> um</c>

00:39:32.950 --> 00:39:32.960 align:start position:0%
in xv6 um
 

00:39:32.960 --> 00:39:39.510 align:start position:0%
in xv6 um
a<00:39:33.200><c> process</c>

00:39:39.510 --> 00:39:39.520 align:start position:0%
 
 

00:39:39.520 --> 00:39:41.589 align:start position:0%
 
a<00:39:39.680><c> process</c><00:39:40.079><c> is</c><00:39:40.240><c> either</c><00:39:40.960><c> executing</c>

00:39:41.589 --> 00:39:41.599 align:start position:0%
a process is either executing
 

00:39:41.599 --> 00:39:43.030 align:start position:0%
a process is either executing
instructions

00:39:43.030 --> 00:39:43.040 align:start position:0%
instructions
 

00:39:43.040 --> 00:39:46.310 align:start position:0%
instructions
a<00:39:43.119><c> user</c><00:39:43.440><c> level</c><00:39:44.079><c> or</c><00:39:45.440><c> it's</c><00:39:45.760><c> executing</c>

00:39:46.310 --> 00:39:46.320 align:start position:0%
a user level or it's executing
 

00:39:46.320 --> 00:39:48.069 align:start position:0%
a user level or it's executing
instructions

00:39:48.069 --> 00:39:48.079 align:start position:0%
instructions
 

00:39:48.079 --> 00:39:51.589 align:start position:0%
instructions
in<00:39:48.160><c> the</c><00:39:48.320><c> kernel</c><00:39:49.760><c> or</c>

00:39:51.589 --> 00:39:51.599 align:start position:0%
in the kernel or
 

00:39:51.599 --> 00:39:53.430 align:start position:0%
in the kernel or
it's<00:39:51.760><c> not</c><00:39:52.000><c> executing</c><00:39:52.560><c> at</c><00:39:52.640><c> all</c><00:39:52.800><c> and</c><00:39:52.960><c> its</c><00:39:53.119><c> state</c>

00:39:53.430 --> 00:39:53.440 align:start position:0%
it's not executing at all and its state
 

00:39:53.440 --> 00:39:54.630 align:start position:0%
it's not executing at all and its state
has<00:39:53.520><c> been</c><00:39:53.760><c> saved</c><00:39:54.079><c> away</c>

00:39:54.630 --> 00:39:54.640 align:start position:0%
has been saved away
 

00:39:54.640 --> 00:39:58.069 align:start position:0%
has been saved away
into<00:39:54.880><c> this</c><00:39:55.200><c> combination</c><00:39:56.000><c> of</c><00:39:56.640><c> a</c><00:39:56.800><c> context</c>

00:39:58.069 --> 00:39:58.079 align:start position:0%
into this combination of a context
 

00:39:58.079 --> 00:40:02.390 align:start position:0%
into this combination of a context
and<00:39:58.400><c> a</c><00:39:58.480><c> trap</c><00:39:58.880><c> frame</c>

00:40:02.390 --> 00:40:02.400 align:start position:0%
 
 

00:40:02.400 --> 00:40:04.230 align:start position:0%
 
so<00:40:02.560><c> that's</c><00:40:02.800><c> the</c><00:40:02.880><c> actual</c><00:40:03.200><c> situation</c><00:40:03.920><c> now</c><00:40:04.079><c> what</c>

00:40:04.230 --> 00:40:04.240 align:start position:0%
so that's the actual situation now what
 

00:40:04.240 --> 00:40:08.390 align:start position:0%
so that's the actual situation now what
you<00:40:04.400><c> want</c><00:40:04.480><c> to</c><00:40:04.640><c> call</c><00:40:04.960><c> that</c>

00:40:08.390 --> 00:40:08.400 align:start position:0%
 
 

00:40:08.400 --> 00:40:11.270 align:start position:0%
 
well<00:40:08.960><c> you</c><00:40:09.119><c> can</c><00:40:09.200><c> call</c><00:40:09.440><c> what</c><00:40:09.680><c> what</c><00:40:09.839><c> you</c><00:40:10.000><c> like</c><00:40:10.800><c> i</c><00:40:11.040><c> i</c>

00:40:11.270 --> 00:40:11.280 align:start position:0%
well you can call what what you like i i
 

00:40:11.280 --> 00:40:12.870 align:start position:0%
well you can call what what you like i i
don't<00:40:11.440><c> know</c><00:40:11.599><c> of</c><00:40:11.760><c> a</c><00:40:11.920><c> simple</c><00:40:12.160><c> explanation</c><00:40:12.720><c> for</c>

00:40:12.870 --> 00:40:12.880 align:start position:0%
don't know of a simple explanation for
 

00:40:12.880 --> 00:40:13.190 align:start position:0%
don't know of a simple explanation for
this

00:40:13.190 --> 00:40:13.200 align:start position:0%
this
 

00:40:13.200 --> 00:40:15.589 align:start position:0%
this
structure<00:40:14.079><c> um</c><00:40:14.400><c> we've</c><00:40:14.720><c> been</c><00:40:14.960><c> calling</c><00:40:15.280><c> it</c><00:40:15.440><c> i've</c>

00:40:15.589 --> 00:40:15.599 align:start position:0%
structure um we've been calling it i've
 

00:40:15.599 --> 00:40:16.710 align:start position:0%
structure um we've been calling it i've
been<00:40:15.760><c> calling</c><00:40:16.079><c> it</c>

00:40:16.710 --> 00:40:16.720 align:start position:0%
been calling it
 

00:40:16.720 --> 00:40:19.430 align:start position:0%
been calling it
i've<00:40:16.880><c> been</c><00:40:17.200><c> saying</c><00:40:18.079><c> that</c><00:40:18.480><c> each</c><00:40:18.720><c> process</c><00:40:19.200><c> has</c>

00:40:19.430 --> 00:40:19.440 align:start position:0%
i've been saying that each process has
 

00:40:19.440 --> 00:40:21.030 align:start position:0%
i've been saying that each process has
two<00:40:19.680><c> threads</c>

00:40:21.030 --> 00:40:21.040 align:start position:0%
two threads
 

00:40:21.040 --> 00:40:24.309 align:start position:0%
two threads
a<00:40:21.200><c> user</c><00:40:21.520><c> level</c><00:40:21.920><c> thread</c><00:40:23.520><c> and</c><00:40:23.680><c> a</c><00:40:23.760><c> kernel</c><00:40:24.079><c> level</c>

00:40:24.309 --> 00:40:24.319 align:start position:0%
a user level thread and a kernel level
 

00:40:24.319 --> 00:40:25.030 align:start position:0%
a user level thread and a kernel level
thread<00:40:24.640><c> and</c>

00:40:25.030 --> 00:40:25.040 align:start position:0%
thread and
 

00:40:25.040 --> 00:40:26.470 align:start position:0%
thread and
and<00:40:25.119><c> that's</c><00:40:25.359><c> a</c><00:40:25.520><c> process</c><00:40:26.079><c> there's</c><00:40:26.319><c> this</c>

00:40:26.470 --> 00:40:26.480 align:start position:0%
and that's a process there's this
 

00:40:26.480 --> 00:40:28.630 align:start position:0%
and that's a process there's this
restriction<00:40:26.960><c> that</c><00:40:27.119><c> a</c><00:40:27.200><c> process</c><00:40:27.599><c> is</c><00:40:27.760><c> only</c>

00:40:28.630 --> 00:40:28.640 align:start position:0%
restriction that a process is only
 

00:40:28.640 --> 00:40:30.710 align:start position:0%
restriction that a process is only
is<00:40:28.880><c> either</c><00:40:29.200><c> executing</c><00:40:29.760><c> in</c><00:40:29.839><c> the</c><00:40:29.920><c> kernel</c><00:40:30.480><c> in</c><00:40:30.560><c> the</c>

00:40:30.710 --> 00:40:30.720 align:start position:0%
is either executing in the kernel in the
 

00:40:30.720 --> 00:40:32.150 align:start position:0%
is either executing in the kernel in the
user<00:40:31.040><c> space</c>

00:40:32.150 --> 00:40:32.160 align:start position:0%
user space
 

00:40:32.160 --> 00:40:33.829 align:start position:0%
user space
or<00:40:32.480><c> executing</c><00:40:32.960><c> in</c><00:40:33.040><c> the</c><00:40:33.119><c> kernel</c><00:40:33.520><c> in</c><00:40:33.599><c> an</c>

00:40:33.829 --> 00:40:33.839 align:start position:0%
or executing in the kernel in an
 

00:40:33.839 --> 00:40:35.270 align:start position:0%
or executing in the kernel in an
interrupt<00:40:34.160><c> your</c><00:40:34.319><c> system</c><00:40:34.640><c> call</c>

00:40:35.270 --> 00:40:35.280 align:start position:0%
interrupt your system call
 

00:40:35.280 --> 00:40:38.550 align:start position:0%
interrupt your system call
but<00:40:35.520><c> never</c><00:40:35.760><c> both</c><00:40:37.040><c> yeah</c>

00:40:38.550 --> 00:40:38.560 align:start position:0%
but never both yeah
 

00:40:38.560 --> 00:40:41.990 align:start position:0%
but never both yeah
okay<00:40:38.960><c> that</c><00:40:39.119><c> makes</c><00:40:39.359><c> sense</c><00:40:40.480><c> yeah</c><00:40:41.119><c> i</c><00:40:41.440><c> apologize</c>

00:40:41.990 --> 00:40:42.000 align:start position:0%
okay that makes sense yeah i apologize
 

00:40:42.000 --> 00:40:47.510 align:start position:0%
okay that makes sense yeah i apologize
for<00:40:42.160><c> the</c><00:40:42.319><c> kind</c><00:40:42.480><c> of</c><00:40:42.560><c> complexity</c><00:40:43.119><c> of</c><00:40:43.200><c> this</c>

00:40:47.510 --> 00:40:47.520 align:start position:0%
 
 

00:40:47.520 --> 00:40:50.550 align:start position:0%
 
okay<00:40:48.720><c> okay</c><00:40:49.119><c> so</c><00:40:49.359><c> let</c><00:40:49.520><c> me</c><00:40:49.599><c> switch</c><00:40:49.839><c> to</c><00:40:50.079><c> code</c>

00:40:50.550 --> 00:40:50.560 align:start position:0%
okay okay so let me switch to code
 

00:40:50.560 --> 00:41:02.390 align:start position:0%
okay okay so let me switch to code
looking<00:40:50.800><c> at</c><00:40:50.880><c> the</c><00:40:51.040><c> xv6</c><00:40:51.599><c> code</c>

00:41:02.390 --> 00:41:02.400 align:start position:0%
 
 

00:41:02.400 --> 00:41:10.069 align:start position:0%
 
right<00:41:02.560><c> so</c><00:41:03.119><c> first</c><00:41:03.440><c> of</c><00:41:04.839><c> all</c>

00:41:10.069 --> 00:41:10.079 align:start position:0%
 
 

00:41:10.079 --> 00:41:13.430 align:start position:0%
 
um<00:41:10.880><c> i</c><00:41:11.040><c> just</c><00:41:11.200><c> want</c><00:41:11.359><c> to</c><00:41:12.240><c> just</c><00:41:12.480><c> to</c>

00:41:13.430 --> 00:41:13.440 align:start position:0%
um i just want to just to
 

00:41:13.440 --> 00:41:14.710 align:start position:0%
um i just want to just to
show<00:41:13.920><c> some</c><00:41:14.079><c> of</c><00:41:14.160><c> the</c><00:41:14.240><c> stuff</c><00:41:14.400><c> we've</c><00:41:14.560><c> been</c>

00:41:14.710 --> 00:41:14.720 align:start position:0%
show some of the stuff we've been
 

00:41:14.720 --> 00:41:19.270 align:start position:0%
show some of the stuff we've been
talking<00:41:15.040><c> about</c><00:41:15.440><c> i'm</c><00:41:15.520><c> going</c><00:41:15.680><c> to</c><00:41:15.760><c> look</c><00:41:15.920><c> at</c><00:41:16.000><c> the</c>

00:41:19.270 --> 00:41:19.280 align:start position:0%
 
 

00:41:19.280 --> 00:41:21.750 align:start position:0%
 
process<00:41:19.680><c> structure</c><00:41:20.960><c> and</c><00:41:21.119><c> we</c><00:41:21.200><c> can</c><00:41:21.359><c> see</c><00:41:21.520><c> in</c><00:41:21.680><c> the</c>

00:41:21.750 --> 00:41:21.760 align:start position:0%
process structure and we can see in the
 

00:41:21.760 --> 00:41:22.950 align:start position:0%
process structure and we can see in the
process<00:41:22.079><c> structure</c><00:41:22.319><c> a</c><00:41:22.400><c> lot</c><00:41:22.560><c> of</c><00:41:22.640><c> the</c><00:41:22.720><c> things</c>

00:41:22.950 --> 00:41:22.960 align:start position:0%
process structure a lot of the things
 

00:41:22.960 --> 00:41:24.390 align:start position:0%
process structure a lot of the things
we've<00:41:23.119><c> been</c><00:41:23.280><c> talking</c><00:41:23.520><c> about</c>

00:41:24.390 --> 00:41:24.400 align:start position:0%
we've been talking about
 

00:41:24.400 --> 00:41:30.710 align:start position:0%
we've been talking about
um<00:41:25.200><c> just</c><00:41:25.599><c> for</c><00:41:25.760><c> review</c><00:41:26.160><c> there's</c><00:41:26.480><c> the</c>

00:41:30.710 --> 00:41:30.720 align:start position:0%
 
 

00:41:30.720 --> 00:41:33.990 align:start position:0%
 
wrap<00:41:30.960><c> frame</c><00:41:31.680><c> that</c><00:41:32.079><c> saves</c><00:41:32.480><c> the</c><00:41:33.440><c> user</c><00:41:33.680><c> level</c>

00:41:33.990 --> 00:41:34.000 align:start position:0%
wrap frame that saves the user level
 

00:41:34.000 --> 00:41:37.589 align:start position:0%
wrap frame that saves the user level
registers<00:41:36.480><c> there's</c>

00:41:37.589 --> 00:41:37.599 align:start position:0%
registers there's
 

00:41:37.599 --> 00:41:42.470 align:start position:0%
registers there's
a<00:41:37.839><c> context</c><00:41:38.560><c> here</c><00:41:40.480><c> that</c><00:41:40.720><c> saves</c><00:41:41.200><c> the</c>

00:41:42.470 --> 00:41:42.480 align:start position:0%
a context here that saves the
 

00:41:42.480 --> 00:41:44.390 align:start position:0%
a context here that saves the
kernel<00:41:42.880><c> thread</c><00:41:43.119><c> registers</c><00:41:43.680><c> when</c><00:41:43.839><c> we</c><00:41:44.000><c> switch</c>

00:41:44.390 --> 00:41:44.400 align:start position:0%
kernel thread registers when we switch
 

00:41:44.400 --> 00:41:46.550 align:start position:0%
kernel thread registers when we switch
to<00:41:44.560><c> the</c><00:41:44.880><c> scheduler</c><00:41:45.440><c> thread</c>

00:41:46.550 --> 00:41:46.560 align:start position:0%
to the scheduler thread
 

00:41:46.560 --> 00:41:50.390 align:start position:0%
to the scheduler thread
there's<00:41:46.880><c> a</c><00:41:48.960><c> pointer</c><00:41:49.280><c> to</c><00:41:49.440><c> this</c><00:41:49.680><c> process</c><00:41:50.079><c> is</c>

00:41:50.390 --> 00:41:50.400 align:start position:0%
there's a pointer to this process is
 

00:41:50.400 --> 00:41:52.470 align:start position:0%
there's a pointer to this process is
kernel<00:41:50.800><c> stack</c><00:41:51.200><c> which</c><00:41:51.440><c> is</c><00:41:51.520><c> where</c><00:41:52.160><c> you</c><00:41:52.319><c> know</c>

00:41:52.470 --> 00:41:52.480 align:start position:0%
kernel stack which is where you know
 

00:41:52.480 --> 00:41:53.910 align:start position:0%
kernel stack which is where you know
function<00:41:52.800><c> calls</c><00:41:53.119><c> are</c><00:41:53.280><c> saved</c>

00:41:53.910 --> 00:41:53.920 align:start position:0%
function calls are saved
 

00:41:53.920 --> 00:41:57.190 align:start position:0%
function calls are saved
while<00:41:54.160><c> we're</c><00:41:54.319><c> executing</c><00:41:54.800><c> in</c><00:41:54.880><c> the</c><00:41:54.960><c> kernel</c>

00:41:57.190 --> 00:41:57.200 align:start position:0%
while we're executing in the kernel
 

00:41:57.200 --> 00:41:59.589 align:start position:0%
while we're executing in the kernel
there's<00:41:57.440><c> this</c><00:41:57.680><c> state</c><00:41:58.160><c> variable</c><00:41:58.800><c> which</c>

00:41:59.589 --> 00:41:59.599 align:start position:0%
there's this state variable which
 

00:41:59.599 --> 00:42:02.309 align:start position:0%
there's this state variable which
records<00:42:00.160><c> whether</c><00:42:00.480><c> this</c><00:42:00.720><c> process</c><00:42:01.359><c> is</c>

00:42:02.309 --> 00:42:02.319 align:start position:0%
records whether this process is
 

00:42:02.319 --> 00:42:04.630 align:start position:0%
records whether this process is
running<00:42:02.800><c> or</c><00:42:02.960><c> runnable</c><00:42:03.440><c> or</c><00:42:03.520><c> sleeping</c><00:42:04.000><c> or</c><00:42:04.400><c> not</c>

00:42:04.630 --> 00:42:04.640 align:start position:0%
running or runnable or sleeping or not
 

00:42:04.640 --> 00:42:07.190 align:start position:0%
running or runnable or sleeping or not
allocated<00:42:05.200><c> at</c><00:42:05.440><c> all</c>

00:42:07.190 --> 00:42:07.200 align:start position:0%
allocated at all
 

00:42:07.200 --> 00:42:10.710 align:start position:0%
allocated at all
and<00:42:07.280><c> then</c><00:42:07.520><c> finally</c><00:42:09.280><c> there's</c><00:42:09.520><c> a</c><00:42:09.680><c> lock</c><00:42:10.160><c> that</c>

00:42:10.710 --> 00:42:10.720 align:start position:0%
and then finally there's a lock that
 

00:42:10.720 --> 00:42:15.589 align:start position:0%
and then finally there's a lock that
protects<00:42:11.119><c> various</c><00:42:11.440><c> things</c><00:42:11.680><c> as</c><00:42:11.839><c> we'll</c><00:42:12.079><c> see</c>

00:42:15.589 --> 00:42:15.599 align:start position:0%
 
 

00:42:15.599 --> 00:42:18.710 align:start position:0%
 
for<00:42:15.839><c> now</c><00:42:16.160><c> it</c><00:42:17.599><c> we</c><00:42:17.760><c> can</c><00:42:17.920><c> observe</c><00:42:18.240><c> that</c><00:42:18.400><c> it</c><00:42:18.640><c> at</c>

00:42:18.710 --> 00:42:18.720 align:start position:0%
for now it we can observe that it at
 

00:42:18.720 --> 00:42:20.309 align:start position:0%
for now it we can observe that it at
least<00:42:19.040><c> protects</c>

00:42:20.309 --> 00:42:20.319 align:start position:0%
least protects
 

00:42:20.319 --> 00:42:23.430 align:start position:0%
least protects
uh<00:42:20.640><c> changes</c><00:42:21.119><c> to</c><00:42:21.280><c> the</c><00:42:21.520><c> state</c><00:42:21.920><c> variable</c><00:42:22.960><c> um</c>

00:42:23.430 --> 00:42:23.440 align:start position:0%
uh changes to the state variable um
 

00:42:23.440 --> 00:42:25.990 align:start position:0%
uh changes to the state variable um
so<00:42:23.599><c> that</c><00:42:23.760><c> for</c><00:42:23.920><c> example</c><00:42:24.960><c> uh</c><00:42:25.359><c> two</c><00:42:25.520><c> scheduler</c>

00:42:25.990 --> 00:42:26.000 align:start position:0%
so that for example uh two scheduler
 

00:42:26.000 --> 00:42:27.430 align:start position:0%
so that for example uh two scheduler
threats<00:42:26.319><c> don't</c><00:42:26.560><c> try</c><00:42:26.720><c> to</c><00:42:26.960><c> grab</c>

00:42:27.430 --> 00:42:27.440 align:start position:0%
threats don't try to grab
 

00:42:27.440 --> 00:42:29.109 align:start position:0%
threats don't try to grab
a<00:42:27.520><c> runnable</c><00:42:28.000><c> process</c><00:42:28.400><c> and</c><00:42:28.480><c> run</c><00:42:28.720><c> it</c><00:42:28.880><c> at</c><00:42:29.040><c> the</c>

00:42:29.109 --> 00:42:29.119 align:start position:0%
a runnable process and run it at the
 

00:42:29.119 --> 00:42:31.349 align:start position:0%
a runnable process and run it at the
same<00:42:29.359><c> time</c><00:42:30.400><c> one</c><00:42:30.560><c> of</c><00:42:30.640><c> the</c><00:42:30.720><c> many</c><00:42:30.960><c> things</c><00:42:31.200><c> this</c>

00:42:31.349 --> 00:42:31.359 align:start position:0%
same time one of the many things this
 

00:42:31.359 --> 00:42:35.270 align:start position:0%
same time one of the many things this
lock<00:42:31.599><c> does</c><00:42:31.760><c> is</c><00:42:31.920><c> prevent</c><00:42:32.160><c> that</c><00:42:32.319><c> from</c><00:42:32.560><c> happening</c>

00:42:35.270 --> 00:42:35.280 align:start position:0%
 
 

00:42:35.280 --> 00:42:38.550 align:start position:0%
 
i'm<00:42:35.440><c> going</c><00:42:35.599><c> to</c><00:42:35.680><c> run</c><00:42:36.000><c> a</c><00:42:37.440><c> simple</c><00:42:37.760><c> demo</c><00:42:38.160><c> program</c>

00:42:38.550 --> 00:42:38.560 align:start position:0%
i'm going to run a simple demo program
 

00:42:38.560 --> 00:42:39.270 align:start position:0%
i'm going to run a simple demo program
for<00:42:38.720><c> you</c>

00:42:39.270 --> 00:42:39.280 align:start position:0%
for you
 

00:42:39.280 --> 00:42:43.109 align:start position:0%
for you
this<00:42:39.599><c> spin</c><00:42:40.000><c> program</c><00:42:42.160><c> i'm</c><00:42:42.400><c> using</c><00:42:42.640><c> it</c><00:42:42.720><c> mostly</c>

00:42:43.109 --> 00:42:43.119 align:start position:0%
this spin program i'm using it mostly
 

00:42:43.119 --> 00:42:43.430 align:start position:0%
this spin program i'm using it mostly
just

00:42:43.430 --> 00:42:43.440 align:start position:0%
just
 

00:42:43.440 --> 00:42:45.750 align:start position:0%
just
to<00:42:43.760><c> drive</c><00:42:44.319><c> the</c><00:42:44.880><c> to</c><00:42:45.040><c> sort</c><00:42:45.200><c> of</c><00:42:45.359><c> create</c><00:42:45.599><c> this</c>

00:42:45.750 --> 00:42:45.760 align:start position:0%
to drive the to sort of create this
 

00:42:45.760 --> 00:42:48.150 align:start position:0%
to drive the to sort of create this
issue<00:42:46.079><c> predictable</c><00:42:46.560><c> situation</c><00:42:47.200><c> in</c><00:42:47.280><c> which</c>

00:42:48.150 --> 00:42:48.160 align:start position:0%
issue predictable situation in which
 

00:42:48.160 --> 00:42:50.230 align:start position:0%
issue predictable situation in which
we<00:42:48.319><c> switch</c><00:42:48.560><c> from</c><00:42:48.720><c> one</c><00:42:48.880><c> thread</c><00:42:49.119><c> to</c><00:42:49.280><c> another</c><00:42:50.079><c> but</c>

00:42:50.230 --> 00:42:50.240 align:start position:0%
we switch from one thread to another but
 

00:42:50.240 --> 00:42:51.510 align:start position:0%
we switch from one thread to another but
this<00:42:50.640><c> is</c>

00:42:51.510 --> 00:42:51.520 align:start position:0%
this is
 

00:42:51.520 --> 00:42:54.230 align:start position:0%
this is
this<00:42:51.839><c> program</c><00:42:52.240><c> spin</c><00:42:52.480><c> program</c><00:42:53.599><c> creates</c><00:42:54.000><c> two</c>

00:42:54.230 --> 00:42:54.240 align:start position:0%
this program spin program creates two
 

00:42:54.240 --> 00:42:56.230 align:start position:0%
this program spin program creates two
processes<00:42:54.800><c> and</c><00:42:54.880><c> the</c><00:42:55.040><c> processes</c><00:42:55.520><c> both</c><00:42:55.839><c> compute</c>

00:42:56.230 --> 00:42:56.240 align:start position:0%
processes and the processes both compute
 

00:42:56.240 --> 00:42:57.190 align:start position:0%
processes and the processes both compute
forever

00:42:57.190 --> 00:42:57.200 align:start position:0%
forever
 

00:42:57.200 --> 00:43:00.230 align:start position:0%
forever
you<00:42:57.359><c> know</c><00:42:57.520><c> call</c><00:42:57.839><c> fork</c><00:42:58.960><c> here</c>

00:43:00.230 --> 00:43:00.240 align:start position:0%
you know call fork here
 

00:43:00.240 --> 00:43:03.349 align:start position:0%
you know call fork here
i<00:43:00.400><c> make</c><00:43:00.560><c> a</c><00:43:00.720><c> child</c><00:43:01.760><c> um</c><00:43:02.480><c> and</c><00:43:02.640><c> then</c>

00:43:03.349 --> 00:43:03.359 align:start position:0%
i make a child um and then
 

00:43:03.359 --> 00:43:06.470 align:start position:0%
i make a child um and then
forever<00:43:04.480><c> both</c><00:43:04.880><c> children</c><00:43:05.280><c> both</c><00:43:05.599><c> children</c><00:43:06.079><c> just</c>

00:43:06.470 --> 00:43:06.480 align:start position:0%
forever both children both children just
 

00:43:06.480 --> 00:43:07.829 align:start position:0%
forever both children both children just
sit<00:43:06.720><c> in</c><00:43:06.800><c> this</c><00:43:06.960><c> loop</c><00:43:07.200><c> and</c><00:43:07.359><c> every</c><00:43:07.520><c> once</c><00:43:07.680><c> in</c><00:43:07.839><c> a</c>

00:43:07.829 --> 00:43:07.839 align:start position:0%
sit in this loop and every once in a
 

00:43:07.839 --> 00:43:09.190 align:start position:0%
sit in this loop and every once in a
while<00:43:08.000><c> they'll</c><00:43:08.240><c> print</c><00:43:08.400><c> a</c><00:43:08.480><c> character</c><00:43:08.880><c> just</c><00:43:09.040><c> so</c>

00:43:09.190 --> 00:43:09.200 align:start position:0%
while they'll print a character just so
 

00:43:09.200 --> 00:43:11.670 align:start position:0%
while they'll print a character just so
we<00:43:09.359><c> can</c><00:43:09.520><c> see</c><00:43:09.680><c> they're</c><00:43:09.839><c> making</c><00:43:10.160><c> progress</c>

00:43:11.670 --> 00:43:11.680 align:start position:0%
we can see they're making progress
 

00:43:11.680 --> 00:43:12.870 align:start position:0%
we can see they're making progress
but<00:43:11.839><c> they</c><00:43:11.920><c> don't</c><00:43:12.079><c> print</c><00:43:12.240><c> characters</c><00:43:12.640><c> very</c>

00:43:12.870 --> 00:43:12.880 align:start position:0%
but they don't print characters very
 

00:43:12.880 --> 00:43:15.349 align:start position:0%
but they don't print characters very
often<00:43:13.359><c> and</c><00:43:14.480><c> they</c><00:43:14.640><c> never</c>

00:43:15.349 --> 00:43:15.359 align:start position:0%
often and they never
 

00:43:15.359 --> 00:43:17.750 align:start position:0%
often and they never
sort<00:43:15.520><c> of</c><00:43:15.920><c> intentionally</c><00:43:16.560><c> give</c><00:43:16.720><c> up</c><00:43:16.880><c> the</c><00:43:16.960><c> cpu</c><00:43:17.599><c> so</c>

00:43:17.750 --> 00:43:17.760 align:start position:0%
sort of intentionally give up the cpu so
 

00:43:17.760 --> 00:43:19.670 align:start position:0%
sort of intentionally give up the cpu so
what<00:43:18.000><c> we</c><00:43:18.079><c> have</c><00:43:18.240><c> here</c><00:43:18.400><c> is</c><00:43:18.560><c> two</c>

00:43:19.670 --> 00:43:19.680 align:start position:0%
what we have here is two
 

00:43:19.680 --> 00:43:21.829 align:start position:0%
what we have here is two
essentially<00:43:20.000><c> two</c><00:43:20.160><c> compute</c><00:43:20.480><c> bound</c><00:43:20.720><c> processes</c>

00:43:21.829 --> 00:43:21.839 align:start position:0%
essentially two compute bound processes
 

00:43:21.839 --> 00:43:23.430 align:start position:0%
essentially two compute bound processes
and<00:43:22.000><c> in</c><00:43:22.160><c> order</c><00:43:22.400><c> for</c><00:43:22.560><c> both</c><00:43:22.720><c> of</c><00:43:22.800><c> them</c><00:43:22.960><c> to</c><00:43:23.119><c> run</c><00:43:23.359><c> i'm</c>

00:43:23.430 --> 00:43:23.440 align:start position:0%
and in order for both of them to run i'm
 

00:43:23.440 --> 00:43:24.470 align:start position:0%
and in order for both of them to run i'm
going<00:43:23.520><c> to</c><00:43:23.599><c> run</c><00:43:23.760><c> them</c><00:43:23.920><c> on</c><00:43:24.079><c> a</c>

00:43:24.470 --> 00:43:24.480 align:start position:0%
going to run them on a
 

00:43:24.480 --> 00:43:27.589 align:start position:0%
going to run them on a
single<00:43:24.960><c> cpu</c>

00:43:27.589 --> 00:43:27.599 align:start position:0%
single cpu
 

00:43:27.599 --> 00:43:30.069 align:start position:0%
single cpu
xv6<00:43:28.240><c> that</c><00:43:28.480><c> is</c><00:43:28.640><c> only</c><00:43:28.880><c> one</c><00:43:29.119><c> core</c><00:43:29.760><c> and</c><00:43:29.839><c> so</c><00:43:30.000><c> in</c>

00:43:30.069 --> 00:43:30.079 align:start position:0%
xv6 that is only one core and so in
 

00:43:30.079 --> 00:43:31.670 align:start position:0%
xv6 that is only one core and so in
order<00:43:30.319><c> for</c><00:43:30.400><c> both</c><00:43:30.560><c> of</c><00:43:30.640><c> them</c><00:43:30.720><c> to</c><00:43:30.880><c> execute</c>

00:43:31.670 --> 00:43:31.680 align:start position:0%
order for both of them to execute
 

00:43:31.680 --> 00:43:35.030 align:start position:0%
order for both of them to execute
you<00:43:31.760><c> know</c><00:43:31.920><c> it's</c><00:43:32.079><c> going</c><00:43:32.160><c> to</c><00:43:32.240><c> be</c><00:43:32.400><c> necessary</c><00:43:33.040><c> to</c>

00:43:35.030 --> 00:43:35.040 align:start position:0%
you know it's going to be necessary to
 

00:43:35.040 --> 00:43:40.390 align:start position:0%
you know it's going to be necessary to
do<00:43:35.760><c> switching</c><00:43:37.359><c> between</c><00:43:37.680><c> the</c><00:43:37.760><c> two</c><00:43:38.839><c> processes</c>

00:43:40.390 --> 00:43:40.400 align:start position:0%
do switching between the two processes
 

00:43:40.400 --> 00:43:44.550 align:start position:0%
do switching between the two processes
let<00:43:40.560><c> me</c><00:43:40.800><c> fire</c><00:43:41.200><c> up</c><00:43:43.200><c> the</c><00:43:43.440><c> spin</c><00:43:43.839><c> program</c>

00:43:44.550 --> 00:43:44.560 align:start position:0%
let me fire up the spin program
 

00:43:44.560 --> 00:43:51.030 align:start position:0%
let me fire up the spin program
under<00:43:44.800><c> gdb</c>

00:43:51.030 --> 00:43:51.040 align:start position:0%
 
 

00:43:51.040 --> 00:43:52.309 align:start position:0%
 
run<00:43:51.200><c> the</c><00:43:51.280><c> spin</c><00:43:51.520><c> program</c><00:43:51.839><c> and</c><00:43:51.920><c> you</c><00:43:52.000><c> can</c><00:43:52.160><c> see</c>

00:43:52.309 --> 00:43:52.319 align:start position:0%
run the spin program and you can see
 

00:43:52.319 --> 00:43:54.470 align:start position:0%
run the spin program and you can see
it's<00:43:52.560><c> printing</c><00:43:53.280><c> one</c><00:43:53.440><c> of</c><00:43:53.599><c> the</c>

00:43:54.470 --> 00:43:54.480 align:start position:0%
it's printing one of the
 

00:43:54.480 --> 00:43:56.710 align:start position:0%
it's printing one of the
two<00:43:54.800><c> processes</c><00:43:55.359><c> prints</c><00:43:55.839><c> forward</c><00:43:56.240><c> slash</c><00:43:56.640><c> and</c>

00:43:56.710 --> 00:43:56.720 align:start position:0%
two processes prints forward slash and
 

00:43:56.720 --> 00:43:57.510 align:start position:0%
two processes prints forward slash and
the<00:43:56.880><c> other</c><00:43:57.040><c> prints</c>

00:43:57.510 --> 00:43:57.520 align:start position:0%
the other prints
 

00:43:57.520 --> 00:43:59.349 align:start position:0%
the other prints
backwards<00:43:57.920><c> slash</c><00:43:58.319><c> and</c><00:43:58.480><c> you</c><00:43:58.560><c> can</c><00:43:58.720><c> see</c><00:43:58.880><c> that</c>

00:43:59.349 --> 00:43:59.359 align:start position:0%
backwards slash and you can see that
 

00:43:59.359 --> 00:44:01.349 align:start position:0%
backwards slash and you can see that
every<00:43:59.599><c> once</c><00:43:59.839><c> in</c><00:43:59.920><c> a</c><00:44:00.000><c> while</c>

00:44:01.349 --> 00:44:01.359 align:start position:0%
every once in a while
 

00:44:01.359 --> 00:44:03.349 align:start position:0%
every once in a while
xp6<00:44:02.079><c> is</c><00:44:02.240><c> switching</c><00:44:02.560><c> between</c><00:44:02.960><c> them</c><00:44:03.119><c> it</c><00:44:03.200><c> only</c>

00:44:03.349 --> 00:44:03.359 align:start position:0%
xp6 is switching between them it only
 

00:44:03.359 --> 00:44:05.589 align:start position:0%
xp6 is switching between them it only
has<00:44:03.520><c> one</c><00:44:03.760><c> core</c><00:44:04.160><c> the</c><00:44:04.319><c> way</c><00:44:04.480><c> i've</c><00:44:04.560><c> configured</c><00:44:05.040><c> it</c>

00:44:05.589 --> 00:44:05.599 align:start position:0%
has one core the way i've configured it
 

00:44:05.599 --> 00:44:08.470 align:start position:0%
has one core the way i've configured it
so<00:44:05.839><c> it</c><00:44:06.240><c> we</c><00:44:06.400><c> see</c><00:44:06.800><c> a</c><00:44:06.880><c> bunch</c><00:44:07.119><c> of</c><00:44:07.200><c> forward</c><00:44:07.839><c> slashes</c>

00:44:08.470 --> 00:44:08.480 align:start position:0%
so it we see a bunch of forward slashes
 

00:44:08.480 --> 00:44:09.670 align:start position:0%
so it we see a bunch of forward slashes
printing<00:44:08.880><c> and</c><00:44:09.040><c> then</c>

00:44:09.670 --> 00:44:09.680 align:start position:0%
printing and then
 

00:44:09.680 --> 00:44:12.069 align:start position:0%
printing and then
apparently<00:44:10.160><c> a</c><00:44:10.240><c> timer</c><00:44:10.560><c> in</c><00:44:10.720><c> or</c><00:44:10.880><c> up</c><00:44:10.960><c> most</c><00:44:11.280><c> go</c><00:44:11.520><c> off</c>

00:44:12.069 --> 00:44:12.079 align:start position:0%
apparently a timer in or up most go off
 

00:44:12.079 --> 00:44:13.109 align:start position:0%
apparently a timer in or up most go off
um

00:44:13.109 --> 00:44:13.119 align:start position:0%
um
 

00:44:13.119 --> 00:44:15.349 align:start position:0%
um
switch<00:44:13.520><c> the</c><00:44:13.599><c> one</c><00:44:13.920><c> cpu</c><00:44:14.480><c> to</c><00:44:14.640><c> the</c><00:44:14.720><c> other</c><00:44:14.880><c> process</c>

00:44:15.349 --> 00:44:15.359 align:start position:0%
switch the one cpu to the other process
 

00:44:15.359 --> 00:44:17.030 align:start position:0%
switch the one cpu to the other process
and<00:44:15.440><c> then</c><00:44:16.079><c> uh</c><00:44:16.240><c> prints</c><00:44:16.560><c> the</c><00:44:16.640><c> other</c><00:44:16.800><c> kind</c><00:44:16.960><c> of</c>

00:44:17.030 --> 00:44:17.040 align:start position:0%
and then uh prints the other kind of
 

00:44:17.040 --> 00:44:17.910 align:start position:0%
and then uh prints the other kind of
slash<00:44:17.359><c> for</c><00:44:17.440><c> a</c><00:44:17.520><c> while</c>

00:44:17.910 --> 00:44:17.920 align:start position:0%
slash for a while
 

00:44:17.920 --> 00:44:19.750 align:start position:0%
slash for a while
so<00:44:18.160><c> what</c><00:44:18.240><c> i</c><00:44:18.319><c> want</c><00:44:18.480><c> to</c><00:44:18.560><c> observe</c><00:44:18.960><c> is</c><00:44:19.280><c> the</c><00:44:19.440><c> timer</c>

00:44:19.750 --> 00:44:19.760 align:start position:0%
so what i want to observe is the timer
 

00:44:19.760 --> 00:44:21.270 align:start position:0%
so what i want to observe is the timer
interrupt<00:44:20.079><c> going</c><00:44:20.319><c> off</c><00:44:20.720><c> so</c><00:44:20.880><c> i'm</c><00:44:20.960><c> going</c><00:44:21.040><c> to</c><00:44:21.119><c> put</c>

00:44:21.270 --> 00:44:21.280 align:start position:0%
interrupt going off so i'm going to put
 

00:44:21.280 --> 00:44:23.589 align:start position:0%
interrupt going off so i'm going to put
a<00:44:21.359><c> break</c><00:44:21.680><c> point</c>

00:44:23.589 --> 00:44:23.599 align:start position:0%
a break point
 

00:44:23.599 --> 00:44:26.870 align:start position:0%
a break point
in<00:44:23.920><c> trap</c>

00:44:26.870 --> 00:44:26.880 align:start position:0%
 
 

00:44:26.880 --> 00:44:35.190 align:start position:0%
 
and<00:44:27.119><c> in</c><00:44:27.280><c> particular</c><00:44:27.839><c> at</c><00:44:28.720><c> line</c><00:44:28.960><c> 207</c><00:44:29.599><c> and</c><00:44:29.760><c> trap</c>

00:44:35.190 --> 00:44:35.200 align:start position:0%
 
 

00:44:35.200 --> 00:44:39.030 align:start position:0%
 
uh<00:44:35.760><c> which</c><00:44:36.079><c> is</c><00:44:36.960><c> um</c><00:44:37.920><c> the</c><00:44:38.160><c> code</c>

00:44:39.030 --> 00:44:39.040 align:start position:0%
uh which is um the code
 

00:44:39.040 --> 00:44:42.790 align:start position:0%
uh which is um the code
in<00:44:40.480><c> um</c>

00:44:42.790 --> 00:44:42.800 align:start position:0%
in um
 

00:44:42.800 --> 00:44:46.550 align:start position:0%
in um
trap<00:44:43.280><c> in</c><00:44:43.520><c> dev</c><00:44:43.839><c> inter</c><00:44:45.119><c> that</c><00:44:45.760><c> um</c>

00:44:46.550 --> 00:44:46.560 align:start position:0%
trap in dev inter that um
 

00:44:46.560 --> 00:44:48.630 align:start position:0%
trap in dev inter that um
recognizes<00:44:47.520><c> that</c><00:44:47.760><c> ah</c><00:44:48.000><c> we</c><00:44:48.160><c> are</c><00:44:48.240><c> in</c><00:44:48.400><c> an</c>

00:44:48.630 --> 00:44:48.640 align:start position:0%
recognizes that ah we are in an
 

00:44:48.640 --> 00:44:50.390 align:start position:0%
recognizes that ah we are in an
interrupt<00:44:49.200><c> and</c><00:44:49.280><c> the</c><00:44:49.440><c> interrupt</c><00:44:49.920><c> was</c>

00:44:50.390 --> 00:44:50.400 align:start position:0%
interrupt and the interrupt was
 

00:44:50.400 --> 00:44:54.309 align:start position:0%
interrupt and the interrupt was
caused<00:44:50.720><c> by</c><00:44:50.960><c> a</c><00:44:51.119><c> timer</c><00:44:51.440><c> interrupt</c>

00:44:54.309 --> 00:44:54.319 align:start position:0%
 
 

00:44:54.319 --> 00:44:55.910 align:start position:0%
 
so<00:44:54.400><c> i'm</c><00:44:54.480><c> going</c><00:44:54.560><c> to</c><00:44:54.640><c> put</c><00:44:54.800><c> a</c><00:44:54.880><c> break</c><00:44:55.119><c> point</c><00:44:55.359><c> here</c>

00:44:55.910 --> 00:44:55.920 align:start position:0%
so i'm going to put a break point here
 

00:44:55.920 --> 00:44:57.510 align:start position:0%
so i'm going to put a break point here
at

00:44:57.510 --> 00:44:57.520 align:start position:0%
at
 

00:44:57.520 --> 00:45:00.550 align:start position:0%
at
trap.c<00:44:58.960><c> 0.27</c><00:44:59.839><c> and</c>

00:45:00.550 --> 00:45:00.560 align:start position:0%
trap.c 0.27 and
 

00:45:00.560 --> 00:45:03.589 align:start position:0%
trap.c 0.27 and
continue<00:45:01.599><c> um</c><00:45:02.560><c> boom</c><00:45:02.800><c> the</c><00:45:03.119><c> height</c><00:45:03.280><c> triggers</c>

00:45:03.589 --> 00:45:03.599 align:start position:0%
continue um boom the height triggers
 

00:45:03.599 --> 00:45:04.069 align:start position:0%
continue um boom the height triggers
right<00:45:03.760><c> away</c>

00:45:04.069 --> 00:45:04.079 align:start position:0%
right away
 

00:45:04.079 --> 00:45:06.150 align:start position:0%
right away
because<00:45:04.400><c> timer</c><00:45:04.800><c> amps</c><00:45:05.040><c> are</c><00:45:05.119><c> pretty</c><00:45:05.359><c> frequent</c>

00:45:06.150 --> 00:45:06.160 align:start position:0%
because timer amps are pretty frequent
 

00:45:06.160 --> 00:45:07.750 align:start position:0%
because timer amps are pretty frequent
and<00:45:06.240><c> we</c><00:45:06.400><c> can</c><00:45:06.480><c> tell</c><00:45:06.720><c> from</c><00:45:06.880><c> where</c><00:45:07.200><c> that</c><00:45:07.440><c> indeed</c>

00:45:07.750 --> 00:45:07.760 align:start position:0%
and we can tell from where that indeed
 

00:45:07.760 --> 00:45:09.430 align:start position:0%
and we can tell from where that indeed
we're<00:45:07.920><c> in</c><00:45:08.000><c> user</c><00:45:08.319><c> trap</c><00:45:08.640><c> and</c><00:45:08.720><c> user</c><00:45:09.040><c> trap</c>

00:45:09.430 --> 00:45:09.440 align:start position:0%
we're in user trap and user trap
 

00:45:09.440 --> 00:45:12.309 align:start position:0%
we're in user trap and user trap
has<00:45:09.680><c> called</c><00:45:10.079><c> dev</c><00:45:10.319><c> enter</c><00:45:11.359><c> to</c><00:45:11.839><c> handle</c><00:45:12.160><c> this</c>

00:45:12.309 --> 00:45:12.319 align:start position:0%
has called dev enter to handle this
 

00:45:12.319 --> 00:45:13.349 align:start position:0%
has called dev enter to handle this
interrupt

00:45:13.349 --> 00:45:13.359 align:start position:0%
interrupt
 

00:45:13.359 --> 00:45:16.470 align:start position:0%
interrupt
um<00:45:13.599><c> i</c><00:45:13.680><c> want</c><00:45:13.839><c> to</c><00:45:14.640><c> type</c><00:45:14.960><c> finish</c><00:45:15.440><c> to</c><00:45:15.920><c> get</c><00:45:16.160><c> out</c><00:45:16.319><c> of</c>

00:45:16.470 --> 00:45:16.480 align:start position:0%
um i want to type finish to get out of
 

00:45:16.480 --> 00:45:18.950 align:start position:0%
um i want to type finish to get out of
dev<00:45:16.720><c> internet</c><00:45:17.119><c> back</c><00:45:17.280><c> into</c><00:45:17.520><c> user</c><00:45:17.839><c> trap</c>

00:45:18.950 --> 00:45:18.960 align:start position:0%
dev internet back into user trap
 

00:45:18.960 --> 00:45:22.630 align:start position:0%
dev internet back into user trap
um<00:45:20.240><c> because</c><00:45:20.560><c> in</c><00:45:20.640><c> fact</c><00:45:20.800><c> we</c><00:45:20.960><c> don't</c><00:45:21.680><c> that</c>

00:45:22.630 --> 00:45:22.640 align:start position:0%
um because in fact we don't that
 

00:45:22.640 --> 00:45:24.470 align:start position:0%
um because in fact we don't that
the<00:45:22.800><c> code</c><00:45:22.960><c> and</c><00:45:23.040><c> different</c><00:45:23.359><c> of</c><00:45:23.520><c> our</c><00:45:23.599><c> timer</c><00:45:24.079><c> is</c>

00:45:24.470 --> 00:45:24.480 align:start position:0%
the code and different of our timer is
 

00:45:24.480 --> 00:45:27.349 align:start position:0%
the code and different of our timer is
almost<00:45:24.800><c> nothing</c>

00:45:27.349 --> 00:45:27.359 align:start position:0%
 
 

00:45:27.359 --> 00:45:30.829 align:start position:0%
 
however<00:45:27.680><c> once</c><00:45:27.920><c> we're</c><00:45:28.079><c> back</c><00:45:28.400><c> at</c><00:45:28.800><c> um</c>

00:45:30.829 --> 00:45:30.839 align:start position:0%
however once we're back at um
 

00:45:30.839 --> 00:45:36.390 align:start position:0%
however once we're back at um
in<00:45:32.560><c> uh</c><00:45:33.680><c> user</c><00:45:34.079><c> trap</c>

00:45:36.390 --> 00:45:36.400 align:start position:0%
in uh user trap
 

00:45:36.400 --> 00:45:40.150 align:start position:0%
in uh user trap
we<00:45:36.560><c> can</c><00:45:36.720><c> see</c><00:45:37.040><c> that</c><00:45:37.920><c> from</c><00:45:38.720><c> this</c><00:45:38.880><c> line</c><00:45:39.119><c> here</c><00:45:39.359><c> that</c>

00:45:40.150 --> 00:45:40.160 align:start position:0%
we can see that from this line here that
 

00:45:40.160 --> 00:45:47.829 align:start position:0%
we can see that from this line here that
we<00:45:40.319><c> just</c><00:45:40.480><c> returned</c><00:45:40.800><c> from</c><00:45:40.960><c> dev</c><00:45:41.200><c> enter</c><00:45:44.839><c> um</c>

00:45:47.829 --> 00:45:47.839 align:start position:0%
we just returned from dev enter um
 

00:45:47.839 --> 00:45:51.589 align:start position:0%
we just returned from dev enter um
and<00:45:49.599><c> the</c><00:45:50.400><c> interesting</c><00:45:50.800><c> thing</c><00:45:51.040><c> about</c><00:45:51.280><c> this</c>

00:45:51.589 --> 00:45:51.599 align:start position:0%
and the interesting thing about this
 

00:45:51.599 --> 00:45:56.390 align:start position:0%
and the interesting thing about this
is<00:45:51.760><c> that</c><00:45:52.319><c> um</c><00:45:54.560><c> what</c><00:45:54.800><c> we're</c><00:45:54.960><c> about</c><00:45:55.280><c> to</c><00:45:55.440><c> do</c>

00:45:56.390 --> 00:45:56.400 align:start position:0%
is that um what we're about to do
 

00:45:56.400 --> 00:45:57.990 align:start position:0%
is that um what we're about to do
i<00:45:56.480><c> mean</c><00:45:56.720><c> looking</c><00:45:57.040><c> forward</c><00:45:57.280><c> we're</c><00:45:57.599><c> currently</c>

00:45:57.990 --> 00:45:58.000 align:start position:0%
i mean looking forward we're currently
 

00:45:58.000 --> 00:45:59.750 align:start position:0%
i mean looking forward we're currently
at<00:45:58.079><c> this</c><00:45:58.240><c> line</c><00:45:58.560><c> here</c><00:45:59.280><c> and</c>

00:45:59.750 --> 00:45:59.760 align:start position:0%
at this line here and
 

00:45:59.760 --> 00:46:02.230 align:start position:0%
at this line here and
we're<00:46:00.000><c> looking</c><00:46:00.319><c> forward</c><00:46:00.720><c> to</c><00:46:01.599><c> this</c><00:46:01.839><c> called</c><00:46:02.079><c> the</c>

00:46:02.230 --> 00:46:02.240 align:start position:0%
we're looking forward to this called the
 

00:46:02.240 --> 00:46:03.670 align:start position:0%
we're looking forward to this called the
yield

00:46:03.670 --> 00:46:03.680 align:start position:0%
yield
 

00:46:03.680 --> 00:46:06.550 align:start position:0%
yield
when<00:46:04.480><c> dividend</c><00:46:04.800><c> to</c><00:46:04.960><c> return</c><00:46:05.520><c> to</c><00:46:06.000><c> you</c><00:46:06.079><c> can</c><00:46:06.319><c> see</c>

00:46:06.550 --> 00:46:06.560 align:start position:0%
when dividend to return to you can see
 

00:46:06.560 --> 00:46:07.510 align:start position:0%
when dividend to return to you can see
from<00:46:06.720><c> this</c>

00:46:07.510 --> 00:46:07.520 align:start position:0%
from this
 

00:46:07.520 --> 00:46:09.829 align:start position:0%
from this
value<00:46:07.839><c> return</c><00:46:08.400><c> is</c><00:46:08.560><c> two</c><00:46:09.200><c> that</c><00:46:09.440><c> two</c><00:46:09.680><c> is</c>

00:46:09.829 --> 00:46:09.839 align:start position:0%
value return is two that two is
 

00:46:09.839 --> 00:46:11.270 align:start position:0%
value return is two that two is
basically<00:46:10.160><c> the</c><00:46:10.319><c> device</c><00:46:10.640><c> number</c>

00:46:11.270 --> 00:46:11.280 align:start position:0%
basically the device number
 

00:46:11.280 --> 00:46:14.230 align:start position:0%
basically the device number
and<00:46:11.359><c> we're</c><00:46:11.520><c> going</c><00:46:11.599><c> to</c><00:46:11.680><c> see</c><00:46:11.920><c> that</c><00:46:12.480><c> by</c><00:46:12.640><c> and</c><00:46:12.800><c> by</c>

00:46:14.230 --> 00:46:14.240 align:start position:0%
and we're going to see that by and by
 

00:46:14.240 --> 00:46:17.270 align:start position:0%
and we're going to see that by and by
because<00:46:14.560><c> which</c><00:46:14.880><c> devices</c><00:46:15.359><c> too</c>

00:46:17.270 --> 00:46:17.280 align:start position:0%
because which devices too
 

00:46:17.280 --> 00:46:19.030 align:start position:0%
because which devices too
user<00:46:17.520><c> perhaps</c><00:46:17.839><c> going</c><00:46:18.000><c> to</c><00:46:18.079><c> call</c><00:46:18.319><c> yield</c><00:46:18.800><c> which</c>

00:46:19.030 --> 00:46:19.040 align:start position:0%
user perhaps going to call yield which
 

00:46:19.040 --> 00:46:20.630 align:start position:0%
user perhaps going to call yield which
will<00:46:19.680><c> give</c><00:46:19.839><c> up</c><00:46:20.000><c> the</c><00:46:20.079><c> cpu</c>

00:46:20.630 --> 00:46:20.640 align:start position:0%
will give up the cpu
 

00:46:20.640 --> 00:46:22.710 align:start position:0%
will give up the cpu
and<00:46:20.720><c> allow</c><00:46:21.040><c> switch</c><00:46:21.359><c> another</c><00:46:21.599><c> process</c><00:46:22.560><c> so</c>

00:46:22.710 --> 00:46:22.720 align:start position:0%
and allow switch another process so
 

00:46:22.720 --> 00:46:23.910 align:start position:0%
and allow switch another process so
we'll<00:46:22.800><c> see</c><00:46:22.960><c> that</c><00:46:23.119><c> in</c><00:46:23.280><c> a</c><00:46:23.359><c> moment</c>

00:46:23.910 --> 00:46:23.920 align:start position:0%
we'll see that in a moment
 

00:46:23.920 --> 00:46:25.670 align:start position:0%
we'll see that in a moment
meantime<00:46:24.319><c> let's</c><00:46:24.800><c> look</c><00:46:24.960><c> at</c><00:46:25.119><c> what</c><00:46:25.359><c> was</c>

00:46:25.670 --> 00:46:25.680 align:start position:0%
meantime let's look at what was
 

00:46:25.680 --> 00:46:27.510 align:start position:0%
meantime let's look at what was
currently<00:46:26.240><c> executing</c><00:46:26.800><c> when</c><00:46:26.960><c> the</c><00:46:27.119><c> interrupt</c>

00:46:27.510 --> 00:46:27.520 align:start position:0%
currently executing when the interrupt
 

00:46:27.520 --> 00:46:28.390 align:start position:0%
currently executing when the interrupt
happened

00:46:28.390 --> 00:46:28.400 align:start position:0%
happened
 

00:46:28.400 --> 00:46:31.990 align:start position:0%
happened
so<00:46:28.560><c> i'm</c><00:46:28.640><c> going</c><00:46:28.800><c> to</c><00:46:28.880><c> print</c><00:46:29.200><c> p</c><00:46:31.200><c> the</c><00:46:31.359><c> variable</c>

00:46:31.990 --> 00:46:32.000 align:start position:0%
so i'm going to print p the variable
 

00:46:32.000 --> 00:46:34.630 align:start position:0%
so i'm going to print p the variable
p<00:46:32.240><c> holds</c><00:46:32.640><c> a</c><00:46:33.200><c> pointer</c><00:46:33.520><c> to</c><00:46:33.680><c> the</c><00:46:33.920><c> current</c><00:46:34.240><c> process</c>

00:46:34.630 --> 00:46:34.640 align:start position:0%
p holds a pointer to the current process
 

00:46:34.640 --> 00:46:35.349 align:start position:0%
p holds a pointer to the current process
is<00:46:34.880><c> struct</c>

00:46:35.349 --> 00:46:35.359 align:start position:0%
is struct
 

00:46:35.359 --> 00:46:38.790 align:start position:0%
is struct
proc<00:46:36.800><c> um</c>

00:46:38.790 --> 00:46:38.800 align:start position:0%
proc um
 

00:46:38.800 --> 00:46:40.230 align:start position:0%
proc um
okay<00:46:39.040><c> we</c><00:46:39.119><c> have</c><00:46:39.200><c> a</c><00:46:39.280><c> question</c><00:46:39.599><c> what</c><00:46:39.760><c> makes</c><00:46:40.000><c> each</c>

00:46:40.230 --> 00:46:40.240 align:start position:0%
okay we have a question what makes each
 

00:46:40.240 --> 00:46:42.150 align:start position:0%
okay we have a question what makes each
process's<00:46:40.800><c> kernel</c><00:46:41.200><c> thread</c>

00:46:42.150 --> 00:46:42.160 align:start position:0%
process's kernel thread
 

00:46:42.160 --> 00:46:45.589 align:start position:0%
process's kernel thread
different<00:46:43.359><c> every</c><00:46:43.839><c> process</c><00:46:45.119><c> has</c><00:46:45.359><c> a</c>

00:46:45.589 --> 00:46:45.599 align:start position:0%
different every process has a
 

00:46:45.599 --> 00:46:48.630 align:start position:0%
different every process has a
separate<00:46:46.160><c> kernel</c><00:46:46.640><c> thread</c><00:46:48.000><c> so</c><00:46:48.160><c> there's</c><00:46:48.319><c> really</c>

00:46:48.630 --> 00:46:48.640 align:start position:0%
separate kernel thread so there's really
 

00:46:48.640 --> 00:46:49.990 align:start position:0%
separate kernel thread so there's really
two<00:46:49.040><c> things</c><00:46:49.680><c> that</c>

00:46:49.990 --> 00:46:50.000 align:start position:0%
two things that
 

00:46:50.000 --> 00:46:52.150 align:start position:0%
two things that
differentiate<00:46:50.960><c> different</c><00:46:51.280><c> processes</c><00:46:51.839><c> kernel</c>

00:46:52.150 --> 00:46:52.160 align:start position:0%
differentiate different processes kernel
 

00:46:52.160 --> 00:46:53.270 align:start position:0%
differentiate different processes kernel
thread<00:46:52.480><c> because</c><00:46:52.640><c> more</c><00:46:52.800><c> than</c><00:46:52.880><c> one</c><00:46:53.040><c> could</c><00:46:53.200><c> be</c>

00:46:53.270 --> 00:46:53.280 align:start position:0%
thread because more than one could be
 

00:46:53.280 --> 00:46:54.710 align:start position:0%
thread because more than one could be
executing<00:46:53.920><c> on</c>

00:46:54.710 --> 00:46:54.720 align:start position:0%
executing on
 

00:46:54.720 --> 00:46:58.950 align:start position:0%
executing on
different<00:46:55.040><c> cores</c><00:46:57.680><c> one</c><00:46:57.920><c> is</c><00:46:58.079><c> indeed</c><00:46:58.400><c> that</c><00:46:58.640><c> every</c>

00:46:58.950 --> 00:46:58.960 align:start position:0%
different cores one is indeed that every
 

00:46:58.960 --> 00:46:59.750 align:start position:0%
different cores one is indeed that every
process

00:46:59.750 --> 00:46:59.760 align:start position:0%
process
 

00:46:59.760 --> 00:47:02.150 align:start position:0%
process
has<00:47:00.000><c> a</c><00:47:00.079><c> separate</c><00:47:00.400><c> kernel</c><00:47:01.440><c> stack</c><00:47:01.839><c> and</c><00:47:01.920><c> that's</c>

00:47:02.150 --> 00:47:02.160 align:start position:0%
has a separate kernel stack and that's
 

00:47:02.160 --> 00:47:03.829 align:start position:0%
has a separate kernel stack and that's
what's<00:47:02.400><c> pointed</c><00:47:02.720><c> to</c><00:47:02.880><c> by</c><00:47:03.119><c> that</c>

00:47:03.829 --> 00:47:03.839 align:start position:0%
what's pointed to by that
 

00:47:03.839 --> 00:47:06.790 align:start position:0%
what's pointed to by that
k<00:47:04.079><c> stack</c><00:47:04.560><c> element</c><00:47:04.960><c> of</c><00:47:05.119><c> struck</c><00:47:05.440><c> proc</c><00:47:06.480><c> and</c><00:47:06.640><c> the</c>

00:47:06.790 --> 00:47:06.800 align:start position:0%
k stack element of struck proc and the
 

00:47:06.800 --> 00:47:07.109 align:start position:0%
k stack element of struck proc and the
other

00:47:07.109 --> 00:47:07.119 align:start position:0%
other
 

00:47:07.119 --> 00:47:13.430 align:start position:0%
other
is<00:47:08.839><c> that</c>

00:47:13.430 --> 00:47:13.440 align:start position:0%
 
 

00:47:13.440 --> 00:47:16.470 align:start position:0%
 
uh<00:47:14.240><c> early</c><00:47:14.960><c> in</c>

00:47:16.470 --> 00:47:16.480 align:start position:0%
uh early in
 

00:47:16.480 --> 00:47:18.150 align:start position:0%
uh early in
we're<00:47:16.640><c> in</c><00:47:16.800><c> user</c><00:47:17.119><c> trap</c><00:47:17.440><c> which</c><00:47:17.599><c> is</c><00:47:17.760><c> you</c><00:47:17.839><c> know</c><00:47:18.000><c> the</c>

00:47:18.150 --> 00:47:18.160 align:start position:0%
we're in user trap which is you know the
 

00:47:18.160 --> 00:47:20.549 align:start position:0%
we're in user trap which is you know the
c<00:47:18.400><c> code</c><00:47:18.640><c> that's</c><00:47:18.880><c> called</c>

00:47:20.549 --> 00:47:20.559 align:start position:0%
c code that's called
 

00:47:20.559 --> 00:47:25.589 align:start position:0%
c code that's called
by<00:47:20.800><c> trampoline</c><00:47:21.280><c> when</c><00:47:21.520><c> an</c><00:47:21.760><c> interrupt</c><00:47:22.160><c> occurs</c>

00:47:25.589 --> 00:47:25.599 align:start position:0%
 
 

00:47:25.599 --> 00:47:28.630 align:start position:0%
 
we<00:47:25.760><c> can</c><00:47:26.000><c> tell</c><00:47:26.400><c> by</c><00:47:26.559><c> this</c><00:47:26.720><c> call</c><00:47:26.960><c> that</c><00:47:27.200><c> my</c><00:47:27.520><c> any</c>

00:47:28.630 --> 00:47:28.640 align:start position:0%
we can tell by this call that my any
 

00:47:28.640 --> 00:47:30.790 align:start position:0%
we can tell by this call that my any
any<00:47:28.880><c> kernel</c><00:47:29.200><c> code</c><00:47:29.520><c> can</c><00:47:29.920><c> tell</c><00:47:30.240><c> by</c><00:47:30.400><c> calling</c>

00:47:30.790 --> 00:47:30.800 align:start position:0%
any kernel code can tell by calling
 

00:47:30.800 --> 00:47:31.910 align:start position:0%
any kernel code can tell by calling
myproc

00:47:31.910 --> 00:47:31.920 align:start position:0%
myproc
 

00:47:31.920 --> 00:47:34.630 align:start position:0%
myproc
what<00:47:32.319><c> the</c><00:47:33.119><c> process</c><00:47:33.520><c> is</c><00:47:33.680><c> that's</c><00:47:33.920><c> running</c><00:47:34.400><c> on</c>

00:47:34.630 --> 00:47:34.640 align:start position:0%
what the process is that's running on
 

00:47:34.640 --> 00:47:36.549 align:start position:0%
what the process is that's running on
the<00:47:34.800><c> current</c><00:47:35.200><c> cpu</c>

00:47:36.549 --> 00:47:36.559 align:start position:0%
the current cpu
 

00:47:36.559 --> 00:47:37.510 align:start position:0%
the current cpu
and<00:47:36.720><c> that's</c><00:47:36.880><c> another</c><00:47:37.119><c> thing</c><00:47:37.280><c> that</c>

00:47:37.510 --> 00:47:37.520 align:start position:0%
and that's another thing that
 

00:47:37.520 --> 00:47:40.390 align:start position:0%
and that's another thing that
differentiates<00:47:38.559><c> um</c>

00:47:40.390 --> 00:47:40.400 align:start position:0%
differentiates um
 

00:47:40.400 --> 00:47:42.950 align:start position:0%
differentiates um
that<00:47:40.559><c> allows</c><00:47:41.040><c> each</c><00:47:41.359><c> cr</c><00:47:42.160><c> that</c><00:47:42.319><c> allows</c><00:47:42.720><c> kernel</c>

00:47:42.950 --> 00:47:42.960 align:start position:0%
that allows each cr that allows kernel
 

00:47:42.960 --> 00:47:45.190 align:start position:0%
that allows each cr that allows kernel
code<00:47:43.200><c> to</c><00:47:43.280><c> tell</c><00:47:43.599><c> what</c><00:47:43.920><c> process</c><00:47:44.480><c> it's</c><00:47:44.720><c> part</c><00:47:44.960><c> of</c>

00:47:45.190 --> 00:47:45.200 align:start position:0%
code to tell what process it's part of
 

00:47:45.200 --> 00:47:45.750 align:start position:0%
code to tell what process it's part of
that<00:47:45.440><c> is</c>

00:47:45.750 --> 00:47:45.760 align:start position:0%
that is
 

00:47:45.760 --> 00:47:47.270 align:start position:0%
that is
which<00:47:46.079><c> processes</c><00:47:46.559><c> kernel</c><00:47:46.880><c> thread</c><00:47:47.200><c> is</c>

00:47:47.270 --> 00:47:47.280 align:start position:0%
which processes kernel thread is
 

00:47:47.280 --> 00:47:49.030 align:start position:0%
which processes kernel thread is
executing<00:47:48.000><c> and</c><00:47:48.160><c> what</c><00:47:48.319><c> myproc</c><00:47:48.720><c> does</c><00:47:48.960><c> is</c>

00:47:49.030 --> 00:47:49.040 align:start position:0%
executing and what myproc does is
 

00:47:49.040 --> 00:47:50.870 align:start position:0%
executing and what myproc does is
basically<00:47:49.359><c> use</c><00:47:49.599><c> the</c><00:47:49.680><c> tp</c><00:47:50.160><c> register</c><00:47:50.559><c> which</c><00:47:50.720><c> you</c>

00:47:50.870 --> 00:47:50.880 align:start position:0%
basically use the tp register which you
 

00:47:50.880 --> 00:47:53.030 align:start position:0%
basically use the tp register which you
may<00:47:51.040><c> recall</c>

00:47:53.030 --> 00:47:53.040 align:start position:0%
may recall
 

00:47:53.040 --> 00:47:56.630 align:start position:0%
may recall
is<00:47:53.200><c> set</c><00:47:53.440><c> up</c><00:47:53.520><c> to</c><00:47:53.680><c> contain</c><00:47:54.319><c> the</c><00:47:54.800><c> current</c><00:47:55.440><c> core's</c>

00:47:56.630 --> 00:47:56.640 align:start position:0%
is set up to contain the current core's
 

00:47:56.640 --> 00:47:59.109 align:start position:0%
is set up to contain the current core's
heart<00:47:56.960><c> id</c><00:47:57.359><c> or</c><00:47:57.520><c> core</c><00:47:57.839><c> number</c><00:47:58.319><c> it</c><00:47:58.480><c> uses</c><00:47:58.720><c> that</c><00:47:58.880><c> to</c>

00:47:59.109 --> 00:47:59.119 align:start position:0%
heart id or core number it uses that to
 

00:47:59.119 --> 00:48:01.589 align:start position:0%
heart id or core number it uses that to
index<00:47:59.440><c> into</c><00:47:59.599><c> an</c><00:47:59.760><c> array</c><00:48:00.240><c> of</c><00:48:00.400><c> structures</c><00:48:00.960><c> that</c>

00:48:01.589 --> 00:48:01.599 align:start position:0%
index into an array of structures that
 

00:48:01.599 --> 00:48:03.670 align:start position:0%
index into an array of structures that
say<00:48:02.000><c> for</c><00:48:02.160><c> each</c><00:48:02.480><c> core</c><00:48:02.880><c> that</c><00:48:03.040><c> the</c><00:48:03.200><c> scheduler</c>

00:48:03.670 --> 00:48:03.680 align:start position:0%
say for each core that the scheduler
 

00:48:03.680 --> 00:48:06.470 align:start position:0%
say for each core that the scheduler
sets<00:48:04.400><c> whenever</c><00:48:04.720><c> it</c><00:48:04.800><c> switches</c><00:48:05.280><c> processes</c><00:48:05.760><c> to</c>

00:48:06.470 --> 00:48:06.480 align:start position:0%
sets whenever it switches processes to
 

00:48:06.480 --> 00:48:08.309 align:start position:0%
sets whenever it switches processes to
indicate<00:48:06.800><c> for</c><00:48:06.960><c> each</c><00:48:07.200><c> core</c><00:48:07.440><c> which</c><00:48:07.760><c> process</c><00:48:08.160><c> is</c>

00:48:08.309 --> 00:48:08.319 align:start position:0%
indicate for each core which process is
 

00:48:08.319 --> 00:48:11.109 align:start position:0%
indicate for each core which process is
running<00:48:08.640><c> on</c><00:48:08.800><c> that</c><00:48:09.040><c> core</c>

00:48:11.109 --> 00:48:11.119 align:start position:0%
running on that core
 

00:48:11.119 --> 00:48:12.630 align:start position:0%
running on that core
and<00:48:11.359><c> so</c><00:48:11.520><c> that's</c><00:48:11.760><c> how</c><00:48:12.079><c> different</c><00:48:12.319><c> kernel</c>

00:48:12.630 --> 00:48:12.640 align:start position:0%
and so that's how different kernel
 

00:48:12.640 --> 00:48:15.670 align:start position:0%
and so that's how different kernel
threads<00:48:12.880><c> are</c><00:48:13.040><c> differentiated</c>

00:48:15.670 --> 00:48:15.680 align:start position:0%
threads are differentiated
 

00:48:15.680 --> 00:48:18.870 align:start position:0%
threads are differentiated
okay<00:48:15.920><c> so</c><00:48:16.000><c> i</c><00:48:16.079><c> was</c><00:48:16.240><c> going</c><00:48:16.319><c> to</c><00:48:16.400><c> use</c><00:48:16.559><c> that</c><00:48:16.720><c> p</c><00:48:16.960><c> value</c>

00:48:18.870 --> 00:48:18.880 align:start position:0%
okay so i was going to use that p value
 

00:48:18.880 --> 00:48:20.549 align:start position:0%
okay so i was going to use that p value
the<00:48:19.119><c> name</c><00:48:19.520><c> and</c><00:48:19.599><c> that</c><00:48:19.760><c> p-value</c><00:48:20.240><c> to</c><00:48:20.319><c> figure</c><00:48:20.480><c> out</c>

00:48:20.549 --> 00:48:20.559 align:start position:0%
the name and that p-value to figure out
 

00:48:20.559 --> 00:48:21.910 align:start position:0%
the name and that p-value to figure out
what<00:48:20.880><c> process</c><00:48:21.280><c> is</c><00:48:21.440><c> running</c>

00:48:21.910 --> 00:48:21.920 align:start position:0%
what process is running
 

00:48:21.920 --> 00:48:23.910 align:start position:0%
what process is running
xv6<00:48:22.559><c> remembers</c><00:48:22.960><c> the</c><00:48:23.040><c> name</c><00:48:23.200><c> it's</c><00:48:23.359><c> that</c><00:48:23.599><c> spin</c>

00:48:23.910 --> 00:48:23.920 align:start position:0%
xv6 remembers the name it's that spin
 

00:48:23.920 --> 00:48:25.190 align:start position:0%
xv6 remembers the name it's that spin
process<00:48:24.640><c> just</c>

00:48:25.190 --> 00:48:25.200 align:start position:0%
process just
 

00:48:25.200 --> 00:48:28.150 align:start position:0%
process just
exactly<00:48:25.680><c> as</c><00:48:25.920><c> expected</c><00:48:27.520><c> there</c><00:48:27.760><c> were</c><00:48:27.920><c> two</c><00:48:28.079><c> of</c>

00:48:28.150 --> 00:48:28.160 align:start position:0%
exactly as expected there were two of
 

00:48:28.160 --> 00:48:29.030 align:start position:0%
exactly as expected there were two of
them

00:48:29.030 --> 00:48:29.040 align:start position:0%
them
 

00:48:29.040 --> 00:48:32.829 align:start position:0%
them
i<00:48:29.119><c> think</c><00:48:29.359><c> with</c><00:48:29.599><c> process</c><00:48:30.079><c> ids</c><00:48:30.559><c> three</c><00:48:30.800><c> and</c><00:48:30.960><c> four</c>

00:48:32.829 --> 00:48:32.839 align:start position:0%
i think with process ids three and four
 

00:48:32.839 --> 00:48:35.990 align:start position:0%
i think with process ids three and four
oops<00:48:34.880><c> we're</c><00:48:35.040><c> currently</c><00:48:35.359><c> executing</c><00:48:35.760><c> again</c>

00:48:35.990 --> 00:48:36.000 align:start position:0%
oops we're currently executing again
 

00:48:36.000 --> 00:48:37.349 align:start position:0%
oops we're currently executing again
process<00:48:36.400><c> id3</c>

00:48:37.349 --> 00:48:37.359 align:start position:0%
process id3
 

00:48:37.359 --> 00:48:40.069 align:start position:0%
process id3
so<00:48:37.520><c> after</c><00:48:37.760><c> the</c><00:48:37.920><c> switch</c><00:48:38.160><c> we'd</c><00:48:38.400><c> expect</c><00:48:38.880><c> to</c><00:48:39.040><c> be</c><00:48:39.280><c> in</c>

00:48:40.069 --> 00:48:40.079 align:start position:0%
so after the switch we'd expect to be in
 

00:48:40.079 --> 00:48:41.349 align:start position:0%
so after the switch we'd expect to be in
process<00:48:40.480><c> id</c><00:48:40.880><c> for</c>

00:48:41.349 --> 00:48:41.359 align:start position:0%
process id for
 

00:48:41.359 --> 00:48:44.950 align:start position:0%
process id for
the<00:48:41.520><c> other</c><00:48:41.760><c> spin</c><00:48:42.160><c> process</c><00:48:44.240><c> how</c><00:48:44.480><c> can</c><00:48:44.640><c> we</c><00:48:44.800><c> can</c>

00:48:44.950 --> 00:48:44.960 align:start position:0%
the other spin process how can we can
 

00:48:44.960 --> 00:48:46.230 align:start position:0%
the other spin process how can we can
look<00:48:45.119><c> at</c><00:48:45.200><c> the</c><00:48:45.520><c> saved</c>

00:48:46.230 --> 00:48:46.240 align:start position:0%
look at the saved
 

00:48:46.240 --> 00:48:54.549 align:start position:0%
look at the saved
user<00:48:46.720><c> registers</c><00:48:47.359><c> in</c><00:48:47.440><c> the</c><00:48:47.599><c> trap</c><00:48:47.920><c> frame</c>

00:48:54.549 --> 00:48:54.559 align:start position:0%
 
 

00:48:54.559 --> 00:48:57.670 align:start position:0%
 
and<00:48:54.640><c> these</c><00:48:54.880><c> are</c><00:48:54.960><c> just</c><00:48:55.119><c> the</c><00:48:55.200><c> 32</c><00:48:55.760><c> registers</c><00:48:56.880><c> that</c>

00:48:57.670 --> 00:48:57.680 align:start position:0%
and these are just the 32 registers that
 

00:48:57.680 --> 00:49:01.030 align:start position:0%
and these are just the 32 registers that
the<00:48:57.920><c> trampoline</c><00:48:58.720><c> code</c><00:48:59.520><c> saves</c><00:48:59.920><c> away</c><00:49:00.559><c> to</c><00:49:00.720><c> save</c>

00:49:01.030 --> 00:49:01.040 align:start position:0%
the trampoline code saves away to save
 

00:49:01.040 --> 00:49:02.150 align:start position:0%
the trampoline code saves away to save
the<00:49:01.119><c> user</c><00:49:01.440><c> state</c>

00:49:02.150 --> 00:49:02.160 align:start position:0%
the user state
 

00:49:02.160 --> 00:49:05.430 align:start position:0%
the user state
there's<00:49:02.480><c> the</c><00:49:02.640><c> user</c><00:49:04.240><c> ra</c><00:49:04.720><c> return</c><00:49:05.040><c> address</c>

00:49:05.430 --> 00:49:05.440 align:start position:0%
there's the user ra return address
 

00:49:05.440 --> 00:49:08.470 align:start position:0%
there's the user ra return address
register<00:49:05.839><c> user</c><00:49:06.079><c> stack</c><00:49:06.480><c> pointer</c>

00:49:08.470 --> 00:49:08.480 align:start position:0%
register user stack pointer
 

00:49:08.480 --> 00:49:12.230 align:start position:0%
register user stack pointer
user<00:49:08.800><c> program</c><00:49:09.119><c> counter</c><00:49:09.520><c> at</c><00:49:10.079><c> hex</c><00:49:10.400><c> 62.</c>

00:49:12.230 --> 00:49:12.240 align:start position:0%
user program counter at hex 62.
 

00:49:12.240 --> 00:49:14.150 align:start position:0%
user program counter at hex 62.
these<00:49:12.400><c> are</c><00:49:12.559><c> all</c><00:49:12.720><c> familiar</c><00:49:13.119><c> things</c><00:49:13.440><c> from</c><00:49:14.000><c> when</c>

00:49:14.150 --> 00:49:14.160 align:start position:0%
these are all familiar things from when
 

00:49:14.160 --> 00:49:15.750 align:start position:0%
these are all familiar things from when
we<00:49:14.240><c> looked</c><00:49:14.559><c> at</c>

00:49:15.750 --> 00:49:15.760 align:start position:0%
we looked at
 

00:49:15.760 --> 00:49:18.470 align:start position:0%
we looked at
traps<00:49:17.200><c> and</c><00:49:17.520><c> you</c><00:49:17.680><c> know</c><00:49:17.760><c> maybe</c><00:49:18.000><c> of</c><00:49:18.160><c> the</c><00:49:18.240><c> most</c>

00:49:18.470 --> 00:49:18.480 align:start position:0%
traps and you know maybe of the most
 

00:49:18.480 --> 00:49:19.030 align:start position:0%
traps and you know maybe of the most
interest

00:49:19.030 --> 00:49:19.040 align:start position:0%
interest
 

00:49:19.040 --> 00:49:23.190 align:start position:0%
interest
is<00:49:19.280><c> that</c>

00:49:23.190 --> 00:49:23.200 align:start position:0%
 
 

00:49:23.200 --> 00:49:25.349 align:start position:0%
 
the<00:49:23.359><c> trap</c><00:49:23.599><c> frame</c><00:49:23.920><c> saves</c><00:49:24.240><c> the</c><00:49:24.400><c> user</c><00:49:24.960><c> program</c>

00:49:25.349 --> 00:49:25.359 align:start position:0%
the trap frame saves the user program
 

00:49:25.359 --> 00:49:27.990 align:start position:0%
the trap frame saves the user program
counter<00:49:25.680><c> it's</c><00:49:25.839><c> at</c><00:49:26.000><c> value</c><00:49:26.319><c> 62</c>

00:49:27.990 --> 00:49:28.000 align:start position:0%
counter it's at value 62
 

00:49:28.000 --> 00:49:31.589 align:start position:0%
counter it's at value 62
if<00:49:28.160><c> we</c><00:49:28.839><c> cared</c>

00:49:31.589 --> 00:49:31.599 align:start position:0%
if we cared
 

00:49:31.599 --> 00:49:34.390 align:start position:0%
if we cared
we<00:49:31.760><c> can</c><00:49:31.920><c> look</c><00:49:32.240><c> in</c><00:49:33.119><c> the</c><00:49:33.280><c> assembly</c><00:49:33.839><c> code</c><00:49:34.240><c> for</c>

00:49:34.390 --> 00:49:34.400 align:start position:0%
we can look in the assembly code for
 

00:49:34.400 --> 00:49:37.829 align:start position:0%
we can look in the assembly code for
spin.c

00:49:37.829 --> 00:49:37.839 align:start position:0%
 
 

00:49:37.839 --> 00:49:41.109 align:start position:0%
 
just<00:49:38.079><c> spin.asm</c><00:49:38.880><c> and</c><00:49:39.040><c> look</c><00:49:39.119><c> for</c><00:49:39.280><c> 62.</c>

00:49:41.109 --> 00:49:41.119 align:start position:0%
just spin.asm and look for 62.
 

00:49:41.119 --> 00:49:43.829 align:start position:0%
just spin.asm and look for 62.
now<00:49:41.280><c> we</c><00:49:41.440><c> can</c><00:49:41.599><c> see</c><00:49:41.760><c> that</c><00:49:42.319><c> oh</c><00:49:42.640><c> the</c><00:49:43.359><c> interrupt</c>

00:49:43.829 --> 00:49:43.839 align:start position:0%
now we can see that oh the interrupt
 

00:49:43.839 --> 00:49:45.270 align:start position:0%
now we can see that oh the interrupt
time<00:49:44.000><c> or</c><00:49:44.079><c> an</c><00:49:44.160><c> interrupt</c><00:49:44.720><c> occurred</c><00:49:45.040><c> during</c>

00:49:45.270 --> 00:49:45.280 align:start position:0%
time or an interrupt occurred during
 

00:49:45.280 --> 00:49:45.910 align:start position:0%
time or an interrupt occurred during
this<00:49:45.520><c> ad</c>

00:49:45.910 --> 00:49:45.920 align:start position:0%
this ad
 

00:49:45.920 --> 00:49:49.109 align:start position:0%
this ad
instruction<00:49:47.119><c> in</c><00:49:47.280><c> that</c><00:49:48.160><c> infinite</c><00:49:48.640><c> loop</c>

00:49:49.109 --> 00:49:49.119 align:start position:0%
instruction in that infinite loop
 

00:49:49.119 --> 00:49:55.510 align:start position:0%
instruction in that infinite loop
in<00:49:49.920><c> spin</c><00:49:50.559><c> so</c><00:49:50.960><c> it's</c><00:49:51.040><c> not</c><00:49:51.200><c> too</c><00:49:51.359><c> surprising</c>

00:49:55.510 --> 00:49:55.520 align:start position:0%
 
 

00:49:55.520 --> 00:49:58.950 align:start position:0%
 
okay<00:49:55.839><c> so</c><00:49:56.079><c> back</c><00:49:56.839><c> to</c>

00:49:58.950 --> 00:49:58.960 align:start position:0%
okay so back to
 

00:49:58.960 --> 00:50:00.870 align:start position:0%
okay so back to
the<00:49:59.119><c> trap</c><00:49:59.520><c> code</c><00:50:00.240><c> they've</c><00:50:00.480><c> entered</c><00:50:00.640><c> just</c>

00:50:00.870 --> 00:50:00.880 align:start position:0%
the trap code they've entered just
 

00:50:00.880 --> 00:50:03.109 align:start position:0%
the trap code they've entered just
returned<00:50:01.760><c> i'm</c><00:50:02.000><c> going</c><00:50:02.160><c> to</c><00:50:02.240><c> type</c>

00:50:03.109 --> 00:50:03.119 align:start position:0%
returned i'm going to type
 

00:50:03.119 --> 00:50:09.030 align:start position:0%
returned i'm going to type
step<00:50:03.440><c> a</c><00:50:03.599><c> few</c><00:50:03.760><c> times</c><00:50:04.400><c> to</c><00:50:05.520><c> get</c><00:50:05.760><c> us</c><00:50:06.000><c> to</c><00:50:06.160><c> the</c>

00:50:09.030 --> 00:50:09.040 align:start position:0%
 
 

00:50:09.040 --> 00:50:11.030 align:start position:0%
 
to<00:50:09.359><c> just</c><00:50:09.599><c> being</c><00:50:09.760><c> about</c><00:50:10.079><c> to</c><00:50:10.400><c> execute</c><00:50:10.800><c> this</c>

00:50:11.030 --> 00:50:11.040 align:start position:0%
to just being about to execute this
 

00:50:11.040 --> 00:50:12.309 align:start position:0%
to just being about to execute this
yield

00:50:12.309 --> 00:50:12.319 align:start position:0%
yield
 

00:50:12.319 --> 00:50:13.750 align:start position:0%
yield
and<00:50:12.480><c> yield</c><00:50:12.800><c> is</c><00:50:12.880><c> sort</c><00:50:13.040><c> of</c><00:50:13.119><c> the</c><00:50:13.200><c> first</c><00:50:13.440><c> step</c><00:50:13.680><c> in</c>

00:50:13.750 --> 00:50:13.760 align:start position:0%
and yield is sort of the first step in
 

00:50:13.760 --> 00:50:15.990 align:start position:0%
and yield is sort of the first step in
the<00:50:14.000><c> process</c><00:50:14.400><c> of</c><00:50:15.040><c> giving</c><00:50:15.359><c> up</c><00:50:15.440><c> the</c><00:50:15.599><c> cpu</c>

00:50:15.990 --> 00:50:16.000 align:start position:0%
the process of giving up the cpu
 

00:50:16.000 --> 00:50:17.430 align:start position:0%
the process of giving up the cpu
switching<00:50:16.319><c> to</c><00:50:16.480><c> the</c><00:50:16.559><c> scheduler</c><00:50:17.040><c> letting</c><00:50:17.280><c> the</c>

00:50:17.430 --> 00:50:17.440 align:start position:0%
switching to the scheduler letting the
 

00:50:17.440 --> 00:50:17.990 align:start position:0%
switching to the scheduler letting the
scheduler

00:50:17.990 --> 00:50:18.000 align:start position:0%
scheduler
 

00:50:18.000 --> 00:50:20.230 align:start position:0%
scheduler
choose<00:50:18.240><c> another</c><00:50:19.119><c> kernel</c><00:50:19.359><c> thread</c><00:50:19.680><c> and</c><00:50:19.839><c> process</c>

00:50:20.230 --> 00:50:20.240 align:start position:0%
choose another kernel thread and process
 

00:50:20.240 --> 00:50:24.309 align:start position:0%
choose another kernel thread and process
to<00:50:20.400><c> run</c>

00:50:24.309 --> 00:50:24.319 align:start position:0%
 
 

00:50:24.319 --> 00:50:26.230 align:start position:0%
 
all<00:50:24.480><c> right</c><00:50:24.640><c> so</c><00:50:24.800><c> let's</c><00:50:25.440><c> actually</c><00:50:25.760><c> step</c><00:50:26.000><c> into</c>

00:50:26.230 --> 00:50:26.240 align:start position:0%
all right so let's actually step into
 

00:50:26.240 --> 00:50:27.349 align:start position:0%
all right so let's actually step into
yield

00:50:27.349 --> 00:50:27.359 align:start position:0%
yield
 

00:50:27.359 --> 00:50:30.309 align:start position:0%
yield
now<00:50:27.520><c> we're</c><00:50:27.680><c> in</c><00:50:27.760><c> yield</c><00:50:28.000><c> yields</c><00:50:28.800><c> um</c><00:50:29.920><c> if</c><00:50:30.160><c> you</c><00:50:30.240><c> have</c>

00:50:30.309 --> 00:50:30.319 align:start position:0%
now we're in yield yields um if you have
 

00:50:30.319 --> 00:50:31.510 align:start position:0%
now we're in yield yields um if you have
a<00:50:30.480><c> question</c>

00:50:31.510 --> 00:50:31.520 align:start position:0%
a question
 

00:50:31.520 --> 00:50:38.829 align:start position:0%
a question
no

00:50:38.829 --> 00:50:38.839 align:start position:0%
 
 

00:50:38.839 --> 00:50:43.589 align:start position:0%
 
oops

00:50:43.589 --> 00:50:43.599 align:start position:0%
 
 

00:50:43.599 --> 00:50:47.510 align:start position:0%
 
okay<00:50:43.839><c> we're</c><00:50:44.000><c> in</c><00:50:44.160><c> yield</c><00:50:46.079><c> um</c>

00:50:47.510 --> 00:50:47.520 align:start position:0%
okay we're in yield um
 

00:50:47.520 --> 00:50:51.109 align:start position:0%
okay we're in yield um
yield<00:50:47.760><c> does</c><00:50:48.000><c> just</c><00:50:48.160><c> a</c><00:50:48.240><c> couple</c><00:50:48.400><c> of</c><00:50:48.480><c> things</c><00:50:49.119><c> it</c><00:50:49.839><c> uh</c>

00:50:51.109 --> 00:50:51.119 align:start position:0%
yield does just a couple of things it uh
 

00:50:51.119 --> 00:50:54.390 align:start position:0%
yield does just a couple of things it uh
acquires<00:50:51.920><c> the</c><00:50:52.160><c> lock</c><00:50:52.880><c> for</c><00:50:53.040><c> this</c><00:50:53.359><c> process</c>

00:50:54.390 --> 00:50:54.400 align:start position:0%
acquires the lock for this process
 

00:50:54.400 --> 00:50:55.670 align:start position:0%
acquires the lock for this process
because<00:50:54.640><c> it's</c><00:50:54.880><c> about</c><00:50:55.040><c> to</c><00:50:55.119><c> make</c><00:50:55.280><c> a</c><00:50:55.359><c> bunch</c><00:50:55.599><c> of</c>

00:50:55.670 --> 00:50:55.680 align:start position:0%
because it's about to make a bunch of
 

00:50:55.680 --> 00:50:57.430 align:start position:0%
because it's about to make a bunch of
changes<00:50:56.079><c> to</c><00:50:56.240><c> this</c><00:50:56.480><c> process</c><00:50:57.119><c> and</c>

00:50:57.430 --> 00:50:57.440 align:start position:0%
changes to this process and
 

00:50:57.440 --> 00:51:00.390 align:start position:0%
changes to this process and
it<00:50:57.520><c> doesn't</c><00:50:57.760><c> want</c><00:50:58.000><c> any</c><00:50:58.319><c> other</c><00:50:59.119><c> and</c><00:50:59.599><c> in</c><00:50:59.760><c> fact</c>

00:51:00.390 --> 00:51:00.400 align:start position:0%
it doesn't want any other and in fact
 

00:51:00.400 --> 00:51:01.910 align:start position:0%
it doesn't want any other and in fact
until<00:51:00.640><c> it</c><00:51:00.720><c> gives</c><00:51:00.960><c> up</c><00:51:01.119><c> the</c><00:51:01.200><c> lock</c><00:51:01.440><c> the</c><00:51:01.599><c> state</c><00:51:01.839><c> of</c>

00:51:01.910 --> 00:51:01.920 align:start position:0%
until it gives up the lock the state of
 

00:51:01.920 --> 00:51:03.510 align:start position:0%
until it gives up the lock the state of
this<00:51:02.160><c> process</c><00:51:02.480><c> will</c><00:51:02.640><c> be</c><00:51:02.880><c> sort</c><00:51:03.040><c> of</c>

00:51:03.510 --> 00:51:03.520 align:start position:0%
this process will be sort of
 

00:51:03.520 --> 00:51:06.150 align:start position:0%
this process will be sort of
inconsistent<00:51:04.559><c> um</c><00:51:04.880><c> like</c><00:51:05.200><c> for</c><00:51:05.359><c> example</c><00:51:05.760><c> it's</c>

00:51:06.150 --> 00:51:06.160 align:start position:0%
inconsistent um like for example it's
 

00:51:06.160 --> 00:51:08.309 align:start position:0%
inconsistent um like for example it's
about<00:51:06.559><c> yield</c><00:51:06.880><c> is</c><00:51:07.040><c> about</c><00:51:07.440><c> to</c><00:51:07.599><c> change</c><00:51:07.839><c> the</c><00:51:08.000><c> state</c>

00:51:08.309 --> 00:51:08.319 align:start position:0%
about yield is about to change the state
 

00:51:08.319 --> 00:51:10.470 align:start position:0%
about yield is about to change the state
of<00:51:08.400><c> the</c><00:51:08.480><c> process</c><00:51:08.880><c> to</c><00:51:09.040><c> runnable</c><00:51:09.599><c> which</c>

00:51:10.470 --> 00:51:10.480 align:start position:0%
of the process to runnable which
 

00:51:10.480 --> 00:51:12.470 align:start position:0%
of the process to runnable which
would<00:51:10.720><c> you</c><00:51:10.880><c> know</c><00:51:11.040><c> indicates</c><00:51:11.599><c> that</c><00:51:12.240><c> the</c>

00:51:12.470 --> 00:51:12.480 align:start position:0%
would you know indicates that the
 

00:51:12.480 --> 00:51:15.030 align:start position:0%
would you know indicates that the
process<00:51:12.880><c> is</c><00:51:12.960><c> not</c><00:51:13.200><c> running</c><00:51:13.599><c> but</c><00:51:13.760><c> would</c><00:51:13.920><c> like</c><00:51:14.240><c> to</c>

00:51:15.030 --> 00:51:15.040 align:start position:0%
process is not running but would like to
 

00:51:15.040 --> 00:51:17.829 align:start position:0%
process is not running but would like to
but<00:51:15.200><c> this</c><00:51:15.440><c> process</c><00:51:15.839><c> is</c><00:51:16.000><c> running</c><00:51:17.119><c> right</c><00:51:17.599><c> i</c><00:51:17.680><c> mean</c>

00:51:17.829 --> 00:51:17.839 align:start position:0%
but this process is running right i mean
 

00:51:17.839 --> 00:51:19.109 align:start position:0%
but this process is running right i mean
we're<00:51:18.000><c> running</c><00:51:18.240><c> the</c><00:51:18.319><c> process</c><00:51:18.720><c> right</c><00:51:18.880><c> now</c>

00:51:19.109 --> 00:51:19.119 align:start position:0%
we're running the process right now
 

00:51:19.119 --> 00:51:20.549 align:start position:0%
we're running the process right now
that's<00:51:19.359><c> what's</c><00:51:19.599><c> executing</c><00:51:20.079><c> is</c><00:51:20.240><c> the</c><00:51:20.319><c> kernel</c>

00:51:20.549 --> 00:51:20.559 align:start position:0%
that's what's executing is the kernel
 

00:51:20.559 --> 00:51:21.990 align:start position:0%
that's what's executing is the kernel
threat<00:51:20.880><c> for</c><00:51:21.040><c> this</c><00:51:21.200><c> process</c>

00:51:21.990 --> 00:51:22.000 align:start position:0%
threat for this process
 

00:51:22.000 --> 00:51:23.829 align:start position:0%
threat for this process
and<00:51:22.160><c> so</c><00:51:22.319><c> the</c><00:51:22.960><c> one</c><00:51:23.119><c> of</c><00:51:23.200><c> the</c><00:51:23.280><c> many</c><00:51:23.520><c> things</c><00:51:23.760><c> that</c>

00:51:23.829 --> 00:51:23.839 align:start position:0%
and so the one of the many things that
 

00:51:23.839 --> 00:51:25.109 align:start position:0%
and so the one of the many things that
acquire<00:51:24.160><c> in</c><00:51:24.240><c> this</c><00:51:24.400><c> lock</c><00:51:24.720><c> does</c>

00:51:25.109 --> 00:51:25.119 align:start position:0%
acquire in this lock does
 

00:51:25.119 --> 00:51:27.670 align:start position:0%
acquire in this lock does
is<00:51:25.839><c> uh</c><00:51:26.160><c> makes</c><00:51:26.400><c> it</c><00:51:26.480><c> so</c><00:51:26.720><c> that</c><00:51:27.119><c> even</c><00:51:27.359><c> though</c><00:51:27.520><c> we</c>

00:51:27.670 --> 00:51:27.680 align:start position:0%
is uh makes it so that even though we
 

00:51:27.680 --> 00:51:29.270 align:start position:0%
is uh makes it so that even though we
just<00:51:27.839><c> changed</c><00:51:28.079><c> the</c><00:51:28.240><c> state</c><00:51:28.400><c> to</c><00:51:28.559><c> runnable</c>

00:51:29.270 --> 00:51:29.280 align:start position:0%
just changed the state to runnable
 

00:51:29.280 --> 00:51:32.069 align:start position:0%
just changed the state to runnable
no<00:51:29.599><c> other</c><00:51:30.559><c> core</c><00:51:31.040><c> scheduling</c><00:51:31.520><c> thread</c><00:51:31.839><c> will</c>

00:51:32.069 --> 00:51:32.079 align:start position:0%
no other core scheduling thread will
 

00:51:32.079 --> 00:51:33.670 align:start position:0%
no other core scheduling thread will
look<00:51:32.319><c> at</c><00:51:32.400><c> this</c><00:51:32.640><c> process</c>

00:51:33.670 --> 00:51:33.680 align:start position:0%
look at this process
 

00:51:33.680 --> 00:51:36.630 align:start position:0%
look at this process
and<00:51:34.319><c> because</c><00:51:34.640><c> of</c><00:51:34.720><c> the</c><00:51:34.839><c> lock</c><00:51:35.839><c> and</c><00:51:36.319><c> see</c><00:51:36.559><c> that</c>

00:51:36.630 --> 00:51:36.640 align:start position:0%
and because of the lock and see that
 

00:51:36.640 --> 00:51:38.309 align:start position:0%
and because of the lock and see that
it's<00:51:36.800><c> runnable</c><00:51:37.200><c> and</c><00:51:37.280><c> try</c><00:51:37.440><c> to</c><00:51:37.599><c> run</c><00:51:37.839><c> it</c>

00:51:38.309 --> 00:51:38.319 align:start position:0%
it's runnable and try to run it
 

00:51:38.319 --> 00:51:39.670 align:start position:0%
it's runnable and try to run it
while<00:51:38.559><c> we're</c><00:51:38.800><c> still</c><00:51:38.960><c> running</c><00:51:39.280><c> it</c><00:51:39.359><c> on</c><00:51:39.520><c> this</c>

00:51:39.670 --> 00:51:39.680 align:start position:0%
while we're still running it on this
 

00:51:39.680 --> 00:51:41.109 align:start position:0%
while we're still running it on this
core<00:51:39.920><c> which</c><00:51:40.079><c> would</c><00:51:40.160><c> be</c><00:51:40.240><c> a</c><00:51:40.319><c> disaster</c><00:51:40.880><c> right</c>

00:51:41.109 --> 00:51:41.119 align:start position:0%
core which would be a disaster right
 

00:51:41.119 --> 00:51:43.109 align:start position:0%
core which would be a disaster right
running<00:51:41.359><c> the</c><00:51:41.520><c> same</c><00:51:41.839><c> process</c>

00:51:43.109 --> 00:51:43.119 align:start position:0%
running the same process
 

00:51:43.119 --> 00:51:45.030 align:start position:0%
running the same process
um<00:51:43.520><c> on</c><00:51:43.680><c> two</c><00:51:43.839><c> different</c><00:51:44.160><c> cores</c><00:51:44.800><c> and</c><00:51:44.880><c> that</c>

00:51:45.030 --> 00:51:45.040 align:start position:0%
um on two different cores and that
 

00:51:45.040 --> 00:51:47.109 align:start position:0%
um on two different cores and that
process<00:51:45.440><c> has</c><00:51:45.599><c> only</c><00:51:45.839><c> one</c><00:51:46.079><c> stack</c>

00:51:47.109 --> 00:51:47.119 align:start position:0%
process has only one stack
 

00:51:47.119 --> 00:51:48.870 align:start position:0%
process has only one stack
so<00:51:47.440><c> that</c><00:51:47.599><c> means</c><00:51:47.839><c> like</c><00:51:48.079><c> two</c><00:51:48.319><c> different</c><00:51:48.559><c> cores</c>

00:51:48.870 --> 00:51:48.880 align:start position:0%
so that means like two different cores
 

00:51:48.880 --> 00:51:50.390 align:start position:0%
so that means like two different cores
are<00:51:49.119><c> you</c><00:51:49.280><c> know</c><00:51:49.359><c> calling</c><00:51:49.680><c> subroutines</c><00:51:50.240><c> on</c><00:51:50.319><c> the</c>

00:51:50.390 --> 00:51:50.400 align:start position:0%
are you know calling subroutines on the
 

00:51:50.400 --> 00:51:51.589 align:start position:0%
are you know calling subroutines on the
same<00:51:50.640><c> stack</c><00:51:50.960><c> which</c><00:51:51.200><c> is</c>

00:51:51.589 --> 00:51:51.599 align:start position:0%
same stack which is
 

00:51:51.599 --> 00:51:55.510 align:start position:0%
same stack which is
um<00:51:52.480><c> just</c><00:51:52.720><c> a</c><00:51:52.800><c> recipe</c><00:51:53.200><c> for</c><00:51:53.359><c> disaster</c>

00:51:55.510 --> 00:51:55.520 align:start position:0%
um just a recipe for disaster
 

00:51:55.520 --> 00:51:59.430 align:start position:0%
um just a recipe for disaster
so<00:51:55.680><c> we</c><00:51:55.760><c> take</c><00:51:55.920><c> the</c><00:51:56.079><c> lock</c><00:51:56.400><c> out</c>

00:51:59.430 --> 00:51:59.440 align:start position:0%
 
 

00:51:59.440 --> 00:52:02.829 align:start position:0%
 
we<00:52:00.319><c> yield</c><00:52:00.640><c> changes</c><00:52:01.040><c> the</c><00:52:01.200><c> state</c><00:52:01.440><c> to</c><00:52:01.599><c> runable</c>

00:52:02.829 --> 00:52:02.839 align:start position:0%
we yield changes the state to runable
 

00:52:02.839 --> 00:52:06.230 align:start position:0%
we yield changes the state to runable
um<00:52:04.160><c> and</c><00:52:04.319><c> what</c><00:52:04.480><c> this</c><00:52:04.640><c> means</c><00:52:04.880><c> is</c><00:52:05.040><c> that</c><00:52:05.359><c> you</c><00:52:05.440><c> know</c>

00:52:06.230 --> 00:52:06.240 align:start position:0%
um and what this means is that you know
 

00:52:06.240 --> 00:52:09.430 align:start position:0%
um and what this means is that you know
when<00:52:06.400><c> we</c><00:52:06.559><c> finally</c><00:52:07.040><c> given</c><00:52:07.359><c> up</c><00:52:07.680><c> the</c>

00:52:09.430 --> 00:52:09.440 align:start position:0%
when we finally given up the
 

00:52:09.440 --> 00:52:12.950 align:start position:0%
when we finally given up the
um<00:52:11.839><c> when</c><00:52:12.160><c> we</c><00:52:12.319><c> finally</c><00:52:12.559><c> yield</c>

00:52:12.950 --> 00:52:12.960 align:start position:0%
um when we finally yield
 

00:52:12.960 --> 00:52:14.549 align:start position:0%
um when we finally yield
the<00:52:13.040><c> cpu</c><00:52:13.440><c> and</c><00:52:13.520><c> give</c><00:52:13.680><c> it</c><00:52:13.920><c> up</c><00:52:14.000><c> and</c><00:52:14.079><c> switch</c><00:52:14.400><c> to</c><00:52:14.480><c> the</c>

00:52:14.549 --> 00:52:14.559 align:start position:0%
the cpu and give it up and switch to the
 

00:52:14.559 --> 00:52:16.069 align:start position:0%
the cpu and give it up and switch to the
scheduler<00:52:15.040><c> process</c><00:52:15.440><c> this</c><00:52:15.599><c> state</c><00:52:15.839><c> will</c><00:52:16.000><c> be</c>

00:52:16.069 --> 00:52:16.079 align:start position:0%
scheduler process this state will be
 

00:52:16.079 --> 00:52:17.670 align:start position:0%
scheduler process this state will be
left<00:52:16.319><c> in</c><00:52:16.400><c> this</c><00:52:16.559><c> runnable</c><00:52:16.960><c> state</c><00:52:17.280><c> so</c><00:52:17.440><c> that</c><00:52:17.599><c> it</c>

00:52:17.670 --> 00:52:17.680 align:start position:0%
left in this runnable state so that it
 

00:52:17.680 --> 00:52:18.870 align:start position:0%
left in this runnable state so that it
will<00:52:17.920><c> run</c><00:52:18.160><c> again</c>

00:52:18.870 --> 00:52:18.880 align:start position:0%
will run again
 

00:52:18.880 --> 00:52:20.309 align:start position:0%
will run again
because<00:52:19.200><c> after</c><00:52:19.359><c> all</c><00:52:19.440><c> this</c><00:52:19.599><c> was</c><00:52:19.760><c> a</c><00:52:19.839><c> timer</c>

00:52:20.309 --> 00:52:20.319 align:start position:0%
because after all this was a timer
 

00:52:20.319 --> 00:52:21.990 align:start position:0%
because after all this was a timer
interrupt<00:52:20.720><c> that</c><00:52:21.200><c> interrupted</c><00:52:21.680><c> a</c><00:52:21.760><c> running</c>

00:52:21.990 --> 00:52:22.000 align:start position:0%
interrupt that interrupted a running
 

00:52:22.000 --> 00:52:23.510 align:start position:0%
interrupt that interrupted a running
user<00:52:22.240><c> level</c><00:52:22.559><c> process</c><00:52:22.880><c> that</c><00:52:23.040><c> would</c><00:52:23.200><c> like</c><00:52:23.359><c> to</c>

00:52:23.510 --> 00:52:23.520 align:start position:0%
user level process that would like to
 

00:52:23.520 --> 00:52:24.710 align:start position:0%
user level process that would like to
continue<00:52:24.079><c> computing</c>

00:52:24.710 --> 00:52:24.720 align:start position:0%
continue computing
 

00:52:24.720 --> 00:52:26.710 align:start position:0%
continue computing
so<00:52:25.839><c> we're</c><00:52:26.000><c> going</c><00:52:26.079><c> to</c><00:52:26.160><c> leave</c><00:52:26.319><c> it</c><00:52:26.400><c> in</c><00:52:26.480><c> state</c>

00:52:26.710 --> 00:52:26.720 align:start position:0%
so we're going to leave it in state
 

00:52:26.720 --> 00:52:28.069 align:start position:0%
so we're going to leave it in state
runnable<00:52:27.040><c> so</c><00:52:27.200><c> that</c><00:52:27.280><c> it</c><00:52:27.359><c> will</c><00:52:27.520><c> run</c><00:52:27.760><c> again</c>

00:52:28.069 --> 00:52:28.079 align:start position:0%
runnable so that it will run again
 

00:52:28.079 --> 00:52:34.549 align:start position:0%
runnable so that it will run again
as<00:52:28.559><c> soon</c><00:52:28.800><c> as</c><00:52:29.200><c> the</c><00:52:29.359><c> scheduler</c><00:52:29.839><c> decides</c><00:52:30.839><c> to</c>

00:52:34.549 --> 00:52:34.559 align:start position:0%
 
 

00:52:34.559 --> 00:52:44.390 align:start position:0%
 
and<00:52:34.720><c> then</c><00:52:36.400><c> the</c><00:52:36.559><c> only</c><00:52:36.800><c> other</c><00:52:36.960><c> thing</c><00:52:37.200><c> the</c>

00:52:44.390 --> 00:52:44.400 align:start position:0%
 
 

00:52:44.400 --> 00:52:46.069 align:start position:0%
 
yield<00:52:44.720><c> does</c><00:52:44.960><c> is</c><00:52:45.200><c> call</c><00:52:45.359><c> this</c><00:52:45.599><c> scheduler</c>

00:52:46.069 --> 00:52:46.079 align:start position:0%
yield does is call this scheduler
 

00:52:46.079 --> 00:52:48.390 align:start position:0%
yield does is call this scheduler
function

00:52:48.390 --> 00:52:48.400 align:start position:0%
function
 

00:52:48.400 --> 00:52:49.750 align:start position:0%
function
so<00:52:48.559><c> i'm</c><00:52:48.640><c> going</c><00:52:48.720><c> to</c><00:52:48.880><c> step</c><00:52:49.040><c> into</c><00:52:49.280><c> the</c><00:52:49.359><c> scheduler</c>

00:52:49.750 --> 00:52:49.760 align:start position:0%
so i'm going to step into the scheduler
 

00:52:49.760 --> 00:52:52.150 align:start position:0%
so i'm going to step into the scheduler
function<00:52:51.200><c> i'll</c><00:52:51.599><c> show</c><00:52:51.760><c> this</c>

00:52:52.150 --> 00:52:52.160 align:start position:0%
function i'll show this
 

00:52:52.160 --> 00:53:01.430 align:start position:0%
function i'll show this
whole<00:52:52.400><c> thing</c><00:52:58.839><c> here</c>

00:53:01.430 --> 00:53:01.440 align:start position:0%
whole thing here
 

00:53:01.440 --> 00:53:04.230 align:start position:0%
whole thing here
um<00:53:02.960><c> this</c><00:53:03.119><c> scheduler</c><00:53:03.520><c> something</c><00:53:03.839><c> does</c><00:53:04.000><c> almost</c>

00:53:04.230 --> 00:53:04.240 align:start position:0%
um this scheduler something does almost
 

00:53:04.240 --> 00:53:06.069 align:start position:0%
um this scheduler something does almost
nothing<00:53:04.480><c> it</c><00:53:04.559><c> does</c><00:53:04.720><c> a</c><00:53:04.800><c> bunch</c><00:53:04.960><c> of</c><00:53:05.119><c> checks</c>

00:53:06.069 --> 00:53:06.079 align:start position:0%
nothing it does a bunch of checks
 

00:53:06.079 --> 00:53:08.470 align:start position:0%
nothing it does a bunch of checks
it<00:53:06.160><c> does</c><00:53:06.800><c> a</c><00:53:07.040><c> whole</c><00:53:07.200><c> bunch</c><00:53:07.359><c> of</c><00:53:07.520><c> sanity</c><00:53:08.000><c> checks</c>

00:53:08.470 --> 00:53:08.480 align:start position:0%
it does a whole bunch of sanity checks
 

00:53:08.480 --> 00:53:09.270 align:start position:0%
it does a whole bunch of sanity checks
and<00:53:08.640><c> panics</c>

00:53:09.270 --> 00:53:09.280 align:start position:0%
and panics
 

00:53:09.280 --> 00:53:13.589 align:start position:0%
and panics
and<00:53:09.359><c> the</c><00:53:09.520><c> reason</c><00:53:09.839><c> for</c><00:53:10.000><c> that</c><00:53:10.240><c> is</c><00:53:10.559><c> actually</c><00:53:10.880><c> that</c>

00:53:13.589 --> 00:53:13.599 align:start position:0%
 
 

00:53:13.599 --> 00:53:16.870 align:start position:0%
 
this<00:53:13.920><c> code</c><00:53:14.640><c> in</c><00:53:14.800><c> xv6</c><00:53:15.599><c> over</c><00:53:15.920><c> its</c><00:53:16.480><c> many</c><00:53:16.720><c> year</c>

00:53:16.870 --> 00:53:16.880 align:start position:0%
this code in xv6 over its many year
 

00:53:16.880 --> 00:53:18.470 align:start position:0%
this code in xv6 over its many year
lifetime<00:53:17.359><c> has</c><00:53:17.520><c> had</c><00:53:17.680><c> a</c>

00:53:18.470 --> 00:53:18.480 align:start position:0%
lifetime has had a
 

00:53:18.480 --> 00:53:21.270 align:start position:0%
lifetime has had a
been<00:53:18.720><c> among</c><00:53:18.960><c> the</c><00:53:19.119><c> most</c><00:53:19.920><c> bug</c><00:53:20.240><c> prone</c><00:53:20.880><c> and</c><00:53:21.040><c> had</c>

00:53:21.270 --> 00:53:21.280 align:start position:0%
been among the most bug prone and had
 

00:53:21.280 --> 00:53:22.950 align:start position:0%
been among the most bug prone and had
most<00:53:21.440><c> surprises</c>

00:53:22.950 --> 00:53:22.960 align:start position:0%
most surprises
 

00:53:22.960 --> 00:53:25.430 align:start position:0%
most surprises
um<00:53:23.440><c> on</c><00:53:23.760><c> unhappy</c><00:53:24.240><c> surprises</c><00:53:24.800><c> so</c><00:53:24.880><c> there's</c><00:53:25.119><c> a</c><00:53:25.200><c> lot</c>

00:53:25.430 --> 00:53:25.440 align:start position:0%
um on unhappy surprises so there's a lot
 

00:53:25.440 --> 00:53:27.030 align:start position:0%
um on unhappy surprises so there's a lot
of

00:53:27.030 --> 00:53:27.040 align:start position:0%
of
 

00:53:27.040 --> 00:53:30.630 align:start position:0%
of
sanity<00:53:27.520><c> checks</c><00:53:27.839><c> and</c><00:53:28.000><c> panics</c><00:53:28.400><c> here</c><00:53:28.640><c> because</c><00:53:30.000><c> um</c>

00:53:30.630 --> 00:53:30.640 align:start position:0%
sanity checks and panics here because um
 

00:53:30.640 --> 00:53:31.990 align:start position:0%
sanity checks and panics here because um
because<00:53:30.880><c> there's</c><00:53:31.119><c> often</c><00:53:31.359><c> been</c><00:53:31.520><c> bugs</c>

00:53:31.990 --> 00:53:32.000 align:start position:0%
because there's often been bugs
 

00:53:32.000 --> 00:53:35.510 align:start position:0%
because there's often been bugs
associated<00:53:32.559><c> with</c><00:53:32.640><c> this</c><00:53:32.800><c> code</c>

00:53:35.510 --> 00:53:35.520 align:start position:0%
 
 

00:53:35.520 --> 00:53:38.390 align:start position:0%
 
all<00:53:35.680><c> right</c><00:53:35.839><c> i'm</c><00:53:35.920><c> gonna</c><00:53:36.319><c> um</c><00:53:36.960><c> skip</c><00:53:37.280><c> over</c><00:53:37.599><c> these</c>

00:53:38.390 --> 00:53:38.400 align:start position:0%
all right i'm gonna um skip over these
 

00:53:38.400 --> 00:53:39.670 align:start position:0%
all right i'm gonna um skip over these
um

00:53:39.670 --> 00:53:39.680 align:start position:0%
um
 

00:53:39.680 --> 00:53:46.790 align:start position:0%
um
sanity<00:53:40.160><c> checks</c><00:53:40.480><c> and</c><00:53:42.160><c> proceed</c><00:53:42.720><c> to</c><00:53:42.880><c> the</c>

00:53:46.790 --> 00:53:46.800 align:start position:0%
 
 

00:53:46.800 --> 00:53:48.549 align:start position:0%
 
call<00:53:47.040><c> to</c><00:53:47.200><c> switch</c><00:53:47.599><c> this</c><00:53:47.760><c> call</c><00:53:48.000><c> to</c><00:53:48.079><c> switch</c><00:53:48.400><c> is</c>

00:53:48.549 --> 00:53:48.559 align:start position:0%
call to switch this call to switch is
 

00:53:48.559 --> 00:53:49.750 align:start position:0%
call to switch this call to switch is
where<00:53:48.720><c> the</c><00:53:48.800><c> real</c><00:53:49.040><c> action</c><00:53:49.280><c> happens</c><00:53:49.599><c> this</c><00:53:49.680><c> is</c>

00:53:49.750 --> 00:53:49.760 align:start position:0%
where the real action happens this is
 

00:53:49.760 --> 00:53:51.190 align:start position:0%
where the real action happens this is
called<00:53:50.000><c> the</c><00:53:50.079><c> switch</c><00:53:50.400><c> it's</c><00:53:50.480><c> going</c><00:53:50.640><c> to</c>

00:53:51.190 --> 00:53:51.200 align:start position:0%
called the switch it's going to
 

00:53:51.200 --> 00:53:54.710 align:start position:0%
called the switch it's going to
save<00:53:51.440><c> away</c><00:53:51.839><c> the</c><00:53:52.079><c> current</c><00:53:53.839><c> kernel</c><00:53:54.240><c> threads</c>

00:53:54.710 --> 00:53:54.720 align:start position:0%
save away the current kernel threads
 

00:53:54.720 --> 00:53:55.670 align:start position:0%
save away the current kernel threads
registers

00:53:55.670 --> 00:53:55.680 align:start position:0%
registers
 

00:53:55.680 --> 00:53:58.069 align:start position:0%
registers
in<00:53:56.240><c> pro</c><00:53:56.720><c> context</c><00:53:57.200><c> which</c><00:53:57.440><c> is</c><00:53:57.520><c> the</c><00:53:57.680><c> current</c>

00:53:58.069 --> 00:53:58.079 align:start position:0%
in pro context which is the current
 

00:53:58.079 --> 00:53:59.109 align:start position:0%
in pro context which is the current
processes

00:53:59.109 --> 00:53:59.119 align:start position:0%
processes
 

00:53:59.119 --> 00:54:01.190 align:start position:0%
processes
saved<00:53:59.440><c> kernel</c><00:53:59.760><c> thread</c><00:54:00.000><c> context</c><00:54:00.640><c> save</c><00:54:00.880><c> set</c><00:54:01.119><c> of</c>

00:54:01.190 --> 00:54:01.200 align:start position:0%
saved kernel thread context save set of
 

00:54:01.200 --> 00:54:03.030 align:start position:0%
saved kernel thread context save set of
registers

00:54:03.030 --> 00:54:03.040 align:start position:0%
registers
 

00:54:03.040 --> 00:54:06.549 align:start position:0%
registers
c<00:54:03.280><c> arrow</c><00:54:03.520><c> context</c><00:54:04.079><c> c</c><00:54:04.400><c> is</c><00:54:04.559><c> the</c><00:54:05.440><c> pointer</c><00:54:05.839><c> to</c><00:54:06.079><c> this</c>

00:54:06.549 --> 00:54:06.559 align:start position:0%
c arrow context c is the pointer to this
 

00:54:06.559 --> 00:54:09.670 align:start position:0%
c arrow context c is the pointer to this
core's<00:54:07.440><c> struct</c><00:54:07.920><c> cpu</c>

00:54:09.670 --> 00:54:09.680 align:start position:0%
core's struct cpu
 

00:54:09.680 --> 00:54:12.790 align:start position:0%
core's struct cpu
and<00:54:09.920><c> struct</c><00:54:10.240><c> cpu</c><00:54:10.640><c> has</c><00:54:10.880><c> the</c><00:54:11.760><c> context</c><00:54:12.400><c> the</c><00:54:12.559><c> save</c>

00:54:12.790 --> 00:54:12.800 align:start position:0%
and struct cpu has the context the save
 

00:54:12.800 --> 00:54:13.589 align:start position:0%
and struct cpu has the context the save
registers

00:54:13.589 --> 00:54:13.599 align:start position:0%
registers
 

00:54:13.599 --> 00:54:16.470 align:start position:0%
registers
of<00:54:14.319><c> this</c><00:54:14.720><c> core's</c><00:54:15.440><c> scheduler</c><00:54:16.000><c> thread</c><00:54:16.240><c> so</c><00:54:16.400><c> we're</c>

00:54:16.470 --> 00:54:16.480 align:start position:0%
of this core's scheduler thread so we're
 

00:54:16.480 --> 00:54:18.390 align:start position:0%
of this core's scheduler thread so we're
going<00:54:16.640><c> to</c><00:54:16.720><c> be</c><00:54:16.800><c> switching</c><00:54:17.280><c> from</c><00:54:17.440><c> this</c><00:54:17.760><c> thread</c>

00:54:18.390 --> 00:54:18.400 align:start position:0%
going to be switching from this thread
 

00:54:18.400 --> 00:54:20.549 align:start position:0%
going to be switching from this thread
saving<00:54:18.640><c> this</c><00:54:18.880><c> red</c><00:54:19.119><c> state</c><00:54:19.760><c> restoring</c><00:54:20.319><c> the</c>

00:54:20.549 --> 00:54:20.559 align:start position:0%
saving this red state restoring the
 

00:54:20.559 --> 00:54:22.549 align:start position:0%
saving this red state restoring the
threat<00:54:20.960><c> state</c><00:54:21.359><c> of</c>

00:54:22.549 --> 00:54:22.559 align:start position:0%
threat state of
 

00:54:22.559 --> 00:54:24.790 align:start position:0%
threat state of
discord's<00:54:23.440><c> scheduler</c><00:54:24.079><c> and</c><00:54:24.480><c> sort</c><00:54:24.640><c> of</c>

00:54:24.790 --> 00:54:24.800 align:start position:0%
discord's scheduler and sort of
 

00:54:24.800 --> 00:54:27.190 align:start position:0%
discord's scheduler and sort of
continuing<00:54:25.359><c> the</c><00:54:25.520><c> execution</c><00:54:26.000><c> of</c><00:54:26.160><c> this</c><00:54:26.319><c> score's</c>

00:54:27.190 --> 00:54:27.200 align:start position:0%
continuing the execution of this score's
 

00:54:27.200 --> 00:54:32.790 align:start position:0%
continuing the execution of this score's
course<00:54:28.240><c> scheduler</c><00:54:29.359><c> thread</c>

00:54:32.790 --> 00:54:32.800 align:start position:0%
 
 

00:54:32.800 --> 00:54:36.470 align:start position:0%
 
okay<00:54:33.040><c> so</c><00:54:33.280><c> let's</c><00:54:33.520><c> see</c><00:54:33.839><c> what</c><00:54:34.160><c> uh</c>

00:54:36.470 --> 00:54:36.480 align:start position:0%
 
 

00:54:36.480 --> 00:54:39.750 align:start position:0%
 
let's<00:54:36.720><c> take</c><00:54:36.880><c> a</c><00:54:37.280><c> quick</c><00:54:37.760><c> preview</c><00:54:39.040><c> at</c>

00:54:39.750 --> 00:54:39.760 align:start position:0%
let's take a quick preview at
 

00:54:39.760 --> 00:54:41.430 align:start position:0%
let's take a quick preview at
the<00:54:40.319><c> context</c><00:54:40.880><c> that</c><00:54:40.960><c> we're</c><00:54:41.119><c> going</c><00:54:41.200><c> to</c><00:54:41.280><c> be</c>

00:54:41.430 --> 00:54:41.440 align:start position:0%
the context that we're going to be
 

00:54:41.440 --> 00:54:43.190 align:start position:0%
the context that we're going to be
switching<00:54:42.000><c> to</c>

00:54:43.190 --> 00:54:43.200 align:start position:0%
switching to
 

00:54:43.200 --> 00:54:45.829 align:start position:0%
switching to
and<00:54:43.280><c> i</c><00:54:43.359><c> can</c><00:54:43.520><c> get</c><00:54:43.680><c> that</c><00:54:43.920><c> turns</c><00:54:44.240><c> out</c><00:54:44.319><c> that</c><00:54:45.200><c> i</c>

00:54:45.829 --> 00:54:45.839 align:start position:0%
and i can get that turns out that i
 

00:54:45.839 --> 00:54:47.910 align:start position:0%
and i can get that turns out that i
can't<00:54:46.160><c> actually</c><00:54:46.559><c> print</c><00:54:46.799><c> cro</c><00:54:47.280><c> context</c><00:54:47.680><c> but</c><00:54:47.839><c> i</c>

00:54:47.910 --> 00:54:47.920 align:start position:0%
can't actually print cro context but i
 

00:54:47.920 --> 00:54:49.750 align:start position:0%
can't actually print cro context but i
happen<00:54:48.079><c> to</c><00:54:48.240><c> know</c><00:54:48.400><c> that</c><00:54:48.640><c> c</c>

00:54:49.750 --> 00:54:49.760 align:start position:0%
happen to know that c
 

00:54:49.760 --> 00:54:52.789 align:start position:0%
happen to know that c
prints<00:54:50.160><c> to</c><00:54:50.480><c> cpus</c><00:54:51.599><c> zero</c><00:54:52.400><c> just</c>

00:54:52.789 --> 00:54:52.799 align:start position:0%
prints to cpus zero just
 

00:54:52.799 --> 00:54:54.390 align:start position:0%
prints to cpus zero just
because<00:54:53.040><c> we're</c><00:54:53.280><c> on</c><00:54:53.359><c> the</c><00:54:53.599><c> zero</c><00:54:53.920><c> with</c><00:54:54.160><c> core</c>

00:54:54.390 --> 00:54:54.400 align:start position:0%
because we're on the zero with core
 

00:54:54.400 --> 00:54:55.910 align:start position:0%
because we're on the zero with core
there's<00:54:54.640><c> only</c><00:54:54.799><c> one</c><00:54:55.119><c> core</c>

00:54:55.910 --> 00:54:55.920 align:start position:0%
there's only one core
 

00:54:55.920 --> 00:55:00.950 align:start position:0%
there's only one core
um<00:54:56.400><c> and</c><00:54:56.559><c> i</c><00:54:56.640><c> can</c><00:54:56.799><c> print</c><00:54:57.040><c> its</c><00:54:57.200><c> context</c>

00:55:00.950 --> 00:55:00.960 align:start position:0%
 
 

00:55:00.960 --> 00:55:04.470 align:start position:0%
 
and<00:55:01.359><c> so</c><00:55:01.520><c> this</c><00:55:01.680><c> is</c><00:55:01.839><c> the</c><00:55:03.359><c> saved</c>

00:55:04.470 --> 00:55:04.480 align:start position:0%
and so this is the saved
 

00:55:04.480 --> 00:55:07.990 align:start position:0%
and so this is the saved
registers<00:55:05.200><c> from</c><00:55:05.520><c> this</c><00:55:05.839><c> course</c><00:55:07.440><c> scheduler</c>

00:55:07.990 --> 00:55:08.000 align:start position:0%
registers from this course scheduler
 

00:55:08.000 --> 00:55:10.470 align:start position:0%
registers from this course scheduler
thread

00:55:10.470 --> 00:55:10.480 align:start position:0%
 
 

00:55:10.480 --> 00:55:12.470 align:start position:0%
 
and<00:55:10.640><c> of</c><00:55:10.880><c> particular</c><00:55:11.359><c> interest</c><00:55:11.680><c> is</c><00:55:11.760><c> the</c><00:55:11.920><c> ra</c>

00:55:12.470 --> 00:55:12.480 align:start position:0%
and of particular interest is the ra
 

00:55:12.480 --> 00:55:15.030 align:start position:0%
and of particular interest is the ra
because<00:55:12.880><c> the</c><00:55:13.040><c> ra</c><00:55:13.359><c> register</c>

00:55:15.030 --> 00:55:15.040 align:start position:0%
because the ra register
 

00:55:15.040 --> 00:55:18.230 align:start position:0%
because the ra register
is<00:55:15.280><c> where</c><00:55:16.400><c> the</c><00:55:16.559><c> current</c><00:55:16.960><c> function</c><00:55:17.280><c> call</c>

00:55:18.230 --> 00:55:18.240 align:start position:0%
is where the current function call
 

00:55:18.240 --> 00:55:19.589 align:start position:0%
is where the current function call
is<00:55:18.400><c> going</c><00:55:18.480><c> to</c><00:55:18.559><c> return</c><00:55:18.880><c> to</c><00:55:19.040><c> so</c><00:55:19.280><c> we're</c><00:55:19.440><c> going</c><00:55:19.520><c> to</c>

00:55:19.589 --> 00:55:19.599 align:start position:0%
is going to return to so we're going to
 

00:55:19.599 --> 00:55:20.870 align:start position:0%
is going to return to so we're going to
switch<00:55:19.760><c> to</c><00:55:19.839><c> the</c><00:55:20.000><c> scheduler</c><00:55:20.319><c> thread</c><00:55:20.640><c> and</c><00:55:20.720><c> it's</c>

00:55:20.870 --> 00:55:20.880 align:start position:0%
switch to the scheduler thread and it's
 

00:55:20.880 --> 00:55:22.630 align:start position:0%
switch to the scheduler thread and it's
going<00:55:20.960><c> to</c><00:55:21.040><c> do</c><00:55:21.200><c> a</c><00:55:21.359><c> return</c>

00:55:22.630 --> 00:55:22.640 align:start position:0%
going to do a return
 

00:55:22.640 --> 00:55:27.190 align:start position:0%
going to do a return
and<00:55:22.720><c> return</c><00:55:23.119><c> to</c><00:55:23.200><c> that</c><00:55:23.440><c> ra</c><00:55:24.960><c> and</c>

00:55:27.190 --> 00:55:27.200 align:start position:0%
and return to that ra and
 

00:55:27.200 --> 00:55:29.109 align:start position:0%
and return to that ra and
we<00:55:27.359><c> can</c><00:55:27.920><c> find</c><00:55:28.160><c> out</c><00:55:28.240><c> where</c><00:55:28.400><c> that</c><00:55:28.640><c> are</c><00:55:28.960><c> where</c>

00:55:29.109 --> 00:55:29.119 align:start position:0%
we can find out where that are where
 

00:55:29.119 --> 00:55:32.829 align:start position:0%
we can find out where that are where
that<00:55:29.280><c> return</c><00:55:29.599><c> address</c><00:55:29.920><c> is</c><00:55:30.079><c> by</c><00:55:30.240><c> looking</c><00:55:30.559><c> in</c>

00:55:32.829 --> 00:55:32.839 align:start position:0%
 
 

00:55:32.839 --> 00:55:35.109 align:start position:0%
 
kernel.asm

00:55:35.109 --> 00:55:35.119 align:start position:0%
kernel.asm
 

00:55:35.119 --> 00:55:44.069 align:start position:0%
kernel.asm
actually<00:55:35.359><c> that's</c><00:55:35.760><c> uh</c>

00:55:44.069 --> 00:55:44.079 align:start position:0%
 
 

00:55:44.079 --> 00:55:45.990 align:start position:0%
 
and<00:55:44.319><c> as</c><00:55:44.559><c> you</c><00:55:44.640><c> can</c><00:55:44.799><c> see</c><00:55:44.960><c> this</c><00:55:45.200><c> x</c><00:55:45.359><c> slash</c><00:55:45.599><c> i</c><00:55:45.839><c> you</c>

00:55:45.990 --> 00:55:46.000 align:start position:0%
and as you can see this x slash i you
 

00:55:46.000 --> 00:55:47.910 align:start position:0%
and as you can see this x slash i you
know<00:55:46.160><c> prints</c><00:55:46.880><c> the</c><00:55:47.040><c> instructions</c><00:55:47.680><c> that</c><00:55:47.760><c> are</c><00:55:47.839><c> at</c>

00:55:47.910 --> 00:55:47.920 align:start position:0%
know prints the instructions that are at
 

00:55:47.920 --> 00:55:49.589 align:start position:0%
know prints the instructions that are at
a<00:55:48.000><c> certain</c><00:55:48.319><c> address</c><00:55:48.640><c> but</c><00:55:48.799><c> it</c><00:55:48.960><c> also</c><00:55:49.119><c> prints</c><00:55:49.440><c> the</c>

00:55:49.589 --> 00:55:49.599 align:start position:0%
a certain address but it also prints the
 

00:55:49.599 --> 00:55:50.710 align:start position:0%
a certain address but it also prints the
label

00:55:50.710 --> 00:55:50.720 align:start position:0%
label
 

00:55:50.720 --> 00:55:53.510 align:start position:0%
label
um<00:55:52.160><c> of</c><00:55:52.240><c> the</c><00:55:52.480><c> the</c><00:55:52.640><c> name</c><00:55:52.880><c> of</c><00:55:52.960><c> the</c><00:55:53.040><c> function</c><00:55:53.359><c> that</c>

00:55:53.510 --> 00:55:53.520 align:start position:0%
um of the the name of the function that
 

00:55:53.520 --> 00:55:54.950 align:start position:0%
um of the the name of the function that
those<00:55:53.680><c> instructions</c><00:55:54.160><c> are</c><00:55:54.319><c> in</c><00:55:54.480><c> it</c><00:55:54.640><c> so</c><00:55:54.799><c> we're</c>

00:55:54.950 --> 00:55:54.960 align:start position:0%
those instructions are in it so we're
 

00:55:54.960 --> 00:55:56.549 align:start position:0%
those instructions are in it so we're
going<00:55:55.119><c> to</c><00:55:55.200><c> be</c><00:55:55.359><c> returning</c>

00:55:56.549 --> 00:55:56.559 align:start position:0%
going to be returning
 

00:55:56.559 --> 00:55:59.030 align:start position:0%
going to be returning
uh<00:55:56.720><c> to</c><00:55:56.880><c> schedule</c><00:55:57.280><c> or</c><00:55:57.359><c> buy</c><00:55:57.599><c> and</c><00:55:57.680><c> buy</c><00:55:58.799><c> that's</c>

00:55:59.030 --> 00:55:59.040 align:start position:0%
uh to schedule or buy and buy that's
 

00:55:59.040 --> 00:55:59.750 align:start position:0%
uh to schedule or buy and buy that's
just

00:55:59.750 --> 00:55:59.760 align:start position:0%
just
 

00:55:59.760 --> 00:56:05.030 align:start position:0%
just
you<00:55:59.839><c> know</c><00:56:00.240><c> as</c><00:56:00.400><c> you</c><00:56:00.480><c> might</c><00:56:00.839><c> expect</c>

00:56:05.030 --> 00:56:05.040 align:start position:0%
 
 

00:56:05.040 --> 00:56:11.030 align:start position:0%
 
okay<00:56:07.280><c> um</c>

00:56:11.030 --> 00:56:11.040 align:start position:0%
 
 

00:56:11.040 --> 00:56:13.190 align:start position:0%
 
i<00:56:11.119><c> want</c><00:56:11.359><c> to</c><00:56:11.599><c> look</c><00:56:11.760><c> at</c><00:56:11.920><c> what</c><00:56:12.400><c> switch</c><00:56:12.880><c> actually</c>

00:56:13.190 --> 00:56:13.200 align:start position:0%
i want to look at what switch actually
 

00:56:13.200 --> 00:56:18.630 align:start position:0%
i want to look at what switch actually
does<00:56:13.359><c> we're</c><00:56:13.520><c> about</c><00:56:13.680><c> to</c><00:56:13.760><c> call</c><00:56:14.000><c> switch</c>

00:56:18.630 --> 00:56:18.640 align:start position:0%
 
 

00:56:18.640 --> 00:56:20.150 align:start position:0%
 
so<00:56:18.960><c> i</c><00:56:19.040><c> put</c><00:56:19.200><c> a</c><00:56:19.280><c> breakpoint</c><00:56:19.680><c> on</c><00:56:19.760><c> switch</c><00:56:20.079><c> i'm</c>

00:56:20.150 --> 00:56:20.160 align:start position:0%
so i put a breakpoint on switch i'm
 

00:56:20.160 --> 00:56:21.190 align:start position:0%
so i put a breakpoint on switch i'm
putting<00:56:20.319><c> a</c><00:56:20.400><c> breakpoint</c><00:56:20.799><c> because</c><00:56:20.960><c> there's</c><00:56:21.119><c> a</c>

00:56:21.190 --> 00:56:21.200 align:start position:0%
putting a breakpoint because there's a
 

00:56:21.200 --> 00:56:22.549 align:start position:0%
putting a breakpoint because there's a
bunch<00:56:21.359><c> of</c><00:56:21.520><c> setup</c><00:56:21.839><c> code</c>

00:56:22.549 --> 00:56:22.559 align:start position:0%
bunch of setup code
 

00:56:22.559 --> 00:56:25.510 align:start position:0%
bunch of setup code
like<00:56:22.720><c> that</c><00:56:22.960><c> pulls</c><00:56:23.440><c> the</c><00:56:24.480><c> values</c><00:56:24.880><c> of</c><00:56:24.960><c> context</c>

00:56:25.510 --> 00:56:25.520 align:start position:0%
like that pulls the values of context
 

00:56:25.520 --> 00:56:26.549 align:start position:0%
like that pulls the values of context
out<00:56:25.599><c> of</c><00:56:25.680><c> those</c><00:56:25.920><c> structures</c>

00:56:26.549 --> 00:56:26.559 align:start position:0%
out of those structures
 

00:56:26.559 --> 00:56:30.150 align:start position:0%
out of those structures
i'm<00:56:26.720><c> going</c><00:56:26.799><c> to</c><00:56:26.880><c> skip</c><00:56:27.200><c> over</c><00:56:27.440><c> it</c><00:56:28.799><c> okay</c><00:56:29.040><c> so</c><00:56:29.280><c> now</c>

00:56:30.150 --> 00:56:30.160 align:start position:0%
i'm going to skip over it okay so now
 

00:56:30.160 --> 00:56:33.270 align:start position:0%
i'm going to skip over it okay so now
um<00:56:31.359><c> we're</c><00:56:31.520><c> to</c><00:56:31.680><c> break</c><00:56:31.839><c> point</c><00:56:32.079><c> and</c><00:56:32.240><c> switch</c>

00:56:33.270 --> 00:56:33.280 align:start position:0%
um we're to break point and switch
 

00:56:33.280 --> 00:56:36.150 align:start position:0%
um we're to break point and switch
the<00:56:34.240><c> gdb</c><00:56:34.720><c> won't</c><00:56:34.960><c> show</c><00:56:35.119><c> us</c><00:56:35.280><c> the</c><00:56:35.440><c> instructions</c>

00:56:36.150 --> 00:56:36.160 align:start position:0%
the gdb won't show us the instructions
 

00:56:36.160 --> 00:56:38.470 align:start position:0%
the gdb won't show us the instructions
but<00:56:36.400><c> we</c><00:56:36.559><c> can</c><00:56:36.640><c> look</c><00:56:36.799><c> in</c><00:56:36.960><c> switch.s</c>

00:56:38.470 --> 00:56:38.480 align:start position:0%
but we can look in switch.s
 

00:56:38.480 --> 00:56:39.750 align:start position:0%
but we can look in switch.s
um<00:56:38.720><c> to</c><00:56:38.880><c> look</c><00:56:39.040><c> at</c><00:56:39.119><c> the</c><00:56:39.200><c> instructions</c><00:56:39.599><c> we're</c>

00:56:39.750 --> 00:56:39.760 align:start position:0%
um to look at the instructions we're
 

00:56:39.760 --> 00:56:42.069 align:start position:0%
um to look at the instructions we're
about<00:56:39.920><c> to</c><00:56:40.160><c> execute</c><00:56:41.280><c> so</c><00:56:41.520><c> as</c><00:56:41.680><c> you</c><00:56:41.760><c> can</c><00:56:41.839><c> see</c><00:56:41.920><c> we're</c>

00:56:42.069 --> 00:56:42.079 align:start position:0%
about to execute so as you can see we're
 

00:56:42.079 --> 00:56:43.750 align:start position:0%
about to execute so as you can see we're
on<00:56:42.160><c> the</c><00:56:42.240><c> very</c><00:56:42.480><c> first</c><00:56:42.720><c> instruction</c><00:56:43.119><c> the</c><00:56:43.280><c> store</c>

00:56:43.750 --> 00:56:43.760 align:start position:0%
on the very first instruction the store
 

00:56:43.760 --> 00:56:43.990 align:start position:0%
on the very first instruction the store
of

00:56:43.990 --> 00:56:44.000 align:start position:0%
of
 

00:56:44.000 --> 00:56:47.589 align:start position:0%
of
ra<00:56:44.799><c> to</c><00:56:46.079><c> the</c><00:56:46.240><c> address</c><00:56:46.640><c> pointed</c><00:56:46.960><c> to</c><00:56:47.200><c> by</c>

00:56:47.589 --> 00:56:47.599 align:start position:0%
ra to the address pointed to by
 

00:56:47.599 --> 00:56:50.230 align:start position:0%
ra to the address pointed to by
a0<00:56:48.720><c> you</c><00:56:48.880><c> may</c><00:56:49.040><c> remember</c><00:56:49.440><c> in</c><00:56:49.520><c> the</c><00:56:49.680><c> call</c><00:56:50.000><c> to</c>

00:56:50.230 --> 00:56:50.240 align:start position:0%
a0 you may remember in the call to
 

00:56:50.240 --> 00:56:50.789 align:start position:0%
a0 you may remember in the call to
switch

00:56:50.789 --> 00:56:50.799 align:start position:0%
switch
 

00:56:50.799 --> 00:56:53.349 align:start position:0%
switch
that<00:56:51.280><c> the</c><00:56:51.440><c> first</c><00:56:51.680><c> argument</c><00:56:52.240><c> was</c><00:56:52.880><c> the</c><00:56:53.040><c> current</c>

00:56:53.349 --> 00:56:53.359 align:start position:0%
that the first argument was the current
 

00:56:53.359 --> 00:56:55.270 align:start position:0%
that the first argument was the current
thread's<00:56:53.760><c> context</c><00:56:54.319><c> and</c><00:56:54.480><c> the</c><00:56:54.559><c> second</c><00:56:54.880><c> argument</c>

00:56:55.270 --> 00:56:55.280 align:start position:0%
thread's context and the second argument
 

00:56:55.280 --> 00:56:56.470 align:start position:0%
thread's context and the second argument
was<00:56:55.520><c> the</c>

00:56:56.470 --> 00:56:56.480 align:start position:0%
was the
 

00:56:56.480 --> 00:56:58.309 align:start position:0%
was the
context<00:56:56.880><c> of</c><00:56:56.960><c> the</c><00:56:57.119><c> thread</c><00:56:57.359><c> we're</c><00:56:57.520><c> switching</c><00:56:57.920><c> to</c>

00:56:58.309 --> 00:56:58.319 align:start position:0%
context of the thread we're switching to
 

00:56:58.319 --> 00:57:01.190 align:start position:0%
context of the thread we're switching to
the<00:56:58.480><c> two</c><00:56:58.640><c> arguments</c><00:56:59.040><c> go</c><00:56:59.200><c> in</c><00:56:59.359><c> a0</c><00:56:59.839><c> and</c><00:57:00.000><c> a1</c>

00:57:01.190 --> 00:57:01.200 align:start position:0%
the two arguments go in a0 and a1
 

00:57:01.200 --> 00:57:02.470 align:start position:0%
the two arguments go in a0 and a1
and<00:57:01.280><c> so</c><00:57:01.440><c> the</c><00:57:01.520><c> reason</c><00:57:01.760><c> why</c><00:57:01.920><c> we</c><00:57:02.000><c> see</c><00:57:02.160><c> all</c><00:57:02.319><c> these</c>

00:57:02.470 --> 00:57:02.480 align:start position:0%
and so the reason why we see all these
 

00:57:02.480 --> 00:57:04.230 align:start position:0%
and so the reason why we see all these
stores<00:57:03.359><c> through</c>

00:57:04.230 --> 00:57:04.240 align:start position:0%
stores through
 

00:57:04.240 --> 00:57:05.990 align:start position:0%
stores through
register<00:57:04.640><c> a0</c><00:57:05.200><c> is</c><00:57:05.280><c> because</c><00:57:05.520><c> we're</c><00:57:05.680><c> storing</c>

00:57:05.990 --> 00:57:06.000 align:start position:0%
register a0 is because we're storing
 

00:57:06.000 --> 00:57:07.910 align:start position:0%
register a0 is because we're storing
away<00:57:06.400><c> a</c><00:57:06.480><c> bunch</c><00:57:06.720><c> of</c><00:57:06.799><c> registers</c>

00:57:07.910 --> 00:57:07.920 align:start position:0%
away a bunch of registers
 

00:57:07.920 --> 00:57:09.990 align:start position:0%
away a bunch of registers
in<00:57:08.079><c> the</c><00:57:08.160><c> memory</c><00:57:08.480><c> that</c><00:57:08.640><c> a0</c><00:57:09.119><c> points</c><00:57:09.440><c> to</c><00:57:09.599><c> that</c><00:57:09.839><c> is</c>

00:57:09.990 --> 00:57:10.000 align:start position:0%
in the memory that a0 points to that is
 

00:57:10.000 --> 00:57:12.309 align:start position:0%
in the memory that a0 points to that is
in<00:57:10.079><c> the</c><00:57:10.480><c> context</c><00:57:11.119><c> of</c><00:57:11.280><c> the</c><00:57:11.920><c> thread</c><00:57:12.160><c> we're</c>

00:57:12.309 --> 00:57:12.319 align:start position:0%
in the context of the thread we're
 

00:57:12.319 --> 00:57:13.190 align:start position:0%
in the context of the thread we're
switching<00:57:12.640><c> from</c>

00:57:13.190 --> 00:57:13.200 align:start position:0%
switching from
 

00:57:13.200 --> 00:57:15.829 align:start position:0%
switching from
and<00:57:13.280><c> the</c><00:57:13.440><c> loads</c><00:57:13.839><c> load</c><00:57:14.720><c> from</c><00:57:14.960><c> address</c><00:57:15.280><c> a1</c>

00:57:15.829 --> 00:57:15.839 align:start position:0%
and the loads load from address a1
 

00:57:15.839 --> 00:57:16.470 align:start position:0%
and the loads load from address a1
because

00:57:16.470 --> 00:57:16.480 align:start position:0%
because
 

00:57:16.480 --> 00:57:18.470 align:start position:0%
because
that's<00:57:16.720><c> a</c><00:57:16.799><c> pointer</c><00:57:17.200><c> to</c><00:57:17.359><c> the</c><00:57:17.920><c> context</c><00:57:18.319><c> of</c><00:57:18.400><c> the</c>

00:57:18.470 --> 00:57:18.480 align:start position:0%
that's a pointer to the context of the
 

00:57:18.480 --> 00:57:26.710 align:start position:0%
that's a pointer to the context of the
thread<00:57:18.720><c> we're</c><00:57:18.880><c> switching</c><00:57:24.839><c> to</c>

00:57:26.710 --> 00:57:26.720 align:start position:0%
thread we're switching to
 

00:57:26.720 --> 00:57:29.990 align:start position:0%
thread we're switching to
okay<00:57:27.440><c> um</c><00:57:29.119><c> and</c><00:57:29.280><c> so</c><00:57:29.440><c> thread</c>

00:57:29.990 --> 00:57:30.000 align:start position:0%
okay um and so thread
 

00:57:30.000 --> 00:57:33.670 align:start position:0%
okay um and so thread
you<00:57:30.079><c> know</c><00:57:30.880><c> uh</c><00:57:31.680><c> switch</c><00:57:32.400><c> saves</c><00:57:32.720><c> registers</c>

00:57:33.670 --> 00:57:33.680 align:start position:0%
you know uh switch saves registers
 

00:57:33.680 --> 00:57:35.670 align:start position:0%
you know uh switch saves registers
loads<00:57:34.079><c> registers</c><00:57:34.799><c> from</c><00:57:34.960><c> the</c><00:57:35.119><c> target</c><00:57:35.359><c> threads</c>

00:57:35.670 --> 00:57:35.680 align:start position:0%
loads registers from the target threads
 

00:57:35.680 --> 00:57:37.750 align:start position:0%
loads registers from the target threads
context<00:57:36.000><c> and</c><00:57:36.079><c> then</c><00:57:36.240><c> return</c>

00:57:37.750 --> 00:57:37.760 align:start position:0%
context and then return
 

00:57:37.760 --> 00:57:39.430 align:start position:0%
context and then return
that's<00:57:38.160><c> that's</c><00:57:38.400><c> why</c><00:57:38.559><c> the</c><00:57:38.640><c> ra</c><00:57:38.960><c> was</c><00:57:39.119><c> interesting</c>

00:57:39.430 --> 00:57:39.440 align:start position:0%
that's that's why the ra was interesting
 

00:57:39.440 --> 00:57:40.710 align:start position:0%
that's that's why the ra was interesting
because<00:57:39.680><c> it's</c><00:57:39.760><c> going</c><00:57:39.920><c> to</c><00:57:40.000><c> return</c><00:57:40.400><c> to</c><00:57:40.559><c> the</c>

00:57:40.710 --> 00:57:40.720 align:start position:0%
because it's going to return to the
 

00:57:40.720 --> 00:57:42.470 align:start position:0%
because it's going to return to the
place<00:57:40.880><c> that</c><00:57:41.040><c> ra</c><00:57:41.359><c> pointed</c><00:57:41.680><c> to</c><00:57:41.839><c> namely</c><00:57:42.160><c> into</c>

00:57:42.470 --> 00:57:42.480 align:start position:0%
place that ra pointed to namely into
 

00:57:42.480 --> 00:57:44.150 align:start position:0%
place that ra pointed to namely into
scheduler

00:57:44.150 --> 00:57:44.160 align:start position:0%
scheduler
 

00:57:44.160 --> 00:57:46.549 align:start position:0%
scheduler
all<00:57:44.319><c> right</c><00:57:44.480><c> so</c><00:57:45.119><c> one</c><00:57:45.280><c> question</c><00:57:45.680><c> is</c><00:57:46.240><c> you</c><00:57:46.400><c> may</c>

00:57:46.549 --> 00:57:46.559 align:start position:0%
all right so one question is you may
 

00:57:46.559 --> 00:57:47.589 align:start position:0%
all right so one question is you may
notice<00:57:46.960><c> here</c><00:57:47.200><c> that</c>

00:57:47.589 --> 00:57:47.599 align:start position:0%
notice here that
 

00:57:47.599 --> 00:57:50.309 align:start position:0%
notice here that
while<00:57:47.920><c> switch</c><00:57:48.319><c> saves</c><00:57:48.640><c> rasp</c><00:57:49.599><c> and</c><00:57:49.680><c> a</c><00:57:49.760><c> bunch</c><00:57:50.000><c> of</c><00:57:50.160><c> s</c>

00:57:50.309 --> 00:57:50.319 align:start position:0%
while switch saves rasp and a bunch of s
 

00:57:50.319 --> 00:57:51.190 align:start position:0%
while switch saves rasp and a bunch of s
registers

00:57:51.190 --> 00:57:51.200 align:start position:0%
registers
 

00:57:51.200 --> 00:57:53.030 align:start position:0%
registers
one<00:57:51.359><c> thing</c><00:57:51.520><c> it</c><00:57:51.599><c> does</c><00:57:51.839><c> not</c><00:57:52.160><c> save</c><00:57:52.799><c> is</c><00:57:52.960><c> the</c>

00:57:53.030 --> 00:57:53.040 align:start position:0%
one thing it does not save is the
 

00:57:53.040 --> 00:57:54.390 align:start position:0%
one thing it does not save is the
program<00:57:53.440><c> counter</c>

00:57:54.390 --> 00:57:54.400 align:start position:0%
program counter
 

00:57:54.400 --> 00:57:55.510 align:start position:0%
program counter
there's<00:57:54.559><c> no</c><00:57:54.720><c> mention</c><00:57:55.040><c> of</c><00:57:55.119><c> the</c><00:57:55.200><c> program</c>

00:57:55.510 --> 00:57:55.520 align:start position:0%
there's no mention of the program
 

00:57:55.520 --> 00:57:57.670 align:start position:0%
there's no mention of the program
counter<00:57:55.920><c> here</c>

00:57:57.670 --> 00:57:57.680 align:start position:0%
counter here
 

00:57:57.680 --> 00:58:04.950 align:start position:0%
counter here
so<00:57:58.000><c> why</c><00:57:58.240><c> is</c><00:57:58.400><c> that</c>

00:58:04.950 --> 00:58:04.960 align:start position:0%
 
 

00:58:04.960 --> 00:58:07.829 align:start position:0%
 
is<00:58:05.119><c> it</c><00:58:05.200><c> because</c><00:58:05.760><c> the</c><00:58:06.000><c> program</c><00:58:06.400><c> cutter</c><00:58:06.960><c> is</c><00:58:07.440><c> uh</c>

00:58:07.829 --> 00:58:07.839 align:start position:0%
is it because the program cutter is uh
 

00:58:07.839 --> 00:58:09.750 align:start position:0%
is it because the program cutter is uh
updated<00:58:08.400><c> with</c><00:58:08.640><c> like</c><00:58:08.880><c> the</c><00:58:09.040><c> function</c><00:58:09.440><c> calls</c>

00:58:09.750 --> 00:58:09.760 align:start position:0%
updated with like the function calls
 

00:58:09.760 --> 00:58:11.270 align:start position:0%
updated with like the function calls
anyway

00:58:11.270 --> 00:58:11.280 align:start position:0%
anyway
 

00:58:11.280 --> 00:58:13.270 align:start position:0%
anyway
yeah<00:58:11.680><c> it's</c><00:58:12.000><c> it's</c><00:58:12.480><c> the</c><00:58:12.640><c> program</c><00:58:12.960><c> counter</c>

00:58:13.270 --> 00:58:13.280 align:start position:0%
yeah it's it's the program counter
 

00:58:13.280 --> 00:58:15.030 align:start position:0%
yeah it's it's the program counter
there's<00:58:13.440><c> no</c><00:58:13.680><c> actual</c><00:58:14.079><c> information</c><00:58:14.559><c> value</c><00:58:14.960><c> in</c>

00:58:15.030 --> 00:58:15.040 align:start position:0%
there's no actual information value in
 

00:58:15.040 --> 00:58:16.470 align:start position:0%
there's no actual information value in
the<00:58:15.119><c> program</c><00:58:15.440><c> counter</c><00:58:15.839><c> we</c><00:58:16.000><c> know</c>

00:58:16.470 --> 00:58:16.480 align:start position:0%
the program counter we know
 

00:58:16.480 --> 00:58:18.390 align:start position:0%
the program counter we know
that<00:58:16.640><c> where</c><00:58:16.799><c> we're</c><00:58:16.960><c> executing</c><00:58:17.520><c> right</c><00:58:17.680><c> now</c><00:58:18.240><c> is</c>

00:58:18.390 --> 00:58:18.400 align:start position:0%
that where we're executing right now is
 

00:58:18.400 --> 00:58:19.910 align:start position:0%
that where we're executing right now is
in<00:58:18.640><c> switch</c>

00:58:19.910 --> 00:58:19.920 align:start position:0%
in switch
 

00:58:19.920 --> 00:58:21.990 align:start position:0%
in switch
right<00:58:20.240><c> so</c><00:58:20.400><c> there'll</c><00:58:20.559><c> be</c><00:58:20.720><c> no</c><00:58:21.200><c> point</c><00:58:21.520><c> in</c><00:58:21.680><c> saving</c>

00:58:21.990 --> 00:58:22.000 align:start position:0%
right so there'll be no point in saving
 

00:58:22.000 --> 00:58:23.510 align:start position:0%
right so there'll be no point in saving
the<00:58:22.079><c> program</c><00:58:22.400><c> counter</c><00:58:22.720><c> because</c><00:58:23.119><c> it</c><00:58:23.200><c> has</c><00:58:23.359><c> an</c>

00:58:23.510 --> 00:58:23.520 align:start position:0%
the program counter because it has an
 

00:58:23.520 --> 00:58:25.990 align:start position:0%
the program counter because it has an
extremely<00:58:24.000><c> predictable</c><00:58:24.559><c> value</c><00:58:24.960><c> namely</c>

00:58:25.990 --> 00:58:26.000 align:start position:0%
extremely predictable value namely
 

00:58:26.000 --> 00:58:27.589 align:start position:0%
extremely predictable value namely
this<00:58:26.240><c> instruction</c><00:58:26.880><c> the</c><00:58:27.040><c> address</c><00:58:27.359><c> of</c><00:58:27.440><c> this</c>

00:58:27.589 --> 00:58:27.599 align:start position:0%
this instruction the address of this
 

00:58:27.599 --> 00:58:29.990 align:start position:0%
this instruction the address of this
instruction<00:58:28.000><c> and</c><00:58:28.160><c> switch</c>

00:58:29.990 --> 00:58:30.000 align:start position:0%
instruction and switch
 

00:58:30.000 --> 00:58:31.829 align:start position:0%
instruction and switch
what<00:58:30.240><c> we</c><00:58:30.400><c> really</c><00:58:30.720><c> care</c><00:58:30.960><c> about</c><00:58:31.280><c> is</c><00:58:31.440><c> where</c><00:58:31.680><c> we</c>

00:58:31.829 --> 00:58:31.839 align:start position:0%
what we really care about is where we
 

00:58:31.839 --> 00:58:33.270 align:start position:0%
what we really care about is where we
were<00:58:32.000><c> called</c><00:58:32.400><c> from</c>

00:58:33.270 --> 00:58:33.280 align:start position:0%
were called from
 

00:58:33.280 --> 00:58:34.829 align:start position:0%
were called from
because<00:58:33.520><c> when</c><00:58:33.680><c> we</c><00:58:33.839><c> switch</c><00:58:34.240><c> back</c><00:58:34.400><c> to</c><00:58:34.559><c> this</c>

00:58:34.829 --> 00:58:34.839 align:start position:0%
because when we switch back to this
 

00:58:34.839 --> 00:58:37.670 align:start position:0%
because when we switch back to this
thread<00:58:35.920><c> we</c><00:58:36.079><c> want</c><00:58:36.240><c> to</c><00:58:36.400><c> continue</c><00:58:36.799><c> executing</c><00:58:37.359><c> out</c>

00:58:37.670 --> 00:58:37.680 align:start position:0%
thread we want to continue executing out
 

00:58:37.680 --> 00:58:39.670 align:start position:0%
thread we want to continue executing out
whatever<00:58:38.079><c> point</c><00:58:38.400><c> switch</c><00:58:38.720><c> was</c><00:58:38.960><c> called</c><00:58:39.200><c> from</c>

00:58:39.670 --> 00:58:39.680 align:start position:0%
whatever point switch was called from
 

00:58:39.680 --> 00:58:42.630 align:start position:0%
whatever point switch was called from
and<00:58:39.839><c> it's</c><00:58:40.079><c> ra</c><00:58:40.640><c> that</c><00:58:40.799><c> holds</c><00:58:41.920><c> the</c><00:58:42.079><c> address</c><00:58:42.559><c> of</c>

00:58:42.630 --> 00:58:42.640 align:start position:0%
and it's ra that holds the address of
 

00:58:42.640 --> 00:58:44.309 align:start position:0%
and it's ra that holds the address of
the<00:58:42.880><c> instruction</c><00:58:43.359><c> that</c><00:58:43.520><c> switch</c><00:58:43.839><c> was</c><00:58:44.000><c> called</c>

00:58:44.309 --> 00:58:44.319 align:start position:0%
the instruction that switch was called
 

00:58:44.319 --> 00:58:45.510 align:start position:0%
the instruction that switch was called
from

00:58:45.510 --> 00:58:45.520 align:start position:0%
from
 

00:58:45.520 --> 00:58:49.349 align:start position:0%
from
so<00:58:45.680><c> it's</c><00:58:46.000><c> ra</c><00:58:46.960><c> that's</c><00:58:47.280><c> being</c><00:58:47.520><c> saved</c><00:58:47.760><c> away</c><00:58:48.079><c> here</c>

00:58:49.349 --> 00:58:49.359 align:start position:0%
so it's ra that's being saved away here
 

00:58:49.359 --> 00:58:53.910 align:start position:0%
so it's ra that's being saved away here
and<00:58:49.599><c> our</c><00:58:49.839><c> a</c><00:58:50.079><c> is</c><00:58:50.240><c> the</c><00:58:50.400><c> point</c><00:58:50.640><c> at</c><00:58:50.720><c> which</c><00:58:50.880><c> we'll</c><00:58:51.040><c> be</c>

00:58:53.910 --> 00:58:53.920 align:start position:0%
 
 

00:58:53.920 --> 00:58:56.390 align:start position:0%
 
executing<00:58:54.400><c> out</c><00:58:54.640><c> again</c><00:58:55.680><c> let's</c><00:58:55.839><c> switch</c><00:58:56.160><c> returns</c>

00:58:56.390 --> 00:58:56.400 align:start position:0%
executing out again let's switch returns
 

00:58:56.400 --> 00:58:59.109 align:start position:0%
executing out again let's switch returns
so<00:58:56.559><c> we</c><00:58:56.640><c> can</c><00:58:56.720><c> even</c><00:58:56.960><c> print</c><00:58:57.200><c> that</c><00:58:57.359><c> we</c><00:58:57.440><c> can</c><00:58:57.680><c> print</c>

00:58:59.109 --> 00:58:59.119 align:start position:0%
so we can even print that we can print
 

00:58:59.119 --> 00:59:03.589 align:start position:0%
so we can even print that we can print
our<00:58:59.359><c> a</c>

00:59:03.589 --> 00:59:03.599 align:start position:0%
 
 

00:59:03.599 --> 00:59:05.030 align:start position:0%
 
we<00:59:03.760><c> can</c><00:59:03.920><c> print</c><00:59:04.160><c> our</c><00:59:04.319><c> a</c><00:59:04.559><c> and</c><00:59:04.720><c> you</c><00:59:04.799><c> know</c><00:59:04.960><c> we</c>

00:59:05.030 --> 00:59:05.040 align:start position:0%
we can print our a and you know we
 

00:59:05.040 --> 00:59:06.710 align:start position:0%
we can print our a and you know we
haven't<00:59:05.359><c> actually</c><00:59:05.599><c> switched</c><00:59:05.920><c> threads</c><00:59:06.319><c> yet</c>

00:59:06.710 --> 00:59:06.720 align:start position:0%
haven't actually switched threads yet
 

00:59:06.720 --> 00:59:08.630 align:start position:0%
haven't actually switched threads yet
you<00:59:06.960><c> remember</c><00:59:07.280><c> we</c><00:59:07.359><c> came</c><00:59:07.599><c> here</c><00:59:07.839><c> from</c><00:59:08.000><c> the</c><00:59:08.160><c> sched</c>

00:59:08.630 --> 00:59:08.640 align:start position:0%
you remember we came here from the sched
 

00:59:08.640 --> 00:59:09.910 align:start position:0%
you remember we came here from the sched
function<00:59:09.599><c> um</c>

00:59:09.910 --> 00:59:09.920 align:start position:0%
function um
 

00:59:09.920 --> 00:59:12.150 align:start position:0%
function um
so<00:59:10.160><c> our</c><00:59:10.319><c> a</c><00:59:10.559><c> is</c><00:59:11.359><c> as</c><00:59:11.520><c> you</c><00:59:11.599><c> might</c><00:59:11.760><c> expect</c><00:59:12.079><c> a</c>

00:59:12.150 --> 00:59:12.160 align:start position:0%
so our a is as you might expect a
 

00:59:12.160 --> 00:59:14.789 align:start position:0%
so our a is as you might expect a
pointer<00:59:12.400><c> back</c><00:59:12.559><c> into</c><00:59:12.799><c> the</c><00:59:12.880><c> sched</c><00:59:13.280><c> function</c>

00:59:14.789 --> 00:59:14.799 align:start position:0%
pointer back into the sched function
 

00:59:14.799 --> 00:59:17.109 align:start position:0%
pointer back into the sched function
another<00:59:15.119><c> question</c><00:59:15.440><c> is</c><00:59:15.599><c> how</c><00:59:15.760><c> come</c><00:59:16.079><c> switch</c><00:59:16.799><c> only</c>

00:59:17.109 --> 00:59:17.119 align:start position:0%
another question is how come switch only
 

00:59:17.119 --> 00:59:19.430 align:start position:0%
another question is how come switch only
saves<00:59:17.680><c> 14</c><00:59:18.160><c> registers</c><00:59:18.720><c> i</c><00:59:18.799><c> counted</c><00:59:19.119><c> them</c>

00:59:19.430 --> 00:59:19.440 align:start position:0%
saves 14 registers i counted them
 

00:59:19.440 --> 00:59:22.630 align:start position:0%
saves 14 registers i counted them
and<00:59:19.599><c> only</c><00:59:19.760><c> saves</c><00:59:20.079><c> and</c><00:59:20.160><c> restores</c><00:59:20.799><c> 14</c><00:59:21.200><c> registers</c>

00:59:22.630 --> 00:59:22.640 align:start position:0%
and only saves and restores 14 registers
 

00:59:22.640 --> 00:59:25.430 align:start position:0%
and only saves and restores 14 registers
even<00:59:22.799><c> though</c><00:59:22.960><c> the</c><00:59:23.040><c> risk</c><00:59:23.359><c> 5</c><00:59:23.760><c> has</c><00:59:24.079><c> 32</c><00:59:24.720><c> registers</c>

00:59:25.430 --> 00:59:25.440 align:start position:0%
even though the risk 5 has 32 registers
 

00:59:25.440 --> 00:59:27.349 align:start position:0%
even though the risk 5 has 32 registers
available<00:59:25.920><c> for</c><00:59:26.079><c> the</c>

00:59:27.349 --> 00:59:27.359 align:start position:0%
available for the
 

00:59:27.359 --> 00:59:31.670 align:start position:0%
available for the
for<00:59:27.680><c> use</c><00:59:28.000><c> for</c><00:59:28.240><c> code</c><00:59:28.559><c> to</c><00:59:28.640><c> use</c><00:59:29.920><c> why</c>

00:59:31.670 --> 00:59:31.680 align:start position:0%
for use for code to use why
 

00:59:31.680 --> 00:59:33.750 align:start position:0%
for use for code to use why
why<00:59:31.920><c> only</c><00:59:32.160><c> half</c><00:59:32.319><c> the</c><00:59:32.480><c> registers</c><00:59:32.960><c> are</c><00:59:33.040><c> saved</c>

00:59:33.750 --> 00:59:33.760 align:start position:0%
why only half the registers are saved
 

00:59:33.760 --> 00:59:35.510 align:start position:0%
why only half the registers are saved
well<00:59:34.000><c> when</c><00:59:34.240><c> switch</c><00:59:34.559><c> was</c><00:59:34.799><c> called</c><00:59:35.200><c> it</c><00:59:35.280><c> was</c>

00:59:35.510 --> 00:59:35.520 align:start position:0%
well when switch was called it was
 

00:59:35.520 --> 00:59:37.510 align:start position:0%
well when switch was called it was
called<00:59:35.839><c> as</c><00:59:35.920><c> a</c><00:59:36.079><c> normal</c><00:59:36.480><c> function</c><00:59:36.880><c> so</c><00:59:37.040><c> whoever</c>

00:59:37.510 --> 00:59:37.520 align:start position:0%
called as a normal function so whoever
 

00:59:37.520 --> 00:59:39.109 align:start position:0%
called as a normal function so whoever
called<00:59:37.760><c> switch</c><00:59:38.160><c> already</c><00:59:38.480><c> assumed</c><00:59:38.960><c> well</c>

00:59:39.109 --> 00:59:39.119 align:start position:0%
called switch already assumed well
 

00:59:39.119 --> 00:59:41.030 align:start position:0%
called switch already assumed well
switch<00:59:39.440><c> might</c><00:59:39.760><c> modify</c><00:59:40.240><c> those</c><00:59:40.480><c> so</c><00:59:40.640><c> that</c>

00:59:41.030 --> 00:59:41.040 align:start position:0%
switch might modify those so that
 

00:59:41.040 --> 00:59:43.829 align:start position:0%
switch might modify those so that
that<00:59:41.520><c> function</c><00:59:41.920><c> already</c><00:59:42.240><c> saved</c><00:59:42.480><c> that</c><00:59:43.359><c> on</c><00:59:43.599><c> its</c>

00:59:43.829 --> 00:59:43.839 align:start position:0%
that function already saved that on its
 

00:59:43.839 --> 00:59:44.470 align:start position:0%
that function already saved that on its
stack

00:59:44.470 --> 00:59:44.480 align:start position:0%
stack
 

00:59:44.480 --> 00:59:47.430 align:start position:0%
stack
meaning<00:59:44.880><c> that</c><00:59:45.280><c> like</c><00:59:45.599><c> when</c><00:59:45.760><c> we</c><00:59:46.000><c> jump</c><00:59:46.720><c> from</c><00:59:47.200><c> one</c>

00:59:47.430 --> 00:59:47.440 align:start position:0%
meaning that like when we jump from one
 

00:59:47.440 --> 00:59:48.710 align:start position:0%
meaning that like when we jump from one
to<00:59:47.599><c> the</c><00:59:47.760><c> other</c>

00:59:48.710 --> 00:59:48.720 align:start position:0%
to the other
 

00:59:48.720 --> 00:59:51.990 align:start position:0%
to the other
uh<00:59:48.960><c> that</c><00:59:49.200><c> one's</c><00:59:49.440><c> going</c><00:59:49.520><c> to</c><00:59:49.760><c> self-restore</c><00:59:50.640><c> its</c>

00:59:51.990 --> 00:59:52.000 align:start position:0%
uh that one's going to self-restore its
 

00:59:52.000 --> 00:59:54.950 align:start position:0%
uh that one's going to self-restore its
caller<00:59:52.960><c> saved</c><00:59:53.280><c> registers</c><00:59:54.240><c> that's</c><00:59:54.480><c> exactly</c>

00:59:54.950 --> 00:59:54.960 align:start position:0%
caller saved registers that's exactly
 

00:59:54.960 --> 00:59:56.630 align:start position:0%
caller saved registers that's exactly
right<00:59:55.280><c> the</c><00:59:55.520><c> switch</c><00:59:56.000><c> is</c><00:59:56.160><c> a</c>

00:59:56.630 --> 00:59:56.640 align:start position:0%
right the switch is a
 

00:59:56.640 --> 00:59:59.829 align:start position:0%
right the switch is a
called<00:59:57.040><c> from</c><00:59:57.280><c> c</c><00:59:57.520><c> code</c><00:59:58.240><c> we</c><00:59:58.480><c> know</c><00:59:59.200><c> that</c><00:59:59.440><c> the</c><00:59:59.599><c> c</c>

00:59:59.829 --> 00:59:59.839 align:start position:0%
called from c code we know that the c
 

00:59:59.839 --> 01:00:04.150 align:start position:0%
called from c code we know that the c
compiler<01:00:00.640><c> um</c><01:00:01.839><c> saves</c><01:00:02.319><c> on</c><01:00:02.559><c> the</c><01:00:02.640><c> current</c><01:00:03.040><c> stack</c>

01:00:04.150 --> 01:00:04.160 align:start position:0%
compiler um saves on the current stack
 

01:00:04.160 --> 01:00:07.750 align:start position:0%
compiler um saves on the current stack
uh<01:00:04.480><c> any</c><01:00:04.960><c> caller</c><01:00:05.839><c> saved</c><01:00:06.240><c> registers</c><01:00:06.880><c> that</c><01:00:07.040><c> have</c>

01:00:07.750 --> 01:00:07.760 align:start position:0%
uh any caller saved registers that have
 

01:00:07.760 --> 01:00:09.109 align:start position:0%
uh any caller saved registers that have
values<01:00:08.079><c> in</c><01:00:08.240><c> them</c><01:00:08.319><c> that</c><01:00:08.480><c> the</c><01:00:08.559><c> compiler</c><01:00:09.040><c> is</c>

01:00:09.109 --> 01:00:09.119 align:start position:0%
values in them that the compiler is
 

01:00:09.119 --> 01:00:11.190 align:start position:0%
values in them that the compiler is
going<01:00:09.200><c> to</c><01:00:09.280><c> need</c><01:00:09.520><c> later</c>

01:00:11.190 --> 01:00:11.200 align:start position:0%
going to need later
 

01:00:11.200 --> 01:00:13.109 align:start position:0%
going to need later
and<01:00:11.359><c> those</c><01:00:11.839><c> caller</c><01:00:12.240><c> saved</c><01:00:12.559><c> registers</c>

01:00:13.109 --> 01:00:13.119 align:start position:0%
and those caller saved registers
 

01:00:13.119 --> 01:00:15.990 align:start position:0%
and those caller saved registers
actually<01:00:13.920><c> include</c>

01:00:15.990 --> 01:00:16.000 align:start position:0%
actually include
 

01:00:16.000 --> 01:00:19.030 align:start position:0%
actually include
i<01:00:16.079><c> think</c><01:00:16.319><c> there's</c><01:00:17.599><c> 18</c>

01:00:19.030 --> 01:00:19.040 align:start position:0%
i think there's 18
 

01:00:19.040 --> 01:00:20.309 align:start position:0%
i think there's 18
depending<01:00:19.359><c> on</c><01:00:19.440><c> how</c><01:00:19.599><c> you</c><01:00:19.760><c> count</c><01:00:20.000><c> them</c><01:00:20.160><c> they're</c>

01:00:20.309 --> 01:00:20.319 align:start position:0%
depending on how you count them they're
 

01:00:20.319 --> 01:00:22.150 align:start position:0%
depending on how you count them they're
somewhere<01:00:20.559><c> between</c><01:00:20.880><c> 15</c><01:00:21.280><c> and</c><01:00:21.359><c> 18</c>

01:00:22.150 --> 01:00:22.160 align:start position:0%
somewhere between 15 and 18
 

01:00:22.160 --> 01:00:25.349 align:start position:0%
somewhere between 15 and 18
caller<01:00:22.640><c> saved</c><01:00:22.960><c> registers</c><01:00:24.880><c> and</c><01:00:25.040><c> so</c><01:00:25.200><c> the</c>

01:00:25.349 --> 01:00:25.359 align:start position:0%
caller saved registers and so the
 

01:00:25.359 --> 01:00:27.109 align:start position:0%
caller saved registers and so the
registers<01:00:25.839><c> we</c><01:00:26.079><c> see</c><01:00:26.319><c> here</c>

01:00:27.109 --> 01:00:27.119 align:start position:0%
registers we see here
 

01:00:27.119 --> 01:00:29.190 align:start position:0%
registers we see here
are<01:00:27.359><c> all</c><01:00:27.440><c> the</c><01:00:27.599><c> registers</c><01:00:28.160><c> that</c><01:00:28.319><c> aren't</c><01:00:28.799><c> caller</c>

01:00:29.190 --> 01:00:29.200 align:start position:0%
are all the registers that aren't caller
 

01:00:29.200 --> 01:00:30.789 align:start position:0%
are all the registers that aren't caller
saved<01:00:29.599><c> and</c><01:00:29.760><c> that</c><01:00:29.839><c> the</c><01:00:30.000><c> compiler</c>

01:00:30.789 --> 01:00:30.799 align:start position:0%
saved and that the compiler
 

01:00:30.799 --> 01:00:32.950 align:start position:0%
saved and that the compiler
doesn't<01:00:31.119><c> promise</c><01:00:31.520><c> to</c><01:00:31.680><c> save</c><01:00:32.079><c> but</c><01:00:32.319><c> nevertheless</c>

01:00:32.950 --> 01:00:32.960 align:start position:0%
doesn't promise to save but nevertheless
 

01:00:32.960 --> 01:00:35.349 align:start position:0%
doesn't promise to save but nevertheless
may<01:00:33.200><c> hold</c>

01:00:35.349 --> 01:00:35.359 align:start position:0%
may hold
 

01:00:35.359 --> 01:00:37.190 align:start position:0%
may hold
values<01:00:35.839><c> that</c><01:00:35.920><c> are</c><01:00:36.079><c> needed</c><01:00:36.480><c> by</c><01:00:36.640><c> the</c><01:00:36.799><c> calling</c>

01:00:37.190 --> 01:00:37.200 align:start position:0%
values that are needed by the calling
 

01:00:37.200 --> 01:00:38.789 align:start position:0%
values that are needed by the calling
function<01:00:37.599><c> so</c><01:00:37.760><c> we</c><01:00:37.839><c> only</c><01:00:38.079><c> have</c><01:00:38.160><c> to</c><01:00:38.240><c> save</c><01:00:38.559><c> the</c>

01:00:38.789 --> 01:00:38.799 align:start position:0%
function so we only have to save the
 

01:00:38.799 --> 01:00:41.030 align:start position:0%
function so we only have to save the
callee<01:00:39.599><c> saved</c><01:00:40.079><c> registers</c>

01:00:41.030 --> 01:00:41.040 align:start position:0%
callee saved registers
 

01:00:41.040 --> 01:00:45.910 align:start position:0%
callee saved registers
when<01:00:41.280><c> we're</c><01:00:41.440><c> switching</c><01:00:41.839><c> threads</c>

01:00:45.910 --> 01:00:45.920 align:start position:0%
 
 

01:00:45.920 --> 01:00:49.750 align:start position:0%
 
okay<01:00:46.480><c> um</c><01:00:48.559><c> final</c><01:00:48.880><c> thing</c><01:00:48.960><c> i</c><01:00:49.040><c> want</c><01:00:49.200><c> to</c><01:00:49.359><c> print</c>

01:00:49.750 --> 01:00:49.760 align:start position:0%
okay um final thing i want to print
 

01:00:49.760 --> 01:00:52.230 align:start position:0%
okay um final thing i want to print
is<01:00:50.240><c> the</c><01:00:50.720><c> we</c><01:00:50.880><c> do</c><01:00:51.040><c> we</c><01:00:51.200><c> do</c><01:00:51.359><c> save</c><01:00:51.680><c> and</c><01:00:51.760><c> restore</c><01:00:52.079><c> the</c>

01:00:52.230 --> 01:00:52.240 align:start position:0%
is the we do we do save and restore the
 

01:00:52.240 --> 01:00:53.030 align:start position:0%
is the we do we do save and restore the
stack<01:00:52.480><c> pointer</c>

01:00:53.030 --> 01:00:53.040 align:start position:0%
stack pointer
 

01:00:53.040 --> 01:00:54.710 align:start position:0%
stack pointer
the<01:00:53.200><c> current</c><01:00:53.440><c> stack</c><01:00:53.680><c> pointer</c><01:00:54.079><c> it's</c><01:00:54.240><c> like</c><01:00:54.480><c> hard</c>

01:00:54.710 --> 01:00:54.720 align:start position:0%
the current stack pointer it's like hard
 

01:00:54.720 --> 01:00:56.150 align:start position:0%
the current stack pointer it's like hard
to<01:00:54.799><c> tell</c><01:00:55.040><c> from</c><01:00:55.200><c> this</c><01:00:55.359><c> value</c><01:00:55.599><c> what</c><01:00:55.760><c> that</c><01:00:55.920><c> means</c>

01:00:56.150 --> 01:00:56.160 align:start position:0%
to tell from this value what that means
 

01:00:56.160 --> 01:00:56.710 align:start position:0%
to tell from this value what that means
but<01:00:56.319><c> it's</c>

01:00:56.710 --> 01:00:56.720 align:start position:0%
but it's
 

01:00:56.720 --> 01:00:59.270 align:start position:0%
but it's
the<01:00:56.799><c> kernel</c><01:00:57.200><c> stack</c><01:00:57.599><c> of</c><01:00:58.240><c> the</c><01:00:58.400><c> current</c><01:00:58.799><c> process</c>

01:00:59.270 --> 01:00:59.280 align:start position:0%
the kernel stack of the current process
 

01:00:59.280 --> 01:01:00.630 align:start position:0%
the kernel stack of the current process
which

01:01:00.630 --> 01:01:00.640 align:start position:0%
which
 

01:01:00.640 --> 01:01:01.910 align:start position:0%
which
i<01:01:00.799><c> don't</c><01:01:00.880><c> know</c><01:01:00.960><c> if</c><01:01:01.040><c> you</c><01:01:01.200><c> recall</c><01:01:01.520><c> but</c><01:01:01.760><c> is</c>

01:01:01.910 --> 01:01:01.920 align:start position:0%
i don't know if you recall but is
 

01:01:01.920 --> 01:01:03.990 align:start position:0%
i don't know if you recall but is
allocated<01:01:02.880><c> is</c><01:01:03.119><c> mapped</c><01:01:03.520><c> by</c><01:01:03.680><c> the</c><01:01:03.760><c> virtual</c>

01:01:03.990 --> 01:01:04.000 align:start position:0%
allocated is mapped by the virtual
 

01:01:04.000 --> 01:01:07.270 align:start position:0%
allocated is mapped by the virtual
memory<01:01:04.319><c> system</c><01:01:04.559><c> at</c><01:01:04.640><c> high</c><01:01:04.880><c> memory</c>

01:01:07.270 --> 01:01:07.280 align:start position:0%
memory system at high memory
 

01:01:07.280 --> 01:01:12.230 align:start position:0%
memory system at high memory
okay<01:01:07.599><c> so</c><01:01:09.280><c> um</c>

01:01:12.230 --> 01:01:12.240 align:start position:0%
 
 

01:01:12.240 --> 01:01:14.150 align:start position:0%
 
okay<01:01:12.559><c> so</c><01:01:12.799><c> so</c><01:01:12.960><c> the</c><01:01:13.359><c> we're</c><01:01:13.520><c> going</c><01:01:13.599><c> to</c><01:01:13.680><c> save</c><01:01:13.920><c> away</c>

01:01:14.150 --> 01:01:14.160 align:start position:0%
okay so so the we're going to save away
 

01:01:14.160 --> 01:01:15.750 align:start position:0%
okay so so the we're going to save away
the<01:01:14.400><c> current</c><01:01:14.640><c> registers</c><01:01:15.119><c> and</c><01:01:15.200><c> restore</c>

01:01:15.750 --> 01:01:15.760 align:start position:0%
the current registers and restore
 

01:01:15.760 --> 01:01:17.510 align:start position:0%
the current registers and restore
registers<01:01:16.400><c> from</c>

01:01:17.510 --> 01:01:17.520 align:start position:0%
registers from
 

01:01:17.520 --> 01:01:20.230 align:start position:0%
registers from
uh<01:01:17.839><c> the</c><01:01:18.000><c> scheduler</c><01:01:18.480><c> threads</c><01:01:18.880><c> context</c><01:01:19.839><c> um</c><01:01:20.160><c> i</c>

01:01:20.230 --> 01:01:20.240 align:start position:0%
uh the scheduler threads context um i
 

01:01:20.240 --> 01:01:21.270 align:start position:0%
uh the scheduler threads context um i
don't<01:01:20.400><c> want</c><01:01:20.559><c> to</c><01:01:20.720><c> like</c>

01:01:21.270 --> 01:01:21.280 align:start position:0%
don't want to like
 

01:01:21.280 --> 01:01:23.190 align:start position:0%
don't want to like
execute<01:01:21.680><c> every</c><01:01:21.839><c> single</c><01:01:22.079><c> one</c><01:01:22.319><c> of</c><01:01:22.400><c> these</c><01:01:22.960><c> lows</c>

01:01:23.190 --> 01:01:23.200 align:start position:0%
execute every single one of these lows
 

01:01:23.200 --> 01:01:24.549 align:start position:0%
execute every single one of these lows
in<01:01:23.359><c> store</c><01:01:23.599><c> so</c><01:01:23.760><c> i'm</c><01:01:23.839><c> going</c><01:01:24.000><c> to</c><01:01:24.160><c> step</c>

01:01:24.549 --> 01:01:24.559 align:start position:0%
in store so i'm going to step
 

01:01:24.559 --> 01:01:28.549 align:start position:0%
in store so i'm going to step
over<01:01:26.000><c> all</c><01:01:26.559><c> the</c><01:01:26.720><c> 14</c><01:01:27.200><c> loads</c><01:01:27.680><c> the</c><01:01:27.839><c> 14</c><01:01:28.160><c> stores</c><01:01:28.480><c> and</c>

01:01:28.549 --> 01:01:28.559 align:start position:0%
over all the 14 loads the 14 stores and
 

01:01:28.559 --> 01:01:29.990 align:start position:0%
over all the 14 loads the 14 stores and
the<01:01:28.640><c> 14</c><01:01:29.040><c> loads</c><01:01:29.359><c> gonna</c>

01:01:29.990 --> 01:01:30.000 align:start position:0%
the 14 loads gonna
 

01:01:30.000 --> 01:01:32.230 align:start position:0%
the 14 loads gonna
proceed<01:01:30.480><c> directly</c><01:01:30.960><c> to</c><01:01:31.119><c> the</c><01:01:31.760><c> return</c>

01:01:32.230 --> 01:01:32.240 align:start position:0%
proceed directly to the return
 

01:01:32.240 --> 01:01:33.910 align:start position:0%
proceed directly to the return
instructions<01:01:32.799><c> okay</c><01:01:32.960><c> so</c><01:01:33.119><c> we</c><01:01:33.359><c> executed</c>

01:01:33.910 --> 01:01:33.920 align:start position:0%
instructions okay so we executed
 

01:01:33.920 --> 01:01:37.270 align:start position:0%
instructions okay so we executed
everything<01:01:34.240><c> in</c><01:01:34.319><c> switch</c><01:01:34.720><c> except</c><01:01:35.119><c> the</c><01:01:35.200><c> return</c>

01:01:37.270 --> 01:01:37.280 align:start position:0%
everything in switch except the return
 

01:01:37.280 --> 01:01:39.589 align:start position:0%
everything in switch except the return
before<01:01:37.520><c> we</c><01:01:37.839><c> do</c><01:01:38.000><c> the</c><01:01:38.160><c> return</c><01:01:38.559><c> we'll</c><01:01:38.720><c> just</c><01:01:39.359><c> print</c>

01:01:39.589 --> 01:01:39.599 align:start position:0%
before we do the return we'll just print
 

01:01:39.599 --> 01:01:41.190 align:start position:0%
before we do the return we'll just print
the<01:01:39.760><c> interesting</c><01:01:40.079><c> registers</c><01:01:40.640><c> again</c><01:01:40.880><c> to</c><01:01:41.040><c> see</c>

01:01:41.190 --> 01:01:41.200 align:start position:0%
the interesting registers again to see
 

01:01:41.200 --> 01:01:42.309 align:start position:0%
the interesting registers again to see
where<01:01:41.359><c> we</c><01:01:41.520><c> are</c><01:01:41.760><c> so</c>

01:01:42.309 --> 01:01:42.319 align:start position:0%
where we are so
 

01:01:42.319 --> 01:01:45.430 align:start position:0%
where we are so
stack<01:01:42.640><c> pointer</c><01:01:43.599><c> um</c><01:01:44.799><c> now</c><01:01:45.200><c> is</c>

01:01:45.430 --> 01:01:45.440 align:start position:0%
stack pointer um now is
 

01:01:45.440 --> 01:01:47.430 align:start position:0%
stack pointer um now is
has<01:01:45.680><c> a</c><01:01:45.760><c> different</c><01:01:46.079><c> value</c><01:01:46.799><c> the</c><01:01:46.880><c> stack</c><01:01:47.119><c> pointer</c>

01:01:47.430 --> 01:01:47.440 align:start position:0%
has a different value the stack pointer
 

01:01:47.440 --> 01:01:48.789 align:start position:0%
has a different value the stack pointer
now<01:01:47.599><c> points</c><01:01:47.920><c> into</c><01:01:48.079><c> this</c><01:01:48.319><c> stack</c>

01:01:48.789 --> 01:01:48.799 align:start position:0%
now points into this stack
 

01:01:48.799 --> 01:01:51.990 align:start position:0%
now points into this stack
zero<01:01:50.319><c> area</c><01:01:50.640><c> in</c><01:01:50.720><c> memory</c><01:01:51.119><c> and</c><01:01:51.200><c> this</c><01:01:51.359><c> is</c><01:01:51.520><c> actually</c>

01:01:51.990 --> 01:01:52.000 align:start position:0%
zero area in memory and this is actually
 

01:01:52.000 --> 01:01:54.789 align:start position:0%
zero area in memory and this is actually
the<01:01:52.480><c> place</c><01:01:53.200><c> very</c><01:01:53.599><c> very</c><01:01:54.000><c> early</c><01:01:54.319><c> in</c><01:01:54.400><c> the</c><01:01:54.480><c> boot</c>

01:01:54.789 --> 01:01:54.799 align:start position:0%
the place very very early in the boot
 

01:01:54.799 --> 01:01:55.829 align:start position:0%
the place very very early in the boot
sequence

01:01:55.829 --> 01:01:55.839 align:start position:0%
sequence
 

01:01:55.839 --> 01:01:58.870 align:start position:0%
sequence
where<01:01:56.160><c> start.s</c><01:01:57.680><c> puts</c><01:01:57.920><c> the</c><01:01:58.160><c> stack</c><01:01:58.480><c> so</c><01:01:58.640><c> it</c><01:01:58.799><c> can</c>

01:01:58.870 --> 01:01:58.880 align:start position:0%
where start.s puts the stack so it can
 

01:01:58.880 --> 01:01:59.349 align:start position:0%
where start.s puts the stack so it can
make

01:01:59.349 --> 01:01:59.359 align:start position:0%
make
 

01:01:59.359 --> 01:02:01.750 align:start position:0%
make
call<01:01:59.599><c> the</c><01:01:59.760><c> ferry</c><01:02:00.160><c> for</c><01:02:00.480><c> c</c><01:02:00.799><c> function</c><01:02:01.520><c> so</c>

01:02:01.750 --> 01:02:01.760 align:start position:0%
call the ferry for c function so
 

01:02:01.760 --> 01:02:03.589 align:start position:0%
call the ferry for c function so
actually<01:02:02.000><c> back</c><01:02:02.240><c> on</c><01:02:02.319><c> the</c><01:02:02.480><c> original</c><01:02:02.880><c> bootstack</c>

01:02:03.589 --> 01:02:03.599 align:start position:0%
actually back on the original bootstack
 

01:02:03.599 --> 01:02:06.230 align:start position:0%
actually back on the original bootstack
for<01:02:03.760><c> this</c><01:02:04.000><c> cpu</c><01:02:04.480><c> which</c><01:02:04.880><c> just</c><01:02:05.599><c> happens</c><01:02:06.000><c> to</c><01:02:06.160><c> be</c>

01:02:06.230 --> 01:02:06.240 align:start position:0%
for this cpu which just happens to be
 

01:02:06.240 --> 01:02:10.470 align:start position:0%
for this cpu which just happens to be
where<01:02:06.400><c> the</c><01:02:06.559><c> scheduler</c><01:02:07.039><c> runs</c>

01:02:10.470 --> 01:02:10.480 align:start position:0%
 
 

01:02:10.480 --> 01:02:13.589 align:start position:0%
 
okay<01:02:11.920><c> the</c><01:02:12.160><c> program</c><01:02:12.480><c> counter</c>

01:02:13.589 --> 01:02:13.599 align:start position:0%
okay the program counter
 

01:02:13.599 --> 01:02:14.950 align:start position:0%
okay the program counter
not<01:02:13.760><c> very</c><01:02:14.000><c> interesting</c><01:02:14.319><c> or</c><01:02:14.480><c> in</c><01:02:14.640><c> switch</c>

01:02:14.950 --> 01:02:14.960 align:start position:0%
not very interesting or in switch
 

01:02:14.960 --> 01:02:18.069 align:start position:0%
not very interesting or in switch
because<01:02:15.119><c> we</c><01:02:15.280><c> haven't</c><01:02:15.440><c> returned</c><01:02:15.839><c> yet</c><01:02:16.559><c> and</c>

01:02:18.069 --> 01:02:18.079 align:start position:0%
because we haven't returned yet and
 

01:02:18.079 --> 01:02:21.190 align:start position:0%
because we haven't returned yet and
the<01:02:18.319><c> ra</c><01:02:18.839><c> register</c><01:02:20.079><c> now</c><01:02:20.319><c> points</c><01:02:20.640><c> to</c><01:02:20.799><c> scheduler</c>

01:02:21.190 --> 01:02:21.200 align:start position:0%
the ra register now points to scheduler
 

01:02:21.200 --> 01:02:22.549 align:start position:0%
the ra register now points to scheduler
because<01:02:21.359><c> we've</c><01:02:21.599><c> loaded</c>

01:02:22.549 --> 01:02:22.559 align:start position:0%
because we've loaded
 

01:02:22.559 --> 01:02:25.589 align:start position:0%
because we've loaded
uh<01:02:22.799><c> we've</c><01:02:22.960><c> restored</c><01:02:23.680><c> the</c><01:02:24.480><c> register</c><01:02:24.960><c> set</c>

01:02:25.589 --> 01:02:25.599 align:start position:0%
uh we've restored the register set
 

01:02:25.599 --> 01:02:28.870 align:start position:0%
uh we've restored the register set
previously<01:02:26.079><c> saved</c><01:02:26.240><c> by</c><01:02:26.400><c> the</c><01:02:26.559><c> scheduler</c><01:02:26.960><c> thread</c>

01:02:28.870 --> 01:02:28.880 align:start position:0%
previously saved by the scheduler thread
 

01:02:28.880 --> 01:02:30.789 align:start position:0%
previously saved by the scheduler thread
and<01:02:29.119><c> indeed</c><01:02:29.359><c> we're</c><01:02:29.520><c> really</c><01:02:29.839><c> now</c><01:02:30.559><c> in</c><01:02:30.640><c> the</c>

01:02:30.789 --> 01:02:30.799 align:start position:0%
and indeed we're really now in the
 

01:02:30.799 --> 01:02:33.430 align:start position:0%
and indeed we're really now in the
schedulers<01:02:31.280><c> right</c><01:02:31.440><c> if</c><01:02:31.599><c> i</c><01:02:31.680><c> were</c><01:02:31.839><c> on</c><01:02:32.000><c> where</c>

01:02:33.430 --> 01:02:33.440 align:start position:0%
schedulers right if i were on where
 

01:02:33.440 --> 01:02:34.789 align:start position:0%
schedulers right if i were on where
where<01:02:33.680><c> now</c><01:02:33.839><c> looks</c><01:02:34.079><c> totally</c><01:02:34.400><c> different</c><01:02:34.640><c> from</c>

01:02:34.789 --> 01:02:34.799 align:start position:0%
where now looks totally different from
 

01:02:34.799 --> 01:02:36.710 align:start position:0%
where now looks totally different from
the<01:02:34.880><c> last</c><01:02:35.119><c> time</c><01:02:35.280><c> we</c><01:02:35.440><c> ran</c><01:02:35.680><c> it</c><01:02:35.760><c> we're</c><01:02:35.920><c> now</c>

01:02:36.710 --> 01:02:36.720 align:start position:0%
the last time we ran it we're now
 

01:02:36.720 --> 01:02:39.270 align:start position:0%
the last time we ran it we're now
indeed<01:02:37.119><c> in</c><01:02:37.280><c> a</c><01:02:37.359><c> call</c><01:02:37.520><c> to</c><01:02:37.680><c> switch</c><01:02:38.160><c> but</c><01:02:38.880><c> now</c><01:02:39.119><c> we're</c>

01:02:39.270 --> 01:02:39.280 align:start position:0%
indeed in a call to switch but now we're
 

01:02:39.280 --> 01:02:41.109 align:start position:0%
indeed in a call to switch but now we're
in<01:02:39.440><c> a</c><01:02:39.599><c> call</c><01:02:39.839><c> from</c><01:02:40.000><c> swift</c><01:02:40.400><c> to</c><01:02:40.480><c> switch</c><01:02:40.799><c> that</c><01:02:40.960><c> the</c>

01:02:41.109 --> 01:02:41.119 align:start position:0%
in a call from swift to switch that the
 

01:02:41.119 --> 01:02:42.470 align:start position:0%
in a call from swift to switch that the
scheduler<01:02:41.760><c> made</c>

01:02:42.470 --> 01:02:42.480 align:start position:0%
scheduler made
 

01:02:42.480 --> 01:02:44.630 align:start position:0%
scheduler made
at<01:02:42.559><c> some</c><01:02:42.799><c> point</c><01:02:43.039><c> in</c><01:02:43.119><c> the</c><01:02:43.280><c> past</c><01:02:44.400><c> and</c><01:02:44.480><c> the</c>

01:02:44.630 --> 01:02:44.640 align:start position:0%
at some point in the past and the
 

01:02:44.640 --> 01:02:47.190 align:start position:0%
at some point in the past and the
schedule<01:02:44.960><c> was</c><01:02:45.119><c> run</c><01:02:45.440><c> long</c><01:02:45.680><c> ago</c><01:02:45.920><c> during</c><01:02:46.240><c> boot</c>

01:02:47.190 --> 01:02:47.200 align:start position:0%
schedule was run long ago during boot
 

01:02:47.200 --> 01:02:48.870 align:start position:0%
schedule was run long ago during boot
was<01:02:47.440><c> called</c><01:02:47.760><c> as</c><01:02:47.920><c> the</c><01:02:48.000><c> last</c><01:02:48.240><c> thing</c><01:02:48.400><c> that</c><01:02:48.640><c> maine</c>

01:02:48.870 --> 01:02:48.880 align:start position:0%
was called as the last thing that maine
 

01:02:48.880 --> 01:02:53.190 align:start position:0%
was called as the last thing that maine
did<01:02:49.599><c> during</c><01:02:49.839><c> the</c><01:02:49.920><c> boot</c><01:02:50.240><c> process</c>

01:02:53.190 --> 01:02:53.200 align:start position:0%
 
 

01:02:53.200 --> 01:02:54.870 align:start position:0%
 
so<01:02:53.359><c> i'm</c><01:02:53.520><c> going</c><01:02:53.599><c> to</c><01:02:53.839><c> execute</c><01:02:54.240><c> one</c><01:02:54.400><c> instruction</c>

01:02:54.870 --> 01:02:54.880 align:start position:0%
so i'm going to execute one instruction
 

01:02:54.880 --> 01:02:56.549 align:start position:0%
so i'm going to execute one instruction
to<01:02:54.960><c> return</c><01:02:55.520><c> from</c>

01:02:56.549 --> 01:02:56.559 align:start position:0%
to return from
 

01:02:56.559 --> 01:02:59.829 align:start position:0%
to return from
switch<01:02:57.280><c> now</c><01:02:57.599><c> into</c><01:02:57.839><c> scheduler</c>

01:02:59.829 --> 01:02:59.839 align:start position:0%
switch now into scheduler
 

01:02:59.839 --> 01:03:01.750 align:start position:0%
switch now into scheduler
so<01:03:00.000><c> now</c><01:03:00.160><c> we're</c><01:03:00.319><c> in</c><01:03:00.400><c> this</c><01:03:00.559><c> course</c><01:03:00.880><c> scheduler</c>

01:03:01.750 --> 01:03:01.760 align:start position:0%
so now we're in this course scheduler
 

01:03:01.760 --> 01:03:08.390 align:start position:0%
so now we're in this course scheduler
let's<01:03:02.000><c> look</c><01:03:02.160><c> at</c><01:03:02.240><c> the</c><01:03:02.319><c> full</c><01:03:02.640><c> code</c>

01:03:08.390 --> 01:03:08.400 align:start position:0%
 
 

01:03:08.400 --> 01:03:11.589 align:start position:0%
 
so<01:03:08.559><c> this</c><01:03:08.799><c> is</c><01:03:08.880><c> the</c><01:03:08.960><c> scheduler</c><01:03:09.440><c> code</c><01:03:11.359><c> this</c>

01:03:11.589 --> 01:03:11.599 align:start position:0%
so this is the scheduler code this
 

01:03:11.599 --> 01:03:12.950 align:start position:0%
so this is the scheduler code this
function<01:03:11.920><c> called</c><01:03:12.079><c> scheduler</c><01:03:12.559><c> and</c><01:03:12.720><c> now</c><01:03:12.880><c> we're</c>

01:03:12.950 --> 01:03:12.960 align:start position:0%
function called scheduler and now we're
 

01:03:12.960 --> 01:03:14.950 align:start position:0%
function called scheduler and now we're
executing<01:03:13.359><c> in</c><01:03:13.520><c> the</c><01:03:13.599><c> scheduler</c><01:03:14.079><c> thread</c>

01:03:14.950 --> 01:03:14.960 align:start position:0%
executing in the scheduler thread
 

01:03:14.960 --> 01:03:18.069 align:start position:0%
executing in the scheduler thread
for<01:03:15.119><c> the</c><01:03:15.280><c> cpu</c><01:03:16.400><c> and</c><01:03:16.720><c> we're</c><01:03:17.039><c> just</c><01:03:17.359><c> at</c><01:03:17.440><c> the</c><01:03:17.599><c> point</c>

01:03:18.069 --> 01:03:18.079 align:start position:0%
for the cpu and we're just at the point
 

01:03:18.079 --> 01:03:21.510 align:start position:0%
for the cpu and we're just at the point
we<01:03:18.319><c> just</c><01:03:18.640><c> returned</c><01:03:19.839><c> from</c><01:03:20.079><c> the</c><01:03:20.319><c> from</c><01:03:20.559><c> a</c>

01:03:21.510 --> 01:03:21.520 align:start position:0%
we just returned from the from a
 

01:03:21.520 --> 01:03:23.270 align:start position:0%
we just returned from the from a
previous<01:03:22.079><c> call</c><01:03:22.319><c> to</c><01:03:22.559><c> switch</c><01:03:22.960><c> that</c><01:03:23.119><c> the</c>

01:03:23.270 --> 01:03:23.280 align:start position:0%
previous call to switch that the
 

01:03:23.280 --> 01:03:25.109 align:start position:0%
previous call to switch that the
scheduler<01:03:23.599><c> made</c><01:03:23.839><c> a</c><01:03:23.920><c> while</c><01:03:24.319><c> ago</c>

01:03:25.109 --> 01:03:25.119 align:start position:0%
scheduler made a while ago
 

01:03:25.119 --> 01:03:26.870 align:start position:0%
scheduler made a while ago
uh<01:03:25.280><c> when</c><01:03:25.520><c> it</c><01:03:25.599><c> decided</c><01:03:26.079><c> it</c><01:03:26.160><c> was</c><01:03:26.319><c> going</c><01:03:26.400><c> to</c><01:03:26.559><c> start</c>

01:03:26.870 --> 01:03:26.880 align:start position:0%
uh when it decided it was going to start
 

01:03:26.880 --> 01:03:29.510 align:start position:0%
uh when it decided it was going to start
running<01:03:27.359><c> that</c><01:03:27.760><c> process</c><01:03:28.240><c> you</c><01:03:28.319><c> know</c><01:03:28.480><c> pid3</c><01:03:29.359><c> which</c>

01:03:29.510 --> 01:03:29.520 align:start position:0%
running that process you know pid3 which
 

01:03:29.520 --> 01:03:30.230 align:start position:0%
running that process you know pid3 which
was<01:03:29.680><c> the</c><01:03:29.839><c> spin</c>

01:03:30.230 --> 01:03:30.240 align:start position:0%
was the spin
 

01:03:30.240 --> 01:03:33.910 align:start position:0%
was the spin
process<01:03:31.119><c> that</c><01:03:31.280><c> was</c><01:03:31.440><c> interrupted</c><01:03:32.720><c> so</c>

01:03:33.910 --> 01:03:33.920 align:start position:0%
process that was interrupted so
 

01:03:33.920 --> 01:03:36.950 align:start position:0%
process that was interrupted so
it's<01:03:34.240><c> this</c><01:03:34.480><c> switch</c><01:03:35.440><c> you</c><01:03:35.520><c> know</c><01:03:36.000><c> process</c><01:03:36.400><c> id3</c>

01:03:36.950 --> 01:03:36.960 align:start position:0%
it's this switch you know process id3
 

01:03:36.960 --> 01:03:38.870 align:start position:0%
it's this switch you know process id3
that<01:03:37.280><c> spin</c><01:03:37.680><c> called</c><01:03:38.000><c> switch</c><01:03:38.400><c> but</c><01:03:38.559><c> it's</c><01:03:38.720><c> not</c>

01:03:38.870 --> 01:03:38.880 align:start position:0%
that spin called switch but it's not
 

01:03:38.880 --> 01:03:40.549 align:start position:0%
that spin called switch but it's not
swift<01:03:39.280><c> that</c><01:03:39.440><c> switch</c><01:03:39.760><c> that's</c><01:03:40.000><c> returning</c><01:03:40.400><c> that</c>

01:03:40.549 --> 01:03:40.559 align:start position:0%
swift that switch that's returning that
 

01:03:40.559 --> 01:03:42.069 align:start position:0%
swift that switch that's returning that
switch<01:03:40.880><c> hasn't</c><01:03:41.119><c> returned</c><01:03:41.520><c> yet</c>

01:03:42.069 --> 01:03:42.079 align:start position:0%
switch hasn't returned yet
 

01:03:42.079 --> 01:03:45.430 align:start position:0%
switch hasn't returned yet
it's<01:03:42.240><c> still</c><01:03:42.480><c> saved</c><01:03:42.839><c> away</c><01:03:44.079><c> in</c><01:03:44.319><c> uh</c>

01:03:45.430 --> 01:03:45.440 align:start position:0%
it's still saved away in uh
 

01:03:45.440 --> 01:03:48.309 align:start position:0%
it's still saved away in uh
process<01:03:45.839><c> ids</c><01:03:46.319><c> threes</c><01:03:46.880><c> stack</c><01:03:47.359><c> and</c><01:03:47.520><c> contacts</c><01:03:48.160><c> we</c>

01:03:48.309 --> 01:03:48.319 align:start position:0%
process ids threes stack and contacts we
 

01:03:48.319 --> 01:03:50.150 align:start position:0%
process ids threes stack and contacts we
just<01:03:48.559><c> returned</c><01:03:48.880><c> from</c><01:03:49.039><c> this</c><01:03:49.359><c> earlier</c><01:03:49.760><c> call</c><01:03:50.000><c> to</c>

01:03:50.150 --> 01:03:50.160 align:start position:0%
just returned from this earlier call to
 

01:03:50.160 --> 01:03:53.109 align:start position:0%
just returned from this earlier call to
switch

01:03:53.109 --> 01:03:53.119 align:start position:0%
 
 

01:03:53.119 --> 01:03:54.549 align:start position:0%
 
all<01:03:53.280><c> right</c><01:03:53.440><c> so</c><01:03:53.599><c> the</c><01:03:53.760><c> stuff</c><01:03:53.920><c> that</c><01:03:54.079><c> happens</c><01:03:54.400><c> here</c>

01:03:54.549 --> 01:03:54.559 align:start position:0%
all right so the stuff that happens here
 

01:03:54.559 --> 01:03:57.349 align:start position:0%
all right so the stuff that happens here
in<01:03:54.640><c> the</c><01:03:54.799><c> scheduler</c><01:03:55.760><c> um</c>

01:03:57.349 --> 01:03:57.359 align:start position:0%
in the scheduler um
 

01:03:57.359 --> 01:03:59.910 align:start position:0%
in the scheduler um
we're<01:03:58.319><c> stopped</c><01:03:58.720><c> running</c><01:03:59.039><c> this</c><01:03:59.200><c> process</c><01:03:59.760><c> and</c>

01:03:59.910 --> 01:03:59.920 align:start position:0%
we're stopped running this process and
 

01:03:59.920 --> 01:04:00.549 align:start position:0%
we're stopped running this process and
so

01:04:00.549 --> 01:04:00.559 align:start position:0%
so
 

01:04:00.559 --> 01:04:03.190 align:start position:0%
so
uh<01:04:01.039><c> we</c><01:04:01.200><c> want</c><01:04:01.359><c> to</c><01:04:01.680><c> forget</c><01:04:02.160><c> about</c><01:04:02.559><c> the</c><01:04:02.720><c> various</c>

01:04:03.190 --> 01:04:03.200 align:start position:0%
uh we want to forget about the various
 

01:04:03.200 --> 01:04:04.870 align:start position:0%
uh we want to forget about the various
things<01:04:03.520><c> we</c><01:04:03.680><c> did</c>

01:04:04.870 --> 01:04:04.880 align:start position:0%
things we did
 

01:04:04.880 --> 01:04:06.470 align:start position:0%
things we did
in<01:04:05.039><c> the</c><01:04:05.119><c> process</c><01:04:05.520><c> of</c><01:04:05.760><c> running</c><01:04:06.000><c> this</c><01:04:06.160><c> process</c>

01:04:06.470 --> 01:04:06.480 align:start position:0%
in the process of running this process
 

01:04:06.480 --> 01:04:09.029 align:start position:0%
in the process of running this process
we<01:04:06.640><c> want</c><01:04:06.799><c> to</c><01:04:06.960><c> forget</c><01:04:07.839><c> the</c><01:04:08.000><c> cro</c><01:04:08.480><c> proc</c><01:04:08.720><c> equals</c>

01:04:09.029 --> 01:04:09.039 align:start position:0%
we want to forget the cro proc equals
 

01:04:09.039 --> 01:04:09.670 align:start position:0%
we want to forget the cro proc equals
zero

01:04:09.670 --> 01:04:09.680 align:start position:0%
zero
 

01:04:09.680 --> 01:04:11.029 align:start position:0%
zero
basically<01:04:10.000><c> means</c><01:04:10.240><c> that</c><01:04:10.319><c> we're</c><01:04:10.480><c> forgetting</c>

01:04:11.029 --> 01:04:11.039 align:start position:0%
basically means that we're forgetting
 

01:04:11.039 --> 01:04:13.190 align:start position:0%
basically means that we're forgetting
that<01:04:12.240><c> you</c><01:04:12.319><c> know</c><01:04:12.480><c> we're</c><01:04:12.559><c> no</c><01:04:12.720><c> longer</c><01:04:12.960><c> running</c>

01:04:13.190 --> 01:04:13.200 align:start position:0%
that you know we're no longer running
 

01:04:13.200 --> 01:04:14.630 align:start position:0%
that you know we're no longer running
this<01:04:13.359><c> process</c><01:04:13.680><c> in</c><01:04:13.760><c> this</c><01:04:13.920><c> course</c><01:04:14.240><c> so</c><01:04:14.400><c> we</c><01:04:14.480><c> don't</c>

01:04:14.630 --> 01:04:14.640 align:start position:0%
this process in this course so we don't
 

01:04:14.640 --> 01:04:15.750 align:start position:0%
this process in this course so we don't
want<01:04:14.799><c> to</c>

01:04:15.750 --> 01:04:15.760 align:start position:0%
want to
 

01:04:15.760 --> 01:04:17.750 align:start position:0%
want to
get<01:04:15.920><c> have</c><01:04:16.079><c> anybody</c><01:04:16.480><c> be</c><01:04:16.640><c> confused</c><01:04:17.039><c> about</c><01:04:17.280><c> that</c>

01:04:17.750 --> 01:04:17.760 align:start position:0%
get have anybody be confused about that
 

01:04:17.760 --> 01:04:19.029 align:start position:0%
get have anybody be confused about that
we<01:04:17.920><c> set</c><01:04:18.079><c> this</c>

01:04:19.029 --> 01:04:19.039 align:start position:0%
we set this
 

01:04:19.039 --> 01:04:22.549 align:start position:0%
we set this
per<01:04:19.359><c> core</c><01:04:20.160><c> proc</c><01:04:20.720><c> pointer</c><01:04:21.039><c> to</c><01:04:21.200><c> zero</c><01:04:21.599><c> instead</c><01:04:21.839><c> of</c>

01:04:22.549 --> 01:04:22.559 align:start position:0%
per core proc pointer to zero instead of
 

01:04:22.559 --> 01:04:24.789 align:start position:0%
per core proc pointer to zero instead of
this<01:04:22.799><c> process</c><01:04:23.839><c> the</c><01:04:24.000><c> next</c><01:04:24.160><c> thing</c><01:04:24.319><c> that</c><01:04:24.400><c> happens</c>

01:04:24.789 --> 01:04:24.799 align:start position:0%
this process the next thing that happens
 

01:04:24.799 --> 01:04:26.230 align:start position:0%
this process the next thing that happens
is<01:04:24.960><c> that</c><01:04:25.440><c> um</c>

01:04:26.230 --> 01:04:26.240 align:start position:0%
is that um
 

01:04:26.240 --> 01:04:29.109 align:start position:0%
is that um
you<01:04:26.400><c> remember</c><01:04:26.799><c> yield</c><01:04:28.000><c> acquired</c><01:04:28.559><c> the</c><01:04:28.720><c> lock</c><01:04:28.960><c> for</c>

01:04:29.109 --> 01:04:29.119 align:start position:0%
you remember yield acquired the lock for
 

01:04:29.119 --> 01:04:30.230 align:start position:0%
you remember yield acquired the lock for
this<01:04:29.359><c> process</c>

01:04:30.230 --> 01:04:30.240 align:start position:0%
this process
 

01:04:30.240 --> 01:04:31.750 align:start position:0%
this process
because<01:04:30.400><c> it</c><01:04:30.480><c> didn't</c><01:04:30.720><c> want</c><01:04:30.960><c> any</c><01:04:31.200><c> other</c><01:04:31.440><c> core</c>

01:04:31.750 --> 01:04:31.760 align:start position:0%
because it didn't want any other core
 

01:04:31.760 --> 01:04:33.270 align:start position:0%
because it didn't want any other core
scheduler<01:04:32.319><c> to</c><01:04:32.400><c> look</c><01:04:32.559><c> at</c><01:04:32.640><c> this</c><01:04:32.880><c> process</c><01:04:33.200><c> and</c>

01:04:33.270 --> 01:04:33.280 align:start position:0%
scheduler to look at this process and
 

01:04:33.280 --> 01:04:34.710 align:start position:0%
scheduler to look at this process and
maybe<01:04:33.599><c> run</c><01:04:33.920><c> it</c>

01:04:34.710 --> 01:04:34.720 align:start position:0%
maybe run it
 

01:04:34.720 --> 01:04:37.029 align:start position:0%
maybe run it
until<01:04:35.119><c> the</c><01:04:35.200><c> process</c><01:04:35.599><c> was</c><01:04:35.760><c> completely</c><01:04:36.640><c> put</c><01:04:36.880><c> to</c>

01:04:37.029 --> 01:04:37.039 align:start position:0%
until the process was completely put to
 

01:04:37.039 --> 01:04:37.829 align:start position:0%
until the process was completely put to
sleep

01:04:37.829 --> 01:04:37.839 align:start position:0%
sleep
 

01:04:37.839 --> 01:04:40.549 align:start position:0%
sleep
um<01:04:38.880><c> we've</c><01:04:39.280><c> we've</c><01:04:39.440><c> now</c><01:04:39.760><c> completed</c><01:04:40.240><c> the</c><01:04:40.319><c> switch</c>

01:04:40.549 --> 01:04:40.559 align:start position:0%
um we've we've now completed the switch
 

01:04:40.559 --> 01:04:41.990 align:start position:0%
um we've we've now completed the switch
away<01:04:40.799><c> from</c><01:04:41.039><c> this</c><01:04:41.200><c> process</c>

01:04:41.990 --> 01:04:42.000 align:start position:0%
away from this process
 

01:04:42.000 --> 01:04:44.309 align:start position:0%
away from this process
and<01:04:42.079><c> so</c><01:04:42.240><c> we</c><01:04:42.400><c> can</c><01:04:42.480><c> release</c><01:04:42.880><c> the</c><01:04:43.039><c> lock</c><01:04:43.839><c> on</c><01:04:44.000><c> the</c>

01:04:44.309 --> 01:04:44.319 align:start position:0%
and so we can release the lock on the
 

01:04:44.319 --> 01:04:46.870 align:start position:0%
and so we can release the lock on the
process<01:04:44.799><c> that</c><01:04:44.960><c> just</c><01:04:45.119><c> yielded</c>

01:04:46.870 --> 01:04:46.880 align:start position:0%
process that just yielded
 

01:04:46.880 --> 01:04:50.470 align:start position:0%
process that just yielded
that's<01:04:47.119><c> the</c><01:04:47.280><c> release</c><01:04:48.720><c> at</c><01:04:48.880><c> this</c><01:04:49.119><c> point</c>

01:04:50.470 --> 01:04:50.480 align:start position:0%
that's the release at this point
 

01:04:50.480 --> 01:04:53.109 align:start position:0%
that's the release at this point
um<01:04:51.680><c> we're</c><01:04:51.920><c> still</c><01:04:52.160><c> in</c><01:04:52.319><c> the</c><01:04:52.480><c> scheduler</c><01:04:52.880><c> if</c><01:04:52.960><c> there</c>

01:04:53.109 --> 01:04:53.119 align:start position:0%
um we're still in the scheduler if there
 

01:04:53.119 --> 01:04:54.309 align:start position:0%
um we're still in the scheduler if there
was<01:04:53.280><c> another</c><01:04:53.599><c> core</c>

01:04:54.309 --> 01:04:54.319 align:start position:0%
was another core
 

01:04:54.319 --> 01:04:56.950 align:start position:0%
was another core
at<01:04:54.400><c> this</c><01:04:54.640><c> point</c><01:04:55.119><c> some</c><01:04:55.440><c> other</c><01:04:55.680><c> core</c><01:04:56.000><c> scheduler</c>

01:04:56.950 --> 01:04:56.960 align:start position:0%
at this point some other core scheduler
 

01:04:56.960 --> 01:04:57.349 align:start position:0%
at this point some other core scheduler
could

01:04:57.349 --> 01:04:57.359 align:start position:0%
could
 

01:04:57.359 --> 01:04:59.510 align:start position:0%
could
find<01:04:57.839><c> that</c><01:04:58.079><c> process</c><01:04:58.640><c> because</c><01:04:58.880><c> it's</c><01:04:59.039><c> runnable</c>

01:04:59.510 --> 01:04:59.520 align:start position:0%
find that process because it's runnable
 

01:04:59.520 --> 01:05:00.549 align:start position:0%
find that process because it's runnable
and<01:04:59.760><c> run</c><01:05:00.000><c> it</c>

01:05:00.549 --> 01:05:00.559 align:start position:0%
and run it
 

01:05:00.559 --> 01:05:02.710 align:start position:0%
and run it
but<01:05:00.720><c> that's</c><01:05:00.960><c> okay</c><01:05:01.280><c> because</c><01:05:01.839><c> we've</c><01:05:02.160><c> completely</c>

01:05:02.710 --> 01:05:02.720 align:start position:0%
but that's okay because we've completely
 

01:05:02.720 --> 01:05:04.230 align:start position:0%
but that's okay because we've completely
saved<01:05:03.119><c> its</c><01:05:03.280><c> registers</c>

01:05:04.230 --> 01:05:04.240 align:start position:0%
saved its registers
 

01:05:04.240 --> 01:05:06.470 align:start position:0%
saved its registers
we're<01:05:04.480><c> no</c><01:05:04.640><c> longer</c><01:05:04.960><c> executing</c><01:05:05.440><c> on</c><01:05:05.599><c> its</c><01:05:05.920><c> that</c>

01:05:06.470 --> 01:05:06.480 align:start position:0%
we're no longer executing on its that
 

01:05:06.480 --> 01:05:08.150 align:start position:0%
we're no longer executing on its that
process<01:05:06.880><c> is</c><01:05:07.039><c> stacked</c><01:05:07.440><c> because</c><01:05:07.680><c> we're</c><01:05:07.920><c> now</c>

01:05:08.150 --> 01:05:08.160 align:start position:0%
process is stacked because we're now
 

01:05:08.160 --> 01:05:09.990 align:start position:0%
process is stacked because we're now
executing<01:05:08.640><c> on</c><01:05:08.799><c> the</c>

01:05:09.990 --> 01:05:10.000 align:start position:0%
executing on the
 

01:05:10.000 --> 01:05:12.549 align:start position:0%
executing on the
um<01:05:10.400><c> discord</c><01:05:10.960><c> scheduler</c><01:05:11.520><c> stack</c><01:05:12.240><c> so</c><01:05:12.400><c> it's</c>

01:05:12.549 --> 01:05:12.559 align:start position:0%
um discord scheduler stack so it's
 

01:05:12.559 --> 01:05:14.230 align:start position:0%
um discord scheduler stack so it's
actually<01:05:12.799><c> fine</c><01:05:13.039><c> if</c><01:05:13.200><c> some</c><01:05:13.359><c> other</c><01:05:13.599><c> core</c>

01:05:14.230 --> 01:05:14.240 align:start position:0%
actually fine if some other core
 

01:05:14.240 --> 01:05:17.190 align:start position:0%
actually fine if some other core
decides<01:05:14.640><c> to</c><01:05:14.720><c> run</c><01:05:14.960><c> that</c><01:05:15.119><c> process</c><01:05:16.799><c> okay</c><01:05:17.039><c> but</c>

01:05:17.190 --> 01:05:17.200 align:start position:0%
decides to run that process okay but
 

01:05:17.200 --> 01:05:18.950 align:start position:0%
decides to run that process okay but
there<01:05:17.280><c> is</c><01:05:17.599><c> no</c><01:05:17.760><c> other</c><01:05:18.000><c> core</c><01:05:18.400><c> so</c>

01:05:18.950 --> 01:05:18.960 align:start position:0%
there is no other core so
 

01:05:18.960 --> 01:05:20.829 align:start position:0%
there is no other core so
that<01:05:19.119><c> doesn't</c><01:05:19.440><c> actually</c><01:05:19.680><c> happen</c><01:05:20.000><c> in</c><01:05:20.079><c> this</c>

01:05:20.829 --> 01:05:20.839 align:start position:0%
that doesn't actually happen in this
 

01:05:20.839 --> 01:05:24.950 align:start position:0%
that doesn't actually happen in this
demonstration

01:05:24.950 --> 01:05:24.960 align:start position:0%
 
 

01:05:24.960 --> 01:05:28.470 align:start position:0%
 
um<01:05:26.319><c> i</c><01:05:26.480><c> actually</c><01:05:26.720><c> want</c><01:05:26.880><c> to</c><01:05:27.440><c> spend</c><01:05:27.680><c> a</c><01:05:27.760><c> moment</c>

01:05:28.470 --> 01:05:28.480 align:start position:0%
um i actually want to spend a moment
 

01:05:28.480 --> 01:05:30.789 align:start position:0%
um i actually want to spend a moment
talking<01:05:28.799><c> about</c><01:05:29.039><c> the</c><01:05:29.280><c> pr</c><01:05:29.760><c> lock</c><01:05:30.319><c> a</c><01:05:30.400><c> little</c><01:05:30.640><c> bit</c>

01:05:30.789 --> 01:05:30.799 align:start position:0%
talking about the pr lock a little bit
 

01:05:30.799 --> 01:05:33.029 align:start position:0%
talking about the pr lock a little bit
more

01:05:33.029 --> 01:05:33.039 align:start position:0%
more
 

01:05:33.039 --> 01:05:39.109 align:start position:0%
more
pr<01:05:33.359><c> lock</c><01:05:33.680><c> actually</c><01:05:33.839><c> does</c><01:05:34.079><c> a</c><01:05:34.880><c> couple</c><01:05:35.119><c> of</c><01:05:35.280><c> things</c>

01:05:39.109 --> 01:05:39.119 align:start position:0%
 
 

01:05:39.119 --> 01:05:41.510 align:start position:0%
 
it<01:05:39.200><c> does</c><01:05:39.520><c> really</c><01:05:40.559><c> two</c><01:05:40.799><c> things</c><01:05:41.119><c> from</c><01:05:41.280><c> the</c><01:05:41.359><c> point</c>

01:05:41.510 --> 01:05:41.520 align:start position:0%
it does really two things from the point
 

01:05:41.520 --> 01:05:42.710 align:start position:0%
it does really two things from the point
of<01:05:41.599><c> view</c><01:05:41.680><c> of</c><01:05:41.839><c> scheduling</c>

01:05:42.710 --> 01:05:42.720 align:start position:0%
of view of scheduling
 

01:05:42.720 --> 01:05:45.829 align:start position:0%
of view of scheduling
one<01:05:42.960><c> is</c><01:05:43.119><c> that</c><01:05:43.760><c> yielding</c><01:05:44.240><c> the</c><01:05:44.400><c> cpu</c>

01:05:45.829 --> 01:05:45.839 align:start position:0%
one is that yielding the cpu
 

01:05:45.839 --> 01:05:47.910 align:start position:0%
one is that yielding the cpu
involves<01:05:46.400><c> multiple</c><01:05:46.880><c> steps</c><01:05:47.280><c> we</c><01:05:47.440><c> have</c><01:05:47.520><c> to</c><01:05:47.680><c> set</c>

01:05:47.910 --> 01:05:47.920 align:start position:0%
involves multiple steps we have to set
 

01:05:47.920 --> 01:05:49.270 align:start position:0%
involves multiple steps we have to set
the<01:05:48.000><c> state</c><01:05:48.319><c> to</c><01:05:48.720><c> run</c><01:05:48.960><c> up</c>

01:05:49.270 --> 01:05:49.280 align:start position:0%
the state to run up
 

01:05:49.280 --> 01:05:50.309 align:start position:0%
the state to run up
change<01:05:49.520><c> the</c><01:05:49.599><c> state</c><01:05:49.760><c> from</c><01:05:49.920><c> running</c><01:05:50.160><c> to</c>

01:05:50.309 --> 01:05:50.319 align:start position:0%
change the state from running to
 

01:05:50.319 --> 01:05:53.349 align:start position:0%
change the state from running to
runnable<01:05:51.119><c> we</c><01:05:51.680><c> save</c><01:05:52.079><c> the</c><01:05:52.240><c> registers</c>

01:05:53.349 --> 01:05:53.359 align:start position:0%
runnable we save the registers
 

01:05:53.359 --> 01:05:55.910 align:start position:0%
runnable we save the registers
in<01:05:53.520><c> the</c><01:05:53.760><c> yielding</c><01:05:54.240><c> processes</c><01:05:54.799><c> context</c><01:05:55.680><c> and</c><01:05:55.760><c> we</c>

01:05:55.910 --> 01:05:55.920 align:start position:0%
in the yielding processes context and we
 

01:05:55.920 --> 01:05:57.589 align:start position:0%
in the yielding processes context and we
have<01:05:56.079><c> to</c><01:05:56.240><c> stop</c><01:05:56.640><c> using</c><01:05:57.039><c> the</c><01:05:57.119><c> yielding</c>

01:05:57.589 --> 01:05:57.599 align:start position:0%
have to stop using the yielding
 

01:05:57.599 --> 01:05:58.710 align:start position:0%
have to stop using the yielding
processes<01:05:58.160><c> stack</c>

01:05:58.710 --> 01:05:58.720 align:start position:0%
processes stack
 

01:05:58.720 --> 01:06:00.630 align:start position:0%
processes stack
there's<01:05:58.960><c> at</c><01:05:59.119><c> least</c><01:05:59.520><c> three</c><01:05:59.839><c> steps</c><01:06:00.400><c> you</c><01:06:00.480><c> know</c>

01:06:00.630 --> 01:06:00.640 align:start position:0%
there's at least three steps you know
 

01:06:00.640 --> 01:06:03.430 align:start position:0%
there's at least three steps you know
which<01:06:00.960><c> take</c><01:06:01.280><c> time</c>

01:06:03.430 --> 01:06:03.440 align:start position:0%
which take time
 

01:06:03.440 --> 01:06:06.630 align:start position:0%
which take time
in<01:06:03.599><c> order</c><01:06:03.920><c> to</c><01:06:04.799><c> do</c><01:06:05.039><c> all</c><01:06:05.200><c> the</c><01:06:05.359><c> steps</c><01:06:05.680><c> required</c><01:06:06.240><c> to</c>

01:06:06.630 --> 01:06:06.640 align:start position:0%
in order to do all the steps required to
 

01:06:06.640 --> 01:06:08.870 align:start position:0%
in order to do all the steps required to
yield<01:06:06.880><c> the</c><01:06:07.039><c> cpu</c><01:06:07.920><c> and</c><01:06:08.000><c> so</c><01:06:08.240><c> one</c><01:06:08.400><c> of</c><01:06:08.480><c> the</c><01:06:08.559><c> things</c>

01:06:08.870 --> 01:06:08.880 align:start position:0%
yield the cpu and so one of the things
 

01:06:08.880 --> 01:06:09.990 align:start position:0%
yield the cpu and so one of the things
that<01:06:09.119><c> lock</c><01:06:09.440><c> does</c>

01:06:09.990 --> 01:06:10.000 align:start position:0%
that lock does
 

01:06:10.000 --> 01:06:11.910 align:start position:0%
that lock does
as<01:06:10.240><c> i</c><01:06:10.319><c> mentioned</c><01:06:10.720><c> is</c><01:06:10.799><c> prevent</c><01:06:11.200><c> any</c><01:06:11.440><c> other</c><01:06:11.680><c> core</c>

01:06:11.910 --> 01:06:11.920 align:start position:0%
as i mentioned is prevent any other core
 

01:06:11.920 --> 01:06:13.829 align:start position:0%
as i mentioned is prevent any other core
scheduler<01:06:12.720><c> from</c><01:06:12.960><c> looking</c><01:06:13.200><c> at</c><01:06:13.280><c> our</c><01:06:13.440><c> process</c>

01:06:13.829 --> 01:06:13.839 align:start position:0%
scheduler from looking at our process
 

01:06:13.839 --> 01:06:15.270 align:start position:0%
scheduler from looking at our process
until<01:06:14.240><c> all</c><01:06:14.400><c> three</c><01:06:14.720><c> steps</c>

01:06:15.270 --> 01:06:15.280 align:start position:0%
until all three steps
 

01:06:15.280 --> 01:06:17.109 align:start position:0%
until all three steps
have<01:06:15.440><c> completed</c><01:06:15.920><c> so</c><01:06:16.079><c> the</c><01:06:16.319><c> lock</c><01:06:16.640><c> is</c><01:06:16.720><c> basically</c>

01:06:17.109 --> 01:06:17.119 align:start position:0%
have completed so the lock is basically
 

01:06:17.119 --> 01:06:19.670 align:start position:0%
have completed so the lock is basically
making<01:06:18.079><c> those</c><01:06:18.319><c> steps</c><01:06:18.799><c> atomic</c>

01:06:19.670 --> 01:06:19.680 align:start position:0%
making those steps atomic
 

01:06:19.680 --> 01:06:21.190 align:start position:0%
making those steps atomic
that<01:06:19.839><c> either</c><01:06:20.160><c> all</c><01:06:20.319><c> happen</c><01:06:20.720><c> from</c><01:06:20.880><c> the</c><01:06:20.960><c> point</c><01:06:21.119><c> of</c>

01:06:21.190 --> 01:06:21.200 align:start position:0%
that either all happen from the point of
 

01:06:21.200 --> 01:06:22.950 align:start position:0%
that either all happen from the point of
view<01:06:21.359><c> of</c><01:06:21.599><c> other</c><01:06:21.839><c> cores</c>

01:06:22.950 --> 01:06:22.960 align:start position:0%
view of other cores
 

01:06:22.960 --> 01:06:26.710 align:start position:0%
view of other cores
um<01:06:23.520><c> or</c><01:06:23.760><c> none</c><01:06:23.920><c> of</c><01:06:24.079><c> them</c><01:06:24.240><c> have</c><01:06:24.400><c> happened</c>

01:06:26.710 --> 01:06:26.720 align:start position:0%
um or none of them have happened
 

01:06:26.720 --> 01:06:28.549 align:start position:0%
um or none of them have happened
it's<01:06:26.880><c> going</c><01:06:26.960><c> to</c><01:06:27.119><c> turn</c><01:06:27.440><c> out</c><01:06:27.760><c> also</c><01:06:28.079><c> when</c><01:06:28.240><c> we</c>

01:06:28.549 --> 01:06:28.559 align:start position:0%
it's going to turn out also when we
 

01:06:28.559 --> 01:06:30.309 align:start position:0%
it's going to turn out also when we
start<01:06:28.880><c> running</c><01:06:29.200><c> a</c><01:06:29.280><c> process</c>

01:06:30.309 --> 01:06:30.319 align:start position:0%
start running a process
 

01:06:30.319 --> 01:06:33.190 align:start position:0%
start running a process
that<01:06:30.720><c> the</c><01:06:30.960><c> pr</c><01:06:31.359><c> lock</c><01:06:31.680><c> is</c><01:06:32.000><c> going</c><01:06:32.079><c> to</c><01:06:32.559><c> have</c><01:06:32.799><c> a</c>

01:06:33.190 --> 01:06:33.200 align:start position:0%
that the pr lock is going to have a
 

01:06:33.200 --> 01:06:33.990 align:start position:0%
that the pr lock is going to have a
similar

01:06:33.990 --> 01:06:34.000 align:start position:0%
similar
 

01:06:34.000 --> 01:06:37.670 align:start position:0%
similar
protective<01:06:34.880><c> function</c><01:06:36.799><c> we're</c><01:06:37.039><c> going</c><01:06:37.200><c> to</c><01:06:37.520><c> set</c>

01:06:37.670 --> 01:06:37.680 align:start position:0%
protective function we're going to set
 

01:06:37.680 --> 01:06:39.270 align:start position:0%
protective function we're going to set
the<01:06:37.839><c> state</c><01:06:38.079><c> of</c><01:06:38.240><c> a</c><01:06:38.319><c> process</c><01:06:38.640><c> to</c><01:06:38.799><c> running</c><01:06:39.119><c> when</c>

01:06:39.270 --> 01:06:39.280 align:start position:0%
the state of a process to running when
 

01:06:39.280 --> 01:06:40.950 align:start position:0%
the state of a process to running when
we<01:06:39.440><c> start</c><01:06:39.680><c> executing</c><01:06:40.160><c> a</c><01:06:40.240><c> process</c><01:06:40.720><c> and</c><01:06:40.799><c> we're</c>

01:06:40.950 --> 01:06:40.960 align:start position:0%
we start executing a process and we're
 

01:06:40.960 --> 01:06:42.069 align:start position:0%
we start executing a process and we're
going<01:06:41.039><c> to</c><01:06:41.119><c> move</c><01:06:41.359><c> its</c>

01:06:42.069 --> 01:06:42.079 align:start position:0%
going to move its
 

01:06:42.079 --> 01:06:44.630 align:start position:0%
going to move its
registers<01:06:42.799><c> from</c><01:06:43.039><c> its</c><01:06:43.440><c> process</c><01:06:43.839><c> context</c><01:06:44.400><c> into</c>

01:06:44.630 --> 01:06:44.640 align:start position:0%
registers from its process context into
 

01:06:44.640 --> 01:06:47.589 align:start position:0%
registers from its process context into
the<01:06:44.720><c> risk</c><01:06:45.039><c> 5</c><01:06:45.359><c> registers</c>

01:06:47.589 --> 01:06:47.599 align:start position:0%
the risk 5 registers
 

01:06:47.599 --> 01:06:50.549 align:start position:0%
the risk 5 registers
but<01:06:48.799><c> if</c><01:06:48.960><c> an</c><01:06:49.200><c> interrupt</c><01:06:49.599><c> should</c><01:06:49.839><c> happen</c><01:06:50.319><c> in</c><01:06:50.480><c> the</c>

01:06:50.549 --> 01:06:50.559 align:start position:0%
but if an interrupt should happen in the
 

01:06:50.559 --> 01:06:52.390 align:start position:0%
but if an interrupt should happen in the
middle<01:06:50.799><c> of</c><01:06:50.960><c> that</c><01:06:51.200><c> process</c><01:06:51.760><c> the</c><01:06:52.000><c> interrupt</c><01:06:52.319><c> is</c>

01:06:52.390 --> 01:06:52.400 align:start position:0%
middle of that process the interrupt is
 

01:06:52.400 --> 01:06:53.750 align:start position:0%
middle of that process the interrupt is
going<01:06:52.480><c> to</c><01:06:52.640><c> see</c><01:06:52.799><c> the</c><01:06:52.960><c> process</c><01:06:53.280><c> in</c><01:06:53.359><c> a</c><01:06:53.440><c> weird</c>

01:06:53.750 --> 01:06:53.760 align:start position:0%
going to see the process in a weird
 

01:06:53.760 --> 01:06:54.549 align:start position:0%
going to see the process in a weird
state<01:06:54.160><c> like</c>

01:06:54.549 --> 01:06:54.559 align:start position:0%
state like
 

01:06:54.559 --> 01:06:56.950 align:start position:0%
state like
maybe<01:06:54.880><c> in</c><01:06:54.960><c> the</c><01:06:55.119><c> state</c><01:06:55.520><c> of</c><01:06:55.680><c> mark</c><01:06:56.079><c> running</c><01:06:56.480><c> but</c>

01:06:56.950 --> 01:06:56.960 align:start position:0%
maybe in the state of mark running but
 

01:06:56.960 --> 01:06:57.670 align:start position:0%
maybe in the state of mark running but
hasn't<01:06:57.359><c> yet</c>

01:06:57.670 --> 01:06:57.680 align:start position:0%
hasn't yet
 

01:06:57.680 --> 01:06:59.829 align:start position:0%
hasn't yet
finished<01:06:58.559><c> moving</c><01:06:58.880><c> its</c><01:06:59.039><c> registers</c><01:06:59.599><c> from</c><01:06:59.760><c> the</c>

01:06:59.829 --> 01:06:59.839 align:start position:0%
finished moving its registers from the
 

01:06:59.839 --> 01:07:02.069 align:start position:0%
finished moving its registers from the
context<01:07:00.400><c> into</c><01:07:00.559><c> the</c><01:07:00.640><c> risk</c><01:07:00.880><c> five</c><01:07:01.200><c> registers</c>

01:07:02.069 --> 01:07:02.079 align:start position:0%
context into the risk five registers
 

01:07:02.079 --> 01:07:03.589 align:start position:0%
context into the risk five registers
and<01:07:02.160><c> so</c><01:07:02.319><c> that</c><01:07:02.400><c> would</c><01:07:02.559><c> be</c><01:07:02.640><c> a</c><01:07:02.720><c> disaster</c><01:07:03.200><c> if</c><01:07:03.359><c> a</c>

01:07:03.589 --> 01:07:03.599 align:start position:0%
and so that would be a disaster if a
 

01:07:03.599 --> 01:07:05.190 align:start position:0%
and so that would be a disaster if a
timer<01:07:04.000><c> interrupt</c><01:07:04.400><c> happened</c><01:07:04.640><c> then</c><01:07:04.880><c> because</c><01:07:05.119><c> we</c>

01:07:05.190 --> 01:07:05.200 align:start position:0%
timer interrupt happened then because we
 

01:07:05.200 --> 01:07:07.349 align:start position:0%
timer interrupt happened then because we
might<01:07:05.440><c> switch</c><01:07:05.760><c> away</c><01:07:06.000><c> from</c><01:07:06.160><c> that</c><01:07:06.400><c> process</c>

01:07:07.349 --> 01:07:07.359 align:start position:0%
might switch away from that process
 

01:07:07.359 --> 01:07:11.109 align:start position:0%
might switch away from that process
before<01:07:07.839><c> it</c><01:07:07.920><c> had</c><01:07:08.160><c> restored</c><01:07:08.640><c> its</c><01:07:08.799><c> registers</c>

01:07:11.109 --> 01:07:11.119 align:start position:0%
before it had restored its registers
 

01:07:11.119 --> 01:07:12.630 align:start position:0%
before it had restored its registers
and<01:07:11.440><c> switching</c><01:07:11.760><c> away</c><01:07:11.920><c> from</c><01:07:12.079><c> that</c><01:07:12.240><c> process</c>

01:07:12.630 --> 01:07:12.640 align:start position:0%
and switching away from that process
 

01:07:12.640 --> 01:07:15.270 align:start position:0%
and switching away from that process
would<01:07:12.960><c> save</c><01:07:13.599><c> now</c><01:07:14.000><c> uninitialized</c><01:07:14.799><c> risk</c><01:07:15.039><c> five</c>

01:07:15.270 --> 01:07:15.280 align:start position:0%
would save now uninitialized risk five
 

01:07:15.280 --> 01:07:16.150 align:start position:0%
would save now uninitialized risk five
registers

01:07:16.150 --> 01:07:16.160 align:start position:0%
registers
 

01:07:16.160 --> 01:07:18.789 align:start position:0%
registers
into<01:07:16.400><c> the</c><01:07:16.480><c> context</c><01:07:17.440><c> processes</c><01:07:18.000><c> context</c>

01:07:18.789 --> 01:07:18.799 align:start position:0%
into the context processes context
 

01:07:18.799 --> 01:07:20.950 align:start position:0%
into the context processes context
overwriting<01:07:19.440><c> its</c><01:07:19.599><c> real</c><01:07:19.760><c> registers</c>

01:07:20.950 --> 01:07:20.960 align:start position:0%
overwriting its real registers
 

01:07:20.960 --> 01:07:23.430 align:start position:0%
overwriting its real registers
so<01:07:21.200><c> indeed</c><01:07:21.599><c> we</c><01:07:21.760><c> want</c><01:07:22.240><c> starting</c><01:07:22.640><c> a</c><01:07:22.799><c> process</c><01:07:23.200><c> to</c>

01:07:23.430 --> 01:07:23.440 align:start position:0%
so indeed we want starting a process to
 

01:07:23.440 --> 01:07:24.390 align:start position:0%
so indeed we want starting a process to
also<01:07:23.920><c> be</c>

01:07:24.390 --> 01:07:24.400 align:start position:0%
also be
 

01:07:24.400 --> 01:07:27.589 align:start position:0%
also be
effectively<01:07:24.960><c> atomic</c><01:07:26.960><c> and</c><01:07:27.119><c> in</c><01:07:27.200><c> this</c><01:07:27.359><c> case</c>

01:07:27.589 --> 01:07:27.599 align:start position:0%
effectively atomic and in this case
 

01:07:27.599 --> 01:07:28.549 align:start position:0%
effectively atomic and in this case
holding<01:07:27.920><c> the</c><01:07:28.079><c> lock</c>

01:07:28.549 --> 01:07:28.559 align:start position:0%
holding the lock
 

01:07:28.559 --> 01:07:31.270 align:start position:0%
holding the lock
holding<01:07:28.880><c> pro</c><01:07:29.359><c> lock</c><01:07:29.680><c> across</c><01:07:30.400><c> switching</c><01:07:30.880><c> to</c><01:07:31.119><c> a</c>

01:07:31.270 --> 01:07:31.280 align:start position:0%
holding pro lock across switching to a
 

01:07:31.280 --> 01:07:32.710 align:start position:0%
holding pro lock across switching to a
process

01:07:32.710 --> 01:07:32.720 align:start position:0%
process
 

01:07:32.720 --> 01:07:34.230 align:start position:0%
process
as<01:07:32.880><c> well</c><01:07:33.039><c> as</c><01:07:33.200><c> preventing</c><01:07:33.599><c> other</c><01:07:33.839><c> cores</c><01:07:34.079><c> from</c>

01:07:34.230 --> 01:07:34.240 align:start position:0%
as well as preventing other cores from
 

01:07:34.240 --> 01:07:35.910 align:start position:0%
as well as preventing other cores from
looking<01:07:34.480><c> at</c><01:07:34.559><c> that</c><01:07:34.799><c> process</c><01:07:35.200><c> also</c><01:07:35.440><c> turns</c><01:07:35.680><c> off</c>

01:07:35.910 --> 01:07:35.920 align:start position:0%
looking at that process also turns off
 

01:07:35.920 --> 01:07:37.270 align:start position:0%
looking at that process also turns off
interrupts

01:07:37.270 --> 01:07:37.280 align:start position:0%
interrupts
 

01:07:37.280 --> 01:07:39.829 align:start position:0%
interrupts
for<01:07:37.440><c> the</c><01:07:37.520><c> duration</c><01:07:38.160><c> of</c><01:07:38.960><c> firing</c><01:07:39.440><c> up</c><01:07:39.760><c> of</c>

01:07:39.829 --> 01:07:39.839 align:start position:0%
for the duration of firing up of
 

01:07:39.839 --> 01:07:41.270 align:start position:0%
for the duration of firing up of
switching<01:07:40.240><c> to</c><01:07:40.319><c> that</c><01:07:40.559><c> thread</c>

01:07:41.270 --> 01:07:41.280 align:start position:0%
switching to that thread
 

01:07:41.280 --> 01:07:43.190 align:start position:0%
switching to that thread
which<01:07:41.520><c> prevents</c><01:07:41.920><c> a</c><01:07:42.079><c> timer</c><01:07:42.480><c> interrupt</c><01:07:42.880><c> from</c>

01:07:43.190 --> 01:07:43.200 align:start position:0%
which prevents a timer interrupt from
 

01:07:43.200 --> 01:07:44.630 align:start position:0%
which prevents a timer interrupt from
ever<01:07:43.520><c> seeing</c><01:07:43.839><c> a</c><01:07:44.000><c> process</c>

01:07:44.630 --> 01:07:44.640 align:start position:0%
ever seeing a process
 

01:07:44.640 --> 01:07:47.349 align:start position:0%
ever seeing a process
that's<01:07:45.200><c> only</c><01:07:45.520><c> midway</c><01:07:46.880><c> through</c><01:07:47.119><c> being</c>

01:07:47.349 --> 01:07:47.359 align:start position:0%
that's only midway through being
 

01:07:47.359 --> 01:07:51.270 align:start position:0%
that's only midway through being
switched<01:07:47.760><c> to</c>

01:07:51.270 --> 01:07:51.280 align:start position:0%
 
 

01:07:51.280 --> 01:07:55.990 align:start position:0%
 
okay<01:07:54.240><c> so</c><01:07:54.400><c> we're</c><01:07:54.559><c> in</c><01:07:54.640><c> the</c><01:07:54.839><c> scheduler</c><01:07:55.839><c> we're</c>

01:07:55.990 --> 01:07:56.000 align:start position:0%
okay so we're in the scheduler we're
 

01:07:56.000 --> 01:07:57.349 align:start position:0%
okay so we're in the scheduler we're
executing<01:07:56.480><c> this</c><01:07:56.640><c> loop</c><01:07:56.880><c> in</c><01:07:56.960><c> the</c><01:07:57.039><c> schedule</c>

01:07:57.349 --> 01:07:57.359 align:start position:0%
executing this loop in the schedule
 

01:07:57.359 --> 01:07:58.710 align:start position:0%
executing this loop in the schedule
there's<01:07:57.599><c> this</c><01:07:57.760><c> loop</c><01:07:58.000><c> in</c><01:07:58.079><c> the</c><01:07:58.240><c> scheduler</c><01:07:58.559><c> that</c>

01:07:58.710 --> 01:07:58.720 align:start position:0%
there's this loop in the scheduler that
 

01:07:58.720 --> 01:08:00.470 align:start position:0%
there's this loop in the scheduler that
looks<01:07:58.960><c> at</c><01:07:59.119><c> all</c><01:07:59.280><c> the</c><01:07:59.359><c> processes</c><01:07:59.920><c> in</c><01:08:00.079><c> turn</c><01:08:00.319><c> to</c>

01:08:00.470 --> 01:08:00.480 align:start position:0%
looks at all the processes in turn to
 

01:08:00.480 --> 01:08:02.630 align:start position:0%
looks at all the processes in turn to
find<01:08:00.720><c> one</c><01:08:00.880><c> to</c><01:08:01.039><c> run</c>

01:08:02.630 --> 01:08:02.640 align:start position:0%
find one to run
 

01:08:02.640 --> 01:08:04.069 align:start position:0%
find one to run
and<01:08:02.799><c> in</c><01:08:02.880><c> this</c><01:08:03.039><c> case</c><01:08:03.280><c> we</c><01:08:03.359><c> know</c><01:08:03.520><c> there's</c><01:08:03.760><c> another</c>

01:08:04.069 --> 01:08:04.079 align:start position:0%
and in this case we know there's another
 

01:08:04.079 --> 01:08:06.549 align:start position:0%
and in this case we know there's another
process<01:08:04.559><c> because</c>

01:08:06.549 --> 01:08:06.559 align:start position:0%
process because
 

01:08:06.559 --> 01:08:08.309 align:start position:0%
process because
there's<01:08:06.799><c> that</c><01:08:07.039><c> other</c><01:08:07.440><c> spin</c><01:08:07.760><c> process</c><01:08:08.079><c> that</c><01:08:08.160><c> we</c>

01:08:08.309 --> 01:08:08.319 align:start position:0%
there's that other spin process that we
 

01:08:08.319 --> 01:08:10.309 align:start position:0%
there's that other spin process that we
forked

01:08:10.309 --> 01:08:10.319 align:start position:0%
forked
 

01:08:10.319 --> 01:08:12.390 align:start position:0%
forked
the<01:08:10.960><c> but</c><01:08:11.119><c> there's</c><01:08:11.280><c> a</c><01:08:11.359><c> lot</c><01:08:11.440><c> of</c><01:08:11.599><c> process</c><01:08:12.000><c> lots</c><01:08:12.240><c> to</c>

01:08:12.390 --> 01:08:12.400 align:start position:0%
the but there's a lot of process lots to
 

01:08:12.400 --> 01:08:13.430 align:start position:0%
the but there's a lot of process lots to
examine

01:08:13.430 --> 01:08:13.440 align:start position:0%
examine
 

01:08:13.440 --> 01:08:15.430 align:start position:0%
examine
um<01:08:13.920><c> so</c><01:08:14.079><c> i</c><01:08:14.160><c> want</c><01:08:14.319><c> to</c><01:08:14.400><c> skip</c><01:08:14.720><c> over</c><01:08:14.960><c> the</c><01:08:15.119><c> actual</c>

01:08:15.430 --> 01:08:15.440 align:start position:0%
um so i want to skip over the actual
 

01:08:15.440 --> 01:08:17.269 align:start position:0%
um so i want to skip over the actual
proc<01:08:15.839><c> the</c><01:08:16.159><c> scanning</c><01:08:16.719><c> of</c><01:08:16.880><c> the</c>

01:08:17.269 --> 01:08:17.279 align:start position:0%
proc the scanning of the
 

01:08:17.279 --> 01:08:19.669 align:start position:0%
proc the scanning of the
process<01:08:17.679><c> table</c><01:08:18.400><c> and</c><01:08:18.480><c> go</c><01:08:18.640><c> direct</c><01:08:19.040><c> to</c><01:08:19.279><c> the</c><01:08:19.440><c> point</c>

01:08:19.669 --> 01:08:19.679 align:start position:0%
process table and go direct to the point
 

01:08:19.679 --> 01:08:20.789 align:start position:0%
process table and go direct to the point
at<01:08:19.839><c> which</c>

01:08:20.789 --> 01:08:20.799 align:start position:0%
at which
 

01:08:20.799 --> 01:08:22.390 align:start position:0%
at which
the<01:08:20.960><c> scheduler</c><01:08:21.359><c> finds</c><01:08:21.679><c> the</c><01:08:21.759><c> next</c><01:08:22.000><c> process</c><01:08:22.319><c> so</c>

01:08:22.390 --> 01:08:22.400 align:start position:0%
the scheduler finds the next process so
 

01:08:22.400 --> 01:08:26.470 align:start position:0%
the scheduler finds the next process so
i'm<01:08:22.480><c> going</c><01:08:22.560><c> to</c><01:08:22.640><c> put</c><01:08:22.799><c> a</c><01:08:22.880><c> break</c><01:08:23.120><c> point</c>

01:08:26.470 --> 01:08:26.480 align:start position:0%
 
 

01:08:26.480 --> 01:08:29.189 align:start position:0%
 
at<01:08:27.199><c> line</c><01:08:27.440><c> 474</c><01:08:28.239><c> where</c><01:08:28.400><c> it's</c><01:08:28.560><c> actually</c><01:08:28.880><c> found</c><01:08:29.120><c> a</c>

01:08:29.189 --> 01:08:29.199 align:start position:0%
at line 474 where it's actually found a
 

01:08:29.199 --> 01:08:32.070 align:start position:0%
at line 474 where it's actually found a
new<01:08:29.440><c> process</c><01:08:29.759><c> to</c><01:08:29.920><c> run</c>

01:08:32.070 --> 01:08:32.080 align:start position:0%
new process to run
 

01:08:32.080 --> 01:08:35.430 align:start position:0%
new process to run
here<01:08:32.239><c> we</c><01:08:32.400><c> are</c><01:08:32.880><c> on</c><01:08:33.120><c> the</c><01:08:33.279><c> schedulers</c><01:08:35.040><c> scan</c><01:08:35.359><c> the</c>

01:08:35.430 --> 01:08:35.440 align:start position:0%
here we are on the schedulers scan the
 

01:08:35.440 --> 01:08:35.829 align:start position:0%
here we are on the schedulers scan the
process

01:08:35.829 --> 01:08:35.839 align:start position:0%
process
 

01:08:35.839 --> 01:08:39.189 align:start position:0%
process
table<01:08:36.080><c> and</c><01:08:36.319><c> found</c><01:08:36.560><c> another</c><01:08:36.799><c> process</c><01:08:37.199><c> to</c><01:08:37.359><c> run</c>

01:08:39.189 --> 01:08:39.199 align:start position:0%
table and found another process to run
 

01:08:39.199 --> 01:08:41.669 align:start position:0%
table and found another process to run
and<01:08:40.239><c> it's</c><01:08:40.480><c> going</c><01:08:40.560><c> to</c><01:08:40.880><c> cause</c><01:08:41.120><c> that</c><01:08:41.279><c> process</c><01:08:41.520><c> to</c>

01:08:41.669 --> 01:08:41.679 align:start position:0%
and it's going to cause that process to
 

01:08:41.679 --> 01:08:42.229 align:start position:0%
and it's going to cause that process to
run<01:08:41.920><c> you</c>

01:08:42.229 --> 01:08:42.239 align:start position:0%
run you
 

01:08:42.239 --> 01:08:44.709 align:start position:0%
run you
can<01:08:42.400><c> see</c><01:08:42.560><c> it</c><01:08:42.719><c> line</c><01:08:42.960><c> 468</c><01:08:43.600><c> it</c><01:08:44.000><c> acquired</c><01:08:44.560><c> that</c>

01:08:44.709 --> 01:08:44.719 align:start position:0%
can see it line 468 it acquired that
 

01:08:44.719 --> 01:08:45.749 align:start position:0%
can see it line 468 it acquired that
process<01:08:45.120><c> is</c><01:08:45.359><c> locked</c>

01:08:45.749 --> 01:08:45.759 align:start position:0%
process is locked
 

01:08:45.759 --> 01:08:48.070 align:start position:0%
process is locked
so<01:08:45.920><c> now</c><01:08:46.159><c> it's</c><01:08:46.319><c> entitled</c><01:08:46.799><c> to</c><01:08:47.359><c> do</c><01:08:47.520><c> the</c><01:08:47.679><c> various</c>

01:08:48.070 --> 01:08:48.080 align:start position:0%
so now it's entitled to do the various
 

01:08:48.080 --> 01:08:49.510 align:start position:0%
so now it's entitled to do the various
steps<01:08:48.400><c> that</c><01:08:48.480><c> are</c><01:08:48.560><c> required</c><01:08:48.960><c> to</c><01:08:49.120><c> switch</c><01:08:49.440><c> to</c>

01:08:49.510 --> 01:08:49.520 align:start position:0%
steps that are required to switch to
 

01:08:49.520 --> 01:08:51.669 align:start position:0%
steps that are required to switch to
that<01:08:49.759><c> process</c>

01:08:51.669 --> 01:08:51.679 align:start position:0%
that process
 

01:08:51.679 --> 01:08:54.070 align:start position:0%
that process
in<01:08:51.839><c> line</c><01:08:52.080><c> 473</c><01:08:52.880><c> it</c><01:08:53.040><c> set</c><01:08:53.199><c> the</c><01:08:53.359><c> processes</c><01:08:53.839><c> state</c>

01:08:54.070 --> 01:08:54.080 align:start position:0%
in line 473 it set the processes state
 

01:08:54.080 --> 01:08:55.269 align:start position:0%
in line 473 it set the processes state
to<01:08:54.239><c> running</c>

01:08:55.269 --> 01:08:55.279 align:start position:0%
to running
 

01:08:55.279 --> 01:08:57.749 align:start position:0%
to running
it's<01:08:55.440><c> now</c><01:08:55.679><c> at</c><01:08:55.839><c> 474</c><01:08:56.560><c> going</c><01:08:56.719><c> to</c><01:08:56.799><c> record</c><01:08:57.520><c> in</c><01:08:57.600><c> the</c>

01:08:57.749 --> 01:08:57.759 align:start position:0%
it's now at 474 going to record in the
 

01:08:57.759 --> 01:08:59.349 align:start position:0%
it's now at 474 going to record in the
cpu<01:08:58.319><c> structure</c>

01:08:59.349 --> 01:08:59.359 align:start position:0%
cpu structure
 

01:08:59.359 --> 01:09:03.269 align:start position:0%
cpu structure
which<01:08:59.759><c> process</c><01:09:00.239><c> the</c><01:09:00.400><c> cpu</c><01:09:00.799><c> is</c><01:09:00.960><c> executing</c>

01:09:03.269 --> 01:09:03.279 align:start position:0%
which process the cpu is executing
 

01:09:03.279 --> 01:09:05.829 align:start position:0%
which process the cpu is executing
and<01:09:03.440><c> then</c><01:09:03.600><c> call</c><01:09:03.920><c> switch</c><01:09:04.560><c> to</c><01:09:04.960><c> save</c><01:09:05.759><c> the</c>

01:09:05.829 --> 01:09:05.839 align:start position:0%
and then call switch to save the
 

01:09:05.839 --> 01:09:08.709 align:start position:0%
and then call switch to save the
scheduler's<01:09:06.400><c> registers</c><01:09:06.960><c> and</c><01:09:07.040><c> restore</c>

01:09:08.709 --> 01:09:08.719 align:start position:0%
scheduler's registers and restore
 

01:09:08.719 --> 01:09:10.630 align:start position:0%
scheduler's registers and restore
the<01:09:08.880><c> target</c><01:09:09.279><c> processors</c><01:09:09.759><c> registers</c><01:09:10.400><c> so</c><01:09:10.560><c> we</c>

01:09:10.630 --> 01:09:10.640 align:start position:0%
the target processors registers so we
 

01:09:10.640 --> 01:09:12.390 align:start position:0%
the target processors registers so we
can<01:09:10.799><c> see</c><01:09:10.880><c> what</c><01:09:11.040><c> process</c><01:09:11.440><c> it</c><01:09:11.600><c> found</c><01:09:11.920><c> by</c><01:09:12.159><c> looking</c>

01:09:12.390 --> 01:09:12.400 align:start position:0%
can see what process it found by looking
 

01:09:12.400 --> 01:09:13.669 align:start position:0%
can see what process it found by looking
at

01:09:13.669 --> 01:09:13.679 align:start position:0%
at
 

01:09:13.679 --> 01:09:15.910 align:start position:0%
at
the<01:09:13.759><c> new</c><01:09:13.920><c> process's</c><01:09:14.480><c> name</c><01:09:15.120><c> surprisingly</c><01:09:15.759><c> it's</c>

01:09:15.910 --> 01:09:15.920 align:start position:0%
the new process's name surprisingly it's
 

01:09:15.920 --> 01:09:17.669 align:start position:0%
the new process's name surprisingly it's
spin

01:09:17.669 --> 01:09:17.679 align:start position:0%
spin
 

01:09:17.679 --> 01:09:19.749 align:start position:0%
spin
this<01:09:17.839><c> process</c><01:09:18.159><c> id</c><01:09:18.400><c> is</c><01:09:18.480><c> now</c><01:09:18.719><c> four</c><01:09:19.359><c> we</c><01:09:19.520><c> used</c><01:09:19.679><c> to</c>

01:09:19.749 --> 01:09:19.759 align:start position:0%
this process id is now four we used to
 

01:09:19.759 --> 01:09:23.829 align:start position:0%
this process id is now four we used to
be<01:09:19.839><c> running</c><01:09:20.159><c> three</c><01:09:20.560><c> we're</c><01:09:20.719><c> now</c><01:09:20.880><c> running</c><01:09:21.199><c> four</c>

01:09:23.829 --> 01:09:23.839 align:start position:0%
 
 

01:09:23.839 --> 01:09:25.110 align:start position:0%
 
and<01:09:24.080><c> we've</c><01:09:24.239><c> already</c><01:09:24.480><c> set</c><01:09:24.640><c> the</c><01:09:24.799><c> state</c><01:09:24.960><c> to</c>

01:09:25.110 --> 01:09:25.120 align:start position:0%
and we've already set the state to
 

01:09:25.120 --> 01:09:29.430 align:start position:0%
and we've already set the state to
running<01:09:25.520><c> so</c>

01:09:29.430 --> 01:09:29.440 align:start position:0%
 
 

01:09:29.440 --> 01:09:32.630 align:start position:0%
 
so<01:09:29.839><c> the</c><01:09:30.000><c> state's</c><01:09:30.319><c> running</c>

01:09:32.630 --> 01:09:32.640 align:start position:0%
so the state's running
 

01:09:32.640 --> 01:09:34.470 align:start position:0%
so the state's running
we<01:09:32.719><c> can</c><01:09:32.880><c> see</c><01:09:33.120><c> where</c><01:09:33.440><c> this</c><01:09:33.759><c> thread</c><01:09:34.080><c> is</c><01:09:34.239><c> going</c><01:09:34.319><c> to</c>

01:09:34.470 --> 01:09:34.480 align:start position:0%
we can see where this thread is going to
 

01:09:34.480 --> 01:09:36.510 align:start position:0%
we can see where this thread is going to
switch<01:09:34.880><c> to</c><01:09:35.359><c> in</c><01:09:35.440><c> the</c><01:09:35.600><c> call</c><01:09:35.759><c> to</c><01:09:35.920><c> switch</c><01:09:36.159><c> at</c><01:09:36.239><c> line</c>

01:09:36.510 --> 01:09:36.520 align:start position:0%
switch to in the call to switch at line
 

01:09:36.520 --> 01:09:39.910 align:start position:0%
switch to in the call to switch at line
475.

01:09:39.910 --> 01:09:39.920 align:start position:0%
 
 

01:09:39.920 --> 01:09:42.950 align:start position:0%
 
print<01:09:40.159><c> this</c><01:09:40.319><c> context</c><01:09:40.799><c> he</c><01:09:40.880><c> saved</c><01:09:41.199><c> registers</c>

01:09:42.950 --> 01:09:42.960 align:start position:0%
print this context he saved registers
 

01:09:42.960 --> 01:09:45.349 align:start position:0%
print this context he saved registers
so<01:09:43.199><c> where</c><01:09:43.520><c> is</c><01:09:43.679><c> the</c><01:09:43.839><c> ra</c><01:09:44.560><c> the</c><01:09:44.960><c> course</c><01:09:45.199><c> we're</c>

01:09:45.349 --> 01:09:45.359 align:start position:0%
so where is the ra the course we're
 

01:09:45.359 --> 01:09:46.789 align:start position:0%
so where is the ra the course we're
going<01:09:45.440><c> to</c><01:09:45.520><c> call</c><01:09:45.839><c> switch</c><01:09:46.239><c> but</c>

01:09:46.789 --> 01:09:46.799 align:start position:0%
going to call switch but
 

01:09:46.799 --> 01:09:49.829 align:start position:0%
going to call switch but
switch<01:09:47.199><c> as</c><01:09:47.359><c> we</c><01:09:47.520><c> know</c><01:09:48.080><c> returns</c><01:09:49.520><c> when</c><01:09:49.759><c> it</c>

01:09:49.829 --> 01:09:49.839 align:start position:0%
switch as we know returns when it
 

01:09:49.839 --> 01:09:52.470 align:start position:0%
switch as we know returns when it
returns<01:09:50.239><c> it</c><01:09:50.319><c> returns</c><01:09:50.799><c> to</c><01:09:50.960><c> the</c><01:09:51.040><c> restored</c><01:09:51.679><c> ra</c>

01:09:52.470 --> 01:09:52.480 align:start position:0%
returns it returns to the restored ra
 

01:09:52.480 --> 01:09:55.189 align:start position:0%
returns it returns to the restored ra
so<01:09:52.719><c> we</c><01:09:52.880><c> really</c><01:09:53.120><c> care</c><01:09:53.359><c> about</c><01:09:53.679><c> is</c><01:09:54.560><c> where</c><01:09:54.880><c> is</c><01:09:55.040><c> it</c>

01:09:55.189 --> 01:09:55.199 align:start position:0%
so we really care about is where is it
 

01:09:55.199 --> 01:09:56.070 align:start position:0%
so we really care about is where is it
that

01:09:56.070 --> 01:09:56.080 align:start position:0%
that
 

01:09:56.080 --> 01:10:00.830 align:start position:0%
that
ra<01:09:56.560><c> points</c><01:09:56.880><c> to</c><01:09:57.199><c> we</c><01:09:57.280><c> can</c><01:09:57.440><c> find</c><01:09:57.679><c> that</c><01:09:57.920><c> out</c><01:09:58.239><c> by</c>

01:10:00.830 --> 01:10:00.840 align:start position:0%
 
 

01:10:00.840 --> 01:10:07.270 align:start position:0%
 
oops<01:10:02.080><c> um</c><01:10:02.719><c> using</c><01:10:03.040><c> x</c><01:10:03.199><c> slash</c><01:10:03.600><c> i</c>

01:10:07.270 --> 01:10:07.280 align:start position:0%
 
 

01:10:07.280 --> 01:10:09.350 align:start position:0%
 
uh<01:10:07.520><c> it's</c><01:10:07.679><c> going</c><01:10:07.760><c> to</c><01:10:07.840><c> return</c><01:10:08.400><c> r</c><01:10:08.640><c> a</c><01:10:08.880><c> points</c><01:10:09.120><c> to</c>

01:10:09.350 --> 01:10:09.360 align:start position:0%
uh it's going to return r a points to
 

01:10:09.360 --> 01:10:11.030 align:start position:0%
uh it's going to return r a points to
some<01:10:09.600><c> point</c><01:10:09.840><c> in</c><01:10:10.000><c> sked</c><01:10:10.400><c> so</c><01:10:10.560><c> that's</c><01:10:10.719><c> not</c><01:10:10.880><c> too</c>

01:10:11.030 --> 01:10:11.040 align:start position:0%
some point in sked so that's not too
 

01:10:11.040 --> 01:10:12.149 align:start position:0%
some point in sked so that's not too
surprising<01:10:11.600><c> since</c>

01:10:12.149 --> 01:10:12.159 align:start position:0%
surprising since
 

01:10:12.159 --> 01:10:16.310 align:start position:0%
surprising since
presumably<01:10:12.880><c> that</c><01:10:13.199><c> other</c><01:10:13.520><c> spin</c><01:10:14.040><c> process</c>

01:10:16.310 --> 01:10:16.320 align:start position:0%
presumably that other spin process
 

01:10:16.320 --> 01:10:18.149 align:start position:0%
presumably that other spin process
was<01:10:16.480><c> suspended</c><01:10:17.120><c> due</c><01:10:17.280><c> to</c><01:10:17.360><c> a</c><01:10:17.440><c> timer</c><01:10:17.760><c> interrupt</c>

01:10:18.149 --> 01:10:18.159 align:start position:0%
was suspended due to a timer interrupt
 

01:10:18.159 --> 01:10:20.950 align:start position:0%
was suspended due to a timer interrupt
which<01:10:18.400><c> as</c><01:10:18.480><c> we</c><01:10:18.640><c> know</c><01:10:19.040><c> called</c><01:10:19.280><c> sked</c>

01:10:20.950 --> 01:10:20.960 align:start position:0%
which as we know called sked
 

01:10:20.960 --> 01:10:26.390 align:start position:0%
which as we know called sked
which<01:10:21.120><c> calls</c><01:10:21.360><c> switch</c>

01:10:26.390 --> 01:10:26.400 align:start position:0%
 
 

01:10:26.400 --> 01:10:29.590 align:start position:0%
 
all<01:10:26.560><c> right</c><01:10:28.560><c> so</c><01:10:28.719><c> we're</c><01:10:28.800><c> about</c><01:10:28.960><c> to</c><01:10:29.040><c> call</c><01:10:29.280><c> switch</c>

01:10:29.590 --> 01:10:29.600 align:start position:0%
all right so we're about to call switch
 

01:10:29.600 --> 01:10:31.110 align:start position:0%
all right so we're about to call switch
let<01:10:29.760><c> me</c><01:10:29.920><c> just</c><01:10:30.000><c> bring</c><01:10:30.239><c> up</c><01:10:30.320><c> the</c><01:10:30.560><c> switch</c><01:10:30.880><c> code</c>

01:10:31.110 --> 01:10:31.120 align:start position:0%
let me just bring up the switch code
 

01:10:31.120 --> 01:10:34.070 align:start position:0%
let me just bring up the switch code
again

01:10:34.070 --> 01:10:34.080 align:start position:0%
 
 

01:10:34.080 --> 01:10:38.709 align:start position:0%
 
um

01:10:38.709 --> 01:10:38.719 align:start position:0%
 
 

01:10:38.719 --> 01:10:41.669 align:start position:0%
 
actually<01:10:39.120><c> enter</c><01:10:39.440><c> switch</c><01:10:39.840><c> we're</c><01:10:40.080><c> still</c><01:10:41.280><c> uh</c>

01:10:41.669 --> 01:10:41.679 align:start position:0%
actually enter switch we're still uh
 

01:10:41.679 --> 01:10:42.950 align:start position:0%
actually enter switch we're still uh
where<01:10:42.000><c> shows</c><01:10:42.239><c> that</c><01:10:42.320><c> we're</c><01:10:42.480><c> still</c><01:10:42.719><c> in</c><01:10:42.800><c> the</c>

01:10:42.950 --> 01:10:42.960 align:start position:0%
where shows that we're still in the
 

01:10:42.960 --> 01:10:46.950 align:start position:0%
where shows that we're still in the
scheduler's<01:10:43.679><c> context</c>

01:10:46.950 --> 01:10:46.960 align:start position:0%
 
 

01:10:46.960 --> 01:10:49.350 align:start position:0%
 
i<01:10:47.120><c> want</c><01:10:47.280><c> to</c><01:10:48.000><c> again</c><01:10:48.400><c> execute</c><01:10:48.880><c> all</c><01:10:49.040><c> of</c><01:10:49.199><c> the</c>

01:10:49.350 --> 01:10:49.360 align:start position:0%
i want to again execute all of the
 

01:10:49.360 --> 01:10:50.470 align:start position:0%
i want to again execute all of the
instructions<01:10:49.760><c> of</c><01:10:49.840><c> the</c><01:10:49.920><c> switch</c><01:10:50.159><c> this</c><01:10:50.320><c> time</c>

01:10:50.470 --> 01:10:50.480 align:start position:0%
instructions of the switch this time
 

01:10:50.480 --> 01:10:52.550 align:start position:0%
instructions of the switch this time
switching<01:10:50.880><c> from</c><01:10:51.040><c> the</c><01:10:51.120><c> scheduler</c><01:10:51.679><c> to</c><01:10:51.840><c> the</c>

01:10:52.550 --> 01:10:52.560 align:start position:0%
switching from the scheduler to the
 

01:10:52.560 --> 01:10:55.830 align:start position:0%
switching from the scheduler to the
new<01:10:52.800><c> process</c><01:10:54.159><c> so</c><01:10:54.320><c> we</c><01:10:54.480><c> skip</c><01:10:54.719><c> over</c><01:10:54.880><c> the</c><01:10:55.040><c> 28</c>

01:10:55.830 --> 01:10:55.840 align:start position:0%
new process so we skip over the 28
 

01:10:55.840 --> 01:11:00.709 align:start position:0%
new process so we skip over the 28
stores<01:10:56.239><c> and</c><01:10:56.840><c> loads</c>

01:11:00.709 --> 01:11:00.719 align:start position:0%
 
 

01:11:00.719 --> 01:11:02.790 align:start position:0%
 
just<01:11:01.280><c> convince</c><01:11:01.760><c> ourselves</c><01:11:02.239><c> that</c><01:11:02.400><c> we</c><01:11:02.560><c> are</c>

01:11:02.790 --> 01:11:02.800 align:start position:0%
just convince ourselves that we are
 

01:11:02.800 --> 01:11:04.630 align:start position:0%
just convince ourselves that we are
actually<01:11:03.040><c> about</c><01:11:03.199><c> to</c><01:11:03.360><c> return</c><01:11:03.679><c> to</c><01:11:03.840><c> sched</c><01:11:04.159><c> so</c><01:11:04.320><c> now</c>

01:11:04.630 --> 01:11:04.640 align:start position:0%
actually about to return to sched so now
 

01:11:04.640 --> 01:11:06.310 align:start position:0%
actually about to return to sched so now
since<01:11:04.800><c> we're</c><01:11:05.120><c> about</c><01:11:05.280><c> to</c><01:11:05.360><c> return</c><01:11:05.679><c> to</c><01:11:05.840><c> sched</c><01:11:06.239><c> and</c>

01:11:06.310 --> 01:11:06.320 align:start position:0%
since we're about to return to sched and
 

01:11:06.320 --> 01:11:07.350 align:start position:0%
since we're about to return to sched and
not<01:11:06.560><c> scheduler</c>

01:11:07.350 --> 01:11:07.360 align:start position:0%
not scheduler
 

01:11:07.360 --> 01:11:09.830 align:start position:0%
not scheduler
we<01:11:07.520><c> must</c><01:11:07.760><c> now</c><01:11:08.000><c> be</c><01:11:08.480><c> in</c><01:11:08.719><c> a</c><01:11:09.040><c> process</c><01:11:09.520><c> kernel</c>

01:11:09.830 --> 01:11:09.840 align:start position:0%
we must now be in a process kernel
 

01:11:09.840 --> 01:11:12.790 align:start position:0%
we must now be in a process kernel
thread<01:11:10.159><c> and</c><01:11:10.239><c> no</c><01:11:10.400><c> longer</c>

01:11:12.790 --> 01:11:12.800 align:start position:0%
thread and no longer
 

01:11:12.800 --> 01:11:14.709 align:start position:0%
thread and no longer
in<01:11:12.960><c> the</c><01:11:13.040><c> scheduler</c><01:11:13.520><c> threat</c><01:11:13.760><c> and</c><01:11:13.920><c> indeed</c><01:11:14.480><c> if</c><01:11:14.560><c> we</c>

01:11:14.709 --> 01:11:14.719 align:start position:0%
in the scheduler threat and indeed if we
 

01:11:14.719 --> 01:11:16.229 align:start position:0%
in the scheduler threat and indeed if we
look<01:11:14.880><c> at</c><01:11:14.960><c> the</c><01:11:15.040><c> back</c><01:11:15.280><c> trace</c>

01:11:16.229 --> 01:11:16.239 align:start position:0%
look at the back trace
 

01:11:16.239 --> 01:11:18.470 align:start position:0%
look at the back trace
we<01:11:16.400><c> had</c><01:11:16.640><c> a</c><01:11:16.719><c> user</c><01:11:17.120><c> trap</c><01:11:17.520><c> call</c><01:11:18.000><c> there</c><01:11:18.159><c> must</c><01:11:18.400><c> have</c>

01:11:18.470 --> 01:11:18.480 align:start position:0%
we had a user trap call there must have
 

01:11:18.480 --> 01:11:19.830 align:start position:0%
we had a user trap call there must have
been<01:11:18.560><c> a</c><01:11:18.719><c> timer</c><01:11:19.040><c> interrupt</c>

01:11:19.830 --> 01:11:19.840 align:start position:0%
been a timer interrupt
 

01:11:19.840 --> 01:11:22.550 align:start position:0%
been a timer interrupt
from<01:11:20.000><c> long</c><01:11:20.239><c> you</c><01:11:20.400><c> know</c><01:11:20.640><c> sometime</c><01:11:21.040><c> in</c><01:11:21.120><c> the</c><01:11:21.199><c> past</c>

01:11:22.550 --> 01:11:22.560 align:start position:0%
from long you know sometime in the past
 

01:11:22.560 --> 01:11:23.350 align:start position:0%
from long you know sometime in the past
that

01:11:23.350 --> 01:11:23.360 align:start position:0%
that
 

01:11:23.360 --> 01:11:24.950 align:start position:0%
that
as<01:11:23.520><c> we've</c><01:11:23.679><c> seen</c><01:11:23.920><c> called</c><01:11:24.159><c> yield</c><01:11:24.400><c> and</c><01:11:24.480><c> sched</c><01:11:24.800><c> but</c>

01:11:24.950 --> 01:11:24.960 align:start position:0%
as we've seen called yield and sched but
 

01:11:24.960 --> 01:11:26.470 align:start position:0%
as we've seen called yield and sched but
it<01:11:25.040><c> was</c><01:11:25.199><c> the</c><01:11:25.360><c> timer</c><01:11:25.679><c> interrupt</c><01:11:26.000><c> in</c><01:11:26.080><c> the</c><01:11:26.239><c> other</c>

01:11:26.470 --> 01:11:26.480 align:start position:0%
it was the timer interrupt in the other
 

01:11:26.480 --> 01:11:27.030 align:start position:0%
it was the timer interrupt in the other
process

01:11:27.030 --> 01:11:27.040 align:start position:0%
process
 

01:11:27.040 --> 01:11:29.189 align:start position:0%
process
now<01:11:28.000><c> not</c><01:11:28.159><c> in</c><01:11:28.320><c> the</c><01:11:28.400><c> process</c><01:11:28.800><c> that</c><01:11:28.880><c> we</c>

01:11:29.189 --> 01:11:29.199 align:start position:0%
now not in the process that we
 

01:11:29.199 --> 01:11:35.590 align:start position:0%
now not in the process that we
originally<01:11:29.760><c> looked</c><01:11:30.080><c> at</c>

01:11:35.590 --> 01:11:35.600 align:start position:0%
 
 

01:11:35.600 --> 01:11:39.270 align:start position:0%
 
okay<01:11:37.199><c> any</c><01:11:37.520><c> questions</c><01:11:38.560><c> about</c>

01:11:39.270 --> 01:11:39.280 align:start position:0%
okay any questions about
 

01:11:39.280 --> 01:11:41.590 align:start position:0%
okay any questions about
i<01:11:39.440><c> think</c><01:11:39.600><c> i'm</c><01:11:39.679><c> going</c><01:11:39.840><c> to</c><01:11:40.320><c> leave</c><01:11:40.719><c> off</c><01:11:41.280><c> stepping</c>

01:11:41.590 --> 01:11:41.600 align:start position:0%
i think i'm going to leave off stepping
 

01:11:41.600 --> 01:11:43.910 align:start position:0%
i think i'm going to leave off stepping
through<01:11:41.760><c> the</c><01:11:41.840><c> code</c><01:11:42.080><c> at</c><01:11:42.159><c> this</c><01:11:42.320><c> point</c><01:11:42.719><c> and</c>

01:11:43.910 --> 01:11:43.920 align:start position:0%
through the code at this point and
 

01:11:43.920 --> 01:11:46.390 align:start position:0%
through the code at this point and
any<01:11:44.159><c> questions</c><01:11:44.560><c> about</c><01:11:44.800><c> the</c><01:11:46.000><c> any</c><01:11:46.159><c> of</c><01:11:46.239><c> the</c>

01:11:46.390 --> 01:11:46.400 align:start position:0%
any questions about the any of the
 

01:11:46.400 --> 01:11:49.750 align:start position:0%
any questions about the any of the
material<01:11:46.800><c> we've</c><01:11:46.960><c> seen</c>

01:11:49.750 --> 01:11:49.760 align:start position:0%
 
 

01:11:49.760 --> 01:11:52.830 align:start position:0%
 
oh<01:11:50.000><c> sorry</c><01:11:50.400><c> if</c><01:11:50.800><c> if</c><01:11:50.960><c> it</c><01:11:51.120><c> was</c><01:11:51.840><c> for</c><01:11:52.000><c> example</c><01:11:52.480><c> this</c>

01:11:52.830 --> 01:11:52.840 align:start position:0%
oh sorry if if it was for example this
 

01:11:52.840 --> 01:11:53.990 align:start position:0%
oh sorry if if it was for example this
kyle

01:11:53.990 --> 01:11:54.000 align:start position:0%
kyle
 

01:11:54.000 --> 01:11:57.270 align:start position:0%
kyle
then<01:11:54.400><c> we</c><01:11:54.560><c> would</c><01:11:54.880><c> see</c><01:11:56.000><c> that</c><01:11:56.880><c> our</c>

01:11:57.270 --> 01:11:57.280 align:start position:0%
then we would see that our
 

01:11:57.280 --> 01:12:00.470 align:start position:0%
then we would see that our
array<01:11:57.600><c> would</c><01:11:57.920><c> point</c><01:11:58.239><c> somewhere</c><01:11:58.800><c> to</c><01:12:00.159><c> like</c>

01:12:00.470 --> 01:12:00.480 align:start position:0%
array would point somewhere to like
 

01:12:00.480 --> 01:12:04.310 align:start position:0%
array would point somewhere to like
sleeve<01:12:00.880><c> or</c><01:12:01.440><c> something</c><01:12:01.840><c> like</c><01:12:02.000><c> that</c><01:12:02.320><c> right</c><01:12:03.360><c> um</c>

01:12:04.310 --> 01:12:04.320 align:start position:0%
sleeve or something like that right um
 

01:12:04.320 --> 01:12:08.390 align:start position:0%
sleeve or something like that right um
uh<01:12:05.280><c> yes</c><01:12:07.199><c> well</c>

01:12:08.390 --> 01:12:08.400 align:start position:0%
uh yes well
 

01:12:08.400 --> 01:12:10.310 align:start position:0%
uh yes well
we<01:12:08.880><c> see</c><01:12:09.040><c> that</c><01:12:09.199><c> the</c><01:12:09.440><c> where</c><01:12:09.760><c> at</c><01:12:09.840><c> this</c><01:12:10.080><c> point</c>

01:12:10.310 --> 01:12:10.320 align:start position:0%
we see that the where at this point
 

01:12:10.320 --> 01:12:11.510 align:start position:0%
we see that the where at this point
would<01:12:10.560><c> include</c>

01:12:11.510 --> 01:12:11.520 align:start position:0%
would include
 

01:12:11.520 --> 01:12:13.270 align:start position:0%
would include
some<01:12:11.920><c> system</c><01:12:12.239><c> call</c><01:12:12.480><c> implementation</c>

01:12:13.270 --> 01:12:13.280 align:start position:0%
some system call implementation
 

01:12:13.280 --> 01:12:14.870 align:start position:0%
some system call implementation
functions<01:12:13.840><c> and</c><01:12:13.920><c> a</c><01:12:14.000><c> call</c><01:12:14.239><c> to</c><01:12:14.400><c> sleep</c>

01:12:14.870 --> 01:12:14.880 align:start position:0%
functions and a call to sleep
 

01:12:14.880 --> 01:12:17.430 align:start position:0%
functions and a call to sleep
as<01:12:15.120><c> it</c><01:12:15.280><c> happens</c><01:12:15.600><c> i</c><01:12:15.760><c> think</c><01:12:16.960><c> i</c><01:12:17.040><c> mean</c><01:12:17.199><c> this</c><01:12:17.360><c> is</c>

01:12:17.430 --> 01:12:17.440 align:start position:0%
as it happens i think i mean this is
 

01:12:17.440 --> 01:12:18.390 align:start position:0%
as it happens i think i mean this is
this<01:12:17.600><c> is</c>

01:12:18.390 --> 01:12:18.400 align:start position:0%
this is
 

01:12:18.400 --> 01:12:19.270 align:start position:0%
this is
you're<01:12:18.560><c> basically</c><01:12:18.880><c> the</c><01:12:18.960><c> answer</c><01:12:19.120><c> your</c>

01:12:19.270 --> 01:12:19.280 align:start position:0%
you're basically the answer your
 

01:12:19.280 --> 01:12:22.630 align:start position:0%
you're basically the answer your
question<01:12:19.520><c> is</c><01:12:19.679><c> yes</c><01:12:21.280><c> if</c><01:12:21.360><c> we</c><01:12:21.600><c> had</c><01:12:21.760><c> just</c>

01:12:22.630 --> 01:12:22.640 align:start position:0%
question is yes if we had just
 

01:12:22.640 --> 01:12:25.110 align:start position:0%
question is yes if we had just
left<01:12:22.960><c> off</c><01:12:23.600><c> executing</c><01:12:24.159><c> this</c><01:12:24.400><c> process</c><01:12:24.800><c> for</c><01:12:24.960><c> some</c>

01:12:25.110 --> 01:12:25.120 align:start position:0%
left off executing this process for some
 

01:12:25.120 --> 01:12:27.030 align:start position:0%
left off executing this process for some
reason<01:12:25.440><c> other</c><01:12:25.600><c> than</c><01:12:25.679><c> timer</c><01:12:26.000><c> interrupt</c>

01:12:27.030 --> 01:12:27.040 align:start position:0%
reason other than timer interrupt
 

01:12:27.040 --> 01:12:29.189 align:start position:0%
reason other than timer interrupt
um<01:12:27.600><c> switch</c><01:12:27.920><c> would</c><01:12:28.159><c> be</c><01:12:28.320><c> basically</c><01:12:28.719><c> returning</c>

01:12:29.189 --> 01:12:29.199 align:start position:0%
um switch would be basically returning
 

01:12:29.199 --> 01:12:32.229 align:start position:0%
um switch would be basically returning
to<01:12:29.840><c> some</c><01:12:30.000><c> system</c><01:12:30.320><c> call</c><01:12:30.640><c> code</c><01:12:30.960><c> instead</c><01:12:31.360><c> of</c><01:12:31.600><c> to</c>

01:12:32.229 --> 01:12:32.239 align:start position:0%
to some system call code instead of to
 

01:12:32.239 --> 01:12:33.990 align:start position:0%
to some system call code instead of to
scan<01:12:32.640><c> as</c><01:12:32.719><c> it</c><01:12:32.880><c> happens</c><01:12:33.120><c> i</c><01:12:33.199><c> think</c><01:12:33.360><c> sleep</c><01:12:33.760><c> make</c>

01:12:33.990 --> 01:12:34.000 align:start position:0%
scan as it happens i think sleep make
 

01:12:34.000 --> 01:12:37.750 align:start position:0%
scan as it happens i think sleep make
calls<01:12:34.320><c> get</c><01:12:34.719><c> so</c>

01:12:37.750 --> 01:12:37.760 align:start position:0%
 
 

01:12:37.760 --> 01:12:38.950 align:start position:0%
 
the<01:12:37.920><c> back</c><01:12:38.080><c> trace</c><01:12:38.320><c> would</c><01:12:38.480><c> look</c><01:12:38.640><c> different</c><01:12:38.880><c> it</c>

01:12:38.950 --> 01:12:38.960 align:start position:0%
the back trace would look different it
 

01:12:38.960 --> 01:12:41.110 align:start position:0%
the back trace would look different it
would<01:12:39.040><c> just</c><01:12:39.199><c> happen</c><01:12:39.440><c> includes</c><01:12:39.840><c> get</c><01:12:40.159><c> but</c><01:12:40.320><c> yes</c>

01:12:41.110 --> 01:12:41.120 align:start position:0%
would just happen includes get but yes
 

01:12:41.120 --> 01:12:43.910 align:start position:0%
would just happen includes get but yes
so<01:12:41.280><c> i've</c><01:12:41.440><c> chosen</c><01:12:41.760><c> just</c><01:12:41.920><c> one</c><01:12:42.159><c> way</c><01:12:42.560><c> of</c><01:12:43.600><c> you</c><01:12:43.760><c> know</c>

01:12:43.910 --> 01:12:43.920 align:start position:0%
so i've chosen just one way of you know
 

01:12:43.920 --> 01:12:44.870 align:start position:0%
so i've chosen just one way of you know
just

01:12:44.870 --> 01:12:44.880 align:start position:0%
just
 

01:12:44.880 --> 01:12:46.630 align:start position:0%
just
one<01:12:45.120><c> way</c><01:12:45.280><c> of</c><01:12:45.440><c> switching</c><01:12:45.840><c> between</c><01:12:46.080><c> processes</c>

01:12:46.630 --> 01:12:46.640 align:start position:0%
one way of switching between processes
 

01:12:46.640 --> 01:12:49.510 align:start position:0%
one way of switching between processes
due<01:12:46.800><c> to</c><01:12:46.880><c> timer</c><01:12:47.199><c> interrupts</c>

01:12:49.510 --> 01:12:49.520 align:start position:0%
due to timer interrupts
 

01:12:49.520 --> 01:12:51.590 align:start position:0%
due to timer interrupts
but<01:12:49.679><c> you</c><01:12:49.840><c> also</c><01:12:50.080><c> get</c><01:12:50.320><c> switches</c><01:12:50.800><c> to</c><01:12:50.960><c> wait</c><01:12:51.199><c> for</c>

01:12:51.590 --> 01:12:51.600 align:start position:0%
but you also get switches to wait for
 

01:12:51.600 --> 01:12:53.350 align:start position:0%
but you also get switches to wait for
user<01:12:51.920><c> i</c><01:12:52.080><c> o</c><01:12:52.239><c> or</c><01:12:52.320><c> to</c><01:12:52.400><c> wait</c><01:12:52.640><c> for</c><01:12:52.719><c> other</c><01:12:52.880><c> processes</c>

01:12:53.350 --> 01:12:53.360 align:start position:0%
user i o or to wait for other processes
 

01:12:53.360 --> 01:12:58.470 align:start position:0%
user i o or to wait for other processes
to<01:12:53.520><c> do</c><01:12:53.760><c> things</c><01:12:54.000><c> like</c><01:12:54.239><c> write</c><01:12:54.400><c> to</c><01:12:54.560><c> a</c><01:12:54.640><c> pipe</c>

01:12:58.470 --> 01:12:58.480 align:start position:0%
 
 

01:12:58.480 --> 01:13:00.709 align:start position:0%
 
okay<01:12:58.719><c> one</c><01:12:58.880><c> thing</c><01:12:59.040><c> to</c><01:12:59.600><c> you</c><01:12:59.840><c> probably</c><01:13:00.159><c> noticed</c>

01:13:00.709 --> 01:13:00.719 align:start position:0%
okay one thing to you probably noticed
 

01:13:00.719 --> 01:13:02.630 align:start position:0%
okay one thing to you probably noticed
is<01:13:00.880><c> that</c><01:13:01.440><c> um</c>

01:13:02.630 --> 01:13:02.640 align:start position:0%
is that um
 

01:13:02.640 --> 01:13:05.669 align:start position:0%
is that um
scheduler<01:13:03.120><c> called</c><01:13:03.440><c> switch</c><01:13:04.880><c> and</c><01:13:05.280><c> we're</c><01:13:05.520><c> about</c>

01:13:05.669 --> 01:13:05.679 align:start position:0%
scheduler called switch and we're about
 

01:13:05.679 --> 01:13:07.830 align:start position:0%
scheduler called switch and we're about
to<01:13:05.840><c> return</c><01:13:06.239><c> from</c><01:13:06.480><c> switch</c><01:13:06.960><c> here</c>

01:13:07.830 --> 01:13:07.840 align:start position:0%
to return from switch here
 

01:13:07.840 --> 01:13:10.149 align:start position:0%
to return from switch here
but<01:13:08.640><c> we're</c><01:13:08.880><c> returning</c><01:13:09.520><c> really</c><01:13:09.840><c> from</c><01:13:10.000><c> a</c>

01:13:10.149 --> 01:13:10.159 align:start position:0%
but we're returning really from a
 

01:13:10.159 --> 01:13:11.270 align:start position:0%
but we're returning really from a
different<01:13:10.400><c> call</c><01:13:10.640><c> to</c><01:13:10.800><c> switch</c>

01:13:11.270 --> 01:13:11.280 align:start position:0%
different call to switch
 

01:13:11.280 --> 01:13:13.110 align:start position:0%
different call to switch
than<01:13:11.440><c> the</c><01:13:11.520><c> one</c><01:13:11.679><c> the</c><01:13:11.840><c> scheduler</c><01:13:12.320><c> made</c><01:13:12.880><c> we're</c>

01:13:13.110 --> 01:13:13.120 align:start position:0%
than the one the scheduler made we're
 

01:13:13.120 --> 01:13:14.470 align:start position:0%
than the one the scheduler made we're
returning<01:13:13.440><c> from</c><01:13:13.600><c> a</c><01:13:13.679><c> call</c><01:13:13.840><c> to</c><01:13:14.000><c> switch</c><01:13:14.320><c> that</c>

01:13:14.470 --> 01:13:14.480 align:start position:0%
returning from a call to switch that
 

01:13:14.480 --> 01:13:18.070 align:start position:0%
returning from a call to switch that
this<01:13:14.719><c> process</c><01:13:15.040><c> made</c><01:13:15.280><c> a</c><01:13:15.360><c> long</c><01:13:15.600><c> time</c><01:13:15.760><c> ago</c><01:13:16.840><c> um</c>

01:13:18.070 --> 01:13:18.080 align:start position:0%
this process made a long time ago um
 

01:13:18.080 --> 01:13:20.550 align:start position:0%
this process made a long time ago um
so<01:13:19.199><c> you</c><01:13:19.280><c> know</c><01:13:19.440><c> this</c><01:13:19.600><c> is</c><01:13:19.920><c> potentially</c><01:13:20.400><c> a</c><01:13:20.400><c> little</c>

01:13:20.550 --> 01:13:20.560 align:start position:0%
so you know this is potentially a little
 

01:13:20.560 --> 01:13:22.390 align:start position:0%
so you know this is potentially a little
bit<01:13:20.640><c> confusing</c><01:13:21.280><c> but</c>

01:13:22.390 --> 01:13:22.400 align:start position:0%
bit confusing but
 

01:13:22.400 --> 01:13:23.590 align:start position:0%
bit confusing but
you<01:13:22.480><c> know</c><01:13:22.560><c> this</c><01:13:22.719><c> is</c><01:13:22.800><c> how</c><01:13:22.960><c> the</c><01:13:23.120><c> guts</c><01:13:23.360><c> of</c><01:13:23.440><c> a</c>

01:13:23.590 --> 01:13:23.600 align:start position:0%
you know this is how the guts of a
 

01:13:23.600 --> 01:13:25.830 align:start position:0%
you know this is how the guts of a
thread<01:13:23.840><c> switch</c><01:13:24.239><c> work</c>

01:13:25.830 --> 01:13:25.840 align:start position:0%
thread switch work
 

01:13:25.840 --> 01:13:28.310 align:start position:0%
thread switch work
another<01:13:26.080><c> thing</c><01:13:26.239><c> to</c><01:13:26.480><c> notice</c><01:13:26.800><c> is</c><01:13:26.960><c> that</c><01:13:27.840><c> the</c><01:13:28.080><c> code</c>

01:13:28.310 --> 01:13:28.320 align:start position:0%
another thing to notice is that the code
 

01:13:28.320 --> 01:13:29.830 align:start position:0%
another thing to notice is that the code
we're<01:13:28.480><c> looking</c><01:13:28.719><c> at</c><01:13:28.880><c> the</c><01:13:29.040><c> switch</c><01:13:29.360><c> code</c><01:13:29.600><c> this</c><01:13:29.760><c> is</c>

01:13:29.830 --> 01:13:29.840 align:start position:0%
we're looking at the switch code this is
 

01:13:29.840 --> 01:13:30.870 align:start position:0%
we're looking at the switch code this is
really<01:13:30.080><c> the</c><01:13:30.320><c> heart</c>

01:13:30.870 --> 01:13:30.880 align:start position:0%
really the heart
 

01:13:30.880 --> 01:13:34.070 align:start position:0%
really the heart
of<01:13:32.000><c> thread</c><01:13:32.400><c> switching</c><01:13:33.520><c> and</c>

01:13:34.070 --> 01:13:34.080 align:start position:0%
of thread switching and
 

01:13:34.080 --> 01:13:35.750 align:start position:0%
of thread switching and
really<01:13:34.400><c> all</c><01:13:34.640><c> you</c><01:13:34.800><c> have</c><01:13:34.880><c> to</c><01:13:34.960><c> do</c><01:13:35.120><c> to</c><01:13:35.280><c> switch</c>

01:13:35.750 --> 01:13:35.760 align:start position:0%
really all you have to do to switch
 

01:13:35.760 --> 01:13:37.910 align:start position:0%
really all you have to do to switch
switch<01:13:36.159><c> threads</c><01:13:36.800><c> is</c>

01:13:37.910 --> 01:13:37.920 align:start position:0%
switch threads is
 

01:13:37.920 --> 01:13:40.790 align:start position:0%
switch threads is
save<01:13:38.239><c> registers</c><01:13:38.800><c> and</c><01:13:38.880><c> restore</c><01:13:39.440><c> registers</c><01:13:40.480><c> now</c>

01:13:40.790 --> 01:13:40.800 align:start position:0%
save registers and restore registers now
 

01:13:40.800 --> 01:13:42.310 align:start position:0%
save registers and restore registers now
threads<01:13:41.120><c> have</c><01:13:41.280><c> a</c><01:13:41.360><c> lot</c><01:13:41.520><c> more</c><01:13:41.679><c> state</c><01:13:42.000><c> than</c><01:13:42.159><c> just</c>

01:13:42.310 --> 01:13:42.320 align:start position:0%
threads have a lot more state than just
 

01:13:42.320 --> 01:13:44.470 align:start position:0%
threads have a lot more state than just
registers<01:13:42.800><c> they</c><01:13:42.960><c> have</c><01:13:43.120><c> variables</c><01:13:44.080><c> and</c>

01:13:44.470 --> 01:13:44.480 align:start position:0%
registers they have variables and
 

01:13:44.480 --> 01:13:47.910 align:start position:0%
registers they have variables and
stuff<01:13:44.800><c> in</c><01:13:44.880><c> the</c><01:13:45.040><c> heap</c><01:13:45.440><c> and</c><01:13:45.600><c> who</c><01:13:45.760><c> knows</c><01:13:46.000><c> what</c><01:13:46.320><c> but</c>

01:13:47.910 --> 01:13:47.920 align:start position:0%
stuff in the heap and who knows what but
 

01:13:47.920 --> 01:13:51.030 align:start position:0%
stuff in the heap and who knows what but
all<01:13:48.080><c> that</c><01:13:48.320><c> other</c><01:13:48.640><c> state</c><01:13:49.440><c> is</c><01:13:49.679><c> in</c><01:13:49.920><c> memory</c><01:13:50.800><c> and</c>

01:13:51.030 --> 01:13:51.040 align:start position:0%
all that other state is in memory and
 

01:13:51.040 --> 01:13:52.709 align:start position:0%
all that other state is in memory and
isn't<01:13:51.280><c> going</c><01:13:51.360><c> to</c><01:13:51.440><c> be</c><01:13:51.600><c> disturbed</c><01:13:52.239><c> we've</c><01:13:52.480><c> done</c>

01:13:52.709 --> 01:13:52.719 align:start position:0%
isn't going to be disturbed we've done
 

01:13:52.719 --> 01:13:54.790 align:start position:0%
isn't going to be disturbed we've done
nothing<01:13:52.960><c> to</c><01:13:53.120><c> disturb</c>

01:13:54.790 --> 01:13:54.800 align:start position:0%
nothing to disturb
 

01:13:54.800 --> 01:13:57.350 align:start position:0%
nothing to disturb
any<01:13:54.960><c> of</c><01:13:55.120><c> these</c><01:13:55.360><c> threads</c><01:13:56.080><c> stacks</c><01:13:56.640><c> for</c><01:13:56.800><c> example</c>

01:13:57.350 --> 01:13:57.360 align:start position:0%
any of these threads stacks for example
 

01:13:57.360 --> 01:13:57.990 align:start position:0%
any of these threads stacks for example
or

01:13:57.990 --> 01:13:58.000 align:start position:0%
or
 

01:13:58.000 --> 01:14:01.830 align:start position:0%
or
heap<01:13:58.320><c> values</c><01:14:00.320><c> so</c><01:14:00.480><c> the</c><01:14:00.960><c> registers</c><01:14:01.600><c> in</c><01:14:01.679><c> the</c>

01:14:01.830 --> 01:14:01.840 align:start position:0%
heap values so the registers in the
 

01:14:01.840 --> 01:14:03.510 align:start position:0%
heap values so the registers in the
microprocessor<01:14:02.640><c> are</c><01:14:02.719><c> really</c><01:14:02.960><c> the</c><01:14:03.120><c> only</c><01:14:03.360><c> kind</c>

01:14:03.510 --> 01:14:03.520 align:start position:0%
microprocessor are really the only kind
 

01:14:03.520 --> 01:14:04.630 align:start position:0%
microprocessor are really the only kind
of<01:14:03.600><c> volatile</c><01:14:04.080><c> state</c>

01:14:04.630 --> 01:14:04.640 align:start position:0%
of volatile state
 

01:14:04.640 --> 01:14:06.310 align:start position:0%
of volatile state
that<01:14:05.280><c> actually</c><01:14:05.520><c> needs</c><01:14:05.760><c> to</c><01:14:05.840><c> be</c><01:14:05.920><c> saved</c><01:14:06.239><c> and</c>

01:14:06.310 --> 01:14:06.320 align:start position:0%
that actually needs to be saved and
 

01:14:06.320 --> 01:14:07.910 align:start position:0%
that actually needs to be saved and
restored<01:14:06.719><c> to</c><01:14:06.800><c> do</c><01:14:06.880><c> a</c><01:14:06.960><c> thread</c><01:14:07.280><c> switch</c>

01:14:07.910 --> 01:14:07.920 align:start position:0%
restored to do a thread switch
 

01:14:07.920 --> 01:14:09.830 align:start position:0%
restored to do a thread switch
all<01:14:08.080><c> the</c><01:14:08.239><c> stuffs</c><01:14:08.480><c> in</c><01:14:08.560><c> memory</c><01:14:09.360><c> stack</c><01:14:09.679><c> for</c>

01:14:09.830 --> 01:14:09.840 align:start position:0%
all the stuffs in memory stack for
 

01:14:09.840 --> 01:14:11.830 align:start position:0%
all the stuffs in memory stack for
example<01:14:10.239><c> will</c><01:14:10.480><c> still</c><01:14:10.640><c> be</c><01:14:10.800><c> in</c><01:14:10.880><c> memory</c><01:14:11.360><c> on</c>

01:14:11.830 --> 01:14:11.840 align:start position:0%
example will still be in memory on
 

01:14:11.840 --> 01:14:13.750 align:start position:0%
example will still be in memory on
undisturbed<01:14:12.800><c> and</c><01:14:12.960><c> so</c><01:14:13.120><c> it</c><01:14:13.199><c> doesn't</c><01:14:13.440><c> have</c><01:14:13.520><c> to</c><01:14:13.600><c> be</c>

01:14:13.750 --> 01:14:13.760 align:start position:0%
undisturbed and so it doesn't have to be
 

01:14:13.760 --> 01:14:16.229 align:start position:0%
undisturbed and so it doesn't have to be
explicitly<01:14:14.400><c> saved</c><01:14:14.719><c> and</c><01:14:14.800><c> restored</c>

01:14:16.229 --> 01:14:16.239 align:start position:0%
explicitly saved and restored
 

01:14:16.239 --> 01:14:17.830 align:start position:0%
explicitly saved and restored
now<01:14:16.400><c> we're</c><01:14:16.560><c> only</c><01:14:16.719><c> saving</c><01:14:17.040><c> and</c><01:14:17.120><c> restoring</c><01:14:17.520><c> this</c>

01:14:17.830 --> 01:14:17.840 align:start position:0%
now we're only saving and restoring this
 

01:14:17.840 --> 01:14:19.910 align:start position:0%
now we're only saving and restoring this
microprocessor<01:14:18.640><c> the</c><01:14:18.719><c> cpu</c><01:14:19.199><c> registers</c>

01:14:19.910 --> 01:14:19.920 align:start position:0%
microprocessor the cpu registers
 

01:14:19.920 --> 01:14:22.070 align:start position:0%
microprocessor the cpu registers
because<01:14:20.159><c> we</c><01:14:20.320><c> want</c><01:14:20.480><c> to</c><01:14:20.560><c> reuse</c><01:14:21.199><c> those</c><01:14:21.679><c> very</c>

01:14:22.070 --> 01:14:22.080 align:start position:0%
because we want to reuse those very
 

01:14:22.080 --> 01:14:24.229 align:start position:0%
because we want to reuse those very
registers<01:14:22.640><c> in</c><01:14:22.719><c> the</c><01:14:22.800><c> cpu</c><01:14:23.360><c> for</c><01:14:23.520><c> the</c><01:14:23.600><c> new</c><01:14:23.840><c> thread</c>

01:14:24.229 --> 01:14:24.239 align:start position:0%
registers in the cpu for the new thread
 

01:14:24.239 --> 01:14:24.470 align:start position:0%
registers in the cpu for the new thread
and

01:14:24.470 --> 01:14:24.480 align:start position:0%
and
 

01:14:24.480 --> 01:14:27.430 align:start position:0%
and
overwrite<01:14:24.960><c> whatever</c><01:14:25.360><c> values</c><01:14:25.760><c> they</c><01:14:25.920><c> have</c><01:14:27.280><c> so</c>

01:14:27.430 --> 01:14:27.440 align:start position:0%
overwrite whatever values they have so
 

01:14:27.440 --> 01:14:28.630 align:start position:0%
overwrite whatever values they have so
the

01:14:28.630 --> 01:14:28.640 align:start position:0%
the
 

01:14:28.640 --> 01:14:29.990 align:start position:0%
the
register<01:14:29.120><c> that</c><01:14:29.360><c> that's</c><01:14:29.520><c> where</c><01:14:29.679><c> we</c><01:14:29.840><c> have</c><01:14:29.920><c> to</c>

01:14:29.990 --> 01:14:30.000 align:start position:0%
register that that's where we have to
 

01:14:30.000 --> 01:14:32.870 align:start position:0%
register that that's where we have to
see<01:14:30.320><c> the</c><01:14:30.480><c> old</c><01:14:30.640><c> threads</c><01:14:30.960><c> registers</c>

01:14:32.870 --> 01:14:32.880 align:start position:0%
see the old threads registers
 

01:14:32.880 --> 01:14:35.830 align:start position:0%
see the old threads registers
uh<01:14:33.120><c> what</c><01:14:33.360><c> about</c><01:14:33.840><c> um</c><01:14:34.400><c> other</c><01:14:34.800><c> processor</c><01:14:35.360><c> state</c>

01:14:35.830 --> 01:14:35.840 align:start position:0%
uh what about um other processor state
 

01:14:35.840 --> 01:14:37.510 align:start position:0%
uh what about um other processor state
so<01:14:36.000><c> i</c><01:14:36.080><c> don't</c><01:14:36.159><c> know</c><01:14:36.320><c> if</c><01:14:36.400><c> the</c><01:14:36.560><c> risk</c><01:14:36.800><c> 5</c><01:14:37.040><c> processor</c>

01:14:37.510 --> 01:14:37.520 align:start position:0%
so i don't know if the risk 5 processor
 

01:14:37.520 --> 01:14:39.350 align:start position:0%
so i don't know if the risk 5 processor
that<01:14:37.679><c> we're</c><01:14:37.920><c> using</c><01:14:38.320><c> has</c><01:14:38.640><c> other</c>

01:14:39.350 --> 01:14:39.360 align:start position:0%
that we're using has other
 

01:14:39.360 --> 01:14:41.830 align:start position:0%
that we're using has other
flags<01:14:39.760><c> but</c><01:14:39.920><c> i</c><01:14:40.000><c> know</c><01:14:40.239><c> like</c><01:14:40.400><c> some</c><01:14:40.640><c> x86</c><01:14:41.440><c> intel</c>

01:14:41.830 --> 01:14:41.840 align:start position:0%
flags but i know like some x86 intel
 

01:14:41.840 --> 01:14:43.030 align:start position:0%
flags but i know like some x86 intel
chips<01:14:42.080><c> have</c><01:14:42.320><c> like</c>

01:14:43.030 --> 01:14:43.040 align:start position:0%
chips have like
 

01:14:43.040 --> 01:14:45.030 align:start position:0%
chips have like
like<01:14:43.199><c> the</c><01:14:43.360><c> floating</c><01:14:43.760><c> point</c><01:14:44.080><c> unit</c><01:14:44.400><c> state</c><01:14:44.880><c> and</c>

01:14:45.030 --> 01:14:45.040 align:start position:0%
like the floating point unit state and
 

01:14:45.040 --> 01:14:46.550 align:start position:0%
like the floating point unit state and
like<01:14:45.520><c> things</c><01:14:45.760><c> like</c><01:14:46.000><c> that</c>

01:14:46.550 --> 01:14:46.560 align:start position:0%
like things like that
 

01:14:46.560 --> 01:14:48.470 align:start position:0%
like things like that
do<01:14:46.719><c> we</c><01:14:47.360><c> do</c><01:14:47.520><c> we</c><01:14:47.600><c> just</c><01:14:47.760><c> not</c><01:14:48.000><c> have</c><01:14:48.159><c> that</c><01:14:48.320><c> in</c>

01:14:48.470 --> 01:14:48.480 align:start position:0%
do we do we just not have that in
 

01:14:48.480 --> 01:14:50.709 align:start position:0%
do we do we just not have that in
response<01:14:49.120><c> absolutely</c>

01:14:50.709 --> 01:14:50.719 align:start position:0%
response absolutely
 

01:14:50.719 --> 01:14:52.390 align:start position:0%
response absolutely
your<01:14:50.880><c> points</c><01:14:51.120><c> very</c><01:14:51.280><c> well</c><01:14:51.520><c> taken</c><01:14:51.840><c> on</c><01:14:52.080><c> other</c>

01:14:52.390 --> 01:14:52.400 align:start position:0%
your points very well taken on other
 

01:14:52.400 --> 01:14:54.550 align:start position:0%
your points very well taken on other
microprocessors<01:14:53.280><c> like</c><01:14:53.520><c> x86</c>

01:14:54.550 --> 01:14:54.560 align:start position:0%
microprocessors like x86
 

01:14:54.560 --> 01:14:58.070 align:start position:0%
microprocessors like x86
the<01:14:54.880><c> details</c><01:14:57.199><c> of</c><01:14:57.440><c> switching</c>

01:14:58.070 --> 01:14:58.080 align:start position:0%
the details of switching
 

01:14:58.080 --> 01:14:59.910 align:start position:0%
the details of switching
are<01:14:58.239><c> a</c><01:14:58.320><c> bit</c><01:14:58.560><c> different</c><01:14:58.960><c> because</c><01:14:59.679><c> you</c><01:14:59.760><c> know</c>

01:14:59.910 --> 01:14:59.920 align:start position:0%
are a bit different because you know
 

01:14:59.920 --> 01:15:00.870 align:start position:0%
are a bit different because you know
they<01:15:00.000><c> had</c><01:15:00.159><c> different</c><01:15:00.320><c> registers</c><01:15:00.800><c> in</c>

01:15:00.870 --> 01:15:00.880 align:start position:0%
they had different registers in
 

01:15:00.880 --> 01:15:01.669 align:start position:0%
they had different registers in
different<01:15:01.199><c> state</c>

01:15:01.669 --> 01:15:01.679 align:start position:0%
different state
 

01:15:01.679 --> 01:15:04.470 align:start position:0%
different state
um<01:15:02.880><c> and</c><01:15:03.040><c> so</c><01:15:03.199><c> the</c><01:15:03.360><c> code</c><01:15:03.600><c> you</c><01:15:03.679><c> know</c><01:15:03.840><c> this</c><01:15:04.000><c> is</c><01:15:04.159><c> very</c>

01:15:04.470 --> 01:15:04.480 align:start position:0%
um and so the code you know this is very
 

01:15:04.480 --> 01:15:07.110 align:start position:0%
um and so the code you know this is very
very<01:15:04.800><c> risk</c><01:15:05.120><c> five</c><01:15:05.360><c> dependent</c><01:15:05.840><c> code</c><01:15:06.320><c> and</c>

01:15:07.110 --> 01:15:07.120 align:start position:0%
very risk five dependent code and
 

01:15:07.120 --> 01:15:09.750 align:start position:0%
very risk five dependent code and
the<01:15:07.280><c> switch</c><01:15:07.679><c> routine</c><01:15:08.239><c> for</c><01:15:08.960><c> some</c><01:15:09.199><c> other</c>

01:15:09.750 --> 01:15:09.760 align:start position:0%
the switch routine for some other
 

01:15:09.760 --> 01:15:11.110 align:start position:0%
the switch routine for some other
processor

01:15:11.110 --> 01:15:11.120 align:start position:0%
processor
 

01:15:11.120 --> 01:15:12.470 align:start position:0%
processor
might<01:15:11.360><c> look</c><01:15:11.520><c> quite</c><01:15:11.679><c> different</c><01:15:11.920><c> like</c><01:15:12.159><c> indeed</c>

01:15:12.470 --> 01:15:12.480 align:start position:0%
might look quite different like indeed
 

01:15:12.480 --> 01:15:14.310 align:start position:0%
might look quite different like indeed
might<01:15:12.719><c> have</c><01:15:12.880><c> to</c><01:15:12.960><c> save</c><01:15:13.760><c> floating</c><01:15:14.080><c> point</c>

01:15:14.310 --> 01:15:14.320 align:start position:0%
might have to save floating point
 

01:15:14.320 --> 01:15:15.189 align:start position:0%
might have to save floating point
registers

01:15:15.189 --> 01:15:15.199 align:start position:0%
registers
 

01:15:15.199 --> 01:15:17.830 align:start position:0%
registers
now<01:15:15.520><c> risk</c><01:15:15.760><c> five</c><01:15:16.000><c> actually</c><01:15:16.239><c> uses</c><01:15:16.560><c> the</c><01:15:17.520><c> general</c>

01:15:17.830 --> 01:15:17.840 align:start position:0%
now risk five actually uses the general
 

01:15:17.840 --> 01:15:20.229 align:start position:0%
now risk five actually uses the general
purpose<01:15:18.159><c> registers</c><01:15:18.719><c> or</c>

01:15:20.229 --> 01:15:20.239 align:start position:0%
purpose registers or
 

01:15:20.239 --> 01:15:22.229 align:start position:0%
purpose registers or
actually<01:15:21.280><c> i'm</c><01:15:21.440><c> not</c><01:15:21.600><c> sure</c><01:15:21.760><c> what</c><01:15:21.840><c> it</c><01:15:21.920><c> does</c><01:15:22.080><c> for</c>

01:15:22.229 --> 01:15:22.239 align:start position:0%
actually i'm not sure what it does for
 

01:15:22.239 --> 01:15:23.590 align:start position:0%
actually i'm not sure what it does for
floating<01:15:22.560><c> point</c>

01:15:23.590 --> 01:15:23.600 align:start position:0%
floating point
 

01:15:23.600 --> 01:15:24.709 align:start position:0%
floating point
but<01:15:23.760><c> the</c><01:15:23.840><c> kernel</c><01:15:24.159><c> doesn't</c><01:15:24.320><c> use</c><01:15:24.480><c> floating</c>

01:15:24.709 --> 01:15:24.719 align:start position:0%
but the kernel doesn't use floating
 

01:15:24.719 --> 01:15:25.910 align:start position:0%
but the kernel doesn't use floating
point<01:15:24.880><c> so</c><01:15:25.040><c> it</c><01:15:25.120><c> doesn't</c><01:15:25.360><c> have</c><01:15:25.440><c> to</c><01:15:25.520><c> worry</c><01:15:25.760><c> about</c>

01:15:25.910 --> 01:15:25.920 align:start position:0%
point so it doesn't have to worry about
 

01:15:25.920 --> 01:15:27.350 align:start position:0%
point so it doesn't have to worry about
it

01:15:27.350 --> 01:15:27.360 align:start position:0%
it
 

01:15:27.360 --> 01:15:29.030 align:start position:0%
it
but<01:15:27.520><c> yeah</c><01:15:27.679><c> this</c><01:15:27.840><c> is</c><01:15:27.920><c> totally</c><01:15:28.320><c> microprocessor</c>

01:15:29.030 --> 01:15:29.040 align:start position:0%
but yeah this is totally microprocessor
 

01:15:29.040 --> 01:15:31.669 align:start position:0%
but yeah this is totally microprocessor
dependent

01:15:31.669 --> 01:15:31.679 align:start position:0%
 
 

01:15:31.679 --> 01:15:34.870 align:start position:0%
 
a<01:15:31.920><c> question</c><01:15:32.239><c> about</c><01:15:32.480><c> the</c><01:15:32.719><c> timer</c><01:15:33.120><c> interrupts</c><01:15:34.640><c> so</c>

01:15:34.870 --> 01:15:34.880 align:start position:0%
a question about the timer interrupts so
 

01:15:34.880 --> 01:15:36.550 align:start position:0%
a question about the timer interrupts so
it<01:15:35.040><c> sounds</c><01:15:35.360><c> like</c><01:15:35.600><c> the</c><01:15:35.840><c> the</c><01:15:36.080><c> core</c>

01:15:36.550 --> 01:15:36.560 align:start position:0%
it sounds like the the core
 

01:15:36.560 --> 01:15:39.750 align:start position:0%
it sounds like the the core
of<01:15:36.800><c> all</c><01:15:36.960><c> of</c><01:15:37.280><c> this</c><01:15:38.159><c> scheduling</c><01:15:39.120><c> working</c><01:15:39.600><c> is</c>

01:15:39.750 --> 01:15:39.760 align:start position:0%
of all of this scheduling working is
 

01:15:39.760 --> 01:15:41.669 align:start position:0%
of all of this scheduling working is
that<01:15:39.920><c> there</c><01:15:40.080><c> will</c><01:15:40.239><c> be</c><01:15:40.320><c> a</c><01:15:40.400><c> timer</c><01:15:40.719><c> interrupt</c>

01:15:41.669 --> 01:15:41.679 align:start position:0%
that there will be a timer interrupt
 

01:15:41.679 --> 01:15:43.990 align:start position:0%
that there will be a timer interrupt
uh<01:15:42.000><c> what</c><01:15:42.159><c> happens</c><01:15:42.640><c> in</c><01:15:42.719><c> cases</c><01:15:43.120><c> where</c><01:15:43.440><c> that</c>

01:15:43.990 --> 01:15:44.000 align:start position:0%
uh what happens in cases where that
 

01:15:44.000 --> 01:15:45.590 align:start position:0%
uh what happens in cases where that
malfunctions

01:15:45.590 --> 01:15:45.600 align:start position:0%
malfunctions
 

01:15:45.600 --> 01:15:49.030 align:start position:0%
malfunctions
there<01:15:45.840><c> is</c><01:15:46.000><c> going</c><01:15:46.080><c> to</c><01:15:46.159><c> be</c><01:15:46.239><c> a</c><01:15:46.320><c> timer</c><01:15:46.640><c> interrupt</c>

01:15:49.030 --> 01:15:49.040 align:start position:0%
there is going to be a timer interrupt
 

01:15:49.040 --> 01:15:52.630 align:start position:0%
there is going to be a timer interrupt
um<01:15:50.320><c> so</c><01:15:51.120><c> the</c><01:15:51.120><c> the</c>

01:15:52.630 --> 01:15:52.640 align:start position:0%
um so the the
 

01:15:52.640 --> 01:15:55.910 align:start position:0%
um so the the
i<01:15:52.800><c> mean</c><01:15:53.199><c> uh</c><01:15:53.840><c> so</c><01:15:54.000><c> so</c><01:15:54.640><c> um</c><01:15:55.120><c> okay</c><01:15:55.360><c> so</c><01:15:55.520><c> the</c><01:15:55.760><c> the</c>

01:15:55.910 --> 01:15:55.920 align:start position:0%
i mean uh so so um okay so the the
 

01:15:55.920 --> 01:15:57.750 align:start position:0%
i mean uh so so um okay so the the
reasoning<01:15:56.400><c> for</c><01:15:56.560><c> how</c><01:15:56.800><c> come</c>

01:15:57.750 --> 01:15:57.760 align:start position:0%
reasoning for how come
 

01:15:57.760 --> 01:16:00.070 align:start position:0%
reasoning for how come
preemptive<01:15:58.320><c> scheduling</c><01:15:58.880><c> of</c><01:15:59.120><c> user</c><01:15:59.520><c> processes</c>

01:16:00.070 --> 01:16:00.080 align:start position:0%
preemptive scheduling of user processes
 

01:16:00.080 --> 01:16:01.430 align:start position:0%
preemptive scheduling of user processes
works

01:16:01.430 --> 01:16:01.440 align:start position:0%
works
 

01:16:01.440 --> 01:16:05.669 align:start position:0%
works
um<01:16:01.760><c> is</c><01:16:01.920><c> that</c><01:16:02.880><c> user</c><01:16:03.199><c> processes</c><01:16:03.760><c> execute</c><01:16:04.239><c> with</c>

01:16:05.669 --> 01:16:05.679 align:start position:0%
um is that user processes execute with
 

01:16:05.679 --> 01:16:09.030 align:start position:0%
um is that user processes execute with
interrupts<01:16:06.080><c> turned</c><01:16:06.400><c> on</c><01:16:06.560><c> always</c><01:16:07.600><c> xv6</c><01:16:08.159><c> just</c>

01:16:09.030 --> 01:16:09.040 align:start position:0%
interrupts turned on always xv6 just
 

01:16:09.040 --> 01:16:11.350 align:start position:0%
interrupts turned on always xv6 just
ensures<01:16:09.600><c> that</c><01:16:10.080><c> interrupts</c><01:16:10.480><c> are</c><01:16:10.640><c> enabled</c>

01:16:11.350 --> 01:16:11.360 align:start position:0%
ensures that interrupts are enabled
 

01:16:11.360 --> 01:16:13.110 align:start position:0%
ensures that interrupts are enabled
before<01:16:11.679><c> returning</c><01:16:12.080><c> to</c><01:16:12.159><c> user</c><01:16:12.480><c> space</c><01:16:12.880><c> and</c><01:16:12.960><c> that</c>

01:16:13.110 --> 01:16:13.120 align:start position:0%
before returning to user space and that
 

01:16:13.120 --> 01:16:14.390 align:start position:0%
before returning to user space and that
means<01:16:13.280><c> that</c><01:16:13.440><c> a</c><01:16:13.520><c> timer</c><01:16:13.840><c> interrupt</c>

01:16:14.390 --> 01:16:14.400 align:start position:0%
means that a timer interrupt
 

01:16:14.400 --> 01:16:16.310 align:start position:0%
means that a timer interrupt
can<01:16:14.640><c> happen</c><01:16:15.199><c> if</c><01:16:15.280><c> you're</c><01:16:15.440><c> executing</c><01:16:15.920><c> in</c><01:16:16.000><c> user</c>

01:16:16.310 --> 01:16:16.320 align:start position:0%
can happen if you're executing in user
 

01:16:16.320 --> 01:16:17.910 align:start position:0%
can happen if you're executing in user
space<01:16:17.280><c> so</c>

01:16:17.910 --> 01:16:17.920 align:start position:0%
space so
 

01:16:17.920 --> 01:16:19.990 align:start position:0%
space so
there's<01:16:18.159><c> nothing</c><01:16:18.480><c> a</c><01:16:18.560><c> user</c><01:16:18.960><c> process</c><01:16:19.679><c> you</c><01:16:19.760><c> know</c>

01:16:19.990 --> 01:16:20.000 align:start position:0%
there's nothing a user process you know
 

01:16:20.000 --> 01:16:21.270 align:start position:0%
there's nothing a user process you know
if<01:16:20.159><c> we're</c><01:16:20.239><c> in</c><01:16:20.400><c> user</c><01:16:20.640><c> space</c><01:16:20.800><c> the</c><01:16:20.880><c> timer</c><01:16:21.120><c> and</c>

01:16:21.270 --> 01:16:21.280 align:start position:0%
if we're in user space the timer and
 

01:16:21.280 --> 01:16:21.510 align:start position:0%
if we're in user space the timer and
error

01:16:21.510 --> 01:16:21.520 align:start position:0%
error
 

01:16:21.520 --> 01:16:24.070 align:start position:0%
error
just<01:16:21.679><c> will</c><01:16:21.840><c> happen</c><01:16:22.719><c> uh</c><01:16:22.960><c> when</c><01:16:23.120><c> the</c><01:16:23.199><c> time</c><01:16:23.440><c> comes</c>

01:16:24.070 --> 01:16:24.080 align:start position:0%
just will happen uh when the time comes
 

01:16:24.080 --> 01:16:25.510 align:start position:0%
just will happen uh when the time comes
it's<01:16:24.239><c> a</c><01:16:24.320><c> little</c><01:16:24.480><c> trickier</c><01:16:24.880><c> in</c><01:16:24.960><c> the</c><01:16:25.040><c> kernel</c>

01:16:25.510 --> 01:16:25.520 align:start position:0%
it's a little trickier in the kernel
 

01:16:25.520 --> 01:16:26.790 align:start position:0%
it's a little trickier in the kernel
the<01:16:25.679><c> kernel</c><01:16:26.000><c> sometimes</c><01:16:26.320><c> turns</c><01:16:26.640><c> off</c>

01:16:26.790 --> 01:16:26.800 align:start position:0%
the kernel sometimes turns off
 

01:16:26.800 --> 01:16:28.790 align:start position:0%
the kernel sometimes turns off
interrupts<01:16:27.280><c> like</c><01:16:27.600><c> when</c><01:16:27.760><c> you</c><01:16:27.840><c> acquire</c><01:16:28.239><c> a</c><01:16:28.320><c> lock</c>

01:16:28.790 --> 01:16:28.800 align:start position:0%
interrupts like when you acquire a lock
 

01:16:28.800 --> 01:16:30.070 align:start position:0%
interrupts like when you acquire a lock
the<01:16:28.960><c> interops</c><01:16:29.360><c> are</c><01:16:29.440><c> going</c><01:16:29.520><c> to</c><01:16:29.600><c> be</c><01:16:29.679><c> turned</c><01:16:29.920><c> off</c>

01:16:30.070 --> 01:16:30.080 align:start position:0%
the interops are going to be turned off
 

01:16:30.080 --> 01:16:32.830 align:start position:0%
the interops are going to be turned off
until<01:16:30.320><c> you</c><01:16:30.400><c> release</c><01:16:30.800><c> it</c><01:16:31.440><c> so</c>

01:16:32.830 --> 01:16:32.840 align:start position:0%
until you release it so
 

01:16:32.840 --> 01:16:35.910 align:start position:0%
until you release it so
um<01:16:34.640><c> uh</c><01:16:35.040><c> so</c>

01:16:35.910 --> 01:16:35.920 align:start position:0%
um uh so
 

01:16:35.920 --> 01:16:38.709 align:start position:0%
um uh so
if<01:16:36.080><c> there</c><01:16:36.239><c> were</c><01:16:36.480><c> some</c><01:16:37.040><c> bug</c><01:16:37.360><c> in</c><01:16:37.440><c> the</c><01:16:37.520><c> kernel</c><01:16:37.920><c> the</c>

01:16:38.709 --> 01:16:38.719 align:start position:0%
if there were some bug in the kernel the
 

01:16:38.719 --> 01:16:39.910 align:start position:0%
if there were some bug in the kernel the
you<01:16:38.800><c> know</c><01:16:38.960><c> if</c><01:16:39.120><c> the</c><01:16:39.199><c> kernel</c><01:16:39.520><c> turned</c><01:16:39.760><c> off</c>

01:16:39.910 --> 01:16:39.920 align:start position:0%
you know if the kernel turned off
 

01:16:39.920 --> 01:16:40.790 align:start position:0%
you know if the kernel turned off
interrupts<01:16:40.560><c> and</c>

01:16:40.790 --> 01:16:40.800 align:start position:0%
interrupts and
 

01:16:40.800 --> 01:16:43.750 align:start position:0%
interrupts and
never<01:16:41.040><c> turned</c><01:16:41.280><c> them</c><01:16:41.440><c> back</c><01:16:41.760><c> on</c><01:16:42.719><c> and</c><01:16:43.040><c> the</c><01:16:43.520><c> code</c>

01:16:43.750 --> 01:16:43.760 align:start position:0%
never turned them back on and the code
 

01:16:43.760 --> 01:16:45.830 align:start position:0%
never turned them back on and the code
in<01:16:43.840><c> the</c><01:16:43.920><c> kernel</c><01:16:44.320><c> never</c><01:16:44.640><c> gave</c><01:16:44.880><c> up</c><01:16:44.960><c> the</c><01:16:45.040><c> cpu</c>

01:16:45.830 --> 01:16:45.840 align:start position:0%
in the kernel never gave up the cpu
 

01:16:45.840 --> 01:16:47.510 align:start position:0%
in the kernel never gave up the cpu
you<01:16:46.000><c> know</c><01:16:46.080><c> never</c><01:16:46.320><c> called</c><01:16:46.640><c> sleep</c><01:16:47.040><c> or</c><01:16:47.199><c> gave</c><01:16:47.440><c> up</c>

01:16:47.510 --> 01:16:47.520 align:start position:0%
you know never called sleep or gave up
 

01:16:47.520 --> 01:16:49.669 align:start position:0%
you know never called sleep or gave up
the<01:16:47.600><c> cpu</c><01:16:48.000><c> for</c><01:16:48.159><c> any</c><01:16:48.400><c> other</c><01:16:48.560><c> reason</c>

01:16:49.669 --> 01:16:49.679 align:start position:0%
the cpu for any other reason
 

01:16:49.679 --> 01:16:52.390 align:start position:0%
the cpu for any other reason
then<01:16:49.920><c> indeed</c><01:16:51.120><c> a</c><01:16:51.440><c> timer</c><01:16:51.760><c> interrupt</c><01:16:52.159><c> wouldn't</c>

01:16:52.390 --> 01:16:52.400 align:start position:0%
then indeed a timer interrupt wouldn't
 

01:16:52.400 --> 01:16:52.950 align:start position:0%
then indeed a timer interrupt wouldn't
occur

01:16:52.950 --> 01:16:52.960 align:start position:0%
occur
 

01:16:52.960 --> 01:16:55.910 align:start position:0%
occur
and<01:16:53.280><c> that</c><01:16:53.440><c> would</c><01:16:53.600><c> mean</c><01:16:53.840><c> that</c><01:16:55.360><c> this</c><01:16:55.679><c> kernel</c>

01:16:55.910 --> 01:16:55.920 align:start position:0%
and that would mean that this kernel
 

01:16:55.920 --> 01:16:56.709 align:start position:0%
and that would mean that this kernel
code<01:16:56.159><c> may</c>

01:16:56.709 --> 01:16:56.719 align:start position:0%
code may
 

01:16:56.719 --> 01:17:00.390 align:start position:0%
code may
you<01:16:56.880><c> know</c><01:16:59.040><c> we</c><01:16:59.199><c> would</c><01:16:59.360><c> never</c><01:16:59.520><c> give</c><01:16:59.679><c> the</c><01:16:59.760><c> cpu</c><01:17:00.239><c> but</c>

01:17:00.390 --> 01:17:00.400 align:start position:0%
you know we would never give the cpu but
 

01:17:00.400 --> 01:17:03.270 align:start position:0%
you know we would never give the cpu but
in<01:17:00.520><c> fact</c><01:17:01.600><c> uh</c><01:17:01.920><c> as</c><01:17:02.080><c> far</c><01:17:02.239><c> as</c><01:17:02.320><c> we</c><01:17:02.480><c> know</c>

01:17:03.270 --> 01:17:03.280 align:start position:0%
in fact uh as far as we know
 

01:17:03.280 --> 01:17:06.390 align:start position:0%
in fact uh as far as we know
xp6<01:17:03.920><c> is</c><01:17:04.239><c> we</c><01:17:04.480><c> wrote</c><01:17:04.719><c> xp6</c><01:17:05.280><c> so</c><01:17:05.440><c> that</c>

01:17:06.390 --> 01:17:06.400 align:start position:0%
xp6 is we wrote xp6 so that
 

01:17:06.400 --> 01:17:09.830 align:start position:0%
xp6 is we wrote xp6 so that
it<01:17:06.640><c> always</c><01:17:06.880><c> turns</c><01:17:07.199><c> interrupts</c><01:17:07.600><c> back</c><01:17:07.840><c> on</c><01:17:08.080><c> or</c>

01:17:09.830 --> 01:17:09.840 align:start position:0%
it always turns interrupts back on or
 

01:17:09.840 --> 01:17:11.350 align:start position:0%
it always turns interrupts back on or
you<01:17:09.920><c> know</c><01:17:10.159><c> if</c><01:17:10.320><c> there's</c><01:17:10.480><c> code</c><01:17:10.640><c> in</c><01:17:10.800><c> xv6</c><01:17:11.199><c> that</c>

01:17:11.350 --> 01:17:11.360 align:start position:0%
you know if there's code in xv6 that
 

01:17:11.360 --> 01:17:13.270 align:start position:0%
you know if there's code in xv6 that
turns<01:17:11.600><c> off</c><01:17:11.840><c> interrupts</c><01:17:12.560><c> it</c><01:17:12.719><c> either</c><01:17:12.960><c> turns</c>

01:17:13.270 --> 01:17:13.280 align:start position:0%
turns off interrupts it either turns
 

01:17:13.280 --> 01:17:14.229 align:start position:0%
turns off interrupts it either turns
them<01:17:13.440><c> back</c><01:17:13.679><c> on</c>

01:17:14.229 --> 01:17:14.239 align:start position:0%
them back on
 

01:17:14.239 --> 01:17:17.430 align:start position:0%
them back on
and<01:17:14.400><c> so</c><01:17:14.840><c> uh</c><01:17:16.159><c> timer</c><01:17:16.480><c> interrupt</c><01:17:16.800><c> can</c><01:17:16.960><c> then</c><01:17:17.120><c> occur</c>

01:17:17.430 --> 01:17:17.440 align:start position:0%
and so uh timer interrupt can then occur
 

01:17:17.440 --> 01:17:18.950 align:start position:0%
and so uh timer interrupt can then occur
in<01:17:17.520><c> the</c><01:17:17.600><c> kernel</c><01:17:18.000><c> and</c><01:17:18.080><c> we</c><01:17:18.239><c> can</c><01:17:18.480><c> switch</c><01:17:18.719><c> away</c>

01:17:18.950 --> 01:17:18.960 align:start position:0%
in the kernel and we can switch away
 

01:17:18.960 --> 01:17:20.310 align:start position:0%
in the kernel and we can switch away
from<01:17:19.120><c> this</c><01:17:19.280><c> kernel</c><01:17:19.600><c> thread</c>

01:17:20.310 --> 01:17:20.320 align:start position:0%
from this kernel thread
 

01:17:20.320 --> 01:17:23.270 align:start position:0%
from this kernel thread
or<01:17:21.280><c> the</c><01:17:21.360><c> code</c><01:17:21.679><c> returns</c><01:17:22.000><c> back</c><01:17:22.159><c> to</c><01:17:22.320><c> user</c><01:17:22.560><c> space</c>

01:17:23.270 --> 01:17:23.280 align:start position:0%
or the code returns back to user space
 

01:17:23.280 --> 01:17:25.110 align:start position:0%
or the code returns back to user space
kernel<01:17:23.520><c> code</c><01:17:23.760><c> returns</c><01:17:24.159><c> back</c><01:17:24.320><c> to</c><01:17:24.400><c> user</c><01:17:24.640><c> space</c>

01:17:25.110 --> 01:17:25.120 align:start position:0%
kernel code returns back to user space
 

01:17:25.120 --> 01:17:27.270 align:start position:0%
kernel code returns back to user space
we<01:17:25.280><c> believe</c><01:17:26.000><c> there's</c><01:17:26.239><c> never</c><01:17:26.480><c> a</c><01:17:26.560><c> situation</c><01:17:27.199><c> in</c>

01:17:27.270 --> 01:17:27.280 align:start position:0%
we believe there's never a situation in
 

01:17:27.280 --> 01:17:28.630 align:start position:0%
we believe there's never a situation in
which<01:17:27.520><c> kernel</c><01:17:27.840><c> code</c>

01:17:28.630 --> 01:17:28.640 align:start position:0%
which kernel code
 

01:17:28.640 --> 01:17:30.709 align:start position:0%
which kernel code
will<01:17:28.800><c> simply</c><01:17:29.120><c> like</c><01:17:29.440><c> loop</c><01:17:30.080><c> with</c><01:17:30.320><c> interrupts</c>

01:17:30.709 --> 01:17:30.719 align:start position:0%
will simply like loop with interrupts
 

01:17:30.719 --> 01:17:33.910 align:start position:0%
will simply like loop with interrupts
turned<01:17:31.040><c> off</c><01:17:31.280><c> forever</c>

01:17:33.910 --> 01:17:33.920 align:start position:0%
 
 

01:17:33.920 --> 01:17:36.070 align:start position:0%
 
i<01:17:34.000><c> got</c><01:17:34.159><c> it</c><01:17:34.560><c> my</c><01:17:34.719><c> question</c><01:17:35.040><c> was</c><01:17:35.280><c> more</c><01:17:35.440><c> about</c><01:17:35.679><c> like</c>

01:17:36.070 --> 01:17:36.080 align:start position:0%
i got it my question was more about like
 

01:17:36.080 --> 01:17:37.590 align:start position:0%
i got it my question was more about like
so<01:17:36.239><c> i</c><01:17:36.320><c> assume</c><01:17:36.560><c> the</c><01:17:36.800><c> interrupts</c><01:17:37.280><c> are</c><01:17:37.360><c> actually</c>

01:17:37.590 --> 01:17:37.600 align:start position:0%
so i assume the interrupts are actually
 

01:17:37.600 --> 01:17:39.110 align:start position:0%
so i assume the interrupts are actually
coming<01:17:37.840><c> from</c><01:17:38.000><c> some</c><01:17:38.159><c> piece</c><01:17:38.320><c> of</c><01:17:38.480><c> hardware</c>

01:17:39.110 --> 01:17:39.120 align:start position:0%
coming from some piece of hardware
 

01:17:39.120 --> 01:17:40.630 align:start position:0%
coming from some piece of hardware
like<01:17:39.280><c> what</c><01:17:39.440><c> if</c><01:17:39.679><c> that</c><01:17:39.840><c> piece</c><01:17:40.080><c> of</c><01:17:40.159><c> hardware</c>

01:17:40.630 --> 01:17:40.640 align:start position:0%
like what if that piece of hardware
 

01:17:40.640 --> 01:17:44.709 align:start position:0%
like what if that piece of hardware
malfunctions<01:17:42.840><c> no</c>

01:17:44.709 --> 01:17:44.719 align:start position:0%
malfunctions no
 

01:17:44.719 --> 01:17:46.709 align:start position:0%
malfunctions no
now<01:17:44.960><c> it's</c><01:17:45.199><c> all</c><01:17:45.360><c> right</c><01:17:46.000><c> then</c><01:17:46.239><c> your</c><01:17:46.320><c> computer</c><01:17:46.640><c> is</c>

01:17:46.709 --> 01:17:46.719 align:start position:0%
now it's all right then your computer is
 

01:17:46.719 --> 01:17:50.470 align:start position:0%
now it's all right then your computer is
broken<01:17:46.960><c> and</c><01:17:47.120><c> you</c><01:17:47.120><c> should</c><01:17:47.280><c> buy</c><01:17:47.440><c> a</c><01:17:47.520><c> new</c><01:17:47.600><c> one</c>

01:17:50.470 --> 01:17:50.480 align:start position:0%
 
 

01:17:50.480 --> 01:17:52.709 align:start position:0%
 
okay<01:17:50.880><c> i</c><01:17:50.960><c> mean</c><01:17:51.760><c> i</c><01:17:51.840><c> mean</c><01:17:52.080><c> that's</c><01:17:52.320><c> a</c><01:17:52.400><c> valid</c>

01:17:52.709 --> 01:17:52.719 align:start position:0%
okay i mean i mean that's a valid
 

01:17:52.719 --> 01:17:54.070 align:start position:0%
okay i mean i mean that's a valid
question<01:17:53.040><c> for</c><01:17:53.360><c> me</c><01:17:53.520><c> there's</c>

01:17:54.070 --> 01:17:54.080 align:start position:0%
question for me there's
 

01:17:54.080 --> 01:17:56.229 align:start position:0%
question for me there's
you<01:17:54.159><c> know</c><01:17:54.800><c> 10</c><01:17:55.040><c> billion</c><01:17:55.440><c> transistors</c><01:17:56.000><c> in</c><01:17:56.080><c> your</c>

01:17:56.229 --> 01:17:56.239 align:start position:0%
you know 10 billion transistors in your
 

01:17:56.239 --> 01:17:57.189 align:start position:0%
you know 10 billion transistors in your
computer<01:17:56.719><c> and</c>

01:17:57.189 --> 01:17:57.199 align:start position:0%
computer and
 

01:17:57.199 --> 01:18:00.390 align:start position:0%
computer and
indeed<01:17:58.080><c> sometimes</c><01:17:58.480><c> the</c><01:17:58.640><c> hardware</c><01:17:59.920><c> just</c><01:18:00.159><c> like</c>

01:18:00.390 --> 01:18:00.400 align:start position:0%
indeed sometimes the hardware just like
 

01:18:00.400 --> 01:18:02.550 align:start position:0%
indeed sometimes the hardware just like
has<01:18:00.560><c> bugs</c><01:18:00.800><c> in</c><01:18:00.960><c> it</c><01:18:01.040><c> but</c><01:18:01.120><c> that's</c>

01:18:02.550 --> 01:18:02.560 align:start position:0%
has bugs in it but that's
 

01:18:02.560 --> 01:18:05.910 align:start position:0%
has bugs in it but that's
beyond<01:18:03.040><c> our</c><01:18:03.280><c> reach</c><01:18:03.840><c> for</c><01:18:05.199><c> i</c><01:18:05.360><c> mean</c>

01:18:05.910 --> 01:18:05.920 align:start position:0%
beyond our reach for i mean
 

01:18:05.920 --> 01:18:07.669 align:start position:0%
beyond our reach for i mean
if<01:18:06.000><c> you</c><01:18:06.159><c> add</c><01:18:06.480><c> one</c><01:18:06.719><c> on</c><01:18:06.800><c> one</c><01:18:07.040><c> and</c><01:18:07.120><c> the</c><01:18:07.280><c> computer</c>

01:18:07.669 --> 01:18:07.679 align:start position:0%
if you add one on one and the computer
 

01:18:07.679 --> 01:18:10.790 align:start position:0%
if you add one on one and the computer
says<01:18:07.920><c> three</c><01:18:08.320><c> then</c>

01:18:10.790 --> 01:18:10.800 align:start position:0%
 
 

01:18:10.800 --> 01:18:13.189 align:start position:0%
 
you<01:18:10.960><c> just</c><01:18:11.120><c> have</c><01:18:11.280><c> deep</c><01:18:11.520><c> problems</c><01:18:12.080><c> that</c><01:18:12.640><c> xv6</c>

01:18:13.189 --> 01:18:13.199 align:start position:0%
you just have deep problems that xv6
 

01:18:13.199 --> 01:18:16.709 align:start position:0%
you just have deep problems that xv6
can't<01:18:13.440><c> help</c><01:18:13.600><c> you</c><01:18:13.679><c> with</c>

01:18:16.709 --> 01:18:16.719 align:start position:0%
 
 

01:18:16.719 --> 01:18:18.229 align:start position:0%
 
so<01:18:16.880><c> we're</c><01:18:17.040><c> assuming</c><01:18:17.440><c> that</c><01:18:17.600><c> the</c><01:18:17.840><c> computer</c>

01:18:18.229 --> 01:18:18.239 align:start position:0%
so we're assuming that the computer
 

01:18:18.239 --> 01:18:20.470 align:start position:0%
so we're assuming that the computer
works

01:18:20.470 --> 01:18:20.480 align:start position:0%
works
 

01:18:20.480 --> 01:18:25.189 align:start position:0%
works
the<01:18:20.640><c> only</c><01:18:20.880><c> time</c><01:18:21.120><c> when</c><01:18:21.360><c> that</c><01:18:22.960><c> when</c><01:18:23.360><c> software</c>

01:18:25.189 --> 01:18:25.199 align:start position:0%
the only time when that when software
 

01:18:25.199 --> 01:18:26.470 align:start position:0%
the only time when that when software
there<01:18:25.440><c> are</c><01:18:25.520><c> times</c><01:18:25.679><c> when</c><01:18:25.840><c> software</c><01:18:26.159><c> tries</c><01:18:26.400><c> to</c>

01:18:26.470 --> 01:18:26.480 align:start position:0%
there are times when software tries to
 

01:18:26.480 --> 01:18:27.990 align:start position:0%
there are times when software tries to
compensate<01:18:26.880><c> for</c><01:18:26.960><c> hardware</c><01:18:27.280><c> level</c><01:18:27.520><c> errors</c>

01:18:27.990 --> 01:18:28.000 align:start position:0%
compensate for hardware level errors
 

01:18:28.000 --> 01:18:28.550 align:start position:0%
compensate for hardware level errors
like

01:18:28.550 --> 01:18:28.560 align:start position:0%
like
 

01:18:28.560 --> 01:18:29.990 align:start position:0%
like
if<01:18:28.640><c> you're</c><01:18:28.800><c> sending</c><01:18:29.280><c> packets</c><01:18:29.600><c> across</c><01:18:29.920><c> a</c>

01:18:29.990 --> 01:18:30.000 align:start position:0%
if you're sending packets across a
 

01:18:30.000 --> 01:18:33.189 align:start position:0%
if you're sending packets across a
network<01:18:31.040><c> you</c><01:18:31.280><c> always</c><01:18:31.440><c> send</c><01:18:31.600><c> a</c><01:18:31.760><c> checksum</c>

01:18:33.189 --> 01:18:33.199 align:start position:0%
network you always send a checksum
 

01:18:33.199 --> 01:18:35.669 align:start position:0%
network you always send a checksum
so<01:18:33.360><c> that</c><01:18:33.600><c> if</c><01:18:33.840><c> the</c><01:18:34.239><c> network</c><01:18:34.640><c> hardware</c><01:18:35.440><c> you</c><01:18:35.520><c> know</c>

01:18:35.669 --> 01:18:35.679 align:start position:0%
so that if the network hardware you know
 

01:18:35.679 --> 01:18:36.790 align:start position:0%
so that if the network hardware you know
flips<01:18:36.000><c> a</c><01:18:36.080><c> bit</c>

01:18:36.790 --> 01:18:36.800 align:start position:0%
flips a bit
 

01:18:36.800 --> 01:18:38.630 align:start position:0%
flips a bit
malfunctions<01:18:37.440><c> and</c><01:18:37.600><c> flips</c><01:18:37.840><c> a</c><01:18:37.920><c> bit</c><01:18:38.159><c> then</c><01:18:38.480><c> you</c>

01:18:38.630 --> 01:18:38.640 align:start position:0%
malfunctions and flips a bit then you
 

01:18:38.640 --> 01:18:39.990 align:start position:0%
malfunctions and flips a bit then you
can<01:18:39.120><c> correct</c><01:18:39.440><c> that</c><01:18:39.679><c> but</c>

01:18:39.990 --> 01:18:40.000 align:start position:0%
can correct that but
 

01:18:40.000 --> 01:18:41.910 align:start position:0%
can correct that but
for<01:18:40.159><c> stuff</c><01:18:40.400><c> inside</c><01:18:40.719><c> the</c><01:18:40.800><c> computer</c><01:18:41.280><c> that</c>

01:18:41.910 --> 01:18:41.920 align:start position:0%
for stuff inside the computer that
 

01:18:41.920 --> 01:18:43.270 align:start position:0%
for stuff inside the computer that
people<01:18:42.239><c> tend</c><01:18:42.480><c> not</c><01:18:42.719><c> to</c>

01:18:43.270 --> 01:18:43.280 align:start position:0%
people tend not to
 

01:18:43.280 --> 01:18:47.910 align:start position:0%
people tend not to
it's<01:18:43.440><c> just</c><01:18:45.600><c> people</c><01:18:45.920><c> basically</c><01:18:46.320><c> don't</c>

01:18:47.910 --> 01:18:47.920 align:start position:0%
it's just people basically don't
 

01:18:47.920 --> 01:18:49.350 align:start position:0%
it's just people basically don't
try<01:18:48.080><c> to</c><01:18:48.159><c> make</c><01:18:48.320><c> the</c><01:18:48.400><c> software</c><01:18:48.719><c> compensate</c><01:18:49.199><c> for</c>

01:18:49.350 --> 01:18:49.360 align:start position:0%
try to make the software compensate for
 

01:18:49.360 --> 01:18:54.070 align:start position:0%
try to make the software compensate for
hardware<01:18:52.840><c> errors</c>

01:18:54.070 --> 01:18:54.080 align:start position:0%
hardware errors
 

01:18:54.080 --> 01:18:57.110 align:start position:0%
hardware errors
oh<01:18:54.400><c> i</c><01:18:54.480><c> have</c><01:18:54.719><c> a</c><01:18:54.800><c> question</c><01:18:55.360><c> why</c><01:18:56.000><c> uh</c><01:18:56.159><c> so</c><01:18:56.320><c> like</c>

01:18:57.110 --> 01:18:57.120 align:start position:0%
oh i have a question why uh so like
 

01:18:57.120 --> 01:19:00.470 align:start position:0%
oh i have a question why uh so like
in<01:18:57.520><c> trampoline</c><01:18:58.159><c> dot</c><01:18:58.719><c> sending</c><01:18:59.120><c> switch</c><01:18:59.920><c> we</c>

01:19:00.470 --> 01:19:00.480 align:start position:0%
in trampoline dot sending switch we
 

01:19:00.480 --> 01:19:03.430 align:start position:0%
in trampoline dot sending switch we
write<01:19:00.719><c> the</c><01:19:01.120><c> code</c><01:19:01.679><c> in</c><01:19:02.000><c> assembly</c><01:19:02.560><c> is</c><01:19:02.719><c> that</c><01:19:02.880><c> why</c>

01:19:03.430 --> 01:19:03.440 align:start position:0%
write the code in assembly is that why
 

01:19:03.440 --> 01:19:04.390 align:start position:0%
write the code in assembly is that why
is<01:19:03.600><c> that</c><01:19:03.840><c> because</c>

01:19:04.390 --> 01:19:04.400 align:start position:0%
is that because
 

01:19:04.400 --> 01:19:07.430 align:start position:0%
is that because
we<01:19:04.560><c> want</c><01:19:04.719><c> to</c><01:19:04.880><c> make</c><01:19:05.120><c> sure</c><01:19:05.360><c> that</c><01:19:06.159><c> exactly</c><01:19:06.960><c> this</c>

01:19:07.430 --> 01:19:07.440 align:start position:0%
we want to make sure that exactly this
 

01:19:07.440 --> 01:19:10.229 align:start position:0%
we want to make sure that exactly this
thing's<01:19:07.760><c> happening</c><01:19:08.560><c> so</c><01:19:08.719><c> we</c><01:19:08.880><c> cannot</c><01:19:10.080><c> you</c>

01:19:10.229 --> 01:19:10.239 align:start position:0%
thing's happening so we cannot you
 

01:19:10.239 --> 01:19:11.990 align:start position:0%
thing's happening so we cannot you
cannot<01:19:10.480><c> write</c><01:19:10.640><c> in</c><01:19:10.800><c> and</c><01:19:10.960><c> see</c><01:19:11.120><c> because</c>

01:19:11.990 --> 01:19:12.000 align:start position:0%
cannot write in and see because
 

01:19:12.000 --> 01:19:15.110 align:start position:0%
cannot write in and see because
we<01:19:12.239><c> just</c><01:19:12.480><c> need</c><01:19:13.520><c> those</c><01:19:13.920><c> like</c><01:19:14.400><c> those</c><01:19:14.719><c> exact</c>

01:19:15.110 --> 01:19:15.120 align:start position:0%
we just need those like those exact
 

01:19:15.120 --> 01:19:17.510 align:start position:0%
we just need those like those exact
things<01:19:15.360><c> to</c><01:19:15.520><c> happen</c><01:19:15.840><c> basically</c>

01:19:17.510 --> 01:19:17.520 align:start position:0%
things to happen basically
 

01:19:17.520 --> 01:19:20.870 align:start position:0%
things to happen basically
um<01:19:19.600><c> yeah</c><01:19:20.000><c> yeah</c>

01:19:20.870 --> 01:19:20.880 align:start position:0%
um yeah yeah
 

01:19:20.880 --> 01:19:23.990 align:start position:0%
um yeah yeah
uh<01:19:22.719><c> yes</c><01:19:22.880><c> certainly</c><01:19:23.199><c> we</c><01:19:23.280><c> want</c><01:19:23.440><c> this</c><01:19:23.679><c> exact</c>

01:19:23.990 --> 01:19:24.000 align:start position:0%
uh yes certainly we want this exact
 

01:19:24.000 --> 01:19:25.350 align:start position:0%
uh yes certainly we want this exact
sequence<01:19:24.320><c> to</c><01:19:24.480><c> happen</c>

01:19:25.350 --> 01:19:25.360 align:start position:0%
sequence to happen
 

01:19:25.360 --> 01:19:28.790 align:start position:0%
sequence to happen
um<01:19:26.080><c> in</c><01:19:26.480><c> nnc</c><01:19:28.320><c> it</c>

01:19:28.790 --> 01:19:28.800 align:start position:0%
um in nnc it
 

01:19:28.800 --> 01:19:30.310 align:start position:0%
um in nnc it
it's<01:19:29.120><c> very</c><01:19:29.280><c> hard</c><01:19:29.440><c> to</c><01:19:29.600><c> talk</c><01:19:29.760><c> about</c><01:19:29.920><c> things</c><01:19:30.159><c> like</c>

01:19:30.310 --> 01:19:30.320 align:start position:0%
it's very hard to talk about things like
 

01:19:30.320 --> 01:19:32.310 align:start position:0%
it's very hard to talk about things like
r<01:19:30.560><c> a</c><01:19:30.880><c> and</c><01:19:31.120><c> c</c>

01:19:32.310 --> 01:19:32.320 align:start position:0%
r a and c
 

01:19:32.320 --> 01:19:35.669 align:start position:0%
r a and c
or<01:19:32.560><c> sp</c><01:19:34.080><c> um</c><01:19:34.640><c> certainly</c><01:19:34.960><c> there's</c><01:19:35.120><c> no</c><01:19:35.280><c> way</c><01:19:35.440><c> within</c>

01:19:35.669 --> 01:19:35.679 align:start position:0%
or sp um certainly there's no way within
 

01:19:35.679 --> 01:19:35.990 align:start position:0%
or sp um certainly there's no way within
the<01:19:35.760><c> c</c>

01:19:35.990 --> 01:19:36.000 align:start position:0%
the c
 

01:19:36.000 --> 01:19:38.709 align:start position:0%
the c
language<01:19:36.640><c> to</c><01:19:37.600><c> talk</c><01:19:37.840><c> about</c><01:19:38.320><c> changing</c><01:19:38.640><c> the</c>

01:19:38.709 --> 01:19:38.719 align:start position:0%
language to talk about changing the
 

01:19:38.719 --> 01:19:40.709 align:start position:0%
language to talk about changing the
stack<01:19:39.040><c> pointer</c>

01:19:40.709 --> 01:19:40.719 align:start position:0%
stack pointer
 

01:19:40.719 --> 01:19:43.510 align:start position:0%
stack pointer
or<01:19:40.880><c> the</c><01:19:40.960><c> ra</c><01:19:41.440><c> register</c><01:19:42.560><c> so</c><01:19:42.960><c> these</c><01:19:43.199><c> are</c><01:19:43.280><c> things</c>

01:19:43.510 --> 01:19:43.520 align:start position:0%
or the ra register so these are things
 

01:19:43.520 --> 01:19:45.270 align:start position:0%
or the ra register so these are things
that

01:19:45.270 --> 01:19:45.280 align:start position:0%
that
 

01:19:45.280 --> 01:19:47.750 align:start position:0%
that
just<01:19:45.520><c> can't</c><01:19:45.760><c> be</c><01:19:46.400><c> you</c><01:19:46.560><c> can't</c><01:19:46.880><c> say</c><01:19:47.120><c> it</c><01:19:47.280><c> in</c>

01:19:47.750 --> 01:19:47.760 align:start position:0%
just can't be you can't say it in
 

01:19:47.760 --> 01:19:49.590 align:start position:0%
just can't be you can't say it in
ordinary<01:19:48.239><c> c</c>

01:19:49.590 --> 01:19:49.600 align:start position:0%
ordinary c
 

01:19:49.600 --> 01:19:51.750 align:start position:0%
ordinary c
the<01:19:49.760><c> only</c><01:19:49.920><c> way</c><01:19:50.080><c> you</c><01:19:50.239><c> can</c><01:19:50.320><c> say</c><01:19:50.480><c> it</c><01:19:50.640><c> in</c><01:19:50.800><c> c</c><01:19:51.040><c> is</c>

01:19:51.750 --> 01:19:51.760 align:start position:0%
the only way you can say it in c is
 

01:19:51.760 --> 01:19:53.830 align:start position:0%
the only way you can say it in c is
there<01:19:52.000><c> is</c><01:19:52.480><c> it's</c><01:19:52.719><c> possible</c><01:19:53.040><c> in</c><01:19:53.199><c> c</c><01:19:53.440><c> to</c><01:19:53.600><c> sort</c><01:19:53.760><c> of</c>

01:19:53.830 --> 01:19:53.840 align:start position:0%
there is it's possible in c to sort of
 

01:19:53.840 --> 01:19:54.630 align:start position:0%
there is it's possible in c to sort of
embed

01:19:54.630 --> 01:19:54.640 align:start position:0%
embed
 

01:19:54.640 --> 01:19:57.270 align:start position:0%
embed
assembly<01:19:55.120><c> instructions</c><01:19:55.920><c> in</c><01:19:56.080><c> the</c><01:19:56.159><c> c</c><01:19:56.400><c> code</c><01:19:57.120><c> and</c>

01:19:57.270 --> 01:19:57.280 align:start position:0%
assembly instructions in the c code and
 

01:19:57.280 --> 01:19:58.709 align:start position:0%
assembly instructions in the c code and
so<01:19:57.440><c> we</c><01:19:57.520><c> could</c><01:19:57.679><c> have</c><01:19:57.760><c> just</c><01:19:57.920><c> embedded</c><01:19:58.239><c> these</c>

01:19:58.709 --> 01:19:58.719 align:start position:0%
so we could have just embedded these
 

01:19:58.719 --> 01:20:00.709 align:start position:0%
so we could have just embedded these
assembly<01:19:59.120><c> structures</c><01:19:59.920><c> in</c><01:20:00.080><c> the</c><01:20:00.159><c> c</c><01:20:00.400><c> function</c>

01:20:00.709 --> 01:20:00.719 align:start position:0%
assembly structures in the c function
 

01:20:00.719 --> 01:20:03.669 align:start position:0%
assembly structures in the c function
but<01:20:00.880><c> it</c><01:20:01.600><c> would</c><01:20:01.760><c> amount</c><01:20:02.000><c> to</c><01:20:02.159><c> the</c><01:20:02.239><c> same</c><01:20:02.480><c> thing</c>

01:20:03.669 --> 01:20:03.679 align:start position:0%
but it would amount to the same thing
 

01:20:03.679 --> 01:20:05.030 align:start position:0%
but it would amount to the same thing
we're<01:20:03.920><c> basically</c><01:20:04.239><c> we're</c><01:20:04.400><c> operating</c><01:20:04.800><c> at</c><01:20:04.960><c> a</c>

01:20:05.030 --> 01:20:05.040 align:start position:0%
we're basically we're operating at a
 

01:20:05.040 --> 01:20:07.030 align:start position:0%
we're basically we're operating at a
level<01:20:05.440><c> below</c>

01:20:07.030 --> 01:20:07.040 align:start position:0%
level below
 

01:20:07.040 --> 01:20:09.910 align:start position:0%
level below
below<01:20:07.520><c> c</c><01:20:07.840><c> so</c><01:20:08.000><c> we</c><01:20:08.159><c> can't</c><01:20:08.320><c> really</c><01:20:09.679><c> we</c><01:20:09.760><c> can't</c>

01:20:09.910 --> 01:20:09.920 align:start position:0%
below c so we can't really we can't
 

01:20:09.920 --> 01:20:13.910 align:start position:0%
below c so we can't really we can't
really<01:20:10.159><c> use</c><01:20:10.400><c> c</c><01:20:10.639><c> here</c>

01:20:13.910 --> 01:20:13.920 align:start position:0%
 
 

01:20:13.920 --> 01:20:16.149 align:start position:0%
 
i<01:20:14.000><c> have</c><01:20:14.239><c> a</c><01:20:14.320><c> question</c><01:20:14.639><c> about</c><01:20:14.960><c> when</c><01:20:15.120><c> a</c><01:20:15.760><c> thread</c>

01:20:16.149 --> 01:20:16.159 align:start position:0%
i have a question about when a thread
 

01:20:16.159 --> 01:20:17.990 align:start position:0%
i have a question about when a thread
finishes<01:20:16.639><c> executing</c><01:20:17.199><c> i'm</c><01:20:17.360><c> assuming</c><01:20:17.760><c> that</c>

01:20:17.990 --> 01:20:18.000 align:start position:0%
finishes executing i'm assuming that
 

01:20:18.000 --> 01:20:19.830 align:start position:0%
finishes executing i'm assuming that
happens<01:20:18.400><c> in</c><01:20:18.480><c> the</c><01:20:18.639><c> user</c><01:20:18.880><c> space</c><01:20:19.199><c> when</c><01:20:19.440><c> we</c><01:20:19.600><c> call</c>

01:20:19.830 --> 01:20:19.840 align:start position:0%
happens in the user space when we call
 

01:20:19.840 --> 01:20:22.070 align:start position:0%
happens in the user space when we call
the<01:20:20.000><c> exec</c><01:20:20.960><c> i'm</c><01:20:21.120><c> sorry</c>

01:20:22.070 --> 01:20:22.080 align:start position:0%
the exec i'm sorry
 

01:20:22.080 --> 01:20:25.189 align:start position:0%
the exec i'm sorry
exit<01:20:22.719><c> system</c><01:20:23.199><c> call</c><01:20:24.239><c> and</c>

01:20:25.189 --> 01:20:25.199 align:start position:0%
exit system call and
 

01:20:25.199 --> 01:20:27.990 align:start position:0%
exit system call and
um<01:20:25.679><c> that</c><01:20:26.000><c> also</c><01:20:26.560><c> ends</c><01:20:26.800><c> the</c><01:20:26.960><c> process</c><01:20:27.840><c> in</c><01:20:27.920><c> the</c>

01:20:27.990 --> 01:20:28.000 align:start position:0%
um that also ends the process in the
 

01:20:28.000 --> 01:20:30.149 align:start position:0%
um that also ends the process in the
thread<01:20:28.320><c> i'm</c><01:20:28.400><c> assuming</c><01:20:28.800><c> in</c><01:20:28.960><c> the</c><01:20:29.120><c> kernel</c><01:20:29.440><c> space</c>

01:20:30.149 --> 01:20:30.159 align:start position:0%
thread i'm assuming in the kernel space
 

01:20:30.159 --> 01:20:33.189 align:start position:0%
thread i'm assuming in the kernel space
but<01:20:30.560><c> if</c><01:20:30.719><c> the</c><01:20:31.520><c> thread</c><01:20:31.920><c> ends</c>

01:20:33.189 --> 01:20:33.199 align:start position:0%
but if the thread ends
 

01:20:33.199 --> 01:20:35.350 align:start position:0%
but if the thread ends
within<01:20:33.920><c> before</c><01:20:34.320><c> a</c><01:20:34.400><c> new</c><01:20:34.639><c> time</c><01:20:34.880><c> interrupt</c>

01:20:35.350 --> 01:20:35.360 align:start position:0%
within before a new time interrupt
 

01:20:35.360 --> 01:20:37.110 align:start position:0%
within before a new time interrupt
happens<01:20:36.159><c> does</c><01:20:36.400><c> it</c><01:20:36.560><c> still</c>

01:20:37.110 --> 01:20:37.120 align:start position:0%
happens does it still
 

01:20:37.120 --> 01:20:40.470 align:start position:0%
happens does it still
like<01:20:38.080><c> um</c><01:20:39.520><c> is</c><01:20:39.679><c> this</c>

01:20:40.470 --> 01:20:40.480 align:start position:0%
like um is this
 

01:20:40.480 --> 01:20:42.310 align:start position:0%
like um is this
like<01:20:40.639><c> the</c><01:20:40.800><c> cpu</c><01:20:41.280><c> still</c><01:20:41.520><c> acquired</c><01:20:41.920><c> by</c><01:20:42.159><c> that</c>

01:20:42.310 --> 01:20:42.320 align:start position:0%
like the cpu still acquired by that
 

01:20:42.320 --> 01:20:44.310 align:start position:0%
like the cpu still acquired by that
thread<01:20:42.639><c> or</c><01:20:42.800><c> do</c><01:20:43.040><c> we</c><01:20:43.440><c> end</c><01:20:43.679><c> that</c><01:20:43.840><c> thread</c><01:20:44.159><c> and</c>

01:20:44.310 --> 01:20:44.320 align:start position:0%
thread or do we end that thread and
 

01:20:44.320 --> 01:20:45.830 align:start position:0%
thread or do we end that thread and
start<01:20:44.480><c> a</c><01:20:44.560><c> new</c><01:20:44.800><c> one</c><01:20:44.960><c> before</c><01:20:45.280><c> the</c><01:20:45.360><c> new</c><01:20:45.600><c> time</c>

01:20:45.830 --> 01:20:45.840 align:start position:0%
start a new one before the new time
 

01:20:45.840 --> 01:20:46.550 align:start position:0%
start a new one before the new time
interrupt

01:20:46.550 --> 01:20:46.560 align:start position:0%
interrupt
 

01:20:46.560 --> 01:20:49.750 align:start position:0%
interrupt
oh<01:20:46.800><c> yeah</c><01:20:47.280><c> the</c>

01:20:49.750 --> 01:20:49.760 align:start position:0%
 
 

01:20:49.760 --> 01:20:54.709 align:start position:0%
 
the<01:20:49.920><c> thread</c><01:20:51.280><c> um</c><01:20:52.239><c> the</c><01:20:52.400><c> thread</c><01:20:52.719><c> yields</c><01:20:53.040><c> the</c><01:20:53.120><c> cpu</c>

01:20:54.709 --> 01:20:54.719 align:start position:0%
the thread um the thread yields the cpu
 

01:20:54.719 --> 01:20:57.270 align:start position:0%
the thread um the thread yields the cpu
does<01:20:54.880><c> the</c><01:20:55.120><c> exit</c><01:20:55.840><c> exit</c><01:20:56.159><c> yields</c><01:20:56.480><c> the</c><01:20:56.560><c> cpu</c><01:20:57.120><c> so</c>

01:20:57.270 --> 01:20:57.280 align:start position:0%
does the exit exit yields the cpu so
 

01:20:57.280 --> 01:20:59.510 align:start position:0%
does the exit exit yields the cpu so
there's<01:20:57.520><c> actually</c><01:20:57.760><c> many</c><01:20:58.080><c> points</c><01:20:58.560><c> that</c>

01:20:59.510 --> 01:20:59.520 align:start position:0%
there's actually many points that
 

01:20:59.520 --> 01:21:00.550 align:start position:0%
there's actually many points that
even<01:20:59.679><c> though</c><01:20:59.840><c> i've</c><01:21:00.000><c> been</c><01:21:00.159><c> driving</c><01:21:00.480><c> this</c>

01:21:00.550 --> 01:21:00.560 align:start position:0%
even though i've been driving this
 

01:21:00.560 --> 01:21:02.149 align:start position:0%
even though i've been driving this
discussion<01:21:00.960><c> with</c><01:21:01.040><c> the</c><01:21:01.120><c> timer</c><01:21:01.520><c> interrupt</c><01:21:02.000><c> in</c>

01:21:02.149 --> 01:21:02.159 align:start position:0%
discussion with the timer interrupt in
 

01:21:02.159 --> 01:21:04.149 align:start position:0%
discussion with the timer interrupt in
fact

01:21:04.149 --> 01:21:04.159 align:start position:0%
fact
 

01:21:04.159 --> 01:21:07.030 align:start position:0%
fact
in<01:21:04.400><c> almost</c><01:21:05.040><c> almost</c><01:21:05.360><c> all</c><01:21:05.600><c> cases</c><01:21:06.000><c> where</c><01:21:06.400><c> xv6</c>

01:21:07.030 --> 01:21:07.040 align:start position:0%
in almost almost all cases where xv6
 

01:21:07.040 --> 01:21:08.709 align:start position:0%
in almost almost all cases where xv6
switches<01:21:07.520><c> between</c><01:21:07.760><c> threads</c><01:21:08.159><c> it's</c><01:21:08.239><c> not</c><01:21:08.400><c> due</c><01:21:08.560><c> to</c>

01:21:08.709 --> 01:21:08.719 align:start position:0%
switches between threads it's not due to
 

01:21:08.719 --> 01:21:09.910 align:start position:0%
switches between threads it's not due to
timer<01:21:09.040><c> interrupts</c>

01:21:09.910 --> 01:21:09.920 align:start position:0%
timer interrupts
 

01:21:09.920 --> 01:21:12.950 align:start position:0%
timer interrupts
it's<01:21:10.159><c> because</c><01:21:11.120><c> um</c><01:21:12.159><c> some</c><01:21:12.400><c> system</c><01:21:12.639><c> call</c><01:21:12.880><c> is</c>

01:21:12.950 --> 01:21:12.960 align:start position:0%
it's because um some system call is
 

01:21:12.960 --> 01:21:15.350 align:start position:0%
it's because um some system call is
waiting<01:21:13.280><c> for</c><01:21:13.440><c> something</c><01:21:13.920><c> or</c><01:21:14.159><c> decides</c>

01:21:15.350 --> 01:21:15.360 align:start position:0%
waiting for something or decides
 

01:21:15.360 --> 01:21:17.669 align:start position:0%
waiting for something or decides
that<01:21:15.679><c> that</c><01:21:15.920><c> it</c><01:21:16.400><c> needs</c><01:21:16.639><c> to</c><01:21:16.719><c> give</c><01:21:16.960><c> up</c><01:21:17.040><c> the</c><01:21:17.120><c> cpu</c>

01:21:17.669 --> 01:21:17.679 align:start position:0%
that that it needs to give up the cpu
 

01:21:17.679 --> 01:21:19.110 align:start position:0%
that that it needs to give up the cpu
and<01:21:17.840><c> so</c><01:21:18.000><c> for</c><01:21:18.320><c> example</c>

01:21:19.110 --> 01:21:19.120 align:start position:0%
and so for example
 

01:21:19.120 --> 01:21:21.669 align:start position:0%
and so for example
exit<01:21:19.920><c> does</c><01:21:20.159><c> various</c><01:21:20.480><c> things</c><01:21:20.880><c> and</c><01:21:20.960><c> then</c><01:21:21.360><c> calls</c>

01:21:21.669 --> 01:21:21.679 align:start position:0%
exit does various things and then calls
 

01:21:21.679 --> 01:21:22.470 align:start position:0%
exit does various things and then calls
yield

01:21:22.470 --> 01:21:22.480 align:start position:0%
yield
 

01:21:22.480 --> 01:21:25.510 align:start position:0%
yield
to<01:21:22.639><c> give</c><01:21:22.800><c> up</c><01:21:22.960><c> the</c><01:21:23.040><c> cpu</c><01:21:23.520><c> and</c><01:21:24.239><c> it</c><01:21:24.320><c> does</c><01:21:24.560><c> that</c>

01:21:25.510 --> 01:21:25.520 align:start position:0%
to give up the cpu and it does that
 

01:21:25.520 --> 01:21:26.870 align:start position:0%
to give up the cpu and it does that
there's<01:21:25.679><c> really</c><01:21:25.840><c> nothing</c><01:21:26.320><c> it</c><01:21:26.400><c> does</c><01:21:26.639><c> that</c>

01:21:26.870 --> 01:21:26.880 align:start position:0%
there's really nothing it does that
 

01:21:26.880 --> 01:21:28.390 align:start position:0%
there's really nothing it does that
independently<01:21:27.520><c> whether</c><01:21:27.840><c> there's</c><01:21:28.000><c> a</c><01:21:28.080><c> timer</c>

01:21:28.390 --> 01:21:28.400 align:start position:0%
independently whether there's a timer
 

01:21:28.400 --> 01:21:31.669 align:start position:0%
independently whether there's a timer
interrupt

01:21:31.669 --> 01:21:31.679 align:start position:0%
 
 

01:21:31.679 --> 01:21:37.750 align:start position:0%
 
yes

01:21:37.750 --> 01:21:37.760 align:start position:0%
 
 

01:21:37.760 --> 01:21:40.470 align:start position:0%
 
all<01:21:37.840><c> right</c><01:21:38.080><c> the</c><01:21:39.760><c> time</c><01:21:40.000><c> is</c><01:21:40.159><c> up</c><01:21:40.239><c> for</c><01:21:40.320><c> this</c>

01:21:40.470 --> 01:21:40.480 align:start position:0%
all right the time is up for this
 

01:21:40.480 --> 01:21:41.510 align:start position:0%
all right the time is up for this
lecture<01:21:40.800><c> i</c><01:21:40.880><c> think</c><01:21:41.040><c> i'll</c>

01:21:41.510 --> 01:21:41.520 align:start position:0%
lecture i think i'll
 

01:21:41.520 --> 01:21:43.910 align:start position:0%
lecture i think i'll
continue<01:21:41.920><c> some</c><01:21:42.080><c> of</c><01:21:42.239><c> this</c><01:21:42.320><c> discussion</c><01:21:43.679><c> next</c>

01:21:43.910 --> 01:21:43.920 align:start position:0%
continue some of this discussion next
 

01:21:43.920 --> 01:21:45.510 align:start position:0%
continue some of this discussion next
week<01:21:44.080><c> but</c><01:21:44.239><c> i'm</c><01:21:44.400><c> happy</c><01:21:44.719><c> to</c><01:21:44.960><c> take</c><01:21:45.199><c> more</c>

01:21:45.510 --> 01:21:45.520 align:start position:0%
week but i'm happy to take more
 

01:21:45.520 --> 01:21:46.790 align:start position:0%
week but i'm happy to take more
questions

01:21:46.790 --> 01:21:46.800 align:start position:0%
questions
 

01:21:46.800 --> 01:21:52.229 align:start position:0%
questions
right<01:21:47.040><c> now</c><01:21:47.440><c> if</c><01:21:47.600><c> people</c><01:21:47.840><c> have</c><01:21:48.000><c> them</c>

01:21:52.229 --> 01:21:52.239 align:start position:0%
 
 

01:21:52.239 --> 01:21:54.149 align:start position:0%
 
so<01:21:52.480><c> let's</c><01:21:52.639><c> say</c><01:21:52.800><c> the</c><01:21:53.199><c> operating</c><01:21:53.760><c> system</c>

01:21:54.149 --> 01:21:54.159 align:start position:0%
so let's say the operating system
 

01:21:54.159 --> 01:21:56.390 align:start position:0%
so let's say the operating system
actually<01:21:54.840><c> um</c>

01:21:56.390 --> 01:21:56.400 align:start position:0%
actually um
 

01:21:56.400 --> 01:21:59.510 align:start position:0%
actually um
takes<01:21:56.800><c> on</c><01:21:57.280><c> the</c><01:21:57.520><c> thread</c><01:21:58.000><c> implementation</c><01:21:58.960><c> so</c>

01:21:59.510 --> 01:21:59.520 align:start position:0%
takes on the thread implementation so
 

01:21:59.520 --> 01:22:02.310 align:start position:0%
takes on the thread implementation so
so<01:22:00.159><c> for</c><01:22:00.320><c> example</c><01:22:00.719><c> you</c><01:22:00.880><c> want</c><01:22:01.040><c> to</c><01:22:01.199><c> run</c><01:22:01.920><c> multiple</c>

01:22:02.310 --> 01:22:02.320 align:start position:0%
so for example you want to run multiple
 

01:22:02.320 --> 01:22:03.750 align:start position:0%
so for example you want to run multiple
threads<01:22:02.800><c> of</c><01:22:02.960><c> a</c><01:22:03.120><c> process</c>

01:22:03.750 --> 01:22:03.760 align:start position:0%
threads of a process
 

01:22:03.760 --> 01:22:06.229 align:start position:0%
threads of a process
on<01:22:04.400><c> multiple</c><01:22:04.880><c> cpus</c><01:22:05.440><c> like</c><01:22:05.600><c> that</c><01:22:05.840><c> has</c><01:22:06.000><c> to</c><01:22:06.159><c> be</c>

01:22:06.229 --> 01:22:06.239 align:start position:0%
on multiple cpus like that has to be
 

01:22:06.239 --> 01:22:08.310 align:start position:0%
on multiple cpus like that has to be
handled<01:22:06.639><c> by</c><01:22:06.800><c> the</c><01:22:06.960><c> os</c><01:22:07.360><c> that</c><01:22:07.520><c> cannot</c><01:22:07.840><c> just</c><01:22:08.159><c> be</c>

01:22:08.310 --> 01:22:08.320 align:start position:0%
handled by the os that cannot just be
 

01:22:08.320 --> 01:22:10.310 align:start position:0%
handled by the os that cannot just be
handled<01:22:08.719><c> in</c><01:22:08.800><c> user</c><01:22:09.120><c> space</c><01:22:09.440><c> right</c>

01:22:10.310 --> 01:22:10.320 align:start position:0%
handled in user space right
 

01:22:10.320 --> 01:22:12.070 align:start position:0%
handled in user space right
how<01:22:10.480><c> does</c><01:22:10.719><c> that</c><01:22:10.880><c> kind</c><01:22:11.040><c> of</c><01:22:11.199><c> switching</c><01:22:11.600><c> work</c><01:22:11.920><c> is</c>

01:22:12.070 --> 01:22:12.080 align:start position:0%
how does that kind of switching work is
 

01:22:12.080 --> 01:22:14.229 align:start position:0%
how does that kind of switching work is
each<01:22:12.560><c> each</c><01:22:12.880><c> thread</c><01:22:13.280><c> mouse</c><01:22:13.600><c> becomes</c><01:22:13.920><c> the</c><01:22:14.080><c> same</c>

01:22:14.229 --> 01:22:14.239 align:start position:0%
each each thread mouse becomes the same
 

01:22:14.239 --> 01:22:15.830 align:start position:0%
each each thread mouse becomes the same
as<01:22:14.400><c> the</c><01:22:14.480><c> process</c><01:22:14.880><c> it's</c><01:22:15.040><c> like</c><01:22:15.280><c> is</c><01:22:15.440><c> it</c><01:22:15.520><c> always</c>

01:22:15.830 --> 01:22:15.840 align:start position:0%
as the process it's like is it always
 

01:22:15.840 --> 01:22:16.950 align:start position:0%
as the process it's like is it always
going<01:22:15.920><c> to</c><01:22:16.080><c> loop</c><01:22:16.400><c> through</c><01:22:16.639><c> all</c>

01:22:16.950 --> 01:22:16.960 align:start position:0%
going to loop through all
 

01:22:16.960 --> 01:22:20.390 align:start position:0%
going to loop through all
existing<01:22:17.600><c> threads</c><01:22:18.639><c> or</c><01:22:19.840><c> you</c><01:22:20.000><c> know</c><01:22:20.239><c> because</c>

01:22:20.390 --> 01:22:20.400 align:start position:0%
existing threads or you know because
 

01:22:20.400 --> 01:22:22.550 align:start position:0%
existing threads or you know because
like<01:22:20.639><c> each</c><01:22:20.960><c> cpu</c><01:22:21.440><c> will</c><01:22:21.600><c> still</c><01:22:21.840><c> switch</c><01:22:22.159><c> between</c>

01:22:22.550 --> 01:22:22.560 align:start position:0%
like each cpu will still switch between
 

01:22:22.560 --> 01:22:24.149 align:start position:0%
like each cpu will still switch between
even<01:22:22.800><c> if</c><01:22:22.960><c> one</c><01:22:23.120><c> process</c><01:22:23.520><c> has</c><01:22:23.600><c> give</c><01:22:23.760><c> me</c><01:22:23.920><c> eight</c>

01:22:24.149 --> 01:22:24.159 align:start position:0%
even if one process has give me eight
 

01:22:24.159 --> 01:22:25.750 align:start position:0%
even if one process has give me eight
cores<01:22:24.480><c> like</c><01:22:24.719><c> it's</c><01:22:24.880><c> still</c><01:22:25.040><c> going</c><01:22:25.199><c> to</c><01:22:25.360><c> switch</c>

01:22:25.750 --> 01:22:25.760 align:start position:0%
cores like it's still going to switch
 

01:22:25.760 --> 01:22:27.830 align:start position:0%
cores like it's still going to switch
switch<01:22:26.159><c> each</c><01:22:26.400><c> of</c><01:22:26.480><c> the</c><01:22:26.560><c> cpus</c><01:22:27.040><c> between</c>

01:22:27.830 --> 01:22:27.840 align:start position:0%
switch each of the cpus between
 

01:22:27.840 --> 01:22:30.470 align:start position:0%
switch each of the cpus between
those<01:22:28.239><c> and</c><01:22:28.320><c> then</c><01:22:28.560><c> couple</c><01:22:28.800><c> of</c><01:22:28.960><c> other</c><01:22:29.199><c> processes</c>

01:22:30.470 --> 01:22:30.480 align:start position:0%
those and then couple of other processes
 

01:22:30.480 --> 01:22:32.070 align:start position:0%
those and then couple of other processes
and<01:22:30.639><c> then</c><01:22:30.800><c> also</c><01:22:31.040><c> we</c><01:22:31.199><c> don't</c><01:22:31.280><c> want</c><01:22:31.440><c> to</c><01:22:31.679><c> really</c>

01:22:32.070 --> 01:22:32.080 align:start position:0%
and then also we don't want to really
 

01:22:32.080 --> 01:22:32.790 align:start position:0%
and then also we don't want to really
switch

01:22:32.790 --> 01:22:32.800 align:start position:0%
switch
 

01:22:32.800 --> 01:22:34.629 align:start position:0%
switch
like<01:22:33.120><c> between</c><01:22:33.520><c> one</c><01:22:33.679><c> and</c><01:22:33.760><c> the</c><01:22:33.920><c> other</c><01:22:34.159><c> thread</c><01:22:34.480><c> on</c>

01:22:34.629 --> 01:22:34.639 align:start position:0%
like between one and the other thread on
 

01:22:34.639 --> 01:22:36.070 align:start position:0%
like between one and the other thread on
the<01:22:34.800><c> same</c><01:22:35.040><c> cpu</c>

01:22:36.070 --> 01:22:36.080 align:start position:0%
the same cpu
 

01:22:36.080 --> 01:22:39.350 align:start position:0%
the same cpu
or<01:22:36.320><c> do</c><01:22:36.560><c> we</c><01:22:36.880><c> i</c><01:22:36.960><c> don't</c><01:22:37.120><c> know</c><01:22:38.719><c> wait</c>

01:22:39.350 --> 01:22:39.360 align:start position:0%
or do we i don't know wait
 

01:22:39.360 --> 01:22:42.950 align:start position:0%
or do we i don't know wait
can<01:22:39.600><c> uh</c><01:22:41.280><c> um</c><01:22:42.000><c> i'm</c><01:22:42.080><c> not</c><01:22:42.239><c> sure</c><01:22:42.400><c> what</c><01:22:42.560><c> the</c><01:22:42.639><c> question</c>

01:22:42.950 --> 01:22:42.960 align:start position:0%
can uh um i'm not sure what the question
 

01:22:42.960 --> 01:22:43.830 align:start position:0%
can uh um i'm not sure what the question
is

01:22:43.830 --> 01:22:43.840 align:start position:0%
is
 

01:22:43.840 --> 01:22:45.350 align:start position:0%
is
yeah<01:22:44.159><c> i</c><01:22:44.239><c> guess</c><01:22:44.480><c> i</c><01:22:44.639><c> guess</c><01:22:44.880><c> can</c><01:22:45.040><c> you</c><01:22:45.120><c> just</c>

01:22:45.350 --> 01:22:45.360 align:start position:0%
yeah i guess i guess can you just
 

01:22:45.360 --> 01:22:48.550 align:start position:0%
yeah i guess i guess can you just
explain<01:22:45.920><c> more</c><01:22:46.239><c> like</c><01:22:46.560><c> how</c><01:22:46.800><c> does</c><01:22:46.960><c> that</c><01:22:47.199><c> happen</c>

01:22:48.550 --> 01:22:48.560 align:start position:0%
explain more like how does that happen
 

01:22:48.560 --> 01:22:51.590 align:start position:0%
explain more like how does that happen
sorry<01:22:48.800><c> how</c><01:22:48.960><c> does</c><01:22:49.040><c> what</c><01:22:49.280><c> happen</c><01:22:50.320><c> um</c>

01:22:51.590 --> 01:22:51.600 align:start position:0%
sorry how does what happen um
 

01:22:51.600 --> 01:22:53.189 align:start position:0%
sorry how does what happen um
let's<01:22:51.760><c> say</c><01:22:51.920><c> we</c><01:22:52.080><c> have</c><01:22:52.239><c> multiple</c><01:22:52.639><c> threads</c><01:22:52.960><c> per</c>

01:22:53.189 --> 01:22:53.199 align:start position:0%
let's say we have multiple threads per
 

01:22:53.199 --> 01:22:54.870 align:start position:0%
let's say we have multiple threads per
process<01:22:53.760><c> so</c><01:22:53.920><c> that</c><01:22:54.080><c> they</c><01:22:54.239><c> can</c><01:22:54.480><c> and</c><01:22:54.560><c> they</c><01:22:54.719><c> can</c>

01:22:54.870 --> 01:22:54.880 align:start position:0%
process so that they can and they can
 

01:22:54.880 --> 01:22:55.350 align:start position:0%
process so that they can and they can
run<01:22:55.120><c> on</c>

01:22:55.350 --> 01:22:55.360 align:start position:0%
run on
 

01:22:55.360 --> 01:22:57.910 align:start position:0%
run on
different<01:22:55.760><c> gpus</c><01:22:56.719><c> like</c><01:22:56.960><c> how</c><01:22:57.120><c> do</c><01:22:57.280><c> what</c><01:22:57.440><c> do</c><01:22:57.600><c> we</c><01:22:57.760><c> go</c>

01:22:57.910 --> 01:22:57.920 align:start position:0%
different gpus like how do what do we go
 

01:22:57.920 --> 01:22:59.189 align:start position:0%
different gpus like how do what do we go
how<01:22:58.080><c> to</c><01:22:58.159><c> go</c><01:22:58.320><c> about</c><01:22:58.560><c> there</c>

01:22:59.189 --> 01:22:59.199 align:start position:0%
how to go about there
 

01:22:59.199 --> 01:23:01.669 align:start position:0%
how to go about there
yeah<01:22:59.360><c> so</c><01:22:59.600><c> linux</c><01:22:59.920><c> for</c><01:23:00.080><c> example</c><01:23:00.560><c> supports</c><01:23:01.280><c> uh</c>

01:23:01.669 --> 01:23:01.679 align:start position:0%
yeah so linux for example supports uh
 

01:23:01.679 --> 01:23:02.870 align:start position:0%
yeah so linux for example supports uh
multiple<01:23:02.159><c> threads</c>

01:23:02.870 --> 01:23:02.880 align:start position:0%
multiple threads
 

01:23:02.880 --> 01:23:05.030 align:start position:0%
multiple threads
per<01:23:03.120><c> process</c><01:23:03.600><c> and</c><01:23:04.239><c> in</c><01:23:04.560><c> linux</c><01:23:04.960><c> the</c>

01:23:05.030 --> 01:23:05.040 align:start position:0%
per process and in linux the
 

01:23:05.040 --> 01:23:07.590 align:start position:0%
per process and in linux the
implementation

01:23:07.590 --> 01:23:07.600 align:start position:0%
implementation
 

01:23:07.600 --> 01:23:09.350 align:start position:0%
implementation
is<01:23:07.760><c> a</c><01:23:07.840><c> complex</c><01:23:08.320><c> implementation</c><01:23:08.960><c> but</c><01:23:09.120><c> maybe</c>

01:23:09.350 --> 01:23:09.360 align:start position:0%
is a complex implementation but maybe
 

01:23:09.360 --> 01:23:11.910 align:start position:0%
is a complex implementation but maybe
the<01:23:09.840><c> simplest</c><01:23:10.159><c> way</c><01:23:10.320><c> to</c><01:23:10.400><c> explain</c><01:23:10.800><c> it</c><01:23:10.960><c> is</c><01:23:11.120><c> that</c>

01:23:11.910 --> 01:23:11.920 align:start position:0%
the simplest way to explain it is that
 

01:23:11.920 --> 01:23:15.669 align:start position:0%
the simplest way to explain it is that
um<01:23:12.719><c> each</c><01:23:13.840><c> uh</c><01:23:14.080><c> it's</c><01:23:14.320><c> almost</c><01:23:14.560><c> as</c><01:23:14.719><c> if</c><01:23:14.880><c> each</c><01:23:15.280><c> thread</c>

01:23:15.669 --> 01:23:15.679 align:start position:0%
um each uh it's almost as if each thread
 

01:23:15.679 --> 01:23:16.550 align:start position:0%
um each uh it's almost as if each thread
in<01:23:15.760><c> linux</c>

01:23:16.550 --> 01:23:16.560 align:start position:0%
in linux
 

01:23:16.560 --> 01:23:20.070 align:start position:0%
in linux
is<01:23:16.719><c> a</c><01:23:16.800><c> complete</c><01:23:17.280><c> process</c><01:23:19.199><c> and</c>

01:23:20.070 --> 01:23:20.080 align:start position:0%
is a complete process and
 

01:23:20.080 --> 01:23:22.870 align:start position:0%
is a complete process and
the<01:23:20.639><c> the</c><01:23:20.880><c> threads</c><01:23:21.280><c> of</c><01:23:21.440><c> a</c><01:23:21.520><c> given</c><01:23:22.320><c> what</c><01:23:22.560><c> we</c><01:23:22.719><c> would</c>

01:23:22.870 --> 01:23:22.880 align:start position:0%
the the threads of a given what we would
 

01:23:22.880 --> 01:23:25.189 align:start position:0%
the the threads of a given what we would
call<01:23:23.040><c> the</c><01:23:23.199><c> threads</c><01:23:23.520><c> of</c><01:23:23.679><c> a</c><01:23:23.760><c> particular</c><01:23:24.239><c> process</c>

01:23:25.189 --> 01:23:25.199 align:start position:0%
call the threads of a particular process
 

01:23:25.199 --> 01:23:27.669 align:start position:0%
call the threads of a particular process
are<01:23:25.520><c> essentially</c><01:23:26.159><c> separate</c><01:23:26.560><c> processes</c><01:23:27.360><c> that</c>

01:23:27.669 --> 01:23:27.679 align:start position:0%
are essentially separate processes that
 

01:23:27.679 --> 01:23:29.910 align:start position:0%
are essentially separate processes that
share<01:23:28.080><c> the</c><01:23:28.239><c> same</c><01:23:28.560><c> memory</c>

01:23:29.910 --> 01:23:29.920 align:start position:0%
share the same memory
 

01:23:29.920 --> 01:23:31.750 align:start position:0%
share the same memory
so<01:23:30.159><c> linux</c><01:23:30.480><c> has</c><01:23:30.560><c> sort</c><01:23:30.719><c> of</c><01:23:30.960><c> separated</c><01:23:31.520><c> out</c><01:23:31.600><c> the</c>

01:23:31.750 --> 01:23:31.760 align:start position:0%
so linux has sort of separated out the
 

01:23:31.760 --> 01:23:33.030 align:start position:0%
so linux has sort of separated out the
notion<01:23:32.239><c> of</c>

01:23:33.030 --> 01:23:33.040 align:start position:0%
notion of
 

01:23:33.040 --> 01:23:34.950 align:start position:0%
notion of
the<01:23:33.360><c> thread</c><01:23:33.600><c> of</c><01:23:33.760><c> execution</c><01:23:34.400><c> from</c><01:23:34.639><c> address</c>

01:23:34.950 --> 01:23:34.960 align:start position:0%
the thread of execution from address
 

01:23:34.960 --> 01:23:36.310 align:start position:0%
the thread of execution from address
space<01:23:35.440><c> and</c>

01:23:36.310 --> 01:23:36.320 align:start position:0%
space and
 

01:23:36.320 --> 01:23:39.110 align:start position:0%
space and
you<01:23:36.400><c> know</c><01:23:36.560><c> you</c><01:23:37.199><c> can</c><01:23:38.159><c> have</c><01:23:38.320><c> them</c><01:23:38.560><c> separately</c>

01:23:39.110 --> 01:23:39.120 align:start position:0%
you know you can have them separately
 

01:23:39.120 --> 01:23:39.510 align:start position:0%
you know you can have them separately
and

01:23:39.510 --> 01:23:39.520 align:start position:0%
and
 

01:23:39.520 --> 01:23:41.030 align:start position:0%
and
if<01:23:39.679><c> you</c><01:23:39.760><c> make</c><01:23:39.920><c> two</c><01:23:40.080><c> threads</c><01:23:40.400><c> in</c><01:23:40.480><c> one</c><01:23:40.639><c> process</c>

01:23:41.030 --> 01:23:41.040 align:start position:0%
if you make two threads in one process
 

01:23:41.040 --> 01:23:42.709 align:start position:0%
if you make two threads in one process
it<01:23:41.199><c> basically</c><01:23:41.520><c> makes</c><01:23:41.760><c> two</c><01:23:42.000><c> processes</c>

01:23:42.709 --> 01:23:42.719 align:start position:0%
it basically makes two processes
 

01:23:42.719 --> 01:23:44.870 align:start position:0%
it basically makes two processes
that<01:23:42.880><c> share</c><01:23:43.120><c> one</c><01:23:43.360><c> address</c><01:23:43.600><c> space</c><01:23:44.560><c> and</c><01:23:44.719><c> then</c>

01:23:44.870 --> 01:23:44.880 align:start position:0%
that share one address space and then
 

01:23:44.880 --> 01:23:46.709 align:start position:0%
that share one address space and then
from<01:23:45.040><c> then</c><01:23:45.280><c> on</c><01:23:45.600><c> the</c><01:23:45.760><c> scheduling</c><01:23:46.320><c> is</c>

01:23:46.709 --> 01:23:46.719 align:start position:0%
from then on the scheduling is
 

01:23:46.719 --> 01:23:49.750 align:start position:0%
from then on the scheduling is
not<01:23:47.040><c> unlike</c><01:23:48.480><c> what</c><01:23:48.719><c> xv6</c><01:23:49.280><c> does</c>

01:23:49.750 --> 01:23:49.760 align:start position:0%
not unlike what xv6 does
 

01:23:49.760 --> 01:23:53.350 align:start position:0%
not unlike what xv6 does
for<01:23:50.000><c> individual</c><01:23:50.480><c> processes</c><01:23:51.679><c> i</c><01:23:51.840><c> see</c><01:23:52.239><c> and</c><01:23:52.320><c> then</c>

01:23:53.350 --> 01:23:53.360 align:start position:0%
for individual processes i see and then
 

01:23:53.360 --> 01:23:55.590 align:start position:0%
for individual processes i see and then
is<01:23:53.520><c> there</c><01:23:53.760><c> anything</c><01:23:54.480><c> like</c><01:23:54.960><c> does</c><01:23:55.199><c> the</c><01:23:55.280><c> user</c>

01:23:55.590 --> 01:23:55.600 align:start position:0%
is there anything like does the user
 

01:23:55.600 --> 01:23:57.189 align:start position:0%
is there anything like does the user
have<01:23:55.760><c> to</c><01:23:55.920><c> specify</c><01:23:56.560><c> like</c>

01:23:57.189 --> 01:23:57.199 align:start position:0%
have to specify like
 

01:23:57.199 --> 01:24:00.470 align:start position:0%
have to specify like
okay<01:23:57.600><c> pin</c><01:23:58.000><c> each</c><01:23:58.239><c> thread</c><01:23:58.560><c> to</c><01:23:58.719><c> a</c><01:23:58.800><c> cpu</c><01:23:59.920><c> uh</c>

01:24:00.470 --> 01:24:00.480 align:start position:0%
okay pin each thread to a cpu uh
 

01:24:00.480 --> 01:24:03.110 align:start position:0%
okay pin each thread to a cpu uh
or<01:24:01.040><c> or</c><01:24:01.520><c> how</c><01:24:01.679><c> does</c><01:24:01.920><c> the</c><01:24:02.159><c> os</c><01:24:02.560><c> make</c><01:24:02.719><c> sure</c><01:24:02.880><c> that</c>

01:24:03.110 --> 01:24:03.120 align:start position:0%
or or how does the os make sure that
 

01:24:03.120 --> 01:24:04.470 align:start position:0%
or or how does the os make sure that
different<01:24:03.440><c> threads</c><01:24:03.760><c> of</c><01:24:03.840><c> the</c><01:24:03.920><c> same</c><01:24:04.159><c> process</c>

01:24:04.470 --> 01:24:04.480 align:start position:0%
different threads of the same process
 

01:24:04.480 --> 01:24:05.669 align:start position:0%
different threads of the same process
don't<01:24:04.639><c> run</c><01:24:04.880><c> on</c><01:24:04.960><c> the</c><01:24:05.040><c> same</c><01:24:05.280><c> core</c><01:24:05.520><c> because</c>

01:24:05.669 --> 01:24:05.679 align:start position:0%
don't run on the same core because
 

01:24:05.679 --> 01:24:06.310 align:start position:0%
don't run on the same core because
that's<01:24:05.920><c> kind</c><01:24:06.080><c> of</c>

01:24:06.310 --> 01:24:06.320 align:start position:0%
that's kind of
 

01:24:06.320 --> 01:24:08.310 align:start position:0%
that's kind of
defeating<01:24:06.800><c> the</c><01:24:06.880><c> purpose</c><01:24:07.440><c> or</c><01:24:07.600><c> not</c><01:24:07.840><c> i</c><01:24:08.000><c> guess</c><01:24:08.239><c> i</c>

01:24:08.310 --> 01:24:08.320 align:start position:0%
defeating the purpose or not i guess i
 

01:24:08.320 --> 01:24:09.669 align:start position:0%
defeating the purpose or not i guess i
don't<01:24:08.400><c> know</c><01:24:09.280><c> the</c>

01:24:09.669 --> 01:24:09.679 align:start position:0%
don't know the
 

01:24:09.679 --> 01:24:12.310 align:start position:0%
don't know the
the<01:24:09.840><c> uh</c><01:24:10.639><c> it's</c><01:24:11.040><c> actually</c><01:24:11.280><c> just</c><01:24:11.520><c> like</c><01:24:11.920><c> it's</c><01:24:12.080><c> much</c>

01:24:12.310 --> 01:24:12.320 align:start position:0%
the uh it's actually just like it's much
 

01:24:12.320 --> 01:24:14.550 align:start position:0%
the uh it's actually just like it's much
like<01:24:12.480><c> xp6</c><01:24:13.120><c> namely</c><01:24:13.520><c> the</c>

01:24:14.550 --> 01:24:14.560 align:start position:0%
like xp6 namely the
 

01:24:14.560 --> 01:24:18.709 align:start position:0%
like xp6 namely the
um<01:24:15.760><c> you</c><01:24:15.840><c> know</c><01:24:16.000><c> there's</c><01:24:16.320><c> four</c><01:24:16.560><c> cores</c><01:24:17.120><c> and</c>

01:24:18.709 --> 01:24:18.719 align:start position:0%
um you know there's four cores and
 

01:24:18.719 --> 01:24:20.310 align:start position:0%
um you know there's four cores and
linux<01:24:19.040><c> will</c><01:24:19.199><c> just</c><01:24:19.280><c> find</c><01:24:19.520><c> four</c><01:24:19.760><c> things</c><01:24:20.000><c> to</c><01:24:20.159><c> run</c>

01:24:20.310 --> 01:24:20.320 align:start position:0%
linux will just find four things to run
 

01:24:20.320 --> 01:24:22.149 align:start position:0%
linux will just find four things to run
on<01:24:20.400><c> those</c><01:24:20.639><c> four</c><01:24:20.880><c> cores</c>

01:24:22.149 --> 01:24:22.159 align:start position:0%
on those four cores
 

01:24:22.159 --> 01:24:25.350 align:start position:0%
on those four cores
they<01:24:22.320><c> may</c><01:24:22.480><c> be</c><01:24:24.000><c> you</c><01:24:24.080><c> know</c><01:24:24.320><c> if</c><01:24:24.800><c> there's</c><01:24:25.040><c> not</c><01:24:25.199><c> much</c>

01:24:25.350 --> 01:24:25.360 align:start position:0%
they may be you know if there's not much
 

01:24:25.360 --> 01:24:26.629 align:start position:0%
they may be you know if there's not much
going<01:24:25.520><c> on</c><01:24:25.679><c> then</c><01:24:25.840><c> maybe</c><01:24:26.080><c> there'll</c><01:24:26.239><c> be</c><01:24:26.400><c> four</c>

01:24:26.629 --> 01:24:26.639 align:start position:0%
going on then maybe there'll be four
 

01:24:26.639 --> 01:24:27.830 align:start position:0%
going on then maybe there'll be four
threads<01:24:27.120><c> of</c><01:24:27.280><c> the</c><01:24:27.440><c> same</c>

01:24:27.830 --> 01:24:27.840 align:start position:0%
threads of the same
 

01:24:27.840 --> 01:24:31.189 align:start position:0%
threads of the same
process<01:24:29.280><c> or</c><01:24:29.600><c> if</c><01:24:29.679><c> there's</c><01:24:30.159><c> 100</c><01:24:30.560><c> users</c><01:24:30.880><c> logged</c>

01:24:31.189 --> 01:24:31.199 align:start position:0%
process or if there's 100 users logged
 

01:24:31.199 --> 01:24:33.590 align:start position:0%
process or if there's 100 users logged
in<01:24:31.280><c> on</c><01:24:31.360><c> an</c><01:24:31.520><c> athena</c><01:24:31.920><c> machine</c><01:24:32.320><c> maybe</c><01:24:32.639><c> it's</c>

01:24:33.590 --> 01:24:33.600 align:start position:0%
in on an athena machine maybe it's
 

01:24:33.600 --> 01:24:35.990 align:start position:0%
in on an athena machine maybe it's
one<01:24:34.000><c> thread</c><01:24:34.480><c> each</c><01:24:34.880><c> from</c><01:24:35.360><c> multiple</c><01:24:35.760><c> different</c>

01:24:35.990 --> 01:24:36.000 align:start position:0%
one thread each from multiple different
 

01:24:36.000 --> 01:24:36.790 align:start position:0%
one thread each from multiple different
processes

01:24:36.790 --> 01:24:36.800 align:start position:0%
processes
 

01:24:36.800 --> 01:24:40.870 align:start position:0%
processes
you<01:24:36.880><c> know</c><01:24:39.120><c> there's</c><01:24:39.360><c> not</c><01:24:39.520><c> any</c><01:24:39.679><c> one</c><01:24:39.920><c> answer</c>

01:24:40.870 --> 01:24:40.880 align:start position:0%
you know there's not any one answer
 

01:24:40.880 --> 01:24:42.950 align:start position:0%
you know there's not any one answer
or<01:24:41.440><c> the</c><01:24:41.840><c> kernel</c><01:24:42.080><c> basically</c><01:24:42.480><c> finds</c><01:24:42.639><c> something</c>

01:24:42.950 --> 01:24:42.960 align:start position:0%
or the kernel basically finds something
 

01:24:42.960 --> 01:24:44.310 align:start position:0%
or the kernel basically finds something
for<01:24:43.120><c> each</c><01:24:43.280><c> core</c><01:24:43.520><c> to</c><01:24:43.600><c> do</c><01:24:43.840><c> and</c><01:24:43.920><c> then</c>

01:24:44.310 --> 01:24:44.320 align:start position:0%
for each core to do and then
 

01:24:44.320 --> 01:24:46.870 align:start position:0%
for each core to do and then
that<01:24:44.480><c> core</c><01:24:44.719><c> does</c><01:24:44.960><c> that</c><01:24:45.120><c> thing</c><01:24:46.400><c> okay</c><01:24:46.719><c> that</c>

01:24:46.870 --> 01:24:46.880 align:start position:0%
that core does that thing okay that
 

01:24:46.880 --> 01:24:48.550 align:start position:0%
that core does that thing okay that
makes<01:24:47.040><c> sense</c>

01:24:48.550 --> 01:24:48.560 align:start position:0%
makes sense
 

01:24:48.560 --> 01:24:51.110 align:start position:0%
makes sense
you<01:24:48.719><c> can</c><01:24:49.360><c> you</c><01:24:49.440><c> know</c><01:24:49.600><c> if</c><01:24:49.760><c> you're</c><01:24:50.800><c> if</c><01:24:50.880><c> you</c><01:24:51.040><c> want</c>

01:24:51.110 --> 01:24:51.120 align:start position:0%
you can you know if you're if you want
 

01:24:51.120 --> 01:24:52.390 align:start position:0%
you can you know if you're if you want
to<01:24:51.199><c> do</c><01:24:51.360><c> careful</c><01:24:51.679><c> measurements</c><01:24:52.080><c> there</c><01:24:52.239><c> is</c><01:24:52.320><c> a</c>

01:24:52.390 --> 01:24:52.400 align:start position:0%
to do careful measurements there is a
 

01:24:52.400 --> 01:24:53.910 align:start position:0%
to do careful measurements there is a
way<01:24:52.560><c> to</c><01:24:52.639><c> pin</c><01:24:52.960><c> threads</c><01:24:53.280><c> to</c><01:24:53.440><c> cores</c>

01:24:53.910 --> 01:24:53.920 align:start position:0%
way to pin threads to cores
 

01:24:53.920 --> 01:24:56.390 align:start position:0%
way to pin threads to cores
but<01:24:54.480><c> people</c><01:24:54.719><c> only</c><01:24:54.960><c> do</c><01:24:55.199><c> it</c><01:24:55.280><c> when</c><01:24:55.440><c> they're</c><01:24:56.159><c> up</c><01:24:56.239><c> to</c>

01:24:56.390 --> 01:24:56.400 align:start position:0%
but people only do it when they're up to
 

01:24:56.400 --> 01:25:00.550 align:start position:0%
but people only do it when they're up to
something<01:24:56.840><c> strange</c>

01:25:00.550 --> 01:25:00.560 align:start position:0%
 
 

01:25:00.560 --> 01:25:03.910 align:start position:0%
 
so<01:25:00.800><c> they</c><01:25:01.040><c> share</c><01:25:01.360><c> this</c><01:25:01.520><c> little</c><01:25:01.679><c> virtual</c><01:25:02.239><c> table</c>

01:25:03.910 --> 01:25:03.920 align:start position:0%
so they share this little virtual table
 

01:25:03.920 --> 01:25:06.470 align:start position:0%
so they share this little virtual table
you<01:25:04.000><c> say</c><01:25:04.159><c> it</c><01:25:04.239><c> again</c><01:25:04.639><c> memory</c><01:25:05.440><c> so</c><01:25:05.600><c> they</c><01:25:05.760><c> say</c><01:25:06.159><c> they</c>

01:25:06.470 --> 01:25:06.480 align:start position:0%
you say it again memory so they say they
 

01:25:06.480 --> 01:25:07.350 align:start position:0%
you say it again memory so they say they
have<01:25:06.719><c> the</c><01:25:06.800><c> same</c>

01:25:07.350 --> 01:25:07.360 align:start position:0%
have the same
 

01:25:07.360 --> 01:25:10.390 align:start position:0%
have the same
page<01:25:07.760><c> table</c><01:25:08.800><c> those</c><01:25:09.280><c> threads</c>

01:25:10.390 --> 01:25:10.400 align:start position:0%
page table those threads
 

01:25:10.400 --> 01:25:13.510 align:start position:0%
page table those threads
yeah<01:25:10.960><c> yeah</c><01:25:11.440><c> yeah</c><01:25:12.080><c> yeah</c><01:25:12.560><c> if</c><01:25:12.719><c> you're</c><01:25:12.960><c> on</c><01:25:13.120><c> linux</c>

01:25:13.510 --> 01:25:13.520 align:start position:0%
yeah yeah yeah yeah if you're on linux
 

01:25:13.520 --> 01:25:15.430 align:start position:0%
yeah yeah yeah yeah if you're on linux
if<01:25:13.600><c> you</c><01:25:13.760><c> create</c><01:25:14.080><c> two</c><01:25:14.320><c> threads</c><01:25:14.639><c> in</c><01:25:14.719><c> one</c><01:25:14.960><c> process</c>

01:25:15.430 --> 01:25:15.440 align:start position:0%
if you create two threads in one process
 

01:25:15.440 --> 01:25:17.270 align:start position:0%
if you create two threads in one process
then<01:25:15.600><c> you</c><01:25:15.679><c> have</c><01:25:15.840><c> these</c><01:25:16.000><c> two</c><01:25:16.159><c> threads</c><01:25:16.480><c> that</c>

01:25:17.270 --> 01:25:17.280 align:start position:0%
then you have these two threads that
 

01:25:17.280 --> 01:25:20.629 align:start position:0%
then you have these two threads that
uh<01:25:18.960><c> i</c><01:25:19.040><c> don't</c><01:25:19.199><c> know</c><01:25:19.280><c> if</c><01:25:19.360><c> they</c><01:25:19.600><c> like</c><01:25:20.000><c> literally</c>

01:25:20.629 --> 01:25:20.639 align:start position:0%
uh i don't know if they like literally
 

01:25:20.639 --> 01:25:23.830 align:start position:0%
uh i don't know if they like literally
share<01:25:21.520><c> the</c><01:25:21.760><c> exact</c><01:25:22.639><c> same</c><01:25:23.040><c> page</c><01:25:23.360><c> table</c><01:25:23.679><c> or</c>

01:25:23.830 --> 01:25:23.840 align:start position:0%
share the exact same page table or
 

01:25:23.840 --> 01:25:25.189 align:start position:0%
share the exact same page table or
whether<01:25:24.159><c> their</c><01:25:24.320><c> page</c><01:25:24.560><c> tables</c>

01:25:25.189 --> 01:25:25.199 align:start position:0%
whether their page tables
 

01:25:25.199 --> 01:25:28.629 align:start position:0%
whether their page tables
are<01:25:25.360><c> identical</c><01:25:26.639><c> one</c><01:25:26.800><c> or</c><01:25:26.960><c> the</c><01:25:27.040><c> other</c>

01:25:28.629 --> 01:25:28.639 align:start position:0%
are identical one or the other
 

01:25:28.639 --> 01:25:30.310 align:start position:0%
are identical one or the other
is<01:25:28.800><c> there</c><01:25:28.960><c> a</c><01:25:29.120><c> reason</c><01:25:29.440><c> why</c><01:25:29.679><c> they</c><01:25:29.840><c> would</c><01:25:30.000><c> have</c><01:25:30.159><c> to</c>

01:25:30.310 --> 01:25:30.320 align:start position:0%
is there a reason why they would have to
 

01:25:30.320 --> 01:25:32.790 align:start position:0%
is there a reason why they would have to
be<01:25:30.480><c> separate</c><01:25:31.360><c> ever</c>

01:25:32.790 --> 01:25:32.800 align:start position:0%
be separate ever
 

01:25:32.800 --> 01:25:36.550 align:start position:0%
be separate ever
if<01:25:32.960><c> you</c><01:25:33.199><c> manually</c><01:25:33.679><c> map</c><01:25:33.920><c> memory</c><01:25:34.320><c> or</c>

01:25:36.550 --> 01:25:36.560 align:start position:0%
 
 

01:25:36.560 --> 01:25:39.669 align:start position:0%
 
i<01:25:36.800><c> i</c><01:25:36.960><c> don't</c><01:25:37.199><c> know</c><01:25:37.360><c> enough</c><01:25:37.600><c> to</c><01:25:37.760><c> know</c><01:25:38.000><c> whether</c>

01:25:39.669 --> 01:25:39.679 align:start position:0%
i i don't know enough to know whether
 

01:25:39.679 --> 01:25:44.229 align:start position:0%
i i don't know enough to know whether
which<01:25:40.159><c> which</c><01:25:40.480><c> linux</c><01:25:40.880><c> does</c>

01:25:44.229 --> 01:25:44.239 align:start position:0%
 
 

01:25:44.239 --> 01:25:45.990 align:start position:0%
 
okay<01:25:44.560><c> i</c><01:25:44.639><c> have</c><01:25:44.800><c> another</c><01:25:45.199><c> question</c><01:25:45.520><c> about</c><01:25:45.760><c> like</c>

01:25:45.990 --> 01:25:46.000 align:start position:0%
okay i have another question about like
 

01:25:46.000 --> 01:25:48.229 align:start position:0%
okay i have another question about like
a<01:25:46.080><c> small</c><01:25:46.480><c> detail</c><01:25:47.120><c> um</c>

01:25:48.229 --> 01:25:48.239 align:start position:0%
a small detail um
 

01:25:48.239 --> 01:25:50.629 align:start position:0%
a small detail um
so<01:25:48.880><c> basically</c><01:25:49.440><c> like</c><01:25:49.679><c> from</c><01:25:49.840><c> my</c><01:25:50.000><c> understanding</c>

01:25:50.629 --> 01:25:50.639 align:start position:0%
so basically like from my understanding
 

01:25:50.639 --> 01:25:52.950 align:start position:0%
so basically like from my understanding
when<01:25:50.800><c> you</c><01:25:50.960><c> call</c><01:25:51.199><c> switch</c>

01:25:52.950 --> 01:25:52.960 align:start position:0%
when you call switch
 

01:25:52.960 --> 01:25:55.590 align:start position:0%
when you call switch
you<01:25:53.199><c> switch</c><01:25:53.600><c> from</c><01:25:53.920><c> one</c><01:25:54.239><c> call</c><01:25:54.560><c> to</c><01:25:55.040><c> switch</c><01:25:55.360><c> to</c>

01:25:55.590 --> 01:25:55.600 align:start position:0%
you switch from one call to switch to
 

01:25:55.600 --> 01:25:57.110 align:start position:0%
you switch from one call to switch to
another<01:25:56.080><c> so</c><01:25:56.239><c> the</c><01:25:56.400><c> first</c><01:25:56.560><c> time</c><01:25:56.800><c> you</c><01:25:56.960><c> call</c>

01:25:57.110 --> 01:25:57.120 align:start position:0%
another so the first time you call
 

01:25:57.120 --> 01:25:57.590 align:start position:0%
another so the first time you call
switch

01:25:57.590 --> 01:25:57.600 align:start position:0%
switch
 

01:25:57.600 --> 01:25:59.830 align:start position:0%
switch
you<01:25:57.760><c> have</c><01:25:57.920><c> to</c><01:25:58.080><c> like</c><01:25:58.320><c> kind</c><01:25:58.560><c> of</c><01:25:59.040><c> artificially</c>

01:25:59.830 --> 01:25:59.840 align:start position:0%
you have to like kind of artificially
 

01:25:59.840 --> 01:26:00.870 align:start position:0%
you have to like kind of artificially
create<01:26:00.400><c> that</c>

01:26:00.870 --> 01:26:00.880 align:start position:0%
create that
 

01:26:00.880 --> 01:26:04.390 align:start position:0%
create that
other<01:26:01.280><c> endpoint</c><01:26:01.760><c> to</c><01:26:02.080><c> come</c><01:26:02.320><c> back</c><01:26:02.560><c> to</c><01:26:02.880><c> right</c><01:26:03.440><c> yes</c>

01:26:04.390 --> 01:26:04.400 align:start position:0%
other endpoint to come back to right yes
 

01:26:04.400 --> 01:26:05.830 align:start position:0%
other endpoint to come back to right yes
because<01:26:04.560><c> you</c><01:26:04.719><c> can't</c><01:26:04.880><c> just</c><01:26:05.120><c> randomly</c><01:26:05.600><c> jump</c>

01:26:05.830 --> 01:26:05.840 align:start position:0%
because you can't just randomly jump
 

01:26:05.840 --> 01:26:07.430 align:start position:0%
because you can't just randomly jump
into<01:26:06.080><c> write</c><01:26:06.320><c> any</c><01:26:06.480><c> code</c>

01:26:07.430 --> 01:26:07.440 align:start position:0%
into write any code
 

01:26:07.440 --> 01:26:11.830 align:start position:0%
into write any code
yes<01:26:09.760><c> you</c><01:26:09.920><c> want</c><01:26:10.080><c> to</c><01:26:10.159><c> know</c><01:26:10.320><c> where</c><01:26:10.560><c> that</c>

01:26:11.830 --> 01:26:11.840 align:start position:0%
yes you want to know where that
 

01:26:11.840 --> 01:26:14.870 align:start position:0%
yes you want to know where that
where<01:26:12.159><c> that</c><01:26:12.560><c> fake</c>

01:26:14.870 --> 01:26:14.880 align:start position:0%
where that fake
 

01:26:14.880 --> 01:26:17.910 align:start position:0%
where that fake
where<01:26:15.120><c> that</c><01:26:15.360><c> context</c><01:26:15.840><c> is</c><01:26:16.000><c> cooked</c><01:26:16.400><c> up</c><01:26:17.600><c> probably</c>

01:26:17.910 --> 01:26:17.920 align:start position:0%
where that context is cooked up probably
 

01:26:17.920 --> 01:26:19.430 align:start position:0%
where that context is cooked up probably
somewhere<01:26:18.320><c> where</c><01:26:18.480><c> the</c><01:26:18.639><c> process</c><01:26:19.120><c> is</c>

01:26:19.430 --> 01:26:19.440 align:start position:0%
somewhere where the process is
 

01:26:19.440 --> 01:26:21.510 align:start position:0%
somewhere where the process is
uh<01:26:20.000><c> created</c><01:26:20.480><c> now</c><01:26:20.719><c> i</c><01:26:20.800><c> guess</c><01:26:21.199><c> i</c><01:26:21.280><c> don't</c><01:26:21.360><c> know</c><01:26:21.600><c> yeah</c>

01:26:21.510 --> 01:26:21.520 align:start position:0%
uh created now i guess i don't know yeah
 

01:26:21.520 --> 01:26:24.709 align:start position:0%
uh created now i guess i don't know yeah
yeah<01:26:22.080><c> yeah</c><01:26:22.320><c> yeah</c><01:26:22.560><c> maybe</c><01:26:22.880><c> user</c><01:26:23.280><c> internet</c>

01:26:24.709 --> 01:26:24.719 align:start position:0%
yeah yeah yeah maybe user internet
 

01:26:24.719 --> 01:26:33.110 align:start position:0%
yeah yeah yeah maybe user internet
or<01:26:25.360><c> let's</c><01:26:25.600><c> see</c><01:26:25.760><c> not</c><01:26:26.000><c> using</c><01:26:26.320><c> it</c><01:26:26.639><c> lock</c><01:26:26.960><c> proc</c>

01:26:33.110 --> 01:26:33.120 align:start position:0%
 
 

01:26:33.120 --> 01:26:35.510 align:start position:0%
 
there's<01:26:33.280><c> something</c><01:26:33.679><c> called</c><01:26:34.159><c> fork</c><01:26:34.960><c> trap</c><01:26:35.360><c> or</c>

01:26:35.510 --> 01:26:35.520 align:start position:0%
there's something called fork trap or
 

01:26:35.520 --> 01:26:36.229 align:start position:0%
there's something called fork trap or
something<01:26:35.840><c> yeah</c>

01:26:36.229 --> 01:26:36.239 align:start position:0%
something yeah
 

01:26:36.239 --> 01:26:38.870 align:start position:0%
something yeah
look<01:26:36.400><c> at</c><01:26:36.480><c> this</c><01:26:36.960><c> yeah</c><01:26:37.199><c> yeah</c><01:26:37.520><c> well</c><01:26:38.320><c> yeah</c><01:26:38.560><c> fork</c>

01:26:38.870 --> 01:26:38.880 align:start position:0%
look at this yeah yeah well yeah fork
 

01:26:38.880 --> 01:26:40.790 align:start position:0%
look at this yeah yeah well yeah fork
red<01:26:39.199><c> okay</c><01:26:39.360><c> so</c><01:26:39.520><c> an</c><01:26:39.679><c> alloc</c><01:26:40.159><c> proc</c><01:26:40.560><c> which</c><01:26:40.719><c> is</c>

01:26:40.790 --> 01:26:40.800 align:start position:0%
red okay so an alloc proc which is
 

01:26:40.800 --> 01:26:42.149 align:start position:0%
red okay so an alloc proc which is
called<01:26:41.199><c> both</c>

01:26:42.149 --> 01:26:42.159 align:start position:0%
called both
 

01:26:42.159 --> 01:26:44.550 align:start position:0%
called both
for<01:26:42.320><c> the</c><01:26:42.560><c> very</c><01:26:42.880><c> first</c><01:26:43.120><c> process</c><01:26:43.520><c> of</c><01:26:43.840><c> blue</c><01:26:44.159><c> time</c>

01:26:44.550 --> 01:26:44.560 align:start position:0%
for the very first process of blue time
 

01:26:44.560 --> 01:26:45.189 align:start position:0%
for the very first process of blue time
and<01:26:44.880><c> by</c>

01:26:45.189 --> 01:26:45.199 align:start position:0%
and by
 

01:26:45.199 --> 01:26:49.110 align:start position:0%
and by
fork<01:26:46.080><c> um</c><01:26:46.880><c> alloc</c><01:26:47.360><c> proc</c><01:26:47.760><c> sets</c><01:26:48.159><c> up</c><01:26:48.400><c> the</c><01:26:48.639><c> critical</c>

01:26:49.110 --> 01:26:49.120 align:start position:0%
fork um alloc proc sets up the critical
 

01:26:49.120 --> 01:26:50.709 align:start position:0%
fork um alloc proc sets up the critical
elements<01:26:49.520><c> of</c><01:26:49.600><c> the</c><01:26:49.840><c> context</c>

01:26:50.709 --> 01:26:50.719 align:start position:0%
elements of the context
 

01:26:50.719 --> 01:26:54.550 align:start position:0%
elements of the context
for<01:26:50.880><c> the</c><01:26:51.120><c> new</c><01:26:51.440><c> processes</c>

01:26:54.550 --> 01:26:54.560 align:start position:0%
 
 

01:26:54.560 --> 01:26:56.470 align:start position:0%
 
it<01:26:54.639><c> sets</c><01:26:54.880><c> up</c><01:26:54.960><c> the</c><01:26:55.040><c> new</c><01:26:55.199><c> processes</c><01:26:55.679><c> context</c><01:26:56.320><c> it</c>

01:26:56.470 --> 01:26:56.480 align:start position:0%
it sets up the new processes context it
 

01:26:56.480 --> 01:26:57.510 align:start position:0%
it sets up the new processes context it
actually<01:26:56.639><c> doesn't</c><01:26:56.800><c> matter</c><01:26:57.040><c> what</c><01:26:57.120><c> most</c><01:26:57.360><c> of</c><01:26:57.440><c> the</c>

01:26:57.510 --> 01:26:57.520 align:start position:0%
actually doesn't matter what most of the
 

01:26:57.520 --> 01:26:59.110 align:start position:0%
actually doesn't matter what most of the
registers<01:26:58.000><c> are</c>

01:26:59.110 --> 01:26:59.120 align:start position:0%
registers are
 

01:26:59.120 --> 01:27:00.950 align:start position:0%
registers are
but<01:26:59.280><c> it</c><01:26:59.360><c> doesn't</c><01:26:59.520><c> matter</c><01:26:59.760><c> what</c><01:26:59.920><c> ra</c><01:27:00.400><c> is</c><01:27:00.719><c> because</c>

01:27:00.950 --> 01:27:00.960 align:start position:0%
but it doesn't matter what ra is because
 

01:27:00.960 --> 01:27:02.149 align:start position:0%
but it doesn't matter what ra is because
that's<01:27:01.199><c> where</c><01:27:01.520><c> the</c><01:27:01.679><c> switch</c>

01:27:02.149 --> 01:27:02.159 align:start position:0%
that's where the switch
 

01:27:02.159 --> 01:27:04.070 align:start position:0%
that's where the switch
the<01:27:02.400><c> very</c><01:27:02.800><c> first</c><01:27:03.040><c> switch</c><01:27:03.440><c> and</c><01:27:03.520><c> that</c><01:27:03.679><c> process</c>

01:27:04.070 --> 01:27:04.080 align:start position:0%
the very first switch and that process
 

01:27:04.080 --> 01:27:07.430 align:start position:0%
the very first switch and that process
is<01:27:04.320><c> going</c><01:27:04.400><c> to</c><01:27:04.560><c> return</c><01:27:04.800><c> to</c><01:27:04.960><c> ra</c>

01:27:07.430 --> 01:27:07.440 align:start position:0%
 
 

01:27:07.440 --> 01:27:09.189 align:start position:0%
 
and<01:27:07.600><c> that</c><01:27:07.840><c> process</c><01:27:08.239><c> is</c><01:27:08.480><c> going</c><01:27:08.560><c> to</c><01:27:08.719><c> need</c><01:27:08.880><c> to</c><01:27:08.960><c> use</c>

01:27:09.189 --> 01:27:09.199 align:start position:0%
and that process is going to need to use
 

01:27:09.199 --> 01:27:12.470 align:start position:0%
and that process is going to need to use
its<01:27:09.360><c> own</c><01:27:09.520><c> stack</c><01:27:10.080><c> so</c><01:27:10.239><c> ra</c><01:27:10.560><c> and</c><01:27:10.719><c> sp</c><01:27:11.040><c> are</c><01:27:11.199><c> set</c><01:27:11.440><c> up</c>

01:27:12.470 --> 01:27:12.480 align:start position:0%
its own stack so ra and sp are set up
 

01:27:12.480 --> 01:27:15.270 align:start position:0%
its own stack so ra and sp are set up
are<01:27:12.719><c> faked</c><01:27:13.360><c> essentially</c><01:27:14.560><c> so</c><01:27:14.719><c> that</c><01:27:14.880><c> the</c><01:27:15.040><c> very</c>

01:27:15.270 --> 01:27:15.280 align:start position:0%
are faked essentially so that the very
 

01:27:15.280 --> 01:27:16.070 align:start position:0%
are faked essentially so that the very
first<01:27:15.600><c> switch</c>

01:27:16.070 --> 01:27:16.080 align:start position:0%
first switch
 

01:27:16.080 --> 01:27:19.110 align:start position:0%
first switch
into<01:27:16.239><c> a</c><01:27:16.320><c> process</c><01:27:16.840><c> works</c><01:27:18.239><c> so</c><01:27:18.560><c> so</c><01:27:18.880><c> if</c><01:27:19.040><c> i</c>

01:27:19.110 --> 01:27:19.120 align:start position:0%
into a process works so so if i
 

01:27:19.120 --> 01:27:20.629 align:start position:0%
into a process works so so if i
understand<01:27:19.600><c> this</c><01:27:19.840><c> correctly</c><01:27:20.239><c> like</c><01:27:20.400><c> when</c><01:27:20.560><c> the</c>

01:27:20.629 --> 01:27:20.639 align:start position:0%
understand this correctly like when the
 

01:27:20.639 --> 01:27:22.390 align:start position:0%
understand this correctly like when the
switch<01:27:20.960><c> will</c><01:27:21.199><c> happen</c><01:27:21.600><c> then</c>

01:27:22.390 --> 01:27:22.400 align:start position:0%
switch will happen then
 

01:27:22.400 --> 01:27:24.870 align:start position:0%
switch will happen then
it'll<01:27:22.719><c> basically</c><01:27:23.280><c> just</c><01:27:23.760><c> start</c><01:27:24.080><c> executing</c><01:27:24.639><c> the</c>

01:27:24.870 --> 01:27:24.880 align:start position:0%
it'll basically just start executing the
 

01:27:24.880 --> 01:27:25.910 align:start position:0%
it'll basically just start executing the
first<01:27:25.280><c> instruction</c>

01:27:25.910 --> 01:27:25.920 align:start position:0%
first instruction
 

01:27:25.920 --> 01:27:28.950 align:start position:0%
first instruction
inside<01:27:26.159><c> of</c><01:27:26.320><c> the</c><01:27:26.639><c> four</c><01:27:26.880><c> cred</c><01:27:27.520><c> as</c><01:27:27.760><c> if</c><01:27:28.320><c> red</c><01:27:28.639><c> just</c>

01:27:28.950 --> 01:27:28.960 align:start position:0%
inside of the four cred as if red just
 

01:27:28.960 --> 01:27:30.950 align:start position:0%
inside of the four cred as if red just
called<01:27:29.280><c> switch</c><01:27:29.600><c> and</c><01:27:29.679><c> returned</c><01:27:30.080><c> from</c>

01:27:30.950 --> 01:27:30.960 align:start position:0%
called switch and returned from
 

01:27:30.960 --> 01:27:33.270 align:start position:0%
called switch and returned from
yeah<01:27:31.360><c> yeah</c><01:27:31.679><c> yeah</c><01:27:32.080><c> yeah</c><01:27:32.320><c> the</c><01:27:32.400><c> return</c><01:27:33.040><c> from</c>

01:27:33.270 --> 01:27:33.280 align:start position:0%
yeah yeah yeah yeah the return from
 

01:27:33.280 --> 01:27:34.149 align:start position:0%
yeah yeah yeah yeah the return from
switch<01:27:33.760><c> is</c>

01:27:34.149 --> 01:27:34.159 align:start position:0%
switch is
 

01:27:34.159 --> 01:27:35.750 align:start position:0%
switch is
going<01:27:34.320><c> to</c><01:27:34.400><c> be</c><01:27:34.560><c> a</c><01:27:34.719><c> jump</c><01:27:35.040><c> to</c><01:27:35.199><c> the</c><01:27:35.280><c> beginning</c><01:27:35.600><c> of</c>

01:27:35.750 --> 01:27:35.760 align:start position:0%
going to be a jump to the beginning of
 

01:27:35.760 --> 01:27:37.350 align:start position:0%
going to be a jump to the beginning of
fork<01:27:36.080><c> red</c>

01:27:37.350 --> 01:27:37.360 align:start position:0%
fork red
 

01:27:37.360 --> 01:27:41.189 align:start position:0%
fork red
right<01:27:39.120><c> interesting</c><01:27:40.320><c> do</c><01:27:40.480><c> we</c><01:27:40.639><c> ever</c>

01:27:41.189 --> 01:27:41.199 align:start position:0%
right interesting do we ever
 

01:27:41.199 --> 01:27:44.390 align:start position:0%
right interesting do we ever
call<01:27:41.600><c> fork</c><01:27:41.920><c> red</c><01:27:42.480><c> or</c><01:27:42.719><c> is</c><01:27:42.960><c> it</c><01:27:43.120><c> always</c><01:27:43.440><c> hap</c>

01:27:44.390 --> 01:27:44.400 align:start position:0%
call fork red or is it always hap
 

01:27:44.400 --> 01:27:46.149 align:start position:0%
call fork red or is it always hap
it<01:27:44.480><c> always</c><01:27:44.719><c> happens</c><01:27:45.120><c> like</c><01:27:45.280><c> this</c><01:27:45.760><c> i</c><01:27:46.000><c> don't</c>

01:27:46.149 --> 01:27:46.159 align:start position:0%
it always happens like this i don't
 

01:27:46.159 --> 01:27:48.149 align:start position:0%
it always happens like this i don't
think<01:27:46.400><c> anything</c><01:27:46.800><c> ever</c><01:27:47.120><c> calls</c><01:27:47.520><c> for</c><01:27:47.679><c> credit</c><01:27:48.000><c> for</c>

01:27:48.149 --> 01:27:48.159 align:start position:0%
think anything ever calls for credit for
 

01:27:48.159 --> 01:27:50.310 align:start position:0%
think anything ever calls for credit for
real<01:27:48.560><c> i</c><01:27:48.639><c> think</c><01:27:48.880><c> it's</c>

01:27:50.310 --> 01:27:50.320 align:start position:0%
real i think it's
 

01:27:50.320 --> 01:27:52.950 align:start position:0%
real i think it's
just<01:27:51.679><c> yeah</c><01:27:51.840><c> it's</c><01:27:52.000><c> only</c><01:27:52.239><c> executed</c><01:27:52.719><c> in</c><01:27:52.800><c> this</c>

01:27:52.950 --> 01:27:52.960 align:start position:0%
just yeah it's only executed in this
 

01:27:52.960 --> 01:27:55.830 align:start position:0%
just yeah it's only executed in this
weird<01:27:53.280><c> way</c><01:27:53.600><c> from</c>

01:27:55.830 --> 01:27:55.840 align:start position:0%
weird way from
 

01:27:55.840 --> 01:27:59.110 align:start position:0%
weird way from
first<01:27:56.080><c> time</c><01:27:56.239><c> a</c><01:27:56.320><c> process</c><01:27:56.719><c> is</c><01:27:56.880><c> run</c><01:27:58.480><c> it</c><01:27:58.719><c> is</c><01:27:58.800><c> really</c>

01:27:59.110 --> 01:27:59.120 align:start position:0%
first time a process is run it is really
 

01:27:59.120 --> 01:28:00.629 align:start position:0%
first time a process is run it is really
its<01:27:59.360><c> job</c><01:27:59.760><c> is</c><01:27:59.920><c> to</c>

01:28:00.629 --> 01:28:00.639 align:start position:0%
its job is to
 

01:28:00.639 --> 01:28:04.390 align:start position:0%
its job is to
release<01:28:01.040><c> the</c><01:28:01.280><c> lock</c><01:28:02.880><c> that</c><01:28:03.040><c> the</c><01:28:03.199><c> scheduler</c><01:28:03.679><c> took</c>

01:28:04.390 --> 01:28:04.400 align:start position:0%
release the lock that the scheduler took
 

01:28:04.400 --> 01:28:06.790 align:start position:0%
release the lock that the scheduler took
and<01:28:04.560><c> then</c><01:28:04.800><c> return</c><01:28:05.440><c> and</c><01:28:05.600><c> then</c><01:28:05.920><c> this</c><01:28:06.159><c> user</c><01:28:06.480><c> trap</c>

01:28:06.790 --> 01:28:06.800 align:start position:0%
and then return and then this user trap
 

01:28:06.800 --> 01:28:08.149 align:start position:0%
and then return and then this user trap
red<01:28:07.040><c> of</c><01:28:07.120><c> course</c><01:28:07.440><c> is</c><01:28:07.600><c> also</c>

01:28:08.149 --> 01:28:08.159 align:start position:0%
red of course is also
 

01:28:08.159 --> 01:28:11.270 align:start position:0%
red of course is also
fake<01:28:09.440><c> in</c><01:28:09.520><c> that</c><01:28:09.760><c> it's</c>

01:28:11.270 --> 01:28:11.280 align:start position:0%
fake in that it's
 

01:28:11.280 --> 01:28:13.430 align:start position:0%
fake in that it's
it's<01:28:11.440><c> you</c><01:28:11.600><c> know</c><01:28:11.840><c> yeah</c><01:28:12.000><c> it's</c><01:28:12.159><c> like</c><01:28:12.719><c> it's</c><01:28:13.040><c> as</c><01:28:13.280><c> if</c>

01:28:13.430 --> 01:28:13.440 align:start position:0%
it's you know yeah it's like it's as if
 

01:28:13.440 --> 01:28:15.430 align:start position:0%
it's you know yeah it's like it's as if
returning<01:28:13.920><c> from</c><01:28:14.080><c> a</c><01:28:14.159><c> trap</c><01:28:14.560><c> except</c><01:28:14.960><c> the</c><01:28:15.040><c> trap</c>

01:28:15.430 --> 01:28:15.440 align:start position:0%
returning from a trap except the trap
 

01:28:15.440 --> 01:28:16.310 align:start position:0%
returning from a trap except the trap
frame<01:28:15.760><c> is</c>

01:28:16.310 --> 01:28:16.320 align:start position:0%
frame is
 

01:28:16.320 --> 01:28:19.669 align:start position:0%
frame is
faked<01:28:16.800><c> also</c><01:28:17.760><c> to</c><01:28:18.320><c> have</c><01:28:18.800><c> to</c><01:28:18.960><c> like</c><01:28:19.199><c> jump</c><01:28:19.440><c> to</c><01:28:19.600><c> the</c>

01:28:19.669 --> 01:28:19.679 align:start position:0%
faked also to have to like jump to the
 

01:28:19.679 --> 01:28:21.590 align:start position:0%
faked also to have to like jump to the
first<01:28:20.000><c> instruction</c><01:28:20.639><c> in</c><01:28:20.719><c> the</c>

01:28:21.590 --> 01:28:21.600 align:start position:0%
first instruction in the
 

01:28:21.600 --> 01:28:24.629 align:start position:0%
first instruction in the
user<01:28:22.400><c> right</c><01:28:23.040><c> code</c>

01:28:24.629 --> 01:28:24.639 align:start position:0%
user right code
 

01:28:24.639 --> 01:28:26.870 align:start position:0%
user right code
oh<01:28:24.960><c> but</c><01:28:25.120><c> the</c><01:28:25.280><c> trap</c><01:28:25.600><c> frame</c><01:28:26.239><c> it's</c><01:28:26.400><c> again</c><01:28:26.719><c> the</c>

01:28:26.870 --> 01:28:26.880 align:start position:0%
oh but the trap frame it's again the
 

01:28:26.880 --> 01:28:28.310 align:start position:0%
oh but the trap frame it's again the
same<01:28:27.120><c> like</c><01:28:27.280><c> you</c><01:28:27.440><c> don't</c><01:28:27.520><c> need</c><01:28:27.679><c> to</c><01:28:27.760><c> initialize</c>

01:28:28.310 --> 01:28:28.320 align:start position:0%
same like you don't need to initialize
 

01:28:28.320 --> 01:28:30.070 align:start position:0%
same like you don't need to initialize
any<01:28:28.480><c> registers</c><01:28:29.040><c> because</c><01:28:29.280><c> it's</c><01:28:29.360><c> like</c><01:28:29.600><c> well</c>

01:28:30.070 --> 01:28:30.080 align:start position:0%
any registers because it's like well
 

01:28:30.080 --> 01:28:32.709 align:start position:0%
any registers because it's like well
we're<01:28:30.400><c> going</c><01:28:30.639><c> to</c><01:28:30.880><c> the</c><01:28:31.360><c> beginning</c><01:28:31.920><c> so</c><01:28:32.639><c> you</c>

01:28:32.709 --> 01:28:32.719 align:start position:0%
we're going to the beginning so you
 

01:28:32.719 --> 01:28:34.310 align:start position:0%
we're going to the beginning so you
don't<01:28:32.880><c> need</c><01:28:33.040><c> to</c><01:28:33.120><c> assume</c><01:28:33.440><c> anything</c>

01:28:34.310 --> 01:28:34.320 align:start position:0%
don't need to assume anything
 

01:28:34.320 --> 01:28:37.350 align:start position:0%
don't need to assume anything
yeah<01:28:34.560><c> the</c><01:28:34.719><c> program</c><01:28:35.120><c> counter</c><01:28:35.520><c> i</c><01:28:35.600><c> think</c><01:28:35.920><c> is</c><01:28:36.159><c> uh</c>

01:28:37.350 --> 01:28:37.360 align:start position:0%
yeah the program counter i think is uh
 

01:28:37.360 --> 01:28:40.149 align:start position:0%
yeah the program counter i think is uh
yeah<01:28:38.000><c> it</c><01:28:38.159><c> needs</c><01:28:38.320><c> to</c><01:28:38.400><c> be</c><01:28:38.480><c> initialized</c><01:28:38.960><c> to</c><01:28:39.120><c> zero</c>

01:28:40.149 --> 01:28:40.159 align:start position:0%
yeah it needs to be initialized to zero
 

01:28:40.159 --> 01:28:42.950 align:start position:0%
yeah it needs to be initialized to zero
i<01:28:40.320><c> don't</c><01:28:40.480><c> know</c><01:28:40.639><c> what</c><01:28:40.880><c> else</c>

01:28:42.950 --> 01:28:42.960 align:start position:0%
i don't know what else
 

01:28:42.960 --> 01:28:46.229 align:start position:0%
i don't know what else
maybe<01:28:43.280><c> it</c>

01:28:46.229 --> 01:28:46.239 align:start position:0%
 
 

01:28:46.239 --> 01:28:48.070 align:start position:0%
 
i<01:28:46.400><c> mean</c><01:28:46.560><c> probably</c><01:28:46.880><c> if</c><01:28:46.960><c> we</c><01:28:47.360><c> call</c><01:28:47.679><c> them</c><01:28:47.920><c> it</c>

01:28:48.070 --> 01:28:48.080 align:start position:0%
i mean probably if we call them it
 

01:28:48.080 --> 01:28:49.830 align:start position:0%
i mean probably if we call them it
doesn't<01:28:48.480><c> right</c><01:28:48.880><c> because</c><01:28:49.120><c> if</c><01:28:49.280><c> we</c><01:28:49.440><c> already</c><01:28:49.679><c> do</c>

01:28:49.830 --> 01:28:49.840 align:start position:0%
doesn't right because if we already do
 

01:28:49.840 --> 01:28:50.310 align:start position:0%
doesn't right because if we already do
the

01:28:50.310 --> 01:28:50.320 align:start position:0%
the
 

01:28:50.320 --> 01:28:52.070 align:start position:0%
the
call<01:28:50.639><c> then</c><01:28:50.800><c> that's</c><01:28:51.120><c> going</c><01:28:51.199><c> to</c><01:28:51.360><c> set</c><01:28:51.520><c> the</c><01:28:51.679><c> broken</c>

01:28:52.070 --> 01:28:52.080 align:start position:0%
call then that's going to set the broken
 

01:28:52.080 --> 01:28:54.149 align:start position:0%
call then that's going to set the broken
counter<01:28:52.719><c> yeah</c><01:28:52.880><c> yeah</c><01:28:53.120><c> so</c><01:28:53.280><c> here's</c><01:28:53.600><c> the</c><01:28:53.920><c> this</c>

01:28:54.149 --> 01:28:54.159 align:start position:0%
counter yeah yeah so here's the this
 

01:28:54.159 --> 01:28:56.470 align:start position:0%
counter yeah yeah so here's the this
only<01:28:54.400><c> happens</c><01:28:54.800><c> oh</c><01:28:54.960><c> because</c><01:28:55.199><c> four</c><01:28:55.840><c> copies</c>

01:28:56.470 --> 01:28:56.480 align:start position:0%
only happens oh because four copies
 

01:28:56.480 --> 01:28:59.189 align:start position:0%
only happens oh because four copies
fork<01:28:56.880><c> copies</c><01:28:57.280><c> the</c><01:28:57.440><c> program</c><01:28:57.760><c> counter</c><01:28:58.800><c> the</c><01:28:58.880><c> user</c>

01:28:59.189 --> 01:28:59.199 align:start position:0%
fork copies the program counter the user
 

01:28:59.199 --> 01:29:00.470 align:start position:0%
fork copies the program counter the user
program<01:28:59.600><c> counter</c>

01:29:00.470 --> 01:29:00.480 align:start position:0%
program counter
 

01:29:00.480 --> 01:29:01.830 align:start position:0%
program counter
and<01:29:00.719><c> so</c><01:29:00.880><c> the</c><01:29:00.960><c> only</c><01:29:01.280><c> time</c><01:29:01.440><c> when</c><01:29:01.600><c> we're</c><01:29:01.760><c> not</c>

01:29:01.830 --> 01:29:01.840 align:start position:0%
and so the only time when we're not
 

01:29:01.840 --> 01:29:03.189 align:start position:0%
and so the only time when we're not
doing<01:29:02.000><c> a</c><01:29:02.080><c> fork</c><01:29:02.400><c> is</c><01:29:02.560><c> for</c><01:29:02.639><c> the</c><01:29:02.719><c> very</c><01:29:02.960><c> first</c>

01:29:03.189 --> 01:29:03.199 align:start position:0%
doing a fork is for the very first
 

01:29:03.199 --> 01:29:04.229 align:start position:0%
doing a fork is for the very first
process<01:29:03.600><c> where</c>

01:29:04.229 --> 01:29:04.239 align:start position:0%
process where
 

01:29:04.239 --> 01:29:07.350 align:start position:0%
process where
it's<01:29:04.560><c> like</c><01:29:04.800><c> explicitly</c><01:29:05.360><c> deceptive</c><01:29:05.840><c> oh</c><01:29:07.199><c> a</c>

01:29:07.350 --> 01:29:07.360 align:start position:0%
it's like explicitly deceptive oh a
 

01:29:07.360 --> 01:29:09.030 align:start position:0%
it's like explicitly deceptive oh a
stack<01:29:07.679><c> pointer</c><01:29:08.000><c> oh</c><01:29:08.159><c> yeah</c><01:29:08.400><c> also</c><01:29:08.639><c> needs</c><01:29:08.800><c> to</c><01:29:08.960><c> be</c>

01:29:09.030 --> 01:29:09.040 align:start position:0%
stack pointer oh yeah also needs to be
 

01:29:09.040 --> 01:29:11.189 align:start position:0%
stack pointer oh yeah also needs to be
set<01:29:09.280><c> up</c>

01:29:11.189 --> 01:29:11.199 align:start position:0%
set up
 

01:29:11.199 --> 01:29:13.350 align:start position:0%
set up
oh<01:29:11.440><c> yeah</c><01:29:11.760><c> because</c><01:29:11.920><c> it's</c><01:29:12.239><c> that's</c><01:29:12.560><c> epc</c><01:29:13.120><c> that's</c>

01:29:13.350 --> 01:29:13.360 align:start position:0%
oh yeah because it's that's epc that's
 

01:29:13.360 --> 01:29:14.950 align:start position:0%
oh yeah because it's that's epc that's
not<01:29:13.600><c> pc</c><01:29:14.080><c> that's</c><01:29:14.320><c> the</c><01:29:14.400><c> one</c><01:29:14.560><c> that's</c><01:29:14.800><c> going</c><01:29:14.880><c> to</c>

01:29:14.950 --> 01:29:14.960 align:start position:0%
not pc that's the one that's going to
 

01:29:14.960 --> 01:29:16.629 align:start position:0%
not pc that's the one that's going to
get<01:29:15.199><c> swapped</c><01:29:15.600><c> by</c><01:29:15.760><c> the</c><01:29:16.080><c> trap</c>

01:29:16.629 --> 01:29:16.639 align:start position:0%
get swapped by the trap
 

01:29:16.639 --> 01:29:21.750 align:start position:0%
get swapped by the trap
trampoline<01:29:17.760><c> yes</c><01:29:19.600><c> oh</c><01:29:20.000><c> i</c><01:29:20.159><c> see</c>

01:29:21.750 --> 01:29:21.760 align:start position:0%
trampoline yes oh i see
 

01:29:21.760 --> 01:29:23.270 align:start position:0%
trampoline yes oh i see
because<01:29:21.920><c> the</c><01:29:22.080><c> real</c><01:29:22.400><c> pc</c><01:29:22.719><c> is</c><01:29:22.880><c> actually</c><01:29:23.120><c> going</c><01:29:23.199><c> to</c>

01:29:23.270 --> 01:29:23.280 align:start position:0%
because the real pc is actually going to
 

01:29:23.280 --> 01:29:25.910 align:start position:0%
because the real pc is actually going to
be<01:29:23.520><c> in</c><01:29:23.760><c> trap</c><01:29:24.239><c> like</c><01:29:24.480><c> inside</c><01:29:24.880><c> traveling</c>

01:29:25.910 --> 01:29:25.920 align:start position:0%
be in trap like inside traveling
 

01:29:25.920 --> 01:29:27.270 align:start position:0%
be in trap like inside traveling
but<01:29:26.159><c> then</c><01:29:26.320><c> we're</c><01:29:26.560><c> going</c><01:29:26.639><c> to</c><01:29:26.719><c> switch</c><01:29:27.040><c> it</c><01:29:27.120><c> to</c>

01:29:27.270 --> 01:29:27.280 align:start position:0%
but then we're going to switch it to
 

01:29:27.280 --> 01:29:29.270 align:start position:0%
but then we're going to switch it to
jump<01:29:27.679><c> to</c><01:29:27.840><c> there</c>

01:29:29.270 --> 01:29:29.280 align:start position:0%
jump to there
 

01:29:29.280 --> 01:29:32.790 align:start position:0%
jump to there
yeah<01:29:29.840><c> interesting</c>

01:29:32.790 --> 01:29:32.800 align:start position:0%
 
 

01:29:32.800 --> 01:29:34.790 align:start position:0%
 
uh<01:29:33.120><c> can</c><01:29:33.280><c> i</c><01:29:33.360><c> just</c><01:29:33.600><c> ask</c><01:29:33.920><c> like</c><01:29:34.159><c> can</c><01:29:34.320><c> you</c><01:29:34.400><c> go</c><01:29:34.560><c> back</c>

01:29:34.790 --> 01:29:34.800 align:start position:0%
uh can i just ask like can you go back
 

01:29:34.800 --> 01:29:42.870 align:start position:0%
uh can i just ask like can you go back
to<01:29:35.040><c> the</c><01:29:35.520><c> alloc</c><01:29:36.840><c> proc</c>

01:29:42.870 --> 01:29:42.880 align:start position:0%
 
 

01:29:42.880 --> 01:29:46.790 align:start position:0%
 
um<01:29:44.080><c> i</c><01:29:44.239><c> think</c><01:29:44.480><c> there's</c><01:29:44.800><c> a</c><01:29:45.840><c> oh</c><01:29:46.080><c> no</c><01:29:46.320><c> sorry</c>

01:29:46.790 --> 01:29:46.800 align:start position:0%
um i think there's a oh no sorry
 

01:29:46.800 --> 01:29:49.510 align:start position:0%
um i think there's a oh no sorry
uh<01:29:47.040><c> four</c><01:29:47.199><c> cred</c><01:29:48.000><c> uh</c><01:29:48.239><c> there's</c><01:29:48.480><c> something</c><01:29:49.280><c> there</c>

01:29:49.510 --> 01:29:49.520 align:start position:0%
uh four cred uh there's something there
 

01:29:49.520 --> 01:29:51.910 align:start position:0%
uh four cred uh there's something there
that<01:29:49.760><c> happens</c><01:29:50.159><c> i</c><01:29:50.239><c> think</c><01:29:50.480><c> for</c><01:29:50.639><c> the</c><01:29:50.840><c> first</c>

01:29:51.910 --> 01:29:51.920 align:start position:0%
that happens i think for the first
 

01:29:51.920 --> 01:29:53.910 align:start position:0%
that happens i think for the first
process<01:29:52.400><c> only</c>

01:29:53.910 --> 01:29:53.920 align:start position:0%
process only
 

01:29:53.920 --> 01:29:57.189 align:start position:0%
process only
uh<01:29:54.320><c> what's</c><01:29:54.560><c> this</c><01:29:55.199><c> for</c><01:29:55.520><c> a</c><01:29:55.840><c> first</c><01:29:56.400><c> call</c>

01:29:57.189 --> 01:29:57.199 align:start position:0%
uh what's this for a first call
 

01:29:57.199 --> 01:29:59.110 align:start position:0%
uh what's this for a first call
i<01:29:57.360><c> wasn't</c><01:29:57.600><c> really</c><01:29:57.760><c> sure</c><01:29:58.000><c> what</c><01:29:58.239><c> happened</c><01:29:58.960><c> let's</c>

01:29:59.110 --> 01:29:59.120 align:start position:0%
i wasn't really sure what happened let's
 

01:29:59.120 --> 01:30:01.430 align:start position:0%
i wasn't really sure what happened let's
see<01:29:59.360><c> the</c><01:29:59.520><c> file</c><01:29:59.840><c> system</c>

01:30:01.430 --> 01:30:01.440 align:start position:0%
see the file system
 

01:30:01.440 --> 01:30:03.510 align:start position:0%
see the file system
the<01:30:01.600><c> file</c><01:30:01.920><c> system</c><01:30:02.480><c> needs</c><01:30:02.719><c> to</c><01:30:02.800><c> be</c><01:30:02.880><c> initialized</c>

01:30:03.510 --> 01:30:03.520 align:start position:0%
the file system needs to be initialized
 

01:30:03.520 --> 01:30:05.590 align:start position:0%
the file system needs to be initialized
and<01:30:03.760><c> in</c><01:30:03.920><c> particular</c><01:30:04.480><c> some</c><01:30:04.719><c> stuff</c><01:30:05.120><c> needs</c><01:30:05.360><c> to</c><01:30:05.440><c> be</c>

01:30:05.590 --> 01:30:05.600 align:start position:0%
and in particular some stuff needs to be
 

01:30:05.600 --> 01:30:07.110 align:start position:0%
and in particular some stuff needs to be
read<01:30:05.920><c> off</c><01:30:06.159><c> the</c><01:30:06.320><c> disk</c>

01:30:07.110 --> 01:30:07.120 align:start position:0%
read off the disk
 

01:30:07.120 --> 01:30:10.629 align:start position:0%
read off the disk
in<01:30:07.199><c> order</c><01:30:07.440><c> to</c><01:30:07.520><c> get</c><01:30:07.679><c> the</c><01:30:07.760><c> file</c><01:30:08.080><c> system</c><01:30:08.400><c> going</c><01:30:09.440><c> um</c>

01:30:10.629 --> 01:30:10.639 align:start position:0%
in order to get the file system going um
 

01:30:10.639 --> 01:30:12.229 align:start position:0%
in order to get the file system going um
like<01:30:10.800><c> the</c><01:30:11.360><c> there's</c><01:30:11.600><c> this</c><01:30:11.760><c> thing</c><01:30:11.920><c> called</c><01:30:12.159><c> the</c>

01:30:12.229 --> 01:30:12.239 align:start position:0%
like the there's this thing called the
 

01:30:12.239 --> 01:30:14.149 align:start position:0%
like the there's this thing called the
super<01:30:12.560><c> block</c><01:30:12.880><c> which</c><01:30:13.120><c> describes</c><01:30:13.679><c> like</c><01:30:13.840><c> how</c><01:30:14.000><c> big</c>

01:30:14.149 --> 01:30:14.159 align:start position:0%
super block which describes like how big
 

01:30:14.159 --> 01:30:15.830 align:start position:0%
super block which describes like how big
the<01:30:14.320><c> file</c><01:30:14.560><c> system</c><01:30:14.960><c> are</c><01:30:15.199><c> is</c><01:30:15.440><c> and</c><01:30:15.520><c> where</c><01:30:15.679><c> the</c>

01:30:15.830 --> 01:30:15.840 align:start position:0%
the file system are is and where the
 

01:30:15.840 --> 01:30:17.510 align:start position:0%
the file system are is and where the
various<01:30:16.239><c> things</c><01:30:16.480><c> are</c><01:30:16.639><c> in</c><01:30:16.719><c> the</c><01:30:16.800><c> file</c><01:30:17.040><c> system</c>

01:30:17.510 --> 01:30:17.520 align:start position:0%
various things are in the file system
 

01:30:17.520 --> 01:30:18.629 align:start position:0%
various things are in the file system
and<01:30:17.600><c> there's</c><01:30:17.840><c> also</c><01:30:18.159><c> a</c>

01:30:18.629 --> 01:30:18.639 align:start position:0%
and there's also a
 

01:30:18.639 --> 01:30:21.189 align:start position:0%
and there's also a
crash<01:30:18.960><c> recovery</c><01:30:19.520><c> log</c><01:30:19.840><c> that</c><01:30:20.000><c> needs</c><01:30:20.239><c> to</c><01:30:20.320><c> be</c>

01:30:21.189 --> 01:30:21.199 align:start position:0%
crash recovery log that needs to be
 

01:30:21.199 --> 01:30:22.149 align:start position:0%
crash recovery log that needs to be
replayed

01:30:22.149 --> 01:30:22.159 align:start position:0%
replayed
 

01:30:22.159 --> 01:30:25.510 align:start position:0%
replayed
in<01:30:22.320><c> order</c><01:30:22.639><c> to</c><01:30:24.080><c> recover</c><01:30:24.480><c> from</c><01:30:24.960><c> a</c><01:30:25.120><c> previous</c>

01:30:25.510 --> 01:30:25.520 align:start position:0%
in order to recover from a previous
 

01:30:25.520 --> 01:30:28.149 align:start position:0%
in order to recover from a previous
crash<01:30:25.920><c> if</c><01:30:26.000><c> there</c><01:30:26.080><c> was</c><01:30:26.320><c> one</c>

01:30:28.149 --> 01:30:28.159 align:start position:0%
crash if there was one
 

01:30:28.159 --> 01:30:30.629 align:start position:0%
crash if there was one
but<01:30:28.960><c> in</c><01:30:29.120><c> order</c><01:30:29.440><c> to</c><01:30:29.760><c> do</c><01:30:30.000><c> anything</c><01:30:30.239><c> in</c><01:30:30.320><c> the</c><01:30:30.400><c> file</c>

01:30:30.629 --> 01:30:30.639 align:start position:0%
but in order to do anything in the file
 

01:30:30.639 --> 01:30:32.390 align:start position:0%
but in order to do anything in the file
system<01:30:30.960><c> you</c><01:30:31.040><c> need</c><01:30:31.199><c> to</c><01:30:31.280><c> be</c><01:30:31.440><c> able</c><01:30:31.600><c> to</c><01:30:31.760><c> wait</c>

01:30:32.390 --> 01:30:32.400 align:start position:0%
system you need to be able to wait
 

01:30:32.400 --> 01:30:35.270 align:start position:0%
system you need to be able to wait
for<01:30:33.120><c> disk</c><01:30:33.760><c> operations</c><01:30:34.320><c> to</c><01:30:34.400><c> complete</c><01:30:34.960><c> but</c><01:30:35.199><c> the</c>

01:30:35.270 --> 01:30:35.280 align:start position:0%
for disk operations to complete but the
 

01:30:35.280 --> 01:30:37.110 align:start position:0%
for disk operations to complete but the
way<01:30:35.520><c> xv6</c><01:30:36.159><c> works</c>

01:30:37.110 --> 01:30:37.120 align:start position:0%
way xv6 works
 

01:30:37.120 --> 01:30:38.790 align:start position:0%
way xv6 works
you<01:30:37.280><c> really</c><01:30:37.520><c> can</c><01:30:37.760><c> only</c><01:30:38.080><c> execute</c><01:30:38.480><c> the</c><01:30:38.560><c> file</c>

01:30:38.790 --> 01:30:38.800 align:start position:0%
you really can only execute the file
 

01:30:38.800 --> 01:30:42.950 align:start position:0%
you really can only execute the file
system<01:30:39.120><c> code</c><01:30:39.520><c> in</c><01:30:39.600><c> the</c><01:30:39.760><c> context</c><01:30:40.239><c> of</c><01:30:40.400><c> a</c><01:30:40.480><c> process</c>

01:30:42.950 --> 01:30:42.960 align:start position:0%
system code in the context of a process
 

01:30:42.960 --> 01:30:45.669 align:start position:0%
system code in the context of a process
in<01:30:43.120><c> order</c><01:30:43.360><c> to</c><01:30:43.679><c> like</c><01:30:43.840><c> wait</c><01:30:44.080><c> for</c><01:30:44.239><c> i</c><01:30:44.480><c> o</c><01:30:45.360><c> and</c><01:30:45.520><c> so</c>

01:30:45.669 --> 01:30:45.679 align:start position:0%
in order to like wait for i o and so
 

01:30:45.679 --> 01:30:46.709 align:start position:0%
in order to like wait for i o and so
therefore<01:30:46.159><c> the</c>

01:30:46.709 --> 01:30:46.719 align:start position:0%
therefore the
 

01:30:46.719 --> 01:30:48.470 align:start position:0%
therefore the
initialization<01:30:47.520><c> of</c><01:30:47.600><c> the</c><01:30:47.679><c> file</c><01:30:47.920><c> system</c><01:30:48.239><c> has</c><01:30:48.400><c> to</c>

01:30:48.470 --> 01:30:48.480 align:start position:0%
initialization of the file system has to
 

01:30:48.480 --> 01:30:50.470 align:start position:0%
initialization of the file system has to
be<01:30:48.639><c> deferred</c><01:30:49.280><c> until</c><01:30:49.520><c> we</c><01:30:49.760><c> the</c><01:30:49.920><c> first</c><01:30:50.159><c> time</c><01:30:50.320><c> we</c>

01:30:50.470 --> 01:30:50.480 align:start position:0%
be deferred until we the first time we
 

01:30:50.480 --> 01:30:53.110 align:start position:0%
be deferred until we the first time we
have<01:30:50.639><c> a</c><01:30:50.719><c> process</c><01:30:51.199><c> running</c>

01:30:53.110 --> 01:30:53.120 align:start position:0%
have a process running
 

01:30:53.120 --> 01:30:55.590 align:start position:0%
have a process running
and<01:30:54.000><c> that</c><01:30:54.159><c> occurs</c><01:30:54.639><c> in</c><01:30:54.719><c> this</c><01:30:54.960><c> very</c><01:30:55.280><c> first</c>

01:30:55.590 --> 01:30:55.600 align:start position:0%
and that occurs in this very first
 

01:30:55.600 --> 01:31:00.390 align:start position:0%
and that occurs in this very first
process<01:30:56.080><c> in</c><01:30:56.239><c> fork</c><01:30:56.560><c> read</c>

01:31:00.390 --> 01:31:00.400 align:start position:0%
 
 

01:31:00.400 --> 01:31:02.709 align:start position:0%
 
i<01:31:00.639><c> see</c><01:31:01.520><c> and</c><01:31:01.679><c> i'm</c><01:31:01.840><c> guessing</c><01:31:02.159><c> we'll</c><01:31:02.320><c> learn</c><01:31:02.560><c> more</c>

01:31:02.709 --> 01:31:02.719 align:start position:0%
i see and i'm guessing we'll learn more
 

01:31:02.719 --> 01:31:03.990 align:start position:0%
i see and i'm guessing we'll learn more
about<01:31:02.960><c> this</c><01:31:03.360><c> uh</c>

01:31:03.990 --> 01:31:04.000 align:start position:0%
about this uh
 

01:31:04.000 --> 01:31:07.350 align:start position:0%
about this uh
later<01:31:05.360><c> yeah</c><01:31:06.000><c> not</c><01:31:06.239><c> about</c><01:31:06.400><c> this</c><01:31:06.560><c> horrible</c>

01:31:07.350 --> 01:31:07.360 align:start position:0%
later yeah not about this horrible
 

01:31:07.360 --> 01:31:10.950 align:start position:0%
later yeah not about this horrible
but<01:31:07.600><c> about</c><01:31:07.920><c> uh</c><01:31:08.239><c> how</c><01:31:08.480><c> file</c><01:31:08.719><c> systems</c><01:31:09.040><c> work</c>

01:31:10.950 --> 01:31:10.960 align:start position:0%
but about uh how file systems work
 

01:31:10.960 --> 01:31:13.350 align:start position:0%
but about uh how file systems work
all<01:31:11.120><c> right</c><01:31:12.000><c> okay</c><01:31:12.320><c> well</c><01:31:12.560><c> thank</c><01:31:12.719><c> you</c><01:31:12.960><c> i'm</c><01:31:13.120><c> sorry</c>

01:31:13.350 --> 01:31:13.360 align:start position:0%
all right okay well thank you i'm sorry
 

01:31:13.360 --> 01:31:21.830 align:start position:0%
all right okay well thank you i'm sorry
for<01:31:13.520><c> holding</c><01:31:13.840><c> off</c><01:31:13.920><c> the</c><01:31:14.840><c> oh</c>

01:31:21.830 --> 01:31:21.840 align:start position:0%
 
 

01:31:21.840 --> 01:31:23.350 align:start position:0%
 
sorry<01:31:22.159><c> is</c><01:31:22.320><c> that</c><01:31:22.400><c> going</c><01:31:22.560><c> to</c><01:31:22.639><c> be</c><01:31:22.800><c> the</c><01:31:23.040><c> in</c><01:31:23.199><c> that</c>

01:31:23.350 --> 01:31:23.360 align:start position:0%
sorry is that going to be the in that
 

01:31:23.360 --> 01:31:25.270 align:start position:0%
sorry is that going to be the in that
process<01:31:23.840><c> when</c><01:31:24.159><c> this</c><01:31:24.719><c> thing</c>

01:31:25.270 --> 01:31:25.280 align:start position:0%
process when this thing
 

01:31:25.280 --> 01:31:28.320 align:start position:0%
process when this thing
is<01:31:25.520><c> executed</c>

