1
00:00:00,450 --> 00:00:03,000
0,480 480,660 660,1260 1650,2400 2400,2550
Okay, good afternoon, wherever you

2
00:00:03,000 --> 00:00:03,920
0,390
are.

3
00:00:04,070 --> 00:00:05,690
0,480 480,720 720,1080 1080,1230 1230,1620
Um, can everybody hear me

4
00:00:05,780 --> 00:00:07,840
0,420 450,780 780,1200 1230,1800
quick sound check mature.

5
00:00:09,580 --> 00:00:11,200
0,210 240,420 420,810 960,1410 1410,1620
Yeah you're fine good, thank

6
00:00:11,200 --> 00:00:13,990
0,240 690,1260 1290,1770 1770,2130 2130,2790
you you so today we're

7
00:00:14,200 --> 00:00:15,670
0,510 510,570 570,840 840,1440 1440,1470
going to talk about I

8
00:00:15,670 --> 00:00:16,900
0,240 240,450 450,720 720,750 750,1230
don't really have a specific

9
00:00:16,900 --> 00:00:18,820
0,600 600,750 750,1500 1500,1620 1620,1920
agenda but basically the plan

10
00:00:18,820 --> 00:00:20,590
0,180 180,690 930,1320 1320,1410 1410,1770
is to try to answer

11
00:00:20,590 --> 00:00:23,140
0,660 720,1890 1890,2010 2010,2220 2220,2550
questions zat you might have

12
00:00:23,140 --> 00:00:24,760
0,420 420,630 630,1320 1320,1560 1560,1620
about these last lap or

13
00:00:24,760 --> 00:00:25,800
0,90 90,450 450,930
the previous labs.

14
00:00:26,330 --> 00:00:27,920
0,510 780,1080 1080,1170 1170,1470 1470,1590
Um, so the approach I'm

15
00:00:27,920 --> 00:00:30,080
0,120 120,180 180,660 990,1500 1500,2160
going to take a today.

16
00:00:30,420 --> 00:00:32,250
0,600 600,720 720,1020 1020,1590 1590,1830
Is I'm gonna walk through

17
00:00:32,250 --> 00:00:33,880
0,390 390,720 720,1470
the staff solutions.

18
00:00:34,620 --> 00:00:37,260
0,720 1050,1650 1650,1830 1830,1980 1980,2640
A particularly my own solutions,

19
00:00:37,710 --> 00:00:39,900
0,630 750,1470 1470,1560 1560,1920 1920,2190
I'm going to discuss them

20
00:00:40,050 --> 00:00:41,610
0,360 360,900 900,1110 1110,1380 1380,1560
and hopefully as we go

21
00:00:41,610 --> 00:00:43,120
0,120 120,210 210,480 480,1170
through the staff solutions.

22
00:00:43,180 --> 00:00:45,400
0,720 720,1350 1350,1710 1740,2010 2010,2220
Um, you can jump in

23
00:00:45,400 --> 00:00:46,390
0,210 210,450 450,690 690,930 930,990
if I don't answer a

24
00:00:46,390 --> 00:00:49,750
0,330 330,900 1140,2190 2190,2880 2910,3360
particular question, um or um,

25
00:00:49,780 --> 00:00:50,830
0,270 270,330 330,510 510,660 660,1050
wait a little bit because

26
00:00:50,830 --> 00:00:52,210
0,360 390,540 540,720 720,840 840,1380
I put all the questions

27
00:00:52,210 --> 00:00:53,830
0,360 360,540 540,1020 1170,1470 1470,1620
that you've asked at least

28
00:00:53,830 --> 00:00:55,630
0,450 480,810 810,1110 1110,1260 1260,1800
before eleven am this morning,

29
00:00:55,750 --> 00:00:57,520
0,810 810,1080 1080,1230 1230,1530 1530,1770
a in the lecture notes

30
00:00:57,520 --> 00:00:59,230
0,60 60,120 120,540 570,1050 1290,1710
at the bottom and we'll

31
00:00:59,260 --> 00:01:00,070
0,210 210,300 300,420 420,570 570,810
try to go through that.

32
00:01:03,240 --> 00:01:05,190
0,120 120,240 240,930 990,1620 1620,1950
I'm gonna start a with

33
00:01:05,190 --> 00:01:07,480
0,420 960,1260 1260,1650 1650,2100
the page table APP.

34
00:01:07,750 --> 00:01:09,220
0,270 270,600 600,990 990,1230 1230,1470
Because most questions were about

35
00:01:09,220 --> 00:01:11,350
0,60 60,300 300,570 570,1140 1530,2130
the page table lap, um.

36
00:01:11,800 --> 00:01:13,480
0,390 390,870 870,1140 1140,1500 1500,1680
And partly because Germany was

37
00:01:13,480 --> 00:01:14,780
0,300 300,660 660,1110
the hardest laughs.

38
00:01:15,450 --> 00:01:17,430
0,630 1080,1320 1320,1470 1470,1860 1860,1980
Um, and so maybe a

39
00:01:17,430 --> 00:01:19,830
0,270 270,360 360,900 900,1860 1890,2400
couple of comments before diving

40
00:01:19,830 --> 00:01:21,840
0,420 450,570 570,1650 1680,1920 1920,2010
into the technical part of

41
00:01:21,840 --> 00:01:23,460
0,390 720,1200 1230,1470 1470,1590 1590,1620
this, um, let's talk a

42
00:01:23,460 --> 00:01:25,110
0,210 210,330 330,870 1170,1530 1530,1650
little bit about um, the

43
00:01:25,110 --> 00:01:26,520
0,300 300,420 420,690 690,780 780,1410
PhD of life in general.

44
00:01:27,940 --> 00:01:28,780
0,540
I'm.

45
00:01:30,380 --> 00:01:32,120
0,660 1110,1260 1260,1500 1500,1620 1620,1740
And you know as you

46
00:01:32,120 --> 00:01:33,650
0,300 300,930 930,1020 1020,1290 1290,1530
probably observed, you know it's

47
00:01:33,650 --> 00:01:34,520
0,210 210,270 270,540 540,810 810,870
actually a few lines of

48
00:01:34,520 --> 00:01:35,320
0,570
code.

49
00:01:39,920 --> 00:01:41,660
0,720 1260,1350 1350,1590 1590,1650 1650,1740
Um, in terms of the

50
00:01:41,660 --> 00:01:44,360
0,690 780,1230 1230,1740 1920,2460 2460,2700
solution, um, but, um it

51
00:01:44,360 --> 00:01:46,280
0,600 600,1170 1170,1290 1290,1530 1530,1920
unfortunately has you know Arctic

52
00:01:46,280 --> 00:01:46,980
0,480
bug.

53
00:01:51,330 --> 00:01:52,180
0,660
Problems.

54
00:01:55,160 --> 00:01:58,730
0,660 810,930 930,1020 1020,1560 3210,3570
And you know there's one

55
00:01:58,730 --> 00:02:00,860
0,510 510,930 930,1260 1260,1770 1770,2130
reason is that when actually

56
00:02:00,860 --> 00:02:02,540
0,270 270,510 510,870 990,1560 1560,1680
box shows up, um, you

57
00:02:02,540 --> 00:02:04,580
0,60 60,240 240,750 750,1290 1470,2040
know the outcomes are pretty

58
00:02:04,580 --> 00:02:05,900
0,570 630,900 900,990 990,1050 1050,1320
extreme like in the worst

59
00:02:05,900 --> 00:02:07,670
0,660 900,1350 1350,1530 1530,1650 1650,1770
case probably some of you

60
00:02:07,670 --> 00:02:09,500
0,540 540,930 1020,1260 1260,1440 1440,1830
observed that the worst case

61
00:02:09,710 --> 00:02:10,700
0,690
a.

62
00:02:10,790 --> 00:02:12,920
0,600 600,1260 1260,1530 1530,1770 1770,2130
Commuter stops or xc six

63
00:02:12,920 --> 00:02:14,450
0,570 570,810 810,990 990,1320 1320,1530
stops there's no output being

64
00:02:14,450 --> 00:02:16,820
0,300 300,930 1050,1830 1830,2160 2160,2370
printed anymore, um, and that's

65
00:02:16,820 --> 00:02:18,620
0,270 570,630 630,1440 1440,1620 1620,1800
it, you know it's your

66
00:02:18,620 --> 00:02:20,150
0,360 360,720 720,1020 1020,1230 1230,1530
job to figure out actually

67
00:02:20,150 --> 00:02:21,860
0,180 180,390 390,780 1320,1470 1500,1710
what went wrong, in a

68
00:02:21,860 --> 00:02:23,360
0,150 150,210 210,450 450,1020 1020,1500
in the best case you

69
00:02:23,360 --> 00:02:24,620
0,150 150,300 300,360 360,750 750,1260
get sort of kernel panic.

70
00:02:25,020 --> 00:02:27,060
0,720 750,1260 1260,1470 1470,1650 1650,2040
A depending you know maybe

71
00:02:27,060 --> 00:02:28,470
0,210 210,240 240,690 690,1200 1200,1410
just a starting point or

72
00:02:28,470 --> 00:02:29,760
0,150 150,570 570,960 960,1140 1140,1290
for tracking down what the

73
00:02:29,760 --> 00:02:31,200
0,570 570,900 900,960 960,1050 1050,1440
actual source of the problem

74
00:02:31,200 --> 00:02:32,860
0,240 420,720 720,1320
is panic itself.

75
00:02:32,960 --> 00:02:34,130
0,150 150,540 540,840 840,900 900,1170
It's probably related to something

76
00:02:34,130 --> 00:02:35,330
0,390 390,480 480,570 570,1020 1020,1200
else, so the invariant that

77
00:02:35,330 --> 00:02:37,250
0,90 90,360 360,510 510,1080 1170,1920
the colonel got broken but

78
00:02:37,250 --> 00:02:38,600
0,120 120,210 210,570 570,780 780,1350
you know somewhere out earlier

79
00:02:38,600 --> 00:02:39,380
0,270 270,420 420,540 540,660 660,780
probably when you set up

80
00:02:39,380 --> 00:02:40,460
0,60 60,330 330,810 810,990 990,1080
the page tables, you did

81
00:02:40,460 --> 00:02:41,810
0,360 360,750 750,840 840,1110 1110,1350
something wrong at the end

82
00:02:41,810 --> 00:02:43,580
0,420 570,1080 1080,1170 1170,1350 1350,1770
cost pennies to go off

83
00:02:43,730 --> 00:02:45,050
0,270 270,360 360,480 480,750 750,1320
you have to track down

84
00:02:45,230 --> 00:02:46,360
0,390 390,630 630,900
what's going on.

85
00:02:46,840 --> 00:02:48,820
0,510 750,1350 1380,1710 1710,1920 1920,1980
Um, so fewer lines of

86
00:02:48,820 --> 00:02:50,710
0,510 540,780 780,840 840,1110 1110,1890
code hard to debug problems.

87
00:02:50,890 --> 00:02:52,690
0,450 450,990 1110,1470 1470,1530 1530,1800
Um in produce a harsh

88
00:02:52,690 --> 00:02:55,980
0,750 1230,1980 2070,2490 2490,3030
environment, a two bucket.

89
00:02:56,360 --> 00:02:57,470
0,390 390,630 630,720 720,870 870,1110
Um, if you do in

90
00:02:57,470 --> 00:02:59,420
0,60 60,420 420,990 990,1440 1680,1950
the kernel debugging or kernel

91
00:02:59,420 --> 00:03:01,760
0,600 600,1110 1110,1530 1530,2070 2070,2340
programming used programming environment, urban

92
00:03:01,760 --> 00:03:03,890
0,720 840,1440 1440,1590 1590,1950 1980,2130
environment, a is more you

93
00:03:03,890 --> 00:03:06,170
0,300 300,810 1560,1680 1680,2010 2010,2280
know unforgiven as Robert mentioned

94
00:03:06,170 --> 00:03:07,550
0,90 90,180 180,600 780,1170 1170,1380
in the first lecture is

95
00:03:07,550 --> 00:03:08,660
0,210 210,270 270,360 360,600 600,1110
one of the hard parts.

96
00:03:08,890 --> 00:03:10,780
0,480 480,870 870,1050 1050,1350 1350,1890
About basically doing kernel programming.

97
00:03:11,680 --> 00:03:12,520
0,540
I'm.

98
00:03:12,900 --> 00:03:15,750
0,390 720,1020 1020,1410 1410,1830 2580,2850
And that's you know just

99
00:03:15,750 --> 00:03:16,920
0,60 60,360 360,570 570,720 720,1170
to make me feel better,

100
00:03:16,920 --> 00:03:17,760
0,180 180,240 240,450 450,630 630,840
this is not just hard

101
00:03:17,760 --> 00:03:18,810
0,60 60,360 360,480 480,630 630,1050
for you, you know sexual

102
00:03:18,810 --> 00:03:20,000
0,300 300,390 390,480 480,1020
hard for your staff.

103
00:03:24,600 --> 00:03:25,800
0,540 540,600 600,840 840,900 900,1200
Both in terms of helping

104
00:03:25,800 --> 00:03:27,420
0,420 420,990 990,1410 1410,1500 1500,1620
you and actually you know

105
00:03:27,420 --> 00:03:28,530
0,270 270,390 390,570 570,930 930,1110
we do these labs and

106
00:03:28,530 --> 00:03:29,910
0,120 120,270 270,600 600,1140 1320,1380
we make similar problems, you

107
00:03:29,910 --> 00:03:30,990
0,210 210,480 510,810 810,900 900,1080
know we probably have more

108
00:03:30,990 --> 00:03:32,520
0,480 480,570 570,870 870,1140 1140,1530
experience and tracking bugs down,

109
00:03:32,760 --> 00:03:34,260
0,330 330,480 480,660 660,1320 1320,1500
um, we know interesting, they

110
00:03:34,260 --> 00:03:35,180
0,120 120,360 360,660
do take time.

111
00:03:35,400 --> 00:03:36,960
0,600 660,870 870,990 990,1260 1260,1560
Um, so we're helping you,

112
00:03:36,960 --> 00:03:39,180
0,150 150,330 330,840 1170,1950
you know the um.

113
00:03:40,340 --> 00:03:41,210
0,270 270,330 330,420 420,630 630,870
Tends to be hard to

114
00:03:41,210 --> 00:03:43,130
0,330 330,780 780,1110 1110,1560 1560,1920
because there's some small fragment

115
00:03:43,130 --> 00:03:44,420
0,60 60,390 390,570 570,900 900,1290
of code, there's one detail

116
00:03:44,420 --> 00:03:46,370
0,360 360,720 720,1230 1290,1770 1770,1950
something probably wrong and they're

117
00:03:46,370 --> 00:03:47,600
0,300 300,450 450,690 690,990 990,1230
figuring out actually what little

118
00:03:47,600 --> 00:03:49,490
0,540 540,930 960,1230 1230,1560 1560,1890
detail is a it's not

119
00:03:49,490 --> 00:03:49,980
0,270
easy.

120
00:03:50,040 --> 00:03:51,300
0,360 360,450 450,930 930,1110 1110,1260
Um, of course some of

121
00:03:51,300 --> 00:03:52,560
0,180 180,510 510,690 690,870 870,1260
the problems we've seen before

122
00:03:52,560 --> 00:03:54,060
0,150 150,270 270,990 990,1110 1110,1500
and we're recognizing for example

123
00:03:54,060 --> 00:03:54,840
0,120 120,330 330,480 480,570 570,780
we didn't make the same

124
00:03:54,840 --> 00:03:57,480
0,330 330,900 990,1770 1890,2310 2310,2640
mistake ourselves but other ones

125
00:03:57,480 --> 00:03:58,830
0,330 330,780 780,900 900,1080 1080,1350
you discovered all kinds of

126
00:03:58,830 --> 00:04:00,330
0,300 300,630 630,990 990,1440 1440,1500
different ways of breaking the

127
00:04:00,330 --> 00:04:02,370
0,540 600,1110 1110,1710 1710,1830 1830,2040
colonel, um that we hadn't

128
00:04:02,370 --> 00:04:03,860
0,180 180,630
seen before.

129
00:04:03,940 --> 00:04:04,960
0,180 180,510 570,780 780,870 870,1020
Um, so this is just

130
00:04:04,960 --> 00:04:06,940
0,510 840,1350 1470,1650 1650,1830 1830,1980
heart, um I think this

131
00:04:06,940 --> 00:04:09,850
0,120 120,840 870,1350 1350,2070 2220,2910
is a our experience, um.

132
00:04:11,350 --> 00:04:13,360
0,570 570,900 900,1440 1440,1710 1710,2010
This is historically always hard

133
00:04:13,360 --> 00:04:14,660
0,240 240,630 630,1020
with virtual memory.

134
00:04:19,470 --> 00:04:21,660
0,210 210,450 450,1110 1530,1740 1740,2190
So every time the first

135
00:04:21,660 --> 00:04:23,580
0,330 330,630 630,1080 1080,1560 1560,1920
virtual memory lab comes around

136
00:04:23,580 --> 00:04:25,050
0,360 360,570 570,810 810,1170 1170,1470
either in essay one or

137
00:04:25,050 --> 00:04:27,630
0,150 150,690 690,780 780,1560 1920,2580
its predecessor in situate, a

138
00:04:27,690 --> 00:04:28,710
0,330 330,480 480,630 630,690 690,1020
it has been the case

139
00:04:28,710 --> 00:04:29,580
0,240 240,330 330,450 450,630 630,870
that you know that tends

140
00:04:29,580 --> 00:04:30,720
0,60 60,210 210,330 330,660 660,1140
to be the hardest lap.

141
00:04:31,020 --> 00:04:33,450
0,720 960,1530 1890,2130 2130,2340 2340,2430
Um, um of all the

142
00:04:33,450 --> 00:04:34,740
0,480 480,810 870,1050 1050,1170 1170,1290
laps and know for a

143
00:04:34,740 --> 00:04:35,910
0,210 210,270 270,660 660,1050 1050,1170
number of reasons, one you

144
00:04:35,910 --> 00:04:37,200
0,120 120,240 240,510 510,1170 1170,1290
know the harsh environment you

145
00:04:37,200 --> 00:04:38,910
0,180 180,570 960,1320 1320,1440 1440,1710
know the um, the books

146
00:04:38,910 --> 00:04:42,450
0,180 180,960 1200,2070 2100,2940 3210,3540
are spectacular and a partly

147
00:04:42,450 --> 00:04:43,620
0,540 540,630 630,840 840,990 990,1170
because you haven't done that

148
00:04:43,620 --> 00:04:45,300
0,180 180,480 480,900 900,1320 1320,1680
much kernel programming experience yet

149
00:04:45,300 --> 00:04:46,110
0,180 180,390 390,570 570,630 630,810
and so this is sort

150
00:04:46,110 --> 00:04:46,980
0,60 60,120 120,420 420,750 750,870
of the first lap with

151
00:04:46,980 --> 00:04:48,060
0,180 180,330 330,540 540,660 660,1080
all those things come together.

152
00:04:48,740 --> 00:04:49,580
0,180 180,390 390,540 540,630 630,840
Um, this year, we tried

153
00:04:49,580 --> 00:04:51,200
0,60 60,300 300,660 690,1350 1410,1620
to make laugh simpler, um,

154
00:04:51,200 --> 00:04:52,010
0,240 240,390 390,510 510,570 570,810
if this is a new

155
00:04:52,010 --> 00:04:53,720
0,450 480,840 840,1140 1140,1560 1560,1710
laugh a laugh, we did

156
00:04:53,720 --> 00:04:55,000
0,240 240,420 420,570 570,960
not have that lab.

157
00:04:54,980 --> 00:04:56,390
0,690 690,870 870,960 960,1320 1320,1410
A in the hopes that

158
00:04:56,390 --> 00:04:58,130
0,330 330,600 600,780 780,1470 1470,1740
actually make this introduction or

159
00:04:58,130 --> 00:04:59,660
0,120 120,600 600,1080 1080,1230 1260,1530
the transition into a virtual

160
00:04:59,660 --> 00:05:02,000
0,270 270,810 1140,1620 1620,2040 2100,2340
memory easier, um, in some

161
00:05:02,000 --> 00:05:02,630
0,210 210,240 240,420 420,540 540,630
ways I think it was

162
00:05:02,630 --> 00:05:03,920
0,540 540,630 630,780 780,1200 1200,1290
successful in other ways you

163
00:05:03,920 --> 00:05:05,540
0,120 120,240 240,420 420,810 1470,1620
know it's still hard so

164
00:05:05,540 --> 00:05:06,470
0,120 120,300 300,480 480,720 720,930
we don't really know, maybe

165
00:05:06,470 --> 00:05:07,760
0,180 180,510 510,930 930,1170 1170,1290
about the easiest way of

166
00:05:07,760 --> 00:05:10,310
0,540 750,1500 1500,1830 1830,2100 2100,2550
actually introducing virtual memory programming

167
00:05:10,310 --> 00:05:10,980
0,360
is.

168
00:05:11,170 --> 00:05:14,740
0,390 420,930 930,1560 1590,2250 2490,3570
A lab number, the lab

169
00:05:14,740 --> 00:05:16,480
0,390 390,720 720,960 960,1290 1290,1740
next week, the lazy lab

170
00:05:16,510 --> 00:05:17,470
0,150 150,420 420,480 480,780 780,960
is actually a lab that

171
00:05:17,470 --> 00:05:18,460
0,210 210,270 270,390 390,510 510,990
used to be the first

172
00:05:18,490 --> 00:05:19,900
0,570 570,840 840,1260
virtual memory lab.

173
00:05:20,180 --> 00:05:21,800
0,540 570,900 900,1350 1350,1470 1470,1620
And my suspicion is that

174
00:05:21,800 --> 00:05:23,540
0,150 150,570 1020,1260 1260,1560 1560,1740
you'll find this year, not

175
00:05:23,540 --> 00:05:25,250
0,420 630,1170 1170,1350 1350,1410 1410,1710
laugh easier than the students

176
00:05:25,250 --> 00:05:26,960
0,270 270,390 390,720 720,1050 1170,1710
found it last year because

177
00:05:26,960 --> 00:05:27,860
0,150 150,330 330,510 510,690 690,900
you now have much more

178
00:05:27,860 --> 00:05:30,340
0,600 600,1260 1470,1950 1950,2250
background in virtual memory.

179
00:05:33,100 --> 00:05:35,590
0,210 210,360 360,660 660,1410 2130,2490
Okay, so that's a name

180
00:05:35,590 --> 00:05:36,100
0,90 90,150 150,270 270,450 450,510
is a good point to

181
00:05:36,100 --> 00:05:37,420
0,330 330,450 450,960 960,1080 1080,1320
stop this was a couple

182
00:05:37,420 --> 00:05:38,440
0,150 150,390 390,660 660,750 750,1020
high level points I wanted

183
00:05:38,440 --> 00:05:40,540
0,60 60,330 330,960 960,1440 1440,2100
to make before jumping into

184
00:05:40,540 --> 00:05:42,100
0,270 300,540 540,1260 1260,1380 1380,1560
a more technical with more

185
00:05:42,100 --> 00:05:43,270
0,600 630,840 840,960 960,1050 1050,1170
details, so if you have

186
00:05:43,270 --> 00:05:44,410
0,150 150,570 570,660 660,750 750,1140
any questions is a great

187
00:05:44,440 --> 00:05:46,040
0,390 390,600 600,960 960,1500
time to ask questions.

188
00:05:51,450 --> 00:05:54,820
0,570 750,1470 1830,2310 2310,3030
Okay, um, let's um.

189
00:05:55,000 --> 00:05:56,860
0,960 990,1530 1530,1590 1590,1680 1680,1860
Quickly a you know some

190
00:05:56,860 --> 00:05:57,730
0,90 90,210 210,450 450,540 540,870
of you asked for this

191
00:05:57,760 --> 00:05:59,620
0,270 270,600 600,870 870,1380 1380,1860
a very quick review exactly

192
00:05:59,620 --> 00:06:01,630
0,540 540,630 630,1560 1590,1770 1770,2010
what you were what the

193
00:06:02,200 --> 00:06:05,140
0,420 420,780 1170,1710 2010,2400 2400,2940
setting is a and so.

194
00:06:05,720 --> 00:06:07,820
0,600 600,660 660,1050 1050,1350 1350,2100
Basically, the settings page tables.

195
00:06:11,270 --> 00:06:13,730
0,570 570,990 990,1470 1470,1860 1860,2460
And we have physical memory

196
00:06:14,090 --> 00:06:15,460
0,450 450,570 570,1080
drive year round.

197
00:06:15,570 --> 00:06:17,700
0,300 300,870 1230,1800 1800,1950 1950,2130
Red says, um, you know

198
00:06:17,700 --> 00:06:20,220
0,180 180,750 750,1380 1410,2040 2070,2520
the physical memory, a consist

199
00:06:20,220 --> 00:06:22,400
0,330 330,720 720,1200 1200,2040
of partly about devices.

200
00:06:23,920 --> 00:06:26,920
0,180 180,540 540,1140 1200,2730 2730,3000
And they live above this

201
00:06:26,920 --> 00:06:27,840
0,150 150,780
O X.

202
00:06:28,800 --> 00:06:31,080
0,270 270,540 540,1410 1500,1860 1860,2280
Zero zero zero and many

203
00:06:31,080 --> 00:06:32,180
0,210 210,930
more zeros.

204
00:06:32,460 --> 00:06:34,110
0,150 150,420 420,720 720,1140 1140,1650
And then here basically dram

205
00:06:34,110 --> 00:06:34,840
0,600
chips.

206
00:06:37,780 --> 00:06:39,370
0,510 510,780 780,990 990,1260 1260,1590
And we know that if

207
00:06:39,370 --> 00:06:40,930
0,390 390,690 690,900 900,960 960,1560
you actually push the kernel,

208
00:06:40,930 --> 00:06:42,820
0,90 90,330 330,660 660,1170 1200,1890
the kernel text data, right.

209
00:06:43,270 --> 00:06:44,920
0,1380
Yeah.

210
00:06:45,730 --> 00:06:47,770
0,450 450,840 840,1230 1230,1590 1590,2040
Both above oasis zero zero

211
00:06:47,770 --> 00:06:48,790
0,420 510,720 720,840 840,960 960,1020
zero so that's where the

212
00:06:48,790 --> 00:06:50,800
0,330 330,750 870,1530 1530,1890 1890,2010
colonel lives and one way

213
00:06:50,800 --> 00:06:52,270
0,90 90,210 210,420 930,1290 1290,1470
it may be race this

214
00:06:52,270 --> 00:06:53,440
0,60 60,240 240,540 780,930 930,1170
a little bit to use

215
00:06:53,440 --> 00:06:54,340
0,60 60,690
the kernel.

216
00:06:54,600 --> 00:06:55,830
0,330 330,420 420,480 480,870 870,1230
And you know basically literally

217
00:06:55,830 --> 00:06:56,610
0,120 120,270 270,600 600,690 690,780
what it means you know

218
00:06:56,610 --> 00:06:57,300
0,300 300,390 390,510 510,630 630,690
what to do with the

219
00:06:57,300 --> 00:06:59,140
0,480 480,630 630,960 960,1710
correlation of user instructions.

220
00:07:01,850 --> 00:07:03,590
0,540 540,1020 1020,1140 1140,1260 1260,1740
Binary versions of the assembling

221
00:07:03,590 --> 00:07:05,300
0,510 510,750 750,960 960,1140 1140,1710
structures yeah that you've seen

222
00:07:05,480 --> 00:07:07,160
0,540 600,840 840,1080 1080,1230 1230,1680
and there's also some data.

223
00:07:07,570 --> 00:07:09,970
0,600 600,1290 1410,1710 1710,1920 1920,2400
Structures located a and these

224
00:07:10,150 --> 00:07:11,180
0,810
addresses.

225
00:07:12,760 --> 00:07:14,230
0,210 210,390 390,660 660,1050 1080,1470
Okay, so that's the memory

226
00:07:14,230 --> 00:07:15,310
0,210 210,270 270,570 600,900 900,1080
part of it and then

227
00:07:15,310 --> 00:07:16,690
0,120 120,210 210,360 360,900 1050,1380
on the other side a

228
00:07:16,690 --> 00:07:18,460
0,420 420,570 570,690 690,1440
we got our CPU.

229
00:07:19,040 --> 00:07:21,890
0,210 210,630 630,1350 1920,2370 2370,2850
That executes instructions CPU, ask

230
00:07:21,890 --> 00:07:23,460
0,360 360,870 870,1350
what internal state.

231
00:07:24,140 --> 00:07:26,030
0,480 480,900 900,1050 1050,1140 1140,1890
Um, and has some registers,

232
00:07:26,030 --> 00:07:28,070
0,90 90,210 210,750 1290,1530 1530,2040
you know whatever X zero

233
00:07:28,070 --> 00:07:29,900
0,300 420,690 690,1350 1350,1650 1650,1830
or r zero blah blah

234
00:07:29,900 --> 00:07:31,970
0,600 780,1470 1470,1590 1590,1710 1710,2070
blah, and you know maybe

235
00:07:31,970 --> 00:07:33,280
0,120 120,480 480,990
the program counter.

236
00:07:33,790 --> 00:07:35,050
0,570 570,690 690,780 780,990 990,1260
And you know what actually

237
00:07:35,050 --> 00:07:36,970
0,480 480,1050 1050,1200 1200,1350 1350,1920
six starts, you know the.

238
00:07:37,580 --> 00:07:39,110
0,150 150,570 570,930 930,1350 1350,1530
A proven counter contains this

239
00:07:39,110 --> 00:07:40,580
0,450 450,690 690,870 870,1200 1200,1470
value O X zero zero

240
00:07:40,580 --> 00:07:41,700
0,270 270,900
zero zero.

241
00:07:41,900 --> 00:07:44,260
0,630 630,1320 1500,2070
Um, and um.

242
00:07:44,920 --> 00:07:46,630
0,570 570,840 840,1200 1200,1290 1290,1710
Um, and that's the way

243
00:07:46,630 --> 00:07:47,770
0,120 120,210 210,330 330,750 750,1140
you know the CPU knows

244
00:07:47,770 --> 00:07:49,240
0,150 150,660 750,1140 1140,1230 1230,1470
that basically look at that

245
00:07:49,240 --> 00:07:50,290
0,330 330,450 450,780 780,930 930,1050
address to find you know

246
00:07:50,290 --> 00:07:51,550
0,120 120,390 390,990 990,1110 1110,1260
the first instruction, it looks

247
00:07:51,550 --> 00:07:52,900
0,90 90,180 180,390 390,900 900,1350
at the first instruction decode

248
00:07:52,900 --> 00:07:55,480
0,720 930,1470 1530,1950 1950,2280 2280,2580
instruction and updates whatever you

249
00:07:55,480 --> 00:07:56,290
0,270 270,390 390,570 570,630 630,810
state that needs to be

250
00:07:56,290 --> 00:07:56,980
0,360
updated.

251
00:07:58,280 --> 00:08:00,200
0,510 540,990 990,1440 1440,1680 1680,1920
A page tables add a

252
00:08:00,200 --> 00:08:01,910
0,480 480,600 600,960 1050,1620 1620,1710
component to it that you

253
00:08:01,910 --> 00:08:02,990
0,120 120,300 300,840 840,960 960,1080
know the addresses you know

254
00:08:02,990 --> 00:08:05,280
0,240 240,960 1230,2040
the CPU a.

255
00:08:05,640 --> 00:08:08,040
0,690 990,1500 1500,1710 1710,1800 1800,2400
A other or the instructions

256
00:08:08,040 --> 00:08:09,360
0,0 0,330 330,390 390,510 510,1320
are part of the instructions

257
00:08:09,420 --> 00:08:10,440
0,300 300,360 360,540 540,900 900,1020
like you know jump to

258
00:08:10,440 --> 00:08:12,180
0,180 180,510 510,1020 1320,1470 1470,1740
some particular address and those

259
00:08:12,180 --> 00:08:13,080
0,690
addresses.

260
00:08:13,210 --> 00:08:15,310
0,420 420,1020 1020,1230 1230,1590 1590,2100
Are typically or most commonly

261
00:08:15,310 --> 00:08:17,320
0,300 300,660 660,960 990,1410 1410,2010
or will be virtual dresses.

262
00:08:17,860 --> 00:08:19,990
0,570 870,1080 1080,1230 1230,1560 1560,2130
And now there's virtual dresses

263
00:08:20,020 --> 00:08:22,420
0,270 270,390 390,720 720,1200 2280,2400
go to that fruit is

264
00:08:22,420 --> 00:08:23,660
0,210 210,270 270,570 570,990
called the um you.

265
00:08:24,160 --> 00:08:25,540
0,360 360,600 600,750 750,1230 1230,1380
And then you translate into

266
00:08:25,540 --> 00:08:26,780
0,390 390,990
physical dressers.

267
00:08:27,840 --> 00:08:30,090
0,630 630,1380 1410,1680 1680,2100 2100,2250
Um, and um that is

268
00:08:30,090 --> 00:08:32,370
0,270 270,510 510,960 960,1770 1920,2280
allowing just index into either

269
00:08:32,370 --> 00:08:33,840
0,270 270,930 930,1260 1260,1350 1350,1470
the io part of the

270
00:08:33,840 --> 00:08:35,580
0,420 420,810 810,960 960,1440 1440,1740
memory or the vm part,

271
00:08:35,580 --> 00:08:36,240
0,90 90,420
the memory.

272
00:08:37,040 --> 00:08:39,680
0,540 630,1350 1860,2400
Um, there, um.

273
00:08:40,040 --> 00:08:41,750
0,150 150,810 810,1020 1020,1200 1200,1710
To control how this translation

274
00:08:41,750 --> 00:08:43,190
0,540 540,630 630,750 750,1020 1020,1440
happens, you know there's this

275
00:08:43,190 --> 00:08:44,660
0,540 540,1200
ATP register.

276
00:08:46,570 --> 00:08:49,750
0,330 330,1110 1140,1770 1770,2400 2670,3180
Which contains a the root

277
00:08:49,750 --> 00:08:51,790
0,210 210,720 960,1440 1440,1800 1830,2040
of the page table of

278
00:08:51,790 --> 00:08:53,170
0,90 90,480 480,750 750,990 990,1380
the current running each table.

279
00:08:53,470 --> 00:08:54,840
0,150 150,270 270,450 450,1080
And if there's zero.

280
00:08:55,410 --> 00:08:57,240
0,390 390,600 600,1080 1080,1320 1320,1830
Then there's basically no translation

281
00:08:57,240 --> 00:08:59,400
0,270 270,750 930,1680 1710,1980 1980,2160
going on and um the

282
00:08:59,400 --> 00:09:01,020
0,300 300,540 540,660 660,1170 1170,1620
virtual address is literally directly

283
00:09:01,020 --> 00:09:02,130
0,60 60,360 360,750 780,930 930,1110
a physical address, so when

284
00:09:02,130 --> 00:09:03,600
0,60 60,540 540,780 780,1080 1080,1470
the processor actually starts up

285
00:09:03,870 --> 00:09:04,980
0,300 300,540 540,660 660,1020 1020,1110
a there's no value in

286
00:09:04,980 --> 00:09:06,150
0,150 150,780 780,870 870,1110 1110,1170
s ap and when the

287
00:09:06,150 --> 00:09:08,580
0,360 360,870 960,1440 1440,1590 1590,2430
program counter and at oer

288
00:09:08,580 --> 00:09:10,230
0,270 420,1020 1020,1110 1110,1410 1410,1650
h basically the physical address

289
00:09:10,230 --> 00:09:11,700
0,120 120,570 570,780 780,1200 1290,1470
is also a great and

290
00:09:11,700 --> 00:09:14,010
0,420 420,810 810,930 930,1620 1890,2310
basically dropped the CPU fetches

291
00:09:14,010 --> 00:09:15,750
0,60 60,780 870,1200 1200,1380 1380,1740
the instruction from that particular

292
00:09:15,750 --> 00:09:16,500
0,450
location.

293
00:09:17,260 --> 00:09:18,220
0,150 150,540 540,720 720,840 840,960
As soon as we get

294
00:09:18,220 --> 00:09:18,920
0,450
older.

295
00:09:19,720 --> 00:09:21,400
0,600 660,990 990,1080 1080,1320 1320,1680
As soon as the APP

296
00:09:21,400 --> 00:09:22,870
0,270 270,810 810,930 930,1170 1170,1470
actually contains a non zero

297
00:09:22,870 --> 00:09:23,680
0,600
value.

298
00:09:23,880 --> 00:09:25,890
0,810 900,1650 1650,1800 1800,1890 1890,2010
Then, um, you know, for

299
00:09:25,890 --> 00:09:28,440
0,450 450,1020 1230,1770 1920,2160 2160,2550
example maybe a so somewhere

300
00:09:28,440 --> 00:09:29,640
0,210 210,480 480,780 780,1080 1080,1200
in here to withdraw them

301
00:09:29,640 --> 00:09:30,810
0,150 150,390 390,840 840,1110 1110,1170
make something extended pictures a

302
00:09:30,810 --> 00:09:33,150
0,120 120,600 930,1590 1800,2010 2010,2340
bit further, um, we knew

303
00:09:33,150 --> 00:09:34,680
0,330 330,720 750,990 990,1290 1290,1530
that the current election as

304
00:09:34,680 --> 00:09:35,860
0,60 60,750
a maximum.

305
00:09:36,270 --> 00:09:37,920
0,720 720,1470
128 megabytes.

306
00:09:38,350 --> 00:09:39,280
0,180 180,300 300,630 630,840 840,930
And so basically this is

307
00:09:39,280 --> 00:09:41,230
0,510 510,750 750,1200 1200,1380 1380,1950
all free memory from here.

308
00:09:42,070 --> 00:09:45,070
0,780 930,1200 1200,1380 1380,2010 2490,3000
There is free memory and

309
00:09:45,070 --> 00:09:46,780
0,180 180,630 630,930 960,1320 1320,1710
free memory is a put

310
00:09:46,780 --> 00:09:48,490
0,210 210,510 540,960 960,1530 1530,1710
on the list in a

311
00:09:48,490 --> 00:09:49,540
0,360 360,570 570,810 810,930 930,1050
Catholic dot c as you've

312
00:09:49,540 --> 00:09:50,400
0,180 180,660
seen before.

313
00:09:50,940 --> 00:09:52,620
0,630 630,750 750,990 990,1500 1500,1680
And, um, so somewhere in

314
00:09:52,620 --> 00:09:54,270
0,570 720,900 900,1260 1260,1410 1410,1650
here is also the root

315
00:09:54,270 --> 00:09:56,340
0,240 240,660 690,1290 1350,1800 1800,2070
page table for a kernel

316
00:09:56,340 --> 00:09:57,720
0,240 240,570 600,870 900,1170 1170,1380
page table so maybe here's

317
00:09:57,720 --> 00:09:58,580
0,120 120,720
some page.

318
00:09:58,860 --> 00:10:00,060
0,150 150,300 300,510 510,600 600,1200
And now it's the root.

319
00:10:01,760 --> 00:10:03,760
0,360 390,930 1020,1650
A page table.

320
00:10:04,330 --> 00:10:07,540
0,840 1950,2700 2700,2940 2940,3120 3120,3210
Directory a as soon as

321
00:10:07,540 --> 00:10:08,950
0,120 120,480 480,690 690,1230 1260,1410
we load that value the

322
00:10:08,950 --> 00:10:10,750
0,810 840,1050 1050,1140 1140,1470 1470,1800
address of the physical address

323
00:10:10,750 --> 00:10:11,920
0,60 60,240 240,660 660,1050 1050,1170
of that value into the

324
00:10:11,920 --> 00:10:14,290
0,390 390,870 900,1410 1410,1950 2130,2370
ssp address and register, so

325
00:10:14,290 --> 00:10:15,730
0,180 180,450 450,900 930,1260 1260,1440
let's say this maybe this

326
00:10:15,730 --> 00:10:16,660
0,690
addresses.

327
00:10:16,780 --> 00:10:17,960
0,360 360,1020
Oh acts.

328
00:10:18,680 --> 00:10:20,360
0,660 720,870 870,1020 1020,1290 1290,1680
Seven you know F F

329
00:10:20,390 --> 00:10:22,340
0,390 390,870 870,1350 1350,1680 1680,1950
bomb lives, somebody's just below

330
00:10:22,340 --> 00:10:23,630
0,120 120,180 180,420 420,1140 1140,1290
on the twenty megabytes, so

331
00:10:23,630 --> 00:10:24,710
0,120 120,330 330,540 540,990 990,1080
in that free space of

332
00:10:24,710 --> 00:10:26,930
0,540 840,1140 1140,1380 1380,1740 1740,2220
memory below that address in

333
00:10:27,110 --> 00:10:28,400
0,240 240,1080
s ATP.

334
00:10:28,630 --> 00:10:29,600
0,720
Then.

335
00:10:31,370 --> 00:10:32,360
0,150 150,330 330,750 750,840 840,990
At that point you know

336
00:10:32,360 --> 00:10:34,010
0,300 330,750 750,1080 1080,1350 1350,1650
the process or or, um,

337
00:10:34,010 --> 00:10:36,080
0,480 630,960 960,1680 1680,1980 1980,2070
you, um, will use the

338
00:10:36,080 --> 00:10:37,280
0,180 180,450 450,870 870,990 990,1200
root page tables to actually

339
00:10:37,280 --> 00:10:39,260
0,120 120,210 210,1110 1410,1560 1560,1980
do the translation from virtual

340
00:10:39,260 --> 00:10:40,320
0,90 90,390 390,870
to physical address.

341
00:10:41,670 --> 00:10:42,720
0,600 600,690 690,810 810,960 960,1050
And you can think of

342
00:10:42,720 --> 00:10:44,880
0,330 330,780 780,1320 1320,1650 1650,2160
this, this particular whole thing

343
00:10:45,090 --> 00:10:46,470
0,240 240,360 360,630 630,720 720,1380
sort of being a single

344
00:10:46,470 --> 00:10:47,520
0,240 240,360 360,840 840,930 930,1050
sort of box you know

345
00:10:47,520 --> 00:10:49,890
0,810 840,960 960,1290 1560,1830 1830,2370
integrated you know, um together.

346
00:10:51,860 --> 00:10:52,850
0,180 180,360 360,480 480,810 810,990
And you have questions about

347
00:10:52,850 --> 00:10:55,130
0,90 90,510 510,870 870,1500 1710,2280
this high-level picture before, um.

348
00:10:56,700 --> 00:10:57,780
0,180 180,300 300,570 720,900 900,1080
Keep them going, so one

349
00:10:57,780 --> 00:10:58,860
0,90 90,180 180,390 390,690 690,1080
of the key points to

350
00:10:58,890 --> 00:11:00,000
0,390 390,630 630,720 720,870 870,1110
remember here is that the

351
00:11:00,150 --> 00:11:02,130
0,330 330,750 750,1410 1440,1800 1800,1980
page statements himself also live

352
00:11:02,130 --> 00:11:02,820
0,90 90,480
in memory.

353
00:11:08,500 --> 00:11:09,300
0,570
Okay.

354
00:11:11,090 --> 00:11:12,500
0,240 240,360 360,570 570,1170 1170,1410
Okay, so let's jump down

355
00:11:12,500 --> 00:11:13,860
0,420 420,1110
to a.

356
00:11:14,520 --> 00:11:16,680
0,690 720,870 870,1140 1140,1530 1560,2160
Um the first part of

357
00:11:16,710 --> 00:11:17,790
0,180 180,300 300,510 510,810 810,1080
a the page table APP,

358
00:11:17,790 --> 00:11:19,340
0,600 630,1260
namely a.

359
00:11:19,400 --> 00:11:21,140
0,480 480,810 810,1230 1230,1500 1500,1740
Part one where you have

360
00:11:21,140 --> 00:11:23,900
0,210 210,810 900,1650 1920,2520
to print, um the.

361
00:11:24,410 --> 00:11:26,600
0,510 540,750 750,1140 1140,1530 1530,2190
A page table for the

362
00:11:27,140 --> 00:11:30,530
0,210 210,480 510,1410 1590,2610 2640,3390
in its program and um.

363
00:11:31,140 --> 00:11:33,030
0,510 540,1080 1080,1230 1230,1380 1410,1890
And a you know explain

364
00:11:33,030 --> 00:11:34,110
0,90 90,480 480,570 570,960 960,1080
it basically in terms of

365
00:11:34,110 --> 00:11:36,480
0,360 390,990 990,1530 1530,1860 1890,2370
this figure four and figure

366
00:11:36,480 --> 00:11:37,980
0,240 240,300 300,780 780,1230
four is right here.

367
00:11:39,980 --> 00:11:42,200
0,300 300,480 480,990 1140,1890 1890,2220
Figure three four a and

368
00:11:42,200 --> 00:11:43,580
0,300 300,390 390,780 780,1020 1020,1380
this is figure four shows

369
00:11:43,580 --> 00:11:45,170
0,90 90,300 300,570 570,1050 1200,1590
the user address space just

370
00:11:45,170 --> 00:11:46,100
0,270 270,540 540,630 630,720 720,930
let's look at the user

371
00:11:46,100 --> 00:11:47,330
0,210 210,420 420,540 540,840 840,1230
address space for second people

372
00:11:47,420 --> 00:11:49,160
0,300 300,540 540,630 630,1200 1410,1740
are going to detail a

373
00:11:49,160 --> 00:11:50,090
0,150 150,270 270,510 510,600 600,930
so we have the text

374
00:11:50,090 --> 00:11:51,020
0,90 90,150 150,510 510,660 660,930
at the bottom, so this

375
00:11:51,020 --> 00:11:52,820
0,90 90,210 210,1050 1110,1680 1680,1800
is the instructions of the

376
00:11:52,820 --> 00:11:55,550
0,660 750,1230 1230,1560 1560,2190 2430,2730
program starting address zero a

377
00:11:55,550 --> 00:11:58,010
0,330 330,510 510,1260 1290,1770 1800,2460
above the instructions are data

378
00:11:58,040 --> 00:12:00,590
0,420 420,1110 1140,1650 1650,2100 2340,2550
global variables live there, um,

379
00:12:00,590 --> 00:12:01,580
0,210 210,420 420,690 690,930 930,990
then there's something called the

380
00:12:01,580 --> 00:12:03,170
0,330 330,630 630,870 870,1110 1110,1590
guard page, we'll talk about

381
00:12:03,170 --> 00:12:04,880
0,90 90,270 270,450 450,720 1020,1710
and then it's the stack

382
00:12:04,910 --> 00:12:06,530
0,180 180,750 750,990 990,1410 1410,1620
of z user program, so

383
00:12:06,590 --> 00:12:07,700
0,90 90,390 390,630 630,930 930,1110
the kernel has its own

384
00:12:07,700 --> 00:12:09,860
0,390 420,1110 1110,1380 1380,1710 1710,2160
{stack's -} a multiple stacks

385
00:12:10,190 --> 00:12:11,450
0,330 330,720 720,990 990,1140 1140,1260
a user program has its

386
00:12:11,450 --> 00:12:13,010
0,150 150,570 780,1020 1020,1320 1320,1560
own stack and buff again

387
00:12:13,010 --> 00:12:14,150
0,90 90,510 510,690 690,930 930,1140
is basically what's called heap

388
00:12:14,150 --> 00:12:16,310
0,780 870,1140 1140,1650 1770,1950 1950,2160
memory, free memory, you know

389
00:12:16,310 --> 00:12:18,260
0,120 120,480 630,1080 1080,1740
we can get more.

390
00:12:18,290 --> 00:12:20,450
0,240 240,840 1020,1260 1260,1530 1530,2160
A memory a using {espresso's

391
00:12:20,450 --> 00:12:22,490
0,210 210,690 690,1170 1170,1620 1620,2040
-} break basically points to.

392
00:12:22,990 --> 00:12:24,670
0,150 150,690 720,900 900,1230 1260,1680
The top of the user

393
00:12:24,670 --> 00:12:25,660
0,240 240,540 540,780 780,930 930,990
address space, we want to

394
00:12:25,660 --> 00:12:27,010
0,300 300,540 630,900 900,1170 1170,1350
grow it, we {called's -}

395
00:12:27,010 --> 00:12:29,740
0,240 240,510 510,990 1230,1710 1710,2730
brake system call to grow

396
00:12:29,770 --> 00:12:31,330
0,630 630,810 840,1140 1140,1230 1230,1560
grow the top of the.

397
00:12:32,410 --> 00:12:33,430
0,120 120,300 300,390 390,660 660,1020
To grow the bottom part,

398
00:12:33,430 --> 00:12:34,960
0,90 90,210 210,750 1230,1470 1470,1530
you know up into the

399
00:12:34,960 --> 00:12:36,850
0,390 870,1230 1230,1440 1440,1620 1620,1890
heap, we also know that

400
00:12:36,850 --> 00:12:37,540
0,330
the.

401
00:12:37,630 --> 00:12:39,160
0,570 600,930 930,1140 1140,1260 1260,1530
Top there from the last

402
00:12:39,160 --> 00:12:40,000
0,300 300,450 450,540 540,600 600,840
lecture that there are two

403
00:12:40,000 --> 00:12:42,460
0,600 600,750 750,1140 1140,1710 2040,2460
pages to special pages a

404
00:12:42,460 --> 00:12:44,950
0,540 540,720 720,1470 1500,2040 2040,2490
translate into transferring transferring page.

405
00:12:45,260 --> 00:12:46,520
0,210 210,270 270,750 750,1110 1110,1260
And the trampoline page now

406
00:12:46,520 --> 00:12:47,840
0,390 390,480 480,1170 1170,1230 1230,1320
contains the instructions to the

407
00:12:47,840 --> 00:12:49,040
0,330 330,840 840,960 960,1050 1050,1200
baseball transition in and out

408
00:12:49,040 --> 00:12:50,480
0,60 60,120 120,690 990,1170 1170,1440
of the kernel, the trap

409
00:12:50,480 --> 00:12:54,140
0,360 360,600 600,1620 2910,3300 3300,3660
frame is a convenient place

410
00:12:54,140 --> 00:12:55,280
0,180 180,540 540,900
near to a.

411
00:12:55,460 --> 00:12:56,960
0,390 390,510 510,1140 1140,1290 1290,1500
Stores from state and when

412
00:12:56,960 --> 00:12:59,330
0,120 120,330 330,1080 1500,1920 1950,2370
we jump into a colonel

413
00:12:59,330 --> 00:13:00,290
0,270 270,420 420,660 660,720 720,960
because we need the current

414
00:13:00,290 --> 00:13:01,730
0,240 240,570 570,1110 1110,1230 1230,1440
ones use registers, we can

415
00:13:01,730 --> 00:13:02,780
0,180 180,270 270,690 690,930 930,1050
use the registers because the

416
00:13:02,780 --> 00:13:04,070
0,270 270,510 510,870 870,1110 1110,1290
user space program still has

417
00:13:04,070 --> 00:13:05,360
0,210 600,1140
some news.

418
00:13:06,140 --> 00:13:06,890
0,150 150,300 300,420 420,600 600,750
I'm not gonna talk much

419
00:13:06,890 --> 00:13:08,270
0,240 240,720 720,1080 1080,1230 1230,1380
about transferring and trying to

420
00:13:08,270 --> 00:13:09,440
0,90 90,360 360,510 510,690 690,1170
you know live near there.

421
00:13:10,340 --> 00:13:12,620
0,570 690,1050 1050,1170 1170,1890 1890,2280
Um, OK, so here this

422
00:13:12,620 --> 00:13:14,300
0,300 300,330 330,510 510,1290 1290,1680
picture a little below, um,

423
00:13:14,300 --> 00:13:15,740
0,150 150,270 270,600 600,990 990,1440
you know is actually there.

424
00:13:16,120 --> 00:13:18,910
0,510 810,1290 1380,1890 1890,2250 2250,2790
Um, yeah printout from a

425
00:13:18,910 --> 00:13:20,680
0,420 420,570 570,750 750,1050 1380,1770
when I read it, um

426
00:13:20,680 --> 00:13:21,880
0,300 300,480 480,960
from the Internet.

427
00:13:22,420 --> 00:13:24,880
0,180 180,300 300,960 1170,2010 2010,2460
This the first successful call

428
00:13:24,880 --> 00:13:26,950
0,540 660,1230 1260,1500 1500,1680 1680,2070
off exec right so we

429
00:13:26,950 --> 00:13:27,850
0,150 150,300 300,420 420,510 510,900
know that in a code

430
00:13:27,850 --> 00:13:29,170
0,210 210,360 360,630 630,840 840,1320
makes some system called exec

431
00:13:29,410 --> 00:13:30,790
0,420 420,540 540,930 930,1080 1080,1380
for the program in it

432
00:13:30,790 --> 00:13:32,260
0,420 510,1050 1050,1170 1170,1290 1290,1470
and just at the end

433
00:13:32,260 --> 00:13:33,820
0,90 90,180 180,1080 1080,1290 1290,1560
of the exit, we're printing

434
00:13:33,820 --> 00:13:34,860
0,240 240,480 480,810
out page table.

435
00:13:35,460 --> 00:13:36,240
0,210 210,300 300,390 390,600 600,780
And so a couple things

436
00:13:36,240 --> 00:13:37,680
0,120 120,780 810,1200 1200,1380 1380,1440
that we many things we

437
00:13:37,680 --> 00:13:39,840
0,120 120,660 870,1170 1170,1410 1410,2160
can observe about this particular

438
00:13:39,840 --> 00:13:42,090
0,210 210,690 930,1620 1770,2160 2160,2250
page table, um, first of

439
00:13:42,090 --> 00:13:44,220
0,480 480,630 630,750 750,1410 1950,2130
all you know, we in

440
00:13:44,220 --> 00:13:45,690
0,360 360,870 870,1050 1050,1350 1350,1470
addition to a printing out

441
00:13:45,690 --> 00:13:46,950
0,90 90,450 450,1110 1110,1200 1200,1260
the physical dps and the

442
00:13:46,950 --> 00:13:48,390
0,240 240,540 540,780 840,1230 1230,1440
physical address is also putting

443
00:13:48,390 --> 00:13:49,300
0,90 90,180 180,810
out the flags.

444
00:13:50,040 --> 00:13:51,210
0,450 450,690 690,960 960,1050 1050,1170
Um, and you can see

445
00:13:51,210 --> 00:13:52,530
0,150 150,450 450,690 690,1140 1140,1320
here that your flag is

446
00:13:52,530 --> 00:13:54,390
0,540 750,960 960,1290 1290,1680 1680,1860
one no basically assessment is

447
00:13:54,390 --> 00:13:56,520
0,720 720,900 900,1230 1320,1650 1650,2130
translation, or this, um, intermediate

448
00:13:56,520 --> 00:14:00,060
0,450 1290,1830 1830,2310 2520,3000 3000,3540
page is that similar here

449
00:14:00,210 --> 00:14:01,770
0,270 270,540 540,1260 1260,1470 1470,1560
now is enveloped into the

450
00:14:01,770 --> 00:14:02,940
0,180 180,480 480,630 630,780 780,1170
new page, and this basically

451
00:14:02,940 --> 00:14:05,340
0,720 1290,1440 1440,1740 1890,2220 2220,2400
corresponds to the level two

452
00:14:05,340 --> 00:14:06,660
0,600 630,810 810,960 960,1020 1020,1320
page and then the second

453
00:14:06,660 --> 00:14:08,370
0,240 240,1140 1140,1230 1230,1320 1320,1710
one corresponds to the level.

454
00:14:12,110 --> 00:14:13,280
0,210 210,570 600,720 720,960 960,1170
I'm sorry I just threw

455
00:14:13,280 --> 00:14:14,540
0,150 150,540 540,870 870,1020 1020,1260
the arrows wrong so that's

456
00:14:14,540 --> 00:14:15,590
0,270 270,450 480,870 870,990 990,1050
why a pause for a

457
00:14:15,590 --> 00:14:16,360
0,420
second.

458
00:14:17,210 --> 00:14:18,650
0,90 90,150 150,720 1110,1290 1290,1440
At the top, this is

459
00:14:18,650 --> 00:14:20,030
0,150 150,390 390,570 570,840 840,1380
the top level page table.

460
00:14:20,580 --> 00:14:22,470
0,570 870,1410 1410,1530 1530,1650 1650,1890
Um, this, you know for

461
00:14:22,470 --> 00:14:24,210
0,330 330,540 540,900 900,1170 1170,1740
students, this particular page table.

462
00:14:24,650 --> 00:14:27,410
0,900 930,1500 1650,2040 2040,2400 2430,2760
And this points to that

463
00:14:27,410 --> 00:14:28,440
0,270 270,480 480,840
particular page table.

464
00:14:29,180 --> 00:14:30,380
0,240 240,450 450,570 570,990 990,1200
Or that's the address, we're

465
00:14:30,380 --> 00:14:31,640
0,300 300,570 570,960 960,1140 1140,1260
pointing to a sort of

466
00:14:31,640 --> 00:14:33,980
0,660 660,780 780,1260 1500,2010 2010,2340
shorthand for shane, um that

467
00:14:33,980 --> 00:14:35,660
0,120 120,480 540,1080 1080,1500 1500,1680
is the base address for

468
00:14:35,660 --> 00:14:36,960
0,150 150,600 600,1170
that particular page.

469
00:14:37,310 --> 00:14:38,420
0,330 330,420 420,660 660,870 870,1110
And you know into these

470
00:14:38,420 --> 00:14:42,590
0,720 960,1920 1950,3000 3330,4020 4020,4170
pages 496 bytes, um, it's

471
00:14:42,590 --> 00:14:44,300
0,330 330,420 420,1140 1200,1560 1560,1710
sex with pj's and so

472
00:14:44,300 --> 00:14:46,490
0,390 390,540 540,1560 1770,2040 2040,2190
divided by 64 its going

473
00:14:46,490 --> 00:14:48,160
0,150 150,330 330,1050 1050,1560
to get 512 entries.

474
00:14:49,200 --> 00:14:51,000
0,510 690,1020 1020,1230 1230,1470 1470,1800
Um, okay so we'll see

475
00:14:51,000 --> 00:14:52,950
0,150 150,780 810,1410 1410,1800 1830,1950
is the bottom part of

476
00:14:52,950 --> 00:14:54,820
0,450 720,1050 1050,1680
this address space.

477
00:14:55,020 --> 00:14:56,280
0,270 270,480 480,600 600,810 810,1260
Now, for in it basically

478
00:14:56,280 --> 00:14:58,280
0,690 720,1110 1110,1320 1320,1890
has actually all this.

479
00:14:58,930 --> 00:15:00,160
0,240 240,420 420,960
As free pages.

480
00:15:00,580 --> 00:15:02,980
0,360 360,540 540,1140 1500,2040 2040,2400
Only three pages, um, and

481
00:15:02,980 --> 00:15:03,730
0,210 210,300 300,360 360,570 570,750
we do a couple things

482
00:15:03,730 --> 00:15:05,530
0,90 90,150 150,630 780,1260 1260,1800
that we can a discerning

483
00:15:05,530 --> 00:15:06,700
0,150 150,240 240,390 390,1020
from the three pages.

484
00:15:06,840 --> 00:15:08,160
0,300 300,420 420,570 570,720 720,1320
Um, we know that the

485
00:15:08,400 --> 00:15:11,010
0,690 690,1350 1530,1890 1890,2220 2220,2610
bottom page which basically corresponds

486
00:15:11,010 --> 00:15:12,300
0,60 60,120 120,420 420,660 660,1290
to the virtual address zero,

487
00:15:12,450 --> 00:15:14,220
0,420 420,870 870,1230 1230,1680 1680,1770
um, this physical address, you

488
00:15:14,220 --> 00:15:15,990
0,120 120,360 360,600 600,1080 1560,1770
know eight seven six four

489
00:15:15,990 --> 00:15:16,740
0,540
zero.

490
00:15:17,080 --> 00:15:18,880
0,390 390,840 840,960 960,1350 1350,1800
Um, and you know from

491
00:15:18,910 --> 00:15:21,220
0,300 300,600 600,990 990,1560 1650,2310
our previous picture dies somewhere

492
00:15:21,220 --> 00:15:23,680
0,210 210,630 900,1260 1290,1740 1740,2460
in that a free memory,

493
00:15:23,860 --> 00:15:25,300
0,210 210,420 420,480 480,1170 1170,1440
um that the colonel has

494
00:15:25,300 --> 00:15:26,980
0,480 480,600 600,990 990,1320 1320,1680
available to allocate pages from.

495
00:15:28,330 --> 00:15:30,070
0,750 750,900 900,1290 1290,1620 1620,1740
And the final things you

496
00:15:30,070 --> 00:15:31,600
0,150 150,240 240,900 1110,1320 1320,1530
see the flags we see

497
00:15:31,600 --> 00:15:33,190
0,90 90,450 450,810 810,1230 1440,1590
the flags one f so

498
00:15:33,190 --> 00:15:38,410
0,120 120,450 450,660 660,4890 4890,5220
it means that xena set

499
00:15:38,440 --> 00:15:40,540
0,480 480,1020 1020,1200 1200,1830
execute beset and UNICEF.

500
00:15:41,500 --> 00:15:42,790
0,210 210,360 360,600 600,930 930,1290
Um, so this page can

501
00:15:42,790 --> 00:15:45,280
0,840 840,1320 1350,1800 1800,1950 1950,2490
contain both data and text.

502
00:15:45,570 --> 00:15:48,450
0,450 450,780 780,1710 1890,2670 2670,2880
And these permissions allow the

503
00:15:48,450 --> 00:15:51,060
0,210 210,840 870,1380 1380,2010 2010,2610
user program a to execute

504
00:15:51,060 --> 00:15:52,230
0,450 450,690 690,870 870,960 960,1170
instructions from or to the

505
00:15:52,230 --> 00:15:54,060
0,240 240,900 1110,1470 1470,1710 1710,1830
right memory, um and do

506
00:15:54,060 --> 00:15:55,160
0,120 120,270 270,480 480,990
it from user space.

507
00:15:56,700 --> 00:15:57,720
0,240 240,390 390,690 690,960 960,1020
Okay, so then maybe the

508
00:15:57,720 --> 00:15:58,740
0,180 180,450 450,750 750,900 900,1020
most interesting question is like

509
00:15:58,740 --> 00:15:59,910
0,270 270,420 420,570 570,780 780,1170
what's up with page one.

510
00:16:00,660 --> 00:16:01,800
0,660 690,810 810,900 900,1080 1080,1140
And you know as a

511
00:16:01,800 --> 00:16:02,820
0,420 420,540 540,690 690,900 900,1020
hint, you know see that

512
00:16:02,820 --> 00:16:05,070
0,210 210,690 960,1530 1530,1830 1830,2250
page one only has f

513
00:16:05,070 --> 00:16:05,940
0,120 120,390 390,480 480,690 690,870
and not the you get

514
00:16:05,940 --> 00:16:06,520
0,420
set.

515
00:16:06,850 --> 00:16:08,440
0,690 720,1170 1170,1290 1290,1350 1350,1590
So, um, you know what

516
00:16:08,440 --> 00:16:10,340
0,150 150,330 330,540 540,1020
is the page one.

517
00:16:11,880 --> 00:16:12,780
0,660
Anybody.

518
00:16:15,370 --> 00:16:18,970
0,210 210,480 480,1320 1530,2610 2970,3600
Is it garbage garbage garbage.

519
00:16:19,360 --> 00:16:20,740
0,240 240,390 390,480 480,960 960,1380
Um, so the garbage, um

520
00:16:20,740 --> 00:16:22,810
0,270 270,780 840,1290 1290,1440 1440,2070
is map, because now view

521
00:16:22,810 --> 00:16:24,190
0,240 240,510 510,690 690,1050 1050,1380
it but it has not

522
00:16:24,190 --> 00:16:26,050
0,210 210,390 390,660 660,1110 1350,1860
view bit set so any

523
00:16:26,050 --> 00:16:27,670
0,270 270,780 780,930 930,1260 1260,1620
user instruction that tries to

524
00:16:27,700 --> 00:16:29,140
0,180 180,420 420,630 630,870 870,1440
so if a user program

525
00:16:29,170 --> 00:16:30,730
0,510 510,660 660,780 780,1260 1260,1560
runs off its stacks, so

526
00:16:30,760 --> 00:16:31,810
0,150 150,390 390,660 660,810 810,1050
the stack grows from the.

527
00:16:32,300 --> 00:16:33,830
0,870 870,1170 1170,1380 1380,1440 1440,1530
Top-down, so even if it

528
00:16:33,830 --> 00:16:35,930
0,300 300,480 480,1080 1710,2010 2010,2100
actually has more stock is

529
00:16:35,930 --> 00:16:36,980
0,150 150,330 330,540 540,1020 1020,1050
big enough for 96 are

530
00:16:36,980 --> 00:16:39,680
0,390 390,900 1050,1290 1290,1800 2010,2700
completely full, and then a

531
00:16:39,710 --> 00:16:41,090
0,360 360,840 840,900 900,1050 1050,1380
user program, you know push

532
00:16:41,090 --> 00:16:42,080
0,0 0,420 420,510 510,570 570,990
or something on the stack

533
00:16:42,080 --> 00:16:43,310
0,330 330,510 510,690 690,1140 1140,1230
stack on the ground, it

534
00:16:43,310 --> 00:16:44,330
0,120 120,360 360,630 630,720 720,1020
will grow into the cart

535
00:16:44,330 --> 00:16:45,000
0,510
page.

536
00:16:45,140 --> 00:16:46,250
0,360 360,570 570,630 630,900 900,1110
And because the tube is

537
00:16:46,250 --> 00:16:48,080
0,240 240,630 870,1410 1410,1620 1620,1830
not set a we gotta

538
00:16:48,080 --> 00:16:49,460
0,150 150,180 180,420 420,870 990,1380
get a page fault or

539
00:16:49,460 --> 00:16:50,720
0,60 60,390 390,630 630,720 720,1260
a trap into the kernel,

540
00:16:51,020 --> 00:16:53,990
0,780 810,1230 1230,2040 2310,2820 2820,2970
um, because um, um, you

541
00:16:53,990 --> 00:16:56,300
0,360 360,810 810,900 900,1500 1500,2310
cannot translate to address a

542
00:16:56,450 --> 00:16:59,180
0,450 480,840 840,1230 1470,2070 2070,2730
two cannot address cannot translate

543
00:16:59,180 --> 00:17:00,500
0,150 150,540 540,690 690,870 960,1320
any addresses on the guard

544
00:17:00,500 --> 00:17:02,960
0,450 510,780 780,1110 1110,1620 1860,2460
page through physical address because

545
00:17:02,960 --> 00:17:04,820
0,240 240,660 960,1560 1560,1770 1770,1860
the met not having a

546
00:17:04,820 --> 00:17:06,500
0,330 330,660 660,960 960,1050 1050,1680
union basically forbids the translation.

547
00:17:08,560 --> 00:17:09,610
0,270 270,480 480,540 540,810 810,1050
Okay, what is down page

548
00:17:09,610 --> 00:17:10,300
0,450
two.

549
00:17:15,740 --> 00:17:16,620
0,90 90,630
I mean.

550
00:17:18,450 --> 00:17:19,360
0,630
Anybody.

551
00:17:19,710 --> 00:17:21,540
0,780 840,1260 1260,1470 1470,1560 1560,1830
Stack yup, that's the stock

552
00:17:21,540 --> 00:17:23,070
0,450 930,1170 1170,1230 1230,1440 1440,1530
page and so again the

553
00:17:23,070 --> 00:17:24,990
0,240 240,510 510,1350 1350,1770 1770,1920
staff page four forty four

554
00:17:24,990 --> 00:17:26,820
0,330 330,480 480,660 660,1170 1440,1830
thousand ninety six bytes and

555
00:17:26,820 --> 00:17:28,080
0,390 390,600 600,840 840,1140 1140,1260
you'll see that's clearly your

556
00:17:28,080 --> 00:17:29,760
0,480 480,600 600,870 870,960 960,1680
library in terms of permissions.

557
00:17:30,290 --> 00:17:31,700
0,630 630,840 840,1200 1200,1260 1260,1410
Um, and ask you know

558
00:17:31,700 --> 00:17:33,650
0,510 930,1320 1320,1590 1590,1860 1860,1950
everything, could we set it

559
00:17:33,650 --> 00:17:35,000
0,150 150,750 780,990 990,1050 1050,1350
up tighter if we wanted

560
00:17:35,000 --> 00:17:35,640
0,390
to.

561
00:17:38,230 --> 00:17:39,580
0,300 300,480 480,750 750,960 960,1350
Yeah I think you could

562
00:17:39,580 --> 00:17:42,100
0,630 630,870 870,1950 1950,2130 2130,2520
disable the executive a bit.

563
00:17:42,390 --> 00:17:44,070
0,510 510,720 720,990 990,1200 1200,1680
Yeah you probably could execute

564
00:17:44,070 --> 00:17:47,700
0,1350 1350,1890 2160,2820 2910,3210 3210,3630
z exhibit a would forbid

565
00:17:47,700 --> 00:17:49,290
0,420 420,630 630,1020 1020,1380 1380,1590
having any program code on

566
00:17:49,290 --> 00:17:50,100
0,60 60,630
the stack.

567
00:17:50,750 --> 00:17:52,190
0,180 180,300 300,660 690,1200 1200,1440
So if you generate code

568
00:17:52,190 --> 00:17:53,090
0,90 90,180 180,630 630,750 750,900
on the fly and put

569
00:17:53,090 --> 00:17:53,930
0,90 90,150 150,210 210,600 600,840
it on the stack you

570
00:17:53,930 --> 00:17:54,470
0,150 150,210 210,300 300,480 480,540
want to be able to

571
00:17:54,470 --> 00:17:56,180
0,540 840,990 990,1110 1110,1410 1410,1710
execute you know that maybe

572
00:17:56,180 --> 00:17:57,160
0,300 300,360 360,510 510,720
probably a good thing.

573
00:17:57,710 --> 00:17:59,270
0,570 900,1050 1050,1170 1170,1260 1260,1560
Um, and so we could

574
00:17:59,270 --> 00:17:59,960
0,180 180,330 330,420 420,570 570,690
have been a little bit

575
00:17:59,960 --> 00:18:00,620
0,420
tighter.

576
00:18:01,350 --> 00:18:03,160
0,600 930,1590
Okay, I'm.

577
00:18:03,820 --> 00:18:05,290
0,150 150,420 420,1110 1110,1200 1200,1470
So that's basically the bottom

578
00:18:05,290 --> 00:18:07,270
0,240 240,330 330,780 840,1170 1170,1980
part of this, um, uh,

579
00:18:07,990 --> 00:18:09,490
0,660 660,750 780,1050 1050,1410 1410,1500
um, uh, page table, so

580
00:18:09,490 --> 00:18:10,720
0,180 180,420 420,600 600,690 690,1230
now let's look at the

581
00:18:10,870 --> 00:18:12,850
0,480 480,1050 1200,1380 1380,1740 1740,1980
remaining entries, so basically only

582
00:18:12,850 --> 00:18:14,340
0,300 300,690 690,1320
two remaining entries.

583
00:18:14,560 --> 00:18:17,170
0,660 750,1560 1740,2130 2130,2250 2250,2610
Um, and maybe the flag

584
00:18:17,170 --> 00:18:18,070
0,210 210,270 270,360 360,600 600,900
bits are the most telling

585
00:18:18,070 --> 00:18:19,000
0,240 240,330 330,780
part of this.

586
00:18:19,150 --> 00:18:21,140
0,510 510,1020 1050,1770
A Su seven.

587
00:18:21,770 --> 00:18:22,940
0,420 420,540 540,630 630,960 960,1170
Um, you know means you

588
00:18:22,940 --> 00:18:24,700
0,630 780,1590
read right.

589
00:18:26,670 --> 00:18:28,140
0,390 390,780 780,1260
And don't work.

590
00:18:29,340 --> 00:18:31,290
0,720 720,1080 1080,1350 1350,1890 1890,1950
Um, and so what do

591
00:18:31,290 --> 00:18:32,100
0,120 120,600
we think.

592
00:18:33,010 --> 00:18:34,180
0,300 300,510 510,780 780,900 900,1170
That one is and maybe

593
00:18:34,180 --> 00:18:34,930
0,210 210,330 330,450 450,600 600,750
I'll do the other one

594
00:18:34,930 --> 00:18:37,570
0,510 930,1260 1260,1830 1860,2370 2370,2640
too, um, so v is

595
00:18:37,570 --> 00:18:38,530
0,90 90,270 270,480 480,690 690,960
I think one zero zero

596
00:18:38,530 --> 00:18:40,600
0,420 420,720 720,1080 1080,1380 1380,2070
one so Julie X invalid.

597
00:18:41,680 --> 00:18:42,430
0,270 270,420 420,540 540,600 600,750
Um, so what do we

598
00:18:42,430 --> 00:18:44,180
0,540 570,840 840,1140 1140,1560
think five eleven is.

599
00:18:48,890 --> 00:18:49,780
0,660
Anybody.

600
00:18:54,070 --> 00:18:56,560
0,600 690,1440 1440,1590 1590,1920 1920,2490
The trampoline and tramp page

601
00:18:57,520 --> 00:19:00,220
0,1950 1950,2130 2130,2430 2430,2640 2640,2700
zerlina and probably find the

602
00:19:00,220 --> 00:19:02,410
0,240 240,330 330,690 690,1230 1230,2190
weapon is definitely directly correct

603
00:19:02,410 --> 00:19:03,700
0,210 210,300 300,510 510,780 870,1290
because it has the exhibit

604
00:19:03,700 --> 00:19:05,020
0,390 660,870 870,1020 1020,1230 1230,1320
set so we must be

605
00:19:05,020 --> 00:19:06,820
0,450 450,690 690,840 840,1350 1350,1800
executed or we're allowing instructions

606
00:19:06,820 --> 00:19:07,780
0,60 60,150 150,570 570,690 690,960
to be executed from that

607
00:19:08,020 --> 00:19:08,880
0,660
page.

608
00:19:08,910 --> 00:19:09,600
0,150 150,330 330,360 360,570 570,690
I said I must meet

609
00:19:09,600 --> 00:19:11,940
0,60 60,750 1050,1380 1380,1710 1710,2340
a trampoline and we're allowing

610
00:19:11,940 --> 00:19:13,380
0,480 510,630 630,780 780,1020 1020,1440
right you know to the.

611
00:19:13,880 --> 00:19:15,500
0,870 900,1020 1020,1230 1230,1500 1500,1620
A to that page, so

612
00:19:15,500 --> 00:19:16,820
0,210 210,480 480,570 570,1020 1020,1320
that's probably the tracking page

613
00:19:16,820 --> 00:19:17,570
0,180 180,390 390,450 450,630 630,750
because that's the one we

614
00:19:17,570 --> 00:19:19,540
0,300 300,420 420,1140 1140,1650
used to restore and.

615
00:19:19,620 --> 00:19:21,420
0,210 210,690 720,1350 1350,1620
A save register ship.

616
00:19:22,230 --> 00:19:24,330
0,480 600,1320 1320,1440 1440,1950 1950,2100
Okay, one of the things

617
00:19:24,330 --> 00:19:26,220
0,90 90,600 960,1710 1710,1830 1830,1890
I'm a important thing to

618
00:19:26,220 --> 00:19:27,330
0,270 270,570 570,780 780,930 930,1110
note is there's no you

619
00:19:27,330 --> 00:19:27,920
0,360
bit.

620
00:19:29,190 --> 00:19:30,150
0,270 270,390 390,510 510,660 660,960
Right then, so now what

621
00:19:30,150 --> 00:19:31,110
0,90 90,300 300,600 600,750 750,960
does that mean, that means

622
00:19:31,110 --> 00:19:32,130
0,120 120,210 210,450 450,870 870,1020
that the user program can

623
00:19:32,130 --> 00:19:34,230
0,360 360,780 780,1170 1170,1230 1230,2100
actually not execute the instructions,

624
00:19:34,500 --> 00:19:35,580
0,210 210,420 420,630 630,930 930,1080
um that are actually at

625
00:19:35,580 --> 00:19:37,470
0,240 240,750 840,1290 1290,1350 1350,1890
five ten a as a

626
00:19:37,500 --> 00:19:38,540
0,450 450,900
trampoline page.

627
00:19:38,900 --> 00:19:40,130
0,300 300,720 720,810 810,930 930,1230
And can't be the right

628
00:19:40,130 --> 00:19:41,870
0,60 60,270 270,660 1170,1470 1470,1740
to that page, so only

629
00:19:41,870 --> 00:19:43,520
0,60 60,630 720,870 870,1200 1200,1650
the colonel can execute instructions

630
00:19:43,520 --> 00:19:44,690
0,150 150,570 570,900 900,1050 1050,1170
from there and it can

631
00:19:44,690 --> 00:19:45,660
0,210 210,360 360,450 450,780
only be the right.

632
00:19:47,510 --> 00:19:49,160
0,180 180,690 690,1050 1050,1170 1170,1650
So basically like the colonel's

633
00:19:49,160 --> 00:19:51,020
0,210 210,360 360,660 660,930 930,1860
gonna be doing this before

634
00:19:51,110 --> 00:19:52,820
0,360 570,990 990,1260 1260,1590 1590,1710
the walls still using the

635
00:19:52,820 --> 00:19:54,290
0,360 360,600 600,990 990,1290 1290,1470
user page table right that's

636
00:19:54,290 --> 00:19:55,970
0,180 180,240 240,300 300,630 900,1680
kind of the point exactly

637
00:19:56,690 --> 00:19:58,610
0,480 480,840 840,1110 1110,1620 1680,1920
Robert explained last lecture, this

638
00:19:58,610 --> 00:19:59,480
0,150 150,360 360,630 630,750 750,870
is like just for the

639
00:19:59,480 --> 00:20:01,100
0,600 600,840 840,1050 1050,1140 1140,1620
transition from user to kernel,

640
00:20:01,100 --> 00:20:02,090
0,120 120,390 390,540 540,780 780,990
and before we jump to

641
00:20:02,330 --> 00:20:03,260
0,330 330,660
before we.

642
00:20:03,320 --> 00:20:04,940
0,810 810,870 870,1110 1110,1320 1320,1620
Load, the kernel page table

643
00:20:04,940 --> 00:20:06,620
0,150 150,690 690,1260 1290,1530 1530,1680
in sep register, we need

644
00:20:06,620 --> 00:20:07,460
0,60 60,300 300,480 480,690 720,840
a little bit of you

645
00:20:07,460 --> 00:20:08,690
0,240 570,810 810,1020 1020,1170 1170,1230
know the kernel needs a

646
00:20:08,690 --> 00:20:09,470
0,180 180,300 300,390 390,660 660,780
little bit of memory to

647
00:20:09,470 --> 00:20:10,420
0,210 210,300 300,420 420,780
actually do his job.

648
00:20:11,990 --> 00:20:12,740
0,570
Okay.

649
00:20:13,200 --> 00:20:13,830
0,150 150,210 210,270 270,480 480,630
So in a couple of

650
00:20:13,830 --> 00:20:15,120
0,150 150,480 510,720 720,990 990,1290
things, then a maybe interesting

651
00:20:15,120 --> 00:20:16,920
0,90 90,240 240,840 930,1560
of this picture, um.

652
00:20:17,040 --> 00:20:18,060
0,270 270,450 450,570 570,840 840,1020
Yeah, so we all in

653
00:20:18,060 --> 00:20:19,440
0,210 210,390 390,870 870,1140 1140,1380
all these addresses go eight

654
00:20:19,440 --> 00:20:20,820
0,240 240,450 450,630 630,1200 1200,1380
seven six three zero eight

655
00:20:20,820 --> 00:20:22,050
0,210 210,480 480,870 870,1050 1050,1230
six two four seven one

656
00:20:22,050 --> 00:20:23,880
0,240 270,540 540,690 690,1200 1380,1830
of these are all pages

657
00:20:23,880 --> 00:20:25,830
0,90 90,750 870,1080 1080,1320 1320,1950
or memory in that range

658
00:20:25,860 --> 00:20:28,710
0,960 1140,1860 1890,2610 2610,2760 2760,2850
of kernel memory that is

659
00:20:28,710 --> 00:20:29,760
0,390 390,480 480,600 600,720 720,1050
not you know it's basically

660
00:20:29,760 --> 00:20:30,960
0,420 600,960
free, right.

661
00:20:31,260 --> 00:20:33,780
0,570 780,1530 1650,1890 1890,2070 2070,2520
A and r these addresses

662
00:20:33,780 --> 00:20:34,920
0,270 270,930
are contiguous.

663
00:20:41,920 --> 00:20:43,180
0,240 240,540 540,1020
In physical memory.

664
00:20:47,040 --> 00:20:47,920
0,660
Anybody.

665
00:20:49,270 --> 00:20:50,320
0,300 300,480 480,630 630,870 870,1050
And now they don't have

666
00:20:50,320 --> 00:20:52,180
0,150 150,360 1110,1560 1560,1680 1680,1860
to be no they don't

667
00:20:52,180 --> 00:20:52,720
0,150 150,210 210,330 330,420 420,540
have to be in the

668
00:20:52,720 --> 00:20:53,920
0,360 360,720 720,810 810,960 960,1200
art correct, you know look

669
00:20:53,920 --> 00:20:55,120
0,60 60,420 420,510 510,840 870,1200
at this you know seven

670
00:20:55,120 --> 00:20:56,530
0,240 240,480 480,660 660,1200 1200,1410
six four zero zero if

671
00:20:56,530 --> 00:20:57,850
0,120 120,690 690,870 870,1050 1050,1320
we continued the next address

672
00:20:57,850 --> 00:20:59,050
0,150 150,240 240,510 510,810 840,1200
would have been eight seven

673
00:20:59,050 --> 00:21:00,910
0,510 510,600 600,930 1080,1530 1530,1860
six you know six five

674
00:21:00,910 --> 00:21:02,080
0,360 360,660 660,780 780,900 900,1170
zero and it is it.

675
00:21:02,680 --> 00:21:04,360
0,420 420,840 870,1110 1110,1350 1350,1680
Um, so there's no one

676
00:21:04,360 --> 00:21:05,650
0,90 90,480 510,780 780,1050 1050,1290
of the cool things about

677
00:21:05,650 --> 00:21:07,360
0,240 240,630 630,960 1080,1470 1470,1710
page tables is that even

678
00:21:07,360 --> 00:21:08,680
0,300 300,600 600,720 720,930 930,1320
though maybe you do virtual

679
00:21:08,680 --> 00:21:10,480
0,240 240,780 840,1020 1020,1140 1140,1800
address space, a is contiguous,

680
00:21:10,510 --> 00:21:12,280
0,240 240,630 630,870 870,1380 1410,1770
the physical address space or

681
00:21:12,280 --> 00:21:13,300
0,90 90,390 390,720 720,870 870,1020
the physical pages that go

682
00:21:13,300 --> 00:21:15,250
0,450 450,900 930,1170 1170,1590 1590,1950
along with a continuous virtual

683
00:21:15,250 --> 00:21:16,870
0,450 510,780 780,1140 1170,1440 1440,1620
addresses are not don't have

684
00:21:16,870 --> 00:21:17,820
0,60 60,150 150,750
to be continuous.

685
00:21:17,880 --> 00:21:18,720
0,210 210,360 360,570 570,630 630,840
So this gives the current

686
00:21:18,720 --> 00:21:20,280
0,60 60,210 210,270 270,1170 1260,1560
a lot of flexibility in

687
00:21:20,280 --> 00:21:23,460
0,300 300,780 780,1560 1560,2730 2850,3180
terms of allocation and freeing

688
00:21:23,460 --> 00:21:24,100
0,540
pages.

689
00:21:25,050 --> 00:21:25,820
0,570
Okay.

690
00:21:26,910 --> 00:21:29,220
0,270 270,660 660,960 960,1950
Any questions about Zika.

691
00:21:29,980 --> 00:21:31,270
0,210 210,360 360,390 390,870 990,1290
I had a question, yeah,

692
00:21:31,270 --> 00:21:32,100
0,570
um.

693
00:21:32,470 --> 00:21:33,760
0,210 210,330 330,750 750,1050 1050,1290
Could you explain the S

694
00:21:33,760 --> 00:21:34,900
0,180 180,360 360,600 600,690 690,1140
P R K A little,

695
00:21:35,020 --> 00:21:36,700
0,630 750,1050 1050,1320 1320,1530 1530,1680
um, also if we are

696
00:21:36,700 --> 00:21:37,540
0,120 120,210 210,630 630,750 750,840
going to cover in a

697
00:21:37,540 --> 00:21:39,130
0,390 390,900 900,1080 1080,1470 1470,1590
future lecture, then maybe we

698
00:21:39,130 --> 00:21:40,840
0,360 390,570 570,840 840,900 900,1710
can like just a small

699
00:21:40,870 --> 00:21:42,400
0,510 510,810 810,1140 1140,1290 1290,1530
yeah actually we, um, let

700
00:21:42,400 --> 00:21:43,060
0,180 180,300 300,420 420,480 480,660
me I'm going to talk

701
00:21:43,060 --> 00:21:44,260
0,180 180,270 270,360 360,960
about it on wednesday.

702
00:21:44,340 --> 00:21:45,360
0,180 180,300 300,600 600,900 900,1020
And it actually will be

703
00:21:45,360 --> 00:21:46,290
0,90 90,450 450,540 540,630 630,930
the topic of the lazy

704
00:21:46,290 --> 00:21:46,900
0,420
lap.

705
00:21:47,320 --> 00:21:49,210
0,750 1050,1260 1260,1440 1440,1620 1620,1890
Um, so let me maybe

706
00:21:49,210 --> 00:21:51,760
0,330 330,930 930,1440 1440,2100 2100,2550
postponed to wednesday and then

707
00:21:51,760 --> 00:21:53,200
0,240 240,450 450,630 630,1140 1140,1440
that's not clear enough, please

708
00:21:53,200 --> 00:21:54,080
0,240 240,330 330,630
ask it again.

709
00:21:54,470 --> 00:21:55,760
0,330 330,600 600,840 840,1050
Sounds good, thank you.

710
00:21:57,530 --> 00:21:59,840
0,720 720,1200 1200,1470 1470,1560 1560,2310
Um, so had a question,

711
00:22:00,170 --> 00:22:02,460
0,600 1080,1530 1530,2040
um, so, um.

712
00:22:02,950 --> 00:22:05,230
0,240 240,1230 1260,1740 1800,2010 2010,2280
I remember that the book

713
00:22:05,230 --> 00:22:06,850
0,420 420,1110 1110,1260 1260,1320 1320,1620
said trampoline and the trap

714
00:22:06,850 --> 00:22:08,290
0,390 390,810 810,1050 1050,1140 1140,1440
frame were at the top

715
00:22:08,290 --> 00:22:10,640
0,180 180,330 330,660 660,1320
of the address space.

716
00:22:11,140 --> 00:22:13,960
0,570 600,840 840,1740 1890,2070 2070,2820
Um, right here, it stops

717
00:22:13,960 --> 00:22:15,970
0,750 900,1350 1350,1500 1500,1920 1920,2010
at like the first the

718
00:22:15,970 --> 00:22:17,530
0,210 210,450 450,750 750,1410 1410,1560
root page table indexes at

719
00:22:17,530 --> 00:22:19,210
0,180 180,510 510,900 900,1170 1230,1680
two five five nine five

720
00:22:19,210 --> 00:22:21,070
0,210 210,660 840,1050 1050,1470 1470,1860
one one yeah brilliant question,

721
00:22:21,070 --> 00:22:22,000
0,210 210,420 450,600 600,840 840,930
very good, I'm glad you

722
00:22:22,000 --> 00:22:24,220
0,510 510,960 960,1200 1200,2070 2100,2220
asked I saw in the

723
00:22:24,220 --> 00:22:25,270
0,180 180,270 270,450 450,930 930,1050
q and a questions and

724
00:22:25,270 --> 00:22:25,990
0,60 60,180 180,420 420,540 540,720
I was planning to talk

725
00:22:25,990 --> 00:22:26,740
0,210 210,300 300,450 450,660 660,750
about it, of course I've

726
00:22:26,740 --> 00:22:27,380
0,330
got.

727
00:22:27,540 --> 00:22:28,950
0,480 630,870 870,1050 1050,1230 1230,1410
So yeah what's going on

728
00:22:28,950 --> 00:22:30,510
0,330 360,900 900,1140 1140,1320 1320,1560
here, why is two five

729
00:22:30,510 --> 00:22:31,820
0,300 300,420 420,660 660,1050
five nine five eleven.

730
00:22:33,180 --> 00:22:35,220
0,240 240,990 1200,1350 1350,1680 1680,2040
Yeah, we yeah we we

731
00:22:35,220 --> 00:22:36,360
0,210 210,420 420,510 510,960 960,1140
always say the trampoline lives

732
00:22:36,360 --> 00:22:36,930
0,60 60,120 120,390 390,450 450,570
at the top of the

733
00:22:36,930 --> 00:22:38,610
0,270 270,660 660,1140 1230,1500 1500,1680
address space, while the top

734
00:22:38,610 --> 00:22:39,600
0,90 90,210 210,510 510,840 840,990
of the address space where

735
00:22:39,600 --> 00:22:41,760
0,240 510,1200 1230,1500 1500,1950 1950,2160
it is no point is

736
00:22:41,760 --> 00:22:43,620
0,300 300,630 630,840 840,1260 1530,1860
actually entry five eleven of

737
00:22:43,620 --> 00:22:45,240
0,480 480,750 750,930 930,1410
the top level directory.

738
00:22:45,690 --> 00:22:46,530
0,270 270,390 390,480 480,690 690,840
And it is only two

739
00:22:46,530 --> 00:22:47,380
0,180 180,660
five five.

740
00:22:49,400 --> 00:22:51,620
0,750 960,1290 1290,1650 1650,2010 2010,2220
Anybody any ideas why this

741
00:22:51,620 --> 00:22:53,120
0,150 150,240 240,630 990,1200 1200,1500
is the case, we said

742
00:22:53,120 --> 00:22:54,830
0,210 210,570 570,990 1200,1560 1560,1710
that one bit that we

743
00:22:54,830 --> 00:22:56,000
0,330 330,480 480,630 630,870 870,1170
said we were gonna use

744
00:22:56,000 --> 00:22:57,590
0,150 150,510 510,840 840,1260 1260,1590
we actually aren't using because

745
00:22:57,590 --> 00:22:59,360
0,120 120,420 420,990 990,1620 1620,1770
of sign extension problems is

746
00:22:59,360 --> 00:23:00,350
0,240 240,480 480,600 600,900 900,990
just makes it easier and

747
00:23:00,350 --> 00:23:01,400
0,210 210,540 540,750 750,900 900,1050
we also don't need that

748
00:23:01,400 --> 00:23:02,180
0,510
memory.

749
00:23:02,480 --> 00:23:04,340
0,1020 1020,1170 1170,1410 1410,1770 1770,1860
Yeah, so that's exactly the

750
00:23:04,340 --> 00:23:05,450
0,210 210,480 480,600 600,750 750,1110
right answer, so this is

751
00:23:05,450 --> 00:23:09,350
0,420 420,1110 1110,2550 2760,3300 3330,3900
basically stupid technicality, um, so

752
00:23:09,350 --> 00:23:10,970
0,120 120,420 420,990 1170,1530 1530,1620
the virtual dresses are in

753
00:23:10,970 --> 00:23:13,160
0,900 960,1020 1020,1560 1590,1740 1740,2190
principle, um I think 39

754
00:23:13,160 --> 00:23:14,240
0,360 480,900
bits, right.

755
00:23:14,760 --> 00:23:17,100
0,810 930,1470 1470,1710 1710,1860 1860,2340
A and but we actually

756
00:23:17,100 --> 00:23:18,990
0,420 420,900 900,1290 1290,1800 1800,1890
in x86, only 38 of

757
00:23:18,990 --> 00:23:19,540
0,270
them.

758
00:23:20,260 --> 00:23:21,670
0,450 450,750 750,870 870,930 930,1410
Um, and as a result

759
00:23:21,670 --> 00:23:22,900
0,60 60,240 240,660 720,1080 1080,1230
you know the top of

760
00:23:22,900 --> 00:23:24,730
0,150 150,450 450,1050 1050,1650 1680,1830
the Max v.a forests, it

761
00:23:24,730 --> 00:23:26,770
0,210 210,840 870,1020 1200,1680 1680,2040
is basically the {255 -}

762
00:23:26,770 --> 00:23:27,380
0,390
entry.

763
00:23:28,080 --> 00:23:28,890
0,150 150,210 210,480 480,600 600,810
And the reason we don't

764
00:23:28,890 --> 00:23:30,570
0,120 120,210 210,660 660,960 960,1680
use the 39 bids is

765
00:23:30,720 --> 00:23:32,460
0,210 210,480 480,1170 1170,1500 1500,1740
for no particular a good

766
00:23:32,460 --> 00:23:34,620
0,480 690,960 960,1350 1350,1650 1650,2160
reason, and then that basically

767
00:23:34,620 --> 00:23:35,640
0,300 300,420 420,690 690,750 750,1020
if you have the thirty

768
00:23:35,640 --> 00:23:36,840
0,300 300,480 480,1020
ninth bit set.

769
00:23:37,190 --> 00:23:39,200
0,360 360,600 600,720 720,1530 1710,2010
Then all the remaining a

770
00:23:39,200 --> 00:23:40,580
0,360 360,600 600,720 720,1230 1230,1380
bits in the 64 bit

771
00:23:40,580 --> 00:23:42,140
0,360 360,660 660,750 750,930 930,1560
address have to be once.

772
00:23:42,840 --> 00:23:43,740
0,330 330,450 450,540 540,720 720,900
And so we just didn't

773
00:23:43,740 --> 00:23:44,520
0,150 150,210 210,510 510,630 630,780
want to deal with this

774
00:23:44,520 --> 00:23:45,540
0,390 390,570 570,690 690,810 810,1020
problem that if we ever

775
00:23:45,540 --> 00:23:46,770
0,270 270,750 750,930 930,1020 1020,1230
set 49, but we also

776
00:23:46,770 --> 00:23:47,880
0,120 120,210 210,420 420,480 480,1110
have to set the 4040

777
00:23:47,880 --> 00:23:49,350
0,330 330,540 540,960 960,1170 1170,1470
first forty second forty third

778
00:23:49,350 --> 00:23:50,730
0,450 480,690 690,780 780,1050 1050,1380
etc until the sixty fourth.

779
00:23:52,300 --> 00:23:52,960
0,420
HI.

780
00:23:55,050 --> 00:23:56,700
0,270 270,480 480,570 570,1140 1410,1650
So that's an explanation that

781
00:23:56,700 --> 00:23:57,540
0,150 150,510
makes sense.

782
00:23:58,370 --> 00:23:58,980
0,390
Yeah.

783
00:24:00,010 --> 00:24:02,140
0,240 240,1050 1140,1560 1560,1710 1710,2130
That's a very good observation,

784
00:24:02,140 --> 00:24:02,700
0,330
go.

785
00:24:04,600 --> 00:24:05,680
0,180 180,300 300,540 540,660 660,1080
So I also had a

786
00:24:05,680 --> 00:24:07,150
0,390 390,810 810,1170 1170,1350 1350,1470
question about why is the

787
00:24:07,150 --> 00:24:08,380
0,420 420,660 660,900 900,1170 1170,1230
text and data on the

788
00:24:08,380 --> 00:24:09,500
0,300 300,990
same page.

789
00:24:09,720 --> 00:24:11,280
0,360 360,600 600,720 720,1080 1080,1560
A very good question, also

790
00:24:11,370 --> 00:24:12,660
0,360 360,540 540,720 720,1050 1080,1290
a that seems stupid right,

791
00:24:12,660 --> 00:24:13,830
0,30 30,360 390,810 810,1080 1080,1170
I mean why not put

792
00:24:13,830 --> 00:24:14,820
0,90 90,180 180,510 510,870 870,990
them on separate pages so

793
00:24:14,820 --> 00:24:15,570
0,120 120,240 240,360 360,570 570,750
that you can actually set

794
00:24:15,570 --> 00:24:16,860
0,60 60,420 420,780 810,1110 1110,1290
the permission, that's a more

795
00:24:16,860 --> 00:24:17,600
0,480
carefully.

796
00:24:18,140 --> 00:24:19,790
0,390 390,630 720,930 930,1380 1380,1650
Um, and the moon main

797
00:24:19,790 --> 00:24:21,140
0,450 450,840 870,960 960,1170 1170,1350
reason, um we're not doing

798
00:24:21,140 --> 00:24:23,040
0,330 330,660 660,1020 1020,1680
that is for simplicity.

799
00:24:23,150 --> 00:24:24,620
0,300 300,570 570,780 780,1290 1290,1470
A usually make exec more

800
00:24:24,620 --> 00:24:26,030
0,720 750,930 930,1050 1050,1320 1320,1410
complicated and we wanted the

801
00:24:26,030 --> 00:24:27,620
0,510 510,840 840,1350
simplest exit possible.

802
00:24:29,210 --> 00:24:30,350
0,240 240,330 330,510 510,840 840,1140
So a real operating system

803
00:24:30,350 --> 00:24:31,850
0,450 450,780 780,990 990,1320 1320,1500
would not have data and

804
00:24:31,850 --> 00:24:33,240
0,330 330,420 420,510 510,1170
text in the same.

805
00:24:33,400 --> 00:24:35,950
0,1020 1050,1650 1740,1890 1890,2400 2400,2550
A page, in fact we

806
00:24:35,950 --> 00:24:37,210
0,180 180,270 270,1020 1020,1170 1170,1260
have to specify that if

807
00:24:37,210 --> 00:24:38,200
0,90 90,270 270,360 360,540 540,990
you look at the load

808
00:24:38,200 --> 00:24:39,080
0,90 90,660
a flag.

809
00:24:39,250 --> 00:24:40,240
0,240 240,420 420,510 510,690 690,990
A in the make file

810
00:24:40,240 --> 00:24:41,050
0,150 150,360 360,510 510,600 600,810
you'll see that it has

811
00:24:41,050 --> 00:24:43,060
0,90 90,390 390,870 1290,1890 1890,2010
the desk ten option and

812
00:24:43,060 --> 00:24:44,290
0,180 180,420 420,660 660,930 930,1230
that force is actually data

813
00:24:44,290 --> 00:24:45,160
0,180 180,420 420,480 480,690 690,870
and text to be in

814
00:24:45,160 --> 00:24:47,680
0,240 240,930 1680,2010 2010,2190 2190,2520
a contiguous on on separate

815
00:24:47,680 --> 00:24:48,340
0,480
pages.

816
00:24:53,530 --> 00:24:54,730
0,210 210,330 330,690 690,870 870,1200
Any more questions about this

817
00:24:55,480 --> 00:24:57,130
0,210 210,390 390,510 510,1110 1110,1650
I had a follow-up question

818
00:24:57,130 --> 00:24:58,840
0,540 540,810 810,1140 1140,1350 1350,1710
regarding the number of beds,

819
00:24:58,840 --> 00:24:59,800
0,210 210,750
we're using.

820
00:24:59,950 --> 00:25:01,420
0,480 510,720 720,840 840,1230 1260,1470
Um, so you said we're

821
00:25:01,420 --> 00:25:03,610
0,300 300,510 510,990 990,1440 2010,2190
using just 38 bits, is

822
00:25:03,610 --> 00:25:05,260
0,270 270,570 750,1170 1170,1290 1290,1650
it is like the hardware

823
00:25:05,260 --> 00:25:06,910
0,420 420,1140 1170,1350 1350,1530 1530,1650
still provides for us to

824
00:25:06,910 --> 00:25:08,920
0,600 600,1320 1320,1560 1560,1860 1860,2010
use 39 bits, but we

825
00:25:08,920 --> 00:25:10,930
0,330 360,930 930,1110 1110,1530 1530,2010
are designing our operating system

826
00:25:11,680 --> 00:25:13,020
0,180 180,360 360,630 630,1050
that we're using 38.

827
00:25:13,100 --> 00:25:13,720
0,420
Now.

828
00:25:14,160 --> 00:25:15,480
0,210 210,330 330,810 810,1200 1200,1320
So we're basically if the

829
00:25:15,480 --> 00:25:17,860
0,390 390,570 570,1260 1290,2130
machine had more um.

830
00:25:17,880 --> 00:25:19,680
0,600 600,900 900,1080 1080,1380 1380,1800
Rammed into two thirty eight

831
00:25:20,160 --> 00:25:21,360
0,390 390,660 660,930 930,1020 1020,1200
we would not be able

832
00:25:21,360 --> 00:25:22,400
0,90 90,240 240,450 450,810
to use that Ram.

833
00:25:22,710 --> 00:25:25,050
0,540 750,1200 1200,1500 1500,1950 1950,2340
Now we're running we're assuming

834
00:25:25,050 --> 00:25:27,330
0,450 450,1020 1020,1380 1380,1860 1890,2280
basically much less memory than

835
00:25:27,330 --> 00:25:28,530
0,240 240,510 510,870 870,1050 1050,1200
to two thirty eight so

836
00:25:28,530 --> 00:25:29,250
0,150 150,270 270,360 360,510 510,720
it's not a big deal

837
00:25:29,250 --> 00:25:29,800
0,180 180,450
for us.

838
00:25:30,290 --> 00:25:31,610
0,330 330,510 510,660 660,1050 1050,1320
Um, but the real operating

839
00:25:31,610 --> 00:25:32,630
0,240 240,570 600,780 780,870 870,1020
system, we would have done

840
00:25:32,630 --> 00:25:33,200
0,330
better.

841
00:25:36,350 --> 00:25:37,800
0,180 180,300 300,600 600,1230
So just pure simplicity.

842
00:25:38,930 --> 00:25:39,500
0,150 150,300 300,360 360,480 480,570
We want to make it

843
00:25:39,500 --> 00:25:40,820
0,150 150,810 870,1080 1080,1200 1200,1320
as easy for you as

844
00:25:40,820 --> 00:25:42,260
0,390 390,780 810,1140 1140,1200 1200,1440
possible by reading a few

845
00:25:42,260 --> 00:25:43,540
0,240 240,300 300,510 510,1080
lines of code possible.

846
00:25:46,890 --> 00:25:47,720
0,600
Okay.

847
00:25:48,450 --> 00:25:49,840
0,600 630,810 810,1200
Yeah makes sense.

848
00:25:50,750 --> 00:25:52,670
0,270 270,420 420,810 810,1500 1530,1920
Okay, so now, um, let's

849
00:25:52,670 --> 00:25:54,650
0,540 540,930 930,1350 1350,1590 1590,1980
switch to a part two.

850
00:25:55,610 --> 00:25:57,380
0,540 900,1080 1080,1200 1200,1470 1470,1770
Um, and so let's bring

851
00:25:57,380 --> 00:25:58,970
0,180 180,840 840,1140 1140,1260 1260,1590
up a picture you probably

852
00:25:58,970 --> 00:25:59,990
0,210 210,390 390,510 510,570 570,1020
have looked at a lot.

853
00:26:00,380 --> 00:26:02,600
0,510 510,1260 1290,1620 1620,1830 1830,2220
Um the kernel address space

854
00:26:02,600 --> 00:26:03,680
0,210 210,360 360,450 450,840 870,1080
right on the left is

855
00:26:03,680 --> 00:26:05,390
0,750 780,1110 1110,1290 1290,1620 1620,1710
a virtual address space on

856
00:26:05,390 --> 00:26:06,950
0,60 60,450 450,720 720,1050 1050,1560
the right is physical memory.

857
00:26:07,440 --> 00:26:09,720
0,540 540,1170 1170,1470 1500,1980 1980,2280
Um, your um, your io

858
00:26:09,720 --> 00:26:10,740
0,900
devices.

859
00:26:11,080 --> 00:26:12,700
0,360 360,720 720,900 900,1170 1170,1620
And then from here on

860
00:26:12,730 --> 00:26:14,360
0,450 450,570 570,660 660,1380
is you know DRM.

861
00:26:16,090 --> 00:26:17,950
0,720 720,840 840,1170 1170,1530 1530,1860
And you know and basically

862
00:26:17,950 --> 00:26:19,570
0,270 270,540 540,870 870,1320 1320,1620
running into what actually a

863
00:26:19,570 --> 00:26:21,550
0,270 270,780 780,990 990,1380 1380,1980
one twenty a 28 megabytes.

864
00:26:22,330 --> 00:26:23,260
0,690
I'm.

865
00:26:24,390 --> 00:26:25,530
0,240 240,570 600,870 870,990 990,1140
For us because we just

866
00:26:25,530 --> 00:26:26,490
0,360 360,480 480,600 600,750 750,960
assume that there's no more

867
00:26:26,490 --> 00:26:28,290
0,240 420,1140 1140,1350 1350,1500 1500,1800
than {252 -} and fifty

868
00:26:28,290 --> 00:26:29,370
0,270 270,510 510,660 660,1020 1020,1080
one twenty eight megabytes of

869
00:26:29,370 --> 00:26:29,960
0,360
memory.

870
00:26:30,140 --> 00:26:31,070
0,240 240,360 360,630 630,870 870,930
And so this part of

871
00:26:31,070 --> 00:26:31,910
0,60 60,330 330,630 630,720 720,840
the physical memory is the

872
00:26:31,910 --> 00:26:32,880
0,150 150,720
free memory.

873
00:26:33,840 --> 00:26:35,040
0,330 330,600 600,720 720,1020 1020,1200
And then from now this

874
00:26:35,040 --> 00:26:37,560
0,270 270,900 1230,1950 1980,2340 2400,2520
word colonel, um, but I

875
00:26:37,560 --> 00:26:38,790
0,330 330,420 420,600 600,750 750,1230
drew a little bit wrong.

876
00:26:39,510 --> 00:26:41,040
0,210 210,780 780,840 840,990 990,1530
But it'll be more careful,

877
00:26:41,430 --> 00:26:42,920
0,570 810,1260
um so.

878
00:26:43,910 --> 00:26:45,590
0,480 480,660 660,1020 1020,1440 1470,1680
Year, we basically have a

879
00:26:45,590 --> 00:26:47,780
0,570 600,1170 1170,1350 1350,1890
kernel text and data.

880
00:26:48,160 --> 00:26:49,120
0,150 150,480 510,630 630,750 750,960
And then you know this

881
00:26:49,120 --> 00:26:51,640
0,390 390,1110 1110,1620 1680,2340 2340,2520
memory buffers, basically memory that

882
00:26:51,640 --> 00:26:53,560
0,360 360,600 600,1110 1110,1590 1710,1920
the kernel allocator house and

883
00:26:53,560 --> 00:26:55,030
0,120 120,570 570,780 780,1200 1200,1470
from there we allocate memory

884
00:26:55,030 --> 00:26:56,500
0,120 120,360 360,1020 1020,1110 1110,1470
for user programs, we allocate

885
00:26:56,500 --> 00:26:58,240
0,210 210,330 330,600 600,1200 1200,1740
memory for page tables etc

886
00:26:58,330 --> 00:26:59,620
0,300 300,660 660,960 960,1080 1080,1290
kernel allocates everything for them.

887
00:27:00,680 --> 00:27:01,490
0,330 330,420 420,630 630,720 720,810
Until it runs out of

888
00:27:01,490 --> 00:27:02,510
0,420 420,600 600,690 690,900 900,1020
memory when it runs out

889
00:27:02,510 --> 00:27:03,380
0,120 120,330 330,420 420,600 600,870
it gets to one twenty

890
00:27:03,380 --> 00:27:05,390
0,390 600,1380 1380,1800 1800,1950 1950,2010
eight megabyte and then it

891
00:27:05,390 --> 00:27:06,950
0,240 240,570 570,1050 1080,1290 1290,1560
starts returning errors or system

892
00:27:06,950 --> 00:27:07,480
0,450
calls.

893
00:27:08,680 --> 00:27:09,440
0,540
Okay.

894
00:27:10,490 --> 00:27:12,050
0,420 480,810 810,960 960,1170 1170,1560
Good, um, so let me

895
00:27:12,050 --> 00:27:14,000
0,30 30,570 570,720 720,1200 1320,1950
um pull off my a.

896
00:27:15,260 --> 00:27:16,670
0,480 480,810 810,1080 1080,1230 1230,1410
First part correct in some

897
00:27:16,670 --> 00:27:18,020
0,270 270,360 360,540 540,1080 1080,1350
sense of this assignment it

898
00:27:18,020 --> 00:27:19,820
0,510 720,1110 1110,1200 1200,1290 1290,1800
was part of the assignment

899
00:27:19,850 --> 00:27:23,780
0,540 540,1020 1020,1560 1830,2640 2820,3930
was just to a run

900
00:27:23,810 --> 00:27:26,150
0,780 810,1230 1500,1800 1830,2280 2280,2340
with or a copy the

901
00:27:26,150 --> 00:27:27,590
0,300 300,540 540,930 930,1110 1110,1440
kernel page tables at every

902
00:27:27,590 --> 00:27:31,310
0,720 1140,2160 2160,2310 2310,2940 3150,3720
process has its own kernel

903
00:27:31,310 --> 00:27:32,260
0,240 240,840
page tables.

904
00:27:33,060 --> 00:27:35,880
0,540 960,1350 1350,1860 1890,2580 2580,2820
Um that was basically that's

905
00:27:35,880 --> 00:27:37,410
0,420 420,1050 1050,1290 1290,1410 1410,1530
the assignment here, so let

906
00:27:37,410 --> 00:27:38,550
0,360 390,630 630,870 870,1080 1080,1140
me for jumping into the

907
00:27:38,550 --> 00:27:39,480
0,300 300,390 390,540 540,750 750,930
code, let me actually say

908
00:27:39,480 --> 00:27:40,480
0,60 60,300 300,720
a couple things.

909
00:27:40,580 --> 00:27:42,080
0,510 510,720 720,1020 1020,1230 1230,1500
A more general things about

910
00:27:42,080 --> 00:27:42,520
0,240
it.

911
00:27:43,800 --> 00:27:45,400
0,390 390,630 630,900 900,1380
Um, so part two.

912
00:27:51,160 --> 00:27:53,590
0,660 1320,1980 1980,2160 2160,2250 2250,2430
Um, and maybe the first

913
00:27:53,590 --> 00:27:55,000
0,240 240,450 450,990 1020,1350 1350,1410
question really to sort of

914
00:27:55,030 --> 00:27:56,260
0,540 540,630 630,780 780,1110 1110,1230
get your head around is

915
00:27:56,260 --> 00:27:57,100
0,180 180,270 270,570 570,630 630,840
like you know in some

916
00:27:57,100 --> 00:27:58,300
0,240 240,330 330,510 510,720 720,1200
ways you do sounds trivial

917
00:27:58,300 --> 00:27:59,170
0,300 300,390 390,660 660,810 810,870
right, we already have the

918
00:27:59,170 --> 00:28:00,490
0,240 240,480 480,930 960,1140 1140,1320
kernel page table, we just

919
00:28:00,490 --> 00:28:01,600
0,180 180,240 240,510 510,720 720,1110
have to make any copies

920
00:28:01,600 --> 00:28:03,010
0,120 120,300 570,720 720,1020 1020,1410
of it for one copy

921
00:28:03,010 --> 00:28:04,620
0,120 120,240 240,600 600,1140
for each particular process.

922
00:28:04,690 --> 00:28:06,460
0,690 840,1320 1320,1440 1440,1620 1620,1770
Um, you, you might say

923
00:28:06,460 --> 00:28:07,390
0,300 300,420 420,540 540,750 750,930
well you know how hard

924
00:28:07,390 --> 00:28:08,500
0,150 150,240 240,600 660,930 930,1110
can it be a it

925
00:28:08,500 --> 00:28:09,220
0,240 240,390 390,540 540,660 660,720
turns out it was a

926
00:28:09,220 --> 00:28:10,090
0,150 150,240 240,630 630,780 780,870
little bit harder for a

927
00:28:10,090 --> 00:28:11,120
0,240 240,900
couple reasons.

928
00:28:11,400 --> 00:28:13,020
0,360 360,540 540,1050 1080,1410 1410,1620
Some good ones, some less

929
00:28:13,020 --> 00:28:13,740
0,180 180,600
good ones.

930
00:28:14,440 --> 00:28:16,120
0,540 540,810 810,930 930,990 990,1680
A harder than it seems.

931
00:28:20,500 --> 00:28:22,600
0,450 450,900 900,1230 1230,1650 1650,2100
And one reason is that

932
00:28:22,630 --> 00:28:24,820
0,660 690,930 930,1320 1320,1560 1560,2190
a given ext, six code.

933
00:28:26,430 --> 00:28:29,190
0,540 540,900 900,1860 2160,2460 2460,2760
Um, it's specialized for one

934
00:28:29,190 --> 00:28:30,380
0,270 270,510 510,930
kernel page table.

935
00:28:39,080 --> 00:28:40,280
0,240 240,360 360,480 480,840 840,1200
You know you sounded in

936
00:28:40,280 --> 00:28:43,010
0,480 480,750 750,930 930,1470 1860,2730
a cave a minute, um.

937
00:28:43,500 --> 00:28:44,640
0,510 510,720 720,810 810,930 930,1140
Yeah, and so that makes

938
00:28:44,640 --> 00:28:46,320
0,270 270,600 600,810 810,1080 1080,1680
it a little bit a

939
00:28:47,340 --> 00:28:48,810
0,900 900,990 990,1080 1080,1380 1380,1470
generalizing you know it's a

940
00:28:48,810 --> 00:28:49,800
0,270 270,390 390,450 450,780 780,990
little bit of work because

941
00:28:49,800 --> 00:28:50,790
0,90 90,210 210,510 510,900 900,990
you have to modify the

942
00:28:50,790 --> 00:28:51,860
0,480 480,870
x86 code.

943
00:28:52,500 --> 00:28:53,400
0,660
I'm.

944
00:28:54,580 --> 00:28:55,930
0,390 390,480 480,990 990,1140 1140,1350
Cavey a minutes as you

945
00:28:55,930 --> 00:28:56,800
0,210 210,480 480,630 630,810 810,870
also saw is not the

946
00:28:56,800 --> 00:28:57,840
0,240 240,750
full story.

947
00:28:58,360 --> 00:29:00,010
0,150 150,270 270,540 540,1050 1050,1650
You know for building a

948
00:29:00,040 --> 00:29:02,080
0,510 510,1320 1320,1440 1440,1500 1500,2040
page table for the kernel,

949
00:29:02,230 --> 00:29:03,910
0,420 420,660 660,1080 1080,1380 1440,1680
there's also stuff in rock

950
00:29:03,910 --> 00:29:04,620
0,150 150,480
in it.

951
00:29:04,710 --> 00:29:06,330
0,240 240,570 570,1050 1050,1470 1470,1620
That actually adds {mapping's -}

952
00:29:06,330 --> 00:29:07,620
0,150 150,240 240,540 540,780 780,1290
to the current page table

953
00:29:08,010 --> 00:29:09,360
0,300 300,540 540,750 750,1080 1080,1350
and there's even something in

954
00:29:09,390 --> 00:29:11,000
0,450 450,930 930,1440
a video disc.

955
00:29:12,040 --> 00:29:13,450
0,210 210,450 450,1170 1170,1320 1320,1410
The acts interacts you know

956
00:29:13,450 --> 00:29:14,780
0,180 180,450 450,690 690,1110
the kernel page table.

957
00:29:16,000 --> 00:29:17,170
0,240 240,450 450,840 840,1020 1020,1170
Um, so basically there's no

958
00:29:17,170 --> 00:29:18,490
0,420 420,840 840,1170 1170,1260 1260,1320
one single place in the

959
00:29:18,490 --> 00:29:20,080
0,360 360,720 720,1080 1080,1290 1290,1590
kernel where actually the kernel

960
00:29:20,080 --> 00:29:21,430
0,210 210,450 450,750 750,900 900,1350
page table election is built.

961
00:29:22,450 --> 00:29:24,130
0,420 450,690 690,900 990,1380 1380,1680
Um, then the third reason

962
00:29:24,130 --> 00:29:25,030
0,390 390,510 510,630 630,840 840,900
why you know this is

963
00:29:25,030 --> 00:29:26,560
0,300 300,960 960,1170 1170,1290 1290,1530
slightly complicated because you also

964
00:29:26,560 --> 00:29:27,640
0,150 150,240 240,420 420,540 540,1080
have to deal with cleanup.

965
00:29:29,200 --> 00:29:31,360
0,360 360,870 1200,1740 1740,1830 1830,2160
Um, so there's the aspect

966
00:29:31,360 --> 00:29:32,920
0,90 90,360 360,720 720,870 870,1560
of actually creating these copies,

967
00:29:32,980 --> 00:29:34,180
0,360 360,510 510,690 690,1110 1110,1200
but when every time a

968
00:29:34,180 --> 00:29:36,130
0,240 240,570 570,1080 1380,1800 1800,1950
user process, exit, um, we

969
00:29:36,130 --> 00:29:37,330
0,240 240,390 390,480 480,780 780,1200
also have to clean up

970
00:29:37,480 --> 00:29:39,340
0,390 420,1290 1290,1560 1560,1680 1680,1860
those page samples that were

971
00:29:39,340 --> 00:29:41,020
0,90 90,540 660,1200 1200,1500 1500,1680
in use because we want

972
00:29:41,020 --> 00:29:42,250
0,120 120,450 450,570 570,840 840,1230
to return them to the

973
00:29:42,280 --> 00:29:43,480
0,390 390,540 540,720 720,1110 1110,1200
pool of free memory so

974
00:29:43,480 --> 00:29:44,170
0,150 150,240 240,390 390,540 540,690
that we can use them

975
00:29:44,170 --> 00:29:45,490
0,480 630,990 990,1110 1110,1230 1230,1320
later, um so that we

976
00:29:45,490 --> 00:29:46,870
0,120 120,300 300,480 480,690 690,1380
can keep on running processes.

977
00:29:48,340 --> 00:29:49,700
0,180 180,270 270,600 600,1170
That's what happens there.

978
00:29:51,240 --> 00:29:51,900
0,150 150,240 240,480 480,630 630,660
And that makes things a

979
00:29:51,900 --> 00:29:53,370
0,150 150,240 240,840 840,1140 1140,1470
little bit complicated because we've

980
00:29:53,370 --> 00:29:54,600
0,120 120,180 180,390 390,690 690,1230
got to be little careful

981
00:29:54,600 --> 00:29:56,400
0,270 270,840 870,1080 1080,1500 1500,1800
in actually a freeing the

982
00:29:56,400 --> 00:29:57,930
0,270 270,510 510,960 990,1230 1230,1530
kernel page table or copy

983
00:29:57,930 --> 00:29:59,040
0,90 90,180 180,420 420,660 660,1110
of the kernel page table

984
00:29:59,220 --> 00:30:00,210
0,240 240,360 360,660 660,840 840,990
but we certainly don't want

985
00:30:00,210 --> 00:30:01,830
0,180 180,300 300,420 420,930 1170,1620
to you know free a

986
00:30:01,830 --> 00:30:03,450
0,390 390,570 570,870 870,1260 1260,1620
memory that actually stealing u.s

987
00:30:03,450 --> 00:30:04,890
0,390 390,720 720,1080 1080,1170 1170,1440
repeats table entries are still

988
00:30:04,890 --> 00:30:06,270
0,240 240,330 330,600 600,840 840,1380
used by other page tables.

989
00:30:06,920 --> 00:30:07,760
0,240 240,330 330,480 480,540 540,840
So we gotta be careful

990
00:30:07,760 --> 00:30:10,310
0,390 960,1200 1200,1710 1800,2430 2430,2550
there, and then, um, you

991
00:30:10,310 --> 00:30:11,780
0,60 60,510 810,1020 1020,1230 1230,1470
know basically, um, it's easy

992
00:30:11,780 --> 00:30:12,860
0,90 90,270 270,330 330,630 630,1080
to make a small area.

993
00:30:14,320 --> 00:30:15,460
0,270 270,510 510,840 840,1050 1050,1140
Your page table when your

994
00:30:15,460 --> 00:30:17,020
0,330 330,540 540,750 750,1380
copy those page tables.

995
00:30:17,370 --> 00:30:18,090
0,360 360,420 420,480 480,600 600,720
Um, you know if you

996
00:30:18,090 --> 00:30:19,800
0,150 150,240 240,540 540,1080 1260,1710
get a little thing, um,

997
00:30:19,800 --> 00:30:20,700
0,90 90,180 180,600 600,750 750,900
you know visually you get

998
00:30:20,700 --> 00:30:22,100
0,90 90,510 510,840 840,1230
a hard hard buck.

999
00:30:24,300 --> 00:30:26,010
0,480 900,1200 1200,1260 1260,1350 1350,1710
And one of the problems

1000
00:30:26,010 --> 00:30:27,450
0,240 240,450 450,510 510,750 750,1440
here is I said earlier

1001
00:30:27,450 --> 00:30:28,920
0,300 510,840 840,1020 1020,1230 1230,1470
is a the hard bark

1002
00:30:28,920 --> 00:30:30,690
0,270 270,630 630,900 900,1320 1320,1770
shows up much much later.

1003
00:30:30,940 --> 00:30:32,050
0,330 330,540 540,600 600,840 840,1110
You've built the kernel page

1004
00:30:32,050 --> 00:30:33,130
0,420 420,540 540,720 720,780 780,1080
tables are built a copy

1005
00:30:33,130 --> 00:30:34,540
0,60 60,120 120,510 510,930 930,1410
of the kernel page table.

1006
00:30:34,940 --> 00:30:36,590
0,330 330,450 450,1020 1230,1440 1440,1650
Oh, it's fine, you look

1007
00:30:36,620 --> 00:30:38,320
0,480 480,600 600,750 750,1470
loaded in s ap.

1008
00:30:38,390 --> 00:30:39,620
0,240 240,420 420,900 900,1170 1170,1230
They may even maybe the

1009
00:30:39,620 --> 00:30:40,460
0,240 240,480 480,570 570,630 630,840
kernel runs for a little

1010
00:30:40,460 --> 00:30:41,960
0,360 360,450 450,750 750,1350
while, and then panics.

1011
00:30:42,480 --> 00:30:43,590
0,390 390,510 510,720 720,1020 1020,1110
And it turns out you

1012
00:30:43,590 --> 00:30:44,640
0,150 150,240 240,480 480,600 600,1050
know the reason that panics

1013
00:30:44,640 --> 00:30:46,080
0,450 450,600 600,810 810,1110 1110,1440
because you made some small

1014
00:30:46,080 --> 00:30:48,120
0,450 450,810 810,1260 1290,1560 1560,2040
mistake ins a page table

1015
00:30:48,150 --> 00:30:49,560
0,240 240,720 720,900 900,1110 1110,1410
a long, long time ago.

1016
00:30:49,990 --> 00:30:50,980
0,300 300,390 390,600 600,690 690,990
And so this is one

1017
00:30:50,980 --> 00:30:52,030
0,240 240,390 390,480 480,930 930,1050
reason why it makes you

1018
00:30:52,030 --> 00:30:54,520
0,630 630,870 870,1320 1350,1980 2010,2490
know makes life difficult for

1019
00:30:54,550 --> 00:30:55,560
0,300 300,750
kernel programming.

1020
00:30:56,950 --> 00:30:58,450
0,480 480,600 600,870 870,1050 1050,1500
And you know and basically

1021
00:30:58,450 --> 00:30:59,770
0,330 330,510 510,840 840,1200 1200,1320
these hot dogs basically are

1022
00:30:59,770 --> 00:31:00,940
0,210 210,420 420,810
just time consuming.

1023
00:31:01,330 --> 00:31:02,320
0,150 150,390 390,780
To track down.

1024
00:31:11,630 --> 00:31:12,590
0,270 270,330 330,390 390,660 660,960
Because of the point that

1025
00:31:12,590 --> 00:31:14,450
0,270 270,930 1020,1380 1380,1650 1650,1860
no happens, um, that's actually

1026
00:31:14,450 --> 00:31:15,920
0,180 180,300 300,570 570,1230 1350,1470
not the real cost of

1027
00:31:15,950 --> 00:31:16,940
0,360 360,540 540,600 600,870 870,990
a of the bug but

1028
00:31:16,940 --> 00:31:17,990
0,330 330,420 420,540 540,870 870,1050
about you know the real

1029
00:31:17,990 --> 00:31:19,220
0,360 360,510 510,630 630,930 930,1230
cost you know someone who's

1030
00:31:19,220 --> 00:31:20,450
0,330 330,720 720,930 930,1020 1020,1230
way earlier when you set

1031
00:31:20,450 --> 00:31:21,680
0,120 120,360 420,690 690,1140
up the page tables.

1032
00:31:23,840 --> 00:31:25,500
0,630 720,1410
Okay, um.

1033
00:31:26,310 --> 00:31:28,320
0,360 360,480 480,720 720,1140 1200,2010
So it turns out, um,

1034
00:31:28,500 --> 00:31:29,670
0,180 180,420 420,630 630,1080 1080,1170
there are two approaches to

1035
00:31:29,670 --> 00:31:31,080
0,150 150,450 450,690 900,1230 1230,1410
go about it now to

1036
00:31:31,080 --> 00:31:32,640
0,90 90,600 600,1110 1110,1320 1320,1560
the slap which sort of.

1037
00:31:33,350 --> 00:31:35,680
0,690 840,1020 1020,1410 1410,2130
A new solution approaches.

1038
00:31:38,850 --> 00:31:39,750
0,180 180,540 540,690 690,810 810,900
In fact, some of you

1039
00:31:39,750 --> 00:31:40,740
0,90 90,390 390,600 600,660 660,990
have probably used a mixture

1040
00:31:40,740 --> 00:31:42,750
0,60 60,510 870,1350 1350,1500 1500,2010
of them, um, the one

1041
00:31:42,750 --> 00:31:44,100
0,180 180,510 510,660 660,750 750,1350
you approach what I call

1042
00:31:44,400 --> 00:31:46,000
0,300 300,720 720,1350
a copy approach.

1043
00:31:47,550 --> 00:31:48,960
0,360 360,420 420,720 720,990 990,1410
And the copy approach basically

1044
00:31:48,960 --> 00:31:50,160
0,420 420,720 720,780 780,1080 1080,1200
literally makes a copy to

1045
00:31:50,160 --> 00:31:52,260
0,300 300,570 570,840 840,1170 1680,2100
the kernel page table so

1046
00:31:52,440 --> 00:31:55,050
0,240 240,690 690,1410 1710,2550 2550,2610
every time you need a

1047
00:31:55,050 --> 00:31:56,940
0,330 330,600 600,810 810,1350 1470,1890
new kernel page table, you

1048
00:31:56,940 --> 00:31:58,230
0,420 420,750 750,960 960,1080 1080,1290
allocate pages for the page

1049
00:31:58,230 --> 00:31:59,910
0,570 570,780 810,1080 1080,1230 1230,1680
table, you fill them in

1050
00:32:00,180 --> 00:32:02,300
0,1470 1470,1950
etc, etc.

1051
00:32:02,920 --> 00:32:05,530
0,360 360,900 900,1260 2190,2370 2370,2610
And there's a that's one

1052
00:32:05,530 --> 00:32:07,060
0,360 360,480 480,690 690,1380
approach, the second approach.

1053
00:32:07,200 --> 00:32:10,830
0,630 990,1950 1980,2700 2970,3510 3510,3630
Um is, um, basically to

1054
00:32:10,830 --> 00:32:11,760
0,690
share.

1055
00:32:14,060 --> 00:32:15,890
0,570 840,1020 1020,1260 1260,1470 1470,1830
Um the kernel page table

1056
00:32:15,890 --> 00:32:17,480
0,420 570,750 750,960 960,1350 1350,1590
and in this case, what

1057
00:32:17,480 --> 00:32:18,860
0,120 120,480 480,720 720,1260 1260,1380
you do is instead of

1058
00:32:18,860 --> 00:32:20,120
0,270 270,420 420,660 660,750 750,1260
trying to make a literally

1059
00:32:20,120 --> 00:32:21,530
0,510 540,990 990,1290 1290,1350 1350,1410
nice clean copy of the

1060
00:32:21,530 --> 00:32:23,270
0,210 210,420 420,930 1170,1440 1440,1740
kernel page tables, you share

1061
00:32:23,270 --> 00:32:24,230
0,150 150,300 300,720 720,870 870,960
all the entries that are

1062
00:32:24,230 --> 00:32:25,850
0,630 630,1200 1200,1470 1470,1530 1530,1620
basically are going to be

1063
00:32:25,850 --> 00:32:27,000
0,780
unmodified.

1064
00:32:27,300 --> 00:32:28,380
0,360 360,660 660,810 810,990 990,1080
Um, you know from the

1065
00:32:28,380 --> 00:32:30,630
0,630 630,780 780,1230 1230,1620 1620,2250
assignment that basically anything above

1066
00:32:30,690 --> 00:32:32,190
0,690 720,1080 1080,1170 1170,1290 1290,1500
a claim to a public

1067
00:32:32,190 --> 00:32:33,330
0,420 420,540 540,930 930,1050 1050,1140
address is actually going to

1068
00:32:33,330 --> 00:32:35,970
0,390 420,1260 1260,1950 1980,2370 2370,2640
be unchanged unmodified there's nothing

1069
00:32:35,970 --> 00:32:36,960
0,120 120,240 240,330 330,660 660,990
you have to load there.

1070
00:32:37,290 --> 00:32:38,910
0,480 480,810 810,990 1020,1260 1260,1620
A in the part three

1071
00:32:39,060 --> 00:32:39,630
0,210 210,330 330,390 390,510 510,570
so you know what are

1072
00:32:39,630 --> 00:32:41,580
0,660 810,1020 1020,1170 1170,1620 1620,1950
basically all the entries from

1073
00:32:41,580 --> 00:32:43,980
0,390 390,840 840,990 990,1740 1740,2400
above zero are probably identical

1074
00:32:44,130 --> 00:32:45,150
0,150 150,300 300,420 420,810 810,1020
so you could share those

1075
00:32:45,150 --> 00:32:46,220
0,300 300,390 390,540 540,840
entries, if you will.

1076
00:32:47,020 --> 00:32:49,360
0,480 810,1080 1080,1230 1230,1710 1710,2340
Um, so that both approaches

1077
00:32:49,360 --> 00:32:51,020
0,240 240,450 450,870 870,1410
are actually perfectly fine.

1078
00:32:51,080 --> 00:32:53,660
0,600 600,810 810,1200 1710,2190 2190,2580
Um, it's not abundantly clear,

1079
00:32:53,660 --> 00:32:54,500
0,210 210,450 450,570 570,630 630,840
which one is the better

1080
00:32:54,500 --> 00:32:56,600
0,450 600,1050 1050,1260 1260,1740 1740,2100
one, um, my solutions, take

1081
00:32:56,600 --> 00:32:58,040
0,480 510,1290
this approach.

1082
00:32:58,240 --> 00:33:01,120
0,540 540,1350 1650,2340 2580,2700 2700,2880
Um, and um I don't

1083
00:33:01,120 --> 00:33:02,530
0,180 180,330 330,570 570,1200 1200,1410
really have great justification for

1084
00:33:02,530 --> 00:33:04,510
0,240 270,510 510,690 690,1230 1260,1980
it other than maybe a

1085
00:33:05,530 --> 00:33:07,160
0,1080 1080,1440
population list.

1086
00:33:07,210 --> 00:33:07,840
0,180 180,270 270,420 420,540 540,630
A I didn't want to

1087
00:33:07,840 --> 00:33:08,980
0,150 150,240 240,720 750,870 870,1140
think too hard, a what's

1088
00:33:08,980 --> 00:33:10,210
0,180 180,240 240,510 510,750 750,1230
in the kernel page table

1089
00:33:10,210 --> 00:33:11,230
0,330 330,450 450,540 540,900 900,1020
and so I figured out

1090
00:33:11,230 --> 00:33:11,920
0,120 120,180 180,390 390,570 570,690
all the things that are

1091
00:33:11,920 --> 00:33:13,000
0,120 120,270 270,480 480,570 570,1080
going to stay the same

1092
00:33:13,210 --> 00:33:15,040
0,510 510,900 900,1020 1020,1500 1500,1830
hydrogen copy them over or.

1093
00:33:15,680 --> 00:33:18,020
0,300 450,1230 1230,1350 1350,1860 2010,2340
Your copy is over and

1094
00:33:18,020 --> 00:33:18,740
0,150 150,240 240,390 390,540 540,720
then I have to think

1095
00:33:18,740 --> 00:33:19,730
0,90 90,360 360,540 540,840 840,990
too hard about actually isn't

1096
00:33:19,730 --> 00:33:20,750
0,240 240,510 510,630 630,720 720,1020
that part of the kernel

1097
00:33:20,750 --> 00:33:21,580
0,210 210,720
address space.

1098
00:33:22,480 --> 00:33:24,850
0,570 930,1530 1530,1650 1650,1800 2040,2370
Um, and you know leads

1099
00:33:24,850 --> 00:33:25,870
0,90 90,360 360,720 720,870 870,1020
to short code, but you

1100
00:33:25,870 --> 00:33:26,800
0,90 90,150 150,330 330,570 570,930
know I'm not sure actually

1101
00:33:26,800 --> 00:33:28,180
0,510 510,900 900,990 990,1290 1290,1380
shorter than for example, the

1102
00:33:28,180 --> 00:33:29,160
0,270 270,720
copy solution.

1103
00:33:29,510 --> 00:33:30,680
0,270 270,360 360,690 690,750 750,1170
But it's important to realize

1104
00:33:30,680 --> 00:33:31,760
0,90 90,450 450,570 570,630 630,1080
that basically there are two

1105
00:33:31,850 --> 00:33:33,260
0,450 450,780 780,840 840,1080 1080,1410
different ways of going about

1106
00:33:33,260 --> 00:33:35,640
0,150 150,780 900,1560 1650,2130
this particular um problem.

1107
00:33:35,990 --> 00:33:38,630
0,180 180,480 480,1140 1560,2400 2460,2640
In either case a you

1108
00:33:38,630 --> 00:33:40,340
0,120 120,900 900,1230 1230,1290 1290,1710
know whatever approach you use

1109
00:33:40,340 --> 00:33:40,880
0,90 90,150 150,360 360,480 480,540
you know there's sort of

1110
00:33:40,880 --> 00:33:42,380
0,90 90,600 600,1080 1080,1260 1260,1500
an implementation strategy to it.

1111
00:33:42,850 --> 00:33:44,260
0,600 630,750 750,870 870,960 960,1410
And you know the implementation

1112
00:33:44,260 --> 00:33:45,340
0,390 390,510 510,630 630,870 870,1080
strategy that I use for

1113
00:33:45,340 --> 00:33:47,740
0,330 330,600 600,1380 1380,1860 1860,2400
almost any kernel program is

1114
00:33:48,010 --> 00:33:49,540
0,300 300,570 570,1140 1140,1260 1260,1530
to do everything in baby

1115
00:33:49,540 --> 00:33:50,320
0,600
steps.

1116
00:33:51,640 --> 00:33:52,600
0,750
Dog.

1117
00:33:53,120 --> 00:33:54,920
0,450 840,990 990,1230 1230,1500 1500,1800
So I might have for

1118
00:33:54,920 --> 00:33:55,880
0,330 330,540 540,630 630,720 720,960
general plan in my head

1119
00:33:55,880 --> 00:33:56,870
0,270 270,420 420,540 540,750 750,990
about how I go over

1120
00:33:56,870 --> 00:33:58,460
0,60 60,570 570,1410 1440,1500 1500,1590
the whole, um, you know

1121
00:33:58,460 --> 00:33:59,270
0,150 150,240 240,540 540,630 630,810
all the changes I want

1122
00:33:59,270 --> 00:34:00,680
0,60 60,390 600,1110 1110,1320 1320,1410
to make, but once I

1123
00:34:00,680 --> 00:34:02,240
0,270 270,540 540,690 690,1200 1230,1560
start making these changes I

1124
00:34:02,240 --> 00:34:03,770
0,360 360,540 540,870 870,960 960,1530
do like one or two

1125
00:34:03,950 --> 00:34:05,090
0,450 450,600 600,780 780,1020 1020,1140
and then make sure that

1126
00:34:05,090 --> 00:34:07,070
0,300 300,840 840,1260 1260,1380 1380,1980
those work first and then.

1127
00:34:07,360 --> 00:34:08,650
0,510 510,570 570,720 720,960 960,1290
Um, you know, keep going,

1128
00:34:09,160 --> 00:34:10,750
0,360 360,1020 1080,1290 1290,1440 1440,1590
um, and the other thing

1129
00:34:10,750 --> 00:34:11,980
0,90 90,330 330,450 450,990 990,1230
I do is mostly used

1130
00:34:11,980 --> 00:34:13,120
0,120 120,180 180,780 780,840 840,1140
as a strategy to keep

1131
00:34:13,120 --> 00:34:14,360
0,60 60,480 480,990
the existing code.

1132
00:34:17,750 --> 00:34:20,360
0,570 690,1170 1170,1410 1410,2130 2250,2610
Um, don't really modify certainly

1133
00:34:20,360 --> 00:34:22,130
0,240 240,810 1020,1350 1350,1530 1530,1770
not initially I just add

1134
00:34:22,130 --> 00:34:24,140
0,540 690,1410 1440,1740 1740,1860 1860,2010
code and switch to this

1135
00:34:24,140 --> 00:34:26,060
0,180 180,720 900,1440 1440,1650 1650,1920
new code and then the

1136
00:34:26,060 --> 00:34:26,930
0,180 180,420 420,720 720,810 810,870
little baby steps and the

1137
00:34:26,930 --> 00:34:27,770
0,240 240,330 330,510 510,750 750,840
reason I'm doing that is

1138
00:34:27,770 --> 00:34:29,030
0,120 120,180 180,300 300,600 600,1260
that I can easily compare

1139
00:34:29,060 --> 00:34:31,070
0,540 540,720 720,1230 1560,1860 1860,2010
old new code, um, and

1140
00:34:31,070 --> 00:34:32,570
0,90 90,360 360,540 540,990 1020,1500
I always have a working

1141
00:34:32,570 --> 00:34:33,590
0,300 300,690 690,810 810,900 900,1020
old solution that I can

1142
00:34:33,590 --> 00:34:35,300
0,210 240,570 570,870 870,1200 1410,1710
just roll back to us

1143
00:34:35,300 --> 00:34:36,980
0,450 450,600 600,930 930,1230 1230,1680
incase some strange bugs habits,

1144
00:34:36,980 --> 00:34:37,760
0,210 210,270 270,390 390,570 570,780
then I can go back,

1145
00:34:37,760 --> 00:34:40,250
0,210 210,420 420,870 1170,1830 2130,2490
maybe one step and then

1146
00:34:40,250 --> 00:34:41,600
0,210 210,600 600,960 960,1020 1020,1350
try again, so you figure

1147
00:34:41,600 --> 00:34:42,500
0,180 180,360 360,480 480,690 690,900
out like I said were

1148
00:34:42,500 --> 00:34:43,780
0,120 120,510 510,630 630,1080
my reasoning was wrong.

1149
00:34:44,540 --> 00:34:46,850
0,450 780,1650 1650,1800 1800,2010 2040,2310
Um, basically you know baby

1150
00:34:46,850 --> 00:34:48,590
0,540 570,870 870,1200 1200,1530 1530,1740
steps, um what partly because

1151
00:34:48,590 --> 00:34:49,340
0,150 150,390 390,420 420,540 540,750
these books are so hard

1152
00:34:49,340 --> 00:34:50,160
0,60 60,270 270,600
to track down.

1153
00:34:52,960 --> 00:34:55,570
0,600 840,1260 1290,1500 1500,1860 1890,2610
Okay, um, let me switch

1154
00:34:55,600 --> 00:34:56,480
0,270 270,660
a two.

1155
00:34:56,950 --> 00:35:00,550
0,450 450,1200 1350,1950 2490,3210 3240,3600
Like code, um, so maybe

1156
00:35:00,550 --> 00:35:02,380
0,540 540,900 900,1230 1230,1440 1440,1830
starting vm dot C D

1157
00:35:02,470 --> 00:35:03,660
0,510 510,930
A so.

1158
00:35:03,780 --> 00:35:04,640
0,600
The.

1159
00:35:05,080 --> 00:35:07,870
0,300 300,960 1380,1830 1830,2280 2280,2790
Here's the existing GM minute,

1160
00:35:08,290 --> 00:35:10,750
0,540 540,690 690,1380 1410,1770 2040,2460
um and actually can everybody

1161
00:35:10,750 --> 00:35:11,600
0,120 120,210 210,660
see the code.

1162
00:35:14,650 --> 00:35:17,640
0,360 480,1170 1440,2130 2130,2730
Okay, um, and um.

1163
00:35:18,770 --> 00:35:20,360
0,540 570,1050 1050,1200 1200,1320 1320,1590
The assignment we are asked

1164
00:35:20,360 --> 00:35:21,920
0,330 330,720 720,900 900,1230 1230,1560
for correctly is to make

1165
00:35:21,920 --> 00:35:23,930
0,90 90,390 390,480 480,780 1050,2010
a copy of it and

1166
00:35:24,020 --> 00:35:25,430
0,180 180,300 300,900 900,1260 1260,1410
um the way I do

1167
00:35:25,430 --> 00:35:27,020
0,360 360,990 990,1140 1140,1320 1320,1590
that is, let me see

1168
00:35:27,020 --> 00:35:28,240
0,330 330,570 570,1020
where that is.

1169
00:35:39,820 --> 00:35:41,020
0,270 270,480 480,750 750,1050 1050,1200
So you're my uv, um

1170
00:35:41,020 --> 00:35:42,970
0,630 660,870 870,1170 1170,1440 1470,1950
create, um, that's just boring

1171
00:35:42,970 --> 00:35:44,980
0,360 360,510 510,870 870,1320 1320,2010
bark, that's basically creating a

1172
00:35:45,010 --> 00:35:46,660
0,630 630,840 840,1200 1200,1440 1440,1650
allocating the top level page

1173
00:35:46,660 --> 00:35:48,610
0,450 450,540 540,630 630,1290 1560,1950
directory for the l2 page

1174
00:35:48,610 --> 00:35:49,460
0,630
directory.

1175
00:35:49,760 --> 00:35:52,490
0,150 150,780 780,1530 1800,2130 2130,2730
And then a year's mikey,

1176
00:35:52,490 --> 00:35:54,620
0,510 540,960 1050,1620 1620,1680 1680,2130
um the equivalent of KM

1177
00:35:54,620 --> 00:35:55,380
0,120 120,450
in it.

1178
00:35:55,520 --> 00:35:56,720
0,630 660,810 810,900 900,1050 1050,1200
Um, so I get the

1179
00:35:56,750 --> 00:35:57,890
0,300 300,390 390,480 480,690 690,1140
top of the page directory

1180
00:35:57,890 --> 00:36:00,410
0,480 1020,1680 1680,1860 1860,2040 2040,2520
here, um, in this site.

1181
00:36:00,710 --> 00:36:03,590
0,510 510,900 900,1050 1050,1860 2220,2880
Then, basically I copy the.

1182
00:36:04,250 --> 00:36:06,500
0,360 360,780 780,1050 1050,1620 1740,2250
Top {511 -} entries from

1183
00:36:06,500 --> 00:36:07,820
0,270 300,600 600,810 810,1140 1140,1320
the kernel page table that

1184
00:36:07,820 --> 00:36:09,320
0,150 150,420 420,630 630,930 930,1500
was already set up by.

1185
00:36:09,650 --> 00:36:11,630
0,270 270,360 360,450 450,900 1440,1980
Give me a minute, um,

1186
00:36:11,630 --> 00:36:12,560
0,240 240,330 330,510 510,750 750,930
and so that gives me

1187
00:36:12,560 --> 00:36:14,780
0,750 840,1110 1110,1650 1680,1980 1980,2220
most of the kernel page

1188
00:36:14,780 --> 00:36:15,600
0,540
table.

1189
00:36:15,630 --> 00:36:16,980
0,150 150,570 570,570 570,1110 1110,1350
And then, um I just

1190
00:36:16,980 --> 00:36:18,750
0,240 240,330 330,660 660,1080 1470,1770
have to map in all

1191
00:36:18,750 --> 00:36:21,540
0,120 120,900 900,1200 1200,1710 1830,2790
the devices that live, um.

1192
00:36:22,240 --> 00:36:25,270
0,1200 1200,1380 1380,1770 1800,2340 2340,3030
A in the zero entry

1193
00:36:25,300 --> 00:36:26,800
0,660 660,900 900,1200 1200,1260 1260,1500
because ero entries, the entry

1194
00:36:26,800 --> 00:36:27,520
0,120 120,180 180,330 330,390 390,720
that we're going to modify

1195
00:36:27,520 --> 00:36:28,300
0,60 60,420 420,570 570,660 660,780
it later or we're going

1196
00:36:28,300 --> 00:36:29,740
0,120 150,630 630,840 840,1170 1170,1440
to map user pages into

1197
00:36:29,740 --> 00:36:30,600
0,90 90,510
the bottom.

1198
00:36:30,760 --> 00:36:32,170
0,480 750,1020 1020,1170 1170,1200 1200,1410
Um, and there's a couple

1199
00:36:32,170 --> 00:36:33,370
0,420 420,600 600,750 750,810 810,1200
devices that live in that

1200
00:36:33,370 --> 00:36:35,020
0,270 270,600 600,960 960,1470 1470,1650
in zero entry nows your

1201
00:36:35,020 --> 00:36:36,250
0,390 390,570 570,630 630,750 750,1230
device needs to be added

1202
00:36:36,490 --> 00:36:37,540
0,270 270,540
to the.

1203
00:36:37,720 --> 00:36:40,270
0,630 750,930 930,1320 1320,1710 2190,2550
Um to this, um per

1204
00:36:40,270 --> 00:36:42,400
0,630 660,1230 1230,1590 1620,1920 1920,2130
process page table kernel page

1205
00:36:42,400 --> 00:36:42,980
0,360
table.

1206
00:36:44,140 --> 00:36:45,460
0,150 150,360 360,900 900,1140 1140,1320
And so maybe I go

1207
00:36:45,460 --> 00:36:47,560
0,480 510,840 840,1110 1110,1500 1500,2100
back to this picture earlier.

1208
00:36:47,990 --> 00:36:49,360
0,1140
I'm.

1209
00:36:51,260 --> 00:36:52,820
0,270 270,450 450,930 1020,1410 1410,1560
So let me put up

1210
00:36:52,820 --> 00:36:54,920
0,270 300,600 600,870 870,1350 1380,2100
the kernel page table again.

1211
00:36:56,790 --> 00:36:59,550
0,1500 1860,2310 2310,2430 2430,2700 2700,2760
Um, maybe this picture as

1212
00:36:59,550 --> 00:37:01,590
0,180 180,810 810,1260 1500,1890 1890,2040
good as any um, so

1213
00:37:01,590 --> 00:37:02,730
0,90 90,510 510,690 690,960 960,1140
if you think about my

1214
00:37:02,730 --> 00:37:06,570
0,720 870,1500 1590,2430 2580,3210 3210,3840
solution, a basically these entries.

1215
00:37:07,050 --> 00:37:09,510
0,150 150,360 360,1050 1170,1920 2010,2460
I just share with a

1216
00:37:09,510 --> 00:37:11,400
0,510 510,780 780,1020 1020,1440 1740,1890
existing criminal page table, so

1217
00:37:11,400 --> 00:37:12,360
0,60 60,270 270,420 420,510 510,960
I don't have to allocate

1218
00:37:12,360 --> 00:37:14,100
0,240 240,390 390,960 990,1170 1170,1740
any l one or l2

1219
00:37:14,100 --> 00:37:16,350
0,180 180,360 360,660 660,1260 1440,2250
or l zero levels zay

1220
00:37:16,350 --> 00:37:18,060
0,270 270,780 780,1290 1350,1500 1500,1710
already exists and the only

1221
00:37:18,060 --> 00:37:18,990
0,150 150,240 240,450 450,540 540,930
thing I do is basically

1222
00:37:18,990 --> 00:37:21,400
0,630 720,1320 1320,1740 1740,2190
literally copied peaty entry.

1223
00:37:22,160 --> 00:37:24,050
0,270 270,840 840,1050 1050,1410 1410,1890
So only the bottom part

1224
00:37:24,080 --> 00:37:25,940
0,270 270,510 780,1620
or the bottom.

1225
00:37:25,970 --> 00:37:27,500
0,660 690,1050 1050,1170 1170,1290 1290,1530
Entry now is the peace,

1226
00:37:27,500 --> 00:37:29,720
0,60 60,270 270,720 720,1200 1290,2220
I need to actually rebuild

1227
00:37:29,720 --> 00:37:31,370
0,270 270,750 750,1350 1350,1590 1590,1650
or copy explicitly instead of

1228
00:37:31,370 --> 00:37:32,680
0,390 390,1110
copying PS.

1229
00:37:32,850 --> 00:37:34,050
0,180 180,420 420,990 990,1110 1110,1200
And that covers you know

1230
00:37:34,050 --> 00:37:35,160
0,240 240,870
the bottom.

1231
00:37:35,530 --> 00:37:38,200
0,300 300,990 1230,1770 1770,2190 2190,2670
One {gigabyte's -} address space.

1232
00:37:39,000 --> 00:37:41,460
0,210 210,540 540,1050 1470,2040 2250,2460
In one page coverage for

1233
00:37:41,460 --> 00:37:42,460
0,870
96.

1234
00:37:45,930 --> 00:37:47,730
0,660 660,960 960,1140 1140,1680 1680,1800
Um, and so this you

1235
00:37:47,730 --> 00:37:49,950
0,450 660,900 900,1560 1560,1890 1890,2220
know this interview covers five

1236
00:37:49,950 --> 00:37:50,940
0,750
twelve.

1237
00:37:51,060 --> 00:37:52,650
0,390 840,1080 1080,1200 1200,1380 1380,1590
But this has been two

1238
00:37:52,650 --> 00:37:53,620
0,720
megabyte.

1239
00:37:54,360 --> 00:37:55,770
0,150 150,300 300,390 390,690 690,1410
And this is one gigabyte

1240
00:37:56,280 --> 00:37:57,720
0,330 330,750 750,990 990,1350 1350,1440
and basically only one of

1241
00:37:57,720 --> 00:37:58,530
0,210 210,540 540,570 570,750 750,810
these entries, I need to

1242
00:37:58,530 --> 00:37:59,180
0,240 240,420
fill it.

1243
00:38:01,810 --> 00:38:02,760
0,210 210,360 360,720
That makes sense.

1244
00:38:05,370 --> 00:38:07,080
0,360 390,810 810,1110 1110,1290 1290,1710
So returning to my code

1245
00:38:07,080 --> 00:38:08,980
0,180 180,840 1080,1680
and basically, um.

1246
00:38:09,180 --> 00:38:10,680
0,240 240,390 390,480 480,840 870,1500
That's all I do, enthusiasm

1247
00:38:10,680 --> 00:38:11,460
0,540
creates.

1248
00:38:12,090 --> 00:38:14,250
0,660 1110,1560 1560,1740 1740,2010 2010,2160
Um, and in case my

1249
00:38:14,250 --> 00:38:15,930
0,450 450,990 1020,1260 1260,1440 1440,1680
KM three a is maybe

1250
00:38:15,930 --> 00:38:17,880
0,270 270,1170 1290,1650 1650,1890 1890,1950
no not maybe playing a

1251
00:38:17,880 --> 00:38:19,590
0,630 840,1170 1170,1200 1200,1440 1440,1710
solution, but I take full

1252
00:38:19,590 --> 00:38:21,180
0,600 630,690 690,810 810,1230 1230,1590
advantage of the knowledge that

1253
00:38:21,480 --> 00:38:22,620
0,690 690,780 780,930 930,1050 1050,1140
A I don't have to

1254
00:38:22,620 --> 00:38:23,760
0,150 150,540 540,660 660,750 750,1140
do anything from the entries

1255
00:38:23,760 --> 00:38:25,080
0,300 300,510 510,960 960,1230 1230,1320
one to {511 -} in

1256
00:38:25,080 --> 00:38:26,400
0,60 60,360 360,540 540,720 720,1320
the top eight level directory.

1257
00:38:26,730 --> 00:38:27,840
0,180 180,480 480,870 870,960 960,1110
The only entry to do

1258
00:38:27,840 --> 00:38:30,750
0,360 360,840 840,1080 1080,1440 2490,2910
anything about is the bottom

1259
00:38:30,750 --> 00:38:32,010
0,300 300,420 420,510 510,1080 1110,1260
entry of the kernel of

1260
00:38:32,010 --> 00:38:33,660
0,330 390,660 660,840 840,1440
the top level directory.

1261
00:38:33,790 --> 00:38:35,290
0,390 390,750 750,840 840,1320 1320,1500
That points to one l

1262
00:38:35,290 --> 00:38:37,210
0,510 690,1050 1050,1440 1440,1650 1650,1920
one a entry and dot

1263
00:38:37,210 --> 00:38:38,500
0,330 330,570 570,750 750,990 990,1290
one L M one three

1264
00:38:38,500 --> 00:38:39,190
0,150 150,360 360,480 480,540 540,690
I just need to go

1265
00:38:39,190 --> 00:38:40,960
0,540 750,1530
through and.

1266
00:38:40,990 --> 00:38:43,540
0,240 240,1140 1170,1980 2010,2340 2340,2550
A freeholder l2 or l

1267
00:38:43,540 --> 00:38:44,620
0,360 360,930
zero entries.

1268
00:38:45,010 --> 00:38:45,910
0,180 180,330 330,450 450,810 810,900
And then the ends you

1269
00:38:45,910 --> 00:38:46,990
0,210 210,480 480,600 600,960 960,1080
know three a one and

1270
00:38:46,990 --> 00:38:47,950
0,90 90,150 150,390 390,600 600,960
then the kernel page table.

1271
00:38:49,420 --> 00:38:51,010
0,330 330,450 450,690 690,840 840,1590
And so that's my cave

1272
00:38:51,040 --> 00:38:52,180
0,480 480,780 780,900 900,1050 1050,1140
KM three and like a

1273
00:38:52,180 --> 00:38:53,460
0,570 570,1110
vm, create.

1274
00:38:54,050 --> 00:38:55,010
0,180 180,390 450,750 750,870 870,960
So that allows me to

1275
00:38:55,010 --> 00:38:56,540
0,300 300,450 450,840 840,1230 1230,1530
create a criminal PhD paper

1276
00:38:56,540 --> 00:38:58,200
0,690 690,930 930,1410
process and then.

1277
00:38:58,270 --> 00:39:00,640
0,960 990,1350 1350,1650 1650,2010 2040,2370
A three one is when

1278
00:39:00,640 --> 00:39:01,300
0,90 90,390
we're done.

1279
00:39:02,360 --> 00:39:04,340
0,360 360,540 540,1110 1350,1710 1710,1980
Sorry, quick question, could you

1280
00:39:04,340 --> 00:39:06,500
0,480 480,840 840,930 930,1440 1440,2160
explain again, the reasoning for

1281
00:39:06,830 --> 00:39:08,150
0,330 330,660 660,960 960,1170 1170,1320
a only using one to

1282
00:39:08,150 --> 00:39:09,470
0,270 270,630 630,750 750,930 930,1320
five twelve and not zero.

1283
00:39:10,360 --> 00:39:14,110
0,540 570,1380 1620,2040 2040,2640 3060,3750
Yes, um okay, so, um,

1284
00:39:14,110 --> 00:39:15,010
0,270 270,330 330,660 660,840 840,900
maybe the easy thing to

1285
00:39:15,010 --> 00:39:16,060
0,270 270,600 600,750 750,900 900,1050
do actually let me go

1286
00:39:16,060 --> 00:39:17,470
0,240 240,360 360,510 510,900 900,1410
back through the picture here.

1287
00:39:19,860 --> 00:39:21,150
0,660 690,870 870,1020 1020,1200 1200,1290
Um, so we have a

1288
00:39:21,150 --> 00:39:22,700
0,270 270,510 510,870 870,1320
kernel address space work.

1289
00:39:26,240 --> 00:39:28,250
0,810 960,1500 1500,1590 1590,1680 1680,2010
Um, and you know this

1290
00:39:28,250 --> 00:39:29,990
0,90 90,600 600,1110 1140,1440 1440,1740
O X eight zero zero

1291
00:39:29,990 --> 00:39:32,160
0,330 330,1020 1290,1980
zero zero block.

1292
00:39:32,220 --> 00:39:33,400
0,360 360,960
In a.

1293
00:39:34,270 --> 00:39:35,560
0,300 300,600 600,780 780,1020 1020,1290
What entry does oh ero

1294
00:39:35,560 --> 00:39:37,090
0,330 330,600 600,1050 1050,1320 1320,1530
zero fall into in the

1295
00:39:37,090 --> 00:39:38,050
0,120 120,180 180,420 420,750 750,960
for the top level page

1296
00:39:38,050 --> 00:39:38,820
0,510
directory.

1297
00:39:46,150 --> 00:39:47,440
0,510 510,1050
Slightly, yeah.

1298
00:39:49,340 --> 00:39:51,440
0,420 420,900 1200,1770 1770,1980 1980,2100
Your entry, no not to

1299
00:39:51,440 --> 00:39:52,660
0,270 270,600 600,960
your entry, right.

1300
00:39:53,440 --> 00:39:54,880
0,270 270,780 780,900 900,1110 1110,1440
So whatever you know what

1301
00:39:54,880 --> 00:39:56,680
0,660 660,1200 1230,1380 1380,1560 1560,1800
zero entry like this entry,

1302
00:39:56,680 --> 00:39:57,940
0,120 120,330 330,510 510,570 570,1260
how much does it cover

1303
00:39:57,970 --> 00:39:58,800
0,180 180,600
this entry.

1304
00:40:02,450 --> 00:40:03,470
0,150 150,330 330,630 630,870 870,1020
How much address space, does

1305
00:40:03,470 --> 00:40:05,360
0,360 360,1110 1170,1620 1620,1800 1800,1890
this bottom entry of the

1306
00:40:05,360 --> 00:40:06,410
0,300 300,570 570,720 720,780 780,1050
zero entry of the top

1307
00:40:06,410 --> 00:40:07,740
0,150 150,360 360,690 690,1080
level page directory cover.

1308
00:40:10,140 --> 00:40:12,690
0,240 240,720 720,1470 1530,1980 2010,2550
I think clint is a

1309
00:40:12,690 --> 00:40:14,820
0,300 300,570 570,1140 1140,1770 1770,2130
it's free between zero and

1310
00:40:14,820 --> 00:40:16,320
0,300 300,600 600,1080 1080,1290 1290,1500
zero X two zero zero

1311
00:40:16,320 --> 00:40:17,000
0,420
zero.

1312
00:40:17,730 --> 00:40:18,780
0,300 300,450 450,600 600,750 750,1050
Yeah, so okay so maybe

1313
00:40:18,780 --> 00:40:19,920
0,60 60,300 300,420 420,750 840,1140
I'm going to I think

1314
00:40:19,920 --> 00:40:21,300
0,150 150,480 480,690 690,990 990,1380
you're absolutely right direction, so

1315
00:40:21,360 --> 00:40:22,890
0,510 540,870 870,1080 1080,1320 1320,1530
the bottom entry copy one

1316
00:40:22,890 --> 00:40:24,020
0,510 540,900
gigabyte, right.

1317
00:40:24,750 --> 00:40:27,240
0,720 720,1020 1020,1680 1740,2160 2160,2490
And we know like maybe

1318
00:40:27,240 --> 00:40:27,920
0,90 90,390
I can.

1319
00:40:29,630 --> 00:40:31,460
0,750 900,1380 1380,1500 1500,1590 1590,1830
Um, we saw the bottom

1320
00:40:31,460 --> 00:40:34,400
0,240 240,420 420,1080 1440,2100 2100,2940
entry one gigabyte a which.

1321
00:40:35,050 --> 00:40:36,280
0,960
I'm.

1322
00:40:36,860 --> 00:40:38,060
0,240 240,300 300,540 540,990 990,1200
In a one gigabyte just

1323
00:40:38,060 --> 00:40:39,960
0,600 600,690 690,1140 1170,1560
cleaned the plague, right.

1324
00:40:40,380 --> 00:40:43,530
0,810 840,1800 2160,2670 2670,3060 3060,3150
Uart and virtuoso desk I

1325
00:40:43,530 --> 00:40:44,280
0,510
believe.

1326
00:40:44,500 --> 00:40:47,020
0,810 1200,1380 1380,1920 1950,2250 2250,2520
Um, and then current base

1327
00:40:47,020 --> 00:40:48,340
0,270 270,600 600,840 840,1080 1080,1320
actually already sits up in

1328
00:40:48,340 --> 00:40:51,340
0,60 60,720 1710,2220 2250,2580 2850,3000
a higher entry right now

1329
00:40:51,340 --> 00:40:52,270
0,90 90,210 210,540 540,870 870,930
we can compute if we

1330
00:40:52,270 --> 00:40:53,110
0,270 270,390 390,540 540,660 660,840
wanted to, we could take

1331
00:40:53,110 --> 00:40:55,240
0,450 450,900 900,1410 1410,1590 1590,2130
X eight zero or shifted.

1332
00:40:55,670 --> 00:40:57,500
0,300 300,990 1140,1440 1440,1500 1500,1830
A twelve shift at nine

1333
00:40:57,500 --> 00:40:59,990
0,270 270,900 1140,1890 1890,2010 2010,2490
fifty nine and I I

1334
00:41:00,020 --> 00:41:01,520
0,660 780,900 900,1050 1050,1410 1410,1500
think I don't remember the

1335
00:41:01,520 --> 00:41:02,660
0,210 210,300 300,480 480,720 720,1140
top we have what is

1336
00:41:02,690 --> 00:41:04,080
0,510
a.

1337
00:41:04,420 --> 00:41:05,230
0,180 180,300 300,510 510,600 600,810
Try to figure it out,

1338
00:41:05,230 --> 00:41:06,130
0,90 90,150 150,360 360,540 540,900
if you want to actually

1339
00:41:06,130 --> 00:41:07,160
0,240 240,360 360,810
maybe we'll try.

1340
00:41:08,270 --> 00:41:09,350
0,210 210,270 270,570 570,780 780,1080
This is always very risky

1341
00:41:09,350 --> 00:41:10,670
0,90 90,210 210,570 600,1080 1080,1320
to do in lecture, but.

1342
00:41:12,070 --> 00:41:15,040
0,510 510,630 630,900 900,1470 2010,2970
Um, so, you mean a

1343
00:41:15,160 --> 00:41:16,200
0,450 450,810
need to.

1344
00:41:16,240 --> 00:41:17,660
0,210 210,420 420,630 630,990
So let's go to.

1345
00:41:19,310 --> 00:41:22,800
0,1050 1350,1920 1920,2250 2250,2880
Layout years, current bays.

1346
00:41:29,240 --> 00:41:31,760
0,600 600,870 870,1260 1260,1590 1620,2520
Um, so we could print.

1347
00:41:32,800 --> 00:41:34,760
0,360 360,690 690,840 840,1620
So shift is twelve.

1348
00:41:36,340 --> 00:41:38,060
0,300 300,690 690,1320
Now, kids do.

1349
00:41:38,470 --> 00:41:40,340
0,450 450,660 660,960 960,1530
Not off set foot.

1350
00:41:46,280 --> 00:41:48,110
0,300 300,510 510,1110 1140,1530 1530,1830
Good as that, so then

1351
00:41:48,110 --> 00:41:49,180
0,630
wolf.

1352
00:41:50,350 --> 00:41:51,660
0,300 300,930
That guy.

1353
00:41:51,980 --> 00:41:52,670
0,150 150,300 300,420 420,540 540,690
I think you could say

1354
00:41:52,670 --> 00:41:54,000
0,570
this.

1355
00:41:54,600 --> 00:41:55,720
0,870
Nine.

1356
00:41:56,740 --> 00:41:57,910
0,270 270,480 480,630 630,870 900,1170
My guess is the next

1357
00:41:57,910 --> 00:42:00,200
0,630 930,1380 1380,1980
entry one more.

1358
00:42:01,480 --> 00:42:02,700
0,150 150,270 270,510 510,960
So this entry too.

1359
00:42:03,880 --> 00:42:04,840
0,120 120,180 180,330 330,690
Does it make sense.

1360
00:42:06,270 --> 00:42:07,680
0,270 270,390 390,510 510,900 900,1410
So we go back to

1361
00:42:07,710 --> 00:42:09,040
0,180 180,510 510,1050
our picture here.

1362
00:42:11,260 --> 00:42:14,680
0,900 1170,1560 1560,2340 2340,2730 2730,3420
Basically current bases entry too.

1363
00:42:15,400 --> 00:42:16,990
0,360 360,720 720,1080 1110,1350 1350,1590
A in the top of

1364
00:42:16,990 --> 00:42:17,820
0,60 60,570
a directory.

1365
00:42:18,450 --> 00:42:20,460
0,330 330,600 600,1080 1380,1770 1770,2010
Right, so and um, we

1366
00:42:20,460 --> 00:42:21,930
0,270 270,570 570,1020 1080,1320 1320,1470
know from the third part

1367
00:42:21,930 --> 00:42:23,220
0,60 60,150 150,750 750,1170 1170,1290
of the assignment, basically we

1368
00:42:23,220 --> 00:42:24,240
0,150 150,360 360,570 570,660 660,1020
don't really have to worry

1369
00:42:24,240 --> 00:42:25,540
0,390 390,990
about anything.

1370
00:42:25,640 --> 00:42:27,180
0,450 450,870 870,1350
A above click.

1371
00:42:28,480 --> 00:42:30,910
0,750 750,1080 1080,1260 1260,2130 2130,2430
And all that stuff falls

1372
00:42:30,910 --> 00:42:32,460
0,570 570,870 870,1350
actually entry zero.

1373
00:42:34,390 --> 00:42:35,200
0,600
Okay.

1374
00:42:36,560 --> 00:42:37,550
0,210 210,450 450,570 570,660 660,990
So then to the earlier

1375
00:42:37,550 --> 00:42:38,300
0,510
question.

1376
00:42:39,620 --> 00:42:40,960
0,420 420,690 690,900
Yes, thank you.

1377
00:42:42,860 --> 00:42:43,790
0,210 210,330 330,600 600,840 840,930
Okay, so now we the

1378
00:42:43,790 --> 00:42:45,320
0,180 180,360 360,540 540,780 780,1530
only thing we have left

1379
00:42:45,320 --> 00:42:46,490
0,60 60,390 390,810 810,900 900,1170
to do is you know

1380
00:42:46,490 --> 00:42:48,350
0,360 390,750 750,1050 1050,1440 1440,1860
a double check where we

1381
00:42:48,350 --> 00:42:50,450
0,180 180,270 270,840 870,1410 1410,2100
got to call a dysfunction

1382
00:42:50,450 --> 00:42:51,300
0,570
a.

1383
00:42:51,540 --> 00:42:54,270
0,210 210,600 600,750 750,1320 1800,2730
A key and create and

1384
00:42:54,270 --> 00:42:55,080
0,570
um.

1385
00:42:56,940 --> 00:42:57,990
0,390 450,600 600,690 690,930 930,1050
And you know that's going

1386
00:42:57,990 --> 00:42:59,910
0,60 60,450 450,660 660,1320 1410,1920
to be a pollock rock.

1387
00:43:01,270 --> 00:43:02,620
0,510 510,1110
A two.

1388
00:43:02,970 --> 00:43:04,020
0,750
And.

1389
00:43:04,630 --> 00:43:05,760
0,120 120,450 450,900
Do you believe.

1390
00:43:06,820 --> 00:43:07,460
0,420
Ouch.

1391
00:43:12,460 --> 00:43:13,450
0,300 300,570 570,660 660,750 750,990
You're aware of the new

1392
00:43:13,450 --> 00:43:15,400
0,360 360,1020 1020,1290 1290,1380 1380,1950
process initialized, then you know

1393
00:43:15,610 --> 00:43:16,390
0,150 150,420 420,570 570,660 660,780
I'm sure all of you

1394
00:43:16,390 --> 00:43:17,740
0,270 270,630 630,690 690,870 870,1350
is exactly the same way

1395
00:43:17,740 --> 00:43:19,750
0,240 240,900 900,1110 1110,1650 1740,2010
you entry you allocate when

1396
00:43:19,750 --> 00:43:20,650
0,60 60,390 390,450 450,750 750,900
you declare a field in

1397
00:43:20,650 --> 00:43:22,810
0,300 330,570 570,1170 1470,1800 1800,2160
the crop structure and basically

1398
00:43:22,810 --> 00:43:23,530
0,120 120,390 390,480 480,570 570,720
the result of it is

1399
00:43:23,530 --> 00:43:24,370
0,270 270,420 420,540 540,750 750,840
actually what we stick in

1400
00:43:24,370 --> 00:43:25,440
0,60 60,270 270,510 510,840
the kernel page table.

1401
00:43:27,080 --> 00:43:27,950
0,210 210,570 570,690 690,780 780,870
Okay, then we have a

1402
00:43:27,950 --> 00:43:28,520
0,150 150,270 270,330 330,450 450,570
thing that we have to

1403
00:43:28,520 --> 00:43:29,390
0,240 240,510 510,570 570,780 780,870
worry about of course we

1404
00:43:29,390 --> 00:43:30,290
0,180 180,240 240,570 570,630 630,900
need to use the page

1405
00:43:30,290 --> 00:43:31,000
0,480
table.

1406
00:43:31,150 --> 00:43:32,770
0,600 600,960 960,1260 1260,1440 1440,1620
Um, and so we need

1407
00:43:32,770 --> 00:43:34,180
0,60 60,240 240,360 360,660 690,1410
to look at the scheduler.

1408
00:43:34,600 --> 00:43:36,220
0,570 570,660 660,1380 1380,1590 1590,1620
Basically, the assignment more or

1409
00:43:36,220 --> 00:43:36,850
0,150 150,360 360,420 420,540 540,630
less told you what to

1410
00:43:36,850 --> 00:43:38,560
0,450 810,1080 1080,1350 1350,1590 1590,1710
do a which is you

1411
00:43:38,560 --> 00:43:40,600
0,300 300,720 720,810 810,1470 1620,2040
know before you switch to

1412
00:43:40,600 --> 00:43:41,860
0,240 240,450 450,930 930,1110 1110,1260
that user process, you need

1413
00:43:41,860 --> 00:43:42,760
0,60 60,330 330,420 420,660 660,900
to switch the kernel page

1414
00:43:42,760 --> 00:43:43,540
0,600
tables.

1415
00:43:43,720 --> 00:43:45,430
0,210 210,540 540,870 870,1530 1560,1710
Which basically means loading, you

1416
00:43:45,430 --> 00:43:47,200
0,120 120,630 780,1230 1230,1500 1500,1770
know this process kernel page

1417
00:43:47,200 --> 00:43:48,880
0,330 330,480 480,630 630,1410
table {in's -} APP.

1418
00:43:49,020 --> 00:43:50,970
0,150 150,270 270,420 420,1020 1350,1950
And then when you're a

1419
00:43:50,970 --> 00:43:53,430
0,690 930,1800 1800,2010 2010,2370 2370,2460
switching a in running the

1420
00:43:53,430 --> 00:43:54,600
0,180 180,630 630,750 750,840 840,1170
other processing, you come back

1421
00:43:54,600 --> 00:43:55,770
0,120 120,360 360,420 420,630 630,1170
from running the other process

1422
00:43:55,770 --> 00:43:56,670
0,240 240,360 360,510 510,660 660,900
and you're gonna go back

1423
00:43:56,670 --> 00:43:58,110
0,210 210,270 270,870 1080,1260 1260,1440
around the scheduler, you gotta

1424
00:43:58,110 --> 00:43:59,490
0,300 300,690 690,840 840,990 990,1380
switch back to the main

1425
00:43:59,490 --> 00:44:00,740
0,300 300,540 540,990
kernel page table.

1426
00:44:00,980 --> 00:44:02,930
0,600 660,1140 1140,1440 1440,1650 1650,1950
The d kernel page table

1427
00:44:02,930 --> 00:44:03,800
0,210 210,480 480,540 540,750 750,870
because that's the one that

1428
00:44:03,800 --> 00:44:05,200
0,240 240,510 510,630 630,1140
actually used by schedule.

1429
00:44:07,260 --> 00:44:07,860
0,120 120,270 270,360 360,450 450,600
And why do we need

1430
00:44:07,860 --> 00:44:09,240
0,60 60,210 210,390 390,930 1170,1380
to do this switch, why

1431
00:44:09,240 --> 00:44:10,300
0,90 90,240 240,840
is this important.

1432
00:44:16,820 --> 00:44:17,740
0,660
Anybody.

1433
00:44:19,820 --> 00:44:20,870
0,270 270,390 390,660 660,810 810,1050
So it picks the right

1434
00:44:20,870 --> 00:44:23,240
0,360 360,630 630,1080 1590,2280 2280,2370
kernel page table because the

1435
00:44:23,240 --> 00:44:24,380
0,330 330,630 660,840 840,990 990,1140
essay d when you go

1436
00:44:24,380 --> 00:44:26,030
0,90 90,360 390,660 660,960 960,1650
to the page table entries.

1437
00:44:26,060 --> 00:44:27,160
0,120 120,390 390,510 510,870
It picks the right.

1438
00:44:27,700 --> 00:44:28,810
0,120 120,360 360,450 450,810 810,1110
It picks the right page

1439
00:44:28,810 --> 00:44:30,220
0,420 450,600 600,900 900,1170
table to pick from.

1440
00:44:30,770 --> 00:44:31,740
0,690
Yeah.

1441
00:44:33,420 --> 00:44:35,250
0,720 720,930 1020,1410 1410,1710 1710,1830
Overwhelming or something more than

1442
00:44:35,250 --> 00:44:37,120
0,90 90,570 1110,1620
a second a.

1443
00:44:40,210 --> 00:44:42,850
0,660 660,1140 1380,1680 1680,2160 2250,2640
Yeah, so okay, so when

1444
00:44:42,850 --> 00:44:44,000
0,210 210,930
we stop.

1445
00:44:44,210 --> 00:44:45,050
0,240 240,480 480,540 540,750 750,840
Okay, let me another way

1446
00:44:45,050 --> 00:44:47,060
0,180 180,420 420,510 510,1080 1470,2010
to ask this question when

1447
00:44:47,060 --> 00:44:48,020
0,120 120,240 240,510 510,690 690,960
is this kernel page table

1448
00:44:48,020 --> 00:44:48,740
0,450
freak.

1449
00:44:52,000 --> 00:44:53,260
0,210 210,300 300,600 600,1110 1110,1260
When the user process is

1450
00:44:53,260 --> 00:44:54,580
0,330 330,720 720,930 930,1050 1050,1320
done so if we didn't

1451
00:44:54,580 --> 00:44:55,990
0,420 420,630 630,780 780,1080 1080,1410
switch that would mean that

1452
00:44:55,990 --> 00:44:57,490
0,390 780,1020 1020,1170 1170,1380 1380,1500
that, um, we could be

1453
00:44:57,490 --> 00:44:58,630
0,270 270,330 330,600 600,1020 1020,1140
using a page table of

1454
00:44:58,630 --> 00:44:59,950
0,120 120,510 510,810 840,1080 1080,1320
a process that was being

1455
00:44:59,950 --> 00:45:01,600
0,480 480,690 690,840 1200,1440 1440,1650
fried, so the page table

1456
00:45:01,600 --> 00:45:02,890
0,210 210,660 870,1080 1080,1170 1170,1290
was fried so we don't

1457
00:45:02,890 --> 00:45:03,700
0,120 120,180 180,270 270,720 720,810
want to be dependent on

1458
00:45:03,700 --> 00:45:04,930
0,60 60,480 480,600 600,870 900,1230
the crosses were not running

1459
00:45:04,930 --> 00:45:06,850
0,180 180,540 780,1080 1080,1500 1500,1920
right now yeah exactly we

1460
00:45:06,850 --> 00:45:07,870
0,90 90,390 390,690 690,780 780,1020
can never free to page,

1461
00:45:07,870 --> 00:45:08,620
0,60 60,270 270,330 330,450 450,750
the info of a caution

1462
00:45:08,620 --> 00:45:09,800
0,150 150,510 510,900
that's currently running.

1463
00:45:10,400 --> 00:45:11,510
0,660 660,810 810,930 930,1050 1050,1110
Um, so we have to

1464
00:45:11,510 --> 00:45:12,680
0,120 120,330 330,900 930,1080 1080,1170
have some plan, you know

1465
00:45:12,680 --> 00:45:14,720
0,240 240,570 570,840 840,1530 1530,2040
to actually three processes at

1466
00:45:14,720 --> 00:45:15,560
0,90 90,360 360,450 450,600 600,840
the point that they're not

1467
00:45:15,560 --> 00:45:16,460
0,210 210,690
running anymore.

1468
00:45:16,860 --> 00:45:18,060
0,330 330,540 540,660 660,900 900,1200
And you know the wait

1469
00:45:18,060 --> 00:45:19,200
0,300 300,660 660,780 780,900 900,1140
system call is our way

1470
00:45:19,200 --> 00:45:21,270
0,300 300,810 840,1350 1350,1920 1920,2070
out, basically wait calls look

1471
00:45:21,270 --> 00:45:22,410
0,180 180,330 330,540 540,990 990,1140
if there's any children that

1472
00:45:22,410 --> 00:45:23,940
0,630 630,720 720,1260 1260,1350 1350,1530
are are not you know

1473
00:45:24,000 --> 00:45:25,020
0,210 210,330 330,420 420,690 690,1020
that can be cleaned up.

1474
00:45:25,350 --> 00:45:26,190
0,180 180,300 300,390 390,660 660,840
And then they close them

1475
00:45:26,190 --> 00:45:26,700
0,330
up.

1476
00:45:27,190 --> 00:45:29,080
0,720 930,1200 1200,1410 1410,1770 1770,1890
Um, and that means that

1477
00:45:29,080 --> 00:45:32,080
0,750 870,1440 1440,1950 1950,2400 2580,3000
basically, um when the pain

1478
00:45:32,080 --> 00:45:33,400
0,540 540,750 750,960 960,1260 1260,1320
processing things over process, we're

1479
00:45:33,400 --> 00:45:34,510
0,120 120,180 180,390 390,780 780,1110
going to make absolutely sure

1480
00:45:34,510 --> 00:45:36,460
0,180 180,300 300,390 390,690 1050,1950
that you know that um.

1481
00:45:36,860 --> 00:45:38,030
0,150 150,390 390,870 870,1080 1080,1170
The page table that is

1482
00:45:38,030 --> 00:45:39,830
0,300 300,390 390,480 480,1230 1230,1800
loaded in the sep register

1483
00:45:40,040 --> 00:45:41,240
0,270 270,510 510,990 990,1080 1080,1200
a is not you know

1484
00:45:41,240 --> 00:45:42,890
0,330 330,450 450,1110 1290,1470 1470,1650
one of the is not

1485
00:45:42,890 --> 00:45:43,480
0,300
that.

1486
00:45:43,510 --> 00:45:45,280
0,600 600,720 720,1170 1170,1350 1350,1770
Process you paycheck will reaction

1487
00:45:45,280 --> 00:45:46,340
0,90 90,420 420,810
to {33. -}

1488
00:45:47,030 --> 00:45:47,690
0,300 300,390 390,510 510,600 600,660
Now it could be the

1489
00:45:47,690 --> 00:45:48,920
0,240 240,480 480,690 690,1050 1050,1230
case there's no process running

1490
00:45:48,920 --> 00:45:50,480
0,120 120,420 450,780 1230,1440 1440,1560
at all right and so

1491
00:45:50,480 --> 00:45:51,560
0,90 90,510 510,840 840,990 990,1080
the scheduler basically has its

1492
00:45:51,560 --> 00:45:53,300
0,210 210,450 450,960 1230,1530 1530,1740
own page table, a sort

1493
00:45:53,300 --> 00:45:54,650
0,270 270,540 540,960 960,1110 1110,1350
of all processes can actually

1494
00:45:54,650 --> 00:45:55,500
0,90 90,360 360,600
be cleaned up.

1495
00:45:59,410 --> 00:46:00,320
0,180 180,330 330,660
That makes sense.

1496
00:46:05,860 --> 00:46:06,700
0,180 180,510 510,600 600,780 780,840
I'm sorry I had a

1497
00:46:06,700 --> 00:46:09,430
0,750 780,1500 1530,1770 1770,2070 2400,2730
question, um, is it that

1498
00:46:09,430 --> 00:46:11,680
0,480 510,1200 1200,1470 1470,1830 1830,2250
you're mapping the C L

1499
00:46:11,680 --> 00:46:12,700
0,150 150,270 270,810
I N T.

1500
00:46:12,970 --> 00:46:15,340
0,390 390,720 810,1290 1290,2040 2040,2370
Into the new process kernel

1501
00:46:15,340 --> 00:46:17,100
0,270 270,930
page tables.

1502
00:46:18,030 --> 00:46:20,910
0,720 810,1590 2070,2550 2550,2730 2730,2880
Why, um, because I think

1503
00:46:20,910 --> 00:46:21,870
0,60 60,450 450,690 690,900 900,960
the assignment says, like I

1504
00:46:21,870 --> 00:46:23,900
0,300 300,510 510,930 930,1740
only have to um.

1505
00:46:24,000 --> 00:46:25,350
0,510 510,810 810,900 900,1110 1110,1350
User process, you will not

1506
00:46:25,350 --> 00:46:28,080
0,90 90,510 510,1320 1860,2280 2280,2730
be bigger than a clean

1507
00:46:28,200 --> 00:46:28,980
0,120 120,300 300,510
is not it.

1508
00:46:29,460 --> 00:46:30,990
0,150 150,930 930,1260 1260,1470 1470,1530
When I map both the

1509
00:46:30,990 --> 00:46:32,160
0,330 330,420 420,480 480,900
public and the client.

1510
00:46:32,750 --> 00:46:33,980
0,360 360,570 570,990 990,1170 1170,1230
Right, and so but I

1511
00:46:33,980 --> 00:46:35,090
0,180 180,270 270,660 660,930 930,1110
think the assignment told us

1512
00:46:35,090 --> 00:46:36,620
0,450 930,1080 1080,1290 1290,1410 1410,1530
that so what is the

1513
00:46:36,620 --> 00:46:38,210
0,360 360,810 840,930 930,1170 1170,1590
lowest one I think there.

1514
00:46:40,170 --> 00:46:41,700
0,300 300,450 450,750 780,1080 1080,1530
Click is to close one

1515
00:46:41,700 --> 00:46:42,840
0,90 90,420 420,720 720,1020 1020,1140
and maybe san told us

1516
00:46:42,840 --> 00:46:43,890
0,210 210,300 300,570 570,900 900,1050
that the user process will

1517
00:46:43,890 --> 00:46:44,880
0,210 210,300 300,660 660,900 900,990
not be bigger than the

1518
00:46:44,880 --> 00:46:45,480
0,360
click.

1519
00:46:47,110 --> 00:46:48,380
0,480 480,1080
Dress bag.

1520
00:46:49,340 --> 00:46:50,160
0,570
Father.

1521
00:46:50,940 --> 00:46:51,900
0,300 300,360 360,510 510,600 600,960
Just to make it easy,

1522
00:46:51,960 --> 00:46:53,790
0,300 300,540 540,840 840,840 1530,1830
we could then um, want

1523
00:46:53,790 --> 00:46:54,390
0,60 60,240 240,300 300,450 450,600
to make it as easy

1524
00:46:54,390 --> 00:46:55,530
0,90 90,480 480,600 600,840 840,1140
as possible for you clear

1525
00:46:55,530 --> 00:46:56,730
0,150 150,270 270,360 360,600 600,1200
you could have done a

1526
00:46:56,760 --> 00:46:57,810
0,240 240,330 330,450 450,690 690,1050
better if you wanted to

1527
00:46:58,110 --> 00:46:59,020
0,690
um.

1528
00:46:59,260 --> 00:47:01,270
0,1050 1080,1380 1440,1590 1590,1680 1680,2010
Um, but you know that

1529
00:47:01,270 --> 00:47:02,200
0,150 150,330 330,720 720,870 870,930
was the simplest thing to

1530
00:47:02,200 --> 00:47:02,720
0,270
do.

1531
00:47:03,500 --> 00:47:04,190
0,150 150,300 300,420 420,510 510,690
So you have to make

1532
00:47:04,190 --> 00:47:05,330
0,300 300,840 840,930 930,1050 1050,1140
huge modifications to get it

1533
00:47:05,330 --> 00:47:05,980
0,90 90,420
to work.

1534
00:47:11,640 --> 00:47:12,840
0,180 180,360 360,1020
Any further questions.

1535
00:47:13,700 --> 00:47:14,660
0,270 270,360 360,480 480,540 540,960
A I have a question,

1536
00:47:15,740 --> 00:47:17,480
0,180 180,300 300,1170 1320,1560 1560,1740
is it possible that you

1537
00:47:17,480 --> 00:47:20,060
0,570 600,1560 1590,2130 2130,2280 2280,2580
can copy zero to five

1538
00:47:20,060 --> 00:47:21,620
0,510 540,660 660,960 960,1230 1230,1560
twelve and then every time

1539
00:47:21,620 --> 00:47:22,910
0,150 150,570 570,750 750,990 990,1290
you switch so you're still

1540
00:47:22,910 --> 00:47:24,950
0,390 390,630 630,780 780,1410 1650,2040
using like the global route

1541
00:47:24,950 --> 00:47:26,210
0,240 240,630 660,930 930,1080 1080,1260
page table except you only

1542
00:47:26,210 --> 00:47:28,400
0,360 360,990 1140,1740 1740,1950 1950,2190
copy the first route page

1543
00:47:28,400 --> 00:47:30,650
0,420 1080,1560 1590,1860 1860,2130 2130,2250
table and every time you

1544
00:47:30,650 --> 00:47:32,450
0,390 390,510 510,1170 1170,1320 1320,1800
switch a process you copy

1545
00:47:32,450 --> 00:47:35,540
0,510 510,1230 1260,2040 2070,2700 2700,3090
over the user's addresses over

1546
00:47:35,570 --> 00:47:37,820
0,390 720,1410 1410,1620 1620,1800 1800,2250
to yeah is that possible

1547
00:47:37,820 --> 00:47:38,540
0,90 90,450
to do.

1548
00:47:39,040 --> 00:47:39,880
0,120 120,480 480,570 570,750 750,840
In principle I think you

1549
00:47:39,880 --> 00:47:40,720
0,120 120,210 210,480 480,630 630,840
could do something like that,

1550
00:47:40,720 --> 00:47:42,430
0,120 120,510 510,660 660,1290 1350,1710
so instead of basically doing

1551
00:47:42,430 --> 00:47:43,540
0,210 210,330 330,690 690,750 750,1110
when you allocate a process

1552
00:47:43,540 --> 00:47:44,590
0,120 120,510 510,630 630,780 780,1050
and create you could do

1553
00:47:44,590 --> 00:47:46,570
0,240 240,1170 1200,1560 1560,1680 1680,1980
to dynamically during this color

1554
00:47:46,570 --> 00:47:47,240
0,540
switch.

1555
00:47:47,920 --> 00:47:52,450
0,750 1170,1800 1920,2550 2610,3540 3570,4530
Um, um seems complicated, um.

1556
00:47:53,270 --> 00:47:54,590
0,690 720,930 930,1080 1080,1170 1170,1320
Um, that might be more

1557
00:47:54,590 --> 00:47:55,910
0,510 510,750 750,900 900,1140 1140,1320
costly because that means that

1558
00:47:55,910 --> 00:47:57,040
0,270 270,900
every time.

1559
00:47:57,140 --> 00:47:58,910
0,300 300,630 630,960 960,1080 1080,1770
You switch between two processes,

1560
00:47:58,910 --> 00:47:59,810
0,210 210,450 450,630 630,720 720,900
you may have to make

1561
00:47:59,810 --> 00:48:00,680
0,60 60,360 360,450 450,690 690,870
a copy of parts with

1562
00:48:00,710 --> 00:48:02,480
0,600 600,840 840,1080 1080,1530
a kernel page table.

1563
00:48:02,870 --> 00:48:04,460
0,840 840,1080 1080,1230 1230,1410 1410,1590
Um, and so that might

1564
00:48:04,460 --> 00:48:06,170
0,420 450,1020 1050,1260 1260,1350 1350,1710
be a term to perform

1565
00:48:06,170 --> 00:48:07,250
0,90 90,270 270,360 360,750 750,1080
it's not an ideal thing.

1566
00:48:07,640 --> 00:48:09,020
0,330 330,480 480,930 930,1170 1170,1380
Um the assignment didn't really

1567
00:48:09,020 --> 00:48:11,150
0,240 240,510 510,780 780,1020 1440,2130
say anything about it, um,

1568
00:48:11,180 --> 00:48:12,350
0,210 210,450 450,570 570,900 900,1170
you might have turned out

1569
00:48:12,350 --> 00:48:13,550
0,180 180,420 420,900 930,1080 1080,1200
in user tests, if you

1570
00:48:13,550 --> 00:48:14,320
0,150 150,540
did that.

1571
00:48:18,070 --> 00:48:19,240
0,360 360,510 510,660 660,840 840,1170
Yeah I was just wondering

1572
00:48:19,240 --> 00:48:20,350
0,180 180,270 270,570 570,750 750,1110
cause I tried that approach

1573
00:48:20,350 --> 00:48:21,820
0,270 270,360 360,900 1020,1200 1200,1470
and it was a bad

1574
00:48:21,820 --> 00:48:23,260
0,630 660,750 750,990 990,1290 1290,1440
experience I was wondering if

1575
00:48:23,260 --> 00:48:24,160
0,90 90,240 240,630 630,780 780,900
I was passing I can

1576
00:48:24,160 --> 00:48:26,350
0,450 450,1170 1230,1710 1710,1890 1890,2190
imagine, but I I think

1577
00:48:26,350 --> 00:48:27,670
0,120 120,210 210,540 540,1170 1170,1320
it's in principle possible you

1578
00:48:27,670 --> 00:48:28,780
0,300 300,630 630,690 690,870 870,1110
could allocate a new page

1579
00:48:28,780 --> 00:48:30,460
0,240 240,570 570,660 660,1410 1410,1680
table correctly and switch every

1580
00:48:30,460 --> 00:48:31,140
0,390
time.

1581
00:48:31,980 --> 00:48:33,060
0,180 180,600 600,750 750,840 840,1080
And afraid when you switch

1582
00:48:33,060 --> 00:48:33,640
0,330
out.

1583
00:48:38,820 --> 00:48:39,720
0,90 90,300 300,420 420,570 570,900
I don't think it's simple,

1584
00:48:39,720 --> 00:48:41,130
0,300 300,390 390,780 780,1320 1320,1410
but you know principle, it's

1585
00:48:41,130 --> 00:48:42,100
0,360 360,450 450,720
possible I think.

1586
00:48:43,410 --> 00:48:44,790
0,480 480,600 600,750 750,1290 1290,1380
Perhaps some other modifications to

1587
00:48:44,790 --> 00:48:45,960
0,240 240,600 600,780 810,930 930,1170
actually six but you know.

1588
00:48:48,760 --> 00:48:49,880
0,180 180,330 330,870
Any other questions.

1589
00:48:56,660 --> 00:48:57,770
0,150 150,300 300,540 540,810 810,1110
But the only other change

1590
00:48:57,770 --> 00:48:58,370
0,150 150,210 210,390 390,510 510,600
that, of course have to

1591
00:48:58,370 --> 00:48:59,330
0,210 210,300 300,600 600,660 660,960
make is use a trap

1592
00:48:59,330 --> 00:49:00,470
0,390 480,750 750,930 930,990 990,1140
rat, you got to make

1593
00:49:00,470 --> 00:49:02,300
0,240 240,420 420,960 960,1230 1230,1830
sure that actually you run

1594
00:49:02,300 --> 00:49:03,260
0,300 300,720
with a.

1595
00:49:03,540 --> 00:49:04,950
0,210 210,420 420,930 930,1200 1200,1410
Um the processes kernel page

1596
00:49:04,950 --> 00:49:05,560
0,360
table.

1597
00:49:07,390 --> 00:49:08,200
0,570
Okay.

1598
00:49:09,390 --> 00:49:10,440
0,210 210,330 330,480 480,810 810,1050
Okay, so let's switch them

1599
00:49:10,440 --> 00:49:12,030
0,540 540,600 600,600 1200,1290 1290,1590
to um I can spark

1600
00:49:12,030 --> 00:49:12,740
0,480
free.

1601
00:49:13,290 --> 00:49:14,400
0,870
I'm.

1602
00:49:15,420 --> 00:49:17,550
0,600 750,1080 1080,1410 1410,1590 1590,2130
To switch back to actually.

1603
00:49:19,850 --> 00:49:22,060
0,690 1050,1950
Here a.

1604
00:49:24,470 --> 00:49:26,750
0,330 330,870 870,1470 1500,1890 1890,2280
Okay, so um actually that's

1605
00:49:26,750 --> 00:49:28,160
0,270 270,450 450,510 510,810 810,1410
maybe not a helpful picture

1606
00:49:30,620 --> 00:49:34,500
0,750 750,990
for you.

1607
00:49:36,820 --> 00:49:39,130
0,930 960,1680 1680,1890 1890,2010 2010,2310
So basically what our plan

1608
00:49:39,130 --> 00:49:40,690
0,330 330,900 900,1140 1140,1290 1290,1560
is we have our kernel

1609
00:49:40,690 --> 00:49:41,760
0,270 270,810
page table.

1610
00:49:42,410 --> 00:49:45,110
0,210 210,840 1380,2370 2430,2580 2580,2700
As before, and you know

1611
00:49:45,110 --> 00:49:46,490
0,180 180,510 510,780 810,1050 1050,1380
we have the quick entry

1612
00:49:46,490 --> 00:49:47,740
0,360 360,990
sitting somewhere.

1613
00:49:48,420 --> 00:49:49,500
0,330 330,510 510,600 600,750 750,1080
And what we're gonna do

1614
00:49:49,500 --> 00:49:51,630
0,330 330,630 630,1110 1410,2040 2040,2130
is we're gonna use you

1615
00:49:51,630 --> 00:49:53,600
0,720 720,1260 1290,1770
everything below click.

1616
00:49:53,690 --> 00:49:55,160
0,150 150,390 390,720 720,810 810,1470
To actually store the user.

1617
00:49:57,720 --> 00:49:58,860
0,270 270,600 660,930 930,1080 1080,1140
Page table, we're going to

1618
00:49:58,860 --> 00:50:00,150
0,360 360,420 420,660 660,900 900,1290
map the user page table

1619
00:50:00,150 --> 00:50:01,740
0,570 570,750 750,840 840,1110 1110,1590
into all the user program,

1620
00:50:01,740 --> 00:50:02,970
0,90 90,360 360,750 750,1050 1050,1230
the user program actually in

1621
00:50:02,970 --> 00:50:04,240
0,120 120,420 420,690 690,1020
the kernel page table.

1622
00:50:05,180 --> 00:50:06,120
0,210 210,270 270,690
In the bottom.

1623
00:50:09,240 --> 00:50:10,560
0,330 330,480 480,660 660,750 750,1320
Um, and that's the goal

1624
00:50:10,590 --> 00:50:12,060
0,480 480,780 780,870 870,1200 1200,1470
and what's the first question

1625
00:50:12,060 --> 00:50:13,680
0,60 60,540 540,690 690,1260 1440,1620
to ask you know why

1626
00:50:13,680 --> 00:50:15,360
0,120 120,300 300,420 420,720 960,1680
the heck do that, um.

1627
00:50:16,180 --> 00:50:17,260
0,120 120,300 300,720 720,840 840,1080
Is there any you know

1628
00:50:17,260 --> 00:50:18,820
0,240 240,630 630,780 780,1080 1080,1560
any advantage of it and

1629
00:50:19,150 --> 00:50:20,170
0,540 540,690 690,780 780,810 810,1020
um you know I think

1630
00:50:20,170 --> 00:50:21,250
0,240 240,330 330,660 690,960 960,1080
maybe the milk it may

1631
00:50:21,250 --> 00:50:23,200
0,210 210,660 720,990 990,1260 1260,1950
be a easy way to.

1632
00:50:24,050 --> 00:50:25,310
0,390 390,720 720,930 930,1140 1140,1260
See why it might be

1633
00:50:25,310 --> 00:50:27,200
0,660 840,1050 1050,1140 1140,1530 1530,1890
interesting is to core compare

1634
00:50:27,200 --> 00:50:28,380
0,60 60,540 540,1020
to copy inns.

1635
00:50:28,930 --> 00:50:30,160
0,390 390,540 540,720 720,1170 1170,1230
Um the new copy of

1636
00:50:30,160 --> 00:50:31,260
0,90 90,300 300,840
the old copy.

1637
00:50:32,790 --> 00:50:34,200
0,510 540,1110
So, um.

1638
00:50:34,780 --> 00:50:36,520
0,660 960,1080 1080,1200 1200,1440 1440,1740
If you know what happens

1639
00:50:36,520 --> 00:50:37,750
0,240 240,360 360,750 750,900 900,1230
in the copy, it correctly

1640
00:50:37,750 --> 00:50:40,360
0,720 780,1590 1740,2340 2340,2550 2550,2610
copying copies data from the

1641
00:50:40,360 --> 00:50:41,950
0,330 330,780 780,1110 1110,1200 1200,1590
user space into the criminal

1642
00:50:41,950 --> 00:50:42,880
0,270 270,810
address space.

1643
00:50:43,590 --> 00:50:47,220
0,690 1140,1980 2070,2700 2820,3390 3480,3630
Um, and um, but you

1644
00:50:47,220 --> 00:50:48,720
0,450 660,840 840,930 930,1260 1260,1500
know if the kernel has

1645
00:50:48,720 --> 00:50:50,130
0,240 240,570 570,990 990,1110 1110,1410
does not have the user

1646
00:50:50,130 --> 00:50:51,460
0,570 570,1110
investigates map.

1647
00:50:51,760 --> 00:50:53,680
0,660 750,1320 1320,1440 1440,1740 1740,1920
Um, basically the kernel has

1648
00:50:53,680 --> 00:50:55,600
0,90 90,330 330,720 720,1320 1560,1920
to do this a page

1649
00:50:55,600 --> 00:50:56,440
0,90 90,150 150,570
at a time.

1650
00:50:57,080 --> 00:50:58,340
0,390 390,630 630,720 720,1140 1140,1260
Correct, because the pages in

1651
00:50:58,340 --> 00:50:59,780
0,330 330,900 900,1170 1170,1320 1320,1440
virtual address space may be

1652
00:50:59,780 --> 00:51:01,190
0,570 570,720 720,810 810,1140 1140,1410
continuous with the physical address

1653
00:51:01,190 --> 00:51:02,660
0,240 240,420 420,630 630,1260
space, they're not continuous.

1654
00:51:02,990 --> 00:51:03,890
0,180 180,420 420,510 510,600 600,900
And basically with the kernel

1655
00:51:03,890 --> 00:51:06,410
0,330 330,1020 1020,1140 1140,1680 1800,2520
doesn't copy it basically translates

1656
00:51:06,410 --> 00:51:08,160
0,120 120,660 660,930 930,1560
the virtual user address.

1657
00:51:08,370 --> 00:51:10,740
0,840 840,1230 1230,1620 1620,2220
Into a physical address.

1658
00:51:11,490 --> 00:51:12,750
0,300 300,390 390,750 750,1050 1050,1260
Since the kernel has all

1659
00:51:12,750 --> 00:51:15,510
0,480 480,1470 1470,2100 2100,2310 2310,2760
physical memory mapped with identity

1660
00:51:15,510 --> 00:51:17,280
0,600 810,1080 1080,1410 1410,1650 1650,1770
mapping the physical address is

1661
00:51:17,280 --> 00:51:20,130
0,510 510,600 600,1200 1290,2010 2040,2850
also a valid kernel a

1662
00:51:20,160 --> 00:51:21,660
0,420 420,870 1110,1290 1290,1440 1440,1500
virtual dress and then it

1663
00:51:21,660 --> 00:51:22,920
0,420 420,1110
basically moves.

1664
00:51:23,030 --> 00:51:24,260
0,420 420,630 630,690 690,870 870,1230
Whatever part of that page

1665
00:51:24,260 --> 00:51:25,280
0,330 330,600 600,840 840,900 900,1020
physical page needs to be

1666
00:51:25,280 --> 00:51:26,690
0,420 420,600 600,870 870,1230 1230,1410
copied that actually copies it.

1667
00:51:27,960 --> 00:51:29,100
0,300 300,510 510,810 810,870 870,1140
And so if a data

1668
00:51:29,100 --> 00:51:30,900
0,360 360,420 420,960 960,1710 1710,1800
structure, for example spends you

1669
00:51:30,900 --> 00:51:33,150
0,120 120,990 1140,1440 1440,1710 1710,2250
know to a page boundary

1670
00:51:33,150 --> 00:51:34,950
0,240 240,750 750,1050 1050,1380 1380,1800
like example, this info structure

1671
00:51:35,040 --> 00:51:36,000
0,120 120,300 300,570 570,840 840,960
may be used in a

1672
00:51:36,000 --> 00:51:37,720
0,270 270,390 390,750 750,1470
lab to maybe expands.

1673
00:51:37,770 --> 00:51:39,450
0,150 150,420 420,720 720,1290 1530,1680
A page table boundary, it

1674
00:51:39,450 --> 00:51:40,920
0,180 180,660 660,810 810,1350 1350,1470
will copy like maybe you

1675
00:51:40,920 --> 00:51:42,270
0,90 90,390 390,720 720,1050 1050,1350
know some bytes from the

1676
00:51:42,300 --> 00:51:43,950
0,450 450,750 750,1230 1320,1530 1530,1650
first physical page and then

1677
00:51:43,950 --> 00:51:45,510
0,210 210,510 510,660 660,1290 1290,1560
some bytes from z second

1678
00:51:45,510 --> 00:51:46,420
0,300 300,780
physical page.

1679
00:51:48,160 --> 00:51:49,040
0,120 120,180 180,300 300,660
Does it make sense.

1680
00:51:52,180 --> 00:51:53,500
0,330 330,510 510,600 600,870 870,1320
That's what the current copying

1681
00:51:53,500 --> 00:51:54,730
0,450 510,660 660,720 720,1080 1080,1230
does and the goal was

1682
00:51:54,730 --> 00:51:55,630
0,390 390,450 450,600 600,720 720,900
basically to get them through

1683
00:51:55,630 --> 00:51:57,000
0,60 60,300 300,960
a new copy.

1684
00:51:57,850 --> 00:51:58,960
0,270 270,330 330,600 600,930 930,1110
Where the current program didn't

1685
00:51:58,960 --> 00:52:00,460
0,210 210,510 510,630 630,960 960,1500
really have to worry about.

1686
00:52:03,330 --> 00:52:05,700
0,330 330,720 720,1320 1320,1800 1800,2370
The physical layout, basically off

1687
00:52:05,730 --> 00:52:07,160
0,120 120,420 420,750 750,1260
the usual address base.

1688
00:52:07,430 --> 00:52:09,350
0,330 330,630 630,870 870,1200 1200,1920
Um, and this new copy,

1689
00:52:09,350 --> 00:52:09,980
0,120 120,210 210,300 300,510 510,630
you know we see we

1690
00:52:09,980 --> 00:52:11,540
0,360 360,510 510,870 870,1290 1290,1560
basically do nothing, literally nothing

1691
00:52:11,540 --> 00:52:13,300
0,360 360,750 780,1500
else, just copy.

1692
00:52:13,360 --> 00:52:15,400
0,690 1020,1260 1260,1590 1620,1800 1800,2040
Um do you know from

1693
00:52:15,400 --> 00:52:17,020
0,60 60,390 390,900 900,1440 1440,1620
the user addresses trade into

1694
00:52:17,020 --> 00:52:17,860
0,90 90,600
the kernel.

1695
00:52:18,020 --> 00:52:19,250
0,480 480,750 750,840 840,990 990,1230
Um, and we don't really

1696
00:52:19,250 --> 00:52:20,720
0,210 210,300 300,450 450,840 840,1470
have to call walk anymore

1697
00:52:20,930 --> 00:52:22,430
0,480 480,600 600,780 780,1230 1230,1500
because we can rely on

1698
00:52:22,430 --> 00:52:23,180
0,300 300,390 390,570 570,660 660,750
them, he said that the

1699
00:52:23,180 --> 00:52:24,620
0,240 240,570 570,990 990,1260 1260,1440
page tables correctly, now the

1700
00:52:24,620 --> 00:52:25,670
0,210 210,420 420,840 840,930 930,1050
page table hard will do

1701
00:52:25,670 --> 00:52:26,820
0,120 120,390 390,690 690,1020
the walk for us.

1702
00:52:27,330 --> 00:52:27,880
0,360
Right.

1703
00:52:28,710 --> 00:52:29,670
0,210 210,300 300,450 450,570 570,960
And so that was the

1704
00:52:29,700 --> 00:52:32,940
0,750 1260,2010 2460,2910 2910,3150 3150,3240
goal, um, um, and so

1705
00:52:32,940 --> 00:52:33,780
0,120 120,300 300,540 540,600 600,840
that makes life of kernel

1706
00:52:33,780 --> 00:52:34,560
0,450 450,480 480,510 510,660 660,780
programmers are a little bit

1707
00:52:34,560 --> 00:52:36,660
0,630 660,930 930,1170 1170,1380 1380,2100
easier on any other advantages

1708
00:52:36,900 --> 00:52:37,900
0,60 60,210 210,840
to this approach.

1709
00:52:45,120 --> 00:52:46,170
0,150 150,330 330,630 630,900 900,1050
Is it also more per

1710
00:52:46,170 --> 00:52:48,120
0,600 600,990 990,1320 1320,1740 1740,1950
formant because the hardware is

1711
00:52:48,120 --> 00:52:49,440
0,300 300,720 720,870 870,1230 1230,1320
gonna do the walking and

1712
00:52:49,440 --> 00:52:50,840
0,270 270,840
not software.

1713
00:52:51,090 --> 00:52:52,740
0,390 390,750 750,870 870,1530 1530,1650
Yeah one way to I

1714
00:52:52,740 --> 00:52:54,090
0,180 180,300 300,690 690,1260 1260,1350
think their performance implications for

1715
00:52:54,090 --> 00:52:55,680
0,510 690,1110 1110,1380 1380,1500 1500,1590
sure, um, one way to

1716
00:52:55,680 --> 00:52:56,850
0,180 180,450 450,630 630,780 780,1170
think about this is that

1717
00:52:57,210 --> 00:52:59,100
0,300 300,780 780,1320 1320,1680 1680,1890
in copy incorrect, if the

1718
00:52:59,130 --> 00:53:01,140
0,300 300,540 540,1200 1200,1440 1440,2010
kernel data structure or data

1719
00:53:01,170 --> 00:53:02,250
0,420 420,540 540,660 660,960 960,1080
data that we copied from

1720
00:53:02,250 --> 00:53:03,800
0,240 240,720 720,1290
user space to.

1721
00:53:03,880 --> 00:53:06,340
0,540 570,810 810,1170 1170,1710 1920,2460
A current spaces big, um,

1722
00:53:06,340 --> 00:53:07,420
0,390 390,570 570,660 660,810 810,1080
we have to do that

1723
00:53:07,420 --> 00:53:08,020
0,90 90,210 210,450 450,570 570,600
you know page at a

1724
00:53:08,020 --> 00:53:08,700
0,420
time.

1725
00:53:09,030 --> 00:53:10,140
0,240 240,390 390,630 630,930 930,1110
Right in every page, we

1726
00:53:10,140 --> 00:53:11,250
0,120 120,210 210,450 450,660 660,1110
have to call this function

1727
00:53:11,250 --> 00:53:12,600
0,360 360,510 510,660 660,780 780,1350
walk at her, and then

1728
00:53:12,600 --> 00:53:13,940
0,180 180,300 300,630 630,1080
there's the internal walking.

1729
00:53:14,250 --> 00:53:16,620
0,360 360,570 570,990 1140,1830 2130,2370
Um, and so, um, this

1730
00:53:16,620 --> 00:53:17,460
0,180 180,390 390,480 480,540 540,840
might actually be a reasonable

1731
00:53:17,460 --> 00:53:19,000
0,660 690,1350
expenses expensive.

1732
00:53:19,650 --> 00:53:21,390
0,210 210,1020 1050,1170 1170,1290 1290,1740
What examples are there examples

1733
00:53:21,390 --> 00:53:23,130
0,60 60,750 960,1110 1110,1410 1410,1740
of where the kernel copies

1734
00:53:23,130 --> 00:53:24,540
0,60 60,330 330,420 420,870 900,1410
a lot of data from

1735
00:53:24,570 --> 00:53:25,960
0,480 480,720 720,1230
a user space.

1736
00:53:33,340 --> 00:53:35,260
0,270 270,570 570,990 990,1350 1350,1920
Which system call might copy

1737
00:53:35,290 --> 00:53:36,040
0,30 30,270 270,360 360,630 630,750
a ton of data from

1738
00:53:36,040 --> 00:53:36,920
0,240 240,690
user space.

1739
00:53:38,550 --> 00:53:40,860
0,630 1050,1320 1320,1710 1740,2100 2100,2310
Right, yeah right, right, you're

1740
00:53:40,860 --> 00:53:41,520
0,210 210,330 330,420 420,570 570,660
right, you can give an

1741
00:53:41,520 --> 00:53:43,580
0,630 630,1740
arbitrary number.

1742
00:53:43,750 --> 00:53:46,390
0,150 150,960 1140,1380 1380,1980 2340,2640
An arbitrary a buffer of

1743
00:53:46,390 --> 00:53:47,660
0,450 450,1080
arbitrary size.

1744
00:53:47,760 --> 00:53:48,990
0,660 660,780 780,870 870,960 960,1230
And you know the criminal

1745
00:53:48,990 --> 00:53:50,010
0,240 240,480 480,630 630,720 720,1020
law may have to copy

1746
00:53:50,010 --> 00:53:51,720
0,330 480,1230 1230,1350 1350,1620 1620,1710
this into our temple, the

1747
00:53:51,720 --> 00:53:52,600
0,240 240,660
file system.

1748
00:53:53,100 --> 00:53:54,320
0,240 240,450 450,540 540,1020
Or into a pipe.

1749
00:53:54,810 --> 00:53:56,100
0,390 390,720 720,840 840,960 960,1290
Um, and that could be

1750
00:53:56,130 --> 00:53:57,240
0,120 120,390 390,870
a reasonable expense.

1751
00:54:00,180 --> 00:54:01,170
0,150 150,300 300,660 660,900 900,990
You gotta think what is

1752
00:54:01,170 --> 00:54:03,390
0,270 270,780 780,1440 1470,1560 1560,2220
another advantage if the user,

1753
00:54:03,660 --> 00:54:05,580
0,270 270,960 960,1260 1290,1710 1710,1920
um, we didn't explore that

1754
00:54:05,580 --> 00:54:07,110
0,60 60,210 210,870 870,1260 1290,1530
in this assignment, we should

1755
00:54:07,110 --> 00:54:08,000
0,90 90,270 270,630
we could have.

1756
00:54:08,170 --> 00:54:09,880
0,240 240,600 600,810 810,1560
Um, one other advantage.

1757
00:54:13,060 --> 00:54:14,620
0,300 390,540 540,780 780,1080 1080,1560
So if you think about

1758
00:54:14,740 --> 00:54:15,730
0,150 150,270 270,480 480,780 810,990
some of these, um, this

1759
00:54:15,730 --> 00:54:17,020
0,270 270,450 450,720 720,870 870,1290
code here correct when it

1760
00:54:17,020 --> 00:54:18,040
0,240 240,300 300,780 780,930 930,1020
takes a structure out of

1761
00:54:18,040 --> 00:54:19,080
0,240 240,810
user space.

1762
00:54:19,160 --> 00:54:20,420
0,150 150,450 450,540 540,690 690,1260
It copies the whole structure

1763
00:54:20,870 --> 00:54:22,160
0,330 330,600 600,1140
into criminal space.

1764
00:54:22,880 --> 00:54:24,530
0,570 600,930 930,1200 1200,1290 1290,1650
If user space is mapped

1765
00:54:24,530 --> 00:54:25,610
0,240 240,330 330,570 570,780 780,1080
into the kernel page table

1766
00:54:25,610 --> 00:54:26,180
0,90 90,240 240,360 360,450 450,570
do we have to do

1767
00:54:26,180 --> 00:54:26,800
0,390
that.

1768
00:54:31,630 --> 00:54:32,470
0,120 120,480 480,570 570,690 690,840
For example, if we have

1769
00:54:32,470 --> 00:54:33,490
0,120 120,390 390,630 630,930 930,1020
to update one field of

1770
00:54:33,490 --> 00:54:34,480
0,120 120,720
the structure.

1771
00:54:46,830 --> 00:54:48,060
0,210 210,900
So if.

1772
00:54:48,440 --> 00:54:50,000
0,540 540,870 870,930 930,1170 1170,1560
Data structure is just mapped

1773
00:54:50,000 --> 00:54:51,230
0,180 180,300 300,600 600,870 870,1230
into the kernel address space

1774
00:54:51,230 --> 00:54:52,790
0,210 210,660 690,870 870,990 990,1560
right, then we can usually

1775
00:54:52,880 --> 00:54:54,530
0,690 690,780 780,960 960,1290 1290,1650
rewrite you know with storage

1776
00:54:54,530 --> 00:54:55,760
0,390 390,510 510,660 660,1020 1020,1230
structures through that particular data

1777
00:54:55,760 --> 00:54:56,990
0,420 420,570 570,690 690,870 870,1230
structure, we can use update

1778
00:54:56,990 --> 00:54:57,860
0,210 210,630
one field.

1779
00:54:58,320 --> 00:54:59,670
0,570 570,630 630,870 870,1080 1080,1350
Unlike the current now does

1780
00:54:59,670 --> 00:55:01,920
0,510 510,660 660,1140 1140,1470 1740,2250
basically it copies the structure

1781
00:55:01,920 --> 00:55:02,520
0,360
from.

1782
00:55:02,850 --> 00:55:04,170
0,330 330,630 630,720 720,990 990,1320
Kernel space to user space,

1783
00:55:04,170 --> 00:55:05,460
0,120 120,210 210,630 630,930 930,1290
and then maybe back out

1784
00:55:05,460 --> 00:55:06,560
0,210 210,600 600,930
using copy out.

1785
00:55:07,110 --> 00:55:08,580
0,180 180,480 480,780 840,1380 1380,1470
And so we map the

1786
00:55:08,580 --> 00:55:10,080
0,240 240,660 660,1200 1200,1290 1290,1500
user space into the user

1787
00:55:10,080 --> 00:55:11,190
0,360 360,600 600,660 660,900 900,1110
program into the kernel address

1788
00:55:11,190 --> 00:55:12,630
0,420 450,600 600,720 720,900 900,1440
space, we can just manipulate

1789
00:55:12,630 --> 00:55:14,820
0,120 120,330 330,660 990,1620 1650,2190
it much more freely than

1790
00:55:14,880 --> 00:55:15,750
0,390 390,510 510,660 660,750 750,870
a the way we do

1791
00:55:15,750 --> 00:55:16,380
0,120 120,420
it now.

1792
00:55:18,620 --> 00:55:19,520
0,240 240,330 330,480 480,750 750,900
Does that make sense in

1793
00:55:19,520 --> 00:55:21,680
0,210 210,270 270,990 1410,1890 1890,2160
terms of motivation, why many

1794
00:55:21,680 --> 00:55:23,540
0,360 360,1020 1020,1350 1350,1500 1500,1860
kernels actually have this particular

1795
00:55:23,540 --> 00:55:24,830
0,390 390,540 540,660 660,1050 1050,1290
structure where they map the.

1796
00:55:27,170 --> 00:55:28,610
0,390 390,630 630,690 690,780 780,1440
Bottom part of the user

1797
00:55:28,790 --> 00:55:30,530
0,720 720,840 840,1380 1380,1440 1440,1740
were to map the user

1798
00:55:30,530 --> 00:55:31,550
0,360 360,540 540,600 600,840 840,1020
program into the bottom part

1799
00:55:31,550 --> 00:55:32,600
0,60 60,150 150,390 390,600 600,1050
of the kernel address space.

1800
00:55:39,260 --> 00:55:40,040
0,570
Okay.

1801
00:55:41,880 --> 00:55:42,940
0,840
I'm.

1802
00:55:44,750 --> 00:55:46,280
0,330 330,810 810,1230 1230,1350 1350,1530
Okay, so um, so let's

1803
00:55:46,280 --> 00:55:47,630
0,480 480,540 540,1170 1170,1230 1230,1350
see a look at my

1804
00:55:47,630 --> 00:55:49,910
0,660 690,1350 1740,2010 2010,2160 2160,2280
code and and so you

1805
00:55:49,910 --> 00:55:52,040
0,570 570,870 870,1470 1470,1890
understand what actually, um.

1806
00:55:52,980 --> 00:55:54,510
0,60 60,60 960,1200 1200,1410 1410,1530
Um, I I guess so

1807
00:55:54,510 --> 00:55:56,340
0,180 180,570 570,1110 1170,1680 1680,1830
there's basically one function that

1808
00:55:56,340 --> 00:55:58,440
0,120 120,180 180,750 930,990 990,2100
is the key you know

1809
00:55:58,470 --> 00:55:59,640
0,270 270,390 390,510 510,780 780,1170
assume we were building somewhere

1810
00:55:59,640 --> 00:56:00,420
0,510
ballot.

1811
00:56:00,570 --> 00:56:01,740
0,180 180,450 450,660 660,1050 1050,1170
A user page table, and

1812
00:56:01,740 --> 00:56:02,400
0,120 120,210 210,360 360,570 570,660
then we just have to

1813
00:56:02,400 --> 00:56:05,040
0,480 930,1710 1740,2250 2250,2520 2520,2640
map a entries from the

1814
00:56:05,040 --> 00:56:06,480
0,270 270,510 510,990 1020,1350 1350,1440
user page table into the

1815
00:56:06,480 --> 00:56:07,740
0,270 270,510 510,1020
kernel page table.

1816
00:56:07,960 --> 00:56:10,330
0,780 780,1050 1050,1830 1860,2160 2160,2370
Um order processes, kernel page

1817
00:56:10,330 --> 00:56:11,950
0,390 390,570 570,900 900,1350 1350,1620
tables or function, caveat map

1818
00:56:11,950 --> 00:56:13,580
0,450 450,810 810,1020 1020,1440
user exactly does this.

1819
00:56:13,930 --> 00:56:16,090
0,630 870,1140 1140,1440 1440,1650 1650,2160
Um, and it's pretty boring,

1820
00:56:16,090 --> 00:56:17,890
0,840 960,1170 1170,1380 1380,1560 1560,1800
um, ah, the main couple

1821
00:56:17,890 --> 00:56:19,090
0,270 270,540 540,630 630,840 840,1200
interesting points to point out.

1822
00:56:19,540 --> 00:56:21,640
0,300 300,480 480,900 900,1260 1440,2100
Um in work, yeah yeah

1823
00:56:21,910 --> 00:56:23,050
0,300 300,390 390,750 750,960 960,1140
that's the same sort of

1824
00:56:23,050 --> 00:56:24,020
0,0
um.

1825
00:56:24,500 --> 00:56:27,680
0,630 630,1410 1770,2460 2460,2790 2790,3180
Interfaces to a uv malik

1826
00:56:27,680 --> 00:56:29,600
0,150 150,870 930,1080 1080,1680 1680,1920
or whatever or basically if

1827
00:56:29,840 --> 00:56:30,560
0,180 180,270 270,420 420,600 600,720
you know you go from

1828
00:56:30,560 --> 00:56:31,550
0,90 90,300 300,750 750,900 900,990
the old size up to

1829
00:56:31,550 --> 00:56:32,720
0,120 120,300 300,810 810,1050 1050,1170
the new size page at

1830
00:56:32,720 --> 00:56:33,620
0,30 30,600
a time.

1831
00:56:33,980 --> 00:56:34,860
0,630
Yeah.

1832
00:56:35,190 --> 00:56:37,340
0,240 240,600 600,1230 1260,1890
You find Z A.

1833
00:56:38,250 --> 00:56:41,700
0,600 600,1020 1050,1260 1260,1740 2790,3450
GOP e know the pointer

1834
00:56:41,940 --> 00:56:43,140
0,180 180,930
to the.

1835
00:56:43,210 --> 00:56:45,400
0,870 900,1320 1320,1470 1470,1890 1890,2190
Pte, therefore, that particular virtual

1836
00:56:45,400 --> 00:56:46,570
0,360 360,540 540,660 660,930 930,1170
address in the user page

1837
00:56:46,570 --> 00:56:47,340
0,510
table.

1838
00:56:48,000 --> 00:56:49,170
0,240 240,390 390,810 810,1020 1020,1170
And so we look at

1839
00:56:49,170 --> 00:56:50,840
0,330 810,1440
the um.

1840
00:56:51,200 --> 00:56:52,700
0,810 840,930 930,1110 1110,1200 1200,1500
If you look at the

1841
00:56:52,730 --> 00:56:53,930
0,420 420,720 750,960 960,1140 1140,1200
picture that we had a

1842
00:56:53,930 --> 00:56:55,130
0,180 180,390 390,750 750,990 990,1200
little while back here look

1843
00:56:55,130 --> 00:56:57,060
0,570 720,1170 1170,1710
at this picture.

1844
00:56:57,410 --> 00:56:58,550
0,690 690,810 810,960 960,1020 1020,1140
Basically, what this is going

1845
00:56:58,550 --> 00:57:00,170
0,90 90,540 540,780 780,1200 1410,1620
to return back as we're

1846
00:57:00,170 --> 00:57:00,920
0,120 120,180 180,450 450,540 540,750
going to walk the user

1847
00:57:00,920 --> 00:57:02,450
0,240 240,720 720,960 960,1110 1110,1530
page table and we'll find

1848
00:57:02,450 --> 00:57:05,000
0,120 120,630 630,930 960,2160 2370,2550
for example the dpe that

1849
00:57:05,000 --> 00:57:06,650
0,420 420,600 600,960 960,1350 1350,1650
maps in that particular virtual

1850
00:57:06,650 --> 00:57:08,480
0,360 360,540 540,870 900,1230 1230,1830
address where we basically pointer

1851
00:57:08,480 --> 00:57:09,620
0,120 120,420 420,840 840,1050 1050,1140
to that entry into the

1852
00:57:09,620 --> 00:57:10,460
0,390
ph.d.

1853
00:57:11,220 --> 00:57:11,780
0,420
Okay.

1854
00:57:14,740 --> 00:57:16,810
0,150 150,360 360,840 840,1320 1860,2070
And as woodblock does, and

1855
00:57:16,810 --> 00:57:18,970
0,360 360,1290 1320,1800 1800,2040 2040,2160
so if a thing is

1856
00:57:18,970 --> 00:57:21,970
0,480 480,2040 2040,2190 2190,2520 2520,3000
not zero that must mean

1857
00:57:21,970 --> 00:57:22,810
0,120 120,300 300,390 390,660 660,840
at least the answer is

1858
00:57:22,810 --> 00:57:24,610
0,210 210,420 600,1110 1110,1650 1650,1800
just to check double-check that

1859
00:57:24,610 --> 00:57:25,840
0,300 300,390 390,660 660,840 840,1230
actually the map is there.

1860
00:57:26,520 --> 00:57:28,530
0,660 720,990 990,1260 1260,1410 1410,2010
A we check this valve,

1861
00:57:28,920 --> 00:57:30,930
0,690 690,1110 1110,1710 1710,1800 1800,2010
there's debugging help in some

1862
00:57:30,930 --> 00:57:32,160
0,390 390,480 480,660 660,900 960,1230
sense you know we should

1863
00:57:32,160 --> 00:57:32,970
0,120 120,210 210,480 480,690 690,810
be the case that is

1864
00:57:32,970 --> 00:57:33,660
0,450
valid.

1865
00:57:34,070 --> 00:57:34,880
0,390 390,480 480,630 630,690 690,810
Um, and then I do

1866
00:57:34,880 --> 00:57:35,660
0,120 120,390 390,600 600,690 690,780
the same thing in the

1867
00:57:35,660 --> 00:57:37,460
0,240 240,480 480,870 1350,1500 1500,1800
kernel page table I look

1868
00:57:37,460 --> 00:57:38,780
0,120 120,330 330,690 690,1050 1050,1320
up that virtual dress also

1869
00:57:38,780 --> 00:57:40,280
0,180 180,510 540,1050 1050,1170 1170,1500
in the process of kernel

1870
00:57:40,280 --> 00:57:41,720
0,210 210,750 810,990 990,1050 1050,1440
page table, but I call

1871
00:57:41,720 --> 00:57:43,400
0,180 180,690 720,1230 1230,1560 1560,1680
this time a walk with

1872
00:57:43,400 --> 00:57:45,260
0,540 630,840 840,1080 1080,1380 1380,1860
one so it actually allocates

1873
00:57:45,260 --> 00:57:47,160
0,570 570,900 900,1020 1020,1650
intermediate pages if necessary.

1874
00:57:48,460 --> 00:57:50,140
0,540 750,1110 1110,1320 1320,1470 1470,1680
Um, then once I got

1875
00:57:50,140 --> 00:57:51,580
0,420 450,810 810,930 930,1020 1020,1440
the pointer to the kernel

1876
00:57:51,580 --> 00:57:53,560
0,870 1050,1170 1170,1350 1350,1860 1860,1980
peaty I just copy the

1877
00:57:53,560 --> 00:57:54,970
0,300 300,810 810,1050 1050,1140 1140,1410
user petey into the kernel

1878
00:57:54,970 --> 00:57:55,700
0,480
peaty.

1879
00:57:56,730 --> 00:57:58,170
0,660 750,930 930,1230 1230,1290 1290,1440
Um, so probably a lot

1880
00:57:58,170 --> 00:57:59,670
0,90 90,330 330,870 870,1230 1230,1500
of you called a map

1881
00:57:59,670 --> 00:58:00,540
0,690
pages.

1882
00:58:00,620 --> 00:58:02,210
0,780 810,930 930,1020 1020,1260 1260,1590
Um, but I just copied

1883
00:58:02,210 --> 00:58:04,070
0,480 480,990 1020,1560 1560,1770 1770,1860
directly the pg into the

1884
00:58:04,070 --> 00:58:05,660
0,270 270,840 1080,1230 1230,1290 1290,1590
cooler pg and of course

1885
00:58:05,660 --> 00:58:07,040
0,120 120,330 330,780 780,1140 1140,1380
I gotta disable some a

1886
00:58:07,040 --> 00:58:08,030
0,300 300,510 510,630 630,780 780,990
bits which we'll talk about

1887
00:58:08,030 --> 00:58:09,890
0,90 90,150 150,600 900,1500 1530,1860
in a second um, but,

1888
00:58:10,160 --> 00:58:12,380
0,750 1050,1470 1500,1800 1800,2100 2100,2220
um, um the essence of

1889
00:58:12,380 --> 00:58:13,550
0,120 120,300 300,420 420,870 870,1170
it is I just copy

1890
00:58:13,550 --> 00:58:15,380
0,60 60,330 330,930 930,1290 1290,1830
the kernel hz pg entries.

1891
00:58:16,730 --> 00:58:17,780
0,180 180,270 270,360 360,630 630,1050
And so that means that

1892
00:58:17,780 --> 00:58:20,180
0,480 480,1020 1200,1590 1590,2040 2040,2400
resemble the physical memory for

1893
00:58:20,180 --> 00:58:21,920
0,150 150,420 420,870 870,1110 1110,1740
the user program is shared

1894
00:58:22,100 --> 00:58:24,020
0,450 450,690 690,1170 1170,1560 1560,1920
between kernel space and um.

1895
00:58:24,400 --> 00:58:25,300
0,270 270,720
User space.

1896
00:58:28,140 --> 00:58:30,030
0,600 1080,1200 1200,1290 1290,1470 1470,1890
Okay, does that make sense.

1897
00:58:32,940 --> 00:58:34,860
0,570 1110,1380 1380,1530 1530,1650 1650,1920
Um, okay, so in terms

1898
00:58:34,860 --> 00:58:36,090
0,60 60,510 510,600 600,720 720,1230
of switching up some bits

1899
00:58:36,150 --> 00:58:39,150
0,600 660,1080 1080,1440 1560,2550 2610,3000
a little bit, um more

1900
00:58:39,150 --> 00:58:40,470
0,90 90,630 630,780 780,1080 1080,1320
than necessary, but I switch

1901
00:58:40,470 --> 00:58:41,580
0,150 150,240 240,630 630,1020 1020,1110
off the execute bit I

1902
00:58:41,580 --> 00:58:43,080
0,690 780,1080 1080,1170 1170,1260 1260,1500
I switch off the right

1903
00:58:43,080 --> 00:58:43,640
0,330
bit.

1904
00:58:43,780 --> 00:58:45,310
0,150 150,660 660,1140 1170,1410 1410,1530
Is copying only needs to

1905
00:58:45,310 --> 00:58:47,530
0,420 840,1380 1380,1740 1740,1890 1890,2220
read never writes to it

1906
00:58:47,530 --> 00:58:48,670
0,180 180,510 510,660 660,840 840,1140
or copy out, does that.

1907
00:58:49,170 --> 00:58:51,150
0,150 150,600 600,600 1530,1830 1830,1980
And then, um, you have

1908
00:58:51,150 --> 00:58:52,260
0,90 90,330 330,540 540,720 720,1110
to switch up your bit.

1909
00:58:52,780 --> 00:58:55,930
0,630 720,1200 1200,2010 2250,2880 2910,3150
A death is a sort

1910
00:58:55,930 --> 00:58:57,580
0,90 90,360 360,570 570,1080 1080,1650
of risk by specific thing

1911
00:58:57,580 --> 00:58:58,600
0,330 330,450 450,600 600,900 900,1020
that if you're running in

1912
00:58:58,600 --> 00:58:59,720
0,420 420,930
kernel mode.

1913
00:58:59,880 --> 00:59:02,010
0,480 480,1530 1590,1800 1800,2010 2010,2130
Um, and you've been a

1914
00:59:02,010 --> 00:59:03,600
0,360 360,450 450,540 540,1080 1080,1590
scent in the TV entry,

1915
00:59:03,630 --> 00:59:05,790
0,210 210,510 510,990 990,1530 1560,2160
the kernel connection, not access

1916
00:59:05,790 --> 00:59:06,880
0,150 150,480 480,960
that particular page.

1917
00:59:08,140 --> 00:59:10,630
0,630 960,1170 1170,1800 1800,2010 2010,2490
Um, in fact you can

1918
00:59:10,660 --> 00:59:12,310
0,840 870,1110 1110,1320 1320,1590 1590,1650
um this is almost a

1919
00:59:12,310 --> 00:59:13,750
0,660 690,870 870,990 990,1230 1230,1440
choice, you can also actually

1920
00:59:13,750 --> 00:59:15,430
0,420 420,480 480,720 720,930 930,1680
program, the risk by hardware

1921
00:59:15,550 --> 00:59:17,140
0,180 180,660 660,870 870,1140 1140,1590
that basically in kernel mode

1922
00:59:17,200 --> 00:59:18,820
0,210 210,960 960,1080 1080,1260 1260,1620
and ignores the u bit.

1923
00:59:19,720 --> 00:59:22,780
0,660 1110,1740 1740,1920 1920,2280 2310,3060
Um, and um, but x86

1924
00:59:22,780 --> 00:59:24,910
0,690 690,930 930,1050 1050,1500 1530,2130
a doesn't do that, um

1925
00:59:25,150 --> 00:59:26,020
0,240 240,360 360,540 540,630 630,870
so you have to switch

1926
00:59:26,020 --> 00:59:26,900
0,120 120,180 180,660
up the unit.

1927
00:59:30,880 --> 00:59:31,990
0,210 210,540 540,690 690,780 780,1110
Any questions about the yogurt

1928
00:59:31,990 --> 00:59:33,070
0,180 180,300 300,660 660,960 960,1080
because the required number of

1929
00:59:33,070 --> 00:59:34,380
0,270 270,600 600,870 870,1050
you asked about it.

1930
00:59:40,510 --> 00:59:41,830
0,270 270,450 450,600 600,990 990,1320
So is this done just

1931
00:59:41,830 --> 00:59:43,870
0,420 570,990 990,1350 1350,1710 1890,2040
to make sure that the

1932
00:59:43,870 --> 00:59:45,910
0,300 300,810 1080,1290 1290,1650 1650,2040
kernel doesn't do anything bad

1933
00:59:45,970 --> 00:59:47,000
0,210 210,840
to user.

1934
00:59:47,080 --> 00:59:48,880
0,570 1080,1380 1380,1530 1530,1710 1710,1800
Memory, yeah, so why is

1935
00:59:48,880 --> 00:59:50,170
0,150 150,240 240,570 570,750 750,1290
this the case why is

1936
00:59:50,170 --> 00:59:51,130
0,300 300,420 420,750 750,870 870,960
this, you know, so the

1937
00:59:51,130 --> 00:59:52,000
0,300 300,420 420,570 570,690 690,870
question is like is this

1938
00:59:52,000 --> 00:59:53,230
0,180 180,570 570,960 960,1110 1110,1230
for debugging reasons, or is

1939
00:59:53,230 --> 00:59:54,610
0,120 120,270 270,480 480,1080 1080,1380
there sort of isolation reasons

1940
00:59:54,610 --> 00:59:55,420
0,60 60,180 180,570
to do so.

1941
00:59:55,860 --> 00:59:57,660
0,750 840,1350 1350,1500 1500,1680 1680,1800
And, um I think this

1942
00:59:57,660 --> 00:59:59,070
0,60 60,360 360,450 450,870 870,1410
is mostly for debugging reasons.

1943
00:59:59,450 --> 01:00:00,680
0,450 450,690 690,750 750,1140 1140,1230
A because the kernel is

1944
01:00:00,680 --> 01:00:02,150
0,90 90,270 270,600 600,1080 1110,1470
in full control anyway right

1945
01:00:02,510 --> 01:00:04,580
0,360 360,720 870,1290 1290,1500 1500,2070
kernel can change the sep

1946
01:00:04,580 --> 01:00:05,630
0,360 360,480 480,840 840,930 930,1050
register at will it can

1947
01:00:05,630 --> 01:00:07,040
0,540 540,900 900,1020 1020,1110 1110,1410
disable paging as it wants

1948
01:00:07,040 --> 01:00:08,900
0,360 600,1140 1140,1350 1350,1590 1590,1860
to um, so it's not

1949
01:00:08,900 --> 01:00:09,770
0,240 240,330 330,450 450,630 630,870
like you know the user

1950
01:00:09,770 --> 01:00:11,270
0,270 270,360 360,1050 1200,1440 1440,1500
space is protected from the

1951
01:00:11,270 --> 01:00:12,770
0,570 750,870 870,990 990,1080 1080,1500
colonel I think it's mostly

1952
01:00:12,770 --> 01:00:15,170
0,270 270,930 1140,1680 1680,1950 1950,2400
to basically help kernel development

1953
01:00:15,170 --> 01:00:16,700
0,240 240,660 660,930 930,1200 1200,1530
show gently xc six case

1954
01:00:16,700 --> 01:00:18,890
0,240 270,990 1020,1320 1320,1710 1860,2190
great unmodified h six should

1955
01:00:18,890 --> 01:00:20,750
0,660 690,900 900,1320 1320,1650 1650,1860
never be reference user page

1956
01:00:20,750 --> 01:00:21,520
0,570
period.

1957
01:00:22,130 --> 01:00:24,710
0,600 600,1200 1440,1920 1920,2430 2430,2580
Um, and um, and so

1958
01:00:24,710 --> 01:00:25,640
0,360 360,480 480,690
that you know.

1959
01:00:26,200 --> 01:00:28,330
0,240 390,870 870,1320 1320,1770 1770,2130
And basically this just helps

1960
01:00:28,330 --> 01:00:29,890
0,270 270,1020 1050,1350 1350,1440 1440,1560
if you happen to do

1961
01:00:29,890 --> 01:00:31,600
0,210 210,360 360,750 750,1290 1440,1710
that by accident anyway you

1962
01:00:31,600 --> 01:00:32,890
0,120 120,270 270,660 660,900 900,1290
would get immediately hate fault

1963
01:00:32,890 --> 01:00:34,210
0,480 540,660 660,990 990,1050 1050,1320
and you know a kernel

1964
01:00:34,210 --> 01:00:35,410
0,420 420,510 510,780 780,930 930,1200
panic and it will help

1965
01:00:35,410 --> 01:00:36,540
0,90 90,330 330,630 630,900
the kernel debug err.

1966
01:00:36,620 --> 01:00:38,000
0,120 120,570 570,690 690,990 990,1380
A developer to bug, the

1967
01:00:38,060 --> 01:00:38,760
0,420
colonel.

1968
01:00:41,420 --> 01:00:42,340
0,180 180,360 360,660
That makes sense.

1969
01:00:44,970 --> 01:00:46,260
0,300 300,630 630,1020
Yeah, thank you.

1970
01:00:47,950 --> 01:00:48,940
0,150 150,300 300,480 480,600 600,990
A I have a follow-up

1971
01:00:48,940 --> 01:00:51,340
0,360 360,480 480,900 2070,2400 2400,2400
question to that, um I

1972
01:00:51,340 --> 01:00:52,570
0,420 420,600 600,840 840,1140 1140,1230
think the part about the

1973
01:00:52,570 --> 01:00:54,310
0,360 360,570 570,810 810,1380 1410,1740
user bit makes sense, but

1974
01:00:54,310 --> 01:00:56,020
0,150 150,600 600,1080 1110,1590 1590,1710
what about the right and

1975
01:00:56,020 --> 01:00:57,200
0,480 480,1020
execute bits.

1976
01:00:57,400 --> 01:00:58,200
0,630
Yeah.

1977
01:00:59,070 --> 01:01:00,900
0,720 870,1050 1050,1200 1200,1290 1290,1830
Um, so does the executed

1978
01:01:00,900 --> 01:01:01,940
0,180 180,270 270,420 420,780
have to be on.

1979
01:01:07,090 --> 01:01:07,870
0,180 180,270 270,330 330,600 600,780
What does the colonel do

1980
01:01:07,870 --> 01:01:08,880
0,150 150,330 330,810
with this page.

1981
01:01:12,060 --> 01:01:13,320
0,120 120,300 300,600 600,900 960,1260
The only reach from right

1982
01:01:13,320 --> 01:01:14,250
0,60 60,360 360,570 570,630 630,930
the only thing the only

1983
01:01:14,250 --> 01:01:16,410
0,420 420,510 510,1290 1350,1860 1860,2160
structure that basically grabs data

1984
01:01:16,410 --> 01:01:18,060
0,150 150,300 300,780 780,1200 1200,1650
from this pages, move instruction

1985
01:01:18,060 --> 01:01:19,040
0,90 90,480 480,630
and copy it.

1986
01:01:20,660 --> 01:01:21,830
0,180 180,270 270,690 690,930 930,1170
So it only it does

1987
01:01:21,830 --> 01:01:23,390
0,360 360,570 570,1080 1080,1320 1320,1560
execute load instructions from it

1988
01:01:23,960 --> 01:01:24,520
0,360
were.

1989
01:01:24,550 --> 01:01:26,920
0,330 330,1020 1500,1860 1860,2040 2040,2370
Loads values from that particular

1990
01:01:26,920 --> 01:01:28,690
0,510 930,1260 1260,1320 1320,1590 1590,1770
page and the page should

1991
01:01:28,690 --> 01:01:29,880
0,180 180,510 510,960
only contain data.

1992
01:01:30,180 --> 01:01:31,350
0,150 150,270 270,420 420,600 600,1170
And so there's no reason

1993
01:01:31,350 --> 01:01:32,400
0,240 240,540 570,810 810,930 930,1050
that the kernel should be

1994
01:01:32,400 --> 01:01:33,690
0,270 270,360 360,540 540,1050 1080,1290
writing to that page and

1995
01:01:33,690 --> 01:01:34,950
0,450 720,810 810,930 930,1020 1020,1260
so it has to be

1996
01:01:34,950 --> 01:01:36,900
0,960 990,1200 1200,1620 1620,1710 1710,1950
conservative I disabled the right

1997
01:01:36,900 --> 01:01:37,380
0,240
bit.

1998
01:01:37,760 --> 01:01:38,960
0,180 180,270 270,450 450,810 810,1200
And there should be confirmed

1999
01:01:38,960 --> 01:01:40,250
0,210 210,630 630,960 960,1110 1110,1290
ever executed structure from that

2000
01:01:40,250 --> 01:01:42,200
0,420 660,1050 1050,1260 1260,1560 1560,1950
page scientists able to execute

2001
01:01:42,200 --> 01:01:42,880
0,90 90,450
me too.

2002
01:01:43,410 --> 01:01:45,060
0,540 540,690 690,750 750,1440 1440,1650
Again, this is mostly I

2003
01:01:45,060 --> 01:01:47,730
0,210 210,300 300,690 690,1320 1590,2670
think for debugging reasons, not

2004
01:01:47,760 --> 01:01:49,160
0,150 150,720 720,1260
for isolation regions.

2005
01:01:52,190 --> 01:01:53,880
0,300 330,540 540,870 870,1350
OK, makes sense, thanks.

2006
01:01:57,300 --> 01:01:58,480
0,960
I'm.

2007
01:02:00,760 --> 01:02:02,830
0,390 390,1110 1380,1590 1590,1950 1950,2070
Okay, um, so now the

2008
01:02:02,830 --> 01:02:03,460
0,180 180,330 330,420 420,570 570,630
only thing we need to

2009
01:02:03,460 --> 01:02:04,210
0,90 90,210 210,600 600,720 720,750
do is basically there's a

2010
01:02:04,210 --> 01:02:05,500
0,150 150,240 240,510 510,840 1140,1290
bunch of places where this

2011
01:02:05,500 --> 01:02:06,640
0,240 240,330 330,750 780,1020 1020,1140
code is being where this

2012
01:02:06,640 --> 01:02:07,980
0,300 300,390 390,570 570,1080
function is being called.

2013
01:02:08,360 --> 01:02:09,320
0,270 270,360 360,510 510,600 600,960
And we need to look

2014
01:02:09,320 --> 01:02:11,030
0,120 120,540 540,990 990,1410 1410,1710
at these um places where

2015
01:02:11,060 --> 01:02:12,710
0,540 540,840 840,1080 1080,1530 1530,1650
a call to understand what's

2016
01:02:12,710 --> 01:02:13,560
0,210 210,570
going on.

2017
01:02:13,830 --> 01:02:15,150
0,270 270,450 450,600 600,750 750,1320
Um, or how to use

2018
01:02:15,150 --> 01:02:16,170
0,120 120,180 180,330 330,810 810,1020
and I think maybe one

2019
01:02:16,170 --> 01:02:17,310
0,90 90,240 240,660 660,960 960,1140
of the interesting ones that

2020
01:02:17,310 --> 01:02:18,120
0,150 150,270 300,600 600,690 690,810
you know number of you

2021
01:02:18,120 --> 01:02:19,060
0,270 270,720
asked about.

2022
01:02:19,330 --> 01:02:20,920
0,510 510,840 840,1440
A each fork.

2023
01:02:22,400 --> 01:02:23,600
0,180 180,600 600,840 840,1020 1020,1200
And exactly we talk about

2024
01:02:23,600 --> 01:02:24,480
0,240 240,300 300,630
both of them.

2025
01:02:27,170 --> 01:02:29,480
0,300 300,480 480,780 780,1410 1440,2310
Um the first fork, um.

2026
01:02:34,140 --> 01:02:37,170
0,540 540,780 780,1590 1620,2400 2490,3030
Um, so here's a call

2027
01:02:37,170 --> 01:02:38,940
0,90 90,690 1140,1380 1380,1470 1470,1770
to fork or to call

2028
01:02:38,940 --> 01:02:40,920
0,210 210,930 930,1230 1230,1500 1500,1980
to kkk vm map user

2029
01:02:40,920 --> 01:02:41,900
0,180 180,690
a fork.

2030
01:02:42,120 --> 01:02:44,310
0,570 570,1170 1560,1800 1800,2040 2040,2190
Um, and it takes the

2031
01:02:44,310 --> 01:02:46,410
0,360 600,780 780,870 870,1800 1800,2100
in so the main question

2032
01:02:46,410 --> 01:02:47,250
0,60 60,210 210,330 330,660 660,840
I think the model you

2033
01:02:47,250 --> 01:02:47,920
0,480
ask.

2034
01:02:48,000 --> 01:02:50,040
0,630 780,1470 1470,1710 1710,1830 1830,2040
Is why does it have

2035
01:02:50,040 --> 01:02:51,480
0,120 120,300 300,420 420,810 810,1440
to be the new process

2036
01:02:51,480 --> 01:02:52,920
0,330 330,600 600,1170
kernel page table.

2037
01:02:53,030 --> 01:02:53,810
0,240 240,420 420,510 510,660 660,780
Why does it have to

2038
01:02:53,810 --> 01:02:55,700
0,330 330,450 450,540 540,1260 1290,1890
copy from the new process

2039
01:02:56,090 --> 01:02:57,920
0,570 570,930 930,1260 1260,1560
page table instead of.

2040
01:02:57,920 --> 01:02:59,220
0,330 330,720 720,1020
From maybe the.

2041
01:02:59,540 --> 01:03:01,160
0,420 420,780 780,990 990,1350 1350,1620
Current process, bake table because

2042
01:03:01,160 --> 01:03:03,170
0,120 120,780 870,1020 1020,1650 1680,2010
it's anyway an identical going

2043
01:03:03,170 --> 01:03:05,390
0,540 540,870 870,1320 1320,1890 1890,2220
forward basically constitutes replicates the.

2044
01:03:06,910 --> 01:03:08,170
0,360 360,390 390,600 600,660 660,1260
There's a part of the

2045
01:03:08,200 --> 01:03:09,250
0,210 210,570 570,690 690,780 780,1050
page table and so why

2046
01:03:09,250 --> 01:03:10,690
0,210 210,330 330,570 570,840 870,1440
can't we use the current

2047
01:03:10,930 --> 01:03:11,980
0,840
um.

2048
01:03:12,050 --> 01:03:13,250
0,270 270,600 600,690 690,900 900,1200
Page table for doing that.

2049
01:03:16,520 --> 01:03:18,080
0,720 810,1170 1170,1380 1380,1470 1470,1560
Hawaii actually turns out the

2050
01:03:18,080 --> 01:03:19,280
0,300 300,420 420,780 780,1080 1080,1200
case, you actually have to

2051
01:03:19,280 --> 01:03:20,660
0,240 240,540 570,1110
use the new.

2052
01:03:20,950 --> 01:03:22,750
0,150 150,300 300,450 450,1200 1470,1800
You know the child's user

2053
01:03:22,750 --> 01:03:24,610
0,180 180,240 240,1200 1230,1680 1680,1860
part of z child, use

2054
01:03:24,610 --> 01:03:25,880
0,60 60,480 480,1020
a page table.

2055
01:03:26,060 --> 01:03:27,050
0,240 240,360 360,450 450,540 540,990
Why is that the case.

2056
01:03:36,380 --> 01:03:38,270
0,360 360,810 840,1170 1170,1830 1830,1890
Move you note what do

2057
01:03:38,270 --> 01:03:39,060
0,120 120,510
you get.

2058
01:03:44,270 --> 01:03:44,960
0,210 210,300 300,420 420,540 540,690
Once you get a {re-map

2059
01:03:44,960 --> 01:03:48,140
0,270 270,660 1590,1920 1950,2850 2850,3180
-} there you go maybe

2060
01:03:48,140 --> 01:03:51,440
0,240 240,420 420,660 660,1140 1230,3300
not reading that error zac,

2061
01:03:51,440 --> 01:03:52,310
0,120 120,390 390,540 540,660 660,870
I'm thinking of is not

2062
01:03:52,310 --> 01:03:53,300
0,90 90,390 390,720
the real one.

2063
01:03:56,210 --> 01:03:57,050
0,270 270,360 360,480 480,720 720,840
Number of you tried it

2064
01:03:57,050 --> 01:03:58,580
0,420 690,990 990,1110 1110,1230 1230,1530
out what was your personal

2065
01:03:58,580 --> 01:03:59,500
0,720
experience.

2066
01:04:06,770 --> 01:04:08,210
0,390 390,480 480,540 540,930 930,1440
Anybody on the call who

2067
01:04:08,750 --> 01:04:09,820
0,300 300,420 420,780
tried this out.

2068
01:04:10,630 --> 01:04:11,830
0,120 120,510 510,720 720,870 870,1200
I remember what they eat.

2069
01:04:12,610 --> 01:04:14,220
0,480 480,1350
Resulting experiences.

2070
01:04:16,430 --> 01:04:17,450
0,120 120,270 270,330 330,930 930,1020
I think the resulting a

2071
01:04:17,450 --> 01:04:19,010
0,840 990,1080 1080,1260 1260,1410 1410,1560
and I did not have

2072
01:04:19,010 --> 01:04:20,030
0,90 90,270 270,720 720,780 780,1020
the book with I think

2073
01:04:20,030 --> 01:04:21,380
0,60 60,480 480,930 930,1110 1110,1350
the resulting experience is that

2074
01:04:21,380 --> 01:04:22,700
0,330 330,420 420,690 690,1140
somewhere in user test.

2075
01:04:22,990 --> 01:04:24,220
0,240 240,660 660,930 930,1140 1140,1230
A particular user test and

2076
01:04:24,220 --> 01:04:25,210
0,120 120,150 150,330 330,420 420,990
do a lot of forking

2077
01:04:25,210 --> 01:04:26,530
0,150 150,780 960,1140 1140,1260 1260,1320
and exiting you're going to

2078
01:04:26,530 --> 01:04:27,440
0,150 150,180 180,660
get a problem.

2079
01:04:27,750 --> 01:04:29,850
0,660 660,900 900,1020 1020,1170 1170,2100
Um, and you get a

2080
01:04:31,080 --> 01:04:31,940
0,600
error.

2081
01:04:32,010 --> 01:04:34,290
0,450 450,840 870,990 990,1710 1950,2280
Um, in the area, the

2082
01:04:34,290 --> 01:04:35,940
0,150 150,270 270,450 450,990 1290,1650
thing that goes wrong is

2083
01:04:35,940 --> 01:04:36,740
0,540
that.

2084
01:04:36,820 --> 01:04:38,770
0,660 1080,1290 1290,1410 1410,1800 1800,1950
Um, if you copy from

2085
01:04:38,770 --> 01:04:40,020
0,90 90,390 390,1080
the parent process.

2086
01:04:40,440 --> 01:04:42,180
0,180 180,270 270,660 660,990 1020,1740
If the parent process exits

2087
01:04:42,210 --> 01:04:43,830
0,360 360,480 480,840 840,1170 1170,1620
before the child process us.

2088
01:04:44,450 --> 01:04:47,120
0,630 810,1320 1650,2040 2040,2430 2430,2670
Then the parent process page

2089
01:04:47,120 --> 01:04:49,070
0,330 330,480 480,570 570,1290 1320,1950
table will be completely, um.

2090
01:04:49,730 --> 01:04:50,810
0,300 300,570 600,840 840,990 990,1080
Clean up right as we

2091
01:04:50,810 --> 01:04:53,300
0,180 180,720 1140,1680 1800,2370 2370,2490
saw before and then the

2092
01:04:53,300 --> 01:04:55,240
0,390 390,660 660,930 930,1740
child still has pointers.

2093
01:04:55,410 --> 01:04:57,570
0,210 210,570 570,1140 1170,1500 1500,2160
Now to the parent process,

2094
01:04:57,960 --> 01:04:59,280
0,870
um.

2095
01:04:59,500 --> 01:05:01,780
0,420 450,690 690,1050 1410,1800 1800,2280
A page table and so

2096
01:05:01,810 --> 01:05:03,320
0,570 570,750 750,1290
basically you're gonna.

2097
01:05:03,400 --> 01:05:06,580
0,1080 1470,2070 2070,2670 2670,3000 3000,3180
Basically pages, yeah in um,

2098
01:05:06,580 --> 01:05:08,200
0,360 390,780 780,1470
this child process.

2099
01:05:08,200 --> 01:05:10,420
0,270 270,900 1140,1500 1500,1650 1650,2220
Page table have been treat

2100
01:05:10,450 --> 01:05:11,920
0,450 450,600 600,870 870,1350 1350,1470
and they're still used as

2101
01:05:11,920 --> 01:05:12,850
0,210 210,540 540,630 630,750 750,930
a result in all kinds

2102
01:05:12,850 --> 01:05:14,280
0,60 60,300 300,750 750,1170
of bad behavior because.

2103
01:05:14,370 --> 01:05:16,650
0,540 720,1200 1200,1470 1470,1800 1800,2280
The colonel wanted free page

2104
01:05:16,650 --> 01:05:17,910
0,240 240,510 510,900 900,1050 1050,1260
actually writes ones in it

2105
01:05:17,940 --> 01:05:18,740
0,600
everywhere.

2106
01:05:19,080 --> 01:05:20,940
0,240 240,780 780,1320 1590,1740 1740,1860
A forgivable reasons and so

2107
01:05:20,940 --> 01:05:22,740
0,300 300,660 660,780 780,1140 1140,1800
now basically you have invalid,

2108
01:05:22,740 --> 01:05:24,360
0,60 60,180 180,600 600,1020 1170,1620
you know {pg's -} sitting

2109
01:05:24,360 --> 01:05:26,250
0,180 180,720 1020,1320 1320,1530 1530,1890
in your kernel page table.

2110
01:05:29,090 --> 01:05:30,120
0,180 180,300 300,450 450,750
Does that make sense.

2111
01:05:37,950 --> 01:05:39,940
0,270 270,480 480,1080 1110,1680
Okay, one more, um.

2112
01:05:40,700 --> 01:05:41,780
0,60 60,210 210,570 570,870 870,1080
You can do park look

2113
01:05:41,780 --> 01:05:43,360
0,300 300,660 660,840 840,1320
at exec dot c.

2114
01:05:43,900 --> 01:05:45,700
0,510 510,660 660,780 780,1620
A in my solutions.

2115
01:05:47,840 --> 01:05:49,340
0,180 180,390 390,960 960,1260 1260,1500
Are pretty straightforward, always made

2116
01:05:49,340 --> 01:05:51,300
0,210 210,990 990,1200 1200,1740
no modifications to exec.

2117
01:05:51,410 --> 01:05:53,660
0,270 270,420 420,1020 1020,1710 1710,2250
A the only medication roommate,

2118
01:05:53,660 --> 01:05:54,440
0,120 120,480 480,570 570,660 660,780
of course you know the

2119
01:05:54,440 --> 01:05:56,030
0,270 270,510 510,1020 1050,1230 1230,1590
first thing for you, part

2120
01:05:56,030 --> 01:05:56,760
0,450
one.

2121
01:05:56,880 --> 01:05:57,690
0,120 120,300 300,480 480,570 570,810
And then here for part

2122
01:05:57,690 --> 01:06:00,060
0,480 690,870 870,960 960,1650 1830,2370
three which is basically mapping

2123
01:06:00,060 --> 01:06:00,960
0,690
the.

2124
01:06:01,210 --> 01:06:03,460
0,660 690,990 990,1230 1230,1830 1920,2250
New user page table into

2125
01:06:03,460 --> 01:06:04,640
0,60 60,360 360,600 600,960
the kernel page table.

2126
01:06:04,720 --> 01:06:07,120
0,480 480,840 840,1440 1440,2040 2070,2400
Exit baseball dossiers, we built

2127
01:06:07,120 --> 01:06:08,260
0,60 60,390 390,870
a new user.

2128
01:06:08,380 --> 01:06:10,390
0,570 570,1110 1350,1830 1830,1920 1920,2010
Address space and you know

2129
01:06:10,390 --> 01:06:11,530
0,150 150,330 330,630 630,1020 1020,1140
there's one line copies of

2130
01:06:11,530 --> 01:06:12,790
0,210 210,450 450,690 690,1020 1020,1260
new user address space into

2131
01:06:12,790 --> 01:06:13,860
0,60 60,300 300,510 510,810
the kernel page table.

2132
01:06:15,540 --> 01:06:16,420
0,150 150,360 360,630
And that's it.

2133
01:06:21,300 --> 01:06:22,340
0,210 210,810
Any questions.

2134
01:06:27,110 --> 01:06:28,640
0,210 210,540 540,660 660,750 750,1530
So, hope in the meantime,

2135
01:06:28,970 --> 01:06:30,200
0,630 630,900 900,1080 1080,1140 1140,1230
I've answered many of the

2136
01:06:30,200 --> 01:06:32,340
0,330 330,840 840,1290 1290,1950
questions that you um.

2137
01:06:32,520 --> 01:06:35,040
0,600 630,1200 1230,1770 2070,2340 2340,2520
A submit a we can

2138
01:06:35,040 --> 01:06:36,990
0,600 600,750 750,1170 1170,1410 1410,1950
look and see which ones,

2139
01:06:37,050 --> 01:06:37,860
0,300 300,420 420,510 510,570 570,810
um, there were a couple

2140
01:06:37,860 --> 01:06:39,060
0,300 300,690 690,840 840,990 990,1200
more questions that I haven't

2141
01:06:39,060 --> 01:06:40,080
0,210 210,450 450,750
talked about yet.

2142
01:06:40,430 --> 01:06:41,600
0,300 300,540 540,870 870,960 960,1170
Um, so maybe we can

2143
01:06:41,600 --> 01:06:42,860
0,180 180,240 240,690 690,960 960,1260
look at those or unless

2144
01:06:42,860 --> 01:06:44,600
0,180 180,630 720,1140 1140,1290 1290,1740
you have questions right away.

2145
01:06:46,990 --> 01:06:48,440
0,330 330,720 720,1140
Um, don't we.

2146
01:06:48,810 --> 01:06:51,180
0,1290 1320,1530 1530,1920 1920,2220 2220,2370
Modify the group proc as

2147
01:06:51,180 --> 01:06:52,860
0,420 600,1140 1380,1620 1620,1650 1650,1680
well, yes there are a

2148
01:06:52,860 --> 01:06:54,420
0,180 180,450 450,780 780,870 870,1560
couple more changes are necessary,

2149
01:06:54,720 --> 01:06:55,580
0,630
um.

2150
01:06:55,970 --> 01:06:58,100
0,480 480,660 660,1260 1290,1680 1680,2130
Um, you mean s break

2151
01:06:58,130 --> 01:06:59,340
0,180 180,510 510,960
or group rock.

2152
01:06:59,950 --> 01:07:01,000
0,240 240,810
Her job.

2153
01:07:02,310 --> 01:07:03,870
0,450 450,660 660,840 840,990 990,1560
A I had a line.

2154
01:07:04,470 --> 01:07:06,780
0,300 300,810 1110,1320 1320,1680 1680,2310
Right here, a similar style

2155
01:07:07,140 --> 01:07:08,970
0,690 690,960 960,1380 1380,1470 1470,1830
and there's presumably a similar

2156
01:07:08,970 --> 01:07:10,580
0,510 510,1380
change in.

2157
01:07:11,830 --> 01:07:12,640
0,270 270,330 330,510 510,600 600,810
Again I might be it

2158
01:07:12,640 --> 01:07:13,660
0,390 390,720 720,810 810,930 930,1020
actually usually in it, of

2159
01:07:13,660 --> 01:07:15,340
0,510 840,960 960,1290 1290,1530 1530,1680
course it probably has to

2160
01:07:15,340 --> 01:07:16,060
0,570
change.

2161
01:07:17,650 --> 01:07:18,970
0,270 270,600 630,870 870,960 960,1320
Because you have to map

2162
01:07:18,970 --> 01:07:20,200
0,180 180,390 390,750 750,1050 1050,1230
that one page from the

2163
01:07:20,200 --> 01:07:21,700
0,270 270,600 600,1260
Internet code into.

2164
01:07:22,000 --> 01:07:23,530
0,450 600,930 930,1230 1230,1320 1320,1530
The yo yo, the kernel

2165
01:07:23,530 --> 01:07:24,310
0,210 210,450 450,570 570,720 720,780
page table for you in

2166
01:07:24,310 --> 01:07:25,180
0,180 180,720
that process.

2167
01:07:26,730 --> 01:07:27,660
0,240 240,300 300,510 510,840 840,930
Because the first process is

2168
01:07:27,660 --> 01:07:28,380
0,450
special.

2169
01:07:35,560 --> 01:07:37,510
0,300 300,720 720,1590 1590,1740 1740,1950
Okay so I'm gonna walk

2170
01:07:37,510 --> 01:07:38,230
0,90 90,210 210,270 270,360 360,720
through some of the questions

2171
01:07:38,230 --> 01:07:39,220
0,300 300,420 420,690 690,870 870,990
here and I put them

2172
01:07:39,220 --> 01:07:40,480
0,240 240,630 660,1050 1050,1170 1170,1260
on the screen so you

2173
01:07:40,480 --> 01:07:41,380
0,120 120,270 270,360 360,570 570,900
can help them see them.

2174
01:07:41,800 --> 01:07:42,610
0,300 300,360 360,600 600,720 720,810
Actually I don't have to

2175
01:07:42,610 --> 01:07:44,500
0,480 480,1140 1320,1560 1560,1680 1680,1890
feel a read them out

2176
01:07:44,500 --> 01:07:45,420
0,630
completely.

2177
01:07:45,470 --> 01:07:46,190
0,210 210,330 330,450 450,510 510,720
A I think the first

2178
01:07:46,190 --> 01:07:47,270
0,330 330,480 480,540 540,840 840,1080
question is a question that

2179
01:07:47,270 --> 01:07:48,380
0,330 330,420 420,750 750,780 780,1110
came up quite a bit

2180
01:07:48,410 --> 01:07:50,220
0,570 570,630 630,1200 1200,1590
about the gpu bit.

2181
01:07:50,480 --> 01:07:52,370
0,810 900,990 990,1350 1380,1560 1560,1890
Flag, um I think we've

2182
01:07:52,370 --> 01:07:55,190
0,270 270,720 1200,1860 2280,2610 2610,2820
covered this a mail cover

2183
01:07:55,190 --> 01:07:55,940
0,90 90,300 300,420 420,540 540,750
the fact that he's not

2184
01:07:55,940 --> 01:07:57,260
0,540 540,840 840,960 960,1230 1230,1320
malicious but it's mostly for

2185
01:07:57,260 --> 01:07:58,340
0,360 360,930
debugging reasons.

2186
01:08:00,850 --> 01:08:03,340
0,510 510,840 840,1170 1170,1620 1980,2490
Similar question about like, well

2187
01:08:03,340 --> 01:08:04,360
0,120 120,270 270,300 300,780 780,1020
if you're a supervisor mode,

2188
01:08:04,360 --> 01:08:06,070
0,210 210,300 300,420 420,1080 1170,1710
can't you do anything because

2189
01:08:06,070 --> 01:08:07,270
0,90 90,180 180,480 480,600 600,1200
you can switch the s

2190
01:08:07,270 --> 01:08:09,320
0,720 720,840 840,1110 1110,1830
ap you can um.

2191
01:08:09,450 --> 01:08:10,350
0,240 240,450 450,630 630,840 840,900
Um, and the answer is

2192
01:08:10,350 --> 01:08:12,840
0,450 570,1050 1050,1680 2190,2340 2340,2490
yes also possible and so

2193
01:08:12,840 --> 01:08:13,800
0,270 270,600 600,690 690,810 810,960
it really you know this

2194
01:08:13,800 --> 01:08:15,240
0,210 210,450 450,720 720,1230
job is not about.

2195
01:08:15,540 --> 01:08:17,550
0,330 330,930 960,1350 1350,1560 1560,2010
The user program being protected

2196
01:08:17,550 --> 01:08:18,900
0,150 150,210 210,630 630,810 810,1350
from the colonel was really

2197
01:08:19,080 --> 01:08:21,120
0,480 480,930 1110,1620 1620,1710 1710,2040
as a flag to help

2198
01:08:21,120 --> 01:08:22,320
0,60 60,330 330,870 870,990 990,1200
the kernel developer and built

2199
01:08:22,320 --> 01:08:23,060
0,60 60,510
the kernel.

2200
01:08:24,500 --> 01:08:26,510
0,360 360,780 780,990 990,1590 1620,2010
Um, one other specific risk

2201
01:08:26,510 --> 01:08:28,250
0,270 270,870 990,1320 1320,1380 1380,1740
five question which is why

2202
01:08:28,250 --> 01:08:30,590
0,240 240,570 570,1350 1380,1830 1830,2340
are they interfering property H1,

2203
01:08:30,590 --> 01:08:31,550
0,90 90,540 540,720 720,810 810,960
the register should have been

2204
01:08:31,550 --> 01:08:32,120
0,330
a.

2205
01:08:32,330 --> 01:08:33,980
0,480 480,630 630,720 720,1080 1080,1650
A in the strange order,

2206
01:08:34,370 --> 01:08:36,350
0,630 630,1050 1050,1200 1200,1560 1560,1980
um, and the reason that

2207
01:08:36,350 --> 01:08:37,100
0,570
is.

2208
01:08:37,190 --> 01:08:38,930
0,30 30,30 990,1350 1350,1440 1440,1740
Um I think we mentioned

2209
01:08:38,930 --> 01:08:39,680
0,90 90,150 150,330 330,540 540,750
this a little while ago

2210
01:08:39,680 --> 01:08:41,690
0,90 90,180 180,450 450,960 1380,2010
in the previous lecture, um,

2211
01:08:41,720 --> 01:08:43,790
0,1080 1260,1440 1440,1680 1680,1830 1830,2070
basically there's something that's called

2212
01:08:43,790 --> 01:08:45,620
0,90 90,360 360,630 630,1290 1320,1830
the risk five compressed instruction

2213
01:08:45,620 --> 01:08:46,940
0,390 660,900 900,1050 1050,1110 1110,1320
set that has a set

2214
01:08:46,940 --> 01:08:48,280
0,90 90,450 450,1140
of fewer registers.

2215
01:08:48,400 --> 01:08:50,050
0,840 870,1200 1200,1320 1320,1530 1530,1650
And, um, so you have

2216
01:08:50,050 --> 01:08:52,180
0,480 480,990 1080,1350 1350,1710 1710,2130
to um, have more compact

2217
01:08:52,180 --> 01:08:53,740
0,450 450,600 600,1350
encoding of instructions.

2218
01:08:53,990 --> 01:08:56,570
0,420 420,930 1140,1710 1740,2280 2280,2580
Um, and um, this strange

2219
01:08:56,570 --> 01:08:57,860
0,360 360,810 810,900 900,1170 1170,1290
ordering reflects the fact that

2220
01:08:57,860 --> 01:08:59,480
0,90 90,540 540,1170 1290,1530 1530,1620
they're basically two there's the

2221
01:08:59,480 --> 01:09:01,100
0,630 660,1350
compressed version.

2222
01:09:01,130 --> 01:09:01,760
0,210 210,300 300,450 450,570 570,630
Which is some set of

2223
01:09:01,760 --> 01:09:03,140
0,570 570,690 690,930 930,1170 1170,1380
registers, and then sort of

2224
01:09:03,200 --> 01:09:04,190
0,180 180,510 510,780 780,930 930,990
a compressed version, which is

2225
01:09:04,190 --> 01:09:05,510
0,240 240,420 420,900 990,1140 1140,1320
what we're using it has

2226
01:09:05,510 --> 01:09:06,740
0,60 60,390 390,540 540,630 630,1230
a complete set of registration.

2227
01:09:07,440 --> 01:09:09,000
0,150 150,210 210,630 630,930 930,1560
And the compression manage a

2228
01:09:09,030 --> 01:09:10,700
0,360 360,420 420,900 900,1440
version, for example has.

2229
01:09:10,800 --> 01:09:13,380
0,330 330,750 750,1050 1050,1830 2130,2580
As one and zero a

2230
01:09:13,380 --> 01:09:14,550
0,270 270,450 450,750 750,870 870,1170
zero and one but not

2231
01:09:14,550 --> 01:09:15,630
0,150 150,330 330,570 570,690 690,1080
as to fruit as eleven.

2232
01:09:17,380 --> 01:09:18,520
0,180 180,360 360,480 480,750 750,1140
So that's the main reason.

2233
01:09:26,880 --> 01:09:27,960
0,180 180,480 480,540 540,870 870,1080
I think I went through

2234
01:09:27,960 --> 01:09:29,280
0,420 420,510 510,660 660,1140 1140,1320
most of these questions, but

2235
01:09:29,280 --> 01:09:30,210
0,150 150,330 330,450 450,510 510,930
if you see a question

2236
01:09:30,210 --> 01:09:31,290
0,300 300,480 480,630 630,720 720,1080
that I should have covered

2237
01:09:31,290 --> 01:09:33,420
0,120 120,240 240,630 840,1470 1680,2130
and it didn't please interrupt

2238
01:09:33,420 --> 01:09:34,290
0,180 180,390 390,480 480,600 600,870
me or if you ask

2239
01:09:34,290 --> 01:09:35,370
0,30 30,390 390,570 570,810 810,1080
a question I haven't covered

2240
01:09:35,370 --> 01:09:35,920
0,300
yet.

2241
01:09:38,050 --> 01:09:41,020
0,690 870,1410 1410,2160 2610,2670 2670,2970
A police ask me these

2242
01:09:41,020 --> 01:09:42,970
0,330 330,750 750,1350 1350,1740 1740,1950
questions originally inordinately submitted them,

2243
01:09:43,000 --> 01:09:44,280
0,210 210,480 480,1020
so these were.

2244
01:09:48,270 --> 01:09:50,480
0,300 300,480 480,1230 1260,1950
Okay, you're maybe a.

2245
01:09:50,960 --> 01:09:51,770
0,150 150,360 360,450 450,750 750,810
So here's a question to

2246
01:09:51,770 --> 01:09:53,420
0,330 330,630 630,960 960,1410 1410,1650
operating system, user article page

2247
01:09:53,420 --> 01:09:54,260
0,300 300,480 480,570 570,750 750,840
tables ever to set up

2248
01:09:54,260 --> 01:09:55,250
0,60 60,300 300,540 540,840 840,990
the page table pages so

2249
01:09:55,250 --> 01:09:56,150
0,150 150,240 240,600 600,840 840,900
that the lower parts of

2250
01:09:56,150 --> 01:09:57,590
0,120 120,600 600,750 750,1110 1110,1440
the hierarchy, are these party

2251
01:09:57,590 --> 01:09:58,480
0,420
shared.

2252
01:09:58,560 --> 01:10:00,300
0,600 630,1050 1050,1350 1350,1590 1590,1740
And, um, you clearly saw

2253
01:10:00,300 --> 01:10:01,740
0,180 180,630 630,930 930,990 990,1440
my solution correct I share.

2254
01:10:02,170 --> 01:10:03,550
0,360 360,510 510,870 870,1200 1200,1380
Um the entries one to

2255
01:10:03,550 --> 01:10:05,080
0,240 240,660 1080,1260 1260,1350 1350,1530
five eleven and so this

2256
01:10:05,080 --> 01:10:06,280
0,90 90,180 180,540 540,990
is a standard trick.

2257
01:10:06,360 --> 01:10:07,650
0,330 330,570 570,630 630,960 960,1290
And lots of operating systems

2258
01:10:07,650 --> 01:10:08,300
0,120 120,420
do that.

2259
01:10:17,830 --> 01:10:18,520
0,150 150,360 360,420 420,630 630,690
I think we talked a

2260
01:10:18,520 --> 01:10:19,870
0,180 180,330 330,600 600,1020 1020,1350
little bit about this particular

2261
01:10:19,870 --> 01:10:20,920
0,300 300,420 420,510 510,960 960,1050
issue that is important that

2262
01:10:20,920 --> 01:10:22,510
0,60 60,600 870,1080 1080,1290 1290,1590
you switch to this main

2263
01:10:22,510 --> 01:10:24,120
0,300 300,540 540,930 930,1410
kernel page table because.

2264
01:10:24,190 --> 01:10:26,860
0,960 1230,2070 2130,2370 2370,2550 2550,2670
Scheduler, um there might be

2265
01:10:26,860 --> 01:10:28,120
0,240 240,510 510,930 930,1050 1050,1260
no user processes to run

2266
01:10:28,120 --> 01:10:29,260
0,90 90,270 270,930
at all anymore.

2267
01:10:29,310 --> 01:10:30,300
0,330 330,510 510,570 570,930 930,990
A in the schedule, of

2268
01:10:30,300 --> 01:10:31,290
0,360 360,540 540,690 690,750 750,990
course still needs a page

2269
01:10:31,290 --> 01:10:32,700
0,330 600,810 810,1050 1050,1260 1260,1410
table so it runs with

2270
01:10:32,700 --> 01:10:33,900
0,120 120,390 390,660 660,900 900,1200
the name kernel page table.

2271
01:10:36,590 --> 01:10:38,270
0,360 360,420 420,510 510,960 1260,1680
Question in the chat, yeah

2272
01:10:38,570 --> 01:10:39,920
0,240 240,690 720,960 960,1080 1080,1350
go ahead, what is there

2273
01:10:39,920 --> 01:10:40,880
0,210 210,300 300,780 780,870 870,960
when you pull up the

2274
01:10:40,880 --> 01:10:42,040
0,390
chat.

2275
01:10:44,120 --> 01:10:45,120
0,750
MHM.

2276
01:10:55,110 --> 01:10:56,220
0,180 180,330 330,510 510,750 930,1110
I can read it, yeah

2277
01:10:56,220 --> 01:10:57,180
0,360 360,570 570,660 660,870 870,960
I got it, so I

2278
01:10:57,180 --> 01:10:58,530
0,210 210,330 330,1110 1110,1260 1260,1350
think you know okay so

2279
01:10:58,530 --> 01:10:59,400
0,90 90,390 390,510 510,780 780,870
the question is not the

2280
01:10:59,400 --> 01:11:00,690
0,360 390,600 600,810 810,870 870,1290
risk a bit of respect

2281
01:11:00,690 --> 01:11:01,500
0,270 270,480 480,690 690,750 750,810
saying that part of the

2282
01:11:01,500 --> 01:11:02,760
0,540 540,600 600,690 690,1020 1020,1260
separation is to prevent bombs

2283
01:11:02,760 --> 01:11:03,990
0,120 120,390 390,720 720,1140 1140,1230
that allow user program to

2284
01:11:03,990 --> 01:11:04,980
0,180 180,270 270,600 600,900 900,990
make the kernel jump to

2285
01:11:04,980 --> 01:11:06,630
0,570 570,840 840,930 930,1140 1140,1650
arbitrary code in user space.

2286
01:11:07,200 --> 01:11:08,610
0,300 300,870 900,1140 1140,1350 1350,1410
Um, yes, um, that's a

2287
01:11:08,610 --> 01:11:12,270
0,180 180,630 930,1680 2040,2820 3360,3660
good point, um, yeah, so

2288
01:11:12,270 --> 01:11:13,350
0,150 150,480 510,660 660,750 750,1080
you know you can debate

2289
01:11:13,350 --> 01:11:14,070
0,180 180,360 360,450 450,630 630,720
here one of these is

2290
01:11:14,070 --> 01:11:15,720
0,90 90,600 600,990 990,1350 1350,1650
an isolation property or kernel

2291
01:11:15,720 --> 01:11:16,980
0,420 420,960
debugging property.

2292
01:11:16,970 --> 01:11:18,350
0,600 600,690 690,960 960,1110 1110,1380
Clearly, the kernel should never

2293
01:11:18,350 --> 01:11:19,970
0,390 420,750 750,1140 1170,1530 1530,1620
jump into any part of

2294
01:11:19,970 --> 01:11:21,320
0,120 120,450 450,840 840,1110 1110,1350
the address, the user address

2295
01:11:21,320 --> 01:11:21,980
0,510
space.

2296
01:11:22,070 --> 01:11:25,880
0,390 390,1020 1380,1860 1890,2730 2940,3810
A directly a until a.

2297
01:11:26,210 --> 01:11:27,500
0,180 180,450 690,870 870,1110 1110,1290
You know I view this

2298
01:11:27,500 --> 01:11:28,820
0,120 120,540 570,900 900,990 990,1320
as a tool to help

2299
01:11:28,820 --> 01:11:30,410
0,90 90,390 390,780 780,1140 1170,1590
the kernel debug or catch

2300
01:11:30,410 --> 01:11:31,540
0,210 210,450 450,510 510,990
those kinds of bucks.

2301
01:11:33,080 --> 01:11:34,460
0,240 240,420 420,750 750,1050 1050,1380
And some reasons why X

2302
01:11:34,460 --> 01:11:37,460
0,300 300,480 480,960 960,1500 2070,3000
six we also a disable

2303
01:11:37,490 --> 01:11:39,340
0,330 360,1020 1020,1170 1170,1560
or accepted you bit.

2304
01:11:39,400 --> 01:11:40,900
0,330 330,780 780,1020 1020,1080 1080,1500
And don't allow the kernel

2305
01:11:40,900 --> 01:11:42,460
0,270 270,570 570,660 660,900 900,1560
to refer to any pages.

2306
01:11:43,050 --> 01:11:45,510
0,570 1140,1440 1440,1800 1800,2370 2370,2460
Um that protects us, you

2307
01:11:45,510 --> 01:11:47,580
0,180 180,690 720,1200 1200,1560 1560,2070
know you did reference every

2308
01:11:47,700 --> 01:11:48,820
0,360 360,930
user address.

2309
01:11:49,070 --> 01:11:50,210
0,390 390,630 630,690 690,930 930,1140
Um, that the colonel would

2310
01:11:50,210 --> 01:11:51,200
0,330 330,810
actually default.

2311
01:12:02,480 --> 01:12:03,410
0,210 210,390 390,600 600,870 870,930
I think I've got the

2312
01:12:03,410 --> 01:12:06,520
0,1170 1200,1680 1770,2130 2130,2790
schedule point, a two.

2313
01:12:12,520 --> 01:12:14,170
0,780 990,1170 1170,1320 1320,1380 1380,1650
Um, so here's a question

2314
01:12:14,170 --> 01:12:15,490
0,90 90,300 300,540 540,990 990,1320
to our pipes implemented next

2315
01:12:15,490 --> 01:12:16,630
0,330 330,510 510,750 750,1050 1050,1140
six and choose change to

2316
01:12:16,630 --> 01:12:18,280
0,300 300,900 900,990 990,1410 1410,1650
php implemented the pgm lap

2317
01:12:18,280 --> 01:12:19,660
0,360 360,1110
effective implementation.

2318
01:12:19,940 --> 01:12:21,860
0,540 990,1410 1410,1560 1560,1830 1830,1920
Um, um, so pipes are

2319
01:12:21,860 --> 01:12:23,600
0,510 510,660 660,1050 1050,1590 1590,1740
basically a buffering memory in

2320
01:12:23,600 --> 01:12:24,420
0,60 60,600
the kernel.

2321
01:12:24,630 --> 01:12:26,520
0,660 690,1260 1290,1650 1650,1800 1800,1890
And a right when you

2322
01:12:26,520 --> 01:12:27,810
0,210 210,360 360,690 690,1050 1050,1290
write your pipe basically calls

2323
01:12:27,810 --> 01:12:28,800
0,480 480,750
copy in.

2324
01:12:28,880 --> 01:12:30,290
0,300 300,900 900,1020 1020,1350 1350,1410
And copying a copy, the

2325
01:12:30,290 --> 01:12:31,940
0,360 360,840 840,1050 1050,1410 1410,1650
bytes from user space into

2326
01:12:31,940 --> 01:12:32,600
0,60 60,480
the pipe.

2327
01:12:32,960 --> 01:12:33,980
0,330 330,420 420,600 600,900 900,1020
And in some ways you

2328
01:12:33,980 --> 01:12:34,970
0,120 120,210 210,690 720,930 930,990
know the whole part of

2329
01:12:34,970 --> 01:12:37,370
0,90 90,540 540,1080 1080,1770 1800,2400
the speech lavish basically streamline

2330
01:12:37,370 --> 01:12:38,760
0,180 180,630 690,1140
that code, um.

2331
01:12:39,220 --> 01:12:40,630
0,480 660,870 870,1020 1020,1200 1200,1410
Um, so you don't have

2332
01:12:40,630 --> 01:12:42,430
0,90 90,330 330,660 660,1320 1560,1800
to do many walks, um,

2333
01:12:42,430 --> 01:12:43,390
0,240 240,300 300,540 540,690 690,960
when you actually you're right

2334
01:12:43,390 --> 01:12:44,830
0,150 150,360 360,660 660,1020 1020,1440
from user space into the.

2335
01:12:45,110 --> 01:12:45,760
0,420
Bike.

2336
01:12:49,150 --> 01:12:50,110
0,180 180,360 360,600 600,660 660,960
Um, this is a question

2337
01:12:50,110 --> 01:12:50,530
0,60 60,180 180,240 240,360 360,420
I think a lot of

2338
01:12:50,530 --> 01:12:51,610
0,240 240,510 510,690 690,840 840,1080
people ask you like, why

2339
01:12:51,610 --> 01:12:52,540
0,150 150,390 390,540 540,780 780,930
does uv and free and

2340
01:12:52,540 --> 01:12:53,620
0,180 180,450 450,630 630,810 810,1080
free walker, reach me panic

2341
01:12:53,620 --> 01:12:54,460
0,90 90,180 180,630
at the leaf.

2342
01:12:54,760 --> 01:12:57,310
0,870 1380,1890 1920,2070 2070,2370 2370,2550
Um, and the reason is

2343
01:12:57,310 --> 01:12:58,960
0,390 420,570 570,1350 1380,1500 1500,1650
that you know we put

2344
01:12:58,960 --> 01:12:59,980
0,360 360,510 510,720 720,960 960,1020
that in there because it

2345
01:12:59,980 --> 01:13:01,690
0,540 570,1080 1290,1500 1500,1620 1620,1710
broke a that was an

2346
01:13:01,690 --> 01:13:02,920
0,510 510,630 630,870 870,1170 1170,1230
indication that an area in

2347
01:13:02,920 --> 01:13:03,790
0,90 90,390 390,600 600,750 750,870
the next six would be

2348
01:13:03,790 --> 01:13:04,480
0,420
broken.

2349
01:13:04,750 --> 01:13:05,800
0,330 330,420 420,750 750,960 960,1050
That's the inherent for a

2350
01:13:05,800 --> 01:13:07,360
0,510 510,750 750,870 870,1170 1170,1560
modified X and X six

2351
01:13:07,750 --> 01:13:09,070
0,210 210,300 300,450 450,780 780,1320
m in this particular case

2352
01:13:09,070 --> 01:13:09,920
0,630
a.

2353
01:13:10,380 --> 01:13:11,550
0,240 240,330 330,510 510,960 960,1170
That is not true, and

2354
01:13:11,550 --> 01:13:12,870
0,480 690,960 960,1110 1110,1230 1230,1320
so, um, you have to

2355
01:13:12,870 --> 01:13:13,590
0,300 300,420 420,540 540,630 630,720
basically get rid of the

2356
01:13:13,590 --> 01:13:14,180
0,420
panic.

2357
01:13:14,360 --> 01:13:15,230
0,150 150,570 570,660 660,750 750,870
And realized that it was

2358
01:13:15,230 --> 01:13:17,120
0,330 600,1110 1110,1230 1230,1470 1470,1890
not important to edit, therefore,

2359
01:13:17,150 --> 01:13:18,380
0,180 180,330 330,540 540,930
you should not benefit.

2360
01:13:21,770 --> 01:13:22,760
0,210 210,330 330,570 570,750 750,990
Um I think we talked

2361
01:13:22,760 --> 01:13:24,050
0,180 180,240 240,390 390,810 810,1290
quite a bit about why

2362
01:13:24,050 --> 01:13:26,090
0,420 420,780 780,990 990,1410 1530,2040
vm copy you is why

2363
01:13:26,090 --> 01:13:27,050
0,150 150,360 360,630 630,870 870,960
the new vm copy is

2364
01:13:27,050 --> 01:13:27,900
0,60 60,210 210,570
a good one.

2365
01:13:34,300 --> 01:13:36,310
0,270 270,420 420,690 690,1350 1380,2010
Okay, here's another question, um,

2366
01:13:36,520 --> 01:13:37,990
0,360 360,870 900,1170 1170,1380 1380,1470
let's say this may be

2367
01:13:37,990 --> 01:13:40,690
0,60 60,510 510,1710 1980,2400 2400,2700
an interesting, um, one question

2368
01:13:40,690 --> 01:13:42,040
0,120 120,570 570,720 720,960 960,1350
was asked for more design

2369
01:13:42,040 --> 01:13:42,880
0,570
question.

2370
01:13:43,010 --> 01:13:44,390
0,510 510,630 630,930 930,1200 1200,1380
Um I need help have

2371
01:13:44,390 --> 01:13:46,320
0,60 60,570 930,1650
a picture, um.

2372
01:13:46,590 --> 01:13:47,520
0,240 240,450 450,540 540,630 630,930
We look at the kernel

2373
01:13:47,520 --> 01:13:49,680
0,240 240,810 930,1140 1140,1530 1530,2160
address space where we limited.

2374
01:13:51,130 --> 01:13:53,470
0,270 270,660 1140,1380 1380,1860 1860,2340
My pen, we limited a

2375
01:13:53,500 --> 01:13:55,210
0,270 270,690 690,1050 1050,1440 1440,1710
user address user programs can

2376
01:13:55,210 --> 01:13:57,130
0,180 180,660 990,1470 1470,1830 1830,1920
be bigger user programs can

2377
01:13:57,130 --> 01:13:58,150
0,270 270,390 390,450 450,720 720,1020
grow through the clean address,

2378
01:13:58,150 --> 01:13:58,960
0,180 180,540
no food.

2379
01:14:00,000 --> 01:14:01,800
0,570 690,1140 1140,1410 1410,1590 1590,1800
Um, let's say we actually

2380
01:14:01,800 --> 01:14:03,030
0,300 300,390 390,900 900,1140 1140,1230
wanted to grow all the

2381
01:14:03,030 --> 01:14:04,000
0,150 150,270 270,720
way to here.

2382
01:14:04,680 --> 01:14:05,580
0,180 180,360 360,450 450,570 570,900
How could we do that

2383
01:14:05,640 --> 01:14:07,260
0,420 420,750 1080,1320 1320,1500 1500,1620
what what, how should we

2384
01:14:07,260 --> 01:14:08,970
0,420 420,510 510,1440 1440,1590 1590,1710
change the design that would

2385
01:14:08,970 --> 01:14:09,780
0,240 240,600
allow that.

2386
01:14:18,250 --> 01:14:19,200
0,720
Anybody.

2387
01:14:23,390 --> 01:14:24,890
0,240 240,540 540,810 810,990 990,1500
How can we {re-map -}

2388
01:14:24,890 --> 01:14:27,830
0,600 630,1350 1530,1860 1860,2160 2160,2940
the stuff, um, like Clinton

2389
01:14:27,830 --> 01:14:29,180
0,300 300,390 390,810 810,1140 1140,1350
Bill I see and you

2390
01:14:29,180 --> 01:14:29,840
0,360
are.

2391
01:14:31,310 --> 01:14:32,180
0,270 270,450 450,600 600,660 660,870
Yeah, where would you map

2392
01:14:32,180 --> 01:14:33,500
0,270 390,600 600,1050 1050,1200 1200,1320
up so we're if you

2393
01:14:33,500 --> 01:14:35,000
0,180 180,240 240,720 1080,1350 1350,1500
want to do free up

2394
01:14:35,000 --> 01:14:35,930
0,360 360,540 540,720 720,780 780,930
basically that part of the

2395
01:14:35,930 --> 01:14:37,280
0,270 270,540 540,780 780,1230 1230,1350
address phase where what could

2396
01:14:37,280 --> 01:14:37,900
0,90 90,360
you do.

2397
01:14:38,940 --> 01:14:41,010
0,330 330,660 660,960 960,1230 1230,2070
A map into a custom

2398
01:14:41,430 --> 01:14:43,350
0,540 540,1080 1080,1440 1440,1800 1800,1920
thing before turn base and

2399
01:14:43,350 --> 01:14:45,930
0,570 600,870 870,1380 1410,2160 2160,2580
after like before physical stop,

2400
01:14:45,930 --> 01:14:47,600
0,360 360,750 750,1050 1050,1560
and after current base.

2401
01:14:48,050 --> 01:14:49,850
0,390 390,930 960,1290 1290,1470 1470,1800
Yeah, or maybe it's better

2402
01:14:49,850 --> 01:14:51,560
0,210 210,570 570,720 720,1080 1260,1710
to after fish stock here's

2403
01:14:51,560 --> 01:14:52,370
0,90 90,360 360,600 600,660 660,810
a huge amount of free

2404
01:14:52,370 --> 01:14:53,140
0,570
space.

2405
01:14:53,360 --> 01:14:54,770
0,270 270,540 540,780 780,1020 1020,1410
Like address space isn't used

2406
01:14:54,770 --> 01:14:55,550
0,150 150,360 360,510 510,720 720,780
like this from here to

2407
01:14:55,550 --> 01:14:56,420
0,240 240,330 330,630 630,780 780,870
there is basically used for

2408
01:14:56,420 --> 01:14:57,440
0,270 270,690
physical memory.

2409
01:14:57,620 --> 01:14:58,580
0,120 120,240 240,570 570,690 690,960
And we basically could setup

2410
01:14:58,580 --> 01:15:00,080
0,450 450,780 780,900 900,1410 1410,1500
mappings here, for example we

2411
01:15:00,080 --> 01:15:01,160
0,120 120,240 240,330 330,870
could put the uart.

2412
01:15:01,210 --> 01:15:02,000
0,600
Here.

2413
01:15:03,720 --> 01:15:04,590
0,150 150,270 270,690 690,780 780,870
You are zero, we can

2414
01:15:04,590 --> 01:15:06,030
0,390 390,630 630,870 870,1080 1080,1440
put just about fish page

2415
01:15:06,030 --> 01:15:06,720
0,120 120,390 390,570 570,660 660,690
and basically set up a

2416
01:15:06,720 --> 01:15:07,740
0,420 420,720
mapping that.

2417
01:15:08,370 --> 01:15:09,690
0,420 420,480 480,690 690,1020 1020,1320
Maps in that particular physical

2418
01:15:09,690 --> 01:15:10,400
0,510
address.

2419
01:15:11,010 --> 01:15:12,120
0,240 240,600 600,810 810,930 930,1110
Right, then now will free

2420
01:15:12,120 --> 01:15:14,040
0,150 150,630 780,1440 1680,1860 1860,1920
up this mapping and we

2421
01:15:14,040 --> 01:15:15,030
0,120 120,330 330,450 450,720 720,990
could use it for user

2422
01:15:15,030 --> 01:15:16,590
0,540 690,930 930,1350 1350,1470 1470,1560
space, so similarly we could

2423
01:15:16,590 --> 01:15:17,250
0,60 60,270 270,390 390,570 570,660
do that for you are

2424
01:15:17,250 --> 01:15:18,960
0,510 510,660 660,960 960,1230 1230,1710
zero or purge io disk

2425
01:15:19,050 --> 01:15:20,220
0,180 180,480 480,600 600,990
for blink and clicked.

2426
01:15:21,420 --> 01:15:22,470
0,150 150,300 300,630 630,750 750,1050
And real kernels do that.

2427
01:15:24,730 --> 01:15:25,680
0,120 120,240 240,360 360,690
Does that make sense.

2428
01:15:37,000 --> 01:15:38,650
0,240 240,480 480,720 720,960 960,1650
Is it isn't that problematic

2429
01:15:38,650 --> 01:15:40,600
0,240 240,690 690,1140 1140,1380 1470,1950
though cause we would want

2430
01:15:40,600 --> 01:15:42,790
0,90 90,600 630,1050 1050,1680 1680,2190
the same same mapping as

2431
01:15:42,790 --> 01:15:44,140
0,150 150,1080
the original.

2432
01:15:44,290 --> 01:15:46,540
0,390 390,780 780,1050 1050,1620 1650,2250
A kernel page table has.

2433
01:15:48,200 --> 01:15:50,000
0,870 1200,1500 1500,1620 1620,1710 1710,1800
Well, we have to do

2434
01:15:50,000 --> 01:15:51,200
0,120 120,210 210,510 510,840 900,1200
it in every curve, every

2435
01:15:51,200 --> 01:15:52,490
0,210 210,420 420,750 750,1170 1170,1290
kernel page table, we have

2436
01:15:52,490 --> 01:15:53,510
0,480 480,600 600,720 720,810 810,1020
copies we have to map

2437
01:15:53,510 --> 01:15:54,830
0,120 120,780 780,870 870,1020 1020,1320
it everywhere at that particular

2438
01:15:54,830 --> 01:15:55,580
0,480
location.

2439
01:16:00,400 --> 01:16:01,210
0,180 180,330 330,480 480,660 660,810
I'm not sure that is

2440
01:16:01,210 --> 01:16:02,530
0,390 450,660 660,870 870,930 930,1320
a not sure I answered

2441
01:16:02,530 --> 01:16:03,700
0,90 90,510 510,840
your question, but.

2442
01:16:03,860 --> 01:16:04,550
0,180 180,300 300,420 420,540 540,690
Um I don't think that's

2443
01:16:04,550 --> 01:16:05,320
0,60 60,480
a problem.

2444
01:16:05,800 --> 01:16:07,030
0,210 210,360 360,510 510,1050 1050,1230
I see, so you do

2445
01:16:07,030 --> 01:16:08,650
0,210 210,810 900,1320 1320,1440 1440,1620
that mapping also in the

2446
01:16:08,680 --> 01:16:10,990
0,900 1050,1860 1860,2070 2070,2250 2250,2310
original yeah we have to

2447
01:16:10,990 --> 01:16:11,860
0,120 120,330 330,420 420,510 510,870
do those in the original

2448
01:16:11,860 --> 01:16:12,320
0,210
one.

2449
01:16:15,760 --> 01:16:17,200
0,120 120,510 510,1110 1140,1320 1320,1440
It doesn't easier if the

2450
01:16:17,200 --> 01:16:19,150
0,240 240,540 540,1230 1230,1470 1470,1950
old colonel uniformly thinks about

2451
01:16:19,360 --> 01:16:20,980
0,300 300,420 420,1230 1230,1500 1500,1620
you are zero sitting at

2452
01:16:20,980 --> 01:16:21,640
0,60 60,480
the top.

2453
01:16:28,850 --> 01:16:30,560
0,180 180,750 750,990 990,1350 1350,1710
Now remember people ask why

2454
01:16:30,560 --> 01:16:31,640
0,90 90,240 240,480 480,540 540,1080
do we map the kernel

2455
01:16:31,640 --> 01:16:32,940
0,450 450,690 690,1050
stacks high up.

2456
01:16:36,330 --> 01:16:36,840
0,450
MHM.

2457
01:16:37,190 --> 01:16:37,880
0,210 210,270 270,360 360,630 630,690
What is the reason for

2458
01:16:37,880 --> 01:16:39,800
0,330 420,780 780,1140 1140,1290 1290,1920
that sweep rockin at Gui.

2459
01:16:40,530 --> 01:16:42,780
0,540 570,930 930,1470 1680,2010 2010,2250
A map, these kernel stacks

2460
01:16:42,780 --> 01:16:43,800
0,210 210,540 570,840 840,900 900,1020
high up and if you

2461
01:16:43,800 --> 01:16:45,180
0,120 120,210 210,540 540,1050 1050,1380
did the copy approach you

2462
01:16:45,180 --> 01:16:46,260
0,270 270,480 480,540 540,960 960,1080
actually have to modify a

2463
01:16:46,260 --> 01:16:46,840
0,390
cop.

2464
01:16:46,930 --> 01:16:48,280
0,540 540,1140
Propaganda actually.

2465
01:16:48,990 --> 01:16:50,400
0,330 330,540 540,690 690,1140
Copy over that mapping.

2466
01:16:51,550 --> 01:16:53,260
0,540 570,1020 1020,1380 1380,1470 1470,1710
And why sitting in up

2467
01:16:53,260 --> 01:16:54,780
0,240 240,690 690,870 870,1350
high individual dress space.

2468
01:16:59,940 --> 01:17:00,860
0,660
Anybody.

2469
01:17:09,300 --> 01:17:11,370
0,180 180,390 420,990 990,1590 1590,2070
Is it specifically because the

2470
01:17:11,490 --> 01:17:12,630
0,270 270,420 420,810 810,930 930,1140
um the stacks in risk

2471
01:17:12,630 --> 01:17:14,220
0,330 330,600 600,1350 1350,1440 1440,1590
five grow downwards so you

2472
01:17:14,220 --> 01:17:14,880
0,210 210,300 300,480 480,570 570,660
place it high in the

2473
01:17:14,880 --> 01:17:16,200
0,330 330,630 630,810 810,930 930,1320
address space that it has

2474
01:17:16,200 --> 01:17:17,500
0,330 330,450 450,600 600,1110
space to grow downwards.

2475
01:17:17,780 --> 01:17:19,460
0,180 180,270 270,510 510,1020 1020,1680
Yeah, how much this direction

2476
01:17:19,460 --> 01:17:20,210
0,150 150,330 330,540 540,660 660,750
how much faith does it

2477
01:17:20,210 --> 01:17:21,440
0,210 210,300 300,450 450,990
have to grow downwards.

2478
01:17:25,650 --> 01:17:26,850
0,390 390,630 630,900 900,1080 1080,1200
That shouldn't matter because it's

2479
01:17:26,850 --> 01:17:28,350
0,270 270,450 450,780 780,1140 1290,1500
just one page right, yeah

2480
01:17:28,350 --> 01:17:29,190
0,120 120,270 270,480 480,750 750,840
it's only one page, so

2481
01:17:29,190 --> 01:17:30,330
0,150 150,420 420,510 510,600 600,1140
what happens if you grow

2482
01:17:30,330 --> 01:17:31,900
0,330 540,900 900,1380
your one page.

2483
01:17:37,200 --> 01:17:39,390
0,180 180,360 360,570 570,960 1620,2190
You run into the garbage,

2484
01:17:39,390 --> 01:17:40,080
0,390
correct.

2485
01:17:40,600 --> 01:17:41,710
0,270 270,330 330,570 570,900 900,1110
And the guard pages not

2486
01:17:41,710 --> 01:17:43,570
0,450 870,1110 1110,1380 1380,1590 1590,1860
mapped and so the kernel

2487
01:17:43,570 --> 01:17:44,380
0,120 120,600
will panic.

2488
01:17:44,540 --> 01:17:45,650
0,150 150,270 270,570 570,750 750,1110
Which is better than actually

2489
01:17:45,650 --> 01:17:47,210
0,360 360,600 600,720 720,960 960,1560
writing over its data structures.

2490
01:17:48,950 --> 01:17:49,820
0,180 180,270 270,540 540,690 690,870
So the reason it's high

2491
01:17:49,820 --> 01:17:51,320
0,240 240,420 450,1110 1110,1320 1320,1500
up is because we put

2492
01:17:51,320 --> 01:17:52,370
0,60 60,330 330,510 510,840 840,1050
a guard page below, it

2493
01:17:52,460 --> 01:17:53,480
0,180 180,300 300,510 510,660 660,1020
is there actually any physical

2494
01:17:53,480 --> 01:17:55,070
0,480 480,1080 1080,1230 1230,1320 1320,1590
memory associated with a guard

2495
01:17:55,070 --> 01:17:55,620
0,420
page.

2496
01:17:59,400 --> 01:18:01,200
0,480 780,1200 1230,1410 1410,1560 1560,1800
Well, no there's no physical

2497
01:18:01,200 --> 01:18:02,280
0,240 240,660 660,750 750,840 840,1080
memory associated with the cart

2498
01:18:02,280 --> 01:18:03,330
0,360 450,600 600,780 780,960 960,1050
page, so that's one of

2499
01:18:03,330 --> 01:18:04,470
0,180 180,450 450,690 690,960 960,1140
the cool things about putting

2500
01:18:04,470 --> 01:18:05,940
0,90 90,600 1020,1260 1260,1410 1410,1470
it high is that we

2501
01:18:05,940 --> 01:18:06,630
0,120 120,240 240,270 270,540 540,690
can put a guard page

2502
01:18:06,630 --> 01:18:08,460
0,510 630,1020 1020,1230 1230,1500 1500,1830
below that actually doesn't really

2503
01:18:08,460 --> 01:18:09,800
0,360 360,510 510,780 780,1110
consume any physical memory.

2504
01:18:12,690 --> 01:18:13,520
0,570
Okay.

2505
01:18:13,930 --> 01:18:14,860
0,150 150,240 240,360 360,690
Does that make sense.

2506
01:18:17,080 --> 01:18:19,780
0,480 480,1230 1830,2040 2040,2370 2370,2700
Also, basically the Canal staff

2507
01:18:19,780 --> 01:18:20,980
0,240 240,450 450,900
page will be.

2508
01:18:21,570 --> 01:18:23,430
0,780 810,1320 1320,1530 1530,1620 1620,1860
Physical somewhere, but the card

2509
01:18:23,430 --> 01:18:25,200
0,240 240,570 930,1530
page won't exactly.

2510
01:18:26,780 --> 01:18:27,710
0,330 330,540 540,600 600,690 690,930
Again, one of the cool

2511
01:18:27,710 --> 01:18:28,400
0,180 180,270 270,390 390,510 510,690
things you can do with

2512
01:18:28,400 --> 01:18:29,300
0,270 270,660
virtual matter.

2513
01:18:30,090 --> 01:18:31,620
0,240 240,360 360,780 780,930 930,1530
Is it possible to overshoot

2514
01:18:31,620 --> 01:18:33,600
0,120 120,480 480,1170 1200,1920 1920,1980
the guard page, that's a

2515
01:18:33,600 --> 01:18:35,370
0,180 180,630 870,1050 1050,1470 1530,1770
great question, you know one

2516
01:18:35,370 --> 01:18:36,360
0,120 120,330 330,390 390,780 780,990
of one for example is

2517
01:18:36,360 --> 01:18:37,230
0,120 120,240 240,360 360,780 780,870
you know you allocated the

2518
01:18:37,230 --> 01:18:39,150
0,570 570,1260 1350,1740 1740,1830 1830,1920
ga a buffer on the

2519
01:18:39,150 --> 01:18:41,820
0,300 300,450 450,1050 1320,2250 2250,2670
stack that actually, um is

2520
01:18:42,120 --> 01:18:43,500
0,690 690,930 930,1050 1050,1110 1110,1380
way bigger than the guard

2521
01:18:43,500 --> 01:18:44,460
0,240 240,510 510,600 600,780 780,960
page correct and sort of

2522
01:18:44,520 --> 01:18:46,500
0,360 360,990 1260,1440 1440,1680 1680,1980
goes into the next kernel

2523
01:18:46,500 --> 01:18:47,460
0,270 270,810
stack page.

2524
01:18:48,070 --> 01:18:49,120
0,330 330,510 510,750 750,930 930,1050
Um, and yeah you would

2525
01:18:49,120 --> 01:18:50,160
0,90 90,150 150,420 420,780
have a serious bug.

2526
01:18:50,510 --> 01:18:51,830
0,450 480,780 780,1080 1080,1200 1200,1320
A most likely you will

2527
01:18:51,830 --> 01:18:53,300
0,210 210,390 390,570 570,1050 1080,1470
run into that anyway because

2528
01:18:53,300 --> 01:18:54,470
0,120 120,600 600,780 780,870 870,1170
you would use the first

2529
01:18:54,470 --> 01:18:56,060
0,630 630,810 810,1320
entries that buffer.

2530
01:18:56,120 --> 01:18:56,990
0,240 240,450 450,570 570,660 660,870
And then you will get

2531
01:18:56,990 --> 01:18:58,460
0,660 690,930 930,1290
the page fault.

2532
01:19:00,640 --> 01:19:01,920
0,150 150,270 270,630 630,1050
When you get lucky.

2533
01:19:02,600 --> 01:19:03,980
0,240 240,390 390,570 570,1140 1140,1380
Um, so this is not

2534
01:19:03,980 --> 01:19:06,620
0,300 360,1260 1260,1590 1590,2100 2100,2640
a bulletproof kernel debugging technique,

2535
01:19:06,830 --> 01:19:08,030
0,450 450,600 630,870 870,1140 1140,1200
but it has proved to

2536
01:19:08,030 --> 01:19:10,360
0,540 570,1290 1290,1680 1680,2160
be a extremely effective.

2537
01:19:13,070 --> 01:19:14,000
0,240 240,690
Great question.

2538
01:19:18,980 --> 01:19:20,060
0,180 180,360 360,870
Any more questions.

2539
01:19:20,500 --> 01:19:21,610
0,240 240,360 360,630 630,780 780,1110
We'll go back to the

2540
01:19:21,910 --> 01:19:22,580
0,480
list.

2541
01:19:23,600 --> 01:19:24,290
0,240 240,360 360,450 450,480 480,690
See, we have a couple

2542
01:19:24,290 --> 01:19:25,550
0,120 120,480 480,600 600,900 960,1260
more minutes and then actually

2543
01:19:25,550 --> 01:19:26,360
0,60 60,150 150,270 270,450 450,810
we have one more minute.

2544
01:19:27,160 --> 01:19:28,600
0,300 300,450 450,660 660,750 750,1440
A I have a question,

2545
01:19:29,170 --> 01:19:31,600
0,570 900,1290 1290,1410 1410,1860 1890,2430
so once we have our

2546
01:19:31,600 --> 01:19:33,070
0,600 600,870 870,1170 1170,1350 1350,1470
kernel page table for the

2547
01:19:33,070 --> 01:19:35,200
0,840 900,1380 1380,1530 1530,1800 1800,2130
processes, does that mean that

2548
01:19:35,440 --> 01:19:36,420
0,240 240,750
in the.

2549
01:19:36,480 --> 01:19:38,060
0,570 750,1350
I'm trapped.

2550
01:19:39,110 --> 01:19:40,340
0,480 480,570 570,720 720,990 990,1230
Code, we don't need to

2551
01:19:40,340 --> 01:19:42,640
0,990 1020,1350 1350,2100
switch page tables.

2552
01:19:42,880 --> 01:19:45,280
0,330 330,660 660,750 1710,2070 2070,2400
I think the great question,

2553
01:19:45,280 --> 01:19:46,960
0,60 60,180 180,510 510,1050 1260,1680
a good design question, um,

2554
01:19:46,960 --> 01:19:47,860
0,180 180,270 270,450 450,510 510,900
and the answer is yes,

2555
01:19:47,860 --> 01:19:48,910
0,90 90,240 240,390 390,660 780,1050
you don't need it right,

2556
01:19:48,910 --> 01:19:49,660
0,570
because.

2557
01:19:49,760 --> 01:19:52,820
0,1110 1530,2040 2070,2550 2550,2940 2940,3060
A the main reason that

2558
01:19:52,820 --> 01:19:54,200
0,90 90,600 630,990 990,1080 1110,1380
the kernel or in Trump

2559
01:19:54,200 --> 01:19:55,100
0,420 420,540 540,660 660,810 810,900
lingo, we go through all

2560
01:19:55,100 --> 01:19:56,060
0,120 120,510 510,630 630,840 840,960
this trouble is because we

2561
01:19:56,060 --> 01:19:57,410
0,210 210,360 360,750 750,870 870,1350
have to copy the user.

2562
01:19:57,870 --> 01:19:59,160
0,330 330,510 510,630 630,780 780,1290
Um, we have to switch

2563
01:19:59,160 --> 01:20:00,090
0,150 150,210 210,450 450,660 660,930
from the kernel page table

2564
01:20:00,090 --> 01:20:01,110
0,120 120,210 210,450 450,690 690,1020
to the user page table,

2565
01:20:01,110 --> 01:20:02,700
0,90 90,300 300,540 540,1020 1230,1590
the user page table or

2566
01:20:02,760 --> 01:20:03,900
0,180 180,390 390,600 600,840 840,1140
a page table doesn't have

2567
01:20:03,900 --> 01:20:04,590
0,60 60,300 300,360 360,420 420,690
the rest of the kernel

2568
01:20:04,590 --> 01:20:05,240
0,450
map.

2569
01:20:05,710 --> 01:20:09,460
0,480 480,780 780,1320 1440,2340 2430,3750
Um, and so, um, downside

2570
01:20:09,580 --> 01:20:11,500
0,480 480,690 1110,1440 1440,1650 1650,1920
way I'm not sure that's

2571
01:20:11,500 --> 01:20:13,330
0,270 270,870 870,1020 1020,1470 1470,1830
true because the kernel needs

2572
01:20:13,330 --> 01:20:14,710
0,150 150,420 420,540 540,840 840,1380
to have the user block,

2573
01:20:14,890 --> 01:20:16,660
0,330 330,690 690,990 990,1200 1200,1770
a user flag on set.

2574
01:20:17,450 --> 01:20:18,230
0,360 360,510 510,630 630,750 750,780
Yeah okay so there's a

2575
01:20:18,230 --> 01:20:18,980
0,240 240,300 300,510 510,570 570,750
couple of points I wanted

2576
01:20:18,980 --> 01:20:21,290
0,60 60,900 1260,1710 1770,2160 2160,2310
to make a so in

2577
01:20:21,290 --> 01:20:23,840
0,750 780,1080 1080,1320 1320,1440 1440,2550
principle, um, you could simplify

2578
01:20:24,020 --> 01:20:25,340
0,840 840,1020 1020,1110 1110,1260 1260,1320
trend, let me put it

2579
01:20:25,340 --> 01:20:26,630
0,120 120,360 540,750 750,840 840,1290
this way you can simplify

2580
01:20:26,630 --> 01:20:28,370
0,240 240,330 330,840 1020,1440 1440,1740
entry and exit a if

2581
01:20:28,370 --> 01:20:29,240
0,150 150,330 330,390 390,630 630,870
you have a single page

2582
01:20:29,240 --> 01:20:30,470
0,300 300,450 450,750 750,810 810,1230
table that maps the user

2583
01:20:30,470 --> 01:20:31,370
0,90 90,150 150,660 660,840 840,900
in the kernel in a

2584
01:20:31,370 --> 01:20:32,480
0,270 270,480 480,780 780,990 990,1110
single page table because then

2585
01:20:32,480 --> 01:20:33,770
0,90 90,330 330,630 630,720 720,1290
you don't have to switch.

2586
01:20:33,980 --> 01:20:34,790
0,210 210,390 390,600 600,660 660,810
You will have to make

2587
01:20:34,790 --> 01:20:36,350
0,60 60,300 300,750 750,1470 1470,1560
a couple more modifications to

2588
01:20:36,350 --> 01:20:37,160
0,210 210,450 450,510 510,690 690,810
actually seek to make that

2589
01:20:37,160 --> 01:20:37,800
0,390
happen.

2590
01:20:38,260 --> 01:20:39,310
0,330 330,510 510,600 600,930 930,1050
A bit in principle you

2591
01:20:39,310 --> 01:20:40,720
0,300 300,390 390,450 450,810 1080,1410
could and in fact a

2592
01:20:40,720 --> 01:20:43,600
0,690 720,1020 1020,1260 1260,1920 2160,2880
Linux until very recently used

2593
01:20:43,630 --> 01:20:44,650
0,120 120,240 240,450 450,870 870,1020
you know this sort of

2594
01:20:44,650 --> 01:20:47,380
0,660 660,960 960,1620 1710,2070 2070,2730
strategy of where the kernel

2595
01:20:47,380 --> 01:20:50,320
0,600 600,1080 1440,2280 2460,2850 2850,2940
and the user code are

2596
01:20:50,320 --> 01:20:51,490
0,240 240,360 360,450 450,870 870,1170
sitting in a single page

2597
01:20:51,490 --> 01:20:52,220
0,540
table.

2598
01:20:52,400 --> 01:20:54,200
0,450 450,690 690,1110 1110,1320 1320,1800
Um, in relying on basically

2599
01:20:54,200 --> 01:20:55,280
0,210 540,720 720,780 780,900 900,1080
you, you know to make

2600
01:20:55,280 --> 01:20:56,420
0,240 240,480 480,840
sure that the.

2601
01:20:56,510 --> 01:21:00,500
0,1110 1110,1860 2130,2640 3180,3660 3660,3990
Um, uh, the user program

2602
01:21:00,500 --> 01:21:01,910
0,270 270,600 600,1020 1020,1170 1170,1410
couldn't actually modify any kernel

2603
01:21:01,910 --> 01:21:02,580
0,510
pages.

2604
01:21:02,880 --> 01:21:04,350
0,510 510,720 720,990 990,1260 1260,1470
And the entry exit code

2605
01:21:04,350 --> 01:21:05,310
0,60 60,210 210,450 450,600 600,960
in that case is slightly

2606
01:21:05,310 --> 01:21:06,570
0,510 540,900 900,990 990,1170 1170,1260
simpler because you don't have

2607
01:21:06,570 --> 01:21:07,920
0,90 90,450 450,1050 1050,1230 1230,1350
to switch tables when you

2608
01:21:07,920 --> 01:21:09,060
0,270 270,480 480,660 660,750 750,1140
enter or leave the colonel.

2609
01:21:10,040 --> 01:21:12,560
0,630 900,1740 1770,2070 2070,2190 2190,2520
Um, one thing that happened

2610
01:21:12,560 --> 01:21:14,090
0,210 210,630 630,750 750,1230 1230,1530
with resemble the meltdown attack

2611
01:21:14,090 --> 01:21:14,960
0,90 90,210 210,420 420,660
if you might have.

2612
01:21:15,170 --> 01:21:18,650
0,600 840,1680 2100,2700 2700,2940 2940,3480
A rudolph side channel attack.

2613
01:21:18,930 --> 01:21:20,640
0,510 510,960 960,1440 1440,1560 1560,1710
Um, in response to the

2614
01:21:20,640 --> 01:21:23,040
0,330 330,600 600,840 840,1290 1560,2400
actually side channel attack, Linux

2615
01:21:23,040 --> 01:21:24,660
0,420 420,540 540,780 780,1230 1230,1620
switch or as another mode

2616
01:21:24,660 --> 01:21:25,410
0,120 120,420 420,540 540,600 600,750
of running, there are two

2617
01:21:25,410 --> 01:21:26,490
0,210 210,300 300,600 600,810 810,1080
modes of running ones called

2618
01:21:26,490 --> 01:21:27,800
0,660 660,1110
kpi mode.

2619
01:21:28,190 --> 01:21:29,630
0,180 180,240 240,480 480,840 840,1440
And in that mode, basically

2620
01:21:29,660 --> 01:21:31,010
0,240 240,660 660,960 960,1110 1110,1350
that reflects basically what actually

2621
01:21:31,010 --> 01:21:31,880
0,270 270,720
six does.

2622
01:21:32,080 --> 01:21:33,610
0,240 240,510 510,600 600,1170 1170,1530
We're having a separate PhD

2623
01:21:33,610 --> 01:21:34,540
0,270 270,330 330,780 780,900 900,930
before the kernel and a

2624
01:21:34,540 --> 01:21:36,730
0,570 630,1260 1260,1470 1470,1710 1710,2190
separate page before user space.

2625
01:21:40,800 --> 01:21:42,270
0,390 390,570 570,780 780,960 960,1470
But I still don't understand

2626
01:21:42,270 --> 01:21:43,560
0,150 150,480 480,810 810,1110 1110,1290
why that's that works, so

2627
01:21:43,560 --> 01:21:44,640
0,210 210,360 360,510 510,750 750,1080
let's say the per user

2628
01:21:44,640 --> 01:21:47,040
0,390 390,540 540,750 780,1500 1800,2400
process and the colonel a

2629
01:21:47,040 --> 01:21:48,810
0,420 420,540 540,930 930,1260 1260,1770
use the same page table

2630
01:21:49,080 --> 01:21:51,240
0,510 540,780 780,1170 1170,1800 1830,2160
if the user memory has

2631
01:21:51,240 --> 01:21:52,140
0,90 90,270 270,360 360,690 690,900
to have the user bed

2632
01:21:52,140 --> 01:21:53,940
0,540 780,900 900,1380 1380,1560 1560,1800
set the kernel will not

2633
01:21:53,940 --> 01:21:54,960
0,90 90,300 300,420 420,780 780,1020
be able to access that

2634
01:21:54,960 --> 01:21:58,200
0,240 240,660 660,1020 1050,2190 2250,3240
user memory right OK, the

2635
01:21:58,800 --> 01:22:01,560
0,1710 1710,2490
eyes, okay.

2636
01:22:01,710 --> 01:22:03,090
0,330 330,600 600,1140 1140,1290 1290,1380
On Intel processors that is

2637
01:22:03,090 --> 01:22:04,890
0,150 150,240 240,690 1200,1410 1410,1800
not the rule, so example,

2638
01:22:04,890 --> 01:22:06,240
0,270 270,780 780,990 990,1140 1140,1350
Intel processors, if you've been

2639
01:22:06,240 --> 01:22:07,200
0,240 240,300 300,540 540,630 630,960
set the kernel could still

2640
01:22:07,200 --> 01:22:08,520
0,210 210,330 330,630 660,810 810,1320
write and read that page.

2641
01:22:08,960 --> 01:22:10,070
0,300 300,510 510,750 750,810 810,1110
Oh, that's just a risk

2642
01:22:10,070 --> 01:22:11,660
0,300 300,750 840,1170 1170,1350 1350,1590
five thing, um, and even

2643
01:22:11,660 --> 01:22:12,410
0,90 90,150 150,360 360,660 660,750
on the risk five you

2644
01:22:12,410 --> 01:22:13,340
0,90 90,420 420,720
can change it.

2645
01:22:13,510 --> 01:22:14,590
0,390 390,630 630,690 690,930 930,1080
Um, there's a bit in

2646
01:22:14,590 --> 01:22:16,300
0,180 180,570 570,1140 1290,1620 1620,1710
the status register, you can

2647
01:22:16,300 --> 01:22:18,070
0,450 480,960 960,1080 1080,1410 1410,1770
set that to some bit

2648
01:22:18,310 --> 01:22:19,090
0,180 180,240 240,390 390,570 570,780
and if you say that

2649
01:22:19,090 --> 01:22:21,040
0,150 150,870 930,1110 1110,1440 1440,1950
then basically in kernel mode,

2650
01:22:21,160 --> 01:22:22,840
0,420 450,810 810,900 900,1440
the Rubin is ignored.

2651
01:22:23,250 --> 01:22:24,450
0,330 330,540 540,750 750,1080 1080,1200
Okay so you're telling me

2652
01:22:24,450 --> 01:22:25,560
0,240 240,420 420,630 630,870 870,1110
that there's just one bit

2653
01:22:25,560 --> 01:22:27,750
0,150 150,540 990,1440 1440,1980 1980,2190
in this simo processor that

2654
01:22:27,750 --> 01:22:28,620
0,210 210,330 330,510 510,690 690,870
made me stay up four

2655
01:22:28,620 --> 01:22:31,890
0,300 300,780 840,1290 2610,3030 3030,3270
hours later, yes I'm very

2656
01:22:31,890 --> 01:22:32,880
0,270 270,510 510,720 720,810 810,990
sorry about that I should

2657
01:22:32,880 --> 01:22:36,810
0,180 990,1590 1590,1680 1680,1890 1890,3930
have known that it was

2658
01:22:36,810 --> 01:22:39,480
0,60 420,1290 1290,2070 2070,2430 2430,2670
a report, it reminded me

2659
01:22:39,480 --> 01:22:40,440
0,390 390,450 450,630 630,780 780,960
of a bug that I

2660
01:22:40,440 --> 01:22:41,520
0,300 300,510 510,720 720,780 780,1080
actually had during the summer

2661
01:22:41,520 --> 01:22:42,510
0,120 120,210 210,540 540,690 690,990
it was exactly that bug.

2662
01:22:43,510 --> 01:22:44,920
0,390 510,720 720,990 990,1230 1230,1410
But I forgot about it.

2663
01:22:46,910 --> 01:22:49,040
0,180 180,360 360,960 1380,1950 1950,2130
So my apology, no it's

2664
01:22:49,040 --> 01:22:50,090
0,330 330,450 450,720 720,900 900,1050
okay, it was a it

2665
01:22:50,090 --> 01:22:51,320
0,210 210,480 480,870 870,1020 1020,1230
was fun figuring it out

2666
01:22:51,320 --> 01:22:52,670
0,120 120,450 450,750 780,960 960,1350
for sure, but I at

2667
01:22:52,670 --> 01:22:53,390
0,180 180,390 390,450 450,540 540,720
some point I was just

2668
01:22:53,390 --> 01:22:54,950
0,120 120,420 420,750 990,1410 1410,1560
like okay like either I'm

2669
01:22:54,950 --> 01:22:56,900
0,510 510,690 690,1080 1080,1590 1590,1950
crazy or something completely wrong,

2670
01:22:56,900 --> 01:22:57,530
0,120 120,210 210,360 360,540 540,630
so I'm just gonna go

2671
01:22:57,530 --> 01:22:58,550
0,90 90,420 420,570 570,840 840,1020
to sleep and submit this

2672
01:22:58,550 --> 01:22:59,780
0,240 240,660 660,750 750,1080 1080,1230
got supposed and hopefully when

2673
01:22:59,780 --> 01:23:00,740
0,90 90,330 330,480 480,780 780,960
I wake up, someone will

2674
01:23:00,740 --> 01:23:02,630
0,540 840,1440 1440,1620 1620,1800 1800,1890
answer fortunately that was the

2675
01:23:02,630 --> 01:23:03,620
0,420 420,540 540,630 630,780 780,990
case so I was able

2676
01:23:03,620 --> 01:23:04,940
0,150 150,480 480,870 870,1110 1110,1320
to just continue right off

2677
01:23:04,940 --> 01:23:06,170
0,240 240,510 540,750 750,810 810,1230
when I when I did.

2678
01:23:08,260 --> 01:23:09,610
0,270 270,540 540,630 630,870 870,1350
Okay so I think we

2679
01:23:09,700 --> 01:23:10,990
0,270 270,720 720,780 780,960 960,1290
ran overtime a little bit,

2680
01:23:11,020 --> 01:23:13,090
0,690 810,1440 1440,1770 1770,1950 1950,2070
um, hopefully, um, this was

2681
01:23:13,090 --> 01:23:15,910
0,570 600,1020 1050,1980 2100,2730 2730,2820
helpful and reaffirm things with

2682
01:23:15,910 --> 01:23:16,900
0,270 270,750
virtual memory.

2683
01:23:17,010 --> 01:23:17,940
0,120 120,300 300,480 480,570 570,930
A I think it's important

2684
01:23:17,940 --> 01:23:18,690
0,60 60,300 300,510 510,630 630,750
to do because we're going

2685
01:23:18,690 --> 01:23:20,370
0,60 60,390 510,840 840,1080 1080,1680
to get three more laps

2686
01:23:20,370 --> 01:23:21,720
0,420 420,720 720,1110
involving virtual memory.

2687
01:23:22,010 --> 01:23:23,510
0,300 300,600 600,750 750,1170 1200,1500
Um, and my hope is

2688
01:23:23,510 --> 01:23:24,680
0,270 270,540 540,660 660,1080 1080,1170
that after this one you

2689
01:23:24,680 --> 01:23:25,520
0,120 120,300 300,420 420,480 480,840
know there's going to be

2690
01:23:25,550 --> 01:23:27,900
0,540 540,1230 1290,1530 1530,2220
easier than this experience.

2691
01:23:29,420 --> 01:23:30,560
0,240 240,330 330,600 600,930 930,1140
Can I ask something very

2692
01:23:30,560 --> 01:23:33,380
0,300 390,1740 1830,2070 2070,2640 2670,2820
quick, yeah yeah I'm I'm

2693
01:23:33,380 --> 01:23:34,730
0,300 300,510 510,810 810,1170 1170,1350
staying on so everybody wants

2694
01:23:34,730 --> 01:23:35,480
0,60 60,210 210,420 420,540 540,750
to stay on and ask

2695
01:23:35,480 --> 01:23:36,890
0,90 90,540 540,990 990,1230 1230,1410
more questions, please feel free

2696
01:23:36,890 --> 01:23:37,670
0,120 120,270 270,600 600,690 690,780
to do so if you

2697
01:23:37,670 --> 01:23:38,270
0,150 150,210 210,420 420,540 540,600
need to go to the

2698
01:23:38,270 --> 01:23:39,600
0,210 210,510 510,720 720,1050
next class, please go.

2699
01:23:40,620 --> 01:23:42,960
0,240 240,960 1320,1800 1800,2130 2130,2340
So basically, um in all

2700
01:23:42,960 --> 01:23:43,800
0,90 90,450 450,570 570,780 780,840
the labs like there's a

2701
01:23:43,800 --> 01:23:44,850
0,180 180,240 240,600 600,720 720,1050
lot of mention of like

2702
01:23:44,850 --> 01:23:46,020
0,240 240,510 510,870 870,1080 1080,1170
oh we this might be

2703
01:23:46,020 --> 01:23:47,490
0,360 360,480 480,870 870,1260 1260,1470
useful in future labs, but

2704
01:23:47,490 --> 01:23:48,690
0,120 120,300 300,690 690,990 990,1200
we never actually use any

2705
01:23:48,690 --> 01:23:49,800
0,90 90,210 210,600 600,750 750,1110
of the code that we

2706
01:23:49,890 --> 01:23:51,160
0,540 570,990
write like.

2707
01:23:51,250 --> 01:23:52,960
0,600 840,1110 1110,1230 1230,1560 1560,1710
What's what's the plan on

2708
01:23:52,960 --> 01:23:54,100
0,390 390,600 600,780 780,900 900,1140
that like should we just

2709
01:23:54,100 --> 01:23:55,270
0,450 450,570 570,930 930,1080 1080,1170
import our code from a

2710
01:23:55,270 --> 01:23:56,710
0,420 420,780 780,1050 1170,1350 1350,1440
previous lab or like I

2711
01:23:56,710 --> 01:23:57,700
0,90 90,240 240,330 330,630 630,990
don't want to because what

2712
01:23:57,700 --> 01:23:58,510
0,120 120,300 300,600 600,690 690,810
if it's buggy I don't

2713
01:23:58,510 --> 01:23:59,620
0,270 270,420 420,540 540,1020 1020,1110
wanna you know impact the

2714
01:23:59,620 --> 01:24:00,460
0,270 270,600
next lab.

2715
01:24:00,660 --> 01:24:01,650
0,180 180,390 390,600 600,870 870,990
Yeah, so, one reason we

2716
01:24:01,650 --> 01:24:02,430
0,180 180,330 330,600 600,690 690,780
don't do it, you know

2717
01:24:02,430 --> 01:24:03,720
0,180 180,420 420,510 510,900 900,1290
why, why the bills labs

2718
01:24:03,720 --> 01:24:04,620
0,210 210,450 450,570 570,690 690,900
don't build on each other,

2719
01:24:04,620 --> 01:24:06,090
0,210 210,360 360,510 510,900 1140,1470
even though they could, um

2720
01:24:06,090 --> 01:24:07,770
0,180 180,330 330,660 660,1020 1020,1680
used to avoid basic dependencies

2721
01:24:07,770 --> 01:24:08,310
0,150 150,270 270,360 360,480 480,540
like if you had a

2722
01:24:08,310 --> 01:24:09,780
0,240 240,330 330,630 630,1050 1050,1470
bug in a lab that

2723
01:24:09,780 --> 01:24:10,950
0,120 120,300 300,750 750,870 870,1170
was not exposed by user

2724
01:24:10,950 --> 01:24:12,210
0,510 630,930 930,1080 1080,1170 1170,1260
tests or any of our

2725
01:24:12,210 --> 01:24:13,740
0,510 690,1080 1080,1350 1350,1440 1440,1530
tests, um, but will be

2726
01:24:13,740 --> 01:24:14,820
0,360 360,420 420,570 570,750 750,1080
exposed to that new lab

2727
01:24:14,820 --> 01:24:16,140
0,240 240,360 360,540 540,780 780,1320
then you know be painful.

2728
01:24:16,680 --> 01:24:19,710
0,600 1020,1770 1860,2490 2490,2610 2610,3030
Um the reason I'm mentioning

2729
01:24:19,710 --> 01:24:21,390
0,270 270,450 450,600 600,1290 1440,1680
that is that basically the

2730
01:24:21,390 --> 01:24:22,410
0,240 240,390 390,570 570,780 780,1020
real thing, what's going on

2731
01:24:22,410 --> 01:24:23,250
0,120 120,240 240,420 420,510 510,840
is we're going to do

2732
01:24:23,250 --> 01:24:25,050
0,480 480,840 840,930 930,1170 1170,1800
more stuff with page tables.

2733
01:24:25,570 --> 01:24:27,430
0,600 870,1050 1050,1350 1350,1500 1500,1860
Um, for example, this lap

2734
01:24:27,430 --> 01:24:29,440
0,630 630,720 720,1230 1230,1740 1740,2010
looks at simplifying copy in

2735
01:24:29,560 --> 01:24:31,810
0,690 690,1110 1110,1290 1290,1500 1500,2250
later labs, we look at

2736
01:24:32,260 --> 01:24:34,090
0,420 420,570 570,780 780,1230 1290,1830
change to s break basically

2737
01:24:34,090 --> 01:24:35,890
0,150 150,450 450,840 840,1500 1650,1800
we're far gunnel to um

2738
01:24:35,890 --> 01:24:36,730
0,150 150,450 450,600 600,780 780,840
the changes you made to

2739
01:24:36,730 --> 01:24:38,260
0,90 90,540 750,870 870,1050 1050,1530
the colonel for his lap.

2740
01:24:38,860 --> 01:24:40,420
0,450 480,660 660,810 810,1230 1260,1560
But you know the fact

2741
01:24:40,420 --> 01:24:41,260
0,90 90,240 240,330 330,630 630,840
that you've been thinking about

2742
01:24:41,260 --> 01:24:42,490
0,210 210,450 450,750 750,960 960,1230
kernel page table user page

2743
01:24:42,490 --> 01:24:44,080
0,390 390,540 540,930 1110,1320 1320,1590
tables so much will help

2744
01:24:44,080 --> 01:24:44,500
0,210
you.

2745
01:24:45,060 --> 01:24:47,160
0,450 900,1140 1140,1440 1440,1710 1710,2100
Plus, it really helps you

2746
01:24:47,160 --> 01:24:48,660
0,630 630,1080 1080,1260 1260,1440 1440,1500
experience debugging these kinds of

2747
01:24:48,660 --> 01:24:50,850
0,630 1080,1260 1260,1500 1500,1980 1980,2190
problems due to incorrect page

2748
01:24:50,850 --> 01:24:51,480
0,510
tables.

2749
01:24:52,800 --> 01:24:53,550
0,270 270,330 330,510 510,690 690,750
Okay I just want to

2750
01:24:53,550 --> 01:24:54,690
0,180 180,540 570,750 750,930 930,1140
make sure that it's not

2751
01:24:54,690 --> 01:24:55,860
0,240 240,390 390,750 750,960 960,1170
like I'm missing out because

2752
01:24:55,860 --> 01:24:57,120
0,90 90,390 390,750 750,1020 1020,1260
I didn't copy over my

2753
01:24:57,120 --> 01:24:58,560
0,360 360,720 720,990 990,1200 1200,1440
ex arch code from lab

2754
01:24:58,560 --> 01:25:00,360
0,330 480,660 660,1140 1200,1710 1710,1800
one or something decided to

2755
01:25:00,360 --> 01:25:01,320
0,360 360,480 480,570 570,870 870,960
purchase that the labs were

2756
01:25:01,320 --> 01:25:02,460
0,240 240,600 600,690 690,840 840,1140
not dependent on each other.

2757
01:25:04,570 --> 01:25:05,800
0,300 300,780 900,1110 1110,1170 1170,1230
Okay, thanks see you on

2758
01:25:05,800 --> 01:25:07,340
0,420 750,1290
wednesday wednesday.

2759
01:25:12,470 --> 01:25:13,730
0,210 210,360 360,570 570,660 660,1260
A I had a follow-up

2760
01:25:13,730 --> 01:25:15,800
0,420 420,660 660,1110 1110,1530 1800,2070
on my question about a

2761
01:25:15,800 --> 01:25:18,500
0,630 630,870 990,1770 1800,2130 2130,2700
mapping a mapping a using

2762
01:25:18,530 --> 01:25:20,330
0,450 450,1110 1110,1320 1320,1410 1410,1800
the modification from the PhD

2763
01:25:20,330 --> 01:25:22,130
0,510 630,1140 1140,1380 1380,1560 1560,1800
lab, um, would it be

2764
01:25:22,130 --> 01:25:24,740
0,480 600,1260 1260,1650 1740,2490 2490,2610
then needed to half the

2765
01:25:24,740 --> 01:25:25,840
0,900
trampoline.

2766
01:25:26,050 --> 01:25:27,320
0,360 360,1110
I'm maps.

2767
01:25:27,930 --> 01:25:29,910
0,240 240,660 660,1050 1050,1290 1290,1980
In the user page tables.

2768
01:25:30,760 --> 01:25:31,930
0,660 660,840 840,960 960,990 990,1170
Um, okay so I haven't

2769
01:25:31,930 --> 01:25:34,510
0,180 180,390 390,540 540,1080 1260,2580
really thought this through, um.

2770
01:25:34,810 --> 01:25:36,430
0,510 510,690 690,1110 1110,1470 1470,1620
So if you've kernels, let's

2771
01:25:36,430 --> 01:25:37,330
0,90 90,180 180,450 450,780 780,900
say the kernel exits, so

2772
01:25:37,330 --> 01:25:38,440
0,330 330,450 450,600 600,720 720,1110
let's say we have enjoyed

2773
01:25:38,440 --> 01:25:39,580
0,210 210,510 510,720 720,1020 1020,1140
one single page table as

2774
01:25:39,580 --> 01:25:41,260
0,240 240,600 600,960 960,1350 1350,1680
a one year shown Rec.

2775
01:25:41,760 --> 01:25:43,680
0,780 990,1200 1200,1410 1410,1770 1770,1920
And, um, we're jumping out

2776
01:25:43,680 --> 01:25:45,510
0,60 60,150 150,840 1110,1560 1560,1830
of the kernel a through

2777
01:25:45,510 --> 01:25:46,400
0,330 330,690
user ET.

2778
01:25:46,630 --> 01:25:48,460
0,720 720,1110 1110,1260 1260,1590 1590,1830
Um in our goal is

2779
01:25:48,460 --> 01:25:50,650
0,900 1290,1530 1530,1710 1710,1920 1920,2190
to um, we're still running

2780
01:25:50,650 --> 01:25:51,580
0,60 60,360 360,630 630,750 750,930
in kernel mode, so this

2781
01:25:51,580 --> 01:25:53,710
0,330 330,810 810,1440 1440,1770 1770,2130
page shortly accessible correct in

2782
01:25:53,710 --> 01:25:54,760
0,180 180,240 240,510 510,780 780,1050
by the current older guard

2783
01:25:54,760 --> 01:25:55,700
0,540
page.

2784
01:25:55,800 --> 01:25:56,610
0,120 120,390 390,450 450,600 630,810
Oh sure you do not

2785
01:25:56,610 --> 01:25:57,330
0,60 60,300 300,510 510,630 630,720
the card page when I'm

2786
01:25:57,330 --> 01:25:59,190
0,390 540,690 690,1200 1200,1530 1530,1860
saying the trampoline pages there.

2787
01:26:01,040 --> 01:26:05,180
0,630 630,1590 1920,2460 2460,3450 3510,4140
And presumably a somewhere, um,

2788
01:26:05,180 --> 01:26:07,610
0,270 270,600 600,660 660,1260 1290,2430
we need to map maybe.

2789
01:26:08,210 --> 01:26:09,380
0,900
The.

2790
01:26:11,670 --> 01:26:14,340
0,870 1050,1260 1260,1350 1350,2100 2250,2670
A well, the user trap

2791
01:26:14,340 --> 01:26:16,350
0,330 330,420 420,570 570,930 1740,2010
frame, we don't really have

2792
01:26:16,350 --> 01:26:17,970
0,300 300,420 420,1020 1080,1530 1530,1620
access to anyway because we're

2793
01:26:17,970 --> 01:26:19,020
0,300 300,540 540,810 810,930 930,1050
running kernel mouth, we know

2794
01:26:19,020 --> 01:26:19,920
0,240 240,330 330,570 570,690 690,900
where it sits in the

2795
01:26:19,920 --> 01:26:21,420
0,270 270,780 780,1020 1020,1170 1170,1500
proc structure, or we can

2796
01:26:21,450 --> 01:26:22,220
0,240 240,480
get it.

2797
01:26:22,580 --> 01:26:23,480
0,450 450,600 600,660 660,840 840,900
Um, so I think we

2798
01:26:23,480 --> 01:26:24,640
0,150 150,360 360,960
can just exit.

2799
01:26:25,820 --> 01:26:27,740
0,480 480,750 750,810 810,1710
And when you return.

2800
01:26:28,410 --> 01:26:30,030
0,990 990,1200 1200,1380 1380,1470 1470,1620
Ozzy user code can just

2801
01:26:30,030 --> 01:26:31,170
0,510 540,690 690,840 840,1020 1020,1140
run you know we of

2802
01:26:31,170 --> 01:26:32,250
0,270 270,570 570,810 810,900 900,1080
course Youtube is a bit

2803
01:26:32,250 --> 01:26:33,080
0,150 150,570
of a.

2804
01:26:36,640 --> 01:26:37,810
0,240 240,450 450,600 600,870 870,1170
But Yoga is always seven

2805
01:26:37,810 --> 01:26:39,190
0,420 420,570 570,810 810,1110 1110,1380
pages that actually sit in

2806
01:26:39,190 --> 01:26:40,300
0,240 240,510 510,810 810,900 900,1110
the user space, so that's

2807
01:26:40,300 --> 01:26:41,860
0,240 240,690 990,1140 1140,1380 1380,1560
fine too, so when we

2808
01:26:41,860 --> 01:26:43,420
0,210 210,300 300,840 840,1140 1140,1560
enter the curricular back in

2809
01:26:43,450 --> 01:26:44,680
0,270 270,630 630,810 810,990 990,1230
we're still with this page

2810
01:26:44,680 --> 01:26:45,970
0,300 300,480 480,720 720,990 990,1290
table that page table already

2811
01:26:45,970 --> 01:26:47,770
0,630 960,1260 1260,1350 1350,1620 1620,1800
has all the kernel now

2812
01:26:47,770 --> 01:26:48,480
0,510
mapped.

2813
01:26:48,540 --> 01:26:49,290
0,240 240,330 330,450 450,660 660,750
And we can just you

2814
01:26:49,290 --> 01:26:50,460
0,150 150,870 870,990 990,1080 1080,1170
know copy, you know the

2815
01:26:50,460 --> 01:26:51,450
0,510 510,660 660,750 750,900 900,990
registers that we need to

2816
01:26:51,450 --> 01:26:52,800
0,330 330,660 660,780 780,1020 1020,1350
save into the proc structure

2817
01:26:52,800 --> 01:26:53,520
0,480
directly.

2818
01:26:54,320 --> 01:26:55,190
0,300 300,360 360,630 630,690 690,870
Instead of having to go

2819
01:26:55,190 --> 01:26:58,400
0,690 1200,2100 2430,2760 2760,3030 3030,3210
through a separate page with

2820
01:26:58,400 --> 01:26:59,520
0,90 90,570 570,690 690,900
the product in it.

2821
01:27:00,410 --> 01:27:01,340
0,150 150,270 270,600 600,690 690,930
So I believe the change

2822
01:27:01,340 --> 01:27:03,620
0,90 90,660 1140,1380 1380,2040
will be pretty straightforward.

2823
01:27:05,070 --> 01:27:07,710
0,570 600,750 750,1290 1680,2070 2070,2640
Okay I see, thank you

2824
01:27:07,800 --> 01:27:09,480
0,120 120,360 360,840 1380,1530 1530,1680
for your horse I could

2825
01:27:09,480 --> 01:27:12,480
0,90 90,480 1560,2100 2100,2670 2820,3000
be wrong, yeah I'm I'm

2826
01:27:12,480 --> 01:27:14,190
0,150 150,630 660,1110 1110,1290 1290,1710
now gonna try it now.

