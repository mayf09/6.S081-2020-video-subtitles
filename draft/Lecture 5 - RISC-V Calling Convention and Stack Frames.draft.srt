1
00:00:00,810 --> 00:00:02,860
EB.
810,2640

2
00:00:05,770 --> 00:00:07,510
Hey buddy, people hear what
90,390 390,780 1170,1500 1500,1680 1680,1830

3
00:00:07,510 --> 00:00:09,190
I'm saying or you're good,
1830,1920 1920,2280 2280,2640 2910,3150 3150,3510

4
00:00:09,670 --> 00:00:13,060
good, awesome I just want
3990,4530 5340,6180 6750,7080 7080,7260 7260,7380

5
00:00:13,060 --> 00:00:14,440
to get started with similar
7380,7440 7440,7560 7560,8010 8010,8400 8400,8760

6
00:00:14,440 --> 00:00:15,340
to last week where we
8760,8850 8850,9240 9240,9390 9390,9540 9540,9660

7
00:00:15,340 --> 00:00:17,710
asked you about, um, the
9660,9930 9930,10050 10050,10800 11070,11670 11820,12030

8
00:00:17,710 --> 00:00:18,760
Utah lab I just want
12030,12390 12390,12720 12720,12810 12810,12930 12930,13080

9
00:00:18,760 --> 00:00:19,690
to get started by asking
13080,13140 13140,13260 13260,13590 13590,13710 13710,14010

10
00:00:19,690 --> 00:00:20,560
a little bit about Cisco
14010,14070 14070,14220 14220,14310 14310,14520 14520,14880

11
00:00:20,560 --> 00:00:22,030
lab since that was due
14880,15240 15240,15450 15450,15600 15600,15750 15750,16350

12
00:00:22,330 --> 00:00:24,140
on thursday.
16650,17280 17310,18210

13
00:00:24,520 --> 00:00:26,140
So if anybody just has
120,480 480,570 570,930 930,1170 1170,1740

14
00:00:26,320 --> 00:00:28,150
like something particularly interesting, they
1920,2220 2220,2490 2490,3090 3090,3630 3630,3750

15
00:00:28,150 --> 00:00:29,350
found about the lab or
3750,3990 3990,4200 4200,4320 4320,4800 4800,4950

16
00:00:29,350 --> 00:00:30,430
a nasty bug that they
4950,5010 5010,5400 5400,5700 5700,5820 5820,6030

17
00:00:30,430 --> 00:00:32,080
found or just a silly
6030,6630 6630,6900 7050,7350 7350,7410 7410,7680

18
00:00:32,080 --> 00:00:33,340
mistake, they made anything you
7680,8100 8100,8220 8220,8520 8520,8820 8820,8940

19
00:00:33,340 --> 00:00:34,150
want to share about the
8940,9090 9090,9150 9150,9420 9420,9660 9660,9750

20
00:00:34,150 --> 00:00:35,540
Cisco lab to be.
9750,10140 10140,10470 10470,10590 10590,10890

21
00:00:35,780 --> 00:00:36,900
That'd be great.
120,300 300,360 360,750

22
00:00:38,450 --> 00:00:40,370
I somehow managed to delete
330,630 630,990 990,1530 1530,1620 1620,2250

23
00:00:40,370 --> 00:00:42,890
the part from um where
2250,2370 2370,2880 2880,3240 3240,3810 3900,4770

24
00:00:42,920 --> 00:00:44,240
from fork where you have
4800,5100 5100,5640 5640,5820 5820,5940 5940,6120

25
00:00:44,240 --> 00:00:45,470
to copy over the mask,
6120,6240 6240,6630 6630,6840 6840,6900 6900,7350

26
00:00:45,470 --> 00:00:46,460
so I had that working
7350,7470 7470,7560 7560,7710 7710,7890 7890,8340

27
00:00:46,460 --> 00:00:47,360
and then I change something
8340,8490 8490,8610 8610,8700 8700,8970 8970,9240

28
00:00:47,360 --> 00:00:48,470
else and then I tested
9240,9630 9630,9750 9750,9900 9900,9960 9960,10350

29
00:00:48,470 --> 00:00:49,860
it for.
10350,10950 10950,11370

30
00:00:50,200 --> 00:00:51,400
Your audio is like cutting
120,480 480,780 780,870 870,1050 1050,1320

31
00:00:51,400 --> 00:00:53,260
out all it is sorry.
1320,1800 1800,1980 1980,2070 2070,2400 2430,3180

32
00:00:53,970 --> 00:00:54,880
You hear me.
90,270 270,390 390,780

33
00:00:58,060 --> 00:00:59,020
I hear you.
120,300 300,540 540,810

34
00:00:59,380 --> 00:01:02,710
Oh, okay, um, yeah I
120,480 510,1020 1560,2220 2850,3240 3240,3450

35
00:01:02,710 --> 00:01:03,560
guess.
3450,3990

36
00:01:03,680 --> 00:01:06,110
So basically I deleted somehow
120,600 600,1170 1170,1350 1350,1950 1950,2550

37
00:01:06,140 --> 00:01:07,490
the copy of the mask
2580,2850 2850,3210 3210,3330 3330,3420 3420,3930

38
00:01:07,490 --> 00:01:09,650
and then my my fork
3930,4050 4050,4440 4560,5130 5160,5460 5460,6090

39
00:01:09,680 --> 00:01:11,690
didn't work anymore, so then
6120,6570 6570,6810 6810,7350 7560,7920 7920,8130

40
00:01:11,690 --> 00:01:12,380
I was just like I
8130,8190 8190,8310 8310,8490 8490,8700 8700,8820

41
00:01:12,380 --> 00:01:13,400
did that, how does it
8820,9090 9090,9360 9360,9540 9540,9720 9720,9840

42
00:01:13,400 --> 00:01:14,930
not work, so spend a
9840,10050 10050,10440 10680,11010 11010,11310 11310,11370

43
00:01:14,930 --> 00:01:16,250
lot of time figuring out.
11370,11580 11580,11670 11670,11940 11940,12360 12360,12690

44
00:01:16,620 --> 00:01:18,000
What I did wrong and
120,390 390,480 480,750 750,1080 1110,1500

45
00:01:18,060 --> 00:01:19,470
I realized I just deleted
1560,1740 1740,2280 2280,2340 2340,2580 2580,2970

46
00:01:19,470 --> 00:01:20,760
that line from her.
2970,3150 3150,3360 3360,3510 3510,3900

47
00:01:22,820 --> 00:01:24,230
Is anybody having trouble hearing
120,270 270,570 570,780 780,1050 1050,1530

48
00:01:24,230 --> 00:01:25,250
luca is that on my
1530,1920 1920,2010 2010,2190 2190,2310 2310,2550

49
00:01:25,250 --> 00:01:25,880
end.
2550,2940

50
00:01:26,290 --> 00:01:27,130
I think its on your
90,240 240,420 420,570 570,720 720,930

51
00:01:27,130 --> 00:01:27,640
end.
930,1170

52
00:01:28,000 --> 00:01:29,160
Yeah I'm fine.
60,570 570,660 660,960

53
00:01:32,290 --> 00:01:33,250
This must be on my
1590,1800 1800,2040 2040,2160 2160,2310 2310,2550

54
00:01:33,250 --> 00:01:34,300
end.
2550,2910

55
00:01:56,320 --> 00:01:57,520
Sorry, maybe that'll work better
60,360 360,570 570,840 840,1020 1020,1260

56
00:01:57,520 --> 00:01:59,280
now.
1260,1710

57
00:02:02,760 --> 00:02:03,630
Can you hear me now,
120,270 270,360 360,510 510,600 600,990

58
00:02:04,800 --> 00:02:07,260
okay great I was worried
2160,2550 2550,3690 3690,3720 3870,4170 4170,4620

59
00:02:07,260 --> 00:02:08,550
that I was just talking
4620,4920 4920,5100 5100,5190 5190,5520 5520,5910

60
00:02:08,550 --> 00:02:10,500
no no seems to be
5910,6420 6420,6780 7380,7680 7680,7770 7770,7860

61
00:02:10,500 --> 00:02:12,260
on my end, alright.
7860,7980 7980,8190 8190,8490 8760,9360

62
00:02:16,870 --> 00:02:19,270
Awesome, will anybody else have
270,1170 1890,2040 2040,2310 2310,2550 2550,2670

63
00:02:19,270 --> 00:02:20,110
anything they'd like to share
2670,2910 2910,3060 3060,3210 3210,3300 3300,3510

64
00:02:20,110 --> 00:02:21,850
about you or assist call.
3510,3810 3810,4140 4170,4440 4440,4740 4740,5250

65
00:02:24,190 --> 00:02:27,010
Anything particularly interesting or was
90,480 480,1170 1170,1890 1890,2310 2730,2910

66
00:02:27,010 --> 00:02:28,930
the lab absolutely horrendous and
2910,3000 3000,3420 3450,3990 3990,4590 4590,4830

67
00:02:28,930 --> 00:02:29,560
you think we should cut
4830,4920 4920,5070 5070,5160 5160,5310 5310,5460

68
00:02:29,560 --> 00:02:30,700
it out of the class.
5460,5550 5550,5700 5700,5760 5760,5850 5850,6600

69
00:02:31,120 --> 00:02:32,400
Never do it again.
120,510 510,630 630,720 720,1110

70
00:02:33,430 --> 00:02:36,610
Um I have something apparently
510,690 690,900 900,1080 1080,1620 2880,3690

71
00:02:36,610 --> 00:02:39,100
the order of things matters
3690,4320 4320,4680 4680,4800 4800,5460 5490,6180

72
00:02:39,130 --> 00:02:40,480
which is a general statement,
6210,6330 6330,6390 6390,6480 6480,6900 6900,7560

73
00:02:40,780 --> 00:02:43,570
um, so I tried to
7860,8400 8400,9270 9360,9690 9690,10230 10230,10650

74
00:02:43,600 --> 00:02:47,080
determine the mass computation inside
10680,11640 11850,12120 12120,12510 12510,13530 13530,14160

75
00:02:47,080 --> 00:02:48,720
the sis call function.
14160,14370 14370,14640 14640,14940 14940,15540

76
00:02:48,980 --> 00:02:51,050
Before determining whether I actually
120,750 750,1320 1320,1650 1650,1800 1800,2190

77
00:02:51,050 --> 00:02:52,400
needed to do the tracing.
2190,2550 2550,2670 2670,2880 2880,2970 2970,3540

78
00:02:53,100 --> 00:02:54,960
And so all the sis
180,420 420,1140 1200,1590 1590,1710 1710,2040

79
00:02:54,960 --> 00:02:57,540
calls we're getting correctly traced
2040,2760 2790,3000 3000,3360 3360,4050 4050,4620

80
00:02:57,570 --> 00:02:59,500
except that race call.
4650,5340 5370,5580 5580,5850 5850,6300

81
00:02:59,560 --> 00:03:01,390
And I was really getting
120,270 270,420 420,870 900,1380 1380,1950

82
00:03:01,420 --> 00:03:03,100
disturbed by that until I
1980,2580 2580,2760 2760,3060 3060,3390 3390,3660

83
00:03:03,100 --> 00:03:03,940
think it was David who
3660,3840 3840,3900 3900,4080 4080,4380 4380,4500

84
00:03:03,940 --> 00:03:04,780
pointed out you know you
4500,4860 4860,5040 5040,5130 5130,5250 5250,5340

85
00:03:04,780 --> 00:03:06,340
should do the computation after.
5340,5460 5460,5580 5580,5640 5640,6240 6240,6900

86
00:03:06,860 --> 00:03:08,990
You should trace just like
120,300 300,630 780,1320 1800,2130 2130,2250

87
00:03:08,990 --> 00:03:10,300
a that's fun.
2250,2670 2880,3090 3090,3300

88
00:03:10,790 --> 00:03:11,540
Alright.
90,570

89
00:03:13,150 --> 00:03:14,020
I'm glad you were able
930,1260 1260,1500 1500,1560 1560,1620 1620,1800

90
00:03:14,020 --> 00:03:16,420
to catch that yeah order
1800,1920 1920,2190 2190,2550 3000,3960 3960,4200

91
00:03:16,420 --> 00:03:18,460
does matter, especially for page
4200,4410 4410,4830 4860,5850 5850,5970 5970,6240

92
00:03:18,460 --> 00:03:19,780
tables, you'll find I think
6240,6840 6840,7020 7020,7320 7320,7380 7380,7560

93
00:03:19,780 --> 00:03:21,640
that order matters there as
7560,7710 7710,8370 8580,9090 9090,9300 9300,9420

94
00:03:21,640 --> 00:03:23,080
well and generally throughout the
9420,9900 9900,10080 10080,10470 10470,10770 10770,10860

95
00:03:23,080 --> 00:03:23,920
class.
10860,11580

96
00:03:24,090 --> 00:03:25,170
Paying attention to the order
90,330 330,720 720,810 810,930 930,1170

97
00:03:25,170 --> 00:03:26,220
of things will be important.
1170,1260 1260,1530 1530,1620 1620,1710 1710,2220

98
00:03:28,140 --> 00:03:29,370
It's good to not overwrite
120,270 270,510 510,600 600,900 900,1350

99
00:03:29,370 --> 00:03:30,640
things in page table.
1350,1620 1620,1710 1710,1920 1920,2340

100
00:03:31,630 --> 00:03:33,580
I also had something which
90,240 240,1050 1140,1470 1470,1770 1770,2040

101
00:03:33,580 --> 00:03:34,920
I'm actually still.
2040,2190 2190,2670 2670,3150

102
00:03:34,950 --> 00:03:38,100
Confused about, um, well I
90,570 570,1110 1260,2070 2100,2700 2700,3240

103
00:03:38,370 --> 00:03:39,750
had a lot of debugging
3510,3900 3900,3960 3960,4170 4170,4410 4410,4890

104
00:03:39,750 --> 00:03:41,490
print statements in the kernel
4890,5580 5580,5970 5970,6060 6060,6180 6180,6630

105
00:03:41,490 --> 00:03:44,700
code I then ran that
6630,7140 8010,8670 8700,9030 9030,9540 9540,9840

106
00:03:44,700 --> 00:03:46,350
race thing with all of
9840,10590 10590,10920 10920,11160 11160,11370 11370,11490

107
00:03:46,350 --> 00:03:48,120
the bits set, um, so
11490,11670 11670,12000 12000,12660 12750,13050 13050,13260

108
00:03:48,120 --> 00:03:50,310
basically tracing all the system
13260,13650 13650,14490 14790,14970 14970,15090 15090,15450

109
00:03:50,310 --> 00:03:51,400
calls.
15450,15990

110
00:03:51,520 --> 00:03:52,540
And.
120,930

111
00:03:52,870 --> 00:03:55,300
I think I saw a
90,330 330,690 690,870 870,2340 2340,2520

112
00:03:55,300 --> 00:03:57,550
lot of tracing for the
2520,2790 2790,3420 3630,4350 4350,4650 4650,4770

113
00:03:57,550 --> 00:03:59,200
prince stamens in the kernel,
4770,5040 5040,5730 5730,5910 5910,6030 6030,6420

114
00:03:59,200 --> 00:04:00,240
and then.
6420,6600 6600,7080

115
00:04:00,410 --> 00:04:02,390
Because and then I assumed
90,660 870,1080 1080,1260 1260,1380 1380,2070

116
00:04:02,390 --> 00:04:04,430
that my prince my print
2070,2460 2460,2790 2790,3330 3360,3720 3720,4110

117
00:04:04,430 --> 00:04:05,960
apps were.
4110,4680 4680,5490

118
00:04:06,260 --> 00:04:08,000
Trying to read and write
120,510 510,900 900,1140 1140,1320 1320,1860

119
00:04:08,120 --> 00:04:09,980
to the console, but that
1980,2130 2130,2250 2250,2970 3000,3570 3570,3840

120
00:04:09,980 --> 00:04:11,030
do write to the console,
3840,3990 3990,4200 4200,4290 4290,4410 4410,4890

121
00:04:11,030 --> 00:04:13,160
but then I was wondering.
4890,5100 5100,5640 5760,6060 6060,6270 6270,7020

122
00:04:13,670 --> 00:04:15,560
Why are we I guess,
90,450 450,660 660,1260 1530,1800 1800,1980

123
00:04:15,560 --> 00:04:16,700
I'm just confused why we're
1980,2100 2100,2280 2280,2700 2700,2850 2850,3120

124
00:04:16,700 --> 00:04:18,320
able to use print f
3120,3540 3540,3660 3660,4170 4170,4530 4530,4740

125
00:04:18,320 --> 00:04:21,280
in the kernel.
4740,4830 4830,4950 4950,5610

126
00:04:22,670 --> 00:04:23,990
Yeah I'm not I haven't
210,510 510,630 630,870 870,1170 1170,1530

127
00:04:23,990 --> 00:04:25,520
looked at the print f
1530,1770 1770,1860 1860,2190 2220,2490 2490,3060

128
00:04:25,550 --> 00:04:27,260
code recently, but I think
3090,3810 3810,4380 4380,4530 4530,4620 4620,4800

129
00:04:27,260 --> 00:04:28,560
there's a file.
4800,4950 4950,5040 5040,5820

130
00:04:28,630 --> 00:04:29,860
A print f dot c
90,300 300,660 660,810 810,1020 1020,1320

131
00:04:29,860 --> 00:04:30,730
you might be a look
1320,1470 1470,1650 1650,1740 1740,1860 1860,2190

132
00:04:30,730 --> 00:04:31,630
at if you want to.
2190,2370 2370,2520 2520,2610 2610,2820 2820,3090

133
00:04:32,160 --> 00:04:32,920
I'm.
240,750

134
00:04:34,430 --> 00:04:35,750
Hear what was going on
270,870 870,1020 1020,1170 1170,1410 1410,1590

135
00:04:35,750 --> 00:04:36,350
there, so I think the
1590,1830 1830,1920 1920,1980 1980,2130 2130,2190

136
00:04:36,350 --> 00:04:37,280
print f function should be
2190,2400 2400,2490 2490,2850 2850,3030 3030,3120

137
00:04:37,280 --> 00:04:38,620
implemented in there.
3120,3660 3660,3780 3780,4110

138
00:04:39,530 --> 00:04:39,940
MHM.
90,330

139
00:04:41,120 --> 00:04:42,110
At least our version of
120,360 360,570 570,750 750,1020 1020,1110

140
00:04:42,110 --> 00:04:43,430
it I don't know perhaps
1110,1320 1530,1860 1860,1980 1980,2130 2130,2430

141
00:04:43,430 --> 00:04:44,420
one of the.
2430,2580 2580,2700 2700,3090

142
00:04:44,650 --> 00:04:45,250
What are some of the
90,300 300,330 330,540 540,600 600,690

143
00:04:45,250 --> 00:04:46,600
other core staff might know.
690,900 900,1110 1110,1440 1440,1620 1620,2040

144
00:04:47,370 --> 00:04:48,420
What's going on.
90,330 330,630 630,840

145
00:04:49,270 --> 00:04:50,800
And the prints in the
390,630 630,1140 1200,1740 1740,1860 1860,1920

146
00:04:50,800 --> 00:04:52,720
kernel shouldn't show up as
1920,2250 2250,2610 2610,2850 2850,3240 3240,3840

147
00:04:52,750 --> 00:04:54,490
your traces because print up
3870,4110 4110,4650 4650,5100 5130,5490 5490,5610

148
00:04:54,490 --> 00:04:55,510
in the kernel doesn't call
5610,5730 5730,5820 5820,6090 6090,6360 6360,6630

149
00:04:55,510 --> 00:04:56,860
any system calls.
6630,6810 6810,7110 7110,7650

150
00:04:58,000 --> 00:04:59,890
Yeah that's what I thought
120,780 780,1050 1050,1230 1230,1470 1470,2010

151
00:04:59,890 --> 00:05:02,710
maybe that maybe that racing
2010,2790 3090,3330 3330,3960 4200,4470 4470,4830

152
00:05:02,710 --> 00:05:04,120
was not from that.
4830,4980 4980,5190 5190,5370 5370,5820

153
00:05:04,680 --> 00:05:05,580
Yeah I don't think it
180,570 570,660 660,810 810,960 960,1080

154
00:05:05,580 --> 00:05:06,480
is from your prints in
1080,1200 1200,1350 1350,1470 1470,1860 1860,1980

155
00:05:06,480 --> 00:05:07,400
the kernel.
1980,2040 2040,2580

156
00:05:08,240 --> 00:05:09,560
Okay.
120,840

157
00:05:12,370 --> 00:05:15,460
OK, well unless anybody has
810,1650 1800,2430 3000,3300 3300,3690 3690,3900

158
00:05:15,460 --> 00:05:18,040
any other burning comments about
3900,4080 4080,4500 4530,5220 5220,5790 5790,6480

159
00:05:18,040 --> 00:05:19,360
Cisco I think we can
6480,6930 6930,7020 7020,7350 7350,7470 7470,7800

160
00:05:19,630 --> 00:05:22,300
get started with lecture for
8070,8730 8730,9210 9210,9660 9840,10500 10500,10740

161
00:05:22,300 --> 00:05:24,190
today, I'll be talking a
10740,11250 11730,12120 12120,12210 12210,12570 12570,12630

162
00:05:24,190 --> 00:05:29,410
little bit about the process
12630,12870 12870,13110 13140,14010 15030,15930 16680,17850

163
00:05:29,410 --> 00:05:31,750
of converting c to assembly
17850,18420 18420,18960 18960,19230 19230,19410 19410,20190

164
00:05:31,750 --> 00:05:33,100
and processors, and this is
20190,20310 20310,21150 21150,21240 21240,21390 21390,21540

165
00:05:33,100 --> 00:05:35,110
more of a practical lecture
21540,21930 21960,22020 22020,22620 22620,23160 23160,23550

166
00:05:35,110 --> 00:05:36,130
today or at least that's
23550,23820 23820,23910 23910,24030 24030,24330 24330,24570

167
00:05:36,130 --> 00:05:37,270
the aim, so the goal
24570,24720 24720,25080 25080,25320 25320,25440 25440,25710

168
00:05:37,270 --> 00:05:39,040
here is to get you
25710,26070 26070,26550 26760,27120 27120,27330 27330,27480

169
00:05:39,040 --> 00:05:41,380
all familiarized with.
27480,27960 27960,29040 29040,29640

170
00:05:41,450 --> 00:05:44,450
Um risk five the processor
90,780 990,1440 1440,2190 2190,2310 2310,3090

171
00:05:44,450 --> 00:05:46,790
the assembly language and calling
3090,3210 3210,3690 3690,4500 4500,5010 5010,5430

172
00:05:46,790 --> 00:05:49,340
conventions for risk five a
5430,6390 6390,6750 6750,7020 7020,7500 7740,7980

173
00:05:49,340 --> 00:05:50,600
and this will be important
7980,8160 8160,8280 8280,8400 8400,8490 8490,9240

174
00:05:50,600 --> 00:05:52,520
in not not super important
9240,9660 9900,10290 10290,10470 10470,10770 10770,11160

175
00:05:52,520 --> 00:05:54,560
for page table but certainly
11160,11310 11310,11580 11580,12030 12030,12480 12480,13200

176
00:05:54,560 --> 00:05:56,030
for the traps lab which
13200,13620 13620,13710 13710,14130 14130,14460 14460,14670

177
00:05:56,030 --> 00:05:57,620
is will be assigned later
14670,15150 15210,15450 15450,15570 15570,15990 15990,16260

178
00:05:57,620 --> 00:05:58,610
this week, this will be
16260,16470 16470,16740 16740,16890 16890,17040 17040,17250

179
00:05:58,610 --> 00:06:01,700
essential for debugging and implementing
17250,17790 17790,18240 18360,19380 19380,19740 19740,20340

180
00:06:01,700 --> 00:06:03,080
things because you'll be working
20340,20610 20610,20820 20820,20940 20940,21060 21060,21720

181
00:06:03,140 --> 00:06:05,300
quite intimately with trap frames
21780,22110 22110,22680 22680,23130 23130,23430 23430,23940

182
00:06:05,300 --> 00:06:06,740
and stack and things like
23940,24150 24150,24630 24660,24930 24930,25170 25170,25380

183
00:06:06,740 --> 00:06:08,450
that so that's the that's
25380,25800 26130,26400 26400,26640 26640,26880 26880,27090

184
00:06:08,450 --> 00:06:09,140
kind of the goal for
27090,27240 27240,27300 27300,27390 27390,27660 27660,27780

185
00:06:09,140 --> 00:06:10,300
today and.
27780,28170 28170,28680

186
00:06:10,760 --> 00:06:12,860
My first aim was to
120,480 480,840 840,1200 1200,1650 1650,2220

187
00:06:12,950 --> 00:06:13,820
this might be a little
2310,2610 2610,2820 2820,2880 2880,2970 2970,3180

188
00:06:13,820 --> 00:06:15,860
bit of review from six
3180,3360 3360,3630 3630,4230 4230,4950 4950,5220

189
00:06:15,860 --> 00:06:18,110
double o four or any
5220,5520 5520,5670 5670,6390 6390,7020 7110,7470

190
00:06:18,110 --> 00:06:20,390
other computer architecture theme classes
7470,7800 7800,8130 8130,8700 8700,9120 9120,9750

191
00:06:20,390 --> 00:06:21,200
that you may have taken
9750,9900 9900,10020 10020,10140 10140,10260 10260,10560

192
00:06:21,200 --> 00:06:22,580
in the past, but I
10560,10650 10650,10770 10770,11310 11400,11820 11820,11940

193
00:06:22,580 --> 00:06:24,080
just want to go over
11940,12150 12150,12330 12330,12810 12840,13080 13080,13440

194
00:06:24,080 --> 00:06:26,390
briefly kind of see the
13440,13980 13980,14220 14220,14550 14670,15600 15630,15750

195
00:06:26,390 --> 00:06:28,370
c language, how we get
15750,15990 15990,16980 17100,17400 17400,17520 17520,17730

196
00:06:28,370 --> 00:06:30,590
to assembly and I'm maybe
17730,17850 17850,18930 19110,19470 19470,19680 19680,19950

197
00:06:30,590 --> 00:06:32,420
a little bit about processor
19950,20010 20010,20310 20310,20580 20580,21030 21030,21780

198
00:06:32,420 --> 00:06:33,160
so.
21780,22230

199
00:06:33,700 --> 00:06:35,260
Throughout, and then of course
300,960 960,1050 1050,1320 1350,1560 1560,1860

200
00:06:35,260 --> 00:06:36,550
throughout this lecture, feel free
1860,2130 2130,2250 2250,2670 2670,2910 2910,3150

201
00:06:36,550 --> 00:06:38,350
to interrupt a with any
3150,3270 3270,4080 4170,4530 4530,4680 4680,4950

202
00:06:38,350 --> 00:06:39,860
questions that you have.
4950,5400 5400,5550 5550,5700 5700,6210

203
00:06:41,050 --> 00:06:42,580
So, um, you know, we
90,690 780,1290 1290,1380 1380,1500 1500,1620

204
00:06:42,580 --> 00:06:44,380
have our normal main functions
1620,1770 1770,1920 1920,2520 2520,2820 2820,3420

205
00:06:44,380 --> 00:06:45,620
in c.
3420,3570 3570,4380

206
00:06:45,700 --> 00:06:47,260
You know they do something,
120,240 240,450 450,600 600,870 870,1680

207
00:06:47,260 --> 00:06:49,380
maybe they print something.
1680,1920 1920,2070 2070,2400 2400,3480

208
00:06:49,800 --> 00:06:52,340
Um, then they exit.
120,930 1020,1260 1260,1410 1410,2250

209
00:06:53,680 --> 00:06:55,240
And this all looks a
420,630 630,780 780,1020 1020,1590 1620,1980

210
00:06:55,240 --> 00:06:56,620
well and good but as
1980,2220 2220,2400 2400,2790 2790,3150 3150,3360

211
00:06:56,620 --> 00:06:58,390
any of you are aware
3360,3570 3570,3690 3690,4260 4470,4800 4800,5130

212
00:06:58,390 --> 00:06:59,410
from six double o four
5130,5280 5280,5490 5490,5730 5730,5850 5850,6150

213
00:06:59,410 --> 00:07:02,530
processors, don't actually understand the
6150,6780 6780,7080 7080,7620 7620,8730 8940,9270

214
00:07:02,530 --> 00:07:04,690
c language, rather they understand
9270,9480 9480,10020 10020,10410 10410,10830 10830,11430

215
00:07:04,690 --> 00:07:06,520
what we call a assembly
11430,11640 11640,11790 11790,12330 12420,12690 12690,13260

216
00:07:06,520 --> 00:07:08,230
or more specifically they understand
13260,13620 13620,13860 13860,14430 14430,14550 14550,14970

217
00:07:08,230 --> 00:07:09,880
the binary encoding of assembly,
14970,15030 15030,15480 15480,15900 15900,16080 16080,16620

218
00:07:10,150 --> 00:07:11,320
and so this year I've
16890,17130 17130,17340 17340,17610 17610,17910 17910,18060

219
00:07:11,320 --> 00:07:13,390
circled a picture of an
18060,18810 18960,19350 19350,19890 19890,20040 20040,20130

220
00:07:13,390 --> 00:07:15,250
actual risk five processor from
20130,20520 20520,20760 20760,21090 21090,21780 21780,21990

221
00:07:15,250 --> 00:07:17,230
a cy five board and.
21990,22050 22050,22350 22350,22680 22680,23160 23250,23970

222
00:07:17,860 --> 00:07:19,270
When we say a processor
120,420 420,570 570,810 810,930 930,1530

223
00:07:19,270 --> 00:07:20,650
is risc five that means
1530,1650 1650,1950 1950,2400 2400,2640 2640,2910

224
00:07:20,650 --> 00:07:22,450
that it understands the risk
2910,3090 3090,3240 3240,4080 4080,4320 4320,4710

225
00:07:22,450 --> 00:07:25,390
five instruction set so every
4710,5280 5280,5910 5910,6240 6480,7170 7200,7650

226
00:07:25,390 --> 00:07:28,060
processor has an associated isa
7650,8400 8400,8580 8580,8700 8700,9480 9480,10320

227
00:07:28,060 --> 00:07:30,700
or a instruction.
10320,10980 11220,11580 11580,12720

228
00:07:31,010 --> 00:07:32,150
And that's kind of the
150,330 330,570 570,810 810,900 900,1290

229
00:07:32,150 --> 00:07:33,980
set of instructions.
1290,1590 1590,1680 1680,2940

230
00:07:34,890 --> 00:07:36,240
That makes sense to that
330,810 810,1110 1110,1410 1410,1500 1500,1680

231
00:07:36,240 --> 00:07:38,550
process, so every instruction has
1680,2310 2310,2760 2820,3240 3240,3810 3810,3990

232
00:07:38,550 --> 00:07:40,800
an associated binary encoding or
3990,4110 4110,4770 4770,5430 5430,6090 6090,6240

233
00:07:40,800 --> 00:07:42,080
an op code.
6240,6300 6300,6510 6510,7020

234
00:07:42,480 --> 00:07:44,280
And when a processor is
180,360 360,510 510,600 600,1620 1650,1980

235
00:07:44,280 --> 00:07:45,690
running and it sees a
1980,2460 2460,2640 2640,2760 2760,3240 3240,3390

236
00:07:45,690 --> 00:07:47,790
particular encoding, it knows what
3390,4080 4080,4740 4740,4920 4920,5280 5280,5490

237
00:07:47,790 --> 00:07:49,600
to do, and so.
5490,5550 5550,5940 6240,6540 6540,7020

238
00:07:50,240 --> 00:07:51,590
You know this processor on
120,270 270,360 360,570 570,1320 1320,1470

239
00:07:51,590 --> 00:07:54,230
this board happens to understand
1470,1710 1710,2070 2070,2700 2700,3090 3090,4110

240
00:07:54,350 --> 00:07:56,480
the risk five assembly which
4230,4740 4740,5160 5160,5490 5490,6030 6030,6360

241
00:07:56,480 --> 00:07:58,100
is what c code is
6360,6810 6840,7140 7140,7350 7350,7800 7800,7980

242
00:07:58,100 --> 00:07:59,600
compiled to, so the general
7980,8550 8550,8790 8790,8940 8940,9060 9060,9480

243
00:07:59,600 --> 00:08:01,550
process of getting c code
9480,9990 9990,10110 10110,10620 10680,11100 11100,11430

244
00:08:01,550 --> 00:08:02,750
to actually run on your
11430,11520 11520,11910 11910,12270 12270,12480 12480,12630

245
00:08:02,750 --> 00:08:04,460
processor is we start with
12630,13440 13500,13800 13800,13920 13920,14220 14220,14340

246
00:08:04,460 --> 00:08:06,200
c, it gets compiled to
14340,14850 14910,15150 15150,15330 15330,15930 15930,16080

247
00:08:06,200 --> 00:08:07,910
assembly, and there's some linking
16080,16830 16830,16980 16980,17130 17130,17310 17310,17790

248
00:08:07,910 --> 00:08:09,230
and things like that happened
17790,17940 17940,18150 18150,18330 18330,18630 18630,19110

249
00:08:09,230 --> 00:08:10,550
between this step but that's
19110,19440 19440,19530 19530,19830 19830,20010 20010,20430

250
00:08:10,760 --> 00:08:13,160
not a compilers class so
20640,21360 21360,21480 21480,21930 21930,22530 22590,23040

251
00:08:13,160 --> 00:08:14,720
and then the assembly will
23040,23160 23160,23370 23370,23460 23460,24090 24090,24600

252
00:08:14,720 --> 00:08:16,900
um then be translated.
24600,24900 24900,25230 25230,25620 25620,26550

253
00:08:16,950 --> 00:08:18,750
Into binary and so this
90,510 510,1260 1260,1440 1440,1650 1650,1890

254
00:08:18,750 --> 00:08:21,400
is the object.
1890,2220 2220,2820 2880,4260

255
00:08:21,860 --> 00:08:25,340
Or dot o files.
120,870 900,1380 1380,1680 1680,2790

256
00:08:25,450 --> 00:08:26,620
That you see, so if
90,300 300,450 450,750 750,1080 1080,1260

257
00:08:26,620 --> 00:08:28,480
you've ever paid attention to
1260,1410 1410,1650 1650,1830 1830,2460 2460,3120

258
00:08:29,260 --> 00:08:31,180
what's inside of your lab
3900,4320 4320,4980 4980,5160 5160,5520 5520,5820

259
00:08:31,180 --> 00:08:32,980
directory after you run make,
5820,6450 6450,6780 6780,6990 6990,7260 7260,7620

260
00:08:32,980 --> 00:08:34,390
um you'll see a bunch
7620,8070 8070,8340 8340,8640 8640,8730 8730,9030

261
00:08:34,390 --> 00:08:36,160
of dato files lying around
9030,9180 9180,9660 9660,10080 10080,10380 10380,10800

262
00:08:36,250 --> 00:08:37,150
and those are the actual
10890,11100 11100,11310 11310,11340 11340,11430 11430,11790

263
00:08:37,150 --> 00:08:39,370
object files that the processor
11790,12150 12150,12540 12540,12780 12780,13140 13200,14010

264
00:08:39,370 --> 00:08:40,340
understands.
14010,14790

265
00:08:41,030 --> 00:08:42,320
And the asf files, you've
210,390 390,540 540,990 990,1350 1350,1500

266
00:08:42,320 --> 00:08:43,760
also seen, um you haven't
1500,1830 1830,2250 2280,2610 2610,2730 2730,2940

267
00:08:43,760 --> 00:08:45,860
really written any but if
2940,3180 3180,3420 3420,3690 3690,4200 4350,5040

268
00:08:45,860 --> 00:08:47,690
you recall from Cisco uses
5040,5250 5250,5700 5700,5850 5850,6390 6390,6870

269
00:08:47,690 --> 00:08:49,370
dot pl is compiled to
6870,7140 7140,7560 7560,7710 7710,8430 8430,8550

270
00:08:49,370 --> 00:08:51,500
a file called uses dot's
8550,8670 8670,9120 9120,9750 9780,10320 10320,10680

271
00:08:51,500 --> 00:08:53,090
and so dot's files are
10680,11160 11220,11490 11490,11670 11670,12060 12060,12270

272
00:08:53,090 --> 00:08:56,420
assembly language, and so you've
12270,13200 13440,14280 14490,14970 14970,15450 15450,15600

273
00:08:56,420 --> 00:08:58,160
seen you've certainly seen some
15600,15720 15720,15990 15990,16650 16740,16980 16980,17340

274
00:08:58,160 --> 00:08:59,570
risk five assembly and if
17340,17640 17640,17820 17820,18030 18030,18270 18270,18750

275
00:08:59,570 --> 00:09:00,470
you took double for I
18750,18870 18870,18960 18960,19080 19080,19260 19260,19650

276
00:09:00,470 --> 00:09:02,510
believe you've also seen a
19650,20160 20220,20400 20400,20760 20760,21330 21330,21690

277
00:09:02,510 --> 00:09:03,380
good amount of assembly language.
21690,21930 21930,22020 22020,22140 22140,22440 22440,22560

278
00:09:03,380 --> 00:09:04,840

22560,23040 23070,23790

279
00:09:05,480 --> 00:09:07,820
An assembly looks in general
120,330 330,840 840,1320 1410,1740 1740,2460

280
00:09:07,820 --> 00:09:09,650
a much less structured than
2460,2850 2880,3240 3240,3540 3540,4110 4110,4290

281
00:09:09,650 --> 00:09:10,910
c, so you'll just see
4290,4740 4740,4950 4950,5160 5160,5340 5340,5550

282
00:09:10,910 --> 00:09:12,770
lines after line after line
5550,6000 6000,6270 6270,6630 6630,6870 6870,7410

283
00:09:12,920 --> 00:09:15,290
of instructions, you'll see simple
7560,8160 8190,9120 9120,9420 9420,9540 9540,9930

284
00:09:15,290 --> 00:09:18,230
things like add a molt.
9930,10200 10200,10440 10470,11340 11580,11820 11820,12870

285
00:09:19,440 --> 00:09:21,510
Etc, and so on and
120,1080 1080,1290 1290,1560 1560,2010 2010,2190

286
00:09:21,510 --> 00:09:22,770
so forth, and this doesn't
2190,2460 2460,2880 2880,3030 3030,3150 3150,3450

287
00:09:22,770 --> 00:09:26,130
have no nice control flow,
3450,3900 3900,4500 4770,5790 5790,6300 6300,6810

288
00:09:26,130 --> 00:09:27,990
there's no loops, there are
6810,6990 6990,7170 7170,8100 8130,8400 8400,8670

289
00:09:27,990 --> 00:09:29,070
functions but not in the
8670,9210 9210,9330 9330,9540 9540,9660 9660,9750

290
00:09:29,070 --> 00:09:30,540
sense that you might remember
9750,10050 10050,10170 10170,10320 10320,10560 10560,11220

291
00:09:30,540 --> 00:09:32,220
from c we see labels
11220,11400 11400,11820 11820,12000 12000,12240 12240,12900

292
00:09:32,220 --> 00:09:34,020
as opposed to true function
12900,13110 13110,13650 13650,13770 13770,14190 14190,14700

293
00:09:34,020 --> 00:09:35,360
definitions.
14700,15780

294
00:09:35,440 --> 00:09:35,960
Yeah.
0,60

295
00:09:36,500 --> 00:09:37,970
And the assembly, so it's
180,360 360,420 420,930 930,1110 1110,1650

296
00:09:37,970 --> 00:09:39,080
a much lower language and
1650,1680 1680,1980 1980,2280 2280,2670 2670,2760

297
00:09:39,080 --> 00:09:39,860
there are plenty of other
2760,2850 2850,2970 2970,3210 3210,3270 3270,3540

298
00:09:39,860 --> 00:09:41,390
languages that are also compiled
3540,3990 3990,4110 4110,4230 4230,4560 4560,5070

299
00:09:41,390 --> 00:09:43,460
to assembly, so, um, the
5070,5160 5160,5760 5760,6300 6360,6960 6990,7140

300
00:09:43,460 --> 00:09:45,470
same process holds true for
7140,7500 7500,7920 7920,8250 8250,8640 8640,9150

301
00:09:45,470 --> 00:09:47,600
things like c plus plus,
9150,9450 9450,9660 9660,9900 9900,10200 10200,11280

302
00:09:47,780 --> 00:09:49,020
um.
11460,12420

303
00:09:49,600 --> 00:09:50,920
You know any any language
120,240 240,510 510,780 780,1020 1020,1440

304
00:09:50,920 --> 00:09:52,810
that's compiled will go to
1440,1680 1680,2430 2430,2790 2790,3030 3030,3330

305
00:09:52,810 --> 00:09:54,370
the same assembly language at
3330,3420 3420,3990 3990,4440 4440,4770 4770,4890

306
00:09:54,370 --> 00:09:55,240
the base.
4890,4980 4980,5640

307
00:09:56,700 --> 00:09:57,420
And.
120,630

308
00:09:58,080 --> 00:09:59,850
Um, so that's kind of
180,780 1050,1260 1260,1680 1680,1890 1890,1950

309
00:09:59,850 --> 00:10:01,470
the basic process of getting
1950,2070 2070,2520 2520,3060 3060,3180 3180,3570

310
00:10:01,470 --> 00:10:04,140
our computer to actually understand
3570,4050 4050,4740 4740,4890 4890,5250 5250,6240

311
00:10:04,380 --> 00:10:05,610
the c code that we're
6480,6750 6750,7020 7020,7380 7380,7560 7560,7710

312
00:10:05,610 --> 00:10:07,620
writing but you'll notice that
7710,8310 8520,8760 8760,8940 8940,9360 9360,9720

313
00:10:07,650 --> 00:10:09,690
a we've been referring to
9750,10110 10110,10290 10290,10440 10440,11070 11070,11790

314
00:10:10,110 --> 00:10:12,020
a risk five.
12210,12570 12570,12930 12930,13890

315
00:10:12,330 --> 00:10:14,640
Assembly throughout the course and
270,1320 1560,2040 2040,2130 2130,2460 2460,2580

316
00:10:14,640 --> 00:10:16,110
the processor is risk five
2580,2670 2670,3240 3240,3360 3360,3630 3630,4050

317
00:10:16,110 --> 00:10:18,090
and that's because, um it
4050,4170 4170,4440 4440,5160 5310,5970 5970,6030

318
00:10:18,240 --> 00:10:19,380
it's important because there's many
6180,6420 6420,6780 6780,6930 6930,7080 7080,7320

319
00:10:19,380 --> 00:10:20,940
different kinds of assembly, so
7320,7650 7650,7890 7890,7980 7980,8490 8490,8880

320
00:10:20,940 --> 00:10:23,010
it's unlikely that you're using
8880,9060 9060,9810 9810,10110 10110,10380 10380,10950

321
00:10:23,010 --> 00:10:24,340
risk five.
10950,11280 11280,12060

322
00:10:24,550 --> 00:10:26,350
Yourself like you're not going
30,840 840,990 990,1320 1350,1710 1710,1830

323
00:10:26,350 --> 00:10:27,430
to be running Linux on
1830,1890 1890,2100 2100,2370 2370,2700 2700,2910

324
00:10:27,430 --> 00:10:30,070
it, um, instead most modern
2910,3150 3240,3840 3840,4860 4860,5190 5190,5550

325
00:10:30,070 --> 00:10:32,050
computers will run on what's
5550,6300 6300,6480 6480,6930 6930,7320 7320,7530

326
00:10:32,050 --> 00:10:34,570
called x86 or you'll sometimes
7530,7800 7800,8850 8880,9390 9390,9690 9690,10050

327
00:10:34,570 --> 00:10:36,960
see is x86 64.
10050,10170 10170,10320 10320,11070 11070,11430 11430,12000

328
00:10:37,720 --> 00:10:39,250
And this is this is
0,360 360,690 690,1170 1170,1410 1410,1530

329
00:10:39,250 --> 00:10:41,320
a different isa, this is
1530,1650 1650,2070 2070,2940 3210,3540 3540,3600

330
00:10:41,320 --> 00:10:42,490
a different instruction set it
3600,3690 3690,4020 4020,4470 4470,4650 4650,4770

331
00:10:42,490 --> 00:10:43,720
looks pretty similar to risk
4770,4980 4980,5250 5250,5640 5640,5730 5730,6000

332
00:10:43,720 --> 00:10:45,040
five but this is what
6000,6480 6510,6840 6840,7050 7050,7140 7140,7320

333
00:10:45,040 --> 00:10:46,570
you see in kind of
7320,7470 7470,7830 7830,8520 8550,8730 8730,8850

334
00:10:46,570 --> 00:10:48,600
your personal computers often.
8850,9090 9090,9480 9480,10080 10080,10620

335
00:10:51,760 --> 00:10:53,680
So if you use a
120,420 420,540 540,690 690,1620 1650,2040

336
00:10:53,680 --> 00:10:56,500
an Intel so Intel CPU's
2040,2340 2340,3180 3180,3450 3450,3900 3900,4860

337
00:10:56,500 --> 00:10:58,780
implement x86 and I believe
4860,5010 5010,5520 5520,6630 6870,7020 7020,7140

338
00:10:58,780 --> 00:11:00,240
MD.
7140,7590 7590,8400

339
00:11:00,380 --> 00:11:04,010
Also, do and this is
120,540 540,960 1830,2550 3060,3300 3300,3750

340
00:11:04,130 --> 00:11:05,040
a.
3870,4320

341
00:11:05,100 --> 00:11:07,590
Relatively important distinction between the
120,750 750,1620 1620,2190 2190,2520 2520,2610

342
00:11:07,590 --> 00:11:08,550
two they're not quite as
2610,2820 2820,2940 2940,3210 3210,3450 3450,3570

343
00:11:08,550 --> 00:11:10,050
similar as they may look
3570,3990 3990,4140 4140,4260 4260,4500 4500,5070

344
00:11:10,080 --> 00:11:12,420
at first and that comes
5100,5610 5610,6270 6420,6900 6900,7200 7200,7440

345
00:11:12,420 --> 00:11:13,530
down to the fact that
7440,7680 7680,7770 7770,7920 7920,8250 8250,8550

346
00:11:13,530 --> 00:11:14,730
risk five is what we
8550,8880 8880,9330 9330,9450 9450,9630 9630,9750

347
00:11:14,730 --> 00:11:17,250
call as a risk the
9750,10440 10650,11130 11130,11430 11580,12150 12150,12270

348
00:11:17,250 --> 00:11:18,660
risk part of risc five
12270,12630 12630,12840 12840,12960 12960,13260 13260,13680

349
00:11:18,660 --> 00:11:21,660
refers to a reduced instruction
13680,14250 14250,14850 15060,15420 15420,16050 16050,16680

350
00:11:21,660 --> 00:11:22,260
set.
16680,17010

351
00:11:22,710 --> 00:11:25,440
And a x86 64 is
210,840 870,1350 1380,2070 2070,2430 2430,2940

352
00:11:25,440 --> 00:11:27,300
what's called a CIS c
2940,3240 3240,3450 3450,3990 3990,4140 4140,4800

353
00:11:27,300 --> 00:11:31,040
or a complex instructions.
4800,5400 5430,6330 6450,6750 6750,7440 7440,8160

354
00:11:34,570 --> 00:11:37,180
And there's a couple of
90,840 990,1230 1230,1320 1320,1890 1890,2700

355
00:11:37,180 --> 00:11:38,860
key differences here, one is
2700,2910 2910,3480 3480,3780 3780,4140 4140,4380

356
00:11:38,860 --> 00:11:40,270
just the number of instructions
4380,4620 4620,4680 4680,5070 5070,5160 5160,5790

357
00:11:40,270 --> 00:11:42,070
that are present in x86
5790,5940 5940,6060 6060,6570 6570,6930 6930,7590

358
00:11:42,070 --> 00:11:43,120
64, in fact one of
7590,7890 7890,8160 8160,8280 8280,8520 8520,8640

359
00:11:43,120 --> 00:11:45,640
the big motivations for writing,
8640,8760 8760,8880 8880,9150 9150,10260 10290,11160

360
00:11:45,640 --> 00:11:48,670
um for for making risk
11160,11880 11940,12630 12660,13500 13500,13770 13770,14190

361
00:11:48,670 --> 00:11:51,880
five was how many um
14190,14430 14430,14970 15090,15750 15750,16470 16680,17400

362
00:11:51,880 --> 00:11:54,420
instructions, we actually have.
17400,17580 17580,18270 18270,18810 18810,19140 19140,19740

363
00:11:54,940 --> 00:11:56,290
Um, in the um, tell
120,300 300,510 510,690 690,960 960,1470

364
00:11:56,320 --> 00:11:58,060
kind of handbook, so for
1500,1740 1740,1800 1800,2580 2670,3030 3030,3240

365
00:11:58,060 --> 00:12:00,760
reference, there's three full books.
3240,3900 3900,4320 4320,4740 4740,5190 5190,5940

366
00:12:02,150 --> 00:12:05,450
That encompass the isa and
210,900 960,1920 1920,2100 2100,2880 2880,3510

367
00:12:05,600 --> 00:12:08,180
some statistics I think there's
3660,3990 3990,4830 4830,5010 5010,5280 5280,6240

368
00:12:08,270 --> 00:12:10,610
new instructions have been added
6330,7140 7140,7830 7830,7980 7980,8130 8130,8670

369
00:12:10,610 --> 00:12:14,060
at a rate of three
8670,9270 9480,9810 9810,10320 10350,11280 11490,12120

370
00:12:14,060 --> 00:12:15,720
instructions.
12120,13650

371
00:12:15,940 --> 00:12:17,720
A per month.
120,840 870,1110 1110,1740

372
00:12:18,720 --> 00:12:20,850
Since x86 64 was added,
60,810 840,1470 1470,1740 1740,2040 2040,2190

373
00:12:20,850 --> 00:12:23,220
it was first published in
2190,2760 2760,2850 2850,3540 3600,4020 4020,4560

374
00:12:23,220 --> 00:12:24,780
the seventies, so I believe
4560,4740 4740,4830 4830,5370 5370,5730 5730,6120

375
00:12:24,780 --> 00:12:26,580
there's like north of a
6120,6750 6750,6990 6990,7200 7200,7560 7560,7920

376
00:12:26,880 --> 00:12:29,660
15,000 instructions.
8220,8640 8640,9690 9690,10800

377
00:12:31,330 --> 00:12:33,360
In x86 64.
90,540 540,1050 1050,1350 1350,1890

378
00:12:34,240 --> 00:12:35,500
And risk five on the
420,870 870,1110 1110,1470 1470,1590 1590,1680

379
00:12:35,500 --> 00:12:37,460
other hand, I'm.
1680,1950 1950,2580 2760,3390

380
00:12:37,570 --> 00:12:38,860
The assembly for risc five
90,270 270,720 720,840 840,1080 1080,1380

381
00:12:38,860 --> 00:12:40,240
can be nicely contained within
1380,1500 1500,1590 1590,1980 1980,2460 2460,2760

382
00:12:40,240 --> 00:12:42,200
two documents and so.
2760,2970 2970,3690 3690,3840 3840,4200

383
00:12:42,640 --> 00:12:43,750
A kind of going off
480,750 750,960 960,1020 1020,1350 1350,1590

384
00:12:43,750 --> 00:12:45,490
of that we don't expect
1590,1710 1710,2160 2250,2550 2550,2820 2820,3330

385
00:12:45,490 --> 00:12:47,050
you in this course to
3330,3780 3780,3930 3930,4080 4080,4530 4530,4890

386
00:12:47,050 --> 00:12:49,390
memorize every single risk five
4890,5790 5790,6060 6060,6570 6570,6840 6840,7230

387
00:12:49,390 --> 00:12:51,640
instruction, but if you are
7230,8070 8130,8700 8700,8850 8850,9060 9060,9480

388
00:12:51,640 --> 00:12:53,020
interested or you ever find
9480,10170 10170,10320 10320,10470 10470,10680 10680,10860

389
00:12:53,020 --> 00:12:54,190
yourself confused by what a
10860,11220 11220,11670 11670,11760 11760,11940 11940,12030

390
00:12:54,190 --> 00:12:57,250
specific instruction is or does,
12030,12480 12480,13290 13680,14160 14160,14370 14370,15090

391
00:12:57,550 --> 00:12:58,660
if you go to the
15390,15750 15750,16080 16080,16230 16230,16320 16320,16500

392
00:12:58,660 --> 00:13:00,610
course website and we look
16500,16860 16860,17550 17790,18120 18120,18240 18240,18450

393
00:13:00,610 --> 00:13:02,840
under the references tab.
18450,18930 18930,19320 19320,19920 19920,20550

394
00:13:03,460 --> 00:13:04,780
Under risk five we give
120,540 540,810 810,1170 1170,1260 1260,1440

395
00:13:04,780 --> 00:13:06,040
you the links to both
1440,1590 1590,1710 1710,2100 2100,2370 2370,2700

396
00:13:06,040 --> 00:13:09,550
the privileged and unprivileged instruction
2700,2970 2970,3840 3930,4590 4590,5640 5640,6210

397
00:13:09,550 --> 00:13:11,260
sets, so this is kind
6210,6720 6960,7380 7380,7620 7620,7740 7740,7920

398
00:13:11,260 --> 00:13:12,840
of the document.
7920,8040 8040,8160 8160,9210

399
00:13:12,870 --> 00:13:14,850
That gives you a whole
90,720 1200,1590 1590,1710 1710,1770 1770,2070

400
00:13:14,850 --> 00:13:16,020
bunch of information about the
2070,2340 2340,2430 2430,2940 2940,3150 3150,3240

401
00:13:16,020 --> 00:13:17,520
isa but you'll note that
3240,3930 4020,4260 4260,4410 4410,4620 4620,4740

402
00:13:17,520 --> 00:13:20,340
like this is 240 pages,
4740,4980 4980,5160 5160,5430 5430,6450 6450,7560

403
00:13:20,490 --> 00:13:22,800
and this is 135 pages,
7710,8220 8220,8400 8400,8460 8550,9600 9600,10020

404
00:13:22,800 --> 00:13:25,200
so it's significantly significantly smaller
10020,10140 10140,10260 10260,11100 11100,11730 11730,12420

405
00:13:25,230 --> 00:13:28,290
than a the x86 instruction
12450,13230 13260,13770 13770,13950 13950,14880 14910,15510

406
00:13:28,290 --> 00:13:29,550
set, that's one of the
15510,15810 15840,16110 16110,16260 16260,16410 16410,16770

407
00:13:29,550 --> 00:13:31,500
nice things about.
16770,17070 17070,17370 17370,17910

408
00:13:31,860 --> 00:13:34,500
About risk five so we
240,660 660,900 900,1440 1710,2460 2640,2880

409
00:13:34,500 --> 00:13:35,620
have.
2880,3780

410
00:13:36,120 --> 00:13:37,560
In risk five we have
120,330 330,570 570,930 930,1050 1050,1560

411
00:13:37,560 --> 00:13:40,350
a fewer instructions and not
1560,2220 2280,2790 2790,3960 3960,4170 4170,4350

412
00:13:40,350 --> 00:13:41,720
only that.
4350,4620 4620,5160

413
00:13:42,050 --> 00:13:43,960
The instructions are simpler.
90,270 270,930 930,1050 1050,1770

414
00:13:44,340 --> 00:13:45,360
SO.
120,930

415
00:13:45,860 --> 00:13:46,940
What I mean by that
120,390 390,450 450,690 690,840 840,1200

416
00:13:46,940 --> 00:13:47,940
is that.
1200,1350 1350,1800

417
00:13:48,800 --> 00:13:51,320
There are many instructions in
60,330 330,450 450,720 720,1800 2070,2580

418
00:13:51,320 --> 00:13:53,000
x86 64 by infection, I'm
2580,3210 3210,3510 3510,3690 3690,3840 3840,4260

419
00:13:53,000 --> 00:13:54,080
referring to something like add
4260,4410 4410,4740 4740,4830 4830,5130 5130,5340

420
00:13:54,080 --> 00:13:56,760
a motor saw, um.
5340,5610 5610,5700 5700,6180 6180,6690 6810,7710

421
00:13:57,020 --> 00:13:58,370
In x86 64 there's plenty
120,270 270,780 780,1080 1080,1260 1260,1470

422
00:13:58,370 --> 00:14:00,050
of instructions that do more
1470,1740 1740,1860 1860,2580 2580,2820 2820,3150

423
00:14:00,050 --> 00:14:01,490
than one thing, so they
3150,3450 3450,3600 3600,3900 3900,4290 4290,4590

424
00:14:01,490 --> 00:14:04,250
perform some complicated a set
4590,4890 4890,5370 5370,5670 5670,6810 6870,7350

425
00:14:04,250 --> 00:14:05,900
of operations and then gets
7350,7740 7740,7860 7860,8760 8760,8850 8850,9000

426
00:14:05,900 --> 00:14:07,580
you the result and that's
9000,9240 9240,9720 9750,9990 9990,10530 10530,10680

427
00:14:07,580 --> 00:14:09,350
not the case with risk
10680,11010 11010,11970 11970,12060 12060,12300 12300,12450

428
00:14:09,350 --> 00:14:11,690
five risk five instructions tend
12450,12690 12690,13080 13260,13830 13830,14070 14070,14790

429
00:14:11,690 --> 00:14:13,040
to be smaller in scope
14790,15060 15060,15180 15180,15540 15540,16050 16050,16140

430
00:14:13,040 --> 00:14:14,150
and so they take notes
16140,16590 16590,16710 16710,16800 16800,16890 16890,17250

431
00:14:14,240 --> 00:14:15,740
less cycles to run each
17340,17670 17670,17910 17910,18360 18360,18510 18510,18840

432
00:14:15,740 --> 00:14:17,990
instruction, then maybe x86 64
18840,19080 19080,19920 20010,20370 20370,20580 20580,21090

433
00:14:17,990 --> 00:14:19,340
is and this is just
21090,21360 21360,21630 21630,21960 22050,22260 22260,22440

434
00:14:19,340 --> 00:14:20,390
a trade-off that the designers
22440,22530 22530,22740 22740,22830 22830,23340 23340,23490

435
00:14:20,390 --> 00:14:22,220
chose to chose to undertake
23490,23580 23580,24210 24210,24540 24540,25020 25050,25320

436
00:14:22,220 --> 00:14:24,980
a there's nothing.
25320,25380 25380,26100 26370,26880 26910,27120 27120,27780

437
00:14:25,520 --> 00:14:26,840
Or you know there's no.
120,330 330,480 480,600 600,810 810,1440

438
00:14:28,320 --> 00:14:30,510
Canonical reason why I reduced
300,1170 1170,1620 1620,1920 1920,2040 2040,2490

439
00:14:30,510 --> 00:14:32,820
instruction set is better than
2490,3090 3090,3540 3540,3720 3720,4170 4170,4800

440
00:14:32,850 --> 00:14:34,980
you know a complex induction
4830,4980 4980,5460 5580,5760 5760,6360 6360,6960

441
00:14:34,980 --> 00:14:36,750
instruction set, they each have
6960,7770 7770,8070 8070,8280 8280,8520 8520,8730

442
00:14:36,750 --> 00:14:39,390
their own uses, and so
8730,8940 8940,9330 9330,10170 11010,11190 11190,11370

443
00:14:39,390 --> 00:14:40,260
on and so forth and
11370,11460 11460,11550 11550,11760 11760,12090 12090,12240

444
00:14:40,260 --> 00:14:41,850
another cool thing about risk
12240,12840 12840,13170 13170,13320 13320,13590 13590,13830

445
00:14:41,850 --> 00:14:44,400
five as opposed to x86
13830,14220 14220,14400 14400,14880 14880,15270 15510,16380

446
00:14:44,400 --> 00:14:45,720
is that, um, this is
16380,16590 16590,17010 17130,17400 17400,17550 17550,17700

447
00:14:45,720 --> 00:14:47,160
open source.
17700,17940 17940,18630

448
00:14:47,740 --> 00:14:50,470
So one of the only
60,810 990,1200 1200,1320 1320,1860 2310,2790

449
00:14:50,470 --> 00:14:53,080
open source instruction sets on
2790,3150 3150,4020 4050,4680 4680,5190 5190,5400

450
00:14:53,080 --> 00:14:54,130
the market, so that means
5400,5460 5460,5940 5940,6090 6090,6210 6210,6450

451
00:14:54,130 --> 00:14:55,690
anybody can develop a board
6450,6900 6900,7080 7080,7500 7500,7590 7590,8010

452
00:14:55,690 --> 00:14:57,520
for risk five a and
8010,8190 8190,8460 8460,9000 9180,9690 9690,9840

453
00:14:57,520 --> 00:14:58,570
it came out of a
9840,10380 10380,10620 10620,10710 10710,10800 10800,10890

454
00:14:58,570 --> 00:15:01,570
research project from UC Berkeley
10890,11340 11340,12000 12000,12720 12840,13380 13380,13890

455
00:15:01,570 --> 00:15:02,500
and so that's kind of
13890,14070 14070,14220 14220,14550 14550,14730 14730,14820

456
00:15:02,500 --> 00:15:04,270
where was clive started and
14820,15120 15120,15300 15300,15600 15600,16170 16260,16590

457
00:15:04,270 --> 00:15:05,260
since then it's been picked
16590,16800 16800,16980 16980,17130 17130,17280 17280,17580

458
00:15:05,260 --> 00:15:06,460
up and supported by a
17580,17730 17730,17850 17850,18360 18360,18660 18660,18780

459
00:15:06,460 --> 00:15:08,260
number of companies, um, you
18780,19080 19080,19170 19170,20130 20280,20460 20460,20580

460
00:15:08,260 --> 00:15:09,640
can find the list online
20580,20730 20730,21030 21030,21090 21090,21360 21360,21960

461
00:15:09,640 --> 00:15:10,540
but yeah there's tons of
21960,22080 22080,22260 22260,22530 22530,22770 22770,22860

462
00:15:10,540 --> 00:15:11,770
big companies that are interested
22860,23010 23010,23400 23400,23550 23550,23640 23640,24090

463
00:15:11,770 --> 00:15:13,270
in supporting an open a
24090,24180 24180,24600 24600,24720 24720,25170 25290,25590

464
00:15:13,270 --> 00:15:14,500
instruction set.
25590,26250 26250,26610

465
00:15:14,990 --> 00:15:16,400
And actually I think quite
150,330 330,900 930,1140 1140,1290 1290,1560

466
00:15:16,400 --> 00:15:17,810
recently there was an announcement
1560,2010 2010,2130 2130,2340 2340,2430 2430,2970

467
00:15:17,810 --> 00:15:19,820
made by cy five who
2970,3330 3330,3810 3810,4230 4230,4620 4620,4980

468
00:15:19,820 --> 00:15:20,820
are.
4980,5640

469
00:15:21,150 --> 00:15:22,740
Sort of the premier board
30,420 420,510 510,630 630,1320 1320,1620

470
00:15:22,740 --> 00:15:25,110
manufacturer for risk five processors
1620,2430 2430,2550 2550,2790 2790,3090 3090,3990

471
00:15:25,260 --> 00:15:27,150
that they will be, um,
4140,4500 4500,4680 4680,5070 5070,5400 5400,6030

472
00:15:27,150 --> 00:15:30,180
releasing a board for personal
6030,6870 6870,7500 7680,8310 8310,8640 8640,9060

473
00:15:30,180 --> 00:15:32,280
computers that should extensively a
9060,9660 9660,9960 9960,10200 10200,10890 10890,11160

474
00:15:32,280 --> 00:15:34,170
risc processor designed to run
11160,11550 11550,12180 12180,12690 12690,12810 12810,13050

475
00:15:34,170 --> 00:15:36,060
Linux for personal computers and
13050,13350 13350,13500 13500,13830 13830,14460 14730,14940

476
00:15:36,060 --> 00:15:37,680
I think that's been released
14940,15030 15030,15390 15390,15870 15900,16170 16170,16560

477
00:15:37,680 --> 00:15:38,580
in the last week or
16560,16650 16650,16740 16740,17130 17130,17340 17340,17460

478
00:15:38,580 --> 00:15:40,230
two, the announcement about it,
17460,17760 17760,18210 18210,18660 18660,18930 18930,19110

479
00:15:40,530 --> 00:15:41,670
um, so if you're if
19410,19770 19770,20040 20040,20190 20190,20430 20430,20550

480
00:15:41,670 --> 00:15:43,410
you're curious if your find
20550,20670 20670,21180 21180,21300 21300,21690 21930,22290

481
00:15:43,410 --> 00:15:45,000
yourself you know absolutely I
22290,22680 22680,22740 22740,22860 22860,23670 23670,23880

482
00:15:45,000 --> 00:15:46,080
want to use risk five
23880,24090 24090,24150 24150,24390 24390,24630 24630,24960

483
00:15:46,080 --> 00:15:47,580
after I finish success away
24960,25320 25320,25410 25410,25800 25800,26250 26250,26460

484
00:15:47,580 --> 00:15:49,410
one hopefully by that time
26460,26970 27000,27690 27690,27840 27840,28050 28050,28290

485
00:15:49,410 --> 00:15:50,850
there will be a processor
28290,28410 28410,28530 28530,28860 28860,29070 29070,29730

486
00:15:50,850 --> 00:15:51,900
available that you can run
29730,30210 30210,30330 30330,30420 30420,30570 30570,30780

487
00:15:51,900 --> 00:15:53,520
Linux on your own computer.
30780,31080 31080,31530 31530,31680 31680,31830 31830,32400

488
00:15:55,080 --> 00:15:56,340
But even in your day-to-day
120,450 450,750 750,840 840,960 960,1380

489
00:15:56,340 --> 00:15:58,440
lives you're most likely using
1380,1860 1860,1980 1980,2280 2280,2940 2970,3480

490
00:15:58,440 --> 00:16:00,480
reduced instruction set even if
3480,3870 3870,4440 4440,4830 4830,5340 5340,5520

491
00:16:00,480 --> 00:16:01,920
you don't realize it, so
5520,5640 5640,5850 5850,6300 6300,6450 6450,6960

492
00:16:01,980 --> 00:16:03,580
the um.
7020,7710 7710,8310

493
00:16:03,740 --> 00:16:05,810
Arm assembly, so that's A
120,390 390,930 930,1350 1350,1950 1980,2190

494
00:16:05,810 --> 00:16:06,980
R M.
2190,2610 2610,3090

495
00:16:07,000 --> 00:16:08,860
This is also a reduced
0,360 360,510 510,1140 1140,1440 1440,1860

496
00:16:08,860 --> 00:16:10,100
instruction set.
1860,2370 2370,2850

497
00:16:11,030 --> 00:16:14,510
And arm is implemented by
450,1020 1020,1500 1500,2190 2190,3090 3090,3930

498
00:16:14,540 --> 00:16:15,800
Qualcomm.
3960,5010

499
00:16:16,030 --> 00:16:17,740
The the snapdragon series of
150,570 570,660 660,1350 1350,1740 1740,1860

500
00:16:17,740 --> 00:16:19,810
processors, so if you have
1860,2910 3180,3450 3450,3600 3600,3750 3750,3930

501
00:16:19,810 --> 00:16:21,360
an android phone.
3930,4050 4050,4560 4560,5250

502
00:16:22,740 --> 00:16:26,260
You are most likely.
120,810 810,1740 2070,2580 2580,3420

503
00:16:26,790 --> 00:16:29,430
Running a reduced instruction set.
90,720 720,960 960,1530 1530,2250 2250,2730

504
00:16:30,200 --> 00:16:31,190
And even if you're using
300,570 570,780 780,870 870,1020 1020,1290

505
00:16:31,190 --> 00:16:34,370
ios ios I think I
1290,2100 2250,3810 3810,3900 3900,4290 4320,4470

506
00:16:34,370 --> 00:16:35,150
forget what the name of
4470,4740 4740,4860 4860,4950 4950,5130 5130,5250

507
00:16:35,150 --> 00:16:36,800
it, but Apple has some.
5250,5640 5640,5790 5790,6150 6150,6390 6390,6900

508
00:16:37,980 --> 00:16:40,320
Has some version of arm,
120,390 390,660 660,1350 1350,2100 2100,2460

509
00:16:40,320 --> 00:16:41,670
they also implement in their
2460,2730 2730,3060 3060,3540 3540,3660 3660,3810

510
00:16:41,670 --> 00:16:43,770
own processors that runs on
3810,3990 3990,4920 4950,5310 5310,5550 5550,5910

511
00:16:43,770 --> 00:16:46,890
ipads iphones and most mobile
5910,6750 6750,7590 7590,8100 8100,8550 8640,9030

512
00:16:46,890 --> 00:16:49,290
Apple devices so reduced instruction
9030,9240 9240,9870 10080,10440 10440,11010 11010,11430

513
00:16:49,290 --> 00:16:50,430
sets are present all over
11430,11700 11700,11880 11880,12210 12210,12390 12390,12570

514
00:16:50,430 --> 00:16:51,210
the place, and if you're
12570,12690 12690,13020 13020,13140 13140,13230 13230,13350

515
00:16:51,210 --> 00:16:53,100
looking for a risk five
13350,13680 13680,14280 14310,14640 14640,14910 14910,15240

516
00:16:53,100 --> 00:16:54,440
in the real world.
15240,15330 15330,15420 15420,15690 15690,16320

517
00:16:54,870 --> 00:16:56,010
Um, you know outside of
90,480 480,600 600,690 690,1110 1110,1230

518
00:16:56,010 --> 00:16:57,460
your q, um you.
1230,1440 1440,1740 1740,1950 1950,2400

519
00:16:58,170 --> 00:16:59,100
You'll be able to find
270,510 510,600 600,810 810,900 900,1200

520
00:16:59,100 --> 00:17:03,120
that in like integrated devices.
1200,1650 1650,2280 2520,3570 3690,4290 4290,5220

521
00:17:03,890 --> 00:17:05,570
So it is present, it's
90,450 450,660 660,870 870,1470 1500,1770

522
00:17:05,570 --> 00:17:07,130
not as certainly not as
1770,2040 2040,2430 2430,2880 2880,3120 3120,3330

523
00:17:07,130 --> 00:17:09,290
ubiquitous as something like x86
3330,4050 4050,4290 4290,4620 4620,4830 4830,5490

524
00:17:09,290 --> 00:17:12,120
64 but it's um.
5490,5820 5820,6270 6330,6720 6720,7470 7470,8010

525
00:17:12,540 --> 00:17:14,040
Yes I yes I think
120,480 480,960 990,1350 1350,1470 1470,1620

526
00:17:14,040 --> 00:17:15,900
Apple is as Lucas seven
1620,1920 1920,2370 2400,2700 2700,3210 3210,3480

527
00:17:15,900 --> 00:17:16,920
ten I think Apple is
3480,3720 3720,3810 3810,4020 4020,4320 4320,4500

528
00:17:16,920 --> 00:17:17,720
moving.
4500,5040

529
00:17:17,740 --> 00:17:19,390
Max two arm I believe
60,660 660,990 990,1320 1320,1410 1410,1710

530
00:17:19,390 --> 00:17:20,950
that's also the case, there's
1710,1920 1920,2160 2160,2280 2280,2730 2880,3270

531
00:17:20,950 --> 00:17:22,000
been in last year's definitely
3270,3510 3510,3660 3660,3960 3960,4200 4200,4320

532
00:17:22,000 --> 00:17:23,290
been a push towards reduced
4320,4620 4620,4710 4710,4800 4800,5130 5130,5610

533
00:17:23,290 --> 00:17:25,660
instruction sets, um.
5610,5940 5940,6450 6450,6960 6990,7680

534
00:17:25,960 --> 00:17:27,790
Given given how big the
120,720 750,1080 1080,1470 1470,1770 1770,1950

535
00:17:27,790 --> 00:17:29,530
Intel isa has gotten a
1950,2310 2310,2790 2790,2940 2940,3450 3480,3690

536
00:17:29,530 --> 00:17:30,610
and the reason why Intel
3690,3810 3810,3900 3900,4170 4170,4380 4380,4770

537
00:17:30,610 --> 00:17:31,690
isa is so big is
4770,5160 5160,5280 5280,5490 5490,5730 5730,5850

538
00:17:31,690 --> 00:17:33,910
because they're a very concerned
5850,6090 6090,6510 6690,7290 7320,7680 7680,8070

539
00:17:33,910 --> 00:17:35,800
with backwards compatibility, so if
8070,8190 8190,8580 8580,9390 9390,9780 9780,9960

540
00:17:35,800 --> 00:17:36,760
you right.
9960,10110 10110,10620

541
00:17:36,870 --> 00:17:38,880
You a modern Intel processor
90,360 360,480 480,960 960,1440 1440,2100

542
00:17:38,880 --> 00:17:41,100
can run the same instructions
2100,2280 2280,2730 2730,2850 2850,3240 3240,4320

543
00:17:41,130 --> 00:17:42,990
that Intel code from you
4350,4920 4950,5340 5340,5730 5730,6120 6120,6210

544
00:17:42,990 --> 00:17:45,270
know 3040 years ago was
6210,6420 6540,7410 7410,7650 7650,7980 7980,8490

545
00:17:45,300 --> 00:17:46,380
was written it so they
8520,8700 8700,8940 8940,9090 9300,9510 9510,9600

546
00:17:46,380 --> 00:17:48,300
don't really deprecate any instructions
9600,9900 9900,10110 10110,10710 10710,10890 10890,11520

547
00:17:48,300 --> 00:17:49,440
so that they maintain backwards
11520,11610 11610,11700 11700,11820 11820,12270 12270,12660

548
00:17:49,440 --> 00:17:51,240
compatibility that risk five is
12660,13500 13620,13920 13920,14100 14100,14340 14340,14460

549
00:17:51,240 --> 00:17:52,770
more modern, so it's not
14460,14640 14640,15240 15600,15750 15750,15870 15870,15990

550
00:17:52,770 --> 00:17:53,730
a worry risk five is
15990,16080 16080,16320 16320,16560 16560,16860 16860,16950

551
00:17:53,730 --> 00:17:55,740
also if we jump back
16950,17400 17400,17550 17550,18000 18060,18720 18720,18960

552
00:17:55,740 --> 00:17:58,050
to those manuals risk five
18960,19050 19050,19290 19290,20220 20400,21000 21000,21270

553
00:17:58,050 --> 00:17:59,130
is unique in that it's
21270,21420 21420,21870 21870,22020 22020,22170 22170,22350

554
00:17:59,130 --> 00:18:00,740
divided we have.
22350,23040 23040,23160 23160,23760

555
00:18:01,010 --> 00:18:02,450
What's called the base integer
150,540 540,750 750,870 870,1140 1140,1590

556
00:18:02,450 --> 00:18:04,280
instruction set which all risk
1590,2190 2190,2490 2490,2880 2880,3180 3180,3420

557
00:18:04,280 --> 00:18:07,080
five processors a.
3420,3720 3720,4740 5220,5790

558
00:18:07,340 --> 00:18:08,750
If we have fifteen Gabriel
120,300 300,420 420,630 630,1050 1050,1530

559
00:18:08,750 --> 00:18:09,530
asks in the chat, if
1530,1860 1860,1950 1950,2040 2040,2220 2220,2310

560
00:18:09,530 --> 00:18:11,210
we have 15,000 instructions, it
2310,2400 2400,2490 2490,3150 3150,3750 3750,3990

561
00:18:11,210 --> 00:18:13,100
nearly impossible to efficiently pipeline
3990,4350 4350,4890 4890,4950 4950,5370 5370,5880

562
00:18:13,100 --> 00:18:14,270
them, why do we need
5880,6180 6360,6720 6720,6780 6780,6900 6900,7050

563
00:18:14,270 --> 00:18:15,710
so many like I was
7050,7170 7170,7440 7890,8220 8220,8310 8310,8490

564
00:18:15,710 --> 00:18:16,670
saying we need so many
8490,8760 8760,8850 8850,9090 9090,9210 9210,9450

565
00:18:16,670 --> 00:18:18,530
for backwards compatibility reasons it's
9450,9570 9570,9960 9960,10620 10620,11130 11130,11310

566
00:18:18,530 --> 00:18:19,550
up to you to decide
11310,11460 11460,11580 11580,11730 11730,11820 11820,12330

567
00:18:19,550 --> 00:18:20,700
you know whether you.
12330,12390 12390,12540 12540,12870 12870,13230

568
00:18:20,660 --> 00:18:22,340
I think that's super important
0,30 60,600 600,870 870,1290 1290,1680

569
00:18:22,340 --> 00:18:23,870
but many of those instructions
1680,1800 1800,2100 2100,2160 2160,2400 2400,3210

570
00:18:23,900 --> 00:18:24,560
I think a ton of
3240,3420 3420,3540 3540,3600 3600,3810 3810,3900

571
00:18:24,560 --> 00:18:25,760
them are also eat.
3900,4020 4020,4140 4140,4410 4410,4890

572
00:18:25,860 --> 00:18:27,750
Eaten up by simd instructions
60,390 390,570 570,810 810,1350 1350,1950

573
00:18:27,750 --> 00:18:29,220
which are their own kind
1950,2190 2190,2250 2250,2430 2430,2880 3030,3420

574
00:18:29,220 --> 00:18:30,870
of special class of things.
3420,3480 3480,3900 3900,4290 4290,4410 4410,5070

575
00:18:31,850 --> 00:18:33,710
Um, you won't I I
90,570 600,780 780,1200 1290,1590 1590,1950

576
00:18:33,710 --> 00:18:35,330
I've never seen Intel assembly
1950,2370 2370,2640 2640,2850 2850,3180 3180,3570

577
00:18:35,330 --> 00:18:36,770
code that makes full uses
3570,3810 3810,3900 3900,4110 4110,4410 4410,5010

578
00:18:36,800 --> 00:18:37,880
full usage out of the
5040,5340 5340,5730 5730,5910 5910,6030 6030,6120

579
00:18:37,880 --> 00:18:39,680
15,000 instructions, but mostly this
6120,6750 6750,7320 7320,7440 7440,7770 7770,7920

580
00:18:39,680 --> 00:18:41,000
comes from a from a
7920,8190 8190,8400 8400,8700 8880,9210 9210,9240

581
00:18:41,000 --> 00:18:42,500
need for backwards compatibility and
9240,9480 9480,9570 9570,9930 9930,10590 10590,10740

582
00:18:42,500 --> 00:18:43,200
Cindy.
10740,11190

583
00:18:43,520 --> 00:18:44,660
But like I was saying
120,450 690,960 960,990 990,1110 1110,1260

584
00:18:44,660 --> 00:18:46,160
the risk five has a
1260,1410 1410,1650 1650,1950 1950,2520 2550,2760

585
00:18:46,160 --> 00:18:47,510
what's called the base integer
2760,3000 3000,3180 3180,3300 3300,3660 3660,4110

586
00:18:47,510 --> 00:18:48,740
instruction set.
4110,4680 4680,5130

587
00:18:49,030 --> 00:18:51,160
Which a contains all of
90,900 930,1230 1230,1830 1830,2070 2070,2220

588
00:18:51,160 --> 00:18:54,340
the normal add multiply things,
2220,2640 2670,3480 3480,3750 3750,4560 4590,5400

589
00:18:54,400 --> 00:18:56,230
um, and then processors can
5460,5940 5940,6090 6090,6390 6390,7050 7050,7290

590
00:18:56,230 --> 00:18:57,640
choose to implement a number
7290,7680 7680,7770 7770,8250 8250,8340 8340,8700

591
00:18:57,640 --> 00:18:58,990
of other modules which you
8700,8790 8790,9060 9060,9690 9690,9900 9900,10050

592
00:18:58,990 --> 00:19:00,130
can see along the side
10050,10200 10200,10440 10440,10800 10800,10860 10860,11190

593
00:19:00,130 --> 00:19:01,330
here it's probably impossible to
11190,11460 11460,11610 11610,11850 11850,12330 12330,12390

594
00:19:01,330 --> 00:19:03,220
read on your screen, but
12390,12750 13260,13470 13470,13620 13620,14040 14040,14280

595
00:19:03,220 --> 00:19:04,420
for example if you want
14280,14400 14400,15030 15030,15180 15180,15300 15300,15480

596
00:19:04,420 --> 00:19:06,700
a processor know that supports
15480,15570 15570,16470 16530,16980 16980,17220 17250,17760

597
00:19:06,700 --> 00:19:08,320
standard extension for single precision
17760,18060 18060,18510 18510,18660 18660,18930 18930,19380

598
00:19:08,320 --> 00:19:10,000
floating point, then you can
19380,19740 19740,20340 20460,20790 20790,20910 20910,21060

599
00:19:10,000 --> 00:19:11,500
include the f module.
21060,21390 21390,21480 21480,21720 21720,22320

600
00:19:11,960 --> 00:19:13,220
And this makes it easier
120,420 420,570 570,810 810,960 960,1380

601
00:19:13,220 --> 00:19:14,480
for risk five to support
1380,1500 1500,1710 1710,1950 1950,2070 2070,2640

602
00:19:14,660 --> 00:19:18,140
backwards compatibility, because if, um
2820,3840 3840,4590 4590,5370 5430,5850 5850,6300

603
00:19:18,170 --> 00:19:19,490
you can just say what
6330,6510 6510,6630 6630,6870 6870,7290 7290,7650

604
00:19:19,490 --> 00:19:20,690
set of modules do I
7650,7860 7860,8010 8010,8580 8580,8730 8730,8850

605
00:19:20,690 --> 00:19:23,060
include and support and the
8850,9420 9420,9570 9570,10170 10320,11010 11040,11220

606
00:19:23,060 --> 00:19:25,000
compiler can choose then.
11220,11790 11790,11970 11970,12450 12450,12870

607
00:19:25,060 --> 00:19:26,680
D compiler can say okay,
120,540 540,960 960,1080 1080,1320 1320,1740

608
00:19:26,680 --> 00:19:28,240
you know this processor is
1740,1800 1800,2100 2250,2700 2700,3210 3210,3300

609
00:19:28,240 --> 00:19:29,260
telling me it supports these
3300,3570 3570,3690 3690,3780 3780,4110 4110,4320

610
00:19:29,260 --> 00:19:30,310
modules, so I can only
4320,4830 4830,4920 4920,4980 4980,5100 5100,5370

611
00:19:30,310 --> 00:19:31,480
compile this code with these
5370,5820 5820,5940 5940,6240 6240,6360 6360,6540

612
00:19:31,480 --> 00:19:32,300
modules.
6540,7170

613
00:19:33,760 --> 00:19:35,800
Okay, big bucks as it
120,510 510,690 690,1110 1110,1920 1950,2160

614
00:19:35,800 --> 00:19:36,850
seems that the only advantage
2160,2430 2430,2550 2550,2640 2640,2850 2850,3210

615
00:19:36,850 --> 00:19:38,230
of using x86 instead of
3210,3300 3300,3570 3570,4290 4290,4500 4500,4590

616
00:19:38,230 --> 00:19:39,310
risc five process is the
4590,4800 4800,5040 5040,5520 5520,5580 5580,5670

617
00:19:39,310 --> 00:19:40,180
kind of performance, you can
5670,5850 5850,5910 5910,6330 6330,6450 6450,6540

618
00:19:40,180 --> 00:19:42,220
get however, that performance comes
6540,6840 6990,7530 7530,7650 7650,8070 8280,8580

619
00:19:42,220 --> 00:19:43,390
as a massive cost and
8580,8670 8670,8910 8910,9330 9330,9660 9660,9750

620
00:19:43,390 --> 00:19:45,550
complexity and potential security, my
9750,10290 10290,10440 10440,10770 10770,11490 11550,11910

621
00:19:45,550 --> 00:19:46,450
question is why are we
11910,12300 12300,12450 12450,12630 12630,12720 12720,12810

622
00:19:46,450 --> 00:19:48,100
still using x86 instead of
12810,13020 13020,13320 13320,14070 14070,14370 14370,14460

623
00:19:48,100 --> 00:19:49,120
moving to something like risk
14460,14730 14730,14790 14790,15060 15060,15270 15270,15480

624
00:19:49,120 --> 00:19:49,820
five.
15480,15840

625
00:19:49,970 --> 00:19:52,130
Um, well I'm a big
210,780 1050,1500 1500,1590 1590,1740 1740,2370

626
00:19:52,160 --> 00:19:53,210
answer that the world is
2400,2730 2730,2970 2970,3090 3090,3360 3360,3450

627
00:19:53,210 --> 00:19:55,970
run on x86, for I
3450,3750 3750,3930 3930,4800 4830,5760 5940,6210

628
00:19:55,970 --> 00:19:57,170
I don't have a great
6210,6420 6420,6720 6720,6960 6960,7110 7110,7410

629
00:19:57,170 --> 00:19:58,910
answer for why risk five
7410,7740 7740,7950 7950,8400 8610,8940 8940,9150

630
00:19:58,910 --> 00:20:00,540
is pretty modern too.
9150,9270 9270,9480 9480,9900 9900,10320

631
00:20:00,740 --> 00:20:02,750
So the world as a
120,690 840,1590 1590,1950 1950,2070 2070,2130

632
00:20:02,750 --> 00:20:04,460
whole pretty much runs on
2130,2460 2460,2700 2700,3000 3000,3450 3450,3840

633
00:20:04,460 --> 00:20:06,170
x86, so if you suddenly
3840,4590 4590,4770 4770,4920 4920,5100 5100,5550

634
00:20:06,170 --> 00:20:10,340
start converting your processors to
5550,6090 6510,7260 7260,7830 8190,9330 9330,9720

635
00:20:10,340 --> 00:20:12,110
risk five you run the
9720,10050 10050,10560 10560,11070 11070,11370 11370,11490

636
00:20:12,110 --> 00:20:13,540
risk of a.
11490,11880 11880,12060 12060,12660

637
00:20:14,080 --> 00:20:15,730
You know losing support for
120,240 240,570 600,1110 1110,1620 1620,1770

638
00:20:15,730 --> 00:20:17,320
a bunch of important things,
1770,1860 1860,2100 2100,2220 2220,2790 2790,3360

639
00:20:17,380 --> 00:20:19,060
also there are like Intel
3420,3900 3900,4110 4110,4380 4380,4620 4620,5100

640
00:20:19,060 --> 00:20:21,310
does do interesting things within
5100,5430 5430,5730 5730,6360 6360,6870 6870,7350

641
00:20:21,310 --> 00:20:24,580
their processors like security wise,
7350,7560 7560,8460 8550,9180 9180,9720 9720,10620

642
00:20:24,610 --> 00:20:26,470
there are enclaves and Intel
10650,10980 10980,11280 11280,12000 12000,12120 12120,12510

643
00:20:26,470 --> 00:20:28,540
processors and there's things that
12510,13350 13350,13470 13470,13680 13680,13920 13920,14580

644
00:20:28,780 --> 00:20:30,070
they've been doing in recent
14820,15150 15150,15240 15240,15600 15600,15750 15750,16110

645
00:20:30,070 --> 00:20:31,510
years to try to try
16110,16470 16470,16590 16590,17010 17040,17190 17190,17550

646
00:20:31,510 --> 00:20:33,130
and give you extra added
17550,17820 17820,18060 18060,18240 18240,18810 18840,19170

647
00:20:33,130 --> 00:20:35,500
security and some of those
19170,19980 20190,20880 20910,21180 21180,21300 21300,21540

648
00:20:35,500 --> 00:20:37,240
instructions that Intel does implement
21540,22110 22110,22260 22260,22590 22590,22800 22800,23280

649
00:20:37,240 --> 00:20:39,100
which are hyper specific can
23280,23520 23520,23700 23700,24030 24030,24720 24840,25140

650
00:20:39,100 --> 00:20:41,260
be really efficient for certain,
25140,25350 25350,25650 25650,26220 26220,26640 26640,27300

651
00:20:41,530 --> 00:20:43,080
um computations.
27570,27900 27900,28980

652
00:20:43,250 --> 00:20:44,150
Um, and so they have
90,450 450,600 600,720 720,840 840,990

653
00:20:44,150 --> 00:20:45,860
so many instructions, there's often
990,1170 1170,1350 1350,1980 1980,2250 2250,2700

654
00:20:45,860 --> 00:20:46,620
you know.
2700,2790 2790,3210

655
00:20:46,740 --> 00:20:48,180
A perfect instruction for a
60,270 270,690 690,1260 1260,1440 1440,1500

656
00:20:48,180 --> 00:20:49,530
situation that may be more
1500,2190 2190,2340 2340,2490 2490,2640 2640,2850

657
00:20:49,530 --> 00:20:50,680
efficient than.
2850,3390 3390,3750

658
00:20:50,870 --> 00:20:52,670
Then what exists within risk
90,540 540,960 960,1380 1380,1680 1680,1890

659
00:20:52,670 --> 00:20:54,830
five but a more practical
1890,2340 2430,3030 3030,3330 3330,3660 3660,4050

660
00:20:54,830 --> 00:20:55,730
answer is at risk five
4050,4350 4350,4440 4440,4560 4560,4710 4710,4950

661
00:20:55,730 --> 00:20:56,840
is relatively new and we
4950,5040 5040,5550 5550,5850 5850,5970 5970,6060

662
00:20:56,840 --> 00:20:58,340
just don't know, nobody's really
6060,6210 6210,6540 6660,6840 6840,7290 7290,7560

663
00:20:58,340 --> 00:21:00,350
making processors for personal computers
7560,7920 7920,8550 8550,8700 8700,9030 9030,9570

664
00:21:00,350 --> 00:21:02,150
I think the c5 announcement
9570,9660 9660,9840 9840,10080 10260,10920 10920,11370

665
00:21:02,150 --> 00:21:04,490
is super recent, um and
11370,11700 11700,12060 12060,12480 12660,13290 13320,13710

666
00:21:04,520 --> 00:21:05,660
they're kind of the first
13740,14160 14160,14340 14340,14430 14430,14550 14550,14880

667
00:21:05,660 --> 00:21:06,650
people to be doing that,
14880,15150 15150,15240 15240,15360 15360,15630 15630,15870

668
00:21:06,650 --> 00:21:08,150
so on a practical level.
15870,16170 16200,16350 16350,16440 16440,16860 16860,17370

669
00:21:08,820 --> 00:21:10,560
That and the inability to
120,660 660,900 900,1140 1140,1740 1740,1860

670
00:21:10,560 --> 00:21:11,730
run all the software design
1860,2040 2040,2160 2160,2250 2250,2700 2700,3030

671
00:21:11,730 --> 00:21:14,070
for Intel is is my
3030,3210 3210,3720 4230,4830 4890,5100 5100,5370

672
00:21:14,070 --> 00:21:15,340
best answer.
5370,5700 5700,6270

673
00:21:16,210 --> 00:21:19,210
So we've been now chatting
750,1440 1920,2220 2220,2610 3060,3390 3390,3750

674
00:21:19,210 --> 00:21:20,710
a little bit about assembly,
3750,3810 3810,4020 4020,4320 4320,4710 4710,5250

675
00:21:20,710 --> 00:21:21,970
so I just wanted to
5250,5370 5370,5430 5430,5640 5640,5940 5940,6510

676
00:21:22,090 --> 00:21:23,800
um, take a look at
6630,7320 7350,7680 7680,7740 7740,8100 8100,8340

677
00:21:23,800 --> 00:21:26,420
some actual assembly code.
8340,8700 8700,9180 9180,9630 9630,10230

678
00:21:26,600 --> 00:21:30,320
So here is the c
120,450 450,1020 1020,1650 1650,2370 3420,3840

679
00:21:30,320 --> 00:21:31,730
code for what's below, so
3840,4200 4200,4350 4350,4650 4650,5100 5100,5250

680
00:21:31,730 --> 00:21:32,930
this is a simple function
5250,5400 5400,5520 5520,5580 5580,5940 5940,6450

681
00:21:32,930 --> 00:21:34,610
that has an accumulator, we
6450,6540 6540,6720 6720,6810 6810,7620 7710,8130

682
00:21:34,610 --> 00:21:36,440
loop from zero to n
8130,8550 8550,9030 9030,9360 9360,9480 9480,9960

683
00:21:36,440 --> 00:21:38,390
and we sum up all
9960,10620 10710,11220 11220,11520 11520,11730 11730,11910

684
00:21:38,390 --> 00:21:40,400
the numbers from a from
11910,12060 12060,12780 12780,13380 13410,13740 13740,13920

685
00:21:40,400 --> 00:21:41,300
zero to n.
13920,14220 14220,14310 14310,14580

686
00:21:41,960 --> 00:21:43,550
And then return that value
180,420 420,570 570,900 900,1080 1080,1770

687
00:21:43,760 --> 00:21:46,280
and at its simplest level,
1980,2670 2670,3420 3420,3570 3570,4020 4020,4500

688
00:21:46,280 --> 00:21:47,450
this is the easiest kind
4500,4680 4680,4800 4800,4950 4950,5430 5430,5670

689
00:21:47,450 --> 00:21:48,980
of assembly, you can get
5670,5760 5760,6360 6360,6630 6630,6840 6840,7200

690
00:21:48,980 --> 00:21:50,510
out of compiling that program
7200,7350 7350,7470 7470,7980 7980,8190 8190,8730

691
00:21:50,720 --> 00:21:53,390
if you actually go into
8940,9300 9300,9600 9600,10170 10170,10620 10650,11610

692
00:21:53,390 --> 00:21:54,770
your own computer and you
11610,12000 12000,12180 12180,12720 12720,12870 12870,12990

693
00:21:54,770 --> 00:21:55,850
write the c code and
12990,13230 13230,13320 13320,13590 13590,13950 13950,14070

694
00:21:55,850 --> 00:21:56,930
you try to compile it,
14070,14160 14160,14340 14340,14460 14460,14910 14910,15150

695
00:21:56,930 --> 00:21:57,710
you will end up with
15150,15270 15270,15420 15420,15630 15630,15810 15810,15930

696
00:21:57,710 --> 00:22:00,020
something that likely looks quite
15930,16470 16650,16980 16980,17310 17310,17760 17790,18240

697
00:22:00,020 --> 00:22:01,160
different.
18240,18690

698
00:22:01,420 --> 00:22:02,260
And that's true for a
180,330 330,570 570,780 780,930 930,1020

699
00:22:02,260 --> 00:22:03,580
variety of reasons, we have
1020,1440 1440,1560 1560,2040 2040,2160 2160,2340

700
00:22:03,580 --> 00:22:04,630
a some of which we'll
2340,2790 2790,2940 2940,3030 3030,3180 3180,3390

701
00:22:04,630 --> 00:22:05,350
get to and some of
3390,3600 3600,3750 3750,3870 3870,4020 4020,4110

702
00:22:05,350 --> 00:22:07,570
which are compiler specific so
4110,4350 4350,4440 4440,4860 4860,5520 5850,6330

703
00:22:07,570 --> 00:22:10,300
modern compilers make a large
6330,6750 6750,7410 7410,7800 7800,8520 8610,9060

704
00:22:10,300 --> 00:22:12,080
number of optimization 's.
9060,9330 9330,9420 9420,10350 10350,10740

705
00:22:13,510 --> 00:22:14,860
With it when they compile
90,390 390,570 570,780 780,930 930,1440

706
00:22:14,860 --> 00:22:16,150
your c to assembly, and
1440,1620 1620,1860 1860,2010 2010,2580 2580,2730

707
00:22:16,150 --> 00:22:17,500
so your assembly instructions may
2730,2880 2880,3060 3060,3420 3420,3960 3960,4080

708
00:22:17,500 --> 00:22:19,870
look different, for instance while
4080,4290 4290,4740 4860,5220 5220,6000 6060,6450

709
00:22:19,870 --> 00:22:21,280
you're debugging in G D
6450,6630 6630,7200 7200,7350 7350,7500 7500,7860

710
00:22:21,280 --> 00:22:22,360
you may come across something
7860,7980 7980,8130 8130,8340 8340,8670 8670,8940

711
00:22:22,360 --> 00:22:23,230
that tells you that it's
8940,9060 9060,9330 9330,9480 9480,9630 9630,9810

712
00:22:23,230 --> 00:22:25,300
awesome variable has been optimized
9810,10230 10230,10740 10740,10920 10920,11160 11160,11880

713
00:22:25,300 --> 00:22:26,770
out, and that means that
11880,12330 12630,12870 12870,13020 13020,13230 13230,13350

714
00:22:26,770 --> 00:22:28,150
the compiler decided it didn't
13350,13440 13440,13950 13950,14430 14430,14550 14550,14730

715
00:22:28,150 --> 00:22:30,250
need that variable a and
14730,14940 14940,15120 15120,15840 15990,16590 16590,16830

716
00:22:30,250 --> 00:22:32,440
so that'll be begotten effectively
16830,17100 17100,17490 17490,17820 17850,18450 18450,19020

717
00:22:32,440 --> 00:22:34,270
from the program, but yeah
19020,19200 19200,19290 19290,19950 20190,20490 20490,20850

718
00:22:34,270 --> 00:22:35,290
and it's at its most
20850,21000 21000,21330 21360,21540 21540,21660 21660,21870

719
00:22:35,290 --> 00:22:36,380
straightforward.
21870,22740

720
00:22:36,970 --> 00:22:39,520
We're moving a value that's
270,510 510,1230 1350,2010 2040,2550 2550,2820

721
00:22:39,520 --> 00:22:40,510
in a zero the t
2820,2970 2970,3120 3120,3480 3480,3570 3570,3810

722
00:22:40,510 --> 00:22:42,280
zero we're setting a zero
3810,4530 4560,4860 4860,5190 5190,5280 5280,5580

723
00:22:42,280 --> 00:22:44,080
to zero and then we
5580,5640 5640,6240 6240,6450 6450,6960 7110,7380

724
00:22:44,080 --> 00:22:46,390
are just adding what's in
7380,7920 8340,8670 8670,9180 9240,9540 9540,9690

725
00:22:46,390 --> 00:22:47,890
t zero to a zero
9690,9900 9900,10290 10290,10470 10470,10590 10590,11190

726
00:22:47,890 --> 00:22:48,880
for every iteration of a
11190,11370 11370,11610 11610,12060 12060,12150 12150,12180

727
00:22:48,880 --> 00:22:50,920
loop until t zero reaches
12180,12660 12690,13260 13260,13440 13440,13890 13890,14220

728
00:22:50,920 --> 00:22:51,520
zero.
14220,14640

729
00:22:52,500 --> 00:22:53,370
And that's all that's going
180,330 330,510 510,630 630,810 810,1050

730
00:22:53,370 --> 00:22:54,630
on in this piece Amir
1050,1200 1200,1290 1290,1410 1410,1740 1770,2310

731
00:22:54,630 --> 00:22:55,580
your hands raised.
2310,2460 2460,2670 2670,3090

732
00:22:57,460 --> 00:22:59,080
I was wondering what dot
360,480 480,810 810,1230 1230,1590 1590,1980

733
00:22:59,080 --> 00:23:01,540
section, dot text dot global
1980,2790 2820,3120 3120,3690 3750,4110 4110,4440

734
00:23:01,540 --> 00:23:02,400
do.
4440,4800

735
00:23:02,420 --> 00:23:03,770
A global means that you
60,330 330,780 780,1050 1050,1230 1230,1410

736
00:23:03,770 --> 00:23:05,120
can include this from other
1410,1770 1770,2280 2280,2460 2460,2580 2580,2760

737
00:23:05,120 --> 00:23:07,280
files, so if we actually
2760,3450 3690,4260 4260,4470 4470,4590 4590,4920

738
00:23:07,280 --> 00:23:10,820
hop into a let's see
4920,5220 5220,6300 6630,7350 7380,7620 7620,8460

739
00:23:11,630 --> 00:23:13,660
f dot h.
9270,9570 9570,9840 9840,10500

740
00:23:14,220 --> 00:23:15,270
This is the file that
120,360 360,480 480,570 570,930 930,1170

741
00:23:15,270 --> 00:23:17,580
you're a will if you
1170,1710 2250,2820 2820,3180 3180,3360 3360,3480

742
00:23:17,580 --> 00:23:18,720
aren't already, you will become
3480,3690 3690,4020 4020,4140 4140,4290 4290,4620

743
00:23:18,720 --> 00:23:20,970
quite familiar with, this includes
4620,4860 4860,5280 5280,5640 5640,6030 6030,6870

744
00:23:20,970 --> 00:23:22,380
basically all of the functions
6870,7350 7350,7560 7560,7650 7650,7740 7740,8280

745
00:23:22,380 --> 00:23:23,370
within the kernel that you
8280,8550 8550,8610 8610,9030 9030,9150 9150,9270

746
00:23:23,370 --> 00:23:24,480
may want to be using
9270,9420 9420,9600 9600,9660 9660,9780 9780,10380

747
00:23:24,870 --> 00:23:27,510
and a within, here you
10770,11520 11550,12000 12000,12390 12390,13050 13200,13410

748
00:23:27,510 --> 00:23:28,470
know we can see that
13410,13620 13620,13740 13740,13890 13890,14130 14130,14370

749
00:23:28,470 --> 00:23:29,440
in my.
14370,14520 14520,15120

750
00:23:29,610 --> 00:23:31,440
My file, I've included the
90,360 360,900 900,1080 1080,1710 1710,1920

751
00:23:31,440 --> 00:23:33,600
definitions to these functions and
1920,2610 2610,2700 2700,2910 2910,3690 3840,4080

752
00:23:33,600 --> 00:23:35,700
so that global makes sure
4080,4230 4230,4470 4470,5370 5370,5670 5670,6180

753
00:23:35,700 --> 00:23:36,800
that.
6180,6630

754
00:23:37,080 --> 00:23:38,760
Um, that these these functions
120,660 660,900 900,1230 1230,1410 1410,1800

755
00:23:38,760 --> 00:23:40,200
can be called from other
1800,1920 1920,2310 2340,2820 2820,2970 2970,3240

756
00:23:40,200 --> 00:23:42,570
places and dot text just
3240,3990 4260,4620 4620,4890 4890,5370 5370,5610

757
00:23:42,570 --> 00:23:43,740
says this is code.
5610,5850 5850,5970 5970,6090 6090,6570

758
00:23:44,220 --> 00:23:46,020
So if you recall from
120,450 450,630 630,750 750,1230 1230,1920

759
00:23:46,020 --> 00:23:48,000
figure 3.4 in the book.
1920,2430 2430,2700 2700,3090 3090,3720 3720,3900

760
00:23:48,000 --> 00:23:49,020

3900,3990 3990,4620

761
00:23:49,300 --> 00:23:50,890
Um, so that's if we
120,660 660,840 840,1350 1350,1560 1560,1710

762
00:23:50,890 --> 00:23:52,820
go to.
1710,2490 2520,3420

763
00:23:53,430 --> 00:23:54,640
The book.
90,240 240,1170

764
00:23:56,380 --> 00:23:58,390
And we go into page
120,360 360,480 480,810 810,1470 1650,2130

765
00:23:58,390 --> 00:24:01,360
tables process address space, so
2130,3330 3360,3780 3780,4080 4080,4530 4710,5100

766
00:24:01,360 --> 00:24:03,550
in here in this diagram,
5100,5370 5370,6000 6030,6240 6240,6420 6420,7290

767
00:24:03,730 --> 00:24:05,350
that's the same thing is
7470,7830 7830,7980 7980,8280 8280,8670 8970,9090

768
00:24:05,350 --> 00:24:06,640
text, so just needs code.
9090,9480 9480,9600 9600,9780 9780,9960 9960,10380

769
00:24:09,440 --> 00:24:11,630
To answer your question, thanks.
240,390 390,600 600,690 690,1050 1530,2430

770
00:24:14,810 --> 00:24:15,740
And so if we want
1650,1890 1890,2070 2070,2280 2280,2370 2370,2580

771
00:24:15,740 --> 00:24:17,560
to run a.
2580,2640 2640,3330 3360,4020

772
00:24:17,670 --> 00:24:18,600
Let's say we have some
90,360 360,510 510,660 660,840 840,1020

773
00:24:18,600 --> 00:24:20,640
assembly, also if you ever
1020,1950 2010,2370 2370,2460 2460,2700 2700,3060

774
00:24:20,640 --> 00:24:23,520
find yourself interested in what
3060,3360 3360,3990 4110,4950 4950,5670 5700,5940

775
00:24:23,520 --> 00:24:25,410
the colonel looks like we
5940,6060 6060,6510 6510,6810 6810,7320 7560,7830

776
00:24:25,410 --> 00:24:27,450
can go inside the after
7830,8160 8160,8610 8610,9180 9180,9570 9570,9870

777
00:24:27,450 --> 00:24:29,250
you compile you can look
9870,9990 9990,10710 10860,11190 11190,11520 11520,11670

778
00:24:29,250 --> 00:24:30,750
in the file kernel slash
11670,11760 11760,11880 11880,12330 12330,12750 12750,13170

779
00:24:30,750 --> 00:24:32,500
kernel dot asf.
13170,13530 13530,13770 13770,14250

780
00:24:32,800 --> 00:24:33,910
And this is the full
120,480 480,690 690,810 810,930 930,1230

781
00:24:33,910 --> 00:24:37,360
kind of assembly for the
1230,1440 1440,1800 2820,3780 3810,4530 4560,4680

782
00:24:37,360 --> 00:24:38,200
kernel.
4680,5220

783
00:24:38,980 --> 00:24:40,330
A of X V six
120,570 570,720 720,870 870,990 990,1470

784
00:24:40,330 --> 00:24:41,680
and each of these numbers
1470,1800 1800,2010 2010,2130 2130,2370 2370,2820

785
00:24:41,680 --> 00:24:43,660
on the left here is
2820,2970 2970,3090 3090,3420 3420,3960 4230,4800

786
00:24:43,660 --> 00:24:45,070
a label that tells you
4800,4920 4920,5550 5550,5760 5760,6030 6030,6210

787
00:24:45,070 --> 00:24:46,780
where in memory, this in
6210,6570 6570,6720 6720,7170 7170,7440 7440,7920

788
00:24:46,900 --> 00:24:48,790
this instruction will be and
8040,8250 8250,8730 8730,8880 8880,9300 9630,9930

789
00:24:48,790 --> 00:24:49,870
that will come in quite
9930,10050 10050,10170 10170,10380 10380,10740 10740,11010

790
00:24:49,870 --> 00:24:50,680
handy.
11010,11430

791
00:24:50,670 --> 00:24:51,870
And so here is the
30,240 240,360 360,660 660,750 750,1230

792
00:24:52,380 --> 00:24:54,000
here's the actual law.
1740,2070 2070,2190 2190,2670 2670,3180

793
00:24:54,840 --> 00:24:56,130
Use the actual assembly code
120,300 300,390 390,660 660,1050 1050,1410

794
00:24:56,130 --> 00:24:56,850
and you can see the
1410,1500 1500,1620 1620,1740 1740,1980 1980,2130

795
00:24:56,850 --> 00:24:59,280
labels for the functions and
2130,2850 2850,2970 2970,3090 3090,4140 4380,4560

796
00:24:59,280 --> 00:25:00,360
whether declared so this is
4560,4830 4830,5190 5190,5310 5310,5490 5490,5640

797
00:25:00,360 --> 00:25:02,190
this is, um can be
5640,5850 5850,6030 6030,6480 6900,7320 7320,7470

798
00:25:02,190 --> 00:25:03,510
really really useful as we're
7470,7740 7740,7950 7950,8460 8460,8670 8670,8790

799
00:25:03,510 --> 00:25:04,980
debugging code and hopefully I'll
8790,9210 9210,9660 9660,9810 9810,10140 10140,10260

800
00:25:04,980 --> 00:25:05,850
be able to show that
10260,10350 10350,10500 10500,10590 10590,10830 10830,11130

801
00:25:06,150 --> 00:25:07,180
in a second.
11430,11610 11610,11670 11670,12180

802
00:25:07,540 --> 00:25:09,460
But for now we'll jump
420,780 780,900 900,1410 1680,2040 2040,2340

803
00:25:09,460 --> 00:25:11,530
back to this first function,
2340,2700 2700,3330 3330,3630 3630,3930 3930,4410

804
00:25:11,530 --> 00:25:13,180
some too and we'll just
4410,4710 4710,5250 5430,5730 5730,5850 5850,6060

805
00:25:13,180 --> 00:25:14,920
see how we can examine
6060,6390 6390,6660 6660,6840 6840,7170 7170,7800

806
00:25:14,920 --> 00:25:16,750
that inside of G D,
7800,8220 8250,8820 8820,8910 8910,9180 9180,9630

807
00:25:16,780 --> 00:25:19,330
um, so the first step
9660,10290 11310,11610 11610,11700 11700,11940 11940,12210

808
00:25:19,330 --> 00:25:20,320
is I have my two
12210,12450 12450,12570 12570,12690 12690,12810 12810,13200

809
00:25:20,320 --> 00:25:22,510
Windows here, what's the difference
13200,13680 13680,14340 14550,14970 14970,15060 15060,15390

810
00:25:22,510 --> 00:25:24,880
between a SMS files.
15390,15690 15720,15900 15900,16740 16740,17550

811
00:25:25,170 --> 00:25:26,220
I'm.
90,900

812
00:25:27,150 --> 00:25:29,310
Not a hundred percent certain
690,990 990,1050 1050,1290 1290,1770 2010,2850

813
00:25:29,430 --> 00:25:31,110
they're both assembly I think
2970,3330 3330,3780 3780,4320 4320,4440 4440,4650

814
00:25:31,110 --> 00:25:32,700
the dot dot asf file
4650,4860 4860,5190 5190,5580 5580,5970 5970,6240

815
00:25:32,700 --> 00:25:33,810
includes a bunch of extra
6240,6600 6600,6660 6660,6930 6930,7020 7020,7350

816
00:25:33,810 --> 00:25:35,490
annotations that aren't included in
7350,8040 8040,8280 8280,8490 8490,8940 8940,9030

817
00:25:35,490 --> 00:25:37,080
dot's so usually when you
9030,9330 9330,9660 9930,10170 10170,10500 10500,10620

818
00:25:37,080 --> 00:25:38,490
compile your c code too.
10620,10800 10800,11250 11250,11400 11400,11610 11610,12030

819
00:25:38,490 --> 00:25:39,400

12030,12570

820
00:25:39,940 --> 00:25:40,990
Dot's you'll end up with
0,480 480,630 630,750 750,900 900,1050

821
00:25:40,990 --> 00:25:42,700
something that doesn't include all
1050,1170 1170,1860 1950,2190 2190,2460 2460,2760

822
00:25:42,700 --> 00:25:43,930
those line numbers and things
2760,3000 3000,3240 3240,3480 3480,3870 3870,3990

823
00:25:43,930 --> 00:25:45,140
like that so.
3990,4200 4200,4380 4380,4650 4650,4980

824
00:25:45,630 --> 00:25:46,560
If you're curious about how
90,240 240,360 360,690 690,870 870,1020

825
00:25:46,560 --> 00:25:47,700
we get A M file
1020,1110 1110,1380 1380,1680 1680,1890 1890,2160

826
00:25:47,700 --> 00:25:48,780
I think the make file,
2160,2250 2250,2370 2370,2460 2460,2700 2700,3240

827
00:25:49,050 --> 00:25:50,460
um, we'll tell you the
3510,4020 4050,4230 4230,4440 4440,4800 4800,4920

828
00:25:50,460 --> 00:25:51,520
exact steps.
4920,5280 5280,5850

829
00:25:51,630 --> 00:25:53,460
Used to get that.
150,540 540,630 630,810 810,1050

830
00:25:55,960 --> 00:25:57,790
And so if we're in
120,270 270,840 1020,1380 1380,1860 1860,1950

831
00:25:57,790 --> 00:25:58,570
our terminal, we have our
1950,2040 2040,2400 2400,2490 2490,2640 2640,2730

832
00:25:58,570 --> 00:26:00,790
two um, two Windows, so
2730,3360 3360,3660 3660,3930 3930,4620 4740,4950

833
00:26:00,790 --> 00:26:01,690
the first thing to do
4950,5040 5040,5310 5310,5430 5430,5490 5490,5850

834
00:26:01,690 --> 00:26:04,360
is of course a get
5850,6060 6060,6150 6150,6630 6630,7170 7680,8520

835
00:26:04,360 --> 00:26:06,360
you up and running.
8520,9120 9120,9300 9300,9420 9420,9960

836
00:26:06,630 --> 00:26:08,120
So ten.
90,540 540,1050

837
00:26:08,460 --> 00:26:10,110
Started within G D mode,
60,660 660,1020 1020,1140 1140,1440 1440,1710

838
00:26:10,110 --> 00:26:11,850
so now we're frozen here
1710,1830 1830,2010 2010,2520 2520,2880 2880,3450

839
00:26:11,880 --> 00:26:12,870
and then we can start
3480,3750 3750,3870 3870,3960 3960,4080 4080,4470

840
00:26:12,870 --> 00:26:14,000
TV.
4470,5070

841
00:26:15,990 --> 00:26:17,640
And what what what what
150,360 360,780 780,1050 1050,1350 1350,1800

842
00:26:18,090 --> 00:26:20,220
professor cash showed last week,
2250,2700 2700,3060 3060,3510 3510,3900 3900,4380

843
00:26:20,550 --> 00:26:21,750
um which I think some
4710,5160 5160,5490 5490,5610 5610,5760 5760,5910

844
00:26:21,750 --> 00:26:23,490
people were excited, you typed
5910,6120 6120,6570 6600,7140 7140,7260 7260,7650

845
00:26:23,490 --> 00:26:25,170
UI, enable you get this
7650,8160 8160,8730 8730,8880 8880,9090 9090,9330

846
00:26:25,170 --> 00:26:26,910
nice window which is empty
9330,9840 9900,10440 10440,10620 10620,10740 10740,11070

847
00:26:26,910 --> 00:26:27,840
for now but will come
11070,11220 11220,11490 11490,11670 11670,11790 11790,12000

848
00:26:27,840 --> 00:26:29,580
in quite useful as you're
12000,12360 12420,12870 12870,13440 13440,13620 13620,13740

849
00:26:29,580 --> 00:26:31,260
debugging, so we can set
13740,14310 14550,14910 14910,15030 15030,15180 15180,15420

850
00:26:31,260 --> 00:26:32,610
a break point and I
15420,15510 15510,15780 15780,16170 16170,16650 16650,16770

851
00:26:32,610 --> 00:26:33,810
should note that all this
16770,16980 16980,17220 17220,17460 17460,17670 17670,17970

852
00:26:33,810 --> 00:26:35,460
code is living inside the
17970,18540 18540,18840 18840,19140 19140,19530 19530,19620

853
00:26:35,460 --> 00:26:36,330
kernel, none of this is
19620,19950 19950,20130 20130,20190 20190,20340 20340,20490

854
00:26:36,330 --> 00:26:37,680
in user space, so we
20490,20610 20610,20850 20850,21330 21600,21780 21780,21840

855
00:26:37,680 --> 00:26:38,370
don't have any of those
21840,22050 22050,22170 22170,22320 22320,22410 22410,22530

856
00:26:38,370 --> 00:26:40,170
annoying problems setting break points,
22530,22860 22860,23340 23340,23580 23580,23820 23820,24330

857
00:26:40,410 --> 00:26:41,010
so I can set a
24570,24750 24750,24810 24810,24930 24930,25110 25110,25170

858
00:26:41,010 --> 00:26:43,110
break point in the function
25170,25470 25470,25980 26250,26670 26700,26820 26820,27270

859
00:26:43,110 --> 00:26:44,940
sum two and then just
27270,27570 27570,28140 28410,28740 28740,28920 28920,29100

860
00:26:44,940 --> 00:26:46,160
continue running.
29100,29460 29460,30000

861
00:26:47,300 --> 00:26:50,000
Run that function and now,
1200,1710 1710,1950 1950,2490 3210,3420 3420,3900

862
00:26:50,000 --> 00:26:52,010
um, so the first window
3900,4380 4380,5040 5220,5400 5400,5700 5700,5910

863
00:26:52,010 --> 00:26:53,120
that you see in t
5910,6030 6030,6210 6210,6540 6540,6720 6720,7020

864
00:26:53,120 --> 00:26:55,880
why is the source window.
7020,7380 7380,8070 8070,8580 8640,9240 9240,9780

865
00:26:57,270 --> 00:26:58,800
Um, yes, as David is
90,450 450,960 1020,1230 1230,1530 1530,1620

866
00:26:58,800 --> 00:27:00,360
saying those those numbers on
1620,1920 1920,2460 2460,2760 2760,3060 3060,3180

867
00:27:00,360 --> 00:27:01,380
the left of kernel dot
3180,3300 3300,3600 3600,3690 3690,3990 3990,4200

868
00:27:01,380 --> 00:27:03,060
A S M R really
4200,4290 4290,4470 4470,4830 4830,5310 5400,5880

869
00:27:03,060 --> 00:27:05,730
useful when you're debugging things
5880,6360 6360,6660 6660,7500 7530,8160 8160,8550

870
00:27:05,730 --> 00:27:07,020
and you get an address
8550,8670 8670,8790 8790,8970 8970,9060 9060,9840

871
00:27:07,500 --> 00:27:08,370
it'll tell you so you
10320,10620 10620,10830 10830,10950 10950,11040 11040,11190

872
00:27:08,370 --> 00:27:10,080
can see now even here
11190,11340 11340,11550 11550,12120 12150,12570 12570,12900

873
00:27:10,080 --> 00:27:10,800
we can see that the
12900,13020 13020,13170 13170,13380 13380,13530 13530,13620

874
00:27:10,800 --> 00:27:12,270
programs of PC here in
13620,14100 14100,14190 14190,14670 14670,14940 14940,15090

875
00:27:12,270 --> 00:27:13,200
G D.
15090,15240 15240,15750

876
00:27:13,420 --> 00:27:14,800
Is the program counter, so
120,390 390,480 480,810 810,1260 1260,1500

877
00:27:14,800 --> 00:27:15,910
we can see this address
1500,1650 1650,1800 1800,1950 1950,2160 2160,2610

878
00:27:15,910 --> 00:27:17,320
eight zero zero so on
2610,2790 2790,3060 3060,3630 3630,3870 3870,4020

879
00:27:17,320 --> 00:27:18,460
and so forth.
4020,4140 4140,4350 4350,4920

880
00:27:18,540 --> 00:27:20,370
Um, if we go into
120,510 510,780 780,930 930,1320 1320,1950

881
00:27:20,370 --> 00:27:21,660
kernel dot A S M
1950,2310 2310,2490 2490,2610 2610,2790 2790,3240

882
00:27:21,870 --> 00:27:22,950
and we search for that
3450,3660 3660,3780 3780,4170 4170,4320 4320,4530

883
00:27:22,950 --> 00:27:25,020
specific address, we can see
4530,5010 5010,5820 5850,6090 6090,6300 6300,6600

884
00:27:25,020 --> 00:27:26,140
that it's the.
6600,6780 6780,6990 6990,7470

885
00:27:26,860 --> 00:27:28,540
A move comes up twice
120,750 810,1200 1200,1410 1410,1560 1560,1800

886
00:27:28,540 --> 00:27:29,950
because the function call, but
1800,2010 2010,2100 2100,2460 2460,2880 3000,3210

887
00:27:29,950 --> 00:27:31,000
if we look here, this
3210,3390 3390,3510 3510,3750 3750,4080 4080,4260

888
00:27:31,000 --> 00:27:32,470
is that address, it's the
4260,4320 4320,4530 4530,5310 5400,5640 5640,5730

889
00:27:32,470 --> 00:27:33,370
top of the sum to
5730,6000 6000,6120 6120,6210 6210,6450 6450,6630

890
00:27:33,370 --> 00:27:34,240
function.
6630,7230

891
00:27:34,760 --> 00:27:36,170
So if you see any
120,480 480,690 690,870 870,1290 1290,1530

892
00:27:36,170 --> 00:27:37,070
time you see one of
1530,1830 1830,1980 1980,2100 2100,2310 2310,2430

893
00:27:37,070 --> 00:27:39,050
these, um all the kernel
2430,2940 2970,3660 3840,4020 4020,4110 4110,4410

894
00:27:39,050 --> 00:27:40,640
addresses will look something like
4410,4830 4830,4980 4980,5130 5130,5490 5490,6000

895
00:27:40,670 --> 00:27:42,080
a zero X eight zero
6030,6240 6240,6570 6570,6960 6960,7170 7170,7440

896
00:27:42,080 --> 00:27:43,480
zero zero.
7440,7710 7710,8400

897
00:27:43,650 --> 00:27:45,340
Um, some numbers.
90,600 630,870 870,1620

898
00:27:46,240 --> 00:27:48,730
Those addresses you can jump
180,1140 1140,2070 2070,2220 2220,2370 2370,2670

899
00:27:48,730 --> 00:27:50,410
straight into current dsm and
2670,3000 3000,3360 3360,3690 3690,4230 4230,4350

900
00:27:50,410 --> 00:27:52,570
find the exact line of
4350,4650 4650,4740 4740,5370 5460,6300 6300,6510

901
00:27:52,570 --> 00:27:53,710
assembly where the problem is
6510,6900 6900,7080 7080,7170 7170,7530 7530,7650

902
00:27:53,710 --> 00:27:54,670
occurring, and then you can
7650,8130 8130,8250 8250,8370 8370,8490 8490,8610

903
00:27:54,670 --> 00:27:56,050
set your break points accordingly,
8610,8790 8790,8910 8910,9120 9120,9360 9360,9990

904
00:27:56,410 --> 00:27:58,120
but for now a the
10350,10710 10710,10800 10800,11220 11400,11700 11700,12060

905
00:27:58,120 --> 00:28:00,100
top window in tty is
12060,12390 12390,12870 12870,13080 13080,13710 13710,14040

906
00:28:00,100 --> 00:28:01,750
source, and if we want
14040,14640 14640,14790 14790,14940 14940,15330 15360,15690

907
00:28:01,750 --> 00:28:03,790
to look at specifically the
15690,15870 15870,16110 16110,16530 16920,17580 17580,17730

908
00:28:03,790 --> 00:28:05,500
assembly we can do layout
17730,18210 18210,18330 18330,18420 18420,18630 18630,19440

909
00:28:05,950 --> 00:28:08,230
in gba 's, um and
19890,20280 20280,21180 21180,21330 21330,21690 21990,22170

910
00:28:08,230 --> 00:28:09,520
that'll give us all of
22170,22650 22650,22830 22830,23160 23160,23370 23370,23460

911
00:28:09,520 --> 00:28:11,920
the assembly instructions and um,
23460,23550 23550,24000 24000,24810 25080,25560 25650,25860

912
00:28:11,920 --> 00:28:13,060
we can also look at
25860,26010 26010,26130 26130,26700 26700,26940 26940,27000

913
00:28:13,060 --> 00:28:14,200
the registers if we type
27000,27120 27120,27720 27720,27810 27810,27900 27900,28140

914
00:28:14,200 --> 00:28:15,910
layout, reggie will get assembly
28140,28470 28470,28770 28770,28860 28860,29130 29130,29850

915
00:28:16,180 --> 00:28:18,070
and registers and if you
30120,30510 30510,31320 31560,31770 31770,31890 31890,32010

916
00:28:18,070 --> 00:28:19,660
find yourself why just scroll
32010,32190 32190,32640 32640,33120 33120,33270 33270,33600

917
00:28:19,660 --> 00:28:20,820
through things.
33600,33840 33840,34530

918
00:28:21,410 --> 00:28:22,220
Now that we have three
90,330 330,450 450,540 540,660 660,900

919
00:28:22,220 --> 00:28:23,420
Windows, we need to specify
900,1320 1320,1380 1380,1500 1500,1590 1590,2100

920
00:28:23,420 --> 00:28:24,470
which one is focused, so
2100,2310 2310,2460 2460,2580 2580,3030 3030,3150

921
00:28:24,470 --> 00:28:25,100
if I want to look
3150,3240 3240,3300 3300,3480 3480,3540 3540,3780

922
00:28:25,100 --> 00:28:26,120
for all the registers I'm
3780,3930 3930,4050 4050,4110 4110,4680 4680,4800

923
00:28:26,120 --> 00:28:27,640
going to focus reggie.
4800,4920 4920,4980 4980,5400 5400,5940

924
00:28:28,000 --> 00:28:29,170
And now my focus is
120,330 330,600 600,780 780,1170 1170,1290

925
00:28:29,170 --> 00:28:30,400
on the register window so
1290,1440 1440,1530 1530,1980 1980,2340 2340,2520

926
00:28:30,400 --> 00:28:30,920
I.
2520,2790

927
00:28:31,420 --> 00:28:32,680
Move the arrow keys or
0,390 390,480 480,750 750,1170 1170,1260

928
00:28:32,680 --> 00:28:34,510
scroll you'll start scrolling that
1260,1890 1980,2250 2250,2490 2490,2880 2880,3090

929
00:28:34,510 --> 00:28:35,160
window.
3090,3540

930
00:28:35,660 --> 00:28:37,010
Now we can focus on
480,780 780,900 900,1050 1050,1440 1440,1830

931
00:28:37,520 --> 00:28:38,980
the assembly window.
2340,2520 2520,2970 2970,3630

932
00:28:39,580 --> 00:28:40,480
And once we're here, we
180,420 420,600 600,690 690,960 960,1080

933
00:28:40,480 --> 00:28:41,230
can see all of the
1080,1200 1200,1440 1440,1620 1620,1710 1710,1830

934
00:28:41,230 --> 00:28:43,300
things, um, so let's see,
1830,2400 2640,3240 3240,3450 3450,3690 3690,3900

935
00:28:43,300 --> 00:28:44,350
we can see in the
3900,4020 4020,4170 4170,4590 4590,4860 4860,4950

936
00:28:44,350 --> 00:28:46,180
registry register window, we can
4950,5610 5610,6120 6120,6540 6540,6630 6630,6780

937
00:28:46,180 --> 00:28:47,530
see that t zero contains
6780,6930 6930,7110 7110,7260 7260,7710 7710,8130

938
00:28:47,530 --> 00:28:49,060
this value we can see
8130,8370 8370,9090 9150,9450 9450,9540 9540,9660

939
00:28:49,060 --> 00:28:51,250
that a0 contains this value.
9660,9840 9840,10440 10440,10890 10890,11130 11130,11850

940
00:28:51,840 --> 00:28:53,340
And as we step through
120,570 570,870 870,1020 1020,1350 1350,1620

941
00:28:53,340 --> 00:28:55,140
the assembly, we can watch
1620,1770 1770,2400 2400,2520 2520,2760 2760,3420

942
00:28:55,170 --> 00:28:57,810
c OK, A T zero
3450,3810 3810,4410 4500,5280 5430,5700 5700,6090

943
00:28:57,810 --> 00:28:58,890
just got the value of
6090,6390 6390,6630 6630,6720 6720,7050 7050,7170

944
00:28:58,890 --> 00:29:00,240
a0 which was five and
7170,7650 7650,7800 7800,8040 8040,8430 8430,8520

945
00:29:00,240 --> 00:29:02,100
it's nicely highlighted the register
8520,8850 8850,9180 9180,9840 9840,9900 9900,10380

946
00:29:02,100 --> 00:29:03,240
that's changed.
10380,10620 10620,11340

947
00:29:03,280 --> 00:29:04,810
Here and we can just
60,690 810,1170 1170,1260 1260,1380 1380,1590

948
00:29:04,810 --> 00:29:06,130
keep remember if we push
1590,1860 1890,2370 2370,2640 2640,2730 2730,2910

949
00:29:06,130 --> 00:29:08,020
enter we get the most
2910,3300 3300,3420 3420,3630 3630,4140 4230,4800

950
00:29:08,020 --> 00:29:09,880
recently executed instructions so we
4800,5250 5250,5790 5790,6420 6420,6540 6540,6660

951
00:29:09,880 --> 00:29:11,680
can go through, we set
6660,6900 6900,7110 7110,7740 7770,8220 8220,8460

952
00:29:11,680 --> 00:29:13,150
a zero to zero and
8460,8610 8610,8850 8850,8970 8970,9660 9810,9930

953
00:29:13,150 --> 00:29:13,870
now we can just kind
9930,10110 10110,10230 10230,10350 10350,10500 10500,10650

954
00:29:13,870 --> 00:29:15,220
of wash ourselves go through
10650,10710 10710,11010 11010,11520 11520,11700 11700,12000

955
00:29:15,220 --> 00:29:17,740
this loop and.
12000,12210 12210,13020 13230,13710

956
00:29:17,890 --> 00:29:20,170
Some of the values and
30,360 360,510 510,600 600,1410 2160,2310

957
00:29:20,170 --> 00:29:21,190
then this is like a
2310,2580 2580,2730 2730,2850 2850,3000 3000,3330

958
00:29:21,190 --> 00:29:23,100
complete new toy function.
3330,3840 3870,4020 4020,4440 4440,4980

959
00:29:23,630 --> 00:29:26,720
Then continue and live our
570,930 930,1680 1920,2460 3330,3540 3540,3660

960
00:29:26,720 --> 00:29:27,590
lives and if you're ever
3660,3990 3990,4110 4110,4200 4200,4320 4320,4530

961
00:29:27,590 --> 00:29:30,530
curious about what kind of
4530,5040 5040,5760 6630,7050 7050,7320 7320,7470

962
00:29:30,530 --> 00:29:31,820
break points, you've set or
7470,7770 7770,8160 8160,8340 8340,8640 8640,8760

963
00:29:31,820 --> 00:29:32,990
you lose track of what
8760,8880 8880,9150 9150,9510 9510,9720 9720,9930

964
00:29:32,990 --> 00:29:34,370
you were doing, if you
9930,10080 10080,10200 10200,10740 10920,11190 11190,11310

965
00:29:34,370 --> 00:29:37,040
type info a break or
11310,11580 11580,12360 12540,12780 12780,13470 13680,13980

966
00:29:37,040 --> 00:29:38,990
break points, you can see
13980,14220 14220,14880 15000,15330 15330,15480 15480,15930

967
00:29:38,990 --> 00:29:39,860
all of the break points
15930,16170 16170,16260 16260,16350 16350,16590 16590,16800

968
00:29:39,860 --> 00:29:40,550
that you said in your
16800,16890 16890,17040 17040,17250 17250,17340 17340,17490

969
00:29:40,550 --> 00:29:42,380
code and um you can
17490,18060 18330,18870 18870,19110 19110,19230 19230,19320

970
00:29:42,380 --> 00:29:43,520
even see okay, this break
19320,19560 19560,19920 19920,20100 20100,20280 20280,20460

971
00:29:43,520 --> 00:29:44,510
point has already been hit
20460,20670 20670,20820 20820,21090 21090,21240 21240,21450

972
00:29:44,510 --> 00:29:46,010
one time and you get
21450,21720 21720,22350 22560,22710 22710,22800 22800,22950

973
00:29:46,010 --> 00:29:48,140
lots of useful information doing
22950,23160 23160,23250 23250,23580 23580,24450 24630,25080

974
00:29:48,140 --> 00:29:48,800
that.
25080,25500

975
00:29:49,410 --> 00:29:50,910
If you don't want to
150,630 630,1140 1140,1410 1410,1560 1560,1650

976
00:29:50,910 --> 00:29:52,080
have the register window, but
1650,1830 1830,1890 1890,2340 2340,2730 2730,2820

977
00:29:52,080 --> 00:29:53,130
you do want to look
2820,2940 2940,3270 3270,3450 3450,3540 3540,3870

978
00:29:53,130 --> 00:29:55,410
at the registers a info
3870,4050 4050,4140 4140,5130 5250,5520 5520,6150

979
00:29:55,410 --> 00:29:57,450
rage or info registers or
6150,6750 6780,7140 7140,7380 7380,8040 8040,8190

980
00:29:57,450 --> 00:29:58,620
ire edge or any of
8190,8550 8550,8850 8850,9030 9030,9240 9240,9360

981
00:29:58,620 --> 00:30:00,880
the numerous GDP.
9360,9720 9780,10560 10560,11370

982
00:30:00,980 --> 00:30:02,960
A shorten ings will bring
120,630 630,990 990,1500 1500,1890 1890,2100

983
00:30:02,960 --> 00:30:04,130
up the register window fall.
2100,2250 2250,2340 2340,2670 2670,3000 3000,3270

984
00:30:05,900 --> 00:30:07,910
So with that is there
780,1740 2130,2400 2400,2550 2550,2610 2610,2790

985
00:30:07,910 --> 00:30:09,050
any are there any questions
2790,2970 2970,3090 3090,3210 3210,3420 3420,3930

986
00:30:09,050 --> 00:30:11,480
about ged, simple ones I
3930,4320 4320,5280 5520,5880 5880,6300 6300,6360

987
00:30:11,480 --> 00:30:13,280
know it's been a there's
6360,6510 6510,6690 6690,7080 7380,7890 7920,8160

988
00:30:13,280 --> 00:30:14,480
been lots of post some
8160,8490 8520,8820 8820,8910 8910,9180 9180,9360

989
00:30:14,480 --> 00:30:16,310
shots about it so now's
9360,9720 9720,10050 10050,10200 10200,10560 10860,11190

990
00:30:16,310 --> 00:30:17,000
a good time to just
11190,11250 11250,11370 11370,11610 11610,11700 11700,11880

991
00:30:17,000 --> 00:30:19,220
ask some straightforward well I'll
11880,12360 12540,12810 12810,13260 13260,13860 13890,14100

992
00:30:19,220 --> 00:30:21,230
be showing more usage as
14100,14220 14220,14580 14580,15180 15420,15960 15960,16110

993
00:30:21,230 --> 00:30:22,940
dp, what command did you
16110,16770 16980,17280 17280,17610 17610,17700 17700,17820

994
00:30:22,940 --> 00:30:24,020
use to open the multiple
17820,18060 18060,18150 18150,18450 18450,18510 18510,18900

995
00:30:24,020 --> 00:30:25,220
Windows so I use t
18900,19380 19380,19530 19530,19680 19680,19920 19920,20100

996
00:30:25,220 --> 00:30:26,510
Max, so I can show
20100,20610 20700,20940 20940,21000 21000,21150 21150,21390

997
00:30:26,510 --> 00:30:28,730
just from scratch, um, if
21390,21600 21600,21810 21810,22680 22800,23430 23430,23610

998
00:30:28,730 --> 00:30:30,140
we go here I open
23610,23790 23790,24120 24120,24570 24570,24750 24750,25020

999
00:30:30,140 --> 00:30:31,730
a new terminal so here's
25020,25080 25080,25230 25230,25920 26130,26340 26340,26610

1000
00:30:31,730 --> 00:30:33,080
just a blank terminal.
26610,26760 26760,26820 26820,27150 27150,27720

1001
00:30:33,730 --> 00:30:35,170
If you typed emacs and
570,780 780,900 900,1350 1350,1860 1860,2010

1002
00:30:35,170 --> 00:30:36,580
this is available on a
2010,2130 2130,2250 2250,2730 2730,2910 2910,3420

1003
00:30:37,150 --> 00:30:38,100
um.
3990,4680

1004
00:30:40,110 --> 00:30:41,430
I'll address the next question
90,510 510,840 840,900 900,1080 1080,1410

1005
00:30:41,430 --> 00:30:42,660
in a second, so now
1410,1500 1500,1560 1560,1980 2160,2400 2400,2640

1006
00:30:42,660 --> 00:30:43,530
I'm in tx, which you
2640,2790 2790,2910 2910,3270 3270,3390 3390,3510

1007
00:30:43,530 --> 00:30:45,240
can tell by this green
3510,3630 3630,3930 3930,4170 4170,4770 4770,5220

1008
00:30:45,240 --> 00:30:47,310
bar at the bottom and
5220,5610 5610,5730 5730,5820 5820,6450 6630,7290

1009
00:30:47,310 --> 00:30:48,810
if you want to get
7290,7440 7440,7590 7590,7980 7980,8370 8370,8790

1010
00:30:48,810 --> 00:30:49,680
so there's a couple ways
8790,9030 9030,9180 9180,9240 9240,9480 9480,9660

1011
00:30:49,680 --> 00:30:50,580
you can do multiple Windows
9660,9720 9720,9810 9810,9930 9930,10260 10260,10560

1012
00:30:50,580 --> 00:30:52,230
and thibeault team UPS, um,
10560,10680 10680,11130 11160,11400 11400,11790 11850,12210

1013
00:30:52,230 --> 00:30:53,220
if you're.
12210,12450 12450,12960

1014
00:30:53,300 --> 00:30:55,040
So you can type control
120,420 420,540 540,660 660,1110 1350,1860

1015
00:30:55,040 --> 00:30:57,230
bc and um I know
1860,2490 2490,2970 3120,3450 3450,3870 3870,4050

1016
00:30:57,230 --> 00:30:58,580
that sometimes if you're used
4050,4260 4260,4920 4920,5070 5070,5220 5220,5400

1017
00:30:58,580 --> 00:30:59,570
to using emacs that will
5400,5460 5460,5700 5700,6120 6120,6270 6270,6390

1018
00:30:59,570 --> 00:31:00,440
make a lot of sense,
6390,6570 6570,6600 6600,6780 6780,6870 6870,7260

1019
00:31:00,440 --> 00:31:03,170
but normal people who don't
7260,7590 7770,9180 9180,9630 9630,9780 9780,9990

1020
00:31:03,170 --> 00:31:05,840
use emacs that's hidden control
9990,10140 10140,10770 10830,11520 11550,12000 12000,12660

1021
00:31:05,840 --> 00:31:07,190
and then d and then
12660,12750 12750,12960 12960,13500 13500,13740 13740,14010

1022
00:31:07,190 --> 00:31:08,480
hitting c on its own
14010,14400 14400,14790 14790,14940 14940,15060 15060,15300

1023
00:31:08,480 --> 00:31:09,950
after words that will get
15300,15630 15630,16080 16140,16470 16470,16590 16590,16770

1024
00:31:09,950 --> 00:31:11,180
you a second window which
16770,16920 16920,17010 17010,17370 17370,17820 17820,18000

1025
00:31:11,180 --> 00:31:12,590
you can then navigate between
18000,18120 18120,18240 18240,18420 18420,18900 18900,19410

1026
00:31:12,590 --> 00:31:13,910
with control b and n
19410,19560 19560,20070 20070,20400 20400,20550 20550,20730

1027
00:31:13,910 --> 00:31:16,070
pi control, b and n
20730,21300 21360,21900 21900,22050 22050,22200 22350,22890

1028
00:31:16,280 --> 00:31:17,750
to go previous and next
23100,23310 23310,23490 23490,24000 24000,24120 24120,24570

1029
00:31:17,810 --> 00:31:18,980
yeah and David just posted
24630,24900 24900,25050 25050,25350 25350,25500 25500,25800

1030
00:31:18,980 --> 00:31:20,120
that emacs cheat sheet which
25800,25950 25950,26250 26250,26520 26520,26760 26760,26940

1031
00:31:20,120 --> 00:31:21,740
is useful and if you
26940,27150 27150,27750 28170,28380 28380,28470 28470,28560

1032
00:31:21,740 --> 00:31:22,850
want to split the Windows
28560,28740 28740,28800 28800,29160 29160,29250 29250,29670

1033
00:31:22,850 --> 00:31:23,990
I think it's control b
29670,29760 29760,29910 29910,30090 30090,30540 30540,30810

1034
00:31:23,990 --> 00:31:25,370
and then the percent sign
30810,30900 30900,31170 31200,31320 31320,31770 31770,32190

1035
00:31:25,370 --> 00:31:27,380
will split them, um.
32190,32310 32310,32640 32640,33090 33300,33960

1036
00:31:27,900 --> 00:31:30,270
Vertically, and then sing a
60,960 960,1170 1170,1770 1830,2250 2250,2430

1037
00:31:30,270 --> 00:31:31,950
double control b and double
2430,2820 2820,3210 3210,3540 3540,3810 3810,4110

1038
00:31:31,950 --> 00:31:34,060
quote will split them.
4110,4620 4620,5040 5040,5430 5430,5970

1039
00:31:34,090 --> 00:31:36,370
Um, horizontally, and so that's
90,360 360,1050 1800,2100 2100,2190 2190,2370

1040
00:31:36,370 --> 00:31:37,180
how we get them if
2370,2490 2490,2580 2580,2730 2730,2820 2820,3180

1041
00:31:37,180 --> 00:31:37,870
we're in this state, we
3180,3330 3330,3420 3420,3570 3570,3780 3780,3870

1042
00:31:37,870 --> 00:31:39,460
can use control b and
3870,4020 4020,4170 4170,4500 4500,4950 5130,5460

1043
00:31:39,460 --> 00:31:41,500
o to jump between our
5460,5970 6120,6330 6330,6570 6570,6930 6930,7500

1044
00:31:41,620 --> 00:31:44,440
Windows so that's that's how
7620,8370 8940,9120 9120,9810 10110,10350 10350,10440

1045
00:31:44,440 --> 00:31:45,790
I got multiple Windows yeah
10440,10530 10530,10770 10770,11160 11160,11670 11670,11790

1046
00:31:45,790 --> 00:31:47,680
I don't care I'm.
11790,11850 11850,11970 11970,12330 12510,13410

1047
00:31:47,970 --> 00:31:49,770
And then a mad asked
330,540 540,990 1020,1260 1260,1530 1530,2130

1048
00:31:49,770 --> 00:31:51,720
why is displaying assembly addresses
2130,2490 2490,2760 2760,3180 3180,3570 3570,4080

1049
00:31:51,720 --> 00:31:53,010
again instead of c line
4080,4500 4500,4860 4860,4920 4920,5130 5130,5370

1050
00:31:53,010 --> 00:31:55,950
numbers, um, so because z
5370,5970 6030,6420 6420,6930 6960,7650 7650,8310

1051
00:31:55,950 --> 00:31:57,060
function.
8310,9150

1052
00:31:58,010 --> 00:31:59,060
So if we go back
750,960 960,1050 1050,1140 1140,1500 1500,1800

1053
00:31:59,060 --> 00:32:01,250
to the assembly function, this
1800,2130 2130,2580 2610,3030 3030,3660 3720,3990

1054
00:32:01,250 --> 00:32:02,930
is implemented entirely in assembly
3990,4110 4110,4530 4530,5040 5040,5130 5130,5670

1055
00:32:02,930 --> 00:32:03,740
and not at all in
5670,5850 5850,6030 6030,6150 6150,6330 6330,6480

1056
00:32:03,740 --> 00:32:04,970
c and so there just
6480,6960 7080,7350 7350,7440 7440,7530 7530,7710

1057
00:32:04,970 --> 00:32:06,500
aren't any associated c line
7710,8010 8010,8250 8250,8820 8820,9030 9030,9240

1058
00:32:06,500 --> 00:32:07,660
numbers for this.
9240,9630 9630,9750 9750,10230

1059
00:32:07,850 --> 00:32:10,940
Um, if we were to
90,720 1230,1680 1680,1830 1830,2220 2220,3180

1060
00:32:10,940 --> 00:32:13,070
set a break point, so
3180,3480 3480,3570 3570,3930 3930,4650 4800,5310

1061
00:32:13,250 --> 00:32:14,120
if you tried to delete
5490,5670 5670,5760 5760,5910 5910,5970 5970,6360

1062
00:32:14,120 --> 00:32:14,780
you will delete all your
6360,6420 6420,6510 6510,6780 6780,6900 6900,7020

1063
00:32:14,780 --> 00:32:17,030
break points, so I cleared
7020,7230 7230,7800 8220,8700 8700,8880 8910,9270

1064
00:32:17,030 --> 00:32:17,840
the old one if I
9270,9330 9330,9570 9570,9840 9840,10020 10020,10080

1065
00:32:17,840 --> 00:32:19,400
now set a break point
10080,10320 10320,10830 10830,10860 10860,11220 11220,11640

1066
00:32:19,400 --> 00:32:20,840
in demo one, so that's
11640,11940 11970,12330 12330,12750 12750,12870 12870,13080

1067
00:32:20,840 --> 00:32:22,310
a key break point and
13080,13170 13170,13470 13470,13710 13710,14100 14370,14550

1068
00:32:22,310 --> 00:32:25,190
continue and run this now
14550,15420 15900,16110 16110,16290 16290,16920 16980,17430

1069
00:32:25,190 --> 00:32:26,120
if I go here and
17430,17580 17580,17670 17670,17850 17850,18210 18210,18360

1070
00:32:26,120 --> 00:32:27,770
type layout, split I'll get
18360,18600 18600,18990 18990,19500 19530,19830 19830,20010

1071
00:32:27,770 --> 00:32:29,300
the c and the assembly.
20010,20100 20100,20520 20520,20760 20760,20880 20880,21540

1072
00:32:29,970 --> 00:32:31,020
Um, or if I just
90,450 450,660 660,750 750,870 870,1140

1073
00:32:31,020 --> 00:32:32,040
want to see source I
1140,1380 1380,1470 1470,1680 1680,2070 2070,2160

1074
00:32:32,040 --> 00:32:33,090
can do layout source and
2160,2280 2280,2400 2400,2730 2730,3090 3090,3210

1075
00:32:33,090 --> 00:32:33,990
I'll just get to see.
3210,3330 3330,3540 3540,3690 3690,3780 3780,4110

1076
00:32:35,440 --> 00:32:36,640
So that's a that's what's
420,630 630,1020 1020,1260 1260,1470 1470,1620

1077
00:32:36,640 --> 00:32:38,170
going on, it's just a
1620,1860 1860,2070 2070,2160 2160,2400 2400,3150

1078
00:32:38,170 --> 00:32:39,190
quirk of the fact that
3150,3480 3480,3600 3600,3720 3720,4020 4020,4170

1079
00:32:39,190 --> 00:32:40,630
this doesn't have associated c
4170,4320 4320,4620 4620,4830 4830,5430 5430,5610

1080
00:32:40,630 --> 00:32:41,410
code and so we don't
5610,5880 5880,6000 6000,6090 6090,6210 6210,6390

1081
00:32:41,410 --> 00:32:43,100
see c line numbers.
6390,6570 6570,6840 6840,7050 7050,7560

1082
00:32:46,270 --> 00:32:47,950
Any other any other questions
90,330 330,810 810,990 990,1110 1110,1770

1083
00:32:47,980 --> 00:32:49,900
about G D B team
1800,2280 2280,2400 2400,2550 2550,3270 3330,3720

1084
00:32:49,900 --> 00:32:50,960
ox.
3720,4590

1085
00:32:51,400 --> 00:32:52,720
And that sort of thing
120,540 540,900 900,1080 1080,1170 1170,1440

1086
00:32:53,080 --> 00:32:54,370
so layout split is the
1800,2130 2130,2580 2580,2910 2910,3030 3030,3090

1087
00:32:54,370 --> 00:32:55,360
one that you use to
3090,3330 3330,3510 3510,3600 3600,3930 3930,4080

1088
00:32:55,360 --> 00:32:56,980
bring up this extra window
4080,4350 4350,4590 4590,4920 4920,5310 5310,5700

1089
00:32:56,980 --> 00:32:58,420
of the source and assembling
5700,5880 5880,6030 6030,6450 6450,6540 6540,7140

1090
00:32:58,420 --> 00:33:00,130
so downright yes yes, so
7140,7350 7350,7920 7920,8340 8340,8580 8580,8850

1091
00:33:00,130 --> 00:33:02,680
layout a few layouts split
8850,9480 9480,9870 10380,10650 10650,11040 11040,11400

1092
00:33:02,680 --> 00:33:04,240
that'll get you source and
11400,11760 11760,11970 11970,12240 12270,12780 12780,12960

1093
00:33:04,240 --> 00:33:05,830
assembly layout source will get
12960,13560 13560,13950 13950,14310 14310,14400 14400,14550

1094
00:33:05,830 --> 00:33:07,330
you just source asf will
14550,14640 14640,14880 14880,15450 15450,15960 15960,16050

1095
00:33:07,330 --> 00:33:08,920
get you just assembly and
16050,16200 16200,16290 16290,16500 16500,17130 17250,17640

1096
00:33:08,920 --> 00:33:10,090
the registers are their own
17640,17730 17730,18330 18330,18420 18420,18600 18600,18810

1097
00:33:10,090 --> 00:33:11,260
thing where you type layout,
18810,19020 19020,19260 19260,19350 19350,19620 19620,19980

1098
00:33:11,260 --> 00:33:12,860
red I think yeah.
19980,20460 20460,20580 20580,20880 20880,21360

1099
00:33:13,070 --> 00:33:13,880
That will bring up the
90,270 270,420 420,660 660,810 810,900

1100
00:33:13,880 --> 00:33:16,790
registers, but unfortunately I don't
900,1560 1560,1860 2280,3240 3240,3540 3540,3810

1101
00:33:16,790 --> 00:33:17,750
know of a way to
3810,4200 4200,4290 4290,4380 4380,4620 4620,4770

1102
00:33:17,750 --> 00:33:18,580
get.
4770,5280

1103
00:33:18,750 --> 00:33:20,190
To register the assembly and
90,210 210,630 630,780 780,1350 1350,1530

1104
00:33:20,190 --> 00:33:21,060
the c code all at
1530,1590 1590,1800 1800,2130 2130,2310 2310,2400

1105
00:33:21,060 --> 00:33:22,230
the same time outside of
2400,2460 2460,2730 2730,3120 3120,3480 3480,3570

1106
00:33:22,230 --> 00:33:24,180
using infrared with layout split.
3570,3930 3930,4740 4740,4890 4890,5220 5220,5520

1107
00:33:24,990 --> 00:33:26,910
I have a question, so
90,270 270,450 450,510 510,1050 1500,2010

1108
00:33:26,940 --> 00:33:28,200
when we set the back
2040,2430 2430,2550 2550,2760 2760,2940 2940,3300

1109
00:33:28,200 --> 00:33:30,150
break point a align right,
3300,3600 3600,4020 4020,4290 4320,4920 4920,5250

1110
00:33:30,180 --> 00:33:30,980
um.
5280,5790

1111
00:33:31,090 --> 00:33:33,340
It displays the address of
90,450 450,1050 1050,1260 1260,1950 1980,2340

1112
00:33:33,340 --> 00:33:34,960
the like in this case
2340,2940 2970,3270 3270,3450 3450,3630 3630,3960

1113
00:33:34,960 --> 00:33:36,040
break point to add to
3960,4230 4230,4530 4530,4680 4680,4950 4950,5040

1114
00:33:36,040 --> 00:33:38,290
xerox a time sci-fi for
5040,5760 5790,6030 6030,6510 6570,6990 6990,7290

1115
00:33:39,250 --> 00:33:41,110
what any instruction might have
8250,8700 8790,9060 9060,9660 9660,9900 9900,10110

1116
00:33:41,110 --> 00:33:44,170
multiple um, any line of
10110,10950 11070,11610 11640,12150 12210,13080 13080,13170

1117
00:33:44,170 --> 00:33:45,550
code in c might have
13170,13470 13470,13590 13590,13890 13890,14370 14370,14550

1118
00:33:45,550 --> 00:33:47,650
multiple instructions, so which one
14550,14970 14970,15900 15960,16230 16230,16470 16470,16650

1119
00:33:47,650 --> 00:33:49,750
does a show who shows
16650,17220 17250,17670 17670,18090 18210,18540 18540,18750

1120
00:33:49,750 --> 00:33:50,720
the first one.
18750,18840 18840,19110 19110,19320

1121
00:33:51,510 --> 00:33:53,790
And it's T U for
690,1020 1020,1830 1920,2220 2220,2640 2640,2970

1122
00:33:53,790 --> 00:33:54,870
the person who asked to
2970,3060 3060,3330 3330,3420 3420,3690 3690,4050

1123
00:33:54,870 --> 00:33:57,180
start tty I it's I
4050,4410 4410,5340 5520,5850 5850,6180 6180,6360

1124
00:33:57,180 --> 00:33:58,890
think it's tty enabled not
6360,6510 6510,6630 6630,7170 7170,7740 7770,8070

1125
00:33:58,890 --> 00:34:00,800
enabled to UI, sorry.
8070,8460 8460,8580 8580,8970 8970,9390

1126
00:34:01,070 --> 00:34:04,800
And I think yeah.
90,270 270,390 390,930 2550,3600

1127
00:34:05,570 --> 00:34:06,000
Yeah.
210,270

1128
00:34:08,450 --> 00:34:10,520
Um, yeah again there's a
750,1440 1470,2010 2010,2400 2400,2670 2670,2820

1129
00:34:10,520 --> 00:34:12,050
hundred cheat sheets out here
2820,3270 3270,3570 3570,3870 3870,4110 4110,4350

1130
00:34:12,050 --> 00:34:14,450
4G DB and forty bucks
4350,4680 4680,5400 5550,5940 5940,6450 6450,6750

1131
00:34:14,450 --> 00:34:15,140
as well so if you
6750,6840 6840,7110 7110,7230 7230,7290 7290,7440

1132
00:34:15,140 --> 00:34:16,760
ever find yourself lost I
7440,7710 7710,7890 7890,8250 8250,8670 8730,9060

1133
00:34:16,760 --> 00:34:18,260
T G D even has
9060,9390 9420,9750 9750,10080 10080,10350 10350,10560

1134
00:34:18,260 --> 00:34:19,780
its own inbuilt.
10560,10680 10680,11010 11010,11880

1135
00:34:19,770 --> 00:34:22,350
Um, it's own thing called
30,750 1470,1950 1950,2160 2160,2400 2400,2610

1136
00:34:22,350 --> 00:34:24,060
apropos 's, so if you
2610,3240 3240,3660 3810,4050 4050,4200 4200,4320

1137
00:34:24,060 --> 00:34:26,490
look for apropos sati UI,
4320,4530 4530,4680 4680,5370 5370,5970 5970,6750

1138
00:34:26,520 --> 00:34:28,080
it'll actually show you all
6780,7200 7200,7560 7560,7830 7830,8100 8100,8340

1139
00:34:28,080 --> 00:34:30,450
of the commands that a
8340,8490 8490,8760 8760,9840 9870,10440 10440,10710

1140
00:34:30,450 --> 00:34:32,160
involve to UI.
10710,11400 11400,11550 11550,12240

1141
00:34:33,310 --> 00:34:35,350
So yeah, um, this can
90,720 780,1530 1530,1530 1710,2010 2010,2130

1142
00:34:35,350 --> 00:34:36,580
be quite useful, but it
2130,2250 2250,2520 2520,3030 3030,3180 3180,3360

1143
00:34:36,580 --> 00:34:37,390
can also be a little
3360,3480 3480,3750 3750,3870 3870,3960 3960,4170

1144
00:34:37,390 --> 00:34:39,720
bit overwhelming I'm.
4170,4380 4380,5190 5400,6240

1145
00:34:39,820 --> 00:34:40,930
If you do I propose
120,330 330,450 450,570 570,750 750,1230

1146
00:34:40,930 --> 00:34:42,040
that it will give you
1230,1680 1680,1920 1920,2040 2040,2220 2220,2340

1147
00:34:42,040 --> 00:34:43,780
even more information I think.
2340,2550 2550,2880 2880,3450 3450,3570 3570,4080

1148
00:34:44,610 --> 00:34:46,900
Um I don't remember.
90,720 1110,1140 1170,1770 1770,2280

1149
00:34:47,360 --> 00:34:48,410
I I don't use it
120,360 360,720 720,930 930,1080 1080,1170

1150
00:34:48,410 --> 00:34:49,820
often myself, but if you
1170,1470 1470,1920 1920,2070 2070,2460 2460,2580

1151
00:34:49,820 --> 00:34:51,320
do find or if you
2580,2850 2850,3300 3450,3720 3720,3810 3810,4080

1152
00:34:51,320 --> 00:34:52,250
forget the exact way to
4080,4380 4380,4440 4440,4830 4830,4920 4920,5010

1153
00:34:52,250 --> 00:34:53,870
type the command in gbp
5010,5220 5220,5310 5310,5820 5820,6240 6240,6630

1154
00:34:53,870 --> 00:34:54,470
and you don't feel like
6630,6720 6720,6810 6810,6990 6990,7110 7110,7230

1155
00:34:54,470 --> 00:34:56,390
googling and apropos's will will
7230,7620 7620,7710 7710,8280 8280,8280 8610,9150

1156
00:34:56,390 --> 00:34:57,770
often be able to find
9150,9390 9390,10080 10080,10230 10230,10410 10410,10530

1157
00:34:57,770 --> 00:34:59,000
exactly what you're looking for,
10530,10800 10800,11220 11220,11340 11340,11460 11460,11760

1158
00:34:59,000 --> 00:34:59,960
in addition to a whole
11760,12060 12060,12180 12180,12540 12540,12660 12660,12720

1159
00:34:59,960 --> 00:35:00,860
bunch of stuff you are
12720,12900 12900,13110 13110,13200 13200,13470 13470,13620

1160
00:35:00,860 --> 00:35:01,840
looking for.
13620,13710 13710,14010 14010,14280

1161
00:35:02,240 --> 00:35:03,120
I'm.
180,660

1162
00:35:04,260 --> 00:35:05,670
Yeah, so this is actually
120,510 510,720 720,1230 1230,1320 1320,1530

1163
00:35:05,670 --> 00:35:07,290
quite useful ged is extremely
1530,1770 1770,1980 1980,2520 2520,2640 2640,3150

1164
00:35:07,290 --> 00:35:08,910
well documented as well so
3150,3360 3360,3900 3900,4020 4020,4290 4320,4770

1165
00:35:09,150 --> 00:35:10,590
um, yeah, if you ever
5010,5400 5790,5910 5910,6180 6180,6270 6270,6450

1166
00:35:10,590 --> 00:35:12,630
find yourself lost, you know.
6450,6630 6630,6960 6960,7440 7980,8160 8160,8490

1167
00:35:12,930 --> 00:35:14,380
Google is your friend.
90,570 570,630 630,750 750,1140

1168
00:35:15,070 --> 00:35:16,240
I'm.
330,1140

1169
00:35:16,800 --> 00:35:18,000
So now that we've kind
120,330 330,480 480,600 600,1110 1110,1320

1170
00:35:18,000 --> 00:35:20,220
of been over assembly and
1320,1410 1410,1560 1560,2130 2130,3000 3000,3540

1171
00:35:20,220 --> 00:35:22,050
and risk five and these
3540,3930 3930,4200 4200,4860 4860,5190 5190,5370

1172
00:35:22,050 --> 00:35:23,190
sort of things I want
5370,5550 5550,5640 5640,6060 6120,6360 6360,6510

1173
00:35:23,190 --> 00:35:23,910
to dive a little bit
6510,6570 6570,6810 6810,6870 6870,7050 7050,7230

1174
00:35:23,910 --> 00:35:26,430
more into the specifics of
7230,7560 7560,7740 7740,7860 7860,8820 9060,9750

1175
00:35:26,430 --> 00:35:28,020
what you you really need
9750,10050 10050,10740 10740,10980 10980,11190 11190,11340

1176
00:35:28,020 --> 00:35:30,090
to know for the lab
11340,11430 11430,11790 11790,12180 12180,12600 12900,13410

1177
00:35:30,090 --> 00:35:32,250
coming up and also it'll
13410,13740 13740,14130 14310,14580 14580,15060 15060,15570

1178
00:35:32,250 --> 00:35:32,820
be a little bit of
15570,15660 15660,15720 15720,15900 15900,16020 16020,16140

1179
00:35:32,820 --> 00:35:34,050
review from the document that
16140,16470 16470,16650 16650,16740 16740,17220 17220,17370

1180
00:35:34,050 --> 00:35:36,300
you've of course, diligent students
17370,17580 17580,18180 18180,18570 18570,18990 18990,19620

1181
00:35:36,720 --> 00:35:38,760
read through thoroughly.
20040,20430 20430,20910 20940,21750

1182
00:35:38,890 --> 00:35:41,200
A in preparation for this
90,810 810,1140 1140,1830 1830,1980 1980,2400

1183
00:35:41,200 --> 00:35:42,240
lecture.
2400,2910

1184
00:35:42,700 --> 00:35:45,160
Um, so yeah, this table
120,750 1320,1800 1800,1980 1980,2160 2160,2580

1185
00:35:45,160 --> 00:35:46,270
will of course be a
2580,2730 2730,2820 2820,3150 3150,3450 3450,3690

1186
00:35:46,270 --> 00:35:47,860
wildly familiar to you all
3690,4140 4140,4530 4530,4650 4650,4800 4800,5280

1187
00:35:47,860 --> 00:35:50,500
and um from from both
5280,5910 5940,6570 6990,7440 7440,7740 7740,7920

1188
00:35:50,500 --> 00:35:51,670
double four and from what
7920,8250 8250,8640 8640,8790 8790,8940 8940,9090

1189
00:35:51,670 --> 00:35:53,230
you've read, and this is
9090,9300 9300,9690 9780,10230 10230,10410 10410,10650

1190
00:35:53,230 --> 00:35:55,060
the table of registers and
10650,10740 10740,11250 11250,11460 11460,12090 12090,12480

1191
00:35:55,150 --> 00:35:59,200
registers are little locations on
12570,13470 13470,14130 14160,14760 14790,16110 16110,16620

1192
00:35:59,200 --> 00:36:02,110
the CPU around the processor.
16620,16860 16860,17760 17820,18540 18540,18630 18630,19530

1193
00:36:02,640 --> 00:36:04,710
Predefined that it can use
60,1050 1050,1350 1350,1470 1470,1680 1680,2130

1194
00:36:04,710 --> 00:36:06,870
to store values and this
2130,2400 2400,2880 2880,3600 3750,4140 4140,4290

1195
00:36:06,870 --> 00:36:09,600
is important because assembly operations
4290,4380 4380,4830 4830,5400 5430,6060 6060,7020

1196
00:36:09,600 --> 00:36:10,590
if we remember from the
7020,7440 7440,7560 7560,7830 7830,7950 7950,8010

1197
00:36:10,590 --> 00:36:12,600
assembly code, the jet assembly
8010,8340 8340,8760 8910,9180 9180,9570 9600,10020

1198
00:36:12,600 --> 00:36:14,250
doesn't operate on memory, it
10020,10350 10350,10860 10860,11130 11130,11520 11520,11670

1199
00:36:14,250 --> 00:36:15,750
operates on register, so when
11670,12150 12150,12300 12300,12780 12780,12990 12990,13170

1200
00:36:15,750 --> 00:36:16,650
we do add when we
13170,13290 13290,13500 13500,13860 13860,13980 13980,14070

1201
00:36:16,650 --> 00:36:18,990
do subtract we're operating on
14070,14190 14190,14820 14910,15210 15210,15900 15900,16410

1202
00:36:18,990 --> 00:36:20,820
registers, um.
16410,17130 17220,18000

1203
00:36:21,000 --> 00:36:22,050
And so what you often
120,330 330,510 510,690 690,810 810,1170

1204
00:36:22,050 --> 00:36:24,210
see as the pattern for
1170,1590 1590,1800 1800,1890 1890,2550 2580,3330

1205
00:36:24,240 --> 00:36:25,860
writing assembly is will have
3360,3870 3870,4440 4440,4590 4590,4710 4710,4980

1206
00:36:25,860 --> 00:36:27,270
some kind of a load,
4980,5220 5220,5490 5490,5640 5640,5700 5700,6390

1207
00:36:27,510 --> 00:36:30,060
so we'll load some value.
6630,6930 6930,7230 7230,7800 7800,8160 8160,9180

1208
00:36:30,550 --> 00:36:32,360
A to a register.
210,570 570,840 840,990 990,1740

1209
00:36:33,030 --> 00:36:34,560
And that value can be
90,780 810,1050 1050,1380 1380,1530 1530,1620

1210
00:36:34,560 --> 00:36:35,550
from memory, or it can
1620,1770 1770,2280 2280,2430 2430,2520 2520,2610

1211
00:36:35,550 --> 00:36:37,600
be from another register.
2610,2730 2730,2910 2910,3660 3660,4380

1212
00:36:38,340 --> 00:36:39,930
And, um, and here I'm
120,660 660,1140 1140,1470 1470,1650 1650,1710

1213
00:36:39,930 --> 00:36:40,950
referring to load in general,
1710,1980 1980,2070 2070,2310 2310,2400 2400,2730

1214
00:36:40,950 --> 00:36:43,020
not the load instruction, um.
2730,2910 2910,3000 3000,3210 3210,3780 3930,4800

1215
00:36:43,420 --> 00:36:45,060
And then we'll operate.
120,360 360,570 570,750 750,1500

1216
00:36:45,780 --> 00:36:47,970
So we'll perform some operation
60,300 300,690 690,1110 1110,1290 1290,2250

1217
00:36:48,090 --> 00:36:49,680
on the register and then
2370,2880 2880,2970 2970,3690 3690,3840 3840,3960

1218
00:36:49,680 --> 00:36:50,520
if we care about the
3960,4080 4080,4200 4200,4470 4470,4710 4710,4800

1219
00:36:50,520 --> 00:36:52,170
result of that operation outside
4800,5130 5130,5190 5190,5400 5400,6000 6000,6450

1220
00:36:52,170 --> 00:36:54,150
the return address, we will,
6450,6540 6540,6900 6900,7380 7560,8010 8010,8430

1221
00:36:54,150 --> 00:36:54,940
um.
8430,8970

1222
00:36:55,000 --> 00:36:58,570
We'll store that register to
120,360 360,1320 1350,1920 1950,2940 2940,3690

1223
00:36:58,690 --> 00:36:59,600
somewhere.
3810,4500

1224
00:37:00,590 --> 00:37:01,460
To some low key, they
90,270 270,480 480,600 600,810 810,960

1225
00:37:01,460 --> 00:37:02,810
will store that register to
960,1140 1140,1380 1380,1560 1560,2070 2070,2310

1226
00:37:02,810 --> 00:37:06,080
some location in memory or.
2310,2520 2520,3360 3660,4080 4080,4890 4890,5580

1227
00:37:06,920 --> 00:37:09,050
To another register and that's
180,360 360,690 690,1260 1470,1680 1680,2310

1228
00:37:09,050 --> 00:37:10,580
generally the way things work
2310,3030 3030,3120 3120,3270 3270,3480 3480,3840

1229
00:37:10,580 --> 00:37:12,560
and registers are the absolute
3840,4500 4500,5010 5010,5070 5070,5220 5220,5820

1230
00:37:12,560 --> 00:37:14,330
fastest way to perform any
5820,6300 6300,6480 6480,6540 6540,7140 7230,7590

1231
00:37:14,330 --> 00:37:16,010
sort of calculation a or
7590,7770 7770,7830 7830,8670 8760,9090 9090,9270

1232
00:37:16,010 --> 00:37:17,420
to access any value and
9270,9330 9330,9870 9870,10080 10080,10560 10560,10680

1233
00:37:17,420 --> 00:37:20,000
that's why it's important to
10680,10890 10890,11400 12180,12390 12390,12990 12990,13260

1234
00:37:20,000 --> 00:37:21,680
use them and also why
13260,13500 13500,13800 13800,13920 13920,14280 14280,14940

1235
00:37:21,770 --> 00:37:24,230
we prefer using registers overusing
15030,15330 15330,15840 15840,16200 16200,16920 16920,17490

1236
00:37:24,230 --> 00:37:25,520
memory, so if you remember
17490,17850 17850,18090 18090,18210 18210,18360 18360,18780

1237
00:37:25,520 --> 00:37:27,440
from the reading when we
18780,19170 19290,19590 19590,20160 20250,20550 20550,20700

1238
00:37:27,440 --> 00:37:28,730
call functions so you can
20700,21030 21030,21600 21600,21690 21690,21840 21840,21990

1239
00:37:28,730 --> 00:37:30,410
see here that registers a
21990,22230 22230,22560 22560,22740 22740,23430 23430,23670

1240
00:37:30,410 --> 00:37:31,780
zero to seven.
23670,24030 24030,24150 24150,24750

1241
00:37:32,450 --> 00:37:34,670
And in general when we
210,840 1650,1830 1830,2190 2190,2310 2310,2430

1242
00:37:34,670 --> 00:37:37,310
speak about registers we we
2430,2670 2670,2940 2940,3600 3600,4170 4380,5070

1243
00:37:37,310 --> 00:37:38,780
will be referring to them
5070,5430 5460,5850 5850,6300 6300,6390 6390,6540

1244
00:37:38,780 --> 00:37:40,610
by their API name, um,
6540,6720 6720,6930 6930,7320 7320,7770 7800,8370

1245
00:37:40,820 --> 00:37:42,560
not only is it less
8580,9330 9330,9570 9570,9720 9720,10140 10140,10320

1246
00:37:42,560 --> 00:37:43,760
confusing, it's just a standard
10320,10740 10740,10860 10860,11070 11070,11130 11130,11520

1247
00:37:43,760 --> 00:37:44,540
and it's also the way
11520,11640 11640,11760 11760,12030 12030,12150 12150,12300

1248
00:37:44,540 --> 00:37:45,920
that you'll write assembly code,
12300,12420 12420,12600 12600,12780 12780,13200 13200,13680

1249
00:37:45,950 --> 00:37:47,400
um this.
13710,14250 14280,15030

1250
00:37:47,530 --> 00:37:49,030
You know, these these actual
90,240 240,480 570,900 900,1140 1140,1590

1251
00:37:49,030 --> 00:37:50,920
numbers are not super important,
1590,2100 2100,2190 2190,2430 2430,2820 2820,3480

1252
00:37:50,980 --> 00:37:52,630
the only case where it
3540,4110 4110,4470 4470,4890 4890,5100 5100,5190

1253
00:37:52,630 --> 00:37:55,390
does matter is for the
5190,5490 5490,6030 6030,6750 6780,7710 7740,7950

1254
00:37:55,390 --> 00:37:57,310
compressed version of risc five
7950,8520 8520,8880 8880,9000 9000,9300 9300,9870

1255
00:37:57,310 --> 00:37:59,080
instructions and if you want
9870,10920 10920,11220 11220,11400 11400,11520 11520,11640

1256
00:37:59,080 --> 00:38:00,130
to know more about that,
11640,11700 11700,11850 11850,12030 12030,12330 12330,12690

1257
00:38:00,190 --> 00:38:01,780
um, feel free to read
12750,13380 13410,13920 13920,14070 14070,14130 14130,14340

1258
00:38:01,780 --> 00:38:02,770
up about it, the basic
14340,14490 14490,14760 14760,14910 14910,14970 14970,15330

1259
00:38:02,770 --> 00:38:04,510
idea is that risk five.
15330,15960 15960,16140 16140,16350 16350,16590 16590,17070

1260
00:38:04,890 --> 00:38:06,810
I'm normal instructions are 64
90,450 450,780 780,1290 1290,1410 1410,2010

1261
00:38:06,810 --> 00:38:08,100
bits but there's also a
2010,2430 2430,2700 2700,2910 2910,3210 3210,3300

1262
00:38:08,100 --> 00:38:09,720
compressed version, which instructions are
3300,3750 3750,4140 4140,4350 4350,4830 4830,4920

1263
00:38:09,720 --> 00:38:11,370
sixteen bits and we use
4920,5430 5430,5850 6030,6240 6240,6330 6330,6570

1264
00:38:11,370 --> 00:38:13,290
less registers and the registers
6570,6870 6870,7620 7740,7980 7980,8070 8070,8490

1265
00:38:13,290 --> 00:38:14,580
we use in that case
8490,8640 8640,8880 8880,8970 8970,9210 9210,9780

1266
00:38:14,610 --> 00:38:17,430
are eight through fifteen those
9810,10980 11070,11430 11430,11850 11850,12420 12420,12630

1267
00:38:17,430 --> 00:38:18,150
are the registers that are
12630,12690 12690,12780 12780,13140 13140,13290 13290,13350

1268
00:38:18,150 --> 00:38:19,500
available to us, so I
13350,13770 13770,13920 13920,14250 14370,14640 14640,14700

1269
00:38:19,500 --> 00:38:20,610
think somebody had a question
14700,14910 14910,15240 15240,15360 15360,15450 15450,15810

1270
00:38:20,610 --> 00:38:22,410
about why is this s
15810,16410 16470,16980 16980,17130 17130,17400 17400,17610

1271
00:38:22,410 --> 00:38:24,360
one register X nine why
17610,17940 17940,18660 18660,18900 18900,19320 19320,19560

1272
00:38:24,360 --> 00:38:26,280
is it, I'm separated from
19560,19770 19770,20100 20340,20670 20670,21300 21300,21480

1273
00:38:26,280 --> 00:38:27,210
all of the other's registers
21480,21630 21630,21750 21750,21900 21900,22200 22200,22410

1274
00:38:27,210 --> 00:38:29,340
and my guess is that
22410,23160 23250,23880 23910,24120 24120,24420 24420,24540

1275
00:38:29,340 --> 00:38:31,440
that's why I'm.
24540,24720 24720,24990 24990,25290 25650,26190

1276
00:38:31,800 --> 00:38:32,940
That we separated from all
120,450 450,570 570,960 960,1080 1080,1260

1277
00:38:32,940 --> 00:38:34,050
the other ones because it's
1260,1380 1380,1560 1560,1800 1800,2160 2160,2370

1278
00:38:34,050 --> 00:38:37,050
available in compressed instruction mode,
2370,3180 3180,3660 3690,4320 4320,4860 4860,5370

1279
00:38:37,080 --> 00:38:38,670
whereas s two to eleven
5400,6180 6180,6360 6360,6510 6510,6630 6630,6990

1280
00:38:38,670 --> 00:38:39,260
or not.
6990,7080 7080,7440

1281
00:38:40,220 --> 00:38:41,090
And so that's the idea,
120,270 270,360 360,540 540,660 660,990

1282
00:38:41,180 --> 00:38:42,590
that's that's a compress, but
1080,1560 1560,1860 1860,1920 1920,2370 2370,2490

1283
00:38:42,590 --> 00:38:44,330
outside of that register will
2490,2820 2820,2880 2880,3210 3270,3990 3990,4230

1284
00:38:44,330 --> 00:38:45,940
be referred to.
4230,4740 4740,5160 5160,5610

1285
00:38:46,020 --> 00:38:48,210
By their API name and
120,570 600,1290 1380,1830 1830,2130 2160,2310

1286
00:38:48,210 --> 00:38:49,560
so a0 to a seven
2310,2580 2580,3090 3090,3180 3180,3330 3330,3660

1287
00:38:49,560 --> 00:38:51,180
are used for function arguments,
3660,3810 3810,4080 4080,4260 4260,4620 4620,5280

1288
00:38:51,270 --> 00:38:51,900
but if we have a
5370,5700 5700,5760 5760,5850 5850,5940 5940,6000

1289
00:38:51,900 --> 00:38:53,670
function that takes more than
6000,6360 6360,6510 6510,6750 6750,7170 7170,7770

1290
00:38:53,850 --> 00:38:55,200
the eight arguments that those
7950,8220 8220,8430 8430,8940 8940,9090 9090,9300

1291
00:38:55,200 --> 00:38:57,030
registers give us access to.
9300,9900 9900,10080 10080,10200 10200,10680 10680,11130

1292
00:38:57,470 --> 00:38:58,580
We do need to use
90,540 540,720 720,930 930,1020 1020,1200

1293
00:38:58,580 --> 00:39:00,080
memory but that's um, this
1200,1620 1620,1770 1770,2130 2130,2490 2520,2700

1294
00:39:00,080 --> 00:39:00,980
is kind of an illustration
2700,2790 2790,2970 2970,3030 3030,3120 3120,3600

1295
00:39:00,980 --> 00:39:01,550
of the fact that we
3600,3690 3690,3750 3750,3990 3990,4080 4080,4170

1296
00:39:01,550 --> 00:39:02,570
don't want to use memory
4170,4410 4410,4590 4590,4650 4650,4830 4830,5190

1297
00:39:02,570 --> 00:39:03,920
when we can use registers.
5190,5280 5280,5370 5370,5670 5670,5820 5820,6540

1298
00:39:04,100 --> 00:39:05,570
Um, we only we only
60,360 360,540 540,990 1020,1200 1200,1530

1299
00:39:05,570 --> 00:39:07,250
use a memory, we have
1530,2100 2190,2400 2400,2820 2820,2970 2970,3210

1300
00:39:07,250 --> 00:39:08,320
to.
3210,3450

1301
00:39:08,790 --> 00:39:10,320
And this, this column here,
210,420 420,660 660,1050 1050,1440 1440,1740

1302
00:39:10,320 --> 00:39:12,360
the saver column a this
1740,1830 1830,2250 2250,2910 3090,3570 3600,3780

1303
00:39:12,360 --> 00:39:14,220
is also extremely important when
3780,3900 3900,4380 4380,5070 5070,5490 5490,5640

1304
00:39:14,220 --> 00:39:16,260
we're discussing registers color Vs
5640,5760 5760,6240 6240,6810 6810,7260 7260,7680

1305
00:39:16,260 --> 00:39:17,720
CALI saved.
7680,8130 8130,8820

1306
00:39:17,760 --> 00:39:20,940
And I'm the terms are
0,510 510,1140 1590,2220 2220,2640 2640,3180

1307
00:39:21,060 --> 00:39:23,940
I confuse them regularly, color
3300,3870 3870,4410 4410,5100 5130,5850 5850,6180

1308
00:39:23,940 --> 00:39:25,080
and CALI the only differ
6180,6300 6300,6660 6660,6840 6840,7050 7050,7320

1309
00:39:25,080 --> 00:39:27,360
by one letter, the easiest
7320,7470 7470,7710 7710,8190 8250,9030 9030,9600

1310
00:39:27,360 --> 00:39:28,890
way that I've found to
9600,9870 9870,10230 10440,10770 10770,11070 11070,11130

1311
00:39:28,890 --> 00:39:31,110
remember them is that caller
11130,11520 11520,11790 11790,11940 11940,12390 12450,13350

1312
00:39:31,110 --> 00:39:34,240
saved registers are not.
13350,13890 13890,14850 14880,15420 15420,16260

1313
00:39:34,410 --> 00:39:35,640
Preserved.
90,1110

1314
00:39:37,360 --> 00:39:38,740
A across.
120,420 420,1350

1315
00:39:39,830 --> 00:39:41,040
A function call.
90,240 240,600 600,1110

1316
00:39:42,190 --> 00:39:45,580
So and callie, save registers.
90,810 1110,1590 1590,2100 2100,2460 2460,3480

1317
00:39:46,800 --> 00:39:48,100
Are preserved.
120,450 450,1170

1318
00:39:49,580 --> 00:39:51,200
What I mean by this.
0,270 270,360 360,720 720,900 900,1620

1319
00:39:52,120 --> 00:39:53,180
Is that.
120,300 300,900

1320
00:39:54,500 --> 00:39:57,290
Um, a caller save register
60,750 750,1020 1020,1560 1560,1920 1920,2850

1321
00:39:57,350 --> 00:40:00,920
can be overwritten by the
2910,3360 3360,3630 3630,4710 4740,5550 5580,6480

1322
00:40:00,950 --> 00:40:02,240
function, so let's say I
6510,7020 7020,7200 7200,7470 7470,7650 7650,7800

1323
00:40:02,240 --> 00:40:03,650
have function a which calls
7800,7950 7950,8310 8310,8640 8640,8880 8880,9210

1324
00:40:03,650 --> 00:40:05,900
function b any registers being
9210,9600 9600,9930 10260,10680 10680,11190 11190,11460

1325
00:40:05,900 --> 00:40:07,310
used by function a that
11460,11880 11880,12030 12030,12480 12480,12720 12720,12870

1326
00:40:07,310 --> 00:40:08,860
our caller saved.
12870,12990 12990,13560 13560,14250

1327
00:40:08,880 --> 00:40:10,680
Call a function b can
0,540 540,750 750,1200 1200,1500 1500,1800

1328
00:40:10,680 --> 00:40:12,240
overwrite when it gets called
1800,2400 2400,2580 2580,2640 2640,2850 2850,3360

1329
00:40:12,420 --> 00:40:13,350
and I think a good
3540,3840 3840,3960 3960,4140 4140,4200 4200,4470

1330
00:40:13,350 --> 00:40:15,090
illustration of this is the
4470,5070 5070,5220 5220,5640 5670,6090 6090,6210

1331
00:40:15,090 --> 00:40:16,340
return address.
6210,6570 6570,7200

1332
00:40:16,320 --> 00:40:17,670
Because you know you can
0,780 780,960 960,1080 1080,1230 1230,1350

1333
00:40:17,670 --> 00:40:19,050
see that the return addresses
1350,1560 1560,1710 1710,1800 1800,2190 2190,2730

1334
00:40:19,050 --> 00:40:20,300
caller saved.
2730,3150 3150,3780

1335
00:40:21,170 --> 00:40:23,150
And that's important because every
210,540 540,750 750,1230 1230,1710 1740,2190

1336
00:40:23,150 --> 00:40:24,860
function needs to use the
2190,2880 2880,3360 3360,3450 3450,3810 3810,3900

1337
00:40:24,860 --> 00:40:26,900
return address, so when a
3900,4170 4170,4680 4770,5460 5490,5760 5760,5940

1338
00:40:26,900 --> 00:40:28,460
calls b it's important that
5940,6300 6300,6630 6630,6840 6840,7290 7290,7500

1339
00:40:28,460 --> 00:40:31,010
be be able to overwrite
7500,7770 7770,7890 7890,8310 8310,8850 8880,10050

1340
00:40:31,040 --> 00:40:32,030
the value in the return
10080,10260 10260,10650 10650,10710 10710,10800 10800,11070

1341
00:40:32,030 --> 00:40:33,560
address, hence why its color
11070,11520 11550,11880 11880,12060 12060,12240 12240,12600

1342
00:40:33,560 --> 00:40:34,240
saved.
12600,13170

1343
00:40:34,340 --> 00:40:36,830
And callie saved registers a
60,390 390,840 840,1230 1230,2160 2190,2550

1344
00:40:36,830 --> 00:40:38,360
are just a our convention
2550,2730 2730,2940 2940,3090 3090,3510 3510,4080

1345
00:40:38,360 --> 00:40:40,370
that we use, um, the
4080,4230 4230,4380 4380,5160 5340,5940 5940,6090

1346
00:40:40,370 --> 00:40:41,990
frame pointer is important for
6090,6390 6390,6810 6810,6960 6960,7560 7560,7710

1347
00:40:41,990 --> 00:40:43,060
that reason.
7710,7980 7980,8520

1348
00:40:43,030 --> 00:40:45,430
Um, and those are preserved
30,840 1140,1500 1500,1830 1830,2100 2100,2430

1349
00:40:45,430 --> 00:40:46,930
across function calls, so basically
2430,2700 2700,3060 3060,3330 3330,3510 3510,3930

1350
00:40:46,930 --> 00:40:48,250
any register that is color
3930,4110 4110,4530 4530,4650 4650,4740 4740,5250

1351
00:40:48,250 --> 00:40:49,810
saved the function that is
5250,5850 6000,6240 6240,6600 6600,6720 6720,6810

1352
00:40:49,810 --> 00:40:50,950
making the call needs to
6810,7200 7200,7290 7290,7590 7590,7830 7830,7950

1353
00:40:50,950 --> 00:40:52,840
worry about those registers, and
7950,8190 8190,8460 8460,8700 8700,9390 9540,9840

1354
00:40:52,840 --> 00:40:54,070
if they're called the sage,
9840,9930 9930,10080 10080,10380 10380,10530 10530,11070

1355
00:40:54,070 --> 00:40:55,150
the function that is being
11070,11190 11190,11550 11550,11640 11640,11790 11790,12150

1356
00:40:55,150 --> 00:40:56,890
called needs to worry about
12150,12690 12750,13170 13170,13290 13290,13560 13560,13890

1357
00:40:56,890 --> 00:40:58,240
preserving the value in those
13890,14370 14370,14430 14430,14850 14850,14970 14970,15240

1358
00:40:58,240 --> 00:40:59,020
registers.
15240,15930

1359
00:40:59,830 --> 00:41:01,210
And again, you know I
150,360 360,690 690,750 750,1050 1140,1530

1360
00:41:01,210 --> 00:41:03,280
I regularly confuse the two
1530,1920 2010,2670 2670,3090 3090,3210 3210,3600

1361
00:41:03,280 --> 00:41:05,240
and find myself returning.
3600,4020 4020,4260 4260,4710 4710,5280

1362
00:41:05,230 --> 00:41:07,220
To this table.
30,270 270,450 450,1110

1363
00:41:07,590 --> 00:41:09,660
To remind myself about what
90,750 900,1410 1410,1770 1770,1980 1980,2160

1364
00:41:09,660 --> 00:41:12,560
they do, and so.
2160,2280 2280,2700 3660,4290 4290,4770

1365
00:41:12,670 --> 00:41:13,840
You know you if you
90,270 270,390 390,750 1020,1170 1170,1260

1366
00:41:13,840 --> 00:41:15,190
remember from the reading, all
1260,1530 1530,1680 1680,1770 1770,2280 2310,2610

1367
00:41:15,190 --> 00:41:17,320
of these registers are 64
2610,2700 2700,2880 2880,3660 3660,4020 4020,4740

1368
00:41:17,320 --> 00:41:18,760
bits wide, so they have
4740,5160 5160,5700 5700,5820 5820,5940 5940,6180

1369
00:41:18,760 --> 00:41:20,320
64 places where we can
6180,6810 6810,7200 7200,7410 7410,7560 7560,7740

1370
00:41:20,320 --> 00:41:23,260
put things and the various
7740,7980 7980,8520 8670,9780 9930,10200 10200,10680

1371
00:41:23,260 --> 00:41:24,730
data types are made to
10680,10980 10980,11460 11460,11580 11580,12030 12030,12150

1372
00:41:24,730 --> 00:41:26,710
fit into those 64 bits
12150,12450 12450,12720 12720,12960 12960,13590 13590,14130

1373
00:41:26,800 --> 00:41:28,660
based on the calling convention,
14220,15030 15030,15150 15150,15240 15240,15570 15570,16080

1374
00:41:28,660 --> 00:41:29,200
so if we have a
16080,16260 16260,16380 16380,16470 16470,16560 16560,16620

1375
00:41:29,200 --> 00:41:31,180
32 bit integer a depending
16620,17040 17040,17160 17160,17820 17910,18300 18300,18600

1376
00:41:31,180 --> 00:41:32,230
on how it's whether or
18600,18690 18690,18870 18870,19350 19350,19590 19590,19650

1377
00:41:32,230 --> 00:41:33,940
not it's an extended no
19650,19830 19830,19980 19980,20160 20160,20970 21030,21360

1378
00:41:33,940 --> 00:41:34,930
will either add zeros or
21360,21510 21510,21720 21720,21900 21900,22260 22260,22350

1379
00:41:34,930 --> 00:41:36,040
ones to the front of
22350,22860 22860,23070 23070,23160 23160,23400 23400,23460

1380
00:41:36,040 --> 00:41:37,330
that image or a in
23460,23640 23640,23910 23910,24240 24270,24660 24660,24750

1381
00:41:37,330 --> 00:41:38,290
order to make it 64
24750,24930 24930,24990 24990,25140 25140,25200 25200,25710

1382
00:41:38,290 --> 00:41:39,100
bits to put in these
25710,25950 25950,26040 26040,26250 26250,26340 26340,26520

1383
00:41:39,100 --> 00:41:39,920
registers.
26520,27180

1384
00:41:40,480 --> 00:41:41,860
So before we move on
120,390 390,690 690,840 840,1050 1050,1500

1385
00:41:41,950 --> 00:41:43,720
a does anybody have questions
1590,1980 1980,2130 2130,2490 2490,2790 2790,3360

1386
00:41:43,720 --> 00:41:46,760
about registers or um.
3360,3960 4110,5310 5310,5760 5760,6150

1387
00:41:46,810 --> 00:41:48,240
Things of that nature.
90,630 630,720 720,870 870,1290

1388
00:41:52,940 --> 00:41:53,420
MHM.
0,390

1389
00:41:55,140 --> 00:41:55,700
And.
0,330

1390
00:41:56,000 --> 00:41:56,480
HMM.
60,390

1391
00:41:57,950 --> 00:41:59,360
A I have a question,
90,240 240,600 600,750 750,840 840,1500

1392
00:41:59,360 --> 00:42:01,400
can you have a can
1500,1740 1740,2250 2280,2790 2790,3300 3390,3540

1393
00:42:01,400 --> 00:42:02,540
you put a return value
3540,3660 3660,3900 3900,3960 3960,4290 4290,4680

1394
00:42:02,540 --> 00:42:04,080
in a one.
4680,4950 4950,5190 5190,5910

1395
00:42:04,790 --> 00:42:06,050
Um, yes, that's a good
30,480 540,960 960,1080 1080,1140 1140,1290

1396
00:42:06,050 --> 00:42:08,750
question, so, um I think
1290,1740 1740,2460 2940,3390 3420,3540 3540,3990

1397
00:42:08,750 --> 00:42:11,720
theory you can the reason
3990,4560 4590,5760 5820,6330 6360,6600 6600,6960

1398
00:42:11,720 --> 00:42:13,400
why we say a zero
6960,7710 7740,7950 7950,8220 8220,8340 8340,8640

1399
00:42:13,400 --> 00:42:15,080
to a one is if
8640,8820 8820,8850 8850,9510 9660,10200 10200,10320

1400
00:42:15,080 --> 00:42:16,250
a function returns a long
10320,10410 10410,10770 10770,11100 11100,11160 11160,11490

1401
00:42:16,250 --> 00:42:18,770
long which is 128 bits,
11490,12000 12180,12540 12540,12630 12720,13680 13680,14010

1402
00:42:18,770 --> 00:42:20,210
so if you remember from
14010,14430 14430,14640 14640,14790 14790,15270 15270,15450

1403
00:42:20,210 --> 00:42:21,800
the reading if a function
15450,15570 15570,16110 16320,16620 16620,16710 16710,17040

1404
00:42:21,800 --> 00:42:23,120
argument is a hundred is
17040,17670 17670,17760 17760,17820 17820,18210 18210,18360

1405
00:42:23,120 --> 00:42:24,800
more than a pointer.
18360,18600 18600,18870 18870,19230 19230,19800

1406
00:42:24,880 --> 00:42:26,140
We're done when we refer
60,300 300,570 810,1050 1050,1140 1140,1320

1407
00:42:26,140 --> 00:42:27,130
to word sign, we're saying
1320,1590 1590,1740 1740,1980 1980,2070 2070,2310

1408
00:42:27,130 --> 00:42:28,720
64 bits, so if we
2310,2820 2820,3240 3390,3660 3660,3810 3810,3900

1409
00:42:28,720 --> 00:42:29,920
have something that is twice
3900,4050 4050,4380 4380,4530 4530,4710 4710,5100

1410
00:42:29,920 --> 00:42:30,970
the size of a pointer
5100,5190 5190,5520 5520,5610 5610,5730 5730,6150

1411
00:42:30,970 --> 00:42:31,660
word.
6150,6570

1412
00:42:32,350 --> 00:42:33,970
Um, we can put that
90,600 720,1050 1050,1230 1230,1440 1440,1710

1413
00:42:33,970 --> 00:42:35,650
in a register pair and
1710,1800 1800,1920 1920,2370 2370,2910 3060,3390

1414
00:42:35,650 --> 00:42:37,420
so the same convention holds
3390,4020 4080,4230 4230,4530 4530,4920 4920,5160

1415
00:42:37,420 --> 00:42:38,920
true for return addresses where
5160,5400 5400,5520 5520,5850 5850,6330 6330,6660

1416
00:42:38,920 --> 00:42:40,090
if we have something that's
6660,6810 6810,6900 6900,7080 7080,7440 7440,7830

1417
00:42:40,150 --> 00:42:41,680
the size of a twice
7890,8100 8100,8460 8460,8670 8670,9060 9090,9420

1418
00:42:41,680 --> 00:42:42,910
appoint a word, we can
9420,9750 9750,9870 9870,10230 10260,10500 10500,10650

1419
00:42:42,910 --> 00:42:43,900
stick that in a zero
10650,10890 10890,11010 11010,11130 11130,11280 11280,11640

1420
00:42:43,900 --> 00:42:45,040
and a one and use
11640,11910 11910,12030 12030,12420 12420,12630 12630,12780

1421
00:42:45,040 --> 00:42:46,240
that as the return address
12780,12930 12930,13080 13080,13200 13200,13500 13500,13980

1422
00:42:46,330 --> 00:42:47,170
I think you'll run into
14070,14280 14280,14460 14460,14580 14580,14700 14700,14910

1423
00:42:47,170 --> 00:42:48,280
problems if you only try
14910,15300 15300,15390 15390,15600 15600,15870 15870,16020

1424
00:42:48,280 --> 00:42:48,970
to put something in a
16020,16110 16110,16260 16260,16530 16530,16620 16620,16710

1425
00:42:48,970 --> 00:42:49,520
one.
16710,17010

1426
00:42:49,880 --> 00:42:52,180
Makes sense, thanks.
120,420 420,750 750,1290

1427
00:42:55,040 --> 00:42:58,280
Um, why are the registers
1080,1500 1500,2190 2190,2370 2370,3030 3120,4320

1428
00:42:58,280 --> 00:43:00,470
not like continuous, so why
4320,4650 4650,4830 4830,5550 5550,6030 6180,6510

1429
00:43:00,470 --> 00:43:01,580
is like a zero and
6510,6690 6690,6960 6960,7110 7110,7470 7470,7620

1430
00:43:01,580 --> 00:43:04,080
one separate from.
7620,8220 8400,9210 9210,9900

1431
00:43:04,680 --> 00:43:06,030
Sorry no that's a bad
660,990 990,1110 1110,1380 1380,1800 1800,2010

1432
00:43:06,030 --> 00:43:07,920
example, that's Y S S
2010,2460 2460,2730 2730,3030 3030,3630 3660,3900

1433
00:43:07,920 --> 00:43:09,960
one separate from SD wire,
3900,4380 4380,4860 4860,5070 5070,5430 5430,5940

1434
00:43:09,960 --> 00:43:11,280
the a's in between like
5940,6090 6090,6390 6390,6570 6570,7020 7050,7260

1435
00:43:11,280 --> 00:43:12,210
is there any point in
7260,7380 7380,7620 7620,7830 7830,8100 8100,8190

1436
00:43:12,210 --> 00:43:12,860
that.
8190,8520

1437
00:43:13,180 --> 00:43:14,860
Yeah, so, um I mentioned
120,330 330,690 720,1260 1320,1440 1440,1800

1438
00:43:14,860 --> 00:43:16,300
this briefly earlier, but there
1800,1950 1950,2340 2340,2850 2850,3060 3060,3240

1439
00:43:16,300 --> 00:43:18,220
is a compressed, this is
3240,3420 3420,3840 3870,4710 4830,5070 5070,5160

1440
00:43:18,220 --> 00:43:19,210
a guess I don't I
5160,5250 5250,5670 5670,5700 5700,6060 6060,6150

1441
00:43:19,210 --> 00:43:20,680
don't know for sure but
6150,6360 6360,6510 6510,6630 6630,7020 7170,7620

1442
00:43:20,680 --> 00:43:22,870
there's a compressed version of
7620,7860 7860,7950 7950,8520 8520,9180 9180,9810

1443
00:43:22,900 --> 00:43:25,690
the risk five instructions which
9840,10140 10140,10440 10440,10860 10860,11700 11940,12630

1444
00:43:25,690 --> 00:43:27,010
are sixteen bits in size
12630,12810 12810,13230 13230,13440 13440,13560 13560,13950

1445
00:43:27,010 --> 00:43:28,720
as opposed to 64.
13950,14100 14100,14520 14520,14610 14610,15390

1446
00:43:28,920 --> 00:43:31,440
And you would use that
120,1230 1620,2040 2040,2190 2190,2400 2400,2640

1447
00:43:31,440 --> 00:43:32,700
to try to make your
2640,2700 2700,3180 3210,3570 3600,3780 3780,3900

1448
00:43:32,700 --> 00:43:33,660
code takes less space in
3900,4140 4140,4350 4350,4470 4470,4770 4770,4860

1449
00:43:33,660 --> 00:43:35,910
memory, and when you use
4860,5370 5610,6270 6390,6690 6690,6810 6810,7110

1450
00:43:35,910 --> 00:43:37,590
those sixteen bit instructions, you
7110,7350 7350,7800 7800,7980 7980,8610 8610,8790

1451
00:43:37,590 --> 00:43:40,050
only have accesses to registers
8790,9120 9120,9540 9540,10290 10290,10440 10440,11250

1452
00:43:40,260 --> 00:43:42,480
eight through fifteen so I
11460,11820 11820,12180 12180,13050 13200,13530 13530,13680

1453
00:43:42,480 --> 00:43:44,190
think s one is separate
13680,14070 14070,14340 14340,14640 14640,14790 14790,15390

1454
00:43:44,190 --> 00:43:45,750
from s two to eleven
15390,15750 15750,15990 15990,16140 16140,16290 16290,16950

1455
00:43:45,870 --> 00:43:47,370
because they want to make
17070,17790 17790,18120 18120,18330 18330,18390 18390,18570

1456
00:43:47,370 --> 00:43:48,660
it clear that's one is
18570,18660 18660,18990 18990,19170 19170,19320 19320,19860

1457
00:43:48,720 --> 00:43:50,190
available to you in the
19920,20190 20190,20760 20760,20910 20910,21240 21240,21390

1458
00:43:50,190 --> 00:43:52,060
compressed instruction mode.
21390,21600 21630,22110 22110,22620 22620,23070

1459
00:43:52,070 --> 00:43:53,630
Whereas two to eleven art.
30,540 540,690 690,810 810,1140 1140,1590

1460
00:43:54,500 --> 00:43:56,450
Um, and the reason you
120,810 1080,1290 1290,1380 1380,1950 1950,2070

1461
00:43:56,450 --> 00:43:57,050
know I don't know why
2070,2160 2160,2250 2250,2400 2400,2460 2460,2670

1462
00:43:57,050 --> 00:43:58,180
they picked X.
2670,2790 2790,3150 3150,3690

1463
00:43:58,440 --> 00:44:00,960
It's eight fifteen but I
120,360 360,720 720,1800 1920,2400 2400,2640

1464
00:44:00,960 --> 00:44:02,490
suspect that just looked at
2640,3150 3150,3390 3390,3720 3720,4110 4110,4170

1465
00:44:02,490 --> 00:44:03,180
a bunch of code and
4170,4200 4200,4410 4410,4470 4470,4770 4770,4860

1466
00:44:03,180 --> 00:44:03,840
we're like oh these are
4860,4950 4950,5160 5160,5250 5250,5460 5460,5520

1467
00:44:03,840 --> 00:44:05,400
the most commonly used registers.
5520,5580 5580,5880 5880,6240 6240,6420 6420,7080

1468
00:44:09,620 --> 00:44:10,540
MHM.
0,660

1469
00:44:17,140 --> 00:44:18,540
Any other questions.
120,390 390,600 600,1290

1470
00:44:20,840 --> 00:44:22,490
I had a question, um.
0,270 270,420 420,450 450,960 1050,1650

1471
00:44:23,630 --> 00:44:25,640
Besides the frame pointer, the
90,720 720,870 870,1320 1320,1980 1980,2100

1472
00:44:25,640 --> 00:44:27,980
stack pointer at all I
2100,2550 2550,2880 2880,3000 3000,3420 3600,4440

1473
00:44:28,010 --> 00:44:29,090
don't know why we would
4470,4830 4830,4950 4950,5190 5190,5340 5340,5550

1474
00:44:29,090 --> 00:44:32,120
need more call cohesive registers.
5550,5910 5910,6270 6270,6840 7020,7830 7830,8580

1475
00:44:32,460 --> 00:44:33,870
But we do have like
60,510 510,660 660,810 810,1290 1290,1470

1476
00:44:33,870 --> 00:44:34,840
a bunch of them.
1470,1560 1560,1860 1860,1950 1950,2190

1477
00:44:35,420 --> 00:44:37,730
Yeah, um, the's ones to
120,990 990,990 1080,1470 1470,1770 1770,2430

1478
00:44:37,730 --> 00:44:39,740
elevens those are just for
2430,3030 3030,3750 3750,4050 4050,4170 4170,4440

1479
00:44:39,740 --> 00:44:40,880
I believe use their freedom
4440,4770 4770,4830 4830,5130 5130,5370 5370,5580

1480
00:44:40,880 --> 00:44:42,890
for the compiler or the
5580,6090 6090,6210 6210,6300 6300,7020 7080,7590

1481
00:44:42,890 --> 00:44:44,960
programmer to use, um, so
7590,7680 7680,8220 8220,8370 8370,8820 9060,9660

1482
00:44:45,170 --> 00:44:45,920
there may be there are
9870,10080 10080,10320 10320,10470 10470,10530 10530,10620

1483
00:44:45,920 --> 00:44:47,000
certain cases where you want,
10620,10710 10710,10980 10980,11340 11340,11550 11550,11700

1484
00:44:47,000 --> 00:44:48,560
you want to guarantee that
11700,12090 12300,12510 12510,12690 12690,12750 12750,13260

1485
00:44:48,560 --> 00:44:50,090
something is still around um
13260,13440 13440,13800 13800,13920 13920,14160 14160,14790

1486
00:44:50,390 --> 00:44:52,790
after after your function, call
15090,15600 15630,16470 16620,16980 16980,17130 17130,17490

1487
00:44:52,790 --> 00:44:55,250
the compiler can choose to
17490,18090 18120,18630 18630,19290 19290,19500 19500,19950

1488
00:44:55,250 --> 00:44:57,020
use s one to eleven
19950,20100 20100,20550 20550,20790 20790,21480 21510,21720

1489
00:44:57,020 --> 00:44:58,440
to do that.
21720,22260 22260,22410 22410,22590 22590,22920

1490
00:44:58,760 --> 00:44:59,680
I'm.
120,780

1491
00:45:00,190 --> 00:45:01,870
I don't have like on
90,270 270,540 540,750 750,1170 1470,1770

1492
00:45:01,870 --> 00:45:03,340
hand, a specific example of
1770,2070 2070,2130 2130,2670 2670,3150 3150,3240

1493
00:45:03,340 --> 00:45:05,320
where that's useful, but, um,
3240,3450 3450,3690 3690,4350 4470,4980 4980,5220

1494
00:45:05,320 --> 00:45:06,640
I'm sure it shows up.
5220,5580 5580,5820 5820,5910 5910,6150 6150,6540

1495
00:45:07,330 --> 00:45:08,980
Where having a CALI's value
210,780 840,1170 1170,1260 1260,1620 1620,1860

1496
00:45:08,980 --> 00:45:10,220
is important.
1860,2220 2220,2310 2310,2820

1497
00:45:14,390 --> 00:45:15,890
But these are basically basically
30,240 240,390 390,450 450,930 930,1530

1498
00:45:15,890 --> 00:45:17,060
a programmer or compiler's choice
1530,1650 1650,2070 2070,2160 2160,2610 2610,2700

1499
00:45:17,060 --> 00:45:18,710
to use ask one to
2700,3000 3000,3120 3120,3510 3720,4170 4170,4350

1500
00:45:18,710 --> 00:45:19,500
eleven.
4350,4440 4440,4860

1501
00:45:21,040 --> 00:45:21,440
MHM.
60,390

1502
00:45:22,420 --> 00:45:23,710
I should note that these
120,420 420,600 600,840 840,960 960,1410

1503
00:45:23,710 --> 00:45:25,540
floating point registers their floating
1410,1800 1800,2130 2130,2640 2640,2820 2820,3240

1504
00:45:25,540 --> 00:45:27,920
point, arithmetic, um I.
3240,3510 3510,4230 4500,4740 4740,4740

1505
00:45:28,480 --> 00:45:29,410
As far as I'm aware
360,600 600,780 780,900 900,1050 1050,1290

1506
00:45:29,410 --> 00:45:30,190
you won't see them in
1290,1410 1410,1650 1650,1830 1830,1980 1980,2070

1507
00:45:30,190 --> 00:45:32,140
this class a and say
2070,2250 2250,2970 3240,3540 3540,3780 3780,4020

1508
00:45:32,140 --> 00:45:33,190
she don't really need to
4020,4380 4380,4620 4620,4830 4830,4950 4950,5070

1509
00:45:33,190 --> 00:45:34,020
worry about them.
5070,5280 5280,5430 5430,5670

1510
00:45:37,100 --> 00:45:37,500
MHM.
60,330

1511
00:45:38,550 --> 00:45:40,290
Okay, um, so we started
750,1320 1500,1890 1890,2010 2010,2100 2100,2490

1512
00:45:40,290 --> 00:45:43,110
talking a little bit about.
2490,3060 3060,3210 3210,3540 3540,4020 4080,5310

1513
00:45:43,430 --> 00:45:46,910
I'm function calls and um,
30,420 420,840 840,1740 2040,2940 2970,3510

1514
00:45:47,210 --> 00:45:48,140
so with that I want
3810,4050 4050,4170 4170,4470 4470,4530 4530,4740

1515
00:45:48,140 --> 00:45:50,380
to move us into.
4740,5040 5070,5550 5550,5820 5820,6720

1516
00:45:50,610 --> 00:45:53,820
Discussion of the stack 'em.
30,1050 1050,1440 1440,1560 1560,2130 2280,3240

1517
00:45:54,390 --> 00:45:56,000
So this is.
210,480 480,720 720,1500

1518
00:45:56,600 --> 00:45:58,640
This is we're talking about
300,540 540,1170 1320,1770 1770,2130 2130,2340

1519
00:45:58,640 --> 00:46:00,820
the stack and.
2340,2460 2460,3120 3540,4260

1520
00:46:01,100 --> 00:46:02,660
The stacked, um, if you've
120,270 270,840 840,1080 1080,1500 1500,1680

1521
00:46:02,660 --> 00:46:05,180
seen it like before the
1680,1950 1950,2250 2280,2970 2970,3630 3660,4200

1522
00:46:05,210 --> 00:46:06,590
reason why the stack is
4230,4920 4920,5100 5100,5190 5190,5490 5490,5610

1523
00:46:06,590 --> 00:46:08,960
important is it's what keeps
5610,6240 6240,6750 6870,7080 7080,7470 7500,7980

1524
00:46:08,960 --> 00:46:10,820
our functions.
7980,8220 8220,9060

1525
00:46:11,200 --> 00:46:13,660
Organized and sane and it's
120,1110 1110,1470 1470,1950 1980,2430 2430,2580

1526
00:46:13,660 --> 00:46:15,220
what allows a what makes
2580,2730 2730,3420 3450,3600 3600,3900 3900,4140

1527
00:46:15,220 --> 00:46:17,560
functions work, it's what makes
4140,4560 4560,5040 5520,5730 5730,5910 5910,6480

1528
00:46:17,560 --> 00:46:19,480
return work and it's also
6480,6960 6960,7410 7410,7560 7560,7740 7740,8400

1529
00:46:19,630 --> 00:46:21,340
where often we will find
8550,9300 9300,9720 9720,9840 9840,9990 9990,10260

1530
00:46:21,340 --> 00:46:24,400
ourselves saving our registers and
10260,10950 10950,11550 11550,11940 11940,12780 12900,13320

1531
00:46:24,400 --> 00:46:25,500
things like that.
13320,13620 13620,13800 13800,14070

1532
00:46:26,330 --> 00:46:27,400
I'm.
150,870

1533
00:46:27,740 --> 00:46:28,240
MHM.
60,420

1534
00:46:29,440 --> 00:46:30,400
SO.
120,840

1535
00:46:31,720 --> 00:46:34,180
Here, I've given just a
60,630 630,1080 1080,1650 1650,1950 1980,2520

1536
00:46:34,240 --> 00:46:38,020
pretty simple layout of what
2580,3030 3030,4320 4950,5850 5850,6000 6000,6360

1537
00:46:38,020 --> 00:46:39,700
the stack looks like and
6360,6420 6420,6870 6870,7200 7200,7650 7680,8040

1538
00:46:39,700 --> 00:46:41,980
so each of these boxes
8040,8160 8160,8550 8550,8700 8700,9540 9570,10320

1539
00:46:41,980 --> 00:46:43,750
here is what we refer
10320,10890 10920,11280 11280,11460 11460,11580 11580,12090

1540
00:46:43,750 --> 00:46:47,680
to as a stack a
12090,12780 13080,13980 13980,14460 14460,15390 15720,16020

1541
00:46:47,680 --> 00:46:48,360
frame.
16020,16440

1542
00:46:49,070 --> 00:46:51,380
And every time we get.
270,810 840,1170 1170,1770 1770,1920 1920,2580

1543
00:46:52,070 --> 00:46:53,870
Um, which are generated by
150,480 480,810 810,1020 1020,1620 1620,1950

1544
00:46:53,870 --> 00:46:55,040
function calls.
1950,2310 2310,2940

1545
00:46:59,890 --> 00:47:02,440
Um, every time we call
270,900 1800,2250 2250,2490 2490,2580 2580,2820

1546
00:47:02,440 --> 00:47:04,840
a function that function makes
2820,2910 2910,3570 3600,3990 3990,4740 4770,5220

1547
00:47:04,840 --> 00:47:06,790
for itself its own stack
5220,5370 5370,6120 6150,6480 6480,6750 6750,7170

1548
00:47:06,790 --> 00:47:09,790
frame and a which it
7170,7740 7890,8670 8670,8940 8940,9450 9450,10170

1549
00:47:09,790 --> 00:47:11,650
uses itself and does that
10170,10560 10560,11070 11070,11490 11490,11730 11730,12030

1550
00:47:11,650 --> 00:47:13,810
by moving around the stack
12030,12300 12300,12720 12720,13410 13560,13830 13830,14190

1551
00:47:13,810 --> 00:47:15,670
pointer, so here's the stack
14190,14730 14910,15330 15330,15660 15660,15750 15750,16050

1552
00:47:15,670 --> 00:47:17,740
pointer, and this is um,
16050,16710 16740,17160 17160,17370 17370,17670 17670,18120

1553
00:47:17,740 --> 00:47:19,630
it's very important to remember
18120,18690 18690,18930 18930,19290 19290,19380 19380,20010

1554
00:47:19,780 --> 00:47:21,120
with stacks.
20160,20550 20550,21390

1555
00:47:21,740 --> 00:47:24,500
We start from high addresses
120,390 390,1290 1320,1560 1560,1860 1860,2880

1556
00:47:24,830 --> 00:47:27,080
and we grow downwards.
3210,3420 3420,3570 3570,3990 3990,5280

1557
00:47:27,210 --> 00:47:29,310
Too low addresses so the
90,870 900,1380 1380,1950 1950,2070 2070,2190

1558
00:47:29,310 --> 00:47:31,640
stack grows down always.
2190,2610 2610,3090 3090,3570 3600,4350

1559
00:47:31,860 --> 00:47:33,570
Um, and so you'll see
240,570 570,780 780,1290 1410,1800 1800,1950

1560
00:47:33,570 --> 00:47:35,040
that the arithmetic for stack
1950,2100 2100,2340 2340,2880 2880,3090 3090,3420

1561
00:47:35,040 --> 00:47:37,260
point area is usually done
3420,3690 3690,4560 4560,4950 4980,5400 5400,5640

1562
00:47:37,260 --> 00:47:38,820
VIA subtraction, we want to
5640,6000 6000,6750 6750,6960 6960,7140 7140,7200

1563
00:47:38,820 --> 00:47:39,960
make a new stack frame.
7200,7470 7470,7500 7500,7710 7710,8040 8040,8340

1564
00:47:40,330 --> 00:47:41,710
In assemblies, the stack grows
90,300 300,780 780,900 900,1200 1200,1470

1565
00:47:41,710 --> 00:47:42,920
downwards.
1470,2190

1566
00:47:43,380 --> 00:47:45,150
And stack frames for function
180,420 420,810 810,1200 1200,1410 1410,1950

1567
00:47:45,150 --> 00:47:48,780
contain essay registers local variables,
1950,2760 2940,3300 3300,4110 4110,4380 4380,5580

1568
00:47:48,930 --> 00:47:50,760
um, also like I was
5730,6270 6270,6690 6690,6930 6930,7440 7440,7560

1569
00:47:50,760 --> 00:47:52,080
saying, if you run out
7560,7830 7830,8220 8220,8400 8400,8640 8640,8880

1570
00:47:52,080 --> 00:47:54,690
of a argument registers additional
8880,9300 9330,9570 9570,10050 10050,10950 10980,11490

1571
00:47:54,690 --> 00:47:55,680
arguments will show up on
11490,11970 11970,12060 12060,12240 12240,12360 12360,12480

1572
00:47:55,680 --> 00:47:56,940
the stack, and so not
12480,12570 12570,12990 13170,13350 13350,13440 13440,13740

1573
00:47:56,940 --> 00:47:58,050
as stack frames are not
13740,14010 14010,14280 14280,14520 14520,14610 14610,14850

1574
00:47:58,050 --> 00:47:59,460
all the same size, um,
14850,15030 15030,15090 15090,15360 15360,15930 16050,16260

1575
00:47:59,460 --> 00:48:00,210
even though they are in
16260,16530 16530,16650 16650,16740 16740,16920 16920,17010

1576
00:48:00,210 --> 00:48:01,380
this diagram, that's not the
17010,17130 17130,17760 17760,17940 17940,18090 18090,18180

1577
00:48:01,380 --> 00:48:03,090
case, different functions have different
18180,18780 18810,19200 19200,19530 19530,19650 19650,19890

1578
00:48:03,090 --> 00:48:05,340
numbers of local variables different
19890,20190 20190,20520 20520,20820 20820,21720 21720,22140

1579
00:48:05,520 --> 00:48:07,410
registers so on and so
22320,23100 23400,23760 23760,23910 23910,24030 24030,24210

1580
00:48:07,410 --> 00:48:08,880
forth, and so stack frames
24210,24780 24870,25110 25110,25230 25230,25470 25470,25680

1581
00:48:08,880 --> 00:48:10,110
will be different sizes, but
25680,25770 25770,25890 25890,26160 26160,26700 26700,26910

1582
00:48:10,110 --> 00:48:11,220
the two things that you
26910,27030 27030,27330 27330,27750 27750,27870 27870,28020

1583
00:48:11,220 --> 00:48:12,800
can definitely count on.
28020,28140 28140,28680 28680,29010 29010,29370

1584
00:48:12,820 --> 00:48:14,380
Which are important is that
60,360 360,450 450,1050 1050,1200 1200,1620

1585
00:48:14,500 --> 00:48:15,970
a the return address will
1740,2130 2130,2310 2310,2670 2670,3090 3090,3210

1586
00:48:15,970 --> 00:48:17,260
always be on the first
3210,3480 3480,3780 3780,3930 3930,4050 4110,4500

1587
00:48:17,260 --> 00:48:18,880
thing and the frame pointer,
4500,4890 4890,5130 5130,5220 5220,5490 5490,6120

1588
00:48:19,120 --> 00:48:20,560
um, the previous frames frame
6360,6630 6630,6720 6720,7170 7170,7530 7530,7800

1589
00:48:20,560 --> 00:48:22,060
pointer is also going to
7800,8190 8190,8340 8340,8850 8850,9180 9180,9300

1590
00:48:22,060 --> 00:48:22,990
show up on the stack
9300,9510 9510,9600 9600,9720 9720,9810 9810,10230

1591
00:48:23,080 --> 00:48:25,570
at a predictable location, so
10320,10680 10680,10740 10740,11250 11250,11940 12210,12810

1592
00:48:25,600 --> 00:48:26,520
um.
12840,13500

1593
00:48:26,690 --> 00:48:28,460
The two important registers here
90,240 240,540 540,990 990,1470 1470,1860

1594
00:48:28,460 --> 00:48:30,080
rsp, which you know as
1860,2730 2730,3090 3090,3210 3210,3330 3330,3480

1595
00:48:30,080 --> 00:48:31,970
we discussed is used for,
3480,3600 3600,4140 4140,4380 4380,4830 4830,5370

1596
00:48:32,000 --> 00:48:33,230
um, this is the bottom
5400,5730 5730,5940 5940,6240 6240,6330 6330,6630

1597
00:48:33,230 --> 00:48:34,280
of the stack.
6630,6690 6690,6780 6780,7380

1598
00:48:35,780 --> 00:48:37,520
Or a generally you know
180,660 660,840 870,1590 1590,1800 1800,1920

1599
00:48:37,520 --> 00:48:38,480
it's the location of the
1920,2040 2040,2160 2160,2670 2670,2790 2790,2880

1600
00:48:38,480 --> 00:48:40,550
stack, and then fp is
2880,3390 3600,3930 3930,4200 4200,4830 4830,4950

1601
00:48:40,550 --> 00:48:43,120
are also important.
4950,5130 5130,5730 5790,6690

1602
00:48:43,310 --> 00:48:45,050
Register and this points to
90,750 750,930 930,1140 1140,1530 1530,1830

1603
00:48:45,050 --> 00:48:47,480
the top of current.
1830,1920 1920,2640 2670,3270 3270,4080

1604
00:48:48,760 --> 00:48:49,720
Fraim.
120,840

1605
00:48:50,790 --> 00:48:52,410
And this is important because
150,360 360,570 570,630 630,1140 1140,1770

1606
00:48:52,440 --> 00:48:53,730
that means that the return
1800,2190 2190,2460 2460,2580 2580,2700 2700,3090

1607
00:48:53,730 --> 00:48:56,220
address and the previous fp
3090,3750 3780,4260 4260,4350 4350,4860 4860,5580

1608
00:48:56,250 --> 00:48:57,480
will always be at a
5610,5850 5850,6390 6390,6630 6630,6780 6780,6840

1609
00:48:57,480 --> 00:49:00,930
fixed location from the current
6840,7410 7440,8730 8910,9600 9600,9750 9750,10290

1610
00:49:00,930 --> 00:49:02,060
frame pointer.
10290,10620 10620,11130

1611
00:49:02,400 --> 00:49:04,110
So that means that if
120,300 300,510 510,990 990,1500 1530,1830

1612
00:49:04,110 --> 00:49:05,040
I want to find my
1830,1920 1920,2130 2130,2250 2250,2610 2610,2760

1613
00:49:05,040 --> 00:49:06,210
return address or I want
2760,3060 3060,3510 3510,3660 3660,3750 3750,3930

1614
00:49:06,210 --> 00:49:07,650
to find the previous frame
3930,4020 4020,4290 4290,4380 4380,4800 4800,5370

1615
00:49:07,890 --> 00:49:09,060
I can always get to
5610,5760 5760,5940 5940,6420 6420,6690 6690,6780

1616
00:49:09,060 --> 00:49:11,550
those values by looking at
6780,7170 7170,7950 7950,8370 8400,8910 8910,9270

1617
00:49:11,550 --> 00:49:13,980
the current frame pointer and
9270,9390 9390,9810 9810,10140 10140,10650 11370,11700

1618
00:49:13,980 --> 00:49:15,030
the reason why we store
11700,11790 11790,12090 12090,12300 12300,12450 12450,12750

1619
00:49:15,030 --> 00:49:16,800
the previous frame pointer is
12750,12840 12840,13290 13290,13560 13560,14250 14310,14520

1620
00:49:16,800 --> 00:49:18,600
to allow us to jump
14520,14700 14700,15150 15150,15480 15480,15990 16020,16320

1621
00:49:18,600 --> 00:49:19,800
back so once this function
16320,16620 16620,16770 16770,16950 16950,17130 17130,17520

1622
00:49:19,800 --> 00:49:21,630
returns we can move this
17520,18150 18240,18540 18540,18720 18720,19050 19050,19350

1623
00:49:21,630 --> 00:49:23,280
into fp and all of
19350,19680 19680,20400 20430,20700 20700,20910 20910,21000

1624
00:49:23,280 --> 00:49:25,200
a sudden fp again will
21000,21090 21090,21510 21510,21990 21990,22560 22650,22920

1625
00:49:25,200 --> 00:49:26,610
go from pointing to this,
22920,23160 23160,23310 23310,23700 23700,23820 23820,24330

1626
00:49:26,610 --> 00:49:28,060
this stack frame.
24330,24570 24570,24900 24900,25500

1627
00:49:28,110 --> 00:49:29,430
To now pointing to this
90,450 450,750 750,1110 1110,1200 1200,1410

1628
00:49:29,430 --> 00:49:31,140
stack frame, so we use
1410,1710 1710,2070 2430,2700 2700,2910 2910,3120

1629
00:49:31,140 --> 00:49:32,880
the frame pointer to manipulate
3120,3240 3240,3540 3540,3990 3990,4200 4200,4860

1630
00:49:32,880 --> 00:49:34,470
our stack frames and make
4860,5070 5070,5430 5430,6030 6030,6270 6270,6450

1631
00:49:34,470 --> 00:49:35,610
sure we're always going to
6450,6690 6690,6780 6780,7170 7170,7470 7470,7590

1632
00:49:35,610 --> 00:49:39,510
one corresponding to the correct
7590,7950 7950,8940 9270,9930 10050,10530 10560,11490

1633
00:49:39,510 --> 00:49:40,400
function.
11490,12090

1634
00:49:41,040 --> 00:49:41,970
And that's that's kind of
180,360 360,630 630,870 870,1050 1050,1110

1635
00:49:41,970 --> 00:49:43,500
how things how things are
1110,1260 1260,1590 2070,2310 2310,2550 2550,2640

1636
00:49:43,500 --> 00:49:46,530
done and the these pieces
2640,3060 3180,4230 4320,4830 4830,5220 5220,5670

1637
00:49:46,530 --> 00:49:47,700
of the stack.
5670,5880 5880,5970 5970,6720

1638
00:49:47,920 --> 00:49:49,300
Um need to be created
120,420 420,630 630,690 690,840 840,1500

1639
00:49:49,300 --> 00:49:52,120
by assembly and so everything's
1500,2190 2220,3030 3120,3360 3360,3480 3480,4320

1640
00:49:52,120 --> 00:49:54,070
everything in that calling conventions
4320,4680 4680,4770 4770,4950 4950,5340 5340,6270

1641
00:49:54,100 --> 00:49:56,230
document that you read about
6300,7230 7230,7380 7380,7620 7620,7830 7830,8430

1642
00:49:56,260 --> 00:49:59,950
that's all enforced by effectively
8460,9060 9060,9810 9810,10740 10740,11430 11610,12150

1643
00:49:59,950 --> 00:50:01,090
by the compiler, so the
12150,12330 12330,12450 12450,13050 13050,13200 13200,13290

1644
00:50:01,090 --> 00:50:03,730
compiler adheres to the calling
13290,13920 13920,14580 14580,15120 15180,15450 15450,15930

1645
00:50:03,730 --> 00:50:06,220
convention and it's what generates
15930,16770 16830,17310 17310,17610 17610,17850 17850,18420

1646
00:50:06,220 --> 00:50:07,540
the stack frame, it generates
18420,18540 18540,18900 18900,19170 19170,19290 19290,19740

1647
00:50:07,540 --> 00:50:09,310
the assembly code that makes
19740,19860 19860,20340 20340,20850 20910,21210 21210,21510

1648
00:50:09,310 --> 00:50:10,900
our stack frames look correct
21510,21660 21660,21990 21990,22350 22350,22590 22590,23100

1649
00:50:11,080 --> 00:50:13,000
so often at the top
23280,23670 23670,24330 24450,24810 24810,24900 24900,25200

1650
00:50:13,000 --> 00:50:14,170
of a function, you'll see
25200,25320 25320,25440 25440,25980 25980,26160 26160,26370

1651
00:50:14,170 --> 00:50:16,940
what's called a function.
26370,26640 26640,27210 27480,27930 27930,28890

1652
00:50:17,100 --> 00:50:18,760
A prologue.
120,630 690,1590

1653
00:50:21,300 --> 00:50:22,590
And then there will be
120,630 630,990 990,1140 1140,1290 1290,1410

1654
00:50:22,590 --> 00:50:24,180
the body of the function
1410,1530 1530,1860 1860,1980 1980,2070 2070,3000

1655
00:50:24,450 --> 00:50:25,710
and then there will be.
3270,3450 3450,3630 3630,3750 3750,3960 3960,4530

1656
00:50:26,110 --> 00:50:28,720
An epilogue that shows up
210,420 420,1440 1680,2310 2310,2640 2640,2820

1657
00:50:28,720 --> 00:50:30,040
after that, so this is
2820,3120 3120,3510 3570,3840 3840,4020 4020,4140

1658
00:50:30,040 --> 00:50:31,180
kind of like.
4140,4440 4440,4590 4590,5040

1659
00:50:32,010 --> 00:50:34,620
When a UN assembly.
90,450 450,870 900,1110 1110,1980

1660
00:50:35,230 --> 00:50:37,240
Function will often look like
90,810 810,960 960,1290 1290,1530 1530,2100

1661
00:50:37,360 --> 00:50:38,350
and we'll take a look
2220,2580 2580,2700 2700,2910 2910,2970 2970,3210

1662
00:50:38,350 --> 00:50:41,560
at, um now, so here
3210,3780 3960,4470 4590,5010 5760,6210 6210,6420

1663
00:50:41,560 --> 00:50:43,480
I have another function sum
6420,6540 6540,6660 6660,7020 7020,7620 8040,8340

1664
00:50:43,480 --> 00:50:45,370
then so you'll note that
8340,8520 8520,8790 8790,9690 9690,10020 10020,10230

1665
00:50:45,370 --> 00:50:46,630
as excuse me that some
10230,10560 10560,10950 10950,11070 11070,11220 11220,11490

1666
00:50:46,630 --> 00:50:48,610
tubes not have any of
11490,11910 11910,12210 12210,12750 12870,13380 13380,13470

1667
00:50:48,610 --> 00:50:50,170
these things that it it
13470,13710 13710,14130 14130,14310 14310,14700 14850,15030

1668
00:50:50,170 --> 00:50:50,950
should if it was a
15030,15360 15360,15480 15480,15570 15570,15720 15720,15810

1669
00:50:50,950 --> 00:50:52,720
proper function and this works
15810,16200 16200,16800 16920,17160 17160,17310 17310,17580

1670
00:50:52,720 --> 00:50:54,220
fine because it's simple enough
17580,17970 17970,18240 18240,18390 18390,18720 18720,19080

1671
00:50:54,220 --> 00:50:55,090
so it does all of
19080,19320 19320,19440 19440,19650 19650,19860 19860,19950

1672
00:50:55,090 --> 00:50:57,100
its computations on a zero
19950,20100 20100,21000 21000,21360 21360,21510 21510,21960

1673
00:50:57,100 --> 00:50:58,220
and so things are.
21960,22110 22110,22230 22230,22470 22470,22740

1674
00:50:58,200 --> 00:50:59,400
Things are good and we're
0,420 420,510 510,900 900,1080 1080,1200

1675
00:50:59,400 --> 00:51:00,510
also not it's a it's
1200,1410 1410,1710 1710,1860 1860,2160 2160,2310

1676
00:51:00,510 --> 00:51:02,070
a leaf function, so, um,
2310,2400 2400,2610 2610,3180 3390,3870 3870,3870

1677
00:51:02,460 --> 00:51:03,450
you'll see if you've seen
4260,4440 4440,4650 4650,4920 4920,5100 5100,5250

1678
00:51:03,450 --> 00:51:04,530
the term leaf function that's
5250,5310 5310,5550 5550,5760 5760,6150 6150,6330

1679
00:51:04,530 --> 00:51:05,580
a function that doesn't call
6330,6390 6390,6720 6720,6840 6840,7170 7170,7380

1680
00:51:05,580 --> 00:51:07,860
another function and the functions
7380,7710 7710,8310 8700,9030 9030,9180 9180,9660

1681
00:51:07,860 --> 00:51:09,390
are special in that they
9660,9750 9750,10320 10320,10470 10470,10710 10710,11190

1682
00:51:09,630 --> 00:51:12,060
don't need to worry about
11430,11910 11910,12360 12360,12900 12900,13350 13350,13860

1683
00:51:12,060 --> 00:51:14,310
saving a their own return
13860,14610 14610,15090 15210,15570 15570,15720 15720,16110

1684
00:51:14,310 --> 00:51:16,530
address or saving really any
16110,16920 16920,17310 17310,17790 17790,18090 18090,18330

1685
00:51:16,530 --> 00:51:18,360
of the caller saved registers.
18330,18420 18420,18510 18510,18930 18930,19320 19320,20160

1686
00:51:18,650 --> 00:51:21,680
Because they're going to they're
30,1410 1680,1980 1980,2340 2340,2880 2910,3060

1687
00:51:21,680 --> 00:51:22,520
not going to make another
3060,3240 3240,3360 3360,3420 3420,3630 3630,3900

1688
00:51:22,520 --> 00:51:23,570
function call so they don't
3900,4290 4290,4530 4530,4680 4680,4770 4770,4950

1689
00:51:23,570 --> 00:51:25,160
have to be as careful
4950,5130 5130,5220 5220,5550 5640,6030 6030,6540

1690
00:51:25,400 --> 00:51:27,110
some double on the other
6780,7320 7320,7830 7830,8100 8100,8220 8220,8490

1691
00:51:27,110 --> 00:51:28,550
hand is not a leaf
8490,9030 9060,9360 9360,9660 9660,9720 9720,9930

1692
00:51:28,550 --> 00:51:29,840
function so you can see
9930,10440 10440,10620 10620,10770 10770,10950 10950,11220

1693
00:51:29,840 --> 00:51:32,180
here, it calls, um some
11220,11700 11700,11820 11820,12540 12690,13230 13230,13560

1694
00:51:32,180 --> 00:51:32,980
too.
13560,14100

1695
00:51:33,530 --> 00:51:35,120
And so it does need
510,780 780,1140 1200,1560 1560,1860 1860,2100

1696
00:51:35,120 --> 00:51:37,340
to include that that prologue
2100,2220 2220,2820 2820,3240 3330,3780 3780,4320

1697
00:51:37,340 --> 00:51:38,360
and so we see here
4320,4440 4440,4560 4560,4710 4710,4980 4980,5340

1698
00:51:38,360 --> 00:51:40,940
that we are subtracting sixteen
5340,5850 5940,6240 6240,6360 6360,7110 7110,7920

1699
00:51:40,940 --> 00:51:42,770
from the stack pointer, so
7920,8370 8370,8490 8490,8850 8850,9420 9450,9750

1700
00:51:42,770 --> 00:51:44,270
we're making space on our
9750,9930 9930,10290 10290,10800 10800,11010 11010,11250

1701
00:51:44,270 --> 00:51:46,640
stack we're storing the return
11250,11760 11970,12360 12360,13020 13020,13140 13140,13620

1702
00:51:46,640 --> 00:51:49,190
address for something double on
13620,14190 14190,14370 14370,14970 14970,15570 15750,16170

1703
00:51:49,190 --> 00:51:50,660
the stack, and then we
16170,16260 16260,16830 16950,17250 17250,17520 17520,17640

1704
00:51:50,660 --> 00:51:51,710
make our call to sum
17640,17910 17910,18030 18030,18330 18330,18420 18420,18690

1705
00:51:51,710 --> 00:51:53,180
two and after that all
18690,19080 19320,19560 19560,19800 19800,20040 20040,20160

1706
00:51:53,180 --> 00:51:54,350
this function does is it
20160,20580 20580,20910 20910,21150 21150,21240 21240,21330

1707
00:51:54,350 --> 00:51:55,670
calls some too and then
21330,21600 21600,21840 21840,22200 22200,22350 22350,22650

1708
00:51:55,670 --> 00:51:58,060
doubles the result, um.
22650,23100 23100,23190 23190,23850 24000,24780

1709
00:51:58,080 --> 00:51:59,700
Doubles the result turn by
60,540 540,630 630,1080 1080,1470 1470,1680

1710
00:51:59,700 --> 00:52:01,320
some two and here you
1680,1980 1980,2400 2580,2880 2880,3150 3150,3300

1711
00:52:01,320 --> 00:52:03,210
can see z epilogue, so
3300,3450 3450,3900 3900,4380 4410,5040 5040,5190

1712
00:52:03,210 --> 00:52:04,240
we load.
5190,5340 5340,6000

1713
00:52:04,820 --> 00:52:06,620
The return address back in
120,450 450,780 780,1200 1200,1560 1560,1920

1714
00:52:06,680 --> 00:52:09,020
to our a and um,
1980,2340 2340,2640 2640,3270 3360,3930 3930,4320

1715
00:52:09,020 --> 00:52:10,520
delete our stack frame and
4320,4740 4740,4980 4980,5280 5280,5730 5730,5820

1716
00:52:10,520 --> 00:52:11,870
then jump out of the
5820,6060 6060,6630 6720,6960 6960,7050 7050,7170

1717
00:52:11,870 --> 00:52:12,640
function.
7170,7710

1718
00:52:12,670 --> 00:52:13,320
MHM.
90,540

1719
00:52:13,850 --> 00:52:14,720
And so we can run
150,330 330,480 480,630 630,780 780,1020

1720
00:52:14,720 --> 00:52:16,250
that to make sure it
1020,1440 1800,2100 2100,2280 2280,2460 2460,2550

1721
00:52:16,250 --> 00:52:17,690
does what we would expect.
2550,2760 2760,2910 2910,3090 3090,3210 3210,3990

1722
00:52:18,890 --> 00:52:19,580
Yeah.
270,330

1723
00:52:20,870 --> 00:52:22,620
Go here.
150,420 420,1290

1724
00:52:24,160 --> 00:52:26,110
We are so if we
840,1770 1980,2280 2280,2520 2520,2700 2700,2790

1725
00:52:26,110 --> 00:52:27,910
run demo to demo one
2790,3000 3000,3330 3330,3960 3990,4320 4320,4590

1726
00:52:27,910 --> 00:52:28,660
we got the result of
4590,4710 4710,4860 4860,4920 4920,5250 5250,5340

1727
00:52:28,660 --> 00:52:30,400
fifteen for the sum and
5340,6150 6180,6510 6510,6570 6570,6960 6960,7080

1728
00:52:30,400 --> 00:52:31,210
I'll tell you that demo
7080,7200 7200,7380 7380,7470 7470,7590 7590,7890

1729
00:52:31,210 --> 00:52:32,890
to just um, just call
7890,8250 8250,8610 8610,8970 9060,9390 9390,9570

1730
00:52:32,890 --> 00:52:34,840
something double and indeed you
9570,9990 9990,10410 10410,10560 10560,11190 11250,11520

1731
00:52:34,840 --> 00:52:37,360
know it happily doubles the
11520,11640 11640,11760 11760,12450 12480,13380 13380,14040

1732
00:52:37,570 --> 00:52:39,580
sum returned by some too.
14250,14760 14760,15300 15300,15450 15450,15750 15750,16260

1733
00:52:40,600 --> 00:52:42,550
And so a question I
120,480 750,1230 1230,1590 1590,1950 1950,2070

1734
00:52:42,550 --> 00:52:46,240
have for anybody what happens
2070,2430 2430,2910 2910,3660 4530,5160 5160,5760

1735
00:52:46,240 --> 00:52:49,840
if we delete this prologue
5760,6090 6090,6750 6780,7710 7830,8370 8370,9360

1736
00:52:50,200 --> 00:52:52,540
and epilogue, what happens if
9720,10110 10110,10650 10770,11160 11160,11790 11790,12060

1737
00:52:52,540 --> 00:52:54,370
we just have this as
12060,12240 12240,12510 12510,12750 12750,13320 13530,13890

1738
00:52:54,370 --> 00:52:56,020
our function, some double can
13890,14040 14040,14610 14610,15090 15090,15420 15420,15540

1739
00:52:56,020 --> 00:52:57,010
anybody predict what's going to
15540,15810 15810,16200 16200,16350 16350,16470 16470,16530

1740
00:52:57,010 --> 00:52:57,700
happen.
16530,16980

1741
00:53:01,590 --> 00:53:02,550
I mean one thing is
90,240 240,450 450,660 660,900 900,1050

1742
00:53:02,550 --> 00:53:04,650
that some double wouldn't know.
1050,1260 1260,1500 1500,2130 2130,2460 2460,3150

1743
00:53:05,110 --> 00:53:06,580
The return address that it
210,540 540,840 840,1230 1230,1440 1470,1680

1744
00:53:06,580 --> 00:53:08,500
should return to so upon
1680,1950 1950,2400 2400,2820 3030,3240 3240,3600

1745
00:53:08,500 --> 00:53:10,680
calling some too.
3600,4170 4170,4590 4590,5250

1746
00:53:10,870 --> 00:53:12,040
That's going to override the
210,510 510,690 690,810 810,1290 1290,1380

1747
00:53:12,040 --> 00:53:13,720
return address to be something
1380,1770 1770,2280 2280,2430 2430,2640 2640,3060

1748
00:53:13,720 --> 00:53:14,830
doubles at the end of.
3060,3510 3510,3630 3630,3720 3720,3930 3930,4170

1749
00:53:15,500 --> 00:53:16,940
Thumb double it's not going
180,420 420,1020 1080,1290 1290,1440 1440,1620

1750
00:53:16,940 --> 00:53:18,020
to return to its original
1620,1710 1710,2040 2040,2160 2160,2400 2400,2700

1751
00:53:18,020 --> 00:53:18,500
color.
2700,2940

1752
00:53:19,330 --> 00:53:21,280
Yeah exactly and we can
30,480 480,1080 1170,1710 1710,1800 1800,1980

1753
00:53:21,280 --> 00:53:23,620
see that that's what happens
1980,2520 2730,3090 3090,3360 3360,3540 3540,4320

1754
00:53:23,650 --> 00:53:27,460
again, so if we exit
4350,5370 6240,6720 6720,7140 7140,7590 7680,8160

1755
00:53:27,460 --> 00:53:29,440
out of this and exit
8160,8310 8310,8430 8430,9330 9360,9810 9810,10140

1756
00:53:29,440 --> 00:53:31,510
out of this and we
10140,10260 10260,10320 10320,11100 11880,12030 12030,12210

1757
00:53:31,510 --> 00:53:33,070
re-compile with now with our
12210,12360 12360,13080 13080,13350 13350,13650 13650,13770

1758
00:53:33,070 --> 00:53:35,340
broken function.
13770,13950 13950,14370 14370,15060

1759
00:53:35,650 --> 00:53:36,580
We can take a look
90,270 270,450 450,690 690,750 750,1020

1760
00:53:36,580 --> 00:53:37,810
at exactly what's gonna happen
1020,1110 1110,1530 1530,1710 1710,1920 1920,2250

1761
00:53:37,810 --> 00:53:39,640
so we can actually set
2250,2460 2460,2610 2610,3000 3000,3570 3750,4080

1762
00:53:39,640 --> 00:53:40,990
our break point for something
4080,4230 4230,4500 4500,4920 4920,5040 5040,5430

1763
00:53:40,990 --> 00:53:42,500
double.
5430,6090

1764
00:53:42,830 --> 00:53:43,760
Yeah.
150,720

1765
00:53:45,290 --> 00:53:47,930
And set up t UI
90,750 780,1110 1110,1500 1530,1830 1830,2730

1766
00:53:48,260 --> 00:53:49,400
and let it continue, so
3060,3300 3300,3450 3450,3540 3540,4050 4050,4200

1767
00:53:49,400 --> 00:53:50,870
we now run demo to
4200,4350 4350,4620 4620,4920 4920,5280 5280,5670

1768
00:53:50,870 --> 00:53:52,760
okay we're at some double.
5670,6060 6060,6210 6210,6420 6420,6900 6900,7560

1769
00:53:53,280 --> 00:53:55,080
And again, this is an
120,870 1050,1500 1500,1650 1650,1830 1830,1920

1770
00:53:55,080 --> 00:53:57,180
assembly only function, so we're
1920,2400 2400,2670 2670,3210 3210,3690 3720,4020

1771
00:53:57,180 --> 00:53:57,810
going to want to look
4020,4140 4140,4200 4200,4380 4380,4440 4440,4650

1772
00:53:57,810 --> 00:53:59,970
at it in assembly, so
4650,4830 4830,5010 5040,5460 5490,6330 6450,6810

1773
00:53:59,970 --> 00:54:03,060
we'll aas m layout read
6810,7350 7350,7980 7980,8310 8310,9210 9450,9900

1774
00:54:03,060 --> 00:54:04,350
because it's important what's in
9900,10110 10110,10290 10290,10860 10860,11070 11070,11190

1775
00:54:04,350 --> 00:54:05,670
the registers in this case.
11190,11280 11280,11790 11790,11880 11880,12030 12030,12510

1776
00:54:06,620 --> 00:54:07,400
And you'll see that G
180,390 390,540 540,690 690,870 870,960

1777
00:54:07,400 --> 00:54:08,570
D knows a whole bunch
960,1380 1380,1620 1620,1680 1680,1860 1860,2130

1778
00:54:08,570 --> 00:54:10,550
of extra information and so
2130,2190 2190,2520 2520,3240 3450,3870 3870,4110

1779
00:54:10,550 --> 00:54:12,000
we can see that.
4110,4230 4230,4410 4410,4710 4710,5130

1780
00:54:13,770 --> 00:54:15,420
Um, you can see that
210,930 1170,1380 1380,1500 1500,1650 1650,1860

1781
00:54:15,420 --> 00:54:16,800
a re-currently, so the return
1860,1950 1950,2370 2370,3000 3000,3120 3120,3240

1782
00:54:16,800 --> 00:54:18,360
address, currently points to demo
3240,3570 3570,3840 3840,4320 4320,4680 4680,4800

1783
00:54:18,360 --> 00:54:21,000
two z plus eighteen so.
4800,5190 5190,5850 5880,6390 6420,6720 6720,7440

1784
00:54:21,060 --> 00:54:22,140

7500,8100

1785
00:54:22,580 --> 00:54:23,870
At points effectively into the
120,300 300,600 600,1050 1050,1290 1290,1410

1786
00:54:23,870 --> 00:54:25,280
function demo two.
1410,1860 1860,2190 2190,2550

1787
00:54:26,180 --> 00:54:28,130
And now we can run,
180,390 390,900 960,1290 1290,1470 1470,2130

1788
00:54:28,160 --> 00:54:29,780
um, we can just kind
2160,2790 3120,3300 3300,3420 3420,3630 3630,3780

1789
00:54:29,780 --> 00:54:30,950
of step through our function
3780,3840 3840,4140 4140,4350 4350,4500 4500,4950

1790
00:54:30,950 --> 00:54:32,720
and see what happens.
4950,5130 5130,5460 5460,5730 5730,6210

1791
00:54:32,900 --> 00:54:35,660
Um, we've called some to
120,840 1170,1620 1620,1980 1980,2250 2250,2880

1792
00:54:35,690 --> 00:54:37,190
and immediately we can see
2910,3270 3270,3840 3840,3990 3990,4140 4140,4410

1793
00:54:37,190 --> 00:54:39,320
that the return address was
4410,4560 4560,4650 4650,5010 5010,5730 5760,6540

1794
00:54:39,320 --> 00:54:41,000
overwritten by some two to
6540,7170 7170,7410 7410,7740 7740,8100 8100,8220

1795
00:54:41,000 --> 00:54:42,500
now point to some double
8220,8460 8460,8820 8820,9030 9030,9270 9270,9720

1796
00:54:42,500 --> 00:54:44,210
plus four which makes sense,
9720,9990 9990,10380 10530,10920 10920,11130 11130,11430

1797
00:54:44,210 --> 00:54:44,900
you know that's what we
11430,11520 11520,11610 11610,11820 11820,11940 11940,12120

1798
00:54:44,900 --> 00:54:46,340
expect if we go back
12120,12630 12720,13080 13080,13170 13170,13290 13290,13560

1799
00:54:46,340 --> 00:54:47,480
into our code, we call
13560,13800 13800,13920 13920,14280 14280,14370 14370,14700

1800
00:54:47,480 --> 00:54:48,950
some too and so some
14700,15000 15000,15480 15540,15810 15810,15930 15930,16170

1801
00:54:48,950 --> 00:54:50,900
two should return to a
16170,16410 16410,16650 16650,17220 17400,17790 17790,18120

1802
00:54:50,930 --> 00:54:52,340
here.
18150,18630

1803
00:54:52,750 --> 00:54:54,460
And now we can step
210,360 360,870 900,1260 1260,1530 1530,1920

1804
00:54:54,460 --> 00:54:57,310
through you know so on
1920,2670 3090,3570 3570,3840 3840,4200 4200,4770

1805
00:54:57,370 --> 00:54:59,080
up and.
4830,5280 5310,6300

1806
00:54:59,280 --> 00:55:01,020
Then we get back into.
0,270 270,390 390,570 570,960 960,1740

1807
00:55:03,550 --> 00:55:04,940
Yeah.
150,540

1808
00:55:05,410 --> 00:55:09,120
With wrong ass.
90,630 930,1440 1440,2070

1809
00:55:14,490 --> 00:55:15,720
Okay, so now we're here
810,1110 1110,1290 1290,1560 1560,1680 1680,2040

1810
00:55:15,720 --> 00:55:17,040
and now when someone double
2040,2130 2130,2370 2370,2550 2550,3000 3000,3360

1811
00:55:17,040 --> 00:55:19,260
returns as exactly as Amir
3360,3960 4410,4680 4680,5160 5160,5310 5310,5580

1812
00:55:19,260 --> 00:55:21,840
pointed out its return, it
5580,5910 5910,6270 7140,7470 7470,7980 7980,8160

1813
00:55:21,840 --> 00:55:23,130
has not restored its own
8160,8370 8370,8610 8610,9090 9090,9210 9210,9450

1814
00:55:23,130 --> 00:55:25,260
return address and instead its
9450,9810 9810,10410 10530,10830 10830,11340 11340,11580

1815
00:55:25,260 --> 00:55:26,220
return address is still the
11580,11850 11850,12150 12150,12240 12240,12480 12480,12540

1816
00:55:26,220 --> 00:55:27,750
one that was used by
12540,12780 12780,12930 12930,13110 13110,13560 13560,14070

1817
00:55:27,990 --> 00:55:28,880
um.
14310,14850

1818
00:55:29,230 --> 00:55:31,090
Some too, and so we
90,600 600,1110 1170,1500 1500,1770 1770,1950

1819
00:55:31,090 --> 00:55:33,100
will get into an infinite
1950,2340 2370,2910 2910,3420 3420,3540 3540,3960

1820
00:55:33,100 --> 00:55:35,350
loop where we just keep
3960,4500 4530,4800 4800,4950 4950,5580 5610,6210

1821
00:55:35,350 --> 00:55:36,940
doing this over and over
6210,6690 6690,7110 7110,7500 7500,7590 7590,7800

1822
00:55:36,940 --> 00:55:38,200
and over again and will
7800,7920 7920,8130 8130,8580 8790,8970 8970,9060

1823
00:55:38,200 --> 00:55:39,840
never terminate from it.
9060,9300 9300,9840 9840,10020 10020,10230

1824
00:55:39,900 --> 00:55:41,010
And so this is I
120,300 300,420 420,660 660,810 810,1230

1825
00:55:41,220 --> 00:55:42,150
think this is a good
1440,1950 1950,2070 2070,2130 2130,2220 2220,2370

1826
00:55:42,150 --> 00:55:43,890
illustration of why it's important
2370,3030 3030,3180 3180,3420 3420,3630 3630,4110

1827
00:55:43,890 --> 00:55:44,910
to keep track of our
4110,4230 4230,4500 4500,4830 4830,4920 4920,5130

1828
00:55:44,910 --> 00:55:47,520
collar versus callie saved registers
5130,5670 5670,6090 6090,6510 6510,6900 6900,7740

1829
00:55:47,730 --> 00:55:49,020
and hopefully this also shows
7950,8190 8190,8520 8520,8670 8670,8940 8940,9240

1830
00:55:49,020 --> 00:55:50,790
that you can use kind
9240,9330 9330,9480 9480,9780 10290,10800 10800,11010

1831
00:55:50,790 --> 00:55:52,590
of DB two t bugg.
11010,11100 11100,11610 11610,11970 11970,12240 12240,12810

1832
00:55:53,000 --> 00:55:54,680
These sorts of these sorts
60,360 360,660 660,1110 1260,1530 1530,1740

1833
00:55:54,680 --> 00:55:56,450
of problems, so let's restore
1740,1830 1830,2250 2250,2370 2370,2790 2850,3510

1834
00:55:56,450 --> 00:55:57,600
what we had.
3510,3630 3630,3720 3720,4380

1835
00:55:58,190 --> 00:55:59,900
I will go into some
150,480 480,660 660,960 960,1560 1560,1860

1836
00:55:59,900 --> 00:56:02,540
other demos to talk about
1860,2130 2130,2850 3120,3750 3750,4080 4080,4500

1837
00:56:04,370 --> 00:56:06,800
to illustrate a somebody ask
6330,6480 6480,7170 7200,7650 7740,8340 8340,8760

1838
00:56:06,800 --> 00:56:08,750
why are we subtracting sixteen
8760,9000 9000,9330 9330,9540 9540,10050 10050,10710

1839
00:56:08,780 --> 00:56:10,640
that's to put space, um,
10740,11250 11250,11640 11640,11880 11880,12300 12300,12600

1840
00:56:10,670 --> 00:56:12,860
get our stack frame, so
12630,12900 12900,13020 13020,13290 13290,13620 13890,14820

1841
00:56:12,920 --> 00:56:14,960
this is subtracting sixteen from
14880,15390 15390,15630 15630,16260 16260,16710 16710,16920

1842
00:56:14,960 --> 00:56:16,310
the stack pointer, so it's
16920,17010 17010,17370 17370,17940 17970,18150 18150,18270

1843
00:56:16,310 --> 00:56:17,510
moving it down basically in
18270,18570 18570,18660 18660,18990 18990,19410 19410,19470

1844
00:56:17,510 --> 00:56:18,380
memory.
19470,20040

1845
00:56:18,520 --> 00:56:20,560
I'm moving it down so
120,840 1170,1680 1680,1770 1770,2070 2070,2160

1846
00:56:20,560 --> 00:56:21,550
that we now have space
2160,2340 2340,2400 2400,2580 2580,2760 2760,3150

1847
00:56:21,550 --> 00:56:22,660
for our own back frame,
3150,3300 3300,3420 3420,3630 3630,3900 3900,4260

1848
00:56:22,660 --> 00:56:23,560
then we can stick stuff
4260,4380 4380,4470 4470,4620 4620,4890 4890,5160

1849
00:56:23,560 --> 00:56:24,200
there.
5160,5430

1850
00:56:24,360 --> 00:56:25,920
So because um at this
120,300 300,600 600,600 600,1470 1470,1680

1851
00:56:25,920 --> 00:56:27,090
point, in fact that we
1680,1920 1920,1980 1980,2460 2460,2760 2760,2850

1852
00:56:27,090 --> 00:56:28,230
don't want to override what's
2850,3060 3060,3180 3180,3240 3240,3720 3720,3990

1853
00:56:28,230 --> 00:56:30,300
at the stack pointer, a
3990,4170 4170,4260 4260,4560 4560,5040 5490,6060

1854
00:56:30,300 --> 00:56:31,980
why not, for I is
6060,6390 6390,6660 6660,7140 7200,7440 7440,7740

1855
00:56:31,980 --> 00:56:33,480
just um.
7740,8220 8250,8760

1856
00:56:33,790 --> 00:56:35,540
Now for.
90,390 390,1650

1857
00:56:36,890 --> 00:56:38,180
We need to do sixteen
90,270 270,420 420,480 480,660 660,1380

1858
00:56:38,180 --> 00:56:41,300
because instructions are 64.
1380,1740 1740,2250 2250,2550 2550,3750

1859
00:56:42,560 --> 00:56:44,780
Um, yeah I guess I
120,750 1740,1890 1890,2040 2040,2250 2250,2340

1860
00:56:44,780 --> 00:56:46,430
guess we wouldn't don't actually
2340,2490 2490,2610 2610,3060 3150,3540 3570,3990

1861
00:56:46,430 --> 00:56:48,560
need to do sixteen but
3990,4500 4500,4590 4590,4770 4770,5610 5670,6120

1862
00:56:48,560 --> 00:56:50,300
that's generally what you'll see.
6120,6360 6360,6960 6960,7260 7260,7440 7440,7860

1863
00:56:51,060 --> 00:56:52,830
A generally just see I
480,1050 1110,1650 1650,2040 2040,2160 2160,2250

1864
00:56:52,830 --> 00:56:54,900
don't think yeah you, you
2250,2460 2460,2610 2610,3420 3600,4110 4110,4320

1865
00:56:54,900 --> 00:56:56,130
can't you can't do four
4320,4650 4650,4770 4770,5010 5010,5160 5160,5550

1866
00:56:56,130 --> 00:56:57,920
because you need eight.
5550,6330 6360,6480 6480,6690 6690,7170

1867
00:56:58,070 --> 00:56:59,030
Before doesn't work, but I
90,420 420,660 660,870 870,990 990,1050

1868
00:56:59,030 --> 00:57:01,910
think you could do the
1050,1200 1200,1290 1290,1380 1380,2010 3240,3930

1869
00:57:01,910 --> 00:57:03,100
instruction size.
3930,4410 4410,4950

1870
00:57:03,320 --> 00:57:03,980
And the size of the
180,330 330,420 420,690 690,750 750,840

1871
00:57:03,980 --> 00:57:06,590
register registers are 64, yeah,
840,1560 1560,1950 1950,2040 2040,2820 3120,3450

1872
00:57:06,590 --> 00:57:07,760
and then so the convention
3450,3600 3600,3750 3750,3930 3930,4080 4080,4620

1873
00:57:07,760 --> 00:57:09,290
why you usually see sixteen
4620,4860 4860,5010 5010,5340 5340,5580 5580,6150

1874
00:57:09,290 --> 00:57:10,250
is because if we jump
6150,6270 6270,6480 6480,6570 6570,6780 6870,7110

1875
00:57:10,250 --> 00:57:11,870
back to our document, usually
7110,7350 7350,7440 7440,7530 7530,8160 8250,8730

1876
00:57:11,870 --> 00:57:13,160
we have the return address
8730,8970 8970,9150 9150,9210 9210,9510 9510,10020

1877
00:57:13,160 --> 00:57:15,140
and the frame pointer a
10020,10290 10290,10500 10500,10770 10770,11220 11460,12000

1878
00:57:15,140 --> 00:57:16,190
we're not doing that here
12000,12210 12210,12360 12360,12570 12570,12780 12780,13050

1879
00:57:16,190 --> 00:57:17,060
because.
13050,13680

1880
00:57:17,460 --> 00:57:18,560
Or being a.
120,300 300,630 630,1020

1881
00:57:19,040 --> 00:57:20,600
Not super careful with our
60,390 390,630 630,1080 1080,1320 1320,1620

1882
00:57:20,600 --> 00:57:21,520
assembly.
1620,2220

1883
00:57:22,240 --> 00:57:23,470
So normally, if we if
120,300 300,870 870,1020 1020,1230 1230,1350

1884
00:57:23,470 --> 00:57:25,660
we look in a I'm
1350,1440 1440,1680 1680,1980 1980,2520 3120,3540

1885
00:57:25,660 --> 00:57:26,350
sure if we look in
3540,3690 3690,3840 3840,3930 3930,4110 4110,4230

1886
00:57:26,350 --> 00:57:27,520
kernel at this and we'll
4230,4590 4590,4710 4710,5070 5070,5220 5220,5400

1887
00:57:27,520 --> 00:57:28,240
see.
5400,5910

1888
00:57:29,010 --> 00:57:29,910
Yeah, so we look in
270,600 600,780 780,900 900,1050 1050,1170

1889
00:57:29,910 --> 00:57:32,190
kernel data we see it's
1170,1500 1500,1980 2940,3150 3150,3300 3300,3450

1890
00:57:32,190 --> 00:57:33,780
also sixteen this is generally
3450,3930 3930,4410 4410,4530 4530,4680 4680,5040

1891
00:57:33,780 --> 00:57:34,470
what you'll see with the
5040,5190 5190,5340 5340,5520 5520,5640 5640,5730

1892
00:57:34,470 --> 00:57:35,240
compactor.
5730,6300

1893
00:57:37,970 --> 00:57:41,690
Um, OK, so now we
90,870 1260,1800 1890,2910 3240,3630 3630,3810

1894
00:57:41,690 --> 00:57:42,520
can.
3810,4350

1895
00:57:44,000 --> 00:57:45,560
After this.
120,510 510,1080

1896
00:57:46,680 --> 00:57:48,600
We fix our function and
840,1020 1020,1290 1290,1440 1440,2100 2550,2760

1897
00:57:48,600 --> 00:57:49,410
now we can look at
2760,3060 3060,3150 3150,3300 3300,3480 3480,3570

1898
00:57:49,410 --> 00:57:50,720
some c code.
3570,3750 3750,3990 3990,4650

1899
00:57:54,650 --> 00:57:56,420
Alright, so here we have
90,420 420,540 540,810 810,930 930,1860

1900
00:57:56,450 --> 00:57:58,670
demo for which is just
1890,2700 2700,3210 3210,3630 3630,3840 3840,4110

1901
00:57:58,670 --> 00:58:00,460
basically, um.
4110,4830 4860,5580

1902
00:58:00,690 --> 00:58:01,710
A copy of a main
150,330 330,690 690,780 780,870 870,1170

1903
00:58:01,710 --> 00:58:04,080
function like a imitation of
1170,1680 1680,1830 1830,2190 2220,3060 3060,3540

1904
00:58:04,080 --> 00:58:06,720
the main function, so we
3540,3660 3660,3990 3990,4680 4860,5670 5940,6180

1905
00:58:06,720 --> 00:58:09,240
have our arts, um, which
6180,6720 6750,7350 7380,8220 8280,8460 8460,8700

1906
00:58:09,240 --> 00:58:10,620
is an array of strings
8700,8790 8790,8910 8910,9150 9150,9240 9240,10080

1907
00:58:10,740 --> 00:58:12,390
and we have dummy maine
10200,10650 10650,10770 10770,11190 11190,11520 11520,11850

1908
00:58:12,390 --> 00:58:14,550
which takes a number of
11850,12030 12030,12720 12990,13620 13620,13920 13920,14010

1909
00:58:14,550 --> 00:58:16,800
arguments and the arguments ring
14010,14790 14790,15120 15120,15240 15240,15750 15750,16260

1910
00:58:16,800 --> 00:58:18,180
and just print it out,
16260,16650 16650,16890 16890,17130 17130,17370 17370,17640

1911
00:58:18,360 --> 00:58:19,660
um for us.
17820,18210 18210,18540 18540,18930

1912
00:58:20,130 --> 00:58:21,150
And so that's all that's
210,390 390,480 480,690 690,810 810,1230

1913
00:58:21,240 --> 00:58:22,830
that's all that's happening here
1320,1680 1680,1830 1830,1980 1980,2370 2370,2910

1914
00:58:22,950 --> 00:58:25,380
is pretty straightforward, a if
3030,3120 3120,3360 3360,4470 4710,5250 5250,5460

1915
00:58:25,380 --> 00:58:27,060
we set a break point
5460,5580 5580,6060 6090,6270 6270,6660 6660,7140

1916
00:58:27,060 --> 00:58:29,900
in thirty main.
7140,7740 7860,8430 8430,9090

1917
00:58:31,380 --> 00:58:35,200
Then hop over left.
180,690 690,1020 1020,1890 2430,2970

1918
00:58:35,620 --> 00:58:38,050
Okay, we'll just continue and
120,540 540,870 870,1080 1080,1950 2010,2550

1919
00:58:38,290 --> 00:58:40,210
we start this run down
2790,3150 3150,3450 3450,3960 3990,4320 4320,4710

1920
00:58:40,210 --> 00:58:41,950
for okay so we now
4710,5340 5460,5850 5850,6000 6000,6150 6150,6450

1921
00:58:41,950 --> 00:58:42,860
we hit.
6450,6570 6570,7170

1922
00:58:42,890 --> 00:58:44,480
Um, don't you mean.
90,570 570,780 780,900 900,1380

1923
00:58:45,080 --> 00:58:45,950
And there's a couple of
120,300 300,420 420,510 510,870 870,990

1924
00:58:45,950 --> 00:58:50,570
important things to remember about.
990,1770 1770,2610 2640,3540 3780,4770 4770,5610

1925
00:58:51,560 --> 00:58:52,700
A tool that you can
120,360 360,540 840,1050 1050,1170 1170,1260

1926
00:58:52,700 --> 00:58:54,020
use VP for regarding stack
1260,1440 1440,1800 1800,2010 2010,2310 2310,2580

1927
00:58:54,020 --> 00:58:55,550
frames, so if we type
2580,2970 3150,3420 3420,3540 3540,3660 3660,4110

1928
00:58:55,550 --> 00:58:58,340
ISO again, that's info, um,
4110,5160 5160,5340 5340,5580 5580,6450 6540,6900

1929
00:58:58,340 --> 00:58:59,690
if we type I frame,
6900,7020 7020,7110 7110,7380 7380,7380 7380,8250

1930
00:58:59,810 --> 00:59:00,650
we can see a whole
8370,8550 8550,8670 8670,8910 8910,9030 9030,9210

1931
00:59:00,650 --> 00:59:03,320
bunch of useful information about
9210,9510 9510,10080 10110,10560 10560,11370 11370,11880

1932
00:59:03,320 --> 00:59:05,060
the current stack frame, so
11880,11970 11970,12480 12480,12810 12810,13200 13350,13620

1933
00:59:05,060 --> 00:59:05,750
we can see we're at
13620,13710 13710,13860 13860,14070 14070,14220 14220,14310

1934
00:59:05,750 --> 00:59:07,430
stack level zero level zero
14310,14670 14670,14910 14910,15330 15330,15630 15630,15990

1935
00:59:07,430 --> 00:59:09,260
means it's a earth is
15990,16560 16650,16980 16980,17400 17430,17670 17670,17820

1936
00:59:09,260 --> 00:59:10,550
down in the call stack
17820,18270 18270,18390 18390,18480 18480,18750 18750,19110

1937
00:59:10,550 --> 00:59:12,500
that we can go and
19110,19260 19260,19380 19380,19560 19560,20100 20610,21060

1938
00:59:12,500 --> 00:59:13,910
the frame is at this
21060,21180 21180,21840 21870,22080 22080,22260 22260,22470

1939
00:59:13,910 --> 00:59:14,860
address.
22470,23310

1940
00:59:15,570 --> 00:59:17,610
The program counter which is
450,720 720,1140 1140,1830 1920,2370 2370,2490

1941
00:59:17,610 --> 00:59:18,570
okay, that's all well and
2490,2760 2760,2970 2970,3150 3150,3330 3330,3450

1942
00:59:18,570 --> 00:59:19,980
good, we have a safe
3450,4020 4080,4320 4320,4410 4410,4470 4470,4860

1943
00:59:19,980 --> 00:59:22,200
program counter as well, and
4860,5280 5280,5670 5670,5790 5790,6330 6510,7080

1944
00:59:22,200 --> 00:59:23,580
if we again if we
7080,7350 7350,7620 7650,7980 7980,8100 8100,8460

1945
00:59:23,610 --> 00:59:25,410
take this address and we
8490,8730 8730,8880 8880,9570 9840,10050 10050,10290

1946
00:59:25,410 --> 00:59:28,680
jump into colonel A S
10290,10800 10830,11730 11880,12720 12870,13080 13080,13560

1947
00:59:29,850 --> 00:59:31,410
We search for that address,
150,360 360,720 720,840 840,1050 1050,1710

1948
00:59:31,470 --> 00:59:34,380
we can indeed that um
1770,2100 2100,2280 2280,3300 3510,4140 4320,4680

1949
00:59:34,380 --> 00:59:37,360
that addresses inside of.
4680,5070 5070,6000 6000,6750 6750,7290

1950
00:59:38,360 --> 00:59:40,340
Inside of demo form, which
180,1020 1020,1350 1350,1680 1680,2010 2010,2160

1951
00:59:40,340 --> 00:59:42,050
is exactly where we expect
2160,2310 2310,2700 2700,2910 2910,3090 3090,3870

1952
00:59:42,080 --> 00:59:44,420
the program to return two
3900,4410 4410,5010 5010,5370 5370,5790 5790,6240

1953
00:59:44,690 --> 00:59:46,400
and it was called by
6510,7260 7260,7320 7320,7530 7530,8040 8040,8220

1954
00:59:46,400 --> 00:59:48,140
a frame at this address
8220,8340 8340,8820 8820,8940 8940,9180 9180,9960

1955
00:59:48,170 --> 00:59:50,360
source language, see that's that's
9990,10560 10560,10950 10950,11580 11610,11940 11940,12180

1956
00:59:50,360 --> 00:59:52,130
nice to know and then
12180,12720 12840,13230 13230,13560 13560,13770 13770,13950

1957
00:59:52,130 --> 00:59:53,720
we have the argument list
13950,14070 14070,14490 14490,14610 14610,15090 15090,15540

1958
00:59:53,720 --> 00:59:56,030
also starts this address, um,
15540,15900 15900,16260 16260,16590 16590,17280 17400,17850

1959
00:59:56,030 --> 00:59:57,410
of course, um, in this
17850,17940 17940,18390 18390,18780 18870,19050 19050,19230

1960
00:59:57,410 --> 00:59:58,420
case.
19230,19800

1961
00:59:58,580 --> 00:59:59,210
We have most of our
120,270 270,390 390,570 570,630 630,750

1962
00:59:59,210 --> 01:00:01,940
arguments in registers a and
750,1380 1410,1770 1770,2610 2730,3360 3360,3480

1963
01:00:01,940 --> 01:00:03,050
then we can even see
3480,3600 3600,3720 3720,3870 3870,4170 4170,4590

1964
01:00:03,050 --> 01:00:05,390
what bars are we darcy.
4590,4950 4950,5310 5310,5610 5610,5850 5850,6930

1965
01:00:05,650 --> 01:00:08,200
Is three and our v
90,780 780,1320 1320,1890 1890,2130 2130,2640

1966
01:00:08,200 --> 01:00:09,620
is this address.
2640,2970 2970,3180 3180,3930

1967
01:00:10,440 --> 01:00:11,700
And if we want a
180,630 750,1080 1080,1170 1170,1380 1380,1440

1968
01:00:11,700 --> 01:00:14,010
more in-depth examine things we
1440,1830 1830,2640 2670,3270 3270,3660 3660,3750

1969
01:00:14,010 --> 01:00:15,420
can look at things like
3750,3930 3930,4200 4200,4320 4320,4620 4620,5160

1970
01:00:15,480 --> 01:00:17,000
a info, Rs.
5220,5460 5460,5910 5910,6570

1971
01:00:17,680 --> 01:00:19,210
Which will tell us information
120,420 420,570 570,870 870,1050 1050,1650

1972
01:00:19,210 --> 01:00:20,230
about the arguments to the
1650,1860 1860,2010 2010,2460 2460,2550 2550,2670

1973
01:00:20,230 --> 01:00:23,080
function, we can look at
2670,3420 3630,4020 4020,4500 4500,4860 4860,5520

1974
01:00:23,200 --> 01:00:25,420
um, but more importantly we
5640,6060 6060,6210 6210,6420 6420,7320 7560,7860

1975
01:00:25,420 --> 01:00:26,830
can type we type back
7860,8160 8160,8670 8670,8760 8760,9000 9000,9270

1976
01:00:26,830 --> 01:00:29,140
trace or BT works as
9270,9960 10170,10560 10560,11070 11070,11400 11400,11580

1977
01:00:29,140 --> 01:00:31,270
well, we get a full
11580,12090 12300,12810 12810,13110 13110,13290 13290,13710

1978
01:00:31,270 --> 01:00:33,790
batteries of all of the
13710,14490 14490,15030 15060,15450 15450,15630 15630,16230

1979
01:00:33,820 --> 01:00:35,770
stacks as e all of
16260,17100 17130,17550 17550,17700 17700,18120 18120,18210

1980
01:00:35,770 --> 01:00:37,600
the stack frames from the
18210,18300 18300,18660 18660,19290 19350,19920 19920,20040

1981
01:00:37,600 --> 01:00:38,710
call stack so you can
20040,20280 20280,20610 20610,20880 20880,21060 21060,21150

1982
01:00:38,710 --> 01:00:40,630
see something questionable happen here,
21150,21630 21630,21990 21990,22440 22440,22680 22680,23070

1983
01:00:40,630 --> 01:00:41,590
that's when we invoke a
23070,23310 23310,23460 23460,23610 23610,23970 23970,24030

1984
01:00:41,590 --> 01:00:43,870
system call, um, then we
24030,24420 24420,24900 25290,25710 25830,26220 26220,26310

1985
01:00:43,870 --> 01:00:45,130
get to the user traffic
26310,26460 26460,26520 26520,26610 26610,26970 26970,27570

1986
01:00:45,130 --> 01:00:46,360
sion, then to the sis
27570,28080 28110,28320 28320,28410 28410,28530 28530,28800

1987
01:00:46,360 --> 01:00:48,340
call function, then to six
28800,29160 29160,29970 30030,30390 30390,30510 30510,30780

1988
01:00:48,340 --> 01:00:50,710
demo them to demo for.
30780,31560 31620,31980 31980,32070 32070,32430 32430,33150

1989
01:00:51,510 --> 01:00:52,860
And then finally to dummy
210,420 420,600 600,1140 1140,1260 1260,1560

1990
01:00:52,860 --> 01:00:54,810
main and if we want
1560,2040 2910,3120 3120,3210 3210,3300 3300,3510

1991
01:00:54,810 --> 01:00:56,340
to investigate any of these
3510,3690 3690,4590 4590,4800 4800,4890 4890,5040

1992
01:00:56,340 --> 01:00:58,620
stack frames Marine depth, we
5040,5370 5370,5820 5940,6570 6570,7050 7050,7320

1993
01:00:58,650 --> 01:01:00,300
can do frame and then
7350,7530 7530,7890 7890,8520 8520,8730 8730,9000

1994
01:01:00,300 --> 01:01:02,460
whatever number a is along
9000,9390 9390,10110 10350,10560 10560,10800 10800,11160

1995
01:01:02,460 --> 01:01:03,570
the side here, so let's
11160,11250 11250,11640 11640,11940 11940,12060 12060,12270

1996
01:01:03,570 --> 01:01:04,230
say I want to look
12270,12420 12420,12510 12510,12690 12690,12750 12750,12930

1997
01:01:04,230 --> 01:01:05,130
at what was my stack
12930,12990 12990,13170 13170,13320 13320,13470 13470,13830

1998
01:01:05,130 --> 01:01:07,350
frame when six cold called
13830,14370 14430,14910 14910,15180 15180,15690 15690,16050

1999
01:01:07,350 --> 01:01:08,670
an go to frame three
16050,16200 16200,16290 16290,16410 16410,16770 16770,17370

2000
01:01:08,940 --> 01:01:10,440
and so now I'm inside
17640,17790 17790,17910 17910,18210 18210,18720 18750,19140

2001
01:01:10,440 --> 01:01:11,400
of G D, I'm looking
19140,19200 19200,19350 19350,19650 19650,19830 19830,20100

2002
01:01:11,400 --> 01:01:12,330
at that stack frame, so
20100,20220 20220,20430 20430,20700 20700,20880 20880,21030

2003
01:01:12,330 --> 01:01:14,130
I type info frame I
21030,21210 21210,21510 21510,21840 21840,22380 22440,22830

2004
01:01:14,130 --> 01:01:15,120
can get this.
22830,22950 22950,23130 23130,23610

2005
01:01:15,700 --> 01:01:16,390
And here we get a
120,360 360,570 570,630 630,750 750,810

2006
01:01:16,390 --> 01:01:17,980
lot more a lot more
810,1020 1020,1440 1560,1920 1920,2100 2100,2400

2007
01:01:17,980 --> 01:01:19,210
information we have a bunch
2400,3060 3060,3180 3180,3330 3330,3390 3390,3630

2008
01:01:19,210 --> 01:01:21,300
of saves registers.
3630,3720 3720,4110 4110,5400

2009
01:01:21,410 --> 01:01:23,870
Um, we have some local
150,930 1170,1380 1380,1920 1920,2190 2190,2610

2010
01:01:23,870 --> 01:01:25,760
variables, we don't have any
2610,3810 3810,3900 3900,4110 4110,4290 4290,4500

2011
01:01:25,760 --> 01:01:27,800
arguments to this function, we
4500,5100 5100,5190 5190,5400 5400,6180 6270,6540

2012
01:01:27,800 --> 01:01:28,880
can see where the program
6540,6660 6660,6930 6930,7170 7170,7260 7260,7620

2013
01:01:28,880 --> 01:01:30,260
counter were supposed to jump
7620,8130 8130,8370 8370,8670 8670,8760 8760,9000

2014
01:01:30,260 --> 01:01:32,030
back to a all kinds
9000,9300 9300,9780 9900,10260 10260,10500 10500,10770

2015
01:01:32,030 --> 01:01:32,840
of things like that, so
10770,10830 10830,11130 11130,11310 11310,11490 11490,11580

2016
01:01:32,840 --> 01:01:34,100
this is super super useful
11580,11730 11730,11820 11820,12120 12120,12420 12420,12840

2017
01:01:34,100 --> 01:01:35,780
for if you're debugging things
12840,13230 13320,13620 13620,13740 13740,14250 14250,14520

2018
01:01:35,780 --> 01:01:36,500
and in fact it's so
14520,14610 14610,14700 14700,14940 14940,15090 15090,15240

2019
01:01:36,500 --> 01:01:38,540
useful, we make you implement
15240,15870 15900,16140 16140,16380 16380,16500 16500,17280

2020
01:01:39,020 --> 01:01:41,630
your own version, nowhere near
17760,18000 18000,18240 18240,18930 18990,19950 19950,20370

2021
01:01:41,630 --> 01:01:42,560
as in depth as what
20370,20610 20610,20700 20700,21000 21000,21090 21090,21300

2022
01:01:42,560 --> 01:01:44,810
TV tells you but we're
21300,21660 21660,22020 22020,22320 22470,22830 22830,23550

2023
01:01:44,960 --> 01:01:46,100
one of the exercises on
23700,23940 23940,24030 24030,24120 24120,24690 24690,24840

2024
01:01:46,100 --> 01:01:47,210
the next lab will be
24840,24930 24930,25200 25200,25560 25560,25770 25770,25950

2025
01:01:47,210 --> 01:01:48,950
to implement your own back
25950,26100 26100,26610 26610,26790 26790,27180 27240,27690

2026
01:01:48,950 --> 01:01:50,960
trace helper function for use
27690,28320 28350,28710 28710,29220 29220,29430 29430,29700

2027
01:01:50,960 --> 01:01:52,610
when debugging things inside the
29700,30030 30030,30600 30600,30930 30930,31260 31260,31350

2028
01:01:52,610 --> 01:01:53,500
lab.
31350,31740

2029
01:01:54,110 --> 01:01:55,250
And so back back faces
150,360 360,480 480,720 720,930 930,1290

2030
01:01:55,250 --> 01:01:56,990
a is quite useful, and
1290,1410 1410,1920 1920,2190 2190,2730 2820,3030

2031
01:01:56,990 --> 01:01:57,770
then if we type frame
3030,3180 3180,3300 3300,3360 3360,3600 3600,3810

2032
01:01:57,770 --> 01:01:59,240
zero, we go back to
3810,4290 4290,4380 4380,4530 4530,4800 4800,5280

2033
01:01:59,270 --> 01:02:00,740
where we were supposed to
5310,5730 5730,5880 5880,6180 6180,6690 6690,6780

2034
01:02:00,740 --> 01:02:01,240
be.
6780,7020

2035
01:02:02,900 --> 01:02:04,220
And if we want to
300,810 990,1170 1170,1290 1290,1500 1500,1620

2036
01:02:04,220 --> 01:02:05,780
investigate you probably noticed it's
1620,2070 2070,2190 2190,2400 2400,2790 2790,3180

2037
01:02:05,780 --> 01:02:07,070
not super helpful, you know
3180,3390 3390,3750 3750,4290 4290,4350 4350,4470

2038
01:02:07,070 --> 01:02:08,390
our v is a string
4470,4680 4680,4920 4920,5070 5070,5160 5160,5790

2039
01:02:08,540 --> 01:02:09,950
a as an array of
5940,6720 6720,6930 6930,7020 7020,7260 7260,7350

2040
01:02:09,950 --> 01:02:11,180
strings and so we just
7350,7860 7860,8040 8040,8250 8250,8370 8370,8580

2041
01:02:11,180 --> 01:02:12,080
got a ref, we just
8580,8730 8730,8850 8850,9150 9150,9300 9300,9480

2042
01:02:12,080 --> 01:02:14,060
get a an address for
9480,9660 9660,10020 10020,10440 10440,11100 11160,11460

2043
01:02:14,060 --> 01:02:16,250
where that's actually stored and
11460,11760 11760,12000 12000,12420 12420,13110 13380,13650

2044
01:02:16,250 --> 01:02:16,940
if we want to look
13650,13800 13800,13860 13860,14040 14040,14100 14100,14340

2045
01:02:16,940 --> 01:02:17,720
at what's in there there's
14340,14430 14430,14730 14730,14850 14850,14970 14970,15120

2046
01:02:17,720 --> 01:02:18,620
a couple ways of doing
15120,15180 15180,15420 15420,15660 15660,15720 15720,16020

2047
01:02:18,620 --> 01:02:21,170
this, um, the easiest is
16020,16530 16650,17250 17370,17490 17490,18120 18120,18570

2048
01:02:21,200 --> 01:02:22,430
a if we type printer,
18600,18990 18990,19170 19170,19260 19260,19530 19530,19830

2049
01:02:22,430 --> 01:02:24,440
p is for print and
19830,20250 20250,20370 20370,20550 20550,21120 21450,21840

2050
01:02:24,440 --> 01:02:27,350
then if we de reference,
21840,22140 22140,22410 22410,22920 22950,24120 24120,24750

2051
01:02:27,350 --> 01:02:28,370
the address so we go
24750,24900 24900,25320 25320,25410 25410,25560 25560,25770

2052
01:02:28,370 --> 01:02:29,780
look at what's out address,
25770,25980 25980,26070 26070,26310 26310,26460 26640,27180

2053
01:02:29,930 --> 01:02:32,390
we do that and, um
27330,27750 27750,28260 28440,28980 29130,29640 29640,29790

2054
01:02:32,390 --> 01:02:33,140
you know, as you would
29790,29910 29910,30030 30030,30240 30240,30360 30360,30540

2055
01:02:33,140 --> 01:02:34,000
expect.
30540,31230

2056
01:02:34,720 --> 01:02:36,040
We get the first element
120,330 330,480 480,600 600,930 930,1440

2057
01:02:36,040 --> 01:02:37,810
of that array because when
1440,1590 1590,1800 1800,2220 2220,2790 2880,3210

2058
01:02:37,810 --> 01:02:38,830
it tries to print a
3210,3330 3330,3720 3720,3840 3840,4140 4140,4230

2059
01:02:38,830 --> 01:02:40,780
string, it'll go USC says,
4230,4680 4680,4950 4950,5310 5310,5850 5850,6180

2060
01:02:40,780 --> 01:02:41,740
it'll go until it hits
6180,6330 6330,6480 6480,6900 6900,6960 6960,7140

2061
01:02:41,740 --> 01:02:43,450
the null character, so we
7140,7260 7260,7470 7470,8250 8430,8760 8760,8850

2062
01:02:43,450 --> 01:02:44,290
get foo which is the
8850,9060 9060,9330 9330,9510 9510,9600 9600,9690

2063
01:02:44,290 --> 01:02:45,190
first element in that array,
9690,9930 9930,10170 10170,10230 10230,10320 10320,10590

2064
01:02:45,190 --> 01:02:45,730
and if we want to
10590,10710 10710,10830 10830,10920 10920,11070 11070,11130

2065
01:02:45,730 --> 01:02:47,950
get more things we can
11130,11250 11250,11550 11550,12270 12330,12660 12660,13350

2066
01:02:47,980 --> 01:02:49,270
put in the length, so
13380,13710 13710,13830 13830,13950 13950,14460 14490,14670

2067
01:02:49,270 --> 01:02:49,880
if we do.
14670,14790 14790,14880 14880,15030

2068
01:02:50,520 --> 01:02:51,300
And then a number, it'll
600,750 750,840 840,900 900,1230 1230,1380

2069
01:02:51,300 --> 01:02:52,020
go up to a certain
1380,1530 1530,1650 1650,1770 1770,1830 1830,2100

2070
01:02:52,020 --> 01:02:53,580
index, so then we can
2100,2820 3000,3180 3180,3360 3360,3480 3480,3660

2071
01:02:53,580 --> 01:02:54,870
see both of the strings
3660,3990 3990,4260 4260,4380 4380,4470 4470,4950

2072
01:02:54,870 --> 01:02:58,230
here and again GDP is
4950,5490 5880,6900 7260,7800 7800,8190 8190,8310

2073
01:02:58,230 --> 01:02:59,760
quite smart, so we can
8310,8580 8580,8970 8970,9360 9480,9720 9720,9840

2074
01:02:59,760 --> 01:03:02,460
even use arc c to
9840,10590 11430,11730 11730,12090 12090,12420 12420,12540

2075
01:03:02,460 --> 01:03:03,900
print out the whole argument
12540,12840 12840,13050 13050,13110 13110,13590 13590,13980

2076
01:03:03,900 --> 01:03:04,600
array.
13980,14400

2077
01:03:05,590 --> 01:03:06,370
And so all of that
390,600 600,750 750,930 930,990 990,1170

2078
01:03:06,370 --> 01:03:08,890
information is available to you,
1170,2340 2370,2580 2580,3120 3120,3240 3240,3690

2079
01:03:09,130 --> 01:03:11,650
you um, however you want
3930,4530 4530,5100 5250,5760 5760,6270 6270,6450

2080
01:03:11,650 --> 01:03:12,520
to get it, so give
6450,6540 6540,6690 6690,6870 6870,7110 7110,7320

2081
01:03:12,520 --> 01:03:15,430
me the superpowers, why does
7320,7380 7380,7530 7530,8160 9090,9870 9870,10230

2082
01:03:15,430 --> 01:03:17,260
gdpr sorry, why does the
10230,11160 11220,11580 11580,11790 11790,11940 11940,12060

2083
01:03:17,260 --> 01:03:20,050
compiler sometimes optimize out our
12060,12600 12600,13140 13140,13860 13860,14220 14520,14850

2084
01:03:20,050 --> 01:03:22,060
G C and R G
14850,15450 15480,16320 16320,16470 16470,16650 16650,16860

2085
01:03:22,060 --> 01:03:23,140
V that has happened to
16860,17160 17160,17370 17370,17550 17550,17880 17880,17940

2086
01:03:23,140 --> 01:03:25,300
be before yeah that just
17940,18090 18090,18630 19140,19770 19770,19920 19920,20100

2087
01:03:25,300 --> 01:03:26,620
means that the compiler found
20100,20340 20340,20460 20460,20550 20550,21090 21090,21420

2088
01:03:26,620 --> 01:03:27,820
a more efficient way, a
21420,21480 21480,21810 21810,22230 22230,22620 22620,22620

2089
01:03:28,000 --> 01:03:29,140
likely it just got rid
22800,23400 23400,23490 23490,23640 23640,23850 23850,23940

2090
01:03:29,140 --> 01:03:30,010
of the variable and it's
23940,24030 24030,24120 24120,24480 24480,24600 24600,24810

2091
01:03:30,010 --> 01:03:31,570
doing all of its operations
24810,25080 25080,25290 25290,25350 25350,25470 25470,26370

2092
01:03:31,810 --> 01:03:34,030
a directly you know VIA
26610,27120 27150,27840 27840,27900 27900,28380 28410,28830

2093
01:03:34,030 --> 01:03:35,140
register might be doing all
28830,29160 29160,29400 29400,29520 29520,29730 29730,29940

2094
01:03:35,140 --> 01:03:36,070
of its operations on a
29940,30000 30000,30090 30090,30600 30600,30750 30750,30870

2095
01:03:36,070 --> 01:03:37,560
zero for example.
30870,31290 31290,31410 31410,32100

2096
01:03:37,610 --> 01:03:38,540
Um, it might just be
90,390 390,510 510,720 720,900 900,1020

2097
01:03:38,540 --> 01:03:39,890
doing all the computations on
1020,1320 1320,1470 1470,1620 1620,2250 2250,2370

2098
01:03:39,890 --> 01:03:41,000
the return address.
2370,2460 2460,2760 2760,3300

2099
01:03:41,120 --> 01:03:42,170
It's pretty common to see
120,330 330,540 540,870 870,990 990,1170

2100
01:03:42,170 --> 01:03:43,520
something like that, if you
1170,1470 1470,1680 1680,1980 1980,2190 2190,2520

2101
01:03:43,520 --> 01:03:45,470
um, if it's a variable
2520,3030 3570,3810 3810,3930 3930,3990 3990,4470

2102
01:03:45,470 --> 01:03:46,460
that's not you know a
4470,4710 4710,5100 5100,5220 5220,5370 5370,5460

2103
01:03:46,460 --> 01:03:47,460
hundred percent.
5460,5760 5760,6210

2104
01:03:47,500 --> 01:03:50,080
Necessary, um, if you know
60,1110 1350,1620 1620,1860 1860,2160 2400,2640

2105
01:03:50,080 --> 01:03:51,130
we don't let we don't
2640,2760 2760,2970 2970,3330 3330,3480 3480,3690

2106
01:03:51,130 --> 01:03:52,000
give you control over the
3690,3840 3840,3960 3960,4350 4350,4500 4500,4560

2107
01:03:52,000 --> 01:03:53,020
compiler, but if you ever
4560,5040 5040,5160 5160,5280 5280,5370 5370,5580

2108
01:03:53,020 --> 01:03:54,310
find that in your day-to-day
5580,5820 5820,5970 5970,6060 6060,6210 6210,6870

2109
01:03:54,460 --> 01:03:56,170
you can try setting the
7020,7290 7290,7440 7440,7860 7860,8370 8370,8730

2110
01:03:56,170 --> 01:03:58,480
optimization flag for the compiler
8730,9630 9630,10230 10230,10410 10410,10500 10500,11040

2111
01:03:58,480 --> 01:04:00,640
to zero, um, but even
11040,11160 11160,11850 12090,12510 12510,12870 12870,13200

2112
01:04:00,640 --> 01:04:01,930
then you know the compiler
13200,13680 13710,13830 13830,13980 13980,14070 14070,14490

2113
01:04:01,930 --> 01:04:03,160
will do we'll do it,
14490,14610 14610,14940 15150,15270 15270,15390 15390,15720

2114
01:04:03,190 --> 01:04:03,940
we'll do some level of
15750,15870 15870,16020 16020,16230 16230,16440 16440,16500

2115
01:04:03,940 --> 01:04:04,880
optimization.
16500,17220

2116
01:04:05,550 --> 01:04:06,930
A bec your hand is
90,390 390,810 810,1050 1050,1350 1350,1470

2117
01:04:06,930 --> 01:04:07,500
raised.
1470,1860

2118
01:04:08,310 --> 01:04:12,180
Yeah what's the address, besides
90,1350 1620,2250 2250,2670 2700,3360 3360,3960

2119
01:04:12,180 --> 01:04:13,830
that Dollar one or Dollar
3960,4410 4410,4830 4830,5130 5130,5220 5220,5610

2120
01:04:13,830 --> 01:04:15,180
two you know like before
5610,5880 5880,6000 6000,6180 6180,6480 6480,6960

2121
01:04:15,180 --> 01:04:17,580
foo or bar a Dollar
6960,7380 7650,7800 7800,8160 8400,8730 8730,9360

2122
01:04:17,670 --> 01:04:18,620
this.
9450,9960

2123
01:04:18,870 --> 01:04:20,520
Yeah, so what's that address
90,480 480,630 630,840 840,1020 1020,1740

2124
01:04:20,610 --> 01:04:22,230
is that the address where
1830,2190 2190,2520 2520,2670 2670,3000 3000,3450

2125
01:04:22,260 --> 01:04:23,340
foo is.
3480,3930 3930,4380

2126
01:04:23,640 --> 01:04:24,700
Probably up.
60,510 510,870

2127
01:04:25,990 --> 01:04:27,790
But then our v points
90,630 630,810 810,1110 1110,1470 1470,1890

2128
01:04:27,790 --> 01:04:29,350
to some other address shouldn't
1890,2040 2040,2250 2250,2490 2490,2820 2820,3450

2129
01:04:29,350 --> 01:04:30,660
those be the same.
3450,3720 3720,3840 3840,3930 3930,4260

2130
01:04:32,080 --> 01:04:33,190
So our R V is
120,390 390,660 660,870 870,1110 1110,1230

2131
01:04:33,190 --> 01:04:36,400
on this stack, and.
1230,1410 1410,1740 1740,2850 3180,4080

2132
01:04:36,550 --> 01:04:37,810
You know, so the reason
210,420 420,870 900,1080 1080,1170 1170,1470

2133
01:04:37,810 --> 01:04:39,070
why, if you look at
1470,2010 2040,2280 2280,2460 2460,2640 2640,2730

2134
01:04:39,070 --> 01:04:40,390
these addresses, we can see
2730,2970 2970,3570 3570,3720 3720,3870 3870,4050

2135
01:04:40,390 --> 01:04:41,440
that they're in the colonel,
4050,4200 4200,4350 4350,4470 4470,4530 4530,5100

2136
01:04:41,710 --> 01:04:43,090
um just by the eight
5370,5790 5790,6060 6060,6240 6240,6570 6570,6750

2137
01:04:43,090 --> 01:04:44,640
zero zero zero.
6750,6960 6960,7440 7440,8010

2138
01:04:44,760 --> 01:04:46,500
Um, which makes sense because
120,540 540,840 840,1080 1080,1410 1410,1860

2139
01:04:46,500 --> 01:04:49,200
we declared statically right, so
1860,2220 2820,3450 3450,4020 4020,4260 4260,4560

2140
01:04:49,200 --> 01:04:50,220
in demos, if I go
4560,4740 4740,5190 5190,5280 5280,5400 5400,5580

2141
01:04:50,220 --> 01:04:51,780
here they're declared here.
5580,5940 5940,6060 6060,6510 6510,6900

2142
01:04:52,000 --> 01:04:53,020
And so they're basically they're
120,330 330,420 420,570 570,990 990,1140

2143
01:04:53,020 --> 01:04:54,460
sitting somewhere in the kernel
1140,1440 1440,1830 1830,1950 1950,2010 2010,2580

2144
01:04:54,820 --> 01:04:56,590
and they're all cars are
2940,3120 3120,3270 3270,3450 3450,4050 4050,4710

2145
01:04:56,860 --> 01:04:58,990
arcs or arvey is an
4980,5640 5640,5820 5820,6540 6780,6990 6990,7110

2146
01:04:58,990 --> 01:05:00,250
array of car stars and
7110,7410 7410,7500 7500,7800 7800,8250 8250,8370

2147
01:05:00,250 --> 01:05:01,660
so I imagined each element.
8370,8550 8550,8610 8610,9060 9060,9270 9270,9780

2148
01:05:01,980 --> 01:05:03,280
A points to.
120,360 360,780 780,1230

2149
01:05:04,320 --> 01:05:06,870
Points to disown string right,
0,390 390,780 1110,1860 1860,2190 2190,2550

2150
01:05:07,020 --> 01:05:08,280
so it's an array of
2700,3060 3450,3570 3570,3660 3660,3870 3870,3960

2151
01:05:08,280 --> 01:05:09,080
pointers.
3960,4560

2152
01:05:10,420 --> 01:05:11,080
I see.
120,240 240,510

2153
01:05:11,510 --> 01:05:12,000
MHM.
90,360

2154
01:05:17,060 --> 01:05:19,700
Don't try and like.
1200,1560 1560,1830 1830,1950 1950,2490

2155
01:05:24,700 --> 01:05:25,780
I also have a question
120,300 300,720 720,840 840,900 900,1200

2156
01:05:25,780 --> 01:05:27,820
about this, um, the Dollar
1200,1440 1440,1860 1890,2160 2160,2580 2640,3240

2157
01:05:27,820 --> 01:05:29,040
three version of.
3240,3570 3570,3960 3960,4140

2158
01:05:29,250 --> 01:05:32,160
The array has if I
270,900 900,1560 2130,2880 2880,3090 3090,3180

2159
01:05:32,160 --> 01:05:34,080
look at these addresses the
3180,3570 3570,3690 3690,3900 3900,4710 4950,5100

2160
01:05:34,080 --> 01:05:35,060
first one is.
5100,5340 5340,5460 5460,5760

2161
01:05:35,180 --> 01:05:38,000
Suffixed by 38, the second
120,810 810,990 990,1830 2100,2250 2610,2940

2162
01:05:38,000 --> 01:05:39,500
one is suffixed by forty
2940,3060 3060,3150 3150,3600 3600,3780 3780,4440

2163
01:05:39,650 --> 01:05:40,820
and the third one is
4590,4680 4680,4800 4800,5070 5070,5220 5220,5760

2164
01:05:40,970 --> 01:05:42,380
48.
5910,7020

2165
01:05:42,500 --> 01:05:44,570
Which is not uniform, even
120,420 420,870 870,1170 1170,1830 1830,2190

2166
01:05:44,570 --> 01:05:46,100
though the length of each
2190,2580 2580,2700 2700,3030 3030,3150 3150,3720

2167
01:05:46,130 --> 01:05:48,290
of the three arguments is
3750,3810 3810,3960 3960,4230 4230,5070 5700,5910

2168
01:05:48,290 --> 01:05:50,270
three so why, why are
5910,6330 6840,7080 7080,7530 7530,7740 7740,7890

2169
01:05:50,270 --> 01:05:53,120
they different, a not in
7890,7980 7980,8520 8760,9450 9630,10380 10380,10740

2170
01:05:53,150 --> 01:05:54,290
I'm not a hundred percent
10770,10890 10890,11040 11040,11070 11070,11340 11340,11910

2171
01:05:54,380 --> 01:05:55,790
certain my guess is that
12000,12690 12690,12900 12900,13170 13170,13290 13290,13410

2172
01:05:55,790 --> 01:05:57,110
this is an attempt to
13410,13590 13590,13680 13680,13800 13800,14310 14310,14730

2173
01:05:57,110 --> 01:05:58,500
align things.
14730,15180 15180,15900

2174
01:05:58,700 --> 01:05:59,720
I'm.
120,840

2175
01:06:00,050 --> 01:06:02,060
Right, so to get them
90,420 420,930 1410,1560 1560,1770 1770,2100

2176
01:06:02,060 --> 01:06:05,000
on a reasonable alignment, it
2100,2250 2250,2370 2370,3210 3420,4140 4650,5040

2177
01:06:05,000 --> 01:06:06,410
is uniform in texas, people
5040,5220 5220,5670 5670,5730 5730,6150 6150,6450

2178
01:06:06,410 --> 01:06:07,340
are pointing up.
6450,6510 6510,6810 6810,7140

2179
01:06:08,430 --> 01:06:13,470
Oh yeah, yeah yeah see
90,510 1710,2400 2400,3000 3060,4950 4950,5130

2180
01:06:13,470 --> 01:06:16,260
it now right, thanks so
5130,5250 5250,5670 6060,6450 6450,7080 7530,7920

2181
01:06:16,260 --> 01:06:17,460
you'll sometimes see where stray
7920,8040 8040,8460 8460,8610 8610,8790 8790,9120

2182
01:06:17,460 --> 01:06:19,590
things are laid out strangely
9120,9360 9360,9780 9810,10110 10110,10290 10290,11250

2183
01:06:19,650 --> 01:06:20,520
where there might be two
11310,11580 11580,11730 11730,11910 11910,11970 11970,12180

2184
01:06:20,520 --> 01:06:22,200
things as strange offsets and
12180,12630 12630,12990 12990,13260 13260,13770 13770,13860

2185
01:06:22,200 --> 01:06:23,550
that's just because not everything
13860,14070 14070,14460 14460,14700 14700,14880 14880,15210

2186
01:06:23,550 --> 01:06:25,740
is naturally the same sized.
15210,15450 15780,16500 16500,16590 16590,16860 16860,17400

2187
01:06:26,300 --> 01:06:29,740
Okay, any other questions.
180,1950 2220,2460 2460,2670 2670,3390

2188
01:06:30,900 --> 01:06:31,380
Yeah.
0,390

2189
01:06:36,450 --> 01:06:36,820
MHM.
90,300

2190
01:06:37,230 --> 01:06:39,510
Okay, um, we can skip
30,600 690,1530 1530,1650 1650,1770 1770,2310

2191
01:06:39,510 --> 01:06:41,060
the system oh.
2310,2460 2460,2940 2940,3420

2192
01:06:41,150 --> 01:06:43,370
And so another useful function
90,720 750,990 990,1320 1320,1830 1830,2310

2193
01:06:43,370 --> 01:06:46,250
that we get from gddr
2310,2490 2490,2670 2670,3120 3120,3780 3780,5190

2194
01:06:46,460 --> 01:06:49,220
um, instead of just break
5400,6210 6660,7440 7440,7560 7560,7890 7890,8160

2195
01:06:49,220 --> 01:06:51,230
points, um, they're also watch
8160,8790 8850,9270 9270,9420 9420,9870 9870,10170

2196
01:06:51,230 --> 01:06:52,400
points and we can also
10170,10620 10620,10770 10770,10890 10890,11010 11010,11340

2197
01:06:52,400 --> 01:06:55,010
set a conditional break points
11340,11970 12150,12480 12480,13110 13110,13350 13350,13950

2198
01:06:55,250 --> 01:06:56,360
so.
14190,14820

2199
01:06:57,770 --> 01:06:59,660
I'll just briefly go over
930,1530 1530,1890 1890,2460 2460,2640 2640,2820

2200
01:06:59,660 --> 01:07:01,000
that.
2820,3360

2201
01:07:02,160 --> 01:07:04,470
Run demo six so we
120,750 750,1020 1020,1740 2040,2280 2280,2430

2202
01:07:04,470 --> 01:07:06,840
can set inside this function,
2430,2700 2700,3390 3600,4140 4140,4320 4320,4800

2203
01:07:06,840 --> 01:07:08,070
we can watch so we
4800,4920 4920,5310 5310,5790 5790,5910 5910,6030

2204
01:07:08,070 --> 01:07:09,330
can set a watch point,
6030,6150 6150,6300 6300,6360 6360,6660 6660,7290

2205
01:07:09,540 --> 01:07:11,370
um I think here you'll
7500,8160 8340,8520 8520,8790 8790,9090 9090,9330

2206
01:07:11,370 --> 01:07:13,360
see, um.
9330,9870 10170,10680

2207
01:07:15,680 --> 01:07:16,670
Yeah, so here you'll see
120,330 330,510 510,780 780,960 960,1110

2208
01:07:16,670 --> 01:07:19,130
what Luke was talking about
1110,1950 2040,2610 2610,2790 2790,3180 3180,3570

2209
01:07:19,130 --> 01:07:20,720
where a we see that
3570,4200 4410,4710 4710,4860 4860,5010 5010,5160

2210
01:07:20,720 --> 01:07:22,460
some has been optimized out
5160,5490 5490,5670 5670,5880 5880,6480 6480,6900

2211
01:07:22,670 --> 01:07:24,170
likely because it's just being
7110,7620 7620,7920 7920,8100 8100,8340 8340,8610

2212
01:07:24,680 --> 01:07:25,920
a teenager or something.
9120,9150 9150,9600 9600,9720 9720,10080

2213
01:07:27,060 --> 01:07:27,990
We can look even at
120,360 360,480 480,720 720,930 930,1050

2214
01:07:27,990 --> 01:07:29,280
the assembly for this right,
1050,1200 1200,1680 1680,1830 1830,2100 2100,2340

2215
01:07:29,280 --> 01:07:30,630
so we can get out
2340,2520 2520,2610 2610,2820 3030,3210 3210,3690

2216
01:07:31,470 --> 01:07:32,440
less.
4530,5280

2217
01:07:32,980 --> 01:07:34,570
And indeed, we can see
120,930 930,1410 1410,1470 1470,1560 1560,1710

2218
01:07:34,570 --> 01:07:35,800
that all just being um.
1710,1860 1860,2040 2040,2190 2190,2490 2490,2940

2219
01:07:36,480 --> 01:07:37,320
It's all just being done
120,300 300,480 480,630 630,780 780,960

2220
01:07:37,320 --> 01:07:38,220
on the stack, it looks
960,1050 1050,1140 1140,1470 1470,1620 1620,1860

2221
01:07:38,220 --> 01:07:39,060
like to me.
1860,2040 2040,2130 2130,2400

2222
01:07:40,280 --> 01:07:41,180
Oh, no, it's always been
120,300 300,450 450,570 570,840 840,1020

2223
01:07:41,180 --> 01:07:42,080
done in s zero s
1020,1200 1200,1290 1290,1440 1440,1740 1740,1920

2224
01:07:42,080 --> 01:07:43,790
zero one three so here
1920,2250 2250,2550 2550,3030 3240,3420 3420,3630

2225
01:07:43,790 --> 01:07:45,170
you can see the lie.
3630,3810 3810,3930 3930,4080 4080,4500 4500,5010

2226
01:07:47,060 --> 01:07:48,380
Compiler decided even to use
120,600 600,990 990,1200 1200,1290 1290,1440

2227
01:07:48,380 --> 01:07:52,010
the quality safety registers and
1440,1560 1560,1920 1920,2250 2250,2940 4470,5070

2228
01:07:52,040 --> 01:07:53,180
so we can set things
5100,5340 5340,5460 5460,5610 5610,5880 5880,6240

2229
01:07:53,180 --> 01:07:55,880
like we do watch on.
6240,6870 6870,7050 7050,7290 7290,8100 8100,8940

2230
01:07:56,910 --> 01:07:57,980
Aye.
690,1380

2231
01:07:58,360 --> 01:07:59,980
Alright we haven't declared I
120,600 780,960 960,1200 1200,1560 1560,1740

2232
01:07:59,980 --> 01:08:01,300
yet cause we're not inside.
1740,1980 1980,2130 2130,2220 2220,2430 2430,3060

2233
01:08:02,760 --> 01:08:04,320
We're not inside the for
0,210 210,420 420,1200 1200,1350 1350,1560

2234
01:08:04,320 --> 01:08:06,940
loop so we step.
1560,2280 2460,2820 2820,3270 3270,4080

2235
01:08:06,880 --> 01:08:08,560
Through the sea instructions, now
0,360 360,450 450,660 660,1470 1470,1680

2236
01:08:08,560 --> 01:08:10,540
if we do information for
1680,1830 1830,1950 1950,2400 3060,3570 3570,3660

2237
01:08:10,540 --> 01:08:11,680
the locals, we see we
3660,3780 3780,4350 4350,4500 4500,4680 4680,4800

2238
01:08:11,680 --> 01:08:13,030
get I we can even
4800,5010 5010,5520 5550,5790 5790,5910 5910,6150

2239
01:08:13,030 --> 01:08:16,120
watch a watch point on
6150,6570 6570,6570 8040,8340 8340,8820 8820,9240

2240
01:08:16,120 --> 01:08:17,460
song.
9240,9900

2241
01:08:17,640 --> 01:08:19,410
So now anytime that some
120,480 480,810 810,1410 1410,1560 1560,1890

2242
01:08:19,410 --> 01:08:22,320
changes will actually get a
1890,2790 2850,3210 3210,3630 3630,4230 4320,4800

2243
01:08:22,320 --> 01:08:24,510
notification so we can continue
4800,5730 5730,5880 5880,5970 5970,6090 6090,6990

2244
01:08:24,810 --> 01:08:25,800
and then.
7290,7500 7500,8040

2245
01:08:25,990 --> 01:08:27,160
We'll get a delete here
90,360 360,510 510,600 600,960 960,1260

2246
01:08:27,160 --> 01:08:29,470
because some has been moved
1260,1710 1710,2130 2130,2460 2460,2730 2730,3570

2247
01:08:29,530 --> 01:08:30,610
so we can't we can't
3630,3840 3840,3930 3930,4320 4350,4500 4500,4710

2248
01:08:30,610 --> 01:08:32,110
actually watch it, um, we
4710,5040 5040,5280 5280,5580 5700,6090 6090,6210

2249
01:08:32,110 --> 01:08:33,850
can even do things like
6210,6390 6390,6630 6630,6840 6840,7200 7200,7950

2250
01:08:33,880 --> 01:08:36,730
a break point on some
7980,8220 8220,8880 8880,9690 9900,10500 10500,10830

2251
01:08:36,730 --> 01:08:37,390
too so this is a
10830,11130 11130,11220 11220,11340 11340,11430 11430,11490

2252
01:08:37,390 --> 01:08:40,060
conditional break point if.
11490,11970 11970,12210 12210,12810 13140,14010

2253
01:08:40,260 --> 01:08:42,000
Well let's actually see was
180,450 450,720 720,990 990,1320 1320,1920

2254
01:08:42,000 --> 01:08:43,650
I currently so eyes currently
1920,2160 2160,2790 2790,2940 2940,3210 3210,3570

2255
01:08:43,650 --> 01:08:45,780
one let's say I think
3570,4110 4170,4620 4620,5220 5250,5460 5460,5700

2256
01:08:45,780 --> 01:08:47,310
my loop is breaking and
5700,5850 5850,6180 6180,6330 6330,6900 6900,7230

2257
01:08:47,310 --> 01:08:49,200
whenever I is five well
7230,7590 7590,7800 7800,7950 7950,8640 8730,9120

2258
01:08:49,200 --> 01:08:50,250
if I want to specifically
9120,9210 9210,9330 9330,9540 9540,9600 9600,10170

2259
01:08:50,250 --> 01:08:52,050
debunk that case I can
10170,10590 10590,10860 10860,11550 11580,11820 11820,11970

2260
01:08:52,050 --> 01:08:53,500
set a break point.
11970,12150 12150,12210 12210,12510 12510,13260

2261
01:08:53,580 --> 01:08:58,460
On some too.
120,1530 2190,2730 2730,3360

2262
01:08:58,550 --> 01:09:02,040
If I equal five.
90,900 930,1950 2310,2670 2670,3390

2263
01:09:02,850 --> 01:09:04,050
So now we have this
570,810 810,1290 1290,1410 1410,1590 1590,1770

2264
01:09:04,050 --> 01:09:05,340
break point, and if we
1770,2070 2070,2580 2610,2850 2850,2940 2940,3060

2265
01:09:05,340 --> 01:09:07,200
continue along we'll get to
3060,3570 3570,4260 4290,4620 4620,4830 4830,4920

2266
01:09:07,200 --> 01:09:09,390
some too, and we can
4920,5250 5250,5850 6030,6810 6840,6960 6960,7110

2267
01:09:09,390 --> 01:09:10,890
see that it actually printed
7110,7500 7500,7770 7770,7890 7890,8220 8220,8610

2268
01:09:10,890 --> 01:09:13,260
out the first couple values
8610,9090 9210,9510 9510,9810 9810,10080 10080,10980

2269
01:09:13,320 --> 01:09:14,490
and so we only break
11040,11340 11340,11460 11460,11580 11580,11910 11910,12210

2270
01:09:14,490 --> 01:09:16,470
now on some too if.
12210,12480 12480,12600 12600,12900 12900,13410 13620,14190

2271
01:09:17,480 --> 01:09:18,860
If a if we hit
120,450 450,720 720,1170 1170,1290 1290,1500

2272
01:09:18,860 --> 01:09:20,340
that break point condition.
1500,1680 1680,1920 1920,2220 2220,2730

2273
01:09:21,280 --> 01:09:22,270
And so that's a it
120,270 270,360 360,630 630,900 900,1110

2274
01:09:22,270 --> 01:09:23,170
can be again can be
1110,1230 1230,1470 1470,1800 1800,1890 1890,2010

2275
01:09:23,170 --> 01:09:24,160
useful if you want to
2010,2460 2460,2580 2580,2700 2700,2910 2910,3000

2276
01:09:24,160 --> 01:09:25,870
debug specific education of your
3000,3450 3450,3900 3900,4470 4470,4590 4590,4710

2277
01:09:25,870 --> 01:09:27,580
code and watch points can
4710,5220 5310,5700 5700,5970 5970,6270 6270,6420

2278
01:09:27,580 --> 01:09:29,830
be useful if for instance
6420,6540 6540,7290 7710,7920 7920,8070 8070,8670

2279
01:09:29,830 --> 01:09:30,880
you think that something shouldn't
8670,8820 8820,9000 9000,9120 9120,9450 9450,9720

2280
01:09:30,880 --> 01:09:32,710
be changing, but you suspect
9720,9840 9840,10650 10710,11040 11040,11190 11190,11550

2281
01:09:32,710 --> 01:09:34,870
that it is or you
11550,11700 11700,11790 11790,12480 12510,13470 13500,13710

2282
01:09:34,870 --> 01:09:35,800
think that something is going
13710,13860 13860,13980 13980,14280 14280,14370 14370,14640

2283
01:09:35,800 --> 01:09:37,570
wrong every time you change
14640,15030 15030,15270 15270,15810 15840,16110 16110,16410

2284
01:09:37,570 --> 01:09:39,080
a certain variable.
16410,16440 16440,16770 16770,17370

2285
01:09:40,000 --> 01:09:41,170
And so that's that's a
240,390 390,510 510,840 840,1140 1140,1410

2286
01:09:41,170 --> 01:09:42,460
it's one one usage for
1410,1620 1620,1950 1950,2280 2280,2580 2580,2700

2287
01:09:42,460 --> 01:09:44,950
that and um the last
2700,3030 3870,4260 4260,4620 4620,4890 4890,5190

2288
01:09:44,950 --> 01:09:45,580
thing I want to talk
5190,5310 5310,5370 5370,5520 5520,5580 5580,5820

2289
01:09:45,580 --> 01:09:48,400
about today is trucks, a
5820,6270 6270,6780 6780,7080 7080,7830 8100,8640

2290
01:09:48,400 --> 01:09:50,260
structure pretty important, they'll come
8640,9090 9090,9330 9330,10020 10050,10350 10350,10500

2291
01:09:50,260 --> 01:09:52,500
up in a.
10500,10860 10890,11490 11820,12480

2292
01:09:53,050 --> 01:09:55,690
In the labs often and
90,390 390,510 510,990 990,1710 1950,2730

2293
01:09:56,050 --> 01:09:57,240
also.
3090,3780

2294
01:09:57,310 --> 01:09:59,230
Eso, one ask I'll talk
90,510 510,720 720,1410 1560,1800 1800,2010

2295
01:09:59,230 --> 01:10:00,310
a little bit about the
2010,2040 2040,2250 2250,2400 2400,2880 2940,3090

2296
01:10:00,310 --> 01:10:01,840
waste trucks are laid out
3090,3420 3420,3840 3840,4200 4200,4440 4440,4620

2297
01:10:01,840 --> 01:10:03,180
in memory.
4620,4680 4680,5370

2298
01:10:03,750 --> 01:10:04,620
And so a structure is
210,390 390,540 540,630 630,990 990,1080

2299
01:10:04,620 --> 01:10:07,350
basically a it's a continued
1080,1830 2040,2610 2820,3000 3000,3090 3090,3810

2300
01:10:07,350 --> 01:10:08,730
contiguous area of memory, so
3810,4350 4350,4680 4680,4770 4770,5070 5070,5190

2301
01:10:08,730 --> 01:10:09,810
if we have some structure.
5190,5280 5280,5370 5370,5460 5460,5670 5670,6270

2302
01:10:11,510 --> 01:10:13,490
And we have like field
90,450 450,570 570,960 960,1500 1710,2070

2303
01:10:13,490 --> 01:10:15,800
one field two field three.
2070,2610 2610,2970 2970,3420 3420,3750 3750,4380

2304
01:10:17,110 --> 01:10:18,220
When we make that shock
30,300 300,420 420,630 630,810 810,1140

2305
01:10:18,220 --> 01:10:19,000
those fields are going to
1140,1350 1350,1650 1650,1710 1710,1830 1830,1920

2306
01:10:19,000 --> 01:10:20,530
be a line next to
1920,2340 2370,2670 2670,3090 3090,3330 3330,3450

2307
01:10:20,530 --> 01:10:21,620
each other.
3450,3630 3630,4140

2308
01:10:22,230 --> 01:10:23,340
In memory, you can kind
210,360 360,750 750,870 870,1110 1110,1320

2309
01:10:23,340 --> 01:10:24,750
of think of this like
1320,1410 1410,1590 1590,1680 1680,2160 2220,2730

2310
01:10:24,750 --> 01:10:26,070
an array, but f one
2730,2820 2820,3450 3450,3630 3630,3840 3840,4050

2311
01:10:26,070 --> 01:10:27,030
f two f three can
4050,4230 4230,4410 4410,4650 4650,4860 4860,5010

2312
01:10:27,030 --> 01:10:28,380
all be different types.
5010,5160 5160,5280 5280,5580 5580,6090

2313
01:10:28,380 --> 01:10:31,830
And, um, we can um,
0,690 900,1620 2070,2400 2400,3030 3060,3450

2314
01:10:31,830 --> 01:10:33,180
pass them as functions, usually
3450,3810 3810,3900 3900,4020 4020,4500 4500,4800

2315
01:10:33,180 --> 01:10:34,800
they pass them as arguments
4800,4950 4950,5730 5730,5820 5820,5910 5910,6420

2316
01:10:34,800 --> 01:10:36,720
to functions, usually they pass
6420,6510 6510,7320 7350,7920 7920,8040 8040,8340

2317
01:10:36,720 --> 01:10:38,700
by reference, so here I've
8340,8490 8490,9240 9330,9780 9780,10170 10170,10320

2318
01:10:38,700 --> 01:10:40,680
made a struck person with
10320,10500 10500,10560 10560,10920 10920,11670 11760,12300

2319
01:10:40,680 --> 01:10:43,620
two integer arguments and.
12300,12540 12540,13110 13110,14040 14280,15030

2320
01:10:44,120 --> 01:10:46,010
I'm passing them a passing
120,450 450,840 840,1350 1470,1650 1650,2010

2321
01:10:46,010 --> 01:10:47,330
a person as an argument
2010,2070 2070,2430 2430,2550 2550,2640 2640,3330

2322
01:10:47,330 --> 01:10:50,780
person and printing out some
3330,3990 4320,4980 5040,6060 6060,6420 6420,6780

2323
01:10:50,780 --> 01:10:52,580
of that information, so if
6780,6870 6870,7080 7080,7710 8160,8460 8460,8580

2324
01:10:52,580 --> 01:10:54,290
we hop into G D
8580,8670 8670,8940 8940,9630 9630,9750 9750,10290

2325
01:10:54,290 --> 01:10:55,250
and let's delete all our
10290,10410 10410,10650 10650,10920 10920,11130 11130,11250

2326
01:10:55,250 --> 01:10:56,780
break points and watch points
11250,11490 11490,11760 11760,11880 11880,12120 12120,12780

2327
01:10:56,990 --> 01:10:58,040
and now we can set
12990,13380 13380,13590 13590,13710 13710,13860 13860,14040

2328
01:10:58,040 --> 01:11:00,980
a break point at person.
14040,14070 14070,14280 14280,14670 14670,15330 16320,16980

2329
01:11:01,680 --> 01:11:03,900
And it's good for you
120,990 1230,1350 1350,1590 1590,1800 1800,2340

2330
01:11:04,290 --> 01:11:07,040
and one seven's demo.
2730,2940 2940,3480 3630,4080 4080,4140 4140,4800

2331
01:11:07,640 --> 01:11:08,540
We can see that now
0,240 240,360 360,570 570,690 690,900

2332
01:11:08,540 --> 01:11:09,320
we're here and so if
900,1020 1020,1350 1350,1470 1470,1590 1590,1680

2333
01:11:09,320 --> 01:11:11,240
we type I frame, we
1680,1770 1770,2100 2100,2100 2100,3060 3300,3600

2334
01:11:11,240 --> 01:11:13,460
can see that we have
3600,3750 3750,4290 4290,5010 5040,5370 5370,5820

2335
01:11:13,460 --> 01:11:15,020
an argument p.
5820,6000 6000,6600 6600,7200

2336
01:11:15,310 --> 01:11:17,440
And indeed, we can see
90,690 690,1350 1410,1830 1830,2040 2040,2220

2337
01:11:17,440 --> 01:11:19,630
if we do French p.
2220,2370 2370,2460 2460,2820 2850,3720 3750,4410

2338
01:11:20,780 --> 01:11:22,010
If we can even tell
120,630 630,720 720,870 870,1080 1080,1350

2339
01:11:22,010 --> 01:11:23,750
that it's obstruct person at
1350,1500 1500,1650 1650,2070 2070,2760 2850,3090

2340
01:11:23,750 --> 01:11:27,470
this address and we can
3090,3270 3270,4050 5250,5940 6330,6510 6510,6810

2341
01:11:27,470 --> 01:11:28,850
if we de reference it.
6810,7020 7020,7110 7110,7320 7320,7800 7800,8190

2342
01:11:30,210 --> 01:11:31,200
G B will tell us
90,450 450,600 600,720 720,960 960,1080

2343
01:11:31,200 --> 01:11:33,000
exactly what p looks like
1080,1620 1620,1950 1980,2250 2250,2520 2520,2880

2344
01:11:33,000 --> 01:11:34,960
it has ID 1215.
2880,3030 3030,3210 3210,3510 3510,4560

2345
01:11:35,240 --> 01:11:36,700
Age 22.
60,450 450,750 750,1110

2346
01:11:37,660 --> 01:11:38,860
And just to show kind
420,780 780,960 960,1080 1080,1410 1410,1620

2347
01:11:38,860 --> 01:11:40,960
of how things are laid
1620,1680 1680,1920 1920,2340 2340,2850 3150,3720

2348
01:11:40,960 --> 01:11:41,880
out.
3720,4350

2349
01:11:42,060 --> 01:11:43,800
You can take this address
120,300 300,480 480,780 780,1020 1020,1860

2350
01:11:43,800 --> 01:11:46,560
and we say at this
1860,2070 2070,2640 3690,4200 4200,4380 4380,4620

2351
01:11:46,560 --> 01:11:51,120
address, if we look.
4620,5580 6120,6300 6300,6480 6480,7080

2352
01:11:51,870 --> 01:11:55,400
I remember exactly.
570,1470 2340,2970 2970,3810

2353
01:11:57,380 --> 01:11:58,960
Shady.
1800,2340

2354
01:12:02,180 --> 01:12:03,470
So if we again so
1020,1260 1260,1380 1380,1680 1740,2130 2130,2310

2355
01:12:03,470 --> 01:12:04,400
we can use this to
2310,2430 2430,2610 2610,2850 2850,3120 3120,3240

2356
01:12:04,400 --> 01:12:06,960
debug our structures.
3240,4050 4080,4500 4500,5700

2357
01:12:07,900 --> 01:12:10,780
In in the code, we
900,1350 1650,1950 1950,2070 2070,2940 3030,3780

2358
01:12:11,020 --> 01:12:11,770
can take a look at
4020,4260 4260,4440 4440,4500 4500,4680 4680,4770

2359
01:12:11,770 --> 01:12:13,300
what's going on.
4770,4980 4980,5310 5310,5790

2360
01:12:13,660 --> 01:12:15,550
With structures this way so
120,570 570,1290 1290,1500 1500,1770 1800,2010

2361
01:12:15,550 --> 01:12:17,230
G D is a super
2010,2130 2130,2730 2820,3330 3330,3420 3420,3690

2362
01:12:17,230 --> 01:12:19,270
powerful tool not just for
3690,4140 4140,4560 4560,4800 4800,5160 5160,5730

2363
01:12:19,420 --> 01:12:21,010
stepping through code, but also
5880,6510 6510,6750 6750,7050 7050,7170 7170,7470

2364
01:12:21,010 --> 01:12:24,070
for examining all kinds of
7470,7680 7680,8580 8910,9570 9570,10020 10020,10530

2365
01:12:25,060 --> 01:12:26,890
potentially problematic pieces in your
11520,12180 12180,12780 12780,13140 13140,13230 13230,13350

2366
01:12:26,890 --> 01:12:28,900
code and looking at arguments
13350,13890 13890,14250 14250,14550 14550,14640 14640,15360

2367
01:12:28,900 --> 01:12:30,040
and stack frames and things
15360,15480 15480,15840 15840,16170 16170,16260 16260,16500

2368
01:12:30,040 --> 01:12:31,450
like that, and this will
16500,16650 16650,16980 17310,17640 17640,17760 17760,17910

2369
01:12:31,450 --> 01:12:33,220
be hopefully will be useful
17910,18240 18240,18750 18750,18900 18900,18990 18990,19680

2370
01:12:33,280 --> 01:12:34,740
in the next lab.
19740,20070 20070,20130 20130,20430 20430,20970

2371
01:12:35,270 --> 01:12:36,350
When you have to work
150,480 480,660 660,810 810,930 930,1230

2372
01:12:36,350 --> 01:12:38,480
with, um with stack frames
1230,1650 1800,2370 2370,2610 2610,2910 2910,3360

2373
01:12:38,480 --> 01:12:39,900
and with assembly code.
3360,3540 3540,3750 3750,4170 4170,4560

2374
01:12:40,080 --> 01:12:42,360
So that's that's mostly what
60,840 960,1560 1590,1980 1980,2250 2250,2340

2375
01:12:42,360 --> 01:12:43,170
I wanted to talk about
2340,2400 2400,2640 2640,2730 2730,2940 2940,3150

2376
01:12:43,170 --> 01:12:44,460
today, so um with the
3150,3450 3450,3930 3930,4200 4200,4320 4320,4440

2377
01:12:44,460 --> 01:12:47,040
last kind of seven minutes
4440,4770 4770,4980 4980,5280 5970,6450 6450,7020

2378
01:12:47,040 --> 01:12:48,840
of lecture, I'll open it
7020,7410 7410,7890 7890,8460 8460,8730 8730,8820

2379
01:12:48,840 --> 01:12:50,610
up to any any other
8820,9000 9000,9510 9780,10200 10200,10380 10380,10590

2380
01:12:50,610 --> 01:12:52,060
questions you guys have.
10590,11130 11130,11280 11280,11460 11460,11850

2381
01:12:59,510 --> 01:12:59,990
I had a bit of
90,240 240,330 330,390 390,480 480,570

2382
01:12:59,990 --> 01:13:03,050
a tangential question who is
570,660 660,1260 1260,1830 2460,3270 3330,3630

2383
01:13:03,050 --> 01:13:05,150
who manages the creation of
3630,4050 4050,4590 4590,5010 5070,5610 5610,5730

2384
01:13:05,150 --> 01:13:07,250
compilers from to get from
5730,6450 6450,6930 7110,7260 7260,7590 7590,7830

2385
01:13:07,250 --> 01:13:09,200
c to various um instruction
7830,8220 8220,8370 8370,8970 9060,9360 9360,9780

2386
01:13:09,200 --> 01:13:10,460
set architectures is that the
9780,10020 10020,10680 10680,10740 10740,10920 10920,11040

2387
01:13:10,460 --> 01:13:11,900
creator of the instruction set
11040,11670 11670,11850 11850,11940 11940,12300 12300,12480

2388
01:13:11,900 --> 01:13:13,460
architecture is the third parties
12480,13080 13080,13170 13170,13320 13320,13620 13620,14040

2389
01:13:13,460 --> 01:13:14,320
like that.
14040,14340 14340,14580

2390
01:13:14,500 --> 01:13:17,620
Um, I believe that it
120,900 1290,1470 1470,2460 2460,3030 3030,3240

2391
01:13:17,620 --> 01:13:19,090
is not the creative the
3240,3720 3720,4080 4080,4170 4170,4620 4620,4710

2392
01:13:19,090 --> 01:13:20,740
instruction set so it's often
4710,5250 5250,5580 5580,5910 5910,6060 6060,6360

2393
01:13:20,740 --> 01:13:22,540
a third party, um, so
6360,6420 6420,6720 6720,7320 7680,8040 8040,8160

2394
01:13:22,540 --> 01:13:23,950
the two big c compilers
8160,8280 8280,8520 8520,8760 8760,8970 8970,9570

2395
01:13:23,950 --> 01:13:25,120
that you'll see refer to
9570,9690 9690,9870 9870,10050 10050,10410 10410,10740

2396
01:13:25,120 --> 01:13:27,550
GCC which is maintained by
10740,11640 11820,12150 12150,12270 12270,12930 12930,13170

2397
01:13:27,550 --> 01:13:28,600
I think the gene you
13170,13320 13320,13590 13590,13740 13740,14040 14040,14220

2398
01:13:28,600 --> 01:13:32,260
foundation and A C langer
14220,15150 15570,16260 16260,16980 17010,17340 17340,17880

2399
01:13:32,260 --> 01:13:34,630
llvm, which is its own
17880,18780 18930,19410 19410,19800 19800,20010 20010,20250

2400
01:13:34,630 --> 01:13:36,220
thing, so I think you
20250,20610 20610,20970 20970,21090 21090,21420 21570,21840

2401
01:13:36,220 --> 01:13:37,540
know you can find I
21840,21900 21900,22080 22080,22230 22230,22860 23010,23160

2402
01:13:37,540 --> 01:13:39,070
believe llvm is even open
23160,23520 23520,24120 24120,24210 24210,24420 24420,24690

2403
01:13:39,070 --> 01:13:40,720
ports so you can find
24690,25140 25140,25350 25350,25560 25560,25710 25710,26340

2404
01:13:40,840 --> 01:13:41,840
'em.
26460,27150

2405
01:13:42,060 --> 01:13:42,870
You can, you can find
120,300 300,420 420,600 600,690 690,930

2406
01:13:42,870 --> 01:13:44,040
the code specifically that does
930,990 990,1290 1290,1740 1740,1860 1860,2100

2407
01:13:44,040 --> 01:13:45,570
this a when a new
2100,2490 2610,2970 2970,3330 3330,3450 3450,3630

2408
01:13:45,570 --> 01:13:47,730
instruction set is released such
3630,4260 4260,4680 4680,4920 4920,5610 5610,5790

2409
01:13:47,730 --> 01:13:49,620
as risk five that calling
5790,5940 5940,6180 6180,6690 6780,7260 7260,7680

2410
01:13:49,620 --> 01:13:51,120
convention document as well as
7680,8190 8190,8700 8700,8850 8850,9060 9060,9180

2411
01:13:51,120 --> 01:13:53,040
all of those instruction documents,
9180,9420 9420,9510 9510,9900 9900,10410 10410,11100

2412
01:13:53,280 --> 01:13:54,750
um I think carefully I
11340,11850 11850,11850 11850,12330 12330,12690 12690,12810

2413
01:13:54,750 --> 01:13:55,920
assume there's a high level
12810,13110 13110,13290 13290,13440 13440,13650 13650,13980

2414
01:13:55,920 --> 01:13:57,780
of cooperation between the compiler
13980,14070 14070,14910 14910,15270 15270,15360 15360,15840

2415
01:13:57,780 --> 01:13:59,220
designer and the instruction set
15840,16380 16380,16470 16470,16560 16560,17070 17070,17280

2416
01:13:59,220 --> 01:14:01,100
designer, um.
17280,17940 18300,18900

2417
01:14:01,550 --> 01:14:03,110
But yeah a short answer
90,360 360,930 930,930 1140,1440 1440,1650

2418
01:14:03,110 --> 01:14:04,070
is I believe it's a
1650,1740 1740,2070 2070,2400 2400,2520 2520,2610

2419
01:14:04,070 --> 01:14:06,080
thirdparty who does it likely
2610,3750 3750,3900 3900,4110 4110,4260 4260,4620

2420
01:14:06,080 --> 01:14:08,150
with a lot of cooperation
4620,5100 5340,5700 5700,5910 5910,6000 6000,6690

2421
01:14:08,150 --> 01:14:08,960
from the people who make
6690,6840 6840,6960 6960,7230 7230,7290 7290,7500

2422
01:14:08,960 --> 01:14:10,520
the instruction set which five
7500,7560 7560,8010 8010,8250 8310,8700 8700,9060

2423
01:14:10,520 --> 01:14:11,580
is probably.
9060,9180 9180,9870

2424
01:14:12,030 --> 01:14:12,840
This five might be an
90,300 300,570 570,750 750,840 840,900

2425
01:14:12,840 --> 01:14:14,880
exception where because it came
900,1830 1920,2310 2310,2610 2610,2700 2700,2940

2426
01:14:14,880 --> 01:14:16,320
out of a research project,
2940,3030 3030,3090 3090,3240 3240,3660 3660,4380

2427
01:14:16,440 --> 01:14:18,000
they may have written the
4500,4890 4890,5100 5100,5310 5310,5640 5640,6060

2428
01:14:18,060 --> 01:14:19,980
compiler for it themselves.
6120,6690 6690,6960 6960,7050 7050,7950

2429
01:14:20,050 --> 01:14:20,980
Um, as well.
90,270 270,450 450,810

2430
01:14:21,410 --> 01:14:22,760
I I don't think Intel
90,360 360,510 510,780 780,1050 1050,1440

2431
01:14:22,760 --> 01:14:24,560
has for example has input
1440,1980 2010,2220 2220,2580 2580,2790 2790,3240

2432
01:14:24,590 --> 01:14:25,480
in a.
3270,3540 3540,3930

2433
01:14:25,850 --> 01:14:27,780
In GCC or llvm.
90,300 300,990 990,1170 1170,1830

2434
01:14:45,530 --> 01:14:46,840
Other questions.
90,390 390,1050

2435
01:14:54,650 --> 01:14:58,790
Okay, well, thanks for listening,
1170,2010 2370,3510 3690,4260 4260,4950 4950,5310

2436
01:14:58,790 --> 01:14:59,960
in that case I guess
5310,5400 5400,5610 5610,5940 5940,6150 6150,6480

2437
01:14:59,960 --> 01:15:01,180
we can.
6480,6630 6630,7410

2438
01:15:01,790 --> 01:15:03,260
You can end the lecture
90,270 270,960 960,1170 1170,1230 1230,1560

2439
01:15:03,260 --> 01:15:05,330
here, a five minutes to
1560,2040 2100,2640 2880,3330 3330,3540 3540,3630

2440
01:15:05,330 --> 01:15:07,340
spare, so have a nice
3630,3990 3990,4380 4680,5130 5130,5370 5370,5640

2441
01:15:07,340 --> 01:15:07,580
rest.
5640,5820

