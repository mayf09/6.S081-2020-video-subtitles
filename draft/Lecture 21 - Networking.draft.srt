1
00:00:06,110 --> 00:00:08,840
0,810 870,1590 1590,2130 2130,2430 2430,2730
Alright, hello everyone, welcome back

2
00:00:08,840 --> 00:00:10,180
0,300 300,810
from {}

3
00:00:10,780 --> 00:00:12,260
0,930
Thanksgiving.|

4
00:00:12,590 --> 00:00:15,020
0,570 600,990 990,1200 1200,1560
Can anyone hear me?|

5
00:00:15,390 --> 00:00:17,850
0,810 1140,1560 1890,2220 2220,2400 2400,2460
{Yep,good}.| Good alright, today I

6
00:00:17,850 --> 00:00:20,100
0,150 150,210 210,450 450,960 990,2250
want to talk about networking

7
00:00:20,370 --> 00:00:21,270
0,210 210,390 390,480 480,780 780,900
and how it relates to

8
00:00:21,270 --> 00:00:23,300
0,360 360,1110
operating systems.|
|

9
00:00:23,840 --> 00:00:24,890
0,360 360,600 600,780 780,840 840,1050
And a lot of this

10
00:00:24,890 --> 00:00:27,500
0,630 660,1110 1410,2070
is a {

11
00:00:27,780 --> 00:00:31,020
0,330 330,780 780,1950 1980,2790 2820,3240
-} geared towards lab, last

12
00:00:31,020 --> 00:00:33,210
0,750 780,1020 1020,1200 1200,1740 1800,2190
lab which you actually build

13
00:00:33,210 --> 00:00:34,680
0,360 420,930
some {}

14
00:00:35,320 --> 00:00:37,780
0,300 330,660 660,1020 1020,1500 1860,2460
{} network interface driver {},|
|

15
00:00:37,810 --> 00:00:39,260
0,330 330,420 420,930
some of this

16
00:00:39,380 --> 00:00:40,790
0,330 330,480 480,840 840,1350 1350,1410
care for general understanding of

17
00:00:40,790 --> 00:00:43,040
0,330 330,450 450,810 810,1650
how the network software

18
00:00:43,550 --> 00:00:45,230
0,630 630,690 690,1170 1170,1290 1290,1680
typically {} setup in operating

19
00:00:45,230 --> 00:00:47,450
0,690 990,1440 1590,1980 1980,2100 2100,2220
systems| and then we're going
|

20
00:00:47,450 --> 00:00:48,740
0,240 300,420 420,690 690,930 960,1290
to talk about the today's

21
00:00:48,740 --> 00:00:50,060
0,300 300,420 420,660 660,990 1020,1320
paper on live lock which

22
00:00:50,090 --> 00:00:53,620
0,570 570,780 1110,1620 1620,2190
illustrates a interesting danger

23
00:00:54,340 --> 00:00:56,460
0,210 210,600 600,960 960,1650
in network stack design.|

24
00:00:56,460 --> 00:00:58,260
0,330 330,660 690,930 930,1290 1350,1800
So first let me set

25
00:00:58,260 --> 00:01:00,570
0,90 90,390 390,930 960,1830 1830,2310
the general {} scene by

26
00:01:00,780 --> 00:01:03,210
0,1110 1110,1170 1170,1350 1350,1710 1710,2430
drawing a few network pictures.|
|

27
00:01:05,060 --> 00:01:06,470
0,360 360,420 420,690 690,1110 1110,1410
Network of course connects different

28
00:01:06,470 --> 00:01:10,520
0,690 1260,1710 2010,2670 2700,3450
hosts at {} there's

29
00:01:10,520 --> 00:01:13,540
0,330 390,780 780,1680 1710,2280
{kind,of} two ways, {}

30
00:01:13,630 --> 00:01:14,410
0,150 150,360 360,450 450,570 570,780
in which you can view

31
00:01:14,410 --> 00:01:16,690
0,90 90,570 570,720 720,1230 1260,2280
the connections is occurring.| One

32
00:01:16,690 --> 00:01:18,730
0,90 90,240 240,1020 1080,1470 1500,2040
is that in for nearby

33
00:01:18,730 --> 00:01:20,290
0,450 450,570 570,690 690,990 990,1560
hosts, they are often connected

34
00:01:20,290 --> 00:01:22,210
0,210 210,450 450,630 1110,1320 1320,1920
to what you what's essentially

35
00:01:22,240 --> 00:01:24,640
0,390 450,930 930,1500 1530,2040 2130,2400
a same network,| so there

36
00:01:24,640 --> 00:01:25,930
0,90 90,210 210,270 270,630 660,1290
may be a single Ethernet,|

37
00:01:27,030 --> 00:01:28,020
0,420 420,570 570,780 780,930 930,990
{} and maybe this is

38
00:01:28,020 --> 00:01:29,160
0,90 90,510 510,600 600,630 630,1140
a switch or a cable|

39
00:01:29,340 --> 00:01:30,030
0,210 210,300 300,450 450,570 570,690
and you might have a

40
00:01:30,030 --> 00:01:31,650
0,270 270,360 360,900 930,1560 1560,1620
bunch of hosts connected to

41
00:01:31,650 --> 00:01:34,400
0,390 420,690 720,1410
this, this Ethernet,|

42
00:01:34,400 --> 00:01:37,550
0,180 180,630 630,1080 1110,1770 1920,3150
where hosts are maybe laptops

43
00:01:37,550 --> 00:01:40,250
0,270 270,1350 2130,2460 2460,2610 2610,2700
or servers or as it

44
00:01:40,250 --> 00:01:41,840
0,120 120,360 360,510 510,1140 1170,1590
will turn out routers {},|

45
00:01:42,470 --> 00:01:44,940
0,360 600,1080 1080,1890
and { -}

46
00:01:45,430 --> 00:01:48,340
0,660 840,1320 1320,1680 1680,2040 2040,2910
the way network software designed

47
00:01:48,430 --> 00:01:50,260
0,570 600,1260 1260,1470 1470,1560 1560,1830
is| to kind of try

48
00:01:50,260 --> 00:01:51,940
0,120 120,960 1170,1350 1350,1560 1560,1680
to ignore as much as

49
00:01:51,940 --> 00:01:53,470
0,420 420,540 540,990 990,1050 1050,1530
possible the details of exactly

50
00:01:53,470 --> 00:01:54,580
0,180 180,360 360,720 720,990 990,1110
what this network is that

51
00:01:54,580 --> 00:01:56,410
0,420 420,780 810,1380 1380,1620 1620,1830
directly {} attaches hosts might

52
00:01:56,410 --> 00:01:58,060
0,90 90,150 150,420 420,1020 1260,1650
be a single cable {},|

53
00:01:58,060 --> 00:01:59,860
0,450 450,570 570,990 990,1080 1080,1800
which is probably the case,

54
00:02:00,100 --> 00:02:02,260
0,720 1110,1260 1260,1350 1350,1770 1770,2160
{} at the time today's

55
00:02:02,260 --> 00:02:03,670
0,330 330,510 510,840 1020,1260 1260,1410
paper was written,| this might

56
00:02:03,670 --> 00:02:05,290
0,120 120,240 240,570 570,1230 1350,1620
be an Ethernet switch, this

57
00:02:05,290 --> 00:02:06,070
0,210 210,330 330,510 510,690 690,780
might be some sort of

58
00:02:06,070 --> 00:02:08,440
0,900 900,1530 1530,1920 1920,2010 2010,2370
WiFi wireless Lan,| and these

59
00:02:09,100 --> 00:02:10,240
0,300 300,510 510,690 690,1050 1050,1140
these things aren't wires at

60
00:02:10,240 --> 00:02:11,920
0,240 240,390 390,690 690,1020 1020,1680
all, but rather radio links,|

61
00:02:12,010 --> 00:02:13,760
0,420 480,1080
{} but,

62
00:02:13,790 --> 00:02:15,050
0,270 270,330 330,600 600,840 840,1260
for the most part these

63
00:02:15,140 --> 00:02:17,150
0,540 570,900 900,1470 1470,1770 1800,2010
{} these differences in sort

64
00:02:17,150 --> 00:02:18,200
0,60 60,570 570,690 690,810 810,1050
of exactly what the local

65
00:02:18,200 --> 00:02:19,880
0,630 630,1020 1050,1410 1410,1590 1590,1680
connectivity is| a kind of

66
00:02:20,000 --> 00:02:21,800
0,390 390,810 810,1110 1110,1320 1500,1800
totally papered over at pretty

67
00:02:21,800 --> 00:02:23,570
0,240 240,720 1140,1530 1560,1680 1680,1770
low level, {} in the

68
00:02:23,570 --> 00:02:24,860
0,390 390,900
networking stack.|

69
00:02:25,170 --> 00:02:26,440
0,570

70
00:02:26,620 --> 00:02:27,880
0,360 360,780 810,1050 1050,1170 1170,1260
And so on each of

71
00:02:27,880 --> 00:02:29,140
0,150 150,480 480,630 630,840 840,1260
these hosts there may be

72
00:02:29,140 --> 00:02:31,090
0,270 270,960 960,1200 1200,1470 1470,1950
different applications,| maybe there's a

73
00:02:31,300 --> 00:02:33,460
0,360 360,870 870,1590 1590,1800 1800,2160
web browser here and {}

74
00:02:33,550 --> 00:02:36,020
0,210 210,360 360,1920
you know http

75
00:02:36,140 --> 00:02:37,220
0,510 510,630 630,900 900,990 990,1080
Server over here| and they

76
00:02:37,220 --> 00:02:37,970
0,180 180,270 270,510 510,630 630,750
need to talk to each

77
00:02:37,970 --> 00:02:40,490
0,330 360,840 840,1200 1200,1530 1860,2520
other across this {} network.|

78
00:02:41,160 --> 00:02:43,170
0,510 810,1560 1560,1680 1680,1950 1950,2010
Now there's a limit to

79
00:02:43,170 --> 00:02:44,520
0,330 330,840 840,960 960,1080 1080,1350
how big you can build

80
00:02:44,520 --> 00:02:46,560
0,60 60,810 810,1140 1140,1440 1440,2040
a single local area network,|

81
00:02:46,590 --> 00:02:47,580
0,390
so,

82
00:02:47,800 --> 00:02:49,420
0,210 210,330 330,540 540,900 990,1620
now for which the abbreviation

83
00:02:49,420 --> 00:02:51,670
0,150 150,660 660,1380 1560,2010 2010,2250
is usually LAN local area

84
00:02:51,670 --> 00:02:54,820
0,660 1590,2010 2220,2610 2760,3030 3030,3150
network| and the way to

85
00:02:54,820 --> 00:02:55,690
0,210 210,390 390,480 480,750 750,870
think about it maybe is

86
00:02:55,690 --> 00:02:57,280
0,120 120,240 270,690 690,900 900,1590
that a local area network|

87
00:02:57,280 --> 00:02:58,570
0,180 180,300 300,450 450,840 840,1290
can be as large as

88
00:02:58,630 --> 00:02:59,710
0,330 330,720 720,810 810,990 990,1080
a network in which it

89
00:02:59,710 --> 00:03:00,760
0,240 240,570 570,750 750,960 960,1050
makes sense for all the

90
00:03:00,760 --> 00:03:01,600
0,390 390,450 450,540 540,720 720,840
host to be able to

91
00:03:01,600 --> 00:03:02,620
0,270 270,510 510,600 600,780 780,1020
see all of each other's

92
00:03:02,620 --> 00:03:05,470
0,780 960,1380 1440,1710 1710,2070 2190,2850
packets,| {} that is {}

93
00:03:05,860 --> 00:03:07,270
0,510 510,810 810,990 990,1200 1230,1410
sometimes hosts need to want

94
00:03:07,270 --> 00:03:09,340
0,90 90,1260 1290,1650 1650,1980 1980,2070
to broadcast to all of

95
00:03:09,340 --> 00:03:10,900
0,150 150,420 420,1110 1350,1500 1500,1560
the local hosts,| you know

96
00:03:10,900 --> 00:03:11,740
0,150 150,330 330,690 690,810 810,840
that works fine with a

97
00:03:11,740 --> 00:03:13,690
0,540 540,930 990,1500 1500,1590 1590,1950
dozen or twenty or fifty

98
00:03:13,690 --> 00:03:14,530
0,60 60,300 300,480 480,540 540,840
or maybe even a hundred

99
00:03:14,530 --> 00:03:16,540
0,390 390,630 1110,1260 1260,1530 1530,2010
hosts,| but you can't really

100
00:03:17,350 --> 00:03:19,330
0,450 450,810 810,1290 1290,1800 1800,1980
easily build single networks where

101
00:03:19,330 --> 00:03:20,050
0,120 120,210 210,450 450,600 600,720
all the hosts can more

102
00:03:20,050 --> 00:03:21,040
0,30 30,240 240,630 630,900 900,990
or less directly talk to

103
00:03:21,040 --> 00:03:22,840
0,120 120,450 870,1110 1110,1380 1380,1800
each other,| {} with more

104
00:03:22,870 --> 00:03:23,740
0,480
than,

105
00:03:23,890 --> 00:03:25,240
0,270 270,270 270,480 480,840 840,1350
say a few hundred hosts.|

106
00:03:25,450 --> 00:03:26,580
0,570

107
00:03:26,890 --> 00:03:28,360
0,330 540,750 750,840 840,1050 1050,1470
And so to deal with

108
00:03:28,510 --> 00:03:30,130
0,450 480,750 750,900 900,1260 1260,1620
the way the larger Internet

109
00:03:30,130 --> 00:03:32,140
0,120 120,870 900,1260 1260,1560 1620,2010
is constructed is| that there's

110
00:03:32,140 --> 00:03:34,660
0,60 60,540 540,1140 1740,2010 2010,2520
a number of these individual

111
00:03:34,660 --> 00:03:36,760
0,1050 1410,1710 1710,1800 1800,2010 2010,2100
LANs,| may be one of

112
00:03:36,760 --> 00:03:38,240
0,990
MIT,

113
00:03:38,270 --> 00:03:39,470
0,240 240,450 450,690 690,990 990,1200
you know, maybe one at

114
00:03:39,470 --> 00:03:43,160
0,1050 1440,2160 2280,2610 2610,3000 3000,3690
Harvard, {} maybe one faraway

115
00:03:43,160 --> 00:03:46,600
0,570 1830,2940
at Stanford.|

116
00:03:46,880 --> 00:03:49,550
0,540 780,1140 1350,2130 2130,2430 2430,2670
And, {} there's some sort

117
00:03:49,550 --> 00:03:51,170
0,60 60,780 780,1170 1170,1320 1320,1620
of connectivity between them which

118
00:03:51,200 --> 00:03:51,980
0,150 150,270 270,480 480,570 570,780
you can think of as

119
00:03:52,010 --> 00:03:53,300
0,660 660,930 930,1050 1050,1200 1200,1290
routers,| so there might be

120
00:03:53,300 --> 00:03:55,400
0,90 90,660 720,1140 1170,1800 1800,2100
a router, that's plugged into

121
00:03:55,400 --> 00:03:57,230
0,210 210,870 870,1140 1140,1380 1380,1830
the MIT local area network,|

122
00:03:57,230 --> 00:03:59,060
0,270 300,780 780,990 990,1560 1560,1830
and also has perhaps a

123
00:03:59,090 --> 00:04:01,280
0,390 390,750 750,1170 1380,1710 1950,2190
longer link to {} the

124
00:04:01,280 --> 00:04:02,280
0,540
{

125
00:04:02,860 --> 00:04:05,260
0,390 1170,1320 1320,1440 1440,1890 1890,2400
-} to the Harvard network|

126
00:04:05,320 --> 00:04:06,190
0,360 360,480 480,660 660,810 810,870
and in fact there's a

127
00:04:06,190 --> 00:04:07,510
0,360 360,450 450,870 870,1050 1050,1320
network of routers, which is

128
00:04:07,510 --> 00:04:08,650
0,420 420,480 480,930 930,990 990,1140
essentially the backbone of the

129
00:04:08,650 --> 00:04:12,130
0,510 900,1560 1560,2310 2400,3090 3300,3480
Internet| including long-distance router to

130
00:04:12,130 --> 00:04:13,600
0,360 360,870 960,1230 1230,1320 1320,1470
router links,| so there might

131
00:04:13,600 --> 00:04:14,800
0,150 150,240 240,630 630,870 870,1200
be a longer link across

132
00:04:14,800 --> 00:04:15,820
0,90 90,450 450,600 600,780 780,1020
the country| and maybe this

133
00:04:15,820 --> 00:04:17,260
0,300 300,420 420,720 720,930 930,1440
router is plugged into the

134
00:04:18,950 --> 00:04:20,330
0,600 600,870 870,1020 1020,1290 1290,1380
some local area network at

135
00:04:20,330 --> 00:04:21,590
0,570 660,900 900,1050 1050,1170 1170,1260
Stanford| and then we have

136
00:04:21,590 --> 00:04:22,430
0,420 420,480 480,570 570,690 690,840
host we have this sort

137
00:04:22,430 --> 00:04:23,820
0,270 330,750
of {}

138
00:04:25,290 --> 00:04:26,640
0,240 240,720 720,1080 1080,1140 1140,1350
more elaborate task| in which

139
00:04:26,640 --> 00:04:27,420
0,120 120,270 270,330 330,690 690,780
we want to host at

140
00:04:27,420 --> 00:04:28,410
0,570 570,660 660,750 750,930 930,990
MIT to be able to

141
00:04:28,410 --> 00:04:29,340
0,270 270,390 390,450 450,840 840,930
talk to a sequence of

142
00:04:29,340 --> 00:04:31,860
0,660 960,1530 1530,2160 2160,2430 2430,2520
routers to a host of

143
00:04:31,860 --> 00:04:33,210
0,510 510,720 780,1020 1020,1080 1080,1350
Stanford| and this is called

144
00:04:33,210 --> 00:04:34,200
0,540 540,690 690,780 780,930 930,990
routing,| so we need to

145
00:04:34,200 --> 00:04:35,910
0,210 210,450 600,1110 1110,1410 1410,1710
have a way for host

146
00:04:35,910 --> 00:04:38,160
0,120 120,810 960,1140 1140,2070 2100,2250
at MIT to address to

147
00:04:38,160 --> 00:04:40,530
0,690 810,1050 1050,1530 1530,1830 1830,2370
name {} individual host Stanford|

148
00:04:40,770 --> 00:04:41,880
0,540 540,630 630,810 810,990 990,1110
and we need some way

149
00:04:41,880 --> 00:04:44,700
0,240 480,780 780,1080 1230,2220 2220,2820
to sew that routers near

150
00:04:44,730 --> 00:04:47,220
0,630 780,1050 1050,1620 1650,2040 2130,2490
MIT| can look at a

151
00:04:47,220 --> 00:04:48,480
0,390 390,630 630,750 750,1170 1170,1260
packet sent by MIT and

152
00:04:48,480 --> 00:04:49,770
0,150 150,480 630,900 900,960 960,1290
say oh that's a packet

153
00:04:49,770 --> 00:04:51,900
0,600 630,990 990,1740 1740,1830 1830,2130
for for Harvard a packet

154
00:04:51,900 --> 00:04:53,250
0,90 90,720 720,840 840,1170 1170,1350
for Stanford,| a packet that

155
00:04:53,490 --> 00:04:54,540
0,480 480,570 570,660 660,960 960,1050
needs to go somewhere in

156
00:04:54,540 --> 00:04:55,980
0,570 570,810 840,1020 1020,1200 1200,1440
Japan or who knows what.|

157
00:04:57,480 --> 00:04:59,820
0,450 870,1500 1740,2070 2070,2130 2130,2340
So, {} from the point

158
00:04:59,820 --> 00:05:01,050
0,60 60,150 150,210 210,510 510,1230
of view of network protocols,|

159
00:05:01,080 --> 00:05:03,660
0,480 480,1380 1410,2010
this local {

160
00:05:04,250 --> 00:05:06,080
0,390 390,570 570,810 810,1500 1500,1830
-} this local communication is

161
00:05:06,110 --> 00:05:08,060
0,360 360,660 660,840 840,1500 1530,1950
taken care of by {}

162
00:05:08,120 --> 00:05:11,360
0,450 450,1380 1530,1920 1950,2190 2190,3240
Ethernet protocols,| and this long-distance

163
00:05:11,480 --> 00:05:12,890
0,690 690,780 780,1050 1050,1110 1110,1410
communication is sort of layered

164
00:05:12,890 --> 00:05:13,640
0,120 120,360 360,450 450,630 630,750
on top of that and

165
00:05:13,640 --> 00:05:15,830
0,300 300,570 570,690 690,1110 1170,2190
taken care of by IP

166
00:05:15,830 --> 00:05:17,690
0,270 270,630 630,1470 1500,1740 1740,1860
or Internet protocols,| that know

167
00:05:17,690 --> 00:05:18,640
0,150 150,420
how to

168
00:05:19,110 --> 00:05:20,640
0,420 420,600 600,870 870,1410 1410,1530
route over long distances to

169
00:05:20,640 --> 00:05:22,120
0,360 360,960
distant hosts.|

170
00:05:23,560 --> 00:05:24,520
0,390 540,720 720,780 780,930 930,960
Okay, this is what a

171
00:05:24,520 --> 00:05:25,660
0,270 270,510 510,840 840,1080 1080,1140
network looks like in a

172
00:05:25,660 --> 00:05:28,600
0,630 960,1650 2280,2550 2550,2790 2790,2940
nutshell,| I'm would now want

173
00:05:28,600 --> 00:05:31,120
0,60 60,360 360,810 810,1260 2070,2520
to talk about the what's

174
00:05:31,120 --> 00:05:32,820
0,1170
inside

175
00:05:32,820 --> 00:05:34,200
0,630 630,810 810,960 960,1290 1290,1380
packets,| that move across an

176
00:05:34,200 --> 00:05:36,000
0,480 480,570 570,780 780,1500 1680,1800
Ethernet or move across the

177
00:05:36,000 --> 00:05:38,190
0,390 390,990 1050,1680 1770,2100 2100,2190
larger Internet,| {} with an

178
00:05:38,190 --> 00:05:39,600
0,150 150,330 330,930 930,1230 1230,1410
eye to eventually talking about

179
00:05:39,600 --> 00:05:41,970
0,90 90,510 510,840 1290,1770 1950,2370
the software that in {}

180
00:05:42,550 --> 00:05:44,200
0,600 600,780 780,960 960,1050 1050,1650
hosts,| that has to process

181
00:05:44,200 --> 00:05:46,060
0,270 270,450 450,960 1200,1770 1770,1860
hosts and routers asked to

182
00:05:46,060 --> 00:05:48,550
0,570 570,780 780,1440 2160,2400 2400,2490
process those packets,| so let

183
00:05:48,550 --> 00:05:49,390
0,60 60,270 270,360 360,450 450,840
me start with the lowest

184
00:05:49,390 --> 00:05:51,970
0,420 660,1230 1650,2190 2190,2370 2370,2580
level and talk about what's

185
00:05:51,970 --> 00:05:54,580
0,540 570,840 840,1230 1230,1740 2190,2610
inside an Ethernet packet,| so

186
00:05:54,610 --> 00:05:55,720
0,510 510,690 690,960 960,1050 1050,1110
when two hosts that are

187
00:05:55,720 --> 00:05:56,920
0,270 270,690 690,1050 1050,1110 1110,1200
quite nearby attached to the

188
00:05:56,920 --> 00:05:58,540
0,330 330,930 930,1020 1020,1260 1260,1620
same cable or same WiFi

189
00:05:58,540 --> 00:05:59,830
0,450 450,510 510,780 780,990 990,1290
network or same {Ethernet -}

190
00:05:59,890 --> 00:06:00,790
0,330 330,390 390,660 660,750 750,900
want to talk to each

191
00:06:00,790 --> 00:06:02,760
0,360
other.|

192
00:06:02,760 --> 00:06:04,410
0,390 390,570 570,660 660,1170 1170,1650
The sort of lowest level

193
00:06:04,470 --> 00:06:05,860
0,780
protocol,

194
00:06:06,090 --> 00:06:07,860
0,240 240,600 630,1230 1260,1500 1500,1770
{} which allows two hosts

195
00:06:07,860 --> 00:06:08,550
0,60 60,150 150,360 360,600 600,690
on the same land to

196
00:06:08,550 --> 00:06:09,240
0,240 240,330 330,420 420,570 570,690
talk to each other as

197
00:06:09,240 --> 00:06:11,130
0,90 90,510 510,1080 1140,1530 1590,1890
the Ethernet protocol| and you

198
00:06:11,130 --> 00:06:13,110
0,120 120,510 510,870 1050,1470 1680,1980
can think of {} one

199
00:06:13,110 --> 00:06:15,880
0,810 1170,1500 1500,1980
host host one,

200
00:06:15,910 --> 00:06:17,160
0,720
{}

201
00:06:17,470 --> 00:06:20,110
0,870 1470,1860 1860,2340 2340,2550 2550,2640
sending a frame over the

202
00:06:20,110 --> 00:06:21,580
0,390 390,510 510,1050 1050,1140 1140,1470
over the Ethernet to host

203
00:06:21,580 --> 00:06:22,700
0,480
two,|

204
00:06:22,700 --> 00:06:23,720
0,150 150,330 330,420 420,780 780,1020
what's called an Ethernet frame,|

205
00:06:23,720 --> 00:06:24,620
0,150 150,240 240,360 360,570 570,900
which is the Ethernet work

206
00:06:24,620 --> 00:06:26,180
0,150 150,600 840,1140 1140,1350 1380,1560
for packet {}| and it's

207
00:06:26,180 --> 00:06:28,430
0,330 360,810 810,1050 1200,2100 2100,2250
a series of bytes that

208
00:06:28,430 --> 00:06:30,540
0,90 90,660
are sent

209
00:06:31,000 --> 00:06:32,260
0,240 240,360 360,810 960,1140 1140,1260
over the Ethernet from one

210
00:06:32,260 --> 00:06:33,640
0,240 240,360 360,750 750,990 1020,1380
host to another| and what

211
00:06:33,640 --> 00:06:35,080
0,90 90,540 540,990 990,1320 1320,1440
the ethernet protocol does is

212
00:06:35,080 --> 00:06:37,030
0,210 240,870 870,1140 1140,1800 1800,1950
have just enough information in

213
00:06:37,030 --> 00:06:39,610
0,300 570,1110 1590,2220 2220,2340 2340,2580
it| to allow the two

214
00:06:39,610 --> 00:06:42,700
0,750 810,1350 1890,2550 2550,2760 2760,3090
hosts to realize who's talking

215
00:06:42,700 --> 00:06:43,690
0,120 120,240 240,480 480,630 630,990
to each other| and cause

216
00:06:43,690 --> 00:06:44,410
0,90 90,420 420,480 480,570 570,720
the host to be able

217
00:06:44,410 --> 00:06:46,090
0,120 120,1020 1020,1470 1470,1590 1590,1680
to recognize packets that are

218
00:06:46,090 --> 00:06:48,400
0,450 450,510 510,990 1350,1860
addressed to them {}.|

219
00:06:48,550 --> 00:06:49,480
0,180 180,270 270,420 420,510 510,930
And so what an Ethernet

220
00:06:49,480 --> 00:06:50,830
0,330 330,660 660,930 1020,1200 1200,1350
header looks,| so the way

221
00:06:50,830 --> 00:06:52,540
0,300 540,1080 1080,1350 1350,1440 1440,1710
that Ethernet deals with this

222
00:06:52,540 --> 00:06:53,830
0,120 120,300 300,570 570,900 900,1290
is| that every Ethernet packet

223
00:06:53,920 --> 00:06:56,530
0,480 480,570 570,660 660,1470 1800,2610
has at the beginning, {}

224
00:06:57,270 --> 00:06:58,700
0,270 270,870
a header,

225
00:06:59,030 --> 00:07:01,120
0,180 180,420 420,660 660,1560
that has three fields,|

226
00:07:01,380 --> 00:07:03,180
0,510 540,930 930,1080 1080,1380 1410,1800
{} followed by some Ethernet

227
00:07:03,180 --> 00:07:04,400
0,750
payload,|

228
00:07:06,790 --> 00:07:07,630
0,330 330,450 450,660 660,750 750,840
{} and what's in the

229
00:07:07,630 --> 00:07:11,140
0,420 420,900 1470,2040 2040,2760 2940,3510
header is two {} Ethernet

230
00:07:11,140 --> 00:07:12,340
0,690 690,780 780,930 930,1080 1080,1200
addresses,| we'll call them the

231
00:07:12,340 --> 00:07:14,590
0,690 690,1350 1500,1800 1800,1890 1890,2250
destination address and the source

232
00:07:14,590 --> 00:07:16,930
0,600 690,1110 1110,1800 1830,1950 1950,2340
address| and also the type

233
00:07:16,930 --> 00:07:18,280
0,120 120,210 210,750 990,1290 1290,1350
of the packet,| each of

234
00:07:18,280 --> 00:07:19,780
0,180 180,900 900,1080 1080,1200 1230,1500
these addresses is {} just

235
00:07:19,780 --> 00:07:21,520
0,90 90,600 600,780 780,1290
a 48 bit number,|

236
00:07:21,550 --> 00:07:23,740
0,210 210,390 390,930 930,2040 2040,2190
{} that uniquely identifies a

237
00:07:23,740 --> 00:07:25,840
0,600 600,990 990,1440 1440,1740 1740,2100
particular network interface card really,|

238
00:07:26,770 --> 00:07:28,810
0,330 330,570 570,870 870,1530 1590,2040
and this type field is

239
00:07:28,810 --> 00:07:29,560
0,120 120,180 180,570 570,660 660,750
going to indicate to the

240
00:07:29,560 --> 00:07:31,330
0,570 570,960 990,1350 1350,1470 1470,1770
recipient host what it's supposed

241
00:07:31,330 --> 00:07:32,200
0,90 90,210 210,360 360,510 510,870
to do with that package|

242
00:07:32,200 --> 00:07:33,100
0,90 90,180 180,360 360,600 600,900
and what that really means

243
00:07:33,100 --> 00:07:34,990
0,120 120,360 360,750 750,1050 1050,1890
is what higher level protocol

244
00:07:35,110 --> 00:07:38,320
0,390 390,960 960,1950 2010,2280 2280,3210
{} should examine and process

245
00:07:38,350 --> 00:07:39,850
0,210 210,810 810,870 870,1110 1110,1500
the payload of that Ethernet

246
00:07:39,850 --> 00:07:40,580
0,360
packet.|

247
00:07:41,220 --> 00:07:43,830
0,420 1470,1740 1740,2220 2280,2520 2520,2610
{} So, these, these are

248
00:07:43,830 --> 00:07:45,750
0,180 180,270 270,930 990,1530 1530,1920
bits that go are typically

249
00:07:45,750 --> 00:07:46,470
0,180 180,240 240,360 360,630 630,720
set to go over the

250
00:07:46,470 --> 00:07:48,960
0,690 750,1170 1530,2010
wire,| {} piece,

251
00:07:49,110 --> 00:07:50,730
0,360 360,540 540,990 990,1200 1200,1620
48 plus 48 plus 16

252
00:07:50,730 --> 00:07:51,990
0,210 210,270 270,750 870,1140 1140,1260
bits of header| and then

253
00:07:51,990 --> 00:07:54,630
0,360 360,600 600,1290 1920,2310 2310,2640
however much payload| and not

254
00:07:54,630 --> 00:07:56,040
0,210 210,660 660,750 750,840 840,1410
really visible to the software,|

255
00:07:56,040 --> 00:07:57,210
0,240 480,660 660,930 930,1080 1080,1170
but, {} there's going to

256
00:07:57,210 --> 00:07:58,410
0,120 120,570 570,660 660,750 750,1200
be something at the beginning

257
00:07:58,410 --> 00:07:59,910
0,120 120,210 210,750 930,1230 1230,1500
of the packet,| {} that's

258
00:07:59,910 --> 00:08:01,350
0,780 780,870 870,930 930,1230 1230,1440
recognized at a very low

259
00:08:01,350 --> 00:08:02,430
0,240 240,390 390,480 480,900 900,1080
level by the hardware that

260
00:08:02,430 --> 00:08:03,630
0,660 660,720 720,1050 1050,1110 1110,1200
signifies the start of a

261
00:08:03,630 --> 00:08:06,120
0,420 1440,1860 1860,1920 1920,2280 2280,2490
packet| and the receiving [house]

262
00:08:06,120 --> 00:08:06,960
0,180 180,330 330,420 420,510 510,840
needs to win the packet

263
00:08:06,960 --> 00:08:07,950
0,510 510,630 630,810 810,930 930,990
ends,| so there's going to

264
00:08:07,950 --> 00:08:11,100
0,150 150,750 900,1320 2100,2880 2880,3150
be another {} special bit

265
00:08:11,100 --> 00:08:11,940
0,330 330,420 420,570 570,750 750,840
pattern at the end,| that

266
00:08:11,940 --> 00:08:12,900
0,510 510,630 630,810 810,870 870,960
signifies the end of the

267
00:08:12,900 --> 00:08:13,680
0,390
packet.|

268
00:08:14,250 --> 00:08:16,110
0,780 780,1110 1110,1380 1380,1500 1500,1860
These two begin and end

269
00:08:16,110 --> 00:08:17,280
0,540 540,630 630,900 900,1080 1080,1170
flags are never seen by

270
00:08:17,280 --> 00:08:18,750
0,90 90,450 450,870 870,960 960,1470
the software,| but the rest,

271
00:08:20,290 --> 00:08:21,250
0,150 150,330 330,390 390,570 570,960
the rest of this Ethernet

272
00:08:21,250 --> 00:08:23,050
0,540 750,960 960,1350 1350,1590 1590,1800
frame is delivered by the

273
00:08:23,050 --> 00:08:24,430
0,330 330,720 720,960 960,1080 1080,1380
network interface card that Nic

274
00:08:24,430 --> 00:08:25,870
0,120 120,360 360,750 870,1290 1290,1440
at {H2 -} {} to

275
00:08:25,870 --> 00:08:27,000
0,60 60,570
the software.|

276
00:08:27,160 --> 00:08:29,740
0,420 1620,1800 1800,1950 1950,2460 2460,2580
{} If you've looked at

277
00:08:29,740 --> 00:08:31,330
0,420 540,1020 1020,1380 1380,1530 1530,1590
the final lab for the

278
00:08:31,330 --> 00:08:33,520
0,690 1380,1590 1590,1830 1830,2040 2040,2190
course,| you'll see that the

279
00:08:33,520 --> 00:08:34,900
0,360 360,480 480,660 660,960 960,1380
software we give you includes

280
00:08:34,900 --> 00:08:35,770
0,60 60,270 270,330 330,420 420,870
a bunch of new files,|

281
00:08:35,770 --> 00:08:37,720
0,540 570,1110 1110,1440 1440,1710 1710,1950
including kernel slash {net.h -

282
00:08:37,720 --> 00:08:39,250
0,420 450,840 840,1230 1230,1260 1260,1530
-} which contains a whole

283
00:08:39,250 --> 00:08:42,940
0,420 420,840 840,1890 1890,2400
bunch of definitions of

284
00:08:43,120 --> 00:08:45,010
0,510 510,1080 1080,1260 1260,1590 1590,1890
packet headers for different network

285
00:08:45,010 --> 00:08:47,020
0,720 1260,1650 1650,1740 1740,1920 1920,2010
protocols,| and so this is

286
00:08:47,020 --> 00:08:48,730
0,360 390,720 720,930 930,1500 1500,1710
just text taken directly from

287
00:08:48,730 --> 00:08:49,630
0,150 150,330 330,510 510,660 660,900
this {net.h - -} file,

288
00:08:49,630 --> 00:08:50,980
0,120 120,300 300,540 810,1170 1170,1350
we give you| {} and

289
00:08:50,980 --> 00:08:52,360
0,90 90,960
it includes

290
00:08:52,770 --> 00:08:54,570
0,870 870,900 900,1110 1110,1710 1710,1800
{ - -} description of

291
00:08:54,570 --> 00:08:56,370
0,360 390,990 990,1110 1110,1230 1230,1800
the layout of the Ethernet

292
00:08:56,610 --> 00:08:58,710
0,510 570,1050 1050,1320 1320,1440 1440,2100
header,| and this this software,

293
00:08:58,710 --> 00:08:59,820
0,90 90,240 240,360 360,630 660,1110
we give you actually uses

294
00:08:59,820 --> 00:09:01,530
0,360 360,630 630,810 810,1140 1140,1710
literally uses this struct definition,|

295
00:09:01,650 --> 00:09:03,960
0,210 210,420 420,600 780,1530 1770,2310
in order to parse incoming

296
00:09:03,960 --> 00:09:05,610
0,330 330,900 1170,1350 1350,1470 1470,1650
Ethernet packets| is to pick

297
00:09:05,610 --> 00:09:07,800
0,390 390,480 480,1050 1350,1860 1890,2190
apart the head to get

298
00:09:07,800 --> 00:09:10,140
0,330 450,1260 1260,1380 1380,2040 2070,2340
the destination and type,| then

299
00:09:10,140 --> 00:09:11,460
0,270 270,660 660,810 810,1200 1200,1320
also uses this structure to

300
00:09:11,460 --> 00:09:13,350
0,390 390,1110 1410,1560 1560,1620 1620,1890
format packets,| so the host

301
00:09:13,350 --> 00:09:14,490
0,90 90,300 300,390 390,870 870,1140
is really in charge of

302
00:09:14,980 --> 00:09:16,270
0,300 300,360 360,930 930,1140 1140,1290
sort of setting up and

303
00:09:16,270 --> 00:09:19,180
0,480 480,630 630,1170 1590,2190 2550,2910
parsing this header, {} that's

304
00:09:19,180 --> 00:09:20,560
0,240 240,390 390,900
used by Ethernet.|

305
00:09:22,360 --> 00:09:24,900
0,210 210,690 690,1020 1320,1980
Any questions about {}

306
00:09:24,930 --> 00:09:26,620
0,480 480,1170
Ethernet packets?|

307
00:09:32,070 --> 00:09:33,540
0,390 390,660 660,780 780,840 840,1470
Yeah, I have a question.|

308
00:09:33,570 --> 00:09:36,340
0,540 570,1140 1260,1620 1620,2220
Please.| Is is the

309
00:09:36,340 --> 00:09:37,480
0,240 240,600 600,720 720,1020 1020,1140
bit pattern you mentioned that

310
00:09:37,480 --> 00:09:39,790
0,90 90,930 1200,1770 1770,1890 1890,2310
the hardware uses, to determine

311
00:09:39,790 --> 00:09:40,510
0,90 90,360 360,480 480,630 630,720
the start and end of

312
00:09:40,510 --> 00:09:42,910
0,90 90,510 510,1140 1140,1800 1890,2400
a package similar to the

313
00:09:42,940 --> 00:09:45,500
0,990 1350,1530 1530,1620 1620,2040
eop in the lab,

314
00:09:46,850 --> 00:09:48,140
0,330 330,450 450,900 900,1080 1080,1290
which is a end of

315
00:09:48,140 --> 00:09:49,740
0,630
packet.|

316
00:09:49,740 --> 00:09:51,460
0,1110
No,

317
00:09:52,200 --> 00:09:53,610
0,300 300,480 480,600 600,1200 1200,1410
no, the {eop -} is

318
00:09:53,610 --> 00:09:56,970
0,900 900,1860 1890,2520 2520,2970 2970,3360
a separate mechanism between the

319
00:09:57,000 --> 00:09:58,980
0,810 810,990 990,1080 1080,1650 1770,1980
driver and the NIC to

320
00:09:58,980 --> 00:10:00,740
0,210 210,450 450,1320
help them communicate.|

321
00:10:00,770 --> 00:10:02,990
0,630 900,1350 1350,1620 1680,2100 2100,2220
{} This is, there's some

322
00:10:02,990 --> 00:10:05,000
0,570 570,1110 1110,1290 1290,1740 1740,2010
electrical schemes,| some low level

323
00:10:05,000 --> 00:10:07,580
0,510 510,600 600,1350 1440,2040 2040,2580
electrical or optical signaling scheme

324
00:10:07,580 --> 00:10:10,370
0,300 510,1050 1050,1800 1830,2340 2340,2790
to transmit bits over Ethernet

325
00:10:10,370 --> 00:10:12,710
0,870 1050,1410 1410,1590 1590,2160 2160,2340
cables,| and these flags have

326
00:10:12,710 --> 00:10:14,640
0,120 120,330 330,540 540,1290
to do with the,

327
00:10:14,640 --> 00:10:15,980
0,630
typically,

328
00:10:16,340 --> 00:10:19,280
0,1050 1410,2160 2160,2340 2340,2520 2520,2940
electrical patterns that would not

329
00:10:19,280 --> 00:10:21,470
0,270 270,960 1140,1710 1710,1770 1770,2190
be legal inside a packet|

330
00:10:22,310 --> 00:10:23,870
0,390 390,540 540,870 1110,1290 1290,1560
{} and so no one

331
00:10:23,870 --> 00:10:25,670
0,540 540,930 930,1350 1350,1740 1740,1800
scheme is to instead of

332
00:10:25,670 --> 00:10:27,200
0,210 210,630 660,990 990,1260 1260,1530
just sending zero one bits

333
00:10:27,200 --> 00:10:28,730
0,210 210,300 300,840 960,1380 1380,1530
over the wire, you can

334
00:10:28,730 --> 00:10:30,560
0,540 540,690 690,840 840,1230
send you could send,

335
00:10:31,540 --> 00:10:33,670
0,270 270,840 840,960 960,1230 1230,2130
{} sequences of two signals,|

336
00:10:33,910 --> 00:10:35,620
0,210 210,420 420,630 630,1080 1080,1710
so there's four different symbols

337
00:10:35,620 --> 00:10:38,140
0,720 930,1380 1680,2220 2220,2310 2310,2520
possible with sequences of two

338
00:10:38,140 --> 00:10:42,550
0,570 990,1650 2370,3390 3420,4050 4050,4410
different, {} electrical voltage levels

339
00:10:42,550 --> 00:10:44,320
0,60 60,480 480,930 930,1230 1410,1770
or something| and have two

340
00:10:44,320 --> 00:10:45,580
0,90 90,180 180,390 390,840 840,1260
of the for possible symbols

341
00:10:45,580 --> 00:10:47,350
0,360 360,690 690,750 750,1080 1080,1770
indicate zero or one bits

342
00:10:47,350 --> 00:10:48,010
0,120 120,210 210,510 510,570 570,660
in the body of the

343
00:10:48,010 --> 00:10:49,600
0,480 600,810 810,930 930,1020 1020,1590
packet| and have the remaining

344
00:10:49,600 --> 00:10:52,030
0,660 780,1440 1440,1830 1830,1980 1980,2430
to indicate beginning and end.|

345
00:10:52,440 --> 00:10:53,190
0,150 150,300 300,360 360,690 690,750
That was in fact a

346
00:10:53,190 --> 00:10:54,120
0,270 270,360 360,510 510,720 720,930
scheme that was used years

347
00:10:54,120 --> 00:10:55,530
0,540 600,870 870,1110 1110,1260 1260,1410
ago,| scheme much like that

348
00:10:55,530 --> 00:10:56,820
0,150 150,330 330,510 510,810 840,1290
was used years ago Ethernet,|

349
00:10:56,910 --> 00:10:57,840
0,150 150,330 330,630 630,750 750,930
I don't actually know how

350
00:10:57,840 --> 00:10:59,160
0,90 90,390 390,750
it works now.|

351
00:11:02,010 --> 00:11:04,460
0,540 1020,1830
Okay, {}

352
00:11:04,520 --> 00:11:06,140
0,510 510,600 600,900 900,1200 1200,1620
something to know about these

353
00:11:06,170 --> 00:11:08,180
0,810 810,1020 1020,1290 1320,1800 1800,2010
addresses is that| what these

354
00:11:08,180 --> 00:11:10,100
0,60 60,540 540,660 660,1440 1500,1920
are 48 bit addresses,| the

355
00:11:10,340 --> 00:11:11,540
0,360 360,450 450,510 510,930 930,1200
reason for the 48 bits

356
00:11:11,540 --> 00:11:12,890
0,120 120,360 360,1050 1050,1290 1290,1350
is that they wanted to

357
00:11:12,890 --> 00:11:13,730
0,180 180,360 360,600 600,720 720,840
make sure that there was

358
00:11:13,730 --> 00:11:15,080
0,240 240,960 990,1140 1140,1200 1200,1350
enough bits to be able

359
00:11:15,080 --> 00:11:16,840
0,90 90,240 240,390 480,1260
to give a unique

360
00:11:16,840 --> 00:11:19,090
0,270 270,870 1080,1500 1500,1920 1920,2250
{} {address,to} every different NIC

361
00:11:19,090 --> 00:11:21,280
0,210 210,1170 1620,1920 1920,2070 2070,2190
ever manufactured,| {} so there's

362
00:11:21,280 --> 00:11:22,360
0,30 30,360 360,570 570,660 660,1080
a vast number of possible

363
00:11:22,360 --> 00:11:24,520
0,660 810,1080 1080,1560 1560,2100 2100,2160
addresses,| the internal structure of

364
00:11:24,520 --> 00:11:26,020
0,300 300,750 750,870 870,1380 1380,1500
these 48 bit addresses is

365
00:11:26,020 --> 00:11:27,790
0,150 150,240 240,930 990,1680 1680,1770
that the first half, the

366
00:11:27,790 --> 00:11:29,770
0,240 240,780 780,1290 1740,1920 1920,1980
first 24 bits is a

367
00:11:29,770 --> 00:11:32,590
0,900 900,1380 1410,1980 2010,2430 2430,2820
manufacturer number| and there's every

368
00:11:32,590 --> 00:11:35,320
0,1020 1050,1440 1440,1830 1830,2250 2250,2730
manufacturer network interface cards, nics

369
00:11:35,350 --> 00:11:37,090
0,330 330,480 480,720 720,1410 1410,1740
has its own manufacturer number,|

370
00:11:37,090 --> 00:11:38,200
0,150 150,300 300,390 390,720 720,1110
so that's the first 24

371
00:11:38,200 --> 00:11:39,970
0,420 660,960 960,1020 1020,1320 1320,1770
bits| and the second 24

372
00:11:39,970 --> 00:11:42,250
0,210 210,330 330,660 1290,1560 1560,2280
bits is just any number

373
00:11:42,310 --> 00:11:43,480
0,150 150,270 270,540 540,900 900,1170
can be any unique number

374
00:11:43,480 --> 00:11:45,340
0,330 330,450 450,540 540,1260 1260,1860
assigned by the manufacturers,| manufacturers

375
00:11:45,340 --> 00:11:46,660
0,360 360,660 660,810 810,990 990,1320
typically assign them in just

376
00:11:46,690 --> 00:11:48,430
0,540 540,990 990,1140 1140,1260 1260,1740
ascending orders,| if you buy

377
00:11:48,790 --> 00:11:49,990
0,240 240,420 420,690 690,750 750,1200
you know half a dozen

378
00:11:49,990 --> 00:11:52,030
0,300 300,690 690,1290 1650,1950 1950,2040
network interface cards,| {} the

379
00:11:52,030 --> 00:11:54,040
0,270 270,660 660,1170 1470,1710 1710,2010
network interface card, each network

380
00:11:54,040 --> 00:11:55,600
0,360 360,600 600,780 780,1260 1260,1560
interface card has programmed into

381
00:11:55,600 --> 00:11:57,100
0,240 240,450 450,1050 1170,1410 1410,1500
its own address,| and if

382
00:11:57,100 --> 00:11:58,120
0,120 120,360 360,480 480,600 600,1020
you look at the address

383
00:11:58,120 --> 00:11:59,620
0,120 120,390 390,630 870,1080 1080,1500
you'll see that the {high,bits}

384
00:11:59,620 --> 00:12:00,580
0,60 60,150 150,600 600,720 720,960
are the same for these

385
00:12:00,580 --> 00:12:02,020
0,450 450,810 810,900 900,1200 1230,1440
six cards you bought from

386
00:12:02,020 --> 00:12:03,490
0,60 60,240 240,960 990,1350 1350,1470
the same manufacturer,| but the

387
00:12:03,490 --> 00:12:05,200
0,390 390,870 870,1380 1380,1620 1620,1710
low {} 24 bits are

388
00:12:05,200 --> 00:12:08,680
0,600 630,1350 1530,2340 2340,3240
probably six sequential numbers.|

389
00:12:09,060 --> 00:12:11,640
0,420 810,1260 1830,2130 2130,2520 2520,2580
{} So these addresses are

390
00:12:11,640 --> 00:12:14,550
0,720 1170,1620 1860,2460 2490,2700 2700,2910
unique,| but {} what they're

391
00:12:14,550 --> 00:12:16,710
0,390 390,990 990,1230 1230,1560 1560,2160
not helpful in is locating

392
00:12:16,710 --> 00:12:18,120
0,60 60,690 690,1140 1170,1320 1320,1410
the destination host,| so if

393
00:12:18,120 --> 00:12:18,870
0,120 120,330 330,420 420,630 630,750
you know the host you're

394
00:12:18,870 --> 00:12:19,800
0,330 330,600 600,720 720,840 840,930
talking about is on the

395
00:12:19,800 --> 00:12:21,180
0,390 390,660 660,900 900,1230 1230,1380
same local area network,| as

396
00:12:21,180 --> 00:12:23,010
0,270 420,960 960,1110 1110,1350 1350,1830
you you can use {}

397
00:12:23,600 --> 00:12:25,400
0,660 660,1050 1050,1290 1380,1710 1710,1800
Ethernet address and it's on

398
00:12:25,400 --> 00:12:26,900
0,90 90,540 600,990 990,1170 1170,1500
the same local area network,|

399
00:12:26,900 --> 00:12:27,950
0,150 150,240 240,360 360,930 930,1050
so we'll be listening for

400
00:12:27,950 --> 00:12:29,300
0,360 360,480 480,630 630,780 780,1350
package with his own address,|

401
00:12:29,840 --> 00:12:30,530
0,240 240,330 330,420 420,660 660,690
but if the hosts are

402
00:12:30,530 --> 00:12:31,190
0,180 180,240 240,480 480,570 570,660
trying to talk to us

403
00:12:31,190 --> 00:12:31,760
0,60 60,180 180,300 300,510 510,570
on the other side of

404
00:12:31,760 --> 00:12:32,990
0,90 90,690 810,1050 1050,1170 1170,1230
the country,| you have to

405
00:12:32,990 --> 00:12:34,040
0,150 150,210 210,450 450,900 900,1050
use a different scheme,| and

406
00:12:34,190 --> 00:12:35,210
0,240 240,390 390,750 750,870 870,1020
that's what's IP is all

407
00:12:35,210 --> 00:12:36,350
0,300 570,720 720,900 900,1080 1080,1140
about I'll talk about in

408
00:12:36,350 --> 00:12:37,160
0,60 60,300
a bit.|

409
00:12:37,660 --> 00:12:38,760
0,540

410
00:12:38,970 --> 00:12:40,680
0,330 330,630
Okay, so

411
00:12:40,680 --> 00:12:41,910
0,150 150,240 240,480 480,840 870,1230
this is what {} these

412
00:12:41,910 --> 00:12:43,260
0,420 420,630 630,900 930,1200 1200,1350
packets look like,| you can

413
00:12:43,260 --> 00:12:45,810
0,630 660,1140 1140,1320 1320,1710 1710,2550
actually look at Ethernet packets

414
00:12:46,890 --> 00:12:48,600
0,240 240,780 780,1050 1050,1170 1170,1710
in action using the {tcpdump

415
00:12:48,600 --> 00:12:50,700
0,480 540,1050 1050,1410 1710,1950 1950,2100
-} program| and {} you're

416
00:12:50,700 --> 00:12:51,600
0,360 360,450 450,600 600,810 810,900
encouraged to do this, you

417
00:12:51,600 --> 00:12:52,500
0,270 270,480 480,540 540,690 690,900
probably need to do this

418
00:12:52,500 --> 00:12:53,550
0,90 90,300 300,360 360,450 450,1050
as part of the lab|

419
00:12:53,580 --> 00:12:55,170
0,540 540,780 780,870 870,1200 1200,1590
and this is actually {

420
00:12:55,470 --> 00:12:56,440
0,510
-

421
00:12:57,380 --> 00:12:59,000
0,480 510,630 630,930 930,1020 1020,1620
-} the output of {tcpdump

422
00:12:59,000 --> 00:13:01,370
0,270 270,720 720,840 840,1560 1740,2370
-} from the lab {},|

423
00:13:01,640 --> 00:13:03,470
0,300 300,630 630,1320 1320,1440 1440,1830
and what tcpdump is telling

424
00:13:03,470 --> 00:13:05,420
0,180 180,660 1200,1500 1530,1890 1890,1950
us here was telling us

425
00:13:05,420 --> 00:13:06,110
0,60 60,180 180,360 360,450 450,690
a whole bunch of things,|

426
00:13:06,110 --> 00:13:06,920
0,150 150,390 390,600 600,720 720,810
this first part is the

427
00:13:06,920 --> 00:13:08,390
0,420 420,480 480,660 660,720 720,1470
time at which the packet

428
00:13:08,600 --> 00:13:10,180
0,1110
arrived.|

429
00:13:10,600 --> 00:13:11,230
0,180 180,270 270,420 420,540 540,630
If you like you can

430
00:13:11,230 --> 00:13:12,820
0,180 180,630 690,840 840,960 960,1590
try this on your laptops,|

431
00:13:12,820 --> 00:13:14,080
0,120 120,240 240,600 600,1020 1020,1260
if you install {tcpdump -},|

432
00:13:14,350 --> 00:13:16,060
0,720 990,1350 1350,1410 1410,1650 1650,1710
{} and the rest of

433
00:13:16,060 --> 00:13:17,980
0,90 90,450 450,840 840,1260 1470,1920
the first line is a

434
00:13:17,980 --> 00:13:20,620
0,210 210,300 330,1200 1200,2010 2040,2640
sort of human readable {}

435
00:13:21,360 --> 00:13:22,530
0,720 720,780 780,930 930,1110 1110,1170
interpretation of what kind of

436
00:13:22,530 --> 00:13:24,360
0,360 360,570 570,1080 1350,1650 1650,1830
packet that is| and then

437
00:13:24,360 --> 00:13:26,040
0,210 210,480 480,660 660,1560 1560,1680
these next three lines or

438
00:13:26,040 --> 00:13:28,680
0,300 600,1020 1020,1710 1950,2400 2460,2640
the part here is a

439
00:13:28,680 --> 00:13:31,050
0,390 390,840 870,1080 1080,1380 1650,2370
hex dump of the {}

440
00:13:31,860 --> 00:13:33,690
0,150 150,240 240,660 660,1170 1320,1830
of the received packet| and

441
00:13:33,810 --> 00:13:35,160
0,270 270,390 390,1020 1080,1230 1230,1350
you can see,| we can

442
00:13:35,160 --> 00:13:37,080
0,300 300,720 720,1290 1290,1470 1470,1920
actually follow along with the

443
00:13:37,710 --> 00:13:40,470
0,540 540,1020 1110,1680 1710,2100 2100,2760
Ethernet header,| there's these first

444
00:13:40,710 --> 00:13:42,510
0,510 510,1140 1140,1410 1410,1470 1470,1800
{} 48 bits or six

445
00:13:42,510 --> 00:13:45,030
0,660 1020,1170 1170,1230 1230,2070 2070,2520
bytes is a broadcast address|

446
00:13:45,030 --> 00:13:46,740
0,360 360,1020 1050,1200 1200,1500 1500,1710
all fs and all fs

447
00:13:46,740 --> 00:13:48,390
0,420 420,750 750,870 870,1560 1560,1650
Ethernet address is broadcast to

448
00:13:48,390 --> 00:13:49,740
0,240 240,330 330,930 1050,1260 1260,1350
all the hosts on the

449
00:13:49,740 --> 00:13:51,240
0,240 240,750
local network.|

450
00:13:51,240 --> 00:13:54,000
0,90 90,570 600,1080 1080,1650 2040,2760
The next 48 bits is

451
00:13:54,120 --> 00:13:57,060
0,240 240,750 750,1620 1830,2370 2370,2940
the sending hosts Ethernet address|

452
00:13:57,060 --> 00:13:58,340
0,570
which

453
00:13:58,400 --> 00:14:00,140
0,660 960,1140 1140,1200 1200,1320 1320,1740
{} you know we can't

454
00:14:00,350 --> 00:14:02,300
0,630 630,870 870,1140 1140,1470 1470,1950
necessarily tell anything about although

455
00:14:02,630 --> 00:14:04,400
0,210 210,300 300,570 570,1200 1410,1770
{} the high bits mean

456
00:14:04,550 --> 00:14:05,720
0,180 180,390 390,540 540,660 660,1170
in fact, this was generated

457
00:14:05,720 --> 00:14:07,760
0,510 870,1260 1260,1440 1440,1740 1770,2040
by {xv6 -} we're under

458
00:14:07,760 --> 00:14:09,050
0,270 270,540 540,720 720,1020 1020,1290
{QEMU -},| so no real

459
00:14:09,050 --> 00:14:10,580
0,240 240,390 390,960 1020,1260 1260,1530
NIC was involved,| so it's

460
00:14:10,580 --> 00:14:12,500
0,240 270,780 780,840 840,1590 1590,1920
not actually a manufacturer number

461
00:14:12,500 --> 00:14:14,420
0,480 480,1170 1170,1350 1350,1680 1680,1920
appears something that {QEMU -}

462
00:14:14,420 --> 00:14:15,360
0,270 270,480
makes up.|

463
00:14:15,650 --> 00:14:17,210
0,420 780,990 990,1140 1140,1260 1260,1560
{} And then the next

464
00:14:17,210 --> 00:14:19,070
0,570 570,990 990,1080 1080,1530 1650,1860
16 bits, the next two

465
00:14:19,070 --> 00:14:21,060
0,540 540,690 690,810 810,1440
bytes is the type,|

466
00:14:21,060 --> 00:14:22,080
0,120 120,240 240,690 690,960 960,1020
it's the Ethernet type of

467
00:14:22,080 --> 00:14:23,010
0,90 90,450 450,540 540,720 720,930
the packet,| in this case,

468
00:14:23,010 --> 00:14:24,450
0,390 420,690 720,1110 1110,1230 1230,1440
it's a zero eight zero

469
00:14:24,450 --> 00:14:25,800
0,570 780,990 990,1200 1200,1290 1290,1350
six {} which is a

470
00:14:25,800 --> 00:14:27,960
0,510 510,840 840,1560 1920,2100 2100,2160
protocol called arp,| which I'll

471
00:14:27,960 --> 00:14:29,070
0,240 240,420 420,540 540,570 570,1110
talk about in a moment.|

472
00:14:29,600 --> 00:14:30,760
0,360

473
00:14:30,790 --> 00:14:31,780
0,420 450,570 570,780 780,840 840,990
And the rest of this

474
00:14:31,780 --> 00:14:33,180
0,330 330,840
stuff is,

475
00:14:33,400 --> 00:14:35,350
0,210 210,330 330,1380 1500,1830 1830,1950
is the payload of an

476
00:14:35,350 --> 00:14:37,720
0,300 300,930 1230,1830
arp packet {},

477
00:14:37,840 --> 00:14:38,710
0,120 120,240 240,420 420,630 630,870
we shall also talk about.|

478
00:14:39,660 --> 00:14:40,710
0,210 210,570 570,780 780,960 960,1050
Any questions about what were

479
00:14:40,710 --> 00:14:42,300
0,570 690,900 900,1140 1140,1290 1290,1590
{} we're looking at here.|

480
00:14:44,740 --> 00:14:45,910
0,150 150,420 420,630 630,960 960,1170
This well worth trying out

481
00:14:45,910 --> 00:14:46,960
0,90 90,240 240,330 330,870 930,1050
on your own computer, if

482
00:14:46,960 --> 00:14:48,540
0,120 120,240 240,450 450,1020
you care about networks.|

483
00:14:50,000 --> 00:14:53,090
0,660 690,1020 1290,1830 2010,2640 2640,3090
Okay, so the next protocol

484
00:14:53,090 --> 00:14:54,590
0,240 240,510 570,1230 1230,1350 1350,1500
that's of relevance to the

485
00:14:54,590 --> 00:14:57,020
0,540 540,870 900,1500 1500,1710 1710,2430
lab| and communication over Ethernet

486
00:14:57,200 --> 00:14:59,500
0,150 150,390 390,810
is called arp,|

487
00:14:59,500 --> 00:15:00,610
0,240 240,360 360,450 450,840 840,1110
So at the Ethernet level,

488
00:15:00,610 --> 00:15:01,900
0,180 180,510 510,690 690,810 810,1290
every host has a 48

489
00:15:01,900 --> 00:15:04,840
0,450 450,1110 1650,1890 1920,2190 2190,2940
Ethernet address,| but for communicating

490
00:15:04,840 --> 00:15:06,070
0,240 240,420 420,870 870,960 960,1230
over the Internet, it turns

491
00:15:06,070 --> 00:15:07,120
0,270 330,570 570,750 750,810 810,1050
out you need to use

492
00:15:07,120 --> 00:15:09,580
0,540 540,1200 1200,1560 1590,2040 2040,2460
a 32 bit Internet address|

493
00:15:09,580 --> 00:15:11,200
0,90 90,150 150,450 450,1020 1110,1620
and the reason why Internet

494
00:15:11,200 --> 00:15:12,580
0,420 420,510 510,930 930,1110 1110,1380
addresses are different is that|

495
00:15:13,000 --> 00:15:15,310
0,420 450,930 930,1110 1140,1680 1680,2310
Internet addresses have internal structure

496
00:15:15,370 --> 00:15:17,680
0,390 390,870 870,1440 1440,1740 2130,2310
in a 32 bit,| the

497
00:15:17,680 --> 00:15:19,690
0,540 540,1020 1020,1200 1200,1560 1560,2010
hosts 32 bit Internet address

498
00:15:19,870 --> 00:15:21,550
0,210 210,540 540,1020 1080,1440 1440,1680
the high bits| are full

499
00:15:21,550 --> 00:15:22,870
0,90 90,240 240,480 480,570 570,1320
of all kinds of hints

500
00:15:22,900 --> 00:15:24,970
0,570 600,1290 1290,1380 1380,1500 1500,2070
about where in the entire

501
00:15:24,970 --> 00:15:26,620
0,540 570,930 930,1290 1290,1560 1560,1650
Internet, this packet needs to

502
00:15:26,620 --> 00:15:27,380
0,420
go.|

503
00:15:27,380 --> 00:15:28,070
0,210 210,300 300,390 390,510 510,690
And so you can think

504
00:15:28,070 --> 00:15:29,090
0,60 60,180 180,570 570,930 930,1020
of an Internet address as

505
00:15:29,090 --> 00:15:30,170
0,270 270,390 390,630 630,900 900,1080
having a high bits a

506
00:15:30,170 --> 00:15:31,880
0,480 480,960 1320,1500 1500,1680 1680,1710
network number,| it's actually a

507
00:15:31,880 --> 00:15:32,810
0,150 150,300 300,690 690,780 780,930
little more complex than that,|

508
00:15:32,810 --> 00:15:33,800
0,90 90,210 210,600 600,660 660,990
but it's essentially a network

509
00:15:33,800 --> 00:15:34,910
0,270 270,450 450,900 900,990 990,1110
number,| every network in the

510
00:15:34,910 --> 00:15:36,800
0,420 690,960 960,1020 1020,1470 1470,1890
Internet has a distinct number|

511
00:15:36,800 --> 00:15:38,600
0,360 360,870 870,1200 1200,1320 1320,1800
and routers look at these

512
00:15:38,630 --> 00:15:39,470
0,90 90,390 390,660 660,780 780,840
the high bits and the

513
00:15:39,470 --> 00:15:41,720
0,390 390,870 900,1110 1110,1710 1740,2250
Internet address| to decide which

514
00:15:41,720 --> 00:15:43,040
0,480 480,600 600,690 690,1140 1140,1320
router and the Internet, this

515
00:15:43,040 --> 00:15:44,180
0,330 330,510 510,570 570,690 690,1140
packet needs to be forwarded

516
00:15:44,180 --> 00:15:45,500
0,270 720,990 990,1110 1110,1230 1230,1320
to| {} and then the

517
00:15:45,500 --> 00:15:47,090
0,270 270,780 780,960 960,1110 1110,1590
low bits in a 32

518
00:15:47,090 --> 00:15:49,280
0,150 150,660 690,1380 1410,1800 1800,2190
bit {} Internet Internet address

519
00:15:49,280 --> 00:15:51,680
0,330 330,870 1050,1590 1620,1950 1950,2400
IP address are the number

520
00:15:51,680 --> 00:15:53,420
0,90 90,420 570,750 750,1110 1140,1740
of that of the host,|

521
00:15:53,420 --> 00:15:54,410
0,150 150,300 300,360 360,660 660,990
we want to talk to

522
00:15:54,440 --> 00:15:56,700
0,930 990,1260 1260,1530 1530,2100
on its local network.|

523
00:15:56,730 --> 00:15:57,840
0,570

524
00:15:57,900 --> 00:15:58,950
0,210 210,360 360,420 420,750 750,1050
But when a packet finally

525
00:15:58,950 --> 00:16:01,900
0,870 1440,1770 1770,2340
arrives { -},|

526
00:16:01,990 --> 00:16:03,520
0,300 300,570 570,780 780,1200 1200,1530
and when the Internet packet

527
00:16:03,520 --> 00:16:05,590
0,510 510,750 1050,1620 1710,1920 1920,2070
arrives at Ethernet,| we need

528
00:16:05,590 --> 00:16:06,940
0,210 210,480 480,960 960,1170 1170,1350
some way to give in

529
00:16:06,940 --> 00:16:09,040
0,210 240,870 870,1080 1080,1470 1470,2100
on 32 bit IP address,

530
00:16:09,190 --> 00:16:10,900
0,570 570,750 750,870 870,1500 1500,1710
figure out the 48 bit

531
00:16:11,020 --> 00:16:13,270
0,510 510,1200 1230,1350 1350,1560 1560,2250
ethernet address of that host.|

532
00:16:14,510 --> 00:16:17,030
0,660 840,1080 1080,1560 1830,2070 2070,2520
And the way the Internet

533
00:16:17,030 --> 00:16:18,110
0,330 330,420 420,630 630,930 930,1080
chooses to do that is

534
00:16:18,110 --> 00:16:19,760
0,120 120,270 270,420 480,1170 1170,1650
to have a dynamic resolution

535
00:16:19,760 --> 00:16:22,040
0,780 990,1380 1380,1470 1470,1830 1830,2280
protocol,| kind of request response

536
00:16:22,040 --> 00:16:24,290
0,450 450,810 810,1230 1230,1530 1560,2250
protocol called ARP, for address

537
00:16:24,290 --> 00:16:26,150
0,720 720,1380 1530,1680 1680,1740 1740,1860
resolution protocol| and the way

538
00:16:26,150 --> 00:16:26,960
0,120 120,300 300,540 540,660 660,810
to think about it is

539
00:16:26,960 --> 00:16:29,690
0,240 630,1110 1200,1710 1710,2250 2280,2730
that {} when a IP

540
00:16:29,690 --> 00:16:30,980
0,330 330,660 660,720 720,780 780,1290
packet arrives at a router|

541
00:16:30,980 --> 00:16:31,900
0,210 210,540
or its

542
00:16:31,900 --> 00:16:32,710
0,210 210,300 300,390 390,660 660,810
needs to be sent by

543
00:16:32,710 --> 00:16:34,510
0,60 60,750 810,1320 1350,1500 1500,1800
a host| to a host

544
00:16:34,510 --> 00:16:35,290
0,180 180,450 450,540 540,690 690,780
that's known to be on

545
00:16:35,290 --> 00:16:36,700
0,90 90,300 300,840 900,1230 1230,1410
the same LAN local area

546
00:16:36,700 --> 00:16:40,570
0,480 660,1170 1170,1800 1830,2520 2550,3870
network,| the sender first broadcasts

547
00:16:40,570 --> 00:16:42,250
0,180 180,390 390,990 1140,1380 1380,1680
on that land,| an ARP

548
00:16:42,250 --> 00:16:44,110
0,570 690,1020 1020,1260 1290,1770 1770,1860
packet that's a request that

549
00:16:44,110 --> 00:16:46,300
0,480 510,900 900,1410 1440,1770 1770,2190
says whoever has whoever owns

550
00:16:46,300 --> 00:16:48,640
0,180 180,540 540,1020 1110,1560 1560,2340
this IP address,| please respond

551
00:16:48,670 --> 00:16:50,530
0,180 180,360 360,990 990,1320 1320,1860
with your 48 Ethernet address|

552
00:16:50,590 --> 00:16:52,330
0,450 450,810 810,960 960,1350 1350,1740
and assuming that host exists

553
00:16:52,330 --> 00:16:54,070
0,150 150,420 420,840 1380,1590 1590,1740
is turned on,| it will

554
00:16:54,070 --> 00:16:56,410
0,600 600,1140 1200,1380 1380,1800 1830,2340
respond with an ARP response

555
00:16:56,410 --> 00:16:57,180
0,390
packet.|

556
00:16:57,510 --> 00:16:59,310
0,450 780,1080 1140,1650 1650,1740 1740,1800
{} And this is the

557
00:16:59,310 --> 00:17:00,630
0,540 540,600 600,660 660,1170 1200,1320
format of the packet of

558
00:17:00,630 --> 00:17:02,070
0,90 90,300 300,690 870,1260 1260,1440
an ARP package,| the way

559
00:17:02,070 --> 00:17:03,900
0,330 630,930 930,1290 1290,1560 1560,1830
it actually shows up is

560
00:17:03,900 --> 00:17:06,120
0,510 510,600 630,1110 1110,1470 1680,2220
inside an Ethernet packet| and

561
00:17:06,120 --> 00:17:07,170
0,300 300,480 480,600 600,690 690,1050
so what you would actually

562
00:17:07,170 --> 00:17:09,210
0,750 1050,1260 1260,1350 1350,1740 1740,2040
see| and the network is

563
00:17:09,240 --> 00:17:11,490
0,600 600,690 690,1170 1170,1650 2010,2250
first, the Ethernet header which

564
00:17:11,490 --> 00:17:13,350
0,240 240,510 570,1320 1320,1470 1470,1860
has the 48 bit source

565
00:17:13,350 --> 00:17:15,090
0,450 450,570 570,990 990,1140 1140,1740
field, a 48 bit destination

566
00:17:15,090 --> 00:17:16,240
0,720
field,|

567
00:17:16,240 --> 00:17:18,550
0,240 240,870 870,1410 1410,1950 2130,2310
its destination source type,| so

568
00:17:18,550 --> 00:17:19,720
0,90 90,150 150,240 240,690 690,1170
this is the Ethernet header.|

569
00:17:20,850 --> 00:17:23,220
0,360 360,540 540,930 1410,1860 2190,2370
{} And then, {} from

570
00:17:23,220 --> 00:17:24,390
0,60 60,360 360,570 570,660 660,1170
the Ethernet point of view,

571
00:17:24,630 --> 00:17:26,280
0,150 150,330 330,450 450,1140 1290,1650
the rest is payload {},|

572
00:17:26,280 --> 00:17:28,620
0,180 180,750 1320,1530 1530,1890 1950,2340
but actually in the Ethernet

573
00:17:28,620 --> 00:17:30,210
0,300 300,510 510,750 750,1170 1200,1590
payload is ARP packet, which

574
00:17:30,210 --> 00:17:33,600
0,780 810,1290 1290,2250
has these fields,

575
00:17:33,630 --> 00:17:35,010
0,360 360,570 570,900 900,1110 1110,1380
boom boom boom right after

576
00:17:35,010 --> 00:17:36,240
0,150 150,750
the Ethernet

577
00:17:36,380 --> 00:17:37,790
0,360 360,810 960,1200 1200,1290 1290,1410
{} header.| And the way

578
00:17:37,790 --> 00:17:38,990
0,120 120,540 540,810 810,1110 1110,1200
the receiving host knows on

579
00:17:38,990 --> 00:17:40,400
0,240 240,660 750,1050 1050,1170 1170,1410
our packet is by looking

580
00:17:40,400 --> 00:17:41,840
0,90 90,300 300,630 630,1200 1290,1440
at this type field,| and

581
00:17:41,840 --> 00:17:43,040
0,90 90,450 450,840 840,960 960,1200
if it's zero eight zero

582
00:17:43,040 --> 00:17:46,100
0,660 930,1410 1410,1800 1950,2490 2490,3060
six, that's the agreed on

583
00:17:46,220 --> 00:17:47,540
0,270 270,390 390,780 780,1140 1140,1320
Ethernet {} protocol number for

584
00:17:47,540 --> 00:17:49,010
0,450 660,870 870,990 990,1080 1080,1470
ARP| and then the receiving

585
00:17:49,010 --> 00:17:49,970
0,210 210,510 510,660 660,870 870,960
host software would know to

586
00:17:49,970 --> 00:17:51,320
0,240 240,390 390,780 780,930 930,1350
hand this packet to its

587
00:17:51,890 --> 00:17:52,860
0,540
ARP

588
00:17:52,890 --> 00:17:55,420
0,240 270,720 720,1470 1500,2040
{} critical processing code.|

589
00:17:55,960 --> 00:17:58,030
0,450 450,570 570,960 960,1740 1830,2070
What's in these packets and

590
00:17:58,030 --> 00:17:58,810
0,150 150,210 210,360 360,480 480,780
there's a bunch of junk

591
00:17:58,810 --> 00:18:00,070
0,270 270,420 420,840 840,1170 1170,1260
here| that basically amounts to

592
00:18:00,070 --> 00:18:02,860
0,690 930,1470 1470,1740 1740,2340 2370,2790
saying I have an Internet

593
00:18:02,890 --> 00:18:04,280
0,870
address,|

594
00:18:04,280 --> 00:18:05,000
0,150 150,330 330,390 390,630 630,720
I want to turn it

595
00:18:05,000 --> 00:18:06,830
0,210 210,330 330,720 720,1530 1560,1830
into an Ethernet address,| please

596
00:18:06,830 --> 00:18:08,510
0,570 570,720 720,900 900,1380 1470,1680
respond if you own this

597
00:18:08,510 --> 00:18:11,300
0,330 330,810 1230,1680 1950,2250 2250,2790
Internet address,| {} and then,

598
00:18:11,720 --> 00:18:12,820
0,570
{}

599
00:18:13,050 --> 00:18:16,000
0,540 540,1350 1380,1980 1980,2370
these fields hold the

600
00:18:16,210 --> 00:18:19,780
0,690 750,990 1020,1770 1800,2640 3000,3570
Internet and Ethernet addresses {},|

601
00:18:19,960 --> 00:18:21,490
0,210 210,780 780,1050 1050,1140 1140,1530
of whatever host is sending

602
00:18:21,490 --> 00:18:22,420
0,180 180,360 360,600 600,750 750,930
this ARP pack| and that's

603
00:18:22,420 --> 00:18:23,350
0,180 180,300 300,660 660,840 840,930
enough to figure out the

604
00:18:23,350 --> 00:18:25,480
0,600 660,1050 1050,1170 1170,1500 1500,2130
[carper] whose to build dynamically

605
00:18:25,480 --> 00:18:28,240
0,750 1800,2130 2310,2550 2550,2670 2670,2760
tables,| that tell them the

606
00:18:28,240 --> 00:18:30,220
0,810 810,1080 1110,1590 1590,1710 1710,1980
correspondence between Ethernet and IP

607
00:18:30,220 --> 00:18:31,360
0,720
addresses.|

608
00:18:32,600 --> 00:18:34,910
0,660 990,1560 1560,1680 1680,1830 1830,2310
{} Again, we can use

609
00:18:34,940 --> 00:18:36,560
0,330 330,840 840,1170 1170,1350 1350,1620
{} {tcpdump -} in order

610
00:18:36,560 --> 00:18:38,750
0,630 810,1230 1230,1650 1650,1830 1830,2190
to {} see these packets

611
00:18:38,750 --> 00:18:41,420
0,120 120,600
go by.|

612
00:18:41,420 --> 00:18:42,500
0,300 300,570 570,660 660,900 900,1080
Highly likely to see them

613
00:18:42,500 --> 00:18:43,700
0,150 150,270 270,450 450,870 870,1200
if you run {tcpdump -},|

614
00:18:43,910 --> 00:18:47,390
0,1140 1260,1950 2250,2940 2970,3090 3090,3480
here's {} again, a {tcpdump

615
00:18:47,390 --> 00:18:49,580
0,330 330,510 510,930 930,1680 1800,2190
-} but taken from a

616
00:18:49,610 --> 00:18:52,040
0,960 1560,1740 1740,1980 1980,2130 2130,2430
lab,| it turns out that

617
00:18:52,490 --> 00:18:53,750
0,120 120,240 240,630 630,990 990,1260
in the lab you know

618
00:18:53,840 --> 00:18:55,640
0,330 330,480 480,630 630,1260 1530,1800
your {xv6 - -} will

619
00:18:55,640 --> 00:18:58,940
0,180 180,420 450,1320 1620,2160 2340,3300
end up talking a simulated

620
00:18:58,940 --> 00:19:01,040
0,330 330,510 510,1020 1080,1440 1440,2100
true,| but talking Ethernet protocol

621
00:19:01,310 --> 00:19:03,410
0,330 330,660 660,960 960,1470 1470,2100
and sending IP packets through

622
00:19:03,470 --> 00:19:05,420
0,690 720,960 960,1050 1050,1590 1590,1950
Ethernet through a simulated Ethernet

623
00:19:05,420 --> 00:19:07,430
0,480 540,810 810,1170 1170,1740 1740,2010
protocol,| with whatever host you're

624
00:19:07,430 --> 00:19:08,660
0,330 330,630 630,750 750,900 900,1230
running {QEMU -} you want.|

625
00:19:09,390 --> 00:19:10,620
0,210 210,480 510,930 930,1020 1020,1230
And so when you want

626
00:19:10,800 --> 00:19:11,790
0,300 330,630 630,720 720,870 870,990
you'll actually be able to

627
00:19:11,790 --> 00:19:14,070
0,540 540,930 990,1230 1230,1830 1830,2280
see these ARP exchanges, between

628
00:19:14,070 --> 00:19:15,780
0,210 210,360 360,1050 1320,1530 1530,1710
{xv6 - -} and your

629
00:19:15,780 --> 00:19:17,520
0,660 810,1440 1440,1530 1530,1650 1650,1740
host| and so what we're

630
00:19:17,520 --> 00:19:20,520
0,300 300,750 750,1230 1860,2250 2430,3000
seeing here is {} my

631
00:19:20,520 --> 00:19:23,310
0,870 1050,1620 1710,2310 2310,2640 2640,2790
host {} wants knows the

632
00:19:23,310 --> 00:19:24,540
0,420 420,780 780,870 870,1020 1020,1230
IP address of my {xv6

633
00:19:24,540 --> 00:19:26,310
0,150 150,750 870,1260 1290,1590 1590,1770
- -}| and wants to

634
00:19:26,610 --> 00:19:27,720
0,300 300,420 420,690 690,810 810,1110
wants to figure out its

635
00:19:27,750 --> 00:19:29,640
0,480 480,1050 1050,1230 1230,1380 1380,1890
Ethernet address on the land

636
00:19:29,640 --> 00:19:31,740
0,150 150,420 420,660 660,1500 1620,2100
that {QEMU -} simulates,| and

637
00:19:31,830 --> 00:19:33,880
0,330 330,690 690,1140 1170,1590
this second packet is

638
00:19:33,940 --> 00:19:35,800
0,270 270,570 570,720 720,1410 1620,1860
my {xv6 - -}| and

639
00:19:35,800 --> 00:19:36,640
0,150 150,240 240,420 420,510 510,840
you can see the code

640
00:19:36,640 --> 00:19:37,960
0,270 270,750 750,870 870,1080 1080,1320
that generates is my {xv6

641
00:19:37,960 --> 00:19:39,220
0,150 150,660 660,780 780,1110 1110,1260
- -} has seen this

642
00:19:39,220 --> 00:19:41,680
0,600 810,1800 1800,1980 2070,2310 2310,2460
request,| realize that it's the

643
00:19:41,680 --> 00:19:42,910
0,360 360,420 420,540 540,930 930,1230
owner of the IP address

644
00:19:42,910 --> 00:19:44,050
0,60 60,120 120,750 900,1050 1050,1140
in the request| and is

645
00:19:44,050 --> 00:19:46,390
0,270 270,450 450,540 540,1290 1770,2340
sending back the response,| {tcpdump

646
00:19:46,390 --> 00:19:48,100
0,180 180,330 330,810 810,1350 1350,1710
-} is nicely parsed out

647
00:19:48,130 --> 00:19:49,090
0,120 120,570 570,660 660,750 750,960
the fields in the ARP

648
00:19:49,090 --> 00:19:50,290
0,210 210,390 390,660 660,780 780,1200
packet| and printed them here,|

649
00:19:50,710 --> 00:19:51,660
0,540

650
00:19:52,020 --> 00:19:53,280
0,180 180,270 270,600 660,1140 1140,1260
and I think this is

651
00:19:53,280 --> 00:19:56,250
0,120 120,1050 1050,1380 1410,2040 2040,2970
the {sender's -} IP address,|

652
00:19:56,760 --> 00:19:58,470
0,600 720,960 960,1080 1080,1230 1230,1710
and this is the [],

653
00:19:58,530 --> 00:19:59,620
0,480
sorry,|

654
00:20:00,340 --> 00:20:01,570
0,420 420,510 510,630 630,990 990,1230
this is the sender's IP

655
00:20:01,570 --> 00:20:03,820
0,450 450,870 870,990 990,1350 1740,2250
address,| this is the {}

656
00:20:03,820 --> 00:20:04,960
0,330 330,600 600,750 750,840 840,1140
IP address that the sender

657
00:20:04,960 --> 00:20:06,880
0,120 120,630 630,1050 1440,1680 1680,1920
is interested in| and those

658
00:20:06,880 --> 00:20:08,920
0,210 240,1020 1020,1380 1380,1920 1920,2040
would presumably going here and

659
00:20:08,920 --> 00:20:11,620
0,540 600,1290 1350,2040 2100,2550 2550,2700
here| {} and this is

660
00:20:11,620 --> 00:20:14,060
0,120 120,1200 1260,1950
a response {}

661
00:20:15,430 --> 00:20:17,360
0,390 390,600 600,900 900,1410
{} with the {}

662
00:20:17,990 --> 00:20:20,600
0,480 480,1020 1020,1650 1950,2160 2160,2610
Ethernet address of the owner

663
00:20:20,600 --> 00:20:21,770
0,180 180,330 330,660 660,1020 1020,1170
of this IP address,| and

664
00:20:21,770 --> 00:20:22,960
0,630
this

665
00:20:22,960 --> 00:20:26,240
0,330 330,750 750,1200 1260,2220
{} Ethernet address probably

666
00:20:27,140 --> 00:20:27,890
0,210 210,300 300,480 480,570 570,750
End up being in this

667
00:20:27,890 --> 00:20:29,240
0,420 540,870 870,960 960,1080 1080,1350
field,| and if we're clever

668
00:20:29,240 --> 00:20:30,200
0,210 210,300 300,450 450,630 630,960
enough, we can pick apart

669
00:20:30,200 --> 00:20:31,400
0,180 180,660 660,780 780,1020 1020,1200
these packets and see some

670
00:20:31,400 --> 00:20:33,050
0,60 60,270 270,810 1020,1470 1470,1650
of these fields,| {} as

671
00:20:33,050 --> 00:20:35,240
0,120 120,450 450,870 870,1620
we know this part

672
00:20:35,410 --> 00:20:38,240
0,900 1290,1680 1680,2220
{} is the

673
00:20:38,520 --> 00:20:41,010
0,420 420,990 1020,1860 1890,2130 2130,2490
Ethernet header destination,| Ethernet address

674
00:20:41,010 --> 00:20:43,180
0,270 270,600 600,990 990,1320
source Ethernet address and

675
00:20:43,300 --> 00:20:44,920
0,270 270,810 840,1290 1290,1440 1440,1620
packet type, zero eight zero

676
00:20:44,920 --> 00:20:46,900
0,570 900,1380
six {}.|

677
00:20:47,020 --> 00:20:48,960
0,390 390,1410
Working backwards,

678
00:20:49,300 --> 00:20:52,510
0,480 540,1290 1290,1650 1650,2160 2610,3210
{} this is the tip

679
00:20:52,510 --> 00:20:53,650
0,330 330,450 450,540 540,690 690,1140
field, which is the IP

680
00:20:53,650 --> 00:20:55,240
0,360 360,480 480,570 570,1050 1050,1590
address that the sender wants

681
00:20:55,240 --> 00:20:56,470
0,120 120,330 330,420 420,840 840,1230
to find the Ethernet address

682
00:20:56,470 --> 00:20:58,810
0,330 390,840 1440,1620 1620,1980 2100,2340
for| and if you pick

683
00:20:58,810 --> 00:21:00,460
0,150 150,510 510,660 660,1050 1050,1650
this apart there's one byte,

684
00:21:01,010 --> 00:21:01,850
0,270 270,450 450,690 690,750 750,840
{} for each of the

685
00:21:01,850 --> 00:21:04,250
0,480 480,1560 1800,1980 1980,2100 2100,2400
four fields of the IP

686
00:21:04,250 --> 00:21:06,650
0,690 720,1020 1020,1470 1770,2160 2160,2400
address,| sorry, it's really looking

687
00:21:06,650 --> 00:21:08,540
0,120 120,540 540,960 960,1170 1170,1890
for ten zero to fifteen,|

688
00:21:08,570 --> 00:21:10,520
0,390 390,660 690,990 990,1560 1560,1950
this is ten hex zero

689
00:21:10,520 --> 00:21:12,590
0,420 420,630 630,1050 1050,1500 1500,2070
X two hex fifteen hex|

690
00:21:13,970 --> 00:21:15,740
0,240 240,420 420,810 810,1350
and then there's the

691
00:21:16,340 --> 00:21:18,260
0,600 600,780 870,1170 1170,1740 1740,1920
targets {} Ethernet address which

692
00:21:18,260 --> 00:21:20,000
0,240 270,540 540,1050 1260,1620 1620,1740
is not known| {} and

693
00:21:20,000 --> 00:21:21,020
0,150 150,240 240,600 600,690 690,1020
then the {sender's -} IP

694
00:21:21,020 --> 00:21:22,820
0,420 420,810 810,1140 1140,1350 1350,1800
address ten zero two two|

695
00:21:22,940 --> 00:21:25,790
0,600 870,990 990,1950 1980,2310 2310,2850
and the senders Ethernet address|

696
00:21:25,790 --> 00:21:26,780
0,150 150,330 510,720 720,810 810,990
and a bunch of other

697
00:21:26,780 --> 00:21:28,400
0,300 300,540 540,900 900,1110
junk here saying that|

698
00:21:28,600 --> 00:21:30,160
0,180 180,540 540,630 660,1260 1260,1560
we're interested in Ethernet and

699
00:21:30,160 --> 00:21:32,360
0,600 630,990 990,1590
IP address formats.|

700
00:21:33,220 --> 00:21:35,560
0,450 780,1350 1350,1590 1590,2130 2130,2340
And there's this request, this

701
00:21:35,560 --> 00:21:38,050
0,600 1290,1470 1470,1800 1800,1980 1980,2490
response,| any questions about ARP.|

702
00:21:39,440 --> 00:21:43,160
0,780 810,1050 1050,1500 1530,2280 2760,3720
Um, yeah question { -},|

703
00:21:43,370 --> 00:21:45,110
0,360 360,540 540,720 720,1500 1500,1740
why is it necessary for

704
00:21:45,110 --> 00:21:47,330
0,90 90,690 690,1110 1110,1710 1710,2220
the sender to include its

705
00:21:47,540 --> 00:21:49,940
0,660 660,1260 1260,1440 1440,1680 1890,2400
IP address, if it if

706
00:21:49,970 --> 00:21:52,670
0,540 600,990 990,1410 1410,2040 2490,2700
it's Ethernet addresses already {}

707
00:21:52,670 --> 00:21:54,080
0,480 480,570 570,660 660,1140 1140,1410
included in the packet, like

708
00:21:54,290 --> 00:21:55,700
0,330 330,930 930,1050 1050,1140 1140,1410
to respond to it, wouldn't

709
00:21:55,700 --> 00:21:58,490
0,420 600,1050 1050,1560 1950,2580 2580,2790
it wouldn't the receiver only

710
00:21:58,490 --> 00:22:00,620
0,300 300,510 510,660 660,1170 1830,2130
need using that address.| Yeah,

711
00:22:00,620 --> 00:22:01,370
0,150 150,270 270,360 360,600 600,750
I don't know why that

712
00:22:01,370 --> 00:22:02,330
0,120 120,270 270,600 600,690 690,960
all this stuff's in there,|

713
00:22:02,480 --> 00:22:03,560
0,330 330,420 420,660 660,960 960,1080
{} I think if you

714
00:22:03,560 --> 00:22:04,580
0,300 300,420 420,570 570,690 690,1020
wanted to, you could strip

715
00:22:04,580 --> 00:22:05,600
0,150 150,420 420,630 630,660 660,1020
this down quite a bit,|

716
00:22:05,630 --> 00:22:07,760
0,450 1170,1530 1530,1680 1680,1860 1860,2130
{} you know like that,

717
00:22:08,420 --> 00:22:10,640
0,480 480,780 1440,1770 1800,2100 2100,2220
sent,| well okay, maybe the

718
00:22:10,640 --> 00:22:12,740
0,270 270,420 420,690 720,1590
answer is that this

719
00:22:12,740 --> 00:22:14,810
0,750 750,1170 1170,1860 1860,1950 1950,2070
protocol was designed to be

720
00:22:14,810 --> 00:22:17,240
0,630 630,1200 1500,1980 1980,2280 2280,2430
usable on networks other than

721
00:22:17,270 --> 00:22:18,950
0,570 630,840 840,1290 1440,1590 1590,1680
Ethernet| and so it was

722
00:22:18,950 --> 00:22:20,990
0,330 330,390 390,510 510,840 840,2040
designed to be fairly self-contained,|

723
00:22:21,630 --> 00:22:23,040
0,240 240,390 390,510 510,750 750,1410
so that it didn't depend

724
00:22:23,040 --> 00:22:25,320
0,210 210,900 900,1140 1140,1620
on anything in the,

725
00:22:25,560 --> 00:22:26,970
0,180 180,450 450,540 540,840 840,1410
didn't depend on anything else|

726
00:22:27,060 --> 00:22:29,340
0,240 240,810 1350,1620 1620,1860 1860,2280
and therefore the ARP header

727
00:22:29,340 --> 00:22:30,150
0,180 180,240 240,630 630,690 690,810
has a copy of the

728
00:22:30,150 --> 00:22:32,130
0,450 450,1050 1140,1380 1380,1500 1500,1980
Ethernet addresses,| now, in fact

729
00:22:32,160 --> 00:22:33,120
0,150 150,270 270,480 480,630 630,960
if you know you're sending

730
00:22:33,120 --> 00:22:34,740
0,270 270,480 480,990 1050,1200 1200,1620
ARP over Ethernet,| the Ethernet

731
00:22:34,740 --> 00:22:36,180
0,390 450,900 900,1200 1200,1320 1320,1440
packet also has all the

732
00:22:36,180 --> 00:22:37,290
0,390 390,780 780,900 900,1020 1020,1110
Ethernet address, as you can

733
00:22:37,290 --> 00:22:40,420
0,180 180,660 930,1620 1980,2670
see here,| {} so,

734
00:22:40,840 --> 00:22:42,220
0,180 180,630 630,690 690,1080 1110,1380
it's redundant to be running

735
00:22:42,220 --> 00:22:43,630
0,150 150,240 240,330 330,990 1200,1410
{ARP -} over Ethernet,| but

736
00:22:43,630 --> 00:22:44,470
0,330 330,450 450,570 570,630 630,840
maybe if you are running

737
00:22:44,470 --> 00:22:46,720
0,240 240,360 360,660 660,1230 1650,2250
ARP over something else {},|

738
00:22:47,110 --> 00:22:48,340
0,180 180,390 390,600 600,1050 1050,1230
you'd need these fields, because

739
00:22:48,340 --> 00:22:49,900
0,300 300,630 630,840 840,1170 1170,1560
maybe something else, packet format,|

740
00:22:49,900 --> 00:22:51,340
0,270 270,570 570,930
doesn't have the,

741
00:22:51,430 --> 00:22:53,140
0,240 240,570 570,870 870,1020 1020,1710
doesn't already include these addresses.|

742
00:22:53,350 --> 00:22:54,970
0,600 600,960 960,1200 1200,1470 1470,1620
I see, OK, thank you.|

743
00:22:57,020 --> 00:22:58,070
0,300 300,570 570,750 750,870 870,1050
Oh sorry, what is that

744
00:22:58,070 --> 00:22:59,990
0,480 510,870 870,990 990,1380 1380,1920
part on the right versions,

745
00:23:00,020 --> 00:23:02,270
0,210 210,630 1290,1710 1710,1950 1950,2250
are you.| Okay, this, this

746
00:23:02,270 --> 00:23:03,320
0,120 120,330 330,660 660,900 900,1050
is not interesting yet,| but

747
00:23:03,320 --> 00:23:05,560
0,210 210,510 600,1770
this is ASCII

748
00:23:05,900 --> 00:23:08,400
0,810 810,900 900,1170 1170,2010
interpretation of these bytes.|

749
00:23:08,650 --> 00:23:10,580
0,480 750,1320
So, well,

750
00:23:10,920 --> 00:23:13,020
0,150 150,390 540,1140 1140,1350 1350,2100
it's a dot here corresponds

751
00:23:13,020 --> 00:23:15,260
0,390 1110,1290 1290,1650
to you know,

752
00:23:15,260 --> 00:23:17,060
0,150 150,510 780,1290 1290,1650 1650,1800
a {} a bite that

753
00:23:17,060 --> 00:23:19,100
0,180 180,420 420,840 840,1530 1680,2040
has no ascii equivalent,| and

754
00:23:19,100 --> 00:23:20,780
0,1020 1020,1140 1140,1290 1290,1590 1590,1680
this I guess somewhere in

755
00:23:20,780 --> 00:23:22,640
0,450 450,1110 1110,1230 1230,1500 1500,1860
here, 52 or {55 -}

756
00:23:22,640 --> 00:23:25,340
0,570 840,1500 1500,1800 1800,2400 2400,2700
probably,| 52 probably {R -}

757
00:23:25,340 --> 00:23:27,350
0,600 600,930 930,1020 1020,1380 1380,2010
and 55 is probably U

758
00:23:27,950 --> 00:23:29,300
0,150 150,720 960,1140 1140,1260 1260,1350
in ascii,| so this would

759
00:23:29,300 --> 00:23:30,350
0,120 120,330 330,750 750,960 960,1050
be more interesting when we

760
00:23:30,350 --> 00:23:32,390
0,300 300,840 1350,1800 1800,1890 1890,2040
start sending packets that have

761
00:23:32,390 --> 00:23:33,650
0,480 480,780 780,1050 1050,1140 1140,1260
actual ascii text in them,|

762
00:23:33,650 --> 00:23:34,840
0,270 270,600
rather than

763
00:23:35,120 --> 00:23:37,190
0,660 840,1230 1260,1620 1620,1800 1800,2070
binary fields.| Okay I see,

764
00:23:37,190 --> 00:23:39,780
0,330 330,1200 1560,2070
thank you.| Yes.|

765
00:23:40,970 --> 00:23:41,870
0,300 300,420 420,540 540,810 810,900
Okay, and I'm showing you

766
00:23:41,870 --> 00:23:42,800
0,150 150,390 390,510 510,750 750,930
this, because you'll see these

767
00:23:42,800 --> 00:23:44,440
0,450 450,510 510,600 600,1110
packets in the lab.|

768
00:23:47,830 --> 00:23:49,620
0,570 630,1140
Okay, {}

769
00:23:50,820 --> 00:23:52,230
0,480 510,780 780,990 990,1080 1080,1410
actually, there's something I wanted

770
00:23:52,230 --> 00:23:54,060
0,210 210,750
to {}.|

771
00:23:54,690 --> 00:23:56,280
0,660

772
00:23:57,100 --> 00:24:01,180
0,330 1740,3360
Well, there's

773
00:24:01,210 --> 00:24:01,900
0,300 300,330 330,450 450,510 510,690
something I want to make

774
00:24:01,900 --> 00:24:03,130
0,360 360,480 480,600 600,720 720,1230
sure that you are caught

775
00:24:03,370 --> 00:24:04,810
0,120 120,630 630,750 750,1230 1230,1440
{} in this discussion| and

776
00:24:04,810 --> 00:24:07,750
0,480 480,720 750,1650 1650,2100 2550,2940
that's the habit in {}

777
00:24:08,170 --> 00:24:11,860
0,630 630,1560 1620,2010 2040,2730 2730,3690
formatting packets of nesting protocols

778
00:24:11,860 --> 00:24:15,400
0,480 510,1350 1350,2010 2010,2370 3150,3540
and nesting headers,| so so

779
00:24:15,430 --> 00:24:16,780
0,570 570,660 660,870 870,1020 1020,1350
what we just saw was

780
00:24:16,780 --> 00:24:19,000
0,180 210,690 690,1080 1080,1560 1560,2220
a packet that Ethernet header,

781
00:24:19,630 --> 00:24:21,100
0,300 300,630 630,1140 1140,1200 1200,1470
and Ethernet payload,| the first

782
00:24:21,100 --> 00:24:22,420
0,180 180,240 240,300 300,780 780,1320
part of the Ethernet payload

783
00:24:22,420 --> 00:24:23,800
0,570 660,930 930,1050 1050,1170 1170,1380
was you know an {ARP

784
00:24:23,800 --> 00:24:25,040
0,690
-},|

785
00:24:25,040 --> 00:24:25,910
0,180 180,300 300,390 390,690 690,870
and as it happens {ARP

786
00:24:25,910 --> 00:24:28,130
0,240 240,420 420,780 780,1380 1770,2220
-} no remaining payload,| but

787
00:24:28,160 --> 00:24:29,540
0,240 240,390 390,990 1050,1230 1230,1380
there are other what we'll

788
00:24:29,540 --> 00:24:30,470
0,210 210,300 300,360 360,780 780,930
see in a moment is

789
00:24:30,470 --> 00:24:31,850
0,240 240,360 360,870 870,1320 1320,1380
much more complicated structures| in

790
00:24:31,850 --> 00:24:33,020
0,150 150,240 240,360 360,720 720,1170
which we've been Ethernet packet

791
00:24:33,140 --> 00:24:34,910
0,420 420,810 810,900 900,1290 1290,1770
that contains an IP packet|

792
00:24:35,120 --> 00:24:36,950
0,480 480,900 900,990 990,1320 1320,1830
and inside the IP packet

793
00:24:36,980 --> 00:24:38,450
0,330 330,420 420,570 570,1320 1320,1470
is a UDP packet| and

794
00:24:38,450 --> 00:24:40,790
0,690 1050,1500 1500,1590 1590,1860 1860,2340
so UDP is another protocol

795
00:24:40,790 --> 00:24:41,480
0,90 90,180 180,270 270,480 480,690
that you can run over

796
00:24:41,480 --> 00:24:42,860
0,600 660,990 990,1140 1140,1290 1290,1380
IP,| {} so there's a

797
00:24:42,860 --> 00:24:45,110
0,150 150,570 570,1230 1530,1710 1710,2250
{UDP -} header, it also,|

798
00:24:48,220 --> 00:24:49,480
0,150 150,390 390,660 660,1170 1170,1260
you know not necessarily have

799
00:24:49,480 --> 00:24:50,830
0,90 90,540 540,690 690,1140 1140,1350
to understand these acronyms yet,|

800
00:24:50,830 --> 00:24:52,660
0,210 810,960 960,1110 1110,1350 1350,1830
but as {UDP -} header,

801
00:24:52,690 --> 00:24:53,920
0,210 210,330 330,600 600,900 900,1230
a {UDP -} packet also

802
00:24:53,920 --> 00:24:55,180
0,180 180,780 780,1110 1110,1200 1200,1260
has a header and a

803
00:24:55,180 --> 00:24:57,850
0,720 870,1500 1500,1830 1890,2340 2340,2670
payload| {} and there's times

804
00:24:57,850 --> 00:24:58,900
0,210 210,420 420,480 480,780 780,1050
when used to carry another

805
00:24:58,900 --> 00:25:00,190
0,420 420,870 870,960 960,1080 1080,1290
particle inside {UDP - -},|

806
00:25:00,190 --> 00:25:01,810
0,210 210,450 450,780 780,930 930,1620
so for example the domain

807
00:25:01,810 --> 00:25:03,280
0,300 300,990
name system,|

808
00:25:03,280 --> 00:25:05,440
0,360 360,720 720,1200 1200,2100 2100,2160
has yet another format of

809
00:25:05,440 --> 00:25:07,060
0,390 390,840 840,990 990,1230 1230,1620
packet define that fits inside

810
00:25:07,060 --> 00:25:07,990
0,60 60,450 450,600 600,750 750,930
{UDP -},| so what you

811
00:25:07,990 --> 00:25:10,480
0,330 330,480 480,750 1920,2340 2340,2490
see is that hosts are

812
00:25:10,480 --> 00:25:12,190
0,420 420,930 930,1140 1140,1620 1620,1710
sending packets will build up

813
00:25:12,190 --> 00:25:13,900
0,90 90,600 690,960 960,1350 1350,1710
a packet,| the DNS software

814
00:25:13,900 --> 00:25:14,500
0,90 90,270 270,390 390,540 540,600
will say I want to

815
00:25:14,500 --> 00:25:15,460
0,240 240,270 270,630 630,840 840,960
send a packet over {UDP

816
00:25:15,460 --> 00:25:16,620
0,150 150,690
- -}.|

817
00:25:16,650 --> 00:25:18,210
0,420 420,810 810,960 960,1470 1470,1560
{The,UDP} software will prepare the

818
00:25:18,210 --> 00:25:19,980
0,90 90,420 420,1020 1140,1470 1470,1770
{UDP -} header,| we send

819
00:25:19,980 --> 00:25:21,660
0,180 180,390 390,840 840,990 990,1680
that over IP, the IP

820
00:25:21,660 --> 00:25:22,770
0,420 420,570 570,750 750,1050 1050,1110
software will {prepend -} an

821
00:25:22,770 --> 00:25:24,870
0,450 450,930 1020,1230 1230,1740 1740,2100
IP header,| the Ethernet software

822
00:25:24,870 --> 00:25:26,430
0,150 150,330 330,780 840,1350 1350,1560
will {prepend -} Ethernet header,|

823
00:25:26,430 --> 00:25:28,200
0,120 120,540 540,840 840,1020 1020,1770
and gradually build up packets

824
00:25:28,650 --> 00:25:30,390
0,390 540,720 720,990 1020,1560 1560,1740
in in that software when

825
00:25:30,390 --> 00:25:31,800
0,150 150,510 510,720 720,1110 1110,1410
it's sending.| And similarly when

826
00:25:31,920 --> 00:25:34,140
0,420 420,690 690,1140 1140,1800 2040,2220
{} system receives packets,| it

827
00:25:34,140 --> 00:25:35,220
0,210 210,360 360,450 450,630 630,1080
first gets the whole packet

828
00:25:35,220 --> 00:25:37,740
0,1080 1110,1230 1230,1590 1590,2010
inspects the first header,|

829
00:25:37,740 --> 00:25:38,910
0,90 90,390 390,810 810,990 990,1170
and notice Ethernet, because it

830
00:25:38,910 --> 00:25:40,410
0,330 330,420 420,660 690,1110 1110,1500
receives it from Ethernet NIC,|

831
00:25:40,980 --> 00:25:42,810
0,510 510,990 990,1440 1440,1650 1650,1830
checksum validity strips off this

832
00:25:42,810 --> 00:25:43,890
0,450 540,780 780,930 930,990 990,1080
header to look at the

833
00:25:43,890 --> 00:25:45,180
0,270 270,630 930,1080 1080,1200 1200,1290
next header,| there will be

834
00:25:45,180 --> 00:25:47,340
0,90 90,630 630,1050 1080,1230 1230,2160
a type this you always

835
00:25:47,430 --> 00:25:49,290
0,450 450,840 840,1440 1440,1710 1800,1860
either type field| or in

836
00:25:49,320 --> 00:25:51,150
0,360 360,540 540,600 600,1200 1200,1830
this case, the protocol field,|

837
00:25:52,210 --> 00:25:53,920
0,150 150,390 390,480 480,1140 1170,1710
that tells the software what

838
00:25:53,920 --> 00:25:55,810
0,120 120,840 990,1350 1350,1440 1440,1890
to expect after the Ethernet

839
00:25:55,810 --> 00:25:56,700
0,330
header.|

840
00:25:56,730 --> 00:25:57,870
0,450 480,600 600,780 780,870 870,1140
{} So there's a type

841
00:25:57,870 --> 00:25:59,370
0,180 180,300 300,660 660,1140 1140,1500
field that indicates IP versus

842
00:25:59,370 --> 00:26:01,110
0,510 750,990 990,1290 1290,1380 1380,1740
ARP,| so this the software

843
00:26:01,110 --> 00:26:03,630
0,150 630,1530 1530,1650 1650,1800 1800,2520
will look at each header,|

844
00:26:03,780 --> 00:26:06,510
0,660 660,960 1800,2310 2310,2400 2400,2730
validate it strip it off

845
00:26:06,510 --> 00:26:08,360
0,360 360,450 450,750 750,1380
revealing the next header,|

846
00:26:08,360 --> 00:26:09,360
0,180 180,420
you know,

847
00:26:09,360 --> 00:26:10,440
0,180 180,390 390,570 570,660 660,1080
check that header or interpret

848
00:26:10,440 --> 00:26:11,130
0,150 150,390 390,480 480,570 570,690
it figure out what it

849
00:26:11,130 --> 00:26:12,540
0,330 330,600 600,660 660,990 1020,1410
means strip it off| revealing

850
00:26:12,540 --> 00:26:13,500
0,90 90,330 330,540 540,870 870,960
the next and hand it

851
00:26:13,500 --> 00:26:14,250
0,150 150,240 240,330 330,570 570,750
on to the next layer

852
00:26:14,250 --> 00:26:16,920
0,60 60,540 1230,1650 2070,2610 2610,2670
of software,| I'll talk a

853
00:26:16,920 --> 00:26:17,880
0,120 120,270 270,510 510,780 780,960
bit more about this, but

854
00:26:18,540 --> 00:26:19,560
0,420 420,600 600,750 750,930 930,1020
this is a sort of

855
00:26:19,560 --> 00:26:21,690
0,930 960,1350 1350,1440 1440,1770 1770,2130
universal way of looking at

856
00:26:22,110 --> 00:26:25,480
0,570 1020,2100 2400,2820
a nested packet

857
00:26:25,480 --> 00:26:26,680
0,660
headers.|

858
00:26:31,370 --> 00:26:32,750
0,300 300,450 450,540 540,930 930,1380
Alright, so the Ethernet packet,

859
00:26:32,840 --> 00:26:35,870
0,180 180,510 510,1020 1260,1950 2850,3030
the Ethernet header,| {} is

860
00:26:35,870 --> 00:26:37,310
0,270 270,360 360,840 870,1170 1170,1440
enough to get a packet

861
00:26:37,310 --> 00:26:39,440
0,120 120,210 210,690 720,1320 1620,2130
to a host on a

862
00:26:40,120 --> 00:26:42,640
0,390 390,600 600,1260 1290,1830 2250,2520
local area network { -},|

863
00:26:42,640 --> 00:26:44,200
0,240 240,720 720,1080 1230,1470 1470,1560
when especially when and if

864
00:26:44,200 --> 00:26:44,740
0,120 120,270 270,330 330,480 480,540
you want to send an

865
00:26:44,740 --> 00:26:47,170
0,330 330,720 720,1380 1710,2280 2280,2430
IP packet locally,| {} you

866
00:26:47,170 --> 00:26:48,700
0,120 120,300 300,750 750,990 1140,1530
can use ARP, but {}

867
00:26:48,700 --> 00:26:50,110
0,390 390,570 570,1020 1050,1260 1260,1410
IP is used much more

868
00:26:50,110 --> 00:26:51,760
0,420 420,840 840,1080
generally IP that

869
00:26:51,760 --> 00:26:53,020
0,390 480,720 720,810 810,1200 1200,1260
a sort of layer of

870
00:26:53,020 --> 00:26:54,970
0,120 120,810 810,1020 1140,1710 1710,1950
the protocol that helps you

871
00:26:54,970 --> 00:26:56,020
0,270 270,330 330,630 630,960 960,1050
deliver a packet anywhere in

872
00:26:56,020 --> 00:26:57,550
0,120 120,630 630,960 960,1200 1200,1530
the Internet based on IP

873
00:26:57,550 --> 00:26:58,800
0,660
addresses.|

874
00:26:59,150 --> 00:27:00,830
0,420 840,1230 1230,1380 1380,1590 1590,1680
{} And so this is

875
00:27:00,830 --> 00:27:02,540
0,90 90,840 1140,1290 1290,1350 1350,1710
the format of an IP

876
00:27:02,540 --> 00:27:04,040
0,360 360,750 750,1110 1110,1260 1260,1500
packet again taken,| you can

877
00:27:04,220 --> 00:27:05,810
0,510 510,630 630,960 990,1350 1350,1590
find it in {net.h -

878
00:27:05,810 --> 00:27:06,650
0,270 270,360 360,420 420,750 750,840
-} at the source we

879
00:27:06,650 --> 00:27:08,810
0,150 150,390 720,1170 1560,1920 1920,2160
give you| {} and over

880
00:27:08,810 --> 00:27:10,370
0,420 420,540 540,1020 1080,1440 1440,1560
Ethernet at least, {} the

881
00:27:10,370 --> 00:27:11,600
0,120 120,270 270,510 510,810 810,1230
way you see, this is,|

882
00:27:11,630 --> 00:27:12,640
0,480

883
00:27:12,700 --> 00:27:14,260
0,150 150,240 240,630 630,1110 1110,1560
in an ethernet packet with

884
00:27:14,380 --> 00:27:17,860
0,450 450,1710 1740,2670 2700,3060 3060,3480
a destination source and type

885
00:27:17,860 --> 00:27:19,820
0,510 720,1350
of {},|

886
00:27:20,720 --> 00:27:22,700
0,480 480,780 780,1080 1080,1560 1560,1980
Ethernet type equals zero eight

887
00:27:22,820 --> 00:27:24,620
0,390 390,1080 1320,1590 1590,1710 1710,1800
o o| and then the

888
00:27:24,620 --> 00:27:26,160
0,420 420,1020
IP header,

889
00:27:27,260 --> 00:27:29,180
0,150 150,330 330,720 720,1440
and then IP payload,|

890
00:27:33,280 --> 00:27:35,260
0,1140 1140,1350 1350,1620 1620,1650 1650,1980
when you send a packet

891
00:27:35,260 --> 00:27:36,670
0,120 120,300 300,720 720,1290 1290,1410
to a distant network, you're

892
00:27:36,670 --> 00:27:37,420
0,120 120,180 180,420 420,690 690,750
on the other side of

893
00:27:37,420 --> 00:27:38,920
0,90 90,600 630,780 780,1230 1230,1500
the world,| the IP header

894
00:27:38,920 --> 00:27:42,280
0,240 240,690 690,1440 2370,2910 2940,3360
gets passed along this Ethernet

895
00:27:42,280 --> 00:27:43,570
0,180 180,360 360,750 750,1050 1050,1290
header gets stripped off after

896
00:27:43,570 --> 00:27:46,120
0,90 90,660 690,840 840,1500 1740,2550
you leave the local Ethernet,|

897
00:27:46,150 --> 00:27:47,260
0,600 600,630 630,780 780,930 930,1110
maybe a new one gets

898
00:27:47,260 --> 00:27:48,500
0,270 270,570 570,780
put on it

899
00:27:48,500 --> 00:27:50,000
0,120 120,330 330,900 960,1260 1260,1500
for each hop that your

900
00:27:50,000 --> 00:27:51,470
0,330 330,450 450,930 990,1320 1320,1470
packet is routed,| but the

901
00:27:51,470 --> 00:27:52,880
0,360 360,570 570,900 900,1320 1320,1410
IP header stays basically the

902
00:27:52,880 --> 00:27:54,680
0,570 900,1110 1110,1380 1380,1590 1590,1800
same,| the whole way from

903
00:27:54,680 --> 00:27:56,690
0,330 660,1140 1140,1260 1260,1590 1590,2010
the ultimate the original source

904
00:27:56,690 --> 00:27:59,120
0,570 660,1140 1140,1680 1890,2340 2340,2430
host your computer,| all the

905
00:27:59,120 --> 00:28:00,290
0,120 120,240 240,300 300,900 900,1170
way to the destination host,|

906
00:28:00,290 --> 00:28:01,260
0,540
this

907
00:28:01,260 --> 00:28:03,810
0,330 330,690 750,1290 1290,2100 2100,2550
header has global significance,| {where,as}

908
00:28:03,810 --> 00:28:05,190
0,60 60,480 480,930 960,1140 1140,1380
the Ethernet header is really

909
00:28:05,190 --> 00:28:08,020
0,240 240,570 570,720 720,1290
only used for each,

910
00:28:08,210 --> 00:28:09,350
0,330 330,390 390,660 660,930 930,1140
for a single local area

911
00:28:09,350 --> 00:28:10,460
0,510 690,840 840,930 930,1050 1050,1110
network,| so there has to

912
00:28:10,460 --> 00:28:11,540
0,90 90,300 300,810 810,990 990,1080
be enough information here to

913
00:28:11,540 --> 00:28:12,410
0,300 300,360 360,630 630,810 810,870
carry a packet all the

914
00:28:12,410 --> 00:28:14,000
0,270 270,630 870,1110 1110,1350 1350,1590
way to the far side

915
00:28:14,000 --> 00:28:15,440
0,60 60,150 150,600 870,1260 1260,1440
of the Internet| and the

916
00:28:15,440 --> 00:28:17,400
0,510 510,1500
critical fields

917
00:28:17,780 --> 00:28:20,020
0,270 270,570 570,1170 1170,1530
for our purposes really

918
00:28:20,100 --> 00:28:21,660
0,390 390,660 660,1020 1020,1500 1500,1560
three very interesting fields in

919
00:28:21,660 --> 00:28:24,390
0,180 180,600 960,1230 1230,1740 2220,2730
this packet {} format {},|

920
00:28:25,610 --> 00:28:27,890
0,450 510,1590 1590,1980 1980,2160 2160,2280
the destination field, which is

921
00:28:27,890 --> 00:28:29,720
0,90 90,540 540,720 720,1050 1050,1830
the 32 bit IP address

922
00:28:29,750 --> 00:28:31,310
0,210 210,330 330,990 1290,1500 1500,1560
of the host,| that we

923
00:28:31,310 --> 00:28:32,060
0,150 150,210 210,390 390,480 480,750
want to send the packet

924
00:28:32,060 --> 00:28:33,110
0,150 150,330 330,840 840,900 900,1050
to, in particular in its

925
00:28:33,110 --> 00:28:33,980
0,210 210,540 540,690 690,810 810,870
high bits, it's going to

926
00:28:33,980 --> 00:28:35,990
0,330 660,1410 1410,1770 1770,1860 1860,2010
have network numbers in it

927
00:28:35,990 --> 00:28:37,790
0,180 180,420 420,1080 1350,1650 1650,1800
that'll help routers| and when

928
00:28:37,790 --> 00:28:38,900
0,60 60,270 270,390 390,870 870,1110
the packet is delivered, this

929
00:28:38,900 --> 00:28:41,390
0,570 870,1350 1350,1860 2160,2280 2280,2490
p protocol field will tell

930
00:28:41,390 --> 00:28:43,400
0,90 90,660 660,1110 1440,1680 1680,2010
the destination host {} what

931
00:28:43,400 --> 00:28:44,270
0,90 90,210 210,360 360,450 450,870
to do with the packet,|

932
00:28:44,540 --> 00:28:45,380
0,390 390,540 540,630 630,690 690,840
not what to do with

933
00:28:45,380 --> 00:28:46,820
0,60 60,390 390,660 660,780 1020,1440
it next after it strips

934
00:28:46,820 --> 00:28:50,880
0,150 150,270 270,570 570,930
off the IP header.|

935
00:28:51,590 --> 00:28:53,660
0,210 210,270 270,390 390,1050 1050,2070
If you ever seen a

936
00:28:53,870 --> 00:28:57,080
0,780 780,1200 1200,1980 1980,2370
MIT IP address {},|

937
00:28:57,350 --> 00:28:59,600
0,540 540,750 750,1530 1530,1800 2100,2250
{} you'll see well there's

938
00:28:59,600 --> 00:29:00,740
0,60 60,300 300,540 540,870 870,1140
a couple different ones,| but

939
00:29:00,770 --> 00:29:02,210
0,180 180,570 570,690 690,930 930,1440
for example if you see

940
00:29:02,390 --> 00:29:03,600
0,660
{

941
00:29:04,810 --> 00:29:06,280
0,450 450,810 810,1050 1050,1320 1320,1470
-} Internet address starting with

942
00:29:06,280 --> 00:29:09,380
0,780 990,1440 1530,2490
18,| {} this

943
00:29:09,530 --> 00:29:10,430
0,180 180,390 390,570 570,660 660,900
{} the things have actually

944
00:29:10,430 --> 00:29:11,390
0,390 390,450 450,540 540,750 750,960
changed in the last couple

945
00:29:11,390 --> 00:29:13,160
0,300 300,510 570,930 1170,1650 1650,1770
years,| but {} this for

946
00:29:13,160 --> 00:29:14,840
0,60 60,390 390,1110 1140,1410 1410,1680
a long time {} was

947
00:29:14,840 --> 00:29:17,570
0,210 450,1200 1200,1680 1680,2190 2220,2730
the network number of MIT|

948
00:29:17,570 --> 00:29:19,250
0,120 120,300 300,750 750,1080 1080,1680
and so most hosted MIT

949
00:29:19,280 --> 00:29:20,810
0,210 210,360 390,870 870,1350 1350,1530
would have IP addresses whose

950
00:29:20,810 --> 00:29:22,910
0,270 270,810 840,1080 1080,1650 1860,2100
high byte was eighteen| and

951
00:29:22,910 --> 00:29:24,050
0,330 330,480 480,720 720,840 840,1140
writers all over the world

952
00:29:24,050 --> 00:29:25,130
0,90 90,270 270,420 420,900 900,1080
would have some table they'd

953
00:29:25,130 --> 00:29:26,090
0,180 180,330 330,720 720,840 840,960
look up eighteen| and say

954
00:29:26,090 --> 00:29:27,200
0,420 540,810 810,900 900,1020 1020,1110
aha I know how to

955
00:29:27,200 --> 00:29:28,520
0,210 210,390 390,780 810,1050 1050,1320
route, this packet one step

956
00:29:28,520 --> 00:29:30,060
0,420 420,510 510,1110
closer to MIT.|

957
00:29:32,080 --> 00:29:33,120
0,510

958
00:29:34,490 --> 00:29:35,600
0,360 360,540 540,780 780,990 990,1110
So let me {}, let

959
00:29:35,600 --> 00:29:37,370
0,90 90,480 480,750 750,1230 1260,1770
me show you again {tcpdump

960
00:29:37,370 --> 00:29:40,140
0,450 480,1260 1320,2280
-} output {}.|

961
00:29:40,350 --> 00:29:41,460
0,330 330,600 600,870 870,1020 1020,1110
Again actually taken from the

962
00:29:41,460 --> 00:29:43,760
0,510 540,660 660,1830
lab, that includes

963
00:29:45,420 --> 00:29:50,700
0,990 1650,2280 2280,2700 4290,4530 4530,5280
{} IP header.| Okay, so

964
00:29:50,730 --> 00:29:51,860
0,600
{}

965
00:29:52,820 --> 00:29:53,930
0,120 120,210 210,510 510,660 660,1110
we can parse this packet,

966
00:29:54,350 --> 00:29:55,670
0,780 780,840 840,960 960,1170 1170,1320
because it was sent over

967
00:29:55,670 --> 00:29:57,650
0,450 510,1140 1140,1440 1440,1860 1860,1980
the Ethernet,| it starts with

968
00:29:57,650 --> 00:29:59,160
0,150 150,510 510,960
an Ethernet header.|

969
00:30:04,390 --> 00:30:05,840
0,780

970
00:30:06,240 --> 00:30:08,480
0,390 390,720 720,1140 1140,1530
It actually one {}

971
00:30:08,720 --> 00:30:09,290
0,90 90,240 240,330 330,480 480,570
I think it's kind of

972
00:30:09,290 --> 00:30:10,790
0,300 300,420 420,630 630,1140 1140,1500
wrong with these {tcpdump -}

973
00:30:10,880 --> 00:30:12,020
0,150 150,540 540,990 990,1080 1080,1140
with these packets that are

974
00:30:12,020 --> 00:30:13,580
0,630 630,960
generated| and

975
00:30:14,870 --> 00:30:16,070
0,360 360,480 480,720 720,1050 1050,1200
now that I'm seeing it

976
00:30:16,070 --> 00:30:16,670
0,120 120,270 270,420 420,510 510,600
I'm not sure what the

977
00:30:16,670 --> 00:30:19,130
0,360 360,630 780,1590 1680,2190 2190,2460
problem is,| {} they should

978
00:30:19,130 --> 00:30:20,360
0,180 180,600 600,720 720,930 930,1230
not start with all these

979
00:30:20,360 --> 00:30:21,830
0,390 390,780 780,1080 1080,1350 1350,1470
Ethernet headers shouldn't start with

980
00:30:21,830 --> 00:30:23,500
0,240 240,630
all fs,

981
00:30:23,500 --> 00:30:25,480
0,600 600,1230 1440,1650 1650,1890 1890,1980
broadcast address,| that cause the

982
00:30:25,480 --> 00:30:26,260
0,270 270,330 330,420 420,540 540,780
packet to go to every

983
00:30:26,260 --> 00:30:27,970
0,660 960,1170 1170,1320 1320,1500 1500,1710
host| and you would not

984
00:30:27,970 --> 00:30:29,050
0,270 270,510 510,630 630,720 720,1080
see that for a packet

985
00:30:29,050 --> 00:30:30,790
0,270 270,660 660,840 840,1320 1320,1740
sent between two individual hosts

986
00:30:30,790 --> 00:30:31,810
0,150 150,300 300,480 480,840 870,1020
as this one is on

987
00:30:31,810 --> 00:30:33,190
0,90 90,300 300,750 930,1200 1200,1380
a real network,| there's something

988
00:30:33,190 --> 00:30:34,660
0,300 300,540 540,750 750,870 870,1470
funny going on with my

989
00:30:35,260 --> 00:30:36,430
0,240 240,720 720,780 780,840 840,1170
{} solution to the network

990
00:30:36,430 --> 00:30:38,170
0,330 330,510 510,750 750,1110 1410,1740
lab with {QEMU -},| anyway

991
00:30:38,170 --> 00:30:39,880
0,90 90,180 180,420 810,1200 1200,1710
we have the Ethernet destination

992
00:30:39,880 --> 00:30:42,000
0,450 450,780 780,1560
address, Ethernet source

993
00:30:42,420 --> 00:30:44,850
0,810 1050,1530 1530,1650 1650,2040 2040,2430
address| and the Ethernet type

994
00:30:44,850 --> 00:30:46,080
0,120 120,450 450,720 720,900 900,1230
in zero eight o o

995
00:30:46,080 --> 00:30:47,160
0,510
is

996
00:30:47,460 --> 00:30:49,500
0,270 270,480 480,690 750,1560 1560,2040
means that the remaining bytes

997
00:30:49,500 --> 00:30:52,360
0,330 360,750 750,1200
are IP packet.|

998
00:30:52,360 --> 00:30:54,140
0,510 510,960
{The,IP} packet

999
00:30:54,140 --> 00:30:55,220
0,300 300,540 540,780 780,870 870,1080
{} header length I think

1000
00:30:55,220 --> 00:30:57,680
0,360 360,810 840,1140 1140,1830
it's a twenty bytes,|

1001
00:30:58,320 --> 00:31:00,690
0,900 1050,1290 1290,1440 1440,1620 1620,2370
{} hoping find the end

1002
00:31:01,480 --> 00:31:03,380
0,240 240,1410
two fifteen,

1003
00:31:05,670 --> 00:31:06,810
0,240 240,660 660,870 870,930 930,1140
so this must be the

1004
00:31:06,810 --> 00:31:08,280
0,390 390,480 480,600 600,1020 1020,1470
end of the IP header.|

1005
00:31:10,900 --> 00:31:12,040
0,600

1006
00:31:12,420 --> 00:31:13,980
0,360 420,840 840,1230 1230,1410 1410,1560
And working backwards, because these

1007
00:31:13,980 --> 00:31:14,700
0,60 60,150 150,450 450,510 510,720
are the fields, we really

1008
00:31:14,700 --> 00:31:16,890
0,270 270,660 960,1230 1230,1470 1470,2190
care about,| {} the destination

1009
00:31:16,890 --> 00:31:19,200
0,450 450,990 990,1440
IP field is

1010
00:31:19,290 --> 00:31:20,940
0,270 270,420 420,750 750,1140 1140,1650
{} is ten ten zero

1011
00:31:20,940 --> 00:31:22,460
0,300 300,870
two two,|

1012
00:31:22,490 --> 00:31:23,760
0,690

1013
00:31:23,970 --> 00:31:25,380
0,390 390,510 510,630 630,990 990,1410
which is I think that

1014
00:31:25,680 --> 00:31:27,300
0,270 270,660 660,960 960,1080 1080,1620
in {QEMU's - -} funny

1015
00:31:27,330 --> 00:31:29,400
0,570 570,930 930,1140 1140,1410
simulated network is the

1016
00:31:29,400 --> 00:31:30,900
0,480 480,600 600,810 810,1080 1080,1500
address of the real computer,

1017
00:31:30,900 --> 00:31:32,940
0,300 330,570 570,1080 1080,1410 1620,2040
I'm running QEMU on {},|

1018
00:31:32,940 --> 00:31:33,930
0,150 150,270 270,600 600,840 840,990
and then before that is

1019
00:31:33,930 --> 00:31:36,330
0,360 390,1140 1230,1710 1710,2190 2190,2400
this IP source address, which

1020
00:31:36,330 --> 00:31:39,270
0,300 300,690 690,1140 1140,1740 1830,2940
is ten zero two fifteen,|

1021
00:31:39,480 --> 00:31:40,780
0,780

1022
00:31:41,130 --> 00:31:42,240
0,240 240,360 360,450 450,870 870,1110
which is the sender which

1023
00:31:42,240 --> 00:31:44,100
0,390 420,720 720,1110 1110,1350 1350,1860
is {QEMU's - -} address

1024
00:31:44,100 --> 00:31:45,260
0,210 210,570
for the,

1025
00:31:45,380 --> 00:31:46,520
0,210 210,390 390,510 510,750 750,1140
for {xv6 - -} basically

1026
00:31:46,520 --> 00:31:48,590
0,210 210,660 660,1050 1320,1620 1620,2070
running inside QEMU| and then

1027
00:31:48,740 --> 00:31:50,540
0,270 270,510 510,810 810,1200 1260,1800
this stuff before this, {}

1028
00:31:50,750 --> 00:31:51,830
0,240 240,420 420,600 600,900 900,1080
all this other stuff, there's

1029
00:31:51,830 --> 00:31:54,380
0,90 90,810 810,1080 1080,1920
a sixteen bit checksum,|

1030
00:31:54,380 --> 00:31:55,790
0,240 240,630 630,780 780,1350 1350,1410
{} which your software is

1031
00:31:55,790 --> 00:31:57,320
0,240 240,330 330,840 960,1200 1200,1530
supposed to check to realize

1032
00:31:57,320 --> 00:31:57,980
0,120 120,150 150,450 450,540 540,660
that a packet has been

1033
00:31:57,980 --> 00:31:59,690
0,540 540,660 660,810 810,900 900,1710
corrupted and should be discarded

1034
00:31:59,900 --> 00:32:02,150
0,360 360,840 930,1710 1830,2190 2190,2250
that's this checksum,| theres {}

1035
00:32:02,150 --> 00:32:03,500
0,270 270,780
one byte,|

1036
00:32:04,000 --> 00:32:05,560
0,360 360,540 540,810 810,1020 1020,1560
alright mess something up here.|

1037
00:32:07,670 --> 00:32:09,020
0,300 300,480 480,900 930,1230 1230,1350
Oh, this is this is

1038
00:32:09,020 --> 00:32:10,700
0,510 510,750 750,960 960,1050 1050,1680
sixteen sorry, this is sixteen

1039
00:32:10,700 --> 00:32:13,740
0,270 270,960 1200,1590 1590,2460
bit checksum,| this eleven

1040
00:32:14,150 --> 00:32:16,370
0,660 870,1020 1020,1560 1560,2040 2070,2220
is the protocol number, which

1041
00:32:16,370 --> 00:32:18,080
0,120 120,540 540,960 1020,1410 1410,1710
is particularly important,| eleven hex

1042
00:32:18,080 --> 00:32:19,160
0,90 90,510 510,720 720,960 960,1080
is sixteen plus one or

1043
00:32:19,160 --> 00:32:20,700
0,990
seventeen,|

1044
00:32:20,820 --> 00:32:21,810
0,270 270,450 450,630 630,780 780,990
so that means that this

1045
00:32:21,810 --> 00:32:23,940
0,150 150,420 570,750 750,1530
is a UDP packet,

1046
00:32:24,200 --> 00:32:26,750
0,480 480,630 630,840 840,1470 1800,2550
based on that protocol field.|

1047
00:32:28,160 --> 00:32:28,940
0,180 180,330 330,480 480,630 630,780
And then all this other

1048
00:32:28,940 --> 00:32:29,630
0,180 180,240 240,360 360,510 510,690
stuff we don't really care

1049
00:32:29,630 --> 00:32:30,440
0,210 210,360 360,570 570,660 660,810
about,| as things like the

1050
00:32:30,440 --> 00:32:33,020
0,300 300,390 390,480 480,1140
length of the packet.|

1051
00:32:35,020 --> 00:32:37,780
0,150 150,480 480,870 1320,1860 1860,2760
Any questions about IP headers?|

1052
00:32:43,560 --> 00:32:45,220
0,480 630,1080
Alright, {}

1053
00:32:45,440 --> 00:32:46,700
0,330 330,420 420,750 750,1080 1080,1260
again, the critical stuff is

1054
00:32:46,700 --> 00:32:48,500
0,300 600,1020 1020,1230 1230,1560 1560,1800
the IP header has the

1055
00:32:48,530 --> 00:32:50,360
0,630 630,1290 1320,1440 1440,1500 1500,1830
IP address of the source

1056
00:32:50,360 --> 00:32:52,610
0,750 840,1230 1230,1380 1380,1830 1830,2250
destination,| and this protocol field

1057
00:32:52,610 --> 00:32:53,630
0,120 120,240 240,330 330,750 750,1020
is going to tell the

1058
00:32:54,260 --> 00:32:56,810
0,810 810,1440 1440,1860 1860,2310 2310,2550
destination hosts networking stack,| that

1059
00:32:57,050 --> 00:32:58,670
0,510 510,900 900,1050 1050,1140 1140,1620
this packet should be processed

1060
00:32:58,670 --> 00:33:00,020
0,120 120,360 360,450 450,810 810,1350
by its {UDP -} software,|

1061
00:33:01,390 --> 00:33:03,320
0,180 180,240 240,450 450,1350
which I'll talk about

1062
00:33:03,410 --> 00:33:04,500
0,240 240,510
right now.|

1063
00:33:05,040 --> 00:33:07,290
0,420 450,720 720,1110 1710,2040 2040,2250
Okay, the {}, this this

1064
00:33:07,290 --> 00:33:09,020
0,450 450,1020
IP header.|

1065
00:33:09,420 --> 00:33:10,740
0,180 180,840 900,1020 1020,1230 1230,1320
It's enough to get a

1066
00:33:10,740 --> 00:33:12,120
0,420 420,510 510,720 720,1260 1260,1380
packet to any host on

1067
00:33:12,120 --> 00:33:14,250
0,120 120,750 1530,1860 1860,1950 1950,2130
the Internet,| but we want

1068
00:33:14,250 --> 00:33:15,150
0,60 60,210 210,510 510,660 660,900
to do better than that,|

1069
00:33:15,150 --> 00:33:16,770
0,210 210,780 780,1050 1050,1380 1380,1620
every host was running lots

1070
00:33:16,770 --> 00:33:17,700
0,90 90,270 270,330 330,570 570,930
and lots of different programs

1071
00:33:17,700 --> 00:33:18,390
0,120 120,330 330,420 420,600 600,690
that need to use the

1072
00:33:18,390 --> 00:33:20,490
0,510 510,1260 1380,1770 1770,1860 1860,2100
network,| they need to send

1073
00:33:20,490 --> 00:33:21,420
0,90 90,420 420,810 810,870 870,930
and receive packets in the

1074
00:33:21,420 --> 00:33:22,470
0,300 300,390 390,510 510,600 600,1050
network| and so we need

1075
00:33:22,500 --> 00:33:23,730
0,330 330,570 570,780 780,1140 1140,1230
a way that's not in

1076
00:33:23,730 --> 00:33:25,440
0,150 150,420 930,1110 1110,1320 1320,1710
the {}, it's not included

1077
00:33:25,440 --> 00:33:26,670
0,90 90,180 180,510 510,900 960,1230
in the IP field,| in

1078
00:33:26,670 --> 00:33:28,500
0,270 270,360 360,690 690,960 960,1830
order to decide which application

1079
00:33:30,030 --> 00:33:32,340
0,510 510,960 1080,1440 1440,2100 2100,2310
needs to, which application on

1080
00:33:32,340 --> 00:33:34,020
0,90 90,450 450,990 1020,1320 1320,1680
the target host this package

1081
00:33:34,020 --> 00:33:34,920
0,120 120,180 180,300 300,630 630,900
ought to be handed off

1082
00:33:34,920 --> 00:33:35,500
0,210
to.|

1083
00:33:36,830 --> 00:33:39,230
0,390 720,1440 1440,1710 1740,2190 2190,2400
And there's a couple of

1084
00:33:39,230 --> 00:33:41,120
0,720 720,900 1200,1470 1470,1680 1680,1890
protocols that {} do that

1085
00:33:41,120 --> 00:33:42,050
0,420 420,690 690,750 750,840 840,930
job,| one of them is

1086
00:33:42,050 --> 00:33:46,440
0,1020 1350,1890 2340,2730 2730,3450
TCP {} quite complex,|

1087
00:33:46,630 --> 00:33:48,190
0,450 450,630 630,960 960,1080 1080,1560
{} and others {UDP -}.|

1088
00:33:48,220 --> 00:33:49,390
0,450 450,510 510,810 810,990 990,1170
TCP is actually what's used

1089
00:33:49,390 --> 00:33:50,500
0,510 510,660 660,870 870,990 990,1110
mostly for things like the

1090
00:33:50,500 --> 00:33:52,210
0,660 690,990 1140,1560 1560,1650 1650,1710
web| and TCP is a

1091
00:33:52,210 --> 00:33:54,060
0,210 210,630 630,1080 1080,1320
very complex protocol that

1092
00:33:54,060 --> 00:33:55,860
0,420 420,1020 1050,1350 1350,1470 1470,1800
not only helps your packet

1093
00:33:55,860 --> 00:33:56,610
0,120 120,450 450,510 510,600 600,750
be delivered to the right

1094
00:33:56,610 --> 00:33:58,350
0,660 690,1050 1050,1290 1290,1470 1470,1740
application,| but also has a

1095
00:33:58,350 --> 00:33:59,940
0,390 390,630 630,990 990,1140 1140,1590
lot of things like sequence

1096
00:33:59,940 --> 00:34:01,860
0,450 450,570 570,930 960,1230 1410,1920
numbers in order to detect

1097
00:34:01,860 --> 00:34:04,080
0,300 300,870 870,1110 1320,1650 1650,2220
lost packets and {re-transmit -}

1098
00:34:04,080 --> 00:34:05,580
0,330 360,720 720,900 900,1350 1350,1500
them,| make sure packets or

1099
00:34:05,610 --> 00:34:07,590
0,390 390,570 570,1110 1230,1530 1530,1980
data is delivered in order

1100
00:34:07,590 --> 00:34:09,240
0,90 90,450 450,1020 1020,1320 1410,1650
and without gaps,| if in

1101
00:34:09,240 --> 00:34:10,920
0,240 240,510 510,750 750,1140 1440,1680
case anything goes wrong,| {UDP

1102
00:34:10,920 --> 00:34:12,120
0,300 300,390 390,450 450,810 810,1200
-} is a much simpler

1103
00:34:12,120 --> 00:34:15,240
0,660 780,1200 1590,1920 1920,2160 2160,3120
protocol,| {} that just delivers

1104
00:34:15,420 --> 00:34:16,680
0,180 180,360 360,450 450,900 900,1260
a sort of best effort

1105
00:34:16,680 --> 00:34:17,940
0,510 510,570 570,660 660,1140 1140,1260
delivery of a packet to

1106
00:34:17,940 --> 00:34:20,160
0,60 60,450 450,1080 1080,1320 1650,2220
a particular application,| but, {}

1107
00:34:20,760 --> 00:34:22,770
0,390 390,690 690,930 930,1680 1680,2010
without any error correction or

1108
00:34:22,770 --> 00:34:23,420
0,300
{}

1109
00:34:25,150 --> 00:34:27,220
0,330 330,600 600,900 900,1350 1620,2070
basically without anything else {},|

1110
00:34:27,280 --> 00:34:29,530
0,390 390,660 660,990 1020,1440 1440,2250
for us, the critical fields

1111
00:34:29,590 --> 00:34:31,420
0,390 390,630 630,780 780,1170 1170,1830
are these two port numbers|

1112
00:34:31,570 --> 00:34:32,560
0,210 210,270 270,540 540,840 840,990
and the game here is

1113
00:34:32,560 --> 00:34:34,930
0,270 300,750 750,900 900,1860 1890,2370
that when your application wants

1114
00:34:34,930 --> 00:34:37,270
0,120 120,390 390,450 450,1320 1650,2340
to send or receive packets,|

1115
00:34:37,330 --> 00:34:38,620
0,270 270,600 600,870 900,1080 1080,1290
it uses the what's called

1116
00:34:38,620 --> 00:34:40,620
0,90 90,690 690,1500
the sockets API,

1117
00:34:41,080 --> 00:34:42,360
0,660
{}

1118
00:34:43,280 --> 00:34:44,300
0,360 360,510 510,750 750,840 840,1020
on {Unix -} at any

1119
00:34:44,300 --> 00:34:45,220
0,300
way,|

1120
00:34:45,370 --> 00:34:46,120
0,210 210,330 330,450 450,540 540,750
and this is a set

1121
00:34:46,120 --> 00:34:48,190
0,90 90,420 420,990 1020,1980 1980,2070
of system calls| {where,by} a

1122
00:34:48,190 --> 00:34:49,480
0,510 510,720 720,870 870,1110 1110,1290
process can say look I'm

1123
00:34:49,480 --> 00:34:51,430
0,360 360,420 420,1080 1110,1830 1830,1950
interested in packets addressed to

1124
00:34:51,430 --> 00:34:53,020
0,120 120,750 750,1230 1230,1350 1350,1590
a particular port| and it'll

1125
00:34:53,020 --> 00:34:55,870
0,480 1530,1710 1710,1980 1980,2370 2370,2850
say what port numbers interested,|

1126
00:34:55,870 --> 00:34:56,800
0,420
sorry,

1127
00:34:56,800 --> 00:34:58,510
0,600 600,930 930,1350 1350,1530 1530,1710
packets with particular I want

1128
00:34:58,510 --> 00:34:59,500
0,60 60,450 450,810 810,930 930,990
to receive packets with a

1129
00:34:59,500 --> 00:35:02,140
0,450 450,1170 1170,1590 1800,2340 2400,2640
particular destination port| and the

1130
00:35:02,140 --> 00:35:02,980
0,360 360,540 540,660 660,810 810,840
operating {system -} make a

1131
00:35:02,980 --> 00:35:04,300
0,300 300,630 630,780
system call,| it

1132
00:35:05,170 --> 00:35:06,040
0,330 330,540 540,720 720,810 810,870
set this up in the

1133
00:35:06,040 --> 00:35:07,090
0,330 330,630 630,750 750,1020 1020,1050
operating system will return a

1134
00:35:07,090 --> 00:35:09,850
0,330 330,1110 1290,2010 2250,2580 2580,2760
file descriptor,| {} and every

1135
00:35:09,850 --> 00:35:11,140
0,120 120,210 210,570 570,1170 1170,1290
time a packet arrives with

1136
00:35:11,140 --> 00:35:12,640
0,180 180,570 570,750 750,1230 1230,1500
the port, the application asks

1137
00:35:12,640 --> 00:35:14,560
0,450 780,1260 1290,1470 1470,1770 1770,1920
for,| {} that packet will

1138
00:35:14,560 --> 00:35:16,510
0,720 750,960 960,1050 1050,1260 1260,1950
appear on the file descriptor

1139
00:35:16,510 --> 00:35:17,680
0,150 150,210 210,780 780,960 960,1170
and the application can read

1140
00:35:17,680 --> 00:35:18,480
0,270
it.|

1141
00:35:18,920 --> 00:35:22,130
0,420 780,1320 2070,2640 2640,2970 2970,3210
{} And {} the these

1142
00:35:22,130 --> 00:35:23,480
0,420 420,510 510,720 720,990 990,1350
ports are really two kinds

1143
00:35:23,480 --> 00:35:26,810
0,330 630,1290 1290,1860 1890,2610 2610,3330
of ports,| {} {some,are} well-known

1144
00:35:26,810 --> 00:35:28,310
0,300 300,690 690,960 1110,1500 1500,1500
port numbers,| like {} I

1145
00:35:28,310 --> 00:35:30,760
0,480 510,840 840,1890
think port 53

1146
00:35:30,760 --> 00:35:32,780
0,300 300,420 420,1440
is the official

1147
00:35:32,930 --> 00:35:35,240
0,450 450,1140 1170,1740 1740,2040 2040,2310
well known universally agreed port

1148
00:35:35,240 --> 00:35:37,190
0,270 270,660 810,1080 1080,1680 1680,1950
number for a DNS name

1149
00:35:37,190 --> 00:35:38,240
0,420 420,600 600,690 690,870 870,1050
server,| so if you want

1150
00:35:38,240 --> 00:35:39,110
0,60 60,330 330,450 450,780 780,870
to send a request to

1151
00:35:39,110 --> 00:35:40,520
0,60 60,450 450,600 600,1050 1170,1410
a DNS name server,| you

1152
00:35:40,520 --> 00:35:41,660
0,90 90,420 420,570 570,810 810,1140
can send into {UDP -}

1153
00:35:41,660 --> 00:35:44,030
0,420 510,1110 1110,1350 1350,1650 1650,2370
packet addressed {dport -} 53,|

1154
00:35:44,450 --> 00:35:45,620
0,330 330,390 390,570 570,660 660,1170
there's a bunch of other

1155
00:35:46,290 --> 00:35:48,540
0,120 120,660 660,1140 1140,1470 1650,2250
{} well-known ports for commonly

1156
00:35:48,540 --> 00:35:51,900
0,360 360,1170 1860,2370 2460,3090 3090,3360
available services with universally agreed

1157
00:35:51,900 --> 00:35:53,850
0,150 150,870 870,1080 1080,1530 1710,1950
on numbers| and then the

1158
00:35:53,850 --> 00:35:55,890
0,450 450,1380 1440,1890 1890,1950 1950,2040
{remainings -} remainder of the

1159
00:35:55,890 --> 00:35:58,260
0,480 480,810 1140,1410 1410,1680 1680,2370
sixteen bit port number space,|

1160
00:35:58,380 --> 00:36:00,600
0,510 510,930 960,1530 1530,2010 2040,2220
{} is used for the

1161
00:36:00,600 --> 00:36:02,490
0,180 180,240 240,840 840,1380 1380,1890
sort of anonymous client ends

1162
00:36:02,490 --> 00:36:05,080
0,570 570,750 750,930 1500,2130
support,| so if {}

1163
00:36:05,260 --> 00:36:06,010
0,270 270,420 420,480 480,690 690,750
I want to send a

1164
00:36:06,010 --> 00:36:07,420
0,360 360,450 450,510 510,930 930,1410
packet to a DNS server,|

1165
00:36:07,750 --> 00:36:08,860
0,390 390,600 600,870 870,990 990,1110
it's {dport -} will be

1166
00:36:08,860 --> 00:36:10,120
0,570 570,810 810,930 930,1050 1050,1260
53 alright, but its {sport

1167
00:36:10,120 --> 00:36:11,470
0,330 330,510 510,780 810,1080 1080,1350
-} will be a more

1168
00:36:11,470 --> 00:36:13,120
0,60 60,270 270,750 750,1140 1140,1650
or less randomly chosen number

1169
00:36:13,120 --> 00:36:15,250
0,180 180,540 540,1230 1440,1950 1950,2130
for my end,| so that

1170
00:36:15,250 --> 00:36:17,590
0,540 810,1590 1590,1680 1680,1740 1740,2340
when that will be associated

1171
00:36:17,590 --> 00:36:20,020
0,120 120,300 300,1440 1470,2160 2220,2430
with my application's socket,| so

1172
00:36:20,020 --> 00:36:20,890
0,90 90,240 240,300 300,660 660,870
that when the DNS server

1173
00:36:20,890 --> 00:36:22,240
0,300 300,330 330,930 1050,1260 1260,1350
sends a reply, it will

1174
00:36:22,240 --> 00:36:24,610
0,90 90,750 990,1200 1380,2130 2130,2370
be addressed,| the DNS or

1175
00:36:24,610 --> 00:36:26,560
0,210 360,990 990,1110 1110,1650 1650,1950
will copy the request source

1176
00:36:26,560 --> 00:36:29,080
0,480 660,1080 1080,1320 1350,2190 2190,2520
port into the destination port

1177
00:36:29,080 --> 00:36:30,370
0,330 330,420 420,480 480,1020 1020,1290
field of the reply sent

1178
00:36:30,370 --> 00:36:31,690
0,120 120,360 360,450 450,570 570,1320
it back to my machine|

1179
00:36:31,930 --> 00:36:32,980
0,240 240,360 360,690 690,810 810,1050
and my machine will use

1180
00:36:32,980 --> 00:36:34,540
0,210 210,480 480,840 840,1140
this port number to

1181
00:36:35,190 --> 00:36:38,010
0,630 630,1050 1080,1560 1560,2490 2580,2820
figure out which application {}

1182
00:36:38,010 --> 00:36:39,460
0,180 180,330 330,420 420,900
should get the reply.|

1183
00:36:41,270 --> 00:36:42,320
0,240 240,420 420,480 480,690 690,1050
Okay, so the main function

1184
00:36:42,320 --> 00:36:43,880
0,420 630,1110 1110,1200 1200,1380 1380,1560
here is to have these

1185
00:36:43,880 --> 00:36:45,350
0,120 120,390 390,1020 1080,1320 1320,1470
two port numbers,| {} in

1186
00:36:45,350 --> 00:36:48,290
0,270 270,870 1890,2310 2310,2850 2850,2940
order to {} handout be

1187
00:36:48,290 --> 00:36:49,310
0,120 120,210 210,420 420,540 540,1020
able to hand off packets

1188
00:36:49,310 --> 00:36:52,580
0,510 510,1770 2100,2670
individual applications {}

1189
00:36:52,700 --> 00:36:54,320
0,270 270,450 450,1110
on this machine.|

1190
00:36:55,900 --> 00:36:56,860
0,270 360,570 570,690 690,750 750,960
So, feel free to ask

1191
00:36:56,860 --> 00:37:00,130
0,660 1770,2250 2520,2700 2700,2790 2790,3270
questions,| {} I have {tcpdump

1192
00:37:00,130 --> 00:37:02,080
0,270 270,750 750,1170
-} output for

1193
00:37:03,210 --> 00:37:05,040
0,690 690,1200
UDP also,|

1194
00:37:05,070 --> 00:37:07,470
0,450 450,750 750,870 870,960 960,2400
again taken from the lab.|

1195
00:37:08,160 --> 00:37:09,480
0,480 480,660 660,990 990,1110 1110,1320
{} So again we have

1196
00:37:09,480 --> 00:37:10,600
0,510
a

1197
00:37:10,810 --> 00:37:12,880
0,450 510,930 930,1530
{} Ethernet header,|

1198
00:37:12,880 --> 00:37:14,740
0,1170
and

1199
00:37:14,740 --> 00:37:17,080
0,510 510,990 1080,1920 1920,2160 2160,2340
twenty by IP header which

1200
00:37:17,080 --> 00:37:19,540
0,330 330,630 630,1110 1380,1740 1740,2460
probably ends here,| {} eleven

1201
00:37:19,540 --> 00:37:20,600
0,540
is

1202
00:37:20,920 --> 00:37:23,140
0,360 360,750 750,1710 1950,2100 2100,2220
IP protocol seventeen which is

1203
00:37:23,140 --> 00:37:23,980
0,90 90,240 240,570 570,720 720,840
{UDP - -},| so the

1204
00:37:23,980 --> 00:37:25,480
0,480 480,900 900,1020 1020,1230 1230,1500
receiving host will know to

1205
00:37:25,660 --> 00:37:27,040
0,690 690,840 840,960 960,1230 1230,1380
process it with its {UDP

1206
00:37:27,040 --> 00:37:28,280
0,720
-}

1207
00:37:28,280 --> 00:37:29,620
0,720
software,|

1208
00:37:29,840 --> 00:37:33,100
0,570 630,990 990,1920 1920,2670
{} the next {}

1209
00:37:33,100 --> 00:37:34,980
0,360 360,1260
eight bytes,

1210
00:37:36,110 --> 00:37:37,700
0,450 450,720 750,930 930,1260 1260,1590
are the {UDP -} header

1211
00:37:37,700 --> 00:37:38,900
0,210 210,300 300,510 510,750 750,1200
which is shown right here.|

1212
00:37:39,740 --> 00:37:41,200
0,240 240,900
And so

1213
00:37:41,550 --> 00:37:42,450
0,210 210,420 420,510 510,690 690,900
who knows what these port

1214
00:37:42,450 --> 00:37:43,780
0,270 270,750
numbers are.|

1215
00:37:45,170 --> 00:37:46,040
0,120 120,270 270,420 420,690 690,870
I mean now this, this

1216
00:37:46,040 --> 00:37:48,740
0,510 720,1620 1620,1950 1980,2550 2550,2700
is unfortunately a package is

1217
00:37:48,740 --> 00:37:51,290
0,630 630,1170 1500,1680 1680,1980 1980,2550
generated by the lab software|

1218
00:37:51,290 --> 00:37:53,800
0,390 390,780
without any,

1219
00:37:54,850 --> 00:37:56,350
0,330 330,840 840,1200 1200,1350 1350,1500
any special numbers and see

1220
00:37:56,350 --> 00:37:57,220
0,180 180,300 300,420 420,630 630,870
this is the port numbers

1221
00:37:57,220 --> 00:37:59,230
0,90 90,330 330,420 420,1050 1710,2010
that happened to choose,| this

1222
00:37:59,230 --> 00:37:59,950
0,180 180,240 240,360 360,630 630,720
must be the length of

1223
00:37:59,950 --> 00:38:01,690
0,90 90,570 570,900 900,1200 1200,1740
the package, one b is

1224
00:38:01,960 --> 00:38:04,630
0,420 420,990 1320,1710 1710,1980 1980,2670
twenty something| and this my

1225
00:38:04,690 --> 00:38:06,600
0,570 570,660 660,1140 1140,1440
this our software for.

1226
00:38:07,000 --> 00:38:08,740
0,570 570,1170 1170,1260 1260,1410 1410,1740
UDP xv6 is,| so lame

1227
00:38:08,740 --> 00:38:10,300
0,180 180,330 330,660 900,1320 1320,1560
that it, {} doesn't fill

1228
00:38:10,300 --> 00:38:12,070
0,150 150,240 240,660 660,1170 1470,1770
in the checksum field,| but

1229
00:38:12,070 --> 00:38:13,300
0,120 120,180 180,270 270,720
this is the header.|

1230
00:38:13,610 --> 00:38:15,110
0,180 180,420 630,1170 1170,1290 1290,1500
And then after the {UDP

1231
00:38:15,110 --> 00:38:16,520
0,330 330,720 720,840 840,1350 1350,1410
-} {header,is} the payload of

1232
00:38:16,520 --> 00:38:17,810
0,120 120,240 240,540 540,960 1110,1290
the {UDP -} packet| and

1233
00:38:17,810 --> 00:38:19,610
0,90 90,390 390,960 1050,1320 1320,1800
in this case, the application

1234
00:38:19,610 --> 00:38:21,200
0,90 90,390 390,840 840,1410 1440,1590
is sending ascii text and

1235
00:38:21,200 --> 00:38:22,460
0,240 240,600 600,900 900,1020 1020,1260
that ascii text is right

1236
00:38:22,460 --> 00:38:23,460
0,480
here.|

1237
00:38:24,580 --> 00:38:25,740
0,570

1238
00:38:26,890 --> 00:38:27,670
0,180 180,360 360,420 420,480 480,780
So this is a mask

1239
00:38:27,670 --> 00:38:29,560
0,840 900,1170 1170,1470 1470,1590 1590,1890
text place inside {UDP -}

1240
00:38:29,560 --> 00:38:31,150
0,420 420,690 690,1080 1080,1170 1170,1590
packet, place inside an IP

1241
00:38:31,150 --> 00:38:32,590
0,450 450,690 690,960 960,1080 1080,1440
packet place inside an Ethernet

1242
00:38:32,590 --> 00:38:33,700
0,420
packet,|

1243
00:38:35,390 --> 00:38:38,180
0,330 330,810 840,1410 1410,1800
sent over simulated Ethernet.|

1244
00:38:42,260 --> 00:38:43,730
0,540 690,990 990,1110 1110,1350 1350,1470
Sorry, {} I just had

1245
00:38:43,730 --> 00:38:44,840
0,90 90,510 510,690 690,930 930,1110
a question,| so when when

1246
00:38:44,840 --> 00:38:46,400
0,450 480,810 810,960 960,1320 1350,1560
you when you said when

1247
00:38:46,400 --> 00:38:47,330
0,150 150,330 330,390 390,810 810,930
you send a package to

1248
00:38:47,330 --> 00:38:49,040
0,480 510,660 660,1020 1020,1260 1260,1710
someone,| you don't know their

1249
00:38:49,400 --> 00:38:52,460
0,840 1020,1200 1200,1560 1980,2730 2760,3060
Ethernet I like address,| so

1250
00:38:52,460 --> 00:38:53,330
0,60 60,180 180,540 540,750 750,870
do you just send it

1251
00:38:53,330 --> 00:38:55,610
0,120 120,420 420,1170 1290,2160 2160,2280
to your router,| then the

1252
00:38:55,610 --> 00:38:58,790
0,570 690,1170 1170,1380 1380,1530 2310,3180
router figures out from.| If

1253
00:38:58,850 --> 00:39:01,040
0,540 540,1110 1110,1470 1470,1920 1920,2190
if for most packets sent

1254
00:39:01,040 --> 00:39:02,400
0,300 300,1050
somewhere else

1255
00:39:02,520 --> 00:39:04,410
0,150 150,240 240,900 1290,1680 1680,1890
on the Internet,| {} let's

1256
00:39:04,410 --> 00:39:05,220
0,210
see,

1257
00:39:07,070 --> 00:39:08,330
0,300 300,780 780,870 870,1020 1020,1260
your host if you send

1258
00:39:08,330 --> 00:39:09,470
0,60 60,570 570,690 690,780 780,1140
a packet to a particular

1259
00:39:09,470 --> 00:39:11,510
0,270 270,870 960,1380 1380,1680 1680,2040
IP address,| your host software

1260
00:39:11,510 --> 00:39:12,710
0,150 150,480 480,540 540,630 630,1200
will look at the destination

1261
00:39:12,710 --> 00:39:14,360
0,570 600,750 750,1050 1050,1290 1320,1650
address| to figure out if

1262
00:39:14,360 --> 00:39:16,130
0,120 120,570 570,1170 1320,1620 1620,1770
the target host is on

1263
00:39:16,130 --> 00:39:17,750
0,90 90,750 750,1080 1080,1320 1320,1620
the same local area network

1264
00:39:17,750 --> 00:39:18,830
0,120 120,300 300,660 780,990 990,1080
as you are,| and if

1265
00:39:18,830 --> 00:39:20,560
0,120 120,630 780,1230
it is, it'll

1266
00:39:20,560 --> 00:39:22,300
0,360 360,900 1080,1230 1230,1650 1650,1740
use ARP to translate the

1267
00:39:22,300 --> 00:39:23,620
0,300 300,690 690,870 870,990 990,1320
IP address into an Ethernet

1268
00:39:23,620 --> 00:39:24,610
0,390 390,480 480,660 660,900 900,990
address,| and then send the

1269
00:39:24,610 --> 00:39:26,230
0,390 750,990 990,1080 1080,1530 1530,1620
packet over the Ethernet to

1270
00:39:26,230 --> 00:39:27,740
0,90 90,420 420,990
the target host.|

1271
00:39:28,080 --> 00:39:29,280
0,150 150,270 270,420 420,960 960,1200
So that's what happens in

1272
00:39:29,280 --> 00:39:30,300
0,60 60,450 450,750 750,810 810,1020
the special case in which

1273
00:39:30,300 --> 00:39:31,560
0,180 210,600 600,870 870,1080 1080,1260
the target host is on

1274
00:39:31,560 --> 00:39:32,880
0,60 60,240 240,720 990,1260 1260,1320
the same network,| in the

1275
00:39:32,880 --> 00:39:33,930
0,120 120,390 390,630 630,780 780,1050
more general case, we're sending

1276
00:39:33,930 --> 00:39:35,010
0,120 120,480 480,570 570,870 870,1080
the packet to somewhere else

1277
00:39:35,010 --> 00:39:36,570
0,60 60,150 150,600 840,1470 1470,1560
on the Internet across the

1278
00:39:36,570 --> 00:39:39,660
0,480 1410,1860 1860,2430 2430,2520 2520,3090
country,| you'll send the packet

1279
00:39:39,660 --> 00:39:42,240
0,690 1500,2010 2010,2400 2400,2490 2490,2580
to a router on the

1280
00:39:42,240 --> 00:39:43,680
0,210 210,480 480,750 750,1260 1260,1440
same local area network,| that

1281
00:39:43,680 --> 00:39:44,520
0,360 360,480 480,660 660,750 750,840
router will look at the

1282
00:39:44,520 --> 00:39:46,380
0,630 630,1410
destination IP

1283
00:39:46,700 --> 00:39:48,530
0,990 1140,1260 1260,1410 1410,1500 1500,1830
address| to pick the next

1284
00:39:48,530 --> 00:39:50,930
0,660 690,780 780,1230 1560,2130 2130,2400
router to decide which router

1285
00:39:50,930 --> 00:39:52,130
0,150 150,600 600,780 780,990 990,1200
it's attached to it| for

1286
00:39:52,130 --> 00:39:53,270
0,90 90,390 390,570 570,720 720,1140
the packet to and packet

1287
00:39:53,540 --> 00:39:54,620
0,330 330,540 540,660 660,930 930,1080
go hop by hop through

1288
00:39:54,620 --> 00:39:56,660
0,750 1020,1320 1320,1620 1620,1710 1710,2040
routers getting closer and closer

1289
00:39:56,660 --> 00:39:57,740
0,60 60,150 150,540
to the target.|

1290
00:39:58,150 --> 00:39:59,660
0,120 120,360 360,450 450,930
{Does,that} answer your question?|

1291
00:39:59,720 --> 00:40:01,010
0,300 300,450 450,600 600,1020 1020,1290
OK, I see, yes, thank

1292
00:40:01,010 --> 00:40:02,450
0,90 90,240 240,660 720,1260 1260,1440
you so much.| Someone asked

1293
00:40:02,450 --> 00:40:03,110
0,90 90,210 210,300 300,570 570,660
if there's a limit to

1294
00:40:03,110 --> 00:40:03,980
0,90 90,330 330,420 420,480 480,870
the length of the packet,|

1295
00:40:04,160 --> 00:40:05,150
0,240 240,330 330,570 570,660 660,990
and the answer is yes,

1296
00:40:05,150 --> 00:40:06,260
0,120 120,240 390,660 660,780 780,1110
there's a couple of different

1297
00:40:06,260 --> 00:40:09,320
0,570 1290,1680 1680,2130 2160,2580 2580,3060
limits,| every network every underlying

1298
00:40:09,320 --> 00:40:11,450
0,300 300,960 960,1230 1230,1740 1740,2130
network technology like Ethernet, but

1299
00:40:11,450 --> 00:40:12,710
0,120 120,300 300,780 840,1140 1140,1260
there are other things that

1300
00:40:12,710 --> 00:40:14,660
0,60 60,330 330,780 1410,1800 1800,1950
are like Ethernet has its

1301
00:40:14,660 --> 00:40:17,780
0,750 960,1860 1860,2280 2280,2790 2790,3120
own maximum packet length,| so,

1302
00:40:18,110 --> 00:40:19,580
0,270 270,780 780,1050 1050,1320 1320,1470
{} when today's paper was

1303
00:40:19,580 --> 00:40:20,750
0,180 180,240 240,600 600,900 900,1170
written the maximum packet length

1304
00:40:20,750 --> 00:40:22,220
0,390 510,780 780,1020 1020,1170 1170,1470
was on Ethernet was fifteen

1305
00:40:22,220 --> 00:40:24,590
0,300 300,870 1320,1590 1590,1800 1800,2370
hundred bytes,| I think modern

1306
00:40:24,620 --> 00:40:26,510
0,240 240,780 810,1290 1290,1710 1710,1890
{Ethernets -} allow packets up

1307
00:40:26,510 --> 00:40:29,450
0,150 150,600 600,1590 1590,1830 1830,2940
to around {9000,or} {10,000,bytes -},|

1308
00:40:30,320 --> 00:40:32,000
0,240 240,420 420,690 690,870 870,1680
but that's about the highest

1309
00:40:32,000 --> 00:40:33,350
0,390 390,690 690,960 960,1110 1110,1350
maximum packet size, I've heard

1310
00:40:33,350 --> 00:40:35,150
0,210 210,420 420,540 540,1170 1470,1800
of.| And the reason, {}

1311
00:40:35,150 --> 00:40:36,260
0,180 180,240 240,510 510,840 840,1110
there's a couple reasons why

1312
00:40:36,260 --> 00:40:38,060
0,390 570,900 900,1170 1320,1590 1590,1800
you wouldn't want sort of

1313
00:40:38,240 --> 00:40:40,730
0,660 660,1110 1110,1470 1470,2070 2100,2490
infinitely long single packets,| one

1314
00:40:40,730 --> 00:40:42,140
0,90 90,210 210,330 330,540 900,1410
of them is that the

1315
00:40:42,290 --> 00:40:44,450
0,750 750,930 1140,1410 1410,2010 2010,2160
packets are you sending these

1316
00:40:44,450 --> 00:40:45,860
0,360 360,600 600,1140 1140,1260 1260,1410
packets over wires,| that could

1317
00:40:45,860 --> 00:40:47,510
0,90 90,420 420,840 840,990 990,1650
be quite long and subject

1318
00:40:47,510 --> 00:40:50,600
0,210 210,570 570,690 690,1590 2670,3090
to noise and interference| and

1319
00:40:50,600 --> 00:40:51,530
0,90 90,210 210,330 330,510 510,930
so you do get corruption

1320
00:40:51,530 --> 00:40:52,850
0,120 120,660 660,930 930,1050 1050,1320
of bits when you're sending

1321
00:40:52,850 --> 00:40:54,620
0,780 960,1350
packets {}.|

1322
00:40:54,710 --> 00:40:56,660
0,510 510,1050 1050,1380 1380,1860 1860,1950
Basically, every network technology is

1323
00:40:56,660 --> 00:40:58,070
0,120 120,270 270,480 690,1290 1290,1410
some kind of checksum or

1324
00:40:58,070 --> 00:40:59,150
0,150 150,510 510,810 810,900 900,1080
error correcting code that goes

1325
00:40:59,150 --> 00:41:00,890
0,390 390,510 510,690 690,1140 1170,1740
along with every packet,| but

1326
00:41:01,010 --> 00:41:02,120
0,390 390,660 660,870 870,960 960,1110
{} {checksums -} and error

1327
00:41:02,120 --> 00:41:03,560
0,330 330,600 600,690 690,930 930,1440
correcting codes are only capable

1328
00:41:03,560 --> 00:41:06,230
0,90 90,630 630,1170 1170,1800 1890,2670
of reliably detecting errors {}

1329
00:41:06,320 --> 00:41:07,550
0,390 390,480 480,840 840,1140 1140,1230
over a certain number of

1330
00:41:07,550 --> 00:41:09,200
0,390 390,900 1080,1410 1410,1530 1530,1650
bits,| which and so as

1331
00:41:09,200 --> 00:41:09,860
0,90 90,330 330,390 390,600 600,660
you increase the number of

1332
00:41:09,860 --> 00:41:11,510
0,360 360,600 630,1440 1440,1530 1530,1650
bits, the probability of an

1333
00:41:11,540 --> 00:41:13,550
0,690 810,1350 1380,1710 1710,1890 1890,2010
uncommon error goes up and

1334
00:41:13,550 --> 00:41:15,440
0,330 690,1050 1050,1170 1170,1350 1350,1890
up| and so that limits

1335
00:41:15,440 --> 00:41:17,150
0,270 300,570 570,960 960,1260 1260,1710
the for reasonable size checksum

1336
00:41:17,150 --> 00:41:18,890
0,330 420,1020 1020,1050 1050,1440 1440,1740
like 16 or 32 bits

1337
00:41:18,890 --> 00:41:20,540
0,180 180,480 480,570 570,1200
that limits the maximum

1338
00:41:20,540 --> 00:41:22,180
0,450 450,540 540,600 600,1050
size of a packet.|

1339
00:41:22,980 --> 00:41:24,180
0,210 210,270 270,450 450,930 930,1200
And the other limitation is

1340
00:41:24,180 --> 00:41:26,520
0,270 1200,1620 1620,1800 1800,2010 2010,2340
that if you send huge

1341
00:41:26,520 --> 00:41:28,460
0,600 600,780 780,1050 1050,1350
packets,| that means that

1342
00:41:28,610 --> 00:41:29,780
0,210 210,360 360,780 780,870 870,1170
all the routers in host

1343
00:41:29,780 --> 00:41:31,730
0,270 270,420 420,660 960,1260 1260,1950
fall have to have huge

1344
00:41:31,760 --> 00:41:33,650
0,360 360,1020 1020,1110 1110,1260 1260,1890
packet buffers to be prepared

1345
00:41:33,650 --> 00:41:36,380
0,90 90,450 450,690 690,1320 1890,2730
to receive huge packets| and

1346
00:41:36,890 --> 00:41:38,960
0,510 510,810 810,900 900,1080 1470,2070
that starts to get an

1347
00:41:38,960 --> 00:41:42,120
0,360 360,1260 1290,1830
really expensive,| because

1348
00:41:42,180 --> 00:41:43,560
0,450 450,810 810,870 870,990 990,1380
it's difficult to have variable

1349
00:41:43,560 --> 00:41:44,970
0,270 270,720 720,810 810,1020 1020,1410
length buffers is most convenient

1350
00:41:44,970 --> 00:41:46,080
0,60 60,240 240,660 690,810 810,1110
to have just a single

1351
00:41:46,080 --> 00:41:48,660
0,210 210,300 300,750 2220,2400 2400,2580
length of buffer| and that

1352
00:41:48,660 --> 00:41:49,770
0,240 240,570 570,660 660,750 750,1110
works best if the maximum

1353
00:41:49,770 --> 00:41:51,180
0,300 300,510 510,840
packet length isn't.

1354
00:41:51,180 --> 00:41:52,540
0,150 150,840
to enormous.|

1355
00:41:52,860 --> 00:41:53,880
0,330 330,540 540,660 660,750 750,1020
Anyway, so for you think

1356
00:41:53,880 --> 00:41:55,820
0,390 900,1290
for {},|

1357
00:41:55,820 --> 00:41:57,530
0,150 150,570 570,1050 1080,1380 1380,1710
so Ethernet has fifteen hundred,

1358
00:41:57,530 --> 00:41:59,500
0,360 810,1260
{ -}

1359
00:42:00,050 --> 00:42:02,420
0,780 780,1140 1260,1500 1500,2130 2160,2370
{9000,bytes} limit,| in addition you

1360
00:42:02,420 --> 00:42:03,170
0,90 90,210 210,270 270,450 450,750
know for all these IP

1361
00:42:03,170 --> 00:42:04,760
0,510 510,690 690,1020 1020,1350 1350,1590
protocols have length fields which

1362
00:42:04,760 --> 00:42:07,160
0,540 750,1260 1260,1590 1590,1950 2100,2400
are sixteen bits,| so even

1363
00:42:07,160 --> 00:42:07,850
0,90 90,180 180,270 270,630 630,690
if you are willing to

1364
00:42:07,850 --> 00:42:09,200
0,240 240,630 630,750 750,1050 1050,1350
have Ethernet have larger packet

1365
00:42:09,200 --> 00:42:10,460
0,240 240,600 600,1020 1020,1200 1200,1260
size IP itself has a

1366
00:42:10,460 --> 00:42:12,220
0,150 150,300 300,720 720,1200
kind of baked in

1367
00:42:12,220 --> 00:42:14,680
0,480 480,780 780,1110 1110,1290 1860,2460
maximum packet size is 64

1368
00:42:14,680 --> 00:42:15,960
0,750
kilobytes.|

1369
00:42:19,250 --> 00:42:22,720
0,570 840,1500
Okay {}.|

1370
00:42:25,310 --> 00:42:27,050
0,450 690,1200 1260,1470 1470,1620 1620,1740
okay, good so much for

1371
00:42:27,050 --> 00:42:28,180
0,120 120,570
{UDP -}.|

1372
00:42:28,410 --> 00:42:29,790
0,420 690,870 870,1140 1140,1260 1260,1380
{} And hopefully when you

1373
00:42:29,790 --> 00:42:31,110
0,210 210,330 330,600 600,720 720,1320
finish the lab, you'll see

1374
00:42:31,380 --> 00:42:33,180
0,510 510,750 750,1020 1020,1230 1230,1800
output very much like this.|

1375
00:42:33,700 --> 00:42:34,660
0,480

1376
00:42:34,750 --> 00:42:36,070
0,180 180,690 690,810 810,1140 1140,1320
In particular, the message from

1377
00:42:36,070 --> 00:42:38,620
0,330 330,840 1080,1800 1920,2040 2040,2550
{xv6 -} and a message

1378
00:42:38,800 --> 00:42:40,300
0,150 150,750 780,1050 1050,1230 1230,1500
or reply back from the

1379
00:42:40,570 --> 00:42:41,950
0,570 570,660 660,750 750,1110 1140,1380
host that you're running running

1380
00:42:41,950 --> 00:42:43,400
0,210 210,570
{QEMU -}.

1381
00:42:44,800 --> 00:42:45,700
0,150 150,480 480,750 750,810 810,900
In fact, actually at the

1382
00:42:45,700 --> 00:42:46,960
0,120 120,180 180,270 270,780 810,1260
end of the lab you'll

1383
00:42:46,960 --> 00:42:48,820
0,870 900,1260
use {},

1384
00:42:48,850 --> 00:42:50,140
0,210 210,600 600,780 780,1110 1110,1290
yeah you'll run software which

1385
00:42:50,140 --> 00:42:51,340
0,90 90,480 480,630 630,810 870,1200
we provide which will actually

1386
00:42:51,340 --> 00:42:53,020
0,300 300,450 480,1110 1110,1560 1560,1680
send a DNS query to

1387
00:42:53,020 --> 00:42:55,690
0,390 390,750 750,1530 2160,2520 2520,2670
Google's DNS servers and get

1388
00:42:55,690 --> 00:42:57,340
0,90 90,510 510,900 1020,1200 1200,1650
the response back our software,|

1389
00:42:57,520 --> 00:42:59,980
0,270 270,810 810,990 1410,1950 1950,2460
print response, but your software

1390
00:42:59,980 --> 00:43:00,960
0,150 150,480
will live

1391
00:43:00,960 --> 00:43:02,340
0,360 360,480 480,690 690,840 870,1380
done the sort of Ethernet

1392
00:43:02,340 --> 00:43:05,260
0,510 900,1230 1230,1530 1530,2340
level device driver interactions.|

1393
00:43:07,750 --> 00:43:09,700
0,420 480,960 990,1170 1170,1590 1620,1950
Alright, um, so that's a

1394
00:43:09,700 --> 00:43:11,470
0,300 300,390 390,750 750,1410 1440,1770
story for packet headers and

1395
00:43:11,530 --> 00:43:13,660
0,480 480,540 540,600 600,1110 1770,2130
protocols on the wire through

1396
00:43:13,660 --> 00:43:16,270
0,1170 1170,1290 1290,1530 1530,1890 1890,2610
corresponding to these packet formats

1397
00:43:16,510 --> 00:43:19,360
0,540 930,2340 2370,2580 2580,2730 2730,2850
{is's -} let's call the

1398
00:43:19,360 --> 00:43:21,850
0,600 600,960 1080,1560 1590,2130 2130,2490
stack of a network software

1399
00:43:21,850 --> 00:43:22,930
0,150 150,390 390,450 450,540 540,1080
that runs on the host,

1400
00:43:22,960 --> 00:43:24,600
0,270 720,1230
so um.

1401
00:43:24,710 --> 00:43:25,610
0,180 180,270 270,420 420,690 690,900
If you think about what's

1402
00:43:25,610 --> 00:43:28,580
0,330 330,660 660,750 750,1410 2460,2970
sitting inside the host and

1403
00:43:29,060 --> 00:43:30,350
0,690 690,870 870,1050 1050,1170 1170,1290
now from now on, I'm

1404
00:43:30,350 --> 00:43:31,790
0,570 570,720 720,1050 1050,1260 1260,1440
talking I mostly talk about

1405
00:43:31,790 --> 00:43:33,620
0,150 150,300 300,960 960,1410 1410,1830
sort of typical software arrangements

1406
00:43:33,620 --> 00:43:34,580
0,150 150,300 300,540 540,690 690,960
there's all kinds of different

1407
00:43:34,580 --> 00:43:36,470
0,240 240,540 540,1020 1020,1320 1320,1890
ways, people structured network software,

1408
00:43:36,800 --> 00:43:39,320
0,630 1140,1620 1620,2070
um and um.

1409
00:43:39,320 --> 00:43:40,850
0,210 210,720 720,1080 1080,1410 1410,1530
It's somewhat quite different from

1410
00:43:40,850 --> 00:43:41,780
0,150 150,210 210,360 360,600 600,930
what I'm gonna talk about

1411
00:43:41,900 --> 00:43:42,710
0,180 180,330 330,390 390,570 570,810
I'm going to talk about

1412
00:43:42,710 --> 00:43:45,710
0,180 180,510 2160,2580 2580,2790 2790,3000
kind of what I think

1413
00:43:45,710 --> 00:43:46,730
0,210 210,300 300,510 510,720 720,1020
is at least as a

1414
00:43:46,730 --> 00:43:48,200
0,180 180,240 240,630 630,1200 1200,1470
sort of standard approach, so

1415
00:43:48,320 --> 00:43:49,730
0,360 360,600 600,690 690,900 900,1410
let's assume we're running Linux,

1416
00:43:49,730 --> 00:43:50,900
0,120 120,360 360,510 510,660 660,1170
or maybe ex v six

1417
00:43:51,110 --> 00:43:52,250
0,480 630,930 930,990 990,1080 1080,1140
a now we have a

1418
00:43:52,250 --> 00:43:53,960
0,180 180,240 240,1110 1110,1410 1410,1710
bunch of applications, maybe a

1419
00:43:53,990 --> 00:43:55,860
0,450 450,1380
web browser.

1420
00:43:56,070 --> 00:43:58,170
0,810 1230,1410 1410,1650 1650,1830 1830,2100
Um, um, it may be

1421
00:43:58,170 --> 00:44:01,000
0,630 810,1290 1290,2280
a dns server.

1422
00:44:01,940 --> 00:44:02,900
0,330 330,480 480,720 720,900 900,960
Who knows what bunch of

1423
00:44:02,900 --> 00:44:05,660
0,900 1170,1890 2040,2340 2340,2520 2520,2760
applications, mom, they all use

1424
00:44:05,660 --> 00:44:07,430
0,90 90,690 690,1440 1440,1560 1560,1770
the sockets API to open

1425
00:44:07,430 --> 00:44:09,290
0,150 150,510 510,1230 1230,1470 1470,1860
up file descriptors in the

1426
00:44:09,350 --> 00:44:11,120
0,720 720,1200 1230,1440 1440,1650 1650,1770
sockets layer, so there's going

1427
00:44:11,120 --> 00:44:12,320
0,60 60,180 180,720
to be this.

1428
00:44:12,320 --> 00:44:14,160
0,540 540,630 630,1170
Inside the kernel.

1429
00:44:15,260 --> 00:44:16,420
0,600
I'm.

1430
00:44:16,700 --> 00:44:17,720
0,240 240,450 450,510 510,840 840,1020
A layer of software called

1431
00:44:17,720 --> 00:44:20,150
0,90 90,540 540,930 1080,1650 1950,2430
the sockets layer that, um

1432
00:44:20,180 --> 00:44:21,980
0,540 540,690 690,1170 1170,1320 1320,1800
remember has tables that remembers

1433
00:44:21,980 --> 00:44:24,230
0,60 60,810 810,1050 1050,1380 1380,2250
the correspondence between file descriptors

1434
00:44:24,260 --> 00:44:25,430
0,330 330,420 420,900 900,1080 1080,1170
which the applications read or

1435
00:44:25,430 --> 00:44:28,250
0,360 360,780 1560,2130 2130,2490 2490,2820
write and you dp port

1436
00:44:28,250 --> 00:44:30,080
0,360 360,450 450,1020 1020,1290 1290,1830
numbers or tcp port numbers

1437
00:44:30,080 --> 00:44:32,000
0,240 240,690 930,1170 1170,1440 1440,1920
which is for the um.

1438
00:44:33,160 --> 00:44:34,390
0,150 150,300 300,450 450,1050 1050,1230
The sort of endpoints of

1439
00:44:34,450 --> 00:44:36,340
0,810 810,900 900,1080 1080,1350 1350,1890
conversations that these file descriptors

1440
00:44:36,340 --> 00:44:37,420
0,300 300,480 510,690 690,780 780,1080
refer to so the socket

1441
00:44:37,420 --> 00:44:39,520
0,240 240,390 390,690 1590,2040 2040,2100
layer has these tables of

1442
00:44:39,520 --> 00:44:41,110
0,180 180,660 660,750 750,1020 1020,1590
file descriptors on port numbers

1443
00:44:41,110 --> 00:44:42,490
0,150 150,390 390,720 720,1170 1170,1380
and it also typically has

1444
00:44:42,490 --> 00:44:44,240
0,150 180,1140
a queue.

1445
00:44:44,390 --> 00:44:45,830
0,390 420,780 780,1230 1230,1320 1320,1440
I'm of packets that have

1446
00:44:45,830 --> 00:44:47,690
0,660 660,750 750,870 870,1500 1650,1860
arrived and are waiting to

1447
00:44:47,690 --> 00:44:49,520
0,150 150,600 600,840 840,1170 1170,1830
be read by each socket

1448
00:44:49,550 --> 00:44:51,000
0,150 150,450 450,1080
or file descriptor.

1449
00:44:54,580 --> 00:44:55,720
0,180 180,390 390,720 720,810 810,1140
And the software we provide

1450
00:44:55,720 --> 00:44:57,610
0,300 390,660 660,720 720,1080 1350,1890
you as a very primitive

1451
00:44:57,610 --> 00:44:59,940
0,450 450,990 1230,1740
sockets layer a.

1452
00:45:00,200 --> 00:45:02,210
0,570 570,1050 1080,1440 1440,1620 1620,2010
Underneath that are gonna be

1453
00:45:02,600 --> 00:45:03,940
0,690
a.

1454
00:45:04,370 --> 00:45:06,080
0,240 240,390 390,570 570,1110 1110,1710
The U D P N.

1455
00:45:07,120 --> 00:45:09,020
0,510 510,1350
Tcp protocol.

1456
00:45:09,020 --> 00:45:10,460
0,900
Layers.

1457
00:45:12,210 --> 00:45:14,940
0,480 1170,1620 1620,2040 2040,2460 2460,2730
I'm GDP has almost nothing

1458
00:45:14,940 --> 00:45:16,230
0,270 270,480 480,540 540,1050 1080,1290
going on, it basically looks

1459
00:45:16,230 --> 00:45:17,790
0,90 90,420 420,930 930,1470 1470,1560
at incoming packets extracts the

1460
00:45:17,790 --> 00:45:19,260
0,510 510,750 750,1020 1020,1110 1110,1470
destination port number and hands,

1461
00:45:19,260 --> 00:45:19,980
0,60 60,390 390,540 540,630 630,720
the packet off to the

1462
00:45:19,980 --> 00:45:21,570
0,360 360,660 660,960 1230,1410 1410,1590
socket layer two so that

1463
00:45:21,570 --> 00:45:22,980
0,450 450,570 570,1020 1020,1170 1170,1410
payload is enqueued on the

1464
00:45:23,190 --> 00:45:25,740
0,810 810,1170 1170,1770 1770,2190 2190,2550
correct file descriptors, incoming queue

1465
00:45:27,060 --> 00:45:28,560
0,660 660,930 930,1050 1050,1290 1290,1500
tcp actually is much more

1466
00:45:28,560 --> 00:45:30,300
0,630 630,780 810,1230 1230,1590 1590,1740
complex, it keeps state for

1467
00:45:30,300 --> 00:45:31,860
0,240 240,750 750,1320 1320,1410 1410,1560
each tcp connection, and it

1468
00:45:31,920 --> 00:45:33,480
0,690 690,840 840,1050 1050,1110 1110,1560
remembers all kinds of sequence

1469
00:45:33,480 --> 00:45:35,160
0,420 420,510 510,960 960,1230 1290,1680
numbers and packets that haven't

1470
00:45:35,160 --> 00:45:36,360
0,120 120,780 780,870 870,1110 1110,1200
been acknowledged and need to

1471
00:45:36,360 --> 00:45:38,130
0,150 150,990 1230,1380 1380,1470 1470,1770
be retransmitted to the huge

1472
00:45:38,130 --> 00:45:39,150
0,210 210,270 270,660 660,780 780,1020
amount of state and what's

1473
00:45:39,150 --> 00:45:40,000
0,240 240,480
called a.

1474
00:45:40,000 --> 00:45:42,610
0,630 990,1440 1440,1740 1740,1860 1860,2610
Protocol control block and tcp

1475
00:45:43,060 --> 00:45:44,860
0,510 510,930 930,1140 1140,1560 1560,1800
and virtually no state in

1476
00:45:44,860 --> 00:45:46,800
0,270 690,990 990,1410
the APP layer.

1477
00:45:46,800 --> 00:45:48,120
0,330 330,420 420,540 540,750 750,1320
These are often called transport

1478
00:45:48,120 --> 00:45:49,650
0,450 450,540 540,810 810,930 930,1530
layers, you dp and tcp

1479
00:45:51,030 --> 00:45:52,110
0,270 270,420 420,780 780,930 930,1080
and we provide you with

1480
00:45:52,110 --> 00:45:53,580
0,210 210,570 570,900 900,1170 1170,1470
a simple dp layer, but

1481
00:45:53,670 --> 00:45:56,220
0,600 630,720 720,1200 1200,1680 1800,2550
not a tcp layer I'm

1482
00:45:56,760 --> 00:45:58,650
0,510 510,1020 1020,1110 1110,1710 1710,1890
underneath tcp and IP is

1483
00:45:58,650 --> 00:45:59,460
0,330
a.

1484
00:45:59,970 --> 00:46:01,460
0,840
I'm.

1485
00:46:01,970 --> 00:46:03,500
0,540 540,1080
IP layer.

1486
00:46:04,520 --> 00:46:06,800
0,540 990,1260 1260,1650
Um, which is.

1487
00:46:07,160 --> 00:46:09,560
0,450 450,810 960,1380 1380,1950 2070,2400
A often fairly simple, um

1488
00:46:09,560 --> 00:46:10,640
0,150 150,390 390,450 450,570 570,1080
and kind of in parallel

1489
00:46:10,640 --> 00:46:11,630
0,90 90,210 210,570 570,930 930,990
with the IP layer, I'm

1490
00:46:11,630 --> 00:46:12,500
0,180 180,330 330,540 540,540 540,870
not sure whether I should

1491
00:46:12,500 --> 00:46:13,640
0,240 240,330 330,420 420,750 750,1140
draw on the same level

1492
00:46:13,640 --> 00:46:15,700
0,420 420,660 840,1500
underneath it, um.

1493
00:46:15,820 --> 00:46:17,580
0,180 180,300 300,510 510,1290
Is the art player.

1494
00:46:17,940 --> 00:46:19,710
0,360 360,510 510,1260 1320,1620 1620,1770
Under them both a we

1495
00:46:19,710 --> 00:46:20,310
0,120 120,330 330,420 420,540 540,600
can think of as an

1496
00:46:20,340 --> 00:46:21,930
0,330 330,750 750,870 870,1140 1140,1590
ether layer but it's really

1497
00:46:21,930 --> 00:46:23,610
0,180 180,510 600,1140 1140,1290 1290,1680
there's not typically a separate

1498
00:46:23,610 --> 00:46:25,980
0,360 360,750 780,1260 1260,1500 1950,2370
ethernet layer typically there's one

1499
00:46:25,980 --> 00:46:27,880
0,90 90,300 300,510 510,1410
or more NIC drivers.

1500
00:46:28,740 --> 00:46:30,040
0,690
I'm.

1501
00:46:30,330 --> 00:46:31,920
0,210 210,330 330,690 690,1110 1110,1590
At the lowest layer and

1502
00:46:31,950 --> 00:46:33,930
0,420 420,870 870,1530 1590,1830 1830,1980
these talk to um the

1503
00:46:33,930 --> 00:46:35,240
0,720
actual.

1504
00:46:35,400 --> 00:46:37,770
0,330 330,900 1020,1350 1350,1680 1680,2370
I'm NIC network interface hardware

1505
00:46:37,800 --> 00:46:39,600
0,390 390,780 780,960 960,1050 1050,1800
which itself has a connection

1506
00:46:39,690 --> 00:46:42,060
0,720 720,870 870,1290 1710,2160 2160,2370
off to the local area

1507
00:46:42,060 --> 00:46:43,340
0,540 540,780
network, or.

1508
00:46:44,480 --> 00:46:45,620
0,180 180,510 510,690 690,750 750,1140
A whatever kind of network

1509
00:46:45,740 --> 00:46:47,160
0,870
attached.

1510
00:46:47,710 --> 00:46:49,180
0,330 600,1020 1110,1350 1350,1410 1410,1470
Um and sort of at

1511
00:46:49,180 --> 00:46:50,350
0,240 240,540 540,720 720,1050 1050,1170
this level, what happens is

1512
00:46:50,350 --> 00:46:52,240
0,90 90,420 420,1530 1560,1800 1800,1890
the packet arrives off the

1513
00:46:52,240 --> 00:46:54,640
0,750 750,1080 1080,1680 1920,2190 2190,2400
network, the Nick you know

1514
00:46:54,790 --> 00:46:55,900
0,240 240,330 330,450 450,540 540,1110
pulls it off the network

1515
00:46:56,890 --> 00:46:57,940
0,630 630,720 720,870 870,960 960,1050
hands it off to the

1516
00:46:57,940 --> 00:46:59,770
0,540 540,660 660,720 720,1230 1260,1830
driver and the driver essentially

1517
00:46:59,770 --> 00:47:01,540
0,480 480,570 570,1080 1230,1470 1470,1770
pushes the network to pack

1518
00:47:01,540 --> 00:47:03,160
0,120 150,360 360,480 480,960 960,1620
it up, the networking stack

1519
00:47:03,310 --> 00:47:04,780
0,540 630,1050 1050,1200 1200,1410 1410,1470
'em at each layer in

1520
00:47:04,780 --> 00:47:05,950
0,60 60,450 450,720 720,810 810,1170
the stack the you know

1521
00:47:06,250 --> 00:47:08,140
0,270 270,540 540,630 630,1290
that {layer's -} header.

1522
00:47:08,140 --> 00:47:09,220
0,120 120,330 330,450 450,810 810,1080
You know the IP layer

1523
00:47:09,220 --> 00:47:10,570
0,150 150,360 360,450 450,720 720,1350
will look the IP header.

1524
00:47:11,200 --> 00:47:13,000
0,720 720,810 810,1260 1260,1560 1560,1800
Verify the headers stripped off

1525
00:47:13,000 --> 00:47:15,460
0,210 210,1050 1290,1920 1920,2070 2070,2460
handed GDP GDP will figure

1526
00:47:15,460 --> 00:47:17,980
0,330 540,720 720,930 930,1530 1950,2520
out what file descriptor queue

1527
00:47:17,980 --> 00:47:19,000
0,60 60,270 270,570 570,810 810,1020
the date on and add

1528
00:47:19,000 --> 00:47:20,320
0,90 90,150 150,330 330,720 960,1320
it to that queue now

1529
00:47:20,320 --> 00:47:21,190
0,120 120,420 420,630 630,780 780,870
so packets come in and

1530
00:47:21,190 --> 00:47:22,630
0,120 120,780 780,1050 1050,1380 1380,1440
are parsed and headers are

1531
00:47:22,630 --> 00:47:23,560
0,300 300,360 360,450 450,600 600,930
stripped on the way up,

1532
00:47:23,770 --> 00:47:25,420
0,210 210,330 330,420 690,1350 1350,1650
and when an application sends

1533
00:47:25,420 --> 00:47:26,830
0,60 60,510 600,810 810,1230 1230,1410
a packet, the reverse thing

1534
00:47:26,830 --> 00:47:28,060
0,420 420,540 540,630 630,990 990,1230
happens as the packet moves

1535
00:47:28,060 --> 00:47:29,860
0,450 450,630 630,750 750,1320 1380,1800
down through the layers more

1536
00:47:29,860 --> 00:47:31,330
0,90 90,270 270,810 840,1170 1170,1470
and more headers are added

1537
00:47:31,330 --> 00:47:32,110
0,270 270,480 480,600 600,720 720,780
on until you get to

1538
00:47:32,110 --> 00:47:33,130
0,90 90,390 390,750 750,840 840,1020
the bottom layer and then

1539
00:47:33,130 --> 00:47:35,080
0,210 450,960 960,1410 1410,1560 1560,1950
the packets handed the neck

1540
00:47:35,110 --> 00:47:36,520
0,390 390,1050
for transmission.

1541
00:47:41,910 --> 00:47:43,600
0,240 240,300 300,750 750,1050
So, of course the.

1542
00:47:43,820 --> 00:47:46,190
0,1140 1350,1770 1770,1890 1890,2130 2130,2370
Software the way people think

1543
00:47:46,190 --> 00:47:47,960
0,240 240,330 330,750 750,1110 1110,1770
about and design network software

1544
00:47:47,960 --> 00:47:49,490
0,90 90,180 300,720 720,900 900,1530
and the colonel is typically

1545
00:47:49,700 --> 00:47:52,040
0,660 660,900 900,1260 1290,2160 2160,2340
driven by the nesting of

1546
00:47:52,040 --> 00:47:53,990
0,210 240,840 840,1170 1170,1230 1230,1950
the protocols inside the packets.

1547
00:47:56,060 --> 00:47:57,560
0,210 210,600 600,780 780,930 930,1500
Any questions about this structure.

1548
00:48:03,420 --> 00:48:04,890
0,150 150,330 330,510 510,1050 1050,1470
It's actually one important thing

1549
00:48:04,890 --> 00:48:05,910
0,120 120,390 420,600 600,690 690,1020
that I kind of left

1550
00:48:05,910 --> 00:48:06,750
0,180 180,330 330,450 450,750 750,840
out here that sits on

1551
00:48:06,750 --> 00:48:09,960
0,90 90,600 750,1410 1590,2070 2070,3210
the side, um, there's buffers.

1552
00:48:10,520 --> 00:48:12,560
0,300 300,540 540,990 990,1770 1770,2040
Um, there's packet buffers all

1553
00:48:12,560 --> 00:48:13,670
0,270 270,540 540,690 690,750 750,1110
through this when a packet

1554
00:48:13,670 --> 00:48:16,100
0,540 540,840 1530,1980 1980,2220 2220,2430
arrives, it's copied into a

1555
00:48:16,190 --> 00:48:18,950
0,360 360,900 1200,2010 2220,2340 2340,2760
packet buffer and the packet

1556
00:48:18,950 --> 00:48:20,270
0,510 510,660 750,1110 1110,1230 1230,1320
buffers are sent up and

1557
00:48:20,270 --> 00:48:21,050
0,180 180,270 270,570 570,660 660,780
down the stack and there's

1558
00:48:21,050 --> 00:48:22,160
0,240 240,510 510,570 570,750 750,1110
often quite a few packet

1559
00:48:22,160 --> 00:48:24,320
0,600 780,1050 1050,1260 1260,1800 1800,2160
buffers, there's often queues between

1560
00:48:24,320 --> 00:48:25,250
0,180 180,480 480,600 600,870 870,930
these layers, there's certainly a

1561
00:48:25,250 --> 00:48:27,260
0,300 300,840 1110,1620 1620,1920 1920,2010
queue here packets waiting to

1562
00:48:27,260 --> 00:48:30,230
0,120 120,840 1110,1620 1620,2520 2760,2970
be processed by applications, now

1563
00:48:30,230 --> 00:48:31,670
0,150 150,240 240,390 390,630 780,1440
this will be a linked

1564
00:48:31,670 --> 00:48:34,100
0,510 720,1050 1050,1890 1980,2280 2280,2430
list of buffers, um, and

1565
00:48:34,100 --> 00:48:35,690
0,90 90,270 270,450 450,780 780,1590
so there's a buffer allocator

1566
00:48:35,690 --> 00:48:38,060
0,540 1290,1710 1740,1980 1980,2280 2280,2370
that's a buffer scheme and

1567
00:48:38,060 --> 00:48:39,680
0,30 30,300 300,780 780,1170 1200,1620
a buffer allocator that's used

1568
00:48:39,680 --> 00:48:41,510
0,390 390,510 510,960 1230,1710 1710,1830
throughout the stack, and in

1569
00:48:41,510 --> 00:48:42,920
0,60 60,390 390,870 900,1110 1110,1410
the software, we give you

1570
00:48:43,130 --> 00:48:45,710
0,480 1260,1770 1770,2160 2160,2280 2280,2580
a buffer scheme is called,

1571
00:48:45,710 --> 00:48:46,760
0,150 150,870
um buffs.

1572
00:48:47,010 --> 00:48:47,790
0,150 150,270 270,420 420,480 480,780
So it's kind of bad.

1573
00:48:48,670 --> 00:48:50,240
0,300 300,1050
Um buff.

1574
00:48:51,510 --> 00:48:53,970
0,540 1020,1470 1470,1920 2070,2370 2370,2460
A scheme, that's not a

1575
00:48:53,970 --> 00:48:55,200
0,450 450,600 600,720 720,1080 1080,1230
layer, but is used all

1576
00:48:55,200 --> 00:48:57,000
0,330 330,510 510,1020
throughout these layers.

1577
00:48:59,400 --> 00:49:00,900
0,450 780,930 930,1020 1020,1140 1140,1500
Okay, this is the layering

1578
00:49:00,900 --> 00:49:03,900
0,780 810,1290 1350,1740 1740,2040 2040,3000
diagram of typical network stack.

1579
00:49:04,490 --> 00:49:07,310
0,390 1140,1380 1380,1620 1620,2280 2670,2820
I'm for this paper, it's

1580
00:49:07,310 --> 00:49:08,540
0,240 240,600 600,660 660,1110 1110,1230
actually important to understand how

1581
00:49:08,540 --> 00:49:09,980
0,90 90,540 540,840 840,1260 1260,1440
the control flow works, which

1582
00:49:09,980 --> 00:49:12,200
0,240 480,1830 1830,1950 1950,2100 2100,2220
is maybe a little bit

1583
00:49:12,200 --> 00:49:13,130
0,360 360,510 510,720 720,780 780,930
different from what's in that

1584
00:49:13,130 --> 00:49:15,220
0,570
diagram.

1585
00:49:16,550 --> 00:49:18,230
0,450 450,630 630,810 810,1170 1170,1680
One thing to know about

1586
00:49:18,230 --> 00:49:20,720
0,450 450,960 960,1380 1380,1920 1920,2490
networks taxes, there's typically multiple

1587
00:49:20,750 --> 00:49:23,570
0,810 810,1680 1710,1920 1920,2370 2370,2820
independent actors that process packets

1588
00:49:23,570 --> 00:49:25,220
0,120 120,330 330,900 1020,1440 1440,1650
and take input, think about

1589
00:49:25,220 --> 00:49:26,900
0,210 210,660 660,810 810,1140 1140,1680
those packets and produce output

1590
00:49:26,990 --> 00:49:29,900
0,540 540,690 690,1050 1050,1800 2430,2910
and for various reasons, these

1591
00:49:29,900 --> 00:49:32,000
0,300 300,810 810,1110 1170,1980 1980,2100
different actors are decoupled so

1592
00:49:32,000 --> 00:49:33,410
0,150 150,300 300,510 510,1230 1230,1410
they can run concurrently and

1593
00:49:33,410 --> 00:49:35,570
0,270 300,810 810,1470 1500,1980 1980,2160
have packet queues connecting them.

1594
00:49:36,180 --> 00:49:38,160
0,390 600,780 780,930 930,1500 1500,1980
Um, so that's extremely important

1595
00:49:38,160 --> 00:49:38,820
0,120 120,210 210,420 420,480 480,660
from the point of view,

1596
00:49:38,820 --> 00:49:40,740
0,180 180,660 780,1320 1410,1830 1830,1920
this paper so within the

1597
00:49:40,740 --> 00:49:41,900
0,600
kernel.

1598
00:49:41,930 --> 00:49:42,950
0,330 330,510 510,630 630,750 750,1020
So again, we have a

1599
00:49:43,520 --> 00:49:45,620
0,300 300,720 720,1320 1650,1950 1950,2100
network interface card, and then

1600
00:49:45,620 --> 00:49:47,040
0,90 90,180 180,240 240,780
we have the kernel.

1601
00:49:48,190 --> 00:49:52,750
0,540 1740,2370 2940,3630 3630,4140 4140,4560
A the classic arrangement here

1602
00:49:52,900 --> 00:49:55,090
0,240 240,630 780,1260 1290,2040 2070,2190
is for a Nick to

1603
00:49:55,090 --> 00:49:57,700
0,360 360,570 570,1410 1440,2040
somehow get packets, um.

1604
00:49:58,090 --> 00:49:58,990
0,300 300,420 420,660 660,810 810,900
For the NIC when it

1605
00:49:58,990 --> 00:50:00,490
0,330 330,390 390,840 870,1110 1110,1500
receives a packet to generate

1606
00:50:00,490 --> 00:50:03,790
0,120 120,780 1590,2010 2190,2850 2850,3300
an interrupt and there's this

1607
00:50:04,120 --> 00:50:05,300
0,780
interrupt.

1608
00:50:05,760 --> 00:50:08,070
0,900 1260,1410 1410,1590 1590,2070 2070,2310
Routine that gets triggered whenever

1609
00:50:08,070 --> 00:50:09,060
0,180 180,240 240,750 750,870 870,990
there's an interrupt and the

1610
00:50:09,060 --> 00:50:10,440
0,330 330,390 390,450 450,870 870,1380
job of the interrupt routine

1611
00:50:10,740 --> 00:50:12,600
0,300 300,630 780,1320 1320,1470 1470,1860
is to get the packet

1612
00:50:12,600 --> 00:50:14,840
0,150 150,240 240,630
from the NIC.

1613
00:50:14,990 --> 00:50:15,860
0,210 210,480 480,600 600,750 750,870
And because we don't want

1614
00:50:15,860 --> 00:50:17,630
0,60 60,540 540,960 960,1410 1410,1770
to dedicate CPU time to

1615
00:50:17,930 --> 00:50:19,100
0,510 510,600 600,1020 1020,1080 1080,1170
completing the processing of the

1616
00:50:19,100 --> 00:50:21,920
0,360 360,870 1740,2100 2100,2520 2520,2820
packet, now the interrupt routine

1617
00:50:21,920 --> 00:50:24,230
0,390 390,780 990,1650 1650,1740 1740,2310
typically just upends the packet.

1618
00:50:24,800 --> 00:50:26,450
0,180 180,270 270,570 570,690 690,1650
To a queue of packets,

1619
00:50:26,600 --> 00:50:29,090
0,780 1110,1440 1440,1770 1770,2370 2370,2490
um for later processing, and

1620
00:50:29,090 --> 00:50:30,560
0,150 150,630 660,1080 1080,1380 1380,1470
then return so does the

1621
00:50:30,560 --> 00:50:33,420
0,360 360,900 1620,2310
minimum work, um.

1622
00:50:33,850 --> 00:50:35,170
0,570 570,690 690,960 960,1050 1050,1320
Required to get the package

1623
00:50:35,170 --> 00:50:35,980
0,150 150,240 240,480 480,660 660,810
from the neck and put

1624
00:50:35,980 --> 00:50:37,060
0,90 90,180 180,270 270,630 720,1080
it in A Q and

1625
00:50:37,060 --> 00:50:37,900
0,150 150,450 450,570 570,690 690,840
the reason why we want

1626
00:50:37,900 --> 00:50:39,490
0,90 90,900 900,1110 1110,1230 1290,1590
to transfer in the sort

1627
00:50:39,490 --> 00:50:40,180
0,150
of.

1628
00:50:40,210 --> 00:50:41,920
0,450 450,720 720,1170 1290,1560 1560,1710
Traditional network stack, we want

1629
00:50:41,920 --> 00:50:43,390
0,120 390,750 750,990 990,1110 1110,1470
to quickly move the packet

1630
00:50:43,390 --> 00:50:44,440
0,150 150,240 240,360 360,780 840,1050
out of the neck and

1631
00:50:44,440 --> 00:50:45,700
0,240 240,390 390,840 840,1140 1140,1260
into this software q is

1632
00:50:45,700 --> 00:50:46,930
0,180 360,750 750,1050 1050,1170 1170,1230
the next typically have a

1633
00:50:46,930 --> 00:50:48,280
0,270 270,660 660,900 900,960 960,1350
very limited amount of memory

1634
00:50:48,280 --> 00:50:50,140
0,120 120,420 420,1020 1050,1770 1770,1860
for queuing packets, whereas in

1635
00:50:50,140 --> 00:50:51,430
0,90 90,360 360,840 840,960 960,1290
the main memory, the Ram

1636
00:50:51,430 --> 00:50:52,360
0,60 60,150 150,600 600,750 750,930
of the computer, we might

1637
00:50:52,360 --> 00:50:53,980
0,120 120,600 600,690 690,1200 1440,1620
have gigabytes of memory, so

1638
00:50:53,980 --> 00:50:55,780
0,270 270,420 420,780 780,1110 1320,1800
far more space here, so

1639
00:50:55,870 --> 00:50:57,400
0,270 270,570 870,1260 1260,1350 1350,1530
the NIC so if there's

1640
00:50:57,400 --> 00:50:58,240
0,60 60,330 330,390 390,750 750,840
a burst of packets and

1641
00:50:58,240 --> 00:50:59,440
0,150 150,270 270,720 870,1110 1110,1200
Nick may actually run out

1642
00:50:59,440 --> 00:51:00,460
0,60 60,420 420,510 510,750 750,1020
of space to queue them,

1643
00:51:00,970 --> 00:51:02,110
0,330 330,510 510,600 600,960 960,1140
um, so we copy them,

1644
00:51:02,110 --> 00:51:03,480
0,180 180,390 390,690 690,930
this q here to.

1645
00:51:03,780 --> 00:51:04,680
0,330 330,390 390,600 600,810 810,900
Avoid the neck running out

1646
00:51:04,680 --> 00:51:06,660
0,60 60,660
of space.

1647
00:51:06,720 --> 00:51:08,460
0,180 180,540 630,1290 1290,1650 1650,1740
And then separately perhaps in

1648
00:51:08,460 --> 00:51:10,980
0,30 30,420 420,960 990,1710 1740,2520
a separate thread, there's um.

1649
00:51:12,550 --> 00:51:13,780
0,120 120,540 540,570 570,750 750,1230
A what I call the

1650
00:51:13,810 --> 00:51:17,720
0,810 810,1470 1470,2190 2580,3270
IP processing thread, um.

1651
00:51:18,700 --> 00:51:19,630
0,270 270,660 660,750 750,900 900,930
And sometimes it's not a

1652
00:51:19,630 --> 00:51:21,010
0,480 480,870 870,990 990,1260 1260,1380
thread, sometimes it's sort of

1653
00:51:21,010 --> 00:51:22,720
0,420 450,810 810,900 900,1380 1410,1710
different kind of entity but

1654
00:51:22,720 --> 00:51:24,220
0,120 120,510 510,900 900,1110 1110,1500
its basic job is to

1655
00:51:24,370 --> 00:51:27,340
0,450 1080,1710 1710,2550 2580,2790 2790,2970
um, read packets off these

1656
00:51:27,340 --> 00:51:28,720
0,360 360,750 750,840 840,1110 1140,1380
incoming cues and there may

1657
00:51:28,720 --> 00:51:30,850
0,120 120,540 540,1290 1500,2010 2010,2130
be multiple nics, um, you

1658
00:51:30,850 --> 00:51:31,900
0,120 120,450 450,810 810,870 870,1050
know pending package to these

1659
00:51:31,900 --> 00:51:33,910
0,570 720,990 990,1380 1380,1650 1650,2010
cues, so IP thread runs

1660
00:51:33,910 --> 00:51:35,710
0,150 300,1110 1110,1230 1230,1680 1680,1800
it looks at packets that

1661
00:51:35,710 --> 00:51:37,630
0,240 390,930 930,1230 1230,1530 1530,1920
are queued here and decides

1662
00:51:37,630 --> 00:51:38,590
0,120 120,210 210,360 360,720 720,960
what to do with them,

1663
00:51:38,650 --> 00:51:40,030
0,390 390,960 960,1050 1050,1170 1170,1380
one possibility is to send

1664
00:51:40,030 --> 00:51:42,370
0,120 120,570 750,1320 1320,1440 1440,2340
them up through you dp.

1665
00:51:43,100 --> 00:51:44,400
0,720
I'm.

1666
00:51:45,580 --> 00:51:46,870
0,270 270,480 480,600 600,1050 1050,1290
Um into the sockets layer

1667
00:51:46,870 --> 00:51:48,400
0,90 90,210 210,870 960,1410 1410,1530
to be queued waiting for

1668
00:51:48,400 --> 00:51:50,440
0,150 150,900 1050,1500 1500,1890 1890,2040
some application and typically this

1669
00:51:50,440 --> 00:51:51,940
0,240 270,600 600,720 720,900 1020,1500
will just be a function

1670
00:51:51,940 --> 00:51:53,830
0,300 300,570 570,870 870,1140 1380,1890
calls here within the context

1671
00:51:53,830 --> 00:51:56,100
0,60 60,240 240,720
of this thread.

1672
00:51:56,880 --> 00:51:58,200
0,300 300,990 990,1110 1110,1230 1230,1320
Another possibility, and this is

1673
00:51:58,200 --> 00:51:59,580
0,180 300,750 750,840 840,1110 1110,1380
the possibility the paper cares

1674
00:51:59,580 --> 00:52:00,780
0,210 210,480 480,600 600,810 900,1200
most about is that this

1675
00:52:00,780 --> 00:52:02,040
0,270 270,360 360,600 600,690 690,1260
host is actually a router

1676
00:52:02,220 --> 00:52:03,750
0,150 150,540 780,1170 1170,1230 1230,1530
and it's packets are coming

1677
00:52:03,750 --> 00:52:05,040
0,90 90,420 420,780 780,930 930,1290
in one neck and routed

1678
00:52:05,040 --> 00:52:06,060
0,300 300,510 510,600 600,780 780,1020
out one or more other

1679
00:52:06,060 --> 00:52:08,000
0,600 720,1470
knicks because.

1680
00:52:08,120 --> 00:52:09,260
0,210 210,480 480,780 780,870 870,1140
It's very common to build

1681
00:52:09,260 --> 00:52:11,870
0,480 480,630 630,750 750,1530 1980,2610
routers out of ordinary operating

1682
00:52:11,870 --> 00:52:13,010
0,360 360,510 510,870 870,1020 1020,1140
systems like Linux, if you

1683
00:52:13,010 --> 00:52:14,420
0,120 120,240 240,690 690,1110 1110,1410
buy a WiFi box now

1684
00:52:14,420 --> 00:52:15,860
0,150 150,210 210,720 720,1050 1050,1440
or a cable modem router

1685
00:52:15,860 --> 00:52:18,080
0,90 90,540 1140,1500 1500,1710 1710,2220
or something, um, it's extremely

1686
00:52:18,080 --> 00:52:19,520
0,300 300,360 360,540 540,960 990,1440
likely to be running Linux

1687
00:52:19,520 --> 00:52:21,020
0,750 810,1050 1050,1140 1140,1410 1410,1500
internally and to use the

1688
00:52:21,020 --> 00:52:22,730
0,450 450,780 780,1200 1200,1410 1410,1710
standard Linux stack, which has

1689
00:52:22,730 --> 00:52:25,250
0,60 60,660 660,990 990,1770 2160,2520
a complete router implementation, um,

1690
00:52:25,250 --> 00:52:26,180
0,90 90,450 450,720 720,810 810,930
it's highly likely to be

1691
00:52:26,180 --> 00:52:27,320
0,300 300,660
using that.

1692
00:52:27,320 --> 00:52:30,050
0,510 510,810 810,1290 2400,2520 2520,2730
Standard Linux stack in order

1693
00:52:30,050 --> 00:52:31,560
0,60 60,240 240,390 390,810
to do its routing.

1694
00:52:31,590 --> 00:52:33,030
0,360 450,720 720,870 870,1200 1200,1440
So if the IP thread

1695
00:52:33,030 --> 00:52:34,200
0,240 240,300 300,360 360,930 930,1170
looks at the destination IP

1696
00:52:34,200 --> 00:52:35,430
0,300 300,390 390,810 810,1050 1050,1230
address and decides I should

1697
00:52:35,430 --> 00:52:37,050
0,300 300,480 480,930 1140,1440 1440,1620
send this out I should

1698
00:52:37,050 --> 00:52:38,400
0,330 330,510 510,900 900,1080 1170,1350
forward this packet out you

1699
00:52:38,400 --> 00:52:40,890
0,390 600,810 810,1320 1380,1770 1770,2490
know out another network interface.

1700
00:52:42,900 --> 00:52:44,280
0,330 330,600 600,690 690,1170 1170,1380
It'll add the packet to

1701
00:52:44,280 --> 00:52:46,230
0,90 90,360 360,630 630,1080 1080,1950
a queue of outgoing packets

1702
00:52:46,350 --> 00:52:48,510
0,210 210,420 420,900 900,1650 1710,2160
for this outgoing interface and

1703
00:52:48,540 --> 00:52:50,130
0,270 270,720 720,1290 1290,1440 1440,1590
there's almost certainly so this

1704
00:52:50,130 --> 00:52:52,000
0,90 90,150 150,660 660,1380
is a receive interrupt.

1705
00:52:52,000 --> 00:52:53,500
0,150 150,420 420,690 690,810 810,1500
Um R X four receive

1706
00:52:53,950 --> 00:52:55,840
0,510 810,1050 1050,1470 1470,1650 1650,1890
a there's usually some sort

1707
00:52:55,840 --> 00:52:57,400
0,90 90,990
of transmit.

1708
00:52:57,580 --> 00:53:00,000
0,360 360,1020 1050,1860
A interrupt scheme.

1709
00:53:02,190 --> 00:53:03,720
0,360 360,480 480,600 600,1020 1020,1530
Um, for the outgoing nec.

1710
00:53:04,770 --> 00:53:06,900
0,450 870,1350 1350,1680 1710,1980 1980,2130
Um that and Nick will

1711
00:53:06,900 --> 00:53:08,760
0,420 420,750 750,900 900,1590 1590,1860
interrupt whenever it's finished sending

1712
00:53:08,760 --> 00:53:09,840
0,210 210,540 540,660 660,780 780,1080
one packet and is ready

1713
00:53:09,840 --> 00:53:11,580
0,90 90,240 240,810 840,1050 1050,1740
to be handed more packets,

1714
00:53:12,810 --> 00:53:14,700
0,210 210,600 600,1170 1350,1590 1590,1890
these outgoing interrupts may also

1715
00:53:14,700 --> 00:53:15,660
0,90 90,510
be important.

1716
00:53:16,390 --> 00:53:19,690
0,390 600,1020 1620,1980 2370,2820 2820,3300
Um, and the point here

1717
00:53:19,720 --> 00:53:20,680
0,210 210,330 330,480 480,570 570,960
is that there's a bunch

1718
00:53:20,680 --> 00:53:23,620
0,150 150,870 870,1770 1800,2580 2610,2940
of concurrent entities, um there's

1719
00:53:23,620 --> 00:53:25,210
0,150 150,210 210,960 960,1500 1500,1590
sort of separately scheduled in

1720
00:53:25,210 --> 00:53:27,190
0,360 360,630 630,1140 1200,1530 1530,1980
various different ways, these interrupts

1721
00:53:27,190 --> 00:53:28,510
0,90 90,510 510,630 630,780 780,1320
are triggered by the next

1722
00:53:28,540 --> 00:53:30,010
0,420 420,540 540,960 960,1080 1080,1470
asking for interrupts when packets

1723
00:53:30,010 --> 00:53:31,090
0,450 450,480 480,660 660,990 990,1080
arrive or when packets have

1724
00:53:31,090 --> 00:53:33,580
0,90 90,570 840,1470 1470,2010 2010,2490
been sent this thread, maybe,

1725
00:53:33,580 --> 00:53:34,640
0,600
um.

1726
00:53:35,330 --> 00:53:36,440
0,270 270,600 600,900 900,1020 1020,1110
A kernel thread like we

1727
00:53:36,440 --> 00:53:38,480
0,210 210,330 330,1230 1260,1800 1890,2040
have an x86, I'm in

1728
00:53:38,480 --> 00:53:40,730
0,180 180,420 420,1170 1170,1950 2010,2250
a unit processor as was

1729
00:53:40,730 --> 00:53:42,170
0,90 90,480 480,630 630,960 960,1440
the case with today's paper,

1730
00:53:42,470 --> 00:53:43,880
0,420 420,720 720,960 960,1320 1320,1410
this thread can't run at

1731
00:53:43,880 --> 00:53:45,110
0,90 90,330 330,600 600,720 720,1230
the same time as interrupt

1732
00:53:45,110 --> 00:53:47,060
0,540 540,930 930,1530 1560,1920 1920,1950
interrupt absolute priority on a

1733
00:53:47,060 --> 00:53:48,860
0,240 240,420 420,1140 1440,1650 1650,1800
multi core machine, um there

1734
00:53:48,860 --> 00:53:50,630
0,120 120,240 240,420 420,1200 1410,1770
may be more parallelism and

1735
00:53:50,630 --> 00:53:52,160
0,210 210,390 390,780 780,930 930,1530
then it's important that applications

1736
00:53:52,160 --> 00:53:52,880
0,60 60,150 150,330 330,480 480,720
to be able to read

1737
00:53:52,880 --> 00:53:54,800
0,60 60,630 840,1170 1170,1320 1320,1920
the packets um the applications

1738
00:53:54,800 --> 00:53:57,440
0,150 150,420 420,1050 1500,2130 2130,2640
are yet another independently scheduled

1739
00:53:57,440 --> 00:53:59,460
0,780
entities.

1740
00:53:59,660 --> 00:54:01,490
0,210 210,420 420,600 600,1410 1710,1830
Um that we'd like to

1741
00:54:01,490 --> 00:54:03,530
0,150 150,270 270,750 840,1320 1470,2040
get their chance, I'm executing

1742
00:54:03,530 --> 00:54:04,900
0,90 90,180 180,690
on the CPU.

1743
00:54:06,240 --> 00:54:07,500
0,450 750,1020 1020,1080 1080,1170 1170,1260
So these are all the

1744
00:54:07,500 --> 00:54:10,340
0,660 660,840 840,1230
players in the.

1745
00:54:11,880 --> 00:54:13,350
0,180 180,660 660,840 840,930 930,1470
And that's in the scheduling

1746
00:54:13,350 --> 00:54:14,900
0,270 270,930
game essentially.

1747
00:54:15,280 --> 00:54:16,300
0,450
Yep.

1748
00:54:17,970 --> 00:54:20,240
0,600 870,1260 1260,1500 1500,1770
Um, one thing that.

1749
00:54:20,270 --> 00:54:21,890
0,390 390,510 510,570 570,990 990,1620
Comes up a lot is

1750
00:54:21,950 --> 00:54:24,230
0,270 270,1050 1080,1320 1320,1800 2130,2280
a buffering, so there's a

1751
00:54:24,230 --> 00:54:26,870
0,720 720,1380 1380,1710 1740,2190 2190,2640
three queues here by buffering,

1752
00:54:26,870 --> 00:54:28,700
0,90 90,540 690,1230 1230,1770 1770,1830
I mean these structures in

1753
00:54:28,700 --> 00:54:31,520
0,390 420,960 960,1440 1440,1830 1830,2820
which one independent it upends

1754
00:54:31,550 --> 00:54:32,810
0,210 210,540 540,960 960,1080 1080,1260
a input packets and some

1755
00:54:32,810 --> 00:54:35,210
0,210 210,780 930,1740 1740,2160 2160,2400
other entity polls packets off

1756
00:54:35,210 --> 00:54:36,470
0,240 240,660 660,720 720,840 840,1260
the front of the queue,

1757
00:54:36,830 --> 00:54:38,450
0,360 360,600 600,870 870,960 960,1620
a these cues are pervasive

1758
00:54:38,450 --> 00:54:40,120
0,150 150,540 540,1290
in networking systems.

1759
00:54:40,150 --> 00:54:41,260
0,540
I'm.

1760
00:54:41,490 --> 00:54:43,020
0,450 450,780 780,1080 1080,1230 1230,1530
Um, one reason for them

1761
00:54:43,200 --> 00:54:44,700
0,300 300,420 420,630 630,1200 1200,1500
is to allow temporary to

1762
00:54:44,940 --> 00:54:47,190
0,360 360,420 420,990 990,1680 1800,2250
cope a temporary bers, this

1763
00:54:47,190 --> 00:54:48,330
0,360 360,600 600,840 840,960 960,1140
IP thread, maybe can only

1764
00:54:48,330 --> 00:54:49,800
0,390 390,840 840,960 960,1320 1320,1470
process packets at however any

1765
00:54:49,800 --> 00:54:51,750
0,120 120,720 960,1350 1350,1440 1440,1950
per second, but the Nick

1766
00:54:51,750 --> 00:54:53,130
0,240 240,390 390,780 870,1020 1020,1380
may be able to deliver

1767
00:54:53,130 --> 00:54:55,110
0,360 360,570 570,690 690,1290 1470,1980
packets much more quickly and

1768
00:54:55,110 --> 00:54:55,590
0,90 90,180 180,300 300,420 420,480
so there may be a

1769
00:54:55,590 --> 00:54:57,030
0,300 360,690 690,750 750,1140 1140,1440
little sort of temporary burst

1770
00:54:57,030 --> 00:54:58,200
0,60 60,630 660,930 930,1080 1080,1170
of packets, we'd like to

1771
00:54:58,200 --> 00:54:59,340
0,150 150,390 390,450 450,810 810,1140
have somewhere to put them

1772
00:54:59,670 --> 00:55:01,800
0,600 870,1380 1380,1500 1500,1710 1710,2130
I'm waiting for the IP

1773
00:55:01,800 --> 00:55:02,610
0,300 300,390 390,510 510,750 750,810
thread to get around to

1774
00:55:02,610 --> 00:55:04,530
0,630 720,840 840,1140 1470,1650 1650,1920
processing and so that's one

1775
00:55:04,530 --> 00:55:05,780
0,180 180,240 240,930
use of cues.

1776
00:55:06,160 --> 00:55:07,900
0,330 450,690 690,780 780,1140 1140,1740
I'm on the output side,

1777
00:55:08,260 --> 00:55:09,520
0,390 390,690 690,870 870,960 960,1260
um, another use of cues

1778
00:55:09,520 --> 00:55:11,710
0,120 120,300 300,540 540,810 1320,2190
as we'd like to especially

1779
00:55:11,710 --> 00:55:12,760
0,60 60,420 420,510 510,930 930,1050
if packets are bursting we'd

1780
00:55:12,760 --> 00:55:13,570
0,150 150,210 210,300 300,480 480,810
like to be able to

1781
00:55:13,600 --> 00:55:14,590
0,510 510,660 660,720 720,930 930,990
stack up a bunch of

1782
00:55:14,590 --> 00:55:16,390
0,480 480,960 1110,1560 1560,1680 1680,1800
packets here ready for the

1783
00:55:16,390 --> 00:55:17,290
0,180 180,300 300,630 630,690 690,900
Nick to send to keep

1784
00:55:17,290 --> 00:55:19,330
0,120 120,450 720,870 870,1500 1710,2040
the NIC to output Nick

1785
00:55:19,330 --> 00:55:21,790
0,480 690,1350 1470,2130 2130,2400 2400,2460
busy, um, because depending on

1786
00:55:21,790 --> 00:55:22,540
0,60 60,360 360,450 450,690 690,750
the speed of things, it

1787
00:55:22,540 --> 00:55:23,740
0,120 120,210 210,450 450,870 870,1200
may be quite important to

1788
00:55:23,890 --> 00:55:24,790
0,210 210,360 360,420 420,780 780,900
be able to hunt to

1789
00:55:24,790 --> 00:55:26,770
0,570 570,960 960,1530 1530,1650 1650,1980
utilize {100% -} of the

1790
00:55:27,100 --> 00:55:28,600
0,720 720,1050
network here.

1791
00:55:29,120 --> 00:55:30,200
0,480
HMM.

1792
00:55:30,840 --> 00:55:31,800
0,180 180,270 270,450 450,750 750,960
And the other reason for

1793
00:55:31,800 --> 00:55:32,680
0,180
it.

1794
00:55:33,120 --> 00:55:34,560
0,420 420,510 510,780 780,1080 1080,1440
Maybe the same reason stated

1795
00:55:34,560 --> 00:55:36,120
0,420 420,540 540,750 750,1140 1140,1560
differently for having queues is

1796
00:55:36,120 --> 00:55:37,140
0,90 90,180 180,330 330,420 420,1020
to be able to structure

1797
00:55:37,140 --> 00:55:40,020
0,690 900,1350 1350,2040 2040,2730 2730,2880
software into independent parts that

1798
00:55:40,020 --> 00:55:42,750
0,60 60,570 570,1320 1890,2190 2190,2730
are scheduled separately wouldn't necessarily

1799
00:55:42,750 --> 00:55:44,100
0,180 180,240 240,450 450,780 810,1350
want to have our IP

1800
00:55:44,100 --> 00:55:46,110
0,300 300,390 390,540 540,1470 1560,2010
thread or the application know

1801
00:55:46,110 --> 00:55:47,400
0,390 390,540 540,810 810,1170 1170,1290
about the other things that

1802
00:55:47,400 --> 00:55:48,420
0,150 150,270 270,450 450,780 780,1020
have to go on like

1803
00:55:48,420 --> 00:55:50,970
0,390 390,960 1200,1470 1470,1770 2100,2550
interrupt processing, so the IP

1804
00:55:50,970 --> 00:55:52,380
0,270 270,750 780,1020 1020,1140 1140,1410
thread is sort of a

1805
00:55:52,560 --> 00:55:55,290
0,480 750,1320 1320,1740 2040,2520 2520,2730
traditional networking system, it doesn't

1806
00:55:55,290 --> 00:55:57,380
0,570 570,1140
necessarily know.

1807
00:55:58,390 --> 00:56:00,970
0,900 1140,1620 1620,2130 2130,2220 2220,2580
When interrupts happen or when

1808
00:56:00,970 --> 00:56:03,250
0,690 690,930 930,1440 1830,2130 2130,2280
applications run although we'll see

1809
00:56:03,250 --> 00:56:04,630
0,60 60,210 210,630 630,870 1200,1380
in this paper, that there

1810
00:56:04,630 --> 00:56:05,830
0,120 120,240 240,870 870,990 990,1200
may be advantages to having

1811
00:56:05,830 --> 00:56:06,610
0,60 60,240 240,330 330,390 390,780
a little bit of knowledge

1812
00:56:06,610 --> 00:56:07,460
0,300
there.

1813
00:56:11,260 --> 00:56:14,110
0,420 420,630 630,1110 1440,2430 2430,2850
Questions about this scheduling control

1814
00:56:14,110 --> 00:56:15,300
0,570
diagram.

1815
00:56:19,620 --> 00:56:21,270
0,360 450,510 510,660 660,960 990,1650
Oh I have a question,

1816
00:56:21,300 --> 00:56:22,860
0,570 600,810 810,900 900,1260 1260,1560
so can the same Nick

1817
00:56:22,860 --> 00:56:25,290
0,210 210,360 360,930 1440,1890 1890,2430
not be used for both

1818
00:56:25,290 --> 00:56:29,160
0,600 600,750 750,1290 3360,3720 3720,3870
transmitting and receiving so my

1819
00:56:29,160 --> 00:56:30,570
0,540 540,810 810,1020 1020,1140 1140,1410
laptop really only has one

1820
00:56:30,570 --> 00:56:32,820
0,600 600,870 1320,1800 1800,2160 2160,2250
interface and it connected to

1821
00:56:32,820 --> 00:56:34,230
0,780 810,990 990,1050 1050,1380 1380,1410
WiFi when it receives a

1822
00:56:34,230 --> 00:56:36,030
0,450 450,810 990,1200 1200,1350 1350,1800
packet this on my laptop,

1823
00:56:36,030 --> 00:56:36,720
0,150 150,300 300,390 390,630 630,690
this Nick is actually a

1824
00:56:36,720 --> 00:56:37,940
0,780
wi-fi.

1825
00:56:38,260 --> 00:56:41,500
0,450 450,1050 1200,1650 1650,2820 3090,3240
Radio interface packets arrive and

1826
00:56:41,500 --> 00:56:42,190
0,150 150,300 300,360 360,450 450,690
go out on the same

1827
00:56:42,190 --> 00:56:45,610
0,360 750,810 1350,1740 1740,2430 2460,3420
neck of the tunic situation.

1828
00:56:46,170 --> 00:56:47,850
0,150 150,540 540,690 690,810 810,1680
Is certainly used for browsers,

1829
00:56:48,150 --> 00:56:51,420
0,480 600,810 810,1230 1230,2310 2340,3270
um, so your home wi-fi

1830
00:56:51,420 --> 00:56:52,500
0,60 60,150 150,330 330,810 810,1080
I don't know, maybe I

1831
00:56:52,500 --> 00:56:53,940
0,240 240,660 660,780 780,1320 1320,1440
have WiFi and cable and

1832
00:56:53,940 --> 00:56:56,100
0,150 150,270 270,600 600,1320 1410,2160
there's a router box, um

1833
00:56:56,310 --> 00:56:58,170
0,270 270,660 660,870 870,1470 1500,1860
that has two next one

1834
00:56:58,170 --> 00:56:59,940
0,390 510,1260
is the.

1835
00:56:59,940 --> 00:57:01,200
0,180 180,570 570,690 690,930 930,1260
Its connection to my cable

1836
00:57:01,200 --> 00:57:02,160
0,300 300,480 480,660 660,750 750,960
modem which leaves the rest

1837
00:57:02,160 --> 00:57:02,940
0,60 60,150 150,600 600,690 690,780
of the Internet and the

1838
00:57:02,940 --> 00:57:04,800
0,150 150,360 360,510 510,870 930,1860
other one is my WiFi.

1839
00:57:05,840 --> 00:57:07,610
0,930 1140,1290 1290,1470 1470,1590 1590,1770
Interface so that the little

1840
00:57:07,610 --> 00:57:08,920
0,510 510,720
box that.

1841
00:57:09,140 --> 00:57:10,790
0,330 330,660 660,960 960,1350 1350,1650
The cable modem cable company

1842
00:57:10,790 --> 00:57:12,020
0,240 240,390 390,510 510,630 630,1230
sent me as a router

1843
00:57:12,110 --> 00:57:15,680
0,150 150,330 330,630 630,1350 3240,3570
with two network interfaces, and

1844
00:57:15,770 --> 00:57:16,580
0,270 270,510 510,540 540,720 720,810
there's actually a lot of

1845
00:57:16,580 --> 00:57:19,340
0,570 570,720 720,1470 1530,2220 2220,2760
servers have multiple interfaces also

1846
00:57:20,360 --> 00:57:21,620
0,630 630,840 840,930 930,1020 1020,1260
especially ones that are web

1847
00:57:21,620 --> 00:57:23,000
0,450 450,630 750,1170 1170,1320 1320,1380
servers that you want to

1848
00:57:23,000 --> 00:57:24,560
0,240 240,330 330,420 420,810 810,1560
talk to the outside world.

1849
00:57:25,270 --> 00:57:26,380
0,240 240,360 360,690 690,840 840,1110
Well I won when they

1850
00:57:26,380 --> 00:57:28,120
0,330 330,570 570,1110
sent your private.

1851
00:57:28,120 --> 00:57:30,670
0,480 480,1200 1200,1830 1830,1920 1920,2550
Sensitive database machine or something

1852
00:57:31,030 --> 00:57:32,500
0,210 210,270 270,600 600,960 960,1470
on a totally separate network

1853
00:57:32,890 --> 00:57:35,620
0,240 240,720 930,1230 1230,1830 2220,2730
with another network interface, this

1854
00:57:35,620 --> 00:57:37,540
0,690 690,750 750,900 900,1170 1710,1920
arrangement is pretty common, the

1855
00:57:37,540 --> 00:57:39,190
0,600 600,690 690,990 990,1350 1350,1650
criteria for having multiple nics

1856
00:57:39,190 --> 00:57:40,930
0,180 180,570 660,1440 1440,1530 1530,1740
is just wanting to talk

1857
00:57:40,930 --> 00:57:42,660
0,90 90,360 360,930 930,1260
to different networks then.

1858
00:57:42,880 --> 00:57:44,740
0,780 780,1560 1560,1650 1650,1800 1800,1860
Yeah, if you want to

1859
00:57:44,740 --> 00:57:46,120
0,150 150,210 210,450 450,1080 1170,1380
talk to different networks, then

1860
00:57:46,120 --> 00:57:47,440
0,150 150,300 300,600 600,960 960,1320
you have multiple things yes.

1861
00:57:52,070 --> 00:57:53,210
0,330 330,390 390,810 810,1020 1020,1140
Alright I wanna as a

1862
00:57:53,210 --> 00:57:54,410
0,630 630,840 840,870 870,1050 1050,1200
side talk a little bit

1863
00:57:54,410 --> 00:57:57,470
0,300 300,750 750,1020 1560,2820 2820,3060
more about a knicks what

1864
00:57:57,470 --> 00:57:58,520
0,270 270,420 420,540 540,930 930,1050
knicks do with packets when

1865
00:57:58,520 --> 00:57:59,270
0,60 60,390 390,480 480,600 600,750
they arrive, and this is

1866
00:57:59,270 --> 00:58:01,940
0,930 930,1800 1890,2430 2430,2520 2520,2670
a special relevance to the

1867
00:58:01,940 --> 00:58:06,620
0,810 960,1530 2580,3060 3060,4050 4050,4680
lab, I'm a you a

1868
00:58:06,830 --> 00:58:08,390
0,150 150,420 420,990 990,1290 1290,1560
you know what ionic looks

1869
00:58:08,390 --> 00:58:09,980
0,210 210,960
like internally.

1870
00:58:09,980 --> 00:58:11,240
0,630
I'm.

1871
00:58:11,330 --> 00:58:12,770
0,270 270,330 330,480 480,630 630,1440
You know it's got a

1872
00:58:12,770 --> 00:58:14,720
0,450 450,900 900,1170 1170,1650 1650,1950
cable leading a radio leading

1873
00:58:14,720 --> 00:58:16,280
0,120 120,450 780,1080 1080,1170 1170,1560
to the from the outside

1874
00:58:16,280 --> 00:58:18,470
0,510 660,1050 1290,1920 1920,2010 2010,2190
world, um, you know it

1875
00:58:18,470 --> 00:58:19,670
0,270 270,330 330,990 990,1080 1080,1200
looks at electrons as they

1876
00:58:19,670 --> 00:58:20,960
0,240 240,480 480,750 780,1020 1020,1290
come in and sort of

1877
00:58:21,110 --> 00:58:22,840
0,300 300,390 390,570 570,1320
turns them into packets.

1878
00:58:23,020 --> 00:58:24,670
0,360 840,1200 1200,1380 1380,1560 1560,1650
Um, and then there's the

1879
00:58:24,670 --> 00:58:26,680
0,810 840,1410 1500,1680 1680,1950 1950,2010
host, um, and there's the

1880
00:58:26,680 --> 00:58:27,820
0,330 330,480 480,690 690,750 750,1140
host some sort of driver

1881
00:58:27,820 --> 00:58:29,950
0,510 510,660 660,810 1290,1650 1800,2130
software in it, um and

1882
00:58:29,980 --> 00:58:31,660
0,390 390,570 570,660 660,1200 1290,1680
one way or another, you

1883
00:58:31,660 --> 00:58:32,410
0,90 90,210 210,420 420,540 540,750
know we need to get

1884
00:58:32,410 --> 00:58:34,240
0,510 510,930 930,1230 1230,1740 1740,1830
a packet that's decoded in

1885
00:58:34,240 --> 00:58:36,730
0,120 120,600 660,1200 1200,1890 2130,2490
the neck into memory a

1886
00:58:36,730 --> 00:58:39,100
0,300 300,630 630,1050 1050,1920
where the IP software.

1887
00:58:39,100 --> 00:58:40,480
0,90 90,150 150,660 660,1050 1080,1380
And the host can parse

1888
00:58:40,480 --> 00:58:42,160
0,150 150,480 1200,1410 1410,1500 1500,1680
that packet and so there's

1889
00:58:42,160 --> 00:58:43,180
0,90 90,240 240,330 330,600 600,1020
a lot of different schemes

1890
00:58:43,180 --> 00:58:44,680
0,210 210,750 750,900 900,990 990,1500
been designed over the years,

1891
00:58:44,710 --> 00:58:46,640
0,270 270,720 720,1380
the paper scheme.

1892
00:58:46,640 --> 00:58:47,810
0,210 210,450 480,720 720,960 960,1170
Is that the NIC has

1893
00:58:47,810 --> 00:58:49,760
0,390 390,630 630,780 840,1470 1470,1950
a lot of internal memory,

1894
00:58:49,760 --> 00:58:51,770
0,90 90,240 240,660 660,1380 1680,2010
and as packets arrive the

1895
00:58:51,770 --> 00:58:52,740
0,420
only.

1896
00:58:52,740 --> 00:58:53,730
0,120 120,300 300,720 720,870 870,990
The only immediate thing that

1897
00:58:53,730 --> 00:58:54,990
0,390 390,540 540,690 690,930 930,1260
happens is that Nick puts

1898
00:58:54,990 --> 00:58:56,160
0,120 120,510 510,720 720,780 780,1170
you lays down the packets

1899
00:58:56,160 --> 00:58:57,510
0,90 90,270 270,480 480,780 780,1350
in its own buffer memory.

1900
00:58:58,090 --> 00:58:59,260
0,390 390,600
That's it.

1901
00:58:59,880 --> 00:59:01,820
0,180 180,810 810,1050 1050,1350
And interrupts the um.

1902
00:59:02,320 --> 00:59:03,970
0,270 270,690 690,780 780,1350 1380,1650
Who struck the host and

1903
00:59:03,970 --> 00:59:05,170
0,120 120,360 360,480 480,870 930,1200
said that the nec has

1904
00:59:05,170 --> 00:59:07,060
0,90 90,570 570,1260 1290,1410 1410,1890
an internal queue of packets

1905
00:59:07,060 --> 00:59:07,930
0,90 90,150 150,360 360,450 450,870
and a bunch of memory

1906
00:59:07,990 --> 00:59:09,580
0,330 330,540 540,690 690,870 870,1590
and then in the interrupt

1907
00:59:09,760 --> 00:59:11,920
0,330 330,570 600,1290 1290,1860 1950,2160
in the host driver, the

1908
00:59:11,920 --> 00:59:12,850
0,180 180,390 390,570 570,630 630,930
host driver has a loop

1909
00:59:12,850 --> 00:59:13,840
0,120 120,300 330,450 450,660 660,990
in it, the host driver

1910
00:59:13,870 --> 00:59:14,500
0,120 120,360 360,420 420,540 540,630
will talk to them, they

1911
00:59:14,500 --> 00:59:15,340
0,120 120,390 390,510 510,660 660,840
can say you know any

1912
00:59:15,340 --> 00:59:16,900
0,510 510,1020 1140,1380 1380,1470 1470,1560
packets, buffered, and if it

1913
00:59:16,900 --> 00:59:18,580
0,540 840,1170 1170,1260 1260,1530 1530,1680
does now the host has

1914
00:59:18,580 --> 00:59:19,630
0,300 300,690 690,780 780,870 870,1050
a loop that will just

1915
00:59:19,630 --> 00:59:21,010
0,390 390,480 480,720 780,930 930,1380
copy you know by byte

1916
00:59:21,010 --> 00:59:22,260
0,90 90,270 270,420 420,840
or word by word.

1917
00:59:22,260 --> 00:59:24,300
0,300 300,480 480,990 1170,1650 1650,2040
Copy this packet into the

1918
00:59:24,780 --> 00:59:26,400
0,840 840,930 930,1020 1020,1470 1470,1620
memory of the host and

1919
00:59:26,400 --> 00:59:28,410
0,510 510,630 630,720 720,1350 1710,2010
appended to a queue a

1920
00:59:28,410 --> 00:59:30,090
0,390 390,480 480,990 1200,1380 1380,1680
inside the host, so that's

1921
00:59:30,090 --> 00:59:32,790
0,150 150,420 840,1590 1590,1980 1980,2700
how the papers Nick works

1922
00:59:33,180 --> 00:59:34,880
0,420 420,1050
the drivers.

1923
00:59:34,910 --> 00:59:36,110
0,210 210,720 720,840 840,1110 1110,1200
Is responsible for doing the

1924
00:59:36,110 --> 00:59:37,670
0,360 360,510 510,780 780,1290 1350,1560
copy from Nick memory to

1925
00:59:37,670 --> 00:59:39,820
0,300 300,660
host memory.

1926
00:59:39,880 --> 00:59:40,360
0,150 150,270 270,300 300,420 420,480
That made a lot of

1927
00:59:40,360 --> 00:59:42,340
0,240 240,480 480,690 690,1080 1350,1980
sense thirty years ago, um

1928
00:59:42,880 --> 00:59:44,080
0,330 330,510 510,630 630,930 930,1200
today though it turns out

1929
00:59:44,080 --> 00:59:45,880
0,360 570,1140 1140,1230 1230,1290 1290,1800
that loops in the CPU

1930
00:59:45,880 --> 00:59:48,700
0,150 150,1020 1200,1830 2130,2460 2640,2820
that copy, um that you

1931
00:59:48,700 --> 00:59:50,140
0,180 210,510 510,600 600,990 990,1440
know talk to external hardware

1932
00:59:50,140 --> 00:59:51,490
0,120 120,540 540,810 810,930 930,1350
or hardware sitting on buses

1933
00:59:51,490 --> 00:59:52,720
0,240 270,570 570,780 780,1080 1080,1230
are very very slow, this

1934
00:59:52,720 --> 00:59:54,910
0,360 360,450 1290,1500 1500,1680 1890,2190
sort of you know in

1935
00:59:54,910 --> 00:59:57,730
0,210 210,600 600,1140 1140,1500 2010,2820
the grand scheme of microprocessor

1936
00:59:57,730 --> 01:00:00,220
0,510 540,990 990,1740 1740,2070 2070,2490
design, this distance here between

1937
01:00:00,220 --> 01:00:03,520
0,300 330,1260 1290,1740 2190,2430 2790,3300
the CPU and an external

1938
01:00:03,520 --> 01:00:04,660
0,630 660,840 840,930 930,1050 1050,1140
device, even if it's on

1939
01:00:04,660 --> 01:00:05,740
0,90 90,750
the same.

1940
01:00:06,000 --> 01:00:07,560
0,810 1050,1230 1230,1290 1290,1350 1350,1560
Computer, this is a very

1941
01:00:07,560 --> 01:00:09,930
0,210 210,570 570,990 1110,1620 1680,2370
long distance and each conversation

1942
01:00:09,930 --> 01:00:11,580
0,540 570,810 810,870 870,1140 1140,1650
today takes a long time

1943
01:00:11,610 --> 01:00:12,900
0,60 60,420 420,870 870,1110 1110,1290
to reach back for chit

1944
01:00:12,900 --> 01:00:14,010
0,330 330,570 660,870 870,960 960,1110
chat and so you don't

1945
01:00:14,010 --> 01:00:14,610
0,120 120,180 180,300 300,360 360,600
want to have a lot

1946
01:00:14,610 --> 01:00:16,100
0,120 120,900
of bite.

1947
01:00:16,430 --> 01:00:18,860
0,180 180,870 1350,1620 1620,1920 1980,2430
Um, interaction, um, so people

1948
01:00:18,920 --> 01:00:21,140
0,570 570,1050 1050,1530 1530,2070 2070,2220
don't design high-speed interfaces like

1949
01:00:21,140 --> 01:00:23,580
0,210 210,660
this anymore.

1950
01:00:24,420 --> 01:00:25,500
0,240 240,300 300,510 510,630 630,1080
So a much more modern

1951
01:00:25,500 --> 01:00:27,600
0,870
arrangement.

1952
01:00:27,780 --> 01:00:29,250
0,240 240,390 390,870 960,1140 1140,1470
Looks like this, so now

1953
01:00:29,250 --> 01:00:30,380
0,180 180,540
I'm gonna.

1954
01:00:30,690 --> 01:00:32,130
0,330 330,480 480,570 570,1050 1050,1440
Talk about an arrangement which

1955
01:00:32,340 --> 01:00:33,990
0,300 300,630 630,930 930,1230 1230,1650
a shows up in the.

1956
01:00:34,640 --> 01:00:37,100
0,510 540,870 870,1350 1350,1890
I'm even thousand Nick.

1957
01:00:38,230 --> 01:00:40,120
0,270 270,450 450,1260
Which you'll use.

1958
01:00:40,450 --> 01:00:42,460
0,420 420,510 510,1140 1230,1380 1380,2010
In the lab or simulation

1959
01:00:42,460 --> 01:00:43,820
0,90 90,300 300,810
of it show.

1960
01:00:43,820 --> 01:00:44,900
0,150 150,240 240,330 330,480 480,1080
Now the way the {1000,,Nick,works.

1961
01:00:44,900 --> 01:00:46,380
0,960
-}

1962
01:00:47,110 --> 01:00:48,160
0,240 240,390 390,510 510,960 960,1050
So has this wire and

1963
01:00:48,160 --> 01:00:49,240
0,150 150,330 330,420 420,480 480,1080
it's looking at the electrons,

1964
01:00:49,240 --> 01:00:51,580
0,210 300,990 990,1080 1080,1620 1620,2340
but as the packets arrive

1965
01:00:51,610 --> 01:00:55,240
0,630 630,1260 1710,2250 2250,2730 3180,3630
the Nick writes them Nick.

1966
01:00:56,450 --> 01:00:58,190
0,390 390,660 660,810 810,1320 1320,1740
Doesn't really have significant internal

1967
01:00:58,190 --> 01:00:59,030
0,420 420,600 600,660 660,780 780,840
buffering, although it has a

1968
01:00:59,030 --> 01:01:00,440
0,210 210,450
little bit.

1969
01:01:00,440 --> 01:01:01,730
0,150 150,420 420,810 810,900 900,1290
It actually copies the packets

1970
01:01:01,730 --> 01:01:03,260
0,450 450,630 630,960 960,1260 1260,1530
directly into host memory where

1971
01:01:03,260 --> 01:01:04,400
0,300 300,390 390,810 810,1020 1020,1140
they'll be sitting there in

1972
01:01:04,400 --> 01:01:05,960
0,300 300,720 750,1350 1350,1470 1470,1560
host memory waiting for the

1973
01:01:05,960 --> 01:01:06,950
0,330 330,420 420,660 660,780 780,990
driver to pick them up

1974
01:01:07,010 --> 01:01:09,050
0,240 240,330 330,810 810,1350 1620,2040
sort of already copied, um,

1975
01:01:09,140 --> 01:01:09,980
0,210 210,360 360,540 540,660 660,840
but that means that Nick

1976
01:01:09,980 --> 01:01:11,600
0,180 180,270 270,540 540,1080 1080,1620
has to know, weird memory,

1977
01:01:11,600 --> 01:01:12,980
0,150 150,330 330,600 600,810 810,1380
it should put each packet,

1978
01:01:13,070 --> 01:01:15,600
0,690 1470,1920
um so.

1979
01:01:15,920 --> 01:01:17,060
0,330 390,600 600,750 750,1020 1020,1140
Um the way that u

1980
01:01:17,060 --> 01:01:19,850
0,1920 1920,2070 2070,2220 2220,2310 2310,2790
{1000,networks} is that the host

1981
01:01:19,850 --> 01:01:22,700
0,780 1290,1740 1770,2550 2550,2700 2700,2850
software, um formats up what's

1982
01:01:22,700 --> 01:01:26,140
0,360 390,1560 1560,2070 2070,2970
called rings, DNA rings.

1983
01:01:26,140 --> 01:01:28,090
0,120 120,600 600,1230 1260,1560 1560,1950
A packet pointers, so DNA

1984
01:01:28,090 --> 01:01:29,860
0,150 150,270 270,540 540,750 900,1770
ring is just an array.

1985
01:01:30,840 --> 01:01:33,240
0,480 510,1920
Of pointers.

1986
01:01:34,370 --> 01:01:35,680
0,690
I'm.

1987
01:01:36,260 --> 01:01:38,680
0,630 630,1080 1080,1920
Two packet buffers.

1988
01:01:40,120 --> 01:01:41,360
0,300 300,630
So the.

1989
01:01:41,360 --> 01:01:42,650
0,420 450,750 750,1020 1020,1170 1170,1290
Host host driver when it's

1990
01:01:42,650 --> 01:01:44,120
0,540 540,600 600,870 870,990 990,1470
initialized the card will allocate

1991
01:01:44,120 --> 01:01:46,760
0,330 330,630 630,810 810,1710 2130,2640
however many say sixteen fifteen

1992
01:01:46,760 --> 01:01:48,710
0,360 360,630 630,930 930,1530 1590,1950
hundred byte packet buffers will

1993
01:01:48,710 --> 01:01:50,600
0,480 480,690 720,1290 1290,1380 1380,1890
create an array of fifteen

1994
01:01:50,600 --> 01:01:52,250
0,570 570,660 660,1080 1080,1500 1500,1650
pointers are sixteen pointers and

1995
01:01:53,390 --> 01:01:54,350
0,240 240,420 420,720 720,900 900,960
make these pointers point to

1996
01:01:54,350 --> 01:01:55,400
0,210 210,300 300,420 420,630 630,1050
there and then it'll tell

1997
01:01:55,400 --> 01:01:57,740
0,150 150,510 660,1140 1140,1920 1920,2340
the NIC in configuration time,

1998
01:01:57,770 --> 01:01:58,740
0,510
look.

1999
01:01:58,740 --> 01:02:01,060
0,510 750,1320 1320,1680
Yeah here's the.

2000
01:02:01,060 --> 01:02:02,920
0,960 1170,1350 1350,1470 1470,1530 1530,1860
Ring, so this is called

2001
01:02:02,920 --> 01:02:05,960
0,450 450,1080 1410,2370
DNA ring because.

2002
01:02:06,660 --> 01:02:07,620
0,390 390,510 510,690 690,840 840,960
After you've gone off the

2003
01:02:07,620 --> 01:02:08,430
0,210 210,300 300,540 540,750 750,810
end you start back at

2004
01:02:08,430 --> 01:02:10,020
0,90 90,600
the beginning.

2005
01:02:10,170 --> 01:02:11,250
0,270 270,360 360,690 690,990 990,1080
Um the drivers software will

2006
01:02:11,250 --> 01:02:12,360
0,180 180,270 270,570 570,870 870,1110
tell the network here's a

2007
01:02:12,360 --> 01:02:13,740
0,510 510,630 630,1050 1050,1140 1140,1380
pointer the address in my

2008
01:02:13,740 --> 01:02:15,780
0,360 360,480 480,660 660,1140 1680,2040
Ram of the ring die

2009
01:02:15,780 --> 01:02:17,250
0,240 240,690 810,1080 1080,1410 1410,1470
may ring you're supposed to

2010
01:02:17,250 --> 01:02:19,380
0,270 270,330 330,1080 1290,1650 1650,2130
use the deposit incoming packets

2011
01:02:19,380 --> 01:02:20,850
0,120 120,180 180,480 480,1080 1140,1470
when a packet arrives, the

2012
01:02:20,850 --> 01:02:23,640
0,300 300,660 660,1530 2010,2400 2400,2790
nickel actually remember a which

2013
01:02:23,640 --> 01:02:25,320
0,270 270,930 1080,1260 1260,1380 1380,1680
ring entry is the next

2014
01:02:25,320 --> 01:02:26,420
0,570
one.

2015
01:02:27,960 --> 01:02:29,440
0,120 120,240 240,330 330,810
It is a little.

2016
01:02:29,500 --> 01:02:30,730
0,330 330,540 540,870 870,1170 1170,1230
Pointer here that allows it

2017
01:02:30,730 --> 01:02:32,680
0,90 90,660 1260,1380 1380,1710 1710,1950
to remember the next entry

2018
01:02:32,680 --> 01:02:33,400
0,90 90,210 210,360 360,720 720,720
that it should DNA a

2019
01:02:33,400 --> 01:02:34,480
0,390 390,600 600,720 720,780 780,1080
packet into when a packet

2020
01:02:34,480 --> 01:02:36,130
0,660 750,1020 1020,1200 1200,1320 1320,1650
arrives, the NIC will fetch

2021
01:02:36,130 --> 01:02:37,360
0,120 120,540 540,720 720,810 810,1230
the pointer out of this

2022
01:02:38,020 --> 01:02:39,580
0,570 570,750 750,1050 1050,1350 1350,1560
fetch, this buffer pointer out

2023
01:02:39,580 --> 01:02:42,160
0,60 60,150 150,510 540,1170 2010,2580
of the host Ram copy

2024
01:02:42,160 --> 01:02:44,170
0,300 540,1110 1110,1620 1620,1830 1830,2010
the packet bytes into this

2025
01:02:44,170 --> 01:02:46,480
0,570 780,960 960,1110 1110,1800 1800,2310
buffer and then advance its.

2026
01:02:46,860 --> 01:02:48,180
0,780
Internal.

2027
01:02:48,210 --> 01:02:49,440
0,570 570,810 810,900 900,1140 1140,1230
Index here to point to

2028
01:02:49,440 --> 01:02:51,300
0,90 90,660 690,930 930,1470 1530,1860
the next ring slot which

2029
01:02:51,300 --> 01:02:52,020
0,120 120,330 330,420 420,480 480,720
we'll use for the next

2030
01:02:52,020 --> 01:02:52,980
0,330
packet.

2031
01:02:53,510 --> 01:02:55,520
0,120 120,270 270,330 330,1080 1560,2010
And there's a similar um,

2032
01:02:55,790 --> 01:02:56,720
0,240 240,360 360,480 480,660 660,930
so this will be our

2033
01:02:56,720 --> 01:02:58,120
0,300 300,810
X ring.

2034
01:02:58,120 --> 01:02:59,650
0,120 120,750 780,1020 1020,1110 1110,1530
To receive there's a similar

2035
01:02:59,650 --> 01:03:00,850
0,210 210,360 360,450 450,780 780,1200
ring that the driver sets

2036
01:03:00,850 --> 01:03:02,680
0,330 750,1200
up a.

2037
01:03:03,120 --> 01:03:05,020
0,150 150,420 420,540 540,1380
In which the driver.

2038
01:03:05,020 --> 01:03:06,740
0,300 300,1200
Puts packets.

2039
01:03:06,770 --> 01:03:08,330
0,150 150,240 240,810 810,1110 1140,1560
That it wants the NIC

2040
01:03:08,330 --> 01:03:09,920
0,810 810,960 960,1140 1140,1350 1350,1590
descend, so the NIC also

2041
01:03:09,920 --> 01:03:10,760
0,120 120,210 210,510 510,630 630,840
has a pointer to the

2042
01:03:11,300 --> 01:03:12,840
0,510 510,780
tx ring.

2043
01:03:14,090 --> 01:03:15,500
0,210 210,420 420,660 660,960 960,1410
So you'll learn your job

2044
01:03:15,500 --> 01:03:16,520
0,60 60,180 180,510 510,630 630,1020
in the lab is basically

2045
01:03:16,520 --> 01:03:18,560
0,120 120,450 450,750 960,1410 1410,2040
to write the driver software

2046
01:03:18,560 --> 01:03:21,100
0,390 690,1020 1020,1260 1260,2010
that handle these rings.

2047
01:03:22,560 --> 01:03:23,880
0,210 210,570 570,750 750,870 870,1320
Any questions about this arrangement.

2048
01:03:29,040 --> 01:03:31,590
0,1140 1140,1440 1440,1710 1710,2130 2160,2550
Yeah, how does the UN

2049
01:03:31,590 --> 01:03:34,220
0,840 960,1590 1590,2130
thousand compare with.

2050
01:03:34,310 --> 01:03:36,080
0,210 210,900 900,1290 1290,1590 1590,1770
A production level mix that

2051
01:03:36,080 --> 01:03:36,980
0,150 150,300 300,570 570,690 690,900
may be used in high

2052
01:03:36,980 --> 01:03:39,830
0,540 540,1350 1380,1980 1980,2100 2100,2850
performance environments when the {1000,came}

2053
01:03:39,830 --> 01:03:42,260
0,300 330,450 450,930 990,1350 1380,2430
out it was the absolute

2054
01:03:42,530 --> 01:03:44,840
0,510 510,810 810,1410 2010,2190 2190,2310
best Nick available and it

2055
01:03:44,840 --> 01:03:45,830
0,420 420,510 510,720 720,840 840,990
was the neck that was

2056
01:03:45,830 --> 01:03:47,340
0,540 540,1020
used in.

2057
01:03:48,370 --> 01:03:50,230
0,510 510,840 840,1530 1560,1680 1680,1860
Serious production environments, but that

2058
01:03:50,230 --> 01:03:51,400
0,270 270,390 390,690 690,870 870,1170
was how many years ago

2059
01:03:51,460 --> 01:03:54,100
0,600 600,1170 1200,1770
modern nix 'em.

2060
01:03:54,100 --> 01:03:55,600
0,150 150,510 510,570 570,720 720,1500
Are quite a bit clever

2061
01:03:55,960 --> 01:03:57,180
0,570
the.

2062
01:03:57,300 --> 01:03:59,370
0,240 240,720 720,1320 1320,1650 1650,2070
What hasn't changed that much

2063
01:03:59,370 --> 01:04:01,380
0,180 180,450 450,960 960,1260 1260,2010
is this DNA ring structure,

2064
01:04:01,770 --> 01:04:03,720
0,180 180,630 630,1020 1020,1140 1140,1950
you're still fine that nicks

2065
01:04:03,840 --> 01:04:04,860
0,120 120,300 300,600 600,720 720,1020
to use DNA to deliver

2066
01:04:04,860 --> 01:04:06,270
0,720 720,840 840,930 930,1110 1110,1410
packets and the way they

2067
01:04:06,420 --> 01:04:07,410
0,360 360,450 450,690 690,780 780,990
find the place to deliver

2068
01:04:07,410 --> 01:04:09,870
0,90 90,600 600,870 870,1440 1650,2460
the packages by these rings

2069
01:04:09,870 --> 01:04:12,960
0,420 510,1170 1170,1710 1890,2220 2220,3090
of buffer pointers, the main

2070
01:04:12,990 --> 01:04:13,800
0,180 180,240 240,480 480,690 690,810
there's a couple things that

2071
01:04:13,800 --> 01:04:16,160
0,120 570,840 840,1350 1350,1830
are that modern mixer.

2072
01:04:16,240 --> 01:04:17,980
0,330 330,660 660,1050 1170,1470 1470,1740
More clever about, um, one

2073
01:04:17,980 --> 01:04:19,030
0,120 120,300 300,660 660,930 930,1050
is that modern next you

2074
01:04:19,030 --> 01:04:19,750
0,120 120,330 330,480 480,600 600,720
can set them up with

2075
01:04:19,750 --> 01:04:22,480
0,330 330,750 750,1680 2340,2550 2550,2730
many many ques, um, the

2076
01:04:22,480 --> 01:04:23,740
0,630 630,780 780,900 900,960 960,1260
{1000,things} just as a single

2077
01:04:23,740 --> 01:04:25,330
0,360 360,660 780,1200 1230,1470 1470,1590
receive queue, but you can

2078
01:04:25,330 --> 01:04:26,470
0,270 270,300 300,600 600,780 780,1140
tell a modern neck look

2079
01:04:26,500 --> 01:04:28,270
0,450 450,570 870,1260 1260,1560 1560,1770
you know I I want

2080
01:04:28,270 --> 01:04:29,440
0,120 120,240 240,600 600,750 750,1170
you to split my packets

2081
01:04:29,440 --> 01:04:31,270
0,120 120,450 450,900 900,1380 1380,1830
up into 32 different incoming

2082
01:04:31,270 --> 01:04:32,980
0,750 780,1050 1080,1500 1500,1620 1620,1710
cues and here's how to

2083
01:04:32,980 --> 01:04:34,840
0,720 720,840 840,1020 1020,1500 1620,1860
decide for each package look

2084
01:04:34,840 --> 01:04:35,890
0,60 60,270 270,780 780,870 870,1050
at this field and use

2085
01:04:35,890 --> 01:04:38,500
0,300 300,600 780,1620 1620,2190
that to choose which.

2086
01:04:38,560 --> 01:04:40,480
0,690 720,1170 1170,1260 1260,1710 1710,1920
Ring DNA, the packaging too,

2087
01:04:40,990 --> 01:04:42,160
0,300 300,450 450,480 480,930 930,1170
and there's a whole bunch

2088
01:04:42,160 --> 01:04:44,170
0,90 90,810 840,1290 1290,1470 1680,2010
of clever ways that people

2089
01:04:44,170 --> 01:04:45,820
0,210 210,390 390,1050 1050,1320 1410,1650
use that capability like if

2090
01:04:45,820 --> 01:04:47,290
0,90 90,180 180,570 570,870 870,1470
you have multiple virtual machines,

2091
01:04:47,290 --> 01:04:48,370
0,210 210,630 630,750 750,840 840,1080
your Amazon and you're running

2092
01:04:48,370 --> 01:04:51,250
0,540 1020,1470 1470,1830 1830,2490 2610,2880
many guest virtual machines, you

2093
01:04:51,250 --> 01:04:52,810
0,270 270,480 480,630 630,1320 1320,1560
may use that capability to

2094
01:04:52,960 --> 01:04:55,060
0,360 360,540 630,1350 1350,1560 1560,2100
sort of direct each packet

2095
01:04:55,120 --> 01:04:56,650
0,210 210,330 330,780 780,1410 1410,1530
to the queue corresponding to

2096
01:04:56,650 --> 01:04:58,600
0,120 120,480 480,1290 1590,1740 1740,1950
the virtual machine that that

2097
01:04:58,600 --> 01:04:59,800
0,360 360,480 480,600 600,840 840,1200
package should be read by.

2098
01:05:01,210 --> 01:05:02,380
0,420 420,570 570,630 630,870 870,1170
Another way in which modern

2099
01:05:02,380 --> 01:05:03,520
0,300 300,450 450,780 780,930 930,1140
mixer more clever as they

2100
01:05:03,520 --> 01:05:04,900
0,90 90,270 270,750 750,990 990,1380
'll do some of the

2101
01:05:05,230 --> 01:05:07,300
0,750 750,1290 1290,1530 1530,1650 1650,2070
tcp processing on the neck

2102
01:05:07,330 --> 01:05:10,150
0,450 690,960 1320,1650 1650,2100 2100,2820
like maybe typically checksum calculations

2103
01:05:10,150 --> 01:05:11,340
0,120 120,690
the most.

2104
01:05:11,820 --> 01:05:13,260
0,30 390,840
I think.

2105
01:05:13,620 --> 01:05:15,500
0,360 360,660 840,1230
Anyway, yeah so.

2106
01:05:16,400 --> 01:05:17,870
0,300 300,570 570,750 750,870 870,1470
Modern mixer like the {1000,,but}

2107
01:05:17,870 --> 01:05:19,420
0,420
more.

2108
01:05:20,340 --> 01:05:21,600
0,180 180,750
Okay, thanks.

2109
01:05:23,320 --> 01:05:25,390
0,420 480,960 960,1380 1770,1920 1920,2070
Oops, sorry good oh yeah

2110
01:05:25,390 --> 01:05:26,440
0,240 240,420 420,600 600,750 750,1050
I just wanted to ask

2111
01:05:26,440 --> 01:05:27,700
0,300 300,540 540,810 810,1170 1170,1260
so in our scheme in

2112
01:05:27,700 --> 01:05:29,770
0,120 120,600 690,1410 1440,1920 1920,2070
the lab, um there, there

2113
01:05:29,770 --> 01:05:30,920
0,150 150,600
is no.

2114
01:05:30,920 --> 01:05:33,110
0,540 540,870 870,1020 1020,1500 1500,2190
Q between the IP layer

2115
01:05:33,410 --> 01:05:36,200
0,210 210,300 300,1020 1110,1890 2190,2790
and the driver right, yeah

2116
01:05:36,200 --> 01:05:38,150
0,240 240,780 780,1110 1110,1440 1440,1950
there's loud network stack is

2117
01:05:39,410 --> 01:05:41,180
0,480 480,930 930,990 990,1110 1140,1770
stripped down to the absolute

2118
01:05:41,180 --> 01:05:43,550
0,450 630,1350 1350,1800 1800,1890 1890,2370
minimum a simpler in structure

2119
01:05:43,550 --> 01:05:44,990
0,150 150,240 240,600 600,1020 1020,1440
than a real networks SEC.

2120
01:05:45,720 --> 01:05:47,580
0,150 150,330 330,600 600,1440 1530,1860
But this is worse in

2121
01:05:47,580 --> 01:05:50,130
0,270 270,870 930,2130 2220,2460 2460,2550
terms of performance, oh I

2122
01:05:50,130 --> 01:05:52,260
0,180 180,480 1290,1500 1500,1950 1950,2130
don't know, I've never run

2123
01:05:52,260 --> 01:05:53,100
0,120 120,270 270,450 450,720 720,840
it in real life, I'm

2124
01:05:53,100 --> 01:05:55,980
0,570 840,1290 1320,2010 2370,2610 2610,2880
sure they've certainly we paid

2125
01:05:55,980 --> 01:05:58,410
0,540 540,960 960,1050 1050,1950 2220,2430
zero attention to performance when

2126
01:05:58,410 --> 01:05:59,910
0,300 300,690 690,1350 1350,1440 1440,1500
writing lab networks so it

2127
01:05:59,910 --> 01:06:01,230
0,120 120,240 240,810 810,900 1140,1320
would be surprising if this

2128
01:06:01,230 --> 01:06:03,480
0,690 1500,1680 1680,1980 1980,2100 2100,2250
performance but mostly it's not

2129
01:06:03,480 --> 01:06:05,040
0,30 30,300 300,360 360,870 870,1560
a question of performances limitations,

2130
01:06:05,040 --> 01:06:07,350
0,120 150,570 570,1110 1260,1980 1980,2310
it doesn't do 95% of

2131
01:06:07,350 --> 01:06:08,130
0,60 60,180 180,270 270,420 420,780
what you need network stack

2132
01:06:08,130 --> 01:06:09,640
0,270 270,360 360,600 630,1020
to do like.

2133
01:06:10,040 --> 01:06:12,380
0,180 180,510 510,870 870,1260 1260,2340
A handle multiple neck sore.

2134
01:06:13,170 --> 01:06:15,200
0,390 390,1050
FT cpe.

2135
01:06:15,320 --> 01:06:17,210
0,450 570,960 1080,1410 1410,1530 1530,1890
Right, right, okay I see,

2136
01:06:17,240 --> 01:06:18,500
0,240 240,630
thank you.

2137
01:06:20,000 --> 01:06:21,220
0,570
I'm.

2138
01:06:21,220 --> 01:06:23,460
0,360 360,630 660,960 960,1590
Um, sorry, um so.

2139
01:06:23,460 --> 01:06:24,810
0,390 390,540 540,720 720,1110 1110,1350
Um, were there any like

2140
01:06:24,810 --> 01:06:28,320
0,390 390,1050 1050,1920 2160,2820 3240,3510
hardware changes to um the

2141
01:06:28,320 --> 01:06:30,570
0,630 990,1620 1620,1740 1740,1830 1830,2250
overall system that were needed

2142
01:06:30,570 --> 01:06:32,550
0,510 510,990 990,1200 1200,1830 1860,1980
to enable like next to

2143
01:06:32,550 --> 01:06:35,010
0,300 300,870 1260,1590 1590,2250 2280,2460
have direct memory access like

2144
01:06:35,010 --> 01:06:37,110
0,60 60,150 150,510 510,1050 1530,2100
in the previous picture, um

2145
01:06:37,380 --> 01:06:38,850
0,480 480,780 780,1230 1230,1380 1380,1470
was everything mediated through the

2146
01:06:38,850 --> 01:06:41,250
0,600 600,1170 1170,1560 1620,1980 1980,2400
CPU or could nix also

2147
01:06:41,370 --> 01:06:43,410
0,510 510,660 660,990 990,1560 1800,2040
reached the battery directly in

2148
01:06:43,410 --> 01:06:44,610
0,240 240,540 540,630 630,870 870,1200
that picture I showed before

2149
01:06:44,610 --> 01:06:45,630
0,180 180,300 300,450 450,780 780,1020
now the neck doesn't reach

2150
01:06:45,630 --> 01:06:47,820
0,120 120,420 420,510 510,840
the memory at all.

2151
01:06:48,060 --> 01:06:52,050
0,630 660,1200 1800,2490 3060,3660 3660,3990
The okay, um I actually

2152
01:06:52,050 --> 01:06:53,520
0,330 330,630 630,690 690,900 930,1470
don't know, I mean the

2153
01:06:53,580 --> 01:06:55,200
0,570 600,1050 1080,1320 1320,1410 1410,1620
the um, maybe the most

2154
01:06:55,200 --> 01:06:57,000
0,390 390,900 900,1110 1110,1470 1470,1800
important question is how virtual

2155
01:06:57,000 --> 01:06:58,590
0,390 390,810 810,900 900,1230 1230,1590
memory whether and how virtual

2156
01:06:58,590 --> 01:07:01,530
0,570 870,1530 1530,2130 2160,2520 2520,2940
memory translation works when Nick

2157
01:07:01,860 --> 01:07:03,030
0,270 270,390 390,690 690,780 780,1170
wants to use an address

2158
01:07:03,030 --> 01:07:04,290
0,120 120,450 450,570 570,810 810,1260
that refers to host memory

2159
01:07:04,380 --> 01:07:06,090
0,450 780,1050 1050,1260 1260,1590 1590,1710
and I don't actually know

2160
01:07:06,090 --> 01:07:07,560
0,150 150,360 360,1140 1200,1320 1320,1470
how that works I don't

2161
01:07:07,560 --> 01:07:09,540
0,60 60,150 150,330 330,870 1560,1980
know how that works I.

2162
01:07:10,040 --> 01:07:12,800
0,30 60,780 780,1380 1380,1740 1770,2760
I suspect there's a translation

2163
01:07:12,950 --> 01:07:14,150
0,420 420,570 600,930 930,1020 1020,1200
you know Nick is really

2164
01:07:14,150 --> 01:07:16,190
0,270 270,390 390,660 780,1620 1680,2040
sitting on a bus that's

2165
01:07:16,190 --> 01:07:18,060
0,600 600,930
connected with.

2166
01:07:18,390 --> 01:07:19,380
0,150 150,270 270,450 450,630 630,990
You know through some fairly

2167
01:07:19,380 --> 01:07:21,840
0,660 660,1320 1320,1470 1470,1860 2310,2460
intelligent silicon to the to

2168
01:07:21,840 --> 01:07:23,460
0,90 90,540 540,1050 1200,1530 1530,1620
the dram system and I

2169
01:07:23,460 --> 01:07:24,540
0,270 270,360 360,660 660,990 990,1080
believe in modern machines, you

2170
01:07:24,540 --> 01:07:26,280
0,120 120,480 480,1020 1020,1380 1380,1740
can setup translation tables within

2171
01:07:26,280 --> 01:07:29,850
0,420 1440,1740 1740,2010 2010,2550 2970,3570
Nick could use virtual addresses

2172
01:07:29,850 --> 01:07:31,380
0,150 180,600 600,720 720,780 780,1530
or dresses that are translated.

2173
01:07:32,630 --> 01:07:33,920
0,420 420,570 570,930 930,1050 1050,1290
By this hardware that sits

2174
01:07:33,920 --> 01:07:35,660
0,330 330,450 450,570 570,990 1440,1740
between it and Ram, um,

2175
01:07:35,660 --> 01:07:36,350
0,150 150,270 270,360 360,480 480,690
and that could be very

2176
01:07:36,350 --> 01:07:38,500
0,510 510,630 630,780 780,1620
valuable for some situations.

2177
01:07:38,590 --> 01:07:41,480
0,450 660,1170 1170,1470 1470,2220
Um the other thing.

2178
01:07:41,780 --> 01:07:43,520
0,120 120,360 840,1440 1440,1590 1590,1740
I mean another thing that

2179
01:07:43,520 --> 01:07:44,630
0,90 90,450 450,630 630,810 810,1110
I'm aware of is that.

2180
01:07:46,340 --> 01:07:47,180
0,270 270,390 390,600 600,720 720,840
If the Nick is going

2181
01:07:47,180 --> 01:07:48,140
0,60 60,270 270,450 450,840 840,960
to write some memory or

2182
01:07:48,140 --> 01:07:49,190
0,210 210,360 360,810 810,990 990,1050
read some memory and the

2183
01:07:49,190 --> 01:07:51,530
0,360 360,540 540,1530 1680,2220 2220,2340
memory is cached on the

2184
01:07:51,530 --> 01:07:53,020
0,930
CPU.

2185
01:07:53,880 --> 01:07:54,870
0,330 330,480 480,570 570,750 750,990
You, you know you want

2186
01:07:54,870 --> 01:07:56,490
0,120 120,390 390,570 570,1140 1140,1620
the NIC to read if,

2187
01:07:56,580 --> 01:07:58,260
0,240 240,360 360,720 720,1080 1110,1680
if the software just wrote

2188
01:07:58,350 --> 01:07:59,730
0,120 120,450 450,900 900,1110 1110,1380
a packet buffer, but the

2189
01:08:00,300 --> 01:08:01,900
0,480 480,1050
CPU hasn't.

2190
01:08:01,990 --> 01:08:03,910
0,210 210,540 540,660 660,960 960,1920
The CPU is merely cashed

2191
01:08:04,480 --> 01:08:05,800
0,270 270,420 420,780 780,990 990,1320
a the right because after

2192
01:08:05,800 --> 01:08:07,960
0,450 960,1200 1200,1500 1500,1890 1890,2160
all a most memories right

2193
01:08:07,960 --> 01:08:10,840
0,690 930,1470 1890,2580 2580,2760 2760,2880
back, um that means that

2194
01:08:10,840 --> 01:08:12,340
0,150 150,600 600,1140 1140,1440 1440,1500
the real latest version of

2195
01:08:12,340 --> 01:08:13,090
0,150 150,390 390,450 450,690 690,750
that memory is sitting in

2196
01:08:13,090 --> 01:08:14,140
0,60 60,450 450,750 750,960 960,1050
the CPU cache, not in

2197
01:08:14,140 --> 01:08:15,250
0,390 390,480 480,540 540,720 720,1110
Ram and in that case,

2198
01:08:15,370 --> 01:08:16,420
0,330 330,600 600,720 720,960 960,1050
we'd like the Nick to

2199
01:08:16,420 --> 01:08:18,310
0,120 120,510 510,630 630,1140 1140,1890
be reading the CPU cache,

2200
01:08:18,370 --> 01:08:19,240
0,270 270,360 360,660 660,810 810,870
not the Ram, if it

2201
01:08:19,240 --> 01:08:22,150
0,240 240,840 1350,1770 1890,2220 2250,2910
does DNA and and certainly

2202
01:08:22,150 --> 01:08:23,590
0,90 90,420 420,900 900,1080 1080,1440
on Intel machines and probably

2203
01:08:23,590 --> 01:08:25,180
0,120 120,630 720,1110 1110,1230 1230,1590
on others there's some fairly

2204
01:08:25,180 --> 01:08:26,710
0,390 390,990 990,1170 1170,1350 1380,1530
elaborate machinery so that if

2205
01:08:26,710 --> 01:08:28,510
0,120 120,480 900,1170 1170,1320 1320,1800
the Nick read some memory,

2206
01:08:28,510 --> 01:08:30,160
0,480 480,630 630,1140 1170,1470 1470,1650
but the latest copy that

2207
01:08:30,160 --> 01:08:31,750
0,480 480,690 690,780 780,1140 1140,1590
memories in the CPU cache

2208
01:08:31,750 --> 01:08:33,160
0,420 420,510 510,960 960,1290 1290,1410
sits the CPU cache that

2209
01:08:33,160 --> 01:08:34,510
0,150 150,510 510,600 600,960 1140,1350
will produce the data and

2210
01:08:34,510 --> 01:08:35,440
0,300 300,570
not Ram.

2211
01:08:37,150 --> 01:08:39,190
0,720 1110,1530 1530,1740 1740,1980 1980,2040
Yeah yeah that's actually a

2212
01:08:39,190 --> 01:08:41,680
0,420 420,510 510,750 1470,1830 1830,2490
facility, you can some clever

2213
01:08:41,680 --> 01:08:43,180
0,480 480,900 900,1080 1080,1290 1290,1500
software uses to get high

2214
01:08:43,180 --> 01:08:45,520
0,810 1290,1590 1590,1770 1770,1980 2010,2340
performance that is to have

2215
01:08:45,520 --> 01:08:46,870
0,90 90,420 420,480 480,1050 1140,1350
the effect of having this

2216
01:08:46,870 --> 01:08:48,430
0,240 240,390 390,750 750,1200 1320,1560
happens for REITs also that

2217
01:08:48,430 --> 01:08:49,870
0,90 90,330 330,540 570,990 990,1440
the NIC will essentially directly

2218
01:08:49,870 --> 01:08:50,890
0,240 240,600 600,870 870,930 930,1020
write cache lines in the

2219
01:08:50,890 --> 01:08:53,350
0,630 1050,1410 1410,1890 1980,2130 2130,2460
cash where it's the CPU

2220
01:08:53,350 --> 01:08:54,130
0,180 180,360 360,480 480,570 570,780
can get at the data

2221
01:08:54,130 --> 01:08:55,240
0,180 180,540
very quickly.

2222
01:08:57,220 --> 01:08:59,590
0,1410 1410,1830 1830,2040 2040,2190 2190,2370
Zehr simple but their real

2223
01:08:59,590 --> 01:09:01,240
0,360 360,750
life it's.

2224
01:09:01,480 --> 01:09:02,820
0,240 240,810
Pretty involved.

2225
01:09:03,940 --> 01:09:05,640
0,270 270,690 690,1080
Other questions about.

2226
01:09:07,770 --> 01:09:09,060
0,270 270,690
About anything.

2227
01:09:12,190 --> 01:09:14,770
0,450 750,1320 2250,2400 2400,2490 2490,2580
Okay, um, I'd like to

2228
01:09:14,770 --> 01:09:16,390
0,270 270,570 570,840 840,1260 1260,1620
switch gears now to today's

2229
01:09:16,390 --> 01:09:19,360
0,570 960,1500
paper, um.

2230
01:09:19,390 --> 01:09:20,830
0,510 540,720 720,900 900,1110 1110,1440
And I'm just gonna like

2231
01:09:20,830 --> 01:09:22,480
0,450 450,600 600,990 990,1320 1320,1650
because we've already talked about

2232
01:09:22,480 --> 01:09:24,100
0,300 450,780 780,870 1350,1470 1470,1620
the sort of a lot

2233
01:09:24,100 --> 01:09:24,880
0,60 60,120 120,600 600,660 660,780
of the background of this

2234
01:09:24,880 --> 01:09:25,570
0,270 270,360 360,510 510,630 630,690
paper, I'm just going to

2235
01:09:25,570 --> 01:09:27,940
0,90 90,900 1290,1500 1500,1620 1620,2370
go directly to the first

2236
01:09:27,940 --> 01:09:32,800
0,540 690,1230 3780,4170 4200,4650 4650,4860
graph paper and essentially to

2237
01:09:32,920 --> 01:09:34,600
0,420 420,900 900,1380 1380,1560 1560,1680
drive the discussion off of

2238
01:09:34,600 --> 01:09:37,960
0,420 780,1170 1170,1740 2430,2910 3090,3360
the paper's graphs and so

2239
01:09:37,960 --> 01:09:38,770
0,90 90,150 150,420 420,600 600,810
what we're looking at here

2240
01:09:38,770 --> 01:09:40,090
0,150 150,420 450,900 900,1140 1140,1320
is the performance graph for

2241
01:09:40,090 --> 01:09:42,340
0,480 1050,1500 1590,1830 1830,1950 1950,2250
router on on the X

2242
01:09:42,340 --> 01:09:43,480
0,450 450,690 690,810 810,1020 1020,1140
axis, there's a rider with

2243
01:09:43,480 --> 01:09:45,100
0,630 630,930 930,1230 1230,1380 1380,1620
tunics, its job is to

2244
01:09:45,130 --> 01:09:46,120
0,330 330,450 450,540 540,750 750,990
tax them in one Nick

2245
01:09:46,120 --> 01:09:47,050
0,90 90,180 180,420 420,510 510,930
and it's supposed to just

2246
01:09:47,230 --> 01:09:47,980
0,270 270,360 360,480 480,570 570,750
send them out, the other

2247
01:09:47,980 --> 01:09:50,680
0,630 690,1170 1710,2130 2130,2370 2370,2700
Nick m the X axis

2248
01:09:50,680 --> 01:09:52,180
0,150 150,270 270,780 780,1260 1290,1500
is the arrival rate which

2249
01:09:52,180 --> 01:09:53,740
0,660 690,1050 1050,1110 1110,1200 1200,1560
packets arrive at the input

2250
01:09:53,740 --> 01:09:54,460
0,420
neck.

2251
01:09:55,150 --> 01:09:56,200
0,240 240,330 330,510 510,870 870,1050
And the y axis is

2252
01:09:56,200 --> 01:09:57,340
0,270 300,690 690,870 870,930 930,1140
the output rate at which

2253
01:09:57,340 --> 01:09:59,290
0,360 360,540 540,1290 1290,1440 1440,1950
packets are observed to leave

2254
01:09:59,320 --> 01:10:02,830
0,180 180,600 600,960 2190,2940 3210,3510
the output neck and a

2255
01:10:02,830 --> 01:10:03,910
0,240 240,510 510,570 570,810 810,1080
the line we care about

2256
01:10:03,910 --> 01:10:06,900
0,1020 1080,1380 1380,1830 1890,2580
is is the um.

2257
01:10:07,900 --> 01:10:09,970
0,720 720,1320 1320,1500 1500,1680 1680,2070
Filled circles which goes up

2258
01:10:10,300 --> 01:10:12,120
0,240 240,810
then down.

2259
01:10:12,180 --> 01:10:15,750
0,720 2130,2370 2370,2640 2640,2940 3120,3570
So even without knowing anything

2260
01:10:15,750 --> 01:10:16,770
0,240 240,420 420,660 660,870 870,1020
about what's going on here,

2261
01:10:16,770 --> 01:10:17,310
0,90 90,180 180,330 330,390 390,540
we can look at this

2262
01:10:17,310 --> 01:10:18,150
0,330 330,420 420,510 510,630 630,840
graph and we can ask

2263
01:10:18,150 --> 01:10:19,620
0,330 330,930 960,1260 1260,1410 1410,1470
ourselves gosh, why does it

2264
01:10:19,620 --> 01:10:20,860
0,150 150,690
go up.

2265
01:10:20,860 --> 01:10:22,000
0,120 120,240 240,330 330,420 420,1140
Why does it go down,

2266
01:10:22,180 --> 01:10:24,160
0,240 240,660 1170,1410 1410,1740 1740,1980
you know what's special about

2267
01:10:24,160 --> 01:10:26,110
0,180 180,510 510,840 840,1050 1050,1950
this point that's an inflection,

2268
01:10:26,620 --> 01:10:27,820
0,90 90,420 630,960 960,1110 1110,1200
you know what is it

2269
01:10:27,820 --> 01:10:28,810
0,120 120,480 480,600 600,930 930,990
that governs how fast it

2270
01:10:28,810 --> 01:10:29,830
0,210 210,450 450,540 540,630 630,1020
goes up or how fast

2271
01:10:29,830 --> 01:10:31,140
0,60 60,240 240,600
it goes down.

2272
01:10:32,760 --> 01:10:33,930
0,120 120,300 300,420 420,690 690,1170
So even with zero knowledge,

2273
01:10:33,930 --> 01:10:34,770
0,180 300,600 600,660 660,750 750,840
we kind of have a

2274
01:10:34,770 --> 01:10:36,090
0,210 210,510 510,720 720,870 870,1320
good clue about what questions

2275
01:10:36,090 --> 01:10:37,530
0,120 120,690 990,1200 1200,1320 1320,1440
to ask, so why does

2276
01:10:37,530 --> 01:10:38,540
0,60 60,210 210,570
it go up.

2277
01:10:41,540 --> 01:10:42,500
0,120 120,210 210,360 360,630 630,960
Why did they ask about.

2278
01:10:48,510 --> 01:10:49,170
0,150 150,270 270,300 300,480 480,660
It's not a very deep

2279
01:10:49,170 --> 01:10:50,160
0,420
question.

2280
01:10:54,170 --> 01:10:55,670
0,330 330,510 510,870 960,1380 1380,1500
They go up sorry, go

2281
01:10:55,670 --> 01:10:57,470
0,300 630,1050 1230,1410 1410,1650 1650,1800
ahead, oh I guess when

2282
01:10:57,470 --> 01:10:58,680
0,300 300,630
they're like.

2283
01:10:58,680 --> 01:11:00,960
0,360 360,480 480,660 660,1740 2070,2280
Until it gets saturated, you

2284
01:11:00,960 --> 01:11:03,960
0,390 540,1560 1560,1920 1920,2250 2250,3000
can process more input packages

2285
01:11:04,230 --> 01:11:06,180
0,420 420,780 780,900 900,1200 1200,1950
and produce more output packages

2286
01:11:06,330 --> 01:11:08,490
0,930 960,1530 1530,1830 1830,2100 2100,2160
absolutely until something starts to

2287
01:11:08,490 --> 01:11:10,860
0,150 150,720 1680,1890 1890,2070 2070,2370
go wrong for every packet

2288
01:11:10,860 --> 01:11:11,700
0,90 90,300 300,510 510,600 600,840
that comes in the batter

2289
01:11:11,700 --> 01:11:13,290
0,180 180,540 540,630 630,1050 1110,1590
just forwards it out so

2290
01:11:13,650 --> 01:11:14,700
0,120 120,360 420,720 720,930 930,1050
you know until things go

2291
01:11:14,700 --> 01:11:16,140
0,270 270,390 390,840 840,1320 1320,1440
wrong, if packets arrive at

2292
01:11:16,140 --> 01:11:17,610
0,810 810,900 900,1230 1230,1410 1410,1470
{2000,packets,} a second, well it

2293
01:11:17,610 --> 01:11:18,960
0,180 180,570 570,780 780,1050 1050,1350
just copies every input packet

2294
01:11:18,960 --> 01:11:19,800
0,60 60,180 180,570 570,690 690,840
to the output and that

2295
01:11:19,800 --> 01:11:21,240
0,390 390,630 720,960 960,1290 1290,1440
means that the output rate

2296
01:11:21,240 --> 01:11:22,110
0,120 120,270 300,660 660,750 750,870
is just equal to the

2297
01:11:22,110 --> 01:11:23,180
0,360 360,630
input rate.

2298
01:11:23,180 --> 01:11:23,960
0,180 180,330 330,390 390,540 540,780
So this is just y

2299
01:11:23,960 --> 01:11:25,640
0,330 330,1200
equals ax.

2300
01:11:25,890 --> 01:11:27,300
0,360 360,600 600,900 900,1200 1200,1410
Because every input packet gets

2301
01:11:27,300 --> 01:11:28,230
0,240 240,510 510,600 600,720 720,930
sent out so it's y

2302
01:11:28,230 --> 01:11:29,980
0,300 300,750 750,1200
equals extra while.

2303
01:11:30,130 --> 01:11:30,820
0,240 240,360 360,480 480,600 600,690
And so why does it

2304
01:11:30,820 --> 01:11:32,580
0,630 630,900 900,1140
stop going up.

2305
01:11:39,620 --> 01:11:41,600
0,360 360,570 570,1200 1350,1740 1740,1980
Isn't this the one thing

2306
01:11:41,600 --> 01:11:42,590
0,120 120,480 480,570 570,660 660,990
they mentioned in the paper

2307
01:11:42,590 --> 01:11:46,200
0,600 1890,3030
about the.

2308
01:11:47,000 --> 01:11:49,940
0,300 300,870 870,1860 1920,2580 2580,2940
They're being interrupts that can't

2309
01:11:49,940 --> 01:11:52,130
0,420 420,1200 1200,1470 1470,1620 1620,2190
be processed at the necessary

2310
01:11:52,130 --> 01:11:53,930
0,390 810,1380 1380,1500 1500,1710 1710,1800
rate that's the answer to

2311
01:11:53,930 --> 01:11:55,220
0,60 60,690
the question.

2312
01:11:55,220 --> 01:11:56,390
0,210 210,360 360,420 420,510 510,1170
Why does it go down.

2313
01:11:58,600 --> 01:11:59,590
0,150 150,420 420,510 510,810 810,990
My question is why does

2314
01:11:59,590 --> 01:12:01,930
0,480 510,1140 1140,1410 1410,1890 1980,2340
it stop going up, what

2315
01:12:01,930 --> 01:12:02,860
0,180 180,360 360,540 540,720 720,930
is it that could this

2316
01:12:02,860 --> 01:12:04,000
0,300 300,390 390,480 480,720 720,1140
line in a well designed

2317
01:12:04,000 --> 01:12:05,320
0,420 450,870 870,990 990,1110 1110,1320
system supposing that they hadn't

2318
01:12:05,320 --> 01:12:06,920
0,240 240,390 390,450 450,990
messed up the design.

2319
01:12:07,140 --> 01:12:08,190
0,420 450,630 630,720 720,930 930,1050
Right, you and I would

2320
01:12:08,190 --> 01:12:09,210
0,270 270,330 330,660 660,780 780,1020
design a system that didn't

2321
01:12:09,210 --> 01:12:11,940
0,210 210,1050 1140,1680 1830,2250 2250,2730
have problems right, would our

2322
01:12:11,940 --> 01:12:13,320
0,540 570,780 780,870 870,1170 1170,1380
system with the line, just

2323
01:12:13,320 --> 01:12:14,640
0,180 180,450 450,690
keep going up.

2324
01:12:18,720 --> 01:12:21,000
0,510 510,840 840,1260 1260,2160 2160,2280
I guess not because at

2325
01:12:21,000 --> 01:12:23,640
0,270 270,1050 1050,1680 2100,2550 2550,2640
some point the rate at

2326
01:12:23,640 --> 01:12:25,360
0,480 480,1260
which packets.

2327
01:12:25,530 --> 01:12:27,260
0,540 540,1230
Come will.

2328
01:12:27,590 --> 01:12:28,780
0,630
I'm.

2329
01:12:28,980 --> 01:12:31,560
0,750 750,1020 1020,1260 1260,1830 1830,2580
If you can process packets

2330
01:12:31,860 --> 01:12:34,080
0,390 390,810 810,1350 1380,1920 1920,2220
fast enough, then at some

2331
01:12:34,080 --> 01:12:37,620
0,690 1080,1800 2130,2610 2730,3420 3420,3540
point I'm the bottleneck will

2332
01:12:37,620 --> 01:12:38,370
0,120 120,240 240,450 450,540 540,750
be the rate at which

2333
01:12:38,370 --> 01:12:41,130
0,390 390,930 1560,2070 2070,2340 2340,2760
packets arrived that's right, this

2334
01:12:41,130 --> 01:12:42,450
0,420 420,540 540,810 810,990 990,1320
system we're talking about has

2335
01:12:42,480 --> 01:12:44,520
0,210 210,930 1080,1440 1440,1500 1500,2040
has some sort of limits

2336
01:12:44,520 --> 01:12:45,720
0,270 480,660 660,960 960,1020 1020,1200
not the CPU is not

2337
01:12:45,750 --> 01:12:48,570
0,540 540,1080 1080,1440 1440,2250 2430,2820
infinitely fast CPU executes, however

2338
01:12:48,570 --> 01:12:49,830
0,150 150,690 690,780 780,1140 1140,1260
many instructions per second and

2339
01:12:49,830 --> 01:12:51,750
0,150 150,540 810,1260 1410,1800 1800,1920
no more so usually these

2340
01:12:51,750 --> 01:12:53,220
0,300 300,570 570,660 660,780 780,1470
packets has to be processed,

2341
01:12:53,220 --> 01:12:54,630
0,150 150,630 630,1170 1170,1320 1320,1410
the IP software has to

2342
01:12:54,630 --> 01:12:55,650
0,180 180,270 270,330 330,870 870,1020
look at the header and

2343
01:12:55,650 --> 01:12:57,090
0,240 240,360 360,720 720,1170 1170,1440
check the checks on and

2344
01:12:57,090 --> 01:12:58,800
0,240 240,420 420,720 750,1290 1290,1710
look up the destination addresses

2345
01:12:58,800 --> 01:13:00,030
0,120 120,390 390,720 720,810 810,1230
and table whatever it takes

2346
01:13:00,060 --> 01:13:01,590
0,510 510,570 570,1050 1050,1140 1140,1530
hundreds or thousands of CPU

2347
01:13:01,590 --> 01:13:04,460
0,480 480,870 870,1470
cycles per packet.

2348
01:13:04,810 --> 01:13:06,370
0,390 450,840 870,1020 1020,1290 1290,1560
And so we can never

2349
01:13:06,370 --> 01:13:07,630
0,300 300,720 720,870 870,1170 1170,1260
never expect these lines to

2350
01:13:07,630 --> 01:13:08,500
0,120 120,270 270,360 360,750 750,870
go up and definitely they

2351
01:13:08,500 --> 01:13:11,890
0,240 240,570 570,1140 2160,2550 2940,3390
must stop somewhere right and

2352
01:13:11,980 --> 01:13:13,120
0,300 300,540 570,780 780,840 840,1140
we can sort of tell

2353
01:13:13,120 --> 01:13:14,290
0,330 570,690 690,780 780,930 930,1170
what we can make some

2354
01:13:14,290 --> 01:13:15,640
0,690 690,840 840,990 990,1260 1260,1350
guesses on this system that

2355
01:13:15,640 --> 01:13:16,960
0,180 180,270 270,360 360,1140 1140,1320
goes up to {5000,and} no

2356
01:13:16,960 --> 01:13:18,880
0,510 840,1260 1350,1560 1560,1710 1710,1920
more, um, and what that

2357
01:13:18,880 --> 01:13:20,140
0,780
basically.

2358
01:13:20,290 --> 01:13:21,640
0,630 630,810 810,1080 1080,1200 1200,1350
Suggests to us is that

2359
01:13:21,640 --> 01:13:23,230
0,60 60,210 210,480 480,1170 1170,1590
it takes about {200,micro} seconds

2360
01:13:23,230 --> 01:13:24,880
0,150 150,390 390,900 900,1140 1200,1650
on this computer to process

2361
01:13:24,880 --> 01:13:26,080
0,180 180,690
each packet.

2362
01:13:26,360 --> 01:13:28,220
0,180 180,420 420,660 840,1380 1380,1860
Right, that's what this point,

2363
01:13:28,220 --> 01:13:29,600
0,120 540,840 840,930 930,990 990,1380
the fact that the inflection

2364
01:13:29,600 --> 01:13:31,610
0,210 210,300 300,510 510,930 930,2010
point is here means suggests

2365
01:13:31,640 --> 01:13:32,570
0,150 150,240 240,570 570,870 870,930
that the total cost of

2366
01:13:32,570 --> 01:13:34,820
0,420 420,750 750,840 840,1320 1710,2250
processing package is around {200,micro}

2367
01:13:34,820 --> 01:13:36,780
0,360 360,780 780,1140
seconds CPU time.

2368
01:13:37,510 --> 01:13:39,340
0,120 120,240 240,660 660,900 1650,1830
It's a guess but it's

2369
01:13:39,340 --> 01:13:40,150
0,300 300,360 360,450 450,690 690,810
likely to be close to

2370
01:13:40,150 --> 01:13:41,470
0,480 570,780 780,840 840,1110 1110,1320
correct and so there's no

2371
01:13:41,470 --> 01:13:42,340
0,300 300,420 420,540 540,750 810,870
way we could get you

2372
01:13:42,340 --> 01:13:43,060
0,120 120,390 390,480 480,600 600,720
know maybe we could make

2373
01:13:43,060 --> 01:13:43,960
0,90 90,450 450,480 480,690 690,900
the software a little more

2374
01:13:43,960 --> 01:13:45,460
0,510 510,660 660,840 840,1230 1230,1500
efficiently, we could reduce that

2375
01:13:45,460 --> 01:13:47,260
0,240 300,1080 1080,1380 1380,1680 1680,1800
to 150 micro seconds per

2376
01:13:47,260 --> 01:13:49,090
0,480 480,540 540,1110 1110,1320 1590,1830
packet or something, and so

2377
01:13:49,090 --> 01:13:49,810
0,240 240,330 330,480 480,630 630,720
maybe we could move the

2378
01:13:49,810 --> 01:13:51,040
0,450 450,660 660,810 810,870 870,1230
inflection point up a bit

2379
01:13:51,070 --> 01:13:53,110
0,270 420,630 630,900 900,1440 1440,2040
but were certainly faced with.

2380
01:13:53,540 --> 01:13:55,160
0,450 450,870 870,930 930,1380 1410,1620
Some point at which well

2381
01:13:55,160 --> 01:13:57,080
0,270 270,510 510,630 630,1080 1080,1920
that's just how many packets

2382
01:13:57,200 --> 01:13:58,670
0,150 150,330 330,660 660,810 810,1470
of this system can process.

2383
01:14:00,760 --> 01:14:02,100
0,480
Now.

2384
01:14:02,250 --> 01:14:03,420
0,510
I'm.

2385
01:14:03,570 --> 01:14:05,130
0,180 180,360 360,1080 1080,1320 1320,1560
That's not necessarily what's going

2386
01:14:05,130 --> 01:14:06,330
0,210 210,540 570,750 750,1110 1110,1200
on here, it happens to

2387
01:14:06,330 --> 01:14:07,200
0,90 90,270 270,510 510,690 690,870
be what's going on here,

2388
01:14:07,200 --> 01:14:08,670
0,120 120,750 750,1050 1080,1380 1380,1470
but it's not written in

2389
01:14:08,670 --> 01:14:11,980
0,630 1470,1710 1710,2190 2220,2760
stone, in fact the.

2390
01:14:11,980 --> 01:14:13,600
0,360 360,660 660,1140 1140,1260 1260,1620
There's other bottlenecks that could

2391
01:14:13,600 --> 01:14:15,430
0,510 540,720 720,1080 1140,1440 1440,1830
be the limit other than

2392
01:14:15,670 --> 01:14:16,840
0,120 120,540 540,780 780,960 960,1170
a CPU time, which are

2393
01:14:16,870 --> 01:14:18,760
0,210 210,810 960,1200 1200,1440 1440,1890
worth considering the most obvious

2394
01:14:18,760 --> 01:14:19,570
0,150 150,240 240,660 660,720 720,810
is the speed of the

2395
01:14:19,570 --> 01:14:20,650
0,450 450,540 540,840 840,960 960,1080
network, the network they were

2396
01:14:20,650 --> 01:14:21,850
0,300 300,540 540,630 630,930 930,1200
using ran at only ten

2397
01:14:21,850 --> 01:14:23,260
0,480 480,570 570,960 960,1140 1140,1410
megabits per second that's just

2398
01:14:23,260 --> 01:14:24,940
0,150 150,720 720,930
how fast the.

2399
01:14:25,090 --> 01:14:26,640
0,390 390,510 510,930
Those are all.

2400
01:14:27,120 --> 01:14:29,790
0,600 600,1290 1350,1650 1650,2280 2520,2670
Networking hardware set bits and

2401
01:14:29,790 --> 01:14:31,110
0,120 120,240 240,570 570,1140 1140,1320
so can never transmit more

2402
01:14:31,110 --> 01:14:32,490
0,120 120,300 300,690 690,900 900,1380
than ten thousand ten million.

2403
01:14:33,040 --> 01:14:35,640
0,360 360,450 450,1020 1500,2010
Bits per second, um.

2404
01:14:35,730 --> 01:14:36,930
0,150 150,420 540,810 810,930 930,1200
And so that may also

2405
01:14:36,930 --> 01:14:38,100
0,510 510,570 570,900 960,1080 1080,1170
constitute a limit and so

2406
01:14:38,100 --> 01:14:39,390
0,90 90,450 450,660 660,1080 1080,1290
we're thinking about whether maybe

2407
01:14:39,390 --> 01:14:41,160
0,270 270,630 630,840 840,1560 1590,1770
that's actually what's determining this

2408
01:14:41,160 --> 01:14:43,280
0,720
5000.

2409
01:14:44,260 --> 01:14:45,320
0,420
HMMM.

2410
01:14:45,590 --> 01:14:46,550
0,150 150,330 330,630 630,720 720,960
I don't act the paper

2411
01:14:46,550 --> 01:14:47,930
0,180 180,510 510,840 840,1290 1290,1380
doesn't quite say enough to

2412
01:14:47,930 --> 01:14:49,610
0,450 690,960 960,1110 1110,1560 1560,1680
know whether it's whether it's

2413
01:14:49,610 --> 01:14:51,170
0,570 570,720 720,840 840,1230 1380,1560
CPU or the Nick is

2414
01:14:51,170 --> 01:14:53,180
0,120 120,420 420,810 810,1200 1740,2010
the limiting factor here, but

2415
01:14:53,180 --> 01:14:54,560
0,90 90,420 420,570 570,990 1020,1380
the fact is with with

2416
01:14:54,560 --> 01:14:57,350
0,540 660,990 990,1410 1410,1950 2610,2790
their ten megabit network, if

2417
01:14:57,350 --> 01:14:59,840
0,180 180,720 720,1080 1080,1770 2160,2490
you send small packets, um,

2418
01:14:59,840 --> 01:15:02,360
0,180 390,900 1140,1470 1470,1920 1920,2520
it's the ten megabits translates

2419
01:15:02,360 --> 01:15:03,500
0,180 180,570 570,840 840,1080 1080,1140
into something like ten or

2420
01:15:03,500 --> 01:15:05,720
0,1230 1230,1350 1350,1710
{15,000,packets} per second.

2421
01:15:05,780 --> 01:15:07,040
0,300 300,450 450,810 810,1020 1020,1260
That's the limit that the

2422
01:15:07,550 --> 01:15:10,280
0,840 840,1590 2070,2310 2310,2490 2490,2730
networking cable puts on the

2423
01:15:10,490 --> 01:15:12,620
0,630 1050,1560 1620,1860 1860,1950 1950,2130
input rate and so this

2424
01:15:12,620 --> 01:15:14,760
0,120 120,540 540,1140 1140,1560
is well under a.

2425
01:15:15,050 --> 01:15:16,850
0,360 390,660 660,720 720,1710 1710,1800
The ten or {15,000,packets} per

2426
01:15:16,850 --> 01:15:17,930
0,360 360,480 480,570 570,960 960,1080
second that the network is

2427
01:15:17,930 --> 01:15:19,280
0,450 450,570 570,720 720,1050 1050,1350
capable of, so almost certainly

2428
01:15:19,280 --> 01:15:20,030
0,150 150,360 360,540 540,630 630,750
the limit has to do

2429
01:15:20,030 --> 01:15:21,830
0,270 420,1230 1230,1320 1320,1740 1740,1800
with CPU or memory or

2430
01:15:21,830 --> 01:15:23,580
0,330 330,450 450,690 690,1110
something and not die.

2431
01:15:23,780 --> 01:15:25,360
0,270 270,330 330,630 630,1080
Not the network itself.

2432
01:15:26,400 --> 01:15:29,220
0,570
Okay.

2433
01:15:30,050 --> 01:15:31,580
0,240 240,420 420,720 720,840 840,1530
What we'd love to see

2434
01:15:31,730 --> 01:15:33,020
0,180 180,360 360,570 570,870 870,1290
in a well designed router

2435
01:15:33,020 --> 01:15:35,990
0,180 180,540 1770,2100 2100,2400 2400,2970
is that it can actually

2436
01:15:35,990 --> 01:15:37,340
0,150 150,270 270,420 420,690 690,1350
you know it takes {200,micro}

2437
01:15:37,340 --> 01:15:38,570
0,330 330,450 450,720 720,780 780,1230
seconds to forward the packet

2438
01:15:38,660 --> 01:15:39,950
0,150 150,510 510,570 570,930 960,1290
to process a packet, what

2439
01:15:39,950 --> 01:15:40,700
0,120 120,300 300,390 390,630 630,750
we'd like to see is

2440
01:15:40,700 --> 01:15:41,660
0,150 150,240 240,570 570,690 690,960
that the thing the router

2441
01:15:41,660 --> 01:15:43,610
0,90 90,360 360,960 960,1860 1860,1950
can actually forward {5000,packets} per

2442
01:15:43,610 --> 01:15:45,170
0,540 600,840 840,1050 1050,1350 1350,1560
second no matter what, even

2443
01:15:45,170 --> 01:15:46,070
0,90 90,180 180,450 450,570 570,900
if the load is high,

2444
01:15:46,220 --> 01:15:47,720
0,240 240,540 540,1050 1050,1380 1380,1500
so what we'd like to

2445
01:15:47,720 --> 01:15:50,270
0,720 750,900 900,1530 1560,2040 2040,2550
succeed, is this line here.

2446
01:15:51,240 --> 01:15:53,280
0,450 810,1080 1080,1410
Um, there's a.

2447
01:15:53,310 --> 01:15:54,540
0,420 420,540 540,870 870,960 960,1230
Output rate matches the input

2448
01:15:54,540 --> 01:15:55,410
0,210 210,450 450,600 600,780 780,870
rate until you get up

2449
01:15:55,410 --> 01:15:56,760
0,120 120,330 330,1020 1020,1140 1140,1350
to the capacity of the

2450
01:15:56,760 --> 01:15:59,400
0,690 1320,1470 1470,1740 1770,2550 2550,2640
system, you know {5000,packets} per

2451
01:15:59,400 --> 01:16:00,210
0,270 270,360 360,510 510,630 630,810
second and then it just

2452
01:16:00,210 --> 01:16:02,460
0,390 390,690 960,1320 1320,2160 2160,2250
continues to forward {5000,packets} per

2453
01:16:02,460 --> 01:16:04,920
0,390 390,750 840,1350 1350,1950 1950,2460
second and presumably drops discards

2454
01:16:04,920 --> 01:16:07,020
0,90 90,630
the rest.

2455
01:16:08,540 --> 01:16:09,980
0,180 180,360 360,600 1050,1320 1320,1440
So this is what we'd

2456
01:16:09,980 --> 01:16:11,060
0,180 180,270 270,810 810,930 930,1080
like to design, but what

2457
01:16:11,060 --> 01:16:12,230
0,270 270,480 480,570 570,900 900,1170
actually happened is much worse

2458
01:16:12,230 --> 01:16:13,700
0,120 120,480 810,1170 1170,1350 1350,1470
than that, um as you

2459
01:16:13,700 --> 01:16:16,340
0,420 420,510 510,780 780,1080 1080,2640
increase the rate beyond {5000,,the}

2460
01:16:16,340 --> 01:16:17,570
0,360 360,420 420,750 750,900 900,1230
number of packets that manages

2461
01:16:17,570 --> 01:16:18,650
0,90 90,450 450,600 600,810 810,1080
the forward goes down towards

2462
01:16:18,650 --> 01:16:19,620
0,390
zero.

2463
01:16:20,790 --> 01:16:21,510
0,180 180,300 300,390 390,540 540,720
So why is this line

2464
01:16:21,510 --> 01:16:23,160
0,90 90,570 840,1200 1200,1500 1500,1650
go down somebody mentioned this

2465
01:16:23,160 --> 01:16:24,200
0,450
before.

2466
01:16:35,220 --> 01:16:36,340
0,240 240,540
Well, duh.

2467
01:16:36,340 --> 01:16:37,940
0,330 330,660 720,990
There's a um.

2468
01:16:38,200 --> 01:16:40,750
0,330 330,450 450,570 570,1350 2250,2550
Reason that the authors figured

2469
01:16:40,750 --> 01:16:42,310
0,270 270,450 450,780 840,1410 1410,1560
out is that as you

2470
01:16:42,310 --> 01:16:43,480
0,300 300,420 420,780 780,1020 1020,1170
increase the input rate, each

2471
01:16:43,480 --> 01:16:45,160
0,90 90,360 360,720 720,1260 1260,1680
of these input packets generates

2472
01:16:45,160 --> 01:16:46,640
0,150 180,990
an interrupt.

2473
01:16:47,300 --> 01:16:49,160
0,450 540,780 780,1380 1380,1590 1590,1860
And the interrupts, take time

2474
01:16:49,160 --> 01:16:50,270
0,240 240,360 360,480 480,810 810,1110
actually on their system interrupts

2475
01:16:50,270 --> 01:16:51,440
0,60 60,270 270,810 810,1050 1050,1170
are quite expensive because they

2476
01:16:51,440 --> 01:16:53,870
0,660 1020,1350 1530,1980 1980,2070 2070,2430
involve a copying a package

2477
01:16:53,900 --> 01:16:55,160
0,360 360,450 450,570 570,840 840,1260
off of the network interface

2478
01:16:55,160 --> 01:16:56,630
0,480 510,690 690,900 900,1080 1080,1470
card and into main memory

2479
01:16:56,630 --> 01:16:57,650
0,270 300,450 450,480 480,720 720,1020
which took a long time,

2480
01:16:57,650 --> 01:16:58,790
0,180 180,270 270,690 690,840 840,1140
because the CPU was doing,

2481
01:16:59,420 --> 01:17:01,430
0,210 210,480 510,1020 1290,1590 1740,2010
um, so each, so we

2482
01:17:01,430 --> 01:17:02,810
0,360 360,540 540,960 960,1260 1260,1380
know with packages arriving at

2483
01:17:02,810 --> 01:17:04,100
0,510 510,750 750,840 840,1080 1080,1290
{10,000,per} second, we certainly can't

2484
01:17:04,100 --> 01:17:06,740
0,330 330,1530 1710,2040 2040,2460 2490,2640
forward {10,000,and} that means the

2485
01:17:06,740 --> 01:17:07,640
0,300 300,360 360,480 480,690 690,900
best we can hope for

2486
01:17:07,640 --> 01:17:09,440
0,120 120,210 210,630 630,930 930,1800
is to forward {5000,and -}

2487
01:17:09,470 --> 01:17:11,330
0,390 390,1230 1260,1410 1410,1620 1620,1860
simply discard the {other,5000, -}

2488
01:17:11,330 --> 01:17:13,670
0,570 570,690 690,1320 1500,2010 2010,2340
but in fact {the,extra} 5000

2489
01:17:13,670 --> 01:17:16,460
0,1020 1020,1290 1290,1830 1890,2220 2220,2790
packets, each generated very expensive

2490
01:17:16,460 --> 01:17:18,740
0,540 1230,1440 1440,1620 1620,1800 1800,2280
interrupt, so for each additional

2491
01:17:18,740 --> 01:17:21,380
0,360 360,570 570,1530 1530,2190
{packet,over} 5000 per second.

2492
01:17:21,440 --> 01:17:22,820
0,150 150,360 360,780 780,1260 1260,1380
Um, we're generating more and

2493
01:17:22,820 --> 01:17:24,560
0,240 240,810 810,1380 1380,1560 1560,1740
more expensive interrupts which have

2494
01:17:24,560 --> 01:17:26,630
0,870 900,1080 1080,1560 1560,1800 1800,2070
priority like interrupts boy whatever

2495
01:17:26,630 --> 01:17:28,460
0,90 90,540 720,990 990,1740 1740,1830
you're doing it stops the

2496
01:17:28,460 --> 01:17:30,120
0,300 300,540 540,600 600,1170
machine takes the interrupt.

2497
01:17:32,170 --> 01:17:33,850
0,510 510,600 600,960 960,1080 1080,1680
Because the machine is essentially

2498
01:17:33,850 --> 01:17:35,680
0,240 240,750 750,960 960,1530 1560,1830
giving priority these interrupts that

2499
01:17:35,680 --> 01:17:37,120
0,210 210,600 600,990 990,1350 1350,1440
means every additional packet per

2500
01:17:37,120 --> 01:17:39,130
0,600 690,930 930,1320 1320,1770 1770,2010
second is taking CPU time

2501
01:17:39,130 --> 01:17:41,770
0,660 660,1350 1710,1980 1980,2130 2130,2640
away from a the forwarding

2502
01:17:41,770 --> 01:17:42,880
0,570
code.

2503
01:17:42,880 --> 01:17:43,800
0,360
Yeah.

2504
01:17:43,890 --> 01:17:45,330
0,480 480,810 810,1110 1110,1380 1380,1440
Until finally {100% -} of

2505
01:17:45,330 --> 01:17:46,320
0,90 90,420 420,660 660,750 750,990
the CPU time is used

2506
01:17:46,320 --> 01:17:47,460
0,180 210,360 360,450 450,780 780,1140
up in the input interrupt

2507
01:17:47,460 --> 01:17:49,440
0,420 510,900 900,1140 1140,1620 1620,1980
routine and no CPU time

2508
01:17:49,440 --> 01:17:51,600
0,120 120,720 1290,1560 1560,1650 1650,2160
is used in the thread

2509
01:17:51,600 --> 01:17:53,080
0,240
that.

2510
01:17:53,080 --> 01:17:54,600
0,330 330,930
Forwards packets.

2511
01:17:56,730 --> 01:17:57,870
0,120 120,360 360,750 750,840 840,1140
Is everyone happy with this

2512
01:17:57,870 --> 01:17:59,100
0,600
explanation.

2513
01:18:02,690 --> 01:18:05,570
0,180 180,420 420,780 780,1470 2220,2880
And this going down, um.

2514
01:18:07,060 --> 01:18:09,580
0,180 180,900 1230,1680 1680,1920 1920,2520
It's called interrupt live lock.

2515
01:18:11,660 --> 01:18:12,860
0,150 150,390 390,540 870,1050 1050,1200
The fact that this line

2516
01:18:12,860 --> 01:18:14,210
0,150 150,690 720,990 990,1050 1050,1350
goes down instead of saying

2517
01:18:14,240 --> 01:18:15,830
0,270 270,540 540,780 780,1050 1050,1590
string flags what people mean

2518
01:18:15,830 --> 01:18:18,860
0,390 600,1140 1140,1290 1290,1740 2790,3030
by interrupt live block and

2519
01:18:18,860 --> 01:18:20,750
0,510 510,870 870,990 990,1710 1710,1890
it's actually a phenomenon that

2520
01:18:20,750 --> 01:18:23,120
0,990 1290,1740
occurs, um.

2521
01:18:23,180 --> 01:18:25,850
0,180 180,480 480,1440 1830,2160 2400,2670
In many systems, I mean

2522
01:18:25,850 --> 01:18:26,810
0,180 180,570 570,630 630,780 780,960
the sort of thing that's

2523
01:18:26,810 --> 01:18:27,800
0,360 360,480 480,600 600,750 750,990
driving it is that there's

2524
01:18:27,800 --> 01:18:30,050
0,180 180,690 690,1620 1830,2010 2010,2250
two separate tasks like the

2525
01:18:30,110 --> 01:18:31,580
0,420 420,720 720,1290 1290,1380 1380,1470
input interrupt task and the

2526
01:18:31,580 --> 01:18:33,170
0,480 480,1080 1110,1260 1260,1470 1470,1590
forwarding task, and because of

2527
01:18:33,170 --> 01:18:36,960
0,90 90,1230 1410,2340
a scheduling problem.

2528
01:18:37,230 --> 01:18:39,150
0,420 450,1050 1050,1590 1590,1680 1680,1920
A essentially priority is given

2529
01:18:39,150 --> 01:18:40,320
0,90 90,210 210,570 570,990 990,1170
to the input task, which

2530
01:18:40,320 --> 01:18:43,320
0,120 120,990 1170,1470 1920,2460 2460,3000
can starve a packet processing

2531
01:18:43,320 --> 01:18:45,030
0,480 750,930 930,1140 1140,1350 1380,1710
task in pretty much any

2532
01:18:45,030 --> 01:18:48,270
0,630 960,1140 1140,1620 1680,2730 2730,3240
system that has multiple independent

2533
01:18:48,270 --> 01:18:50,280
0,930 1050,1290 1290,1470 1470,1530 1530,2010
tasks or sort of sequence

2534
01:18:50,280 --> 01:18:51,660
0,90 90,510 510,1110 1110,1230 1230,1380
of independent tasks that need

2535
01:18:51,660 --> 01:18:52,440
0,90 90,180 180,510 510,630 630,780
to be done to each

2536
01:18:52,440 --> 01:18:53,790
0,510 630,960 960,1050 1050,1200 1200,1350
input and in which the

2537
01:18:53,790 --> 01:18:55,620
0,450 450,750 870,1200 1200,1710 1710,1830
input rate can't necessarily be

2538
01:18:55,620 --> 01:18:56,740
0,690
controlled.

2539
01:18:56,800 --> 01:18:58,300
0,390 390,780 780,930 930,1200 1320,1500
Many systems like that will

2540
01:18:58,300 --> 01:18:59,830
0,510 510,930 930,1170 1170,1440 1440,1530
exhibit exhibit live lock, if

2541
01:18:59,830 --> 01:19:00,940
0,120 120,330 330,450 450,600 600,1110
you push them too hard.

2542
01:19:01,540 --> 01:19:02,540
0,510
I'm.

2543
01:19:03,220 --> 01:19:04,120
0,270 270,360 360,450 450,630 630,900
And you can get live

2544
01:19:04,120 --> 01:19:06,430
0,420 1110,1440 1440,1500 1500,1770 1770,2310
lock due to many resources

2545
01:19:06,430 --> 01:19:07,600
0,210 210,390 390,810 810,1020 1020,1170
not just CPU, but it

2546
01:19:07,600 --> 01:19:09,130
0,240 240,480 480,780 870,1230 1230,1530
could be that the nec

2547
01:19:09,130 --> 01:19:10,900
0,90 90,300 330,900 900,1080 1080,1770
you know Nick die maize

2548
01:19:11,530 --> 01:19:13,570
0,450 450,870 900,1350 1350,1950 1950,2040
uses up Ram cycles to

2549
01:19:13,570 --> 01:19:14,980
0,120 120,240 240,690 690,1080 1170,1410
do the {DNA's -} and

2550
01:19:14,980 --> 01:19:16,180
0,60 60,180 180,630 660,930 930,1200
if the NIC is using

2551
01:19:16,180 --> 01:19:17,530
0,90 90,540 570,660 660,1050 1050,1350
the Ram, the CPU can't

2552
01:19:17,530 --> 01:19:18,640
0,150 150,240 240,570 630,840 840,1110
use the Ram so another

2553
01:19:18,640 --> 01:19:19,930
0,270 270,360 360,570 570,870 870,1290
way to get live lock,

2554
01:19:20,020 --> 01:19:20,980
0,330 330,450 450,540 540,660 660,960
even if you have lots

2555
01:19:20,980 --> 01:19:22,780
0,60 60,480 480,900 1200,1500 1500,1800
of CPU time, you know

2556
01:19:22,870 --> 01:19:24,190
0,360 390,630 630,960 960,1050 1050,1320
some other design, you might

2557
01:19:24,190 --> 01:19:26,050
0,480 480,720 720,840 840,1290 1560,1860
live because the neck is

2558
01:19:26,050 --> 01:19:27,220
0,360 360,720
using up.

2559
01:19:29,120 --> 01:19:31,550
0,390 420,870 870,1410 1410,1860 1860,2430
A Ram resources Ram performance

2560
01:19:31,550 --> 01:19:33,440
0,480 480,600 600,690 690,1200 1650,1890
resources, so the CPU was

2561
01:19:33,440 --> 01:19:34,250
0,240 240,450 450,540 540,720 720,810
less able to use the

2562
01:19:34,250 --> 01:19:37,100
0,390 1860,2190 2190,2430 2430,2640 2640,2850
Ram anyway, this line going

2563
01:19:37,100 --> 01:19:38,660
0,330 330,690 1080,1320 1320,1410 1410,1560
down is what they mean

2564
01:19:38,660 --> 01:19:40,100
0,150 150,930
by livestock.

2565
01:19:40,310 --> 01:19:41,630
0,240 240,330 330,690 690,870 870,1320
You may ask what happens

2566
01:19:41,630 --> 01:19:43,910
0,90 90,210 210,600 600,1380 1800,2280
to the excess packets a

2567
01:19:44,150 --> 01:19:45,650
0,270 270,360 360,510 510,1110 1110,1500
and if you recall the

2568
01:19:45,980 --> 01:19:48,830
0,1170 1170,1320 1320,2010 2040,2700 2700,2850
structure of their software was

2569
01:19:48,830 --> 01:19:49,880
0,120 120,240 240,330 330,480 480,1050
that they had been Nick.

2570
01:19:50,660 --> 01:19:52,340
0,270 270,480 480,900 900,1560 1560,1680
Um that basically feeds the

2571
01:19:52,340 --> 01:19:54,000
0,420 420,1080
receive interrupt.

2572
01:19:54,000 --> 01:19:56,340
0,390 390,780 780,1440 1620,2160 2160,2340
Received interrupt software copies, each

2573
01:19:56,340 --> 01:19:58,460
0,420 420,660 660,750 750,1500
packet into a queue.

2574
01:19:58,610 --> 01:20:00,080
0,150 150,300 300,690 720,1230 1230,1470
And then there's some sort

2575
01:20:00,080 --> 01:20:02,740
0,330 660,1230 1230,2010
of network thread.

2576
01:20:02,950 --> 01:20:04,220
0,420
HMM.

2577
01:20:04,220 --> 01:20:05,210
0,150 150,360 360,720 720,900 900,990
That pulls packets off the

2578
01:20:05,210 --> 01:20:07,820
0,450 1140,1590 1620,2160 2160,2430 2430,2610
queue, the exact place where

2579
01:20:07,820 --> 01:20:10,250
0,390 390,480 480,1110 1140,1590 2130,2430
packets are lost are right

2580
01:20:10,250 --> 01:20:11,380
0,630
here.

2581
01:20:11,410 --> 01:20:12,250
0,180 180,300 300,360 360,720 720,840
What's going to happen is

2582
01:20:12,250 --> 01:20:14,590
0,120 120,210 210,630 630,1260 1710,2340
that the interrupt routine, um

2583
01:20:14,980 --> 01:20:16,150
0,390 390,510 510,660 660,900 900,1170
once we get down here

2584
01:20:16,150 --> 01:20:19,960
0,210 210,1770 1830,2520 2520,3180 3630,3810
with serious live lock, the

2585
01:20:19,960 --> 01:20:20,770
0,300 300,540 540,630 630,750 750,810
interrupt routine is going to

2586
01:20:20,770 --> 01:20:21,700
0,240 240,420 420,660 660,810 810,930
fill this q, there's going

2587
01:20:21,700 --> 01:20:22,720
0,60 60,120 120,300 300,750 750,1020
to be some maximum queue

2588
01:20:22,720 --> 01:20:23,800
0,270 270,540 540,630 630,870 870,1080
length, here you know, at

2589
01:20:23,800 --> 01:20:25,240
0,360 360,480 480,600 600,1170 1200,1440
least all the Ram but

2590
01:20:25,240 --> 01:20:27,400
0,240 240,480 480,1170
probably much less.

2591
01:20:27,550 --> 01:20:29,020
0,330 420,660 660,990 990,1350 1350,1470
And the interrupt routine is

2592
01:20:29,020 --> 01:20:29,830
0,120 120,240 240,450 450,510 510,810
going to pull a packet

2593
01:20:29,830 --> 01:20:30,610
0,120 120,240 240,480 480,600 600,780
off the neck and see

2594
01:20:30,610 --> 01:20:32,620
0,180 180,360 360,960 1620,1830 1830,2010
that this Q A is

2595
01:20:32,620 --> 01:20:33,640
0,360 360,480 480,750 750,870 870,1020
already as long as it's

2596
01:20:33,640 --> 01:20:34,630
0,300 300,390 390,690 690,810 810,990
allowed to be and the

2597
01:20:34,840 --> 01:20:36,070
0,360 360,630 630,720 720,1170 1170,1230
interrupt routine will discard the

2598
01:20:36,070 --> 01:20:37,870
0,450 780,1170 1320,1560 1560,1620 1620,1800
packet, but then of course

2599
01:20:37,870 --> 01:20:38,920
0,420 420,660 660,810 810,960 960,1050
immediately after that, there'll be

2600
01:20:38,920 --> 01:20:40,460
0,330 330,930
another interrupt.

2601
01:20:41,200 --> 01:20:42,160
0,420
Yeah.

2602
01:20:42,220 --> 01:20:43,630
0,540 540,630 630,1020 1020,1200 1200,1410
Refugee mail again this hard

2603
01:20:43,630 --> 01:20:45,400
0,60 60,270 270,630 630,1320 1350,1770
the next packet because a

2604
01:20:45,460 --> 01:20:48,430
0,360 360,630 630,1110 2070,2400 2400,2970
network thread is always interrupted

2605
01:20:48,430 --> 01:20:49,330
0,120 120,300 300,570 570,660 660,900
and never allowed to run.

2606
01:20:52,040 --> 01:20:53,940
0,480 480,660 660,780 780,1320
Questions about this diagram.

2607
01:20:57,840 --> 01:20:59,190
0,210 210,270 270,360 360,600 600,1350
This is the most important.

2608
01:20:59,820 --> 01:21:01,340
0,360 360,420 420,510 510,900
Diagram in the paper.

2609
01:21:05,100 --> 01:21:08,040
0,300 300,600 960,2250 2370,2760 2760,2940
Alright, well we've basically run

2610
01:21:08,040 --> 01:21:08,760
0,120 120,180 180,450 450,630 630,720
out of time so I'll

2611
01:21:08,760 --> 01:21:10,920
0,150 150,240 240,900 900,1200 1560,2160
try to compress the answer

2612
01:21:10,920 --> 01:21:12,540
0,180 180,390 390,960 1200,1560 1560,1620
to this problem into a

2613
01:21:12,540 --> 01:21:13,480
0,390
minute.

2614
01:21:15,100 --> 01:21:16,570
0,150 150,390 390,720 720,750 750,1470
The authors proposed a solution.

2615
01:21:17,120 --> 01:21:18,260
0,180 180,300 300,480 480,960 960,1140
A the most immediately good

2616
01:21:18,260 --> 01:21:19,400
0,210 210,390 390,480 480,990 990,1140
news about the solution is

2617
01:21:19,400 --> 01:21:20,840
0,240 330,720 720,810 810,930 930,1440
that this is the performance

2618
01:21:20,840 --> 01:21:22,190
0,90 90,240 240,720 840,1050 1050,1350
of their solution that is

2619
01:21:22,190 --> 01:21:23,240
0,90 90,360 360,570 570,780 780,1050
the input rate goes up

2620
01:21:23,240 --> 01:21:25,310
0,630 630,720 720,810 810,1950 1950,2070
because of the {5000,and} then

2621
01:21:25,310 --> 01:21:27,560
0,150 150,570 570,1770 1770,1860 1860,2250
its flat {5000,,regardless} of input

2622
01:21:27,560 --> 01:21:30,650
0,420 2490,2670 2670,2820 2820,2910 2910,3090
rate, so this is sort

2623
01:21:30,650 --> 01:21:32,280
0,60 60,240 270,1050
of a perfect.

2624
01:21:32,280 --> 01:21:35,070
0,630 630,930 930,1440 1560,2280 2280,2790
Non live lock performance line.

2625
01:21:35,650 --> 01:21:36,310
0,120 120,330 330,450 450,600 600,660
Of course it's going to

2626
01:21:36,310 --> 01:21:38,020
0,150 150,480 480,1110 1500,1590 1590,1710
be flat because you can

2627
01:21:38,020 --> 01:21:40,570
0,120 120,750 1020,2040 2040,2130 2130,2550
only process {5000,packets} per second,

2628
01:21:41,350 --> 01:21:42,490
0,180 180,420 420,480 480,570 570,1140
the speed of the CPU

2629
01:21:43,120 --> 01:21:44,200
0,240 240,420 420,630 630,810 810,1080
and the way they get

2630
01:21:44,200 --> 01:21:45,640
0,510 540,660 660,1050 1050,1260 1260,1440
this, they still have this

2631
01:21:45,640 --> 01:21:47,240
0,420 420,990
network thread.

2632
01:21:48,270 --> 01:21:49,460
0,630
I'm.

2633
01:21:49,460 --> 01:21:50,360
0,180 180,270 270,630 630,780 780,900
And they still have an

2634
01:21:50,360 --> 01:21:52,020
0,390 390,1080
interrupt routine.

2635
01:21:53,880 --> 01:21:55,500
0,450
I'm.

2636
01:21:55,940 --> 01:21:57,260
0,480 480,600 600,870 870,1140 1140,1320
So the very first time

2637
01:21:57,260 --> 01:21:59,990
0,90 90,300 300,1170 1500,1920 2190,2730
the NIC interrupts a run

2638
01:21:59,990 --> 01:22:00,800
0,60 60,390 390,630 630,720 720,810
the interrupt routine but the

2639
01:22:00,800 --> 01:22:02,540
0,360 360,600 600,780 780,1380 1410,1740
interrupt routine does not copy

2640
01:22:02,540 --> 01:22:03,920
0,390 390,540 540,660 660,990 1050,1380
packs off the neck, it

2641
01:22:03,920 --> 01:22:05,480
0,480 480,630 630,720 720,1080 1080,1560
wakes up the network thread

2642
01:22:05,660 --> 01:22:08,150
0,150 150,360 1020,1680 1680,2220 2250,2490
and then leaves interrupts on

2643
01:22:08,150 --> 01:22:09,410
0,90 90,390 390,1050 1050,1170 1170,1260
the NIC disabled so will

2644
01:22:09,410 --> 01:22:11,690
0,180 180,480 480,750 750,1470 1650,2280
get no more interrupts a

2645
01:22:11,930 --> 01:22:13,580
0,390 390,510 510,930 930,1290 1290,1650
Vegas the networking threatened then

2646
01:22:13,640 --> 01:22:15,230
0,120 120,420 420,930 1020,1170 1170,1590
the interrupt routine will return,

2647
01:22:15,230 --> 01:22:16,430
0,150 150,300 300,750 750,810 810,1200
so now interrupts the snicker

2648
01:22:16,430 --> 01:22:18,710
0,390 390,960 1530,1770 1770,2160 2160,2280
turned off the networks right

2649
01:22:18,710 --> 01:22:20,260
0,330 330,480 480,540 540,1200
basically has a loop.

2650
01:22:21,030 --> 01:22:22,680
0,600
HMM.

2651
01:22:23,780 --> 01:22:26,330
0,750 960,1500 1830,2040 2040,2400 2400,2550
That a little check the

2652
01:22:26,330 --> 01:22:27,710
0,360 360,600 600,960 960,1050 1050,1380
neck, you pull a few

2653
01:22:27,710 --> 01:22:29,240
0,1080
packets.

2654
01:22:30,560 --> 01:22:32,080
0,240 240,330 330,870
From the neck.

2655
01:22:34,040 --> 01:22:35,150
0,600 600,690 690,870 870,1020 1020,1110
Five I think is what

2656
01:22:35,150 --> 01:22:36,350
0,120 120,300 300,390 390,870 960,1200
they ended up using and

2657
01:22:36,350 --> 01:22:38,620
0,210 210,690 690,930 930,1680
then process those packets.

2658
01:22:40,240 --> 01:22:42,730
0,600 810,1260 1260,1710 2190,2370 2370,2490
Um, and then if there

2659
01:22:42,730 --> 01:22:45,010
0,120 120,780 1170,1380 1380,1770 1980,2280
were not if this a

2660
01:22:45,190 --> 01:22:46,810
0,270 270,600 600,840 840,1290 1290,1620
little check, then it's this

2661
01:22:46,810 --> 01:22:48,070
0,450 450,720 720,900 900,1020 1020,1260
networking thread now that reads

2662
01:22:48,070 --> 01:22:49,330
0,360 360,510 510,630 630,1020 1050,1260
packets off the neck, not

2663
01:22:49,330 --> 01:22:51,070
0,90 90,600 1050,1410 1410,1560 1560,1740
the interrupt a if they're

2664
01:22:51,070 --> 01:22:53,280
0,420 420,630 630,1050 1050,1620
not no packets waiting.

2665
01:22:53,280 --> 01:22:55,460
0,180 180,750 750,1530
It enables interrupts.

2666
01:22:59,870 --> 01:23:01,370
0,210 210,570 570,840 840,930 930,1500
And then goes to sleep.

2667
01:23:03,630 --> 01:23:05,370
0,300 300,540 540,660 660,1020 1020,1740
A because it's enabled interrupt,

2668
01:23:05,790 --> 01:23:08,010
0,600 900,1230 1230,1350 1350,1650 1650,2220
um, next time packet arrives

2669
01:23:08,010 --> 01:23:09,030
0,120 120,270 270,630 630,780 780,1020
in our routine will wake

2670
01:23:09,030 --> 01:23:10,530
0,180 180,390 390,930 1170,1410 1410,1500
up this thread and I'll

2671
01:23:10,530 --> 01:23:11,250
0,150 150,240 240,330 330,600 600,720
come out of sleep and

2672
01:23:11,250 --> 01:23:11,970
0,90 90,300 300,390 390,480 480,720
go back to the top

2673
01:23:11,970 --> 01:23:13,350
0,90 90,540 660,930 930,1140 1140,1380
of loop, so this is

2674
01:23:13,380 --> 01:23:14,460
0,180 180,450 450,540 540,990 990,1080
this is the structure of

2675
01:23:14,460 --> 01:23:16,860
0,150 150,630 1170,1650 1890,2280 2280,2400
their solution and one way

2676
01:23:16,860 --> 01:23:18,080
0,60 60,270 270,810
to view this.

2677
01:23:18,080 --> 01:23:18,920
0,120 120,270 270,420 420,720 720,840
Is that they turn an

2678
01:23:18,950 --> 01:23:21,410
0,810 990,1680 1710,1920 1920,1980 1980,2460
interrupt scheme into a polling

2679
01:23:21,410 --> 01:23:23,030
0,570 810,990 990,1140 1140,1320 1320,1620
scheme that is under high

2680
01:23:23,030 --> 01:23:24,280
0,660
load.

2681
01:23:24,280 --> 01:23:25,120
0,60 60,360 360,570 570,630 630,840
They just sit in this

2682
01:23:25,120 --> 01:23:26,180
0,540
loop.

2683
01:23:26,300 --> 01:23:27,980
0,240 240,510 510,750 750,1140 1140,1680
And they read packet process

2684
01:23:27,980 --> 01:23:29,930
0,240 240,540 540,1050 1410,1620 1620,1950
read packet processing with interrupts

2685
01:23:29,930 --> 01:23:31,660
0,270 270,660 690,870 870,1110
turned off so they.

2686
01:23:31,830 --> 01:23:33,280
0,240 240,840
D h..

2687
01:23:33,550 --> 01:23:34,780
0,270 270,840 840,900 900,1110 1110,1230
Since interrupts are turned off,

2688
01:23:34,780 --> 01:23:35,920
0,90 90,420 420,570 570,720 720,1140
they never get this effect

2689
01:23:35,920 --> 01:23:37,390
0,120 120,180 180,570 570,1020 1020,1470
where the interrupts steal time

2690
01:23:37,390 --> 01:23:38,920
0,180 180,240 240,450 450,900 1170,1530
from the main thread whereas

2691
01:23:38,920 --> 01:23:40,630
0,180 180,480 480,1050 1080,1260 1260,1710
under low load, the enable

2692
01:23:40,630 --> 01:23:41,840
0,690
interrupts.

2693
01:23:41,840 --> 01:23:43,040
0,420 570,780 780,870 870,870 870,1200
And may be a while

2694
01:23:43,040 --> 01:23:44,540
0,270 270,660 660,1170 1230,1350 1350,1500
until packets arrive but they'll

2695
01:23:44,540 --> 01:23:45,710
0,150 150,450 450,780 900,1050 1050,1170
be woken up by the

2696
01:23:45,710 --> 01:23:46,940
0,330 330,600 600,1080 1080,1170 1170,1230
interrupt routine immediately if a

2697
01:23:46,940 --> 01:23:48,360
0,270 270,510 510,750
packet does arrive.

2698
01:23:50,440 --> 01:23:51,040
0,180 180,330 330,420 420,510 510,600
And that's all I have

2699
01:23:51,040 --> 01:23:52,220
0,90 90,510
to say.

2700
01:23:53,370 --> 01:23:58,380
0,180 180,930 2850,3120 3120,3630 3630,5010
Any questions have a question.

2701
01:23:59,200 --> 01:24:01,570
0,420 420,690 690,1260 1470,1950 1950,2370
Is that loop looking at

2702
01:24:01,570 --> 01:24:02,950
0,180 180,330 330,570 570,1170 1170,1380
all of the devices or

2703
01:24:02,950 --> 01:24:04,660
0,270 270,360 360,630 630,840 840,1710
only the one that generated

2704
01:24:04,720 --> 01:24:06,240
0,180 180,810
the Internet.

2705
01:24:07,420 --> 01:24:09,880
0,210 210,420 420,870 870,1830
If there's multiple nics.

2706
01:24:10,250 --> 01:24:11,520
0,630
Soap.

2707
01:24:12,360 --> 01:24:13,680
0,510 540,720 720,780 780,930 930,1320
Um, that's a good question,

2708
01:24:14,460 --> 01:24:16,140
0,420 420,570 570,720 720,1110 1110,1680
um, if there's multiple next

2709
01:24:16,170 --> 01:24:18,150
0,330 330,960 1290,1530 1530,1710 1710,1980
the loop I don't actually

2710
01:24:18,150 --> 01:24:18,990
0,90 90,210 210,450 510,720 720,840
know how they how the

2711
01:24:18,990 --> 01:24:21,540
0,270 270,510 1590,1770 1770,2130 2130,2550
loop works a very reasonable

2712
01:24:21,540 --> 01:24:23,160
0,570 570,780 780,930 930,1170 1170,1620
design is for this network

2713
01:24:23,160 --> 01:24:25,290
0,510 510,600 600,960 960,1560 1590,2130
thread to keep track of

2714
01:24:26,370 --> 01:24:28,620
0,300 330,930 960,1560 1620,2070 2070,2250
for every neck whether it's

2715
01:24:28,620 --> 01:24:30,300
0,120 120,690 690,1050 1050,1200 1200,1680
an interrupting mode or polling

2716
01:24:30,300 --> 01:24:31,160
0,600
mode.

2717
01:24:33,410 --> 01:24:34,820
0,600 840,1020 1020,1140 1140,1230 1230,1410
Um, and then it will

2718
01:24:34,820 --> 01:24:36,200
0,780
only.

2719
01:24:36,530 --> 01:24:38,000
0,780
Actually.

2720
01:24:39,500 --> 01:24:40,790
0,360 360,450 450,780 780,1110 1110,1290
Because the interrupt routines no

2721
01:24:40,790 --> 01:24:42,350
0,360 360,930 930,1050 1050,1170 1170,1560
longer repackaged from the neck

2722
01:24:42,410 --> 01:24:43,610
0,240 240,570 570,720 720,930 930,1200
that means the loop probably

2723
01:24:43,610 --> 01:24:45,170
0,390 390,750 750,1320 1320,1380 1380,1560
checks every interface at this

2724
01:24:45,170 --> 01:24:46,200
0,540
point.

2725
01:24:46,200 --> 01:24:47,790
0,300 300,600 600,840 840,1110 1110,1590
Every pride checks every neck.

2726
01:24:48,370 --> 01:24:49,980
0,180 180,360 360,750 750,990
At this point then.

2727
01:24:49,980 --> 01:24:51,420
0,210 210,420 480,750 750,930 930,1440
Pulls up for every neck.

2728
01:24:51,980 --> 01:24:53,270
0,150 150,330 330,390 390,600 600,1290
It has a few packets

2729
01:24:53,270 --> 01:24:54,500
0,360 570,720 720,900 900,1080 1080,1230
pack if that Nick has

2730
01:24:54,500 --> 01:24:56,960
0,570 570,1170 1830,2130 2130,2220 2220,2460
packets waiting loop will pull

2731
01:24:56,960 --> 01:24:57,770
0,90 90,450 450,600 600,690 690,810
a few out of the

2732
01:24:57,770 --> 01:24:59,690
0,210 210,330 330,810 810,1140 1650,1920
neck and process them and

2733
01:24:59,690 --> 01:25:01,160
0,180 210,450 450,1170 1170,1320 1320,1470
then if none of the

2734
01:25:01,160 --> 01:25:03,360
0,720 750,990 990,1680
knicks had anything.

2735
01:25:04,170 --> 01:25:05,070
0,300 300,420 420,660 660,810 810,900
If you checked all the

2736
01:25:05,070 --> 01:25:05,850
0,210 210,360 360,570 570,660 660,780
next and none of them

2737
01:25:05,850 --> 01:25:07,600
0,90 90,270 270,660 660,1140
at any packets waiting.

2738
01:25:07,600 --> 01:25:08,800
0,120 120,300 300,450 450,840 840,1200
The loop will enable interrupts

2739
01:25:08,800 --> 01:25:10,540
0,120 120,330 330,450 450,1560 1560,1740
on all the knicks and

2740
01:25:10,540 --> 01:25:11,560
0,570
sleep.

2741
01:25:11,560 --> 01:25:12,970
0,150 150,390 390,810 810,1290 1290,1410
And any naked interrupts will

2742
01:25:12,970 --> 01:25:14,040
0,210 210,300 300,450
wake it up.

2743
01:25:14,940 --> 01:25:16,340
0,210 210,330 330,870
That's my guess.

2744
01:25:16,510 --> 01:25:19,820
0,330 330,690 720,1470 2100,2760
Okay, yeah sounds reasonable.

2745
01:25:21,500 --> 01:25:22,340
0,330 330,450 450,570 570,630 630,840
A I had a quick

2746
01:25:22,340 --> 01:25:24,410
0,330 330,600 600,1140 1590,1890 1890,2070
question then, so how did

2747
01:25:24,410 --> 01:25:26,180
0,450 480,1080 1080,1440 1440,1560 1560,1770
the so-so while the loop

2748
01:25:26,180 --> 01:25:27,620
0,180 180,480 480,750 750,930 930,1440
is running, how do packets

2749
01:25:27,620 --> 01:25:30,560
0,750 780,1350 1380,1860 1860,2280 2310,2940
actually get into the queues

2750
01:25:30,740 --> 01:25:32,360
0,150 150,360 360,900 990,1350 1350,1620
to be pulled I felt

2751
01:25:32,360 --> 01:25:33,470
0,240 630,780 780,900 900,1020 1020,1110
like there would only be

2752
01:25:33,470 --> 01:25:35,060
0,240 240,390 390,420 420,930
one at a time.

2753
01:25:35,550 --> 01:25:37,100
0,510 510,930
Initially then.

2754
01:25:37,580 --> 01:25:39,650
0,540 540,630 630,1080 1080,1350 1380,2070
Initially, the packets are queued

2755
01:25:39,740 --> 01:25:40,850
0,540 540,630 630,840 840,930 930,1110
inside the knick in its

2756
01:25:40,850 --> 01:25:42,560
0,150 150,540 540,1110
own private memory.

2757
01:25:43,500 --> 01:25:45,210
0,270 270,540 540,1200 1410,1590 1590,1710
Then this loop, you know

2758
01:25:45,210 --> 01:25:46,050
0,180 180,330 450,630 630,690 690,840
when it when it goes

2759
01:25:46,050 --> 01:25:46,740
0,210 210,270 270,360 360,630 630,690
back to the top of

2760
01:25:46,740 --> 01:25:48,000
0,90 90,630 690,960 960,1170 1170,1260
the loop, it'll look at

2761
01:25:48,000 --> 01:25:49,740
0,540 570,1230
each neck.

2762
01:25:50,120 --> 01:25:51,380
0,270 390,750 750,1050 1050,1140 1140,1260
And actually talk to the

2763
01:25:51,380 --> 01:25:53,060
0,210 210,960 1020,1200 1200,1590 1590,1680
NIC hardware and asked do

2764
01:25:53,060 --> 01:25:54,350
0,120 120,240 240,450 450,870 870,1290
you have any input packets

2765
01:25:54,350 --> 01:25:55,880
0,300 300,390 390,540 540,990 1380,1530
waiting in your memory, and

2766
01:25:55,880 --> 01:25:56,840
0,90 90,150 150,450 450,690 690,960
if it does then this

2767
01:25:56,840 --> 01:25:57,940
0,360 360,540
loop will.

2768
01:25:57,940 --> 01:25:59,440
0,330 540,660 660,1170 1170,1200 1200,1500
Will you allocate a packet

2769
01:25:59,440 --> 01:26:02,680
0,360 360,450 450,1080 1650,2460 2700,3240
buffer in Ram and copy

2770
01:26:02,680 --> 01:26:03,910
0,120 120,630 630,720 720,810 810,1230
the bytes of the packet

2771
01:26:03,910 --> 01:26:05,280
0,150 150,210 210,330 330,810
out of the knick.

2772
01:26:06,060 --> 01:26:07,170
0,90 90,420 420,780 780,870 870,1110
The packet buffer, and then

2773
01:26:07,170 --> 01:26:08,800
0,420 420,570 570,870 870,1200
process that packet buffer.

2774
01:26:08,800 --> 01:26:10,090
0,180 180,300 300,510 510,930 960,1290
So it can copy more

2775
01:26:10,090 --> 01:26:11,470
0,120 120,420 420,840 900,1260 1260,1380
than one package, yeah I

2776
01:26:11,470 --> 01:26:13,180
0,120 120,750 990,1530 1530,1620 1620,1710
think they do it in

2777
01:26:13,180 --> 01:26:14,530
0,300 300,390 390,990 990,1080 1080,1350
groups of five in order

2778
01:26:14,530 --> 01:26:15,400
0,300
to.

2779
01:26:15,400 --> 01:26:16,300
0,300 300,390 390,540 540,600 600,900
Even if there's a hundred

2780
01:26:16,300 --> 01:26:17,470
0,330 330,630 630,900 900,990 990,1170
packets waiting here, it would

2781
01:26:17,560 --> 01:26:18,820
0,300 300,630 630,690 690,900 900,1260
just process the next five

2782
01:26:18,820 --> 01:26:19,780
0,90 90,330 330,390 390,540 540,960
in order to be fair

2783
01:26:19,780 --> 01:26:21,700
0,240 240,600 600,1050 1050,1200 1200,1920
among input next to avoid.

2784
01:26:22,520 --> 01:26:25,340
0,540 1470,1620 1620,1800 1800,2250 2250,2820
Starving but this requires increasing

2785
01:26:25,340 --> 01:26:26,630
0,120 120,480 480,1080 1080,1140 1140,1290
the memory capacity of the

2786
01:26:26,630 --> 01:26:30,560
0,420 480,810 930,1560 2340,3210
neck right, possibly well.

2787
01:26:33,170 --> 01:26:34,520
0,240 240,390 390,780
I don't know.

2788
01:26:34,550 --> 01:26:35,690
0,150 150,270 270,330 330,450 450,1140
I don't know how much.

2789
01:26:36,490 --> 01:26:37,210
0,150 150,360 360,510 510,600 600,720
The neck might have had

2790
01:26:37,210 --> 01:26:38,980
0,60 60,510 510,870 870,1320
a reasonable amount of.

2791
01:26:40,180 --> 01:26:42,970
0,420 420,630 630,1020 1320,1800 1800,2790
The thing is this interrupt

2792
01:26:43,000 --> 01:26:45,040
0,270 270,510 510,840 840,1050 1050,2040
you this live lock phenomenon

2793
01:26:45,310 --> 01:26:47,410
0,690 690,930 930,1440 1710,1830 1830,2100
below this point we're probably

2794
01:26:47,410 --> 01:26:48,740
0,750
interrupting.

2795
01:26:50,300 --> 01:26:51,600
0,630
And.

2796
01:26:51,690 --> 01:26:53,640
0,180 180,240 240,540 540,1650 1830,1950
If a packet arrives, the

2797
01:26:53,640 --> 01:26:55,350
0,300 300,510 510,600 600,900 900,1710
network thread will almost immediately

2798
01:26:55,350 --> 01:26:56,280
0,150 150,450 450,630 630,720 720,930
be woken up and pull

2799
01:26:56,280 --> 01:26:58,260
0,60 60,480 960,1530 1530,1770 1770,1980
the packet we're over here

2800
01:26:58,260 --> 01:26:59,340
0,90 90,300 300,750 750,900 900,1080
in this regime where too

2801
01:26:59,340 --> 01:27:01,180
0,180 180,570 570,630 630,1260
many packets are arriving.

2802
01:27:01,420 --> 01:27:03,220
0,570 870,1320 1350,1560 1560,1710 1710,1800
Um, and this loop is

2803
01:27:03,220 --> 01:27:06,180
0,420 420,660 660,750 750,1350
polling instead of interrupting.

2804
01:27:06,240 --> 01:27:07,380
0,420 420,480 480,630 630,720 720,1140
Packets are gonna be lost,

2805
01:27:07,380 --> 01:27:08,400
0,90 90,270 270,480 480,780 780,1020
we just know that because

2806
01:27:08,400 --> 01:27:11,610
0,180 180,1080 1170,1500 1500,1890 2130,3210
the difference you know this

2807
01:27:11,610 --> 01:27:13,500
0,510 510,1380
difference between.

2808
01:27:13,590 --> 01:27:15,240
0,180 180,660 660,840 840,1260 1260,1650
The ID the input rate

2809
01:27:15,480 --> 01:27:17,310
0,180 180,270 270,690 690,990 1200,1830
and the output rate, this

2810
01:27:17,340 --> 01:27:20,580
0,150 150,330 330,690 690,1440
is all dropped packets.

2811
01:27:22,740 --> 01:27:25,480
0,630 1260,2130
I'm adding.

2812
01:27:25,510 --> 01:27:27,100
0,120 120,450 450,720 720,1140 1140,1590
I don't think adding because

2813
01:27:27,100 --> 01:27:27,820
0,180 180,510 510,510 510,660 660,720
these packers are going to

2814
01:27:27,820 --> 01:27:29,950
0,60 60,390 390,1050 1410,1800 1800,2130
be dropped anyway adding buffering

2815
01:27:29,950 --> 01:27:30,760
0,90 90,150 150,300 300,570 570,810
to the neck doesn't probably

2816
01:27:30,760 --> 01:27:32,620
0,210 210,510 510,690 690,1290
doesn't help very much.

2817
01:27:32,680 --> 01:27:33,910
0,210 210,450 450,690 720,750 780,1230
I I don't I don't

2818
01:27:34,000 --> 01:27:35,780
0,450 450,570 570,630 630,1170
think it's a neck.

2819
01:27:37,920 --> 01:27:38,760
0,180 180,330 330,510 510,600 600,840
It's not clear that Nick

2820
01:27:38,760 --> 01:27:40,360
0,240 240,510 510,960
needs more than.

2821
01:27:40,480 --> 01:27:41,740
0,120 120,420 420,660 660,720 720,1260
A small amount of buffering.

2822
01:27:42,800 --> 01:27:44,450
0,480 480,930 930,1140 1140,1440 1470,1650
Yeah that makes sense, yeah

2823
01:27:44,450 --> 01:27:45,470
0,150 150,390 390,600 600,840 840,1020
you only need as much

2824
01:27:45,470 --> 01:27:46,340
0,120 120,210 210,330 330,630 690,870
as it would need to

2825
01:27:46,340 --> 01:27:49,500
0,300 300,600 660,1020 1020,1620
take to get saturated.

2826
01:27:49,530 --> 01:27:50,130
0,120 120,180 180,270 270,480 480,600
You know I think in

2827
01:27:50,130 --> 01:27:51,180
0,150 150,540 540,630 630,780 780,1050
their design, they would pull

2828
01:27:51,180 --> 01:27:52,650
0,300 300,660 660,780 780,930 930,1470
five packets of either quota

2829
01:27:52,650 --> 01:27:53,850
0,180 180,420 420,990 990,1080 1080,1200
was five packets and so

2830
01:27:53,850 --> 01:27:54,960
0,90 90,330 330,630 630,870 870,1110
the next survey needs five

2831
01:27:54,960 --> 01:27:56,940
0,300 300,360 360,930 1500,1770 1770,1980
packets of buffering that makes

2832
01:27:56,940 --> 01:27:58,440
0,300 300,510 510,960
sense but probably.

2833
01:27:58,620 --> 01:28:00,180
0,330 660,990 990,1170 1170,1470 1470,1560
Anyway, it's not clear that

2834
01:28:00,180 --> 01:28:01,020
0,180 180,330 330,540 540,690 690,840
more than that would be

2835
01:28:01,020 --> 01:28:02,420
0,210 210,780
very beneficial.

2836
01:28:02,780 --> 01:28:04,460
0,420 420,540 540,960 960,1110 1110,1680
Really, the purpose of buffering.

2837
01:28:05,020 --> 01:28:08,380
0,270 270,390 390,1260 1290,2340 2370,3360
Is to absorb transient bursts.

2838
01:28:09,150 --> 01:28:11,820
0,600 1710,2130 2130,2370 2370,2490 2490,2670
A whole pack is long

2839
01:28:11,820 --> 01:28:12,870
0,330 330,480 480,570 570,960 960,1050
enough that the software can

2840
01:28:12,870 --> 01:28:13,800
0,120 120,330 330,420 420,720 720,930
get along to reading but

2841
01:28:13,800 --> 01:28:15,150
0,90 90,270 270,540 540,720 720,1350
we're not talking about transient

2842
01:28:15,360 --> 01:28:16,590
0,510 510,600 600,720 720,1170 1170,1230
anything in this situation, we're

2843
01:28:16,590 --> 01:28:18,840
0,240 240,480 480,1080 1080,1800
talking about persistent overload.

2844
01:28:18,990 --> 01:28:20,600
0,600 660,870 870,990
So there's that.

2845
01:28:20,630 --> 01:28:21,530
0,180 180,330 330,480 480,660 660,900
So that means there's not

2846
01:28:21,530 --> 01:28:22,790
0,240 240,480 480,990 990,1170 1170,1260
really much function for a

2847
01:28:22,790 --> 01:28:23,960
0,180 180,240 240,600
lot of buffering.

2848
01:28:24,790 --> 01:28:26,600
0,240 240,630
Makes sense.

2849
01:28:28,300 --> 01:28:29,560
0,480 540,690 690,870 870,990 990,1260
Um I think my question

2850
01:28:29,560 --> 01:28:31,090
0,150 150,690 690,780 780,1170 1170,1530
is related to that it's

2851
01:28:31,270 --> 01:28:33,310
0,420 420,810 960,1110 1110,1470 1470,2040
so if the difference between

2852
01:28:33,610 --> 01:28:35,050
0,480 480,690 690,780 780,870 870,1440
interrupts on and in terms

2853
01:28:35,080 --> 01:28:36,660
0,300 300,750 750,1140
of here is.

2854
01:28:36,660 --> 01:28:37,740
0,390
Dad.

2855
01:28:37,740 --> 01:28:38,280
0,180 180,300 300,360 360,450 450,540
It's going to be the

2856
01:28:38,280 --> 01:28:39,990
0,210 210,510 540,870 870,1260 1350,1710
same, but like it's still

2857
01:28:39,990 --> 01:28:41,130
0,120 120,180 180,390 390,810 810,1140
going to be putting things

2858
01:28:41,130 --> 01:28:42,180
0,120 120,210 210,510 510,690 690,1050
on the queue, if it's

2859
01:28:42,210 --> 01:28:43,840
0,360 360,630 630,960
able to but.

2860
01:28:43,840 --> 01:28:45,490
0,300 300,660 660,930 930,1260 1290,1650
It will just not issue

2861
01:28:45,490 --> 01:28:47,050
0,120 120,630 630,930 960,1200 1200,1560
an interrupt, but if there's

2862
01:28:47,050 --> 01:28:48,250
0,390 480,780 780,900 900,960 960,1200
no place on the queue

2863
01:28:48,250 --> 01:28:49,200
0,420
then.

2864
01:28:49,260 --> 01:28:51,570
0,300 300,510 510,1080 1410,1560 1560,2310
On this job, the interrupt

2865
01:28:51,660 --> 01:28:52,860
0,180 180,540 540,930 930,1050 1050,1200
the interrupt routine in this

2866
01:28:52,860 --> 01:28:54,870
0,150 150,810 990,1650 1650,1890 1890,2010
new scheme never looks at

2867
01:28:54,870 --> 01:28:56,240
0,810
packets.

2868
01:28:56,270 --> 01:28:57,740
0,330 330,660 660,840 840,1050 1050,1470
Oh yes, I mean like,

2869
01:28:57,770 --> 01:28:59,360
0,360 360,570 570,990
um, you said.

2870
01:28:59,420 --> 01:29:01,010
0,240 240,510 510,780 780,900 900,1590
You turn off the interrupts

2871
01:29:01,010 --> 01:29:03,520
0,690 810,1020 1020,1530 1560,1950
for the neck, right.

2872
01:29:03,640 --> 01:29:04,810
0,270 270,420 420,720 720,870 870,1170
Yeah, so this what happens

2873
01:29:04,810 --> 01:29:06,100
0,60 60,150 150,480 480,960 960,1290
in the interrupt handler, is

2874
01:29:06,100 --> 01:29:08,080
0,180 210,1470
it disables.

2875
01:29:10,210 --> 01:29:12,220
0,570 600,1110 1110,1260 1260,1470 1470,2010
I'm interrupts on this neck

2876
01:29:12,640 --> 01:29:14,080
0,270 270,480 480,840 840,1260 1260,1440
and then wakes up the

2877
01:29:14,080 --> 01:29:15,520
0,360 360,900
network thread.

2878
01:29:16,000 --> 01:29:17,660
0,360 360,540 540,600 600,1110
That's all it does.

2879
01:29:18,460 --> 01:29:19,860
0,810
Returns.

2880
01:29:19,860 --> 01:29:21,060
0,450 480,570 570,780 780,870 870,1200
Right I guess my question

2881
01:29:21,060 --> 01:29:22,260
0,150 150,450 450,630 630,1050 1050,1200
is when they interrupt her

2882
01:29:22,260 --> 01:29:24,690
0,810 810,1470 1500,1980 1980,2190 2190,2430
disabled candy next ill put

2883
01:29:24,690 --> 01:29:27,000
0,480 480,600 600,1050 1080,1620 1620,2310
packets on its own buffer,

2884
01:29:27,030 --> 01:29:28,710
0,450 450,600 600,780 780,900 900,1680
yes the neck is self-contained.

2885
01:29:29,760 --> 01:29:31,530
0,210 210,570 570,780 780,1140 1140,1770
So it has internal buffering

2886
01:29:31,800 --> 01:29:33,570
0,510 510,570 570,930 1140,1680 1680,1770
whether or not regardless of

2887
01:29:33,570 --> 01:29:34,590
0,210 210,540 540,630 630,960 960,1020
whether interrupts are enabled or

2888
01:29:34,590 --> 01:29:36,540
0,660 1020,1200 1200,1560 1560,1830 1830,1950
disabled, the only all that

2889
01:29:36,540 --> 01:29:37,980
0,330 330,450 450,510 510,840 840,1440
happens when a packet arrives,

2890
01:29:38,010 --> 01:29:40,800
0,270 270,510 510,930 1350,1920 2040,2790
is the Nick, um ads.

2891
01:29:41,220 --> 01:29:42,450
0,420 420,510 510,930 930,1110 1110,1230
Upends the packet to it.

2892
01:29:43,120 --> 01:29:44,590
0,150 150,510 510,1110 1110,1290 1290,1470
Is Cuba packets in its

2893
01:29:44,590 --> 01:29:46,030
0,240 240,660 660,1140 1170,1350 1350,1440
own internal memory, that's all

2894
01:29:46,030 --> 01:29:46,900
0,120 120,300 300,690 690,810 810,870
that ever happens when a

2895
01:29:46,900 --> 01:29:48,340
0,270 270,930
packet arrives.

2896
01:29:48,720 --> 01:29:50,520
0,150 150,630 630,750 750,1350 1410,1800
So whenever the nickname in

2897
01:29:50,610 --> 01:29:52,770
0,330 330,780 780,1290 1290,1680 1680,2160
this paper's neck, different designs

2898
01:29:52,770 --> 01:29:54,120
0,30 30,360 360,720 720,900 1020,1350
are very different, but for

2899
01:29:54,120 --> 01:29:56,310
0,180 180,600 600,870 870,1290 1380,2190
this paper, their neck never

2900
01:29:56,340 --> 01:29:57,690
0,210 210,450 450,660 660,960 960,1350
did die may never reached

2901
01:29:57,690 --> 01:29:59,370
0,300 300,480 480,870 870,1170 1170,1680
out and touched host memory

2902
01:29:59,400 --> 01:30:00,280
0,390
ever.

2903
01:30:01,170 --> 01:30:02,910
0,510 570,900 900,990 990,1440 1440,1740
He kept an internal queue

2904
01:30:02,910 --> 01:30:03,780
0,90 90,210 210,390 390,750 750,870
in its own memory and

2905
01:30:03,780 --> 01:30:04,950
0,60 60,450 450,630 630,840 840,1170
the hosts could read packets

2906
01:30:04,950 --> 01:30:05,700
0,150 150,240 240,330 330,630 630,750
out if it wanted to.

2907
01:30:07,140 --> 01:30:08,550
0,540 570,690 690,1080 1170,1320 1320,1410
Okay I see, and if

2908
01:30:08,550 --> 01:30:11,310
0,270 270,630 630,1320 1350,1860 1920,2760
there's no memory then drop

2909
01:30:11,700 --> 01:30:13,830
0,330 330,690 840,1170 1170,1380 1380,2130
OK, so in this design,

2910
01:30:14,220 --> 01:30:15,810
0,150 150,570 570,720 720,1230 1230,1590
if packets are these excess

2911
01:30:15,810 --> 01:30:17,820
0,720 840,960 960,1290 1290,1440 1440,2010
packets, the place they're dropped

2912
01:30:17,820 --> 01:30:20,310
0,690 1020,1560 1590,2100 2100,2190 2190,2490
is is inside the neck

2913
01:30:20,310 --> 01:30:21,720
0,240 240,540 540,900 930,1110 1110,1410
what'll happen is a packet

2914
01:30:21,720 --> 01:30:23,600
0,210 210,330 330,570
or a rock.

2915
01:30:23,630 --> 01:30:25,190
0,150 150,270 270,390 390,870 870,1560
If we're an overload situation,

2916
01:30:25,310 --> 01:30:26,240
0,180 180,270 270,540 540,780 780,930
then the next q will

2917
01:30:26,240 --> 01:30:28,520
0,120 120,570 570,1440 1740,1920 1920,2280
be full always or almost

2918
01:30:28,520 --> 01:30:29,330
0,420 420,540 540,630 630,750 750,810
always, and so when a

2919
01:30:29,330 --> 01:30:30,470
0,300 300,660 660,720 720,930 930,1140
packet arrives, the next q

2920
01:30:30,470 --> 01:30:31,760
0,120 120,540 540,660 660,1080 1140,1290
will typically be full, it

2921
01:30:31,760 --> 01:30:32,870
0,120 120,480 480,600 600,990 990,1110
will drop the NIC will

2922
01:30:32,870 --> 01:30:34,820
0,270 270,360 360,720 810,1470 1470,1950
drop the packet without wasting

2923
01:30:34,820 --> 01:30:36,080
0,300 300,690 690,960 960,1050 1050,1260
any CPU time on the

2924
01:30:36,080 --> 01:30:37,180
0,600
machine.

2925
01:30:38,020 --> 01:30:39,970
0,270 270,1290 1290,1620 1620,1740 1740,1950
Okay, yeah that the fact

2926
01:30:39,970 --> 01:30:41,350
0,120 120,210 210,300 300,870 990,1380
that it can drop without

2927
01:30:41,350 --> 01:30:42,910
0,330 330,510 510,900 900,1170 1170,1560
burning up CPU time, here

2928
01:30:43,120 --> 01:30:44,770
0,510 510,900 900,1050 1050,1140 1140,1650
is one way of explaining

2929
01:30:44,770 --> 01:30:47,260
0,180 180,360 360,1200 1380,1980 1980,2490
how they avoid live locks.

2930
01:30:48,250 --> 01:30:49,810
0,450 480,780 780,1230 1260,1440 1440,1560
Right, right okay, thank you

2931
01:30:49,810 --> 01:30:51,040
0,120 120,660
so much.

2932
01:30:55,660 --> 01:30:56,800
0,60 60,180 180,240 240,450 450,1140
I had a quick question,

2933
01:30:56,980 --> 01:30:58,030
0,420 420,660 660,870 870,990 990,1050
will there ever be a

2934
01:30:58,030 --> 01:31:00,540
0,960 960,1080 1080,1800
scenario in which.

2935
01:31:00,730 --> 01:31:03,310
0,810 810,1800 1800,2280 2280,2370 2370,2580
ISI you'll pull a few

2936
01:31:03,310 --> 01:31:05,590
0,810 1020,1290 1290,1470 1470,1740 1740,2280
packets, but the like internal

2937
01:31:05,590 --> 01:31:07,120
0,480 480,870 870,1020 1020,1260 1260,1530
software queues are all like

2938
01:31:07,120 --> 01:31:08,240
0,540
full.

2939
01:31:08,730 --> 01:31:10,040
0,690
Ashore.

2940
01:31:10,620 --> 01:31:12,300
0,210 210,390 390,600 600,840 840,1680
Yeah there's some other bottleneck,

2941
01:31:12,630 --> 01:31:16,770
0,570 1020,1200 1200,1770 2130,3570 3900,4140
so for example suppose these

2942
01:31:16,770 --> 01:31:17,940
0,330 330,750 750,960 960,1050 1050,1170
incoming packets, some of them

2943
01:31:17,940 --> 01:31:19,110
0,180 180,240 240,360 360,930 930,1170
need to be delivered to

2944
01:31:19,110 --> 01:31:20,660
0,180 180,960
some application.

2945
01:31:20,660 --> 01:31:22,250
0,270 270,330 330,810 1260,1410 1410,1590
On a socket, if that

2946
01:31:22,250 --> 01:31:24,080
0,480 480,690 690,990 990,1470 1470,1830
application isn't reading packets fast

2947
01:31:24,080 --> 01:31:25,080
0,450
enough.

2948
01:31:25,400 --> 01:31:28,760
0,600 630,1170 1230,1890 1890,2550 2550,3360
Then I'm the socket buffer.

2949
01:31:29,300 --> 01:31:30,500
0,540 540,720 720,870 870,960 960,1200
Leading to you know that

2950
01:31:30,890 --> 01:31:32,630
0,300 330,1050 1050,1170 1170,1290 1290,1740
that application should be reading

2951
01:31:32,660 --> 01:31:34,190
0,210 210,420 420,900 930,1140 1140,1530
will get full and then

2952
01:31:34,220 --> 01:31:36,290
0,510 510,630 630,750 750,1380 1860,2070
packets may be dropped in

2953
01:31:36,290 --> 01:31:39,100
0,90 90,630 630,1200 1710,2280
the networking threat, um.

2954
01:31:39,250 --> 01:31:41,560
0,270 270,510 510,750 870,1620 2040,2310
And that can also lead

2955
01:31:41,560 --> 01:31:43,870
0,120 120,480 480,1050 1560,1980 1980,2310
to live lock, because now

2956
01:31:43,870 --> 01:31:44,800
0,210 210,300 300,450 450,510 510,930
because we have the same,

2957
01:31:44,800 --> 01:31:46,120
0,450 450,720 720,960 960,1110 1110,1320
the reason live lock comes

2958
01:31:46,120 --> 01:31:47,560
0,240 240,360 360,540 630,870 870,1440
up is that we expanded

2959
01:31:47,560 --> 01:31:49,820
0,630 630,1110 1110,1170 1170,1650
resources processing a packet.

2960
01:31:49,820 --> 01:31:51,770
0,150 150,390 390,690 690,1620 1740,1950
That was later dropped so

2961
01:31:51,770 --> 01:31:53,520
0,60 60,210 210,750 750,1170
it was wasted effort.

2962
01:31:53,670 --> 01:31:54,960
0,390 450,630 630,750 750,1230 1230,1290
Um, if the application is

2963
01:31:54,960 --> 01:31:56,740
0,210 210,510 510,870 870,1170
not reading it's well.

2964
01:31:56,770 --> 01:31:57,700
0,330 330,480 480,630 630,720 720,930
One way we can get

2965
01:31:57,700 --> 01:32:00,550
0,240 240,510 510,1050 1260,1800 2430,2850
live lock is a as

2966
01:32:00,550 --> 01:32:01,600
0,120 120,360 360,600 600,780 780,1050
the load goes up, maybe

2967
01:32:01,600 --> 01:32:02,290
0,120 120,240 240,330 330,630 630,690
we end up spending a

2968
01:32:02,290 --> 01:32:03,670
0,360 360,720 720,780 780,900 900,1380
hundred percent of our time

2969
01:32:03,670 --> 01:32:05,660
0,120 120,210 210,780 780,1410
in the networking thread.

2970
01:32:05,960 --> 01:32:07,370
0,330 330,900 900,1260 1260,1320 1320,1410
Leaving 0% of the time

2971
01:32:07,370 --> 01:32:08,840
0,360 360,510 510,840 840,1410 1410,1470
for whatever application is supposed

2972
01:32:08,840 --> 01:32:09,680
0,240 240,330 330,450 450,750 750,840
to be reading the packets

2973
01:32:09,680 --> 01:32:11,270
0,600 630,780 780,900 900,1050 1080,1590
and then we'll again get

2974
01:32:11,270 --> 01:32:12,720
0,210 210,480 480,900
live lock.

2975
01:32:13,080 --> 01:32:14,850
0,510 1260,1440 1440,1530 1530,1650 1650,1770
Um, but it won't be

2976
01:32:14,850 --> 01:32:16,440
0,390 390,600 600,930 930,1050 1050,1590
interrupt live lockett will be

2977
01:32:16,770 --> 01:32:18,360
0,540 540,1050 1050,1320 1320,1560 1560,1590
network processing, live lock or

2978
01:32:18,360 --> 01:32:20,430
0,450 540,1140 1230,1560 1560,1830 1830,2070
something, um, the paper actually

2979
01:32:20,430 --> 01:32:22,500
0,120 120,150 150,750 750,1170 1410,2070
has a story for that

2980
01:32:24,210 --> 01:32:25,830
0,390 420,720 720,780 780,1110 1110,1620
I'm somewhere in section six

2981
01:32:25,980 --> 01:32:27,450
0,270 270,540 540,780 780,900 900,1470
they talk about the network,

2982
01:32:27,480 --> 01:32:29,070
0,300 300,900 900,1050 1050,1260 1260,1590
if packets are being delivered

2983
01:32:29,070 --> 01:32:31,200
0,120 120,240 240,870 870,1620 1830,2130
to a local application, the

2984
01:32:31,200 --> 01:32:32,370
0,360 360,600 600,840 840,1110 1110,1170
network thread would look at

2985
01:32:32,370 --> 01:32:33,820
0,90 90,570 570,990
the socket queue.

2986
01:32:33,820 --> 01:32:35,140
0,180 180,390 390,990 990,1200 1200,1320
For that application, and if

2987
01:32:35,140 --> 01:32:36,820
0,120 120,270 270,570 570,1260 1440,1680
it was getting long it

2988
01:32:36,820 --> 01:32:38,620
0,300 330,960 960,1140 1140,1560 1560,1800
would turn off interrupt would

2989
01:32:38,620 --> 01:32:40,120
0,210 210,360 360,810 810,1170 1170,1500
turn off interrupts and stop

2990
01:32:40,120 --> 01:32:41,440
0,300 300,660 660,840 840,930 930,1320
pulling packets off the network

2991
01:32:41,440 --> 01:32:42,610
0,510 510,750 750,810 810,990 990,1170
interface until the queue got

2992
01:32:42,610 --> 01:32:43,520
0,450
shorter.

2993
01:32:43,740 --> 01:32:46,200
0,450 900,1230 1290,1890 2040,2280 2280,2460
Um and and so that

2994
01:32:46,200 --> 01:32:47,190
0,180 180,300 300,690 690,870 870,990
means that networks read would

2995
01:32:47,190 --> 01:32:48,240
0,270 300,690 690,840 840,960 960,1050
stop running and give the

2996
01:32:48,240 --> 01:32:49,350
0,510 510,510 510,810 810,930 930,1110
application a chance to run

2997
01:32:49,350 --> 01:32:50,880
0,240 240,600 600,660 660,1290 1350,1530
and process the packets so

2998
01:32:50,880 --> 01:32:52,380
0,240 240,450 450,780 810,1200 1200,1500
you can get live lok

2999
01:32:52,380 --> 01:32:55,320
0,240 240,1290 1980,2160 2160,2370 2370,2940
like situations at any stage,

3000
01:32:55,320 --> 01:32:56,220
0,90 90,210 210,420 420,810 810,900
if you're not careful in

3001
01:32:56,220 --> 01:32:59,420
0,300 300,1500 1620,2340 2340,2760
a multistage process scheme.

3002
01:33:00,010 --> 01:33:01,180
0,330 330,420 420,600 600,780 780,1170
OK, if that makes sense,

3003
01:33:01,180 --> 01:33:03,380
0,270 270,600
thank you.

3004
01:33:04,820 --> 01:33:07,430
0,360 360,750 900,1470 1470,1770 2220,2610
Thank you, thank you welcome.
