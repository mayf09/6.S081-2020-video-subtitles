1
00:00:02,310 --> 00:00:04,710
0,810 1470,1980 1980,2160 2160,2310 2310,2400
Alright, um, I'd like to

2
00:00:04,710 --> 00:00:05,740
0,150 150,780
get started.

3
00:00:05,820 --> 00:00:07,770
0,360 360,960 1020,1380 1380,1620 1620,1950
First, can anyone hear me.

4
00:00:09,150 --> 00:00:11,310
0,690 1170,1710 1740,1950 1950,2010 2010,2160
Yes good, thank you very

5
00:00:11,310 --> 00:00:12,640
0,600
much.

6
00:00:13,300 --> 00:00:14,560
0,240 240,750 750,1020 1020,1200 1200,1260
Alright today I want to

7
00:00:14,560 --> 00:00:17,500
0,270 270,810 1080,1650 2040,2190 2190,2940
talk about, um, the transition

8
00:00:17,500 --> 00:00:19,750
0,450 450,750 750,1050 1170,1650 1650,2250
between running in user code

9
00:00:19,780 --> 00:00:21,190
0,240 240,600 600,720 720,960 960,1410
running programs in user code

10
00:00:21,190 --> 00:00:23,050
0,450 690,1290 1290,1350 1350,1440 1440,1860
and executing in the kernel,

11
00:00:23,410 --> 00:00:24,400
0,180 180,330 330,420 420,480 480,990
and this is the transition

12
00:00:24,400 --> 00:00:25,720
0,90 90,300 300,390 390,930 930,1320
that has to happen whenever

13
00:00:25,720 --> 00:00:26,710
0,90 90,360 360,540 540,600 600,990
a program makes a system

14
00:00:26,710 --> 00:00:28,510
0,630 660,1140 1140,1230 1230,1740 1740,1800
call where it experiences a

15
00:00:28,510 --> 00:00:29,710
0,360 360,480 480,540 540,900 900,1200
fault like a page fault,

16
00:00:29,710 --> 00:00:31,240
0,60 60,360 360,510 510,1110 1200,1530
a divide by zero or

17
00:00:31,240 --> 00:00:33,220
0,150 150,210 210,1140 1170,1860 1860,1980
if a device decides to

18
00:00:33,220 --> 00:00:34,360
0,480 480,750 750,960 960,1050 1050,1140
interrupt and needs to be

19
00:00:34,360 --> 00:00:36,070
0,510 510,660 660,810 810,1320 1320,1710
served by a kernel device

20
00:00:36,070 --> 00:00:37,820
0,480
driver.

21
00:00:38,020 --> 00:00:39,070
0,480 480,510 510,630 630,690 690,1050
There's a lot of careful

22
00:00:39,070 --> 00:00:41,710
0,840 840,1230 1230,1410 1410,2040 2040,2640
design and some important details

23
00:00:41,710 --> 00:00:43,600
0,150 150,300 300,960 1380,1680 1680,1890
that go into how these

24
00:00:43,600 --> 00:00:45,760
0,1020 1350,1650 1650,1860 1860,2070 2070,2160
traps a from user to

25
00:00:45,760 --> 00:00:47,470
0,300 300,780 900,1290 1290,1350 1350,1710
kernel happen and the details

26
00:00:47,470 --> 00:00:49,990
0,270 360,840 840,1320 1320,1830 1950,2520
are pretty important for enforcing

27
00:00:49,990 --> 00:00:53,800
0,660 660,1410 1560,2160 2160,2430 2430,3810
isolation security and also performance,

28
00:00:53,800 --> 00:00:55,600
0,210 210,390 390,810 810,990 1530,1800
there's many programs that a

29
00:00:55,600 --> 00:00:56,740
0,510 510,570 570,660 660,1020 1020,1140
transition of the kernel, a

30
00:00:56,740 --> 00:00:58,180
0,540 570,900 900,1020 1020,1140 1140,1440
lot either due to system

31
00:00:58,180 --> 00:01:00,400
0,330 330,390 390,900 960,1650 1650,2220
calls a page page faults,

32
00:01:01,000 --> 00:01:02,170
0,570 570,660 660,810 810,900 900,1170
and it can be super

33
00:01:02,170 --> 00:01:03,960
0,600 600,840 840,1110 1110,1470
important that the um.

34
00:01:04,080 --> 00:01:05,640
0,300 300,780 780,930 930,1020 1020,1560
Trap mechanism is as streamlined

35
00:01:05,640 --> 00:01:06,600
0,120 120,690
as possible.

36
00:01:07,530 --> 00:01:10,290
0,420 420,720 810,1500 1710,2190 2190,2760
Alright, so I'm starting situation

37
00:01:10,290 --> 00:01:15,090
0,750 780,960 960,2160 2550,3360 4530,4800
is pretty familiar where we

38
00:01:15,090 --> 00:01:16,860
0,180 180,510 570,1140 1140,1710 1710,1770
have our user program I

39
00:01:16,860 --> 00:01:17,820
0,180 180,300 300,750 750,870 870,960
use the shell as an

40
00:01:17,820 --> 00:01:18,880
0,780
example.

41
00:01:19,570 --> 00:01:21,130
0,300 300,510 510,750 750,1260 1260,1560
Running in user space and

42
00:01:21,520 --> 00:01:22,500
0,750
um.

43
00:01:23,630 --> 00:01:24,620
0,150 150,270 270,330 330,870 870,990
We have a colonel with

44
00:01:24,620 --> 00:01:25,400
0,60 60,420 420,540 540,720 720,780
the shell would like to

45
00:01:25,400 --> 00:01:26,300
0,120 120,240 240,420 420,450 450,900
do is make a system

46
00:01:26,300 --> 00:01:28,780
0,480 1230,1500 1500,1590 1590,2190
call into the kernel.

47
00:01:29,100 --> 00:01:29,760
0,240 240,300 300,420 420,480 480,660
And I'm going to use

48
00:01:29,760 --> 00:01:31,680
0,690 720,1050 1050,1320 1320,1680 1680,1920
right, use this shell writing

49
00:01:31,680 --> 00:01:33,450
0,210 210,810 810,870 870,1110 1110,1770
its prompt the very first

50
00:01:33,540 --> 00:01:34,980
0,480 480,600 600,1110 1110,1350 1350,1440
rate that happens after you

51
00:01:34,980 --> 00:01:36,750
0,150 150,870 1140,1470 1470,1560 1560,1770
boot x86 use the shell

52
00:01:36,750 --> 00:01:37,710
0,240 240,330 330,720 720,810 810,960
trying to write to make

53
00:01:37,710 --> 00:01:38,850
0,120 120,330 330,630 630,1050 1050,1140
the write system calls an

54
00:01:38,850 --> 00:01:39,600
0,480
example.

55
00:01:39,840 --> 00:01:40,650
0,390 390,480 480,600 600,720 720,810
And so we need to

56
00:01:40,650 --> 00:01:42,660
0,300 300,420 420,600 600,990 1410,2010
figure out how to actually

57
00:01:42,660 --> 00:01:44,610
0,510 540,1170 1170,1230 1230,1770 1770,1950
get execution to transfer from

58
00:01:44,610 --> 00:01:45,600
0,210 210,330 330,390 390,720 720,990
running in the show and

59
00:01:45,900 --> 00:01:48,030
0,480 480,1020 1020,1170 1170,1410 1410,2130
user space with user privileges

60
00:01:48,450 --> 00:01:49,500
0,330 330,540 540,630 630,690 690,1050
after running in the kernel

61
00:01:49,500 --> 00:01:52,890
0,600 600,1260 1560,2190 2640,3300 3300,3390
supervisor privileges a state of

62
00:01:52,890 --> 00:01:54,570
0,90 90,750 750,1470 1470,1620 1620,1680
the hardware is going to

63
00:01:54,570 --> 00:01:55,410
0,90 90,270 270,660 660,810 810,840
be very important because a

64
00:01:55,410 --> 00:01:56,100
0,150 150,210 210,300 300,390 390,690
lot of what we're doing

65
00:01:56,100 --> 00:01:57,450
0,150 150,360 360,480 780,1290 1290,1350
is kind of changing the

66
00:01:57,450 --> 00:01:58,860
0,360 360,750 750,1050
hardware state from.

67
00:01:59,160 --> 00:02:00,780
0,360 360,870 870,1020 1020,1260 1260,1620
State appropriate for running user

68
00:02:00,780 --> 00:02:03,690
0,480 480,750 750,1260 1770,2460 2460,2910
code to a state appropriate

69
00:02:03,690 --> 00:02:05,860
0,120 120,360 360,660 660,1260
for running kernel code.

70
00:02:06,060 --> 00:02:07,020
0,120 120,450 450,540 540,630 630,960
The state that we care

71
00:02:07,020 --> 00:02:10,080
0,540 870,1530 1800,2280 2280,2700 2700,3060
about a biggest stages, maybe

72
00:02:10,080 --> 00:02:13,180
0,660 690,1470 1470,1800 1800,2880
the 32 user registers.

73
00:02:13,440 --> 00:02:15,030
0,300 300,360 360,690 690,960 960,1590
As you remember this from

74
00:02:15,480 --> 00:02:17,700
0,420 420,1110 1260,1560 1560,1830 1890,2220
monday's discussion, we have all

75
00:02:17,700 --> 00:02:19,050
0,90 90,390 390,900 900,1110 1110,1350
the user registers seems like

76
00:02:19,050 --> 00:02:21,270
0,270 270,1050 1050,1200 1200,1380 1380,2220
a zero and a one.

77
00:02:22,910 --> 00:02:23,930
0,420 420,600 600,750 750,780 780,1020
Risk five has a whole

78
00:02:23,930 --> 00:02:25,040
0,210 210,270 270,510 510,1020 1020,1110
lot of these 32 in

79
00:02:25,040 --> 00:02:26,990
0,990 1050,1350 1350,1440 1440,1560 1560,1950
total and we can expect

80
00:02:26,990 --> 00:02:27,860
0,210 210,420 420,510 510,690 690,870
user code to use all

81
00:02:27,860 --> 00:02:28,560
0,90 90,330
of them.

82
00:02:28,720 --> 00:02:29,290
0,210 210,330 330,390 390,480 480,570
It's going to get the

83
00:02:29,290 --> 00:02:30,550
0,270 270,810 810,960 960,1050 1050,1260
highest performance if it uses

84
00:02:30,550 --> 00:02:32,110
0,210 210,330 780,1170 1170,1500 1500,1560
all of them, many of

85
00:02:32,110 --> 00:02:33,340
0,90 90,240 240,630 630,1140 1140,1230
them have special purposes, a

86
00:02:33,340 --> 00:02:35,050
0,150 150,360 360,480 480,930 1050,1710
few which will see a

87
00:02:35,050 --> 00:02:36,460
0,420 420,750 750,1050 1050,1320 1320,1410
particularly interesting one is the

88
00:02:36,460 --> 00:02:38,290
0,450 450,1050 1080,1260 1260,1590 1590,1830
stack pointer is actually one

89
00:02:38,290 --> 00:02:40,480
0,90 90,360 360,1080 1290,1860 1860,2190
of these 32 general purpose

90
00:02:40,480 --> 00:02:41,480
0,810
registers.

91
00:02:42,340 --> 00:02:45,070
0,600 2070,2400 2400,2490 2490,2580 2580,2730
Um, okay, we have these

92
00:02:45,070 --> 00:02:47,830
0,870 870,1230 1230,1590 1590,2160 2280,2760
registers including stack pointer, um,

93
00:02:47,860 --> 00:02:49,390
0,180 180,240 240,720 720,1170 1170,1530
there's a separate program counter

94
00:02:49,390 --> 00:02:51,460
0,750 780,930 930,1020 1020,1740
register in the hardware.

95
00:02:51,580 --> 00:02:54,400
0,660 930,1530 1530,1650 1650,1980 1980,2820
Um, there's the current mode

96
00:02:54,430 --> 00:02:56,650
0,360 810,1020 1020,1830 1830,1920 1920,2220
either a supervisor or user

97
00:02:56,650 --> 00:02:57,820
0,90 90,150 150,390 390,750 780,1170
and of course it's user

98
00:02:57,820 --> 00:02:58,540
0,480
mode.

99
00:02:58,700 --> 00:03:00,260
0,270 270,750 750,930 930,1080 1080,1560
We're executing up in the

100
00:03:00,410 --> 00:03:01,560
0,750
shell.

101
00:03:02,840 --> 00:03:03,590
0,270 270,420 420,540 540,690 690,750
Um, and then there's a

102
00:03:03,590 --> 00:03:05,660
0,240 240,420 420,1050 1050,1440 1440,2070
bunch of registers special registers

103
00:03:05,660 --> 00:03:07,790
0,210 210,960 1140,1470 1470,1770 1770,2130
that control how the CPU

104
00:03:07,790 --> 00:03:09,110
0,330 330,480 480,720 720,810 810,1320
works like there's the sappy

105
00:03:09,110 --> 00:03:11,000
0,540 540,720 1020,1500 1500,1560 1560,1890
register that contains a pointer

106
00:03:11,000 --> 00:03:13,220
0,180 180,750 930,1350 1350,1890 1980,2220
to the page table and

107
00:03:13,220 --> 00:03:13,880
0,150 150,360 360,450 450,600 600,660
it'll turn out there's a

108
00:03:13,880 --> 00:03:14,630
0,240 240,330 330,600 600,720 720,750
couple of others that are

109
00:03:14,630 --> 00:03:16,370
0,360 360,780 780,900 900,1050 1050,1740
super important for this discussion,

110
00:03:16,550 --> 00:03:18,560
0,480 480,840 840,1140 1140,1680 1860,2010
there's St vac which is

111
00:03:18,560 --> 00:03:19,180
0,240
the.

112
00:03:19,180 --> 00:03:21,130
0,300 300,840 870,1230 1230,1380 1380,1950
Um and address the instruction

113
00:03:21,130 --> 00:03:23,140
0,210 660,1020 1020,1200 1200,1620 1620,2010
that um should handle traps

114
00:03:23,140 --> 00:03:24,900
0,60 60,150 150,630 930,1500
in the colonel, um.

115
00:03:25,450 --> 00:03:27,730
0,390 390,780 780,1380 1380,1650 1650,2280
There's a register called CPC

116
00:03:27,730 --> 00:03:29,110
0,150 150,690 690,780 780,1110 1110,1380
for saving the program counter

117
00:03:29,110 --> 00:03:30,490
0,270 270,330 330,690 690,960 1140,1380
during a trap and we'll

118
00:03:30,490 --> 00:03:31,660
0,150 150,330 330,630 630,780 780,1170
see there's another one called

119
00:03:32,110 --> 00:03:34,240
0,240 240,1110 1530,1710 1710,1920 1920,2130
s scratch is also very

120
00:03:34,240 --> 00:03:35,530
0,450 750,960 960,1080 1080,1140 1140,1290
important, so this is the

121
00:03:35,530 --> 00:03:37,180
0,450 450,510 510,600 600,840 840,1650
state of the running machine

122
00:03:37,360 --> 00:03:38,320
0,540 540,600 600,810 810,900 900,960
at the time of the

123
00:03:38,320 --> 00:03:39,520
0,330 330,690 690,900 900,990 990,1200
system call and we actually

124
00:03:39,520 --> 00:03:40,450
0,180 180,270 270,690 690,720 720,930
need to change a bunch

125
00:03:40,450 --> 00:03:41,410
0,60 60,210 210,630 630,720 720,960
of this state, or do

126
00:03:41,410 --> 00:03:42,940
0,630 630,780 780,870 870,1320 1320,1530
things to the state as

127
00:03:42,940 --> 00:03:44,410
0,390 390,660 780,1200 1200,1380 1380,1470
part of getting into the

128
00:03:44,410 --> 00:03:47,200
0,540 870,1440 1800,2070 2070,2400 2400,2790
kernel, um and setting ourself

129
00:03:47,200 --> 00:03:48,340
0,210 210,330 330,510 510,720 720,1140
up to run just ordinary

130
00:03:48,340 --> 00:03:49,720
0,240 240,780 780,870 870,930 930,1380
c functions in the kernel.

131
00:03:50,210 --> 00:03:51,950
0,420 420,540 540,810 1290,1680 1680,1740
Certainly at the instant of

132
00:03:51,950 --> 00:03:53,450
0,90 90,630 900,1170 1170,1260 1260,1500
the trap all the state

133
00:03:53,450 --> 00:03:54,260
0,60 60,120 120,540 540,660 660,810
of the CPU is set

134
00:03:54,260 --> 00:03:55,400
0,90 90,180 180,360 360,630 630,1140
up to run user code

135
00:03:55,430 --> 00:03:57,560
0,990 1020,1230 1230,1530 1530,1830
not not kernel code.

136
00:03:57,880 --> 00:03:58,720
0,240 240,330 330,570 570,660 660,840
So the things that are

137
00:03:58,720 --> 00:03:59,590
0,180 180,240 240,390 390,480 480,870
going to need to happen

138
00:03:59,590 --> 00:04:00,490
0,120 120,300 300,360 360,420 420,900
is kind of a preview

139
00:04:00,490 --> 00:04:01,390
0,120 120,240 240,330 330,570 570,900
of what I'll talk about

140
00:04:01,720 --> 00:04:03,970
0,510 570,1050 1050,1170 1170,1500 1770,2250
a one is that um,

141
00:04:04,000 --> 00:04:04,990
0,240 240,420 420,510 510,750 750,990
we need to save all

142
00:04:04,990 --> 00:04:06,820
0,420 420,990 990,1320 1350,1530 1530,1830
32 registers because we want

143
00:04:06,820 --> 00:04:09,460
0,540 810,1770 1800,1920 1920,2250 2250,2640
to resume the user code

144
00:04:09,460 --> 00:04:11,800
0,1050 1200,2040 2040,2100 2100,2250 2250,2340
transparently particularly if there's a

145
00:04:11,800 --> 00:04:12,970
0,360 360,720 720,870 870,960 960,1170
device interrupt which the user

146
00:04:12,970 --> 00:04:14,740
0,240 240,480 480,1140 1470,1680 1680,1770
code isn't expecting and we

147
00:04:14,740 --> 00:04:15,250
0,150 150,210 210,270 270,420 420,510
want to be able to

148
00:04:15,250 --> 00:04:16,120
0,90 90,180 180,450 450,780 780,870
have the kernel serve the

149
00:04:16,120 --> 00:04:17,380
0,390 390,480 480,780
interrupt, and then.

150
00:04:17,440 --> 00:04:19,330
0,690 690,870 870,1170 1170,1500 1500,1890
Resume the user code without

151
00:04:19,330 --> 00:04:20,710
0,150 150,570 570,720 720,1260 1260,1380
ever noticing any difference and

152
00:04:20,710 --> 00:04:21,610
0,120 120,300 300,390 390,570 570,900
that means that these 32

153
00:04:21,610 --> 00:04:23,170
0,510 510,750 750,840 840,1440 1440,1560
registers can't be disturbed by

154
00:04:23,170 --> 00:04:25,120
0,90 90,540 930,1350 1620,1890 1890,1950
the kernel which since the

155
00:04:25,120 --> 00:04:26,080
0,300 300,450 450,690 690,840 840,960
kernel, you need to use

156
00:04:26,080 --> 00:04:27,100
0,90 90,600 600,690 690,930 930,1020
the registers it has to

157
00:04:27,100 --> 00:04:28,450
0,330 330,450 450,570 570,900 900,1350
save them all somewhere first

158
00:04:28,450 --> 00:04:29,590
0,180 180,330 330,390 390,480 480,1140
these need to be saved.

159
00:04:30,460 --> 00:04:32,050
0,390 540,780 780,1080 1080,1350 1350,1590
I'm the program counter also

160
00:04:32,050 --> 00:04:33,250
0,180 180,240 240,360 360,720 720,1200
needs to be saved somewhere

161
00:04:33,310 --> 00:04:35,350
0,240 240,330 330,750 1140,1260 1260,2040
because we need a user,

162
00:04:35,530 --> 00:04:36,310
0,120 120,420 420,510 510,570 570,780
it's almost like a user

163
00:04:36,310 --> 00:04:38,050
0,480 480,780 1170,1350 1350,1590 1590,1740
register, so, um, we need

164
00:04:38,050 --> 00:04:39,760
0,90 90,420 420,930 930,1260 1380,1710
to continue executing the user

165
00:04:39,760 --> 00:04:40,930
0,270 270,390 390,510 510,750 750,1170
program where it left off,

166
00:04:41,140 --> 00:04:42,880
0,360 360,720 720,840 840,1560 1590,1740
we switch the mode to

167
00:04:42,880 --> 00:04:44,220
0,600 600,1140
supervisor mode.

168
00:04:44,600 --> 00:04:46,550
0,540 1200,1500 1500,1680 1680,1740 1740,1950
Because we need to use

169
00:04:46,550 --> 00:04:47,960
0,270 270,780 780,870 870,930 930,1410
various privileges in the colonel,

170
00:04:48,920 --> 00:04:50,260
0,450 480,1110
um just.

171
00:04:50,520 --> 00:04:52,290
0,300 300,990 990,1290 1290,1650 1650,1770
A page table pointer is

172
00:04:52,290 --> 00:04:53,610
0,330 330,690 690,900 900,990 990,1320
currently pointing towards the user

173
00:04:53,610 --> 00:04:55,950
0,330 330,690 690,1080 1110,1440 1440,2340
page table which only contains

174
00:04:56,310 --> 00:04:57,570
0,330 360,600 600,660 660,1110 1110,1260
a just the mapping is

175
00:04:57,570 --> 00:04:59,160
0,120 120,420 420,930 930,1350
that user programs need.

176
00:04:59,350 --> 00:05:00,310
0,360 360,540 540,630 630,750 750,960
Plus one or two more

177
00:05:00,310 --> 00:05:01,480
0,120 120,210 210,480 480,720 810,1170
as we'll see, but the

178
00:05:01,480 --> 00:05:02,530
0,240 240,450 450,660 660,810 810,1050
user page table does not

179
00:05:02,530 --> 00:05:03,880
0,420 420,600 630,1140 1140,1260 1260,1350
contain the mappings for the

180
00:05:03,880 --> 00:05:05,020
0,300 300,390 390,480 480,810 810,1140
bulk of the kernel data

181
00:05:05,320 --> 00:05:06,010
0,150 150,240 240,360 360,450 450,690
so we need to switch

182
00:05:06,010 --> 00:05:07,540
0,330 330,720 720,1050 1050,1170 1170,1530
page tables before we can

183
00:05:07,600 --> 00:05:09,260
0,390 390,660 660,930 930,1380
run most kernel code.

184
00:05:10,430 --> 00:05:11,420
0,270 270,420 420,510 510,870 870,990
We need to switch the

185
00:05:11,420 --> 00:05:12,530
0,420 420,780 780,870 870,1050 1050,1110
stack pointer to point to

186
00:05:12,530 --> 00:05:13,580
0,60 60,510 510,870 870,990 990,1050
a stack that's in the

187
00:05:13,580 --> 00:05:15,080
0,300 300,660 660,960 1020,1380 1380,1500
kernel somewhere because we need

188
00:05:15,080 --> 00:05:16,520
0,90 90,450 450,540 540,1080 1110,1440
to stack the call c

189
00:05:16,520 --> 00:05:17,560
0,450 450,780
functions on.

190
00:05:17,920 --> 00:05:19,220
0,450
I'm.

191
00:05:19,830 --> 00:05:20,700
0,210 210,480 480,570 570,720 720,870
And finally, we need to

192
00:05:20,700 --> 00:05:22,320
0,360 360,1080 1110,1290 1290,1410 1410,1620
jump into once we've set

193
00:05:22,320 --> 00:05:23,250
0,90 90,270 270,450 450,540 540,930
all this up and switched

194
00:05:23,250 --> 00:05:24,900
0,240 240,660 690,870 870,1050 1050,1650
all this all these resources

195
00:05:24,900 --> 00:05:26,790
0,120 120,450 690,1290 1290,1620 1650,1890
to be appropriate for use

196
00:05:26,790 --> 00:05:28,110
0,90 90,150 150,630 750,1170 1170,1320
in the kernel, we need

197
00:05:28,110 --> 00:05:29,400
0,90 90,480 480,750 750,1080 1080,1290
to jump to colonel c

198
00:05:29,400 --> 00:05:30,780
0,240 240,420 510,930 930,1080 1080,1380
code, and once we're in

199
00:05:30,780 --> 00:05:33,240
0,300 300,1380 1740,2070 2070,2190 2190,2460
c code, life is much

200
00:05:33,240 --> 00:05:36,240
0,720 2190,2460 2460,2550 2550,2880 2880,3000
more sort of business as

201
00:05:36,240 --> 00:05:37,380
0,420 420,540 540,690 690,900 900,1140
usual, we're just running A

202
00:05:37,380 --> 00:05:38,700
0,210 210,570 570,630 630,780 780,1320
C program in this kernel,

203
00:05:38,940 --> 00:05:40,320
0,690 690,840 840,960 960,1260 1260,1380
and so far today at

204
00:05:40,320 --> 00:05:41,700
0,240 240,810 810,1020 1020,1260 1260,1380
least, we'll talk about what

205
00:05:41,700 --> 00:05:44,460
0,90 90,570 900,1800 1890,2370 2370,2760
the kernel does secret later,

206
00:05:44,490 --> 00:05:46,470
0,450 450,960 1110,1380 1380,1860 1860,1980
but today the discussion is

207
00:05:46,470 --> 00:05:47,190
0,210 210,360 360,450 450,570 570,720
really how to get from

208
00:05:47,190 --> 00:05:48,420
0,210 210,630 630,810 810,900 900,1230
user space into the kernel

209
00:05:48,420 --> 00:05:49,410
0,180 180,270 270,720 720,870 870,990
into a position where we

210
00:05:49,410 --> 00:05:51,960
0,150 150,810 1230,1560 1590,1890 1890,2550
can run A C code

211
00:05:52,020 --> 00:05:52,940
0,180 180,270 270,660
in the kernel.

212
00:05:53,510 --> 00:05:54,500
0,300 420,690 690,720 720,900 900,990
Um, there's a couple of

213
00:05:54,500 --> 00:05:56,420
0,480 480,840 840,930 930,1740 1740,1920
high-level goals that constrain our

214
00:05:56,420 --> 00:05:58,850
0,480 480,930 930,1020 1020,1500 1890,2430
design options for this one

215
00:05:58,850 --> 00:06:00,320
0,150 150,450 660,810 810,1380 1380,1470
is that for security and

216
00:06:00,320 --> 00:06:01,730
0,540 540,690 690,1020 1020,1230 1230,1410
isolation, we really don't want

217
00:06:01,730 --> 00:06:03,800
0,90 90,360 360,720 720,1260 1260,2070
to let user code interfere

218
00:06:03,800 --> 00:06:06,140
0,510 510,990 990,1380 1380,1680 1680,2340
with this user kernel transition

219
00:06:06,140 --> 00:06:06,950
0,120 120,180 180,330 330,540 540,810
in a way that could

220
00:06:06,950 --> 00:06:08,570
0,90 90,540 540,630 630,1320 1440,1620
be damaging to security and

221
00:06:08,570 --> 00:06:10,250
0,90 90,240 240,480 480,750 1080,1680
so that means {that's -}

222
00:06:10,250 --> 00:06:11,600
0,0 0,330 330,390 390,1110 1110,1350
a sort of hardware and

223
00:06:11,870 --> 00:06:14,060
0,780 810,1680 1680,1770 1770,1860 1860,2190
kernel mechanisms that are involved

224
00:06:14,060 --> 00:06:15,830
0,60 60,570 690,1050 1050,1410 1410,1770
in traps really can't count

225
00:06:15,830 --> 00:06:17,750
0,360 390,870 870,1050 1050,1320 1320,1920
on anything from user space,

226
00:06:17,870 --> 00:06:18,980
0,180 180,270 270,570 570,810 810,1110
you know we can't assume

227
00:06:19,010 --> 00:06:20,540
0,450 450,690 690,900 900,1440 1440,1530
anything about these registers, they

228
00:06:20,540 --> 00:06:21,440
0,150 150,240 240,450 450,810 810,900
could be just filled with

229
00:06:21,440 --> 00:06:24,440
0,450 450,870 870,1830 2040,2580 2760,3000
terribly malicious values, um, so

230
00:06:24,440 --> 00:06:25,940
0,420 420,630 720,1110 1110,1260 1260,1500
basically the X six trap

231
00:06:25,940 --> 00:06:26,960
0,240 240,420 420,600 600,750 750,1020
handler doesn't really even look

232
00:06:26,960 --> 00:06:28,550
0,120 120,540 570,1110 1110,1320 1320,1590
at these registers just saves

233
00:06:28,550 --> 00:06:30,480
0,120 120,540 1170,1650
them away, um.

234
00:06:31,340 --> 00:06:32,960
0,360 360,690 960,1320 1320,1440 1440,1620
Okay so we're going to

235
00:06:32,990 --> 00:06:34,460
0,300 300,360 360,450 450,1080 1350,1470
want to be careful to

236
00:06:34,460 --> 00:06:35,960
0,330 330,930 930,1140 1140,1260 1260,1500
preserve isolation during this trap

237
00:06:35,960 --> 00:06:37,220
0,510 510,1080
mechanism against.

238
00:06:37,290 --> 00:06:40,290
0,960 990,1650 1650,1920 1920,2370 2610,3000
Intentionally malicious user code and

239
00:06:40,290 --> 00:06:41,430
0,60 60,210 210,330 330,480 480,1140
the other thing that's important

240
00:06:41,430 --> 00:06:42,720
0,180 180,450 630,1110 1110,1230 1230,1290
is that we want to

241
00:06:42,720 --> 00:06:44,130
0,90 90,750 750,840 840,1080 1080,1410
be transparent to user code,

242
00:06:44,160 --> 00:06:44,820
0,150 150,300 300,390 390,480 480,660
we'd like to be able

243
00:06:44,820 --> 00:06:46,530
0,360 570,1020 1020,1110 1110,1530 1530,1710
to take the trap and

244
00:06:46,530 --> 00:06:47,190
0,90 90,180 180,510 510,600 600,660
do our business in the

245
00:06:47,190 --> 00:06:48,720
0,330 330,540 660,1200 1200,1260 1260,1530
kernel and resume the user

246
00:06:48,720 --> 00:06:49,830
0,210 210,540 540,660 660,870 870,1110
code without it ever having

247
00:06:49,830 --> 00:06:51,120
0,60 60,480 480,630 630,1020 1020,1290
to notice that anything funny

248
00:06:51,120 --> 00:06:51,840
0,570
happened.

249
00:06:52,060 --> 00:06:52,720
0,150 150,300 300,480 480,540 540,660
And that's just to make

250
00:06:52,720 --> 00:06:53,650
0,120 120,420 420,510 510,690 690,930
it easier to write user

251
00:06:53,650 --> 00:06:56,340
0,450
code.

252
00:06:56,770 --> 00:06:58,570
0,300 600,840 840,1140 1140,1230 1230,1800
And, um, something to note

253
00:06:58,600 --> 00:07:00,400
0,570 600,840 840,1140 1140,1410 1410,1800
Wu, um, we care about

254
00:07:00,400 --> 00:07:02,050
0,600 600,1110 1110,1320 1320,1560 1560,1650
isolation security here today, we're

255
00:07:02,050 --> 00:07:03,310
0,150 150,300 300,570 570,840 840,1260
just gonna talk about the

256
00:07:03,460 --> 00:07:04,380
0,450
um.

257
00:07:04,690 --> 00:07:05,560
0,180 180,330 330,390 390,810 810,870
Those sort of aspects of

258
00:07:05,560 --> 00:07:06,820
0,420 420,510 510,810 810,1110 1110,1260
security that involves getting into

259
00:07:06,820 --> 00:07:08,290
0,90 90,540 570,840 840,900 900,1470
the kernel, but of course

260
00:07:08,320 --> 00:07:10,210
0,330 330,570 570,780 780,1620 1620,1890
this system called implementations, the

261
00:07:10,210 --> 00:07:12,010
0,570 570,990 990,1650 1650,1740 1740,1800
actual right implementation in the

262
00:07:12,010 --> 00:07:13,930
0,510 660,1380 1380,1770 1770,1860 1860,1920
kernel, also everything in the

263
00:07:13,930 --> 00:07:15,280
0,270 270,510 510,600 600,780 780,1350
kernel has to be careful

264
00:07:15,310 --> 00:07:16,330
0,150 150,210 210,300 300,570 570,1020
has to be written carefully

265
00:07:16,330 --> 00:07:19,570
0,150 150,660 660,1170 1980,2430 2670,3240
and securely also, so even

266
00:07:19,570 --> 00:07:21,250
0,120 120,330 330,1140 1380,1590 1590,1680
if this transition into the

267
00:07:21,250 --> 00:07:23,170
0,360 360,600 630,1020 1020,1620 1650,1920
kernel is perfectly secure, the

268
00:07:23,170 --> 00:07:23,980
0,180 180,360 360,420 420,480 480,810
whole rest of the kernel

269
00:07:23,980 --> 00:07:25,810
0,270 270,360 360,720 900,1230 1230,1830
has to be written securely

270
00:07:25,810 --> 00:07:27,760
0,210 210,390 390,1050 1050,1260 1530,1950
and so mindful that user

271
00:07:27,760 --> 00:07:28,570
0,270 270,420 420,540 540,750 750,810
code may be trying to

272
00:07:28,570 --> 00:07:29,200
0,270 270,360
trick it.

273
00:07:29,910 --> 00:07:30,480
0,60
Yeah.

274
00:07:30,810 --> 00:07:33,630
0,480 1170,1470 1470,2280 2280,2670 2670,2820
I'm a particularly important thing

275
00:07:33,630 --> 00:07:34,320
0,60 60,180 180,240 240,450 450,690
I want to talk about

276
00:07:34,320 --> 00:07:35,250
0,90 90,390 390,510 510,750 750,930
is what it is that

277
00:07:35,250 --> 00:07:39,420
0,90 90,870 870,1650 1740,2940 3930,4170
the mode flag controls this

278
00:07:39,420 --> 00:07:40,770
0,390 390,630 630,900 900,1290 1290,1350
mode is either user or

279
00:07:40,770 --> 00:07:43,260
0,630 630,690 690,1080 1080,1800 2100,2490
supervisor, of course user whatever

280
00:07:43,260 --> 00:07:44,910
0,300 300,780 780,990 1230,1440 1440,1650
user space and the mode

281
00:07:44,910 --> 00:07:46,170
0,210 210,300 300,450 450,540 540,1260
flag is set to supervisor

282
00:07:46,170 --> 00:07:47,340
0,150 150,540 540,630 630,690 690,1170
were executing in the kernel,

283
00:07:47,460 --> 00:07:48,480
0,360 360,480 480,810 810,870 870,1020
but it's important to know

284
00:07:48,480 --> 00:07:52,710
0,810 1230,1980 2190,3270 3300,3510 3510,4230
exactly what privileges we gain

285
00:07:52,740 --> 00:07:53,940
0,180 180,570 570,660 660,1020 1020,1200
by changing the mode from

286
00:07:53,940 --> 00:07:55,500
0,300 300,390 390,1140 1200,1500 1500,1560
user to supervisor, and it

287
00:07:55,500 --> 00:07:57,080
0,210 210,480 750,1290
turns out I'm.

288
00:07:57,320 --> 00:07:59,690
0,300 300,540 540,1020 1020,1320 1620,2370
These extra privileges are fairly

289
00:07:59,720 --> 00:08:01,580
0,930 1200,1380 1380,1590 1590,1680 1680,1860
restrictive, um that is what

290
00:08:01,580 --> 00:08:02,960
0,150 150,270 270,570 570,720 720,1380
you can do in supervisor

291
00:08:02,960 --> 00:08:04,160
0,300 300,390 390,900 900,1080 1080,1200
moves you couldn't do in

292
00:08:04,160 --> 00:08:06,680
0,300 300,720 1020,1620 1740,2190 2190,2520
user mode, I'm not maybe

293
00:08:06,680 --> 00:08:07,420
0,540
as.

294
00:08:07,710 --> 00:08:08,600
0,690
Yeah.

295
00:08:09,620 --> 00:08:10,670
0,240 240,660 660,750 750,840 840,1050
A privilege as you might

296
00:08:10,670 --> 00:08:11,870
0,240 240,360 360,510 510,600 600,1200
think so, this is supervisor

297
00:08:11,870 --> 00:08:14,750
0,540 1020,1770 1770,1890 1890,1980 1980,2880
mode exactly what it controls.

298
00:08:15,760 --> 00:08:18,070
0,540 900,1650 1650,1860 1860,1950 1950,2310
Um, one thing it does

299
00:08:18,070 --> 00:08:19,960
0,510 960,1140 1140,1230 1230,1620 1620,1890
is you can now read

300
00:08:19,960 --> 00:08:22,240
0,150 150,750 780,900 900,1320 1320,2280
and write the control registers.

301
00:08:23,110 --> 00:08:23,800
0,390
And.

302
00:08:24,290 --> 00:08:25,970
0,600 720,1020 1020,1170 1170,1530 1530,1680
Um that is, if your

303
00:08:25,970 --> 00:08:27,170
0,540 540,750 750,870 870,1020 1020,1200
supervisor mode, you can read

304
00:08:27,170 --> 00:08:28,720
0,90 90,300 300,1260
and write sappy.

305
00:08:29,110 --> 00:08:30,730
0,270 480,870 870,1110 1110,1410 1410,1620
A page table pointer, this

306
00:08:30,730 --> 00:08:32,650
0,390 390,630 630,900 900,1110 1110,1920
estee beck pointer which controls

307
00:08:32,740 --> 00:08:34,570
0,540 540,900 900,1140 1140,1230 1230,1830
where traps going the colonel,

308
00:08:34,660 --> 00:08:35,800
0,870
um.

309
00:08:36,080 --> 00:08:37,610
0,210 210,750 750,1020 1140,1440 1440,1530
This register that holds the

310
00:08:37,610 --> 00:08:38,960
0,420 420,750 750,1050 1050,1290 1290,1350
save program counter during a

311
00:08:38,960 --> 00:08:40,720
0,330 330,390 390,660 660,1500
trap in this scratch.

312
00:08:40,920 --> 00:08:42,450
0,480 480,690 690,750 750,930 930,1530
Register plus a few others

313
00:08:42,930 --> 00:08:44,160
0,240 240,810 810,1020 1020,1140 1140,1230
so supervisor couldn't read and

314
00:08:44,160 --> 00:08:45,510
0,150 150,330 330,960 960,1140 1140,1350
write these registers and user

315
00:08:45,510 --> 00:08:47,460
0,240 240,360 360,720 1080,1620 1620,1950
code could not the only

316
00:08:47,460 --> 00:08:48,870
0,150 150,390 390,990 990,1290 1290,1410
other thing supervisor code can

317
00:08:48,870 --> 00:08:50,910
0,540 570,1290 1380,1680 1680,1830 1830,2040
do is, um, it can

318
00:08:50,910 --> 00:08:53,180
0,780 810,1680 1680,2160
use Pte 's.

319
00:08:54,620 --> 00:08:56,990
0,990 1230,1500 1500,1710 1710,1770 1770,2370
Um, they have the Pte

320
00:08:56,990 --> 00:08:58,260
0,180 180,630 630,1020
you flag set.

321
00:08:59,100 --> 00:08:59,580
0,150 150,270 270,330 330,420 420,480
I don't know if you

322
00:08:59,580 --> 00:09:00,810
0,330 330,450 450,660 660,840 840,1230
remember but there's this petey

323
00:09:00,810 --> 00:09:02,190
0,210 210,780 900,1110 1110,1320 1320,1380
you flag be set or

324
00:09:02,190 --> 00:09:03,510
0,240 240,450 450,540 540,960 960,1320
not set on each page

325
00:09:03,510 --> 00:09:05,700
0,270 270,720
table entry.

326
00:09:05,870 --> 00:09:07,880
0,210 210,780 780,1200 1350,1770 1770,2010
A flag that has this

327
00:09:07,880 --> 00:09:10,430
0,450 450,960 1440,2130 2160,2370 2370,2550
sari a sari can use

328
00:09:10,430 --> 00:09:11,740
0,1050
pdfs.

329
00:09:12,450 --> 00:09:13,890
0,240 240,540 780,1140 1140,1350 1350,1440
A they don't have the

330
00:09:13,890 --> 00:09:15,870
0,390 390,750 840,1200 1200,1590 1620,1980
ppt you flag set if

331
00:09:15,870 --> 00:09:17,070
0,120 120,630 630,780 780,1110 1110,1200
the Pte you flag is

332
00:09:17,070 --> 00:09:18,240
0,360 360,480 480,720 720,870 870,1170
set, it means that user

333
00:09:18,240 --> 00:09:19,290
0,300 300,450 450,630 630,780 780,1050
code can use that page

334
00:09:19,290 --> 00:09:21,180
0,240 240,690 1380,1530 1530,1650 1650,1890
table entry, if this flag

335
00:09:21,180 --> 00:09:22,050
0,270 270,480 480,540 540,630 630,870
isn't set in a page

336
00:09:22,050 --> 00:09:23,550
0,240 240,480 480,540 540,870 900,1500
table entry, it means only

337
00:09:23,580 --> 00:09:24,990
0,660 660,900 900,1080 1080,1260 1260,1410
supervisor mode can use it.

338
00:09:25,560 --> 00:09:27,390
0,480 990,1170 1170,1320 1320,1650 1650,1830
Um, and you will see

339
00:09:27,390 --> 00:09:29,040
0,210 210,840 990,1200 1200,1380 1380,1650
that's important a little bit

340
00:09:29,040 --> 00:09:29,640
0,300
but.

341
00:09:30,420 --> 00:09:31,200
0,300 300,330 330,510 510,600 600,780
These are really the only

342
00:09:31,200 --> 00:09:32,370
0,210 210,300 300,840 840,1050 1050,1170
things that supervisor mode can

343
00:09:32,370 --> 00:09:33,180
0,120 120,210 210,390 390,510 510,810
do it can't do anything

344
00:09:33,180 --> 00:09:34,830
0,210 210,270 270,840 840,1050 1050,1650
else in particular, for example

345
00:09:35,280 --> 00:09:37,980
0,270 270,960 960,1470 1470,1950 2010,2700
a supervisor mode code can't

346
00:09:37,980 --> 00:09:39,660
0,450 480,900 900,990 990,1200 1200,1680
just read and write arbitrary

347
00:09:39,660 --> 00:09:40,720
0,960
addresses.

348
00:09:40,810 --> 00:09:42,910
0,450 480,750 750,1110 1110,1710 1710,2100
Um say physical addresses no

349
00:09:43,330 --> 00:09:45,280
0,600 600,1140 1200,1590 1590,1890 1890,1950
supervisor mode is forced to

350
00:09:45,280 --> 00:09:46,360
0,120 120,270 270,360 360,630 630,1080
go through the page table

351
00:09:46,420 --> 00:09:47,650
0,240 240,360 360,540 540,720 720,1230
just like any other code

352
00:09:47,740 --> 00:09:49,240
0,390 390,480 480,570 570,930 930,1500
a if a virtual address

353
00:09:49,270 --> 00:09:50,290
0,270 270,360 360,420 420,690 720,1020
isn't in the page isn't

354
00:09:50,290 --> 00:09:51,370
0,90 90,180 180,480 480,750 750,1080
in the current page table

355
00:09:51,370 --> 00:09:52,660
0,330 330,420 420,570 570,930 930,1290
pointed to by sat p.

356
00:09:53,050 --> 00:09:54,700
0,570 990,1260 1260,1380 1380,1440 1440,1650
Um, or if it has

357
00:09:54,700 --> 00:09:55,780
0,60 60,360 360,570 570,780 780,1080
A P E you bit

358
00:09:55,810 --> 00:09:57,580
0,630 630,1110 1140,1380 1380,1650 1650,1770
flags set which means it's

359
00:09:57,580 --> 00:09:58,570
0,90 90,360 360,660 660,810 810,990
the user P E then

360
00:09:58,570 --> 00:10:00,640
0,540 540,1020 1020,1650 1650,1860 1860,2070
supervisor mode cannot use that

361
00:10:00,640 --> 00:10:03,130
0,660 900,1140 1140,1320 1530,2160 2280,2490
address so we're even in

362
00:10:03,130 --> 00:10:05,380
0,630 630,840 840,960 960,1860 1950,2250
supervisor mode were restricted to

363
00:10:05,380 --> 00:10:07,720
0,780 810,1410 1410,2190
whatever virtual address.

364
00:10:07,850 --> 00:10:09,170
0,420 420,840 840,930 930,1170 1170,1320
Virtual addresses were set up

365
00:10:09,170 --> 00:10:10,490
0,60 60,180 180,600 600,960 960,1320
on the current page table.

366
00:10:11,990 --> 00:10:14,420
0,630 1020,1440 1440,1620 1620,1920 2010,2430
Um, and that's it, so

367
00:10:14,450 --> 00:10:15,260
0,150 150,300 300,480 480,720 720,810
we were just allowed to

368
00:10:15,260 --> 00:10:16,160
0,150 150,360 360,630 630,810 810,900
do these things so you

369
00:10:16,160 --> 00:10:17,240
0,90 90,210 210,840
know we'll see.

370
00:10:17,330 --> 00:10:20,300
0,930 1470,1740 1740,2310 2310,2820 2820,2970
As a significant constraint on

371
00:10:20,300 --> 00:10:21,710
0,180 180,540 630,990 990,1290 1290,1410
what the trac code can

372
00:10:21,710 --> 00:10:22,400
0,450
do.

373
00:10:22,760 --> 00:10:24,140
0,570 630,840 840,960 960,1290 1290,1380
Um, when we're entering the

374
00:10:24,140 --> 00:10:24,700
0,330
kernel.

375
00:10:25,240 --> 00:10:27,310
0,270 270,390 390,600 600,990 1830,2070
Can't do just anything going

376
00:10:27,310 --> 00:10:28,600
0,90 90,570 570,660 660,930 1170,1290
to preview a bit I'm

377
00:10:28,600 --> 00:10:30,010
0,510 690,960 960,1170 1170,1230 1230,1410
gonna spend most of this

378
00:10:30,010 --> 00:10:30,940
0,660
lecture.

379
00:10:30,970 --> 00:10:32,740
0,210 210,390 390,540 540,1170 1200,1770
In G D be a

380
00:10:32,740 --> 00:10:35,080
0,360 360,930 930,1380 1380,1470 1470,2340
actually tracing through the execution.

381
00:10:35,560 --> 00:10:37,420
0,390 390,990 990,1380 1380,1680 1680,1860
Of a trap entry into

382
00:10:37,420 --> 00:10:39,520
0,90 90,480 480,570 570,1200 1620,2100
the kernel in return, um,

383
00:10:39,760 --> 00:10:40,420
0,300 300,420 420,480 480,540 540,660
this can be a lot

384
00:10:40,420 --> 00:10:43,240
0,60 60,900 1680,1890 1890,2190 2190,2820
of details in order to

385
00:10:43,240 --> 00:10:44,320
0,810
um.

386
00:10:45,300 --> 00:10:46,980
0,300 300,720 720,930 930,1110 1170,1680
Um, maybe sort of help

387
00:10:46,980 --> 00:10:48,240
0,480 510,990
you, um.

388
00:10:48,960 --> 00:10:51,390
0,360 360,540 540,750 750,1260 1980,2430
See head what's coming, we're

389
00:10:51,390 --> 00:10:52,160
0,150 150,510
gonna be.

390
00:10:52,840 --> 00:10:54,940
0,210 210,840 840,1410 1410,2010 2010,2100
A tracing a {shell's -}

391
00:10:54,940 --> 00:10:57,430
0,570 570,960 960,1290 1320,2010 2220,2490
call to a right which

392
00:10:57,430 --> 00:10:58,120
0,120 120,180 180,450 450,630 630,690
from the shell's point of

393
00:10:58,120 --> 00:10:59,140
0,90 90,210 210,480 480,660 660,1020
view is just A C

394
00:10:59,140 --> 00:11:00,130
0,360 360,600 600,750 750,930 930,990
function call as part of

395
00:11:00,130 --> 00:11:02,530
0,60 60,630 900,1320 1650,1920 1920,2400
the shell m in fact

396
00:11:02,710 --> 00:11:04,390
0,480 480,750 750,990 990,1440 1500,1680
right makes this a my

397
00:11:04,390 --> 00:11:06,100
0,600 600,660 660,990 990,1530 1560,1710
issues a system call by

398
00:11:06,100 --> 00:11:08,080
0,390 390,660 660,990 990,1710
issuing the call instruction.

399
00:11:09,680 --> 00:11:12,050
0,810 1050,1620 1740,2040 2040,2160 2160,2370
Which a switch is another

400
00:11:12,050 --> 00:11:13,970
0,330 330,1230 1230,1470 1470,1620 1620,1920
kernel supervisor mode where that

401
00:11:13,970 --> 00:11:15,590
0,420 420,1170 1170,1350 1350,1440 1440,1620
goes immediately, that is the

402
00:11:15,590 --> 00:11:17,990
0,390 390,720 720,1410 1710,1890 1890,2400
very first instruction is executed

403
00:11:17,990 --> 00:11:19,190
0,90 90,150 150,450 450,540 540,1200
in the kernel and supervisor

404
00:11:19,190 --> 00:11:21,230
0,420 600,990 990,1260 1260,1440 1440,2040
mode, a is a function

405
00:11:21,230 --> 00:11:23,540
0,210 210,330 330,1080 1200,2070
written in assembler called.

406
00:11:23,600 --> 00:11:25,040
0,300 300,660 660,1200
A user back.

407
00:11:26,140 --> 00:11:27,430
0,330 330,600 600,750 750,930 930,1290
And this is in the

408
00:11:27,520 --> 00:11:29,180
0,210 210,270 270,330 330,1350
part of the trampoline.

409
00:11:29,540 --> 00:11:30,440
0,690
I'm.

410
00:11:33,400 --> 00:11:35,380
0,210 210,510 510,1080 1080,1320 1320,1980
Um in trampoline {dot's -}

411
00:11:35,410 --> 00:11:36,250
0,150 150,210 210,480 480,750 750,840
in the kernel source, so

412
00:11:36,250 --> 00:11:37,390
0,150 150,480 480,720 720,990 990,1140
the very first code that's

413
00:11:37,390 --> 00:11:39,460
0,540 540,720 720,990 990,1380 1410,2070
executed, this user beck assembler

414
00:11:39,460 --> 00:11:40,440
0,630
function.

415
00:11:40,620 --> 00:11:43,590
0,510 1320,1650 1650,2310 2430,2640 2640,2970
M and next, um that

416
00:11:43,590 --> 00:11:44,910
0,390 390,690 690,930 930,1110 1110,1320
December function jumps into c

417
00:11:44,910 --> 00:11:46,620
0,330 330,420 420,1110 1170,1410 1410,1710
code, in particular a function

418
00:11:46,620 --> 00:11:47,960
0,210 210,510 510,1110
called user trap.

419
00:11:48,260 --> 00:11:49,920
0,630 630,900 900,1410
Entrap dot c.

420
00:11:50,850 --> 00:11:52,260
0,300 300,540 540,990 990,1230 1230,1410
And now we're getting into

421
00:11:52,260 --> 00:11:54,030
0,180 180,660 660,1080 1140,1650 1650,1770
c code, so things are

422
00:11:54,030 --> 00:11:55,830
0,240 240,510 510,570 570,1230 1410,1800
much easier to understand user

423
00:11:55,830 --> 00:11:57,720
0,240 240,630 630,1080 1140,1530 1530,1890
trap sees oh we're executing

424
00:11:57,720 --> 00:11:58,960
0,60 60,360 360,960
a system call.

425
00:11:58,990 --> 00:11:59,830
0,150 150,210 210,480 480,540 540,840
And it calls a function

426
00:11:59,830 --> 00:12:01,020
0,210 210,420 420,900
called sis call.

427
00:12:02,580 --> 00:12:03,390
0,240 240,450 450,630 630,750 750,810
Um, which looks at the

428
00:12:03,390 --> 00:12:04,230
0,300 300,480 480,720 720,780 780,840
system call number in a

429
00:12:04,230 --> 00:12:06,600
0,510 660,1350 1380,1830 1830,1920 1920,2370
table and calls the particular

430
00:12:06,600 --> 00:12:08,340
0,360 360,810 810,870 870,1380 1380,1740
function inside the kernel that

431
00:12:08,940 --> 00:12:10,290
0,450 450,600 600,900 900,1170 1170,1350
implements that system calling for

432
00:12:10,290 --> 00:12:11,190
0,210 210,360 360,480 480,570 570,900
us it's going to be

433
00:12:11,430 --> 00:12:12,510
0,480 480,600 600,780 780,930 930,1080
right and right, does this

434
00:12:12,510 --> 00:12:15,990
0,420 420,600 600,1080 1080,1650 2550,3480
business it happens to arrange

435
00:12:15,990 --> 00:12:17,460
0,270 270,720 720,1050 1050,1170 1170,1470
for whatever bytes were written

436
00:12:17,460 --> 00:12:19,020
0,210 240,660 660,750 750,810 810,1560
to appear on the console

437
00:12:20,130 --> 00:12:21,750
0,300 300,420 420,570 570,1230 1260,1620
and when it's finished it

438
00:12:21,750 --> 00:12:23,130
0,360 360,660 690,900 900,990 990,1380
returns back up to this

439
00:12:23,160 --> 00:12:25,290
0,390 390,600 600,1140 1500,1890 1890,2130
system call function and then

440
00:12:25,290 --> 00:12:26,670
0,150 150,450 450,600 600,1170 1230,1380
the system call function in

441
00:12:26,670 --> 00:12:27,570
0,180 180,270 270,630 630,810 810,900
order to return back to

442
00:12:27,570 --> 00:12:28,500
0,270 270,510 510,690 690,780 780,930
user space because we want

443
00:12:28,500 --> 00:12:29,640
0,90 90,870
to resume.

444
00:12:29,740 --> 00:12:31,540
0,300 300,480 480,600 600,1080 1320,1800
After this e call, um,

445
00:12:31,690 --> 00:12:32,890
0,270 270,300 300,510 510,570 570,1200
there's a bunch of stuff,

446
00:12:32,920 --> 00:12:33,820
0,300 300,570 570,660 660,810 810,900
we'll see, that has to

447
00:12:33,820 --> 00:12:34,580
0,450
happen.

448
00:12:34,790 --> 00:12:35,720
0,270 270,360 360,540 540,600 600,930
A in order to return

449
00:12:35,720 --> 00:12:36,620
0,60 60,330 330,720 720,870 870,900
to user space, there's a

450
00:12:36,620 --> 00:12:38,660
0,390 390,720 720,1020 1020,1800
separate function called user.

451
00:12:39,760 --> 00:12:42,340
0,480 540,1050 1080,1770
A trap rat.

452
00:12:42,900 --> 00:12:43,920
0,210 210,360 360,540 540,630 630,1020
Um, it's written in c,

453
00:12:43,920 --> 00:12:45,360
0,150 150,540 540,780 780,1170 1170,1440
it's entrap dot c that

454
00:12:45,900 --> 00:12:47,310
0,630 630,750 750,1140 1140,1230 1230,1410
does the part of this

455
00:12:47,310 --> 00:12:48,870
0,390 390,480 480,720 720,1140 1140,1560
return to user space, that's

456
00:12:48,870 --> 00:12:49,950
0,510 510,570 570,720 720,840 840,1080
convenient to do in c

457
00:12:49,950 --> 00:12:51,300
0,510 600,810 810,930 930,1200 1200,1350
code there's some final things

458
00:12:51,300 --> 00:12:52,020
0,120 120,300 300,420 420,630 630,720
that really can only be

459
00:12:52,020 --> 00:12:54,240
0,180 180,300 300,690 690,1140 1680,2220
done in assembly code, I'm.

460
00:12:55,000 --> 00:12:55,870
0,120 120,360 360,450 450,720 720,870
The code for that is

461
00:12:55,870 --> 00:12:57,400
0,240 240,390 390,840 840,1140 1170,1530
during an assembler and again

462
00:12:57,400 --> 00:12:59,170
0,90 90,210 210,780 780,1350 1530,1770
in this trampoline page in

463
00:12:59,170 --> 00:13:00,400
0,30 30,330 330,570 570,870 870,1230
a function called user ret.

464
00:13:03,710 --> 00:13:06,680
0,570 630,900 900,1800 1830,2370 2400,2970
Um the last last assembly

465
00:13:06,920 --> 00:13:07,940
0,300 300,540 540,630 630,870 870,1020
stuff has to happen and

466
00:13:07,940 --> 00:13:09,560
0,570 750,1380
finally, um.

467
00:13:10,000 --> 00:13:11,680
0,240 240,420 420,840 840,1230 1230,1680
Um, this assembly function issues,

468
00:13:11,680 --> 00:13:13,540
0,210 210,810 810,1380 1380,1530 1530,1860
the machine instruction that returns

469
00:13:13,540 --> 00:13:15,070
0,210 210,360 360,600 600,1080 1080,1530
back in user space and

470
00:13:15,250 --> 00:13:16,840
0,600 600,1320
resume execution.

471
00:13:18,160 --> 00:13:20,520
0,360 360,450 450,870
After the eco.

472
00:13:20,770 --> 00:13:22,210
0,300 300,480 480,810 810,960 960,1440
Right, does anybody want to

473
00:13:22,210 --> 00:13:23,350
0,180 180,240 240,630 630,810 810,1140
ask a question about Mumbai

474
00:13:23,350 --> 00:13:25,150
0,180 180,450 450,1200 1230,1590 1590,1800
just switch into looking stuff

475
00:13:25,150 --> 00:13:27,460
0,90 90,360 360,810 1710,1950 1950,2310
with g be any questions

476
00:13:27,460 --> 00:13:28,600
0,240 240,420 420,600 600,660 660,1140
about the sort of high-level

477
00:13:28,600 --> 00:13:29,300
0,480
picture.

478
00:13:32,960 --> 00:13:33,980
0,180
Yes.

479
00:13:36,970 --> 00:13:38,980
0,780 810,1260 1260,1470 1470,1740 1740,2010
Alright I am going to

480
00:13:38,980 --> 00:13:40,240
0,270 270,930
work in.

481
00:13:40,820 --> 00:13:41,800
0,270 270,390 390,750
Sorry I can't.

482
00:13:42,270 --> 00:13:44,370
0,870 1200,1410 1410,1500 1500,1830 1830,2100
Um, let me see what

483
00:13:44,370 --> 00:13:45,750
0,270 270,420 420,900 900,1170 1170,1380
mode are vm dot c

484
00:13:45,750 --> 00:13:47,100
0,420 420,900
functions running.

485
00:13:47,690 --> 00:13:49,040
0,480 510,720 720,870 870,1050 1050,1350
A M dot c functions,

486
00:13:49,040 --> 00:13:50,180
0,330 330,420 420,660 660,900 900,1140
everything in there is part

487
00:13:50,180 --> 00:13:50,900
0,60 60,120 120,480 480,570 570,720
of the kernel and it's

488
00:13:50,900 --> 00:13:52,580
0,210 210,810 810,1200
running supervisor mode.

489
00:13:54,760 --> 00:13:55,760
0,690
I'm.

490
00:13:56,200 --> 00:13:57,120
0,360 360,420
Got it.

491
00:13:57,700 --> 00:13:58,340
0,510
Yeah.

492
00:14:00,440 --> 00:14:02,090
0,450 480,840 840,1050 1050,1410 1410,1650
OK, somebody asked why these

493
00:14:02,090 --> 00:14:03,350
0,360 360,450 450,690 690,840 840,1260
functions are named this way,

494
00:14:03,710 --> 00:14:04,760
0,630
um.

495
00:14:05,960 --> 00:14:06,860
0,300 300,450 450,720 720,840 840,900
Um the naming is a

496
00:14:06,860 --> 00:14:08,060
0,150 150,210 210,270 270,900 900,1200
bit of a disaster and

497
00:14:08,060 --> 00:14:09,350
0,120 120,390 390,570 570,690 690,1290
for next year, I'm resolved

498
00:14:09,350 --> 00:14:11,090
0,600 630,900 900,990 990,1140 1140,1740
to make them more rational.

499
00:14:11,780 --> 00:14:12,480
0,450
I'm.

500
00:14:13,830 --> 00:14:14,880
0,60 60,240 240,330 330,660 660,1050
I think the naming question

501
00:14:14,880 --> 00:14:16,020
0,150 150,300 300,690 690,870 870,1140
might have referred to the

502
00:14:16,020 --> 00:14:17,400
0,270 270,390 390,480 480,1260 1260,1380
name of the registers in

503
00:14:17,400 --> 00:14:20,550
0,90 90,870 960,1440 2340,2850 2850,3150
the previous board, as for

504
00:14:20,550 --> 00:14:22,500
0,870
supervisor.

505
00:14:24,180 --> 00:14:26,000
0,1080
Analytics.

506
00:14:26,340 --> 00:14:28,140
0,390 390,660 660,1110 1380,1590 1590,1800
There's five people pick these

507
00:14:28,140 --> 00:14:31,050
0,540 900,1440 2010,2340 2340,2610 2610,2910
names I'm somebody's asking don't

508
00:14:31,050 --> 00:14:32,310
0,120 120,270 270,420 420,600 600,1260
be m dot c functions,

509
00:14:32,310 --> 00:14:34,710
0,450 450,750 750,1290 1380,2010 2070,2400
access physical memory directly that's

510
00:14:34,710 --> 00:14:36,540
0,510 510,1050 1170,1410 1410,1680 1680,1830
absolutely true, the reason why

511
00:14:36,540 --> 00:14:37,380
0,120 120,360 360,450 450,600 600,840
they're allowed to do that

512
00:14:37,380 --> 00:14:38,340
0,300 300,480 480,600 600,690 690,960
though is that the kernel

513
00:14:38,340 --> 00:14:40,920
0,840 960,1380 1380,1560 1560,2070 2070,2580
carefully sets up direct {mapping's

514
00:14:40,920 --> 00:14:42,240
0,150 150,300 300,390 390,750 750,1320
-} in the page table,

515
00:14:42,510 --> 00:14:43,890
0,360 360,510 510,720 720,930 930,1380
there's been many many PHDs

516
00:14:43,890 --> 00:14:44,910
0,90 90,180 180,450 450,750 750,1020
in the page table which

517
00:14:44,910 --> 00:14:48,030
0,780 1110,1650 1770,2310 2310,2400 2400,3120
cause a whenever the colonel.

518
00:14:48,420 --> 00:14:49,290
0,240 240,360 360,540 540,540 540,870
Tries to read or write

519
00:14:49,290 --> 00:14:50,760
0,210 210,540 540,1050 1050,1140 1140,1470
a physical address, it actually

520
00:14:50,760 --> 00:14:51,780
0,90 90,150 150,480 480,840 840,1020
is a virtual address that's

521
00:14:51,780 --> 00:14:54,000
0,900 1200,1530 1530,1620 1620,1920 1920,2220
translated by the kernel page

522
00:14:54,000 --> 00:14:55,440
0,360 360,510 510,630 630,840 1080,1440
table and is a physical

523
00:14:55,440 --> 00:14:56,880
0,270 270,450 480,1050 1080,1230 1230,1440
address that's equal to the

524
00:14:56,880 --> 00:14:58,110
0,330 330,630 630,690 690,840 840,1230
virtual address who was issued.

525
00:14:58,760 --> 00:15:00,380
0,390 450,660 660,780 780,1200 1200,1620
So it's like super convenient

526
00:15:00,380 --> 00:15:01,970
0,60 60,120 120,750 990,1350 1350,1590
in the kernel, what once

527
00:15:01,970 --> 00:15:03,200
0,150 150,480 480,570 570,870 870,1230
you're using the kernel page

528
00:15:03,200 --> 00:15:04,610
0,480 510,870 900,1200 1200,1350 1350,1410
table, this kernel has all

529
00:15:04,610 --> 00:15:06,830
0,210 210,600 600,1050 1050,1410 1650,2220
these direct mapping 's, but

530
00:15:06,890 --> 00:15:08,700
0,630 630,840 840,1140 1140,1560
until we've set up.

531
00:15:08,940 --> 00:15:11,190
0,300 300,390 390,660 690,1710 2100,2250
I'm the current until the

532
00:15:11,190 --> 00:15:12,390
0,300 300,660 660,780 780,1140 1140,1200
trap machinery has switched to

533
00:15:12,390 --> 00:15:13,920
0,60 60,330 330,600 600,1020 1110,1530
the kernel page table, none

534
00:15:13,920 --> 00:15:15,180
0,60 60,240 240,630 630,750 750,1260
of those mappings are available

535
00:15:15,780 --> 00:15:17,760
0,360 360,630 1170,1470 1470,1800 1800,1980
until the kernel trap code

536
00:15:17,760 --> 00:15:18,450
0,60 60,330 330,390 390,450 450,690
is switched to the kernel

537
00:15:18,450 --> 00:15:19,410
0,240 240,480 480,570 570,750 750,960
page table, we're still using

538
00:15:19,410 --> 00:15:20,370
0,60 60,360 360,600 600,810 810,960
the user page table which

539
00:15:20,370 --> 00:15:21,750
0,120 120,540 540,630 630,870 870,1380
has none of these convenient

540
00:15:21,750 --> 00:15:24,630
0,390 390,810 1530,1920 1920,2250 2250,2880
{mapping's -} for physical addresses.

541
00:15:26,580 --> 00:15:27,620
0,780
Shoot.

542
00:15:29,580 --> 00:15:32,200
0,1020
Okay.

543
00:15:34,400 --> 00:15:35,240
0,420 420,570 570,630 630,780 780,840
Um, can I ask a

544
00:15:35,240 --> 00:15:39,020
0,450 900,1530 1980,2520 2550,3270 3270,3780
question, please, um so, um.

545
00:15:40,320 --> 00:15:42,060
0,570 810,1020 1020,1170 1170,1440 1440,1740
Um I don't know this

546
00:15:42,060 --> 00:15:43,770
0,180 180,450 450,690 690,1110 1110,1710
is maybe not exactly relevant

547
00:15:43,770 --> 00:15:44,730
0,90 90,270 270,450 450,660 660,960
to what was just said,

548
00:15:44,730 --> 00:15:46,830
0,270 300,810 1110,1440 1440,1830 1830,2100
but um oh, the read

549
00:15:46,830 --> 00:15:48,270
0,150 150,390 390,780 780,1140 1140,1440
and write system calls right

550
00:15:48,300 --> 00:15:50,670
0,240 240,570 570,840 840,1080 1080,2370
like those are pretty expensive

551
00:15:50,670 --> 00:15:52,200
0,450 450,570 570,810 810,870 870,1530
compared to just the memory

552
00:15:52,200 --> 00:15:53,220
0,420 420,660 660,750 750,900 900,1020
store because you have to

553
00:15:53,220 --> 00:15:54,450
0,270 270,600 600,960 960,1080 1080,1230
actually switch mode and go

554
00:15:54,450 --> 00:15:55,860
0,210 210,330 330,660 960,1320 1320,1410
back and forth, would it

555
00:15:55,860 --> 00:15:57,420
0,150 150,690 690,840 840,1200 1200,1560
be possible to just like.

556
00:15:57,800 --> 00:15:59,060
0,450 450,570 570,900 900,1140 1140,1260
Instead of when when you

557
00:15:59,060 --> 00:16:00,530
0,330 330,450 450,930 930,1350 1350,1470
open a file instead of

558
00:16:00,530 --> 00:16:02,030
0,330 330,570 570,660 660,960 960,1500
getting back a file descriptor

559
00:16:02,030 --> 00:16:03,020
0,150 150,330 330,750 750,930 930,990
that you call with a

560
00:16:03,020 --> 00:16:04,790
0,390 390,870 900,1200 1200,1440 1440,1770
system call to get a

561
00:16:05,240 --> 00:16:07,490
0,810 810,1140 1140,1860 1950,2130 2130,2250
page table mapping, and then

562
00:16:07,490 --> 00:16:08,570
0,120 120,240 240,450 450,870 870,1080
you would just write to

563
00:16:08,570 --> 00:16:10,850
0,330 360,780 780,1560 1770,2010 2010,2280
a certain address, um, that's

564
00:16:10,850 --> 00:16:13,040
0,300 300,930 930,1110 1110,1380 1380,2190
just mapped to the device,

565
00:16:13,280 --> 00:16:14,060
0,210 210,300 300,450 450,660 660,780
and you can set up

566
00:16:14,060 --> 00:16:15,830
0,90 90,810 810,960 960,1260 1290,1770
the restrictions so that the

567
00:16:16,370 --> 00:16:17,810
0,510 510,660 660,900 900,1290 1290,1440
program can only write to

568
00:16:17,810 --> 00:16:19,460
0,330 330,750 750,930 930,1320 1350,1650
a tool like a file

569
00:16:19,460 --> 00:16:20,840
0,450 450,630 630,780 780,1230 1230,1380
descriptor that it's allowed to

570
00:16:20,840 --> 00:16:22,130
0,240 240,480 510,930 930,1080 1080,1290
which is allowed to throw

571
00:16:22,130 --> 00:16:23,810
0,120 120,480 480,900 930,1230 1230,1680
the virtual page table mapping

572
00:16:23,810 --> 00:16:24,830
0,330 330,450 450,810 810,900 900,1020
instead of jumping to the

573
00:16:24,830 --> 00:16:26,810
0,450 450,840 1380,1560 1560,1920 1920,1980
criminal back yeah that's a

574
00:16:26,810 --> 00:16:29,600
0,240 240,990 1020,1440 1440,2160 2250,2790
good observation and indeed a

575
00:16:29,630 --> 00:16:31,310
0,270 270,570 570,960 960,1320 1320,1680
many operating systems provide this

576
00:16:31,310 --> 00:16:33,230
0,300 300,690 690,1200 1200,1530 1530,1920
what's called memory mapped file

577
00:16:33,230 --> 00:16:35,320
0,600 600,1020 1200,1770
access where indeed.

578
00:16:35,400 --> 00:16:36,570
0,120 120,360 360,690 690,780 780,1170
The map pages that correspond

579
00:16:36,570 --> 00:16:38,250
0,60 60,150 150,390 390,1290 1380,1680
to the file contents into

580
00:16:38,250 --> 00:16:39,540
0,210 210,450 450,600 600,1080 1110,1290
the into your virtual into

581
00:16:39,540 --> 00:16:41,610
0,720 810,1320 1320,1560 1560,1950 1950,2070
user virtual address space so

582
00:16:41,610 --> 00:16:42,360
0,90 90,210 210,420 420,510 510,750
you can read or write

583
00:16:42,360 --> 00:16:44,550
0,270 330,780 780,930 930,1410 1830,2190
them directly through memory, in

584
00:16:44,820 --> 00:16:46,110
0,450 450,600 600,720 720,1230 1230,1290
fact you'll be implementing a

585
00:16:46,110 --> 00:16:47,580
0,300 300,390 390,840 840,1170 1170,1470
version of this in the

586
00:16:47,610 --> 00:16:49,140
0,180 180,990 1080,1200 1200,1260 1260,1530
um matlab, in a couple

587
00:16:49,140 --> 00:16:49,960
0,60 60,720
of weeks.

588
00:16:50,010 --> 00:16:50,800
0,570
I'm.

589
00:16:51,230 --> 00:16:53,270
0,420 420,930 930,1110 1110,1500 1710,2040
And indeed as you imply

590
00:16:53,270 --> 00:16:54,710
0,240 240,330 330,540 540,780 780,1440
it's a good deal faster

591
00:16:54,980 --> 00:16:56,330
0,150 150,360 360,900 900,1050 1050,1350
for many programs than calling

592
00:16:56,330 --> 00:16:57,100
0,120 120,270 270,480
me dumb, right.

593
00:16:59,100 --> 00:17:00,480
0,510
Okay.

594
00:17:02,380 --> 00:17:04,030
0,150 150,240 270,660 660,1500 1500,1650
I am a switch to

595
00:17:04,030 --> 00:17:06,440
0,510 540,1410 1410,2040
the GDP world.

596
00:17:06,970 --> 00:17:08,000
0,780
I'm.

597
00:17:19,540 --> 00:17:20,680
0,300 300,360 360,510 510,750 750,1140
Alright, at this point, everybody

598
00:17:20,680 --> 00:17:21,840
0,390 390,810
should um.

599
00:17:26,200 --> 00:17:28,920
0,450 450,900 900,1440 1440,2040
See my screen share.

600
00:17:29,660 --> 00:17:30,640
0,660
I'm.

601
00:17:31,210 --> 00:17:32,140
0,150 150,270 270,330 330,630 630,930
We're going to watch an

602
00:17:32,140 --> 00:17:34,150
0,270 270,630 630,1170 1200,1440 1440,2010
xp system called the right.

603
00:17:34,770 --> 00:17:36,270
0,510 540,660 660,1080 1080,1410 1410,1500
Um the shells right of

604
00:17:36,270 --> 00:17:38,370
0,360 360,630 630,1200 1620,1920 1920,2100
its initial prompt a make

605
00:17:38,370 --> 00:17:39,120
0,120 120,240 240,360 360,450 450,750
its way through the system,

606
00:17:39,120 --> 00:17:40,470
0,90 90,210 210,720 720,840 840,1350
you can see the user

607
00:17:40,470 --> 00:17:42,480
0,600 600,750 750,1260 1260,1680 1680,2010
code that initiates this in

608
00:17:42,480 --> 00:17:44,460
0,180 180,420 420,690 690,1110 1560,1980
S H dot C A.

609
00:17:44,960 --> 00:17:45,920
0,240 240,480 480,690 690,780 780,960
I'm sure that he was

610
00:17:45,920 --> 00:17:46,940
0,180 180,720
just making.

611
00:17:47,290 --> 00:17:48,670
0,180 180,300 300,570 570,930 930,1380
Um the write system call

612
00:17:49,090 --> 00:17:50,710
0,330 330,480 480,810 810,1080 1080,1620
with this Dollar sign, prompt,

613
00:17:51,100 --> 00:17:53,120
0,480 690,900 900,1320 1320,1770
um, we fire up.

614
00:17:57,010 --> 00:17:58,540
0,450 450,720 720,1260
A G B.

615
00:18:01,300 --> 00:18:02,300
0,780
HMM.

616
00:18:03,330 --> 00:18:06,510
0,600 750,1230 2070,2340 2340,2580 2580,3180
Excellent, so what actually happens

617
00:18:06,510 --> 00:18:08,130
0,270 270,750 750,1320 1320,1530 1530,1620
when user code when the

618
00:18:08,130 --> 00:18:09,900
0,360 360,750 750,1140 1140,1440 1440,1770
shell calls right, right is

619
00:18:09,900 --> 00:18:11,490
0,420 420,960 960,1110 1110,1140 1140,1590
just a it's a library

620
00:18:11,490 --> 00:18:12,500
0,360 360,750
function that's.

621
00:18:12,640 --> 00:18:14,440
0,600 780,1140 1140,1290 1290,1410 1410,1800
I'm part {of's -} a.

622
00:18:15,600 --> 00:18:16,620
0,300 300,540 540,780 780,900 900,1020
Um, that's linked into the

623
00:18:16,620 --> 00:18:18,330
0,540 900,1230 1230,1470 1470,1590 1590,1710
shell, um, and you can

624
00:18:18,330 --> 00:18:19,770
0,420 420,600 600,1020 1020,1290 1290,1440
see the source for it

625
00:18:19,770 --> 00:18:22,000
0,450 480,900 900,1050 1050,1890
in use is stopped.

626
00:18:22,210 --> 00:18:23,660
0,450 510,1290
Um s.

627
00:18:24,660 --> 00:18:25,980
0,240 240,690 750,990 990,1230 1230,1320
So it's this couple of

628
00:18:25,980 --> 00:18:27,440
0,540 540,900 900,1170
instructions, here's the.

629
00:18:27,960 --> 00:18:30,120
0,870 870,960 960,1110 1110,1440 1440,2160
Implementation of the right function

630
00:18:30,390 --> 00:18:31,230
0,150 150,240 240,420 420,510 510,840
that the shell is actually

631
00:18:31,230 --> 00:18:33,020
0,450 870,1380
calling and.

632
00:18:33,480 --> 00:18:34,290
0,300 300,480 480,540 540,600 600,810
Um, this is a very

633
00:18:34,290 --> 00:18:36,120
0,180 180,660 780,1110 1110,1410 1410,1830
short function, all it's doing

634
00:18:36,120 --> 00:18:37,710
0,330 330,660 660,840 840,1050 1050,1590
is loading into a seven

635
00:18:37,710 --> 00:18:39,600
0,120 120,750 780,1200 1200,1590 1590,1890
a number six right it's

636
00:18:39,600 --> 00:18:41,220
0,330 360,1020 1020,1440 1440,1500 1500,1620
just symbolically defined to be

637
00:18:41,220 --> 00:18:42,840
0,630 630,720 720,930 930,1020 1020,1620
sixteen that tells the kernel,

638
00:18:43,350 --> 00:18:44,670
0,480 480,480 480,780 780,1020 1050,1320
um I want to run

639
00:18:44,670 --> 00:18:47,070
0,120 120,1050 1200,1980 1980,2220 2220,2400
the sixteenth system call which

640
00:18:47,070 --> 00:18:48,280
0,300 300,360 360,450 450,930
happens to be right.

641
00:18:48,340 --> 00:18:49,270
0,270 270,450 450,600 600,750 750,930
Um, and then this little

642
00:18:49,270 --> 00:18:51,070
0,540 900,1170 1170,1350 1350,1530 1530,1800
function uses the e call

643
00:18:51,070 --> 00:18:53,080
0,810 1050,1470 1470,1680 1680,1800 1800,2010
instruction, um, which is what

644
00:18:53,080 --> 00:18:53,920
0,540
actually.

645
00:18:53,980 --> 00:18:55,210
0,360 570,810 810,870 870,1080 1080,1230
A gets the code into

646
00:18:55,210 --> 00:18:56,650
0,60 60,570 600,840 840,1260 1260,1440
the kernel, the kernel does

647
00:18:56,650 --> 00:18:59,080
0,150 150,720 1140,1830 2010,2280 2280,2430
this thing and then when

648
00:18:59,080 --> 00:18:59,860
0,60 60,270 270,480 480,570 570,780
the kernel can be down,

649
00:18:59,860 --> 00:19:02,380
0,150 150,960 1590,2070 2070,2220 2220,2520
it returns back into user

650
00:19:02,380 --> 00:19:03,730
0,300 300,390 390,810 810,900 900,1350
space to execute the instruction

651
00:19:03,730 --> 00:19:05,350
0,270 270,390 390,960 1110,1500 1500,1620
after the equal which is

652
00:19:05,350 --> 00:19:07,630
0,270 270,690 930,1230 1260,2040 2040,2280
that rhett that returns back

653
00:19:07,630 --> 00:19:09,520
0,60 60,150 150,780 1380,1800 1800,1890
to the shell returns from

654
00:19:09,520 --> 00:19:11,170
0,240 240,600 630,1020 1020,1410 1410,1650
that right library function back

655
00:19:11,170 --> 00:19:11,980
0,120 120,210 210,540
into the shell.

656
00:19:12,960 --> 00:19:13,740
0,240 240,390 390,510 510,690 690,780
So what I'd like to

657
00:19:13,740 --> 00:19:14,730
0,240 240,360 360,540 540,660 660,990
do in order to show

658
00:19:14,730 --> 00:19:15,570
0,90 90,390 390,600 600,780 780,840
the system call part of

659
00:19:15,570 --> 00:19:16,800
0,300 420,780 780,930 930,1020 1020,1230
this, I'm going to start

660
00:19:16,800 --> 00:19:18,000
0,90 90,300 300,390 390,630 630,1200
by putting a break point.

661
00:19:18,420 --> 00:19:21,630
0,330 330,630 660,1440 1470,2250 2700,3210
On that eco instruction, um,

662
00:19:21,720 --> 00:19:23,040
0,570 840,960 960,1170 1170,1230 1230,1320
and we need to know

663
00:19:23,040 --> 00:19:24,340
0,120 120,450 450,510 510,1080
its address, of course.

664
00:19:24,420 --> 00:19:25,290
0,240 240,360 360,480 480,720 720,870
But we can find that

665
00:19:25,290 --> 00:19:26,220
0,150 150,270 270,570 570,720 720,930
out by looking in S

666
00:19:26,220 --> 00:19:27,690
0,180 180,450 450,540 540,1170 1170,1470
H dot a sandwich though.

667
00:19:28,170 --> 00:19:30,690
0,300 300,510 510,1260 1260,1740 1740,2520
Xc six compilation process produces,

668
00:19:31,230 --> 00:19:32,300
0,780
amen.

669
00:19:32,420 --> 00:19:33,740
0,390 390,540 540,780 780,1020 1020,1320
S E S H A

670
00:19:33,740 --> 00:19:35,810
0,150 150,420 420,720 720,930 1320,2070
S M, there's a assembly

671
00:19:35,810 --> 00:19:38,480
0,270 270,450 450,1410 1710,2310 2340,2670
code with addresses of the

672
00:19:38,480 --> 00:19:39,320
0,510
um.

673
00:19:40,350 --> 00:19:42,690
0,210 210,1200 1230,1680 1710,1830 1830,2340
The instructions for the shell,

674
00:19:43,050 --> 00:19:43,560
0,60 60,270 270,330 330,480 480,510
I'm going to put a

675
00:19:43,560 --> 00:19:44,610
0,270 270,600 600,750 750,900 900,1050
break point on the e

676
00:19:44,610 --> 00:19:47,040
0,330 330,870 870,1020 1020,1320 1770,2430
call instruction which is A

677
00:19:47,070 --> 00:19:49,230
0,420 450,930 930,1170 1170,1320 1320,2160
D address D E six.

678
00:19:51,310 --> 00:19:53,320
0,420 420,570 570,900 1200,1530 1530,2010
Actually, I'm gonna actually start

679
00:19:53,320 --> 00:19:54,910
0,270 270,480 480,930 1350,1530 1530,1590
xc six running and I'm

680
00:19:54,910 --> 00:19:56,830
0,360 360,720 1050,1530 1530,1620 1620,1920
hoping to have the system

681
00:19:56,830 --> 00:19:59,050
0,540 840,1020 1020,1110 1110,1740 1800,2220
break in the shell just

682
00:19:59,050 --> 00:20:00,520
0,300 300,720 720,1230
before executing eco.

683
00:20:02,100 --> 00:20:04,740
0,360 390,1050 1200,1770 1830,2460 2490,2640
Alright, excellent, um, now, you

684
00:20:04,740 --> 00:20:05,700
0,120 120,330 330,480 480,840 840,960
can see from GDP we're

685
00:20:05,700 --> 00:20:08,400
0,540 540,810 810,1200 2310,2610 2610,2700
about to I'm about to

686
00:20:08,400 --> 00:20:09,860
0,390 390,630 630,1080
execute that eco.

687
00:20:10,330 --> 00:20:13,840
0,450 810,1350 1350,1590 1590,2310 2790,3510
Um, let's just check, um.

688
00:20:14,290 --> 00:20:15,100
0,180 180,270 270,480 480,660 660,810
There we are where we

689
00:20:15,100 --> 00:20:17,050
0,210 210,330 330,780 1140,1860 1860,1950
think we are print, we

690
00:20:17,050 --> 00:20:18,520
0,120 120,390 390,570 570,870 870,1470
can print the program counter

691
00:20:18,730 --> 00:20:20,260
0,570 570,960 960,1290 1290,1440 1440,1530
zero xt six just what

692
00:20:20,260 --> 00:20:23,560
0,120 120,450 450,780
we asked for.

693
00:20:24,750 --> 00:20:26,910
0,900 1260,1380 1380,1500 1500,1680 1680,2160
Um, we can also print

694
00:20:26,910 --> 00:20:29,580
0,360 750,960 960,1380 1380,2520
the all 32 registers.

695
00:20:30,060 --> 00:20:31,680
0,570 750,1170 1200,1410 1410,1470 1470,1620
And a sum of these

696
00:20:31,680 --> 00:20:33,300
0,660 660,1020 1020,1140 1140,1290 1290,1620
values whatever we don't know

697
00:20:33,300 --> 00:20:34,050
0,120 120,270 270,480 480,600 600,750
we don't care what they

698
00:20:34,050 --> 00:20:36,000
0,360 390,750 750,1410 1410,1830 1830,1950
are, but a0 a1 and

699
00:20:36,000 --> 00:20:38,010
0,720 750,1050 1050,1140 1140,1410 1410,2010
a2 are the three arguments

700
00:20:38,010 --> 00:20:39,510
0,150 150,240 240,540 540,960 990,1500
that the shell passed right

701
00:20:40,590 --> 00:20:41,520
0,210 210,360 360,810 810,900 900,930
so those arguments are a

702
00:20:41,520 --> 00:20:43,620
0,300 300,780 780,1200 1200,1590 1590,2100
file descriptor to innate zero,

703
00:20:44,040 --> 00:20:45,090
0,270 270,450 450,840 840,900 900,1050
um, the pointer to the

704
00:20:45,090 --> 00:20:46,740
0,360 360,450 450,1200 1200,1410 1410,1650
buffer of characters, the shell

705
00:20:46,740 --> 00:20:47,850
0,240 240,390 390,810 810,990 990,1110
wants to write in a

706
00:20:47,850 --> 00:20:49,380
0,540 900,1140 1140,1200 1200,1440 1440,1530
one and the number of

707
00:20:49,380 --> 00:20:50,700
0,480 480,570 570,840 840,960 960,1320
characters it wants to write

708
00:20:50,700 --> 00:20:51,860
0,300 300,450 450,870
in a tube.

709
00:20:52,150 --> 00:20:53,230
0,300 300,450 450,570 570,720 720,1080
Um, and we can convince

710
00:20:53,230 --> 00:20:54,370
0,390 390,480 480,570 570,900 900,1140
ourselves that we're looking at

711
00:20:54,370 --> 00:20:55,360
0,210 240,540 540,660 660,900 900,990
a code we think we're

712
00:20:55,360 --> 00:20:56,300
0,240 240,540
looking at.

713
00:20:56,820 --> 00:20:59,520
0,270 270,540 540,990 990,1470 2010,2700
I'm actually printing out, um.

714
00:21:00,280 --> 00:21:01,990
0,360 360,960 960,1080 1080,1290 1290,1710
The bites in that buffer,

715
00:21:01,990 --> 00:21:03,160
0,240 240,510 510,750 750,870 870,1170
the shell wants to write

716
00:21:03,160 --> 00:21:04,300
0,120 120,570 570,690 690,780 780,1140
and indeed, it's a Dollar

717
00:21:04,300 --> 00:21:06,520
0,600 780,1050 1050,1110 1110,1650 1650,2220
sign and a space so.

718
00:21:08,210 --> 00:21:09,230
0,240 240,390 390,480 480,750 750,1020
We're at the system call

719
00:21:09,230 --> 00:21:10,280
0,150 150,450 480,690 690,960 960,1050
that we, we hope to

720
00:21:10,280 --> 00:21:10,960
0,180 180,390
be at.

721
00:21:11,350 --> 00:21:12,250
0,270 270,420 420,480 480,780 780,900
One thing to notice is

722
00:21:12,250 --> 00:21:13,780
0,180 180,420 510,1110 1110,1380 1380,1530
that the program counter and

723
00:21:13,780 --> 00:21:14,980
0,270 270,570 570,810 810,900 900,1200
stack pointer both at low

724
00:21:14,980 --> 00:21:17,020
0,810 930,1470 1470,1710 1710,1950 1950,2040
addresses addresses quite close to

725
00:21:17,020 --> 00:21:20,560
0,330 330,660 1200,1710 2370,2790 2790,3540
zero and, um just reinforces

726
00:21:20,560 --> 00:21:22,030
0,330 330,870 870,1050 1050,1200 1200,1470
our belief that we're still

727
00:21:22,030 --> 00:21:23,620
0,630 630,990 1020,1380 1380,1530 1530,1590
executing in user and the

728
00:21:23,620 --> 00:21:25,240
0,360 360,720 720,1170 1170,1410 1410,1620
user address space where all

729
00:21:25,240 --> 00:21:26,470
0,90 90,510 510,570 570,810 810,1230
the addresses are quite small

730
00:21:26,500 --> 00:21:27,040
0,180 180,270 270,390 390,450 450,540
once we get to the

731
00:21:27,040 --> 00:21:28,420
0,420 420,600 600,750 750,1170 1170,1380
colonel's, see the addresses are.

732
00:21:28,800 --> 00:21:29,550
0,150 150,210 210,420 420,480 480,750
Um the current is actually

733
00:21:29,550 --> 00:21:30,660
0,330 330,540 540,720 720,1020 1020,1110
loaded much much higher in

734
00:21:30,660 --> 00:21:32,000
0,390 690,1020
memory, um.

735
00:21:33,310 --> 00:21:34,460
0,930
Yeah.

736
00:21:35,020 --> 00:21:38,410
0,660 780,1320 1590,2610 2790,3090 3090,3390
Okay, um, we the point

737
00:21:38,410 --> 00:21:39,490
0,60 60,120 120,420 420,840 840,1080
of the system calls to

738
00:21:39,520 --> 00:21:40,510
0,420 420,750 750,780 780,930 930,990
switch around a lot of

739
00:21:40,510 --> 00:21:41,350
0,420 420,540 540,600 600,660 660,840
state one of the most

740
00:21:41,350 --> 00:21:43,090
0,480 480,780 780,870 870,1440 1470,1740
important pieces of state that

741
00:21:43,090 --> 00:21:44,320
0,270 270,360 360,480 480,1080 1080,1230
has to get switched and

742
00:21:44,320 --> 00:21:45,040
0,90 90,180 180,300 300,570 570,720
we have to live with

743
00:21:45,040 --> 00:21:46,660
0,360 360,480 480,1050 1230,1500 1500,1620
before it's switched is the

744
00:21:46,660 --> 00:21:48,020
0,300 300,660 660,1080
current page table.

745
00:21:48,280 --> 00:21:49,030
0,270 270,330 330,540 540,630 630,750
Um, of course we can

746
00:21:49,030 --> 00:21:51,400
0,180 180,420 930,1680 1680,1920 1920,2370
look at OS at p.

747
00:21:52,860 --> 00:21:54,540
0,840 930,1170 1170,1260 1260,1440 1440,1680
But all we get there

748
00:21:54,540 --> 00:21:55,530
0,180 180,270 270,600 600,660 660,990
is the address in physical

749
00:21:55,530 --> 00:21:56,790
0,330 330,630 630,900 900,1020 1020,1260
memory page tables and actually

750
00:21:56,790 --> 00:21:58,110
0,240 240,390 390,690 690,1020 1050,1320
tell us much about what

751
00:21:58,110 --> 00:21:59,430
0,90 90,450 450,840 1080,1230 1230,1320
the mapping czar with the

752
00:21:59,430 --> 00:22:01,230
0,240 240,480 480,720 720,1020 1470,1800
page table looks like a

753
00:22:01,260 --> 00:22:04,140
0,630 840,1350 1350,1440 1440,1980 1980,2880
luckily there's a way in

754
00:22:04,170 --> 00:22:05,370
0,390 390,540 540,720 720,1110 1110,1200
q, um, you'd ask it

755
00:22:05,370 --> 00:22:06,510
0,90 90,480 480,570 570,870 870,1140
to print the current page

756
00:22:06,510 --> 00:22:08,340
0,450 480,660 660,780 780,1140 1290,1830
table and if I print

757
00:22:08,340 --> 00:22:10,020
0,480 480,1200 1200,1320 1320,1500 1500,1680
control ac I get into

758
00:22:10,020 --> 00:22:12,060
0,120 120,420 420,600 600,990 1080,2040
the Q M you monitor

759
00:22:12,060 --> 00:22:13,740
0,180 180,930 1350,1530 1530,1620 1620,1680
or console, and if I

760
00:22:13,740 --> 00:22:15,500
0,180 180,420 420,750 750,1380
then type info ma'am.

761
00:22:16,060 --> 00:22:17,440
0,300 300,390 390,480 480,930 1170,1380
I had to print the

762
00:22:17,440 --> 00:22:19,840
0,420 420,690 690,1110 1710,2130 2160,2400
complete page table, a this

763
00:22:19,840 --> 00:22:20,680
0,90 90,150 150,330 330,630 630,840
is a very small page

764
00:22:20,680 --> 00:22:22,180
0,330 330,420 420,930 930,1170 1170,1500
table that contains only six

765
00:22:22,180 --> 00:22:24,310
0,450 450,870 1470,1710 1710,1950 1950,2130
mapping 's, of course it's

766
00:22:24,310 --> 00:22:25,780
0,210 210,720 720,810 810,900 900,1470
the pcp for the shell.

767
00:22:26,290 --> 00:22:28,810
0,480 480,540 540,750 750,1290 1770,2520
She's a pretty small program

768
00:22:29,080 --> 00:22:30,880
0,390 390,570 570,840 840,1260 1260,1800
and these six mapping czar

769
00:22:30,880 --> 00:22:32,710
0,90 90,600 810,1080 1080,1410 1410,1830
in order A Z shells

770
00:22:32,710 --> 00:22:34,020
0,1140
instructions.

771
00:22:34,230 --> 00:22:36,840
0,240 240,750 750,1320 1650,1860 1860,2610
The shells data, an invalid

772
00:22:36,840 --> 00:22:39,000
0,540 540,930 930,1500 1500,1740 1740,2160
page which access the um.

773
00:22:39,500 --> 00:22:40,910
0,510 510,570 570,930 930,1350 1350,1410
Stack a guard page in

774
00:22:40,910 --> 00:22:41,930
0,210 210,300 300,660 660,930 930,1020
case the shell tries to

775
00:22:41,930 --> 00:22:43,250
0,210 210,330 330,510 510,840 840,1320
use too much stack space

776
00:22:43,400 --> 00:22:44,150
0,210 210,300 300,420 420,600 600,750
and we can see it's

777
00:22:44,150 --> 00:22:46,100
0,510 510,930 960,1380 1380,1710 1710,1950
invalid because it doesn't have

778
00:22:46,100 --> 00:22:47,630
0,120 120,420 420,900 900,1260 1290,1530
the u flag set over

779
00:22:47,630 --> 00:22:48,500
0,600
here.

780
00:22:48,890 --> 00:22:50,480
0,600 630,750 750,900 900,1500 1500,1590
I'm in this attribute or

781
00:22:50,480 --> 00:22:51,620
0,330 330,870
flag column.

782
00:22:52,330 --> 00:22:53,320
0,360 360,630 630,720 720,840 840,990
Um, these are all the

783
00:22:53,320 --> 00:22:55,270
0,480 480,990 990,1560 1560,1680 1680,1950
Pte underscore flags R W

784
00:22:55,270 --> 00:22:56,530
0,120 120,390 390,630 720,960 960,1260
and X are just control

785
00:22:56,530 --> 00:22:57,730
0,330 330,540 630,930 930,1050 1050,1200
whether a ph can be

786
00:22:57,730 --> 00:22:59,290
0,360 360,510 510,750 750,840 840,1560
read or written or executed,

787
00:22:59,920 --> 00:23:01,120
0,270 270,450 450,720 720,840 840,1200
the next column is u

788
00:23:01,120 --> 00:23:02,230
0,90 90,540 600,870 870,930 930,1110
and that's whether or not

789
00:23:02,230 --> 00:23:03,340
0,90 90,510 510,690 690,1020 1020,1110
the Pte you flag is

790
00:23:03,340 --> 00:23:04,330
0,270 270,420 420,660 660,870 870,990
set and user code can

791
00:23:04,330 --> 00:23:05,400
0,300 300,480 480,750
only get at.

792
00:23:05,480 --> 00:23:07,040
0,570 570,1110 1140,1260 1260,1440 1440,1560
PDF trees for which the

793
00:23:07,040 --> 00:23:08,930
0,150 150,450 450,540 540,900 1080,1890
u flag is set, um.

794
00:23:12,880 --> 00:23:13,600
0,120 120,330 330,450 450,630 630,720
I don't know what the

795
00:23:13,600 --> 00:23:14,470
0,210 210,540 540,690 690,750 750,870
next column is I have

796
00:23:14,470 --> 00:23:15,940
0,120 120,480 810,1170 1170,1410 1410,1470
to admit a and the

797
00:23:15,940 --> 00:23:16,870
0,150 150,360 360,480 480,810 810,930
next song is a four

798
00:23:16,870 --> 00:23:18,610
0,300 300,510 510,990 990,1440 1440,1740
whether the PhD entries ever

799
00:23:18,610 --> 00:23:20,320
0,150 150,750 750,1050 1050,1500 1500,1710
been used and d for

800
00:23:20,320 --> 00:23:21,540
0,300 300,420 420,960
whether a right.

801
00:23:21,890 --> 00:23:23,000
0,360 360,510 510,660 660,780 780,1110
Um has ever been issued

802
00:23:23,000 --> 00:23:24,160
0,120 120,300 300,990
for this address.

803
00:23:28,260 --> 00:23:28,980
0,300 300,450 450,540 540,630 630,720
Okay, so we have this

804
00:23:28,980 --> 00:23:30,150
0,240 240,510 510,780 780,870 870,1170
tiny page in the last

805
00:23:30,150 --> 00:23:31,560
0,210 210,690 690,900 900,1260 1260,1410
two page table entries by

806
00:23:31,560 --> 00:23:32,670
0,90 90,450 450,630 630,840 840,1110
the way are way up

807
00:23:32,670 --> 00:23:36,030
0,360 360,690 720,1650 1890,2430 2430,3360
at an enormous virtual addresses.

808
00:23:36,410 --> 00:23:37,550
0,270 270,570 570,690 690,930 930,1140
I'm close to the very

809
00:23:37,550 --> 00:23:39,050
0,210 210,300 300,480 510,1050 1260,1500
close to the top of

810
00:23:39,050 --> 00:23:40,790
0,210 240,540 540,750 750,1290 1560,1740
the virtual address space and

811
00:23:40,790 --> 00:23:42,800
0,180 180,450 450,780 780,1350 1380,2010
this is these two as

812
00:23:43,190 --> 00:23:43,850
0,210 210,330 330,510 510,570 570,660
you read about in the

813
00:23:43,850 --> 00:23:44,660
0,240 240,270 270,390 390,600 600,810
book I will hear much

814
00:23:44,660 --> 00:23:46,130
0,180 180,570 570,840 870,1200 1200,1470
more about the trap frame

815
00:23:46,130 --> 00:23:48,530
0,600 600,1110 1650,1860 1860,1920 1920,2400
page and not the trampoline

816
00:23:48,530 --> 00:23:49,490
0,300 300,510 510,600 600,720 720,960
page as you can see

817
00:23:49,490 --> 00:23:50,860
0,510 510,600 600,1020
neither of them.

818
00:23:50,960 --> 00:23:52,250
0,240 240,360 360,600 600,870 870,1290
As the u bit set

819
00:23:52,520 --> 00:23:54,290
0,450 510,990 1080,1350 1350,1590 1590,1770
so a user code can't

820
00:23:54,290 --> 00:23:55,610
0,180 180,390 390,690 690,780 780,1320
get at either of these

821
00:23:55,640 --> 00:23:56,450
0,210 210,330 330,540 540,630 630,810
can use either of these

822
00:23:56,450 --> 00:23:58,340
0,660 1110,1440 1440,1650 1650,1740 1740,1890
addresses, but once we enter

823
00:23:58,340 --> 00:23:59,450
0,540 540,750 750,840 840,960 960,1110
supervisor mode, we can get

824
00:23:59,450 --> 00:24:00,680
0,120 120,270 270,420 420,1080
at these two pages.

825
00:24:02,790 --> 00:24:03,440
0,90
Yeah.

826
00:24:05,130 --> 00:24:06,040
0,630
Alright.

827
00:24:07,120 --> 00:24:08,620
0,540 720,960 960,1050 1050,1350 1350,1500
Um, when they notice about

828
00:24:08,620 --> 00:24:10,360
0,150 150,420 420,900 1410,1590 1590,1740
this page table is there's

829
00:24:10,360 --> 00:24:11,620
0,180 180,570 570,840 840,1170 1170,1260
no mapping for anything in

830
00:24:11,620 --> 00:24:12,500
0,60 60,510
the kernel.

831
00:24:12,610 --> 00:24:14,170
0,300 300,480 480,810 810,1110 1110,1560
There's no physical address mapping,

832
00:24:14,170 --> 00:24:15,220
0,240 240,390 390,810 810,960 960,1050
there's no mapping for the

833
00:24:15,220 --> 00:24:17,320
0,420 420,870 900,990 990,1350 1350,2100
colonel's data, the colonel's instructions

834
00:24:17,320 --> 00:24:18,580
0,90 90,390 390,870 870,1080 1080,1260
or anything else this is

835
00:24:18,580 --> 00:24:20,530
0,690 690,750 750,1110 1350,1800 1800,1950
accepted the last just the

836
00:24:20,530 --> 00:24:22,300
0,210 210,480 480,570 570,1080 1350,1770
very last two pages now,

837
00:24:22,300 --> 00:24:23,080
0,90 90,150 150,210 210,450 450,780
this is the page table

838
00:24:23,080 --> 00:24:24,790
0,300 300,690 690,1260 1260,1410 1410,1710
almost entirely dedicated to user

839
00:24:24,790 --> 00:24:26,560
0,600 780,930 930,1020 1020,1380 1380,1770
execution and is not directly

840
00:24:26,560 --> 00:24:28,510
0,450 450,900 1350,1470 1470,1860 1860,1950
particularly useful for executing the

841
00:24:28,510 --> 00:24:29,160
0,360
kernel.

842
00:24:30,410 --> 00:24:32,720
0,120 120,330 1410,1710 1710,1980 1980,2310
All right what's the what's

843
00:24:32,720 --> 00:24:34,640
0,180 420,1080 1080,1320 1320,1410 1410,1920
the attribute on the on

844
00:24:34,640 --> 00:24:36,560
0,270 840,1170 1170,1440 1440,1770 1770,1920
the page table listing on

845
00:24:36,560 --> 00:24:37,880
0,60 60,540 600,840 840,1170 1170,1320
the top I believe this

846
00:24:37,880 --> 00:24:39,080
0,210 210,300 300,570 570,900 900,1200
means the page tables ever

847
00:24:39,080 --> 00:24:39,900
0,510
been.

848
00:24:40,110 --> 00:24:41,580
0,210 210,450 450,720 720,1290 1320,1470
This page table entry has

849
00:24:41,580 --> 00:24:44,040
0,120 120,330 330,1200 1530,1860 1860,2460
ever been accessed by code.

850
00:24:44,720 --> 00:24:46,610
0,360 690,840 840,1020 1020,1440 1470,1890
Um that is, um, whether

851
00:24:46,610 --> 00:24:48,140
0,120 120,390 390,780 780,900 900,1530
it's ever issued an address

852
00:24:48,140 --> 00:24:48,820
0,240
that.

853
00:24:49,120 --> 00:24:50,700
0,360 360,450 450,540 540,990
Refers to the spaceship.

854
00:24:50,970 --> 00:24:51,380
0,60
Yeah.

855
00:24:52,160 --> 00:24:53,510
0,420 720,900 900,960 960,1230 1230,1350
A and the d is

856
00:24:53,510 --> 00:24:55,370
0,270 270,630 780,1200 1200,1380 1380,1860
whether the programs ever written.

857
00:24:57,270 --> 00:24:58,720
0,180 180,300 300,390 390,1170
They've done a store.

858
00:24:59,560 --> 00:25:00,940
0,300 300,510 510,780 780,990 990,1380
Through this page table entry

859
00:25:01,030 --> 00:25:03,250
0,270 270,510 510,1140 1410,1860 1860,2220
and these are this the

860
00:25:03,250 --> 00:25:05,140
0,300 300,1020 1020,1200 1200,1350 1350,1890
hardware maintains for the convenience

861
00:25:05,140 --> 00:25:06,190
0,60 60,180 180,540 540,930 930,1050
of the operating system and

862
00:25:06,220 --> 00:25:08,170
0,330 330,660 660,840 840,1560 1560,1950
operating systems more sophisticated than

863
00:25:08,170 --> 00:25:10,280
0,240 240,810 1320,1830
s.v six, um.

864
00:25:10,650 --> 00:25:12,420
0,210 210,390 390,510 510,870 870,1770
We need to evict pages

865
00:25:12,510 --> 00:25:13,440
0,150 150,270 270,510 510,810 810,930
if they're running short on

866
00:25:13,440 --> 00:25:14,640
0,330 330,660 660,780 780,960 960,1200
physical memory, they may need

867
00:25:14,640 --> 00:25:16,530
0,180 180,660 1200,1440 1440,1800 1800,1890
to write some pages of

868
00:25:16,530 --> 00:25:17,880
0,360 360,480 480,1110
memory to disk.

869
00:25:18,040 --> 00:25:20,050
0,420 420,960 990,1560 1560,1650 1650,2010
Um, and invalidate the PhD

870
00:25:20,050 --> 00:25:21,880
0,510 510,690 1140,1470 1470,1530 1530,1830
countries to create the physical

871
00:25:21,880 --> 00:25:24,520
0,480 570,1110 1110,1590 1590,2010 2010,2640
memory, um, and many policies,

872
00:25:24,520 --> 00:25:26,110
0,90 90,180 180,600 600,870 1170,1590
you can imagine a operating

873
00:25:26,110 --> 00:25:27,610
0,270 270,600 600,720 1050,1290 1290,1500
system using the pic which

874
00:25:27,610 --> 00:25:29,230
0,270 270,390 390,900 1050,1500 1500,1620
pages to exist now will

875
00:25:29,230 --> 00:25:30,640
0,450 450,600 810,1170 1170,1290 1290,1410
consult the bits to see

876
00:25:30,640 --> 00:25:31,930
0,270 270,450 450,690 690,960 960,1290
whether this page table entry

877
00:25:31,930 --> 00:25:33,370
0,150 150,330 330,570 570,720 720,1440
has ever even been used

878
00:25:33,580 --> 00:25:34,840
0,390 390,510 510,750 750,900 900,1260
and it hasn't been used

879
00:25:34,840 --> 00:25:35,860
0,30 30,180 180,330 330,540 540,1020
or have been used recently

880
00:25:35,860 --> 00:25:37,570
0,270 840,1050 1050,1080 1080,1200 1200,1710
then that's a good candidate

881
00:25:37,570 --> 00:25:39,700
0,570 750,1260 1260,1380 1380,1920
for evicting to disk.

882
00:25:40,470 --> 00:25:42,200
0,390 510,690 690,1440
A and d.

883
00:25:42,660 --> 00:25:44,790
0,510 510,630 630,1140 1140,1440 1800,2130
Tells the kernel that oh

884
00:25:44,790 --> 00:25:46,110
0,330 480,720 720,810 810,1080 1080,1320
this page has actually been

885
00:25:46,110 --> 00:25:48,030
0,480 1140,1410 1410,1470 1470,1590 1590,1920
written since it was read

886
00:25:48,030 --> 00:25:49,060
0,210 210,810
from disk.

887
00:25:50,780 --> 00:25:52,040
0,420 420,630 630,870 870,1020 1020,1260
Htc doesn't actually use either

888
00:25:52,040 --> 00:25:53,100
0,60 60,450
of these.

889
00:25:55,520 --> 00:25:58,000
0,420 1080,1380 1380,1980
Alright, other questions.

890
00:26:02,390 --> 00:26:06,050
0,420 450,1230 1260,2130 2610,2970 2970,3660
Alright, let's execute the um.

891
00:26:06,950 --> 00:26:08,480
0,330 330,390 390,570 570,990 990,1530
Let me just remind us

892
00:26:08,660 --> 00:26:09,380
0,240 240,390 390,480 480,660 660,720
where we are going to

893
00:26:09,380 --> 00:26:10,970
0,270 270,600 600,810 1020,1500 1500,1590
print out the contents of

894
00:26:10,970 --> 00:26:12,050
0,150 150,510 510,630 630,780 780,1080
the right word the right

895
00:26:12,050 --> 00:26:14,760
0,390 390,1020 1410,1950 1950,2370
library function in a.

896
00:26:16,880 --> 00:26:18,500
0,180 180,240 240,810 1290,1530 1530,1620
In the shell and the

897
00:26:18,500 --> 00:26:19,700
0,330 330,660 660,780 780,1140 1140,1200
program counter is pointed to

898
00:26:19,700 --> 00:26:20,930
0,120 120,420 420,870 870,960 960,1230
the eco instruction, we're about

899
00:26:20,930 --> 00:26:22,280
0,60 60,450 450,540 540,840 840,1350
to execute the eco instruction.

900
00:26:23,000 --> 00:26:24,230
0,300 300,540 540,600 600,840 840,1230
I'm still in user space

901
00:26:24,230 --> 00:26:25,370
0,150 150,330 330,480 480,600 600,1140
but won't be for long,

902
00:26:25,550 --> 00:26:26,760
0,750
um.

903
00:26:27,310 --> 00:26:28,900
0,180 180,690 690,780 780,1080 1080,1590
I executed the eco instruction.

904
00:26:30,380 --> 00:26:31,880
0,330 360,810 960,1200 1200,1440 1440,1500
Okay so first question is

905
00:26:31,880 --> 00:26:32,960
0,240 240,420 420,720
where are we.

906
00:26:33,440 --> 00:26:36,080
0,480 480,600 600,1080 1590,2100 2460,2640
After the eco, um, we

907
00:26:36,080 --> 00:26:36,740
0,120 120,210 210,270 270,330 330,660
can look at the program

908
00:26:36,740 --> 00:26:37,620
0,450
counter.

909
00:26:38,660 --> 00:26:40,010
0,210 210,330 330,900 1050,1260 1260,1350
She is now used to

910
00:26:40,010 --> 00:26:40,850
0,60 60,90 90,270 270,450 450,840
be a very low number

911
00:26:40,850 --> 00:26:42,230
0,300 300,660 660,960 960,1170 1170,1380
d six that's very high

912
00:26:42,230 --> 00:26:43,400
0,480 570,690 690,930 930,1020 1020,1170
number, in fact we look

913
00:26:43,400 --> 00:26:44,630
0,60 60,420 480,930 930,1140 1140,1230
at the program counter is

914
00:26:44,630 --> 00:26:46,640
0,30 30,360 360,1140 1230,1860 1860,2010
a virtual address like all

915
00:26:46,640 --> 00:26:47,640
0,480 480,660
addresses that.

916
00:26:47,790 --> 00:26:49,520
0,300 300,810 810,1260
Um instructions use.

917
00:26:50,240 --> 00:26:51,170
0,210 210,330 330,570 570,840 840,930
And we can look at

918
00:26:51,170 --> 00:26:52,880
0,60 60,390 390,930 1260,1590 1590,1710
the page table actually let's

919
00:26:52,880 --> 00:26:53,630
0,180 180,360 360,450 450,510 510,750
just check what the page

920
00:26:53,630 --> 00:26:55,160
0,330 330,810 810,1110 1110,1290 1320,1530
table is just to be

921
00:26:55,160 --> 00:26:56,480
0,390 390,480 480,990
sure, I'm gonna.

922
00:26:56,960 --> 00:26:58,130
0,570 570,720 720,840 840,1020 1020,1170
Ask you, um you for

923
00:26:58,130 --> 00:26:59,930
0,300 300,540 540,1020 1530,1710 1710,1800
info ma'am again it's the

924
00:26:59,930 --> 00:27:01,280
0,210 210,450 450,690 690,1080
very same page table.

925
00:27:02,220 --> 00:27:03,960
0,420 420,750 750,1170 1260,1560 1560,1740
Nothing's changed there will look

926
00:27:03,960 --> 00:27:05,970
0,270 270,900 960,1350 1380,1680 1680,2010
up our new current program

927
00:27:05,970 --> 00:27:07,170
0,270 270,570 570,840 840,900 900,1200
counter, there are the program

928
00:27:07,170 --> 00:27:09,000
0,450 660,930 930,1110 1110,1500
counter is at the.

929
00:27:09,120 --> 00:27:11,100
0,390 1020,1410 1410,1470 1470,1560 1560,1980
A right at the beginning

930
00:27:11,100 --> 00:27:12,780
0,90 90,390 390,1020 1020,1470 1470,1680
of this trampoline page, this

931
00:27:12,780 --> 00:27:13,620
0,510
mapped.

932
00:27:13,770 --> 00:27:14,910
0,210 210,360 360,480 480,780 780,1140
A way up high in

933
00:27:15,660 --> 00:27:16,800
0,180 180,450 450,900
the user memory.

934
00:27:17,460 --> 00:27:19,200
0,360 360,540 540,1140 1320,1620 1620,1740
That's were executing, we can

935
00:27:19,200 --> 00:27:20,520
0,150 150,240 240,1110 1110,1230 1230,1320
see the instructions that are

936
00:27:20,520 --> 00:27:21,320
0,480
there.

937
00:27:21,350 --> 00:27:22,740
0,240 240,330 330,510 510,1200
Am I gonna use.

938
00:27:23,200 --> 00:27:23,720
0,270
Okay.

939
00:27:24,620 --> 00:27:25,760
0,840
I'm.

940
00:27:31,340 --> 00:27:33,050
0,270 270,480 480,540 540,630 630,1710
Um, these are the instructions.

941
00:27:34,020 --> 00:27:36,030
0,510 690,810 810,1050 1050,1290 1290,2010
I'm the very first instructions

942
00:27:36,030 --> 00:27:37,470
0,210 210,330 330,810 810,1320 1320,1440
that the kernel executes in

943
00:27:37,470 --> 00:27:39,150
0,570 570,1080 1080,1170 1170,1230 1230,1680
supervisor mode at the beginning

944
00:27:39,150 --> 00:27:40,350
0,300 300,630 630,690 690,750 750,1200
very beginning of a trap

945
00:27:40,560 --> 00:27:41,790
0,240 240,450 450,720 720,1140 1140,1230
and threw some weirdness in

946
00:27:41,790 --> 00:27:43,740
0,510 510,690 690,1050 1050,1470 1470,1950
GDP, we've actually already executed,

947
00:27:43,740 --> 00:27:45,630
0,90 90,360 360,990 1470,1740 1740,1890
the first instruction, um at

948
00:27:45,630 --> 00:27:46,440
0,90 90,300 300,600 600,660 660,810
the very beginning of this

949
00:27:46,440 --> 00:27:47,360
0,660
page.

950
00:27:47,480 --> 00:27:48,380
0,630
I'm.

951
00:27:49,050 --> 00:27:50,970
0,540 570,720 720,930 930,1110 1530,1920
And we're about to execute

952
00:27:50,970 --> 00:27:52,200
0,60 60,390 390,900
the second instruction.

953
00:27:53,560 --> 00:27:54,040
0,150 150,240 240,330 330,390 390,480
We can look at the

954
00:27:54,040 --> 00:27:55,900
0,960
registers.

955
00:27:57,060 --> 00:27:57,630
0,240 240,360 360,420 420,510 510,570
I don't know if you

956
00:27:57,630 --> 00:27:59,130
0,300 300,510 510,870 870,1290 1290,1500
remember these register values but

957
00:27:59,250 --> 00:28:00,660
0,510 510,660 660,1080 1080,1200 1200,1410
nothing has changed here, these

958
00:28:00,660 --> 00:28:02,100
0,150 150,720 720,810 810,1020 1020,1440
are exactly the same register

959
00:28:02,100 --> 00:28:03,480
0,510 510,630 630,720 720,1020 1020,1380
contents that the user program

960
00:28:03,480 --> 00:28:04,340
0,720
has.

961
00:28:04,470 --> 00:28:05,430
0,420 420,570 570,750 750,840 840,960
Had so these are all

962
00:28:05,430 --> 00:28:07,020
0,300 300,570 600,870 870,1440 1440,1590
full of user values for

963
00:28:07,020 --> 00:28:08,040
0,240 240,360 360,660 690,840 840,1020
many of them are all

964
00:28:08,040 --> 00:28:08,670
0,90 90,270 270,420 420,510 510,630
of them for all we

965
00:28:08,670 --> 00:28:10,560
0,360 570,870 870,990 990,1230 1230,1890
know they're the only locations

966
00:28:10,560 --> 00:28:11,730
0,300 300,660 660,840 840,1020 1020,1170
value exists so we have

967
00:28:11,730 --> 00:28:12,570
0,90 90,150 150,360 360,720 720,840
to be very careful when

968
00:28:12,570 --> 00:28:14,160
0,90 90,360 360,630 630,1050 1080,1590
we can't actually use any

969
00:28:14,190 --> 00:28:16,040
0,720 720,810 810,990 990,1470
registers at this point.

970
00:28:16,220 --> 00:28:18,260
0,420 420,930 930,1320 1320,1560 1560,2040
Without first saving those registers

971
00:28:18,260 --> 00:28:19,970
0,570 780,1020 1020,1140 1140,1290 1290,1710
somewhere so we can restore

972
00:28:19,970 --> 00:28:21,380
0,240 420,810 810,1020 1020,1140 1140,1410
them because if the colonel

973
00:28:21,380 --> 00:28:22,160
0,120 120,240 240,540 540,720 720,780
was to use any of

974
00:28:22,160 --> 00:28:23,300
0,210 210,690 690,780 780,930 930,1140
these registers at this point

975
00:28:23,300 --> 00:28:24,940
0,60 60,360 450,1440
it would overwrite.

976
00:28:25,100 --> 00:28:27,770
0,750 1320,1950 1950,2070 2070,2280 2280,2670
Um, whatever the user value

977
00:28:27,770 --> 00:28:28,700
0,240 240,420 420,660 660,810 810,930
is and then if we

978
00:28:28,700 --> 00:28:29,690
0,240 240,330 330,660 660,720 720,990
tried to resume the user

979
00:28:29,690 --> 00:28:30,620
0,330 330,450 450,690 690,750 750,930
program, we wouldn't be able

980
00:28:30,620 --> 00:28:32,000
0,60 60,270 270,390 390,540 540,1380
to set up its registers

981
00:28:32,000 --> 00:28:32,990
0,120 120,180 180,450 450,870 870,990
with the correct values and

982
00:28:32,990 --> 00:28:34,820
0,240 750,1020 1020,1320 1320,1350 1350,1830
the user program or just

983
00:28:34,850 --> 00:28:36,280
0,150 150,450 450,750 750,1170
do something totally wrong.

984
00:28:37,500 --> 00:28:40,260
0,660 810,1560 1890,2130 2130,2310 2310,2760
Question yes, could you return

985
00:28:40,260 --> 00:28:42,480
0,120 120,390 390,1560 1560,2010 2010,2220
to the instructions panel that

986
00:28:42,480 --> 00:28:43,800
0,120 120,300 300,810 840,1020 1020,1320
you had before I'm wondering

987
00:28:43,800 --> 00:28:46,290
0,180 180,300 300,600 600,1050 1050,2490
what the Si R W

988
00:28:46,290 --> 00:28:49,520
0,480 480,600 600,990
instruction is doing.

989
00:28:51,070 --> 00:28:52,570
0,420 420,600 600,720 720,1200 1200,1500
The C S R W

990
00:28:52,570 --> 00:28:53,590
0,180 180,360 360,570 570,780 780,1020
OK we'll talk about this,

991
00:28:53,590 --> 00:28:55,480
0,450 450,840 840,1050 1050,1260 1260,1890
um, in a few minutes,

992
00:28:56,080 --> 00:28:56,830
0,240 240,360 360,600 600,660 660,750
but the answer to your

993
00:28:56,830 --> 00:28:59,380
0,360 360,480 480,720 720,1350 1350,2550
question is that instruction swaps

994
00:28:59,530 --> 00:29:01,750
0,240 240,1050 1200,1470 1470,1560 1560,2220
a zero with the contents

995
00:29:01,750 --> 00:29:03,940
0,180 180,360 360,990 990,1560 1560,2190
of the special scratch register.

996
00:29:04,780 --> 00:29:07,540
0,540 900,1110 1110,1290 1290,1680 2250,2760
Um, and so in yeah

997
00:29:07,960 --> 00:29:09,160
0,480 480,660 660,750 750,930 930,1200
yeah, this is like super

998
00:29:09,160 --> 00:29:10,340
0,570
important.

999
00:29:10,390 --> 00:29:12,700
0,570 1200,1590 1590,1890 1890,1950 1950,2310
And basically answers the question

1000
00:29:12,700 --> 00:29:14,440
0,120 120,300 300,660 930,1320 1350,1740
how can the this kernel

1001
00:29:14,440 --> 00:29:15,640
0,270 270,510 510,660 660,1080 1080,1200
trap code do anything if

1002
00:29:15,640 --> 00:29:17,020
0,60 60,240 240,420 420,600 600,1380
it can't use any registers

1003
00:29:17,560 --> 00:29:18,520
0,150 150,360 360,510 510,870 870,960
the answer that question is

1004
00:29:18,520 --> 00:29:19,660
0,180 180,510 540,930 930,1080 1080,1140
that exit really has to

1005
00:29:19,660 --> 00:29:21,160
0,750 750,1320
execute this.

1006
00:29:21,320 --> 00:29:23,840
0,1020 1020,1410 1410,1620 1620,1920 1920,2520
CSRC w eight zero scratch

1007
00:29:23,840 --> 00:29:27,320
0,750 1080,1620 1620,2520 2520,3030 3030,3480
instruction that simultaneously saves easier

1008
00:29:27,320 --> 00:29:29,270
0,150 150,960 990,1440 1440,1830 1830,1950
when scratch and happens to

1009
00:29:29,270 --> 00:29:31,060
0,300 300,870 870,1110 1110,1530
load scratch into Asia.

1010
00:29:31,880 --> 00:29:32,840
0,180 180,390 390,540 540,810 810,960
So now the kernel can

1011
00:29:32,840 --> 00:29:34,520
0,750 780,900 900,1230 1230,1350 1350,1680
use a zero for whatever

1012
00:29:34,520 --> 00:29:35,690
0,90 90,390 390,510 690,1020 1020,1170
it wants to after this

1013
00:29:35,690 --> 00:29:36,460
0,480
instruction.

1014
00:29:38,890 --> 00:29:40,800
0,450 480,900 1080,1680
Okay, let's yeah.

1015
00:29:41,710 --> 00:29:43,210
0,420 420,750 780,900 900,1320 1320,1500
Okay so we're currently this

1016
00:29:43,210 --> 00:29:45,220
0,600 600,900 900,1050 1050,1800 1800,2010
addresses three F F zero

1017
00:29:45,220 --> 00:29:46,750
0,240 240,750 870,1050 1050,1260 1260,1530
zero zero now this last

1018
00:29:46,750 --> 00:29:48,160
0,240 240,330 330,420 420,990 990,1410
page is the trampoline page

1019
00:29:48,160 --> 00:29:49,780
0,240 270,390 390,780 780,1320 1380,1620
and we're currently executing in

1020
00:29:49,780 --> 00:29:51,820
0,60 60,660 660,1170 1200,1680 1680,2040
the trampoline page which contains

1021
00:29:51,820 --> 00:29:54,370
0,180 270,630 630,960 960,1980 2220,2550
the very first instructions of

1022
00:29:54,370 --> 00:29:56,230
0,90 90,510 510,900 900,1260 1260,1860
the colonel's trap handling code.

1023
00:29:58,000 --> 00:30:00,220
0,510 510,840 840,1140 1140,1470 1470,2220
Eco doesn't switch page tables

1024
00:30:00,400 --> 00:30:01,450
0,330 330,360 360,540 540,930 930,1050
that's a very important thing

1025
00:30:01,450 --> 00:30:02,770
0,270 270,750 750,930 930,1110 1110,1320
about equal and what that

1026
00:30:02,770 --> 00:30:04,120
0,300 300,420 420,660 720,1080 1080,1350
means is that these very

1027
00:30:04,120 --> 00:30:05,230
0,210 210,660 660,870 870,990 990,1110
first instructions have to be

1028
00:30:05,230 --> 00:30:07,180
0,540 570,870 870,1260 1260,1620 1620,1950
present in every user page

1029
00:30:07,180 --> 00:30:07,940
0,390
table.

1030
00:30:08,080 --> 00:30:09,730
0,450 540,990 990,1260 1260,1440 1440,1650
A because sql doesn't switch

1031
00:30:09,730 --> 00:30:10,570
0,240 240,510 510,630 630,780 780,840
page tables, we need to

1032
00:30:10,570 --> 00:30:11,980
0,120 120,900 900,1020 1020,1290 1290,1410
be executing the first bit

1033
00:30:11,980 --> 00:30:13,510
0,60 60,150 150,630 840,1440 1440,1530
of the kernel somewhere in

1034
00:30:13,510 --> 00:30:14,560
0,60 60,360 360,630 630,960 960,1050
the user page table and

1035
00:30:14,560 --> 00:30:16,390
0,120 120,270 270,840 840,1440 1530,1830
it's this trampoline page which

1036
00:30:16,390 --> 00:30:17,590
0,90 90,300 300,660 660,1020 1020,1200
the colonel carefully maps into

1037
00:30:17,590 --> 00:30:20,170
0,270 270,720 810,1200 1200,1650 2250,2580
every user page table that

1038
00:30:20,170 --> 00:30:21,340
0,150 150,210 210,540 540,630 630,1170
gives the kernel a place

1039
00:30:21,340 --> 00:30:22,570
0,180 180,660 660,750 750,900 900,1230
to execute at the very

1040
00:30:22,570 --> 00:30:23,470
0,360 360,450 450,510 510,810 810,900
beginning of a trap when

1041
00:30:23,470 --> 00:30:24,430
0,90 90,300 300,630 630,690 690,960
we're still using the user

1042
00:30:24,430 --> 00:30:25,720
0,270 270,630 870,1080 1080,1170 1170,1290
page table and the way

1043
00:30:25,720 --> 00:30:27,080
0,210 210,300 300,1110
this is controlled.

1044
00:30:27,700 --> 00:30:29,740
0,600 1200,1380 1380,1530 1530,1650 1650,2040
Um is through the St,

1045
00:30:29,740 --> 00:30:31,000
0,210 210,630 630,750 750,840 840,1260
back register, this is another

1046
00:30:31,000 --> 00:30:32,320
0,840
privileged.

1047
00:30:32,490 --> 00:30:34,110
0,450 450,750 750,1230 1230,1410 1410,1620
Register only readable by the

1048
00:30:34,110 --> 00:30:36,270
0,240 240,510 510,630 630,1410 1890,2160
right by the supervisor and

1049
00:30:36,270 --> 00:30:37,560
0,60 60,450 450,930 930,1050 1050,1290
the kernel before it entered

1050
00:30:37,560 --> 00:30:38,670
0,240 240,540 540,780 780,900 900,1110
user space set up the

1051
00:30:38,670 --> 00:30:40,170
0,390 390,780 990,1200 1200,1440 1440,1500
Steve ek to point to

1052
00:30:40,170 --> 00:30:41,400
0,120 120,480 480,660 660,750 750,1230
the place where the colonel

1053
00:30:41,400 --> 00:30:43,020
0,360 360,810 810,900 900,1380
wanted traps to go.

1054
00:30:43,110 --> 00:30:43,680
0,150 150,270 270,360 360,480 480,570
And so as you can

1055
00:30:43,680 --> 00:30:45,090
0,240 240,330 330,630 630,780 780,1410
see the colonel has previously

1056
00:30:45,090 --> 00:30:46,470
0,240 240,390 390,600 600,990 990,1380
set up this St back

1057
00:30:46,650 --> 00:30:48,390
0,240 240,420 420,750 750,1050 1050,1740
to this three F F

1058
00:30:48,390 --> 00:30:49,920
0,240 240,450 450,900 900,1320 1320,1530
zero zero zero address which

1059
00:30:49,920 --> 00:30:50,730
0,90 90,150 150,630 630,720 720,810
is the beginning of the

1060
00:30:50,730 --> 00:30:52,080
0,570 570,1080
trampoline page.

1061
00:30:52,360 --> 00:30:53,620
0,300 300,420 420,630 630,1020 1020,1260
And it's this St, vac

1062
00:30:53,620 --> 00:30:56,080
0,690 900,1470 1500,1740 1740,2340 2340,2460
register that its content is

1063
00:30:56,080 --> 00:30:57,250
0,120 120,420 420,720 720,1050 1050,1170
the reason why after the

1064
00:30:57,250 --> 00:30:59,320
0,150 150,660 810,1110 1110,1350 1350,2070
e call, we ended up

1065
00:30:59,350 --> 00:31:01,750
0,780 870,1020 1020,1200 1200,1710 1710,2400
executing at this particular place.

1066
00:31:05,060 --> 00:31:05,750
0,180 180,360 360,420 420,570 570,690
And finally I just want

1067
00:31:05,750 --> 00:31:06,620
0,60 60,420 420,540 540,660 660,870
to remind you that even

1068
00:31:06,620 --> 00:31:07,820
0,120 120,270 270,780 780,870 870,1200
though the trampoline and trap

1069
00:31:07,820 --> 00:31:09,290
0,420 420,780 780,870 870,1260 1260,1470
frame pages are mapped into

1070
00:31:09,290 --> 00:31:10,850
0,120 120,450 450,810 810,1230 1260,1560
the user page table user

1071
00:31:10,850 --> 00:31:13,100
0,240 240,840 1080,1410 1410,1830 1830,2250
address space, the user code

1072
00:31:13,100 --> 00:31:14,440
0,480 480,720 720,1050
cannot write them.

1073
00:31:14,580 --> 00:31:16,170
0,450 540,900 900,1020 1020,1500 1500,1590
Um, because the {Pte's -}

1074
00:31:16,170 --> 00:31:17,340
0,150 150,570 600,870 870,1050 1050,1170
for them don't have the

1075
00:31:17,340 --> 00:31:18,750
0,360 360,720 720,1200 1200,1290 1290,1410
ppt, eu flags so they're

1076
00:31:18,750 --> 00:31:21,380
0,690 1170,1740 1740,1980 1980,2340
protected against user code.

1077
00:31:21,880 --> 00:31:22,840
0,120 120,300 300,420 420,630 630,960
And that's why this trick

1078
00:31:22,840 --> 00:31:23,410
0,150 150,240 240,450 450,510 510,570
is a part of the

1079
00:31:23,410 --> 00:31:24,280
0,180 180,270 270,450 450,750 750,870
reason why this trick is

1080
00:31:24,280 --> 00:31:25,180
0,660
safe.

1081
00:31:27,120 --> 00:31:28,740
0,630 840,1110 1110,1200 1200,1410 1410,1620
Um, I've been sort of

1082
00:31:28,740 --> 00:31:30,300
0,300 300,450 450,510 510,1290 1320,1560
telling you in assuming that

1083
00:31:30,300 --> 00:31:31,770
0,150 150,240 240,840 840,1320 1350,1470
we're in supervisor mode I

1084
00:31:31,770 --> 00:31:32,460
0,120 120,270 270,450 450,600 600,690
don't know any way of

1085
00:31:32,460 --> 00:31:33,870
0,360 360,540 540,780 780,1260 1290,1410
finding out what mode the

1086
00:31:33,870 --> 00:31:36,090
0,360 360,510 510,780 810,1380 1830,2220
machine is in directly, um,

1087
00:31:36,330 --> 00:31:37,590
0,270 270,330 330,540 540,1020 1020,1260
but I do observe that

1088
00:31:37,590 --> 00:31:39,180
0,240 270,660 660,1110 1110,1260 1260,1590
the program counter is currently

1089
00:31:39,180 --> 00:31:40,530
0,600 600,720 720,780 780,1290 1290,1350
executing in a page, the

1090
00:31:40,530 --> 00:31:42,540
0,480 480,990 1140,1620 1620,1890 1890,2010
trampoline page that doesn't have

1091
00:31:42,540 --> 00:31:44,580
0,90 90,390 390,960 960,1500 1500,2040
A P eu flag set

1092
00:31:44,880 --> 00:31:45,990
0,330 330,450 450,570 570,780 780,1110
and that can only happen

1093
00:31:45,990 --> 00:31:47,520
0,240 240,300 300,1050 1140,1410 1410,1530
without a crash, if we

1094
00:31:47,520 --> 00:31:48,750
0,90 90,150 150,810 810,930 960,1230
are in supervisor mode, so

1095
00:31:48,750 --> 00:31:50,340
0,240 300,1110 1110,1260 1260,1350 1350,1590
I deduce from the lack

1096
00:31:50,340 --> 00:31:52,350
0,60 60,150 150,840 1140,1770 1770,2010
of a crash and the

1097
00:31:52,380 --> 00:31:53,490
0,330 330,420 420,480 480,810 810,1110
value of the program counter

1098
00:31:53,490 --> 00:31:54,570
0,120 120,240 240,720 720,960 960,1080
that we must be in

1099
00:31:54,570 --> 00:31:55,840
0,660 660,870
supervisor mode.

1100
00:31:57,790 --> 00:31:58,780
0,450 450,570 570,780 780,930 930,990
How we got here, of

1101
00:31:58,780 --> 00:32:01,330
0,660 660,1140 1290,1770 1770,2190 2190,2550
course I three callie call

1102
00:32:01,330 --> 00:32:03,340
0,240 240,450 450,870 870,1110 1110,2010
really just changes three things

1103
00:32:03,640 --> 00:32:04,500
0,600
first.

1104
00:32:04,780 --> 00:32:06,160
0,330 330,690 690,960 960,1110 1110,1380
Eco changes mode from user

1105
00:32:06,160 --> 00:32:09,610
0,90 90,900 1470,2220 2430,2910 2910,3450
to supervisor, second equals saves

1106
00:32:09,610 --> 00:32:11,140
0,90 90,450 450,780 780,1410 1410,1530
the program counter register in

1107
00:32:11,140 --> 00:32:13,060
0,150 150,660 660,1140 1140,1710 1740,1920
the se PC register, so

1108
00:32:13,060 --> 00:32:13,930
0,60 60,180 180,390 390,510 510,870
we can see the effect

1109
00:32:13,930 --> 00:32:14,800
0,60 60,360
of that.

1110
00:32:14,900 --> 00:32:16,190
0,90 90,240 240,300 300,720 720,1290
I think the program registers

1111
00:32:16,250 --> 00:32:17,840
0,690 690,930 930,1080 1080,1440 1440,1590
program counter, it's certainly no

1112
00:32:17,840 --> 00:32:19,340
0,270 270,390 390,690 690,1020 1020,1500
longer the user program counter,

1113
00:32:19,430 --> 00:32:20,240
0,210 210,300 300,510 510,630 630,810
even though while the other

1114
00:32:20,240 --> 00:32:21,460
0,540 540,900
registers were.

1115
00:32:21,580 --> 00:32:24,310
0,510 840,1080 1080,1620 1920,2340 2340,2730
Um, this, this value copied

1116
00:32:24,310 --> 00:32:25,580
0,150 150,540 540,990
from St, vac.

1117
00:32:26,010 --> 00:32:27,330
0,420 540,810 810,870 870,1020 1020,1320
Um, and we can also

1118
00:32:27,330 --> 00:32:28,180
0,600
print.

1119
00:32:28,660 --> 00:32:31,480
0,450 480,600 600,1680 2100,2460 2460,2820
Um the saved, um, it's

1120
00:32:31,480 --> 00:32:34,330
0,150 150,1290 1290,1890 1890,2280 2280,2850
the supervisor exception program counters

1121
00:32:34,330 --> 00:32:35,560
0,150 150,270 270,630 630,930 960,1230
what that stands for, but

1122
00:32:35,560 --> 00:32:36,970
0,120 120,210 210,450 450,810 810,1410
this is where eco saves

1123
00:32:36,970 --> 00:32:38,620
0,90 90,390 390,780 960,1230 1230,1650
the user program, print counter,

1124
00:32:38,920 --> 00:32:40,180
0,420 630,780 780,930 930,1140 1140,1260
um, and that has a

1125
00:32:40,180 --> 00:32:42,250
0,480 480,990 1020,1410 1410,1890 1890,2070
familiar value d six which

1126
00:32:42,250 --> 00:32:43,840
0,480 570,750 750,1110 1110,1290 1290,1590
is the address in user

1127
00:32:43,840 --> 00:32:46,390
0,660 1230,1620 1620,1740 1740,2040 2040,2550
space of the eco instruction.

1128
00:32:47,130 --> 00:32:47,850
0,210 210,270 270,390 390,510 510,720
So we got that one

1129
00:32:47,850 --> 00:32:49,110
0,450 450,540 540,750 750,990 990,1260
register at least saved away

1130
00:32:49,110 --> 00:32:50,180
0,150 150,750
by eco.

1131
00:32:50,510 --> 00:32:51,380
0,150 150,240 240,510 510,690 690,870
And the final thing that

1132
00:32:51,380 --> 00:32:52,370
0,90 90,330 330,600 600,720 720,990
you call does the third

1133
00:32:52,370 --> 00:32:53,630
0,150 150,210 210,450 450,720 720,1260
thing, it does is jump

1134
00:32:53,870 --> 00:32:56,210
0,210 210,330 330,1050 1050,1710 1740,2340
to the instruction that estee

1135
00:32:56,210 --> 00:32:58,180
0,270 270,600 600,810
beck points too.

1136
00:33:02,270 --> 00:33:04,480
0,690 1320,1920
Alright, um.

1137
00:33:04,940 --> 00:33:05,780
0,180 180,300 300,480 480,540 540,840
So what needs to happen

1138
00:33:05,780 --> 00:33:06,590
0,270 270,390 390,630 630,750 750,810
now he calls down a

1139
00:33:06,590 --> 00:33:07,370
0,180 180,270 270,360 360,570 570,780
little bit of work for

1140
00:33:07,370 --> 00:33:08,690
0,240 240,480 810,1020 1020,1200 1200,1320
us, but it turns out

1141
00:33:08,690 --> 00:33:09,620
0,60 60,120 120,390 390,600 600,930
we are nowhere near ready

1142
00:33:09,620 --> 00:33:11,090
0,150 150,480 480,900 900,1260 1260,1470
to actually execute ordinary c

1143
00:33:11,090 --> 00:33:12,560
0,240 240,330 330,390 390,900 1260,1470
code in the kernel, um

1144
00:33:12,560 --> 00:33:13,730
0,240 240,390 390,480 480,750 750,1170
what has to happen now

1145
00:33:14,090 --> 00:33:15,140
0,240 240,330 330,480 480,570 570,1050
do we need to save

1146
00:33:15,140 --> 00:33:17,660
0,90 90,630 630,1050 1050,1620 1620,2520
the 32 user register contents,

1147
00:33:17,990 --> 00:33:19,070
0,180 180,270 270,420 420,690 690,1080
so we can later restore

1148
00:33:19,070 --> 00:33:19,970
0,240 240,390 390,600 600,720 720,900
them and when we want

1149
00:33:19,970 --> 00:33:21,320
0,60 60,570 570,630 630,900 900,1350
to resume the user code,

1150
00:33:21,920 --> 00:33:22,790
0,240 240,330 330,450 450,540 540,870
now we need to switch

1151
00:33:22,790 --> 00:33:24,110
0,120 120,210 210,630 630,930 930,1320
to the kernel page table

1152
00:33:24,110 --> 00:33:25,220
0,390 420,780 780,870 870,1020 1020,1110
because currently we use the

1153
00:33:25,220 --> 00:33:27,140
0,270 270,510 510,930 1290,1770 1770,1920
user page table, we need

1154
00:33:27,140 --> 00:33:28,340
0,240 270,540 540,570 570,1110 1110,1200
to create a stack or

1155
00:33:28,340 --> 00:33:29,450
0,240 240,300 300,690 690,840 840,1110
find a stack and set

1156
00:33:29,450 --> 00:33:30,560
0,60 60,360 360,600 600,1020 1020,1110
the stack pointer register to

1157
00:33:30,560 --> 00:33:32,360
0,360 360,450 450,720 810,1260 1260,1800
point to the kernel stack,

1158
00:33:32,360 --> 00:33:32,960
0,150 150,240 240,390 390,540 540,600
so we can run the

1159
00:33:32,960 --> 00:33:34,430
0,210 210,630 750,990 990,1380 1380,1470
c code which requires a

1160
00:33:34,430 --> 00:33:35,510
0,420 570,780 780,870 870,930 930,1080
stack and then we need

1161
00:33:35,510 --> 00:33:36,620
0,90 90,360 360,690 690,810 810,1110
to actually jump to some

1162
00:33:36,620 --> 00:33:39,050
0,420 420,1080 1950,2160 2160,2220 2220,2430
sensible place in the c

1163
00:33:39,050 --> 00:33:40,280
0,330 330,420 420,480 480,870
code in the kernel.

1164
00:33:40,700 --> 00:33:42,820
0,480 750,1080 1080,1140 1140,1830
Now as an aside.

1165
00:33:43,580 --> 00:33:44,510
0,210 210,270 270,630 630,810 810,930
You know equal didn't do

1166
00:33:44,510 --> 00:33:45,530
0,180 180,240 240,420 420,750 750,1020
any of these things for

1167
00:33:45,530 --> 00:33:46,860
0,420 450,1050
us, um.

1168
00:33:47,070 --> 00:33:47,820
0,150 150,270 270,420 420,540 540,750
You know, but you could

1169
00:33:47,820 --> 00:33:49,650
0,390 570,930 960,1470 1470,1680 1680,1830
have the hardware could have

1170
00:33:49,650 --> 00:33:50,760
0,480 480,600 600,870 870,930 930,1110
defined you called to do

1171
00:33:50,760 --> 00:33:52,380
0,240 240,780
much more.

1172
00:33:53,390 --> 00:33:54,590
0,390 390,570 570,630 630,780 780,1200
Many more of these steps

1173
00:33:54,590 --> 00:33:55,730
0,360 360,510 510,780 780,870 870,1140
for us instead of leaving

1174
00:33:55,730 --> 00:33:56,750
0,120 120,210 210,600 600,690 690,1020
them to software and as

1175
00:33:56,750 --> 00:33:58,550
0,390 390,870 870,1110 1170,1650 1650,1800
we'll see the during the

1176
00:33:58,550 --> 00:34:00,620
0,360 360,510 510,900 900,1380 1380,2070
software, it's not particularly straightforward

1177
00:34:01,310 --> 00:34:02,270
0,210 210,330 330,450 450,660 660,960
so you should ask yourself

1178
00:34:02,270 --> 00:34:03,620
0,390 390,540 540,930 930,1230 1230,1350
why the eco doesn't do

1179
00:34:03,620 --> 00:34:05,150
0,360 360,450 450,570 570,1020 1050,1530
more of the work of

1180
00:34:05,180 --> 00:34:06,260
0,270 270,420 420,630 630,930 930,1080
getting from user space into

1181
00:34:06,260 --> 00:34:07,610
0,60 60,540 660,960 960,1110 1110,1350
the kernel, now why doesn't

1182
00:34:07,610 --> 00:34:08,160
0,210
it.

1183
00:34:08,220 --> 00:34:10,020
0,360 360,720 720,870 870,1110 1110,1800
Um, save their user registers

1184
00:34:10,020 --> 00:34:12,960
0,540 810,1860 1890,2250 2250,2520 2520,2940
or switch page table finders

1185
00:34:12,960 --> 00:34:13,680
0,90 90,300 300,390 390,450 450,720
to point to the kernel

1186
00:34:13,680 --> 00:34:16,110
0,300 300,780 780,1350 1440,2100 2100,2430
page table or automatically set

1187
00:34:16,110 --> 00:34:17,340
0,180 180,510 510,870 870,960 960,1230
the stack pointer to point

1188
00:34:17,340 --> 00:34:18,760
0,90 90,330 360,630 630,1230
to the kernel stack.

1189
00:34:19,020 --> 00:34:20,400
0,270 270,540 540,810 810,1080 1080,1380
Or jump right to colonel

1190
00:34:20,400 --> 00:34:22,320
0,720 750,1230 1230,1560 1560,1680 1680,1920
c-code jeez rather than having

1191
00:34:22,320 --> 00:34:23,190
0,60 60,210 210,390 390,480 480,870
to go through all this

1192
00:34:23,190 --> 00:34:26,640
0,450 660,1260 1260,1650 1650,2070
a complicated assembly code.

1193
00:34:26,990 --> 00:34:28,490
0,120 120,390 390,690 690,840 840,1500
And there's actually been machines

1194
00:34:28,490 --> 00:34:29,240
0,150 150,270 270,450 450,660 660,750
that have done all of

1195
00:34:29,240 --> 00:34:30,380
0,210 210,930
these things.

1196
00:34:30,530 --> 00:34:33,860
0,450 450,600 600,1290 1890,2400 2970,3330
Um, in hardware a during

1197
00:34:33,860 --> 00:34:36,590
0,330 330,870 1980,2190 2190,2520 2520,2730
system calls the risk doesn't

1198
00:34:36,590 --> 00:34:37,310
0,120 120,300 300,360 360,510 510,720
do any of them there's

1199
00:34:37,310 --> 00:34:38,420
0,240 240,480 480,570 570,960 960,1110
five really the attitude they've

1200
00:34:38,420 --> 00:34:40,100
0,330 330,510 510,630 630,1320 1350,1680
taken is the eco does

1201
00:34:40,100 --> 00:34:42,770
0,270 270,750 750,1470 1470,1770 1770,2670
the absolute minimum that's required

1202
00:34:42,800 --> 00:34:43,820
0,120 120,180 180,300 300,780 780,1020
that it could possibly do

1203
00:34:43,820 --> 00:34:44,780
0,90 90,300 300,600 600,810 810,960
and leave everything else up

1204
00:34:44,780 --> 00:34:45,760
0,90 90,660
to software.

1205
00:34:45,860 --> 00:34:46,850
0,180 180,270 270,600 600,720 720,990
And the reason for this

1206
00:34:46,850 --> 00:34:48,170
0,150 150,570 600,900 900,1110 1110,1320
is because the risk five

1207
00:34:48,170 --> 00:34:50,000
0,540 540,720 720,780 780,1170 1170,1830
designers want to allow maximum

1208
00:34:50,000 --> 00:34:52,340
0,930 1020,1350 1350,1560 1560,2280 2280,2340
flexibility to the software, the

1209
00:34:52,340 --> 00:34:54,410
0,450 450,900 900,1620 1620,1710 1710,2070
operating system programmers to design

1210
00:34:54,410 --> 00:34:56,510
0,390 540,1020 1050,1440 1440,1770 1770,2100
the program operating system, however

1211
00:34:56,510 --> 00:34:57,400
0,120 120,570
they like.

1212
00:34:57,540 --> 00:34:59,400
0,480 990,1170 1170,1410 1500,1770 1770,1860
Um, and so you can

1213
00:34:59,400 --> 00:35:01,380
0,390 390,780 780,1110 1110,1590 1680,1980
imagine ways actually six really

1214
00:35:01,380 --> 00:35:03,030
0,270 270,510 510,690 690,1170 1380,1650
doesn't use this freedom, um,

1215
00:35:03,030 --> 00:35:04,560
0,270 270,480 480,870 870,1260 1260,1530
but other operating systems do

1216
00:35:04,590 --> 00:35:07,050
0,240 240,390 390,1350 1380,1620 1890,2460
so some examples of things

1217
00:35:07,050 --> 00:35:08,610
0,240 240,390 390,570 570,690 720,1560
that are kind of enabled

1218
00:35:08,640 --> 00:35:09,840
0,150 150,210 210,630 630,720 720,1200
for the software to do

1219
00:35:10,170 --> 00:35:11,910
0,180 180,600 600,1020 1020,1200 1200,1740
a because eco so simple,

1220
00:35:12,300 --> 00:35:13,060
0,480
um.

1221
00:35:13,270 --> 00:35:13,760
0,120
Yes.

1222
00:35:14,540 --> 00:35:16,550
0,660 690,990 990,1350 1350,1860 1860,2010
Maybe some operating systems can

1223
00:35:16,550 --> 00:35:19,190
0,450 450,1230 1560,2040 2040,2280 2280,2640
execute some trap some system

1224
00:35:19,190 --> 00:35:21,320
0,330 330,660 660,1080 1080,1440 1440,2130
calls without switching page tables,

1225
00:35:21,470 --> 00:35:23,000
0,210 210,510 510,810 810,1230 1230,1530
the searching page page tables,

1226
00:35:23,000 --> 00:35:24,710
0,660 690,990 990,1230 1230,1620 1620,1710
expensive iffy call forces you

1227
00:35:24,710 --> 00:35:26,270
0,90 90,270 270,510 690,1230 1230,1560
to do it now that

1228
00:35:26,270 --> 00:35:27,560
0,270 270,390 390,480 480,1170 1170,1290
rules out the possibility of

1229
00:35:27,560 --> 00:35:30,560
0,450 450,1500 1860,2610 2610,2700 2700,3000
very streamlined implementations for some

1230
00:35:30,560 --> 00:35:32,000
0,330 330,840 840,930 930,1170 1170,1440
system calls that don't switch

1231
00:35:32,000 --> 00:35:33,040
0,270 270,870
page tables.

1232
00:35:33,360 --> 00:35:35,910
0,480 1140,1380 1380,1710 1710,2220 2220,2550
Um, some operating systems both

1233
00:35:35,910 --> 00:35:37,660
0,420 420,780 780,1440
user and kernel.

1234
00:35:37,760 --> 00:35:39,080
0,360 360,690 690,1080 1080,1230 1230,1320
A virtual addresses into a

1235
00:35:39,080 --> 00:35:40,220
0,330 330,600 600,870 870,960 960,1140
single page table and use

1236
00:35:40,220 --> 00:35:41,420
0,90 90,390 390,720 720,1080 1080,1200
the same page table for

1237
00:35:41,420 --> 00:35:42,500
0,240 240,480 480,570 570,930 930,1080
both user and kernel and

1238
00:35:42,500 --> 00:35:43,430
0,270 270,480 480,630 630,810 810,930
therefore don't even have to

1239
00:35:43,430 --> 00:35:45,680
0,300 300,600 600,930 930,1290 1800,2250
switch page tables ever when

1240
00:35:45,680 --> 00:35:47,300
0,570 570,930 930,1200 1200,1290 1290,1620
transitioning between user and kernel

1241
00:35:47,930 --> 00:35:48,860
0,150 150,240 240,450 450,810 810,930
and for them, also if

1242
00:35:48,860 --> 00:35:50,030
0,90 90,300 300,570 570,840 840,1170
you call switch page tables

1243
00:35:50,030 --> 00:35:50,450
0,60 60,150 150,270 270,360 360,420
I would just be a

1244
00:35:50,450 --> 00:35:52,190
0,570 780,900 900,1140 1140,1350 1350,1740
waste and slow things down.

1245
00:35:52,620 --> 00:35:54,990
0,390 510,900 900,1020 1020,1200 1200,2370
Um, maybe in some circumstances

1246
00:35:55,020 --> 00:35:56,640
0,360 360,720 720,990 990,1050 1050,1620
a system calls for example.

1247
00:35:57,180 --> 00:35:58,410
0,270 270,780 780,990 990,1140 1140,1230
Some registers don't have to

1248
00:35:58,410 --> 00:35:59,910
0,90 90,960 990,1110 1110,1350 1350,1500
be saved and which ones

1249
00:35:59,910 --> 00:36:00,900
0,150 150,240 240,330 330,660 660,990
have to be saved master,

1250
00:36:00,900 --> 00:36:02,160
0,60 60,390 390,450 450,510 510,1260
it depends on the software

1251
00:36:02,160 --> 00:36:03,090
0,60 60,180 180,750 750,870 870,930
or the language and the

1252
00:36:03,090 --> 00:36:04,710
0,660 660,900 1200,1440 1440,1500 1500,1620
compiler but might be able

1253
00:36:04,710 --> 00:36:05,160
0,60 60,210 210,240 240,390 390,450
to save a lot of

1254
00:36:05,160 --> 00:36:06,540
0,270 270,420 420,840 840,1230 1230,1380
time by saving fewer than

1255
00:36:06,540 --> 00:36:08,040
0,420 420,1230 1260,1350 1350,1410 1410,1500
32 registers so you don't

1256
00:36:08,040 --> 00:36:08,880
0,210 210,510 510,600 600,780 780,840
want equal to kind of

1257
00:36:08,880 --> 00:36:09,820
0,360 360,660
force you.

1258
00:36:10,080 --> 00:36:11,550
0,150 150,870 870,1110 1110,1380 1380,1470
You necessarily want equal to

1259
00:36:11,550 --> 00:36:12,600
0,450 450,540 540,630 630,870 870,1050
force you to save all

1260
00:36:12,600 --> 00:36:14,500
0,90 90,840 1080,1620
the registers now.

1261
00:36:14,720 --> 00:36:15,920
0,180 180,450 450,690 690,870 870,1200
And finally, maybe no stack

1262
00:36:15,920 --> 00:36:16,970
0,90 90,300 300,450 450,930 930,1050
at all is required for

1263
00:36:16,970 --> 00:36:18,560
0,210 210,540 540,870 870,1230 1230,1590
some simple system calls so

1264
00:36:18,920 --> 00:36:21,410
0,690 1200,1920 1920,2250 2250,2340 2340,2490
again operating systems that care

1265
00:36:21,410 --> 00:36:22,670
0,60 60,270 270,480 480,1110 1110,1260
a lot about performance, it's

1266
00:36:22,670 --> 00:36:24,260
0,300 300,390 390,690 690,1020 1020,1590
good, the eco doesn't force

1267
00:36:24,290 --> 00:36:25,910
0,210 210,660 660,990 990,1440 1440,1620
any particular stack policy on

1268
00:36:25,910 --> 00:36:26,240
0,90
you.

1269
00:36:26,810 --> 00:36:29,180
0,480 1020,1230 1230,1470 1470,1620 1620,2370
Um, and again there's many

1270
00:36:29,180 --> 00:36:30,320
0,750
clever.

1271
00:36:30,480 --> 00:36:34,020
0,1200 1200,1830 1830,2580 2580,3000 3180,3540
Hardware, software schemes for very

1272
00:36:34,020 --> 00:36:36,720
0,780 780,960 960,1770 1920,2400 2400,2700
streamlined high performance system calls

1273
00:36:36,720 --> 00:36:37,950
0,90 90,630 660,840 840,1080 1080,1230
and tracks just because the

1274
00:36:37,950 --> 00:36:39,090
0,420 420,480 480,600 600,840 840,1140
performance of this stuff is

1275
00:36:39,540 --> 00:36:40,920
0,450 450,840 840,930 930,1170 1170,1380
super important and people worry

1276
00:36:40,920 --> 00:36:43,650
0,210 210,360 360,450 450,720 2160,2730
about it a lot, okay.

1277
00:36:44,340 --> 00:36:45,600
0,270 270,420 420,510 510,1170 1170,1260
So back to x86 and

1278
00:36:45,600 --> 00:36:48,240
0,90 90,300 300,960
I'm just five.

1279
00:36:48,360 --> 00:36:49,020
0,120 120,300 300,390 390,480 480,660
The first thing we need

1280
00:36:49,020 --> 00:36:49,950
0,60 60,300 300,420 420,750 750,930
to do is save some

1281
00:36:49,950 --> 00:36:51,690
0,600 600,840 870,1050 1050,1170 1170,1740
registers, we can do hardly

1282
00:36:51,690 --> 00:36:53,370
0,720 840,1020 1020,1080 1080,1320 1320,1680
anything on the risk five

1283
00:36:53,370 --> 00:36:56,140
0,300 300,360 360,930 1080,2040
without a few registers.

1284
00:36:56,290 --> 00:36:57,040
0,270 270,390 390,540 540,600 600,750
Without being able to use

1285
00:36:57,040 --> 00:36:58,600
0,540 540,690 690,840 840,1050 1050,1560
registers, so what are options

1286
00:36:58,600 --> 00:37:00,480
0,150 150,600 600,840 840,1680
for saving user registers.

1287
00:37:01,130 --> 00:37:02,600
0,300 300,840 930,1110 1110,1290 1290,1470
Um in on some other

1288
00:37:02,600 --> 00:37:03,650
0,510 510,630 630,780 780,870 870,1050
machine, we might be able

1289
00:37:03,650 --> 00:37:05,090
0,90 90,300 300,780 780,960 960,1440
to just write the contents

1290
00:37:05,090 --> 00:37:06,440
0,90 90,180 180,570 570,1050 1050,1350
of the 32 registers somewhere

1291
00:37:06,440 --> 00:37:08,260
0,570 570,720 720,1050 1050,1560
convenient in physical memory.

1292
00:37:08,400 --> 00:37:09,990
0,450 660,990 990,1200 1200,1410 1410,1590
Um, we cant actually really

1293
00:37:09,990 --> 00:37:10,680
0,150 150,300 300,390 390,450 450,690
do that on the risk

1294
00:37:10,680 --> 00:37:11,980
0,360 360,1050
side because.

1295
00:37:12,060 --> 00:37:13,440
0,240 240,690 690,870 870,1050 1050,1380
A supervisor code isn't allowed

1296
00:37:13,440 --> 00:37:15,000
0,60 60,450 450,780 780,1140 1140,1560
to directly access physical memory,

1297
00:37:15,030 --> 00:37:15,960
0,120 120,300 300,510 510,690 690,930
we can only use what's

1298
00:37:15,960 --> 00:37:17,220
0,90 90,150 150,420 420,840 840,1260
in the page table, there's

1299
00:37:17,250 --> 00:37:18,180
0,300 300,510 510,600 600,660 660,930
not much in the page

1300
00:37:18,180 --> 00:37:18,720
0,270
table.

1301
00:37:19,290 --> 00:37:22,680
0,570 1350,1890 1890,2520 2520,2790 3030,3390
Um, another possibility that X

1302
00:37:22,680 --> 00:37:24,060
0,120 120,390 390,780 780,1110 1110,1380
B six doesn't do is

1303
00:37:24,090 --> 00:37:25,950
0,420 420,840 840,930 930,1320 1320,1860
simply setting the set p

1304
00:37:26,070 --> 00:37:27,840
0,690 780,870 870,1140 1140,1440 1440,1770
to the kernel page table

1305
00:37:27,990 --> 00:37:29,160
0,180 180,300 300,390 390,810 900,1170
and then we could use

1306
00:37:29,160 --> 00:37:30,180
0,180 180,240 240,510 510,870 870,1020
all the kernel {mapping's -}

1307
00:37:30,180 --> 00:37:31,320
0,150 150,300 300,510 510,750 750,1140
and use them maybe to

1308
00:37:31,650 --> 00:37:32,730
0,360 360,480 480,780 780,840 840,1080
help us save the user

1309
00:37:32,730 --> 00:37:35,010
0,840 1200,1560 1560,1770 1770,1890 1890,2280
registers and that be legal,

1310
00:37:35,010 --> 00:37:36,240
0,90 90,600 600,720 720,990 990,1230
the supervisor can certainly change

1311
00:37:36,240 --> 00:37:37,540
0,510
sappy.

1312
00:37:37,950 --> 00:37:39,150
0,480 480,570 570,750 750,1080 1080,1200
However, at this point in

1313
00:37:39,150 --> 00:37:41,160
0,300 630,960 960,1560 1620,1920 1920,2010
the trap handler namely at

1314
00:37:41,160 --> 00:37:42,750
0,60 60,540 1110,1260 1260,1410 1410,1590
the beginning, we don't even

1315
00:37:42,750 --> 00:37:43,620
0,120 120,240 240,720 720,810 810,870
know the address of the

1316
00:37:43,620 --> 00:37:45,210
0,300 300,600 600,1020 1110,1410 1410,1590
kernel page table a and

1317
00:37:45,210 --> 00:37:47,040
0,690 720,840 840,1590 1590,1680 1680,1830
furthermore the instruction that you

1318
00:37:47,040 --> 00:37:49,410
0,660 750,1020 1020,1560 1560,1920 1920,2370
execute to change set p

1319
00:37:49,590 --> 00:37:51,060
0,660 660,810 810,930 930,1350 1350,1470
require that the address that

1320
00:37:51,060 --> 00:37:52,290
0,150 150,540 540,720 720,1020 1020,1230
you're loading into set b

1321
00:37:52,290 --> 00:37:53,880
0,300 300,480 480,540 540,1110 1410,1590
come from a register so

1322
00:37:53,880 --> 00:37:55,800
0,210 360,870 870,1320 1320,1410 1410,1920
we even execute the instruction

1323
00:37:55,800 --> 00:37:58,200
0,150 150,900 900,1260 1260,1860 2040,2400
to change page tables, um,

1324
00:37:58,200 --> 00:38:00,090
0,150 150,330 330,450 450,840 840,1890
we need some spare registers

1325
00:38:00,120 --> 00:38:01,140
0,150 150,420 420,720
in order to.

1326
00:38:01,550 --> 00:38:02,420
0,210 210,300 300,420 420,660 660,870
Put the new page table

1327
00:38:02,420 --> 00:38:03,530
0,270 270,330 330,540 540,990 990,1110
address in those registers so

1328
00:38:03,530 --> 00:38:05,450
0,90 90,270 390,1080 1590,1770 1770,1920
we can execute a the

1329
00:38:05,450 --> 00:38:08,380
0,510 510,990 990,1560
sappy modifying instruction.

1330
00:38:08,920 --> 00:38:09,910
0,360 360,450 450,510 510,780 780,990
Alright, so we really need

1331
00:38:09,910 --> 00:38:12,130
0,420 930,1200 1200,1260 1260,1500 1500,2220
to save the user registers

1332
00:38:12,400 --> 00:38:15,430
0,450 870,1410 1440,1770 1770,2730 2820,3030
a there's two parts to

1333
00:38:15,430 --> 00:38:17,650
0,450 480,1200 1200,1650 1740,1950 1950,2220
the solution for how ex

1334
00:38:17,650 --> 00:38:18,820
0,120 120,360 360,630 630,810 810,1170
v six does this on

1335
00:38:18,910 --> 00:38:20,410
0,150 150,330 330,390 390,780 840,1500
the basis of five one

1336
00:38:20,410 --> 00:38:22,240
0,600 780,1230 1230,1290 1290,1350 1350,1830
is part of the solution

1337
00:38:22,240 --> 00:38:23,060
0,210 210,480
is that.

1338
00:38:23,870 --> 00:38:25,760
0,270 270,420 420,930 1380,1620 1620,1890
X three six into every

1339
00:38:25,760 --> 00:38:27,350
0,300 300,840 870,1110 1110,1320 1320,1590
user address, every user page

1340
00:38:27,350 --> 00:38:29,210
0,240 240,540 540,840 840,1230 1230,1860
table maps, this trap frame.

1341
00:38:29,840 --> 00:38:32,210
0,390 420,1170 1200,1440 1440,1680 1680,2370
A page and every processes

1342
00:38:32,210 --> 00:38:33,900
0,180 180,540 540,780 780,1440
on track frame page.

1343
00:38:34,180 --> 00:38:35,280
0,360 360,780
Um, and.

1344
00:38:35,820 --> 00:38:37,800
0,270 270,450 450,900 930,1470 1590,1980
Crap frame page page actually

1345
00:38:37,800 --> 00:38:39,180
0,330 330,480 480,1050 1050,1290 1290,1380
contains some interesting bunch of

1346
00:38:39,180 --> 00:38:40,260
0,210 210,420 420,480 480,810 810,1080
different kinds of data, but

1347
00:38:40,470 --> 00:38:41,430
0,330 330,510 510,690 690,780 780,960
at this point the most

1348
00:38:41,430 --> 00:38:43,800
0,360 360,720 720,1440 1440,1830 1830,2370
important data contains is 32

1349
00:38:43,800 --> 00:38:46,650
0,900 1110,1500 1500,2160 2160,2310 2310,2850
slots, empty slots in memory

1350
00:38:47,100 --> 00:38:48,090
0,150 150,330 330,450 450,900 900,990
in which to save the

1351
00:38:48,090 --> 00:38:50,140
0,480 480,1200 1320,1770
32 registers so.

1352
00:38:50,340 --> 00:38:51,420
0,300 300,450 450,630 630,810 810,1080
The good news right now

1353
00:38:51,420 --> 00:38:52,590
0,150 150,390 390,690 690,930 930,1170
in the trap handling code

1354
00:38:52,590 --> 00:38:53,880
0,90 90,270 270,600 600,690 690,1290
is we have a mapping

1355
00:38:53,880 --> 00:38:54,780
0,180 180,630 630,690 690,840 840,900
we're guaranteed to have a

1356
00:38:54,780 --> 00:38:56,220
0,480 810,1140 1140,1230 1230,1350 1350,1440
mapping set up by the

1357
00:38:56,220 --> 00:38:57,870
0,270 270,1020 1080,1260 1260,1350 1350,1650
kernel previously in the user

1358
00:38:57,870 --> 00:38:59,240
0,270 270,720
page table.

1359
00:38:59,300 --> 00:39:00,680
0,330 330,720 720,840 840,900 900,1380
That points to a place

1360
00:39:00,680 --> 00:39:02,570
0,540 780,930 930,1170 1170,1740 1740,1890
where, um, that's prepared for

1361
00:39:02,570 --> 00:39:04,250
0,150 150,270 270,660 660,870 870,1680
us to save this processes,

1362
00:39:04,280 --> 00:39:05,940
0,360 360,1140
user registers.

1363
00:39:07,740 --> 00:39:09,060
0,270 270,390 390,630 630,930 930,1320
And it's sure it's three

1364
00:39:09,060 --> 00:39:11,400
0,120 120,600 600,870 870,1170 1170,2340
is always three F F

1365
00:39:11,460 --> 00:39:13,560
0,330 330,630 630,870 870,1470 1590,2100
E zero zero zero virtual

1366
00:39:13,560 --> 00:39:14,340
0,600
address.

1367
00:39:14,770 --> 00:39:15,730
0,390 510,690 690,780 780,900 900,960
Um, if you want to

1368
00:39:15,730 --> 00:39:17,290
0,210 210,390 390,750 750,1110 1140,1560
see what they are actually

1369
00:39:17,290 --> 00:39:18,580
0,150 150,330 330,630 630,960 960,1290
in that trap frame, it's

1370
00:39:18,610 --> 00:39:19,500
0,570
um.

1371
00:39:20,540 --> 00:39:22,250
0,420 540,780 780,930 930,1290 1290,1710
What ex v six puts

1372
00:39:22,250 --> 00:39:24,560
0,360 360,600 600,1290 1290,1950
there is defined in.

1373
00:39:25,040 --> 00:39:26,000
0,720
I'm.

1374
00:39:28,990 --> 00:39:30,610
0,330 330,540 540,1080 1080,1320 1320,1620
Proc dot h and start

1375
00:39:30,610 --> 00:39:31,690
0,420 420,570 570,660 660,870 870,1080
factoring which is right here

1376
00:39:31,690 --> 00:39:33,790
0,120 120,240 240,330 330,1020 1530,2100
so you can see, um.

1377
00:39:34,710 --> 00:39:35,610
0,270 270,570 570,630 630,810 810,900
What's supposed to go in

1378
00:39:35,610 --> 00:39:37,710
0,180 180,660 690,990 1140,1530 1530,2100
each slot and there's a

1379
00:39:37,710 --> 00:39:39,270
0,570 570,1050 1050,1200 1200,1440 1440,1560
32 slots, you need a

1380
00:39:39,270 --> 00:39:40,920
0,390 390,600 600,990 990,1200 1200,1650
{re-s -} bg pi whatever

1381
00:39:40,920 --> 00:39:42,480
0,360 360,600 930,1230 1230,1320 1320,1560
which are places to save

1382
00:39:42,480 --> 00:39:43,800
0,450 450,600 600,810 810,1020 1020,1320
registers, there's also these five

1383
00:39:43,800 --> 00:39:45,660
0,300 300,360 360,420 420,1050 1560,1860
things at the beginning, um,

1384
00:39:45,660 --> 00:39:46,740
0,300 300,510 510,780 780,900 900,1080
which will see will come

1385
00:39:46,740 --> 00:39:47,940
0,60 60,330 330,570 570,990 990,1200
in handy very soon, which

1386
00:39:47,940 --> 00:39:49,830
0,90 90,1140 1320,1560 1560,1620 1620,1890
are values that the colonel

1387
00:39:49,830 --> 00:39:51,690
0,630 630,1080 1080,1170 1170,1260 1260,1860
previously placed in the slots

1388
00:39:51,690 --> 00:39:53,340
0,120 120,540 570,900 900,1380
in the trap frame.

1389
00:39:53,800 --> 00:39:55,360
0,540 600,870 870,1200 1200,1320 1320,1560
Like, for example this very

1390
00:39:55,360 --> 00:39:56,260
0,240 240,480 480,540 540,600 600,900
first slot in the track

1391
00:39:56,260 --> 00:39:57,700
0,300 510,990 990,1050 1050,1380 1380,1440
frame contains a pointer to

1392
00:39:57,700 --> 00:39:59,170
0,90 90,360 360,630 630,960 1170,1470
the kernel page table, and

1393
00:39:59,170 --> 00:39:59,950
0,120 120,240 240,360 360,420 420,780
this will be the value

1394
00:39:59,950 --> 00:40:01,630
0,210 210,780 870,1260 1260,1560 1560,1680
that we're very soon going

1395
00:40:01,630 --> 00:40:02,240
0,240
to.

1396
00:40:02,490 --> 00:40:03,570
0,270 270,360 360,630 630,870 870,1080
Um the trap handling code

1397
00:40:03,570 --> 00:40:04,350
0,60 60,180 180,240 240,600 600,780
is going to load into

1398
00:40:04,350 --> 00:40:07,280
0,300 300,630 1920,2250 2250,2670
SAP pi okay so.

1399
00:40:07,600 --> 00:40:08,830
0,420 420,540 540,810 810,1050 1050,1230
Half the answer to how

1400
00:40:08,830 --> 00:40:09,790
0,60 60,210 210,300 300,840 840,960
to say the registers is

1401
00:40:09,790 --> 00:40:12,400
0,270 450,990 1080,1530 1530,1950 2100,2610
that a kernel is conveniently

1402
00:40:12,400 --> 00:40:14,620
0,480 480,630 630,930 930,1440 2040,2220
mapped this trap frame and

1403
00:40:14,620 --> 00:40:15,730
0,270 270,450 450,690 690,990 990,1110
every user page table, the

1404
00:40:15,730 --> 00:40:17,770
0,240 240,390 390,840 840,840 1230,2040
other is this, um instructions,

1405
00:40:17,770 --> 00:40:19,480
0,120 120,600 600,1080 1080,1350 1350,1710
um, scratch register which we

1406
00:40:19,960 --> 00:40:22,150
0,690 690,1230 1650,1920 1920,2010 2010,2190
measured before, um, so there's

1407
00:40:22,150 --> 00:40:24,160
0,90 90,660 660,1050 1050,1650
the specialist scratch register.

1408
00:40:24,190 --> 00:40:26,200
0,480 480,720 720,1050 1050,1710 1740,2010
Provided by risk five for

1409
00:40:26,200 --> 00:40:27,400
0,420 420,540 540,870 870,960 960,1200
exactly the purpose, we're about

1410
00:40:27,400 --> 00:40:29,050
0,60 60,240 240,360 360,720 1170,1650
to use it for um.

1411
00:40:30,150 --> 00:40:31,290
0,180 180,600 600,840 840,1080 1080,1140
The colonel went before it

1412
00:40:31,290 --> 00:40:32,370
0,150 150,300 300,570 570,900 900,1080
goes into user space puts

1413
00:40:32,370 --> 00:40:33,180
0,60 60,480 480,660 660,720 720,810
a pointer there to the

1414
00:40:33,180 --> 00:40:34,860
0,390 390,690 690,1110 1110,1320 1320,1680
trap frame basically just point.

1415
00:40:35,230 --> 00:40:37,760
0,390 390,960 1170,1800 1800,2370
Puts into sappy this.

1416
00:40:38,370 --> 00:40:40,350
0,270 270,1080 1410,1800 1800,1890 1890,1980
This address just for the

1417
00:40:40,350 --> 00:40:41,610
0,570 570,630 630,690 690,990 990,1260
convenience of the trap handling

1418
00:40:41,610 --> 00:40:43,350
0,450 510,930 930,1380 1380,1530 1530,1740
code, more importantly though there's

1419
00:40:43,350 --> 00:40:44,700
0,90 90,600 600,660 660,750 750,1350
an instruction of the revive

1420
00:40:44,850 --> 00:40:45,540
0,240 240,330 330,450 450,510 510,690
that it's going to allow

1421
00:40:45,540 --> 00:40:47,310
0,120 120,270 270,810 810,1050 1050,1770
us to swap any register

1422
00:40:47,550 --> 00:40:48,780
0,150 150,330 330,960 960,1110 1110,1230
and that's scratch which will

1423
00:40:48,780 --> 00:40:50,400
0,390 390,600 600,1200 1200,1380 1380,1620
save that register as well

1424
00:40:50,400 --> 00:40:52,580
0,390 810,1590 1590,1860
as loads a.

1425
00:40:52,860 --> 00:40:54,930
0,390 390,630 630,1260 1530,1770 1770,2070
Value of scratch into whatever

1426
00:40:54,930 --> 00:40:56,420
0,420 420,510 510,1140
register we specified.

1427
00:40:56,620 --> 00:40:58,360
0,270 270,360 360,480 480,900 1200,1740
As you can see, um,

1428
00:40:58,660 --> 00:40:59,530
0,420 420,450 450,690 690,780 780,870
if I look at the

1429
00:40:59,530 --> 00:41:00,940
0,570 570,1140
trampoline code.

1430
00:41:01,860 --> 00:41:03,660
0,630 930,1440 1440,1680 1680,1740 1740,1800
Um, we're right at the

1431
00:41:03,660 --> 00:41:05,280
0,270 270,360 360,870 870,1200 1200,1620
beginning of trampoline code here.

1432
00:41:06,120 --> 00:41:06,930
0,150 150,360 360,570 570,720 720,810
The very first thing it

1433
00:41:06,930 --> 00:41:07,980
0,330 330,480 480,660 660,900 900,1050
does is this C S

1434
00:41:07,980 --> 00:41:09,220
0,330 330,960
R W.

1435
00:41:09,550 --> 00:41:10,560
0,690
I'm.

1436
00:41:11,060 --> 00:41:12,710
0,810 810,1020 1020,1140 1140,1230 1230,1650
Instructions, this is the source

1437
00:41:12,710 --> 00:41:14,540
0,60 60,270 270,780 1290,1620 1620,1830
of this window over this

1438
00:41:14,540 --> 00:41:15,410
0,240 240,330 330,420 420,660 660,870
window, we can actually see

1439
00:41:15,410 --> 00:41:16,490
0,300 300,480 480,750 750,1020 1020,1080
what G D sees in

1440
00:41:16,490 --> 00:41:17,960
0,60 60,510 690,1020 1020,1170 1170,1470
the criminal and we've actually

1441
00:41:17,960 --> 00:41:19,520
0,450 480,1230
just executed.

1442
00:41:20,030 --> 00:41:21,680
0,240 240,690 690,1350
This swap instruction.

1443
00:41:22,260 --> 00:41:23,340
0,360 360,600 600,720 720,960 960,1080
Let's swap c zero with

1444
00:41:23,340 --> 00:41:24,960
0,660 900,1140 1140,1320 1320,1410 1410,1620
scratch in order to see

1445
00:41:24,960 --> 00:41:26,100
0,150 150,270 270,600 600,810 810,1140
what it did, let's print

1446
00:41:26,100 --> 00:41:26,800
0,360
out.

1447
00:41:27,150 --> 00:41:29,940
0,840 1350,1890 1890,2070 2070,2280 2280,2790
A0 a0 is now this

1448
00:41:30,060 --> 00:41:31,620
0,540 540,810 810,1080 1080,1260 1260,1560
three F F E zero

1449
00:41:31,620 --> 00:41:33,210
0,240 240,900 930,1320 1320,1500 1500,1590
zero zero value which is

1450
00:41:33,210 --> 00:41:34,120
0,60 60,630
a pointer.

1451
00:41:34,680 --> 00:41:35,700
0,180 180,270 270,360 360,660 660,1020
Which is the virtual address

1452
00:41:35,700 --> 00:41:37,050
0,120 120,240 240,600 600,1050 1170,1350
of the trap frame which

1453
00:41:37,050 --> 00:41:37,650
0,210 210,270 270,390 390,510 510,600
used to be in a

1454
00:41:37,650 --> 00:41:38,820
0,420 420,540 540,630 630,780 780,1170
scratch, but we just swapped

1455
00:41:38,820 --> 00:41:39,360
0,150
it.

1456
00:41:39,590 --> 00:41:40,460
0,180 180,270 270,390 390,510 510,870
And then we can print

1457
00:41:40,460 --> 00:41:42,260
0,270 270,540 540,690 690,1470
out {Watson's -} scratch.

1458
00:41:43,790 --> 00:41:44,720
0,150 150,330 330,630 630,870 870,930
And it's too which is

1459
00:41:44,720 --> 00:41:45,740
0,120 120,390 390,810 810,870 870,1020
the old value of the

1460
00:41:45,740 --> 00:41:47,900
0,450 450,990 990,1260 1260,1740 1740,2160
a0 registered course zero held

1461
00:41:47,900 --> 00:41:49,700
0,90 90,570 600,1140 1590,1710 1710,1800
the first argument to the

1462
00:41:49,700 --> 00:41:50,780
0,300 300,810
right function.

1463
00:41:50,970 --> 00:41:52,770
0,360 360,570 570,1050 1050,1290 1290,1800
Just file descriptor to which

1464
00:41:52,770 --> 00:41:54,360
0,210 600,750 750,840 840,1020 1020,1590
you put the shell passed

1465
00:41:54,390 --> 00:41:55,320
0,150 150,240 240,570 570,720 720,930
so we saved you a

1466
00:41:55,320 --> 00:41:57,480
0,570 1140,1710 1710,2010 2010,2100 2100,2160
zero and we have a

1467
00:41:57,480 --> 00:41:58,680
0,270 270,330 330,420 420,750 750,1200
pointer to the trap frame.

1468
00:41:59,630 --> 00:42:00,920
0,360 540,840 840,900 900,1140 1140,1290
Um, and it turns out

1469
00:42:00,920 --> 00:42:02,210
0,300 300,600 660,900 900,1140 1140,1290
now that we're well on

1470
00:42:02,210 --> 00:42:02,930
0,120 120,360 360,480 480,570 570,720
our way to be able

1471
00:42:02,930 --> 00:42:04,190
0,90 90,330 330,390 390,1110 1110,1260
to save the registers, in

1472
00:42:04,190 --> 00:42:06,050
0,360 720,1260 1260,1440 1440,1620 1620,1860
fact that's what the very

1473
00:42:06,050 --> 00:42:08,960
0,570 780,1320 1590,2040 2040,2250 2250,2910
next a thirty odd instructions

1474
00:42:08,960 --> 00:42:11,300
0,540 900,1050 1050,1200 1200,1800 1800,2340
due in this trampoline code

1475
00:42:11,420 --> 00:42:14,330
0,240 240,330 330,1440 1860,2400 2400,2910
which is systematically susie's SD

1476
00:42:14,330 --> 00:42:16,340
0,810 810,900 900,1140 1140,1710
instructions, you just save.

1477
00:42:16,460 --> 00:42:18,560
0,510 510,630 630,1020 1050,1470 1470,2100
64 bit safe store instructions

1478
00:42:18,560 --> 00:42:20,120
0,120 120,420 420,660 660,930 930,1560
to store every single register

1479
00:42:20,600 --> 00:42:23,330
0,150 150,270 270,900 1320,2370 2400,2730
to a different offset in

1480
00:42:23,330 --> 00:42:24,830
0,60 60,390 390,720 720,960 960,1500
the trap frame is zero

1481
00:42:25,100 --> 00:42:26,720
0,210 210,660 660,900 900,1350 1350,1620
to recall now contains after

1482
00:42:26,720 --> 00:42:28,070
0,60 60,540 540,870 870,960 960,1350
the swap contains a pointer

1483
00:42:28,070 --> 00:42:29,780
0,120 120,390 450,780 780,1230 1440,1710
to the trap frame that

1484
00:42:29,780 --> 00:42:30,460
0,480
is.

1485
00:42:30,800 --> 00:42:32,720
0,180 180,420 420,630 1230,1680 1680,1920
Could change the virtual address

1486
00:42:32,720 --> 00:42:33,880
0,60 60,240 240,810
of this page.

1487
00:42:34,510 --> 00:42:36,400
0,210 210,300 300,480 480,1170 1620,1890
And we're just storing each

1488
00:42:36,400 --> 00:42:37,750
0,450 450,540 540,810 810,1260 1260,1350
registered a different offset in

1489
00:42:37,750 --> 00:42:39,860
0,60 60,330 330,540 1290,1800
the trap frame, um.

1490
00:42:42,130 --> 00:42:42,910
0,180 180,270 270,540 540,600 600,780
All the stores a bit

1491
00:42:42,910 --> 00:42:44,170
0,360 360,540 540,720 720,840 840,1260
boring, so I'm gonna skip

1492
00:42:44,170 --> 00:42:45,160
0,240 240,570
over them.

1493
00:42:45,410 --> 00:42:46,540
0,870
I'm.

1494
00:42:48,640 --> 00:42:49,390
0,240 240,300 300,450 450,510 510,750
Let me set a break

1495
00:42:49,390 --> 00:42:51,960
0,240 240,330 330,720 720,1200
point, a further on.

1496
00:42:55,880 --> 00:42:57,680
0,900 930,1530
Question, yes.

1497
00:42:58,200 --> 00:43:00,660
0,300 300,540 540,1170 1860,2310 2310,2460
How did the address of

1498
00:43:00,660 --> 00:43:02,260
0,90 90,480 480,1170
the trap frame.

1499
00:43:02,470 --> 00:43:03,880
0,270 270,480 480,720 720,810 810,1410
End up in a scratch

1500
00:43:03,880 --> 00:43:05,140
0,150 150,240 240,660 660,780 780,1260
when we stopped with zero.

1501
00:43:05,910 --> 00:43:10,110
0,360 360,1260 1290,1380 1380,2130 3540,4200
Okay before the kernel before

1502
00:43:10,110 --> 00:43:10,660
0,240
it.

1503
00:43:10,800 --> 00:43:13,020
0,510 510,1110 1110,1170 1170,1470 1470,2220
Previously transitioned to user space.

1504
00:43:14,120 --> 00:43:16,400
0,840 840,990 990,1890 1980,2100 2100,2280
{Set's -} scratch to be

1505
00:43:16,400 --> 00:43:19,160
0,450 450,1200 1410,1800 1800,1950 1950,2760
equal to three F F

1506
00:43:19,160 --> 00:43:20,540
0,120 120,390 390,630 630,1140 1260,1380
E zero zero zero the

1507
00:43:20,540 --> 00:43:21,890
0,300 300,690 690,750 750,1050 1050,1350
virtual addresses the trap frame.

1508
00:43:22,730 --> 00:43:23,630
0,330 330,510 510,570 570,780 780,900
So all the time when

1509
00:43:23,630 --> 00:43:24,530
0,90 90,150 150,570 570,660 660,900
we are executing a user

1510
00:43:24,530 --> 00:43:25,520
0,300 300,360 360,450 450,870 870,990
space in the shell as

1511
00:43:25,520 --> 00:43:26,660
0,360 360,600 600,750 750,1080 1080,1140
scratch had this pointer to

1512
00:43:26,660 --> 00:43:28,980
0,90 90,360 360,690 1410,1950
the trap frame, um.

1513
00:43:29,140 --> 00:43:31,690
0,210 210,780 1230,1530 1530,1770 1770,2550
And then the shell executes

1514
00:43:31,690 --> 00:43:32,560
0,660
a.

1515
00:43:34,430 --> 00:43:37,160
0,1050 1710,2250 2250,2610 2610,2670 2670,2730
Eco which jumps to the

1516
00:43:37,160 --> 00:43:38,480
0,240 240,330 330,390 390,1230 1230,1320
beginning of the trampoline and

1517
00:43:38,480 --> 00:43:39,560
0,60 60,360 360,600 600,1020 1020,1080
the very first instruction of

1518
00:43:39,560 --> 00:43:40,610
0,60 60,540 540,660 660,810 810,1050
the trampoline, is this C

1519
00:43:40,610 --> 00:43:42,140
0,150 150,570 600,810 810,1140 1140,1530
S R R W instruction

1520
00:43:42,140 --> 00:43:43,640
0,150 150,930 930,1320 1320,1440 1440,1500
which swaps easier on the

1521
00:43:43,640 --> 00:43:45,380
0,750 1260,1380 1380,1500 1500,1650 1650,1740
scratch and so now the

1522
00:43:45,380 --> 00:43:46,310
0,150 150,360 360,420 420,510 510,930
old value of the scratch,

1523
00:43:46,310 --> 00:43:47,030
0,300 300,390 390,600 600,660 660,720
namely the point of the

1524
00:43:47,030 --> 00:43:48,110
0,330 330,570 570,660 660,900 900,1080
trap frame is now in

1525
00:43:48,110 --> 00:43:48,860
0,480
easier.

1526
00:43:50,190 --> 00:43:51,180
0,180 180,270 270,450 450,540 540,990
So to answer your question.

1527
00:43:53,230 --> 00:43:54,610
0,300 300,510 510,660 660,1050 1050,1380
I guess I'm wondering where

1528
00:43:54,610 --> 00:43:56,500
0,210 210,810 900,1350 1410,1680 1680,1890
in the Alex does this

1529
00:43:56,500 --> 00:43:57,540
0,810
happen.

1530
00:43:57,700 --> 00:43:59,440
0,630 630,750 750,1380 1380,1500 1500,1740
During the allocation of the

1531
00:43:59,440 --> 00:44:00,670
0,570 600,810 810,960 960,1080 1080,1230
process like where do the

1532
00:44:00,670 --> 00:44:02,830
0,360 360,780 780,1290 1410,1650 1650,2160
scratch register live, where does

1533
00:44:02,860 --> 00:44:04,840
0,210 210,360 360,660 660,1290 1290,1980
this well scratch herself lives

1534
00:44:05,080 --> 00:44:06,560
0,270 270,330 330,1020
on the CPU.

1535
00:44:06,620 --> 00:44:07,730
0,150 150,570 570,960 960,1020 1020,1110
The special register in the

1536
00:44:07,730 --> 00:44:08,620
0,630
CPU.

1537
00:44:08,970 --> 00:44:10,530
0,360 360,540 540,720 720,1080 1080,1560
Where and the kernel sets

1538
00:44:10,530 --> 00:44:13,080
0,240 1200,1740 1770,2280
it, um well.

1539
00:44:14,370 --> 00:44:16,920
0,690 1110,1740 1740,1830 1830,2310 2310,2550
A little bit involved the

1540
00:44:16,980 --> 00:44:18,420
0,510 510,750 750,900 900,1020 1020,1440
actual place where it's set

1541
00:44:18,420 --> 00:44:19,290
0,90 90,210 210,270 270,450 450,870
and what I'm now showing

1542
00:44:19,290 --> 00:44:20,370
0,150 150,240 240,300 300,600 600,1080
you on the right here

1543
00:44:20,820 --> 00:44:21,680
0,690
is.

1544
00:44:21,940 --> 00:44:23,410
0,450 480,630 630,1260 1260,1380 1380,1470
Um the code that the

1545
00:44:23,410 --> 00:44:25,150
0,390 390,750 750,900 900,1440 1440,1740
kernel X the last two

1546
00:44:25,150 --> 00:44:27,910
0,1050 1170,1410 1410,1470 1470,1770 1770,2760
instructions that the kernel executes

1547
00:44:27,940 --> 00:44:29,710
0,300 300,660 660,750 750,1020 1020,1770
while returning a user space.

1548
00:44:30,340 --> 00:44:31,690
0,330 330,480 480,660 660,1110 1110,1350
Um, and what's happening is

1549
00:44:31,690 --> 00:44:33,040
0,270 330,540 540,900 900,1230 1230,1350
that the very last thing

1550
00:44:33,040 --> 00:44:34,030
0,120 120,330 330,570 570,630 630,990
it does after the kernel

1551
00:44:34,030 --> 00:44:37,000
0,1170 1380,1830 1830,1920 1920,2190 2190,2970
restores all the user registers

1552
00:44:37,000 --> 00:44:38,530
0,120 120,570 840,1050 1050,1290 1290,1530
and it's just about ready

1553
00:44:38,530 --> 00:44:39,580
0,60 60,330 330,390 390,630 630,1050
to return to user space,

1554
00:44:39,760 --> 00:44:40,750
0,210 210,420 420,600 600,870 870,990
it actually does another one

1555
00:44:40,750 --> 00:44:42,460
0,90 90,240 240,1140 1410,1470 1470,1710
of these swaps, the kernel

1556
00:44:42,460 --> 00:44:43,540
0,120 120,390 390,570 570,990 990,1080
is setup a zero to

1557
00:44:43,540 --> 00:44:44,290
0,90 90,300 300,360 360,450 450,750
be equal to the trap

1558
00:44:44,290 --> 00:44:46,960
0,480 990,1470 1470,1860 1860,2190 2190,2670
frame as scratch still holds

1559
00:44:46,960 --> 00:44:49,340
0,90 90,870 990,1440 1440,2130
the saved user a0.

1560
00:44:49,980 --> 00:44:50,730
0,150 150,210 210,420 420,600 600,750
So the kernel does this

1561
00:44:50,730 --> 00:44:52,290
0,420 420,810 1200,1380 1380,1470 1470,1560
swap which ends up with

1562
00:44:52,290 --> 00:44:53,520
0,150 150,540 540,810 810,900 900,1230
that scratch having a pointer

1563
00:44:53,520 --> 00:44:54,000
0,210
that.

1564
00:44:54,550 --> 00:44:55,990
0,330 330,690 690,810 810,930 930,1440
Trap frame in a zero

1565
00:44:55,990 --> 00:44:57,340
0,270 270,1140
having received.

1566
00:44:57,920 --> 00:44:59,810
0,870 870,990 990,1260 1260,1470 1470,1890
User and then {this's -}

1567
00:44:59,810 --> 00:45:02,390
0,900 1290,1440 1440,1680 1680,2220 2370,2580
returns to user space so

1568
00:45:02,390 --> 00:45:03,140
0,90 90,210 210,420 420,660 660,750
you may wonder how a

1569
00:45:03,140 --> 00:45:04,130
0,390 390,570 570,750 750,840 840,990
zero ever got to have

1570
00:45:04,130 --> 00:45:05,570
0,120 120,570 570,750 750,1020 1020,1440
the value of the um.

1571
00:45:06,600 --> 00:45:07,440
0,150 150,390 390,450 450,510 510,840
The address of the trap

1572
00:45:07,440 --> 00:45:09,720
0,600 1080,1380 1380,1590 1590,2070 2070,2280
frame answer that question is

1573
00:45:09,720 --> 00:45:11,200
0,360 540,1230
that um.

1574
00:45:13,130 --> 00:45:15,050
0,300 300,450 450,1020 1140,1560 1590,1920
We're now looking in trap

1575
00:45:15,050 --> 00:45:18,470
0,240 240,900 2070,2310 2310,2850 2850,3420
dot c at this last

1576
00:45:18,470 --> 00:45:20,600
0,420 420,930 930,1080 1080,1680 1800,2130
c function to run on

1577
00:45:20,600 --> 00:45:21,560
0,120 120,660
the way.

1578
00:45:21,840 --> 00:45:23,820
0,570 600,750 750,1080 1080,1800
Out to user space.

1579
00:45:24,710 --> 00:45:25,730
0,210 210,480 480,660 660,810 810,1020
The last thing this c

1580
00:45:25,730 --> 00:45:27,470
0,360 360,660 660,990 1140,1530 1530,1740
function does is calls this

1581
00:45:27,470 --> 00:45:29,220
0,450 450,1080
function here.

1582
00:45:29,460 --> 00:45:31,590
0,600 1140,1350 1350,1770 1770,2040 2040,2130
Whatever this fn is and

1583
00:45:31,590 --> 00:45:33,900
0,150 150,660 660,780 780,1650 2070,2310
the arguments it passes are

1584
00:45:33,900 --> 00:45:35,190
0,150 150,510 510,810 810,1020 1020,1290
the trap frame and the

1585
00:45:35,220 --> 00:45:36,120
0,660
user.

1586
00:45:37,210 --> 00:45:39,880
0,360 360,810 1350,1560 1560,2220 2430,2670
Page table and so in

1587
00:45:39,880 --> 00:45:41,080
0,240 240,660 660,780 780,990 990,1200
c code, when you call

1588
00:45:41,080 --> 00:45:42,370
0,90 90,600 600,690 690,930 930,1290
a function, the first argument

1589
00:45:42,370 --> 00:45:44,470
0,210 210,600 600,780 780,1290 1800,2100
goes into a zero that's

1590
00:45:44,470 --> 00:45:46,180
0,360 360,630 630,750 750,1470
basically why a zero.

1591
00:45:46,710 --> 00:45:47,400
0,270 270,330 330,570 570,630 630,690
Held a pointed at the

1592
00:45:47,400 --> 00:45:48,200
0,300 300,600
trap frame.

1593
00:45:49,120 --> 00:45:50,500
0,120 120,300 300,810 810,960 960,1380
And this function, its value

1594
00:45:50,500 --> 00:45:51,460
0,90 90,360 360,510 510,840 840,960
is set up here to

1595
00:45:51,460 --> 00:45:52,200
0,450
be.

1596
00:45:52,650 --> 00:45:54,420
0,150 150,360 360,930 930,1380 1380,1770
In that trampoline page towards

1597
00:45:54,420 --> 00:45:55,980
0,150 150,750 930,1170 1170,1470 1470,1560
the end that code I

1598
00:45:55,980 --> 00:45:57,240
0,390 390,600 600,990
showed you a.

1599
00:45:59,690 --> 00:46:02,080
0,330 330,1050
This code.

1600
00:46:02,220 --> 00:46:03,580
0,180 180,840
Is that.

1601
00:46:04,080 --> 00:46:05,360
0,210 210,210 210,360 360,900
That's a good answer.

1602
00:46:06,120 --> 00:46:09,660
0,900 1500,2280 2280,2430 2430,3090 3270,3540
Thanks, sorry I also was

1603
00:46:09,660 --> 00:46:10,980
0,390 390,660 660,960 960,1050 1050,1320
confused about that I was

1604
00:46:11,010 --> 00:46:12,420
0,240 240,750 870,1170 1170,1290 1290,1410
not sure, so when you

1605
00:46:12,420 --> 00:46:13,980
0,420 510,720 720,840 840,1110 1110,1560
start when you start your

1606
00:46:14,010 --> 00:46:15,120
0,840
process.

1607
00:46:15,290 --> 00:46:17,090
0,450 600,1170 1170,1320 1320,1440 1440,1800
And it's good at running

1608
00:46:17,090 --> 00:46:17,930
0,120 120,240 240,330 330,480 480,840
and then at some point

1609
00:46:17,930 --> 00:46:19,790
0,60 60,600 720,1350 1380,1530 1530,1860
it doesn't equal I guess

1610
00:46:20,120 --> 00:46:21,000
0,540
or.

1611
00:46:21,080 --> 00:46:22,320
0,420 420,600 600,960
Something and then.

1612
00:46:23,390 --> 00:46:25,130
0,420 420,600 600,780 780,1320 1350,1740
When did you call this

1613
00:46:25,130 --> 00:46:27,140
0,390 390,1050 1140,1710 1710,1860 1860,2010
return function because it should

1614
00:46:27,140 --> 00:46:28,670
0,210 210,420 420,870 870,1320 1320,1530
have been called before the

1615
00:46:28,670 --> 00:46:29,400
0,480
ko.

1616
00:46:30,000 --> 00:46:31,620
0,150 150,240 240,720 780,1260 1260,1620
But he didn't return from

1617
00:46:32,130 --> 00:46:34,140
0,300 390,870 870,1020 1020,1350 1350,2010
the you didn't return before

1618
00:46:34,350 --> 00:46:35,160
0,270 270,420 420,510 510,660 660,810
I I don't know I

1619
00:46:35,160 --> 00:46:35,940
0,90 90,420 420,510 510,600 600,780
don't understand what you call

1620
00:46:35,940 --> 00:46:38,040
0,450 480,1050 1080,1500 1500,1890
the user traffic read.

1621
00:46:39,000 --> 00:46:40,380
0,420 450,960 960,1110 1110,1170 1170,1380
Okay what may be one

1622
00:46:40,380 --> 00:46:41,640
0,270 270,330 330,510 510,1020 1020,1260
answer to this question is

1623
00:46:41,640 --> 00:46:43,220
0,300 330,630 630,1290
that the kernel.

1624
00:46:43,650 --> 00:46:46,260
0,1050 1080,1260 1260,1500 1500,1590 1590,2610
Always or that the machine

1625
00:46:46,290 --> 00:46:48,450
0,840 840,1260 1440,1620 1620,1710 1710,2160
boots up in the kernel.

1626
00:46:49,850 --> 00:46:51,050
0,390 390,510 510,570 570,810 810,1200
So when the machine starts

1627
00:46:51,050 --> 00:46:53,240
0,60 60,150 150,630 900,1950
in the kernel anytime.

1628
00:46:53,650 --> 00:46:54,730
0,240 240,630 630,840 840,930 930,1080
The only way to get

1629
00:46:54,730 --> 00:46:56,360
0,210 210,510 510,1500
into user space.

1630
00:46:56,880 --> 00:46:57,780
0,180 180,240 240,330 330,600 600,900
You know the very first

1631
00:46:57,780 --> 00:46:59,640
0,540 540,690 690,960 960,1530 1530,1860
time or when returning from

1632
00:46:59,640 --> 00:47:01,740
0,150 150,540 540,1080 1440,1950 1950,2100
a system call is in

1633
00:47:01,740 --> 00:47:03,450
0,570 600,750 750,1230 1230,1440 1440,1710
fact to execute this s

1634
00:47:03,450 --> 00:47:04,480
0,150 150,750
read instruction.

1635
00:47:05,440 --> 00:47:07,450
0,540 870,1110 1110,1380 1380,1800 1800,2010
That this asteroid destruction is

1636
00:47:07,450 --> 00:47:08,260
0,120 120,300 300,450 450,570 570,810
the way that the risk

1637
00:47:08,260 --> 00:47:10,930
0,540 690,1080 1080,1950 1950,2070 2070,2670
fan five defines to transition

1638
00:47:10,930 --> 00:47:13,210
0,240 240,840 840,1350 1710,1950 1950,2280
from supervisor mode into user

1639
00:47:13,210 --> 00:47:15,880
0,570 1320,1770 1770,1920 1920,2430
mode, um, and so.

1640
00:47:16,070 --> 00:47:17,930
0,1020 1020,1200 1200,1440 1440,1650 1650,1860
Before any user code ever

1641
00:47:17,930 --> 00:47:20,080
0,900 1020,1230 1230,1770
executes the kernel.

1642
00:47:20,320 --> 00:47:21,490
0,450 450,540 540,750 750,840 840,1170
Executes the code I'm showing

1643
00:47:21,490 --> 00:47:23,020
0,120 120,540 540,630 630,1170 1200,1530
you here in these these

1644
00:47:23,020 --> 00:47:24,580
0,210 210,540 540,1260
two editor buffers.

1645
00:47:24,820 --> 00:47:26,170
0,600 600,840 840,960 960,1110 1110,1350
Let's set up all kinds

1646
00:47:26,170 --> 00:47:29,170
0,90 90,600 600,1020 1590,2490 2580,3000
of things like scratch St

1647
00:47:29,170 --> 00:47:30,060
0,450
back.

1648
00:47:33,200 --> 00:47:34,820
0,360 360,540 540,870 870,1170 1170,1620
Okay I see, thank you

1649
00:47:35,270 --> 00:47:36,040
0,390
welcome.

1650
00:47:36,730 --> 00:47:38,020
0,330 390,510 510,660 660,750 750,1290
A I have a question,

1651
00:47:38,020 --> 00:47:38,740
0,120 120,300 300,450 450,570 570,720
I'm not sure if we

1652
00:47:38,740 --> 00:47:40,540
0,330 330,420 420,870 1080,1350 1680,1800
touched on this time I

1653
00:47:40,540 --> 00:47:42,100
0,300 300,480 480,870 1080,1290 1290,1560
missed it, but um when

1654
00:47:42,100 --> 00:47:43,660
0,150 150,480 480,600 600,1020 1020,1560
we call the eco instruction

1655
00:47:43,660 --> 00:47:45,370
0,90 90,180 180,600 600,960 1560,1710
in the assembly code, um

1656
00:47:45,370 --> 00:47:47,110
0,300 300,720 720,780 780,1410 1410,1740
what triggers the trampoline code

1657
00:47:47,110 --> 00:47:48,580
0,60 60,570 660,1020 1170,1320 1320,1470
to start like, is it

1658
00:47:48,580 --> 00:47:50,980
0,90 90,510 510,930 1440,1860 1920,2400
the switch of the CPU

1659
00:47:50,980 --> 00:47:52,990
0,360 360,540 540,1590 1590,1770 1770,2010
mode from supervisor, I'm sorry

1660
00:47:52,990 --> 00:47:54,760
0,210 210,570 570,1260 1260,1440 1440,1770
from user supervisor is something

1661
00:47:54,760 --> 00:47:57,140
0,330 720,1320 1470,2100
else, okay, um.

1662
00:47:57,990 --> 00:47:59,340
0,300 300,390 390,630 630,750 750,1350
So the code we're executing

1663
00:47:59,340 --> 00:48:00,860
0,180 180,420 420,600 600,1230
is this e call.

1664
00:48:01,010 --> 00:48:02,270
0,180 180,540 540,990 990,1110 1110,1260
The shell executes it in

1665
00:48:02,270 --> 00:48:04,040
0,240 240,750 1020,1230 1230,1590 1590,1770
user space and eco does

1666
00:48:04,040 --> 00:48:05,750
0,60 60,330 330,960 1080,1290 1290,1710
a couple things the equal

1667
00:48:05,750 --> 00:48:08,000
0,930 1140,1620 1620,1740 1740,2160 2160,2250
instruction sets the mode to

1668
00:48:08,000 --> 00:48:09,120
0,750
supervisor.

1669
00:48:09,400 --> 00:48:12,660
0,600 1230,1470 1470,1890 1890,2610
And the eco instruction.

1670
00:48:13,000 --> 00:48:15,040
0,480 510,1140 1140,1230 1230,1590 1590,2040
A saves the program counter

1671
00:48:15,040 --> 00:48:17,440
0,120 120,960 1320,1890 1890,2070 2070,2400
in epc and the eco

1672
00:48:17,440 --> 00:48:19,390
0,630 630,1170 1170,1290 1290,1650 1650,1950
instruction sets the program counter

1673
00:48:19,390 --> 00:48:21,100
0,450 450,1050
equal to.

1674
00:48:21,560 --> 00:48:22,970
0,210 210,300 300,660 660,1080 1080,1410
Um the control register called

1675
00:48:22,970 --> 00:48:25,520
0,420 420,960 1290,1800 1950,2370 2370,2550
St, beck so St back

1676
00:48:25,520 --> 00:48:26,150
0,90 90,240 240,300 300,360 360,630
is one of the many

1677
00:48:26,150 --> 00:48:27,410
0,300 300,450 450,540 540,900 900,1260
things which the kernel sets

1678
00:48:27,410 --> 00:48:29,060
0,180 180,420 420,690 690,960 960,1650
up before entering user space,

1679
00:48:29,510 --> 00:48:30,360
0,600
um.

1680
00:48:31,750 --> 00:48:32,890
0,180 180,270 270,510 510,870 870,1140
And so here's St back

1681
00:48:32,890 --> 00:48:34,240
0,240 240,420 420,540 540,1200 1230,1350
St back is just the

1682
00:48:34,240 --> 00:48:35,740
0,240 240,660 660,900 1230,1410 1410,1500
kernel set it to the

1683
00:48:35,740 --> 00:48:37,600
0,390 390,480 480,540 540,1140 1140,1860
beginning of the trampoline page

1684
00:48:37,630 --> 00:48:38,500
0,150 150,660
that is.

1685
00:48:38,840 --> 00:48:40,200
0,180 180,480 480,1020
This dress here.

1686
00:48:40,680 --> 00:48:42,450
0,420 450,690 690,900 900,1230 1230,1770
Um, so when equal happens

1687
00:48:42,450 --> 00:48:44,640
0,330 330,870 1110,1530 1530,1890 1890,2190
equal, just copies estee beck

1688
00:48:44,640 --> 00:48:45,690
0,150 150,240 240,540 540,900 900,1050
into the program counter and

1689
00:48:45,690 --> 00:48:48,000
0,630 630,780 780,1290 1860,2040 2040,2310
continues but now the program

1690
00:48:48,000 --> 00:48:50,340
0,270 270,390 390,1230 1470,1740 1740,2340
counter is executing this address

1691
00:48:50,340 --> 00:48:51,700
0,90 90,150 150,630 630,1170
in the trampoline page.

1692
00:48:54,500 --> 00:48:55,970
0,390 390,840 840,990 990,1230 1230,1470
That clarifies it, thank you,

1693
00:48:56,990 --> 00:48:57,600
0,330
okay.

1694
00:49:00,520 --> 00:49:02,050
0,330 330,570 570,750 750,870 870,1530
I also have a question,

1695
00:49:02,620 --> 00:49:05,080
0,630 1320,2250
um, why.

1696
00:49:05,320 --> 00:49:06,730
0,300 300,480 480,630 630,810 810,1410
So some of the registers

1697
00:49:06,730 --> 00:49:08,830
0,300 300,1200 1500,1680 1680,1770 1770,2100
are saved in the trap

1698
00:49:08,830 --> 00:49:11,720
0,630 690,1020 1020,1770 1800,2460
frame should not, um.

1699
00:49:11,900 --> 00:49:15,350
0,330 330,1170 1560,2250 2250,3210 3270,3450
Are also registers that the

1700
00:49:15,350 --> 00:49:17,030
0,300 300,660 660,810 810,1200 1200,1680
user program had access to

1701
00:49:17,660 --> 00:49:19,240
0,1110
y.

1702
00:49:19,510 --> 00:49:21,580
0,570 600,870 870,1080 1080,1500 1530,2070
Why, why do we need

1703
00:49:21,580 --> 00:49:22,740
0,960
to.

1704
00:49:23,190 --> 00:49:24,100
0,660
I'm.

1705
00:49:24,470 --> 00:49:27,950
0,840 1050,1740 1860,2040 2040,2850 3030,3480
Use as a new a

1706
00:49:27,980 --> 00:49:29,420
0,420 420,540 540,1020 1020,1140 1140,1440
region in memory and not

1707
00:49:29,420 --> 00:49:32,020
0,210 210,690 810,1440 1440,2370
use the program stack.

1708
00:49:34,660 --> 00:49:36,970
0,510 540,1020 1200,1500 1500,2100 2100,2310
Okay, um, boy, there's maybe

1709
00:49:36,970 --> 00:49:38,320
0,180 180,570 570,690 690,900 900,1350
two questions here, one is.

1710
00:49:38,940 --> 00:49:39,780
0,420 420,600 600,690 690,750 750,840
Maybe why do we have

1711
00:49:39,780 --> 00:49:41,880
0,120 120,1050 1410,1530 1530,2010 2010,2100
to save the registers at

1712
00:49:41,880 --> 00:49:42,680
0,540
all.

1713
00:49:43,700 --> 00:49:44,720
0,420 420,540 540,750 750,930 930,1020
The the reason why the

1714
00:49:44,720 --> 00:49:45,500
0,210 210,360 360,480 480,720 720,780
kernel has to save the

1715
00:49:45,500 --> 00:49:47,030
0,660 660,780 780,990 990,1050 1050,1530
registers is that the kernel

1716
00:49:47,090 --> 00:49:48,110
0,270 270,450 450,540 540,750 750,1020
is about to run c

1717
00:49:48,110 --> 00:49:49,320
0,570 570,870
code that.

1718
00:49:49,780 --> 00:49:52,630
0,300 300,780 780,1020 1020,1920 2280,2850
It overwrites those registers a

1719
00:49:52,930 --> 00:49:54,100
0,480 600,780 780,870 870,1020 1020,1170
and if we ever want

1720
00:49:54,100 --> 00:49:55,060
0,90 90,450 450,540 540,750 750,960
to resume the user code

1721
00:49:55,060 --> 00:49:56,170
0,420 420,540 540,690 690,780 780,1110
correctly, we need to resume

1722
00:49:56,170 --> 00:49:57,760
0,120 120,360 360,540 540,1380 1380,1590
it with its registers having

1723
00:49:57,760 --> 00:50:00,130
0,120 120,510 510,1410 1800,2310 2310,2370
their original values as of

1724
00:50:00,130 --> 00:50:01,870
0,150 150,330 330,930 960,1200 1230,1740
when the call let's execute

1725
00:50:01,870 --> 00:50:02,890
0,180 390,600 600,690 690,780 780,1020
it, we have to save

1726
00:50:02,890 --> 00:50:04,340
0,180 180,270 270,1320
all the registers.

1727
00:50:04,850 --> 00:50:06,440
0,150 150,210 210,480 480,1020 1050,1590
In the trap frame, um

1728
00:50:06,980 --> 00:50:08,060
0,180 180,330 330,690 690,960 960,1080
so that later on, we

1729
00:50:08,060 --> 00:50:09,170
0,150 150,660 660,900 900,990 990,1110
can restore all of their

1730
00:50:09,170 --> 00:50:11,640
0,870 1080,1470 1470,1680 1680,2250
values not just before.

1731
00:50:11,700 --> 00:50:13,140
0,420 420,510 510,780 780,1230
Resuming the user code.

1732
00:50:14,280 --> 00:50:15,030
0,330 330,420 420,570 570,690 690,750
Maybe the other half of

1733
00:50:15,030 --> 00:50:16,140
0,120 120,450 450,540 540,750 750,1110
your question is how come

1734
00:50:16,140 --> 00:50:17,400
0,150 150,780 810,930 930,990 990,1260
they're saved in the trap

1735
00:50:17,400 --> 00:50:18,270
0,360 360,450 450,690 690,780 780,870
frame and not on the

1736
00:50:18,270 --> 00:50:20,280
0,270 270,870 1140,1770
user stack, um.

1737
00:50:20,580 --> 00:50:21,570
0,300 300,510 510,570 570,870 870,990
The answer to that is

1738
00:50:21,570 --> 00:50:22,560
0,270 270,390 390,570 570,930 930,990
that we're not sure the

1739
00:50:22,560 --> 00:50:23,820
0,210 210,630 630,900 900,1200 1200,1260
user program even has a

1740
00:50:23,820 --> 00:50:24,680
0,600
stack.

1741
00:50:24,820 --> 00:50:26,380
0,240 240,360 360,690 690,1050 1050,1560
There are certainly programming languages

1742
00:50:26,380 --> 00:50:28,330
0,180 660,990 990,1140 1140,1200 1200,1950
that don't have a stack

1743
00:50:28,810 --> 00:50:30,310
0,420 420,480 480,750 750,1290 1290,1500
and the stack pointer doesn't

1744
00:50:30,310 --> 00:50:31,750
0,150 150,210 210,630 630,690 690,1440
point to anything in particular

1745
00:50:31,810 --> 00:50:33,130
0,240 240,360 360,480 480,810 810,1320
might be a value zero

1746
00:50:33,460 --> 00:50:34,900
0,270 270,480 480,840 840,1290 1290,1440
there's also programming languages that

1747
00:50:34,900 --> 00:50:35,770
0,180 180,300 300,390 390,450 450,870
yeah they have a stack

1748
00:50:35,770 --> 00:50:37,570
0,240 390,870 870,960 960,1200 1200,1800
but it's in a format

1749
00:50:37,570 --> 00:50:38,380
0,690
that's.

1750
00:50:38,580 --> 00:50:39,840
0,150 150,240 240,450 450,750 750,1260
You know some weird format,

1751
00:50:39,840 --> 00:50:42,120
0,240 240,510 510,750 750,1620 1980,2280
the kernel doesn't understand, um,

1752
00:50:42,120 --> 00:50:43,800
0,180 180,630 630,900 930,1320 1320,1680
maybe because the programming language

1753
00:50:43,800 --> 00:50:46,350
0,570 570,1050 1050,1230 1230,1710 1710,2550
allocates stack in small blocks.

1754
00:50:46,780 --> 00:50:47,940
0,300 300,480 480,540 540,1080
Um, from the heat.

1755
00:50:48,550 --> 00:50:50,320
0,420 420,480 480,840 840,1290 1290,1770
And the programming language runtime

1756
00:50:50,320 --> 00:50:52,120
0,510 510,630 630,960 1140,1650 1650,1800
understands how to use these

1757
00:50:52,120 --> 00:50:53,200
0,300 300,600 600,660 660,960 960,1080
small blocks of memory as

1758
00:50:53,200 --> 00:50:54,100
0,60 60,450 450,630
a stack, but.

1759
00:50:54,600 --> 00:50:55,260
0,90 90,150 150,240 240,510 510,660
You know, the kernel has

1760
00:50:55,260 --> 00:50:57,260
0,120 120,600 1290,1740
no idea, um.

1761
00:50:57,610 --> 00:50:59,440
0,300 300,780 1440,1590 1590,1650 1650,1830
So we if we want

1762
00:50:59,440 --> 00:50:59,920
0,60 60,120 120,270 270,330 330,480
to be able to run

1763
00:50:59,920 --> 00:51:01,210
0,150 150,210 210,660 660,930 930,1290
sort of arbitrary user programs

1764
00:51:01,210 --> 00:51:01,930
0,180 180,240 240,450 450,510 510,720
written in lots of different

1765
00:51:01,930 --> 00:51:03,520
0,570 810,1020 1020,1230 1230,1440 1440,1590
languages that colonel can't make

1766
00:51:03,520 --> 00:51:06,730
0,210 210,870 870,1320 1620,2640 2640,3210
any assumptions about what parts

1767
00:51:06,730 --> 00:51:08,590
0,360 390,690 690,1200 1200,1320 1320,1860
of user memory, it's allowed

1768
00:51:08,590 --> 00:51:10,510
0,180 240,1020 1020,1260 1260,1830 1830,1920
to exist or valid or

1769
00:51:10,510 --> 00:51:11,290
0,90 90,420 420,510 510,690 690,780
is allowed to read or

1770
00:51:11,290 --> 00:51:12,080
0,420
write.

1771
00:51:12,220 --> 00:51:13,150
0,330 330,450 450,540 540,780 780,930
And so the kernel has

1772
00:51:13,150 --> 00:51:14,500
0,90 90,180 180,390 390,450 450,1350
to be sort of self-contained

1773
00:51:14,500 --> 00:51:15,640
0,240 240,630 630,780 780,1080 1080,1140
in saving them, storing the

1774
00:51:15,640 --> 00:51:17,080
0,870
registers.

1775
00:51:17,200 --> 00:51:18,550
0,420 420,630 630,810 810,900 900,1350
Now that's why the colonel

1776
00:51:19,120 --> 00:51:20,590
0,420 420,660 660,810 810,990 990,1470
saves stuff in its own

1777
00:51:20,590 --> 00:51:21,760
0,420 420,510 510,570 570,870 870,1170
memory and the trap frame

1778
00:51:21,760 --> 00:51:22,880
0,270 270,420 420,780
rather than in.

1779
00:51:23,040 --> 00:51:23,940
0,270 270,690
User memory.

1780
00:51:24,610 --> 00:51:25,800
0,300 300,570 570,900
Okay makes sense.

1781
00:51:29,820 --> 00:51:30,560
0,480
Okay.

1782
00:51:31,930 --> 00:51:33,120
0,300 300,1020
Anything else.

1783
00:51:37,400 --> 00:51:38,080
0,480
Superb.

1784
00:51:40,120 --> 00:51:41,650
0,300 300,420 420,1110 1140,1440 1440,1530
Okay, we're still reading the

1785
00:51:41,650 --> 00:51:43,300
0,450 450,780 780,1320
beginning of a.

1786
00:51:44,350 --> 00:51:45,620
0,150 150,210 210,990
Of the code.

1787
00:51:46,080 --> 00:51:49,780
0,570 840,1800 2040,2370 2370,3450
In trampoline, um discourages.

1788
00:51:50,370 --> 00:51:51,540
0,570 570,660 660,930 930,1050 1050,1170
Unfortunately we refer to it

1789
00:51:51,540 --> 00:51:55,140
0,420 840,1080 1080,1410 1410,1980 3180,3600
both as user back and

1790
00:51:55,140 --> 00:51:56,760
0,120 120,210 210,720 720,1020 1350,1620
as the trampoline code, we

1791
00:51:56,760 --> 00:51:58,320
0,270 270,570 570,1020 1020,1230 1290,1560
barely started executing it I

1792
00:51:58,320 --> 00:51:58,920
0,120 120,180 180,420 420,570 570,600
think I just set a

1793
00:51:58,920 --> 00:52:00,120
0,330 330,960
break point.

1794
00:52:00,480 --> 00:52:02,320
0,450 450,630 630,810 810,1530
Um, in this code.

1795
00:52:02,970 --> 00:52:05,280
0,480 780,1590 1590,1710 1710,1800 1800,2310
I'm after all the registers

1796
00:52:05,280 --> 00:52:06,540
0,90 90,270 270,900 930,1080 1080,1260
have been saved I think

1797
00:52:06,540 --> 00:52:07,560
0,60 60,330 330,720
I said, um.

1798
00:52:10,070 --> 00:52:11,060
0,300 300,540 540,720 720,780 780,990
A break point of this

1799
00:52:11,060 --> 00:52:13,970
0,690 1140,1260 1260,1620 1620,2310 2370,2910
instruction will continue executing skip

1800
00:52:13,970 --> 00:52:14,990
0,210 210,330 330,510 510,930 930,1020
over all these saves of

1801
00:52:14,990 --> 00:52:16,220
0,150 150,270 270,510 510,1140 1140,1230
all the user registers the

1802
00:52:16,220 --> 00:52:18,620
0,270 270,720 1410,1770 1770,1890 1890,2400
trap frame, okay and now.

1803
00:52:19,220 --> 00:52:20,960
0,180 180,570 570,720 720,1020 1020,1740
We're executing this load instruction,

1804
00:52:20,960 --> 00:52:23,480
0,180 180,330 330,930 1500,1980 2040,2520
this load instruction is loading

1805
00:52:23,480 --> 00:52:25,430
0,270 270,360 360,810 810,1170 1170,1950
into the stack pointer register

1806
00:52:25,490 --> 00:52:26,360
0,150 150,300 300,420 420,720 720,870
and what is loading as

1807
00:52:26,360 --> 00:52:27,860
0,150 150,810 840,960 960,1200 1200,1500
the value is the eighth

1808
00:52:27,860 --> 00:52:28,960
0,810
slot.

1809
00:52:29,370 --> 00:52:30,810
0,240 240,630 780,1110 1110,1170 1170,1440
In the block of memory

1810
00:52:30,810 --> 00:52:32,310
0,330 330,450 450,630 630,780 780,1500
pointed to by a zero

1811
00:52:32,430 --> 00:52:33,900
0,300 300,660 660,780 780,1080 1080,1470
we remember a zero points,

1812
00:52:33,900 --> 00:52:36,510
0,300 420,900 900,1380 1800,2100 2100,2610
this trap frame to this

1813
00:52:36,540 --> 00:52:37,940
0,600 600,1230
virtual dress.

1814
00:52:38,430 --> 00:52:40,040
0,90 90,420 420,750 750,1470
The second last page.

1815
00:52:40,600 --> 00:52:41,590
0,360 360,510 510,570 570,900 900,990
Um, and the format of

1816
00:52:41,590 --> 00:52:44,830
0,60 60,360 360,1110 2190,2490 2490,3240
the trap page, but the

1817
00:52:44,860 --> 00:52:46,020
0,300 300,930
trap frame.

1818
00:52:46,880 --> 00:52:47,480
0,240 240,300 300,480 480,540 540,600
Here's the front of the

1819
00:52:47,480 --> 00:52:49,400
0,270 270,450 450,780 870,1290 1290,1920
trap pay my we've conveniently

1820
00:52:49,400 --> 00:52:51,830
0,420 420,1110 1230,1860 1860,2010 2010,2430
labeled each field with its

1821
00:52:51,830 --> 00:52:53,750
0,510 510,630 630,1260 1620,1770 1770,1920
offset in bytes so that

1822
00:52:53,750 --> 00:52:54,590
0,210 210,300 300,570 570,660 660,840
means they load in the.

1823
00:52:54,890 --> 00:52:55,780
0,660
Eighth.

1824
00:52:56,280 --> 00:52:57,360
0,450 450,510 510,660 660,870 870,1080
Starting at the eighth byte

1825
00:52:57,360 --> 00:52:58,290
0,60 60,120 120,420 420,690 690,930
of the trap frame means

1826
00:52:58,290 --> 00:53:00,390
0,60 60,570 1200,1320 1320,1740 1740,2100
we're loading the kernel stack

1827
00:53:00,390 --> 00:53:01,620
0,330 330,540 870,1020 1020,1110 1110,1230
pointer and one of the

1828
00:53:01,620 --> 00:53:02,970
0,240 240,300 300,570 570,990 990,1350
things the kernel sets up

1829
00:53:02,970 --> 00:53:04,710
0,600 600,870 870,1110 1110,1650 1650,1740
before entering user spaces, it

1830
00:53:04,710 --> 00:53:06,060
0,420 420,630 630,1140 1140,1290 1290,1350
sets this slot in the

1831
00:53:06,060 --> 00:53:07,620
0,330 330,780 990,1230 1230,1320 1320,1560
trap frame to be equal

1832
00:53:07,620 --> 00:53:09,260
0,90 90,390 390,1440
to this processes.

1833
00:53:10,030 --> 00:53:12,100
0,330 330,660 660,1170 1590,1890 1890,2070
A kernel stack, so this

1834
00:53:12,100 --> 00:53:13,690
0,510 510,660 660,780 780,1200 1200,1590
instruction here is doing is

1835
00:53:13,690 --> 00:53:16,810
0,360 870,1740 1740,2070 2370,2760 2760,3120
um initializing the stack pointer

1836
00:53:16,810 --> 00:53:17,890
0,120 120,330 330,420 420,510 510,1080
to point to the top

1837
00:53:17,920 --> 00:53:20,140
0,150 150,420 420,1260 1440,1740 1740,2220
of this processes kernel stack

1838
00:53:20,380 --> 00:53:20,980
0,150 150,330 330,390 390,510 510,600
is part of what you

1839
00:53:20,980 --> 00:53:21,760
0,150 150,240 240,450 450,540 540,780
need to do in order

1840
00:53:21,760 --> 00:53:22,340
0,300
to.

1841
00:53:22,880 --> 00:53:24,160
0,150 150,330 330,540 540,1020
To run user code.

1842
00:53:25,930 --> 00:53:27,400
0,390 390,540 540,780 780,1140 1140,1470
Alright, so what's left within

1843
00:53:27,400 --> 00:53:28,810
0,60 60,360 360,1020 1020,1170 1170,1410
a few instructions of getting

1844
00:53:28,810 --> 00:53:29,260
0,90 90,180 180,300 300,360 360,450
to the end of the

1845
00:53:29,260 --> 00:53:31,700
0,510 510,1020 1470,2190
trampoline code, um.

1846
00:53:32,220 --> 00:53:34,050
0,120 120,360 360,720 720,1230 1230,1830
We loaded the stack pointer,

1847
00:53:34,650 --> 00:53:35,520
0,210 210,360 360,480 480,630 630,870
so maybe I can print

1848
00:53:35,520 --> 00:53:36,510
0,90 90,360 360,630 630,840 840,990
the stack pointer for you,

1849
00:53:36,540 --> 00:53:37,340
0,510
c.

1850
00:53:39,160 --> 00:53:40,180
0,210 210,360 360,840
Yeah, this is.

1851
00:53:40,770 --> 00:53:41,700
0,660
I'm.

1852
00:53:46,800 --> 00:53:49,410
0,570 570,1110 2040,2310 2310,2490 2490,2610
Um, all right, well this

1853
00:53:49,410 --> 00:53:51,150
0,120 120,390 420,1110 1110,1260 1260,1740
is the kernels, this processes

1854
00:53:51,150 --> 00:53:52,080
0,240 240,600 600,750 750,870 870,930
kernel stack is up on

1855
00:53:52,080 --> 00:53:53,790
0,270 270,840 840,1320 1350,1560 1560,1710
high memory because ex v

1856
00:53:53,790 --> 00:53:54,780
0,720
six.

1857
00:53:55,260 --> 00:53:56,220
0,690
I'm.

1858
00:53:56,830 --> 00:53:59,080
0,420 420,630 630,1380 1470,2100 2100,2250
Treat colonel sex especially so

1859
00:53:59,080 --> 00:53:59,770
0,120 120,180 180,300 300,570 570,690
that you can put a

1860
00:53:59,770 --> 00:54:01,120
0,420 420,1020
guard page.

1861
00:54:01,240 --> 00:54:02,640
0,240 240,420 420,690 690,1230
Under each kernel stack.

1862
00:54:03,810 --> 00:54:05,190
0,360 360,570 570,720 720,900 900,1380
Um, okay, so this load

1863
00:54:05,190 --> 00:54:07,470
0,240 240,1080 1680,1890 1890,2130 2130,2280
into TPP, it turns out

1864
00:54:07,470 --> 00:54:10,230
0,390 480,1740 1920,2160 2160,2280 2280,2760
that because there's no direct

1865
00:54:10,230 --> 00:54:11,310
0,150 150,270 270,570 570,960 960,1080
way in risk five to

1866
00:54:11,310 --> 00:54:13,110
0,270 270,360 360,600 600,1380 1410,1800
figure out what core which

1867
00:54:13,110 --> 00:54:14,640
0,120 120,390 720,1110 1110,1410 1410,1530
of the multiple cores you're

1868
00:54:14,640 --> 00:54:17,040
0,300 300,690 990,1470 1470,1740 1740,2400
running on a xe successfully

1869
00:54:17,100 --> 00:54:20,100
0,1470 1470,1620 1620,2100 2100,2700 2730,3000
keeps the core number called

1870
00:54:20,100 --> 00:54:21,630
0,60 60,420 420,990 1110,1440 1440,1530
the heart ID in the

1871
00:54:21,630 --> 00:54:23,340
0,570 570,1200 1290,1470 1470,1620 1620,1710
teepee register and this is

1872
00:54:23,340 --> 00:54:24,030
0,270 270,330 330,390 390,600 600,690
used in a bunch of

1873
00:54:24,030 --> 00:54:25,200
0,390 390,450 450,540 540,1020 1020,1170
places in the kernel, for

1874
00:54:25,200 --> 00:54:27,330
0,510 840,1500 1530,1770 1770,2070 2070,2130
example, um it's part of

1875
00:54:27,330 --> 00:54:29,140
0,90 90,750 750,1230
the machinery for.

1876
00:54:29,300 --> 00:54:30,290
0,420 420,600 600,660 660,900 900,990
Kernel code to figure out

1877
00:54:30,290 --> 00:54:33,290
0,330 330,1080 1080,1230 1230,1920 2340,3000
what process is currently running

1878
00:54:33,290 --> 00:54:34,400
0,120 120,300 300,780
on that core.

1879
00:54:35,220 --> 00:54:37,320
0,540 1500,1800 1800,1890 1890,1980 1980,2100
I'm OK, and if we

1880
00:54:37,320 --> 00:54:39,900
0,450 450,1020 1020,1710 1710,2220
execute this, hopefully, um.

1881
00:54:41,070 --> 00:54:42,630
0,690 780,1020 1020,1230 1230,1350 1350,1560
TPP or running on core

1882
00:54:42,630 --> 00:54:43,530
0,300 300,390 390,480 480,660 660,900
zero and that makes sense

1883
00:54:43,530 --> 00:54:45,120
0,270 270,450 450,1110 1140,1410 1410,1590
because I've configured que, um

1884
00:54:45,120 --> 00:54:46,380
0,120 120,240 240,540 540,900 900,1260
you to only give one

1885
00:54:46,380 --> 00:54:48,900
0,600 1020,1260 1260,2010 2010,2160 2160,2520
core to x86 or indeed

1886
00:54:48,900 --> 00:54:50,500
0,180 180,270 270,510 510,1050
running on CT zero.

1887
00:54:51,830 --> 00:54:54,830
0,540 990,1560 1560,1920 1920,2370 2550,3000
Um, this next thing, um

1888
00:54:55,100 --> 00:54:58,010
0,240 240,870 870,1140 1140,1950 2160,2910
is loading the address of.

1889
00:54:59,620 --> 00:55:01,330
0,330 360,780 780,1110 1170,1620 1620,1710
I'm actually the loaded to

1890
00:55:01,330 --> 00:55:02,640
0,210 210,960
t zero.

1891
00:55:04,790 --> 00:55:05,860
0,810
I'm.

1892
00:55:06,180 --> 00:55:09,030
0,270 270,480 480,1050 1050,1890 2310,2850
I think loaded a pointer

1893
00:55:09,030 --> 00:55:12,330
0,750 1980,2310 2310,2670 2670,2880 2880,3300
to the first c function

1894
00:55:12,330 --> 00:55:13,260
0,90 90,180 180,300 300,360 360,930
that we're going to execute

1895
00:55:13,290 --> 00:55:14,370
0,180 180,390 390,630 630,720 720,1080
which is use a trap

1896
00:55:14,370 --> 00:55:14,940
0,120 120,240 240,360 360,480 480,570
so we use that in

1897
00:55:14,940 --> 00:55:16,740
0,60 60,210 210,870 870,1110 1110,1800
a few instructions just jump

1898
00:55:17,370 --> 00:55:18,600
0,210 210,360 360,660 660,960 960,1230
to the user trap c

1899
00:55:18,600 --> 00:55:19,440
0,570
function.

1900
00:55:19,870 --> 00:55:22,060
0,600 1020,1500 1500,1680 1680,1860 1860,2190
A load into t one

1901
00:55:22,060 --> 00:55:24,430
0,570 1200,1530 1530,1770 1770,2220 2220,2370
here a is loading the

1902
00:55:24,430 --> 00:55:26,140
0,510 510,660 660,900 900,1410
address of the um.

1903
00:55:27,000 --> 00:55:28,830
0,450 450,750 750,1140 1590,1680 1680,1830
Kernel page table, you can

1904
00:55:28,830 --> 00:55:29,740
0,540
print.

1905
00:55:30,440 --> 00:55:32,060
0,420 420,510 510,780 780,1050 1050,1620
About to switch page tables,

1906
00:55:32,660 --> 00:55:35,060
0,390 390,660 660,1230 1290,1800 1890,2400
turns out z, um, this

1907
00:55:35,060 --> 00:55:36,080
0,120 120,360 360,540 540,720 720,1020
thing, it was not actually

1908
00:55:36,080 --> 00:55:37,310
0,420 420,540 540,930 930,1050 1050,1230
literally the address of the

1909
00:55:37,310 --> 00:55:38,330
0,240 240,450 450,720 720,870 870,1020
kernel page table, it's the

1910
00:55:38,330 --> 00:55:39,170
0,240 240,390 390,570 570,660 660,840
thing you need to put

1911
00:55:39,170 --> 00:55:41,820
0,210 210,570 570,1110 1680,2400
into set p, um.

1912
00:55:42,100 --> 00:55:43,720
0,180 180,330 330,720 1260,1530 1530,1620
Which is, um has the

1913
00:55:43,720 --> 00:55:44,590
0,300 300,360 360,420 420,660 660,870
address of the kernel page

1914
00:55:44,590 --> 00:55:45,880
0,240 240,360 360,720 720,1200 1200,1290
table but shifted around with

1915
00:55:45,880 --> 00:55:47,140
0,180 180,480 480,720 720,900 900,1260
some extra flag bit set.

1916
00:55:47,760 --> 00:55:48,510
0,270 270,360 360,570 570,660 660,750
But as soon as the

1917
00:55:48,510 --> 00:55:50,970
0,420 420,1050 1290,1860 1860,2310 2310,2460
css w instruction executes will

1918
00:55:50,970 --> 00:55:52,530
0,420 420,750 750,1080 1080,1320 1320,1560
switch page tables from the

1919
00:55:52,530 --> 00:55:53,670
0,270 270,480 480,780 780,870 870,1140
user page table, the kernel

1920
00:55:53,670 --> 00:55:54,930
0,240 240,540 750,1020 1020,1080 1080,1260
page table, let me just

1921
00:55:54,930 --> 00:55:55,980
0,510 510,660 660,720 720,990 990,1050
reinforce that by looking at

1922
00:55:55,980 --> 00:55:57,780
0,90 90,360 360,600 600,1110 1320,1800
the current page table right

1923
00:55:57,780 --> 00:55:58,600
0,480
now.

1924
00:55:58,660 --> 00:55:59,890
0,330 330,450 450,690 690,1110 1110,1230
Um, we're still executing with

1925
00:55:59,890 --> 00:56:01,540
0,150 150,360 360,960 1110,1410 1410,1650
this very small user page

1926
00:56:01,540 --> 00:56:03,250
0,510 810,1050 1050,1200 1200,1470 1470,1710
table and run step by

1927
00:56:03,250 --> 00:56:05,650
0,120 120,1020 1170,1680 1710,2220 2220,2400
to execute the load and

1928
00:56:05,650 --> 00:56:06,660
0,360 360,750
sat p.

1929
00:56:08,770 --> 00:56:09,700
0,660
I'm.

1930
00:56:11,140 --> 00:56:11,920
0,210 210,300 300,450 450,690 690,780
And we'll look again at

1931
00:56:11,920 --> 00:56:12,730
0,60 60,270 270,480 480,690 690,810
the kernel page, now we're

1932
00:56:12,730 --> 00:56:14,080
0,90 90,120 120,600 600,1080 1080,1350
at a completely different page

1933
00:56:14,080 --> 00:56:14,860
0,270 270,420 420,600 600,690 690,780
table right, this is the

1934
00:56:14,860 --> 00:56:16,720
0,270 270,540 540,930 1470,1770 1770,1860
kernel page table, then you

1935
00:56:16,720 --> 00:56:17,560
0,90 90,210 210,390 390,570 570,840
can see all these different

1936
00:56:17,560 --> 00:56:19,360
0,510 510,630 630,1140 1140,1260 1260,1800
regions of memory and device

1937
00:56:19,360 --> 00:56:20,980
0,390 390,840 840,930 930,1380 1410,1620
control registers and whatnot that

1938
00:56:20,980 --> 00:56:22,360
0,270 270,570
the um.

1939
00:56:22,640 --> 00:56:24,230
0,330 330,930 930,1260 1260,1470 1470,1590
A kernel sets up in

1940
00:56:24,230 --> 00:56:26,180
0,210 210,840 1050,1320 1320,1650 1650,1950
its own a big kernel

1941
00:56:26,180 --> 00:56:27,860
0,240 240,480 690,870 870,1080 1110,1680
page table, so we successfully

1942
00:56:27,860 --> 00:56:29,280
0,300 300,600 600,1230
switch page tables.

1943
00:56:29,740 --> 00:56:30,700
0,300 300,420 420,540 540,750 750,960
And now the kernel page

1944
00:56:30,700 --> 00:56:32,200
0,300 750,990 990,1200 1200,1350 1350,1500
tables, so we're in pretty

1945
00:56:32,200 --> 00:56:33,010
0,150 150,360 360,420 420,600 600,810
good shape at this point

1946
00:56:33,010 --> 00:56:34,090
0,180 180,270 270,360 360,420 420,1080
because we have a stack,

1947
00:56:34,480 --> 00:56:35,740
0,270 270,690 690,810 810,1020 1050,1260
um, we have the kernel

1948
00:56:35,740 --> 00:56:36,760
0,270 270,570 570,690 690,840 840,1020
page table, we can read

1949
00:56:36,760 --> 00:56:38,260
0,120 120,420 420,810 840,990 990,1500
my kernel data were really

1950
00:56:38,500 --> 00:56:40,150
0,420 420,630 630,960 960,1260 1260,1650
pretty much ready to um.

1951
00:56:40,990 --> 00:56:42,130
0,540 540,750 750,1020 1020,1080 1080,1140
Execute c code in the

1952
00:56:42,130 --> 00:56:44,830
0,450 1080,1440 1440,1800 1800,2160 2190,2700
kernel, one puzzle though is.

1953
00:56:45,770 --> 00:56:47,330
0,390 390,960 960,1140 1140,1320 1320,1560
How come, we didn't just

1954
00:56:47,330 --> 00:56:49,160
0,870 1230,1530 1530,1620 1620,1740 1740,1830
crash, after all we are

1955
00:56:49,160 --> 00:56:51,170
0,420 420,780 780,870 870,1620 1650,2010
executing somewhere in memory, and

1956
00:56:51,170 --> 00:56:52,130
0,90 90,420 420,690 690,900 900,960
the program counter holds a

1957
00:56:52,130 --> 00:56:54,530
0,330 330,1140 1260,1650 1680,1830 1830,2400
virtual address, if we switch

1958
00:56:54,530 --> 00:56:56,080
0,510 510,1410
page tables.

1959
00:56:56,170 --> 00:56:58,030
0,300 300,570 570,900 960,1560 1590,1860
Why doesn't that a just

1960
00:56:58,030 --> 00:56:59,410
0,240 240,600 600,900 900,1320 1320,1380
cause some random garbage or

1961
00:56:59,410 --> 00:57:01,330
0,300 300,390 390,900 1410,1800 1800,1920
nothing at all to be

1962
00:57:01,330 --> 00:57:02,470
0,360 360,450 450,540 540,780 780,1140
mapped in the new page

1963
00:57:02,470 --> 00:57:04,030
0,570 600,1170 1170,1320 1320,1440 1440,1560
table underfoot where we were

1964
00:57:04,030 --> 00:57:04,980
0,690
executing.

1965
00:57:05,470 --> 00:57:06,670
0,180 180,330 330,810 810,900 900,1200
We're not crashing or actually

1966
00:57:06,670 --> 00:57:08,240
0,330 330,540 540,1320
execute these instructions.

1967
00:57:08,660 --> 00:57:10,220
0,570 660,900 900,1200 1200,1350 1350,1560
Um, any guesses what's going

1968
00:57:10,220 --> 00:57:10,800
0,270
on.

1969
00:57:13,280 --> 00:57:15,140
0,210 210,510 510,660 660,1230 1560,1860
I think it's because oh

1970
00:57:15,140 --> 00:57:16,980
0,540
sorry.

1971
00:57:17,040 --> 00:57:18,900
0,480 570,960 960,1170 1170,1620 1620,1860
Um, because we're still in

1972
00:57:18,900 --> 00:57:20,250
0,120 120,810 810,1140 1140,1260 1260,1350
the trampoline code and the

1973
00:57:20,250 --> 00:57:22,560
0,690 690,1050 1050,1890 1890,2010 2010,2310
trampoline is mapped the same

1974
00:57:22,560 --> 00:57:25,050
0,420 420,930 930,1410 1410,2160 2160,2490
virtual address both user and

1975
00:57:25,050 --> 00:57:25,960
0,660
kernel.

1976
00:57:26,260 --> 00:57:28,570
0,210 210,630 630,1200 1560,2010 2010,2310
That's absolutely correct and say

1977
00:57:28,630 --> 00:57:29,410
0,510 510,540 540,660 660,720 720,780
yo I don't know if

1978
00:57:29,410 --> 00:57:30,550
0,120 120,540 540,720 720,840 840,1140
you remember what was mapped

1979
00:57:30,550 --> 00:57:31,090
0,150 150,210 210,270 270,480 480,540
here in the u.s a

1980
00:57:31,090 --> 00:57:32,800
0,270 270,630 750,1050 1050,1230 1230,1710
page table, but this mapping

1981
00:57:32,800 --> 00:57:33,640
0,450 450,540 540,630 630,750 750,840
here at the end of

1982
00:57:33,640 --> 00:57:34,960
0,90 90,450 450,750 750,1140 1170,1320
the kernel page table is

1983
00:57:34,960 --> 00:57:36,550
0,690 690,780 780,1050 1050,1440 1440,1590
exactly the same mapping in

1984
00:57:36,550 --> 00:57:38,680
0,90 90,450 450,1140 1530,1890 1890,2130
the same place, um as

1985
00:57:38,680 --> 00:57:40,580
0,420 420,510 510,1020 1020,1590
as the trampoline mapping.

1986
00:57:40,840 --> 00:57:41,350
0,150 150,240 240,390 390,450 450,510
At the end of the

1987
00:57:41,350 --> 00:57:42,790
0,300 300,570 570,990 1020,1350 1350,1440
user page table all the

1988
00:57:42,790 --> 00:57:44,120
0,120 120,510 510,540 540,960
other mappings are different.

1989
00:57:44,480 --> 00:57:45,470
0,300 300,480 480,780 780,900 900,990
But this mapping is the

1990
00:57:45,470 --> 00:57:46,430
0,270 270,420 420,510 510,600 600,960
same, this is the mapping

1991
00:57:46,430 --> 00:57:47,510
0,120 120,330 330,390 390,960 960,1080
that holds the instructions were

1992
00:57:47,510 --> 00:57:48,920
0,540 540,660 660,960 960,1110 1110,1410
executing, and because it didn't

1993
00:57:48,920 --> 00:57:50,300
0,600 600,780 780,870 870,1110 1110,1380
change when we switch page

1994
00:57:50,300 --> 00:57:53,600
0,570 1500,1800 1800,2070 2070,2490 2490,3300
tables, we actually continue executing

1995
00:57:53,600 --> 00:57:54,770
0,150 150,240 240,540 540,1050 1050,1170
and we're still executing the

1996
00:57:54,770 --> 00:57:57,410
0,330 330,690 690,780 780,1680 2070,2640
same sequence of instructions and

1997
00:57:57,410 --> 00:57:58,280
0,180 180,630
not crashing.

1998
00:57:59,140 --> 00:58:01,000
0,330 1080,1440 1440,1530 1530,1740 1740,1860
Um, and so that's the

1999
00:58:01,000 --> 00:58:02,230
0,210 210,330 330,750 750,1020 1020,1230
sort of special thing about

2000
00:58:02,230 --> 00:58:04,510
0,60 60,600 600,1320 1350,1560 1560,2280
the trampoline page, it's mapped.

2001
00:58:05,070 --> 00:58:06,780
0,300 300,390 390,450 450,1050 1170,1710
Both in the user a

2002
00:58:07,500 --> 00:58:10,290
0,270 270,660 660,1200 2220,2580 2580,2790
page tables and kernel page

2003
00:58:10,290 --> 00:58:11,490
0,390 660,840 840,900 900,1110 1110,1200
table and the reason it's

2004
00:58:11,490 --> 00:58:13,680
0,240 240,300 300,900 900,1620 1710,2190
called a trampoline pages because

2005
00:58:13,680 --> 00:58:14,910
0,120 120,300 300,420 420,1020 1020,1230
you sort of bounce on

2006
00:58:14,910 --> 00:58:16,710
0,210 900,1380 1380,1440 1440,1620 1620,1800
it on the way from

2007
00:58:16,710 --> 00:58:18,960
0,300 300,960 960,1050 1050,1440 1590,2250
user space to kernel space.

2008
00:58:20,760 --> 00:58:22,290
0,270 270,420 420,660 660,1290 1290,1530
And the next instruction, this

2009
00:58:22,290 --> 00:58:23,820
0,450 450,540 540,720 720,840 840,1530
JR were about to bounce

2010
00:58:24,030 --> 00:58:25,740
0,570 570,720 720,780 780,870 870,1710
right out of the trampoline,

2011
00:58:26,100 --> 00:58:27,900
0,240 240,720 750,1050 1050,1260 1260,1800
um into kernel c code.

2012
00:58:28,430 --> 00:58:29,330
0,240 240,390 390,570 570,660 660,900
And see where we're going,

2013
00:58:29,330 --> 00:58:31,310
0,600 600,690 690,960 960,1170 1500,1980
JR is just like jump

2014
00:58:31,310 --> 00:58:33,050
0,90 90,150 150,1050 1140,1620 1620,1740
to a subroutine subroutine, this

2015
00:58:33,050 --> 00:58:34,310
0,330 330,450 450,630 630,1080 1080,1260
point to buy register t

2016
00:58:34,310 --> 00:58:35,720
0,630
zero.

2017
00:58:35,930 --> 00:58:37,070
0,450 450,720 720,810 810,990 990,1140
Print easier to see where

2018
00:58:37,070 --> 00:58:37,900
0,90 90,540
we're going.

2019
00:58:39,420 --> 00:58:41,200
0,630 630,1470
Um, maio.

2020
00:58:42,460 --> 00:58:44,440
0,330 330,1200 1200,1710
Prince instructions there.

2021
00:58:46,520 --> 00:58:47,390
0,330 330,480 480,690 690,750 750,870
Okay, so these are the

2022
00:58:47,390 --> 00:58:48,470
0,480 480,540 540,720 720,810 810,1080
instructions were about to jump

2023
00:58:48,470 --> 00:58:50,390
0,270 270,540 540,660 660,930 1350,1920
to there in the beginning

2024
00:58:50,390 --> 00:58:51,500
0,90 90,150 150,540 540,810 810,1110
of the function called user

2025
00:58:51,500 --> 00:58:52,380
0,600
trap.

2026
00:58:53,560 --> 00:58:55,840
0,360 360,420 420,750 750,1200 1710,2280
Use a trap is just

2027
00:58:55,840 --> 00:58:57,360
0,270 270,540 540,1260
A C function.

2028
00:58:57,480 --> 00:58:59,200
0,420 420,690 690,900 900,1350
Defiant trap dot c.

2029
00:59:01,040 --> 00:59:03,020
0,300 300,540 540,1020 1170,1440 1440,1980
Here's user trap, we're about

2030
00:59:03,020 --> 00:59:04,160
0,150 150,420 420,570 570,960 960,1140
to jump from assembly code

2031
00:59:04,160 --> 00:59:04,940
0,90 90,240 240,300 300,570 570,780
to use a trap with

2032
00:59:04,940 --> 00:59:06,050
0,60 60,570 570,780 780,840 840,1110
a stack with a kernel

2033
00:59:06,050 --> 00:59:07,790
0,270 270,720 1170,1470 1470,1680 1680,1740
page table, um, let me

2034
00:59:07,790 --> 00:59:09,080
0,300 300,660 660,990
actually do the.

2035
00:59:09,890 --> 00:59:11,640
0,600 600,660 660,1470
Execute the instruction.

2036
00:59:12,040 --> 00:59:13,600
0,240 240,360 360,510 510,870 870,1560
And I'm gonna turn on.

2037
00:59:14,710 --> 00:59:15,800
0,840
I'm.

2038
00:59:17,520 --> 00:59:18,570
0,270 270,360 360,720 720,810 810,1050
Turn on display of c

2039
00:59:18,570 --> 00:59:20,640
0,420 420,840 840,1290 1290,1500 1500,2070
code and GDP, now rescuing

2040
00:59:20,640 --> 00:59:24,330
0,450 450,900 3180,3420 3420,3570 3570,3690
c code okay, so now

2041
00:59:24,330 --> 00:59:24,780
0,90 90,150 150,180 180,330 330,450
we're in a much more

2042
00:59:24,780 --> 00:59:26,160
0,300 300,660 660,810 810,990 990,1380
sane world, we're just executing

2043
00:59:26,160 --> 00:59:27,630
0,240 240,720 960,1230 1230,1410 1410,1470
c code, a should be

2044
00:59:27,630 --> 00:59:28,290
0,30 30,180 180,330 330,570 570,660
a little bit easier to

2045
00:59:28,290 --> 00:59:31,140
0,660 930,1110 1110,1410 1800,2190 2730,2850
understand and there's a you

2046
00:59:31,140 --> 00:59:32,370
0,180 180,390 390,660 660,810 810,1230
know still spend some time

2047
00:59:32,370 --> 00:59:34,380
0,240 240,330 330,990 990,1560 1560,2010
reading and writing various interesting

2048
00:59:34,560 --> 00:59:37,060
0,420 420,990 990,1230 1770,2190
control registers, but um.

2049
00:59:37,630 --> 00:59:39,190
0,150 150,630 630,1080 1170,1530 1530,1560
The environment is hopefully a

2050
00:59:39,190 --> 00:59:40,780
0,120 120,300 300,570 570,1290 1290,1590
good deal less mysterious than

2051
00:59:40,780 --> 00:59:41,500
0,90 90,330 330,390 390,450 450,720
it was in the track

2052
00:59:41,500 --> 00:59:42,060
0,270
frame.

2053
00:59:43,420 --> 00:59:45,420
0,600
Alright.

2054
00:59:48,140 --> 00:59:49,790
0,270 270,690 690,1050 1050,1200 1200,1650
Any function, any any questions

2055
00:59:49,790 --> 00:59:50,640
0,60 60,210 210,510
at this point.

2056
00:59:53,890 --> 00:59:55,510
0,390 390,810 810,1050 1050,1170 1170,1620
A I have a question,

2057
00:59:55,510 --> 00:59:56,740
0,270 270,600 600,750 750,1080 1080,1230
why didn't we see with

2058
00:59:56,740 --> 00:59:59,860
0,120 120,960 1320,2010 2070,2490 2520,3120
the GDP, um what equal

2059
00:59:59,860 --> 01:00:00,720
0,600
does.

2060
01:00:03,010 --> 01:00:04,450
0,210 210,630 690,1050 1050,1140 1140,1440
I I maybe I missed

2061
01:00:04,450 --> 01:00:06,580
0,180 180,450 450,1140 1320,1530 1530,2130
it, but I I think

2062
01:00:06,580 --> 01:00:08,530
0,450 450,810 810,1410 1410,1770 1770,1950
we've jumped directly into the

2063
01:00:08,530 --> 01:00:09,580
0,750
trampoline.

2064
01:00:11,930 --> 01:00:15,400
0,690 1260,1860 1860,2400 2550,3300
Equal equal did jump.

2065
01:00:16,290 --> 01:00:19,560
0,240 270,810 810,1800 1920,2730 2760,3270
What equal does is um,

2066
01:00:19,740 --> 01:00:21,870
0,450 630,1110 1110,1410 1410,1890 1890,2130
just switch just changes the

2067
01:00:21,870 --> 01:00:23,340
0,270 270,420 420,510 510,630 630,1470
mode bit to be supervisor

2068
01:00:23,820 --> 01:00:25,020
0,810
and.

2069
01:00:25,220 --> 01:00:26,160
0,690
I'm.

2070
01:00:26,960 --> 01:00:28,640
0,420 420,1050 1050,1440
Equal sets deep.

2071
01:00:29,450 --> 01:00:30,830
0,330 330,660 660,1170 1170,1290 1290,1380
Program counter register to be

2072
01:00:30,830 --> 01:00:32,840
0,330 330,540 540,900 930,1410 1410,2010
equal to the whatever happens,

2073
01:00:32,870 --> 01:00:34,010
0,330 330,420 420,780 780,1080 1080,1140
whatever the kernel happened to

2074
01:00:34,010 --> 01:00:36,200
0,390 390,510 510,900 900,1380
store in St back.

2075
01:00:36,400 --> 01:00:37,930
0,180 180,420 420,660 660,1320 1350,1530
I'll store this value I

2076
01:00:37,930 --> 01:00:39,370
0,210 210,450 450,780 780,1230 1230,1440
just printed three fs zero

2077
01:00:39,370 --> 01:00:40,570
0,240 240,630 630,810 810,1080 1110,1200
zero zero which is the

2078
01:00:40,570 --> 01:00:41,980
0,270 270,330 330,390 390,840 840,1410
beginning of the trampoline page

2079
01:00:42,490 --> 01:00:43,660
0,330 330,1020
kernel stores.

2080
01:00:43,740 --> 01:00:45,090
0,240 240,630 630,720 720,1110 1110,1350
This number in St back

2081
01:00:45,090 --> 01:00:47,520
0,300 300,570 570,840 840,1590 2040,2430
before entering user space, so

2082
01:00:47,520 --> 01:00:49,440
0,330 360,870 870,1710 1710,1830 1830,1920
weird recall goes that is

2083
01:00:49,440 --> 01:00:50,520
0,180 180,330 330,510 510,600 600,1080
where it's just the program

2084
01:00:50,790 --> 01:00:53,700
0,420 420,840 1320,2190 2190,2640
counter to St, vac.

2085
01:00:53,820 --> 01:00:54,750
0,180 180,300 300,390 390,840 840,930
Which is the beginning of

2086
01:00:54,750 --> 01:00:56,040
0,60 60,540 540,1110
the trampoline page.

2087
01:00:58,560 --> 01:01:00,000
0,390 390,570 570,660 660,1140
That answer your question.

2088
01:01:02,240 --> 01:01:05,640
0,720 900,1110 1110,1350 1350,1680
Yes I think so.

2089
01:01:08,610 --> 01:01:09,570
0,270 270,450 450,600 600,780 780,960
Okay, so now we're in

2090
01:01:09,570 --> 01:01:12,510
0,420 450,990 1020,2190 2190,2670 2670,2940
a user users represent are

2091
01:01:12,510 --> 01:01:13,980
0,270 270,540 540,840 900,990 990,1470
actually just like a trampoline

2092
01:01:13,980 --> 01:01:15,800
0,390 390,840 960,1320
page and um.

2093
01:01:16,580 --> 01:01:18,230
0,690 690,780 780,840 840,1230 1230,1650
Just like the trampoline page

2094
01:01:18,230 --> 01:01:19,850
0,720 720,780 780,1110 1110,1260 1260,1620
for a number of different

2095
01:01:19,850 --> 01:01:21,110
0,330 330,390 390,780 780,900 900,1260
kinds of traps there system

2096
01:01:21,110 --> 01:01:23,000
0,570 570,750 750,1380 1380,1530 1530,1890
calls there's exceptions like dividing

2097
01:01:23,000 --> 01:01:24,440
0,150 150,780 780,900 900,1200 1200,1440
by zero or using a

2098
01:01:24,470 --> 01:01:26,360
0,180 180,660 660,960 960,1470 1680,1890
UN mapped virtual address and

2099
01:01:26,360 --> 01:01:27,560
0,210 210,300 300,720 720,1080 1080,1200
there's a device interrupts and

2100
01:01:27,560 --> 01:01:29,210
0,90 90,270 270,450 450,900 1170,1650
they all come here and

2101
01:01:29,210 --> 01:01:29,940
0,300
so.

2102
01:01:30,520 --> 01:01:31,360
0,270 270,330 330,600 600,780 780,840
Use a trap sort of

2103
01:01:31,360 --> 01:01:33,310
0,390 390,480 480,1110 1110,1560 1590,1950
saves and restores some hardware

2104
01:01:33,310 --> 01:01:34,240
0,240 240,360 360,480 480,720 720,930
state, but it also needs

2105
01:01:34,240 --> 01:01:35,560
0,210 240,690 690,810 810,900 900,1320
to look at the state

2106
01:01:35,560 --> 01:01:37,840
0,180 180,720 870,1740 2040,2190 2190,2280
at the cause of the

2107
01:01:37,840 --> 01:01:39,610
0,630 660,900 900,1140 1140,1410 1530,1770
trap to figure out what

2108
01:01:39,610 --> 01:01:41,410
0,90 90,270 270,450 450,780 1230,1800
to do with it, um.

2109
01:01:42,220 --> 01:01:42,940
0,210 210,330 330,420 420,540 540,720
And so we're gonna see

2110
01:01:42,940 --> 01:01:44,140
0,210 210,510 510,600 600,750 750,1200
both things as we execute

2111
01:01:44,140 --> 01:01:46,480
0,420 420,780 780,1110 1110,1560 1740,2340
along in user trap, let

2112
01:01:46,480 --> 01:01:47,220
0,60 60,510
me just.

2113
01:01:47,290 --> 01:01:48,300
0,690
I'm.

2114
01:01:49,470 --> 01:01:50,730
0,300 300,600 600,810 810,870 870,1260
Run stuffing, use a trap,

2115
01:01:50,730 --> 01:01:53,160
0,180 180,480 1680,2040 2040,2190 2190,2430
let's see, um the first

2116
01:01:53,160 --> 01:01:53,970
0,90 90,180 180,390 390,660 660,810
thing it does here is

2117
01:01:53,970 --> 01:01:56,220
0,270 360,690 810,1500 1500,1740 1740,2250
that it changes that estee

2118
01:01:56,220 --> 01:01:58,680
0,240 240,990 1170,1860 1920,2100 2100,2460
beck register, um, it turns

2119
01:01:58,680 --> 01:01:59,800
0,120 120,300 300,720
out that the.

2120
01:02:00,490 --> 01:02:02,080
0,180 180,600 600,900 900,1200 1200,1590
The way xc six handles

2121
01:02:02,080 --> 01:02:03,970
0,600 720,1020 1020,1470 1470,1830 1830,1890
traps is different depending on

2122
01:02:03,970 --> 01:02:04,930
0,180 180,330 330,480 480,660 660,960
whether they come from user

2123
01:02:04,930 --> 01:02:06,310
0,540 540,690 690,840 840,900 900,1380
space or from the kernel

2124
01:02:06,640 --> 01:02:07,780
0,240 240,450 450,720 720,840 840,1140
and we've only been talking

2125
01:02:07,780 --> 01:02:08,590
0,210 210,360 360,660 660,750 750,810
about what happens if a

2126
01:02:08,590 --> 01:02:10,810
0,540 750,1230 1230,1410 1410,1680 1680,2220
trap occurs from user space,

2127
01:02:10,960 --> 01:02:12,580
0,240 240,270 270,600 600,960 1170,1620
there's a quite different sequence

2128
01:02:12,580 --> 01:02:14,620
0,90 90,780 1170,1590 1590,1740 1740,2040
of events, I'm for traps

2129
01:02:14,620 --> 01:02:15,670
0,90 90,240 240,390 390,480 480,1050
that come from the kernel

2130
01:02:15,940 --> 01:02:16,990
0,240 240,510 510,840 840,960 960,1050
that occur while in the

2131
01:02:16,990 --> 01:02:18,100
0,270 270,510 510,810 810,990 990,1110
kernel, because after all, for

2132
01:02:18,100 --> 01:02:19,860
0,450 690,900 900,1440
example the kernel.

2133
01:02:20,120 --> 01:02:20,900
0,60 60,180 180,480 480,720 720,780
I was already using the

2134
01:02:20,900 --> 01:02:23,330
0,270 270,570 570,1050 1140,1590 2070,2430
kernel page table, a trap

2135
01:02:23,330 --> 01:02:24,560
0,720 810,990 990,1110 1110,1170 1170,1230
occurs while you're in the

2136
01:02:24,560 --> 01:02:25,460
0,270 270,360 360,570 570,750 750,900
kernel, you already have the

2137
01:02:25,460 --> 01:02:26,360
0,240 240,450 450,720 720,870 870,900
kernel page tables there's a

2138
01:02:26,360 --> 01:02:27,050
0,210 210,360 360,420 420,600 600,690
whole bunch of stuff that

2139
01:02:27,050 --> 01:02:28,820
0,240 240,420 420,510 510,960 1380,1770
doesn't have to happen if

2140
01:02:28,820 --> 01:02:30,500
0,60 60,510 810,1230 1230,1590 1590,1680
the trap occurred while in

2141
01:02:30,500 --> 01:02:32,870
0,90 90,510 1020,1320 1320,1500 1500,2370
the colonel, um, so before

2142
01:02:32,900 --> 01:02:33,830
0,240 240,420 420,780 780,870 870,930
getting much further in the

2143
01:02:33,830 --> 01:02:35,780
0,270 270,750 900,1170 1170,1560 1560,1950
kernel code, we change SD

2144
01:02:35,780 --> 01:02:36,830
0,450 450,570 570,840 840,900 900,1050
vac to point to this

2145
01:02:36,830 --> 01:02:37,910
0,330 330,540 540,750 750,870 870,1080
colonel back which is the

2146
01:02:37,940 --> 01:02:40,370
0,540 600,1020 1020,1680 1770,2340 2340,2430
kernel trap handler rather than

2147
01:02:40,370 --> 01:02:41,520
0,60 60,330 330,570 570,870
the user trap handler.

2148
01:02:43,250 --> 01:02:46,040
0,540 1110,2040 2040,2190 2190,2520 2520,2790
A need for various reasons,

2149
01:02:46,040 --> 01:02:46,670
0,90 90,210 210,300 300,540 540,630
we need to figure out

2150
01:02:46,670 --> 01:02:48,170
0,210 210,660 660,780 780,1230 1410,1500
what process we're running and

2151
01:02:48,170 --> 01:02:48,920
0,120 120,210 210,360 360,480 480,750
we do that by calling

2152
01:02:48,920 --> 01:02:50,690
0,120 120,360 360,720 720,1200 1650,1770
this my proc function and

2153
01:02:50,690 --> 01:02:51,650
0,150 150,390 390,660 660,870 870,960
my product actually looks at

2154
01:02:51,650 --> 01:02:53,060
0,150 150,540 540,1110 1110,1230 1230,1410
an array indexed by the

2155
01:02:53,060 --> 01:02:55,940
0,570 660,1170 1170,1620 1920,2310 2310,2880
current core number, heart ID

2156
01:02:56,180 --> 01:02:57,050
0,210 210,270 270,540 540,660 660,870
do you remember we put

2157
01:02:57,050 --> 01:02:59,180
0,240 270,300 510,1440
in a teepee.

2158
01:02:59,300 --> 01:03:00,950
0,540 900,1110 1110,1230 1230,1380 1380,1650
Um, that's how my part

2159
01:03:00,950 --> 01:03:01,940
0,240 240,330 330,510 510,900 900,990
figures out what process is

2160
01:03:01,940 --> 01:03:02,920
0,330 330,690
currently running.

2161
01:03:07,150 --> 01:03:08,470
0,240 240,450 450,540 540,1140 1140,1320
We need to save that

2162
01:03:08,470 --> 01:03:10,240
0,360 360,870 900,1410 1410,1650 1650,1770
save user program counter is

2163
01:03:10,240 --> 01:03:12,670
0,270 270,630 630,1020 1020,1620 1980,2430
still sitting there in a.

2164
01:03:13,660 --> 01:03:16,240
0,180 180,780 780,1230 1290,1860 2130,2580
In sep c but because

2165
01:03:16,240 --> 01:03:17,200
0,150 150,270 270,450 450,600 600,960
one of things that could

2166
01:03:17,200 --> 01:03:18,340
0,600 600,900 900,990 990,1050 1050,1140
happen while we're in the

2167
01:03:18,340 --> 01:03:19,600
0,330 330,480 480,600 600,720 720,1260
kernel is that we might

2168
01:03:19,600 --> 01:03:21,640
0,450 450,570 570,840 840,1740 1800,2040
switch to another process and

2169
01:03:21,640 --> 01:03:23,020
0,150 150,360 360,810 810,1110
that other process might.

2170
01:03:23,250 --> 01:03:24,930
0,180 180,600 630,870 870,1380 1380,1680
Go into that process user

2171
01:03:24,930 --> 01:03:27,270
0,780 990,1290 1290,1530 1560,1830 1830,2340
space and that other process

2172
01:03:27,270 --> 01:03:28,040
0,510
might.

2173
01:03:28,420 --> 01:03:29,350
0,210 210,240 240,570 570,750 750,930
Make a system call, which

2174
01:03:29,350 --> 01:03:30,850
0,630 660,990 990,1290 1290,1380 1380,1500
causes se PC to be

2175
01:03:30,850 --> 01:03:32,680
0,540 630,960 960,1140 1140,1380 1380,1830
overwritten, we have to save

2176
01:03:32,710 --> 01:03:35,800
0,630 630,1110 1110,1560 1770,2730 2850,3090
our sep c and some

2177
01:03:35,800 --> 01:03:37,690
0,330 330,810 810,960 960,1140 1140,1890
memories associated with this process

2178
01:03:37,720 --> 01:03:38,830
0,150 150,210 210,420 420,570 570,1110
so it doesn't get overwritten

2179
01:03:39,190 --> 01:03:40,930
0,420 420,930 1110,1440 1440,1590 1590,1740
and yet we use this

2180
01:03:40,930 --> 01:03:43,060
0,300 300,750 750,1020 1050,1590 1590,2130
trap frame to save epc

2181
01:03:43,060 --> 01:03:43,690
0,120 120,270 270,390 390,570 570,630
as well as lots of

2182
01:03:43,690 --> 01:03:46,000
0,180 180,660 1080,1560 1680,2100 2100,2310
other stuff, um anyway that's

2183
01:03:46,000 --> 01:03:46,700
0,90 90,570
with this.

2184
01:03:47,390 --> 01:03:48,170
0,270 270,450 450,510 510,690 690,780
Current line of code is

2185
01:03:48,170 --> 01:03:50,540
0,360 1350,1650 1650,1860 1860,2010 2010,2370
doing the next thing happens,

2186
01:03:50,540 --> 01:03:53,300
0,120 120,390 390,1080 1530,2220 2220,2760
we need to figure out.

2187
01:03:56,120 --> 01:03:57,590
0,390 390,690 690,810 810,1140 1140,1470
Um, why we came here

2188
01:03:57,770 --> 01:03:59,270
0,330 330,660 660,1260 1260,1380 1380,1500
{the's -} cause, there is

2189
01:03:59,270 --> 01:04:01,190
0,330 330,540 540,900 900,1500 1680,1920
five s cause register has

2190
01:04:01,190 --> 01:04:02,300
0,60 60,330 330,600 600,990 990,1110
a different number depending on

2191
01:04:02,300 --> 01:04:04,820
0,390 390,600 600,900 900,1560
why this trap occurred.

2192
01:04:05,340 --> 01:04:06,720
0,300 300,450 450,630 630,690 690,1380
A some kind of exception

2193
01:04:06,930 --> 01:04:08,640
0,450 450,870 870,1110 1110,1410 1410,1710
versus system call versus device

2194
01:04:08,640 --> 01:04:11,040
0,450 510,1110 1110,1380 1380,2010 2100,2400
interrupt value eight means we're

2195
01:04:11,040 --> 01:04:12,090
0,450 450,540 540,720 720,750 750,1050
here we took a trap

2196
01:04:12,090 --> 01:04:13,170
0,300 300,360 360,420 420,720 720,1080
because of a system call.

2197
01:04:13,630 --> 01:04:14,700
0,660
I'm.

2198
01:04:15,430 --> 01:04:17,920
0,390 390,1080 1620,1920 1920,2280 2280,2490
Hopefully, indeed this causes eight

2199
01:04:17,920 --> 01:04:19,090
0,90 90,270 270,390 390,630 630,1170
it does have eight cars

2200
01:04:19,300 --> 01:04:20,290
0,270 270,390 390,600 600,690 690,990
were here because a system

2201
01:04:20,290 --> 01:04:21,880
0,300 810,1230 1260,1410 1410,1470 1470,1590
call, um, so we're gonna

2202
01:04:21,880 --> 01:04:23,940
0,360 360,870 930,1800
execute this statement.

2203
01:04:24,770 --> 01:04:26,660
0,720 990,1500 1500,1590 1590,1740 1740,1890
Um, first thing is if

2204
01:04:26,660 --> 01:04:28,100
0,330 330,660 660,1080 1080,1200 1200,1440
some other process is killed,

2205
01:04:28,100 --> 01:04:29,000
0,150 150,570 570,660 660,780 780,900
this process, we don't want

2206
01:04:29,000 --> 01:04:30,350
0,60 60,570 570,960 960,1200 1200,1350
to continue but that's not

2207
01:04:30,350 --> 01:04:33,320
0,60 60,300 300,540 540,1080 2430,2970
the case for shell, um.

2208
01:04:33,940 --> 01:04:34,930
0,150 150,480 480,660 660,840 840,990
It turns out that the

2209
01:04:34,930 --> 01:04:37,450
0,300 300,1080 1380,1800 1860,2190 2190,2520
risk five the program counter

2210
01:04:37,450 --> 01:04:39,220
0,120 120,360 360,1050 1050,1230 1230,1770
that gets stored in sep,

2211
01:04:39,220 --> 01:04:41,320
0,660 750,1290 1440,1590 1590,1950 1950,2100
tsi is the address of

2212
01:04:41,320 --> 01:04:43,750
0,90 90,930 1050,1380 1380,2340 2340,2430
the instruction that caused the

2213
01:04:43,750 --> 01:04:44,540
0,690
trap.

2214
01:04:45,410 --> 01:04:46,550
0,180 180,390 390,540 540,1050 1050,1140
But when we resume we

2215
01:04:46,550 --> 01:04:47,540
0,210 210,270 270,690 690,840 840,990
want to resume at the

2216
01:04:47,540 --> 01:04:49,760
0,420 420,1050 1140,1860 1890,2040 2040,2220
next instruction after the e

2217
01:04:49,760 --> 01:04:51,740
0,450 840,1050 1050,1380 1380,1590 1710,1980
call so therefore we this

2218
01:04:51,740 --> 01:04:53,660
0,660 660,1260 1260,1590 1590,1740 1740,1920
code persistent calls which need

2219
01:04:53,660 --> 01:04:55,600
0,90 90,720 780,1470
to return, um.

2220
01:04:56,080 --> 01:04:57,550
0,300 300,600 600,1140 1140,1320 1320,1470
We add four to the

2221
01:04:57,550 --> 01:04:59,620
0,840 900,1170 1170,1470 1470,1890 1890,2070
saved user program counter so

2222
01:04:59,620 --> 01:05:00,860
0,120 120,510
that we.

2223
01:05:00,910 --> 01:05:02,290
0,420 420,480 480,570 570,870 870,1380
Resume in the next instruction

2224
01:05:02,290 --> 01:05:03,760
0,120 120,300 300,480 480,720 720,1470
and don't just {re-execute -}

2225
01:05:03,940 --> 01:05:05,240
0,180 180,540 540,1050
the SD equal.

2226
01:05:08,140 --> 01:05:10,240
0,480 480,1050 1110,1560 1560,1770 1770,2100
Alright next turns out that

2227
01:05:10,450 --> 01:05:13,000
0,300 300,450 450,1050 1170,1980 1980,2550
X V six enables interrupts

2228
01:05:13,000 --> 01:05:14,680
0,300 300,690 690,1020 1020,1410 1410,1680
while handling system calls just

2229
01:05:14,680 --> 01:05:16,930
0,120 120,840 1170,1530 1710,1920 1920,2250
that interrupts can be served

2230
01:05:16,930 --> 01:05:18,550
0,660 750,990 990,1290 1290,1500 1500,1620
faster some system calls take

2231
01:05:18,550 --> 01:05:20,500
0,60 60,180 180,240 240,720 1260,1950
a lot of time, um,

2232
01:05:21,190 --> 01:05:22,900
0,570 570,930 930,1050 1050,1380 1380,1710
uh, interrupts are always turned

2233
01:05:22,900 --> 01:05:24,670
0,600 660,900 900,1170 1170,1410 1410,1770
off by the risk five

2234
01:05:24,670 --> 01:05:27,040
0,360 360,960 1530,1980 2130,2280 2280,2370
track hardware, um, and so

2235
01:05:27,040 --> 01:05:28,360
0,90 90,180 180,270 270,1050 1080,1320
we have to explicitly turn

2236
01:05:28,360 --> 01:05:29,050
0,90 90,330 330,450 450,540 540,690
them back on at this

2237
01:05:29,050 --> 01:05:29,700
0,330
point.

2238
01:05:30,250 --> 01:05:31,000
0,330 330,390 390,570 570,660 660,750
And the next thing that

2239
01:05:31,000 --> 01:05:33,280
0,660 1710,1860 1860,1950 1950,2100 2100,2280
happens is we call this

2240
01:05:33,280 --> 01:05:34,480
0,210 210,420 420,840 840,930 930,1200
sis call function, the job

2241
01:05:34,480 --> 01:05:35,660
0,90 90,330 330,870
of sis call.

2242
01:05:36,080 --> 01:05:40,160
0,330 330,690 1350,1950 3090,3690 3690,4080
Just entering a defined in.

2243
01:05:40,520 --> 01:05:42,440
0,270 270,390 390,570 570,930
Just call that c.

2244
01:05:42,820 --> 01:05:43,840
0,150 150,270 270,660 720,960 960,1020
Here we are what it

2245
01:05:43,840 --> 01:05:44,560
0,150 150,270 270,360 360,570 570,720
does, is it looks up

2246
01:05:44,560 --> 01:05:45,940
0,90 90,450 450,690 690,1140 1140,1380
the system call number in

2247
01:05:45,940 --> 01:05:47,260
0,390 390,960
this um.

2248
01:05:47,670 --> 01:05:49,170
0,300 300,660 660,750 750,1110 1110,1500
Big table of system calls

2249
01:05:49,170 --> 01:05:50,160
0,420 450,600 600,690 690,930 930,990
about at the top of

2250
01:05:50,160 --> 01:05:53,220
0,90 90,690 1590,2190 2430,2670 2670,3060
the page, if you remember

2251
01:05:53,220 --> 01:05:55,230
0,120 120,780 780,1110 1110,1620 1620,2010
the shells right function set

2252
01:05:55,500 --> 01:05:57,240
0,450 480,720 720,1410 1440,1560 1560,1740
register a seven to beat

2253
01:05:57,240 --> 01:05:58,650
0,90 90,390 390,600 600,900 900,1410
the system call number namely

2254
01:05:58,680 --> 01:06:00,990
0,720 720,900 900,1320 1590,2130 2160,2310
sixteen per right, um, so

2255
01:06:00,990 --> 01:06:01,860
0,120 120,300 300,480 480,690 690,870
what this call does is

2256
01:06:01,860 --> 01:06:03,780
0,150 150,930 930,1050 1050,1710 1710,1920
it retrieves the saved a

2257
01:06:03,780 --> 01:06:05,760
0,600 780,1080 1080,1200 1200,1560 1560,1980
seven that was saved away

2258
01:06:05,760 --> 01:06:06,930
0,90 90,150 150,540 540,1020 1050,1170
in the trap theme by

2259
01:06:06,930 --> 01:06:08,420
0,90 90,660 660,1200
the trampoline code.

2260
01:06:09,230 --> 01:06:11,210
0,690 1050,1410 1410,1680 1680,1890 1890,1980
Um, and use that to

2261
01:06:11,210 --> 01:06:12,860
0,480 480,600 600,750 750,1290 1290,1650
index into this table of.

2262
01:06:13,390 --> 01:06:15,070
0,510 510,600 600,1080 1080,1230 1230,1680
Pointers to functions that implement

2263
01:06:15,070 --> 01:06:17,200
0,150 150,510 510,900
each system called.

2264
01:06:17,420 --> 01:06:20,570
0,660 1380,1500 1500,1800 2010,2970 2970,3150
So we're gonna fish, this

2265
01:06:20,570 --> 01:06:22,700
0,750 840,1050 1050,1260 1260,1620 1620,2130
number gonna put numb now

2266
01:06:22,790 --> 01:06:24,740
0,300 300,630 810,1320 1320,1560 1560,1950
that's the saved seven indeed

2267
01:06:24,740 --> 01:06:27,350
0,900 1020,1290 1290,1620 1620,2310 2400,2610
sixteen the same sixteen the

2268
01:06:27,350 --> 01:06:29,580
0,270 270,630 630,870 870,1260
shell originally put there.

2269
01:06:30,530 --> 01:06:31,520
0,720
I'm.

2270
01:06:32,610 --> 01:06:35,130
0,270 270,600 600,1290 1410,2010 2010,2520
The system called code indexes

2271
01:06:35,130 --> 01:06:37,350
0,510 510,870 870,1470 1980,2130 2130,2220
indices calls table we can

2272
01:06:37,350 --> 01:06:38,670
0,210 210,270 270,480 480,1020 1020,1320
find out what function can.

2273
01:06:39,600 --> 01:06:40,500
0,300 300,570 570,750 750,810 810,900
It got out of the

2274
01:06:40,500 --> 01:06:42,020
0,300 300,540 540,1080
system called table.

2275
01:06:42,380 --> 01:06:43,610
0,210 210,360 360,720 720,960 960,1230
A by stepping into it

2276
01:06:43,700 --> 01:06:44,870
0,360 360,510 510,660 660,780 780,1170
right now we're in right

2277
01:06:44,870 --> 01:06:46,800
0,390 390,630 630,1080 1170,1620
turns this right so.

2278
01:06:49,280 --> 01:06:50,690
0,210 210,390 390,690 690,930 930,1410
Since this file dot c.

2279
01:06:52,560 --> 01:06:54,090
0,270 270,510 510,660 660,960 990,1530
This right is the kernel

2280
01:06:54,090 --> 01:06:56,610
0,930 960,1440 1650,1980 1980,2220 2220,2520
implementation of the write system

2281
01:06:56,610 --> 01:06:58,620
0,300 1200,1620 1620,1740 1740,1860 1860,2010
call I'm not gonna go

2282
01:06:58,620 --> 01:07:00,060
0,150 150,390 390,510 510,930 960,1440
into this, it's like fairly

2283
01:07:00,060 --> 01:07:01,530
0,510 510,690 690,1020 1020,1170 1170,1470
complicated, what happens from here

2284
01:07:01,530 --> 01:07:02,880
0,150 150,480 870,1170 1170,1290 1290,1350
out and in and the

2285
01:07:02,880 --> 01:07:04,530
0,660 660,720 720,840 840,1110 1110,1650
implementation of this system call

2286
01:07:04,710 --> 01:07:05,730
0,360 360,570 570,750 750,840 840,1020
for this lecture, I'm only

2287
01:07:05,730 --> 01:07:06,960
0,240 240,630 630,720 720,990 990,1230
really interested in getting into

2288
01:07:06,960 --> 01:07:07,770
0,120 120,240 240,300 300,360 360,810
and out of the kernel,

2289
01:07:08,970 --> 01:07:11,020
0,480 480,630 630,960 960,1770
so I'm going to.

2290
01:07:12,100 --> 01:07:13,200
0,810
I'm.

2291
01:07:14,600 --> 01:07:16,460
0,840 840,1500
Step over.

2292
01:07:18,980 --> 01:07:20,180
0,930
I'm.

2293
01:07:25,860 --> 01:07:27,870
0,660 750,870 870,1110 1110,1710 1710,2010
Um the actual implementation system

2294
01:07:27,870 --> 01:07:29,430
0,300 330,750 750,1080 1080,1230 1230,1560
called one thing an interesting

2295
01:07:29,430 --> 01:07:30,300
0,150 150,240 240,510 510,630 630,870
thing to note is that

2296
01:07:30,450 --> 01:07:31,680
0,420 420,720 720,990 990,1140 1140,1230
the system calls need to

2297
01:07:31,680 --> 01:07:33,330
0,210 210,360 360,1140 1170,1500 1500,1650
find their arguments so you

2298
01:07:33,330 --> 01:07:34,890
0,360 360,420 420,990 990,1140 1170,1560
remember the arguments to write

2299
01:07:34,890 --> 01:07:36,090
0,210 240,810 810,870 870,930 930,1200
or to add a buffer

2300
01:07:36,090 --> 01:07:37,830
0,480 480,600 600,870 870,1260 1470,1740
pointer and another two and

2301
01:07:37,830 --> 01:07:39,240
0,120 120,510 510,750 750,1050 1110,1410
the way that the system

2302
01:07:39,240 --> 01:07:40,350
0,450 450,660 660,810 810,900 900,1110
coco gets at them is

2303
01:07:40,350 --> 01:07:42,090
0,300 300,600 600,780 780,1020 1020,1740
just looking at these some.

2304
01:07:43,430 --> 01:07:46,900
0,690 2580,3030
Well well.

2305
01:07:47,790 --> 01:07:49,230
0,660 660,720 720,810 810,1110 1110,1440
Looking at the trap frame,

2306
01:07:49,560 --> 01:07:50,370
0,240 240,420 420,570 570,690 690,810
so just like we could

2307
01:07:50,370 --> 01:07:51,150
0,180 180,300 300,360 360,600 600,780
look in the trap frame

2308
01:07:51,150 --> 01:07:52,380
0,90 90,210 210,720 840,1110 1110,1230
for a seven we can

2309
01:07:52,380 --> 01:07:53,760
0,120 120,240 240,360 360,1050 1260,1380
look for a zero and

2310
01:07:53,760 --> 01:07:54,900
0,210 210,300 300,600 600,1050 1050,1140
that's the first argument, we

2311
01:07:54,900 --> 01:07:55,830
0,120 120,240 240,300 300,720 720,930
look at a one that's

2312
01:07:55,830 --> 01:07:56,820
0,180 180,480 480,750 750,900 900,990
that buffer pointer, we can

2313
01:07:56,820 --> 01:07:57,660
0,120 120,240 240,330 330,630 630,840
look at a two that's

2314
01:07:57,660 --> 01:07:59,310
0,90 90,390 390,840 1050,1320 1320,1650
the second argument, the number

2315
01:07:59,310 --> 01:08:00,100
0,210 210,540
of um.

2316
01:08:00,940 --> 01:08:01,920
0,750
I'm.

2317
01:08:02,440 --> 01:08:03,760
0,540 540,1050
Bytes, right.

2318
01:08:05,020 --> 01:08:06,490
0,600 600,870 870,960 960,1170 1170,1470
Okay, so the system does

2319
01:08:06,490 --> 01:08:07,840
0,90 90,450 450,540 540,930 960,1350
its job and then a

2320
01:08:07,840 --> 01:08:10,280
0,300 300,630 630,930 930,1920
six rate finally returns.

2321
01:08:10,920 --> 01:08:11,900
0,660
I'm.

2322
01:08:13,190 --> 01:08:15,530
0,480 840,1230 1230,1380 1380,1920 1980,2340
And watch what happens, the

2323
01:08:15,530 --> 01:08:17,120
0,330 330,450 450,630 630,1290 1290,1590
reason for this assignment here,

2324
01:08:17,120 --> 01:08:18,650
0,90 90,300 300,450 450,600 600,1530
the reason why we're assigning

2325
01:08:19,070 --> 01:08:20,210
0,390 420,630 630,990 990,1080 1080,1140
to a zero in the

2326
01:08:20,210 --> 01:08:22,500
0,360 360,870 1170,1470 1470,1770
trap frame is that.

2327
01:08:22,640 --> 01:08:23,870
0,210 210,360 360,870 870,1110 1110,1230
Um, this system calls all

2328
01:08:23,870 --> 01:08:25,260
0,120 120,210 210,660 660,1110
have a return value.

2329
01:08:26,030 --> 01:08:27,290
0,330 330,600 600,930 930,1020 1020,1260
Like right returns, the number

2330
01:08:27,290 --> 01:08:28,970
0,90 90,420 420,810 1020,1470 1470,1680
of bytes written, um, and

2331
01:08:28,970 --> 01:08:30,260
0,60 60,690 690,900 900,1020 1020,1290
the convention and for c

2332
01:08:30,260 --> 01:08:31,250
0,270 270,360 360,420 420,660 660,990
code on the risk five

2333
01:08:31,250 --> 01:08:33,410
0,150 150,420 600,1200 1200,1860 1860,2160
is that return values are

2334
01:08:33,410 --> 01:08:35,090
0,330 330,420 420,870 870,1080 1080,1680
placed in register a zero

2335
01:08:35,120 --> 01:08:36,440
0,120 120,450 450,810 810,900 900,1320
by whatever function you're calling

2336
01:08:36,800 --> 01:08:38,000
0,240 240,360 360,450 450,1110 1110,1200
and so to simulate a

2337
01:08:38,000 --> 01:08:39,470
0,360 360,780 780,900 900,1170 1170,1470
return value, we just stick

2338
01:08:39,470 --> 01:08:40,910
0,90 90,390 390,900 960,1260 1260,1440
the return value in a

2339
01:08:40,910 --> 01:08:42,170
0,450 450,510 510,600 600,900 900,1260
zero in the trap frame

2340
01:08:42,560 --> 01:08:43,310
0,180 180,270 270,450 450,630 630,750
and we'll see by and

2341
01:08:43,310 --> 01:08:44,480
0,360 390,570 570,780 780,900 900,1170
by that when we return

2342
01:08:44,480 --> 01:08:46,640
0,90 90,330 330,1020 1320,1650 1650,2160
to user space, this a0

2343
01:08:46,640 --> 01:08:47,750
0,300 300,360 360,450 450,780 780,1110
slot in the trap frame

2344
01:08:47,750 --> 01:08:49,670
0,480 870,1410 1410,1620 1620,1800 1800,1920
is restored back into the

2345
01:08:49,670 --> 01:08:51,590
0,360 360,660 660,1230 1230,1530 1650,1920
actually zero register and the

2346
01:08:51,590 --> 01:08:53,150
0,270 270,930 930,1140 1140,1260 1260,1560
shell sees that a zero

2347
01:08:53,150 --> 01:08:54,400
0,420 420,810
value as.

2348
01:08:55,290 --> 01:08:57,450
0,660 1230,1590 1590,1650 1650,1920 1920,2160
Um, as the return value

2349
01:08:57,450 --> 01:09:00,870
0,150 150,630 1140,1830 2730,3180 3180,3420
from right and execute through

2350
01:09:00,870 --> 01:09:03,120
0,540 540,720 720,1170 1260,1740 1740,2250
this and print piano trap.

2351
01:09:03,410 --> 01:09:06,170
0,780 1110,1620 1620,2100 2490,2610 2610,2760
Frame sideways zero will see

2352
01:09:06,170 --> 01:09:07,220
0,60 60,390 390,690 690,900 900,1050
the value to what that

2353
01:09:07,220 --> 01:09:08,520
0,270 270,390 390,570 570,1080
means is that right.

2354
01:09:08,630 --> 01:09:10,190
0,510 510,840 840,1110 1110,1380 1380,1560
Return values too, saying that

2355
01:09:10,220 --> 01:09:12,020
0,300 300,600 600,1020 1260,1410 1410,1800
it actually wrote two bites

2356
01:09:12,020 --> 01:09:13,580
0,300 300,480 480,1230
just as instructed.

2357
01:09:13,980 --> 01:09:14,790
0,300 300,360 360,510 510,690 690,810
Okay, at this point, we're

2358
01:09:14,790 --> 01:09:15,920
0,300 300,840
back in.

2359
01:09:18,800 --> 01:09:20,270
0,360 360,630 630,1050 1050,1230 1230,1470
Trap dot c and use

2360
01:09:20,270 --> 01:09:21,220
0,60 60,810
a trap.

2361
01:09:21,600 --> 01:09:24,000
0,570 930,1590 1590,2010 2010,2100 2100,2400
I'm just after the call

2362
01:09:24,000 --> 01:09:25,140
0,60 60,390 390,750 750,900 900,1140
to assist calls for now

2363
01:09:25,140 --> 01:09:26,120
0,150 150,600
with this.

2364
01:09:26,670 --> 01:09:28,050
0,390 390,780 780,1140 1140,1260 1260,1380
PR which checking if the

2365
01:09:28,050 --> 01:09:29,310
0,300 300,420 420,690 720,1110 1110,1260
funk if the process been

2366
01:09:29,310 --> 01:09:30,630
0,480 480,960 990,1110 1110,1200 1200,1320
killed because you don't want

2367
01:09:30,630 --> 01:09:31,860
0,60 60,300 300,810 810,1020 1020,1230
to resume executing have already

2368
01:09:31,860 --> 01:09:33,260
0,90 90,480 480,600 600,1110
been killed, of course.

2369
01:09:33,420 --> 01:09:34,620
0,120 120,450 450,630 630,750 750,1200
Our shells not been killed.

2370
01:09:35,790 --> 01:09:38,940
0,510 510,690 690,1260 2490,2670 2670,3150
Skip over this and then,

2371
01:09:39,060 --> 01:09:40,060
0,660
um.

2372
01:09:40,570 --> 01:09:41,770
0,300 300,360 360,690 690,1110 1110,1200
Use a trap calls a

2373
01:09:41,770 --> 01:09:44,020
0,510 510,1200 1200,1500 1500,1890 1890,2250
separate function user trap red

2374
01:09:44,050 --> 01:09:45,130
0,180 180,450 450,600 600,840 840,1080
in order to set up

2375
01:09:45,160 --> 01:09:46,270
0,300 300,420 420,870 870,1020 1020,1110
all the stuff that I

2376
01:09:46,270 --> 01:09:47,830
0,330 330,540 540,1110 1110,1470 1470,1560
talked about previously whenever I

2377
01:09:47,830 --> 01:09:49,570
0,330 480,750 750,1170 1170,1500 1500,1740
said well before entering user

2378
01:09:49,570 --> 01:09:51,310
0,570 570,660 660,960 960,1380 1380,1740
space, the kernel does blah

2379
01:09:51,310 --> 01:09:53,920
0,570 930,1470 1560,1830 1830,2220 2220,2610
blah, um, it's user trap

2380
01:09:53,920 --> 01:09:54,520
0,300
red.

2381
01:09:54,700 --> 01:09:56,830
0,300 300,1020 1020,1530 1560,1950 1950,2130
That's responsible for setting all

2382
01:09:56,830 --> 01:09:57,880
0,180 180,510 510,720
that stuff up.

2383
01:10:00,490 --> 01:10:01,090
0,240 240,330 330,390 390,480 480,600
And so we can look

2384
01:10:01,090 --> 01:10:01,930
0,90 90,240 240,330 330,630 630,840
at all the different things,

2385
01:10:01,930 --> 01:10:04,600
0,90 90,750 930,1650
it does, um.

2386
01:10:09,690 --> 01:10:10,960
0,270 270,900
It um.

2387
01:10:11,440 --> 01:10:13,870
0,660 660,1020 1020,1380 1380,2190 2280,2430
It turns interrupts off and

2388
01:10:13,870 --> 01:10:14,740
0,150 150,240 240,360 360,660 660,870
when they were turned on

2389
01:10:14,740 --> 01:10:15,460
0,120 120,180 180,570 570,660 660,720
for the duration of a

2390
01:10:15,460 --> 01:10:16,990
0,330 330,690 870,1080 1080,1320 1320,1530
system call were turned off

2391
01:10:16,990 --> 01:10:18,220
0,150 150,360 360,510 510,1110 1110,1230
now because we're about to

2392
01:10:18,220 --> 01:10:20,410
0,510 510,630 630,1170 1170,1590 1800,2190
change the St, back to

2393
01:10:20,410 --> 01:10:23,260
0,450 450,780 780,1260 1530,2550
point two z user.

2394
01:10:23,980 --> 01:10:26,380
0,540 540,1140 1530,2070 2070,2280 2280,2400
Trap handler whereas while we're

2395
01:10:26,380 --> 01:10:27,220
0,60 60,120 120,420 420,570 570,840
in the kernel was pointing

2396
01:10:27,220 --> 01:10:28,510
0,90 90,240 240,630 630,960 960,1290
to the kernel trap handler,

2397
01:10:28,780 --> 01:10:29,800
0,180 180,270 270,450 450,600 600,1020
so we turn off interest

2398
01:10:29,800 --> 01:10:31,840
0,360 420,810 810,930 930,1860 1860,2040
because once we changed as

2399
01:10:31,840 --> 01:10:32,620
0,360 360,450 450,630 630,690 690,780
TV to point to the

2400
01:10:32,620 --> 01:10:33,760
0,270 270,540 540,810 810,900 900,1140
user trap handler, we're still

2401
01:10:33,760 --> 01:10:35,380
0,420 420,510 510,570 570,1110 1230,1620
executing in the kernel, and

2402
01:10:35,410 --> 01:10:37,510
0,150 150,240 240,750 750,1350 1590,2100
if an interruption occur then

2403
01:10:37,510 --> 01:10:38,170
0,90 90,240 240,300 300,390 390,660
we go to the user

2404
01:10:38,170 --> 01:10:39,520
0,300 300,780 840,1080 1080,1200 1200,1350
trap handler, even though we're

2405
01:10:39,520 --> 01:10:40,960
0,420 420,510 510,570 570,1050 1140,1440
executing in the kernel and

2406
01:10:40,960 --> 01:10:43,630
0,90 90,630 630,1080 1080,1710 1830,2670
for various detailed reasons, um.

2407
01:10:44,060 --> 01:10:45,560
0,510 510,840 840,1140 1140,1200 1200,1500
That would cause the kernel

2408
01:10:45,560 --> 01:10:46,970
0,120 120,720 960,1170 1170,1230 1230,1410
to malfunction so we turn

2409
01:10:46,970 --> 01:10:49,250
0,180 180,1020 1170,1710 1770,2040 2040,2280
off interrupts and their left

2410
01:10:49,250 --> 01:10:50,720
0,210 210,390 390,780 780,870 870,1470
off from between the time.

2411
01:10:51,140 --> 01:10:52,160
0,300 300,390 390,600 600,810 810,1020
From the very next line

2412
01:10:52,160 --> 01:10:53,360
0,150 150,300 300,960 960,1080 1080,1200
where we set up the

2413
01:10:53,360 --> 01:10:54,950
0,390 390,810 1050,1350 1350,1530 1530,1590
St, back to point to

2414
01:10:54,950 --> 01:10:56,510
0,60 60,750 810,1350 1350,1440 1440,1560
the trampoline all the way

2415
01:10:56,510 --> 01:10:58,370
0,210 210,300 300,1200 1320,1650 1650,1860
through the final s read

2416
01:10:58,370 --> 01:11:00,050
0,750 750,930 930,1320 1320,1410 1410,1680
instruction that returns to user

2417
01:11:00,050 --> 01:11:00,860
0,660
space.

2418
01:11:01,220 --> 01:11:02,030
0,210 210,420 420,510 510,660 660,810
It turns out {that's -}

2419
01:11:02,030 --> 01:11:02,900
0,150 150,600 600,660 660,750 750,870
read instruction at the end

2420
01:11:02,900 --> 01:11:05,780
0,60 60,120 120,960 1530,2130 2340,2880
of the trampoline, um turns

2421
01:11:05,780 --> 01:11:06,940
0,390 390,630 630,840
interrupts back on.

2422
01:11:07,200 --> 01:11:08,250
0,150 150,360 360,660 660,750 750,1050
So the interrupts are on

2423
01:11:08,250 --> 01:11:09,630
0,180 180,330 330,870 870,1080 1080,1380
when we're executing in a

2424
01:11:10,650 --> 01:11:11,550
0,300 300,540 540,720 720,810 810,900
user code even though we

2425
01:11:11,550 --> 01:11:12,760
0,210 210,390 390,480 480,930
just turn them off.

2426
01:11:13,350 --> 01:11:14,850
0,390 390,630 630,870 870,990 990,1500
The next couple of lines,

2427
01:11:14,850 --> 01:11:16,890
0,360 360,900 1020,1290 1290,1680 1680,2040
fill in those trap frame

2428
01:11:16,890 --> 01:11:18,300
0,570 570,690 690,780 780,1020 1020,1410
slots that we saw before

2429
01:11:18,300 --> 01:11:20,280
0,120 120,360 360,1110 1200,1860 1860,1980
that hold various values that

2430
01:11:20,280 --> 01:11:21,540
0,60 60,960
are convenient.

2431
01:11:21,700 --> 01:11:23,260
0,210 210,330 330,420 420,1050 1050,1560
Um, for the trampoline code

2432
01:11:23,290 --> 01:11:25,040
0,420 720,1470
so, um.

2433
01:11:25,550 --> 01:11:26,570
0,240 240,450 450,570 570,930 930,1020
The code here, stash is

2434
01:11:26,570 --> 01:11:27,440
0,210 210,300 300,660 660,750 750,870
away, a pointer to the

2435
01:11:27,440 --> 01:11:30,110
0,690 960,1350 1350,1860 2490,2610 2610,2670
kernel page table in the

2436
01:11:30,110 --> 01:11:32,030
0,300 300,750 1080,1320 1320,1620 1620,1920
trap frame, its ashes away

2437
01:11:32,030 --> 01:11:34,310
0,90 90,630 630,780 780,1230 1230,2280
a pointer to this processes,

2438
01:11:34,400 --> 01:11:36,040
0,720 720,1350
kernel stack.

2439
01:11:36,940 --> 01:11:37,930
0,300 300,660 660,810 810,900 900,990
A stashed away in the

2440
01:11:37,930 --> 01:11:40,380
0,360 360,1050
trap frame.

2441
01:11:40,890 --> 01:11:42,000
0,480 480,600 600,930 930,1020 1020,1110
Um a pointer to the

2442
01:11:42,000 --> 01:11:43,290
0,300 300,600 600,960 960,1170 1170,1290
user trap function, which is

2443
01:11:43,290 --> 01:11:44,820
0,330 390,510 510,960 960,1230 1230,1530
what the trampoline code jump

2444
01:11:44,820 --> 01:11:46,050
0,270 270,360 360,450 450,750 750,1230
to at the very end.

2445
01:11:47,440 --> 01:11:48,640
0,270 270,780 780,900 900,1080 1080,1200
A mustache is away, the

2446
01:11:48,640 --> 01:11:51,370
0,420 420,840 840,1380 1890,2520 2520,2730
current core number read from

2447
01:11:51,370 --> 01:11:52,810
0,60 60,480 480,990 990,1170 1170,1440
the tepee register so that

2448
01:11:52,810 --> 01:11:53,500
0,360
the.

2449
01:11:54,220 --> 01:11:55,750
0,540 540,840 840,960 960,1140 1140,1530
Trampoline code can just restore

2450
01:11:55,750 --> 01:11:57,700
0,150 150,360 360,960 1260,1680 1680,1950
that same value because user

2451
01:11:57,700 --> 01:11:58,900
0,270 270,420 420,540 540,1050 1050,1200
code may have disturbed it.

2452
01:12:01,320 --> 01:12:04,050
0,810 960,1470 1680,2370 2370,2580 2580,2730
Question, yes, why didn't we

2453
01:12:04,050 --> 01:12:05,430
0,300 300,510 510,1230 1230,1320 1320,1380
save the CPC in the

2454
01:12:05,430 --> 01:12:06,260
0,570
trampoline.

2455
01:12:08,370 --> 01:12:09,300
0,180 180,360 360,660
It could have.

2456
01:12:11,420 --> 01:12:12,830
0,180 180,660 660,1050 1050,1320 1320,1410
Um, yeah that that the

2457
01:12:12,830 --> 01:12:14,000
0,150 150,600 600,750 750,840 840,1170
um CBC could have been

2458
01:12:14,480 --> 01:12:15,830
0,510 510,690 690,1080 1080,1260 1260,1350
trampling code happens not to

2459
01:12:15,830 --> 01:12:16,850
0,360 360,480 510,720 720,840 840,1020
save it along with other

2460
01:12:16,850 --> 01:12:19,070
0,570 960,1380 1470,1920 1920,2070 2070,2220
registers, we perfectly well could

2461
01:12:19,070 --> 01:12:20,520
0,690 690,1110
modify the.

2462
01:12:20,880 --> 01:12:22,440
0,360 360,600 600,840 900,1350 1380,1560
X six to save me

2463
01:12:22,440 --> 01:12:23,580
0,180 180,240 240,390 390,660 660,1140
where it is actually saves

2464
01:12:23,580 --> 01:12:24,500
0,180
you.

2465
01:12:24,840 --> 01:12:26,560
0,210 210,540 540,1020 1020,1560
Um, probably remember is.

2466
01:12:26,900 --> 01:12:28,040
0,270 270,570 570,720 720,1020 1020,1140
Just happened to save it

2467
01:12:28,040 --> 01:12:28,820
0,120 120,330 330,390 390,690 690,780
and use a trap and

2468
01:12:28,820 --> 01:12:29,870
0,180 180,480 480,840 840,930 930,1050
c code instead of an

2469
01:12:29,870 --> 01:12:31,000
0,390 390,870
assembly code.

2470
01:12:31,680 --> 01:12:33,040
0,150 150,210 210,660 660,1140
In the trampoline code.

2471
01:12:34,950 --> 01:12:36,450
0,480 780,870 870,1050 1050,1230 1230,1500
Um I don't think I

2472
01:12:36,450 --> 01:12:37,020
0,210 210,330 330,390 390,450 450,570
can't think of a good

2473
01:12:37,020 --> 01:12:37,860
0,240 240,360 360,510 510,630 630,840
reason to do it one

2474
01:12:37,860 --> 01:12:39,060
0,390 390,540 540,660 660,990
way or the other.

2475
01:12:40,240 --> 01:12:42,220
0,330 330,600 600,1200 1230,1560 1560,1980
The user registers really have

2476
01:12:42,220 --> 01:12:43,450
0,120 120,240 240,930 960,1140 1140,1230
to be saved in the

2477
01:12:43,450 --> 01:12:44,820
0,480 480,1110
assembly code.

2478
01:12:45,300 --> 01:12:46,590
0,390 390,600 600,900 900,1170 1170,1290
Because any c code is

2479
01:12:46,590 --> 01:12:48,030
0,690 990,1140 1140,1230 1230,1320 1320,1440
entitled for all we know

2480
01:12:48,030 --> 01:12:49,410
0,90 90,570 570,960 960,1230 1230,1380
the compiler generates code which

2481
01:12:49,410 --> 01:12:50,880
0,540 540,1080
modifies any.

2482
01:12:51,040 --> 01:12:51,820
0,510
I'm.

2483
01:12:53,180 --> 01:12:54,980
0,270 270,810 810,1020 1020,1230 1230,1800
User registers those user registers

2484
01:12:54,980 --> 01:12:56,420
0,150 720,900 900,1200 1200,1260 1260,1440
are pretty important to save

2485
01:12:56,420 --> 01:12:57,650
0,120 120,270 300,720 720,930 930,1230
them in assembly code before

2486
01:12:57,650 --> 01:12:58,960
0,270 270,690
entering c.

2487
01:12:59,160 --> 01:13:00,480
0,120 120,240 240,750 750,960 1170,1320
But the ABC we could

2488
01:13:00,480 --> 01:13:01,950
0,180 180,630 630,990 990,1140 1140,1470
have saved earlier or later.

2489
01:13:04,470 --> 01:13:05,670
0,300 300,480 480,600 600,840 840,1200
Okay, so when user trap

2490
01:13:05,670 --> 01:13:07,380
0,240 240,420 420,570 990,1650 1650,1710
red sort of preparing the

2491
01:13:07,380 --> 01:13:08,940
0,300 300,420 420,1050 1050,1230 1230,1560
trap, we prepared the trap

2492
01:13:08,940 --> 01:13:10,230
0,450 450,570 570,690 690,870 870,1290
frame with all these values

2493
01:13:10,230 --> 01:13:11,010
0,90 90,210 210,540 540,630 630,780
that are going to be

2494
01:13:11,010 --> 01:13:13,600
0,570 1170,1740 1740,2250
needed next time.

2495
01:13:13,950 --> 01:13:15,150
0,330 330,540 540,570 570,1050 1050,1200
Um, there's a transition from

2496
01:13:15,150 --> 01:13:16,740
0,210 210,450 450,540 540,1110 1170,1590
user space to kernel next

2497
01:13:16,740 --> 01:13:19,440
0,720
trap.

2498
01:13:19,760 --> 01:13:20,870
0,660 660,690 690,900 900,1050 1050,1110
There's a couple things we

2499
01:13:20,870 --> 01:13:21,680
0,90 90,390 390,510 510,600 600,810
have set up in {the's

2500
01:13:21,680 --> 01:13:23,220
0,270 270,1380
-} status.

2501
01:13:23,450 --> 01:13:26,510
0,600 600,1290 1470,2190 2490,2790 2790,3060
Control register, um, it turns

2502
01:13:26,510 --> 01:13:29,390
0,120 120,510 570,1680 1680,2220 2460,2880
out this SPP bit ines

2503
01:13:29,390 --> 01:13:32,390
0,660 690,1710 1710,2400 2430,2880 2880,3000
status controls whether controls the

2504
01:13:32,390 --> 01:13:34,440
0,960 990,1380
mode that.

2505
01:13:34,530 --> 01:13:36,360
0,390 390,810 840,1380 1380,1710 1710,1830
S red return student by

2506
01:13:36,360 --> 01:13:37,680
0,450 450,570 570,690 690,870 870,1320
clearing it we're just saying

2507
01:13:37,770 --> 01:13:39,750
0,480 480,690 690,840 840,990 1440,1980
look next time you execute.

2508
01:13:40,120 --> 01:13:41,440
0,300 300,690 780,1110 1110,1260 1260,1320
S read, we want to

2509
01:13:41,440 --> 01:13:42,640
0,60 60,180 180,540 540,840 840,1200
go to user mode instead

2510
01:13:42,640 --> 01:13:44,980
0,90 90,810 810,1200 1650,2100 2160,2340
of supervisor mode a and

2511
01:13:44,980 --> 01:13:45,790
0,270 270,480 480,690 690,810 810,810
this S P I E

2512
01:13:45,790 --> 01:13:48,080
0,570 840,1470 1470,1950
bit controls whether.

2513
01:13:48,620 --> 01:13:51,620
0,390 390,510 510,630 630,1500 2670,3000
Interrupts will be enabled after

2514
01:13:51,620 --> 01:13:53,240
0,120 120,540 540,780 780,990 1230,1620
we {execute's -} red and

2515
01:13:53,360 --> 01:13:54,470
0,390 390,720 720,810 810,930 930,1110
then after we get into

2516
01:13:54,470 --> 01:13:55,760
0,270 270,810 810,990 990,1110 1110,1290
user space, and we do

2517
01:13:55,760 --> 01:13:56,780
0,210 210,330 330,390 390,480 480,1020
want them to be enabled

2518
01:13:56,780 --> 01:13:57,540
0,480
so.

2519
01:13:57,700 --> 01:13:58,810
0,240 240,540 540,720 720,930 930,1110
Gonna set that S P

2520
01:13:58,810 --> 01:13:59,950
0,180 180,180 180,510 840,1080 1080,1140
I E B and I'm

2521
01:13:59,950 --> 01:14:00,760
0,150 150,240 240,480 480,720 720,810
going to write this new

2522
01:14:00,760 --> 01:14:02,500
0,600 600,1110 1110,1260 1260,1380 1380,1740
modified status into the actual

2523
01:14:02,500 --> 01:14:05,000
0,570 930,1380 1380,1860
hardware status register.

2524
01:14:05,100 --> 01:14:06,040
0,570
I'm.

2525
01:14:06,590 --> 01:14:07,550
0,210 210,420 420,510 510,750 750,960
It turns out {what's -}

2526
01:14:07,550 --> 01:14:09,380
0,300 300,990
rhett does.

2527
01:14:10,450 --> 01:14:11,200
0,120 120,210 210,300 300,660 660,750
You know the asteroid we're

2528
01:14:11,200 --> 01:14:12,010
0,120 120,510 510,690 690,750 750,810
gonna execute right at the

2529
01:14:12,010 --> 01:14:13,120
0,90 90,150 150,210 210,690 690,1110
end of the trampoline code,

2530
01:14:13,120 --> 01:14:14,440
0,120 120,300 300,480 480,630 630,1320
what that s right does

2531
01:14:14,470 --> 01:14:16,240
0,330 330,810 870,1260 1260,1380 1380,1770
is, um sets the program

2532
01:14:16,240 --> 01:14:17,740
0,330 330,690 690,900 1020,1260 1260,1500
counter equal to the s

2533
01:14:17,740 --> 01:14:20,380
0,750 750,1380 2160,2370 2370,2460 2460,2640
epc register, so we're now

2534
01:14:20,380 --> 01:14:21,250
0,120 120,210 210,450 450,570 570,870
going to set up the

2535
01:14:21,250 --> 01:14:23,440
0,720 720,1260 1260,1350 1350,1800 2040,2190
CPC register to have the

2536
01:14:23,440 --> 01:14:25,140
0,570 570,1290
saved user.

2537
01:14:25,300 --> 01:14:26,460
0,390 390,870
Program counter.

2538
01:14:27,170 --> 01:14:28,430
0,210 210,510 510,690 690,780 780,1260
Um, which, if you recall

2539
01:14:28,430 --> 01:14:30,350
0,330 540,1170 1170,1620 1620,1680 1680,1920
we recently saved the trap

2540
01:14:30,350 --> 01:14:31,880
0,330 420,630 630,810 810,1080 1080,1530
frame, that's what's happening here.

2541
01:14:33,480 --> 01:14:35,160
0,480 600,960 960,1290 1290,1560 1560,1680
Um, you remember also the

2542
01:14:35,160 --> 01:14:37,110
0,300 300,1080 1230,1530 1530,1890 1890,1950
trap frame a contain a

2543
01:14:37,110 --> 01:14:38,760
0,480 480,1290
pointer to.

2544
01:14:39,520 --> 01:14:41,410
0,360 360,720 720,1080 1080,1440 1440,1890
A kernel page table because

2545
01:14:41,440 --> 01:14:42,430
0,90 90,450 450,630 630,690 690,990
the trampoline needs to switch

2546
01:14:42,430 --> 01:14:43,960
0,150 150,360 810,1110 1110,1410 1410,1530
to it, um, we need

2547
01:14:43,960 --> 01:14:45,610
0,90 90,390 390,660 660,870 870,1650
to cook up the special

2548
01:14:45,610 --> 01:14:46,540
0,180 180,600 600,690 690,810 810,930
bit pattern that you need

2549
01:14:46,540 --> 01:14:48,010
0,120 120,390 390,480 480,660 660,1470
to write to s ATP

2550
01:14:48,130 --> 01:14:49,600
0,300 300,480 480,1020
has done here.

2551
01:14:50,290 --> 01:14:52,300
0,870
And.

2552
01:14:52,740 --> 01:14:55,020
0,210 210,600 900,1200 1230,1620 1620,2280
I'm sorry, we're now preparing

2553
01:14:55,020 --> 01:14:56,250
0,120 120,510 510,630 630,750 750,1230
a pointer to the user

2554
01:14:56,250 --> 01:14:57,460
0,360 360,960
page table.

2555
01:14:57,950 --> 01:14:58,970
0,210 210,330 330,510 510,600 600,1020
Which we need to switch

2556
01:14:58,970 --> 01:14:59,840
0,270 270,390 390,480 480,690 690,870
to on the way into

2557
01:14:59,840 --> 01:15:01,040
0,270 270,1050
user space.

2558
01:15:02,350 --> 01:15:03,490
0,390 390,780 780,930 930,990 990,1140
We're actually going to do

2559
01:15:03,490 --> 01:15:05,290
0,180 180,600 600,780 780,1230 1230,1800
that switch in assembly code

2560
01:15:05,320 --> 01:15:06,430
0,360 360,420 420,630 630,720 720,1110
because it has to happen

2561
01:15:06,490 --> 01:15:08,800
0,180 180,240 240,1230 1470,1950 1950,2310
in the trampoline, because only

2562
01:15:08,800 --> 01:15:10,000
0,330 330,420 420,480 480,1080 1080,1200
code in the trampoline is

2563
01:15:10,000 --> 01:15:10,990
0,300 300,390 390,660 660,900 900,990
mapped in both user and

2564
01:15:10,990 --> 01:15:12,820
0,330 330,990 1380,1620 1620,1710 1710,1830
kernel space, so we can

2565
01:15:12,820 --> 01:15:13,920
0,270 270,840
only really.

2566
01:15:14,280 --> 01:15:15,840
0,360 360,630 630,960 960,1110 1110,1560
Switch page tables, we're executing

2567
01:15:15,840 --> 01:15:16,770
0,60 60,120 120,690 690,840 840,930
on the trampoline but we're

2568
01:15:16,770 --> 01:15:18,180
0,330 330,780 780,840 840,900 900,1410
not executing on the trampoline,

2569
01:15:18,180 --> 01:15:19,560
0,270 540,900 900,1110 1110,1290 1290,1380
yet we're still just in

2570
01:15:19,560 --> 01:15:20,760
0,120 120,480 480,720 720,1050 1050,1200
an ordinary c function, so

2571
01:15:20,760 --> 01:15:22,980
0,120 120,540 540,690 690,1260 1860,2220
we prepared this pointer and

2572
01:15:22,980 --> 01:15:23,970
0,90 90,210 210,300 300,810 810,990
we're going to pass it

2573
01:15:23,970 --> 01:15:25,530
0,90 90,180 180,600 600,1140 1230,1560
to the assembly code as

2574
01:15:25,530 --> 01:15:26,730
0,90 90,420 420,930 930,1050 1050,1200
the second argument in a

2575
01:15:26,730 --> 01:15:27,500
0,510
one.

2576
01:15:28,250 --> 01:15:31,520
0,420 2040,2520 2550,2820 2820,3030 3030,3270
Um, um, with this line

2577
01:15:31,520 --> 01:15:33,080
0,210 210,510 510,630 630,840 840,1560
here doing is just calculating

2578
01:15:33,080 --> 01:15:34,610
0,150 150,930 930,1140 1140,1410 1410,1530
the address of where we

2579
01:15:34,610 --> 01:15:36,420
0,150 150,270 270,660 660,1290
want to jump to.

2580
01:15:36,600 --> 01:15:37,110
0,150 150,270 270,390 390,450 450,510
At the end of the

2581
01:15:37,110 --> 01:15:38,820
0,540 540,900 900,1020 1020,1140 1170,1710
trampoline code and it turns

2582
01:15:38,820 --> 01:15:39,480
0,360
out.

2583
01:15:40,110 --> 01:15:41,100
0,330 330,750
There's a.

2584
01:15:41,600 --> 01:15:42,680
0,210 210,720 720,870 870,930 930,1080
That we want to go

2585
01:15:42,680 --> 01:15:43,880
0,150 150,540 540,780 780,990 990,1200
with user read user, that's

2586
01:15:43,880 --> 01:15:45,530
0,90 90,600 600,720 720,870 870,1650
the address of the instructions

2587
01:15:45,530 --> 01:15:46,280
0,120 120,210 210,450 450,540 540,750
that will take us back

2588
01:15:46,280 --> 01:15:48,050
0,60 60,300 300,840 1170,1590 1590,1770
to user space and this

2589
01:15:48,050 --> 01:15:51,020
0,210 210,1020 1050,1680 1680,2250 2280,2970
little formula works out, um.

2590
01:15:52,500 --> 01:15:55,140
0,510 570,1020 1020,1440 1830,2310 2310,2640
The address the virtual address

2591
01:15:55,140 --> 01:15:57,240
0,60 60,120 120,960 1170,1440 1440,2100
in the trampoline that corresponds

2592
01:15:57,240 --> 01:15:58,440
0,90 90,270 270,540 540,750 750,1200
to that user ret function.

2593
01:16:02,980 --> 01:16:03,920
0,750
Oops.

2594
01:16:05,930 --> 01:16:07,190
0,420 420,540 540,630 630,1170 1170,1260
Okay, so we calculate the

2595
01:16:07,190 --> 01:16:08,220
0,300 300,390 390,720
address of that.

2596
01:16:09,640 --> 01:16:11,320
0,270 270,480 480,1050 1110,1380 1380,1680
Use red function, and then

2597
01:16:11,350 --> 01:16:13,540
0,390 390,1170 1200,1410 1410,1710 1710,2190
this mess, this next line.

2598
01:16:14,030 --> 01:16:17,690
0,780 780,1290 1290,1500 1500,2280 3210,3660
Call uses this fn variable

2599
01:16:17,690 --> 01:16:18,890
0,150 150,210 210,630 630,1050 1050,1200
as a function pointer and

2600
01:16:18,890 --> 01:16:20,390
0,360 360,420 420,660 660,1230 1230,1500
jumps to that function with

2601
01:16:20,390 --> 01:16:22,400
0,360 360,630 630,1590 1650,1860 1860,2010
these two arguments in a

2602
01:16:22,400 --> 01:16:23,960
0,360 360,450 450,1020
zero a one.

2603
01:16:24,240 --> 01:16:24,960
0,180 180,240 240,330 330,480 480,720
And we can now just

2604
01:16:24,960 --> 01:16:26,220
0,270 270,990
go to.

2605
01:16:28,720 --> 01:16:30,180
0,570 570,1230
Trampoline code.

2606
01:16:30,880 --> 01:16:32,300
0,690
I'm.

2607
01:16:33,790 --> 01:16:36,850
0,120 120,660 660,1020 1020,1500 2430,3060
The trampoline code, there's a.

2608
01:16:38,820 --> 01:16:39,510
0,120 120,330 330,420 420,600 600,690
Well first we switch to

2609
01:16:39,510 --> 01:16:40,410
0,60 60,270 270,510 510,840 840,900
the user page tables, I

2610
01:16:40,410 --> 01:16:41,580
0,210 210,450 450,870 870,1080 1080,1170
mean actually execute this and

2611
01:16:41,580 --> 01:16:42,390
0,90 90,210 210,450 450,540 540,810
we can see the page

2612
01:16:42,390 --> 01:16:44,700
0,360 360,960 1080,1440 1440,1560 1560,2310
tables change, just for chuckles,

2613
01:16:44,820 --> 01:16:45,960
0,330 330,540 540,810 810,1020 1020,1140
um, we're still using the

2614
01:16:45,960 --> 01:16:48,000
0,420 420,690 690,990 990,1530
giant kernel page table.

2615
01:16:48,400 --> 01:16:49,580
0,780
I'm.

2616
01:16:50,750 --> 01:16:51,860
0,180 180,360 360,570 570,840 840,1110
I'm gonna run through user

2617
01:16:51,860 --> 01:16:53,600
0,360 360,540 540,1200 1230,1650 1650,1740
trap rat quickly until we

2618
01:16:53,600 --> 01:16:54,170
0,90 90,150 150,240 240,420 420,570
get to the point where

2619
01:16:54,170 --> 01:16:55,580
0,90 90,510 510,570 570,660 660,1410
it jumps to the trampoline.

2620
01:16:57,240 --> 01:16:58,560
0,870
I'm.

2621
01:16:59,200 --> 01:17:00,280
0,270 270,360 360,420 420,510 510,1080
Alright we're in the trampoline.

2622
01:17:01,380 --> 01:17:02,340
0,690
I'm.

2623
01:17:07,350 --> 01:17:08,820
0,240 240,840 840,1140 1140,1410 1410,1470
These instructions are about to

2624
01:17:08,820 --> 01:17:10,320
0,210 210,630 630,690 690,1170 1170,1500
start executing the trampoline code

2625
01:17:10,320 --> 01:17:11,100
0,150 150,360 360,540 540,630 630,780
there right here, we can

2626
01:17:11,100 --> 01:17:14,140
0,480 780,1770 2040,2760
now, um again.

2627
01:17:14,270 --> 01:17:16,160
0,300 300,750 840,1140 1140,1410 1410,1890
Um, what's printed page table

2628
01:17:16,310 --> 01:17:17,210
0,120 120,330 330,420 420,660 660,900
is still the kernel page

2629
01:17:17,210 --> 01:17:19,240
0,390 1350,1740
table, um.

2630
01:17:20,080 --> 01:17:21,070
0,450 450,630 630,720 720,840 840,990
The first thing that's gonna

2631
01:17:21,070 --> 01:17:22,210
0,300 300,480 480,720 720,930 930,1140
happen here though is that

2632
01:17:22,210 --> 01:17:23,650
0,480 510,990 990,1200 1200,1290 1290,1440
the trampoline code is going

2633
01:17:23,650 --> 01:17:25,040
0,120 120,630 630,1110
to load z.

2634
01:17:25,070 --> 01:17:26,150
0,300 300,570 570,660 660,750 750,1080
That pointer to the user

2635
01:17:26,150 --> 01:17:28,070
0,330 330,900 1200,1590 1620,1830 1830,1920
page table, um into the

2636
01:17:28,070 --> 01:17:29,380
0,420 420,990
sappy register.

2637
01:17:30,000 --> 01:17:31,140
0,270 300,480 480,570 570,840 840,1140
Um, so we switch page

2638
01:17:31,140 --> 01:17:32,280
0,600 600,660 660,900 900,990 990,1140
tables I typed in from

2639
01:17:32,280 --> 01:17:33,360
0,180 180,810
them now.

2640
01:17:33,500 --> 01:17:34,190
0,120 120,240 240,330 330,330 330,690
We now have a much

2641
01:17:34,190 --> 01:17:35,690
0,480 480,720 720,990 990,1320 1320,1500
smaller user page table, but

2642
01:17:35,960 --> 01:17:37,880
0,570 810,1290 1290,1410 1410,1470 1470,1920
luckily still with the trampoline

2643
01:17:37,880 --> 01:17:38,930
0,270 270,540 540,750 750,840 840,1050
page map, so we don't

2644
01:17:38,930 --> 01:17:40,460
0,570 570,690 690,750 750,990 990,1530
crash on the next instruction.

2645
01:17:41,790 --> 01:17:44,310
0,390 1080,1710 1710,1920 1920,2070 2070,2520
Um the next thing happens,

2646
01:17:44,310 --> 01:17:45,720
0,150 150,480 480,1050
is this a.

2647
01:17:47,090 --> 01:17:50,540
0,960 1320,1920 2670,3060 3060,3390 3390,3450
Um the I showed you

2648
01:17:50,540 --> 01:17:51,980
0,90 90,330 330,540 540,960 990,1440
a while ago the second

2649
01:17:51,980 --> 01:17:53,870
0,450 450,780 780,960 960,1440 1470,1890
last thing that this sequence

2650
01:17:53,870 --> 01:17:54,710
0,60 60,360 360,690 690,780 780,840
of code does on the

2651
01:17:54,710 --> 01:17:57,230
0,120 120,180 180,480 480,1200 1230,2520
way to user spaces swaps

2652
01:17:57,230 --> 01:17:59,120
0,420 420,570 570,1260 1470,1770 1770,1890
scratch with zero so we

2653
01:17:59,120 --> 01:18:00,470
0,180 180,270 270,600 600,750 750,1350
need to {setup's -} scratch,

2654
01:18:00,500 --> 01:18:02,450
0,240 240,960 960,1410 1410,1560 1560,1950
it's saved user a zero

2655
01:18:02,450 --> 01:18:03,110
0,150 150,240 240,420 420,540 540,660
so that when we do

2656
01:18:03,110 --> 01:18:04,600
0,210 210,840
that swap.

2657
01:18:04,690 --> 01:18:05,800
0,300 300,570 570,750 750,870 870,1110
Asia will end up having

2658
01:18:05,800 --> 01:18:08,230
0,630 930,1320 1320,1710 1740,2100 2100,2430
received user Asia turns out

2659
01:18:08,260 --> 01:18:09,300
0,510
easier.

2660
01:18:09,470 --> 01:18:10,640
0,300 300,390 390,480 480,810 810,1170
Pointer to the trap frame

2661
01:18:10,640 --> 01:18:12,860
0,510 960,1230 1230,1500 1500,1800 1800,2220
because the c code pass

2662
01:18:12,860 --> 01:18:14,150
0,270 270,420 420,510 510,780 780,1290
that is the first argument

2663
01:18:14,390 --> 01:18:16,310
0,360 360,960 960,1350 1350,1740 1740,1920
one twelve a zero is

2664
01:18:16,310 --> 01:18:17,690
0,300 360,810 810,900 900,990 990,1380
the address of the saved

2665
01:18:17,690 --> 01:18:19,310
0,90 90,720 1110,1290 1290,1350 1350,1620
a zero in the track

2666
01:18:19,310 --> 01:18:20,540
0,390 390,540 540,600 600,870 870,1230
frames going to load that.

2667
01:18:21,170 --> 01:18:22,340
0,180 180,420 420,660 660,810 810,1170
And then into t zero

2668
01:18:22,340 --> 01:18:23,330
0,90 90,270 270,540 540,780 780,990
and then load that into

2669
01:18:23,330 --> 01:18:24,420
0,120 120,930
a scratch.

2670
01:18:24,630 --> 01:18:25,440
0,150 150,300 300,480 480,570 570,810
At this point, we're still

2671
01:18:25,440 --> 01:18:26,380
0,240 240,630
running with.

2672
01:18:26,940 --> 01:18:28,560
0,540 540,960 960,1080 1080,1290 1290,1620
Kernel stuff and all the.

2673
01:18:29,260 --> 01:18:30,400
0,840
Registers.

2674
01:18:31,230 --> 01:18:33,120
0,240 240,480 480,810 810,1440 1440,1890
The next 32 instructions, though

2675
01:18:33,300 --> 01:18:34,980
0,930 930,1170 1170,1260 1260,1320 1320,1680
load out of the trap

2676
01:18:34,980 --> 01:18:36,390
0,360 360,690 720,960 960,1110 1110,1410
frame which is a points

2677
01:18:36,390 --> 01:18:38,520
0,330 690,1470 1470,1770 1770,1860 1860,2130
to load all of the

2678
01:18:38,520 --> 01:18:40,800
0,600 600,870 870,1740 1950,2220 2220,2280
saved user registers out of

2679
01:18:40,800 --> 01:18:41,980
0,60 60,360 360,930
the trap frame.

2680
01:18:43,390 --> 01:18:46,570
0,780 1710,2070 2070,2160 2160,2520 2520,3180
I'm into the actual registers

2681
01:18:46,570 --> 01:18:48,010
0,390 390,780 780,1170 1170,1290 1290,1440
were really close to being

2682
01:18:48,010 --> 01:18:49,390
0,210 210,630 900,1080 1080,1290 1290,1380
able to the point where

2683
01:18:49,390 --> 01:18:50,470
0,120 120,240 240,450 450,690 690,1080
we can run user code,

2684
01:18:50,500 --> 01:18:51,550
0,180 180,360 360,420 420,810 810,1050
I'm going to skip over

2685
01:18:51,550 --> 01:18:53,800
0,90 90,270 270,990 1500,2010
all these loads, um.

2686
01:18:56,140 --> 01:18:57,700
0,180 180,750 750,1050 1050,1260 1260,1560
Any questions before we um.

2687
01:18:58,790 --> 01:19:00,440
0,300 300,660 660,720 720,990 990,1650
Approach closer to user space.

2688
01:19:02,440 --> 01:19:04,000
0,180 180,390 390,630 630,1200 1260,1560
And one quick question, a

2689
01:19:04,000 --> 01:19:05,500
0,150 150,240 240,690 690,1230 1320,1500
is the value in the

2690
01:19:05,500 --> 01:19:06,910
0,330 330,600 600,840 840,1140 1140,1410
trap frame is zero, now

2691
01:19:06,910 --> 01:19:08,410
0,300 360,930 930,1260 1260,1320 1320,1500
the return value of that

2692
01:19:08,410 --> 01:19:09,460
0,330 330,570 570,660 660,780 780,1050
system call that we made.

2693
01:19:11,330 --> 01:19:12,880
0,1170
I'm.

2694
01:19:14,800 --> 01:19:16,840
0,510 1050,1200 1200,1320 1320,1650 1650,2040
Yeah yeah, the relay zero

2695
01:19:16,840 --> 01:19:18,520
0,810 810,1200 1200,1560 1560,1620 1620,1680
holds this point of the

2696
01:19:18,520 --> 01:19:19,940
0,270 270,570 570,750 750,1110
trap frame, but the.

2697
01:19:20,350 --> 01:19:22,420
0,390 390,570 570,1320 1320,1620 1620,2070
After we execute the well.

2698
01:19:24,480 --> 01:19:27,000
0,510 510,870 900,1170 1170,1770 1770,2520
S OK the current location

2699
01:19:27,000 --> 01:19:28,640
0,90 90,210 210,630 630,1440
of the user's saved.

2700
01:19:29,120 --> 01:19:31,760
0,660 1680,1980 1980,2070 2070,2310 2310,2640
Um, yes I was calling

2701
01:19:31,760 --> 01:19:32,750
0,120 120,240 240,540 540,870 870,990
at the user saved a

2702
01:19:32,750 --> 01:19:33,950
0,270 270,390 390,450 450,960 1080,1200
zero but in fact the

2703
01:19:33,950 --> 01:19:36,200
0,420 420,900 900,1380 1380,1590 1590,2250
system call returns stuff overrode

2704
01:19:36,200 --> 01:19:36,760
0,270
it.

2705
01:19:36,830 --> 01:19:38,090
0,180 180,270 270,720 720,1080 1080,1260
With the return value that

2706
01:19:38,090 --> 01:19:39,920
0,180 180,810 1200,1350 1350,1710 1710,1830
we want the shell to

2707
01:19:39,920 --> 01:19:41,720
0,240 240,360 360,540 540,1020 1620,1800
sea in a zero so

2708
01:19:41,720 --> 01:19:42,860
0,90 90,360 360,780 780,870 870,1140
the current location of that

2709
01:19:42,860 --> 01:19:44,330
0,300 300,510 510,720 720,1320 1320,1470
acer which we overwrote with

2710
01:19:44,330 --> 01:19:45,240
0,660
too.

2711
01:19:45,780 --> 01:19:47,040
0,180 180,270 270,630 630,1020 1020,1260
As the return value is

2712
01:19:47,040 --> 01:19:48,870
0,150 150,750 750,1260 1260,1710 1710,1830
s scratched appoints scratch and

2713
01:19:48,870 --> 01:19:49,800
0,390 390,510 510,630 630,840 840,930
hope that it's equal to

2714
01:19:49,800 --> 01:19:50,500
0,360
two.

2715
01:19:51,160 --> 01:19:53,380
0,300 300,450 450,660 660,990 1680,2220
It is equal to a.

2716
01:19:55,980 --> 01:19:56,970
0,90 90,240 240,420 420,510 510,990
Does that answer your question.

2717
01:19:57,960 --> 01:19:59,400
0,300 300,390 390,510 510,780 930,1440
Yes I think so okay

2718
01:19:59,460 --> 01:20:01,350
0,270 270,720 720,720 1380,1680 1680,1890
I'm gonna um skip over

2719
01:20:01,350 --> 01:20:03,940
0,150 150,360 360,1260 1410,2310
all these loads restore.

2720
01:20:04,180 --> 01:20:05,410
0,150 150,450 450,660 660,1110 1110,1230
To save user values out

2721
01:20:05,410 --> 01:20:06,190
0,60 60,120 120,450 450,660 660,780
of the trap frame into

2722
01:20:06,190 --> 01:20:08,620
0,90 90,810 1200,1740 2190,2370 2370,2430
the registers, I'm going to

2723
01:20:08,650 --> 01:20:09,580
0,180 180,330 330,420 420,870 870,930
turn out the registers at

2724
01:20:09,580 --> 01:20:10,940
0,150 150,510
this point.

2725
01:20:11,180 --> 01:20:13,260
0,900 1080,1500 1500,1710
I'm actually not.

2726
01:20:15,550 --> 01:20:15,860
0,60
Yeah.

2727
01:20:16,620 --> 01:20:18,210
0,300 300,390 390,990 1140,1500 1500,1590
Print the registers I don't

2728
01:20:18,210 --> 01:20:19,080
0,60 60,120 120,270 270,420 420,870
know if these look familiar

2729
01:20:19,080 --> 01:20:20,280
0,150 150,270 270,630 630,690 690,1200
but they happen to be

2730
01:20:20,460 --> 01:20:21,480
0,120 120,570 570,720 720,780 780,1020
the same set of user

2731
01:20:21,480 --> 01:20:22,800
0,510 510,570 570,810 810,1080 1080,1320
registers you saw way back

2732
01:20:22,800 --> 01:20:23,640
0,60 60,150 150,570 570,660 660,840
at the beginning of this

2733
01:20:23,640 --> 01:20:26,760
0,810 990,1380 1380,1860 2010,2280 2280,3120
exercise, for example a one.

2734
01:20:27,260 --> 01:20:29,060
0,330 330,420 420,750 750,1290 1590,1800
Or the stack pointer holds

2735
01:20:29,060 --> 01:20:30,590
0,150 150,510 510,900 900,1410 1410,1530
this small value appropriate for

2736
01:20:30,590 --> 01:20:31,550
0,90 90,360 360,690 690,870 870,960
a user stack low in

2737
01:20:31,550 --> 01:20:32,460
0,600
memory.

2738
01:20:32,860 --> 01:20:34,090
0,270 270,600 600,750 750,930 930,1230
A one is that buffer

2739
01:20:34,090 --> 01:20:36,190
0,420 420,600 900,1200 1200,1560 1560,2100
pointer that we passed right

2740
01:20:36,520 --> 01:20:37,660
0,450 450,600 600,780 780,1080 1080,1140
to is that number of

2741
01:20:37,660 --> 01:20:39,640
0,600 870,1500 1500,1800 1800,1890 1890,1980
bytes, a0, however is the

2742
01:20:39,640 --> 01:20:41,480
0,480 480,930 960,1620
exception is not.

2743
01:20:42,500 --> 01:20:44,570
0,840 930,1260 1260,1710 1710,2010 2010,2070
Received user value because it

2744
01:20:44,570 --> 01:20:45,590
0,270 270,450 450,540 540,840 840,1020
still has the pointer or

2745
01:20:45,590 --> 01:20:48,620
0,360 360,570 570,870
trap three minute.

2746
01:20:49,100 --> 01:20:50,000
0,270 270,450 450,570 570,690 690,900
But let's look we're about

2747
01:20:50,000 --> 01:20:51,040
0,90 90,780
to execute.

2748
01:20:52,830 --> 01:20:55,440
0,540 990,1500 1500,1920 1920,2070 2070,2610
A rather execute is this.

2749
01:20:55,810 --> 01:20:57,460
0,510 510,720 720,1410
C S R.

2750
01:20:58,090 --> 01:20:59,800
0,360 360,780 780,1230 1230,1620 1620,1710
{R,W} a0 scratch right at

2751
01:20:59,800 --> 01:21:02,200
0,150 150,570 570,1050 1380,2160 2160,2400
the end of trampoline just

2752
01:21:02,200 --> 01:21:03,400
0,240 240,630 630,690 690,930 930,1200
before returning to user space

2753
01:21:03,400 --> 01:21:04,630
0,120 120,270 270,330 330,750 750,1230
is going to swap a0

2754
01:21:04,630 --> 01:21:07,360
0,90 90,810 1650,2550
and scratch scratch.

2755
01:21:07,320 --> 01:21:08,600
0,450 450,1140
Li has.

2756
01:21:12,680 --> 01:21:16,160
0,540 570,840 840,1560
Um, that's scratch.

2757
01:21:16,640 --> 01:21:17,600
0,300 300,540 540,720 720,840 840,960
As to which is going

2758
01:21:17,600 --> 01:21:18,710
0,60 60,150 150,240 240,570 570,1110
to be the return value

2759
01:21:18,860 --> 01:21:20,660
0,870 870,1080 1080,1590
a0 as this.

2760
01:21:21,130 --> 01:21:23,110
0,630 840,1260 1260,1350 1350,1560 1560,1980
Kernel pointer, and it points

2761
01:21:23,110 --> 01:21:25,960
0,330
to.

2762
01:21:26,620 --> 01:21:27,580
0,360 360,420 420,480 480,780 780,960
Point to the trap frame,

2763
01:21:27,580 --> 01:21:29,680
0,210 210,600 600,1170 1170,1290 1290,2100
but after executing the CSRC

2764
01:21:29,680 --> 01:21:31,420
0,420 420,870 870,990 990,1380 1380,1740
w instruction to swap them,

2765
01:21:31,450 --> 01:21:34,780
0,660 660,780 780,1110 1110,1410 2310,3330
hopefully we'll see that a0

2766
01:21:34,840 --> 01:21:35,920
0,300 300,450 450,720 720,990 990,1080
holds this return value of

2767
01:21:35,920 --> 01:21:37,840
0,540 900,1590
two and.

2768
01:21:39,390 --> 01:21:42,210
0,270 270,1680 1710,2280 2280,2340 2340,2820
S scratch holds a pointer

2769
01:21:42,210 --> 01:21:43,320
0,90 90,180 180,570 570,930 930,1110
to the trap frame which

2770
01:21:43,320 --> 01:21:45,510
0,510 1020,1110 1110,1590 1590,1920 1920,2190
is the second last page

2771
01:21:45,510 --> 01:21:48,390
0,90 90,600 990,1650 1950,2130 2130,2880
in memory, um, and that

2772
01:21:48,390 --> 01:21:49,050
0,210 210,270 270,390 390,450 450,660
value is going to stay

2773
01:21:49,050 --> 01:21:50,040
0,90 90,180 180,630 630,900 900,990
in a scratch until the

2774
01:21:50,040 --> 01:21:52,050
0,630 630,1110 1110,1320 1320,1560 1560,2010
user program does another trap

2775
01:21:52,050 --> 01:21:53,300
0,120 120,180 180,390 390,990
and at that point.

2776
01:21:53,560 --> 01:21:54,730
0,210 210,540 540,870 870,1080 1080,1170
The trap handling code, we

2777
01:21:54,730 --> 01:21:56,140
0,210 210,390 390,780 780,1080 1170,1410
talked about before we won't

2778
01:21:56,140 --> 01:21:56,800
0,60 60,210 210,330 330,570 570,660
be able to use a

2779
01:21:56,800 --> 01:21:58,270
0,630 630,810 810,900 900,1170 1170,1470
scratched at the trap frame.

2780
01:21:59,080 --> 01:22:00,400
0,270 270,360 360,1080
Alright, we're still.

2781
01:22:01,370 --> 01:22:03,050
0,210 210,360 360,420 420,930 1320,1680
A in the kernel that

2782
01:22:03,440 --> 01:22:04,550
0,210 210,330 330,600 600,1050 1050,1110
is our last instruction in

2783
01:22:04,550 --> 01:22:06,980
0,60 60,510 1380,1950 2070,2280 2280,2430
the colonel, um, and when

2784
01:22:06,980 --> 01:22:08,240
0,120 120,510 510,690 690,900 900,1260
I execute this s ret.

2785
01:22:09,280 --> 01:22:11,290
0,360 360,750 750,1320 1530,1920 1920,2010
It will a switch to

2786
01:22:11,290 --> 01:22:13,960
0,270 270,1050 1260,1980 2160,2610 2610,2670
user mode, um, before I

2787
01:22:13,960 --> 01:22:14,950
0,120 120,300 300,510 510,660 660,990
do that let's look at.

2788
01:22:17,300 --> 01:22:19,100
0,480 510,930 930,1200 1200,1410 1410,1800
It'll switch user mode, it'll

2789
01:22:19,130 --> 01:22:21,260
0,660 660,1050 1050,1470 1470,1650 1650,2130
copy se PC to PC

2790
01:22:21,260 --> 01:22:22,820
0,210 210,300 300,1200
because we're still.

2791
01:22:27,060 --> 01:22:28,140
0,180 180,480 480,930 930,1020 1020,1080
We're still executing with the

2792
01:22:28,140 --> 01:22:30,330
0,480 480,840 870,1050 1050,1320 1350,2190
PC that's in the trampoline,

2793
01:22:30,510 --> 01:22:32,820
0,510 570,900 900,1020 1020,1350 1710,2310
so {Esther's -} gonna switch

2794
01:22:32,820 --> 01:22:34,290
0,90 90,360 360,780 780,1170 1170,1470
the user mode copy se

2795
01:22:34,290 --> 01:22:36,320
0,600 600,840 840,1710
PC to PC.

2796
01:22:36,350 --> 01:22:39,110
0,660 1620,1770 1770,1860 1860,2130 2130,2760
Um, and then resume executing

2797
01:22:39,530 --> 01:22:41,150
0,150 150,210 210,690 930,1410 1410,1620
so I'm gonna run the

2798
01:22:41,150 --> 01:22:42,160
0,270 270,660
s rat.

2799
01:22:42,480 --> 01:22:46,200
0,750 990,1770 2520,3240 3240,3360 3360,3720
Boom, I'm now we're back

2800
01:22:46,200 --> 01:22:47,080
0,660
at.

2801
01:22:48,640 --> 01:22:49,810
0,270 270,420 420,720 720,960 960,1170
I could address zero X

2802
01:22:49,810 --> 01:22:50,860
0,180 180,360 360,750 750,930 930,1050
D E A which is

2803
01:22:50,860 --> 01:22:52,960
0,180 210,570 570,1200 1350,1950 1950,2100
a low address likely be

2804
01:22:52,960 --> 01:22:54,820
0,240 240,780 930,1380 1380,1590 1590,1860
user memory, um, and it's

2805
01:22:54,820 --> 01:22:55,600
0,420
the.

2806
01:22:55,980 --> 01:22:57,150
0,420 420,660 660,780 780,960 960,1170
Look back in S H

2807
01:22:57,150 --> 01:22:58,890
0,210 210,330 330,510 510,960 1470,1740
dot A S M and

2808
01:22:58,890 --> 01:23:01,300
0,720 720,930 930,2070
address your sda.

2809
01:23:01,880 --> 01:23:03,120
0,990
I'm.

2810
01:23:03,970 --> 01:23:06,400
0,300 300,1200 1560,1740 1740,2190 2190,2430
Is indeed the address of

2811
01:23:06,400 --> 01:23:07,570
0,90 90,480 480,900 900,1050 1050,1170
the return function at the

2812
01:23:07,570 --> 01:23:08,600
0,150 150,240 240,720
end of right.

2813
01:23:09,870 --> 01:23:10,920
0,780
And.

2814
01:23:12,670 --> 01:23:14,080
0,360 360,540 540,930 930,1050 1050,1410
A eight zero is this

2815
01:23:14,080 --> 01:23:15,100
0,330 330,570 570,750 750,960 960,1020
return value, they're supposed to

2816
01:23:15,100 --> 01:23:16,620
0,90 90,450
be turning.

2817
01:23:16,730 --> 01:23:17,480
0,180 180,270 270,450 450,540 540,750
So we're back in user

2818
01:23:17,480 --> 01:23:19,340
0,630 630,810 810,930 930,1290 1560,1860
space and we can about

2819
01:23:19,340 --> 01:23:20,270
0,90 90,210 210,330 330,720 720,930
to do the return back

2820
01:23:20,270 --> 01:23:21,170
0,90 90,180 180,600 600,810 810,900
to the shell from the

2821
01:23:21,170 --> 01:23:22,080
0,180 180,540
right system.

2822
01:23:22,350 --> 01:23:23,520
0,180 180,270 270,480 480,840 840,1170
From the right library function

2823
01:23:23,520 --> 01:23:24,360
0,90 90,240 240,300 300,570 570,840
that made the system call

2824
01:23:25,020 --> 01:23:26,820
0,420 420,600 600,1290
OK, any questions.

2825
01:23:27,490 --> 01:23:28,100
0,540
Fish.

2826
01:23:28,880 --> 01:23:30,200
0,270 300,660 660,870 870,990 990,1320
Um, sorry, can you repeat

2827
01:23:30,200 --> 01:23:31,730
0,330 330,660 660,1140 1140,1290 1290,1530
again, what happens with the

2828
01:23:31,730 --> 01:23:34,620
0,960 990,1560 1560,2130 2130,2670
interrupt {during's -} red.

2829
01:23:37,750 --> 01:23:39,820
0,180 180,480 480,660 660,1650 1770,2070
What happened with interrupts you,

2830
01:23:39,820 --> 01:23:40,990
0,180 180,360 360,510 510,780 780,1170
you say we are turning

2831
01:23:40,990 --> 01:23:43,030
0,420 450,1020 1140,1500 1500,1680 1680,2040
them off but then something

2832
01:23:43,030 --> 01:23:44,890
0,420 450,990 990,1110 1110,1410 1410,1860
else turns them back on.

2833
01:23:45,840 --> 01:23:47,320
0,390 390,1110
S rat.

2834
01:23:48,190 --> 01:23:50,590
0,570 570,660 660,1140 1140,1830 2220,2400
S {re-enables -} interrupts, so

2835
01:23:50,590 --> 01:23:52,300
0,240 240,510 510,840 1200,1320 1320,1710
{this's -} read the very

2836
01:23:52,300 --> 01:23:53,830
0,240 240,780 780,870 870,960 960,1530
last instruction that we're executing

2837
01:23:53,830 --> 01:23:54,760
0,90 90,630 630,810 810,870 870,930
in supervisor mode in the

2838
01:23:54,760 --> 01:23:57,340
0,510 1500,1950 2010,2280 2280,2490 2490,2580
colonel, um I forgot to

2839
01:23:57,340 --> 01:23:58,120
0,150 150,300 300,510 510,660 660,780
say that just now but

2840
01:23:58,120 --> 01:23:59,350
0,120 120,510 510,690 690,1050 1050,1230
as well as setting the

2841
01:23:59,380 --> 01:24:00,610
0,270 270,570 570,840 840,990 990,1230
program counter equal to the

2842
01:24:00,610 --> 01:24:02,710
0,390 390,990 990,1230 1440,1860 1860,2100
se bc and socially user

2843
01:24:02,710 --> 01:24:04,210
0,390 660,1050 1050,1230 1230,1350 1350,1500
{mode's -} red is going

2844
01:24:04,210 --> 01:24:05,740
0,210 240,570 570,1230
to {re-enable. -}

2845
01:24:06,140 --> 01:24:07,320
0,810
Interrupts.

2846
01:24:07,840 --> 01:24:09,430
0,330 330,480 480,720 1260,1530 1530,1590
So that means you know

2847
01:24:09,430 --> 01:24:11,080
0,360 570,810 810,900 900,1350 1350,1650
that's you know user programs

2848
01:24:11,080 --> 01:24:11,680
0,150 150,330 330,390 390,420 420,600
may run for a long

2849
01:24:11,680 --> 01:24:12,490
0,300 300,360 360,450 450,540 540,810
time, it would be nice

2850
01:24:12,490 --> 01:24:13,180
0,60 60,150 150,300 300,450 450,690
to be able to take

2851
01:24:13,180 --> 01:24:14,700
0,240 240,600 600,690 690,1140
disk interrupts or whatever.

2852
01:24:15,040 --> 01:24:17,140
0,570 900,1200 1200,1710 1710,1800 1800,2100
Wow user programs are running.

2853
01:24:18,320 --> 01:24:19,700
0,150 150,420 420,690 690,1140
I see, thank you.

2854
01:24:20,770 --> 01:24:21,920
0,330 330,960
Other questions.

2855
01:24:25,860 --> 01:24:26,460
0,150
Okay.

2856
01:24:28,100 --> 01:24:29,210
0,300 300,600 600,810 810,900 900,1110
Okay to um to wrap

2857
01:24:29,210 --> 01:24:31,520
0,270 270,660 780,1260 1320,1650 1650,2310
up the um system calls

2858
01:24:31,550 --> 01:24:32,660
0,210 210,270 270,540 540,750 750,1110
sort of look like function

2859
01:24:32,660 --> 01:24:33,470
0,330 330,450 450,540 540,750 750,810
calls and are kind of

2860
01:24:33,470 --> 01:24:35,000
0,540 540,630 630,900 900,1230 1230,1530
meant to be thought of

2861
01:24:35,000 --> 01:24:36,290
0,60 60,270 270,480 480,780 780,1290
a lot like function calls,

2862
01:24:36,290 --> 01:24:38,300
0,240 510,1080 1080,1380 1500,1800 1800,2010
but um the user kernel

2863
01:24:38,300 --> 01:24:40,190
0,540 540,840 930,1200 1200,1320 1320,1890
transitions are much more complex

2864
01:24:40,190 --> 01:24:40,840
0,270
than.

2865
01:24:41,000 --> 01:24:42,290
0,240 240,450 450,750 750,1020 1020,1290
Um and function calls are

2866
01:24:42,860 --> 01:24:44,330
0,300 300,480 480,600 600,1290 1290,1470
a lot of complexities due

2867
01:24:44,330 --> 01:24:46,460
0,90 90,180 180,960 1200,1500 1500,2130
to the requirement for isolation,

2868
01:24:46,460 --> 01:24:47,510
0,90 90,330 330,510 510,750 750,1050
the colonel just can't trust

2869
01:24:47,510 --> 01:24:49,080
0,360 360,480 480,720 720,1350
anything in user space.

2870
01:24:49,330 --> 01:24:51,070
0,210 210,690 960,1230 1230,1650 1650,1740
And also the desire to

2871
01:24:51,070 --> 01:24:52,810
0,360 510,960 960,1080 1080,1320 1320,1740
have simple and very fast

2872
01:24:52,810 --> 01:24:55,180
0,360 360,1050 1050,1530 1920,2220 2220,2370
hardware mechanisms, really A X

2873
01:24:55,180 --> 01:24:55,990
0,90 90,270 270,450 450,660 660,810
B six doesn't care that

2874
01:24:55,990 --> 01:24:57,220
0,150 150,390 390,960 960,1110 1110,1230
much about performance, but in

2875
01:24:57,220 --> 01:24:59,290
0,330 330,720 720,1290 1290,1920 1920,2070
general operating system designers and

2876
01:24:59,290 --> 01:25:01,630
0,270 300,660 660,1380 1560,1890 1890,2340
the CPU designers they're very

2877
01:25:01,630 --> 01:25:02,920
0,540 540,690 690,960 990,1230 1230,1290
interested in the sort of

2878
01:25:02,920 --> 01:25:03,910
0,480 480,570 570,780 780,870 870,990
speed at which you can

2879
01:25:03,910 --> 01:25:06,310
0,510 720,990 990,1620 1620,1710 1710,2400
do a efficiency of traps.

2880
01:25:08,040 --> 01:25:09,630
0,300 300,540 540,750 750,1020 1110,1590
X six does it does

2881
01:25:09,630 --> 01:25:10,290
0,120 120,270 270,510 510,600 600,660
all these things in a

2882
01:25:10,290 --> 01:25:11,910
0,450 450,690 690,1050 1080,1440 1440,1620
particular way, there's certainly other

2883
01:25:11,910 --> 01:25:13,500
0,240 240,330 330,480 480,750 1200,1590
ways to do them a

2884
01:25:13,500 --> 01:25:15,300
0,210 210,1020 1020,1110 1110,1200 1200,1800
few questions if you design

2885
01:25:15,300 --> 01:25:16,950
0,630 630,1230 1230,1350 1350,1470 1470,1650
questions alternatives, you could think

2886
01:25:16,950 --> 01:25:19,950
0,420 870,1350 1860,2310 2310,2880 2880,3000
about, um, one is can

2887
01:25:19,950 --> 01:25:20,790
0,120 120,300 300,360 360,750 750,840
you think of ways to

2888
01:25:20,790 --> 01:25:23,490
0,300 300,900 990,1950 1950,2190 2190,2700
make the hardware or software

2889
01:25:23,490 --> 01:25:25,410
0,690 690,780 780,1350 1350,1620 1620,1920
aspects, you redesign xxvii six

2890
01:25:25,410 --> 01:25:27,030
0,420 420,480 480,720 720,1170 1380,1620
redesign the risk five to

2891
01:25:27,030 --> 01:25:28,650
0,120 120,270 270,450 450,930 930,1620
make this whole sequence simpler

2892
01:25:29,490 --> 01:25:30,660
0,630 630,840 840,930 930,1110 1110,1170
or could you think of

2893
01:25:30,660 --> 01:25:31,680
0,390 390,480 480,720 720,810 810,1020
ways to make the whole

2894
01:25:31,680 --> 01:25:33,080
0,600 630,1170
sequence faster.

2895
01:25:33,640 --> 01:25:34,540
0,420 420,600 600,660 660,840 840,900
Another sort of set of

2896
01:25:34,540 --> 01:25:35,590
0,420 420,510 510,720 720,810 810,1050
questions to keep the back

2897
01:25:35,590 --> 01:25:39,100
0,120 120,600 1140,1710 2100,2940 3000,3510
your head, um is whether

2898
01:25:39,100 --> 01:25:41,260
0,90 90,780 810,1080 1080,1530 1530,2160
or not a malicious programs

2899
01:25:41,260 --> 01:25:42,280
0,150 150,570 570,750 750,810 810,1020
could abuse any of these

2900
01:25:42,280 --> 01:25:43,880
0,780 780,1320
mechanisms to.

2901
01:25:45,140 --> 01:25:47,300
0,510 510,1170
Break isolation.

2902
01:25:48,090 --> 01:25:49,560
0,540 570,810 810,1110 1140,1410 1410,1470
Alright that is all I

2903
01:25:49,560 --> 01:25:50,190
0,90 90,210 210,360 360,480 480,630
have to say for this

2904
01:25:50,190 --> 01:25:51,930
0,600 630,1140 1170,1470 1470,1590 1590,1740
lecture, I'm happy to take

2905
01:25:51,930 --> 01:25:52,880
0,600
questions.

2906
01:25:54,650 --> 01:25:55,820
0,240 240,540 540,660 660,810 810,1170
Um, sorry I have another

2907
01:25:55,820 --> 01:25:57,830
0,600 750,1170 1170,1170 1170,1650 1650,2010
question, um I saw there

2908
01:25:57,830 --> 01:25:59,620
0,360 570,1050 1050,1500
is a um.

2909
01:25:59,820 --> 01:26:02,730
0,570 570,1320 1350,1950 1950,2430 2670,2910
You i.e registers are yeah

2910
01:26:02,730 --> 01:26:04,170
0,360 360,600 600,1080 1080,1230 1230,1440
I think register in as

2911
01:26:04,170 --> 01:26:05,060
0,720
status.

2912
01:26:05,280 --> 01:26:06,480
0,210 210,330 330,630 630,840 840,1200
But we don't use it,

2913
01:26:07,320 --> 01:26:08,970
0,180 180,390 390,810 960,1230 1230,1650
we just use, um, sigh,

2914
01:26:08,970 --> 01:26:10,200
0,570 600,750 750,870 870,1080 1080,1230
ee, and we set it

2915
01:26:10,200 --> 01:26:11,430
0,120 120,570 570,660 660,930 930,1230
to false in user space,

2916
01:26:11,430 --> 01:26:12,580
0,210 210,390 390,540 540,1020
why couldn't we use.

2917
01:26:12,980 --> 01:26:15,710
0,570 630,1230 1230,1650 1650,2010 2040,2730
The you're right you're gosh.

2918
01:26:16,900 --> 01:26:17,980
0,210 210,690 690,810 810,960 960,1080
The answer is gonna be

2919
01:26:17,980 --> 01:26:19,080
0,90 90,270 270,630
I don't know.

2920
01:26:21,640 --> 01:26:23,120
0,720
I'm.

2921
01:26:24,720 --> 01:26:26,520
0,330 330,720 720,1230 1230,1620 1620,1800
Um, we're yes p what

2922
01:26:26,520 --> 01:26:27,840
0,120 120,450 480,840 840,1170 1170,1320
we said is 's, what

2923
01:26:27,840 --> 01:26:29,100
0,90 90,330 330,480 480,810 810,1260
we said is S P

2924
01:26:29,100 --> 01:26:30,400
0,360 360,360
I E.

2925
01:26:30,550 --> 01:26:31,900
0,360 360,540 540,930 930,1140 1140,1350
We may actually end up

2926
01:26:31,900 --> 01:26:33,260
0,570
setting.

2927
01:26:33,810 --> 01:26:35,070
0,480 510,630 630,750 750,1050 1050,1260
Um I know nothing about

2928
01:26:35,070 --> 01:26:37,410
0,150 150,600 630,1080 1080,1410 1410,2340
you i.e I'm gonna guess,

2929
01:26:37,590 --> 01:26:38,850
0,150 150,240 240,660 870,1080 1080,1260
let me see I'm gonna

2930
01:26:38,850 --> 01:26:40,410
0,450 450,570 570,720 720,1080 1080,1560
guess that what actually happens

2931
01:26:40,410 --> 01:26:41,580
0,480
here.

2932
01:26:42,510 --> 01:26:43,770
0,300 300,420 420,600 600,1020 1020,1260
I'm in this code where

2933
01:26:43,770 --> 01:26:44,660
0,450
we're.

2934
01:26:45,800 --> 01:26:49,070
0,1230 2520,2790 2790,2910 2910,3150 3150,3270
Um, OK, so here we

2935
01:26:49,070 --> 01:26:51,170
0,390 390,930 1380,1650 1650,1710 1710,2100
are in use a trap

2936
01:26:51,170 --> 01:26:52,850
0,180 180,330 330,1020 1020,1170 1170,1680
{re-were -} returning or setting

2937
01:26:52,910 --> 01:26:54,830
0,420 420,840 840,1170 1170,1170 1170,1920
S P I {E's -}

2938
01:26:54,830 --> 01:26:58,790
0,810 1320,1800 2160,2550 2550,3450 3720,3960
status and I believe the

2939
01:26:58,790 --> 01:27:00,980
0,270 270,450 450,1020 1020,1230 1230,2190
s read instruction will copy

2940
01:27:01,130 --> 01:27:02,360
0,300 300,540 540,990 990,1230 1230,1230
this S P I E

2941
01:27:02,810 --> 01:27:04,850
0,150 150,360 360,450 450,930 1110,2040
and this is this previous

2942
01:27:04,880 --> 01:27:06,290
0,270 270,330 330,570 570,690 690,1410
name of this, the supervisor

2943
01:27:06,290 --> 01:27:09,050
0,600 600,1140 1140,1620 1920,2280 2280,2760
previous interrupt enable I suspect

2944
01:27:09,050 --> 01:27:11,000
0,330 330,870 870,1140 1140,1620
estrich copies that bit.

2945
01:27:11,320 --> 01:27:13,120
0,630 630,1020 1020,1020
Into Z A.

2946
01:27:15,120 --> 01:27:16,830
0,300 300,600 600,1020 1020,1590 1590,1710
Into whatever controls interrupts and

2947
01:27:16,830 --> 01:27:18,300
0,270 270,540 540,690 690,960 1050,1470
user mode, which is possibly

2948
01:27:18,300 --> 01:27:19,660
0,90 90,1110
the cie.

2949
01:27:19,870 --> 01:27:22,300
0,300 330,630 630,1200 2100,2280 2280,2430
{Big's -} status as that

2950
01:27:22,300 --> 01:27:23,300
0,180 180,780
for guests.

2951
01:27:24,420 --> 01:27:25,900
0,270 270,510 510,780 780,1170
I see, thank you.

