1
00:00:00,330 --> 00:00:03,360
0,1260 1260,1440 1440,1590 1590,1710 1710,3030
Yeah we're not so good.

2
00:00:06,650 --> 00:00:08,680
0,450 450,600 600,840 840,1440
Good, how about Erica.

3
00:00:08,800 --> 00:00:10,160
0,150 150,270 270,630
I was there.

4
00:00:10,630 --> 00:00:11,590
0,240 240,360 360,510 510,630 630,960
Did you work for you

5
00:00:12,040 --> 00:00:13,090
0,330 330,330 330,810 810,990 990,1050
um I also thought it

6
00:00:13,090 --> 00:00:14,530
0,120 120,540 540,840 990,1170 1170,1440
was okay and um I

7
00:00:14,530 --> 00:00:15,610
0,240 240,450 450,510 510,900 900,1080
also had a bug with

8
00:00:15,610 --> 00:00:16,810
0,150 150,510 510,600 600,900 900,1200
the coffee and coffee APP,

9
00:00:16,810 --> 00:00:18,490
0,240 240,570 870,1080 1080,1230 1230,1680
but I got that result

10
00:00:18,490 --> 00:00:20,700
0,390 780,1620
so yeah.

11
00:00:20,700 --> 00:00:21,600
0,270 270,360 360,510 510,600 600,900
Diving is one of those

12
00:00:21,720 --> 00:00:22,650
0,270 270,570 570,660 660,750 750,930
tricky cases that you might

13
00:00:22,650 --> 00:00:23,520
0,180 180,360 360,600 600,750 750,870
not think about when you

14
00:00:23,520 --> 00:00:25,140
0,330 330,900
start programming.

15
00:00:26,390 --> 00:00:27,770
0,240 240,720 720,990 990,1290 1290,1380
But, luckily user test will

16
00:00:27,770 --> 00:00:29,260
0,210 210,330 330,540 540,720
find it for you.

17
00:00:33,180 --> 00:00:35,440
0,600 930,1770
The Caroline.

18
00:00:37,580 --> 00:00:39,050
0,360 360,540 540,840 840,1080 1110,1470
Love is going good, um

19
00:00:39,080 --> 00:00:41,060
0,270 270,660 660,1050 1050,1380 1380,1980
I haven't finished yet actually.

20
00:00:41,960 --> 00:00:43,910
0,600 1020,1380 1380,1440 1440,1710 1710,1950
Hmm, okay, I worry about

21
00:00:43,910 --> 00:00:48,700
0,480 480,690 690,1080 1200,2160
copying I guess I.

22
00:00:52,560 --> 00:00:54,090
0,210 210,420 420,630 630,1020 1020,1530
How about a kendall garner.

23
00:00:55,920 --> 00:00:57,030
0,420 450,720 720,810 810,900 900,1110
I think for the most

24
00:00:57,030 --> 00:00:59,190
0,360 360,570 1110,1650 1740,1860 1860,2160
part of z it was

25
00:00:59,250 --> 00:01:01,440
0,570 570,750 750,1260 1770,1950 1950,2190
not too bad for me,

26
00:01:01,440 --> 00:01:02,820
0,420 420,510 510,840 840,1170 1170,1380
probably the weirdest coverage was

27
00:01:02,820 --> 00:01:04,230
0,480 480,780 780,1140 1140,1260 1260,1410
trying to figure out when

28
00:01:04,230 --> 00:01:06,450
0,120 120,450 570,1200 1230,2070 2070,2220
it went below bounds of

29
00:01:06,450 --> 00:01:07,440
0,120 120,570
the stack.

30
00:01:07,440 --> 00:01:08,340
0,420
MHM.

31
00:01:08,760 --> 00:01:10,020
0,420 420,930
Um, yeah.

32
00:01:10,370 --> 00:01:11,270
0,240 240,450 450,540 540,630 630,900
Yeah you do the guard

33
00:01:11,270 --> 00:01:12,680
0,300 300,810
page basically.

34
00:01:16,760 --> 00:01:17,820
0,600
Good.

35
00:01:18,810 --> 00:01:21,300
0,600 630,1200 1410,1920 1920,2310 2310,2490
Okay, well it's about time

36
00:01:21,300 --> 00:01:22,660
0,90 90,210 210,720
to get started.

37
00:01:22,820 --> 00:01:25,250
0,690 690,1020 1050,1680 1710,2130 2280,2430
Um, so welcome to the

38
00:01:25,250 --> 00:01:27,200
0,240 240,930 930,1050 1050,1440 1470,1950
next lecture in the s8

39
00:01:27,200 --> 00:01:29,090
0,420 540,1050 1050,1230 1230,1500 1500,1890
one wherever you are, whatever

40
00:01:29,090 --> 00:01:30,300
0,210 210,570
time zone.

41
00:01:30,300 --> 00:01:31,540
0,720
HMM.

42
00:01:31,540 --> 00:01:33,400
0,180 180,480 480,810 810,1170 1200,1860
So today's lecture is blocks.

43
00:01:33,940 --> 00:01:35,860
0,1020 1020,1380 1380,1620 1620,1710 1710,1920
Yeah you probably have seen

44
00:01:35,860 --> 00:01:37,870
0,390 390,750 750,1020 1050,1380 1380,2010
walks in a previous classes,

45
00:01:38,050 --> 00:01:39,880
0,690 690,990 990,1110 1110,1380 1410,1830
um, or at least being

46
00:01:39,880 --> 00:01:40,690
0,180 180,420 420,570 570,750 750,810
in touch with them in

47
00:01:40,690 --> 00:01:42,370
0,240 240,450 450,480 480,1440 1440,1680
some way or another, and

48
00:01:42,370 --> 00:01:43,360
0,180 300,570 570,780 780,840 840,990
so this lecture a little

49
00:01:43,360 --> 00:01:44,890
0,120 120,180 180,270 270,660 660,1530
bit of a conceptual lecturer

50
00:01:44,890 --> 00:01:45,850
0,180 180,540 540,600 600,780 780,960
may overlap a little bit

51
00:01:45,850 --> 00:01:47,440
0,120 120,390 390,1020 1260,1470 1470,1590
with some um things you've

52
00:01:47,440 --> 00:01:49,390
0,150 150,510 510,870 870,1290 1290,1950
seen before for locksmith will

53
00:01:49,780 --> 00:01:50,470
0,180 180,210 210,360 360,510 510,690
have a little bit more

54
00:01:50,470 --> 00:01:51,580
0,90 90,270 270,690 690,810 810,1110
of a kernel and OS

55
00:01:51,580 --> 00:01:52,500
0,570
focus.

56
00:01:52,560 --> 00:01:53,730
0,420 420,570 570,840 840,930 930,1170
And that changes a couple

57
00:01:53,730 --> 00:01:54,660
0,390
things.

58
00:01:54,750 --> 00:01:56,970
0,600 660,1170 1170,1470 1470,1680 1680,2220
Um, just to get started,

59
00:01:57,000 --> 00:01:59,160
0,480 480,810 810,1410 1440,2010 2010,2160
let's remind ourselves why we

60
00:01:59,160 --> 00:02:01,500
0,270 270,810 900,1440 1920,2250 2250,2340
need locks, um, um, you

61
00:02:01,500 --> 00:02:02,400
0,180 180,390 390,570 570,660 660,900
know I guess the starting

62
00:02:02,400 --> 00:02:03,960
0,210 210,300 300,510 510,660 660,1560
point is really that applications.

63
00:02:05,070 --> 00:02:06,330
0,660 750,990 990,1050 1050,1110 1110,1260
Well, what do you use

64
00:02:06,330 --> 00:02:07,680
0,330 330,840
multiple course.

65
00:02:12,190 --> 00:02:13,120
0,270 270,420 420,480 480,600 600,930
They want to use multiple

66
00:02:13,120 --> 00:02:14,800
0,240 240,300 300,420 420,1110
cores to get performance.

67
00:02:17,040 --> 00:02:18,000
0,180 180,300 300,390 390,480 480,960
And so if an application

68
00:02:18,000 --> 00:02:20,760
0,480 480,870 870,870 2130,2400 2400,2760
actually, um I want to

69
00:02:20,760 --> 00:02:22,170
0,480 480,570 570,870 870,1230 1230,1410
run on multiple cores in

70
00:02:22,170 --> 00:02:24,390
0,330 330,600 600,1680 1680,2100 2100,2220
Zuma wants z scores are

71
00:02:24,390 --> 00:02:25,320
0,240 240,300 300,390 390,810 810,930
part of the application may

72
00:02:25,320 --> 00:02:27,030
0,300 300,540 540,1050 1260,1590 1590,1710
invoke system calls and so

73
00:02:27,030 --> 00:02:27,990
0,90 90,420 420,600 600,690 690,960
the kernel must be able

74
00:02:27,990 --> 00:02:29,320
0,120 120,720
to handle.

75
00:02:31,320 --> 00:02:32,220
0,90 90,210 210,510 510,600 600,900
He was handed a parallel

76
00:02:32,220 --> 00:02:33,520
0,240 240,660
system calls.

77
00:02:45,440 --> 00:02:46,910
0,480 480,600 600,780 780,1170 1170,1470
Um, and that means that

78
00:02:46,910 --> 00:02:48,590
0,120 120,270 270,930 930,1290 1290,1680
you know the system calls

79
00:02:48,590 --> 00:02:50,120
0,270 270,390 390,1020 1020,1230 1230,1530
run in parallel on different

80
00:02:50,120 --> 00:02:53,150
0,510 780,1410 1410,1620 1620,2220 2220,3030
cores, zay may actually access.

81
00:02:53,680 --> 00:02:55,500
0,360 360,570 570,1170
Shared data structures.

82
00:02:58,360 --> 00:03:00,200
0,120 120,570 570,630 630,1290
The instructions in parallel.

83
00:03:04,390 --> 00:03:05,470
0,300 300,390 390,780 780,990 990,1080
And as you've seen by

84
00:03:05,470 --> 00:03:07,180
0,360 360,690 690,1020 1020,1350 1350,1710
now actually X six ask

85
00:03:07,180 --> 00:03:08,740
0,360 360,390 390,720 720,1020 1230,1560
quite a number of shared

86
00:03:08,740 --> 00:03:10,390
0,210 210,750 840,1230 1230,1350 1350,1650
data structures what's the props

87
00:03:10,390 --> 00:03:13,270
0,660 660,1080 1620,2580 2580,2760 2760,2880
structures or, um, you know

88
00:03:13,300 --> 00:03:16,480
0,480 480,1170 1200,1320 1320,1830 2760,3180
ticks or you know later

89
00:03:16,480 --> 00:03:17,860
0,120 120,540 540,660 660,900 900,1380
we'll see the buffer cache,

90
00:03:17,860 --> 00:03:18,880
0,60 60,210 210,420 420,810 810,1020
you know there's actually a

91
00:03:18,880 --> 00:03:20,170
0,240 240,330 330,540 540,750 750,1290
ton of shared data structures.

92
00:03:20,960 --> 00:03:23,090
0,600 600,1170 1170,1650 1770,1950 1950,2130
Um, and so if you

93
00:03:23,090 --> 00:03:24,590
0,360 360,780 780,1260 1260,1380 1380,1500
have parallel axis, you know

94
00:03:24,590 --> 00:03:26,300
0,450 450,780 780,1020 1020,1560 1560,1710
to a data structure in

95
00:03:26,300 --> 00:03:28,580
0,240 240,330 330,1110 1680,2160 2160,2280
one of the courses are

96
00:03:28,580 --> 00:03:29,150
0,210 210,300 300,390 390,450 450,570
right there and the other

97
00:03:29,150 --> 00:03:30,920
0,390 390,480 480,720 720,960 1260,1770
courses or read or a

98
00:03:30,920 --> 00:03:32,420
0,150 150,270 270,540 540,900 900,1500
you know we basically locks

99
00:03:32,660 --> 00:03:34,130
0,90 90,750 750,930 930,1350 1350,1470
to coordinate these updates due

100
00:03:34,130 --> 00:03:35,240
0,90 90,300 300,540 540,960 960,1110
to shared data structure so

101
00:03:35,240 --> 00:03:37,160
0,390 690,930 930,1290 1290,1500 1500,1920
that on readers see consistent

102
00:03:37,160 --> 00:03:37,880
0,270
view.

103
00:03:38,310 --> 00:03:40,100
0,450 450,600 600,690 690,1260
So when he blocks.

104
00:03:41,070 --> 00:03:42,500
0,300 300,930
Yeah two.

105
00:03:43,320 --> 00:03:45,120
0,360 360,750 750,1230
Therefore, control sharing.

106
00:03:45,520 --> 00:03:47,380
0,390 390,720 720,1320
For correct sharing.

107
00:03:52,010 --> 00:03:54,110
0,630 930,1350 1350,1530 1530,1740 1740,2100
Now, now this is sometimes

108
00:03:54,110 --> 00:03:54,830
0,270 270,450 450,570 570,660 660,720
a little bit of a

109
00:03:54,830 --> 00:03:55,860
0,480
bummer.

110
00:03:55,860 --> 00:03:58,080
0,390 390,750 750,1470 1770,2070 2070,2220
A because we want these

111
00:03:58,080 --> 00:04:01,650
0,300 300,990 1380,1830 1860,2670 2670,3570
para lexis, we run multiple

112
00:04:01,680 --> 00:04:04,440
0,420 420,780 780,1500 1560,2370 2370,2760
consistent calls in parallel on

113
00:04:04,440 --> 00:04:06,450
0,90 90,390 390,900 1260,1740 1770,2010
a different course, um, but

114
00:04:06,450 --> 00:04:08,460
0,630 630,1140 1140,1530 1530,1710 1710,2010
unfortunately, um if they share

115
00:04:08,460 --> 00:04:10,020
0,420 420,990 990,1170 1170,1380 1380,1560
data structures, no they need

116
00:04:10,020 --> 00:04:11,610
0,480 480,660 660,1080 1080,1230 1230,1590
locks and locks, no Sarah

117
00:04:11,610 --> 00:04:14,370
0,480 510,1260 1260,2010 2310,2490 2490,2760
lies basically operations and so

118
00:04:14,370 --> 00:04:15,510
0,90 90,420 570,720 720,840 840,1140
in fact they were watching

119
00:04:15,510 --> 00:04:17,160
0,150 150,330 330,690 690,960 960,1650
the end can limit performance.

120
00:04:27,320 --> 00:04:27,860
0,120 120,240 240,330 330,480 480,540
And so we're sort of

121
00:04:27,860 --> 00:04:29,390
0,90 90,300 300,570 570,1050 1050,1530
in a tricky situation where

122
00:04:29,390 --> 00:04:30,380
0,90 90,300 300,390 390,840 840,990
you know for correctness, we

123
00:04:30,380 --> 00:04:31,700
0,210 210,690 690,810 810,1050 1050,1320
need lots you know, but

124
00:04:31,700 --> 00:04:33,290
0,90 90,870 960,1170 1170,1380 1380,1590
for performance, um, they're not

125
00:04:33,290 --> 00:04:34,160
0,300
good.

126
00:04:34,600 --> 00:04:36,070
0,450 480,780 780,900 900,1020 1020,1470
Um, but you know there's

127
00:04:36,070 --> 00:04:36,910
0,120 120,180 180,420 420,540 540,840
going to be a fact

128
00:04:36,910 --> 00:04:39,460
0,90 90,510 510,1380 1410,1770 1770,2550
of life and we'll see

129
00:04:39,760 --> 00:04:40,750
0,300 300,390 390,600 600,840 840,990
what can do about it.

130
00:04:41,300 --> 00:04:42,170
0,390 390,540 540,660 660,780 780,870
Um, but that's sort of

131
00:04:42,170 --> 00:04:44,030
0,300 300,570 570,960 960,1410 1440,1860
the top level a scenario

132
00:04:44,030 --> 00:04:45,800
0,450 720,1080 1080,1200 1200,1350 1350,1770
here and you know maybe

133
00:04:45,800 --> 00:04:47,810
0,270 270,750 780,1290 1290,1380 1380,2010
just to really you know

134
00:04:47,840 --> 00:04:49,610
0,390 390,780 780,1080 1080,1230 1230,1770
brings boyhood, why do applications

135
00:04:49,610 --> 00:04:51,710
0,240 240,450 450,600 960,1680 1680,2100
actually want a multiple course

136
00:04:51,920 --> 00:04:52,790
0,180 180,480 480,660 660,810 810,870
and that really has to

137
00:04:52,790 --> 00:04:54,650
0,150 150,510 510,690 690,1350 1350,1860
do with your technology trends

138
00:04:54,650 --> 00:04:55,520
0,120 120,240 240,450 450,540 540,870
you know over the last

139
00:04:55,640 --> 00:04:56,900
0,240 240,840
couple decades.

140
00:04:56,900 --> 00:04:57,830
0,240 240,540 540,660 660,750 750,930
Um, and you know there's

141
00:04:57,830 --> 00:04:59,330
0,150 150,210 210,330 330,960 960,1500
sort of this classic graphs

142
00:04:59,330 --> 00:05:00,110
0,180 180,330 330,390 390,600 600,780
that sort of make these

143
00:05:00,110 --> 00:05:01,760
0,510 720,960 960,1110 1110,1230 1230,1650
points, um, so let me

144
00:05:02,090 --> 00:05:02,990
0,270 270,330 330,510 510,570 570,900
pull up one of them

145
00:05:02,990 --> 00:05:03,590
0,240 240,270 270,420 420,510 510,600
there's a little bit of

146
00:05:03,590 --> 00:05:05,450
0,60 60,570 570,1140 1140,1620 1740,1860
a complicated graph, um, you

147
00:05:05,450 --> 00:05:06,840
0,90 90,300 300,960
know there's years.

148
00:05:06,900 --> 00:05:08,300
0,840
Honda.

149
00:05:08,720 --> 00:05:10,670
0,240 240,750 750,1140 1140,1620 1620,1950
X axis and y axis,

150
00:05:10,670 --> 00:05:13,040
0,510 570,840 870,1500 1620,2130 2130,2370
there's no units or different

151
00:05:13,040 --> 00:05:14,330
0,180 180,240 240,450 450,870 870,1290
types of units depending on

152
00:05:14,330 --> 00:05:15,500
0,270 270,540 540,630 630,900 900,1170
which line we're looking at.

153
00:05:16,140 --> 00:05:17,070
0,270 270,390 390,450 450,600 600,930
Um, but the thing that

154
00:05:17,070 --> 00:05:17,880
0,210 210,450 450,600 600,690 690,810
really look at it is

155
00:05:17,880 --> 00:05:20,790
0,270 750,1290 1560,2130 2130,2310 2310,2910
that, um what has happened

156
00:05:20,820 --> 00:05:22,440
0,480 510,780 780,1020 1020,1230 1230,1620
in the last couple years

157
00:05:22,440 --> 00:05:24,690
0,570 570,810 810,1380 1380,1620 1620,2250
z last decades is that.

158
00:05:25,260 --> 00:05:26,250
0,180 180,570 570,720 720,810 810,990
So starting in the two

159
00:05:26,250 --> 00:05:28,920
0,690 690,1380 1380,1560 1560,1890 1890,2670
thousands at the clock frequency

160
00:05:29,220 --> 00:05:30,690
0,330 330,570 570,1020 1020,1140 1140,1470
hasn't really increased any more.

161
00:05:31,320 --> 00:05:33,330
0,660 660,870 870,1260 1260,1470 1470,2010
Um, so basically this has

162
00:05:33,630 --> 00:05:34,960
0,780
plateaued.

163
00:05:35,140 --> 00:05:36,560
0,780
Constant.

164
00:05:37,000 --> 00:05:39,820
0,570 1050,1800 2070,2220 2220,2310 2310,2820
Um, and as a result,

165
00:05:39,850 --> 00:05:42,400
0,600 600,1200 1230,1560 1560,2310 2340,2550
basically single thread performance of

166
00:05:42,400 --> 00:05:46,090
0,300 300,930 1230,2100 2460,3120 3120,3690
core also basically has reached

167
00:05:46,090 --> 00:05:47,980
0,450 450,870 900,1290 1290,1380 1380,1890
a limit neuro a plateau.

168
00:05:52,060 --> 00:05:53,530
0,510 510,960 960,1320 1320,1380 1380,1470
Um, and yet on the

169
00:05:53,530 --> 00:05:55,060
0,180 180,450 450,810 810,960 960,1530
other hand, given of course

170
00:05:55,270 --> 00:05:56,200
0,90 90,270 270,330 330,780 780,930
the number of resistor should

171
00:05:56,200 --> 00:05:57,700
0,390 420,720 720,840 840,1350 1350,1500
still ask me increasing over

172
00:05:57,700 --> 00:05:59,230
0,90 90,330 330,570 570,930 1290,1530
the same time period, so

173
00:05:59,230 --> 00:06:00,190
0,90 90,210 210,540 540,780 780,960
if you can like you

174
00:06:00,190 --> 00:06:01,360
0,330 330,840 840,930 930,1110 1110,1170
use statistics to make a

175
00:06:01,360 --> 00:06:02,980
0,390 390,690 690,810 810,1050 1050,1620
single course would run faster

176
00:06:03,250 --> 00:06:04,510
0,540 540,750 750,840 840,1080 1080,1260
a yeah the only other

177
00:06:04,510 --> 00:06:05,740
0,240 240,570 570,840 840,1020 1020,1230
option basically have to have

178
00:06:05,740 --> 00:06:06,790
0,330 330,660 660,810 810,870 870,1050
multiple cores and you see

179
00:06:06,790 --> 00:06:08,470
0,360 360,690 690,1050 1050,1200 1200,1680
indeed that starting from 2001

180
00:06:08,470 --> 00:06:10,240
0,510 630,840 840,960 960,1200 1200,1770
or from nearly 2000 skin,

181
00:06:10,240 --> 00:06:11,230
0,330 330,390 390,600 600,690 690,990
the number of course has

182
00:06:11,230 --> 00:06:12,240
0,120 120,300 300,630
gone off.

183
00:06:13,500 --> 00:06:14,490
0,150 150,270 270,420 420,510 510,990
And so there's an application

184
00:06:14,490 --> 00:06:16,650
0,150 150,300 300,1080 1410,1590 1590,2160
once more performance, you know,

185
00:06:16,650 --> 00:06:17,970
0,450 480,690 690,960 960,1200 1200,1320
um, you can rely on

186
00:06:17,970 --> 00:06:19,290
0,30 30,300 300,660 660,990 990,1320
a single chord, basically half

187
00:06:19,290 --> 00:06:21,080
0,150 150,570 570,900 900,1350
through exploiting multiple cores.

188
00:06:21,170 --> 00:06:22,100
0,120 120,360 360,540 540,810 810,930
And also, this means if

189
00:06:22,100 --> 00:06:23,390
0,90 90,660 660,990 990,1080 1080,1290
an application is you know

190
00:06:23,390 --> 00:06:25,460
0,420 420,990 990,1110 1110,1350 1350,2070
colonel intensive or less intensive,

191
00:06:25,460 --> 00:06:28,430
0,90 90,450 450,870 1320,2190 2340,2970
you know a server a

192
00:06:28,490 --> 00:06:29,450
0,390 390,540 540,750 750,840 840,960
then that means that the

193
00:06:29,450 --> 00:06:30,500
0,270 270,540 540,750 750,930 930,1050
outbreak system also has to

194
00:06:30,500 --> 00:06:33,170
0,450 480,1140 1170,1950 1950,2520 2520,2670
be you run efficiently on

195
00:06:33,170 --> 00:06:34,360
0,330 330,780
multiple cores.

196
00:06:34,740 --> 00:06:35,970
0,180 180,330 330,420 420,750 750,1230
So that's the main reason,

197
00:06:36,330 --> 00:06:37,950
0,540 540,690 690,990 990,1290 1290,1620
um, you know, we're very

198
00:06:37,950 --> 00:06:41,550
0,510 510,1080 1140,1710 1980,2970 2970,3600
interested in a parallelism within

199
00:06:41,550 --> 00:06:43,100
0,660 660,1050
z colonel.

200
00:06:45,120 --> 00:06:46,840
0,240 240,570 570,780 780,1200
Any questions about this.

201
00:06:52,020 --> 00:06:53,010
0,210 210,300 300,540 540,660 660,990
Okay, I've seen I I

202
00:06:53,010 --> 00:06:53,850
0,300 300,420 420,540 540,720 720,840
assume that you've seen some

203
00:06:53,850 --> 00:06:55,230
0,60 60,210 210,630 690,1200 1200,1380
of these graphs before but

204
00:06:55,230 --> 00:06:56,580
0,210 240,750 750,840 840,1110 1110,1350
it's good to remind us

205
00:06:56,580 --> 00:06:57,600
0,330 330,390 390,720 720,930 930,1020
what the starting point of

206
00:06:57,600 --> 00:06:59,140
0,180 180,720 720,960
old discussion is.

207
00:07:00,660 --> 00:07:02,080
0,120 120,420 420,840
So while ox.

208
00:07:02,960 --> 00:07:04,280
0,240 240,600 600,900 900,990 990,1320
You already hinted at this

209
00:07:04,280 --> 00:07:07,400
0,90 90,180 180,1080 1290,2070 2460,3120
you know, therefore correctness, um,

210
00:07:07,400 --> 00:07:09,740
0,570 570,720 720,1260 1290,1710 1710,2340
if we have no readers

211
00:07:09,740 --> 00:07:11,330
0,180 210,810 810,930 930,1350 1350,1590
and writers are accessing shared

212
00:07:11,330 --> 00:07:13,130
0,210 210,750 1110,1590 1590,1680 1680,1800
data structure and you know

213
00:07:13,130 --> 00:07:14,270
0,90 90,270 270,390 390,570 570,1140
the thing that goes wrong

214
00:07:14,270 --> 00:07:16,010
0,480 480,1170 1170,1410 1410,1470 1470,1740
is we want to avoid

215
00:07:16,010 --> 00:07:17,180
0,210 210,870
great conditions.

216
00:07:23,830 --> 00:07:25,000
0,150 150,270 270,510 510,660 660,1170
If you don't have locks

217
00:07:25,150 --> 00:07:25,780
0,150 150,240 240,360 360,540 540,630
you know we run the

218
00:07:25,780 --> 00:07:26,920
0,450 480,600 600,750 750,1020 1020,1140
risk you know we have

219
00:07:26,920 --> 00:07:27,850
0,150 150,360 360,750 750,870 870,930
shared data structures that we're

220
00:07:27,850 --> 00:07:30,640
0,120 120,180 180,690 1050,1740 2040,2790
going to have a we're

221
00:07:30,850 --> 00:07:33,250
0,420 420,480 480,570 570,1500 1800,2400
going to have raised conditions

222
00:07:33,250 --> 00:07:34,600
0,420 600,810 810,990 990,1200 1200,1350
and it turns out that

223
00:07:34,600 --> 00:07:36,790
0,150 150,360 360,780 780,1620 1770,2190
in race conditions are pretty

224
00:07:36,790 --> 00:07:39,490
0,540 630,1140 1500,1740 1740,2280 2280,2700
annoying, um, so justly first

225
00:07:39,490 --> 00:07:40,270
0,330 330,390 390,600 600,690 690,780
got a little bit of

226
00:07:40,270 --> 00:07:41,230
0,300 300,360 360,540 540,630 630,960
sense of what it actually

227
00:07:41,230 --> 00:07:43,180
0,390 540,1110 1110,1290 1290,1410 1410,1950
is, let's look at the

228
00:07:43,210 --> 00:07:45,280
0,870 870,1350 1380,1470 1470,1680 1680,2070
let's create a race condition

229
00:07:45,280 --> 00:07:46,630
0,120 120,840 840,1110 1110,1290 1290,1350
in x86 and sort of

230
00:07:46,630 --> 00:07:47,680
0,210 210,390 390,510 510,780 780,1050
see how it actually shows

231
00:07:47,680 --> 00:07:49,090
0,300 300,450 450,690 690,1230 1230,1410
up and then understand like

232
00:07:49,090 --> 00:07:50,380
0,330 330,600 600,930
what actually happened.

233
00:07:51,100 --> 00:07:54,500
0,510 840,1020 1020,1680 2070,2910
Alright, so here's a.

234
00:07:55,010 --> 00:07:56,540
0,90 90,480 480,690 690,930 930,1530
The function F K free,

235
00:07:56,600 --> 00:07:58,370
0,450 450,900 900,1290 1290,1500 1500,1770
um in Calif, dot c

236
00:07:58,370 --> 00:07:59,090
0,90 90,270 270,510 510,630 630,720
you know this is the

237
00:07:59,090 --> 00:08:01,010
0,330 330,480 480,1050 1410,1800 1800,1920
function that freeze after you

238
00:08:01,010 --> 00:08:02,060
0,240 240,570 570,660 660,900 900,1050
free page, it pushes on

239
00:08:02,060 --> 00:08:03,650
0,90 90,300 300,690 750,990 990,1590
the free list, there's a

240
00:08:03,680 --> 00:08:04,820
0,330 330,510 510,540 540,840 840,1140
kernel has a very simple

241
00:08:04,820 --> 00:08:05,810
0,240 240,600 600,660 660,870 870,990
data structure to keep the

242
00:08:05,810 --> 00:08:06,620
0,210 210,420 420,510 510,660 660,810
free list of all three

243
00:08:06,620 --> 00:08:07,700
0,570
pages.

244
00:08:07,700 --> 00:08:09,050
0,540 540,690 690,840 840,1020 1020,1350
Um, so that when Callum

245
00:08:09,050 --> 00:08:10,370
0,180 180,240 240,420 420,990 990,1320
needs to pay attention grabbing

246
00:08:10,370 --> 00:08:11,620
0,90 90,180 180,750
from the village.

247
00:08:11,620 --> 00:08:12,700
0,300 300,390 390,540 540,870 870,1080
Next you see here goes

248
00:08:12,700 --> 00:08:17,230
0,1470 1830,2610 2610,2820 2820,3420 3870,4530
a allocation has one, um.

249
00:08:17,780 --> 00:08:19,500
0,600 630,1140
Dad, dad.

250
00:08:19,500 --> 00:08:20,400
0,60 60,270 270,600 600,720 720,900
The memory allocator has one

251
00:08:20,400 --> 00:08:22,920
0,390 390,780 780,1260 1620,2280 2280,2520
lock came lock and a

252
00:08:22,920 --> 00:08:24,120
0,330 330,390 390,690 690,1080 1080,1200
here it actually updates the

253
00:08:24,120 --> 00:08:26,670
0,180 180,660 960,1620 1650,2190 2190,2550
free list a written page

254
00:08:26,670 --> 00:08:27,780
0,150 150,330 330,480 480,660 660,1110
that just has been fried

255
00:08:27,810 --> 00:08:29,820
0,360 360,720 720,1200 1200,1500
or the argument three.

256
00:08:29,880 --> 00:08:30,510
0,270 270,360 360,480 480,540 540,630
So we're going to do

257
00:08:30,510 --> 00:08:31,740
0,120 120,450 510,720 720,1020 1020,1230
is like just comment out

258
00:08:31,740 --> 00:08:33,180
0,240 240,870
these two.

259
00:08:33,180 --> 00:08:35,640
0,300 300,810 810,960 960,1590 1620,2460
Choir releases that basically Mark

260
00:08:35,640 --> 00:08:37,260
0,90 90,210 210,600 990,1530 1530,1620
you know the acquiring of

261
00:08:37,260 --> 00:08:38,340
0,90 90,420 420,510 510,720 720,1080
the lock, and then releasing

262
00:08:38,340 --> 00:08:39,450
0,90 90,450 450,540 540,840 840,1110
the lock, you know and

263
00:08:39,450 --> 00:08:41,070
0,90 90,450 450,720 720,1350 1380,1620
so this, this, this, this

264
00:08:41,070 --> 00:08:42,120
0,210 210,300 300,690 690,990 990,1050
piece of code that's in

265
00:08:42,120 --> 00:08:43,560
0,90 90,540 840,1170 1170,1380 1380,1440
the middle that used to

266
00:08:43,560 --> 00:08:45,690
0,450 840,870 870,1470 1470,1830 1830,2130
be a there's not more

267
00:08:45,690 --> 00:08:47,130
0,90 90,300 300,480 480,960 960,1440
is not me executed anymore

268
00:08:47,130 --> 00:08:48,560
0,210 240,1020
and automatically.

269
00:08:49,350 --> 00:08:50,500
0,600
Yeah.

270
00:08:50,590 --> 00:08:51,740
0,840
Hello.

271
00:08:54,100 --> 00:08:56,460
0,750 780,1050 1050,1200 1200,1740
So let's do that.

272
00:08:56,910 --> 00:08:59,600
0,510 510,1080 1110,1320 1320,2010
Um, and then run.

273
00:09:01,500 --> 00:09:03,940
0,300 300,810 840,1230 1230,1830
Q mu open pilot.

274
00:09:05,300 --> 00:09:07,130
0,630 720,1200 1200,1290 1290,1530 1530,1830
And before I run it,

275
00:09:07,160 --> 00:09:08,600
0,180 180,540 570,1020 1020,1290 1290,1440
you know notice action were

276
00:09:08,600 --> 00:09:11,450
0,180 180,690 780,1260 1260,1800 1800,2850
already booted and actually a

277
00:09:11,480 --> 00:09:12,470
0,420 420,510 510,630 630,810 810,990
presume, we have made phone

278
00:09:12,470 --> 00:09:13,730
0,270 270,630 630,900 900,1050 1050,1260
calls probably to A K

279
00:09:13,730 --> 00:09:15,290
0,420 720,930 930,1350 1350,1440 1440,1560
three you probably as you

280
00:09:15,290 --> 00:09:16,520
0,390 390,600 600,690 690,900 930,1230
know, and so if things

281
00:09:16,520 --> 00:09:17,510
0,120 120,210 210,330 330,630 630,990
seem to be working fine.

282
00:09:18,070 --> 00:09:19,090
0,210 210,420 420,750 750,780 780,1020
So let's run a user

283
00:09:19,090 --> 00:09:20,260
0,540
test.

284
00:09:20,260 --> 00:09:21,100
0,180 180,420 420,540 540,690 690,840
And maybe you know this

285
00:09:21,100 --> 00:09:22,360
0,360 360,780 780,990 990,1050 1050,1260
instinct to think a little

286
00:09:22,360 --> 00:09:23,110
0,120 120,330 330,510 510,600 600,750
bit about this and what

287
00:09:23,110 --> 00:09:24,220
0,60 60,120 120,630 630,750 750,1110
do you expect, will this

288
00:09:24,250 --> 00:09:25,870
0,630 630,750 750,900 900,1140 1140,1620
work well does not work.

289
00:09:28,920 --> 00:09:30,120
0,390 390,510 510,720 720,840 840,1200
Anybody who tried it out.

290
00:09:33,070 --> 00:09:34,480
0,300 300,510 510,960 990,1200 1200,1410
A I think it could

291
00:09:34,480 --> 00:09:37,060
0,810 840,1260 1260,1500 1500,2160 2160,2580
potentially lose some pages, but

292
00:09:37,330 --> 00:09:39,780
0,450 450,660 660,1170 1260,2010
maybe will not because.

293
00:09:39,780 --> 00:09:41,250
0,210 210,750 810,900 900,1110 1110,1470
Um, maybe a race condition

294
00:09:41,250 --> 00:09:43,260
0,210 210,720 870,1470 1590,1800 1800,2010
would occur mhm, yeah, so

295
00:09:43,260 --> 00:09:43,920
0,150 150,240 240,300 300,540 540,660
one of the things is

296
00:09:43,920 --> 00:09:45,510
0,180 180,450 450,930 930,1140 1140,1590
that these we face conditions

297
00:09:45,510 --> 00:09:46,290
0,90 90,270 270,420 420,660 660,780
they might not happen so

298
00:09:46,290 --> 00:09:47,340
0,180 180,570 570,630 630,840 840,1050
let's run the user test

299
00:09:47,340 --> 00:09:48,330
0,90 90,240 240,420 420,540 540,990
and see actually what happens.

300
00:09:50,740 --> 00:09:51,820
0,600
HMM.

301
00:09:51,820 --> 00:09:53,900
0,570 570,900 900,1500
Whoever started up.

302
00:09:54,360 --> 00:09:55,560
0,420 420,600 600,660 660,840 840,1200
I'll take a little while,

303
00:09:55,560 --> 00:09:56,430
0,120 120,240 240,450 450,810 810,870
as you might complain a

304
00:09:56,430 --> 00:09:57,540
0,210 210,360 360,780 780,900 900,1110
little bit because you know.

305
00:09:58,470 --> 00:09:59,920
0,270 270,330 330,540 540,840
Learning a lot of.

306
00:10:00,940 --> 00:10:01,390
0,120 120,150 150,180 180,360 360,450
There are a lot of

307
00:10:01,390 --> 00:10:02,380
0,210 210,270 270,360 360,720 720,990
load on my machine here

308
00:10:02,380 --> 00:10:03,460
0,210 210,270 270,390 390,720 720,1080
correct as you probably know

309
00:10:03,460 --> 00:10:06,220
0,570 810,1260 1260,1800 1800,2400 2430,2760
the premier simulating three of

310
00:10:06,310 --> 00:10:07,780
0,390 390,750 750,870 870,1260 1260,1470
course here and the street

311
00:10:07,780 --> 00:10:09,100
0,240 240,390 390,600 600,690 690,1320
course might run in parallel.

312
00:10:10,330 --> 00:10:11,620
0,720
I'm.

313
00:10:11,830 --> 00:10:13,840
0,900 990,1230 1230,1410 1410,1560 1560,2010
And so far so good,

314
00:10:14,020 --> 00:10:15,580
0,390 390,660 660,750 750,1050 1050,1560
we're showing the past tests.

315
00:10:21,470 --> 00:10:22,430
0,240 240,270 270,510 510,600 600,960
That's a little bit slower

316
00:10:22,430 --> 00:10:23,360
0,210 210,330 330,600 600,870 870,930
because I'm running zoom at

317
00:10:23,360 --> 00:10:24,700
0,90 90,300 300,840
the same time.

318
00:10:26,920 --> 00:10:28,420
0,450 450,810 810,870 870,1110 1110,1500
Let's wait a couple more

319
00:10:28,420 --> 00:10:29,650
0,120 120,360 360,720 750,1050 1050,1230
and just to see what's

320
00:10:29,650 --> 00:10:30,840
0,240 240,630
going on.

321
00:10:43,070 --> 00:10:45,860
0,720 720,1320 1350,2250
Okay, well, um.

322
00:10:46,290 --> 00:10:47,670
0,270 540,750 750,840 840,1230 1230,1380
Let's just go back to

323
00:10:47,670 --> 00:10:49,290
0,330 330,750 750,870 870,1350 1350,1620
the slides and then we'll

324
00:10:49,290 --> 00:10:50,340
0,210 210,480 480,750 750,840 840,1050
check back in a little

325
00:10:50,340 --> 00:10:51,450
0,240 240,360 360,660 660,840 840,1110
while and see what actually

326
00:10:51,450 --> 00:10:52,500
0,570
happens.

327
00:10:52,860 --> 00:10:54,600
0,540 720,1170 1170,1320 1320,1440 1440,1740
Um, but it was pointed

328
00:10:54,600 --> 00:10:55,950
0,300 360,510 510,720 720,930 930,1350
out in these race conditions

329
00:10:55,950 --> 00:10:57,060
0,150 150,450 450,570 570,750 750,1110
may appear may not appear

330
00:10:57,090 --> 00:10:58,410
0,240 240,510 510,900 900,1230 1230,1320
right because it's always the

331
00:10:58,410 --> 00:11:00,180
0,360 360,960 960,1200 1200,1620 1620,1770
case that every core or

332
00:11:00,180 --> 00:11:01,140
0,150 150,360 360,450 450,690 690,960
every time we call k

333
00:11:01,140 --> 00:11:03,300
0,450 900,1290 1290,1530 1530,1740 1740,2160
three a these two lines

334
00:11:03,300 --> 00:11:07,260
0,120 120,780 1050,2040 2940,3810 3840,3960
are executed automatically as they

335
00:11:07,260 --> 00:11:08,370
0,180 180,300 300,750 750,990 990,1110
would have done with the

336
00:11:08,370 --> 00:11:10,530
0,450 600,1110 1110,1290 1290,1440 1440,2160
lock, then there's no problem,

337
00:11:10,530 --> 00:11:11,790
0,90 90,360 360,720 720,960 960,1260
the only problem is if

338
00:11:11,790 --> 00:11:13,380
0,120 120,420 420,900 1020,1170 1170,1590
we two frets two processes

339
00:11:13,380 --> 00:11:14,460
0,150 150,630 630,720 720,810 810,1080
are executed at the same

340
00:11:14,460 --> 00:11:15,720
0,480 540,690 690,930 930,1170 1170,1260
time and somebody comes in

341
00:11:15,720 --> 00:11:16,420
0,390
between.

342
00:11:17,140 --> 00:11:18,850
0,240 240,300 300,600 630,1200 1230,1710
Look at this actually while

343
00:11:18,850 --> 00:11:20,200
0,90 90,570 570,870 870,1050 1050,1350
I'm talking we see actually

344
00:11:20,200 --> 00:11:21,310
0,180 180,300 300,360 360,810 840,1110
there is a panic and

345
00:11:21,310 --> 00:11:22,600
0,240 240,510 510,690 690,900 900,1290
so there's some race condition

346
00:11:22,600 --> 00:11:23,440
0,150 150,300 300,540 540,780 780,840
that can actually cause a

347
00:11:23,440 --> 00:11:24,400
0,480
panic.

348
00:11:24,940 --> 00:11:27,190
0,450 930,1230 1230,1440 1440,1950 1950,2250
A rather race conditions that

349
00:11:27,190 --> 00:11:28,450
0,330 330,630 630,780 780,900 900,1260
will show up as indeed

350
00:11:28,450 --> 00:11:31,480
0,300 300,960 960,1440 1800,2670 2700,3030
this as mentioned whereas mentioned

351
00:11:31,480 --> 00:11:32,920
0,600 600,840 840,1050 1050,1170 1170,1440
that will show up as

352
00:11:33,070 --> 00:11:34,780
0,360 360,840 960,1140 1140,1320 1320,1710
not enough, some free pages

353
00:11:34,780 --> 00:11:36,070
0,210 210,330 330,660 660,840 840,1290
where some pages get lost,

354
00:11:36,100 --> 00:11:37,330
0,180 180,570 570,780 780,1020 1020,1230
so basically user test runs

355
00:11:37,330 --> 00:11:38,650
0,390 390,600 600,690 690,1020 1020,1320
fine until the very end

356
00:11:38,770 --> 00:11:41,050
0,480 480,960 960,1440 1500,1980 1980,2280
where complaints saying well you

357
00:11:41,050 --> 00:11:43,120
0,300 300,660 690,1050 1050,1650 1650,2070
lost some pages during all

358
00:11:43,120 --> 00:11:44,470
0,300 300,630 630,720 720,840 840,1350
using all of the reviews

359
00:11:44,470 --> 00:11:45,200
0,420
test.

360
00:11:45,600 --> 00:11:47,550
0,540 840,1050 1050,1380 1380,1590 1590,1950
Okay, so these race conditions

361
00:11:47,550 --> 00:11:48,300
0,120 120,330 330,450 450,510 510,750
can show up in different

362
00:11:48,300 --> 00:11:49,770
0,570 630,840 840,960 960,1140 1140,1470
ways, um, they may happen,

363
00:11:49,770 --> 00:11:51,000
0,60 60,150 150,390 390,690
they may not happen.

364
00:11:51,120 --> 00:11:53,520
0,510 510,810 810,1110 1110,1470 1770,2400
Clearly something happened here, um,

365
00:11:53,760 --> 00:11:55,110
0,330 330,480 480,570 570,1200 1230,1350
let's try to understand you

366
00:11:55,110 --> 00:11:57,240
0,90 90,750 750,1260 1260,1710 1710,2130
know what actually, um what

367
00:11:57,240 --> 00:11:58,300
0,180 180,510
goes wrong.

368
00:12:00,420 --> 00:12:02,940
0,1050 1050,1170 1170,1410 1410,1950
Back to this lights.

369
00:12:06,400 --> 00:12:07,720
0,630 660,960 960,1080 1080,1200 1200,1320
Um, so you know the

370
00:12:07,720 --> 00:12:08,500
0,300 300,390 390,570 570,720 720,780
picture, you should have in

371
00:12:08,500 --> 00:12:09,640
0,120 120,540 540,690 690,840 840,1140
your head like if there's

372
00:12:09,640 --> 00:12:11,770
0,390 630,1080 1080,1560 1590,1920 1920,2130
just multiple cores that were

373
00:12:11,770 --> 00:12:12,800
0,480
running.

374
00:12:13,070 --> 00:12:15,290
0,210 210,390 390,810 810,1410 1740,2220
So your CPU zero CPU

375
00:12:15,290 --> 00:12:17,440
0,300 300,390 390,870 870,1590
zero is executing instructions.

376
00:12:17,470 --> 00:12:18,880
0,180 180,480 480,840 840,990 990,1410
And CPU, one is executing

377
00:12:18,880 --> 00:12:20,120
0,720
instructions.

378
00:12:21,210 --> 00:12:23,880
0,510 540,690 690,960 960,1620 1710,2670
And they're both connected through

379
00:12:24,120 --> 00:12:26,070
0,150 150,630 840,990 990,1410 1440,1950
a memory, if you're back

380
00:12:26,070 --> 00:12:27,090
0,180 180,420 420,600 600,690 690,1020
think back about the skiing

381
00:12:27,090 --> 00:12:28,320
0,630 630,720 720,930 930,1020 1020,1230
schematics, you know we showed

382
00:12:28,320 --> 00:12:29,700
0,30 30,210 210,420 420,930 1230,1380
a couple times before, in

383
00:12:29,700 --> 00:12:31,770
0,180 180,360 360,690 750,1350 1350,2070
fact there's a DRM controller,

384
00:12:31,770 --> 00:12:33,600
0,120 120,240 240,660 660,1350
you know that actually.

385
00:12:33,690 --> 00:12:35,250
0,450 480,960 960,1140 1140,1440 1440,1560
A connects you to the

386
00:12:35,250 --> 00:12:37,170
0,390 390,900 1200,1710 1710,1830 1830,1920
GM chips where all the

387
00:12:37,170 --> 00:12:38,660
0,420 420,930
stages living.

388
00:12:38,800 --> 00:12:40,420
0,510 510,870 870,930 930,1320 1320,1620
Um all the memories living.

389
00:12:41,370 --> 00:12:42,240
0,180 180,330 330,480 480,630 630,870
I'm gonna make that memory

390
00:12:42,240 --> 00:12:43,050
0,30 30,180 180,300 300,570 570,810
a little bit bigger, bigger

391
00:12:43,050 --> 00:12:44,040
0,390
whatever.

392
00:12:46,030 --> 00:12:47,230
0,180 180,300 300,540 540,630 630,1200
Have some place to draw

393
00:12:47,260 --> 00:12:48,940
0,270 270,420 420,780 780,990 990,1680
and so basically art realist,

394
00:12:49,270 --> 00:12:50,800
0,180 180,360 360,750 750,1080 1080,1530
you know mitt lives in.

395
00:12:53,010 --> 00:12:54,780
0,180 180,810 1170,1410 1410,1590 1590,1770
In memory, and let's say

396
00:12:54,780 --> 00:12:55,620
0,210 210,300 300,480 480,750 750,840
there's a free list with

397
00:12:55,620 --> 00:12:57,260
0,150 150,540 540,750 750,1050
two pages on it.

398
00:12:59,060 --> 00:13:01,640
0,600 600,1290 1290,1890 2340,2460 2460,2580
A in a you know

399
00:13:01,640 --> 00:13:04,790
0,660 660,660 2130,2640 2640,3030 3030,3150
both um both {CPU's -}

400
00:13:04,790 --> 00:13:06,860
0,240 240,720 720,1050 1050,1560 1590,2070
gonna call k free roughly

401
00:13:06,860 --> 00:13:08,300
0,90 90,180 180,420 420,810
at the same time.

402
00:13:13,460 --> 00:13:14,510
0,240 240,390 390,780 780,840 840,1050
Okay so look a little

403
00:13:14,510 --> 00:13:15,440
0,150 150,240 240,330 330,570 570,930
bit at the code again

404
00:13:15,440 --> 00:13:16,280
0,210 210,270 270,450 450,690 690,840
just to make sure that

405
00:13:16,280 --> 00:13:17,810
0,540 570,930 1020,1350 1350,1440 1440,1530
we have running in our

406
00:13:17,810 --> 00:13:18,650
0,300 300,450 450,600 600,750 750,840
heads, so we look at

407
00:13:18,650 --> 00:13:20,780
0,240 240,750 1140,1710 1710,1830 1830,2130
k three, um, you know

408
00:13:20,780 --> 00:13:23,120
0,180 180,690 690,1140 1170,1890 1920,2340
get passing some pa, a

409
00:13:23,120 --> 00:13:24,830
0,330 330,960 1230,1440 1440,1590 1590,1710
physical address, um that we're

410
00:13:24,830 --> 00:13:26,210
0,150 150,450 450,570 570,960 960,1380
gonna use to actually hook

411
00:13:26,210 --> 00:13:28,130
0,750 900,1200 1200,1290 1290,1470 1470,1920
up into the free list.

412
00:13:29,000 --> 00:13:31,940
0,600 960,1440 1710,1830 1830,1950 1950,2940
Um, so you know CPU

413
00:13:32,240 --> 00:13:35,750
0,630 630,1350 1470,2250 2490,2970 2970,3510
zero has a no AR.

414
00:13:36,770 --> 00:13:39,470
0,690 690,1200 1650,1860 1860,2340 2340,2700
Um, and that's pointing to

415
00:13:39,470 --> 00:13:42,230
0,420 420,720 720,930 930,1530 2070,2760
some no free page and

416
00:13:42,230 --> 00:13:45,440
0,810 1200,1980 2310,2520 2520,2790 2790,3210
um, maybe yeah and CPU,

417
00:13:45,440 --> 00:13:47,020
0,360 360,570 570,1050
one has one.

418
00:13:47,080 --> 00:13:48,190
0,150 150,420 420,570 570,840 840,1110
We actually use another color

419
00:13:48,190 --> 00:13:49,660
0,120 120,450 450,900
for CPU one.

420
00:13:49,660 --> 00:13:51,220
0,90 90,330 330,480 480,1050 1050,1560
So if you Su are

421
00:13:51,640 --> 00:13:53,590
0,450 450,1050 1050,1170 1170,1380 1380,1950
always pointing to some page

422
00:13:53,590 --> 00:13:54,430
0,120 120,240 240,540 540,660 660,840
you know that we want

423
00:13:54,430 --> 00:13:55,090
0,60 60,210 210,390 390,510 510,660
to hook into the free

424
00:13:55,090 --> 00:13:55,980
0,450
list.

425
00:13:56,450 --> 00:13:57,600
0,240 240,600
Makes sense.

426
00:13:59,050 --> 00:14:00,010
0,240 240,570 570,690 690,810 810,960
And so you know we're

427
00:14:00,010 --> 00:14:01,210
0,180 180,420 420,480 480,540 540,1200
looking back at the code,

428
00:14:01,240 --> 00:14:03,130
0,630 1170,1380 1380,1500 1500,1740 1740,1890
you know the first thing

429
00:14:03,130 --> 00:14:04,450
0,120 120,540 540,1050 1050,1170 1170,1320
they do is you know

430
00:14:04,450 --> 00:14:06,790
0,420 420,570 570,960 960,1290 1290,2340
update our next pointer to

431
00:14:06,850 --> 00:14:07,810
0,360 360,450 450,570 570,870 870,960
point to the cake to

432
00:14:07,810 --> 00:14:08,880
0,120 120,270 270,690
the free list.

433
00:14:09,210 --> 00:14:11,040
0,480 510,840 840,1530 1560,1680 1680,1830
So let's assume you know

434
00:14:11,040 --> 00:14:13,290
0,540 540,870 870,1260 1260,1830 1950,2250
that CPU one runs a

435
00:14:13,290 --> 00:14:15,570
0,540 960,1590 1890,1980 1980,2070 2070,2280
first and you know what

436
00:14:15,570 --> 00:14:16,680
0,180 180,300 300,630 630,930 930,1110
it will do is will

437
00:14:16,680 --> 00:14:18,180
0,240 240,390 390,1050
put its pointer.

438
00:14:18,550 --> 00:14:20,200
0,120 120,240 240,930 1110,1290 1290,1650
You know to the beginning

439
00:14:20,200 --> 00:14:21,540
0,210 210,690
of the.

440
00:14:22,000 --> 00:14:23,890
0,510 540,870 870,1440 1440,1620 1620,1890
Um, yeah wherever free lasers

441
00:14:23,890 --> 00:14:24,940
0,300 300,510
pointed to.

442
00:14:25,090 --> 00:14:26,950
0,540 540,1050 1050,1290 1290,1590 1590,1860
A if your CPU on

443
00:14:26,950 --> 00:14:28,060
0,270 270,720 720,780 780,870 870,1110
runs exactly at the same

444
00:14:28,060 --> 00:14:30,970
0,600 930,1320 1320,2010 2160,2790 2790,2910
time, um, then, um, you

445
00:14:30,970 --> 00:14:31,780
0,300
know.

446
00:14:31,870 --> 00:14:34,990
0,630 810,1140 1140,1530 1530,2040 2070,3120
A it could run before

447
00:14:35,080 --> 00:14:36,610
0,390 390,720 720,1110 1110,1170 1170,1530
CPU zero executes the second

448
00:14:36,610 --> 00:14:38,320
0,660 960,1170 1170,1260 1260,1500 1500,1710
instruction so it actually might

449
00:14:38,320 --> 00:14:39,310
0,90 90,210 210,420 420,720 720,990
do the same thing, it

450
00:14:39,310 --> 00:14:40,450
0,210 210,450 450,780 780,960 960,1140
might actually also run that

451
00:14:40,450 --> 00:14:42,880
0,240 240,810 1110,1290 1290,1920
first instruction and update.

452
00:14:43,140 --> 00:14:44,240
0,600
I'm.

453
00:14:51,340 --> 00:14:52,810
0,210 210,750 750,840 840,1140 1140,1470
And update the pointer to.

454
00:14:54,030 --> 00:14:56,430
0,390 390,870 1260,1950 1980,2070 2070,2400
Today, though harsh no one

455
00:14:56,430 --> 00:14:57,630
0,120 120,480 480,810 810,1080 1080,1200
from CPU one and from

456
00:14:57,630 --> 00:14:58,980
0,300 300,570 570,780 780,1140 1140,1350
CPU zero one CPU one

457
00:14:58,980 --> 00:14:59,820
0,150 150,420 420,510 510,570 570,840
are pointing to the beginning

458
00:14:59,820 --> 00:15:00,510
0,90 90,150 150,360 360,570 570,690
of the field list and

459
00:15:00,510 --> 00:15:01,500
0,180 180,420 420,510 510,720 720,990
the list is also pointing

460
00:15:01,500 --> 00:15:02,760
0,120 120,390 720,1110 1110,1170 1170,1260
to the beginning of the

461
00:15:02,760 --> 00:15:03,780
0,180 180,570
field list.

462
00:15:03,930 --> 00:15:04,680
0,180 180,360 360,480 480,510 510,750
So now there are two

463
00:15:04,680 --> 00:15:05,880
0,360 360,840 840,960 960,1020 1020,1200
remaining instructions that are being

464
00:15:05,880 --> 00:15:07,580
0,510 510,570 570,1140
executed in parallel.

465
00:15:07,730 --> 00:15:08,960
0,210 210,360 360,450 450,750 750,1230
So we go back again,

466
00:15:09,020 --> 00:15:10,700
0,120 120,300 300,390 390,870 1260,1680
you know the code, the

467
00:15:10,700 --> 00:15:12,500
0,420 420,840 840,1020 1020,1230 1230,1800
remaining instruction is being executed

468
00:15:12,500 --> 00:15:13,580
0,150 150,420 420,810 810,930 930,1080
is actually updating the free

469
00:15:13,580 --> 00:15:14,630
0,300 300,360 360,570 570,690 690,1050
list to point to our

470
00:15:14,900 --> 00:15:16,360
0,960
Noah.

471
00:15:17,040 --> 00:15:18,720
0,270 270,780 960,1350 1350,1440 1440,1680
And so, um, you know

472
00:15:19,650 --> 00:15:20,580
0,180 180,480 480,720 720,870 870,930
zero zero one going to

473
00:15:20,580 --> 00:15:21,660
0,360 360,510 510,870 870,990 990,1080
execute these instructions may be

474
00:15:21,660 --> 00:15:24,060
0,510 510,630 630,1170 1170,2040 2040,2400
exactly the same yeah roughly

475
00:15:24,060 --> 00:15:24,990
0,60 60,120 120,330 330,720 750,930
at the same time, but

476
00:15:24,990 --> 00:15:25,860
0,150 150,240 240,390 390,510 510,870
one is gonna go first

477
00:15:25,860 --> 00:15:27,120
0,210 210,330 330,540 540,840 840,1260
correct there's only one single

478
00:15:27,120 --> 00:15:29,010
0,240 240,750 1140,1560 1560,1680 1680,1890
shared memory and so one

479
00:15:29,010 --> 00:15:29,760
0,330 330,420 420,540 540,600 600,750
update is going to go

480
00:15:29,760 --> 00:15:30,870
0,450 510,720 720,810 810,930 930,1110
first and the other one

481
00:15:30,870 --> 00:15:32,200
0,90 90,240 240,360 360,840
is gonna go second.

482
00:15:32,290 --> 00:15:33,640
0,180 180,330 330,480 480,870 870,1350
So let's say CPU one

483
00:15:33,670 --> 00:15:35,180
0,480 480,960
goes first.

484
00:15:35,240 --> 00:15:36,290
0,90 90,270 270,720 720,840 840,1050
I know what will then

485
00:15:36,290 --> 00:15:37,640
0,330 330,720 750,840 840,1140 1140,1350
happen well the CBO what

486
00:15:37,640 --> 00:15:38,690
0,150 150,450 450,630 630,960 960,1050
goes first free listings can

487
00:15:38,690 --> 00:15:40,420
0,150 150,480 480,600 600,1170
be pointing to HR.

488
00:15:40,420 --> 00:15:41,280
0,330
Right.

489
00:15:42,200 --> 00:15:44,210
0,420 420,600 600,900 900,1440 1440,2010
Um, and then CPU runs

490
00:15:44,240 --> 00:15:46,220
0,180 180,720 750,1200 1200,1500 1500,1980
so now CPU runs x86

491
00:15:46,220 --> 00:15:48,140
0,690 990,1410 1410,1560 1560,1770 1770,1920
instruction and so what is

492
00:15:48,140 --> 00:15:49,160
0,120 120,180 180,600 630,870 870,1020
going to do, it is

493
00:15:49,160 --> 00:15:50,870
0,300 300,360 360,750 780,1440 1500,1710
going to actually update a

494
00:15:50,870 --> 00:15:53,140
0,210 210,630 990,1170 1170,1740
free listen to point.

495
00:15:55,340 --> 00:15:56,750
0,210 420,630 630,750 750,930 930,1410
So here's a free list.

496
00:15:58,000 --> 00:15:59,020
0,300 300,480 480,780 780,810 810,1020
And it's actually a good

497
00:15:59,020 --> 00:16:00,520
0,390 390,930
point, too.

498
00:16:00,900 --> 00:16:02,580
0,510 510,660 660,1080 1080,1440 1440,1680
Are they actually passed in.

499
00:16:03,230 --> 00:16:04,130
0,150 150,510 510,600 600,750 750,900
And so you know we

500
00:16:04,130 --> 00:16:05,300
0,120 120,180 180,480 480,810 810,1170
have a setting now correct

501
00:16:05,300 --> 00:16:07,850
0,570 690,1020 1020,1680 1710,2310 2310,2550
we're we've lost basically one

502
00:16:07,850 --> 00:16:08,960
0,630
page.

503
00:16:08,960 --> 00:16:09,900
0,570
Yeah.

504
00:16:10,880 --> 00:16:12,320
0,570 600,720 720,840 840,1140 1140,1440
Or you know that actually

505
00:16:12,320 --> 00:16:14,510
0,420 420,840 840,1260 1260,1650 1830,2190
CPU zero electric three actually

506
00:16:14,510 --> 00:16:15,680
0,240 240,390 390,750 750,1020 1020,1170
ended up not being on

507
00:16:15,680 --> 00:16:16,580
0,60 60,240 240,480 480,600 600,900
the free list at all,

508
00:16:16,970 --> 00:16:18,320
0,270 270,450 450,780 780,870 870,1350
so we lost the page.

509
00:16:22,680 --> 00:16:24,120
0,570 570,750 750,930 930,1380 1380,1440
Um, and as one you

510
00:16:24,120 --> 00:16:25,920
0,360 390,930 930,1320 1320,1680 1680,1800
know bad particular outcome, of

511
00:16:25,920 --> 00:16:26,790
0,180 180,270 270,390 390,480 480,870
course there could be more

512
00:16:26,790 --> 00:16:28,110
0,270 270,810 810,1080 1080,1200 1200,1320
bad outcomes because there could

513
00:16:28,110 --> 00:16:29,310
0,90 90,330 330,570 570,960 960,1200
be more ship use actually

514
00:16:29,310 --> 00:16:30,180
0,300 300,390 390,540 540,690 690,870
trying to do this free

515
00:16:30,180 --> 00:16:32,370
0,510 840,1140 1140,1290 1290,1500 1500,2190
list, um, they may observe

516
00:16:32,370 --> 00:16:33,420
0,300 300,510 510,630 630,720 720,1050
the one of the male

517
00:16:33,420 --> 00:16:35,430
0,300 300,510 540,960 960,1290 1290,2010
giraffe, the realist pointing temporarily

518
00:16:35,430 --> 00:16:37,800
0,180 180,750 750,840 840,1620 1710,2370
to CPU with zeros are

519
00:16:38,040 --> 00:16:39,090
0,420 420,600 600,690 690,810 810,1050
um, and so we start

520
00:16:39,090 --> 00:16:41,490
0,240 240,750 1020,1620 1620,1950 1950,2400
using that while then immediately

521
00:16:41,490 --> 00:16:43,560
0,90 90,270 270,540 540,1110 1260,2070
the three losers updated by

522
00:16:43,590 --> 00:16:45,420
0,330 360,690 690,1080 1110,1470 1560,1830
a second CPU so that

523
00:16:45,420 --> 00:16:47,010
0,150 150,480 480,1110 1110,1470 1470,1590
more shippers evolved presumably we

524
00:16:47,010 --> 00:16:48,360
0,150 150,420 420,600 600,870 870,1350
could actually get more bizarre

525
00:16:48,360 --> 00:16:49,920
0,420 420,720 780,1140 1140,1230 1230,1560
outcomes than just the last

526
00:16:49,920 --> 00:16:50,620
0,420
page.

527
00:16:52,310 --> 00:16:53,700
0,120 120,270 270,420 420,810
Does this make sense.

528
00:16:55,750 --> 00:16:57,300
0,330 330,1050
Any questions.

529
00:17:04,820 --> 00:17:06,740
0,540 750,1350
Okay, I'm.

530
00:17:07,220 --> 00:17:08,390
0,180 180,300 300,810 840,1020 1020,1170
So do we, you know

531
00:17:08,390 --> 00:17:09,650
0,420 420,510 510,900 900,1020 1020,1260
ask you know the code

532
00:17:09,650 --> 00:17:10,880
0,450 450,540 540,660 660,750 750,1230
does you know the way

533
00:17:10,910 --> 00:17:13,790
0,90 90,360 360,630 630,1710 2010,2880
to address this a way

534
00:17:13,790 --> 00:17:15,140
0,150 150,210 210,600 600,960 960,1350
in a very common way,

535
00:17:15,440 --> 00:17:16,730
0,570 570,780 780,870 870,1140 1140,1290
um is to address this

536
00:17:16,730 --> 00:17:18,740
0,540 780,1200 1200,1320 1320,1860 1860,2010
problem is to use a

537
00:17:18,740 --> 00:17:19,660
0,450
walk.

538
00:17:19,970 --> 00:17:20,570
0,210 210,330 330,420 420,570 570,600
So let me talk a

539
00:17:20,570 --> 00:17:22,370
0,210 210,330 330,540 540,1050 1410,1800
little bit about locks, um

540
00:17:22,370 --> 00:17:23,720
0,240 240,390 390,840
in more detail.

541
00:17:26,860 --> 00:17:29,320
0,180 180,750 1860,2040 2040,2160 2160,2460
So what was the walk

542
00:17:29,320 --> 00:17:30,740
0,810
abstraction.

543
00:17:32,480 --> 00:17:33,890
0,570 750,900 900,1080 1080,1170 1170,1410
Well, now it is just

544
00:17:33,890 --> 00:17:35,300
0,120 120,750 750,900 900,1140 1140,1410
an object like any other

545
00:17:35,300 --> 00:17:36,920
0,300 600,750 750,1470 1470,1560 1560,1620
sort of object in the

546
00:17:36,920 --> 00:17:39,050
0,600 810,1200 1200,1470 1470,1590 1590,2130
kernel and anyone else has

547
00:17:39,740 --> 00:17:40,640
0,120 120,330 330,480 480,720 720,900
in fact there's something called

548
00:17:40,640 --> 00:17:41,960
0,270 270,810
struck blog.

549
00:17:41,960 --> 00:17:42,680
0,60 60,150 150,300 300,540 540,720
You know, that has some

550
00:17:42,680 --> 00:17:44,630
0,600 990,1110 1110,1230 1230,1530 1560,1950
fields, you know to maintain

551
00:17:44,630 --> 00:17:47,240
0,300 300,540 540,1050 1380,1920 1920,2610
state about locks, um, and

552
00:17:47,300 --> 00:17:48,650
0,150 150,330 330,480 510,750 750,1350
it has a pretty straightforward

553
00:17:48,650 --> 00:17:50,360
0,810 810,1050 1050,1170 1170,1470 1470,1710
API, you know there's a.

554
00:17:51,190 --> 00:17:52,150
0,570 570,660 660,840 840,930 930,960
Acquired in fact there are

555
00:17:52,150 --> 00:17:54,100
0,240 240,420 420,1050 1080,1440 1440,1950
only two calls into this

556
00:17:54,220 --> 00:17:57,240
0,810 1230,1680 1680,2310
abstraction a which.

557
00:17:58,540 --> 00:18:00,100
0,150 150,600 600,780 780,1020 1020,1560
The car which takes to

558
00:18:00,490 --> 00:18:02,980
0,90 90,660 660,1200 1200,2010 2040,2490
a pointer to a lock

559
00:18:02,980 --> 00:18:05,700
0,510 810,1290 1290,1560 1560,2220
struck and a release.

560
00:18:06,590 --> 00:18:09,020
0,840 840,960 960,1200 1200,1740
You know that actually.

561
00:18:09,020 --> 00:18:10,850
0,990 990,1170 1170,1350 1350,1410 1410,1830
Um, also takes a pointer

562
00:18:10,850 --> 00:18:12,950
0,210 210,600 960,1170 1170,1560 1560,2100
lock structure to basically update

563
00:18:12,950 --> 00:18:14,000
0,90 90,180 180,300 300,540 540,1050
you know the lock object.

564
00:18:14,900 --> 00:18:15,980
0,270 270,630 630,750 750,1020 1020,1080
And basically the rule of

565
00:18:15,980 --> 00:18:17,330
0,360 360,450 450,690 690,1020 1020,1350
law and the rule here

566
00:18:17,330 --> 00:18:19,420
0,120 120,510 930,1560
is that um.

567
00:18:20,020 --> 00:18:22,020
0,480 750,1530
The choir.

568
00:18:23,140 --> 00:18:25,240
0,480 510,1020 1020,1200 1200,1710 1740,2100
A enforces, this um following

569
00:18:25,240 --> 00:18:27,370
0,180 180,360 360,600 600,1320 1350,2130
rule that only one process.

570
00:18:30,940 --> 00:18:32,230
0,210 210,360 360,900 900,1140 1140,1290
You can enter or can

571
00:18:32,230 --> 00:18:33,680
0,450 450,540 540,930
acquire the lock.

572
00:18:37,950 --> 00:18:39,000
0,210 210,420 420,810 810,990 990,1050
So any particular point of

573
00:18:39,000 --> 00:18:40,140
0,570
time.

574
00:18:40,140 --> 00:18:40,920
0,240 240,480 480,600 600,660 660,780
They're only going to be

575
00:18:40,920 --> 00:18:42,240
0,360 360,810 810,930 930,1020 1020,1320
one process that is able

576
00:18:42,240 --> 00:18:44,010
0,120 120,570 570,1200 1200,1680 1680,1770
to actually successfully acquire the

577
00:18:44,010 --> 00:18:45,600
0,390 720,930 930,990 990,1200 1200,1590
lock and the other process

578
00:18:45,600 --> 00:18:46,920
0,120 120,450 450,780 780,1260 1260,1320
that physical strength acquired a

579
00:18:46,920 --> 00:18:48,150
0,270 270,330 330,420 420,690 690,1230
lock at the same time

580
00:18:48,180 --> 00:18:49,350
0,240 240,360 360,780 780,1080 1080,1170
has to wait until the

581
00:18:49,350 --> 00:18:51,000
0,330 330,660 660,900 900,1170 1170,1650
first process actually calls release.

582
00:18:52,560 --> 00:18:54,600
0,210 210,330 330,960 990,1800 1920,2040
And so this sequence you

583
00:18:54,600 --> 00:18:56,550
0,240 240,810 810,1740 1740,1860 1860,1950
know the instructions, you know

584
00:18:56,550 --> 00:18:59,790
0,840 1080,1290 1290,1740 1740,2370 2610,3240
between the acquired Louise are

585
00:18:59,790 --> 00:19:01,020
0,150 150,360 360,420 420,750 750,1230
ever called the critical section.

586
00:19:07,720 --> 00:19:08,650
0,240 240,480 480,690 690,750 750,930
And one reason is called

587
00:19:08,650 --> 00:19:09,970
0,60 60,360 360,690 690,900 900,1320
the critical section is because

588
00:19:09,970 --> 00:19:11,110
0,420 420,510 510,660 660,780 780,1140
this is sort of the

589
00:19:11,320 --> 00:19:12,820
0,300 300,450 450,720 720,1110 1110,1500
um, the huge destruction together

590
00:19:12,820 --> 00:19:14,740
0,120 120,360 360,750 780,1470 1560,1920
to do the you need

591
00:19:14,740 --> 00:19:16,090
0,60 60,210 210,360 360,1140 1140,1350
to do the update to

592
00:19:16,090 --> 00:19:17,560
0,360 360,690 690,930 930,1140 1140,1470
our whatever shared data structure,

593
00:19:17,560 --> 00:19:18,850
0,240 240,660 660,780 780,900 900,1290
that's protected by the lock

594
00:19:19,090 --> 00:19:20,680
0,150 150,270 270,690 690,1080
in an atomic fashion.

595
00:19:21,090 --> 00:19:22,920
0,300 300,480 480,990 990,1140 1140,1830
Um, and ensures that basically,

596
00:19:23,460 --> 00:19:24,510
0,240 240,390 390,510 510,690 690,1050
um, if you have multiple

597
00:19:24,510 --> 00:19:26,100
0,570 570,780 780,1140 1140,1230 1230,1590
instructions in this you know

598
00:19:26,370 --> 00:19:28,320
0,660 660,1050 1050,1500 1500,1770 1770,1950
between decline release but they

599
00:19:28,320 --> 00:19:31,500
0,510 510,690 690,1380 1680,2340 2520,3180
all are executed all together

600
00:19:31,800 --> 00:19:33,080
0,300 300,750
or none.

601
00:19:33,800 --> 00:19:35,030
0,150 150,360 360,690 690,720 720,1230
So there's never a case,

602
00:19:35,030 --> 00:19:36,590
0,600 600,1110 1110,1200 1200,1260 1260,1560
these instructions in the critical

603
00:19:36,590 --> 00:19:38,870
0,540 630,870 870,1680 1890,2190 2190,2280
section are interleaved as in

604
00:19:38,870 --> 00:19:39,650
0,120 120,330 330,480 480,570 570,780
the way that we saw

605
00:19:39,650 --> 00:19:41,060
0,90 90,150 150,330 330,780 1260,1410
in the race conditions and

606
00:19:41,060 --> 00:19:42,440
0,300 300,750 750,930 930,1020 1020,1380
actually exactly, that is what

607
00:19:42,440 --> 00:19:44,220
0,360 360,540 540,750 750,1410
boards these race conditions.

608
00:19:48,190 --> 00:19:49,420
0,210 210,540 540,810 810,990 990,1230
Any questions about the lock

609
00:19:49,420 --> 00:19:50,580
0,600
obstruction.

610
00:19:55,220 --> 00:19:56,720
0,240 240,900
No programs.

611
00:19:56,780 --> 00:19:58,860
0,420 420,870 870,1530
A typically have.

612
00:20:00,270 --> 00:20:02,130
0,360 360,900 990,1200 1200,1470 1470,1860
Many locks, in fact we

613
00:20:02,400 --> 00:20:03,300
0,150 150,330 330,540 540,690 690,900
have two six has many

614
00:20:03,300 --> 00:20:04,320
0,450
locks.

615
00:20:08,140 --> 00:20:09,250
0,300 300,390 390,660 660,780 780,1110
And the reason to have

616
00:20:09,250 --> 00:20:10,360
0,270 270,600 600,690 690,990 990,1110
many locks is because you

617
00:20:10,360 --> 00:20:11,290
0,210 210,480 480,660 660,810 810,930
know even though you know

618
00:20:11,290 --> 00:20:14,020
0,540 540,840 1140,1800 1800,2490 2490,2730
the the walk serialize is

619
00:20:14,020 --> 00:20:16,060
0,270 270,840 1020,1110 1110,1290 1290,2040
the execution of two processes

620
00:20:16,060 --> 00:20:17,830
0,270 270,540 540,1320 1380,1650 1650,1770
you want to enter the

621
00:20:17,830 --> 00:20:19,330
0,300 300,630 630,840 840,1020 1020,1500
critical section only one succeeds,

622
00:20:19,330 --> 00:20:21,520
0,270 270,330 330,510 510,930 1110,2190
and the other one runs

623
00:20:21,520 --> 00:20:22,660
0,120 120,390 390,690 690,1020 1020,1140
that critical section after the

624
00:20:22,660 --> 00:20:25,360
0,210 210,570 720,1770 1770,1830 2190,2700
first one a it finishes

625
00:20:25,540 --> 00:20:27,160
0,150 150,360 360,870 870,1080 1080,1620
so there's no true parallelism

626
00:20:27,160 --> 00:20:28,040
0,120 120,480
at all.

627
00:20:28,500 --> 00:20:29,820
0,240 240,570 660,930 930,1020 1020,1320
Um, so if the colonel

628
00:20:29,820 --> 00:20:31,560
0,150 150,390 390,720 720,1260 1290,1740
had only one walk, which

629
00:20:31,560 --> 00:20:32,760
0,210 210,480 480,840 840,990 990,1200
is typically called a big

630
00:20:32,760 --> 00:20:34,710
0,300 300,630 780,1020 1020,1590 1620,1950
kernel lock, then basically every

631
00:20:34,710 --> 00:20:36,630
0,390 390,930 1260,1530 1530,1710 1710,1920
system call, um, in this

632
00:20:36,630 --> 00:20:37,650
0,390 390,510 510,570 570,870 870,1020
um in the kernel would

633
00:20:37,650 --> 00:20:40,380
0,90 90,780 1590,1890 1890,2250 2250,2730
be sterilized system called one

634
00:20:40,440 --> 00:20:42,000
0,570 870,1140 1140,1200 1200,1470 1470,1560
start gets the one the

635
00:20:42,000 --> 00:20:43,590
0,210 210,510 510,1020 1020,1320 1320,1590
big kernel lock does whatever

636
00:20:43,590 --> 00:20:44,430
0,60 60,270 270,360 360,720 720,840
it needs to do and

637
00:20:44,430 --> 00:20:45,630
0,330 330,660 660,750 750,930 930,1200
then release the big kernel

638
00:20:45,630 --> 00:20:46,770
0,240 240,330 330,450 450,840 840,1140
lock and then basically returns

639
00:20:46,770 --> 00:20:47,860
0,300 300,720
use space.

640
00:20:48,220 --> 00:20:49,180
0,390 390,510 510,660 660,720 720,960
Um, and then the second

641
00:20:49,180 --> 00:20:50,590
0,240 240,420 420,480 480,810 1200,1410
system called the drug so

642
00:20:50,590 --> 00:20:51,970
0,150 150,270 270,360 360,810 810,1380
we have an apparel application

643
00:20:51,970 --> 00:20:53,110
0,180 180,510 510,870 870,960 960,1140
that runs lots of runs

644
00:20:53,110 --> 00:20:54,820
0,240 240,450 450,510 510,1170 1200,1710
system calls in parallel, suddenly

645
00:20:54,820 --> 00:20:56,290
0,90 90,270 270,660 660,1110 1140,1470
you know all the system

646
00:20:56,290 --> 00:20:57,910
0,300 300,570 570,900 900,1440 1440,1620
calls actually run surely if

647
00:20:57,910 --> 00:20:58,960
0,90 90,270 270,480 480,690 690,1050
we had only one lock.

648
00:20:59,880 --> 00:21:01,650
0,240 240,690 750,1230 1230,1380 1380,1770
And so typically your program

649
00:21:01,650 --> 00:21:02,670
0,270 270,360 360,450 450,720 720,1020
like you know actually six

650
00:21:02,670 --> 00:21:04,170
0,600 600,720 720,840 840,1080 1080,1500
has you know many walks

651
00:21:04,170 --> 00:21:05,310
0,270 270,360 360,810 810,900 900,1140
because of these, you know

652
00:21:05,310 --> 00:21:06,360
0,120 120,210 210,360 360,510 510,1050
we can get some parallelism.

653
00:21:09,670 --> 00:21:10,760
0,540
Because.

654
00:21:13,350 --> 00:21:14,310
0,120 120,210 210,660 690,840 840,960
You know if you know

655
00:21:14,310 --> 00:21:15,810
0,300 300,600 600,840 840,900 900,1500
two system calls for example

656
00:21:15,810 --> 00:21:17,940
0,240 240,420 420,720 720,1260 1560,2130
use two different blocks, um,

657
00:21:17,970 --> 00:21:18,930
0,510 510,600 600,690 690,870 870,960
then you know they can

658
00:21:18,930 --> 00:21:21,060
0,210 210,630 720,1080 1080,1530 1530,2130
actually around a completely parallel,

659
00:21:21,270 --> 00:21:23,670
0,360 360,840 840,1260 1260,1920 2010,2400
um, without any um zero

660
00:21:23,670 --> 00:21:26,070
0,630 1020,1530 1530,2070 2070,2160 2160,2400
realization because basically you know

661
00:21:26,100 --> 00:21:28,360
0,630 630,900 900,1200 1200,1890
using different walks sterilized.

662
00:21:29,790 --> 00:21:30,980
0,630
I'm.

663
00:21:31,070 --> 00:21:33,120
0,630 810,1500
Now, um.

664
00:21:34,040 --> 00:21:35,570
0,390 390,810 810,1050 1050,1110 1110,1530
There's a couple of important

665
00:21:35,570 --> 00:21:39,560
0,480 810,1710 2070,2820 3060,3780 3780,3990
points a the nobody really

666
00:21:39,560 --> 00:21:40,550
0,150 150,270 270,720 720,810 810,990
sort of forces in this

667
00:21:40,550 --> 00:21:41,960
0,720 720,870 870,990 990,1290 1290,1410
interface, you know that you

668
00:21:41,960 --> 00:21:43,790
0,210 210,450 450,840 840,1380 1380,1830
put in the acquiring release,

669
00:21:43,790 --> 00:21:44,300
0,90 90,180 180,300 300,450 450,510
you know it's up to

670
00:21:44,300 --> 00:21:45,410
0,120 120,540 540,630 630,780 780,1110
the program to do so.

671
00:21:46,010 --> 00:21:47,090
0,240 240,390 390,480 480,780 780,1080
Um, so if you want

672
00:21:47,090 --> 00:21:47,930
0,60 60,360 360,540 540,600 600,840
a particular piece of code

673
00:21:47,930 --> 00:21:51,260
0,90 90,630 660,1710 1710,2250 2610,3330
to be a atomic then

674
00:21:51,290 --> 00:21:52,280
0,150 150,300 300,390 390,540 540,990
it's up to the developer

675
00:21:52,280 --> 00:21:54,410
0,120 120,690 720,1200 1200,1710 1710,2130
to actually bookies require releases

676
00:21:54,410 --> 00:21:55,140
0,150
it.

677
00:21:55,230 --> 00:21:57,480
0,210 210,450 450,1050 1050,1440 1470,2250
And their calculations C A

678
00:21:57,480 --> 00:22:00,120
0,390 390,510 510,1020 1320,1980
you can imagine, um.

679
00:22:00,300 --> 00:22:01,560
0,360 360,510 510,540 540,690 690,1260
Now there's a little bit

680
00:22:01,560 --> 00:22:02,670
0,150 150,240 240,660 870,1020 1020,1110
can be tricky, so it's

681
00:22:02,670 --> 00:22:03,750
0,330 330,390 390,840 840,960 960,1080
important to realize that you

682
00:22:03,750 --> 00:22:04,890
0,90 90,270 300,690 690,780 780,1140
know that walking is not

683
00:22:04,890 --> 00:22:06,630
0,270 270,510 510,1110 1110,1410 1410,1740
actually done automatically for you

684
00:22:06,870 --> 00:22:08,100
0,390 390,630 630,870 870,1050 1050,1230
um, it's all up to

685
00:22:08,100 --> 00:22:09,900
0,600 630,1230 1230,1320 1320,1620 1620,1800
the developer to figure out

686
00:22:09,900 --> 00:22:12,000
0,300 330,960 960,1290 1290,1650
to associate walks with.

687
00:22:12,000 --> 00:22:15,570
0,780 810,1170 1170,1800 2100,3000 3000,3570
Um, data structures and ensuring

688
00:22:15,570 --> 00:22:18,150
0,300 300,1020 1020,1470 1470,1950 1950,2580
that z appropriate acquire releases

689
00:22:18,180 --> 00:22:19,540
0,300 300,480 480,840
a our debt.

690
00:22:23,050 --> 00:22:24,850
0,540 690,930 930,1440 1440,1530 1530,1800
I'm so clearly the case

691
00:22:24,850 --> 00:22:27,910
0,210 210,300 300,690 780,2220 2580,3060
look you know zac walks

692
00:22:27,910 --> 00:22:30,010
0,780 810,1260 1260,1470 1470,2010 2010,2100
a limit in parallelism, and

693
00:22:30,010 --> 00:22:32,620
0,360 360,840 840,1500 1800,2400 2400,2610
therefore limit performance, um, and

694
00:22:32,620 --> 00:22:33,730
0,120 120,540 540,720 720,1050 1050,1110
so then this raises the

695
00:22:33,730 --> 00:22:35,540
0,420 420,690 690,810 810,1350
question when to walk.

696
00:22:42,710 --> 00:22:43,820
0,540 600,810 810,930 930,990 990,1110
And I'm going to give

697
00:22:43,820 --> 00:22:45,950
0,90 90,270 270,360 360,1530 1530,2130
you sort of a conservative

698
00:22:45,950 --> 00:22:48,110
0,480 690,1200 1560,1920 1920,2100 2100,2160
rule, um but it's a

699
00:22:48,110 --> 00:22:49,100
0,150 150,420 420,600 600,660 660,990
good one as a starting

700
00:22:49,100 --> 00:22:50,150
0,180 180,270 270,450 450,690 690,1050
point to think about things.

701
00:22:50,680 --> 00:22:52,800
0,330 330,450 450,990 990,1500
So the conservative rule.

702
00:22:56,930 --> 00:22:58,910
0,270 270,570 570,1260 1260,1470 1470,1980
Or maybe guidelines are better,

703
00:22:58,910 --> 00:22:59,860
0,660
um.

704
00:23:00,090 --> 00:23:01,860
0,240 240,810 990,1170 1170,1470 1470,1770
A freezing is that you

705
00:23:01,860 --> 00:23:03,660
0,150 150,330 330,1170
have two processes.

706
00:23:05,740 --> 00:23:08,400
0,330 330,1080 1110,1950
To process access.

707
00:23:09,280 --> 00:23:11,080
0,180 180,360 360,600 600,1230
If your data structure.

708
00:23:17,130 --> 00:23:18,990
0,210 210,480 480,660 660,1020 1470,1860
And one is a one

709
00:23:18,990 --> 00:23:20,480
0,120 120,240 240,690
of the meter.

710
00:23:20,750 --> 00:23:22,100
0,210 210,690 690,900 900,960 960,1350
A writer or an update

711
00:23:22,100 --> 00:23:24,110
0,270 360,630 630,1170 1650,1770 1770,2010
or so meaning it's actually

712
00:23:24,110 --> 00:23:25,310
0,150 150,630 630,720 720,930 930,1200
been modified to share data

713
00:23:25,310 --> 00:23:26,420
0,570
structure.

714
00:23:27,050 --> 00:23:28,820
0,720 930,1230 1230,1350 1350,1440 1440,1770
Then you need to walk

715
00:23:28,820 --> 00:23:30,300
0,120 120,210 210,450 450,930
for the data structure.

716
00:23:40,620 --> 00:23:41,610
0,180 180,360 360,420 420,480 480,990
So this is a conservative

717
00:23:41,610 --> 00:23:42,630
0,210 360,630 630,720 720,900 900,1020
rule sort of like a

718
00:23:42,630 --> 00:23:44,550
0,240 240,780 840,1080 1080,1260 1260,1920
red flag when you're programming

719
00:23:44,550 --> 00:23:47,190
0,900 1020,1230 1230,1680 1680,2430 2430,2640
and you have a data

720
00:23:47,190 --> 00:23:48,360
0,420 420,540 540,660 660,990 990,1170
structure that is accessed by

721
00:23:48,360 --> 00:23:49,800
0,360 360,990 990,1110 1110,1320 1320,1440
multiple processes and what could

722
00:23:49,800 --> 00:23:50,820
0,90 90,150 150,660 720,870 870,1020
be a writer at that

723
00:23:50,820 --> 00:23:51,960
0,240 240,450 450,660 660,780 780,1140
point you should be thinking

724
00:23:51,960 --> 00:23:53,130
0,300 300,510 510,570 570,1080 1080,1170
okay, there's a possibility of

725
00:23:53,130 --> 00:23:54,510
0,240 240,780 960,1050 1050,1230 1230,1380
race condition, you want to

726
00:23:54,510 --> 00:23:55,530
0,360 360,600 600,780 780,840 840,1020
avoid this in a race

727
00:23:55,530 --> 00:23:57,090
0,510 750,1080 1080,1350 1350,1470 1470,1560
condition you stick in a

728
00:23:57,090 --> 00:23:58,320
0,510 540,660 660,990 990,1170 1170,1230
lock I will use a

729
00:23:58,320 --> 00:24:00,360
0,390 390,630 630,1230 1260,1920 1920,2040
lock to a guarantee that

730
00:24:00,360 --> 00:24:01,650
0,150 150,330 330,660 660,930 930,1290
this race condition can't happen.

731
00:24:02,450 --> 00:24:04,220
0,420 570,990 990,1080 1080,1230 1230,1770
But you know those rules,

732
00:24:04,310 --> 00:24:05,930
0,570 570,960 1050,1260 1260,1470 1470,1620
um, in some ways too

733
00:24:05,930 --> 00:24:07,060
0,540
strict.

734
00:24:10,890 --> 00:24:12,600
0,240 240,480 480,540 540,990 990,1710
Um, there are cases where

735
00:24:12,630 --> 00:24:14,520
0,240 240,960 1230,1350 1350,1710 1710,1890
it's OK to process these

736
00:24:14,520 --> 00:24:15,600
0,300 300,360 360,570 570,780 780,1080
actions of shared data structure

737
00:24:15,600 --> 00:24:16,470
0,90 90,300 300,360 360,420 420,870
and one is a writer

738
00:24:16,530 --> 00:24:19,110
0,540 870,1530 1530,1680 1680,2010 2010,2580
in particular there are styles

739
00:24:19,110 --> 00:24:20,970
0,360 420,1110 1110,1410 1410,1680 1680,1860
of programming called lock free

740
00:24:20,970 --> 00:24:22,180
0,660
programming.

741
00:24:22,610 --> 00:24:24,470
0,210 210,390 390,660 660,1290 1440,1860
Um that actually totally worthy

742
00:24:24,620 --> 00:24:26,720
0,660 660,930 930,1470 1470,1800 1800,2100
worthy sketch scenarios actually do

743
00:24:26,720 --> 00:24:27,920
0,510
happen.

744
00:24:32,310 --> 00:24:33,240
0,300 300,390 390,600 600,660 660,930
Anyway, you want to lock

745
00:24:33,240 --> 00:24:34,320
0,150 150,570 570,660 660,1020 1020,1080
free programming is basically to

746
00:24:34,320 --> 00:24:35,880
0,120 120,330 330,1020 1080,1260 1260,1560
get better performance or more

747
00:24:35,880 --> 00:24:37,060
0,540
parallelism.

748
00:24:38,730 --> 00:24:40,260
0,360 360,510 510,840 840,990 990,1530
Walk free program is tricky,

749
00:24:40,350 --> 00:24:41,850
0,510 510,720 720,990 990,1380 1380,1500
um, even more tricky than

750
00:24:41,850 --> 00:24:44,310
0,510 510,1080 1440,2130 2130,2220 2220,2460
programming blocks, and you will

751
00:24:44,310 --> 00:24:45,030
0,240 240,420 420,510 510,600 600,720
talk about it at the

752
00:24:45,030 --> 00:24:45,930
0,120 120,210 210,360 360,810 810,900
end of this semester, we

753
00:24:45,930 --> 00:24:48,210
0,120 150,570 570,990 990,1950 1980,2280
will study some a walk

754
00:24:48,210 --> 00:24:49,890
0,210 210,750 750,900 900,1110 1110,1680
free styles of the programming

755
00:24:49,890 --> 00:24:52,770
0,270 300,900 900,1620 1650,2160 2160,2880
or particularly a common inch

756
00:24:52,800 --> 00:24:54,380
0,420 420,660 660,1170
operating system kernels.

757
00:24:54,440 --> 00:24:55,400
0,210 210,360 360,660 660,780 780,960
Um with me for this

758
00:24:55,400 --> 00:24:57,380
0,570 780,1200 1260,1710 1710,1800 1800,1980
lecture, and most of the

759
00:24:57,380 --> 00:24:58,610
0,180 180,240 240,300 300,840 930,1230
rest of the semester, we're

760
00:24:58,610 --> 00:24:59,630
0,120 120,180 180,390 390,690 690,1020
going to be thinking about

761
00:24:59,630 --> 00:25:02,030
0,60 60,480 480,1020 1200,1770 1770,2400
the case, we're using walks

762
00:25:02,030 --> 00:25:05,480
0,210 210,1530 1830,2790 2820,3030 3030,3450
you to control a sharing.

763
00:25:06,280 --> 00:25:08,050
0,810 840,1050 1050,1260 1260,1620 1650,1770
And that's hard enough, you

764
00:25:08,050 --> 00:25:09,490
0,360 390,750 750,960 960,1170 1170,1440
know you just usually watch

765
00:25:09,490 --> 00:25:10,810
0,90 90,210 210,390 390,1020 1020,1320
its not that straightforward eater.

766
00:25:12,520 --> 00:25:14,080
0,540 600,960 960,1170 1170,1380 1380,1560
I'm so in one hand

767
00:25:14,080 --> 00:25:15,490
0,30 30,180 180,780 780,870 870,1410
a little bit too strict,

768
00:25:15,760 --> 00:25:17,200
0,510 510,900 900,1110 1110,1380 1380,1440
um, because not always the

769
00:25:17,200 --> 00:25:18,430
0,240 240,390 390,810 810,1080 1080,1230
case that you need and

770
00:25:18,430 --> 00:25:19,900
0,210 210,360 360,720 720,870 870,1470
also some cases to loose

771
00:25:20,230 --> 00:25:21,340
0,600
a.

772
00:25:21,340 --> 00:25:22,780
0,150 150,300 300,540 540,870
If you might just.

773
00:25:23,490 --> 00:25:24,760
0,780
I'm.

774
00:25:26,200 --> 00:25:27,610
0,180 180,330 330,660 660,1260 1260,1410
You might even lose you

775
00:25:27,610 --> 00:25:28,240
0,150 150,210 210,420 420,540 540,630
want to actually make you

776
00:25:28,240 --> 00:25:29,320
0,150 150,210 210,420 420,870 870,1080
want to use locks you

777
00:25:29,320 --> 00:25:31,630
0,240 240,630 630,750 750,1800 1830,2310
to reinforce some other properties

778
00:25:31,630 --> 00:25:32,230
0,120 120,240 240,360 360,510 510,600
like if you look at

779
00:25:32,230 --> 00:25:33,400
0,240 240,510
print if.

780
00:25:34,790 --> 00:25:35,720
0,360
Yes.

781
00:25:35,750 --> 00:25:36,890
0,210 210,300 300,630 630,660 660,1140
If we pass a string

782
00:25:36,890 --> 00:25:38,280
0,150 150,390 390,780
to print f.

783
00:25:38,280 --> 00:25:39,720
0,450 450,570 570,690 690,990 990,1440
Um, you know the x86

784
00:25:39,720 --> 00:25:40,890
0,300 300,570 570,720 720,840 840,1170
kernel tries to at least

785
00:25:40,890 --> 00:25:41,940
0,60 60,330 360,570 570,660 660,1050
you know get the whole

786
00:25:41,940 --> 00:25:44,220
0,600 930,1050 1050,1290 1290,1650 1650,2280
string to be printed automatically.

787
00:25:44,760 --> 00:25:46,200
0,660 660,1050 1050,1170 1170,1260 1260,1440
Um, and you know there's

788
00:25:46,200 --> 00:25:47,640
0,120 120,330 330,570 570,870 870,1440
no shared data structure involved,

789
00:25:47,850 --> 00:25:49,680
0,360 360,540 540,660 660,1200 1230,1830
um, but it's still useful

790
00:25:49,680 --> 00:25:50,610
0,120 120,390 390,570 570,630 630,930
to actually use a lock

791
00:25:50,610 --> 00:25:51,930
0,60 60,210 210,540 540,900 900,1320
in that particular case because

792
00:25:51,930 --> 00:25:52,710
0,90 90,270 270,390 390,690 690,780
we want the output to

793
00:25:52,710 --> 00:25:53,880
0,90 90,720
be serialized.

794
00:25:54,220 --> 00:25:55,330
0,330 330,660 690,870 870,1050 1050,1110
Um, so this rule is

795
00:25:55,330 --> 00:25:56,890
0,480 480,990 990,1380 1380,1470 1470,1560
not perfect but it's a

796
00:25:56,890 --> 00:25:58,460
0,270 270,480 480,990
pretty good guideline.

797
00:26:00,020 --> 00:26:01,910
0,210 210,630 630,870 870,1380 1380,1890
Any questions about this rule.

798
00:26:04,810 --> 00:26:05,950
0,300 300,450 450,630 630,720 720,1140
A I had a question

799
00:26:05,950 --> 00:26:07,270
0,180 180,420 420,660 660,900 900,1320
not about this rule but

800
00:26:07,960 --> 00:26:09,490
0,300 300,450 450,870 870,1200 1290,1530
isn't it possible that two

801
00:26:09,490 --> 00:26:11,020
0,570 570,720 720,1170 1170,1290 1290,1530
processes could acquire the lock

802
00:26:11,020 --> 00:26:12,130
0,90 90,180 180,510 510,930 930,1110
at the same time and

803
00:26:12,130 --> 00:26:13,200
0,450
so.

804
00:26:13,470 --> 00:26:14,940
0,150 150,330 330,630 630,930 960,1470
Would be able to modify

805
00:26:14,940 --> 00:26:16,280
0,90 90,750
the structure.

806
00:26:16,460 --> 00:26:17,780
0,240 240,450 450,660 660,840 840,1320
Yeah, no so so part

807
00:26:17,780 --> 00:26:18,980
0,120 120,270 270,420 420,480 480,1200
of the sort of contract

808
00:26:19,130 --> 00:26:20,420
0,240 240,780 780,960 960,1110 1110,1290
law construction is is that

809
00:26:20,420 --> 00:26:22,850
0,210 210,870 870,1320 1320,1920 1950,2430
it's impossible to a prostitute

810
00:26:22,850 --> 00:26:23,810
0,90 90,540 540,630 630,900 900,960
to acquire to walk at

811
00:26:23,810 --> 00:26:24,960
0,60 60,270 270,600
the same time.

812
00:26:25,290 --> 00:26:28,440
0,600 630,1170 1170,1530 2460,2940 2940,3150
A if a rule is

813
00:26:28,440 --> 00:26:30,060
0,180 180,450 450,810 810,1080 1080,1620
that there's ever there's no

814
00:26:30,180 --> 00:26:31,500
0,300 300,510 510,600 600,960 960,1320
there's never a case where

815
00:26:31,500 --> 00:26:33,270
0,510 540,1080 1080,1380 1380,1710 1710,1770
two process actually acquired the

816
00:26:33,270 --> 00:26:35,040
0,330 1110,1260 1260,1470 1470,1530 1530,1770
lock can hold the lock

817
00:26:35,040 --> 00:26:36,360
0,90 90,150 150,360 360,600 900,1320
at the same time mostly

818
00:26:36,360 --> 00:26:36,990
0,60 60,120 120,390 390,510 510,630
in the second how to

819
00:26:36,990 --> 00:26:38,790
0,390 390,600 600,1200 1200,1320 1320,1800
implement that but the API

820
00:26:38,790 --> 00:26:40,980
0,150 150,210 210,1020 1020,1620 2010,2190
or the specification requires there's

821
00:26:40,980 --> 00:26:42,180
0,180 180,450 450,690 690,1020 1020,1200
only one walk holder at

822
00:26:42,180 --> 00:26:43,200
0,210 210,480 480,690 690,750 750,1020
any given point in time

823
00:26:43,350 --> 00:26:45,000
0,180 180,1230
or zero.

824
00:26:45,090 --> 00:26:46,100
0,450
Yes.

825
00:26:49,300 --> 00:26:52,000
0,570 630,1230 1260,1860 2070,2520 2520,2700
Um, okay, so, um, you

826
00:26:52,000 --> 00:26:52,810
0,150 150,270 270,360 360,540 540,810
know if we see you

827
00:26:52,810 --> 00:26:55,390
0,180 180,600 600,1170 1500,2100 2100,2580
know programming block slightly, um,

828
00:26:55,390 --> 00:26:57,100
0,300 300,450 450,900 930,1500 1500,1710
it could be problematic because

829
00:26:57,100 --> 00:26:58,600
0,60 60,210 210,390 390,990
of these race conditions.

830
00:26:58,600 --> 00:26:59,680
0,540
I'm.

831
00:26:59,950 --> 00:27:01,870
0,600 600,720 720,990 990,1080 1080,1920
Now, of course the particular

832
00:27:01,870 --> 00:27:02,860
0,210 210,510 510,630 630,720 720,990
race condition that we looked

833
00:27:02,860 --> 00:27:05,440
0,270 330,1050 1050,1860 1890,2100 2100,2580
at a inch k three

834
00:27:05,620 --> 00:27:06,640
0,210 210,390 390,480 480,930 930,1020
or that we created in

835
00:27:06,640 --> 00:27:08,620
0,540 720,900 900,1080 1110,1500 1500,1980
crazy which were easily spotted

836
00:27:08,620 --> 00:27:09,550
0,120 120,330 330,660 660,810 810,930
in some ways and the

837
00:27:09,550 --> 00:27:10,660
0,300 300,390 390,510 510,660 660,1110
fact you know if user

838
00:27:10,660 --> 00:27:12,370
0,120 120,600 600,1170 1230,1620 1620,1710
age detection tool, um, it

839
00:27:12,370 --> 00:27:13,820
0,150 150,540 540,810 810,1050
would immediately find it.

840
00:27:13,820 --> 00:27:15,380
0,540 690,1050 1050,1380 1380,1410 1410,1560
Um, but there are more

841
00:27:15,380 --> 00:27:18,110
0,540 540,1170 1470,2100 2310,2550 2550,2730
tricky cases, um so you

842
00:27:18,110 --> 00:27:19,760
0,180 180,870 870,1020 1020,1440 1440,1650
may wonder like why couldn't

843
00:27:19,760 --> 00:27:21,410
0,150 150,330 330,870 900,1440 1440,1650
we like make you make

844
00:27:21,410 --> 00:27:23,690
0,690 1020,1260 1260,1620 1620,1830 1830,2280
locks or who make locking

845
00:27:23,690 --> 00:27:24,780
0,660
automatic.

846
00:27:31,120 --> 00:27:32,980
0,360 360,600 600,930 930,1260 1500,1860
So you follow this simple

847
00:27:32,980 --> 00:27:34,450
0,330 330,510 510,1110 1110,1290 1290,1470
rule that interstate you know

848
00:27:34,450 --> 00:27:35,650
0,270 270,420 420,690 690,930 930,1200
then if every we shared

849
00:27:35,650 --> 00:27:37,690
0,240 240,840 1050,1800 1800,1860 1860,2040
data structure, then you know

850
00:27:37,690 --> 00:27:38,950
0,600 600,660 660,810 810,1020 1020,1260
operations in that shared data

851
00:27:38,950 --> 00:27:41,170
0,300 300,630 630,1170 1170,1560 1590,2220
structure basically require walk, we

852
00:27:41,290 --> 00:27:42,340
0,240 240,660 660,720 720,960 960,1050
should associate a lot with

853
00:27:42,340 --> 00:27:43,510
0,120 120,330 330,870 960,1110 1110,1170
the data structure in the

854
00:27:43,510 --> 00:27:46,060
0,240 240,720 720,1230 1230,1560 1980,2550
navy operations actually um, um.

855
00:27:48,270 --> 00:27:49,950
0,180 180,420 420,600 600,1230 1230,1680
That is a it's performed

856
00:27:49,950 --> 00:27:53,340
0,120 120,420 420,1770 2610,3120 3120,3390
on that a data structure

857
00:27:53,340 --> 00:27:54,540
0,330 330,690 690,780 780,1080 1080,1200
basically required to release the

858
00:27:54,540 --> 00:27:55,320
0,300
lock.

859
00:27:55,320 --> 00:27:56,370
0,300 480,690 690,810 810,900 900,1050
So one way to think

860
00:27:56,370 --> 00:27:58,020
0,240 240,300 300,900 1020,1410 1410,1650
about it, maybe actually six

861
00:27:58,020 --> 00:28:00,000
0,390 390,570 570,840 840,1350
terms like every structure.

862
00:28:00,430 --> 00:28:02,900
0,750 750,1380 1380,1920
Yo has luck.

863
00:28:04,440 --> 00:28:06,840
0,1620 1680,1890 1890,2100 2100,2340 2340,2400
And in that lock is

864
00:28:06,840 --> 00:28:08,310
0,510 510,960 960,1170 1170,1320 1320,1470
automatically acquired when we do

865
00:28:08,310 --> 00:28:09,660
0,330 330,660 660,750 750,900 900,1350
anything related to that truck,

866
00:28:09,750 --> 00:28:10,800
0,360 360,570 570,780 780,990 990,1050
it just turns out to

867
00:28:10,800 --> 00:28:11,780
0,360
be.

868
00:28:11,780 --> 00:28:12,830
0,120 120,630 720,870 870,990 990,1050
Too rigid, and this is

869
00:28:12,830 --> 00:28:14,330
0,480 510,630 630,870 900,1290 1290,1500
why you know walking can

870
00:28:14,330 --> 00:28:16,250
0,270 270,510 510,900 960,1260 1260,1920
not really be a automatic.

871
00:28:16,800 --> 00:28:19,260
0,900 1230,1380 1380,1500 1500,1890 1890,2460
So we've been operating systems,

872
00:28:19,260 --> 00:28:20,400
0,120 120,570 570,750 750,810 810,1140
an example from an operating

873
00:28:20,400 --> 00:28:21,840
0,300 300,390 390,480 480,930 1230,1440
system is the following let's

874
00:28:21,840 --> 00:28:23,280
0,210 210,420 420,960 990,1110 1110,1440
say we have a call

875
00:28:23,280 --> 00:28:24,620
0,210 210,840
like rename.

876
00:28:25,530 --> 00:28:27,510
0,210 210,570 570,660 660,1500 1830,1980
That moves the filename from

877
00:28:27,510 --> 00:28:29,370
0,180 180,840 870,1020 1020,1290 1290,1860
one directory to another directory,

878
00:28:29,490 --> 00:28:30,570
0,240 240,450 450,660 660,810 810,1080
so let's say we have

879
00:28:30,570 --> 00:28:32,160
0,210 210,510 510,1050
d one acts.

880
00:28:32,160 --> 00:28:34,290
0,420 420,600 600,1170 1170,1440 1440,2130
And we rename it to

881
00:28:34,320 --> 00:28:37,300
0,930 960,1530 1920,2400
d two y.

882
00:28:37,840 --> 00:28:38,560
0,180 180,420 420,540 540,660 660,720
And so we have the

883
00:28:38,560 --> 00:28:39,850
0,270 270,480 480,540 540,630 630,1290
file name in the directory,

884
00:28:39,850 --> 00:28:41,260
0,390 390,630 630,720 720,1050 1050,1410
a do you want X

885
00:28:41,260 --> 00:28:43,150
0,360 360,810 810,1260 1260,1380 1380,1890
and we rename it to

886
00:28:43,360 --> 00:28:45,400
0,540 540,780 780,1110 1110,1530
d two slice, why.

887
00:28:45,460 --> 00:28:48,010
0,180 180,240 240,750 750,1530 1770,2550
So the way a truly

888
00:28:48,610 --> 00:28:49,660
0,210 210,300 300,630 630,720 720,1050
if we followed the rigid

889
00:28:49,660 --> 00:28:51,130
0,480 480,660 660,960 990,1380 1380,1470
ruler like this rule of

890
00:28:51,130 --> 00:28:52,510
0,420 420,840 840,960 960,1260 1260,1380
automatic locking now what would

891
00:28:52,510 --> 00:28:53,740
0,390 390,750
happen is.

892
00:28:53,740 --> 00:28:55,240
0,630 750,870 870,990 990,1290 1290,1500
Um, you know that that

893
00:28:55,240 --> 00:28:56,050
0,300 300,420 420,510 510,630 630,810
rewards when we have two

894
00:28:56,050 --> 00:28:57,340
0,510 510,690 690,870 870,1170 1170,1290
objects, we've d one and

895
00:28:57,340 --> 00:28:58,520
0,150 150,600
d two.

896
00:28:58,820 --> 00:28:59,720
0,120 120,330 330,480 480,780 780,900
And so we follow the

897
00:28:59,720 --> 00:29:01,760
0,270 270,570 570,1230 1230,1740 1740,2040
rule then basically automatic rule,

898
00:29:01,760 --> 00:29:03,380
0,540 540,720 720,990 990,1170 1170,1620
then we lock view one.

899
00:29:05,780 --> 00:29:07,540
0,120 120,300 300,690 690,1200
You know arrays X.

900
00:29:08,990 --> 00:29:11,680
0,1320 1350,2220
And rouge.

901
00:29:13,000 --> 00:29:15,660
0,390 390,1050 1110,1680 1680,2070
Block four b one.

902
00:29:17,740 --> 00:29:18,970
0,180 180,900 900,990 990,1110 1110,1230
And then we do the

903
00:29:18,970 --> 00:29:20,560
0,270 270,810 840,1020 1020,1500 1500,1590
second part of dates, you

904
00:29:20,560 --> 00:29:23,080
0,90 90,660 660,1170 1170,1920
know d2 block d2.

905
00:29:23,400 --> 00:29:24,720
0,690
AT.

906
00:29:25,150 --> 00:29:27,140
0,270 270,1350
Yeah, why.

907
00:29:27,140 --> 00:29:29,080
0,480 480,1320
And Luis.

908
00:29:29,950 --> 00:29:31,140
0,690
Youtube.

909
00:29:32,000 --> 00:29:33,460
0,720
HMM.

910
00:29:33,460 --> 00:29:34,150
0,150 150,240 240,300 300,510 540,690
And then we're done so

911
00:29:34,150 --> 00:29:35,110
0,150 150,300 300,480 480,750 750,960
this would be the sort

912
00:29:35,110 --> 00:29:39,790
0,120 120,1200 1200,2670 2670,3480 4170,4680
of hypothetical schema and you

913
00:29:39,790 --> 00:29:41,590
0,690 690,1140 1140,1320 1320,1650 1650,1800
imagine a would happen if

914
00:29:41,590 --> 00:29:43,360
0,90 90,390 390,780 780,1260
we did automatic walking.

915
00:29:43,360 --> 00:29:45,310
0,630 870,1350 1350,1650 1650,1740 1740,1950
In a and the point

916
00:29:45,310 --> 00:29:46,330
0,60 60,240 240,630 630,870 870,1020
of this example is going

917
00:29:46,330 --> 00:29:47,500
0,420 420,600 600,810 810,900 900,1170
to will have the wrong

918
00:29:47,500 --> 00:29:50,200
0,420 780,1170 1170,2100 2100,2610 2610,2700
outcome and why, why is

919
00:29:50,200 --> 00:29:52,360
0,150 150,540 540,1200 1200,1620 1890,2160
this a problematic scheme, why

920
00:29:52,360 --> 00:29:53,350
0,120 120,270 270,450 450,600 600,990
is this not gonna work.

921
00:30:03,170 --> 00:30:04,760
0,180 180,360 360,660 660,1320 1320,1590
So, think about like the

922
00:30:04,760 --> 00:30:05,390
0,120 120,210 210,330 330,570 570,630
thing to think about is

923
00:30:05,390 --> 00:30:07,180
0,600 630,1230
this period.

924
00:30:08,000 --> 00:30:09,080
0,300 300,510 510,750 750,840 840,1080
So we've done the first

925
00:30:09,080 --> 00:30:10,180
0,630
step.

926
00:30:10,610 --> 00:30:11,880
0,210 210,750
That one.

927
00:30:12,050 --> 00:30:13,460
0,390 390,630 630,870 870,1260 1260,1410
Not don't step, step two

928
00:30:13,460 --> 00:30:14,440
0,420
yet.

929
00:30:14,630 --> 00:30:16,640
0,630 630,780 780,1110 1110,1470 1470,2010
What could another process observe.

930
00:30:24,160 --> 00:30:25,340
0,660
Anybody.

931
00:30:28,950 --> 00:30:30,480
0,540 540,690 690,930 930,1140 1140,1530
File it gets big on

932
00:30:30,870 --> 00:30:32,430
0,510 510,630 630,750 750,990 990,1560
yeah you know this there's

933
00:30:32,430 --> 00:30:33,810
0,600 600,840 840,1020 1020,1140 1140,1380
between step one and two

934
00:30:33,810 --> 00:30:35,520
0,90 90,330 330,570 570,1140
the file doesn't exist.

935
00:30:41,520 --> 00:30:42,510
0,90 90,300 300,450 450,540 540,990
I mean that is clearly

936
00:30:42,510 --> 00:30:44,370
0,540 570,1170 1170,1290 1290,1620 1620,1860
wrong, because the file does

937
00:30:44,370 --> 00:30:46,470
0,570 900,1080 1080,1290 1290,1500 1500,2100
exist, it just being renamed,

938
00:30:46,710 --> 00:30:48,240
0,390 390,690 690,1020 1020,1350 1350,1530
um and never point, I'm

939
00:30:48,240 --> 00:30:49,410
0,210 210,330 330,420 420,660 660,1170
really that it didn't exist,

940
00:30:50,430 --> 00:30:52,110
0,300 300,510 510,1200 1200,1530 1530,1680
but by implementing it in

941
00:30:52,110 --> 00:30:53,580
0,210 210,780 930,1200 1200,1320 1320,1470
this way, a it just

942
00:30:53,580 --> 00:30:55,290
0,750 750,1050 1050,1170 1170,1500 1500,1710
appears that the file might

943
00:30:55,290 --> 00:30:56,550
0,210 210,450 450,870 870,1080 1080,1260
actually not exist even though

944
00:30:56,550 --> 00:30:57,400
0,60 60,450
it does.

945
00:30:57,800 --> 00:30:59,330
0,330 330,450 450,780 780,1230 1350,1530
So the really rate a

946
00:30:59,330 --> 00:31:00,440
0,390 390,480 480,750 750,900 900,1110
solution to this is what

947
00:31:00,440 --> 00:31:01,560
0,90 90,540
we need.

948
00:31:03,460 --> 00:31:04,750
0,330 330,450 450,600 600,810 810,1290
Is that we actually walk

949
00:31:04,750 --> 00:31:06,160
0,120 120,870
the one.

950
00:31:07,460 --> 00:31:09,230
0,390 390,870 870,1470 1560,1710 1710,1770
In d2 first at the

951
00:31:09,230 --> 00:31:10,760
0,300 300,420 420,1020
beginning of rename.

952
00:31:10,760 --> 00:31:11,920
0,510
Then.

953
00:31:11,920 --> 00:31:13,720
0,120 120,600 600,690 690,1200
He raised an ad.

954
00:31:15,780 --> 00:31:17,920
0,180 180,690 720,1530
And then release.

955
00:31:18,880 --> 00:31:19,870
0,390 390,480 480,810 810,900 900,990
Um the locks would be

956
00:31:19,870 --> 00:31:20,980
0,480
one.

957
00:31:20,980 --> 00:31:22,280
0,330 330,600
Andy too.

958
00:31:24,500 --> 00:31:25,840
0,150 150,240 240,420 420,750
So, that makes sense.

959
00:31:26,870 --> 00:31:28,610
0,150 150,540 540,600 600,1080 1080,1740
So here's an example where

960
00:31:28,760 --> 00:31:30,290
0,420 420,570 570,690 690,750 750,1530
um, we have an operation

961
00:31:30,410 --> 00:31:32,810
0,840 870,1380 1380,1590 1590,1920 1920,2400
that regard means multiple locks

962
00:31:32,960 --> 00:31:34,970
0,840 870,1500 1500,1620 1620,1710 1710,2010
and a and the locks

963
00:31:34,970 --> 00:31:36,560
0,480 480,720 720,840 840,1440 1440,1590
cannot really be associated with

964
00:31:36,560 --> 00:31:37,850
0,270 270,510 510,990 990,1110 1110,1290
the two objects that are

965
00:31:37,850 --> 00:31:39,170
0,90 90,480 480,570 570,690 690,1320
the arguments of this operation,

966
00:31:39,590 --> 00:31:40,580
0,360 360,540 540,780 780,840 840,990
a it has to be

967
00:31:40,580 --> 00:31:41,570
0,60 60,390 390,570 570,900 900,990
the case that actually the

968
00:31:41,570 --> 00:31:43,730
0,390 390,750 750,1140 1170,1740 1740,2160
operation itself first requires both.

969
00:31:44,270 --> 00:31:46,580
0,570 570,1080 1200,1530 1530,1650 1650,2310
Block then perform the operations.

970
00:31:47,400 --> 00:31:48,660
0,180 180,360 360,780 780,1140 1140,1260
So there's automatic locking is

971
00:31:48,660 --> 00:31:51,100
0,360 750,1350 1350,1830
not directly possible.

972
00:31:51,250 --> 00:31:52,120
0,180 180,300 300,360 360,450 450,870
There's going to be cases

973
00:31:52,120 --> 00:31:54,550
0,360 360,720 720,1080 1260,2160 2280,2430
where there's not room to

974
00:31:54,550 --> 00:31:56,380
0,420 690,1110 1110,1440 1440,1560 1560,1830
the Disney scheme at least

975
00:31:56,380 --> 00:31:57,700
0,150 150,360 360,570 570,870 870,1320
will run into a problem

976
00:31:57,730 --> 00:31:58,800
0,630
problems.

977
00:32:00,400 --> 00:32:01,980
0,180 180,480 480,630 630,900
Any questions about this.

978
00:32:07,010 --> 00:32:08,570
0,420 570,870 870,1020 1020,1320 1320,1560
So could we just say

979
00:32:08,570 --> 00:32:10,400
0,330 360,810 840,1110 1110,1350 1350,1830
that, um when we're accessing

980
00:32:10,400 --> 00:32:11,390
0,60 60,300 300,720 720,840 840,990
a data structure, we just

981
00:32:11,390 --> 00:32:12,830
0,180 180,480 510,1110 1110,1320 1320,1440
have to access or we

982
00:32:12,830 --> 00:32:13,850
0,90 90,180 180,660 660,900 900,1020
have to acquire all of

983
00:32:13,850 --> 00:32:15,800
0,120 120,600 600,1260 1260,1590 1710,1950
the locks associated with all

984
00:32:15,800 --> 00:32:16,850
0,120 120,210 210,420 420,900 900,1050
of the data structures, we

985
00:32:16,850 --> 00:32:18,820
0,390 720,930 930,990 990,1500
need at the beginning.

986
00:32:19,120 --> 00:32:20,350
0,240 240,330 330,720 750,1080 1080,1230
Don't be one yeah, so

987
00:32:20,350 --> 00:32:21,520
0,240 240,510 510,660 660,930 930,1170
that's one way doing it

988
00:32:21,520 --> 00:32:22,090
0,120 120,180 180,330 330,480 480,570
and I think that we

989
00:32:22,090 --> 00:32:25,030
0,210 240,780 780,2190 2520,2670 2670,2940
should quickly will come down

990
00:32:25,030 --> 00:32:25,870
0,90 90,390 390,630 630,690 690,840
to basically having a big

991
00:32:25,870 --> 00:32:27,040
0,300 300,660
kernel lock.

992
00:32:27,380 --> 00:32:29,660
0,1410 1410,1920 1920,2010 2010,2070 2070,2280
Okay, you're on the risk

993
00:32:29,660 --> 00:32:31,190
0,360 360,450 450,570 570,1050 1050,1530
basically have no parallelism anymore,

994
00:32:31,850 --> 00:32:32,420
0,180 180,300 300,420 420,480 480,570
so you want to do

995
00:32:32,420 --> 00:32:34,370
0,240 240,360 360,750 780,1140 1770,1950
better than that right, and

996
00:32:34,370 --> 00:32:35,180
0,60 60,210 210,360 360,450 450,810
I think this is always

997
00:32:35,180 --> 00:32:36,170
0,90 90,510 570,750 750,840 840,990
the tension, you know you

998
00:32:36,170 --> 00:32:37,730
0,90 90,210 210,390 390,930 960,1560
can make things simpler by

999
00:32:37,730 --> 00:32:40,670
0,630 630,900 900,1320 1350,2400 2400,2940
basically what's called coarse-grained locking

1000
00:32:41,060 --> 00:32:42,200
0,390 390,570 570,930 930,1020 1020,1140
um, but then you know

1001
00:32:42,200 --> 00:32:43,240
0,120 120,630
you're loose.

1002
00:32:43,820 --> 00:32:45,350
0,270 270,810 1170,1350 1350,1410 1410,1530
Whose hormones or you may

1003
00:32:45,350 --> 00:32:46,740
0,270 270,840
lose performance.

1004
00:32:46,740 --> 00:32:47,910
0,300 300,390 390,480 480,810 810,1170
Depending if the walkers intended

1005
00:32:47,910 --> 00:32:48,840
0,60 60,360
or not.

1006
00:32:49,730 --> 00:32:51,360
0,840 840,1020
Thank you.

1007
00:32:52,700 --> 00:32:54,410
0,330 330,720 750,1080 1080,1590 1590,1710
Um, so lock perspective so

1008
00:32:54,410 --> 00:32:57,770
0,240 240,660 660,1380 1830,2550 2850,3360
there's different ways to think

1009
00:32:57,770 --> 00:32:59,000
0,180 180,660
about walks.

1010
00:32:59,650 --> 00:33:00,880
0,690
Yeah.

1011
00:33:00,910 --> 00:33:01,810
0,210 210,330 330,570 570,690 690,900
You know, those are three

1012
00:33:01,810 --> 00:33:04,300
0,300 300,780 840,1560 1620,2370 2370,2490
common ones and, um, you

1013
00:33:04,300 --> 00:33:05,380
0,420 450,660 660,810 810,900 900,1080
know go for all three

1014
00:33:05,380 --> 00:33:06,250
0,60 60,240 240,360 360,570 570,870
of them and just maybe

1015
00:33:06,250 --> 00:33:07,510
0,180 180,300 300,570 570,1020 1050,1260
that may help you have

1016
00:33:07,510 --> 00:33:08,440
0,90 90,240 240,450 450,780 780,930
to think about locks and

1017
00:33:08,440 --> 00:33:09,190
0,240 240,420 420,480 480,630 630,750
maybe one of them is

1018
00:33:09,190 --> 00:33:10,450
0,300 300,750 750,1050 1050,1140 1140,1260
your favorite and you can

1019
00:33:10,450 --> 00:33:12,220
0,120 120,300 300,630 1050,1560 1560,1770
use that one a as

1020
00:33:12,220 --> 00:33:13,240
0,240 240,420 420,510 510,780 780,1020
your way of thinking about

1021
00:33:13,240 --> 00:33:14,230
0,60 60,240 240,390 390,690 690,990
it but there's probably helpful

1022
00:33:14,230 --> 00:33:15,160
0,120 120,450 450,600 600,720 720,930
to see that they're actually

1023
00:33:15,160 --> 00:33:16,270
0,300 300,510 510,600 600,870 870,1110
different ways of thinking about

1024
00:33:16,270 --> 00:33:17,060
0,390
locks.

1025
00:33:17,530 --> 00:33:19,990
0,780 1560,1800 1800,2070 2070,2130 2130,2460
Um, so first of all,

1026
00:33:20,080 --> 00:33:20,950
0,150 150,510 510,660 660,750 750,870
no one way to think

1027
00:33:20,950 --> 00:33:22,780
0,330 330,540 540,1080 1080,1230 1230,1830
about is actually a lot.

1028
00:33:23,900 --> 00:33:25,300
0,840
Avoid.

1029
00:33:26,310 --> 00:33:29,700
0,1500 1500,2040 2160,2370 2370,2850
Last updates or help.

1030
00:33:29,840 --> 00:33:31,370
0,300 300,420 420,660 660,960 960,1530
If you use watch correctly,

1031
00:33:31,370 --> 00:33:32,360
0,90 90,210 210,480 480,690 690,990
you know locks can help

1032
00:33:32,360 --> 00:33:35,020
0,660 900,1290 1290,1620 1620,2070
avoiding a lost updates.

1033
00:33:38,680 --> 00:33:39,730
0,150 150,240 240,330 330,540 540,1050
And if you think about

1034
00:33:39,790 --> 00:33:42,160
0,1080 1080,1530 1530,2040 2040,2220 2220,2370
a early example in the

1035
00:33:42,160 --> 00:33:43,540
0,510 510,900 900,1020 1020,1140 1140,1380
caliphate c, you know the

1036
00:33:43,540 --> 00:33:45,070
0,300 300,660 660,720 720,1230 1230,1530
last update is basically a

1037
00:33:45,280 --> 00:33:47,200
0,480 480,720 720,1110 1110,1440 1440,1920
lose one update to the

1038
00:33:47,890 --> 00:33:49,000
0,240 240,570
k three.

1039
00:33:49,150 --> 00:33:50,770
0,540 540,750 750,1020 1020,1410 1410,1620
And by putting watchin' it

1040
00:33:50,770 --> 00:33:52,090
0,60 60,360 360,690 690,990 1050,1320
you know actually we didn't

1041
00:33:52,090 --> 00:33:53,770
0,480 540,780 780,990 990,1440 1500,1680
loose a that update so

1042
00:33:53,770 --> 00:33:54,790
0,150 150,390 390,630 630,720 720,1020
that's one way of thinking

1043
00:33:54,790 --> 00:33:55,780
0,240 240,420
about it.

1044
00:33:56,070 --> 00:33:58,260
0,150 150,390 390,930 930,1290 1620,2190
A very low-level way, a

1045
00:33:58,260 --> 00:33:59,160
0,270 270,360 360,450 450,570 570,900
another way to think about

1046
00:33:59,160 --> 00:34:00,090
0,390 390,510 510,630 630,840 840,930
is you know you can

1047
00:34:00,090 --> 00:34:02,580
0,450 480,840 840,1410 1440,1950
make walk hair walks.

1048
00:34:03,970 --> 00:34:05,240
0,720
Bake.

1049
00:34:05,720 --> 00:34:07,740
0,300 300,600 600,1440
Multi step operations.

1050
00:34:10,510 --> 00:34:11,780
0,690
Atomic.

1051
00:34:13,700 --> 00:34:14,390
0,180 180,300 300,450 450,600 600,690
And so there's sort of

1052
00:34:14,390 --> 00:34:15,170
0,60 60,300 300,420 420,480 480,780
the view of a critical

1053
00:34:15,170 --> 00:34:16,730
0,510 510,840 840,1020 1020,1170 1170,1560
section we have a required

1054
00:34:16,730 --> 00:34:17,810
0,300 300,510 510,540 540,720 720,1080
walk with a whole bunch

1055
00:34:17,840 --> 00:34:21,050
0,60 60,1560 1710,2250 2250,2640 2640,3210
of a steps or instructions

1056
00:34:21,050 --> 00:34:22,760
0,450 450,630 630,1320 1410,1620 1620,1710
executed all instructions that were

1057
00:34:22,760 --> 00:34:24,440
0,450 690,990 990,1110 1110,1380 1380,1680
released based on whole critical

1058
00:34:24,440 --> 00:34:26,660
0,540 720,1500 1500,1710 1710,1800 1800,2220
section execute as an atomic

1059
00:34:26,660 --> 00:34:27,780
0,660
operation.

1060
00:34:27,870 --> 00:34:29,370
0,240 240,390 390,510 510,1200 1200,1500
That sort of um, uh,

1061
00:34:29,460 --> 00:34:31,020
0,480 480,840 840,960 960,1230 1230,1560
um, also a fine way

1062
00:34:31,020 --> 00:34:32,940
0,510 510,720 720,930 930,1440
to think about watch.

1063
00:34:33,090 --> 00:34:33,990
0,150 150,240 240,300 300,540 540,900
And then the third one,

1064
00:34:34,410 --> 00:34:35,430
0,480 480,630 630,750 750,900 900,1020
um, you know that may

1065
00:34:35,430 --> 00:34:37,410
0,120 120,510 510,690 690,960 1260,1980
be helpful is that a

1066
00:34:37,440 --> 00:34:39,420
0,420 420,540 540,810 810,1260 1290,1980
really what locks do is

1067
00:34:39,660 --> 00:34:41,380
0,600 600,1200
lock health.

1068
00:34:41,640 --> 00:34:44,040
0,480 510,960 960,1050 1050,1770
Um, maintain an invariant.

1069
00:34:47,140 --> 00:34:48,550
0,600 600,690 690,930 930,1170 1170,1410
Very few do share data

1070
00:34:48,550 --> 00:34:49,690
0,510 510,750 750,900 900,1020 1020,1140
structure that you know it's

1071
00:34:49,690 --> 00:34:50,900
0,510
protecting.

1072
00:34:51,260 --> 00:34:53,300
0,630 900,1290 1290,1530 1530,1830 1830,2040
And um what was going

1073
00:34:53,300 --> 00:34:56,240
0,270 270,450 450,900 1200,1860 2550,2940
on is that a before

1074
00:34:56,240 --> 00:34:57,680
0,660 690,840 840,1020 1020,1200 1200,1440
require if there's no lock

1075
00:34:57,680 --> 00:34:59,210
0,450 480,570 570,690 690,1080 1080,1530
holder, you know that invariant

1076
00:34:59,210 --> 00:35:01,100
0,570 930,1170 1170,1380 1380,1500 1500,1890
holds a when we acquire

1077
00:35:01,100 --> 00:35:02,300
0,90 90,600 840,1020 1020,1110 1110,1200
the lock and we do

1078
00:35:02,300 --> 00:35:04,310
0,120 120,690 690,870 870,1800 1830,2010
some operations then temporarily the

1079
00:35:04,310 --> 00:35:07,850
0,510 510,690 690,1260 1470,3000 3360,3540
invariant may be violated, but

1080
00:35:07,850 --> 00:35:08,570
0,90 90,180 180,510 510,630 630,720
at the point that we

1081
00:35:08,570 --> 00:35:09,760
0,120 120,240 240,810
do the release.

1082
00:35:13,180 --> 00:35:13,900
0,270 270,420 420,480 480,570 570,720
Yeah, so if you think

1083
00:35:13,900 --> 00:35:16,510
0,480 810,1110 1110,1410 1410,2010 2040,2610
about a arp realist a

1084
00:35:16,510 --> 00:35:18,040
0,570 810,930 930,1020 1020,1140 1140,1530
case you know the environment

1085
00:35:18,040 --> 00:35:20,380
0,240 240,510 510,1350 1770,1980 1980,2340
is a yeah three pointer

1086
00:35:20,380 --> 00:35:22,420
0,300 300,660 660,1230 1230,1650 1650,2040
points to a one another

1087
00:35:22,420 --> 00:35:24,100
0,270 270,870 930,1320 1320,1590 1590,1680
next pointer and all the

1088
00:35:24,100 --> 00:35:25,720
0,360 360,810 810,1410 1410,1560 1560,1620
free pages are on a

1089
00:35:25,720 --> 00:35:26,820
0,330 330,780
single list.

1090
00:35:27,390 --> 00:35:29,910
0,420 420,870 870,1140 1140,1710 1710,2520
Um, and that's temporarily violated

1091
00:35:29,970 --> 00:35:32,160
0,480 480,690 690,780 780,1320 1440,2190
a at the point a.

1092
00:35:33,950 --> 00:35:35,690
0,300 300,360 360,690 690,810 810,1740
In the middle of the

1093
00:35:35,720 --> 00:35:37,370
0,240 240,480 480,810 810,990 990,1650
k three because like multiple

1094
00:35:37,400 --> 00:35:38,360
0,330 330,570 570,810 810,870 870,960
pointers actually point to the

1095
00:35:38,360 --> 00:35:39,840
0,270 270,360 360,570 570,1020
beginning of the list.

1096
00:35:40,760 --> 00:35:42,350
0,540 660,990 990,1080 1080,1530 1530,1590
And then we established at

1097
00:35:42,350 --> 00:35:43,380
0,120 120,210 210,330 330,510
the end of it.

1098
00:35:43,750 --> 00:35:46,030
0,540 600,840 840,1350 1710,1920 1920,2280
So if we're pre listed

1099
00:35:46,030 --> 00:35:47,860
0,210 210,510 510,810 810,1350 1350,1830
as not so complicated variables

1100
00:35:47,860 --> 00:35:49,630
0,240 240,720 720,1380 1380,1590 1590,1770
like more complicated shared data

1101
00:35:49,630 --> 00:35:51,250
0,450 960,1110 1110,1230 1230,1290 1290,1620
structures can be a helpful

1102
00:35:51,250 --> 00:35:52,810
0,270 270,360 360,750 750,1110 1110,1560
way of thinking actually what

1103
00:35:52,810 --> 00:35:53,920
0,120 120,420 420,540 540,810 810,1110
the lock is doing for

1104
00:35:53,920 --> 00:35:54,560
0,120
you.

1105
00:35:55,330 --> 00:35:56,890
0,540 630,810 810,1170 1170,1470 1470,1560
I'm in surrey, even in

1106
00:35:56,890 --> 00:35:58,480
0,300 720,990 990,1140 1140,1500 1500,1590
this case three case you

1107
00:35:58,480 --> 00:35:59,920
0,180 180,420 420,630 630,1020 1020,1440
know all three lock perspective

1108
00:35:59,920 --> 00:36:02,800
0,150 150,570 570,1290 1530,2280 2280,2880
for reasonable perspectives, um, and

1109
00:36:02,830 --> 00:36:04,300
0,510 510,900 900,1140 1140,1380 1380,1470
um you mean one of

1110
00:36:04,300 --> 00:36:05,440
0,330 360,480 480,630
them, you know.

1111
00:36:05,560 --> 00:36:07,480
0,600 630,1110 1110,1380 1380,1770 1770,1920
Um brings more video than

1112
00:36:07,480 --> 00:36:08,740
0,600 780,990 990,1050 1050,1140 1140,1260
SOA, one of the other

1113
00:36:08,740 --> 00:36:10,060
0,330 330,720 720,870 870,1110 1110,1320
ones and you use that

1114
00:36:10,060 --> 00:36:11,410
0,150 150,540 570,1080 1080,1170 1170,1350
as your way to think

1115
00:36:11,410 --> 00:36:12,540
0,210 210,630
about locks.

1116
00:36:14,510 --> 00:36:17,060
0,600 600,1350 1500,2010 2010,2160 2160,2550
Any questions about this point.

1117
00:36:23,560 --> 00:36:25,620
0,540 930,1500
Okay, I'm.

1118
00:36:25,620 --> 00:36:26,700
0,150 150,420 420,750 750,930 930,1080
So in our own for

1119
00:36:26,700 --> 00:36:29,010
0,60 60,300 300,810 870,1320 1320,2310
a couple things, um, um,

1120
00:36:29,040 --> 00:36:31,000
0,390 480,540 540,1380
sort of, um.

1121
00:36:31,460 --> 00:36:33,410
0,330 330,810 810,1410 1410,1740 1740,1950
In desirable properties or that

1122
00:36:33,410 --> 00:36:34,760
0,120 120,360 360,660 660,840 840,1350
can actually happen with locks

1123
00:36:34,850 --> 00:36:36,470
0,480 510,660 660,1140 1140,1350 1350,1620
and you know like locks

1124
00:36:36,470 --> 00:36:38,450
0,180 180,900 930,1530 1530,1710 1710,1980
are a necessary to fix

1125
00:36:38,450 --> 00:36:40,640
0,90 90,450 450,930 1650,2010 2010,2190
a correctness problem avoids race

1126
00:36:40,640 --> 00:36:42,860
0,570 810,1020 1020,1290 1290,2010 2010,2220
conditions but watch themselves in

1127
00:36:42,860 --> 00:36:45,470
0,330 330,1110 1110,1800 1800,2370 2460,2610
when inappropriate inappropriate use can

1128
00:36:45,470 --> 00:36:46,910
0,240 240,750 750,960 960,1260 1260,1440
also introduce their own set

1129
00:36:46,910 --> 00:36:47,980
0,60 60,720
of problems.

1130
00:36:48,280 --> 00:36:49,000
0,300 300,480 480,510 510,660 660,720
And so I want to

1131
00:36:49,000 --> 00:36:49,630
0,120 120,150 150,330 330,450 450,630
talk a little bit about

1132
00:36:49,630 --> 00:36:51,190
0,330 750,930 930,1050 1050,1200 1200,1560
that and so the obvious

1133
00:36:51,190 --> 00:36:52,570
0,270 270,420 420,660 660,780 780,1380
one of course is deadlock.

1134
00:36:57,240 --> 00:36:58,530
0,360 360,450 450,1050 1050,1140 1140,1290
Yeah or example, you know

1135
00:36:58,530 --> 00:37:00,180
0,450 450,780 780,1260 1260,1380 1380,1650
the simple case, you know

1136
00:37:00,180 --> 00:37:01,410
0,180 180,330 330,450 450,810 810,1230
a little bit boring but

1137
00:37:01,500 --> 00:37:03,240
0,630 630,870 870,1290 1500,1620 1620,1740
worthwhile thinking about you know

1138
00:37:03,240 --> 00:37:04,860
0,210 210,300 300,1080
do an acquire.

1139
00:37:05,390 --> 00:37:07,560
0,180 180,600 900,1650
You know lock.

1140
00:37:07,680 --> 00:37:08,730
0,450 450,570 570,720 720,990 990,1050
And so you start the

1141
00:37:08,730 --> 00:37:10,080
0,300 300,930 930,1110 1110,1290 1290,1350
critical section and in the

1142
00:37:10,080 --> 00:37:11,730
0,330 330,930 930,1170 1170,1290 1290,1650
critical section, you do another

1143
00:37:11,730 --> 00:37:12,820
0,510
choir.

1144
00:37:13,600 --> 00:37:15,180
0,180 180,270 270,540 540,1050
Off the same walk.

1145
00:37:16,930 --> 00:37:18,320
0,240 240,360 360,900
What will happen.

1146
00:37:20,300 --> 00:37:22,010
0,210 210,330 330,630 630,1110 1110,1710
Can the second acquire succeed.

1147
00:37:29,640 --> 00:37:31,110
0,510 540,750 750,1170 1170,1290 1290,1470
Well with respect that we've

1148
00:37:31,110 --> 00:37:33,000
0,330 330,630 630,1110 1200,1740 1740,1890
given early on, um, you

1149
00:37:33,000 --> 00:37:34,200
0,300 300,510 510,690 690,960 960,1200
know this should be not

1150
00:37:34,200 --> 00:37:35,850
0,390 510,690 690,1110 1110,1290 1380,1650
allowed, so basically the second

1151
00:37:35,850 --> 00:37:38,130
0,480 480,750 750,1260 1290,1950 2130,2280
acquirer must block until the

1152
00:37:38,130 --> 00:37:39,690
0,270 270,780 780,1050 1050,1440 1440,1560
first acquire release lock, but

1153
00:37:39,690 --> 00:37:40,860
0,180 180,480 750,960 960,1050 1050,1170
that was you know the

1154
00:37:40,860 --> 00:37:42,480
0,330 330,810 810,1050 1050,1440 1440,1620
process itself, so basically this

1155
00:37:42,480 --> 00:37:44,000
0,480 480,540 540,600 600,1110
result in a deadlock.

1156
00:37:46,970 --> 00:37:47,960
0,150 150,360 360,450 450,540 540,990
Now, this is a trivial

1157
00:37:47,960 --> 00:37:49,550
0,390 390,450 450,510 510,1110 1200,1590
example of a deadlock and

1158
00:37:49,550 --> 00:37:50,570
0,270 270,390 390,570 570,930 930,1020
maybe now there's interesting in

1159
00:37:50,570 --> 00:37:51,500
0,180 180,330 330,420 420,810 810,930
fact there's a deadlock that

1160
00:37:51,500 --> 00:37:52,820
0,270 270,690 690,1080 1080,1230 1230,1320
actually sixty texts, you know

1161
00:37:52,820 --> 00:37:54,530
0,300 300,690 1080,1260 1260,1560 1560,1710
because when it sees that

1162
00:37:54,530 --> 00:37:55,670
0,60 60,300 300,660 660,1080 1080,1140
the same process requires the

1163
00:37:55,670 --> 00:37:58,130
0,240 240,450 450,990 1170,2040 2040,2460
same walk again actually causes

1164
00:37:58,130 --> 00:37:59,180
0,90 90,570
a panic.

1165
00:37:59,330 --> 00:38:01,190
0,390 420,750 750,1050 1050,1470 1470,1860
A more interesting cases are

1166
00:38:01,190 --> 00:38:03,200
0,510 510,1050 1050,1350 1350,1440 1440,2010
when multiple walks are involved,

1167
00:38:03,380 --> 00:38:05,030
0,480 480,630 630,960 1230,1410 1410,1650
um, so let's go to

1168
00:38:05,030 --> 00:38:05,880
0,330
our.

1169
00:38:05,880 --> 00:38:07,560
0,330 330,1080 1140,1380 1380,1530 1530,1680
Previous example let's say we

1170
00:38:07,560 --> 00:38:09,840
0,120 120,180 180,810 810,1770
have the following a.

1171
00:38:09,930 --> 00:38:11,480
0,150 150,240 240,480 480,990
We have four one.

1172
00:38:11,510 --> 00:38:13,580
0,330 690,930 930,1050 1050,1500
What should be one.

1173
00:38:16,620 --> 00:38:18,140
0,330 330,1050
Http Youtube.

1174
00:38:19,970 --> 00:38:21,440
0,270 270,480 480,690 690,1290 1320,1470
And see p one you

1175
00:38:21,440 --> 00:38:24,500
0,150 150,960 1380,1800 1800,2490
know executes v name.

1176
00:38:24,620 --> 00:38:27,060
0,240 240,660 660,1320 1350,2010
Yeah directory, one X.

1177
00:38:27,270 --> 00:38:30,150
0,540 540,1140 1140,1830 1860,2220 2220,2880
Two directory to slash y.

1178
00:38:33,310 --> 00:38:35,350
0,330 330,690 690,1230 1230,1920 1920,2040
And CPU to execute at

1179
00:38:35,350 --> 00:38:36,880
0,90 90,390 390,1020
the same time.

1180
00:38:37,100 --> 00:38:38,780
0,1080
Rename.

1181
00:38:42,710 --> 00:38:43,520
0,180 180,300 300,480 480,720 720,810
In the other way in

1182
00:38:43,520 --> 00:38:45,590
0,150 150,360 360,1020 1080,1590 1590,2070
the other direction d two

1183
00:38:45,620 --> 00:38:47,940
0,600 1050,1770
a two.

1184
00:38:47,940 --> 00:38:49,420
0,300 300,900
T one.

1185
00:38:50,130 --> 00:38:51,240
0,180 180,360 360,480 480,750 750,1110
You know I say b

1186
00:38:51,540 --> 00:38:52,650
0,240 240,480 510,750 750,840 840,1110
just to make the names

1187
00:38:52,650 --> 00:38:54,810
0,480 870,1200 1200,1470 1470,1950 1950,2160
different, so the critical of

1188
00:38:54,810 --> 00:38:57,000
0,1170 1320,1530 1530,1590 1590,1920 1920,2190
a thing to observe here

1189
00:38:57,000 --> 00:38:59,910
0,210 210,600 960,1470 1470,1980 2100,2910
is that CPU one runs

1190
00:38:59,940 --> 00:39:01,200
0,450 450,660 660,750 750,1020 1020,1260
meaning do you want it

1191
00:39:01,200 --> 00:39:02,160
0,480
to.

1192
00:39:02,160 --> 00:39:04,440
0,540 570,1170 1290,1740 1740,2100 2100,2280
And CPU, a two that's

1193
00:39:04,440 --> 00:39:06,120
0,420 420,510 510,960 960,1230 1230,1680
exactly the opposite doesn't remain

1194
00:39:06,120 --> 00:39:07,900
0,120 120,600 600,720 720,1170
from d2 to d1.

1195
00:39:09,040 --> 00:39:10,450
0,150 150,360 360,960 960,1260 1260,1410
So let's assume that we

1196
00:39:10,450 --> 00:39:11,860
0,270 270,780 780,870 870,1260 1260,1410
actually acquire the walks in

1197
00:39:11,860 --> 00:39:13,090
0,60 60,390 390,450 450,600 600,1230
the order of their arguments

1198
00:39:13,480 --> 00:39:14,410
0,120 120,270 270,480 480,660 660,930
and so what will happen

1199
00:39:14,410 --> 00:39:16,360
0,90 90,450 450,780 1260,1770 1770,1950
to recognize that a in

1200
00:39:16,360 --> 00:39:18,010
0,180 180,810 870,1020 1020,1320 1320,1650
this case, you will acquire

1201
00:39:18,010 --> 00:39:19,360
0,270 270,660 660,870 870,1080 1080,1350
both locks, we know from

1202
00:39:19,360 --> 00:39:20,470
0,210 210,450 450,840 840,990 990,1110
a previous example that is

1203
00:39:20,470 --> 00:39:22,080
0,360 360,1140
actually important.

1204
00:39:22,080 --> 00:39:23,700
0,270 270,1050
So require.

1205
00:39:24,880 --> 00:39:26,940
0,300 300,510 510,750 750,1500
Yeah do you unlock.

1206
00:39:28,570 --> 00:39:29,830
0,540 540,630 630,750 750,960 960,1260
And you know let's say

1207
00:39:29,830 --> 00:39:32,650
0,360 360,720 780,1170 1170,1860 2370,2820
really run true concurrent, so

1208
00:39:32,650 --> 00:39:34,180
0,60 60,240 240,630 630,1140 1140,1530
at that point zimmer guy

1209
00:39:34,180 --> 00:39:35,560
0,270 270,660 660,810 810,990 990,1380
might actually this other CPU

1210
00:39:35,560 --> 00:39:37,000
0,240 240,930
might inquire.

1211
00:39:37,800 --> 00:39:39,630
0,390 390,750 750,1290 1380,1680 1680,1830
Do choose first because now

1212
00:39:39,630 --> 00:39:41,800
0,720 720,1020 1020,1560
it's first argument.

1213
00:39:43,180 --> 00:39:45,250
0,180 180,660 660,900 900,1380 1380,2070
And now course d2 d1

1214
00:39:45,250 --> 00:39:47,080
0,240 240,720 720,1320
once acquired d2.

1215
00:39:48,470 --> 00:39:50,060
0,270 270,480 480,690 690,990 1050,1590
So I'll try to acquire

1216
00:39:50,060 --> 00:39:51,140
0,660
Youtube.

1217
00:39:51,260 --> 00:39:52,780
0,210 210,300 300,960
Will it succeed.

1218
00:39:53,540 --> 00:39:55,070
0,180 180,450 450,870 870,1230 1230,1530
I won't succeed because the

1219
00:39:55,070 --> 00:39:56,600
0,180 180,750 870,1050 1050,1260 1260,1530
other guy, you know actually

1220
00:39:56,600 --> 00:39:57,830
0,390 390,480 480,900 930,1080 1080,1230
has to walk and so

1221
00:39:57,830 --> 00:39:59,300
0,180 180,450 450,600 600,990 990,1470
this guy will stop here

1222
00:39:59,690 --> 00:40:01,500
0,390 390,600 600,690 690,1200
and not to proceed.

1223
00:40:01,560 --> 00:40:02,190
0,150 150,330 330,450 450,510 510,630
Now let's look at the

1224
00:40:02,190 --> 00:40:04,650
0,450 780,1290 1290,1650 1650,2040 2040,2460
other CPU CPU to acquire

1225
00:40:04,650 --> 00:40:06,300
0,630 630,870 870,1050 1050,1170 1170,1650
d2, it's now been acquired

1226
00:40:06,300 --> 00:40:07,800
0,360 360,510 510,600 600,900 900,1500
one for its second argument.

1227
00:40:08,630 --> 00:40:09,950
0,270 270,450 450,690 690,810 810,1320
He's gonna try to call.

1228
00:40:10,520 --> 00:40:12,440
0,150 150,300 300,780 810,1380 1380,1920
It's been called acquired one

1229
00:40:12,800 --> 00:40:13,790
0,300 300,450 450,630 630,780 780,990
and will it be able

1230
00:40:13,790 --> 00:40:15,440
0,90 90,600 780,1170 1170,1530 1530,1650
to proceed no won't be

1231
00:40:15,440 --> 00:40:17,900
0,180 180,270 270,780 930,1770 2010,2460
able to proceed because the

1232
00:40:18,170 --> 00:40:19,580
0,300 300,720 720,1020 1020,1290 1290,1410
if one actually has to

1233
00:40:19,580 --> 00:40:20,920
0,270 270,360 360,480 480,840
walk in d one.

1234
00:40:21,040 --> 00:40:22,510
0,240 240,390 390,720 720,1170 1170,1470
And so here we're sometimes

1235
00:40:22,510 --> 00:40:23,470
0,120 120,210 210,540 540,570 570,960
this is called a deadly

1236
00:40:23,470 --> 00:40:25,930
0,660 660,810 810,1170 1170,1620 2040,2460
embrace you know, um, um,

1237
00:40:25,930 --> 00:40:27,850
0,570 570,690 690,1170 1500,1800 1800,1920
we're you know, because the

1238
00:40:27,850 --> 00:40:29,440
0,330 330,540 540,930 930,1290 1290,1590
way we acquire the order

1239
00:40:29,440 --> 00:40:30,760
0,90 90,300 300,840 870,1140 1140,1320
in which we order which

1240
00:40:30,760 --> 00:40:32,290
0,300 300,630 630,990 990,1350 1350,1530
quite watch results actually in

1241
00:40:32,290 --> 00:40:33,660
0,270 270,990
a deadlock.

1242
00:40:41,050 --> 00:40:42,580
0,300 300,390 390,540 540,960
Does that make sense.

1243
00:40:42,580 --> 00:40:43,860
0,150 150,750
This example.

1244
00:40:45,580 --> 00:40:46,420
0,300 300,390 390,600 600,750 750,840
This is a little bit

1245
00:40:46,420 --> 00:40:47,770
0,180 180,270 270,510 510,840 840,1350
of a more dangerous example

1246
00:40:47,920 --> 00:40:49,120
0,90 90,630 660,900 900,1110 1110,1200
of deadlock, it's not an

1247
00:40:49,120 --> 00:40:51,610
0,600 630,1590 1890,2040 2040,2130 2130,2490
obvious problem and the solution

1248
00:40:51,610 --> 00:40:53,020
0,240 240,540 870,990 990,1200 1200,1410
turns out in some sense,

1249
00:40:53,020 --> 00:40:55,180
0,270 270,840 960,1560
reasonable, simple, um.

1250
00:40:56,370 --> 00:40:57,540
0,120 120,510 510,690 690,1050 1050,1170
The solution is that you

1251
00:40:57,540 --> 00:40:58,320
0,60 60,150 150,270 270,450 450,780
know if you have multiple

1252
00:40:58,320 --> 00:41:00,600
0,540 720,1620 1740,2010 2010,2190 2190,2280
blocks, then you have to

1253
00:41:00,600 --> 00:41:02,080
0,270 270,390 390,900
order their locks.

1254
00:41:03,930 --> 00:41:06,120
0,510 510,840 840,1650
And full operations.

1255
00:41:06,120 --> 00:41:07,590
0,420 420,510 510,1050 1050,1350 1350,1470
Have to acquire watch in

1256
00:41:07,590 --> 00:41:08,760
0,210 210,630
that order.

1257
00:41:17,410 --> 00:41:18,370
0,390 390,510 510,660 660,690 690,960
So if you're a system

1258
00:41:18,370 --> 00:41:19,690
0,510 510,660 660,810 810,900 900,1320
designer, you have to decide

1259
00:41:19,690 --> 00:41:21,640
0,90 90,180 180,390 390,870 1200,1950
you know what the global

1260
00:41:21,640 --> 00:41:23,380
0,420 420,660 660,1200 1200,1470 1470,1740
order is for ol lock

1261
00:41:23,380 --> 00:41:25,870
0,660 900,1860 1890,2010 2010,2160 2160,2490
objects and so for example

1262
00:41:25,870 --> 00:41:26,530
0,60 60,180 180,450 450,570 570,660
in this case where you

1263
00:41:26,530 --> 00:41:27,490
0,150 150,420 420,540 540,750 750,960
may want to say that

1264
00:41:27,490 --> 00:41:29,740
0,150 150,600 600,870 870,1290 1290,2250
d one should always order

1265
00:41:29,740 --> 00:41:31,480
0,300 300,930 1140,1290 1290,1440 1440,1740
before d2, and that means

1266
00:41:31,480 --> 00:41:33,430
0,450 750,1200 1200,1440 1440,1590 1590,1950
that, um when we execute

1267
00:41:33,430 --> 00:41:34,780
0,60 60,660 810,1020 1020,1260 1260,1350
the reading the rule of

1268
00:41:34,780 --> 00:41:36,760
0,300 300,750 780,930 930,1350 1350,1980
life is we always require

1269
00:41:36,820 --> 00:41:39,520
0,330 360,900 900,1440 1590,2310
a lower number a.

1270
00:41:39,550 --> 00:41:41,860
0,630 660,1140 1140,1680 1680,2160 2160,2310
A directly first before we

1271
00:41:41,860 --> 00:41:43,930
0,480 480,1140 1140,1380 1380,1770 1770,2070
acquire higher order directory number.

1272
00:41:44,900 --> 00:41:46,730
0,480 690,870 870,1020 1020,1200 1200,1830
Um, and I will ensure

1273
00:41:46,760 --> 00:41:48,740
0,180 180,780 1020,1410 1410,1650 1650,1980
that basically um their global

1274
00:41:48,740 --> 00:41:50,240
0,480 480,1020 1050,1140 1140,1290 1290,1500
order and you know this

1275
00:41:50,240 --> 00:41:52,160
0,420 420,870 870,1080 1080,1500 1500,1920
particular case which cannot happen.

1276
00:41:52,710 --> 00:41:53,960
0,690
AW.

1277
00:41:53,960 --> 00:41:55,490
0,420 420,540 540,630 630,900 1200,1530
Because you know the mock

1278
00:41:55,490 --> 00:41:56,210
0,330 330,420 420,540 540,600 600,720
order is going to be

1279
00:41:56,210 --> 00:41:58,370
0,390 390,840 1050,1350 1350,1860 1890,2160
then for d one d

1280
00:41:58,370 --> 00:42:00,110
0,240 240,360 360,540 540,1080 1320,1740
two four this guy and

1281
00:42:00,110 --> 00:42:01,550
0,270 270,450 450,660 660,1140 1140,1440
this guy will acquire walks

1282
00:42:01,550 --> 00:42:03,140
0,420 420,510 510,780 780,1170 1170,1590
exactly the same global order

1283
00:42:03,140 --> 00:42:04,730
0,60 60,210 210,630 630,1260 1440,1590
you know d1 d2 and

1284
00:42:04,730 --> 00:42:06,500
0,210 210,330 330,540 540,960 1260,1770
then we don't have definite

1285
00:42:06,500 --> 00:42:07,380
0,480
grace.

1286
00:42:09,700 --> 00:42:11,060
0,120 120,210 210,330 330,750
Does that make sense.

1287
00:42:14,630 --> 00:42:16,420
0,270 270,660 660,840 840,1200
Any questions about this.

1288
00:42:17,520 --> 00:42:18,500
0,60
Yeah.

1289
00:42:22,180 --> 00:42:23,470
0,150 150,420 420,1080 1080,1140 1140,1290
So this indicates a little

1290
00:42:23,470 --> 00:42:25,870
0,120 120,210 210,870 870,1560 1890,2400
bit of a problem grow

1291
00:42:25,870 --> 00:42:26,890
0,180 180,390 390,660 660,870 900,1020
even though like okay let's

1292
00:42:26,890 --> 00:42:27,910
0,210 210,570 600,720 720,870 870,1020
fix this you know this

1293
00:42:27,910 --> 00:42:29,050
0,150 150,210 210,630 630,1020 1020,1140
sort of deadlock problem that

1294
00:42:29,050 --> 00:42:30,190
0,90 90,240 240,360 360,690 690,1140
I have in global order

1295
00:42:30,220 --> 00:42:32,200
0,450 450,1020 1200,1500 1500,1560 1560,1980
notice this order is global

1296
00:42:32,560 --> 00:42:35,110
0,480 900,1500 1680,1950 1950,2160 2160,2550
a and this is a.

1297
00:42:37,050 --> 00:42:38,370
0,270 300,690 690,750 750,960 960,1320
And issue a little bit,

1298
00:42:38,490 --> 00:42:40,050
0,450 450,750 750,1140 1140,1230 1230,1560
um, when designing a system

1299
00:42:40,050 --> 00:42:42,620
0,390 810,1350 1440,1830 1830,2070
because, um hold on.

1300
00:43:07,510 --> 00:43:08,470
0,180 180,270 270,390 390,600 600,960
So you think about the

1301
00:43:08,470 --> 00:43:10,480
0,150 150,210 210,450 450,1080 1320,2010
sort of lock ordering a.

1302
00:43:15,050 --> 00:43:15,710
0,150 150,240 240,360 360,570 570,660
You know there has to

1303
00:43:15,710 --> 00:43:17,240
0,120 120,300 300,360 360,900
be sort of global.

1304
00:43:18,030 --> 00:43:19,020
0,360 360,570 570,690 690,780 780,990
And so we have one

1305
00:43:19,020 --> 00:43:21,510
0,720 1140,1470 1470,1950 1950,2040 2040,2490
module, one, um, you know

1306
00:43:21,630 --> 00:43:23,780
0,600 600,1620
calls method.

1307
00:43:24,390 --> 00:43:26,960
0,1020 1320,2010
Mushroom too.

1308
00:43:27,490 --> 00:43:29,060
0,870
Yeah.

1309
00:43:29,440 --> 00:43:31,120
0,450 450,720 750,1410 1440,1530 1530,1680
And the color you know

1310
00:43:31,120 --> 00:43:32,440
0,180 180,420 420,900 930,1050 1050,1320
and one g you might

1311
00:43:32,440 --> 00:43:33,970
0,360 360,630 630,750 750,930 930,1530
actually need to be aware

1312
00:43:33,970 --> 00:43:34,780
0,150 150,390 390,510 510,600 600,810
or could be you need

1313
00:43:34,780 --> 00:43:35,980
0,90 90,210 210,660 660,960 960,1200
to be aware actually old

1314
00:43:35,980 --> 00:43:37,960
0,840 1020,1500
blocks f.

1315
00:43:37,960 --> 00:43:40,060
0,450 450,540 540,780 780,1290 1410,2100
Acquired for one walks into

1316
00:43:40,060 --> 00:43:41,220
0,600
users.

1317
00:43:42,630 --> 00:43:45,510
0,600 750,1320 1500,1950 1950,2700 2730,2880
Um, because um, if you

1318
00:43:45,510 --> 00:43:47,760
0,240 240,630 630,1650 1680,2040 2040,2250
and to a user's home

1319
00:43:47,760 --> 00:43:50,250
0,180 180,750 990,2010 2040,2130 2130,2490
set blocks again, you know

1320
00:43:50,310 --> 00:43:51,960
0,420 420,570 570,840 840,1200 1200,1650
follow our walk ordering you

1321
00:43:52,110 --> 00:43:53,040
0,270 270,570 570,720 720,780 780,930
a Jesus got to make

1322
00:43:53,040 --> 00:43:54,150
0,390 390,720 720,810 810,900 900,1110
sure that you know if

1323
00:43:54,150 --> 00:43:55,500
0,150 150,330 330,480 480,930 1020,1350
it has some locks then

1324
00:43:55,500 --> 00:43:57,390
0,390 390,570 570,1050 1410,1620 1620,1890
requires all locks from f

1325
00:43:57,390 --> 00:43:58,590
0,120 120,330 330,720 720,1050 1050,1200
and g together actually in

1326
00:43:58,590 --> 00:44:00,880
0,540 750,1500 1500,1890
some global water.

1327
00:44:01,270 --> 00:44:02,290
0,150 150,270 270,450 450,660 660,1020
And so that really means

1328
00:44:02,290 --> 00:44:03,880
0,210 210,390 390,540 540,630 630,1590
that these sort of internals.

1329
00:44:06,600 --> 00:44:08,600
0,570 570,630 630,840 840,1320
Journals of him too.

1330
00:44:08,780 --> 00:44:10,600
0,660 660,1260
Research walks.

1331
00:44:15,830 --> 00:44:17,180
0,300 300,420 420,900 900,1170 1170,1350
Must be visible to m

1332
00:44:17,180 --> 00:44:18,360
0,390
one.

1333
00:44:21,400 --> 00:44:22,210
0,150 150,360 360,450 450,630 630,810
So that you know and

1334
00:44:22,210 --> 00:44:23,470
0,270 270,390 390,720 720,900 900,1260
one can ensure that actually

1335
00:44:23,470 --> 00:44:25,990
0,90 90,330 420,690 690,1320 1320,2520
you know, um calls, yeah

1336
00:44:25,990 --> 00:44:28,120
0,210 210,420 420,630 630,1740 1740,2130
and two in z appropriate

1337
00:44:28,120 --> 00:44:28,920
0,240
way.

1338
00:44:29,120 --> 00:44:29,960
0,300 300,600 600,690 690,780 780,840
Um, and you know in

1339
00:44:29,960 --> 00:44:30,800
0,150 150,330 330,540 540,660 660,840
some ways that is kind

1340
00:44:30,800 --> 00:44:35,210
0,330 330,390 390,960 960,1620 3900,4410
of an abstraction violation actually

1341
00:44:35,210 --> 00:44:36,800
0,180 180,270 270,840 840,1080 1080,1590
work out perfectly and we

1342
00:44:36,800 --> 00:44:37,400
0,120 120,210 210,360 360,420 420,600
know we need to know

1343
00:44:37,400 --> 00:44:38,780
0,480 480,750 750,870 870,1260 1260,1380
anything about how empty was

1344
00:44:38,780 --> 00:44:42,020
0,570 1050,1290 1290,1800 1800,2430 2670,3240
implemented and unfortunately locks are

1345
00:44:42,020 --> 00:44:43,310
0,90 90,450 450,960 960,1020 1020,1290
a common example of where

1346
00:44:43,310 --> 00:44:45,230
0,180 180,240 240,360 360,1080 1470,1920
some of the eternals into

1347
00:44:45,230 --> 00:44:46,640
0,300 300,750 750,1080 1080,1260 1260,1410
might actually cow to um

1348
00:44:46,640 --> 00:44:48,410
0,390 600,990 990,1320 1320,1530 1530,1770
one because everyone really needs

1349
00:44:48,410 --> 00:44:49,180
0,90 90,330
to know.

1350
00:44:49,740 --> 00:44:51,120
0,270 270,450 450,780 960,1290 1290,1380
Um, and so when you

1351
00:44:51,120 --> 00:44:53,400
0,360 360,780 780,990 990,1590 1740,2280
design a bigger system, um,

1352
00:44:53,400 --> 00:44:54,540
0,120 120,630 690,870 870,1080 1080,1140
you know, this makes the

1353
00:44:54,540 --> 00:44:56,130
0,330 330,480 480,630 630,900 900,1590
module air it more complicated.

1354
00:45:01,730 --> 00:45:03,320
0,390 390,510 510,660 660,930 930,1590
Sorry I was just wondering

1355
00:45:03,350 --> 00:45:04,280
0,270 270,480 480,570 570,780 780,930
doesn't need to be a

1356
00:45:04,280 --> 00:45:07,160
0,840 1110,1530 1530,2100 2100,2250 2250,2880
complete a ordering of flocks

1357
00:45:07,160 --> 00:45:08,690
0,300 300,570 570,810 810,1020 1020,1530
or can there be some

1358
00:45:09,050 --> 00:45:11,540
0,390 390,570 570,960 1350,1770 2220,2490
blocks that are um that

1359
00:45:11,540 --> 00:45:13,610
0,150 150,540 570,1050 1050,1260 1260,2070
can be ordered in whatever

1360
00:45:13,640 --> 00:45:16,640
0,600 630,1110 1260,2340 2340,2670 2670,3000
way they yeah, it depends,

1361
00:45:16,640 --> 00:45:17,810
0,180 180,360 360,510 510,630 630,1170
if like f and g

1362
00:45:17,840 --> 00:45:19,370
0,180 180,510 510,690 690,1110 1110,1530
you share any launch right

1363
00:45:19,970 --> 00:45:21,590
0,210 210,600 600,720 720,1260 1260,1620
for example if you're looking

1364
00:45:21,590 --> 00:45:24,020
0,180 180,390 390,870 1140,1740 1740,2430
at c six a there

1365
00:45:24,200 --> 00:45:26,450
0,570 600,900 900,960 960,1380 1380,2250
are sort of multiple strands

1366
00:45:26,480 --> 00:45:27,920
0,300 300,570 570,1080 1080,1290 1290,1440
of lock orderings because some

1367
00:45:27,920 --> 00:45:28,910
0,390 390,540 540,780 780,840 840,990
functions have nothing to do

1368
00:45:28,910 --> 00:45:29,900
0,120 120,330 330,660 660,780 780,990
with other walks and they

1369
00:45:29,900 --> 00:45:32,270
0,330 330,810 810,1020 1020,1680 1890,2370
know they're never acquired together.

1370
00:45:33,000 --> 00:45:33,960
0,330 330,450 450,600 600,720 720,960
And so if they're never

1371
00:45:33,960 --> 00:45:35,700
0,300 300,930 930,1170 1170,1440 1440,1740
acquired together, just Joan walk

1372
00:45:35,700 --> 00:45:37,200
0,270 270,390 390,480 480,900 1230,1500
sets, if you will and

1373
00:45:37,200 --> 00:45:38,130
0,300 300,660 660,750 750,840 840,930
then only you have to

1374
00:45:38,130 --> 00:45:39,210
0,180 180,420 420,570 570,660 660,1080
make sure that the ordering

1375
00:45:39,210 --> 00:45:40,740
0,390 390,660 660,1080 1080,1350 1350,1530
in one particular walk set

1376
00:45:40,740 --> 00:45:43,140
0,90 90,600 870,1380 1470,1950 1950,2400
is global and the ordering

1377
00:45:43,140 --> 00:45:43,950
0,90 90,270 270,510 510,720 720,810
the other walk set is

1378
00:45:43,950 --> 00:45:45,180
0,330 330,810 810,870 870,1020 1020,1230
completely independent of the other

1379
00:45:45,180 --> 00:45:46,100
0,450
ordering.

1380
00:45:47,730 --> 00:45:48,810
0,180 180,450 450,600 600,930 930,1080
So it is correct that

1381
00:45:48,810 --> 00:45:50,100
0,540 540,810 810,1080 1080,1170 1170,1290
it doesn't have to be

1382
00:45:50,100 --> 00:45:51,480
0,60 60,420 420,840 840,1200 1200,1380
a global ordering, but like

1383
00:45:51,510 --> 00:45:53,580
0,240 240,330 330,810 810,1380 1500,2070
all the functions that manipulate

1384
00:45:53,580 --> 00:45:54,840
0,90 90,450 450,870 930,1200 1200,1260
the same share sort of

1385
00:45:54,840 --> 00:45:56,220
0,390 390,720 810,1140 1140,1290 1290,1380
block set, they need to

1386
00:45:56,220 --> 00:45:57,480
0,330 330,510 510,570 570,900 900,1260
agree on a global order.

1387
00:45:59,130 --> 00:46:00,560
0,390 390,780
Thank you.

1388
00:46:04,430 --> 00:46:05,880
0,300 300,870
Okay so.

1389
00:46:05,880 --> 00:46:07,950
0,300 300,1020 1260,1440 1440,1650 1650,2070
One in you know another

1390
00:46:07,950 --> 00:46:09,990
0,180 180,480 660,1020 1020,1860 1950,2040
sort of a challenge, um,

1391
00:46:09,990 --> 00:46:11,880
0,450 450,1020 1080,1260 1260,1650 1650,1890
we've box, um, we've seen

1392
00:46:11,880 --> 00:46:13,260
0,150 150,540 540,750 750,1230 1230,1380
through challenges one's deadlock one

1393
00:46:13,260 --> 00:46:15,090
0,90 90,300 300,870 1260,1620 1620,1830
as much loyalty a the

1394
00:46:15,090 --> 00:46:17,640
0,270 270,1140 1500,1680 1680,2340 2340,2550
second challenge for challenges just

1395
00:46:17,640 --> 00:46:18,740
0,540
walks.

1396
00:46:18,740 --> 00:46:20,200
0,900
Performance.

1397
00:46:24,100 --> 00:46:25,990
0,360 360,480 480,630 630,1260 1500,1890
And you know really hinted

1398
00:46:25,990 --> 00:46:26,800
0,90 90,210 210,270 270,480 480,810
at this a couple times

1399
00:46:26,800 --> 00:46:28,600
0,120 120,270 270,510 510,1320 1740,1800
but it needs to be

1400
00:46:28,630 --> 00:46:31,270
0,360 360,570 1560,2070 2070,2250 2250,2640
a huge important enough to

1401
00:46:31,300 --> 00:46:32,770
0,360 360,600 600,720 720,1140 1140,1470
actually put some emphasis on.

1402
00:46:33,400 --> 00:46:35,140
0,600 810,1200 1200,1290 1290,1620 1620,1740
Um, and so basically we

1403
00:46:35,140 --> 00:46:37,720
0,180 180,300 300,630 660,1800 1830,2580
want to get a performance

1404
00:46:37,720 --> 00:46:39,520
0,390 390,600 600,1110 1380,1710 1710,1800
you need to split up

1405
00:46:39,520 --> 00:46:41,590
0,240 240,660 1140,1560 1710,1830 1830,2070
data structure, so if you

1406
00:46:41,590 --> 00:46:42,880
0,210 210,450 450,630 630,900 900,1290
have one big kernel lock,

1407
00:46:43,150 --> 00:46:44,140
0,270 270,450 450,600 600,900 900,990
um that will limit your

1408
00:46:44,140 --> 00:46:45,730
0,510 510,720 720,1080 1080,1530 1530,1590
performance through basically performance on

1409
00:46:45,730 --> 00:46:46,990
0,60 60,330 330,930 1080,1170 1170,1260
a single CPU, if you

1410
00:46:46,990 --> 00:46:49,300
0,330 330,600 600,1170 1170,1830 1980,2310
want to perform ou want

1411
00:46:49,300 --> 00:46:51,310
0,240 240,570 570,1170 1170,1650 1650,2010
that performed scales with numerous

1412
00:46:51,310 --> 00:46:53,140
0,540 750,870 870,1140 1140,1500 1500,1830
used, you gotta split up.

1413
00:46:54,190 --> 00:46:54,940
0,180 180,330 330,390 390,630 630,750
You need to split up

1414
00:46:54,940 --> 00:46:56,320
0,240 240,750
data structures.

1415
00:47:04,910 --> 00:47:07,520
0,750 1050,1500 1500,1950 1980,2160 2160,2610
And best split, you know,

1416
00:47:07,730 --> 00:47:09,120
0,810
yeah.

1417
00:47:09,320 --> 00:47:10,670
0,150 150,330 330,810 960,1200 1200,1350
It's not obvious or can

1418
00:47:10,670 --> 00:47:11,940
0,90 90,180 180,750
be a challenge.

1419
00:47:17,780 --> 00:47:19,100
0,570 570,690 690,810 810,900 900,1320
Um, you know, for example

1420
00:47:19,100 --> 00:47:20,570
0,300 330,690 690,1110 1110,1170 1170,1470
if you associate the lock

1421
00:47:20,570 --> 00:47:21,860
0,120 120,300 300,810 810,990 990,1290
with every directory should you

1422
00:47:21,860 --> 00:47:22,970
0,450 450,510 510,750 750,870 870,1110
associate the lock with every

1423
00:47:22,970 --> 00:47:24,890
0,120 120,540 900,1530 1530,1800 1800,1920
I note associated walk with

1424
00:47:24,890 --> 00:47:26,480
0,180 180,600 600,660 660,1050
every process or not.

1425
00:47:26,480 --> 00:47:28,100
0,270 270,630 630,720 720,810 810,1620
Um, where is it better

1426
00:47:28,100 --> 00:47:29,510
0,300 300,540 540,690 900,1320 1320,1410
to sort of split the

1427
00:47:29,510 --> 00:47:30,590
0,240 240,600 600,720 720,810 810,1080
data structures in a different

1428
00:47:30,590 --> 00:47:31,520
0,330
way.

1429
00:47:31,930 --> 00:47:34,570
0,600 960,1680 1950,2340 2340,2550 2550,2640
Um, and um, if you

1430
00:47:34,570 --> 00:47:36,010
0,120 120,210 210,720 720,1140 1140,1440
make a change you to

1431
00:47:36,010 --> 00:47:39,700
0,1230 1230,1620 1800,2310 2310,3000 3330,3690
redesign the locking discipline, um

1432
00:47:39,700 --> 00:47:41,170
0,480 570,810 810,990 990,1170 1200,1470
and you've got to make

1433
00:47:41,170 --> 00:47:42,100
0,360 360,540 540,600 600,750 750,930
sure that you know you're

1434
00:47:42,100 --> 00:47:43,690
0,210 210,720 720,810 810,1440 1440,1590
still maintain the invariant that

1435
00:47:43,690 --> 00:47:45,610
0,420 1080,1170 1170,1500 1500,1740 1740,1920
actually the colonels trying to

1436
00:47:45,610 --> 00:47:46,680
0,600
maintain.

1437
00:47:46,870 --> 00:47:48,370
0,330 330,750 900,1050 1050,1200 1200,1500
Um, and if you split

1438
00:47:48,370 --> 00:47:49,690
0,420 420,930 930,1110 1110,1230 1230,1320
locks, you also have to

1439
00:47:49,690 --> 00:47:51,200
0,330 330,390 390,900
rewrite the goat.

1440
00:47:51,540 --> 00:47:52,830
0,480 480,660 660,780 780,870 870,1290
You may have to meet

1441
00:47:52,860 --> 00:47:55,020
0,510 510,960 1200,1530 1530,1830 1830,2160
may write may read too.

1442
00:47:56,360 --> 00:47:57,500
0,150 150,300 300,540 540,780 780,1140
Do you write code to.

1443
00:48:02,540 --> 00:48:03,710
0,450 450,570 570,660 660,900 900,1170
And so it turns out

1444
00:48:03,710 --> 00:48:06,650
0,120 120,840 930,1950 2190,2700 2700,2940
that basically, um, you should

1445
00:48:06,650 --> 00:48:09,230
0,780 780,930 930,1140 1140,1140 2340,2580
refactor you knows a part

1446
00:48:09,230 --> 00:48:10,280
0,90 90,180 180,600 600,840 840,1050
of your kernel or part

1447
00:48:10,280 --> 00:48:11,960
0,60 60,210 210,480 480,1080 1380,1680
of your power program to

1448
00:48:11,960 --> 00:48:13,820
0,210 210,420 420,960 960,1050 1050,1860
get better forms, um by

1449
00:48:13,820 --> 00:48:15,530
0,420 420,660 660,990 990,1260 1260,1710
splitting data structure ops introducing

1450
00:48:15,530 --> 00:48:17,180
0,240 240,810 1080,1410 1410,1530 1530,1650
more walks a you know

1451
00:48:17,180 --> 00:48:18,200
0,360 360,600 600,810 810,960 960,1020
there's just a lot of

1452
00:48:18,200 --> 00:48:19,070
0,270 270,330 330,420 420,480 480,870
work you have to carefully

1453
00:48:19,070 --> 00:48:20,480
0,210 210,540 540,720 720,1230 1230,1410
think through that maintain the

1454
00:48:20,480 --> 00:48:22,040
0,330 330,450 450,870 870,960 960,1560
range that intended to maintain

1455
00:48:22,310 --> 00:48:23,270
0,540 540,630 630,720 720,840 840,960
a you have to be

1456
00:48:23,270 --> 00:48:25,880
0,300 300,840 1080,1530 1530,1800 1860,2610
write code and so generally,

1457
00:48:25,880 --> 00:48:26,630
0,150 150,270 270,450 450,540 540,750
this is just a lot

1458
00:48:26,630 --> 00:48:27,420
0,60 60,420
of work.

1459
00:48:28,020 --> 00:48:29,420
0,150 150,480 480,780
They're not easy.

1460
00:48:32,500 --> 00:48:33,610
0,300 300,450 450,540 540,720 720,1110
Um, and so there's a

1461
00:48:33,640 --> 00:48:35,170
0,240 240,330 330,450 450,990 1020,1530
little bit of negative news

1462
00:48:35,170 --> 00:48:36,520
0,300 300,510 510,930 930,1080 1080,1350
point right because you know

1463
00:48:37,120 --> 00:48:37,870
0,210 210,360 360,420 420,570 570,750
we want to get better

1464
00:48:37,870 --> 00:48:39,820
0,660 690,990 990,1500 1500,1680 1680,1950
performance, that suggests no more

1465
00:48:39,820 --> 00:48:43,160
0,540 870,1530 1530,2220 2250,2850
walks a and a.

1466
00:48:43,250 --> 00:48:45,440
0,180 180,990 1200,1380 1380,1680 1680,2190
But that is actually a

1467
00:48:45,530 --> 00:48:46,820
0,270 270,360 360,750
lot of work.

1468
00:48:46,940 --> 00:48:48,320
0,330 330,480 480,630 630,750 750,1380
Um, it's sort of general

1469
00:48:48,320 --> 00:48:49,500
0,690
recipe.

1470
00:48:49,650 --> 00:48:50,520
0,180 180,330 330,660 660,720 720,870
You know how to go

1471
00:48:50,520 --> 00:48:52,290
0,300 300,690 1050,1320 1320,1680 1680,1770
about, this is to you

1472
00:48:52,290 --> 00:48:53,600
0,150 150,780
know start.

1473
00:48:53,780 --> 00:48:55,560
0,150 150,450 450,690 690,1200
Of course, green walks.

1474
00:49:05,160 --> 00:49:06,480
0,150 150,240 240,840
And they measure.

1475
00:49:11,600 --> 00:49:12,620
0,120 120,480 480,720 720,810 810,1020
So whatever run a bunch

1476
00:49:12,620 --> 00:49:13,670
0,90 90,720 720,780 780,990 990,1050
of applications on top of

1477
00:49:13,670 --> 00:49:16,610
0,120 120,780 1020,2100 2100,2670 2670,2940
your kernel and um, see

1478
00:49:16,610 --> 00:49:17,570
0,270 270,390 390,510 510,780 780,960
whether you get actually any

1479
00:49:17,570 --> 00:49:19,130
0,450 450,690 690,900 900,1200 1200,1560
speedup if they actually exploit

1480
00:49:19,130 --> 00:49:20,380
0,300 300,750
multiple cores.

1481
00:49:20,560 --> 00:49:22,090
0,630 660,840 840,960 960,1380 1410,1530
And if they do you

1482
00:49:22,090 --> 00:49:22,720
0,120 120,270 270,450 450,540 540,630
know your base will be

1483
00:49:22,720 --> 00:49:24,250
0,270 300,570 570,960 990,1230 1230,1530
done right that you're walking

1484
00:49:24,250 --> 00:49:26,380
0,330 330,450 450,600 600,990 1740,2130
design is good enough if

1485
00:49:26,440 --> 00:49:27,460
0,210 210,450 450,570 570,750 750,1020
you don't get speed up

1486
00:49:27,460 --> 00:49:28,630
0,450 450,570 570,840 840,990 990,1170
basically, that means that some

1487
00:49:28,630 --> 00:49:30,180
0,240 240,330 330,990
lock is contended.

1488
00:49:33,030 --> 00:49:34,860
0,750 780,1410 1410,1500 1500,1770 1770,1830
Multiple processes or trying to

1489
00:49:34,860 --> 00:49:36,030
0,120 120,210 210,510 510,960 990,1170
get the same law and

1490
00:49:36,030 --> 00:49:37,500
0,360 360,510 510,660 660,1110 1110,1470
therefore they are cheryl ized

1491
00:49:37,710 --> 00:49:39,090
0,180 180,510 510,630 630,840 840,1380
and therefore you don't get

1492
00:49:39,090 --> 00:49:40,160
0,240 240,540
speed up.

1493
00:49:40,160 --> 00:49:41,390
0,300 300,780 780,990 990,1140 1140,1230
Um, then you you have

1494
00:49:41,390 --> 00:49:43,100
0,90 90,450 450,900 930,1500 1530,1710
to rethink about then you

1495
00:49:43,100 --> 00:49:44,960
0,150 150,390 660,1290
need to redesign.

1496
00:49:48,020 --> 00:49:49,280
0,510 540,750 750,840 840,1110 1110,1260
Um, but the point is

1497
00:49:49,280 --> 00:49:49,820
0,120 120,210 210,360 360,420 420,540
that you want to be

1498
00:49:49,820 --> 00:49:51,560
0,540 570,690 690,960 960,1260 1260,1740
guided, you know by these

1499
00:49:51,890 --> 00:49:54,380
0,750 1140,1740 1740,1800 1800,2070 2070,2490
measurements because it maybe decays

1500
00:49:54,380 --> 00:49:56,150
0,270 270,660 660,1170 1170,1410 1410,1770
that unosom module that users

1501
00:49:56,150 --> 00:49:56,990
0,60 60,300 300,480 480,750 750,840
of course green block is

1502
00:49:56,990 --> 00:49:58,910
0,210 210,420 420,960 1230,1830 1830,1920
just not colt a in

1503
00:49:58,910 --> 00:50:00,680
0,570 570,930 1020,1230 1230,1680 1680,1770
parallel often and therefore it

1504
00:50:00,680 --> 00:50:02,060
0,90 90,270 270,960 960,1110 1110,1380
is not necessary to actually

1505
00:50:02,060 --> 00:50:04,040
0,720 1080,1410 1410,1830 1830,1950 1950,1980
redesign since redesign there's a

1506
00:50:04,040 --> 00:50:05,030
0,180 180,240 240,630 660,780 780,990
lot of work, you know

1507
00:50:05,030 --> 00:50:06,290
0,330 330,420 420,630 630,780 780,1260
and you know it also

1508
00:50:06,440 --> 00:50:08,000
0,210 210,690 690,780 780,1200 1200,1560
can complicate the reasoning about

1509
00:50:08,000 --> 00:50:09,860
0,510 600,1140 1140,1290 1290,1380 1380,1860
code, um, you know, then

1510
00:50:09,890 --> 00:50:10,550
0,90 90,240 240,450 450,510 510,660
you know it's a good

1511
00:50:10,550 --> 00:50:11,750
0,240 240,480 480,750 750,990 990,1200
idea not actually do that

1512
00:50:11,750 --> 00:50:13,560
0,450 450,660 660,870 870,1440
redesign, it's not necessary.

1513
00:50:14,340 --> 00:50:15,400
0,510
HMM.

1514
00:50:15,430 --> 00:50:17,290
0,120 120,570 690,1050 1050,1200 1200,1860
And so, um, in general,

1515
00:50:17,320 --> 00:50:19,240
0,480 480,600 600,840 840,1470 1470,1920
um, a good rule of

1516
00:50:19,240 --> 00:50:20,350
0,240 240,450 450,660 660,960 960,1110
thumb is you start with

1517
00:50:20,350 --> 00:50:22,510
0,300 300,900 990,1500 1500,1680 1680,2160
course blocks measure when a

1518
00:50:22,510 --> 00:50:23,710
0,510 510,630 630,930 930,1110 1110,1200
contention that Peter one of

1519
00:50:23,710 --> 00:50:25,270
0,150 150,600 600,780 780,1080 1080,1560
these locks and then redesign

1520
00:50:25,270 --> 00:50:26,230
0,210 210,420 420,510 510,600 600,960
that part of the system

1521
00:50:26,230 --> 00:50:27,190
0,180 180,300 300,420 420,570 570,960
so that you get better,

1522
00:50:27,550 --> 00:50:28,980
0,420 420,930
better parallelism.

1523
00:50:30,740 --> 00:50:32,240
0,120 120,270 270,420 420,750 1230,1500
Does that make sense, any

1524
00:50:32,240 --> 00:50:33,700
0,390 390,540 540,930
questions so far.

1525
00:50:39,030 --> 00:50:41,490
0,300 300,570 570,750 750,1410 1590,2460
Okay, let's look at a.

1526
00:50:42,140 --> 00:50:44,390
0,570 570,1380 1380,1530 1530,2040 2040,2250
Well let's look at X

1527
00:50:44,390 --> 00:50:45,590
0,390 390,540 540,900 930,1050 1050,1200
six and I know some

1528
00:50:45,590 --> 00:50:47,840
0,480 600,1320 1410,1980 1980,2040 2040,2250
code to understand a little

1529
00:50:47,840 --> 00:50:49,220
0,240 240,600 600,780 780,1200 1200,1380
bit how this locking sort

1530
00:50:49,220 --> 00:50:50,630
0,90 90,360 360,630 630,960 990,1410
of works out in practice

1531
00:50:50,630 --> 00:50:52,040
0,90 90,330 330,480 480,1020
the next few six.

1532
00:50:53,650 --> 00:50:54,400
0,180 180,330 330,420 420,630 630,750
And so I'm gonna go

1533
00:50:54,400 --> 00:50:57,820
0,570 690,1110 1110,1830 2370,2790
back through a um.

1534
00:50:58,480 --> 00:50:59,620
0,660
Tudor.

1535
00:51:00,660 --> 00:51:02,730
0,180 180,810 1020,1680 1680,1860 1860,2070
This screen who really need

1536
00:51:02,730 --> 00:51:03,680
0,450
this.

1537
00:51:03,680 --> 00:51:04,820
0,420 420,510 510,720 720,780 780,1140
And I want to look

1538
00:51:04,820 --> 00:51:06,590
0,390 390,570 570,870 870,1290 1290,1770
at do art because we

1539
00:51:06,620 --> 00:51:08,270
0,330 330,660 660,900 900,1230 1230,1650
start talking about locking their

1540
00:51:08,570 --> 00:51:09,880
0,750
um.

1541
00:51:10,240 --> 00:51:11,720
0,960
Honor.

1542
00:51:13,190 --> 00:51:14,120
0,150 150,630 630,780 780,810 810,930
On monday and I want

1543
00:51:14,120 --> 00:51:14,660
0,60 60,180 180,240 240,420 420,540
to look a little bit

1544
00:51:14,660 --> 00:51:15,940
0,180 180,240 240,690
more in detail.

1545
00:51:16,390 --> 00:51:17,560
0,480 480,750 750,900 900,1020 1020,1170
And now that we know

1546
00:51:17,560 --> 00:51:18,250
0,30 30,180 180,300 300,480 480,690
a little bit more about

1547
00:51:18,250 --> 00:51:20,080
0,330 330,480 480,630 630,930 930,1830
locks and then also illustrate

1548
00:51:20,080 --> 00:51:21,250
0,30 30,270 270,330 330,690 690,1170
a couple of interesting points.

1549
00:51:22,070 --> 00:51:23,740
0,600
HMM.

1550
00:51:28,110 --> 00:51:30,150
0,450 450,930 960,1740 1770,1920 1920,2040
So first, um, you know

1551
00:51:30,150 --> 00:51:31,320
0,150 150,390 390,750 750,870 870,1170
it turns out you want

1552
00:51:31,320 --> 00:51:33,480
0,540 870,1170 1200,1410 1410,1740 1740,2160
to know what's looking at.

1553
00:51:34,390 --> 00:51:36,310
0,1080 1110,1320 1320,1560 1560,1770 1770,1920
Lock, it turns out that

1554
00:51:36,310 --> 00:51:38,140
0,270 270,840 840,1230 1230,1590 1590,1830
the uart actually has only

1555
00:51:38,140 --> 00:51:39,580
0,270 270,720 930,1200 1200,1320 1320,1440
one lock, so you can

1556
00:51:39,580 --> 00:51:40,600
0,150 150,330 330,540 540,660 660,1020
think about this as a

1557
00:51:40,600 --> 00:51:42,880
0,360 360,1290 1350,1800 1800,2220 2220,2280
reasonable coarse-grained, a design at

1558
00:51:42,880 --> 00:51:44,380
0,150 150,450 450,840 1200,1350 1350,1500
this particular point at least

1559
00:51:44,380 --> 00:51:45,540
0,150 150,330 330,660
for your art.

1560
00:51:45,540 --> 00:51:46,800
0,60 60,150 150,540 540,990 1020,1260
In a particular lock, it

1561
00:51:46,800 --> 00:51:49,830
0,660 690,1440 1440,2010 2010,2490 2490,3030
protects basically uart transmission buffer

1562
00:51:50,190 --> 00:51:53,040
0,870 900,1260 1260,1860 1860,2430 2460,2850
and write pointer and reach

1563
00:51:53,070 --> 00:51:54,940
0,150 150,480
a point.

1564
00:51:55,150 --> 00:51:56,320
0,150 150,360 360,480 480,1080 1080,1170
So when we transmit you

1565
00:51:56,320 --> 00:51:58,420
0,150 150,570 600,840 840,1470 1710,2100
know the right pointer points

1566
00:51:58,420 --> 00:51:59,530
0,120 120,210 210,420 420,690 690,1110
to the next free slot

1567
00:51:59,530 --> 00:52:01,510
0,300 300,600 630,1050 1050,1590 1800,1980
in the transmission buffer and

1568
00:52:01,510 --> 00:52:03,070
0,180 180,600 600,780 780,1200 1230,1560
the pointer is the next

1569
00:52:03,070 --> 00:52:03,910
0,150 150,300 300,570 570,750 750,840
law that actually needs to

1570
00:52:03,910 --> 00:52:05,060
0,90 90,660
be transmitted.

1571
00:52:05,200 --> 00:52:07,060
0,330 330,480 480,600 600,1050 1290,1860
Maybe this is our a

1572
00:52:07,060 --> 00:52:11,060
0,840 870,1800 1920,2610 2640,3450
standard design for parallelism.

1573
00:52:11,060 --> 00:52:12,920
0,300 300,420 420,660 660,1230 1230,1860
Oh, for a consumer a

1574
00:52:12,950 --> 00:52:14,680
0,270 270,600 600,1140
producer consumer parallelism.

1575
00:52:15,210 --> 00:52:16,260
0,180 180,330 330,510 510,660 660,1050
So let me go back

1576
00:52:16,260 --> 00:52:18,240
0,300 780,1470
and um.

1577
00:52:18,330 --> 00:52:20,500
0,300 300,450 450,900 1140,1680
Brought it out too.

1578
00:52:20,710 --> 00:52:22,240
0,360 360,990
Okay study.

1579
00:52:24,740 --> 00:52:26,120
0,240 240,1080
New York.

1580
00:52:27,340 --> 00:52:29,420
0,270 270,420 420,840 840,1530
And there's basically buffer.

1581
00:52:29,870 --> 00:52:30,980
0,300 300,510 510,570 570,720 720,1110
And there's a real point,

1582
00:52:30,980 --> 00:52:32,870
0,210 210,300 300,540 540,1170 1500,1890
there's a write pointer or

1583
00:52:32,900 --> 00:52:35,150
0,450 480,840 840,1410 1410,1860 1980,2250
write read index and read

1584
00:52:35,150 --> 00:52:36,280
0,600
index.

1585
00:52:37,110 --> 00:52:38,220
0,210 210,390 390,450 450,630 630,1110
This has to go to

1586
00:52:38,250 --> 00:52:41,260
0,150 150,720 750,1230 1620,2370
new York being displayed.

1587
00:52:42,820 --> 00:52:44,320
0,330 330,480 480,630 630,840 870,1500
And this is the writer.

1588
00:52:46,740 --> 00:52:48,720
0,270 270,780 1080,1560 1590,1800 1800,1980
Print f maybe that actually

1589
00:52:48,720 --> 00:52:50,730
0,480 510,960 960,1380 1380,1560 1560,2010
sticks characters into this bumper.

1590
00:52:52,490 --> 00:52:53,580
0,600
Okay.

1591
00:52:53,840 --> 00:52:54,980
0,330 330,780 780,870 870,990 990,1140
And so you know we

1592
00:52:54,980 --> 00:52:55,640
0,120 120,300 300,420 420,570 570,660
can see is that the

1593
00:52:55,640 --> 00:52:57,740
0,600 630,1230 1260,1410 1410,1710 1710,2100
lock, um, you know block

1594
00:52:57,740 --> 00:52:59,220
0,120 120,480 480,1020
has multiple roles.

1595
00:53:03,200 --> 00:53:05,330
0,600 600,1050 1050,1380 1380,1830 1830,2130
One is to basically protect

1596
00:53:05,330 --> 00:53:06,720
0,120 120,360 360,870
this data structure.

1597
00:53:11,640 --> 00:53:12,810
0,300 300,510 510,810 810,930 930,1170
This data structure has some

1598
00:53:12,810 --> 00:53:14,200
0,690
variance.

1599
00:53:14,200 --> 00:53:17,890
0,1110 1110,1410 1440,2040 2040,2610 2790,3690
Namely, a reach pursuit right,

1600
00:53:18,250 --> 00:53:20,710
0,960 990,1470 1470,1860 1860,2250 2250,2460
um anything between A R

1601
00:53:20,710 --> 00:53:22,390
0,660 660,990 990,1380 1380,1530 1530,1680
W or characters that need

1602
00:53:22,390 --> 00:53:24,160
0,60 60,210 210,690 1050,1470 1470,1770
to be sent anything between

1603
00:53:24,160 --> 00:53:25,390
0,360 360,480 480,840 840,990 990,1230
w and r are things

1604
00:53:25,390 --> 00:53:27,100
0,150 150,630 630,960 960,1170 1170,1710
that actually are empty slots.

1605
00:53:27,780 --> 00:53:29,460
0,840 840,930 930,1230 1230,1290 1290,1680
And the logs are basically

1606
00:53:29,460 --> 00:53:31,740
0,600 600,1050 1050,1830 1860,2040 2040,2280
helpless, yeah maintain a that

1607
00:53:31,740 --> 00:53:32,880
0,630
invariant.

1608
00:53:34,080 --> 00:53:36,940
0,510 540,870 870,1200 1680,2370
So, here are a.

1609
00:53:37,170 --> 00:53:38,480
0,270 270,810
Code again.

1610
00:53:38,480 --> 00:53:40,400
0,720 780,1470 1500,1740 1740,1830 1830,1920
And let's look at the

1611
00:53:40,400 --> 00:53:41,780
0,810
choirs.

1612
00:53:41,900 --> 00:53:45,320
0,450 450,1110 1110,1380 2580,3300 3300,3420
So here's your and you

1613
00:53:45,320 --> 00:53:46,370
0,150 150,240 240,480 480,930 930,1050
know the first thing you

1614
00:53:46,370 --> 00:53:47,120
0,90 90,210 210,420 420,540 540,750
know you work with two

1615
00:53:47,120 --> 00:53:48,620
0,480 480,990 990,1080 1080,1230 1230,1500
doses, actually you know grab

1616
00:53:48,620 --> 00:53:49,700
0,90 90,570
the lock.

1617
00:53:49,900 --> 00:53:52,510
0,750 750,1140 1140,1530 1530,2160 2310,2610
Um, and then {stick's -}

1618
00:53:52,510 --> 00:53:54,160
0,0 240,930 990,1170 1170,1410 1410,1650
a character if there's a

1619
00:53:54,160 --> 00:53:55,420
0,360 360,420 420,480 480,960 990,1260
place in the buffer sticks

1620
00:53:55,420 --> 00:53:56,260
0,60 60,330 330,690 690,780 780,840
the barrel character in the

1621
00:53:56,260 --> 00:53:58,210
0,570 930,1080 1080,1680 1680,1770 1770,1950
buffer and start you know

1622
00:53:58,210 --> 00:54:00,100
0,450 480,900 900,1020 1020,1200 1200,1890
the printing and then releases

1623
00:54:00,190 --> 00:54:01,620
0,390 390,870
a the.

1624
00:54:01,740 --> 00:54:03,690
0,270 270,720 930,1320 1320,1470 1470,1950
A lock, so if two

1625
00:54:03,690 --> 00:54:05,640
0,720 720,810 810,900 900,1290 1290,1950
processes at the same time

1626
00:54:05,880 --> 00:54:07,620
0,600 600,750 750,900 900,1140 1140,1740
call you are could see

1627
00:54:07,740 --> 00:54:09,780
0,630 660,870 870,1110 1110,1260 1260,2040
then there's lock will ensure

1628
00:54:09,900 --> 00:54:11,490
0,480 510,810 810,1080 1080,1440 1440,1590
that no one character from

1629
00:54:11,490 --> 00:54:12,420
0,60 60,300 300,660 660,840 840,930
the first process goes in

1630
00:54:12,420 --> 00:54:14,010
0,60 60,300 300,720 750,1110 1110,1590
the first slot and then

1631
00:54:14,100 --> 00:54:16,770
0,630 1470,1770 1770,2370 2370,2550 2550,2670
the second character of the

1632
00:54:16,770 --> 00:54:18,150
0,240 240,840 840,1170 1170,1290 1290,1380
second process goes into the

1633
00:54:18,150 --> 00:54:19,560
0,210 210,570 630,930 930,1110 1110,1410
next slot and they're known

1634
00:54:19,560 --> 00:54:20,700
0,120 150,510 510,660 660,960 960,1140
as happened to end up

1635
00:54:20,700 --> 00:54:22,160
0,420 420,510 510,750 750,1140
in the same slot.

1636
00:54:22,680 --> 00:54:23,550
0,240 240,330 330,510 510,630 630,870
Right, so this is a

1637
00:54:23,550 --> 00:54:24,960
0,270 270,720 720,930 930,990 990,1410
clear example where I walk

1638
00:54:25,110 --> 00:54:27,360
0,300 300,600 600,780 780,1260 1560,2250
it helps us to um,

1639
00:54:27,780 --> 00:54:28,620
0,630
um.

1640
00:54:29,430 --> 00:54:31,500
0,480 480,540 540,720 720,1260 1320,2070
Avoids a race condition because

1641
00:54:31,500 --> 00:54:33,280
0,510 510,600 600,750 750,1110
otherwise you know the.

1642
00:54:33,280 --> 00:54:35,020
0,150 150,480 480,870 870,1080 1080,1740
The second process might over

1643
00:54:35,020 --> 00:54:36,280
0,450 450,540 540,630 630,780 780,1260
right, you know the first

1644
00:54:36,310 --> 00:54:37,940
0,600 600,1080
processes character.

1645
00:54:38,740 --> 00:54:40,750
0,330 330,540 540,960 1410,1800 1800,2010
That's one part then you

1646
00:54:40,750 --> 00:54:42,740
0,120 120,360 360,600 630,1440
go look at, um.

1647
00:54:42,960 --> 00:54:43,500
0,150 150,270 270,390 390,510 510,540
And we did that a

1648
00:54:43,500 --> 00:54:44,340
0,150 150,300 300,630 630,720 720,840
little bit before we look

1649
00:54:44,340 --> 00:54:45,510
0,60 60,630 660,990 990,1110 1110,1170
at start, we see a

1650
00:54:45,510 --> 00:54:46,740
0,210 210,390 390,630 630,840 840,1230
couple more things going on.

1651
00:54:47,360 --> 00:54:48,640
0,720
I'm.

1652
00:54:48,640 --> 00:54:50,140
0,360 360,960
The yeah.

1653
00:54:50,140 --> 00:54:51,460
0,300 300,540 540,690 690,1050 1050,1320
Um, we see actually that

1654
00:54:51,460 --> 00:54:52,580
0,540
the.

1655
00:54:53,220 --> 00:54:54,960
0,480 480,630 630,1200 1200,1290 1290,1740
A if zero is not

1656
00:54:54,960 --> 00:54:57,460
0,210 210,870 1260,1890
you know, um.

1657
00:54:57,460 --> 00:54:58,210
0,90 90,180 180,420 420,510 510,750
If the buffer is not

1658
00:54:58,210 --> 00:55:00,610
0,540 870,1680 1680,1800 1800,2190 2190,2400
empty, then we know that

1659
00:55:00,610 --> 00:55:02,530
0,510 510,720 720,750 750,990 990,1920
basically there's a bunch of

1660
00:55:02,560 --> 00:55:04,330
0,510 510,660 660,720 720,1050 1050,1770
characters that are being progressed

1661
00:55:04,630 --> 00:55:06,360
0,450 450,690 690,1170
or being sent.

1662
00:55:06,450 --> 00:55:07,800
0,570 570,720 720,840 840,960 960,1350
And you know the lock,

1663
00:55:07,800 --> 00:55:08,580
0,90 90,180 180,360 360,660 660,780
you know, make sure that

1664
00:55:08,580 --> 00:55:10,560
0,120 120,300 300,810 1170,1770 1770,1980
we don't really overwrite any

1665
00:55:10,560 --> 00:55:12,510
0,90 90,600 810,1230 1440,1770 1770,1950
of those so anything that's

1666
00:55:12,510 --> 00:55:14,430
0,120 120,300 300,600 1050,1620 1620,1920
sort of the talent of

1667
00:55:14,430 --> 00:55:16,890
0,390 420,960 960,1200 1200,1950 1950,2460
the Q A is actually

1668
00:55:16,890 --> 00:55:18,540
0,210 210,450 450,1050 1050,1500 1500,1650
a being processed by the

1669
00:55:18,540 --> 00:55:20,300
0,570 870,1500
uart a.

1670
00:55:21,120 --> 00:55:23,500
0,660 810,1470 1500,1860
A itself so.

1671
00:55:23,560 --> 00:55:24,960
0,240 240,720
To land.

1672
00:55:26,410 --> 00:55:28,000
0,270 270,510 510,1050
Is in flight.

1673
00:55:30,370 --> 00:55:31,510
0,180 180,600 600,780 780,1020 1020,1140
And we make sure that

1674
00:55:31,510 --> 00:55:33,850
0,90 90,510 510,990 1260,2040 2040,2340
we basically don't modify or

1675
00:55:33,970 --> 00:55:35,470
0,540 540,630 630,810 810,1140 1140,1500
interfere with that particular aspect

1676
00:55:35,470 --> 00:55:37,640
0,390 420,1110 1110,1200 1200,1620
by grabbing a lock.

1677
00:55:38,060 --> 00:55:39,860
0,210 210,330 330,900 1380,1650 1650,1800
And then finally, um, they're

1678
00:55:39,860 --> 00:55:40,910
0,150 150,210 210,390 390,480 480,1050
sort of more and more

1679
00:55:41,000 --> 00:55:43,040
0,390 390,570 570,930 1140,1440 1440,2040
thing is that the rights

1680
00:55:43,400 --> 00:55:46,010
0,1050 1050,1590 1590,2370 2400,2550 2550,2610
a u2 registers of the

1681
00:55:46,010 --> 00:55:47,720
0,510 510,660 660,870 870,1350 1350,1710
uart like that ehr register,

1682
00:55:47,720 --> 00:55:49,160
0,330 330,510 510,720 720,900 900,1440
which one there's only one

1683
00:55:49,460 --> 00:55:50,480
0,120 120,210 210,570 570,690 690,1020
you know basically the lock

1684
00:55:50,480 --> 00:55:52,610
0,750 870,1230 1350,1710 1710,1800 1800,2130
ensures a remember the uart

1685
00:55:52,610 --> 00:55:54,230
0,240 240,390 390,750 750,930 930,1620
start just called with lock

1686
00:55:54,260 --> 00:55:56,660
0,510 840,1650 1650,1830 1830,2190 2190,2400
held assures this is only

1687
00:55:56,660 --> 00:55:58,250
0,360 360,990 990,1110 1110,1200 1200,1590
one writer to the th

1688
00:55:58,250 --> 00:55:59,300
0,630
register.

1689
00:55:59,870 --> 00:56:01,550
0,240 240,660 870,1440 1440,1620 1620,1680
And so, another sort of

1690
00:56:01,550 --> 00:56:03,320
0,570 570,690 690,960 960,1350 1350,1770
variant or another aspect that

1691
00:56:03,320 --> 00:56:05,390
0,120 120,540 540,1200 1230,1860 1860,2070
the locking a enforces is

1692
00:56:05,390 --> 00:56:07,640
0,390 480,990 990,1680
that hardware registers.

1693
00:56:10,510 --> 00:56:12,040
0,240 240,480 480,990
Have one writer.

1694
00:56:16,460 --> 00:56:17,600
0,630
Okay.

1695
00:56:18,530 --> 00:56:19,940
0,360 360,510 510,720 720,1020 1020,1410
Now there's one other interesting

1696
00:56:19,940 --> 00:56:21,410
0,210 210,390 390,540 540,720 720,1470
thing that I want to

1697
00:56:21,440 --> 00:56:22,730
0,330 330,420 420,690 690,810 810,1290
talk a little bit about

1698
00:56:23,120 --> 00:56:25,160
0,360 360,630 630,1050 1080,1740 1890,2040
and that is a you

1699
00:56:25,160 --> 00:56:26,480
0,180 180,780 810,1050 1050,1140 1140,1320
know you, you are just

1700
00:56:26,480 --> 00:56:27,470
0,270 270,540 540,750 750,870 870,990
done correct hard work is

1701
00:56:27,470 --> 00:56:28,940
0,300 300,750 990,1230 1230,1380 1380,1470
done then, um, there was

1702
00:56:28,940 --> 00:56:30,000
0,60 60,630
an interrupt.

1703
00:56:30,170 --> 00:56:32,600
0,840 960,1740 1740,1980 1980,2100 2100,2430
And, um, as you know

1704
00:56:32,600 --> 00:56:34,070
0,180 180,450 450,780 780,1020 1020,1470
we notice before your start

1705
00:56:34,070 --> 00:56:35,210
0,300 300,390 390,570 570,720 720,1140
right, you know we have

1706
00:56:36,290 --> 00:56:38,030
0,390 390,960 960,1320 1320,1410 1410,1740
the color, it's a color

1707
00:56:38,030 --> 00:56:39,380
0,90 90,540 540,600 600,1050 1110,1350
to require the lock to

1708
00:56:39,380 --> 00:56:42,440
0,780 960,1530 1530,2310 2520,2910 2910,3060
ensure a that um, we

1709
00:56:42,440 --> 00:56:45,080
0,180 180,870 1440,2190 2190,2520 2520,2640
don't multiple entities running to

1710
00:56:45,080 --> 00:56:46,280
0,60 60,300 300,750
the right register.

1711
00:56:46,620 --> 00:56:49,260
0,510 720,1020 1020,1440 1710,2190 2220,2640
Um, and so a viewer

1712
00:56:49,260 --> 00:56:51,960
0,360 360,1020 1350,1560 1560,2310 2520,2700
interrupt itself could run in

1713
00:56:51,960 --> 00:56:54,150
0,930 960,1350 1350,1650 1650,2040 2040,2190
parallel with another process, that's

1714
00:56:54,150 --> 00:56:55,230
0,210 210,390 390,630 630,870 870,1080
called print f so there's

1715
00:56:55,230 --> 00:56:57,030
0,180 180,600 600,840 840,1140 1500,1800
some practical print f, um

1716
00:56:57,030 --> 00:56:58,500
0,210 210,330 330,420 420,810 810,1470
that runs to CPU zero

1717
00:56:58,560 --> 00:57:00,120
0,360 360,540 540,900 900,1260 1260,1560
and on CPU one actually

1718
00:57:00,120 --> 00:57:02,010
0,360 360,450 450,780 780,1380 1410,1890
takes the uart interrupt because

1719
00:57:02,010 --> 00:57:03,030
0,240 240,360 360,540 540,900 900,1020
maybe it's doing nothing, and

1720
00:57:03,030 --> 00:57:04,050
0,90 90,210 210,420 420,690 690,1020
so it's ready to interrupt

1721
00:57:04,050 --> 00:57:05,250
0,180 180,480 480,660 660,720 720,1200
any particular point of time.

1722
00:57:05,720 --> 00:57:07,310
0,420 420,660 660,1200 1230,1290 1320,1590
And it will be a

1723
00:57:07,310 --> 00:57:08,900
0,270 270,600 600,1050
call York start.

1724
00:57:09,080 --> 00:57:09,800
0,150 150,240 240,540 540,600 600,720
And it has to be

1725
00:57:09,800 --> 00:57:10,850
0,60 60,420 420,810 810,900 900,1050
the case correct, you know

1726
00:57:10,850 --> 00:57:11,720
0,150 150,300 300,360 360,720 720,870
we want to ensure that

1727
00:57:11,720 --> 00:57:12,980
0,150 150,210 210,540 540,960 960,1260
there's a single writer into

1728
00:57:12,980 --> 00:57:15,200
0,150 150,450 450,1050 1290,1800 1800,2220
the hardware registers a or

1729
00:57:15,200 --> 00:57:16,460
0,120 120,600 600,660 660,810 810,1260
to protect you know the

1730
00:57:16,910 --> 00:57:18,680
0,570 570,840 840,990 990,1320 1350,1770
variance actually of the transmission

1731
00:57:18,680 --> 00:57:20,360
0,420 780,1350 1350,1470 1470,1560 1560,1680
buffer, um, you know, we

1732
00:57:20,360 --> 00:57:21,780
0,270 270,630 630,660 660,1020
have acquired a lock.

1733
00:57:21,810 --> 00:57:22,440
0,150 150,240 240,390 390,510 510,630
And so it is the

1734
00:57:22,440 --> 00:57:24,480
0,540 540,930 930,1410 1410,1740 1740,2040
case that a ext six

1735
00:57:24,480 --> 00:57:26,730
0,360 360,690 900,1680 1680,1950 1950,2250
actually that interrupts you can

1736
00:57:26,730 --> 00:57:28,560
0,720 1020,1140 1140,1410 1410,1710 1710,1830
run the bottom half of

1737
00:57:28,560 --> 00:57:30,210
0,90 90,570 570,690 690,1050 1080,1650
the driver can run truly

1738
00:57:30,210 --> 00:57:33,000
0,600 600,960 960,1320 1320,2100 2400,2790
concurrent on a on different

1739
00:57:33,000 --> 00:57:34,800
0,600 630,1050 1050,1140 1140,1440 1440,1800
processors with the top half

1740
00:57:34,800 --> 00:57:36,360
0,210 210,510 510,990 1200,1470 1470,1560
of the driver and so

1741
00:57:36,360 --> 00:57:39,360
0,420 420,1590 1590,2130 2400,2760 2760,3000
therefore interrupt functions, um also

1742
00:57:39,360 --> 00:57:40,520
0,390 390,780
require walks.

1743
00:57:40,930 --> 00:57:41,890
0,210 210,450 450,510 510,630 630,960
In fact, in this particular

1744
00:57:41,890 --> 00:57:43,990
0,540 690,1200 1200,1290 1290,1500 1770,2100
case a you know requires

1745
00:57:43,990 --> 00:57:44,830
0,60 60,270 270,540 540,660 660,840
the one block that there's

1746
00:57:44,830 --> 00:57:46,720
0,300 300,420 420,480 480,990 1020,1890
actually in the uart and

1747
00:57:46,750 --> 00:57:47,770
0,150 150,330 330,480 480,510 510,1020
then calls you a historic

1748
00:57:47,770 --> 00:57:48,940
0,90 90,360 360,750 750,840 840,1170
and then releases the lock.

1749
00:57:50,720 --> 00:57:51,800
0,240 240,540 540,690 690,930 930,1080
And I'll come back to

1750
00:57:51,800 --> 00:57:53,060
0,180 180,300 300,300 300,840 870,1260
that in a second because

1751
00:57:53,060 --> 00:57:53,840
0,150 150,210 210,360 360,480 480,780
there's a little bit tricky

1752
00:57:53,840 --> 00:57:56,660
0,450 660,1560 1560,2220 2250,2730 2730,2820
nus a in implementing a

1753
00:57:56,660 --> 00:57:58,190
0,450 690,810 810,1080 1080,1170 1170,1530
walk in such a way

1754
00:57:58,190 --> 00:57:59,210
0,180 180,330 330,600 600,870 870,1020
that this actually works out

1755
00:57:59,210 --> 00:58:00,220
0,480
correctly.

1756
00:58:00,490 --> 00:58:01,920
0,870
And.

1757
00:58:01,920 --> 00:58:03,750
0,150 150,630 1080,1380 1380,1530 1530,1830
And the thing that actually

1758
00:58:03,750 --> 00:58:04,650
0,90 90,240 240,330 330,570 570,900
you should be worried about

1759
00:58:04,650 --> 00:58:07,140
0,180 180,630 930,2040 2040,2280 2280,2490
is that um, all actually

1760
00:58:07,140 --> 00:58:07,980
0,210 210,390 390,480 480,540 540,840
talk about in a second,

1761
00:58:08,010 --> 00:58:09,090
0,240 240,360 360,720 720,900 900,1080
let me postpone that until

1762
00:58:09,090 --> 00:58:10,020
0,60 60,240 240,420
I get there.

1763
00:58:13,040 --> 00:58:14,990
0,210 210,480 480,1050 1050,1290 1440,1950
Okay, so any any questions

1764
00:58:14,990 --> 00:58:16,880
0,270 270,450 450,690 690,1170 1470,1890
about this is a simple

1765
00:58:16,880 --> 00:58:20,360
0,690 690,1050 1290,2280 2280,2880 3000,3480
example of lock use and

1766
00:58:20,360 --> 00:58:21,520
0,120 120,630
new York.

1767
00:58:29,640 --> 00:58:31,740
0,390 390,570 570,1230 1710,2010 2010,2100
Okay, let me bring this

1768
00:58:31,740 --> 00:58:32,790
0,150 150,270 270,480 480,660 660,1050
kind of place, let me

1769
00:58:32,790 --> 00:58:34,140
0,210 210,390 390,840 840,900 900,1350
talk about implementing a walk.

1770
00:58:34,940 --> 00:58:37,160
0,600 1200,1470 1470,1890 1890,2010 2010,2220
Um, so respect is that

1771
00:58:37,160 --> 00:58:40,640
0,270 270,990 1200,2400 2520,2940 2940,3480
only one process can acquire

1772
00:58:40,640 --> 00:58:43,010
0,480 600,1170 1170,1380 1380,1890 1920,2370
lock, there's no more than

1773
00:58:43,010 --> 00:58:44,120
0,300 300,570 570,810 810,930 930,1110
one lock holder at any

1774
00:58:44,120 --> 00:58:45,640
0,240 240,450 450,510 510,990
given point of time.

1775
00:58:45,640 --> 00:58:47,410
0,510 510,1140 1140,1320 1320,1380 1380,1770
And we want to look

1776
00:58:47,440 --> 00:58:48,940
0,390 390,900 900,1140 1140,1410 1410,1500
and understand actually how you

1777
00:58:48,940 --> 00:58:49,840
0,360 360,390 390,630 630,720 720,900
implement a walk in such

1778
00:58:49,840 --> 00:58:50,740
0,90 90,240 240,540 540,840 840,900
a way that actually is

1779
00:58:50,740 --> 00:58:51,900
0,660
guaranteed.

1780
00:58:51,930 --> 00:58:52,800
0,330 330,420 420,660 660,840 840,870
Let me first write a

1781
00:58:52,800 --> 00:58:54,160
0,360 360,810
broken lock.

1782
00:58:54,440 --> 00:58:56,120
0,480 480,720 720,870 870,1530 1560,1680
Um, so we understand you

1783
00:58:56,120 --> 00:58:58,160
0,90 90,300 300,480 480,1260 1350,2040
know what the challenges um.

1784
00:58:59,020 --> 00:59:00,800
0,300 300,600 600,1260
Or broken acquire.

1785
00:59:05,310 --> 00:59:06,060
0,210 210,360 360,450 450,600 600,750
So that we know what

1786
00:59:06,060 --> 00:59:07,200
0,120 120,510 510,720 720,1050 1050,1140
the challenge is actually an

1787
00:59:07,200 --> 00:59:08,640
0,390 390,960
implement inquire.

1788
00:59:09,610 --> 00:59:11,440
0,510 810,990 990,1230 1230,1470 1470,1830
Um, so here's my broken

1789
00:59:11,440 --> 00:59:13,560
0,450 540,1200
one, um.

1790
00:59:14,320 --> 00:59:16,580
0,180 180,960 960,1560
Well, construct diction.

1791
00:59:16,900 --> 00:59:20,120
0,630 630,1560 1590,2070 2070,2580
Berman's flock star l.

1792
00:59:20,250 --> 00:59:21,880
0,840
I'm.

1793
00:59:21,970 --> 00:59:22,840
0,150 150,300 300,480 480,540 540,870
You know what it does,

1794
00:59:22,840 --> 00:59:24,070
0,180 180,300 300,840 840,960 960,1230
is it follows, it has

1795
00:59:24,070 --> 00:59:25,720
0,120 120,570 570,1140
an infinite loop.

1796
00:59:26,170 --> 00:59:27,960
0,600 600,1230
Wow one.

1797
00:59:28,980 --> 00:59:30,880
0,420 420,630 630,1260
Um, yeah if.

1798
00:59:31,260 --> 00:59:33,560
0,900 930,1770
A L.

1799
00:59:33,560 --> 00:59:36,440
0,630 840,1380 1380,1830 1830,2370 2430,2880
Is mach zero meaning nobody

1800
00:59:36,440 --> 00:59:37,780
0,390 390,750
holding it.

1801
00:59:37,900 --> 00:59:39,280
0,450 450,810 810,870 870,1140 1140,1380
Then, resuming to call her

1802
00:59:39,280 --> 00:59:40,510
0,240 240,360 360,690 690,750 750,1230
and she grabbed the log

1803
00:59:40,690 --> 00:59:41,640
0,390
so.

1804
00:59:42,700 --> 00:59:44,410
0,570 570,690 690,1140 1140,1530 1530,1710
Then we shall walk two

1805
00:59:44,410 --> 00:59:45,660
0,630
one.

1806
00:59:48,320 --> 00:59:49,550
0,690 690,840 840,1020 1020,1110 1110,1230
And you know at that

1807
00:59:49,550 --> 00:59:50,360
0,210 210,300 300,480 480,540 540,810
point we got the lock,

1808
00:59:50,360 --> 00:59:52,070
0,150 150,270 270,390 390,1020 1410,1710
so we can return nothing

1809
00:59:52,070 --> 00:59:53,560
0,90 90,240 240,810
to do anymore.

1810
00:59:53,590 --> 00:59:55,330
0,420 780,1110 1110,1500 1500,1650 1650,1740
A close loop, if we

1811
00:59:55,330 --> 00:59:56,380
0,240 240,360 360,450 450,750 750,1050
didn't get the lock because

1812
00:59:56,380 --> 00:59:57,250
0,150 150,420 420,510 510,750 750,870
the lock was one it

1813
00:59:57,250 --> 00:59:58,240
0,180 180,450 450,660 660,720 720,990
means somebody else is holding

1814
00:59:58,240 --> 00:59:59,050
0,240 240,360 360,480 480,630 630,810
lock so we just keep

1815
00:59:59,050 --> 01:00:00,040
0,360
spinning.

1816
01:00:01,080 --> 01:00:02,250
0,630 630,690 690,900 900,1110 1110,1170
Waiting to go around the

1817
01:00:02,250 --> 01:00:03,210
0,240 240,540 540,630 630,870 870,960
loop over and over and

1818
01:00:03,210 --> 01:00:04,650
0,510 780,990 990,1170 1170,1290 1290,1440
over will do at some

1819
01:00:04,650 --> 01:00:06,540
0,480 480,540 540,660 660,1290
point you know the.

1820
01:00:06,540 --> 01:00:07,830
0,150 150,420 420,630 630,960 960,1290
A whole lock holder called

1821
01:00:07,830 --> 01:00:09,180
0,480 480,720 720,840 840,1080 1080,1350
release which will set lock

1822
01:00:09,180 --> 01:00:11,100
0,300 300,510 780,1620 1620,1740 1740,1920
to um to we'll set

1823
01:00:11,100 --> 01:00:12,300
0,240 240,690
locked zero.

1824
01:00:14,740 --> 01:00:17,140
0,540 540,690 690,1140 1680,1950 1950,2400
And you know what's wrong

1825
01:00:17,140 --> 01:00:19,100
0,150 150,330 330,660 660,1380
with this particular implementation.

1826
01:00:20,870 --> 01:00:23,390
0,150 150,660 750,1470 1530,2100 2100,2520
I think two processes, my

1827
01:00:23,390 --> 01:00:25,370
0,360 360,510 510,810 810,1470 1470,1980
read that it's not locked

1828
01:00:25,760 --> 01:00:27,200
0,180 180,270 270,510 510,930
at the same time.

1829
01:00:27,260 --> 01:00:29,260
0,1260
Yeah.

1830
01:00:30,040 --> 01:00:31,180
0,210 210,540 540,600 600,780 780,1140
So there's a race condition

1831
01:00:31,180 --> 01:00:33,520
0,540 570,1710
here and.

1832
01:00:33,520 --> 01:00:34,840
0,150 150,360 360,630 660,900 900,1320
Or just to make sure

1833
01:00:34,840 --> 01:00:36,700
0,90 90,480 480,810 810,1320
the races right here.

1834
01:00:39,020 --> 01:00:40,730
0,330 330,570 570,690 690,1260 1290,1710
Um, we can have basically

1835
01:00:40,730 --> 01:00:42,170
0,180 180,390 390,720 720,1020 1020,1440
to ship years coming in

1836
01:00:42,230 --> 01:00:43,340
0,120 120,240 240,510 510,810 810,1110
you know we talk time

1837
01:00:43,340 --> 01:00:44,580
0,720
diagram.

1838
01:00:44,700 --> 01:00:47,370
0,510 510,600 600,1260 2190,2490 2490,2670
Yoshi p one should be

1839
01:00:47,400 --> 01:00:49,700
0,720 720,930 930,1050 1050,1680
zero should be one.

1840
01:00:50,600 --> 01:00:52,220
0,150 150,450 480,750 750,1170 1170,1620
You know this statement a

1841
01:00:52,550 --> 01:00:54,500
0,300 300,510 510,870 870,1350
maybe this statement be.

1842
01:00:54,500 --> 01:00:56,930
0,840 870,1320 1320,1890 1920,2070 2070,2430
Both CPU one you know.

1843
01:00:57,500 --> 01:01:00,500
0,300 300,720 720,1140 1200,2310 2670,3000
Reach statement, a um CPU

1844
01:01:00,500 --> 01:01:02,700
0,270 270,450 450,840 840,1650
zero and CPU buh.

1845
01:01:02,950 --> 01:01:04,840
0,600 1020,1350 1350,1560 1560,1800 1800,1890
Um zero one vote for

1846
01:01:04,840 --> 01:01:05,800
0,150 150,480 480,690 690,840 840,960
each statement, a so they

1847
01:01:05,800 --> 01:01:08,500
0,420 420,960 1290,1980 1980,2520 2520,2700
both see a locked being

1848
01:01:08,500 --> 01:01:10,240
0,630 870,990 990,1320 1320,1500 1500,1740
zero and then they're both

1849
01:01:10,240 --> 01:01:11,480
0,360 360,690
execute b.

1850
01:01:13,470 --> 01:01:14,610
0,270 270,450 450,690 690,840 840,1140
Alright, so here at ac

1851
01:01:14,610 --> 01:01:16,200
0,330 330,1110
locked zero.

1852
01:01:17,020 --> 01:01:18,910
0,210 210,450 450,720 720,1020 1020,1890
This guy she locked zero.

1853
01:01:20,760 --> 01:01:21,960
0,150 150,360 360,510 510,750 750,1200
And so they both executes

1854
01:01:21,960 --> 01:01:23,490
0,210 210,570 570,960 960,1530 1530,1530
a statement VIA both a

1855
01:01:23,490 --> 01:01:26,880
0,1170 1200,1800 1800,2310 2580,3210 3210,3390
half acquired lock and um,

1856
01:01:26,880 --> 01:01:29,280
0,330 330,1200 1470,1560 1560,2010 2040,2400
which violated the spec or

1857
01:01:29,280 --> 01:01:30,680
0,150 150,480 480,870
this particular function.

1858
01:01:31,670 --> 01:01:32,880
0,120 120,300 300,600
This makes sense.

1859
01:01:35,740 --> 01:01:36,640
0,180 180,240 240,450 450,780 780,900
So it turns out you

1860
01:01:36,640 --> 01:01:38,740
0,90 90,600 990,1380 1380,1530 1530,2100
know to solve this problem

1861
01:01:38,800 --> 01:01:39,340
0,150 150,330 330,390 390,510 510,540
and sort of get a

1862
01:01:39,340 --> 01:01:40,780
0,360 360,960 960,1050 1050,1080 1080,1440
correct implementation, there are multiple

1863
01:01:40,780 --> 01:01:41,680
0,150 150,210 210,390 390,690 690,900
ways of going about it,

1864
01:01:41,980 --> 01:01:44,110
0,660 660,750 750,1380 1380,1740 1740,2130
but the most common ways

1865
01:01:44,110 --> 01:01:45,610
0,120 120,780 780,1260 1260,1440 1440,1500
to rely basically on a

1866
01:01:45,610 --> 01:01:47,240
0,330 330,600 600,1110
special hardware instruction.

1867
01:01:47,620 --> 01:01:49,420
0,570 570,810 810,1050 1050,1560 1560,1800
Um, an art instruction that

1868
01:01:49,420 --> 01:01:51,040
0,390 390,570 570,660 660,1170 1440,1620
basically what it does and

1869
01:01:51,040 --> 01:01:52,690
0,240 240,510 510,1050 1290,1500 1500,1650
does this test and this

1870
01:01:52,690 --> 01:01:54,360
0,390 420,900 900,1140
set atomic lea.

1871
01:01:54,720 --> 01:01:56,020
0,720
I'm.

1872
01:01:56,050 --> 01:01:58,300
0,180 180,720 840,1440 1680,2160 2160,2250
And so a solution to

1873
01:01:58,300 --> 01:01:59,400
0,450
this.

1874
01:01:59,820 --> 01:02:02,060
0,600 630,1020 1020,1650
A problem is.

1875
01:02:03,140 --> 01:02:04,800
0,270 270,1050
A hardware.

1876
01:02:06,360 --> 01:02:07,680
0,720
Test.

1877
01:02:08,000 --> 01:02:09,680
0,360 360,600 600,1140
And set support.

1878
01:02:16,680 --> 01:02:18,120
0,660 660,960 960,1110 1110,1260 1260,1440
Um, and the way you

1879
01:02:18,120 --> 01:02:18,930
0,150 150,390 390,570 570,660 660,810
think about it, you know

1880
01:02:18,930 --> 01:02:20,880
0,270 270,1080 1170,1410 1410,1830 1860,1950
on the risk five you

1881
01:02:20,880 --> 01:02:22,440
0,90 90,270 270,720 720,1140 1260,1560
know this instruction actually there's

1882
01:02:22,440 --> 01:02:24,960
0,270 330,870 870,1230 1230,1830 1830,2520
the atomic memory operation swap.

1883
01:02:26,680 --> 01:02:27,460
0,210 210,360 360,480 480,660 660,780
Um that we're gonna be

1884
01:02:27,460 --> 01:02:28,620
0,510
using.

1885
01:02:28,740 --> 01:02:31,170
0,720 780,1800 1800,2070 2070,2250 2250,2430
And basically boils down to

1886
01:02:31,170 --> 01:02:33,000
0,360 360,540 540,930 960,1770 1770,1830
testing data set basically the

1887
01:02:33,000 --> 01:02:34,950
0,300 300,420 420,1170 1410,1590 1590,1950
hard work guarantees, you will

1888
01:02:34,980 --> 01:02:36,990
0,450 450,660 660,960 960,1650 1680,2010
you take this a takes

1889
01:02:36,990 --> 01:02:38,580
0,150 150,660 660,960 960,1110 1110,1590
two arguments, what free arguments

1890
01:02:38,580 --> 01:02:39,900
0,210 210,870
and address.

1891
01:02:40,130 --> 01:02:42,560
0,750 750,870 870,1260 1260,1860 2220,2430
A I register one r

1892
01:02:42,560 --> 01:02:45,830
0,540 870,1080 1080,1500 1500,2040 2460,3270
one and register two and

1893
01:02:46,010 --> 01:02:47,660
0,660 660,840 840,900 900,1260 1260,1650
essentially what the hardware does

1894
01:02:47,660 --> 01:02:51,440
0,870 1050,1830 1950,2730 2940,3270 3270,3780
a perceptually, um, is it

1895
01:02:51,440 --> 01:02:53,100
0,510 510,630 630,1260
locks the address.

1896
01:02:53,500 --> 01:02:54,860
0,150 150,300 300,750
If you will.

1897
01:02:54,980 --> 01:02:55,700
0,120 120,270 270,450 450,600 600,720
We'll talk about that in

1898
01:02:55,700 --> 01:02:56,660
0,30 30,300 300,510 510,630 630,960
a second little bit more

1899
01:02:56,660 --> 01:02:58,200
0,360 360,990
blocks address.

1900
01:02:58,200 --> 01:03:00,400
0,570 870,1650
Eat 'em.

1901
01:03:01,290 --> 01:03:02,370
0,150 150,360 360,480 480,540 540,1080
It puts in a temporary

1902
01:03:02,370 --> 01:03:03,700
0,750
variable.

1903
01:03:03,910 --> 01:03:05,650
0,180 180,330 330,510 540,1320 1470,1740
You know the value that

1904
01:03:05,650 --> 01:03:06,700
0,300 300,450 450,540 540,660 660,1050
actually is at that particular

1905
01:03:06,700 --> 01:03:07,800
0,540
address.

1906
01:03:09,570 --> 01:03:11,580
0,660 690,1440
And then.

1907
01:03:13,260 --> 01:03:14,640
0,390 390,480 480,960 960,1200 1200,1380
Raise the value of r

1908
01:03:14,640 --> 01:03:17,220
0,630 960,1350 1350,1500 1500,2070
one into the address.

1909
01:03:17,560 --> 01:03:19,450
0,150 150,630 630,1260 1290,1770 1770,1890
And then basically puts the

1910
01:03:19,450 --> 01:03:21,010
0,600 600,810 810,1020 1020,1140 1140,1560
value that was at the

1911
01:03:21,400 --> 01:03:23,900
0,600 600,1110 1110,1860
originally address into.

1912
01:03:24,380 --> 01:03:27,110
0,1080 1380,1860 1860,2220 2220,2310 2310,2730
Tempera temporary value that was

1913
01:03:27,140 --> 01:03:28,670
0,180 480,870 870,1140 1140,1290 1290,1530
the original value was actually

1914
01:03:28,670 --> 01:03:29,720
0,270 270,540 540,780 780,870 870,1050
address actually into an r

1915
01:03:29,720 --> 01:03:31,820
0,480 750,960 960,1050 1050,1470 1470,2100
two and then basically unlocks

1916
01:03:32,090 --> 01:03:33,300
0,210 210,810
it returns.

1917
01:03:37,220 --> 01:03:39,500
0,600 900,1020 1020,1350 1350,1650 1650,2280
And you know in this

1918
01:03:39,500 --> 01:03:41,240
0,390 390,630 630,750 750,1170 1200,1740
lock, if you will guarantee

1919
01:03:41,240 --> 01:03:42,620
0,90 90,210 210,600 600,840 840,1380
is that basically this test

1920
01:03:42,740 --> 01:03:43,790
0,480 480,570 570,900 900,960 960,1050
where the result of the

1921
01:03:43,790 --> 01:03:44,870
0,240 240,360 360,720 720,960 960,1080
test is returned into r

1922
01:03:44,870 --> 01:03:46,850
0,480 750,1110 1110,1200 1200,1620 1650,1980
two and the set actually

1923
01:03:46,850 --> 01:03:49,040
0,510 750,1500 1500,1680
happened atomic lea.

1924
01:03:49,070 --> 01:03:49,640
0,150 150,240 240,390 390,510 510,570
And so this is a

1925
01:03:49,640 --> 01:03:51,980
0,300 300,930 960,1290 1290,1800 1800,2340
hardware instruction, a most processor

1926
01:03:51,980 --> 01:03:53,540
0,510 510,600 600,840 840,1320 1320,1560
half an art instruction like

1927
01:03:53,540 --> 01:03:54,440
0,420
this.

1928
01:03:54,440 --> 01:03:56,000
0,810 810,1050 1050,1290 1290,1410 1410,1560
Um, um, because it's a

1929
01:03:56,000 --> 01:03:57,800
0,540 540,900 900,1080 1080,1410 1410,1800
convenient way to actually implement

1930
01:03:57,800 --> 01:03:58,820
0,540
blocks.

1931
01:03:58,820 --> 01:03:59,960
0,600
I'm.

1932
01:04:00,560 --> 01:04:02,630
0,630 990,1320 1320,1710 1710,1920 1920,2070
Um, so basically what we've

1933
01:04:02,630 --> 01:04:04,280
0,270 270,540 540,750 750,990 990,1650
done is like we've reduced

1934
01:04:04,280 --> 01:04:06,020
0,540 540,870 870,1290 1290,1380 1380,1740
z autumn it of this

1935
01:04:06,020 --> 01:04:09,860
0,480 1530,2370 2400,3060 3060,3750 3750,3840
a software lock implementation to

1936
01:04:09,860 --> 01:04:12,320
0,630 660,810 810,1200 1200,1590 1590,2460
basically a hardware lock implementation.

1937
01:04:13,190 --> 01:04:16,640
0,690 1020,1860 2190,2910
Um, and um.

1938
01:04:16,970 --> 01:04:18,470
0,150 150,510 510,960 960,1140 1140,1500
So the procedure might implement

1939
01:04:18,470 --> 01:04:19,760
0,150 150,450 450,720 720,960 960,1290
this in very different ways,

1940
01:04:19,790 --> 01:04:21,860
0,210 210,870 870,1290 1290,1500 1500,2070
so basically, um the instruction

1941
01:04:21,860 --> 01:04:23,180
0,210 210,660 660,1140 1140,1290 1290,1320
set itself, there's like a

1942
01:04:23,180 --> 01:04:24,650
0,720 720,780 780,1050 1050,1260 1260,1470
specification, it doesn't actually say

1943
01:04:24,650 --> 01:04:26,060
0,180 180,300 300,810 1200,1350 1350,1410
how it's implemented and it

1944
01:04:26,060 --> 01:04:27,410
0,90 90,390 390,1080 1140,1200 1200,1350
is very dependent on the

1945
01:04:27,410 --> 01:04:28,940
0,270 270,990
actual implementation.

1946
01:04:30,320 --> 01:04:32,200
0,600 600,1290
Obvious dependent.

1947
01:04:34,400 --> 01:04:35,900
0,390 390,690 690,900 900,1230 1230,1500
Um on our memory system

1948
01:04:35,900 --> 01:04:37,320
0,360 360,870
exactly works.

1949
01:04:44,320 --> 01:04:46,870
0,300 300,360 360,930 1170,1980 1980,2550
So, for example, um, if

1950
01:04:46,870 --> 01:04:47,980
0,120 120,270 270,420 420,720 720,1110
you know the budget process

1951
01:04:47,980 --> 01:04:49,960
0,240 270,1050 1050,1440 1440,1680 1680,1980
or a shared single memory

1952
01:04:49,960 --> 01:04:51,580
0,660 720,840 840,1140 1140,1380 1380,1620
controller, um that Rachel writes

1953
01:04:51,580 --> 01:04:52,810
0,90 90,540 630,900 900,960 960,1230
to memory, then the memory

1954
01:04:52,810 --> 01:04:54,220
0,510 510,630 630,900 900,1290 1290,1410
controller can actually support this

1955
01:04:54,220 --> 01:04:58,240
0,540 840,1470 1800,3150 3210,3570 3810,4020
operation basically allow you to

1956
01:04:58,240 --> 01:04:59,440
0,330 330,390 390,450 450,810 810,1200
walk in a particular dress,

1957
01:04:59,440 --> 01:05:00,460
0,90 90,180 180,300 300,660 660,1020
you know and then let

1958
01:05:00,460 --> 01:05:01,630
0,90 90,210 210,510 510,1020 1020,1170
you know one processor due

1959
01:05:01,630 --> 01:05:03,280
0,210 210,900 900,1020 1020,1320 1320,1650
to operations or free a

1960
01:05:03,280 --> 01:05:04,750
0,720 960,1080 1080,1170 1170,1380 1380,1470
instructions and then measure will

1961
01:05:04,750 --> 01:05:06,190
0,630 660,870 870,1050 1050,1230 1230,1440
unlock and so since all

1962
01:05:06,190 --> 01:05:08,230
0,480 570,1320 1410,1710 1710,1800 1800,2040
the processors reach of rights

1963
01:05:08,230 --> 01:05:09,310
0,180 180,270 270,420 420,690 690,1080
group for this memory controller,

1964
01:05:09,310 --> 01:05:10,390
0,60 60,300 300,720 720,930 930,1080
the memory controller into the

1965
01:05:10,390 --> 01:05:11,800
0,450 570,660 660,1080
ordering of blocking.

1966
01:05:12,290 --> 01:05:15,230
0,360 360,1020 1020,1500 2010,2490 2490,2940
Um, if the um memories

1967
01:05:15,230 --> 01:05:16,280
0,360 360,450 450,600 600,990 990,1050
are in this process are

1968
01:05:16,280 --> 01:05:17,840
0,270 270,360 360,450 450,1020 1020,1560
sitting on a shared bus,

1969
01:05:18,110 --> 01:05:19,580
0,720 720,960 960,1140 1140,1230 1230,1470
um, it's often the bus

1970
01:05:19,580 --> 01:05:21,050
0,630 690,990 990,1110 1110,1350 1350,1470
arbitrage that can actually do

1971
01:05:21,050 --> 01:05:22,190
0,210 210,420 420,600 600,990 990,1140
that, where bus arbiter has

1972
01:05:22,190 --> 01:05:24,560
0,540 540,900 900,1260 1260,1770 1770,2370
support for basically executing two

1973
01:05:24,980 --> 01:05:27,170
0,900 900,1560 1560,1740 1740,1830 1830,2190
memory operations in an atomic

1974
01:05:27,170 --> 01:05:27,940
0,330
way.

1975
01:05:28,340 --> 01:05:30,500
0,450 450,990 990,1140 1140,1680 1950,2160
A if it's a if

1976
01:05:30,500 --> 01:05:32,990
0,90 90,450 450,840 840,1560 1950,2490
the process have cash, um,

1977
01:05:32,990 --> 01:05:34,610
0,780 810,1080 1080,1290 1290,1440 1440,1620
then, um, it's sort of

1978
01:05:34,670 --> 01:05:35,540
0,330 330,510 510,570 570,660 660,870
typically part of the cache

1979
01:05:35,540 --> 01:05:38,750
0,300 300,690 690,1230 1500,2250 2850,3210
coherence protocol where a cache

1980
01:05:38,750 --> 01:05:40,460
0,270 270,810 810,1140 1140,1530 1530,1710
coherence protocol will ensure that

1981
01:05:40,460 --> 01:05:41,510
0,210 210,390 390,450 450,900 900,1050
if there's a writer you

1982
01:05:41,510 --> 01:05:43,880
0,120 120,390 390,870 870,1440 1740,2370
know that that particular a

1983
01:05:44,780 --> 01:05:46,820
0,450 450,630 630,720 720,1200 1200,2040
cache line that holds a

1984
01:05:46,850 --> 01:05:48,350
0,720 720,900 900,1050 1050,1110 1110,1500
value we want to update

1985
01:05:48,350 --> 01:05:49,520
0,180 180,300 300,450 480,840 840,1170
ends up in one single

1986
01:05:49,520 --> 01:05:50,460
0,630
cash.

1987
01:05:50,580 --> 01:05:52,530
0,180 180,660 780,1350 1350,1440 1440,1950
And then basically the prosecutor's

1988
01:05:52,530 --> 01:05:53,790
0,120 120,360 360,780 810,990 990,1260
kind of lock that single

1989
01:05:53,790 --> 01:05:56,850
0,330 330,600 600,1080 1080,1740 1740,3060
cache line across to operations.

1990
01:05:57,330 --> 01:05:59,070
0,180 180,840 840,1320 1320,1410 1410,1740
So the implantation of this,

1991
01:05:59,070 --> 01:05:59,850
0,150 150,390 390,510 510,570 570,780
you know can be done

1992
01:05:59,850 --> 01:06:01,500
0,60 60,270 270,540 540,1020 1080,1650
in many different ways, um,

1993
01:06:01,500 --> 01:06:03,570
0,210 210,990 1050,1470 1470,1860 1860,2070
but conceptually as ia what's

1994
01:06:03,570 --> 01:06:04,350
0,180 180,390 390,540 540,720 720,780
going on, it's like you

1995
01:06:04,350 --> 01:06:06,030
0,270 270,330 330,870 1170,1560 1560,1680
walk the address a you

1996
01:06:06,030 --> 01:06:08,190
0,420 420,540 540,840 840,1410 1740,2160
read your original value you

1997
01:06:08,340 --> 01:06:09,660
0,360 360,540 540,630 630,810 810,1320
store in the new value

1998
01:06:09,660 --> 01:06:11,240
0,180 180,570 570,780 780,1110
and return your value.

1999
01:06:12,360 --> 01:06:13,620
0,120 120,210 210,330 330,690
Does that make sense.

2000
01:06:15,820 --> 01:06:17,500
0,570 960,1290 1290,1440 1440,1560 1560,1680
To see how we can

2001
01:06:17,500 --> 01:06:19,810
0,240 240,420 420,1080 1740,2070 2070,2310
use that instruction, um, let's

2002
01:06:19,810 --> 01:06:21,130
0,210 210,390 390,510 510,630 630,1320
actually look at the implementation

2003
01:06:21,130 --> 01:06:24,220
0,450 450,1260 1290,2040 2040,2460 2460,3090
of a acquiring Louise in

2004
01:06:24,250 --> 01:06:25,570
0,240 240,360 360,810 1050,1260 1260,1320
aix v six and it

2005
01:06:25,570 --> 01:06:26,380
0,120 120,450 450,480 480,750 750,810
will expose a couple of

2006
01:06:26,380 --> 01:06:27,900
0,240 240,570 570,1080
other interesting details.

2007
01:06:29,300 --> 01:06:30,420
0,600
Alright.

2008
01:06:31,800 --> 01:06:33,330
0,180 180,360 360,510 510,840 840,1530
So let me first a

2009
01:06:33,360 --> 01:06:34,350
0,270 270,420 420,660 660,900 900,990
bring up spin lock at

2010
01:06:34,350 --> 01:06:36,750
0,600 630,1470 1920,1980 1980,2190 2190,2400
H A S been locked

2011
01:06:36,750 --> 01:06:37,920
0,120 120,660 690,990 990,1080 1080,1170
at h as you can

2012
01:06:37,920 --> 01:06:38,960
0,480
see.

2013
01:06:39,220 --> 01:06:42,010
0,180 180,420 420,1350 1380,2160 2610,2790
It's pretty straightforward, um, he

2014
01:06:42,010 --> 01:06:43,900
0,270 270,420 420,990 990,1380 1380,1890
has this flat block exactly

2015
01:06:43,900 --> 01:06:45,160
0,120 120,300 300,480 510,780 780,1260
as in our pseudo code

2016
01:06:45,460 --> 01:06:46,450
0,120 120,240 240,480 480,780 780,990
and then there's two other

2017
01:06:46,450 --> 01:06:47,770
0,210 210,330 330,870 870,1200 1200,1320
things for debugging, namely the

2018
01:06:47,770 --> 01:06:49,510
0,240 240,330 330,450 450,930 1020,1740
name of the lock and

2019
01:06:49,510 --> 01:06:51,480
0,300 300,900 900,990 990,1560
a CPU, the last.

2020
01:06:51,480 --> 01:06:52,650
0,90 90,450 450,780 780,900 900,1170
The current CPU that actually

2021
01:06:52,650 --> 01:06:54,020
0,360 360,450 450,840
holding the lock.

2022
01:06:54,170 --> 01:06:55,220
0,390 390,540 540,660 660,750 750,1050
Um, and this is mostly

2023
01:06:55,220 --> 01:06:56,120
0,120 120,360 360,570 570,630 630,900
to print out the buggy

2024
01:06:56,120 --> 01:06:57,560
0,510 510,630 630,1020 1020,1140 1140,1440
messages for example you do

2025
01:06:57,560 --> 01:06:59,030
0,390 390,1230 1230,1320 1320,1380 1380,1470
to acquire some of the

2026
01:06:59,030 --> 01:07:00,220
0,210 210,660
same CPU.

2027
01:07:01,450 --> 01:07:02,680
0,240 240,480 480,660 660,990 990,1230
Um, okay, so then let's

2028
01:07:02,680 --> 01:07:04,420
0,180 180,420 630,1200
look at a.

2029
01:07:05,970 --> 01:07:07,760
0,180 180,1260
The implementation.

2030
01:07:12,020 --> 01:07:13,550
0,690 690,960 960,1080 1080,1260 1260,1530
Um, and so let's start

2031
01:07:13,550 --> 01:07:15,140
0,180 180,330 330,360 360,1080
out with a choir.

2032
01:07:15,140 --> 01:07:17,330
0,720 1050,1560 1560,1740 1740,2010 2010,2190
Um, and let's first look

2033
01:07:17,330 --> 01:07:19,160
0,90 90,630 660,1290
at this loop.

2034
01:07:19,540 --> 01:07:21,160
0,240 240,420 420,570 570,1080 1080,1620
So this is actually a

2035
01:07:21,160 --> 01:07:23,020
0,0 810,1230 1230,1440 1440,1530 1530,1860
um, the sort of testing

2036
01:07:23,020 --> 01:07:24,220
0,240 240,510 510,690 690,1020 1020,1200
set look that I just

2037
01:07:24,220 --> 01:07:25,930
0,270 270,660 930,1260 1260,1500 1500,1710
talked about it turns out

2038
01:07:25,930 --> 01:07:28,120
0,240 240,870 1020,1620
that in a.

2039
01:07:28,360 --> 01:07:30,640
0,930 990,1440 1440,1560 1560,1740 1740,2280
Um, yeah the c standard

2040
01:07:30,670 --> 01:07:33,190
0,390 390,1170 1200,2040 2130,2460 2460,2520
actually defines a one of

2041
01:07:33,190 --> 01:07:35,290
0,150 150,510 510,1200 1230,1740 1740,2100
these atomic operations and so

2042
01:07:35,620 --> 01:07:37,930
0,510 1320,1740 1740,1980 1980,2220 2220,2310
a standard actually has a

2043
01:07:37,930 --> 01:07:40,060
0,420 420,960 1260,1530 1530,2040 2040,2130
function that a says you

2044
01:07:40,060 --> 01:07:41,800
0,120 120,450 450,960 990,1650 1650,1740
know sync lock test and

2045
01:07:41,800 --> 01:07:43,150
0,270 270,390 390,780 780,1290 1290,1350
set and basically specifies the

2046
01:07:43,150 --> 01:07:45,130
0,600 600,780 780,1200 1200,1410 1410,1980
behavior that I just described.

2047
01:07:45,700 --> 01:07:47,080
0,180 180,300 300,510 510,1020 1020,1380
And then every processor basically

2048
01:07:47,080 --> 01:07:50,740
0,750 780,1080 1080,1770 1770,2550 2790,3660
required to implement a behavior

2049
01:07:50,860 --> 01:07:52,360
0,270 270,450 450,660 660,1140 1140,1500
and since most processors have

2050
01:07:52,360 --> 01:07:54,190
0,330 360,1080 1170,1290 1290,1560 1560,1830
and matching of testing set

2051
01:07:54,190 --> 01:07:56,020
0,330 330,990 1230,1440 1440,1560 1560,1830
hardware instruction, um, this turns

2052
01:07:56,020 --> 01:07:56,710
0,150 150,210 210,300 300,360 360,690
out to be a reasonable

2053
01:07:56,710 --> 01:07:58,060
0,690 690,870 870,960 960,1290 1290,1350
straightforward for the process to

2054
01:07:58,060 --> 01:07:59,260
0,510 540,750 750,900 900,960 960,1200
implement then so in fact

2055
01:07:59,260 --> 01:08:00,640
0,90 90,210 210,540 870,1110 1110,1380
if we look at kernel

2056
01:08:00,640 --> 01:08:01,990
0,180 180,780 780,1080 1080,1200 1200,1350
dot am we can look

2057
01:08:01,990 --> 01:08:03,400
0,60 60,150 150,600 600,1290 1290,1410
at the assembly instructions and

2058
01:08:03,400 --> 01:08:04,780
0,150 150,810 810,1080 1080,1140 1140,1380
see exactly what the risk

2059
01:08:04,780 --> 01:08:06,360
0,210 210,690 690,1200
by processor does.

2060
01:08:08,000 --> 01:08:09,860
0,420 420,1320
Um, so.

2061
01:08:11,200 --> 01:08:12,970
0,210 210,540 540,750 750,1380 1380,1770
But here is our assembly

2062
01:08:12,970 --> 01:08:16,360
0,390 390,1260 1590,2730 2730,2970 2970,3390
structures require and let's here's

2063
01:08:16,360 --> 01:08:17,520
0,600
our.

2064
01:08:17,800 --> 01:08:19,960
0,570 570,960 960,1590
Atomic swap instruction.

2065
01:08:27,830 --> 01:08:29,240
0,360 360,510 510,630 630,750 750,1410
Um, so you can see

2066
01:08:29,270 --> 01:08:30,800
0,990
a.

2067
01:08:30,800 --> 01:08:32,630
0,780 810,930 930,1080 1080,1560 1560,1830
If you know atomic swap,

2068
01:08:32,630 --> 01:08:34,880
0,630 630,1050 1050,1470 1560,2100 2100,2250
basically eyes called register eight

2069
01:08:34,880 --> 01:08:38,090
0,360 360,1890 2130,2250 2250,2610 2610,3210
five and the input and

2070
01:08:38,090 --> 01:08:39,140
0,300 300,570 570,810 810,960 960,1050
output also ends up in

2071
01:08:39,140 --> 01:08:40,820
0,150 150,630 1020,1320 1320,1470 1470,1680
a five and as long

2072
01:08:40,820 --> 01:08:41,270
0,90 90,150 150,300 300,360 360,450
as the whole to the

2073
01:08:41,270 --> 01:08:45,230
0,660 930,1950 1980,2940 2940,3540 3540,3960
address and a if it's

2074
01:08:45,260 --> 01:08:46,600
0,300 300,900
not equal.

2075
01:08:46,630 --> 01:08:50,200
0,1470 1500,2250 2280,2430 2430,3090 3090,3570
We return and otherwise basically

2076
01:08:50,200 --> 01:08:52,030
0,150 150,270 270,780 930,1410 1410,1830
we go back to a

2077
01:08:52,420 --> 01:08:54,640
0,330 360,720 720,1200 1320,1830 1830,2220
um jump back to a

2078
01:08:55,060 --> 01:08:56,160
0,570
um.

2079
01:08:57,170 --> 01:08:58,010
0,270 270,510 510,600 600,780 780,840
Double check I'm saying the

2080
01:08:58,010 --> 01:09:00,230
0,180 180,360 360,810 1170,1890 1890,2220
right thing here, move a

2081
01:09:00,230 --> 01:09:01,780
0,960
foray.

2082
01:09:01,940 --> 01:09:03,500
0,420 420,660 660,960 960,1320 1320,1560
Six if not equal to

2083
01:09:03,500 --> 01:09:06,110
0,300 300,690 690,1500 1650,2040 2220,2610
O X twenty plus {22.

2084
01:09:06,110 --> 01:09:07,200
0,510
-}

2085
01:09:07,260 --> 01:09:08,220
0,390 390,600 600,720 720,780 780,960
Um, alright, that's a little

2086
01:09:08,220 --> 01:09:10,140
0,150 150,210 210,810 810,1560 1560,1920
hard to calculate but basically

2087
01:09:10,140 --> 01:09:10,980
0,60 60,180 180,390 390,510 510,840
in one case we branch

2088
01:09:10,980 --> 01:09:11,970
0,420 510,660 660,750 750,840 840,990
out and in the other

2089
01:09:11,970 --> 01:09:13,600
0,240 240,390 390,660 660,1110
case, we branch back.

2090
01:09:14,270 --> 01:09:15,200
0,210 210,360 360,510 510,630 630,930
So this may be easier

2091
01:09:15,200 --> 01:09:16,280
0,300 300,510 510,630 630,870 870,1080
to look at the c

2092
01:09:16,280 --> 01:09:17,300
0,450
code.

2093
01:09:19,580 --> 01:09:20,570
0,150 150,330 330,480 480,810 810,990
So let's go away in

2094
01:09:20,570 --> 01:09:22,190
0,270 270,390 390,570 570,1230 1410,1620
here, so what happens so

2095
01:09:22,190 --> 01:09:23,270
0,210 210,570 600,780 780,840 840,1080
if the if the lock

2096
01:09:23,270 --> 01:09:25,140
0,360 390,810 810,1320
is not held.

2097
01:09:25,140 --> 01:09:26,160
0,240 240,510 510,720 720,930 930,1020
A what will be the

2098
01:09:26,160 --> 01:09:27,600
0,330 330,450 450,630 630,930 930,1440
value of l lock well

2099
01:09:27,600 --> 01:09:29,540
0,30 30,360 360,930 1230,1740
a movie zero right.

2100
01:09:30,180 --> 01:09:31,170
0,240 240,540 540,660 660,840 840,990
And so we call this

2101
01:09:31,170 --> 01:09:32,940
0,270 270,750 930,1260 1260,1410 1410,1770
lesson set what will happen

2102
01:09:32,940 --> 01:09:34,770
0,180 180,360 360,570 570,1230 1380,1830
is we'll write one a

2103
01:09:34,770 --> 01:09:37,350
0,210 210,690 1560,2190 2190,2280 2280,2580
in walk return the previous

2104
01:09:37,350 --> 01:09:38,340
0,480
value.

2105
01:09:38,620 --> 01:09:39,820
0,150 150,270 270,360 360,630 630,1200
So if the previous value

2106
01:09:39,820 --> 01:09:42,760
0,210 210,870 1320,1890 1920,2550 2730,2940
is zero, um, then we're

2107
01:09:42,760 --> 01:09:43,960
0,360 390,630 630,840 840,990 990,1200
good right, because that means

2108
01:09:43,960 --> 01:09:44,950
0,150 150,450 450,600 600,900 900,990
that nobody was holding the

2109
01:09:44,950 --> 01:09:46,450
0,450 450,630 630,810 810,1080 1080,1500
lock and we fall through

2110
01:09:46,450 --> 01:09:47,080
0,120 120,210 210,390 390,510 510,630
and we're done with this

2111
01:09:47,080 --> 01:09:48,100
0,300 300,600
while loop.

2112
01:09:49,740 --> 01:09:50,700
0,150 150,330 330,510 510,690 690,960
Now let's say the log

2113
01:09:50,700 --> 01:09:52,590
0,360 360,510 510,960 1140,1530 1560,1890
value was one so probably

2114
01:09:52,590 --> 01:09:55,560
0,1140 1170,1680 1680,1950 1950,2400 2760,2970
the wash action lock well,

2115
01:09:55,560 --> 01:09:57,420
0,270 270,480 480,870 870,1380 1470,1860
will this instruction do it

2116
01:09:57,420 --> 01:09:59,340
0,540 600,1410
will, um.

2117
01:09:59,340 --> 01:10:01,110
0,480 510,780 780,1020 1020,1500 1500,1770
Read the old value put

2118
01:10:01,110 --> 01:10:03,120
0,180 180,780 780,1020 1020,1380 1380,2010
that insight correct there's one

2119
01:10:03,120 --> 01:10:04,290
0,180 180,360 360,480 480,900 990,1170
X in this case and

2120
01:10:04,290 --> 01:10:05,940
0,180 180,510 510,930 990,1260 1260,1650
then write a new one

2121
01:10:05,940 --> 01:10:07,620
0,330 330,540 540,1170
into that location.

2122
01:10:07,790 --> 01:10:09,680
0,780 780,1230 1230,1440 1440,1590 1590,1890
Um, and that will change

2123
01:10:09,680 --> 01:10:11,480
0,480 510,810 810,1020 1020,1110 1110,1800
nothing right because it was

2124
01:10:11,480 --> 01:10:12,780
0,300 300,780
already locked.

2125
01:10:12,810 --> 01:10:14,160
0,540 540,750 750,840 840,1170 1170,1350
And and the function will

2126
01:10:14,160 --> 01:10:16,260
0,270 270,720 1050,1740 1740,1890 1890,2100
return one indicating that actually

2127
01:10:16,260 --> 01:10:17,370
0,240 240,360 360,450 450,750 750,1110
some of the previous hole

2128
01:10:17,370 --> 01:10:18,810
0,210 210,510 510,720 720,1020 1020,1440
that it was already locked

2129
01:10:18,840 --> 01:10:19,860
0,120 120,300 300,360 360,540 540,1020
and so in that case

2130
01:10:19,920 --> 01:10:21,630
0,210 240,720 720,810 810,1440 1560,1710
is unequal to zero and

2131
01:10:21,630 --> 01:10:22,890
0,90 90,240 240,750 870,1080 1080,1260
it will spin will keep

2132
01:10:22,890 --> 01:10:25,170
0,600 690,990 990,1530 1530,1890 1890,2280
spinning boom tail locked actually

2133
01:10:25,170 --> 01:10:28,140
0,240 240,750 1020,1560 1920,2430 2460,2970
set back to a zero.

2134
01:10:28,590 --> 01:10:29,760
0,420 420,660 660,990 990,1080 1080,1170
Dream level happened in this

2135
01:10:29,760 --> 01:10:30,780
0,510
release.

2136
01:10:32,500 --> 01:10:34,040
0,180 180,480 480,690 690,930
Any questions about this.

2137
01:10:51,200 --> 01:10:52,540
0,300 300,780
No questions.

2138
01:10:52,810 --> 01:10:54,720
0,450 750,1380
Okay, I'm.

2139
01:10:56,070 --> 01:10:57,240
0,180 180,360 360,960 960,1050 1050,1170
So now basically you know

2140
01:10:57,240 --> 01:10:58,620
0,150 150,300 300,390 390,630 660,1380
let's look at the corresponding

2141
01:10:58,680 --> 01:11:00,080
0,840
um.

2142
01:11:00,170 --> 01:11:01,960
0,240 240,480 480,1260
The relief operation.

2143
01:11:01,990 --> 01:11:03,560
0,930
And.

2144
01:11:03,560 --> 01:11:04,980
0,840
For.

2145
01:11:07,540 --> 01:11:10,390
0,900 930,1470 1470,1860 1890,2160 2160,2850
And here's a release operation,

2146
01:11:10,690 --> 01:11:11,920
0,420 420,510 510,810 810,1140 1140,1230
and if you look at

2147
01:11:11,920 --> 01:11:14,140
0,150 150,510 510,1080 1110,1650
the colonel am again.

2148
01:11:15,960 --> 01:11:18,420
0,330 330,1200 1290,1710 1710,2160 2160,2460
That instruction, um, so lets

2149
01:11:18,420 --> 01:11:19,560
0,150 150,330 330,600 600,900 900,1140
look at least probably right

2150
01:11:19,560 --> 01:11:21,440
0,390 390,660 660,1380
after his release.

2151
01:11:22,220 --> 01:11:23,390
0,210 210,330 330,630 630,900 900,1170
So the release actually also

2152
01:11:23,390 --> 01:11:25,700
0,450 450,660 660,1110 1110,1620 1650,2310
uses this atomic swap instruction.

2153
01:11:26,680 --> 01:11:27,960
0,720
Good.

2154
01:11:27,960 --> 01:11:30,000
0,360 360,600 600,960 960,1590 1620,2040
And putting basically zero into

2155
01:11:30,000 --> 01:11:31,080
0,150 150,510
s one.

2156
01:11:33,520 --> 01:11:35,290
0,240 240,810 1020,1230 1230,1680 1680,1770
And so this guarantee is

2157
01:11:35,290 --> 01:11:37,180
0,450 450,660 660,840 840,1320 1320,1890
basically that this atomic update,

2158
01:11:37,180 --> 01:11:39,280
0,90 90,210 210,630 630,1380 1410,2100
you know to a locked

2159
01:11:39,280 --> 01:11:42,040
0,150 150,210 210,810 1080,2070 2100,2760
or a clock, a writing

2160
01:11:42,040 --> 01:11:43,630
0,450 450,720 720,870 870,1410 1410,1590
zero into a clock using

2161
01:11:43,630 --> 01:11:45,020
0,60 60,390 390,900
an atomic operation.

2162
01:11:46,080 --> 01:11:47,790
0,450 450,540 540,750 750,1200 1200,1710
Many of you ask why

2163
01:11:47,790 --> 01:11:49,800
0,180 180,510 510,960 960,1440
not just use tor.

2164
01:11:49,800 --> 01:11:50,880
0,60 60,330 330,720 720,870 870,1080
A store instruction to actually

2165
01:11:50,880 --> 01:11:52,140
0,240 240,720
read zero.

2166
01:11:52,510 --> 01:11:53,900
0,900
AM.

2167
01:11:53,990 --> 01:11:55,440
0,930
Anybody.

2168
01:11:55,500 --> 01:11:56,130
0,150 150,210 210,330 330,390 390,630
When you want to guess

2169
01:11:56,130 --> 01:11:57,460
0,780
why.

2170
01:11:58,310 --> 01:11:59,390
0,270 270,450 450,480 480,780 780,1080
Why do I not work

2171
01:11:59,390 --> 01:12:00,620
0,420 600,720 720,810 810,1080 1080,1230
or what the problem could

2172
01:12:00,620 --> 01:12:01,480
0,330
be.

2173
01:12:02,380 --> 01:12:04,240
0,360 360,840 870,1140 1140,1440 1440,1860
Because then some other process

2174
01:12:04,240 --> 01:12:05,440
0,210 210,300 300,690 690,1080 1080,1200
might be writing one to

2175
01:12:05,440 --> 01:12:07,420
0,120 120,540 540,900 1380,1740
the log or no.

2176
01:12:07,760 --> 01:12:09,470
0,270 270,660 660,930 930,1440 1470,1710
Or writing another zero but

2177
01:12:09,470 --> 01:12:10,340
0,180 180,360 360,480 480,570 570,870
that can't be the case,

2178
01:12:10,340 --> 01:12:11,200
0,270
right.

2179
01:12:11,320 --> 01:12:12,340
0,270 270,510 510,630 630,810 810,1020
Yeah, well there could be

2180
01:12:12,340 --> 01:12:12,970
0,150 150,240 240,360 360,510 510,630
okay so there could be

2181
01:12:12,970 --> 01:12:14,320
0,210 210,900 900,1020 1020,1140 1140,1350
two processes or two ship

2182
01:12:14,320 --> 01:12:15,550
0,240 240,660 660,780 780,960 960,1230
use writing to l walk

2183
01:12:15,550 --> 01:12:16,690
0,90 90,180 180,390 390,750 780,1140
at the same time right,

2184
01:12:17,170 --> 01:12:19,090
0,750 840,1050 1050,1110 1110,1380 1380,1920
um, but I think what

2185
01:12:19,090 --> 01:12:20,380
0,210 210,480 480,840 840,1020 1020,1290
the question really is that

2186
01:12:20,380 --> 01:12:21,550
0,120 120,330 330,480 480,720 720,1170
you know for many people

2187
01:12:21,550 --> 01:12:22,810
0,360 360,570 570,870 870,1110 1110,1260
and I often assume this

2188
01:12:22,810 --> 01:12:24,100
0,420 540,750 750,960 960,1110 1110,1290
too is that you're going

2189
01:12:24,100 --> 01:12:25,030
0,60 60,180 180,270 270,570 570,930
to do a single story

2190
01:12:25,030 --> 01:12:25,870
0,420 420,540 540,630 630,780 780,840
structure that is sort of

2191
01:12:25,870 --> 01:12:27,540
0,150 150,210 210,600 600,1200
like an atomic operation.

2192
01:12:28,250 --> 01:12:30,110
0,600 840,1050 1050,1200 1200,1500 1500,1860
Um, now there's not always

2193
01:12:30,110 --> 01:12:31,760
0,90 90,690 720,960 960,1500 1500,1650
the case for example if

2194
01:12:31,760 --> 01:12:33,350
0,540 750,780 810,1350 1350,1470 1470,1590
you are a and it

2195
01:12:33,350 --> 01:12:34,850
0,180 180,540 540,780 780,990 990,1500
really depends on the architecture

2196
01:12:34,850 --> 01:12:36,800
0,660 690,960 960,1020 1020,1440 1440,1950
implementation like for example if

2197
01:12:36,800 --> 01:12:38,420
0,90 90,600 600,1080 1080,1440 1440,1620
the cashiers protocol works or

2198
01:12:38,420 --> 01:12:39,560
0,30 30,330 330,660 660,870 870,1140
a cash system works using

2199
01:12:39,560 --> 01:12:40,790
0,330 330,600 600,780 780,1020 1020,1230
cache lines where cache line

2200
01:12:40,790 --> 01:12:41,820
0,540
maybe.

2201
01:12:41,820 --> 01:12:43,350
0,150 150,390 390,630 630,1470 1470,1530
A bigger than injure are

2202
01:12:43,350 --> 01:12:45,750
0,330 330,540 540,720 720,1260 1620,2400
typically bigger than integer again,

2203
01:12:45,750 --> 01:12:46,860
0,180 180,360 360,570 570,930 930,1110
then really what's happening is

2204
01:12:46,860 --> 01:12:48,060
0,210 210,300 300,570 570,1050 1050,1200
that the first operation is

2205
01:12:48,060 --> 01:12:49,200
0,360 360,450 450,750 750,1050 1050,1140
loading the cache line, and

2206
01:12:49,200 --> 01:12:50,460
0,150 150,630 630,690 690,990 990,1260
then updating the cache line,

2207
01:12:50,790 --> 01:12:51,540
0,180 180,240 240,570 570,660 660,750
so in fact you know

2208
01:12:51,540 --> 01:12:52,920
0,90 90,330 330,810 810,1110 1110,1380
a store instruction basically has

2209
01:12:52,950 --> 01:12:54,510
0,210 210,630 630,1200 1200,1320 1320,1560
two micro operations in it

2210
01:12:54,690 --> 01:12:56,880
0,780 1380,1830 1830,1950 1950,2100 2100,2190
and you can get the

2211
01:12:56,880 --> 01:12:57,940
0,180 180,660
wrong result.

2212
01:12:58,990 --> 01:13:02,110
0,480 720,1260 1290,2310 2400,2550 2550,3120
Um, so, um, you know

2213
01:13:02,530 --> 01:13:04,030
0,270 270,810 810,900 900,1260 1290,1500
to avoid you know having

2214
01:13:04,030 --> 01:13:05,050
0,90 90,420 420,810 810,930 930,1020
to understand anything of the

2215
01:13:05,050 --> 01:13:06,610
0,300 300,840 840,930 930,1440 1440,1560
hardware implementation of exactly and

2216
01:13:06,610 --> 01:13:08,380
0,300 300,750 750,1260 1260,1380 1380,1770
whether integer operations are atomic

2217
01:13:08,380 --> 01:13:09,730
0,90 90,480 510,840 840,1170 1170,1350
or not or writing to

2218
01:13:09,730 --> 01:13:12,440
0,540 540,840 1050,1770 1860,2220
64 bit 64, um.

2219
01:13:12,440 --> 01:13:14,060
0,240 240,810 810,1230 1230,1290 1290,1620
Big memory values an atomic

2220
01:13:14,060 --> 01:13:15,530
0,660 810,930 930,1020 1020,1170 1170,1470
operation, you know we use

2221
01:13:15,530 --> 01:13:18,740
0,420 690,1590 1590,2220 2250,2640 2640,3210
the um a risk five

2222
01:13:19,070 --> 01:13:20,450
0,480 480,630 630,780 780,1320 1320,1380
operation that is guaranteed to

2223
01:13:20,450 --> 01:13:22,060
0,120 120,540 540,930 930,1110
be executed atomic lea.

2224
01:13:25,020 --> 01:13:26,340
0,120 120,240 240,390 390,750
Does that make sense.

2225
01:13:28,100 --> 01:13:29,160
0,540
Yes.

2226
01:13:30,290 --> 01:13:32,540
0,270 270,570 570,750 750,990 990,2250
Okay, so um, just um.

2227
01:13:33,210 --> 01:13:35,610
0,300 300,510 510,870 870,1560 1620,2400
Just for your amusement, a

2228
01:13:36,180 --> 01:13:37,230
0,450 450,720 720,810 810,960 960,1050
atomic swap is not the

2229
01:13:37,230 --> 01:13:39,450
0,240 240,870 900,1350 1350,1860 1890,2220
only instruction that exists a

2230
01:13:39,450 --> 01:13:40,620
0,120 120,420 420,690 690,900 900,1170
so here's the risk five

2231
01:13:40,620 --> 01:13:43,350
0,540 870,1500 1500,1980 2010,2640 2640,2730
annual um in lists, a

2232
01:13:43,350 --> 01:13:44,220
0,180 180,360 360,450 450,540 540,870
whole bunch of the atomic

2233
01:13:44,220 --> 01:13:45,540
0,480 480,660 660,810 810,900 900,1320
operation, so there's an atomic

2234
01:13:45,540 --> 01:13:47,070
0,300 300,420 420,870 870,1260 1260,1530
ends in atomic or there's

2235
01:13:47,070 --> 01:13:49,290
0,450 450,870 870,1320 1620,1860 1860,2220
a Max min, um, they're

2236
01:13:49,290 --> 01:13:50,940
0,630 630,630
all, um.

2237
01:13:50,940 --> 01:13:51,900
0,300 300,510 510,690 690,870 870,960
A can so read or

2238
01:13:51,900 --> 01:13:52,920
0,240 240,270 270,780 780,930 930,1020
write a value in an

2239
01:13:52,920 --> 01:13:54,380
0,390 390,900
atomic operation.

2240
01:13:58,480 --> 01:13:59,560
0,570
Okay.

2241
01:13:59,890 --> 01:14:00,850
0,150 150,300 300,420 420,450 450,960
Okay so there's a couple

2242
01:14:00,970 --> 01:14:01,660
0,210 210,420 420,480 480,630 630,690
other things I want to

2243
01:14:01,660 --> 01:14:03,130
0,240 240,690 720,1110 1110,1290 1290,1470
point out a in this

2244
01:14:03,130 --> 01:14:04,760
0,330 330,1020
particular implementation.

2245
01:14:04,910 --> 01:14:06,140
0,720
I'm.

2246
01:14:06,420 --> 01:14:08,250
0,840 990,1260 1260,1440 1440,1530 1530,1830
In a let me start

2247
01:14:08,250 --> 01:14:10,710
0,360 360,510 510,870 870,1350 1740,2460
again go back to acquire.

2248
01:14:12,850 --> 01:14:13,750
0,360 360,510 510,750 750,810 810,900
Um, so one of the

2249
01:14:13,750 --> 01:14:16,300
0,180 180,450 450,780 780,1260
first things that the.

2250
01:14:16,300 --> 01:14:19,030
0,300 300,570 570,1050 1350,2160 2160,2730
Acquire function dos, um, is

2251
01:14:19,030 --> 01:14:21,920
0,1140 1170,1500 1500,1800 1830,2430
it turns off interrupts.

2252
01:14:22,900 --> 01:14:24,610
0,570 900,1110 1110,1230 1230,1440 1440,1710
And it's really good to

2253
01:14:24,610 --> 01:14:25,810
0,420 420,810 810,1020 1020,1110 1110,1200
understand why that is the

2254
01:14:25,810 --> 01:14:26,770
0,480 480,570 570,720 720,810 810,960
case and so for now

2255
01:14:26,770 --> 01:14:27,670
0,240 240,360 360,480 480,780 780,900
I'm gonna go back to

2256
01:14:27,670 --> 01:14:29,680
0,90 90,600 630,1020 1020,1470
a uart example code.

2257
01:14:29,680 --> 01:14:30,550
0,360 360,480 480,630 630,690 690,870
And you think a little

2258
01:14:30,550 --> 01:14:31,800
0,150 150,360 360,750
bit about this.

2259
01:14:31,800 --> 01:14:32,880
0,390 390,600 600,810 810,930 930,1080
Um, and so we want

2260
01:14:32,880 --> 01:14:34,200
0,240 240,450 450,600 600,690 690,1320
to think about the case

2261
01:14:34,380 --> 01:14:36,940
0,1020 1050,1950
were a.

2262
01:14:37,120 --> 01:14:38,980
0,480 480,570 570,1020 1050,1380 1380,1860
Acquire is actually maybe incorrectly

2263
01:14:38,980 --> 01:14:40,300
0,450 450,720 720,1020 1020,1200 1200,1320
implemented does not turn off

2264
01:14:40,300 --> 01:14:43,060
0,900 1020,1410 1860,2100 2220,2670 2670,2760
interrupts, so the way to

2265
01:14:43,060 --> 01:14:44,050
0,180 180,450 450,660 660,900 900,990
think about this is if

2266
01:14:44,050 --> 01:14:45,700
0,90 90,240 240,390 390,990 990,1650
we go through York proceed,

2267
01:14:46,090 --> 01:14:47,770
0,330 330,930 960,1290 1290,1380 1380,1680
and here let's say your

2268
01:14:48,160 --> 01:14:49,140
0,510
runs.

2269
01:14:49,170 --> 01:14:52,470
0,810 1290,1980 1980,2580 2580,2730 2730,3300
And, um acquires the lock.

2270
01:14:53,520 --> 01:14:54,780
0,210 210,330 330,540 540,1020 1020,1260
And but does not turn

2271
01:14:54,780 --> 01:14:56,340
0,120 120,690 750,1020 1020,1140 1140,1560
off interrupts, what can happen.

2272
01:15:03,050 --> 01:15:04,220
0,240 240,600 600,630 630,840 840,1170
Give everybody a couple seconds

2273
01:15:04,220 --> 01:15:05,540
0,90 90,240 240,510 510,750 840,1320
to think about it, um,

2274
01:15:05,930 --> 01:15:07,040
0,210 210,390 390,540 540,630 630,1110
if you have an idea

2275
01:15:07,040 --> 01:15:07,850
0,180 180,480 480,540 540,720 720,810
or why it might be

2276
01:15:07,850 --> 01:15:10,520
0,450 450,1110 1530,2100
wrong like jumpin.

2277
01:15:18,340 --> 01:15:20,680
0,390 390,1470 1590,1800 1800,1950 1950,2340
Um, perhaps it could be

2278
01:15:20,710 --> 01:15:23,770
0,270 270,810 810,1500 1650,2520 2550,3060
a interrupted because of a

2279
01:15:24,070 --> 01:15:26,080
0,480 480,570 570,810 840,1590 1860,2010
because of the clock and

2280
01:15:26,080 --> 01:15:28,900
0,180 180,990 1260,2160 2400,2640 2640,2820
then something happens and it

2281
01:15:28,900 --> 01:15:31,090
0,210 210,330 330,600 600,1380 1530,2190
needs to print something else,

2282
01:15:31,090 --> 01:15:31,900
0,180 180,240 240,570 570,690 690,810
and it tries to do

2283
01:15:31,900 --> 01:15:33,820
0,420 870,1500
your again.

2284
01:15:33,970 --> 01:15:35,530
0,210 210,540 540,660 660,900 900,1560
My blog is already taken

2285
01:15:35,740 --> 01:15:36,700
0,330 330,480 480,540 540,600 600,960
that might be a possible

2286
01:15:36,700 --> 01:15:38,230
0,480 480,1290 1320,1410 1410,1470 1470,1530
scenario a there is a

2287
01:15:38,230 --> 01:15:39,880
0,270 270,420 420,930 960,1530 1530,1650
much more direct example for

2288
01:15:39,880 --> 01:15:40,840
0,420
this.

2289
01:15:40,840 --> 01:15:41,740
0,150 150,390 390,630 630,810 810,900
So let's say you are

2290
01:15:41,740 --> 01:15:44,380
0,210 210,750 750,1620 2070,2520 2520,2640
could see gridlock and you

2291
01:15:44,380 --> 01:15:46,690
0,300 300,660 690,1590 1590,1740 1740,2310
were busy transmitting some character.

2292
01:15:47,590 --> 01:15:49,060
0,180 180,720 720,840 840,1020 1020,1470
So what you are dumb

2293
01:15:49,090 --> 01:15:50,500
0,450 450,840 840,1140 1140,1290 1290,1410
or transmitting character, what does

2294
01:15:50,500 --> 01:15:51,440
0,60 60,390
it do.

2295
01:15:53,160 --> 01:15:54,330
0,300 300,570 570,660 660,750 750,1170
If cost is an interrupt

2296
01:15:54,330 --> 01:15:57,620
0,420 900,1500 1530,1860 1860,2760
correct and your interruptions.

2297
01:15:57,940 --> 01:15:59,560
0,330 330,480 480,630 630,1200 1200,1620
Whether you are interrupted due.

2298
01:16:00,740 --> 01:16:02,300
0,180 180,480 480,540 540,930 930,1560
It grabs the same lock,

2299
01:16:02,450 --> 01:16:03,680
0,150 150,300 300,720 720,870 870,1230
you know that the proteins

2300
01:16:03,680 --> 01:16:04,940
0,540 600,840 840,960 960,1110 1110,1260
holding right, so what will

2301
01:16:04,940 --> 01:16:06,590
0,270 270,660 1140,1320 1320,1470 1470,1650
happen here, if there's only

2302
01:16:06,590 --> 01:16:08,210
0,210 210,720 990,1260 1260,1410 1410,1620
one CPU and so there's

2303
01:16:08,210 --> 01:16:09,440
0,150 150,360 360,720 720,990 990,1230
no other CPU where this

2304
01:16:09,440 --> 01:16:11,100
0,510 510,630 630,780 780,1140
interrupt could be running.

2305
01:16:12,460 --> 01:16:13,420
0,210 210,300 300,390 390,450 450,960
Well, we have a deadlock

2306
01:16:13,450 --> 01:16:15,840
0,210 210,720 990,1800
right because the.

2307
01:16:15,840 --> 01:16:17,430
0,270 270,600 600,810 810,1470 1470,1590
Current CPU is holding the

2308
01:16:17,430 --> 01:16:18,780
0,510 540,720 720,900 900,1020 1020,1350
lock as part of you

2309
01:16:18,810 --> 01:16:21,360
0,690 750,1080 1080,1680 1710,1860 1860,2550
gucci then later the interrupt

2310
01:16:21,360 --> 01:16:22,470
0,120 120,390 390,750 900,1050 1050,1110
that came in and the

2311
01:16:22,470 --> 01:16:23,250
0,210 210,360 360,510 510,720 720,780
first thing it tries to

2312
01:16:23,250 --> 01:16:24,000
0,120 120,240 240,420 420,720 720,750
do is actually quite a

2313
01:16:24,000 --> 01:16:25,640
0,240 240,390 390,690 690,1140
lot has already helped.

2314
01:16:25,640 --> 01:16:26,690
0,150 150,420 420,660 660,840 840,1050
In fact, in the case

2315
01:16:26,690 --> 01:16:27,980
0,90 90,690 690,780 780,1140 1140,1290
of x86, you will get

2316
01:16:27,980 --> 01:16:29,240
0,60 60,570 660,1110 1110,1200 1200,1260
a panic because you know

2317
01:16:29,240 --> 01:16:31,040
0,120 120,360 360,1050 1320,1710 1710,1800
the same CPU, a is

2318
01:16:31,040 --> 01:16:31,940
0,210 210,450 450,510 510,810 810,900
actually trying to acquire the

2319
01:16:31,940 --> 01:16:33,320
0,270 270,480 480,840
same walk again.

2320
01:16:37,460 --> 01:16:39,140
0,510 630,1140 1140,1260 1260,1350 1350,1680
So basically you know what

2321
01:16:39,170 --> 01:16:41,150
0,840 840,1230 1230,1560 1560,1830 1830,1980
requires block deals with sort

2322
01:16:41,150 --> 01:16:42,230
0,90 90,420 420,750 750,990 990,1080
of two different types of

2323
01:16:42,230 --> 01:16:43,880
0,690 810,1290 1290,1440 1440,1590 1590,1650
currency one they're sort of

2324
01:16:43,880 --> 01:16:45,410
0,420 420,690 690,810 810,1110 1110,1530
currency between two different {CPU's

2325
01:16:45,410 --> 01:16:46,700
0,300 570,810 810,870 870,1020 1020,1290
-} going to make sure

2326
01:16:46,700 --> 01:16:47,810
0,180 180,240 240,600 600,750 750,1110
like for example if the

2327
01:16:47,870 --> 01:16:49,400
0,600 600,990 990,1320 1320,1440 1440,1530
interrupter function runs on a

2328
01:16:49,400 --> 01:16:51,170
0,330 330,840 1020,1230 1230,1620 1620,1770
different CPU, though basically we're

2329
01:16:51,170 --> 01:16:52,040
0,180 180,300 300,720 720,810 810,870
going to raise on the

2330
01:16:52,040 --> 01:16:53,380
0,450 450,900
transmission buffer.

2331
01:16:53,440 --> 01:16:54,250
0,210 210,390 390,480 480,600 600,810
Um, but if they run

2332
01:16:54,250 --> 01:16:55,210
0,90 90,180 180,450 450,900 900,960
in the same CPU, we're

2333
01:16:55,210 --> 01:16:55,900
0,120 120,180 180,330 330,540 540,690
going to make sure that

2334
01:16:55,900 --> 01:16:57,550
0,120 120,360 360,420 420,930 1320,1650
it's still a topic a

2335
01:16:57,550 --> 01:16:58,330
0,180 180,360 360,450 450,600 600,780
and that is not being

2336
01:16:58,330 --> 01:16:59,770
0,510 510,630 630,1080 1080,1230 1230,1440
interrupted and therefore we actually

2337
01:16:59,770 --> 01:17:00,610
0,210 210,270 270,540 540,600 600,840
turn the yarn or UPS

2338
01:17:00,610 --> 01:17:02,300
0,300 330,1170
off inquire.

2339
01:17:03,360 --> 01:17:04,470
0,240 240,360 360,720 720,930 930,1110
And they're only turned on

2340
01:17:04,470 --> 01:17:05,790
0,480 630,900 900,1050 1050,1170 1170,1320
again at the end of

2341
01:17:05,790 --> 01:17:08,310
0,660 990,1740 1740,2160 2160,2250 2250,2520
release, um, when the walk

2342
01:17:08,310 --> 01:17:09,690
0,270 270,570 570,750 750,1260 1260,1380
actually hasn't been released at

2343
01:17:09,690 --> 01:17:10,890
0,180 180,360 360,480 480,810 810,1200
that point is saved again,

2344
01:17:10,920 --> 01:17:11,550
0,90 90,210 210,330 330,510 510,630
you know to take these

2345
01:17:11,550 --> 01:17:14,220
0,540 720,1200 1200,1470 1470,1740 1740,2670
interrupts because walk actually eyes

2346
01:17:14,220 --> 01:17:15,480
0,210 210,510 510,870
not released anymore.

2347
01:17:16,190 --> 01:17:17,390
0,300 300,510 510,840 840,990 990,1200
Not quite holding it not

2348
01:17:17,390 --> 01:17:18,540
0,240 240,600
health anymore.

2349
01:17:18,940 --> 01:17:20,420
0,270 270,390 390,540 540,870
Does that make sense.

2350
01:17:28,560 --> 01:17:30,240
0,300 300,450 450,720 720,1320 1350,1680
Okay, there's one more subtle

2351
01:17:30,240 --> 01:17:32,880
0,360 360,1170 1260,1650 1680,2490 2490,2640
thing in this implementation that

2352
01:17:32,880 --> 01:17:33,900
0,90 90,300 300,360 360,570 570,1020
I want to talk about,

2353
01:17:34,260 --> 01:17:36,800
0,840 1290,2010
um, and.

2354
01:17:36,860 --> 01:17:38,660
0,660 1050,1380 1380,1530 1530,1620 1620,1800
Um, we need to deal

2355
01:17:38,660 --> 01:17:39,660
0,450
with.

2356
01:17:39,800 --> 01:17:41,120
0,900
Yeah.

2357
01:17:43,200 --> 01:17:45,240
0,150 150,420 420,750 780,1560
And there is a.

2358
01:17:45,270 --> 01:17:46,880
0,360 360,840
Memory ordering.

2359
01:17:53,810 --> 01:17:56,300
0,480 480,1230 1500,2130 2130,2340 2340,2490
So a resemble you think

2360
01:17:56,300 --> 01:17:58,550
0,570 600,1200 1200,1560 1560,1800 1800,2250
about locke is let's say.

2361
01:17:59,500 --> 01:18:01,900
0,540 540,690 690,1170 1500,1710 1710,2400
Acquires its locked to one,

2362
01:18:02,290 --> 01:18:03,610
0,630 660,960 960,1080 1080,1260 1260,1320
um, maybe we have a

2363
01:18:03,610 --> 01:18:04,870
0,270 270,660 660,750 750,1050 1050,1260
critical section in which you

2364
01:18:04,870 --> 01:18:07,840
0,690 690,900 900,1170 1170,1680 2070,2970
access X plus one and

2365
01:18:07,870 --> 01:18:12,220
0,1050 1050,2550 3030,3690 3690,4080 4080,4350
a inquire release UNICEF locked

2366
01:18:12,220 --> 01:18:13,060
0,360
zero.

2367
01:18:13,260 --> 01:18:14,160
0,270 270,510 510,690 690,750 750,900
So you sort of think

2368
01:18:14,160 --> 01:18:15,750
0,210 210,750 750,1110 1110,1350 1350,1590
about instruction scheme that's being

2369
01:18:15,750 --> 01:18:17,400
0,510 510,630 630,690 690,1020 1020,1650
executed on a particular CPU,

2370
01:18:17,550 --> 01:18:18,450
0,210 210,360 360,450 450,660 660,900
you know so these are

2371
01:18:18,450 --> 01:18:19,890
0,120 120,570 570,660 660,870 870,1440
the instructions are being executed,

2372
01:18:19,950 --> 01:18:20,780
0,330
right.

2373
01:18:22,110 --> 01:18:23,550
0,420 420,810 810,900 900,1320 1320,1440
Now, if the code were

2374
01:18:23,550 --> 01:18:26,160
0,180 180,1050 1110,1350 1350,2070
just purely a sequential.

2375
01:18:26,800 --> 01:18:30,260
0,1020 1260,2010 2010,2820
Um 's, um.

2376
01:18:30,490 --> 01:18:34,990
0,270 270,810 810,1860 2160,3090 3570,4500
The compiler or a processor

2377
01:18:35,020 --> 01:18:36,790
0,480 480,690 690,1050 1050,1650 1650,1770
architecture or reorder instructions, you

2378
01:18:36,790 --> 01:18:37,660
0,240 240,450 450,540 540,660 660,870
know just to get better

2379
01:18:37,660 --> 01:18:41,920
0,690 1020,1710 1830,2670 3000,3780 3780,4260
performance, for example, um, if

2380
01:18:41,920 --> 01:18:43,120
0,120 120,270 270,330 330,780 780,1200
it were a sequential stream,

2381
01:18:43,120 --> 01:18:44,140
0,240 240,330 330,480 480,900 900,1020
would it be okay to

2382
01:18:44,140 --> 01:18:46,180
0,330 330,510 510,1170 1200,1350 1350,2040
move this instruction to afterwards.

2383
01:18:49,170 --> 01:18:51,060
0,300 300,480 480,930 930,1140 1140,1890
We don't change the correctness

2384
01:18:51,120 --> 01:18:52,380
0,330 330,510 510,840 840,1140 1140,1260
of the single stream of

2385
01:18:52,380 --> 01:18:53,600
0,630
execution.

2386
01:18:58,180 --> 01:18:59,620
0,150 150,420 420,720 750,1170 1170,1440
No, not really, because lock

2387
01:18:59,620 --> 01:19:00,640
0,60 60,300 300,360 360,630 630,1020
the next are totally independent

2388
01:19:00,640 --> 01:19:01,720
0,90 90,210 210,540 540,810 810,1080
of each other, there's no

2389
01:19:02,050 --> 01:19:03,280
0,570 570,720 720,900 900,1110 1110,1230
relation to it would be

2390
01:19:03,280 --> 01:19:04,480
0,390 390,720 720,840 840,960 960,1200
perfectly fine if it were

2391
01:19:04,480 --> 01:19:06,460
0,90 90,600 600,1230 1530,1860 1860,1980
a sequential execution that the

2392
01:19:06,460 --> 01:19:08,470
0,330 330,660 660,1020 1020,1350 1350,2010
ex has moved after blocked

2393
01:19:08,470 --> 01:19:10,500
0,690 1110,1560
a zero.

2394
01:19:10,620 --> 01:19:11,670
0,330 330,540 540,810 810,930 930,1050
Um, so that you know

2395
01:19:11,670 --> 01:19:13,080
0,150 150,210 210,810
on the single.

2396
01:19:14,340 --> 01:19:16,620
0,420 420,870 870,1680
Single serial execution.

2397
01:19:18,140 --> 01:19:19,600
0,210 210,690
That's okay.

2398
01:19:23,500 --> 01:19:25,630
0,330 330,660 660,1080 1080,1530 1530,2130
And affect and effect processors,

2399
01:19:25,630 --> 01:19:26,290
0,150 150,300 300,450 450,570 570,660
you do this all the

2400
01:19:26,290 --> 01:19:27,250
0,480 480,570 570,690 690,840 840,960
time you know they do

2401
01:19:27,250 --> 01:19:30,070
0,600 600,1050 1050,1500 1920,2310 2310,2820
expectantly execute stuff we're expected

2402
01:19:30,070 --> 01:19:31,540
0,60 60,450 450,1050 1050,1290 1290,1470
to execute instructions and so

2403
01:19:31,540 --> 01:19:32,740
0,210 210,360 360,780 780,840 840,1200
that can result in basically

2404
01:19:32,740 --> 01:19:34,760
0,180 180,720 720,870 870,1560
these instructions {re-orderings. -}

2405
01:19:34,760 --> 01:19:36,890
0,660 720,1350 1440,1830 1830,2010 2010,2130
Um the compiler, does it

2406
01:19:36,890 --> 01:19:38,720
0,540 630,840 840,960 960,1710 1710,1830
too may be optimized some

2407
01:19:38,720 --> 01:19:39,830
0,240 240,570 570,690 690,930 930,1110
code path and also will

2408
01:19:39,830 --> 01:19:41,600
0,330 330,870 870,990 990,1380 1380,1770
reward instructions as long as

2409
01:19:41,630 --> 01:19:42,530
0,90 90,300 300,780 780,840 840,900
you know results in the

2410
01:19:42,530 --> 01:19:44,280
0,300 300,660 660,1200
same cheryl execution.

2411
01:19:44,710 --> 01:19:46,390
0,180 180,570 570,840 840,1230 1230,1680
But clearly during concurrent execution

2412
01:19:46,390 --> 01:19:48,250
0,360 360,1020 1050,1290 1290,1560 1560,1860
thisbe disaster right because if

2413
01:19:48,460 --> 01:19:50,380
0,540 540,630 630,1380
awkward are required.

2414
01:19:51,320 --> 01:19:52,940
0,510 510,660 660,810 810,1050 1050,1620
And this was our release.

2415
01:19:54,180 --> 01:19:55,290
0,150 150,450 450,630 630,750 750,1110
And basically what we've done,

2416
01:19:55,290 --> 01:19:56,130
0,90 90,330 330,450 450,510 510,840
we move through the critical

2417
01:19:56,130 --> 01:19:58,770
0,360 360,1020 1020,1170 1170,1560 1590,2640
section outside of the the

2418
01:19:58,860 --> 01:20:00,420
0,480 480,810 810,960 960,1140 1170,1560
acquiring region would be totally

2419
01:20:00,420 --> 01:20:01,520
0,510
incorrect.

2420
01:20:01,580 --> 01:20:03,020
0,180 180,360 360,930
So that's wrong.

2421
01:20:04,110 --> 01:20:05,940
0,660 660,810 810,870 870,1260 1260,1830
Wrong is a concurrent execution.

2422
01:20:12,780 --> 01:20:14,010
0,150 150,480 480,570 570,660 660,1230
And so you know to

2423
01:20:14,040 --> 01:20:15,630
0,780 780,900 900,1140 1140,1200 1200,1590
forbid or tell the compiler

2424
01:20:15,630 --> 01:20:17,190
0,90 90,510 510,1050 1110,1290 1290,1560
and hardware not to do

2425
01:20:17,190 --> 01:20:19,800
0,390 720,1350 1650,2220 2220,2460 2460,2610
this, um there's something that's

2426
01:20:19,800 --> 01:20:21,930
0,390 390,930 930,1500 1500,1950 1950,2130
called a memory fence or

2427
01:20:21,930 --> 01:20:23,820
0,210 210,360 360,1140 1440,1710 1710,1890
something that synchronize a there's

2428
01:20:23,820 --> 01:20:25,800
0,450 450,780 780,1050 1050,1260 1290,1980
instructions basically says, like any

2429
01:20:25,830 --> 01:20:27,150
0,330 330,390 390,750 750,1140 1140,1320
loads or stores before this

2430
01:20:27,150 --> 01:20:29,220
0,510 750,990 990,1140 1140,1680 1680,2070
point you are not allowed

2431
01:20:29,220 --> 01:20:30,540
0,60 60,360 360,750 750,900 900,1320
to move beyond this point.

2432
01:20:31,320 --> 01:20:32,700
0,240 240,360 360,780 780,990 990,1380
And so Louise has this

2433
01:20:32,700 --> 01:20:34,860
0,570 570,1170 1170,1590 1590,1770 1770,2160
and a inquiry has this

2434
01:20:35,190 --> 01:20:36,150
0,150 150,300 300,390 390,750 750,960
and so for example, this

2435
01:20:36,150 --> 01:20:37,350
0,210 210,390 390,570 570,750 750,1200
X plus X plus one

2436
01:20:37,380 --> 01:20:39,900
0,150 150,330 330,720 1020,1710 1710,2520
if that was a updated

2437
01:20:39,900 --> 01:20:41,250
0,390 390,510 510,960 960,1050 1050,1350
after the choir and before

2438
01:20:41,250 --> 01:20:42,480
0,60 60,630 660,870 870,1050 1050,1230
the release, the X plus

2439
01:20:42,480 --> 01:20:43,980
0,210 210,360 360,630 660,1050 1050,1500
X plus one has disdain

2440
01:20:43,980 --> 01:20:45,690
0,840 870,990 990,1140 1140,1350 1350,1710
before you know this particular

2441
01:20:45,690 --> 01:20:47,320
0,270 270,810 810,1200
memory civilization point.

2442
01:20:47,410 --> 01:20:48,700
0,300 300,630 630,780 780,1020 1020,1290
And so it will not

2443
01:20:48,700 --> 01:20:49,570
0,270 270,480 480,600 600,720 720,870
be there will be no

2444
01:20:49,570 --> 01:20:52,240
0,510 720,1410 1410,1800 1800,2310 2340,2670
trouble, um, with a memory

2445
01:20:52,240 --> 01:20:53,620
0,390 690,990 990,1170 1170,1260 1260,1380
ordering so this is the

2446
01:20:53,620 --> 01:20:55,750
0,450 450,930 930,1170 1170,1740 1740,2130
reason why sing synchronizes their

2447
01:20:55,900 --> 01:20:58,360
0,930 930,1260 1290,1950 1950,2070 2070,2460
bowing the release and also

2448
01:20:58,360 --> 01:20:59,530
0,180 180,420 420,570 570,690 690,1170
there's one in the choir.

2449
01:21:03,560 --> 01:21:04,840
0,90 90,210 210,360 360,690
Does that make sense.

2450
01:21:06,230 --> 01:21:07,670
0,180 180,420 420,600 600,690 690,1440
A I have a question.

2451
01:21:08,880 --> 01:21:11,460
0,750 990,1380 1380,1830 2160,2370 2370,2580
Um, is it is it

2452
01:21:11,460 --> 01:21:14,250
0,210 210,990 990,1350 1350,1530 1530,2790
by convention that the start

2453
01:21:14,280 --> 01:21:15,760
0,930
of.

2454
01:21:15,880 --> 01:21:17,240
0,810
I'm.

2455
01:21:17,300 --> 01:21:19,340
0,330 330,990 1020,1260 1260,1440 1440,2040
The port so I guess

2456
01:21:19,370 --> 01:21:21,290
0,540 540,930 930,1080 1230,1410 1410,1920
I guess the the compiler

2457
01:21:21,290 --> 01:21:23,090
0,720 750,1230 1230,1380 1380,1560 1560,1800
could figure out that there

2458
01:21:23,090 --> 01:21:25,130
0,240 240,690 690,1380 1380,1920 1920,2040
is an instruction before the

2459
01:21:25,130 --> 01:21:27,050
0,300 300,450 450,870 900,1680 1680,1920
lock is even acquired and

2460
01:21:27,050 --> 01:21:28,700
0,540 780,990 990,1230 1230,1380 1380,1650
that it can be just

2461
01:21:28,700 --> 01:21:29,750
0,90 90,300 300,600 600,960 960,1050
as well moved after the

2462
01:21:29,750 --> 01:21:32,500
0,270 270,390 390,1110
lock is released.

2463
01:21:32,830 --> 01:21:34,840
0,390 390,630 630,1320 1320,1770 1770,2010
Can that happen, or will

2464
01:21:34,840 --> 01:21:36,670
0,270 300,930 930,1110 1110,1650 1650,1830
it encounter a barrier and

2465
01:21:36,670 --> 01:21:38,410
0,240 240,540 630,1320 1320,1530 1530,1740
see that you also you

2466
01:21:38,410 --> 01:21:39,940
0,180 180,330 330,570 570,870 870,1530
know in this case requires

2467
01:21:39,940 --> 01:21:40,870
0,60 60,480 480,600 600,810 810,930
a barrier and lose as

2468
01:21:40,870 --> 01:21:42,100
0,60 60,570 570,750 750,1110 1110,1230
a barrier, so anything that

2469
01:21:42,100 --> 01:21:44,350
0,300 300,690 690,1170 1200,1740 1740,2250
happened before locked except one

2470
01:21:44,440 --> 01:21:46,000
0,240 240,510 510,840 840,1200 1440,1560
will happen before that it

2471
01:21:46,000 --> 01:21:47,650
0,120 120,540 540,870 870,1080 1080,1650
will never pass that instruction

2472
01:21:47,680 --> 01:21:48,790
0,150 150,360 360,450 450,510 510,1110
so this is a barrier,

2473
01:21:48,910 --> 01:21:49,880
0,60 60,180 180,570
if you will.

2474
01:21:50,390 --> 01:21:52,160
0,270 270,660 660,1260
This barrier one.

2475
01:21:52,250 --> 01:21:53,330
0,150 150,300 300,360 360,750 750,1080
And this is barrier to.

2476
01:21:55,520 --> 01:21:56,480
0,270 270,390 390,510 510,780 780,960
And so it means that

2477
01:21:56,480 --> 01:21:58,370
0,150 150,540 540,930 930,1470 1500,1890
any instruction before here stay

2478
01:21:58,370 --> 01:22:01,130
0,450 780,960 960,1470 1470,2160 2580,2760
here and instruction between what

2479
01:22:01,130 --> 01:22:02,750
0,300 300,570 570,630 630,1170 1230,1620
happened between the two between

2480
01:22:02,750 --> 01:22:04,700
0,330 330,690 690,840 840,1320 1320,1950
acquiring Luis and instruction after

2481
01:22:04,910 --> 01:22:06,530
0,300 300,510 510,1020 1020,1140 1140,1620
we'll stay after the release.

2482
01:22:07,950 --> 01:22:09,120
0,600
Okay.

2483
01:22:11,110 --> 01:22:12,180
0,600
Okay.

2484
01:22:12,550 --> 01:22:14,230
0,210 210,330 330,450 450,750 750,1680
Okay so I'm running a

2485
01:22:14,260 --> 01:22:15,910
0,210 210,870 900,1320 1320,1470 1470,1650
college student a so let

2486
01:22:15,910 --> 01:22:18,250
0,240 240,450 450,960 960,1350 1800,2340
me just actually, um a

2487
01:22:18,490 --> 01:22:20,080
0,450 450,900
wrapup here.

2488
01:22:27,710 --> 01:22:29,480
0,540 570,1230
So, um.

2489
01:22:29,480 --> 01:22:31,250
0,90 90,570 600,720 720,1170 1500,1770
To watch you know watch

2490
01:22:31,250 --> 01:22:32,920
0,60 60,240 240,360 360,960
a good for correctness.

2491
01:22:40,370 --> 01:22:41,270
0,300 300,420 420,570 570,660 660,900
Um, we can be bad

2492
01:22:41,270 --> 01:22:42,740
0,120 120,780
for performance.

2493
01:22:47,480 --> 01:22:48,920
0,600 690,990 990,1050 1050,1110 1110,1440
A sort of a bummer

2494
01:22:48,920 --> 01:22:49,910
0,240 240,480 480,570 570,720 720,990
hurt because we are one

2495
01:22:49,910 --> 01:22:51,470
0,300 300,450 450,1020 1050,1380 1380,1560
reason we actually got into

2496
01:22:51,470 --> 01:22:52,580
0,270 270,360 360,720 720,870 870,1110
locks is basically to get

2497
01:22:52,880 --> 01:22:55,160
0,390 390,690 690,1050 1050,1740 1740,2280
correct during parallel execution but

2498
01:22:55,160 --> 01:22:58,130
0,450 450,660 660,930 930,1440 2250,2970
locks actually limit parallel execution.

2499
01:22:58,850 --> 01:23:01,040
0,420 930,1230 1230,1680 1740,1890 1890,2190
Um, that's one and two

2500
01:23:01,040 --> 01:23:02,760
0,330 330,1080
watch complicate.

2501
01:23:05,460 --> 01:23:06,980
0,900
Programming.

2502
01:23:07,290 --> 01:23:08,610
0,270 270,360 360,780 780,1170 1170,1320
And you will experience that

2503
01:23:08,610 --> 01:23:09,420
0,60 60,300 300,390 390,510 510,810
in some of the lab

2504
01:23:09,420 --> 01:23:10,080
0,120 120,210 210,330 330,420 420,660
that we're going to be

2505
01:23:10,080 --> 01:23:11,190
0,300 300,420 420,690 690,810 810,1110
doing, in fact from now

2506
01:23:11,190 --> 01:23:12,570
0,240 240,390 390,750 750,990 990,1380
on, we'll see walk shown

2507
01:23:12,570 --> 01:23:14,310
0,330 330,450 450,900 1320,1620 1620,1740
all the time, and that

2508
01:23:14,310 --> 01:23:16,320
0,90 90,270 270,480 480,1110 1380,2010
will give us a least

2509
01:23:16,320 --> 01:23:18,300
0,60 60,330 330,1080 1140,1500 1500,1980
you know a some thought

2510
01:23:18,300 --> 01:23:18,720
0,60 60,150 150,240 240,360 360,420
you know it's going to

2511
01:23:18,720 --> 01:23:20,250
0,90 90,600 600,690 690,1110 1110,1530
be necessary to understand why

2512
01:23:20,250 --> 01:23:21,480
0,90 90,330 330,390 390,810 810,1230
the locks are there and

2513
01:23:21,480 --> 01:23:22,700
0,180 180,300 300,750
what they protect.

2514
01:23:22,700 --> 01:23:23,930
0,510 510,720 720,960 960,1140 1140,1230
Um, and they're sort of

2515
01:23:23,930 --> 01:23:25,520
0,690 810,1020 1020,1200 1200,1440 1440,1590
inherent a if you do

2516
01:23:25,520 --> 01:23:27,590
0,330 330,900 1260,1560 1560,1920 1920,2070
parallel programming, um that you

2517
01:23:27,590 --> 01:23:29,700
0,210 210,300 300,480 480,1620
need to use locks.

2518
01:23:29,880 --> 01:23:31,830
0,480 780,1350 1530,1740 1740,1860 1860,1950
And so you know if

2519
01:23:31,830 --> 01:23:32,610
0,90 90,240 240,300 300,720 720,780
you want to avoid the

2520
01:23:32,610 --> 01:23:34,260
0,630 630,750 750,870 870,1230 1230,1650
complications due to watch you

2521
01:23:34,260 --> 01:23:35,100
0,330 330,390 390,600 600,780 780,840
know a couple things you

2522
01:23:35,100 --> 01:23:36,420
0,120 120,420 450,540 540,810 1050,1320
could do you no don't

2523
01:23:36,420 --> 01:23:37,200
0,270 270,330 330,420 420,600 600,780
share it, you don't have

2524
01:23:37,200 --> 01:23:38,100
0,330
to.

2525
01:23:42,860 --> 01:23:43,640
0,210 210,300 300,450 450,570 570,780
If you don't have shared

2526
01:23:43,640 --> 01:23:45,040
0,210 210,840
data structures.

2527
01:23:46,340 --> 01:23:48,110
0,360 360,570 570,900 900,1260 1260,1770
These race conditions cannot happen,

2528
01:23:48,350 --> 01:23:50,060
0,480 480,630 630,780 780,1350 1350,1710
um, and so there and

2529
01:23:50,060 --> 01:23:51,020
0,180 180,540 540,690 690,810 810,960
so you you don't need

2530
01:23:51,020 --> 01:23:52,040
0,480 480,600 600,720 720,870 870,1020
locks and so you don't

2531
01:23:52,040 --> 01:23:53,940
0,150 150,300 300,750 750,1350
need this complicated programming.

2532
01:23:54,000 --> 01:23:55,410
0,540 540,780 780,870 870,1020 1020,1410
Um, but you know typically

2533
01:23:55,410 --> 01:23:56,160
0,90 90,210 210,420 420,540 540,750
you will have some shared

2534
01:23:56,160 --> 01:23:57,420
0,210 210,600 600,660 660,780 780,1260
data structures, you will do

2535
01:23:57,420 --> 01:23:58,920
0,570 600,690 690,810 810,1020 1020,1500
a you will need locks

2536
01:23:59,100 --> 01:24:00,300
0,360 360,420 420,570 570,780 810,1200
and I think the thing

2537
01:24:00,300 --> 01:24:01,050
0,90 90,210 210,360 360,630 630,750
to do is start with

2538
01:24:01,050 --> 01:24:02,340
0,270 270,780
coarse grains.

2539
01:24:04,130 --> 01:24:05,840
0,210 210,360 360,720 720,1170
And then move to.

2540
01:24:06,880 --> 01:24:08,830
0,360 360,750 780,1020 1020,1620 1620,1950
Fine grain is necessary based

2541
01:24:08,830 --> 01:24:10,420
0,540 540,720 720,1230 1230,1440 1440,1590
on your measurements, you want

2542
01:24:10,420 --> 01:24:11,440
0,60 60,210 210,720 720,810 810,1020
to make determined to make

2543
01:24:11,440 --> 01:24:12,340
0,210 210,300 300,390 390,630 630,900
sure that the lock sexual

2544
01:24:12,340 --> 01:24:14,020
0,810 810,1110 1110,1170 1170,1440 1440,1680
content before you actually start

2545
01:24:14,020 --> 01:24:15,200
0,600
redesigning.

2546
01:24:15,480 --> 01:24:16,770
0,150 150,750 750,870 870,1050 1050,1290
And finally, you know use

2547
01:24:16,770 --> 01:24:18,660
0,270 270,870 870,1290
arrays detector, too.

2548
01:24:20,460 --> 01:24:21,270
0,120 120,300 300,390 390,540 540,810
And one of these race

2549
01:24:21,270 --> 01:24:23,420
0,360 360,720 720,960 960,1470
detector tools actually finds.

2550
01:24:23,760 --> 01:24:25,560
0,180 180,900 960,1410 1410,1620 1620,1800
Um problems, um or race

2551
01:24:25,560 --> 01:24:26,700
0,390 390,630 630,930 930,1080 1080,1140
conditions, because you put the

2552
01:24:26,700 --> 01:24:27,480
0,270 270,330 330,420 420,690 690,780
blocks in the wrong or

2553
01:24:27,480 --> 01:24:28,650
0,120 120,270 270,330 330,780 780,1170
you put the acquiring releases

2554
01:24:28,650 --> 01:24:29,490
0,90 90,150 150,420 420,720 720,840
in the wrong place and

2555
01:24:29,490 --> 01:24:31,110
0,60 60,540 540,630 630,840 840,1620
in fact you still have

2556
01:24:31,320 --> 01:24:32,500
0,750
races.

2557
01:24:32,770 --> 01:24:33,880
0,450 510,690 690,840 840,930 930,1110
Okay so there's a quick

2558
01:24:33,880 --> 01:24:35,380
0,450 450,540 540,1020 1080,1320 1320,1500
introduction to walks, we're going

2559
01:24:35,380 --> 01:24:36,160
0,60 60,270 270,330 330,660 660,780
to talk a lot more

2560
01:24:36,160 --> 01:24:37,900
0,210 210,510 510,600 600,1320 1350,1740
about locks in the basement

2561
01:24:37,900 --> 01:24:38,320
0,90 90,150 150,300 300,360 360,420
for the rest of the

2562
01:24:38,320 --> 01:24:39,340
0,330 330,450 450,540 540,750 750,1020
semester that will show up

2563
01:24:39,340 --> 01:24:40,180
0,300 300,480 480,660 660,690 690,840
and we'll talk a little

2564
01:24:40,180 --> 01:24:41,080
0,150 150,300 300,510 510,750 750,900
bit more about lock free

2565
01:24:41,080 --> 01:24:42,970
0,510 510,600 600,750 750,1080 1380,1890
programming at the end and

2566
01:24:43,000 --> 01:24:44,380
0,210 210,360 360,690 690,900 900,1380
see how that's done in

2567
01:24:44,380 --> 01:24:45,360
0,570
kernels.

2568
01:24:45,580 --> 01:24:46,960
0,450 480,720 720,990 990,1080 1080,1380
Okay, so when you stop

2569
01:24:46,960 --> 01:24:48,670
0,420 780,960 960,1080 1080,1470 1470,1710
here so that anybody who

2570
01:24:48,670 --> 01:24:49,630
0,150 150,210 210,450 450,720 720,960
has to go somewhere else

2571
01:24:49,630 --> 01:24:50,710
0,150 150,750 750,900 900,960 960,1080
can go, but if you

2572
01:24:50,710 --> 01:24:52,060
0,150 150,330 330,540 540,1020 1020,1350
have any more questions feel

2573
01:24:52,060 --> 01:24:53,230
0,360 390,660 660,870 870,1050 1050,1170
free, please feel free to

2574
01:24:53,230 --> 01:24:54,180
0,270 270,420
ask them.

2575
01:24:54,820 --> 01:24:55,480
0,90 90,180 180,270 270,600 600,660
We have a question in

2576
01:24:55,480 --> 01:24:57,430
0,120 120,510 780,1320 1530,1830 1830,1950
the chat, um isn't the

2577
01:24:57,430 --> 01:24:59,530
0,270 270,840 840,1500 1500,1830 1830,2100
fence instruction unnecessary because the

2578
01:24:59,530 --> 01:25:01,270
0,360 360,750 750,1290 1290,1470 1470,1740
am swap instruction can have

2579
01:25:01,270 --> 01:25:03,340
0,120 120,570 570,930 930,1470
the acquire release ordering.

2580
01:25:04,060 --> 01:25:06,190
0,300 300,870 900,1320 1320,1710 1740,2130
Um, yeah, um okay, so

2581
01:25:06,220 --> 01:25:08,080
0,450 450,930 990,1290 1290,1440 1440,1860
um okay, so two things,

2582
01:25:08,170 --> 01:25:10,600
0,240 240,1590 1590,1800 1800,2130 2130,2430
um, there's e same structure

2583
01:25:10,600 --> 01:25:11,650
0,180 180,510 510,570 570,630 630,1050
there both for the compiler

2584
01:25:11,650 --> 01:25:12,980
0,180 180,300 300,360 360,780
and for the hardware.

2585
01:25:25,000 --> 01:25:26,140
0,180 180,360 360,630 630,930 960,1140
Yeah I'm jumping off a

2586
01:25:26,140 --> 01:25:27,130
0,120 120,330 330,600 600,870 870,990
to start office hours, but

2587
01:25:27,130 --> 01:25:27,820
0,90 90,300 300,450 450,570 570,690
I think there's still more

2588
01:25:27,820 --> 01:25:29,470
0,390 390,450 450,630 630,1530 1530,1650
questions in the house, you

2589
01:25:29,470 --> 01:25:30,430
0,120 120,210 210,330 330,420 420,960
do it for the compiler

2590
01:25:30,430 --> 01:25:31,420
0,450
only.

2591
01:25:31,480 --> 01:25:34,030
0,780 1080,1890 1890,1980 1980,2310 2310,2550
{Um's -} a compiler notes

2592
01:25:34,030 --> 01:25:36,100
0,210 210,690 690,780 780,1320 1830,2070
which architecture is compiling and

2593
01:25:36,100 --> 01:25:36,970
0,120 120,300 300,420 420,660 660,870
so we will know when

2594
01:25:36,970 --> 01:25:38,410
0,180 180,450 450,630 630,720 720,1440
it actually has to ensure

2595
01:25:38,410 --> 01:25:40,690
0,150 150,540 540,1080 1350,1920 1920,2280
the appropriate fences for whatever

2596
01:25:40,690 --> 01:25:41,890
0,540 540,630 630,900 900,1110 1110,1200
architecture is running on and

2597
01:25:41,890 --> 01:25:43,570
0,360 360,630 630,1170 1170,1500 1500,1680
whatever memory consistency model, it

2598
01:25:43,570 --> 01:25:44,400
0,420
has.

2599
01:25:44,740 --> 01:25:45,640
0,240 240,390 390,570 570,690 690,900
So this gets a little

2600
01:25:45,640 --> 01:25:46,960
0,120 120,270 270,720 720,1200 1200,1320
bit more complicated discussion is

2601
01:25:46,960 --> 01:25:47,980
0,150 150,360 360,540 540,600 600,1020
that every piece of hardware

2602
01:25:47,980 --> 01:25:50,590
0,360 360,1080 1080,1320 1320,1830 2160,2610
has a memory model and

2603
01:25:51,040 --> 01:25:53,230
0,90 90,540 540,690 690,1080 1500,2190
the compilers, the site a

2604
01:25:53,230 --> 01:25:54,220
0,150 150,300 300,600 600,720 720,990
you know given the memory

2605
01:25:54,220 --> 01:25:56,080
0,510 600,810 810,960 960,1350 1350,1860
model for that particular architecture,

2606
01:25:56,080 --> 01:25:57,190
0,180 180,630 630,750 750,930 930,1110
what actually can do what

2607
01:25:57,190 --> 01:25:58,280
0,90 90,420 420,600
it cannot do.

2608
01:25:59,440 --> 01:26:00,550
0,150 150,390 390,630 630,720 720,1110
And I guess my question

2609
01:26:00,550 --> 01:26:02,770
0,210 210,600 660,1230 1320,1770 1770,2220
was that like defense instruction

2610
01:26:02,770 --> 01:26:04,690
0,180 180,660 660,1590 1590,1770 1770,1920
only becomes unnecessary, if you

2611
01:26:04,690 --> 01:26:06,460
0,240 240,540 540,1260
call ems swap.

2612
01:26:06,610 --> 01:26:09,310
0,840 870,1110 1110,1410 1410,1920 1980,2700
Like dot w dot release

2613
01:26:09,400 --> 01:26:13,240
0,600 1080,2130 2400,3300
mhm and um.

2614
01:26:14,370 --> 01:26:16,740
0,690 720,1050 1050,1230 1230,1770
Like putting in the.

2615
01:26:16,740 --> 01:26:18,840
0,240 540,1230 1260,1500 1500,1890 1890,2100
The sink and there that

2616
01:26:18,840 --> 01:26:20,550
0,120 120,450 450,690 690,1230 1530,1710
will sink but the you

2617
01:26:20,550 --> 01:26:22,650
0,120 120,270 270,1110 1110,1830 1830,2100
know the compiler ordering and

2618
01:26:22,650 --> 01:26:24,460
0,600 600,1260
then the.

2619
01:26:24,460 --> 01:26:27,010
0,660 870,1500 1530,1920 1920,2370 2370,2550
Yeah the memory ordering and

2620
01:26:27,010 --> 01:26:29,200
0,300 300,450 450,510 510,1230 1680,2190
the out of ordering yeah

2621
01:26:29,230 --> 01:26:30,760
0,570 570,810 810,870 870,1080 1080,1530
machinery using the fence instruction

2622
01:26:30,760 --> 01:26:32,110
0,150 150,540 540,630 630,870 870,1350
as well, the fence instructions

2623
01:26:32,110 --> 01:26:33,550
0,330 330,990 990,1080 1080,1170 1170,1440
only unnecessary in the case

2624
01:26:33,550 --> 01:26:35,230
0,150 150,360 420,750 840,1230 1230,1680
that you do dot arel

2625
01:26:35,230 --> 01:26:36,130
0,300 300,480 480,690 690,810 810,900
so it seems like it

2626
01:26:36,130 --> 01:26:37,510
0,330 330,750 750,1050 1050,1230 1230,1380
wouldn't detect that, so how

2627
01:26:37,510 --> 01:26:39,100
0,150 150,300 300,450 450,720 1020,1590
would you do it, so

2628
01:26:39,100 --> 01:26:41,620
0,150 150,1110 1350,1920 1920,2040 2040,2520
the compiler enforces the ordering

2629
01:26:41,620 --> 01:26:43,570
0,120 120,330 330,720 1050,1710 1740,1950
on its end, but you

2630
01:26:43,570 --> 01:26:45,640
0,240 240,600 600,810 960,1560 1800,2070
already cover it using the

2631
01:26:45,640 --> 01:26:48,610
0,390 840,1200 1230,1680 1680,2280 2280,2970
Amazon like a you a

2632
01:26:48,640 --> 01:26:50,530
0,480 480,600 600,1020 1050,1470 1470,1890
very good question, um, and

2633
01:26:50,530 --> 01:26:52,360
0,120 120,270 300,630 630,1260 1260,1830
you know more sophisticated requirements

2634
01:26:52,360 --> 01:26:54,610
0,570 570,750 750,1110 1110,1800 1860,2250
implementation would be a we

2635
01:26:54,610 --> 01:26:57,140
0,450 480,720 750,1470 1470,2190
were like specialized, um.

2636
01:26:57,140 --> 01:26:58,880
0,270 270,810 810,1110 1110,1560 1560,1740
A acquire relation plantation where

2637
01:26:58,970 --> 01:27:00,140
0,510 510,630 630,810 810,930 930,1170
implantation for risk, why we

2638
01:27:00,140 --> 01:27:01,730
0,300 300,450 450,660 660,1350 1350,1590
probably do more sophisticated things

2639
01:27:01,730 --> 01:27:02,960
0,150 150,300 300,660 660,930 930,1230
than we do a pretty

2640
01:27:02,960 --> 01:27:04,280
0,300 300,600 600,780 780,960 960,1320
coarse grain by just issuing

2641
01:27:04,280 --> 01:27:05,680
0,390 390,870
defense instruction.

2642
01:27:05,800 --> 01:27:09,520
0,480 600,1410 1590,2190 2310,3120 3390,3720
Um the um, the but

2643
01:27:09,520 --> 01:27:11,770
0,120 120,390 390,1050 1080,1800 1890,2250
it's slightly complicated, um, yeah,

2644
01:27:11,770 --> 01:27:14,110
0,540 600,870 870,1770 1800,2160 2160,2340
so if you're interested in

2645
01:27:14,110 --> 01:27:16,690
0,510 540,1170 1380,1860 1860,2190 2190,2580
this, um, the memory model

2646
01:27:16,690 --> 01:27:18,640
0,180 180,420 420,870 900,1530 1530,1950
for risk, five eyes are

2647
01:27:18,940 --> 01:27:20,500
0,600 600,1170 1170,1380 1380,1470 1470,1560
really complicated, so if you

2648
01:27:20,500 --> 01:27:23,200
0,210 210,330 330,1140 1170,1770 1770,2700
look at the instruction manual

2649
01:27:23,200 --> 01:27:25,210
0,450 450,900 930,1410 1410,1920 1920,2010
for the previous instructions as

2650
01:27:25,210 --> 01:27:27,820
0,60 60,270 270,840 1170,2190 2430,2610
a whole chapter dedicated to

2651
01:27:27,820 --> 01:27:29,740
0,420 420,990 990,1440 1470,1830 1830,1920
memory ordering and tells you

2652
01:27:29,740 --> 01:27:30,370
0,120 120,240 240,420 420,480 480,630
what they have to put

2653
01:27:30,370 --> 01:27:31,600
0,60 60,420 420,600 600,870
the compiler should do.

2654
01:27:31,890 --> 01:27:34,410
0,1380 1380,1650 1650,1800 1800,2100 2100,2520
Um, in this particular case.

2655
01:27:37,760 --> 01:27:38,630
0,180 180,330 330,570 570,660 660,870
So you're saying that the

2656
01:27:38,630 --> 01:27:40,250
0,510 510,720 720,990 990,1290 1380,1620
compiler would pick up on

2657
01:27:40,250 --> 01:27:41,180
0,120 120,390 390,540 540,630 630,930
the fact that we just

2658
01:27:41,180 --> 01:27:43,190
0,180 180,480 660,1110 1110,1650 1650,2010
put that assembly instruction inside

2659
01:27:43,190 --> 01:27:44,660
0,60 60,540 570,900 900,1110 1110,1470
of there, and it wouldn't

2660
01:27:44,660 --> 01:27:46,010
0,660 660,870 870,960 960,1050 1050,1350
reorder any of the memory

2661
01:27:46,010 --> 01:27:48,320
0,450 450,660 660,1020 1110,1680 1680,2310
accesses on sound sort did

2662
01:27:48,650 --> 01:27:51,350
0,840 840,1260 1260,1710 1740,2280 2280,2700
synchronize this, this synchronized library

2663
01:27:51,350 --> 01:27:52,550
0,330 330,420 420,480 480,810 810,1200
function is a library function

2664
01:27:52,640 --> 01:27:53,720
0,270 270,450 450,570 570,630 630,1080
right, it can be implemented

2665
01:27:53,720 --> 01:27:54,940
0,90 90,390 390,810
in different ways.

2666
01:27:55,030 --> 01:27:56,440
0,600 600,900 900,1020 1020,1080 1080,1410
Um, and this is one

2667
01:27:56,440 --> 01:27:58,020
0,360 360,1020
particular implementation.

2668
01:27:58,440 --> 01:27:59,760
0,330 330,570 570,930 930,1200 1200,1320
And the library function is

2669
01:27:59,760 --> 01:28:01,320
0,330 330,420 420,480 480,1050
provided by the compiler.

2670
01:28:02,610 --> 01:28:03,690
0,270 270,570 570,720 720,870 870,1080
Um, but is there like

2671
01:28:03,690 --> 01:28:05,010
0,120 120,570 570,690 690,750 750,1320
the option for the compiler

2672
01:28:05,010 --> 01:28:06,840
0,120 120,480 480,1290 1290,1620 1620,1830
to do optimization where it

2673
01:28:06,840 --> 01:28:08,610
0,570 570,1050 1050,1320 1320,1650 1650,1770
itself moves the loads and

2674
01:28:08,610 --> 01:28:10,040
0,330 330,840
stores around.

2675
01:28:10,560 --> 01:28:12,660
0,180 180,630 840,1170 1170,1560 1920,2100
Um, yes, goodbye do so

2676
01:28:12,660 --> 01:28:14,040
0,120 120,210 210,390 390,900 900,1380
how do you prevent that

2677
01:28:14,040 --> 01:28:16,530
0,510 510,810 810,1230 1260,2040 2070,2490
without emitting defense instruction, that's

2678
01:28:16,530 --> 01:28:18,030
0,300 300,510 510,900 900,1140 1140,1500
curious, now I guess what

2679
01:28:18,030 --> 01:28:20,520
0,240 240,600 600,720 720,1320 1710,2490
I'm saying is that um.

2680
01:28:20,800 --> 01:28:22,540
0,210 210,660 660,1200 1260,1650 1650,1740
And maybe a what I'm

2681
01:28:22,540 --> 01:28:23,680
0,210 210,300 300,420 420,810 810,1140
saying is that basically the.

2682
01:28:24,470 --> 01:28:26,720
0,300 300,960 960,1050 1050,1920 1920,2250
This indication the synchronized basically

2683
01:28:26,720 --> 01:28:27,650
0,240 240,450 450,510 510,840 840,930
both tells the compiler and

2684
01:28:27,650 --> 01:28:28,820
0,420 420,510 510,570 570,1020 1020,1170
hardware, but the compiler could

2685
01:28:28,820 --> 01:28:30,860
0,240 240,570 570,1080 1110,1590 1590,2040
actually implement sync synchronize differently,

2686
01:28:30,860 --> 01:28:31,790
0,180 180,540 540,630 630,720 720,930
it knows that it can't

2687
01:28:31,790 --> 01:28:33,080
0,210 210,420 420,870 1110,1230 1230,1290
move things around but it

2688
01:28:33,080 --> 01:28:34,010
0,240 240,450 450,510 510,810 810,930
doesn't have the issue and

2689
01:28:34,010 --> 01:28:35,060
0,240 240,690 690,780 780,870 870,1050
fence instruction on the risk

2690
01:28:35,060 --> 01:28:36,560
0,330 330,510 510,1050 1230,1440 1440,1500
five it knew that it

2691
01:28:36,560 --> 01:28:37,550
0,150 150,510 510,600 600,660 660,990
was running in a particular

2692
01:28:37,550 --> 01:28:38,880
0,210 210,330 330,510 510,900
way on risk five.

2693
01:28:42,060 --> 01:28:43,830
0,810 840,990 990,1290 1290,1500 1500,1770
Um, but isn't the risk

2694
01:28:43,830 --> 01:28:46,080
0,900 930,1380 1380,1800 1800,2040 2040,2250
five memory model like loose

2695
01:28:46,080 --> 01:28:47,190
0,450 450,570 570,840 840,930 930,1110
enough to where the out

2696
01:28:47,190 --> 01:28:49,710
0,90 90,600 690,1500 1500,1800 1800,2520
of order machinery could reorganize

2697
01:28:49,710 --> 01:28:51,510
0,450 450,870 870,1170 1290,1500 1500,1800
stuff so you do need

2698
01:28:51,510 --> 01:28:53,260
0,210 210,330 330,1290
like the acquire.

2699
01:28:53,410 --> 01:28:54,580
0,270 480,690 690,750 750,930 930,1170
It's like the whole point

2700
01:28:54,580 --> 01:28:58,880
0,60 60,570 630,3210
of having zera.

2701
01:28:59,370 --> 01:29:01,410
0,180 180,420 420,960 960,1410 1410,2040
They're more complicated interfaces unceasing

2702
01:29:01,410 --> 01:29:02,600
0,720
synchronize.

2703
01:29:03,120 --> 01:29:04,680
0,450 450,930 930,1290 1290,1500 1500,1560
A and which give the

2704
01:29:04,680 --> 01:29:06,390
0,360 360,750 750,1320 1320,1560 1560,1710
compiler writer more gives the

2705
01:29:06,510 --> 01:29:07,920
0,510 510,750 750,1140 1140,1290 1290,1410
programmer more freedom and we'll

2706
01:29:07,920 --> 01:29:09,750
0,150 150,240 240,810 810,1260 1320,1830
get the compiler and decouple

2707
01:29:09,750 --> 01:29:10,860
0,90 90,510 510,810 810,1020 1020,1110
the compiler part and the

2708
01:29:10,860 --> 01:29:12,160
0,450 450,840
processor part.

2709
01:29:13,000 --> 01:29:13,930
0,360 360,420 420,690 690,780 780,930
So, for example I think

2710
01:29:13,930 --> 01:29:15,340
0,180 180,270 270,600 600,750 750,1410
there's a flag be competitive

2711
01:29:15,340 --> 01:29:16,090
0,120 120,270 270,360 360,600 600,750
you know to say that

2712
01:29:16,090 --> 01:29:18,520
0,150 150,300 300,510 510,1290 1320,2430
there's a release consistent a

2713
01:29:18,520 --> 01:29:19,700
0,720
synchronized.

2714
01:29:19,970 --> 01:29:21,530
0,810 810,990 990,1140 1140,1320 1320,1560
Um, you know I I

2715
01:29:21,530 --> 01:29:22,730
0,180 180,480 480,600 600,1020 1020,1200
don't know the details right

2716
01:29:22,730 --> 01:29:23,990
0,60 60,120 120,300 300,750 750,1260
out of my head, um,

2717
01:29:23,990 --> 01:29:24,680
0,150 150,240 240,330 330,510 510,690
but you can look into

2718
01:29:24,680 --> 01:29:26,540
0,420 720,1320 1350,1620 1620,1710 1710,1860
this, um, this is, um,

2719
01:29:26,540 --> 01:29:27,860
0,90 90,660 660,1140 1140,1260 1260,1320
the coarse-grained interface and a

2720
01:29:27,860 --> 01:29:29,450
0,240 240,750 750,1230 1230,1410 1410,1590
more fine-grained interfaces that give

2721
01:29:29,450 --> 01:29:30,980
0,60 60,450 450,630 630,1050
the programmer more control.

2722
01:29:31,300 --> 01:29:32,360
0,570
Okay.

2723
01:29:32,770 --> 01:29:33,860
0,240 240,480
Thank you.

2724
01:29:35,660 --> 01:29:37,520
0,330 330,510 510,780 780,930 930,1860
Um I have two questions,

2725
01:29:37,520 --> 01:29:39,740
0,330 330,720 750,1530 1800,2130 2130,2220
one is, um, how do

2726
01:29:39,740 --> 01:29:42,350
0,240 240,630 630,1140 1170,2070 2100,2610
you like for having multiple

2727
01:29:42,350 --> 01:29:44,600
0,450 450,540 540,960 1020,1830 1860,2250
threads and one processor do

2728
01:29:44,600 --> 01:29:46,100
0,480 480,750 750,1110 1110,1230 1230,1500
argue in roughly the same

2729
01:29:46,100 --> 01:29:47,720
0,300 300,780 810,900 900,1200 1200,1620
way as we did for

2730
01:29:47,780 --> 01:29:50,500
0,780 1020,2280
multiple processors.

2731
01:29:50,920 --> 01:29:54,310
0,2520 2520,2640 2640,2880 2880,3000 3000,3390
Can you repeat that question

2732
01:29:54,310 --> 01:29:55,780
0,120 120,180 180,300 300,900
just to make sure.

2733
01:29:56,700 --> 01:29:58,830
0,450 450,1170 1440,1680 1680,1980 2010,2130
So when I think I

2734
01:29:58,830 --> 01:29:59,790
0,180 180,330 330,420 420,630 630,960
don't think we really talked

2735
01:29:59,790 --> 01:30:02,160
0,300 300,750 750,1410 1410,1920 1950,2370
about multiple threats we mostly

2736
01:30:02,160 --> 01:30:03,870
0,240 240,390 390,780 780,1380 1380,1710
talked about multiple CPU 's,

2737
01:30:04,140 --> 01:30:07,020
0,540 570,1080 1110,1590 1590,2310 2340,2880
so for multiple threads is

2738
01:30:07,020 --> 01:30:08,610
0,630 720,1050 1050,1050 1050,1440 1440,1590
the um I guess the

2739
01:30:08,610 --> 01:30:09,880
0,840
solution.

2740
01:30:09,970 --> 01:30:12,580
0,240 240,810 840,1680 1740,2370 2400,2610
The same as for when

2741
01:30:12,580 --> 01:30:13,720
0,120 120,360 360,720 720,1050 1050,1140
you have multiple {CPU's -}

2742
01:30:13,720 --> 01:30:14,860
0,240 240,360 360,810 840,1050 1050,1140
like do you have the

2743
01:30:14,860 --> 01:30:17,320
0,240 240,720 720,1230 1620,2370 2370,2460
same arguments, they're more or

2744
01:30:17,320 --> 01:30:19,510
0,540 570,1140 1170,1590 1590,2070 2070,2190
less a least conceptually is

2745
01:30:19,510 --> 01:30:20,170
0,60 60,270 270,390 390,480 480,660
the right way to think

2746
01:30:20,170 --> 01:30:21,850
0,270 270,480 540,1260 1260,1560 1560,1680
about it a so you

2747
01:30:21,850 --> 01:30:23,500
0,120 120,480 480,1080 1110,1440 1440,1650
have multiple threats but only

2748
01:30:23,500 --> 01:30:26,110
0,240 240,990 1380,2070 2070,2430 2430,2610
one CPU a it's still

2749
01:30:26,110 --> 01:30:26,860
0,60 60,390 390,510 510,600 600,750
the case that you want

2750
01:30:26,860 --> 01:30:28,510
0,60 60,420 420,540 540,930 930,1650
to ensure that certain a

2751
01:30:28,630 --> 01:30:30,250
0,390 390,630 630,1020 1020,1170 1170,1620
kernel code sequences are executed

2752
01:30:30,250 --> 01:30:31,320
0,420 420,660
atomic lea.

2753
01:30:31,550 --> 01:30:33,770
0,840 840,1470 1470,1830 1830,2010 2010,2220
Um, and so you still

2754
01:30:33,770 --> 01:30:34,640
0,210 210,330 330,570 570,600 600,870
have to have a notion

2755
01:30:34,640 --> 01:30:36,100
0,60 60,360 360,960
of critical sections.

2756
01:30:36,100 --> 01:30:37,870
0,660 900,1110 1110,1320 1320,1530 1530,1770
Um, you might not need

2757
01:30:37,870 --> 01:30:39,940
0,510 510,840 840,1170 1170,1890 1890,2070
walks or releases explicitly but

2758
01:30:39,940 --> 01:30:40,720
0,90 90,270 270,480 480,570 570,780
you do need a way

2759
01:30:40,720 --> 01:30:42,160
0,300 300,630 630,780 780,1200 1200,1440
of turning and interrupts off

2760
01:30:42,160 --> 01:30:43,150
0,90 90,480 480,570 570,630 630,990
and on in a particular

2761
01:30:43,150 --> 01:30:44,300
0,180 180,240 240,660
piece of code.

2762
01:30:44,670 --> 01:30:45,540
0,360 360,510 510,570 570,690 690,870
Um, so if you look

2763
01:30:45,540 --> 01:30:48,360
0,210 570,1620 1620,2010 2010,2280 2280,2820
at older operating system kernels,

2764
01:30:48,360 --> 01:30:49,830
0,210 210,570 570,870 870,1170 1170,1470
they typically don't have really

2765
01:30:49,830 --> 01:30:52,020
0,390 390,1110 1440,1920 1920,2100 2100,2190
locking acquire a in the

2766
01:30:52,020 --> 01:30:53,340
0,330 330,570 570,690 690,1170 1170,1320
kernel because they soon they're

2767
01:30:53,340 --> 01:30:54,660
0,240 240,330 330,390 390,690 690,1320
running on a single processor,

2768
01:30:54,810 --> 01:30:55,980
0,270 270,390 390,570 570,840 840,1170
but they do have something

2769
01:30:55,980 --> 01:30:57,150
0,180 180,630 630,720 720,870 870,1170
like locks, you know to

2770
01:30:57,150 --> 01:30:59,130
0,420 420,690 690,930 930,1470 1470,1980
basically turn off interruption and

2771
01:30:59,130 --> 01:31:00,140
0,570
interrupt.

2772
01:31:00,400 --> 01:31:01,620
0,240 240,330 330,720
On and off.

2773
01:31:03,460 --> 01:31:05,380
0,540 540,720 720,1200 1500,1770 1770,1920
Okay I see, um, and

2774
01:31:05,380 --> 01:31:08,320
0,150 150,420 420,1260 1320,1950 2040,2940
my other question was actually

2775
01:31:08,320 --> 01:31:11,260
0,210 210,300 300,840 840,1380 2220,2940
on the slide with the

2776
01:31:11,290 --> 01:31:15,300
0,780 870,1770 1770,2430 2670,3570
yard picture, we buffer.

2777
01:31:15,300 --> 01:31:16,740
0,870
I'm.

2778
01:31:17,570 --> 01:31:19,430
0,810 840,1050 1050,1230 1230,1680 1680,1860
Yeah, is it, yeah that

2779
01:31:19,430 --> 01:31:20,900
0,360 390,660 660,1020 1020,1380 1380,1470
one, is it always the

2780
01:31:20,900 --> 01:31:22,940
0,360 360,780 780,1260 1290,1800 1830,2040
case that the reed is

2781
01:31:22,940 --> 01:31:25,220
0,300 300,480 480,900 1170,1770 1770,2280
going to be like lagging

2782
01:31:25,220 --> 01:31:26,930
0,570 600,720 720,900 900,1350 1350,1710
behind I didn't understand that

2783
01:31:27,170 --> 01:31:29,220
0,480 480,690 690,870 870,1560
yeah okay so good.

2784
01:31:29,400 --> 01:31:30,120
0,180 180,360 360,540 540,630 630,720
So this goes through the

2785
01:31:30,120 --> 01:31:32,310
0,570 570,960 960,1050 1050,1560 1680,2190
display whatever is this basically

2786
01:31:32,310 --> 01:31:33,030
0,180 180,300 300,390 390,660 660,720
this is the sequence of

2787
01:31:33,030 --> 01:31:33,960
0,450 450,570 570,750 750,810 810,930
characters that needs to go

2788
01:31:33,960 --> 01:31:35,360
0,120 120,210 210,840
through the display.

2789
01:31:36,730 --> 01:31:38,620
0,660 660,990 990,1140 1140,1530 1530,1890
Um, and the writer basically

2790
01:31:38,620 --> 01:31:39,790
0,60 60,540 540,720 720,810 810,1170
is depending more and more

2791
01:31:39,790 --> 01:31:40,960
0,630
characters.

2792
01:31:41,770 --> 01:31:43,960
0,420 420,630 630,1290 1440,2040 2040,2190
Right, and so, um, so

2793
01:31:43,960 --> 01:31:45,220
0,90 90,450 450,630 630,840 840,1260
the writers going that way

2794
01:31:45,220 --> 01:31:46,810
0,540 540,930 930,1410 1410,1470 1470,1590
and the readers, you know

2795
01:31:46,810 --> 01:31:48,790
0,540 540,630 630,1170 1530,1800 1800,1980
following the writer because you

2796
01:31:48,790 --> 01:31:49,780
0,270 270,450 450,480 480,840 840,990
can't print a character that

2797
01:31:49,780 --> 01:31:51,310
0,270 270,840 840,1050 1050,1230 1230,1530
hasn't been put into buffer

2798
01:31:51,310 --> 01:31:52,140
0,300
yet.

2799
01:31:52,260 --> 01:31:54,120
0,630 630,1080 1080,1290 1290,1680 1680,1860
Um, and so let's you

2800
01:31:54,120 --> 01:31:57,330
0,180 180,780 930,1440 1890,2580 2580,3210
know the the uart who

2801
01:31:57,330 --> 01:31:58,620
0,240 240,450 450,570 570,660 660,1290
puts things on the display.

2802
01:32:02,340 --> 01:32:04,830
0,150 150,960 1290,1710 1710,2160 2160,2490
You will start basically putting

2803
01:32:04,830 --> 01:32:06,420
0,330 330,840 840,900 900,1080 1080,1590
first characters in this slot

2804
01:32:06,450 --> 01:32:09,060
0,510 510,600 600,1260 1650,2430 2430,2610
onto the display, meanwhile print

2805
01:32:09,060 --> 01:32:10,140
0,150 150,330 330,510 510,720 720,1080
f could come in multiple

2806
01:32:10,140 --> 01:32:11,460
0,300 300,480 480,900 930,990 990,1320
prints come in, you know

2807
01:32:11,460 --> 01:32:12,630
0,150 150,360 360,570 570,1020 1020,1170
they put more characters in

2808
01:32:12,630 --> 01:32:13,620
0,360 390,540 540,660 660,780 780,990
here so that the right

2809
01:32:13,620 --> 01:32:15,420
0,270 270,600 600,930 930,1410 1680,1800
pointer spacing, standing here and

2810
01:32:15,420 --> 01:32:16,530
0,90 90,270 270,420 420,690 690,1110
then when there's one character

2811
01:32:16,530 --> 01:32:18,660
0,90 90,780 960,1620 1620,1680 1680,2130
is displayed, then the uart

2812
01:32:18,660 --> 01:32:19,860
0,120 120,360 360,510 510,690 690,1200
will move up, this pointer

2813
01:32:20,340 --> 01:32:21,540
0,120 120,450 450,540 540,750 750,1200
to display the next character.

2814
01:32:22,430 --> 01:32:24,050
0,180 180,540 540,630 630,1020 1020,1620
The yard is always lagging

2815
01:32:24,050 --> 01:32:26,900
0,90 90,300 300,1290 1410,2250 2280,2850
a little behind the writer

2816
01:32:26,930 --> 01:32:27,800
0,240 240,420 420,480 480,750 750,870
who told the point that

2817
01:32:27,800 --> 01:32:29,210
0,90 90,420 420,750 780,1020 1020,1410
it catches up right then

2818
01:32:29,450 --> 01:32:30,620
0,420 420,660 660,780 780,1050 1050,1170
where r and w are

2819
01:32:30,620 --> 01:32:31,370
0,60 60,450 450,540 540,600 600,750
the same, and at that

2820
01:32:31,370 --> 01:32:32,480
0,240 240,570 570,720 720,990 990,1110
point, basically, that means that

2821
01:32:32,480 --> 01:32:33,740
0,180 180,420 420,810 810,1200 1200,1260
there's no character anymore in

2822
01:32:33,740 --> 01:32:34,700
0,90 90,480
the buffer.

2823
01:32:35,920 --> 01:32:37,000
0,270 270,540 540,690 690,900 900,1080
Oh okay I see, that

2824
01:32:37,000 --> 01:32:38,500
0,360 360,540 540,1020 1050,1320 1320,1500
makes that makes alot more

2825
01:32:38,500 --> 01:32:39,520
0,300 300,570 570,750 750,840 840,1020
sense okay, thank you so

2826
01:32:39,520 --> 01:32:41,380
0,540 900,1380
much work.

2827
01:32:42,850 --> 01:32:44,320
0,240 240,390 390,930
Any more questions.

2828
01:32:48,990 --> 01:32:50,760
0,210 210,390 390,690 690,990 1590,1770
Just not slept here, all

2829
01:32:50,760 --> 01:32:52,080
0,300
right.

2830
01:32:53,680 --> 01:32:55,030
0,150 150,240 240,780 1050,1260 1260,1350
Are you guys see you

2831
01:32:55,030 --> 01:32:55,947
0,480
later.

