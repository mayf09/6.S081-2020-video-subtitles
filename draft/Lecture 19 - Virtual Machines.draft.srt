1
00:00:02,580 --> 00:00:04,160
0,1020
Alright,

2
00:00:04,960 --> 00:00:06,430
0,210 210,360 360,420 420,570 570,1470
I'd like to get started.|

3
00:00:09,560 --> 00:00:10,280
0,210 210,270 270,390 390,540 540,720
Today I will talk about

4
00:00:10,280 --> 00:00:12,060
0,270 270,1170
virtual machines.|

5
00:00:12,090 --> 00:00:14,460
0,570 630,780 780,1050 1050,1590 1980,2370
{} And I'm gonna lecture

6
00:00:14,460 --> 00:00:15,000
0,90 90,240 240,360 360,420 420,540
is really going to be

7
00:00:15,000 --> 00:00:16,560
0,300 300,480 480,810 810,1290 1290,1560
divided into three pieces,| one

8
00:00:16,560 --> 00:00:17,700
0,240 240,390 390,480 480,870 870,1140
is going to start with

9
00:00:18,060 --> 00:00:19,440
0,450 570,780 780,960 960,1260 1260,1380
{} what's called trap and

10
00:00:19,440 --> 00:00:21,840
0,510 510,1350 1350,1710 1980,2100 2100,2400
emulate virtualization,| which is basically

11
00:00:21,840 --> 00:00:22,770
0,90 90,540 540,630 630,780 780,930
an overview of how you

12
00:00:22,770 --> 00:00:24,600
0,180 180,420 420,630 630,1140 1170,1830
could build your own virtual

13
00:00:24,600 --> 00:00:28,800
0,450 450,1230 1770,2490 2940,3480 3480,4200
machine scheme {} {RISC-V -}

14
00:00:28,830 --> 00:00:30,420
0,180 180,450 450,870 1170,1500 1500,1590
in {QEMU -},| now I'm

15
00:00:30,420 --> 00:00:31,410
0,120 120,360 360,390 390,570 570,990
gonna talk a bit about

16
00:00:31,560 --> 00:00:34,080
0,420 450,1230 1260,1830 1830,2400 2400,2520
{} recent hardware support and

17
00:00:34,080 --> 00:00:37,770
0,960 960,1110 1110,2040 2790,3300 3420,3690
microprocessors for virtualization,| and then

18
00:00:37,770 --> 00:00:39,420
0,210 210,540 540,870 870,1320 1320,1650
about today's paper Dune which

19
00:00:39,420 --> 00:00:42,600
0,900 1110,1380 1380,2100 2280,2700 2700,3180
uses this modern hardware support.|

20
00:00:43,330 --> 00:00:45,100
0,390 390,690 1020,1290 1290,1650 1650,1770
Alright, so, {} first, what

21
00:00:45,100 --> 00:00:47,140
0,60 60,90 90,360 360,960 1560,2040
is a virtual machine,| {}

22
00:00:47,770 --> 00:00:49,300
0,210 210,480 480,1320 1320,1440 1440,1530
it's really {} you can

23
00:00:49,300 --> 00:00:49,750
0,150 150,210 210,270 270,390 390,450
think of it as a

24
00:00:49,750 --> 00:00:51,610
0,690 690,750 750,840 840,1410 1410,1860
simulation of a computer,| that's

25
00:00:51,760 --> 00:00:53,980
0,510 510,1050 1080,1530 1560,2130 2130,2220
accurate enough to run an

26
00:00:53,980 --> 00:00:56,860
0,420 420,870 1200,1650 1860,2250 2610,2880
operating system,| {} so {QEMU

27
00:00:56,860 --> 00:00:59,300
0,480 1020,1290 1290,1530 1530,1950
-} is a, {}

28
00:00:59,930 --> 00:01:01,460
0,300 300,900 900,1050 1050,1320 1350,1530
a example of {} you

29
00:01:01,460 --> 00:01:02,330
0,150 150,600 600,690 690,780 780,870
could consider to be an

30
00:01:02,330 --> 00:01:03,740
0,390 390,450 450,540 540,870 870,1410
example of a virtual machine,|

31
00:01:04,130 --> 00:01:05,630
0,510 630,1110 1110,1290 1290,1380 1380,1500
{} the way I'm going

32
00:01:05,630 --> 00:01:07,310
0,720 750,1080 1080,1350 1350,1530 1530,1680
to talk about it is

33
00:01:07,310 --> 00:01:08,140
0,270
that,|

34
00:01:08,340 --> 00:01:10,880
0,540 990,1680

35
00:01:10,880 --> 00:01:12,470
0,270 270,330 330,630 630,1170 1170,1590
down at the lowest level

36
00:01:12,470 --> 00:01:13,310
0,300 300,420 420,690 690,780 780,840
sitting on top of the

37
00:01:13,310 --> 00:01:15,770
0,690 1140,1710 1710,1890 1890,2310 2310,2460
hardware,| we're gonna imagine a

38
00:01:15,770 --> 00:01:19,520
0,840 870,1830 2010,2760 2760,2910 2910,3750
virtual machine monitor or VMM,|

39
00:01:20,000 --> 00:01:21,860
0,540 960,1320 1320,1530 1530,1800 1800,1860
{} and this more or

40
00:01:21,860 --> 00:01:23,000
0,270 270,540 540,600 600,1050 1050,1140
less takes the place of

41
00:01:23,000 --> 00:01:24,740
0,180 180,630 630,990 990,1290 1290,1740
the standard operating system kernel.|

42
00:01:25,550 --> 00:01:26,640
0,480

43
00:01:26,700 --> 00:01:27,990
0,240 240,300 300,600 600,900 900,1290
And the virtual machine {monitor's

44
00:01:27,990 --> 00:01:29,730
0,150 150,600 600,900 900,1050 1050,1740
-} job is to simulate

45
00:01:29,730 --> 00:01:31,940
0,30 30,390 390,990 1020,1620
a bunch of {}

46
00:01:31,940 --> 00:01:34,670
0,690 690,1020 1020,1530 1530,2010 2010,2730
computers for guest operating systems,|

47
00:01:34,760 --> 00:01:37,910
0,510 720,1200 1200,1500 1980,2520 2520,3150
so {} said, {} appear

48
00:01:37,910 --> 00:01:39,560
0,270 270,600 1050,1230 1230,1320 1320,1650
in in you know what

49
00:01:39,680 --> 00:01:41,000
0,330 330,390 390,510 510,810 810,1320
used to be user space

50
00:01:41,000 --> 00:01:42,740
0,120 120,240 240,510 510,1260 1260,1740
in our usual diagrams,| but

51
00:01:42,740 --> 00:01:44,780
0,120 120,330 330,720 720,1500 1800,2040
has now guest space,| so

52
00:01:44,780 --> 00:01:46,780
0,180 180,540 840,1530
this is {}

53
00:01:47,220 --> 00:01:49,260
0,210 510,750 750,960 960,1320 1320,2040
we call this guest space

54
00:01:49,260 --> 00:01:52,020
0,210 210,480 480,1080 1200,1950 1950,2760
and down here host space.|

55
00:01:52,830 --> 00:01:53,550
0,180 180,330 330,420 420,510 510,720
We're gonna have a bunch

56
00:01:53,550 --> 00:01:55,110
0,210 540,900 900,1290 1290,1350 1350,1560
of {}, one or more

57
00:01:55,110 --> 00:01:57,930
0,330 330,840 840,1740 1770,2370 2370,2820
guest operating systems kernels,| so,

58
00:01:58,380 --> 00:02:00,480
0,600 1140,1290 1290,1500 1500,1710 1710,2100
{} we might have a

59
00:02:00,540 --> 00:02:02,720
0,840 840,1650
Linux kernel

60
00:02:02,780 --> 00:02:04,140
0,810
{}

61
00:02:04,640 --> 00:02:06,540
0,180 180,510 510,1350
as one guest.|

62
00:02:07,340 --> 00:02:09,200
0,450 570,930 930,1290 1290,1710 1710,1860
And this Linux kernel is

63
00:02:09,200 --> 00:02:11,150
0,390 750,960 960,1080 1080,1350 1710,1950
gonna {you,know} it's just it

64
00:02:11,150 --> 00:02:11,960
0,180 180,270 270,600 600,720 720,810
thinks of itself as an

65
00:02:11,960 --> 00:02:13,070
0,360 360,660 660,750 750,900 900,1110
ordinary kernel,| and it runs

66
00:02:13,070 --> 00:02:14,390
0,60 60,270 270,330 330,990 990,1320
a bunch of processes, maybe

67
00:02:14,390 --> 00:02:16,250
0,270 480,1410 1410,1560 1560,1620 1620,1860
{} VI and a C

68
00:02:16,250 --> 00:02:17,660
0,870
compiler.|

69
00:02:17,750 --> 00:02:18,710
0,180 180,270 270,480 480,600 600,960
Then we might have other

70
00:02:18,710 --> 00:02:21,040
0,720 1110,1830
guest {}.|

71
00:02:21,900 --> 00:02:23,040
0,210 210,330 330,510 510,930 930,1140
I have other guest to

72
00:02:23,040 --> 00:02:25,380
0,300 300,720 720,1620 1680,2070 2070,2340
guest virtual machines running here,|

73
00:02:25,380 --> 00:02:27,000
0,90 90,210 210,510 690,1140 1140,1620
there might be maybe another

74
00:02:27,030 --> 00:02:28,890
0,570 570,720 720,960 960,1590 1620,1860
Linux or maybe even some

75
00:02:28,890 --> 00:02:30,870
0,240 240,570 570,960 960,1140 1140,1980
other operating system like Windows.|

76
00:02:32,670 --> 00:02:33,660
0,270 270,540 540,630 630,720 720,990
All running on the same

77
00:02:33,660 --> 00:02:34,800
0,570
machine.|

78
00:02:34,830 --> 00:02:36,380
0,210 210,360 360,510 510,930
And there would be

79
00:02:37,660 --> 00:02:39,730
0,330 330,840 840,1170 1170,1740 1740,2070
windows processes running within as

80
00:02:40,030 --> 00:02:42,460
0,630 630,990 990,1260 1260,1800 1890,2430
{} within, this guest operating

81
00:02:42,460 --> 00:02:44,980
0,420 600,1170 1500,2010
system,| {} so

82
00:02:45,010 --> 00:02:46,930
0,210 210,300 300,960 990,1680 1800,1920
{} the host, {} the

83
00:02:46,930 --> 00:02:48,160
0,330 330,750 750,900 900,960 960,1230
host world where the virtual

84
00:02:48,160 --> 00:02:49,330
0,270 270,660 660,1020 1020,1110 1110,1170
machine monitor runs in a

85
00:02:49,330 --> 00:02:52,000
0,360 360,900 1290,1680 1680,2220
guest world| where these

86
00:02:52,000 --> 00:02:53,800
0,180 180,690 690,1050 1050,1470 1470,1800
{} ordinary operating systems run|

87
00:02:53,860 --> 00:02:55,390
0,480 510,1230 1230,1320 1320,1440 1440,1530
and furthermore, we're going to

88
00:02:55,390 --> 00:02:56,710
0,270 270,540 540,630 630,870 870,1320
talk about a lot about|

89
00:02:56,710 --> 00:02:59,200
0,480 990,1470 1710,2160 2160,2400 2400,2490
{ -} in within the

90
00:02:59,200 --> 00:03:01,660
0,300 300,810 840,1260 1260,1710 1710,2460
guest world, a guest supervisor

91
00:03:01,660 --> 00:03:03,280
0,510 510,690 690,1170
mode which is

92
00:03:07,470 --> 00:03:09,810
0,420 420,660 660,1140 1350,1890 1890,2340
mode that {} kernels running,|

93
00:03:09,810 --> 00:03:11,370
0,90 90,360 360,720 720,1080 1080,1560
the guest kernels running at

94
00:03:11,520 --> 00:03:13,680
0,810 810,1140 1140,1650
guest user mode.|

95
00:03:14,950 --> 00:03:16,180
0,600

96
00:03:16,680 --> 00:03:19,200
0,210 210,630 750,1800 2040,2220 2220,2520
And again, the {} the

97
00:03:19,200 --> 00:03:21,030
0,180 180,240 240,1200 1200,1740 1740,1830
kind of classical goal of

98
00:03:21,030 --> 00:03:22,920
0,150 150,480 480,840 840,1410 1410,1890
{} virtual machine monitor is|

99
00:03:22,950 --> 00:03:24,630
0,270 360,840 840,930 930,1590 1590,1680
to provide an emulation of

100
00:03:24,630 --> 00:03:25,650
0,90 90,390 390,570 570,780 780,1020
a machine,| that's so good

101
00:03:25,650 --> 00:03:26,460
0,90 90,210 210,300 300,510 510,810
that you can just boot

102
00:03:26,460 --> 00:03:29,370
0,420 420,780 780,1230 1230,1740 1770,2910
ordinary Linux, ordinary Windows unmodified

103
00:03:29,820 --> 00:03:31,740
0,570 570,720 720,810 810,1470 1500,1920
and have it run inside

104
00:03:31,740 --> 00:03:33,750
0,150 150,450 450,810 810,1110 1110,2010
this virtual machine,| never suspecting

105
00:03:33,990 --> 00:03:35,400
0,360 360,570 570,900 900,1290 1290,1410
{} that anything funny is

106
00:03:35,400 --> 00:03:36,460
0,300 300,660
going on.|

107
00:03:36,820 --> 00:03:38,560
0,420 450,690 690,1230 1290,1470 1470,1740
So, for example the virtual

108
00:03:38,560 --> 00:03:39,850
0,270 270,780 810,1110 1110,1200 1200,1290
machine monitor has to be

109
00:03:39,850 --> 00:03:40,870
0,90 90,150 150,450 450,570 570,1020
in a position| to emulate

110
00:03:40,870 --> 00:03:42,550
0,90 90,390 390,750 750,1410 1410,1680
the difference between supervisor mode

111
00:03:42,550 --> 00:03:43,510
0,150 150,420 420,780 780,870 870,960
and user mode in a

112
00:03:43,510 --> 00:03:44,860
0,240 240,450 450,630 630,870 870,1350
way| that is just completely

113
00:03:44,860 --> 00:03:47,080
0,840 990,1830 1830,1890 1890,2100 2100,2220
convincing simulation of how the

114
00:03:47,080 --> 00:03:49,240
0,330 330,720 720,960 960,1260 1920,2160
actual hardware does it,| even

115
00:03:49,240 --> 00:03:50,420
0,150 150,600
though that's,

116
00:03:50,540 --> 00:03:51,860
0,240 240,510 510,780 780,900 900,1320
you can't really be exactly

117
00:03:51,860 --> 00:03:53,510
0,150 150,420 420,660 1350,1500 1500,1650
what's going on,| so that's

118
00:03:53,510 --> 00:03:54,200
0,90 90,180 180,330 330,480 480,690
why we talk about guest

119
00:03:54,200 --> 00:03:56,270
0,540 540,720 720,840 840,1200 1200,2070
supervisor mode, and guest {user,mode},|

120
00:03:56,510 --> 00:03:58,340
0,690 690,840 840,1500 1500,1560 1560,1830
{VMM's -} emulation of those

121
00:03:58,340 --> 00:03:59,620
0,150 150,720
two modes.|

122
00:03:59,960 --> 00:04:03,260
0,450 1800,2310 2730,2910 2910,3180 3180,3300
{} So so why would

123
00:04:03,260 --> 00:04:03,740
0,60 60,210 210,270 270,450 450,480
you want to use a

124
00:04:03,740 --> 00:04:05,870
0,300 300,900 1590,1800 1800,2010 2010,2130
virtual machine,| it turns out

125
00:04:05,870 --> 00:04:06,740
0,120 120,210 210,390 390,480 480,870
there's a lot of reasons

126
00:04:06,740 --> 00:04:08,390
0,150 150,360 360,720 720,1320 1350,1650
to run lots of a

127
00:04:08,390 --> 00:04:10,850
0,540 540,840 840,1260 1260,2010 2010,2460
distinct guest operating systems on

128
00:04:10,880 --> 00:04:12,820
0,240 240,780 780,1470
a single computer.|

129
00:04:13,010 --> 00:04:15,260
0,360 510,1380 1410,1800 1800,1890 1890,2250
{} Sometimes maybe you're running

130
00:04:15,260 --> 00:04:16,460
0,90 90,270 270,750 750,870 870,1200
a big company| and you,

131
00:04:16,580 --> 00:04:17,660
0,480 480,630 630,690 690,840 840,1080
you need to have lots

132
00:04:17,660 --> 00:04:18,920
0,90 90,300 300,360 360,990 990,1260
and lots of servers,| maybe

133
00:04:18,920 --> 00:04:20,990
0,120 150,540 540,1350 1350,1530 1530,2070
your name servers and security

134
00:04:20,990 --> 00:04:22,550
0,420 420,540 540,720 720,1050 1200,1560
servers, who knows what| and

135
00:04:22,820 --> 00:04:23,750
0,210 210,450 450,540 540,660 660,930
each one of them doesn't

136
00:04:23,750 --> 00:04:25,400
0,150 150,360 360,1260 1290,1530 1530,1650
use many resources,| so it's

137
00:04:25,400 --> 00:04:26,030
0,120 120,180 180,240 240,540 540,630
sort of a waste of

138
00:04:26,030 --> 00:04:27,440
0,360 360,450 450,600 600,900 1020,1410
time to have to buy

139
00:04:27,440 --> 00:04:28,850
0,180 180,540 540,960 960,1260 1260,1410
a physical machine for it,|

140
00:04:29,090 --> 00:04:30,230
0,570 570,630 630,810 810,870 870,1140
but you want to run,

141
00:04:30,260 --> 00:04:31,340
0,240 240,390 390,900 900,1020 1020,1080
you know you want to

142
00:04:31,340 --> 00:04:32,240
0,120 120,390 390,480 480,720 720,900
run lots of these low

143
00:04:32,240 --> 00:04:34,190
0,570 570,1200 1200,1410 1410,1620 1620,1950
intensity servers on a single

144
00:04:34,190 --> 00:04:35,150
0,240 240,300 300,690 690,870 870,960
piece of hardware,| you can

145
00:04:35,150 --> 00:04:37,160
0,270 270,690 1140,1710 1710,1950 1950,2010
save money by using a

146
00:04:37,160 --> 00:04:38,360
0,270 270,780
virtual machine.|

147
00:04:39,190 --> 00:04:40,930
0,420 780,1140 1140,1350 1350,1470 1470,1740
{} It turns out virtual

148
00:04:40,930 --> 00:04:43,600
0,300 300,420 420,780 810,1620 1830,2670
machines are also very, very

149
00:04:43,600 --> 00:04:45,460
0,360 360,690 690,780 780,1230 1230,1860
widely used in cloud computing|

150
00:04:45,550 --> 00:04:46,600
0,270 270,510 510,630 630,900 900,1050
where it's an outfit like

151
00:04:46,600 --> 00:04:50,500
0,690 690,1080 1080,1950 2250,2790 3720,3900
Amazon Amazon AWS,| {} they

152
00:04:50,500 --> 00:04:51,250
0,120 120,240 240,330 330,570 570,750
don't want to rent out

153
00:04:51,250 --> 00:04:52,720
0,360 360,900 900,990 990,1290 1290,1470
physical machines to people,| because

154
00:04:52,720 --> 00:04:53,590
0,150 150,360 360,510 510,600 600,870
that turns out to be

155
00:04:54,010 --> 00:04:55,480
0,240 240,720 720,810 810,1290 1290,1470
a difficult to manage,| what

156
00:04:55,480 --> 00:04:56,260
0,60 60,270 270,330 330,570 570,780
they want to do is

157
00:04:56,260 --> 00:04:58,510
0,360 360,600 600,1650 1680,1800 1800,2250
rent their customers, their cloud

158
00:04:58,510 --> 00:05:01,780
0,870 960,1500 1530,1830 1830,2850 2880,3270
customers just a machine that|

159
00:05:01,810 --> 00:05:04,420
0,840 840,1260 1440,1710 1710,1770 1770,2610
Amazon can on the fly

160
00:05:04,480 --> 00:05:06,430
0,300 300,1020 1020,1230 1230,1680 1680,1950
{you,know} decide what hardware run

161
00:05:06,430 --> 00:05:07,420
0,150 150,420 420,690 690,780 780,990
it on whether to run

162
00:05:07,420 --> 00:05:08,890
0,300 300,600 600,660 660,1050 1050,1470
a bigger or smaller machine,|

163
00:05:08,890 --> 00:05:11,920
0,450 450,570 570,1380
Amazon can decide,

164
00:05:11,920 --> 00:05:14,020
0,120 120,270 270,750 930,1410 1860,2100
you know, it's a it's

165
00:05:14,020 --> 00:05:15,610
0,390 390,1050 1050,1230 1230,1410 1410,1590
current customers, maybe there's two

166
00:05:15,610 --> 00:05:17,320
0,840 930,1260 1260,1440 1440,1650 1650,1710
customers on this piece of

167
00:05:17,320 --> 00:05:18,250
0,300 300,510 510,720 720,840 840,930
hardware right here,| but they're

168
00:05:18,250 --> 00:05:19,270
0,150 150,360 360,420 420,810 810,1020
not using the computer very

169
00:05:19,270 --> 00:05:20,170
0,240 240,420 420,510 510,600 600,900
much,| maybe it can pack

170
00:05:20,170 --> 00:05:21,490
0,90 90,420 420,570 570,840 840,1320
a third or fourth customer

171
00:05:21,490 --> 00:05:22,600
0,420 420,600 600,870 870,1050 1050,1110
onto that same piece of

172
00:05:22,600 --> 00:05:25,000
0,510 630,1200 1200,1710 1770,2100 2100,2400
hardware without spending extra money,|

173
00:05:25,000 --> 00:05:26,890
0,300 300,480 480,660 660,1170 1500,1890
but get more revenue,| so

174
00:05:27,100 --> 00:05:28,400
0,450 450,810
this {}

175
00:05:28,480 --> 00:05:29,890
0,480 480,780 780,1080 1080,1290 1290,1410
virtual machines allow kind of

176
00:05:29,920 --> 00:05:33,160
0,360 360,720 720,960 1020,2100 3000,3240
extra level of flexibility| and

177
00:05:33,160 --> 00:05:34,570
0,120 120,240 240,660 900,1320 1320,1410
you know it's kind of

178
00:05:34,570 --> 00:05:35,830
0,300 300,450 450,660 660,1110 1110,1260
trick that's being used is|

179
00:05:35,830 --> 00:05:37,990
0,270 450,930 930,1110 1110,1230 1260,2160
that we're kind of shifting

180
00:05:37,990 --> 00:05:39,910
0,450 450,570 570,1260 1260,1650 1650,1920
up the existing operating system

181
00:05:39,910 --> 00:05:41,020
0,330 330,420 420,600 600,900 900,1110
kernels and user space| and

182
00:05:41,140 --> 00:05:42,940
0,420 420,480 480,630 630,960 960,1800
adding a new layer underneath

183
00:05:44,230 --> 00:05:46,520
0,360 360,720 720,1020 1050,1860
to provide this flexibility.|

184
00:05:47,220 --> 00:05:48,300
0,210 210,420 420,570 570,840 840,1080
It turns out there's {}

185
00:05:48,720 --> 00:05:50,160
0,420 420,720 720,1020 1020,1170 1170,1440
there's other reasons why people

186
00:05:50,160 --> 00:05:51,120
0,120 120,390 390,720 720,900 900,960
use virtual machines,| one is

187
00:05:51,120 --> 00:05:52,620
0,300 300,660 660,1230 1230,1410 1410,1500
certainly kernel development which is

188
00:05:52,620 --> 00:05:54,270
0,450 600,990 990,1140 1140,1380 1380,1650
why we all use {QEMU

189
00:05:54,270 --> 00:05:55,260
0,420
-},|

190
00:05:55,260 --> 00:05:56,820
0,420 450,570 570,990 990,1080 1080,1560
{} the ability to run

191
00:05:56,820 --> 00:05:57,690
0,180 180,360 360,720 720,810 810,870
{xv6 - -} in a

192
00:05:57,690 --> 00:05:59,460
0,180 180,360 450,900 900,1470 1470,1770
kind of virtual environment, rather

193
00:05:59,460 --> 00:06:00,740
0,210 210,330 330,660
than a real

194
00:06:00,740 --> 00:06:03,080
0,450 450,1050 1410,1590 1590,1800 1800,2340
computer| makes {} this course

195
00:06:03,110 --> 00:06:04,220
0,240 240,390 390,810 810,960 960,1110
much more convenient for all

196
00:06:04,220 --> 00:06:05,480
0,60 60,480 660,900 900,1080 1080,1260
of us,| it also makes

197
00:06:05,480 --> 00:06:06,290
0,90 90,120 120,300 300,420 450,810
it a little bit easier

198
00:06:06,290 --> 00:06:07,490
0,120 120,630 630,810 810,900 900,1200
to debug,| because we can

199
00:06:07,850 --> 00:06:09,800
0,630 630,990 990,1200 1410,1770 1770,1950
turns out that once you're

200
00:06:09,800 --> 00:06:12,500
0,690 720,1410 1410,1680 1800,2250 2250,2700
running xv6 and this virtual

201
00:06:12,500 --> 00:06:14,240
0,390 390,900 900,1110 1110,1320 1320,1740
machine environment,| {QEMU -} provides

202
00:06:14,240 --> 00:06:15,620
0,150 180,570 570,660 660,1080 1080,1380
us easier to provide {GDB

203
00:06:15,620 --> 00:06:18,110
0,180 180,930 2070,2250 2250,2310 2310,2490
-} access,| than it would

204
00:06:18,110 --> 00:06:19,940
0,150 150,570 750,990 990,1380 1380,1830
be on a physical computer.|

205
00:06:21,140 --> 00:06:22,190
0,270 270,330 330,630 630,930 930,1050
And the final reason that

206
00:06:22,190 --> 00:06:24,140
0,300 300,690 720,1260 1260,1830 1830,1950
people use virtual machines is|

207
00:06:24,140 --> 00:06:25,100
0,270 300,690 690,750 750,900 900,960
that there's a bunch of

208
00:06:25,100 --> 00:06:26,480
0,420 420,540 540,630 630,750 750,1380
tricks that can be played

209
00:06:26,840 --> 00:06:28,340
0,510 510,780 780,1050 1050,1410 1410,1500
using this extra layer of

210
00:06:28,340 --> 00:06:30,230
0,810 870,1380 1380,1500 1500,1590 1590,1890
indirection provided by the virtual

211
00:06:30,230 --> 00:06:32,000
0,300 300,690 690,810 810,1290 1440,1770
machine monitor,| for example, {}

212
00:06:32,000 --> 00:06:34,670
0,150 150,390 420,1590 1830,2010 2010,2670
you can checkpoint an entire

213
00:06:34,670 --> 00:06:37,250
0,750 960,1860 1860,2190 2190,2310 2310,2580
running operating system and user

214
00:06:37,250 --> 00:06:38,420
0,540 540,660 660,780 780,960 960,1170
processes,| you can take a

215
00:06:38,540 --> 00:06:40,580
0,690 690,780 780,1020 1470,1950 1950,2040
checkpoint of it, stash it

216
00:06:40,580 --> 00:06:42,170
0,210 210,840 870,1110 1110,1260 1260,1590
away somewhere maybe on disk,

217
00:06:42,170 --> 00:06:43,430
0,90 90,210 210,510 510,1020 1020,1260
and then later restore that

218
00:06:43,430 --> 00:06:45,770
0,690 870,1320 1320,1500 1500,1590 1740,2340
checkpoint,| {} sort of exactly

219
00:06:45,770 --> 00:06:47,040
0,90 90,450 450,540 540,780
the state of that

220
00:06:47,040 --> 00:06:48,870
0,330 330,660 660,840 840,990 990,1830
operating system and its processes

221
00:06:48,900 --> 00:06:49,560
0,180 180,270 270,510 510,570 570,660
as it was at the

222
00:06:49,560 --> 00:06:50,550
0,180 180,240 240,330 330,750 750,990
time of the checkpoint,| it's

223
00:06:50,760 --> 00:06:52,980
0,420 420,570 570,1350 1350,1500 1500,2220
useful for reliability for debugging

224
00:06:53,100 --> 00:06:55,200
0,240 240,480 480,1440 1470,1620 1620,2100
for maybe cloning the image

225
00:06:55,200 --> 00:06:56,490
0,120 120,360 390,720 720,1140 1140,1290
of a virtual machine,| so

226
00:06:56,490 --> 00:06:57,690
0,90 90,240 240,450 450,660 840,1200
you can run it multiple

227
00:06:57,690 --> 00:06:59,730
0,660 930,1530 1530,1800 1800,1920 1920,2040
times,| another game, you can

228
00:06:59,730 --> 00:07:00,930
0,270 270,450 450,570 570,810 810,1200
play is you can might

229
00:07:01,260 --> 00:07:04,110
0,1140 1530,1830 1830,2430 2430,2520 2520,2850
migrate a guest an entire

230
00:07:04,110 --> 00:07:06,060
0,270 270,360 360,630 630,1170 1500,1950
guest to another computer,| {}

231
00:07:06,150 --> 00:07:06,780
0,150 150,210 210,300 300,360 360,630
if you have a guest

232
00:07:06,780 --> 00:07:08,070
0,300 300,840 840,1110 1110,1200 1200,1290
operating system running on a

233
00:07:08,070 --> 00:07:09,570
0,330 330,930 1080,1290 1290,1350 1350,1500
physical computer| and you need

234
00:07:09,570 --> 00:07:10,770
0,90 90,390 390,720 720,810 810,1200
to shut down or replace

235
00:07:10,770 --> 00:07:12,510
0,210 210,660 660,1200 1350,1620 1620,1740
that physical computer,| you can

236
00:07:12,510 --> 00:07:14,310
0,360 360,660 660,930 930,1650 1650,1800
actually turns out move the

237
00:07:14,310 --> 00:07:15,420
0,720
running

238
00:07:15,420 --> 00:07:17,370
0,210 210,540 540,960 960,1470 1470,1950
{} virtual machine image without

239
00:07:17,370 --> 00:07:19,140
0,480 480,690 870,1140 1140,1410 1410,1770
disturbing it to another physical

240
00:07:19,140 --> 00:07:20,280
0,600 600,720 720,810 810,900 900,1140
computer,| so that you can

241
00:07:20,310 --> 00:07:21,390
0,330 330,540 540,600 600,870 870,1080
shut down the first one.|

242
00:07:22,330 --> 00:07:24,370
0,270 270,450 450,1140 1140,1230 1620,2040
There's just examples of why

243
00:07:24,370 --> 00:07:26,020
0,270 270,540 540,720 720,1050 1050,1650
people really like virtual machines|

244
00:07:26,020 --> 00:07:27,070
0,180 180,390 390,600 600,780 780,1050
and people really do virtual

245
00:07:27,070 --> 00:07:28,540
0,330 330,390 390,840 840,1110 1110,1470
machines are very, very widely

246
00:07:28,540 --> 00:07:30,880
0,630 960,1440 1830,2100 2100,2250 2250,2340
used,| and they also have

247
00:07:30,880 --> 00:07:32,260
0,60 60,300 300,660 660,990 1020,1380
a long history,| this ideas

248
00:07:32,260 --> 00:07:33,070
0,300 300,480 480,660 660,750 750,810
first came up in the

249
00:07:33,070 --> 00:07:34,570
0,390 390,990 990,1080 1080,1230 1230,1500
nineteen sixties| and they've been

250
00:07:34,840 --> 00:07:37,540
0,780 780,960 960,1680 1800,2370 2370,2700
developed over time until they're,

251
00:07:37,980 --> 00:07:40,290
0,210 210,450 540,870 870,1650 2040,2310
{} they're quite pervasive {}

252
00:07:40,290 --> 00:07:42,440
0,270 270,360 360,900
easy to use.|

253
00:07:42,690 --> 00:07:45,090
0,300 300,510 510,1470 1680,2220 2250,2400
For this course, {} the

254
00:07:45,090 --> 00:07:46,350
0,270 270,510 510,780 780,1050 1050,1260
reason why we're looking into

255
00:07:46,350 --> 00:07:48,390
0,300 300,540 540,810 1020,1680 1680,2040
them is that| virtual machine

256
00:07:48,390 --> 00:07:50,460
0,750 780,1230 1230,1560 1590,1860 1860,2070
monitors provide {} sort of

257
00:07:50,460 --> 00:07:51,720
0,360 360,780 780,960 960,1140 1140,1260
different view on what an

258
00:07:51,720 --> 00:07:54,150
0,420 420,780 780,990 990,1500 1920,2430
operating system can be,| instead

259
00:07:54,150 --> 00:07:55,890
0,210 330,660 660,1110 1110,1620 1620,1740
of the process abstraction, we're

260
00:07:55,890 --> 00:07:56,880
0,90 90,420 420,750 750,810 810,990
all used to,| you know

261
00:07:56,880 --> 00:07:58,350
0,90 90,270 270,480 480,930 930,1470
we have some analogous structures

262
00:07:58,350 --> 00:07:59,970
0,210 210,480 720,1170 1200,1500 1500,1620
here,| but a sort of

263
00:07:59,970 --> 00:08:01,500
0,600 600,660 660,990 990,1440 1440,1530
providing a different kind of

264
00:08:01,500 --> 00:08:04,140
0,630 630,840 840,1080 1080,1350 1710,2640
container,| it's not a process,

265
00:08:04,140 --> 00:08:05,280
0,180 180,300 300,510 510,600 600,1140
it's a sort of simulated

266
00:08:05,280 --> 00:08:07,500
0,750 1410,1830 1830,1950 1950,2070 2070,2220
machine,| allows us to kind

267
00:08:07,500 --> 00:08:08,580
0,60 60,360 360,750
of think about

268
00:08:08,580 --> 00:08:10,020
0,450 450,810 870,1230 1230,1320 1320,1440
all the stuff we've been

269
00:08:10,020 --> 00:08:13,320
0,390 390,900 1470,1980 1980,2520 2520,3300
talking about memory allocation scheduling

270
00:08:13,320 --> 00:08:15,870
0,810 1110,1650 1860,2220 2220,2280 2280,2550
protection, {} from a different

271
00:08:15,870 --> 00:08:17,360
0,240 240,300 300,600
point of view.|

272
00:08:17,790 --> 00:08:18,870
0,270 270,390 390,510 510,630 630,1080
Maybe give us some ideas,|

273
00:08:18,870 --> 00:08:19,800
0,210 210,330 330,450 450,690 690,930
which we can take back

274
00:08:19,800 --> 00:08:21,750
0,210 210,690 690,1020 1020,1320 1320,1950
to traditional operating system kernels,|

275
00:08:22,050 --> 00:08:23,790
0,360 570,1290 1290,1560 1560,1620 1620,1740
and indeed much of the

276
00:08:23,790 --> 00:08:26,610
0,780 1110,1590 1650,1950 1950,2010 2010,2820
action, a sort of development,

277
00:08:26,610 --> 00:08:29,820
0,450 450,990 990,1590 1620,2160 2190,3210
design, development, research action| has

278
00:08:29,820 --> 00:08:34,140
0,570 570,1140 1170,1980 1980,3060 3780,4320
shifted from conventional kernels down

279
00:08:34,140 --> 00:08:35,940
0,330 330,660 660,990 990,1320 1320,1800
into the virtual machine monitors

280
00:08:35,940 --> 00:08:38,010
0,990 990,1140 1140,1290 1290,1680 1770,2070
themselves| as they've gotten more

281
00:08:38,010 --> 00:08:39,750
0,90 90,240 240,750 750,1140 1350,1740
and more prevalent,| so {}

282
00:08:39,750 --> 00:08:40,530
0,150 150,360 360,570 570,720 720,780
in some sense kind of

283
00:08:40,530 --> 00:08:42,330
0,180 210,690 690,810 810,1230 1230,1800
the topic of operating systems

284
00:08:42,330 --> 00:08:44,370
0,270 360,960 960,1530 1530,1620 1620,2040
is drifting downwards a bit

285
00:08:44,430 --> 00:08:45,960
0,480 480,750 750,1230
by one layer.|

286
00:08:48,090 --> 00:08:50,970
0,540 1170,1650 2250,2460 2460,2730 2730,2880
Okay for the first part

287
00:08:50,970 --> 00:08:51,570
0,60 60,210 210,450 450,480 480,600
of this lecture I want

288
00:08:51,570 --> 00:08:53,760
0,60 60,330 330,690 870,1500 1830,2190
to talk about a bit

289
00:08:53,760 --> 00:08:56,130
0,210 210,780 780,900 900,1410 1620,2370
about how we could implement

290
00:08:56,160 --> 00:08:59,520
0,300 300,870 900,1710 1710,2520 2880,3360
our own virtual machine, um

291
00:08:59,550 --> 00:09:01,710
0,420 630,930 930,1290 1290,1740 1770,2160
and um, I'm gonna use

292
00:09:01,710 --> 00:09:03,360
0,300 300,780 780,960 960,1290 1380,1650
risk five as that sort

293
00:09:03,360 --> 00:09:04,280
0,210
of.

294
00:09:04,280 --> 00:09:06,200
0,450 450,570 570,1140
Assume that we're.

295
00:09:06,200 --> 00:09:08,300
0,570 570,870 900,1530 1530,1830 1830,2100
Trying to emulate risk, five

296
00:09:08,300 --> 00:09:09,320
0,420 420,540 540,660 660,810 810,1020
hardware so we can run

297
00:09:09,320 --> 00:09:11,060
0,420 420,990 990,1380 1380,1500 1500,1740
operating systems designed for risk

298
00:09:11,060 --> 00:09:12,650
0,330 330,690 780,1020 1020,1110 1110,1590
five lake X V six.

299
00:09:14,420 --> 00:09:17,030
0,270 480,840 840,930 930,1560 2250,2610
And just to repeat the

300
00:09:17,420 --> 00:09:20,750
0,720 720,1380 2190,2430 2430,2640 2640,3330
specific goals, what we'd like

301
00:09:21,020 --> 00:09:22,850
0,390 420,810 900,1140 1140,1200 1200,1830
we're for kind of classical

302
00:09:22,850 --> 00:09:24,770
0,330 330,1170 1350,1530 1530,1710 1710,1920
virtual machines, what we'd like

303
00:09:24,770 --> 00:09:26,150
0,90 90,420 420,510 510,1080 1110,1380
to build is something in

304
00:09:26,150 --> 00:09:27,800
0,300 300,510 510,930 930,1530 1530,1650
which the guest software is

305
00:09:27,800 --> 00:09:30,800
0,270 270,930 930,1350 1380,2160 2370,3000
just completely not aware I'm

306
00:09:30,980 --> 00:09:32,090
0,180 180,420 420,750 750,1080 1080,1110
that it's running inside a

307
00:09:32,090 --> 00:09:34,160
0,330 330,900 1140,1500 1500,1650 1650,2070
virtual machine, we want to

308
00:09:34,190 --> 00:09:35,960
0,480 480,1020 1380,1530 1530,1710 1710,1770
build something that makes it

309
00:09:35,960 --> 00:09:37,580
0,780 780,870 870,990 990,1260 1260,1620
impossible for the guest software

310
00:09:37,580 --> 00:09:39,980
0,90 90,1020 1200,1650 1650,2160 2160,2400
to distinguish to decide whether

311
00:09:39,980 --> 00:09:40,730
0,90 90,300 300,420 420,510 510,750
is this am I running

312
00:09:40,730 --> 00:09:41,690
0,90 90,180 180,390 390,840 840,960
on a real machine or

313
00:09:41,690 --> 00:09:42,830
0,60 60,420 420,840 870,1020 1020,1140
a virtual machine right, we

314
00:09:42,830 --> 00:09:43,910
0,210 210,330 330,840 840,930 930,1080
want the emulation to be

315
00:09:43,910 --> 00:09:45,000
0,360 360,750
that good.

316
00:09:45,090 --> 00:09:46,290
0,510 600,780 780,840 840,1110 1110,1200
Um, and the reason for

317
00:09:46,290 --> 00:09:46,980
0,210 210,300 300,390 390,480 480,690
that is that we don't

318
00:09:46,980 --> 00:09:49,260
0,420 930,1170 1170,1710 1710,2010 2130,2280
want, um, we want to

319
00:09:49,260 --> 00:09:50,220
0,60 60,180 180,540 570,780 780,960
be able to we'd like

320
00:09:50,220 --> 00:09:50,640
0,60 60,120 120,240 240,300 300,420
to be able to run

321
00:09:50,640 --> 00:09:52,080
0,390 390,480 480,570 570,900 900,1440
anything in our virtual machine,

322
00:09:52,170 --> 00:09:53,730
0,480 480,840 840,1170 1170,1350 1350,1560
any operating system even maybe

323
00:09:53,730 --> 00:09:54,810
0,60 60,390 390,720 720,810 810,1080
an operating system, we haven't

324
00:09:54,810 --> 00:09:56,460
0,240 240,390 630,1170 1170,1320 1320,1650
heard of and that means

325
00:09:56,460 --> 00:09:58,410
0,240 480,810 810,870 870,1620 1620,1950
that you know, whatever funny

326
00:09:58,410 --> 00:10:00,510
0,270 270,600 750,1260 1260,1590 1590,2100
stuff the operating system does

327
00:10:00,510 --> 00:10:01,110
0,90 90,150 150,270 270,360 360,600
and the way it uses

328
00:10:01,110 --> 00:10:03,810
0,690 900,1320 1560,2040 2040,2340 2340,2700
hardware a virtual machine has

329
00:10:03,810 --> 00:10:05,700
0,120 120,870 870,1410
to provide that.

330
00:10:05,980 --> 00:10:08,110
0,330 330,960 960,1050 1050,2010 2040,2130
An emulation of exactly the

331
00:10:08,110 --> 00:10:10,210
0,510 510,660 660,900 900,1320 1770,2100
hardware so that any tricks

332
00:10:10,210 --> 00:10:10,840
0,90 90,300 300,360 360,450 450,630
that work on the real

333
00:10:10,840 --> 00:10:11,770
0,390 390,540 540,750 750,870 870,930
hardware are also going to

334
00:10:11,770 --> 00:10:12,850
0,210 210,270 270,330 330,600 600,1080
work on the virtual machine.

335
00:10:14,620 --> 00:10:18,490
0,810 1020,1230 1230,1290 1290,2490 3060,3870
A sort of similar goal

336
00:10:18,490 --> 00:10:20,290
0,150 150,330 330,720 750,1140 1170,1800
that we'd like is, um,

337
00:10:20,350 --> 00:10:21,040
0,150 150,360 360,450 450,540 540,690
we want there to be

338
00:10:21,040 --> 00:10:22,270
0,330 330,630 630,840 840,1050 1050,1230
no way not only no

339
00:10:22,270 --> 00:10:23,920
0,150 150,300 300,390 390,1230 1260,1650
way for a guest to

340
00:10:24,040 --> 00:10:25,240
0,690 690,750 750,870 870,1110 1110,1200
decide if it's running on

341
00:10:25,240 --> 00:10:26,980
0,330 330,780 810,1350 1350,1560 1560,1740
virtual machine, but no way

342
00:10:26,980 --> 00:10:27,790
0,210 210,480 480,570 570,660 660,810
for guests to be able

343
00:10:27,790 --> 00:10:29,050
0,90 90,660 660,840 840,930 930,1260
to escape from the virtual

344
00:10:29,050 --> 00:10:30,400
0,480 510,870 870,1170 1170,1260 1260,1350
machine, a lot of the

345
00:10:30,400 --> 00:10:31,930
0,300 300,600 690,990 990,1200 1200,1530
reason why people use virtual

346
00:10:31,930 --> 00:10:33,460
0,480 480,600 600,690 690,1050 1050,1530
machines is to provide strict

347
00:10:33,460 --> 00:10:37,120
0,840 1260,1800 1920,2280 2280,2850 2850,3660
confinement for for untrusted software,

348
00:10:37,240 --> 00:10:39,100
0,240 240,810 810,1230 1230,1620 1620,1860
even untrusted operating systems running

349
00:10:39,100 --> 00:10:40,660
0,270 270,360 360,660 660,1140 1320,1560
inside the virtual machine, for

350
00:10:40,660 --> 00:10:42,280
0,480 660,900 900,1080 1080,1530 1530,1620
example if you're Amazon and

351
00:10:42,280 --> 00:10:44,800
0,150 150,540 540,960 960,1470 1830,2520
your selling cloud services, your

352
00:10:44,800 --> 00:10:46,630
0,690 690,1050 1080,1380 1380,1710 1710,1830
customers often who provide the

353
00:10:46,630 --> 00:10:48,250
0,480 480,1140 1170,1350 1350,1560 1560,1620
operating system that runs on

354
00:10:48,250 --> 00:10:49,240
0,60 60,360 360,690 690,840 840,990
the virtual machine as well

355
00:10:49,240 --> 00:10:51,100
0,120 120,210 210,1050 1290,1530 1530,1860
as the applications and gosh

356
00:10:51,100 --> 00:10:51,820
0,150 150,300 300,450 450,570 570,720
for all you know your

357
00:10:51,820 --> 00:10:53,200
0,480 480,540 540,750 750,960 960,1380
customers are not running ordinary

358
00:10:53,200 --> 00:10:54,670
0,420 480,870 870,1050 1050,1140 1140,1470
Linux, they're running a special

359
00:10:54,670 --> 00:10:57,190
0,420 420,720 720,840 840,1290 1320,2520
hacked version of Linux whose

360
00:10:57,220 --> 00:10:59,200
0,840 900,1110 1110,1230 1230,1350 1350,1980
intended to try to break

361
00:10:59,200 --> 00:11:00,880
0,420 450,780 810,1020 1020,1320 1320,1680
out of its virtual machine

362
00:11:00,880 --> 00:11:03,610
0,150 150,510 510,810 810,1950 2250,2730
and break into Amazon's either

363
00:11:03,610 --> 00:11:04,810
0,60 60,330 330,660 660,750 750,1200
the virtual machines of Amazon's

364
00:11:04,810 --> 00:11:07,300
0,180 180,780 780,1080 1710,2160 2250,2490
other customers or a into

365
00:11:07,300 --> 00:11:08,800
0,90 90,360 360,720 720,1230 1320,1500
the virtual machine monitor that

366
00:11:08,800 --> 00:11:10,690
0,450 450,720 720,840 840,1260 1260,1890
Amazon uses to enforce isolation

367
00:11:10,960 --> 00:11:11,580
0,330
so.

368
00:11:11,900 --> 00:11:13,970
0,180 180,630 630,1230 1470,1770 1770,2070
It's quite important that guess

369
00:11:13,970 --> 00:11:14,930
0,240 240,570 570,660 660,840 840,960
and not be able to

370
00:11:14,930 --> 00:11:16,010
0,300 300,510 510,600 600,750 750,1080
break out of their virtual

371
00:11:16,010 --> 00:11:17,030
0,510 510,660 660,750 750,930 930,1020
machines they be able to

372
00:11:17,030 --> 00:11:19,010
0,270 270,390 390,1260 1620,1860 1860,1980
use the memory that they're

373
00:11:19,010 --> 00:11:19,940
0,360 360,450 450,750 750,870 870,930
allowed to use by the

374
00:11:19,940 --> 00:11:21,590
0,270 270,570 570,990 990,1140 1140,1650
virtual machine monitor, for example,

375
00:11:21,770 --> 00:11:23,630
0,510 690,840 840,1080 1080,1290 1290,1860
um, but not other memory,

376
00:11:24,350 --> 00:11:25,490
0,510 510,630 630,780 780,1080 1080,1140
similarly that they shouldn't be

377
00:11:25,490 --> 00:11:27,110
0,120 120,210 210,480 480,870 1110,1620
able to reach out without

378
00:11:27,110 --> 00:11:28,970
0,600 660,1050 1050,1230 1230,1650 1650,1860
permission a and use things

379
00:11:28,970 --> 00:11:30,770
0,150 150,570 570,1140 1140,1350 1410,1800
like storage devices or network

380
00:11:30,770 --> 00:11:32,540
0,390 390,990 1350,1560 1560,1650 1650,1770
interface cards, so you're gonna

381
00:11:32,540 --> 00:11:34,550
0,150 150,420 420,810 810,1470 1710,2010
have very strict isolation and

382
00:11:35,930 --> 00:11:37,940
0,150 150,330 330,870 900,1230 1230,2010
in many ways virtual machines.

383
00:11:38,330 --> 00:11:41,270
0,390 390,930 930,1740 1770,2220 2250,2940
Provides stricter isolation than ordinary

384
00:11:41,330 --> 00:11:44,030
0,480 480,1320 1530,1890 1890,2160 2160,2700
unix processes, ordinary unix processes

385
00:11:44,030 --> 00:11:45,410
0,120 120,360 360,960 960,1110 1110,1380
can often interact they can

386
00:11:45,440 --> 00:11:47,150
0,360 360,570 570,960 960,1410 1500,1710
kill each other or they

387
00:11:47,150 --> 00:11:47,870
0,210 210,390 390,450 450,630 630,720
can read or write the

388
00:11:47,870 --> 00:11:49,910
0,270 270,1080 1080,1290 1320,1860 1860,2040
same files or communicate over

389
00:11:49,910 --> 00:11:52,600
0,630 690,1380 1590,2190
pipes, um, but.

390
00:11:52,880 --> 00:11:54,170
0,240 240,330 330,540 540,780 870,1290
In a sort of ordinary

391
00:11:54,170 --> 00:11:55,490
0,270 270,750 750,1020 1020,1080 1080,1320
virtual machines, none of that's

392
00:11:55,490 --> 00:11:58,940
0,600 1020,1500 2100,2520 2730,3210 3210,3450
possible, um, the different virtual

393
00:11:58,940 --> 00:12:00,020
0,330 330,570 570,630 630,720 720,1080
machines running on the same

394
00:12:00,020 --> 00:12:03,350
0,630 1560,2460 2460,3030 3030,3180 3180,3330
computer completely isolated from each

395
00:12:03,350 --> 00:12:05,090
0,360 630,1110 1110,1230 1230,1500 1500,1740
other by the virtual machine

396
00:12:05,090 --> 00:12:06,200
0,330 330,450 450,720 720,960 960,1110
monitors so people like them

397
00:12:06,200 --> 00:12:07,850
0,120 120,750 960,1320 1320,1410 1410,1650
for security, it's a way

398
00:12:07,850 --> 00:12:08,510
0,60 60,180 180,330 330,390 390,660
of being able to run

399
00:12:08,510 --> 00:12:11,360
0,600 600,1230 2280,2580 2580,2760 2760,2850
untrusted software without having to

400
00:12:11,360 --> 00:12:12,290
0,270 270,360 360,480 480,840 840,930
worry if it's buggy or

401
00:12:12,290 --> 00:12:13,780
0,750
malicious.

402
00:12:14,480 --> 00:12:17,200
0,420 840,1170 1170,1260 1260,2250
Um, now in practice.

403
00:12:17,590 --> 00:12:19,840
0,240 240,690 930,1620 1620,1830 1830,2250
I I've pitched the goal

404
00:12:19,840 --> 00:12:22,030
0,180 180,780 1410,1680 1680,1740 1740,2190
as being sort of completely

405
00:12:22,030 --> 00:12:24,190
0,750 1140,1680 1680,1740 1740,1830 1830,2160
faithful emulation of a physical

406
00:12:24,190 --> 00:12:26,770
0,420 420,540 540,1080 1980,2340 2340,2580
machine, in fact it turns

407
00:12:26,770 --> 00:12:28,660
0,120 120,390 390,810 810,1410 1410,1890
out that for performance reasons,

408
00:12:28,660 --> 00:12:30,550
0,510 660,810 810,1140 1140,1680 1680,1890
this is often blurred and

409
00:12:30,550 --> 00:12:32,170
0,150 150,450 450,570 570,990 990,1620
you'll find for example that

410
00:12:32,770 --> 00:12:35,080
0,450 480,1380 1380,1740 1740,2040 2040,2310
a Linux and the most

411
00:12:35,080 --> 00:12:36,520
0,300 300,600 600,960 960,1320 1320,1440
common virtual machine monitors have

412
00:12:36,520 --> 00:12:37,810
0,270 270,750 750,810 810,1020 1020,1290
Co evolved a little bit

413
00:12:37,810 --> 00:12:39,580
0,150 150,390 960,1170 1170,1410 1410,1770
so that in real life,

414
00:12:39,640 --> 00:12:41,050
0,480 480,630 630,900 900,1020 1020,1410
Linux may actually be aware

415
00:12:41,050 --> 00:12:41,710
0,120 120,300 300,540 540,630 630,660
that it's running on a

416
00:12:41,710 --> 00:12:43,240
0,330 330,660 660,1140 1140,1320 1320,1530
virtual machine monitor and with

417
00:12:43,240 --> 00:12:45,070
0,90 90,390 390,720 720,1170 1170,1830
the virtual machine monitors permission

418
00:12:45,190 --> 00:12:48,610
0,180 180,870 1680,2220 2220,2850 2850,3420
for efficiency, Linux sometimes knowingly

419
00:12:48,610 --> 00:12:50,380
0,810 990,1320 1320,1380 1380,1470 1470,1770
talks down to the virtual

420
00:12:50,380 --> 00:12:51,580
0,300 300,720 720,810 810,960 960,1200
machine monitors to do things

421
00:12:51,580 --> 00:12:53,080
0,150 150,360 390,960 960,1380 1380,1500
like get high-speed access to

422
00:12:53,080 --> 00:12:54,160
0,840
devices.

423
00:12:54,160 --> 00:12:55,660
0,300 330,600 600,600 600,1110 1110,1500
But that's a carefully controlled

424
00:12:55,660 --> 00:12:58,240
0,630 870,1170 1170,1260 1380,1920 1920,2580
exception and the general strategy

425
00:12:58,240 --> 00:12:59,420
0,270
is.

426
00:12:59,630 --> 00:13:05,520
0,540 540,1230 1350,1620 1620,2310
Completely faithful a simulation.

427
00:13:05,870 --> 00:13:07,580
0,390 390,1200 1230,1440 1440,1560 1560,1710
Okay, so how could we

428
00:13:07,580 --> 00:13:08,930
0,240 240,390 390,600 600,960 960,1350
build our own virtual machine

429
00:13:08,930 --> 00:13:11,260
0,480
monitor.

430
00:13:11,760 --> 00:13:13,530
0,420 570,900 900,1530 1530,1680 1680,1770
Well, one possibility would be

431
00:13:13,530 --> 00:13:14,580
0,120 120,240 240,360 360,960 960,1050
to do it entirely in

432
00:13:14,580 --> 00:13:16,740
0,540 570,720 720,840 840,1530 1680,2160
software, you can imagine writing

433
00:13:16,740 --> 00:13:19,200
0,330 330,510 510,870 870,1410 1800,2460
something like q mu, um

434
00:13:19,350 --> 00:13:22,260
0,510 960,1500 1500,2400 2400,2520 2520,2910
that, um interpreted the machine

435
00:13:22,260 --> 00:13:23,610
0,810 810,990 990,1110 1110,1230 1230,1350
instructions that is, you could

436
00:13:23,610 --> 00:13:24,720
0,150 150,210 210,600 600,720 720,1110
write a program that would

437
00:13:25,170 --> 00:13:26,310
0,450 450,630 630,780 780,990 990,1140
open up the ex v

438
00:13:26,310 --> 00:13:28,950
0,840 900,1020 1020,1530 1530,1890 2010,2640
six to read the file

439
00:13:28,950 --> 00:13:29,700
0,120 120,300 300,420 420,630 630,750
that has the X V

440
00:13:29,700 --> 00:13:31,230
0,240 240,870 870,990 990,1170 1290,1530
six instructions in it and

441
00:13:31,230 --> 00:13:32,250
0,210 210,600 600,810 810,960 960,1020
your program could look at

442
00:13:32,250 --> 00:13:33,690
0,180 180,750 750,900 900,1200 1200,1440
these instructions say oh that's

443
00:13:33,690 --> 00:13:35,280
0,210 360,960 960,1470 1470,1530 1530,1590
a load instruction or a

444
00:13:35,280 --> 00:13:37,560
0,420 420,1110 1110,1440 1620,1920 1920,2280
move instruction and your program,

445
00:13:37,560 --> 00:13:38,820
0,330 420,630 630,720 720,1200 1200,1260
could you know sort of

446
00:13:38,820 --> 00:13:41,370
0,810 1050,1380 1380,1710 1710,2430 2430,2550
simulate risk five state may

447
00:13:41,370 --> 00:13:43,350
0,180 180,660 660,1440 1440,1890 1890,1980
have 32 registers implemented in

448
00:13:43,350 --> 00:13:45,360
0,690 870,1710
software, um.

449
00:13:45,770 --> 00:13:46,850
0,210 210,390 390,540 540,900 900,1080
And as your software sort

450
00:13:46,850 --> 00:13:48,050
0,90 90,360 360,510 510,1050 1050,1200
of reads each instruction and

451
00:13:48,050 --> 00:13:48,980
0,240 240,330 330,600 600,690 690,930
picks it apart, it figures

452
00:13:48,980 --> 00:13:49,880
0,120 120,210 210,330 330,390 390,900
out what kind of instruction,

453
00:13:49,880 --> 00:13:51,050
0,210 210,330 330,450 450,1050 1050,1170
is it would apply the

454
00:13:51,050 --> 00:13:53,240
0,330 330,390 390,540 540,1230 2040,2190
effects of that instruction to

455
00:13:53,240 --> 00:13:56,240
0,150 150,660 660,1440 1440,1680 2550,3000
the 32 registers and control

456
00:13:56,240 --> 00:13:57,800
0,570 570,690 690,750 750,900 900,1560
registers that it was simulating

457
00:13:57,800 --> 00:13:59,200
0,270 270,330 330,930
all in software.

458
00:13:59,710 --> 00:14:02,260
0,270 480,750 750,960 960,1500 1950,2550
And people do this and

459
00:14:02,860 --> 00:14:05,200
0,690 720,1380 1380,2130 2130,2190 2190,2340
it's conceptually straightforward to make

460
00:14:05,200 --> 00:14:06,560
0,120 120,390 390,630 630,810
it work, although it.

461
00:14:06,620 --> 00:14:07,700
0,240 240,600 600,750 780,990 990,1080
Um, maybe a lot of

462
00:14:07,700 --> 00:14:08,270
0,180 180,270 270,390 390,480 480,570
work to get all the

463
00:14:08,270 --> 00:14:11,210
0,450 450,750 1230,1650 1650,2100 2100,2940
details right, the reason why

464
00:14:11,240 --> 00:14:19,040
0,570 930,3210 3210,4500 5880,7140 7320,7800
a suhr software interpretive virtual

465
00:14:19,040 --> 00:14:21,530
0,570 570,840 840,1290 1290,2040 2130,2490
machines aren't widely used, um

466
00:14:21,530 --> 00:14:23,020
0,120 120,240 240,390 390,990
is that they're slow.

467
00:14:23,380 --> 00:14:24,670
0,180 180,390 390,630 630,840 840,1290
If you play this game,

468
00:14:24,760 --> 00:14:26,140
0,270 270,570 570,1140 1140,1260 1260,1380
your virtual machine is going

469
00:14:26,140 --> 00:14:27,400
0,90 90,390 390,630 630,1200 1200,1260
to run guess software at

470
00:14:27,400 --> 00:14:29,710
0,270 270,840 840,1680 2070,2220 2220,2310
a small fraction of the

471
00:14:29,710 --> 00:14:31,630
0,420 420,510 510,810 1200,1770 1770,1920
speed of the hardware that

472
00:14:31,630 --> 00:14:32,950
0,180 180,480 480,750 750,900 900,1320
you're using because for every

473
00:14:33,130 --> 00:14:35,080
0,300 450,1080 1080,1380 1380,1650 1650,1950
your virtual machine monitor software

474
00:14:35,080 --> 00:14:35,740
0,120 120,180 180,300 300,390 390,660
has to look at every

475
00:14:35,740 --> 00:14:37,180
0,570 570,660 660,780 780,1290 1290,1440
instruction as it's executed up

476
00:14:37,180 --> 00:14:38,980
0,360 540,1080 1080,1410 1410,1680 1680,1800
here, your machine monitor is

477
00:14:38,980 --> 00:14:40,060
0,120 120,180 180,420 420,630 630,1080
going to maybe run dozens

478
00:14:40,060 --> 00:14:42,070
0,90 90,1050 1320,1560 1560,1650 1650,2010
of instructions in the process

479
00:14:42,070 --> 00:14:43,630
0,90 90,630 630,870 870,1410 1440,1560
of interpreting each one of

480
00:14:43,630 --> 00:14:44,920
0,90 90,420 420,1050 1050,1170 1170,1290
the guest instructions and so

481
00:14:44,920 --> 00:14:45,820
0,120 120,240 240,300 300,450 480,900
it's going to be orders

482
00:14:45,820 --> 00:14:47,480
0,90 90,570 570,1170
of magnitude slower.

483
00:14:47,540 --> 00:14:49,610
0,300 390,690 690,1200 1200,1620 1860,2070
A real computer and for

484
00:14:49,610 --> 00:14:51,640
0,240 240,360 360,690 690,1440
something like cloud computing.

485
00:14:51,790 --> 00:14:53,020
0,240 240,480 480,630 630,930 930,1230
I really would not be

486
00:14:53,020 --> 00:14:55,450
0,150 150,750 840,1140 1620,2250 2250,2430
a practical so people don't

487
00:14:55,450 --> 00:14:56,840
0,450 450,810
use the.

488
00:14:56,960 --> 00:14:59,360
0,360 360,810 810,1770 2130,2250 2250,2400
A software interpretation to build

489
00:14:59,360 --> 00:15:01,610
0,270 270,750 750,1020 1020,1530 1530,2250
virtual machines for production systems,

490
00:15:02,000 --> 00:15:05,360
0,540 1860,2580
I'm instead.

491
00:15:06,420 --> 00:15:09,810
0,870 1260,1680 1680,1890 1920,2880 2880,3390
A sort of core of

492
00:15:10,080 --> 00:15:12,930
0,570 960,1410 1410,1530 1530,1860 1890,2850
um, one of the main

493
00:15:13,020 --> 00:15:15,840
0,540 810,1290 1290,1470 1470,2250 2400,2820
a widely used strategies is

494
00:15:15,900 --> 00:15:18,330
0,270 270,900 900,1320 1350,1830 1860,2430
to run the actually run

495
00:15:18,330 --> 00:15:19,980
0,120 120,480 480,1290 1320,1530 1530,1650
the guest instructions on the

496
00:15:19,980 --> 00:15:21,520
0,240 240,1050
real CPU.

497
00:15:21,770 --> 00:15:24,000
0,420 540,1170
I'm sure.

498
00:15:24,000 --> 00:15:24,990
0,480 480,690 690,780 780,870 870,990
So if you were going

499
00:15:24,990 --> 00:15:26,190
0,90 90,390 390,570 570,690 690,1200
to run aix v six

500
00:15:26,190 --> 00:15:29,340
0,210 210,930 1590,2280 2280,2610 2610,3150
in your virtual machine monitor,

501
00:15:29,430 --> 00:15:31,890
0,270 270,360 360,930 960,2070 2190,2460
you would actually load X

502
00:15:31,890 --> 00:15:33,270
0,150 150,480 480,720 720,1290 1290,1380
V, six is instructions to

503
00:15:33,270 --> 00:15:34,920
0,570 600,720 720,1230 1230,1290 1290,1650
colonel the beginning, you know.

504
00:15:35,600 --> 00:15:37,400
0,390 390,630 630,1050 1050,1650 1650,1800
Empire s.v six instructions in

505
00:15:37,400 --> 00:15:38,840
0,60 60,480 480,660 660,960 960,1440
a memory and then jump

506
00:15:38,840 --> 00:15:40,160
0,120 120,240 240,570 570,1140 1140,1320
to the first instruction in

507
00:15:40,160 --> 00:15:41,820
0,240 240,390 390,1170
aix v six.

508
00:15:42,410 --> 00:15:44,560
0,510 930,1560
Right, um.

509
00:15:45,410 --> 00:15:46,370
0,150 150,360 360,450 450,690 690,960
In order to have your

510
00:15:46,370 --> 00:15:48,830
0,720 990,1590 1620,1830 1830,1920 1920,2460
computer actually run the instructions

511
00:15:48,830 --> 00:15:49,910
0,90 90,600 600,690 690,750 750,1080
in x86 and of course

512
00:15:49,940 --> 00:15:51,200
0,240 240,630 630,750 750,870 870,1260
this requires that your computer

513
00:15:51,200 --> 00:15:53,690
0,120 120,180 180,870 900,1290 1500,2490
has the same, a microprocessor

514
00:15:53,690 --> 00:15:54,380
0,90 90,240 240,390 390,540 540,690
in it that ex v

515
00:15:54,380 --> 00:15:57,440
0,300 300,540 540,1140 1140,1410 2550,3060
six is expecting but that's

516
00:15:57,440 --> 00:15:59,040
0,210 210,360 360,1050
easy to arrange.

517
00:15:59,570 --> 00:16:00,820
0,570
Now.

518
00:16:00,940 --> 00:16:01,720
0,150 150,360 360,420 420,540 540,780
It turns out you can't

519
00:16:01,720 --> 00:16:03,880
0,390 390,600 600,1050 1080,1410 1860,2160
literally do this a point

520
00:16:03,880 --> 00:16:04,630
0,60 60,210 210,300 300,540 540,750
at which you run into

521
00:16:04,630 --> 00:16:07,420
0,540 570,840 840,1440 1470,1950 2070,2790
trouble is when your guest

522
00:16:07,420 --> 00:16:09,700
0,480 480,1050 1110,1710 1710,2220 2220,2280
operating system first executed a

523
00:16:09,700 --> 00:16:11,520
0,600 600,1260
privileged instruction.

524
00:16:12,080 --> 00:16:14,040
0,390 420,1230
Right if.

525
00:16:14,130 --> 00:16:14,820
0,210 210,300 300,360 360,570 570,690
And you know that's really

526
00:16:14,820 --> 00:16:16,080
0,60 60,360 360,660 660,750 780,1260
the difference between the kernel

527
00:16:16,080 --> 00:16:17,760
0,120 120,780 780,1110 1110,1530 1530,1680
and ordinary user code is

528
00:16:17,760 --> 00:16:19,410
0,270 540,1230 1230,1410 1410,1500 1500,1650
that kernels which is what

529
00:16:19,410 --> 00:16:20,280
0,90 90,300 300,420 450,660 660,870
we're trying to run here

530
00:16:20,280 --> 00:16:21,480
0,60 60,150 150,450 450,750 750,1200
in our virtual machine kernels

531
00:16:21,480 --> 00:16:24,600
0,420 450,810 810,1470 1770,2190 2490,3120
use privileged instructions a guest

532
00:16:24,600 --> 00:16:25,770
0,120 120,360 360,630 630,1020 1020,1170
your guest kernel might for

533
00:16:25,770 --> 00:16:27,180
0,450 510,840 840,930 930,1350 1350,1410
example try to elude a

534
00:16:27,180 --> 00:16:28,890
0,150 150,570 570,1230 1260,1620 1620,1710
new page table into the

535
00:16:28,890 --> 00:16:31,110
0,360 360,540 540,1110 1110,1410 1410,2220
sat p register risk five.

536
00:16:32,670 --> 00:16:33,990
0,420 480,720 720,960 960,1050 1050,1320
So that's starting to present

537
00:16:33,990 --> 00:16:35,060
0,60 60,510
a puzzle.

538
00:16:35,540 --> 00:16:37,220
0,270 270,600 630,1260 1260,1380 1380,1680
If we're executing our guest

539
00:16:37,220 --> 00:16:38,990
0,510 510,690 690,780 780,1380 1380,1770
kernel as an ordinary user

540
00:16:38,990 --> 00:16:40,610
0,450 450,570 570,960 960,1080 1080,1620
process and Linux for example

541
00:16:40,700 --> 00:16:42,050
0,420 420,720 720,990 990,1230 1230,1350
boy loading sat peas, an

542
00:16:42,080 --> 00:16:45,410
0,450 450,1170 1950,2310 2370,2820 2820,3330
illegal instruction in user mode

543
00:16:45,470 --> 00:16:46,580
0,390 390,570 570,720 720,990 990,1110
then so our programs going

544
00:16:46,580 --> 00:16:48,170
0,60 60,630 1170,1380 1380,1500 1500,1590
to crash if we are

545
00:16:48,170 --> 00:16:50,060
0,270 270,720 720,870 870,1110 1170,1890
so foolish as to load

546
00:16:50,060 --> 00:16:52,820
0,300 300,900 1050,1890 1890,2460 2460,2760
our guest kernel into and

547
00:16:52,820 --> 00:16:54,740
0,390 390,540 540,690 690,1380 1380,1920
run it in supervisor mode

548
00:16:55,880 --> 00:16:58,130
0,690 780,1320 1380,1710 1710,1950 1950,2250
somehow then our guest kernel

549
00:16:58,130 --> 00:16:58,820
0,120 120,300 300,450 450,630 630,690
will now be able to

550
00:16:58,820 --> 00:17:00,440
0,390 390,510 510,750 750,1110 1110,1620
modify the real page table

551
00:17:00,440 --> 00:17:01,640
0,270 270,750 750,870 870,1050 1050,1200
and would be able to

552
00:17:01,640 --> 00:17:03,620
0,630 630,810 810,960 960,1230 1230,1980
escape from its virtual machine.

553
00:17:03,980 --> 00:17:05,600
0,210 210,480 510,1080 1080,1230 1230,1620
Because it controls the contents

554
00:17:05,600 --> 00:17:08,400
0,60 60,750 1050,1740 1740,2250
of PTSD reason, right.

555
00:17:08,980 --> 00:17:11,590
0,600 1320,1620 1620,2040 2070,2400 2430,2610
Um any memory, so we

556
00:17:11,590 --> 00:17:14,200
0,450 930,1380 1380,1650 1650,2160 2160,2610
can't use a strategy that's

557
00:17:14,200 --> 00:17:16,300
0,210 210,600 600,780 780,1290 1440,2100
as simple as just running

558
00:17:16,390 --> 00:17:19,090
0,120 120,450 450,750 750,1380 2220,2700
the guest kernel directly instead

559
00:17:19,090 --> 00:17:19,900
0,90 90,210 210,270 270,570 570,810
we're going to start playing

560
00:17:19,900 --> 00:17:22,540
0,180 180,780 1440,2010 2040,2370 2370,2640
some tricks the first step

561
00:17:22,540 --> 00:17:24,260
0,240 240,750 750,1260
is to um.

562
00:17:24,650 --> 00:17:26,620
0,330 330,420 420,750 750,1380
Run the guest kernel.

563
00:17:26,920 --> 00:17:28,780
0,330 360,750 750,1320
In user mode.

564
00:17:32,240 --> 00:17:34,640
0,600 1080,1800
So, um.

565
00:17:35,200 --> 00:17:36,010
0,240 240,300 300,480 480,570 570,810
This is sort of the.

566
00:17:38,070 --> 00:17:40,710
0,720 810,1470 1470,1830 1890,2550 2550,2640
Fundamental strategy here when we're

567
00:17:40,710 --> 00:17:41,370
0,60 60,120 120,330 330,570 570,660
on the guest kernel and

568
00:17:41,370 --> 00:17:42,580
0,240 240,660
user mode.

569
00:17:42,770 --> 00:17:44,780
0,540 1350,1530 1530,1620 1620,1800 1800,2010
Um, you know in a

570
00:17:44,810 --> 00:17:46,790
0,390 390,720 720,1080 1080,1530 1650,1980
risk by user mode and

571
00:17:46,820 --> 00:17:48,880
0,210 210,390 390,570 570,1530
so what that means.

572
00:17:48,880 --> 00:17:50,440
0,300 300,480 480,900 990,1260 1260,1560
You know we're we're writing

573
00:17:50,440 --> 00:17:51,550
0,330 330,600 600,690 690,810 810,1110
our writing our own virtual

574
00:17:51,550 --> 00:17:53,410
0,330 330,960 1380,1590 1590,1740 1740,1860
machine monitor and when we

575
00:17:53,410 --> 00:17:54,400
0,240 240,300 300,510 510,750 750,990
tell it look please boot

576
00:17:54,400 --> 00:17:55,690
0,180 180,330 330,780 900,1170 1170,1290
X V six it's going

577
00:17:55,690 --> 00:17:56,740
0,60 60,390 390,600 600,720 720,1050
to load X V, six

578
00:17:56,740 --> 00:17:59,290
0,360 390,1110 1170,1950 1950,2160 2160,2550
is kernel instructions into memory

579
00:17:59,290 --> 00:18:00,360
0,600
somewhere.

580
00:18:00,480 --> 00:18:01,740
0,690
I'm.

581
00:18:02,120 --> 00:18:03,050
0,300 300,480 480,570 570,630 630,930
Maybe set up a page

582
00:18:03,050 --> 00:18:04,760
0,300 300,930 930,1170 1290,1620 1620,1710
table appropriately that makes it

583
00:18:04,760 --> 00:18:07,100
0,360 360,450 450,840 840,1230 1230,2340
look to xc sex like

584
00:18:07,130 --> 00:18:08,420
0,210 210,540 540,870 870,930 930,1290
its memory starts at zero

585
00:18:08,420 --> 00:18:10,160
0,180 180,390 390,750 750,1110 1230,1740
and goes up to whatever

586
00:18:10,190 --> 00:18:12,890
0,270 270,690 690,1050 1170,1710 2460,2700
high memory is a and

587
00:18:12,890 --> 00:18:15,170
0,510 720,840 840,1140 1140,1680 1710,2280
then the virtual machine monitor,

588
00:18:15,170 --> 00:18:16,760
0,150 150,450 450,630 720,1200 1200,1590
we use a trap us

589
00:18:16,760 --> 00:18:19,300
0,180 180,750 750,1440 1470,2100
read instruction as evolved.

590
00:18:19,300 --> 00:18:20,410
0,150 150,480 480,750 780,990 990,1110
Come across on aix v

591
00:18:20,410 --> 00:18:22,630
0,420 540,1080 1200,1740 1740,2070 2070,2220
six to a jump into

592
00:18:22,630 --> 00:18:24,880
0,90 90,360 360,1080 1080,1830 1890,2250
the first instruction of the

593
00:18:24,880 --> 00:18:26,760
0,420 420,1440
guest OS.

594
00:18:27,470 --> 00:18:28,720
0,510
I'm.

595
00:18:29,380 --> 00:18:32,020
0,600 720,1140 1140,1800 2220,2520 2520,2640
In user mode, so the

596
00:18:32,020 --> 00:18:33,490
0,300 300,660 660,930 930,1050 1050,1470
guest operating system will execute

597
00:18:33,490 --> 00:18:34,900
0,300 300,450 510,690 690,930 930,1410
along and now many instructions

598
00:18:34,900 --> 00:18:35,890
0,90 90,330 330,810 810,900 900,990
will work fine if the

599
00:18:35,890 --> 00:18:37,750
0,210 210,540 540,900 900,1230 1320,1860
guest operating systems just adding

600
00:18:37,750 --> 00:18:39,580
0,150 150,690 690,1350
two registers together.

601
00:18:39,640 --> 00:18:40,870
0,240 240,420 420,780 780,870 870,1230
Or even loading or storing

602
00:18:40,870 --> 00:18:42,100
0,120 120,420 420,630 630,870 870,1230
for memory that'll just work

603
00:18:42,370 --> 00:18:43,300
0,330 330,480 480,720 720,840 840,930
and as soon as the

604
00:18:43,300 --> 00:18:45,430
0,270 270,600 600,1170 1200,1590 1590,2130
guest operating system uses privilege

605
00:18:45,430 --> 00:18:47,380
0,750 780,1290 1290,1440 1440,1830 1830,1950
instruction, what's gonna happen is

606
00:18:47,380 --> 00:18:49,060
0,390 390,510 510,660 660,1410 1470,1680
it's going to trap the

607
00:18:49,090 --> 00:18:50,560
0,360 360,720 720,1140 1140,1230 1230,1470
risk five hard will cause

608
00:18:50,560 --> 00:18:51,820
0,150 330,600 600,720 720,1050 1050,1260
it since it's running in

609
00:18:51,850 --> 00:18:53,410
0,270 270,510 510,660 660,1230 1230,1560
user mode, not supervise mode

610
00:18:53,560 --> 00:18:54,520
0,210 210,420 420,510 510,600 600,960
will cause it to trap

611
00:18:54,520 --> 00:18:55,960
0,270 270,510 510,750 780,1140 1140,1440
back into the our virtual

612
00:18:55,960 --> 00:18:57,460
0,330 330,780 780,1140 1140,1260 1260,1500
machine monitor and will get

613
00:18:57,460 --> 00:18:59,110
0,570 990,1230 1230,1350 1350,1410 1410,1650
control, so if the guest

614
00:18:59,110 --> 00:19:00,850
0,360 360,840 840,1020 1020,1410 1410,1740
operating system, for example tries

615
00:19:00,850 --> 00:19:02,680
0,120 120,750 750,1170 1170,1590 1680,1830
to change sat p the

616
00:19:02,680 --> 00:19:05,350
0,270 270,570 570,1050 1230,2100 2370,2670
page table pointer boom there's

617
00:19:05,350 --> 00:19:06,640
0,270 270,660 660,780 780,1140 1140,1290
five CPU will trap into

618
00:19:06,640 --> 00:19:08,170
0,240 240,600 600,960 960,1350 1350,1530
our virtual machine monitor and

619
00:19:08,170 --> 00:19:09,520
0,180 180,660 660,780 780,960 960,1350
our software will get control

620
00:19:09,520 --> 00:19:10,300
0,450
back.

621
00:19:10,890 --> 00:19:11,640
0,150 150,270 270,540 540,600 600,750
And our software we're able

622
00:19:11,640 --> 00:19:12,990
0,60 60,510 660,840 840,1080 1080,1350
to look and see what

623
00:19:12,990 --> 00:19:15,660
0,750 990,1560 1560,1620 1620,2190 2250,2670
instruction caused the crap and

624
00:19:15,720 --> 00:19:18,180
0,330 330,660 660,1410 2130,2400 2400,2460
do something appropriate, but the

625
00:19:18,180 --> 00:19:19,260
0,240 240,420 420,780 780,960 960,1080
cool thing here is that

626
00:19:19,260 --> 00:19:20,580
0,60 60,300 300,630 630,990 990,1320
the guest operating system didn't

627
00:19:20,580 --> 00:19:22,530
0,360 360,780 990,1110 1110,1410 1410,1950
actually get to set the.

628
00:19:23,440 --> 00:19:25,210
0,270 270,540 540,900 1020,1350 1380,1770
Page table pointer, but how

629
00:19:25,210 --> 00:19:26,890
0,390 420,660 660,810 810,960 960,1680
does how does the vm

630
00:19:26,890 --> 00:19:29,380
0,1080 1080,1770 1770,2010 2010,2310 2340,2490
a intercept this like it

631
00:19:29,380 --> 00:19:30,670
0,270 270,360 360,750 750,870 870,1290
has to set the trap

632
00:19:30,670 --> 00:19:32,440
0,480 480,810 840,1140 1140,1410 1410,1770
handler right isn't that something

633
00:19:32,440 --> 00:19:33,730
0,210 210,300 300,780 780,1140 1140,1290
only a privileged process can

634
00:19:33,730 --> 00:19:35,560
0,330 570,1290
do b.

635
00:19:35,680 --> 00:19:37,750
0,720 720,960 960,1140 1140,1530 1530,2070
Vm is a user program

636
00:19:37,750 --> 00:19:38,860
0,180 180,270 270,750 750,750 750,1110
on the host O S

637
00:19:38,860 --> 00:19:40,720
0,240 240,540 570,870 870,960 960,1860
right okay when I'm assuming.

638
00:19:41,940 --> 00:19:43,110
0,480 510,690 690,780 780,1080 1080,1170
Um, what I'm assuming is

639
00:19:43,110 --> 00:19:44,490
0,150 150,300 300,600 600,870 870,1380
that the virtual machine monitor

640
00:19:44,760 --> 00:19:46,530
0,450 450,540 540,1140 1140,1410 1410,1770
runs in supervisor mode, so

641
00:19:46,710 --> 00:19:48,810
0,270 270,480 480,900 900,1440 1710,2100
in this simple picture, the

642
00:19:48,810 --> 00:19:50,520
0,270 270,570 570,1020 1140,1590 1590,1710
virtual machine monitor is the

643
00:19:50,520 --> 00:19:52,350
0,450 450,600 600,1050 1050,1500 1590,1830
kernel that boots on this

644
00:19:52,350 --> 00:19:53,700
0,210 210,300 300,960
piece of hardware.

645
00:19:53,700 --> 00:19:55,050
0,90 90,330 330,390 390,690 690,1350
So instead of booting Linux

646
00:19:55,050 --> 00:19:56,130
0,60 60,540 540,630 630,750 750,1080
or whatever you would boot

647
00:19:56,130 --> 00:19:58,080
0,360 390,690 690,1020 1020,1590 1710,1950
this virtual machine monitor, it

648
00:19:58,080 --> 00:19:59,370
0,240 240,330 330,900 900,1200 1200,1290
boosts in supervisor mode, it

649
00:19:59,370 --> 00:20:00,540
0,150 150,570 570,960 960,1110 1110,1170
has complete control over the

650
00:20:00,540 --> 00:20:02,250
0,540 960,1170 1170,1230 1230,1350 1350,1710
hardware, so we can set

651
00:20:02,250 --> 00:20:04,020
0,390 660,810 810,1020 1020,1440 1440,1770
up you know Steve eck

652
00:20:04,020 --> 00:20:04,980
0,90 90,210 210,360 360,570 570,960
and all this other stuff,

653
00:20:04,980 --> 00:20:06,540
0,330 330,450 450,1140
however it likes.

654
00:20:06,540 --> 00:20:09,450
0,150 150,390 390,810 1170,1890 1890,2910
That makes sense now and

655
00:20:09,450 --> 00:20:10,770
0,270 270,450 450,690 690,930 930,1320
actually some virtual machine monitors

656
00:20:10,770 --> 00:20:12,030
0,210 210,690 690,900 900,1140 1140,1260
work exactly that way, you

657
00:20:12,030 --> 00:20:12,690
0,180 180,360 360,510 510,600 600,660
just boot them on the

658
00:20:12,690 --> 00:20:14,280
0,540 540,690 690,1020 1200,1470 1470,1590
hardware and its just the

659
00:20:14,280 --> 00:20:15,780
0,270 270,540 540,930 930,1290 1290,1500
virtual machine monitor only that's

660
00:20:15,780 --> 00:20:18,150
0,270 270,390 390,960 960,1380 2160,2370
running in supervisor mode, in

661
00:20:18,150 --> 00:20:19,440
0,210 210,390 390,660 660,1050 1050,1290
fact there's also many many

662
00:20:19,440 --> 00:20:21,210
0,390 390,840 840,1200 1200,1380 1380,1770
virtual machines schemes out there,

663
00:20:21,210 --> 00:20:24,600
0,150 150,720 1050,2130 2130,3060
in fact boot Linux.

664
00:20:25,940 --> 00:20:27,080
0,180 180,330 330,660 660,1050 1050,1140
And then once Linux is

665
00:20:27,080 --> 00:20:30,140
0,180 180,330 330,930 1170,1920 2700,3060
up and running, um, you

666
00:20:30,140 --> 00:20:32,300
0,960 990,1260 1320,1680 1680,1740 1740,2160
load a load, the virtual

667
00:20:32,330 --> 00:20:35,750
0,270 270,990 1020,1410 1410,1980 3060,3420
either Linux actually Linux comes

668
00:20:35,750 --> 00:20:36,830
0,90 90,120 120,390 390,690 690,1080
with a virtual machine monitor,

669
00:20:36,830 --> 00:20:37,850
0,210 210,330 330,600 600,690 690,1020
or you load the virtual

670
00:20:37,850 --> 00:20:39,770
0,360 360,810 810,1290 1410,1740 1740,1920
machine monitor as what's called

671
00:20:39,770 --> 00:20:41,180
0,30 30,240 240,510 510,870 870,1410
a low double kernel module

672
00:20:41,390 --> 00:20:44,360
0,540 540,1440 1710,2160 2220,2490 2490,2970
into Linux and it runs

673
00:20:44,390 --> 00:20:45,890
0,210 210,270 270,660 660,870 870,1500
in the kernel in supervisor

674
00:20:45,890 --> 00:20:46,680
0,480
mode.

675
00:20:47,040 --> 00:20:48,120
0,300 300,450 450,870 870,960 960,1080
Um, and that's the way

676
00:20:48,120 --> 00:20:50,250
0,270 270,630 630,1260 1260,1680 1740,2130
actually today's paperwork says boot

677
00:20:50,250 --> 00:20:51,620
0,390 390,840
Linux then.

678
00:20:52,210 --> 00:20:53,500
0,270 270,480 480,780 900,1050 1050,1290
Run this little low double

679
00:20:53,500 --> 00:20:55,690
0,330 330,720 930,1260 1260,1560 1830,2190
kernel module, but the main

680
00:20:55,690 --> 00:20:56,620
0,180 180,270 270,360 360,630 630,930
point is the virtual machine

681
00:20:56,620 --> 00:20:58,000
0,330 330,840 840,930 930,1020 1020,1380
monitor software and the software

682
00:20:58,000 --> 00:20:59,860
0,510 510,630 630,750 750,1410 1440,1860
rewriting that we trust runs

683
00:20:59,860 --> 00:21:01,620
0,60 60,750 750,1260
in supervisor mode.

684
00:21:01,620 --> 00:21:02,130
0,90 90,180 180,300 300,360 360,510
Now we're going to run

685
00:21:02,130 --> 00:21:04,770
0,90 90,690 690,1260 1650,2160 2160,2640
the guest in user mode.

686
00:21:05,540 --> 00:21:06,680
0,150 150,810 840,990 990,1080 1080,1140
But arrange for it to

687
00:21:06,680 --> 00:21:07,460
0,210 210,360 360,480 480,690 690,780
look like it's running in

688
00:21:07,460 --> 00:21:08,960
0,570 570,990 1080,1230 1230,1380 1380,1500
supervisor mode as far as

689
00:21:08,960 --> 00:21:10,780
0,120 120,570
it's concerned.

690
00:21:12,540 --> 00:21:15,060
0,570 600,1080 1290,1860
Okay, so um.

691
00:21:15,150 --> 00:21:16,170
0,270 270,420 420,780 780,870 870,1020
The good news is that

692
00:21:16,170 --> 00:21:20,340
0,150 150,420 420,1290 1860,2730 2790,4170
on risk five everything dangerous,

693
00:21:20,640 --> 00:21:23,340
0,750 1470,2310 2310,2430 2430,2520 2520,2700
um traps, if you try

694
00:21:23,340 --> 00:21:24,660
0,120 120,300 300,510 510,780 780,1320
to do it in a.

695
00:21:25,630 --> 00:21:27,190
0,240 240,510 510,1020 1110,1320 1320,1560
A user mode that is

696
00:21:27,220 --> 00:21:28,390
0,390 390,510 510,690 690,750 750,1170
all the sort of privilege

697
00:21:28,390 --> 00:21:29,980
0,330 330,450 450,1110 1140,1500 1500,1590
things that supervisor node can

698
00:21:29,980 --> 00:21:32,800
0,510 600,1290 2190,2430 2430,2490 2490,2820
do with with the exception

699
00:21:32,800 --> 00:21:33,340
0,60 60,240 240,390 390,450 450,540
of stuff having to do

700
00:21:33,340 --> 00:21:34,360
0,90 90,150 150,450 450,870 870,1020
with the page table or

701
00:21:34,360 --> 00:21:35,500
0,510 510,630 630,720 720,930 930,1140
PDF which we'll talk about

702
00:21:35,500 --> 00:21:36,520
0,90 90,150 150,450 450,630 630,1020
in a bit, but basically

703
00:21:36,520 --> 00:21:38,350
0,240 240,600 600,900 900,1590 1590,1830
every pre every supervisor only

704
00:21:38,350 --> 00:21:40,640
0,1080
instruction.

705
00:21:40,880 --> 00:21:42,200
0,270 270,690 690,720 720,1170 1170,1320
A causes a trap, if

706
00:21:42,200 --> 00:21:43,880
0,360 450,900 900,990 990,1530 1530,1680
you try to execute in

707
00:21:43,880 --> 00:21:45,140
0,270 270,720
user mode.

708
00:21:45,140 --> 00:21:45,800
0,150 150,240 240,360 360,510 510,660
So that means that every

709
00:21:45,800 --> 00:21:46,580
0,120 120,210 210,360 360,630 630,780
time they gotta stop running

710
00:21:46,580 --> 00:21:47,840
0,270 270,420 420,720 720,960 960,1260
system does anything like {reads's

711
00:21:47,840 --> 00:21:49,340
0,210 210,690 690,810 810,1170 1170,1500
-} cause or reason writes

712
00:21:49,340 --> 00:21:50,480
0,390 390,690 690,750 750,930 930,1140
St back or does any

713
00:21:50,480 --> 00:21:52,100
0,60 60,300 300,750 750,990 1380,1620
of those things that ex

714
00:21:52,100 --> 00:21:53,180
0,150 150,420 420,510 510,810 810,1080
v six for example does

715
00:21:53,180 --> 00:21:55,250
0,300 300,750 750,1080 1080,1320 1500,2070
to configure with the privileged

716
00:21:55,250 --> 00:21:56,420
0,180 180,240 240,480 480,720 720,1170
part of verse five hardware

717
00:21:56,480 --> 00:21:57,620
0,210 210,420 420,480 480,870 870,1140
will cause a trap into

718
00:21:57,620 --> 00:22:00,290
0,120 120,390 390,690 690,1170 2370,2670
the virtual machine monitor and

719
00:22:00,290 --> 00:22:01,600
0,270 270,360 360,840
book at control.

720
00:22:01,950 --> 00:22:04,040
0,180 180,630 810,1530
And then, um.

721
00:22:04,070 --> 00:22:04,880
0,180 180,480 480,630 630,750 750,810
The game is going to

722
00:22:04,880 --> 00:22:06,500
0,120 120,420 420,690 690,1080 1080,1620
be the virtual machine monitor

723
00:22:06,920 --> 00:22:09,650
0,270 270,540 540,930 960,1980 2370,2730
is going to maintain a

724
00:22:09,680 --> 00:22:12,380
0,690 690,1530 1770,1890 1890,2160 2160,2700
virtual state a whole table

725
00:22:12,380 --> 00:22:15,460
0,90 90,480 480,840 840,1710
of virtual state information.

726
00:22:15,810 --> 00:22:17,140
0,780
I'm.

727
00:22:18,450 --> 00:22:20,480
0,900 930,1530
For f.

728
00:22:21,240 --> 00:22:22,660
0,570
HMM.

729
00:22:24,130 --> 00:22:25,930
0,360 360,600 600,690 690,1320 1350,1800
Um, for the guest, so

730
00:22:26,200 --> 00:22:27,550
0,240 240,540 540,870 870,1200 1200,1350
the virtual machine monitor will

731
00:22:27,550 --> 00:22:29,980
0,330 330,450 450,1080 1380,1890 2070,2430
have for example a and

732
00:22:30,790 --> 00:22:34,180
0,750 750,1440 1440,1920 1920,2430 2670,3390
es virtual St, vac register

733
00:22:34,180 --> 00:22:36,190
0,300 330,990 990,1200 1200,1410 1500,2010
just implemented, that's a variable

734
00:22:36,190 --> 00:22:38,590
0,60 60,570 570,690 690,1470 1470,2400
in software and a virtual.

735
00:22:39,360 --> 00:22:42,180
0,660 810,1230 1230,1950 1950,2640 2640,2820
{Um's -} epc register and

736
00:22:42,210 --> 00:22:43,500
0,270 270,450 450,690 690,900 900,1290
all these for all these

737
00:22:43,500 --> 00:22:45,030
0,420 420,1020 1020,1170 1170,1260 1260,1530
protected registers there's a whole

738
00:22:45,030 --> 00:22:46,440
0,420 420,540 540,720 720,990 990,1410
array of them down here

739
00:22:46,590 --> 00:22:48,000
0,570 570,690 690,810 810,1110 1110,1410
implemented by the virtual machine

740
00:22:48,000 --> 00:22:49,260
0,480 630,840 840,930 930,1020 1020,1260
monitor and when the guest

741
00:22:49,260 --> 00:22:51,300
0,420 420,750 750,870 870,1320 1380,2040
operating system, for example runs

742
00:22:51,300 --> 00:22:52,920
0,90 90,630 630,840 930,1470 1470,1620
the instruction that reads one

743
00:22:52,920 --> 00:22:54,630
0,60 60,270 270,1050 1170,1560 1560,1710
of these registers boom it'll

744
00:22:54,630 --> 00:22:55,860
0,150 150,180 180,570 570,810 810,1230
take a trap because it's

745
00:22:55,890 --> 00:22:58,020
0,600 600,840 840,1380 1560,1800 1800,2130
legal user space, the virtual

746
00:22:58,020 --> 00:22:59,310
0,300 300,630 630,750 750,1230 1230,1290
machine monitor will inspect the

747
00:22:59,310 --> 00:23:01,380
0,660 720,870 870,1110 1110,1530 1680,2070
instruction and say aha, that's

748
00:23:01,380 --> 00:23:03,060
0,90 90,540 540,900 930,1470 1470,1680
an instruction, that's reading the

749
00:23:03,060 --> 00:23:05,310
0,630 630,1230 1620,1920 1920,2100 2100,2250
CPC register, um and so

750
00:23:05,310 --> 00:23:06,540
0,210 210,480 480,750 750,1080 1080,1230
the virtual machine monitor will

751
00:23:06,540 --> 00:23:08,850
0,360 660,1290 1290,1470 1470,2100 2160,2310
then emulate that instruction, it

752
00:23:08,850 --> 00:23:11,190
0,240 270,630 630,840 840,1290 1530,2340
will read the CPC virtual

753
00:23:11,190 --> 00:23:13,200
0,780 780,1380 1560,1770 1770,1830 1830,2010
CPC value out of this

754
00:23:13,200 --> 00:23:14,060
0,570
array.

755
00:23:14,640 --> 00:23:16,980
0,480 720,1290 1320,1920 1920,2130 2130,2340
Um, it'll copy that into

756
00:23:16,980 --> 00:23:20,610
0,240 240,1110 1530,2100 2460,2910 3390,3630
the hardware, um, well what

757
00:23:20,610 --> 00:23:22,230
0,210 210,510 510,870 1170,1440 1440,1620
really happened here is that

758
00:23:22,230 --> 00:23:23,620
0,660
the.

759
00:23:26,750 --> 00:23:28,260
0,810
I'm.

760
00:23:28,500 --> 00:23:29,490
0,330 330,540 540,630 630,870 870,990
I forget the name of

761
00:23:29,490 --> 00:23:33,460
0,2100 2670,3330
zia, I'm.

762
00:23:34,400 --> 00:23:36,140
0,420 420,810 810,1410 1410,1530 1530,1740
There's some instruction whose name

763
00:23:36,140 --> 00:23:37,490
0,60 60,450 450,660 660,810 810,1350
I forget, which is basically

764
00:23:37,490 --> 00:23:40,340
0,840 840,1410 1890,2340 2340,2580 2580,2850
supervisor read, um, although that's

765
00:23:40,340 --> 00:23:41,060
0,150 150,270 270,510 510,630 630,720
not its name and you

766
00:23:41,060 --> 00:23:41,750
0,210 210,300 300,510 510,600 600,690
give the name of an

767
00:23:41,750 --> 00:23:43,220
0,420 420,1050 1050,1200 1200,1260 1260,1470
ordinary register and the name

768
00:23:43,220 --> 00:23:44,660
0,90 90,210 210,600 600,1230 1230,1440
of a privilege fester like

769
00:23:44,660 --> 00:23:46,880
0,510 510,990 1410,1650 1650,1890 1920,2220
sep, c and so what

770
00:23:46,880 --> 00:23:48,560
0,90 90,810 810,1320 1320,1440 1440,1680
the virtual track, the virtual

771
00:23:48,560 --> 00:23:49,730
0,360 360,660 660,780 780,1020 1020,1170
machine monitor will read that

772
00:23:49,730 --> 00:23:51,040
0,810
instruction.

773
00:23:51,040 --> 00:23:52,090
0,270 270,480 480,780 780,930 930,1050
Um, we'll see, oh, it's

774
00:23:52,090 --> 00:23:54,010
0,90 90,330 330,660 870,1470 1470,1920
an s read virtual machine

775
00:23:54,010 --> 00:23:55,510
0,390 390,510 510,900 900,1050 1050,1500
monitor will copy the virtual

776
00:23:55,510 --> 00:23:58,630
0,390 390,570 570,1530 2370,2880 2880,3120
copy of CBC into a

777
00:23:58,630 --> 00:24:00,190
0,510 510,600 600,690 690,1020 1020,1560
zero in the trap frame,

778
00:24:00,640 --> 00:24:02,020
0,360 360,480 480,810 930,1290 1290,1380
after all when entering the

779
00:24:02,020 --> 00:24:03,380
0,540 540,930
Vietnam that's.

780
00:24:03,530 --> 00:24:05,210
0,390 390,720 720,1200 1200,1290 1290,1680
Gonna have created a trap

781
00:24:05,210 --> 00:24:06,560
0,360 360,750 750,870 870,1080 1080,1350
frame copies of all the

782
00:24:07,070 --> 00:24:08,450
0,270 270,810 810,900 900,990 990,1380
guests registers that will copy

783
00:24:08,450 --> 00:24:10,040
0,300 330,930 930,1140 1140,1500 1500,1590
this CPC into acer in

784
00:24:10,040 --> 00:24:11,840
0,60 60,390 390,840 1020,1380 1380,1800
the trap frame, then return

785
00:24:11,840 --> 00:24:13,910
0,150 150,210 210,720 900,1650 1770,2070
from the trap using s

786
00:24:13,910 --> 00:24:14,800
0,390
ret.

787
00:24:15,250 --> 00:24:16,380
0,510
I'm.

788
00:24:17,000 --> 00:24:18,860
0,180 180,480 870,1320 1320,1800 1800,1860
You know, after copying the

789
00:24:18,860 --> 00:24:20,150
0,270 270,480 480,990 990,1080 1080,1290
trap frame registers the real

790
00:24:20,150 --> 00:24:22,250
0,810 810,1170 1170,1590 1590,1800 1800,2100
registers and return from this,

791
00:24:22,250 --> 00:24:23,180
0,390
um.

792
00:24:23,500 --> 00:24:25,150
0,630 630,720 720,810 810,1320 1320,1650
Trap to the instruction after

793
00:24:25,150 --> 00:24:26,710
0,150 150,600 600,720 720,1200 1200,1560
the estuary and continue reading

794
00:24:26,710 --> 00:24:28,570
0,240 240,450 450,960 1170,1590 1620,1860
there with now A F

795
00:24:28,600 --> 00:24:30,190
0,180 180,660 660,1110 1110,1230 1230,1590
A zero set to the.

796
00:24:31,250 --> 00:24:33,740
0,480 630,1260 1260,1920
A virtual CPC.

797
00:24:33,950 --> 00:24:35,870
0,450 990,1290 1290,1380 1380,1620 1620,1920
I'm now the guest operating

798
00:24:35,870 --> 00:24:38,120
0,300 300,390 390,1230 1710,1920 1920,2250
system will proceed you know

799
00:24:38,420 --> 00:24:39,980
0,480 480,690 690,1200 1200,1320 1320,1560
bottom not realizing that something

800
00:24:39,980 --> 00:24:42,380
0,270 270,630 630,1050 2010,2340 2340,2400
funny happened here, but it

801
00:24:42,380 --> 00:24:43,850
0,150 150,270 270,630 630,990 990,1470
will have gotten a copy

802
00:24:43,850 --> 00:24:46,490
0,150 150,510 720,1650 1830,2220 2220,2640
of the virtual se PC

803
00:24:46,490 --> 00:24:47,630
0,180 180,300 300,660 660,810 810,1140
that the vm was keeping

804
00:24:47,630 --> 00:24:48,880
0,90 90,240 240,810
on its behalf.

805
00:24:50,500 --> 00:24:51,640
0,150 150,300 300,660 660,870 870,1140
So any questions about this,

806
00:24:51,640 --> 00:24:54,040
0,360 750,1050 1050,1170 1170,1830
um about this strategy.

807
00:24:58,400 --> 00:25:00,740
0,540 540,780 780,1020 1020,1590 1590,2340
How does the vm differentiate

808
00:25:00,740 --> 00:25:03,380
0,660 750,1500 1500,2190
between different guests.

809
00:25:04,880 --> 00:25:07,460
0,360 360,630 630,930 1020,1620 1740,2580
Um, it, it, um, it's

810
00:25:07,460 --> 00:25:09,500
0,420 420,510 510,900 900,1290 1290,2040
basically the same way it

811
00:25:09,500 --> 00:25:10,730
0,180 180,570 600,990 990,1050 1050,1230
would keep one of these

812
00:25:10,730 --> 00:25:12,470
0,420 420,510 510,870 870,1380 1470,1740
tables of virtual state per

813
00:25:12,470 --> 00:25:14,390
0,660 1050,1230 1230,1320 1320,1530 1530,1920
guest and it just knows

814
00:25:14,390 --> 00:25:15,200
0,150 150,270 270,450 450,570 570,810
just like ex v six

815
00:25:15,200 --> 00:25:16,640
0,360 360,570 570,990 990,1140 1140,1440
knows which process is running

816
00:25:16,640 --> 00:25:18,170
0,210 210,360 360,930 930,1170 1170,1530
as a variable maybe upper

817
00:25:18,170 --> 00:25:20,030
0,360 360,840 840,1320 1440,1800 1800,1860
core variable saying here's the

818
00:25:20,030 --> 00:25:21,780
0,390 390,480 480,870 870,1260
process, I'm currently running.

819
00:25:22,260 --> 00:25:23,760
0,660 660,720 720,960 960,1170 1170,1500
Similarly, a Viet Nam would.

820
00:25:24,890 --> 00:25:26,360
0,330 330,690 690,840 840,1320 1320,1470
A perk or variable that

821
00:25:26,360 --> 00:25:28,070
0,450 450,660 660,960 960,1590 1620,1710
indicated which virtual machine it

822
00:25:28,070 --> 00:25:29,780
0,90 90,330 390,990 990,1110 1110,1710
will be multiple of these

823
00:25:30,440 --> 00:25:32,540
0,420 420,1050 1080,1590 1590,1710 1710,2100
state structures, Vietnam would know

824
00:25:32,600 --> 00:25:33,980
0,240 240,480 480,780 780,900 900,1380
which virtual machine was executing

825
00:25:33,980 --> 00:25:34,460
0,90 90,150 150,270 270,420 420,480
and I would look in

826
00:25:34,460 --> 00:25:36,920
0,90 90,720 1170,1740 1740,2130 2130,2460
the appropriate virtual machine state

827
00:25:36,920 --> 00:25:38,040
0,660
structure.

828
00:25:38,040 --> 00:25:39,600
0,240 240,1110
A defined.

829
00:25:39,810 --> 00:25:42,060
0,840 1140,1530 1530,1920 1920,1950 1950,2250
St, se PC or whatever

830
00:25:42,060 --> 00:25:43,480
0,90 90,390 390,630 630,900
it is looking for.

831
00:25:43,480 --> 00:25:46,000
0,300 300,390 390,750 750,1740 1740,2520
Can it run multiple, um,

832
00:25:46,300 --> 00:25:48,190
0,240 240,360 390,870 870,1350 1350,1890
can I assign multiple course

833
00:25:48,190 --> 00:25:49,630
0,120 120,450 450,570 570,720 720,1440
to one of the guests,

834
00:25:49,810 --> 00:25:52,090
0,300 300,1350 1350,1590 1590,1830 1830,2280
yes sophisticated virtual machine monitors

835
00:25:52,090 --> 00:25:53,760
0,90 90,240 240,600 660,1200
can do that, yes.

836
00:25:56,870 --> 00:25:59,690
0,630 630,990 1140,1500 1950,2460 2460,2820
Sorry, sorry, sorry oh sorry

837
00:25:59,720 --> 00:26:01,820
0,300 300,630 630,1050 1050,1440 1440,2100
so the guest operating system,

838
00:26:02,150 --> 00:26:04,190
0,180 180,360 360,960 1200,1800 1830,2040
it will have like some

839
00:26:04,190 --> 00:26:06,980
0,840 1200,1500 1500,1680 1680,2280 2280,2790
registers in the actual hardware

840
00:26:06,980 --> 00:26:08,690
0,300 300,780 960,1110 1110,1530 1530,1710
will be the registers that

841
00:26:08,690 --> 00:26:10,850
0,150 150,480 480,810 810,1380 1560,2160
the guest us us so

842
00:26:11,240 --> 00:26:12,710
0,420 420,690 690,780 780,1200 1200,1470
why do we not use

843
00:26:12,710 --> 00:26:14,540
0,180 180,750 750,1110 1110,1590 1590,1830
the actual se PC but

844
00:26:14,540 --> 00:26:16,220
0,210 210,300 300,810 810,1290
use a virtual one.

845
00:26:17,180 --> 00:26:18,620
0,720
I'm.

846
00:26:23,810 --> 00:26:25,190
0,600 600,930 930,1080 1080,1260 1260,1380
The reason is that the

847
00:26:25,190 --> 00:26:26,630
0,270 270,570 570,930 930,1320 1320,1440
virtual machine monitor needs to

848
00:26:26,630 --> 00:26:27,860
0,210 210,390 390,930 930,1170 1170,1230
use these registers used to

849
00:26:27,860 --> 00:26:30,440
0,330 330,510 510,840 840,1920 2400,2580
use the real registers so

850
00:26:30,440 --> 00:26:31,460
0,60 60,390 390,570 570,870 870,1020
for example think {about's -}

851
00:26:31,460 --> 00:26:32,740
0,810
cause.

852
00:26:33,280 --> 00:26:35,320
0,420 420,510 510,840 840,1740 1800,2040
When a trap occurs what

853
00:26:35,320 --> 00:26:36,340
0,270 270,600 630,840 840,960 960,1020
happens on when you know

854
00:26:36,340 --> 00:26:37,600
0,150 150,210 210,390 390,720 720,1260
when the s operating system

855
00:26:38,590 --> 00:26:40,180
0,270 270,330 330,600 690,1140 1140,1590
tries to do anything, privilege,

856
00:26:40,180 --> 00:26:41,320
0,90 90,390 390,480 480,930 960,1140
the trap will occur and

857
00:26:41,320 --> 00:26:43,450
0,60 60,900 990,1350 1350,1560 1560,2130
the hardware sets the real

858
00:26:43,450 --> 00:26:45,760
0,810 840,1140 1140,1560 1560,2190 2220,2310
{hardware's -} cause register to

859
00:26:45,760 --> 00:26:46,810
0,90 90,390 390,450 450,510 510,1050
the cause of the trap.

860
00:26:47,510 --> 00:26:49,670
0,450 450,750 750,1200 1200,1860 1890,2160
Which is illegal instruction or

861
00:26:49,670 --> 00:26:52,190
0,660 660,1320 1650,2040 2040,2130 2130,2520
unprivileged instruction whatever it is,

862
00:26:52,250 --> 00:26:55,660
0,600 720,1260 1260,1740 2100,2850
but if the um.

863
00:26:55,660 --> 00:26:57,610
0,330 330,810 810,1470 1680,1830 1830,1950
Guest operating system, you know

864
00:26:57,640 --> 00:26:58,870
0,300 300,390 390,570 570,930 930,1230
supposing the guest operating system

865
00:26:58,870 --> 00:26:59,950
0,120 120,330 330,570 570,630 630,1080
has just taken a system

866
00:26:59,950 --> 00:27:01,180
0,660
call.

867
00:27:01,210 --> 00:27:03,100
0,270 270,390 390,810 810,1110 1110,1890
From a guest user process,

868
00:27:03,190 --> 00:27:04,990
0,330 330,600 600,1050 1050,1470 1470,1800
the guest operating system needs

869
00:27:04,990 --> 00:27:06,850
0,120 120,660 660,780 780,1050 1050,1860
to see {an's -} cause

870
00:27:06,940 --> 00:27:08,800
0,690 780,1380 1380,1470 1470,1710 1710,1860
that's {whatever -} the REIT's

871
00:27:08,800 --> 00:27:10,180
0,270 270,630 630,810 810,960 960,1380
core value is for system

872
00:27:10,180 --> 00:27:11,140
0,390
call.

873
00:27:12,430 --> 00:27:13,720
0,330 360,720 720,960 960,1170 1170,1290
Right, even though maybe the

874
00:27:13,720 --> 00:27:14,620
0,360 360,510 510,630 630,750 750,900
last thing that you know,

875
00:27:14,620 --> 00:27:16,990
0,300 810,1110 1140,1530 1620,2040 2040,2370
so the the guest operating

876
00:27:16,990 --> 00:27:17,860
0,270 270,360 360,480 480,600 600,870
system is going to read

877
00:27:17,860 --> 00:27:19,420
0,180 180,1080
s cause.

878
00:27:21,280 --> 00:27:22,510
0,570 750,990 990,1080 1080,1170 1170,1230
Um, you know in the

879
00:27:22,510 --> 00:27:23,530
0,330 330,570 570,720 720,870 870,1020
trap hand and what it

880
00:27:23,530 --> 00:27:24,760
0,240 240,420 420,510 510,840 840,1230
thinks is the trap handler

881
00:27:24,760 --> 00:27:26,860
0,390 390,690 1350,1740 1740,1950 1950,2100
handling a system call from

882
00:27:26,860 --> 00:27:28,990
0,150 150,240 240,750 990,1410 1410,2130
one of its guest processes,

883
00:27:29,050 --> 00:27:30,010
0,240 240,390 390,690 690,870 870,960
{the's -} calls that the

884
00:27:30,010 --> 00:27:31,630
0,270 270,600 600,990 1050,1530 1530,1620
guest operating system needs to

885
00:27:31,630 --> 00:27:32,980
0,600 630,810 810,900 900,1230 1230,1350
see is the value that

886
00:27:32,980 --> 00:27:34,840
0,540 630,780 780,1050 1050,1440 1440,1860
says that means system call.

887
00:27:35,340 --> 00:27:36,840
0,540 570,810 810,1080 1080,1380 1380,1500
But {the's -} cause is

888
00:27:36,840 --> 00:27:37,500
0,120 120,180 180,330 330,450 450,660
going to {be -} the

889
00:27:37,500 --> 00:27:39,810
0,180 180,480 480,1170 1380,1770 1770,2310
{real's -} cause register is

890
00:27:39,900 --> 00:27:41,490
0,210 210,540 540,660 660,1170 1200,1590
the's cause, that means illegal

891
00:27:41,490 --> 00:27:43,770
0,570 570,720 720,1470 1500,1830 2100,2280
instruction or unprivileged, or you

892
00:27:43,770 --> 00:27:45,900
0,210 450,1110 1110,1620 1620,1710 1710,2130
know instructions violating the privilege

893
00:27:45,900 --> 00:27:48,740
0,600 720,1170 1710,2310
rules, so I'm.

894
00:27:49,360 --> 00:27:51,670
0,780 780,1140 1140,1530 1530,1890 1890,2310
Yeah, there are actually some

895
00:27:51,670 --> 00:27:53,680
0,570 570,780 780,900 900,1320
times when you could.

896
00:27:53,680 --> 00:27:56,080
0,600 840,1140 1290,1680 1710,1890 1890,2400
Um, well anyway, in general

897
00:27:56,500 --> 00:27:59,380
0,570 780,1440 1440,2550
the VIA men.

898
00:27:59,960 --> 00:28:01,010
0,60 60,600 600,780 780,870 870,1050
The vm is the one

899
00:28:01,010 --> 00:28:01,580
0,120 120,270 270,360 360,450 450,570
that needs to see the

900
00:28:01,580 --> 00:28:03,080
0,600 630,1050 1050,1230 1230,1350 1350,1500
real Vietnam needs to see

901
00:28:03,080 --> 00:28:04,580
0,300 300,780 780,870 870,1260 1260,1500
different values in the real

902
00:28:04,580 --> 00:28:06,800
0,570 570,750 750,960 1140,1680 1680,2220
registers than the operating system

903
00:28:06,890 --> 00:28:08,840
0,270 270,480 480,720 960,1320 1710,1950
should see it in its

904
00:28:08,840 --> 00:28:10,500
0,270 270,330 330,420 420,1170
vision of the registers.

905
00:28:11,950 --> 00:28:13,060
0,180 180,270 270,390 390,780 780,1110
Does that make sense, thank

906
00:28:13,060 --> 00:28:15,460
0,210 210,660
you yeah.

907
00:28:17,270 --> 00:28:19,760
0,450 750,1290 1920,2190 2190,2370 2370,2490
Okay, um, so this is

908
00:28:19,760 --> 00:28:20,690
0,210 210,300 300,600 600,720 720,930
called the name for this

909
00:28:20,690 --> 00:28:23,630
0,780 810,1500 1530,1950 2070,2580 2580,2940
style of a virtual machine

910
00:28:23,630 --> 00:28:24,830
0,600 600,660 660,810 810,900 900,1200
implementation in which the guest

911
00:28:24,830 --> 00:28:26,480
0,210 210,330 330,690 690,1170 1500,1650
runs at user level and

912
00:28:26,480 --> 00:28:28,820
0,270 270,1260 1410,1740 1740,2070 2070,2340
therefore traps whenever tries to

913
00:28:28,850 --> 00:28:30,140
0,360 360,630 630,1140 1140,1230 1230,1290
do anything privileged and the

914
00:28:30,140 --> 00:28:32,000
0,390 390,630 660,1350 1350,1470 1470,1860
vm can emulate the privileged

915
00:28:32,000 --> 00:28:33,470
0,570 750,1110 1110,1170 1170,1380 1380,1470
instruction and the name for

916
00:28:33,470 --> 00:28:35,030
0,180 180,510 540,960 1050,1410 1410,1560
that is a trap and

917
00:28:35,030 --> 00:28:36,060
0,630
emulate.

918
00:28:36,400 --> 00:28:37,580
0,570
I'm.

919
00:28:38,290 --> 00:28:40,990
0,360 780,1170 1290,1530 1530,2070 2070,2700
And, um, it's nice because,

920
00:28:41,200 --> 00:28:42,250
0,240 240,420 420,720 780,930 930,1050
um you can, you can

921
00:28:42,250 --> 00:28:43,540
0,240 240,390 390,510 510,1020 1020,1290
build this for yourself, actually

922
00:28:43,540 --> 00:28:44,290
0,150 150,270 270,480 480,630 630,750
you can build this for

923
00:28:44,290 --> 00:28:47,110
0,600 600,1080 1080,1200 1200,1980 2250,2820
yourselves entirely in software, and

924
00:28:47,950 --> 00:28:48,940
0,180 180,300 300,720 720,870 870,990
you could modify X V,

925
00:28:48,940 --> 00:28:50,110
0,240 240,360 360,810 810,930 930,1170
six, for example to be

926
00:28:50,110 --> 00:28:52,450
0,120 120,390 390,690 690,1350 1740,2340
a virtual machine monitor on

927
00:28:52,450 --> 00:28:53,860
0,240 240,780
risk five.

928
00:28:53,860 --> 00:28:55,600
0,270 270,450 450,720 720,1110 1110,1740
Run little virtual machines, perhaps

929
00:28:55,630 --> 00:28:59,560
0,390 390,1170 2190,3510 3510,3690 3690,3930
regular x86 just by writing

930
00:28:59,560 --> 00:29:00,940
0,480 480,600 600,1020 1020,1230 1230,1380
software or software does have

931
00:29:00,940 --> 00:29:02,380
0,120 120,420 420,810
to run in.

932
00:29:02,410 --> 00:29:05,640
0,780 780,1080
Supervisor mode.

933
00:29:06,010 --> 00:29:07,240
0,570
I'm.

934
00:29:07,330 --> 00:29:09,310
0,390 390,810 810,1470 1560,1740 1740,1980
The state here a all

935
00:29:09,310 --> 00:29:10,240
0,90 90,540 540,630 630,810 810,930
the registers that begin with

936
00:29:10,240 --> 00:29:13,000
0,390 390,510 510,1050 1080,1500 2100,2760
s all those a supervisor

937
00:29:13,000 --> 00:29:15,760
0,330 330,1050 2310,2550 2550,2640 2640,2760
control registers have to be

938
00:29:15,760 --> 00:29:17,260
0,300 300,360 360,510 510,930 930,1500
part of this virtual state,

939
00:29:17,470 --> 00:29:18,640
0,240 240,510 510,660 660,870 870,1170
there's also some other things

940
00:29:18,640 --> 00:29:21,040
0,120 120,360 660,1080 1080,1620 1620,2400
that are not directly accessible.

941
00:29:22,020 --> 00:29:23,940
0,360 360,690 690,990 990,1260 1260,1920
I'm from those s registers

942
00:29:23,940 --> 00:29:24,990
0,210 210,750 750,900 900,960 960,1050
that nevertheless need to be

943
00:29:24,990 --> 00:29:26,100
0,210 210,270 270,390 390,780 810,1110
down in this state, one

944
00:29:26,100 --> 00:29:27,090
0,60 60,150 150,270 270,360 360,990
of them is the mode,

945
00:29:27,120 --> 00:29:28,290
0,210 210,510 510,870 870,1050 1050,1170
the virtual machine on a

946
00:29:28,290 --> 00:29:29,610
0,240 240,330 330,630 630,990 990,1320
needs to know whether the

947
00:29:29,640 --> 00:29:31,950
0,390 390,840 840,1170 1170,1530 1590,2310
virtual machines running in a

948
00:29:31,950 --> 00:29:34,230
0,480 480,780 780,1350 1380,1830 1980,2280
guest user mode or a

949
00:29:34,230 --> 00:29:36,090
0,330 330,720 720,1050 1050,1650 1680,1860
guest operating system because for

950
00:29:36,090 --> 00:29:38,460
0,540 600,1140 1380,1830
example if a.

951
00:29:38,460 --> 00:29:40,440
0,270 270,480 480,810 810,1170 1170,1980
Yo, if user code executes

952
00:29:40,440 --> 00:29:41,850
0,120 120,480 480,930 930,1140 1140,1410
the privileged instruction like trying

953
00:29:41,850 --> 00:29:43,230
0,60 60,270 270,480 480,1110 1140,1380
to read s cause sure

954
00:29:43,230 --> 00:29:44,070
0,210 210,360 360,420 420,690 690,840
that'll cause a trap into

955
00:29:44,070 --> 00:29:45,570
0,90 90,540 540,1020 1110,1440 1440,1500
the vm too, but in

956
00:29:45,570 --> 00:29:46,710
0,210 210,390 390,480 480,900 900,1140
that case, the vm should

957
00:29:46,710 --> 00:29:48,000
0,660
not.

958
00:29:48,000 --> 00:29:49,410
0,300 300,720 720,810 810,1320 1320,1410
Just emulate the instruction in

959
00:29:49,410 --> 00:29:51,030
0,540 720,1260 1290,1470 1470,1590 1590,1620
return because that's not a

960
00:29:51,030 --> 00:29:52,350
0,270 270,750 750,840 840,1050 1050,1320
legal instruction in user mode,

961
00:29:52,350 --> 00:29:53,250
0,120 120,180 180,540 540,750 750,900
so the vm has to

962
00:29:53,250 --> 00:29:56,340
0,630 2010,2430 2430,2550 2550,2940 2940,3090
track whether the guest is

963
00:29:56,340 --> 00:29:58,380
0,420 780,1110 1110,1680 1680,1950 1950,2040
in guest supervisor mode, a

964
00:29:58,380 --> 00:29:59,460
0,330 330,570 570,840 840,960 960,1080
guest user mode and so

965
00:29:59,460 --> 00:29:59,970
0,150 150,270 270,330 330,450 450,510
there's going to be a

966
00:29:59,970 --> 00:30:02,700
0,690 750,1320 1320,1590 1590,2010 2370,2730
mode slot down here as

967
00:30:02,700 --> 00:30:03,990
0,390 480,720 720,810 810,1200 1200,1290
well and the vm will

968
00:30:03,990 --> 00:30:05,260
0,240 240,630
know because.

969
00:30:05,920 --> 00:30:07,840
0,210 210,300 300,780 810,1320 1320,1920
When the guest operating system

970
00:30:07,870 --> 00:30:10,120
0,570 570,1050 1410,1650 1650,1920 1920,2250
jumps into a user space,

971
00:30:10,120 --> 00:30:11,590
0,180 180,660 660,960 990,1290 1290,1470
it'll execute {the's {-} -}

972
00:30:11,590 --> 00:30:12,910
0,540 540,720 720,930 930,1110 1110,1320
read instruction's red is a

973
00:30:12,940 --> 00:30:14,500
0,390 390,990 990,1140 1140,1230 1230,1560
privilege instruction, so the vm

974
00:30:14,500 --> 00:30:15,670
0,120 120,390 390,570 570,960 960,1170
will actually get control there

975
00:30:15,670 --> 00:30:16,990
0,120 120,210 210,420 450,900 1020,1320
and we'll see, oh the

976
00:30:16,990 --> 00:30:17,740
0,180 180,300 300,510 510,570 570,750
guest is running an s

977
00:30:17,740 --> 00:30:19,660
0,120 120,780 1170,1470 1470,1650 1650,1920
read instruction, among other things

978
00:30:19,660 --> 00:30:21,040
0,90 90,240 240,690 690,960 990,1380
I'm gonna change the virtual

979
00:30:21,040 --> 00:30:23,140
0,420 420,810 840,1590 1590,1740 1740,2100
mode from supervisor to use.

980
00:30:24,030 --> 00:30:25,340
0,720
HMM.

981
00:30:25,490 --> 00:30:27,290
0,240 240,780 810,1410 1410,1680 1680,1800
And another hidden piece of

982
00:30:27,290 --> 00:30:29,540
0,570 900,1320 1320,1380 1380,1740 1740,2250
state eyes the heart number.

983
00:30:30,550 --> 00:30:32,290
0,300 300,480 480,780 780,1230 1230,1740
That is the core number.

984
00:30:34,250 --> 00:30:35,990
0,180 180,540 540,750 750,1200 1200,1740
You can't get that directly

985
00:30:35,990 --> 00:30:37,490
0,240 240,390 390,480 480,840 840,1500
even with the privileged instruction,

986
00:30:37,910 --> 00:30:40,400
0,510 1440,1950 1980,2160 2160,2280 2280,2490
um, um, but the vm

987
00:30:40,400 --> 00:30:41,630
0,390 390,660 660,750 750,900 900,1230
manager needs to keep track

988
00:30:41,630 --> 00:30:42,950
0,330 390,600 600,870 870,1170 1170,1320
of a which heart it's

989
00:30:42,950 --> 00:30:44,380
0,510 510,660 660,900
emulating right now.

990
00:30:46,240 --> 00:30:48,120
0,570 600,1110
Okay, I'm.

991
00:30:48,600 --> 00:30:50,430
0,510 540,960 960,1530 1530,1620 1620,1830
The risk five it turns

992
00:30:50,430 --> 00:30:51,930
0,150 150,420 420,1050 1050,1260 1260,1500
out different {CPU's -} are

993
00:30:51,990 --> 00:30:55,640
0,780 870,1410 1410,1560 1560,2460
different levels of difficulty.

994
00:30:55,770 --> 00:30:56,820
0,480 480,750 750,840 840,960 960,1050
How hard it is to

995
00:30:56,820 --> 00:30:58,230
0,180 180,240 240,600 600,810 810,1410
write a trap and emulate

996
00:30:58,410 --> 00:30:59,760
0,270 270,600 600,990 990,1170 1170,1350
a virtual machine on the

997
00:30:59,940 --> 00:31:02,790
0,390 390,810 810,1860 2100,2460 2460,2850
wrist vise particularly well suited

998
00:31:02,790 --> 00:31:03,960
0,180 180,270 270,510 510,630 630,1170
to it because the designers

999
00:31:03,960 --> 00:31:05,370
0,330 330,570 570,750 750,1230 1230,1410
had that in mind when

1000
00:31:05,370 --> 00:31:06,690
0,90 90,210 210,660 660,750 750,1320
they were designing the instruction

1001
00:31:06,690 --> 00:31:08,850
0,330 660,990 1050,1350 1560,1830 1830,2160
set and so they knew

1002
00:31:08,850 --> 00:31:09,960
0,210 210,330 330,960 960,1050 1050,1110
what the requirements of a

1003
00:31:09,960 --> 00:31:11,700
0,270 270,390 390,930 930,1350 1350,1740
trap and emulate virtual machine

1004
00:31:11,700 --> 00:31:13,740
0,300 480,900 900,1080 1080,1620 1830,2040
were and for example, um,

1005
00:31:13,740 --> 00:31:15,420
0,450 540,870 870,1170 1170,1620 1620,1680
they've been quite diligent in

1006
00:31:15,420 --> 00:31:16,410
0,240 240,390 390,510 510,720 720,990
making sure that every single

1007
00:31:16,410 --> 00:31:18,570
0,600 600,1050 1050,1290 1290,1890 1890,2160
privilege thing that supervisor code

1008
00:31:18,570 --> 00:31:19,860
0,120 120,510 570,960 960,1230 1230,1290
can do will cause a

1009
00:31:19,860 --> 00:31:20,670
0,390 390,480 480,570 570,720 720,810
trap, if you try to

1010
00:31:20,670 --> 00:31:21,660
0,210 210,300 300,420 420,690 690,990
do it in user mode,

1011
00:31:21,690 --> 00:31:22,830
0,180 180,240 240,420 420,570 570,1140
which is what you need

1012
00:31:23,040 --> 00:31:24,090
0,240 240,510 510,690 690,900 900,1050
in order to make sure

1013
00:31:24,090 --> 00:31:25,950
0,90 90,390 390,690 690,1260 1500,1860
the virtual machine monitor sees

1014
00:31:25,950 --> 00:31:27,440
0,60 60,420 420,630 630,1170
a trap for every.

1015
00:31:27,500 --> 00:31:30,740
0,660 660,1140
Privileged instructions.

1016
00:31:31,320 --> 00:31:32,540
0,540
HMM.

1017
00:31:32,820 --> 00:31:34,140
0,270 330,510 510,570 570,750 750,1320
I have a quick question,

1018
00:31:34,170 --> 00:31:35,910
0,240 240,570 570,900 900,1290 1290,1740
um, so does anything actually

1019
00:31:35,910 --> 00:31:37,560
0,390 390,630 630,870 870,1290 1290,1650
run in the guest OS

1020
00:31:37,560 --> 00:31:39,150
0,570 720,870 870,1050 1050,1230 1230,1590
itself or does it always

1021
00:31:39,150 --> 00:31:40,470
0,390 390,630 630,750 750,1050 1050,1320
trap into the virtual machine

1022
00:31:40,470 --> 00:31:44,220
0,390 930,1410 1410,1800 1800,2370 2370,3750
monitor are all ordinary instructions.

1023
00:31:44,670 --> 00:31:46,020
0,270 330,600 600,750 750,1170 1200,1350
Like if you just have

1024
00:31:46,020 --> 00:31:48,270
0,120 120,510 510,1440 1440,1770 1830,2250
an add instruction that no

1025
00:31:48,270 --> 00:31:49,920
0,1050 1260,1380 1380,1470 1470,1530 1530,1650
ads I don't know how

1026
00:31:49,920 --> 00:31:51,330
0,90 90,330 330,810 930,1200 1200,1410
to write this press five

1027
00:31:51,330 --> 00:31:52,290
0,420 420,540 540,660 660,810 810,960
assembly but let's just say

1028
00:31:52,290 --> 00:31:53,850
0,210 210,510 510,690 690,1200 1200,1560
you add a zero day

1029
00:31:53,850 --> 00:31:54,870
0,600 600,690 690,780 780,960 960,1020
one and you want to

1030
00:31:54,870 --> 00:31:55,770
0,150 150,210 210,600 600,720 720,900
put the result in a

1031
00:31:55,770 --> 00:31:58,380
0,540 780,1140 1140,1560 1560,1770 1770,2610
two that instruction just executes

1032
00:31:58,590 --> 00:31:59,940
0,570 570,660 660,720 720,1230 1230,1350
directly on the hardware at

1033
00:31:59,940 --> 00:32:01,600
0,270 270,600 600,1230
full hardware speed.

1034
00:32:01,870 --> 00:32:03,130
0,300 300,420 420,570 570,630 630,1260
If you make a function

1035
00:32:03,130 --> 00:32:05,380
0,300 300,480 480,600 990,1770 1770,2250
call, just an ordinary function

1036
00:32:05,380 --> 00:32:06,580
0,600
call.

1037
00:32:06,640 --> 00:32:07,880
0,690
I'm.

1038
00:32:07,970 --> 00:32:08,780
0,180 180,360 360,420 420,480 480,810
Up here in the guest

1039
00:32:08,780 --> 00:32:11,720
0,420 630,930 930,1380 1410,2430
world that just executes.

1040
00:32:11,980 --> 00:32:13,480
0,420 420,660 660,1110 1110,1410 1410,1500
Without anything special, just a

1041
00:32:13,480 --> 00:32:14,680
0,570 600,690 690,930 930,1110 1110,1200
ordinary you know all the

1042
00:32:14,680 --> 00:32:16,360
0,510 510,630 630,720 720,1320 1320,1680
instructions that are legal in

1043
00:32:16,390 --> 00:32:18,040
0,540 540,1140
user code.

1044
00:32:18,240 --> 00:32:20,430
0,630 750,900 900,1620 1620,1920 1920,2190
I'm a non-religious actions just

1045
00:32:20,430 --> 00:32:22,440
0,360 360,870 870,1110 1110,1350 1350,2010
execute directly at full speed

1046
00:32:22,650 --> 00:32:24,150
0,330 330,420 420,660 660,1050 1050,1500
when the guest operating system

1047
00:32:24,300 --> 00:32:25,480
0,540 540,660
executes them.

1048
00:32:25,890 --> 00:32:27,150
0,390 390,630 630,870 870,1170 1170,1260
Okay, so is there a

1049
00:32:27,150 --> 00:32:29,100
0,480 480,600 600,900 1170,1590 1590,1950
semblance of like user mode

1050
00:32:29,100 --> 00:32:30,900
0,330 330,750 750,1080 1110,1380 1380,1800
and kernel mode in the

1051
00:32:30,930 --> 00:32:32,420
0,690 690,990
gusto 's.

1052
00:32:32,920 --> 00:32:34,210
0,360 360,450 450,690 690,990 990,1290
Yes, the guest operating system

1053
00:32:34,210 --> 00:32:35,740
0,390
is.

1054
00:32:36,230 --> 00:32:37,940
0,420 870,990 990,1200 1200,1470 1470,1710
Well, the guest operating system

1055
00:32:37,940 --> 00:32:40,560
0,480 510,2070
is unchanged.

1056
00:32:40,560 --> 00:32:41,400
0,150 150,300 300,450 450,720 720,840
So what we're running up

1057
00:32:41,400 --> 00:32:43,980
0,210 210,360 360,1560 1950,2220 2220,2580
here is exactly the Linux

1058
00:32:43,980 --> 00:32:45,510
0,420 420,510 510,1170 1170,1290 1290,1530
kernel are exactly the ex

1059
00:32:45,510 --> 00:32:46,830
0,150 150,420 420,930 1050,1260 1260,1320
v six kernel and of

1060
00:32:46,830 --> 00:32:48,360
0,300 330,600 600,720 720,1080 1080,1530
course X V six all

1061
00:32:48,360 --> 00:32:49,350
0,60 60,180 180,330 330,930 930,990
you know it knows the

1062
00:32:49,350 --> 00:32:50,730
0,150 150,270 270,450 450,720 720,1380
ex v six colonel knows

1063
00:32:50,730 --> 00:32:52,440
0,150 150,420 420,510 510,1170 1170,1710
it's running in supervisor mode.

1064
00:32:53,840 --> 00:32:55,670
0,300 300,780 780,1050 1050,1740 1770,1830
Right, just just is of

1065
00:32:55,670 --> 00:32:57,050
0,360 450,600 600,780 780,1080 1080,1380
course it's not here but

1066
00:32:57,110 --> 00:32:57,920
0,270 270,390 390,450 450,540 540,810
as far as the code

1067
00:32:57,920 --> 00:32:59,480
0,120 120,630 720,900 900,1200 1200,1560
is concerned, it's just definitely

1068
00:32:59,480 --> 00:33:00,650
0,240 240,300 300,810 810,1050 1050,1170
running a supervisor mode, it

1069
00:33:00,650 --> 00:33:02,090
0,420 840,1080 1080,1170 1170,1380 1380,1440
just does all kinds of

1070
00:33:02,090 --> 00:33:03,440
0,330 330,780 780,900 900,1260 1260,1350
privilege things and expects them

1071
00:33:03,440 --> 00:33:04,340
0,90 90,480
to work.

1072
00:33:04,400 --> 00:33:05,390
0,180 180,360 360,510 510,870 870,990
And then it knows when

1073
00:33:05,390 --> 00:33:07,250
0,60 60,570 630,990 990,1410 1650,1860
it {executes's -} Rep to

1074
00:33:07,250 --> 00:33:08,300
0,150 150,330 330,600 600,930 930,1050
get into user space and

1075
00:33:08,300 --> 00:33:10,130
0,210 210,720 1080,1350 1350,1590 1590,1830
knows ahah, I'm gonna enter

1076
00:33:10,130 --> 00:33:11,620
0,240 240,570 570,900
user space now.

1077
00:33:11,650 --> 00:33:12,780
0,540
I'm.

1078
00:33:13,000 --> 00:33:14,230
0,390 390,480 480,600 600,750 750,1230
And you know the Vietnam

1079
00:33:14,230 --> 00:33:16,360
0,240 240,540 690,1350 1350,1830 1830,2130
sort of makes everything look

1080
00:33:16,360 --> 00:33:18,220
0,480 600,900 900,1230 1230,1440 1440,1860
like that's indeed what's happening.

1081
00:33:19,870 --> 00:33:21,220
0,390 390,570 570,690 690,1020 1020,1350
Even though it's actually in

1082
00:33:21,250 --> 00:33:22,690
0,330 360,720 750,960 960,1140 1140,1440
in in in the real

1083
00:33:22,690 --> 00:33:24,250
0,390 390,540 540,660 660,960 960,1560
machine, it's in user mode.

1084
00:33:25,150 --> 00:33:26,890
0,120 120,360 360,1020 1260,1530 1530,1740
In both places, but this

1085
00:33:26,890 --> 00:33:28,630
0,510 510,750 750,960 960,1530 1530,1740
looks just like supervisor movie,

1086
00:33:28,630 --> 00:33:29,710
0,180 180,600 600,840 840,990 990,1080
this looks just like you.

1087
00:33:35,100 --> 00:33:37,400
0,510 930,1680
Okay, okay.

1088
00:33:38,550 --> 00:33:40,320
0,330 330,630 660,1020 1020,1500 1530,1770
Okay, so when the so

1089
00:33:40,320 --> 00:33:41,490
0,210 210,570 570,720 720,810 810,1170
for example when the guest

1090
00:33:41,490 --> 00:33:42,540
0,150 150,300 300,510 510,840 840,1050
when we ask us ret

1091
00:33:42,540 --> 00:33:44,130
0,90 90,300 300,540 540,1170 1170,1590
to enter user space on

1092
00:33:44,280 --> 00:33:47,400
0,420 420,900 900,1830
the assets privileged.

1093
00:33:47,400 --> 00:33:50,790
0,690 2400,2940 2940,3060 3060,3120 3120,3390
Luckily traps into the virtual

1094
00:33:50,790 --> 00:33:52,260
0,300 300,900
machine monitor.

1095
00:33:52,290 --> 00:33:53,970
0,150 150,480 480,810 810,1230 1230,1680
A virtual machine monitor changes

1096
00:33:53,970 --> 00:33:55,500
0,90 90,450 450,900 900,1020 1020,1530
the virtual mode to user

1097
00:33:55,980 --> 00:33:56,610
0,240 240,300 300,360 360,570 570,630
even though of course the

1098
00:33:56,610 --> 00:33:57,960
0,240 240,450 450,510 510,720 720,1350
real mode is still supervisor

1099
00:33:57,960 --> 00:33:58,680
0,210 210,270 270,420 420,630 630,720
because we're still going to

1100
00:33:58,680 --> 00:33:59,790
0,90 90,300 300,570 660,1020 1020,1110
be down here change the

1101
00:33:59,790 --> 00:34:01,350
0,300 300,570 570,870 900,1020 1020,1560
virtual mode to the user.

1102
00:34:03,810 --> 00:34:05,730
0,480 840,1200 1200,1410 1410,1770 1770,1920
It a just before it

1103
00:34:05,730 --> 00:34:07,770
0,750 750,900 900,990 990,1710 1740,2040
returns from the trap, the

1104
00:34:07,770 --> 00:34:09,390
0,300 300,660 660,1020 1020,1380 1380,1620
virtual machine monitor sets the

1105
00:34:09,390 --> 00:34:13,260
0,660 660,1050 1050,1950 3240,3570 3570,3870
real se PC to the

1106
00:34:13,290 --> 00:34:15,780
0,570 570,720 720,1410 1470,2310 2340,2490
{virtual's -} CPC because in

1107
00:34:15,780 --> 00:34:17,190
0,270 270,450 450,900 1020,1140 1140,1410
order that when the virtual

1108
00:34:17,190 --> 00:34:19,800
0,570 570,1020 1020,1800 1830,2340 2370,2610
machine monitor returns {using -}

1109
00:34:19,800 --> 00:34:22,230
0,390 390,660 660,1080 1230,1800 1920,2430
its own's rat that the

1110
00:34:22,230 --> 00:34:23,160
0,390
um.

1111
00:34:23,160 --> 00:34:24,930
0,330 660,1020 1020,1320 1320,1650 1650,1770
The program counter value, it

1112
00:34:24,930 --> 00:34:26,160
0,480 480,750 750,870 870,930 930,1230
returns two as a program

1113
00:34:26,160 --> 00:34:28,050
0,420 870,1050 1050,1140 1140,1530 1530,1890
value is the program counter

1114
00:34:28,050 --> 00:34:29,760
0,270 270,510 510,840 870,1350 1350,1710
that the guest operating system

1115
00:34:29,760 --> 00:34:31,360
0,270 270,390 390,840 840,1050
wanted to return to.

1116
00:34:31,670 --> 00:34:32,690
0,360 420,570 570,780 780,840 840,1020
Um, so here's a case

1117
00:34:32,690 --> 00:34:34,730
0,120 120,390 390,1080 1140,1530 1530,2040
where very briefly the real

1118
00:34:34,730 --> 00:34:36,200
0,660 660,780 780,1050 1050,1290 1290,1470
CPC was set equal to

1119
00:34:36,200 --> 00:34:38,440
0,210 540,1020 1020,1680
the virtual CPC.

1120
00:34:38,590 --> 00:34:39,700
0,510
I'm.

1121
00:34:40,180 --> 00:34:41,320
0,300 330,630 630,810 810,990 990,1140
And I'll talk about this

1122
00:34:41,320 --> 00:34:42,880
0,60 60,120 120,600 600,990 1080,1560
in a bit a virtual

1123
00:34:42,880 --> 00:34:43,780
0,210 210,480 480,690 690,780 780,900
machine monitor also is going

1124
00:34:43,780 --> 00:34:45,130
0,60 60,150 150,480 480,780 780,1350
to be switching page tables

1125
00:34:45,130 --> 00:34:46,990
0,180 180,330 1110,1320 1320,1560 1560,1860
when it goes back into.

1126
00:34:47,680 --> 00:34:50,410
0,150 150,210 210,510 510,1020 2130,2730
Into the virtual machine, when

1127
00:34:50,410 --> 00:34:52,180
0,90 90,390 390,690 690,1350 1530,1770
the guest user code wants

1128
00:34:52,180 --> 00:34:52,960
0,60 60,210 210,360 360,720 720,780
to make it then the

1129
00:34:52,960 --> 00:34:54,370
0,210 210,390 390,750 870,1020 1020,1410
guest user code for ordinary

1130
00:34:54,370 --> 00:34:56,950
0,720 720,1170 1200,1920 2040,2490 2490,2580
instructions, excuse machine, execute them

1131
00:34:56,950 --> 00:34:59,260
0,360 360,420 420,600 600,1080 1620,2310
directly at full speed when

1132
00:34:59,260 --> 00:35:01,180
0,570 600,1470
the guest.

1133
00:35:01,990 --> 00:35:03,040
0,630 630,810 810,870 870,990 990,1050
Code wants to make a

1134
00:35:03,040 --> 00:35:05,320
0,480 480,1020 1290,1920 1920,2070 2070,2280
system call executes the e

1135
00:35:05,320 --> 00:35:07,040
0,360 360,1110
call instruction.

1136
00:35:07,040 --> 00:35:08,750
0,450 510,810 810,1110 1110,1170 1170,1710
Um that causes a trap

1137
00:35:08,780 --> 00:35:09,950
0,450 450,810 810,1020 1020,1080 1080,1170
that trap goes to the

1138
00:35:09,950 --> 00:35:11,210
0,270 270,600 600,1020 1020,1110 1110,1260
virtual machine monitor in this

1139
00:35:11,210 --> 00:35:13,100
0,750 840,1080 1080,1350 1350,1650 1650,1890
scheme, the virtual machine monitor

1140
00:35:13,100 --> 00:35:15,110
0,240 240,630 630,1260 1350,1620 1620,2010
says aha, wherein it consults

1141
00:35:15,110 --> 00:35:16,760
0,90 90,450 450,900 900,1200 1230,1650
the virtual mode, its virtual

1142
00:35:16,760 --> 00:35:18,860
0,240 240,390 390,660 660,1380 1800,2100
mode is user space, it

1143
00:35:18,860 --> 00:35:20,720
0,210 210,300 300,390 390,1170 1620,1860
looks at the instruction, um

1144
00:35:20,720 --> 00:35:22,370
0,180 360,930 930,1080 1080,1500 1500,1650
the trap that faulted its

1145
00:35:22,370 --> 00:35:23,720
0,180 180,360 360,870
A E call.

1146
00:35:24,230 --> 00:35:25,400
0,270 270,390 390,450 450,750 750,1170
And then the virtual machine

1147
00:35:25,400 --> 00:35:27,020
0,540 630,900 900,1020 1050,1440 1440,1620
monitor sort of does all

1148
00:35:27,020 --> 00:35:28,370
0,120 120,510 510,840 840,1170 1170,1350
the virtual changes makes all

1149
00:35:28,370 --> 00:35:29,450
0,90 90,540 540,600 600,720 720,1080
the changes in the virtual

1150
00:35:29,450 --> 00:35:31,910
0,390 390,1050 1050,1170 1170,1950 1950,2460
state required to simulate a

1151
00:35:31,910 --> 00:35:33,680
0,450 450,750 750,1200 1350,1680 1680,1770
system called track into the

1152
00:35:33,680 --> 00:35:35,570
0,360 360,720 720,1230 1350,1770 1770,1890
guest operating system, so it's

1153
00:35:35,570 --> 00:35:37,280
0,120 120,180 180,420 420,660 690,1710
going to set the virtual

1154
00:35:37,550 --> 00:35:39,530
0,840 840,1350 1350,1470 1470,1620 1620,1980
se PC to be whatever

1155
00:35:39,530 --> 00:35:42,300
0,360 360,900 1230,1650 1890,2460
program counter, um was.

1156
00:35:42,300 --> 00:35:43,680
0,150 150,510 510,960 960,1050 1050,1380
The eco instruction was that

1157
00:35:44,130 --> 00:35:45,000
0,210 210,270 270,480 480,540 540,870
going to change the virtual

1158
00:35:45,000 --> 00:35:46,740
0,210 210,390 390,480 480,1320 1470,1740
mode back to supervisor, it's

1159
00:35:46,740 --> 00:35:47,910
0,150 150,360 360,480 480,900 900,1170
gonna set the {virtual's -}

1160
00:35:47,910 --> 00:35:49,800
0,750 750,840 840,990 990,1380 1380,1890
cause to be system call,

1161
00:35:50,970 --> 00:35:52,650
0,270 270,450 450,750 750,930 930,1680
it's gonna set the real

1162
00:35:52,680 --> 00:35:54,930
0,1080 1290,1560 1560,1740 1740,2130 2130,2250
epc to be equal to

1163
00:35:54,930 --> 00:35:57,020
0,210 210,660 660,1140 1140,1650
the virtual St, vac.

1164
00:35:57,020 --> 00:35:58,190
0,150 150,300 300,570 570,840 840,1170
And then {call's -} rat,

1165
00:35:58,460 --> 00:35:59,720
0,330 330,540 540,810 840,990 990,1260
um, so that at all.

1166
00:36:00,320 --> 00:36:01,640
0,270 270,690 690,930 930,1020 1020,1320
A jump into the guest

1167
00:36:01,640 --> 00:36:04,190
0,450 450,900 900,1290 1290,1830 2280,2550
operating systems trap handler, which

1168
00:36:04,190 --> 00:36:05,220
0,120 120,420
is what.

1169
00:36:05,250 --> 00:36:06,930
0,330 540,690 690,1320 1320,1620 1620,1680
Um or trampoline page or

1170
00:36:06,930 --> 00:36:07,980
0,240 240,300 300,630 660,960 960,1050
whatever it is which is

1171
00:36:07,980 --> 00:36:09,750
0,270 420,660 660,1080 1080,1470 1470,1770
what the virtual St, beck

1172
00:36:09,750 --> 00:36:11,160
0,150 150,510 510,690
was pointing to.

1173
00:36:12,710 --> 00:36:13,860
0,390
Yes.

1174
00:36:16,790 --> 00:36:18,840
0,630
Okay.

1175
00:36:19,260 --> 00:36:21,630
0,510 990,1230 1230,1530 1560,1920 1920,2370
Um, we have two remaining

1176
00:36:21,630 --> 00:36:23,070
0,330 330,450 450,1170 1200,1350 1350,1440
pieces of business which are

1177
00:36:23,070 --> 00:36:25,080
0,210 210,660 660,990 990,1560
quite important, one is.

1178
00:36:25,140 --> 00:36:27,380
0,150 150,450 450,870 870,1770
What about page tables.

1179
00:36:27,440 --> 00:36:29,420
0,480 480,630 630,840 840,1500
And the other is.

1180
00:36:29,420 --> 00:36:32,240
0,90 90,300 300,1380
What about devices.

1181
00:36:32,440 --> 00:36:35,340
0,510 1110,1650 1680,2310
So the um.

1182
00:36:36,540 --> 00:36:37,980
0,390 390,690 690,900 900,1080 1080,1440
Page table sort of there's

1183
00:36:38,160 --> 00:36:39,960
0,240 240,690 690,780 780,1140 1410,1800
two pieces to that that

1184
00:36:39,990 --> 00:36:41,310
0,450 450,570 570,840 840,960 960,1320
one is that at various

1185
00:36:41,310 --> 00:36:42,630
0,240 240,330 330,600 600,960 960,1320
points, the guest operating system

1186
00:36:42,630 --> 00:36:43,740
0,150 150,270 270,360 360,990 990,1110
is going to modify the

1187
00:36:43,740 --> 00:36:46,710
0,450 450,660 660,1410 2700,2910 2910,2970
sat p register and of

1188
00:36:46,710 --> 00:36:47,760
0,300 300,360 360,570 570,750 840,1050
course you know that they'll

1189
00:36:47,760 --> 00:36:48,480
0,180 180,330 330,390 390,630 630,720
turn into a trap and

1190
00:36:48,480 --> 00:36:49,770
0,60 60,330 330,600 600,1050 1050,1290
the virtual machine monitor and

1191
00:36:50,160 --> 00:36:51,360
0,240 240,480 480,720 720,1020 1020,1200
the virtual machine monitor gets

1192
00:36:51,360 --> 00:36:52,440
0,30 30,300 300,390 390,540 540,1080
a chance to do something,

1193
00:36:52,950 --> 00:36:54,330
0,240 240,450 450,630 630,1170 1170,1380
but what we don't want

1194
00:36:54,330 --> 00:36:55,470
0,90 90,390 390,720 720,1080 1080,1140
the virtual machine monitor to

1195
00:36:55,470 --> 00:36:56,760
0,150 150,270 270,690 690,1170 1170,1290
do is simply let the

1196
00:36:56,760 --> 00:36:58,590
0,600 630,990 990,1110 1110,1410 1410,1830
guests set the real sat

1197
00:36:58,590 --> 00:36:59,280
0,300
p.

1198
00:36:59,600 --> 00:37:02,660
0,570 1110,1350 1350,1800 1860,2550 2790,3060
Um, and then execute after

1199
00:37:02,660 --> 00:37:03,800
0,240 240,600 600,660 660,840 840,1140
having changed the wheel sat

1200
00:37:03,800 --> 00:37:04,580
0,240 240,390 390,540 540,690 690,780
because that would let the

1201
00:37:04,580 --> 00:37:05,990
0,390 390,600 600,780 780,1020 1020,1410
guests get at any memory,

1202
00:37:05,990 --> 00:37:07,760
0,270 270,780 1140,1290 1290,1650 1650,1770
not just the memory that

1203
00:37:07,760 --> 00:37:09,080
0,90 90,420 420,720 720,1110 1110,1320
the virtual machine monitor has

1204
00:37:09,080 --> 00:37:10,610
0,540 540,720 720,870 1200,1410 1410,1530
allocated to it, so we

1205
00:37:10,610 --> 00:37:12,050
0,540 540,720 720,810 810,1110 1110,1440
cannot let the guest operating

1206
00:37:12,050 --> 00:37:14,030
0,540 600,1260 1260,1560 1560,1650 1650,1980
system simply set the sat

1207
00:37:14,030 --> 00:37:15,040
0,270
p.

1208
00:37:15,520 --> 00:37:16,330
0,300 300,390 390,540 540,750 750,810
But we do need to

1209
00:37:16,330 --> 00:37:17,320
0,120 120,570 570,660 660,750 750,990
do something to the set

1210
00:37:17,320 --> 00:37:19,420
0,240 240,360 360,540 540,780 1320,2100
because we need to provide

1211
00:37:19,420 --> 00:37:20,620
0,90 90,720 720,810 810,900 900,1200
the illusion to the guest

1212
00:37:20,620 --> 00:37:22,690
0,450 450,930 930,1140 1140,1410 1410,2070
operating system that yes, indeed,

1213
00:37:22,990 --> 00:37:24,040
0,240 240,330 330,600 600,960 960,1050
um the page tables can

1214
00:37:24,040 --> 00:37:25,060
0,390 390,510 510,750 750,900 900,1020
change and more than an

1215
00:37:25,060 --> 00:37:27,040
0,450 450,630 630,750 750,1290 1320,1980
illusion, when the guest software

1216
00:37:27,040 --> 00:37:28,810
0,330 330,570 570,690 690,1020 1020,1770
runs load and store instructions

1217
00:37:28,810 --> 00:37:31,060
0,420 420,1020 1110,1620 1620,1710 1710,2250
or fetches instructions to execute,

1218
00:37:31,240 --> 00:37:32,170
0,300 300,480 480,660 660,750 750,930
we need those to come

1219
00:37:32,170 --> 00:37:33,190
0,120 120,210 210,450 450,870 870,1020
from the right place from

1220
00:37:33,190 --> 00:37:35,020
0,60 60,420 420,630 630,900 1320,1830
the place that the guest

1221
00:37:35,020 --> 00:37:37,780
0,450 450,1170 1470,2250 2250,2430 2430,2760
operating system pointed its page

1222
00:37:37,780 --> 00:37:41,140
0,300 300,660 660,840 2160,2640 3090,3360
table entries too, so what

1223
00:37:41,140 --> 00:37:42,370
0,300 300,690 690,840 840,930 930,1230
actually happens when the guest

1224
00:37:42,370 --> 00:37:43,940
0,300 300,510 510,750 750,1260
sets, thus at p.

1225
00:37:44,770 --> 00:37:46,160
0,720
I'm.

1226
00:37:47,560 --> 00:37:49,540
0,750 1140,1410 1410,1710 1710,1830 1830,1980
Is, um, we you know

1227
00:37:49,540 --> 00:37:50,740
0,180 180,360 360,660 660,1020 1020,1200
we we can't we can't

1228
00:37:50,740 --> 00:37:52,150
0,390 390,600 600,840 840,1110 1110,1410
directly use the guest operating

1229
00:37:52,150 --> 00:37:53,950
0,330 330,600 600,990 1020,1380 1440,1800
systems page table, but the

1230
00:37:53,950 --> 00:37:55,930
0,300 300,630 630,1140 1170,1710 1710,1980
virtual machine monitor cooks up

1231
00:37:55,930 --> 00:37:58,300
0,120 120,360 360,810 810,1470 1620,2370
a new page table, um

1232
00:37:58,480 --> 00:38:02,590
0,540 600,2250 2310,3000 3090,3570 3600,4110
that simulates the guest operating

1233
00:38:02,590 --> 00:38:05,560
0,690 810,1560 1560,1950 1950,2370 2610,2970
systems desired, ph table, so,

1234
00:38:05,770 --> 00:38:06,980
0,600
um.

1235
00:38:07,330 --> 00:38:09,430
0,420 630,870 870,1200 1200,1710 1830,2100
The so now the page

1236
00:38:09,430 --> 00:38:10,630
0,540 540,960 960,1020 1020,1050 1050,1200
translation situation is a little

1237
00:38:10,630 --> 00:38:12,250
0,180 180,600 1140,1380 1380,1500 1500,1620
bit different, we have the

1238
00:38:12,250 --> 00:38:13,620
0,870
guest.

1239
00:38:14,380 --> 00:38:16,180
0,270 270,450 450,660 690,1470 1500,1800
Um, with the guest was

1240
00:38:16,180 --> 00:38:17,230
0,360 360,420 420,630 630,720 720,1050
trying to set the page

1241
00:38:17,230 --> 00:38:18,100
0,300 300,540 540,660 660,750 750,870
table too, so this is

1242
00:38:18,100 --> 00:38:19,750
0,90 90,630 990,1350 1350,1590 1590,1650
the guest page table, of

1243
00:38:19,750 --> 00:38:21,070
0,150 150,270 270,390 390,1020 1020,1320
course is the current guest

1244
00:38:21,070 --> 00:38:22,180
0,480
kernel.

1245
00:38:22,270 --> 00:38:25,000
0,630 960,1170 1170,1380 1380,2160 2250,2730
Um, and that maps a

1246
00:38:25,000 --> 00:38:26,720
0,210 210,330 330,1140
sort of guest.

1247
00:38:27,110 --> 00:38:29,330
0,390 450,960 960,1710 1710,1980 1980,2220
A virtual addresses to what

1248
00:38:29,330 --> 00:38:32,180
0,120 120,390 390,1080 1350,2040 2040,2850
I'll call guest physical addresses,

1249
00:38:32,510 --> 00:38:33,620
0,240 240,420 420,480 480,750 750,1110
of course the guest physical

1250
00:38:33,620 --> 00:38:36,770
0,480 480,810 2010,2370 2460,2850 2850,3150
addresses are the virtual machine

1251
00:38:36,770 --> 00:38:39,470
0,630 630,930 930,1020 1020,1710 1920,2700
monitors given the guest 32

1252
00:38:39,470 --> 00:38:41,840
0,540 540,720 720,1080 1080,1680 1710,2370
gigabytes or however much simulate

1253
00:38:42,140 --> 00:38:45,200
0,420 420,1230
physical memory.

1254
00:38:46,090 --> 00:38:49,210
0,300 300,420 420,1170 1440,2550 2550,3120
For its use, presumably starting

1255
00:38:49,210 --> 00:38:52,720
0,420 720,1230 1620,3210 3210,3270 3270,3510
at a telling the guest

1256
00:38:52,720 --> 00:38:54,340
0,330 330,660 660,780 780,1050 1080,1620
operating system that its physical

1257
00:38:54,340 --> 00:38:55,480
0,330 330,540 540,630 630,1020 1020,1140
addresses start at zero and

1258
00:38:55,480 --> 00:38:56,260
0,150 150,300 300,420 420,600 600,780
go up four three two

1259
00:38:56,260 --> 00:38:58,000
0,480 480,600 600,660 660,1140 1620,1740
megabytes but of course you

1260
00:38:58,000 --> 00:38:59,020
0,300 330,510 510,720 720,840 840,1020
know they don't in real

1261
00:38:59,020 --> 00:39:00,040
0,330 330,420 420,480 480,660 660,1020
life on the real hardware,

1262
00:39:00,040 --> 00:39:01,480
0,120 120,150 150,540 540,960 960,1440
there are just 32 gigabytes

1263
00:39:01,480 --> 00:39:02,950
0,180 180,240 240,600 600,1170 1230,1470
worth of pages somewhere not

1264
00:39:02,950 --> 00:39:04,980
0,750
contiguous.

1265
00:39:05,040 --> 00:39:06,960
0,360 360,540 690,1050 1050,1560 1560,1920
Can't you can't directly use

1266
00:39:06,960 --> 00:39:08,370
0,90 90,510 510,840 840,1260 1260,1410
the guest's physical addresses because

1267
00:39:08,370 --> 00:39:11,310
0,90 90,360 540,1320 1320,1620 2250,2940
they don't correspond to real

1268
00:39:11,310 --> 00:39:13,380
0,330 330,720 720,870 870,1530 1650,2070
physical addresses, so instead I'm

1269
00:39:13,380 --> 00:39:15,240
0,120 120,1140 1350,1590 1590,1740 1740,1860
the vm is going to

1270
00:39:15,270 --> 00:39:16,600
0,810
maintain.

1271
00:39:18,680 --> 00:39:20,280
0,180 180,1020
A map.

1272
00:39:20,370 --> 00:39:22,060
0,390 420,1170
For each.

1273
00:39:22,090 --> 00:39:24,490
0,510 540,1020 1020,1620 1650,1860 1860,2400
A virtual machine that maps

1274
00:39:24,520 --> 00:39:27,640
0,720 720,1200 1200,2070 2160,2640 2640,3120
guest physical addresses to real

1275
00:39:27,640 --> 00:39:29,020
0,450 450,960 960,1110 1110,1170 1170,1380
physical addresses what I call

1276
00:39:29,020 --> 00:39:30,320
0,660
host.

1277
00:39:30,320 --> 00:39:32,930
0,390 390,1230 1770,1950 1950,2160 2160,2610
Physical addresses, so this map

1278
00:39:32,960 --> 00:39:34,640
0,270 300,840 840,900 900,1230 1230,1680
is like a page table

1279
00:39:34,820 --> 00:39:37,010
0,450 450,570 570,1140 1410,1890 1890,2190
has an entry for every

1280
00:39:37,010 --> 00:39:38,760
0,750 750,1080
page every.

1281
00:39:38,760 --> 00:39:40,440
0,540 540,840 840,1020 1020,1350 1350,1680
Physical page, the guests thinks

1282
00:39:40,440 --> 00:39:42,690
0,660 900,1290 1290,1470 1470,1890 1890,2250
exists a and indicates what

1283
00:39:42,690 --> 00:39:44,520
0,330 330,690 690,1260 1290,1530 1530,1830
real physical page that gets

1284
00:39:44,520 --> 00:39:46,440
0,330 330,810 840,1590 1590,1710 1710,1920
physical address refers to that

1285
00:39:46,440 --> 00:39:48,180
0,180 360,900 900,1020 1020,1530 1530,1740
the vm is allocated for

1286
00:39:48,180 --> 00:39:50,670
0,180 450,960 1200,1530 1530,2010 2280,2490
it, um, and then, um

1287
00:39:50,670 --> 00:39:53,010
0,210 210,330 330,870 1110,2010 2160,2340
when the guest writes a

1288
00:39:53,010 --> 00:39:54,300
0,180 180,510 510,780 780,870 870,1290
new page table to sat

1289
00:39:54,300 --> 00:39:56,550
0,510 810,1320 1740,1890 1890,1950 1950,2250
P M in the trap

1290
00:39:56,550 --> 00:39:59,040
0,330 330,450 450,660 660,1320 1320,2490
handler for that vm creates

1291
00:39:59,700 --> 00:40:01,540
0,180 180,450 450,510 510,1470
what's called a shadow.

1292
00:40:01,600 --> 00:40:03,240
0,450 450,1020
Peach table.

1293
00:40:03,270 --> 00:40:03,840
0,180 180,270 270,420 420,480 480,570
Which is going to be

1294
00:40:03,840 --> 00:40:05,520
0,210 210,450 450,1020 1320,1590 1590,1680
what the vm puts in

1295
00:40:05,520 --> 00:40:08,380
0,180 180,930 1290,2280
the real um.

1296
00:40:08,870 --> 00:40:10,380
0,990
Sappy.

1297
00:40:10,650 --> 00:40:12,450
0,300 450,900 900,1230 1230,1500 1500,1800
And this shadow page table

1298
00:40:12,450 --> 00:40:15,330
0,270 930,1680 1680,1890 1890,2040 2040,2880
is constructed by the combination

1299
00:40:15,330 --> 00:40:16,560
0,90 90,330 330,510 510,840 840,1230
of these two page tables

1300
00:40:16,560 --> 00:40:18,030
0,270 270,450 450,540 540,1050 1050,1470
and so it maps guest

1301
00:40:18,030 --> 00:40:22,840
0,390 390,1440 2760,3270 3300,4380
virtual addresses to host.

1302
00:40:23,080 --> 00:40:24,970
0,570 570,960 960,1140 1140,1290 1290,1890
Physical addresses then is constructed

1303
00:40:24,970 --> 00:40:26,230
0,150 150,510 510,810 810,1170 1170,1260
by taking every entry in

1304
00:40:26,230 --> 00:40:28,090
0,90 90,360 360,630 630,1080 1230,1860
the guest page table, looking

1305
00:40:28,090 --> 00:40:30,160
0,150 150,450 630,1170 1170,1680 1680,2070
at the guest desired guest

1306
00:40:30,160 --> 00:40:32,200
0,360 360,960 1260,1560 1560,1650 1650,2040
physical address using the vm

1307
00:40:32,200 --> 00:40:33,550
0,330 420,570 570,990 990,1140 1140,1350
map to translate that guest

1308
00:40:33,550 --> 00:40:34,870
0,540 540,870 870,990 990,1080 1080,1320
physical address to a real

1309
00:40:34,870 --> 00:40:36,490
0,300 300,660 660,1080 1080,1440 1440,1620
host physical address and putting

1310
00:40:36,490 --> 00:40:39,550
0,450 630,1200 1200,1560 1560,2100 2850,3060
that virtual physical peer into

1311
00:40:39,550 --> 00:40:41,350
0,90 90,390 390,690 690,1050 1500,1800
the shadow page table and

1312
00:40:41,350 --> 00:40:42,940
0,210 210,420 450,750 750,1170 1170,1590
then the virtual machine monitor

1313
00:40:42,940 --> 00:40:44,740
0,360 360,1080 1110,1260 1260,1500 1500,1800
sets this to be in

1314
00:40:44,770 --> 00:40:46,270
0,420 420,810 930,1170 1170,1260 1260,1500
sat p as the real

1315
00:40:46,270 --> 00:40:48,280
0,300 300,600 600,960 960,1560 1560,2010
page table before returning back.

1316
00:40:50,310 --> 00:40:51,720
0,270 270,450 450,540 540,930 930,1410
A to the guest kernel.

1317
00:40:53,840 --> 00:40:54,710
0,180 180,240 240,420 420,630 630,870
So the guest kernel thinks

1318
00:40:54,710 --> 00:40:55,880
0,270 270,510 510,750 750,1050 1050,1170
it's one page table but

1319
00:40:55,880 --> 00:40:57,320
0,510 570,840 840,1020 1020,1350 1350,1440
actually the real hardware is

1320
00:40:57,320 --> 00:40:59,150
0,270 270,750 930,1320 1320,1560 1560,1830
using this shadow page table

1321
00:40:59,150 --> 00:41:00,160
0,540
instead.

1322
00:41:01,290 --> 00:41:02,520
0,300 300,420 420,570 570,840 840,1230
And this way there's the

1323
00:41:02,940 --> 00:41:04,380
0,390 390,480 480,780 780,1320 1320,1440
this is what prevents the

1324
00:41:04,380 --> 00:41:06,300
0,600 600,810 810,1650 1650,1860 1860,1920
guest from escaping from the

1325
00:41:06,300 --> 00:41:07,980
0,360 360,510 510,840 840,960 960,1680
memory, it's allowed to use,

1326
00:41:08,220 --> 00:41:10,200
0,420 450,840 1050,1470 1470,1620 1620,1980
um, the the the shadow

1327
00:41:10,200 --> 00:41:12,000
0,270 270,510 510,690 690,1080 1080,1800
page table can only contain

1328
00:41:12,030 --> 00:41:14,320
0,540 540,900 900,1770
host physical addresses.

1329
00:41:14,320 --> 00:41:16,480
0,600 930,1380 1380,1470 1470,2010 2010,2160
Um, that the Vietnam had

1330
00:41:16,480 --> 00:41:18,300
0,660 660,780 780,1260
allocated for that.

1331
00:41:18,900 --> 00:41:21,180
0,660 840,1470 1500,1680 1680,2190 2190,2280
Guest guest theres nothing that

1332
00:41:21,180 --> 00:41:22,110
0,270 270,450 450,690 690,840 840,930
guests can put in the

1333
00:41:22,110 --> 00:41:23,880
0,240 240,540 540,900 900,1260 1470,1770
page table asks for that

1334
00:41:23,880 --> 00:41:24,960
0,450 450,600 600,660 660,1020 1020,1080
allow it to access a

1335
00:41:24,960 --> 00:41:26,700
0,510 510,720 720,1080 1080,1590 1590,1740
page that wasn't allocated to

1336
00:41:26,700 --> 00:41:27,630
0,150 150,270 270,360 360,660 660,930
it by the virtual machine

1337
00:41:27,630 --> 00:41:28,520
0,420
monitor.

1338
00:41:30,940 --> 00:41:31,810
0,210 210,270 270,570 570,780 780,870
That's a critical piece of

1339
00:41:31,810 --> 00:41:34,270
0,330 330,900 900,1230 1230,1590 2280,2460
those isolation story here, any

1340
00:41:34,270 --> 00:41:35,980
0,330 330,480 480,780 810,1260 1260,1710
questions about the paging setup

1341
00:41:35,980 --> 00:41:37,680
0,210 210,510 510,600 600,1230
for trap and emulate.

1342
00:41:40,070 --> 00:41:41,840
0,450 450,720 720,960 960,1470 1530,1770
Sorry, so if it's if

1343
00:41:41,840 --> 00:41:44,120
0,270 270,720 720,1200 1200,1530 1560,2280
the operating system, the gas

1344
00:41:44,120 --> 00:41:46,040
0,300 300,570 570,1020 1200,1680 1770,1920
just wants to make a

1345
00:41:46,040 --> 00:41:47,160
0,570
new.

1346
00:41:47,160 --> 00:41:48,420
0,90 90,300 300,780 780,870 870,1260
A new process, a new

1347
00:41:48,420 --> 00:41:50,320
0,510 510,600 600,690 690,1410
PhD for the process.

1348
00:41:50,320 --> 00:41:51,730
0,180 180,300 300,420 420,870 1110,1410
What does it do what

1349
00:41:51,730 --> 00:41:54,040
0,690 900,1290 1290,1980 1980,2070 2070,2310
happens, the guest the guest

1350
00:41:54,040 --> 00:41:55,360
0,330 330,510 510,600 600,1050 1050,1320
does, does the usual just

1351
00:41:55,360 --> 00:41:56,830
0,240 240,630 630,900 960,1380 1380,1470
does exactly what Linux or

1352
00:41:56,830 --> 00:41:57,730
0,150 150,300 300,510 510,720 720,900
aix v six does right

1353
00:41:57,730 --> 00:42:00,280
0,390 1290,1860 1860,2040 2040,2220 2220,2550
now formats up a page

1354
00:42:00,280 --> 00:42:01,150
0,270 270,600 600,690 690,810 810,870
table entries to make a

1355
00:42:01,150 --> 00:42:02,350
0,270 270,690 780,990 990,1080 1080,1200
page table and then it

1356
00:42:02,350 --> 00:42:04,810
0,540 540,660 660,1320 1320,1680 1770,2460
executes the instruction to assign

1357
00:42:04,810 --> 00:42:05,680
0,180 180,450 450,510 510,600 600,870
that address of the page

1358
00:42:05,680 --> 00:42:07,090
0,270 270,420 420,1020 1110,1230 1230,1410
table into sappy, so that's

1359
00:42:07,090 --> 00:42:08,530
0,90 90,180 180,480 480,870 870,1440
what the guest operating system.

1360
00:42:09,000 --> 00:42:10,260
0,750
Does.

1361
00:42:11,300 --> 00:42:13,460
0,210 210,630 630,960 1140,1740 1830,2160
And when the but it

1362
00:42:13,460 --> 00:42:14,660
0,210 210,570 570,840 840,930 930,1200
can't actually assign the set

1363
00:42:14,660 --> 00:42:16,280
0,210 210,390 390,570 570,630 630,1620
p because that's a privileged

1364
00:42:16,400 --> 00:42:18,320
0,780 810,1020 1020,1200 1200,1350 1410,1920
operation, so there's a trap

1365
00:42:18,320 --> 00:42:19,700
0,150 150,240 240,510 510,840 840,1380
into the virtual machine, monitor

1366
00:42:19,910 --> 00:42:21,590
0,180 180,480 480,810 810,1140 1140,1680
the virtual machine monitor inspects

1367
00:42:21,590 --> 00:42:23,120
0,90 90,600 600,720 720,1170 1170,1530
the instruction that trapped sees

1368
00:42:23,120 --> 00:42:25,100
0,180 180,240 240,810 1050,1530 1530,1980
oh my gosh that guest

1369
00:42:25,100 --> 00:42:26,330
0,120 120,390 390,660 690,1140 1140,1230
is trying to assign to

1370
00:42:26,330 --> 00:42:27,660
0,390 390,810
sat p.

1371
00:42:27,660 --> 00:42:28,710
0,150 150,270 270,330 330,660 660,1050
And then the virtual machine

1372
00:42:28,710 --> 00:42:30,900
0,330 330,480 480,1230 1560,1980 1980,2190
monitor would create this new

1373
00:42:30,900 --> 00:42:32,550
0,360 360,750 750,1290 1440,1590 1590,1650
shadow page table for the

1374
00:42:32,550 --> 00:42:34,020
0,660 660,900
combination of.

1375
00:42:34,020 --> 00:42:35,040
0,90 90,330 330,630 630,720 720,1020
The page table, the guests

1376
00:42:35,040 --> 00:42:36,870
0,540 570,960 1260,1500 1500,1560 1560,1830
task was trying to set

1377
00:42:36,870 --> 00:42:37,820
0,450
up.

1378
00:42:38,000 --> 00:42:38,960
0,180 180,270 270,510 510,720 720,960
Now the virtual machine monitor

1379
00:42:38,960 --> 00:42:40,400
0,390 390,480 480,570 570,840 840,1440
looks at the page table

1380
00:42:40,610 --> 00:42:41,840
0,270 270,390 390,1080 1080,1170 1170,1230
all the patties in the

1381
00:42:41,840 --> 00:42:42,710
0,240 240,480 480,540 540,780 780,870
page table, the guests was

1382
00:42:42,710 --> 00:42:44,030
0,180 180,240 240,480 480,780 1020,1320
trying to set up, it

1383
00:42:44,030 --> 00:42:45,980
0,510 510,600 600,1500 1500,1620 1620,1950
runs it translates the physical

1384
00:42:45,980 --> 00:42:47,630
0,360 360,480 480,750 750,1290 1350,1650
address in each guest page

1385
00:42:47,630 --> 00:42:49,490
0,270 270,780 1020,1320 1320,1500 1500,1860
table entry through this map

1386
00:42:49,490 --> 00:42:51,100
0,120 120,330 360,510 510,1110
to get a real.

1387
00:42:51,620 --> 00:42:53,780
0,450 450,780 780,1110 1110,1500
A physical address order.

1388
00:42:53,780 --> 00:42:55,640
0,210 210,330 330,660 660,1290 1620,1860
Cause a real fault, if

1389
00:42:55,640 --> 00:42:57,560
0,270 1110,1590 1590,1650 1650,1860 1860,1920
the guest is trying to

1390
00:42:57,560 --> 00:42:58,550
0,150 150,210 210,510 510,870 870,990
use a physical address that

1391
00:42:58,550 --> 00:43:00,200
0,90 90,240 240,600 600,900 1320,1650
is not allowed to and

1392
00:43:00,200 --> 00:43:01,190
0,90 90,150 150,390 390,660 660,990
then the virtual machine monitor

1393
00:43:01,190 --> 00:43:02,900
0,600 600,720 720,1140 1140,1410 1410,1710
installs this shadow page table

1394
00:43:02,900 --> 00:43:04,070
0,90 90,180 180,420 420,750 750,1170
and the real set p

1395
00:43:04,430 --> 00:43:05,810
0,420 450,990 990,1200 1200,1290 1290,1380
and returns back to the

1396
00:43:05,810 --> 00:43:06,920
0,660
guest.

1397
00:43:08,780 --> 00:43:09,920
0,240 240,450 450,690 690,810 810,1140
Oh, okay, okay I see

1398
00:43:09,920 --> 00:43:11,420
0,150 150,480 570,870 870,1170 1170,1500
I see okay, thank you.

1399
00:43:11,960 --> 00:43:13,000
0,510
Yes.

1400
00:43:19,160 --> 00:43:20,340
0,570
Okay.

1401
00:43:21,670 --> 00:43:22,920
0,660
I'm.

1402
00:43:23,070 --> 00:43:24,510
0,210 210,360 360,930 930,1170 1170,1440
Okay, so this this shadow

1403
00:43:24,510 --> 00:43:25,620
0,240 240,510 510,750 750,840 840,1110
page table stuff is certainly

1404
00:43:25,620 --> 00:43:27,330
0,120 120,180 180,360 720,1050 1050,1710
one of the tricky aspects

1405
00:43:27,330 --> 00:43:28,500
0,180 180,600
of um.

1406
00:43:29,230 --> 00:43:30,340
0,540
HMM.

1407
00:43:31,510 --> 00:43:33,460
0,570 570,1110 1110,1320 1320,1650 1650,1950
A implementing a virtual machine

1408
00:43:33,460 --> 00:43:35,220
0,510
monitor.

1409
00:43:35,250 --> 00:43:37,710
0,570 840,1140 1140,1590 1590,2220 2220,2460
There's actually another thing that,

1410
00:43:37,710 --> 00:43:39,630
0,480 870,1350 1350,1620 1620,1830 1830,1920
um there's another way in

1411
00:43:39,630 --> 00:43:40,920
0,150 150,270 270,510 510,900 900,1290
which the guest operating system

1412
00:43:40,920 --> 00:43:41,910
0,180 180,540 540,630 630,720 720,990
can interact with the page

1413
00:43:41,910 --> 00:43:42,990
0,240 240,300 300,510 510,810 810,1080
table, the guest operating system

1414
00:43:42,990 --> 00:43:45,390
0,120 120,570 780,1020 1020,1590 1710,2400
may actually know x86 sometimes

1415
00:43:45,390 --> 00:43:46,710
0,390 390,630 630,750 750,1050 1050,1320
directly reads and writes page

1416
00:43:46,710 --> 00:43:48,930
0,270 270,870 870,1290 1620,1920 1920,2220
table entries in its page

1417
00:43:48,930 --> 00:43:49,800
0,420
table.

1418
00:43:50,200 --> 00:43:53,200
0,600 1590,2280 2490,2700 2700,2790 2790,3000
Um, and you know so,

1419
00:43:53,200 --> 00:43:54,430
0,120 120,390 390,630 630,750 750,1230
um pieces could can modify

1420
00:43:54,430 --> 00:43:56,740
0,270 270,540 540,900 900,1410 1590,2310
page table entry or read

1421
00:43:56,740 --> 00:43:58,150
0,120 120,420 420,810 810,930 930,1410
the dirty bits, for example

1422
00:43:58,150 --> 00:43:59,200
0,120 120,180 180,420 420,660 660,1050
in a page table entry

1423
00:43:59,230 --> 00:44:00,880
0,270 270,510 510,600 600,900 900,1650
now on the risk five

1424
00:44:01,150 --> 00:44:04,300
0,480 1020,1470 1890,2460 2460,2670 2670,3150
um, if, if a software

1425
00:44:04,300 --> 00:44:05,950
0,510 510,600 600,900 900,1200 1200,1650
modifies the page table entry,

1426
00:44:06,370 --> 00:44:07,060
0,150 150,240 240,420 420,480 480,690
if you read the risk

1427
00:44:07,060 --> 00:44:08,980
0,210 210,750 900,1470 1470,1710 1710,1920
five spec risk five is

1428
00:44:09,010 --> 00:44:10,720
0,510 510,930 930,990 990,1170 1170,1710
not required to do anything

1429
00:44:11,050 --> 00:44:12,250
0,330 330,540 540,840 840,960 960,1200
at that point, so if

1430
00:44:12,250 --> 00:44:13,330
0,120 120,450 450,510 510,780 780,1080
you modify a page table

1431
00:44:13,330 --> 00:44:14,140
0,420
entry.

1432
00:44:14,170 --> 00:44:16,480
0,480 810,1200 1200,1410 1410,1620 1620,2310
Um the risk five microprocessor

1433
00:44:16,480 --> 00:44:18,520
0,420 420,720 720,1320 1320,1470 1470,2040
does not promise to immediately

1434
00:44:18,520 --> 00:44:20,440
0,840 900,1110 1110,1740 1740,1860 1860,1920
observe that modification to a

1435
00:44:20,440 --> 00:44:21,910
0,300 300,540 540,840 840,1020 1020,1470
page table entry may completely

1436
00:44:21,910 --> 00:44:22,930
0,360 360,570 570,720 720,780 780,1020
ignore it for the time

1437
00:44:22,930 --> 00:44:24,760
0,330 480,1080 1110,1410 1410,1470 1470,1830
being, instead what the manual

1438
00:44:24,760 --> 00:44:26,230
0,330 330,720 840,1080 1080,1290 1320,1470
says is that if if

1439
00:44:26,230 --> 00:44:27,730
0,180 180,540 540,810 810,1110 1110,1500
you modify page table entries

1440
00:44:27,730 --> 00:44:29,080
0,300 390,660 660,930 930,1230 1230,1350
and you actually want the

1441
00:44:29,080 --> 00:44:31,120
0,450 450,690 690,1470 1620,1800 1800,2040
hardware to mu to see

1442
00:44:31,120 --> 00:44:32,890
0,330 450,690 690,870 870,1020 1020,1770
them, you have to execute,

1443
00:44:33,070 --> 00:44:35,960
0,780 930,1320 1320,1680 1680,2550
um {the's -} fans.

1444
00:44:37,200 --> 00:44:41,040
0,690 870,1740 1740,2400 2700,3420 3570,3840
Dot vm a instruction and

1445
00:44:41,040 --> 00:44:42,990
0,390 420,960 960,1500 1500,1740 1740,1950
its specs has only this

1446
00:44:42,990 --> 00:44:44,400
0,480 480,600 600,1050 1050,1140 1140,1410
instruction that causes the hardware

1447
00:44:44,400 --> 00:44:45,900
0,90 90,360 360,900 1170,1380 1380,1500
to pay attention to your

1448
00:44:45,900 --> 00:44:47,730
0,360 360,450 450,1320 1470,1740 1740,1830
PhD, all modifications and so

1449
00:44:47,730 --> 00:44:48,540
0,90 90,210 210,480 480,540 540,810
if you're building a virtual

1450
00:44:48,540 --> 00:44:49,980
0,330 330,870
machine monitor.

1451
00:44:49,980 --> 00:44:51,090
0,120 120,420 420,660 660,990 990,1110
The virtual machine monitor on

1452
00:44:51,090 --> 00:44:52,980
0,210 210,630 630,780 780,1230 1230,1890
risk five can completely ignore

1453
00:44:53,430 --> 00:44:54,640
0,600
a.

1454
00:44:54,760 --> 00:44:56,620
0,210 210,720 720,1500 1500,1590 1590,1860
The guest modifications to page

1455
00:44:56,620 --> 00:44:58,030
0,270 270,810 870,1110 1110,1290 1290,1410
table entries, but since you

1456
00:44:58,030 --> 00:44:59,890
0,330 330,450 450,930 930,1350 1440,1860
know the guest is going

1457
00:44:59,890 --> 00:45:01,060
0,60 60,600 780,960 960,1080 1080,1170
to issue is going to

1458
00:45:01,060 --> 00:45:02,260
0,480 480,570 570,750 750,1020 1020,1200
execute an s fence dot

1459
00:45:02,260 --> 00:45:04,780
0,330 330,1050 1470,1770 1770,2220 2220,2520
DNA instruction after modifying page

1460
00:45:04,780 --> 00:45:06,070
0,240 240,810 810,1020 1020,1170 1170,1290
table entries, and this is

1461
00:45:06,070 --> 00:45:07,750
0,60 60,510 510,1200 1230,1500 1500,1680
a privileged instruction until because

1462
00:45:07,750 --> 00:45:09,310
0,60 60,360 360,510 510,1050 1260,1560
it starts with S M

1463
00:45:09,310 --> 00:45:10,270
0,240 240,360 360,450 450,840 840,960
that's going to trap into

1464
00:45:10,270 --> 00:45:12,340
0,90 90,360 360,690 690,1170 1620,2070
the virtual machine monitor virtual

1465
00:45:12,340 --> 00:45:13,690
0,330 330,750 750,930 930,1350 1350,1350
machine monitor is gonna um.

1466
00:45:15,620 --> 00:45:17,390
0,450 480,1080 1080,1560 1560,1710 1710,1770
A risk knows that an

1467
00:45:17,390 --> 00:45:18,620
0,180 180,480 480,630 630,1170 1170,1230
s fence was executed, it

1468
00:45:18,620 --> 00:45:19,970
0,180 180,270 270,900 960,1170 1170,1350
looks the instruction, it's gonna

1469
00:45:19,970 --> 00:45:22,680
0,240 240,1170 1200,1500 1500,2220
{re-scan -} the guest.

1470
00:45:22,740 --> 00:45:23,910
0,180 180,600 600,1020 1020,1110 1110,1170
The guests version of the

1471
00:45:23,910 --> 00:45:26,100
0,300 300,570 570,1050 1530,1890 1890,2190
current page table current page

1472
00:45:26,100 --> 00:45:27,630
0,420 600,840 840,1080 1080,1200 1200,1530
table and look for page

1473
00:45:27,630 --> 00:45:29,130
0,270 270,570 570,660 660,780 780,1500
table entries that have changed

1474
00:45:29,190 --> 00:45:30,780
0,270 270,660 660,900 900,1470 1470,1590
and reflect those changes if

1475
00:45:30,780 --> 00:45:33,180
0,150 150,690 1650,1950 1950,2040 2040,2400
they're legal into the shadow

1476
00:45:33,180 --> 00:45:35,840
0,300 300,810
page table.

1477
00:45:35,840 --> 00:45:37,790
0,570 570,870 1050,1770 1770,1890 1890,1950
Reset the actually got a

1478
00:45:37,790 --> 00:45:39,020
0,300 300,450 450,720 720,870 870,1230
real ass fence dot vm

1479
00:45:39,020 --> 00:45:39,740
0,150 150,210 210,360 360,480 480,720
a to get the real

1480
00:45:39,740 --> 00:45:41,210
0,300 300,360 360,510 510,1020 1230,1470
hardware to pay attention to

1481
00:45:41,210 --> 00:45:42,500
0,240 240,540 540,780 780,1110 1110,1290
the shadow page table, then

1482
00:45:42,500 --> 00:45:44,630
0,510 510,600 600,900 1380,1800 1800,2130
return to the guest operating

1483
00:45:44,630 --> 00:45:46,430
0,360 780,990 990,1170 1170,1470 1470,1800
system, so this means that,

1484
00:45:46,460 --> 00:45:48,800
0,600 810,1410 1410,1800 1800,2220 2220,2340
um, there's only like the

1485
00:45:48,800 --> 00:45:50,600
0,450 450,870 870,1140 1140,1470 1470,1800
mu actually just uses one

1486
00:45:50,600 --> 00:45:51,770
0,300 300,660 660,870 870,1080 1080,1170
page table right, which is

1487
00:45:51,770 --> 00:45:52,760
0,120 120,510 510,660 660,840 840,990
the shadow, it's not like

1488
00:45:52,760 --> 00:45:53,810
0,180 180,510 510,750 750,870 870,1050
it's using the E P

1489
00:45:53,810 --> 00:45:55,280
0,240 240,390 390,930 960,1200 1200,1470
T or anything like that,

1490
00:45:55,730 --> 00:45:56,510
0,210 210,360 360,450 450,600 600,780
there's no E P T

1491
00:45:56,510 --> 00:45:57,830
0,300 330,720 750,900 900,1050 1050,1320
yet okay, so the guests

1492
00:45:57,830 --> 00:45:59,120
0,600 600,900 900,1020 1020,1230 1230,1290
just thinks it has a

1493
00:45:59,120 --> 00:46:00,470
0,270 270,690 690,900 900,1020 1020,1350
page table like the gv

1494
00:46:00,470 --> 00:46:02,000
0,240 240,870 870,1080 1080,1350 1350,1530
h gpa but that's not

1495
00:46:02,000 --> 00:46:04,070
0,300 300,600 600,780 780,1680 1770,2070
actually doing any translation, not

1496
00:46:04,070 --> 00:46:06,320
0,60 60,360 360,1050 1410,1620 1620,2250
in the vm, yeah makes

1497
00:46:06,350 --> 00:46:07,820
0,270 270,510 510,780 780,1110 1110,1470
its own page table based

1498
00:46:07,820 --> 00:46:09,530
0,270 270,570 570,660 660,990 1020,1710
on both of them combined,

1499
00:46:09,770 --> 00:46:11,390
0,300 300,540 750,1020 1020,1380 1380,1620
that's right that's right just

1500
00:46:11,390 --> 00:46:12,590
0,60 90,330 330,570 570,660 660,1200
to be clear the iti

1501
00:46:12,590 --> 00:46:13,850
0,150 150,360 360,420 420,510 510,1260
is part of a different

1502
00:46:13,970 --> 00:46:15,740
0,780 780,1410
quite different.

1503
00:46:15,830 --> 00:46:18,420
0,420 420,720 720,1050 1050,2040
A virtual machine implementation.

1504
00:46:18,420 --> 00:46:20,430
0,330 330,630 630,1140 1200,1350 1350,2010
Virtual machine design that requires

1505
00:46:20,460 --> 00:46:22,260
0,330 330,660 930,1170 1170,1620 1620,1800
hardware support, I'm assuming this

1506
00:46:22,260 --> 00:46:23,040
0,90 90,180 180,450 450,630 630,780
is a story about how

1507
00:46:23,040 --> 00:46:24,480
0,240 420,810 810,840 840,1110 1110,1440
to build a virtual machine

1508
00:46:24,480 --> 00:46:25,920
0,90 90,270 270,720 720,1050 1050,1440
with no special hardware support

1509
00:46:25,920 --> 00:46:28,220
0,210 210,540 810,1380 1380,1830
other than trapping on.

1510
00:46:28,220 --> 00:46:29,860
0,360 360,1110
Privileged instructions.

1511
00:46:31,680 --> 00:46:33,510
0,450 480,840 840,1050 1050,1350 1350,1830
Um, does this mess up

1512
00:46:33,510 --> 00:46:35,980
0,390 390,1020 1020,1170 1170,1770
direct mapping in anyway.

1513
00:46:37,040 --> 00:46:38,000
0,540 540,660 660,810 810,900 900,960
Well there won't be a

1514
00:46:38,000 --> 00:46:39,560
0,270 270,990
direct map.

1515
00:46:39,780 --> 00:46:42,570
0,720 1170,1440 1440,2010 2010,2160 2160,2790
A um, this will allow

1516
00:46:42,570 --> 00:46:44,600
0,150 150,690 720,840 840,1080
the guest, I mean.

1517
00:46:45,650 --> 00:46:47,030
0,600 600,720 720,1050 1050,1140 1140,1380
This will cause the guest

1518
00:46:47,030 --> 00:46:50,320
0,240 240,840 1560,2760
kernel dhahran correctly.

1519
00:46:50,720 --> 00:46:52,040
0,210 210,630 660,780 780,1020 1020,1320
With what the guest kernel

1520
00:46:52,040 --> 00:46:53,300
0,300 300,420 420,480 480,780 780,1260
thinks is the direct mapping.

1521
00:46:55,680 --> 00:46:56,880
0,120 120,570 570,720 720,780 780,1200
But it's not a direct

1522
00:46:56,880 --> 00:46:57,870
0,180 180,450 450,780 780,900 900,990
a direct mapping in the

1523
00:46:57,870 --> 00:46:59,040
0,360 360,750 750,870 870,990 990,1170
virtual world but it's not

1524
00:46:59,040 --> 00:47:01,480
0,60 60,390 390,810 810,1170
a direct mapping and.

1525
00:47:01,480 --> 00:47:02,940
0,120 120,210 210,390 390,810
On the real machine.

1526
00:47:05,130 --> 00:47:06,480
0,120 120,180 180,390 390,690 690,1350
But it doesn't matter because.

1527
00:47:08,720 --> 00:47:11,870
0,210 210,360 360,960 2160,2910 2970,3150
Because we're tricking yeah we're

1528
00:47:11,870 --> 00:47:13,490
0,270 270,360 360,690 690,930 1290,1620
tricking the guests into everything

1529
00:47:13,490 --> 00:47:14,270
0,270 270,450 450,570 570,660 660,780
looks just like it was

1530
00:47:14,270 --> 00:47:15,580
0,30 30,330 330,660
a direct mapping.

1531
00:47:17,780 --> 00:47:19,430
0,150 150,330 330,510 510,1140 1440,1650
Oh, one more question, you

1532
00:47:19,430 --> 00:47:20,990
0,330 360,540 540,960 960,1170 1170,1560
may be addressing this later

1533
00:47:20,990 --> 00:47:22,610
0,150 150,240 240,1050 1230,1470 1470,1620
but I wonder like when

1534
00:47:22,610 --> 00:47:24,590
0,90 90,780 780,1020 1020,1470 1470,1980
we discussed the trap mechanism

1535
00:47:24,590 --> 00:47:25,730
0,360 360,450 450,600 600,990 990,1140
earlier and this master we

1536
00:47:25,730 --> 00:47:27,830
0,510 510,630 630,870 870,1470 1470,2100
mentioned the high performance cost.

1537
00:47:28,260 --> 00:47:30,600
0,270 270,960 1410,1620 1620,1980 1980,2340
Two trapping but this sounds

1538
00:47:30,600 --> 00:47:32,370
0,210 210,840 870,1290 1290,1650 1650,1770
like there's way more of

1539
00:47:32,370 --> 00:47:33,900
0,180 180,900 900,1230 1230,1380 1380,1530
a performance hit when we

1540
00:47:33,900 --> 00:47:35,620
0,330 330,540 540,1170
use a vm.

1541
00:47:35,710 --> 00:47:37,660
0,840 840,1380 1380,1560 1560,1770 1770,1950
Yes, yes there's all these

1542
00:47:37,660 --> 00:47:39,550
0,750 750,840 840,1260 1440,1650 1650,1890
instructions, you know if you

1543
00:47:39,550 --> 00:47:41,200
0,90 90,780 930,1320 1320,1530 1530,1650
if your operating system may

1544
00:47:41,200 --> 00:47:42,700
0,330 330,390 390,630 630,930 1140,1500
excuse a lot of privilege

1545
00:47:42,700 --> 00:47:44,710
0,780 780,960 960,1500 1710,1920 1920,2010
instructions which may and you

1546
00:47:44,710 --> 00:47:45,280
0,210 210,240 240,360 360,420 420,570
spend a lot of time

1547
00:47:45,280 --> 00:47:46,210
0,60 60,120 120,420 420,780 780,930
in the operating system, then

1548
00:47:46,210 --> 00:47:47,050
0,60 60,510 510,600 600,690 690,840
the traps you may have

1549
00:47:47,050 --> 00:47:49,030
0,180 180,210 210,330 330,990 1530,1980
quite a few traps that

1550
00:47:49,030 --> 00:47:49,780
0,120 120,450 450,510 510,720 720,750
may cost you quite a

1551
00:47:49,780 --> 00:47:50,890
0,90 90,150 150,720 720,960 960,1110
bit of performance and that's

1552
00:47:50,890 --> 00:47:52,810
0,150 150,1080 1200,1560 1560,1650 1650,1920
what motivates a and a

1553
00:47:52,810 --> 00:47:53,740
0,150 150,300 300,420 420,600 600,930
little bit we'll talk about

1554
00:47:53,770 --> 00:47:56,020
0,480 480,870 870,1290 1290,1620 1620,2250
modern hardware support virtual machines

1555
00:47:56,020 --> 00:47:57,190
0,180 180,270 270,600 600,900 900,1170
which is what today's paper

1556
00:47:57,190 --> 00:47:59,080
0,150 150,510 840,1290 1350,1680 1680,1890
was using and their high

1557
00:47:59,080 --> 00:48:00,670
0,480 690,810 810,930 930,1440 1440,1590
cost of the traps is

1558
00:48:00,670 --> 00:48:02,050
0,240 240,510 510,630 630,720 720,1380
a lot of the motivation

1559
00:48:02,200 --> 00:48:03,940
0,300 300,600 600,990 990,1260 1260,1740
for why indo felt compelled

1560
00:48:03,940 --> 00:48:06,100
0,270 270,600 900,1470 1470,1800 1800,2160
to an AMD felt compelled

1561
00:48:06,100 --> 00:48:07,060
0,120 120,630
to add.

1562
00:48:07,060 --> 00:48:08,440
0,480 480,870 870,990 990,1080 1080,1380
Hardware support for a much

1563
00:48:08,440 --> 00:48:09,980
0,270 270,1050
more efficient.

1564
00:48:10,220 --> 00:48:12,110
0,330 690,1080 1080,1380 1380,1650 1650,1890
Or for virtual machine scheme

1565
00:48:12,110 --> 00:48:13,880
0,90 90,300 300,840 1290,1560 1560,1770
that had much many fewer

1566
00:48:13,880 --> 00:48:16,020
0,780
traps.

1567
00:48:16,260 --> 00:48:18,930
0,570 1260,1500 1500,1680 1680,2130 2250,2670
Yes that's quite important, but

1568
00:48:18,930 --> 00:48:19,860
0,180 180,450 450,750 750,780 780,930
this actually ran, I mean

1569
00:48:19,860 --> 00:48:20,700
0,90 90,300 300,600 600,780 780,840
for many years, this is

1570
00:48:20,700 --> 00:48:21,990
0,150 150,390 390,690 690,990 990,1290
what people did for virtual

1571
00:48:21,990 --> 00:48:23,700
0,450 450,720 1080,1260 1260,1470 1470,1710
machines and it was very

1572
00:48:23,700 --> 00:48:24,990
0,570 570,660 660,750 750,1170 1170,1290
successful, and it works and

1573
00:48:24,990 --> 00:48:27,690
0,420 420,510 510,660 660,1200 2430,2700
it's so much slower but

1574
00:48:27,690 --> 00:48:28,530
0,180 180,300 300,420 420,750 750,840
not so much slower that

1575
00:48:28,530 --> 00:48:29,610
0,240 240,390 390,630 630,870 870,1080
people didn't like it, people

1576
00:48:29,610 --> 00:48:30,740
0,180 180,240 240,300 300,600
like it a lot.

1577
00:48:34,210 --> 00:48:35,500
0,300 300,450 450,600 600,1020 1020,1290
Okay any more questions about

1578
00:48:35,500 --> 00:48:38,110
0,300 330,750 750,900 900,1800 1830,2610
the trap and emulate strategy

1579
00:48:38,110 --> 00:48:39,860
0,240 240,540 540,1230
for page tables.

1580
00:48:44,140 --> 00:48:45,880
0,240 240,450 450,630 630,1020 1020,1740
Okay, let me a final

1581
00:48:46,120 --> 00:48:47,320
0,480 510,810 810,870 870,930 930,1200
a piece of the trap

1582
00:48:47,320 --> 00:48:50,280
0,120 120,480 480,990
and emulate story.

1583
00:48:51,220 --> 00:48:52,030
0,390 390,480 480,540 540,660 660,810
Um, let me talk about

1584
00:48:52,030 --> 00:48:53,380
0,870
devices.

1585
00:48:54,630 --> 00:48:55,980
0,720
I'm.

1586
00:48:56,240 --> 00:48:57,440
0,180 180,360 360,420 420,750 750,1200
So here I'm talking about,

1587
00:48:57,470 --> 00:48:59,870
0,450 930,1440 1440,1710 1710,2070 2070,2400
um, you know ordinary operating

1588
00:48:59,870 --> 00:49:00,830
0,270 270,630 630,720 720,810 810,960
system expects to be able

1589
00:49:00,830 --> 00:49:02,630
0,90 90,300 300,540 540,1500 1530,1800
to get a describe to

1590
00:49:02,630 --> 00:49:03,980
0,330 330,570 570,870 870,1110 1110,1350
storage file system on and

1591
00:49:03,980 --> 00:49:06,410
0,390 390,990 990,1470 1470,2070 2070,2430
maybe network interface card, and

1592
00:49:06,470 --> 00:49:07,910
0,330 330,690 690,960 960,1350 1350,1440
maybe it's actually six oh

1593
00:49:07,910 --> 00:49:09,290
0,300 300,540 570,810 810,900 900,1380
you are so we can

1594
00:49:09,380 --> 00:49:11,360
0,420 420,510 510,600 600,1320 1710,1980
talk to its console, who

1595
00:49:11,360 --> 00:49:13,640
0,270 270,330 330,720 720,1260 1440,2280
knows the sound card graphics

1596
00:49:13,640 --> 00:49:15,410
0,690 690,810 810,1260 1260,1320 1320,1770
adapter a mouse, a keyboard,

1597
00:49:15,410 --> 00:49:16,820
0,90 90,270 270,330 330,780 900,1410
all kinds of stuff, um,

1598
00:49:17,090 --> 00:49:18,350
0,210 210,270 270,600 600,1110 1110,1260
so the operating system, we

1599
00:49:18,350 --> 00:49:20,120
0,150 150,270 270,1020 1050,1440 1440,1770
need to a virtual machine

1600
00:49:20,120 --> 00:49:20,930
0,270 270,450 450,540 540,660 660,810
scheme has to have some

1601
00:49:20,930 --> 00:49:24,470
0,570 900,1020 1020,1380 1560,2160 2250,3540
provision to allow allow guests.

1602
00:49:24,860 --> 00:49:26,270
0,450 510,720 720,930 930,1260 1260,1410
To at least trick them

1603
00:49:26,270 --> 00:49:27,350
0,240 240,600 600,750 750,870 870,1080
into thinking that all these

1604
00:49:27,350 --> 00:49:28,610
0,450 450,540 540,690 690,1020 1050,1260
devices that they need really

1605
00:49:28,610 --> 00:49:29,840
0,690
exist.

1606
00:49:30,200 --> 00:49:31,820
0,300 450,870 900,1170 1170,1380 1380,1620
Um, and there's three main

1607
00:49:31,820 --> 00:49:34,040
0,990 1020,1500
strategies, um.

1608
00:49:34,070 --> 00:49:36,680
0,180 180,450 450,1080 1380,1890
That people use a.

1609
00:49:36,980 --> 00:49:38,600
0,270 270,750 780,1110 1140,1380 1380,1620
One is just pick some

1610
00:49:38,600 --> 00:49:41,210
0,300 300,900 900,1830 1950,2490 2490,2610
very commonly used device in

1611
00:49:41,210 --> 00:49:42,290
0,60 60,510 510,600 600,750 750,1080
the class that you need

1612
00:49:42,290 --> 00:49:43,430
0,150 150,240 240,510 510,930 960,1140
say a disk drive and

1613
00:49:43,430 --> 00:49:46,620
0,210 210,450 810,1230 1710,2580
just do a emulation.

1614
00:49:47,070 --> 00:49:49,350
0,270 270,840 1530,1740 1740,1980 1980,2280
That is, you're not actually

1615
00:49:49,350 --> 00:49:51,300
0,270 270,360 360,540 540,1170 1680,1950
having a real device that

1616
00:49:51,300 --> 00:49:53,700
0,900 900,1440 1590,1920 1920,2040 2040,2400
vm just makes it look

1617
00:49:53,700 --> 00:49:54,930
0,240 240,450 450,930 930,1140 1140,1230
like this particular kind of

1618
00:49:54,930 --> 00:49:57,390
0,1110 1200,1410 1410,2130 2130,2310 2310,2460
describe a exists and that

1619
00:49:57,390 --> 00:49:58,590
0,240 240,540 540,660 660,1020 1020,1200
the guest is talking to

1620
00:49:58,590 --> 00:49:59,260
0,120
it.

1621
00:49:59,860 --> 00:50:01,180
0,390 600,870 870,960 960,1170 1170,1320
Um, and the way you

1622
00:50:01,180 --> 00:50:03,070
0,180 180,510 510,690 690,1350 1560,1890
would drive this emulation, a

1623
00:50:03,130 --> 00:50:05,500
0,780 1110,1470 1470,1680 1680,2010 2010,2370
typically a the guest operating

1624
00:50:05,500 --> 00:50:07,870
0,420 420,600 600,1020 1950,2280 2280,2370
system is gonna try to

1625
00:50:07,870 --> 00:50:09,430
0,240 240,330 330,420 420,870 870,1560
talk to the device through

1626
00:50:09,490 --> 00:50:11,620
0,510 510,840 840,1230 1230,1980 2010,2130
memory mapped control registers so

1627
00:50:11,620 --> 00:50:12,820
0,330 330,420 420,690 690,930 930,1200
this is how actually six

1628
00:50:12,820 --> 00:50:14,350
0,420 420,660 660,990 990,1230 1230,1530
talks to it's a you

1629
00:50:14,350 --> 00:50:15,700
0,210 300,750 750,1110 1140,1230 1230,1350
a you are you know

1630
00:50:15,700 --> 00:50:17,340
0,180 180,660 660,1170
the serial port.

1631
00:50:17,590 --> 00:50:22,680
0,510 1380,2400 2640,3270 3420,4230
A console a device.

1632
00:50:22,710 --> 00:50:23,820
0,150 150,270 270,450 450,930 930,1110
That you type characters too

1633
00:50:23,820 --> 00:50:25,110
0,90 90,180 180,570 570,1050 1050,1290
and that displays characters you

1634
00:50:25,320 --> 00:50:27,900
0,540 840,1590 1590,1830 1830,2250 2250,2580
actually talking to um control

1635
00:50:27,900 --> 00:50:29,160
0,480 480,570 570,630 630,990 990,1260
registers that are mapped that

1636
00:50:29,160 --> 00:50:31,860
0,600 600,690 690,1350 1620,2370 2370,2700
assumes the hardware has mapped

1637
00:50:31,860 --> 00:50:34,710
0,360 360,870 870,1380 1470,2340 2730,2850
ins a known address in

1638
00:50:34,710 --> 00:50:35,820
0,120 120,570 570,720 720,810 810,1110
the address in the {kernel's

1639
00:50:35,820 --> 00:50:37,680
0,90 90,360 360,900 1620,1800 1800,1860
-} address space and so

1640
00:50:37,680 --> 00:50:38,580
0,90 90,210 210,330 330,720 720,900
the way you emulate that

1641
00:50:38,580 --> 00:50:39,630
0,90 90,180 180,450 450,720 720,1050
in a virtual machine monitor

1642
00:50:39,630 --> 00:50:41,970
0,210 1020,1410 1410,1830 1830,2100 2100,2340
is actually not map those

1643
00:50:41,970 --> 00:50:43,920
0,690 810,1260 1260,1410 1410,1500 1500,1950
pages, um in the guest,

1644
00:50:43,920 --> 00:50:45,960
0,360 360,450 450,750 930,1710 1890,2040
instead you would allow or

1645
00:50:45,960 --> 00:50:47,490
0,180 180,330 330,690 690,810 810,1530
have those pages be invalid

1646
00:50:47,550 --> 00:50:49,140
0,270 270,540 540,720 720,1080 1080,1590
so that every time the

1647
00:50:49,230 --> 00:50:50,850
0,510 510,870 870,1170 1170,1500 1500,1620
guest operating system tried to

1648
00:50:50,850 --> 00:50:52,830
0,360 360,480 480,900 900,1380 1380,1980
use the uart hardware whatever

1649
00:50:52,980 --> 00:50:54,990
0,450 450,930 1110,1350 1350,1680 1680,2010
device hardware, the vm virtual

1650
00:50:54,990 --> 00:50:55,770
0,240 240,540 540,630 630,750 750,780
machine monitor will get a

1651
00:50:55,770 --> 00:50:57,240
0,540 720,900 900,960 960,1200 1200,1470
trap and the virtual machine

1652
00:50:57,240 --> 00:50:58,290
0,330 330,660 690,930 930,990 990,1050
monitor, we look at the

1653
00:50:58,290 --> 00:50:59,580
0,450 450,780 780,900 900,1140 1140,1290
instructions, seo is trying to

1654
00:50:59,580 --> 00:51:00,900
0,270 270,330 330,1050 1050,1230 1230,1320
send a character on the

1655
00:51:00,900 --> 00:51:02,430
0,180 180,540 570,960 1020,1410 1410,1530
u bar or read from

1656
00:51:02,430 --> 00:51:03,210
0,60 60,420 420,510 510,600 600,780
the disk or who knows

1657
00:51:03,210 --> 00:51:05,360
0,330 510,1290
what I'm.

1658
00:51:05,390 --> 00:51:07,160
0,300 300,870 900,1200 1200,1440 1440,1770
And the virtual machine monitor

1659
00:51:07,160 --> 00:51:08,540
0,240 240,420 420,540 540,1290 1290,1380
would have some simulation of

1660
00:51:08,540 --> 00:51:09,890
0,90 90,480 480,600 600,1260 1260,1350
a disc, a simulation of

1661
00:51:09,890 --> 00:51:14,600
0,240 240,1230 1290,2310 2700,3210 4050,4710
a serial device, um, and

1662
00:51:14,900 --> 00:51:16,070
0,210 210,270 270,510 510,690 690,1170
you know sort of invoke

1663
00:51:16,070 --> 00:51:17,690
0,150 150,870 870,960 960,1320 1320,1620
its simulation to figure out

1664
00:51:17,690 --> 00:51:19,310
0,510 510,600 600,1260 1260,1410 1410,1620
how to respond to the

1665
00:51:19,340 --> 00:51:21,590
0,360 360,840 840,990 990,1290 1950,2250
guest instruction and then allow

1666
00:51:21,590 --> 00:51:24,180
0,240 270,690 690,780 780,1320
the guest to resume.

1667
00:51:24,460 --> 00:51:25,270
0,150 150,210 210,330 330,420 420,810
And so this is basically

1668
00:51:25,270 --> 00:51:27,730
0,150 150,450 450,960 1380,1890 1890,2460
how q mu, a implements

1669
00:51:27,730 --> 00:51:30,490
0,330 780,1590 1590,1980 1980,2550 2550,2760
the uart console device that

1670
00:51:30,490 --> 00:51:31,990
0,150 150,300 300,540 540,1140 1290,1500
ex v six uses it

1671
00:51:31,990 --> 00:51:33,610
0,180 180,570 810,1140 1140,1440 1440,1620
just has there's actually no

1672
00:51:33,610 --> 00:51:35,470
0,450 450,810 810,1050 1050,1560 1560,1860
physical serial port insight, but

1673
00:51:35,560 --> 00:51:38,470
0,360 360,840 840,1860 1860,2310 2640,2910
q mu emulates one um

1674
00:51:38,470 --> 00:51:39,910
0,120 120,510 540,840 840,1050 1050,1440
to keep xp, six happy.

1675
00:51:40,360 --> 00:51:40,810
0,120 120,210 210,330 330,390 390,450
And so this is a

1676
00:51:40,810 --> 00:51:42,280
0,300 300,930
common strategy.

1677
00:51:42,400 --> 00:51:44,140
0,390 540,990 1170,1410 1410,1590 1590,1740
Um, it's um can be

1678
00:51:44,140 --> 00:51:45,670
0,240 240,390 390,870 870,1080 1080,1530
very low performance though because

1679
00:51:45,670 --> 00:51:47,080
0,120 120,540 540,600 600,1200 1260,1410
it involves a trap and

1680
00:51:47,080 --> 00:51:48,370
0,120 120,480 480,870 870,1050 1050,1290
the operating system for every

1681
00:51:48,370 --> 00:51:50,020
0,540 540,810 810,900 900,1470 1470,1650
interaction between the guest and

1682
00:51:50,020 --> 00:51:51,380
0,60 60,390 390,750
the device hardware.

1683
00:51:51,770 --> 00:51:53,060
0,420 420,510 510,660 660,960 960,1290
But for low speed stuff,

1684
00:51:53,060 --> 00:51:54,140
0,480
it's.

1685
00:51:54,290 --> 00:51:56,270
0,270 270,510 510,690 690,900 1560,1980
A works pretty well, a

1686
00:51:56,300 --> 00:51:58,400
0,480 480,1080 1080,1260 1260,1530 1530,2100
second strategy that's often used.

1687
00:51:58,980 --> 00:51:59,920
0,390
I'm.

1688
00:52:00,100 --> 00:52:01,540
0,180 180,390 390,600 600,1080 1080,1440
And actually, but if your

1689
00:52:02,350 --> 00:52:03,430
0,210 210,360 360,810 810,990 990,1080
if your goal is to

1690
00:52:03,430 --> 00:52:05,080
0,840 1110,1290 1290,1380 1380,1470 1470,1650
provide is to be able

1691
00:52:05,080 --> 00:52:06,520
0,90 90,480 480,870 870,1320 1320,1440
to boot operating systems that

1692
00:52:06,520 --> 00:52:07,780
0,150 150,570 570,900 900,1050 1050,1260
have no idea, they're running

1693
00:52:07,780 --> 00:52:09,880
0,90 90,120 120,420 420,1140 1590,2100
on a virtual machine, um,

1694
00:52:10,090 --> 00:52:11,320
0,450 450,570 570,780 780,1140 1140,1230
this is pretty much the

1695
00:52:11,320 --> 00:52:12,040
0,120 120,210 210,330 330,420 420,720
way you have to go.

1696
00:52:12,640 --> 00:52:13,700
0,510
I'm.

1697
00:52:14,340 --> 00:52:15,510
0,240 240,420 420,570 570,720 720,1170
There's really no other choice,

1698
00:52:15,510 --> 00:52:17,610
0,330 540,1110 1110,1170 1170,1500 1500,2100
but in the modern world,

1699
00:52:17,610 --> 00:52:18,900
0,180 180,390 540,900 900,1050 1050,1290
you know, um, it's often

1700
00:52:18,900 --> 00:52:19,890
0,90 90,420 420,570 570,660 660,990
the case that the operating

1701
00:52:19,890 --> 00:52:22,020
0,750 810,1080 1080,1800 1800,1950 1950,2130
systems are aware that they're

1702
00:52:22,020 --> 00:52:23,430
0,330 330,960 990,1140 1140,1200 1200,1410
actually running at a low

1703
00:52:23,430 --> 00:52:24,390
0,240 240,330 330,540 540,840 840,960
level at least aware that

1704
00:52:24,390 --> 00:52:25,290
0,150 150,420 420,510 510,780 780,900
they're running on top of

1705
00:52:25,290 --> 00:52:27,690
0,480 510,810 810,1290 1650,2070 2070,2400
a virtual machine, and so

1706
00:52:27,990 --> 00:52:29,910
0,480 660,1050 1050,1590 1590,1740 1740,1920
a different strategy is to

1707
00:52:29,910 --> 00:52:32,040
0,420 420,810 810,1500 1500,1680 1680,2130
provide virtual devices that is.

1708
00:52:32,870 --> 00:52:34,190
0,360 360,600 600,750 750,810 810,1320
I'm not trying to emulate

1709
00:52:34,190 --> 00:52:37,060
0,60 60,270 270,990 1050,2340
a real device, but.

1710
00:52:37,060 --> 00:52:39,550
0,540 720,1350 1350,1740 1770,2040 2040,2490
Um, cook up a device

1711
00:52:39,550 --> 00:52:42,040
0,630 630,900 900,1080 1080,1680 1680,2490
interface that is particularly efficient

1712
00:52:42,070 --> 00:52:45,790
0,540 540,1200 1920,2790 2820,3300 3300,3720
for the provides efficient ways

1713
00:52:45,790 --> 00:52:47,800
0,180 180,600 840,1470 1470,1920 1920,2010
for the device driver in

1714
00:52:47,800 --> 00:52:49,120
0,150 150,780 840,1050 1050,1140 1140,1320
the guest to be able

1715
00:52:49,120 --> 00:52:51,190
0,90 90,450 450,960 1200,1530 1530,2070
to talk to a device

1716
00:52:51,190 --> 00:52:52,690
0,420 420,780 780,870 870,1140 1140,1500
support inside the virtual machine

1717
00:52:52,690 --> 00:52:55,180
0,510 900,1440 1530,2040 2040,2280 2280,2490
monitor and so you might

1718
00:52:55,180 --> 00:52:56,800
0,270 270,750 750,1050 1050,1290 1290,1620
not have memory map control

1719
00:52:56,800 --> 00:52:57,970
0,510 510,600 600,810 810,930 930,1170
registers and said you might

1720
00:52:57,970 --> 00:53:00,880
0,390 420,870 1050,1680 2130,2400 2400,2910
have sort of a queue

1721
00:53:00,880 --> 00:53:05,140
0,300 300,1320 1560,2760 2760,3390 3420,4260
of command structures in memory

1722
00:53:05,140 --> 00:53:07,060
0,150 150,450 450,780 1020,1590 1590,1920
in which the guest operating

1723
00:53:07,060 --> 00:53:08,710
0,300 300,510 510,720 720,900 900,1650
system would write its commands

1724
00:53:08,710 --> 00:53:10,020
0,120 120,540 570,990
to the um.

1725
00:53:10,510 --> 00:53:13,030
0,300 330,450 450,540 540,1290 2160,2520
A to the debates and

1726
00:53:13,150 --> 00:53:14,590
0,150 150,510 660,990 990,1170 1170,1440
in fact X six also

1727
00:53:14,590 --> 00:53:15,550
0,240 240,450 450,570 570,870 870,960
uses one of these, if

1728
00:53:15,550 --> 00:53:16,270
0,120 120,330 330,480 480,720 720,720
you look at the um.

1729
00:53:17,990 --> 00:53:20,180
0,360 360,690 690,990 990,1530 1530,2190
Xc six vert, io disk.

1730
00:53:22,160 --> 00:53:24,140
0,360 390,930 930,1230 1230,1590 1710,1980
A variety dot c you'll

1731
00:53:24,140 --> 00:53:26,060
0,270 270,510 540,1140 1140,1680 1680,1920
see the guest and of

1732
00:53:26,060 --> 00:53:29,750
0,360 420,1350 2010,2790 2790,3240 3240,3690
a um, a device driver

1733
00:53:29,750 --> 00:53:31,460
0,390 390,510 510,780 780,900 900,1710
intended to talk to a

1734
00:53:31,460 --> 00:53:33,530
0,420 420,870 870,1440 1440,1650 1650,2070
disk virtual device that's implemented

1735
00:53:33,530 --> 00:53:36,110
0,150 150,480 480,870 1200,1650 1860,2580
by q mu, and it

1736
00:53:36,110 --> 00:53:37,820
0,630 630,1200
uses, um.

1737
00:53:37,820 --> 00:53:40,040
0,300 300,630 630,1050 1080,1680 1680,2220
Either little or almost not

1738
00:53:40,070 --> 00:53:42,740
0,720 720,990 990,1110 1110,1650 2100,2670
either little or no a

1739
00:53:42,950 --> 00:53:44,660
0,270 270,480 480,810 810,1560 1560,1710
memory mapped control registers and

1740
00:53:44,660 --> 00:53:45,560
0,150 150,210 210,450 450,600 600,900
so it doesn't really rely

1741
00:53:45,560 --> 00:53:47,390
0,90 90,840 960,1320 1320,1710 1710,1830
on traps and instead it

1742
00:53:47,390 --> 00:53:49,370
0,540 540,900 1020,1260 1260,1620 1650,1980
formats up, um, this sort

1743
00:53:49,370 --> 00:53:51,740
0,90 90,720 720,1080 1170,1860 1860,2370
of queue of commands, memory,

1744
00:53:51,860 --> 00:53:53,220
0,240 240,420 420,480 480,960
um, as I mentioned.

1745
00:53:53,980 --> 00:53:55,180
0,330 330,480 480,750 750,990 990,1200
And then q mu looks

1746
00:53:55,180 --> 00:53:56,410
0,90 90,270 270,660 660,720 720,1230
at these commands in memory

1747
00:53:56,410 --> 00:53:58,030
0,270 270,780 780,1050 1110,1530 1530,1620
and applies them not to

1748
00:53:58,030 --> 00:53:59,560
0,90 90,300 300,780 780,1080 1080,1530
a real disk, but to

1749
00:53:59,920 --> 00:54:01,780
0,240 240,840 840,1170 1320,1530 1530,1860
a file like for ass

1750
00:54:01,780 --> 00:54:04,660
0,450 450,690 690,1380 1680,2190 2280,2880
fs dot image, um, que,

1751
00:54:04,660 --> 00:54:06,130
0,240 240,840 840,1140 1140,1230 1230,1470
mu applies commands to fs

1752
00:54:06,130 --> 00:54:07,780
0,450 450,750 750,960 1290,1590 1590,1650
damage instead of instead of

1753
00:54:07,780 --> 00:54:09,140
0,240 240,330 330,870
using a real.

1754
00:54:09,260 --> 00:54:10,490
0,300 330,510 510,570 570,870 870,1230
A piece of device hardware.

1755
00:54:11,160 --> 00:54:14,520
0,480 480,720 720,1380 1860,2430 2850,3360
Just another strategy a and

1756
00:54:14,520 --> 00:54:15,630
0,60 60,300 300,750 750,840 840,1110
a third strategy that people

1757
00:54:15,630 --> 00:54:17,280
0,750 810,990 990,1170 1170,1380 1380,1650
use so this is higher

1758
00:54:17,280 --> 00:54:19,290
0,510 510,660 660,990 990,1470 1470,2010
performance and straight emulation, because

1759
00:54:20,130 --> 00:54:22,230
0,210 210,510 690,1200 1200,1320 1320,2100
you can design the interface

1760
00:54:22,260 --> 00:54:23,100
0,180 180,240 240,510 510,780 780,840
so it doesn't require a

1761
00:54:23,100 --> 00:54:24,900
0,150 150,210 210,870 1050,1500 1500,1800
lot of traps, a final

1762
00:54:24,900 --> 00:54:26,640
0,420 420,690 690,1350
strategy people use.

1763
00:54:27,480 --> 00:54:29,880
0,510 630,1440 1440,1620 1620,2070 2070,2400
Um is a pass through

1764
00:54:29,880 --> 00:54:31,620
0,180 180,390 390,1230
a real device.

1765
00:54:33,910 --> 00:54:34,960
0,210 210,360 360,510 510,570 570,1050
And that sort of classic

1766
00:54:34,960 --> 00:54:36,730
0,480 480,570 570,990 990,1350 1350,1770
situation for this network interface

1767
00:54:36,730 --> 00:54:38,290
0,660 660,750 750,930 1230,1380 1380,1560
controllers, you know, um, they

1768
00:54:38,290 --> 00:54:40,270
0,420 420,750 750,870 870,1200 1260,1980
provide access to the network

1769
00:54:40,510 --> 00:54:45,340
0,540 540,1500 1980,2640 2640,3510 4380,4830
and modern network devices actually

1770
00:54:45,340 --> 00:54:47,800
0,420 450,1020 1020,1710 1710,1920 1920,2460
have hardware support for talking

1771
00:54:47,800 --> 00:54:50,800
0,480 510,1230 1230,1680 1710,2190 2190,3000
to multiple guest operating systems

1772
00:54:50,800 --> 00:54:52,030
0,270 270,480 480,510 510,840 840,1230
running under a virtual machine

1773
00:54:52,030 --> 00:54:53,500
0,450 540,720 720,840 840,960 960,1470
monitor so you can configure

1774
00:54:53,500 --> 00:54:55,180
0,0 0,480 480,840 900,1140 1140,1680
a modern Nick to actually

1775
00:54:55,210 --> 00:54:57,370
0,720 720,870 870,1020 1020,1200 1200,2160
act as if it's multiple

1776
00:54:57,400 --> 00:54:58,800
0,1080
independent.

1777
00:54:58,800 --> 00:55:00,780
0,510 510,1020 1020,1350 1350,1800 1800,1980
Apparently independent mix one for

1778
00:55:00,780 --> 00:55:02,850
0,360 360,690 690,1140 1140,1680 1830,2070
each guest operating system and

1779
00:55:02,850 --> 00:55:04,170
0,90 90,180 180,420 420,810 810,1320
then the guest operating system

1780
00:55:04,260 --> 00:55:06,720
0,360 360,720 720,1590 1980,2310 2310,2460
can talk directly can be

1781
00:55:06,720 --> 00:55:08,100
0,450 450,570 570,780 810,1080 1080,1380
configured by the virtual machine

1782
00:55:08,100 --> 00:55:09,150
0,360 360,480 480,600 600,720 720,1050
monitors so that is allowed

1783
00:55:09,150 --> 00:55:11,550
0,90 90,360 360,1050 1080,1440 1530,2400
to talk directly to its

1784
00:55:11,670 --> 00:55:12,990
0,240 240,300 300,900 900,1020 1020,1320
sort of slice of the

1785
00:55:13,170 --> 00:55:16,230
0,540 540,960 960,1260 1260,1980 2910,3060
network interface card hardware with

1786
00:55:16,230 --> 00:55:17,840
0,300 300,450 450,1140
very high efficiency.

1787
00:55:17,840 --> 00:55:19,250
0,150 150,300 300,390 390,480 480,1410
So this is the modern

1788
00:55:19,820 --> 00:55:22,560
0,270 270,840 840,1230 1380,2130
high performance way, um.

1789
00:55:22,650 --> 00:55:24,750
0,120 120,360 360,690 690,990 990,2100
The guest operating system probably.

1790
00:55:25,440 --> 00:55:27,030
0,600 690,870 870,1290 1290,1380 1380,1590
Um, in theory I think

1791
00:55:27,030 --> 00:55:28,260
0,120 120,240 240,960 990,1110 1110,1230
you could design you could

1792
00:55:28,260 --> 00:55:28,950
0,210 210,390 390,480 480,600 600,690
set this up to the

1793
00:55:28,950 --> 00:55:30,210
0,240 240,540 540,840 840,1080 1080,1260
guest operating system wasn't really

1794
00:55:30,210 --> 00:55:31,520
0,630
aware.

1795
00:55:31,580 --> 00:55:32,600
0,210 210,450 450,690 690,810 810,1020
Did anything odd was going

1796
00:55:32,600 --> 00:55:33,140
0,150 150,240 240,330 330,450 450,540
on, but I think in

1797
00:55:33,140 --> 00:55:34,940
0,570 570,840 930,1200 1200,1530 1530,1800
practice the guest operating system

1798
00:55:34,940 --> 00:55:36,350
0,330 330,660 660,840 840,900 900,1410
device drivers kind of node.

1799
00:55:38,340 --> 00:55:39,420
0,270 270,600 600,840 840,1020 1020,1080
They're talking to one of

1800
00:55:39,420 --> 00:55:41,340
0,150 150,630 660,990 990,1320 1320,1920
these special network interface cards.

1801
00:55:42,690 --> 00:55:45,100
0,420 420,780 1110,1740
Alright, so, um.

1802
00:55:45,300 --> 00:55:46,320
0,270 270,480 480,540 540,630 630,1020
So these are the options

1803
00:55:46,320 --> 00:55:48,990
0,120 120,720 1560,1740 1740,2310 2340,2670
for devices, in fact I

1804
00:55:48,990 --> 00:55:52,650
0,0 840,1290 1290,1980 1980,2700 3090,3660
I I believe that most

1805
00:55:52,650 --> 00:55:54,780
0,90 90,210 210,1050 1050,1260 1260,2130
of the difficulty in implementing

1806
00:55:54,780 --> 00:55:56,060
0,690
a.

1807
00:55:56,180 --> 00:55:59,420
0,300 300,630 630,1350 1500,2310 2640,3240
Virtual machine monitor today, um,

1808
00:55:59,780 --> 00:56:02,180
0,570 570,1260 1260,1770 1770,2010 2040,2400
yeah comes in the form

1809
00:56:02,180 --> 00:56:03,680
0,90 90,330 330,600 810,1170 1170,1500
of trying to cook up

1810
00:56:03,680 --> 00:56:05,720
0,450 450,1080 1080,1230 1230,1560 1560,2040
device emulation and device drivers

1811
00:56:05,720 --> 00:56:09,500
0,120 120,360 2610,3030 3030,3540 3540,3780
that are a sufficiently good

1812
00:56:09,500 --> 00:56:11,240
0,90 90,750 750,990 990,1200 1200,1740
that they'll actually work correctly

1813
00:56:11,240 --> 00:56:13,910
0,570 840,1230 1440,2010 2040,2370 2370,2670
with a real guest operating

1814
00:56:13,910 --> 00:56:15,470
0,630 690,810 810,900 900,1260 1290,1560
systems, this is where probably

1815
00:56:15,470 --> 00:56:16,340
0,60 60,510 510,570 570,630 630,870
the majority of the work

1816
00:56:16,340 --> 00:56:17,600
0,270 300,810 810,900 900,1080 1080,1260
is particularly if you need

1817
00:56:17,600 --> 00:56:19,260
0,90 90,240 240,420 420,1260
to use this emulation.

1818
00:56:19,440 --> 00:56:21,420
0,570 660,1440
A strategy.

1819
00:56:23,540 --> 00:56:25,700
0,150 150,450 450,600 600,1290
Any questions about devices.

1820
00:56:32,700 --> 00:56:34,800
0,390 390,810 840,1020 1020,1560 1560,2100
Okay, what what exactly is

1821
00:56:35,160 --> 00:56:36,270
0,120 120,120 120,630 630,900 900,1110
AI I didn't quite get

1822
00:56:36,270 --> 00:56:38,190
0,90 90,660 660,1080 1080,1260 1260,1920
the difference between the virtual

1823
00:56:38,190 --> 00:56:41,100
0,270 270,1170 1260,1500 1500,1890 2220,2910
and emulation because they don't

1824
00:56:41,130 --> 00:56:42,930
0,330 330,600 600,840 840,1380 1650,1800
like they they're similar they're

1825
00:56:42,930 --> 00:56:45,690
0,570 690,1110 1650,2130 2160,2700 2700,2760
similar, um the here's a

1826
00:56:45,690 --> 00:56:46,530
0,90 90,180 180,330 330,540 540,840
way to think about it,

1827
00:56:46,740 --> 00:56:48,330
0,330 330,690 720,1140 1140,1230 1230,1590
if you're booting an operating

1828
00:56:48,330 --> 00:56:49,590
0,300 300,390 390,540 540,990 990,1260
system that has no idea

1829
00:56:49,590 --> 00:56:51,140
0,210 210,510 510,1110
about virtual machine.

1830
00:56:52,100 --> 00:56:53,000
0,150 150,390 420,570 570,780 780,900
He said it probably has

1831
00:56:53,000 --> 00:56:54,620
0,60 60,300 300,660 690,1110 1110,1620
a lot of disk drivers

1832
00:56:54,620 --> 00:56:55,160
0,90 90,240 240,330 330,450 450,540
in it but they're all

1833
00:56:55,160 --> 00:56:56,510
0,180 180,480 480,1110 1140,1260 1260,1350
for real hardware that you

1834
00:56:56,510 --> 00:56:58,220
0,90 90,180 180,450 750,1380 1410,1710
can go out physical chunks

1835
00:56:58,220 --> 00:56:59,030
0,60 60,540 540,630 630,720 720,810
of hardware that you can

1836
00:56:59,030 --> 00:57:00,050
0,60 60,180 180,270 270,690 840,1020
go out and buy and

1837
00:57:00,050 --> 00:57:00,470
0,90 90,210 210,300 300,360 360,420
that means that if you

1838
00:57:00,470 --> 00:57:01,220
0,120 120,180 180,420 420,600 600,750
want to boot, that kind

1839
00:57:01,220 --> 00:57:02,240
0,60 60,450 450,870 870,930 930,1020
of operating system on your

1840
00:57:02,240 --> 00:57:04,580
0,240 240,780 960,1500 1770,2100 2100,2340
virtual machine, um, you need

1841
00:57:04,580 --> 00:57:08,180
0,210 210,540 810,1620 1890,2970 2970,3600
to have a exact emulation,

1842
00:57:08,180 --> 00:57:09,200
0,60 60,180 180,270 270,870 870,1020
you need to choose one

1843
00:57:09,200 --> 00:57:10,190
0,60 60,240 240,600 600,900 900,990
of those real pieces of

1844
00:57:10,190 --> 00:57:11,750
0,420 420,510 510,600 600,660 660,1560
hardware and have a precise

1845
00:57:11,780 --> 00:57:14,030
0,450 450,930 1260,1890 1890,1980 1980,2250
super accurate emulation of that

1846
00:57:14,030 --> 00:57:15,220
0,720
hardware.

1847
00:57:15,340 --> 00:57:17,470
0,540 570,840 840,1110 1110,1440 1620,2130
I'm so at the and

1848
00:57:17,470 --> 00:57:18,420
0,390
and.

1849
00:57:18,450 --> 00:57:20,190
0,330 870,1110 1110,1380 1380,1530 1530,1740
Mean people totally do that,

1850
00:57:20,190 --> 00:57:21,560
0,150 150,270 270,870
so that works.

1851
00:57:21,560 --> 00:57:23,300
0,690 1200,1410 1410,1530 1530,1620 1620,1740
However, and that would be

1852
00:57:23,300 --> 00:57:28,100
0,720 1710,2790 3240,3870 3870,3960 3960,4800
fine except most of these

1853
00:57:28,190 --> 00:57:30,290
0,270 270,480 480,1230 1260,1560 1830,2100
for real hardware that the

1854
00:57:30,290 --> 00:57:32,810
0,390 390,1050 1080,1350 1350,1680 1680,2520
device interfaces were not design,

1855
00:57:32,810 --> 00:57:34,010
0,90 90,420 420,870 870,960 960,1200
the hardware interfaces were not

1856
00:57:34,010 --> 00:57:36,320
0,900 1230,1380 1380,1500 1500,2160 2160,2310
designed to be efficient with

1857
00:57:36,320 --> 00:57:37,730
0,30 30,420 420,540 540,1020 1050,1410
a trap and emulate virtual

1858
00:57:37,730 --> 00:57:39,290
0,360 360,900 1020,1140 1140,1320 1320,1560
machine monitor and so it's

1859
00:57:39,290 --> 00:57:41,000
0,540 540,810 810,900 900,1410 1410,1710
very often the case that

1860
00:57:41,210 --> 00:57:43,220
0,240 240,450 450,1020 1260,1890 1890,2010
the real devices requires you

1861
00:57:43,220 --> 00:57:44,630
0,210 300,900 900,1020 1020,1260 1260,1410
to read and write its

1862
00:57:44,630 --> 00:57:46,680
0,420 420,960 960,1050 1050,1650
control registers a lot.

1863
00:57:46,900 --> 00:57:48,220
0,360 360,450 450,750 750,1050 1050,1320
But the virtual machine monitor

1864
00:57:48,220 --> 00:57:49,510
0,360 360,450 450,600 600,1110 1110,1290
has to get control for

1865
00:57:49,510 --> 00:57:50,830
0,270 270,600 600,690 690,900 960,1320
every right of a device

1866
00:57:50,830 --> 00:57:53,140
0,390 390,930 1380,1890 1890,2040 2040,2310
control register because it needs

1867
00:57:53,140 --> 00:57:55,480
0,120 120,690 1350,1800 1920,2190 2190,2340
to emulate and that means

1868
00:57:55,480 --> 00:57:56,530
0,210 210,540 540,840 840,930 930,1050
that every right of a

1869
00:57:56,530 --> 00:57:58,540
0,300 300,660 660,1590 1590,1920 1920,2010
device control register results in

1870
00:57:58,540 --> 00:57:59,590
0,120 120,510 510,660 660,750 750,1050
a trap into the virtual

1871
00:57:59,590 --> 00:58:01,270
0,330 330,660 660,1110 1140,1500 1500,1680
machine monitor which costs maybe

1872
00:58:01,270 --> 00:58:02,860
0,330 330,390 390,1140
hundreds of cycles.

1873
00:58:02,860 --> 00:58:04,150
0,450 630,900 900,1020 1020,1170 1170,1290
Um that means this is

1874
00:58:04,150 --> 00:58:06,640
0,930 1020,1170 1170,1290 1290,2010 2190,2490
slow, this is inefficient and

1875
00:58:06,640 --> 00:58:08,410
0,150 150,360 360,840 840,1410 1590,1770
so the difference here is

1876
00:58:08,410 --> 00:58:10,990
0,120 120,540 540,810 1290,2100 2100,2580
that instead of slavishly mimicking

1877
00:58:10,990 --> 00:58:13,180
0,90 90,300 300,1200 1230,1530 1530,2190
a real device, some designers

1878
00:58:13,180 --> 00:58:14,660
0,210 210,420 420,870
come up with.

1879
00:58:16,090 --> 00:58:19,570
0,450 1020,1890 1890,2940 2970,3210 3210,3480
A device interface, that's not

1880
00:58:19,570 --> 00:58:20,770
0,450 450,600 600,810 810,990 990,1200
implemented by any real piece

1881
00:58:20,770 --> 00:58:22,180
0,90 90,810
of hardware.

1882
00:58:22,180 --> 00:58:23,140
0,120 120,360 360,780 780,900 900,960
But only implemented by a

1883
00:58:23,140 --> 00:58:24,340
0,300 300,600 600,960 960,1110 1110,1200
virtual machine monitor and it

1884
00:58:24,340 --> 00:58:25,540
0,210 210,600 600,690 690,780 780,1200
just happens to be designed

1885
00:58:25,540 --> 00:58:26,320
0,90 90,150 150,330 330,480 480,780
in a way that doesn't

1886
00:58:26,320 --> 00:58:28,000
0,420 420,480 480,660 660,750 750,1680
require a lot of traps.

1887
00:58:29,160 --> 00:58:30,690
0,420 420,510 510,1050 1050,1170 1170,1530
Instead of chatting with control

1888
00:58:30,690 --> 00:58:32,220
0,540 540,630 630,1080 1080,1170 1170,1530
registers and expecting the device

1889
00:58:32,220 --> 00:58:34,770
0,150 150,900 1230,2010 2190,2370 2370,2550
to respond immediately, which really

1890
00:58:34,770 --> 00:58:37,410
0,480 480,510 510,930 1230,1980 2310,2640
requires a trap, instead the

1891
00:58:37,410 --> 00:58:38,730
0,330 330,630 630,1020 1020,1140 1140,1320
device driver and that sort

1892
00:58:38,730 --> 00:58:41,220
0,120 300,1110 1110,1500 1500,1590 1590,2490
of virtual hardware are decoupled

1893
00:58:41,430 --> 00:58:42,750
0,150 150,390 390,660 660,1140 1140,1320
and don't ever require sort

1894
00:58:42,750 --> 00:58:45,400
0,90 90,870 1470,2190
of immediate interaction.

1895
00:58:45,400 --> 00:58:47,230
0,690 1080,1230 1230,1440 1440,1680 1680,1830
Still, in that case, the

1896
00:58:47,230 --> 00:58:49,030
0,360 360,720 720,1050 1050,1530 1560,1800
guest needs its own like

1897
00:58:49,030 --> 00:58:50,410
0,90 90,270 270,930 1020,1260 1260,1380
a new driver, so it's

1898
00:58:50,410 --> 00:58:51,610
0,180 180,510 600,810 810,1050 1050,1200
just like the guests will

1899
00:58:51,610 --> 00:58:53,140
0,180 180,240 240,780 780,1260 1290,1530
have a driver for this

1900
00:58:53,140 --> 00:58:54,190
0,390 390,480 480,600 600,930 930,1050
model of the disk and

1901
00:58:54,190 --> 00:58:55,210
0,210 210,540 540,600 600,690 690,1020
that model of the disc

1902
00:58:55,210 --> 00:58:56,410
0,120 120,630 630,810 810,870 870,1200
and also have a driver

1903
00:58:56,410 --> 00:58:57,910
0,150 150,270 270,690 690,1080 1140,1500
for a virtual list right

1904
00:58:57,910 --> 00:58:59,530
0,120 120,390 510,960 1050,1380 1380,1620
and so the xc six

1905
00:58:59,530 --> 00:59:01,240
0,270 270,570 600,900 900,1320 1410,1710
dots so so then, so

1906
00:59:01,240 --> 00:59:03,040
0,300 300,450 450,1110 1110,1530 1560,1800
if the functionality level you

1907
00:59:03,040 --> 00:59:04,240
0,180 180,420 420,870 870,1110 1110,1200
play this game, maybe you

1908
00:59:04,240 --> 00:59:06,580
0,210 210,600 630,1200 1230,1770 1770,2340
can boot any operating system.

1909
00:59:07,320 --> 00:59:08,310
0,450 450,510 510,600 600,750 750,990
Whereas, if you play this

1910
00:59:08,310 --> 00:59:09,090
0,180 180,270 270,390 390,600 600,780
game, you can only boot

1911
00:59:09,090 --> 00:59:10,170
0,360 360,720 720,810 810,900 900,1080
operating systems that have been

1912
00:59:10,170 --> 00:59:13,230
0,630 810,1260 1260,1860 1860,2400 2460,3060
taught about your virtual devices,

1913
00:59:13,230 --> 00:59:13,950
0,120 120,210 210,360 360,420 420,720
if you want to use

1914
00:59:14,250 --> 00:59:16,350
0,150 150,420 420,1020 1680,1980 1980,2100
the virtual devices, turns out

1915
00:59:16,350 --> 00:59:17,640
0,120 120,210 210,480 480,540 540,1290
this is actually a standard

1916
00:59:18,120 --> 00:59:19,460
0,390 390,840
that's a.

1917
00:59:19,550 --> 00:59:22,220
0,420 420,780 990,1560 1560,2190 2220,2670
Provided by multiple different virtual

1918
00:59:22,220 --> 00:59:24,080
0,420 420,1170 1200,1350 1350,1500 1500,1860
machine schemes, so with this

1919
00:59:24,560 --> 00:59:25,340
0,420 420,480 480,540 540,690 690,780
except for the fact that

1920
00:59:25,340 --> 00:59:26,150
0,60 60,240 240,600 600,690 690,810
we never tested it on

1921
00:59:26,150 --> 00:59:27,350
0,300 300,450 450,540 540,750 750,1200
anything other than q mu,

1922
00:59:27,530 --> 00:59:29,450
0,660 690,1500 1500,1560 1560,1800 1800,1920
this describe a index v

1923
00:59:29,450 --> 00:59:31,220
0,210 210,660 660,1230
six might work.

1924
00:59:31,250 --> 00:59:32,270
0,240 240,330 330,750 750,810 810,1020
Probably be modified to work

1925
00:59:32,270 --> 00:59:34,100
0,120 120,270 270,570 570,1350
on other virtual machines.

1926
00:59:34,540 --> 00:59:35,800
0,270 270,450 450,510 510,810 900,1260
So if I three X

1927
00:59:35,800 --> 00:59:37,210
0,300 300,480 480,1050 1050,1170 1170,1410
six was compiled for that

1928
00:59:37,210 --> 00:59:38,350
0,330 330,480 480,630 630,960 960,1140
board that you showed some

1929
00:59:38,350 --> 00:59:40,300
0,210 210,300 300,390 390,990 1350,1950
time in the beginning, um,

1930
00:59:40,570 --> 00:59:41,350
0,150 150,360 360,570 570,660 660,780
in that case, you would

1931
00:59:41,350 --> 00:59:42,130
0,180 180,300 300,420 420,480 480,780
have to have a different

1932
00:59:42,130 --> 00:59:43,450
0,270 270,630 630,900 900,1050 1050,1320
disk driver based on what

1933
00:59:43,450 --> 00:59:44,710
0,330 330,480 480,660 660,930 930,1260
disc that was running right

1934
00:59:45,040 --> 00:59:46,450
0,450 450,840 840,1110 1110,1320 1320,1410
yeah yeah I think you

1935
00:59:46,450 --> 00:59:47,140
0,120 120,240 240,390 390,450 450,690
may be able to buy

1936
00:59:47,140 --> 00:59:49,480
0,420 810,1200 1200,1530 1530,1770 1770,2340
discount real hardware disk interfaces

1937
00:59:49,480 --> 00:59:51,700
0,150 150,480 480,960 960,1470 1680,2220
that now support this interface,

1938
00:59:51,700 --> 00:59:53,260
0,300 300,510 510,1140 1200,1260 1260,1560
but but most I mean.

1939
00:59:53,830 --> 00:59:55,120
0,240 240,690 690,990 990,1170 1170,1290
Most described don't and we

1940
00:59:55,120 --> 00:59:55,900
0,90 90,270 270,360 360,720 720,780
would have to implement a

1941
00:59:55,900 --> 00:59:57,160
0,240 240,570 600,780 780,870 870,1260
new as as you said

1942
00:59:57,190 --> 00:59:57,910
0,150 150,270 270,330 330,630 630,720
we have to implement a

1943
00:59:57,910 --> 00:59:59,080
0,330 330,630 630,930 930,1080 1080,1170
new disk driver for a

1944
00:59:59,080 --> 01:00:01,340
0,240 240,510 510,840 1110,1710
real piece of hardware.

1945
01:00:03,390 --> 01:00:05,460
0,540
Yes.

1946
01:00:06,680 --> 01:00:07,960
0,690
Okay.

1947
01:00:08,080 --> 01:00:09,550
0,210 210,330 330,600 600,780 780,1470
Any other questions about devices.

1948
01:00:14,370 --> 01:00:17,040
0,120 120,420 870,1530 1530,2040 2490,2670
All right next topic I

1949
01:00:17,040 --> 01:00:19,200
0,210 210,390 390,780 780,1440 1440,2160
wanna talk about hardware support

1950
01:00:20,250 --> 01:00:21,540
0,720
for.

1951
01:00:21,710 --> 01:00:23,720
0,570 570,1470
Virtual machines.

1952
01:00:25,210 --> 01:00:26,580
0,750
HMM.

1953
01:00:27,750 --> 01:00:30,690
0,330 330,420 420,960 960,1830 1890,2940
And in particular Intel's vt.

1954
01:00:31,840 --> 01:00:34,900
0,360 360,930 1170,1500 1980,2370 2370,3060
X scheme, so what's motivating

1955
01:00:34,900 --> 01:00:36,800
0,180 180,1170
what motivated.

1956
01:00:37,490 --> 01:00:39,140
0,420 420,930 930,1080 1080,1290 1290,1650
A Intel and other hardware

1957
01:00:39,140 --> 01:00:42,230
0,690 690,1020 1200,1770 1920,2670 2760,3090
providers to um, add direct

1958
01:00:42,230 --> 01:00:44,270
0,300 300,750 750,1110 1140,1500 1500,2040
hardware support for virtual machines

1959
01:00:44,270 --> 01:00:45,470
0,240 300,690 690,810 810,1050 1050,1200
is a the fact that

1960
01:00:45,740 --> 01:00:47,870
0,450 450,690 690,960 960,1650 1800,2130
virtual machine uses pervasive sort

1961
01:00:47,870 --> 01:00:48,950
0,30 30,150 150,210 210,300 300,1080
a lot of our customers

1962
01:00:48,980 --> 01:00:49,730
0,300 300,510 510,570 570,690 690,750
were running a lot of

1963
01:00:49,730 --> 01:00:51,230
0,240 240,750 930,1290 1290,1440 1440,1500
virtual machines and b the

1964
01:00:51,230 --> 01:00:52,460
0,240 240,390 390,660 660,780 780,1230
fact that trap and emulate

1965
01:00:52,460 --> 01:00:53,630
0,150 150,390 390,570 570,990 990,1170
as I just described it

1966
01:00:54,080 --> 01:00:55,370
0,630 630,960 960,1020 1020,1200 1200,1290
often involves a lot of

1967
01:00:55,370 --> 01:00:57,140
0,510 510,1140 1140,1290 1290,1590 1590,1770
expensive traps, so it's not

1968
01:00:57,140 --> 01:00:58,520
0,420 420,990
particularly efficient.

1969
01:00:58,700 --> 01:00:59,840
0,480
I'm.

1970
01:01:00,280 --> 01:01:01,840
0,180 180,300 300,1170 1200,1470 1470,1560
And a third sort of

1971
01:01:01,840 --> 01:01:03,610
0,270 270,690 690,1080 1080,1560 1560,1770
less interesting, perhaps motivation was

1972
01:01:03,610 --> 01:01:05,470
0,300 570,930 930,1140 1140,1410 1410,1860
that although the risk five

1973
01:01:05,470 --> 01:01:07,120
0,510 750,960 960,1110 1110,1440 1440,1650
is pretty well suited to

1974
01:01:07,210 --> 01:01:09,190
0,240 240,330 330,810 810,1650 1740,1980
trap and emulate virtualization the

1975
01:01:09,190 --> 01:01:11,980
0,930 930,1530 1530,2370 2430,2730 2730,2790
x86 Intel's microprocessor has a

1976
01:01:11,980 --> 01:01:13,540
0,360 360,450 450,930 930,1380 1380,1560
number of detailed features, which

1977
01:01:13,540 --> 01:01:15,670
0,180 180,360 450,960 1020,1440 1440,2130
make it actually very difficult

1978
01:01:15,820 --> 01:01:17,530
0,780 780,930 930,1170 1170,1620 1620,1710
possible, but very difficult to

1979
01:01:17,530 --> 01:01:19,510
0,810 990,1320 1320,1560 1560,1860 1860,1980
virtualize and so Intel is

1980
01:01:19,510 --> 01:01:21,310
0,210 210,720 720,1020 1530,1710 1710,1800
also motivated to try to

1981
01:01:21,310 --> 01:01:22,390
0,210 210,420 420,630 630,840 840,1080
fix that because so many

1982
01:01:22,390 --> 01:01:23,530
0,60 60,180 180,690 690,930 930,1140
of his customers wanted to

1983
01:01:23,530 --> 01:01:25,630
0,360 630,900 900,1170 1170,1440 1440,2100
um run virtual machine monitors.

1984
01:01:26,920 --> 01:01:27,960
0,510
Alright.

1985
01:01:28,200 --> 01:01:29,370
0,300 300,480 480,600 600,990 990,1170
Okay, so this hardware is

1986
01:01:29,370 --> 01:01:32,460
0,1050 2340,2760 2760,2940 2940,3030 3030,3090
a main point is to

1987
01:01:32,460 --> 01:01:33,420
0,150 150,240 240,510 540,840 840,960
make it be allow you

1988
01:01:33,420 --> 01:01:35,340
0,60 60,330 330,810 810,1110 1110,1920
to build faster virtual machines

1989
01:01:35,340 --> 01:01:37,560
0,270 270,660 660,1170 1290,1740 1800,2220
using hardware support, and then

1990
01:01:37,560 --> 01:01:39,270
0,420 420,900 900,1050 1050,1260 1350,1710
another motivation was to make

1991
01:01:39,270 --> 01:01:41,430
0,90 120,780 810,1320 1560,2130 2130,2160
it easier to implement a

1992
01:01:41,430 --> 01:01:42,680
0,300 300,720
virtual machine.

1993
01:01:42,920 --> 01:01:44,090
0,240 240,510 540,930 930,1050 1050,1170
And this support has been

1994
01:01:44,090 --> 01:01:46,700
0,660 960,1470 1470,1830 1830,2100 2100,2610
around for maybe ten years

1995
01:01:46,700 --> 01:01:47,900
0,180 180,420 420,720 720,1020 1020,1200
and is now very, very

1996
01:01:47,900 --> 01:01:49,760
0,360 360,900 1290,1560 1560,1650 1650,1860
widely used, um to build

1997
01:01:49,760 --> 01:01:52,520
0,270 270,840 1170,1560 1560,1920 2070,2760
virtual machines okay, so um

1998
01:01:53,090 --> 01:01:56,630
0,960 1020,1650 1680,2700 2970,3180 3180,3540
the basic strategy is that

1999
01:01:56,660 --> 01:01:58,460
0,330 330,510 510,1050 1050,1650 1650,1800
all that virtual state that

2000
01:01:58,460 --> 01:01:59,570
0,120 120,300 300,660 660,750 750,1110
in my trap and emulate

2001
01:01:59,570 --> 01:02:01,370
0,660 930,1080 1080,1170 1170,1500 1500,1800
scheme all the virtual state

2002
01:02:01,370 --> 01:02:03,060
0,90 90,210 210,390 390,1140
that was being maintained.

2003
01:02:03,060 --> 01:02:04,410
0,210 210,330 330,600 600,900 900,1350
By the virtual machine monitor,

2004
01:02:04,410 --> 01:02:06,660
0,360 420,1230 1410,1770 1770,1920 1920,2250
just software, all that virtual

2005
01:02:06,660 --> 01:02:08,400
0,450 870,1380 1380,1530 1530,1680 1680,1740
state, a is going to

2006
01:02:08,400 --> 01:02:10,200
0,480 510,900 900,960 960,1050 1050,1800
be going to be implemented

2007
01:02:10,440 --> 01:02:11,970
0,240 240,300 300,1200 1230,1380 1380,1530
in the hardware in these

2008
01:02:11,970 --> 01:02:15,840
0,390 390,780 780,1710 2880,3480 3540,3870
hardware supported schemes and that

2009
01:02:15,840 --> 01:02:18,030
0,120 120,720 720,1290 1290,1950 1980,2190
will allow guest software to

2010
01:02:18,030 --> 01:02:21,780
0,450 450,930 930,2130 2460,3150 3150,3750
execute privileged instructions affecting these.

2011
01:02:22,460 --> 01:02:25,190
0,540 540,960 960,1440 1440,2040 2040,2730
Virtual hardware supported registers directly.

2012
01:02:26,900 --> 01:02:28,820
0,420 420,570 570,1080 1440,1800 1800,1920
Rather than trapping, so the

2013
01:02:28,820 --> 01:02:29,810
0,300 300,420 420,540 540,720 720,990
goal is now that guests

2014
01:02:29,810 --> 01:02:30,740
0,90 90,180 180,360 360,480 480,930
will be able to execute

2015
01:02:30,830 --> 01:02:32,870
0,420 420,1140 1170,1320 1320,1530 1530,2040
privileged instructions, but not trapped.

2016
01:02:33,420 --> 01:02:34,400
0,360
And.

2017
01:02:34,460 --> 01:02:36,200
0,150 150,690 720,840 840,1080
The reason you know.

2018
01:02:36,200 --> 01:02:37,310
0,90 90,240 240,630 630,780 780,1110
So that works is that

2019
01:02:37,340 --> 01:02:39,500
0,570 570,690 690,930 930,1290 1650,2160
again, we have a virtual

2020
01:02:39,500 --> 01:02:41,160
0,360 360,960
machine monitor.

2021
01:02:41,550 --> 01:02:43,480
0,1260
And.

2022
01:02:44,770 --> 01:02:46,390
0,300 300,480 480,930 930,1260 1260,1620
Um, a guest operating system

2023
01:02:46,390 --> 01:02:48,010
0,120 120,360 360,780 1200,1560 1560,1620
and user level at the

2024
01:02:48,010 --> 01:02:50,800
0,1110 1320,1950 2100,2400 2400,2670 2670,2790
hardware, now we know that

2025
01:02:51,520 --> 01:02:53,020
0,180 180,240 240,960 960,1080 1080,1500
in the hardware, we have

2026
01:02:53,500 --> 01:02:56,320
0,510 660,810 810,990 990,1320 1890,2820
a you know a St,

2027
01:02:56,320 --> 01:02:58,210
0,600 600,720 720,930 930,1590 1680,1890
vac and all those you

2028
01:02:58,210 --> 01:03:00,840
0,90 90,540 540,1470
know hardware registers.

2029
01:03:06,620 --> 01:03:08,180
0,210 210,570 570,720 720,1020 1050,1560
And there's all the when

2030
01:03:08,180 --> 01:03:09,140
0,120 120,330 330,420 420,480 480,960
we're running in the virtual

2031
01:03:09,170 --> 01:03:11,060
0,360 360,1050 1050,1350 1350,1620 1620,1890
new schemes hardware support schemes

2032
01:03:11,060 --> 01:03:11,990
0,120 120,330 330,390 390,690 690,930
were running the virtual machine

2033
01:03:11,990 --> 01:03:12,740
0,240 240,330 330,480 480,660 660,750
monitor, we just use the

2034
01:03:12,740 --> 01:03:14,780
0,630 810,1320 1320,1380 1380,1560 1560,2040
real versions of these registers,

2035
01:03:14,780 --> 01:03:16,880
0,150 150,240 240,1380 1410,2010 2010,2100
but the hardware when the

2036
01:03:16,880 --> 01:03:18,560
0,300 300,660 660,1230 1230,1620 1620,1680
virtual machine monitor tells the

2037
01:03:18,560 --> 01:03:20,360
0,390 390,690 780,1200 1200,1590 1590,1800
hardware look, please switch into

2038
01:03:20,360 --> 01:03:22,550
0,360 360,960 1410,1650 1650,1830 1830,2190
guest mode, um, the hardware

2039
01:03:22,550 --> 01:03:24,500
0,150 150,240 240,660 660,1470 1470,1950
has a complete separate set

2040
01:03:24,530 --> 01:03:27,300
0,210 210,1290
of registers.

2041
01:03:27,300 --> 01:03:29,520
0,630 630,780 780,1290 1290,1950 2010,2220
Dedicated for use by in

2042
01:03:29,520 --> 01:03:31,000
0,420 420,960
guest mode.

2043
01:03:31,360 --> 01:03:32,560
0,210 210,270 270,570 570,900 900,1200
So the guest mode can

2044
01:03:32,680 --> 01:03:34,180
0,360 360,480 480,720 720,900 900,1500
read and write these registers

2045
01:03:34,180 --> 01:03:35,560
0,120 120,240 240,570 600,1110 1110,1380
but it's not it's reading

2046
01:03:35,560 --> 01:03:37,450
0,330 330,570 570,840 840,1230 1290,1890
it's reading writing its hardware

2047
01:03:37,450 --> 01:03:39,100
0,450 450,540 540,1170 1170,1590 1590,1650
copies of its versions of

2048
01:03:39,100 --> 01:03:40,330
0,180 180,750 750,1050 1050,1140 1140,1230
these registers rather than the

2049
01:03:40,330 --> 01:03:42,310
0,210 210,1020 1020,1200 1200,1440 1470,1980
real registers and the hardware

2050
01:03:42,310 --> 01:03:43,450
0,300 300,390 390,540 540,750 750,1140
has you know has some

2051
01:03:43,750 --> 01:03:45,550
0,450 450,630 810,1290 1290,1680 1680,1800
kind of extra checks, it

2052
01:03:45,550 --> 01:03:46,900
0,330 330,540 540,840
makes on the.

2053
01:03:46,900 --> 01:03:49,090
0,270 810,1380 1380,1710 1710,2070 2070,2190
The guest operating system can

2054
01:03:49,090 --> 01:03:49,810
0,240 240,300 300,480 480,630 630,720
do to make sure that

2055
01:03:49,810 --> 01:03:51,310
0,90 90,390 390,690 690,870 870,1500
it can't abuse, these registers

2056
01:03:51,310 --> 01:03:52,750
0,330 570,1020 1020,1110 1110,1170 1170,1440
to escape from the virtual

2057
01:03:52,750 --> 01:03:53,740
0,420
machine.

2058
01:03:54,240 --> 01:03:55,860
0,390 450,870 870,930 930,1020 1020,1620
Um, this is the basic,

2059
01:03:55,890 --> 01:03:56,820
0,180 180,420 420,780 780,840 840,930
this is most of the

2060
01:03:56,820 --> 01:03:59,400
0,300 300,960 1470,1920 2100,2400 2400,2580
basic strategy a and in

2061
01:03:59,400 --> 01:04:00,960
0,120 120,930 930,1020 1020,1200 1200,1560
the terminology of these hardware

2062
01:04:00,960 --> 01:04:02,790
0,360 360,600 600,900 900,1560 1680,1830
supported virtual machine schemes, the

2063
01:04:02,790 --> 01:04:04,080
0,630 630,690 690,870 870,1110 1110,1290
name at least in tow,

2064
01:04:04,080 --> 01:04:06,600
0,360 750,1350 1350,1560 1560,2010 2010,2520
one name for guest mode

2065
01:04:06,600 --> 01:04:08,880
0,660 690,1410 1410,1830
is non root.

2066
01:04:10,720 --> 01:04:12,640
0,510 540,720 720,1020 1020,1530 1530,1920
And the name for a.

2067
01:04:14,810 --> 01:04:16,820
0,540 570,1020 1020,1410 1410,1710 1710,2010
I'm host mode, we're using

2068
01:04:16,820 --> 01:04:18,170
0,210 210,840 840,1140 1140,1230 1230,1350
real registers route and so

2069
01:04:18,170 --> 01:04:19,790
0,210 210,390 510,990 990,1140 1140,1620
there's a set of non

2070
01:04:19,790 --> 01:04:22,430
0,600 1140,1320 1320,1950 1950,2490 2490,2640
root or virtual registers for

2071
01:04:22,430 --> 01:04:23,390
0,60 60,330 330,630 630,690 690,960
the virtual machine to use

2072
01:04:23,390 --> 01:04:24,110
0,90 90,240 240,330 330,570 570,720
and there's a set of

2073
01:04:24,110 --> 01:04:25,520
0,600 600,720 870,1050 1050,1290 1290,1410
registers that are used when

2074
01:04:25,520 --> 01:04:26,240
0,60 60,120 120,210 210,390 390,720
we are in route mode.

2075
01:04:29,280 --> 01:04:30,880
0,600
HMM.

2076
01:04:32,150 --> 01:04:34,160
0,450 780,1350 1350,1560 1560,1680 1680,2010
So now when we're running

2077
01:04:34,160 --> 01:04:35,800
0,180 180,360 360,1110
in the guest.

2078
01:04:35,800 --> 01:04:37,140
0,720
Colonel.

2079
01:04:38,030 --> 01:04:39,840
0,240 240,390 390,540 540,1290
Um, it can execute.

2080
01:04:40,920 --> 01:04:43,770
0,360 360,960 960,1830 2310,2520 2520,2850
Any privileged instruction, um without

2081
01:04:43,770 --> 01:04:45,210
0,450 750,990 990,1110 1110,1290 1290,1440
trapping, so who wants to

2082
01:04:45,210 --> 01:04:46,470
0,210 210,300 300,630 630,870 870,1260
read or write the St,

2083
01:04:46,470 --> 01:04:48,240
0,450 480,750 780,1290 1290,1560 1560,1770
beck a hardware just let's

2084
01:04:48,240 --> 01:04:50,340
0,300 300,390 390,840 840,1170 1470,2100
read or write the non

2085
01:04:50,340 --> 01:04:51,780
0,360 360,780 780,870 870,960 960,1440
root copy of the hardware

2086
01:04:51,780 --> 01:04:54,750
0,390 390,630 630,1170 1710,2250 2790,2970
St, vet registry and so

2087
01:04:54,750 --> 01:04:56,280
0,120 120,270 270,600 750,1470 1470,1530
all this stuff proceeds at

2088
01:04:56,280 --> 01:04:58,080
0,180 180,660 660,1350 1440,1740 1740,1800
full speed without having to

2089
01:04:58,080 --> 01:04:59,430
0,300 300,510 510,900 900,1080 1080,1350
trap into Vietnam so it's

2090
01:04:59,520 --> 01:05:01,620
0,600 600,1200 1380,1620 1620,1980 1980,2100
much faster for code that

2091
01:05:01,620 --> 01:05:02,910
0,420 450,750 750,1110 1110,1140 1140,1290
was a incurring a lot

2092
01:05:02,910 --> 01:05:04,380
0,60 60,720
of traps.

2093
01:05:04,500 --> 01:05:06,600
0,270 300,1470
Oh, gosh.

2094
01:05:07,270 --> 01:05:08,680
0,360 360,360 900,1080 1080,1260 1260,1410
The um, you still have

2095
01:05:08,680 --> 01:05:09,370
0,120 120,330 330,360 360,510 510,690
to there's a whole bunch

2096
01:05:09,370 --> 01:05:11,260
0,60 60,300 300,960 1380,1830 1830,1890
of stuff having involved in

2097
01:05:11,260 --> 01:05:12,940
0,540 540,840 840,1140 1230,1470 1470,1680
configuring this though when the

2098
01:05:12,970 --> 01:05:14,440
0,330 330,660 660,990 990,1290 1290,1470
virtual machine monitor wants to

2099
01:05:14,500 --> 01:05:15,670
0,420 420,450 450,570 570,840 840,1170
create a new virtual machine

2100
01:05:15,670 --> 01:05:16,630
0,240 240,390 390,510 510,870 870,960
actually has to tell the

2101
01:05:16,630 --> 01:05:19,600
0,690 1140,1590 1890,2130 2130,2520 2580,2970
hardware, um, and so there

2102
01:05:19,600 --> 01:05:21,400
0,450 480,1020
is a.

2103
01:05:21,500 --> 01:05:23,630
0,720 720,930 930,1260 1590,1890 1890,2130
Down in the virtual machine

2104
01:05:23,630 --> 01:05:25,490
0,300 300,720 720,990 990,1140 1140,1860
monitors memory, there's this structure

2105
01:05:25,490 --> 01:05:26,560
0,180 180,420
that the.

2106
01:05:26,820 --> 01:05:29,190
0,390 390,660 660,1140 1140,1860 2130,2370
Virtual machine monitor and the

2107
01:05:29,190 --> 01:05:30,360
0,330 330,450 450,810 810,1050 1050,1170
vt, X hardware used to

2108
01:05:30,360 --> 01:05:32,580
0,720 720,900 900,1170 1170,1560 1560,2220
communicate just called v MC

2109
01:05:32,580 --> 01:05:37,770
0,1200 1380,2550 2550,3150 3180,3870 4980,5190
svm control, something structure, and

2110
01:05:37,770 --> 01:05:38,790
0,90 90,150 150,420 420,690 690,1020
when the virtual machine monitor

2111
01:05:38,790 --> 01:05:39,660
0,240 240,390 390,660 660,690 690,870
wants to create a new

2112
01:05:39,660 --> 01:05:41,370
0,270 270,660 660,840 960,1590 1590,1710
virtual machine, it creates one

2113
01:05:41,370 --> 01:05:42,420
0,90 90,360 360,450 450,930 930,1050
of these in memory and

2114
01:05:42,420 --> 01:05:43,110
0,300 300,390 390,450 450,630 630,690
fills in a bunch of

2115
01:05:43,110 --> 01:05:45,120
0,690 690,1260 1260,1380 1380,1620 1620,2010
configuration flags and also initial

2116
01:05:45,120 --> 01:05:47,850
0,870 1290,1680 1680,1800 1800,2160 2160,2730
values for all these registers

2117
01:05:47,850 --> 01:05:49,320
0,90 90,240 240,750 750,1050
and then tells the.

2118
01:05:49,790 --> 01:05:51,800
0,300 300,600 600,780 780,1320 1800,2010
A vt, X hardware, a

2119
01:05:51,800 --> 01:05:53,210
0,330 330,480 480,660 660,990 1020,1410
look I want to start

2120
01:05:53,210 --> 01:05:54,140
0,180 180,210 210,330 330,570 570,930
running a new virtual machine,

2121
01:05:54,140 --> 01:05:55,730
0,150 150,570 570,750 750,1080 1080,1590
and here's the initial state

2122
01:05:56,150 --> 01:05:58,580
0,540 570,780 780,1110 1110,1320 1320,2430
and so these new instructions

2123
01:05:58,610 --> 01:06:00,620
0,210 210,300 300,600 600,1380 1770,2010
which the paper mentions a

2124
01:06:00,620 --> 01:06:02,640
0,300 300,720 720,1590
there's vm watch.

2125
01:06:03,570 --> 01:06:05,100
0,270 270,360 360,450 450,930 960,1530
Just like a new new

2126
01:06:05,130 --> 01:06:07,080
0,330 330,810 810,1170 1200,1650 1650,1950
machine instruction which you tell

2127
01:06:07,080 --> 01:06:08,490
0,180 210,540 750,1110 1110,1200 1200,1410
it the address of this

2128
01:06:08,490 --> 01:06:10,780
0,120 120,570 600,930 930,1620
and it starts running.

2129
01:06:10,870 --> 01:06:12,220
0,210 210,270 270,660 720,1230 1230,1350
You know you're starting with

2130
01:06:12,220 --> 01:06:14,680
0,180 180,780 780,1710 1740,2070 2070,2460
these registers like starts running

2131
01:06:14,680 --> 01:06:16,840
0,90 90,330 330,810 1170,1740 1800,2160
the guest kernel and there's

2132
01:06:16,840 --> 01:06:18,880
0,210 210,360 360,720 720,1500
also this vm resume.

2133
01:06:19,380 --> 01:06:21,340
0,240 240,420 420,1440
Yeah cause sometimes.

2134
01:06:21,550 --> 01:06:22,540
0,390 390,600 600,660 660,720 720,990
Break out of the kernel

2135
01:06:22,540 --> 01:06:23,620
0,210 210,510 510,600 600,690 690,1080
back trap out of kernels

2136
01:06:23,620 --> 01:06:24,490
0,90 90,570 570,660 660,750 750,870
and Vietnam and you need

2137
01:06:24,490 --> 01:06:26,230
0,90 90,480 480,630 960,1410 1440,1740
to resume it and then

2138
01:06:26,230 --> 01:06:27,220
0,300 300,420 420,600 600,780 780,990
code up here can run

2139
01:06:27,220 --> 01:06:28,510
0,90 90,300 300,690 690,960 960,1290
a new instruction called vm

2140
01:06:28,510 --> 01:06:29,900
0,330 330,870
call which.

2141
01:06:29,900 --> 01:06:33,140
0,210 210,270 270,1230 1530,2520 2700,3240
Sort of intentionally exits from

2142
01:06:33,140 --> 01:06:34,970
0,420 420,630 630,1290 1320,1470 1470,1830
non root mode, and basically

2143
01:06:34,970 --> 01:06:36,710
0,510 510,780 780,1110 1170,1470 1470,1740
traps into the virtual machine

2144
01:06:36,710 --> 01:06:38,220
0,270 270,390 390,600 600,960
monitor in root mode.

2145
01:06:39,820 --> 01:06:40,840
0,240 240,390 390,450 450,720 720,1020
Right when the virtual machine

2146
01:06:40,840 --> 01:06:42,160
0,720
monitor.

2147
01:06:42,160 --> 01:06:43,210
0,390 390,720 720,840 840,900 900,1050
Um, excuse, one of these

2148
01:06:43,210 --> 01:06:44,770
0,690 690,960 990,1320 1320,1470 1470,1560
instructions to jump into a

2149
01:06:44,770 --> 01:06:47,440
0,720 840,1380 1890,2460 2460,2580 2580,2670
guest a ways that it

2150
01:06:47,440 --> 01:06:50,260
0,90 90,360 360,1080 1980,2400 2400,2820
may come back, guess next

2151
01:06:50,260 --> 01:06:52,450
0,240 300,1050 1080,1440 1440,1950 1950,2190
few ordinary privileged instructions without

2152
01:06:52,450 --> 01:06:53,890
0,540 630,1080 1080,1230 1230,1380 1380,1440
trapping, um, but there's a

2153
01:06:53,890 --> 01:06:55,150
0,210 210,300 300,570 570,870 870,1260
bunch of reasons why you

2154
01:06:55,150 --> 01:06:56,410
0,90 90,840 840,1110 1110,1170 1170,1260
may nevertheless return to the

2155
01:06:56,410 --> 01:06:57,520
0,270 270,570 570,780 780,990 990,1110
virtual machine mode, one is

2156
01:06:57,520 --> 01:06:58,920
0,900
unintentional.

2157
01:06:59,070 --> 01:07:00,720
0,540 1050,1200 1200,1470 1470,1590 1590,1650
Exit but also if the

2158
01:07:00,720 --> 01:07:02,100
0,420 420,780 780,990 990,1230 1230,1380
device interrupt goes off like

2159
01:07:02,100 --> 01:07:03,690
0,120 120,660 660,1020 1020,1230 1230,1590
the timer interrupt goes off

2160
01:07:03,750 --> 01:07:06,000
0,360 360,630 660,990 1080,1950 1950,2250
that all the microprocessor will

2161
01:07:06,330 --> 01:07:09,030
0,810 810,900 900,1560 1860,2280 2280,2700
force a trap out of.

2162
01:07:09,670 --> 01:07:11,020
0,120 120,660 660,900 900,1230 1230,1350
A non root mode out

2163
01:07:11,020 --> 01:07:12,550
0,60 60,150 150,840 900,1320 1320,1530
of the guest into root

2164
01:07:12,550 --> 01:07:13,600
0,270 270,360 360,450 450,720 720,1050
mode in the virtual machine

2165
01:07:13,600 --> 01:07:15,190
0,450 540,750 750,870 870,1230 1230,1590
launder, so in general device

2166
01:07:15,190 --> 01:07:17,260
0,780
interrupts.

2167
01:07:17,470 --> 01:07:18,460
0,270 300,630 630,810 810,930 930,990
A trap back into the

2168
01:07:18,460 --> 01:07:19,600
0,270 270,510 510,780 780,1050 1050,1140
virtual machine monitor and so

2169
01:07:19,600 --> 01:07:20,650
0,120 120,330 330,420 420,510 510,1050
that means that a guest

2170
01:07:20,800 --> 01:07:22,030
0,360 360,600 600,840 840,1140 1140,1230
operating system can't hog, the

2171
01:07:22,030 --> 01:07:23,710
0,600 810,1020 1020,1170 1170,1230 1230,1680
CPU every time the timer

2172
01:07:23,740 --> 01:07:25,000
0,360 360,660 660,930 930,1020 1020,1260
hardware timer ticks the virtual

2173
01:07:25,000 --> 01:07:26,980
0,300 300,510 510,750 750,1380 1770,1980
machine under its control and

2174
01:07:26,980 --> 01:07:29,830
0,60 60,270 270,1050 1530,2070 2280,2850
if there's multiple a guess

2175
01:07:29,830 --> 01:07:32,080
0,150 150,510 870,1200 1200,1770 1770,2250
and now basically timeshare machine

2176
01:07:32,080 --> 01:07:33,910
0,300 300,450 450,750 750,1290 1560,1830
using the timer interrupts among

2177
01:07:33,910 --> 01:07:36,000
0,120 120,180 180,420 420,990
all the different guests.

2178
01:07:36,400 --> 01:07:38,120
0,1230
Yes.

2179
01:07:39,150 --> 01:07:40,520
0,660
I'm.

2180
01:07:40,930 --> 01:07:41,530
0,270 270,420 420,510 510,570 570,600
Okay, so this is a

2181
01:07:41,530 --> 01:07:43,620
0,270 270,750 750,1410
basic strategy basically.

2182
01:07:43,650 --> 01:07:44,580
0,330 330,390 390,660 660,840 840,930
There's a second set of

2183
01:07:44,580 --> 01:07:46,740
0,840
registers.

2184
01:07:50,020 --> 01:07:51,700
0,150 150,420 420,1200 1200,1380 1380,1680
The other me the other

2185
01:07:51,700 --> 01:07:53,620
0,420 420,690 690,750 750,1560 1590,1920
big piece of machinery that

2186
01:07:53,650 --> 01:07:56,020
0,480 480,690 690,1320 1320,1890 1920,2370
vt, X provides is a.

2187
01:07:56,820 --> 01:07:59,070
0,210 210,690 690,1050 1050,1620 1860,2250
A page table support you

2188
01:07:59,070 --> 01:08:01,290
0,300 300,810 810,960 960,1560 2070,2220
were operating up here in

2189
01:08:01,290 --> 01:08:02,760
0,60 60,390 390,750 750,1200 1230,1470
the guest world, we still

2190
01:08:02,760 --> 01:08:04,540
0,120 120,180 180,510 510,990
need a page table.

2191
01:08:04,540 --> 01:08:05,500
0,180 180,270 270,450 450,570 630,960
Now we need to change

2192
01:08:05,500 --> 01:08:07,570
0,180 180,420 780,1260 1260,1770 1770,2070
that for two reasons, one

2193
01:08:07,570 --> 01:08:09,280
0,450 540,870 870,960 960,1260 1260,1710
is, um, the guest kernel

2194
01:08:09,280 --> 01:08:10,060
0,360 360,450 450,540 540,690 690,780
wants to be able to

2195
01:08:10,060 --> 01:08:11,260
0,300 300,450 450,600 600,930 930,1200
configure its own page table

2196
01:08:11,260 --> 01:08:12,220
0,360 360,420 420,510 510,690 690,960
wants to be able to

2197
01:08:12,310 --> 01:08:15,370
0,750 1260,1590 1590,2040 2040,2790 2790,3060
load A C r3 which

2198
01:08:15,370 --> 01:08:16,300
0,510
is.

2199
01:08:16,360 --> 01:08:17,640
0,660
Damn.

2200
01:08:17,820 --> 01:08:20,460
0,480 480,1260 1260,1530 1530,1950
Intel equivalent of a.

2201
01:08:20,460 --> 01:08:21,780
0,240 240,480 480,660 660,1140 1140,1320
Thus, at p register so

2202
01:08:21,780 --> 01:08:22,980
0,210 210,600 600,720 720,840 840,1200
we'd love to be able

2203
01:08:23,040 --> 01:08:24,480
0,180 210,390 390,840 840,1350 1350,1440
to or vcs allows the

2204
01:08:24,480 --> 01:08:26,010
0,240 240,630 690,990 990,1320 1320,1530
guest kernel to load any

2205
01:08:26,010 --> 01:08:28,890
0,360 360,480 480,1140 1170,2100 2400,2880
value, it likes into A

2206
01:08:29,010 --> 01:08:31,380
0,570 570,1020 1020,1860 1980,2160 2160,2370
C r3 register to set

2207
01:08:31,380 --> 01:08:32,790
0,90 90,450 450,840 840,1140 1140,1410
the page table and the

2208
01:08:32,790 --> 01:08:34,380
0,240 240,420 420,750 750,1350 1350,1590
hard will actually obey that

2209
01:08:34,380 --> 01:08:35,490
0,330 330,630 630,750 750,870 870,1110
page table that the guest

2210
01:08:35,490 --> 01:08:37,470
0,300 300,1110 1440,1740 1740,1830 1830,1980
kernel loads, but we know

2211
01:08:37,470 --> 01:08:38,310
0,180 180,390 390,480 480,540 540,840
that can't be the which

2212
01:08:38,310 --> 01:08:39,960
0,60 60,690 690,960 1050,1470 1470,1650
is fantastic right, because now

2213
01:08:39,960 --> 01:08:41,160
0,270 270,450 450,540 540,900 900,1200
that's going to motivate HD,

2214
01:08:41,160 --> 01:08:42,750
0,180 180,540 540,930 930,1020 1020,1590
but without trapping the vm.

2215
01:08:43,480 --> 01:08:45,430
0,570 900,1410 1410,1530 1530,1830 1830,1950
Um, but we know that

2216
01:08:45,430 --> 01:08:46,750
0,420 420,750 750,960 960,1230 1230,1320
we can't just let the

2217
01:08:46,750 --> 01:08:47,800
0,210 210,480 480,660 660,960 960,1050
guests colonel put anything it

2218
01:08:47,800 --> 01:08:48,970
0,240 240,300 300,420 420,720 720,1170
likes on its page table

2219
01:08:49,960 --> 01:08:51,880
0,720 960,1350 1350,1470 1470,1590 1590,1920
without because that would allow

2220
01:08:51,880 --> 01:08:52,810
0,150 150,420 420,600 600,720 720,930
it to read and write

2221
01:08:52,810 --> 01:08:55,090
0,390 390,840 930,1530 1590,1920 1920,2280
arbitrary memory, so this vt

2222
01:08:55,090 --> 01:08:57,610
0,180 180,450 450,750 750,1080 1680,2520
X scheme actually has another

2223
01:08:57,940 --> 01:09:00,490
0,900 900,1380 1380,1650 1650,2190 2430,2550
important register which is in

2224
01:09:00,490 --> 01:09:02,320
0,240 240,450 450,510 510,1110 1500,1830
fact part of the group's

2225
01:09:02,320 --> 01:09:04,180
0,630 900,1200 1350,1560 1560,1770 1770,1860
real well, who knows where

2226
01:09:04,180 --> 01:09:05,050
0,90 90,240 240,540 570,720 750,870
I should draw but I'll

2227
01:09:05,050 --> 01:09:06,120
0,120 120,210 210,360 360,660
draw it right here.

2228
01:09:07,350 --> 01:09:09,760
0,570 600,1800
The extended.

2229
01:09:10,280 --> 01:09:12,880
0,990 1350,2040
Page table.

2230
01:09:13,960 --> 01:09:16,090
0,450 480,1110 1110,1350 1500,1800 1800,2130
A register and the virtual

2231
01:09:16,090 --> 01:09:18,190
0,330 330,540 540,1320 1590,1650 1680,2100
machine which points to a

2232
01:09:18,280 --> 01:09:19,680
0,420 420,840
page table.

2233
01:09:19,970 --> 01:09:20,980
0,390
Right.

2234
01:09:21,380 --> 01:09:23,420
0,300 300,510 510,1470
Um that maps.

2235
01:09:23,510 --> 01:09:24,350
0,180 180,390 390,600 600,780 780,840
Well that's one kind of

2236
01:09:24,350 --> 01:09:25,250
0,360 360,420 420,660 660,840 840,900
address or another kind of

2237
01:09:25,250 --> 01:09:26,810
0,510 510,840 840,900 900,1200 1200,1560
address and the virtual machine

2238
01:09:26,810 --> 01:09:29,120
0,510 570,1080 1080,1230 1230,1620 1770,2310
monitor sets when it's about

2239
01:09:29,120 --> 01:09:30,560
0,90 90,510 510,810 810,1110 1110,1440
to run a guest kernel,

2240
01:09:30,560 --> 01:09:32,300
0,90 90,510 510,870 1260,1500 1530,1740
it sets up an E

2241
01:09:32,300 --> 01:09:34,070
0,240 240,750 840,1020 1020,1230 1230,1770
P T four that colonel

2242
01:09:34,280 --> 01:09:36,230
0,900 900,990 990,1470 1470,1680 1680,1950
tells the hardware look, here's

2243
01:09:36,230 --> 01:09:39,600
0,90 90,780 780,1350
the iti for.

2244
01:09:39,630 --> 01:09:40,890
0,540 540,810 810,900 900,1170 1170,1260
Virtual machine I'm about to

2245
01:09:40,890 --> 01:09:41,820
0,210 210,300 300,480 480,810 810,930
run and then jumps into

2246
01:09:41,820 --> 01:09:43,770
0,90 90,390 390,990 1080,1500 1500,1950
the virtual machine, and then

2247
01:09:43,770 --> 01:09:45,220
0,120 120,450 450,600 600,810
the game is that.

2248
01:09:45,430 --> 01:09:47,540
0,390 570,750 750,930 930,1590
The and then you.

2249
01:09:47,540 --> 01:09:48,890
0,150 150,330 330,930 960,1200 1200,1350
On this machine when it's

2250
01:09:48,890 --> 01:09:50,870
0,570 570,750 750,1170 1170,1560 1560,1980
translating a guest virtual address,

2251
01:09:50,870 --> 01:09:52,910
0,120 120,570 570,1380 1710,1920 1920,2040
it first translates a the

2252
01:09:52,910 --> 01:09:54,050
0,270 270,600 600,870 870,1050 1050,1140
guest virtual address to a

2253
01:09:54,050 --> 01:09:55,790
0,360 360,870 870,1440 1470,1650 1650,1740
guest physical address to the

2254
01:09:55,790 --> 01:09:57,240
0,990
guests.

2255
01:09:57,240 --> 01:09:58,440
0,180 180,450 450,720 720,900 900,1200
The page table, the guest

2256
01:09:58,440 --> 01:09:59,940
0,270 270,510 510,720 720,1260 1290,1500
sets up and then does

2257
01:09:59,940 --> 01:10:01,620
0,360 360,1080 1080,1170 1170,1380 1380,1680
another translation of that guest

2258
01:10:01,620 --> 01:10:03,420
0,360 360,870 1200,1530 1530,1650 1650,1800
physical address through the E

2259
01:10:03,420 --> 01:10:04,320
0,210 210,600 600,720 720,840 840,900
P T to get a

2260
01:10:04,320 --> 01:10:06,260
0,360 360,750 750,1470
host physical address.

2261
01:10:06,560 --> 01:10:08,120
0,450 540,720 720,870 870,1320 1320,1560
Um, and that hardware does

2262
01:10:08,120 --> 01:10:10,430
0,360 540,1410 1440,1680 1680,1980 1980,2310
that automatically for every memory

2263
01:10:10,430 --> 01:10:12,140
0,450 450,540 540,870 870,1500 1530,1710
reference, the guest does, as

2264
01:10:12,140 --> 01:10:13,730
0,240 240,570 570,900 900,960 960,1590
this double level of translation

2265
01:10:14,000 --> 01:10:15,380
0,330 330,450 450,630 630,1080 1080,1380
and so this again gives

2266
01:10:15,380 --> 01:10:17,510
0,150 150,750 810,1650 1650,1830 1830,2130
the vm control over what

2267
01:10:17,510 --> 01:10:19,880
0,480 480,1110 1380,1800 1830,2280 2280,2370
physical memory a guest is

2268
01:10:19,880 --> 01:10:20,810
0,300 300,390 390,600 600,690 690,930
allowed to use the guest

2269
01:10:20,810 --> 01:10:21,800
0,90 90,300 300,450 480,720 720,990
can set up any page

2270
01:10:21,800 --> 01:10:23,150
0,360 360,900 900,1140 1140,1230 1230,1350
symbol, likes and can do

2271
01:10:23,150 --> 01:10:24,230
0,90 90,300 300,780 780,990 990,1080
it quite efficiently because it

2272
01:10:24,230 --> 01:10:26,240
0,150 150,690 870,1290 1290,1350 1350,2010
can directly execute the instructions

2273
01:10:26,270 --> 01:10:28,540
0,300 300,420 420,840 840,1770
but it's still constrained.

2274
01:10:29,100 --> 01:10:30,330
0,420 420,570 570,690 690,930 930,1230
A by the E T

2275
01:10:30,330 --> 01:10:32,220
0,240 240,330 330,840 840,1470 1650,1890
which the Vietnam configured to

2276
01:10:32,220 --> 01:10:34,800
0,60 60,240 240,360 360,1080 1380,2580
be able to only use

2277
01:10:34,890 --> 01:10:36,900
0,450 450,1080 1230,1470 1470,1650 1650,2010
physical pages that the vm

2278
01:10:36,900 --> 01:10:38,640
0,270 270,510 510,1080
wants to use.

2279
01:10:38,800 --> 01:10:39,920
0,510
She.

2280
01:10:40,560 --> 01:10:41,940
0,180 180,480 480,630 630,720 720,1380
Any questions about the iti.

2281
01:10:47,350 --> 01:10:48,100
0,270 270,480 480,570 570,690 690,750
Oh, sorry I have a

2282
01:10:48,100 --> 01:10:50,050
0,270 270,690 690,1140 1170,1500 1500,1950
question about Youtube about the

2283
01:10:50,230 --> 01:10:51,970
0,330 330,630 630,1170 1200,1530 1530,1740
um, the second set of

2284
01:10:51,970 --> 01:10:53,890
0,870 960,1230 1230,1380 1380,1500 1500,1920
registers, so if you have

2285
01:10:54,250 --> 01:10:56,110
0,270 270,1050 1320,1560 1560,1650 1650,1860
two course and you want

2286
01:10:56,110 --> 01:10:57,400
0,120 120,270 270,450 450,1020 1020,1290
to add two {vm's -}

2287
01:10:57,700 --> 01:10:58,720
0,210 210,540
does it.

2288
01:10:58,720 --> 01:10:59,830
0,120 120,300 300,780 810,1020 1020,1110
Do you get like a

2289
01:10:59,830 --> 01:11:01,690
0,570 600,1290 1290,1410 1410,1500 1500,1860
third coffee of the writer's

2290
01:11:01,690 --> 01:11:04,510
0,540 570,1170 1170,1980 2400,2640 2640,2820
store, every core has its

2291
01:11:04,510 --> 01:11:06,400
0,270 270,570 570,630 630,870 870,1890
own set of these registers

2292
01:11:06,850 --> 01:11:07,870
0,300 300,540 540,690 690,840 840,1020
every chord has a sort

2293
01:11:07,870 --> 01:11:09,680
0,90 90,1320
of independent.

2294
01:11:10,410 --> 01:11:14,160
0,1020 1530,1680 1680,3060 3060,3480 3480,3750
A an independent instance of

2295
01:11:14,250 --> 01:11:16,290
0,270 270,450 450,900 900,1380 1710,2040
all this bts hardware every

2296
01:11:16,290 --> 01:11:17,400
0,540
quarter.

2297
01:11:17,430 --> 01:11:18,360
0,270 270,390 390,570 570,690 690,930
Every car has its own

2298
01:11:18,360 --> 01:11:20,700
0,480 480,720 720,1080 1080,1800 1950,2340
32 general purpose registers its

2299
01:11:20,700 --> 01:11:23,190
0,420 420,870 870,1350 1350,2130 2160,2490
own real control registers and

2300
01:11:23,190 --> 01:11:26,460
0,180 180,840 1230,2220 2610,3150 3150,3270
its own virtual registers for

2301
01:11:26,460 --> 01:11:27,600
0,300 300,660
guest mode.

2302
01:11:27,750 --> 01:11:29,880
0,450 450,900 900,1170 1170,1350 1350,2130
Its own its own ebt.

2303
01:11:31,010 --> 01:11:32,510
0,180 180,450 450,690 810,1080 1080,1500
So you have two different

2304
01:11:32,510 --> 01:11:33,860
0,390 390,510 510,660 660,930 930,1350
guests on two different cores,

2305
01:11:33,860 --> 01:11:34,820
0,120 120,270 270,420 420,630 630,960
they all have their own

2306
01:11:34,850 --> 01:11:36,480
0,300 300,990
every register.

2307
01:11:37,050 --> 01:11:37,950
0,240 240,450 450,600 600,750 750,900
Every course has its own

2308
01:11:37,950 --> 01:11:38,720
0,240
one.

2309
01:11:39,320 --> 01:11:40,160
0,180 180,300 300,450 450,540 540,840
So you need a new

2310
01:11:40,160 --> 01:11:42,230
0,150 150,570 570,1080 1350,2040 2040,2070
v amount to well I

2311
01:11:42,230 --> 01:11:43,340
0,150 150,420 420,600 600,810 810,1110
mean it could just like.

2312
01:11:44,120 --> 01:11:45,530
0,120 120,480 480,810 810,1170 1170,1410
An ordinary operating system may

2313
01:11:45,530 --> 01:11:46,850
0,270 270,570 570,690 690,1020 1020,1320
actually six can support multiple

2314
01:11:46,850 --> 01:11:48,860
0,690 690,780 780,1230 1680,1920 1920,2010
processes and it's all the

2315
01:11:48,860 --> 01:11:51,110
0,780 780,1050 1050,1170 1170,1920 1950,2250
same Max v six but

2316
01:11:51,110 --> 01:11:52,740
0,690
although.

2317
01:11:52,740 --> 01:11:53,580
0,300 300,480 480,600 600,750 750,840
And just like ex v

2318
01:11:53,580 --> 01:11:55,590
0,330 330,510 510,930 1020,1590 1590,2010
six has a separate struck

2319
01:11:55,590 --> 01:11:58,200
0,600 930,1080 1080,1260 1260,2130 2490,2610
proc for every process or

2320
01:11:58,200 --> 01:11:59,460
0,300 300,600 600,930 930,1080 1080,1260
virtual machine monitor would have

2321
01:11:59,460 --> 01:12:01,140
0,60 60,420 420,1050
a separate structure.

2322
01:12:01,140 --> 01:12:02,310
0,240 240,750 750,810 810,1080 1080,1170
Start vm or whatever it

2323
01:12:02,310 --> 01:12:04,800
0,480 780,1110 1110,1260 1260,1710 1740,2490
is one for each guest

2324
01:12:04,920 --> 01:12:05,790
0,120 120,270 270,480 480,570 570,870
to keep track of that

2325
01:12:05,790 --> 01:12:07,410
0,420 420,870 870,960 960,1110 1110,1620
guest information for that guest.

2326
01:12:08,290 --> 01:12:09,640
0,300 300,450 450,720 720,1020 1020,1350
Okay I see, thank you,

2327
01:12:10,090 --> 01:12:11,180
0,540
yes.

2328
01:12:11,210 --> 01:12:12,080
0,180 180,300 300,330 330,630 630,870
And as I mentioned before

2329
01:12:12,080 --> 01:12:14,000
0,90 90,690 1050,1500 1500,1620 1620,1920
the switching if you have

2330
01:12:14,000 --> 01:12:16,670
0,390 390,870 870,1140 1530,2190 2190,2670
one core and three gas

2331
01:12:16,670 --> 01:12:17,780
0,450 450,600 600,720 720,990 990,1110
switching can be driven by

2332
01:12:17,780 --> 01:12:19,670
0,420 420,870 870,1290 1710,1830 1830,1890
timer interrupts which go to

2333
01:12:19,670 --> 01:12:21,240
0,60 60,300 300,600 600,1170
the virtual machine monitor.

2334
01:12:21,360 --> 01:12:22,620
0,540
Yes.

2335
01:12:26,730 --> 01:12:27,840
0,540
Okay.

2336
01:12:28,120 --> 01:12:30,130
0,210 210,570 570,930 930,1200 1200,2010
More questions about virtual machines

2337
01:12:30,160 --> 01:12:31,720
0,300 300,360 360,900 900,1050 1050,1560
before I switch to the.

2338
01:12:34,210 --> 01:12:35,320
0,510
Paper.

2339
01:12:39,410 --> 01:12:40,540
0,510
Alright.

2340
01:12:40,870 --> 01:12:43,570
0,150 150,840 1230,1710 1710,2070 2070,2700
The paper takes this hardware

2341
01:12:43,570 --> 01:12:45,160
0,90 90,180 180,570 570,1020 1320,1590
is a starting point and

2342
01:12:45,160 --> 01:12:46,810
0,330 330,480 480,600 600,1020 1020,1650
uses it for something else,

2343
01:12:46,840 --> 01:12:48,670
0,300 300,330 330,630 630,1200 1620,1830
not a virtual machine, so

2344
01:12:48,670 --> 01:12:49,180
0,150 150,210 210,360 360,420 420,510
that's a lot of the

2345
01:12:49,180 --> 01:12:50,230
0,300 300,360 360,450 450,930 930,1050
interest in the papers that

2346
01:12:50,230 --> 01:12:51,580
0,180 360,690 690,840 840,1110 1110,1350
they took this harder which

2347
01:12:51,580 --> 01:12:53,770
0,180 180,1200 1200,1890 1890,2070 2070,2190
is absolutely design, just for

2348
01:12:53,770 --> 01:12:55,690
0,270 270,1080 1410,1650 1650,1710 1710,1920
virtual machines and the paper

2349
01:12:55,690 --> 01:12:56,500
0,180 180,450 450,540 540,630 630,810
saying gosh we could just

2350
01:12:56,500 --> 01:12:58,180
0,150 150,270 270,870 990,1230 1230,1680
use this hardware to do

2351
01:12:58,210 --> 01:12:59,080
0,210 210,390 390,570 570,600 600,870
just makes not a virtual

2352
01:12:59,080 --> 01:13:02,480
0,450 1590,2160 2490,2970
machine and um.

2353
01:13:02,810 --> 01:13:04,580
0,420 420,840 840,1140 1140,1590 1590,1770
What they're a high-level view

2354
01:13:04,580 --> 01:13:06,200
0,60 60,180 180,300 300,870 870,1620
of what they're doing is,

2355
01:13:06,260 --> 01:13:07,850
0,150 150,360 360,870 1140,1380 1410,1590
um, they're just they want

2356
01:13:07,850 --> 01:13:10,070
0,60 60,450 450,630 810,1230 1230,2220
to implement the ordinary processes,

2357
01:13:10,100 --> 01:13:10,940
0,150 150,270 270,540 540,630 630,840
now we're back in just

2358
01:13:10,940 --> 01:13:13,220
0,630 960,1410 1410,1800 1800,2100 2100,2280
Linux virtual machines anymore, just

2359
01:13:13,220 --> 01:13:14,930
0,630 660,870 900,1260 1260,1560 1560,1710
Linux but assuming vt X

2360
01:13:14,930 --> 01:13:16,580
0,330 330,660 660,1140
hardware is doomed.

2361
01:13:16,980 --> 01:13:18,500
0,690
I'm.

2362
01:13:19,330 --> 01:13:20,980
0,540 630,780 780,1050
Um, we have.

2363
01:13:21,150 --> 01:13:24,060
0,960 990,1560 1920,2220 2220,2400 2400,2910
Linux and a we assume

2364
01:13:24,060 --> 01:13:26,280
0,180 180,720 720,900 900,1740 1860,2220
we've loaded the dune low

2365
01:13:26,280 --> 01:13:28,050
0,270 270,660 660,1110 1110,1290 1290,1770
double kernel module into Linux,

2366
01:13:28,050 --> 01:13:29,610
0,180 180,360 360,660 660,1380 1380,1560
now this dune software is

2367
01:13:29,610 --> 01:13:31,530
0,570 600,900 900,1050 1050,1620 1620,1920
running a in supervisor mode

2368
01:13:31,530 --> 01:13:32,340
0,210 210,480 480,540 540,600 600,810
as part of the Linux

2369
01:13:32,340 --> 01:13:33,340
0,480
kernel.

2370
01:13:33,670 --> 01:13:35,080
0,450 570,990 990,1080 1080,1140 1140,1410
Um, but for the most

2371
01:13:35,080 --> 01:13:36,010
0,270 270,570 600,690 690,810 810,930
part we're you know we're

2372
01:13:36,010 --> 01:13:37,300
0,240 240,630 630,720 720,780 780,1290
running Linux and we're expecting

2373
01:13:37,300 --> 01:13:39,900
0,60 60,570 600,930 930,1860
to run Linux processes.

2374
01:13:41,180 --> 01:13:42,470
0,540 540,660 660,1080 1080,1140 1140,1290
So the abstraction of trying

2375
01:13:42,470 --> 01:13:43,580
0,60 60,450 450,780 780,1050 1050,1110
to support is mostly the

2376
01:13:43,580 --> 01:13:45,500
0,420 420,930 930,1050 1050,1380 1380,1920
process abstraction with system calls

2377
01:13:45,500 --> 01:13:46,880
0,120 480,870 870,930 930,1110 1110,1380
and all the sort of

2378
01:13:46,970 --> 01:13:48,620
0,360 360,600 600,780 840,1170 1170,1650
ordinary things that Linux processes

2379
01:13:48,620 --> 01:13:50,990
0,90 90,390 1290,1890 1920,2190 2190,2370
can do, but we want

2380
01:13:50,990 --> 01:13:51,830
0,60 60,180 180,360 360,660 660,840
to use this vt, X

2381
01:13:51,830 --> 01:13:53,540
0,720 750,990 990,1350 1350,1590 1590,1710
hardware to give sort of

2382
01:13:53,600 --> 01:13:56,840
0,960 990,1470 2040,2610 2610,2730 2790,3240
more a sort of allow

2383
01:13:56,840 --> 01:13:58,400
0,270 270,720 720,1320 1320,1440 1440,1560
Pro ordinary processes to do

2384
01:13:58,400 --> 01:14:03,100
0,180 180,540 540,1260 3450,3930
some extra things and.

2385
01:14:03,100 --> 01:14:05,260
0,390 390,900 1230,1740 1770,2040 2040,2160
There's really a so we're

2386
01:14:05,260 --> 01:14:06,520
0,270 270,450 450,780 780,930 930,1260
actually gonna run so doing

2387
01:14:06,520 --> 01:14:09,070
0,480 480,690 690,1710 1770,2100 2130,2550
runs, these processes or allows

2388
01:14:09,070 --> 01:14:10,060
0,60 60,450 450,570 570,810 810,990
a process to switch into

2389
01:14:10,060 --> 01:14:11,380
0,330 330,630 630,900 900,1140 1140,1320
dune mode which means that

2390
01:14:11,380 --> 01:14:13,240
0,360 360,570 870,1500 1500,1710 1710,1860
instead of a just being

2391
01:14:13,240 --> 01:14:14,590
0,600 600,780 780,1170 1170,1290 1290,1350
protected being isolated by a

2392
01:14:14,590 --> 01:14:17,230
0,330 330,720 840,1320 1320,1590 1590,2640
page table, now this process

2393
01:14:17,260 --> 01:14:19,480
0,300 300,990 990,1590 1770,2040 2040,2220
is isolated by a the

2394
01:14:19,480 --> 01:14:21,580
0,420 420,780 780,1020 1020,1890 1920,2100
complete vt X apparatus, so

2395
01:14:21,580 --> 01:14:23,650
0,120 120,450 450,1230 1290,1920 1920,2070
for this process june's going

2396
01:14:23,650 --> 01:14:26,110
0,60 60,1020 1470,1830 1830,2280 2280,2460
to maintain this process now

2397
01:14:26,110 --> 01:14:28,810
0,450 900,1320 1320,1860 1860,2280 2280,2700
has this virtual set of

2398
01:14:28,930 --> 01:14:30,880
0,150 150,480 480,900 930,1380 1380,1950
of all the control registers

2399
01:14:30,880 --> 01:14:32,140
0,120 120,270 270,900
like its own.

2400
01:14:32,530 --> 01:14:34,450
0,180 180,630 630,1050 1260,1680 1680,1920
{C,R} three and therefore its

2401
01:14:34,450 --> 01:14:36,560
0,420 420,930 930,1440
own page table.

2402
01:14:36,560 --> 01:14:38,630
0,450 450,1020 1230,1830 1830,1950 1950,2070
Because this process is going

2403
01:14:38,630 --> 01:14:40,920
0,90 90,330 330,780 1140,1620
to run in a.

2404
01:14:41,040 --> 01:14:42,990
0,450 450,720 720,1560 1560,1860 1860,1950
Non root supervisor mode, so

2405
01:14:42,990 --> 01:14:43,560
0,60 60,210 210,360 360,480 480,570
it can run all the

2406
01:14:43,560 --> 01:14:45,660
0,390 390,960 960,1200 1200,1770 1770,2100
privileged instructions although against the

2407
01:14:46,200 --> 01:14:48,480
0,420 420,900 1320,1770 1770,1920 1920,2280
virtual state implemented by BT

2408
01:14:48,480 --> 01:14:49,560
0,600
X.

2409
01:14:50,990 --> 01:14:52,280
0,570 600,810 810,870 870,930 930,1290
So one of the critical

2410
01:14:52,280 --> 01:14:53,330
0,210 210,330 330,720 720,840 840,1050
things this process can do

2411
01:14:53,330 --> 01:14:54,560
0,150 150,210 210,540 540,900 930,1230
and are doing is a

2412
01:14:54,560 --> 01:14:55,880
0,360 360,420 420,570 570,930 930,1320
set up its own page

2413
01:14:55,880 --> 01:14:58,040
0,510 780,1080 1080,1230 1230,1680 1680,2160
table using its own hardware

2414
01:14:58,040 --> 01:15:00,260
0,240 240,750 780,900 900,1380 1440,2220
c r3, of course doom,

2415
01:15:00,350 --> 01:15:02,120
0,120 120,270 270,720 720,900 900,1770
you know controls a peaty.

2416
01:15:02,680 --> 01:15:04,690
0,210 210,390 390,900 900,1350 1620,2010
For this process so a

2417
01:15:04,690 --> 01:15:06,250
0,270 450,600 600,600 600,1380 1380,1560
and the E T is

2418
01:15:06,250 --> 01:15:06,850
0,120 120,210 210,300 300,510 510,600
going to be set up

2419
01:15:06,850 --> 01:15:08,170
0,120 120,420 420,600 600,1200 1200,1320
to only have entries for

2420
01:15:08,170 --> 01:15:10,330
0,180 180,960 990,1380 1380,1800 1800,2160
this processes ordinary process memory,

2421
01:15:10,510 --> 01:15:11,350
0,180 180,240 240,600 600,690 690,840
so the process can put

2422
01:15:11,350 --> 01:15:12,400
0,300 300,420 420,630 630,840 840,1050
anything that like since zero

2423
01:15:12,400 --> 01:15:13,960
0,300 300,450 450,690 690,810 810,1560
three but because the mu

2424
01:15:14,590 --> 01:15:16,690
0,510 630,1290 1290,1410 1410,1530 1530,2100
m translates through the iti

2425
01:15:16,690 --> 01:15:18,100
0,240 240,840 840,990 990,1050 1050,1410
after translating through the ordinary

2426
01:15:18,100 --> 01:15:19,240
0,240 240,480 480,540 540,900 900,1140
ph table, the process still

2427
01:15:19,240 --> 01:15:21,550
0,630 840,1380 1380,1530 1530,1980 1980,2310
cannot escape its allocated memory,

2428
01:15:21,580 --> 01:15:22,570
0,150 150,210 210,570 570,840 840,990
so the process doesn't have

2429
01:15:22,570 --> 01:15:24,550
0,360 750,960 960,1020 1050,1500 1500,1980
any sort of additional powers

2430
01:15:24,550 --> 01:15:25,860
0,150 150,570 570,840
with respect to.

2431
01:15:26,030 --> 01:15:27,830
0,270 270,900 900,990 990,1260 1260,1800
Other processes or kernel memory,

2432
01:15:27,860 --> 01:15:29,060
0,180 180,300 300,480 480,810 900,1200
um, it just has now

2433
01:15:29,060 --> 01:15:30,710
0,60 60,330 330,900 900,1290 1290,1650
a more flexible way of

2434
01:15:30,890 --> 01:15:32,060
0,360 360,480 480,600 600,780 780,1170
setting up its own memory.

2435
01:15:33,700 --> 01:15:34,570
0,300 300,420 420,630 630,810 810,870
Alright, so one thing a

2436
01:15:34,570 --> 01:15:36,040
0,270 270,660 660,780 780,1050 1050,1470
dune process can do is

2437
01:15:36,070 --> 01:15:37,300
0,210 210,330 330,480 480,810 810,1230
have it's own page table,

2438
01:15:37,780 --> 01:15:39,010
0,60 60,240 240,510 510,840 840,1230
in fact it's basically required

2439
01:15:39,010 --> 01:15:39,670
0,60 60,150 150,270 270,360 360,660
to have its own page

2440
01:15:39,670 --> 01:15:41,020
0,300 300,780
table plus.

2441
01:15:41,870 --> 01:15:43,730
0,300 300,360 360,510 510,930 1680,1860
Otherwise, it won't work and

2442
01:15:43,730 --> 01:15:44,960
0,150 150,480 480,660 660,720 720,1230
the other thing a process

2443
01:15:44,960 --> 01:15:48,020
0,120 120,660 960,1470 1500,2400 2430,3060
can do is have a

2444
01:15:48,320 --> 01:15:51,300
0,1050 1050,1650 1680,2520
supervisor mode and.

2445
01:15:51,300 --> 01:15:54,330
0,240 240,630 630,1290 1800,2490 2490,3030
A user mode within its.

2446
01:15:54,960 --> 01:15:57,120
0,330 330,690 690,1350 1560,2070 2070,2160
Little virtual machine and be

2447
01:15:57,120 --> 01:15:58,290
0,180 180,270 270,780 780,900 900,1170
able to run be able

2448
01:15:58,290 --> 01:16:00,030
0,150 150,390 390,480 480,1200 1200,1740
to have the supervisor code

2449
01:16:00,390 --> 01:16:01,410
0,300 300,600 600,750 750,840 840,1020
set itself up to be

2450
01:16:01,410 --> 01:16:04,080
0,930 1320,2070 2070,2130 2130,2460 2460,2670
protected against the code that

2451
01:16:04,080 --> 01:16:05,760
0,360 360,540 540,900 900,1170 1170,1680
runs in guest user mode.

2452
01:16:06,160 --> 01:16:07,420
0,180 180,600 600,900 900,1020 1020,1260
So the paper really talks

2453
01:16:07,420 --> 01:16:09,100
0,180 180,360 360,630 630,960 960,1680
about these two different uses,

2454
01:16:09,430 --> 01:16:10,300
0,180 180,420 420,660 660,780 780,870
two different things you can

2455
01:16:10,300 --> 01:16:12,780
0,150 150,660 1410,1920
do with them.

2456
01:16:13,090 --> 01:16:15,160
0,420 540,960 960,1380
So the um.

2457
01:16:15,190 --> 01:16:18,040
0,510 540,1290 1290,1770 2100,2580 2580,2850
This ability to get at

2458
01:16:18,040 --> 01:16:18,730
0,120 120,180 180,510 510,600 600,690
for a process to get

2459
01:16:18,730 --> 01:16:20,050
0,120 120,180 180,600 600,1140 1140,1320
at the hardware support for

2460
01:16:20,050 --> 01:16:21,940
0,660 660,870 900,1230 1230,1500 1500,1890
supervisor user Vs user mode

2461
01:16:22,900 --> 01:16:25,720
0,690 690,1020 1020,1200 1200,1590 1650,2820
allows them to run untrusted

2462
01:16:26,530 --> 01:16:27,820
0,630 630,960 960,1170 1170,1230 1230,1290
plugin code here in a

2463
01:16:27,820 --> 01:16:29,500
0,1320
sandbox.

2464
01:16:29,730 --> 01:16:30,860
0,540
HMM.

2465
01:16:31,660 --> 01:16:32,470
0,150 150,270 270,390 390,690 690,810
And so the idea is

2466
01:16:32,470 --> 01:16:34,210
0,180 180,450 450,750 750,1140 1410,1740
oh maybe you're you're maybe

2467
01:16:34,210 --> 01:16:35,230
0,90 90,390 390,780 780,930 930,1020
the main program is like

2468
01:16:35,230 --> 01:16:37,630
0,90 90,330 330,1020 1530,2100 2130,2400
a web browser, um, you

2469
01:16:37,630 --> 01:16:38,650
0,90 90,240 240,450 450,840 840,1020
know you can download web

2470
01:16:38,650 --> 01:16:41,020
0,540 570,1320 1320,2070 2070,2220 2220,2370
browser, download plugins that your

2471
01:16:41,020 --> 01:16:42,880
0,180 180,510 510,1140 1230,1770 1770,1860
web browser runs maybe a

2472
01:16:42,880 --> 01:16:45,100
0,660 930,1530
new um.

2473
01:16:45,620 --> 01:16:48,110
0,360 690,1320 1320,2190 2190,2370 2370,2490
A video decoder or a

2474
01:16:48,110 --> 01:16:49,280
0,210 210,420 420,780 780,840 840,1170
new ad blocker or something,

2475
01:16:49,280 --> 01:16:50,330
0,120 120,180 180,330 330,630 630,1050
but we don't totally trust

2476
01:16:50,330 --> 01:16:51,230
0,120 120,480 480,600 600,750 750,900
that plugin so we'd like

2477
01:16:51,230 --> 01:16:52,280
0,120 120,300 300,390 390,570 570,1050
to run it with restricted

2478
01:16:52,280 --> 01:16:56,330
0,630 630,1170 2460,2940 3240,3840 3840,4050
privileges somehow it's possible but

2479
01:16:56,750 --> 01:16:57,500
0,150 150,300 300,390 390,660 660,750
a little bit tricky to

2480
01:16:57,500 --> 01:16:58,880
0,240 240,330 330,690 690,1170 1170,1380
do in ordinary Linux, but

2481
01:16:58,880 --> 01:17:00,410
0,150 150,690 1020,1260 1260,1380 1380,1530
with dune now we can

2482
01:17:00,410 --> 01:17:03,470
0,210 210,300 300,930 1590,1980 2310,3060
run the plugin a appear

2483
01:17:03,470 --> 01:17:05,210
0,120 120,420 420,990 990,1320 1350,1740
in user space and the

2484
01:17:05,210 --> 01:17:06,800
0,330 330,720 720,960 960,1470 1470,1590
web browser which runs in

2485
01:17:06,800 --> 01:17:08,240
0,180 210,300 300,390 390,840 840,1440
the in the process supervisor

2486
01:17:08,240 --> 01:17:10,190
0,270 330,660 660,1350 1350,1470 1470,1950
mode can configure the page

2487
01:17:10,190 --> 01:17:11,240
0,600
table.

2488
01:17:11,910 --> 01:17:14,040
0,570 570,720 720,1200 1200,1620 1620,2130
Configure a different page table,

2489
01:17:14,400 --> 01:17:15,690
0,390 390,570 570,870 870,1050 1050,1290
a for use by this

2490
01:17:15,690 --> 01:17:17,040
0,270 270,570 570,840 840,960 960,1350
user code because it's allowed

2491
01:17:17,040 --> 01:17:19,830
0,210 210,480 480,930 1380,1890 2430,2790
right c three a and

2492
01:17:19,830 --> 01:17:20,640
0,270 270,390 390,630 630,750 750,810
that can allow it to

2493
01:17:20,640 --> 01:17:23,280
0,600 600,840 840,1620 1620,2040 2040,2640
run this untrusted plugin code

2494
01:17:23,670 --> 01:17:25,380
0,360 360,570 570,990 990,1140 1140,1710
with only allowing it restricted

2495
01:17:25,380 --> 01:17:27,900
0,780 810,1050 1050,1440 1440,1710 1710,2520
access to just some pages

2496
01:17:28,140 --> 01:17:29,430
0,540 540,630 630,840 840,1200 1200,1290
of the web {browser's -}

2497
01:17:29,430 --> 01:17:30,320
0,420
memory.

2498
01:17:30,850 --> 01:17:32,830
0,210 210,750 870,1110 1110,1710 1770,1980
So that even if a

2499
01:17:32,830 --> 01:17:34,780
0,390 390,600 600,1080 1080,1500 1680,1950
plugin code militias can't just

2500
01:17:34,780 --> 01:17:37,420
0,750 750,1410 1410,1650 2130,2460 2460,2640
arbitrarily rewrite the main web

2501
01:17:37,420 --> 01:17:38,900
0,420 420,840
browsers memory.

2502
01:17:38,930 --> 01:17:39,980
0,420 480,630 630,720 720,810 810,1050
Um, and if the user

2503
01:17:39,980 --> 01:17:41,240
0,450 450,870 870,1050 1050,1170 1170,1260
code user code may be

2504
01:17:41,240 --> 01:17:43,430
0,480 480,540 540,780 840,1320 1320,2190
expected to make system calls.

2505
01:17:44,070 --> 01:17:46,260
0,390 420,780 780,1050 1050,1410 1410,2190
Um, but those system calls,

2506
01:17:46,620 --> 01:17:50,440
0,240 240,960 1140,1620 1620,2490
um, actually trap into.

2507
01:17:50,440 --> 01:17:52,630
0,450 450,1260 1260,1830 1830,2040 2040,2190
The supervisor mode of the

2508
01:17:52,630 --> 01:17:54,400
0,630 630,780 780,1080 1080,1260 1260,1770
process and not into Linux,

2509
01:17:54,400 --> 01:17:55,810
0,90 90,390 390,810 930,1230 1230,1410
the user this plugin code

2510
01:17:55,810 --> 01:17:57,070
0,120 120,360 360,480 480,870 870,1260
may think it's calling for

2511
01:17:57,070 --> 01:17:58,480
0,420 420,780 780,900 900,1080 1080,1410
Korea writer who knows what

2512
01:17:58,510 --> 01:18:01,300
0,540 540,1110 1350,1800 1830,2340 2340,2790
but actually a those attempts

2513
01:18:01,300 --> 01:18:03,130
0,90 90,390 390,660 660,1350 1470,1830
to execute system calls trap

2514
01:18:03,130 --> 01:18:05,000
0,270 270,480 510,750 750,1380
into the web browser.

2515
01:18:05,030 --> 01:18:06,290
0,180 180,240 240,930 960,1200 1200,1260
In the process and they

2516
01:18:06,290 --> 01:18:07,430
0,120 120,240 240,570 570,840 840,1140
can do whatever like stick

2517
01:18:07,430 --> 01:18:08,900
0,240 570,990 990,1110 1110,1230 1230,1470
can not do the system

2518
01:18:08,900 --> 01:18:10,550
0,480 480,780 780,1080 1080,1440 1440,1650
color exit system, call or

2519
01:18:10,640 --> 01:18:12,770
0,300 300,480 480,750 1710,1950 1950,2130
who knows what our web

2520
01:18:12,770 --> 01:18:14,660
0,300 300,480 480,1140 1140,1710 1710,1890
browser has full control over

2521
01:18:14,660 --> 01:18:16,790
0,90 90,510 510,1260 1380,1740 1740,2130
the sand boxed plugin code.

2522
01:18:19,740 --> 01:18:21,540
0,180 180,210 210,900 1200,1620 1620,1800
As a quick overview, any

2523
01:18:21,540 --> 01:18:23,160
0,150 150,630 630,930 1080,1350 1350,1620
any questions about using dune

2524
01:18:23,160 --> 01:18:24,660
0,330 330,990
sand box.

2525
01:18:28,760 --> 01:18:29,980
0,600
I'm.

2526
01:18:30,280 --> 01:18:31,060
0,150 150,240 240,360 360,600 600,780
And to be fair, this

2527
01:18:31,060 --> 01:18:32,020
0,90 90,510 510,750 750,870 870,960
is something this is an

2528
01:18:32,020 --> 01:18:34,180
0,450 450,660 1200,1500 1500,1620 1620,2160
effect that could be achieved

2529
01:18:34,180 --> 01:18:36,610
0,240 240,600 600,990 1050,1860 1890,2430
by quite different techniques using

2530
01:18:36,610 --> 01:18:38,280
0,420 420,1170
existing Linux.

2531
01:18:38,370 --> 01:18:39,700
0,780
I'm.

2532
01:18:39,990 --> 01:18:42,120
0,810 810,1140 1140,1530 1530,2010 2010,2130
Facilities but doom allows you

2533
01:18:42,120 --> 01:18:43,650
0,240 270,600 600,780 780,900 900,1530
to provide in a particularly

2534
01:18:43,650 --> 01:18:45,630
0,210 210,300 330,870 870,1230 1440,1980
kind of elegant and efficient

2535
01:18:45,630 --> 01:18:48,120
0,450 1440,1650 1650,2040 2040,2190 2190,2490
way by using the vt,

2536
01:18:48,120 --> 01:18:49,380
0,180 180,720
X hardware.

2537
01:18:51,550 --> 01:18:53,560
0,150 150,330 330,600 600,1050
The other thing that.

2538
01:18:54,090 --> 01:18:55,590
0,330 330,450 450,750 750,1110 1110,1500
Um the paper talks about

2539
01:18:55,680 --> 01:18:56,910
0,420 420,690 690,990 990,1110 1110,1230
using dune for is to

2540
01:18:56,910 --> 01:18:59,040
0,180 180,510 510,960 960,1500 1890,2130
make garbage collection faster, and

2541
01:18:59,040 --> 01:19:01,890
0,660 660,1110 1110,1650 2520,2760 2760,2850
here it's a way it

2542
01:19:01,890 --> 01:19:04,110
0,210 210,420 420,600 600,1080 1320,2220
does, that is by allowing

2543
01:19:04,110 --> 01:19:07,260
0,150 150,540 540,1170 1770,2250 2610,3150
the garbage collection, we're not

2544
01:19:07,260 --> 01:19:08,580
0,180 180,660 660,1020 1020,1110 1110,1320
doing sandbox anymore we're actually

2545
01:19:08,580 --> 01:19:09,880
0,210 210,360 360,810
not even using.

2546
01:19:10,140 --> 01:19:11,430
0,330 330,570 570,660 660,1110 1110,1290
User mode, we're just having

2547
01:19:11,430 --> 01:19:14,610
0,180 180,840 1260,1830 2460,2850 2850,3180
one program we're we're assuming

2548
01:19:14,610 --> 01:19:15,810
0,90 90,270 270,660 660,870 870,1200
that we're writing just whatever

2549
01:19:15,810 --> 01:19:16,830
0,420 420,480 480,660 660,900 900,1020
program who knows what, but

2550
01:19:16,830 --> 01:19:18,360
0,90 90,150 150,540 540,990 990,1530
in a garbage collected language

2551
01:19:18,360 --> 01:19:21,450
0,600 630,1410 1410,1710 2550,3030 3030,3090
like Java or python or

2552
01:19:21,450 --> 01:19:23,490
0,480 1140,1530 1530,1830 1830,1950 1950,2040
something, garbage costume could be

2553
01:19:23,490 --> 01:19:24,640
0,570
slow.

2554
01:19:25,000 --> 01:19:26,560
0,270 270,360 360,810 840,1470 1470,1560
You know, there's dozens and

2555
01:19:26,560 --> 01:19:27,520
0,330 330,390 390,660 660,750 750,960
dozens of tricks for making

2556
01:19:27,520 --> 01:19:29,380
0,300 300,600 600,1110 1140,1680 1680,1860
garbage collection faster, but one

2557
01:19:29,380 --> 01:19:30,340
0,90 90,150 150,360 360,540 540,960
of the things that's important

2558
01:19:30,340 --> 01:19:31,870
0,90 90,420 420,1080 1080,1200 1200,1530
in garbage collectors, the garbage

2559
01:19:31,870 --> 01:19:33,760
0,720 750,960 960,1380 1380,1590 1590,1890
collectors is somewhat many garbage

2560
01:19:33,760 --> 01:19:36,460
0,450 450,1440 1530,2010 2010,2340 2340,2700
collectors trace find that memory

2561
01:19:36,460 --> 01:19:37,660
0,90 90,270 270,870 870,960 960,1200
is still alive is still

2562
01:19:37,660 --> 01:19:39,400
0,480 570,810 810,1020 1020,1530 1530,1740
active by just tracing all

2563
01:19:39,400 --> 01:19:41,230
0,90 90,810 810,990 990,1200 1200,1830
the pointers through all objects

2564
01:19:41,290 --> 01:19:43,000
0,630 630,720 720,810 810,1500 1500,1710
starting at the registers, and

2565
01:19:43,210 --> 01:19:45,400
0,240 240,510 510,840 840,1200 1200,2190
if doesn't find some object

2566
01:19:45,730 --> 01:19:47,050
0,330 330,420 420,810 810,990 990,1320
after it's completed that race

2567
01:19:47,050 --> 01:19:48,850
0,300 300,480 480,1080 1440,1680 1680,1800
then that object can't be

2568
01:19:48,850 --> 01:19:50,170
0,390 390,480 540,870 870,930 930,1320
reached is referred to by

2569
01:19:50,470 --> 01:19:52,090
0,540 540,840 840,1050 1380,1530 1530,1620
any point or it could

2570
01:19:52,090 --> 01:19:53,320
0,120 120,690
be freed.

2571
01:19:53,600 --> 01:19:55,730
0,630 990,1230 1230,1410 1410,1740 1740,2130
Um, but many garbage collectors

2572
01:19:55,730 --> 01:19:56,900
0,210 210,270 270,360 360,660 660,1170
run at the same time

2573
01:19:56,900 --> 01:19:58,190
0,210 210,360 360,480 480,810 810,1290
as in a different thread

2574
01:19:58,190 --> 01:19:59,210
0,90 90,510 510,690 690,780 780,1020
or something as the main

2575
01:19:59,210 --> 01:20:00,620
0,510 720,930 930,1050 1050,1320 1320,1410
program and so maybe the

2576
01:20:00,620 --> 01:20:02,450
0,330 330,660 660,810 810,1380 1380,1830
garbage collector has started tracing

2577
01:20:02,450 --> 01:20:05,120
0,570 570,1050 1920,2220 2220,2490 2490,2670
pointers from maybe from some

2578
01:20:05,120 --> 01:20:06,740
0,210 210,300 300,1230 1230,1380 1380,1620
set of registers, and this

2579
01:20:06,740 --> 01:20:07,910
0,420 420,480 480,840 840,930 930,1170
followed a pointer to this

2580
01:20:07,910 --> 01:20:09,650
0,600 600,750 750,900 900,1440 1440,1740
object, which had pointers these

2581
01:20:09,650 --> 01:20:11,480
0,540 540,690 900,1200 1200,1470 1470,1830
objects and the garbage collectors

2582
01:20:11,480 --> 01:20:13,130
0,420 420,570 570,630 630,810 810,1650
following each of these pointers.

2583
01:20:13,550 --> 01:20:15,650
0,540 540,720 720,1110 1500,1950 1950,2100
Down to the tree or

2584
01:20:15,650 --> 01:20:17,600
0,390 390,510 510,1320 1620,1860 1860,1950
graph of objects may be

2585
01:20:17,600 --> 01:20:19,100
0,60 60,420 420,810 810,960 960,1500
the garbage collector has gotten.

2586
01:20:20,080 --> 01:20:22,160
0,510 510,780 780,1020 1020,1470
Down here so far.

2587
01:20:22,220 --> 01:20:23,180
0,180 180,390 390,690 690,870 870,960
And actually trace through all

2588
01:20:23,180 --> 01:20:25,100
0,210 210,570 570,720 720,1260 1500,1920
these objects, but then because

2589
01:20:25,100 --> 01:20:26,060
0,60 60,390 390,660 660,750 750,960
the garbage collector is running

2590
01:20:26,060 --> 01:20:28,430
0,690 690,840 840,1140 1350,1710 1710,2370
concurrently with the program itself,

2591
01:20:28,820 --> 01:20:30,980
0,300 300,390 390,840 840,1950 1950,2160
maybe the program modifies, this

2592
01:20:30,980 --> 01:20:32,900
0,450 450,660 660,990 990,1410 1410,1920
object, the garbage collectors already

2593
01:20:32,900 --> 01:20:34,220
0,510 510,810
traced through.

2594
01:20:34,480 --> 01:20:36,040
0,360 360,420 420,690 690,1050 1080,1560
That's a bad deal because

2595
01:20:36,040 --> 01:20:38,800
0,300 300,510 1080,1800 1800,2100 2280,2760
now the list of object

2596
01:20:38,800 --> 01:20:40,390
0,330 330,420 420,720 720,1110 1110,1590
pointers that garbage collectors decided

2597
01:20:40,390 --> 01:20:41,260
0,120 120,510 510,570 570,840 840,870
a live or dead or

2598
01:20:41,260 --> 01:20:42,490
0,510 510,630 750,930 930,1110 1110,1230
whatever it may not be

2599
01:20:42,490 --> 01:20:44,470
0,420 420,900 1260,1410 1410,1800 1800,1980
correct, because the object is

2600
01:20:44,470 --> 01:20:46,180
0,390 390,870 870,1020 1020,1140 1140,1710
already seen has been modified

2601
01:20:46,180 --> 01:20:47,440
0,120 120,210 210,720
by the program.

2602
01:20:48,490 --> 01:20:50,770
0,300 300,1200 1200,1650 1650,1980 1980,2280
So doom using page table

2603
01:20:50,770 --> 01:20:51,820
0,450 450,780 780,810 810,960 960,1050
support provides a way for

2604
01:20:51,820 --> 01:20:53,740
0,90 90,420 420,960 960,1110 1110,1920
the garbage collector to detect

2605
01:20:53,980 --> 01:20:56,290
0,480 480,690 690,990 1710,2130 2130,2310
writes like that, um, and

2606
01:20:56,290 --> 01:20:58,570
0,120 120,810 840,1470 1470,1860 1860,2280
in particular june sets up

2607
01:20:58,750 --> 01:21:01,840
0,840 990,1380 1380,2040 2040,2310 2400,3090
the c r3 the virtual

2608
01:21:01,840 --> 01:21:03,460
0,210 210,630 630,1050 1050,1200 1200,1620
c r3 supported by vt

2609
01:21:03,460 --> 01:21:05,050
0,600 1050,1200 1200,1380 1380,1470 1470,1590
X to point to its

2610
01:21:05,050 --> 01:21:06,540
0,210 210,540 540,1050
own page table.

2611
01:21:07,000 --> 01:21:09,520
0,540 720,960 960,1140 1140,1380 2040,2520
Um, and then the leaves

2612
01:21:09,520 --> 01:21:10,540
0,60 60,240 240,450 450,720 720,1020
all these page table entries

2613
01:21:10,540 --> 01:21:12,430
0,510 510,840 990,1410 1410,1770 1770,1890
valid but it looks at

2614
01:21:12,430 --> 01:21:14,710
0,150 150,660 660,1290 1590,1980 1980,2280
the d bit every page

2615
01:21:14,710 --> 01:21:16,330
0,540 540,690 690,750 750,1230 1230,1620
template has a dirty bit

2616
01:21:16,540 --> 01:21:17,960
0,240 240,390 390,450 450,990
that in the case.

2617
01:21:18,180 --> 01:21:19,890
0,240 240,390 390,510 510,1080 1530,1710
There's been a right to

2618
01:21:19,890 --> 01:21:21,540
0,270 270,750 750,1050 1170,1530 1530,1650
that page, so if the

2619
01:21:21,540 --> 01:21:23,550
0,540 540,810 810,960 960,1590 1710,2010
program writes some object, then

2620
01:21:23,550 --> 01:21:24,540
0,150 150,540 540,810 810,900 900,990
the dirty bit in the

2621
01:21:24,540 --> 01:21:26,860
0,810 810,1770
corresponding page.

2622
01:21:27,390 --> 01:21:29,520
0,570 990,1290 1290,1380 1380,1680 1680,2130
I'm in the page table,

2623
01:21:29,520 --> 01:21:30,240
0,120 120,360 360,480 480,600 600,720
the dirty bit will be

2624
01:21:30,240 --> 01:21:31,500
0,420 480,750 750,840 840,900 900,1260
set and so the government

2625
01:21:31,500 --> 01:21:33,120
0,300 300,720 720,1260 1260,1470 1470,1620
garbage collectors finished racing through

2626
01:21:33,120 --> 01:21:34,680
0,120 120,1020 1050,1230 1230,1350 1350,1560
the objects, it goes back

2627
01:21:34,680 --> 01:21:35,550
0,150 150,480 480,540 540,660 660,870
and looks at the d

2628
01:21:35,550 --> 01:21:36,780
0,270 270,360 360,420 420,750 750,1230
bits in the page table

2629
01:21:36,990 --> 01:21:39,810
0,900 1260,1530 1530,2160 2160,2490 2490,2820
defined all pages that contain

2630
01:21:39,810 --> 01:21:40,650
0,360 360,480 480,630 630,720 720,840
objects that might have been

2631
01:21:40,650 --> 01:21:42,450
0,690 690,900 900,1050 1050,1590 1590,1800
modified and {re-scans, -} those

2632
01:21:42,450 --> 01:21:45,270
0,810 1140,1590 2070,2430 2430,2670 2670,2820
objects and it turns out

2633
01:21:45,270 --> 01:21:46,950
0,180 180,690 870,1410 1410,1470 1470,1680
that this facility of getting

2634
01:21:46,950 --> 01:21:49,500
0,120 120,240 240,1050 1380,1980 2010,2550
at the debit is difficult

2635
01:21:49,500 --> 01:21:51,630
0,90 90,660 660,810 810,1230 1230,2130
and slow with ordinary Linux,

2636
01:21:51,660 --> 01:21:52,580
0,540
um.

2637
01:21:52,700 --> 01:21:53,270
0,150 150,270 270,420 420,480 480,570
I don't even know if

2638
01:21:53,270 --> 01:21:54,710
0,270 270,660 660,870 870,1080 1080,1440
Linux supports there are operating

2639
01:21:54,710 --> 01:21:55,520
0,360 360,450 450,570 570,660 660,810
systems where you can make

2640
01:21:55,520 --> 01:21:56,810
0,420 420,780 780,870 870,1200 1200,1290
system calls to ask for

2641
01:21:56,810 --> 01:21:59,150
0,240 240,900 1800,2160 2160,2220 2220,2340
d bits, but if you

2642
01:21:59,150 --> 01:22:00,860
0,390 390,750 750,900 900,1260 1260,1710
use june and vt, ax,

2643
01:22:00,860 --> 01:22:03,140
0,420 840,1320 1410,1680 1680,2100 2100,2280
then, um the process could

2644
01:22:03,170 --> 01:22:04,610
0,300 300,570 600,1110 1110,1350 1350,1440
just use ordinary load and

2645
01:22:04,610 --> 01:22:05,930
0,270 270,840 840,930 930,1230 1230,1320
store instructions to get the

2646
01:22:05,930 --> 01:22:07,820
0,630 630,780 780,1080 1080,1170 1170,1890
PS and airport, the debates

2647
01:22:07,820 --> 01:22:09,360
0,120 120,270 270,480 480,1110
and it's very fast.

2648
01:22:09,920 --> 01:22:11,630
0,510 780,990 990,1080 1080,1260 1260,1710
Um, and so they showed

2649
01:22:11,630 --> 01:22:12,650
0,90 90,270 270,420 420,630 630,1020
you know that this makes

2650
01:22:12,650 --> 01:22:15,170
0,150 150,630 1560,1830 1830,2100 2100,2520
this trick for some programs

2651
01:22:15,170 --> 01:22:17,180
0,180 180,510 510,870 870,1260 1260,2010
that are garbage collection intensive,

2652
01:22:17,600 --> 01:22:19,940
0,300 300,510 510,600 600,1440 1470,2340
um makes the programs significantly

2653
01:22:19,940 --> 01:22:21,040
0,540
faster.

2654
01:22:23,260 --> 01:22:25,040
0,180 180,900
Any questions.

2655
01:22:25,100 --> 01:22:26,040
0,330
Yeah.

2656
01:22:26,500 --> 01:22:28,720
0,510 510,660 660,1230 1230,1740 1740,2220
What would happen if a

2657
01:22:28,750 --> 01:22:32,760
0,1110 1140,2040 2430,3240
sandbox program am.

2658
01:22:32,850 --> 01:22:34,560
0,570 570,1170
Wants to.

2659
01:22:35,140 --> 01:22:36,460
0,300 300,630 630,810 810,960 960,1320
Like run its own garbage

2660
01:22:36,460 --> 01:22:38,470
0,480 480,570 570,1080 1110,1470 1500,2010
collector or something like that

2661
01:22:38,470 --> 01:22:39,790
0,120 120,510 570,750 750,1050 1050,1320
I see so you're starting

2662
01:22:39,790 --> 01:22:41,080
0,480 480,810 810,1020 1020,1170 1170,1290
using alright alright, so we

2663
01:22:41,080 --> 01:22:46,480
0,840 1770,2400 2400,3150 4050,4950 5070,5400
got using doom, um, we

2664
01:22:46,480 --> 01:22:48,730
0,150 150,210 210,630 630,1590 1590,2250
have a due process that's

2665
01:22:48,760 --> 01:22:50,680
0,510 510,1440
actually using.

2666
01:22:50,770 --> 01:22:53,020
0,420 420,810 810,1110 1110,1800 1830,2250
A vt, X is a

2667
01:22:53,020 --> 01:22:55,420
0,840 840,1230 1230,1560 1560,2130 2160,2400
supervisor versus user mode, we're

2668
01:22:55,420 --> 01:22:56,650
0,270 270,360 360,780 780,960 960,1230
running a plugin up here

2669
01:22:56,650 --> 01:22:57,610
0,90 90,330 330,630 630,750 750,960
in user mode and the

2670
01:22:57,730 --> 01:22:59,680
0,690 690,810 810,1440 1440,1710 1710,1950
plugin, but also it's also

2671
01:22:59,680 --> 01:23:00,550
0,150 150,240 240,270 270,540 540,870
written in a garbage collected

2672
01:23:00,550 --> 01:23:01,510
0,390 390,480 480,660 660,870 870,960
language and would like to

2673
01:23:01,510 --> 01:23:03,640
0,810 930,1170 1170,1260 1260,1440 1440,2130
use to have its own

2674
01:23:03,670 --> 01:23:05,460
0,660 660,1290
page table.

2675
01:23:05,710 --> 01:23:07,180
0,210 210,540 540,780 780,1200 1200,1470
Its own c r3 point

2676
01:23:07,180 --> 01:23:08,200
0,90 90,210 210,420 420,750 750,1020
to its own page table

2677
01:23:08,200 --> 01:23:09,550
0,120 120,270 270,510 510,720 720,1350
with its own v bits

2678
01:23:10,660 --> 01:23:11,600
0,300
now.

2679
01:23:11,740 --> 01:23:14,230
0,300 300,510 510,840 840,1620 1980,2490
That doesn't work because we're

2680
01:23:14,260 --> 01:23:15,610
0,270 270,330 330,630 630,1020 1050,1350
going to run the way

2681
01:23:15,610 --> 01:23:16,390
0,270 270,480 480,540 540,600 600,780
doon wants you to run

2682
01:23:16,390 --> 01:23:18,460
0,900 930,1440 1440,1800 1800,1950 1950,2070
plugins sandbox plugins is to

2683
01:23:18,460 --> 01:23:19,360
0,150 150,300 300,420 420,540 540,900
run them, and he used

2684
01:23:19,360 --> 01:23:22,820
0,390 1020,1740 1740,2160 2160,2910
in guest user mode.

2685
01:23:22,880 --> 01:23:24,350
0,450 450,660 660,1020 1020,1140 1140,1470
Guess user mode is not

2686
01:23:24,350 --> 01:23:25,910
0,630 750,1020 1020,1230 1230,1350 1350,1560
allowed, it's just like user

2687
01:23:25,910 --> 01:23:27,110
0,150 150,270 270,450 450,1050 1050,1200
mode is not allowed to

2688
01:23:27,410 --> 01:23:29,390
0,270 270,510 510,750 750,1320 1830,1980
think about c r3 and

2689
01:23:29,390 --> 01:23:30,620
0,270 270,480 480,780 780,1050 1050,1230
so in user mode in

2690
01:23:30,620 --> 01:23:31,850
0,270 270,540 540,810 810,930 930,1230
guest user mode, we don't

2691
01:23:31,850 --> 01:23:33,350
0,540 960,1080 1080,1260 1260,1380 1380,1500
get to have our own

2692
01:23:33,350 --> 01:23:34,460
0,300 300,750 750,870 870,1020 1020,1110
page table and so we

2693
01:23:34,460 --> 01:23:36,230
0,180 180,570 990,1320 1320,1680 1680,1770
don't get quick access to

2694
01:23:36,230 --> 01:23:37,460
0,90 90,840
the deepest.

2695
01:23:38,610 --> 01:23:40,800
0,270 270,540 540,630 630,1320 1350,2190
It's only a guest supervisor

2696
01:23:40,800 --> 01:23:42,020
0,600
mode.

2697
01:23:42,050 --> 01:23:42,740
0,90 90,240 240,330 330,480 480,690
So we can have around

2698
01:23:42,740 --> 01:23:43,940
0,450
CSR.

2699
01:23:44,210 --> 01:23:46,860
0,570 990,1200 1200,2010
So you can't.

2700
01:23:46,980 --> 01:23:48,420
0,180 180,840 840,960 960,1290 1290,1440
Where there's no obvious way

2701
01:23:48,420 --> 01:23:50,250
0,90 90,570 570,690 690,930 930,1830
to combine the two tricks,

2702
01:23:50,610 --> 01:23:51,900
0,120 120,270 270,630 630,690 690,1290
the two kinds of tricks.

2703
01:23:52,620 --> 01:23:54,180
0,240 240,330 330,1020
During the lapse.

2704
01:23:57,380 --> 01:23:58,820
0,180 180,510 510,720 720,1080 1080,1440
What about let's say somebody

2705
01:23:58,820 --> 01:24:01,670
0,300 300,1830 1830,1860 1890,2010 2010,2850
wrote a or a browser,

2706
01:24:01,820 --> 01:24:04,730
0,240 240,780 780,1260 1260,1920 2190,2910
um, actually using dune, um

2707
01:24:04,820 --> 01:24:06,680
0,180 180,360 360,810 840,1320
that would mean like.

2708
01:24:06,740 --> 01:24:07,700
0,150 150,300 300,420 420,690 690,960
I would be quite tough

2709
01:24:07,700 --> 01:24:10,400
0,570 990,1350 1350,1590 1590,2100 2130,2700
to make, if some computers

2710
01:24:10,400 --> 01:24:11,870
0,330 330,810 810,1020 1020,1110 1110,1470
didn't support dune or something

2711
01:24:11,870 --> 01:24:13,640
0,390 750,990 990,1140 1140,1440 1440,1770
right like it's hard to

2712
01:24:13,910 --> 01:24:15,470
0,300 300,570 570,900 900,1320 1320,1560
just put Chrome into and

2713
01:24:15,470 --> 01:24:17,510
0,210 210,630 630,1110 1230,1500 1500,2040
you use doon, if not

2714
01:24:17,510 --> 01:24:19,190
0,270 270,450 450,660 660,960 960,1680
everyone has that kernel modules

2715
01:24:19,220 --> 01:24:20,480
0,330 330,690 750,1110 1110,1170 1170,1260
right, so first of all

2716
01:24:20,480 --> 01:24:21,110
0,90 90,210 210,270 270,360 360,630
you have to be running

2717
01:24:21,110 --> 01:24:22,340
0,150 150,300 300,660 660,780 780,1230
on a computer that supports

2718
01:24:22,340 --> 01:24:24,110
0,90 90,540 540,1290 1500,1650 1650,1770
the vt X you know

2719
01:24:24,110 --> 01:24:25,610
0,90 90,450 450,810 810,1200 1200,1500
the underlying computer support vt

2720
01:24:25,610 --> 01:24:27,530
0,330 330,540 540,990 990,1470 1470,1920
X which means many Intel

2721
01:24:27,530 --> 01:24:28,720
0,360 360,780
chips many.

2722
01:24:29,960 --> 01:24:31,430
0,570 690,870 870,1020 1020,1200 1200,1470
Um, if you need vt,

2723
01:24:31,430 --> 01:24:33,080
0,240 240,360 360,630 630,1440 1440,1650
X to run dune and

2724
01:24:33,080 --> 01:24:34,040
0,240 240,390 390,450 450,540 540,960
dune had to be loaded

2725
01:24:34,040 --> 01:24:35,060
0,150 150,480 480,630 630,960 960,1020
in order to run the

2726
01:24:35,060 --> 01:24:36,740
0,510 900,1080 1080,1290 1290,1590 1590,1680
browser that takes advantage of

2727
01:24:36,740 --> 01:24:37,550
0,240 240,390 390,570 570,720 720,810
june, so yeah you've got

2728
01:24:37,550 --> 01:24:39,080
0,150 390,780 780,930 930,1080 1080,1530
to set this up correctly.

2729
01:24:41,330 --> 01:24:44,060
0,750 1110,1650 1650,1740 1740,2100 2100,2730
Hmm, it's a research project.

2730
01:24:45,560 --> 01:24:47,360
0,630 630,1230 1230,1380 1380,1590 1590,1800
It's intended to sort of.

2731
01:24:48,220 --> 01:24:49,540
0,270 270,480 480,810 810,1080 1080,1320
Get people thinking about things

2732
01:24:49,540 --> 01:24:51,340
0,210 420,840 840,1140 1140,1710 1710,1800
that could be deployed in

2733
01:24:51,340 --> 01:24:52,180
0,60 60,240 240,600 600,720 720,840
the real world if they

2734
01:24:52,180 --> 01:24:53,000
0,330
were.

2735
01:24:53,360 --> 01:24:54,500
0,210 210,420 420,570 570,720 720,1140
They seem like they're valuable

2736
01:24:55,220 --> 01:24:56,330
0,510 540,660 660,750 750,960 960,1110
so you know just like

2737
01:24:56,330 --> 01:24:57,980
0,300 300,450 450,720 720,960 1170,1650
Linux and Linux is hundreds

2738
01:24:57,980 --> 01:24:59,440
0,90 90,600 600,960
and hundreds of.

2739
01:25:00,140 --> 01:25:01,310
0,480 480,570 570,900 900,1020 1020,1170
Features, it has and so

2740
01:25:01,310 --> 01:25:03,200
0,300 300,690 690,780 780,1380 1410,1890
somebody decided to add, do

2741
01:25:03,200 --> 01:25:04,360
0,780
Linux.

2742
01:25:04,360 --> 01:25:05,260
0,180 180,330 330,450 450,540 540,900
You know as a standard

2743
01:25:05,260 --> 01:25:06,460
0,330 330,540 540,630 630,990 990,1200
feature, then I could start

2744
01:25:06,460 --> 01:25:08,050
0,360 360,630 1020,1290 1290,1410 1410,1590
relying on crime could just

2745
01:25:08,050 --> 01:25:09,040
0,210 210,480 480,690 690,900 900,990
use it would not be

2746
01:25:09,040 --> 01:25:09,860
0,60 60,390
a problem.

2747
01:25:10,580 --> 01:25:11,940
0,540
But.

2748
01:25:12,140 --> 01:25:13,440
0,570
Death.

2749
01:25:17,710 --> 01:25:19,420
0,300 300,540 540,1110 1110,1290 1290,1710
Sorry Sen, high-level do this

2750
01:25:19,450 --> 01:25:20,620
0,660
like.

2751
01:25:21,060 --> 01:25:22,650
0,300 300,600 600,930 930,1440 1440,1590
Like be like making a

2752
01:25:22,650 --> 01:25:24,270
0,390 390,750 780,1050 1050,1170 1170,1620
vm but instead of vm,

2753
01:25:24,270 --> 01:25:26,820
0,120 120,450 660,870 870,1830 2100,2550
you run a process or

2754
01:25:26,820 --> 01:25:28,720
0,840 840,1350
yeah or.

2755
01:25:28,840 --> 01:25:29,740
0,300 300,450 450,570 570,810 810,900
Yeah you can phrase it

2756
01:25:29,740 --> 01:25:31,120
0,210 210,480 480,870
either way it's.

2757
01:25:31,760 --> 01:25:33,290
0,60 60,240 240,660 660,900 1290,1530
I mean it's it's it's

2758
01:25:33,290 --> 01:25:35,240
0,870 870,1020 1020,1470 1470,1530 1530,1950
supporting what's mostly a process

2759
01:25:35,240 --> 01:25:36,760
0,540 540,990
abstraction because.

2760
01:25:37,240 --> 01:25:38,530
0,240 240,660 660,810 810,930 930,1290
But but but it's using

2761
01:25:38,530 --> 01:25:39,340
0,240 240,300 300,480 480,510 510,810
instead of using a page

2762
01:25:39,340 --> 01:25:40,990
0,240 240,720 1110,1320 1320,1560 1560,1650
table hardware, it's using the

2763
01:25:40,990 --> 01:25:42,580
0,420 420,990 1080,1230 1230,1530 1530,1590
CPU hardware to support a

2764
01:25:42,580 --> 01:25:44,040
0,420 420,930
process abstraction.

2765
01:25:44,330 --> 01:25:46,040
0,270 270,420 420,720 720,960 1410,1710
Um, but instead of that

2766
01:25:46,040 --> 01:25:47,480
0,390 390,750 750,1080 1080,1200 1200,1440
particular CPU hardware, it's using

2767
01:25:47,480 --> 01:25:49,480
0,240 420,960 960,1470
its vt, X.

2768
01:25:49,480 --> 01:25:50,940
0,390 390,810
Hardware which.

2769
01:25:51,000 --> 01:25:52,470
0,270 270,360 360,510 510,750 750,1470
As a few extra features

2770
01:25:52,800 --> 01:25:53,360
0,390
like.

2771
01:25:54,740 --> 01:25:56,660
0,390 390,510 510,1020 1020,1350
Like the ability to.

2772
01:25:56,660 --> 01:25:57,680
0,240 240,330 330,450 450,540 540,1020
Set up your own picture.

2773
01:25:59,010 --> 01:26:00,390
0,390 420,690 690,780 780,1200 1230,1380
Right, right I see, I

2774
01:26:00,390 --> 01:26:01,800
0,360 360,480 480,900 900,1080 1080,1410
remember the paper I read

2775
01:26:01,800 --> 01:26:03,180
0,510 510,720 720,1140 1140,1260 1260,1380
process level abstraction, but I

2776
01:26:03,180 --> 01:26:04,440
0,240 240,660 660,870 870,1020 1020,1260
didn't understand what it means,

2777
01:26:04,440 --> 01:26:05,790
0,150 150,270 270,660 660,810 990,1350
but I understand it, thank

2778
01:26:05,790 --> 01:26:06,520
0,180
you.

2779
01:26:11,350 --> 01:26:12,850
0,180 180,390 570,900 930,1410 1410,1500
All right now time is

2780
01:26:12,850 --> 01:26:14,500
0,210 210,450 450,780 780,1020 1050,1650
up, I'm happy to continue,

2781
01:26:14,620 --> 01:26:16,360
0,360 360,510 510,690 690,1200
anybody has more questions.

2782
01:26:16,390 --> 01:26:17,620
0,210 210,390 390,720
How to answer.

2783
01:26:18,840 --> 01:26:19,440
0,180 180,330 330,420 420,540 540,600
Yeah, so I had a

2784
01:26:19,440 --> 01:26:21,810
0,420 420,510 510,1290 1290,1890 1920,2370
question in particular about a

2785
01:26:21,810 --> 01:26:22,830
0,420 420,600 600,810 810,900 900,1020
something that said in the

2786
01:26:22,830 --> 01:26:24,420
0,390 390,720 720,1230 1230,1470 1470,1590
paper was a if a

2787
01:26:24,420 --> 01:26:26,040
0,480 480,690 690,780 780,1260 1260,1620
dune like a process a

2788
01:26:26,070 --> 01:26:28,740
0,540 540,1020 1020,1350 1350,2160 2340,2670
process inside dune forks, it

2789
01:26:28,740 --> 01:26:31,140
0,690 720,1230 1260,1650 1650,1890 1890,2400
becomes a non doing process,

2790
01:26:31,140 --> 01:26:32,460
0,270 270,510 510,750 750,840 840,1320
isn't that like a security

2791
01:26:32,460 --> 01:26:34,980
0,360 360,870 930,1590 1590,2010 2310,2520
flying away or or what's

2792
01:26:34,980 --> 01:26:36,040
0,90 90,630
the attack.

2793
01:26:36,960 --> 01:26:38,370
0,600 660,900 900,1020 1020,1170 1170,1410
A well if you run

2794
01:26:38,370 --> 01:26:39,990
0,300 300,450 450,540 540,750 750,1620
something as a due process

2795
01:26:40,020 --> 01:26:41,820
0,540 540,780 780,1050 1050,1230 1230,1800
thinking that it's now safe

2796
01:26:41,820 --> 01:26:43,530
0,210 210,690 720,930 930,1110 1110,1710
but then it can run

2797
01:26:43,680 --> 01:26:45,840
0,240 240,420 420,630 630,1230 1320,2160
it can just fork escape,

2798
01:26:46,020 --> 01:26:47,520
0,180 180,360 360,420 420,960 960,1500
so here's a possibility, yeah.

2799
01:26:48,250 --> 01:26:50,350
0,270 270,600 720,1290 1410,1860 1860,2100
Okay, so if let's see

2800
01:26:50,710 --> 01:26:52,720
0,450 450,630 630,780 780,1410 1410,2010
code down in supervisor mode.

2801
01:26:53,880 --> 01:26:55,920
0,570 570,840 840,1260 1260,1620 1620,2040
There's no security problems, this

2802
01:26:56,370 --> 01:26:57,450
0,420 420,570 570,750 750,930 930,1080
reflected this code because you

2803
01:26:57,450 --> 01:27:00,020
0,270 270,720 720,1140 1140,2040
already have whatever privileges.

2804
01:27:00,020 --> 01:27:00,980
0,90 90,510 510,570 570,780 780,960
Where possible, it already has,

2805
01:27:00,980 --> 01:27:01,880
0,90 90,180 180,480 480,810 810,900
it does not gain the

2806
01:27:01,880 --> 01:27:03,540
0,270 270,540 540,780 780,1170
extra pillow, just pork.

2807
01:27:03,600 --> 01:27:05,790
0,660 990,1260 1260,1440 1440,1920 1920,2190
Okay code up, but maybe

2808
01:27:05,790 --> 01:27:08,460
0,180 180,600 600,990 990,1950 1980,2670
it's using doomed sandbox plugin.

2809
01:27:09,060 --> 01:27:10,740
0,240 240,450 450,600 630,1320 1320,1680
And we have untrusted code

2810
01:27:10,740 --> 01:27:12,060
0,180 180,510 510,720
up here that.

2811
01:27:12,630 --> 01:27:14,620
0,240 240,360 360,510 510,1350
That would be dangerous.

2812
01:27:15,010 --> 01:27:16,090
0,210 210,390 390,660 660,750 750,1080
You know, let it run

2813
01:27:16,090 --> 01:27:17,860
0,390 390,870 870,1350 1440,1590 1590,1770
without doomed because it's not

2814
01:27:17,860 --> 01:27:20,110
0,450 450,630 630,870 870,1440 1590,2250
trusted we're using doomed sandbox,

2815
01:27:20,290 --> 01:27:21,610
0,240 240,360 360,450 450,600 600,1320
so then if we forked.

2816
01:27:22,590 --> 01:27:24,750
0,720 720,1020 1080,1380 1380,1650 1650,2160
Okay, so this code cannot

2817
01:27:24,780 --> 01:27:25,680
0,480
work.

2818
01:27:26,340 --> 01:27:27,210
0,210 210,300 300,420 420,750 750,870
Right, you can try to

2819
01:27:27,210 --> 01:27:28,650
0,210 210,300 300,630 630,990 990,1440
call the fork system call

2820
01:27:29,160 --> 01:27:30,990
0,180 180,840 840,1140 1140,1320 1320,1830
but a system call instruction

2821
01:27:30,990 --> 01:27:32,060
0,540
here.

2822
01:27:32,090 --> 01:27:34,310
0,630 630,810 810,1080 1320,2040 2040,2220
Traps into the supervisor part

2823
01:27:34,310 --> 01:27:36,110
0,60 60,210 210,840 1110,1350 1350,1800
of this process and presuming

2824
01:27:36,110 --> 01:27:37,310
0,60 60,690 720,990 990,1050 1050,1200
the supervisor part of this

2825
01:27:37,310 --> 01:27:39,240
0,360 360,450 450,870 870,1410
process is carefully written.

2826
01:27:39,630 --> 01:27:41,010
0,270 270,360 360,420 420,930 1230,1380
Not to be tricked and

2827
01:27:41,010 --> 01:27:41,730
0,90 90,180 180,360 360,660 660,720
so it's not actually a

2828
01:27:41,730 --> 01:27:43,640
0,480 870,1380
fork, um.

2829
01:27:43,640 --> 01:27:44,720
0,150 150,270 270,510 510,840 930,1080
So that doesn't work if

2830
01:27:44,720 --> 01:27:46,700
0,60 60,690 690,960 1140,1620 1620,1980
the supervisor of code, it

2831
01:27:46,700 --> 01:27:47,420
0,120 120,330 330,390 390,630 630,720
is allowed to fork it

2832
01:27:47,420 --> 01:27:49,040
0,90 90,300 300,390 390,570 1290,1620
is allowed to make system

2833
01:27:49,040 --> 01:27:49,700
0,300 300,390 390,450 450,600 600,660
calls that you get to

2834
01:27:49,700 --> 01:27:51,050
0,330 330,480 480,990 990,1230 1230,1350
forget this process with the

2835
01:27:51,050 --> 01:27:52,490
0,360 360,810 810,1140 1140,1320 1320,1440
same memory image, so we'll

2836
01:27:52,490 --> 01:27:53,440
0,210 210,420
get the.

2837
01:27:53,640 --> 01:27:55,280
0,330 330,450 450,660 660,1110
Plug in up here.

2838
01:27:55,470 --> 01:27:57,210
0,510 690,870 870,1230 1470,1650 1650,1740
And I say if you

2839
01:27:57,210 --> 01:27:58,950
0,300 300,960 960,1140 1140,1500 1500,1740
didn't realize that fork turned

2840
01:27:58,950 --> 01:28:00,520
0,210 210,1020
off doon.

2841
01:28:00,580 --> 01:28:02,060
0,180 180,390 420,930
And it did.

2842
01:28:05,370 --> 01:28:05,970
0,150 150,270 270,360 360,540 540,600
I mean it's hard to

2843
01:28:05,970 --> 01:28:06,900
0,210 210,360 360,510 510,660 660,930
see how this could actually

2844
01:28:06,900 --> 01:28:08,190
0,300 300,570 570,720 720,1050 1050,1290
happen but you know if

2845
01:28:08,190 --> 01:28:10,200
0,150 150,330 330,780 780,1350 1590,2010
it did something to resume

2846
01:28:10,200 --> 01:28:11,670
0,510 510,570 570,630 630,1020 1020,1470
execution of the plugin, now

2847
01:28:11,730 --> 01:28:12,930
0,180 180,270 270,330 330,570 570,1200
that would be very foolish,

2848
01:28:12,990 --> 01:28:13,680
0,180 180,270 270,450 450,600 600,690
now the plug is a

2849
01:28:13,680 --> 01:28:15,330
0,690 840,990 990,1080 1080,1200 1200,1650
sandbox, you know, in fact

2850
01:28:15,960 --> 01:28:17,460
0,480 480,630 630,750 750,840 840,1500
this you know the code.

2851
01:28:17,980 --> 01:28:19,000
0,240 240,330 330,390 390,840 840,1020
Jump in the sandbox here

2852
01:28:19,000 --> 01:28:20,650
0,330 330,660 660,1380 1380,1560 1560,1650
involves privileged instructions, just like

2853
01:28:20,650 --> 01:28:21,790
0,90 90,360 360,510 510,630 630,1140
it does on this slide

2854
01:28:22,090 --> 01:28:23,800
0,210 210,300 330,1200
because it switches.

2855
01:28:24,150 --> 01:28:25,900
0,900
Switches.

2856
01:28:26,360 --> 01:28:27,770
0,390 390,1140 1140,1260 1260,1320 1320,1410
Guess modes, and if you

2857
01:28:27,770 --> 01:28:28,970
0,180 180,240 240,510 510,990 990,1200
ask me that instruction here

2858
01:28:28,970 --> 01:28:31,500
0,330 510,900 900,1530
that's illegal instruction.

2859
01:28:32,160 --> 01:28:33,660
0,300 300,780 870,1200 1200,1380 1380,1500
I guess I guess what

2860
01:28:33,660 --> 01:28:35,460
0,90 90,300 300,1230 1230,1680 1680,1800
I was misunderstanding was I

2861
01:28:35,460 --> 01:28:37,200
0,240 240,480 480,780 1020,1590 1590,1740
think that the plugin is

2862
01:28:37,200 --> 01:28:38,430
0,180 180,270 270,660 660,900 900,1230
not a process like the

2863
01:28:38,460 --> 01:28:39,750
0,240 240,570 570,1050 1050,1170 1170,1290
the due process is the

2864
01:28:39,750 --> 01:28:41,340
0,690 690,810 810,1200 1200,1320 1320,1590
sandbox, the plugin is just

2865
01:28:41,340 --> 01:28:43,560
0,510 510,870 1290,1890 1890,1980 1980,2220
inside their process is just

2866
01:28:43,560 --> 01:28:45,420
0,570 570,690 690,1080 1080,1680 1680,1860
enabled to use features to

2867
01:28:45,420 --> 01:28:47,430
0,450 450,870 1020,1380 1380,1590 1590,2010
let the plugin run faster,

2868
01:28:47,430 --> 01:28:49,080
0,630 750,990 990,1170 1170,1290 1290,1650
basically that's right now we're

2869
01:28:49,080 --> 01:28:51,540
0,840 840,1500 1590,1800 1800,2070 2070,2460
absolutely assuming that this software

2870
01:28:51,540 --> 01:28:52,660
0,270 270,720
down here.

2871
01:28:52,750 --> 01:28:55,600
0,240 240,810 810,1080 1260,1740 1980,2850
Is clever, which is careful

2872
01:28:55,930 --> 01:28:58,030
0,480 780,930 930,1080 1080,1560 1830,2100
about what it likes about

2873
01:28:58,030 --> 01:29:00,200
0,750 750,900 900,1560
preventing a sandbox.

2874
01:29:00,290 --> 01:29:01,700
0,210 210,660 810,1140 1140,1260 1260,1410
To actually work in real

2875
01:29:01,700 --> 01:29:02,580
0,360
life.

2876
01:29:03,360 --> 01:29:04,740
0,180 180,390 390,780 810,1080 1080,1380
And it's not it's not

2877
01:29:04,770 --> 01:29:07,080
0,360 360,1020 1020,1290 1290,1770 1890,2310
a unsafe for the due

2878
01:29:07,080 --> 01:29:09,090
0,480 480,630 630,990 990,1710 1710,2010
process to have supervisor mode

2879
01:29:09,090 --> 01:29:10,920
0,300 300,450 450,810 810,1500 1500,1830
because it's actually supervisor mode

2880
01:29:10,920 --> 01:29:12,120
0,150 150,480 480,720 720,990 990,1200
and non root mode, which

2881
01:29:12,120 --> 01:29:13,500
0,90 90,210 210,540 540,690 690,1380
is the same as supervisor

2882
01:29:13,500 --> 01:29:14,970
0,420 420,510 510,630 630,1350 1350,1470
mode and a guest O

2883
01:29:14,970 --> 01:29:16,530
0,240 240,720 900,1290 1290,1440 1440,1560
S right it's like you

2884
01:29:16,530 --> 01:29:17,790
0,210 210,390 390,510 510,660 660,1260
can let it do everything

2885
01:29:17,790 --> 01:29:19,830
0,300 390,660 660,1140 1140,1710 1710,2040
just put pickup because vt

2886
01:29:19,830 --> 01:29:21,300
0,330 330,570 570,690 690,960 1080,1470
X it's going to be

2887
01:29:21,300 --> 01:29:22,320
0,210 210,270 270,600 600,930 930,1020
like a virtual machine, so

2888
01:29:22,320 --> 01:29:22,920
0,90 90,240 240,360 360,420 420,600
it's not going to hurt

2889
01:29:22,920 --> 01:29:24,450
0,420 660,900 900,1110 1170,1320 1320,1530
us that's right, it can't

2890
01:29:24,450 --> 01:29:26,070
0,360 360,540 540,690 690,1050 1050,1620
escape from its address cases,

2891
01:29:26,070 --> 01:29:28,410
0,810 810,990 1020,1620 1620,1830 1830,2340
{iti's -} buena seta VP

2892
01:29:28,410 --> 01:29:29,550
0,150 150,720 720,900 900,990 990,1140
to constrain it to its

2893
01:29:29,550 --> 01:29:30,560
0,240 240,720
dress space.

2894
01:29:33,100 --> 01:29:34,440
0,210 210,390 390,840
That makes sense.

2895
01:29:35,560 --> 01:29:36,670
0,300 300,600 600,840 840,990 990,1110
So one last thing I

2896
01:29:36,670 --> 01:29:39,280
0,390 390,990 1260,1530 1530,1530 2430,2610
had A I I there

2897
01:29:39,280 --> 01:29:41,110
0,180 180,420 420,480 480,1350 1350,1830
was like a paragraph on

2898
01:29:41,110 --> 01:29:42,880
0,420 750,1080 1080,1560 1560,1650 1650,1770
a on {ebt's -} and

2899
01:29:42,880 --> 01:29:44,440
0,150 150,570 570,1080 1080,1230 1230,1560
it said that the user

2900
01:29:44,440 --> 01:29:46,180
0,240 240,570 570,690 690,960 960,1740
page table can just expand

2901
01:29:46,180 --> 01:29:49,570
0,390 540,1350 1380,2550 2700,3060 3060,3390
the {addresses -} like re-map

2902
01:29:49,570 --> 01:29:50,950
0,180 180,300 300,510 510,900 900,1380
them to their original layout.

2903
01:29:51,420 --> 01:29:52,770
0,210 210,360 360,690 690,1170 1170,1350
That was something I just

2904
01:29:52,770 --> 01:29:54,330
0,180 180,660 660,720 720,900 900,1560
didn't understand the whole paragraph,

2905
01:29:54,330 --> 01:29:56,250
0,270 270,570 570,750 840,1710 1710,1920
so I I don't maybe

2906
01:29:56,250 --> 01:29:58,020
0,240 240,330 330,480 480,1200
that's a bit specific.

2907
01:29:58,280 --> 01:29:59,810
0,660 690,840 840,1050 1050,1230 1230,1530
Th I think what's going

2908
01:29:59,810 --> 01:30:01,340
0,390 390,630 630,810 810,1050 1050,1530
on is that the um.

2909
01:30:02,460 --> 01:30:06,000
0,660 660,1590 2250,2820 3090,3360 3360,3540
Physical addresses are on the

2910
01:30:06,000 --> 01:30:08,430
0,780 780,1170 1200,1440 1440,2040 2040,2430
x86 are have fewer bits

2911
01:30:08,430 --> 01:30:10,340
0,240 240,600 600,1410
than virtual addresses.

2912
01:30:10,340 --> 01:30:11,270
0,120 120,270 270,480 480,540 540,930
So I'm kind of guessing

2913
01:30:11,600 --> 01:30:13,310
0,330 330,870 990,1230 1230,1440 1440,1710
a and so that means

2914
01:30:13,310 --> 01:30:15,110
0,150 150,360 600,840 840,1080 1080,1800
that the E P T

2915
01:30:15,320 --> 01:30:16,740
0,180 180,300 300,720
you know that.

2916
01:30:17,230 --> 01:30:18,850
0,330 330,720 720,1050 1050,1320 1320,1620
The ordinary PC biomass virtual

2917
01:30:18,850 --> 01:30:19,990
0,300 300,360 360,690 690,1050 1050,1140
addresses to physical addresses to

2918
01:30:19,990 --> 01:30:22,120
0,330 330,810 810,990 990,1380 1380,2130
physical addresses have fewer bits

2919
01:30:22,300 --> 01:30:24,190
0,210 210,360 360,660 660,1680 1680,1890
and so that constructs the

2920
01:30:24,430 --> 01:30:25,820
0,330 330,720
the um.

2921
01:30:25,850 --> 01:30:27,200
0,270 270,810
That means.

2922
01:30:27,650 --> 01:30:30,020
0,540 990,1410 1410,1830 1830,1950 1950,2370
Um, when june is setting

2923
01:30:30,020 --> 01:30:30,980
0,420
up.

2924
01:30:31,100 --> 01:30:32,660
0,120 120,630 630,1320 1320,1500 1500,1560
An address space for a

2925
01:30:32,660 --> 01:30:34,400
0,1080 1140,1260 1260,1590 1590,1680 1680,1740
process or one way to

2926
01:30:34,400 --> 01:30:35,150
0,150 150,270 270,360 360,570 570,750
look at is when done

2927
01:30:35,150 --> 01:30:36,110
0,240 240,390 390,480 480,720 720,960
setting up the address space

2928
01:30:36,110 --> 01:30:38,400
0,150 150,690 840,1740
for process the.

2929
01:30:38,460 --> 01:30:39,840
0,450 450,690 690,900 900,1260 1260,1380
Process address space has to

2930
01:30:39,840 --> 01:30:41,220
0,300 300,420 420,480 480,1020 1020,1380
fit in the smaller number

2931
01:30:41,220 --> 01:30:43,050
0,150 150,870 1050,1260 1260,1380 1380,1830
of bits for a dune

2932
01:30:43,050 --> 01:30:45,660
0,960 990,1560 1590,2070 2070,2460 2460,2610
process, okay regular process is

2933
01:30:45,660 --> 01:30:46,650
0,120 120,240 240,360 360,780 870,990
going to be used I

2934
01:30:46,650 --> 01:30:47,310
0,90 90,150 150,270 270,360 360,660
don't know what the numbers

2935
01:30:47,310 --> 01:30:48,570
0,120 120,300 300,420 420,1080 1080,1260
are let's say 48 bit

2936
01:30:48,570 --> 01:30:50,520
0,330 330,1050 1140,1410 1410,1620 1620,1950
virtual addresses but maybe physical

2937
01:30:50,520 --> 01:30:52,890
0,420 420,600 600,1140 1140,1710 1710,2370
addresses are only 36 bits.

2938
01:30:53,420 --> 01:30:54,410
0,270 270,330 330,570 570,750 750,990
Again, I'm making this up

2939
01:30:54,470 --> 01:30:55,820
0,90 90,630 630,1020 1020,1200 1200,1350
the ordinary process could use

2940
01:30:55,820 --> 01:30:57,020
0,150 150,570 570,780 780,900 900,1200
all 48 bits for virtual

2941
01:30:57,020 --> 01:30:58,460
0,450 480,690 690,900 900,1290 1290,1440
addresses a june process can

2942
01:30:58,460 --> 01:31:00,230
0,210 210,690 720,1230 1230,1290 1290,1770
only use 36 or whatever.

2943
01:31:00,820 --> 01:31:02,320
0,150 150,480 480,720 720,1110 1110,1500
So there's different rules for.

2944
01:31:03,480 --> 01:31:04,980
0,240 240,330 330,450 450,750 870,1500
Things have to fit down.

2945
01:31:06,960 --> 01:31:08,160
0,660
Okay.

2946
01:31:13,220 --> 01:31:14,330
0,90 90,210 210,240 240,690 690,1110
I had a question about

2947
01:31:14,330 --> 01:31:16,550
0,240 240,630 630,900 900,1440 1500,2220
the BT X scheme and

2948
01:31:16,550 --> 01:31:18,020
0,180 180,300 300,780 780,990 990,1470
how we're accessing page tables,

2949
01:31:18,560 --> 01:31:20,900
0,1020 1440,1920 1920,2100 2100,2250 2250,2340
so when like in the

2950
01:31:20,900 --> 01:31:22,490
0,150 150,300 300,780 780,1050 1050,1590
way we're accessing page tables

2951
01:31:22,640 --> 01:31:24,650
0,750 750,1230 1350,1740 1740,1860 1860,2010
because we're going to the

2952
01:31:24,650 --> 01:31:26,870
0,600 600,720 720,1620 1920,2130 2130,2220
iti and then doing the

2953
01:31:26,870 --> 01:31:28,820
0,270 270,960 960,1050 1050,1650 1650,1950
second layer of translation there

2954
01:31:28,820 --> 01:31:31,670
0,240 240,660 1320,1860 2070,2490 2490,2850
from the guest physical address

2955
01:31:31,670 --> 01:31:32,990
0,90 90,180 180,480 480,810 810,1320
to the host physical address.

2956
01:31:34,260 --> 01:31:36,450
0,240 240,480 480,1140 1140,1290 1290,2190
Is the latency of accesses

2957
01:31:36,480 --> 01:31:38,100
0,450 450,540 540,810 810,1140 1140,1620
to the page table actually

2958
01:31:38,100 --> 01:31:39,220
0,540
lower.

2959
01:31:40,370 --> 01:31:42,740
0,210 210,480 480,660 660,1440 1950,2370
It takes more time potentially

2960
01:31:42,740 --> 01:31:44,180
0,270 270,390 390,630 630,1200 1200,1440
takes more time possibly much

2961
01:31:44,180 --> 01:31:45,350
0,180 180,600 630,750 750,1020 1020,1170
more time to train for

2962
01:31:45,350 --> 01:31:46,940
0,60 60,540 540,810 810,990 990,1590
the hardware, um you translated

2963
01:31:46,940 --> 01:31:48,140
0,660
address.

2964
01:31:48,140 --> 01:31:49,730
0,300 300,540 540,780 780,960 960,1590
Because now you do too

2965
01:31:49,790 --> 01:31:52,250
0,330 1260,1590 1590,1710 1710,2040 2040,2460
well the the worst cases

2966
01:31:52,250 --> 01:31:54,220
0,210 210,420 420,780 780,1410
very much worse because.

2967
01:31:54,870 --> 01:31:56,280
0,330 330,930 930,1110 1110,1200 1200,1410
You know on the wrist

2968
01:31:56,280 --> 01:31:58,860
0,270 270,450 450,1170 1980,2520 2520,2580
five there's multiple levels of

2969
01:31:58,860 --> 01:32:00,000
0,90 90,390 390,870 870,990 990,1140
the page table and so

2970
01:32:00,000 --> 01:32:01,500
0,270 360,690 690,1020 1020,1110 1110,1500
the um us, um be

2971
01:32:01,590 --> 01:32:02,850
0,480 480,600 600,780 780,1110 1110,1260
generated from this page from

2972
01:32:02,850 --> 01:32:04,800
0,360 750,1170 1170,1620 1620,1710 1710,1950
this PC page, and then

2973
01:32:04,800 --> 01:32:06,300
0,300 300,450 450,810 990,1380 1380,1500
next and next, each of

2974
01:32:06,300 --> 01:32:07,800
0,420 420,660 660,1020 1020,1230 1230,1500
those the xc six also

2975
01:32:07,800 --> 01:32:09,840
0,150 150,450 450,1050
has multiple levels.

2976
01:32:09,870 --> 01:32:11,190
0,240 240,630 660,840 840,960 960,1320
And so in the xc

2977
01:32:11,190 --> 01:32:12,440
0,660
six.

2978
01:32:12,440 --> 01:32:13,250
0,150 150,270 270,600 600,720 720,810
In the lookup in the

2979
01:32:13,250 --> 01:32:14,390
0,480 480,540 540,630 630,870 870,1140
first in the main page

2980
01:32:14,390 --> 01:32:15,320
0,210 210,510 510,690 690,750 750,930
table also has to make

2981
01:32:15,320 --> 01:32:18,140
0,360 360,690 690,1260 1260,1890 2490,2820
multiple memory references potentially each

2982
01:32:18,140 --> 01:32:19,700
0,90 90,360 360,750 750,1080 1080,1560
of those multiple memory references

2983
01:32:19,700 --> 01:32:20,360
0,180 180,270 270,420 420,540 540,660
has to go through the

2984
01:32:20,360 --> 01:32:22,190
0,660 1350,1500 1500,1590 1590,1710 1710,1830
iti and the E P

2985
01:32:22,190 --> 01:32:23,720
0,120 120,300 300,840 840,930 930,1530
D is also a multilevel

2986
01:32:23,720 --> 01:32:26,690
0,300 300,840 1230,1620 2070,2580 2820,2970
page table and so I

2987
01:32:26,690 --> 01:32:27,470
0,150 150,270 270,420 420,630 630,780
don't even know what the

2988
01:32:27,740 --> 01:32:29,540
0,510 510,1110 1110,1410 1410,1470 1470,1800
worst case number of memory

2989
01:32:29,540 --> 01:32:30,800
0,690 690,840 840,960 960,1200 1200,1260
references but it's quite a

2990
01:32:30,800 --> 01:32:32,210
0,150 150,570 570,780 780,1110 1110,1410
bit worse under vt, X

2991
01:32:32,210 --> 01:32:33,110
0,120 120,240 240,480 480,660 660,900
and it is with a.

2992
01:32:33,870 --> 01:32:36,000
0,840 1230,1380 1380,1470 1470,1680 1680,2130
Not that it is ordinary

2993
01:32:36,000 --> 01:32:37,410
0,330 330,540 540,780 780,1230 1230,1410
keeps so there's potential there

2994
01:32:37,410 --> 01:32:38,280
0,210 210,330 330,570 570,720 720,870
now, in fact there's lots

2995
01:32:38,280 --> 01:32:40,170
0,90 90,750 960,1290 1290,1740 1740,1890
of caching, so usually don't

2996
01:32:40,170 --> 01:32:41,070
0,150 150,300 300,540 540,660 660,900
run up against that worst

2997
01:32:41,070 --> 01:32:43,500
0,390 390,600
case but.

2998
01:32:43,500 --> 01:32:45,960
0,330 360,780 810,1260 1650,2100 2100,2460
Um, and so virtual machines

2999
01:32:45,960 --> 01:32:47,860
0,150 150,300 300,780 930,1260
are they still like.

3000
01:32:47,860 --> 01:32:50,020
0,420 420,930 960,1470 1740,2010 2010,2160
Generally slow today and if

3001
01:32:50,020 --> 01:32:51,790
0,480 810,1350 1350,1590 1590,1770 1770,1770
so I I guess I

3002
01:32:51,790 --> 01:32:53,470
0,150 150,570 600,840 840,1020 1020,1680
was wondering how does aws

3003
01:32:53,470 --> 01:32:55,160
0,300 300,660 690,1110
work, if um.

3004
01:32:55,160 --> 01:32:56,180
0,180 180,420 420,510 510,630 630,1020
It seems to be fast

3005
01:32:56,180 --> 01:32:56,720
0,90 90,150 150,360 360,420 420,540
and it seems to be

3006
01:32:56,720 --> 01:32:59,300
0,330 330,630 630,990 1350,1830 2430,2580
working well, so um, yeah

3007
01:32:59,300 --> 01:33:00,890
0,720 720,900 900,1320 1320,1440 1440,1590
my my belief is that

3008
01:33:00,890 --> 01:33:02,390
0,150 150,420 420,720 720,870 870,1500
they use vt X hardware.

3009
01:33:03,100 --> 01:33:04,390
0,480 480,660 660,780 780,1200 1200,1290
They use the support that

3010
01:33:04,390 --> 01:33:05,470
0,90 90,360 360,600 600,750 750,1080
we're talking about and that

3011
01:33:05,470 --> 01:33:07,360
0,570 810,1260 1260,1470 1470,1710 1710,1890
is a as well as

3012
01:33:07,360 --> 01:33:10,510
0,750 930,1800 2250,2790 2790,2880 2880,3150
clever devise schemes for efficient

3013
01:33:10,510 --> 01:33:12,460
0,270 270,810 960,1530 1620,1860 1860,1950
device access and that the

3014
01:33:12,460 --> 01:33:14,800
0,390 390,540 540,1140 1500,2070 2070,2340
result is that aws virtual

3015
01:33:14,800 --> 01:33:15,900
0,360 360,660
machines are.

3016
01:33:17,240 --> 01:33:18,480
0,600
Fast.

3017
01:33:19,160 --> 01:33:20,300
0,330 330,480 480,630 630,990 990,1140
We're not much slower than

3018
01:33:20,300 --> 01:33:21,820
0,270 300,510 510,930
a real computer.

3019
01:33:22,850 --> 01:33:24,940
0,630
Dessert.

3020
01:33:25,970 --> 01:33:27,170
0,270 270,390 390,630 630,900 900,1200
Oh I had also another

3021
01:33:27,170 --> 01:33:29,090
0,330 330,450 450,600 600,1170 1170,1920
question on the shadow coffee

3022
01:33:29,120 --> 01:33:32,150
0,960 990,1230 1230,1740 1740,2460 2490,3030
for a trumpet annoyed so

3023
01:33:32,480 --> 01:33:34,400
0,180 180,390 390,750 840,1290 1410,1920
you said that it like

3024
01:33:34,640 --> 01:33:35,960
0,420 420,750 750,930 930,1080 1080,1320
I understand how you would

3025
01:33:35,960 --> 01:33:37,190
0,330 330,450 450,750 750,930 930,1230
make it but does it

3026
01:33:37,190 --> 01:33:39,080
0,510 510,990 990,1110 1110,1410 1410,1890
actually make the shadow copy

3027
01:33:39,080 --> 01:33:40,860
0,480 510,690 690,900 900,1380
or does it just.

3028
01:33:41,600 --> 01:33:42,470
0,210 210,420 420,570 570,810 810,870
I think it has to

3029
01:33:42,470 --> 01:33:43,820
0,150 150,210 210,480 480,1050 1050,1350
be the channel copyright because

3030
01:33:43,820 --> 01:33:44,870
0,240 240,480 480,600 600,960 960,1050
it has to allow the

3031
01:33:44,870 --> 01:33:46,040
0,480 480,690 690,780 780,900 900,1170
process just to do it

3032
01:33:46,250 --> 01:33:48,290
0,600 600,930 960,1230 1230,1440 1440,2040
itself, not like to insulate

3033
01:33:48,620 --> 01:33:50,390
0,180 180,270 270,690 690,960 1440,1770
all the traps but it's

3034
01:33:50,390 --> 01:33:51,500
0,240 240,480 480,870 870,990 990,1110
doing every time does it

3035
01:33:51,500 --> 01:33:54,680
0,690 840,1020 1020,1830 1860,3000 3000,3180
remember the previous okay yeah,

3036
01:33:54,680 --> 01:33:57,440
0,300 930,1050 1050,1260 1260,2400 2400,2760
so yeah so yeah yes

3037
01:33:57,440 --> 01:33:59,510
0,120 120,540 540,810 1320,1800 1800,2070
and yes the virtual machine

3038
01:33:59,510 --> 01:34:00,440
0,270 270,570 570,660 660,900 900,930
monitor has to create a

3039
01:34:00,440 --> 01:34:01,940
0,180 180,480 480,810 990,1230 1230,1500
new page table where there

3040
01:34:01,940 --> 01:34:02,740
0,120 120,270
you know.

3041
01:34:02,980 --> 01:34:03,790
0,330 330,480 480,570 570,780 780,810
Yes has to create a

3042
01:34:03,790 --> 01:34:04,630
0,120 120,360 360,600 600,690 690,840
new page table and its

3043
01:34:04,630 --> 01:34:07,160
0,360 360,660 660,1620
virtual machine monitors.

3044
01:34:07,160 --> 01:34:08,480
0,180 180,390 390,600 600,1170 1170,1320
Page table which formatted up

3045
01:34:08,480 --> 01:34:09,500
0,210 210,630 690,840 840,900 900,1020
which is what the real

3046
01:34:09,500 --> 01:34:11,180
0,330 330,690 720,990 990,1140 1140,1680
hardware uses now of course

3047
01:34:11,390 --> 01:34:13,010
0,240 240,510 540,960 960,1020 1020,1620
there are plenty of opportunities

3048
01:34:13,010 --> 01:34:14,600
0,90 90,570 840,1050 1050,1200 1200,1590
for caching and for reuse,

3049
01:34:14,600 --> 01:34:16,160
0,240 240,450 450,720 840,1110 1110,1560
so it's a it's a

3050
01:34:16,160 --> 01:34:17,570
0,330 330,600 600,870 870,1320 1320,1410
clever virtual machine monitors if

3051
01:34:17,570 --> 01:34:18,680
0,150 150,600 600,780 780,780 780,1110
they notice that oh the

3052
01:34:18,680 --> 01:34:21,020
0,540 570,1110 1110,1230 1230,1410 1410,2340
guest changed just one Pte.

3053
01:34:21,740 --> 01:34:23,060
0,510 510,750 750,810 810,1080 1080,1320
Um, then the virtual machine

3054
01:34:23,060 --> 01:34:24,230
0,270 270,540 570,810 810,990 990,1170
monitor may be able to

3055
01:34:24,230 --> 01:34:26,240
0,930 930,1320 1320,1530 1530,1650 1650,2010
correspondingly limited amount of work

3056
01:34:26,240 --> 01:34:28,080
0,150 210,1020
to update.

3057
01:34:28,080 --> 01:34:29,460
0,300 300,480 480,810 810,1110 1110,1380
Um, it's shadow page table.

3058
01:34:30,400 --> 01:34:31,720
0,150 150,360 360,690 690,840 840,1320
And it also may keep.

3059
01:34:32,680 --> 01:34:34,540
0,240 240,660 660,750 750,1050 1530,1860
Um, you know when if

3060
01:34:34,540 --> 01:34:35,980
0,450 480,720 720,780 780,1350 1350,1440
it's sort of multiplex ING

3061
01:34:35,980 --> 01:34:37,360
0,240 240,540 540,750 750,1110 1110,1380
time sharing among multiple virtual

3062
01:34:37,360 --> 01:34:38,860
0,510 510,780 780,1020 1020,1260 1260,1500
machines, the virtual machine monitor

3063
01:34:38,860 --> 01:34:40,540
0,120 120,390 390,1200 1230,1320 1320,1680
will keep around the shadow

3064
01:34:40,540 --> 01:34:42,460
0,330 330,1050 1170,1500 1500,1620 1620,1920
page tables for the virtual

3065
01:34:42,460 --> 01:34:44,170
0,270 270,420 420,630 630,1050 1500,1710
machines that aren't running so

3066
01:34:44,170 --> 01:34:45,700
0,150 150,270 270,750 1080,1410 1410,1530
that it can reuse them

3067
01:34:45,700 --> 01:34:48,550
0,630 1620,1830 1830,1920 1920,2550 2550,2850
directly when it switches back

3068
01:34:48,550 --> 01:34:49,920
0,90 90,240 240,450 450,840
to that virtual machine.

3069
01:34:50,070 --> 01:34:51,450
0,570 570,750 750,1110 1140,1260 1260,1380
Okay I see, so does

3070
01:34:51,450 --> 01:34:52,200
0,120 120,240 240,360 360,480 480,750
that mean that you have

3071
01:34:52,200 --> 01:34:53,180
0,420
like.

3072
01:34:53,240 --> 01:34:54,620
0,150 150,300 300,390 390,960 960,1380
You have to remember a

3073
01:34:54,860 --> 01:34:57,440
0,390 390,750 750,1320 1410,1890 2160,2580
shadow copy floor like each

3074
01:34:57,440 --> 01:35:00,800
0,1080 1410,1890 1920,2250 2250,2700 2700,3360
process for each virtual machine.

3075
01:35:03,320 --> 01:35:05,840
0,450 870,990 990,1050 1050,1530 1530,2520
Yes, there are many, many,

3076
01:35:05,960 --> 01:35:07,670
0,270 270,570 570,810 810,1080 1080,1710
um many, many page tables

3077
01:35:07,790 --> 01:35:08,840
0,480 480,660 660,720 720,780 780,1050
running around on the virtual

3078
01:35:08,840 --> 01:35:11,000
0,360 660,1080 1080,1320 1320,1470 1470,2160
machine virtual machine is aware

3079
01:35:11,000 --> 01:35:13,130
0,120 120,750 1110,1380 1380,1620 1620,2130
of all page table switches

3080
01:35:13,130 --> 01:35:14,580
0,120 120,210 210,480 480,960
that the guest does.

3081
01:35:14,640 --> 01:35:16,980
0,210 210,390 390,870 1140,1590 1590,2340
Yeah it's a um that

3082
01:35:16,980 --> 01:35:18,990
0,180 480,1110 1110,1410 1410,1500 1500,2010
the specific issue of maintaining

3083
01:35:18,990 --> 01:35:20,940
0,90 90,390 390,630 630,1110
the shadow page tables.

3084
01:35:21,090 --> 01:35:21,960
0,120 120,300 300,660 660,720 720,870
It has consumed a lot

3085
01:35:21,960 --> 01:35:23,280
0,90 90,510
of work.

3086
01:35:23,900 --> 01:35:26,930
0,330 330,570 570,1620 1920,2610 2610,3030
Right, yeah yeah yeah yeah

3087
01:35:26,930 --> 01:35:28,040
0,600 630,720 720,840 840,1050 1050,1110
before you know this is

3088
01:35:28,040 --> 01:35:29,000
0,180 180,240 240,330 330,540 540,960
one of the many things

3089
01:35:29,000 --> 01:35:31,070
0,120 120,510 510,840 840,1110 1110,2070
that hardware supported virtual machines

3090
01:35:31,700 --> 01:35:33,110
0,600 600,780 780,810 810,990 990,1410
made quite a bit easier.

3091
01:35:34,620 --> 01:35:35,670
0,330 330,510 510,750 750,870 870,1050
Oh, okay, okay I see

3092
01:35:35,670 --> 01:35:37,170
0,60 60,360 390,840 870,1050 1050,1500
I see okay because ZTE

3093
01:35:37,170 --> 01:35:37,980
0,270 270,360 360,510 510,660 660,810
means you don't have to

3094
01:35:37,980 --> 01:35:38,850
0,210 210,330 330,450 450,630 630,870
cook up your own shadow

3095
01:35:38,850 --> 01:35:41,250
0,360 630,1110 1140,1560 1590,1950 1980,2400
page right, right, right, yeah

3096
01:35:41,250 --> 01:35:42,900
0,240 240,570 570,810 810,1230 1230,1650
that's nice yeah, thank you,

3097
01:35:43,080 --> 01:35:44,040
0,540
yes.

3098
01:35:51,010 --> 01:35:52,690
0,750 750,960 960,1110 1110,1320 1320,1680
Alright gotta head up, but

3099
01:35:52,750 --> 01:35:53,350
0,210 210,300 300,360 360,540 540,600
I'll see you guys on

3100
01:35:53,350 --> 01:35:55,810
0,540 660,1050 1050,1260 1500,2190 2190,2460
wednesday, thank you, thank you.

3101
01:35:56,860 --> 01:35:58,180
0,300 300,750
Thank you.

3102
01:36:02,010 --> 01:36:03,240
0,210 210,300 300,660 690,840 870,1230
Is it okay if you

3103
01:36:03,240 --> 01:36:04,260
0,150 150,510 510,720 720,900 900,1020
have time for one more

3104
01:36:04,260 --> 01:36:08,550
0,660 1440,2190 2670,3180 3750,4050 4050,4290
question, if if if this

3105
01:36:08,550 --> 01:36:09,570
0,180 180,270 270,540 540,630 630,1020
one is about the garbage

3106
01:36:09,570 --> 01:36:11,340
0,720 930,1080 1080,1350 1350,1620 1620,1770
collection of how like {re-scans,

3107
01:36:11,340 --> 01:36:13,140
0,690 690,1140 1200,1380 1380,1590 1590,1800
-} um you see like

3108
01:36:13,140 --> 01:36:16,860
0,90 90,420 420,990 1230,3420
the dirty bits like.

3109
01:36:18,250 --> 01:36:19,090
0,240 240,450 450,600 600,630 630,840
It is like a sort

3110
01:36:19,090 --> 01:36:20,170
0,60 60,120 120,630 630,960 960,1080
of a continued process where

3111
01:36:20,170 --> 01:36:21,400
0,150 150,420 420,930 930,1080 1080,1230
like it continues to {re-scan

3112
01:36:21,400 --> 01:36:24,430
0,480 480,690 690,1410 1410,2340 2430,3030
-} like indefinitely because couldn't.

3113
01:36:26,300 --> 01:36:27,980
0,240 240,420 420,750 750,1200 1200,1680
You're asking yeah whatever terminate

3114
01:36:27,980 --> 01:36:29,870
0,360 360,870 960,1230 1230,1590 1590,1890
supposing though there's always something

3115
01:36:29,870 --> 01:36:31,970
0,270 270,900 990,1230 1230,1500 1500,2100
new modified so in fact

3116
01:36:32,540 --> 01:36:34,100
0,330 390,840 840,1110 1110,1200 1200,1560
this potential problem, in fact

3117
01:36:34,100 --> 01:36:35,390
0,60 60,360 360,660 660,1080 1080,1290
the garbage collector does it

3118
01:36:35,630 --> 01:36:38,280
0,390 840,1110 1110,1380 1380,2250
it does one pass.

3119
01:36:38,820 --> 01:36:40,170
0,150 150,690 690,990 990,1290 1290,1350
Um, one pass through to

3120
01:36:40,170 --> 01:36:42,840
0,660 930,1170 1170,1290 1290,1500 1560,2670
completion, and then it freezes

3121
01:36:42,930 --> 01:36:44,130
0,360 360,720 720,810 810,900 900,1200
everything else but the garbage

3122
01:36:44,130 --> 01:36:45,540
0,420 420,570 570,1110 1110,1290 1290,1410
collector, so nothing else can

3123
01:36:45,540 --> 01:36:46,920
0,360 510,930 930,990 990,1170 1170,1380
happen then it goes back

3124
01:36:46,920 --> 01:36:47,610
0,90 90,240 240,300 300,390 390,690
and look at the dirty

3125
01:36:47,610 --> 01:36:48,570
0,390 390,510 510,570 570,720 720,960
pages, but of course everything

3126
01:36:48,570 --> 01:36:50,310
0,180 180,270 270,810 1470,1590 1590,1740
else is frozen with no

3127
01:36:50,310 --> 01:36:51,840
0,420 420,600 600,900 900,1140 1140,1530
more no more dirty pages

3128
01:36:51,840 --> 01:36:53,250
0,120 120,660 930,1200 1200,1350 1350,1410
can occur and then the

3129
01:36:53,250 --> 01:36:54,420
0,480 480,630 630,870 870,990 990,1170
garbage, the garbage here looks

3130
01:36:54,420 --> 01:36:55,320
0,180 180,390 390,690 690,840 840,900
all dirty pages, then it

3131
01:36:55,320 --> 01:36:56,880
0,210 210,360 360,960 1140,1500 1500,1560
knows it's done yet, you

3132
01:36:56,880 --> 01:36:58,110
0,270 300,510 510,840 840,960 960,1230
know does whatever it's supposed

3133
01:36:58,110 --> 01:36:58,830
0,60 60,180 180,240 240,510 510,720
to do to finish up

3134
01:36:58,830 --> 01:36:59,640
0,90 90,330 330,360 360,510 510,810
and create a free listing

3135
01:37:00,150 --> 01:37:02,740
0,780 780,960 960,1170 1170,1980
resumes all the threads.

3136
01:37:02,860 --> 01:37:04,120
0,180 180,330 330,930
They had stopped.

3137
01:37:04,440 --> 01:37:06,300
0,270 270,630 660,1140 1140,1590 1590,1860
Oh, okay, yeah OK, that

3138
01:37:06,300 --> 01:37:07,470
0,360 360,630 630,870 870,1020 1020,1170
celebrity says I I don't

3139
01:37:07,470 --> 01:37:08,910
0,120 120,390 390,780 780,1140 1140,1440
know it throws everything else

3140
01:37:08,910 --> 01:37:10,530
0,270 420,720 720,1230 1290,1530 1530,1620
but yeah yeah, this is

3141
01:37:10,530 --> 01:37:11,700
0,450 450,720 720,840 840,990 990,1170
complex stuff and of course

3142
01:37:11,700 --> 01:37:12,570
0,120 120,300 300,480 510,780 780,870
there's not enough room in

3143
01:37:12,570 --> 01:37:14,220
0,120 120,780 900,1350 1350,1590 1590,1650
the paper june paper to

3144
01:37:14,220 --> 01:37:17,250
0,630 630,960 960,1080 1080,1710 2550,3030
explain all the Internet's garbage

3145
01:37:17,250 --> 01:37:19,000
0,330 330,450 450,660 750,1320
collectors have to sadly.

3146
01:37:20,400 --> 01:37:21,960
0,300 300,960 960,1320 1320,1410 1410,1560
Alright yeah, thank you so

3147
01:37:21,960 --> 01:37:24,330
0,540 660,1230 1230,1530 2130,2310 2310,2370
much, thank you, see you

3148
01:37:24,330 --> 01:37:28,410
0,360
later.
