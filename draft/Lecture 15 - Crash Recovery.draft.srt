1
00:00:00,180 --> 00:00:01,800
0,330 330,480 480,750 750,900 900,1620
And can everybody see my
每个人都能看到我的屏幕

2
00:00:02,840 --> 00:00:05,330
0,750 870,1290 1320,1770 1890,2400 2400,2490
screen| or the whiteboard that
|或我共享的白板吗？

3
00:00:05,330 --> 00:00:08,160
0,90 90,690 1560,1950 1950,2220
I shared.| Okay, good.|
|好的，很好。|

4
00:00:09,250 --> 00:00:10,690
0,450 450,840 840,1050 1050,1290 1290,1440
How are people doing with
大家的锁实验做的怎么样了，

5
00:00:10,690 --> 00:00:12,070
0,330 360,660 660,960 990,1200 1200,1380
the lock lab,| let me
|让我从这里开始，问一下，

6
00:00:12,070 --> 00:00:14,170
0,330 330,720 1020,1380 1380,1740 1740,2100
start there, just ask if,|
|

7
00:00:15,740 --> 00:00:18,380
0,450 450,1320 1560,1830 1830,2040 2040,2640
how progress| and what its
进展如何，|或者困难的是什么，或者还好。

8
00:00:18,560 --> 00:00:20,330
0,270 270,780 780,1110 1140,1470 1470,1770
more difficult or it's looking
|

9
00:00:20,330 --> 00:00:21,440
0,570
okay.|
|

10
00:00:21,680 --> 00:00:23,450
0,540 540,630 630,810 810,1050 1140,1770
Anybody who want to report
有人想说说自己的感受吗？

11
00:00:23,450 --> 00:00:24,650
0,60 60,210 210,630 630,780 780,1200
on their experience so far.|
|

12
00:00:30,520 --> 00:00:31,810
0,210 210,750 780,990 990,1050 1050,1290
I hope lots of people
我希望很多人已经开始了。

13
00:00:31,810 --> 00:00:33,160
0,90 90,750
have started.|
|

14
00:00:37,130 --> 00:00:39,920
0,150 150,300 330,1920 2130,2400 2400,2790
Oh, I.| Yeah, go ahead.|
哦，我。|好的，继续。|

15
00:00:40,250 --> 00:00:41,960
0,300 300,570 570,690 690,1140
Oh, sorry, go ahead.|
哦，抱歉，请继续。|

16
00:00:42,050 --> 00:00:43,620
0,450 480,930
Okay, cool.|
好的，很好。|

17
00:00:44,130 --> 00:00:45,100
0,180

18
00:00:45,130 --> 00:00:47,380
0,300 300,510 510,660 660,1530
I'll go, I'll go.|
我来，我来继续说。|

19
00:00:47,440 --> 00:00:49,060
0,270 270,510 510,1170 1230,1410 1410,1620
The lock lab,| I think
锁实验，|我想第一部分， kalloc 没那么糟糕，

20
00:00:49,060 --> 00:00:51,580
0,120 120,480 480,870 870,1920
the first part, the

21
00:00:52,890 --> 00:00:55,350
0,120 120,900 930,1380 1380,1770 1770,2460
the {kalloc -} {} was

22
00:00:56,250 --> 00:00:58,260
0,330 330,510 510,1170 1200,1260 1470,2010
not as bad,| {} well,
|嗯，然后第二部分就有点难了，

23
00:00:58,530 --> 00:01:00,270
0,150 150,330 330,420 420,750 750,1740
and then the second part

24
00:01:00,540 --> 00:01:02,070
0,300 300,390 390,540 540,1290 1350,1530
was a bit harder,| well,
|嗯，在我看来要难得多。

25
00:01:02,070 --> 00:01:02,880
0,120 120,210 210,450 450,720 720,810
it's a lot harder in

26
00:01:02,880 --> 00:01:05,340
0,150 150,780 1230,1920
my opinion. {}|
|

27
00:01:06,180 --> 00:01:07,170
0,150 150,300 300,450 450,600 600,990
You just have to figure
你需要想出一个，

28
00:01:07,170 --> 00:01:08,240
0,540
out

29
00:01:10,150 --> 00:01:11,300
0,630
a,|
|

30
00:01:11,730 --> 00:01:12,600
0,210 210,360 360,420 420,660 660,870
I guess the hard part
我想最困难的部分是想出一个解决方案，

31
00:01:12,600 --> 00:01:13,960
0,870
was

32
00:01:14,400 --> 00:01:16,530
0,480 480,630 630,690 690,1230 1230,2130
thinking of a solution that,|
|

33
00:01:17,460 --> 00:01:18,600
0,120 120,300 300,450 450,780 780,1140
it's like hey this doesn't
比如这不会引起死锁，

34
00:01:18,600 --> 00:01:20,980
0,270 270,810 810,960 960,1830
cause deadlock,| but then
|但是如果你认为有可能会出现死锁，

35
00:01:20,980 --> 00:01:22,080
0,60 60,150 150,540
if you think

36
00:01:22,460 --> 00:01:24,260
0,270 270,330 330,810 810,1140 1140,1800
there are cases where like

37
00:01:24,440 --> 00:01:26,510
0,450 450,1050 1200,1410 1410,1860 1860,2070
deadlock {} could happen| if
|如果你获取一个[]，支持获取锁，所有这些，

38
00:01:26,510 --> 00:01:29,030
0,510 630,1590 1620,1800 1800,2070 2070,2520
you acquire a [] it's

39
00:01:29,030 --> 00:01:30,050
0,270 270,600 600,720 720,840 840,1020
lock again and all that

40
00:01:30,050 --> 00:01:31,960
0,300 300,660
stuff,| but,|
|但是，|

41
00:01:32,210 --> 00:01:33,050
0,270 270,390 390,540 540,690 690,840
yeah, I just have to
是的，我需要考虑，

42
00:01:33,050 --> 00:01:34,520
0,390 900,1050 1050,1140 1140,1230 1230,1470
think, you have to think|
|

43
00:01:34,520 --> 00:01:36,650
0,480 840,1320 1320,1590 1590,2010 2010,2130
like about extra cases and
比如其他情况或所有东西，

44
00:01:36,650 --> 00:01:37,970
0,120 120,300 300,630 630,960 1050,1320
all that stuff| and after
|在那之后，情况应该不会那么糟糕。

45
00:01:37,970 --> 00:01:38,870
0,210 210,300 300,570 570,660 660,900
that it shouldn't be that

46
00:01:38,870 --> 00:01:39,620
0,330
bad.|
|

47
00:01:40,130 --> 00:01:41,120
0,330 330,630 630,750 750,900 900,990
Anybody else who want to
还有人想分享到目前为止的经验吗？

48
00:01:41,120 --> 00:01:42,900
0,270 270,390 390,1110
share their experience

49
00:01:43,250 --> 00:01:44,720
0,210 210,660 990,1140 1140,1350 1350,1470
so far?| I want to
|我想问一下，

50
00:01:44,720 --> 00:01:46,550
0,420 420,1110 1140,1320 1320,1440 1440,1830
ask,| {} are we allowed
|我们可以在实验里使用比如无锁，

51
00:01:46,550 --> 00:01:47,480
0,120 120,330 330,600 600,810 810,930
to do any part of

52
00:01:47,480 --> 00:01:49,010
0,120 120,510 510,780 780,1170 1170,1530
the lab like lock free,|
|

53
00:01:49,010 --> 00:01:50,600
0,570 570,690 690,900 900,1140 1140,1590
because I know like their
因为我知道它们的第一部分，

54
00:01:50,660 --> 00:01:52,130
0,450 450,690 690,810 810,1320 1320,1470
first part,| for example it's
|操作指南清晰地表示，

55
00:01:52,130 --> 00:01:54,170
0,510 570,840 840,1440 1440,1800 1800,2040
pretty the instructions said pretty

56
00:01:54,170 --> 00:01:56,510
0,690 690,1110 1140,1440 1440,2010 2010,2340
clearly| like make {a,parallel} memory
|编写一个并行的内存分配器，

57
00:01:56,510 --> 00:01:59,120
0,660 660,1020 1380,1920 2310,2490 2490,2610
allocator,| but {} can we
|但是我们能只用无锁，

58
00:01:59,120 --> 00:02:00,230
0,150 150,300 300,570 570,840 840,1110
do it just lock free|
|

59
00:02:00,230 --> 00:02:02,630
0,390 450,1080 1110,1290 1290,1560 1920,2400
and think, you know leave
并让它保持原样。

60
00:02:02,630 --> 00:02:04,040
0,120 120,300 300,390 390,780 930,1410
it as it is.| You're
|你可以自由地做任何能通过的解决方案，

61
00:02:04,040 --> 00:02:05,810
0,210 210,300 300,960 960,1440 1440,1770
free to do any solution

62
00:02:05,810 --> 00:02:06,920
0,90 90,390 390,480 480,720 720,1110
to pass which made great,|
|

63
00:02:07,700 --> 00:02:11,000
0,240 240,750 870,1560 1770,2610 2640,3300
{} it's fine {} lock
无锁也可以，

64
00:02:11,000 --> 00:02:12,800
0,480 480,930 930,1110 1110,1530 1530,1800
free,| I would be, {}|
|我会，|

65
00:02:12,830 --> 00:02:13,700
0,210 210,300 300,630 630,780 780,870
you are certainly free to
你当然可以自由去做它。

66
00:02:13,700 --> 00:02:14,480
0,180 180,420
do it.|
|

67
00:02:14,510 --> 00:02:15,800
0,390 390,570 570,690 690,1170 1170,1290
{} I'd be hesitant to
我不会直接从那里开始，

68
00:02:15,800 --> 00:02:16,940
0,330 330,600 630,810 810,930 930,1140
start there,| if I were
|如果我是你，

69
00:02:16,940 --> 00:02:18,470
0,390 390,660 660,870 870,1230 1230,1530
you,| I would start first
|我会先从一个更细粒度的锁实现开始，

70
00:02:18,470 --> 00:02:20,330
0,450 480,780 780,1050 1050,1530 1530,1860
with a more fine-grained lock

71
00:02:20,330 --> 00:02:21,920
0,780 780,960 960,1200 1200,1500 1500,1590
implementation| and then move to
|然后转到无锁实现。

72
00:02:21,920 --> 00:02:23,740
0,120 120,360 360,570 570,1290
the lock free implementation.|
|

73
00:02:24,140 --> 00:02:25,940
0,450 870,1050 1050,1170 1170,1500 1560,1800
{} So the reason there
所以这里不是从无锁开始的的原因是，

74
00:02:25,940 --> 00:02:26,840
0,150 150,360 360,690 690,810 810,900
is not started with a

75
00:02:26,840 --> 00:02:27,980
0,300 300,480 480,660 660,990 990,1140
lock free,| {} because if
|如果你使用一个细粒度的，

76
00:02:27,980 --> 00:02:28,880
0,120 120,330 330,420 420,540 540,900
you go to a {fine-grain

77
00:02:28,880 --> 00:02:29,900
0,390 390,480 480,690 690,780 780,1020
-},| you need to do
|你需要做所有并行的东西，

78
00:02:29,900 --> 00:02:31,160
0,180 180,300 300,420 420,870 870,1260
all of the parallel stuff,|
|

79
00:02:31,160 --> 00:02:31,940
0,210 210,360 360,450 450,660 660,780
but if you just go
但是如果你直接使用无锁，

80
00:02:31,940 --> 00:02:32,930
0,420 420,540 540,600 600,840 840,990
directly to a lock free

81
00:02:32,930 --> 00:02:34,070
0,240 240,450 450,570 570,750 750,1140
one,| then you can keep
|你可以将其保留在一个空闲列表中，

82
00:02:34,070 --> 00:02:35,540
0,270 270,480 480,750 750,1230 1230,1470
it on a single free

83
00:02:35,540 --> 00:02:36,710
0,480 480,630 630,780 780,960 960,1170
list| and you just need
|你只需要[]，

84
00:02:36,710 --> 00:02:38,240
0,360 480,810 810,990 990,1200 1200,1530
to, you just need to

85
00:02:38,240 --> 00:02:41,450
0,630 990,1440 1440,2100 2100,2700 2700,3210
{ -} {[] -},| the
|释放和分配操作，

86
00:02:41,480 --> 00:02:43,250
0,390 390,540 540,990 990,1590 1590,1770
free and allocate operations,| which
|实际上并没有那么糟糕。

87
00:02:43,250 --> 00:02:44,680
0,300 300,480 480,660 660,990
actually isn't that bad.|
|

88
00:02:45,120 --> 00:02:46,530
0,300 300,420 420,660 660,1110 1110,1410
Yeah, I think maybe in
是的，我想也许，在一个，

89
00:02:46,530 --> 00:02:47,640
0,480 480,600 600,780 780,840 840,1110
a,| if there's a single
|如果在 kalloc 的情况下只有一个列表，

90
00:02:47,640 --> 00:02:48,420
0,240 240,330 330,390 390,660 660,780
list in the case of

91
00:02:48,420 --> 00:02:49,440
0,90 90,600 600,720 720,900 900,1020
the kalloc,| that might be
|可能是那种情况，

92
00:02:49,440 --> 00:02:50,310
0,150 150,450 450,450 450,780 780,870
the case,| I think you
|我想无锁的[]会是一个更复杂的问题。

93
00:02:50,310 --> 00:02:52,320
0,180 180,870 900,1320 1320,1740 1740,2010
know the lock free []

94
00:02:52,320 --> 00:02:53,220
0,120 120,240 240,300 300,810 810,900
is going to be a

95
00:02:53,220 --> 00:02:55,560
0,180 180,810 1140,1440 1440,2070 2070,2340
more complicated.| Yeah, that I'm
|是的，那是我不敢做的。

96
00:02:55,590 --> 00:02:57,780
0,510 510,630 630,990 1050,1530 1830,2190
scared to do.| But, that's
|但是，这是正确的反应。

97
00:02:57,780 --> 00:02:59,730
0,120 120,330 330,690 690,780 780,1950
the right reaction to have.|
|

98
00:03:01,440 --> 00:03:03,000
0,660 660,1080
Anybody else?|
还有其他人吗？|

99
00:03:04,950 --> 00:03:06,210
0,300 300,720 720,840 840,930 930,1260
I found it a bit
我发现调试这些问题有点困难，

100
00:03:06,210 --> 00:03:08,370
0,480 480,630 630,1290 1320,1680 1680,2160
hard to debug those problems,|
|

101
00:03:08,370 --> 00:03:10,350
0,330 330,480 480,900 930,1620 1620,1980
because it's not immediately clear
因为不能直接地了解发生了什么，

102
00:03:10,350 --> 00:03:11,250
0,150 150,270 270,690 690,810 810,900
what is happening,| so we
|所以我们必须去，

103
00:03:11,250 --> 00:03:12,380
0,210 210,570
have to

104
00:03:12,380 --> 00:03:13,940
0,240 240,420 420,630 630,810 810,1560
go| and set with gdb
|设置 gdb ，中断，中断，中断，是的。

105
00:03:14,120 --> 00:03:15,200
0,510
and

106
00:03:15,270 --> 00:03:18,090
0,600 600,900 900,1380 1410,1800 2130,2820
break break break, and yeah.|
|

107
00:03:18,980 --> 00:03:21,320
0,240 240,330 330,510 510,1920 2010,2340
Yeah, I think {the,only},| one
是的，我想惟一的，|我害怕这些锁实验的一个原因是，

108
00:03:21,320 --> 00:03:22,280
0,270 270,420 420,600 600,900 900,960
reason I'm always scared to

109
00:03:22,280 --> 00:03:23,480
0,120 120,330 330,510 510,1020 1020,1200
get these lock labs,| {as,I}
|像我说过的，这些实验更难调试，

110
00:03:23,480 --> 00:03:24,920
0,330 330,810 810,930 930,1140 1140,1440
said, labs you know they're

111
00:03:24,920 --> 00:03:27,860
0,270 270,360 360,1110 1590,2430 2460,2940
harder to debug,| and you
|而且 bug 可能不会在每次运行时都出现。

112
00:03:27,860 --> 00:03:29,540
0,120 120,510 990,1290 1290,1470 1470,1680
know the bug might not

113
00:03:29,540 --> 00:03:30,620
0,210 210,360 360,450 450,720 720,1080
show up on every run.|
|

114
00:03:31,200 --> 00:03:34,110
0,630 870,1410 1650,2340 2340,2760 2760,2910
And {} but hopefully it
但是，它是非常有教育意义的，

115
00:03:34,110 --> 00:03:35,880
0,180 180,420 420,960 960,1230 1230,1770
is very educational,| because learning
|因为学习程序锁在内核中是一件真实的事，

116
00:03:35,880 --> 00:03:37,800
0,210 240,750 750,1380 1410,1860 1860,1920
a program locks inside the

117
00:03:37,800 --> 00:03:39,270
0,390 390,480 480,870 870,1080 1080,1470
kernel is a real thing,|
|

118
00:03:39,270 --> 00:03:41,220
0,540 780,1410 1410,1590 1590,1680 1680,1950
and {} but it is
但这绝对是一个核心挑战。

119
00:03:41,220 --> 00:03:43,460
0,600 600,990 990,1230 1230,1830
definitely a core challenge.|
|

120
00:03:44,100 --> 00:03:45,840
0,540 540,690 690,1230 1230,1470 1470,1740
One thing about maybe there's
这里可能有一件事，

121
00:03:45,840 --> 00:03:48,900
0,240 270,750 750,1350 1380,2100 2490,3060
a {you,know} for the,| {of,course},
|下一个实验不涉及任何并发，

122
00:03:48,900 --> 00:03:50,070
0,90 90,240 240,540 600,960 960,1170
you know the next lab

123
00:03:50,070 --> 00:03:52,020
0,330 330,600 600,1200 1230,1770 1770,1950
actually doesn't involve basically any

124
00:03:52,020 --> 00:03:54,690
0,660 1020,1590 1590,2100 2130,2370 2370,2670
concurrency,| {} and should hopefully
|希望这会更直接。

125
00:03:54,690 --> 00:03:55,890
0,150 150,240 240,390 390,840 840,1200
that will be much more

126
00:03:55,890 --> 00:03:57,100
0,720
straightforward.|
|

127
00:03:59,760 --> 00:04:01,170
0,390 390,480 480,780 810,1110 1110,1410
Okay.| I gue-, I guess,
好的。|我想，你如何，

128
00:04:01,170 --> 00:04:03,060
0,150 150,240 240,750 900,1800 1800,1890
how do you,| how do
|你如何高效地调试并发程序，

129
00:04:03,060 --> 00:04:06,240
0,150 150,1080 1080,1560 1560,2430 2430,3180
you efficiently or effectively debug

130
00:04:06,270 --> 00:04:08,070
0,600 600,1140 1140,1410 1410,1620 1620,1800
concurrent programs,| like with all
|比如所有使用 gdb 的多线程那样。

131
00:04:08,070 --> 00:04:10,950
0,210 210,630 630,1290 1320,1710 1710,2880
those multiple threads using gdb.|
|

132
00:04:10,950 --> 00:04:13,140
0,1020 1020,1260 1260,1470 1470,1770 1770,2190
I use very basic stuff,|
我使用非常基本的东西，|

133
00:04:13,260 --> 00:04:14,730
0,90 90,510 510,1080 1110,1260 1260,1470
{} I have {} use
我使用 print 语句。

134
00:04:14,730 --> 00:04:15,960
0,180 180,840
print statements.|
|

135
00:04:15,990 --> 00:04:17,670
0,990 1020,1230 1230,1320 1320,1530 1530,1680
{} But the main thing
我主要依靠的是，

136
00:04:17,670 --> 00:04:19,290
0,150 150,510 510,810 810,1320 1320,1620
I rely on is| I
|我尝试写下或断言不变量，

137
00:04:19,290 --> 00:04:20,250
0,210 210,480 480,690 690,780 780,960
sort of tried to write

138
00:04:20,250 --> 00:04:22,230
0,390 390,570 570,1170 1170,1590 1590,1980
down or assertions for invariants,|
|

139
00:04:22,230 --> 00:04:23,730
0,180 180,480 510,1140 1170,1410 1410,1500
that I think should be
在我认为应该是 true 的任何点。

140
00:04:23,730 --> 00:04:25,320
0,270 270,390 390,630 630,1080
true at every point.|
|

141
00:04:25,490 --> 00:04:27,290
0,720 750,1080 1080,1200 1200,1560 1560,1800
And if the assertion goes
如果断言失败，

142
00:04:27,290 --> 00:04:28,490
0,360 360,630 630,690 690,990 990,1200
off,| then I know that
|然后我知道我的想法有问题，

143
00:04:28,490 --> 00:04:29,450
0,120 120,240 240,480 480,720 720,960
you know there's something wrong

144
00:04:29,450 --> 00:04:30,890
0,60 60,180 180,660 660,1020 1020,1440
in my thinking| or assertion
|或者断言是错的。

145
00:04:30,890 --> 00:04:31,900
0,120 120,510
was wrong.|
|

146
00:04:31,900 --> 00:04:33,490
0,480 480,990 990,1110 1110,1410 1410,1590
And then I think for
然后我想一会儿，

147
00:04:33,490 --> 00:04:35,560
0,90 90,570 600,1200 1410,1950 1950,2070
a while| and try to
|试着决定它是什么，

148
00:04:35,560 --> 00:04:36,910
0,330 330,540 540,630 630,1020 1050,1350
decide what it is,| and
|然后从那里出发。

149
00:04:36,910 --> 00:04:38,620
0,540 540,720 720,840 840,1230
then go from there.|
|

150
00:04:38,620 --> 00:04:43,480
0,630 840,1770 1920,3420 3420,4050 4650,4860
{} The normal, {} for
正常的，|对于许多其他设置，

151
00:04:43,480 --> 00:04:45,760
0,240 240,840 840,1350 1350,1560 1560,2280
many other settings,| there are
|有竞争检测器可以帮助你，

152
00:04:46,000 --> 00:04:47,530
0,450 450,1020 1020,1170 1170,1290 1290,1530
race detectors that can help

153
00:04:47,530 --> 00:04:50,260
0,150 150,150 1410,1590 1620,2130 2130,2730
you,| { - -} and
|并且标志代码可能看起来，

154
00:04:50,290 --> 00:04:52,510
0,690 720,1320 1320,1710 1710,2040 2040,2220
{you,know} basically flag code that

155
00:04:52,510 --> 00:04:53,770
0,330 330,570 570,840 840,1050 1050,1260
may looks like,| it might
|它可能有问题，

156
00:04:53,770 --> 00:04:56,230
0,300 300,840 840,1500 1590,1980 1980,2460
be having problems| or as
|或者受竞争检测器影响，

157
00:04:56,260 --> 00:04:59,320
0,390 390,570 570,810 810,1380 1560,3060
prone to race conditions,| but
|但那是一整套其他的工具，

158
00:04:59,350 --> 00:05:00,160
0,330 330,390 390,600 600,750 750,810
that's a whole set of

159
00:05:00,160 --> 00:05:02,140
0,180 180,780 900,1260 1260,1620 1620,1980
other tools,| {} that we're
|我们没有用到的东西。

160
00:05:02,170 --> 00:05:03,420
0,450 450,840
not using.|
|

161
00:05:03,770 --> 00:05:05,480
0,570 570,900 900,1230 1230,1470 1470,1710
{} And it's not that
它也不是那么好，

162
00:05:06,260 --> 00:05:07,460
0,510 510,720 720,990 990,1050 1050,1200
good,| but there's a little
|但这是一大步，

163
00:05:07,460 --> 00:05:08,210
0,150 150,210 210,330 330,510 510,750
bit of a big step|
|

164
00:05:08,210 --> 00:05:09,170
0,120 120,480 480,570 570,810 810,960
to actually {} get that
让这些启动并继续运行。

165
00:05:09,170 --> 00:05:10,160
0,210 210,360 360,570 570,870 870,990
all up and going and

166
00:05:10,160 --> 00:05:11,060
0,330
running.|
|

167
00:05:11,270 --> 00:05:12,830
0,330 330,480 480,690 690,780 780,1560
{} So that's the other
这是人们使用竞争探测器的另一种机制。

168
00:05:12,830 --> 00:05:13,940
0,390 390,480 480,690 690,900 900,1110
mechanism that people use race

169
00:05:13,940 --> 00:05:15,000
0,540
detectors.|
|

170
00:05:16,960 --> 00:05:18,700
0,450 450,810 810,1230 1230,1500 1500,1740
Basically flag, any any shared
基本上标志，任何更新或写入的共享变量，

171
00:05:18,700 --> 00:05:20,650
0,450 450,690 690,1110 1170,1770 1770,1950
variable that is updated or

172
00:05:20,650 --> 00:05:21,850
0,270 270,600 600,810 810,1110 1110,1200
write| without actually holding a
|不需要持有一个锁。

173
00:05:21,850 --> 00:05:22,800
0,420
lock.|
|

174
00:05:24,460 --> 00:05:25,930
0,210 210,540 540,750 750,930 930,1470
That doesn't help with deadlocks,|
这对解决死锁没有帮助，|

175
00:05:25,930 --> 00:05:27,280
0,150 150,660 660,720 720,900 900,1350
for example in this lab
比如，在这个实验中的 bcache 锁，

176
00:05:27,310 --> 00:05:28,930
0,330 330,960 990,1110 1110,1350 1350,1620
in a {bcache -} lock,|
|

177
00:05:28,930 --> 00:05:30,970
0,120 120,810 990,1230 1230,1380 1380,2040
you know you get deadlocks,|
你会遇到死锁，|

178
00:05:31,060 --> 00:05:32,110
0,540 540,570 570,750 750,840 840,1050
deadlocks are tend to be
死锁往往更容易进行调试，

179
00:05:32,110 --> 00:05:33,280
0,450 450,570 570,690 690,900 900,1170
easier to do debug, correct,|
|

180
00:05:33,280 --> 00:05:35,050
0,240 240,390 390,510 510,510 1530,1770
because you can {} get
因为你会遇到 panic ，

181
00:05:35,050 --> 00:05:35,890
0,60 60,510 510,600 600,720 720,840
the panic| and then you
|然后你可以在 gdb 中查看 backtrace ，

182
00:05:35,890 --> 00:05:37,330
0,90 90,300 300,540 540,780 780,1440
can look at the gdb

183
00:05:37,330 --> 00:05:38,200
0,90 90,270 270,510 510,780 780,870
in the {backtrace -}| and
|看看什么引起了死锁。

184
00:05:38,200 --> 00:05:39,730
0,300 300,540 540,960 960,1410 1410,1530
see actually was involved in

185
00:05:39,730 --> 00:05:41,140
0,360 390,990
the deadlock.|
|

186
00:05:44,620 --> 00:05:45,940
0,150 150,240 240,360 360,750
Does that make sense?|
这能理解吗？|

187
00:05:46,810 --> 00:05:48,540
0,780 780,1020
Thank you.|
谢谢。|

188
00:05:50,050 --> 00:05:52,450
0,480 510,1050 1440,1740 1740,2160 2160,2400
Okay, {} another suggestion,| actually
好的，另一个建议，|有人在反馈中说的，

189
00:05:52,450 --> 00:05:53,680
0,510 510,720 720,1050 1050,1170 1170,1230
somebody {} posted on the

190
00:05:53,680 --> 00:05:55,540
0,750 750,900 900,1620 1620,1740 1740,1860
feedback,| {} is you know
|课程更少了，

191
00:05:56,050 --> 00:05:57,460
0,450 450,750 780,1050 1050,1170 1170,1410
classes are tend is getting

192
00:05:57,460 --> 00:05:58,480
0,90 90,240 240,390 390,870 870,1020
a little bit lower| than
|比起学起刚开始的时候，

193
00:05:58,480 --> 00:05:59,050
0,90 90,150 150,420 420,510 510,570
in the beginning of the

194
00:05:59,050 --> 00:05:59,950
0,450 450,570 570,630 630,780 780,900
semester,| and I think we
|我想我们足够小，

195
00:05:59,950 --> 00:06:01,210
0,210 210,270 270,570 570,840 840,1260
might be small enough,| or
|或者人数合适，

196
00:06:01,840 --> 00:06:02,560
0,90 90,390 390,510 510,570 570,720
the size that it may

197
00:06:02,560 --> 00:06:04,210
0,300 540,1140 1140,1350 1350,1440 1440,1650
be perfectly fine| to actually
|打开摄像头。

198
00:06:04,210 --> 00:06:05,540
0,120 120,570 570,870
have cameras on.|
|

199
00:06:05,630 --> 00:06:07,130
0,630 630,930 930,1140 1140,1440 1440,1500
{} And so maybe I
所以我想鼓励你，

200
00:06:07,130 --> 00:06:08,210
0,180 180,240 240,570 570,750 750,1080
want to encourage you to|
|

201
00:06:08,210 --> 00:06:09,140
0,150 150,270 270,480 480,540 540,930
if you ask a question
如果你提问，可以打开你的摄像头，

202
00:06:09,140 --> 00:06:10,700
0,150 150,330 330,480 480,570 570,1560
to turn on your camera,|
|

203
00:06:11,210 --> 00:06:12,980
0,540 540,690 690,870 900,1230 1230,1770
{} you know will hopefully
希望能改善我们的体验，

204
00:06:12,980 --> 00:06:15,260
0,930 960,1080 1080,1290 1290,1860 1860,2280
improve in our experiences,| if
|如果你看到的是教室，

205
00:06:15,260 --> 00:06:16,280
0,180 180,330 330,420 420,900 900,1020
you've seen the classroom| as
|而不是虚拟会议。

206
00:06:16,280 --> 00:06:17,330
0,330 330,480 480,600 600,690 690,1050
opposed to in a virtual

207
00:06:17,330 --> 00:06:18,160
0,300
meeting.|
|

208
00:06:18,980 --> 00:06:20,840
0,570 930,1560 1560,1710 1710,1800 1800,1860
And you don't have to
而且你也不用一直看着我。

209
00:06:20,840 --> 00:06:22,720
0,150 150,240 240,540
look at me.|
|

210
00:06:22,720 --> 00:06:23,740
0,510
Okay,
好的，那么，

211
00:06:24,040 --> 00:06:27,250
0,660 1230,1860 1920,2670 2670,2910 2910,3210
{} so,| {} okay, today's
|好的，今天的课程，

212
00:06:27,250 --> 00:06:29,050
0,510 600,1020 1020,1170 1170,1470 1470,1800
lecture,| {} so today's lecture
|今天的课程是

213
00:06:29,050 --> 00:06:29,650
0,90 90,210 210,270 270,390 390,600
is going to be| about
|关于文件系统的崩溃安全，

214
00:06:29,650 --> 00:06:31,720
0,270 270,870 990,1530 1530,1740 1740,2070
crash safety and crash safety

215
00:06:31,720 --> 00:06:33,370
0,270 270,840 1080,1380 1380,1530 1530,1650
{of,file} systems,| and this is
|这不是一般形式的崩溃安全，

216
00:06:33,370 --> 00:06:34,690
0,240 240,420 420,810 810,1200 1200,1320
not crash safety in its

217
00:06:34,690 --> 00:06:36,010
0,240 240,570 570,900 900,1050 1050,1320
most general form,| {} actually
|我真正关注的是一个特定的问题，

218
00:06:36,010 --> 00:06:37,510
0,210 210,510 510,930 930,1080 1080,1500
I'm really focusing on a

219
00:06:37,540 --> 00:06:39,040
0,480 480,990
particular problem,|
|

220
00:06:41,980 --> 00:06:44,080
0,330 330,390 390,900 900,1470 1500,2100
or a specific problem,| namely
或者一个特殊的问题，|也就是，崩溃或断电

221
00:06:44,080 --> 00:06:46,750
0,540 540,1260 1290,1560 1560,1890 1890,2670
a crash or power failure|
|

222
00:06:47,050 --> 00:06:48,820
0,660 660,1260
can lead
可能会导致磁盘上的文件系统

223
00:06:52,610 --> 00:06:54,660
0,270 270,450 450,810 810,1290
{on-disk -} file system|
|

224
00:06:57,060 --> 00:06:58,230
0,150 150,390 390,480 480,600 600,1170
to be in an inconsistent
处于不一致的状态，或不正确的状态。

225
00:06:58,230 --> 00:07:00,360
0,450 840,1110 1110,1170 1170,1710 1710,2130
state or an incorrect state.|
|

226
00:07:04,080 --> 00:07:04,830
0,120 120,240 240,270 270,600 600,750
And what I mean, with
我的意思是，不正确的状态是，

227
00:07:04,830 --> 00:07:05,970
0,60 60,420 420,690 690,1020 1020,1140
an incorrect state is| {you,know}
|比如一个数据块属于两个文件，

228
00:07:05,970 --> 00:07:07,560
0,60 60,630 630,990 990,1230 1230,1590
for example a data block

229
00:07:07,560 --> 00:07:09,630
0,360 360,570 570,1200 1230,1770 1800,2070
belongs two files,| or {an,inode
|或者一个 inode 分配给不同的文件。

230
00:07:09,630 --> 00:07:12,330
0,630 930,1620 1620,2100 2100,2580 2580,2700
-} {} is allocated to

231
00:07:12,330 --> 00:07:13,920
0,630 630,1170
different files.|
|

232
00:07:14,140 --> 00:07:16,090
0,510 720,1110 1110,1200 1200,1320 1320,1950
{} And so the scenario
所以这个问题可能出现的情况是，

233
00:07:16,090 --> 00:07:17,560
0,540 540,720 720,1080 1080,1320 1320,1470
where this problem might sort

234
00:07:17,560 --> 00:07:19,330
0,180 180,960 1020,1380 1380,1530 1530,1770
of appear is,| let's say
|假设你运行 make ，

235
00:07:19,330 --> 00:07:21,340
0,90 90,210 210,360 360,990 1500,2010
you know you're running make,|
|

236
00:07:21,900 --> 00:07:24,000
0,420 420,1050 1080,1320 1320,1590 1590,2100
{} make pretty file system
make 与文件系统交互，

237
00:07:24,000 --> 00:07:25,530
0,480 480,600 600,660 660,930 930,1530
interact with the file system,|
|

238
00:07:25,740 --> 00:07:28,080
0,300 300,540 540,1230 1440,1830 1830,2340
reads writes files| and somewhere
读写文件，|在这个过程中，发生了断电，

239
00:07:28,080 --> 00:07:29,820
0,840 840,1050 1050,1200 1200,1440 1440,1740
during you know that thing,

240
00:07:29,820 --> 00:07:31,740
0,150 150,300 300,870 870,1500
{} a {power,failure} happens,|
|

241
00:07:33,920 --> 00:07:34,670
0,120 120,210 210,360 360,600 600,750
you know {} maybe your
可能是你的笔记本电脑没电了，

242
00:07:34,670 --> 00:07:36,110
0,360 360,570 570,720 720,780 780,1440
laptop run out of battery,|
|

243
00:07:36,290 --> 00:07:37,430
0,150 150,270 270,720 720,810 810,1140
you know maybe the power
也许你的房子刚刚断电了，

244
00:07:37,430 --> 00:07:39,830
0,150 150,690 1140,1590 1590,2130 2160,2400
just dropped to {} your

245
00:07:39,830 --> 00:07:43,070
0,540 540,1230 1230,1770 2100,2820 2850,3240
house,| {} and {} you
|你重新启动，

246
00:07:43,070 --> 00:07:44,460
0,120 120,300 300,930
know you reboot,|
|

247
00:07:45,460 --> 00:07:47,230
0,450 750,1170 1170,1320 1320,1590 1590,1770
the power comes back on
当电源在某一时刻恢复，

248
00:07:47,230 --> 00:07:48,850
0,120 120,270 270,750 1140,1320 1320,1620
at some point,| you reboot
|你重新启动机器，

249
00:07:48,850 --> 00:07:50,740
0,60 60,750 1110,1530 1530,1680 1680,1890
the machine, {machine -} comes

250
00:07:50,740 --> 00:07:53,530
0,240 240,600 630,1290 1530,2220 2250,2790
back up| and then you
|然后你会再次得到提示符，

251
00:07:53,530 --> 00:07:54,400
0,150 150,210 210,510 510,750 750,870
get a prompt again,| you
|你运行 ls ，

252
00:07:54,400 --> 00:07:56,380
0,210 210,840 1350,1680 1680,1770 1770,1980
run ls| and you hope
|并且希望你的文件系统处于良好状态，

253
00:07:56,380 --> 00:07:57,550
0,330 330,510 510,630 630,900 900,1170
basically that your file system

254
00:07:57,550 --> 00:07:58,450
0,120 120,240 240,270 270,450 450,900
is in a good state,|
|

255
00:07:59,200 --> 00:08:00,310
0,360 360,420 420,510 510,870 870,1110
{} in the state actually
在仍然可以使用的状态。

256
00:08:00,310 --> 00:08:01,700
0,120 120,390 390,600 600,810
can still use it.|
|

257
00:08:01,880 --> 00:08:03,590
0,150 150,240 240,330 330,1110 1140,1710
And so the particular failures
所以，我们关注的特定故障或崩溃是

258
00:08:03,590 --> 00:08:04,640
0,60 60,480 480,600 600,690 690,1050
or crashes that we're concerned

259
00:08:04,640 --> 00:08:06,620
0,420 420,780 810,1230 1230,1590 1590,1980
about are| basically power failures
|文件系统操作期间的电源故障，

260
00:08:06,620 --> 00:08:09,380
0,300 300,570 570,840 840,1680 1890,2760
during file system operations| or
|或者内核死机，

261
00:08:09,440 --> 00:08:11,960
0,180 180,1050 1200,2160 2190,2340 2340,2520
the kernel panics,| you know
|当运行文件系统操作时，

262
00:08:11,960 --> 00:08:13,430
0,630 630,870 870,990 990,1230 1230,1470
while running some file system

263
00:08:13,430 --> 00:08:15,470
0,570 780,1050 1050,1260 1260,1830 1830,2040
operation,| {xv6 -} {is,panics},| most
|xv6 发生死机，|大多数内核发生死机，

264
00:08:15,470 --> 00:08:16,460
0,270 270,360 360,780 780,870 870,990
kernels are panics,| you know
|可能是某些内核错误导致死机，

265
00:08:16,460 --> 00:08:18,320
0,270 270,450 450,1020 1110,1530 1530,1860
maybe there're some kernel bug

266
00:08:18,320 --> 00:08:19,790
0,150 150,510 510,570 570,1080 1260,1470
that causes a panic| and
|突然之间你的系统失效。

267
00:08:19,790 --> 00:08:20,990
0,90 90,510 510,630 630,1050 1050,1200
{you,know} suddenly your system just

268
00:08:20,990 --> 00:08:21,920
0,570
fails.|
|

269
00:08:22,350 --> 00:08:23,040
0,180 180,390 390,480 480,630 630,690
And what you'd like to
你希望的情况是，

270
00:08:23,040 --> 00:08:23,910
0,90 90,150 150,480 480,630 630,870
be the case| that after
|在重启之后，你可以做一些事情，

271
00:08:23,910 --> 00:08:25,050
0,540 540,690 690,780 780,1020 1020,1140
rebooting you can actually do

272
00:08:25,050 --> 00:08:26,040
0,420
something,|
|

273
00:08:26,430 --> 00:08:27,210
0,240 240,360 360,450 450,540 540,780
{} or you can still
或者你仍然可以使用文件系统。

274
00:08:27,210 --> 00:08:28,800
0,210 210,270 270,480 480,870 1380,1590
use the file system.| And
|这可能会想到一些东西，

275
00:08:28,800 --> 00:08:29,790
0,180 180,390 390,510 510,810 810,990
this might be something where

276
00:08:29,790 --> 00:08:30,930
0,150 150,420 420,780 810,990 990,1140
you're thinking,| well, how could
|这怎么可能不对，

277
00:08:30,930 --> 00:08:32,220
0,150 150,390 390,720 780,1020 1020,1290
that not be, right,| because
|因为文件系统存储在持久化存储介质上，

278
00:08:32,220 --> 00:08:34,260
0,60 60,330 330,840 1290,1890 1890,2040
the file system stored on

279
00:08:34,260 --> 00:08:35,910
0,60 60,450 450,840 840,1470 1470,1650
a persistent storage medium| and
|所以，如果出现电源故障，

280
00:08:35,910 --> 00:08:37,470
0,450 450,630 630,720 720,1050 1050,1560
so if the power fails,|
|

281
00:08:37,470 --> 00:08:39,180
0,90 90,270 270,600 990,1530 1530,1710
you know that medium should
介质应该是好的，

282
00:08:39,180 --> 00:08:40,170
0,90 90,390 390,600 600,720 720,990
be good,| then so once
|那么一旦机器恢复工作，

283
00:08:40,170 --> 00:08:41,160
0,240 240,420 420,660 660,930 930,990
machine comes back up,| you
|你写的所有块都应该在那里。

284
00:08:41,160 --> 00:08:42,000
0,150 150,300 300,420 420,720 720,840
know all the blocks that

285
00:08:42,000 --> 00:08:43,050
0,180 180,420 420,630 630,720 720,1050
you've written should be there.|
|

286
00:08:43,730 --> 00:08:44,810
0,360 360,600 600,840 840,990 990,1080
And we'll see that the
我们将看到许多棘手的情况，

287
00:08:44,810 --> 00:08:46,580
0,270 270,810 810,1140 1140,1440 1440,1770
tricky cases| that many file
|很多文件系统操作是多步操作。

288
00:08:46,580 --> 00:08:49,550
0,240 240,810 810,1350 1800,2370 2460,2970
system operations have {} {multi-step

289
00:08:49,550 --> 00:08:51,240
0,390 390,1230
-} operations.|
|

290
00:08:51,240 --> 00:08:53,730
0,630 660,1290 1290,1560 1560,1800 1830,2490
And really what is important
真正需要注意的是

291
00:08:53,730 --> 00:08:54,900
0,90 90,570 570,690 690,810 810,1170
to note| and if we
|如果我们在错误的地崩溃，

292
00:08:55,050 --> 00:08:56,460
0,150 150,270 270,840 840,1290 1290,1410
if we crash just in

293
00:08:56,460 --> 00:08:58,200
0,90 90,630 780,1380 1380,1530 1530,1740
the wrong place,| in these
|在这些多步操作中，

294
00:08:58,200 --> 00:09:00,060
0,240 240,510 510,1290 1380,1590 1590,1860
{multi-step -} operations,| the file
|文件系统可能会不一致，

295
00:09:00,060 --> 00:09:01,320
0,240 240,450 450,840 840,1050 1050,1260
system actually may end up

296
00:09:01,320 --> 00:09:03,030
0,270 270,450 450,720 720,1530 1560,1710
being an this inconsistent| for
|在很短的时间内，

297
00:09:03,030 --> 00:09:04,530
0,390 390,690 690,990 990,1050 1050,1500
that short period of time|
|

298
00:09:04,650 --> 00:09:05,550
0,150 150,240 240,330 330,630 630,900
and if the power fail
如果断电正好发生在那里，

299
00:09:05,550 --> 00:09:07,050
0,420 420,720 720,1170 1350,1440 1440,1500
just happened there,| you know
|可能会有不好的事情发生。

300
00:09:07,050 --> 00:09:08,500
0,270 270,510 510,630 630,930
something bad could happen.|
|

301
00:09:08,740 --> 00:09:09,580
0,150 150,300 300,600 600,690 690,840
And so that is sort
这就是我们今天关注的问题，

302
00:09:09,580 --> 00:09:11,410
0,90 90,240 240,750 750,1020 1020,1830
of the problem that we're

303
00:09:11,650 --> 00:09:14,320
0,930 930,1350 1380,1800 2220,2430 2430,2670
focusing on today| and so
|这与别的问题不同，

304
00:09:14,350 --> 00:09:15,310
0,180 180,330 330,720 720,870 870,960
this is different from the

305
00:09:15,310 --> 00:09:16,780
0,420 420,630 630,690 690,1020 1020,1470
problem| that for example whatever
|比如，这里出现断电，

306
00:09:16,780 --> 00:09:17,650
0,90 90,300 300,540 540,600 600,870
you know there's a power

307
00:09:17,650 --> 00:09:19,450
0,450 450,690 690,930 930,1500 1500,1800
failure| and your disk caught
|并且你的磁盘着火了，

308
00:09:19,450 --> 00:09:21,370
0,480 480,720 720,1170 1440,1710 1710,1920
fire| and so there's nothing
|那里什么都没有了，

309
00:09:21,370 --> 00:09:22,810
0,240 240,690 720,1050 1050,1260 1260,1440
there anymore| and you need
|你需要，

310
00:09:22,810 --> 00:09:24,310
0,360 570,690 690,840 840,1200 1200,1500
to,| in that case, you
|在这种情况下，这是一个完全不同的问题，

311
00:09:24,310 --> 00:09:25,900
0,360 870,1050 1050,1350 1350,1530 1530,1590
need you need there's a

312
00:09:25,900 --> 00:09:27,130
0,360 360,600 600,960 960,1080 1080,1230
completely different problem,| that has
|有不同的解决方案，

313
00:09:27,130 --> 00:09:28,270
0,270 270,900 900,960 960,1080 1080,1140
different solutions,| you know, for
|比如，你必须取回你的文件系统备份，

314
00:09:28,270 --> 00:09:29,560
0,480 480,630 630,780 780,1050 1080,1290
example you have to go

315
00:09:29,560 --> 00:09:30,960
0,270 270,360 360,420 420,990
back to {} backup

316
00:09:30,960 --> 00:09:32,550
0,390 390,510 510,780 780,1200 1200,1590
of your file system,| {reinstall
|重新安装文件系统，等等。

317
00:09:32,550 --> 00:09:33,990
0,360 360,450 450,750 750,1080 1080,1440
-} your file system, etc

318
00:09:33,990 --> 00:09:35,970
0,480 1320,1470 1470,1680 1680,1740 1740,1980
etc.| So that's the problem
|所以这不是我们关心的问题。

319
00:09:35,970 --> 00:09:37,140
0,120 120,420 420,660 660,1050 1050,1170
we're not worried about.| We're
|我们真的关心的是

320
00:09:37,140 --> 00:09:38,610
0,270 270,600 600,900 900,1020 1020,1470
really worried about| the specific
|多步操作作过程中发生故障的问题。

321
00:09:38,610 --> 00:09:41,640
0,420 420,780 1110,1890 1890,2550 2550,3030
problem of failure happening right

322
00:09:41,670 --> 00:09:44,160
0,810 810,1410 1410,1710 1710,1980 1980,2490
during a {multi-step -} operation.|
|

323
00:09:46,380 --> 00:09:48,040
0,270 270,360 360,450 450,1080
Okay, and the solution
好的，这个问题的解决方案是，

324
00:09:48,160 --> 00:09:49,270
0,180 180,360 360,720 720,1020 1020,1110
for that specific problem that|
|

325
00:09:49,270 --> 00:09:50,380
0,90 90,210 210,270 270,360 360,1110
we're going to be exploring
我们将要探索的是一种叫做日志的东西，

326
00:09:50,830 --> 00:09:52,150
0,240 240,420 420,720 720,900 900,1320
{} is something that is

327
00:09:52,150 --> 00:09:53,800
0,360 360,900 1110,1380 1380,1530 1530,1650
called logging,| and this is
|这是一个非常流行的解决方案，

328
00:09:53,800 --> 00:09:56,950
0,60 60,420 420,1170 1350,1860 2430,3150
a very popular {} solution,|
|

329
00:09:56,950 --> 00:09:59,500
0,540 630,1380 1380,2040
{} originally {}
最初来自数据库世界，

330
00:09:59,530 --> 00:10:00,520
0,330 330,420 420,510 510,570 570,990
coming out of the database

331
00:10:00,520 --> 00:10:01,780
0,450 450,840 840,990 990,1170 1170,1260
world,| but a lot of
|但是现在有很多文件系统使用日志。

332
00:10:01,780 --> 00:10:03,610
0,270 270,750 750,990 990,1290 1290,1830
file systems that use logging

333
00:10:03,820 --> 00:10:05,100
0,240 240,780
these days.|
|

334
00:10:05,100 --> 00:10:07,350
0,450 780,1080 1080,1590 1620,1770 1770,2250
{} We're gonna,| it's very
我们会，|它很受欢迎的一个原因是

335
00:10:07,350 --> 00:10:08,580
0,390 390,630 630,750 750,1140 1140,1230
one reason it's popular is|
|

336
00:10:08,580 --> 00:10:09,960
0,480 480,570 570,630 630,870 870,1380
because it's a very principle
因为这是一个非常规范的解决方案，

337
00:10:09,960 --> 00:10:12,660
0,480 690,2250 2250,2460 2460,2580 2580,2700
solution,| {} and we're going
|我们将看到 xv6 中日志的实现，

338
00:10:12,660 --> 00:10:14,460
0,330 360,660 660,780 780,1560 1560,1800
to see the implementation of

339
00:10:14,490 --> 00:10:16,920
0,690 750,1140 1140,1950 2160,2370 2370,2430
logging in xv6| and of
|当然， xv6 的实现非常简单，

340
00:10:16,920 --> 00:10:17,760
0,210 210,450 450,630 630,780 780,840
course {xv6 -} has a

341
00:10:17,760 --> 00:10:19,500
0,510 510,840 840,1470 1470,1560 1560,1740
very simple implementation,| like a
|就像日志的最小实现，

342
00:10:19,500 --> 00:10:21,930
0,480 480,1080 1170,1740 1740,2340 2340,2430
bare minimal {} implementation of

343
00:10:21,930 --> 00:10:23,850
0,480 540,960 960,1050 1050,1740 1740,1920
logging,| just to demonstrate in
|只是为了演示关键思想，

344
00:10:23,850 --> 00:10:25,180
0,90 90,330 330,990
the key ideas,|
|

345
00:10:25,270 --> 00:10:27,160
0,510 690,990 990,1200 1200,1500 1500,1890
{} and even that {sort,of}
即使只是一个基本框架，

346
00:10:27,430 --> 00:10:29,380
0,420 420,720 720,1020 1020,1680 1680,1950
a very bare bone,| log
|日志实现仍然有一些问题，

347
00:10:29,380 --> 00:10:30,970
0,420 420,690 690,1020 1020,1290 1290,1590
implementation actually has several issues,|
|

348
00:10:30,970 --> 00:10:31,960
0,120 120,240 240,360 360,420 420,990
that were going to be
我们将要讨论，

349
00:10:32,020 --> 00:10:33,550
0,360 360,720 780,1050 1050,1350 1350,1530
talking about| and that's why
|这就是为什么值得去研究它。

350
00:10:33,550 --> 00:10:34,570
0,150 150,570 570,630 630,750 750,1020
it's worth you know studying

351
00:10:34,570 --> 00:10:35,320
0,180
it.|
|

352
00:10:35,410 --> 00:10:37,780
0,450 510,1320 1350,1950 1950,2190 2190,2370
{} One downside as we'll
我们会看到 xv6 解决方案的一个缺点是，

353
00:10:37,780 --> 00:10:38,710
0,210 210,330 330,480 480,720 720,930
see is the {xv6 -}

354
00:10:38,710 --> 00:10:40,180
0,360 360,510 510,720 720,810 810,1470
solution is| because of simplicity,
|因为简单，它的性能也不是很好，

355
00:10:40,180 --> 00:10:41,650
0,120 120,780 810,990 990,1260 1260,1470
its performance is also not

356
00:10:41,650 --> 00:10:42,780
0,150 150,540
so great,|
|

357
00:10:42,900 --> 00:10:44,280
0,300 300,540 540,870 870,1260 1260,1380
even though logging systems in
即使日志系统原则上可以获得良好的性能。

358
00:10:44,280 --> 00:10:45,270
0,450 450,600 600,780 780,810 810,990
principle can get a good

359
00:10:45,270 --> 00:10:46,920
0,630 900,1260 1260,1350 1350,1530 1530,1650
performance.| And so what we'll
|所以我们下周要做的是，

360
00:10:46,920 --> 00:10:49,470
0,600 810,1620 1620,1980 2010,2190 2190,2550
do next week is| actually
|看看如何实现一个高性能的日志系统，

361
00:10:49,470 --> 00:10:51,570
0,450 480,1140 1170,1620 1620,1740 1740,2100
look how, how to implement

362
00:10:51,570 --> 00:10:53,400
0,60 60,240 240,930 930,1320 1320,1830
a high performance logging system|
|

363
00:10:53,490 --> 00:10:55,680
0,390 390,1050 1050,1350 1350,1740 1740,2190
by studying the logging system
通过学习 Linux ext3 文件系统使用的日志系统，

364
00:10:55,680 --> 00:10:57,870
0,450 480,1260 1260,1680 1680,1950 1950,2190
the Linux {ext3 -} file

365
00:10:57,870 --> 00:10:59,080
0,300 300,810
system uses,|
|

366
00:10:59,320 --> 00:11:00,820
0,480 510,750 750,930 930,1200 1200,1500
{} but that's next week.|
但那是下周的事了。|

367
00:11:01,860 --> 00:11:04,050
0,420 570,1200 1290,1590 1590,1770 1770,2190
{} Another, may be small
另一个，今天我想说的一个小点是，

368
00:11:04,050 --> 00:11:05,910
0,600 630,930 930,1380 1380,1530 1530,1860
a point {I,want,to} make today

369
00:11:05,910 --> 00:11:07,440
0,300 300,630 630,750 750,930 930,1530
is| this is our last
|这是我们最后一节 xv6 课，

370
00:11:07,470 --> 00:11:09,630
0,330 330,540 540,990 1380,1830 1830,2160
{xv6 -} lecture| {} and
|从现在开始，我们将转向论文，

371
00:11:09,630 --> 00:11:10,740
0,210 210,510 510,840 840,990 990,1110
from now on, we're going

372
00:11:10,740 --> 00:11:13,770
0,60 60,180 180,780 780,1380 1680,3030
to be switching to papers,|
|

373
00:11:13,950 --> 00:11:15,480
0,570 570,660 660,870 870,1200 1200,1530
because in some ways, what
因为在某些方面，我们所做的是

374
00:11:15,480 --> 00:11:17,040
0,180 180,480 480,600 600,1050 1050,1560
we've done is| we've covered
|我们已经涵盖了基本概念，

375
00:11:17,040 --> 00:11:18,480
0,90 90,210 210,330 330,810 810,1440
you know the basic concepts|
|

376
00:11:18,630 --> 00:11:19,680
0,330 330,450 450,540 540,780 780,1050
and we can start looking
我们可以通过阅读论文了解更高级的操作系统思想。

377
00:11:19,680 --> 00:11:21,990
0,150 150,390 390,1020 1110,1800 1800,2310
at more advance {} operating

378
00:11:21,990 --> 00:11:24,030
0,300 300,630 630,810 810,1290 1320,2040
system ideas by reading papers.|
|

379
00:11:24,830 --> 00:11:26,040
0,240 240,720
{} Okay?|
好的？|

380
00:11:27,130 --> 00:11:28,880
0,240 240,540 540,660 660,1080
Any questions so far?|
到目前为止，有什么问题吗？|

381
00:11:34,590 --> 00:11:35,840
0,270 270,690
Well, good.|
好的，很好。|

382
00:11:38,080 --> 00:11:40,240
0,540 660,1200 1350,1530 1530,1650 1650,2160
Okay, {} so let me
好的，让我回顾一下这些场景，

383
00:11:40,690 --> 00:11:41,560
0,210 210,450 450,510 510,690 690,870
go back a little bit

384
00:11:41,560 --> 00:11:42,820
0,450 450,510 510,960 960,1110 1110,1260
about the scenarios| that were
|我们在这节课中要关注的。

385
00:11:42,820 --> 00:11:44,560
0,480 600,960 960,1170 1170,1350 1350,1740
really, {} that we're focusing

386
00:11:44,560 --> 00:11:46,600
0,330 330,780 780,1320 1500,1860 1860,2040
about {} in in this

387
00:11:46,600 --> 00:11:50,200
0,390 870,1500 1680,2400 2400,3180 3270,3600
lecture.| So file systems, file
|所以，文件系统操作，

388
00:11:50,200 --> 00:11:51,900
0,240 240,990
system operations,|
|

389
00:11:52,380 --> 00:11:54,390
0,240 240,600 600,720 720,1410 1620,2010
like creating a file, writing
比如创建文件，写入文件，

390
00:11:54,390 --> 00:11:57,000
0,90 90,690 720,1410 1440,1920 1920,2610
a file,| are {multi-step -}
|都是多步的磁盘操作。

391
00:11:57,030 --> 00:11:58,780
0,330 330,1140
disk operations.|
|

392
00:12:06,400 --> 00:12:08,560
0,600 1050,1500 1500,1830 1830,1980 1980,2160
{} And we saw that
我们在上周一看到，

393
00:12:08,560 --> 00:12:10,120
0,330 330,690 720,990 990,1380 1380,1560
last week on Monday,| we
|我们讨论了 create 是如何实现的，

394
00:12:10,120 --> 00:12:11,770
0,240 240,450 450,660 660,1140 1140,1650
talked about how {create,is} implemented,|
|

395
00:12:11,770 --> 00:12:12,910
0,150 150,420 420,510 510,990 990,1140
like creating a file, or
比如创建文件或写入文件，

396
00:12:12,910 --> 00:12:13,810
0,210 210,300 300,390 390,780 780,900
writing to a file,| we
|我们经常看到事件序列，

397
00:12:13,810 --> 00:12:14,830
0,300 300,600 600,780 780,900 900,1020
often see that you know

398
00:12:14,830 --> 00:12:16,360
0,210 450,840 840,960 960,1350 1350,1530
the sequence of events,| or
|或者步骤序列是分配 inode ，

399
00:12:16,360 --> 00:12:17,740
0,450 450,570 570,930 930,1020 1020,1380
something the sequence of steps

400
00:12:17,740 --> 00:12:19,900
0,450 570,1290 1290,1560 1560,1890 1890,2160
are allocated {inode -},| mark
|标记在磁盘上分配 inode ，

401
00:12:19,900 --> 00:12:20,950
0,120 120,270 270,480 480,960 960,1050
the {inode -} allocated on

402
00:12:20,950 --> 00:12:22,780
0,420 510,1260 1290,1410 1410,1590 1590,1830
disk,| then you know write
|然后写入包含 inode 的目录，

403
00:12:22,780 --> 00:12:24,100
0,90 90,540 540,870 870,990 990,1320
the directory block that contains

404
00:12:24,100 --> 00:12:25,000
0,180 180,270 270,600 630,780 780,900
that {inode -}| and so
|这就是我所说的多步操作。

405
00:12:25,000 --> 00:12:26,020
0,210 210,300 300,480 480,750 750,1020
those are the {multi-steps -}

406
00:12:26,020 --> 00:12:27,420
0,120 120,180 180,540 540,960
that I'm talking about.|
|

407
00:12:27,540 --> 00:12:28,650
0,210 210,300 300,480 480,510 510,1110
If we get a crash
如果我们在两个步骤之间崩溃，

408
00:12:28,950 --> 00:12:30,960
0,1050 1050,1200 1200,1290 1290,1440 1440,2010
between two of the steps,|
|

409
00:12:31,080 --> 00:12:33,300
0,300 300,1170 1170,1500 1500,1680 1680,2220
that {} crash can leave,|
这个崩溃可能导致，|

410
00:12:34,870 --> 00:12:37,160
0,1170 1200,1680
{may,leave}, {}
可能会破坏文件系统不变性。

411
00:12:37,160 --> 00:12:38,330
0,210 210,390 390,480 480,780 780,1170
may leave the file system

412
00:12:38,330 --> 00:12:39,740
0,840
invariance

413
00:12:40,970 --> 00:12:42,460
0,750
violated.|
|

414
00:12:45,440 --> 00:12:48,080
0,510 1110,1830 1830,2130 2160,2550 2550,2640
And violent the invariance, I'm
破坏不变性，我说的是形式的不变性，

415
00:12:48,080 --> 00:12:49,490
0,360 360,690 690,930 930,1320 1320,1410
talking about are invariance of

416
00:12:49,490 --> 00:12:51,410
0,90 90,660 900,990 990,1110 1110,1920
the form,| you know every
|每个块要么是空闲的，

417
00:12:51,590 --> 00:12:53,690
0,720 720,960 960,1230 1230,1860 1890,2100
block is either free| or
|要么分配给一个文件，而不是两个文件。

418
00:12:53,690 --> 00:12:55,790
0,450 450,510 510,810 810,1380 1830,2100
allocated to one file and

419
00:12:55,790 --> 00:12:57,420
0,240 240,330 330,510 510,1110
not to two files.|
|

420
00:12:57,420 --> 00:12:58,830
0,270 270,720 720,870 870,1020 1020,1410
{} And you know we
我们想要确保这件事发生，

421
00:12:58,830 --> 00:12:59,790
0,180 180,240 240,390 390,780 780,960
want to make sure that

422
00:12:59,790 --> 00:13:01,260
0,150 150,600 600,1230 1230,1320 1320,1470
this happens,| despite you know
|即使这些失败发生在这些操作之间。

423
00:13:01,260 --> 00:13:04,200
0,270 270,1020 1050,1650 1650,2310 2550,2940
these failures right between these

424
00:13:04,200 --> 00:13:05,860
0,1110
operations.|
|

425
00:13:06,880 --> 00:13:08,060
0,660
Yeah,
风险是如果不变性被破坏，

426
00:13:08,060 --> 00:13:09,470
0,270 270,480 480,780 780,1080 1080,1410
and the risk is if

427
00:13:09,980 --> 00:13:13,280
0,150 150,2010 2040,2460 2460,2550 2550,3300
if the invariance are violated,|
|

428
00:13:13,790 --> 00:13:15,440
0,540 600,1050 1050,1260 1260,1380 1380,1650
that bad things can happen
重新启动后可能会发生不好的事情，

429
00:13:15,440 --> 00:13:16,900
0,240 240,780
after reboot,|
|

430
00:13:17,510 --> 00:13:19,490
0,660 870,960 960,1080 1080,1470 1830,1980
{} you know the, you
你可能马上又会崩溃。

431
00:13:19,490 --> 00:13:21,560
0,180 180,420 420,750 750,1470
might crash again immediately.|
|

432
00:13:21,930 --> 00:13:22,800
0,330 330,420 420,540 540,690 690,870
Because you know there's some
因为有一些数据结构，

433
00:13:22,800 --> 00:13:24,180
0,210 210,660 660,750 750,1110 1110,1380
data structure,| the {file,system} you
|文件系统处于一种状态，

434
00:13:24,180 --> 00:13:25,530
0,570 570,720 720,840 840,1200 1200,1350
know in a state| that
|文件系统无法处理，

435
00:13:25,530 --> 00:13:26,670
0,60 60,420 420,720 720,930 930,1140
the {file,system} actually can't really

436
00:13:26,670 --> 00:13:28,350
0,300 300,870 870,1140 1140,1440 1440,1680
deal with,| on this data
|在这个数据结构上这种状态，

437
00:13:28,350 --> 00:13:29,640
0,570 570,660 660,930 930,990 990,1290
structures in such a state,|
|

438
00:13:29,760 --> 00:13:30,990
0,570 570,690 690,780 780,990 990,1230
[] that the file system
文件系统不能再处理它们了，

439
00:13:30,990 --> 00:13:32,910
0,240 240,570 600,1260 1260,1410 1410,1920
really can't process them anymore,|
|

440
00:13:33,240 --> 00:13:35,520
0,690 1140,1470 1470,1950 1950,2100 2100,2280
or more likely you're not
或者更有可能你没有崩溃，

441
00:13:35,520 --> 00:13:36,620
0,720
crash,

442
00:13:36,890 --> 00:13:39,140
0,210 210,840 900,1200 1200,1680 1980,2250
no crash,| {} but you
|但是数据可能会丢失，

443
00:13:39,140 --> 00:13:40,460
0,90 90,450 450,600 600,780 780,1320
know data may get lost,|
|

444
00:13:41,340 --> 00:13:42,630
0,300 300,450 450,600 600,690 690,1290
or you read or write
或者你读取或写入不正确的数据。

445
00:13:43,020 --> 00:13:44,560
0,510 510,900
incorrect data.|
|

446
00:13:52,630 --> 00:13:53,680
0,450 450,660 660,870 870,1020 1020,1050
{} And we'll see a
我们会看几个例子，

447
00:13:53,680 --> 00:13:54,790
0,210 210,270 270,870 870,960 960,1110
couple of examples,| you know
|为了更清楚地说明这一点，

448
00:13:54,790 --> 00:13:56,050
0,210 210,510 510,630 630,780 780,1260
to make it more clear,|
|

449
00:13:56,140 --> 00:13:57,190
0,300 300,450 450,570 570,900 900,1050
{} but so these are
但这些都是我们要担心的风险。

450
00:13:57,190 --> 00:13:58,840
0,330 330,900 900,1140 1140,1380 1380,1650
the risks that we're worried

451
00:13:58,840 --> 00:13:59,900
0,420
about.|
|

452
00:14:00,350 --> 00:14:01,320
0,450

453
00:14:02,020 --> 00:14:02,860
0,90 90,210 210,330 330,420 420,840
I don't know if anybody
我不知道，有没有人在个人生活或日常生活中，

454
00:14:02,860 --> 00:14:04,870
0,390 390,750 750,1110 1110,1590 1620,2010
actually every personal life or

455
00:14:04,930 --> 00:14:07,180
0,390 390,840 840,1290 1290,1770 1800,2250
in your daily life| using
|使用电脑时遇到问题，

456
00:14:07,180 --> 00:14:08,560
0,420 420,630 630,780 780,1320 1320,1380
computers actually has experienced a

457
00:14:08,560 --> 00:14:10,930
0,360 360,570 570,1110 1470,1950 2190,2370
problem| where basically, {} you
|你在文件系统中出现故障，

458
00:14:10,930 --> 00:14:12,760
0,240 240,570 570,1320 1560,1740 1740,1830
had a failure in the

459
00:14:12,760 --> 00:14:14,020
0,270 270,600 600,870 900,1140 1140,1260
file system| where you had
|你有一个断电故障，

460
00:14:14,020 --> 00:14:14,920
0,60 60,420 420,540 540,570 570,900
a failure, had a power

461
00:14:14,920 --> 00:14:16,690
0,750 750,840 840,1170 1170,1650 1650,1770
failure,| your machine rebooted or
|你的机器或你的手机重新启动，

462
00:14:16,690 --> 00:14:19,900
0,120 120,600 600,1290 1500,2370 2370,3210
your phone restarted| and {}
|之后就无法使用了。

463
00:14:19,930 --> 00:14:23,800
0,630 720,1350 1350,2040 2640,3180
basically unusable afterwards. {}|
|

464
00:14:23,980 --> 00:14:24,910
0,300 300,540 540,660 660,840 840,930
One reason that might be
一个原因可能是不寻常的，

465
00:14:24,910 --> 00:14:26,440
0,540 540,1020 1020,1200 1200,1290 1290,1530
unusual,| because actually the file
|因为文件系统没有正确恢复。

466
00:14:26,440 --> 00:14:28,000
0,300 300,450 450,690 690,1080 1080,1560
system just didn't recover correctly.|
|

467
00:14:37,370 --> 00:14:38,570
0,360 390,750 780,900 900,1050 1050,1200
Okay, so to make it
好的，为了说得更清楚，

468
00:14:38,570 --> 00:14:40,100
0,270 270,660 660,900 900,1170 1170,1530
more clear,| let's just let's
|让我们来看一个关于 xv6 的例子，

469
00:14:40,100 --> 00:14:41,390
0,150 150,210 210,270 270,990 990,1290
look at an example in

470
00:14:41,390 --> 00:14:42,650
0,90 90,510 510,600 600,1110 1110,1260
the context of xv6,| I
|我想把这个风险说得更具体一点，

471
00:14:43,400 --> 00:14:44,600
0,330 330,420 420,600 600,840 840,1200
like to make this risk

472
00:14:44,600 --> 00:14:45,560
0,90 90,240 240,360 360,480 480,960
a little bit more concrete,|
|

473
00:14:45,740 --> 00:14:46,970
0,270 270,420 420,480 480,540 540,1230
let's look at an example
让我们看看 xv6 中的一个例子，

474
00:14:47,000 --> 00:14:48,050
0,180 180,240 240,660 660,750 750,1050
in the context of {xv6

475
00:14:48,050 --> 00:14:49,520
0,510 720,1020 1020,1140 1140,1290 1290,1470
-}| and to see what
|看看会出现什么问题。

476
00:14:49,520 --> 00:14:51,110
0,240 240,870 870,1020 1020,1200 1200,1590
actually go could go wrong.|
|

477
00:14:52,020 --> 00:14:55,500
0,450 570,1350 1500,2190 2460,3000 3030,3480
So remember the, for Monday,
记得，周一的 xv6 文件系统，

478
00:14:55,500 --> 00:14:57,900
0,900 1200,1680 1680,1920 1920,2190 2190,2400
the xv6 file system,| very
|非常简单的文件系统有一个简单的磁盘布局，

479
00:14:57,900 --> 00:14:59,040
0,240 240,510 510,840 840,1080 1080,1140
simple file system has a

480
00:14:59,040 --> 00:15:01,170
0,270 270,720 720,1080 1470,2010 2010,2130
simple {disk,layout -},| {} you
|你知道超级块，

481
00:15:01,170 --> 00:15:04,170
0,120 150,510 510,1050 1470,2250 2730,3000
know super block, a super

482
00:15:04,170 --> 00:15:05,250
0,270 270,480 480,570 570,960 960,1080
block,| there's the log, that
|这是日志，我们今天要讨论很多，

483
00:15:05,250 --> 00:15:05,910
0,90 90,210 210,300 300,360 360,660
we're going to be talking

484
00:15:05,910 --> 00:15:06,930
0,240 240,270 270,480 480,840 840,1020
about a lot today,| that
|我们周一没有谈到，

485
00:15:06,930 --> 00:15:07,560
0,90 90,240 240,420 420,570 570,630
we didn't talk about on

486
00:15:07,560 --> 00:15:09,150
0,510 720,930 930,1050 1050,1500 1500,1590
Monday,| where {inodes -} you
|inode 是一些块包含，

487
00:15:09,150 --> 00:15:10,230
0,150 150,450 450,510 510,930 930,1080
know set of blocks that

488
00:15:10,230 --> 00:15:11,850
0,240 240,810 1050,1380 1380,1500 1500,1620
actually contain,| each and each
|每个块可能包含多个 inode ，

489
00:15:11,850 --> 00:15:13,530
0,300 300,390 390,780 780,1260 1260,1680
block may contain multiply inodes,|
|

490
00:15:13,650 --> 00:15:15,360
0,330 330,540 540,720 720,1200 1200,1710
and {bitmap -} block to
位图块来记录哪些块是空闲的，哪些不是，

491
00:15:15,360 --> 00:15:16,650
0,390 390,540 540,840 840,870 870,1290
record which blocks are free

492
00:15:16,650 --> 00:15:17,880
0,180 180,570 570,660 660,900 900,1230
and which are not free,|
|

493
00:15:18,120 --> 00:15:19,260
0,240 240,360 360,540 540,810 810,1140
and then the data blocks
然后数据块包含文件系统的实际数据。

494
00:15:19,260 --> 00:15:21,750
0,690 1200,1920 1920,2010 2010,2250 2250,2490
actually contain the actual data

495
00:15:21,750 --> 00:15:22,840
0,60 60,150 150,390 390,780
of the file system.|
|

496
00:15:23,460 --> 00:15:25,710
0,360 420,870 870,1260 1260,1650 1650,2250
{} You remember from Monday's
你还记得，周一的课上，

497
00:15:25,710 --> 00:15:27,330
0,420 420,570 570,1200 1200,1290 1290,1620
lecture,| I reproduce the trace
|我分析了这里的输出，

498
00:15:27,330 --> 00:15:28,290
0,420 420,480 480,600 600,720 720,960
here,| you know we looked
|我们了解了文件是如何创建的，

499
00:15:28,290 --> 00:15:30,030
0,180 180,780 780,1140 1140,1380 1380,1740
at actually a how files

500
00:15:30,030 --> 00:15:32,280
0,570 990,1530 1530,1620 1620,1860 1860,2250
created| and you know we
|我们看到了单个文件的创建。

501
00:15:32,310 --> 00:15:33,660
0,450 450,780 780,870 870,1290 1290,1350
see that the creation of

502
00:15:33,660 --> 00:15:35,200
0,90 90,420 420,1020
a single file.|
|

503
00:15:35,370 --> 00:15:36,900
0,600 600,840 840,900 900,1020 1020,1530
Well, {wait -} a second.|
好的，稍等一下。|

504
00:15:41,460 --> 00:15:42,760
0,210 210,780
{} The,
单个文件的创建由多个操作组成，

505
00:15:42,760 --> 00:15:43,510
0,120 120,420 420,480 480,540 540,750
the creation of a single

506
00:15:43,510 --> 00:15:46,240
0,780 780,1230 1230,1470 1470,1980 1980,2730
file consists of multiple operations,|
|

507
00:15:46,360 --> 00:15:48,040
0,90 120,780 780,1080 1080,1230 1230,1680
for example in this particular
比如，在这个特定的场景中，

508
00:15:48,040 --> 00:15:49,420
0,480 480,630 630,810 810,1170 1170,1380
scenario,| that I've here on
|我在幻灯片的这里，

509
00:15:49,420 --> 00:15:50,740
0,120 120,750
the, on

510
00:15:50,740 --> 00:15:52,690
0,90 90,210 210,600 930,1560 1740,1950
on this slide,| {} we
|我们看到， inode 被分配，

511
00:15:52,690 --> 00:15:55,560
0,270 270,1140 1530,2280
see the, {}

512
00:15:55,840 --> 00:15:56,740
0,150 150,240 240,540 540,810 810,900
you know {inode - -}

513
00:15:56,740 --> 00:15:59,050
0,120 120,870 930,1500 1500,1890 1890,2310
is allocated| {} and we
|我们知道这个，因为块 33 正在被写入，

514
00:15:59,050 --> 00:16:00,100
0,150 150,360 360,570 570,750 750,1050
know this, because there's block

515
00:16:00,100 --> 00:16:01,300
0,210 210,390 390,480 480,720 720,1200
{33 -} is being written,|
|

516
00:16:01,570 --> 00:16:03,520
0,630 1020,1290 1290,1650 1650,1860 1860,1950
{} do we see that
我们看到 inode 正在初始化，

517
00:16:03,520 --> 00:16:05,530
0,90 90,750 750,1230 1230,1860 1860,2010
the inode {is,being} initialized,| then
|然后再写入块 33 ，

518
00:16:05,530 --> 00:16:06,700
0,240 240,570 570,690 690,960 960,1170
write again {to -} block

519
00:16:06,700 --> 00:16:07,960
0,390 630,930 930,1020 1020,1140 1140,1260
33,| then we see the
|然后我们看到块 46 被写入，

520
00:16:07,960 --> 00:16:10,030
0,270 270,930 930,1350 1350,1620 1620,2070
block 46 {} is written|
|

521
00:16:10,030 --> 00:16:11,530
0,240 240,510 630,1050 1050,1200 1200,1500
and that reason is written
这个写入的原因是，

522
00:16:11,530 --> 00:16:12,730
0,90 90,630 630,960 960,1050 1050,1200
is,| presumably because you know
|大概是因为包含 x 的目录块，

523
00:16:12,730 --> 00:16:14,950
0,270 720,1350 1350,1800 1800,1980 1980,2220
the directory block that actually

524
00:16:14,950 --> 00:16:16,870
0,480 480,1020 1170,1620 1620,1800 1800,1920
contains x| and the {inode
|并且 x 的 inode 编号被写入磁盘。

525
00:16:16,870 --> 00:16:17,920
0,150 150,420 420,600 600,870 870,1050
-} number for x is

526
00:16:17,920 --> 00:16:19,180
0,300 300,390 390,480 480,900
written to the disk.|
|

527
00:16:19,240 --> 00:16:20,530
0,300 300,390 390,540 540,900 960,1290
Then the {inode -}, root
然后 root inode 被更新，

528
00:16:20,530 --> 00:16:22,480
0,120 120,420 420,930 930,1290 1290,1950
{inode -} updated| to reflect
|反映目录的大小增大，

529
00:16:22,480 --> 00:16:24,010
0,180 180,510 540,1050 1050,1200 1200,1530
that the directory has grown

530
00:16:24,010 --> 00:16:26,620
0,720 720,1230 1260,1770 1770,1890 1890,2610
{in,size}| to contain this particular
|包含这个特定文件 x ，

531
00:16:26,770 --> 00:16:29,230
0,810 1140,1470 1470,1860 2070,2190 2190,2460
{} file x| and then
|然后 inode 更新了。

532
00:16:29,230 --> 00:16:30,820
0,120 120,570 570,780 780,1080 1080,1590
you know {inode -} updated.|
|

533
00:16:31,650 --> 00:16:33,680
0,390 930,1470
So, {}
所以我们想了解的是，

534
00:16:33,880 --> 00:16:34,990
0,240 240,330 330,480 480,630 630,1110
what we want to understand

535
00:16:34,990 --> 00:16:36,430
0,90 90,390 390,1050 1050,1170 1170,1440
is| what happens, like what
|会发生什么，什么会出现问题。

536
00:16:36,430 --> 00:16:38,680
0,150 150,660 660,870 870,1350 1380,2250
could possibly go wrong, right.|
|

537
00:16:39,040 --> 00:16:40,750
0,330 330,480 480,780 780,1290 1590,1710
{} So let's say you
假设我们在这里遇到电源故障，

538
00:16:40,750 --> 00:16:42,790
0,240 240,840 1080,1620 1650,1890 1890,2040
know we {} have a

539
00:16:42,820 --> 00:16:45,280
0,450 450,1080 1230,1710 1710,2070 2280,2460
power failure right here,| so
|这是电源故障或内核崩溃。

540
00:16:45,280 --> 00:16:46,700
0,390 390,510 510,780
here is {}

541
00:16:47,140 --> 00:16:49,060
0,270 270,720 720,930 930,1260 1260,1920
power failure or kernel crash.|
|

542
00:16:50,540 --> 00:16:51,800
0,630

543
00:16:52,160 --> 00:16:53,120
0,180 180,360 360,660 660,870 870,960
So what happens after the
那么断电后会发生什么，

544
00:16:53,120 --> 00:16:54,200
0,270 270,540 540,810 810,960 960,1080
power failure,| correct all the
|所有内存中状态都会丢失，

545
00:16:54,200 --> 00:16:56,900
0,600 600,1200 1230,1470 1470,2100 2400,2700
in-memory state is lost,| because
|因为内存中的状态数据在 RAM 中，

546
00:16:56,900 --> 00:16:59,390
0,0 840,1290 1290,1650 1680,2280 2280,2490
{} in-memory state data that's

547
00:16:59,390 --> 00:17:00,890
0,270 270,420 420,870 870,1290 1320,1500
actually in RAM,| like all
|比如所有进程，所有文件描述符，

548
00:17:00,890 --> 00:17:02,480
0,90 90,900 900,1140 1140,1350 1350,1590
the processes, all the file

549
00:17:02,480 --> 00:17:03,960
0,750
descriptors,|
|

550
00:17:03,960 --> 00:17:05,580
0,360 360,570 570,840 840,1620 1620,1620
{} all the in-memory {}
所有内存中的缓存都消失了，

551
00:17:05,580 --> 00:17:08,520
0,690 690,840 840,1350 1560,2370 2370,2940
caches are gone,| because memory
|因为内存不是持久的，

552
00:17:08,520 --> 00:17:09,840
0,120 120,300 300,900 1080,1230 1230,1320
is not persistent| and the
|我们唯一剩下的东西就是磁盘上的，

553
00:17:09,840 --> 00:17:10,620
0,210 210,360 360,510 510,630 630,780
only thing that we have

554
00:17:10,620 --> 00:17:12,270
0,480 630,1020 1020,1200 1200,1530 1530,1650
left is what actually is

555
00:17:12,270 --> 00:17:14,670
0,270 270,360 360,840 1380,1620 1620,2400
on the disk,| so only
|所以只有数据结构，位和字节，

556
00:17:14,670 --> 00:17:17,280
0,60 60,60 600,1200 1200,1830 1830,2610
{} the data structures, the

557
00:17:17,370 --> 00:17:18,450
0,300 300,420 420,720 720,870 870,1080
bits and bytes,| they're actually
|它们在磁盘上，在断电后仍然存在，

558
00:17:18,450 --> 00:17:20,190
0,210 210,300 300,390 390,690 690,1740
sitting on the disk are

559
00:17:20,550 --> 00:17:22,980
0,690 690,780 780,1080 1080,1650 1860,2430
survived the power failure,| because
|因为那个介质具有耐久性。

560
00:17:22,980 --> 00:17:24,420
0,210 210,450 450,1020 1020,1320 1320,1440
that actually medium is you

561
00:17:24,420 --> 00:17:25,720
0,120 120,960
know persistence

562
00:17:26,010 --> 00:17:27,740
0,180 180,450 450,1110
or has durability.|
|

563
00:17:28,100 --> 00:17:28,640
0,150 150,240 240,330 330,480 480,540
And so we want to
所以我们想知道，想理解，

564
00:17:28,640 --> 00:17:30,380
0,270 270,450 450,510 510,1170
know, like want understand,|
|

565
00:17:30,380 --> 00:17:31,850
0,300 330,510 510,600 600,960 960,1470
so if we crash here
如果我们在这里崩溃，并且没有额外的机制，

566
00:17:32,270 --> 00:17:33,530
0,420 420,540 540,660 660,870 870,1260
and we have no additional

567
00:17:33,530 --> 00:17:35,990
0,840 990,1470 1470,1740 1770,2040 2040,2460
mechanisms,| {} or no logging
|或者没有我们将要讨论的日志，

568
00:17:35,990 --> 00:17:37,190
0,660 720,930 930,1050 1050,1110 1110,1200
as we're going to be

569
00:17:37,190 --> 00:17:38,330
0,300 300,720 780,930 930,1020 1020,1140
talking about,| we have no
|没有额外的机制，

570
00:17:38,330 --> 00:17:40,730
0,360 360,1020 1530,1950 1980,2130 2130,2400
additional mechanisms,| how how bad
|会有多糟糕。

571
00:17:40,730 --> 00:17:41,720
0,120 120,390
is it.|
|

572
00:17:42,750 --> 00:17:44,910
0,780 1050,1530 1530,1740 1740,1890 1890,2160
What risk are we running
我们在这里有什么风险？

573
00:17:44,910 --> 00:17:45,880
0,390
here?|
|

574
00:17:53,750 --> 00:17:54,920
0,630
Anybody?|
有人知道吗？|

575
00:17:57,670 --> 00:17:58,990
0,240 240,840 840,960 960,1110 1110,1320
So basically you know we've
基本上，我们写入块 33

576
00:17:58,990 --> 00:18:01,060
0,510 690,1050 1050,1350 1350,1560 1560,2070
written {} block {33 -}|
|

577
00:18:01,120 --> 00:18:02,410
0,420 420,570 570,960 960,1200 1200,1290
{} to record the {inode
来记录已分配的 inode ，

578
00:18:02,410 --> 00:18:03,760
0,150 150,300 300,420 420,1110 1170,1350
-} has been allocated,| then
|然后我们断电了，

579
00:18:03,760 --> 00:18:04,690
0,90 90,210 210,240 240,570 570,930
we had a power failure|
|

580
00:18:04,690 --> 00:18:05,350
0,90 90,210 210,300 300,420 420,660
and then we come back
然后我们又恢复了。

581
00:18:05,350 --> 00:18:06,220
0,300
up.|
|

582
00:18:07,780 --> 00:18:08,780
0,480
{Go,ahead,Brandon}.|
继续， Brandon 。|

583
00:18:13,300 --> 00:18:14,680
0,600 600,840 840,1020 1020,1230 1230,1380
This does that mean we
这是不是说我们丢失了这个块，

584
00:18:14,680 --> 00:18:17,680
0,450 450,1110 1260,2010 2160,2760 2760,3000
lose the, {} lose this

585
00:18:17,680 --> 00:18:18,780
0,600
block,|
|

586
00:18:18,780 --> 00:18:19,950
0,180 180,360 360,510 510,960 960,1170
it's like it seems like
比如它有数据，但其实不是。

587
00:18:19,950 --> 00:18:21,450
0,240 240,870 870,990 990,1170 1170,1500
it's populated, but it's actually

588
00:18:21,450 --> 00:18:23,460
0,360 840,1290 1290,1680 1680,1860 1860,2010
not.| Yeah, correctly, I think
|是的，没错，我想我们丢失了整个块，

589
00:18:23,460 --> 00:18:25,320
0,180 180,510 510,1470 1470,1770 1770,1860
we're losing, we're losing the

590
00:18:25,320 --> 00:18:26,430
0,210 210,510 510,660 660,810 810,1110
whole block,| but we used
|但是我们使用了 inode x ，

591
00:18:26,430 --> 00:18:27,930
0,180 180,330 330,930 990,1410 1410,1500
{inode -} x, {correct,inode -}

592
00:18:27,930 --> 00:18:28,980
0,570
x,|
|

593
00:18:29,070 --> 00:18:30,150
0,120 120,270 270,540 540,870 870,1080
and {inode -} for x
并且标记为已分配的 x 的 inode 已经在磁盘上分配，

594
00:18:30,150 --> 00:18:31,530
0,150 150,270 270,780 780,1050 1050,1380
that was allocated or marked

595
00:18:31,530 --> 00:18:33,600
0,90 90,690 1140,1320 1320,1530 1530,2070
as allocated {} is allocated

596
00:18:33,600 --> 00:18:34,890
0,240 240,720 870,1050 1050,1140 1140,1290
on disk,| but we have
|但是我们没有放入任何，

597
00:18:34,890 --> 00:18:37,020
0,570 570,810 810,960 960,1470 1680,2130
not put in any, {}|
|

598
00:18:37,020 --> 00:18:38,910
0,240 240,480 480,1050 1050,1380 1380,1890
we've not succeeded, correct, {}
我们没有成功放入任何目录里。

599
00:18:38,910 --> 00:18:40,900
0,480 480,690 690,870 870,1440
put in any directory.|
|

600
00:18:41,120 --> 00:18:42,530
0,270 270,660 660,900 900,1020 1020,1410
So basically on the disk,
所以在磁盘上，分配了一个 inode ，

601
00:18:42,560 --> 00:18:43,130
0,90 90,210 210,390 390,480 480,570
you know there's an {inode

602
00:18:43,130 --> 00:18:44,330
0,210 210,750 750,870 870,930 930,1200
-} allocated,| but it doesn't
|但它不会出现在任何目录中，

603
00:18:44,330 --> 00:18:46,280
0,420 420,540 540,960 960,1530 1830,1950
appear in any directory,| so
|所以我们甚至不能删除它。

604
00:18:46,280 --> 00:18:47,330
0,90 90,300 300,480 480,810 810,1050
we can't even remove it

605
00:18:47,780 --> 00:18:48,680
0,330
right.|
|

606
00:18:48,830 --> 00:18:50,300
0,300 300,420 420,750 750,1170 1170,1470
And so basically what will
所以，这里发生的是

607
00:18:50,300 --> 00:18:51,230
0,150 150,420 420,510 510,630 630,930
this cause has to happen

608
00:18:51,230 --> 00:18:52,670
0,180 180,300 300,750 780,1260 1260,1440
is| we lose lose an
|我们丢失了一个 inode 。

609
00:18:52,670 --> 00:18:53,560
0,300
inode.|
|

610
00:18:57,200 --> 00:18:58,540
0,150 150,240 240,360 360,720
Does that make sense?|
这能理解吗？|

611
00:19:01,260 --> 00:19:02,490
0,180 180,360 360,540 540,930 930,1230
You might think, well maybe
你可能会想，也许我应该做的是，

612
00:19:02,490 --> 00:19:03,360
0,240 240,300 300,510 510,720 720,870
what I should do is,|
|

613
00:19:03,360 --> 00:19:04,560
0,360 360,420 420,600 600,1080 1080,1200
maybe I should reorder the
也许我应该重新安排写入顺序。

614
00:19:04,560 --> 00:19:05,800
0,540
write.|
|

615
00:19:05,830 --> 00:19:07,120
0,450 450,750 750,900 900,960 960,1290
And, {} in a way
以某种方法，希望这个，

616
00:19:07,120 --> 00:19:08,050
0,90 90,270 270,510 510,870 870,930
you know then hopefully you

617
00:19:08,050 --> 00:19:08,830
0,120 120,510 510,600 600,690 690,780
know this,| you know we
|我们不会丢失 inode ，

618
00:19:08,830 --> 00:19:09,610
0,120 120,360 360,510 510,600 600,780
don't lose the {inode -},|
|

619
00:19:09,610 --> 00:19:10,630
0,180 180,270 270,570 570,810 810,1020
so for example another thing
比如，我们可以试着做的是，

620
00:19:10,630 --> 00:19:11,590
0,120 120,240 240,450 450,810 810,960
we could try {to,do} is|
|

621
00:19:11,590 --> 00:19:12,580
0,270 270,510 510,660 660,780 780,990
say well what we'll do
我们要做的是，

622
00:19:12,580 --> 00:19:15,800
0,240 360,1260 1470,1860 1860,2760
is,| we'll write 46
|我们先写入 46 ，

623
00:19:16,990 --> 00:19:18,200
0,630
first,|
|

624
00:19:18,230 --> 00:19:19,610
0,390 390,690 690,810 810,960 960,1380
basically update the {inode -}
更新 inode 更新目录，

625
00:19:19,610 --> 00:19:22,640
0,420 420,1080 1380,1710 1710,2190 2550,3030
update directory, right,| the directory
|目录 inode 写入 32 ，

626
00:19:22,640 --> 00:19:23,840
0,120 120,600
{inode -}

627
00:19:24,780 --> 00:19:26,430
0,180 180,420 420,1140 1170,1260 1260,1650
{you,know} write 32| and then
|然后在磁盘上标记 inode 已分配，

628
00:19:26,430 --> 00:19:27,540
0,180 180,390 390,810 810,960 960,1110
will actually mark the {inode

629
00:19:27,540 --> 00:19:29,460
0,270 270,390 390,1110 1140,1440 1440,1920
-} is allocated on disk,|
|

630
00:19:30,950 --> 00:19:34,100
0,1080 1080,1260 1380,1560 1560,1920 2610,3150
{ - -} to mark
标记为已分配。

631
00:19:34,100 --> 00:19:35,900
0,540 540,750 750,1110 1110,1200 1200,1800
indicate that mark is allocated.|
|

632
00:19:36,650 --> 00:19:37,580
0,150 150,270 270,420 420,630 630,930
So we do the same
所以，我们以不同的顺序执行相同的一组操作。

633
00:19:37,580 --> 00:19:38,480
0,150 150,210 210,750 750,840 840,900
set of operations in a

634
00:19:38,480 --> 00:19:40,020
0,300 300,570 570,990
slightly different order.|
|

635
00:19:40,050 --> 00:19:40,950
0,300 300,450 450,510 510,750 750,900
{} In the hope that
希望我们能够避免这种丢失 inode 的问题。

636
00:19:40,950 --> 00:19:43,320
0,90 90,990 1470,1890 1890,2040 2040,2370
we should avoid this losing

637
00:19:43,320 --> 00:19:44,580
0,120 120,270 270,360 360,720 750,1260
of the {inode -} problem.|
|

638
00:19:45,680 --> 00:19:47,520
0,300 390,600 600,750 750,1230
And would this work?|
这能行得通吗？|

639
00:19:50,980 --> 00:19:51,940
0,300 300,570 570,720 720,810 810,960
Well, the thing that we
好的，我们应该问自己，

640
00:19:51,940 --> 00:19:53,230
0,240 240,540 540,1020 1020,1230 1230,1290
should ask ourselves| like you
|比如，让我们考虑一下这个时间点，

641
00:19:53,230 --> 00:19:54,820
0,390 510,870 870,1230 1230,1410 1410,1590
know let's think about this

642
00:19:54,820 --> 00:19:56,350
0,240 240,330 330,780 990,1260 1260,1530
point in time,| let's say
|我们假设在这里发生了崩溃，

643
00:19:56,350 --> 00:19:57,640
0,90 90,450 450,810 810,1050 1050,1290
a crash happens like right

644
00:19:57,640 --> 00:19:59,020
0,330 330,480 480,810 810,1080 1080,1380
here| or power failure happens|
|或者发生电源故障，|

645
00:19:59,020 --> 00:20:00,800
0,420 450,1290
right between
正好发生在更新目录之后，

646
00:20:00,800 --> 00:20:02,690
0,330 330,810 810,900 900,1350 1350,1890
{} updating the directory basically,|
|

647
00:20:02,690 --> 00:20:04,400
0,210 210,870 870,1080 1080,1590 1590,1710
but before we allocated the
分配磁盘的 inode 之前，

648
00:20:04,400 --> 00:20:05,330
0,90 90,330 330,450 450,780 810,930
{inode -} on disk| and
|现在电源故障，

649
00:20:05,330 --> 00:20:06,860
0,570 630,720 720,930 930,1140 1170,1530
now you know when power

650
00:20:06,860 --> 00:20:08,720
0,600 750,1050 1050,1230 1230,1470 1470,1860
fails,| machine comes back up|
|机器又恢复了，|

651
00:20:08,960 --> 00:20:09,560
0,150 150,240 240,450 450,540 540,600
and we look at the
我们看看文件系统，

652
00:20:09,560 --> 00:20:11,090
0,270 270,660 690,870 870,960 960,1530
file system,| you know what
|文件系统将处于什么状态。

653
00:20:11,090 --> 00:20:12,080
0,270 270,450 450,510 510,720 720,990
state will the file system

654
00:20:12,080 --> 00:20:13,020
0,180 180,420
be in.|
|

655
00:20:15,200 --> 00:20:16,370
0,180 180,480 480,690 690,900 900,1170
You'll still think it's a
你会认为它仍然是一个空闲的 inode 。

656
00:20:16,370 --> 00:20:18,320
0,450 450,630 630,960 960,1410
free {inode -}. {}|
|

657
00:20:19,420 --> 00:20:20,410
0,150 150,480 480,600 600,900 900,990
Yeah, what would happen if,|
是的，会发生什么，|

658
00:20:20,410 --> 00:20:21,910
0,60 60,570 570,960 960,1410 1410,1500
for example we read you
比如我们读取目录中的文件 x ，

659
00:20:21,910 --> 00:20:23,440
0,390 390,750 750,900 900,960 960,1530
{know,file} x in the directory,|
|

660
00:20:23,650 --> 00:20:24,730
0,150 150,210 210,360 360,840 840,1080
in the root directory,| because
在根目录中，|因为它现在这里面，这个数据块。

661
00:20:24,730 --> 00:20:25,540
0,60 60,240 240,420 420,630 630,810
it is in there now,

662
00:20:25,540 --> 00:20:27,260
0,330 330,450 450,660 660,1080
correct, this data block.|
|

663
00:20:30,080 --> 00:20:30,800
0,180 180,300 300,360 360,480 480,720
We're going to be reading
我们将读取的 inode ，

664
00:20:30,800 --> 00:20:31,640
0,120 120,240 240,450 450,600 600,840
the {inode -},| that actually
|它甚至没有分配，标记为未分配。

665
00:20:31,640 --> 00:20:32,990
0,90 90,300 300,450 450,1020 1020,1350
is not even allocated, correct,

666
00:20:32,990 --> 00:20:34,860
0,360 360,1170
marked unallocated.|
|

667
00:20:34,950 --> 00:20:37,020
0,510 510,1110 1380,1770 1770,1950 1950,2070
{} And worse, what could
更糟糕的是， inode 可能会再次分配，

668
00:20:37,020 --> 00:20:38,130
0,300 300,450 450,750 810,990 990,1110
happen is, correct, {inode -}

669
00:20:38,130 --> 00:20:39,480
0,60 60,240 240,360 360,810 810,1350
it might be allocated again,|
|

670
00:20:39,540 --> 00:20:40,470
0,180 180,240 240,420 420,660 660,930
or it might actually really
或者它可能真的被分配了，

671
00:20:40,470 --> 00:20:43,530
0,150 150,780 1140,1830 1860,2400 2400,3060
be allocated,| because marks unallocated
|因为未分配的标记是在不同的文件，

672
00:20:43,530 --> 00:20:44,310
0,150 150,420 420,480 480,750 750,780
to actually in fact a

673
00:20:44,310 --> 00:20:45,660
0,390 390,900
different file,

674
00:20:46,110 --> 00:20:47,520
0,450 840,1020 1020,1110 1110,1290 1290,1410
right,| and so now we
|所以现在我们有两个文件，它们可能，

675
00:20:47,520 --> 00:20:49,530
0,120 120,300 300,960 1350,1740 1740,2010
have two files that might

676
00:20:49,530 --> 00:20:51,900
0,600 600,1530 1770,1950 1950,2250 2250,2370
actually,| {} two files that
|两个文件共享，

677
00:20:51,900 --> 00:20:52,920
0,180 180,600 600,810 810,900 900,1020
actually share,| even though they're
|尽管它们完全不同，

678
00:20:52,920 --> 00:20:53,970
0,360 360,630 630,690 690,990 990,1050
completely different,| they share the
|但它们共享相同的 inode ，

679
00:20:53,970 --> 00:20:55,200
0,240 240,360 360,720
same {inode -},|
|

680
00:20:55,350 --> 00:20:56,880
0,120 120,450 450,540 540,960 1110,1530
for example if one file
比如，一个文件属于用户一，

681
00:20:56,880 --> 00:20:57,630
0,120 120,210 210,420 420,540 540,750
would be owned by user

682
00:20:57,630 --> 00:20:58,740
0,360 360,480 480,720 720,870 870,1110
one| and one by user
|而另一个文件属于用户二，

683
00:20:58,740 --> 00:20:59,910
0,210 210,360 360,750 750,960 960,1170
two,| then basically user two
|那么用户而可以读取用户一的文件数据。

684
00:20:59,910 --> 00:21:00,780
0,180 180,390 390,600 600,660 660,870
could read {user -} one

685
00:21:00,780 --> 00:21:02,130
0,330 330,510 510,660 660,900 990,1350
file {} data {} right.|
|

686
00:21:03,770 --> 00:21:04,760
0,180 180,330 330,510 510,690 690,990
So that's no good, either,
所以这也不是好事，对吧。

687
00:21:04,760 --> 00:21:06,040
0,390
right.|
|

688
00:21:11,230 --> 00:21:12,540
0,150 150,240 240,390 390,750
Does that make sense?|
这能理解吗？|

689
00:21:13,980 --> 00:21:15,870
0,240 240,600 600,1170 1170,1410 1410,1890
So basically switching the order|
所以改变顺序，|

690
00:21:15,870 --> 00:21:16,650
0,90 90,150 150,270 270,510 510,780
you know it's not really
这并不能真正解决我们的问题。

691
00:21:16,650 --> 00:21:17,730
0,120 120,180 180,510 510,630 630,1080
going to solve our problem.|
|

692
00:21:18,500 --> 00:21:19,880
0,420 420,540 540,660 660,960 960,1380
{} You would just basically
你会遇到我们以前遇到的不同的问题。

693
00:21:19,880 --> 00:21:21,110
0,150 150,240 240,540 540,990 1020,1230
get a different problem that

694
00:21:21,110 --> 00:21:22,360
0,120 120,240 240,690
we had before.|
|

695
00:21:23,630 --> 00:21:24,350
0,210 210,390 390,540 540,600 600,720
Okay, let's look at one
好的，我们再看一个例子。

696
00:21:24,350 --> 00:21:25,740
0,180 180,810
more example.|
|

697
00:21:25,840 --> 00:21:28,720
0,660 660,1050 1050,1530 1560,2160 2190,2880
{} Here's the {} example
这是写入文件 x 的例子。

698
00:21:28,810 --> 00:21:30,400
0,270 300,960
of writing

699
00:21:31,250 --> 00:21:32,860
0,210 210,570 570,960
to file x.|
|

700
00:21:35,120 --> 00:21:35,870
0,210 210,450 450,570 570,690 690,750
So once we have the
所以一旦我们分配了文件，

701
00:21:35,870 --> 00:21:37,100
0,300 300,780 780,900 900,1050 1050,1230
files allocated,| let's say that
|假设所有文件都成功了，

702
00:21:37,100 --> 00:21:38,330
0,120 120,750 780,900 900,1080 1080,1230
all succeeded,| and now we're
|现在我们执行 write 系统调用，

703
00:21:38,330 --> 00:21:39,950
0,480 480,570 570,810 810,1110 1110,1620
executing the write system call|
|

704
00:21:40,160 --> 00:21:40,970
0,120 120,180 180,360 360,630 630,810
and the write system call
而 write 系统调用也执行多次写入操作，

705
00:21:40,970 --> 00:21:42,710
0,270 270,630 660,990 990,1500 1500,1740
also does a multiple writes

706
00:21:42,710 --> 00:21:43,820
0,570 570,660 660,840 840,1020 1020,1110
operations| which we saw on
|我们在周一看到的，

707
00:21:43,820 --> 00:21:46,190
0,480 870,1740 1740,1860 1860,1980 1980,2370
Monday,| {for,example} it will allocate
|比如，它分配块，在这里是块 45 ，

708
00:21:46,190 --> 00:21:47,300
0,30 30,570
a block,

709
00:21:47,300 --> 00:21:48,740
0,60 60,180 180,390 390,720 720,1440
in this case block 45,|
|

710
00:21:49,160 --> 00:21:50,720
0,240 240,330 330,600 600,1050 1050,1560
so it sets a bit
所以它在空闲映射中设置一位，

711
00:21:50,720 --> 00:21:52,130
0,180 180,270 270,450 450,960 1110,1410
in the free map, {}|
|

712
00:21:52,130 --> 00:21:54,020
0,390 450,870 870,1380 1380,1560 1560,1890
{} block 45 is the
块 45 是位图块，

713
00:21:54,170 --> 00:21:56,060
0,330 330,480 480,960 1260,1560 1560,1890
{bitmap -} block,| {} so
|所以它在位图中分配一个块，

714
00:21:56,060 --> 00:21:57,050
0,150 150,540 540,600 600,900 900,990
it allocates a block in

715
00:21:57,050 --> 00:21:58,430
0,90 90,240 240,930 930,1320 1320,1380
the {bitmap -},| allocates a
|在位图块中分配一个位，

716
00:21:58,430 --> 00:21:59,180
0,240 240,360 360,420 420,570 570,750
bit in the {bitmap -}

717
00:21:59,180 --> 00:22:01,300
0,330 330,690 900,1530
block| to indicate
|表示那个块已经被分配，

718
00:22:01,420 --> 00:22:02,440
0,330 330,480 480,720 720,870 870,1020
the the block has to

719
00:22:02,440 --> 00:22:04,360
0,120 120,750 1140,1290 1290,1470 1470,1920
be allocated,| {} that block
|那个块，我猜是 595 。

720
00:22:04,360 --> 00:22:04,960
0,210 210,300 300,360 360,540 540,600
turns out to be I

721
00:22:04,960 --> 00:22:06,780
0,210 210,480 480,720 720,1290
guess {595 - -}.|
|

722
00:22:06,780 --> 00:22:07,770
0,90 90,360 360,480 480,900 930,990
And then we write you
然后我们把字符 h 写如 595 ，

723
00:22:07,770 --> 00:22:09,420
0,240 240,750 750,900 900,1290 1290,1650
know {} the character h

724
00:22:09,420 --> 00:22:10,500
0,120 120,210 210,630 630,870 870,1080
you know to {595 -

725
00:22:10,500 --> 00:22:11,400
0,300 300,390 390,480 480,540 540,900
-}| and then the character
|然后是字符 i ，

726
00:22:11,400 --> 00:22:12,330
0,300 300,390 390,510 510,630 630,930
i,| you know we update
|我们更新 inode 。

727
00:22:12,330 --> 00:22:13,460
0,90 90,210 210,540
the {inode -}.|
|

728
00:22:13,990 --> 00:22:14,860
0,330 330,450 450,540 540,630 630,870
Right, now we can ask
好的，现在我们可以问自己同样的问题了，

729
00:22:14,860 --> 00:22:16,270
0,330 330,390 390,570 570,1080 1080,1410
ourselves the same question,| like
|比如如果我们崩溃会发生什么，

730
00:22:16,270 --> 00:22:18,300
0,360 360,510 510,1020
what will happen

731
00:22:19,360 --> 00:22:22,000
0,720 720,1560 1590,1710 1710,2310 2400,2640
{} if we crash,| so
|比如，我们在这里崩溃，

732
00:22:22,000 --> 00:22:23,230
0,60 60,570 570,780 780,1050 1050,1230
for example, let's say we

733
00:22:23,230 --> 00:22:25,840
0,420 420,990 1020,1320 1320,1710 1770,2610
allocate crash right here,| between
|在写入位图块之后，

734
00:22:26,400 --> 00:22:28,170
0,90 90,270 270,780 810,1350 1590,1770
you know writing the {bitmap

735
00:22:28,170 --> 00:22:30,960
0,240 240,750 990,1740 1740,1980 1980,2790
-} block,| before we allocate
|在写入 inode 之前。

736
00:22:30,990 --> 00:22:32,490
0,720 720,870 870,1110 1110,1410 1410,1500
before we actually write a

737
00:22:32,490 --> 00:22:33,460
0,360
inode.|
|

738
00:22:33,700 --> 00:22:35,400
0,360 360,720 720,1080
So crash here.|
所以，在这里崩溃。|

739
00:22:39,980 --> 00:22:41,570
0,420 420,540 540,690 690,1320 1350,1590
And so we reboot, we
所以重新启动后，我们又回来了，

740
00:22:41,570 --> 00:22:43,100
0,150 150,390 390,780 810,1230 1230,1530
come back up| and this
|这是一种特殊的状态，

741
00:22:43,100 --> 00:22:44,360
0,180 180,270 270,330 330,660 660,1260
is in a particular state|
|

742
00:22:44,360 --> 00:22:45,500
0,570
and
风险是什么？

743
00:22:45,830 --> 00:22:47,090
0,150 150,570 600,930 930,1140 1140,1260
you know what, what is

744
00:22:47,090 --> 00:22:48,220
0,90 90,510
the risk?|
|

745
00:22:50,520 --> 00:22:52,080
0,240 240,420 420,750 750,1110 1110,1560
We use it data block,
我们使用了数据块，但我们失去了它。

746
00:22:52,080 --> 00:22:54,000
0,360 600,780 780,1080 1080,1350 1710,1920
but we lose it.| Yeah,
|是的，我们又失去了，

747
00:22:54,000 --> 00:22:54,930
0,150 150,330 330,420 420,690 690,930
we lose it again, right,|
|

748
00:22:54,930 --> 00:22:56,550
0,270 270,510 540,1020 1020,1110 1110,1620
because the block is allocated,|
因为块被分配了，|

749
00:22:56,550 --> 00:22:57,270
0,150 150,360 360,540 540,630 630,720
but doesn't show up in
但没有出现在任何文件中，

750
00:22:57,270 --> 00:22:58,500
0,210 210,660
any file,|
|

751
00:22:58,950 --> 00:23:00,300
0,330 330,570 570,660 660,930 930,1350
{} because it hasn't been
因为它没有写入任何 inode ，

752
00:23:00,330 --> 00:23:01,890
0,630 630,930 930,1140 1140,1380 1380,1560
written into any {inode -},|
|

753
00:23:01,890 --> 00:23:02,790
0,150 150,240 240,570 570,660 660,900
so we lose a data
所以我们丢失了一个数据块。

754
00:23:02,790 --> 00:23:03,840
0,390
block.|
|

755
00:23:08,680 --> 00:23:09,580
0,210 210,390 390,540 540,690 690,900
You might think,| okay, well
你可能会想，|好吧，也许是因为我们写入顺序错了，

756
00:23:09,580 --> 00:23:10,750
0,450 450,600 600,690 690,930 930,1170
maybe you know just because

757
00:23:10,750 --> 00:23:11,560
0,270 270,510 510,630 630,720 720,810
we wrote them in the

758
00:23:11,560 --> 00:23:12,610
0,210 210,540 540,780 780,900 900,1050
wrong order,| what we should
|我们应该做的是，

759
00:23:12,610 --> 00:23:15,220
0,90 90,420 420,1080 1380,2160 2160,2610
have done is| {} what
|我们首先应该做的是写入 inode ，

760
00:23:15,220 --> 00:23:16,000
0,120 120,330 330,510 510,630 630,780
we {should,have} done is at

761
00:23:16,000 --> 00:23:16,840
0,270 270,480 480,630 630,720 720,840
first write in the {inode

762
00:23:16,840 --> 00:23:18,640
0,420 810,990 990,1290 1290,1560 1560,1800
-},| so first write {33
|所以先写入 33 ，使用 595 ，

763
00:23:18,640 --> 00:23:20,720
0,450 900,1140 1140,1530
-} with the,

764
00:23:20,930 --> 00:23:22,250
0,120 120,210 210,510 510,1080 1080,1320
you know with {595 -

765
00:23:22,250 --> 00:23:25,010
0,570 660,1380 1500,1680 1680,2160 2220,2760
-}| as in the either
|它是间接块或直接块。

766
00:23:25,010 --> 00:23:26,120
0,60 60,210 210,720 720,1050 1050,1110
is an indirect block or

767
00:23:26,120 --> 00:23:27,460
0,270 270,750
direct block.|
|

768
00:23:27,520 --> 00:23:28,870
0,210 210,870 900,1020 1020,1140 1140,1350
And then you know actually
然后我们标记 inode 块为已分配，

769
00:23:28,870 --> 00:23:31,330
0,180 180,390 390,960 1320,1950 1980,2460
we will mark the inode,

770
00:23:31,330 --> 00:23:32,890
0,540 570,810 810,900 900,1350 1350,1560
the block is allocated,| so
|然后我们写入 45 。

771
00:23:32,890 --> 00:23:34,360
0,330 330,510 510,990
then we'll write

772
00:23:34,390 --> 00:23:35,860
0,120 120,210 210,960
you know 45.|
|

773
00:23:37,000 --> 00:23:37,960
0,90 90,270 270,510 510,600 600,960
If we change the order,|
如果我们修改顺序，|

774
00:23:37,960 --> 00:23:38,860
0,270 270,390 390,570 570,630 630,900
because we want to avoid
因为我们要避免丢失数据块，

775
00:23:38,860 --> 00:23:40,270
0,150 150,390 390,630 630,1140 1140,1410
these lost data block,| {we,change}
|我们这样修改顺序。

776
00:23:40,270 --> 00:23:41,560
0,180 180,240 240,420 420,720
order in this way.|
|

777
00:23:42,530 --> 00:23:44,210
0,420 420,900 930,1170 1170,1380 1380,1680
{} And now let's consider
现在我们考虑这种情况，

778
00:23:44,210 --> 00:23:45,020
0,90 90,420 420,600 600,750 750,810
the case,| if there's a
|如果这里出现故障。

779
00:23:45,020 --> 00:23:46,620
0,390 390,600 600,1080
failure right here.|
|

780
00:23:50,370 --> 00:23:51,860
0,300 300,420 420,510 510,960
What is the risk?|
风险是什么？|

781
00:23:56,960 --> 00:23:58,520
0,450 450,630 630,1290 1290,1440 1440,1560
{} The size of the
文件的大小与实际分配的数据块不匹配。

782
00:23:58,520 --> 00:24:00,530
0,360 360,510 510,810 810,1440 1440,2010
file is not compatible with

783
00:24:00,530 --> 00:24:03,050
0,870 870,1050 1050,1680 1800,2190 2190,2520
actually how many data blocks

784
00:24:03,050 --> 00:24:04,320
0,60 60,750
are allocated.|
|

785
00:24:04,710 --> 00:24:05,580
0,180 180,390 390,540 540,810 810,870
That might be,| although I
也许是这样，|虽然我认为写入 33

786
00:24:05,580 --> 00:24:06,210
0,150 150,270 270,360 360,570 570,630
think it's the write of

787
00:24:06,210 --> 00:24:07,590
0,210 210,540 540,840 840,1140 1140,1380
{33 -}| actually update both
|实际上更新了大小和块编号。

788
00:24:07,590 --> 00:24:08,760
0,90 90,510 510,930 930,1050 1050,1170
the size and you know

789
00:24:08,760 --> 00:24:10,470
0,450 570,810 810,1020 1020,1260 1260,1710
the {} the block number.|
|

790
00:24:11,970 --> 00:24:13,140
0,660
Oh.|
噢。|

791
00:24:13,450 --> 00:24:14,530
0,210 210,330 330,480 480,810 810,1080
So that might be might
所以这可能是正常的。

792
00:24:14,530 --> 00:24:15,860
0,180 180,330 330,810
work out okay.|
|

793
00:24:16,780 --> 00:24:17,620
0,150 150,240 240,360 360,510 510,840
If there were two separate
如果有两个单独的写入，那将是一个问题，

794
00:24:17,620 --> 00:24:18,730
0,390 390,780 780,930 930,1050 1050,1110
writes, that would be a

795
00:24:18,730 --> 00:24:19,740
0,450
problem,|
|

796
00:24:20,950 --> 00:24:21,910
0,150 150,270 270,390 390,630 630,960
but there's some bigger problem
但这里有个更大的问题。

797
00:24:21,910 --> 00:24:22,720
0,360
here.|
|

798
00:24:27,400 --> 00:24:29,000
0,240 240,480 480,1110
Is that the,|
是不是那个，

799
00:24:29,620 --> 00:24:32,320
0,240 240,540 540,1590 1770,2220 2220,2700
so the file has the,|
所以这个文件里面有，|

800
00:24:33,820 --> 00:24:35,890
0,270 270,630 630,1020 1260,1530 1530,2070
so things that it has
所以它有数据块，

801
00:24:35,890 --> 00:24:37,480
0,300 300,630 630,1290 1290,1500 1500,1590
the data block,| but the
|但是数据块被标记为未分配，

802
00:24:37,480 --> 00:24:38,980
0,270 270,540 540,630 630,1080 1080,1500
data block is marked as

803
00:24:39,010 --> 00:24:42,640
0,480 720,1800 1890,2250 2250,3090
{} unallocated| and other
|其他文件也可以使用它。

804
00:24:42,790 --> 00:24:44,650
0,510 540,1020 1020,1200 1200,1500 1500,1860
{} files can also use

805
00:24:44,650 --> 00:24:46,570
0,450 570,1410 1410,1650 1650,1740 1740,1920
it.| Yeah, that's the real
|是的，这才是真正的大问题，

806
00:24:46,570 --> 00:24:47,740
0,180 180,480 480,720 720,900 900,1170
big problem here is that,|
|

807
00:24:47,740 --> 00:24:49,180
0,150 150,300 300,630 1020,1290 1290,1440
you know the the {inode
inode 块 595 属于那个文件，

808
00:24:49,180 --> 00:24:51,040
0,420 420,930 1170,1560 1560,1770 1770,1860
-} things {595 - -},

809
00:24:51,040 --> 00:24:53,170
0,300 300,510 510,1080 1080,1680 1770,2130
block {595 -} belonged belonged

810
00:24:53,170 --> 00:24:54,700
0,90 90,270 270,780 960,1230 1230,1530
to that file,| but actually
|但是在磁盘上，它仍标记为未分配，

811
00:24:54,700 --> 00:24:55,930
0,150 150,420 420,540 540,780 780,1230
on disk it's still marked

812
00:24:55,960 --> 00:24:57,120
0,750
as

813
00:24:57,120 --> 00:24:59,430
0,150 150,930 990,1320 1320,1830 2040,2310
{} unallocated| and so when
|所以，当稍后创建另一个文件时，

814
00:24:59,430 --> 00:25:01,080
0,420 420,690 690,990 990,1110 1110,1650
later another file was created,|
|

815
00:25:01,110 --> 00:25:02,220
0,90 90,210 210,420 420,720 720,1110
you know that block actually
那个块可能会用于另一个文件。

816
00:25:02,220 --> 00:25:03,870
0,270 270,900 930,1410 1410,1500 1500,1650
might be used for that

817
00:25:03,870 --> 00:25:05,020
0,180 180,630
other file.|
|

818
00:25:05,140 --> 00:25:07,120
0,270 270,390 390,540 540,1320 1350,1980
And so now certainly {}
所以现在有一个文件拥有 595 ，

819
00:25:07,150 --> 00:25:08,500
0,240 240,510 510,870 870,990 990,1350
one file things, it owns

820
00:25:08,650 --> 00:25:09,910
0,390 390,600 600,870 870,990 990,1260
{595 - -},| but actually
|但其他文件也是这样的，

821
00:25:09,910 --> 00:25:11,170
0,210 210,450 450,840 840,1020 1020,1260
other file does,| in fact
|实际上这两个文件都有 595 ，

822
00:25:11,170 --> 00:25:12,490
0,300 300,720 720,870 870,1050 1050,1320
both files will have {595

823
00:25:12,490 --> 00:25:14,200
0,270 270,660 660,780 780,1200
- -}| in their
|在它们的 inode 的块编号中，

824
00:25:14,230 --> 00:25:16,420
0,540 570,1080 1080,1680 1800,2010 2010,2190
{} block numbers for their

825
00:25:16,420 --> 00:25:20,500
0,120 120,570 930,1680 1890,2670 3240,4080
{inode -}| and {} basically
|如果一个用户拥有该文件，

826
00:25:20,500 --> 00:25:21,820
0,150 150,540 540,750 750,990 990,1320
you know if one user

827
00:25:21,820 --> 00:25:22,870
0,300 300,480 480,810 810,870 870,1050
owns that file,| the other
|另一个用户拥有另一个文件，

828
00:25:22,870 --> 00:25:23,710
0,300 300,360 360,450 450,630 630,840
user in the other file,|
|

829
00:25:23,710 --> 00:25:24,880
0,60 60,450 450,690 690,930 930,1170
that {can,actually} read write to
他们可以读写对方的数据，

830
00:25:24,880 --> 00:25:26,350
0,210 210,390 390,750 900,1140 1140,1470
each other's data, right,| that's
|这显然不是我们想要的。

831
00:25:26,380 --> 00:25:27,910
0,480 480,840 840,1050 1050,1140 1140,1530
clearly not what we want.|
|

832
00:25:28,390 --> 00:25:29,320
0,120 120,210 210,390 420,660 660,930
You know the file system
文件系统应该保证，

833
00:25:29,320 --> 00:25:31,450
0,240 240,990 1170,1350 1350,1590 1590,2130
should guarantee| that every block
|每个块只属于一个文件，

834
00:25:31,480 --> 00:25:33,430
0,660 690,1200 1200,1290 1290,1560 1560,1950
only belongs in one file|
|

835
00:25:33,430 --> 00:25:34,810
0,90 90,240 240,450 450,960 990,1380
and no other file or
不属于其他文件或是空闲的。

836
00:25:34,810 --> 00:25:35,860
0,150 150,540
is free.|
|

837
00:25:37,630 --> 00:25:38,680
0,570
Okay?|
好的？|

838
00:25:38,860 --> 00:25:39,730
0,120 120,270 270,420 420,600 600,870
So this could lead to
所以这可能会导致安全问题，

839
00:25:39,760 --> 00:25:42,250
0,450 450,1230 1260,2100 2100,2400 2400,2490
security problems,| basically block is
|块在多个文件之间共享，

840
00:25:42,250 --> 00:25:43,420
0,600
shared

841
00:25:46,960 --> 00:25:48,860
0,330 330,630 630,1110
among multiple files,|
|

842
00:25:49,640 --> 00:25:51,480
0,210 210,450 450,840 840,1350
and that's definitely wrong.|
这绝对是错的。|

843
00:25:55,480 --> 00:25:57,280
0,120 120,180 180,750 750,1140 1680,1800
Does it make sense, in
关于可能出现的问题，这些能理解吗？

844
00:25:57,280 --> 00:25:58,000
0,210 210,270 270,360 360,630 630,720
terms of the problems that

845
00:25:58,000 --> 00:25:59,180
0,90 90,600
can appear?|
|

846
00:25:59,300 --> 00:26:00,260
0,150 150,510 510,600 600,720 720,960
And again, you know the
再说一次，这里真正的问题是，

847
00:26:00,830 --> 00:26:02,240
0,540 540,870 870,1110 1110,1230 1230,1410
real issue here is,| not
|不是看写入的顺序，

848
00:26:02,240 --> 00:26:03,350
0,90 90,330 330,510 510,960 960,1110
to watch the ordering of

849
00:26:03,350 --> 00:26:04,850
0,90 90,600 840,1170 1170,1260 1260,1500
the writes,| but the real
|但这里真正的根本问题是，

850
00:26:04,850 --> 00:26:06,050
0,480 480,780 780,990 990,1080 1080,1200
underlying problem here is| that
|我们在进行多次写入，

851
00:26:06,050 --> 00:26:07,340
0,60 60,240 240,450 450,930 930,1290
we're just doing multiple writes|
|

852
00:26:07,340 --> 00:26:08,660
0,120 120,270 270,750 750,1020 1020,1320
and it basically have to
它必须以原子操作的形式出现在磁盘上。

853
00:26:08,660 --> 00:26:10,730
0,360 360,510 510,690 690,1140 1470,2070
show up on disk as

854
00:26:11,000 --> 00:26:13,160
0,450 450,1020 1020,1590
an atomic operation.|
|

855
00:26:18,920 --> 00:26:21,140
0,690 1050,1320 1320,1470 1470,1560 1560,2220
Okay, {} so the solution
好的，所以我们在这节课中要研究的解决方案是日志。

856
00:26:21,710 --> 00:26:23,140
0,180 180,270 270,750
that we're gonna

857
00:26:23,940 --> 00:26:25,950
0,690 720,870 870,990 990,1470 1470,2010
explore in this lecture is

858
00:26:25,980 --> 00:26:27,380
0,780
logging.|
|

859
00:26:28,380 --> 00:26:29,160
0,240 240,330 330,330 330,540 540,780
And as I said before,|
正如我之前所说的，|

860
00:26:29,160 --> 00:26:30,800
0,150 150,270 270,930
this is {}
这是文件系统中常用的解决方案，

861
00:26:32,100 --> 00:26:33,300
0,90 90,360 360,780 780,1080 1080,1200
a common solution used in

862
00:26:33,300 --> 00:26:36,090
0,240 240,780 780,1410 1830,2430 2430,2790
file systems| and originating actually
|来源于数据库资料。

863
00:26:36,090 --> 00:26:37,590
0,150 150,210 210,480 480,900 900,1500
out of the database literature.|
|

864
00:26:37,740 --> 00:26:38,700
0,300 300,420 420,690 690,930 930,960
And it actually has a
它有几个很好的特性，

865
00:26:38,700 --> 00:26:40,500
0,270 270,480 480,1110 1170,1290 1290,1800
couple good properties,| {} one,
|其一，它使系统调用或文件系统调用是原子的，

866
00:26:40,500 --> 00:26:41,700
0,180 180,300 300,360 360,600 600,1200
it's going to make basically

867
00:26:41,910 --> 00:26:43,560
0,420 420,990 990,1110 1110,1380 1380,1650
system calls or file system

868
00:26:43,560 --> 00:26:44,780
0,300 300,840
calls atomic,|
|

869
00:26:47,520 --> 00:26:48,930
0,270 270,480 480,510 510,1020 1200,1410
with that, I mean,| so
我的意思是，|如果创建文件，

870
00:26:48,930 --> 00:26:50,820
0,210 210,630 660,990 990,1590 1590,1890
if a create file| or
|或者调用 create 或 write ，

871
00:26:50,820 --> 00:26:52,350
0,450 450,630 630,870 870,1410 1410,1530
you can call create you

872
00:26:52,350 --> 00:26:54,660
0,600 720,1230 1230,1560 1560,1680 1680,2310
{call,write},| basically all the effects
|所有系统调用的作用，

873
00:26:54,690 --> 00:26:56,250
0,240 240,660 660,990 990,1350 1350,1560
of that system call| use
|一起出现或完全不出现，

874
00:26:56,250 --> 00:26:57,900
0,180 180,570 570,1230 1290,1470 1470,1650
all appeared altogether or none

875
00:26:57,900 --> 00:26:59,250
0,90 90,300 570,750 750,930 930,1350
of them,| so that avoids
|所以，这避免了这个问题，

876
00:26:59,250 --> 00:27:02,370
0,570 660,1530 1530,1950 2340,2640 2640,3120
this problem| of {} only
|只有部分写入出现在磁盘上的问题。

877
00:27:02,400 --> 00:27:03,750
0,360 360,810 810,900 900,1050 1050,1350
some subset of the writes

878
00:27:03,750 --> 00:27:05,010
0,270 270,600 600,750 750,870 870,1260
actually showing up on disk.|
|

879
00:27:06,800 --> 00:27:08,660
0,480 660,1140 1140,1350 1350,1710 1710,1860
{} Second good property it
它拥有的第二个好的属性，

880
00:27:08,660 --> 00:27:09,920
0,480 510,810 810,900 900,1140 1140,1260
has,| {} it allows for
|它允许快速恢复。

881
00:27:09,920 --> 00:27:12,080
0,330 330,930
fast recovery.|
|

882
00:27:12,870 --> 00:27:14,740
0,210 210,570 570,1380
So after reboot,|
所以在重启之后，|

883
00:27:14,740 --> 00:27:15,850
0,450 450,600 600,720 720,930 930,1110
turns out we don't actually
我们不需要做很多工作来修复文件系统，

884
00:27:15,850 --> 00:27:16,450
0,120 120,210 210,330 330,390 390,600
have to do a lot

885
00:27:16,450 --> 00:27:17,560
0,90 90,540 540,660 660,1020 1020,1110
of work to repair the

886
00:27:17,560 --> 00:27:18,940
0,240 240,660 750,1110 1110,1140 1140,1380
file system,| actually a very
|实际上只需要很少的工作。

887
00:27:18,940 --> 00:27:20,380
0,300 300,480 480,570 570,930
minimal amount of work.|
|

888
00:27:20,730 --> 00:27:21,660
0,450 450,600 600,750 750,870 870,930
{} And this is in
这与其他一些解决方案形成了鲜明对比，

889
00:27:21,660 --> 00:27:23,520
0,570 570,810 810,990 990,1200 1200,1860
contrast to some other solution|
|

890
00:27:23,520 --> 00:27:24,840
0,210 210,420 420,600 600,960 960,1320
and I'm not talking about,|
我没有说的方案，|

891
00:27:24,840 --> 00:27:26,070
0,180 180,270 270,750 840,1050 1050,1230
which is basically you go
你去检查文件系统，

892
00:27:26,070 --> 00:27:27,510
0,150 150,510 510,570 570,930 930,1440
and inspect the file system,|
|

893
00:27:27,720 --> 00:27:28,650
0,420 420,540 540,690 690,870 870,930
maybe you read all the
可能你读取文件系统的所有块，

894
00:27:28,650 --> 00:27:29,760
0,300 300,360 360,450 450,720 720,1110
blocks of the file system|
|

895
00:27:29,760 --> 00:27:30,510
0,150 150,300 300,510 510,630 630,750
or read all the {inode
或者读取所有 inode 块，

896
00:27:30,510 --> 00:27:31,800
0,240 240,690 690,870 870,1080 1080,1290
-} blocks,| read all the
|读取所有位图块，

897
00:27:31,800 --> 00:27:33,510
0,210 210,450 450,900 1200,1500 1500,1710
{bitmap -} blocks| and so
|所以检查，

898
00:27:33,510 --> 00:27:34,740
0,360 360,660 660,870 870,990 990,1230
check out| whether the file
|文件系统是否仍处于正确的状态，

899
00:27:34,740 --> 00:27:35,610
0,360 360,450 450,720 720,810 810,870
system is still in the

900
00:27:35,610 --> 00:27:36,900
0,270 270,600 600,690 690,930 930,1290
correct shape| and maybe repair
|或许还可以进行修复。

901
00:27:36,900 --> 00:27:37,780
0,420
things.|
|

902
00:27:38,260 --> 00:27:40,090
0,360 540,960 960,1140 1140,1440 1440,1830
{} Logging has this nice
日志有这个很好的属性，恢复很快。

903
00:27:40,090 --> 00:27:41,590
0,390 390,570 570,900 900,1080 1080,1500
property that actually the recovery

904
00:27:41,590 --> 00:27:42,820
0,90 90,540
is fast.|
|

905
00:27:43,020 --> 00:27:44,070
0,210 210,690 690,870 870,930 930,1050
And finally, it is in
最后，在原则上，它可以是非常高的性能，

906
00:27:44,070 --> 00:27:45,780
0,690 1020,1320 1320,1470 1470,1590 1590,1710
principle, {} it can be

907
00:27:45,780 --> 00:27:47,940
0,210 210,450 450,570 570,1350 1830,2160
actually very high performance,| although
|虽然要看的这个，

908
00:27:47,940 --> 00:27:50,070
0,90 90,570 960,1170 1170,1530 1800,2130
the one, you know what

909
00:27:50,070 --> 00:27:50,670
0,90 90,210 210,270 270,330 330,600
we're going to be looking|
|

910
00:27:50,670 --> 00:27:51,480
0,90 90,150 150,510 510,570 570,810
in the context of {xv6
在 xv6 中看到的不是高性能的，

911
00:27:51,480 --> 00:27:52,890
0,270 270,390 390,600 600,720 720,1410
-} is not high performance,|
|

912
00:27:53,070 --> 00:27:53,880
0,150 150,240 240,360 360,570 600,810
so we're going to look
所以我们下周要看这个，

913
00:27:53,880 --> 00:27:55,320
0,60 60,450 570,990 990,1260 1290,1440
at that next week,| we'll
|我们将了解如何构建一个日志系统，

914
00:27:55,320 --> 00:27:56,250
0,210 210,480 480,630 630,720 720,930
see actually how to build

915
00:27:56,250 --> 00:27:57,900
0,30 30,360 360,690 690,960 1110,1650
a logging system| that has
|具有原子文件系统调用，更快的恢复和高性能，

916
00:27:58,360 --> 00:27:59,860
0,390 390,600 600,840 840,1200 1200,1500
atomic file system calls faster

917
00:27:59,860 --> 00:28:01,690
0,480 510,750 750,930 930,1470 1470,1830
recovery and high performance,| today
|今天我们只关注前两个。

918
00:28:01,690 --> 00:28:02,230
0,120 120,240 240,300 300,390 390,540
we're going to be just

919
00:28:02,230 --> 00:28:03,190
0,390 390,450 450,540 540,810 810,960
focusing on the first two.|
|

920
00:28:05,560 --> 00:28:06,600
0,720
Okay.|
好的。|

921
00:28:06,780 --> 00:28:08,880
0,180 180,750 750,1290 1320,1530 1530,2100
The basic idea of logging
日志的基本思想非常简单，

922
00:28:08,910 --> 00:28:11,120
0,510 510,690 690,1680
is actually straightforward,|
|

923
00:28:11,330 --> 00:28:13,310
0,690 900,1380 1380,1500 1500,1860 1860,1980
{} and so basically what
所以你要做的就是把它分成两部分，

924
00:28:13,310 --> 00:28:14,180
0,90 90,270 270,360 360,480 480,870
you do is you divide

925
00:28:14,180 --> 00:28:16,500
0,420 600,960 960,1170 1170,1800
this into two pieces,|
|

926
00:28:16,590 --> 00:28:18,450
0,270 270,540 540,660 660,1410 1530,1860
one is the log, {one,is}
一个是日志，一个是文件系统，

927
00:28:18,450 --> 00:28:19,940
0,120 120,360 360,900
the file system,|
|

928
00:28:20,600 --> 00:28:21,530
0,240 240,360 360,600 600,750 750,930
and file system might be
文件系统可能比日志大得多。

929
00:28:21,560 --> 00:28:23,320
0,180 180,540 540,1200
much bigger {than,log}.|
|

930
00:28:23,580 --> 00:28:26,850
0,510 540,1050 1230,1920 2310,3030 3060,3270
{} And when {} you
当你需要更新文件系统时，

931
00:28:26,850 --> 00:28:27,720
0,150 150,210 210,510 510,600 600,870
need to update the file

932
00:28:27,720 --> 00:28:29,520
0,330 330,540 540,1140 1170,1380 1380,1800
system,| so update, let's say
|比如更新块 33 或者更新位图块，

933
00:28:29,520 --> 00:28:31,530
0,180 180,630 630,840 840,1230 1230,2010
{} block {33 -} or

934
00:28:31,530 --> 00:28:32,820
0,360 360,450 450,630 630,870 870,1290
update the {bitmap -} block,|
|

935
00:28:33,360 --> 00:28:34,410
0,210 210,480 480,870 870,990 990,1050
we're actually not going to
我们实际上不会更新文件系统块，

936
00:28:34,410 --> 00:28:36,210
0,570 600,870 870,1110 1110,1410 1410,1800
update the file system blocks,|
|

937
00:28:36,210 --> 00:28:37,800
0,300 480,840 840,1050 1050,1350 1350,1590
so we're not going {to,update}
所以我们不会直接更新位图块，

938
00:28:37,800 --> 00:28:39,450
0,330 330,510 510,750 750,1140 1140,1650
{bitmap -} block directly,| instead
|相反，我们要在右边做的唯一一件事是，

939
00:28:39,480 --> 00:28:40,500
0,120 120,510 510,660 660,840 840,1020
the only thing we're gonna

940
00:28:40,500 --> 00:28:42,240
0,210 210,300 300,420 420,840 1140,1740
do on the right is,|
|

941
00:28:42,540 --> 00:28:44,520
0,180 180,570 570,960 1110,1860 1860,1980
so here's our memory,| we
这是我们的内存，|我们的内存中有一个块，

942
00:28:44,520 --> 00:28:45,660
0,120 120,150 150,450 450,540 540,1140
have a block in memory,|
|

943
00:28:45,960 --> 00:28:46,650
0,180 180,240 240,420 420,510 510,690
is {} say the {bitmap
比如位图块，它是 45 ，

944
00:28:46,650 --> 00:28:47,900
0,210 210,750
-} block,

945
00:28:48,270 --> 00:28:50,160
0,120 120,1020 1380,1530 1530,1800 1800,1890
it's 45| and instead of
|不是把它写入 45 ，

946
00:28:50,160 --> 00:28:51,480
0,330 330,450 450,570 570,840 840,1320
writing it to {45 -},|
|

947
00:28:51,480 --> 00:28:52,440
0,210 210,330 330,720 720,870 870,960
where we normally would have
像平常我们做的那样，

948
00:28:52,440 --> 00:28:53,640
0,390 510,780 780,900 900,1050 1050,1200
done,| what we're gonna do
|我们实际上要做的是写入日志，

949
00:28:53,640 --> 00:28:54,510
0,120 120,330 330,450 450,600 600,870
is actually going to write

950
00:28:54,510 --> 00:28:56,100
0,330 330,450 450,930 1230,1470 1470,1590
into the log,| we're going
|我们把它放在这里，

951
00:28:56,100 --> 00:28:57,270
0,60 60,270 270,360 360,810 990,1170
to stick it here| and
|记住它应该是 45 ，

952
00:28:57,270 --> 00:28:58,890
0,540 540,690 690,1170 1170,1440 1440,1620
remember that definitely should go

953
00:28:58,890 --> 00:29:00,260
0,120 120,840
to 45,|
|

954
00:29:01,160 --> 00:29:02,060
0,120 120,330 330,480 480,570 570,900
we will put it there.|
我们把它放在那里。|

955
00:29:02,760 --> 00:29:03,300
0,120 120,180 180,270 270,450 450,540
And we do that with
我们对所有其他的写入也是这样做的，

956
00:29:03,300 --> 00:29:04,230
0,150 150,270 270,420 420,690 690,930
all the other writes too,|
|

957
00:29:04,260 --> 00:29:06,270
0,210 210,300 300,690 690,1470 1680,2010
so for example {we'll,put} {inode
比如，我们将 inode 块放在这里，

958
00:29:06,270 --> 00:29:09,240
0,570 570,1680 1680,2190 2340,2760 2760,2970
-} block there,| {you,know} like
|如果我没记错的话，应该是 33 ，

959
00:29:09,240 --> 00:29:11,010
0,240 240,900 900,1200 1200,1320 1320,1770
maybe {33 -} I think,

960
00:29:11,040 --> 00:29:12,750
0,180 180,210 210,510 510,1110 1410,1710
if I remember correctly| and
|我们会把它放在这里，

961
00:29:12,750 --> 00:29:13,710
0,210 210,390 390,480 480,600 600,960
we'll stick it in there|
|

962
00:29:13,770 --> 00:29:15,570
0,510 660,780 780,1140 1170,1590 1590,1800
and you know, remember that
记住这应该是 33 。

963
00:29:15,570 --> 00:29:16,200
0,240 240,360 360,420 420,540 540,630
actually has to {go -}

964
00:29:16,200 --> 00:29:17,180
0,240 240,510
to 33.|
|

965
00:29:18,320 --> 00:29:19,670
0,450 450,750 750,1080 1080,1260 1260,1350
{} So basically what we
所以我们要做的任何写入第一就是日志。

966
00:29:19,670 --> 00:29:21,380
0,300 300,600 600,990 990,1260 1260,1710
do any write his first

967
00:29:21,380 --> 00:29:22,600
0,570
log.|
|

968
00:29:24,660 --> 00:29:25,740
0,240 270,420 420,570 570,870 870,1080
And so we don't write
我们不会直接写入块的所在地，

969
00:29:25,740 --> 00:29:27,030
0,330 330,450 450,540 540,780 780,1290
directly to the home location

970
00:29:27,030 --> 00:29:27,810
0,90 90,180 180,570 570,690 690,780
of the block,| but we
|我们只是把它放在日志里。

971
00:29:27,810 --> 00:29:29,370
0,300 300,630 630,720 720,990 990,1560
just put it always a

972
00:29:29,490 --> 00:29:30,560
0,480
log.|
|

973
00:29:30,930 --> 00:29:32,130
0,180 180,240 240,420 420,870 900,1200
Then, at some point when
然后，在文件系统操作完成时，

974
00:29:32,130 --> 00:29:33,570
0,60 60,270 270,690 690,1170 1170,1440
the file system operation is

975
00:29:33,630 --> 00:29:35,520
0,510 840,1260 1260,1620 1650,1770 1770,1890
done,| {for,example} as you know,|
|比如，|

976
00:29:35,520 --> 00:29:36,900
0,210 210,570 570,840 840,1200 1200,1380
these four five writes that
我们在前面的幻灯片中看到的四五个写入在日志中，

977
00:29:36,900 --> 00:29:37,710
0,90 90,270 270,360 360,450 450,810
we saw in the previous

978
00:29:37,710 --> 00:29:39,540
0,510 840,1170 1170,1290 1290,1380 1380,1830
slides are in the log,|
|

979
00:29:39,570 --> 00:29:41,240
0,150 150,420 420,540 540,1140
we commit the operation.|
我们就提交这些操作。|

980
00:29:44,830 --> 00:29:46,030
0,510 510,660 660,750 750,1050 1050,1200
Basically what it means is
它的意思是在日志里的某个地方，

981
00:29:46,030 --> 00:29:47,470
0,360 360,450 450,540 540,1110 1230,1440
somewhere in the log,| we
|我们在一个固定的位置标记一个记录，

982
00:29:47,470 --> 00:29:49,480
0,150 150,750 750,930 930,1470 1890,2010
just record a record, you

983
00:29:49,480 --> 00:29:50,440
0,180 180,300 300,330 330,570 570,960
know in a fixed location,|
|

984
00:29:50,440 --> 00:29:51,940
0,120 120,420 420,690 690,900 900,1500
that basically says,| okay, well
这表示，|好的，日志里有 5 个日志，

985
00:29:52,210 --> 00:29:53,230
0,120 120,210 210,360 360,780 780,1020
you know there are like

986
00:29:53,230 --> 00:29:55,450
0,510 510,1140 1410,1590 1590,1680 1680,2220
five logs in the log,|
|

987
00:29:55,660 --> 00:29:57,070
0,330 330,690 690,1110 1110,1260 1260,1410
and that is you know
这就是一组写入的日志。

988
00:29:57,070 --> 00:29:59,260
0,1140 1170,1650 1650,1860 1860,1950 1950,2190
the log, set of log

989
00:29:59,260 --> 00:30:00,200
0,60 60,540
the writes.|
|

990
00:30:01,720 --> 00:30:02,830
0,120 120,540 570,690 690,750 750,1110
And then you know when
然后，当我们将所有写入放在磁盘上时，

991
00:30:02,830 --> 00:30:04,600
0,120 120,330 330,660 660,1230 1290,1770
we have all the writes

992
00:30:04,600 --> 00:30:06,430
0,600 600,810 810,1320 1350,1650 1650,1830
stably on disk,| we're going
|我们要安装它们，被称为安装阶段。

993
00:30:06,430 --> 00:30:07,900
0,60 60,270 270,840 1080,1290 1290,1470
to actually install them, was

994
00:30:07,900 --> 00:30:09,780
0,240 240,330 330,900 900,1410
called the installation phase.|
|

995
00:30:10,470 --> 00:30:11,460
0,210 210,360 360,510 510,720 720,990
And really what that means
它的意思是，

996
00:30:11,460 --> 00:30:13,410
0,420 510,660 660,1020 1050,1830 1860,1950
is,| we're gonna move you
|我们要把这些日志从日志移动到它们的原位置，

997
00:30:13,410 --> 00:30:14,370
0,120 120,360 360,720 720,870 870,960
know these logs from the

998
00:30:14,370 --> 00:30:15,630
0,390 390,480 480,630 630,810 810,1260
log to their home location,|
|

999
00:30:15,630 --> 00:30:16,440
0,180 180,270 270,480 480,630 630,810
so we know this one
我们知道这个到 45 ，

1000
00:30:16,440 --> 00:30:17,520
0,180 180,240 240,330 330,450 450,1080
has to go to 45,|
|

1001
00:30:17,520 --> 00:30:18,060
0,120 120,240 240,390 390,450 450,540
so we put it at
所以我们把它放到 45 ，

1002
00:30:18,060 --> 00:30:19,200
0,630 630,780 780,960 960,1080 1080,1140
45,| this one has to
|这个必须是 33 ，

1003
00:30:19,200 --> 00:30:20,850
0,90 90,210 210,480 480,960 1050,1650
go to {33 -},| {we,put,it}
|我们把它放到 33 ，以此类推。

1004
00:30:20,850 --> 00:30:22,700
0,120 120,660 690,990 990,1410
to 33, etc etc.|
|

1005
00:30:23,420 --> 00:30:24,710
0,300 300,540 540,660 660,1110 1140,1290
And once we're done,| you
一旦我们完成了，|我们就可以清理日志了，

1006
00:30:24,710 --> 00:30:25,640
0,120 120,450 450,540 540,660 660,930
know basically we can clean

1007
00:30:25,640 --> 00:30:27,350
0,90 90,720 1050,1320 1320,1650 1650,1710
the log| and cleaning the
|清理日志，

1008
00:30:27,350 --> 00:30:28,420
0,570
log,|
|

1009
00:30:29,190 --> 00:30:31,200
0,570 660,1170 1170,1290 1290,1920 1920,2010
{} basically you're rewriting, you
就是重写，把这个 5 设置为 0 。

1010
00:30:31,200 --> 00:30:32,670
0,240 270,600 600,870 870,990 990,1470
know basically setting this five

1011
00:30:32,670 --> 00:30:33,760
0,180 180,570
to zero.|
|

1012
00:30:34,460 --> 00:30:36,950
0,240 240,420 420,600 600,1050 1290,2490
And that is a basic
这是基本的计划。

1013
00:30:36,950 --> 00:30:37,900
0,420
plan.|
|

1014
00:30:38,640 --> 00:30:39,570
0,150 150,390 390,480 480,630 630,930
And why is this plan
为什么这个计划是好的，

1015
00:30:39,570 --> 00:30:40,980
0,420 450,810 810,960 960,1140 1140,1410
good,| well, let's think about
|好的，让我们想一想。

1016
00:30:40,980 --> 00:30:41,760
0,210
it.|
|

1017
00:30:41,820 --> 00:30:43,740
0,300 300,480 480,660 660,1410
Let's say we crash
假设我们在这里之前崩溃，会发生什么。

1018
00:30:43,740 --> 00:30:45,220
0,420 420,900
before here,

1019
00:30:45,920 --> 00:30:47,320
0,300 300,450 450,840
what would happen.|
|

1020
00:30:50,900 --> 00:30:52,400
0,120 120,270 270,720 870,1320 1320,1500
So let me hold that
所以让我暂且不提这个问题，

1021
00:30:52,400 --> 00:30:53,570
0,360 390,570 570,690 690,960 960,1170
question,| let me actually talk
|让我在提问之前讨论一件事。

1022
00:30:53,570 --> 00:30:55,610
0,210 210,420 420,630 630,1260 1530,2040
about one thing before asking

1023
00:30:55,610 --> 00:30:56,640
0,60 60,450
the question.|
|

1024
00:30:57,710 --> 00:30:59,880
0,210 210,360 360,870 900,1680
Let's say we crash
假设我们崩溃了，并且重新启动，

1025
00:31:00,040 --> 00:31:02,050
0,750 750,1110 1110,1260 1260,1410 1410,2010
{} and so we reboot,|
|

1026
00:31:02,470 --> 00:31:03,880
0,360 360,510 510,600 600,1140 1170,1410
and on the reboot, there's
在重新启动时，文件系统做了什么，

1027
00:31:03,880 --> 00:31:05,980
0,840 1230,1440 1440,1530 1530,1800 1800,2100
basically what the file system

1028
00:31:05,980 --> 00:31:07,040
0,600
does,|
|

1029
00:31:07,280 --> 00:31:08,120
0,150 150,360 360,450 450,540 540,840
it looks at the commit
它查看提交记录，

1030
00:31:08,120 --> 00:31:09,200
0,510
record,|
|

1031
00:31:09,900 --> 00:31:10,830
0,330 330,480 480,540 540,840 840,930
sees what the value of
查看提交记录的值，

1032
00:31:10,830 --> 00:31:12,660
0,90 90,360 360,720 720,1080 1500,1830
the commit record is,| {if,it,is}
|如果是 0 ，什么都不做，在我们的简单方案中。

1033
00:31:12,660 --> 00:31:13,960
0,720
zero,

1034
00:31:14,050 --> 00:31:15,640
0,210 210,420 420,990
{you,know} do nothing

1035
00:31:15,790 --> 00:31:17,700
0,180 180,330 330,630 630,1470
in our simple scheme.|
|

1036
00:31:18,560 --> 00:31:19,880
0,360 360,480 480,630 630,1020 1050,1320
And if it's {} {bigger,to}
如果它大于 0 ，

1037
00:31:19,880 --> 00:31:20,990
0,420 420,570 570,870 870,1020 1020,1110
0,| we know that there
|我们知道日志中有一些块，

1038
00:31:20,990 --> 00:31:21,980
0,60 60,450 450,810 810,900 900,990
are basically blocks in the

1039
00:31:21,980 --> 00:31:23,300
0,390 390,570 570,870 870,960 960,1320
log| that need to be
|需要被安装。

1040
00:31:23,300 --> 00:31:24,720
0,300 300,960
actually installed.|
|

1041
00:31:24,720 --> 00:31:26,130
0,270 270,420 420,840 840,1110 1110,1410
And we apparently didn't finish
显然我们还没有完成安装，

1042
00:31:26,130 --> 00:31:28,050
0,60 60,810 990,1230 1230,1350 1350,1920
the installation,| {} we crashed
|我们在提交之后崩溃了，

1043
00:31:28,050 --> 00:31:29,100
0,60 60,150 150,510 510,570 570,1050
you know after the commit,|
|

1044
00:31:29,100 --> 00:31:30,540
0,210 210,570 570,930 930,1020 1020,1440
but before cleaning the log,|
但是在清理日志之前，|

1045
00:31:30,750 --> 00:31:32,820
0,150 150,480 480,1080 1110,1500 1500,2070
so basically we {re-install -},|
所以我们重新安装，|

1046
00:31:37,510 --> 00:31:38,860
0,180 180,420 420,720 720,1230 1230,1350
and after we re-install, we
重新安装之后，我们清理日志。

1047
00:31:38,860 --> 00:31:40,180
0,240 240,330 330,690
clean the log.|
|

1048
00:31:43,990 --> 00:31:45,200
0,720
Okay?|
好的?|

1049
00:31:45,290 --> 00:31:47,540
0,630 990,1260 1260,1680 1680,1800 1800,2250
And this scheme is good,|
而且这个方案是好的，|

1050
00:31:47,930 --> 00:31:50,300
0,1200 1200,1350 1350,1620 1620,2160 2160,2370
because it actually ensures that
因为它确保了无论崩溃发生在哪里，

1051
00:31:50,300 --> 00:31:51,170
0,90 90,300 300,480 480,540 540,870
no matter where the crash

1052
00:31:51,170 --> 00:31:53,510
0,570 660,930 930,1380 1380,2100 2100,2340
happens,| we're either install all
|我们要么安装了所有的写入块，

1053
00:31:53,510 --> 00:31:54,350
0,90 90,390 390,480 480,570 570,840
the blocks of the writes|
|

1054
00:31:54,350 --> 00:31:55,280
0,150 150,270 270,570 570,840 840,930
or we install none of
要么一个都没有安装，

1055
00:31:55,280 --> 00:31:56,630
0,210 510,750 750,840 840,960 960,1350
them,| but we were never
|但是我们从来不会进入，

1056
00:31:56,630 --> 00:31:58,640
0,930 1020,1500 1500,1620 1620,1890 1890,2010
into,| we will never end
|我们永远不会处于一种情况，

1057
00:31:58,640 --> 00:31:59,930
0,120 120,210 210,510 510,990 990,1290
up in a situation| where
|我们安装了一些，而不是所有的写入。

1058
00:31:59,930 --> 00:32:00,950
0,150 150,540 540,810 810,930 930,1020
we installed some of the

1059
00:32:00,950 --> 00:32:02,180
0,450 630,840 840,990 990,1140 1140,1230
writes, but not all of

1060
00:32:02,180 --> 00:32:02,780
0,240
them.|
|

1061
00:32:02,950 --> 00:32:04,180
0,270 270,360 360,630 630,1050 1050,1230
Just to see why this
为了弄清为什么这是真的，

1062
00:32:04,180 --> 00:32:05,110
0,90 90,390 390,570 570,870 870,930
is true,| let's consider a
|让我们来考虑几个可能崩溃的情况。

1063
00:32:05,110 --> 00:32:06,310
0,210 210,600 600,810 810,1050 1050,1200
couple cases where things could

1064
00:32:06,310 --> 00:32:07,360
0,540
crash.|
|

1065
00:32:07,930 --> 00:32:09,220
0,360 390,600 600,750 750,1110 1110,1290
So things could crash and
所以在一到二之间崩溃，会发生什么，

1066
00:32:09,220 --> 00:32:10,390
0,270 270,450 450,570 570,930 960,1170
between one and two, what

1067
00:32:10,390 --> 00:32:11,440
0,120 120,510
will happen,|
|

1068
00:32:16,660 --> 00:32:17,980
0,360 390,630 630,1020 1020,1110 1110,1320
in what situation do we
我们会到达什么情况。

1069
00:32:17,980 --> 00:32:19,000
0,180 180,570
end up.|
|

1070
00:32:23,020 --> 00:32:25,090
0,720 720,810 810,1260 1290,1440 1440,2070
Situation in which on recovery,
在恢复过程中，我们什么都不做，

1071
00:32:25,090 --> 00:32:26,500
0,120 120,270 270,900 900,1200 1200,1410
we do nothing| and that's
|这是可以的，因为没有任何内容写入文件系统。

1072
00:32:26,500 --> 00:32:28,740
0,360 360,990 1020,1560
okay, because {}

1073
00:32:28,800 --> 00:32:29,910
0,420 420,600 600,750 750,1020 1020,1110
nothing has been written to

1074
00:32:29,910 --> 00:32:32,940
0,150 150,390 390,810 1680,2760 2760,3030
the file system.| {Yeah,exactly},| so
|是的，就是这样，|所以这就是我们什么都不做的情况，

1075
00:32:32,970 --> 00:32:33,810
0,270 270,450 450,510 510,750 750,840
this is the case where

1076
00:32:33,810 --> 00:32:35,760
0,660 930,1440 1470,1650 1650,1830 1830,1950
basically we we just do

1077
00:32:35,760 --> 00:32:37,230
0,360 510,690 690,930 930,1140 1140,1470
nothing,| you know as if
|就像这个系统调用没有执行一样，

1078
00:32:37,230 --> 00:32:38,550
0,90 90,360 360,690 690,990 990,1320
the system call basically never

1079
00:32:38,550 --> 00:32:40,260
0,480 600,930 930,1260 1260,1320 1320,1710
executed,| because if the failure
|因为如果故障发生得稍早一点，

1080
00:32:40,260 --> 00:32:42,270
0,300 300,930 930,1500 1500,1710 1710,2010
happened slightly earlier,| right, before
|在文件系统调用开始之前。

1081
00:32:42,270 --> 00:32:43,590
0,90 90,330 330,600 600,840 840,1320
the file system calls started.|
|

1082
00:32:44,240 --> 00:32:45,380
0,120 120,210 210,360 360,720 720,1140
And so that's perfectly okay,
所以这完全没问题，这是可以接受的。

1083
00:32:45,440 --> 00:32:46,800
0,180 180,810
that's acceptable.|
|

1084
00:32:47,040 --> 00:32:49,020
0,210 210,390 390,930 1050,1770 1770,1980
Okay, what happens, {} if
好的，如果我们在提交之后安装之前崩溃会怎么样？

1085
00:32:49,020 --> 00:32:50,460
0,900
we

1086
00:32:50,750 --> 00:32:53,180
0,720 720,1020 1020,1920
crash, okay, between

1087
00:32:53,330 --> 00:32:55,730
0,390 390,1050 1110,1650 1650,1800 1800,2400
after committing before being installed?|
|

1088
00:32:58,310 --> 00:32:59,600
0,240 240,330 330,570 570,1140 1140,1290
Then you'll just redo all
然后，你只需要重做所有安装，

1089
00:32:59,600 --> 00:33:00,830
0,150 150,720 720,840 840,1050 1050,1230
the installs,| so you'll kind
|这样就可以恢复到正确的状态。

1090
00:33:00,830 --> 00:33:02,270
0,90 90,540 540,630 630,1050 1050,1440
of restore the correct state.|
|

1091
00:33:02,870 --> 00:33:04,430
0,330 360,720 810,1320 1320,1500 1500,1560
Yeah, so exactly,| so at
是啊，确实如此，|在这一点上，

1092
00:33:04,430 --> 00:33:05,480
0,150 150,420 420,660 660,840 840,1050
that point correct,| {} we
|我们知道所有数据块都在日志中，

1093
00:33:05,480 --> 00:33:06,830
0,240 240,360 360,570 570,960 960,1350
have, we know there are

1094
00:33:06,830 --> 00:33:08,510
0,240 240,360 360,1140 1140,1410 1410,1680
all the blocks are in

1095
00:33:08,510 --> 00:33:09,620
0,120 120,600 630,750 750,990 990,1110
the log| and they'll be
|它们都会被写下来，因为我们提交了，

1096
00:33:09,620 --> 00:33:10,910
0,270 270,600 600,870 870,1020 1020,1290
all written, because we {committed

1097
00:33:10,910 --> 00:33:11,900
0,270 360,510 510,570 570,900 900,990
-},| so it must be
|所以，它是整个文件系统操作完成的情况。

1098
00:33:11,900 --> 00:33:12,620
0,60 60,360 360,450 450,510 510,720
the case that the whole

1099
00:33:12,620 --> 00:33:14,480
0,240 240,480 480,900 900,1410
file system operation finished.|
|

1100
00:33:14,630 --> 00:33:16,100
0,210 210,330 330,420 420,900 960,1470
So we can basically put
所以我们可以把它们放到它们应该在的位置。

1101
00:33:16,100 --> 00:33:17,120
0,120 120,240 240,390 390,840 840,1020
them in their location where

1102
00:33:17,120 --> 00:33:18,240
0,120 120,270 270,540
they should be.|
|

1103
00:33:18,760 --> 00:33:19,660
0,390 390,510 510,690 690,840 840,900
And then we're all in
然后我们都处于好的状态，

1104
00:33:19,660 --> 00:33:20,740
0,390 390,720 720,870 870,990 990,1080
good shape| and so in
|所以在这种情况下，所有文件，

1105
00:33:20,740 --> 00:33:21,760
0,150 150,480 480,690 690,930 930,1020
this case now all the

1106
00:33:21,760 --> 00:33:23,020
0,360 360,630 630,810 810,1020 1020,1260
file,| in this case will
|在这种情况下，就像，

1107
00:33:23,020 --> 00:33:24,620
0,150 150,330 330,660 660,990
end up as if

1108
00:33:24,680 --> 00:33:26,690
0,570 1260,1470 1470,1620 1620,1860 1860,2010
the,| it is if the
|就像文件系统调用在崩溃之前完成，

1109
00:33:26,690 --> 00:33:29,090
0,720 720,960 960,1320 1320,1500 1500,2400
file system call actually completely

1110
00:33:29,090 --> 00:33:30,710
0,270 270,540 540,600 600,1110 1170,1620
just before the crash,| there's
|没有什么区别。

1111
00:33:30,710 --> 00:33:31,900
0,150 150,690
no difference.|
|

1112
00:33:32,280 --> 00:33:33,440
0,600
Okay?|
好的？|

1113
00:33:33,820 --> 00:33:34,900
0,150 150,330 330,660 660,810 810,1080
So what happens if we
那么，如果在安装过程中崩溃会发生什么，

1114
00:33:34,900 --> 00:33:37,120
0,570 600,1230 1230,1770 1800,2040 2040,2220
crash during install| or like
|或在清理之前安装过程中，

1115
00:33:37,120 --> 00:33:38,830
0,660 660,990 990,1320 1320,1620 1620,1710
install during install before {cleaning

1116
00:33:38,830 --> 00:33:39,900
0,480
-},|
|

1117
00:33:39,930 --> 00:33:41,520
0,120 120,450 450,840 1140,1410 1410,1590
{} crash here.| In this
在这里崩溃。|在这种情况下，

1118
00:33:41,520 --> 00:33:43,080
0,510 750,930 930,1140 1140,1470 1470,1560
case,| in this case| and
|在这种情况下，|我要做第三种情况，

1119
00:33:43,080 --> 00:33:43,740
0,60 60,210 210,330 330,420 420,660
I will do the third

1120
00:33:43,740 --> 00:33:46,380
0,450 810,1200 1200,1590 1590,1980 1980,2640
case,| we'll install, during installation,
|我们安装，在安装过程中，或者在安装之前，

1121
00:33:46,380 --> 00:33:49,200
0,300 300,570 720,1620 1620,2280 2310,2820
or just before install,| after
|在安装之后清理之前。

1122
00:33:49,380 --> 00:33:51,240
0,510 510,900 900,1320
installing before cleaning.|
|

1123
00:33:51,620 --> 00:33:53,330
0,240 240,630 1020,1290 1290,1470 1470,1710
What, what what, what happened
然后会发生什么？

1124
00:33:53,330 --> 00:33:54,200
0,360
then?|
|

1125
00:33:55,420 --> 00:33:57,440
0,240 240,1440
On the.|
在。|

1126
00:33:58,110 --> 00:33:59,370
0,270 270,660 690,1020 1020,1170 1170,1260
Oh, sorry, {} on the
哦，抱歉，在下次重启时，

1127
00:33:59,370 --> 00:34:02,460
0,480 510,1290 1320,2190 2190,2370 2370,3090
next restart,| nothing has really
|什么都没有改变，

1128
00:34:02,670 --> 00:34:03,720
0,510 510,630 630,900 900,960 960,1050
changed,| in terms of the
|除了恢复进程，

1129
00:34:03,720 --> 00:34:06,090
0,480 480,1230 1410,1620 1620,2190 2220,2370
recovery process| and so we're
|我们只是重做日志。

1130
00:34:06,090 --> 00:34:06,990
0,150 150,270 270,390 390,750 750,900
just going to redo the

1131
00:34:06,990 --> 00:34:08,400
0,390 690,930 930,1050 1050,1110 1110,1410
log.| We're going to redo
|我们要重做一次日志，

1132
00:34:08,400 --> 00:34:09,180
0,90 90,360 360,570 570,660 660,780
the log again| and we're
|我们要把内容再复制一遍到各个位置，

1133
00:34:09,180 --> 00:34:11,130
0,240 240,690 690,1110 1110,1260 1260,1950
gonna copy basically the content

1134
00:34:11,190 --> 00:34:12,540
0,540 570,660 660,810 810,990 990,1350
again you know to the

1135
00:34:12,570 --> 00:34:14,130
0,540 540,780 780,1200 1290,1380 1380,1560
locations right maybe,| in fact
|我们可能要做多次，

1136
00:34:14,130 --> 00:34:14,880
0,90 90,240 240,330 330,420 420,750
we might do it multiple

1137
00:34:14,880 --> 00:34:15,780
0,510
times,|
|

1138
00:34:15,970 --> 00:34:17,280
0,150 150,270 270,750
is that okay?|
这可以吗？|

1139
00:34:24,410 --> 00:34:26,750
0,540 540,1020 1020,1320 1320,1650 1650,2340
Yes, because those are just
是的，因为这些都是写入，

1140
00:34:26,840 --> 00:34:28,200
0,870
writes,|
|

1141
00:34:28,490 --> 00:34:30,830
0,600 690,1440 1560,2010 2010,2190 2190,2340
and it's, they are to
它们在我们没有改变的特定位置，

1142
00:34:30,830 --> 00:34:32,060
0,60 60,480 480,870 870,990 990,1230
a specific location that we

1143
00:34:32,090 --> 00:34:33,200
0,570
don't

1144
00:34:33,200 --> 00:34:34,550
0,450 450,780 780,990 990,1230 1230,1350
change,| like it's written in
|就像写入日志里的那样，

1145
00:34:34,550 --> 00:34:35,690
0,90 90,450 450,570 570,660 660,1140
the log,| so we know
|所以我们知道每次应该写在哪里。

1146
00:34:36,140 --> 00:34:37,430
0,510 540,660 660,840 840,1080 1080,1290
where we should write every

1147
00:34:37,430 --> 00:34:38,520
0,630
time.|
|

1148
00:34:38,670 --> 00:34:39,660
0,240 240,540 540,720 720,870 870,990
Yeah basically every time we
是的，每次我们写的都一样的，

1149
00:34:39,660 --> 00:34:40,710
0,90 90,180 180,450 450,750 750,1050
do the same write, correct,|
|

1150
00:34:40,710 --> 00:34:41,970
0,210 210,390 390,600 600,1020 1020,1260
so let's say in block
假设在块 45 中，它的值是 10 ，

1151
00:34:41,970 --> 00:34:43,080
0,600 600,660 660,840 840,1050 1050,1110
45, you know there's the

1152
00:34:43,080 --> 00:34:44,540
0,330 330,780
value 10,|
|

1153
00:34:44,570 --> 00:34:45,410
0,270 270,480 480,600 600,660 660,840
and we're going to write
我们每次都在 45 位置写入 10

1154
00:34:45,410 --> 00:34:47,210
0,450 450,660 660,1110 1110,1590 1590,1800
10 at location 45 every

1155
00:34:47,210 --> 00:34:48,710
0,360 840,960 960,1080 1080,1410 1410,1500
time| and that's exactly what
|这正是它应该的，

1156
00:34:48,710 --> 00:34:49,970
0,90 90,210 210,570 660,960 960,1260
it should be| and {}
|而且多次重复写也不会有什么坏处。

1157
00:34:49,970 --> 00:34:51,500
0,390 390,570 570,750 750,1050 1050,1530
repeating that write multiple times

1158
00:34:51,530 --> 00:34:52,730
0,330 330,480 480,600 600,750 750,1200
doesn't really do any harm,

1159
00:34:52,760 --> 00:34:53,600
0,330
right.|
|

1160
00:34:54,160 --> 00:34:55,120
0,300 300,390 390,630 630,720 720,960
Because we're writing the same
因为我们写的是相同的值，

1161
00:34:55,120 --> 00:34:56,350
0,480 510,750 750,990 990,1140 1140,1230
value,| that actually should be
|它就应该在那里。

1162
00:34:56,350 --> 00:34:57,500
0,180 180,570
there anyway.|
|

1163
00:34:57,720 --> 00:34:59,100
0,150 150,240 240,360 360,720 720,1380
And so it's perfectly fine,|
所以这很好，|

1164
00:34:59,100 --> 00:35:00,210
0,180 180,300 300,690 720,960 960,1110
for us to do {re-installation
我们可以多次重新安装。

1165
00:35:00,210 --> 00:35:02,080
0,510 510,870 870,1380
-} multiple times.|
|

1166
00:35:03,440 --> 00:35:04,460
0,150 150,330 330,450 450,630 630,1020
Of course, we shouldn't serve
当然，在这个时间点，我们不应该执行任何其他文件系统调用，

1167
00:35:04,460 --> 00:35:05,570
0,180 180,390 390,600 600,840 840,1110
any other file system calls

1168
00:35:05,570 --> 00:35:06,320
0,60 60,210 210,510 510,690 690,750
at this particular point of

1169
00:35:06,320 --> 00:35:07,070
0,270 270,360 360,480 480,570 570,750
time,| we should do this
|我们应该在重新启动文件系统之前执行此操作，

1170
00:35:07,070 --> 00:35:08,600
0,660 660,780 780,1200 1200,1260 1260,1530
before we restart the file

1171
00:35:08,600 --> 00:35:11,480
0,480 960,1350 1350,2010 2010,2130 2130,2880
system,| but while you know
|但是，在恢复期间重新启动时，

1172
00:35:11,600 --> 00:35:13,610
0,360 360,810 810,1290 1290,1500 1500,2010
what during reboot during recovery,|
|

1173
00:35:13,610 --> 00:35:14,150
0,60 60,180 180,270 270,390 390,540
you know we can just
我们可以这样做。

1174
00:35:14,150 --> 00:35:15,400
0,90 90,450 480,840
do this, right.|
|

1175
00:35:16,080 --> 00:35:17,070
0,270 270,420 420,510 510,780 780,990
Another way of saying, that
也就是说，安装是幂等的，

1176
00:35:17,070 --> 00:35:18,510
0,120 120,270 270,840 840,930 930,1440
is that installation is basically

1177
00:35:18,510 --> 00:35:19,710
0,300 300,750 780,930 930,1050 1050,1200
{idempotent -},| you can just
|你可以多次执行它，

1178
00:35:19,710 --> 00:35:21,210
0,330 330,420 420,780 780,1020 1020,1500
execute it many many times|
|

1179
00:35:21,450 --> 00:35:22,470
0,180 180,300 300,480 480,540 540,1020
and will have the same
并产生相同的效果。

1180
00:35:22,500 --> 00:35:24,060
0,600 600,1080
effect yet.|
|

1181
00:35:25,780 --> 00:35:28,210
0,300 300,720 720,990 990,1470 1860,2430
{} Question about that? {}|
关于这个的问题？|

1182
00:35:29,720 --> 00:35:31,250
0,450 450,570 570,1080 1080,1230 1230,1530
Because the interface is just
因为接口只是读和写，

1183
00:35:31,250 --> 00:35:32,330
0,300 300,450 450,810 810,990 990,1080
read and write,| if we
|如果我们有追加，这就不安全了，对吧？

1184
00:35:32,330 --> 00:35:34,430
0,330 330,1140 1230,1560 1560,1950 1950,2100
{had,an} append, {} this would

1185
00:35:34,430 --> 00:35:36,860
0,270 270,810 960,1470 1470,1830
not be safe, right?|
|

1186
00:35:36,980 --> 00:35:39,290
0,270 270,540 540,1440 1440,2100 2130,2310
Yeah yeah, this [],| you
是的，这个[]，|你也可以使追加变得安全，

1187
00:35:39,290 --> 00:35:40,130
0,120 120,330 330,360 360,570 570,840
can make {append -} safe

1188
00:35:40,130 --> 00:35:42,350
0,480 480,810 870,1170 1170,1800 1800,2220
too,| a more fancy logging
|一种更复杂的日志方案，

1189
00:35:42,350 --> 00:35:43,370
0,360 360,480 480,570 570,720 720,1020
schemes,| but for this particular
|但是对于这个的日志方案，

1190
00:35:43,370 --> 00:35:44,660
0,300 300,750 750,1050 1050,1200 1200,1290
logging scheme,| we don't have
|我们不必担心这个。

1191
00:35:44,660 --> 00:35:45,980
0,90 90,300 300,480 480,750
to worry about that.|
|

1192
00:35:46,620 --> 00:35:47,700
0,120 120,330 330,630 630,810 810,1080
In fact, in some sense,
在某种意义上，追加是文件系统级操作，

1193
00:35:47,700 --> 00:35:49,140
0,90 90,510 510,870 870,1140 1140,1440
the {append,is} file system level

1194
00:35:49,140 --> 00:35:50,640
0,660 750,900 900,960 960,1170 1170,1500
operation| and at that level
|在这个层面上，我们可以将其作为主题，

1195
00:35:50,640 --> 00:35:51,360
0,90 90,210 210,360 360,630 660,720
we can make it {}

1196
00:35:51,360 --> 00:35:54,240
0,960 1380,1950 1950,2460 2460,2580 2580,2880
a topic| using the logging
|使用我们在这里的日志方案。

1197
00:35:54,240 --> 00:35:55,500
0,240 240,360 360,750
scheme, that we're,

1198
00:35:55,870 --> 00:35:57,120
0,180 180,270 270,450 450,720
what we have here.|
|

1199
00:35:58,280 --> 00:35:59,940
0,150 150,510 570,780 780,1080
I see, thank you.|
我明白了，谢谢。|

1200
00:35:59,940 --> 00:36:00,960
0,90 90,390 390,480 480,570 570,1020
I also have a question,|
我也有一个问题，|

1201
00:36:01,560 --> 00:36:02,880
0,450 450,570 570,960 960,1200 1200,1320
what would happen if the
如果在提交时文件系统崩溃，会发生什么情况，

1202
00:36:02,880 --> 00:36:04,920
0,240 240,600 600,1230 1500,1890 1890,2040
file system crashed while you

1203
00:36:04,920 --> 00:36:05,910
0,90 90,480 480,600 600,720 720,990
are committing,| so you want
|你希望执行多个写入，

1204
00:36:05,910 --> 00:36:08,250
0,390 420,870 870,1350 1350,1890 2190,2340
to execute multiple writes| and
|然后你只提交其中的一半。

1205
00:36:08,250 --> 00:36:09,360
0,120 120,240 240,480 480,900 900,1110
then you only commit like

1206
00:36:09,360 --> 00:36:10,580
0,270 270,390 390,750
half of them.|
|

1207
00:36:11,480 --> 00:36:12,320
0,270 270,480 480,630 630,720 720,840
Yeah okay, so can you
好的，你能说大声点吗，

1208
00:36:12,320 --> 00:36:12,980
0,210 210,330 330,360 360,540 540,660
speak up a little bit

1209
00:36:12,980 --> 00:36:14,180
0,210 210,630 630,720 720,1110 1110,1200
more,| because your volume is
|因为你的声音太小了。

1210
00:36:14,180 --> 00:36:16,190
0,360 450,570 570,780 780,1290 1560,2010
low.| Oh, yeah sorry,| so
|哦，是的，抱歉，|如果你想一次提交多个写入，

1211
00:36:16,400 --> 00:36:18,380
0,240 240,360 360,720 720,1260 1500,1980
if you wanted to like

1212
00:36:18,380 --> 00:36:20,810
0,420 420,1140 1200,1890 1920,2100 2100,2430
commit multiple writes at once,|
|

1213
00:36:20,810 --> 00:36:21,800
0,150 150,360 360,420 420,840 840,990
like in an {atomic -}
比如以原子方式，

1214
00:36:21,800 --> 00:36:24,410
0,300 330,750 750,1350 1380,1830 1830,2610
way,| but your system crashes
|但是你的系统在提交的过程中崩溃了，

1215
00:36:24,560 --> 00:36:25,700
0,180 180,240 240,570 570,660 660,1140
in the middle of committing,|
|

1216
00:36:25,700 --> 00:36:26,810
0,150 150,330 330,600 600,930 930,1110
so you are only able
所以你只能提交一半的写入，

1217
00:36:26,810 --> 00:36:28,190
0,150 150,510 510,870 870,1290 1290,1380
to commit like half of

1218
00:36:28,190 --> 00:36:30,140
0,90 90,630 780,1590 1590,1710 1710,1950
the writes,| what would happen
|在那种情况下会发生什么？

1219
00:36:30,140 --> 00:36:31,520
0,60 60,270 270,750 930,1170 1170,1380
in that instance?| {} Okay,
|好的，有一点很重要，

1220
00:36:31,520 --> 00:36:32,810
0,240 240,750 750,810 810,990 990,1290
so there's a very important

1221
00:36:32,810 --> 00:36:33,500
0,180 180,390 390,570 570,630 630,690
point,| {I'm,glad - -} you
|我很高兴你问了这个问题。

1222
00:36:33,500 --> 00:36:34,790
0,150 150,210 210,660 690,960 960,1290
ask the question.| So first
|所以首先，

1223
00:36:34,790 --> 00:36:35,580
0,90 90,480
of all,|
|

1224
00:36:35,640 --> 00:36:38,700
0,720 1080,1650 1680,1920 1920,2460 2790,3060
the the you commit, in
你提交，提交操作在这里，

1225
00:36:38,700 --> 00:36:40,080
0,300 300,420 420,720 720,1140 1140,1380
writing this commit operation here,

1226
00:36:40,080 --> 00:36:41,610
0,240 240,540 540,750 750,1020 1020,1530
correct,| this {you,know} step two,|
|这是第二步，|

1227
00:36:41,940 --> 00:36:43,140
0,180 180,390 390,750 750,930 930,1200
you only execute that commit
你提交这些操作，

1228
00:36:43,140 --> 00:36:45,090
0,690 720,1200 1200,1290 1290,1530 1530,1950
operation| after you've already logged
|只在你已经记录了所有写入后，

1229
00:36:45,090 --> 00:36:46,020
0,180 180,300 300,660 660,810 810,930
all the writes,| that you
|你打算执行，对吧。

1230
00:36:46,020 --> 00:36:47,670
0,120 120,480 480,600 600,1170 1290,1650
were planning to execute, right.|
|

1231
00:36:48,660 --> 00:36:49,710
0,450 480,660 660,750 750,960 960,1050
So at the point you
所以，在你提交时，

1232
00:36:49,710 --> 00:36:50,850
0,120 120,180 180,630 780,1020 1020,1140
do to commit,| all the
|所有写入都在日志中。

1233
00:36:50,850 --> 00:36:51,900
0,300 300,420 420,510 510,600 600,1050
writes are in the log.|
|

1234
00:36:53,320 --> 00:36:54,600
0,270 270,750
And so,
因此，提交操作本身

1235
00:36:54,660 --> 00:36:56,610
0,180 180,480 480,900 900,1620 1650,1950
the commit operation itself| is
|是一个有趣的问题，在那里发生了什么。

1236
00:36:56,610 --> 00:36:57,930
0,90 90,360 360,870 870,1050 1050,1320
an interesting question, what happens

1237
00:36:57,930 --> 00:37:00,210
0,450 690,1170 1290,1590 1590,1740 1740,2280
there.| So, {} the way
|所以，我在幻灯片上标出，

1238
00:37:00,210 --> 00:37:01,950
0,540 570,1020 1020,1110 1110,1620 1620,1740
the way I indicated this

1239
00:37:01,950 --> 00:37:03,420
0,90 90,270 270,630 690,1050 1050,1470
on slide,| like commit operation
|提交操作写入一个块，

1240
00:37:03,420 --> 00:37:05,180
0,240 240,300 300,750 750,1260
writes a single block,|
|

1241
00:37:05,210 --> 00:37:06,320
0,210 210,270 270,600 600,990 990,1110
like a single sector on
磁盘中的一个扇区。

1242
00:37:06,320 --> 00:37:07,300
0,90 90,540
the disk.|
|

1243
00:37:07,360 --> 00:37:09,130
0,450 450,570 570,990 990,1620 1620,1770
And the standard assumption that
文件系统的标准假设是

1244
00:37:09,130 --> 00:37:11,200
0,270 270,720 720,1200 1320,1650 1650,2070
file systems make is that|
|

1245
00:37:11,200 --> 00:37:12,800
0,180 180,1080
a single
单个块写入或单个扇区写入是*原子*操作。

1246
00:37:12,800 --> 00:37:14,510
0,480 480,900 900,990 990,1260 1260,1710
block write or single sector

1247
00:37:14,510 --> 00:37:16,310
0,390 510,750 750,840 840,1230 1230,1800
write is an atomic operation.|
|

1248
00:37:17,060 --> 00:37:18,740
0,660 660,1020 1050,1320 1320,1470 1470,1680
Meaning that if you write
这意味着如果你写入它，

1249
00:37:18,740 --> 00:37:20,000
0,240 270,390 390,750 750,1110 1110,1260
it,| the whole sector will
|将写入整个扇区，或者任何扇区都不写入。

1250
00:37:20,000 --> 00:37:21,170
0,120 120,570 600,990 990,1080 1080,1170
be written, {or,none} of the

1251
00:37:21,170 --> 00:37:22,160
0,330 330,480 480,570 570,840 840,990
sector will be written.| So
|所以，扇区永远不会被部分写入。

1252
00:37:22,160 --> 00:37:23,060
0,90 90,330 330,450 450,780 780,900
the sector will never be

1253
00:37:23,060 --> 00:37:24,420
0,270 270,840
written partially.|
|

1254
00:37:24,940 --> 00:37:25,870
0,150 150,270 270,450 450,870 870,930
And so there's always you
所以在特定扇区总是有效数据，

1255
00:37:25,870 --> 00:37:27,580
0,270 270,840 840,1020 1020,1410 1410,1710
know clearly {you,know} valid data

1256
00:37:27,580 --> 00:37:29,200
0,150 150,330 330,660 660,1110 1410,1620
in that particular sector| and
|所以这个提交操作写入日志头，

1257
00:37:29,200 --> 00:37:31,270
0,180 180,630 630,1230 1320,1920 1920,2070
so basically this operation that

1258
00:37:31,270 --> 00:37:32,770
0,270 270,750 750,1080 1080,1170 1170,1500
commit operation writing the log

1259
00:37:32,770 --> 00:37:34,840
0,450 810,1080 1080,1590 1590,2010 2010,2070
header,| {} is writing the
|写入提交记录是真正的提交操作，

1260
00:37:34,840 --> 00:37:36,280
0,240 240,510 510,810 930,1170 1170,1440
commit record is the real

1261
00:37:36,280 --> 00:37:38,650
0,270 270,840 1140,1320 1320,1590 1590,2370
commit operation,| if that succeeds,
|如果成功，并且提交头中是 5 ，

1262
00:37:39,040 --> 00:37:40,420
0,270 270,510 510,930 930,1080 1110,1380
and there's basically {} say

1263
00:37:40,420 --> 00:37:41,560
0,60 60,630 660,810 810,870 870,1140
of five in the commit

1264
00:37:41,560 --> 00:37:42,880
0,450 600,750 750,840 840,960 960,1320
header,| you know we know
|我们知道日志中有 5 个块，

1265
00:37:42,880 --> 00:37:44,140
0,180 180,270 270,360 360,810 810,1260
that there are five blocks

1266
00:37:44,140 --> 00:37:45,640
0,240 240,750 780,1290 1290,1380 1380,1500
in the log| and we
|我们必须重新安装这 5 个块。

1267
00:37:45,640 --> 00:37:46,870
0,150 150,240 240,750 750,990 990,1230
have to reinstall those five

1268
00:37:46,870 --> 00:37:47,820
0,510
blocks.|
|

1269
00:37:48,600 --> 00:37:50,340
0,390 390,480 480,720 720,1230 1260,1740
If the commit header didn't
如果提交头没有到达磁盘，

1270
00:37:50,340 --> 00:37:52,050
0,180 180,240 240,330 330,840 1200,1710
make it to disk,| then
|则该值仍为 0 ，

1271
00:37:52,050 --> 00:37:53,550
0,90 90,390 390,720 720,840 840,1500
the value {will,still} be 0|
|

1272
00:37:53,940 --> 00:37:54,780
0,240 240,330 330,540 540,720 720,840
and we'll just treat it
我们就当那个事务从未发生过。

1273
00:37:54,780 --> 00:37:55,830
0,240 240,390 390,540 540,870 870,1050
as if that transaction never

1274
00:37:55,830 --> 00:37:56,740
0,420
happened.|
|

1275
00:37:59,010 --> 00:38:00,180
0,300 300,660
Thank you.|
谢谢。|

1276
00:38:00,300 --> 00:38:02,310
0,210 210,510 510,1140 1170,1830 1830,2010
And the key rule that
你提到的关键规则，

1277
00:38:02,310 --> 00:38:03,360
0,120 120,270 270,330 330,690 690,1050
you're sort of hinting at,|
|

1278
00:38:03,420 --> 00:38:04,740
0,240 240,720 720,1020 1020,1080 1080,1320
{} that has to be
那必须是真的，

1279
00:38:04,770 --> 00:38:06,540
0,840 930,1290 1290,1380 1380,1620 1620,1770
true,| {} is something what's
|是所谓的预写规则，

1280
00:38:06,540 --> 00:38:08,430
0,180 180,300 300,690 690,1140 1530,1890
called the write-ahead rule,| which
|意味着日志系统不能安装写入，

1281
00:38:08,430 --> 00:38:10,590
0,360 360,720 960,1200 1200,1530 1530,2160
means that a logging system

1282
00:38:10,620 --> 00:38:13,290
0,480 480,960 960,1470 1530,2340 2370,2670
cannot install writes,| until all
|直到所有写入到日志中。

1283
00:38:13,290 --> 00:38:15,750
0,120 120,480 480,930 930,1740 1740,2460
the writes into, are {into,log}.|
|

1284
00:38:20,000 --> 00:38:21,200
0,120 120,450 450,720 720,1020 1020,1200
{Any -} more questions about
关于这个基本方案，有什么问题吗？

1285
00:38:21,200 --> 00:38:22,430
0,120 120,240 240,330 330,780 780,1230
this sort of basic plan?|
|

1286
00:38:28,770 --> 00:38:29,880
0,660
Okay?|
好的？|

1287
00:38:33,270 --> 00:38:34,480
0,690

1288
00:38:36,530 --> 00:38:37,600
0,270 270,510
Let's see.|
让我们看看。|

1289
00:38:42,300 --> 00:38:43,770
0,180 180,360 360,600 630,900 900,1470
So what I want to,|
所以我想，|

1290
00:38:44,730 --> 00:38:46,590
0,210 210,270 270,690 690,1230 1320,1860
there are many many different
有很多不同版本的日志方案，

1291
00:38:46,590 --> 00:38:48,090
0,360 360,480 480,840 840,1320 1320,1500
versions of logging schemes| and
|我在这里画了一个非常简单的图，

1292
00:38:48,090 --> 00:38:49,320
0,180 180,630 630,840 840,1170 1170,1230
I sketched out here a

1293
00:38:49,320 --> 00:38:51,210
0,240 240,570 570,1020 1320,1770 1770,1890
very simple one,| {} you
|这完全没问题。

1294
00:38:51,210 --> 00:38:52,530
0,60 60,270 360,780 780,1260 1260,1320
know it's perfectly fine.| You
|有些方案是推迟清理日志，

1295
00:38:52,530 --> 00:38:53,820
0,120 120,270 270,630 630,840 840,1290
know there schemes where basically

1296
00:38:53,820 --> 00:38:55,260
0,480 510,930 930,1020 1020,1110 1110,1440
the cleaning of the log

1297
00:38:55,260 --> 00:38:57,540
0,120 120,870 1170,1530 1530,2160 2160,2280
is postponed,| {} installation is
|安装被推迟，

1298
00:38:57,540 --> 00:38:59,670
0,390 390,600 600,1140 1320,1920 1920,2130
postponed until later,| {} but
|但我将运行这个非常简单的方案，

1299
00:38:59,670 --> 00:39:00,660
0,120 120,330 330,390 390,810 810,990
I'm going to run sort

1300
00:39:00,660 --> 00:39:02,790
0,90 90,390 390,690 690,1440 1500,2130
of this very simple scheme,|
|

1301
00:39:03,000 --> 00:39:04,170
0,120 120,540 540,780 780,1020 1020,1170
and then next week we'll
下周我们将看到更复杂的日志协议。

1302
00:39:04,170 --> 00:39:07,050
0,300 300,540 540,1410 1440,2160 2160,2880
see more sophisticated logging protocols.|
|

1303
00:39:07,480 --> 00:39:08,710
0,210 210,330 330,510 510,780 780,1230
But all those logging protocols,
但是所有那些记录协议，都遵循这个预写规则，

1304
00:39:08,710 --> 00:39:09,580
0,240 240,420 420,630 630,810 810,870
follow this {write-ahead -} {}

1305
00:39:09,580 --> 00:39:11,350
0,270 270,600 960,1500 1500,1620 1620,1770
rule,| that before you're ready
|在你准备提交记录之前，

1306
00:39:11,350 --> 00:39:12,610
0,60 60,270 270,330 330,840 1050,1260
to commit {} record,| you
|你必须确保所有写入都在日志中。

1307
00:39:12,610 --> 00:39:13,540
0,240 240,330 330,480 480,720 720,930
have to make sure that

1308
00:39:13,540 --> 00:39:15,280
0,120 120,270 270,810 900,1470 1470,1740
all the writes are in

1309
00:39:15,280 --> 00:39:16,660
0,300 300,870
the log.|
|

1310
00:39:16,850 --> 00:39:18,100
0,750

1311
00:39:18,950 --> 00:39:19,670
0,180 180,330 330,510 510,540 540,720
But then there's a lot
但是这里面有很多东西，

1312
00:39:19,670 --> 00:39:20,990
0,240 240,540 540,900 900,1140 1140,1320
of within that,| still there's
|尽管如此，仍有很大的灵活性，

1313
00:39:20,990 --> 00:39:22,490
0,90 90,330 330,420 420,1200 1200,1500
a ton of flexibility| in
|在设计特定日志协议方面。

1314
00:39:22,520 --> 00:39:25,220
0,690 690,1110 1110,1590 1590,2010 2010,2700
designing a particular logging protocols

1315
00:39:25,550 --> 00:39:26,760
0,360 360,780
typically called.|
|

1316
00:39:27,460 --> 00:39:28,600
0,390 480,630 630,840 840,1080 1080,1140
Okay, I'm gonna look a
好的，我来看一下，

1317
00:39:28,600 --> 00:39:30,280
0,180 180,870 900,1200 1200,1380 1380,1680
little bit,| how this then
|这是如何在 xv6 中表现出来的，

1318
00:39:30,280 --> 00:39:32,740
0,330 330,900 900,1350 1350,1710 1710,2460
is manifest itself in xv6,|
|

1319
00:39:32,740 --> 00:39:34,060
0,270 270,510 510,720 720,990 990,1320
{you,know} as a case study
作为一个案例研究，让事情变得更具体。

1320
00:39:34,060 --> 00:39:34,810
0,90 90,180 180,330 330,510 510,750
and to make things really

1321
00:39:34,810 --> 00:39:35,800
0,480
concrete.|
|

1322
00:39:40,000 --> 00:39:41,260
0,210 210,420 420,540 540,780 780,1260
Okay, so in {xv6 -},
好的，在 xv6 中，

1323
00:39:41,260 --> 00:39:43,060
0,330 330,480 480,630 990,1560 1560,1800
there's sort of,| {} you're
|你会看到两种类型的[]，

1324
00:39:43,060 --> 00:39:43,750
0,120 120,180 180,330 330,450 450,690
going to look at two

1325
00:39:43,750 --> 00:39:44,680
0,180 180,240 240,450 450,510 510,930
sort of piece of []

1326
00:39:44,680 --> 00:39:45,940
0,120 120,240 240,720 870,990 990,1260
{} you will,| the stuff
|在磁盘上的东西，

1327
00:39:45,940 --> 00:39:47,170
0,120 120,210 210,510 510,720 720,1230
that is actually on disk,|
|

1328
00:39:48,080 --> 00:39:49,670
0,180 180,480 480,1140 1170,1410 1410,1590
and that's you know things
和在内存中的东西，

1329
00:39:49,670 --> 00:39:51,160
0,120 120,330 330,420 420,870
that are in memory,|
|

1330
00:39:52,410 --> 00:39:53,660
0,390 390,870

1331
00:39:55,220 --> 00:39:57,230
0,150 150,480 480,930 930,1170 1170,2010
{in-memory -} contents will disappear,|
在内存中的内容会丢失，|

1332
00:39:57,230 --> 00:39:58,160
0,360 390,510 510,660 660,810 810,930
on the way we should
在此过程中，我们应该考虑的是，

1333
00:39:58,160 --> 00:39:59,000
0,180 180,420 420,540 540,690 690,840
think about it is that|
|

1334
00:39:59,000 --> 00:40:01,010
0,420 420,780 780,870 870,1500 1500,2010
in-memory content will disappear on
内存中的内容会在崩溃或断电时消失。

1335
00:40:01,010 --> 00:40:02,450
0,60 60,510 510,720 720,1020 1020,1440
a crash or power failure.|
|

1336
00:40:04,660 --> 00:40:06,840
0,720 1020,1650
And the
xv6 日志的结构一直都非常简单，

1337
00:40:07,040 --> 00:40:08,900
0,510 510,630 630,780 780,1260 1260,1860
structure of the xv6 log

1338
00:40:08,930 --> 00:40:10,660
0,360 360,1200
as always

1339
00:40:10,810 --> 00:40:12,540
0,510 510,1200
pretty simple,|
|

1340
00:40:12,600 --> 00:40:15,270
0,810 810,1440 1710,1950 1950,2250 2250,2670
there's actually, we have one
我们在开头有一个块， header 块，

1341
00:40:15,270 --> 00:40:16,680
0,330 330,420 420,480 480,1020 1320,1410
block in the beginning, the

1342
00:40:16,680 --> 00:40:17,960
0,240 240,750
header block,|
|

1343
00:40:18,020 --> 00:40:19,670
0,180 180,420 420,810 810,1200 1200,1650
and that's basically {our,commit} record,|
这就是我们的提交记录，|

1344
00:40:19,670 --> 00:40:21,240
0,120 120,210 210,360 360,1050
you know it contains
它包含数字 n ，

1345
00:40:21,300 --> 00:40:22,680
0,270 270,690 690,1050 1050,1260 1260,1380
the number n,| which is
|就是日志中的块数，

1346
00:40:22,680 --> 00:40:23,640
0,150 150,270 270,510 510,570 570,960
like the number of blocks

1347
00:40:23,640 --> 00:40:24,900
0,90 90,150 150,750 960,1110 1110,1260
in the log| and then
|然后对于每个块，

1348
00:40:24,900 --> 00:40:26,420
0,150 150,390 390,1020
for each block,|
|

1349
00:40:26,610 --> 00:40:27,720
0,720

1350
00:40:28,280 --> 00:40:29,660
0,180 180,510 510,1050 1050,1170 1170,1380
the block number, the home
块编号，那个块的所在位置，等等，

1351
00:40:29,660 --> 00:40:31,380
0,510 510,600 600,750 750,1200
location of that block,

1352
00:40:32,420 --> 00:40:33,650
0,810 810,900 900,1080 1080,1140 1140,1230
{blah,blah,blah},| are going to be
|将会是其中的任何一个。

1353
00:40:33,650 --> 00:40:34,820
0,180 180,240 240,660
any of those.|
|

1354
00:40:37,960 --> 00:40:39,370
0,150 150,330 330,960 990,1320 1320,1410
And so, then in the
所以，在日志本身中

1355
00:40:39,370 --> 00:40:40,930
0,240 240,840 840,990 990,1440 1440,1560
log itself| are basically is
|是属于它的数据，

1356
00:40:40,930 --> 00:40:42,820
0,120 120,420 420,990 1020,1470 1470,1890
the data, that it belongs

1357
00:40:42,820 --> 00:40:43,810
0,60 60,360 360,660 660,750 750,990
to that,| so here is
|所以，这是 bn0 的数据，

1358
00:40:43,810 --> 00:40:45,160
0,90 90,420 420,810
the data of

1359
00:40:45,160 --> 00:40:47,290
0,540 540,1320 1500,1770 1770,1830 1830,2130
{bn0 -},| here's the data
|这是 bn1 的数据，等等，

1360
00:40:47,290 --> 00:40:50,180
0,360 360,1140 1170,1710 1740,2400
of {bn1 -}, etc,|
|

1361
00:40:50,210 --> 00:40:52,490
0,450 480,1320 1320,1650 1650,1980 1980,2280
to {bn-1 - - -},|
到 bn-1 ，|

1362
00:40:54,460 --> 00:40:55,300
0,180 180,390 390,600 600,720 720,840
so that's what's in the
这就是日志里的内容。

1363
00:40:55,300 --> 00:40:56,340
0,630
log.|
|

1364
00:40:56,340 --> 00:40:57,630
0,420 420,540 540,990 990,1080 1080,1290
{} And there's the only
所以在日志中只有一个东西，

1365
00:40:57,630 --> 00:40:58,260
0,150 150,300 300,450 450,540 540,630
thing, that's sort of in

1366
00:40:58,260 --> 00:40:59,280
0,90 90,360 390,570 570,780 780,1020
the log,| there's nothing more
|没有更多的了。

1367
00:40:59,280 --> 00:41:00,280
0,180 180,420
to it.|
|

1368
00:41:00,600 --> 00:41:01,980
0,240 240,390 390,840 840,1080 1080,1380
Then in memory where, while
然后在内存中，当文件系统运行时，

1369
00:41:01,980 --> 00:41:03,870
0,120 120,330 330,660 660,1170 1530,1890
the file systems running, {}|
|

1370
00:41:03,870 --> 00:41:05,580
0,240 240,360 360,570 570,1080 1080,1710
there's an in copy version
有一个 header 的拷贝版本在内存中，

1371
00:41:06,000 --> 00:41:07,620
0,630 630,960 960,1080 1080,1170 1170,1620
in-memory version of the header,|
|

1372
00:41:09,390 --> 00:41:11,370
0,510 510,630 630,1080 1080,1440 1440,1980
and it basically has n|
它有 n ，|

1373
00:41:11,400 --> 00:41:13,050
0,480 480,600 600,810 810,1470 1500,1650
and it has array of
它有块编号数组，等等。

1374
00:41:13,050 --> 00:41:14,380
0,300 300,780
block numbers,

1375
00:41:17,740 --> 00:41:18,940
0,150 150,750
{etc -}.|
|

1376
00:41:19,000 --> 00:41:21,280
0,720 1140,1350 1350,1890 1890,2070 2070,2280
{} And then {you,know} these
然后这些块编号

1377
00:41:21,280 --> 00:41:24,280
0,270 270,870 1140,2070 2070,2580 2580,3000
block numbers| refer to {}
|指向的是位于数据中的块，

1378
00:41:24,280 --> 00:41:25,510
0,330 330,420 420,480 480,930 930,1230
block that are sitting in

1379
00:41:25,510 --> 00:41:28,180
0,150 150,630 660,900 900,1500 1800,2670
the data,| that actually corresponds
|与块编号相对应，

1380
00:41:28,180 --> 00:41:29,110
0,90 90,180 180,480 480,780 780,930
to the block numbers| that
|位于内存中数据结构中，

1381
00:41:29,110 --> 00:41:29,770
0,60 60,240 240,300 300,540 540,660
are sort of sitting in

1382
00:41:29,770 --> 00:41:31,540
0,150 150,660 660,900 900,1410 1470,1770
this in-memory data structure,| they
|它们在块缓存中，

1383
00:41:31,540 --> 00:41:33,160
0,270 270,450 450,750 780,1110 1110,1620
live in the block cache,|
|

1384
00:41:33,820 --> 00:41:35,080
0,390 390,690 720,900 900,1110 1110,1260
which {you,know}, but now you're
现在你已经很熟悉了。

1385
00:41:35,080 --> 00:41:36,640
0,210 210,600 600,1080
well familiar with.|
|

1386
00:41:36,760 --> 00:41:37,900
0,330 330,540 540,900 900,1050 1050,1140
And so, maybe this is
所以，也许这是块 10 ，

1387
00:41:37,900 --> 00:41:39,640
0,180 180,450 450,900 900,1080 1080,1740
like block 10,| is the
|是日志中的第一个块，

1388
00:41:40,120 --> 00:41:41,740
0,690 690,1020 1020,1110 1110,1200 1200,1620
first block in the log,|
|

1389
00:41:41,740 --> 00:41:43,210
0,300 450,720 720,990 1200,1410 1410,1470
{or,maybe} let me take a
或者让我举一个更具体的例子，

1390
00:41:43,210 --> 00:41:44,530
0,180 180,450 450,930 930,1170 1170,1320
more concrete example,| from that
|从我们之前的东西来看，

1391
00:41:44,560 --> 00:41:46,000
0,390 390,570 570,750 750,960 960,1440
lines up with our previous

1392
00:41:46,000 --> 00:41:47,260
0,390 390,750 750,930 930,1080 1080,1260
things,| maybe this is like
|也许这是 45 ，

1393
00:41:47,260 --> 00:41:48,640
0,870
45,|
|

1394
00:41:49,440 --> 00:41:50,910
0,360 360,900 900,990 990,1140 1140,1470
and basically you know somewhere
在缓存中的某个地方，

1395
00:41:50,910 --> 00:41:52,470
0,210 210,360 360,540 540,1200 1380,1560
in the in cache,| the
|块缓存，

1396
00:41:52,470 --> 00:41:54,120
0,330 330,540 540,750 750,1230 1230,1650
block cache,| there's {of,course} whatever
|这里是块 45 ，

1397
00:41:54,150 --> 00:41:56,610
0,390 390,660 660,1320 1680,2070 2070,2460
block {45 -},| {here,is} data.|
|这是数据。|

1398
00:41:56,880 --> 00:41:57,940
0,630
Okay?|
好的？|

1399
00:41:58,200 --> 00:41:59,430
0,240 240,360 360,450 450,540 540,1230
That's sort of the structures,|
这是一种结构，|

1400
00:41:59,580 --> 00:42:01,900
0,420 420,1080 1080,1770
{} that {}
内存中的文件系统所具有的，

1401
00:42:03,130 --> 00:42:05,950
0,690 960,1260 1260,1740 1800,2400 2400,2820
the {on-disk -} {} in-memory

1402
00:42:05,950 --> 00:42:07,300
0,240 240,510 510,840 840,1140 1140,1350
file system has| and {on-disk
|和在磁盘上的文件系统所具有的，

1403
00:42:07,300 --> 00:42:08,650
0,180 180,450 450,750 750,1320 1320,1350
-} file system has,| on-disk
|在磁盘上的文件系统只有日志，

1404
00:42:08,650 --> 00:42:09,760
0,270 270,570 570,810 810,1020 1020,1110
file system just has the

1405
00:42:09,760 --> 00:42:11,530
0,480 630,780 780,1260 1260,1590 1590,1770
log,| the in-memory has these
|在内存中含有数据结构

1406
00:42:11,530 --> 00:42:13,030
0,270 270,630 630,690 690,960 960,1500
data structures| to {orchestrate -}
|用来协调这些将要执行的多次写入操作。

1407
00:42:13,360 --> 00:42:15,040
0,390 390,630 630,900 900,1170 1170,1680
{} these multi write operations

1408
00:42:15,040 --> 00:42:15,550
0,150 150,240 240,360 360,420 420,510
that were going to be

1409
00:42:15,550 --> 00:42:16,340
0,300
doing.|
|

1410
00:42:17,080 --> 00:42:18,220
0,660
Okay?|
好的？|

1411
00:42:20,240 --> 00:42:21,650
0,570 600,1050 1050,1170 1170,1290 1290,1410
So, {} to make this
所以，为了更具体一点，

1412
00:42:21,650 --> 00:42:23,360
0,30 30,240 240,390 390,990 1140,1710
a little more concrete, {}|
|

1413
00:42:23,360 --> 00:42:24,620
0,240 240,390 390,540 540,720 720,1260
let's look at some code.|
让我们来看一些代码。|

1414
00:42:25,740 --> 00:42:27,210
0,450 510,900 900,1080 1080,1230 1230,1470
Then {} that will help
这将帮助我们了解一切是如何运行的。

1415
00:42:27,210 --> 00:42:30,030
0,150 150,1080 1380,2010 2010,2370 2370,2820
us understand how everything works.|
|

1416
00:42:33,580 --> 00:42:35,100
0,210 210,390 390,810 960,1440
So let me {}
所以让我调出一些代码。

1417
00:42:36,080 --> 00:42:38,120
0,330 330,600 630,900 900,1560
pull up some code.|
|

1418
00:42:38,350 --> 00:42:39,190
0,150 150,330 330,480 480,600 600,840
Okay, let me put this
好的，让我把这个放在它旁边，

1419
00:42:39,220 --> 00:42:40,500
0,300 300,450 450,750
next to it,|
|

1420
00:42:40,890 --> 00:42:42,960
0,300 330,570 570,870 870,1470 1620,2070
we keep that picture, {}|
我们保留着那张图片，|

1421
00:42:42,960 --> 00:42:43,890
0,180 180,330 330,450 450,660 690,930
so that we can look
这样我们想看就可以看看，

1422
00:42:43,890 --> 00:42:45,420
0,240 240,360 360,870 990,1350 1350,1530
at if we want to|
|

1423
00:42:45,420 --> 00:42:46,080
0,120 120,180 180,300 300,540 540,660
or I can point to
或者我可以指向它。

1424
00:42:46,080 --> 00:42:48,000
0,270 810,1410
it. {}|
|

1425
00:42:48,490 --> 00:42:49,600
0,150 150,420 420,540 540,660 660,1110
Can everybody see my code?|
每个人都能看到我的代码吗？|

1426
00:42:54,410 --> 00:42:56,450
0,360 360,540 540,1140 1140,1320 1320,2040
Somebody {have,to} confirmed they seen
要有人确认他们看到了 emacs 窗口。

1427
00:42:56,990 --> 00:42:58,880
0,390 390,930 1140,1440 1440,1560 1560,1890
emacs window.| {Yeah,we} can see
|是的，我们可以看到它。

1428
00:42:59,090 --> 00:43:00,200
0,360 360,570
it.| Good.|
|好的。|

1429
00:43:00,380 --> 00:43:01,820
0,120 120,180 180,330 330,900
Is it big enough?|
它够大吗？|

1430
00:43:04,080 --> 00:43:05,790
0,210 210,390 390,570 570,1110 1440,1710
I think it's good.| Okay.|
我觉得挺好的。|好的。|

1431
00:43:05,790 --> 00:43:07,140
0,240 240,480 480,780
That looks good.|
看起来不错。|

1432
00:43:07,140 --> 00:43:08,440
0,420 420,660
Thank you.|
谢谢。|

1433
00:43:08,440 --> 00:43:10,870
0,240 240,690 810,1020 1020,1560 1560,2430
Okay, so let's start with,|
好的，让我们开始，|

1434
00:43:11,230 --> 00:43:12,520
0,210 210,510 510,810 810,1110 1110,1290
{you,know} I I talked about
我谈到了事务，

1435
00:43:12,520 --> 00:43:14,770
0,630 630,840 840,1350 1620,2130 2130,2250
transactions,| where you {} you
|我们不应该提交，直到，

1436
00:43:14,770 --> 00:43:15,820
0,90 90,210 210,540 540,840 900,1050
know the fact that you

1437
00:43:15,820 --> 00:43:18,010
0,510 1020,1290 1290,1440 1440,1650 1650,2190
know we should not commit

1438
00:43:18,100 --> 00:43:19,690
0,930 960,1230 1230,1320 1320,1440 1440,1590
until,| we should not write
|我们不应该提交一次写入，直到所有的写入都完成了。

1439
00:43:19,690 --> 00:43:20,560
0,60 60,270 270,300 300,630 630,870
to commit a [], until

1440
00:43:20,560 --> 00:43:21,610
0,270 270,390 390,630 630,720 720,1050
all the writes have done.|
|

1441
00:43:22,420 --> 00:43:24,130
0,690 720,870 870,1080 1080,1470 1470,1710
And so this means that
所以，这意味着，

1442
00:43:24,130 --> 00:43:25,720
0,180 180,450 450,690 690,930 930,1590
you should| file system operations
|文件系统操作必须指明

1443
00:43:25,720 --> 00:43:27,640
0,390 420,930 930,1500 1500,1830 1830,1920
{} must indicates| what the
|事务的开始是什么，

1444
00:43:27,640 --> 00:43:29,050
0,300 300,390 390,930 930,1140 1140,1410
beginning of transaction is| and
|以及事务的结束是什么。

1445
00:43:29,050 --> 00:43:29,860
0,390 390,450 450,570 570,720 720,810
particularly at the end of

1446
00:43:29,860 --> 00:43:31,160
0,60 60,570 570,870
the transaction is.|
|

1447
00:43:31,340 --> 00:43:32,930
0,600 630,840 840,1110 1110,1290 1290,1590
And the way that happens
在 xv6 中发生的方式是，

1448
00:43:32,930 --> 00:43:34,070
0,60 60,270 270,390 390,840 840,1140
in {xv6 - -},| that
|每个文件系统调用，

1449
00:43:34,070 --> 00:43:36,060
0,210 210,480 480,810 810,1440
every file system call,|
|

1450
00:43:36,640 --> 00:43:38,590
0,330 330,510 510,1200 1230,1470 1470,1950
here's {} open {} corresponds
这里的 open 对应于 create ，

1451
00:43:38,590 --> 00:43:40,300
0,120 120,480 480,1080 1140,1590 1590,1710
to create,| basically starts with
|以 begin_op 开始，

1452
00:43:40,300 --> 00:43:42,430
0,300 300,660 720,990 1020,1650 1650,2130
{begin_op -}| and begin_op indicates
|begin_op 表示，开始一个事务，

1453
00:43:42,430 --> 00:43:43,090
0,180 180,360 360,450 450,600 600,660
like, okay I want to

1454
00:43:43,090 --> 00:43:44,500
0,210 210,270 270,960 1170,1380 1380,1410
start a transaction| and I
|我希望所有的块写入，

1455
00:43:44,500 --> 00:43:45,760
0,240 240,510 510,630 630,1020 1020,1260
want all the block writes|
|

1456
00:43:45,760 --> 00:43:46,630
0,150 150,240 240,330 330,540 540,870
that I've been doing between
|我在 begin_op 和 end_op 之间说做的，

1457
00:43:46,630 --> 00:43:48,250
0,240 240,630 960,1170 1170,1350 1350,1620
{begin_op -} and {end_op -}|
|

1458
00:43:48,250 --> 00:43:49,240
0,240 240,330 330,720 720,840 840,990
which is basically the end
end_op 是事务的结束，

1459
00:43:49,240 --> 00:43:50,860
0,240 270,390 390,1020 1380,1500 1500,1620
of the transaction| to be
|这些之间的写入操作都是原子的，

1460
00:43:50,860 --> 00:43:52,690
0,540 630,1200 1200,1590 1590,1740 1740,1830
atomic,| meaning they should be
|意味着它们全都应用或全不应用。

1461
00:43:52,690 --> 00:43:53,560
0,150 150,540 540,600 600,810 810,870
all applied to, {or,none} of

1462
00:43:53,560 --> 00:43:54,820
0,180 180,300 300,840
them should applied.|
|

1463
00:43:54,940 --> 00:43:57,130
0,480 870,1110 1110,1560 1560,1860 1860,2190
Okay?| So every file system
好的？|所以，每个 xv6 中的文件系统调用都有这样的结构，

1464
00:43:57,130 --> 00:43:59,200
0,810 840,1530
call in

1465
00:43:59,260 --> 00:44:01,060
0,360 360,810 840,1080 1080,1260 1260,1800
{xv6 -} has that structure,|
|

1466
00:44:01,120 --> 00:44:02,950
0,690 690,810 810,1050 1050,1410 1440,1830
basically has {begin_op -},| then
有 begin_op ，|然后是实现文件系统调用的代码，

1467
00:44:02,950 --> 00:44:04,180
0,270 300,630 630,720 720,1140 1140,1230
the code and implements the

1468
00:44:04,180 --> 00:44:05,260
0,240 240,480 480,840 840,930 930,1080
file system call| and then
|然后是 end_op 。

1469
00:44:05,260 --> 00:44:06,360
0,210 210,570
{end_op -}.|
|

1470
00:44:07,080 --> 00:44:07,980
0,240 240,420 420,540 540,780 780,900
And that {end_op -} is
而 end_op 就是提交操作发生的地方。

1471
00:44:07,980 --> 00:44:09,120
0,300 300,390 390,450 450,720 720,1140
basically where the commit operation

1472
00:44:09,120 --> 00:44:10,160
0,570
happens.|
|

1473
00:44:10,430 --> 00:44:12,320
0,450 450,630 630,1080 1080,1620 1620,1890
{} So basically between begin_op
所以，在 begin_op 和 end_op 之间，

1474
00:44:12,320 --> 00:44:14,540
0,330 330,480 480,900 1350,1860 1860,2220
and {end_op -},| {on-disk -}
|磁盘上或内存中数据结构应该更新，

1475
00:44:14,570 --> 00:44:15,980
0,240 240,720 720,960 960,1290 1290,1410
or in-memory data structure should

1476
00:44:15,980 --> 00:44:17,840
0,180 180,750 750,1230 1230,1470 1470,1860
be updated,| whenever the in-memory
|无论内存中日志更新，

1477
00:44:17,840 --> 00:44:19,100
0,270 270,390 390,540 540,1140 1140,1260
log may be updated,| the
|或者块缓存可能更新，

1478
00:44:19,100 --> 00:44:21,020
0,480 480,660 660,750 750,1350 1620,1920
{block,cache} might be updated, {}|
|

1479
00:44:21,020 --> 00:44:23,330
0,150 150,510 510,900 900,1560 1770,2310
but nothing really happens until
但是在 end_op 之前什么都不会发生，

1480
00:44:23,330 --> 00:44:24,770
0,270 270,690 900,1050 1050,1200 1200,1440
{end_op -}| and then {end_op
|然后在 end_op 时，

1481
00:44:24,770 --> 00:44:26,210
0,180 180,540 540,660 660,1020 1020,1440
-} time,| we're basically going
|我们把东西放到日志中，

1482
00:44:26,210 --> 00:44:27,380
0,90 120,540 540,750 750,1020 1020,1170
to put things into the

1483
00:44:27,380 --> 00:44:29,720
0,510 750,900 900,1230 1230,2280 2310,2340
log| and then we are
|然后我们完成了把所有的东西放到日志中，

1484
00:44:29,870 --> 00:44:31,160
0,450 450,660 660,870 870,1110 1110,1290
done with putting everything in

1485
00:44:31,160 --> 00:44:32,480
0,60 60,510 600,810 810,1230 1230,1320
the log,| will actually you
|将写入提交记录或日志头。

1486
00:44:32,480 --> 00:44:33,440
0,120 120,270 270,360 360,600 600,960
know write to commit record

1487
00:44:33,440 --> 00:44:35,020
0,270 480,840 840,1260
or log header.|
|

1488
00:44:36,030 --> 00:44:37,000
0,600
Okay?|
好的？|

1489
00:44:37,180 --> 00:44:38,720
0,150 150,390 390,390
So let's. {}|
那我们开始吧。|

1490
00:44:39,280 --> 00:44:40,300
0,300 330,540 540,630 630,930 930,1020
So what is interesting,| of
所以有趣的是，|当然，每一次写入，

1491
00:44:40,300 --> 00:44:41,590
0,270 270,450 450,810 810,930 930,1290
course what happens is every

1492
00:44:41,590 --> 00:44:43,210
0,360 360,750 750,1320 1320,1530 1530,1620
write, correctly,| whenever one of
|当文件系统调用执行一次磁盘写入时，

1493
00:44:43,210 --> 00:44:44,590
0,150 150,390 390,630 630,990 990,1380
these file system calls does

1494
00:44:44,590 --> 00:44:47,470
0,360 360,600 600,1050 1380,2070 2400,2880
a disk write,| {} you
|一些事情一定会发生，

1495
00:44:47,470 --> 00:44:49,060
0,390 390,630 630,840 840,1140 1170,1590
know something must happen,| so
|所以如果我们回到 fs.c ，

1496
00:44:49,090 --> 00:44:49,870
0,120 120,210 210,330 330,690 690,780
if we go back for

1497
00:44:49,870 --> 00:44:52,870
0,360 360,810 1140,2220 2220,2460 2460,3000
example to {fs.c - -},|
|

1498
00:44:52,870 --> 00:44:54,580
0,90 90,420 420,540 540,1260
{you,know} look at ialloc,|
查看 ialloc ，|

1499
00:44:54,580 --> 00:44:56,500
0,750 750,960 960,1230 1230,1680 1680,1920
{} {ialloc -} basically what
ialloc 调用，

1500
00:44:56,500 --> 00:44:57,970
0,90 90,480 480,600 600,900 900,1470
it calls,| it doesn't call
|它没有直接调用 bwrite ，

1501
00:44:58,000 --> 00:45:00,820
0,330 330,840 840,1530 1830,2490 2640,2820
{bwrite -} directly,| but it
|而是调用了 log_write 。

1502
00:45:00,820 --> 00:45:03,160
0,210 210,570 570,1500 1560,1950 1950,2340
actually calls a {log_write -}.|
|

1503
00:45:04,250 --> 00:45:05,120
0,390 390,540 540,660 660,810 810,870
And so we're going to
我们将了解 log_write 的作用，

1504
00:45:05,120 --> 00:45:06,320
0,150 150,330 330,570 570,780 780,1200
see what {log_write -} does,|
|

1505
00:45:06,590 --> 00:45:08,510
0,450 450,660 660,930 1140,1590 1590,1920
{log_write -} is basically a
log_write 是日志系统实现的功能，

1506
00:45:08,510 --> 00:45:10,430
0,330 330,750 750,900 900,1320 1320,1920
function implemented by logging system,|
|

1507
00:45:10,610 --> 00:45:12,350
0,150 150,480 480,990 1020,1650 1650,1740
and every write| basically a
每个写入，|在 begin_op 和 end_op 之间的文件系统调用，

1508
00:45:12,350 --> 00:45:13,700
0,180 180,480 480,750 750,1020 1020,1350
file system call dose between

1509
00:45:13,700 --> 00:45:15,410
0,330 330,540 540,690 690,1020 1290,1710
begin_op and {end_op -},| always
|总是通过 log_write 。

1510
00:45:15,410 --> 00:45:17,100
0,210 210,510 540,840 840,1230
goes through {log_write -}.|
|

1511
00:45:23,350 --> 00:45:24,640
0,180 180,420 420,660 660,1140 1140,1290
So here's {log_write -}| and
所以这里是 log_write ，|log_write 实际上相当简单。

1512
00:45:24,640 --> 00:45:27,280
0,210 210,420 420,750 750,1860 1890,2640
{log_write -} actually reasonable {}

1513
00:45:27,340 --> 00:45:29,900
0,870 1230,1980
straightforward. {}|
|

1514
00:45:29,900 --> 00:45:31,400
0,720 720,840 840,990 990,1320 1320,1500
Yeah, you know we've written
是的，我们写入块，在块缓存中，

1515
00:45:31,400 --> 00:45:33,710
0,90 90,690 900,1530 1530,1770 1770,2310
the block, {} in the

1516
00:45:33,740 --> 00:45:36,050
0,420 420,960 990,1170 1170,1680 1680,2310
block cache,| so somewhere basically
|某个地方 45 ，也许是写入到 45 ，

1517
00:45:36,050 --> 00:45:37,310
0,570 570,840 840,990 990,1080 1080,1260
45, maybe this is like

1518
00:45:37,310 --> 00:45:39,020
0,90 90,300 300,390 390,1170 1410,1710
the write to 45,| we've
|我们已经更新了块缓存中的 45 ，

1519
00:45:39,020 --> 00:45:41,300
0,510 510,600 600,720 720,1470 1590,2280
updated you know 45 {}

1520
00:45:41,300 --> 00:45:43,070
0,450 540,660 660,840 840,1290 1440,1770
in the block cache,| now
|现在我们记录在内存中的数据结构中，

1521
00:45:43,070 --> 00:45:44,360
0,90 90,450 450,690 690,750 750,1290
we basically {record - -}

1522
00:45:44,360 --> 00:45:45,890
0,270 270,390 390,870 870,1080 1080,1530
in the in-memory data structures,|
|

1523
00:45:45,890 --> 00:45:47,150
0,240 240,480 480,720 720,960 960,1260
that at some point later,
稍后，在提交的时候，

1524
00:45:47,150 --> 00:45:48,500
0,90 90,390 390,840 1050,1260 1260,1350
at commit point,| we were
|我们能够将日志写入日志。

1525
00:45:48,500 --> 00:45:49,400
0,120 120,240 240,450 450,600 600,900
able to write this log

1526
00:45:49,400 --> 00:45:51,080
0,540 690,930 930,1320
into {} log.|
|

1527
00:45:51,430 --> 00:45:53,140
0,480 480,780 780,930 930,1170 1200,1710
And so you know basically
所以，你知道代码是，

1528
00:45:53,140 --> 00:45:54,040
0,120 120,240 240,360 360,630 630,900
you know the code is,|
|

1529
00:45:54,280 --> 00:45:54,900
0,450
oops,|
糟糕，|

1530
00:45:55,480 --> 00:45:57,040
0,120 120,330 330,420 420,720 720,1560
the code is reasonably straightforward,|
代码相当简单，|

1531
00:45:57,340 --> 00:45:59,710
0,570 570,1050 1110,1860 1860,1980 1980,2370
{} it acquired a lock
它获取日志头的锁，

1532
00:45:59,710 --> 00:46:02,170
0,210 210,330 330,930 1140,2040 2040,2460
on the header| and basically
|并更新日志头，

1533
00:46:02,170 --> 00:46:03,800
0,600 600,720 720,1140
updates the header,|
|

1534
00:46:04,100 --> 00:46:06,500
0,480 480,1050 1080,1560 1560,1710 1710,2400
{} in particular, what does
它说做的是更新 n ，

1535
00:46:06,500 --> 00:46:07,730
0,270 270,840 870,960 960,1110 1110,1230
goes through you know the

1536
00:46:07,730 --> 00:46:10,400
0,0 1170,1770 1770,2160 2160,2430 2430,2670
{ -} {updates,n},| and when
|所做的第一件事是，

1537
00:46:10,400 --> 00:46:11,240
0,300 330,420 420,630 630,750 750,840
actually the first thing it

1538
00:46:11,240 --> 00:46:12,740
0,360 360,510 510,750 750,1320 1320,1500
does,| it actually sees if
|如果已经有一份 45 的拷贝，

1539
00:46:12,740 --> 00:46:13,880
0,180 180,540 540,630 630,1020 1020,1140
there's already a copy of

1540
00:46:13,880 --> 00:46:15,920
0,750 780,1050 1050,1530
45 in the,|
|

1541
00:46:16,420 --> 00:46:18,310
0,180 180,660 660,750 750,1140 1140,1890
if 45 is already recorded
如果 45 已经被记录为必须写入，

1542
00:46:18,310 --> 00:46:19,420
0,150 150,360 360,690 690,840 840,1110
as being having to write

1543
00:46:19,420 --> 00:46:20,950
0,300 300,570 570,990 1320,1440 1440,1530
to written to,| and if
|如果是这样情况，

1544
00:46:20,950 --> 00:46:22,090
0,240 240,300 300,600 600,840 840,1140
that's the case,| nothing has
|什么都不用做，因为会写入到 45 。

1545
00:46:22,090 --> 00:46:23,230
0,90 90,180 180,450 450,720 720,1140
to be done, because 45

1546
00:46:23,230 --> 00:46:24,600
0,150 150,270 270,480 480,810
will be written to.|
|

1547
00:46:24,750 --> 00:46:26,880
0,540 540,810 810,930 930,1350 1620,2130
{} And so {we're,done},| sometimes
这样我们就完成了，|有时称为日志[吸收]。

1548
00:46:26,880 --> 00:46:28,580
0,210 210,480 480,1140
called log absorption.|
|

1549
00:46:28,870 --> 00:46:30,160
0,720

1550
00:46:30,980 --> 00:46:32,870
0,540 570,720 720,1140 1170,1440 1440,1890
If you know block 45
如果快 45 不在数组中，

1551
00:46:32,870 --> 00:46:34,970
0,120 120,720 750,1050 1050,1560 1680,2100
is not in the array

1552
00:46:34,970 --> 00:46:36,410
0,270 270,360 360,630 630,780 780,1440
yet| or not in the
|或者不在块列表或块数组中，

1553
00:46:37,250 --> 00:46:38,300
0,300 300,570 570,630 630,990 990,1050
the list of blocks or

1554
00:46:38,300 --> 00:46:39,110
0,60 60,300 300,390 390,690 690,810
the array of blocks,| that
|需要写入磁盘，

1555
00:46:39,110 --> 00:46:40,220
0,210 210,270 270,630 660,1020 1020,1110
needs to be written to

1556
00:46:40,220 --> 00:46:41,720
0,420 510,780 780,1200 1200,1290 1290,1500
disk,| then basically you know
|那么这段代码所做的事就是，

1557
00:46:41,720 --> 00:46:43,340
0,270 270,870 960,1260 1260,1530 1530,1620
the {only,thing}, this particular {}

1558
00:46:43,340 --> 00:46:44,900
0,150 150,240 240,480 480,930 1140,1560
piece of code does is|
|

1559
00:46:44,900 --> 00:46:46,910
0,300 300,570 570,750 750,1200 1350,2010
basically bump up and stick
增加并将需要写入的块编号放入

1560
00:46:46,910 --> 00:46:48,050
0,300 300,570 570,840 840,960 960,1140
that block number that needs

1561
00:46:48,050 --> 00:46:49,760
0,60 60,210 210,660 660,1230 1230,1710
to be written| into the
|下一个条目或这个条目。

1562
00:46:49,820 --> 00:46:51,410
0,420 420,780 840,1140 1140,1350 1350,1590
next entry or into that

1563
00:46:51,410 --> 00:46:52,160
0,300
entry.|
|

1564
00:46:53,210 --> 00:46:54,050
0,270 270,330 330,540 540,720 720,840
Then the only other thing
然后它做的另一件事，

1565
00:46:54,050 --> 00:46:54,860
0,120 120,390 390,480 480,630 630,810
it does| and I'll talk
|我稍后会谈到，

1566
00:46:54,860 --> 00:46:56,360
0,180 180,330 330,870 1110,1290 1290,1500
about this later,| it will
|它将把块放入缓冲区缓存中，

1567
00:46:56,360 --> 00:46:59,000
0,630 780,1620 1650,2250 2280,2520 2520,2640
pin the block in the

1568
00:46:59,000 --> 00:47:01,550
0,450 450,1020 1260,1950 1980,2400 2400,2550
buffer cache| and let me
|让我把原因推迟一会，

1569
00:47:01,550 --> 00:47:03,620
0,390 390,870 870,1320 1320,1590 1590,2070
postpone why a little while,|
|

1570
00:47:03,650 --> 00:47:04,610
0,450 450,480 480,630 630,720 720,960
but I will come back
我稍后会再谈这个问题。

1571
00:47:04,610 --> 00:47:05,680
0,60 60,240 240,570
to that later,|
|

1572
00:47:06,560 --> 00:47:07,400
0,180 180,330 330,570 570,720 720,840
and that's actually all that
这就是 log_write 所做的全部工作，

1573
00:47:07,400 --> 00:47:08,900
0,240 240,450 450,540 540,960 1080,1500
{log_write -} there doing.| So
|所以，每个需要更新块的文件系统调用，

1574
00:47:08,930 --> 00:47:10,640
0,300 300,570 570,840 840,1320 1350,1710
every file system call that

1575
00:47:10,640 --> 00:47:12,440
0,420 420,540 540,1080 1080,1350 1350,1800
needs to update a block,|
|

1576
00:47:12,470 --> 00:47:13,370
0,420 420,510 510,780 780,840 840,900
updates the block in the
更新块缓存中的块，

1577
00:47:13,370 --> 00:47:14,960
0,330 330,750 780,1050 1050,1200 1200,1590
block cache| and it basically
|它会将它附加到内存中的数据结构中，

1578
00:47:14,960 --> 00:47:16,820
0,150 150,510 510,840 1140,1560 1590,1860
it appends it {} to

1579
00:47:16,820 --> 00:47:19,130
0,270 270,870 870,1140 1140,1770 1980,2310
this in-memory data structure, {}|
|

1580
00:47:19,130 --> 00:47:20,450
0,630 630,720 720,840 840,960 960,1320
unless you know it's already
除非它已经在那里了，

1581
00:47:20,450 --> 00:47:21,860
0,600 690,840 840,990 990,1350 1350,1410
there,| in which case you
|在这种情况下，只需要吸收它。

1582
00:47:21,860 --> 00:47:23,240
0,150 150,330 330,780 780,960
know just absorbs it.|
|

1583
00:47:24,630 --> 00:47:26,020
0,180 180,270 270,420 420,750
Does that make sense?|
这能理解吗？|

1584
00:47:29,190 --> 00:47:30,480
0,330 330,510 510,690 690,930 930,1290
So does it mean that
那么是否意味着 bwrite 根本不应该单独使用？

1585
00:47:30,480 --> 00:47:32,010
0,240 240,540 540,810 810,930 930,1530
{bwrite -} shouldn't be used

1586
00:47:32,040 --> 00:47:34,560
0,210 210,1110 1170,1380 1380,1860 2160,2520
by itself at all?| Sorry,
|抱歉，请再说一遍。

1587
00:47:34,560 --> 00:47:35,640
0,600
{say,again}.|
|

1588
00:47:35,760 --> 00:47:37,560
0,390 390,750 750,1050 1050,1200 1200,1800
{bwrite -} shouldn't be used
bwrite 不应该单独使用，只能用作。

1589
00:47:37,620 --> 00:47:40,530
0,210 210,990 1020,1530 1530,2160 2310,2910
by itself, only as.| Yes
|是的，没错，

1590
00:47:40,770 --> 00:47:43,050
0,330 330,870 1050,1800 1800,2160 2160,2280
that's correct,| basically all you,
|一种考虑的方式是，

1591
00:47:43,050 --> 00:47:43,800
0,150 150,270 270,360 360,510 510,750
one way to think about

1592
00:47:43,800 --> 00:47:44,880
0,150 150,300 300,510 510,690 690,1080
is| that every {bwrite -}
|在文件系统中的每个 bwrite 都被 log_write 替换。

1593
00:47:44,880 --> 00:47:45,930
0,240 240,330 330,570 570,840 840,1050
in the file system is

1594
00:47:45,960 --> 00:47:48,080
0,870 870,990 990,1350 1350,1680
replaced by {log_write -}.|
|

1595
00:47:53,820 --> 00:47:56,430
0,540 630,1290 1650,1860 1860,2310 2310,2610
Okay, {} so now let's
好的，现在我们看看 end_op 发生了什么，

1596
00:47:56,430 --> 00:47:57,870
0,150 150,300 300,540 540,1080 1080,1440
see what actually happens at

1597
00:47:57,870 --> 00:47:59,790
0,150 150,540 540,1020 1020,1290 1290,1920
{end_op -},| because that's where
|因为那是令人兴奋的部分。

1598
00:47:59,850 --> 00:48:01,620
0,150 150,510 510,780 780,1320
the exciting part happens.|
|

1599
00:48:02,160 --> 00:48:04,590
0,720 1140,1560 1560,2160 2160,2220 2220,2430
{} And there's a couple
有几个案例我暂时不谈，

1600
00:48:04,590 --> 00:48:05,460
0,180 180,510 510,630 630,720 720,870
of cases that I just

1601
00:48:05,460 --> 00:48:07,080
0,510
wanna

1602
00:48:07,230 --> 00:48:09,240
0,420 420,720 720,1170 1170,1560 1560,2010
avoid talking about,| {a,little,bit} later,|
|稍等一会，|

1603
00:48:09,270 --> 00:48:11,310
0,510 510,930 1110,1560 1560,1710 1710,2040
because they even this simple
因为即使是这个简单的日志系统也有一些微妙的复杂性，

1604
00:48:11,310 --> 00:48:12,870
0,510 510,840 840,1200 1200,1410 1410,1560
logging system actually has some

1605
00:48:12,870 --> 00:48:14,880
0,360 360,1110 1110,1470 1500,1950 1950,2010
subtle complexities| and most of
|这些代码的大多数开头涉及到这些微妙的复杂性。

1606
00:48:14,880 --> 00:48:15,750
0,60 60,360 360,450 450,600 600,870
the [beginning] of this code

1607
00:48:15,750 --> 00:48:17,580
0,300 300,420 420,810 810,1080 1080,1830
deals with these subtle complexities.|
|

1608
00:48:18,090 --> 00:48:18,810
0,270 270,390 390,510 510,600 600,720
{} But if you want
但是如果你想得到一个正常的情况，

1609
00:48:18,810 --> 00:48:20,550
0,420 420,600 600,810 870,1350 1350,1740
to get a normal case,|
|

1610
00:48:20,550 --> 00:48:21,660
0,90 90,240 240,600 600,780 780,1110
you know there's or there's
有一个简单的情况，

1611
00:48:21,660 --> 00:48:23,550
0,90 90,390 390,690 690,1110 1440,1890
the simple case| where no
|没有其他文件系统操作正在进行，

1612
00:48:23,550 --> 00:48:25,020
0,180 180,510 510,720 720,990 990,1470
other {} file system operations

1613
00:48:25,020 --> 00:48:26,820
0,120 120,240 240,870 1140,1650 1650,1800
are in progress,| {} we
|我们正在执行创建文件，

1614
00:48:26,820 --> 00:48:28,770
0,120 120,750 780,1140 1140,1740 1800,1950
are executing create file| and
|我们已经快到可以提交的地方。

1615
00:48:28,770 --> 00:48:30,060
0,630 630,840 840,1110 1110,1200 1200,1290
basically we're getting to the

1616
00:48:30,060 --> 00:48:30,870
0,240 240,420 420,570 570,750 750,810
point where we want to

1617
00:48:30,870 --> 00:48:31,720
0,390
commit.|
|

1618
00:48:31,940 --> 00:48:33,530
0,210 210,630 660,960 1050,1470 1470,1590
And so the code is
因此代码非常简单并调用 commit ，

1619
00:48:33,530 --> 00:48:36,050
0,240 240,1020 1290,1710 1710,2070 2070,2520
pretty straightforward and calls commit,|
|

1620
00:48:36,890 --> 00:48:37,640
0,150 150,420 420,630 630,690 690,750
so let's look at the
所以让我们来看一下 commit 。

1621
00:48:37,640 --> 00:48:38,600
0,450
commit.|
|

1622
00:48:41,680 --> 00:48:43,140
0,150 150,360 360,870
So here's commit,|
这里是 commit ，|

1623
00:48:43,140 --> 00:48:44,580
0,240 240,540 540,870 870,1050 1050,1440
{} [] commit does to
[] commit 执行写入日志的步骤，

1624
00:48:44,580 --> 00:48:46,770
0,390 390,1320 1320,1740 1740,2070 2070,2190
basically steps basically writes the

1625
00:48:46,770 --> 00:48:47,880
0,570
log,|
|

1626
00:48:48,140 --> 00:48:50,120
0,330 330,750 750,1230 1230,1500 1500,1980
that's basically writing all these,
写入所有这些块编号，

1627
00:48:51,270 --> 00:48:52,620
0,240 240,420 420,900 900,1230 1230,1350
all these block numbers,| that
|它们位于内存 header 中，

1628
00:48:52,620 --> 00:48:53,910
0,60 60,600 660,780 780,900 900,1290
are sitting you know in

1629
00:48:53,910 --> 00:48:56,370
0,120 120,1020 1050,1830 2010,2340 2340,2460
the in-memory header,| writes them
|将它们全部写入磁盘上的 header ，

1630
00:48:56,370 --> 00:48:57,870
0,330 330,630 630,990 1020,1200 1200,1500
basically all to the header

1631
00:48:57,870 --> 00:48:59,700
0,240 240,690 900,1590 1590,1650 1650,1830
on disk,| including you know
|包括数字 n 。

1632
00:48:59,700 --> 00:49:00,980
0,210 210,480 480,780
there's number n.|
|

1633
00:49:02,360 --> 00:49:03,920
0,450 480,690 690,840 840,1050 1050,1560
Right, and so let's see,|
好的，让我们看看，|

1634
00:49:04,340 --> 00:49:05,600
0,420 420,630 630,810 810,1080 1080,1260
{} that is that's what
这是 write_head 所做的，抱歉，

1635
00:49:05,600 --> 00:49:07,440
0,210 210,420 420,750 750,1290
{write_head -} does, sorry,|
|

1636
00:49:07,440 --> 00:49:09,150
0,420 420,660 660,990 990,1350 1350,1710
{} {write_log -} basically writes
write_log 写入块

1637
00:49:09,150 --> 00:49:10,500
0,90 90,210 210,540 570,1080 1080,1350
you know the blocks| from
|从缓冲区缓存到它们各自的日志中。

1638
00:49:10,500 --> 00:49:13,410
0,90 90,360 360,1050 1110,1980 2010,2910
the buffer cache into their

1639
00:49:13,410 --> 00:49:15,780
0,690 1050,1410 1410,1530 1530,1800 1800,2370
respective into the log itself.|
|

1640
00:49:16,280 --> 00:49:17,750
0,150 150,360 360,660 660,1050 1050,1470
So let's see {write_log -},
让我们看看上面的 write_log ，

1641
00:49:17,750 --> 00:49:19,380
0,360 360,600 600,1080
right above here,|
|

1642
00:49:19,640 --> 00:49:20,960
0,570 570,1020 1020,1140 1140,1260 1260,1320
{} you see what it
看它是怎么做的，

1643
00:49:20,960 --> 00:49:22,610
0,480 510,780 780,1080 1080,1560 1560,1650
does,| it goes through you
|它检查这个数组，一次一个，

1644
00:49:22,610 --> 00:49:24,080
0,120 120,300 300,900 930,1350 1350,1470
know this array one at

1645
00:49:24,080 --> 00:49:27,230
0,60 60,690 1020,1320 1320,2100 2250,3150
a time| and basically writes
|并且写到日志中的日志位置。

1646
00:49:27,230 --> 00:49:28,820
0,420 420,570 570,720 720,1050 1050,1590
that to the log position

1647
00:49:30,000 --> 00:49:31,300
0,240 240,330 330,810
in the log.|
|

1648
00:49:31,500 --> 00:49:32,670
0,240 240,450 450,930 930,1050 1050,1170
Okay, so read you know
好的，读日志块，然后把它放进去，

1649
00:49:32,670 --> 00:49:34,400
0,120 120,570 570,1290
the log block,

1650
00:49:34,460 --> 00:49:36,050
0,390 390,750 750,870 870,1020 1020,1590
then sticks it in there,|
|

1651
00:49:36,290 --> 00:49:37,520
0,300 300,720 720,960 960,1050 1050,1230
by copying it, and then
复制它，然后把它写入磁盘。

1652
00:49:37,520 --> 00:49:38,960
0,300 300,450 450,780 780,1170 1170,1440
writing it actually out to

1653
00:49:38,960 --> 00:49:40,060
0,120 120,600
the disk.|
|

1654
00:49:40,880 --> 00:49:42,140
0,210 210,360 360,720 720,1110 1110,1260
So this basically ensures that
所以这保证日志 45 在这里，

1655
00:49:42,140 --> 00:49:43,970
0,270 270,900 900,1110 1110,1260 1260,1830
log 45 laid up here,|
|

1656
00:49:43,970 --> 00:49:44,960
0,60 60,240 240,690 690,870 870,990
you know say this is
比如说这是 32 ，

1657
00:49:44,960 --> 00:49:46,700
0,300 300,720 720,1140 1140,1290 1290,1740
{32 -},| {that,will,end} up there
|它将在那里，等等。

1658
00:49:46,730 --> 00:49:48,000
0,270 270,780
etc etc.|
|

1659
00:49:49,050 --> 00:49:50,220
0,240 240,300 300,450 450,870 900,1170
Then, at the end,| so
然后，最后，|到目前为止我们还没有提交，

1660
00:49:50,220 --> 00:49:50,940
0,120 120,270 270,540 540,600 600,720
at this point we have

1661
00:49:50,940 --> 00:49:52,080
0,210 210,540 540,750 750,1080 1080,1140
not committed yet, correct,| the
|我们所做的唯一一件事是

1662
00:49:52,080 --> 00:49:53,250
0,390 390,570 570,720 720,1020 1020,1170
only thing we've done is|
|

1663
00:49:53,250 --> 00:49:54,630
0,360 360,630 630,1020 1020,1260 1260,1380
basically putting blocks into the
把数据块放入日志，

1664
00:49:54,630 --> 00:49:56,130
0,450 840,1050 1050,1230 1230,1350 1350,1500
log,| and if we were
|如果我们在这个时间点崩溃，

1665
00:49:56,130 --> 00:49:57,300
0,420 420,510 510,660 660,960 960,1170
crash at this particular point

1666
00:49:57,300 --> 00:49:59,850
0,60 60,630 630,1440 1710,2310 2310,2550
in time,| before calling {write_head
|在调用 write_head 之前，在 write_head 成功前，

1667
00:49:59,850 --> 00:50:01,890
0,420 570,990 990,1200 1200,1470 1470,2040
-} before {write_head -} succeeded,|
|

1668
00:50:02,010 --> 00:50:03,990
0,240 240,630 630,930 930,1320 1710,1980
and basically as if {}
就像事务根本没有执行一样。

1669
00:50:03,990 --> 00:50:05,190
0,120 120,540 540,750 750,1110 1110,1200
the transaction didn't execute at

1670
00:50:05,190 --> 00:50:05,900
0,330
all.|
|

1671
00:50:06,810 --> 00:50:07,920
0,480 480,630 630,870 870,1020 1020,1110
{} So let's look at
所以让我们来看一下 write_head ，

1672
00:50:07,920 --> 00:50:09,140
0,60 60,270 270,690
the {write_head -},|
|

1673
00:50:09,430 --> 00:50:10,480
0,150 150,420 420,600 600,810 810,1050
so that {write_head -} is
write_head 是我前面所说的提交点，

1674
00:50:10,480 --> 00:50:11,890
0,360 360,450 450,690 690,1080 1080,1410
what I called earlier, basically

1675
00:50:11,890 --> 00:50:13,340
0,90 90,390 390,870
the commit point,|
|

1676
00:50:13,770 --> 00:50:15,900
0,600 600,720 720,960 960,1200 1200,2130
and the commit point, basically
提交点很直接，

1677
00:50:15,900 --> 00:50:17,670
0,90 90,180 210,600 600,960 960,1770
you know basically it's straightforward|
|

1678
00:50:17,670 --> 00:50:19,220
0,180 180,510 510,990
and reach the
到达磁盘上块的头，

1679
00:50:19,430 --> 00:50:21,020
0,330 330,450 450,1080
head of block

1680
00:50:21,080 --> 00:50:22,220
0,240 240,510 510,780 780,840 840,1140
from disk,| which is probably
|可能位于缓冲器缓存中，

1681
00:50:22,220 --> 00:50:23,420
0,270 270,330 330,390 390,630 630,1200
sitting in the buffer cache,|
|

1682
00:50:23,780 --> 00:50:26,180
0,780 780,1260 1260,1380 1380,1620 1980,2400
{} it you know puts
把拷贝放在最后，

1683
00:50:26,180 --> 00:50:27,980
0,480 480,930 930,1110 1110,1590 1650,1800
the copies the end,| you
|那个块的后面，

1684
00:50:27,980 --> 00:50:30,050
0,120 120,360 360,780 780,1560 1620,2070
know this end into that

1685
00:50:30,050 --> 00:50:31,760
0,780 780,1140 1140,1320 1320,1410 1410,1710
block,| puts all the block
|把所有块编号放到那个数组，放到那个块，

1686
00:50:31,760 --> 00:50:33,290
0,480 480,720 720,930 930,1320 1320,1530
numbers into that array into

1687
00:50:33,290 --> 00:50:34,730
0,150 150,630 750,990 990,1080 1080,1440
that block| and it basically
|它写入那个特定的块。

1688
00:50:34,730 --> 00:50:36,410
0,480 480,810 810,990 990,1290 1290,1680
writes that that particular block.|
|

1689
00:50:37,210 --> 00:50:38,770
0,390 390,540 540,930 1050,1320 1320,1560
This is the,| this {bwrite
这个，|这个 bwrite 是什么，是那个提交点吗？

1690
00:50:38,770 --> 00:50:39,880
0,330 330,600 600,690 690,1020 1020,1110
-} what is that, is

1691
00:50:39,880 --> 00:50:41,460
0,210 210,300 300,570 570,990
that the commit point?|
|

1692
00:50:45,420 --> 00:50:46,500
0,150 150,210 210,450 450,780 780,1080
If a crash happens before
如果在 bwrite 之前发生崩溃，会发生什么呢？

1693
00:50:46,500 --> 00:50:47,490
0,150 150,330 330,600 600,750 750,990
this {bwrite -}, what happens

1694
00:50:47,490 --> 00:50:48,460
0,330
then?|
|

1695
00:50:57,180 --> 00:50:58,380
0,600
Anybody?|
有人知道吗？|

1696
00:50:58,700 --> 00:51:01,280
0,240 240,570 570,930 930,1800 1980,2580
If the crash happens before
如果崩溃发生在 bwrite 之前，

1697
00:51:01,280 --> 00:51:02,870
0,210 210,540 540,1170 1230,1380 1380,1590
{bwrite -},| isn't the only
|是不是我们对内存中 hb 数据结构所做的修改，

1698
00:51:02,870 --> 00:51:04,400
0,660 660,750 750,930 930,1380 1380,1530
modification that we've made to

1699
00:51:04,400 --> 00:51:06,830
0,270 270,480 480,1380 1500,1890 1890,2430
the in memory {} hb

1700
00:51:06,830 --> 00:51:09,320
0,240 240,960 1200,1590 1590,2040 2040,2490
data structure,| so it's not,
|它不会，它会好的。

1701
00:51:09,350 --> 00:51:10,850
0,300 300,360 360,480 480,870 1260,1500
{it's,going} to be fine.| Yeah,
|是的，它是好的，

1702
00:51:10,850 --> 00:51:11,900
0,90 90,210 210,300 300,780 780,1050
it's gonna be fine,| because
|因为我们已经写入了 db0 dbn 到日志中，

1703
00:51:11,900 --> 00:51:12,980
0,330 330,480 480,660 660,810 810,1080
basically we may have written

1704
00:51:12,980 --> 00:51:14,870
0,390 390,720 720,1140 1140,1500 1500,1890
{db1 -} zero {dbn -}

1705
00:51:14,870 --> 00:51:16,040
0,390 390,510 510,960 960,1080 1080,1170
whatever to log,| but we
|但是我们还没有成功写入日志头，

1706
00:51:16,040 --> 00:51:17,510
0,150 150,600 600,1110 1110,1230 1230,1470
have not succeeded in writing

1707
00:51:17,510 --> 00:51:18,700
0,90 90,330 330,780
the log header,|
|

1708
00:51:18,980 --> 00:51:20,540
0,300 300,540 540,900 900,1290 1290,1560
and so will do not,
所以，在恢复时，什么都不会发生。

1709
00:51:20,540 --> 00:51:21,770
0,120 120,450 450,720 720,840 840,1230
on recovery nothing will happen.|
|

1710
00:51:22,950 --> 00:51:23,820
0,180 180,330 330,600 600,720 720,870
And what happens if there's
如果正好在 bwrite 后发生崩溃，会发生什么，

1711
00:51:23,820 --> 00:51:24,930
0,30 30,420 420,720 720,1020 1020,1110
a crash right after to

1712
00:51:24,930 --> 00:51:26,070
0,180 180,450 450,570 570,840 840,1140
{bwrite -},| so like crash
|比如这里发生了崩溃。

1713
00:51:26,070 --> 00:51:27,080
0,420
here.|
|

1714
00:51:32,220 --> 00:51:33,330
0,180 180,300 300,420 420,720 720,1110
And it's no longer zero,|
它不再是零，|

1715
00:51:33,330 --> 00:51:35,190
0,360 480,690 690,930 930,1470 1470,1860
so the log headers correctly
所以日志头被正确读取并被恢复。

1716
00:51:35,190 --> 00:51:37,140
0,240 240,420 420,630 630,1140 1380,1950
read and it's recovered.| Yeah,
|是的，会恢复，对吧。

1717
00:51:37,140 --> 00:51:38,670
0,180 180,330 330,750 750,1140 1140,1530
will be recovered, correct.| Well,
|在某一时刻，像我们期望的一样，在恢复期间，

1718
00:51:38,670 --> 00:51:39,630
0,120 120,240 240,480 480,780 780,960
at some point, hopefully during

1719
00:51:39,630 --> 00:51:41,070
0,420 420,540 540,690 690,1020 1020,1440
recovery as we expect that,|
|

1720
00:51:41,070 --> 00:51:43,110
0,390 630,1170 1170,1320 1350,1830 1830,2040
we expect the recovery will
我们期望恢复会实际读取日志头，

1721
00:51:43,110 --> 00:51:44,580
0,420 420,660 660,780 780,1110 1110,1470
actually read the log header|
|

1722
00:51:44,580 --> 00:51:45,540
0,240 240,420 420,570 570,720 720,960
see that there is a
看到其中有一个 5 ，

1723
00:51:45,540 --> 00:51:46,830
0,330 330,450 450,660 660,720 720,1290
5 in there for example,|
|

1724
00:51:47,070 --> 00:51:48,090
0,180 180,330 330,630 630,720 720,1020
and then copy the first
然后把前 5 个日志复制到原位置。

1725
00:51:48,090 --> 00:51:49,200
0,300 300,570 570,720 720,930 930,1110
5 logs to their home

1726
00:51:49,200 --> 00:51:50,100
0,480
location.|
|

1727
00:51:50,530 --> 00:51:51,790
0,150 150,300 300,450 450,960 960,1260
So this is really this,
所以这一行，

1728
00:51:51,790 --> 00:51:53,860
0,420 420,630 630,960 960,1530
this, this one line,|
|

1729
00:51:53,860 --> 00:51:55,000
0,150 150,390 390,660 660,1020 1020,1140
there's one disk write,| there's
这个磁盘写入，|这个扇区写入是真正的提交点。

1730
00:51:55,000 --> 00:51:56,080
0,150 150,480 480,720 720,840 840,1080
one sector write is really

1731
00:51:56,080 --> 00:51:57,300
0,60 60,330 330,690
the commit point.|
|

1732
00:51:58,440 --> 00:51:59,380
0,420
Right?|
对吧？|

1733
00:52:03,380 --> 00:52:04,760
0,480 480,540 540,1050 1050,1320 1320,1380
Before the commitment point, the
在提交点之前，事务没有发生，

1734
00:52:04,760 --> 00:52:06,650
0,570 570,1200 1200,1290 1290,1710 1710,1890
transaction, is the transaction didn't

1735
00:52:06,650 --> 00:52:08,300
0,360 360,690 690,960 960,1260 1260,1650
happen,| after the commit point,
|在提交点之后，事务一定完成了，

1736
00:52:08,300 --> 00:52:09,620
0,90 90,570 570,720 720,1200 1200,1320
the transaction will definitely be

1737
00:52:09,620 --> 00:52:10,660
0,510
finished,|
|

1738
00:52:11,470 --> 00:52:12,760
0,390 390,480 480,810 810,870 870,1290
assuming your recovery is correct.|
假设你的恢复是正确的。|

1739
00:52:18,220 --> 00:52:21,220
0,450 480,660 660,1080 1080,1500 1980,3000
Okay, so let's you know
好的，让我们回去 commit 。

1740
00:52:21,520 --> 00:52:23,300
0,150 150,480 480,660 660,1200
go back to commit.|
|

1741
00:52:25,020 --> 00:52:26,910
0,300 300,810 960,1380 1380,1500 1500,1890
So commit, after its committed,|
所以在提交之后，|

1742
00:52:26,910 --> 00:52:28,770
0,90 90,330 330,960 960,1050 1050,1860
it actually installs the transactions,|
它安装了事务，|

1743
00:52:28,830 --> 00:52:30,900
0,480 480,900 900,1110 1110,1680 1680,2070
and that's pretty straightforward,| basically
这非常直接，|它使用数据块，

1744
00:52:30,900 --> 00:52:32,910
0,270 270,720 960,1230 1230,1770 1770,2010
it takes the blocks,| looks
|查看数据块所在的头，

1745
00:52:32,910 --> 00:52:33,990
0,120 120,210 210,480 480,780 780,1080
at the header {where,the} blocks

1746
00:52:33,990 --> 00:52:35,190
0,450 450,540 540,630 630,930 930,1200
belongs| and then basically writes
|然后写入那个特定的位置。

1747
00:52:35,190 --> 00:52:36,920
0,150 150,300 300,690 690,1200
into that particular location.|
|

1748
00:52:37,660 --> 00:52:39,310
0,690 870,1200 1200,1410 1410,1500 1500,1650
{} Yeah, so we can
是的，所以我们看看 install_trans ，

1749
00:52:39,310 --> 00:52:40,930
0,240 240,450 450,540 540,960 960,1620
actually look at {install_trans -},|
|

1750
00:52:41,930 --> 00:52:43,100
0,120 120,390 390,570 570,930 930,1170
you see that actually that's
看看它是怎么做的。

1751
00:52:43,100 --> 00:52:44,480
0,150 150,210 210,810
what it does.|
|

1752
00:52:45,110 --> 00:52:46,040
0,300 300,510 510,600 600,870 870,930
It has a copy of
它有一个日志头的副本，

1753
00:52:46,040 --> 00:52:48,290
0,90 90,330 330,900 1230,1890 1890,2250
the log header| and use
|并且读取日志头，

1754
00:52:48,290 --> 00:52:50,750
0,270 300,630 630,930 930,1500 1830,2460
or reads log header, {}|
|

1755
00:52:50,750 --> 00:52:52,730
0,210 210,480 480,960 1020,1710 1710,1980
it reach the destination block
它到达目的块的原位置，

1756
00:52:52,730 --> 00:52:54,200
0,60 60,270 270,990
the home location,|
|

1757
00:52:54,290 --> 00:52:55,490
0,450 450,570 570,900 900,1110 1110,1200
copies the data from the
将数据从日志块复制到目的位置，

1758
00:52:55,490 --> 00:52:59,030
0,630 660,1230 1260,1740 1740,2160 2580,3540
log block into the destination,|
|

1759
00:52:59,360 --> 00:53:00,440
0,210 210,390 390,720 720,810 810,1080
and then writes the buffer
然后将缓冲区写入目的位置。

1760
00:53:00,440 --> 00:53:01,820
0,120 120,180 180,840
to the destination.|
|

1761
00:53:03,170 --> 00:53:04,260
0,660
Okay?|
好的？|

1762
00:53:04,730 --> 00:53:05,990
0,240 240,540 540,990 990,1140 1140,1260
So basically effectively what this
所以它所做的是

1763
00:53:05,990 --> 00:53:07,130
0,330 330,450 450,870 870,960 960,1140
does is| basically you know
|回到上一张幻灯片，

1764
00:53:07,130 --> 00:53:07,910
0,150 150,330 330,540 540,600 600,780
you go back to this

1765
00:53:07,910 --> 00:53:09,410
0,300 300,600 600,900 900,990 990,1500
previous slide here| and copies,
|它从日志中复制

1766
00:53:09,410 --> 00:53:10,460
0,90 90,330 540,690 690,870 870,1050
you know it just does

1767
00:53:10,460 --> 00:53:12,290
0,270 270,720 720,1050 1050,1260 1290,1830
these copies from the log|
|

1768
00:53:12,290 --> 00:53:13,640
0,330 330,450 450,660 660,1110 1110,1350
into the home location or
到原位置或文件系统中。

1769
00:53:13,640 --> 00:53:14,780
0,270 270,390 390,480 480,750 750,1140
actually in the file system.|
|

1770
00:53:17,160 --> 00:53:17,820
0,180 180,240 240,480 480,540 540,660
And of course you know
当然，我们可能会在这个代码中的某个地方出现故障，

1771
00:53:17,820 --> 00:53:18,750
0,120 120,300 300,450 450,480 480,930
we might get a failure

1772
00:53:18,750 --> 00:53:19,920
0,360 360,750 780,900 900,1020 1020,1170
somewhere in you know this

1773
00:53:19,920 --> 00:53:21,180
0,420 420,600 600,900 900,990 990,1260
code| or while we're doing
|或者在我们做这件事的时候，

1774
00:53:21,180 --> 00:53:22,680
0,450 750,1110 1140,1290 1290,1410 1410,1500
this,| but you know it
|但是这是可以的，

1775
00:53:22,680 --> 00:53:23,910
0,150 150,300 300,690 690,900 900,1230
should be okay,| because hopefully
|因为在恢复中会从头开始。

1776
00:53:23,910 --> 00:53:25,380
0,90 90,630 630,900 900,1170 1170,1470
in recovery will start over

1777
00:53:25,380 --> 00:53:26,520
0,180 180,240 240,600
from the beginning.|
|

1778
00:53:29,150 --> 00:53:30,620
0,240 240,450 450,900 900,1170 1170,1470
So let's look at we,
让我们看看，这就是安装。

1779
00:53:30,890 --> 00:53:32,540
0,570 570,690 690,810 810,930 930,1650
{} so that was installed.|
|

1780
00:53:33,160 --> 00:53:34,720
0,240 240,510 510,990 990,1080 1080,1560
So once install is done,|
所以，一旦安装完成，|

1781
00:53:35,750 --> 00:53:38,570
0,690 690,1590 1620,2460 2460,2550 2550,2820
then {} basically {} it
它会将内存中的头重新设置为 0 ，

1782
00:53:38,570 --> 00:53:40,490
0,450 450,600 600,780 780,960 960,1920
sets you know the in-memory

1783
00:53:40,940 --> 00:53:42,980
0,600 630,1050 1050,1320 1320,1410 1410,2040
header and back to 0|
|

1784
00:53:43,100 --> 00:53:44,240
0,150 150,300 300,690 690,900 900,1140
and then writes that log
然后写入日志头。

1785
00:53:44,240 --> 00:53:45,120
0,390
header.|
|

1786
00:53:45,500 --> 00:53:47,660
0,330 330,810 810,1320 1350,1620 1620,2160
And effectively that {} causes
并且引起清理日志，

1787
00:53:47,660 --> 00:53:49,980
0,630 960,1800
to {}

1788
00:53:50,810 --> 00:53:52,220
0,360 360,450 450,840 840,1050 1050,1410
cleans the log,| because basically
|因为现在是已经是 0 了。

1789
00:53:52,220 --> 00:53:53,270
0,180 180,360 360,720 720,810 810,1050
there's now 0 in it.|
|

1790
00:53:53,900 --> 00:53:54,960
0,600
Question?|
有什么问题？|

1791
00:53:56,130 --> 00:53:58,040
0,600 630,1170
{} So,
所以，你刚才说的函数，

1792
00:53:58,040 --> 00:54:00,340
0,780 1050,1650
you have

1793
00:54:00,340 --> 00:54:01,720
0,330 420,780 780,960 960,1140 1140,1380
the function you're in just

1794
00:54:01,720 --> 00:54:04,090
0,750 1020,1320 1320,1830 1860,2220 2220,2370
before,| like whereas, does the
|比如从什么到什么的东西，

1795
00:54:04,090 --> 00:54:06,280
0,300 330,750 1110,1260 1260,1680
from to, or to,

1796
00:54:06,370 --> 00:54:07,900
0,150 150,600 780,1020 1020,1230 1230,1530
or something,| so that puts
|它把你要更新的块，

1797
00:54:07,900 --> 00:54:09,320
0,270 270,840
the {},

1798
00:54:09,410 --> 00:54:10,610
0,150 150,570 570,690 690,870 870,1200
the block that you're going

1799
00:54:10,610 --> 00:54:13,790
0,120 120,660 930,1740 1800,2430 2640,3180
to like update,| {} {the,log}
|你要更新的日志到缓冲区缓存中，

1800
00:54:13,790 --> 00:54:14,780
0,120 120,210 210,360 360,510 540,990
that you're going to update

1801
00:54:14,780 --> 00:54:17,500
0,420 420,600 600,1290 1560,2250
into the buffer cache,|
|

1802
00:54:17,840 --> 00:54:19,190
0,660 690,870 870,990 990,1170 1170,1350
{} could you make it
是否让它变得更快，

1803
00:54:19,190 --> 00:54:21,110
0,510 510,1080 1200,1500 1500,1680 1680,1920
faster| by not putting into
|通过不放入缓冲区缓存，

1804
00:54:21,110 --> 00:54:22,250
0,90 90,480 480,840 840,930 930,1140
the buffer cache| and just
|而是直接写入设备。

1805
00:54:22,250 --> 00:54:24,600
0,390 390,690 690,960 990,1770
directly writing it to

1806
00:54:24,600 --> 00:54:26,420
0,180 180,600 600,1170
the device instead.|
|

1807
00:54:26,680 --> 00:54:29,470
0,390 390,1230 1230,1650 1950,2340 2340,2790
{} Let me {}, which
让我，我们说的是哪个函数？

1808
00:54:29,470 --> 00:54:31,080
0,300 300,420 420,690 690,1020
function we're talking about?|
|

1809
00:54:31,770 --> 00:54:34,740
0,240 1350,1680 1680,1860 1860,2340 2370,2970
I forget its name,| it's
我忘了它的名字，|就是那个复制所有的东西到日志里。

1810
00:54:34,740 --> 00:54:35,940
0,90 90,270 270,420 420,660 660,1200
the one, where you {}

1811
00:54:36,120 --> 00:54:37,560
0,900
copy,

1812
00:54:37,560 --> 00:54:38,790
0,180 180,510 510,660 660,780 780,1230
yeah, everything into the log.|
|

1813
00:54:39,030 --> 00:54:41,370
0,150 150,270 270,1020 1350,1770 1770,2340
{Okay -}, install {install_trans -}.|
好的， install_trans 。|

1814
00:54:42,920 --> 00:54:46,300
0,840 2010,2760
I {think,so}.|
我想是的。|

1815
00:54:47,160 --> 00:54:48,480
0,570 660,930 930,1020 1020,1170 1170,1320
Oh, maybe it was this
哦，也许是这个。

1816
00:54:48,480 --> 00:54:49,380
0,360
one.|
|

1817
00:54:50,220 --> 00:54:51,600
0,150 150,300 300,480 480,930 930,1380
So, this.| I thinking probably
所以，这个。|我想可能是 write_head ，但这是一样的。

1818
00:54:51,600 --> 00:54:53,130
0,120 120,360 360,750 900,1230 1260,1530
of {write_head -}, but it's

1819
00:54:53,130 --> 00:54:55,770
0,120 120,330 330,630 1050,1470 1500,2640
the same thing.| Okay, good.|
|好的。|

1820
00:54:57,630 --> 00:54:58,650
0,150 150,390 390,720 720,780 780,1020
The only reason { -
唯一的原因，

1821
00:54:58,650 --> 00:54:59,840
0,360
-

1822
00:54:59,840 --> 00:55:01,190
0,360 780,900 900,1080 1080,1260 1260,1350
-}, the only reason to

1823
00:55:01,190 --> 00:55:02,150
0,300 300,420 420,510 510,780 780,960
this,| you know basically our
|我们的接口不是特别好，

1824
00:55:02,150 --> 00:55:03,320
0,360 360,450 450,630 630,1020 1020,1170
interface is not particularly good,|
|

1825
00:55:03,320 --> 00:55:04,610
0,120 120,210 210,420 420,690 690,1290
you could just read straight,|
你可以直接读，|

1826
00:55:04,610 --> 00:55:06,440
0,60 60,720 870,1290 1290,1650 1650,1830
you know you're wondering why
你可能在想为什么要读，

1827
00:55:06,440 --> 00:55:07,370
0,90 90,210 210,450 450,540 540,930
you are doing the read,|
|

1828
00:55:07,980 --> 00:55:09,120
0,450 450,660 660,810 810,1050 1050,1140
{} there's no reason to
没有理由去读，

1829
00:55:09,120 --> 00:55:09,900
0,120 120,240 240,480 480,690 690,780
do the read,| because we're
|因为我们无论如何都要写，

1830
00:55:09,900 --> 00:55:11,940
0,120 120,180 180,450 450,900 1320,2040
going to write anyway, {}|
|

1831
00:55:12,210 --> 00:55:13,680
0,120 120,300 300,420 420,900
is that the question?|
是这个问题吗？|

1832
00:55:14,980 --> 00:55:16,750
0,450 480,870 870,1230 1260,1590 1590,1770
{} Yeah, that and you're
是的，而且你使用了 memmove 。

1833
00:55:16,750 --> 00:55:18,760
0,540 540,780 780,1050 1050,1200 1200,2010
also {} doing the memmove.|
|

1834
00:55:19,450 --> 00:55:20,560
0,180 180,390 390,480 480,870 870,1110
And did the memmove, yeah,|
使用了 memove ，是的，|

1835
00:55:20,620 --> 00:55:21,580
0,210 210,390 390,450 450,780 780,960
so these are actually a
所以这里是绝对可以优化的代码，

1836
00:55:21,580 --> 00:55:22,630
0,300 300,390 390,600 600,690 690,1050
sequence of code can definitely

1837
00:55:22,630 --> 00:55:24,190
0,90 90,750 840,1140 1140,1320 1320,1560
be optimized,| {} you can
|你可以节省一两次磁盘写入。

1838
00:55:24,190 --> 00:55:25,300
0,450 480,600 600,780 780,1020 1020,1110
save you know one or

1839
00:55:25,300 --> 00:55:26,600
0,150 150,390 390,840
two disk writes.|
|

1840
00:55:26,600 --> 00:55:28,730
0,270 270,510 510,930 960,1830 1860,2130
{} Just for simplicity, {}
为了简单起见，我们没有做任何这样的事情。

1841
00:55:28,730 --> 00:55:29,420
0,120 120,270 270,390 390,630 630,690
we don't do any of

1842
00:55:29,420 --> 00:55:30,240
0,270
that.|
|

1843
00:55:30,270 --> 00:55:31,820
0,480 510,690 690,930
Okay, thank you.|
好的，谢谢。|

1844
00:55:35,170 --> 00:55:37,100
0,600 660,1410
Okay, {}
好的，我想我们已经过了 commit ，

1845
00:55:37,580 --> 00:55:38,150
0,150 150,180 180,360 360,480 480,570
so I think we're in

1846
00:55:38,150 --> 00:55:40,220
0,540 570,930 930,1500
over {} commit,|
|

1847
00:55:40,410 --> 00:55:41,760
0,270 270,420 420,690 690,840 840,1350
just like, just go back
回去，再检查一下。

1848
00:55:42,840 --> 00:55:44,480
0,360 360,600 600,1140
and double check.|
|

1849
00:55:44,540 --> 00:55:45,470
0,450 450,600 600,720 720,840 840,930
{} So we did the
所以我们执行了 write_log ，

1850
00:55:45,470 --> 00:55:46,460
0,240 240,690 690,780 780,900 900,990
{write_log -},| we did the
|我们执行了 write_head ，

1851
00:55:46,460 --> 00:55:48,590
0,210 210,750 810,990 990,1320 1320,2130
{write_head -}| and basically this
|这里是清理操作，

1852
00:55:48,590 --> 00:55:50,180
0,90 90,390 390,1020
the cleaning operation,|
|

1853
00:55:50,430 --> 00:55:51,780
0,510 510,690 690,1140 1140,1230 1230,1350
{} we erased you know
我们通过给它设置 0 来清除事务。

1854
00:55:51,780 --> 00:55:53,550
0,570 570,900 930,1290 1290,1440 1440,1770
transaction by sending it to

1855
00:55:53,550 --> 00:55:55,300
0,480 600,1140
zero.| Okay?|
|好的？|

1856
00:55:55,880 --> 00:55:57,170
0,150 150,360 360,570 570,780 780,1290
So the only thing to
所以，唯一需要进一步了解的是，

1857
00:55:57,410 --> 00:55:58,970
0,360 360,810 810,960 960,1110 1110,1560
further inspect is| like how,
|恢复是如何进行的，

1858
00:55:58,970 --> 00:56:00,830
0,210 210,480 480,930 930,1320 1350,1860
how does recovery work| and
|所以，恢复发生在 xv6 开始时，

1859
00:56:01,250 --> 00:56:03,540
0,960
{so,recovery}

1860
00:56:03,540 --> 00:56:04,980
0,270 270,690 690,1230 1260,1350 1350,1440
{} happens when you know

1861
00:56:04,980 --> 00:56:07,380
0,210 210,690 690,1320 1740,2220 2220,2400
when xv6 starts,| {} so
|所以现在我们崩溃了，

1862
00:56:07,380 --> 00:56:08,370
0,210 210,330 330,480 480,510 510,990
now we had a crash,|
|

1863
00:56:08,370 --> 00:56:10,380
0,360 360,450 450,780 780,1410 1650,2010
and the system failed, {}
系统出了故障，我们重新启动它，

1864
00:56:10,380 --> 00:56:13,350
0,180 180,600 600,960 990,1650 2130,2970
we reboot it,| {} and
|xv6 首先做的事情之一，

1865
00:56:13,500 --> 00:56:15,870
0,900 1200,1920 1950,2220 2220,2310 2310,2370
{} the, one of the

1866
00:56:15,870 --> 00:56:17,640
0,240 240,450 450,960 960,1200 1560,1770
first things that xv6,| one
|xv6 在初始化期间做的一件事，

1867
00:56:17,640 --> 00:56:18,330
0,90 90,150 150,330 330,450 450,690
of the things that xv6

1868
00:56:18,330 --> 00:56:21,450
0,600 600,1170 1170,1920 1950,2850 2880,3120
does during {} initialization,| it
|它调用 initlog ，

1869
00:56:21,450 --> 00:56:23,020
0,510 510,630 630,690 690,1200
actually call {initlog -},|
|

1870
00:56:23,390 --> 00:56:25,580
0,390 390,1140 1140,1710 1710,2070 2070,2190
and initlog basically calls this
而 initlog 调用 recover_from_log 函数，

1871
00:56:25,580 --> 00:56:27,560
0,300 300,900 900,1470 1650,1860 1860,1980
function {recover_from_log -}| and so
|让我们看看它做了什么。

1872
00:56:27,560 --> 00:56:28,790
0,180 180,330 330,540 540,780 780,1230
let's see what that does.|
|

1873
00:56:30,110 --> 00:56:32,660
0,480 720,1350 1350,1710 1710,2310 2340,2550
And basically {recover_from_log -} {you,know}
recover_from_log 调用 read_head ，

1874
00:56:32,660 --> 00:56:34,920
0,720 900,1230 1230,1740
calls {read_head -},|
|

1875
00:56:34,920 --> 00:56:37,230
0,420 420,780 780,1140 1140,1980 2010,2310
{} to basically extract or
选取或读取。

1876
00:56:37,230 --> 00:56:38,800
0,390 390,990
read the.|
|

1877
00:56:39,300 --> 00:56:40,530
0,570 660,840 840,930 930,1140 1140,1230
Then, let me see if
让我看看能不能稍微向下滚动一下。

1878
00:56:40,530 --> 00:56:41,460
0,60 60,180 180,450 450,720 720,930
I can scroll down here

1879
00:56:41,460 --> 00:56:42,660
0,90 90,300 300,660
a little bit.|
|

1880
00:56:45,580 --> 00:56:46,810
0,480 480,690 690,780 780,1050 1050,1230
Basically reads the header from
从磁盘上读取头，

1881
00:56:46,810 --> 00:56:47,880
0,480
disk,|
|

1882
00:56:48,100 --> 00:56:49,920
0,270 270,600 600,750 750,1260
and sees if n,|
查看 n ，|

1883
00:56:49,920 --> 00:56:51,570
0,780 780,1110 1110,1320 1320,1500 1500,1650
{} well, doesn't really see
好的，并不是看 n 是否为 0 ，

1884
00:56:51,570 --> 00:56:52,260
0,150 150,300 300,360 360,630 630,690
if n is zero or

1885
00:56:52,260 --> 00:56:53,460
0,300 300,540 660,810 810,960 960,1200
not,| but it just calls
|它只是调用 install_trans ，

1886
00:56:53,460 --> 00:56:55,440
0,420 420,990 1140,1530 1530,1800 1800,1980
{install_trans -}| and {you,know} this
|这是一样的 install_trans ，

1887
00:56:55,440 --> 00:56:56,730
0,120 120,600 600,720 720,990 990,1290
is exactly the same {install_trans

1888
00:56:56,730 --> 00:56:57,930
0,360 360,540 540,720 720,930 930,1200
-}| we use look for
|和我们刚才看到的那个。

1889
00:56:57,930 --> 00:56:59,550
0,90 90,390 390,780 810,1500 1500,1620
it, for a look at

1890
00:56:59,550 --> 00:57:00,900
0,210 210,240 240,450 450,930 1170,1350
it a while ago.| And
|它查看 n ，

1891
00:57:00,900 --> 00:57:01,920
0,420 420,510 510,690 690,930 930,1020
basically you know look at

1892
00:57:01,920 --> 00:57:03,390
0,150 150,510 510,780 780,1320 1320,1470
the n| and installs all
|安装从 0 到 n 的所有块

1893
00:57:03,390 --> 00:57:04,500
0,90 90,390 390,510 510,930 930,1110
the blocks from 0 to

1894
00:57:04,500 --> 00:57:06,060
0,420 720,990 990,1080 1080,1170 1170,1560
n| out of the log
|从日志中到它们的原位置。

1895
00:57:06,060 --> 00:57:07,440
0,240 240,360 360,540 540,1020
into their home location.|
|

1896
00:57:07,850 --> 00:57:09,230
0,240 240,360 360,480 480,930 1020,1380
And if it's done,| once
如果它完成了，|一旦它成功了，

1897
00:57:09,230 --> 00:57:10,340
0,90 90,660 660,750 750,870 870,1110
it succeeds,| you know then
|它也像之前一样清除日志。

1898
00:57:10,340 --> 00:57:12,440
0,630 870,1020 1020,1320 1320,1590 1590,2100
actually it calls clear log

1899
00:57:12,940 --> 00:57:14,580
0,240 240,480 480,1080
{} as before.|
|

1900
00:57:14,820 --> 00:57:16,020
0,420 420,540 540,750 750,990 990,1200
And so that's actually all
所以，这就是恢复所做的，

1901
00:57:16,020 --> 00:57:17,670
0,180 180,240 240,630 630,1140 1140,1650
what the recovery does,| recovery
|恢复总是调用安装。

1902
00:57:17,670 --> 00:57:19,740
0,90 90,630 660,1140 1140,1740 1740,2070
is basically always call does

1903
00:57:19,740 --> 00:57:20,920
0,630
installation.|
|

1904
00:57:21,010 --> 00:57:22,600
0,180 180,270 270,390 390,1050 1110,1590
And if we crash during
如果我们在安装时发生故障，

1905
00:57:22,600 --> 00:57:25,090
0,510 510,1140 1530,1740 1740,2130 2130,2490
installation here,| no particular problem
|也没有什么问题，

1906
00:57:25,090 --> 00:57:26,680
0,330 330,630 630,840 840,990 990,1590
again, correct,| because we'll crash,
|因为我们崩溃，重启，

1907
00:57:26,710 --> 00:57:28,930
0,210 210,720 1020,1650 1650,2010 2010,2220
we'll boot,| {} {xv6 -}
|xv6 重启会调用 loginit ，

1908
00:57:28,930 --> 00:57:31,210
0,450 450,600 600,1170 1200,1950 1980,2280
rebooting will call {} {loginit

1909
00:57:31,210 --> 00:57:32,320
0,150 150,450 630,810 810,900 900,1110
- -},| which will call
|它会调用 recover_from_log ，

1910
00:57:32,320 --> 00:57:33,700
0,450 450,990 1020,1200 1200,1290 1290,1380
{recover_from_log -}| and it will
|并且它会重新安装日志，

1911
00:57:33,700 --> 00:57:35,740
0,630 660,930 930,1500 1500,1920 1920,2040
basically {re-install -}, replay the

1912
00:57:35,740 --> 00:57:37,810
0,300 300,420 420,900 900,1320 1560,2070
log is sometimes called again,|
|

1913
00:57:37,870 --> 00:57:39,760
0,510 630,840 840,1050 1050,1410 1650,1890
and this might have, this
这可能会结束，

1914
00:57:39,760 --> 00:57:40,900
0,210 210,510 570,960 960,1050 1050,1140
might end,| {} if we
|如果我们每次都崩溃或崩溃很多次，

1915
00:57:40,900 --> 00:57:42,520
0,330 330,660 660,1260 1260,1500 1500,1620
crash every time or you

1916
00:57:42,520 --> 00:57:44,170
0,180 210,450 450,660 660,1230 1500,1650
know many many times,| you
|我们会多次重新安装日志，

1917
00:57:44,170 --> 00:57:46,030
0,270 270,870 870,1410 1410,1500 1500,1860
know we'll re-install or replay

1918
00:57:46,030 --> 00:57:46,930
0,120 120,390 390,540 540,720 720,900
the log many many many

1919
00:57:46,930 --> 00:57:48,400
0,390 450,690 690,990 990,1410 1410,1470
times,| they'll tell hopefully at
|希望在某一时刻它会成功，

1920
00:57:48,400 --> 00:57:50,050
0,150 150,330 330,390 390,1080 1200,1650
some point it succeeds| and
|写入所有日志，

1921
00:57:50,050 --> 00:57:51,070
0,450 450,540 540,660 660,930 930,1020
actually you know gets the

1922
00:57:51,070 --> 00:57:53,680
0,510 510,900 900,1320 2250,2520 2520,2610
whole log written,| gets the
|安装整个日志，

1923
00:57:53,680 --> 00:57:55,090
0,270 270,570 570,1200 1230,1290 1290,1410
whole log installed,| you know
|到原位置。

1924
00:57:55,090 --> 00:57:55,900
0,180 180,480
to the,

1925
00:57:56,860 --> 00:57:58,260
0,120 120,180 180,330 330,930
{} to home locations.|
|

1926
00:57:59,430 --> 00:58:00,640
0,120 120,180 180,300 300,600
Does it make sense?|
这能理解吗？|

1927
00:58:03,580 --> 00:58:04,810
0,210 210,210 210,540 540,630 630,1230
{} I had a question
我有个问题，关于，

1928
00:58:04,810 --> 00:58:07,270
0,600 930,1200 1200,1410 1410,1560 1560,2460
about,| so if a process
|所以，如果一个进程正常运行，

1929
00:58:07,300 --> 00:58:09,550
0,420 420,720 720,1500 1650,1920 1920,2250
just runs normally,| it writes
|它写入一些数据到磁盘中，

1930
00:58:09,550 --> 00:58:12,070
0,420 450,1080 1110,1320 1320,2010 2370,2520
some data to disk,| and
|然后在之后的某个时刻，

1931
00:58:12,070 --> 00:58:12,940
0,120 120,240 240,420 420,630 630,870
then at some point after

1932
00:58:12,940 --> 00:58:15,640
0,450 630,1740 1830,2190 2190,2610 2610,2700
that,| before it commits and
|在提交并安装更改之前，

1933
00:58:15,640 --> 00:58:17,280
0,450 450,510 510,1230
installs the changes,|
|

1934
00:58:17,370 --> 00:58:19,410
0,240 240,600 600,750 750,1500 1560,2040
{} there's a failure, {}|
有一个失败，|

1935
00:58:19,530 --> 00:58:21,060
0,210 210,1110
the process,
从更多的过程的角度来看，什么都没有发生，

1936
00:58:21,180 --> 00:58:22,230
0,210 210,450 450,780 780,990 990,1050
the further process point of

1937
00:58:22,230 --> 00:58:23,300
0,540
view,

1938
00:58:23,450 --> 00:58:25,910
0,360 360,930 930,1320 1350,1830 1830,2460
nothing happened,| but something like,|
|但是，|

1939
00:58:26,880 --> 00:58:27,870
0,120 120,300 300,390 390,720 720,990
I guess the failure happened
我想失败发生在我所做的事情结束后，

1940
00:58:27,870 --> 00:58:31,050
0,330 330,720 840,1710 1830,2520 2850,3180
after the process end of

1941
00:58:31,050 --> 00:58:32,880
0,210 210,510 510,660 660,1380
what I was doing,|
|

1942
00:58:33,060 --> 00:58:34,410
0,240 240,420 420,660 660,1110 1110,1350
so, is there anything bad
这有什么不好吗？

1943
00:58:34,410 --> 00:58:35,680
0,270 270,690
about that?|
|

1944
00:58:36,170 --> 00:58:37,790
0,420 420,660 660,1230 1230,1470 1470,1620
Not hundred percent getting it,|
不是百分之百明白，|

1945
00:58:37,790 --> 00:58:40,670
0,720 960,1770 2250,2580 2580,2820 2820,2880
but a short answer is
但简短的回答是没什么不好的，

1946
00:58:40,670 --> 00:58:42,020
0,120 120,360 360,780 810,1260 1260,1350
there's nothing bad,| because the
|因为磁盘根本不会更新，

1947
00:58:42,020 --> 00:58:43,160
0,240 240,540 540,630 630,1080 1080,1140
disk won't be updated at

1948
00:58:43,160 --> 00:58:44,810
0,330 360,570 570,810 810,990 990,1650
all,| so just as if
|所以就像文件系统操作没有发生一样。

1949
00:58:44,840 --> 00:58:46,160
0,150 150,540 570,780 780,1020 1020,1320
you know that file system

1950
00:58:46,160 --> 00:58:47,720
0,390 390,630 630,1080
operation didn't happen.|
|

1951
00:58:48,130 --> 00:58:49,460
0,750
Alright,
好的，我想。

1952
00:58:50,180 --> 00:58:52,520
0,390 390,780 810,1500 1500,2040 2040,2340
I guess.| Process disappears too,|
|进程也消失了，|

1953
00:58:52,520 --> 00:58:53,600
0,330
but,
但是，无论如何我们不希望进程在故障中幸存下来。

1954
00:58:53,600 --> 00:58:54,620
0,120 120,330 360,540 540,720 720,1020
you know we don't expect

1955
00:58:54,620 --> 00:58:55,970
0,60 60,480 480,600 600,990 990,1350
the process to survive failures

1956
00:58:55,970 --> 00:58:57,000
0,450
anyway.|
|

1957
00:58:58,150 --> 00:59:00,020
0,570 720,1290
Right or
好的，我猜，

1958
00:59:00,020 --> 00:59:01,200
0,90 90,720
I guess,|
|

1959
00:59:01,200 --> 00:59:02,550
0,600 600,750 750,990 990,1170 1170,1350
okay I I think that
好的，我想这回答了我的问题，谢谢。

1960
00:59:02,550 --> 00:59:04,050
0,210 210,300 300,750 780,1020 1020,1500
answers my question, thank you.|
|

1961
00:59:05,720 --> 00:59:07,280
0,180 180,870 870,1200 1200,1260 1260,1560
Yeah, it's important to remember
是的，记住这一点很重要

1962
00:59:07,280 --> 00:59:09,710
0,90 90,840 1680,1830 1830,2250 2250,2430
to| basically the only thing
|在失败中幸存下来的唯一一件事，

1963
00:59:09,710 --> 00:59:11,450
0,150 150,420 420,870 870,1470 1500,1740
that really survives failures| or
|

1964
00:59:11,450 --> 00:59:13,070
0,210 210,720 720,1050 1050,1440 1440,1620
that's persistence across failures is|
或者具有跨失败的持久性是|

1965
00:59:13,070 --> 00:59:14,180
0,180 180,540 540,660 660,750 750,1110
the disk or the state
磁盘或磁盘上的状态，没有别的。

1966
00:59:14,180 --> 00:59:15,650
0,90 90,180 180,600 690,1020 1020,1470
on the disk nothing else,

1967
00:59:15,680 --> 00:59:16,420
0,300
right.|
|

1968
00:59:19,620 --> 00:59:21,060
0,390 390,810 810,810 810,1350 1350,1440
Okay, so {} just to
好的，为了让这一切具体化，让我们再来一次。

1969
00:59:21,060 --> 00:59:22,740
0,150 150,270 270,480 480,1110 1140,1680
make this all concrete, one

1970
00:59:22,740 --> 00:59:24,450
0,330 330,570 570,840 840,1140 1140,1710
little more to let's {}.|
|

1971
00:59:25,160 --> 00:59:28,400
0,240 240,510 510,1170 2040,2760 2760,3240
I put a statement in
我写了一份声明，

1972
00:59:28,400 --> 00:59:29,990
0,270 270,510 510,870 870,1260 1260,1590
{} {bwrite -},| so actually
|所以实际上真正写入磁盘的东西，就像挡路缓存中的东西。

1973
00:59:29,990 --> 00:59:31,040
0,90 90,240 240,420 420,660 660,1050
the thing that actually does

1974
00:59:31,040 --> 00:59:32,360
0,210 210,300 300,780 810,1140 1140,1320
write to disk, like in

1975
00:59:32,360 --> 00:59:33,920
0,300 330,1020
the {block,cache}.|
|

1976
00:59:33,920 --> 00:59:34,940
0,240 240,420 420,540 540,600 600,1020
And we're going to see
我们要看看实际磁盘写入的轨迹是什么。

1977
00:59:34,940 --> 00:59:37,160
0,270 270,750 780,1380 1380,1740 1770,2220
what the trace of actual

1978
00:59:37,160 --> 00:59:38,540
0,240 240,510 510,810
disk writes are.|
|

1979
00:59:38,600 --> 00:59:40,130
0,240 240,480 480,870 870,960 960,1530
{} Because basically on Monday
因为基本上在周一，我没有说出全部真相，

1980
00:59:40,130 --> 00:59:42,120
0,180 180,390 390,690 720,1440
I sort of {},

1981
00:59:43,890 --> 00:59:44,640
0,120 120,330 330,480 480,540 540,750
I didn't tell the full

1982
00:59:44,640 --> 00:59:46,260
0,570 600,1050 1050,1350 1350,1440 1440,1620
truth,| because basically I put
|因为基本上我将print语句放在log_write中，而不是放在bwrite中，

1983
00:59:46,260 --> 00:59:47,580
0,90 90,330 330,780 780,990 990,1320
the print statement in {log_write

1984
00:59:47,580 --> 00:59:49,110
0,420 450,660 660,1020 1020,1290 1290,1530
-} and not in {bwrite

1985
00:59:49,110 --> 00:59:50,370
0,450 540,900 900,1020 1020,1170 1170,1260
-},| and so now I
|现在我把它放入写操作，这样我们就可以看到所有的数据块都在被写入。

1986
00:59:50,370 --> 00:59:51,120
0,150 150,240 240,420 420,570 570,750
put it in the {bwrite

1987
00:59:51,120 --> 00:59:51,870
0,270 270,360 360,480 480,600 600,750
-} and so we can

1988
00:59:51,870 --> 00:59:53,070
0,210 210,600 600,780 780,900 900,1200
actually see all the blocks

1989
00:59:53,070 --> 00:59:54,180
0,60 60,300 300,600
are being written.|

1990
00:59:54,380 --> 00:59:55,160
0,210 210,330 330,420 420,540 540,780
So we'll do the same
所以我们要做和以前一样的事情，你知道Echo hi x，

1991
00:59:55,160 --> 00:59:56,420
0,150 150,270 270,810 810,960 960,1260
thing as before, {you,know} echo

1992
00:59:56,420 --> 00:59:58,280
0,300 300,870 1230,1380 1380,1620 1620,1860
hi x,| and just look
|看看实际的磁盘写入情况。

1993
00:59:58,280 --> 00:59:59,510
0,120 120,420 420,570 570,960 960,1230
at actually the actual disk

1994
00:59:59,510 --> 01:00:00,460
0,420
writes.|
|

1995
01:00:01,120 --> 01:00:01,840
0,210 210,330 330,450 450,540 540,720
And see if that makes
看看这是否有意义

1996
01:00:01,840 --> 01:00:02,980
0,450 510,690 690,840 840,900 900,1140
sense,| {you,know} so the first
|你知道，首先要正确注意的是，这条轨迹比我们上次看到的轨迹要长得多，

1997
01:00:02,980 --> 01:00:03,940
0,120 120,180 180,510 510,840 840,960
thing to note correctly, that

1998
01:00:03,940 --> 01:00:06,070
0,150 150,540 540,780 780,1440 1830,2130
this traces way longer than

1999
01:00:06,070 --> 01:00:06,880
0,60 60,360 360,480 480,600 600,810
the trace that we looked

2000
01:00:06,880 --> 01:00:07,750
0,90 90,360 360,510 510,570 570,870
at last time,| the fact
|事实上，我们在几张幻灯片前看过一张幻灯片，对吧。

2001
01:00:07,750 --> 01:00:09,010
0,180 180,300 300,510 510,660 660,1260
that we looked at a

2002
01:00:09,010 --> 01:00:10,210
0,330 330,360 360,600 600,870 870,1200
slide a couple slides ago,

2003
01:00:10,270 --> 01:00:11,100
0,330
right.|
|

2004
01:00:11,480 --> 01:00:12,440
0,300 300,450 450,720 720,900 900,960
Because you're looking at, in
因为你在看，实际上你只是演示了这一点，

2005
01:00:12,440 --> 01:00:14,120
0,390 390,540 540,780 780,1320 1320,1680
fact you just demonstrate this,|
|

2006
01:00:15,440 --> 01:00:18,410
0,630 630,1050 1050,1230 1230,1530 1560,2970
{} here was the same
这是同样的回声，嗨，正确。

2007
01:00:18,770 --> 01:00:20,760
0,360 360,960 990,1440
echo hi correct.|
|

2008
01:00:20,980 --> 01:00:22,300
0,630 630,810 810,870 870,990 990,1320
And when we see there's
当我们看到只有5个日志写入操作时，

2009
01:00:22,300 --> 01:00:24,360
0,180 180,690 1140,1590
like only it's

2010
01:00:24,390 --> 01:00:26,760
0,510 510,780 780,1020 1020,1830 2010,2370
five log write operations,| but
|但是它会变成很多磁盘操作，对吧。

2011
01:00:26,760 --> 01:00:29,490
0,90 90,390 390,960 1620,2370 2400,2730
it turns into many disk

2012
01:00:29,490 --> 01:00:30,660
0,720
operations,

2013
01:00:31,670 --> 01:00:32,660
0,450
right.|
|

2014
01:00:32,780 --> 01:00:33,650
0,150 150,330 330,480 480,570 570,870
So let's look at it.|
那么让我们来看看它。|

2015
01:00:34,680 --> 01:00:36,840
0,660 840,990 990,1170 1170,1680 1680,2160
{} So what we think
所以我们认为bwrite 3，4和5是什么，bwrite 2是什么。

2016
01:00:36,840 --> 01:00:38,160
0,150 150,450 450,870 870,1200 1200,1320
{bwrite -} three four and

2017
01:00:38,160 --> 01:00:39,390
0,300 300,750 840,960 960,1110 1110,1230
five are and what is

2018
01:00:39,390 --> 01:00:40,660
0,150 150,390 390,720
{bwrite -} 2.|
|

2019
01:00:48,710 --> 01:00:49,880
0,660
Anybody?|
有人吗？|

2020
01:00:50,080 --> 01:00:52,300
0,300 570,1080 1080,1500 1500,1650 1650,2220
So writing to the log
所以先写日志，然后写超级挡路。

2021
01:00:52,330 --> 01:00:53,620
0,90 90,270 270,360 360,690 690,1290
and then the super block.|
|

2022
01:00:54,580 --> 01:00:56,500
0,570 570,630 630,870 870,1410 1530,1920
Not the super block.| Now
不是超级挡路。|现在让我们假设log_head。

2023
01:00:56,500 --> 01:00:57,610
0,210 210,360 360,630 630,810 810,1110
let's say that {log_head -}.|
|

2024
01:00:57,640 --> 01:00:59,620
0,150 150,960 1440,1710 1710,1890 1890,1980
Yeah, so just look at
是啊，看看吧，你说对了，

2025
01:00:59,620 --> 01:01:00,550
0,240 240,360 360,510 510,630 630,930
{}, you got it right,|
|

2026
01:01:00,550 --> 01:01:01,270
0,90 90,210 210,420 420,630 630,720
you know just looking at
你知道，再看一遍这张照片，对吗，

2027
01:01:01,270 --> 01:01:02,830
0,120 120,390 390,690 690,1020 1410,1560
this picture again, correct,| the
|日志结构2，如果您愿意的话，这可能是提交记录的标题挡路，

2028
01:01:02,830 --> 01:01:04,780
0,270 270,540 540,1020 1050,1530 1590,1950
log structure two, so, {}

2029
01:01:04,780 --> 01:01:06,070
0,270 270,540 540,600 600,810 810,1290
that's probably the header block

2030
01:01:06,460 --> 01:01:07,360
0,120 120,420 420,690 690,780 780,900
to commit record if you

2031
01:01:07,360 --> 01:01:08,950
0,360 750,900 900,1170 1170,1500 1500,1590
will,| and then freeze the
|然后冻结第一个数据挡路，[]第二个数据挡路，找到第三个数据挡路。

2032
01:01:08,950 --> 01:01:10,360
0,240 240,480 480,960 960,1320 1320,1410
first data block, [] the

2033
01:01:10,360 --> 01:01:11,710
0,270 270,450 450,720 720,1020 1020,1350
second data block, finds {the,third}

2034
01:01:11,710 --> 01:01:12,700
0,210 210,600
data block.|
|

2035
01:01:13,540 --> 01:01:14,920
0,360 360,570 570,1050 1080,1200 1200,1380
So going back, you know
回过头来看，这是第一次写入，第二次写入，第三次写入，

2036
01:01:14,920 --> 01:01:16,870
0,210 210,480 1020,1140 1140,1410 1410,1950
this is the first write,

2037
01:01:17,630 --> 01:01:19,310
0,120 120,420 420,1020 1110,1380 1380,1680
the second write, the third

2038
01:01:19,310 --> 01:01:21,710
0,480 900,1080 1080,1230 1230,1560 1560,2400
write,| they're all going into
|它们都会进入日志，并被写入磁盘，

2039
01:01:21,740 --> 01:01:23,600
0,120 120,690 1170,1440 1440,1620 1620,1860
the log and they're written

2040
01:01:23,600 --> 01:01:24,800
0,210 210,690
to disk,|
|

2041
01:01:24,890 --> 01:01:26,060
0,210 210,420 420,480 480,870 870,1170
{} in the log log
在磁盘的日志日志部分中，

2042
01:01:26,060 --> 01:01:27,320
0,210 210,300 300,390 390,840 1110,1260
part of the disk,| and
|然后这是提交记录头。

2043
01:01:27,320 --> 01:01:28,880
0,180 180,360 360,510 510,990 1260,1560
then this is the commit

2044
01:01:28,880 --> 01:01:31,000
0,510 930,1590
record header.|
|

2045
01:01:31,060 --> 01:01:31,930
0,150 150,270 270,630 630,780 780,870
And then presumably what is
然后大概这张脸是什么。

2046
01:01:31,930 --> 01:01:33,260
0,210 210,750
this face.|
|

2047
01:01:41,720 --> 01:01:43,220
0,240 240,300 300,510 510,960
What is this part?|
这部分是什么？|

2048
01:01:43,340 --> 01:01:44,510
0,150 150,360 360,600 600,810 810,1170
Is that the {bitmap -}
这是位图设置吗？

2049
01:01:44,540 --> 01:01:45,600
0,540
setting?|
|

2050
01:01:45,900 --> 01:01:47,580
0,810 1080,1290 1290,1440 1440,1500 1500,1680
No, so what do we
不，那么我们认为这三个字母中实际上存储了什么。

2051
01:01:47,580 --> 01:01:48,780
0,180 180,510 510,900 900,990 990,1200
think actually stored in this

2052
01:01:48,780 --> 01:01:50,240
0,210 210,480 480,930
{bwrite -} three.|
|

2053
01:01:51,980 --> 01:01:54,800
0,780 780,1320 1350,2070 2070,2190 2190,2820
Here you creating the file
在这里，您创建了x的inode文件，

2054
01:01:54,950 --> 01:01:57,080
0,600 930,1260 1380,1650 1650,1950 1950,2130
of the {inode -} for

2055
01:01:57,080 --> 01:02:00,410
0,360 360,1500 1530,2220 2250,3090 3090,3330
x,| updating the directory and
|更新目录，然后实际制作文件本身。

2056
01:02:00,410 --> 01:02:02,120
0,240 240,780 780,1260 1260,1620 1620,1710
then also actually making the

2057
01:02:02,120 --> 01:02:03,360
0,270 270,780
file itself.|
|

2058
01:02:03,360 --> 01:02:04,830
0,270 270,390 390,600 600,870 870,1470
Yeah, and so and we
是的，所以我们没有在这里做，对吧，

2059
01:02:04,830 --> 01:02:05,760
0,180 180,300 300,390 390,690 690,930
didn't do it here, right,|
|

2060
01:02:05,760 --> 01:02:07,440
0,420 480,690 690,900 900,1110 1110,1680
because in these {bwrites -}
因为在这些笔迹里这并没有发生。

2061
01:02:07,500 --> 01:02:08,900
0,180 180,420 420,810
that didn't happen.|
|

2062
01:02:08,900 --> 01:02:10,360
0,240 240,330 330,570 570,900
Now we're doing it.|
现在我们正在做这件事。|

2063
01:02:11,090 --> 01:02:12,890
0,210 210,510 510,900 960,1200 1200,1800
So what, what what phases
那么，交易的哪些阶段。

2064
01:02:12,890 --> 01:02:14,300
0,90 90,180 180,810
of the transaction.|
|

2065
01:02:16,200 --> 01:02:18,690
0,780 780,900 900,1740 1770,2130 2130,2490
Installing the changes.| Yeah, installing
正在安装更改。|是的，安装更改，正确，

2066
01:02:18,690 --> 01:02:19,680
0,90 90,480 480,750 750,900 900,990
the changes, correct,| what we
|我们在这里做的是，我们记录写入，

2067
01:02:19,680 --> 01:02:21,400
0,180 180,630 630,1080
did here is,

2068
01:02:21,490 --> 01:02:22,620
0,570
we

2069
01:02:22,910 --> 01:02:24,980
0,600 600,780 780,1350 1740,1980 1980,2070
log the write,| then we
|然后，我们提交文件系统操作以创建操作

2070
01:02:24,980 --> 01:02:27,470
0,630 780,1500 1530,1800 1800,2070 2070,2490
committed the file system operation

2071
01:02:27,470 --> 01:02:28,670
0,60 60,360 360,900 900,1020 1020,1200
to create operation| and now
|现在我们正在安装它。

2072
01:02:28,670 --> 01:02:30,100
0,60 60,600 600,870
we're installing it.|
|

2073
01:02:30,430 --> 01:02:31,210
0,180 180,360 360,510 510,690 690,780
For now we're putting the
现在我们把积木放在它们的原址上。

2074
01:02:31,210 --> 01:02:32,440
0,270 270,330 330,450 450,600 600,1230
blocks in their home location.|
|

2075
01:02:34,300 --> 01:02:35,840
0,240 240,1020
And now,
现在呢，这写的是什么呢，两个[然后]。

2076
01:02:35,990 --> 01:02:36,680
0,150 150,240 240,330 330,540 540,690
and what does this {bwrite

2077
01:02:36,680 --> 01:02:37,980
0,210 210,360 360,690
-} two [then].|
|

2078
01:02:44,500 --> 01:02:46,000
0,570 570,660 660,1260 1260,1410 1410,1500
Clearing the log.| Yeah, it's
清除日志。|是啊，确实是清晰的原木。

2079
01:02:46,000 --> 01:02:47,760
0,270 270,600 600,1140
clear log exactly.|
|

2080
01:02:47,760 --> 01:02:49,260
0,210 210,570 570,930 930,1140 1140,1500
So basically this, this this,
所以基本上这个系统叫三三四六三二

2081
01:02:50,510 --> 01:02:51,740
0,150 150,450 450,780 780,900 900,1230
the system called was writing

2082
01:02:51,740 --> 01:02:53,030
0,300 300,510 510,750 750,990 990,1290
{33 -} {46 -} {32

2083
01:02:53,030 --> 01:02:54,650
0,510 810,1140 1140,1260 1260,1500 1500,1620
-}| and to actually do
|为了真正做到这一点，使用记录系统，基本上变成了这组磁盘写入，

2084
01:02:54,650 --> 01:02:56,150
0,420 420,690 690,780 780,1050 1050,1500
that using the logging system

2085
01:02:56,150 --> 01:02:57,470
0,150 150,450 450,720 720,1020 1020,1320
that basically turns into this

2086
01:02:57,470 --> 01:02:58,560
0,210 210,510
set of

2087
01:02:59,280 --> 01:03:01,080
0,540 540,1230
{} {disk,write},|
|

2088
01:03:01,620 --> 01:03:02,760
0,210 210,510 510,600 600,870 870,1140
right, where the first part
对，第一部分是安装日志，第一部分实际上是记录写入，第二部分是安装日志。

2089
01:03:02,760 --> 01:03:04,260
0,240 240,870 870,990 990,1350 1350,1500
is installing the log, in

2090
01:03:04,320 --> 01:03:05,250
0,60 60,330 330,540 540,690 690,930
the first part is actually

2091
01:03:05,250 --> 01:03:06,240
0,420 420,510 510,810 810,900 900,990
logging the writes, in the

2092
01:03:06,240 --> 01:03:07,530
0,270 270,540 540,720 720,1170 1170,1290
second part is installing the

2093
01:03:07,530 --> 01:03:08,380
0,330
log.|
|

2094
01:03:09,860 --> 01:03:10,610
0,180 180,390 390,480 480,540 540,750
And these are the two
这是由于提交记录而导致的两个写入。

2095
01:03:10,610 --> 01:03:11,810
0,270 270,360 360,450 450,690 690,1200
writes due to commit records.|
|

2096
01:03:15,040 --> 01:03:15,910
0,120 120,180 180,330 330,660 750,870
So it makes sense?| Is
所以这有道理吗？|是否可以从该跟踪推断BEGIN_OP和END_OP将在何处运行。

2097
01:03:15,910 --> 01:03:17,890
0,210 210,600 600,780 780,1380 1380,1980
it possible to infer where

2098
01:03:17,890 --> 01:03:19,720
0,360 360,750 840,1320 1320,1500 1500,1830
{begin_op -} and {end_op -}

2099
01:03:19,720 --> 01:03:21,160
0,150 150,570 660,840 840,990 990,1440
would run from this trace.|
|

2100
01:03:21,760 --> 01:03:23,740
0,630 630,1050 1080,1320 1320,1800 1800,1980
{} Well, so we're sort
嗯，所以我们有点不同意，对吧，

2101
01:03:23,740 --> 01:03:25,120
0,90 90,480 510,900 900,1050 1050,1380
of no, correct,| so where
|那么，我们不知道Begin_op是从哪里开始的，

2102
01:03:25,120 --> 01:03:26,500
0,330 330,330 330,990 990,1200 1200,1380
did, {} we don't really

2103
01:03:26,500 --> 01:03:27,400
0,120 120,240 240,480 480,660 660,900
know what {begin_op -} start,|
|

2104
01:03:27,400 --> 01:03:29,590
0,960 990,1320 1320,1590 1590,1860 1860,2190
{but,this,is} any file system calls
但这是任何以BEGIN_OP开头的文件系统调用。

2105
01:03:29,590 --> 01:03:30,550
0,270 270,360 360,450 450,720 720,960
starts with the {begin_op -}.|
|

2106
01:03:31,420 --> 01:03:32,530
0,600 600,720 720,960 960,1050 1050,1110
And it must be the
并且必须是这样的情况，提交记录正确地写在end_op中，

2107
01:03:32,530 --> 01:03:33,840
0,360 360,720
case that,

2108
01:03:33,900 --> 01:03:35,400
0,180 180,480 480,780 780,1080 1080,1500
the commit record, correct is

2109
01:03:35,430 --> 01:03:38,400
0,870 870,1380 1380,1710 1710,2100 2460,2970
written in {end_op -},| so
|所以我们知道这是一些文件系统操作的end_op。

2110
01:03:39,110 --> 01:03:39,920
0,180 180,390 390,540 540,690 690,810
we know that this is

2111
01:03:39,920 --> 01:03:41,080
0,570
the

2112
01:03:41,140 --> 01:03:42,970
0,780 840,1110 1110,1440 1440,1620 1620,1830
{} {end_op -} of some

2113
01:03:42,970 --> 01:03:44,620
0,240 240,480 480,1080
file system operation.|
|

2114
01:03:48,010 --> 01:03:49,500
0,150 150,360 360,510 510,900
Does that make sense?|
这说得通吗？|

2115
01:03:53,270 --> 01:03:55,580
0,240 240,360 360,570 570,1320 1740,2310
Okay, so that's basically xv6
好的，这基本上就是xv6登录，

2116
01:03:55,580 --> 01:03:58,520
0,390 570,1230 1230,1350 1350,1770 2160,2940
logging logging in action {},|
|

2117
01:03:58,880 --> 01:04:00,140
0,480 480,900 900,930 930,1110 1110,1260
and when I talk about
当我谈到几个并发症时，

2118
01:04:00,140 --> 01:04:03,050
0,60 60,360 360,1230 1560,2280 2280,2910
a couple complications,| {} and
|即使是这种极其简单、幼稚的伐木方案实际上也有其复杂性。

2119
01:04:03,320 --> 01:04:06,740
0,330 330,750 810,1410 1410,2040 2250,3420
even this dirt simple naive

2120
01:04:06,770 --> 01:04:08,930
0,360 360,690 690,1050 1050,1440 1440,2160
{} logging scheme actually has

2121
01:04:08,960 --> 01:04:10,280
0,900
complications.|
|

2122
01:04:10,540 --> 01:04:11,830
0,300 300,600 600,780 780,900 900,1290
{} One thing to immediately
当然，需要立即注意的一件事是，您知道这是一个非常高性能的实现。

2123
01:04:11,830 --> 01:04:13,480
0,150 150,240 240,510 510,750 1230,1650
note of course is, {}

2124
01:04:13,960 --> 01:04:14,960
0,450
{you,know}

2125
01:04:15,640 --> 01:04:16,300
0,120 120,270 270,330 330,570 570,660
is this a very {performance

2126
01:04:16,300 --> 01:04:18,000
0,330 330,1140
-} implementation.|
|

2127
01:04:18,710 --> 01:04:19,400
0,150 150,210 210,300 300,600 600,690
Did you by looking at
你有没有看过这个痕迹。

2128
01:04:19,400 --> 01:04:20,580
0,90 90,660
this trace.|
|

2129
01:04:26,990 --> 01:04:30,650
0,630 1200,1800 1800,2280 3330,3450 3450,3660
No.| Why not, I know
不是的。|为什么不呢，我知道这基本上是两个简单的问题，但问一问很重要。

2130
01:04:30,650 --> 01:04:31,820
0,180 180,300 300,420 420,1020 1020,1170
this is a basically two

2131
01:04:31,820 --> 01:04:33,480
0,300 300,690 690,930
simple questions, but

2132
01:04:33,740 --> 01:04:35,340
0,240 240,540 540,630 630,1050
it's important to ask.|
|

2133
01:04:36,510 --> 01:04:37,840
0,990
Like,
就像，你写对了两遍。

2134
01:04:39,460 --> 01:04:40,900
0,270 270,570 570,720 720,990 990,1440
you're writing the stuff twice

2135
01:04:40,900 --> 01:04:42,430
0,330 360,930 930,1080 1080,1260 1260,1530
right.| Yeah, you're writing {your,stuff}
|是啊，你写了两遍你的东西，

2136
01:04:42,430 --> 01:04:43,750
0,360 360,780 780,990 990,1020 1020,1320
twice,| you write a file
|你写一个文件f或一个大文件f，

2137
01:04:43,750 --> 01:04:44,590
0,240 240,330 330,420 420,600 600,840
f or a big file

2138
01:04:44,590 --> 01:04:45,490
0,330 360,510 510,630 630,720 720,900
f,| I'm going to write
|我要把那个大文件f写两次。

2139
01:04:45,490 --> 01:04:46,660
0,150 150,330 330,540 540,660 660,1170
that big file f twice.|
|

2140
01:04:48,000 --> 01:04:50,070
0,270 270,660 840,1320 1440,1890 1890,2070
And so, {} certainly not
因此，当然不是特别高的性能，

2141
01:04:50,070 --> 01:04:51,210
0,360 360,480 480,960 960,1110 1110,1140
particularly high performance,| where I
|我的意思是，为了获得碰撞安全，基本上立即将性能重新削减两倍。

2142
01:04:51,210 --> 01:04:52,260
0,210 210,540 540,660 660,960 960,1050
mean basically {re-cutting -} the

2143
01:04:52,260 --> 01:04:53,550
0,450 450,810 810,960 960,1020 1020,1290
performance immediately by a factor

2144
01:04:53,550 --> 01:04:54,580
0,90 90,420
of two,

2145
01:04:55,680 --> 01:04:56,940
0,300 300,360 360,540 540,810 810,1260
just to get crash safety.|
|

2146
01:04:57,620 --> 01:04:59,000
0,480 540,870 870,990 990,1110 1110,1380
{} And so we'll see
所以我们会在你们阅读周一的Ext3论文时继续关注你们

2147
01:04:59,000 --> 01:05:00,800
0,360 360,1170 1350,1500 1500,1680 1680,1800
on on you when you're

2148
01:05:00,800 --> 01:05:03,140
0,330 330,840 1140,1770 1770,2040 2040,2340
reading the {} {ext -}

2149
01:05:03,140 --> 01:05:05,000
0,780 780,900 900,1140 1140,1500 1500,1860
{ext3 - -} paper for

2150
01:05:05,000 --> 01:05:06,200
0,60 60,570 660,840 840,1050 1050,1200
{} Monday| and one thing
|当你阅读的时候，有一件事你应该记住，那就是如何，我该如何应对这两个因素。

2151
01:05:06,200 --> 01:05:06,830
0,120 120,210 210,390 390,510 510,630
you should keep in your

2152
01:05:06,830 --> 01:05:08,450
0,390 390,720 720,960 960,1410 1440,1620
head, while reading is get

2153
01:05:08,450 --> 01:05:09,380
0,480
how,

2154
01:05:09,570 --> 01:05:10,920
0,210 210,450 450,570 570,780 780,1350
how do I get around

2155
01:05:10,950 --> 01:05:12,060
0,270 270,420 420,720 720,810 810,1110
for this factor of two.|
|

2156
01:05:15,140 --> 01:05:16,140
0,570
Okay?|
好吧?|

2157
01:05:16,660 --> 01:05:17,620
0,210 210,450 450,510 510,630 630,960
So, is it the case
那么，你是不是把h和i分开写呢？

2158
01:05:17,620 --> 01:05:18,970
0,120 120,300 300,600 600,930 930,1350
that you write the h

2159
01:05:18,970 --> 01:05:20,980
0,120 120,240 240,690 690,1530
and the i separately.|
|

2160
01:05:21,460 --> 01:05:23,780
0,1080 1080,1290 1290,1410 1410,1800
Yeah, I think so.|
是的，我想是的。|

2161
01:05:23,960 --> 01:05:26,810
0,450 840,1050 1050,1620 1920,2640 2640,2850
Okay, okay.| I'll I'll show
好的，好的。|我马上告诉你们为什么，那里发生了什么。

2162
01:05:26,810 --> 01:05:27,860
0,120 120,180 180,210 210,510 510,1050
you in a second why,

2163
01:05:27,980 --> 01:05:29,420
0,360 360,630 630,750 750,1110 1110,1440
{} what is happening there.|

2164
01:05:31,760 --> 01:05:33,820
0,240 240,750 900,1560
Or maybe {}
或者，让我不要做太多的承诺来回答，但我会回到这个问题上来。

2165
01:05:34,960 --> 01:05:35,770
0,180 180,300 300,420 420,600 600,810
well, let me not commit

2166
01:05:35,770 --> 01:05:37,810
0,90 90,300 300,450 450,1650 1770,2040
too much to answer, but

2167
01:05:37,810 --> 01:05:39,370
0,60 60,930 960,1260 1260,1470 1470,1560
I will get back to

2168
01:05:39,370 --> 01:05:40,180
0,210
it.|
|

2169
01:05:40,210 --> 01:05:41,350
0,480 480,660 660,810 810,870 870,1140
Oh, sorry, am I having
哦，抱歉，我是不是有空行，不是h和i，但是是的。

2170
01:05:41,350 --> 01:05:42,820
0,210 210,600 600,1080 1080,1350 1350,1470
the empty line, not the

2171
01:05:42,820 --> 01:05:44,140
0,180 180,360 360,750 780,990 990,1320
h and i, but yeah.|
|

2172
01:05:44,620 --> 01:05:48,850
0,450 480,3510 3540,3900 3900,4140 4140,4230
{The,new} line, new line is
新线，新线是一条单独的右线。

2173
01:05:48,850 --> 01:05:50,530
0,90 90,360 360,630 960,1380 1410,1680
a separate right.| Okay, thank
|好的谢谢。

2174
01:05:50,530 --> 01:05:51,460
0,390
you.|
|

2175
01:05:51,760 --> 01:05:52,960
0,120 120,690
You're welcome.|
不用谢。|

2176
01:05:52,960 --> 01:05:56,650
0,690 1110,1680 1680,2430 2700,2880 2880,3690
{} Okay, {} there's complications
好的，这里有并发症，我想稍微谈谈这些并发症。

2177
01:05:56,740 --> 01:05:57,640
0,450 450,510 510,660 660,720 720,900
and I want to talk

2178
01:05:57,640 --> 01:05:58,390
0,30 30,240 240,360 360,570 570,750
a little bit about these

2179
01:05:58,390 --> 01:05:59,780
0,870
complications.|
|

2180
01:06:05,970 --> 01:06:07,560
0,270 270,360 360,780 780,1290 1290,1590
Here's our basic scheme, basic
这是我们的基本方案，基本数据结构，

2181
01:06:07,560 --> 01:06:10,380
0,210 210,930 1350,1920 2010,2520 2520,2820
data structures,| and there's three
|我想要谈的是三个复杂的问题。

2182
01:06:10,380 --> 01:06:11,520
0,600 600,660 660,840 840,900 900,1140
complications I want to talk

2183
01:06:11,520 --> 01:06:12,420
0,360
about.|
|

2184
01:06:15,360 --> 01:06:16,560
0,330 330,480 480,630 630,750 750,1200
Maybe I'll call them challenges
也许我可以把它们叫做挑战，不管你怎么称呼它们。

2185
01:06:16,560 --> 01:06:17,760
0,390 390,480 480,720 720,930 930,1200
whatever you wanna call them.|
|

2186
01:06:21,490 --> 01:06:23,260
0,120 120,390 390,900 930,1140 1140,1770
The first is {} eviction.|
第一个是驱逐。|

2187
01:06:27,540 --> 01:06:29,020
0,960

2188
01:06:29,080 --> 01:06:30,220
0,540 540,690 690,960 960,1050 1050,1140
And the issue is as
问题是这样的，

2189
01:06:30,220 --> 01:06:31,600
0,720 780,1050 1050,1170 1170,1290 1290,1380
follows,| let's say we go
|让我们回到这张照片，

2190
01:06:31,600 --> 01:06:32,950
0,240 240,300 300,480 480,750 750,1350
back to this picture here,|
|

2191
01:06:33,920 --> 01:06:35,300
0,510 510,600 600,840 840,1020 1020,1380
and you know {bcache -}
你知道bcache已经满了，

2192
01:06:35,300 --> 01:06:36,400
0,90 90,540
is full,|
|

2193
01:06:37,950 --> 01:06:40,680
0,810 840,1650 1980,2160 2160,2370 2370,2730
and, {} and sort of
而且，还有某种正在进行的交易，

2194
01:06:40,680 --> 01:06:42,750
0,450 450,600 600,1320 1410,1830 1830,2070
transaction in progress,| {} let's
|我看看，我们刚刚更新了45，

2195
01:06:42,750 --> 01:06:45,000
0,300 300,540 540,990 990,1440 1440,2250
see, we've just updated 45,|
|

2196
01:06:45,570 --> 01:06:46,890
0,420 420,540 540,750 750,930 930,1320
{} it's now gone block
它现在没有了挡路45，所以它将写下一个挡路，

2197
01:06:46,890 --> 01:06:47,820
0,540 540,630 630,750 750,870 870,930
45, so it's going to

2198
01:06:47,820 --> 01:06:49,280
0,210 210,270 270,480 480,930
write the next block,|
|

2199
01:06:49,530 --> 01:06:50,790
0,390 390,480 480,750 750,840 840,1260
and the cache is full.|
并且高速缓存已满。|

2200
01:06:51,700 --> 01:06:53,200
0,960
And,
然后，这个和，

2201
01:06:53,500 --> 01:06:54,820
0,780
the

2202
01:06:55,820 --> 01:06:56,980
0,660
and,|
|

2203
01:06:57,910 --> 01:06:59,410
0,330 330,870 870,1140 1140,1350 1350,1500
let's say you know we
比方说，你知道我们没有，我们还没有解决这个问题的办法，

2204
01:06:59,410 --> 01:07:00,250
0,420 420,480 480,660 660,780 780,840
don't we don't have a

2205
01:07:00,250 --> 01:07:01,960
0,330 330,420 420,540 540,900 1110,1710
solution for this yet,| but
|但是宝藏决定，它想要驱逐45个正确的人，

2206
01:07:01,960 --> 01:07:03,880
0,60 60,360 360,1140 1200,1380 1380,1920
the cache decides, {} it

2207
01:07:03,880 --> 01:07:05,680
0,180 180,270 270,570 570,1290
wants to evict 45

2208
01:07:06,550 --> 01:07:08,140
0,510 750,1080 1080,1200 1200,1290 1290,1590
correct,| and if it wants
|如果它想驱逐45个人，但这意味着我们必须通过它的家乡写下它。

2209
01:07:08,140 --> 01:07:09,310
0,90 90,360 360,840 840,960 960,1170
to evict 45, but will

2210
01:07:09,310 --> 01:07:10,240
0,240 240,360 360,510 510,810 810,930
mean that will mean we

2211
01:07:10,240 --> 01:07:11,230
0,120 120,240 240,480 480,870 870,990
have to write it through

2212
01:07:11,230 --> 01:07:13,060
0,150 150,330 330,810
its home location.|
|

2213
01:07:13,720 --> 01:07:15,190
0,450 450,810 810,960 960,1050 1050,1470
How bad would it be
把挡路写在这里会有多糟糕，

2214
01:07:15,190 --> 01:07:16,600
0,150 150,510 510,600 600,1020 1020,1410
to write the block here,|
|

2215
01:07:17,600 --> 01:07:19,880
0,180 180,270 270,660 660,1770
you know evict 45,
你知道，驱逐45，并写45到家里的位置。

2216
01:07:21,060 --> 01:07:22,620
0,420 420,780 780,1290 1290,1380 1380,1560
and write 45 to home

2217
01:07:22,620 --> 01:07:23,840
0,630
location.|
|

2218
01:07:28,600 --> 01:07:29,800
0,150 150,300 300,510 510,600 600,1200
Is that good or bad.|
这是好事还是坏事。|

2219
01:07:44,290 --> 01:07:45,550
0,270 270,480 480,720 720,870 870,1260
Would any rule be broken,
如果我们那样做，会不会违反任何规则。

2220
01:07:45,550 --> 01:07:46,820
0,90 90,210 210,390 390,720
if we did that.|
|

2221
01:07:47,410 --> 01:07:48,700
0,150 150,720
I guess,
我猜想，如果崩溃发生在同一事务中的其他写操作发生之前，那么基本上原子性就被打破了。

2222
01:07:48,850 --> 01:07:51,310
0,330 690,1320 1680,1950 1950,2040 2040,2460
that as if a crash

2223
01:07:51,310 --> 01:07:53,800
0,450 450,1140 1140,1320 1320,2010 2040,2490
happens before the other writes

2224
01:07:53,800 --> 01:07:56,290
0,90 90,180 180,420 420,1590 1800,2490
in the same transaction occurs,

2225
01:07:56,290 --> 01:07:58,570
0,540 690,1470 1470,1950 1950,2160 2160,2280
then basically atomicity it is

2226
01:07:58,570 --> 01:08:01,740
0,600
broken.|
|

2227
01:08:02,980 --> 01:08:04,600
0,390 390,510 510,900 900,1440 1440,1620
That is basically violates this
这基本上违反了我所说的这个事先写好的规则，

2228
01:08:04,600 --> 01:08:05,560
0,240 240,480 480,750 750,900 900,960
{write-ahead -} rule that I

2229
01:08:05,560 --> 01:08:06,880
0,270 270,720
talked about,|
|

2230
01:08:07,610 --> 01:08:08,690
0,180 180,390 390,510 510,840 840,1080
you have to write all
在向每个家庭位置写入任何挡路之前，您必须将所有块写入日志。

2231
01:08:08,690 --> 01:08:09,710
0,90 90,420 420,510 510,630 630,1020
the blocks to the log,

2232
01:08:09,710 --> 01:08:11,240
0,570 570,720 720,1020 1020,1230 1230,1530
before you write any block

2233
01:08:11,240 --> 01:08:12,960
0,90 90,210 210,630 630,1140
to each home location.|
|

2234
01:08:25,780 --> 01:08:26,440
0,150 150,240 240,510 510,600 600,660
So it has to be
所以它必须是正确的情况，

2235
01:08:26,440 --> 01:08:27,640
0,90 90,450 450,600 600,780 780,1200
the case right,| the cache
|缓存不会逐出日志中的任何挡路。

2236
01:08:27,640 --> 01:08:30,550
0,270 270,810 810,1380 1860,2280 2280,2910
does not evict any block

2237
01:08:30,550 --> 01:08:31,660
0,150 150,390 390,480 480,570 570,1110
that sits in the log.|
|

2238
01:08:32,640 --> 01:08:33,940
0,120 120,240 240,390 390,780
Does that make sense?|
这说得通吗？|

2239
01:08:34,750 --> 01:08:36,440
0,180 180,270 270,690 690,1050
So the solution is
因此，解决方案是不要驱逐块，这些块都在日志中。

2240
01:08:36,950 --> 01:08:38,520
0,300 300,930
don't evict

2241
01:08:40,710 --> 01:08:42,140
0,900
blocks,

2242
01:08:42,140 --> 01:08:43,490
0,450 450,660 660,780 780,870 870,1350
those are in the log.|
|

2243
01:08:49,330 --> 01:08:51,340
0,240 240,390 390,480 480,1230 1440,2010
And this is exactly what
这就是你刚才展示的内容。

2244
01:08:51,340 --> 01:08:52,270
0,330 330,420 420,750 750,780 780,930
you were [showing] a little

2245
01:08:52,270 --> 01:08:53,470
0,120 120,720 720,930 930,1140 1140,1200
bit earlier| and said I
|他说我不想谈，所以你去log_write。

2246
01:08:53,470 --> 01:08:54,490
0,180 180,330 330,390 390,600 600,1020
didn't want to talk about,

2247
01:08:54,880 --> 01:08:56,020
0,660 660,810 810,930 930,1020 1020,1140
{} so you go to

2248
01:08:56,020 --> 01:08:57,340
0,300 300,810
{log_write -}.|
|

2249
01:08:57,760 --> 01:08:58,990
0,360 360,540 540,630 630,1080 1080,1230
Again just to see for
再来看一眼，

2250
01:08:58,990 --> 01:09:00,360
0,30 30,360 360,840
a second there,|
|

2251
01:09:00,480 --> 01:09:03,000
0,990 1140,1830 1830,2130 2130,2310 2310,2520
{} {log_write -} here {log_write
LOG_WRITE此处再次LOG_WRITE

2252
01:09:03,000 --> 01:09:04,830
0,210 210,720 1140,1530 1530,1740 1740,1830
-} again| and here we
|这里我们看到了对Bpin的调用，你认为Bpin会做什么，

2253
01:09:04,830 --> 01:09:06,780
0,630 840,1080 1080,1290 1290,1410 1410,1950
see this call to bpin,

2254
01:09:07,620 --> 01:09:08,280
0,150 150,270 270,330 330,450 450,660
and what do you think

2255
01:09:08,280 --> 01:09:09,620
0,210 210,330 330,720
{bpin -} does,|
|

2256
01:09:11,240 --> 01:09:12,710
0,570 570,750 750,810 810,1230 1230,1470
name sort of indicates it.|
名字在某种程度上表明了这一点。|

2257
01:09:16,590 --> 01:09:18,570
0,420 720,1140 1140,1320 1320,1770 1770,1980
It [bends] the block in
它在，在缓存里把挡路[弯]了。

2258
01:09:18,570 --> 01:09:19,640
0,540
the,

2259
01:09:20,680 --> 01:09:22,630
0,210 210,390 390,1290 1320,1800 1800,1950
in the cache.| Yeah, how
|是啊，它是怎么做到的，因为你现在的实验室一直在广泛地研究这个问题。

2260
01:09:22,630 --> 01:09:23,800
0,180 180,240 240,360 360,630 900,1170
does it do it, since

2261
01:09:23,800 --> 01:09:24,700
0,150 150,360 360,600 600,720 720,900
you've been looking at this

2262
01:09:24,700 --> 01:09:27,340
0,270 270,570 600,930 930,1470 1680,2640
where your current lab extensively.|
|

2263
01:09:28,890 --> 01:09:29,370
0,150 150,210 210,270 270,420 420,480
What do you think it
你觉得它能做什么。

2264
01:09:29,370 --> 01:09:30,340
0,330
does.|
|

2265
01:09:30,840 --> 01:09:32,100
0,180 180,900 930,1020 1020,1170 1170,1260
So we can look at
因此，我们可以使用Bpin查看实现，

2266
01:09:32,100 --> 01:09:33,390
0,60 60,540 540,780 780,1080 1080,1290
the implementation with bpin,| but
|但我们也可以猜到它是做什么的。

2267
01:09:33,390 --> 01:09:34,320
0,90 90,210 210,390 390,660 660,930
we can also guess what

2268
01:09:34,320 --> 01:09:35,280
0,60 60,390
it does.|
|

2269
01:09:40,000 --> 01:09:41,230
0,240 240,360 360,780 780,1020 1020,1230
Doesn't it essentially just make
它本质上不是只是制造了它，这样它就不会因为增加裁判数量而被驱逐出去。

2270
01:09:41,230 --> 01:09:42,280
0,330 360,630 630,810 810,930 930,1050
it, {} so that it

2271
01:09:42,280 --> 01:09:43,930
0,240 240,450 450,960 990,1140 1140,1650
doesn't get evicted by increasing

2272
01:09:43,930 --> 01:09:45,370
0,90 90,300 300,810 840,1050 1050,1440
the ref counts.| Yeah, exactly
|是啊，事情就是这么回事，

2273
01:09:45,370 --> 01:09:45,910
0,150 150,240 240,390 390,420 420,540
this is all {thing -}

2274
01:09:45,910 --> 01:09:47,380
0,390 420,660 660,990 990,1080 1080,1470
does,| {bpin,just -} to increases
|bpin只是为了增加引用计数，我们从bcache代码中知道，

2275
01:09:47,380 --> 01:09:48,130
0,90 90,300 300,570 570,660 660,750
the ref count and we

2276
01:09:48,130 --> 01:09:49,330
0,240 240,480 480,750 750,900 900,1200
know from the {bcache -}

2277
01:09:49,330 --> 01:09:51,880
0,270 270,750 1200,1680 1680,2100 2100,2550
code, correct,| {} evict won't
|驱逐不会驱逐任何街区，我们的记录高于零。

2278
01:09:51,910 --> 01:09:53,440
0,780 780,930 930,1230 1230,1350 1350,1530
evict any blocks, we have

2279
01:09:53,440 --> 01:09:54,980
0,330 330,600 600,690 690,1080
record higher than zero.|
|

2280
01:09:56,440 --> 01:09:57,910
0,180 180,330 330,720 720,1050 1050,1470
And so presumably somewhere later
因此，大概在稍后的日志代码中的某个位置，

2281
01:09:57,910 --> 01:10:00,400
0,270 270,870 1020,1590 1590,2100 2100,2490
in a logging code,| when
|一旦实际记录了一件事，

2282
01:10:00,400 --> 01:10:01,900
0,480 480,930 930,1170 1170,1350 1350,1500
once actually a thing is

2283
01:10:01,900 --> 01:10:03,730
0,540 540,720 720,810 810,1320 1530,1830
logged,| we can actually {unpin
|我们实际上可以解锁挡路，对吧。

2284
01:10:03,730 --> 01:10:05,640
0,270 480,660 660,1050 1080,1440
-} the block, right.|
|

2285
01:10:06,530 --> 01:10:07,880
0,270 270,390 390,540 540,750 750,1350
Okay, so that's one complication,
好的，这是一个复杂的问题，所以我们有一个固定和解锁的过程。

2286
01:10:07,880 --> 01:10:08,690
0,180 180,270 270,390 390,510 510,810
so we have this pinning

2287
01:10:08,690 --> 01:10:10,460
0,270 270,540 540,780 780,1110
and unpinning going on.|
|

2288
01:10:11,080 --> 01:10:14,170
0,1650 1650,1770 1770,1860 1860,2280 2280,3090
Let's look at another complication.|
让我们来看看另一个复杂的问题。|

2289
01:10:29,970 --> 01:10:31,560
0,240 240,390 390,660 660,900 900,1590
And the file system operations
并且文件系统操作必须记录在日志中。

2290
01:10:32,700 --> 01:10:34,860
0,390 390,660 660,900 900,1560
must fit in log.|
|

2291
01:10:41,460 --> 01:10:42,480
0,300 300,480 480,810 810,900 900,1020
If you seem to go
如果你看起来回到我们这里的照片，或者实际上这张照片更好，

2292
01:10:42,480 --> 01:10:43,650
0,210 210,330 330,420 420,720 720,1170
back to our picture here,

2293
01:10:43,650 --> 01:10:44,730
0,240 240,540 540,780 780,960 960,1080
or actually maybe this is

2294
01:10:44,730 --> 01:10:46,120
0,60 60,300 300,840
a better picture,|
|

2295
01:10:46,120 --> 01:10:47,320
0,330 330,480 480,570 570,660 660,1200
how big is the {log,in}
xv6中的原木有多大。

2296
01:10:47,320 --> 01:10:48,520
0,150 150,240 240,720
{xv6 - -}.|
|

2297
01:10:53,520 --> 01:10:55,410
0,330 330,1080 1110,1350 1350,1560 1560,1890
Thirty blocks.| Yeah, thirty blocks,
三十个街区。|是的，30个街区，32减2，

2298
01:10:55,410 --> 01:10:57,630
0,390 390,630 630,930 1290,1830 1830,2220
32 minus two,| {} so
|所以您知道最大大小，最大日志大小是30。

2299
01:10:57,630 --> 01:10:59,340
0,90 90,300 300,630 630,1110
you know max size,

2300
01:10:59,370 --> 01:11:01,760
0,390 390,690 690,1380 1380,1740
max log {size,is} 30.|
|

2301
01:11:03,840 --> 01:11:04,800
0,150 150,360 360,540 540,720 720,960
Of course we could bump
当然，我们可以在具有更大日志的实际文件系统运行中提高它，

2302
01:11:04,800 --> 01:11:06,690
0,60 60,450 840,1410 1440,1680 1680,1890
it up in real file

2303
01:11:06,690 --> 01:11:07,530
0,240 240,480 480,630 630,660 660,840
system runs with a much

2304
01:11:07,530 --> 01:11:08,730
0,210 210,630 630,990 990,1050 1050,1200
bigger log,| but it doesn't
|但不要紧，不管是什么情况，对吧，

2305
01:11:08,730 --> 01:11:10,560
0,180 180,630 990,1170 1170,1350 1350,1830
really matter, no matter what

2306
01:11:10,800 --> 01:11:11,430
0,150 150,360 360,420 420,540 540,630
it has to be the

2307
01:11:11,430 --> 01:11:12,720
0,330 330,660 660,780 780,990 990,1290
case, correct,| the file system
|文件系统操作必须适合30个数据块。

2308
01:11:12,720 --> 01:11:14,550
0,450 450,750 750,960 960,1200 1200,1830
operation must fit in 30

2309
01:11:14,550 --> 01:11:15,540
0,570
blocks.|
|

2310
01:11:16,010 --> 01:11:17,330
0,300 300,540 540,660 660,930 930,1320
Because if a system operation
因为如果系统操作将尝试写入更多的30个块，

2311
01:11:17,330 --> 01:11:18,170
0,150 150,330 330,450 450,630 630,840
would try to write more

2312
01:11:18,170 --> 01:11:19,790
0,90 90,300 300,840 1110,1380 1380,1620
to 30 blocks,| that means
|那就意味着我们得在这个地方洒点东西

2313
01:11:19,790 --> 01:11:20,750
0,180 180,300 300,450 450,540 540,960
we would have to spill

2314
01:11:20,750 --> 01:11:22,520
0,510 510,930 930,1170 1170,1680 1680,1770
something on this location| and
|我们不被允许这么做，

2315
01:11:22,520 --> 01:11:23,210
0,120 120,270 270,480 480,570 570,690
we're not allowed to do

2316
01:11:23,210 --> 01:11:24,590
0,270 300,690 690,840 840,990 990,1380
that,| because that would violate
|因为这会再次违反预写规则。

2317
01:11:24,590 --> 01:11:25,610
0,90 90,270 270,510 510,720 720,1020
the {write-ahead -} rule again.|
|

2318
01:11:26,270 --> 01:11:26,930
0,150 150,240 240,510 510,570 570,660
So it has to be
因此，必须将每个文件系统操作都写入日志中。

2319
01:11:26,930 --> 01:11:27,860
0,90 90,330 330,420 420,690 690,930
the case that every file

2320
01:11:27,860 --> 01:11:29,120
0,270 270,690 690,960 960,1170 1170,1260
system operation fits into the

2321
01:11:29,120 --> 01:11:30,100
0,480
log.|
|

2322
01:11:31,440 --> 01:11:32,760
0,90 90,210 210,360 360,750
Does that make sense?|
这说得通吗？|

2323
01:11:35,040 --> 01:11:36,390
0,240 240,600 600,690 690,1050 1140,1350
In fact, you know how
事实上，你知道我们是怎么做到32或30的。

2324
01:11:36,390 --> 01:11:37,110
0,60 60,180 180,360 360,480 480,720
do you think we got

2325
01:11:37,110 --> 01:11:38,420
0,90 90,660
to 32

2326
01:11:38,450 --> 01:11:39,580
0,600
{or,30}.|
|

2327
01:11:50,670 --> 01:11:51,480
0,240 240,330 330,540 540,630 630,810
Does it have to do
它与实际适合多少块有什么关系吗？

2328
01:11:51,480 --> 01:11:52,860
0,390 390,540 540,690 690,930 930,1380
anything with how many blocks

2329
01:11:52,860 --> 01:11:54,540
0,420 420,1110
actually fit.|
|

2330
01:11:55,060 --> 01:11:56,050
0,210 210,510 510,600 600,690 690,990
You were a way to
您可以大致了解最大块数正确多少个块，文件系统操作可以写入多少个块。

2331
01:11:56,110 --> 01:11:59,170
0,390 420,1350 2010,2190 2190,2520 2520,3060
like basically how many blocks

2332
01:11:59,170 --> 01:12:01,540
0,180 180,1050 1050,1710 1710,2070 2070,2370
does the maximum blocks correct,

2333
01:12:01,540 --> 01:12:02,770
0,90 90,330 330,630 630,1020 1020,1230
the file system operation could

2334
01:12:02,770 --> 01:12:03,720
0,420
write.|
|

2335
01:12:04,280 --> 01:12:05,120
0,210 210,330 330,420 420,630 630,840
And that is really what
这就是数字30必须绝对大于文件系统操作写入的最大数据块数量。

2336
01:12:05,120 --> 01:12:07,520
0,570 690,1080 1080,1650 1800,2310 2310,2400
the number 30 has to

2337
01:12:07,520 --> 01:12:09,710
0,330 360,840 840,1320 1320,1590 1590,2190
be definitely bigger than any

2338
01:12:10,100 --> 01:12:11,210
0,120 120,210 210,330 330,810 810,1110
you know the max number

2339
01:12:11,210 --> 01:12:12,520
0,120 120,750
of blocks

2340
01:12:14,940 --> 01:12:17,420
0,180 180,510 510,900 900,1830
the file system operation

2341
01:12:20,500 --> 01:12:21,820
0,780
write.|

2342
01:12:26,570 --> 01:12:27,350
0,240 240,390 390,450 450,690 690,780
And so, in fact you
因此，事实上，您知道Robert和我这样做了，因为我们检查了所有文件系统操作，查看了它们

2343
01:12:27,350 --> 01:12:28,610
0,600 600,900 900,990 990,1050 1050,1260
know Robert and I did,

2344
01:12:28,610 --> 01:12:29,450
0,210 210,390 390,600 600,750 750,840
because we went through all

2345
01:12:29,450 --> 01:12:30,710
0,60 60,270 270,510 510,1050 1050,1260
the file system operations, looked

2346
01:12:30,710 --> 01:12:32,630
0,120 120,360 360,930 930,1320 1320,1920
at them| and decide whether
|并决定最大数量是多少

2347
01:12:32,810 --> 01:12:34,220
0,210 210,600 750,840 840,1170 1170,1410
{} what's the maximum number

2348
01:12:34,220 --> 01:12:35,090
0,240 240,450 450,570 570,780 780,870
is| and it turns out
|结果发现实际数字远远低于三十个，

2349
01:12:35,090 --> 01:12:35,750
0,90 90,180 180,390 390,570 570,660
that the actual number is

2350
01:12:35,750 --> 01:12:37,040
0,240 240,540 540,720 720,810 810,1290
much lower than the thirty,|
|

2351
01:12:37,340 --> 01:12:38,600
0,390 390,630 630,750 750,1080 1080,1260
{} but you know we'll
但你知道我们马上就会看到一些有趣的并发症，

2352
01:12:38,600 --> 01:12:39,710
0,390 390,480 480,540 540,900 900,1110
see in a second a

2353
01:12:39,710 --> 01:12:41,640
0,300 300,630 630,1410
couple interesting complications,|
|

2354
01:12:42,870 --> 01:12:43,890
0,180 180,270 270,570 570,690 690,1020
like, for example the operation
例如，到目前为止，我们看起来像是正确创建文件的操作，

2355
01:12:43,890 --> 01:12:44,850
0,90 90,210 210,360 360,570 570,960
that we look so far

2356
01:12:44,850 --> 01:12:45,930
0,150 150,450 450,540 540,840 840,1080
like creating a file correct,|
|

2357
01:12:45,930 --> 01:12:46,740
0,120 120,330 330,390 390,750 750,810
is only a handful of
只有几个块，文件系统操作就像五个块，

2358
01:12:46,740 --> 01:12:48,540
0,540 570,900 900,1080 1080,1350 1350,1800
blocks, the file system operation

2359
01:12:48,540 --> 01:12:50,130
0,120 120,270 270,570 570,1050 1380,1590
is like five blocks,| in
|事实上，大多数操作都是为数不多的几个块，不是那么多，

2360
01:12:50,130 --> 01:12:53,040
0,210 210,870 900,1890 1890,2460 2610,2910
fact most operations are a

2361
01:12:53,040 --> 01:12:54,210
0,360 360,420 420,870 870,1020 1020,1170
handful of blocks not that

2362
01:12:54,210 --> 01:12:55,320
0,390 480,750 750,870 870,1020 1020,1110
many,| do you think of
|你有没有想过任何可能会写很多很多块的操作。

2363
01:12:55,320 --> 01:12:56,820
0,180 180,660 660,900 900,1230 1230,1500
any operations that might write

2364
01:12:56,820 --> 01:12:58,440
0,270 270,480 480,750 750,1260
many many, many blocks.|
|

2365
01:13:13,470 --> 01:13:14,670
0,450 450,720 720,840 840,900 900,1200
You're right on a huge
你就在一个大文件里。

2366
01:13:14,670 --> 01:13:16,290
0,780 930,1170 1170,1380 1380,1410 1410,1620
file.| Yeah right, a huge
|是的，对，一个很大的文件，对，

2367
01:13:16,290 --> 01:13:17,920
0,360 390,600 600,1080
file, right,| so,
|所以，如果我们调用Write系统调用并传递缓冲区，

2368
01:13:17,920 --> 01:13:19,210
0,150 150,570 570,690 690,1170 1170,1290
{} what if we you

2369
01:13:19,210 --> 01:13:20,530
0,300 300,750 750,1020 1020,1110 1110,1320
know, {} called the write

2370
01:13:20,530 --> 01:13:21,820
0,270 270,750 750,840 840,960 960,1290
system call and we pass

2371
01:13:21,820 --> 01:13:22,780
0,90 90,510 510,630 630,720 720,960
the buffer,| we have a
|我们有一兆字节的数据，就像一千个区块。

2372
01:13:22,780 --> 01:13:24,240
0,420 420,480 480,870
megabyte of data,

2373
01:13:24,680 --> 01:13:26,440
0,390 390,450 450,750 750,1260
like a thousand blocks.|
|

2374
01:13:27,030 --> 01:13:27,840
0,90 90,300 300,480 480,600 600,810
It seems like we're being
看起来我们遇到了很大的麻烦，对吧，这会违反你知道的最大限度。

2375
01:13:27,840 --> 01:13:29,520
0,300 300,690 720,1080 1260,1500 1500,1680
serious trouble right, it would

2376
01:13:29,520 --> 01:13:31,080
0,660 660,720 720,870 870,1080 1080,1560
violate you know these {maximum

2377
01:13:31,080 --> 01:13:31,980
0,330
-}.|
|

2378
01:13:32,010 --> 01:13:33,930
0,150 150,690 1020,1500 1530,1740 1740,1920
And so, {} let's look
所以，让我们看看，写，写，

2379
01:13:33,930 --> 01:13:34,760
0,300
at,

2380
01:13:35,630 --> 01:13:36,820
0,660
write,

2381
01:13:44,080 --> 01:13:45,880
0,600
write,|
|

2382
01:13:48,070 --> 01:13:49,870
0,270 270,660 660,930 930,1290 1290,1800
{sys_write -} calls {filewrite -},
sys_write调用filewrite，filewrite这里是filewrite。

2383
01:13:51,070 --> 01:13:53,440
0,480 480,930 1290,1650 1650,1950 1950,2370
{filewrite -} here's {filewrite -}.|
|

2384
01:13:54,180 --> 01:13:56,310
0,450 450,930 930,1050 1050,1830 1830,2130
{} Okay, so here's an
好的，这里有一个索引节点、文件描述符、索引节点

2385
01:13:56,310 --> 01:13:57,810
0,330 330,570 570,930 930,1020 1020,1500
inode, file descriptor, {inode -}|
|

2386
01:13:57,840 --> 01:13:58,890
0,150 150,330 330,480 480,600 600,1050
and bring to my code
把我的代码或者我在显示器上的代码

2387
01:13:59,160 --> 01:13:59,880
0,90 90,150 150,390 390,540 540,720
or the code that I've

2388
01:13:59,880 --> 01:14:02,220
0,120 120,210 210,840 1230,1800
on the display| and
|注意这段代码是做什么的。

2389
01:14:02,280 --> 01:14:03,780
0,540 540,840 840,1020 1020,1200 1200,1500
notice that what does this

2390
01:14:03,780 --> 01:14:04,960
0,240 240,600
code do.|
|

2391
01:14:09,440 --> 01:14:10,490
0,180 180,360 360,480 480,540 540,1050
Yeah, you read the comments
是的，你看了上面写的评论，然后基本上解释了一下，

2392
01:14:10,490 --> 01:14:11,930
0,240 240,300 300,840 870,1350 1350,1440
write on top here and

2393
01:14:11,930 --> 01:14:13,190
0,270 300,630 630,1050 1050,1140 1140,1260
then basically explains it,| but
|但是，当写入被拆分成许多数量较小的写入时，就会发生这种情况。

2394
01:14:13,190 --> 01:14:14,120
0,120 120,210 210,390 390,720 720,930
this is what happens when

2395
01:14:14,120 --> 01:14:15,830
0,120 120,420 420,570 570,1140 1530,1710
the write is split in

2396
01:14:15,830 --> 01:14:17,740
0,300 300,630 630,990 990,1500
many number smaller writes.|
|

2397
01:14:18,710 --> 01:14:20,510
0,330 330,810 930,1530 1530,1710 1710,1800
{} So what really is
所以这里到底发生了什么是正确的，

2398
01:14:20,510 --> 01:14:21,710
0,240 240,480 480,690 690,1050 1050,1200
going on here correctly,| we
|我们正在确保整个书写作为一个整体不是原子的，

2399
01:14:21,710 --> 01:14:24,350
0,30 30,720 720,1050 1050,1530 1890,2640
are ensuring that the {}

2400
01:14:25,000 --> 01:14:25,810
0,180 180,480 480,690 690,750 750,810
the whole write as a

2401
01:14:25,810 --> 01:14:28,150
0,390 390,690 690,1200 1350,1650 1650,2340
whole is not {} atomic,|
|

2402
01:14:28,180 --> 01:14:29,560
0,330 330,840 840,930 930,1170 1170,1380
that's OK, you know the
没关系，你知道Write Unix系统叫做语义，实际上并不需要所有的上千个块，

2403
01:14:29,560 --> 01:14:31,000
0,330 330,570 570,810 810,1020 1020,1440
write Unix system called semantics,

2404
01:14:31,000 --> 01:14:32,530
0,240 240,450 450,1020 1020,1200 1200,1530
don't actually require that actually

2405
01:14:32,530 --> 01:14:34,990
0,360 360,690 780,1560 1560,2070 2100,2460
all the thousand blocks,| if
|如果以兆字节或实际上以原子方式写入

2406
01:14:34,990 --> 01:14:36,430
0,30 30,540 540,600 600,900 900,1440
a megabyte or actually written

2407
01:14:36,430 --> 01:14:38,230
0,420 420,630 840,1050 1050,1230 1230,1800
{atomically -}|  and user requires
|用户要求我们不要损坏文件系统，

2408
01:14:38,230 --> 01:14:39,250
0,120 120,240 240,480 480,930 930,1020
that we don't corrupt the

2409
01:14:39,250 --> 01:14:42,130
0,270 270,720 870,1800 1800,2550 2580,2880
file system,| between {} don't
|在执行此操作时不要损坏文件系统。

2410
01:14:42,130 --> 01:14:43,120
0,240 240,300 300,540 540,780 780,990
corrupt the file system while

2411
01:14:43,120 --> 01:14:43,980
0,240 240,450
doing it.|
|

2412
01:14:44,090 --> 01:14:46,010
0,240 240,330 330,780 780,1230 1440,1920
And so basically we, {}
所以基本上我们，是的，xv6将一个大的写入拆分成多个较小的写入

2413
01:14:46,010 --> 01:14:48,050
0,60 60,450 450,990 1260,1920 1920,2040
yeah {xv6 -} splits a

2414
01:14:48,050 --> 01:14:49,070
0,210 210,570 570,690 690,780 780,1020
big write in a number

2415
01:14:49,070 --> 01:14:50,240
0,60 60,450 450,810 810,960 960,1170
of smaller writes| and writes
|并将它们作为单独的事务写入。

2416
01:14:50,240 --> 01:14:52,380
0,300 300,450 450,960 960,1680
them as individual transactions.|
|

2417
01:14:53,160 --> 01:14:54,330
0,180 180,300 300,420 420,720 720,1170
And this would basically ensures
这将基本上确保我们的示例如果交易分配了一个挡路号码，

2418
01:14:54,330 --> 01:14:55,680
0,270 270,420 420,780 780,870 870,1350
that our example if transaction

2419
01:14:55,680 --> 01:14:57,660
0,420 420,960 960,1320 1320,1680 1680,1980
allocates a block number,| because
|因为我们需要一个新的挡路来做一个中级挡路。

2420
01:14:57,660 --> 01:14:58,590
0,150 150,300 300,330 330,540 540,930
we need a new block

2421
01:14:58,590 --> 01:15:00,030
0,240 240,330 330,810 810,1200 1200,1440
for an intermediate block were,|

2422
01:15:00,030 --> 01:15:00,660
0,210 210,300 300,450 450,480 480,630
because we need a new
因为我们需要一个新的挡路，因为我们要给它写信，

2423
01:15:00,660 --> 01:15:01,440
0,300 300,480 480,570 570,690 690,780
block because we're going to

2424
01:15:01,440 --> 01:15:02,790
0,210 210,360 360,540 870,1140 1140,1350
write to it,| at least
|至少该部分完全是原子的，并且文件系统永远不会处于不正确的状态，

2425
01:15:02,790 --> 01:15:04,320
0,270 270,540 540,600 600,1020 1020,1530
that part is completely atomic

2426
01:15:04,320 --> 01:15:05,310
0,240 240,360 360,600 600,840 840,990
and the file system will

2427
01:15:05,310 --> 01:15:06,390
0,90 90,450 450,810 840,960 960,1080
be never left in an

2428
01:15:06,390 --> 01:15:08,430
0,420 420,840 1050,1770 1770,1950 1950,2040
incorrect state,| violating any of
|违反了任何文件系统不变性。

2429
01:15:08,430 --> 01:15:10,400
0,270 270,480 480,870 900,1590
the file system invariance.|
|

2430
01:15:10,490 --> 01:15:11,180
0,150 150,270 270,360 360,600 600,690
And so the write is
因此，写入以许多较小的写入或许多事务显示在许多、许多、许多系统中。

2431
01:15:11,180 --> 01:15:12,840
0,390 390,510 510,720 720,1140
displayed in many, many,

2432
01:15:15,150 --> 01:15:16,800
0,240 240,570 570,900 900,1230 1230,1650
many system in many smaller

2433
01:15:16,800 --> 01:15:18,660
0,270 270,390 390,630 630,1320
writes or many transactions.|
|

2434
01:15:19,310 --> 01:15:20,500
0,750
Okay.|
好吧。|

2435
01:15:20,560 --> 01:15:21,460
0,90 90,270 270,420 420,540 540,900
In fact, that's the main
实际上，这是一个主要问题，它实际上是将文件系统分成许多事务。

2436
01:15:21,460 --> 01:15:23,950
0,420 420,600 600,960 960,1500 1770,2490
one that actually is {}

2437
01:15:25,780 --> 01:15:27,860
0,750 780,1470
write fs

2438
01:15:27,980 --> 01:15:29,740
0,480 480,600 600,1200
split in many,

2439
01:15:30,020 --> 01:15:31,540
0,240 240,900
many transactions.|
|

2440
01:15:37,490 --> 01:15:39,220
0,210 210,510 510,690 690,1020
Any questions about this?|
对此有什么问题吗？|

2441
01:15:43,590 --> 01:15:44,610
0,120 120,510 510,750 750,870 870,1020
A note because you know
备注，因为您知道高速缓存中的内容是正确的PIN，这也意味着

2442
01:15:44,610 --> 01:15:46,170
0,210 210,600 630,1140 1140,1440 1440,1560
things are pins correct in

2443
01:15:46,170 --> 01:15:47,340
0,300 300,450 450,660 660,900 900,1170
cache that means also that|
|

2444
01:15:47,340 --> 01:15:49,320
0,300 690,1050 1050,1620 1650,1860 1860,1980
the block cache was may
挡路的缓存可能比[阅读器]大(通过挡路的大小)。

2445
01:15:49,320 --> 01:15:50,640
0,300 300,780
bigger than

2446
01:15:51,330 --> 01:15:52,740
0,270 270,780 780,960 960,1050 1050,1410
the [reader] through the block

2447
01:15:52,740 --> 01:15:53,640
0,390
size.|
|

2448
01:15:57,910 --> 01:15:59,220
0,720
Okay.|
好吧。|

2449
01:15:59,250 --> 01:16:01,170
0,600 630,840 840,1260 1260,1500 1530,1920
{} So now the final
现在我想谈的最后一个挑战是并发文件系统调用。

2450
01:16:01,170 --> 01:16:01,980
0,330 330,420 420,570 570,630 630,810
challenge {that,I} want to talk

2451
01:16:01,980 --> 01:16:03,040
0,480
about

2452
01:16:03,900 --> 01:16:07,040
0,1110 1200,1860 1860,2550
is a concurrent

2453
01:16:07,670 --> 01:16:09,180
0,240 240,510 510,990
file system calls.|
|

2454
01:16:18,110 --> 01:16:19,670
0,420 420,510 510,810 810,990 990,1560
And the issue as follows,|
问题如下，|

2455
01:16:19,700 --> 01:16:20,810
0,600 600,690 690,930 930,1050 1050,1110
let me first try to
让我先试着解释一下问题是什么，然后我们再看看解决方案是什么。

2456
01:16:20,810 --> 01:16:21,950
0,300 300,450 450,510 510,840 840,1140
explain what the problem is

2457
01:16:21,980 --> 01:16:23,180
0,270 270,780 780,900 900,1050 1050,1200
and then we'll see what

2458
01:16:23,180 --> 01:16:24,500
0,60 60,450 450,720
the solution is.|
|

2459
01:16:25,730 --> 01:16:26,960
0,390 420,630 630,750 750,1020 1020,1230
So let's say we have
假设我们有自己的日志。

2460
01:16:26,960 --> 01:16:28,260
0,120 120,780
our log.|
|

2461
01:16:29,240 --> 01:16:31,220
0,780 810,1350
And, {}
我们正在编写，可能有两个事务同时执行。

2462
01:16:31,220 --> 01:16:32,630
0,210 210,360 360,810 900,1110 1110,1410
and we're writing and maybe

2463
01:16:32,630 --> 01:16:34,160
0,90 90,150 150,360 360,1020 1050,1530
there are two transactions executing

2464
01:16:34,160 --> 01:16:35,340
0,600
concurrently.|
|

2465
01:16:36,010 --> 01:16:37,780
0,630 780,1260 1260,1650 1650,1740 1740,1770
And usually imagine for a
通常想象一下，你知道他们读取了很多块，

2466
01:16:37,780 --> 01:16:39,610
0,330 330,480 480,660 660,750 750,1830
second, that you know they

2467
01:16:40,030 --> 01:16:41,920
0,990 990,1410 1440,1680 1680,1710 1710,1890
{ -} read a lot

2468
01:16:41,920 --> 01:16:43,510
0,60 60,570 600,930 930,1410 1410,1590
of blocks,| so really {t0
|所以实际上t0正在执行，t0正在执行，还有日志的开头，这里是日志的结尾。

2469
01:16:43,510 --> 01:16:45,460
0,660 660,810 810,1380 1380,1530 1530,1950
-} is executing {t0 -}

2470
01:16:45,460 --> 01:16:47,320
0,120 120,810 810,1050 1050,1170 1170,1860
is executing and there also

2471
01:16:47,320 --> 01:16:48,010
0,180 180,240 240,510 510,630 630,690
is the beginning of the

2472
01:16:48,010 --> 01:16:49,380
0,360 360,600
log, here

2473
01:16:49,580 --> 01:16:51,400
0,600 600,720 720,1290
end of log.|
|

2474
01:16:51,430 --> 01:16:53,800
0,780 1020,1710 1860,2010 2010,2100 2100,2370
And, {} you know {t1
而且，你知道t1会执行一些块等等，

2475
01:16:53,800 --> 01:16:56,200
0,450 450,930 930,1320 1320,1860 1860,2400
-} executes some blocks and

2476
01:16:56,260 --> 01:16:57,730
0,360 360,810 1050,1290 1290,1350 1350,1470
etc, etc,| and by the
|当我们跑到日志的末尾时，没有一个是完整的，

2477
01:16:57,730 --> 01:16:58,570
0,240 240,330 330,600 600,690 690,840
time we run to the

2478
01:16:58,570 --> 01:16:59,860
0,120 120,180 180,270 270,750 1020,1290
end of the log, neither

2479
01:16:59,860 --> 01:17:01,000
0,180 180,270 270,630 630,990 1020,1140
one is complete,| yet you
|但是你知道，所以两个人还有更多的写作要做。

2480
01:17:01,000 --> 01:17:02,380
0,90 90,270 270,690 690,840 840,1380
know, so both have still

2481
01:17:02,410 --> 01:17:03,940
0,330 330,600 600,720 720,1020
more writes to do.|
|

2482
01:17:04,600 --> 01:17:05,940
0,810
And,
而且，在这一点上，我们可以提交这两个交易中的任何一个。

2483
01:17:06,000 --> 01:17:08,490
0,720 960,1140 1140,1290 1290,1860 2250,2490
{} at this point, can

2484
01:17:08,490 --> 01:17:09,990
0,120 120,690 840,1290 1290,1410 1410,1500
we commit any of the

2485
01:17:09,990 --> 01:17:11,420
0,150 150,960
two transactions.|
|

2486
01:17:14,740 --> 01:17:16,210
0,330 330,450 450,780 780,1170 1170,1470
No, we can't correct, because
不，我们无法更正，因为如果我们要提交部分完成的事务。

2487
01:17:16,210 --> 01:17:18,340
0,120 120,270 270,1080 1110,1680 1800,2130
if we would commit a

2488
01:17:18,340 --> 01:17:20,140
0,540 540,720 720,870 870,1380 1380,1800
transaction that is partially done.|
|

2489
01:17:20,700 --> 01:17:23,700
0,690 690,1440 1680,2580 2580,2670 2670,3000
Then we violate the write-ahead
那么我们再次违反了预写规则

2490
01:17:23,700 --> 01:17:25,530
0,300 300,720 720,1350 1350,1470 1470,1830
rule again| and you know
|而且你知道登录那里的整个目的[行动]是行不通的。

2491
01:17:25,560 --> 01:17:26,790
0,60 60,240 240,540 540,900 900,1230
the whole purpose [action] {log,in}

2492
01:17:26,790 --> 01:17:28,040
0,120 120,180 180,720
there doesn't {work,out}.|
|

2493
01:17:28,440 --> 01:17:30,150
0,540 720,1170 1200,1380 1380,1620 1620,1710
{} So it has to
因此情况必须是这样的，基本上一定有多个并发事务可以放入日志中，

2494
01:17:30,150 --> 01:17:31,560
0,90 90,180 180,690 690,870 870,1410
be the case, that basically

2495
01:17:31,560 --> 01:17:33,570
0,120 120,660 660,780 780,1200 1200,2010
a number of concurrent transactions

2496
01:17:33,780 --> 01:17:35,730
0,480 480,930 1080,1320 1320,1410 1410,1950
must fit in the log,|
|

2497
01:17:35,790 --> 01:17:38,820
0,600 840,1410 1440,1830 1830,2220 2220,3030
in fact all concurrent operations,
其实所有的并发操作，都必须符合。

2498
01:17:43,290 --> 01:17:45,120
0,720 720,930 960,1350
{ - -}

2499
01:17:54,930 --> 01:17:57,150
0,270 270,570 780,990 990,1500 1830,2220
must fit.| And so, {}
|所以，在这种情况下，

2500
01:17:57,150 --> 01:17:59,820
0,180 180,270 270,930 1260,2100
in the way {},|
|

2501
01:18:00,370 --> 01:18:00,910
0,150 150,300 300,360 360,480 480,540
so this is sort of
所以这是一种挑战，正确的，

2502
01:18:00,910 --> 01:18:02,080
0,90 90,450 450,690 690,810 810,1170
a challenge correct,| we have
|我们有一个名为Start的文件系统，你知道，我们必须基本上安排我们，我们基本上做一种入口检查，

2503
01:18:02,080 --> 01:18:03,580
0,300 300,510 510,750 750,960 960,1500
a file system called starting

2504
01:18:03,580 --> 01:18:05,260
0,540 630,1350 1350,1470 1470,1560 1560,1680
and {} you know we

2505
01:18:05,260 --> 01:18:08,530
0,390 420,1260 1260,1740 1740,2190 2520,3270
gotta arranged basically the {}

2506
01:18:08,560 --> 01:18:10,380
0,240 240,840
that we,

2507
01:18:10,500 --> 01:18:11,520
0,270 270,660 660,780 780,840 840,1020
we basically do a sort

2508
01:18:11,520 --> 01:18:13,680
0,390 750,1200 1200,1350 1350,2070 2070,2160
of a an entrance you

2509
01:18:13,680 --> 01:18:14,850
0,120 120,570 570,660 660,750 750,1170
know check,| you know before
|你知道，在我们真正放手文件系统操作之前，

2510
01:18:14,850 --> 01:18:15,870
0,120 120,390 390,660 660,750 750,1020
we actually let the file

2511
01:18:15,870 --> 01:18:18,090
0,540 540,1200 1200,1710 1740,1980 1980,2220
system operation go,| we must
|我们必须检查是否还有足够的积木，

2512
01:18:18,090 --> 01:18:19,140
0,330 330,570 570,690 690,960 960,1050
check whether there actually is

2513
01:18:19,140 --> 01:18:20,760
0,300 300,780 780,1230 1260,1350 1350,1620
enough blocks still,| you know
|您知道，如果我们已经有n个文件系统操作正在进行，

2514
01:18:20,820 --> 01:18:21,990
0,270 270,390 390,660 690,960 960,1170
if we have n file

2515
01:18:21,990 --> 01:18:23,640
0,270 270,690 690,990 990,1080 1080,1650
system operations already in progress,|
|

2516
01:18:23,700 --> 01:18:24,690
0,270 270,420 420,480 480,630 630,990
we have to make sure
我们必须确保如果我们增加一个，允许多一个人首发，

2517
01:18:24,690 --> 01:18:25,740
0,210 210,330 330,600 600,900 900,1050
that if we add an,

2518
01:18:25,830 --> 01:18:27,090
0,330 330,570 570,900 900,1140 1140,1260
allow one more guy to

2519
01:18:27,090 --> 01:18:28,830
0,450 540,780 780,1020 1020,1110 1110,1740
start,| that actually the total
|这实际上是块的总数，对，它们可以一起写入，实际上符合日志。

2520
01:18:28,860 --> 01:18:30,030
0,270 270,330 330,660 660,1020 1020,1170
number of blocks right, they

2521
01:18:30,030 --> 01:18:31,410
0,330 330,540 540,900 900,1140 1140,1380
could write together actually fits

2522
01:18:31,410 --> 01:18:32,260
0,60 60,150 150,540
in the log.|
|

2523
01:18:33,000 --> 01:18:34,560
0,570 570,630 630,990 990,1200 1200,1560
And the way {you,know} basically
基本上，xv6解决了这个问题，基本上限制了并发文件系统调用的数量。

2524
01:18:34,560 --> 01:18:35,550
0,60 60,240 240,540 540,780 780,990
{xv6 - -} {you,know} gets

2525
01:18:35,550 --> 01:18:37,920
0,330 330,780 900,1740 1740,2250 2250,2370
around this, basically limits the

2526
01:18:37,920 --> 01:18:39,180
0,300 300,390 390,780 780,1020 1020,1260
number of concurrent file system

2527
01:18:39,180 --> 01:18:40,160
0,510
calls.|
|

2528
01:18:49,150 --> 01:18:50,140
0,420 420,690 690,750 750,900 900,990
{} And the way it
它的基本工作方式是，Begin_op，您会看到有多少未完成的并发文件正在处理中，

2529
01:18:50,140 --> 01:18:52,540
0,330 330,660 660,870 870,1350 1440,2400
basically works is that, {}

2530
01:18:54,480 --> 01:18:56,100
0,480 480,870 870,1110 1110,1500 1500,1620
{} and {begin_op -} you

2531
01:18:56,100 --> 01:18:57,810
0,300 300,630 630,810 810,1020 1020,1710
would see, how many outstanding

2532
01:18:57,810 --> 01:18:59,610
0,540 570,900 900,1140 1140,1260 1260,1800
{} concurrent files with transaction

2533
01:18:59,610 --> 01:19:01,050
0,120 120,180 180,840 930,1290 1290,1440
are in progress,| if there
|如果正在进行的文件太多，我们只存储当前的文件系统操作，然后进入休眠状态

2534
01:19:01,050 --> 01:19:02,490
0,150 150,300 300,810 810,930 930,1440
are too many in progress,

2535
01:19:02,520 --> 01:19:03,900
0,210 210,510 510,1050 1050,1110 1110,1380
we just stock the current

2536
01:19:03,900 --> 01:19:05,190
0,210 210,420 420,870 870,1050 1050,1290
file system operation and goes

2537
01:19:05,190 --> 01:19:06,450
0,60 60,600 810,1020 1020,1080 1080,1260
to sleep| and it will
|它将等到所有其他人都做完并做出承诺。

2538
01:19:06,450 --> 01:19:07,800
0,390 390,780 780,1020 1020,1170 1170,1350
wait until all the other

2539
01:19:07,800 --> 01:19:08,940
0,300 300,420 420,840 870,1020 1020,1140
guys are done and have

2540
01:19:08,940 --> 01:19:09,860
0,510
committed.|
|

2541
01:19:10,870 --> 01:19:11,920
0,330 330,480 480,600 600,750 750,1050
And all the other guys
所有其他人都会一起承诺，

2542
01:19:11,920 --> 01:19:13,540
0,150 150,570 570,1110 1140,1260 1260,1620
will commit together,| in fact
|事实上，你知道在T1到2点，他们基本上已经完成了，

2543
01:19:13,540 --> 01:19:14,320
0,150 150,300 300,390 390,540 540,780
you know at some point

2544
01:19:14,320 --> 01:19:15,370
0,300 300,510 510,600 600,870 870,1050
{t1 -} to two, they're

2545
01:19:15,370 --> 01:19:17,470
0,360 360,870 1080,1620 1620,1920 1920,2100
basically done,| maybe freeze into
|也许冻成两个，他们就完蛋了

2546
01:19:17,470 --> 01:19:19,510
0,480 690,1110 1110,1710 1800,1950 1950,2040
two, they finish| and then
|然后基本上在所有这些交易中和在单个[]基本一起承诺。

2547
01:19:19,510 --> 01:19:22,060
0,450 450,930 1140,1740 1740,1950 1950,2550
basically in all these transactions

2548
01:19:22,060 --> 01:19:23,740
0,270 270,450 450,840 840,1320 1320,1680
and in single a single

2549
01:19:23,740 --> 01:19:25,800
0,210 240,840 840,1140 1140,1560
[] basically committed together.|
|

2550
01:19:27,870 --> 01:19:28,980
0,240 240,300 300,660 660,900 900,1110
This is sometimes called group
这有时称为组提交。

2551
01:19:28,980 --> 01:19:30,060
0,450
commit.|
|

2552
01:19:30,060 --> 01:19:31,650
0,270 270,420 510,900 900,1320 1320,1590
Because you're committing multiple system
因为您正在提交多个系统调用，所以您知道所有并发运行的系统调用，

2553
01:19:31,650 --> 01:19:32,850
0,600 720,840 840,960 960,1110 1110,1200
calls, you know all the

2554
01:19:32,850 --> 01:19:33,780
0,210 210,300 300,390 390,810 810,930
ones that were concurrent in

2555
01:19:33,780 --> 01:19:36,570
0,510 870,1230 1230,1830 1830,2460 2460,2790
action,| {} you committed together
|您将一起作为单个大事务提交，以便可以看到较旧的更新。

2556
01:19:36,570 --> 01:19:38,520
0,120 120,420 420,780 780,1140 1170,1950
as a single big transactions,

2557
01:19:38,520 --> 01:19:40,140
0,90 90,390 390,720 720,1230 1230,1620
so that older updates are

2558
01:19:40,200 --> 01:19:41,560
0,930
visible.|
|

2559
01:19:41,840 --> 01:19:43,310
0,180 180,360 360,810 810,1080 1080,1470
So that although they all
因此，尽管它们都放在一起，但它们要么都发生了，要么一个都没有发生。

2560
01:19:43,310 --> 01:19:47,540
0,300 300,540 540,1380 2040,4020 4020,4230
place all [] [] take

2561
01:19:47,540 --> 01:19:48,500
0,330 330,450 450,660 660,750 750,960
place or none of them

2562
01:19:48,500 --> 01:19:49,640
0,240 240,660
take place.|
|

2563
01:19:50,390 --> 01:19:51,480
0,600
Okay.|
好吧。|

2564
01:19:52,990 --> 01:19:55,360
0,420 420,630 630,1470 1740,2100 2100,2370
{} and we {} {see,that}
我们在你身上看到了这一点，如果你去。

2565
01:19:55,360 --> 01:19:56,380
0,390 420,570 570,720 720,810 810,1020
at you, if you go

2566
01:19:56,380 --> 01:19:59,320
0,240 240,390 390,570 570,1080 2400,2940
to.| A quick question.| Yeah.|
|一个简短的问题。|嗯。|

2567
01:19:59,320 --> 01:20:00,940
0,300 330,510 510,630 630,990 990,1620
That is a group commit,
那就是一个小组提交，这个小组提交是必要的，

2568
01:20:01,520 --> 01:20:03,410
0,540 660,810 810,1110 1110,1200 1200,1890
{} this group to commit

2569
01:20:03,500 --> 01:20:06,840
0,1410 1710,1860 1860,2130 2130,2790
necessary,| but could you
|但是您能说如果一个系统调用先完成，那就提交它就是事务了吗

2570
01:20:06,930 --> 01:20:08,430
0,570 600,810 810,990 990,1230 1230,1500
{} {say,if} one system calls

2571
01:20:08,430 --> 01:20:10,350
0,270 270,600 600,990 990,1380 1410,1920
finish first, just commit it's

2572
01:20:10,890 --> 01:20:13,380
0,300 300,720 930,1920 1920,2040 2040,2490
it's {} transaction| and then
|然后再犯下其他的罪行，

2573
01:20:13,380 --> 01:20:14,640
0,240 240,450 450,630 630,930 930,1260
commit other ones later,| or
|或者它是必要的财产。

2574
01:20:14,670 --> 01:20:16,080
0,120 120,240 240,420 420,900 900,1410
is it a necessary property.|
|

2575
01:20:16,140 --> 01:20:18,150
0,480 480,1110 1110,1290 1290,1440 1440,2010
{} You gotta be very
你必须非常小心，

2576
01:20:18,150 --> 01:20:19,710
0,450 450,810 810,990 990,1350 1350,1560
careful,| because you remember one
|因为你还记得一件事吗，我一开始并没有明确地把它说成是一个目标，那就是

2577
01:20:19,710 --> 01:20:20,700
0,180 180,300 300,540 540,690 690,990
thing I didn't really state

2578
01:20:20,700 --> 01:20:21,690
0,60 60,540 540,660 660,720 720,990
it explicitly as a goal

2579
01:20:21,690 --> 01:20:22,620
0,240 240,510 510,660 660,810 810,930
early on is| that we
|我们基本上仍按写入顺序执行系统调用。

2580
01:20:22,620 --> 01:20:24,180
0,390 390,840 840,930 930,1230 1230,1560
basically execute the system calls

2581
01:20:24,180 --> 01:20:25,230
0,240 240,330 330,390 390,630 630,1050
still in the write order.|
|

2582
01:20:25,980 --> 01:20:30,030
0,270 270,870 870,1650 1980,3840 3870,4050
Right, if a if a
对，如果读者观察到写，然后那些就是写，

2583
01:20:30,030 --> 01:20:31,680
0,120 120,210 210,480 480,1110 1110,1650
if a reader observes write

2584
01:20:31,680 --> 01:20:32,670
0,120 120,270 270,450 450,510 510,990
and then those are write,|
|

2585
01:20:32,850 --> 01:20:33,600
0,330 330,390 390,570 570,660 660,750
then it has to be
则必须是第二次写入发生在第一次写入之后的情况。

2586
01:20:33,600 --> 01:20:34,560
0,60 60,360 360,510 510,660 660,960
the case that that second

2587
01:20:34,560 --> 01:20:35,730
0,300 300,660 660,960 960,1080 1080,1170
write happens later than the

2588
01:20:35,730 --> 01:20:36,900
0,240 240,660
first write.|
|

2589
01:20:37,120 --> 01:20:38,230
0,330 330,420 420,750 750,960 960,1110
And the reason that this
这是一个正确的日志的原因是，

2590
01:20:38,230 --> 01:20:40,030
0,120 120,210 210,870 1050,1560 1560,1800
is a log correct,| because
|因为这基本上反映了写入未发生的顺序。

2591
01:20:40,030 --> 01:20:41,530
0,120 120,450 450,990 990,1110 1110,1500
that basically reflects the order

2592
01:20:41,530 --> 01:20:42,490
0,60 60,270 270,420 420,690 690,960
in which the writes haven't

2593
01:20:42,490 --> 01:20:43,500
0,510
happened.|
|

2594
01:20:44,090 --> 01:20:46,250
0,750 870,1020 1020,1170 1170,1440 1440,2160
And so you can really
因此，您几乎可以更改日志中的写入顺序，

2595
01:20:46,550 --> 01:20:48,530
0,720 720,1050 1050,1530 1530,1620 1620,1980
really nearly changed the order

2596
01:20:48,530 --> 01:20:49,190
0,90 90,210 210,450 450,570 570,660
of the writes in the

2597
01:20:49,190 --> 01:20:50,600
0,510 510,960 960,1140 1140,1350 1350,1410
log,| because that made me
|因为这实际上让我产生了用户程序可以观察到的[怪异]行为。

2598
01:20:50,600 --> 01:20:54,680
0,420 840,1290 1290,1440 1440,2910 3120,4080
actually result into [bizarre] behavior,

2599
01:20:54,980 --> 01:20:57,320
0,600 600,750 750,1020 1020,1950
observable by user programs.|
|

2600
01:20:58,120 --> 01:20:58,690
0,150 150,240 240,360 360,510 510,570
And so it has to
所以它必须是这样的，基本上你必须承诺，

2601
01:20:58,690 --> 01:20:59,470
0,90 90,150 150,360 360,450 450,780
be the case that basically

2602
01:20:59,470 --> 01:21:01,060
0,210 210,750 780,900 900,1020 1020,1590
you commit,| you know the
|您知道这些操作的操作是按照它们发生的顺序进行的。

2603
01:21:01,420 --> 01:21:02,770
0,690 690,750 750,930 930,1260 1260,1350
operations of these actions in

2604
01:21:02,770 --> 01:21:04,260
0,90 90,330 330,480 480,960
the order they happened.|
|

2605
01:21:05,240 --> 01:21:06,350
0,210 210,390 390,660 660,750 750,1110
We also perform the writes
我们还按照写入发生的顺序执行写入。

2606
01:21:06,350 --> 01:21:07,370
0,150 150,240 240,450 450,600 600,1020
in the order they happened.|
|

2607
01:21:09,250 --> 01:21:10,270
0,300 300,450 450,540 540,900 900,1020
And so in general you
所以一般来说，你知道，它，它更安全，

2608
01:21:10,270 --> 01:21:13,420
0,1080 1440,2100 2100,2490
know, {} it's,

2609
01:21:13,600 --> 01:21:14,980
0,120 120,480 480,600 600,840 1080,1380
it's safer,| you know it's
|你知道，基本上把它们放在一起是安全的，你总是保持良好的状态。

2610
01:21:14,980 --> 01:21:15,940
0,300 300,360 360,660 660,870 870,960
safe to basically commit them

2611
01:21:15,940 --> 01:21:17,140
0,120 120,570 660,900 900,1110 1110,1200
all together you're always in

2612
01:21:17,140 --> 01:21:18,180
0,150 150,540
good shape.|
|

2613
01:21:18,510 --> 01:21:19,620
0,630
Okay.
好吧。不过，问得好。

2614
01:21:19,880 --> 01:21:21,140
0,150 150,420 420,810
good question, though.|
|

2615
01:21:23,780 --> 01:21:25,160
0,540 750,990 990,1080 1080,1230 1230,1380
{} Okay I just want
好的，我只想再回到一件事上来，

2616
01:21:25,160 --> 01:21:26,810
0,330 420,570 570,960 960,1170 1170,1650
to go back to one

2617
01:21:26,810 --> 01:21:28,400
0,240 240,750 990,1230 1230,1410 1410,1590
more thing,| and then look
|然后看看Begin_op，但我还是说了一点，

2618
01:21:28,400 --> 01:21:29,450
0,60 60,150 150,450 450,780 780,1050
at the {begin_op -} yet

2619
01:21:29,450 --> 01:21:30,380
0,150 150,450 450,510 510,720 720,930
I talked a little bit,|
|

2620
01:21:30,380 --> 01:21:31,670
0,330 330,570 570,840 840,1230 1230,1290
because like all [] I
因为和所有人一样，我现在甚至不想谈论这个。

2621
01:21:31,670 --> 01:21:32,300
0,150 150,270 270,390 390,450 450,630
don't even want to talk

2622
01:21:32,300 --> 01:21:33,580
0,150 150,240 240,390 390,810
about it right now.|
|

2623
01:21:33,870 --> 01:21:34,980
0,570

2624
01:21:35,460 --> 01:21:36,900
0,450 450,870
{} But,
但是，在那里我们可以看到。

2625
01:21:37,990 --> 01:21:39,820
0,390 390,480 480,570 570,1290
there we can see.|
|

2626
01:21:41,000 --> 01:21:42,260
0,180 180,450 450,540 540,780 780,1260
So here's the {begin_op -},
这里是BEGIN_OP，首先，如果我们已经提交了日志，

2627
01:21:43,180 --> 01:21:45,190
0,360 390,600 600,660 660,1050 1440,2010
{} first of all, if

2628
01:21:45,640 --> 01:21:47,080
0,270 270,600 600,1050 1050,1140 1140,1440
we're already committing the log,|
|

2629
01:21:47,080 --> 01:21:47,980
0,120 120,270 270,420 420,690 690,900
we're just gonna wait until
我们就等日志提交后再走，

2630
01:21:47,980 --> 01:21:49,420
0,90 90,330 330,450 450,990 1020,1440
the log has committed,| because
|因为您知道我们不能在实际安装锁的过程中写入日志。

2631
01:21:49,450 --> 01:21:50,980
0,60 60,270 300,480 480,930 1200,1530
you know we can't write

2632
01:21:50,980 --> 01:21:51,760
0,90 90,210 210,510 510,720 720,780
to the log while the

2633
01:21:51,760 --> 01:21:53,780
0,240 240,630 630,840 840,1500
lock actually being installed.|
|

2634
01:21:53,930 --> 01:21:58,280
0,660 1140,1740 2220,2640 2640,3660 3900,4350
{} If {} we're end,
如果我们结束了基本上使我们跨越挡路大小并发操作，

2635
01:21:58,400 --> 01:22:00,680
0,480 480,1110 1110,1230 1230,1830 1860,2280
concurrent operation that basically makes

2636
01:22:00,680 --> 01:22:02,030
0,150 150,420 420,960 960,1050 1050,1350
us go across the block

2637
01:22:02,030 --> 01:22:03,110
0,420 420,570 570,810 810,960 960,1080
size,| we could go to
|我们可以进入睡眠状态，并等待基本上所有前面的并发事务完成，

2638
01:22:03,110 --> 01:22:04,180
0,570
sleep,

2639
01:22:05,080 --> 01:22:07,510
0,750 780,1320 1320,1740 1740,2190 2190,2430
and wait until basically all

2640
01:22:07,510 --> 01:22:09,220
0,180 180,750 750,1110 1110,1620 1620,1710
the preceding concurrent transactions are

2641
01:22:09,220 --> 01:22:11,650
0,480 930,1320 1320,1590 1590,2040 2070,2430
done,| {} and if {}
|如果我们被允许继续前进，基本上我们的(进入)也是被允许的，

2642
01:22:11,650 --> 01:22:13,330
0,210 210,480 480,540 540,1050 1080,1680
we're allowed to proceed basically

2643
01:22:13,330 --> 01:22:15,130
0,180 180,810 870,1140 1140,1230 1230,1800
our [entrance] {} is allowed,|
|

2644
01:22:15,250 --> 01:22:16,960
0,330 330,750 750,1170 1170,1590 1590,1710
we increase {log.outstanding -} by
我们把未清偿的对数加一，

2645
01:22:16,960 --> 01:22:18,730
0,570 720,960 960,1080 1140,1620 1620,1770
one,| because they reflect our
|因为它们反映了我们的情况，然后我们基本上继续并开始执行文件系统操作。

2646
01:22:18,730 --> 01:22:19,720
0,240 240,360 360,510 510,630 630,990
thing and then we basically

2647
01:22:19,720 --> 01:22:20,830
0,390 390,480 480,720 720,870 870,1110
proceed and start doing file

2648
01:22:20,830 --> 01:22:22,140
0,270 270,960
system operations.|
|

2649
01:22:22,920 --> 01:22:24,030
0,150 150,240 240,360 360,750 750,1110
And if you look at
如果你再看一遍end_op，仅仅是为了。

2650
01:22:24,300 --> 01:22:25,860
0,240 240,450 450,900 930,1200 1200,1560
{end_op -} again just to.|
|

2651
01:22:26,550 --> 01:22:27,420
0,210 210,450 450,570 570,690 690,870
So you see the {end_op
因此，您可以看到，end_op基本上将log.open减一，因为完成了一个事务。

2652
01:22:27,420 --> 01:22:29,940
0,360 360,1020 1050,1680 1680,2130 2130,2520
-} basically decreases {log.outstanding -}

2653
01:22:29,940 --> 01:22:31,350
0,90 90,480 480,690 690,960 960,1410
by one because one transaction

2654
01:22:31,350 --> 01:22:32,500
0,120 120,660
is finished.|
|

2655
01:22:32,590 --> 01:22:34,930
0,720 720,900 1350,1860 1860,2010 2010,2340
{} It certainly would be
在那种情况下，[制造]恐慌状态肯定是错误的

2656
01:22:34,930 --> 01:22:36,400
0,90 90,720 720,810 810,1140 1140,1470
an error in [creating] states

2657
01:22:36,400 --> 01:22:37,510
0,180 180,450 450,510 510,660 660,1110
with panic in that case|
|

2658
01:22:37,810 --> 01:22:39,040
0,150 150,360 360,870 900,1140 1140,1230
and we actually are the
而我们实际上是这组并发事务中的最后一个。

2659
01:22:39,040 --> 01:22:40,150
0,390 390,690 690,840 840,990 990,1110
last one from that set

2660
01:22:40,150 --> 01:22:41,840
0,90 90,420 420,1230
of concurrent transactions.|
|

2661
01:22:41,930 --> 01:22:43,790
0,270 270,780 780,1200 1200,1410 1410,1860
Then, actually, {} and lockouts
然后，实际上，停摆和归零，我们立即开始承诺。

2662
01:22:43,790 --> 01:22:44,660
0,150 150,420 420,570 570,720 720,870
and goes to zero, we

2663
01:22:44,660 --> 01:22:46,160
0,330 330,540 540,900
immediately start committing.|
|

2664
01:22:46,880 --> 01:22:48,170
0,150 150,420 420,630 630,750 750,1290
And then when we're done,
然后当我们做完的时候，实际上，如果我们不是木头，是的，是的，我们承诺。

2665
01:22:48,720 --> 01:22:50,910
0,450 450,720 720,1260 1260,1680 1680,2190
{} we're when actually, {}

2666
01:22:50,910 --> 01:22:52,410
0,660 660,810 810,1020 1020,1080 1080,1500
if we're not the log,

2667
01:22:52,500 --> 01:22:53,980
0,960
yeah,

2668
01:22:56,300 --> 01:22:57,580
0,180 180,330 330,450 450,720
yeah we {commit -}.|
|

2669
01:22:59,460 --> 01:23:00,690
0,360 360,540 540,630 630,780 780,1230
{} And if there's space
如果还有剩余的空间，我们会叫醒那个人，这样他们就可以真正开始奔跑了。

2670
01:23:00,690 --> 01:23:02,460
0,60 60,330 330,1080 1110,1620 1620,1770
you know {} left, we

2671
01:23:02,460 --> 01:23:03,330
0,240 240,330 330,390 390,720 720,870
wake up the guy so

2672
01:23:03,330 --> 01:23:04,530
0,270 270,420 420,630 630,870 870,1200
they can actually start running.|
|

2673
01:23:06,380 --> 01:23:07,400
0,540
Okay.|
好吧。|

2674
01:23:07,620 --> 01:23:09,060
0,180 180,630 630,780 780,1110 1110,1440
So even though this dirt
所以即使这个极其简单的文件系统，也就是非常简单的日志记录系统，xv6实际上有一堆复杂的东西。

2675
01:23:09,060 --> 01:23:10,950
0,270 270,540 540,930 930,1170 1170,1890
simple file system, that are

2676
01:23:10,950 --> 01:23:12,390
0,240 240,450 450,690 690,1020 1020,1440
just dirt simple logging system

2677
01:23:12,390 --> 01:23:14,040
0,210 210,480 480,720 720,1350 1350,1650
that {xv6 -} actually has

2678
01:23:14,040 --> 01:23:15,660
0,60 60,270 270,330 330,1140
a bunch of complications.|
|

2679
01:23:18,160 --> 01:23:19,300
0,210 210,480 480,840 840,930 930,1140
So I'm starting to run
我的时间不多了，我就在这里结束吧。

2680
01:23:19,300 --> 01:23:20,230
0,90 90,180 180,480 480,720 720,930
out of time, so let

2681
01:23:20,230 --> 01:23:22,160
0,420 420,660 660,810 810,1260
me wrap up here.|
|

2682
01:23:22,320 --> 01:23:24,240
0,360 360,480 480,1320
So in summary,
所以总而言之，你知道我们谈论的基本上是伐木，

2683
01:23:26,010 --> 01:23:27,510
0,120 120,270 270,510 510,1050 1230,1500
you know what we what

2684
01:23:27,510 --> 01:23:29,160
0,90 90,300 300,780 780,1230 1230,1650
we talk about is basically

2685
01:23:29,160 --> 01:23:30,480
0,690
logging,|
|

2686
01:23:30,600 --> 01:23:32,760
0,210 210,270 270,870 870,1500
as a solution for,
作为崩溃安全的解决方案，或者实际上是多步骤文件系统操作的解决方案。

2687
01:23:33,860 --> 01:23:35,740
0,360 360,660 660,1320
for crash safety,

2688
01:23:35,890 --> 01:23:38,200
0,210 210,540 540,990 1020,1440 1440,2310
or really for multi step

2689
01:23:39,620 --> 01:23:41,640
0,390 390,660 660,1470
file system operations.|
|

2690
01:23:43,660 --> 01:23:45,400
0,930 1170,1350 1350,1560 1560,1620 1620,1740
And you know if you've
你知道吗，如果你到目前为止看到的话，它对撞车安全非常有效，

2691
01:23:45,400 --> 01:23:47,080
0,180 180,360 360,1020 1110,1440 1440,1680
seen so far, it works

2692
01:23:47,080 --> 01:23:48,610
0,270 270,390 390,660 660,1110 1110,1530
great for crash safety,| but
|但是你知道表演，这将是周一的主题

2693
01:23:48,730 --> 01:23:50,100
0,90 90,810
{you,know} performance,

2694
01:23:50,300 --> 01:23:51,440
0,510
and

2695
01:23:51,740 --> 01:23:52,310
0,210 210,330 330,420 420,480 480,570
that's going to be the

2696
01:23:52,310 --> 01:23:54,470
0,330 330,420 420,1050 1050,1680 1980,2160
topic for Monday| and as
|当您阅读周一的ext3文件系统白皮书时，

2697
01:23:54,470 --> 01:23:56,450
0,120 120,570 720,1170 1350,1800 1800,1980
you read the {ext3 -}

2698
01:23:56,450 --> 01:23:57,950
0,240 240,540 540,870 870,990 990,1500
file system paper for Monday,|
|

2699
01:23:58,100 --> 01:23:59,060
0,240 240,480 510,750 750,810 810,960
you know that's the thing
你知道这是你应该考虑的事情。

2700
01:23:59,060 --> 01:24:00,110
0,120 120,270 270,420 420,690 690,1050
you should be thinking about.|
|

2701
01:24:01,900 --> 01:24:03,730
0,270 270,630 630,840 840,1260 1260,1830
Okay any more final questions,|
好的，还有最后一个问题吗，|

2702
01:24:04,000 --> 01:24:05,080
0,180 180,450 450,750 750,900 900,1080
in fact anybody who has
其实任何要离开的人，请随意离开，

2703
01:24:05,080 --> 01:24:06,580
0,60 60,540 540,990 1020,1320 1320,1500
to leave, please feel free

2704
01:24:06,580 --> 01:24:07,720
0,210 240,600 600,810 810,930 930,1140
to leave,| but if you
|但如果你还想再多问几个问题，那就请便吧。

2705
01:24:07,720 --> 01:24:09,130
0,480 630,900 900,960 960,1080 1080,1410
{} want to hang around

2706
01:24:09,130 --> 01:24:10,450
0,90 90,270 270,420 420,930 930,1320
and ask more questions, you

2707
01:24:10,450 --> 01:24:11,820
0,120 120,390 390,540 540,840
know, please do so.|
|

2708
01:24:14,510 --> 01:24:15,530
0,270 270,420 420,600 600,690 690,1020
Oh, I have a question
哦，我有一个关于高速缓存大小和日志大小的问题，

2709
01:24:15,530 --> 01:24:18,350
0,780 1020,1590 1620,2040 2040,2550 2550,2820
regarding {} cache size and

2710
01:24:18,350 --> 01:24:20,600
0,390 420,720 720,1320 1410,1980 2100,2250
the log size,| so you
|所以您说缓存大小必须和日志大小一样大，

2711
01:24:20,600 --> 01:24:21,710
0,210 210,450 450,600 600,900 900,1110
said that the cache size

2712
01:24:21,710 --> 01:24:22,490
0,210 210,300 300,420 420,480 480,780
has to be a place

2713
01:24:22,490 --> 01:24:23,750
0,180 180,450 450,780 780,960 960,1260
as big as the log

2714
01:24:23,750 --> 01:24:25,610
0,510 540,1380 1380,1560 1560,1770 1770,1860
size,| but they seem to
|但在这件案子里它们的大小似乎是一样的，

2715
01:24:25,610 --> 01:24:27,110
0,90 90,210 210,540 540,990 990,1500
be the same size for

2716
01:24:27,170 --> 01:24:29,090
0,300 300,960 1080,1500 1500,1740 1740,1920
this case,| so that means
|所以这意味着如果日志插针30缓冲然后一些其他操作试图做一些事情，

2717
01:24:29,090 --> 01:24:31,580
0,390 420,900 900,1020 1020,1680 1740,2490
that if the log pins

2718
01:24:32,470 --> 01:24:36,640
0,870 1110,1770 1890,3060 3420,3720 3720,4170
30 {} buffers and then

2719
01:24:36,670 --> 01:24:38,080
0,210 210,420 420,990 990,1320 1320,1410
some other operation tries to

2720
01:24:38,080 --> 01:24:39,460
0,120 120,840
do something,|
|

2721
01:24:39,760 --> 01:24:41,200
0,180 180,390 390,840 840,1170 1170,1440
it just fails because it
它只是失败了，因为它用完了自助餐中的一个空位。

2722
01:24:41,760 --> 01:24:43,650
0,180 180,420 420,900 930,1470 1500,1890
it runs out of a

2723
01:24:43,650 --> 01:24:44,780
0,630
free

2724
01:24:45,120 --> 01:24:46,180
0,540
{}

2725
01:24:46,180 --> 01:24:48,160
0,420 420,510 510,600 600,1260 1290,1980
[spots] in the buffet.| No,
|不，也许我们来看看，

2726
01:24:48,160 --> 01:24:50,950
0,720 1230,1830 1830,2190 2190,2580 2580,2790
{} maybe let's let's look

2727
01:24:50,950 --> 01:24:51,920
0,90 90,390
at the,|
|

2728
01:24:52,830 --> 01:24:54,800
0,480 480,780 780,1290
{} okay so,|
好的，那么，|

2729
01:24:56,600 --> 01:24:57,740
0,150 150,210 210,690 690,930 930,1140
let me first check one
让我先检查一件事。

2730
01:24:57,740 --> 01:24:58,720
0,390
thing.|
|

2731
01:25:02,590 --> 01:25:04,390
0,420 420,720 720,900 900,1050 1050,1800
Okay, let's go to bio.|
好了，我们去上生物课吧。|

2732
01:25:07,070 --> 01:25:08,960
0,510 510,1170
Yeah, okay.|
好的，好的。|

2733
01:25:10,240 --> 01:25:12,040
0,210 210,480 480,750 750,1230 1230,1800
Let's actually first check {NBUF,is}
让我们首先实际检查NBUF是否大于[匹配]、[兴奋地]缓冲区高速缓存大小，

2734
01:25:12,040 --> 01:25:13,300
0,270 270,630
bigger than

2735
01:25:15,590 --> 01:25:17,780
0,330 330,420 420,960 960,1470 1470,2190
size of [match], [excitedly] {buffer,cache},|
|

2736
01:25:17,780 --> 01:25:18,740
0,240 240,420 420,570 570,780 780,960
okay, so it's set up
好的，所以这是为了什么大事。

2737
01:25:18,740 --> 01:25:20,180
0,120 120,390 390,810
to something big.|
|

2738
01:25:20,610 --> 01:25:22,470
0,450 450,630 630,840 840,1140 1140,1860
{} So what happens actually
所以，如果我们找不到bget和缓冲区，会发生什么，实际上是恐慌。

2739
01:25:22,470 --> 01:25:24,030
0,240 240,330 330,660 660,1020 1020,1560
if we can't find bget

2740
01:25:24,030 --> 01:25:25,580
0,120 120,420 420,480 480,900
and find a buffer,

2741
01:25:25,670 --> 01:25:27,380
0,300 300,480 480,1110
actually it's panics.|
|

2742
01:25:28,840 --> 01:25:30,080
0,690
And,
所以，我们，缓冲区缓存里没有空闲的位置，

2743
01:25:32,190 --> 01:25:34,050
0,210 210,810 1050,1440 1440,1650 1650,1860
so we we, there's no

2744
01:25:34,050 --> 01:25:35,040
0,210 210,600 600,690 690,750 750,990
free slot in the buffer

2745
01:25:35,040 --> 01:25:36,780
0,480 480,600 600,1050 1050,1560 1560,1740
cache,| {you,know} xv6 expense that's
|你知道xv6的花费不是特别理想，

2746
01:25:36,780 --> 01:25:38,250
0,180 180,570 570,1110 1140,1230 1230,1470
not particularly ideal,| in fact
|事实上会很可怕，所以你希望永远不会出现这种情况

2747
01:25:38,250 --> 01:25:40,710
0,120 120,540 780,1500 1680,2340 2340,2460
would be terrible and so

2748
01:25:40,710 --> 01:25:41,580
0,270 270,450 450,660 660,750 750,870
you hope never to be

2749
01:25:41,580 --> 01:25:42,660
0,90 90,180 180,630 630,750 750,1080
in this situation| and hopefully
|希望挑选正确的数字基本上不太可能发生。

2750
01:25:42,660 --> 01:25:44,340
0,300 300,600 600,1020 1020,1560 1560,1680
picked numbers correctly basically is

2751
01:25:44,340 --> 01:25:46,040
0,510 510,600 600,1050
unlikely to happen.|
|

2752
01:25:46,040 --> 01:25:47,030
0,270 270,420 420,630 630,870 870,990
{} But why can't we
但是为什么我们不能返回一个错误。

2753
01:25:47,030 --> 01:25:48,360
0,300 300,360 360,810
return an error.|
|

2754
01:25:49,520 --> 01:25:50,300
0,240 240,390 390,570 570,690 690,780
Because that seems like the
因为这似乎是最明显的做法，

2755
01:25:50,300 --> 01:25:51,740
0,330 330,450 450,540 540,810 810,1440
obvious thing to do,| like,
|例如，向调用方和调用方返回错误，可能返回到文件系统接口

2756
01:26:05,660 --> 01:26:06,710
0,270 270,630 630,720 720,930 930,1050
is return an error to

2757
01:26:06,710 --> 01:26:08,450
0,420 420,810 810,990 990,1050 1050,1740
the caller and the caller,

2758
01:26:08,720 --> 01:26:10,310
0,330 330,660 690,1380 1380,1500 1500,1590
maybe returns back up to

2759
01:26:10,310 --> 01:26:11,630
0,90 90,330 330,690 690,1170 1170,1320
the file system interface| and
|只需返回减号1，比如，哦，这个操作失败了。

2760
01:26:11,630 --> 01:26:12,890
0,150 150,510 510,810 810,1050 1050,1260
just return minus one saying

2761
01:26:12,890 --> 01:26:14,150
0,120 120,270 270,420 420,840 840,1260
like oh this operation failed.|
|

2762
01:26:15,140 --> 01:26:16,880
0,390 390,540 540,810 810,1200
Why is that a
为什么这是个问题？

2763
01:26:16,910 --> 01:26:18,100
0,720
problem?|

2764
01:26:21,060 --> 01:26:21,900
0,180 180,330 330,420 420,600 600,840
So ready to think about
准备好思考这一点了，您知道许多文件系统操作都是多步骤操作，对吧。

2765
01:26:21,900 --> 01:26:23,310
0,150 150,300 300,600 870,990 990,1410
this is that you know

2766
01:26:23,580 --> 01:26:25,200
0,360 360,690 690,1200 1200,1320 1320,1620
many {file,system} operations are {multi-step

2767
01:26:25,200 --> 01:26:27,000
0,270 270,840 840,1260
-} operations, right.|
|

2768
01:26:27,030 --> 01:26:28,620
0,300 300,510 510,750 750,930 930,1590
{} As we've seen now,
正如我们现在看到的，在这节课和上一节课中

2769
01:26:28,710 --> 01:26:30,450
0,270 270,420 420,600 600,1110 1470,1740
{} in this lecture and

2770
01:26:30,450 --> 01:26:32,310
0,60 60,150 150,450 450,990 1290,1860
in the previous lecture| and
|比方说，我们写了两次，然后写了第三次，

2771
01:26:32,310 --> 01:26:34,620
0,300 300,960 1260,1950 1950,2130 2130,2310
let's say {}, we did

2772
01:26:34,620 --> 01:26:35,910
0,180 180,780 870,1050 1050,1200 1200,1290
two writes and then the

2773
01:26:35,910 --> 01:26:37,620
0,600 630,1140 1170,1350 1350,1530 1530,1710
third write,| we run into
|我们遇到了这样的情况，在这里我们可以实际进行写入，

2774
01:26:37,620 --> 01:26:38,760
0,180 180,720
this case,

2775
01:26:38,790 --> 01:26:40,170
0,630 630,810 810,1080 1080,1290 1290,1380
where we can actually do

2776
01:26:40,170 --> 01:26:41,490
0,120 120,420 420,750 750,1170 1170,1320
the write,| because there's no
|因为挡路的缓存里已经没有地方了。

2777
01:26:41,490 --> 01:26:42,600
0,270 270,360 360,420 420,630 630,1110
place in the block cache.|
|

2778
01:26:44,380 --> 01:26:45,670
0,240 240,360 360,600 600,810 810,1290
We have done two writes,
我们已经写了两次了，对吧。

2779
01:26:45,910 --> 01:26:46,940
0,480
right.|
|

2780
01:26:47,380 --> 01:26:48,280
0,180 180,240 240,420 420,720 720,900
Can we just [bail] out
我们能不能[跳出]文件系统调用。

2781
01:26:48,280 --> 01:26:49,420
0,60 60,150 150,360 360,660 660,1140
of the file system call.|
|

2782
01:26:53,760 --> 01:26:55,710
0,330 330,630 630,1080 1110,1530 1740,1950
Okay I see right.| We
好的我明白了。|我们无法更正，因为我们可能已经更新到某个文件的目录，挡路目录中。

2783
01:26:55,710 --> 01:26:56,970
0,420 420,720 720,960 960,1050 1050,1260
cannot correct, because we might

2784
01:26:56,970 --> 01:26:58,500
0,120 120,540 540,900 930,1230 1230,1530
have updated to {} in

2785
01:26:58,500 --> 01:27:01,290
0,900 930,1710 1800,2040 2040,2460 2460,2790
the directory, {} directory block

2786
01:27:01,290 --> 01:27:02,360
0,90 90,540
of some

2787
01:27:02,420 --> 01:27:04,520
0,840 840,1290 1320,1500 1500,1920 1920,2100
{} file,| if we might
|如果我们可能需要更新某个目录中的目录挡路，

2788
01:27:04,520 --> 01:27:05,390
0,90 90,150 150,450 450,510 510,870
have to update the directory

2789
01:27:05,390 --> 01:27:06,710
0,210 210,270 270,420 420,930 960,1320
block in some directory,| and
|如果我们想把这件事办好，

2790
01:27:07,070 --> 01:27:08,600
0,180 180,300 300,600 600,1050 1230,1530
if we wanted to make

2791
01:27:08,600 --> 01:27:09,830
0,150 150,570 570,960 960,1080 1080,1230
this work,| what we would
|我们需要做的就是撤销这些更改，就像我们以前所做的任何写入一样，

2792
01:27:09,830 --> 01:27:11,090
0,150 150,210 210,420 420,690 870,1260
have to do is undo

2793
01:27:11,090 --> 01:27:13,540
0,300 300,810 840,1260 1290,1920
those changes, like any

2794
01:27:13,540 --> 01:27:15,310
0,660 660,810 810,900 900,1080 1080,1770
writes that we did before,|
|

2795
01:27:15,310 --> 01:27:16,180
0,180 180,360 360,420 420,570 570,870
as part of that system
作为系统调用的一部分，我们必须撤消。

2796
01:27:16,180 --> 01:27:17,260
0,210 210,330 330,450 450,540 540,1080
call, we have to undo.|
|

2797
01:27:18,770 --> 01:27:22,220
0,1410 1410,1530 1530,1680 1680,2190
Okay.| That was painful,
好吧。|那很痛苦，这就是我们不做的原因。

2798
01:27:22,250 --> 01:27:23,000
0,360 360,450 450,540 540,660 660,750
that's what we don't do

2799
01:27:23,000 --> 01:27:23,800
0,210
it.|
|

2800
01:27:24,270 --> 01:27:25,520
0,150 150,240 240,360 360,630
Does that make sense.|
这有意义吗。|

2801
01:27:25,640 --> 01:27:26,570
0,360 360,510 510,690 690,840 840,930
Okay so it's not a
好的，所以这不是问题，

2802
01:27:26,570 --> 01:27:28,000
0,420 420,900
problem,| if
|如果他们记录所有的日志，并且没有更多的空间可供缓存，

2803
01:27:28,480 --> 01:27:31,690
0,570 720,1440 1710,2190 2220,2880 2880,3210
they log the log pins

2804
01:27:31,690 --> 01:27:33,790
0,780 1230,1440 1440,1680 1680,1830 1830,2100
everything and there's no more

2805
01:27:33,790 --> 01:27:35,020
0,300 300,420 420,750 750,1080 1110,1230
space for cache,| but it
|但它会惊慌失措的，好吗。

2806
01:27:35,020 --> 01:27:37,380
0,300 300,630 630,1050 1170,1800
will just panic, okay.|
|

2807
01:27:38,320 --> 01:27:39,370
0,180 180,240 240,420 420,840 840,1050
Yeah, of course {this,panic} never
是的，当然这种恐慌从来没有真正发生过，就像只有极少数的情况有希望发生一样。

2808
01:27:39,370 --> 01:27:40,810
0,240 240,600 600,990 990,1200 1200,1440
really happen, like there's a

2809
01:27:40,810 --> 01:27:42,400
0,360 360,720 720,1110 1110,1410 1410,1590
only a [corner] cases where

2810
01:27:42,400 --> 01:27:45,000
0,300 300,660 660,1110
this hopefully happens.|
|

2811
01:27:45,120 --> 01:27:46,580
0,150 150,420 420,540 540,960
I guess you just,|
我猜你只是，|

2812
01:27:46,780 --> 01:27:48,400
0,390 390,750 750,1170 1170,1410 1410,1620
okay, yeah that makes sense
好的，有道理好的，谢谢。

2813
01:27:48,400 --> 01:27:51,320
0,510 690,1050 1050,1590
okay, thank you.|
|

2814
01:27:51,940 --> 01:27:53,480
0,210 210,390 390,1020
Any more questions?|
还有什么问题吗？|

2815
01:27:54,120 --> 01:27:55,050
0,240 240,390 390,480 480,540 540,930
{} I have a question
我有个问题是关于，

2816
01:27:55,050 --> 01:27:57,030
0,390 420,1110 1350,1530 1530,1680 1680,1980
about,| {} I guess following
|我想是继我之前关于团队承诺的文章之后，

2817
01:27:57,030 --> 01:27:57,990
0,150 150,270 270,480 480,600 600,960
up my earlier one about

2818
01:27:58,020 --> 01:28:01,710
0,690 1350,1710 1710,1950 1950,2700 3060,3690
{} the group commits,| I
|我试着去想，就像我想我有点理解的那样，高层试图确保

2819
01:28:02,190 --> 01:28:03,690
0,420 420,660 660,750 750,990 990,1500
was trying to think of,

2820
01:28:03,990 --> 01:28:05,100
0,120 120,390 390,600 600,870 870,1110
like I think I kind

2821
01:28:05,100 --> 01:28:06,060
0,90 90,450 450,570 570,630 630,960
of understand it a {high,level}

2822
01:28:06,060 --> 01:28:06,930
0,240 240,390 390,450 450,600 600,870
was trying to make sure|
|

2823
01:28:06,930 --> 01:28:09,090
0,30 30,600 600,1410 1410,1800 1800,2160
I understand concrete example, why
我理解具体的例子，为什么它很重要

2824
01:28:09,450 --> 01:28:12,300
0,210 210,540 780,1710 1710,2100 2370,2850
it is important| and {}
|可能这是一个例子，展示了它的，

2825
01:28:12,830 --> 01:28:14,030
0,240 240,540 540,750 750,840 840,1200
may is this an example

2826
01:28:14,030 --> 01:28:15,560
0,90 90,270 270,600 600,1170 1170,1530
that kind of demonstrates its,|
|

2827
01:28:15,560 --> 01:28:16,760
0,300 600,780 780,960 960,1080 1080,1200
like I guess I was
就像我猜我在想这样一种情况，你说这可能是错综复杂的，

2828
01:28:16,760 --> 01:28:18,140
0,270 270,420 420,630 630,1200 1200,1380
thinking of a situation where

2829
01:28:18,140 --> 01:28:20,870
0,120 120,630 1020,1620 2070,2340 2340,2730
you have {} say like

2830
01:28:21,890 --> 01:28:22,910
0,270 270,390 390,480 480,900 900,1020
this might be convoluted,| like
|类似于一个进程生成如1到N的数字流，然后两个进程消耗，

2831
01:28:22,910 --> 01:28:25,010
0,240 240,900 900,1350 1350,1440 1440,2100
one process generating a stream

2832
01:28:25,100 --> 01:28:26,960
0,450 510,990 990,1290 1320,1620 1620,1860
of numbers like one through

2833
01:28:26,960 --> 01:28:29,450
0,420 720,870 870,1020 1020,1260 1260,2490
n and then two processes

2834
01:28:29,870 --> 01:28:32,090
0,990 1230,1620 1620,1920 1920,2070 2070,2220
consuming,| {} that maybe they're
|可能他们在听同一个管道，

2835
01:28:32,090 --> 01:28:33,470
0,270 270,360 360,420 420,630 630,1380
listening on the same pipe,|
|

2836
01:28:33,500 --> 01:28:36,380
0,690 960,1800 1800,2190 2190,2430 2430,2880
{} and say like n
说Like n Like停止一个偶数，

2837
01:28:36,440 --> 01:28:37,910
0,240 240,570 570,720 720,1020 1020,1470
like stops an even number,|
|

2838
01:28:38,060 --> 01:28:40,550
0,510 570,840 840,1440 1440,1770 2040,2490
{} one process is consuming
一个过程是消耗并打印出奇数，一个过程是消耗部分偶数，

2839
01:28:40,550 --> 01:28:41,780
0,150 150,450 450,780 840,1020 1020,1230
and printing out the odd

2840
01:28:41,780 --> 01:28:43,280
0,360 360,510 510,900 900,1080 1080,1500
numbers, one process is consuming

2841
01:28:43,280 --> 01:28:45,110
0,270 270,420 420,570 570,1140 1140,1830
part of the even numbers,|
|

2842
01:28:45,380 --> 01:28:47,390
0,510 660,1260 1470,1620 1620,1770 1770,2010
{} and if you didn't
如果你没有小组承诺，

2843
01:28:47,390 --> 01:28:48,800
0,150 150,360 360,810 810,990 990,1410
have group commits,| so like
|所以喜欢正确的行为，并说他们打印它就像他们写相同的文件一样。

2844
01:28:48,800 --> 01:28:50,660
0,270 270,630 630,1200 1200,1470 1500,1860
the correct behavior and say

2845
01:28:50,660 --> 01:28:51,980
0,480 480,810 810,1020 1020,1170 1170,1320
they're printing it for like

2846
01:28:51,980 --> 01:28:54,230
0,600 690,1110 1110,1500 1500,1800 1800,2250
their writing the same file.|
|

2847
01:28:54,600 --> 01:28:56,700
0,660 1140,1500 1500,1710 1710,1920 1920,2100
Um.| {} And so the
恩。|所以正确的行为应该是在这一切结束的时候，

2848
01:28:56,700 --> 01:28:58,110
0,330 330,660 660,780 780,1200 1230,1410
correct behavior would be at

2849
01:28:58,110 --> 01:28:59,190
0,90 90,270 270,420 720,930 930,1080
the end of at the

2850
01:28:59,190 --> 01:29:00,090
0,300 300,390 390,540 540,840 840,900
end of all this,| you
|您可能希望文件具有偶数，即最后一个数字，

2851
01:29:00,090 --> 01:29:00,810
0,90 90,360 360,450 450,660 660,720
would expect the file to

2852
01:29:00,810 --> 01:29:02,310
0,450 450,780 810,930 930,1170 1170,1500
have like an even number,

2853
01:29:02,430 --> 01:29:04,600
0,90 90,360 360,750 1080,1650
the last number {},|
|

2854
01:29:04,600 --> 01:29:05,920
0,420 480,840 840,990 990,1200 1200,1320
but if you didn't have
但是如果你没有小组承诺，

2855
01:29:05,920 --> 01:29:07,420
0,180 180,450 450,600 600,990 990,1500
group commits,| it's possible that
|有可能第二个(倒数第二个)进程实际上在最后一个进程之后提交，并且它实际上看到9个进程，

2856
01:29:07,690 --> 01:29:10,840
0,600 840,1320 1380,1890 1890,2340 2340,3150
{} the second {[to,last]} process

2857
01:29:11,170 --> 01:29:13,120
0,270 270,450 450,810 810,1530 1830,1950
actually gets committed after the

2858
01:29:13,120 --> 01:29:14,440
0,240 240,690 750,930 930,1050 1050,1320
last one and it actually

2859
01:29:14,440 --> 01:29:15,340
0,150 150,480 480,600 600,810 810,900
see nine,| is just like
|就像一个正确的例子，为什么这很重要。

2860
01:29:15,340 --> 01:29:17,410
0,270 300,930 960,1680 1680,1890 1890,2070
a correct example, why this

2861
01:29:17,410 --> 01:29:18,910
0,120 120,510 510,720 720,960 960,1500
is important.| I think I
|我想我得再仔细考虑一下，

2862
01:29:18,910 --> 01:29:19,660
0,150 150,300 300,540 540,600 600,750
have to think a little

2863
01:29:19,660 --> 01:29:20,710
0,120 120,240 240,600 600,840 840,1050
bit more carefully about it,|
|

2864
01:29:20,800 --> 01:29:21,790
0,210 210,390 390,600 600,690 690,990
{} but that is definitely
但这绝对是问题的症结所在，

2865
01:29:21,790 --> 01:29:24,490
0,90 90,750 780,1620 1650,2340 2370,2700
the flavour of the problem,|
|

2866
01:29:24,490 --> 01:29:25,540
0,180 180,390 390,540 540,840 840,1050
you might run into if
如果重新排序系统调用，可能会遇到。

2867
01:29:25,540 --> 01:29:27,300
0,210 210,690 690,990 990,1500
you reorder system calls.|
|

2868
01:29:28,290 --> 01:29:29,420
0,630
Okay,
好的，好的。

2869
01:29:29,420 --> 01:29:30,320
0,480
okay.|
|

2870
01:29:30,680 --> 01:29:32,120
0,360 360,600 600,720 720,1140 1140,1440
{} I have a great
我在讲稿中有一个很好的例子，

2871
01:29:32,120 --> 01:29:33,500
0,420 420,540 540,630 630,900 900,1380
example in the lecture note,|
|

2872
01:29:33,560 --> 01:29:35,990
0,570 570,930 1590,1800 1800,2100 2100,2430
{} if the lecture notes
如果课堂讲稿中的命令，你知道，如果你不承诺，行为就会变得怪异，

2873
01:29:35,990 --> 01:29:37,130
0,90 90,300 300,600 600,930 930,1140
you know shell command that

2874
01:29:37,130 --> 01:29:39,050
0,330 330,450 450,690 720,1500 1500,1920
really you know behave weirdly

2875
01:29:39,050 --> 01:29:39,980
0,120 120,210 210,420 420,660 660,930
if you didn't commit to,|
|

2876
01:29:40,700 --> 01:29:41,420
0,270 270,330 330,510 510,660 660,720
this is not really an
从某种意义上讲，这并不是组提交的问题，

2877
01:29:41,420 --> 01:29:42,170
0,210 210,270 270,450 450,630 630,750
issue in some sense from

2878
01:29:42,170 --> 01:29:43,100
0,210 210,570 570,630 630,870 870,930
group commit,| is really an
|确实是一个事务需要按顺序提交的问题。

2879
01:29:43,100 --> 01:29:44,930
0,240 240,660 1140,1620 1620,1770 1770,1830
issue that transactions need to

2880
01:29:44,930 --> 01:29:46,300
0,120 120,450 450,540 540,960
be committed in order.|
|

2881
01:29:47,320 --> 01:29:48,660
0,750
Mhm,
嗯，我明白了，如果他没有小组承诺，那就分组吧。

2882
01:29:49,010 --> 01:29:50,360
0,150 150,510 600,960 960,1200 1200,1350
I see, {and,group} if he

2883
01:29:50,360 --> 01:29:51,710
0,240 240,420 420,660 660,930 930,1350
didn't have group commit, then.|
|

2884
01:29:52,100 --> 01:29:54,290
0,1320 1350,1650 1650,1830 1830,2040 2040,2190
Yeah, people might think like
是啊，人们可能会想如果你没有集体承诺怎么办，

2885
01:29:54,290 --> 01:29:56,420
0,570 570,690 690,1860 1890,1980 1980,2130
well what if you don't

2886
01:29:56,420 --> 01:29:57,770
0,150 150,390 390,540 540,1050 1080,1350
have group commit,| then there's
|然后就会有一种诱惑，基本上就是提交一些稍后的事务，

2887
01:29:57,770 --> 01:29:59,000
0,60 60,600 600,690 690,1170 1170,1230
a temptation to basically you

2888
01:29:59,000 --> 01:30:00,410
0,120 120,390 390,660 660,930 930,1410
know commit some later transaction,|
|

2889
01:30:00,410 --> 01:30:01,610
0,210 210,420 420,720 720,1080 1080,1200
because it's already finished, but
因为它已经完成了，但是第一个还没有完成，

2890
01:30:01,610 --> 01:30:02,660
0,90 90,330 330,480 480,750 750,1050
the first one isn't finished

2891
01:30:02,660 --> 01:30:03,380
0,270
yet,|
|

2892
01:30:03,440 --> 01:30:04,850
0,300 300,600 600,690 690,930 930,1410
{} and to create space,|
为了创造空间，|

2893
01:30:04,850 --> 01:30:05,900
0,120 120,330 330,510 510,540 540,1050
but that's not a solution.|
但这不是解决之道。|

2894
01:30:07,490 --> 01:30:09,590
0,750 1110,1260 1260,1440 1440,1830 1830,2100
Okay, that makes sense {},|
好的，这就说得通了，|

2895
01:30:09,590 --> 01:30:11,060
0,690 690,870 870,960 960,1230 1230,1470
where in the lecture notes
在课堂上的什么地方记下了这个例子。

2896
01:30:11,060 --> 01:30:12,770
0,450 450,960 960,1080 1080,1470 1470,1710
this example of.| {I,think} {shell,command},
|我认为shell命令很重要，其中通过排序说明了这一点。

2897
01:30:13,280 --> 01:30:15,380
0,270 270,690 690,1110 1290,1950 1950,2100
where {} were illustrated by

2898
01:30:15,380 --> 01:30:16,960
0,450 450,540 540,1080
ordering is important.|
|

2899
01:30:17,270 --> 01:30:19,340
0,420 540,720 720,1140 1140,1500 1590,2070
Okay.| It doesn't, it doesn't
好吧。|它不会，它不会把它直接与团体提交联系起来，

2900
01:30:19,340 --> 01:30:20,930
0,180 180,270 270,810 810,1200 1200,1590
tie it directly to a

2901
01:30:20,930 --> 01:30:22,400
0,270 270,660 660,840 840,1110 1110,1470
group commits,| but it basically
|但它基本上说明了对系统调用进行排序很重要。

2902
01:30:22,400 --> 01:30:23,630
0,210 210,300 300,600 600,840 840,1230
makes the point that ordering

2903
01:30:23,630 --> 01:30:25,240
0,270 270,510 510,600 600,1110
system calls is important.|
|

2904
01:30:25,820 --> 01:30:27,020
0,150 150,510 570,900 900,1050 1050,1200
I see, is this in
我明白了，这是不是跟课文里的一样。

2905
01:30:27,020 --> 01:30:28,850
0,240 270,540 540,1140 1170,1290 1290,1830
the the like the text.
