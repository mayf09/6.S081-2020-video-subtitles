1
00:00:00,180 --> 00:00:01,800
0,330 330,480 480,750 750,900 900,1620
And can everybody see Maya.

2
00:00:02,840 --> 00:00:05,330
0,750 870,1290 1320,1770 1890,2400 2400,2490
Scream or a whiteboard that

3
00:00:05,330 --> 00:00:08,160
0,90 90,690 1560,1950 1950,2220
I shared okay good.

4
00:00:09,250 --> 00:00:10,690
0,450 450,840 840,1050 1050,1290 1290,1440
How are people doing with

5
00:00:10,690 --> 00:00:12,070
0,330 360,660 660,960 990,1200 1200,1380
the log lap, let me

6
00:00:12,070 --> 00:00:14,170
0,330 330,720 1020,1380 1380,1740 1740,2100
start there, just ask if.

7
00:00:15,740 --> 00:00:18,380
0,450 450,1320 1560,1830 1830,2040 2040,2640
How progress and what its

8
00:00:18,560 --> 00:00:20,330
0,270 270,780 780,1110 1140,1470 1470,1770
more difficult or it's looking,

9
00:00:20,330 --> 00:00:21,440
0,570
okay.

10
00:00:21,680 --> 00:00:23,450
0,540 540,630 630,810 810,1050 1140,1770
Anybody who want to report

11
00:00:23,450 --> 00:00:24,650
0,60 60,210 210,630 630,780 780,1200
on their experience so far.

12
00:00:30,520 --> 00:00:31,810
0,210 210,750 780,990 990,1050 1050,1290
I hope lots of people

13
00:00:31,810 --> 00:00:33,160
0,90 90,750
have started.

14
00:00:37,130 --> 00:00:39,920
0,150 150,300 330,1920 2130,2400 2400,2790
Oh yeah, like go ahead,

15
00:00:40,250 --> 00:00:41,960
0,300 300,570 570,690 690,1140
oh, sorry, go ahead.

16
00:00:42,050 --> 00:00:43,620
0,450 480,930
Oh, cool.

17
00:00:44,130 --> 00:00:45,100
0,180
Yeah.

18
00:00:45,130 --> 00:00:47,380
0,300 300,510 510,660 660,1530
I'll go, I'll go.

19
00:00:47,440 --> 00:00:49,060
0,270 270,510 510,1170 1230,1410 1410,1620
The lock lab I think

20
00:00:49,060 --> 00:00:51,580
0,120 120,480 480,870 870,1920
the first part, the.

21
00:00:52,890 --> 00:00:55,350
0,120 120,900 930,1380 1380,1770 1770,2460
The Kellogg governor on was.

22
00:00:56,250 --> 00:00:58,260
0,330 330,510 510,1170 1200,1260 1470,2010
Not as bad as well,

23
00:00:58,530 --> 00:01:00,270
0,150 150,330 330,420 420,750 750,1740
and then the second part

24
00:01:00,540 --> 00:01:02,070
0,300 300,390 390,540 540,1290 1350,1530
was a bit harder, well

25
00:01:02,070 --> 00:01:02,880
0,120 120,210 210,450 450,720 720,810
it's a lot harder in

26
00:01:02,880 --> 00:01:05,340
0,150 150,780 1230,1920
my opinion, um.

27
00:01:06,180 --> 00:01:07,170
0,150 150,300 300,450 450,600 600,990
You just have to figure

28
00:01:07,170 --> 00:01:08,240
0,540
out.

29
00:01:10,150 --> 00:01:11,300
0,630
A.

30
00:01:11,730 --> 00:01:12,600
0,210 210,360 360,420 420,660 660,870
I guess the hard part

31
00:01:12,600 --> 00:01:13,960
0,870
was.

32
00:01:14,400 --> 00:01:16,530
0,480 480,630 630,690 690,1230 1230,2130
Thinking of a solution that.

33
00:01:17,460 --> 00:01:18,600
0,120 120,300 300,450 450,780 780,1140
It's like hey this doesn't

34
00:01:18,600 --> 00:01:20,980
0,270 270,810 810,960 960,1830
cause deadlock, but then.

35
00:01:20,980 --> 00:01:22,080
0,60 60,150 150,540
Do you think.

36
00:01:22,460 --> 00:01:24,260
0,270 270,330 330,810 810,1140 1140,1800
There are cases where like

37
00:01:24,440 --> 00:01:26,510
0,450 450,1050 1200,1410 1410,1860 1860,2070
deadlock ha could happen if

38
00:01:26,510 --> 00:01:29,030
0,510 630,1590 1620,1800 1800,2070 2070,2520
you acquire a buck, it's

39
00:01:29,030 --> 00:01:30,050
0,270 270,600 600,720 720,840 840,1020
lock again and all that

40
00:01:30,050 --> 00:01:31,960
0,300 300,660
stuff but.

41
00:01:32,210 --> 00:01:33,050
0,270 270,390 390,540 540,690 690,840
Yeah I just have to

42
00:01:33,050 --> 00:01:34,520
0,390 900,1050 1050,1140 1140,1230 1230,1470
think you have to think

43
00:01:34,520 --> 00:01:36,650
0,480 840,1320 1320,1590 1590,2010 2010,2130
like about extra cases and

44
00:01:36,650 --> 00:01:37,970
0,120 120,300 300,630 630,960 1050,1320
all that stuff and after

45
00:01:37,970 --> 00:01:38,870
0,210 210,300 300,570 570,660 660,900
that it shouldn't be that

46
00:01:38,870 --> 00:01:39,620
0,330
bad.

47
00:01:40,130 --> 00:01:41,120
0,330 330,630 630,750 750,900 900,990
Anybody else who want to

48
00:01:41,120 --> 00:01:42,900
0,270 270,390 390,1110
share their experience.

49
00:01:43,250 --> 00:01:44,720
0,210 210,660 990,1140 1140,1350 1350,1470
So far I want to

50
00:01:44,720 --> 00:01:46,550
0,420 420,1110 1140,1320 1320,1440 1440,1830
ask a are we allowed

51
00:01:46,550 --> 00:01:47,480
0,120 120,330 330,600 600,810 810,930
to do any part of

52
00:01:47,480 --> 00:01:49,010
0,120 120,510 510,780 780,1170 1170,1530
the lab like lock free

53
00:01:49,010 --> 00:01:50,600
0,570 570,690 690,900 900,1140 1140,1590
because I know like their

54
00:01:50,660 --> 00:01:52,130
0,450 450,690 690,810 810,1320 1320,1470
first part, for example it's

55
00:01:52,130 --> 00:01:54,170
0,510 570,840 840,1440 1440,1800 1800,2040
pretty the instructions said pretty

56
00:01:54,170 --> 00:01:56,510
0,690 690,1110 1140,1440 1440,2010 2010,2340
clearly like make apparel memory

57
00:01:56,510 --> 00:01:59,120
0,660 660,1020 1380,1920 2310,2490 2490,2610
allocator, but um, can we

58
00:01:59,120 --> 00:02:00,230
0,150 150,300 300,570 570,840 840,1110
do it just lock free

59
00:02:00,230 --> 00:02:02,630
0,390 450,1080 1110,1290 1290,1560 1920,2400
and sink, you know leave

60
00:02:02,630 --> 00:02:04,040
0,120 120,300 300,390 390,780 930,1410
it as it is you're

61
00:02:04,040 --> 00:02:05,810
0,210 210,300 300,960 960,1440 1440,1770
free to do any solution

62
00:02:05,810 --> 00:02:06,920
0,90 90,390 390,480 480,720 720,1110
to pass which made great

63
00:02:07,700 --> 00:02:11,000
0,240 240,750 870,1560 1770,2610 2640,3300
aha, it's fine a lock

64
00:02:11,000 --> 00:02:12,800
0,480 480,930 930,1110 1110,1530 1530,1800
free I would be a

65
00:02:12,830 --> 00:02:13,700
0,210 210,300 300,630 630,780 780,870
you are certainly free to

66
00:02:13,700 --> 00:02:14,480
0,180 180,420
do it.

67
00:02:14,510 --> 00:02:15,800
0,390 390,570 570,690 690,1170 1170,1290
A I'd be hesitant to

68
00:02:15,800 --> 00:02:16,940
0,330 330,600 630,810 810,930 930,1140
start there, if I were

69
00:02:16,940 --> 00:02:18,470
0,390 390,660 660,870 870,1230 1230,1530
you I would start first

70
00:02:18,470 --> 00:02:20,330
0,450 480,780 780,1050 1050,1530 1530,1860
with a more fine-grained lock

71
00:02:20,330 --> 00:02:21,920
0,780 780,960 960,1200 1200,1500 1500,1590
implementation and then move to

72
00:02:21,920 --> 00:02:23,740
0,120 120,360 360,570 570,1290
the lock free implementation.

73
00:02:24,140 --> 00:02:25,940
0,450 870,1050 1050,1170 1170,1500 1560,1800
Um, so the rate there

74
00:02:25,940 --> 00:02:26,840
0,150 150,360 360,690 690,810 810,900
is not started with a

75
00:02:26,840 --> 00:02:27,980
0,300 300,480 480,660 660,990 990,1140
walk free as because if

76
00:02:27,980 --> 00:02:28,880
0,120 120,330 330,420 420,540 540,900
you go to a fine

77
00:02:28,880 --> 00:02:29,900
0,390 390,480 480,690 690,780 780,1020
grain you need to do

78
00:02:29,900 --> 00:02:31,160
0,180 180,300 300,420 420,870 870,1260
all of the parallel stuff,

79
00:02:31,160 --> 00:02:31,940
0,210 210,360 360,450 450,660 660,780
but if you just go

80
00:02:31,940 --> 00:02:32,930
0,420 420,540 540,600 600,840 840,990
directly to a lot three

81
00:02:32,930 --> 00:02:34,070
0,240 240,450 450,570 570,750 750,1140
one then you can keep

82
00:02:34,070 --> 00:02:35,540
0,270 270,480 480,750 750,1230 1230,1470
it on a single free

83
00:02:35,540 --> 00:02:36,710
0,480 480,630 630,780 780,960 960,1170
list and you just need

84
00:02:36,710 --> 00:02:38,240
0,360 480,810 810,990 990,1200 1200,1530
to you just need to

85
00:02:38,240 --> 00:02:41,450
0,630 990,1440 1440,2100 2100,2700 2700,3210
um ah, automata size, the

86
00:02:41,480 --> 00:02:43,250
0,390 390,540 540,990 990,1590 1590,1770
free and allocate operations which

87
00:02:43,250 --> 00:02:44,680
0,300 300,480 480,660 660,990
actually isn't that bad.

88
00:02:45,120 --> 00:02:46,530
0,300 300,420 420,660 660,1110 1110,1410
Yeah I think maybe in

89
00:02:46,530 --> 00:02:47,640
0,480 480,600 600,780 780,840 840,1110
a if there's a single

90
00:02:47,640 --> 00:02:48,420
0,240 240,330 330,390 390,660 660,780
list in the case of

91
00:02:48,420 --> 00:02:49,440
0,90 90,600 600,720 720,900 900,1020
the Kellogg that might be

92
00:02:49,440 --> 00:02:50,310
0,150 150,450 450,450 450,780 780,870
the case I think you

93
00:02:50,310 --> 00:02:52,320
0,180 180,870 900,1320 1320,1740 1740,2010
know the lock freebie alec

94
00:02:52,320 --> 00:02:53,220
0,120 120,240 240,300 300,810 810,900
is going to be a

95
00:02:53,220 --> 00:02:55,560
0,180 180,810 1140,1440 1440,2070 2070,2340
more complicated yeah that I'm

96
00:02:55,590 --> 00:02:57,780
0,510 510,630 630,990 1050,1530 1830,2190
scared to do but that's

97
00:02:57,780 --> 00:02:59,730
0,120 120,330 330,690 690,780 780,1950
the right reaction to have

98
00:03:01,440 --> 00:03:03,000
0,660 660,1080
anybody else.

99
00:03:04,950 --> 00:03:06,210
0,300 300,720 720,840 840,930 930,1260
I found it a bit

100
00:03:06,210 --> 00:03:08,370
0,480 480,630 630,1290 1320,1680 1680,2160
hard to debug those problems

101
00:03:08,370 --> 00:03:10,350
0,330 330,480 480,900 930,1620 1620,1980
because it's not immediately clear

102
00:03:10,350 --> 00:03:11,250
0,150 150,270 270,690 690,810 810,900
what is happening so we

103
00:03:11,250 --> 00:03:12,380
0,210 210,570
have to.

104
00:03:12,380 --> 00:03:13,940
0,240 240,420 420,630 630,810 810,1560
Go and sit with GDP

105
00:03:14,120 --> 00:03:15,200
0,510
and.

106
00:03:15,270 --> 00:03:18,090
0,600 600,900 900,1380 1410,1800 2130,2820
Break break break and yeah.

107
00:03:18,980 --> 00:03:21,320
0,240 240,330 330,510 510,1920 2010,2340
Yeah I think Lindsay one

108
00:03:21,320 --> 00:03:22,280
0,270 270,420 420,600 600,900 900,960
reason I'm always scared to

109
00:03:22,280 --> 00:03:23,480
0,120 120,330 330,510 510,1020 1020,1200
get these la claps I

110
00:03:23,480 --> 00:03:24,920
0,330 330,810 810,930 930,1140 1140,1440
said lapses, you know they're

111
00:03:24,920 --> 00:03:27,860
0,270 270,360 360,1110 1590,2430 2460,2940
harder to debug, and you

112
00:03:27,860 --> 00:03:29,540
0,120 120,510 990,1290 1290,1470 1470,1680
know the bug might not

113
00:03:29,540 --> 00:03:30,620
0,210 210,360 360,450 450,720 720,1080
show up on every run.

114
00:03:31,200 --> 00:03:34,110
0,630 870,1410 1650,2340 2340,2760 2760,2910
And um, but hopefully it

115
00:03:34,110 --> 00:03:35,880
0,180 180,420 420,960 960,1230 1230,1770
is very educational, because learning

116
00:03:35,880 --> 00:03:37,800
0,210 240,750 750,1380 1410,1860 1860,1920
a program walks inside the

117
00:03:37,800 --> 00:03:39,270
0,390 390,480 480,870 870,1080 1080,1470
kernel is a real thing,

118
00:03:39,270 --> 00:03:41,220
0,540 780,1410 1410,1590 1590,1680 1680,1950
and um, but it is

119
00:03:41,220 --> 00:03:43,460
0,600 600,990 990,1230 1230,1830
definitely a core challenge.

120
00:03:44,100 --> 00:03:45,840
0,540 540,690 690,1230 1230,1470 1470,1740
One thing about maybe there's

121
00:03:45,840 --> 00:03:48,900
0,240 270,750 750,1350 1380,2100 2490,3060
a node for the course,

122
00:03:48,900 --> 00:03:50,070
0,90 90,240 240,540 600,960 960,1170
you know the next live

123
00:03:50,070 --> 00:03:52,020
0,330 330,600 600,1200 1230,1770 1770,1950
actually doesn't involve basically any

124
00:03:52,020 --> 00:03:54,690
0,660 1020,1590 1590,2100 2130,2370 2370,2670
currency a and should hopefully

125
00:03:54,690 --> 00:03:55,890
0,150 150,240 240,390 390,840 840,1200
that will be much more

126
00:03:55,890 --> 00:03:57,100
0,720
straightforward.

127
00:03:59,760 --> 00:04:01,170
0,390 390,480 480,780 810,1110 1110,1410
Okay I get I guess,

128
00:04:01,170 --> 00:04:03,060
0,150 150,240 240,750 900,1800 1800,1890
how do you how do

129
00:04:03,060 --> 00:04:06,240
0,150 150,1080 1080,1560 1560,2430 2430,3180
you efficiently or effectively debug

130
00:04:06,270 --> 00:04:08,070
0,600 600,1140 1140,1410 1410,1620 1620,1800
concurrent programs like with all

131
00:04:08,070 --> 00:04:10,950
0,210 210,630 630,1290 1320,1710 1710,2880
those multiple threads using gdi

132
00:04:10,950 --> 00:04:13,140
0,1020 1020,1260 1260,1470 1470,1770 1770,2190
I use very basic stuff,

133
00:04:13,260 --> 00:04:14,730
0,90 90,510 510,1080 1110,1260 1260,1470
um I have a use

134
00:04:14,730 --> 00:04:15,960
0,180 180,840
print statements.

135
00:04:15,990 --> 00:04:17,670
0,990 1020,1230 1230,1320 1320,1530 1530,1680
Um, but the main thing

136
00:04:17,670 --> 00:04:19,290
0,150 150,510 510,810 810,1320 1320,1620
I rely on is I

137
00:04:19,290 --> 00:04:20,250
0,210 210,480 480,690 690,780 780,960
sort of tried to write

138
00:04:20,250 --> 00:04:22,230
0,390 390,570 570,1170 1170,1590 1590,1980
down or assertions for variance

139
00:04:22,230 --> 00:04:23,730
0,180 180,480 510,1140 1170,1410 1410,1500
that I think should be

140
00:04:23,730 --> 00:04:25,320
0,270 270,390 390,630 630,1080
true at every point.

141
00:04:25,490 --> 00:04:27,290
0,720 750,1080 1080,1200 1200,1560 1560,1800
And if the assertion goes

142
00:04:27,290 --> 00:04:28,490
0,360 360,630 630,690 690,990 990,1200
off, then I know that

143
00:04:28,490 --> 00:04:29,450
0,120 120,240 240,480 480,720 720,960
you know there's something wrong

144
00:04:29,450 --> 00:04:30,890
0,60 60,180 180,660 660,1020 1020,1440
in my thinking or decision

145
00:04:30,890 --> 00:04:31,900
0,120 120,510
was wrong.

146
00:04:31,900 --> 00:04:33,490
0,480 480,990 990,1110 1110,1410 1410,1590
And then I think for

147
00:04:33,490 --> 00:04:35,560
0,90 90,570 600,1200 1410,1950 1950,2070
a while and try to

148
00:04:35,560 --> 00:04:36,910
0,330 330,540 540,630 630,1020 1050,1350
decide what it is, and

149
00:04:36,910 --> 00:04:38,620
0,540 540,720 720,840 840,1230
then go from there.

150
00:04:38,620 --> 00:04:43,480
0,630 840,1770 1920,3420 3420,4050 4650,4860
Um the normal OEM for

151
00:04:43,480 --> 00:04:45,760
0,240 240,840 840,1350 1350,1560 1560,2280
many other settings, there are

152
00:04:46,000 --> 00:04:47,530
0,450 450,1020 1020,1170 1170,1290 1290,1530
race detectors that can help

153
00:04:47,530 --> 00:04:50,260
0,150 150,150 1410,1590 1620,2130 2130,2730
you, um, um, um, and

154
00:04:50,290 --> 00:04:52,510
0,690 720,1320 1320,1710 1710,2040 2040,2220
again basically flag code that

155
00:04:52,510 --> 00:04:53,770
0,330 330,570 570,840 840,1050 1050,1260
mean looks like it might

156
00:04:53,770 --> 00:04:56,230
0,300 300,840 840,1500 1590,1980 1980,2460
be having problems or as

157
00:04:56,260 --> 00:04:59,320
0,390 390,570 570,810 810,1380 1560,3060
prone to race conditions but

158
00:04:59,350 --> 00:05:00,160
0,330 330,390 390,600 600,750 750,810
that's a whole set of

159
00:05:00,160 --> 00:05:02,140
0,180 180,780 900,1260 1260,1620 1620,1980
other tools, um that we're

160
00:05:02,170 --> 00:05:03,420
0,450 450,840
not using.

161
00:05:03,770 --> 00:05:05,480
0,570 570,900 900,1230 1230,1470 1470,1710
Um, and it's not that

162
00:05:06,260 --> 00:05:07,460
0,510 510,720 720,990 990,1050 1050,1200
recruits but there's a little

163
00:05:07,460 --> 00:05:08,210
0,150 150,210 210,330 330,510 510,750
bit of a big step

164
00:05:08,210 --> 00:05:09,170
0,120 120,480 480,570 570,810 810,960
to actually, um get that

165
00:05:09,170 --> 00:05:10,160
0,210 210,360 360,570 570,870 870,990
all up and going and

166
00:05:10,160 --> 00:05:11,060
0,330
running.

167
00:05:11,270 --> 00:05:12,830
0,330 330,480 480,690 690,780 780,1560
Um, so that's the other

168
00:05:12,830 --> 00:05:13,940
0,390 390,480 480,690 690,900 900,1110
mechanism that people use race

169
00:05:13,940 --> 00:05:15,000
0,540
detectors.

170
00:05:16,960 --> 00:05:18,700
0,450 450,810 810,1230 1230,1500 1500,1740
Basically flag, any any shared

171
00:05:18,700 --> 00:05:20,650
0,450 450,690 690,1110 1170,1770 1770,1950
variable that is updated or

172
00:05:20,650 --> 00:05:21,850
0,270 270,600 600,810 810,1110 1110,1200
read without actually holding a

173
00:05:21,850 --> 00:05:22,800
0,420
lock.

174
00:05:24,460 --> 00:05:25,930
0,210 210,540 540,750 750,930 930,1470
That doesn't help with deadlocks,

175
00:05:25,930 --> 00:05:27,280
0,150 150,660 660,720 720,900 900,1350
for example in this lab

176
00:05:27,310 --> 00:05:28,930
0,330 330,960 990,1110 1110,1350 1350,1620
in a bi catch lock,

177
00:05:28,930 --> 00:05:30,970
0,120 120,810 990,1230 1230,1380 1380,2040
you and you get deadlocks

178
00:05:31,060 --> 00:05:32,110
0,540 540,570 570,750 750,840 840,1050
deadlocks are tend to be

179
00:05:32,110 --> 00:05:33,280
0,450 450,570 570,690 690,900 900,1170
easier to do Bob correct

180
00:05:33,280 --> 00:05:35,050
0,240 240,390 390,510 510,510 1530,1770
because you can um get

181
00:05:35,050 --> 00:05:35,890
0,60 60,510 510,600 600,720 720,840
the panic and then you

182
00:05:35,890 --> 00:05:37,330
0,90 90,300 300,540 540,780 780,1440
can look at the GDP

183
00:05:37,330 --> 00:05:38,200
0,90 90,270 270,510 510,780 780,870
in the back trace and

184
00:05:38,200 --> 00:05:39,730
0,300 300,540 540,960 960,1410 1410,1530
see actually was involved in

185
00:05:39,730 --> 00:05:41,140
0,360 390,990
the deadlock.

186
00:05:44,620 --> 00:05:45,940
0,150 150,240 240,360 360,750
Does that make sense.

187
00:05:46,810 --> 00:05:48,540
0,780 780,1020
Thank you.

188
00:05:50,050 --> 00:05:52,450
0,480 510,1050 1440,1740 1740,2160 2160,2400
Okay, um, another suggestion, actually

189
00:05:52,450 --> 00:05:53,680
0,510 510,720 720,1050 1050,1170 1170,1230
somebody a posted on the

190
00:05:53,680 --> 00:05:55,540
0,750 750,900 900,1620 1620,1740 1740,1860
feedback, a is you know

191
00:05:56,050 --> 00:05:57,460
0,450 450,750 780,1050 1050,1170 1170,1410
classes are ten is getting

192
00:05:57,460 --> 00:05:58,480
0,90 90,240 240,390 390,870 870,1020
a little bit lower than

193
00:05:58,480 --> 00:05:59,050
0,90 90,150 150,420 420,510 510,570
in the beginning of the

194
00:05:59,050 --> 00:05:59,950
0,450 450,570 570,630 630,780 780,900
semester, and I think we

195
00:05:59,950 --> 00:06:01,210
0,210 210,270 270,570 570,840 840,1260
might be small enough for

196
00:06:01,840 --> 00:06:02,560
0,90 90,390 390,510 510,570 570,720
the size that it may

197
00:06:02,560 --> 00:06:04,210
0,300 540,1140 1140,1350 1350,1440 1440,1650
be perfectly fine to actually

198
00:06:04,210 --> 00:06:05,540
0,120 120,570 570,870
have cameras on.

199
00:06:05,630 --> 00:06:07,130
0,630 630,930 930,1140 1140,1440 1440,1500
Um, and so maybe I

200
00:06:07,130 --> 00:06:08,210
0,180 180,240 240,570 570,750 750,1080
want to encourage you to

201
00:06:08,210 --> 00:06:09,140
0,150 150,270 270,480 480,540 540,930
if you ask a question

202
00:06:09,140 --> 00:06:10,700
0,150 150,330 330,480 480,570 570,1560
to turn on your camera,

203
00:06:11,210 --> 00:06:12,980
0,540 540,690 690,870 900,1230 1230,1770
um, you know will hopefully

204
00:06:12,980 --> 00:06:15,260
0,930 960,1080 1080,1290 1290,1860 1860,2280
improve in our experiences, if

205
00:06:15,260 --> 00:06:16,280
0,180 180,330 330,420 420,900 900,1020
you've seen the classroom as

206
00:06:16,280 --> 00:06:17,330
0,330 330,480 480,600 600,690 690,1050
opposed to in a virtual

207
00:06:17,330 --> 00:06:18,160
0,300
meeting.

208
00:06:18,980 --> 00:06:20,840
0,570 930,1560 1560,1710 1710,1800 1800,1860
And you don't have to

209
00:06:20,840 --> 00:06:22,720
0,150 150,240 240,540
look at me.

210
00:06:22,720 --> 00:06:23,740
0,510
Okay.

211
00:06:24,040 --> 00:06:27,250
0,660 1230,1860 1920,2670 2670,2910 2910,3210
Um, so, um, okay, today's

212
00:06:27,250 --> 00:06:29,050
0,510 600,1020 1020,1170 1170,1470 1470,1800
lecture, um, so today's lecture

213
00:06:29,050 --> 00:06:29,650
0,90 90,210 210,270 270,390 390,600
is going to be about

214
00:06:29,650 --> 00:06:31,720
0,270 270,870 990,1530 1530,1740 1740,2070
crash safety and crash safety

215
00:06:31,720 --> 00:06:33,370
0,270 270,840 1080,1380 1380,1530 1530,1650
file systems, and this is

216
00:06:33,370 --> 00:06:34,690
0,240 240,420 420,810 810,1200 1200,1320
not cross safety in its

217
00:06:34,690 --> 00:06:36,010
0,240 240,570 570,900 900,1050 1050,1320
most general form, I'm actually

218
00:06:36,010 --> 00:06:37,510
0,210 210,510 510,930 930,1080 1080,1500
I'm really focusing on a

219
00:06:37,540 --> 00:06:39,040
0,480 480,990
particular problem.

220
00:06:41,980 --> 00:06:44,080
0,330 330,390 390,900 900,1470 1500,2100
Or a specific problem, namely

221
00:06:44,080 --> 00:06:46,750
0,540 540,1260 1290,1560 1560,1890 1890,2670
a crash or power failure

222
00:06:47,050 --> 00:06:48,820
0,660 660,1260
can meet.

223
00:06:52,610 --> 00:06:54,660
0,270 270,450 450,810 810,1290
On this cloud system.

224
00:06:57,060 --> 00:06:58,230
0,150 150,390 390,480 480,600 600,1170
To be in an inconsistent

225
00:06:58,230 --> 00:07:00,360
0,450 840,1110 1110,1170 1170,1710 1710,2130
state for an incorrect state.

226
00:07:04,080 --> 00:07:04,830
0,120 120,240 240,270 270,600 600,750
And what I mean, with

227
00:07:04,830 --> 00:07:05,970
0,60 60,420 420,690 690,1020 1020,1140
an incorrect state is known

228
00:07:05,970 --> 00:07:07,560
0,60 60,630 630,990 990,1230 1230,1590
for example a data block

229
00:07:07,560 --> 00:07:09,630
0,360 360,570 570,1200 1230,1770 1800,2070
belongs to files, or I

230
00:07:09,630 --> 00:07:12,330
0,630 930,1620 1620,2100 2100,2580 2580,2700
note a is allocated to

231
00:07:12,330 --> 00:07:13,920
0,630 630,1170
different files.

232
00:07:14,140 --> 00:07:16,090
0,510 720,1110 1110,1200 1200,1320 1320,1950
Um, and so the scenario

233
00:07:16,090 --> 00:07:17,560
0,540 540,720 720,1080 1080,1320 1320,1470
where this problem might sort

234
00:07:17,560 --> 00:07:19,330
0,180 180,960 1020,1380 1380,1530 1530,1770
of appear is let's say

235
00:07:19,330 --> 00:07:21,340
0,90 90,210 210,360 360,990 1500,2010
you know your running mate.

236
00:07:21,900 --> 00:07:24,000
0,420 420,1050 1080,1320 1320,1590 1590,2100
Um makes pretty file system

237
00:07:24,000 --> 00:07:25,530
0,480 480,600 600,660 660,930 930,1530
interact with the file system

238
00:07:25,740 --> 00:07:28,080
0,300 300,540 540,1230 1440,1830 1830,2340
reaching writes files and somewhere

239
00:07:28,080 --> 00:07:29,820
0,840 840,1050 1050,1200 1200,1440 1440,1740
doing you know that thing

240
00:07:29,820 --> 00:07:31,740
0,150 150,300 300,870 870,1500
up a powerfully happens.

241
00:07:33,920 --> 00:07:34,670
0,120 120,210 210,360 360,600 600,750
You know if maybe your

242
00:07:34,670 --> 00:07:36,110
0,360 360,570 570,720 720,780 780,1440
laptop run out of battery,

243
00:07:36,290 --> 00:07:37,430
0,150 150,270 270,720 720,810 810,1140
you know maybe the power

244
00:07:37,430 --> 00:07:39,830
0,150 150,690 1140,1590 1590,2130 2160,2400
just dropped oars a your

245
00:07:39,830 --> 00:07:43,070
0,540 540,1230 1230,1770 2100,2820 2850,3240
house, um, and, um, you

246
00:07:43,070 --> 00:07:44,460
0,120 120,300 300,930
know you reboot.

247
00:07:45,460 --> 00:07:47,230
0,450 750,1170 1170,1320 1320,1590 1590,1770
The power comes back on

248
00:07:47,230 --> 00:07:48,850
0,120 120,270 270,750 1140,1320 1320,1620
at some point you reboot

249
00:07:48,850 --> 00:07:50,740
0,60 60,750 1110,1530 1530,1680 1680,1890
the machine or she comes

250
00:07:50,740 --> 00:07:53,530
0,240 240,600 630,1290 1530,2220 2250,2790
back up and then you

251
00:07:53,530 --> 00:07:54,400
0,150 150,210 210,510 510,750 750,870
get a prompt again, you

252
00:07:54,400 --> 00:07:56,380
0,210 210,840 1350,1680 1680,1770 1770,1980
run ls and you hope

253
00:07:56,380 --> 00:07:57,550
0,330 330,510 510,630 630,900 900,1170
basically that your file system

254
00:07:57,550 --> 00:07:58,450
0,120 120,240 240,270 270,450 450,900
is in a good state.

255
00:07:59,200 --> 00:08:00,310
0,360 360,420 420,510 510,870 870,1110
A in the state actually

256
00:08:00,310 --> 00:08:01,700
0,120 120,390 390,600 600,810
can still use it.

257
00:08:01,880 --> 00:08:03,590
0,150 150,240 240,330 330,1110 1140,1710
And so the particular failures

258
00:08:03,590 --> 00:08:04,640
0,60 60,480 480,600 600,690 690,1050
or crashes that we're concerned

259
00:08:04,640 --> 00:08:06,620
0,420 420,780 810,1230 1230,1590 1590,1980
about are basically power failures

260
00:08:06,620 --> 00:08:09,380
0,300 300,570 570,840 840,1680 1890,2760
during file system operations or

261
00:08:09,440 --> 00:08:11,960
0,180 180,1050 1200,2160 2190,2340 2340,2520
the kernel panics you know

262
00:08:11,960 --> 00:08:13,430
0,630 630,870 870,990 990,1230 1230,1470
while running some file system

263
00:08:13,430 --> 00:08:15,470
0,570 780,1050 1050,1260 1260,1830 1830,2040
operation, actually six Hispanics, most

264
00:08:15,470 --> 00:08:16,460
0,270 270,360 360,780 780,870 870,990
kernels or picnics, you know

265
00:08:16,460 --> 00:08:18,320
0,270 270,450 450,1020 1110,1530 1530,1860
maybe they're shown kernel bug

266
00:08:18,320 --> 00:08:19,790
0,150 150,510 510,570 570,1080 1260,1470
that causes a panic and

267
00:08:19,790 --> 00:08:20,990
0,90 90,510 510,630 630,1050 1050,1200
if suddenly your system, your

268
00:08:20,990 --> 00:08:21,920
0,570
scales.

269
00:08:22,350 --> 00:08:23,040
0,180 180,390 390,480 480,630 630,690
And what you'd like to

270
00:08:23,040 --> 00:08:23,910
0,90 90,150 150,480 480,630 630,870
be the case that after

271
00:08:23,910 --> 00:08:25,050
0,540 540,690 690,780 780,1020 1020,1140
rebooting you can actually do

272
00:08:25,050 --> 00:08:26,040
0,420
something.

273
00:08:26,430 --> 00:08:27,210
0,240 240,360 360,450 450,540 540,780
Um, or you can still

274
00:08:27,210 --> 00:08:28,800
0,210 210,270 270,480 480,870 1380,1590
use the file system and

275
00:08:28,800 --> 00:08:29,790
0,180 180,390 390,510 510,810 810,990
this might be something where

276
00:08:29,790 --> 00:08:30,930
0,150 150,420 420,780 810,990 990,1140
you're thinking well, how could

277
00:08:30,930 --> 00:08:32,220
0,150 150,390 390,720 780,1020 1020,1290
that not be right, because

278
00:08:32,220 --> 00:08:34,260
0,60 60,330 330,840 1290,1890 1890,2040
the file system stored on

279
00:08:34,260 --> 00:08:35,910
0,60 60,450 450,840 840,1470 1470,1650
a persistent storage, medium and

280
00:08:35,910 --> 00:08:37,470
0,450 450,630 630,720 720,1050 1050,1560
so if the power fails

281
00:08:37,470 --> 00:08:39,180
0,90 90,270 270,600 990,1530 1530,1710
you know that medium should

282
00:08:39,180 --> 00:08:40,170
0,90 90,390 390,600 600,720 720,990
be good then so one

283
00:08:40,170 --> 00:08:41,160
0,240 240,420 420,660 660,930 930,990
machine comes back up, you

284
00:08:41,160 --> 00:08:42,000
0,150 150,300 300,420 420,720 720,840
know all the blocks that

285
00:08:42,000 --> 00:08:43,050
0,180 180,420 420,630 630,720 720,1050
you've written should be there.

286
00:08:43,730 --> 00:08:44,810
0,360 360,600 600,840 840,990 990,1080
And we'll see that the

287
00:08:44,810 --> 00:08:46,580
0,270 270,810 810,1140 1140,1440 1440,1770
tricky cases that many file

288
00:08:46,580 --> 00:08:49,550
0,240 240,810 810,1350 1800,2370 2460,2970
system operations have a multi

289
00:08:49,550 --> 00:08:51,240
0,390 390,1230
step operations.

290
00:08:51,240 --> 00:08:53,730
0,630 660,1290 1290,1560 1560,1800 1830,2490
And really what is important

291
00:08:53,730 --> 00:08:54,900
0,90 90,570 570,690 690,810 810,1170
to note and if we

292
00:08:55,050 --> 00:08:56,460
0,150 150,270 270,840 840,1290 1290,1410
if we crash just in

293
00:08:56,460 --> 00:08:58,200
0,90 90,630 780,1380 1380,1530 1530,1740
the wrong place in these

294
00:08:58,200 --> 00:09:00,060
0,240 240,510 510,1290 1380,1590 1590,1860
multi step operations, the file

295
00:09:00,060 --> 00:09:01,320
0,240 240,450 450,840 840,1050 1050,1260
system actually may end up

296
00:09:01,320 --> 00:09:03,030
0,270 270,450 450,720 720,1530 1560,1710
being an this inconsistent for

297
00:09:03,030 --> 00:09:04,530
0,390 390,690 690,990 990,1050 1050,1500
that short period of time

298
00:09:04,650 --> 00:09:05,550
0,150 150,240 240,330 330,630 630,900
and if the power fell

299
00:09:05,550 --> 00:09:07,050
0,420 420,720 720,1170 1350,1440 1440,1500
just happened there you know

300
00:09:07,050 --> 00:09:08,500
0,270 270,510 510,630 630,930
something bad could happen.

301
00:09:08,740 --> 00:09:09,580
0,150 150,300 300,600 600,690 690,840
And so that is sort

302
00:09:09,580 --> 00:09:11,410
0,90 90,240 240,750 750,1020 1020,1830
of the problem that we're

303
00:09:11,650 --> 00:09:14,320
0,930 930,1350 1380,1800 2220,2430 2430,2670
focusing on today and so

304
00:09:14,350 --> 00:09:15,310
0,180 180,330 330,720 720,870 870,960
this is different from the

305
00:09:15,310 --> 00:09:16,780
0,420 420,630 630,690 690,1020 1020,1470
problem that for example whatever

306
00:09:16,780 --> 00:09:17,650
0,90 90,300 300,540 540,600 600,870
you know there's a power

307
00:09:17,650 --> 00:09:19,450
0,450 450,690 690,930 930,1500 1500,1800
failure and your disc caught

308
00:09:19,450 --> 00:09:21,370
0,480 480,720 720,1170 1440,1710 1710,1920
fire and so there's nothing

309
00:09:21,370 --> 00:09:22,810
0,240 240,690 720,1050 1050,1260 1260,1440
there anymore and you need

310
00:09:22,810 --> 00:09:24,310
0,360 570,690 690,840 840,1200 1200,1500
to in that case, you

311
00:09:24,310 --> 00:09:25,900
0,360 870,1050 1050,1350 1350,1530 1530,1590
need you need there's a

312
00:09:25,900 --> 00:09:27,130
0,360 360,600 600,960 960,1080 1080,1230
completely different problem that has

313
00:09:27,130 --> 00:09:28,270
0,270 270,900 900,960 960,1080 1080,1140
different solutions, you know, for

314
00:09:28,270 --> 00:09:29,560
0,480 480,630 630,780 780,1050 1080,1290
example you have to go

315
00:09:29,560 --> 00:09:30,960
0,270 270,360 360,420 420,990
back to a backup.

316
00:09:30,960 --> 00:09:32,550
0,390 390,510 510,780 780,1200 1200,1590
Up your file system, we

317
00:09:32,550 --> 00:09:33,990
0,360 360,450 450,750 750,1080 1080,1440
install your file system, etc

318
00:09:33,990 --> 00:09:35,970
0,480 1320,1470 1470,1680 1680,1740 1740,1980
etc, so that's the problem,

319
00:09:35,970 --> 00:09:37,140
0,120 120,420 420,660 660,1050 1050,1170
we're not worried about we're

320
00:09:37,140 --> 00:09:38,610
0,270 270,600 600,900 900,1020 1020,1470
really worried about the specific

321
00:09:38,610 --> 00:09:41,640
0,420 420,780 1110,1890 1890,2550 2550,3030
problem of failure happening right

322
00:09:41,670 --> 00:09:44,160
0,810 810,1410 1410,1710 1710,1980 1980,2490
during a multi step operation.

323
00:09:46,380 --> 00:09:48,040
0,270 270,360 360,450 450,1080
Okay in the solution.

324
00:09:48,160 --> 00:09:49,270
0,180 180,360 360,720 720,1020 1020,1110
For that specific problem that

325
00:09:49,270 --> 00:09:50,380
0,90 90,210 210,270 270,360 360,1110
we're going to be exploring

326
00:09:50,830 --> 00:09:52,150
0,240 240,420 420,720 720,900 900,1320
a is something that is

327
00:09:52,150 --> 00:09:53,800
0,360 360,900 1110,1380 1380,1530 1530,1650
called logging, and this is

328
00:09:53,800 --> 00:09:56,950
0,60 60,420 420,1170 1350,1860 2430,3150
a very popular a solution,

329
00:09:56,950 --> 00:09:59,500
0,540 630,1380 1380,2040
um, recently, um.

330
00:09:59,530 --> 00:10:00,520
0,330 330,420 420,510 510,570 570,990
Coming out of the database

331
00:10:00,520 --> 00:10:01,780
0,450 450,840 840,990 990,1170 1170,1260
world, but a lot of

332
00:10:01,780 --> 00:10:03,610
0,270 270,750 750,990 990,1290 1290,1830
file systems that use logging

333
00:10:03,820 --> 00:10:05,100
0,240 240,780
these days.

334
00:10:05,100 --> 00:10:07,350
0,450 780,1080 1080,1590 1620,1770 1770,2250
Um, we're gonna it's very

335
00:10:07,350 --> 00:10:08,580
0,390 390,630 630,750 750,1140 1140,1230
one reason it's popular is

336
00:10:08,580 --> 00:10:09,960
0,480 480,570 570,630 630,870 870,1380
because it's a very principled

337
00:10:09,960 --> 00:10:12,660
0,480 690,2250 2250,2460 2460,2580 2580,2700
solution a and we're going

338
00:10:12,660 --> 00:10:14,460
0,330 360,660 660,780 780,1560 1560,1800
to see the institution of

339
00:10:14,490 --> 00:10:16,920
0,690 750,1140 1140,1950 2160,2370 2370,2430
logging in x86 and of

340
00:10:16,920 --> 00:10:17,760
0,210 210,450 450,630 630,780 780,840
course X six has a

341
00:10:17,760 --> 00:10:19,500
0,510 510,840 840,1470 1470,1560 1560,1740
very simple implementation of a

342
00:10:19,500 --> 00:10:21,930
0,480 480,1080 1170,1740 1740,2340 2340,2430
bare minimal a implementation of

343
00:10:21,930 --> 00:10:23,850
0,480 540,960 960,1050 1050,1740 1740,1920
logging just to demonstrate in

344
00:10:23,850 --> 00:10:25,180
0,90 90,330 330,990
the key ideas.

345
00:10:25,270 --> 00:10:27,160
0,510 690,990 990,1200 1200,1500 1500,1890
Um, and even that true

346
00:10:27,430 --> 00:10:29,380
0,420 420,720 720,1020 1020,1680 1680,1950
a very bare bone wog

347
00:10:29,380 --> 00:10:30,970
0,420 420,690 690,1020 1020,1290 1290,1590
invitation actually has several issues

348
00:10:30,970 --> 00:10:31,960
0,120 120,240 240,360 360,420 420,990
that were going to be

349
00:10:32,020 --> 00:10:33,550
0,360 360,720 780,1050 1050,1350 1350,1530
talking about and that's why

350
00:10:33,550 --> 00:10:34,570
0,150 150,570 570,630 630,750 750,1020
it's worth they were studying

351
00:10:34,570 --> 00:10:35,320
0,180
it.

352
00:10:35,410 --> 00:10:37,780
0,450 510,1320 1350,1950 1950,2190 2190,2370
Um, one downside as we'll

353
00:10:37,780 --> 00:10:38,710
0,210 210,330 330,480 480,720 720,930
see if the xc six

354
00:10:38,710 --> 00:10:40,180
0,360 360,510 510,720 720,810 810,1470
solution is because of simplicity,

355
00:10:40,180 --> 00:10:41,650
0,120 120,780 810,990 990,1260 1260,1470
its performance is also not

356
00:10:41,650 --> 00:10:42,780
0,150 150,540
so great.

357
00:10:42,900 --> 00:10:44,280
0,300 300,540 540,870 870,1260 1260,1380
Even though locking systems in

358
00:10:44,280 --> 00:10:45,270
0,450 450,600 600,780 780,810 810,990
principle can get a good

359
00:10:45,270 --> 00:10:46,920
0,630 900,1260 1260,1350 1350,1530 1530,1650
performance, and so what, we'll

360
00:10:46,920 --> 00:10:49,470
0,600 810,1620 1620,1980 2010,2190 2190,2550
do next week is actually

361
00:10:49,470 --> 00:10:51,570
0,450 480,1140 1170,1620 1620,1740 1740,2100
look how, how to implement

362
00:10:51,570 --> 00:10:53,400
0,60 60,240 240,930 930,1320 1320,1830
a high performance walking system

363
00:10:53,490 --> 00:10:55,680
0,390 390,1050 1050,1350 1350,1740 1740,2190
by studying the logging system,

364
00:10:55,680 --> 00:10:57,870
0,450 480,1260 1260,1680 1680,1950 1950,2190
the Linux HD free file

365
00:10:57,870 --> 00:10:59,080
0,300 300,810
system uses.

366
00:10:59,420 --> 00:11:00,920
0,480 510,750 750,930 930,1200 1200,1500
Um, but that's next week.

367
00:11:01,860 --> 00:11:04,050
0,420 570,1200 1290,1590 1590,1770 1770,2190
Um, another may be small

368
00:11:04,050 --> 00:11:05,910
0,600 630,930 930,1380 1380,1530 1530,1860
a point to make today

369
00:11:05,910 --> 00:11:07,440
0,300 300,630 630,750 750,930 930,1530
is this is our last

370
00:11:07,470 --> 00:11:09,630
0,330 330,540 540,990 1380,1830 1830,2160
xc six lecture a and

371
00:11:09,630 --> 00:11:10,740
0,210 210,510 510,840 840,990 990,1110
from now on, we're going

372
00:11:10,740 --> 00:11:13,770
0,60 60,180 180,780 780,1380 1680,3030
to be switching to papers

373
00:11:13,950 --> 00:11:15,480
0,570 570,660 660,870 870,1200 1200,1530
because in some ways what

374
00:11:15,480 --> 00:11:17,040
0,180 180,480 480,600 600,1050 1050,1560
we've done is we've covered

375
00:11:17,040 --> 00:11:18,480
0,90 90,210 210,330 330,810 810,1440
you know the basic concepts

376
00:11:18,630 --> 00:11:19,680
0,330 330,450 450,540 540,780 780,1050
and we can start looking

377
00:11:19,680 --> 00:11:21,990
0,150 150,390 390,1020 1110,1800 1800,2310
at more events a operating

378
00:11:21,990 --> 00:11:24,030
0,300 300,630 630,810 810,1290 1320,2040
system IDs by reading papers.

379
00:11:24,830 --> 00:11:26,040
0,240 240,720
Oh, okay.

380
00:11:27,130 --> 00:11:28,880
0,240 240,540 540,660 660,1080
Any questions so far.

381
00:11:34,590 --> 00:11:35,840
0,270 270,690
Well good.

382
00:11:38,080 --> 00:11:40,240
0,540 660,1200 1350,1530 1530,1650 1650,2160
Okay, um, so let me

383
00:11:40,690 --> 00:11:41,560
0,210 210,450 450,510 510,690 690,870
go back a little bit

384
00:11:41,560 --> 00:11:42,820
0,450 450,510 510,960 960,1110 1110,1260
about the scenarios that were

385
00:11:42,820 --> 00:11:44,560
0,480 600,960 960,1170 1170,1350 1350,1740
really a that we're focusing

386
00:11:44,560 --> 00:11:46,600
0,330 330,780 780,1320 1500,1860 1860,2040
about um in in this

387
00:11:46,600 --> 00:11:50,200
0,390 870,1500 1680,2400 2400,3180 3270,3600
lecture, so file systems file

388
00:11:50,200 --> 00:11:51,900
0,240 240,990
system operations.

389
00:11:52,380 --> 00:11:54,390
0,240 240,600 600,720 720,1410 1620,2010
Like creating a file writing

390
00:11:54,390 --> 00:11:57,000
0,90 90,690 720,1410 1440,1920 1920,2610
a file are multi step

391
00:11:57,030 --> 00:11:58,780
0,330 330,1140
disk operations.

392
00:12:06,400 --> 00:12:08,560
0,600 1050,1500 1500,1830 1830,1980 1980,2160
Um, and we saw that

393
00:12:08,560 --> 00:12:10,120
0,330 330,690 720,990 990,1380 1380,1560
last week on monday, we

394
00:12:10,120 --> 00:12:11,770
0,240 240,450 450,660 660,1140 1140,1650
talked about how creators implemented

395
00:12:11,770 --> 00:12:12,910
0,150 150,420 420,510 510,990 990,1140
like creating a file, we're

396
00:12:12,910 --> 00:12:13,810
0,210 210,300 300,390 390,780 780,900
writing to a file, we

397
00:12:13,810 --> 00:12:14,830
0,300 300,600 600,780 780,900 900,1020
often see that you know

398
00:12:14,830 --> 00:12:16,360
0,210 450,840 840,960 960,1350 1350,1530
the sequence of events or

399
00:12:16,360 --> 00:12:17,740
0,450 450,570 570,930 930,1020 1020,1380
something, the sequence of steps

400
00:12:17,740 --> 00:12:19,900
0,450 570,1290 1290,1560 1560,1890 1890,2160
are allocated an odour Mark,

401
00:12:19,900 --> 00:12:20,950
0,120 120,270 270,480 480,960 960,1050
the I node allocated on

402
00:12:20,950 --> 00:12:22,780
0,420 510,1260 1290,1410 1410,1590 1590,1830
this, then you know write

403
00:12:22,780 --> 00:12:24,100
0,90 90,540 540,870 870,990 990,1320
the directory block that contains

404
00:12:24,100 --> 00:12:25,000
0,180 180,270 270,600 630,780 780,900
that I note and so

405
00:12:25,000 --> 00:12:26,020
0,210 210,300 300,480 480,750 750,1020
those are the melting steps

406
00:12:26,020 --> 00:12:27,420
0,120 120,180 180,540 540,960
that I'm talking about.

407
00:12:27,540 --> 00:12:28,650
0,210 210,300 300,480 480,510 510,1110
If we get a crash

408
00:12:28,950 --> 00:12:30,960
0,1050 1050,1200 1200,1290 1290,1440 1440,2010
between two of the steps

409
00:12:31,080 --> 00:12:33,300
0,300 300,1170 1170,1500 1500,1680 1680,2220
that zat crash can leave.

410
00:12:34,870 --> 00:12:37,160
0,1170 1200,1680
Maybe yeah.

411
00:12:37,160 --> 00:12:38,330
0,210 210,390 390,480 480,780 780,1170
May move the file system

412
00:12:38,330 --> 00:12:39,740
0,840
invariance.

413
00:12:40,970 --> 00:12:42,460
0,750
Violated.

414
00:12:45,440 --> 00:12:48,080
0,510 1110,1830 1830,2130 2160,2550 2550,2640
And violent, the variance I'm

415
00:12:48,080 --> 00:12:49,490
0,360 360,690 690,930 930,1320 1320,1410
talking about our invariance of

416
00:12:49,490 --> 00:12:51,410
0,90 90,660 900,990 990,1110 1110,1920
the form, you know every

417
00:12:51,590 --> 00:12:53,690
0,720 720,960 960,1230 1230,1860 1890,2100
block is either free or

418
00:12:53,690 --> 00:12:55,790
0,450 450,510 510,810 810,1380 1830,2100
allocated to one file and

419
00:12:55,790 --> 00:12:57,420
0,240 240,330 330,510 510,1110
not to two files.

420
00:12:57,420 --> 00:12:58,830
0,270 270,720 720,870 870,1020 1020,1410
Um, and you know we

421
00:12:58,830 --> 00:12:59,790
0,180 180,240 240,390 390,780 780,960
want to make sure that

422
00:12:59,790 --> 00:13:01,260
0,150 150,600 600,1230 1230,1320 1320,1470
this happens despite you know

423
00:13:01,260 --> 00:13:04,200
0,270 270,1020 1050,1650 1650,2310 2550,2940
these failures right between these

424
00:13:04,200 --> 00:13:05,860
0,1110
operations.

425
00:13:06,880 --> 00:13:08,060
0,660
Yeah.

426
00:13:08,060 --> 00:13:09,470
0,270 270,480 480,780 780,1080 1080,1410
And the risk is if

427
00:13:09,980 --> 00:13:13,280
0,150 150,2010 2040,2460 2460,2550 2550,3300
if zis variants are violated

428
00:13:13,790 --> 00:13:15,440
0,540 600,1050 1050,1260 1260,1380 1380,1650
that bad things can happen

429
00:13:15,440 --> 00:13:16,900
0,240 240,780
after reboot.

430
00:13:17,510 --> 00:13:19,490
0,660 870,960 960,1080 1080,1470 1830,1980
Um, you know the you

431
00:13:19,490 --> 00:13:21,560
0,180 180,420 420,750 750,1470
might crash again immediately.

432
00:13:21,930 --> 00:13:22,800
0,330 330,420 420,540 540,690 690,870
Because you know there's some

433
00:13:22,800 --> 00:13:24,180
0,210 210,660 660,750 750,1110 1110,1380
data structure, the files you

434
00:13:24,180 --> 00:13:25,530
0,570 570,720 720,840 840,1200 1200,1350
now in a state that

435
00:13:25,530 --> 00:13:26,670
0,60 60,420 420,720 720,930 930,1140
the files Mexico can't really

436
00:13:26,670 --> 00:13:28,350
0,300 300,870 870,1140 1140,1440 1440,1680
deal with on this data

437
00:13:28,350 --> 00:13:29,640
0,570 570,660 660,930 930,990 990,1290
structures in such a state

438
00:13:29,760 --> 00:13:30,990
0,570 570,690 690,780 780,990 990,1230
shape that the file system

439
00:13:30,990 --> 00:13:32,910
0,240 240,570 600,1260 1260,1410 1410,1920
really can't process them anymore,

440
00:13:33,240 --> 00:13:35,520
0,690 1140,1470 1470,1950 1950,2100 2100,2280
or more likely youre not

441
00:13:35,520 --> 00:13:36,620
0,720
crash.

442
00:13:36,890 --> 00:13:39,140
0,210 210,840 900,1200 1200,1680 1980,2250
No crash, um, but you

443
00:13:39,140 --> 00:13:40,460
0,90 90,450 450,600 600,780 780,1320
know data may get lost.

444
00:13:41,340 --> 00:13:42,630
0,300 300,450 450,600 600,690 690,1290
Or you read or write

445
00:13:43,020 --> 00:13:44,560
0,510 510,900
incorrect data.

446
00:13:52,630 --> 00:13:53,680
0,450 450,660 660,870 870,1020 1020,1050
Um, and we'll see a

447
00:13:53,680 --> 00:13:54,790
0,210 210,270 270,870 870,960 960,1110
couple of examples, you know

448
00:13:54,790 --> 00:13:56,050
0,210 210,510 510,630 630,780 780,1260
to make it more clear,

449
00:13:56,140 --> 00:13:57,190
0,300 300,450 450,570 570,900 900,1050
um, but so these are

450
00:13:57,190 --> 00:13:58,840
0,330 330,900 900,1140 1140,1380 1380,1650
the risks that we're worried

451
00:13:58,840 --> 00:13:59,900
0,420
about.

452
00:14:00,350 --> 00:14:01,320
0,450
I'm.

453
00:14:02,020 --> 00:14:02,860
0,90 90,210 210,330 330,420 420,840
I don't know if anybody

454
00:14:02,860 --> 00:14:04,870
0,390 390,750 750,1110 1110,1590 1620,2010
actually every personal life or

455
00:14:04,930 --> 00:14:07,180
0,390 390,840 840,1290 1290,1770 1800,2250
in your daily life using

456
00:14:07,180 --> 00:14:08,560
0,420 420,630 630,780 780,1320 1320,1380
computers actually has experienced a

457
00:14:08,560 --> 00:14:10,930
0,360 360,570 570,1110 1470,1950 2190,2370
problem where basically, um, you

458
00:14:10,930 --> 00:14:12,760
0,240 240,570 570,1320 1560,1740 1740,1830
had a failure in the

459
00:14:12,760 --> 00:14:14,020
0,270 270,600 600,870 900,1140 1140,1260
file system where you had

460
00:14:14,020 --> 00:14:14,920
0,60 60,420 420,540 540,570 570,900
a failure had a power

461
00:14:14,920 --> 00:14:16,690
0,750 750,840 840,1170 1170,1650 1650,1770
failure you machine rebooted or

462
00:14:16,690 --> 00:14:19,900
0,120 120,600 600,1290 1500,2370 2370,3210
your phone restarted and a

463
00:14:19,930 --> 00:14:23,800
0,630 720,1350 1350,2040 2640,3180
basically unusable afterwards, um.

464
00:14:23,980 --> 00:14:24,910
0,300 300,540 540,660 660,840 840,930
One reason that might be

465
00:14:24,910 --> 00:14:26,440
0,540 540,1020 1020,1200 1200,1290 1290,1530
unusual because actually the file

466
00:14:26,440 --> 00:14:28,000
0,300 300,450 450,690 690,1080 1080,1560
system just didn't recover correctly.

467
00:14:37,370 --> 00:14:38,570
0,360 390,750 780,900 900,1050 1050,1200
Okay, so to make it

468
00:14:38,570 --> 00:14:40,100
0,270 270,660 660,900 900,1170 1170,1530
more clear, let's just let's

469
00:14:40,100 --> 00:14:41,390
0,150 150,210 210,270 270,990 990,1290
look at an example in

470
00:14:41,390 --> 00:14:42,650
0,90 90,510 510,600 600,1110 1110,1260
the context of xc I

471
00:14:43,400 --> 00:14:44,600
0,330 330,420 420,600 600,840 840,1200
like to make this risk

472
00:14:44,600 --> 00:14:45,560
0,90 90,240 240,360 360,480 480,960
a little bit more concrete

473
00:14:45,740 --> 00:14:46,970
0,270 270,420 420,480 480,540 540,1230
let's look at an example

474
00:14:47,000 --> 00:14:48,050
0,180 180,240 240,660 660,750 750,1050
in the context of xt

475
00:14:48,050 --> 00:14:49,520
0,510 720,1020 1020,1140 1140,1290 1290,1470
six and to see what

476
00:14:49,520 --> 00:14:51,110
0,240 240,870 870,1020 1020,1200 1200,1590
actually go could go wrong.

477
00:14:52,020 --> 00:14:55,500
0,450 570,1350 1500,2190 2460,3000 3030,3480
So remember the for monday

478
00:14:55,500 --> 00:14:57,900
0,900 1200,1680 1680,1920 1920,2190 2190,2400
the exe file system, very

479
00:14:57,900 --> 00:14:59,040
0,240 240,510 510,840 840,1080 1080,1140
simple file system has a

480
00:14:59,040 --> 00:15:01,170
0,270 270,720 720,1080 1470,2010 2010,2130
simple display out, um, you

481
00:15:01,170 --> 00:15:04,170
0,120 150,510 510,1050 1470,2250 2730,3000
know super block a super

482
00:15:04,170 --> 00:15:05,250
0,270 270,480 480,570 570,960 960,1080
blog there's the log that

483
00:15:05,250 --> 00:15:05,910
0,90 90,210 210,300 300,360 360,660
we're going to be talking

484
00:15:05,910 --> 00:15:06,930
0,240 240,270 270,480 480,840 840,1020
about a lot today that

485
00:15:06,930 --> 00:15:07,560
0,90 90,240 240,420 420,570 570,630
we didn't talk about on

486
00:15:07,560 --> 00:15:09,150
0,510 720,930 930,1050 1050,1500 1500,1590
monday where I notes you

487
00:15:09,150 --> 00:15:10,230
0,150 150,450 450,510 510,930 930,1080
know set of blocks that

488
00:15:10,230 --> 00:15:11,850
0,240 240,810 1050,1380 1380,1500 1500,1620
actually contain each and each

489
00:15:11,850 --> 00:15:13,530
0,300 300,390 390,780 780,1260 1260,1680
block may contain multiply nodes,

490
00:15:13,650 --> 00:15:15,360
0,330 330,540 540,720 720,1200 1200,1710
just bit that block to

491
00:15:15,360 --> 00:15:16,650
0,390 390,540 540,840 840,870 870,1290
record which blocks are free

492
00:15:16,650 --> 00:15:17,880
0,180 180,570 570,660 660,900 900,1230
and which are not free,

493
00:15:18,120 --> 00:15:19,260
0,240 240,360 360,540 540,810 810,1140
and then the data blocks

494
00:15:19,260 --> 00:15:21,750
0,690 1200,1920 1920,2010 2010,2250 2250,2490
actually contain the actual data

495
00:15:21,750 --> 00:15:22,840
0,60 60,150 150,390 390,780
of the file system.

496
00:15:23,460 --> 00:15:25,710
0,360 420,870 870,1260 1260,1650 1650,2250
Um, you remember from monday's

497
00:15:25,710 --> 00:15:27,330
0,420 420,570 570,1200 1200,1290 1290,1620
lecture I reproduce the trace

498
00:15:27,330 --> 00:15:28,290
0,420 420,480 480,600 600,720 720,960
here you know we looked

499
00:15:28,290 --> 00:15:30,030
0,180 180,780 780,1140 1140,1380 1380,1740
at actually a how files

500
00:15:30,030 --> 00:15:32,280
0,570 990,1530 1530,1620 1620,1860 1860,2250
created and you know we

501
00:15:32,310 --> 00:15:33,660
0,450 450,780 780,870 870,1290 1290,1350
see that the creation of

502
00:15:33,660 --> 00:15:35,200
0,90 90,420 420,1020
a single file.

503
00:15:35,370 --> 00:15:36,900
0,600 600,840 840,900 900,1020 1020,1530
Well, let me have seconds.

504
00:15:41,460 --> 00:15:42,760
0,210 210,780
I do.

505
00:15:42,760 --> 00:15:43,510
0,120 120,420 420,480 480,540 540,750
The creation of a single

506
00:15:43,510 --> 00:15:46,240
0,780 780,1230 1230,1470 1470,1980 1980,2730
file consists of multiple operations,

507
00:15:46,360 --> 00:15:48,040
0,90 120,780 780,1080 1080,1230 1230,1680
for example in this particular

508
00:15:48,040 --> 00:15:49,420
0,480 480,630 630,810 810,1170 1170,1380
scenario that I've here on

509
00:15:49,420 --> 00:15:50,740
0,120 120,750
the on.

510
00:15:50,740 --> 00:15:52,690
0,90 90,210 210,600 930,1560 1740,1950
On this slide, um, we

511
00:15:52,690 --> 00:15:55,560
0,270 270,1140 1530,2280
see the um.

512
00:15:55,840 --> 00:15:56,740
0,150 150,240 240,540 540,810 810,900
You know I I know

513
00:15:56,740 --> 00:15:59,050
0,120 120,870 930,1500 1500,1890 1890,2310
it's allocated a and we

514
00:15:59,050 --> 00:16:00,100
0,150 150,360 360,570 570,750 750,1050
know this because there's block

515
00:16:00,100 --> 00:16:01,300
0,210 210,390 390,480 480,720 720,1200
{33 -} is being written

516
00:16:01,570 --> 00:16:03,520
0,630 1020,1290 1290,1650 1650,1860 1860,1950
a do we see that

517
00:16:03,520 --> 00:16:05,530
0,90 90,750 750,1230 1230,1860 1860,2010
the AfDB mia initialized, then

518
00:16:05,530 --> 00:16:06,700
0,240 240,570 570,690 690,960 960,1170
return again {to -} block

519
00:16:06,700 --> 00:16:07,960
0,390 630,930 930,1020 1020,1140 1140,1260
33, then we see the

520
00:16:07,960 --> 00:16:10,030
0,270 270,930 930,1350 1350,1620 1620,2070
block 46 a is written

521
00:16:10,030 --> 00:16:11,530
0,240 240,510 630,1050 1050,1200 1200,1500
and that reason is written

522
00:16:11,530 --> 00:16:12,730
0,90 90,630 630,960 960,1050 1050,1200
is presumably because you know

523
00:16:12,730 --> 00:16:14,950
0,270 720,1350 1350,1800 1800,1980 1980,2220
the directory block that actually

524
00:16:14,950 --> 00:16:16,870
0,480 480,1020 1170,1620 1620,1800 1800,1920
contains X and the I

525
00:16:16,870 --> 00:16:17,920
0,150 150,420 420,600 600,870 870,1050
know number four acts is

526
00:16:17,920 --> 00:16:19,180
0,300 300,390 390,480 480,900
written to the disk.

527
00:16:19,240 --> 00:16:20,530
0,300 300,390 390,540 540,900 960,1290
Then the I note rude

528
00:16:20,530 --> 00:16:22,480
0,120 120,420 420,930 930,1290 1290,1950
I notice updated to reflect

529
00:16:22,480 --> 00:16:24,010
0,180 180,510 540,1050 1050,1200 1200,1530
that the directory has grown

530
00:16:24,010 --> 00:16:26,620
0,720 720,1230 1260,1770 1770,1890 1890,2610
insight to contain this particular

531
00:16:26,770 --> 00:16:29,230
0,810 1140,1470 1470,1860 2070,2190 2190,2460
a file X and then

532
00:16:29,230 --> 00:16:30,820
0,120 120,570 570,780 780,1080 1080,1590
you know I notice updated.

533
00:16:31,650 --> 00:16:33,680
0,390 930,1470
So, um.

534
00:16:33,880 --> 00:16:34,990
0,240 240,330 330,480 480,630 630,1110
What we want to understand

535
00:16:34,990 --> 00:16:36,430
0,90 90,390 390,1050 1050,1170 1170,1440
is what happens like what

536
00:16:36,430 --> 00:16:38,680
0,150 150,660 660,870 870,1350 1380,2250
could possibly go wrong right,

537
00:16:39,040 --> 00:16:40,750
0,330 330,480 480,780 780,1290 1590,1710
um, so let's say you

538
00:16:40,750 --> 00:16:42,790
0,240 240,840 1080,1620 1650,1890 1890,2040
know we um have a

539
00:16:42,820 --> 00:16:45,280
0,450 450,1080 1230,1710 1710,2070 2280,2460
power failure right here, so

540
00:16:45,280 --> 00:16:46,700
0,390 390,510 510,780
here is it.

541
00:16:47,140 --> 00:16:49,060
0,270 270,720 720,930 930,1260 1260,1920
Our failure or kernel crash.

542
00:16:50,540 --> 00:16:51,800
0,630
AM.

543
00:16:52,160 --> 00:16:53,120
0,180 180,360 360,660 660,870 870,960
So what happens after the

544
00:16:53,120 --> 00:16:54,200
0,270 270,540 540,810 810,960 960,1080
power failure, correct all the

545
00:16:54,200 --> 00:16:56,900
0,600 600,1200 1230,1470 1470,2100 2400,2700
in-memory state is lost because

546
00:16:56,900 --> 00:16:59,390
0,0 840,1290 1290,1650 1680,2280 2280,2490
a memory state data that's

547
00:16:59,390 --> 00:17:00,890
0,270 270,420 420,870 870,1290 1320,1500
actually in Ram, like all

548
00:17:00,890 --> 00:17:02,480
0,90 90,900 900,1140 1140,1350 1350,1590
the processes all the file

549
00:17:02,480 --> 00:17:03,960
0,750
descriptors.

550
00:17:03,960 --> 00:17:05,580
0,360 360,570 570,840 840,1620 1620,1620
A all the memory, um,

551
00:17:05,580 --> 00:17:08,520
0,690 690,840 840,1350 1560,2370 2370,2940
caches are gone, because memory

552
00:17:08,520 --> 00:17:09,840
0,120 120,300 300,900 1080,1230 1230,1320
is not persistent and the

553
00:17:09,840 --> 00:17:10,620
0,210 210,360 360,510 510,630 630,780
only thing that we have

554
00:17:10,620 --> 00:17:12,270
0,480 630,1020 1020,1200 1200,1530 1530,1650
left is what actually is

555
00:17:12,270 --> 00:17:14,670
0,270 270,360 360,840 1380,1620 1620,2400
on the disk, so only

556
00:17:14,670 --> 00:17:17,280
0,60 60,60 600,1200 1200,1830 1830,2610
as a data structures, a

557
00:17:17,370 --> 00:17:18,450
0,300 300,420 420,720 720,870 870,1080
bits and bytes, they're actually

558
00:17:18,450 --> 00:17:20,190
0,210 210,300 300,390 390,690 690,1740
sitting on the disk or

559
00:17:20,550 --> 00:17:22,980
0,690 690,780 780,1080 1080,1650 1860,2430
survived the power failure because

560
00:17:22,980 --> 00:17:24,420
0,210 210,450 450,1020 1020,1320 1320,1440
that actually medium is you

561
00:17:24,420 --> 00:17:25,720
0,120 120,960
know persistence.

562
00:17:26,010 --> 00:17:27,740
0,180 180,450 450,1110
Or has durability.

563
00:17:28,100 --> 00:17:28,640
0,150 150,240 240,330 330,480 480,540
And so we want to

564
00:17:28,640 --> 00:17:30,380
0,270 270,450 450,510 510,1170
know like we understand.

565
00:17:30,380 --> 00:17:31,850
0,300 330,510 510,600 600,960 960,1470
So if we crash here

566
00:17:32,270 --> 00:17:33,530
0,420 420,540 540,660 660,870 870,1260
and we have no additional

567
00:17:33,530 --> 00:17:35,990
0,840 990,1470 1470,1740 1770,2040 2040,2460
mechanisms, um or no logging

568
00:17:35,990 --> 00:17:37,190
0,660 720,930 930,1050 1050,1110 1110,1200
as we're going to be

569
00:17:37,190 --> 00:17:38,330
0,300 300,720 780,930 930,1020 1020,1140
talking about we have no

570
00:17:38,330 --> 00:17:40,730
0,360 360,1020 1530,1950 1980,2130 2130,2400
additional mechanisms, how how bad

571
00:17:40,730 --> 00:17:41,720
0,120 120,390
is it.

572
00:17:42,750 --> 00:17:44,910
0,780 1050,1530 1530,1740 1740,1890 1890,2160
What risk are we running

573
00:17:44,910 --> 00:17:45,880
0,390
here.

574
00:17:53,750 --> 00:17:54,920
0,630
Anybody.

575
00:17:57,670 --> 00:17:58,990
0,240 240,840 840,960 960,1110 1110,1320
So basically you know we've

576
00:17:58,990 --> 00:18:01,060
0,510 690,1050 1050,1350 1350,1560 1560,2070
written a block {33 -}

577
00:18:01,120 --> 00:18:02,410
0,420 420,570 570,960 960,1200 1200,1290
a to record the I

578
00:18:02,410 --> 00:18:03,760
0,150 150,300 300,420 420,1110 1170,1350
note has been allocated then

579
00:18:03,760 --> 00:18:04,690
0,90 90,210 210,240 240,570 570,930
we had a power failure

580
00:18:04,690 --> 00:18:05,350
0,90 90,210 210,300 300,420 420,660
and then we come back

581
00:18:05,350 --> 00:18:06,220
0,300
up.

582
00:18:07,780 --> 00:18:08,780
0,480
Keith.

583
00:18:13,300 --> 00:18:14,680
0,600 600,840 840,1020 1020,1230 1230,1380
This does that mean we

584
00:18:14,680 --> 00:18:17,680
0,450 450,1110 1260,2010 2160,2760 2760,3000
lose the um, lose this

585
00:18:17,680 --> 00:18:18,780
0,600
block.

586
00:18:18,780 --> 00:18:19,950
0,180 180,360 360,510 510,960 960,1170
It's like it seems like

587
00:18:19,950 --> 00:18:21,450
0,240 240,870 870,990 990,1170 1170,1500
it's populated but it's actually

588
00:18:21,450 --> 00:18:23,460
0,360 840,1290 1290,1680 1680,1860 1860,2010
not yeah correctly I think

589
00:18:23,460 --> 00:18:25,320
0,180 180,510 510,1470 1470,1770 1770,1860
we're losing we're losing the

590
00:18:25,320 --> 00:18:26,430
0,210 210,510 510,660 660,810 810,1110
whole block, but we used

591
00:18:26,430 --> 00:18:27,930
0,180 180,330 330,930 990,1410 1410,1500
I know DAX Di know

592
00:18:27,930 --> 00:18:28,980
0,570
DAX.

593
00:18:29,070 --> 00:18:30,150
0,120 120,270 270,540 540,870 870,1080
And I note for acts

594
00:18:30,150 --> 00:18:31,530
0,150 150,270 270,780 780,1050 1050,1380
that was allocated orders, Mark

595
00:18:31,530 --> 00:18:33,600
0,90 90,690 1140,1320 1320,1530 1530,2070
was allocated a is allocated

596
00:18:33,600 --> 00:18:34,890
0,240 240,720 870,1050 1050,1140 1140,1290
on disk, but we have

597
00:18:34,890 --> 00:18:37,020
0,570 570,810 810,960 960,1470 1680,2130
not put in any um,

598
00:18:37,020 --> 00:18:38,910
0,240 240,480 480,1050 1050,1380 1380,1890
we've not succeeded, correct a

599
00:18:38,910 --> 00:18:40,900
0,480 480,690 690,870 870,1440
input in any directory.

600
00:18:41,120 --> 00:18:42,530
0,270 270,660 660,900 900,1020 1020,1410
So basically on the disk,

601
00:18:42,560 --> 00:18:43,130
0,90 90,210 210,390 390,480 480,570
you know there's an I

602
00:18:43,130 --> 00:18:44,330
0,210 210,750 750,870 870,930 930,1200
node allocated but it doesn't

603
00:18:44,330 --> 00:18:46,280
0,420 420,540 540,960 960,1530 1830,1950
appear in any directory, so

604
00:18:46,280 --> 00:18:47,330
0,90 90,300 300,480 480,810 810,1050
we can't even remove it

605
00:18:47,780 --> 00:18:48,680
0,330
right.

606
00:18:48,830 --> 00:18:50,300
0,300 300,420 420,750 750,1170 1170,1470
And so basically what will

607
00:18:50,300 --> 00:18:51,230
0,150 150,420 420,510 510,630 630,930
this cost has to happen

608
00:18:51,230 --> 00:18:52,670
0,180 180,300 300,750 780,1260 1260,1440
is we lose lose an

609
00:18:52,670 --> 00:18:53,560
0,300
oat.

610
00:18:57,200 --> 00:18:58,540
0,150 150,240 240,360 360,720
Does that make sense.

611
00:19:01,260 --> 00:19:02,490
0,180 180,360 360,540 540,930 930,1230
You might think, well maybe

612
00:19:02,490 --> 00:19:03,360
0,240 240,300 300,510 510,720 720,870
what I should do is

613
00:19:03,360 --> 00:19:04,560
0,360 360,420 420,600 600,1080 1080,1200
maybe I should reorder the

614
00:19:04,560 --> 00:19:05,800
0,540
rights.

615
00:19:05,830 --> 00:19:07,120
0,450 450,750 750,900 900,960 960,1290
And, um, in a way

616
00:19:07,120 --> 00:19:08,050
0,90 90,270 270,510 510,870 870,930
you know then hopefully you

617
00:19:08,050 --> 00:19:08,830
0,120 120,510 510,600 600,690 690,780
know this, you know we

618
00:19:08,830 --> 00:19:09,610
0,120 120,360 360,510 510,600 600,780
don't lose the I know,

619
00:19:09,610 --> 00:19:10,630
0,180 180,270 270,570 570,810 810,1020
so for example another thing

620
00:19:10,630 --> 00:19:11,590
0,120 120,240 240,450 450,810 810,960
we could try doing is

621
00:19:11,590 --> 00:19:12,580
0,270 270,510 510,660 660,780 780,990
say well what we'll do

622
00:19:12,580 --> 00:19:15,800
0,240 360,1260 1470,1860 1860,2760
is we'll write 46.

623
00:19:16,990 --> 00:19:18,200
0,630
First.

624
00:19:18,230 --> 00:19:19,610
0,390 390,690 690,810 810,960 960,1380
Basically update the I know

625
00:19:19,610 --> 00:19:22,640
0,420 420,1080 1380,1710 1710,2190 2550,3030
updated directory right, the directory

626
00:19:22,640 --> 00:19:23,840
0,120 120,600
I node.

627
00:19:24,780 --> 00:19:26,430
0,180 180,420 420,1140 1170,1260 1260,1650
Yeah right 32 and then

628
00:19:26,430 --> 00:19:27,540
0,180 180,390 390,810 810,960 960,1110
will actually Mark the I

629
00:19:27,540 --> 00:19:29,460
0,270 270,390 390,1110 1140,1440 1440,1920
node is allocated on disk.

630
00:19:30,950 --> 00:19:34,100
0,1080 1080,1260 1380,1560 1560,1920 2610,3150
Um, ah, um to market

631
00:19:34,100 --> 00:19:35,900
0,540 540,750 750,1110 1110,1200 1200,1800
indicated that market is allocated.

632
00:19:36,650 --> 00:19:37,580
0,150 150,270 270,420 420,630 630,930
So we do the same

633
00:19:37,580 --> 00:19:38,480
0,150 150,210 210,750 750,840 840,900
set of operations in a

634
00:19:38,480 --> 00:19:40,020
0,300 300,570 570,990
slightly different order.

635
00:19:40,050 --> 00:19:40,950
0,300 300,450 450,510 510,750 750,900
A in the hope that

636
00:19:40,950 --> 00:19:43,320
0,90 90,990 1470,1890 1890,2040 2040,2370
we should avoid this losing

637
00:19:43,320 --> 00:19:44,580
0,120 120,270 270,360 360,720 750,1260
of the I note problem.

638
00:19:45,680 --> 00:19:47,520
0,300 390,600 600,750 750,1230
And what does work.

639
00:19:50,980 --> 00:19:51,940
0,300 300,570 570,720 720,810 810,960
Well, the thing that we

640
00:19:51,940 --> 00:19:53,230
0,240 240,540 540,1020 1020,1230 1230,1290
should ask ourselves like you

641
00:19:53,230 --> 00:19:54,820
0,390 510,870 870,1230 1230,1410 1410,1590
know let's think about this

642
00:19:54,820 --> 00:19:56,350
0,240 240,330 330,780 990,1260 1260,1530
point in time, let's say

643
00:19:56,350 --> 00:19:57,640
0,90 90,450 450,810 810,1050 1050,1290
a crash happens like right

644
00:19:57,640 --> 00:19:59,020
0,330 330,480 480,810 810,1080 1080,1380
here or power failure happens

645
00:19:59,020 --> 00:20:00,800
0,420 450,1290
right between.

646
00:20:00,800 --> 00:20:02,690
0,330 330,810 810,900 900,1350 1350,1890
A updating the directory basically,

647
00:20:02,690 --> 00:20:04,400
0,210 210,870 870,1080 1080,1590 1590,1710
but before we allocated the

648
00:20:04,400 --> 00:20:05,330
0,90 90,330 330,450 450,780 810,930
I note on disc and

649
00:20:05,330 --> 00:20:06,860
0,570 630,720 720,930 930,1140 1170,1530
now you know we power

650
00:20:06,860 --> 00:20:08,720
0,600 750,1050 1050,1230 1230,1470 1470,1860
fails machine comes back up

651
00:20:08,960 --> 00:20:09,560
0,150 150,240 240,450 450,540 540,600
and we look at the

652
00:20:09,560 --> 00:20:11,090
0,270 270,660 690,870 870,960 960,1530
file system, you know what

653
00:20:11,090 --> 00:20:12,080
0,270 270,450 450,510 510,720 720,990
state build a file system

654
00:20:12,080 --> 00:20:13,020
0,180 180,420
be it.

655
00:20:15,200 --> 00:20:16,370
0,180 180,480 480,690 690,900 900,1170
You'll still think it's a

656
00:20:16,370 --> 00:20:18,320
0,450 450,630 630,960 960,1410
free I note in.

657
00:20:19,420 --> 00:20:20,410
0,150 150,480 480,600 600,900 900,990
Yeah what would happen if

658
00:20:20,410 --> 00:20:21,910
0,60 60,570 570,960 960,1410 1410,1500
for example we read you

659
00:20:21,910 --> 00:20:23,440
0,390 390,750 750,900 900,960 960,1530
notify lacks in the directory

660
00:20:23,650 --> 00:20:24,730
0,150 150,210 210,360 360,840 840,1080
in the root directory because

661
00:20:24,730 --> 00:20:25,540
0,60 60,240 240,420 420,630 630,810
it is in there now

662
00:20:25,540 --> 00:20:27,260
0,330 330,450 450,660 660,1080
correcting this data block.

663
00:20:30,080 --> 00:20:30,800
0,180 180,300 300,360 360,480 480,720
We're going to be reading

664
00:20:30,800 --> 00:20:31,640
0,120 120,240 240,450 450,600 600,840
the I node that actually

665
00:20:31,640 --> 00:20:32,990
0,90 90,300 300,450 450,1020 1020,1350
is not even allocated characters

666
00:20:32,990 --> 00:20:34,860
0,360 360,1170
marked unallocated.

667
00:20:34,950 --> 00:20:37,020
0,510 510,1110 1380,1770 1770,1950 1950,2070
Um and worse, what could

668
00:20:37,020 --> 00:20:38,130
0,300 300,450 450,750 810,990 990,1110
happen is correct I know

669
00:20:38,130 --> 00:20:39,480
0,60 60,240 240,360 360,810 810,1350
it might be allocated again,

670
00:20:39,540 --> 00:20:40,470
0,180 180,240 240,420 420,660 660,930
or it might actually really

671
00:20:40,470 --> 00:20:43,530
0,150 150,780 1140,1830 1860,2400 2400,3060
be allocated because markets unallocated

672
00:20:43,530 --> 00:20:44,310
0,150 150,420 420,480 480,750 750,780
to actually in fact a

673
00:20:44,310 --> 00:20:45,660
0,390 390,900
different file.

674
00:20:46,110 --> 00:20:47,520
0,450 840,1020 1020,1110 1110,1290 1290,1410
Right, and so now we

675
00:20:47,520 --> 00:20:49,530
0,120 120,300 300,960 1350,1740 1740,2010
have two files that might

676
00:20:49,530 --> 00:20:51,900
0,600 600,1530 1770,1950 1950,2250 2250,2370
actually um two files that

677
00:20:51,900 --> 00:20:52,920
0,180 180,600 600,810 810,900 900,1020
actually share even though they're

678
00:20:52,920 --> 00:20:53,970
0,360 360,630 630,690 690,990 990,1050
completely different, they share the

679
00:20:53,970 --> 00:20:55,200
0,240 240,360 360,720
same I note.

680
00:20:55,350 --> 00:20:56,880
0,120 120,450 450,540 540,960 1110,1530
For example if one file

681
00:20:56,880 --> 00:20:57,630
0,120 120,210 210,420 420,540 540,750
would be owned by user

682
00:20:57,630 --> 00:20:58,740
0,360 360,480 480,720 720,870 870,1110
one and one by user

683
00:20:58,740 --> 00:20:59,910
0,210 210,360 360,750 750,960 960,1170
to then basically user to

684
00:20:59,910 --> 00:21:00,780
0,180 180,390 390,600 600,660 660,870
could we use a one

685
00:21:00,780 --> 00:21:02,130
0,330 330,510 510,660 660,900 990,1350
file a day to write.

686
00:21:03,770 --> 00:21:04,760
0,180 180,330 330,510 510,690 690,990
So that's no good, either,

687
00:21:04,760 --> 00:21:06,040
0,390
right.

688
00:21:11,230 --> 00:21:12,540
0,150 150,240 240,390 390,750
Does that make sense.

689
00:21:13,980 --> 00:21:15,870
0,240 240,600 600,1170 1170,1410 1410,1890
So basically switching the order

690
00:21:15,870 --> 00:21:16,650
0,90 90,150 150,270 270,510 510,780
you know it's not really

691
00:21:16,650 --> 00:21:17,730
0,120 120,180 180,510 510,630 630,1080
going to solve our problem.

692
00:21:18,500 --> 00:21:19,880
0,420 420,540 540,660 660,960 960,1380
Um, you would just basically

693
00:21:19,880 --> 00:21:21,110
0,150 150,240 240,540 540,990 1020,1230
get a different problem than

694
00:21:21,110 --> 00:21:22,360
0,120 120,240 240,690
we had before.

695
00:21:23,630 --> 00:21:24,350
0,210 210,390 390,540 540,600 600,720
Okay, let's look at one

696
00:21:24,350 --> 00:21:25,740
0,180 180,810
more example.

697
00:21:25,840 --> 00:21:28,720
0,660 660,1050 1050,1530 1560,2160 2190,2880
Um, here's the um example

698
00:21:28,810 --> 00:21:30,400
0,270 300,960
of writing.

699
00:21:31,250 --> 00:21:32,860
0,210 210,570 570,960
Do file X.

700
00:21:35,120 --> 00:21:35,870
0,210 210,450 450,570 570,690 690,750
So once we have the

701
00:21:35,870 --> 00:21:37,100
0,300 300,780 780,900 900,1050 1050,1230
files allocated let's say that

702
00:21:37,100 --> 00:21:38,330
0,120 120,750 780,900 900,1080 1080,1230
all succeeded and now we're

703
00:21:38,330 --> 00:21:39,950
0,480 480,570 570,810 810,1110 1110,1620
executing the write system call

704
00:21:40,160 --> 00:21:40,970
0,120 120,180 180,360 360,630 630,810
and the write system call

705
00:21:40,970 --> 00:21:42,710
0,270 270,630 660,990 990,1500 1500,1740
also does a multiple writes

706
00:21:42,710 --> 00:21:43,820
0,570 570,660 660,840 840,1020 1020,1110
operations which we saw on

707
00:21:43,820 --> 00:21:46,190
0,480 870,1740 1740,1860 1860,1980 1980,2370
monday example it will allocate

708
00:21:46,190 --> 00:21:47,300
0,30 30,570
a block.

709
00:21:47,300 --> 00:21:48,740
0,60 60,180 180,390 390,720 720,1440
In this case block 45,

710
00:21:49,160 --> 00:21:50,720
0,240 240,330 330,600 600,1050 1050,1560
so it sets a bit

711
00:21:50,720 --> 00:21:52,130
0,180 180,270 270,450 450,960 1110,1410
in the free map, um,

712
00:21:52,130 --> 00:21:54,020
0,390 450,870 870,1380 1380,1560 1560,1890
okay block 45 is the

713
00:21:54,170 --> 00:21:56,060
0,330 330,480 480,960 1260,1560 1560,1890
bit map block a so

714
00:21:56,060 --> 00:21:57,050
0,150 150,540 540,600 600,900 900,990
it allocates a block in

715
00:21:57,050 --> 00:21:58,430
0,90 90,240 240,930 930,1320 1320,1380
the bit map allocates a

716
00:21:58,430 --> 00:21:59,180
0,240 240,360 360,420 420,570 570,750
bit in the bit map

717
00:21:59,180 --> 00:22:01,300
0,330 330,690 900,1530
block to indicate.

718
00:22:01,420 --> 00:22:02,440
0,330 330,480 480,720 720,870 870,1020
The the block has to

719
00:22:02,440 --> 00:22:04,360
0,120 120,750 1140,1290 1290,1470 1470,1920
be allocated a that block

720
00:22:04,360 --> 00:22:04,960
0,210 210,300 300,360 360,540 540,600
turns out to be a

721
00:22:04,960 --> 00:22:06,780
0,210 210,480 480,720 720,1290
guess five ninety five.

722
00:22:06,780 --> 00:22:07,770
0,90 90,360 360,480 480,900 930,990
And then we write you

723
00:22:07,770 --> 00:22:09,420
0,240 240,750 750,900 900,1290 1290,1650
know at the character h

724
00:22:09,420 --> 00:22:10,500
0,120 120,210 210,630 630,870 870,1080
you know two five ninety

725
00:22:10,500 --> 00:22:11,400
0,300 300,390 390,480 480,540 540,900
five and then the character

726
00:22:11,400 --> 00:22:12,330
0,300 300,390 390,510 510,630 630,930
I you know we update

727
00:22:12,330 --> 00:22:13,460
0,90 90,210 210,540
the I note.

728
00:22:13,990 --> 00:22:14,860
0,330 330,450 450,540 540,630 630,870
Right now we can ask

729
00:22:14,860 --> 00:22:16,270
0,330 330,390 390,570 570,1080 1080,1410
ourselves the same question like

730
00:22:16,270 --> 00:22:18,300
0,360 360,510 510,1020
what will happen.

731
00:22:19,360 --> 00:22:22,000
0,720 720,1560 1590,1710 1710,2310 2400,2640
Um, if we crash so

732
00:22:22,000 --> 00:22:23,230
0,60 60,570 570,780 780,1050 1050,1230
for example let's say we

733
00:22:23,230 --> 00:22:25,840
0,420 420,990 1020,1320 1320,1710 1770,2610
allocate crashed right here between.

734
00:22:26,400 --> 00:22:28,170
0,90 90,270 270,780 810,1350 1590,1770
You know writing the bit

735
00:22:28,170 --> 00:22:30,960
0,240 240,750 990,1740 1740,1980 1980,2790
map block before we allocate

736
00:22:30,990 --> 00:22:32,490
0,720 720,870 870,1110 1110,1410 1410,1500
before we actually write a

737
00:22:32,490 --> 00:22:33,460
0,360
note.

738
00:22:33,700 --> 00:22:35,400
0,360 360,720 720,1080
So crash here.

739
00:22:39,980 --> 00:22:41,570
0,420 420,540 540,690 690,1320 1350,1590
And so we reboot we

740
00:22:41,570 --> 00:22:43,100
0,150 150,390 390,780 810,1230 1230,1530
come back up and this

741
00:22:43,100 --> 00:22:44,360
0,180 180,270 270,330 330,660 660,1260
is in a particular state

742
00:22:44,360 --> 00:22:45,500
0,570
and.

743
00:22:45,830 --> 00:22:47,090
0,150 150,570 600,930 930,1140 1140,1260
You know what, what is

744
00:22:47,090 --> 00:22:48,220
0,90 90,510
the risk.

745
00:22:50,520 --> 00:22:52,080
0,240 240,420 420,750 750,1110 1110,1560
We use it data block,

746
00:22:52,080 --> 00:22:54,000
0,360 600,780 780,1080 1080,1350 1710,1920
but we lose it, yeah

747
00:22:54,000 --> 00:22:54,930
0,150 150,330 330,420 420,690 690,930
we lose it again great

748
00:22:54,930 --> 00:22:56,550
0,270 270,510 540,1020 1020,1110 1110,1620
because the block is allocated

749
00:22:56,550 --> 00:22:57,270
0,150 150,360 360,540 540,630 630,720
but doesn't show up in

750
00:22:57,270 --> 00:22:58,500
0,210 210,660
any file.

751
00:22:58,950 --> 00:23:00,300
0,330 330,570 570,660 660,930 930,1350
A because it hasn't been

752
00:23:00,330 --> 00:23:01,890
0,630 630,930 930,1140 1140,1380 1380,1560
written into any an ode

753
00:23:01,890 --> 00:23:02,790
0,150 150,240 240,570 570,660 660,900
so we lose a data

754
00:23:02,790 --> 00:23:03,840
0,390
block.

755
00:23:08,680 --> 00:23:09,580
0,210 210,390 390,540 540,690 690,900
You might think okay, well

756
00:23:09,580 --> 00:23:10,750
0,450 450,600 600,690 690,930 930,1170
maybe you know just because

757
00:23:10,750 --> 00:23:11,560
0,270 270,510 510,630 630,720 720,810
we wrote them in the

758
00:23:11,560 --> 00:23:12,610
0,210 210,540 540,780 780,900 900,1050
wrong order, what we should

759
00:23:12,610 --> 00:23:15,220
0,90 90,420 420,1080 1380,2160 2160,2610
have done is a what

760
00:23:15,220 --> 00:23:16,000
0,120 120,330 330,510 510,630 630,780
we should've done is at

761
00:23:16,000 --> 00:23:16,840
0,270 270,480 480,630 630,720 720,840
first right in the eye

762
00:23:16,840 --> 00:23:18,640
0,420 810,990 990,1290 1290,1560 1560,1800
note so first right {33

763
00:23:18,640 --> 00:23:20,720
0,450 900,1140 1140,1530
-} with the.

764
00:23:20,930 --> 00:23:22,250
0,120 120,210 210,510 510,1080 1080,1320
You know with five ninety

765
00:23:22,250 --> 00:23:25,010
0,570 660,1380 1500,1680 1680,2160 2220,2760
five as in the ether

766
00:23:25,010 --> 00:23:26,120
0,60 60,210 210,720 720,1050 1050,1110
is an indirect block a

767
00:23:26,120 --> 00:23:27,460
0,270 270,750
direct block.

768
00:23:27,520 --> 00:23:28,870
0,210 210,870 900,1020 1020,1140 1140,1350
And then you know actually

769
00:23:28,870 --> 00:23:31,330
0,180 180,390 390,960 1320,1950 1980,2460
we will Mark the rhinos

770
00:23:31,330 --> 00:23:32,890
0,540 570,810 810,900 900,1350 1350,1560
a block is allocated so

771
00:23:32,890 --> 00:23:34,360
0,330 330,510 510,990
then we'll write.

772
00:23:34,390 --> 00:23:35,860
0,120 120,210 210,960
You know 45.

773
00:23:37,000 --> 00:23:37,960
0,90 90,270 270,510 510,600 600,960
If we change the order

774
00:23:37,960 --> 00:23:38,860
0,270 270,390 390,570 570,630 630,900
because we want to avoid

775
00:23:38,860 --> 00:23:40,270
0,150 150,390 390,630 630,1140 1140,1410
these log data blocking change

776
00:23:40,270 --> 00:23:41,560
0,180 180,240 240,420 420,720
order in this way.

777
00:23:42,530 --> 00:23:44,210
0,420 420,900 930,1170 1170,1380 1380,1680
Um, and now let's consider

778
00:23:44,210 --> 00:23:45,020
0,90 90,420 420,600 600,750 750,810
the case if there's a

779
00:23:45,020 --> 00:23:46,620
0,390 390,600 600,1080
failure right here.

780
00:23:50,370 --> 00:23:51,860
0,300 300,420 420,510 510,960
What is the risk.

781
00:23:56,960 --> 00:23:58,520
0,450 450,630 630,1290 1290,1440 1440,1560
I'm the size of the

782
00:23:58,520 --> 00:24:00,530
0,360 360,510 510,810 810,1440 1440,2010
file is not compatible with

783
00:24:00,530 --> 00:24:03,050
0,870 870,1050 1050,1680 1800,2190 2190,2520
actually how many data blocks

784
00:24:03,050 --> 00:24:04,320
0,60 60,750
are allocated.

785
00:24:04,710 --> 00:24:05,580
0,180 180,390 390,540 540,810 810,870
That might be although I

786
00:24:05,580 --> 00:24:06,210
0,150 150,270 270,360 360,570 570,630
think it's the right of

787
00:24:06,210 --> 00:24:07,590
0,210 210,540 540,840 840,1140 1140,1380
{33 -} actually update both

788
00:24:07,590 --> 00:24:08,760
0,90 90,510 510,930 930,1050 1050,1170
the sides and you know

789
00:24:08,760 --> 00:24:10,470
0,450 570,810 810,1020 1020,1260 1260,1710
the um, the block number.

790
00:24:11,970 --> 00:24:13,140
0,660
Where.

791
00:24:13,450 --> 00:24:14,530
0,210 210,330 330,480 480,810 810,1080
So that might be might

792
00:24:14,530 --> 00:24:15,860
0,180 180,330 330,810
work out OK.

793
00:24:16,780 --> 00:24:17,620
0,150 150,240 240,360 360,510 510,840
If there were two separate

794
00:24:17,620 --> 00:24:18,730
0,390 390,780 780,930 930,1050 1050,1110
rights nirvana would be a

795
00:24:18,730 --> 00:24:19,740
0,450
problem.

796
00:24:20,950 --> 00:24:21,910
0,150 150,270 270,390 390,630 630,960
But there's some bigger problem

797
00:24:21,910 --> 00:24:22,720
0,360
here.

798
00:24:27,400 --> 00:24:29,000
0,240 240,480 480,1110
Is that the.

799
00:24:29,620 --> 00:24:32,320
0,240 240,540 540,1590 1770,2220 2220,2700
So the file has a.

800
00:24:33,820 --> 00:24:35,890
0,270 270,630 630,1020 1260,1530 1530,2070
So things that it has

801
00:24:35,890 --> 00:24:37,480
0,300 300,630 630,1290 1290,1500 1500,1590
the data block, but the

802
00:24:37,480 --> 00:24:38,980
0,270 270,540 540,630 630,1080 1080,1500
data block is marked as

803
00:24:39,010 --> 00:24:42,640
0,480 720,1800 1890,2250 2250,3090
a unallocated and other.

804
00:24:42,790 --> 00:24:44,650
0,510 540,1020 1020,1200 1200,1500 1500,1860
I'm files can also use

805
00:24:44,650 --> 00:24:46,570
0,450 570,1410 1410,1650 1650,1740 1740,1920
it yeah that's the real

806
00:24:46,570 --> 00:24:47,740
0,180 180,480 480,720 720,900 900,1170
big problem here is that

807
00:24:47,740 --> 00:24:49,180
0,150 150,300 300,630 1020,1290 1290,1440
you know the the I

808
00:24:49,180 --> 00:24:51,040
0,420 420,930 1170,1560 1560,1770 1770,1860
note things five ninety four

809
00:24:51,040 --> 00:24:53,170
0,300 300,510 510,1080 1080,1680 1770,2130
block five ninety-five belonged belonged

810
00:24:53,170 --> 00:24:54,700
0,90 90,270 270,780 960,1230 1230,1530
to that file, but actually

811
00:24:54,700 --> 00:24:55,930
0,150 150,420 420,540 540,780 780,1230
on disc it's still marked

812
00:24:55,960 --> 00:24:57,120
0,750
as.

813
00:24:57,120 --> 00:24:59,430
0,150 150,930 990,1320 1320,1830 2040,2310
A unallocated and so when

814
00:24:59,430 --> 00:25:01,080
0,420 420,690 690,990 990,1110 1110,1650
later another file was created,

815
00:25:01,110 --> 00:25:02,220
0,90 90,210 210,420 420,720 720,1110
you know that block actually

816
00:25:02,220 --> 00:25:03,870
0,270 270,900 930,1410 1410,1500 1500,1650
might be used for that

817
00:25:03,870 --> 00:25:05,020
0,180 180,630
other file.

818
00:25:05,140 --> 00:25:07,120
0,270 270,390 390,540 540,1320 1350,1980
And so now certainly a

819
00:25:07,150 --> 00:25:08,500
0,240 240,510 510,870 870,990 990,1350
one file things, it owns

820
00:25:08,650 --> 00:25:09,910
0,390 390,600 600,870 870,990 990,1260
five ninety five but actually

821
00:25:09,910 --> 00:25:11,170
0,210 210,450 450,840 840,1020 1020,1260
other file does, in fact

822
00:25:11,170 --> 00:25:12,490
0,300 300,720 720,870 870,1050 1050,1320
Bo files will have five

823
00:25:12,490 --> 00:25:14,200
0,270 270,660 660,780 780,1200
ninety five in there.

824
00:25:14,230 --> 00:25:16,420
0,540 570,1080 1080,1680 1800,2010 2010,2190
A block numbers for their

825
00:25:16,420 --> 00:25:20,500
0,120 120,570 930,1680 1890,2670 3240,4080
I note and I'm basically

826
00:25:20,500 --> 00:25:21,820
0,150 150,540 540,750 750,990 990,1320
you know if one user

827
00:25:21,820 --> 00:25:22,870
0,300 300,480 480,810 810,870 870,1050
owns that file the other

828
00:25:22,870 --> 00:25:23,710
0,300 300,360 360,450 450,630 630,840
user in the other file,

829
00:25:23,710 --> 00:25:24,880
0,60 60,450 450,690 690,930 930,1170
the connection reader right to

830
00:25:24,880 --> 00:25:26,350
0,210 210,390 390,750 900,1140 1140,1470
each other's data right, that's

831
00:25:26,380 --> 00:25:27,910
0,480 480,840 840,1050 1050,1140 1140,1530
clearly not what we want.

832
00:25:28,390 --> 00:25:29,320
0,120 120,210 210,390 420,660 660,930
You know the file system

833
00:25:29,320 --> 00:25:31,450
0,240 240,990 1170,1350 1350,1590 1590,2130
should guarantee that every block

834
00:25:31,480 --> 00:25:33,430
0,660 690,1200 1200,1290 1290,1560 1560,1950
only belongs in one file

835
00:25:33,430 --> 00:25:34,810
0,90 90,240 240,450 450,960 990,1380
and no other file, or

836
00:25:34,810 --> 00:25:35,860
0,150 150,540
is free.

837
00:25:37,630 --> 00:25:38,680
0,570
Okay.

838
00:25:38,860 --> 00:25:39,730
0,120 120,270 270,420 420,600 600,870
So this could lead to

839
00:25:39,760 --> 00:25:42,250
0,450 450,1230 1260,2100 2100,2400 2400,2490
security problems, basically block is

840
00:25:42,250 --> 00:25:43,420
0,600
shared.

841
00:25:46,960 --> 00:25:48,860
0,330 330,630 630,1110
Among multiple files.

842
00:25:49,640 --> 00:25:51,480
0,210 210,450 450,840 840,1350
And that's definitely wrong.

843
00:25:55,480 --> 00:25:57,280
0,120 120,180 180,750 750,1140 1680,1800
Does it make sense in

844
00:25:57,280 --> 00:25:58,000
0,210 210,270 270,360 360,630 630,720
terms of the problems that

845
00:25:58,000 --> 00:25:59,180
0,90 90,600
can appear.

846
00:25:59,300 --> 00:26:00,260
0,150 150,510 510,600 600,720 720,960
And again, you know the

847
00:26:00,830 --> 00:26:02,240
0,540 540,870 870,1110 1110,1230 1230,1410
real issue here is not

848
00:26:02,240 --> 00:26:03,350
0,90 90,330 330,510 510,960 960,1110
to watch the ordering of

849
00:26:03,350 --> 00:26:04,850
0,90 90,600 840,1170 1170,1260 1260,1500
the rights but the real

850
00:26:04,850 --> 00:26:06,050
0,480 480,780 780,990 990,1080 1080,1200
underlying problem here is that

851
00:26:06,050 --> 00:26:07,340
0,60 60,240 240,450 450,930 930,1290
we're just doing multiple writes

852
00:26:07,340 --> 00:26:08,660
0,120 120,270 270,750 750,1020 1020,1320
and it basically have to

853
00:26:08,660 --> 00:26:10,730
0,360 360,510 510,690 690,1140 1470,2070
show up on disc as

854
00:26:11,000 --> 00:26:13,160
0,450 450,1020 1020,1590
an atomic operation.

855
00:26:18,920 --> 00:26:21,140
0,690 1050,1320 1320,1470 1470,1560 1560,2220
Okay, um, so the solution

856
00:26:21,710 --> 00:26:23,140
0,180 180,270 270,750
that we're gonna.

857
00:26:23,940 --> 00:26:25,950
0,690 720,870 870,990 990,1470 1470,2010
Explore in this lecture is

858
00:26:25,980 --> 00:26:27,380
0,780
logging.

859
00:26:28,380 --> 00:26:29,160
0,240 240,330 330,330 330,540 540,780
And as I said before

860
00:26:29,160 --> 00:26:30,800
0,150 150,270 270,930
this is a.

861
00:26:32,100 --> 00:26:33,300
0,90 90,360 360,780 780,1080 1080,1200
A common solution used in

862
00:26:33,300 --> 00:26:36,090
0,240 240,780 780,1410 1830,2430 2430,2790
file systems and originating actually

863
00:26:36,090 --> 00:26:37,590
0,150 150,210 210,480 480,900 900,1500
out of the database literature,

864
00:26:37,740 --> 00:26:38,700
0,300 300,420 420,690 690,930 930,960
and it actually has a

865
00:26:38,700 --> 00:26:40,500
0,270 270,480 480,1110 1170,1290 1290,1800
couple goose properties a one

866
00:26:40,500 --> 00:26:41,700
0,180 180,300 300,360 360,600 600,1200
it's going to make basically

867
00:26:41,910 --> 00:26:43,560
0,420 420,990 990,1110 1110,1380 1380,1650
system calls or file system

868
00:26:43,560 --> 00:26:44,780
0,300 300,840
calls atomic.

869
00:26:47,520 --> 00:26:48,930
0,270 270,480 480,510 510,1020 1200,1410
With that, I mean so

870
00:26:48,930 --> 00:26:50,820
0,210 210,630 660,990 990,1590 1590,1890
if a create file or

871
00:26:50,820 --> 00:26:52,350
0,450 450,630 630,870 870,1410 1410,1530
you can call creator you

872
00:26:52,350 --> 00:26:54,660
0,600 720,1230 1230,1560 1560,1680 1680,2310
alright, basically all the effects

873
00:26:54,690 --> 00:26:56,250
0,240 240,660 660,990 990,1350 1350,1560
of that system call use,

874
00:26:56,250 --> 00:26:57,900
0,180 180,570 570,1230 1290,1470 1470,1650
all appeared altogether when none

875
00:26:57,900 --> 00:26:59,250
0,90 90,300 570,750 750,930 930,1350
of that so that avoids

876
00:26:59,250 --> 00:27:02,370
0,570 660,1530 1530,1950 2340,2640 2640,3120
this problem of a only

877
00:27:02,400 --> 00:27:03,750
0,360 360,810 810,900 900,1050 1050,1350
some subset of the rights

878
00:27:03,750 --> 00:27:05,010
0,270 270,600 600,750 750,870 870,1260
actually showing up and disc.

879
00:27:06,800 --> 00:27:08,660
0,480 660,1140 1140,1350 1350,1710 1710,1860
A second good property, it

880
00:27:08,660 --> 00:27:09,920
0,480 510,810 810,900 900,1140 1140,1260
has a it allows for

881
00:27:09,920 --> 00:27:12,080
0,330 330,930
fast recovery.

882
00:27:12,870 --> 00:27:14,740
0,210 210,570 570,1380
So after reboot.

883
00:27:14,740 --> 00:27:15,850
0,450 450,600 600,720 720,930 930,1110
Turns out we don't actually

884
00:27:15,850 --> 00:27:16,450
0,120 120,210 210,330 330,390 390,600
have to do a lot

885
00:27:16,450 --> 00:27:17,560
0,90 90,540 540,660 660,1020 1020,1110
of work to repair the

886
00:27:17,560 --> 00:27:18,940
0,240 240,660 750,1110 1110,1140 1140,1380
file system, actually a very

887
00:27:18,940 --> 00:27:20,380
0,300 300,480 480,570 570,930
minimal amount of work.

888
00:27:20,730 --> 00:27:21,660
0,450 450,600 600,750 750,870 870,930
Um, and this is in

889
00:27:21,660 --> 00:27:23,520
0,570 570,810 810,990 990,1200 1200,1860
contrast to some other solution

890
00:27:23,520 --> 00:27:24,840
0,210 210,420 420,600 600,960 960,1320
and I'm not talking about

891
00:27:24,840 --> 00:27:26,070
0,180 180,270 270,750 840,1050 1050,1230
which is basically you go

892
00:27:26,070 --> 00:27:27,510
0,150 150,510 510,570 570,930 930,1440
and inspect the file system,

893
00:27:27,720 --> 00:27:28,650
0,420 420,540 540,690 690,870 870,930
maybe you read all the

894
00:27:28,650 --> 00:27:29,760
0,300 300,360 360,450 450,720 720,1110
blocks of the file system

895
00:27:29,760 --> 00:27:30,510
0,150 150,300 300,510 510,630 630,750
or read all the I

896
00:27:30,510 --> 00:27:31,800
0,240 240,690 690,870 870,1080 1080,1290
node blocks, read all the

897
00:27:31,800 --> 00:27:33,510
0,210 210,450 450,900 1200,1500 1500,1710
bit map blocks and so

898
00:27:33,510 --> 00:27:34,740
0,360 360,660 660,870 870,990 990,1230
check out whether the file

899
00:27:34,740 --> 00:27:35,610
0,360 360,450 450,720 720,810 810,870
system is still in the

900
00:27:35,610 --> 00:27:36,900
0,270 270,600 600,690 690,930 930,1290
correct shape and maybe repair

901
00:27:36,900 --> 00:27:37,780
0,420
things.

902
00:27:38,260 --> 00:27:40,090
0,360 540,960 960,1140 1140,1440 1440,1830
A logging has this nice

903
00:27:40,090 --> 00:27:41,590
0,390 390,570 570,900 900,1080 1080,1500
property that actually the recovery

904
00:27:41,590 --> 00:27:42,820
0,90 90,540
is fast.

905
00:27:43,020 --> 00:27:44,070
0,210 210,690 690,870 870,930 930,1050
And finally, it is in

906
00:27:44,070 --> 00:27:45,780
0,690 1020,1320 1320,1470 1470,1590 1590,1710
principle a it can be

907
00:27:45,780 --> 00:27:47,940
0,210 210,450 450,570 570,1350 1830,2160
actually very high performance although

908
00:27:47,940 --> 00:27:50,070
0,90 90,570 960,1170 1170,1530 1800,2130
the one you know what

909
00:27:50,070 --> 00:27:50,670
0,90 90,210 210,270 270,330 330,600
we're going to be looking

910
00:27:50,670 --> 00:27:51,480
0,90 90,150 150,510 510,570 570,810
in the context of xt

911
00:27:51,480 --> 00:27:52,890
0,270 270,390 390,600 600,720 720,1410
six is not high performance,

912
00:27:53,070 --> 00:27:53,880
0,150 150,240 240,360 360,570 600,810
so we're going to look

913
00:27:53,880 --> 00:27:55,320
0,60 60,450 570,990 990,1260 1290,1440
at that next week, we'll

914
00:27:55,320 --> 00:27:56,250
0,210 210,480 480,630 630,720 720,930
see actually how to build

915
00:27:56,250 --> 00:27:57,900
0,30 30,360 360,690 690,960 1110,1650
a logging system that yes.

916
00:27:58,360 --> 00:27:59,860
0,390 390,600 600,840 840,1200 1200,1500
Atomic file system calls faster

917
00:27:59,860 --> 00:28:01,690
0,480 510,750 750,930 930,1470 1470,1830
recovery in high performance today,

918
00:28:01,690 --> 00:28:02,230
0,120 120,240 240,300 300,390 390,540
we're going to be just

919
00:28:02,230 --> 00:28:03,190
0,390 390,450 450,540 540,810 810,960
focusing on the first year.

920
00:28:05,560 --> 00:28:06,600
0,720
Okay.

921
00:28:06,780 --> 00:28:08,880
0,180 180,750 750,1290 1320,1530 1530,2100
The basic idea of logging

922
00:28:08,910 --> 00:28:11,120
0,510 510,690 690,1680
is actually straightforward.

923
00:28:11,330 --> 00:28:13,310
0,690 900,1380 1380,1500 1500,1860 1860,1980
Um, and so basically what

924
00:28:13,310 --> 00:28:14,180
0,90 90,270 270,360 360,480 480,870
you do is you divide

925
00:28:14,180 --> 00:28:16,500
0,420 600,960 960,1170 1170,1800
this into two pieces.

926
00:28:16,590 --> 00:28:18,450
0,270 270,540 540,660 660,1410 1530,1860
It runs the log once

927
00:28:18,450 --> 00:28:19,940
0,120 120,360 360,900
the file system.

928
00:28:20,600 --> 00:28:21,530
0,240 240,360 360,600 600,750 750,930
If a system might be

929
00:28:21,560 --> 00:28:23,320
0,180 180,540 540,1200
much bigger blog.

930
00:28:23,580 --> 00:28:26,850
0,510 540,1050 1230,1920 2310,3030 3060,3270
Um, and when, um you

931
00:28:26,850 --> 00:28:27,720
0,150 150,210 210,510 510,600 600,870
need to update the file

932
00:28:27,720 --> 00:28:29,520
0,330 330,540 540,1140 1170,1380 1380,1800
system, so update let's say

933
00:28:29,520 --> 00:28:31,530
0,180 180,630 630,840 840,1230 1230,2010
a walk {33 -} aura

934
00:28:31,530 --> 00:28:32,820
0,360 360,450 450,630 630,870 870,1290
update the bit map block.

935
00:28:33,360 --> 00:28:34,410
0,210 210,480 480,870 870,990 990,1050
We're actually not going to

936
00:28:34,410 --> 00:28:36,210
0,570 600,870 870,1110 1110,1410 1410,1800
update the file system blocks

937
00:28:36,210 --> 00:28:37,800
0,300 480,840 840,1050 1050,1350 1350,1590
so we're not going to

938
00:28:37,800 --> 00:28:39,450
0,330 330,510 510,750 750,1140 1140,1650
bid map block directly, instead

939
00:28:39,480 --> 00:28:40,500
0,120 120,510 510,660 660,840 840,1020
the only thing we're gonna

940
00:28:40,500 --> 00:28:42,240
0,210 210,300 300,420 420,840 1140,1740
do on the right is

941
00:28:42,540 --> 00:28:44,520
0,180 180,570 570,960 1110,1860 1860,1980
so here's our memory we

942
00:28:44,520 --> 00:28:45,660
0,120 120,150 150,450 450,540 540,1140
have a block in memory

943
00:28:45,960 --> 00:28:46,650
0,180 180,240 240,420 420,510 510,690
is to say the bit

944
00:28:46,650 --> 00:28:47,900
0,210 210,750
map block.

945
00:28:48,270 --> 00:28:50,160
0,120 120,1020 1380,1530 1530,1800 1800,1890
It's 45 and instead of

946
00:28:50,160 --> 00:28:51,480
0,330 330,450 450,570 570,840 840,1320
writing at two forty five

947
00:28:51,480 --> 00:28:52,440
0,210 210,330 330,720 720,870 870,960
where we normally would have

948
00:28:52,440 --> 00:28:53,640
0,390 510,780 780,900 900,1050 1050,1200
done what we're gonna do

949
00:28:53,640 --> 00:28:54,510
0,120 120,330 330,450 450,600 600,870
is actually going to write

950
00:28:54,510 --> 00:28:56,100
0,330 330,450 450,930 1230,1470 1470,1590
into the law we're going

951
00:28:56,100 --> 00:28:57,270
0,60 60,270 270,360 360,810 990,1170
to stick it here and

952
00:28:57,270 --> 00:28:58,890
0,540 540,690 690,1170 1170,1440 1440,1620
remember that definitely should go

953
00:28:58,890 --> 00:29:00,260
0,120 120,840
to 45.

954
00:29:01,160 --> 00:29:02,060
0,120 120,330 330,480 480,570 570,900
We will put it there.

955
00:29:02,760 --> 00:29:03,300
0,120 120,180 180,270 270,450 450,540
And we do that with

956
00:29:03,300 --> 00:29:04,230
0,150 150,270 270,420 420,690 690,930
all the other rights too,

957
00:29:04,260 --> 00:29:06,270
0,210 210,300 300,690 690,1470 1680,2010
so for example boudoir I

958
00:29:06,270 --> 00:29:09,240
0,570 570,1680 1680,2190 2340,2760 2760,2970
note block, there was like

959
00:29:09,240 --> 00:29:11,010
0,240 240,900 900,1200 1200,1320 1320,1770
maybe {33 -} I think

960
00:29:11,040 --> 00:29:12,750
0,180 180,210 210,510 510,1110 1410,1710
if I remember correctly and

961
00:29:12,750 --> 00:29:13,710
0,210 210,390 390,480 480,600 600,960
we'll stick it in there

962
00:29:13,770 --> 00:29:15,570
0,510 660,780 780,1140 1170,1590 1590,1800
and you know, remember that

963
00:29:15,570 --> 00:29:16,200
0,240 240,360 360,420 420,540 540,630
actually has to {go -}

964
00:29:16,200 --> 00:29:17,180
0,240 240,510
to 33.

965
00:29:18,320 --> 00:29:19,670
0,450 450,750 750,1080 1080,1260 1260,1350
Um, so basically what we

966
00:29:19,670 --> 00:29:21,380
0,300 300,600 600,990 990,1260 1260,1710
do any right is first

967
00:29:21,380 --> 00:29:22,600
0,570
walked.

968
00:29:24,660 --> 00:29:25,740
0,240 270,420 420,570 570,870 870,1080
And so we don't write

969
00:29:25,740 --> 00:29:27,030
0,330 330,450 450,540 540,780 780,1290
directly to the home location

970
00:29:27,030 --> 00:29:27,810
0,90 90,180 180,570 570,690 690,780
of the block, but we

971
00:29:27,810 --> 00:29:29,370
0,300 300,630 630,720 720,990 990,1560
just put it always a

972
00:29:29,490 --> 00:29:30,560
0,480
law.

973
00:29:30,930 --> 00:29:32,130
0,180 180,240 240,420 420,870 900,1200
Then, at some point when

974
00:29:32,130 --> 00:29:33,570
0,60 60,270 270,690 690,1170 1170,1440
the file system operation is

975
00:29:33,630 --> 00:29:35,520
0,510 840,1260 1260,1620 1650,1770 1770,1890
done example as you know

976
00:29:35,520 --> 00:29:36,900
0,210 210,570 570,840 840,1200 1200,1380
these four five ranks that

977
00:29:36,900 --> 00:29:37,710
0,90 90,270 270,360 360,450 450,810
we saw in the previous

978
00:29:37,710 --> 00:29:39,540
0,510 840,1170 1170,1290 1290,1380 1380,1830
slides are in the log,

979
00:29:39,570 --> 00:29:41,240
0,150 150,420 420,540 540,1140
we commit the operation.

980
00:29:44,830 --> 00:29:46,030
0,510 510,660 660,750 750,1050 1050,1200
Basically what it means is

981
00:29:46,030 --> 00:29:47,470
0,360 360,450 450,540 540,1110 1230,1440
somewhere in the log, we

982
00:29:47,470 --> 00:29:49,480
0,150 150,750 750,930 930,1470 1890,2010
just record a record you

983
00:29:49,480 --> 00:29:50,440
0,180 180,300 300,330 330,570 570,960
know in a fixed location

984
00:29:50,440 --> 00:29:51,940
0,120 120,420 420,690 690,900 900,1500
that basically says okay, well

985
00:29:52,210 --> 00:29:53,230
0,120 120,210 210,360 360,780 780,1020
you know there are like

986
00:29:53,230 --> 00:29:55,450
0,510 510,1140 1410,1590 1590,1680 1680,2220
five blocks in the block,

987
00:29:55,660 --> 00:29:57,070
0,330 330,690 690,1110 1110,1260 1260,1410
and that is you know

988
00:29:57,070 --> 00:29:59,260
0,1140 1170,1650 1650,1860 1860,1950 1950,2190
the long set of lock

989
00:29:59,260 --> 00:30:00,200
0,60 60,540
the rights.

990
00:30:01,720 --> 00:30:02,830
0,120 120,540 570,690 690,750 750,1110
And then you know when

991
00:30:02,830 --> 00:30:04,600
0,120 120,330 330,660 660,1230 1290,1770
we have all the rights

992
00:30:04,600 --> 00:30:06,430
0,600 600,810 810,1320 1350,1650 1650,1830
stable on disk, we're going

993
00:30:06,430 --> 00:30:07,900
0,60 60,270 270,840 1080,1290 1290,1470
to actually install it was

994
00:30:07,900 --> 00:30:09,780
0,240 240,330 330,900 900,1410
called the installation phase.

995
00:30:10,470 --> 00:30:11,460
0,210 210,360 360,510 510,720 720,990
And really what that means

996
00:30:11,460 --> 00:30:13,410
0,420 510,660 660,1020 1050,1830 1860,1950
is we're gonna move you

997
00:30:13,410 --> 00:30:14,370
0,120 120,360 360,720 720,870 870,960
know these logs from the

998
00:30:14,370 --> 00:30:15,630
0,390 390,480 480,630 630,810 810,1260
log to their home location

999
00:30:15,630 --> 00:30:16,440
0,180 180,270 270,480 480,630 630,810
so we know this one

1000
00:30:16,440 --> 00:30:17,520
0,180 180,240 240,330 330,450 450,1080
has to go to 45,

1001
00:30:17,520 --> 00:30:18,060
0,120 120,240 240,390 390,450 450,540
so we put it at

1002
00:30:18,060 --> 00:30:19,200
0,630 630,780 780,960 960,1080 1080,1140
45, this one has to

1003
00:30:19,200 --> 00:30:20,850
0,90 90,210 210,480 480,960 1050,1650
go to {33 -} reported

1004
00:30:20,850 --> 00:30:22,700
0,120 120,660 690,990 990,1410
to thirty-three etc etc.

1005
00:30:23,420 --> 00:30:24,710
0,300 300,540 540,660 660,1110 1140,1290
And once we're done, you

1006
00:30:24,710 --> 00:30:25,640
0,120 120,450 450,540 540,660 660,930
know basically we can clean

1007
00:30:25,640 --> 00:30:27,350
0,90 90,720 1050,1320 1320,1650 1650,1710
the log and cleaning the

1008
00:30:27,350 --> 00:30:28,420
0,570
log.

1009
00:30:29,190 --> 00:30:31,200
0,570 660,1170 1170,1290 1290,1920 1920,2010
Um, basically you're rewriting you

1010
00:30:31,200 --> 00:30:32,670
0,240 270,600 600,870 870,990 990,1470
know basically setting this five

1011
00:30:32,670 --> 00:30:33,760
0,180 180,570
to zero.

1012
00:30:34,460 --> 00:30:36,950
0,240 240,420 420,600 600,1050 1290,2490
And that is a basic

1013
00:30:36,950 --> 00:30:37,900
0,420
plan.

1014
00:30:38,640 --> 00:30:39,570
0,150 150,390 390,480 480,630 630,930
And why is this plane

1015
00:30:39,570 --> 00:30:40,980
0,420 450,810 810,960 960,1140 1140,1410
good, well let's think about

1016
00:30:40,980 --> 00:30:41,760
0,210
it.

1017
00:30:41,820 --> 00:30:43,740
0,300 300,480 480,660 660,1410
Let's say we crash.

1018
00:30:43,740 --> 00:30:45,220
0,420 420,900
Before here.

1019
00:30:45,920 --> 00:30:47,320
0,300 300,450 450,840
What would happen.

1020
00:30:50,900 --> 00:30:52,400
0,120 120,270 270,720 870,1320 1320,1500
So let me hold that

1021
00:30:52,400 --> 00:30:53,570
0,360 390,570 570,690 690,960 960,1170
question, when you actually talk

1022
00:30:53,570 --> 00:30:55,610
0,210 210,420 420,630 630,1260 1530,2040
about one thing before asking

1023
00:30:55,610 --> 00:30:56,640
0,60 60,450
the question.

1024
00:30:57,710 --> 00:30:59,880
0,210 210,360 360,870 900,1680
Let's say we crash.

1025
00:31:00,040 --> 00:31:02,050
0,750 750,1110 1110,1260 1260,1410 1410,2010
Um, and so we reboot

1026
00:31:02,470 --> 00:31:03,880
0,360 360,510 510,600 600,1140 1170,1410
and on the reboot, there's

1027
00:31:03,880 --> 00:31:05,980
0,840 1230,1440 1440,1530 1530,1800 1800,2100
basically what the file system

1028
00:31:05,980 --> 00:31:07,040
0,600
does.

1029
00:31:07,280 --> 00:31:08,120
0,150 150,360 360,450 450,540 540,840
It looks at the commit

1030
00:31:08,120 --> 00:31:09,200
0,510
record.

1031
00:31:09,900 --> 00:31:10,830
0,330 330,480 480,540 540,840 840,930
Sees what the value of

1032
00:31:10,830 --> 00:31:12,660
0,90 90,360 360,720 720,1080 1500,1830
the commit record is even

1033
00:31:12,660 --> 00:31:13,960
0,720
zero.

1034
00:31:14,050 --> 00:31:15,640
0,210 210,420 420,990
You do nothing.

1035
00:31:15,790 --> 00:31:17,700
0,180 180,330 330,630 630,1470
In our simple scheme.

1036
00:31:18,560 --> 00:31:19,880
0,360 360,480 480,630 630,1020 1050,1320
And if it's a bigger

1037
00:31:19,880 --> 00:31:20,990
0,420 420,570 570,870 870,1020 1020,1110
zero we know that there

1038
00:31:20,990 --> 00:31:21,980
0,60 60,450 450,810 810,900 900,990
are basically blocks in the

1039
00:31:21,980 --> 00:31:23,300
0,390 390,570 570,870 870,960 960,1320
log that need to be

1040
00:31:23,300 --> 00:31:24,720
0,300 300,960
actually installed.

1041
00:31:24,720 --> 00:31:26,130
0,270 270,420 420,840 840,1110 1110,1410
And we apparently didn't finish

1042
00:31:26,130 --> 00:31:28,050
0,60 60,810 990,1230 1230,1350 1350,1920
the installation, now we crashed

1043
00:31:28,050 --> 00:31:29,100
0,60 60,150 150,510 510,570 570,1050
you know after the commit,

1044
00:31:29,100 --> 00:31:30,540
0,210 210,570 570,930 930,1020 1020,1440
but before cleaning the log,

1045
00:31:30,750 --> 00:31:32,820
0,150 150,480 480,1080 1110,1500 1500,2070
so basically we {re-install. -}

1046
00:31:37,510 --> 00:31:38,860
0,180 180,420 420,720 720,1230 1230,1350
And after we install we

1047
00:31:38,860 --> 00:31:40,180
0,240 240,330 330,690
clean the water.

1048
00:31:43,990 --> 00:31:45,200
0,720
Okay.

1049
00:31:45,290 --> 00:31:47,540
0,630 990,1260 1260,1680 1680,1800 1800,2250
And this scheme is good

1050
00:31:47,930 --> 00:31:50,300
0,1200 1200,1350 1350,1620 1620,2160 2160,2370
because it actually ensures that

1051
00:31:50,300 --> 00:31:51,170
0,90 90,300 300,480 480,540 540,870
no matter where the crash

1052
00:31:51,170 --> 00:31:53,510
0,570 660,930 930,1380 1380,2100 2100,2340
happens, we're either install all

1053
00:31:53,510 --> 00:31:54,350
0,90 90,390 390,480 480,570 570,840
the blocks of the rights

1054
00:31:54,350 --> 00:31:55,280
0,150 150,270 270,570 570,840 840,930
or we install none of

1055
00:31:55,280 --> 00:31:56,630
0,210 510,750 750,840 840,960 960,1350
them but we were never

1056
00:31:56,630 --> 00:31:58,640
0,930 1020,1500 1500,1620 1620,1890 1890,2010
into we will never end

1057
00:31:58,640 --> 00:31:59,930
0,120 120,210 210,510 510,990 990,1290
up in a situation where

1058
00:31:59,930 --> 00:32:00,950
0,150 150,540 540,810 810,930 930,1020
we installed some of the

1059
00:32:00,950 --> 00:32:02,180
0,450 630,840 840,990 990,1140 1140,1230
rights but not all of

1060
00:32:02,180 --> 00:32:02,780
0,240
them.

1061
00:32:02,950 --> 00:32:04,180
0,270 270,360 360,630 630,1050 1050,1230
Just to see why this

1062
00:32:04,180 --> 00:32:05,110
0,90 90,390 390,570 570,870 870,930
is Stuart let's consider a

1063
00:32:05,110 --> 00:32:06,310
0,210 210,600 600,810 810,1050 1050,1200
couple cases where things could

1064
00:32:06,310 --> 00:32:07,360
0,540
crash.

1065
00:32:07,930 --> 00:32:09,220
0,360 390,600 600,750 750,1110 1110,1290
So things could crash and

1066
00:32:09,220 --> 00:32:10,390
0,270 270,450 450,570 570,930 960,1170
between one and two what

1067
00:32:10,390 --> 00:32:11,440
0,120 120,510
will happen.

1068
00:32:16,660 --> 00:32:17,980
0,360 390,630 630,1020 1020,1110 1110,1320
In what situation do we

1069
00:32:17,980 --> 00:32:19,000
0,180 180,570
end up.

1070
00:32:23,020 --> 00:32:25,090
0,720 720,810 810,1260 1290,1440 1440,2070
Situation in which on recovery,

1071
00:32:25,090 --> 00:32:26,500
0,120 120,270 270,900 900,1200 1200,1410
we do nothing and that's

1072
00:32:26,500 --> 00:32:28,740
0,360 360,990 1020,1560
okay because um.

1073
00:32:28,800 --> 00:32:29,910
0,420 420,600 600,750 750,1020 1020,1110
Nothing has been written to

1074
00:32:29,910 --> 00:32:32,940
0,150 150,390 390,810 1680,2760 2760,3030
the file system exactly so

1075
00:32:32,970 --> 00:32:33,810
0,270 270,450 450,510 510,750 750,840
this is the case where

1076
00:32:33,810 --> 00:32:35,760
0,660 930,1440 1470,1650 1650,1830 1830,1950
basically we we just do

1077
00:32:35,760 --> 00:32:37,230
0,360 510,690 690,930 930,1140 1140,1470
nothing, you know as if

1078
00:32:37,230 --> 00:32:38,550
0,90 90,360 360,690 690,990 990,1320
the system could basically never

1079
00:32:38,550 --> 00:32:40,260
0,480 600,930 930,1260 1260,1320 1320,1710
executed because if the failure

1080
00:32:40,260 --> 00:32:42,270
0,300 300,930 930,1500 1500,1710 1710,2010
happened slightly earlier right before

1081
00:32:42,270 --> 00:32:43,590
0,90 90,330 330,600 600,840 840,1320
the file system calls started.

1082
00:32:44,240 --> 00:32:45,380
0,120 120,210 210,360 360,720 720,1140
And so that's perfectly okay

1083
00:32:45,440 --> 00:32:46,800
0,180 180,810
that's acceptable.

1084
00:32:47,040 --> 00:32:49,020
0,210 210,390 390,930 1050,1770 1770,1980
Okay, what happens, um, if

1085
00:32:49,020 --> 00:32:50,460
0,900
we.

1086
00:32:50,750 --> 00:32:53,180
0,720 720,1020 1020,1920
Crash okay between.

1087
00:32:53,330 --> 00:32:55,730
0,390 390,1050 1110,1650 1650,1800 1800,2400
After committing before being installed.

1088
00:32:58,310 --> 00:32:59,600
0,240 240,330 330,570 570,1140 1140,1290
Then you'll just redo all

1089
00:32:59,600 --> 00:33:00,830
0,150 150,720 720,840 840,1050 1050,1230
the installs so you'll kind

1090
00:33:00,830 --> 00:33:02,270
0,90 90,540 540,630 630,1050 1050,1440
of restore the correct state.

1091
00:33:02,870 --> 00:33:04,430
0,330 360,720 810,1320 1320,1500 1500,1560
Yeah, so exactly, so at

1092
00:33:04,430 --> 00:33:05,480
0,150 150,420 420,660 660,840 840,1050
that point correct oh, we

1093
00:33:05,480 --> 00:33:06,830
0,240 240,360 360,570 570,960 960,1350
have we know there are

1094
00:33:06,830 --> 00:33:08,510
0,240 240,360 360,1140 1140,1410 1410,1680
all the blocks are in

1095
00:33:08,510 --> 00:33:09,620
0,120 120,600 630,750 750,990 990,1110
the log and they'll be

1096
00:33:09,620 --> 00:33:10,910
0,270 270,600 600,870 870,1020 1020,1290
all written because we commit

1097
00:33:10,910 --> 00:33:11,900
0,270 360,510 510,570 570,900 900,990
it so it must be

1098
00:33:11,900 --> 00:33:12,620
0,60 60,360 360,450 450,510 510,720
the case that the whole

1099
00:33:12,620 --> 00:33:14,480
0,240 240,480 480,900 900,1410
file system operation finished.

1100
00:33:14,630 --> 00:33:16,100
0,210 210,330 330,420 420,900 960,1470
So we can basically put

1101
00:33:16,100 --> 00:33:17,120
0,120 120,240 240,390 390,840 840,1020
them in their location where

1102
00:33:17,120 --> 00:33:18,240
0,120 120,270 270,540
they should be.

1103
00:33:18,760 --> 00:33:19,660
0,390 390,510 510,690 690,840 840,900
And then we're all in

1104
00:33:19,660 --> 00:33:20,740
0,390 390,720 720,870 870,990 990,1080
good shape and so in

1105
00:33:20,740 --> 00:33:21,760
0,150 150,480 480,690 690,930 930,1020
this case now all the

1106
00:33:21,760 --> 00:33:23,020
0,360 360,630 630,810 810,1020 1020,1260
file in this case will

1107
00:33:23,020 --> 00:33:24,620
0,150 150,330 330,660 660,990
end up as if.

1108
00:33:24,680 --> 00:33:26,690
0,570 1260,1470 1470,1620 1620,1860 1860,2010
The it is if the

1109
00:33:26,690 --> 00:33:29,090
0,720 720,960 960,1320 1320,1500 1500,2400
file system call actually completely

1110
00:33:29,090 --> 00:33:30,710
0,270 270,540 540,600 600,1110 1170,1620
just before the crash, there's

1111
00:33:30,710 --> 00:33:31,900
0,150 150,690
no difference.

1112
00:33:32,280 --> 00:33:33,440
0,600
Okay.

1113
00:33:33,820 --> 00:33:34,900
0,150 150,330 330,660 660,810 810,1080
So what happens if we

1114
00:33:34,900 --> 00:33:37,120
0,570 600,1230 1230,1770 1800,2040 2040,2220
crash during install or like

1115
00:33:37,120 --> 00:33:38,830
0,660 660,990 990,1320 1320,1620 1620,1710
installer during install before {re-cleaning.

1116
00:33:38,830 --> 00:33:39,900
0,480
-}

1117
00:33:39,930 --> 00:33:41,520
0,120 120,450 450,840 1140,1410 1410,1590
A crash here within this

1118
00:33:41,520 --> 00:33:43,080
0,510 750,930 930,1140 1140,1470 1470,1560
case in this case and

1119
00:33:43,080 --> 00:33:43,740
0,60 60,210 210,330 330,420 420,660
I will do the first

1120
00:33:43,740 --> 00:33:46,380
0,450 810,1200 1200,1590 1590,1980 1980,2640
case, we'll install during installation,

1121
00:33:46,380 --> 00:33:49,200
0,300 300,570 720,1620 1620,2280 2310,2820
or just before install after

1122
00:33:49,380 --> 00:33:51,240
0,510 510,900 900,1320
installing before cleaning.

1123
00:33:51,620 --> 00:33:53,330
0,240 240,630 1020,1290 1290,1470 1470,1710
What, what what, what happened

1124
00:33:53,330 --> 00:33:54,200
0,360
then.

1125
00:33:55,420 --> 00:33:57,440
0,240 240,1440
I'm z.

1126
00:33:58,110 --> 00:33:59,370
0,270 270,660 690,1020 1020,1170 1170,1260
Oh, sorry, um, on the

1127
00:33:59,370 --> 00:34:02,460
0,480 510,1290 1320,2190 2190,2370 2370,3090
next restart, nothing has really

1128
00:34:02,670 --> 00:34:03,720
0,510 510,630 630,900 900,960 960,1050
changed in terms of the

1129
00:34:03,720 --> 00:34:06,090
0,480 480,1230 1410,1620 1620,2190 2220,2370
recovery process and so we're

1130
00:34:06,090 --> 00:34:06,990
0,150 150,270 270,390 390,750 750,900
just going to redo the

1131
00:34:06,990 --> 00:34:08,400
0,390 690,930 930,1050 1050,1110 1110,1410
log we're going to redo

1132
00:34:08,400 --> 00:34:09,180
0,90 90,360 360,570 570,660 660,780
the log again and we're

1133
00:34:09,180 --> 00:34:11,130
0,240 240,690 690,1110 1110,1260 1260,1950
gonna copy, basically the content

1134
00:34:11,190 --> 00:34:12,540
0,540 570,660 660,810 810,990 990,1350
again, you know to the

1135
00:34:12,570 --> 00:34:14,130
0,540 540,780 780,1200 1290,1380 1380,1560
locations where maybe in fact

1136
00:34:14,130 --> 00:34:14,880
0,90 90,240 240,330 330,420 420,750
we might do it multiple

1137
00:34:14,880 --> 00:34:15,780
0,510
times.

1138
00:34:15,970 --> 00:34:17,280
0,150 150,270 270,750
Is that okay.

1139
00:34:24,410 --> 00:34:26,750
0,540 540,1020 1020,1320 1320,1650 1650,2340
Yes, because those are just

1140
00:34:26,840 --> 00:34:28,200
0,870
right.

1141
00:34:28,490 --> 00:34:30,830
0,600 690,1440 1560,2010 2010,2190 2190,2340
And it's they are to

1142
00:34:30,830 --> 00:34:32,060
0,60 60,480 480,870 870,990 990,1230
a specific location that we

1143
00:34:32,090 --> 00:34:33,200
0,570
don't.

1144
00:34:33,200 --> 00:34:34,550
0,450 450,780 780,990 990,1230 1230,1350
Change like it's written in

1145
00:34:34,550 --> 00:34:35,690
0,90 90,450 450,570 570,660 660,1140
the log, so we know

1146
00:34:36,140 --> 00:34:37,430
0,510 540,660 660,840 840,1080 1080,1290
where we should write every

1147
00:34:37,430 --> 00:34:38,520
0,630
time.

1148
00:34:38,670 --> 00:34:39,660
0,240 240,540 540,720 720,870 870,990
Yeah basically every time we

1149
00:34:39,660 --> 00:34:40,710
0,90 90,180 180,450 450,750 750,1050
do the same right correct,

1150
00:34:40,710 --> 00:34:41,970
0,210 210,390 390,600 600,1020 1020,1260
so let's say in block

1151
00:34:41,970 --> 00:34:43,080
0,600 600,660 660,840 840,1050 1050,1110
45, you know there's the

1152
00:34:43,080 --> 00:34:44,540
0,330 330,780
value ten.

1153
00:34:44,570 --> 00:34:45,410
0,270 270,480 480,600 600,660 660,840
And we're going to write

1154
00:34:45,410 --> 00:34:47,210
0,450 450,660 660,1110 1110,1590 1590,1800
ten at location 45 every

1155
00:34:47,210 --> 00:34:48,710
0,360 840,960 960,1080 1080,1410 1410,1500
time and that's exactly what

1156
00:34:48,710 --> 00:34:49,970
0,90 90,210 210,570 660,960 960,1260
it should be and I'm

1157
00:34:49,970 --> 00:34:51,500
0,390 390,570 570,750 750,1050 1050,1530
repeating that right multiple times

1158
00:34:51,530 --> 00:34:52,730
0,330 330,480 480,600 600,750 750,1200
doesn't really do any harm,

1159
00:34:52,760 --> 00:34:53,600
0,330
right.

1160
00:34:54,160 --> 00:34:55,120
0,300 300,390 390,630 630,720 720,960
Because we're writing the same

1161
00:34:55,120 --> 00:34:56,350
0,480 510,750 750,990 990,1140 1140,1230
value that actually should be

1162
00:34:56,350 --> 00:34:57,500
0,180 180,570
there anyway.

1163
00:34:57,720 --> 00:34:59,100
0,150 150,240 240,360 360,720 720,1380
And so it's perfectly fine

1164
00:34:59,100 --> 00:35:00,210
0,180 180,300 300,690 720,960 960,1110
for us to do {re-installation

1165
00:35:00,210 --> 00:35:02,080
0,510 510,870 870,1380
-} multiple times.

1166
00:35:03,440 --> 00:35:04,460
0,150 150,330 330,450 450,630 630,1020
Of course, we shouldn't serve

1167
00:35:04,460 --> 00:35:05,570
0,180 180,390 390,600 600,840 840,1110
any other file system calls

1168
00:35:05,570 --> 00:35:06,320
0,60 60,210 210,510 510,690 690,750
at this particular point of

1169
00:35:06,320 --> 00:35:07,070
0,270 270,360 360,480 480,570 570,750
time, we should do this

1170
00:35:07,070 --> 00:35:08,600
0,660 660,780 780,1200 1200,1260 1260,1530
before we restart the file

1171
00:35:08,600 --> 00:35:11,480
0,480 960,1350 1350,2010 2010,2130 2130,2880
system, but while you know

1172
00:35:11,600 --> 00:35:13,610
0,360 360,810 810,1290 1290,1500 1500,2010
what, during reboot during recovery,

1173
00:35:13,610 --> 00:35:14,150
0,60 60,180 180,270 270,390 390,540
you know we can just

1174
00:35:14,150 --> 00:35:15,400
0,90 90,450 480,840
do this right.

1175
00:35:16,080 --> 00:35:17,070
0,270 270,420 420,510 510,780 780,990
Another way of saying that

1176
00:35:17,070 --> 00:35:18,510
0,120 120,270 270,840 840,930 930,1440
is that installation is basically

1177
00:35:18,510 --> 00:35:19,710
0,300 300,750 780,930 930,1050 1050,1200
idem potent you can just

1178
00:35:19,710 --> 00:35:21,210
0,330 330,420 420,780 780,1020 1020,1500
execute it many many times

1179
00:35:21,450 --> 00:35:22,470
0,180 180,300 300,480 480,540 540,1020
and will have the same

1180
00:35:22,500 --> 00:35:24,060
0,600 600,1080
effect yet.

1181
00:35:25,780 --> 00:35:28,210
0,300 300,720 720,990 990,1470 1860,2430
A question about that, um.

1182
00:35:29,720 --> 00:35:31,250
0,450 450,570 570,1080 1080,1230 1230,1530
Because the interface is just

1183
00:35:31,250 --> 00:35:32,330
0,300 300,450 450,810 810,990 990,1080
read and write, if we

1184
00:35:32,330 --> 00:35:34,430
0,330 330,1140 1230,1560 1560,1950 1950,2100
hadn't append, um, this would

1185
00:35:34,430 --> 00:35:36,860
0,270 270,810 960,1470 1470,1830
not be safe, right.

1186
00:35:36,980 --> 00:35:39,290
0,270 270,540 540,1440 1440,2100 2130,2310
Yeah yeah, this duo you

1187
00:35:39,290 --> 00:35:40,130
0,120 120,330 330,360 360,570 570,840
can make a pen safe

1188
00:35:40,130 --> 00:35:42,350
0,480 480,810 870,1170 1170,1800 1800,2220
to a more fancy logging

1189
00:35:42,350 --> 00:35:43,370
0,360 360,480 480,570 570,720 720,1020
schemes, but for these particular

1190
00:35:43,370 --> 00:35:44,660
0,300 300,750 750,1050 1050,1200 1200,1290
logging scheme, we don't have

1191
00:35:44,660 --> 00:35:45,980
0,90 90,300 300,480 480,750
to worry about that.

1192
00:35:46,620 --> 00:35:47,700
0,120 120,330 330,630 630,810 810,1080
In fact, in some sense,

1193
00:35:47,700 --> 00:35:49,140
0,90 90,510 510,870 870,1140 1140,1440
the appendices file system level

1194
00:35:49,140 --> 00:35:50,640
0,660 750,900 900,960 960,1170 1170,1500
operation and at that level

1195
00:35:50,640 --> 00:35:51,360
0,90 90,210 210,360 360,630 660,720
we can make it to

1196
00:35:51,360 --> 00:35:54,240
0,960 1380,1950 1950,2460 2460,2580 2580,2880
a topic using the logging

1197
00:35:54,240 --> 00:35:55,500
0,240 240,360 360,750
scheme that we're.

1198
00:35:55,870 --> 00:35:57,120
0,180 180,270 270,450 450,720
What we have here.

1199
00:35:58,280 --> 00:35:59,940
0,150 150,510 570,780 780,1080
I see, thank you.

1200
00:35:59,940 --> 00:36:00,960
0,90 90,390 390,480 480,570 570,1020
I also have a question,

1201
00:36:01,560 --> 00:36:02,880
0,450 450,570 570,960 960,1200 1200,1320
what would happen if the

1202
00:36:02,880 --> 00:36:04,920
0,240 240,600 600,1230 1500,1890 1890,2040
file system crashed while you

1203
00:36:04,920 --> 00:36:05,910
0,90 90,480 480,600 600,720 720,990
are committing so you want

1204
00:36:05,910 --> 00:36:08,250
0,390 420,870 870,1350 1350,1890 2190,2340
to execute multiple rights and

1205
00:36:08,250 --> 00:36:09,360
0,120 120,240 240,480 480,900 900,1110
then you only commit like

1206
00:36:09,360 --> 00:36:10,580
0,270 270,390 390,750
half of them.

1207
00:36:11,480 --> 00:36:12,320
0,270 270,480 480,630 630,720 720,840
Yeah OK, so can you

1208
00:36:12,320 --> 00:36:12,980
0,210 210,330 330,360 360,540 540,660
speak up a little bit

1209
00:36:12,980 --> 00:36:14,180
0,210 210,630 630,720 720,1110 1110,1200
more because your volume is

1210
00:36:14,180 --> 00:36:16,190
0,360 450,570 570,780 780,1290 1560,2010
low, oh yeah sorry so

1211
00:36:16,400 --> 00:36:18,380
0,240 240,360 360,720 720,1260 1500,1980
if you wanted to like

1212
00:36:18,380 --> 00:36:20,810
0,420 420,1140 1200,1890 1920,2100 2100,2430
commit multiple rights at once

1213
00:36:20,810 --> 00:36:21,800
0,150 150,360 360,420 420,840 840,990
like in a Tong like

1214
00:36:21,800 --> 00:36:24,410
0,300 330,750 750,1350 1380,1830 1830,2610
wait, but your system crashes

1215
00:36:24,560 --> 00:36:25,700
0,180 180,240 240,570 570,660 660,1140
in the middle of committing

1216
00:36:25,700 --> 00:36:26,810
0,150 150,330 330,600 600,930 930,1110
so you are only able

1217
00:36:26,810 --> 00:36:28,190
0,150 150,510 510,870 870,1290 1290,1380
to commit like half of

1218
00:36:28,190 --> 00:36:30,140
0,90 90,630 780,1590 1590,1710 1710,1950
the rights, what would happen

1219
00:36:30,140 --> 00:36:31,520
0,60 60,270 270,750 930,1170 1170,1380
in that instance a okay

1220
00:36:31,520 --> 00:36:32,810
0,240 240,750 750,810 810,990 990,1290
so there's a very important

1221
00:36:32,810 --> 00:36:33,500
0,180 180,390 390,570 570,630 630,690
point because why do you

1222
00:36:33,500 --> 00:36:34,790
0,150 150,210 210,660 690,960 960,1290
ask the question so first

1223
00:36:34,790 --> 00:36:35,580
0,90 90,480
of all.

1224
00:36:35,640 --> 00:36:38,700
0,720 1080,1650 1680,1920 1920,2460 2790,3060
The the you commit in

1225
00:36:38,700 --> 00:36:40,080
0,300 300,420 420,720 720,1140 1140,1380
writing this commit operation here,

1226
00:36:40,080 --> 00:36:41,610
0,240 240,540 540,750 750,1020 1020,1530
correct this gonna step to

1227
00:36:41,940 --> 00:36:43,140
0,180 180,390 390,750 750,930 930,1200
you only execute dot commit

1228
00:36:43,140 --> 00:36:45,090
0,690 720,1200 1200,1290 1290,1530 1530,1950
operation after you've already logged

1229
00:36:45,090 --> 00:36:46,020
0,180 180,300 300,660 660,810 810,930
all the rights that you

1230
00:36:46,020 --> 00:36:47,670
0,120 120,480 480,600 600,1170 1290,1650
were planning to execute right.

1231
00:36:48,660 --> 00:36:49,710
0,450 480,660 660,750 750,960 960,1050
So at the point you

1232
00:36:49,710 --> 00:36:50,850
0,120 120,180 180,630 780,1020 1020,1140
do to commit all the

1233
00:36:50,850 --> 00:36:51,900
0,300 300,420 420,510 510,600 600,1050
rights are in the log.

1234
00:36:53,320 --> 00:36:54,600
0,270 270,750
And so.

1235
00:36:54,660 --> 00:36:56,610
0,180 180,480 480,900 900,1620 1650,1950
The commit operation itself is

1236
00:36:56,610 --> 00:36:57,930
0,90 90,360 360,870 870,1050 1050,1320
an interesting question what happens

1237
00:36:57,930 --> 00:37:00,210
0,450 690,1170 1290,1590 1590,1740 1740,2280
there so, um the way

1238
00:37:00,210 --> 00:37:01,950
0,540 570,1020 1020,1110 1110,1620 1620,1740
the way I indicated this

1239
00:37:01,950 --> 00:37:03,420
0,90 90,270 270,630 690,1050 1050,1470
on this like commit operation

1240
00:37:03,420 --> 00:37:05,180
0,240 240,300 300,750 750,1260
writes a single block.

1241
00:37:05,210 --> 00:37:06,320
0,210 210,270 270,600 600,990 990,1110
Like a single sector on

1242
00:37:06,320 --> 00:37:07,300
0,90 90,540
the disk.

1243
00:37:07,360 --> 00:37:09,130
0,450 450,570 570,990 990,1620 1620,1770
And the standard assumption that

1244
00:37:09,130 --> 00:37:11,200
0,270 270,720 720,1200 1320,1650 1650,2070
file systems make is not

1245
00:37:11,200 --> 00:37:12,800
0,180 180,1080
a single.

1246
00:37:12,800 --> 00:37:14,510
0,480 480,900 900,990 990,1260 1260,1710
Block right or single sector

1247
00:37:14,510 --> 00:37:16,310
0,390 510,750 750,840 840,1230 1230,1800
right is an atomic operation.

1248
00:37:17,060 --> 00:37:18,740
0,660 660,1020 1050,1320 1320,1470 1470,1680
Meaning that if you write

1249
00:37:18,740 --> 00:37:20,000
0,240 270,390 390,750 750,1110 1110,1260
it the whole sector will

1250
00:37:20,000 --> 00:37:21,170
0,120 120,570 600,990 990,1080 1080,1170
be written none of the

1251
00:37:21,170 --> 00:37:22,160
0,330 330,480 480,570 570,840 840,990
sector will be written so

1252
00:37:22,160 --> 00:37:23,060
0,90 90,330 330,450 450,780 780,900
the sector will never be

1253
00:37:23,060 --> 00:37:24,420
0,270 270,840
written partially.

1254
00:37:24,940 --> 00:37:25,870
0,150 150,270 270,450 450,870 870,930
And so there's always you

1255
00:37:25,870 --> 00:37:27,580
0,270 270,840 840,1020 1020,1410 1410,1710
know clearly you valid data

1256
00:37:27,580 --> 00:37:29,200
0,150 150,330 330,660 660,1110 1410,1620
in that particular sector and

1257
00:37:29,200 --> 00:37:31,270
0,180 180,630 630,1230 1320,1920 1920,2070
so basically this operation that

1258
00:37:31,270 --> 00:37:32,770
0,270 270,750 750,1080 1080,1170 1170,1500
commit operation writing the blog

1259
00:37:32,770 --> 00:37:34,840
0,450 810,1080 1080,1590 1590,2010 2010,2070
header, a is writing the

1260
00:37:34,840 --> 00:37:36,280
0,240 240,510 510,810 930,1170 1170,1440
commit record is the real

1261
00:37:36,280 --> 00:37:38,650
0,270 270,840 1140,1320 1320,1590 1590,2370
commit operation, if that succeeds.

1262
00:37:39,040 --> 00:37:40,420
0,270 270,510 510,930 930,1080 1110,1380
And there's basically a shade

1263
00:37:40,420 --> 00:37:41,560
0,60 60,630 660,810 810,870 870,1140
of five in the commit

1264
00:37:41,560 --> 00:37:42,880
0,450 600,750 750,840 840,960 960,1320
header, you know we know

1265
00:37:42,880 --> 00:37:44,140
0,180 180,270 270,360 360,810 810,1260
that there are five blocks

1266
00:37:44,140 --> 00:37:45,640
0,240 240,750 780,1290 1290,1380 1380,1500
in the log and we

1267
00:37:45,640 --> 00:37:46,870
0,150 150,240 240,750 750,990 990,1230
have to reinstall those five

1268
00:37:46,870 --> 00:37:47,820
0,510
blocks.

1269
00:37:48,600 --> 00:37:50,340
0,390 390,480 480,720 720,1230 1260,1740
If the commit header didn't

1270
00:37:50,340 --> 00:37:52,050
0,180 180,240 240,330 330,840 1200,1710
make it to disk, then

1271
00:37:52,050 --> 00:37:53,550
0,90 90,390 390,720 720,840 840,1500
the value will be zero

1272
00:37:53,940 --> 00:37:54,780
0,240 240,330 330,540 540,720 720,840
and we'll just treat it

1273
00:37:54,780 --> 00:37:55,830
0,240 240,390 390,540 540,870 870,1050
as if that reduction never

1274
00:37:55,830 --> 00:37:56,740
0,420
happened.

1275
00:37:59,010 --> 00:38:00,180
0,300 300,660
Thank you.

1276
00:38:00,300 --> 00:38:02,310
0,210 210,510 510,1140 1170,1830 1830,2010
And the key rule that

1277
00:38:02,310 --> 00:38:03,360
0,120 120,270 270,330 330,690 690,1050
you're sort of hinting at

1278
00:38:03,420 --> 00:38:04,740
0,240 240,720 720,1020 1020,1080 1080,1320
a that has to be

1279
00:38:04,770 --> 00:38:06,540
0,840 930,1290 1290,1380 1380,1620 1620,1770
true, um is something what's

1280
00:38:06,540 --> 00:38:08,430
0,180 180,300 300,690 690,1140 1530,1890
called the right-hand rule which

1281
00:38:08,430 --> 00:38:10,590
0,360 360,720 960,1200 1200,1530 1530,2160
means that a logging system

1282
00:38:10,620 --> 00:38:13,290
0,480 480,960 960,1470 1530,2340 2370,2670
cannot install rights until all

1283
00:38:13,290 --> 00:38:15,750
0,120 120,480 480,930 930,1740 1740,2460
the rights into our in-law.

1284
00:38:20,000 --> 00:38:21,200
0,120 120,450 450,720 720,1020 1020,1200
I need more questions about

1285
00:38:21,200 --> 00:38:22,430
0,120 120,240 240,330 330,780 780,1230
this sort of basic plan.

1286
00:38:28,770 --> 00:38:29,880
0,660
Okay.

1287
00:38:33,270 --> 00:38:34,480
0,690
I'm.

1288
00:38:36,530 --> 00:38:37,600
0,270 270,510
Let's see.

1289
00:38:42,300 --> 00:38:43,770
0,180 180,360 360,600 630,900 900,1470
So what I want to

1290
00:38:44,730 --> 00:38:46,590
0,210 210,270 270,690 690,1230 1320,1860
there are many many different

1291
00:38:46,590 --> 00:38:48,090
0,360 360,480 480,840 840,1320 1320,1500
versions of logging schemes and

1292
00:38:48,090 --> 00:38:49,320
0,180 180,630 630,840 840,1170 1170,1230
I sketched out here a

1293
00:38:49,320 --> 00:38:51,210
0,240 240,570 570,1020 1320,1770 1770,1890
very simple one, um, you

1294
00:38:51,210 --> 00:38:52,530
0,60 60,270 360,780 780,1260 1260,1320
know it's perfectly fine, you

1295
00:38:52,530 --> 00:38:53,820
0,120 120,270 270,630 630,840 840,1290
know their schemes where basically

1296
00:38:53,820 --> 00:38:55,260
0,480 510,930 930,1020 1020,1110 1110,1440
the cleaning of the log

1297
00:38:55,260 --> 00:38:57,540
0,120 120,870 1170,1530 1530,2160 2160,2280
is postponed a installation is

1298
00:38:57,540 --> 00:38:59,670
0,390 390,600 600,1140 1320,1920 1920,2130
postponed until later a but

1299
00:38:59,670 --> 00:39:00,660
0,120 120,330 330,390 390,810 810,990
I'm going to run sort

1300
00:39:00,660 --> 00:39:02,790
0,90 90,390 390,690 690,1440 1500,2130
of this very simple scheme,

1301
00:39:03,000 --> 00:39:04,170
0,120 120,540 540,780 780,1020 1020,1170
and then next week we'll

1302
00:39:04,170 --> 00:39:07,050
0,300 300,540 540,1410 1440,2160 2160,2880
see more sophisticated logging protocols.

1303
00:39:07,480 --> 00:39:08,710
0,210 210,330 330,510 510,780 780,1230
But all those logging protocols,

1304
00:39:08,710 --> 00:39:09,580
0,240 240,420 420,630 630,810 810,870
follow this right ahead to

1305
00:39:09,580 --> 00:39:11,350
0,270 270,600 960,1500 1500,1620 1620,1770
rule that before you're ready

1306
00:39:11,350 --> 00:39:12,610
0,60 60,270 270,330 330,840 1050,1260
to commit to record you

1307
00:39:12,610 --> 00:39:13,540
0,240 240,330 330,480 480,720 720,930
have to make sure that

1308
00:39:13,540 --> 00:39:15,280
0,120 120,270 270,810 900,1470 1470,1740
all the rights are in

1309
00:39:15,280 --> 00:39:16,660
0,300 300,870
the log.

1310
00:39:16,850 --> 00:39:18,100
0,750
Yeah.

1311
00:39:18,950 --> 00:39:19,670
0,180 180,330 330,510 510,540 540,720
But then there's a lot

1312
00:39:19,670 --> 00:39:20,990
0,240 240,540 540,900 900,1140 1140,1320
of within that still there's

1313
00:39:20,990 --> 00:39:22,490
0,90 90,330 330,420 420,1200 1200,1500
a ton of flexibility in

1314
00:39:22,520 --> 00:39:25,220
0,690 690,1110 1110,1590 1590,2010 2010,2700
designing a particular logging protocols

1315
00:39:25,550 --> 00:39:26,760
0,360 360,780
typically halt.

1316
00:39:27,460 --> 00:39:28,600
0,390 480,630 630,840 840,1080 1080,1140
Okay, I'm gonna look a

1317
00:39:28,600 --> 00:39:30,280
0,180 180,870 900,1200 1200,1380 1380,1680
little bit how this then

1318
00:39:30,280 --> 00:39:32,740
0,330 330,900 900,1350 1350,1710 1710,2460
is manifest itself in x86

1319
00:39:32,740 --> 00:39:34,060
0,270 270,510 510,720 720,990 990,1320
you as a case study

1320
00:39:34,060 --> 00:39:34,810
0,90 90,180 180,330 330,510 510,750
and to make things really

1321
00:39:34,810 --> 00:39:35,800
0,480
concrete.

1322
00:39:40,000 --> 00:39:41,260
0,210 210,420 420,540 540,780 780,1260
Okay, so in X six

1323
00:39:41,260 --> 00:39:43,060
0,330 330,480 480,630 990,1560 1560,1800
there's sort of a you're

1324
00:39:43,060 --> 00:39:43,750
0,120 120,180 180,330 330,450 450,690
going to look at to

1325
00:39:43,750 --> 00:39:44,680
0,180 180,240 240,450 450,510 510,930
sort of piece of estate,

1326
00:39:44,680 --> 00:39:45,940
0,120 120,240 240,720 870,990 990,1260
if you will the stuff

1327
00:39:45,940 --> 00:39:47,170
0,120 120,210 210,510 510,720 720,1230
that is actually on disc.

1328
00:39:48,080 --> 00:39:49,670
0,180 180,480 480,1140 1170,1410 1410,1590
And that's you know things

1329
00:39:49,670 --> 00:39:51,160
0,120 120,330 330,420 420,870
that are in memory.

1330
00:39:52,410 --> 00:39:53,660
0,390 390,870
Gettin big.

1331
00:39:55,220 --> 00:39:57,230
0,150 150,480 480,930 930,1170 1170,2010
A memory contents will disappear

1332
00:39:57,230 --> 00:39:58,160
0,360 390,510 510,660 660,810 810,930
on the way we should

1333
00:39:58,160 --> 00:39:59,000
0,180 180,420 420,540 540,690 690,840
think about it is that

1334
00:39:59,000 --> 00:40:01,010
0,420 420,780 780,870 870,1500 1500,2010
in-memory content will disappear on

1335
00:40:01,010 --> 00:40:02,450
0,60 60,510 510,720 720,1020 1020,1440
a crash or power failure.

1336
00:40:04,660 --> 00:40:06,840
0,720 1020,1650
And the.

1337
00:40:07,040 --> 00:40:08,900
0,510 510,630 630,780 780,1260 1260,1860
Structure of the FCC log

1338
00:40:08,930 --> 00:40:10,660
0,360 360,1200
as always.

1339
00:40:10,810 --> 00:40:12,540
0,510 510,1200
Pretty simple.

1340
00:40:12,600 --> 00:40:15,270
0,810 810,1440 1710,1950 1950,2250 2250,2670
Oz actually we have one

1341
00:40:15,270 --> 00:40:16,680
0,330 330,420 420,480 480,1020 1320,1410
block in the beginning the

1342
00:40:16,680 --> 00:40:17,960
0,240 240,750
header block.

1343
00:40:18,020 --> 00:40:19,670
0,180 180,420 420,810 810,1200 1200,1650
And that's basically automate record,

1344
00:40:19,670 --> 00:40:21,240
0,120 120,210 210,360 360,1050
you know it contains.

1345
00:40:21,300 --> 00:40:22,680
0,270 270,690 690,1050 1050,1260 1260,1380
The number n which is

1346
00:40:22,680 --> 00:40:23,640
0,150 150,270 270,510 510,570 570,960
like the number of blocks

1347
00:40:23,640 --> 00:40:24,900
0,90 90,150 150,750 960,1110 1110,1260
in the log and then

1348
00:40:24,900 --> 00:40:26,420
0,150 150,390 390,1020
for each block.

1349
00:40:26,610 --> 00:40:27,720
0,720
Yep.

1350
00:40:28,280 --> 00:40:29,660
0,180 180,510 510,1050 1050,1170 1170,1380
The block number, the home

1351
00:40:29,660 --> 00:40:31,380
0,510 510,600 600,750 750,1200
location of that block.

1352
00:40:32,420 --> 00:40:33,650
0,810 810,900 900,1080 1080,1140 1140,1230
Blocks are going to be

1353
00:40:33,650 --> 00:40:34,820
0,180 180,240 240,660
any of those.

1354
00:40:37,960 --> 00:40:39,370
0,150 150,330 330,960 990,1320 1320,1410
And so, then in the

1355
00:40:39,370 --> 00:40:40,930
0,240 240,840 840,990 990,1440 1440,1560
log itself are basically is

1356
00:40:40,930 --> 00:40:42,820
0,120 120,420 420,990 1020,1470 1470,1890
the data that it belongs

1357
00:40:42,820 --> 00:40:43,810
0,60 60,360 360,660 660,750 750,990
to death, scared to use

1358
00:40:43,810 --> 00:40:45,160
0,90 90,420 420,810
the data off.

1359
00:40:45,160 --> 00:40:47,290
0,540 540,1320 1500,1770 1770,1830 1830,2130
Bn zero here's the data

1360
00:40:47,290 --> 00:40:50,180
0,360 360,1140 1170,1710 1740,2400
of bn, one etc.

1361
00:40:50,210 --> 00:40:52,490
0,450 480,1320 1320,1650 1650,1980 1980,2280
To be n minus one.

1362
00:40:54,460 --> 00:40:55,300
0,180 180,390 390,600 600,720 720,840
So that's what's in the

1363
00:40:55,300 --> 00:40:56,340
0,630
log.

1364
00:40:56,340 --> 00:40:57,630
0,420 420,540 540,990 990,1080 1080,1290
Um, and there's the only

1365
00:40:57,630 --> 00:40:58,260
0,150 150,300 300,450 450,540 540,630
thing that's sort of in

1366
00:40:58,260 --> 00:40:59,280
0,90 90,360 390,570 570,780 780,1020
the law there's nothing more

1367
00:40:59,280 --> 00:41:00,280
0,180 180,420
to it.

1368
00:41:00,600 --> 00:41:01,980
0,240 240,390 390,840 840,1080 1080,1380
Then in memory wherein, while

1369
00:41:01,980 --> 00:41:03,870
0,120 120,330 330,660 660,1170 1530,1890
the file systems running a

1370
00:41:03,870 --> 00:41:05,580
0,240 240,360 360,570 570,1080 1080,1710
there's an in khaki version

1371
00:41:06,000 --> 00:41:07,620
0,630 630,960 960,1080 1080,1170 1170,1620
in-memory version of the header.

1372
00:41:09,390 --> 00:41:11,370
0,510 510,630 630,1080 1080,1440 1440,1980
And it basically has n

1373
00:41:11,400 --> 00:41:13,050
0,480 480,600 600,810 810,1470 1500,1650
and it has array of

1374
00:41:13,050 --> 00:41:14,380
0,300 300,780
block numbers.

1375
00:41:17,740 --> 00:41:18,940
0,150 150,750
It's better.

1376
00:41:19,000 --> 00:41:21,280
0,720 1140,1350 1350,1890 1890,2070 2070,2280
Um, and then no these

1377
00:41:21,280 --> 00:41:24,280
0,270 270,870 1140,2070 2070,2580 2580,3000
black numbers refer to a

1378
00:41:24,280 --> 00:41:25,510
0,330 330,420 420,480 480,930 930,1230
bloc that are sitting in

1379
00:41:25,510 --> 00:41:28,180
0,150 150,630 660,900 900,1500 1800,2670
the data that actually corresponds

1380
00:41:28,180 --> 00:41:29,110
0,90 90,180 180,480 480,780 780,930
to the block numbers that

1381
00:41:29,110 --> 00:41:29,770
0,60 60,240 240,300 300,540 540,660
are sort of sitting in

1382
00:41:29,770 --> 00:41:31,540
0,150 150,660 660,900 900,1410 1470,1770
this in-memory data structure, they

1383
00:41:31,540 --> 00:41:33,160
0,270 270,450 450,750 780,1110 1110,1620
live in the block cache.

1384
00:41:33,820 --> 00:41:35,080
0,390 390,690 720,900 900,1110 1110,1260
Which yeah, but now you're

1385
00:41:35,080 --> 00:41:36,640
0,210 210,600 600,1080
well familiar with.

1386
00:41:36,760 --> 00:41:37,900
0,330 330,540 540,900 900,1050 1050,1140
And so, maybe this is

1387
00:41:37,900 --> 00:41:39,640
0,180 180,450 450,900 900,1080 1080,1740
like block ten is the

1388
00:41:40,120 --> 00:41:41,740
0,690 690,1020 1020,1110 1110,1200 1200,1620
first block in the log

1389
00:41:41,740 --> 00:41:43,210
0,300 450,720 720,990 1200,1410 1410,1470
where let me take a

1390
00:41:43,210 --> 00:41:44,530
0,180 180,450 450,930 930,1170 1170,1320
more concrete example from that

1391
00:41:44,560 --> 00:41:46,000
0,390 390,570 570,750 750,960 960,1440
lines up with our previous

1392
00:41:46,000 --> 00:41:47,260
0,390 390,750 750,930 930,1080 1080,1260
things, maybe this is like

1393
00:41:47,260 --> 00:41:48,640
0,870
45.

1394
00:41:49,440 --> 00:41:50,910
0,360 360,900 900,990 990,1140 1140,1470
And basically you know somewhere

1395
00:41:50,910 --> 00:41:52,470
0,210 210,360 360,540 540,1200 1380,1560
in the in cash, the

1396
00:41:52,470 --> 00:41:54,120
0,330 330,540 540,750 750,1230 1230,1650
block Ash there's course whatever

1397
00:41:54,150 --> 00:41:56,610
0,390 390,660 660,1320 1680,2070 2070,2460
block for 45 years, data,

1398
00:41:56,880 --> 00:41:57,940
0,630
okay.

1399
00:41:58,200 --> 00:41:59,430
0,240 240,360 360,450 450,540 540,1230
That's sort of the structures,

1400
00:41:59,580 --> 00:42:01,900
0,420 420,1080 1080,1770
um that, um.

1401
00:42:03,130 --> 00:42:05,950
0,690 960,1260 1260,1740 1800,2400 2400,2820
The on disk, a in-memory

1402
00:42:05,950 --> 00:42:07,300
0,240 240,510 510,840 840,1140 1140,1350
file system has and on

1403
00:42:07,300 --> 00:42:08,650
0,180 180,450 450,750 750,1320 1320,1350
this file system has a

1404
00:42:08,650 --> 00:42:09,760
0,270 270,570 570,810 810,1020 1020,1110
file system just has the

1405
00:42:09,760 --> 00:42:11,530
0,480 630,780 780,1260 1260,1590 1590,1770
log the in-memory houses, these

1406
00:42:11,530 --> 00:42:13,030
0,270 270,630 630,690 690,960 960,1500
data structures to orca St,

1407
00:42:13,360 --> 00:42:15,040
0,390 390,630 630,900 900,1170 1170,1680
um, these multi write operations

1408
00:42:15,040 --> 00:42:15,550
0,150 150,240 240,360 360,420 420,510
that were going to be

1409
00:42:15,550 --> 00:42:16,340
0,300
doing.

1410
00:42:17,080 --> 00:42:18,220
0,660
Okay.

1411
00:42:20,240 --> 00:42:21,650
0,570 600,1050 1050,1170 1170,1290 1290,1410
So, um, to make this

1412
00:42:21,650 --> 00:42:23,360
0,30 30,240 240,390 390,990 1140,1710
a little more concrete oz

1413
00:42:23,360 --> 00:42:24,620
0,240 240,390 390,540 540,720 720,1260
let's look at some code.

1414
00:42:25,740 --> 00:42:27,210
0,450 510,900 900,1080 1080,1230 1230,1470
Then a that will help

1415
00:42:27,210 --> 00:42:30,030
0,150 150,1080 1380,2010 2010,2370 2370,2820
us understand how everything works.

1416
00:42:33,580 --> 00:42:35,100
0,210 210,390 390,810 960,1440
So let me um.

1417
00:42:36,080 --> 00:42:38,120
0,330 330,600 630,900 900,1560
Pull up some code.

1418
00:42:38,350 --> 00:42:39,190
0,150 150,330 330,480 480,600 600,840
Okay, let me put this

1419
00:42:39,220 --> 00:42:40,500
0,300 300,450 450,750
next to it.

1420
00:42:40,890 --> 00:42:42,960
0,300 330,570 570,870 870,1470 1620,2070
We keep that picture, um

1421
00:42:42,960 --> 00:42:43,890
0,180 180,330 330,450 450,660 690,930
so that we can look

1422
00:42:43,890 --> 00:42:45,420
0,240 240,360 360,870 990,1350 1350,1530
at if we want to

1423
00:42:45,420 --> 00:42:46,080
0,120 120,180 180,300 300,540 540,660
or I can point to

1424
00:42:46,080 --> 00:42:48,000
0,270 810,1410
it, um.

1425
00:42:48,490 --> 00:42:49,600
0,150 150,420 420,540 540,660 660,1110
Can everybody see my coat.

1426
00:42:54,410 --> 00:42:56,450
0,360 360,540 540,1140 1140,1320 1320,2040
Somebody ever confirmed the finger

1427
00:42:56,990 --> 00:42:58,880
0,390 390,930 1140,1440 1440,1560 1560,1890
next window, we can see

1428
00:42:59,090 --> 00:43:00,200
0,360 360,570
it good.

1429
00:43:00,380 --> 00:43:01,820
0,120 120,180 180,330 330,900
Is it big enough.

1430
00:43:04,080 --> 00:43:05,790
0,210 210,390 390,570 570,1110 1440,1710
I think it's good, okay,

1431
00:43:05,790 --> 00:43:07,140
0,240 240,480 480,780
that looks good.

1432
00:43:07,140 --> 00:43:08,440
0,420 420,660
Thank you.

1433
00:43:08,440 --> 00:43:10,870
0,240 240,690 810,1020 1020,1560 1560,2430
Okay, so let's start with

1434
00:43:11,230 --> 00:43:12,520
0,210 210,510 510,810 810,1110 1110,1290
you I I talked about

1435
00:43:12,520 --> 00:43:14,770
0,630 630,840 840,1350 1620,2130 2130,2250
transactions where you um, you

1436
00:43:14,770 --> 00:43:15,820
0,90 90,210 210,540 540,840 900,1050
know the fact that you

1437
00:43:15,820 --> 00:43:18,010
0,510 1020,1290 1290,1440 1440,1650 1650,2190
know we should not commit

1438
00:43:18,100 --> 00:43:19,690
0,930 960,1230 1230,1320 1320,1440 1440,1590
until we should not try

1439
00:43:19,690 --> 00:43:20,560
0,60 60,270 270,300 300,630 630,870
to commit a writer until

1440
00:43:20,560 --> 00:43:21,610
0,270 270,390 390,630 630,720 720,1050
all the REITs have done.

1441
00:43:22,420 --> 00:43:24,130
0,690 720,870 870,1080 1080,1470 1470,1710
And so this means that

1442
00:43:24,130 --> 00:43:25,720
0,180 180,450 450,690 690,930 930,1590
you should file system operations,

1443
00:43:25,720 --> 00:43:27,640
0,390 420,930 930,1500 1500,1830 1830,1920
a must indicates what the

1444
00:43:27,640 --> 00:43:29,050
0,300 300,390 390,930 930,1140 1140,1410
beginning of transaction is and

1445
00:43:29,050 --> 00:43:29,860
0,390 390,450 450,570 570,720 720,810
particularly at the end of

1446
00:43:29,860 --> 00:43:31,160
0,60 60,570 570,870
the transaction is.

1447
00:43:31,340 --> 00:43:32,930
0,600 630,840 840,1110 1110,1290 1290,1590
And the way that happens

1448
00:43:32,930 --> 00:43:34,070
0,60 60,270 270,390 390,840 840,1140
in next few sixes that

1449
00:43:34,070 --> 00:43:36,060
0,210 210,480 480,810 810,1440
every file system call.

1450
00:43:36,640 --> 00:43:38,590
0,330 330,510 510,1200 1230,1470 1470,1950
Years now open a corresponds

1451
00:43:38,590 --> 00:43:40,300
0,120 120,480 480,1080 1140,1590 1590,1710
to create basically starts with

1452
00:43:40,300 --> 00:43:42,430
0,300 300,660 720,990 1020,1650 1650,2130
begin up and basically indicates

1453
00:43:42,430 --> 00:43:43,090
0,180 180,360 360,450 450,600 600,660
like okay I want to

1454
00:43:43,090 --> 00:43:44,500
0,210 210,270 270,960 1170,1380 1380,1410
start a transaction and I

1455
00:43:44,500 --> 00:43:45,760
0,240 240,510 510,630 630,1020 1020,1260
want all the block writes

1456
00:43:45,760 --> 00:43:46,630
0,150 150,240 240,330 330,540 540,870
that I've been doing between

1457
00:43:46,630 --> 00:43:48,250
0,240 240,630 960,1170 1170,1350 1350,1620
begin up and end up

1458
00:43:48,250 --> 00:43:49,240
0,240 240,330 330,720 720,840 840,990
which is basically the end

1459
00:43:49,240 --> 00:43:50,860
0,240 270,390 390,1020 1380,1500 1500,1620
of the transaction to be

1460
00:43:50,860 --> 00:43:52,690
0,540 630,1200 1200,1590 1590,1740 1740,1830
atomic meaning they should be

1461
00:43:52,690 --> 00:43:53,560
0,150 150,540 540,600 600,810 810,870
all applied to none of

1462
00:43:53,560 --> 00:43:54,820
0,180 180,300 300,840
them she replied.

1463
00:43:54,940 --> 00:43:57,130
0,480 870,1110 1110,1560 1560,1860 1860,2190
Okay, so every file system

1464
00:43:57,130 --> 00:43:59,200
0,810 840,1530
called a.

1465
00:43:59,260 --> 00:44:01,060
0,360 360,810 840,1080 1080,1260 1260,1800
X six has that structure

1466
00:44:01,120 --> 00:44:02,950
0,690 690,810 810,1050 1050,1410 1440,1830
basically has been up, then

1467
00:44:02,950 --> 00:44:04,180
0,270 300,630 630,720 720,1140 1140,1230
the code and implements the

1468
00:44:04,180 --> 00:44:05,260
0,240 240,480 480,840 840,930 930,1080
file system call and then

1469
00:44:05,260 --> 00:44:06,360
0,210 210,570
end up.

1470
00:44:07,080 --> 00:44:07,980
0,240 240,420 420,540 540,780 780,900
And that end up is

1471
00:44:07,980 --> 00:44:09,120
0,300 300,390 390,450 450,720 720,1140
basically where the commit operation

1472
00:44:09,120 --> 00:44:10,160
0,570
happens.

1473
00:44:10,430 --> 00:44:12,320
0,450 450,630 630,1080 1080,1620 1620,1890
Um, so basically between beginning

1474
00:44:12,320 --> 00:44:14,540
0,330 330,480 480,900 1350,1860 1860,2220
and end up on disk

1475
00:44:14,570 --> 00:44:15,980
0,240 240,720 720,960 960,1290 1290,1410
or in-memory data structure should

1476
00:44:15,980 --> 00:44:17,840
0,180 180,750 750,1230 1230,1470 1470,1860
be updated whenever the in-memory

1477
00:44:17,840 --> 00:44:19,100
0,270 270,390 390,540 540,1140 1140,1260
log may be updated the

1478
00:44:19,100 --> 00:44:21,020
0,480 480,660 660,750 750,1350 1620,1920
broadcast might be updated, um,

1479
00:44:21,020 --> 00:44:23,330
0,150 150,510 510,900 900,1560 1770,2310
but nothing really happens until

1480
00:44:23,330 --> 00:44:24,770
0,270 270,690 900,1050 1050,1200 1200,1440
end up and then end

1481
00:44:24,770 --> 00:44:26,210
0,180 180,540 540,660 660,1020 1020,1440
up time, we're basically going

1482
00:44:26,210 --> 00:44:27,380
0,90 120,540 540,750 750,1020 1020,1170
to put things into the

1483
00:44:27,380 --> 00:44:29,720
0,510 750,900 900,1230 1230,2280 2310,2340
log and then we are

1484
00:44:29,870 --> 00:44:31,160
0,450 450,660 660,870 870,1110 1110,1290
done with putting everything in

1485
00:44:31,160 --> 00:44:32,480
0,60 60,510 600,810 810,1230 1230,1320
the log will actually you

1486
00:44:32,480 --> 00:44:33,440
0,120 120,270 270,360 360,600 600,960
know right to commit record

1487
00:44:33,440 --> 00:44:35,020
0,270 480,840 840,1260
or log header.

1488
00:44:36,030 --> 00:44:37,000
0,600
Okay.

1489
00:44:37,180 --> 00:44:38,720
0,150 150,390 390,390
So let's um.

1490
00:44:39,280 --> 00:44:40,300
0,300 330,540 540,630 630,930 930,1020
So what is interesting of

1491
00:44:40,300 --> 00:44:41,590
0,270 270,450 450,810 810,930 930,1290
course what happens is every

1492
00:44:41,590 --> 00:44:43,210
0,360 360,750 750,1320 1320,1530 1530,1620
right correctly whenever one of

1493
00:44:43,210 --> 00:44:44,590
0,150 150,390 390,630 630,990 990,1380
these file system calls does

1494
00:44:44,590 --> 00:44:47,470
0,360 360,600 600,1050 1380,2070 2400,2880
a disk right, um, you

1495
00:44:47,470 --> 00:44:49,060
0,390 390,630 630,840 840,1140 1170,1590
know something must happen, so

1496
00:44:49,090 --> 00:44:49,870
0,120 120,210 210,330 330,690 690,780
if we go back for

1497
00:44:49,870 --> 00:44:52,870
0,360 360,810 1140,2220 2220,2460 2460,3000
example to fs dot, see

1498
00:44:52,870 --> 00:44:54,580
0,90 90,420 420,540 540,1260
you look at alec.

1499
00:44:54,580 --> 00:44:56,500
0,750 750,960 960,1230 1230,1680 1680,1920
A I look basically what

1500
00:44:56,500 --> 00:44:57,970
0,90 90,480 480,600 600,900 900,1470
it calls it doesn't call

1501
00:44:58,000 --> 00:45:00,820
0,330 330,840 840,1530 1830,2490 2640,2820
be right directly, but it

1502
00:45:00,820 --> 00:45:03,160
0,210 210,570 570,1500 1560,1950 1950,2340
actually calls a log right.

1503
00:45:04,250 --> 00:45:05,120
0,390 390,540 540,660 660,810 810,870
And so we're going to

1504
00:45:05,120 --> 00:45:06,320
0,150 150,330 330,570 570,780 780,1200
see what log right does

1505
00:45:06,590 --> 00:45:08,510
0,450 450,660 660,930 1140,1590 1590,1920
log ride is basically a

1506
00:45:08,510 --> 00:45:10,430
0,330 330,750 750,900 900,1320 1320,1920
function implemented by logging system

1507
00:45:10,610 --> 00:45:12,350
0,150 150,480 480,990 1020,1650 1650,1740
and every rate, basically a

1508
00:45:12,350 --> 00:45:13,700
0,180 180,480 480,750 750,1020 1020,1350
file system called us between

1509
00:45:13,700 --> 00:45:15,410
0,330 330,540 540,690 690,1020 1290,1710
beginning and end up always

1510
00:45:15,410 --> 00:45:17,100
0,210 210,510 540,840 840,1230
goes through log, right.

1511
00:45:23,350 --> 00:45:24,640
0,180 180,420 420,660 660,1140 1140,1290
So here's log right and

1512
00:45:24,640 --> 00:45:27,280
0,210 210,420 420,750 750,1860 1890,2640
log right actually reasonable, a

1513
00:45:27,340 --> 00:45:29,900
0,870 1230,1980
straightforward, um.

1514
00:45:29,900 --> 00:45:31,400
0,720 720,840 840,990 990,1320 1320,1500
Yeah you know we've written

1515
00:45:31,400 --> 00:45:33,710
0,90 90,690 900,1530 1530,1770 1770,2310
the block, um in the

1516
00:45:33,740 --> 00:45:36,050
0,420 420,960 990,1170 1170,1680 1680,2310
block cache so somewhere basically

1517
00:45:36,050 --> 00:45:37,310
0,570 570,840 840,990 990,1080 1080,1260
45, maybe this is like

1518
00:45:37,310 --> 00:45:39,020
0,90 90,300 300,390 390,1170 1410,1710
the right to 45, we've

1519
00:45:39,020 --> 00:45:41,300
0,510 510,600 600,720 720,1470 1590,2280
updated you know 45 a

1520
00:45:41,300 --> 00:45:43,070
0,450 540,660 660,840 840,1290 1440,1770
in the wa cash, now

1521
00:45:43,070 --> 00:45:44,360
0,90 90,450 450,690 690,750 750,1290
we basically learn a cork

1522
00:45:44,360 --> 00:45:45,890
0,270 270,390 390,870 870,1080 1080,1530
in the in-memory data structures

1523
00:45:45,890 --> 00:45:47,150
0,240 240,480 480,720 720,960 960,1260
that at some point later

1524
00:45:47,150 --> 00:45:48,500
0,90 90,390 390,840 1050,1260 1260,1350
at commit point we were

1525
00:45:48,500 --> 00:45:49,400
0,120 120,240 240,450 450,600 600,900
able to write this blog

1526
00:45:49,400 --> 00:45:51,080
0,540 690,930 930,1320
into a law.

1527
00:45:51,430 --> 00:45:53,140
0,480 480,780 780,930 930,1170 1200,1710
And so you know basically

1528
00:45:53,140 --> 00:45:54,040
0,120 120,240 240,360 360,630 630,900
you know the code is

1529
00:45:54,280 --> 00:45:54,900
0,450
oops.

1530
00:45:55,480 --> 00:45:57,040
0,120 120,330 330,420 420,720 720,1560
The coach is reasonably straightforward,

1531
00:45:57,340 --> 00:45:59,710
0,570 570,1050 1110,1860 1860,1980 1980,2370
um, it acquired a lock

1532
00:45:59,710 --> 00:46:02,170
0,210 210,330 330,930 1140,2040 2040,2460
on the header and basically

1533
00:46:02,170 --> 00:46:03,800
0,600 600,720 720,1140
updates the header.

1534
00:46:04,100 --> 00:46:06,500
0,480 480,1050 1080,1560 1560,1710 1710,2400
Um, in particular, what does

1535
00:46:06,500 --> 00:46:07,730
0,270 270,840 870,960 960,1110 1110,1230
goes through you know the

1536
00:46:07,730 --> 00:46:10,400
0,0 1170,1770 1770,2160 2160,2430 2430,2670
um, uh, updates, and when

1537
00:46:10,400 --> 00:46:11,240
0,300 330,420 420,630 630,750 750,840
actually the first thing it

1538
00:46:11,240 --> 00:46:12,740
0,360 360,510 510,750 750,1320 1320,1500
does it actually sees if

1539
00:46:12,740 --> 00:46:13,880
0,180 180,540 540,630 630,1020 1020,1140
there's already a copy of

1540
00:46:13,880 --> 00:46:15,920
0,750 780,1050 1050,1530
45 in the.

1541
00:46:16,420 --> 00:46:18,310
0,180 180,660 660,750 750,1140 1140,1890
If 45 is already recorded

1542
00:46:18,310 --> 00:46:19,420
0,150 150,360 360,690 690,840 840,1110
as being having to return

1543
00:46:19,420 --> 00:46:20,950
0,300 300,570 570,990 1320,1440 1440,1530
to return to and if

1544
00:46:20,950 --> 00:46:22,090
0,240 240,300 300,600 600,840 840,1140
that's the case nothing has

1545
00:46:22,090 --> 00:46:23,230
0,90 90,180 180,450 450,720 720,1140
to be done, because 45

1546
00:46:23,230 --> 00:46:24,600
0,150 150,270 270,480 480,810
will be written to.

1547
00:46:24,750 --> 00:46:26,880
0,540 540,810 810,930 930,1350 1620,2130
Um, and so we're sometimes

1548
00:46:26,880 --> 00:46:28,580
0,210 210,480 480,1140
called lock absorption.

1549
00:46:28,870 --> 00:46:30,160
0,720
HMM.

1550
00:46:30,980 --> 00:46:32,870
0,540 570,720 720,1140 1170,1440 1440,1890
If you know block 45

1551
00:46:32,870 --> 00:46:34,970
0,120 120,720 750,1050 1050,1560 1680,2100
is not in the array

1552
00:46:34,970 --> 00:46:36,410
0,270 270,360 360,630 630,780 780,1440
yet or not in the.

1553
00:46:37,250 --> 00:46:38,300
0,300 300,570 570,630 630,990 990,1050
The list of blocks or

1554
00:46:38,300 --> 00:46:39,110
0,60 60,300 300,390 390,690 690,810
the array of blocks that

1555
00:46:39,110 --> 00:46:40,220
0,210 210,270 270,630 660,1020 1020,1110
needs to be written to

1556
00:46:40,220 --> 00:46:41,720
0,420 510,780 780,1200 1200,1290 1290,1500
disk, then basically you know

1557
00:46:41,720 --> 00:46:43,340
0,270 270,870 960,1260 1260,1530 1530,1620
the living, this belief a

1558
00:46:43,340 --> 00:46:44,900
0,150 150,240 240,480 480,930 1140,1560
piece of code does is

1559
00:46:44,900 --> 00:46:46,910
0,300 300,570 570,750 750,1200 1350,2010
basically bump up and stick

1560
00:46:46,910 --> 00:46:48,050
0,300 300,570 570,840 840,960 960,1140
that block number that needs

1561
00:46:48,050 --> 00:46:49,760
0,60 60,210 210,660 660,1230 1230,1710
to be written into the

1562
00:46:49,820 --> 00:46:51,410
0,420 420,780 840,1140 1140,1350 1350,1590
next entry or into that

1563
00:46:51,410 --> 00:46:52,160
0,300
entry.

1564
00:46:53,210 --> 00:46:54,050
0,270 270,330 330,540 540,720 720,840
Then the only other thing

1565
00:46:54,050 --> 00:46:54,860
0,120 120,390 390,480 480,630 630,810
it does and I'll talk

1566
00:46:54,860 --> 00:46:56,360
0,180 180,330 330,870 1110,1290 1290,1500
about this later it will

1567
00:46:56,360 --> 00:46:59,000
0,630 780,1620 1650,2250 2280,2520 2520,2640
ping the block in the

1568
00:46:59,000 --> 00:47:01,550
0,450 450,1020 1260,1950 1980,2400 2400,2550
buffer cache and let me

1569
00:47:01,550 --> 00:47:03,620
0,390 390,870 870,1320 1320,1590 1590,2070
postpone why a little while

1570
00:47:03,650 --> 00:47:04,610
0,450 450,480 480,630 630,720 720,960
but I will come back

1571
00:47:04,610 --> 00:47:05,680
0,60 60,240 240,570
to that later.

1572
00:47:06,560 --> 00:47:07,400
0,180 180,330 330,570 570,720 720,840
And that's actually all that

1573
00:47:07,400 --> 00:47:08,900
0,240 240,450 450,540 540,960 1080,1500
log right there doing so

1574
00:47:08,930 --> 00:47:10,640
0,300 300,570 570,840 840,1320 1350,1710
every file system call that

1575
00:47:10,640 --> 00:47:12,440
0,420 420,540 540,1080 1080,1350 1350,1800
needs to update a block

1576
00:47:12,470 --> 00:47:13,370
0,420 420,510 510,780 780,840 840,900
updates to block in the

1577
00:47:13,370 --> 00:47:14,960
0,330 330,750 780,1050 1050,1200 1200,1590
block Ash and it basically

1578
00:47:14,960 --> 00:47:16,820
0,150 150,510 510,840 1140,1560 1590,1860
it pens it a to

1579
00:47:16,820 --> 00:47:19,130
0,270 270,870 870,1140 1140,1770 1980,2310
this in-memory data structure a

1580
00:47:19,130 --> 00:47:20,450
0,630 630,720 720,840 840,960 960,1320
unless you know it's already

1581
00:47:20,450 --> 00:47:21,860
0,600 690,840 840,990 990,1350 1350,1410
there in which case you

1582
00:47:21,860 --> 00:47:23,240
0,150 150,330 330,780 780,960
know just absorbs it.

1583
00:47:24,630 --> 00:47:26,020
0,180 180,270 270,420 420,750
Does that make sense.

1584
00:47:29,190 --> 00:47:30,480
0,330 330,510 510,690 690,930 930,1290
So does it mean that

1585
00:47:30,480 --> 00:47:32,010
0,240 240,540 540,810 810,930 930,1530
beer right shouldn't be used

1586
00:47:32,040 --> 00:47:34,560
0,210 210,1110 1170,1380 1380,1860 2160,2520
by itself at all, George

1587
00:47:34,560 --> 00:47:35,640
0,600
vega.

1588
00:47:35,760 --> 00:47:37,560
0,390 390,750 750,1050 1050,1200 1200,1800
Be right shouldn't be used

1589
00:47:37,620 --> 00:47:40,530
0,210 210,990 1020,1530 1530,2160 2310,2910
by itself only as yes

1590
00:47:40,770 --> 00:47:43,050
0,330 330,870 1050,1800 1800,2160 2160,2280
that's correct, basically all you

1591
00:47:43,050 --> 00:47:43,800
0,150 150,270 270,360 360,510 510,750
one way to think about

1592
00:47:43,800 --> 00:47:44,880
0,150 150,300 300,510 510,690 690,1080
is that every be right

1593
00:47:44,880 --> 00:47:45,930
0,240 240,330 330,570 570,840 840,1050
in the file system is

1594
00:47:45,960 --> 00:47:48,080
0,870 870,990 990,1350 1350,1680
replaced by log, right.

1595
00:47:53,820 --> 00:47:56,430
0,540 630,1290 1650,1860 1860,2310 2310,2610
Okay, um, so now let's

1596
00:47:56,430 --> 00:47:57,870
0,150 150,300 300,540 540,1080 1080,1440
see what actually happens at

1597
00:47:57,870 --> 00:47:59,790
0,150 150,540 540,1020 1020,1290 1290,1920
n top because that's where

1598
00:47:59,850 --> 00:48:01,620
0,150 150,510 510,780 780,1320
the exciting part happens.

1599
00:48:02,160 --> 00:48:04,590
0,720 1140,1560 1560,2160 2160,2220 2220,2430
Um, and there's a couple

1600
00:48:04,590 --> 00:48:05,460
0,180 180,510 510,630 630,720 720,870
of cases that I just

1601
00:48:05,460 --> 00:48:07,080
0,510
wanna.

1602
00:48:07,230 --> 00:48:09,240
0,420 420,720 720,1170 1170,1560 1560,2010
Avoid talking about deliberate later

1603
00:48:09,270 --> 00:48:11,310
0,510 510,930 1110,1560 1560,1710 1710,2040
because they even this simple

1604
00:48:11,310 --> 00:48:12,870
0,510 510,840 840,1200 1200,1410 1410,1560
logging system actually has some

1605
00:48:12,870 --> 00:48:14,880
0,360 360,1110 1110,1470 1500,1950 1950,2010
subtle complexities and most of

1606
00:48:14,880 --> 00:48:15,750
0,60 60,360 360,450 450,600 600,870
the beginning of this code

1607
00:48:15,750 --> 00:48:17,580
0,300 300,420 420,810 810,1080 1080,1830
deals with these subtle complexities.

1608
00:48:18,090 --> 00:48:18,810
0,270 270,390 390,510 510,600 600,720
Um, but if you want

1609
00:48:18,810 --> 00:48:20,550
0,420 420,600 600,810 870,1350 1350,1740
to get a normal case,

1610
00:48:20,550 --> 00:48:21,660
0,90 90,240 240,600 600,780 780,1110
you know there's or there's

1611
00:48:21,660 --> 00:48:23,550
0,90 90,390 390,690 690,1110 1440,1890
the simple case where no

1612
00:48:23,550 --> 00:48:25,020
0,180 180,510 510,720 720,990 990,1470
other term file system operations

1613
00:48:25,020 --> 00:48:26,820
0,120 120,240 240,870 1140,1650 1650,1800
are in progress, um, we

1614
00:48:26,820 --> 00:48:28,770
0,120 120,750 780,1140 1140,1740 1800,1950
are executing create file and

1615
00:48:28,770 --> 00:48:30,060
0,630 630,840 840,1110 1110,1200 1200,1290
basically we're getting to the

1616
00:48:30,060 --> 00:48:30,870
0,240 240,420 420,570 570,750 750,810
point where we want to

1617
00:48:30,870 --> 00:48:31,720
0,390
commit.

1618
00:48:31,940 --> 00:48:33,530
0,210 210,630 660,960 1050,1470 1470,1590
And so the code is

1619
00:48:33,530 --> 00:48:36,050
0,240 240,1020 1290,1710 1710,2070 2070,2520
pretty straightforward and calls commit

1620
00:48:36,890 --> 00:48:37,640
0,150 150,420 420,630 630,690 690,750
so let's look at the

1621
00:48:37,640 --> 00:48:38,600
0,450
commit.

1622
00:48:41,680 --> 00:48:43,140
0,150 150,360 360,870
So here's commit.

1623
00:48:43,140 --> 00:48:44,580
0,240 240,540 540,870 870,1050 1050,1440
A amazing committed us to

1624
00:48:44,580 --> 00:48:46,770
0,390 390,1320 1320,1740 1740,2070 2070,2190
basically steps basically writes the

1625
00:48:46,770 --> 00:48:47,880
0,570
log.

1626
00:48:48,140 --> 00:48:50,120
0,330 330,750 750,1230 1230,1500 1500,1980
That's basically writing all these.

1627
00:48:51,270 --> 00:48:52,620
0,240 240,420 420,900 900,1230 1230,1350
All these block numbers that

1628
00:48:52,620 --> 00:48:53,910
0,60 60,600 660,780 780,900 900,1290
are sitting you know in

1629
00:48:53,910 --> 00:48:56,370
0,120 120,1020 1050,1830 2010,2340 2340,2460
the in-memory header drags them

1630
00:48:56,370 --> 00:48:57,870
0,330 330,630 630,990 1020,1200 1200,1500
basically alter to the header

1631
00:48:57,870 --> 00:48:59,700
0,240 240,690 900,1590 1590,1650 1650,1830
on disk including you know

1632
00:48:59,700 --> 00:49:00,980
0,210 210,480 480,780
there's number n.

1633
00:49:02,360 --> 00:49:03,920
0,450 480,690 690,840 840,1050 1050,1560
Right, and so let's see,

1634
00:49:04,340 --> 00:49:05,600
0,420 420,630 630,810 810,1080 1080,1260
um that is that's what

1635
00:49:05,600 --> 00:49:07,440
0,210 210,420 420,750 750,1290
right head does sorry.

1636
00:49:07,440 --> 00:49:09,150
0,420 420,660 660,990 990,1350 1350,1710
A great blog basically writes

1637
00:49:09,150 --> 00:49:10,500
0,90 90,210 210,540 570,1080 1080,1350
you know the blocks from

1638
00:49:10,500 --> 00:49:13,410
0,90 90,360 360,1050 1110,1980 2010,2910
the buffer cache into their

1639
00:49:13,410 --> 00:49:15,780
0,690 1050,1410 1410,1530 1530,1800 1800,2370
respective into the log itself.

1640
00:49:16,280 --> 00:49:17,750
0,150 150,360 360,660 660,1050 1050,1470
So let's see red wash

1641
00:49:17,750 --> 00:49:19,380
0,360 360,600 600,1080
right above here.

1642
00:49:19,640 --> 00:49:20,960
0,570 570,1020 1020,1140 1140,1260 1260,1320
Um, you see what it

1643
00:49:20,960 --> 00:49:22,610
0,480 510,780 780,1080 1080,1560 1560,1650
does, it goes through you

1644
00:49:22,610 --> 00:49:24,080
0,120 120,300 300,900 930,1350 1350,1470
know this array one at

1645
00:49:24,080 --> 00:49:27,230
0,60 60,690 1020,1320 1320,2100 2250,3150
a time and basically writes

1646
00:49:27,230 --> 00:49:28,820
0,420 420,570 570,720 720,1050 1050,1590
down to the lock position.

1647
00:49:30,000 --> 00:49:31,300
0,240 240,330 330,810
In the walk.

1648
00:49:31,500 --> 00:49:32,670
0,240 240,450 450,930 930,1050 1050,1170
Okay so reach you know

1649
00:49:32,670 --> 00:49:34,400
0,120 120,570 570,1290
the log block.

1650
00:49:34,460 --> 00:49:36,050
0,390 390,750 750,870 870,1020 1020,1590
Then sticks it in there,

1651
00:49:36,290 --> 00:49:37,520
0,300 300,720 720,960 960,1050 1050,1230
by copying it, and then

1652
00:49:37,520 --> 00:49:38,960
0,300 300,450 450,780 780,1170 1170,1440
writing it actually out to

1653
00:49:38,960 --> 00:49:40,060
0,120 120,600
the disk.

1654
00:49:40,880 --> 00:49:42,140
0,210 210,360 360,720 720,1110 1110,1260
So this basically ensures that

1655
00:49:42,140 --> 00:49:43,970
0,270 270,900 900,1110 1110,1260 1260,1830
walk 45 land up here

1656
00:49:43,970 --> 00:49:44,960
0,60 60,240 240,690 690,870 870,990
you know say this is

1657
00:49:44,960 --> 00:49:46,700
0,300 300,720 720,1140 1140,1290 1290,1740
fifty to neverland up there

1658
00:49:46,730 --> 00:49:48,000
0,270 270,780
etc etc.

1659
00:49:49,050 --> 00:49:50,220
0,240 240,300 300,450 450,870 900,1170
Then, at the end, so

1660
00:49:50,220 --> 00:49:50,940
0,120 120,270 270,540 540,600 600,720
at this point we have

1661
00:49:50,940 --> 00:49:52,080
0,210 210,540 540,750 750,1080 1080,1140
not committed yet correct, the

1662
00:49:52,080 --> 00:49:53,250
0,390 390,570 570,720 720,1020 1020,1170
only thing we've done is

1663
00:49:53,250 --> 00:49:54,630
0,360 360,630 630,1020 1020,1260 1260,1380
basically putting blocks into the

1664
00:49:54,630 --> 00:49:56,130
0,450 840,1050 1050,1230 1230,1350 1350,1500
log, and if we were

1665
00:49:56,130 --> 00:49:57,300
0,420 420,510 510,660 660,960 960,1170
crash at this particular point

1666
00:49:57,300 --> 00:49:59,850
0,60 60,630 630,1440 1710,2310 2310,2550
in time before calling right

1667
00:49:59,850 --> 00:50:01,890
0,420 570,990 990,1200 1200,1470 1470,2040
head before write hex succeeded,

1668
00:50:02,010 --> 00:50:03,990
0,240 240,630 630,930 930,1320 1710,1980
and basically as if um,

1669
00:50:03,990 --> 00:50:05,190
0,120 120,540 540,750 750,1110 1110,1200
the transaction didn't execute at

1670
00:50:05,190 --> 00:50:05,900
0,330
all.

1671
00:50:06,810 --> 00:50:07,920
0,480 480,630 630,870 870,1020 1020,1110
Um, so let's look at

1672
00:50:07,920 --> 00:50:09,140
0,60 60,270 270,690
the write head.

1673
00:50:09,430 --> 00:50:10,480
0,150 150,420 420,600 600,810 810,1050
So that right hand is

1674
00:50:10,480 --> 00:50:11,890
0,360 360,450 450,690 690,1080 1080,1410
what I called earlier, basically

1675
00:50:11,890 --> 00:50:13,340
0,90 90,390 390,870
the commit point.

1676
00:50:13,770 --> 00:50:15,900
0,600 600,720 720,960 960,1200 1200,2130
And the commit point, basically

1677
00:50:15,900 --> 00:50:17,670
0,90 90,180 210,600 600,960 960,1770
you know basically it's straightforward

1678
00:50:17,670 --> 00:50:19,220
0,180 180,510 510,990
and reach the.

1679
00:50:19,430 --> 00:50:21,020
0,330 330,450 450,1080
Head or walk.

1680
00:50:21,080 --> 00:50:22,220
0,240 240,510 510,780 780,840 840,1140
From this which is probably

1681
00:50:22,220 --> 00:50:23,420
0,270 270,330 330,390 390,630 630,1200
sitting in the buffer cache,

1682
00:50:23,780 --> 00:50:26,180
0,780 780,1260 1260,1380 1380,1620 1980,2400
um it you know puts

1683
00:50:26,180 --> 00:50:27,980
0,480 480,930 930,1110 1110,1590 1650,1800
the accomplish the end, you

1684
00:50:27,980 --> 00:50:30,050
0,120 120,360 360,780 780,1560 1620,2070
know this end into that

1685
00:50:30,050 --> 00:50:31,760
0,780 780,1140 1140,1320 1320,1410 1410,1710
block puts all the block

1686
00:50:31,760 --> 00:50:33,290
0,480 480,720 720,930 930,1320 1320,1530
numbers into that array into

1687
00:50:33,290 --> 00:50:34,730
0,150 150,630 750,990 990,1080 1080,1440
that block and it basically

1688
00:50:34,730 --> 00:50:36,410
0,480 480,810 810,990 990,1290 1290,1680
writes that that particular block.

1689
00:50:37,210 --> 00:50:38,770
0,390 390,540 540,930 1050,1320 1320,1560
This is the this be

1690
00:50:38,770 --> 00:50:39,880
0,330 330,600 600,690 690,1020 1020,1110
right, what is that is

1691
00:50:39,880 --> 00:50:41,460
0,210 210,300 300,570 570,990
that the commit point.

1692
00:50:45,420 --> 00:50:46,500
0,150 150,210 210,450 450,780 780,1080
If a crash happens before

1693
00:50:46,500 --> 00:50:47,490
0,150 150,330 330,600 600,750 750,990
this b right, what happens

1694
00:50:47,490 --> 00:50:48,460
0,330
then.

1695
00:50:57,180 --> 00:50:58,380
0,600
Anybody.

1696
00:50:58,700 --> 00:51:01,280
0,240 240,570 570,930 930,1800 1980,2580
If the crash happens before

1697
00:51:01,280 --> 00:51:02,870
0,210 210,540 540,1170 1230,1380 1380,1590
b right isn't the only

1698
00:51:02,870 --> 00:51:04,400
0,660 660,750 750,930 930,1380 1380,1530
modification that we've made to

1699
00:51:04,400 --> 00:51:06,830
0,270 270,480 480,1380 1500,1890 1890,2430
the in memory, a HP

1700
00:51:06,830 --> 00:51:09,320
0,240 240,960 1200,1590 1590,2040 2040,2490
data structure, so it's not

1701
00:51:09,350 --> 00:51:10,850
0,300 300,360 360,480 480,870 1260,1500
going to be fine, yeah

1702
00:51:10,850 --> 00:51:11,900
0,90 90,210 210,300 300,780 780,1050
it's gonna be fine, because

1703
00:51:11,900 --> 00:51:12,980
0,330 330,480 480,660 660,810 810,1080
basically we may have written

1704
00:51:12,980 --> 00:51:14,870
0,390 390,720 720,1140 1140,1500 1500,1890
DB one zero DB enter

1705
00:51:14,870 --> 00:51:16,040
0,390 390,510 510,960 960,1080 1080,1170
whatever to log but we

1706
00:51:16,040 --> 00:51:17,510
0,150 150,600 600,1110 1110,1230 1230,1470
have not succeeded in writing

1707
00:51:17,510 --> 00:51:18,700
0,90 90,330 330,780
the blog header.

1708
00:51:18,980 --> 00:51:20,540
0,300 300,540 540,900 900,1290 1290,1560
And so will do not

1709
00:51:20,540 --> 00:51:21,770
0,120 120,450 450,720 720,840 840,1230
on recovery, nothing will happen.

1710
00:51:22,950 --> 00:51:23,820
0,180 180,330 330,600 600,720 720,870
And what happens if there's

1711
00:51:23,820 --> 00:51:24,930
0,30 30,420 420,720 720,1020 1020,1110
a crash right after to

1712
00:51:24,930 --> 00:51:26,070
0,180 180,450 450,570 570,840 840,1140
be right, so like crash

1713
00:51:26,070 --> 00:51:27,080
0,420
here.

1714
00:51:32,220 --> 00:51:33,330
0,180 180,300 300,420 420,720 720,1110
And it's no longer here,

1715
00:51:33,330 --> 00:51:35,190
0,360 480,690 690,930 930,1470 1470,1860
so the log headers correctly

1716
00:51:35,190 --> 00:51:37,140
0,240 240,420 420,630 630,1140 1380,1950
read and it's recovered yeah

1717
00:51:37,140 --> 00:51:38,670
0,180 180,330 330,750 750,1140 1140,1530
will be recovered correct well

1718
00:51:38,670 --> 00:51:39,630
0,120 120,240 240,480 480,780 780,960
at some point hopefully during

1719
00:51:39,630 --> 00:51:41,070
0,420 420,540 540,690 690,1020 1020,1440
recovery as we expect that

1720
00:51:41,070 --> 00:51:43,110
0,390 630,1170 1170,1320 1350,1830 1830,2040
we expect the recovery will

1721
00:51:43,110 --> 00:51:44,580
0,420 420,660 660,780 780,1110 1110,1470
actually read the log header

1722
00:51:44,580 --> 00:51:45,540
0,240 240,420 420,570 570,720 720,960
c that there is a

1723
00:51:45,540 --> 00:51:46,830
0,330 330,450 450,660 660,720 720,1290
five in there for example,

1724
00:51:47,070 --> 00:51:48,090
0,180 180,330 330,630 630,720 720,1020
and then copy the first

1725
00:51:48,090 --> 00:51:49,200
0,300 300,570 570,720 720,930 930,1110
five walks through their home

1726
00:51:49,200 --> 00:51:50,100
0,480
location.

1727
00:51:50,530 --> 00:51:51,790
0,150 150,300 300,450 450,960 960,1260
So this is really this,

1728
00:51:51,790 --> 00:51:53,860
0,420 420,630 630,960 960,1530
this, this one wine.

1729
00:51:53,860 --> 00:51:55,000
0,150 150,390 390,660 660,1020 1020,1140
There's one disc right there's

1730
00:51:55,000 --> 00:51:56,080
0,150 150,480 480,720 720,840 840,1080
one sector right is really

1731
00:51:56,080 --> 00:51:57,300
0,60 60,330 330,690
the commit point.

1732
00:51:58,440 --> 00:51:59,380
0,420
Right.

1733
00:52:03,380 --> 00:52:04,760
0,480 480,540 540,1050 1050,1320 1320,1380
Before the commitment point, the

1734
00:52:04,760 --> 00:52:06,650
0,570 570,1200 1200,1290 1290,1710 1710,1890
transaction is the transaction didn't

1735
00:52:06,650 --> 00:52:08,300
0,360 360,690 690,960 960,1260 1260,1650
happen after the commit point,

1736
00:52:08,300 --> 00:52:09,620
0,90 90,570 570,720 720,1200 1200,1320
the deduction will definitely be

1737
00:52:09,620 --> 00:52:10,660
0,510
finished.

1738
00:52:11,470 --> 00:52:12,760
0,390 390,480 480,810 810,870 870,1290
Assuming your recovery is correct.

1739
00:52:18,220 --> 00:52:21,220
0,450 480,660 660,1080 1080,1500 1980,3000
Okay, so let's you know

1740
00:52:21,520 --> 00:52:23,300
0,150 150,480 480,660 660,1200
go back to commit.

1741
00:52:25,020 --> 00:52:26,910
0,300 300,810 960,1380 1380,1500 1500,1890
So commit after its committed

1742
00:52:26,910 --> 00:52:28,770
0,90 90,330 330,960 960,1050 1050,1860
it actually installs the transactions

1743
00:52:28,830 --> 00:52:30,900
0,480 480,900 900,1110 1110,1680 1680,2070
and that's pretty straightforward, basically

1744
00:52:30,900 --> 00:52:32,910
0,270 270,720 960,1230 1230,1770 1770,2010
it takes the blocks looks

1745
00:52:32,910 --> 00:52:33,990
0,120 120,210 210,480 480,780 780,1080
at the header word blocks

1746
00:52:33,990 --> 00:52:35,190
0,450 450,540 540,630 630,930 930,1200
blogs and then basically writes

1747
00:52:35,190 --> 00:52:36,920
0,150 150,300 300,690 690,1200
into that particular location.

1748
00:52:37,660 --> 00:52:39,310
0,690 870,1200 1200,1410 1410,1500 1500,1650
Um, yeah, so we can

1749
00:52:39,310 --> 00:52:40,930
0,240 240,450 450,540 540,960 960,1620
actually look at install trends.

1750
00:52:41,930 --> 00:52:43,100
0,120 120,390 390,570 570,930 930,1170
You see that actually that's

1751
00:52:43,100 --> 00:52:44,480
0,150 150,210 210,810
what he does.

1752
00:52:45,110 --> 00:52:46,040
0,300 300,510 510,600 600,870 870,930
It has a copy of

1753
00:52:46,040 --> 00:52:48,290
0,90 90,330 330,900 1230,1890 1890,2250
the log header and use

1754
00:52:48,290 --> 00:52:50,750
0,270 300,630 630,930 930,1500 1830,2460
or reads blog header a

1755
00:52:50,750 --> 00:52:52,730
0,210 210,480 480,960 1020,1710 1710,1980
it reach the destination block

1756
00:52:52,730 --> 00:52:54,200
0,60 60,270 270,990
the home location.

1757
00:52:54,290 --> 00:52:55,490
0,450 450,570 570,900 900,1110 1110,1200
Copies, the data from the

1758
00:52:55,490 --> 00:52:59,030
0,630 660,1230 1260,1740 1740,2160 2580,3540
log block into the destination,

1759
00:52:59,360 --> 00:53:00,440
0,210 210,390 390,720 720,810 810,1080
and then writes the buffer

1760
00:53:00,440 --> 00:53:01,820
0,120 120,180 180,840
to the destination.

1761
00:53:03,170 --> 00:53:04,260
0,660
Okay.

1762
00:53:04,730 --> 00:53:05,990
0,240 240,540 540,990 990,1140 1140,1260
So basically effectively what this

1763
00:53:05,990 --> 00:53:07,130
0,330 330,450 450,870 870,960 960,1140
does is basically you know

1764
00:53:07,130 --> 00:53:07,910
0,150 150,330 330,540 540,600 600,780
you go back to this

1765
00:53:07,910 --> 00:53:09,410
0,300 300,600 600,900 900,990 990,1500
previous slide here and copies,

1766
00:53:09,410 --> 00:53:10,460
0,90 90,330 540,690 690,870 870,1050
you know it just does

1767
00:53:10,460 --> 00:53:12,290
0,270 270,720 720,1050 1050,1260 1290,1830
these copies from the log

1768
00:53:12,290 --> 00:53:13,640
0,330 330,450 450,660 660,1110 1110,1350
into the home location or

1769
00:53:13,640 --> 00:53:14,780
0,270 270,390 390,480 480,750 750,1140
actually in the file system.

1770
00:53:17,160 --> 00:53:17,820
0,180 180,240 240,480 480,540 540,660
And of course you know

1771
00:53:17,820 --> 00:53:18,750
0,120 120,300 300,450 450,480 480,930
we might get a failure

1772
00:53:18,750 --> 00:53:19,920
0,360 360,750 780,900 900,1020 1020,1170
somewhere in you know this

1773
00:53:19,920 --> 00:53:21,180
0,420 420,600 600,900 900,990 990,1260
code or while we're doing

1774
00:53:21,180 --> 00:53:22,680
0,450 750,1110 1140,1290 1290,1410 1410,1500
this, but you know it

1775
00:53:22,680 --> 00:53:23,910
0,150 150,300 300,690 690,900 900,1230
should be OK because hopefully

1776
00:53:23,910 --> 00:53:25,380
0,90 90,630 630,900 900,1170 1170,1470
in recovery will start over

1777
00:53:25,380 --> 00:53:26,520
0,180 180,240 240,600
from the beginning.

1778
00:53:29,150 --> 00:53:30,620
0,240 240,450 450,900 900,1170 1170,1470
So let's look at we

1779
00:53:30,890 --> 00:53:32,540
0,570 570,690 690,810 810,930 930,1650
um, so that was installed.

1780
00:53:33,160 --> 00:53:34,720
0,240 240,510 510,990 990,1080 1080,1560
So once install is done.

1781
00:53:35,750 --> 00:53:38,570
0,690 690,1590 1620,2460 2460,2550 2550,2820
Then a basically a it

1782
00:53:38,570 --> 00:53:40,490
0,450 450,600 600,780 780,960 960,1920
sets you know the in-memory

1783
00:53:40,940 --> 00:53:42,980
0,600 630,1050 1050,1320 1320,1410 1410,2040
header and back to zero

1784
00:53:43,100 --> 00:53:44,240
0,150 150,300 300,690 690,900 900,1140
and the rice that lock

1785
00:53:44,240 --> 00:53:45,120
0,390
header.

1786
00:53:45,500 --> 00:53:47,660
0,330 330,810 810,1320 1350,1620 1620,2160
And effectively dot a causes

1787
00:53:47,660 --> 00:53:49,980
0,630 960,1800
to a.

1788
00:53:50,810 --> 00:53:52,220
0,360 360,450 450,840 840,1050 1050,1410
Claims the log because basically

1789
00:53:52,220 --> 00:53:53,270
0,180 180,360 360,720 720,810 810,1050
there's now zero in it.

1790
00:53:53,900 --> 00:53:54,960
0,600
Question.

1791
00:53:56,130 --> 00:53:58,040
0,600 630,1170
Um, so.

1792
00:53:58,040 --> 00:54:00,340
0,780 1050,1650
You have.

1793
00:54:00,340 --> 00:54:01,720
0,330 420,780 780,960 960,1140 1140,1380
The function you're in just

1794
00:54:01,720 --> 00:54:04,090
0,750 1020,1320 1320,1830 1860,2220 2220,2370
before like whereas, does the

1795
00:54:04,090 --> 00:54:06,280
0,300 330,750 1110,1260 1260,1680
from to a tube.

1796
00:54:06,370 --> 00:54:07,900
0,150 150,600 780,1020 1020,1230 1230,1530
I'm getting so that puts

1797
00:54:07,900 --> 00:54:09,320
0,270 270,840
the um.

1798
00:54:09,410 --> 00:54:10,610
0,150 150,570 570,690 690,870 870,1200
They block that you're going

1799
00:54:10,610 --> 00:54:13,790
0,120 120,660 930,1740 1800,2430 2640,3180
to like update a blog

1800
00:54:13,790 --> 00:54:14,780
0,120 120,210 210,360 360,510 540,990
that you're going to update

1801
00:54:14,780 --> 00:54:17,500
0,420 420,600 600,1290 1560,2250
into the buffer cache.

1802
00:54:17,840 --> 00:54:19,190
0,660 690,870 870,990 990,1170 1170,1350
Um, could you make it

1803
00:54:19,190 --> 00:54:21,110
0,510 510,1080 1200,1500 1500,1680 1680,1920
faster by not putting into

1804
00:54:21,110 --> 00:54:22,250
0,90 90,480 480,840 840,930 930,1140
the buffer cache and just

1805
00:54:22,250 --> 00:54:24,600
0,390 390,690 690,960 990,1770
directly writing it too.

1806
00:54:24,600 --> 00:54:26,420
0,180 180,600 600,1170
The device instead.

1807
00:54:26,680 --> 00:54:29,470
0,390 390,1230 1230,1650 1950,2340 2340,2790
Um, let me um, which

1808
00:54:29,470 --> 00:54:31,080
0,300 300,420 420,690 690,1020
function we're talking about.

1809
00:54:31,770 --> 00:54:34,740
0,240 1350,1680 1680,1860 1860,2340 2370,2970
I forget its name, it's

1810
00:54:34,740 --> 00:54:35,940
0,90 90,270 270,420 420,660 660,1200
the one where you a

1811
00:54:36,120 --> 00:54:37,560
0,900
copy.

1812
00:54:37,560 --> 00:54:38,790
0,180 180,510 510,660 660,780 780,1230
Yeah everything into the log

1813
00:54:39,030 --> 00:54:41,370
0,150 150,270 270,1020 1350,1770 1770,2340
I'll get install install trends.

1814
00:54:42,920 --> 00:54:46,300
0,840 2010,2760
I know.

1815
00:54:47,160 --> 00:54:48,480
0,570 660,930 930,1020 1020,1170 1170,1320
Oh, maybe it was this

1816
00:54:48,480 --> 00:54:49,380
0,360
one.

1817
00:54:50,220 --> 00:54:51,600
0,150 150,300 300,480 480,930 930,1380
So this was thinking probably

1818
00:54:51,600 --> 00:54:53,130
0,120 120,360 360,750 900,1230 1260,1530
of right head but it's

1819
00:54:53,130 --> 00:54:55,770
0,120 120,330 330,630 1050,1470 1500,2640
the same thing, okay good.

1820
00:54:57,630 --> 00:54:58,650
0,150 150,390 390,720 720,780 780,1020
The only reason to get

1821
00:54:58,650 --> 00:54:59,840
0,360
one.

1822
00:54:59,840 --> 00:55:01,190
0,360 780,900 900,1080 1080,1260 1260,1350
Um the only reason to

1823
00:55:01,190 --> 00:55:02,150
0,300 300,420 420,510 510,780 780,960
this, you know basically our

1824
00:55:02,150 --> 00:55:03,320
0,360 360,450 450,630 630,1020 1020,1170
interface is not particularly good,

1825
00:55:03,320 --> 00:55:04,610
0,120 120,210 210,420 420,690 690,1290
you could just read straight,

1826
00:55:04,610 --> 00:55:06,440
0,60 60,720 870,1290 1290,1650 1650,1830
you know you're wondering why

1827
00:55:06,440 --> 00:55:07,370
0,90 90,210 210,450 450,540 540,930
you are doing the read.

1828
00:55:07,980 --> 00:55:09,120
0,450 450,660 660,810 810,1050 1050,1140
Um, there's no reason to

1829
00:55:09,120 --> 00:55:09,900
0,120 120,240 240,480 480,690 690,780
do the read because we're

1830
00:55:09,900 --> 00:55:11,940
0,120 120,180 180,450 450,900 1320,2040
going to write anyway, um

1831
00:55:12,210 --> 00:55:13,680
0,120 120,300 300,420 420,900
is that the question.

1832
00:55:14,980 --> 00:55:16,750
0,450 480,870 870,1230 1260,1590 1590,1770
Um, yeah that and you're

1833
00:55:16,750 --> 00:55:18,760
0,540 540,780 780,1050 1050,1200 1200,2010
also a doing the move

1834
00:55:19,450 --> 00:55:20,560
0,180 180,390 390,480 480,870 870,1110
and getting the movement yeah,

1835
00:55:20,620 --> 00:55:21,580
0,210 210,390 390,450 450,780 780,960
so these are actually a

1836
00:55:21,580 --> 00:55:22,630
0,300 300,390 390,600 600,690 690,1050
sequence of code can definitely

1837
00:55:22,630 --> 00:55:24,190
0,90 90,750 840,1140 1140,1320 1320,1560
be optimized a you can

1838
00:55:24,190 --> 00:55:25,300
0,450 480,600 600,780 780,1020 1020,1110
save you know one or

1839
00:55:25,300 --> 00:55:26,600
0,150 150,390 390,840
two disk writes.

1840
00:55:26,600 --> 00:55:28,730
0,270 270,510 510,930 960,1830 1860,2130
A just for simplicity a

1841
00:55:28,730 --> 00:55:29,420
0,120 120,270 270,390 390,630 630,690
we don't do any of

1842
00:55:29,420 --> 00:55:30,240
0,270
that.

1843
00:55:30,270 --> 00:55:31,820
0,480 510,690 690,930
Okay, thank you.

1844
00:55:35,170 --> 00:55:37,100
0,600 660,1410
Okay, um.

1845
00:55:37,580 --> 00:55:38,150
0,150 150,180 180,360 360,480 480,570
So I think we're in

1846
00:55:38,150 --> 00:55:40,220
0,540 570,930 930,1500
over a commit.

1847
00:55:40,410 --> 00:55:41,760
0,270 270,420 420,690 690,840 840,1350
Just like, just go back.

1848
00:55:42,840 --> 00:55:44,480
0,360 360,600 600,1140
And double check.

1849
00:55:44,540 --> 00:55:45,470
0,450 450,600 600,720 720,840 840,930
Um, so we did the

1850
00:55:45,470 --> 00:55:46,460
0,240 240,690 690,780 780,900 900,990
right log, we did the

1851
00:55:46,460 --> 00:55:48,590
0,210 210,750 810,990 990,1320 1320,2130
right head and basically this

1852
00:55:48,590 --> 00:55:50,180
0,90 90,390 390,1020
the cleaning operation.

1853
00:55:50,430 --> 00:55:51,780
0,510 510,690 690,1140 1140,1230 1230,1350
Um, we raised you know

1854
00:55:51,780 --> 00:55:53,550
0,570 570,900 930,1290 1290,1440 1440,1770
transaction by sending it to

1855
00:55:53,550 --> 00:55:55,300
0,480 600,1140
zero, okay.

1856
00:55:55,880 --> 00:55:57,170
0,150 150,360 360,570 570,780 780,1290
So the only thing to

1857
00:55:57,410 --> 00:55:58,970
0,360 360,810 810,960 960,1110 1110,1560
fruit, inspect is like how,

1858
00:55:58,970 --> 00:56:00,830
0,210 210,480 480,930 930,1320 1350,1860
how does recovery work and

1859
00:56:01,250 --> 00:56:03,540
0,960
recovery.

1860
00:56:03,540 --> 00:56:04,980
0,270 270,690 690,1230 1260,1350 1350,1440
A happens when you know

1861
00:56:04,980 --> 00:56:07,380
0,210 210,690 690,1320 1740,2220 2220,2400
when X starts a so

1862
00:56:07,380 --> 00:56:08,370
0,210 210,330 330,480 480,510 510,990
now we had a crash

1863
00:56:08,370 --> 00:56:10,380
0,360 360,450 450,780 780,1410 1650,2010
but the system failed a

1864
00:56:10,380 --> 00:56:13,350
0,180 180,600 600,960 990,1650 2130,2970
we reboot it, um, and

1865
00:56:13,500 --> 00:56:15,870
0,900 1200,1920 1950,2220 2220,2310 2310,2370
um the one of the

1866
00:56:15,870 --> 00:56:17,640
0,240 240,450 450,960 960,1200 1560,1770
first things that actually one

1867
00:56:17,640 --> 00:56:18,330
0,90 90,150 150,330 330,450 450,690
of the things that actually

1868
00:56:18,330 --> 00:56:21,450
0,600 600,1170 1170,1920 1950,2850 2880,3120
produced during a utilization in

1869
00:56:21,450 --> 00:56:23,020
0,510 510,630 630,690 690,1200
articles in the law.

1870
00:56:23,390 --> 00:56:25,580
0,390 390,1140 1140,1710 1710,2070 2070,2190
A analog basically calls this

1871
00:56:25,580 --> 00:56:27,560
0,300 300,900 900,1470 1650,1860 1860,1980
function recover blog and so

1872
00:56:27,560 --> 00:56:28,790
0,180 180,330 330,540 540,780 780,1230
let's see what that does.

1873
00:56:30,110 --> 00:56:32,660
0,480 720,1350 1350,1710 1710,2310 2340,2550
And basically recover block your

1874
00:56:32,660 --> 00:56:34,920
0,720 900,1230 1230,1740
calls read ahead.

1875
00:56:34,920 --> 00:56:37,230
0,420 420,780 780,1140 1140,1980 2010,2310
Um to basically extract or

1876
00:56:37,230 --> 00:56:38,800
0,390 390,990
reach the.

1877
00:56:39,300 --> 00:56:40,530
0,570 660,840 840,930 930,1140 1140,1230
Then let me see if

1878
00:56:40,530 --> 00:56:41,460
0,60 60,180 180,450 450,720 720,930
I can scroll down here

1879
00:56:41,460 --> 00:56:42,660
0,90 90,300 300,660
a little bit.

1880
00:56:45,580 --> 00:56:46,810
0,480 480,690 690,780 780,1050 1050,1230
Basically reads the header from

1881
00:56:46,810 --> 00:56:47,880
0,480
disk.

1882
00:56:48,100 --> 00:56:49,920
0,270 270,600 600,750 750,1260
And sees if n.

1883
00:56:49,920 --> 00:56:51,570
0,780 780,1110 1110,1320 1320,1500 1500,1650
Um, well doesn't really see

1884
00:56:51,570 --> 00:56:52,260
0,150 150,300 300,360 360,630 630,690
if n is zero or

1885
00:56:52,260 --> 00:56:53,460
0,300 300,540 660,810 810,960 960,1200
not, but he just calls

1886
00:56:53,460 --> 00:56:55,440
0,420 420,990 1140,1530 1530,1800 1800,1980
installed trans and no this

1887
00:56:55,440 --> 00:56:56,730
0,120 120,600 600,720 720,990 990,1290
is exactly the same install

1888
00:56:56,730 --> 00:56:57,930
0,360 360,540 540,720 720,930 930,1200
transfer, we use look for

1889
00:56:57,930 --> 00:56:59,550
0,90 90,390 390,780 810,1500 1500,1620
it for a look at

1890
00:56:59,550 --> 00:57:00,900
0,210 210,240 240,450 450,930 1170,1350
it a while ago and

1891
00:57:00,900 --> 00:57:01,920
0,420 420,510 510,690 690,930 930,1020
basically you know look at

1892
00:57:01,920 --> 00:57:03,390
0,150 150,510 510,780 780,1320 1320,1470
this n and installs all

1893
00:57:03,390 --> 00:57:04,500
0,90 90,390 390,510 510,930 930,1110
the blocks from zero to

1894
00:57:04,500 --> 00:57:06,060
0,420 720,990 990,1080 1080,1170 1170,1560
n out of the log

1895
00:57:06,060 --> 00:57:07,440
0,240 240,360 360,540 540,1020
into their home location.

1896
00:57:07,850 --> 00:57:09,230
0,240 240,360 360,480 480,930 1020,1380
And if it's done once

1897
00:57:09,230 --> 00:57:10,340
0,90 90,660 660,750 750,870 870,1110
it succeeds you know then

1898
00:57:10,340 --> 00:57:12,440
0,630 870,1020 1020,1320 1320,1590 1590,2100
actually it calls clear log.

1899
00:57:12,940 --> 00:57:14,580
0,240 240,480 480,1080
A as before.

1900
00:57:14,820 --> 00:57:16,020
0,420 420,540 540,750 750,990 990,1200
And so that's actually all

1901
00:57:16,020 --> 00:57:17,670
0,180 180,240 240,630 630,1140 1140,1650
what the recovery does recovery

1902
00:57:17,670 --> 00:57:19,740
0,90 90,630 660,1140 1140,1740 1740,2070
is basically always called dust

1903
00:57:19,740 --> 00:57:20,920
0,630
installation.

1904
00:57:21,010 --> 00:57:22,600
0,180 180,270 270,390 390,1050 1110,1590
And if we crash during

1905
00:57:22,600 --> 00:57:25,090
0,510 510,1140 1530,1740 1740,2130 2130,2490
installation here, no particular problem

1906
00:57:25,090 --> 00:57:26,680
0,330 330,630 630,840 840,990 990,1590
again correct because we'll crash

1907
00:57:26,710 --> 00:57:28,930
0,210 210,720 1020,1650 1650,2010 2010,2220
will boot a xe HD

1908
00:57:28,930 --> 00:57:31,210
0,450 450,600 600,1170 1200,1950 1980,2280
rebooting will call a log

1909
00:57:31,210 --> 00:57:32,320
0,150 150,450 630,810 810,900 900,1110
in it, which will call

1910
00:57:32,320 --> 00:57:33,700
0,450 450,990 1020,1200 1200,1290 1290,1380
recovery log and it will

1911
00:57:33,700 --> 00:57:35,740
0,630 660,930 930,1500 1500,1920 1920,2040
basically {re-installer -} replay, the

1912
00:57:35,740 --> 00:57:37,810
0,300 300,420 420,900 900,1320 1560,2070
log is sometimes called again,

1913
00:57:37,870 --> 00:57:39,760
0,510 630,840 840,1050 1050,1410 1650,1890
and this might have this

1914
00:57:39,760 --> 00:57:40,900
0,210 210,510 570,960 960,1050 1050,1140
might end a if we

1915
00:57:40,900 --> 00:57:42,520
0,330 330,660 660,1260 1260,1500 1500,1620
crash every time or you

1916
00:57:42,520 --> 00:57:44,170
0,180 210,450 450,660 660,1230 1500,1650
know many many times, you

1917
00:57:44,170 --> 00:57:46,030
0,270 270,870 870,1410 1410,1500 1500,1860
know we'll reinstall or replace

1918
00:57:46,030 --> 00:57:46,930
0,120 120,390 390,540 540,720 720,900
the log many many many

1919
00:57:46,930 --> 00:57:48,400
0,390 450,690 690,990 990,1410 1410,1470
times they'll tell hopefully at

1920
00:57:48,400 --> 00:57:50,050
0,150 150,330 330,390 390,1080 1200,1650
some point he succeeds and

1921
00:57:50,050 --> 00:57:51,070
0,450 450,540 540,660 660,930 930,1020
actually you know gets the

1922
00:57:51,070 --> 00:57:53,680
0,510 510,900 900,1320 2250,2520 2520,2610
whole log written gets the

1923
00:57:53,680 --> 00:57:55,090
0,270 270,570 570,1200 1230,1290 1290,1410
whole log installed, you know

1924
00:57:55,090 --> 00:57:55,900
0,180 180,480
to the.

1925
00:57:56,860 --> 00:57:58,260
0,120 120,180 180,330 330,930
Due to home locations.

1926
00:57:59,430 --> 00:58:00,640
0,120 120,180 180,300 300,600
Does it make sense.

1927
00:58:03,580 --> 00:58:04,810
0,210 210,210 210,540 540,630 630,1230
A I had a question

1928
00:58:04,810 --> 00:58:07,270
0,600 930,1200 1200,1410 1410,1560 1560,2460
about so if a process

1929
00:58:07,300 --> 00:58:09,550
0,420 420,720 720,1500 1650,1920 1920,2250
just runs normally it writes

1930
00:58:09,550 --> 00:58:12,070
0,420 450,1080 1110,1320 1320,2010 2370,2520
some data to disk, and

1931
00:58:12,070 --> 00:58:12,940
0,120 120,240 240,420 420,630 630,870
then at some point after

1932
00:58:12,940 --> 00:58:15,640
0,450 630,1740 1830,2190 2190,2610 2610,2700
that before it commits and

1933
00:58:15,640 --> 00:58:17,280
0,450 450,510 510,1230
installs the changes.

1934
00:58:17,370 --> 00:58:19,410
0,240 240,600 600,750 750,1500 1560,2040
Um, there's a failure from

1935
00:58:19,530 --> 00:58:21,060
0,210 210,1110
the process.

1936
00:58:21,180 --> 00:58:22,230
0,210 210,450 450,780 780,990 990,1050
The further process point of

1937
00:58:22,230 --> 00:58:23,300
0,540
view.

1938
00:58:23,450 --> 00:58:25,910
0,360 360,930 930,1320 1350,1830 1830,2460
Nothing happened, but something like.

1939
00:58:26,880 --> 00:58:27,870
0,120 120,300 300,390 390,720 720,990
I guess the failure happened

1940
00:58:27,870 --> 00:58:31,050
0,330 330,720 840,1710 1830,2520 2850,3180
after the process ended of

1941
00:58:31,050 --> 00:58:32,880
0,210 210,510 510,660 660,1380
what I was doing.

1942
00:58:33,060 --> 00:58:34,410
0,240 240,420 420,660 660,1110 1110,1350
So, is there anything bad

1943
00:58:34,410 --> 00:58:35,680
0,270 270,690
about that.

1944
00:58:36,170 --> 00:58:37,790
0,420 420,660 660,1230 1230,1470 1470,1620
Not hundred century getting it

1945
00:58:37,790 --> 00:58:40,670
0,720 960,1770 2250,2580 2580,2820 2820,2880
but a short answer is

1946
00:58:40,670 --> 00:58:42,020
0,120 120,360 360,780 810,1260 1260,1350
there's nothing bad because the

1947
00:58:42,020 --> 00:58:43,160
0,240 240,540 540,630 630,1080 1080,1140
disc won't be updated at

1948
00:58:43,160 --> 00:58:44,810
0,330 360,570 570,810 810,990 990,1650
all, so just as if

1949
00:58:44,840 --> 00:58:46,160
0,150 150,540 570,780 780,1020 1020,1320
you know that file system

1950
00:58:46,160 --> 00:58:47,720
0,390 390,630 630,1080
operation didn't happen.

1951
00:58:48,130 --> 00:58:49,460
0,750
Alright.

1952
00:58:50,180 --> 00:58:52,520
0,390 390,780 810,1500 1500,2040 2040,2340
I guess process disappears too

1953
00:58:52,520 --> 00:58:53,600
0,330
but.

1954
00:58:53,600 --> 00:58:54,620
0,120 120,330 360,540 540,720 720,1020
You know we don't expect

1955
00:58:54,620 --> 00:58:55,970
0,60 60,480 480,600 600,990 990,1350
the process to survive failures

1956
00:58:55,970 --> 00:58:57,000
0,450
anyway.

1957
00:58:58,150 --> 00:59:00,020
0,570 720,1290
Right part.

1958
00:59:00,020 --> 00:59:01,200
0,90 90,720
I guess.

1959
00:59:01,200 --> 00:59:02,550
0,600 600,750 750,990 990,1170 1170,1350
Okay I I think that

1960
00:59:02,550 --> 00:59:04,050
0,210 210,300 300,750 780,1020 1020,1500
answers my question, thank you.

1961
00:59:05,720 --> 00:59:07,280
0,180 180,870 870,1200 1200,1260 1260,1560
Yeah it's important to remember

1962
00:59:07,280 --> 00:59:09,710
0,90 90,840 1680,1830 1830,2250 2250,2430
to basically the only thing

1963
00:59:09,710 --> 00:59:11,450
0,150 150,420 420,870 870,1470 1500,1740
that really survives failures or

1964
00:59:11,450 --> 00:59:13,070
0,210 210,720 720,1050 1050,1440 1440,1620
that's persistence across failures is

1965
00:59:13,070 --> 00:59:14,180
0,180 180,540 540,660 660,750 750,1110
the disc or the state

1966
00:59:14,180 --> 00:59:15,650
0,90 90,180 180,600 690,1020 1020,1470
on the disk nothing else,

1967
00:59:15,680 --> 00:59:16,420
0,300
right.

1968
00:59:19,620 --> 00:59:21,060
0,390 390,810 810,810 810,1350 1350,1440
Okay, so um just to

1969
00:59:21,060 --> 00:59:22,740
0,150 150,270 270,480 480,1110 1140,1680
make this all concrete one

1970
00:59:22,740 --> 00:59:24,450
0,330 330,570 570,840 840,1140 1140,1710
little more to let's um.

1971
00:59:25,160 --> 00:59:28,400
0,240 240,510 510,1170 2040,2760 2760,3240
I put a statement in

1972
00:59:28,400 --> 00:59:29,990
0,270 270,510 510,870 870,1260 1260,1590
A B right, so actually

1973
00:59:29,990 --> 00:59:31,040
0,90 90,240 240,420 420,660 660,1050
the thing that actually does

1974
00:59:31,040 --> 00:59:32,360
0,210 210,300 300,780 810,1140 1140,1320
write to disk like in

1975
00:59:32,360 --> 00:59:33,920
0,300 330,1020
the wabash.

1976
00:59:33,920 --> 00:59:34,940
0,240 240,420 420,540 540,600 600,1020
And we're going to see

1977
00:59:34,940 --> 00:59:37,160
0,270 270,750 780,1380 1380,1740 1770,2220
what the trace of actual

1978
00:59:37,160 --> 00:59:38,540
0,240 240,510 510,810
disk writes are.

1979
00:59:38,600 --> 00:59:40,130
0,240 240,480 480,870 870,960 960,1530
Um, because basically on monday

1980
00:59:40,130 --> 00:59:42,120
0,180 180,390 390,690 720,1440
I sort of um.

1981
00:59:43,890 --> 00:59:44,640
0,120 120,330 330,480 480,540 540,750
I didn't tell the full

1982
00:59:44,640 --> 00:59:46,260
0,570 600,1050 1050,1350 1350,1440 1440,1620
truth because basically I put

1983
00:59:46,260 --> 00:59:47,580
0,90 90,330 330,780 780,990 990,1320
the print statement in log

1984
00:59:47,580 --> 00:59:49,110
0,420 450,660 660,1020 1020,1290 1290,1530
right and not in b

1985
00:59:49,110 --> 00:59:50,370
0,450 540,900 900,1020 1020,1170 1170,1260
right, and so now I

1986
00:59:50,370 --> 00:59:51,120
0,150 150,240 240,420 420,570 570,750
put it in the b

1987
00:59:51,120 --> 00:59:51,870
0,270 270,360 360,480 480,600 600,750
right and so we can

1988
00:59:51,870 --> 00:59:53,070
0,210 210,600 600,780 780,900 900,1200
actually see all the blocks

1989
00:59:53,070 --> 00:59:54,180
0,60 60,300 300,600
are being written.

1990
00:59:54,380 --> 00:59:55,160
0,210 210,330 330,420 420,540 540,780
So we'll do the same

1991
00:59:55,160 --> 00:59:56,420
0,150 150,270 270,810 810,960 960,1260
thing as before you echo

1992
00:59:56,420 --> 00:59:58,280
0,300 300,870 1230,1380 1380,1620 1620,1860
hi ex, and just look

1993
00:59:58,280 --> 00:59:59,510
0,120 120,420 420,570 570,960 960,1230
at actually the actual disk

1994
00:59:59,510 --> 01:00:00,460
0,420
writes.

1995
01:00:01,120 --> 01:00:01,840
0,210 210,330 330,450 450,540 540,720
And see if that makes

1996
01:00:01,840 --> 01:00:02,980
0,450 510,690 690,840 840,900 900,1140
sense, yeah, so the first

1997
01:00:02,980 --> 01:00:03,940
0,120 120,180 180,510 510,840 840,960
thing to note correctly that

1998
01:00:03,940 --> 01:00:06,070
0,150 150,540 540,780 780,1440 1830,2130
this traces way longer than

1999
01:00:06,070 --> 01:00:06,880
0,60 60,360 360,480 480,600 600,810
the trace that we looked

2000
01:00:06,880 --> 01:00:07,750
0,90 90,360 360,510 510,570 570,870
at last time the fact

2001
01:00:07,750 --> 01:00:09,010
0,180 180,300 300,510 510,660 660,1260
that we looked at a

2002
01:00:09,010 --> 01:00:10,210
0,330 330,360 360,600 600,870 870,1200
slide a couple slides ago,

2003
01:00:10,270 --> 01:00:11,100
0,330
right.

2004
01:00:11,480 --> 01:00:12,440
0,300 300,450 450,720 720,900 900,960
Because you're looking at a

2005
01:00:12,440 --> 01:00:14,120
0,390 390,540 540,780 780,1320 1320,1680
packed you just demonstrate this.

2006
01:00:15,440 --> 01:00:18,410
0,630 630,1050 1050,1230 1230,1530 1560,2970
Um, here was the same

2007
01:00:18,770 --> 01:00:20,760
0,360 360,960 990,1440
echo hi earth.

2008
01:00:20,980 --> 01:00:22,300
0,630 630,810 810,870 870,990 990,1320
And when we see there's

2009
01:00:22,300 --> 01:00:24,360
0,180 180,690 1140,1590
like only it's.

2010
01:00:24,390 --> 01:00:26,760
0,510 510,780 780,1020 1020,1830 2010,2370
Five log write operations but

2011
01:00:26,760 --> 01:00:29,490
0,90 90,390 390,960 1620,2370 2400,2730
it turns into many disk

2012
01:00:29,490 --> 01:00:30,660
0,720
operations.

2013
01:00:31,670 --> 01:00:32,660
0,450
Right.

2014
01:00:32,780 --> 01:00:33,650
0,150 150,330 330,480 480,570 570,870
So let's look at it.

2015
01:00:34,680 --> 01:00:36,840
0,660 840,990 990,1170 1170,1680 1680,2160
Um, so what we think

2016
01:00:36,840 --> 01:00:38,160
0,150 150,450 450,870 870,1200 1200,1320
be right three four and

2017
01:00:38,160 --> 01:00:39,390
0,300 300,750 840,960 960,1110 1110,1230
five are and what is

2018
01:00:39,390 --> 01:00:40,660
0,150 150,390 390,720
be right, too.

2019
01:00:48,710 --> 01:00:49,880
0,660
Anybody.

2020
01:00:50,080 --> 01:00:52,300
0,300 570,1080 1080,1500 1500,1650 1650,2220
So writing to the log

2021
01:00:52,330 --> 01:00:53,620
0,90 90,270 270,360 360,690 690,1290
and then the super blog.

2022
01:00:54,580 --> 01:00:56,500
0,570 570,630 630,870 870,1410 1530,1920
Not the super blogger, now

2023
01:00:56,500 --> 01:00:57,610
0,210 210,360 360,630 630,810 810,1110
let's say that log head

2024
01:00:57,640 --> 01:00:59,620
0,150 150,960 1440,1710 1710,1890 1890,1980
yeah, so just look at

2025
01:00:59,620 --> 01:01:00,550
0,240 240,360 360,510 510,630 630,930
me, you got it right,

2026
01:01:00,550 --> 01:01:01,270
0,90 90,210 210,420 420,630 630,720
you know just looking at

2027
01:01:01,270 --> 01:01:02,830
0,120 120,390 390,690 690,1020 1410,1560
this picture again, correct the

2028
01:01:02,830 --> 01:01:04,780
0,270 270,540 540,1020 1050,1530 1590,1950
log structure too, so, um,

2029
01:01:04,780 --> 01:01:06,070
0,270 270,540 540,600 600,810 810,1290
that's probably the header block

2030
01:01:06,460 --> 01:01:07,360
0,120 120,420 420,690 690,780 780,900
to commit record if you

2031
01:01:07,360 --> 01:01:08,950
0,360 750,900 900,1170 1170,1500 1500,1590
will and then freeze the

2032
01:01:08,950 --> 01:01:10,360
0,240 240,480 480,960 960,1320 1320,1410
first data block forced a

2033
01:01:10,360 --> 01:01:11,710
0,270 270,450 450,720 720,1020 1020,1350
second data block finds deferred

2034
01:01:11,710 --> 01:01:12,700
0,210 210,600
data block.

2035
01:01:13,540 --> 01:01:14,920
0,360 360,570 570,1050 1080,1200 1200,1380
So going back, you know

2036
01:01:14,920 --> 01:01:16,870
0,210 210,480 1020,1140 1140,1410 1410,1950
this is the first right.

2037
01:01:17,630 --> 01:01:19,310
0,120 120,420 420,1020 1110,1380 1380,1680
The second write the third

2038
01:01:19,310 --> 01:01:21,710
0,480 900,1080 1080,1230 1230,1560 1560,2400
right they're all going into

2039
01:01:21,740 --> 01:01:23,600
0,120 120,690 1170,1440 1440,1620 1620,1860
the log and they're written

2040
01:01:23,600 --> 01:01:24,800
0,210 210,690
to disk.

2041
01:01:24,890 --> 01:01:26,060
0,210 210,420 420,480 480,870 870,1170
A in the walker walk

2042
01:01:26,060 --> 01:01:27,320
0,210 210,300 300,390 390,840 1110,1260
part of the disk, and

2043
01:01:27,320 --> 01:01:28,880
0,180 180,360 360,510 510,990 1260,1560
then this is the commit

2044
01:01:28,880 --> 01:01:31,000
0,510 930,1590
record header.

2045
01:01:31,060 --> 01:01:31,930
0,150 150,270 270,630 630,780 780,870
And then presumably what is

2046
01:01:31,930 --> 01:01:33,260
0,210 210,750
this face.

2047
01:01:41,720 --> 01:01:43,220
0,240 240,300 300,510 510,960
What is this park.

2048
01:01:43,340 --> 01:01:44,510
0,150 150,360 360,600 600,810 810,1170
Is that the bit map

2049
01:01:44,540 --> 01:01:45,600
0,540
setting.

2050
01:01:45,900 --> 01:01:47,580
0,810 1080,1290 1290,1440 1440,1500 1500,1680
No, so what do we

2051
01:01:47,580 --> 01:01:48,780
0,180 180,510 510,900 900,990 990,1200
think actually stored in this

2052
01:01:48,780 --> 01:01:50,240
0,210 210,480 480,930
b right free.

2053
01:01:51,980 --> 01:01:54,800
0,780 780,1320 1350,2070 2070,2190 2190,2820
Here you creating the file

2054
01:01:54,950 --> 01:01:57,080
0,600 930,1260 1380,1650 1650,1950 1950,2130
oh the I node for

2055
01:01:57,080 --> 01:02:00,410
0,360 360,1500 1530,2220 2250,3090 3090,3330
X updating the directory and

2056
01:02:00,410 --> 01:02:02,120
0,240 240,780 780,1260 1260,1620 1620,1710
then also actually making the

2057
01:02:02,120 --> 01:02:03,360
0,270 270,780
file itself.

2058
01:02:03,360 --> 01:02:04,830
0,270 270,390 390,600 600,870 870,1470
Yeah, and so and we

2059
01:02:04,830 --> 01:02:05,760
0,180 180,300 300,390 390,690 690,930
didn't do it here correct,

2060
01:02:05,760 --> 01:02:07,440
0,420 480,690 690,900 900,1110 1110,1680
because in these be rights

2061
01:02:07,500 --> 01:02:08,900
0,180 180,420 420,810
that didn't happen.

2062
01:02:08,900 --> 01:02:10,360
0,240 240,330 330,570 570,900
Now we're doing it.

2063
01:02:11,090 --> 01:02:12,890
0,210 210,510 510,900 960,1200 1200,1800
So what, what what phases

2064
01:02:12,890 --> 01:02:14,300
0,90 90,180 180,810
of the transaction.

2065
01:02:16,200 --> 01:02:18,690
0,780 780,900 900,1740 1770,2130 2130,2490
Installing the changes yes installing

2066
01:02:18,690 --> 01:02:19,680
0,90 90,480 480,750 750,900 900,990
the changes correct what we

2067
01:02:19,680 --> 01:02:21,400
0,180 180,630 630,1080
did here is.

2068
01:02:21,490 --> 01:02:22,620
0,570
WE.

2069
01:02:22,910 --> 01:02:24,980
0,600 600,780 780,1350 1740,1980 1980,2070
Log the right then we

2070
01:02:24,980 --> 01:02:27,470
0,630 780,1500 1530,1800 1800,2070 2070,2490
committed the file system operation

2071
01:02:27,470 --> 01:02:28,670
0,60 60,360 360,900 900,1020 1020,1200
to create operation and now

2072
01:02:28,670 --> 01:02:30,100
0,60 60,600 600,870
we're installing it.

2073
01:02:30,430 --> 01:02:31,210
0,180 180,360 360,510 510,690 690,780
For now we're putting the

2074
01:02:31,210 --> 01:02:32,440
0,270 270,330 330,450 450,600 600,1230
blocks in their home location.

2075
01:02:34,300 --> 01:02:35,840
0,240 240,1020
And now.

2076
01:02:35,990 --> 01:02:36,680
0,150 150,240 240,330 330,540 540,690
And what does this be

2077
01:02:36,680 --> 01:02:37,980
0,210 210,360 360,690
right to them.

2078
01:02:44,500 --> 01:02:46,000
0,570 570,660 660,1260 1260,1410 1410,1500
Clearing the logs, yeah it's

2079
01:02:46,000 --> 01:02:47,760
0,270 270,600 600,1140
clear lock exactly.

2080
01:02:47,760 --> 01:02:49,260
0,210 210,570 570,930 930,1140 1140,1500
So basically this, this this.

2081
01:02:50,510 --> 01:02:51,740
0,150 150,450 450,780 780,900 900,1230
The system called was writing

2082
01:02:51,740 --> 01:02:53,030
0,300 300,510 510,750 750,990 990,1290
thirty three forty six thirty

2083
01:02:53,030 --> 01:02:54,650
0,510 810,1140 1140,1260 1260,1500 1500,1620
two and to actually do

2084
01:02:54,650 --> 01:02:56,150
0,420 420,690 690,780 780,1050 1050,1500
that using the logging system

2085
01:02:56,150 --> 01:02:57,470
0,150 150,450 450,720 720,1020 1020,1320
that basically turns into this

2086
01:02:57,470 --> 01:02:58,560
0,210 210,510
set of.

2087
01:02:59,280 --> 01:03:01,080
0,540 540,1230
A disgrace.

2088
01:03:01,620 --> 01:03:02,760
0,210 210,510 510,600 600,870 870,1140
Right where the first part

2089
01:03:02,760 --> 01:03:04,260
0,240 240,870 870,990 990,1350 1350,1500
is installing the law in

2090
01:03:04,320 --> 01:03:05,250
0,60 60,330 330,540 540,690 690,930
the first part is actually

2091
01:03:05,250 --> 01:03:06,240
0,420 420,510 510,810 810,900 900,990
logging the rights in the

2092
01:03:06,240 --> 01:03:07,530
0,270 270,540 540,720 720,1170 1170,1290
second part is installing the

2093
01:03:07,530 --> 01:03:08,380
0,330
law.

2094
01:03:09,860 --> 01:03:10,610
0,180 180,390 390,480 480,540 540,750
And these are the two

2095
01:03:10,610 --> 01:03:11,810
0,270 270,360 360,450 450,690 690,1200
rights due to commit records.

2096
01:03:15,040 --> 01:03:15,910
0,120 120,180 180,330 330,660 750,870
So it makes sense, is

2097
01:03:15,910 --> 01:03:17,890
0,210 210,600 600,780 780,1380 1380,1980
it possible to infer where

2098
01:03:17,890 --> 01:03:19,720
0,360 360,750 840,1320 1320,1500 1500,1830
begin up and end up

2099
01:03:19,720 --> 01:03:21,160
0,150 150,570 660,840 840,990 990,1440
would run from that race.

2100
01:03:21,760 --> 01:03:23,740
0,630 630,1050 1080,1320 1320,1800 1800,1980
Um, well, so we're sort

2101
01:03:23,740 --> 01:03:25,120
0,90 90,480 510,900 900,1050 1050,1380
of no correct, so where

2102
01:03:25,120 --> 01:03:26,500
0,330 330,330 330,990 990,1200 1200,1380
did, um, we don't really

2103
01:03:26,500 --> 01:03:27,400
0,120 120,240 240,480 480,660 660,900
know what begin off start

2104
01:03:27,400 --> 01:03:29,590
0,960 990,1320 1320,1590 1590,1860 1860,2190
zig any file system calls

2105
01:03:29,590 --> 01:03:30,550
0,270 270,360 360,450 450,720 720,960
starts with the beginning up.

2106
01:03:31,420 --> 01:03:32,530
0,600 600,720 720,960 960,1050 1050,1110
And it must be the

2107
01:03:32,530 --> 01:03:33,840
0,360 360,720
case that.

2108
01:03:33,900 --> 01:03:35,400
0,180 180,480 480,780 780,1080 1080,1500
The committee record correct is

2109
01:03:35,430 --> 01:03:38,400
0,870 870,1380 1380,1710 1710,2100 2460,2970
written in end up so.

2110
01:03:39,110 --> 01:03:39,920
0,180 180,390 390,540 540,690 690,810
We know that this is

2111
01:03:39,920 --> 01:03:41,080
0,570
the.

2112
01:03:41,140 --> 01:03:42,970
0,780 840,1110 1110,1440 1440,1620 1620,1830
Um end up of some

2113
01:03:42,970 --> 01:03:44,620
0,240 240,480 480,1080
file system operation.

2114
01:03:48,010 --> 01:03:49,500
0,150 150,360 360,510 510,900
Does that make sense.

2115
01:03:53,270 --> 01:03:55,580
0,240 240,360 360,570 570,1320 1740,2310
Okay, so that's basically x86

2116
01:03:55,580 --> 01:03:58,520
0,390 570,1230 1230,1350 1350,1770 2160,2940
logging logging in action, um,

2117
01:03:58,880 --> 01:04:00,140
0,480 480,900 900,930 930,1110 1110,1260
and when I talk about

2118
01:04:00,140 --> 01:04:03,050
0,60 60,360 360,1230 1560,2280 2280,2910
a couple complications, um, and

2119
01:04:03,320 --> 01:04:06,740
0,330 330,750 810,1410 1410,2040 2250,3420
even this dirt simple naive,

2120
01:04:06,770 --> 01:04:08,930
0,360 360,690 690,1050 1050,1440 1440,2160
a logging scheme actually has

2121
01:04:08,960 --> 01:04:10,280
0,900
complications.

2122
01:04:10,540 --> 01:04:11,830
0,300 300,600 600,780 780,900 900,1290
Um, one thing to immediately

2123
01:04:11,830 --> 01:04:13,480
0,150 150,240 240,510 510,750 1230,1650
know the course is a

2124
01:04:13,960 --> 01:04:14,960
0,450
no.

2125
01:04:15,640 --> 01:04:16,300
0,120 120,270 270,330 330,570 570,660
Is this a very per

2126
01:04:16,300 --> 01:04:18,000
0,330 330,1140
formant implementation.

2127
01:04:18,710 --> 01:04:19,400
0,150 150,210 210,300 300,600 600,690
Did you by looking at

2128
01:04:19,400 --> 01:04:20,580
0,90 90,660
the St.

2129
01:04:26,990 --> 01:04:30,650
0,630 1200,1800 1800,2280 3330,3450 3450,3660
No, why not I know

2130
01:04:30,650 --> 01:04:31,820
0,180 180,300 300,420 420,1020 1020,1170
this is a basically two

2131
01:04:31,820 --> 01:04:33,480
0,300 300,690 690,930
simple questions, but.

2132
01:04:33,740 --> 01:04:35,340
0,240 240,540 540,630 630,1050
It's important to ask.

2133
01:04:36,510 --> 01:04:37,840
0,990
Lake.

2134
01:04:39,460 --> 01:04:40,900
0,270 270,570 570,720 720,990 990,1440
You're writing this stuff twice

2135
01:04:40,900 --> 01:04:42,430
0,330 360,930 930,1080 1080,1260 1260,1530
right, yeah you're writing yourself

2136
01:04:42,430 --> 01:04:43,750
0,360 360,780 780,990 990,1020 1020,1320
twice you write a file

2137
01:04:43,750 --> 01:04:44,590
0,240 240,330 330,420 420,600 600,840
f over a big file

2138
01:04:44,590 --> 01:04:45,490
0,330 360,510 510,630 630,720 720,900
f I'm going to write

2139
01:04:45,490 --> 01:04:46,660
0,150 150,330 330,540 540,660 660,1170
that big file f twice.

2140
01:04:48,000 --> 01:04:50,070
0,270 270,660 840,1320 1440,1890 1890,2070
And so, um, certainly not

2141
01:04:50,070 --> 01:04:51,210
0,360 360,480 480,960 960,1110 1110,1140
particularly high performance where I

2142
01:04:51,210 --> 01:04:52,260
0,210 210,540 540,660 660,960 960,1050
mean basically {re-cutting -} the

2143
01:04:52,260 --> 01:04:53,550
0,450 450,810 810,960 960,1020 1020,1290
performance immediately by a factor

2144
01:04:53,550 --> 01:04:54,580
0,90 90,420
of two.

2145
01:04:55,680 --> 01:04:56,940
0,300 300,360 360,540 540,810 810,1260
Just to get crash safety.

2146
01:04:57,620 --> 01:04:59,000
0,480 540,870 870,990 990,1110 1110,1380
Um, and so we'll see

2147
01:04:59,000 --> 01:05:00,800
0,360 360,1170 1350,1500 1500,1680 1680,1800
on on you when you're

2148
01:05:00,800 --> 01:05:03,140
0,330 330,840 1140,1770 1770,2040 2040,2340
reading the um, H D

2149
01:05:03,140 --> 01:05:05,000
0,780 780,900 900,1140 1140,1500 1500,1860
H D free paper for

2150
01:05:05,000 --> 01:05:06,200
0,60 60,570 660,840 840,1050 1050,1200
a monday and one thing

2151
01:05:06,200 --> 01:05:06,830
0,120 120,210 210,390 390,510 510,630
you should keep in your

2152
01:05:06,830 --> 01:05:08,450
0,390 390,720 720,960 960,1410 1440,1620
head while reading is get

2153
01:05:08,450 --> 01:05:09,380
0,480
how.

2154
01:05:09,570 --> 01:05:10,920
0,210 210,450 450,570 570,780 780,1350
How do I get around

2155
01:05:10,950 --> 01:05:12,060
0,270 270,420 420,720 720,810 810,1110
for this factor of two.

2156
01:05:15,140 --> 01:05:16,140
0,570
Okay.

2157
01:05:16,660 --> 01:05:17,620
0,210 210,450 450,510 510,630 630,960
So, is it the case

2158
01:05:17,620 --> 01:05:18,970
0,120 120,300 300,600 600,930 930,1350
that you write the h

2159
01:05:18,970 --> 01:05:20,980
0,120 120,240 240,690 690,1530
and the Ice separately.

2160
01:05:21,460 --> 01:05:23,780
0,1080 1080,1290 1290,1410 1410,1800
Yeah I think so.

2161
01:05:23,960 --> 01:05:26,810
0,450 840,1050 1050,1620 1920,2640 2640,2850
Okay, okay, I'll I'll show

2162
01:05:26,810 --> 01:05:27,860
0,120 120,180 180,210 210,510 510,1050
you in a second, why,

2163
01:05:27,980 --> 01:05:29,420
0,360 360,630 630,750 750,1110 1110,1440
um, what is happening there.

2164
01:05:31,760 --> 01:05:33,820
0,240 240,750 900,1560
Or maybe a.

2165
01:05:34,960 --> 01:05:35,770
0,180 180,300 300,420 420,600 600,810
Well, let me not commit

2166
01:05:35,770 --> 01:05:37,810
0,90 90,300 300,450 450,1650 1770,2040
to much to answer, but

2167
01:05:37,810 --> 01:05:39,370
0,60 60,930 960,1260 1260,1470 1470,1560
I will get back to

2168
01:05:39,370 --> 01:05:40,180
0,210
it.

2169
01:05:40,210 --> 01:05:41,350
0,480 480,660 660,810 810,870 870,1140
That's right am I having

2170
01:05:41,350 --> 01:05:42,820
0,210 210,600 600,1080 1080,1350 1350,1470
the empty line, not the

2171
01:05:42,820 --> 01:05:44,140
0,180 180,360 360,750 780,990 990,1320
h and I but yeah

2172
01:05:44,620 --> 01:05:48,850
0,450 480,3510 3540,3900 3900,4140 4140,4230
new eyes, new line is

2173
01:05:48,850 --> 01:05:50,530
0,90 90,360 360,630 960,1380 1410,1680
a separate right okay, thank

2174
01:05:50,530 --> 01:05:51,460
0,390
you.

2175
01:05:51,760 --> 01:05:52,960
0,120 120,690
You're welcome.

2176
01:05:52,960 --> 01:05:56,650
0,690 1110,1680 1680,2430 2700,2880 2880,3690
Um, OK, um, there's complications

2177
01:05:56,740 --> 01:05:57,640
0,450 450,510 510,660 660,720 720,900
and I want to talk

2178
01:05:57,640 --> 01:05:58,390
0,30 30,240 240,360 360,570 570,750
a little bit about these

2179
01:05:58,390 --> 01:05:59,780
0,870
complications.

2180
01:06:05,970 --> 01:06:07,560
0,270 270,360 360,780 780,1290 1290,1590
Here's our basic scheme basic

2181
01:06:07,560 --> 01:06:10,380
0,210 210,930 1350,1920 2010,2520 2520,2820
data structures, and there's free

2182
01:06:10,380 --> 01:06:11,520
0,600 600,660 660,840 840,900 900,1140
complications I want to talk

2183
01:06:11,520 --> 01:06:12,420
0,360
about.

2184
01:06:15,360 --> 01:06:16,560
0,330 330,480 480,630 630,750 750,1200
Maybe I'll call them challenges

2185
01:06:16,560 --> 01:06:17,760
0,390 390,480 480,720 720,930 930,1200
whatever you wanna call them.

2186
01:06:21,490 --> 01:06:23,260
0,120 120,390 390,900 930,1140 1140,1770
The first is a eviction.

2187
01:06:27,540 --> 01:06:29,020
0,960
AW.

2188
01:06:29,080 --> 01:06:30,220
0,540 540,690 690,960 960,1050 1050,1140
And the issue is as

2189
01:06:30,220 --> 01:06:31,600
0,720 780,1050 1050,1170 1170,1290 1290,1380
follows, let's say we go

2190
01:06:31,600 --> 01:06:32,950
0,240 240,300 300,480 480,750 750,1350
back to this picture here.

2191
01:06:33,920 --> 01:06:35,300
0,510 510,600 600,840 840,1020 1020,1380
And you know be cash

2192
01:06:35,300 --> 01:06:36,400
0,90 90,540
is full.

2193
01:06:37,950 --> 01:06:40,680
0,810 840,1650 1980,2160 2160,2370 2370,2730
And, um and sort of

2194
01:06:40,680 --> 01:06:42,750
0,450 450,600 600,1320 1410,1830 1830,2070
transaction in progress, um, let's

2195
01:06:42,750 --> 01:06:45,000
0,300 300,540 540,990 990,1440 1440,2250
see, we've just updated 45.

2196
01:06:45,570 --> 01:06:46,890
0,420 420,540 540,750 750,930 930,1320
Um, it's now gone block

2197
01:06:46,890 --> 01:06:47,820
0,540 540,630 630,750 750,870 870,930
45, so it's going to

2198
01:06:47,820 --> 01:06:49,280
0,210 210,270 270,480 480,930
write the next block.

2199
01:06:49,530 --> 01:06:50,790
0,390 390,480 480,750 750,840 840,1260
And the cache is full.

2200
01:06:51,700 --> 01:06:53,200
0,960
And.

2201
01:06:53,500 --> 01:06:54,820
0,780
The.

2202
01:06:55,820 --> 01:06:56,980
0,660
And.

2203
01:06:57,910 --> 01:06:59,410
0,330 330,870 870,1140 1140,1350 1350,1500
Let's say you know we

2204
01:06:59,410 --> 01:07:00,250
0,420 420,480 480,660 660,780 780,840
don't we don't have a

2205
01:07:00,250 --> 01:07:01,960
0,330 330,420 420,540 540,900 1110,1710
solution for this yet, but

2206
01:07:01,960 --> 01:07:03,880
0,60 60,360 360,1140 1200,1380 1380,1920
the cash decides, um, it

2207
01:07:03,880 --> 01:07:05,680
0,180 180,270 270,570 570,1290
wants to evict 45.

2208
01:07:06,550 --> 01:07:08,140
0,510 750,1080 1080,1200 1200,1290 1290,1590
Correct, and if it wants

2209
01:07:08,140 --> 01:07:09,310
0,90 90,360 360,840 840,960 960,1170
to evict 45 but will

2210
01:07:09,310 --> 01:07:10,240
0,240 240,360 360,510 510,810 810,930
mean that will mean we

2211
01:07:10,240 --> 01:07:11,230
0,120 120,240 240,480 480,870 870,990
have to write it through

2212
01:07:11,230 --> 01:07:13,060
0,150 150,330 330,810
its home location.

2213
01:07:13,720 --> 01:07:15,190
0,450 450,810 810,960 960,1050 1050,1470
How bad would it be

2214
01:07:15,190 --> 01:07:16,600
0,150 150,510 510,600 600,1020 1020,1410
to write the block here.

2215
01:07:17,600 --> 01:07:19,880
0,180 180,270 270,660 660,1770
You know vic forty-five.

2216
01:07:21,060 --> 01:07:22,620
0,420 420,780 780,1290 1290,1380 1380,1560
And right 45 to home

2217
01:07:22,620 --> 01:07:23,840
0,630
location.

2218
01:07:28,600 --> 01:07:29,800
0,150 150,300 300,510 510,600 600,1200
Is that good or bad.

2219
01:07:44,290 --> 01:07:45,550
0,270 270,480 480,720 720,870 870,1260
Would any rule be broken,

2220
01:07:45,550 --> 01:07:46,820
0,90 90,210 210,390 390,720
if we did that.

2221
01:07:47,410 --> 01:07:48,700
0,150 150,720
I guess.

2222
01:07:48,850 --> 01:07:51,310
0,330 690,1320 1680,1950 1950,2040 2040,2460
But as if a crash

2223
01:07:51,310 --> 01:07:53,800
0,450 450,1140 1140,1320 1320,2010 2040,2490
happens before the other rights

2224
01:07:53,800 --> 01:07:56,290
0,90 90,180 180,420 420,1590 1800,2490
in the same transaction occurs

2225
01:07:56,290 --> 01:07:58,570
0,540 690,1470 1470,1950 1950,2160 2160,2280
then basically autonomous it is

2226
01:07:58,570 --> 01:08:01,740
0,600
broken.

2227
01:08:02,980 --> 01:08:04,600
0,390 390,510 510,900 900,1440 1440,1620
Math is basically violates this

2228
01:08:04,600 --> 01:08:05,560
0,240 240,480 480,750 750,900 900,960
right ahead rule that I

2229
01:08:05,560 --> 01:08:06,880
0,270 270,720
talked about.

2230
01:08:07,610 --> 01:08:08,690
0,180 180,390 390,510 510,840 840,1080
You have to write all

2231
01:08:08,690 --> 01:08:09,710
0,90 90,420 420,510 510,630 630,1020
the blocks to the lock

2232
01:08:09,710 --> 01:08:11,240
0,570 570,720 720,1020 1020,1230 1230,1530
before you write any block

2233
01:08:11,240 --> 01:08:12,960
0,90 90,210 210,630 630,1140
to each home location.

2234
01:08:25,780 --> 01:08:26,440
0,150 150,240 240,510 510,600 600,660
So it has to be

2235
01:08:26,440 --> 01:08:27,640
0,90 90,450 450,600 600,780 780,1200
the case right the cash

2236
01:08:27,640 --> 01:08:30,550
0,270 270,810 810,1380 1860,2280 2280,2910
does not victor any block

2237
01:08:30,550 --> 01:08:31,660
0,150 150,390 390,480 480,570 570,1110
that sits in the log.

2238
01:08:32,640 --> 01:08:33,940
0,120 120,240 240,390 390,780
Does that make sense.

2239
01:08:34,750 --> 01:08:36,440
0,180 180,270 270,690 690,1050
So the solution is.

2240
01:08:36,950 --> 01:08:38,520
0,300 300,930
Don't evict.

2241
01:08:40,710 --> 01:08:42,140
0,900
Blocks.

2242
01:08:42,140 --> 01:08:43,490
0,450 450,660 660,780 780,870 870,1350
Because our in the wok.

2243
01:08:49,330 --> 01:08:51,340
0,240 240,390 390,480 480,1230 1440,2010
And this is exactly what

2244
01:08:51,340 --> 01:08:52,270
0,330 330,420 420,750 750,780 780,930
you were showing a little

2245
01:08:52,270 --> 01:08:53,470
0,120 120,720 720,930 930,1140 1140,1200
bit earlier and said I

2246
01:08:53,470 --> 01:08:54,490
0,180 180,330 330,390 390,600 600,1020
didn't want to talk about,

2247
01:08:54,880 --> 01:08:56,020
0,660 660,810 810,930 930,1020 1020,1140
um so you go to

2248
01:08:56,020 --> 01:08:57,340
0,300 300,810
log right.

2249
01:08:57,760 --> 01:08:58,990
0,360 360,540 540,630 630,1080 1080,1230
Again just to see for

2250
01:08:58,990 --> 01:09:00,360
0,30 30,360 360,840
a second there.

2251
01:09:00,480 --> 01:09:03,000
0,990 1140,1830 1830,2130 2130,2310 2310,2520
A log right here log

2252
01:09:03,000 --> 01:09:04,830
0,210 210,720 1140,1530 1530,1740 1740,1830
right again and here we

2253
01:09:04,830 --> 01:09:06,780
0,630 840,1080 1080,1290 1290,1410 1410,1950
see this call to BP.

2254
01:09:07,620 --> 01:09:08,280
0,150 150,270 270,330 330,450 450,660
And what do you think

2255
01:09:08,280 --> 01:09:09,620
0,210 210,330 330,720
beep in Dutch.

2256
01:09:11,240 --> 01:09:12,710
0,570 570,750 750,810 810,1230 1230,1470
Name sort of indicates it.

2257
01:09:16,590 --> 01:09:18,570
0,420 720,1140 1140,1320 1320,1770 1770,1980
It bends the block in

2258
01:09:18,570 --> 01:09:19,640
0,540
the.

2259
01:09:20,680 --> 01:09:22,630
0,210 210,390 390,1290 1320,1800 1800,1950
In the cash yeah, how

2260
01:09:22,630 --> 01:09:23,800
0,180 180,240 240,360 360,630 900,1170
does it do it since

2261
01:09:23,800 --> 01:09:24,700
0,150 150,360 360,600 600,720 720,900
you've been looking at this

2262
01:09:24,700 --> 01:09:27,340
0,270 270,570 600,930 930,1470 1680,2640
where your current lap extensively.

2263
01:09:28,890 --> 01:09:29,370
0,150 150,210 210,270 270,420 420,480
What do you think it

2264
01:09:29,370 --> 01:09:30,340
0,330
does.

2265
01:09:30,840 --> 01:09:32,100
0,180 180,900 930,1020 1020,1170 1170,1260
So we can look at

2266
01:09:32,100 --> 01:09:33,390
0,60 60,540 540,780 780,1080 1080,1290
the implementation, we pin but

2267
01:09:33,390 --> 01:09:34,320
0,90 90,210 210,390 390,660 660,930
we can also guess what

2268
01:09:34,320 --> 01:09:35,280
0,60 60,390
it does.

2269
01:09:40,000 --> 01:09:41,230
0,240 240,360 360,780 780,1020 1020,1230
Doesn't it essentially just make

2270
01:09:41,230 --> 01:09:42,280
0,330 360,630 630,810 810,930 930,1050
it a so that it

2271
01:09:42,280 --> 01:09:43,930
0,240 240,450 450,960 990,1140 1140,1650
doesn't get evicted by increasing

2272
01:09:43,930 --> 01:09:45,370
0,90 90,300 300,810 840,1050 1050,1440
the ref counts yeah exactly

2273
01:09:45,370 --> 01:09:45,910
0,150 150,240 240,390 390,420 420,540
this is all a big

2274
01:09:45,910 --> 01:09:47,380
0,390 420,660 660,990 990,1080 1080,1470
dodge b pinchers to increases

2275
01:09:47,380 --> 01:09:48,130
0,90 90,300 300,570 570,660 660,750
the wreck out and we

2276
01:09:48,130 --> 01:09:49,330
0,240 240,480 480,750 750,900 900,1200
know from the be cash

2277
01:09:49,330 --> 01:09:51,880
0,270 270,750 1200,1680 1680,2100 2100,2550
code correct, um, evict won't

2278
01:09:51,910 --> 01:09:53,440
0,780 780,930 930,1230 1230,1350 1350,1530
evict any blocks, we have

2279
01:09:53,440 --> 01:09:54,980
0,330 330,600 600,690 690,1080
record higher than zero.

2280
01:09:56,440 --> 01:09:57,910
0,180 180,330 330,720 720,1050 1050,1470
And so presumably somewhere later

2281
01:09:57,910 --> 01:10:00,400
0,270 270,870 1020,1590 1590,2100 2100,2490
in a logging code, when

2282
01:10:00,400 --> 01:10:01,900
0,480 480,930 930,1170 1170,1350 1350,1500
once actually a thing is

2283
01:10:01,900 --> 01:10:03,730
0,540 540,720 720,810 810,1320 1530,1830
logged, we can actually and

2284
01:10:03,730 --> 01:10:05,640
0,270 480,660 660,1050 1080,1440
in the block, right.

2285
01:10:06,530 --> 01:10:07,880
0,270 270,390 390,540 540,750 750,1350
Okay, so that's one complication,

2286
01:10:07,880 --> 01:10:08,690
0,180 180,270 270,390 390,510 510,810
so we have this pinning

2287
01:10:08,690 --> 01:10:10,460
0,270 270,540 540,780 780,1110
and pinning going on.

2288
01:10:11,080 --> 01:10:14,170
0,1650 1650,1770 1770,1860 1860,2280 2280,3090
Let's look at another complication.

2289
01:10:29,970 --> 01:10:31,560
0,240 240,390 390,660 660,900 900,1590
And the file system operations.

2290
01:10:32,700 --> 01:10:34,860
0,390 390,660 660,900 900,1560
Must fit in log.

2291
01:10:41,460 --> 01:10:42,480
0,300 300,480 480,810 810,900 900,1020
If you seem to go

2292
01:10:42,480 --> 01:10:43,650
0,210 210,330 330,420 420,720 720,1170
back to our picture here

2293
01:10:43,650 --> 01:10:44,730
0,240 240,540 540,780 780,960 960,1080
or actually maybe this is

2294
01:10:44,730 --> 01:10:46,120
0,60 60,300 300,840
a better picture.

2295
01:10:46,120 --> 01:10:47,320
0,330 330,480 480,570 570,660 660,1200
How big is the login

2296
01:10:47,320 --> 01:10:48,520
0,150 150,240 240,720
X two six.

2297
01:10:53,520 --> 01:10:55,410
0,330 330,1080 1110,1350 1350,1560 1560,1890
Hang blocks, yeah thirty blocks

2298
01:10:55,410 --> 01:10:57,630
0,390 390,630 630,930 1290,1830 1830,2220
32 minus two a so

2299
01:10:57,630 --> 01:10:59,340
0,90 90,300 300,630 630,1110
you are Mac's eyes.

2300
01:10:59,370 --> 01:11:01,760
0,390 390,690 690,1380 1380,1740
Max watt sizes free.

2301
01:11:03,840 --> 01:11:04,800
0,150 150,360 360,540 540,720 720,960
Of course we could bump

2302
01:11:04,800 --> 01:11:06,690
0,60 60,450 840,1410 1440,1680 1680,1890
it up in real file

2303
01:11:06,690 --> 01:11:07,530
0,240 240,480 480,630 630,660 660,840
system runs with a much

2304
01:11:07,530 --> 01:11:08,730
0,210 210,630 630,990 990,1050 1050,1200
bigger log, but it doesn't

2305
01:11:08,730 --> 01:11:10,560
0,180 180,630 990,1170 1170,1350 1350,1830
really matter no matter what

2306
01:11:10,800 --> 01:11:11,430
0,150 150,360 360,420 420,540 540,630
it has to be the

2307
01:11:11,430 --> 01:11:12,720
0,330 330,660 660,780 780,990 990,1290
case, correct the file system

2308
01:11:12,720 --> 01:11:14,550
0,450 450,750 750,960 960,1200 1200,1830
operation must fit in thirty

2309
01:11:14,550 --> 01:11:15,540
0,570
blocks.

2310
01:11:16,010 --> 01:11:17,330
0,300 300,540 540,660 660,930 930,1320
Because if a system operation

2311
01:11:17,330 --> 01:11:18,170
0,150 150,330 330,450 450,630 630,840
would try to write more

2312
01:11:18,170 --> 01:11:19,790
0,90 90,300 300,840 1110,1380 1380,1620
to three blocks, that means

2313
01:11:19,790 --> 01:11:20,750
0,180 180,300 300,450 450,540 540,960
we would have to spill

2314
01:11:20,750 --> 01:11:22,520
0,510 510,930 930,1170 1170,1680 1680,1770
something on this location and

2315
01:11:22,520 --> 01:11:23,210
0,120 120,270 270,480 480,570 570,690
we're not allowed to do

2316
01:11:23,210 --> 01:11:24,590
0,270 300,690 690,840 840,990 990,1380
that because that would violate

2317
01:11:24,590 --> 01:11:25,610
0,90 90,270 270,510 510,720 720,1020
the right ahead rule again.

2318
01:11:26,270 --> 01:11:26,930
0,150 150,240 240,510 510,570 570,660
So it has to be

2319
01:11:26,930 --> 01:11:27,860
0,90 90,330 330,420 420,690 690,930
the case that every file

2320
01:11:27,860 --> 01:11:29,120
0,270 270,690 690,960 960,1170 1170,1260
system operation fits into the

2321
01:11:29,120 --> 01:11:30,100
0,480
log.

2322
01:11:31,440 --> 01:11:32,760
0,90 90,210 210,360 360,750
Does that make sense.

2323
01:11:35,040 --> 01:11:36,390
0,240 240,600 600,690 690,1050 1140,1350
In fact, you know how

2324
01:11:36,390 --> 01:11:37,110
0,60 60,180 180,360 360,480 480,720
do you think we got

2325
01:11:37,110 --> 01:11:38,420
0,90 90,660
to 42.

2326
01:11:38,450 --> 01:11:39,580
0,600
Authority.

2327
01:11:50,670 --> 01:11:51,480
0,240 240,330 330,540 540,630 630,810
Does it have to do

2328
01:11:51,480 --> 01:11:52,860
0,390 390,540 540,690 690,930 930,1380
anything with how many blocks

2329
01:11:52,860 --> 01:11:54,540
0,420 420,1110
actually fit.

2330
01:11:55,060 --> 01:11:56,050
0,210 210,510 510,600 600,690 690,990
You were a way to

2331
01:11:56,110 --> 01:11:59,170
0,390 420,1350 2010,2190 2190,2520 2520,3060
like basically how many blocks

2332
01:11:59,170 --> 01:12:01,540
0,180 180,1050 1050,1710 1710,2070 2070,2370
does z maximum blocks correct

2333
01:12:01,540 --> 01:12:02,770
0,90 90,330 330,630 630,1020 1020,1230
the file system operation could

2334
01:12:02,770 --> 01:12:03,720
0,420
write.

2335
01:12:04,280 --> 01:12:05,120
0,210 210,330 330,420 420,630 630,840
And that is really what

2336
01:12:05,120 --> 01:12:07,520
0,570 690,1080 1080,1650 1800,2310 2310,2400
the number thirty has to

2337
01:12:07,520 --> 01:12:09,710
0,330 360,840 840,1320 1320,1590 1590,2190
be definitely bigger than any

2338
01:12:10,100 --> 01:12:11,210
0,120 120,210 210,330 330,810 810,1110
you know the Max number

2339
01:12:11,210 --> 01:12:12,520
0,120 120,750
of blocks.

2340
01:12:14,940 --> 01:12:17,420
0,180 180,510 510,900 900,1830
The file system operation.

2341
01:12:20,500 --> 01:12:21,820
0,780
Alright.

2342
01:12:26,570 --> 01:12:27,350
0,240 240,390 390,450 450,690 690,780
And so, in fact you

2343
01:12:27,350 --> 01:12:28,610
0,600 600,900 900,990 990,1050 1050,1260
know Robert and I did

2344
01:12:28,610 --> 01:12:29,450
0,210 210,390 390,600 600,750 750,840
because we went through all

2345
01:12:29,450 --> 01:12:30,710
0,60 60,270 270,510 510,1050 1050,1260
the file system operations looked

2346
01:12:30,710 --> 01:12:32,630
0,120 120,360 360,930 930,1320 1320,1920
at them and decide whether

2347
01:12:32,810 --> 01:12:34,220
0,210 210,600 750,840 840,1170 1170,1410
a what's the maximum number

2348
01:12:34,220 --> 01:12:35,090
0,240 240,450 450,570 570,780 780,870
is and it turns out

2349
01:12:35,090 --> 01:12:35,750
0,90 90,180 180,390 390,570 570,660
that the actual number is

2350
01:12:35,750 --> 01:12:37,040
0,240 240,540 540,720 720,810 810,1290
much lower than the thirty

2351
01:12:37,340 --> 01:12:38,600
0,390 390,630 630,750 750,1080 1080,1260
um, but you know we'll

2352
01:12:38,600 --> 01:12:39,710
0,390 390,480 480,540 540,900 900,1110
see in a second a

2353
01:12:39,710 --> 01:12:41,640
0,300 300,630 630,1410
couple interesting complications.

2354
01:12:42,870 --> 01:12:43,890
0,180 180,270 270,570 570,690 690,1020
Like, for example the operation

2355
01:12:43,890 --> 01:12:44,850
0,90 90,210 210,360 360,570 570,960
that we look so far

2356
01:12:44,850 --> 01:12:45,930
0,150 150,450 450,540 540,840 840,1080
like creating a file correct

2357
01:12:45,930 --> 01:12:46,740
0,120 120,330 330,390 390,750 750,810
is only a handful of

2358
01:12:46,740 --> 01:12:48,540
0,540 570,900 900,1080 1080,1350 1350,1800
walks the file system operation

2359
01:12:48,540 --> 01:12:50,130
0,120 120,270 270,570 570,1050 1380,1590
is like five blocks, in

2360
01:12:50,130 --> 01:12:53,040
0,210 210,870 900,1890 1890,2460 2610,2910
fact most operations are a

2361
01:12:53,040 --> 01:12:54,210
0,360 360,420 420,870 870,1020 1020,1170
handful of blocks not that

2362
01:12:54,210 --> 01:12:55,320
0,390 480,750 750,870 870,1020 1020,1110
many do you think of

2363
01:12:55,320 --> 01:12:56,820
0,180 180,660 660,900 900,1230 1230,1500
any operations that might write

2364
01:12:56,820 --> 01:12:58,440
0,270 270,480 480,750 750,1260
many many, many blocks.

2365
01:13:13,470 --> 01:13:14,670
0,450 450,720 720,840 840,900 900,1200
You're right on a huge

2366
01:13:14,670 --> 01:13:16,290
0,780 930,1170 1170,1380 1380,1410 1410,1620
file, yeah right, a huge

2367
01:13:16,290 --> 01:13:17,920
0,360 390,600 600,1080
file right so.

2368
01:13:17,920 --> 01:13:19,210
0,150 150,570 570,690 690,1170 1170,1290
Um, what if we you

2369
01:13:19,210 --> 01:13:20,530
0,300 300,750 750,1020 1020,1110 1110,1320
know, um called the write

2370
01:13:20,530 --> 01:13:21,820
0,270 270,750 750,840 840,960 960,1290
system call and we pass

2371
01:13:21,820 --> 01:13:22,780
0,90 90,510 510,630 630,720 720,960
the buffer, we have a

2372
01:13:22,780 --> 01:13:24,240
0,420 420,480 480,870
megabyte of data.

2373
01:13:24,680 --> 01:13:26,440
0,390 390,450 450,750 750,1260
Like a thousand walks.

2374
01:13:27,030 --> 01:13:27,840
0,90 90,300 300,480 480,600 600,810
It seems like we're being

2375
01:13:27,840 --> 01:13:29,520
0,300 300,690 720,1080 1260,1500 1500,1680
shares trouble right it would

2376
01:13:29,520 --> 01:13:31,080
0,660 660,720 720,870 870,1080 1080,1560
violate you know these maximum

2377
01:13:31,080 --> 01:13:31,980
0,330
room.

2378
01:13:32,010 --> 01:13:33,930
0,150 150,690 1020,1500 1530,1740 1740,1920
And so, um, let's look

2379
01:13:33,930 --> 01:13:34,760
0,300
at.

2380
01:13:35,630 --> 01:13:36,820
0,660
Right.

2381
01:13:44,080 --> 01:13:45,880
0,600
Right.

2382
01:13:48,070 --> 01:13:49,870
0,270 270,660 660,930 930,1290 1290,1800
She's right calls file write

2383
01:13:51,070 --> 01:13:53,440
0,480 480,930 1290,1650 1650,1950 1950,2370
file write huge file right.

2384
01:13:54,180 --> 01:13:56,310
0,450 450,930 930,1050 1050,1830 1830,2130
Um, okay, so here's an

2385
01:13:56,310 --> 01:13:57,810
0,330 330,570 570,930 930,1020 1020,1500
ota file descriptor I note

2386
01:13:57,840 --> 01:13:58,890
0,150 150,330 330,480 480,600 600,1050
and bring to my code

2387
01:13:59,160 --> 01:13:59,880
0,90 90,150 150,390 390,540 540,720
or the code that I've

2388
01:13:59,880 --> 01:14:02,220
0,120 120,210 210,840 1230,1800
on the display and.

2389
01:14:02,280 --> 01:14:03,780
0,540 540,840 840,1020 1020,1200 1200,1500
Notice that what does this

2390
01:14:03,780 --> 01:14:04,960
0,240 240,600
code do.

2391
01:14:09,440 --> 01:14:10,490
0,180 180,360 360,480 480,540 540,1050
Yeah you read the comments

2392
01:14:10,490 --> 01:14:11,930
0,240 240,300 300,840 870,1350 1350,1440
right on top here and

2393
01:14:11,930 --> 01:14:13,190
0,270 300,630 630,1050 1050,1140 1140,1260
then basically explains it, but

2394
01:14:13,190 --> 01:14:14,120
0,120 120,210 210,390 390,720 720,930
this is what happens when

2395
01:14:14,120 --> 01:14:15,830
0,120 120,420 420,570 570,1140 1530,1710
the right is split in

2396
01:14:15,830 --> 01:14:17,740
0,300 300,630 630,990 990,1500
many numerous smaller REITs.

2397
01:14:18,710 --> 01:14:20,510
0,330 330,810 930,1530 1530,1710 1710,1800
Um, so what really is

2398
01:14:20,510 --> 01:14:21,710
0,240 240,480 480,690 690,1050 1050,1200
going on here correctly, we

2399
01:14:21,710 --> 01:14:24,350
0,30 30,720 720,1050 1050,1530 1890,2640
are ensuring that the um.

2400
01:14:25,000 --> 01:14:25,810
0,180 180,480 480,690 690,750 750,810
The whole right as a

2401
01:14:25,810 --> 01:14:28,150
0,390 390,690 690,1200 1350,1650 1650,2340
whole is not a atomic

2402
01:14:28,180 --> 01:14:29,560
0,330 330,840 840,930 930,1170 1170,1380
that's OK, you know the

2403
01:14:29,560 --> 01:14:31,000
0,330 330,570 570,810 810,1020 1020,1440
right unique system called semantics,

2404
01:14:31,000 --> 01:14:32,530
0,240 240,450 450,1020 1020,1200 1200,1530
don't actually require that actually

2405
01:14:32,530 --> 01:14:34,990
0,360 360,690 780,1560 1560,2070 2100,2460
all the thousand blocks if

2406
01:14:34,990 --> 01:14:36,430
0,30 30,540 540,600 600,900 900,1440
a megabyte or actually written

2407
01:14:36,430 --> 01:14:38,230
0,420 420,630 840,1050 1050,1230 1230,1800
atomic lea and user requires

2408
01:14:38,230 --> 01:14:39,250
0,120 120,240 240,480 480,930 930,1020
that we don't corrupt the

2409
01:14:39,250 --> 01:14:42,130
0,270 270,720 870,1800 1800,2550 2580,2880
file system between a don't

2410
01:14:42,130 --> 01:14:43,120
0,240 240,300 300,540 540,780 780,990
corrupt the file system while

2411
01:14:43,120 --> 01:14:43,980
0,240 240,450
doing it.

2412
01:14:44,090 --> 01:14:46,010
0,240 240,330 330,780 780,1230 1440,1920
And so basically we, um

2413
01:14:46,010 --> 01:14:48,050
0,60 60,450 450,990 1260,1920 1920,2040
yeah actually six splits a

2414
01:14:48,050 --> 01:14:49,070
0,210 210,570 570,690 690,780 780,1020
big right in a number

2415
01:14:49,070 --> 01:14:50,240
0,60 60,450 450,810 810,960 960,1170
of smaller writes and writes

2416
01:14:50,240 --> 01:14:52,380
0,300 300,450 450,960 960,1680
them as individual transactions.

2417
01:14:53,160 --> 01:14:54,330
0,180 180,300 300,420 420,720 720,1170
And this would basically ensures

2418
01:14:54,330 --> 01:14:55,680
0,270 270,420 420,780 780,870 870,1350
that our example if transaction

2419
01:14:55,680 --> 01:14:57,660
0,420 420,960 960,1320 1320,1680 1680,1980
allocates a block number because

2420
01:14:57,660 --> 01:14:58,590
0,150 150,300 300,330 330,540 540,930
we need a new block

2421
01:14:58,590 --> 01:15:00,030
0,240 240,330 330,810 810,1200 1200,1440
for an intermediate block worm

2422
01:15:00,030 --> 01:15:00,660
0,210 210,300 300,450 450,480 480,630
because we need a new

2423
01:15:00,660 --> 01:15:01,440
0,300 300,480 480,570 570,690 690,780
block because we're going to

2424
01:15:01,440 --> 01:15:02,790
0,210 210,360 360,540 870,1140 1140,1350
write to it at least

2425
01:15:02,790 --> 01:15:04,320
0,270 270,540 540,600 600,1020 1020,1530
that part is completely atomic

2426
01:15:04,320 --> 01:15:05,310
0,240 240,360 360,600 600,840 840,990
and the file system will

2427
01:15:05,310 --> 01:15:06,390
0,90 90,450 450,810 840,960 960,1080
be never left in an

2428
01:15:06,390 --> 01:15:08,430
0,420 420,840 1050,1770 1770,1950 1950,2040
incorrect state violating any of

2429
01:15:08,430 --> 01:15:10,400
0,270 270,480 480,870 900,1590
the file system invariance.

2430
01:15:10,490 --> 01:15:11,180
0,150 150,270 270,360 360,600 600,690
And so the right is

2431
01:15:11,180 --> 01:15:12,840
0,390 390,510 510,720 720,1140
displayed in many, many.

2432
01:15:15,150 --> 01:15:16,800
0,240 240,570 570,900 900,1230 1230,1650
Many system in many smaller

2433
01:15:16,800 --> 01:15:18,660
0,270 270,390 390,630 630,1320
REITs or many transactions.

2434
01:15:19,310 --> 01:15:20,500
0,750
Okay.

2435
01:15:20,560 --> 01:15:21,460
0,90 90,270 270,420 420,540 540,900
In fact, that's the main

2436
01:15:21,460 --> 01:15:23,950
0,420 420,600 600,960 960,1500 1770,2490
one that actually is a.

2437
01:15:25,780 --> 01:15:27,860
0,750 780,1470
Right, fs.

2438
01:15:27,980 --> 01:15:29,740
0,480 480,600 600,1200
Split in many.

2439
01:15:30,020 --> 01:15:31,540
0,240 240,900
Many transactions.

2440
01:15:37,490 --> 01:15:39,220
0,210 210,510 510,690 690,1020
Any questions about this.

2441
01:15:43,590 --> 01:15:44,610
0,120 120,510 510,750 750,870 870,1020
A note because you know

2442
01:15:44,610 --> 01:15:46,170
0,210 210,600 630,1140 1140,1440 1440,1560
things are pins correct in

2443
01:15:46,170 --> 01:15:47,340
0,300 300,450 450,660 660,900 900,1170
cash that means also that

2444
01:15:47,340 --> 01:15:49,320
0,300 690,1050 1050,1620 1650,1860 1860,1980
the block cache was me

2445
01:15:49,320 --> 01:15:50,640
0,300 300,780
bigger than.

2446
01:15:51,330 --> 01:15:52,740
0,270 270,780 780,960 960,1050 1050,1410
The reader through the locks

2447
01:15:52,740 --> 01:15:53,640
0,390
eyes.

2448
01:15:57,910 --> 01:15:59,220
0,720
Okay.

2449
01:15:59,250 --> 01:16:01,170
0,600 630,840 840,1260 1260,1500 1530,1920
Um, so now the final

2450
01:16:01,170 --> 01:16:01,980
0,330 330,420 420,570 570,630 630,810
channels they want to talk

2451
01:16:01,980 --> 01:16:03,040
0,480
about.

2452
01:16:03,900 --> 01:16:07,040
0,1110 1200,1860 1860,2550
Is a current.

2453
01:16:07,670 --> 01:16:09,180
0,240 240,510 510,990
File system calls.

2454
01:16:18,110 --> 01:16:19,670
0,420 420,510 510,810 810,990 990,1560
And the issue as follows,

2455
01:16:19,700 --> 01:16:20,810
0,600 600,690 690,930 930,1050 1050,1110
let me first try to

2456
01:16:20,810 --> 01:16:21,950
0,300 300,450 450,510 510,840 840,1140
explain what the problem is

2457
01:16:21,980 --> 01:16:23,180
0,270 270,780 780,900 900,1050 1050,1200
and then we'll see what

2458
01:16:23,180 --> 01:16:24,500
0,60 60,450 450,720
the solution is.

2459
01:16:25,730 --> 01:16:26,960
0,390 420,630 630,750 750,1020 1020,1230
So let's say we have

2460
01:16:26,960 --> 01:16:28,260
0,120 120,780
our log.

2461
01:16:29,240 --> 01:16:31,220
0,780 810,1350
And, um.

2462
01:16:31,220 --> 01:16:32,630
0,210 210,360 360,810 900,1110 1110,1410
And we're writing and maybe

2463
01:16:32,630 --> 01:16:34,160
0,90 90,150 150,360 360,1020 1050,1530
there are two transactions executing

2464
01:16:34,160 --> 01:16:35,340
0,600
concurrently.

2465
01:16:36,010 --> 01:16:37,780
0,630 780,1260 1260,1650 1650,1740 1740,1770
And usually imagine for a

2466
01:16:37,780 --> 01:16:39,610
0,330 330,480 480,660 660,750 750,1830
second that you know they

2467
01:16:40,030 --> 01:16:41,920
0,990 990,1410 1440,1680 1680,1710 1710,1890
zay, um read a lot

2468
01:16:41,920 --> 01:16:43,510
0,60 60,570 600,930 930,1410 1410,1590
of blocks, so really t

2469
01:16:43,510 --> 01:16:45,460
0,660 660,810 810,1380 1380,1530 1530,1950
zero is executing t zero

2470
01:16:45,460 --> 01:16:47,320
0,120 120,810 810,1050 1050,1170 1170,1860
is executing and there also

2471
01:16:47,320 --> 01:16:48,010
0,180 180,240 240,510 510,630 630,690
is the beginning of the

2472
01:16:48,010 --> 01:16:49,380
0,360 360,600
log here.

2473
01:16:49,580 --> 01:16:51,400
0,600 600,720 720,1290
End of log.

2474
01:16:51,430 --> 01:16:53,800
0,780 1020,1710 1860,2010 2010,2100 2100,2370
And, um, you know t

2475
01:16:53,800 --> 01:16:56,200
0,450 450,930 930,1320 1320,1860 1860,2400
one executes unit blocks and

2476
01:16:56,260 --> 01:16:57,730
0,360 360,810 1050,1290 1290,1350 1350,1470
etc, etc, and by the

2477
01:16:57,730 --> 01:16:58,570
0,240 240,330 330,600 600,690 690,840
time we run to the

2478
01:16:58,570 --> 01:16:59,860
0,120 120,180 180,270 270,750 1020,1290
end of the log, neither

2479
01:16:59,860 --> 01:17:01,000
0,180 180,270 270,630 630,990 1020,1140
one is complete, yet you

2480
01:17:01,000 --> 01:17:02,380
0,90 90,270 270,690 690,840 840,1380
know, so both have still

2481
01:17:02,410 --> 01:17:03,940
0,330 330,600 600,720 720,1020
more rights to do.

2482
01:17:04,600 --> 01:17:05,940
0,810
And.

2483
01:17:06,000 --> 01:17:08,490
0,720 960,1140 1140,1290 1290,1860 2250,2490
A at this point, can

2484
01:17:08,490 --> 01:17:09,990
0,120 120,690 840,1290 1290,1410 1410,1500
we commit any of the

2485
01:17:09,990 --> 01:17:11,420
0,150 150,960
two transactions.

2486
01:17:14,740 --> 01:17:16,210
0,330 330,450 450,780 780,1170 1170,1470
Now we can't correct because

2487
01:17:16,210 --> 01:17:18,340
0,120 120,270 270,1080 1110,1680 1800,2130
if we would commit a

2488
01:17:18,340 --> 01:17:20,140
0,540 540,720 720,870 870,1380 1380,1800
interaction that is partially done.

2489
01:17:20,700 --> 01:17:23,700
0,690 690,1440 1680,2580 2580,2670 2670,3000
Then we violate the right-hand

2490
01:17:23,700 --> 01:17:25,530
0,300 300,720 720,1350 1350,1470 1470,1830
rule again and you know

2491
01:17:25,560 --> 01:17:26,790
0,60 60,240 240,540 540,900 900,1230
the whole poorer selection login

2492
01:17:26,790 --> 01:17:28,040
0,120 120,180 180,720
there's a workout.

2493
01:17:28,440 --> 01:17:30,150
0,540 720,1170 1200,1380 1380,1620 1620,1710
Um, so it has to

2494
01:17:30,150 --> 01:17:31,560
0,90 90,180 180,690 690,870 870,1410
be the case that visually

2495
01:17:31,560 --> 01:17:33,570
0,120 120,660 660,780 780,1200 1200,2010
a number of concurrent transactions

2496
01:17:33,780 --> 01:17:35,730
0,480 480,930 1080,1320 1320,1410 1410,1950
must fit in the lock,

2497
01:17:35,790 --> 01:17:38,820
0,600 840,1410 1440,1830 1830,2220 2220,3030
in fact all concurrent operations.

2498
01:17:43,290 --> 01:17:45,120
0,720 720,930 960,1350
Quite so much.

2499
01:17:54,930 --> 01:17:57,150
0,270 270,570 780,990 990,1500 1830,2220
What's great, and so, um

2500
01:17:57,150 --> 01:17:59,820
0,180 180,270 270,930 1260,2100
in the way a.

2501
01:18:00,370 --> 01:18:00,910
0,150 150,300 300,360 360,480 480,540
So this is sort of

2502
01:18:00,910 --> 01:18:02,080
0,90 90,450 450,690 690,810 810,1170
a challenge great, we have

2503
01:18:02,080 --> 01:18:03,580
0,300 300,510 510,750 750,960 960,1500
a file system called starting

2504
01:18:03,580 --> 01:18:05,260
0,540 630,1350 1350,1470 1470,1560 1560,1680
and um you know we

2505
01:18:05,260 --> 01:18:08,530
0,390 420,1260 1260,1740 1740,2190 2520,3270
gotta arranged basically the um

2506
01:18:08,560 --> 01:18:10,380
0,240 240,840
that we.

2507
01:18:10,500 --> 01:18:11,520
0,270 270,660 660,780 780,840 840,1020
We basically do a sort

2508
01:18:11,520 --> 01:18:13,680
0,390 750,1200 1200,1350 1350,2070 2070,2160
of a an entrance you

2509
01:18:13,680 --> 01:18:14,850
0,120 120,570 570,660 660,750 750,1170
know check, you know before

2510
01:18:14,850 --> 01:18:15,870
0,120 120,390 390,660 660,750 750,1020
we actually let the file

2511
01:18:15,870 --> 01:18:18,090
0,540 540,1200 1200,1710 1740,1980 1980,2220
system operation, go, we must

2512
01:18:18,090 --> 01:18:19,140
0,330 330,570 570,690 690,960 960,1050
check whether there actually is

2513
01:18:19,140 --> 01:18:20,760
0,300 300,780 780,1230 1260,1350 1350,1620
enough blocks till you know

2514
01:18:20,820 --> 01:18:21,990
0,270 270,390 390,660 690,960 960,1170
if we have n file

2515
01:18:21,990 --> 01:18:23,640
0,270 270,690 690,990 990,1080 1080,1650
system operations already in progress,

2516
01:18:23,700 --> 01:18:24,690
0,270 270,420 420,480 480,630 630,990
we have to make sure

2517
01:18:24,690 --> 01:18:25,740
0,210 210,330 330,600 600,900 900,1050
that if we add an

2518
01:18:25,830 --> 01:18:27,090
0,330 330,570 570,900 900,1140 1140,1260
allow one more guy to

2519
01:18:27,090 --> 01:18:28,830
0,450 540,780 780,1020 1020,1110 1110,1740
start that actually the total

2520
01:18:28,860 --> 01:18:30,030
0,270 270,330 330,660 660,1020 1020,1170
number of blocks right, they

2521
01:18:30,030 --> 01:18:31,410
0,330 330,540 540,900 900,1140 1140,1380
could write together actually fits

2522
01:18:31,410 --> 01:18:32,260
0,60 60,150 150,540
in the law.

2523
01:18:33,000 --> 01:18:34,560
0,570 570,630 630,990 990,1200 1200,1560
And the way you basically

2524
01:18:34,560 --> 01:18:35,550
0,60 60,240 240,540 540,780 780,990
a three six year gets

2525
01:18:35,550 --> 01:18:37,920
0,330 330,780 900,1740 1740,2250 2250,2370
around this basically limits the

2526
01:18:37,920 --> 01:18:39,180
0,300 300,390 390,780 780,1020 1020,1260
number of concurrent file system

2527
01:18:39,180 --> 01:18:40,160
0,510
calls.

2528
01:18:49,150 --> 01:18:50,140
0,420 420,690 690,750 750,900 900,990
Um, and the way it

2529
01:18:50,140 --> 01:18:52,540
0,330 330,660 660,870 870,1350 1440,2400
basically works is that um.

2530
01:18:54,480 --> 01:18:56,100
0,480 480,870 870,1110 1110,1500 1500,1620
Um, and begin up you

2531
01:18:56,100 --> 01:18:57,810
0,300 300,630 630,810 810,1020 1020,1710
would see how many outstanding

2532
01:18:57,810 --> 01:18:59,610
0,540 570,900 900,1140 1140,1260 1260,1800
a current files with moderation

2533
01:18:59,610 --> 01:19:01,050
0,120 120,180 180,840 930,1290 1290,1440
are in progress, if there

2534
01:19:01,050 --> 01:19:02,490
0,150 150,300 300,810 810,930 930,1440
are too many in progress,

2535
01:19:02,520 --> 01:19:03,900
0,210 210,510 510,1050 1050,1110 1110,1380
we just stock, the current

2536
01:19:03,900 --> 01:19:05,190
0,210 210,420 420,870 870,1050 1050,1290
file system operation and goes

2537
01:19:05,190 --> 01:19:06,450
0,60 60,600 810,1020 1020,1080 1080,1260
to sleep and it will

2538
01:19:06,450 --> 01:19:07,800
0,390 390,780 780,1020 1020,1170 1170,1350
wait until all the other

2539
01:19:07,800 --> 01:19:08,940
0,300 300,420 420,840 870,1020 1020,1140
guys are done and have

2540
01:19:08,940 --> 01:19:09,860
0,510
committed.

2541
01:19:10,870 --> 01:19:11,920
0,330 330,480 480,600 600,750 750,1050
And all the other guys

2542
01:19:11,920 --> 01:19:13,540
0,150 150,570 570,1110 1140,1260 1260,1620
will commit together, in fact

2543
01:19:13,540 --> 01:19:14,320
0,150 150,300 300,390 390,540 540,780
you know at some point

2544
01:19:14,320 --> 01:19:15,370
0,300 300,510 510,600 600,870 870,1050
t one to two they're

2545
01:19:15,370 --> 01:19:17,470
0,360 360,870 1080,1620 1620,1920 1920,2100
basically done, maybe freeze into

2546
01:19:17,470 --> 01:19:19,510
0,480 690,1110 1110,1710 1800,1950 1950,2040
two they finish and then

2547
01:19:19,510 --> 01:19:22,060
0,450 450,930 1140,1740 1740,1950 1950,2550
basically in all these transactions

2548
01:19:22,060 --> 01:19:23,740
0,270 270,450 450,840 840,1320 1320,1680
and in single a single

2549
01:19:23,740 --> 01:19:25,800
0,210 240,840 840,1140 1140,1560
word basically committed together.

2550
01:19:27,870 --> 01:19:28,980
0,240 240,300 300,660 660,900 900,1110
This is sometimes called group

2551
01:19:28,980 --> 01:19:30,060
0,450
commit.

2552
01:19:30,060 --> 01:19:31,650
0,270 270,420 510,900 900,1320 1320,1590
Because you're committing multiple system

2553
01:19:31,650 --> 01:19:32,850
0,600 720,840 840,960 960,1110 1110,1200
calls you know all the

2554
01:19:32,850 --> 01:19:33,780
0,210 210,300 300,390 390,810 810,930
ones that were concurrent in

2555
01:19:33,780 --> 01:19:36,570
0,510 870,1230 1230,1830 1830,2460 2460,2790
action, um you committed together

2556
01:19:36,570 --> 01:19:38,520
0,120 120,420 420,780 780,1140 1170,1950
as a single big transactions

2557
01:19:38,520 --> 01:19:40,140
0,90 90,390 390,720 720,1230 1230,1620
so that older updates are

2558
01:19:40,200 --> 01:19:41,560
0,930
visible.

2559
01:19:41,840 --> 01:19:43,310
0,180 180,360 360,810 810,1080 1080,1470
So that although they all

2560
01:19:43,310 --> 01:19:47,540
0,300 300,540 540,1380 2040,4020 4020,4230
place all ze zem take

2561
01:19:47,540 --> 01:19:48,500
0,330 330,450 450,660 660,750 750,960
place or none of them

2562
01:19:48,500 --> 01:19:49,640
0,240 240,660
take place.

2563
01:19:50,390 --> 01:19:51,480
0,600
Okay.

2564
01:19:52,990 --> 01:19:55,360
0,420 420,630 630,1470 1740,2100 2100,2370
Um, and we, um shoot

2565
01:19:55,360 --> 01:19:56,380
0,390 420,570 570,720 720,810 810,1020
at you, if you go

2566
01:19:56,380 --> 01:19:59,320
0,240 240,390 390,570 570,1080 2400,2940
to a quick question eyes

2567
01:19:59,320 --> 01:20:00,940
0,300 330,510 510,630 630,990 990,1620
that is a group committed.

2568
01:20:01,520 --> 01:20:03,410
0,540 660,810 810,1110 1110,1200 1200,1890
Um, this group to commit

2569
01:20:03,500 --> 01:20:06,840
0,1410 1710,1860 1860,2130 2130,2790
necessary but could you.

2570
01:20:06,930 --> 01:20:08,430
0,570 600,810 810,990 990,1230 1230,1500
Um, same point system calls

2571
01:20:08,430 --> 01:20:10,350
0,270 270,600 600,990 990,1380 1410,1920
finish first, just commit it's

2572
01:20:10,890 --> 01:20:13,380
0,300 300,720 930,1920 1920,2040 2040,2490
it's a transaction and then

2573
01:20:13,380 --> 01:20:14,640
0,240 240,450 450,630 630,930 930,1260
commit Dollar once later, or

2574
01:20:14,670 --> 01:20:16,080
0,120 120,240 240,420 420,900 900,1410
is it a necessary property

2575
01:20:16,140 --> 01:20:18,150
0,480 480,1110 1110,1290 1290,1440 1440,2010
a you gotta be very

2576
01:20:18,150 --> 01:20:19,710
0,450 450,810 810,990 990,1350 1350,1560
careful because you remember one

2577
01:20:19,710 --> 01:20:20,700
0,180 180,300 300,540 540,690 690,990
thing I didn't really state

2578
01:20:20,700 --> 01:20:21,690
0,60 60,540 540,660 660,720 720,990
it explicitly as a goal

2579
01:20:21,690 --> 01:20:22,620
0,240 240,510 510,660 660,810 810,930
early on is that we

2580
01:20:22,620 --> 01:20:24,180
0,390 390,840 840,930 930,1230 1230,1560
basically execute the system calls

2581
01:20:24,180 --> 01:20:25,230
0,240 240,330 330,390 390,630 630,1050
still in the right order.

2582
01:20:25,980 --> 01:20:30,030
0,270 270,870 870,1650 1980,3840 3870,4050
Right, if a if a

2583
01:20:30,030 --> 01:20:31,680
0,120 120,210 210,480 480,1110 1110,1650
if a reader observes right

2584
01:20:31,680 --> 01:20:32,670
0,120 120,270 270,450 450,510 510,990
and then those are right

2585
01:20:32,850 --> 01:20:33,600
0,330 330,390 390,570 570,660 660,750
then it has to be

2586
01:20:33,600 --> 01:20:34,560
0,60 60,360 360,510 510,660 660,960
the case that that second

2587
01:20:34,560 --> 01:20:35,730
0,300 300,660 660,960 960,1080 1080,1170
right happens later than the

2588
01:20:35,730 --> 01:20:36,900
0,240 240,660
first right.

2589
01:20:37,120 --> 01:20:38,230
0,330 330,420 420,750 750,960 960,1110
And the reason that this

2590
01:20:38,230 --> 01:20:40,030
0,120 120,210 210,870 1050,1560 1560,1800
is a log correct, because

2591
01:20:40,030 --> 01:20:41,530
0,120 120,450 450,990 990,1110 1110,1500
that basically reflects the order

2592
01:20:41,530 --> 01:20:42,490
0,60 60,270 270,420 420,690 690,960
in which the rights haven't

2593
01:20:42,490 --> 01:20:43,500
0,510
happened.

2594
01:20:44,090 --> 01:20:46,250
0,750 870,1020 1020,1170 1170,1440 1440,2160
And so you can really

2595
01:20:46,550 --> 01:20:48,530
0,720 720,1050 1050,1530 1530,1620 1620,1980
really nearly changed the order

2596
01:20:48,530 --> 01:20:49,190
0,90 90,210 210,450 450,570 570,660
of the rights in the

2597
01:20:49,190 --> 01:20:50,600
0,510 510,960 960,1140 1140,1350 1350,1410
log because that made me

2598
01:20:50,600 --> 01:20:54,680
0,420 840,1290 1290,1440 1440,2910 3120,4080
actually result into bizarre behavior

2599
01:20:54,980 --> 01:20:57,320
0,600 600,750 750,1020 1020,1950
observable by user programs.

2600
01:20:58,120 --> 01:20:58,690
0,150 150,240 240,360 360,510 510,570
And so it has to

2601
01:20:58,690 --> 01:20:59,470
0,90 90,150 150,360 360,450 450,780
be the case that basically

2602
01:20:59,470 --> 01:21:01,060
0,210 210,750 780,900 900,1020 1020,1590
you commit you know the

2603
01:21:01,420 --> 01:21:02,770
0,690 690,750 750,930 930,1260 1260,1350
operations of these actions in

2604
01:21:02,770 --> 01:21:04,260
0,90 90,330 330,480 480,960
the order they happened.

2605
01:21:05,240 --> 01:21:06,350
0,210 210,390 390,660 660,750 750,1110
We also perform the rites

2606
01:21:06,350 --> 01:21:07,370
0,150 150,240 240,450 450,600 600,1020
in the order they happened.

2607
01:21:09,250 --> 01:21:10,270
0,300 300,450 450,540 540,900 900,1020
And so in general you

2608
01:21:10,270 --> 01:21:13,420
0,1080 1440,2100 2100,2490
know, um, it's.

2609
01:21:13,600 --> 01:21:14,980
0,120 120,480 480,600 600,840 1080,1380
It's safer, you know it's

2610
01:21:14,980 --> 01:21:15,940
0,300 300,360 360,660 660,870 870,960
safe to basically commit them

2611
01:21:15,940 --> 01:21:17,140
0,120 120,570 660,900 900,1110 1110,1200
all together you're always in

2612
01:21:17,140 --> 01:21:18,180
0,150 150,540
good shape.

2613
01:21:18,510 --> 01:21:19,620
0,630
Okay.

2614
01:21:19,880 --> 01:21:21,140
0,150 150,420 420,810
Good question, dope.

2615
01:21:23,780 --> 01:21:25,160
0,540 750,990 990,1080 1080,1230 1230,1380
Um, okay I just want

2616
01:21:25,160 --> 01:21:26,810
0,330 420,570 570,960 960,1170 1170,1650
to go back to one

2617
01:21:26,810 --> 01:21:28,400
0,240 240,750 990,1230 1230,1410 1410,1590
more thing, and then look

2618
01:21:28,400 --> 01:21:29,450
0,60 60,150 150,450 450,780 780,1050
at the beginning off yet

2619
01:21:29,450 --> 01:21:30,380
0,150 150,450 450,510 510,720 720,930
I talked a little bit

2620
01:21:30,380 --> 01:21:31,670
0,330 330,570 570,840 840,1230 1230,1290
because like all laughing I

2621
01:21:31,670 --> 01:21:32,300
0,150 150,270 270,390 390,450 450,630
don't even want to talk

2622
01:21:32,300 --> 01:21:33,580
0,150 150,240 240,390 390,810
about it right now.

2623
01:21:33,870 --> 01:21:34,980
0,570
HMM.

2624
01:21:35,460 --> 01:21:36,900
0,450 450,870
Um, but.

2625
01:21:37,990 --> 01:21:39,820
0,390 390,480 480,570 570,1290
There we can see.

2626
01:21:41,000 --> 01:21:42,260
0,180 180,450 450,540 540,780 780,1260
So here's the game up.

2627
01:21:43,180 --> 01:21:45,190
0,360 390,600 600,660 660,1050 1440,2010
A first of all, if

2628
01:21:45,640 --> 01:21:47,080
0,270 270,600 600,1050 1050,1140 1140,1440
we're already committing the log,

2629
01:21:47,080 --> 01:21:47,980
0,120 120,270 270,420 420,690 690,900
we're just gonna wait until

2630
01:21:47,980 --> 01:21:49,420
0,90 90,330 330,450 450,990 1020,1440
the log has committed because

2631
01:21:49,450 --> 01:21:50,980
0,60 60,270 300,480 480,930 1200,1530
you know we can't write

2632
01:21:50,980 --> 01:21:51,760
0,90 90,210 210,510 510,720 720,780
to the log while the

2633
01:21:51,760 --> 01:21:53,780
0,240 240,630 630,840 840,1500
walk actually being installed.

2634
01:21:53,930 --> 01:21:58,280
0,660 1140,1740 2220,2640 2640,3660 3900,4350
Um, if a worthy end,

2635
01:21:58,400 --> 01:22:00,680
0,480 480,1110 1110,1230 1230,1830 1860,2280
current operation that basically makes

2636
01:22:00,680 --> 01:22:02,030
0,150 150,420 420,960 960,1050 1050,1350
us go across the block

2637
01:22:02,030 --> 01:22:03,110
0,420 420,570 570,810 810,960 960,1080
size we could go to

2638
01:22:03,110 --> 01:22:04,180
0,570
sleep.

2639
01:22:05,080 --> 01:22:07,510
0,750 780,1320 1320,1740 1740,2190 2190,2430
And wait until basically all

2640
01:22:07,510 --> 01:22:09,220
0,180 180,750 750,1110 1110,1620 1620,1710
the preceding concurrent transactions are

2641
01:22:09,220 --> 01:22:11,650
0,480 930,1320 1320,1590 1590,2040 2070,2430
done, um, and if a

2642
01:22:11,650 --> 01:22:13,330
0,210 210,480 480,540 540,1050 1080,1680
were allowed to proceed basically

2643
01:22:13,330 --> 01:22:15,130
0,180 180,810 870,1140 1140,1230 1230,1800
our agents, a is allowed,

2644
01:22:15,250 --> 01:22:16,960
0,330 330,750 750,1170 1170,1590 1590,1710
we increase lockout standing by

2645
01:22:16,960 --> 01:22:18,730
0,570 720,960 960,1080 1140,1620 1620,1770
one because they reflect our

2646
01:22:18,730 --> 01:22:19,720
0,240 240,360 360,510 510,630 630,990
thing and then we basically

2647
01:22:19,720 --> 01:22:20,830
0,390 390,480 480,720 720,870 870,1110
proceed and start doing file

2648
01:22:20,830 --> 01:22:22,140
0,270 270,960
system operations.

2649
01:22:22,920 --> 01:22:24,030
0,150 150,240 240,360 360,750 750,1110
And if you look at

2650
01:22:24,300 --> 01:22:25,860
0,240 240,450 450,900 930,1200 1200,1560
and up again just to.

2651
01:22:26,550 --> 01:22:27,420
0,210 210,450 450,570 570,690 690,870
So you see the end

2652
01:22:27,420 --> 01:22:29,940
0,360 360,1020 1050,1680 1680,2130 2130,2520
up basically decreases lockout standing

2653
01:22:29,940 --> 01:22:31,350
0,90 90,480 480,690 690,960 960,1410
by one because one transaction

2654
01:22:31,350 --> 01:22:32,500
0,120 120,660
is finished.

2655
01:22:32,590 --> 01:22:34,930
0,720 720,900 1350,1860 1860,2010 2010,2340
A it certainly would be

2656
01:22:34,930 --> 01:22:36,400
0,90 90,720 720,810 810,1140 1140,1470
an error in grading states

2657
01:22:36,400 --> 01:22:37,510
0,180 180,450 450,510 510,660 660,1110
with panic in that case

2658
01:22:37,810 --> 01:22:39,040
0,150 150,360 360,870 900,1140 1140,1230
and we actually are the

2659
01:22:39,040 --> 01:22:40,150
0,390 390,690 690,840 840,990 990,1110
last one from that set

2660
01:22:40,150 --> 01:22:41,840
0,90 90,420 420,1230
of current transactions.

2661
01:22:41,930 --> 01:22:43,790
0,270 270,780 780,1200 1200,1410 1410,1860
Then, actually, um and lockouts

2662
01:22:43,790 --> 01:22:44,660
0,150 150,420 420,570 570,720 720,870
and goes you know we

2663
01:22:44,660 --> 01:22:46,160
0,330 330,540 540,900
immediately start committing.

2664
01:22:46,880 --> 01:22:48,170
0,150 150,420 420,630 630,750 750,1290
And then when we're done.

2665
01:22:48,720 --> 01:22:50,910
0,450 450,720 720,1260 1260,1680 1680,2190
Um, we're when actually, um,

2666
01:22:50,910 --> 01:22:52,410
0,660 660,810 810,1020 1020,1080 1080,1500
if we're not the law,

2667
01:22:52,500 --> 01:22:53,980
0,960
yeah.

2668
01:22:56,300 --> 01:22:57,580
0,180 180,330 330,450 450,720
Yeah we got it.

2669
01:22:59,460 --> 01:23:00,690
0,360 360,540 540,630 630,780 780,1230
Um, and if there's space

2670
01:23:00,690 --> 01:23:02,460
0,60 60,330 330,1080 1110,1620 1620,1770
you know a left, we

2671
01:23:02,460 --> 01:23:03,330
0,240 240,330 330,390 390,720 720,870
wake up the guy so

2672
01:23:03,330 --> 01:23:04,530
0,270 270,420 420,630 630,870 870,1200
they can actually start running.

2673
01:23:06,380 --> 01:23:07,400
0,540
Okay.

2674
01:23:07,620 --> 01:23:09,060
0,180 180,630 630,780 780,1110 1110,1440
So even though this dirt

2675
01:23:09,060 --> 01:23:10,950
0,270 270,540 540,930 930,1170 1170,1890
simple file system that are

2676
01:23:10,950 --> 01:23:12,390
0,240 240,450 450,690 690,1020 1020,1440
just dirt simple logging system

2677
01:23:12,390 --> 01:23:14,040
0,210 210,480 480,720 720,1350 1350,1650
that xc six actually has

2678
01:23:14,040 --> 01:23:15,660
0,60 60,270 270,330 330,1140
a bunch of complications.

2679
01:23:18,160 --> 01:23:19,300
0,210 210,480 480,840 840,930 930,1140
So I'm starting to run

2680
01:23:19,300 --> 01:23:20,230
0,90 90,180 180,480 480,720 720,930
out of time so let

2681
01:23:20,230 --> 01:23:22,160
0,420 420,660 660,810 810,1260
me wrap up here.

2682
01:23:22,320 --> 01:23:24,240
0,360 360,480 480,1320
So in summary.

2683
01:23:26,010 --> 01:23:27,510
0,120 120,270 270,510 510,1050 1230,1500
You know what we what

2684
01:23:27,510 --> 01:23:29,160
0,90 90,300 300,780 780,1230 1230,1650
we talk about is basically

2685
01:23:29,160 --> 01:23:30,480
0,690
logging.

2686
01:23:30,600 --> 01:23:32,760
0,210 210,270 270,870 870,1500
As a solution for.

2687
01:23:33,860 --> 01:23:35,740
0,360 360,660 660,1320
For crash safety.

2688
01:23:35,890 --> 01:23:38,200
0,210 210,540 540,990 1020,1440 1440,2310
Or really for multi step.

2689
01:23:39,620 --> 01:23:41,640
0,390 390,660 660,1470
File system operations.

2690
01:23:43,660 --> 01:23:45,400
0,930 1170,1350 1350,1560 1560,1620 1620,1740
And you know if you've

2691
01:23:45,400 --> 01:23:47,080
0,180 180,360 360,1020 1110,1440 1440,1680
seen so far it works

2692
01:23:47,080 --> 01:23:48,610
0,270 270,390 390,660 660,1110 1110,1530
great for crash safety, but

2693
01:23:48,730 --> 01:23:50,100
0,90 90,810
no performance.

2694
01:23:50,300 --> 01:23:51,440
0,510
And.

2695
01:23:51,740 --> 01:23:52,310
0,210 210,330 330,420 420,480 480,570
That's going to be the

2696
01:23:52,310 --> 01:23:54,470
0,330 330,420 420,1050 1050,1680 1980,2160
topic for monday and as

2697
01:23:54,470 --> 01:23:56,450
0,120 120,570 720,1170 1350,1800 1800,1980
you reach the HD three

2698
01:23:56,450 --> 01:23:57,950
0,240 240,540 540,870 870,990 990,1500
file system paper from monday,

2699
01:23:58,100 --> 01:23:59,060
0,240 240,480 510,750 750,810 810,960
you know that's the thing

2700
01:23:59,060 --> 01:24:00,110
0,120 120,270 270,420 420,690 690,1050
you should be thinking about.

2701
01:24:01,900 --> 01:24:03,730
0,270 270,630 630,840 840,1260 1260,1830
Okay any more final questions,

2702
01:24:04,000 --> 01:24:05,080
0,180 180,450 450,750 750,900 900,1080
in fact anybody who has

2703
01:24:05,080 --> 01:24:06,580
0,60 60,540 540,990 1020,1320 1320,1500
to leave, please feel free

2704
01:24:06,580 --> 01:24:07,720
0,210 240,600 600,810 810,930 930,1140
to leave, but if you

2705
01:24:07,720 --> 01:24:09,130
0,480 630,900 900,960 960,1080 1080,1410
um want to hang around

2706
01:24:09,130 --> 01:24:10,450
0,90 90,270 270,420 420,930 930,1320
and ask more questions you

2707
01:24:10,450 --> 01:24:11,820
0,120 120,390 390,540 540,840
know, please do so.

2708
01:24:14,510 --> 01:24:15,530
0,270 270,420 420,600 600,690 690,1020
Oh I have a question

2709
01:24:15,530 --> 01:24:18,350
0,780 1020,1590 1620,2040 2040,2550 2550,2820
regarding a cache size and

2710
01:24:18,350 --> 01:24:20,600
0,390 420,720 720,1320 1410,1980 2100,2250
the log size so you

2711
01:24:20,600 --> 01:24:21,710
0,210 210,450 450,600 600,900 900,1110
said that the cache size

2712
01:24:21,710 --> 01:24:22,490
0,210 210,300 300,420 420,480 480,780
has to be a place

2713
01:24:22,490 --> 01:24:23,750
0,180 180,450 450,780 780,960 960,1260
as big as the log

2714
01:24:23,750 --> 01:24:25,610
0,510 540,1380 1380,1560 1560,1770 1770,1860
size, but they seem to

2715
01:24:25,610 --> 01:24:27,110
0,90 90,210 210,540 540,990 990,1500
be the same size for

2716
01:24:27,170 --> 01:24:29,090
0,300 300,960 1080,1500 1500,1740 1740,1920
this case so that means

2717
01:24:29,090 --> 01:24:31,580
0,390 420,900 900,1020 1020,1680 1740,2490
that if the log pins.

2718
01:24:32,470 --> 01:24:36,640
0,870 1110,1770 1890,3060 3420,3720 3720,4170
Three I'm buffers and then

2719
01:24:36,670 --> 01:24:38,080
0,210 210,420 420,990 990,1320 1320,1410
some other operation tries to

2720
01:24:38,080 --> 01:24:39,460
0,120 120,840
do something.

2721
01:24:39,760 --> 01:24:41,200
0,180 180,390 390,840 840,1170 1170,1440
It just fails because it.

2722
01:24:41,760 --> 01:24:43,650
0,180 180,420 420,900 930,1470 1500,1890
It runs out of a

2723
01:24:43,650 --> 01:24:44,780
0,630
free.

2724
01:24:45,120 --> 01:24:46,180
0,540
I'm.

2725
01:24:46,180 --> 01:24:48,160
0,420 420,510 510,600 600,1260 1290,1980
Spots in the buffet, no,

2726
01:24:48,160 --> 01:24:50,950
0,720 1230,1830 1830,2190 2190,2580 2580,2790
um, maybe let's let's look

2727
01:24:50,950 --> 01:24:51,920
0,90 90,390
at the.

2728
01:24:52,830 --> 01:24:54,800
0,480 480,780 780,1290
Um, okay so.

2729
01:24:56,600 --> 01:24:57,740
0,150 150,210 210,690 690,930 930,1140
Let me first check one

2730
01:24:57,740 --> 01:24:58,720
0,390
thing.

2731
01:25:02,590 --> 01:25:04,390
0,420 420,720 720,900 900,1050 1050,1800
Okay, let's go to bio.

2732
01:25:07,070 --> 01:25:08,960
0,510 510,1170
Yeah, okay.

2733
01:25:10,240 --> 01:25:12,040
0,210 210,480 480,750 750,1230 1230,1800
Let's actually first check involves

2734
01:25:12,040 --> 01:25:13,300
0,270 270,630
bigger than.

2735
01:25:15,590 --> 01:25:17,780
0,330 330,420 420,960 960,1470 1470,2190
Sets of matchbox, excitedly broadcast

2736
01:25:17,780 --> 01:25:18,740
0,240 240,420 420,570 570,780 780,960
okay, so it's set up

2737
01:25:18,740 --> 01:25:20,180
0,120 120,390 390,810
to something big.

2738
01:25:20,610 --> 01:25:22,470
0,450 450,630 630,840 840,1140 1140,1860
Um, so what happens actually

2739
01:25:22,470 --> 01:25:24,030
0,240 240,330 330,660 660,1020 1020,1560
if we can't find Viet

2740
01:25:24,030 --> 01:25:25,580
0,120 120,420 420,480 480,900
and find a buffer.

2741
01:25:25,670 --> 01:25:27,380
0,300 300,480 480,1110
After these panics.

2742
01:25:28,840 --> 01:25:30,080
0,690
And.

2743
01:25:32,190 --> 01:25:34,050
0,210 210,810 1050,1440 1440,1650 1650,1860
So we we there's no

2744
01:25:34,050 --> 01:25:35,040
0,210 210,600 600,690 690,750 750,990
free slot in the buffer

2745
01:25:35,040 --> 01:25:36,780
0,480 480,600 600,1050 1050,1560 1560,1740
cache, you actually expense that's

2746
01:25:36,780 --> 01:25:38,250
0,180 180,570 570,1110 1140,1230 1230,1470
not particularly ideal, in fact

2747
01:25:38,250 --> 01:25:40,710
0,120 120,540 780,1500 1680,2340 2340,2460
would be terrible and so

2748
01:25:40,710 --> 01:25:41,580
0,270 270,450 450,660 660,750 750,870
you hope never to be

2749
01:25:41,580 --> 01:25:42,660
0,90 90,180 180,630 630,750 750,1080
in this situation and hopefully

2750
01:25:42,660 --> 01:25:44,340
0,300 300,600 600,1020 1020,1560 1560,1680
picked numbers correctly basically is

2751
01:25:44,340 --> 01:25:46,040
0,510 510,600 600,1050
unlikely to happen.

2752
01:25:46,040 --> 01:25:47,030
0,270 270,420 420,630 630,870 870,990
Um, but why can't we

2753
01:25:47,030 --> 01:25:48,360
0,300 300,360 360,810
return an error.

2754
01:25:49,520 --> 01:25:50,300
0,240 240,390 390,570 570,690 690,780
Because that seems like the

2755
01:25:50,300 --> 01:25:51,740
0,330 330,450 450,540 540,810 810,1440
obvious thing to do, like.

2756
01:26:05,660 --> 01:26:06,710
0,270 270,630 630,720 720,930 930,1050
Is return an error to

2757
01:26:06,710 --> 01:26:08,450
0,420 420,810 810,990 990,1050 1050,1740
the caller and the caller,

2758
01:26:08,720 --> 01:26:10,310
0,330 330,660 690,1380 1380,1500 1500,1590
maybe returns back up to

2759
01:26:10,310 --> 01:26:11,630
0,90 90,330 330,690 690,1170 1170,1320
the file system interface and

2760
01:26:11,630 --> 01:26:12,890
0,150 150,510 510,810 810,1050 1050,1260
just return minus one saying

2761
01:26:12,890 --> 01:26:14,150
0,120 120,270 270,420 420,840 840,1260
like oh this operation failed.

2762
01:26:15,140 --> 01:26:16,880
0,390 390,540 540,810 810,1200
Why is that a.

2763
01:26:16,910 --> 01:26:18,100
0,720
Problem.

2764
01:26:21,060 --> 01:26:21,900
0,180 180,330 330,420 420,600 600,840
So ready to think about

2765
01:26:21,900 --> 01:26:23,310
0,150 150,300 300,600 870,990 990,1410
this is that you know

2766
01:26:23,580 --> 01:26:25,200
0,360 360,690 690,1200 1200,1320 1320,1620
many fossil corporations are multi

2767
01:26:25,200 --> 01:26:27,000
0,270 270,840 840,1260
step operations, right.

2768
01:26:27,030 --> 01:26:28,620
0,300 300,510 510,750 750,930 930,1590
A as we've seen now,

2769
01:26:28,710 --> 01:26:30,450
0,270 270,420 420,600 600,1110 1470,1740
um, in this lecture and

2770
01:26:30,450 --> 01:26:32,310
0,60 60,150 150,450 450,990 1290,1860
in the previous lecture and

2771
01:26:32,310 --> 01:26:34,620
0,300 300,960 1260,1950 1950,2130 2130,2310
let's say um, we did

2772
01:26:34,620 --> 01:26:35,910
0,180 180,780 870,1050 1050,1200 1200,1290
two rights and then the

2773
01:26:35,910 --> 01:26:37,620
0,600 630,1140 1170,1350 1350,1530 1530,1710
third right, we run into

2774
01:26:37,620 --> 01:26:38,760
0,180 180,720
this case.

2775
01:26:38,790 --> 01:26:40,170
0,630 630,810 810,1080 1080,1290 1290,1380
Where we can actually do

2776
01:26:40,170 --> 01:26:41,490
0,120 120,420 420,750 750,1170 1170,1320
the right because there's no

2777
01:26:41,490 --> 01:26:42,600
0,270 270,360 360,420 420,630 630,1110
place in the block cache.

2778
01:26:44,380 --> 01:26:45,670
0,240 240,360 360,600 600,810 810,1290
We have done to rights,

2779
01:26:45,910 --> 01:26:46,940
0,480
right.

2780
01:26:47,380 --> 01:26:48,280
0,180 180,240 240,420 420,720 720,900
Can we just bail out

2781
01:26:48,280 --> 01:26:49,420
0,60 60,150 150,360 360,660 660,1140
of the file system call.

2782
01:26:53,760 --> 01:26:55,710
0,330 330,630 630,1080 1110,1530 1740,1950
Okay I see right, we

2783
01:26:55,710 --> 01:26:56,970
0,420 420,720 720,960 960,1050 1050,1260
cannot correct because we might

2784
01:26:56,970 --> 01:26:58,500
0,120 120,540 540,900 930,1230 1230,1530
have updated to a in

2785
01:26:58,500 --> 01:27:01,290
0,900 930,1710 1800,2040 2040,2460 2460,2790
the directory, a directory block

2786
01:27:01,290 --> 01:27:02,360
0,90 90,540
of some.

2787
01:27:02,420 --> 01:27:04,520
0,840 840,1290 1320,1500 1500,1920 1920,2100
A file, if we might

2788
01:27:04,520 --> 01:27:05,390
0,90 90,150 150,450 450,510 510,870
have to update the directory

2789
01:27:05,390 --> 01:27:06,710
0,210 210,270 270,420 420,930 960,1320
block in some directory, and

2790
01:27:07,070 --> 01:27:08,600
0,180 180,300 300,600 600,1050 1230,1530
if we wanted to make

2791
01:27:08,600 --> 01:27:09,830
0,150 150,570 570,960 960,1080 1080,1230
this work, what we would

2792
01:27:09,830 --> 01:27:11,090
0,150 150,210 210,420 420,690 870,1260
have to do is undo

2793
01:27:11,090 --> 01:27:13,540
0,300 300,810 840,1260 1290,1920
those changes like any.

2794
01:27:13,540 --> 01:27:15,310
0,660 660,810 810,900 900,1080 1080,1770
Rice that we did before

2795
01:27:15,310 --> 01:27:16,180
0,180 180,360 360,420 420,570 570,870
as part of that system

2796
01:27:16,180 --> 01:27:17,260
0,210 210,330 330,450 450,540 540,1080
call, we have to undo.

2797
01:27:18,770 --> 01:27:22,220
0,1410 1410,1530 1530,1680 1680,2190
No, that was painful.

2798
01:27:22,250 --> 01:27:23,000
0,360 360,450 450,540 540,660 660,750
That's what we don't do

2799
01:27:23,000 --> 01:27:23,800
0,210
it.

2800
01:27:24,270 --> 01:27:25,520
0,150 150,240 240,360 360,630
Does that make sense.

2801
01:27:25,640 --> 01:27:26,570
0,360 360,510 510,690 690,840 840,930
Okay so it's not a

2802
01:27:26,570 --> 01:27:28,000
0,420 420,900
problem if.

2803
01:27:28,480 --> 01:27:31,690
0,570 720,1440 1710,2190 2220,2880 2880,3210
They log the log pins

2804
01:27:31,690 --> 01:27:33,790
0,780 1230,1440 1440,1680 1680,1830 1830,2100
everything and there's no more

2805
01:27:33,790 --> 01:27:35,020
0,300 300,420 420,750 750,1080 1110,1230
space for cash, but it

2806
01:27:35,020 --> 01:27:37,380
0,300 300,630 630,1050 1170,1800
will just panic okay.

2807
01:27:38,320 --> 01:27:39,370
0,180 180,240 240,420 420,840 840,1050
Yeah, of course expenditure does

2808
01:27:39,370 --> 01:27:40,810
0,240 240,600 600,990 990,1200 1200,1440
really happen like there's a

2809
01:27:40,810 --> 01:27:42,400
0,360 360,720 720,1110 1110,1410 1410,1590
only a corner cases where

2810
01:27:42,400 --> 01:27:45,000
0,300 300,660 660,1110
this hopefully happens.

2811
01:27:45,120 --> 01:27:46,580
0,150 150,420 420,540 540,960
I guess you just.

2812
01:27:46,780 --> 01:27:48,400
0,390 390,750 750,1170 1170,1410 1410,1620
Okay, yeah that makes sense

2813
01:27:48,400 --> 01:27:51,320
0,510 690,1050 1050,1590
okay, thank you.

2814
01:27:51,940 --> 01:27:53,480
0,210 210,390 390,1020
Any more questions.

2815
01:27:54,120 --> 01:27:55,050
0,240 240,390 390,480 480,540 540,930
A I have a question

2816
01:27:55,050 --> 01:27:57,030
0,390 420,1110 1350,1530 1530,1680 1680,1980
about um I guess following

2817
01:27:57,030 --> 01:27:57,990
0,150 150,270 270,480 480,600 600,960
up my earlier one about

2818
01:27:58,020 --> 01:28:01,710
0,690 1350,1710 1710,1950 1950,2700 3060,3690
um, the group commits, um

2819
01:28:02,190 --> 01:28:03,690
0,420 420,660 660,750 750,990 990,1500
was trying to think of

2820
01:28:03,990 --> 01:28:05,100
0,120 120,390 390,600 600,870 870,1110
like I think I kind

2821
01:28:05,100 --> 01:28:06,060
0,90 90,450 450,570 570,630 630,960
of understand it a hello

2822
01:28:06,060 --> 01:28:06,930
0,240 240,390 390,450 450,600 600,870
was trying to make sure

2823
01:28:06,930 --> 01:28:09,090
0,30 30,600 600,1410 1410,1800 1800,2160
I understand concrete example, why

2824
01:28:09,450 --> 01:28:12,300
0,210 210,540 780,1710 1710,2100 2370,2850
it is important and um.

2825
01:28:12,830 --> 01:28:14,030
0,240 240,540 540,750 750,840 840,1200
May is this an example

2826
01:28:14,030 --> 01:28:15,560
0,90 90,270 270,600 600,1170 1170,1530
that kind of demonstrates its

2827
01:28:15,560 --> 01:28:16,760
0,300 600,780 780,960 960,1080 1080,1200
like I guess I was

2828
01:28:16,760 --> 01:28:18,140
0,270 270,420 420,630 630,1200 1200,1380
thinking of a situation where

2829
01:28:18,140 --> 01:28:20,870
0,120 120,630 1020,1620 2070,2340 2340,2730
you have a say like

2830
01:28:21,890 --> 01:28:22,910
0,270 270,390 390,480 480,900 900,1020
this might be convoluted like

2831
01:28:22,910 --> 01:28:25,010
0,240 240,900 900,1350 1350,1440 1440,2100
one process generating a stream

2832
01:28:25,100 --> 01:28:26,960
0,450 510,990 990,1290 1320,1620 1620,1860
of numbers like one through

2833
01:28:26,960 --> 01:28:29,450
0,420 720,870 870,1020 1020,1260 1260,2490
n and then two processes.

2834
01:28:29,870 --> 01:28:32,090
0,990 1230,1620 1620,1920 1920,2070 2070,2220
Consuming a that maybe you're

2835
01:28:32,090 --> 01:28:33,470
0,270 270,360 360,420 420,630 630,1380
listening on the same pipe,

2836
01:28:33,500 --> 01:28:36,380
0,690 960,1800 1800,2190 2190,2430 2430,2880
um and say like n

2837
01:28:36,440 --> 01:28:37,910
0,240 240,570 570,720 720,1020 1020,1470
like stops an even number,

2838
01:28:38,060 --> 01:28:40,550
0,510 570,840 840,1440 1440,1770 2040,2490
um, one process is consuming

2839
01:28:40,550 --> 01:28:41,780
0,150 150,450 450,780 840,1020 1020,1230
and printing out the odd

2840
01:28:41,780 --> 01:28:43,280
0,360 360,510 510,900 900,1080 1080,1500
numbers one process is consuming

2841
01:28:43,280 --> 01:28:45,110
0,270 270,420 420,570 570,1140 1140,1830
part of the even numbers,

2842
01:28:45,380 --> 01:28:47,390
0,510 660,1260 1470,1620 1620,1770 1770,2010
um, and if you didn't

2843
01:28:47,390 --> 01:28:48,800
0,150 150,360 360,810 810,990 990,1410
have group commits, so like

2844
01:28:48,800 --> 01:28:50,660
0,270 270,630 630,1200 1200,1470 1500,1860
the correct behavior and say

2845
01:28:50,660 --> 01:28:51,980
0,480 480,810 810,1020 1020,1170 1170,1320
they're printing it for like

2846
01:28:51,980 --> 01:28:54,230
0,600 690,1110 1110,1500 1500,1800 1800,2250
their writing the same file.

2847
01:28:54,600 --> 01:28:56,700
0,660 1140,1500 1500,1710 1710,1920 1920,2100
Um, ah, and so the

2848
01:28:56,700 --> 01:28:58,110
0,330 330,660 660,780 780,1200 1230,1410
correct behavior would be at

2849
01:28:58,110 --> 01:28:59,190
0,90 90,270 270,420 720,930 930,1080
the end of at the

2850
01:28:59,190 --> 01:29:00,090
0,300 300,390 390,540 540,840 840,900
end of all this, you

2851
01:29:00,090 --> 01:29:00,810
0,90 90,360 360,450 450,660 660,720
would expect the file to

2852
01:29:00,810 --> 01:29:02,310
0,450 450,780 810,930 930,1170 1170,1500
have like an even number

2853
01:29:02,430 --> 01:29:04,600
0,90 90,360 360,750 1080,1650
the last number, um.

2854
01:29:04,600 --> 01:29:05,920
0,420 480,840 840,990 990,1200 1200,1320
But if you didn't have

2855
01:29:05,920 --> 01:29:07,420
0,180 180,450 450,600 600,990 990,1500
group commits it's possible that

2856
01:29:07,690 --> 01:29:10,840
0,600 840,1320 1380,1890 1890,2340 2340,3150
I'm the second collapse process

2857
01:29:11,170 --> 01:29:13,120
0,270 270,450 450,810 810,1530 1830,1950
actually gets committed after the

2858
01:29:13,120 --> 01:29:14,440
0,240 240,690 750,930 930,1050 1050,1320
last one and he actually

2859
01:29:14,440 --> 01:29:15,340
0,150 150,480 480,600 600,810 810,900
c nine is just like

2860
01:29:15,340 --> 01:29:17,410
0,270 300,930 960,1680 1680,1890 1890,2070
a correct example, why this

2861
01:29:17,410 --> 01:29:18,910
0,120 120,510 510,720 720,960 960,1500
is important I think I

2862
01:29:18,910 --> 01:29:19,660
0,150 150,300 300,540 540,600 600,750
have to think a little

2863
01:29:19,660 --> 01:29:20,710
0,120 120,240 240,600 600,840 840,1050
bit more carefully about it,

2864
01:29:20,800 --> 01:29:21,790
0,210 210,390 390,600 600,690 690,990
um, but that is definitely

2865
01:29:21,790 --> 01:29:24,490
0,90 90,750 780,1620 1650,2340 2370,2700
the flavour of za problem,

2866
01:29:24,490 --> 01:29:25,540
0,180 180,390 390,540 540,840 840,1050
you might run into if

2867
01:29:25,540 --> 01:29:27,300
0,210 210,690 690,990 990,1500
you reorder system calls.

2868
01:29:28,290 --> 01:29:29,420
0,630
Okay.

2869
01:29:29,420 --> 01:29:30,320
0,480
Okay.

2870
01:29:30,680 --> 01:29:32,120
0,360 360,600 600,720 720,1140 1140,1440
A I have a great

2871
01:29:32,120 --> 01:29:33,500
0,420 420,540 540,630 630,900 900,1380
example in the lecture note

2872
01:29:33,560 --> 01:29:35,990
0,570 570,930 1590,1800 1800,2100 2100,2430
a if the lecture notes

2873
01:29:35,990 --> 01:29:37,130
0,90 90,300 300,600 600,930 930,1140
you know shell command that

2874
01:29:37,130 --> 01:29:39,050
0,330 330,450 450,690 720,1500 1500,1920
really you know behave weirdly,

2875
01:29:39,050 --> 01:29:39,980
0,120 120,210 210,420 420,660 660,930
if you didn't commit to

2876
01:29:40,700 --> 01:29:41,420
0,270 270,330 330,510 510,660 660,720
this is not really an

2877
01:29:41,420 --> 01:29:42,170
0,210 210,270 270,450 450,630 630,750
issue in some sense from

2878
01:29:42,170 --> 01:29:43,100
0,210 210,570 570,630 630,870 870,930
group commit is really an

2879
01:29:43,100 --> 01:29:44,930
0,240 240,660 1140,1620 1620,1770 1770,1830
issue that transactions need to

2880
01:29:44,930 --> 01:29:46,300
0,120 120,450 450,540 540,960
be committed in order.

2881
01:29:47,320 --> 01:29:48,660
0,750
MHM.

2882
01:29:49,010 --> 01:29:50,360
0,150 150,510 600,960 960,1200 1200,1350
I see Andrew if he

2883
01:29:50,360 --> 01:29:51,710
0,240 240,420 420,660 660,930 930,1350
didn't have group commit then

2884
01:29:52,100 --> 01:29:54,290
0,1320 1350,1650 1650,1830 1830,2040 2040,2190
yeah people might think like

2885
01:29:54,290 --> 01:29:56,420
0,570 570,690 690,1860 1890,1980 1980,2130
well what if you don't

2886
01:29:56,420 --> 01:29:57,770
0,150 150,390 390,540 540,1050 1080,1350
have root me, then there's

2887
01:29:57,770 --> 01:29:59,000
0,60 60,600 600,690 690,1170 1170,1230
a temptation to basically you

2888
01:29:59,000 --> 01:30:00,410
0,120 120,390 390,660 660,930 930,1410
know commit some later transaction

2889
01:30:00,410 --> 01:30:01,610
0,210 210,420 420,720 720,1080 1080,1200
because it's already finished, but

2890
01:30:01,610 --> 01:30:02,660
0,90 90,330 330,480 480,750 750,1050
the first one isn't finished

2891
01:30:02,660 --> 01:30:03,380
0,270
yet.

2892
01:30:03,440 --> 01:30:04,850
0,300 300,600 600,690 690,930 930,1410
Um, and to create space

2893
01:30:04,850 --> 01:30:05,900
0,120 120,330 330,510 510,540 540,1050
but that's not a solution.

2894
01:30:07,490 --> 01:30:09,590
0,750 1110,1260 1260,1440 1440,1830 1830,2100
Okay, that makes sense, um,

2895
01:30:09,590 --> 01:30:11,060
0,690 690,870 870,960 960,1230 1230,1470
where in the lecture notes

2896
01:30:11,060 --> 01:30:12,770
0,450 450,960 960,1080 1080,1470 1470,1710
this example of a show

2897
01:30:13,280 --> 01:30:15,380
0,270 270,690 690,1110 1290,1950 1950,2100
where a were illustrated by

2898
01:30:15,380 --> 01:30:16,960
0,450 450,540 540,1080
ordering is important.

2899
01:30:17,270 --> 01:30:19,340
0,420 540,720 720,1140 1140,1500 1590,2070
Okay, it doesn't it doesn't

2900
01:30:19,340 --> 01:30:20,930
0,180 180,270 270,810 810,1200 1200,1590
tie it directly to a

2901
01:30:20,930 --> 01:30:22,400
0,270 270,660 660,840 840,1110 1110,1470
group commits but it basically

2902
01:30:22,400 --> 01:30:23,630
0,210 210,300 300,600 600,840 840,1230
makes the point that ordering

2903
01:30:23,630 --> 01:30:25,240
0,270 270,510 510,600 600,1110
system calls is important.

2904
01:30:25,820 --> 01:30:27,020
0,150 150,510 570,900 900,1050 1050,1200
I see, is this in

2905
01:30:27,020 --> 01:30:28,850
0,240 270,540 540,1140 1170,1290 1290,1830
the the like the text.

