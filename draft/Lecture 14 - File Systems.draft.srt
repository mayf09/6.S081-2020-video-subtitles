1
00:00:00,000 --> 00:00:02,820
0,120 120,720 780,2250 2250,2730 2730,2820
I started and everybody could

2
00:00:02,820 --> 00:00:04,800
0,630 690,930 930,1440
see my screen

3
00:00:04,800 --> 00:00:06,260
0,180 180,270 270,900
that I shared.|

4
00:00:06,700 --> 00:00:08,350
0,510 600,780 810,1230 1230,1530 1530,1650
And I hope everybody can

5
00:00:08,350 --> 00:00:09,400
0,180 180,480
hear me.|

6
00:00:11,630 --> 00:00:12,820
0,600
{Let,me}.|

7
00:00:12,970 --> 00:00:15,300
0,30 30,180 180,630 810,1590
I think {we're,good}.| Okay,

8
00:00:15,300 --> 00:00:16,890
0,690 870,1140 1140,1200 1200,1380 1380,1590
{} {so,I'm,going} to talk about

9
00:00:16,890 --> 00:00:19,590
0,480 480,720 720,1290 1320,1980 2010,2700
file system today| and {}

10
00:00:19,980 --> 00:00:21,180
0,270 270,330 330,780 780,1080 1080,1200
going to be actually going

11
00:00:21,180 --> 00:00:22,200
0,90 90,360 360,570 570,900 900,1020
to spend three lectures on

12
00:00:22,200 --> 00:00:24,000
0,270 270,900 1110,1650 1650,1740 1740,1800
file systems,| two in the

13
00:00:24,000 --> 00:00:26,010
0,510 510,810 810,1380 1380,1800 1800,2010
context of {xv6 -} and

14
00:00:26,010 --> 00:00:27,270
0,270 270,390 390,450 450,1020 1020,1260
one in the context of

15
00:00:27,270 --> 00:00:28,600
0,930
Linux.|

16
00:00:28,690 --> 00:00:30,190
0,210 210,660 660,960 960,1140 1140,1500
In fact, this is the

17
00:00:30,220 --> 00:00:32,530
0,450 450,1020 1350,1710 1710,1950 1950,2310
last topic, {} that we're

18
00:00:32,560 --> 00:00:36,310
0,570 570,2220 2250,2700 2700,3210 3210,3750
covering {} off xv6,| after

19
00:00:36,310 --> 00:00:37,780
0,180 180,480 480,720 720,1110 1110,1470
this week, we're basically done

20
00:00:38,320 --> 00:00:40,020
0,270 270,480 480,750 750,1200
{} with {xv6 -}.|

21
00:00:40,230 --> 00:00:42,330
0,450 660,1230 1290,1890 1890,2010 2010,2100
{} So, {} you know

22
00:00:42,330 --> 00:00:45,000
0,210 210,870 900,1320 1320,2070
file systems, {} {you,all}

23
00:00:45,090 --> 00:00:46,470
0,330 330,660 660,750 750,960 960,1380
know them, you use them,|

24
00:00:46,560 --> 00:00:47,400
0,270 270,420 420,630 630,720 720,840
{} they're one of the

25
00:00:47,400 --> 00:00:50,280
0,540 720,1050 1050,1260 1260,1860 2220,2880
most sort of {} user

26
00:00:50,280 --> 00:00:52,470
0,870 900,1620 1620,1740 1740,1830 1830,2190
facing aspects of an operating

27
00:00:52,470 --> 00:00:53,850
0,510 510,780 780,1170 1170,1290 1290,1380
system,| in addition to the

28
00:00:53,850 --> 00:00:56,970
0,510 750,1830 1860,2220 2400,2610 2610,3120
shell.| And so, {} we

29
00:00:56,970 --> 00:00:58,170
0,120 120,180 180,540 540,960 960,1200
want to understand now| and

30
00:00:58,170 --> 00:00:59,340
0,330 330,480 480,570 570,930 930,1170
the set of lectures actually

31
00:00:59,340 --> 00:01:00,210
0,120 120,240 240,450 450,780 780,870
when it really happens under

32
00:01:00,210 --> 00:01:01,650
0,60 60,600 750,1200 1200,1380 1380,1440
the hoods| and how is

33
00:01:01,650 --> 00:01:02,880
0,90 90,300 300,600 600,690 690,1230
the file system is implemented|

34
00:01:02,880 --> 00:01:03,930
0,270 270,420 420,540 540,600 600,1050
and that's sort of exciting,|

35
00:01:03,930 --> 00:01:05,310
0,270 270,330 330,420 420,900 1110,1380
because you know you use

36
00:01:05,310 --> 00:01:06,360
0,120 120,240 240,300 300,630
them all the time.|

37
00:01:06,520 --> 00:01:07,780
0,240 240,570 570,870 870,990 990,1260
And maybe here to start

38
00:01:07,780 --> 00:01:09,430
0,90 90,210 210,270 270,810 1110,1650
off with a question {}

39
00:01:09,430 --> 00:01:10,570
0,360 360,720 720,840 840,900 900,1140
before diving in any of

40
00:01:10,570 --> 00:01:13,060
0,90 90,750 1110,1680 2100,2280 2280,2490
the details,| I, in one

41
00:01:13,060 --> 00:01:15,730
0,840 840,1200 1200,1920 1920,2160 2160,2670
way {you,know}, {since,you,use} file systems

42
00:01:15,730 --> 00:01:17,920
0,270 270,600 600,1170 1260,1860 2070,2190
are almost daily,| {} in

43
00:01:17,920 --> 00:01:19,210
0,210 210,480 480,840 840,1080 1080,1290
one {way,is} the {xv6 -}

44
00:01:19,210 --> 00:01:20,290
0,240 240,510 510,870 870,990 990,1080
file system different than the

45
00:01:20,290 --> 00:01:21,670
0,270 270,570 570,810 810,960 960,1380
file system that you're using

46
00:01:22,640 --> 00:01:24,200
0,150 150,270 270,1020
in the day-to-day

47
00:01:24,610 --> 00:01:26,060
0,420 420,960
{} work.|

48
00:01:26,460 --> 00:01:27,450
0,240 240,390 390,750 750,870 870,990
Maybe I'll collect them to

49
00:01:27,450 --> 00:01:29,300
0,390 390,660 750,1020 1020,1320
people| and see {}

50
00:01:29,630 --> 00:01:30,560
0,180 180,270 270,540 540,600 600,930
what they think,| for example

51
00:01:30,560 --> 00:01:33,780
0,660 1440,1740 1740,2250 2250,2580
Kendall, Kendall Garner, what.|

52
00:01:34,700 --> 00:01:35,990
0,150 150,270 270,540 540,840 840,1290
Did you notice anything particular

53
00:01:35,990 --> 00:01:37,010
0,240 240,510 510,780 780,900 900,1020
about {xv6 -} that is

54
00:01:37,010 --> 00:01:38,640
0,360 360,450 450,1110
different or similar.|

55
00:01:45,850 --> 00:01:46,810
0,330 330,510 510,750 750,840 840,960
I'm not sure we can

56
00:01:46,810 --> 00:01:48,240
0,210 210,330 330,900
hear your, Kendall.|

57
00:01:49,500 --> 00:01:51,260
0,300 300,780 780,1170
Here I am.|

58
00:01:51,320 --> 00:01:53,900
0,510 660,1110 1200,1530 1560,2460
Yeah.| Yeah okay.| Yeah.|

59
00:01:53,900 --> 00:01:54,740
0,120 120,360 360,420 420,480 480,840
So one of the problems

60
00:01:54,740 --> 00:01:56,900
0,300 600,1200 1350,1650 1650,1800 1800,2160
is size| or at least

61
00:01:56,900 --> 00:01:58,130
0,180 180,420 420,480 480,600 600,1230
the size of the files

62
00:01:58,130 --> 00:01:59,630
0,330 330,540 540,990 990,1380 1380,1500
that {xv6 -} support are

63
00:01:59,630 --> 00:02:00,860
0,420 420,780 780,960 960,1170 1170,1230
much less than {a,lot} of

64
00:02:00,860 --> 00:02:02,150
0,270 270,480 480,930 930,1200 1200,1290
other file systems,| also the

65
00:02:02,150 --> 00:02:03,920
0,690 720,900 900,1080 1080,1470 1470,1770
names for some files are

66
00:02:04,190 --> 00:02:05,560
0,420 420,870
relatively short.|

67
00:02:05,590 --> 00:02:08,860
0,840 1080,1500 1500,2220 2460,2760 2850,3270
And another feature, it's more

68
00:02:08,860 --> 00:02:10,720
0,150 150,330 330,630 630,1050 1050,1860
just to use [] [],|

69
00:02:10,930 --> 00:02:11,710
0,420 420,480 480,600 600,720 720,780
{it,doesn't}, I don't think it

70
00:02:11,710 --> 00:02:12,820
0,180 180,210 210,540 540,690 690,1110
has a {copy-on-write - -}

71
00:02:12,820 --> 00:02:15,220
0,270 270,450 450,1200
for a {file,system}.|

72
00:02:15,590 --> 00:02:17,420
0,630 900,1230 1230,1440 1440,1620 1620,1830
Good, in what way is

73
00:02:17,420 --> 00:02:18,440
0,510
similar.|

74
00:02:20,120 --> 00:02:22,280
0,240 240,660 660,1140 1410,1710 1710,2160
It's similar in the general

75
00:02:22,280 --> 00:02:24,500
0,840 870,1230 1230,1350 1350,1800 1800,2220
structure,| so the idea of

76
00:02:24,530 --> 00:02:26,720
0,300 300,930 1200,1620 1620,2070 2070,2190
you have file names,| you

77
00:02:26,720 --> 00:02:28,580
0,180 180,330 330,510 510,1110 1140,1860
have the {inodes -}, directories,

78
00:02:28,580 --> 00:02:29,700
0,90 90,210 210,510
and all that.|

79
00:02:30,360 --> 00:02:31,520
0,630
Yeah,

80
00:02:31,670 --> 00:02:33,470
0,270 270,570 660,1470 1470,1680 1680,1800
seems good.| {} And how

81
00:02:33,470 --> 00:02:35,080
0,360 360,960
about {}

82
00:02:35,350 --> 00:02:37,440
0,600 600,1020 1020,1080 1080,1590
{Adella - -} Yang.|

83
00:02:38,790 --> 00:02:40,680
0,900 990,1230 1230,1320 1320,1650 1650,1890
How do you compare {xv6

84
00:02:40,680 --> 00:02:41,820
0,210 210,630 630,840 840,900 900,1140
-} {file,system} to the file

85
00:02:41,820 --> 00:02:43,420
0,270 270,570 570,1080
system you use.|

86
00:02:47,380 --> 00:02:49,300
0,390 390,420 420,810 1290,1800 1800,1920
Sorry, {what,is} that.| {The,question,is} like

87
00:02:49,300 --> 00:02:50,560
0,180 180,330 330,990 1020,1140 1140,1260
how would you,| how would

88
00:02:50,560 --> 00:02:52,090
0,90 90,540 540,750 750,1290 1290,1530
you compare the xv6 file

89
00:02:52,090 --> 00:02:53,800
0,780 810,1080 1080,1200 1200,1440 1440,1710
system to the file system,

90
00:02:53,800 --> 00:02:54,790
0,270 270,480 480,600 600,870 870,990
you might be using in

91
00:02:54,790 --> 00:02:56,590
0,300 300,780 1200,1590 1590,1680 1680,1800
daily life| or on your

92
00:02:56,590 --> 00:02:58,600
0,540 540,1110 1110,1470 1470,1650 1650,2010
laptop whatever computer you're using.|

93
00:03:00,700 --> 00:03:03,800
0,930 1380,2550
Any similarities.|

94
00:03:04,460 --> 00:03:06,290
0,240 240,600 600,1140 1140,1350 1350,1830
Yeah, like the the file

95
00:03:06,290 --> 00:03:09,680
0,360 360,960 990,1320 1320,1950 2190,3390
system paths,| {} system like

96
00:03:09,680 --> 00:03:12,320
0,690 780,1710 1710,1950 1950,2490 2490,2640
paths and file system are

97
00:03:12,320 --> 00:03:13,180
0,330
like

98
00:03:13,180 --> 00:03:15,120
0,1050
hierarchical.|

99
00:03:16,060 --> 00:03:17,890
0,420 450,690 690,1260 1260,1440 1440,1830
Yep, that's a good point.|

100
00:03:18,220 --> 00:03:20,020
0,330 330,720 840,1110 1110,1680 1680,1800
Okay, so you know, so

101
00:03:20,020 --> 00:03:21,700
0,120 120,570 720,1260 1260,1380 1380,1680
let me {}, so dive

102
00:03:21,700 --> 00:03:22,570
0,120 120,180 180,360 360,750 750,870
in a little bit| and

103
00:03:22,570 --> 00:03:23,620
0,180 180,390 390,840 840,870 870,1050
sort of talk a little

104
00:03:23,620 --> 00:03:24,610
0,90 90,300 300,690 690,750 750,990
bit about properties of file

105
00:03:24,610 --> 00:03:26,470
0,510 510,600 600,1560 1590,1800 1800,1860
systems,| you know sort of

106
00:03:26,470 --> 00:03:28,540
0,300 300,660 1050,1560 1560,1740 1740,2070
stand out,| {} and one

107
00:03:28,540 --> 00:03:29,620
0,330 330,450 450,660 660,840 840,1080
{I,think} you know you just

108
00:03:29,620 --> 00:03:31,360
0,360 360,1230 1230,1350 1350,1530 1530,1740
mentioned here {Adella -} is

109
00:03:31,360 --> 00:03:33,380
0,330 330,930 960,1560
{} {user-friendly -},

110
00:03:38,730 --> 00:03:40,480
0,210 210,270 270,600 600,1230
{user-friendly - -} names,|

111
00:03:40,980 --> 00:03:42,960
0,180 180,750 750,1080 1080,1500 1830,1980
in particular path names, you

112
00:03:42,960 --> 00:03:44,640
0,300 330,600 600,840 840,990 990,1680
know {hierarchy -} to, hierarchy

113
00:03:44,640 --> 00:03:46,110
0,120 120,360 480,750 750,1260 1260,1470
to them,| to help people

114
00:03:46,110 --> 00:03:47,250
0,60 60,510 510,600 600,1020 1020,1140
to organize their files and

115
00:03:47,250 --> 00:03:49,590
0,840 900,1170 1170,1650 1650,2040 2040,2340
directories or folders whatever term

116
00:03:49,590 --> 00:03:51,390
0,90 90,210 210,270 270,780 960,1800
you want to use {}|

117
00:03:51,810 --> 00:03:53,340
0,570 570,960 960,1140 1140,1260 1260,1530
and it makes it easy

118
00:03:53,340 --> 00:03:55,410
0,570 570,720 720,1020 1020,1350 1590,2070
for {you,know} people to share

119
00:03:55,410 --> 00:03:56,800
0,780
files

120
00:03:58,750 --> 00:04:00,960
0,270 270,630 630,1500
{you,know} between users

121
00:04:02,520 --> 00:04:04,540
0,300 300,1320
and processes.|

122
00:04:04,830 --> 00:04:06,690
0,390 390,720 750,1140 1140,1380 1380,1860
You can name them with

123
00:04:06,840 --> 00:04:09,780
0,570 570,690 690,1050 1050,1680 2190,2940
conveniently to remember names {}.|

124
00:04:10,390 --> 00:04:12,100
0,240 240,420 420,750 750,990 990,1710
And then probably most importantly

125
00:04:12,130 --> 00:04:13,240
0,570 570,660 660,840 840,990 990,1110
prepared at least for all

126
00:04:13,240 --> 00:04:15,220
0,870 900,1530 1530,1620 1620,1800 1800,1980
the subsystems,| that we've looked

127
00:04:15,220 --> 00:04:16,960
0,150 150,660 900,1140 1140,1380 1380,1740
so far in {xv6 -}

128
00:04:17,020 --> 00:04:18,940
0,270 270,570 570,1350
{and,they} provide persistence,|

129
00:04:21,770 --> 00:04:24,040
0,540 540,720 720,900 900,1680
{or,sometimes} that's called durability.|

130
00:04:26,440 --> 00:04:27,670
0,330 330,540 540,570 570,1020 1020,1230
With that, I mean like

131
00:04:27,670 --> 00:04:28,390
0,180 180,270 270,450 450,630 630,720
if you turn off your

132
00:04:28,390 --> 00:04:29,950
0,630 750,1080 1080,1320 1320,1440 1440,1560
computer,| {} you did some

133
00:04:29,950 --> 00:04:30,850
0,390 390,510 510,690 690,810 810,900
work, you turn off your

134
00:04:30,850 --> 00:04:31,990
0,450 450,690 720,930 930,1050 1050,1140
computer and turn off your

135
00:04:31,990 --> 00:04:34,540
0,600 990,1530 1530,1920 1920,2220 2310,2550
laptop,| {} and then a

136
00:04:34,540 --> 00:04:35,470
0,210 210,420 420,720 720,840 840,930
couple days later you come

137
00:04:35,470 --> 00:04:36,520
0,330 330,420 420,600 600,690 690,1050
back, you turn your computer

138
00:04:36,520 --> 00:04:37,840
0,450 570,870 870,990 990,1290 1290,1320
on,| {} the files are

139
00:04:37,840 --> 00:04:38,880
0,210 210,540
still there.|

140
00:04:39,030 --> 00:04:41,490
0,510 510,1050 1050,1350 1380,1680 1680,2460
And, {} if you continue

141
00:04:41,520 --> 00:04:43,020
0,540 540,690 690,900
working with them.|

142
00:04:43,200 --> 00:04:44,850
0,450 540,900 900,1110 1110,1440 1440,1650
{} Which is different from

143
00:04:44,850 --> 00:04:47,280
0,210 210,870 870,1290 1290,2070 2100,2430
like processes or the thing

144
00:04:47,280 --> 00:04:48,300
0,120 120,180 180,570 570,690 690,1020
of the resources that we've

145
00:04:48,390 --> 00:04:49,680
0,240 240,360 360,600 600,840 840,1290
seen so far,| which basically

146
00:04:49,680 --> 00:04:50,820
0,90 90,270 270,390 390,720 720,1140
you know the computer reboots,

147
00:04:50,820 --> 00:04:52,620
0,90 90,210 210,420 420,960 1230,1800
you know they're gone {}|

148
00:04:52,620 --> 00:04:53,520
0,330 330,480 480,630 630,720 720,900
and you have to start

149
00:04:53,520 --> 00:04:54,750
0,90 90,360 360,510 510,780 780,1230
up again,| but file systems

150
00:04:54,750 --> 00:04:56,800
0,210 210,570 570,840 930,1680
can provide this persistence.|

151
00:04:57,060 --> 00:04:59,130
0,240 240,390 390,810 1080,1650 1650,2070
And so they're {} your,

152
00:05:00,140 --> 00:05:01,220
0,270 270,330 330,480 480,750 750,1080
all of you using them,|

153
00:05:01,340 --> 00:05:02,150
0,300 300,510 510,600 600,720 720,810
and what we're gonna be

154
00:05:02,150 --> 00:05:02,930
0,270 270,330 330,420 420,600 600,780
doing in the next couple

155
00:05:02,930 --> 00:05:04,400
0,330 330,390 390,660 660,1260 1260,1470
lectures| is actually understanding how

156
00:05:04,400 --> 00:05:06,500
0,120 120,600 630,1080 1080,1650
to actually work internally.|

157
00:05:06,650 --> 00:05:08,000
0,270 270,510 540,750 750,870 870,1350
{} And this is interesting

158
00:05:08,000 --> 00:05:09,260
0,270 270,330 330,570 570,660 660,1260
for a number of reasons.|

159
00:05:09,930 --> 00:05:11,160
0,660

160
00:05:18,080 --> 00:05:19,640
0,180 180,1080 1230,1350 1350,1440 1440,1560
A one you know the

161
00:05:19,640 --> 00:05:21,100
0,750
abstraction.

162
00:05:21,720 --> 00:05:24,240
0,810 840,1080 1080,1260 1260,1920
Itself it's just useful.

163
00:05:27,150 --> 00:05:28,020
0,210 210,300 300,420 420,810 810,870
And so it's interesting to

164
00:05:28,020 --> 00:05:29,430
0,540 540,690 690,1110 1110,1320 1320,1410
understand you know who is

165
00:05:29,430 --> 00:05:30,630
0,300 300,450 450,570 570,1080 1080,1200
actually how do abstraction is

166
00:05:30,630 --> 00:05:32,100
0,300 300,900
actually implemented.

167
00:05:32,100 --> 00:05:33,030
0,150 150,360 360,570 570,750 750,930
It turns out there's a

168
00:05:33,030 --> 00:05:36,480
0,660 780,1620 1620,2010 2010,2610 2640,3450
couple key interesting aspects, one

169
00:05:36,720 --> 00:05:39,040
0,690 690,1050 1050,1590
eyes crash safety.

170
00:05:43,140 --> 00:05:43,740
0,180 180,360 360,420 420,510 510,600
You'd like it to be

171
00:05:43,740 --> 00:05:44,700
0,60 60,390 390,690 690,810 810,960
the case that you know

172
00:05:44,700 --> 00:05:46,950
0,600 780,1170 1200,1620 1620,2160 2160,2250
if for example during the

173
00:05:46,950 --> 00:05:49,650
0,240 240,510 510,1380 1380,1950 2250,2700
file system operation, the um

174
00:05:49,650 --> 00:05:52,410
0,360 360,990 1170,1890 1890,2190 2190,2760
computer crashes that after reboot

175
00:05:52,650 --> 00:05:54,690
0,660 660,900 900,1200 1200,1440 1440,2040
basically file system still intact,

176
00:05:54,690 --> 00:05:56,700
0,60 60,1200 1200,1350 1350,1500 1500,2010
you know all the variants

177
00:05:56,700 --> 00:05:57,900
0,300 300,420 420,660 660,1020 1020,1200
of the file systems still

178
00:05:57,900 --> 00:05:59,100
0,480 660,900 900,990 990,1110 1110,1200
hold and that you can

179
00:05:59,100 --> 00:06:00,060
0,240 240,390 390,660 660,750 750,960
actually get access to most

180
00:06:00,060 --> 00:06:01,380
0,60 60,180 180,750 990,1230 1230,1320
of your files would be

181
00:06:01,380 --> 00:06:02,820
0,60 60,690 690,840 840,1080 1080,1440
a disaster, if the computer

182
00:06:02,820 --> 00:06:03,660
0,390 390,480 480,540 540,750 750,840
crashed in the middle of

183
00:06:03,660 --> 00:06:05,260
0,300 300,540 540,1230
file system operation.

184
00:06:05,290 --> 00:06:06,610
0,330 330,510 510,900 900,1140 1140,1320
Um, you reboot and there's

185
00:06:06,610 --> 00:06:08,020
0,210 210,420 420,690 690,1080 1110,1410
no file system anymore, or

186
00:06:08,020 --> 00:06:08,860
0,120 120,210 210,330 330,540 540,840
you know the data structure

187
00:06:08,860 --> 00:06:10,060
0,90 90,330 330,480 480,600 600,1200
on disk have been garbled

188
00:06:10,330 --> 00:06:11,920
0,1020
and.

189
00:06:11,920 --> 00:06:13,120
0,180 180,450 450,660
You lost them.

190
00:06:13,240 --> 00:06:14,320
0,240 240,390 390,660 660,870 870,1080
And so this actually turns

191
00:06:14,320 --> 00:06:15,340
0,90 90,150 150,270 270,420 420,1020
out to be a really

192
00:06:15,430 --> 00:06:17,980
0,540 540,990 990,1560 1830,1950 1950,2550
a important topic, um, I'm

193
00:06:17,980 --> 00:06:19,810
0,810 1110,1470 1470,1590 1590,1710 1710,1830
involved and so we're going

194
00:06:19,810 --> 00:06:21,130
0,120 120,360 360,570 570,1050 1050,1320
to talk about that on

195
00:06:21,130 --> 00:06:22,300
0,420 420,660 660,720 720,1080 1080,1170
wednesday, this is basically the

196
00:06:22,300 --> 00:06:23,740
0,210 210,540 540,630 630,1050 1050,1440
main topic for wednesday's lecture.

197
00:06:25,150 --> 00:06:26,460
0,750
I'm.

198
00:06:26,810 --> 00:06:27,800
0,540 540,720 720,840 840,900 900,990
Then there's sort of a

199
00:06:27,800 --> 00:06:29,960
0,330 330,720 720,1140 1140,1530 1530,2160
general question about how to

200
00:06:29,990 --> 00:06:31,680
0,990
layout.

201
00:06:31,680 --> 00:06:32,970
0,300 300,450 450,750 750,1110 1110,1290
Um the file system on

202
00:06:32,970 --> 00:06:34,020
0,540
disk.

203
00:06:35,000 --> 00:06:36,260
0,990
Yeah.

204
00:06:36,260 --> 00:06:37,520
0,90 90,690 690,780 780,1170 1170,1260
The files, the files, the

205
00:06:37,520 --> 00:06:39,080
0,810 900,1080 1080,1200 1200,1410 1410,1560
directories a they all have

206
00:06:39,080 --> 00:06:40,400
0,120 120,270 270,840 840,1080 1080,1320
to be represented in some

207
00:06:40,400 --> 00:06:41,570
0,240 240,390 390,480 480,840 840,1170
way on the disc because

208
00:06:41,570 --> 00:06:42,830
0,210 210,600 600,990 990,1080 1080,1260
like after if you shut

209
00:06:42,830 --> 00:06:43,760
0,150 150,240 240,600 600,690 690,930
down your computer, come back

210
00:06:43,760 --> 00:06:44,900
0,270 270,330 330,840 840,1020 1020,1140
up, you know all the

211
00:06:44,900 --> 00:06:45,920
0,330 330,660 660,840 840,930 930,1020
data still has to be

212
00:06:45,920 --> 00:06:47,060
0,240 240,360 360,480 480,750 750,1140
there and so there's basically

213
00:06:47,060 --> 00:06:48,830
0,270 270,510 510,780 780,1380 1560,1770
on this data structures to

214
00:06:48,830 --> 00:06:50,100
0,840
represent.

215
00:06:50,100 --> 00:06:51,510
0,660 660,870 870,1230 1230,1320 1320,1410
Um the structure of the

216
00:06:51,510 --> 00:06:52,710
0,240 240,570 570,660 660,750 750,1200
file system or the content

217
00:06:52,710 --> 00:06:54,040
0,60 60,150 150,390 390,810
of the file system.

218
00:06:54,480 --> 00:06:56,070
0,450 450,930 930,1290 1290,1530 1530,1590
In a actually six of

219
00:06:56,070 --> 00:06:58,530
0,270 270,360 360,480 480,1020 1530,2460
course you know that representation

220
00:06:58,530 --> 00:06:59,760
0,120 120,210 210,450 450,780 780,1230
or the data structures used

221
00:06:59,760 --> 00:07:01,560
0,510 540,840 840,1350 1350,1530 1530,1800
are quite simple, you just

222
00:07:01,560 --> 00:07:02,420
0,300
do.

223
00:07:02,450 --> 00:07:04,640
0,210 210,870 870,1380 1380,1740 1800,2190
For pedagogical reasons and real

224
00:07:04,640 --> 00:07:06,650
0,240 240,690 690,960 960,1500 1500,2010
file systems more complex data

225
00:07:06,650 --> 00:07:07,580
0,420 420,540 540,660 660,750 750,930
structures, but you can just

226
00:07:07,580 --> 00:07:08,510
0,150 150,360 360,540 540,690 690,930
think about this as on

227
00:07:08,510 --> 00:07:10,060
0,210 210,480 480,1020
this data structures.

228
00:07:10,840 --> 00:07:11,500
0,240 240,330 330,450 450,600 600,660
And so we'll see a

229
00:07:11,500 --> 00:07:12,790
0,150 150,210 210,570 810,930 930,1290
lot of that in today's

230
00:07:12,790 --> 00:07:15,040
0,510 840,1050 1050,1170 1170,1860 1890,2250
lecture and then finally, um,

231
00:07:15,040 --> 00:07:17,050
0,270 270,450 450,540 540,1080 1290,2010
what makes it interesting is

232
00:07:17,080 --> 00:07:18,560
0,1050
performance.

233
00:07:20,360 --> 00:07:23,810
0,540 930,1710 1740,2760 2880,3360 3360,3450
Um the devices typically on

234
00:07:23,810 --> 00:07:25,130
0,330 330,450 450,570 570,870 870,1320
which you know file systems

235
00:07:25,130 --> 00:07:26,150
0,60 60,480 480,630 630,720 720,1020
are stored in our storage

236
00:07:26,150 --> 00:07:28,860
0,690 1080,1260 1260,1680 1680,2190
devices are typically slow.

237
00:07:35,930 --> 00:07:37,310
0,240 240,630 630,1110 1110,1230 1230,1380
The meaning example to me

238
00:07:37,310 --> 00:07:38,240
0,120 120,330 330,390 390,840 840,930
to write a block, you

239
00:07:38,240 --> 00:07:39,980
0,150 150,570 570,750 750,1290 1290,1740
know on a solid-state disk

240
00:07:40,070 --> 00:07:41,540
0,390 390,810 960,1110 1110,1290 1290,1470
ssd disk I said when

241
00:07:41,540 --> 00:07:43,490
0,150 150,510 510,570 570,1350 1620,1950
you order a millisecond and

242
00:07:43,490 --> 00:07:44,270
0,150 150,210 210,270 270,510 510,780
so in the middle second,

243
00:07:44,270 --> 00:07:45,350
0,120 120,210 210,360 360,480 480,1080
you can do a ton

244
00:07:45,350 --> 00:07:46,340
0,90 90,510
of work.

245
00:07:46,340 --> 00:07:47,690
0,510 510,720 720,810 810,900 900,1350
Um, and so it's important

246
00:07:47,690 --> 00:07:49,070
0,240 240,540 540,720 720,780 780,1380
that you're trying to avoid

247
00:07:49,100 --> 00:07:51,140
0,390 390,750 750,840 840,1350 1740,2040
a going to disk, we'll

248
00:07:51,140 --> 00:07:52,250
0,180 180,390 390,480 480,870 870,1110
see that in multiple ways,

249
00:07:52,250 --> 00:07:53,540
0,150 150,300 300,510 510,690 690,1290
so we see that potential,

250
00:07:53,810 --> 00:07:55,280
0,480 480,720 720,990 990,1110 1110,1470
a file system will have

251
00:07:55,280 --> 00:07:56,630
0,300 300,390 390,480 480,750 750,1350
something of a buffer cache

252
00:07:56,720 --> 00:07:58,240
0,150 150,240 240,540 540,1080
or a block cache.

253
00:08:01,300 --> 00:08:02,800
0,570 570,1020 1020,1170 1170,1350 1350,1500
Um, and you also see

254
00:08:02,800 --> 00:08:05,080
0,90 90,1050 1050,1530 1530,2070 2070,2280
it invisibly additional forms or

255
00:08:05,080 --> 00:08:06,660
0,300 300,960
more currency.

256
00:08:06,800 --> 00:08:08,980
0,210 210,960 1080,1590
For example if.

257
00:08:09,440 --> 00:08:10,400
0,240 240,420 420,480 480,750 750,960
You do a path name

258
00:08:10,400 --> 00:08:12,830
0,510 600,750 750,930 930,1800 1830,2430
lookup, you know, um then

259
00:08:12,830 --> 00:08:14,660
0,210 210,630 630,870 870,1260 1260,1830
that typically isn't involved operation

260
00:08:14,660 --> 00:08:16,670
0,480 480,900 900,1020 1020,1440 1440,2010
required descending the directory hierarchy,

261
00:08:16,670 --> 00:08:18,480
0,120 120,510 510,660 690,1260
you looking up auction.

262
00:08:18,480 --> 00:08:20,880
0,180 180,1260 1350,2040 2040,2310 2310,2400
For a directory, find the

263
00:08:20,880 --> 00:08:21,930
0,270 270,450 450,510 510,600 600,1050
file name in the directory,

264
00:08:21,930 --> 00:08:22,770
0,210 210,390 390,540 540,600 600,840
then go through the next

265
00:08:22,770 --> 00:08:24,870
0,420 420,720 720,1200 1530,1950 1980,2100
directory, etc etc, and you

266
00:08:24,870 --> 00:08:25,770
0,270 270,330 330,480 480,540 540,900
wanted to be the case

267
00:08:25,770 --> 00:08:27,150
0,180 180,390 390,780 780,1230 1230,1380
that if one process is

268
00:08:27,150 --> 00:08:28,530
0,270 270,540 540,750 750,1110 1110,1380
doing path name lookup, another

269
00:08:28,530 --> 00:08:30,690
0,450 450,690 720,1170 1170,1920 1980,2160
process can run concurrently or

270
00:08:30,690 --> 00:08:32,040
0,60 60,780 810,1020 1020,1110 1110,1350
in parallel with the first

271
00:08:32,040 --> 00:08:33,660
0,360 360,570 570,1140 1140,1440 1440,1620
process doing a path name

272
00:08:33,660 --> 00:08:34,340
0,300
lookup.

273
00:08:34,860 --> 00:08:35,790
0,210 210,330 330,450 450,660 660,930
And so we'll see that

274
00:08:35,910 --> 00:08:36,960
0,270 270,330 330,840 840,960 960,1050
sort of currency you know

275
00:08:36,960 --> 00:08:38,130
0,240 240,540 630,1050 1050,1170 1170,1170
shows up again is a

276
00:08:38,130 --> 00:08:39,510
0,240 240,840 930,1140 1140,1320 1320,1380
big topic a in the

277
00:08:39,510 --> 00:08:41,200
0,390 390,450 450,690 690,1260
context of file systems.

278
00:08:41,360 --> 00:08:42,460
0,570
I'm.

279
00:08:42,840 --> 00:08:44,250
0,600 660,870 870,1080 1080,1290 1290,1410
The other reason why it's

280
00:08:44,250 --> 00:08:45,450
0,420 420,720 720,990 990,1140 1140,1200
interesting is it's going to

281
00:08:45,450 --> 00:08:46,140
0,60 60,150 150,480 480,570 570,690
be the topic of two

282
00:08:46,140 --> 00:08:47,240
0,510
labs.

283
00:08:47,580 --> 00:08:49,680
0,330 330,450 450,660 660,1320 1500,2100
So we're gonna have a

284
00:08:49,710 --> 00:08:51,360
0,510 510,870 870,1140 1140,1260 1260,1650
next upcoming lab is completely

285
00:08:51,360 --> 00:08:52,860
0,330 330,420 420,660 660,1110 1110,1500
focused on file systems and

286
00:08:52,890 --> 00:08:54,060
0,120 120,390 390,660 660,930 930,1170
the lap after that is

287
00:08:54,060 --> 00:08:55,410
0,210 210,690 690,780 780,1050 1050,1350
a combination of virtual memory

288
00:08:55,410 --> 00:08:57,180
0,90 90,300 300,720 720,960 1350,1770
and file systems and even

289
00:08:57,180 --> 00:08:58,230
0,150 150,420 420,540 540,930 930,1050
the lab for today or

290
00:08:58,230 --> 00:09:00,150
0,180 180,750 750,1200 1200,1290 1290,1920
this week has a component

291
00:09:00,150 --> 00:09:01,920
0,900 1140,1440 1440,1500 1500,1680 1680,1770
to trying to make the

292
00:09:01,920 --> 00:09:03,460
0,210 210,480 480,630 630,1110
buffer cache more parallel.

293
00:09:05,180 --> 00:09:06,950
0,450 870,1050 1050,1230 1230,1350 1350,1770
So that's why it's interesting

294
00:09:08,360 --> 00:09:09,830
0,510 510,690 690,960 960,1260 1260,1470
and you just you should

295
00:09:09,830 --> 00:09:11,930
0,180 180,300 300,390 390,1080 1140,2100
get off the ground to

296
00:09:11,990 --> 00:09:13,700
0,720 720,1140 1140,1230 1230,1470 1470,1710
understand what the file system

297
00:09:13,700 --> 00:09:15,230
0,180 180,720 810,1110 1110,1350 1350,1530
must provide just let's look

298
00:09:15,230 --> 00:09:17,900
0,540 540,690 690,1170 1200,1920 1980,2670
again at the basic a

299
00:09:17,900 --> 00:09:19,600
0,210 210,480 480,780 780,1290
file system system calls.

300
00:09:19,810 --> 00:09:21,000
0,270 270,720
Right to.

301
00:09:21,530 --> 00:09:22,780
0,630
The.

302
00:09:26,420 --> 00:09:27,590
0,240 240,360 360,930 930,1050 1050,1170
If you example if I'm

303
00:09:27,590 --> 00:09:29,600
0,450 450,840 990,1170 1170,1290 1290,2010
looking at you know API,

304
00:09:29,600 --> 00:09:31,220
0,330 330,540 540,780 780,1320 1380,1620
these file system calls now,

305
00:09:31,220 --> 00:09:32,180
0,60 60,240 240,510 510,930 930,960
we can through there's a

306
00:09:32,180 --> 00:09:33,500
0,240 240,330 330,690 690,1170 1170,1320
couple of interesting properties that

307
00:09:33,500 --> 00:09:34,460
0,270 270,360 360,630 630,900 900,960
must be true about the

308
00:09:34,460 --> 00:09:35,700
0,690
implication.

309
00:09:35,870 --> 00:09:38,120
0,600 900,1230 1230,1350 1350,2070 2130,2250
Um, and so do you

310
00:09:38,120 --> 00:09:39,710
0,120 120,450 450,690 690,930 930,1590
know the file system calls.

311
00:09:42,810 --> 00:09:44,340
0,300 300,480 480,660 660,990 990,1530
We've seen them early on

312
00:09:44,520 --> 00:09:46,180
0,480 480,1080
in a.

313
00:09:46,300 --> 00:09:48,580
0,180 180,240 240,900 990,1650 1680,2280
In the semester and a

314
00:09:48,580 --> 00:09:49,270
0,90 90,210 210,420 420,600 600,690
you know we've looked at

315
00:09:49,270 --> 00:09:51,040
0,420 420,840 840,1140 1140,1410 1410,1770
most other unix system calls

316
00:09:51,040 --> 00:09:51,850
0,120 120,210 210,300 300,660 660,810
how do we implement it

317
00:09:51,850 --> 00:09:54,130
0,150 150,510 510,600 600,1140 1680,2280
like fork and exec pipes,

318
00:09:54,130 --> 00:09:55,420
0,210 210,330 330,690 780,1110 1110,1290
all that stuff is really

319
00:09:55,420 --> 00:09:56,170
0,150 150,300 300,390 390,660 660,750
this set of lectures, is

320
00:09:56,170 --> 00:09:57,610
0,240 240,780 780,1110 1110,1350 1350,1440
really focusing on how to

321
00:09:57,610 --> 00:09:59,200
0,420 420,510 510,750 750,1050 1050,1590
implement the file system calls.

322
00:10:00,400 --> 00:10:02,500
0,450 450,450 1590,1920 1920,1980 1980,2100
So, um, first of all,

323
00:10:02,500 --> 00:10:05,260
0,240 240,960 1710,2430 2430,2580 2580,2760
let's startup applications with a

324
00:10:05,290 --> 00:10:07,400
0,480 480,1380
simple scenario.

325
00:10:08,640 --> 00:10:10,710
0,210 210,870 900,1050 1050,1350 1470,2070
We have you know say

326
00:10:10,740 --> 00:10:11,790
0,150 150,420 420,480 480,870 870,1050
we create a file X

327
00:10:11,790 --> 00:10:13,080
0,720
Y.

328
00:10:13,080 --> 00:10:15,150
0,390 390,720 750,1350 1440,1860 1860,2070
A or file y in

329
00:10:15,150 --> 00:10:17,200
0,90 90,840 840,1290
the directory, um.

330
00:10:19,110 --> 00:10:20,360
0,630
X.

331
00:10:20,780 --> 00:10:21,880
0,630
I'm.

332
00:10:23,700 --> 00:10:24,720
0,270 270,480 480,570 570,840 840,1020
Yeah wake up probably left

333
00:10:24,720 --> 00:10:25,500
0,240
too.

334
00:10:27,740 --> 00:10:30,520
0,1890
Yeah.

335
00:10:34,060 --> 00:10:34,990
0,210 210,330 330,570 570,810 810,930
In the file next we

336
00:10:34,990 --> 00:10:36,940
0,120 120,420 510,840 840,1170 1170,1950
have to provide some flags,

337
00:10:36,940 --> 00:10:37,660
0,90 90,210 210,360 360,510 510,720
we don't really care about

338
00:10:37,660 --> 00:10:38,800
0,240 240,600 600,840 840,1020 1020,1140
their flag, so I'm just

339
00:10:38,800 --> 00:10:40,450
0,120 120,180 180,420 420,810 1470,1650
going to ignore them, so

340
00:10:40,450 --> 00:10:41,740
0,180 180,390 390,750 750,840 840,1290
this will create a file

341
00:10:41,740 --> 00:10:44,170
0,300 300,360 360,600 600,1290 1620,2430
returns a file descriptor a

342
00:10:44,170 --> 00:10:45,370
0,150 150,270 270,510 510,600 600,1200
you know to the caller

343
00:10:45,580 --> 00:10:46,960
0,510 510,570 570,1050 1050,1140 1140,1380
and the caller, the user

344
00:10:46,960 --> 00:10:49,090
0,720 720,1260 1260,1320 1320,1740 1740,2130
application connection, for example right,

345
00:10:49,120 --> 00:10:49,960
0,90 90,210 210,360 360,600 600,840
you know through that file

346
00:10:49,960 --> 00:10:51,550
0,720 720,870 870,1110 1110,1380 1380,1590
descriptors as we've seen many

347
00:10:51,550 --> 00:10:53,560
0,270 270,900 1260,1560 1560,1710 1710,2010
times before there's a right

348
00:10:53,560 --> 00:10:56,100
0,210 210,600 600,990 990,2160
F d maybe avc.

349
00:10:56,270 --> 00:10:58,180
0,210 210,420 420,690 690,1380
You all three characters.

350
00:10:58,550 --> 00:11:00,260
0,540 720,930 930,1020 1020,1260 1260,1710
A lot of things, actually

351
00:11:00,260 --> 00:11:01,430
0,330 330,600 600,900 900,960 960,1170
I know already a couple

352
00:11:01,430 --> 00:11:03,020
0,150 150,270 270,360 360,750 840,1590
things that we can point

353
00:11:03,020 --> 00:11:05,120
0,360 390,630 630,1530 1530,1680 1680,2100
out right frenzies to calls

354
00:11:05,120 --> 00:11:07,070
0,120 120,270 270,480 480,1080 1080,1950
is that first of all.

355
00:11:07,580 --> 00:11:08,720
0,600
Yeah.

356
00:11:10,260 --> 00:11:11,740
0,390 390,1020
Path names.

357
00:11:13,910 --> 00:11:14,780
0,330 330,570 570,690 690,780 780,870
Let's show up in the

358
00:11:14,780 --> 00:11:16,100
0,570 570,870 870,1020 1020,1140 1140,1320
interface and we're going to

359
00:11:16,100 --> 00:11:17,660
0,180 180,330 330,960
have to implement.

360
00:11:17,710 --> 00:11:20,470
0,1440 1440,1590 1590,1710 1710,2280 2310,2760
Names are you Mo human

361
00:11:20,470 --> 00:11:21,720
0,660
readable.

362
00:11:22,680 --> 00:11:24,270
0,300 300,540 540,1170 1290,1410 1410,1590
They're not numbers, you know

363
00:11:24,270 --> 00:11:25,560
0,150 150,330 330,780 780,990 990,1290
they get selected by the

364
00:11:25,560 --> 00:11:26,760
0,630
user.

365
00:11:29,280 --> 00:11:31,110
0,570 570,1020 1020,1320 1320,1530 1530,1830
Um, another interesting thing here

366
00:11:31,110 --> 00:11:32,100
0,150 150,420 420,630 630,750 750,990
is that in the write

367
00:11:32,100 --> 00:11:33,600
0,300 300,840
system call.

368
00:11:33,600 --> 00:11:35,100
0,120 120,420 420,720 720,1350 1380,1500
Um, there's no offset as

369
00:11:35,100 --> 00:11:36,440
0,90 90,690
an argument.

370
00:11:36,440 --> 00:11:37,850
0,150 150,240 240,630 630,750 750,1410
So the offset is implicit.

371
00:11:39,350 --> 00:11:40,910
0,150 150,210 210,480 480,750 750,1560
So the file system somewhere.

372
00:11:41,790 --> 00:11:44,400
0,390 390,990 1050,1410 1410,2010
Much store, the offset.

373
00:11:44,490 --> 00:11:45,270
0,150 150,270 270,420 420,480 480,780
If you do a second

374
00:11:45,270 --> 00:11:46,470
0,270 270,390 390,690 690,990 990,1200
call to write correct will

375
00:11:46,470 --> 00:11:47,460
0,150 150,330 330,570 570,690 690,990
end up as you know

376
00:11:47,490 --> 00:11:48,450
0,270 270,510 510,630 630,690 690,960
the next set of bytes

377
00:11:48,450 --> 00:11:49,710
0,150 150,420 420,510 510,750 750,1260
will breathe in that location

378
00:11:49,710 --> 00:11:50,660
0,420
for.

379
00:11:51,080 --> 00:11:52,300
0,630
HMM.

380
00:11:52,480 --> 00:11:53,350
0,90 90,240 240,390 390,720 720,870
You know, so maybe some

381
00:11:53,350 --> 00:11:54,370
0,210 210,480 480,780 780,870 870,1020
more interesting calls that we

382
00:11:54,370 --> 00:11:55,930
0,180 180,540 540,1020 1020,1320 1320,1560
haven't looked at much but

383
00:11:55,930 --> 00:11:57,280
0,120 120,750 780,900 900,1080 1080,1350
no example, you know the

384
00:11:57,370 --> 00:11:58,840
0,240 240,360 360,660 660,1080 1200,1470
ex v six and all

385
00:11:58,840 --> 00:12:00,490
0,210 210,480 480,870 870,1230 1230,1650
unit trial systems basically support

386
00:12:00,490 --> 00:12:03,430
0,360 360,720 810,1650 1680,2280 2310,2940
calls to create a lynx.

387
00:12:04,190 --> 00:12:05,930
0,240 300,570 570,960 960,1530 1560,1740
To have multiple names for

388
00:12:05,930 --> 00:12:07,250
0,90 90,450 450,930 930,1260 1260,1320
the same files for the

389
00:12:07,250 --> 00:12:08,720
0,270 270,720 750,900 900,990 990,1470
same file, so for example

390
00:12:09,260 --> 00:12:10,760
0,210 210,390 390,900 900,1110 1110,1500
it might call like link

391
00:12:10,760 --> 00:12:13,040
0,270 270,990 1080,1680 1680,1740 1740,2280
that basically creates a second

392
00:12:13,070 --> 00:12:15,890
0,780 1560,1950 1950,2010 2010,2490 2490,2820
name for the original file,

393
00:12:15,890 --> 00:12:17,150
0,180 180,300 300,570 570,870 870,1260
so the temple creates names

394
00:12:17,150 --> 00:12:18,740
0,270 270,450 450,780 810,1140 1140,1590
ie, for the file, why.

395
00:12:19,250 --> 00:12:21,200
0,330 330,510 510,840 840,1410 1410,1950
Um that we earlier created.

396
00:12:24,040 --> 00:12:26,120
0,420 480,960 960,1560
So multiple names.

397
00:12:32,780 --> 00:12:33,770
0,150 150,360 360,600 600,900 900,990
The file system, probably in

398
00:12:33,770 --> 00:12:35,000
0,300 300,480 480,570 570,720 720,1230
Germany has to keep track

399
00:12:35,030 --> 00:12:36,140
0,120 120,360 360,510 510,720 720,1110
you know in some way

400
00:12:36,140 --> 00:12:37,850
0,840 840,1170 1170,1440 1440,1590 1590,1710
that multiple names might be

401
00:12:37,850 --> 00:12:39,260
0,360 360,480 480,540 540,840 840,1410
pointing to the same file.

402
00:12:40,030 --> 00:12:42,730
0,660 930,1260 1260,1470 1470,1890 1890,2700
Um, we might actually remove.

403
00:12:43,870 --> 00:12:46,780
0,360 360,840 840,1110 1110,1890 1920,2910
We're changed name space, while

404
00:12:46,870 --> 00:12:48,280
0,120 120,450 450,540 540,1110 1140,1410
the file is open, so

405
00:12:48,280 --> 00:12:49,560
0,90 90,690
for example.

406
00:12:49,800 --> 00:12:51,630
0,480 540,690 690,840 840,1350 1380,1830
Why we could call user

407
00:12:51,630 --> 00:12:52,470
0,180 180,420 420,660 660,720 720,840
might actually call it a

408
00:12:52,470 --> 00:12:53,520
0,390 390,510 510,570 570,780 780,1050
process where the same process

409
00:12:53,520 --> 00:12:54,870
0,150 150,480 480,630 630,1140 1140,1350
might call a link you

410
00:12:54,870 --> 00:12:56,340
0,180 180,540 540,600 600,990 990,1470
to remove a particular file.

411
00:12:56,980 --> 00:12:58,840
0,570 990,1200 1200,1500 1500,1560 1560,1860
Um, in fact you know

412
00:12:58,840 --> 00:12:59,860
0,180 180,570 570,660 660,900 900,1020
we removed the file X

413
00:12:59,860 --> 00:13:01,030
0,360 360,540 540,690 690,900 900,1170
Y that we actually open

414
00:13:01,030 --> 00:13:02,170
0,540 540,690 690,780 780,990 990,1140
earlier but we still have

415
00:13:02,170 --> 00:13:03,970
0,90 90,300 300,750 750,1230 1590,1800
a file descriptor open and

416
00:13:03,970 --> 00:13:04,900
0,180 180,240 240,720 720,780 780,930
so in fact you know

417
00:13:04,900 --> 00:13:05,740
0,90 90,210 210,510 510,750 750,840
we can still write to

418
00:13:05,740 --> 00:13:06,560
0,300
it.

419
00:13:07,530 --> 00:13:09,480
0,750 960,1230 1230,1440 1440,1650 1650,1950
Um, so we can still

420
00:13:09,480 --> 00:13:11,010
0,270 270,600 600,840 840,1380 1410,1530
write to F D you

421
00:13:11,010 --> 00:13:12,120
0,120 120,210 210,570 570,630 630,1110
know, for example the character

422
00:13:12,120 --> 00:13:13,800
0,360 360,720 720,1170
whatever D E.

423
00:13:14,020 --> 00:13:15,400
0,840
Enough.

424
00:13:16,150 --> 00:13:17,200
0,210 210,330 330,630 630,930 930,1050
And it actually worked out

425
00:13:17,200 --> 00:13:18,140
0,390
fine.

426
00:13:18,440 --> 00:13:20,840
0,510 510,780 780,1380 1380,2220 2250,2400
Um, so basically while you

427
00:13:20,840 --> 00:13:22,640
0,180 180,540 540,930 930,1020 1020,1800
know file file was used,

428
00:13:22,640 --> 00:13:24,320
0,90 90,390 390,840 840,990 990,1680
the name space that surrounds

429
00:13:24,320 --> 00:13:26,300
0,360 360,510 510,810 810,1260 1290,1980
it could actually be changed.

430
00:13:27,160 --> 00:13:28,600
0,420 810,1080 1080,1200 1200,1350 1350,1440
And so it has to

431
00:13:28,600 --> 00:13:29,440
0,120 120,180 180,690 690,750 750,840
be the case, you know

432
00:13:29,440 --> 00:13:29,980
0,90 90,180 180,330 330,390 390,540
if you sort of look

433
00:13:29,980 --> 00:13:30,820
0,90 90,420 420,570 570,690 690,840
at this you know sort

434
00:13:30,820 --> 00:13:32,020
0,90 90,390 390,540 540,810 810,1200
of things that there's a

435
00:13:32,020 --> 00:13:32,980
0,210 210,270 270,540 540,750 750,960
bunch of interesting things going

436
00:13:32,980 --> 00:13:34,570
0,390 390,870 870,960 960,1230 1230,1590
on eternally, the file system,

437
00:13:34,840 --> 00:13:36,640
0,90 90,600 810,1140 1140,1410 1410,1800
for example a file system

438
00:13:36,850 --> 00:13:38,740
0,270 270,690 690,960 960,1050 1050,1890
file descriptor must be associated.

439
00:13:39,220 --> 00:13:40,570
0,120 120,240 240,930 990,1140 1140,1350
We have some you know

440
00:13:40,570 --> 00:13:43,480
0,720 1140,1890 1890,2310 2310,2820 2820,2910
object that is independent of

441
00:13:43,480 --> 00:13:45,400
0,90 90,510 870,1290 1290,1410 1410,1920
the name actually has a.

442
00:13:45,940 --> 00:13:46,990
0,420 420,510 510,660 660,960 960,1050
Because you know even if

443
00:13:46,990 --> 00:13:48,280
0,90 90,300 300,810 810,1080 1080,1290
the name changes the file

444
00:13:48,280 --> 00:13:49,660
0,360 360,630 630,1050 1050,1260 1260,1380
descriptor, still point or you

445
00:13:49,660 --> 00:13:52,060
0,150 180,810 810,1440 1470,2130 2130,2400
know, um, uh, references, the

446
00:13:52,120 --> 00:13:54,400
0,450 450,840 840,1170 1170,1800
same file object itself.

447
00:13:54,790 --> 00:13:56,620
0,450 690,1020 1020,1320 1380,1560 1560,1830
And, um, so, in fact

448
00:13:56,620 --> 00:13:57,760
0,180 180,600 600,780 780,990 990,1140
if you think about this,

449
00:13:57,760 --> 00:13:58,360
0,90 90,330 330,420 420,540 540,600
it has to be the

450
00:13:58,360 --> 00:14:00,610
0,300 300,420 420,1080 1350,2010 2040,2250
case that basically, um there

451
00:14:00,610 --> 00:14:02,830
0,210 210,300 300,660 1320,1770 1770,2220
has to be some internal

452
00:14:02,830 --> 00:14:05,650
0,840 840,1440 1560,1680 1680,2280 2400,2820
representation of the file inside

453
00:14:05,650 --> 00:14:06,670
0,60 60,120 120,510 510,840 840,1020
of the operating system, that's

454
00:14:06,670 --> 00:14:08,770
0,570 570,660 660,780 780,1200 1500,2100
independent of the name itself.

455
00:14:10,630 --> 00:14:11,800
0,450 450,570 570,720 720,900 900,1170
Um, and so we're looking

456
00:14:11,800 --> 00:14:12,610
0,210 210,300 300,360 360,690 690,810
at in a second but

457
00:14:12,610 --> 00:14:13,990
0,210 210,630 630,960 960,1320 1320,1380
there's one other point I

458
00:14:13,990 --> 00:14:15,280
0,270 270,330 330,570 570,930 930,1290
wanted to make here is

459
00:14:15,610 --> 00:14:16,720
0,300 300,690 690,780 780,870 870,1110
the goal of the file

460
00:14:16,720 --> 00:14:17,890
0,300 300,420 420,510 510,600 600,1170
system is to be implemented,

461
00:14:17,890 --> 00:14:19,180
0,120 120,600 600,840 840,930 930,1290
an API like the ones

462
00:14:19,180 --> 00:14:20,320
0,180 180,300 300,600 600,960 960,1140
that we're looking here which

463
00:14:20,320 --> 00:14:21,250
0,150 150,330 330,510 510,600 600,930
is a sort of typical

464
00:14:21,250 --> 00:14:23,140
0,270 270,660 660,1410
file system API.

465
00:14:23,140 --> 00:14:24,100
0,390 420,570 570,660 660,720 720,960
Now, this is of course

466
00:14:24,100 --> 00:14:25,780
0,180 180,300 300,690 690,1200 1560,1680
not the only way to

467
00:14:25,780 --> 00:14:26,830
0,90 90,270 270,360 360,690 690,1050
be able to storage system

468
00:14:27,070 --> 00:14:28,420
0,510 510,720 720,900 900,1230 1230,1350
or going to store the

469
00:14:28,420 --> 00:14:29,470
0,420 420,540 540,840 840,930 930,1050
information on this, you know

470
00:14:29,470 --> 00:14:31,300
0,120 120,240 240,660 660,1500 1500,1830
we could imagine completely different

471
00:14:31,300 --> 00:14:32,480
0,90 90,690
a piss.

472
00:14:32,480 --> 00:14:35,200
0,570 870,1530 1560,2160
Um, and um.

473
00:14:35,230 --> 00:14:36,520
0,180 180,660 660,750 750,870 870,1290
For example, you know maybe

474
00:14:36,520 --> 00:14:39,040
0,180 180,810 840,1530 1530,1740 2160,2520
use a database write store,

475
00:14:39,040 --> 00:14:41,080
0,120 120,360 360,1140 1170,1740 1770,2040
some data persistently a months

476
00:14:41,080 --> 00:14:43,120
0,240 240,330 330,420 420,1320 1620,2040
access to the data provides

477
00:14:43,120 --> 00:14:45,070
0,240 240,540 540,1200 1200,1500 1500,1950
very different programming or API

478
00:14:45,070 --> 00:14:47,530
0,300 300,900 1110,1860 1890,2190 2190,2460
user API, then a file

479
00:14:47,530 --> 00:14:48,580
0,240 240,630
system does.

480
00:14:48,640 --> 00:14:49,840
0,210 210,360 360,630 630,1140 1140,1200
And so just important to

481
00:14:49,840 --> 00:14:50,980
0,120 120,180 180,480 480,630 630,1140
keep in mind that you

482
00:14:50,980 --> 00:14:53,470
0,450 960,1680 2010,2190 2190,2280 2280,2490
know, um, you know there's

483
00:14:53,470 --> 00:14:55,240
0,180 180,450 450,660 660,1470 1470,1770
other ways of organizing storage

484
00:14:55,240 --> 00:14:56,470
0,420 420,510 510,780 780,930 930,1230
systems and where our focus

485
00:14:56,470 --> 00:14:57,430
0,120 120,240 240,330 330,480 480,960
is going to be on

486
00:14:57,430 --> 00:14:58,750
0,240 240,540 540,690 690,930 930,1320
file system, which is typically

487
00:14:58,750 --> 00:15:00,220
0,480 480,630 630,720 720,1050 1050,1470
provided by an operating system.

488
00:15:00,890 --> 00:15:02,810
0,270 270,480 480,930 930,1140 1320,1920
Um and databases are typically

489
00:15:02,810 --> 00:15:03,950
0,570 570,630 630,930 930,1050 1050,1140
implemented on top of the

490
00:15:03,950 --> 00:15:05,540
0,270 270,780 780,1020 1020,1350 1350,1590
file system or email, most

491
00:15:05,540 --> 00:15:07,130
0,90 90,480 480,990 1230,1320 1320,1590
of work around the file

492
00:15:07,130 --> 00:15:09,590
0,360 750,1830 1830,2010 2010,2190 2190,2460
system, you can have direct

493
00:15:09,590 --> 00:15:11,360
0,360 360,720 780,840 840,1350
access to the disk.

494
00:15:12,750 --> 00:15:13,710
0,180 180,270 270,480 480,630 630,960
We have a two questions

495
00:15:13,710 --> 00:15:15,210
0,90 90,180 180,660 870,1110 1110,1500
in the chat, um, yeah.

496
00:15:16,780 --> 00:15:17,800
0,420
Money.

497
00:15:18,990 --> 00:15:19,980
0,270 270,390 390,450 450,810 810,990
She's going to ask any

498
00:15:19,980 --> 00:15:21,140
0,660
questions.

499
00:15:22,090 --> 00:15:23,920
0,330 330,630 630,1200 1200,1290 1290,1830
A soul increments a reference

500
00:15:24,160 --> 00:15:25,840
0,150 150,270 270,840 840,1050 1050,1680
to the underlying file descriptor

501
00:15:25,840 --> 00:15:28,540
0,600 600,1350 1350,1950 1950,2400 2430,2700
and linked documented, yes that

502
00:15:28,540 --> 00:15:29,890
0,150 150,630 660,1080 1080,1290 1290,1350
is correct, we'll talk a

503
00:15:29,890 --> 00:15:30,730
0,150 150,300 300,510 510,750 750,840
little bit more about it

504
00:15:30,730 --> 00:15:31,600
0,360
later.

505
00:15:31,770 --> 00:15:33,240
0,480 480,810 810,1170 1170,1410 1410,1470
Um, another question here is

506
00:15:33,240 --> 00:15:34,560
0,330 330,450 450,810 810,1080 1080,1320
about a soft links versus

507
00:15:34,560 --> 00:15:38,040
0,270 270,720 750,1380 1770,2610 3000,3480
hard links, um, I'm going

508
00:15:38,040 --> 00:15:39,090
0,60 60,300 300,510 510,750 750,1050
to talk much about it

509
00:15:39,090 --> 00:15:41,520
0,480 480,1200 1500,2100 2130,2310 2310,2430
today, um, um, but you

510
00:15:41,520 --> 00:15:43,080
0,210 210,330 330,810 810,1170 1170,1560
won't be implementing soft links

511
00:15:43,080 --> 00:15:45,900
0,660 690,810 810,1410 1500,2400
in the next um.

512
00:15:45,990 --> 00:15:47,010
0,180 180,240 240,450 450,750 750,1020
In the file system lab

513
00:15:47,010 --> 00:15:48,340
0,150 150,270 270,750
that is upcoming.

514
00:15:48,640 --> 00:15:50,200
0,270 270,750 750,870 870,1200 1200,1560
So X by itself implements

515
00:15:50,200 --> 00:15:51,640
0,210 210,630 630,870 870,1020 1020,1440
hard links, and you implement

516
00:15:51,640 --> 00:15:53,080
0,270 270,570 570,810 810,960 960,1440
soft links, um, in addition.

517
00:15:55,040 --> 00:15:57,620
0,270 270,930 1110,1410 1410,2010
Any questions, other questions.

518
00:16:04,490 --> 00:16:06,200
0,150 150,420 420,1020 1020,1170 1170,1710
The link operates on the

519
00:16:06,500 --> 00:16:07,730
0,210 210,660 660,750 750,990 990,1230
I {node's -} not under

520
00:16:07,730 --> 00:16:09,500
0,330 330,420 420,1020 1020,1380 1560,1770
file, the scriptures right that's

521
00:16:09,500 --> 00:16:12,980
0,420 450,810 810,3120 3120,3330 3330,3480
correct link z item, so

522
00:16:12,980 --> 00:16:14,870
0,120 120,420 720,1110 1110,1740 1740,1890
let me since let's go

523
00:16:14,870 --> 00:16:16,180
0,360 360,690
there so.

524
00:16:16,330 --> 00:16:18,220
0,420 420,690 690,1260
File system structures.

525
00:16:20,250 --> 00:16:21,270
0,210 210,450 450,780 780,960 960,1020
So what structure does the

526
00:16:21,270 --> 00:16:23,540
0,270 270,570 570,1230 1230,1680
file system, maintain too.

527
00:16:23,540 --> 00:16:26,390
0,870 900,1590 1830,2130 2130,2340 2340,2850
Implement a no this API

528
00:16:26,390 --> 00:16:27,860
0,150 150,360 360,720 930,1260 1260,1470
just talked about so first

529
00:16:27,860 --> 00:16:28,880
0,60 60,300 300,510 510,720 720,1020
of all the most important

530
00:16:28,880 --> 00:16:30,350
0,660 660,810 810,930 930,1050 1050,1470
property is the I note.

531
00:16:31,880 --> 00:16:32,960
0,240 240,360 360,570 570,690 690,1080
And so this is the

532
00:16:32,960 --> 00:16:34,700
0,450 450,570 570,1020 1020,1080 1080,1740
object that represents a file

533
00:16:34,790 --> 00:16:36,380
0,330 330,1050 1050,1140 1140,1230 1230,1590
a independent of the name,

534
00:16:36,530 --> 00:16:38,660
0,420 510,870 870,1620
so file info.

535
00:16:40,620 --> 00:16:42,400
0,510 510,600 600,1200
Independent of name.

536
00:16:45,390 --> 00:16:47,010
0,180 180,480 480,570 570,930 990,1620
In fact, you know we

537
00:16:47,100 --> 00:16:48,480
0,390 390,660 660,990 990,1200 1200,1380
you name actually I know

538
00:16:48,480 --> 00:16:49,710
0,150 150,420 420,540 540,720 720,1230
this man I know number

539
00:16:49,890 --> 00:16:52,500
0,450 450,1050 1380,1530 1530,2040
just literally an integer.

540
00:16:52,620 --> 00:16:54,600
0,210 210,300 300,690 690,1410 1410,1980
So the fossils maternally refers

541
00:16:54,600 --> 00:16:57,270
0,450 540,990 990,990 990,1740 1980,2670
to A I note by

542
00:16:57,270 --> 00:16:58,590
0,300 300,600 600,690 690,1170 1170,1320
number instead of flexibility by

543
00:16:58,590 --> 00:16:59,820
0,720
pathways.

544
00:17:00,500 --> 00:17:01,700
0,330 330,450 450,630 630,870 870,1200
And we also know this

545
00:17:01,700 --> 00:17:03,440
0,270 270,360 360,540 540,1200 1320,1740
based on this discussion that

546
00:17:03,440 --> 00:17:04,430
0,120 120,240 240,450 450,870 870,990
you know I know I

547
00:17:04,430 --> 00:17:06,410
0,330 330,630 630,1020 1020,1440 1440,1980
must actually have link count.

548
00:17:08,600 --> 00:17:09,650
0,150 150,390 390,810 810,900 900,1050
To keep track of the

549
00:17:09,650 --> 00:17:12,360
0,420 420,900 1320,2070
murmur of a.

550
00:17:12,880 --> 00:17:13,510
0,120 120,240 240,450 450,510 510,630
To keep track of the

551
00:17:13,510 --> 00:17:15,280
0,300 300,540 540,1350 1350,1650 1650,1770
number of names that are

552
00:17:15,280 --> 00:17:16,690
0,360 360,660 660,840 840,1320 1320,1410
pointing to that particular I

553
00:17:16,690 --> 00:17:18,160
0,390 450,870 870,960 960,1230 1230,1470
note and the file should

554
00:17:18,160 --> 00:17:19,690
0,180 180,300 300,870 1080,1440 1440,1530
only be deleted when the

555
00:17:19,690 --> 00:17:20,980
0,210 210,450 450,690 690,960 960,1290
link count actually reaches zero

556
00:17:20,980 --> 00:17:22,220
0,240 240,720
no earlier.

557
00:17:22,590 --> 00:17:25,200
0,510 930,1230 1230,1500 1500,1800 1800,2610
A second slightly more complicated,

558
00:17:25,530 --> 00:17:26,970
0,360 360,510 510,720 720,840 840,1440
um there must be also

559
00:17:26,970 --> 00:17:28,360
0,180 180,750
an open.

560
00:17:29,170 --> 00:17:30,910
0,210 210,390 390,840 1020,1470 1470,1740
F D count number, file

561
00:17:30,910 --> 00:17:32,230
0,510 510,660 660,960 960,1230 1230,1320
descriptors that actually have to

562
00:17:32,230 --> 00:17:34,330
0,330 330,840 1200,1710 1710,1980 1980,2100
file open and file can

563
00:17:34,330 --> 00:17:35,830
0,270 270,390 390,930 960,1200 1200,1500
only be deleted when both

564
00:17:35,830 --> 00:17:37,220
0,90 90,360 360,420 420,900
of these are zero.

565
00:17:43,070 --> 00:17:44,300
0,480 480,600 600,810 810,1050 1050,1230
And we also know that

566
00:17:44,300 --> 00:17:45,590
0,420 420,780 780,1080 1080,1170 1170,1290
basically based on you know

567
00:17:45,590 --> 00:17:47,780
0,270 300,600 600,780 780,1230 1290,2190
the rights have no offset,

568
00:17:47,780 --> 00:17:48,980
0,420 420,600 600,960 960,1080 1080,1200
nor does reach you know

569
00:17:48,980 --> 00:17:50,600
0,150 150,240 240,450 450,870 870,1620
that the file descriptor implicitly

570
00:17:50,840 --> 00:17:52,760
0,660 660,1320
must maintain.

571
00:17:53,880 --> 00:17:55,140
0,150 150,660
And offset.

572
00:18:01,950 --> 00:18:03,180
0,720
Okay.

573
00:18:03,650 --> 00:18:04,790
0,270 270,480 480,630 630,1050 1050,1140
Um, and so basically the

574
00:18:04,790 --> 00:18:06,440
0,450 450,720 720,990 990,1470 1470,1650
central wheeling data structure in

575
00:18:06,440 --> 00:18:07,940
0,60 60,330 330,840 960,1260 1260,1500
a file system, a is

576
00:18:07,940 --> 00:18:09,710
0,510 510,660 660,1140 1140,1290 1290,1770
A I note and then

577
00:18:09,710 --> 00:18:12,530
0,600 1410,1710 1710,2190 2190,2340 2340,2820
a file descriptor to actually

578
00:18:12,530 --> 00:18:13,320
0,270
um.

579
00:18:13,350 --> 00:18:15,750
0,300 300,1170 1170,1500 1500,1710 1710,2400
Um interact with the processes.

580
00:18:19,820 --> 00:18:21,200
0,360 360,870
Um, so.

581
00:18:21,350 --> 00:18:23,210
0,570 930,1140 1140,1440 1440,1620 1620,1860
A even though the file

582
00:18:23,210 --> 00:18:25,190
0,330 330,540 540,810 810,1410 1440,1980
systems are very similar terms

583
00:18:25,190 --> 00:18:26,330
0,180 180,240 240,420 420,1020 1020,1140
short of their API, you

584
00:18:26,330 --> 00:18:28,700
0,120 120,330 330,630 630,1260 1680,2370
know they're all implemented differently,

585
00:18:29,090 --> 00:18:32,240
0,1830 2310,2700 2700,2790 2790,2970 2970,3150
but many of them have

586
00:18:32,240 --> 00:18:35,630
0,330 330,840 840,1440 1680,2370 2730,3390
a similar structure, then, um.

587
00:18:40,050 --> 00:18:41,100
0,360 360,540 540,600 600,750 750,1050
And because the file systems

588
00:18:41,100 --> 00:18:42,420
0,60 60,360 360,990 990,1110 1110,1320
are quite complex, you know

589
00:18:42,420 --> 00:18:43,470
0,210 210,660 660,840 840,990 990,1050
just helps to sort of

590
00:18:43,470 --> 00:18:45,450
0,570 570,930 930,1500 1530,1740 1740,1980
organize them in a typically

591
00:18:45,450 --> 00:18:46,650
0,510 510,600 600,900 900,1110 1110,1200
organized in a set of

592
00:18:46,650 --> 00:18:47,720
0,600
layers.

593
00:18:47,750 --> 00:18:49,070
0,540 720,960 960,1170 1170,1230 1230,1320
And you want me to

594
00:18:49,070 --> 00:18:49,880
0,150 150,390 390,450 450,600 600,810
think about it, this is

595
00:18:49,880 --> 00:18:51,350
0,330 330,420 420,660 660,1170 1200,1470
at the very bottom there's

596
00:18:51,350 --> 00:18:52,500
0,90 90,630
the disc.

597
00:18:53,120 --> 00:18:54,470
0,240 240,630 630,1050 1050,1140 1140,1350
Some storage device that actually

598
00:18:54,470 --> 00:18:56,150
0,630 630,750 750,840 840,1110 1140,1680
holds you know the data.

599
00:18:56,870 --> 00:18:58,520
0,300 300,690 690,1050 1050,1140 1140,1650
And actually provides the persistence

600
00:18:58,520 --> 00:19:00,770
0,90 90,930 1230,1440 1440,2160 2160,2250
and durability and typically you

601
00:19:00,770 --> 00:19:01,790
0,90 90,270 270,570 570,870 870,1020
know there's something like a

602
00:19:01,790 --> 00:19:03,410
0,270 270,690 690,810 810,1140 1140,1620
buffer cache, a block cache

603
00:19:03,440 --> 00:19:04,940
0,330 330,390 390,870
right, the buffet.

604
00:19:05,600 --> 00:19:07,430
0,360 360,540 540,870 870,1110 1110,1830
Um, so now to avoid

605
00:19:07,430 --> 00:19:10,040
0,360 360,510 510,1020 1470,1830 1830,2610
going to disc many times

606
00:19:10,040 --> 00:19:11,300
0,90 90,210 210,360 360,840 840,1260
so we're gonna cash basically

607
00:19:11,300 --> 00:19:13,340
0,330 330,1020 1350,1530 1530,1920 1920,2040
data insight in memory, so

608
00:19:13,340 --> 00:19:14,030
0,180 180,300 300,420 420,480 480,690
this is going to be

609
00:19:14,030 --> 00:19:15,100
0,570
basically.

610
00:19:15,490 --> 00:19:16,920
0,150 150,300 300,870
You have memory.

611
00:19:20,560 --> 00:19:23,590
0,840 840,990 990,1320 2040,2250 2250,3030
And this is the device.

612
00:19:27,980 --> 00:19:29,960
0,360 360,930 930,1110 1110,1590 1620,1980
For persistence, there's something typically

613
00:19:29,960 --> 00:19:31,340
0,270 270,690 690,1170 1200,1290 1290,1380
offer logging layer, you know

614
00:19:31,340 --> 00:19:32,810
0,420 420,690 690,1080 1080,1200 1200,1470
many many files that have

615
00:19:32,810 --> 00:19:34,480
0,60 60,360 360,480 480,1050
a form of logging.

616
00:19:34,540 --> 00:19:35,890
0,570 570,690 690,780 780,990 990,1350
We're going to talk emotionally

617
00:19:35,890 --> 00:19:36,700
0,180 180,240 240,570 570,720 720,810
about it wednesday, so I

618
00:19:36,700 --> 00:19:38,220
0,120 120,480 480,930
can skip that.

619
00:19:38,220 --> 00:19:39,840
0,600 660,1230 1230,1320 1320,1530 1530,1620
Um, then the top of

620
00:19:39,840 --> 00:19:42,300
0,360 360,870 870,1110 1140,1560 1560,2460
the logging or leasing x86

621
00:19:42,780 --> 00:19:44,130
0,300 300,420 420,630 630,1080 1080,1350
there's an I cache where

622
00:19:44,130 --> 00:19:45,690
0,120 120,390 390,930 1140,1470 1470,1560
I note cash, this is

623
00:19:45,690 --> 00:19:48,570
0,570 570,1020 1020,1890 2280,2460 2460,2880
mostly for synchronization, let's also

624
00:19:48,570 --> 00:19:49,380
0,240 240,450 450,510 510,690 690,810
talk about a little bit

625
00:19:49,380 --> 00:19:50,340
0,420
later.

626
00:19:54,430 --> 00:19:55,480
0,270 270,360 360,450 450,600 600,1050
So now I know typically

627
00:19:55,480 --> 00:19:57,910
0,750 1050,1620 1620,1800 1800,2280 2280,2430
smaller than this block and

628
00:19:57,910 --> 00:19:59,080
0,300 300,540 540,690 690,780 780,1170
many an oats are packed

629
00:19:59,080 --> 00:20:00,400
0,240 240,360 360,630 630,870 870,1320
into a single disk block

630
00:20:00,970 --> 00:20:04,030
0,990 990,1920 1920,2130 2130,2400 2400,3060
provides synchronization to those individual

631
00:20:04,030 --> 00:20:05,860
0,120 120,600 840,1410 1410,1530 1530,1830
I note a you actually

632
00:20:05,860 --> 00:20:07,760
0,210 210,750 750,870 870,1440
six maintains a cache.

633
00:20:08,020 --> 00:20:10,360
0,570 1080,1380 1380,1620 1620,1950 1950,2340
Um, and then typically not

634
00:20:10,360 --> 00:20:11,830
0,90 90,210 210,570 1170,1350 1350,1470
you know were I know

635
00:20:11,830 --> 00:20:13,570
0,120 120,660 660,1320 1320,1410 1410,1740
the implementation itself, you know

636
00:20:13,570 --> 00:20:15,070
0,360 360,540 540,660 660,1230 1230,1500
that sort of ranges for

637
00:20:15,070 --> 00:20:16,420
0,300 300,870
reason writes.

638
00:20:16,860 --> 00:20:18,200
0,810
Bites.

639
00:20:20,610 --> 00:20:21,570
0,120 120,570 570,690 690,900 900,960
And then you know on

640
00:20:21,570 --> 00:20:23,000
0,300 300,360 360,810
top of that.

641
00:20:23,310 --> 00:20:25,400
0,240 240,690 690,1380
We have names.

642
00:20:26,440 --> 00:20:27,430
0,210 210,510 510,720 720,810 810,990
Like path names and file

643
00:20:27,430 --> 00:20:29,200
0,420 420,1080
descriptor operations.

644
00:20:29,640 --> 00:20:31,560
0,480 690,1170 1170,1410 1410,1680 1680,1920
Um, anyway, every fall season

645
00:20:31,560 --> 00:20:33,450
0,90 90,450 450,780 780,1500 1530,1890
be slightly differently organized and

646
00:20:33,450 --> 00:20:34,890
0,360 360,510 510,570 570,960 960,1440
layers may be slightly different,

647
00:20:35,220 --> 00:20:37,560
0,750 990,1710 1710,2040 2040,2130 2130,2340
um, maybe layering is not

648
00:20:37,560 --> 00:20:39,300
0,270 270,420 420,990 1140,1470 1470,1740
always that strict even actually

649
00:20:39,300 --> 00:20:40,410
0,240 240,360 360,660 660,900 900,1110
six it's not always super

650
00:20:40,410 --> 00:20:42,780
0,420 720,1350 1440,1650 1650,1770 1770,2370
strict but it is conceptually

651
00:20:42,780 --> 00:20:43,980
0,270 300,630 630,780 780,960 960,1200
good way to think about

652
00:20:43,980 --> 00:20:44,940
0,120 120,240 240,510 510,690 690,960
it and almost all file

653
00:20:44,940 --> 00:20:46,560
0,390 390,780 780,1410 1410,1470 1470,1620
systems have components in their

654
00:20:46,560 --> 00:20:48,000
0,210 210,660 660,1230 1230,1320 1320,1440
file systems correspond to the

655
00:20:48,000 --> 00:20:49,020
0,270 270,720 720,810 810,900 900,1020
different pieces you know the

656
00:20:49,020 --> 00:20:50,880
0,240 240,630 630,840 840,1440
buffer cache, the logging.

657
00:20:50,880 --> 00:20:51,840
0,120 120,300 300,420 420,540 540,960
A to the I nodes

658
00:20:52,020 --> 00:20:54,420
0,450 450,750 750,1170 1200,1920
and to a passage.

659
00:20:54,600 --> 00:20:56,040
0,240 240,480 570,840 840,1200 1200,1440
And so we basically work

660
00:20:56,040 --> 00:20:57,060
0,120 120,420 420,480 480,660 660,1020
by through a little bit,

661
00:20:57,090 --> 00:20:59,940
0,750 780,1380 1410,1830 1830,2370 2400,2850
um, through these different file

662
00:20:59,940 --> 00:21:01,200
0,270 270,780
system layers.

663
00:21:01,980 --> 00:21:02,910
0,360 360,420 420,570 570,630 630,930
Let me talk a little

664
00:21:02,910 --> 00:21:04,530
0,390 390,600 600,1200 1200,1410 1410,1620
bit of starting with the

665
00:21:04,530 --> 00:21:05,860
0,360 360,780
bottom layer.

666
00:21:10,000 --> 00:21:11,620
0,360 360,630 630,780 780,1050
Just looking at it.

667
00:21:12,890 --> 00:21:14,390
0,270 270,630 780,1140 1140,1290 1290,1500
Um, check, um, so let

668
00:21:14,390 --> 00:21:15,770
0,90 90,360 360,570 570,1080 1110,1380
me start with a talk

669
00:21:15,770 --> 00:21:17,000
0,60 60,240 240,360 360,690 750,1230
a little bit about storage

670
00:21:17,000 --> 00:21:19,020
0,450 450,720 720,1440
itself, storage devices.

671
00:21:22,030 --> 00:21:22,810
0,120 120,330 330,540 540,690 690,780
It turns out there are

672
00:21:22,810 --> 00:21:24,610
0,570 570,810 810,1260 1290,1590 1590,1800
many many, many different types

673
00:21:24,610 --> 00:21:26,980
0,60 60,330 330,1050 1230,1890 1890,2370
of storage devices, um in

674
00:21:27,010 --> 00:21:29,050
0,150 150,570 570,1050 1050,1230 1230,2040
the difference between a performance

675
00:21:29,050 --> 00:21:31,900
0,90 90,180 180,1140 1350,2040 2430,2850
you know capacity, a degree

676
00:21:31,900 --> 00:21:34,270
0,90 90,960 1230,1800 1980,2280 2280,2370
of durability, um, but you

677
00:21:34,270 --> 00:21:35,170
0,120 120,300 300,390 390,480 480,900
know two of the common

678
00:21:35,170 --> 00:21:36,730
0,600 600,690 690,870 870,1410 1440,1560
ones you know, are you

679
00:21:36,730 --> 00:21:37,780
0,120 120,270 270,540 540,660 660,1050
know you're probably all familiar

680
00:21:37,780 --> 00:21:39,370
0,420 420,510 510,900 1140,1440 1440,1590
with you know this is

681
00:21:39,370 --> 00:21:40,400
0,510
d.

682
00:21:41,000 --> 00:21:44,150
0,720 750,960 960,1590 1740,2040 2310,3150
And there maybe you know

683
00:21:44,300 --> 00:21:45,410
0,240 240,450 450,570 570,930 930,1110
some people may simply mean

684
00:21:45,410 --> 00:21:47,270
0,330 330,660 660,1230 1260,1440 1440,1860
choosing hard disks or magnetic

685
00:21:47,270 --> 00:21:48,260
0,510
disks.

686
00:21:48,540 --> 00:21:50,400
0,690 990,1410 1410,1590 1590,1740 1740,1860
Um, and you know they

687
00:21:50,400 --> 00:21:52,140
0,570 660,930 930,1140 1140,1230 1230,1740
provide a ton of Stuart

688
00:21:52,350 --> 00:21:54,990
0,570 570,840 840,1140 1140,1710 2070,2640
a in reasonable cost, a

689
00:21:54,990 --> 00:21:57,510
0,570 570,1080 1080,1500 1530,2160 2160,2520
indifferent performance, so SD show

690
00:21:57,630 --> 00:21:58,770
0,510 510,570 570,660 660,990 990,1140
typically in the order of

691
00:21:58,770 --> 00:22:00,820
0,450 450,540 540,840 840,1500
hundreds of micro seconds.

692
00:22:00,850 --> 00:22:02,290
0,120 120,180 180,420 420,1020 1050,1440
In the middle second access

693
00:22:02,290 --> 00:22:03,520
0,690
time.

694
00:22:04,110 --> 00:22:05,940
0,540 540,990 990,1440 1440,1590 1590,1830
Well magnetic disks, you tend

695
00:22:05,940 --> 00:22:06,720
0,90 90,330 330,600 600,690 690,780
to be more in the

696
00:22:06,720 --> 00:22:08,740
0,330 330,420 420,660 660,1470
order of ten milliseconds.

697
00:22:08,800 --> 00:22:10,540
0,210 210,1020 1020,1200 1200,1290 1290,1740
To individually read or write

698
00:22:10,570 --> 00:22:12,280
0,630 630,1170
a block.

699
00:22:12,940 --> 00:22:15,100
0,450 630,930 930,1650 1650,1770 1770,2160
Um the terminology is actually

700
00:22:15,100 --> 00:22:16,990
0,720 720,1230 1230,1620 1620,1710 1710,1890
slightly confusion, here you know,

701
00:22:16,990 --> 00:22:19,380
0,570 570,660 660,1200 1200,1830
where's the terms sector.

702
00:22:19,500 --> 00:22:22,360
0,390 420,750 750,1410 1440,2370
That are used blocks.

703
00:22:24,430 --> 00:22:26,380
0,690 750,1050 1050,1320 1320,1410 1410,1950
Um, and so in sectors

704
00:22:26,380 --> 00:22:29,200
0,540 540,870 930,1740 1740,2130 2160,2820
typically the historically the smallest

705
00:22:29,200 --> 00:22:32,680
0,480 510,1170 1620,2160 2160,2790 2790,3480
unit, um that Addis drags

706
00:22:32,710 --> 00:22:34,570
0,1080 1140,1350 1350,1530 1530,1620 1620,1860
can can read or write

707
00:22:34,570 --> 00:22:36,190
0,240 300,750 750,900 900,1230 1230,1620
in a and so you

708
00:22:36,190 --> 00:22:37,450
0,150 150,390 390,810 810,1080 1080,1260
should be typically five hundred

709
00:22:37,450 --> 00:22:38,530
0,270 270,570 570,750 750,780 780,1080
twelve five just a common

710
00:22:38,530 --> 00:22:39,540
0,420
number.

711
00:22:39,690 --> 00:22:41,040
0,270 270,420 420,780 780,1200 1200,1350
Um the block size is

712
00:22:41,040 --> 00:22:42,360
0,690 720,900 900,960 960,1230 1230,1320
basically where a block is

713
00:22:42,360 --> 00:22:43,560
0,450 450,510 510,960 960,1110 1110,1200
basically a nose or a

714
00:22:43,560 --> 00:22:45,660
0,270 270,750 870,990 990,1650 1650,2100
file system, a idea or

715
00:22:45,690 --> 00:22:47,130
0,480 480,570 570,660 660,930 930,1440
defined by a file system

716
00:22:47,340 --> 00:22:48,630
0,330 330,600 600,840 840,930 930,1290
and X six for example

717
00:22:48,630 --> 00:22:50,670
0,90 90,180 180,1050 1050,1560 1860,2040
it is 1024 bytes, and

718
00:22:50,670 --> 00:22:51,720
0,120 120,270 270,420 420,900 900,1050
so it's two sectors so

719
00:22:51,720 --> 00:22:53,010
0,360 360,450 450,720 720,1110 1110,1290
typically the block sizes one

720
00:22:53,010 --> 00:22:55,120
0,60 60,600 1020,1680
or more sectors.

721
00:22:55,120 --> 00:22:57,490
0,570 960,1650 1650,1950 1950,2250 2250,2370
Um, sometimes people refer to

722
00:22:57,490 --> 00:22:58,570
0,120 120,450 450,570 570,840 840,1080
the sectors on disk also

723
00:22:58,570 --> 00:22:59,800
0,90 90,660 660,870 870,1110 1110,1230
as walks and so you

724
00:22:59,800 --> 00:23:00,910
0,120 120,270 300,870 870,960 960,1110
know the terminology is not

725
00:23:00,910 --> 00:23:03,800
0,630 630,1410 1680,2430
particularly a precise.

726
00:23:04,590 --> 00:23:06,330
0,180 180,360 360,1110 1140,1260 1260,1740
So these devices you basically

727
00:23:06,330 --> 00:23:07,740
0,450 600,780 780,960 960,1170 1170,1410
sit you know on some

728
00:23:07,740 --> 00:23:08,840
0,570
bus.

729
00:23:09,060 --> 00:23:10,260
0,630 630,720 720,870 870,960 960,1200
And you know the boss

730
00:23:10,260 --> 00:23:11,820
0,180 180,750 750,900 900,990 990,1560
is connected to the CPU

731
00:23:11,820 --> 00:23:12,920
0,540
work.

732
00:23:12,950 --> 00:23:14,090
0,270 270,600 630,780 780,960 960,1140
Um, I mean there might

733
00:23:14,090 --> 00:23:15,260
0,120 120,570 570,720 720,810 810,1170
be memory on the side

734
00:23:15,260 --> 00:23:16,340
0,510
here.

735
00:23:17,850 --> 00:23:20,370
0,510 510,870 870,1380 1380,1620 1800,2520
Maybe multiple {CPU's -} a

736
00:23:20,370 --> 00:23:21,900
0,360 360,690 690,870 870,1170 1170,1530
instead fossils that runs on

737
00:23:22,290 --> 00:23:24,270
0,240 240,870 870,1320 1350,1740 1740,1980
the CPU, a stores its

738
00:23:24,270 --> 00:23:26,010
0,420 420,660 660,1080 1080,1170 1170,1740
internal data structures in memory

739
00:23:26,070 --> 00:23:28,500
0,630 630,1020 1020,1320 1320,1920
and basically region writes.

740
00:23:28,500 --> 00:23:33,030
0,660 1020,1500 1650,2070 2070,4020 4290,4530
Um, yeah to um to

741
00:23:33,030 --> 00:23:34,320
0,150 150,570 570,780 780,870 870,1290
the SD order, the hardest

742
00:23:34,320 --> 00:23:35,370
0,120 120,390 390,600 600,660 660,1050
to actually write a blog

743
00:23:35,370 --> 00:23:36,390
0,90 90,240 240,270 270,750 810,1020
or read or block and

744
00:23:36,390 --> 00:23:38,260
0,120 120,390 390,720 720,1380
so to actually interface.

745
00:23:38,260 --> 00:23:40,440
0,450 450,630 630,1080 1080,1620
Um is quite simple.

746
00:23:40,740 --> 00:23:42,390
0,210 210,480 480,900 900,1140 1140,1650
So it's typically just read

747
00:23:42,510 --> 00:23:44,550
0,900 900,1140 1140,1560 1560,1740 1740,2040
or or write with block

748
00:23:44,550 --> 00:23:45,440
0,360
number.

749
00:23:46,020 --> 00:23:47,130
0,360 360,420 420,600 600,750 750,1110
There's a little bit of

750
00:23:47,160 --> 00:23:48,840
0,1020 1020,1170 1170,1380 1380,1440 1440,1680
oversimplification, but like the core

751
00:23:48,840 --> 00:23:50,130
0,60 60,150 150,570 570,780 780,1290
of the interface is roughly

752
00:23:50,790 --> 00:23:53,580
0,660 1110,1920 1920,1980 1980,2220 2220,2790
a internally, of course {USD's

753
00:23:53,580 --> 00:23:55,350
0,150 150,600 600,1080 1080,1500 1500,1770
-} ad hard to work

754
00:23:55,350 --> 00:23:58,110
0,540 540,1110 1110,1410 1410,2160 2250,2760
completely differently and a hardware

755
00:23:58,110 --> 00:24:00,810
0,690 690,1140 1140,1650 1680,2130 2400,2700
extracts mostly away and a

756
00:24:00,810 --> 00:24:02,310
0,480 480,630 630,930 930,1080 1080,1500
typically they're sort of standard

757
00:24:02,310 --> 00:24:05,280
0,660 660,870 870,1800 2190,2490 2490,2970
protocols like pci or pci

758
00:24:05,280 --> 00:24:07,650
0,690 900,1380 1380,1950 1980,2370 2370,2370
{extended -} a that's a

759
00:24:08,790 --> 00:24:10,020
0,540 540,630 630,720 720,930 930,1230
procedure or the file system

760
00:24:10,020 --> 00:24:11,970
0,450 450,840 840,1050 1050,1590 1590,1950
user did this drivers used

761
00:24:11,970 --> 00:24:13,650
0,90 90,360 360,810 810,1170 1170,1680
to actually talk to a.

762
00:24:14,000 --> 00:24:15,680
0,630 630,990 1020,1470 1470,1620 1620,1680
Disks and often from the

763
00:24:15,680 --> 00:24:17,990
0,240 240,540 540,870 1080,1920 2160,2310
disk drive or a you

764
00:24:17,990 --> 00:24:19,880
0,240 270,1140 1140,1560 1560,1680 1680,1890
know most discs you sort

765
00:24:19,880 --> 00:24:21,590
0,60 60,240 240,330 330,720 870,1710
of look the same and

766
00:24:21,680 --> 00:24:22,340
0,180 180,270 270,420 420,570 570,660
you can just read and

767
00:24:22,340 --> 00:24:24,020
0,480 540,960 960,1350 1350,1410 1410,1680
write by providing a block

768
00:24:24,020 --> 00:24:25,910
0,330 330,420 420,540 540,1020 1380,1890
number and some data and

769
00:24:25,910 --> 00:24:28,220
0,570 600,1200 1650,1920 1920,2040 2040,2310
then you send it off

770
00:24:28,220 --> 00:24:29,330
0,180 180,240 240,510 510,690 690,1110
for a writer to control

771
00:24:29,330 --> 00:24:30,830
0,570 570,660 660,780 780,990 990,1500
registers you know the device

772
00:24:30,830 --> 00:24:31,880
0,210 210,270 270,750 750,900 900,1050
and the device will do

773
00:24:31,880 --> 00:24:32,700
0,120 120,480
its job.

774
00:24:33,760 --> 00:24:35,590
0,360 360,570 570,1050 1080,1440 1440,1830
And so this from um.

775
00:24:36,180 --> 00:24:39,330
0,360 360,630 630,1440 1650,2430 2430,3150
File system perspective, um, although

776
00:24:39,330 --> 00:24:40,650
0,90 90,240 240,630 720,990 990,1320
you know the the disc

777
00:24:40,650 --> 00:24:41,880
0,180 180,510 510,870 870,1110 1110,1230
have quite distorted device have

778
00:24:41,880 --> 00:24:44,760
0,390 390,660 660,1380 1560,2220 2220,2880
quite different properties, um, they're

779
00:24:44,760 --> 00:24:46,770
0,480 480,840 1200,1740 1740,1920 1920,2010
actually, um, um, from the

780
00:24:46,770 --> 00:24:48,120
0,300 300,870 900,960 960,1230 1230,1350
driver's perspective you know so

781
00:24:48,120 --> 00:24:49,500
0,120 120,210 210,630 630,960 960,1380
you can program in roughly

782
00:24:49,500 --> 00:24:50,540
0,90 90,300 300,510
the same way.

783
00:24:53,840 --> 00:24:55,130
0,210 210,540 540,720 720,1050 1080,1290
Any questions about that I'm

784
00:24:55,130 --> 00:24:56,030
0,120 120,270 270,480 480,690 690,900
not gonna talk much about

785
00:24:56,030 --> 00:24:57,980
0,120 120,420 420,900 900,1380 1740,1950
the storage devices, so if

786
00:24:57,980 --> 00:24:58,910
0,90 90,240 240,420 420,810 810,930
you have any questions, this

787
00:24:58,910 --> 00:25:00,230
0,90 90,240 240,810 810,1020 1020,1320
is a good time to

788
00:25:00,230 --> 00:25:01,160
0,240 240,390
ask them.

789
00:25:11,240 --> 00:25:12,830
0,360 360,720 720,870 870,960 960,1590
Yes I have a question

790
00:25:12,860 --> 00:25:16,600
0,660 1110,1320 1320,2160 2160,3120
is the interface for.

791
00:25:16,600 --> 00:25:18,820
0,240 240,1050 1080,1500 1500,1650 1650,2220
A calling read or write

792
00:25:18,850 --> 00:25:20,800
0,510 510,720 720,1080 1080,1710 1710,1950
something that offers synchronous and

793
00:25:20,800 --> 00:25:24,100
0,630 630,1290 1650,2880 2880,3210 3210,3300
asynchronous options, yeah often is

794
00:25:24,100 --> 00:25:24,790
0,90 90,270 270,330 330,540 540,690
the case, in fact it's

795
00:25:24,790 --> 00:25:26,590
0,450 450,690 690,1050 1050,1410 1410,1800
generally like it's almost very

796
00:25:26,590 --> 00:25:28,360
0,360 360,600 600,1140 1140,1470 1470,1770
similar to actually, um, basically

797
00:25:28,360 --> 00:25:28,900
0,60 60,150 150,300 300,480 480,540
you can think about the

798
00:25:28,900 --> 00:25:30,760
0,540 540,810 810,930 930,1380 1650,1860
driver for a disc in

799
00:25:30,760 --> 00:25:31,840
0,60 60,360 360,630 630,960 960,1080
the same way as the

800
00:25:31,840 --> 00:25:34,870
0,330 330,900 1200,1530 1530,2250 2280,3030
console driver a wer a

801
00:25:35,170 --> 00:25:36,640
0,510 510,870 870,930 930,1020 1020,1470
the CPU or the driver

802
00:25:36,640 --> 00:25:37,870
0,390 390,450 450,870 870,1140 1140,1230
issues a command to the

803
00:25:37,870 --> 00:25:39,760
0,720 900,1380 1380,1560 1560,1830 1830,1890
device basically say start to

804
00:25:39,760 --> 00:25:41,470
0,420 450,660 660,840 840,1290 1560,1710
read or do right and

805
00:25:41,470 --> 00:25:42,280
0,90 90,180 180,330 330,570 570,810
then at some point later

806
00:25:42,280 --> 00:25:43,210
0,180 180,270 270,600 600,690 690,930
when the device is done

807
00:25:43,210 --> 00:25:44,320
0,120 120,210 210,600 600,690 690,1110
and will generate an interrupt

808
00:25:44,320 --> 00:25:45,190
0,180 180,390 390,570 570,690 690,870
saying like OK I did

809
00:25:45,190 --> 00:25:46,150
0,90 90,510 540,750 750,810 810,960
to reach where I did

810
00:25:46,150 --> 00:25:47,440
0,90 90,510 630,840 840,1200 1200,1290
the right and then you

811
00:25:47,440 --> 00:25:49,030
0,120 120,390 540,1020 1020,1080 1080,1590
know that indicates the completion.

812
00:25:50,060 --> 00:25:51,290
0,510 510,990 990,1110 1110,1170 1170,1230
Um, and you know of

813
00:25:51,290 --> 00:25:53,090
0,180 180,240 240,870 960,1320 1320,1800
course, the driver since this

814
00:25:53,090 --> 00:25:54,890
0,390 390,510 510,660 660,1200 1200,1800
device is more complicated than

815
00:25:54,890 --> 00:25:55,910
0,90 90,690 690,780 780,870 870,1020
the console, you know it's

816
00:25:55,910 --> 00:25:57,230
0,240 240,270 270,420 420,600 600,1320
quite a bit more complicated

817
00:25:57,230 --> 00:25:58,550
0,330 330,540 540,600 600,1020 1020,1320
driver than the console driver

818
00:25:58,550 --> 00:25:59,540
0,120 120,210 210,480 480,630 630,990
that we saw in the

819
00:25:59,930 --> 00:26:01,520
0,510 510,900 960,1170 1170,1530 1530,1590
previous lecture was basically the

820
00:26:01,520 --> 00:26:04,070
0,240 240,750 1140,1620 1620,2190 2280,2550
same structure, bottom half top

821
00:26:04,070 --> 00:26:05,960
0,540 750,1530
half interrupts.

822
00:26:05,990 --> 00:26:07,310
0,450 450,780 780,1020 1020,1080 1080,1320
Um and reading or writing

823
00:26:07,310 --> 00:26:08,860
0,120 120,450 450,960
to control registration.

824
00:26:10,850 --> 00:26:12,580
0,420 420,960
Okay, thanks.

825
00:26:16,490 --> 00:26:18,080
0,240 240,690 1020,1320 1320,1470 1470,1590
Okay, so um, so from

826
00:26:18,080 --> 00:26:20,120
0,90 90,360 360,600 600,1380 1410,2040
the file system perspective, a

827
00:26:20,150 --> 00:26:21,560
0,450 450,600 600,750 750,1200 1230,1410
way to think about the

828
00:26:21,560 --> 00:26:25,400
0,390 390,930 1410,2370 2370,3270
disc is pretty straightforward.

829
00:26:25,400 --> 00:26:27,020
0,390 390,690 690,900 900,1320 1320,1620
Um, since there's a right

830
00:26:27,020 --> 00:26:29,270
0,180 180,750 930,1110 1110,1710 1890,2250
of block or sectors, but

831
00:26:29,270 --> 00:26:30,320
0,120 120,240 240,450 450,690 690,1050
can you think about this

832
00:26:30,320 --> 00:26:32,360
0,150 150,300 300,690 690,1500
because this really gigantic.

833
00:26:32,480 --> 00:26:34,120
0,210 210,360 360,1140
You know already.

834
00:26:34,760 --> 00:26:36,340
0,360 360,1080
A watch.

835
00:26:36,340 --> 00:26:37,390
0,210 210,600 600,900 900,990 990,1050
You're starting at you know

836
00:26:37,390 --> 00:26:39,100
0,390 390,1080
whatever zero.

837
00:26:39,280 --> 00:26:40,800
0,840
Everyone.

838
00:26:40,920 --> 00:26:42,300
0,390 390,630 630,870 870,960 960,1380
And going up to whatever

839
00:26:42,300 --> 00:26:44,060
0,510 510,600 600,1230
decisive the discs.

840
00:26:44,300 --> 00:26:46,430
0,510 510,690 690,1080 1080,1440 1770,2130
Um, and basically the file

841
00:26:46,430 --> 00:26:48,350
0,750 750,1410 1440,1650 1650,1770 1770,1920
system's job is to sort

842
00:26:48,350 --> 00:26:49,730
0,90 90,360 360,780 780,1050 1050,1380
of lay out all the

843
00:26:49,730 --> 00:26:51,620
0,270 270,990 1170,1530 1530,1620 1620,1890
data structures on the disk

844
00:26:51,620 --> 00:26:52,610
0,120 120,180 180,450 450,660 660,990
in a way that you

845
00:26:52,610 --> 00:26:55,100
0,150 150,960 1290,1710 1740,2040 2040,2490
can reconstruct the file system

846
00:26:55,100 --> 00:26:57,060
0,570 570,990 1020,1500
after a reboot.

847
00:26:57,740 --> 00:26:59,180
0,450 780,1110 1110,1200 1200,1320 1320,1440
And so you know there

848
00:26:59,180 --> 00:26:59,840
0,30 30,270 270,420 420,480 480,660
are different ways of going

849
00:26:59,840 --> 00:27:02,240
0,330 330,660 660,1800 1800,2100 2100,2400
about it a xc six

850
00:27:02,240 --> 00:27:03,470
0,300 300,630 630,900 900,930 930,1230
you'll see uses a very

851
00:27:03,470 --> 00:27:07,940
0,690 780,1470 1470,2220 2280,3990
simple layout structure, but.

852
00:27:07,940 --> 00:27:10,940
0,420 1080,1710 1710,2070 2070,2550 2550,3000
Um, but not completely user

853
00:27:10,940 --> 00:27:13,850
0,540 690,1170 1260,1890 1920,2190 2190,2910
not pretty typical in a

854
00:27:13,850 --> 00:27:16,730
0,270 870,1650 1650,2070 2070,2610 2610,2880
or prototypical for how file

855
00:27:16,730 --> 00:27:18,020
0,330 330,810
systems operate.

856
00:27:18,110 --> 00:27:19,640
0,390 390,540 540,960 960,1260 1260,1530
Um, so typically the block

857
00:27:19,640 --> 00:27:21,170
0,330 330,570 570,990 990,1170 1170,1530
zero is generally not used

858
00:27:21,170 --> 00:27:22,160
0,240 240,540 540,780 780,930 930,990
or juice actually for the

859
00:27:22,160 --> 00:27:23,880
0,210 210,780
boot sector.

860
00:27:24,090 --> 00:27:25,440
0,120 120,360 360,450 450,810 810,1350
To boot, the operating system

861
00:27:25,860 --> 00:27:27,080
0,660
a.

862
00:27:27,470 --> 00:27:29,330
0,750 750,1170 1170,1350 1350,1680 1680,1860
Block one is often what's

863
00:27:29,330 --> 00:27:31,040
0,210 210,240 240,540 540,1170
called a super blog.

864
00:27:31,350 --> 00:27:32,730
0,390 390,480 480,780 780,1020 1020,1380
And the super bond basically

865
00:27:32,730 --> 00:27:34,170
0,870 870,960 960,1050 1050,1170 1170,1440
describes you know the file

866
00:27:34,170 --> 00:27:35,260
0,450
system.

867
00:27:35,500 --> 00:27:36,460
0,210 210,330 330,480 480,750 750,960
And it may say like

868
00:27:36,460 --> 00:27:37,750
0,210 210,390 390,510 510,720 720,1290
oh there's so many blocks

869
00:27:37,780 --> 00:27:39,220
0,300 300,600 600,720 720,960 960,1440
on this and that constitute

870
00:27:39,220 --> 00:27:40,360
0,60 60,300 300,690 810,1080 1080,1140
the file system, and you

871
00:27:40,360 --> 00:27:41,320
0,120 120,270 270,360 360,420 420,960
will see in the second

872
00:27:41,320 --> 00:27:42,040
0,240 240,450 450,540 540,570 570,720
X six is a little

873
00:27:42,040 --> 00:27:43,120
0,120 120,300 300,780 780,900 900,1080
bit more information in it

874
00:27:43,120 --> 00:27:44,110
0,360 360,450 450,660 660,900 900,990
as in make most out

875
00:27:44,110 --> 00:27:45,380
0,90 90,270 270,780
of file system.

876
00:27:45,410 --> 00:27:47,210
0,150 150,510 510,600 600,1380 1500,1800
For example, in x86 the

877
00:27:47,210 --> 00:27:49,100
0,690 720,1110 1110,1440 1440,1740 1740,1890
{log's -} starts, it's going

878
00:27:49,100 --> 00:27:51,080
0,60 60,450 450,990 1290,1710 1710,1980
to block two and runs

879
00:27:51,080 --> 00:27:53,260
0,570 600,900 900,1590
into block 32.

880
00:27:55,110 --> 00:27:55,890
0,240 240,390 390,600 600,720 720,780
Yeah, so this is a

881
00:27:55,890 --> 00:27:57,120
0,600
blog.

882
00:27:57,460 --> 00:27:58,090
0,210 210,270 270,450 450,510 510,630
And of course the law

883
00:27:58,090 --> 00:27:59,110
0,150 150,240 240,540 540,930 930,1020
could be different sizes and

884
00:27:59,110 --> 00:27:59,980
0,120 120,390 390,540 540,600 600,870
in fact in the super

885
00:27:59,980 --> 00:28:00,970
0,300 300,360 360,540 540,840 840,990
block, it just says like

886
00:28:00,970 --> 00:28:02,650
0,90 90,420 420,600 600,1050 1410,1680
the log is whatever thirty

887
00:28:02,650 --> 00:28:03,840
0,300 300,690
blocks long.

888
00:28:04,200 --> 00:28:07,680
0,600 810,1740 1770,2490 2730,3270 3270,3480
Um, then, um, actually six

889
00:28:07,680 --> 00:28:09,420
0,300 300,630 660,1140 1140,1380 1380,1740
after that stores from thirty

890
00:28:09,420 --> 00:28:12,360
0,570 570,990 990,1470 1470,2490 2520,2940
to basically block 45 remember

891
00:28:12,360 --> 00:28:13,500
0,630
correctly.

892
00:28:14,050 --> 00:28:15,910
0,780 780,960 960,1200 1200,1200 1200,1860
Um, it's George I note.

893
00:28:18,160 --> 00:28:20,560
0,150 150,360 360,930 960,1560 1770,2400
I said before a multiply

894
00:28:20,560 --> 00:28:21,730
0,300 300,390 390,810 810,1080 1080,1170
notes are packed into a

895
00:28:21,730 --> 00:28:23,950
0,780 810,1590 1620,1800 1800,2160 2160,2220
single, um, this walk I

896
00:28:23,950 --> 00:28:25,520
0,270 270,360 360,1110
think I notice.

897
00:28:26,470 --> 00:28:27,730
0,150 150,630 660,810 810,960 960,1260
I believe I don't actually

898
00:28:27,730 --> 00:28:28,510
0,390 390,510 510,570 570,720 720,780
remember at the top of

899
00:28:28,510 --> 00:28:29,020
0,60 60,240 240,330 330,390 390,510
my head, but I think

900
00:28:29,020 --> 00:28:30,940
0,120 120,300 300,810 810,1290
it's either 64 bytes.

901
00:28:31,920 --> 00:28:34,620
0,450 450,750 750,1170 1230,1650 1860,2700
One twenty eight, um 64

902
00:28:34,950 --> 00:28:36,930
0,720 750,1140 1140,1680 1710,1860 1860,1980
and after that you know

903
00:28:36,930 --> 00:28:39,390
0,540 780,1380 1380,1560 1560,1950 1950,2460
there's um a bitnet block,

904
00:28:39,420 --> 00:28:40,560
0,150 150,390 390,600 600,870 870,1140
it turns out in the

905
00:28:40,830 --> 00:28:42,120
0,570 570,840 840,990 990,1170 1170,1290
details way we build the

906
00:28:42,120 --> 00:28:43,320
0,240 240,750
file system.

907
00:28:43,440 --> 00:28:44,700
0,270 270,540 540,780 780,960 960,1260
This next bit map block

908
00:28:44,700 --> 00:28:46,830
0,300 300,900 990,1290 1290,1500 1500,2130
one block, um in size.

909
00:28:48,680 --> 00:28:50,000
0,270 270,360 360,630 630,1110 1110,1320
And so these basically keep

910
00:28:50,000 --> 00:28:51,770
0,480 480,600 600,1020 1020,1290 1320,1770
track of actually the data

911
00:28:51,770 --> 00:28:52,960
0,660
blocks.

912
00:28:52,960 --> 00:28:53,890
0,150 150,420 420,600 600,810 810,930
Um, whether it's free or

913
00:28:53,890 --> 00:28:56,170
0,570 930,1110 1110,1440 1440,1830 1830,2280
not, and after that it's

914
00:28:56,170 --> 00:28:58,270
0,480 630,900 900,1290 1290,1590 1590,2100
all for basically year today

915
00:28:58,270 --> 00:28:59,500
0,150 150,270 270,540 540,990 1080,1230
it's all data blocks or

916
00:28:59,500 --> 00:29:00,730
0,270 270,600 600,720 720,930 930,1230
data blocks that actually stored

917
00:29:00,730 --> 00:29:02,680
0,510 510,1080 1080,1170 1170,1650 1650,1950
contents, files or contents of

918
00:29:02,680 --> 00:29:03,860
0,750
directories.

919
00:29:05,140 --> 00:29:07,930
0,570 870,1380 1380,1620 1620,2130 2460,2790
I'm often all the bit

920
00:29:07,930 --> 00:29:09,550
0,210 210,810 810,1170 1200,1350 1350,1620
map blocks and I knowed

921
00:29:09,550 --> 00:29:11,800
0,420 420,630 630,1080 1080,1680 1830,2250
blocks and logging block often

922
00:29:11,800 --> 00:29:13,510
0,420 420,720 720,870 870,1080 1080,1710
sometimes referred to as metadata

923
00:29:13,510 --> 00:29:14,540
0,570
blocks.

924
00:29:16,940 --> 00:29:18,230
0,210 210,570 570,810 810,1020 1020,1290
Yeah you actually store actual

925
00:29:18,230 --> 00:29:19,520
0,390 390,570 570,720 720,1200 1200,1290
data but they help you

926
00:29:19,520 --> 00:29:20,990
0,180 180,330 330,630 630,840 840,1470
know the storm, edit information

927
00:29:20,990 --> 00:29:22,040
0,330 330,390 390,660 660,930 930,1050
for the file system to

928
00:29:22,040 --> 00:29:23,320
0,120 120,330 330,780
do its job.

929
00:29:23,350 --> 00:29:25,420
0,750 750,990 990,1410 1410,1530 1530,2070
Like big maps and items.

930
00:29:26,390 --> 00:29:27,620
0,660
I'm.

931
00:29:28,580 --> 00:29:30,170
0,210 210,810 960,1200 1200,1380 1380,1590
Any questions so far about

932
00:29:30,170 --> 00:29:31,060
0,300
this.

933
00:29:33,160 --> 00:29:34,150
0,270 270,390 390,630 630,690 690,990
A I have a question

934
00:29:34,150 --> 00:29:35,680
0,240 240,330 330,750 750,1290 1290,1530
about the boot block, does

935
00:29:35,680 --> 00:29:38,380
0,210 210,990 1050,1410 1410,2160 2160,2700
it contain the code for

936
00:29:38,410 --> 00:29:39,670
0,120 120,480 480,810 810,960 960,1260
the operating system to boot

937
00:29:39,670 --> 00:29:41,380
0,210 210,690 690,1290
or something else.

938
00:29:41,500 --> 00:29:44,380
0,1080 1080,1620 1650,2130 2130,2370 2370,2880
Yeah exactly it typically contains

939
00:29:44,380 --> 00:29:46,630
0,120 120,510 510,1050 1620,1860 1860,2250
you know a one block

940
00:29:46,630 --> 00:29:48,760
0,390 660,1260 1290,1590 1590,1950 1950,2130
of code a enough for

941
00:29:48,760 --> 00:29:49,630
0,90 90,420 420,630 630,690 690,870
the operating system to get

942
00:29:49,630 --> 00:29:50,860
0,390 390,540 540,690 690,960 960,1230
going and then load maybe

943
00:29:50,860 --> 00:29:52,420
0,570 630,840 840,930 930,1260 1260,1560
more of the operating system

944
00:29:52,420 --> 00:29:53,530
0,270 270,480 480,600 600,810 810,1110
actually from the file system

945
00:29:53,530 --> 00:29:54,480
0,510
itself.

946
00:29:57,810 --> 00:29:59,310
0,330 330,660 930,1170 1170,1320 1320,1500
Thank you, so does that

947
00:29:59,310 --> 00:30:00,810
0,210 210,450 450,750 750,1260 1260,1500
mean that the code for

948
00:30:00,810 --> 00:30:02,670
0,600 600,690 690,1020 1020,1500 1500,1860
x86 is actually stored on

949
00:30:02,700 --> 00:30:04,650
0,180 180,630 630,1200 1230,1710 1740,1950
the virtual disk, or is

950
00:30:04,650 --> 00:30:06,330
0,180 180,360 360,750 1170,1410 1410,1680
it like how does a

951
00:30:06,330 --> 00:30:07,530
0,540 540,660 660,870 870,960 960,1200
next you know the way

952
00:30:07,530 --> 00:30:08,850
0,150 150,390 390,510 510,1140 1140,1320
we do V Q you

953
00:30:08,850 --> 00:30:09,990
0,150 150,270 270,450 450,540 540,1140
know we got some corners

954
00:30:10,320 --> 00:30:11,910
0,480 480,1080 1080,1350 1350,1530 1530,1590
a enqueue actually has a

955
00:30:11,910 --> 00:30:13,350
0,540 540,630 630,720 720,960 960,1440
flag, you know dash kernel

956
00:30:13,350 --> 00:30:15,510
0,120 120,750 780,1290 1290,1500 1500,2160
that basically points to the

957
00:30:15,780 --> 00:30:17,220
0,480 480,750 750,840 840,1110 1110,1440
where boots the kernel from

958
00:30:17,220 --> 00:30:18,300
0,180 180,570 570,660 660,750 750,1080
and loads, you know that

959
00:30:18,300 --> 00:30:20,250
0,150 150,180 180,630 630,1110 1110,1950
at a particular address into

960
00:30:20,250 --> 00:30:22,050
0,330 330,780 780,1230 1230,1470 1470,1800
physical memory at oh eight

961
00:30:22,050 --> 00:30:23,540
0,330 330,540 540,750 750,1170
zero zero zero zero.

962
00:30:23,760 --> 00:30:25,260
0,180 180,450 450,1080 1080,1350 1350,1500
And so basically when we're

963
00:30:25,260 --> 00:30:26,340
0,240 240,690 690,780 780,960 960,1080
using chemo the way we

964
00:30:26,340 --> 00:30:27,510
0,210 210,390 390,690 690,990 990,1170
use key we don't really

965
00:30:27,510 --> 00:30:28,830
0,150 150,240 240,570 570,990 1020,1320
have to worry about boot

966
00:30:28,830 --> 00:30:30,120
0,510 510,570 570,870 870,1050 1050,1290
sectors or anything like that.

967
00:30:31,420 --> 00:30:32,800
0,330 330,450 450,990 990,1200 1200,1380
Okay, so basically like when

968
00:30:32,800 --> 00:30:36,070
0,150 150,450 450,1230 1410,2250 2280,3270
you run que CA qe

969
00:30:36,100 --> 00:30:38,740
0,630 660,990 990,1320 1320,1920 2280,2640
mu, you just you just

970
00:30:38,740 --> 00:30:39,880
0,330 330,510 510,750 750,1020 1020,1140
pass in like the the

971
00:30:39,880 --> 00:30:42,130
0,810 930,1470 1470,1620 1620,1980 1980,2250
program through the command line,

972
00:30:42,130 --> 00:30:42,970
0,90 90,210 210,390 390,570 570,840
and then I'll just run

973
00:30:42,970 --> 00:30:43,900
0,240 240,360 360,570 570,750 750,930
that it doesn't need to

974
00:30:43,900 --> 00:30:45,040
0,420 420,570 570,720 720,810 810,1140
read it from the virtual

975
00:30:45,040 --> 00:30:46,960
0,270 270,360 360,960
disk and everything.

976
00:30:46,990 --> 00:30:48,180
0,120 120,270 270,690
That makes sense.

977
00:30:49,650 --> 00:30:50,920
0,720
I'm.

978
00:30:51,530 --> 00:30:53,240
0,240 240,450 450,720 720,780 780,1710
Okay so like in the.

979
00:30:53,980 --> 00:30:55,780
0,210 210,510 540,1260
So present, um.

980
00:30:55,960 --> 00:30:57,250
0,270 270,720 720,930 930,1110 1110,1290
So assuming I know such

981
00:30:57,250 --> 00:30:59,830
0,1260 1290,1890 1890,2340 2340,2460 2460,2580
a 64 bytes, you know

982
00:30:59,830 --> 00:31:01,000
0,540 540,810 810,930 930,1020 1020,1170
example, now if you want

983
00:31:01,000 --> 00:31:02,890
0,90 90,540 570,1410 1410,1410 1410,1890
to read A I know

984
00:31:02,890 --> 00:31:04,160
0,690
ten.

985
00:31:08,540 --> 00:31:11,000
0,810 1140,1350 1350,1500 1500,2130
What do you do.

986
00:31:11,550 --> 00:31:12,300
0,240 240,330 330,450 450,660 660,750
How do you read I

987
00:31:12,300 --> 00:31:13,460
0,180 180,630
know ten.

988
00:31:18,370 --> 00:31:19,580
0,810
Anybody.

989
00:31:22,530 --> 00:31:23,730
0,510 510,840 840,930 930,1050 1050,1200
Which block do I know

990
00:31:23,730 --> 00:31:24,920
0,570
tenby.

991
00:31:25,660 --> 00:31:28,090
0,240 240,540 540,1110 1140,1860 2160,2430
You'd need to add you

992
00:31:28,090 --> 00:31:29,530
0,270 270,390 390,390 390,870 870,1440
take the I node number

993
00:31:29,800 --> 00:31:31,600
0,300 300,540 540,630 630,1170 1170,1800
and add the offset into

994
00:31:31,600 --> 00:31:32,890
0,270 270,630 630,870 870,1080 1080,1290
the disc, so ten plus

995
00:31:32,890 --> 00:31:36,060
0,510 990,1350 1350,2130 2190,2640
32, so 32, right.

996
00:31:36,060 --> 00:31:38,100
0,360 360,750 750,1290 1290,1590 1590,2040
And it literally plus ten

997
00:31:38,100 --> 00:31:39,480
0,180 180,420 420,900
or something else.

998
00:31:47,880 --> 00:31:49,650
0,240 240,420 420,660 660,1200 1200,1770
Is it ten divided by

999
00:31:49,770 --> 00:31:51,900
0,210 210,1410 1440,1830 1830,1980 1980,2130
the size, yeah it's gonna

1000
00:31:51,900 --> 00:31:53,070
0,360 360,720 720,840 840,1020 1020,1170
be whatever it's gonna be

1001
00:31:53,070 --> 00:31:54,740
0,150 150,330 330,1170
I know number.

1002
00:31:55,090 --> 00:31:56,900
0,330 330,570 570,1260
I note number.

1003
00:31:57,370 --> 00:32:00,460
0,720 1050,1800 1800,2490 2760,3000 3000,3090
A multiplied times, we do

1004
00:32:00,460 --> 00:32:01,660
0,90 90,180 180,570 570,780 780,1200
it in bites, you multiply

1005
00:32:01,660 --> 00:32:03,700
0,240 240,630 660,1530
it by 64.

1006
00:32:03,970 --> 00:32:06,010
0,630 630,1050 1050,1380 1380,1710 1710,2040
Divided by five twenty four.

1007
00:32:08,540 --> 00:32:10,040
0,330 330,510 510,660 660,1200 1200,1500
So I know zero will

1008
00:32:10,040 --> 00:32:12,040
0,210 210,390 390,690 690,1500
end up walk 32.

1009
00:32:12,040 --> 00:32:14,440
0,960 990,1170 1170,1890
A I note.

1010
00:32:14,690 --> 00:32:17,180
0,870 1020,1620 1620,2070 2070,2340 2340,2490
Whatever was five twenty four

1011
00:32:17,180 --> 00:32:19,000
0,330 330,450 450,1230
divided by 64.

1012
00:32:23,640 --> 00:32:26,700
0,2280 2280,2490 2490,2730 2730,2910 2910,3060
{1616,lessons} about right, so I

1013
00:32:26,700 --> 00:32:28,740
0,180 180,870 870,1140 1140,1470 1470,2040
know seventeen where will where

1014
00:32:28,740 --> 00:32:30,140
0,180 180,360 360,510 510,870
will it end up.

1015
00:32:32,960 --> 00:32:34,130
0,210 210,330 330,720 720,900 900,1170
Should be neither too being

1016
00:32:34,130 --> 00:32:36,120
0,330 330,540 540,840 870,1230
block {33, -} right.

1017
00:32:37,710 --> 00:32:39,020
0,150 150,240 240,360 360,630
Does that make sense.

1018
00:32:39,520 --> 00:32:40,990
0,240 270,570 570,930 930,1320 1320,1470
So given unknown number, we

1019
00:32:40,990 --> 00:32:43,060
0,120 120,390 390,930 1020,1500 1500,2070
can always find a the

1020
00:32:43,090 --> 00:32:44,680
0,330 330,570 570,930 930,1350 1350,1590
bytes on disk where Di

1021
00:32:44,680 --> 00:32:46,280
0,240 240,600 600,1080
note actually stored.

1022
00:32:47,370 --> 00:32:48,440
0,630
Okay.

1023
00:32:50,580 --> 00:32:52,080
0,270 270,750 780,1110 1110,1320 1320,1500
Okay, so then let's look

1024
00:32:52,080 --> 00:32:54,330
0,120 120,780 1230,1560 1560,1860 1860,2250
at the um, what actually

1025
00:32:54,330 --> 00:32:56,460
0,360 840,1380 1410,1680 1680,1890 1890,2130
is in on this kind

1026
00:32:56,460 --> 00:32:57,420
0,450
note.

1027
00:33:04,850 --> 00:33:06,200
0,510 510,690 690,1110 1140,1230 1230,1350
So as we know it

1028
00:33:06,200 --> 00:33:08,360
0,720 750,1110 1110,1350 1350,1590 1590,2160
before you'll see there's basically

1029
00:33:08,360 --> 00:33:10,700
0,210 210,480 480,1050 1260,1830 1830,2340
little data structure, 64 bytes

1030
00:33:10,730 --> 00:33:12,180
0,210 210,900
in size.

1031
00:33:13,760 --> 00:33:15,440
0,570 570,1110 1110,1200 1200,1320 1320,1680
Yeah, and you know typically

1032
00:33:15,440 --> 00:33:16,820
0,270 270,330 330,870
has a type.

1033
00:33:16,880 --> 00:33:18,230
0,420 420,660 660,870 870,1020 1020,1350
Which we'll talk about it

1034
00:33:18,230 --> 00:33:19,400
0,300 300,480 480,540 540,840 840,1170
later, but for example type

1035
00:33:19,400 --> 00:33:22,340
0,450 450,600 600,1290 1650,2130 2160,2940
file or directory, a link.

1036
00:33:23,640 --> 00:33:24,900
0,120 120,210 210,510 510,810 810,1260
You know the link count

1037
00:33:25,200 --> 00:33:27,690
0,330 330,1110 1110,1860 1890,2430 2430,2490
to track multiple names or

1038
00:33:27,690 --> 00:33:28,620
0,300 300,420 420,510 510,780 780,930
pointing to the same an

1039
00:33:28,620 --> 00:33:29,520
0,360
ode.

1040
00:33:29,580 --> 00:33:31,880
0,270 270,840 840,1080 1080,1650
A size in bytes.

1041
00:33:32,960 --> 00:33:35,660
0,510 510,1080 1080,2010 2010,2280 2280,2700
And then A X six

1042
00:33:35,660 --> 00:33:36,440
0,90 90,240 240,420 420,600 600,780
you know there can be

1043
00:33:36,440 --> 00:33:37,760
0,330 330,630 630,690 690,960 960,1320
slightly different in different files

1044
00:33:37,760 --> 00:33:39,080
0,90 90,420 420,570 570,660 660,1320
and exactly how the representation

1045
00:33:39,080 --> 00:33:40,970
0,300 630,1320 1350,1530 1530,1650 1650,1890
is a butt in xc

1046
00:33:40,970 --> 00:33:43,370
0,510 870,1380 1410,2130 2130,2280 2280,2400
six a little bit more

1047
00:33:43,370 --> 00:33:44,360
0,540
space.

1048
00:33:49,760 --> 00:33:51,170
0,150 150,390 390,720 720,1320 1320,1410
An extra six individually is

1049
00:33:51,170 --> 00:33:52,550
0,540 540,930 930,1080 1080,1320 1320,1380
followed by a number of

1050
00:33:52,550 --> 00:33:53,880
0,300 300,780
block numbers.

1051
00:33:54,120 --> 00:33:55,590
0,480 480,630 630,900 900,1170 1170,1470
Um, and so after block

1052
00:33:55,590 --> 00:33:58,680
0,660 690,1500 1770,2160 2160,2430 2430,3090
number zero block number one.

1053
00:33:59,240 --> 00:34:01,580
0,120 120,450 840,1170 1200,1920 2070,2340
In fact, there were twelve

1054
00:34:01,580 --> 00:34:03,080
0,120 120,330 330,900
of those guys.

1055
00:34:03,140 --> 00:34:05,270
0,240 240,900 900,1320 1320,1620 1620,2130
These twelve direct block numbers.

1056
00:34:10,510 --> 00:34:11,470
0,180 180,300 300,600 600,720 720,960
And no direct no block

1057
00:34:11,470 --> 00:34:12,760
0,210 210,510 510,1080 1080,1200 1200,1290
numbers basically correspond to the

1058
00:34:12,760 --> 00:34:15,280
0,690 690,1320 1320,1770 1770,1920 1920,2520
first twelve blocks that constitute

1059
00:34:15,280 --> 00:34:16,440
0,180 180,630
that file.

1060
00:34:16,440 --> 00:34:17,190
0,210 210,270 270,600 600,660 660,750
So, for example if the

1061
00:34:17,190 --> 00:34:18,420
0,270 270,420 420,750 750,930 930,1230
file was only two bytes

1062
00:34:18,420 --> 00:34:19,650
0,510 570,660 660,840 840,1050 1050,1230
long, you know there would

1063
00:34:19,650 --> 00:34:21,990
0,120 120,510 510,1020 1020,2010 2040,2340
be only one a block

1064
00:34:21,990 --> 00:34:24,000
0,180 180,780 1110,1500 1500,1860 1860,2010
number zero and block number

1065
00:34:24,000 --> 00:34:25,240
0,300 300,450 450,690
zero is that.

1066
00:34:25,360 --> 00:34:27,160
0,420 450,1080 1080,1380 1380,1650 1650,1800
The block number of the

1067
00:34:27,160 --> 00:34:28,780
0,300 300,600 600,750 750,1500 1500,1620
disk block that contains you

1068
00:34:28,780 --> 00:34:30,220
0,150 150,300 300,690 720,1110 1110,1440
know the first few bytes

1069
00:34:30,220 --> 00:34:31,620
0,270 330,510 510,930
of that file.

1070
00:34:32,290 --> 00:34:35,110
0,330 330,810 1080,1560 1560,2100 2370,2820
And then there's one indirect

1071
00:34:35,110 --> 00:34:36,560
0,240 240,930
block number.

1072
00:34:41,570 --> 00:34:43,340
0,510 510,780 780,840 840,1140 1140,1770
Basically that's a block number.

1073
00:34:44,110 --> 00:34:45,820
0,300 300,900 900,1020 1020,1020 1020,1710
That corresponds to a block.

1074
00:34:46,550 --> 00:34:48,700
0,600 630,870 870,1650
Which then itself.

1075
00:34:49,080 --> 00:34:50,340
0,450 450,540 540,780 780,1080 1080,1260
Block is five twenty four

1076
00:34:50,340 --> 00:34:53,140
0,330 330,870 870,1500 1530,2220
bytes which holds a.

1077
00:34:53,590 --> 00:34:56,080
0,300 300,1110 1110,1440 1440,1950
A 256, what numbers.

1078
00:35:01,800 --> 00:35:03,180
0,270 270,450 450,690 690,900 900,1380
So if block number zero,

1079
00:35:03,180 --> 00:35:04,380
0,210 210,540 540,720 720,1020 1020,1200
we are for block number

1080
00:35:04,380 --> 00:35:05,600
0,630
eleven.

1081
00:35:06,250 --> 00:35:07,420
0,660
Are.

1082
00:35:08,050 --> 00:35:10,030
0,600 630,1230 1230,1440 1440,1800 1800,1980
All drug block numbers and

1083
00:35:10,030 --> 00:35:11,830
0,180 180,630 630,900 900,1200 1200,1800
so then block number twelve

1084
00:35:11,860 --> 00:35:13,980
0,420 420,840 840,990 990,1380
you stored in that.

1085
00:35:17,560 --> 00:35:20,200
0,180 180,420 420,900 900,1560 1920,2640
In that indirect block basically

1086
00:35:20,200 --> 00:35:22,600
0,390 390,660 660,1140 1170,1890 1920,2400
pointed to by the indirect

1087
00:35:22,600 --> 00:35:23,760
0,240 240,630
block number.

1088
00:35:25,900 --> 00:35:27,490
0,150 150,330 330,450 450,1020 1020,1590
And that is basically the

1089
00:35:27,820 --> 00:35:31,360
0,1020 1080,1740 1770,1890 1890,2670 2970,3540
layout of the file in.

1090
00:35:32,260 --> 00:35:34,080
0,570 570,870 870,1320
A X six.

1091
00:35:35,300 --> 00:35:36,140
0,210 210,300 300,480 480,570 570,840
And so what is the

1092
00:35:36,140 --> 00:35:37,940
0,360 360,630 630,1080 1080,1260 1260,1800
maximum file size in x86

1093
00:35:37,940 --> 00:35:39,280
0,210 210,300 300,750
based on this.

1094
00:35:45,880 --> 00:35:47,080
0,660
Anybody.

1095
00:35:54,240 --> 00:35:56,790
0,60 60,180 180,480 750,1770 1770,2550
It would be 268 times

1096
00:35:56,820 --> 00:35:58,140
0,210 210,570 570,780 780,960 960,1320
a thousand twenty four bytes

1097
00:35:58,140 --> 00:36:00,210
0,450 810,1230 1230,1650 1650,1860 1860,2070
basically yeah we're just three

1098
00:36:00,210 --> 00:36:01,720
0,300 300,870
fifty six.

1099
00:36:02,320 --> 00:36:05,900
0,390 390,2940
Plus {1212,drift.}

1100
00:36:06,250 --> 00:36:08,110
0,570 570,960 960,1200 1200,1710 1740,1860
Times thousand twenty four and

1101
00:36:08,110 --> 00:36:09,130
0,180 180,270 270,450 450,630 630,1020
then we get the maximum

1102
00:36:09,130 --> 00:36:10,720
0,270 270,600 600,690 690,1200 1230,1590
file size in bytes, right.

1103
00:36:12,840 --> 00:36:14,520
0,180 180,390 390,510 510,930
How much is that.

1104
00:36:18,340 --> 00:36:19,400
0,480
Good.

1105
00:36:19,460 --> 00:36:20,210
0,240 240,360 360,420 420,630 630,750
Another way of saying it's

1106
00:36:20,210 --> 00:36:21,950
0,510 510,720 720,870 870,1260 1260,1740
basically two under 68 kilobyte,

1107
00:36:21,950 --> 00:36:22,920
0,390
correct.

1108
00:36:24,470 --> 00:36:25,400
0,180 180,270 270,330 330,600 600,930
What can you store into

1109
00:36:25,400 --> 00:36:27,380
0,660 690,1380
68 kilobyte.

1110
00:36:30,510 --> 00:36:31,590
0,210 210,330 330,600 600,960 960,1080
Can you store video in

1111
00:36:31,590 --> 00:36:32,480
0,240
it.

1112
00:36:35,330 --> 00:36:36,660
0,240 240,780
We're Sha.

1113
00:36:39,050 --> 00:36:40,340
0,240 240,390 390,480 480,900 900,1290
If it's a short song,

1114
00:36:40,340 --> 00:36:43,460
0,360 1830,2310 2310,2520 2520,2760 2760,3120
yes very short, short correct,

1115
00:36:44,060 --> 00:36:45,740
0,210 210,330 330,660 660,1320 1320,1680
um, so these are really

1116
00:36:45,740 --> 00:36:47,510
0,330 330,600 600,900 1260,1530 1530,1770
small file size, real file

1117
00:36:47,510 --> 00:36:49,190
0,510 510,660 720,1020 1020,1380 1380,1680
systems and much much bigger

1118
00:36:49,190 --> 00:36:50,870
0,240 240,660 930,1170 1170,1320 1320,1680
file size, so what would

1119
00:36:50,870 --> 00:36:52,160
0,90 90,510 510,750 750,990 990,1290
you do to file system

1120
00:36:52,160 --> 00:36:53,840
0,690 690,780 780,960 960,1440 1530,1680
representation to make this to

1121
00:36:53,840 --> 00:36:54,950
0,270 270,360 360,720 720,840 840,1110
allow the files to be

1122
00:36:54,950 --> 00:36:55,790
0,240 240,390 390,660 660,720 720,840
much more files to be

1123
00:36:55,790 --> 00:36:56,760
0,180 180,570
much bigger.

1124
00:37:01,560 --> 00:37:03,750
0,240 240,780 780,1380 1380,1530 1530,2190
Could you extend the indirect

1125
00:37:03,750 --> 00:37:06,600
0,780 1650,2130 2130,2340 2340,2490 2490,2850
portions, yeah like for example

1126
00:37:06,600 --> 00:37:07,620
0,120 120,210 210,450 450,720 720,1020
you could have another block

1127
00:37:07,620 --> 00:37:08,940
0,270 270,450 450,750 750,1140 1140,1320
seating your blow correct, which

1128
00:37:08,940 --> 00:37:10,760
0,90 90,450 450,870 870,1290
is maybe doubling direct.

1129
00:37:14,170 --> 00:37:15,400
0,390 390,570 570,660 660,870 870,1230
Almost like you know the

1130
00:37:15,400 --> 00:37:16,420
0,300 300,390 390,480 480,720 720,1020
sort of the page table

1131
00:37:16,420 --> 00:37:17,500
0,270 270,480 480,840 840,990 990,1080
type data structures that we've

1132
00:37:17,500 --> 00:37:18,780
0,180 180,750
seen before.

1133
00:37:19,070 --> 00:37:20,390
0,300 300,480 480,690 690,960 960,1320
Right then, that double indirect

1134
00:37:20,390 --> 00:37:21,590
0,480 480,780 780,930 930,1080 1080,1200
block points to two and

1135
00:37:21,590 --> 00:37:23,240
0,450 450,870 870,1110 1110,1380 1380,1650
fifty-six indirect block numbers each

1136
00:37:23,240 --> 00:37:24,920
0,270 270,540 540,990 1020,1380 1380,1680
which point to another block

1137
00:37:24,920 --> 00:37:26,330
0,300 690,810 810,930 930,1320 1320,1410
number and so suddenly the

1138
00:37:26,330 --> 00:37:27,380
0,240 240,510 510,660 660,780 780,1050
file size is going to

1139
00:37:27,410 --> 00:37:28,760
0,540 540,690 690,810 810,1020 1020,1350
maximize this is much bigger.

1140
00:37:29,440 --> 00:37:30,640
0,210 210,630 630,810 810,1020 1020,1200
And basically just turned out

1141
00:37:30,640 --> 00:37:31,540
0,60 60,240 240,450 450,660 690,900
to be just a sort

1142
00:37:31,540 --> 00:37:33,280
0,60 60,660 660,990 990,1560 1560,1740
of exercise in on those

1143
00:37:33,280 --> 00:37:34,240
0,240 240,600 600,690 690,840 840,960
data structures, you could pick

1144
00:37:34,240 --> 00:37:36,040
0,690 870,1260 1260,1410 1410,1650 1650,1800
a structure like this, like

1145
00:37:36,040 --> 00:37:37,180
0,30 30,570 570,750 750,900 900,1140
a tree, but there's also

1146
00:37:37,180 --> 00:37:38,680
0,450 450,570 570,840 840,1110 1110,1500
possible to like maybe implemented

1147
00:37:38,680 --> 00:37:39,910
0,90 90,150 150,360 360,810 810,1230
as A B tree or

1148
00:37:39,940 --> 00:37:41,680
0,330 330,510 510,1170
something other sophisticated.

1149
00:37:41,800 --> 00:37:44,980
0,750 750,990 990,1440 1440,2040 2220,3180
Exercise something extremely simple, um

1150
00:37:44,980 --> 00:37:47,380
0,120 150,1290 1290,1410 1410,1980 1980,2400
in basically it's modeled after

1151
00:37:47,380 --> 00:37:48,970
0,150 150,600 600,900 900,1110 1110,1590
the original version six units

1152
00:37:49,150 --> 00:37:51,060
0,600
units.

1153
00:37:51,120 --> 00:37:52,590
0,870 900,1020 1020,1110 1110,1230 1230,1470
Um, but you can make

1154
00:37:52,590 --> 00:37:54,060
0,150 150,300 300,810 810,1290 1320,1470
them more sophisticated schemes, in

1155
00:37:54,060 --> 00:37:55,580
0,270 270,510 510,870
fact in the.

1156
00:37:55,740 --> 00:37:57,600
0,360 360,660 660,1050 1110,1440 1440,1860
File system while you implement

1157
00:37:57,600 --> 00:38:00,060
0,300 300,900 930,1680 1680,2040 2040,2460
double indirect block numbers to

1158
00:38:00,060 --> 00:38:02,000
0,510 510,690 690,960 960,1500
support much bigger files.

1159
00:38:04,260 --> 00:38:05,900
0,180 180,510 510,750 750,1080
Any questions about this.

1160
00:38:10,530 --> 00:38:12,870
0,450 450,660 660,840 840,1170 1290,2340
Sorry, so is it 256

1161
00:38:12,870 --> 00:38:15,930
0,750 750,1140 1140,1560 1590,2100 2490,3060
blocks because it's a like

1162
00:38:15,930 --> 00:38:17,250
0,240 240,540 540,660 660,750 750,1320
one block as a whole.

1163
00:38:18,500 --> 00:38:21,140
0,840 840,900 1170,1980 2100,2340 2340,2640
A is exactly what this

1164
00:38:21,140 --> 00:38:22,580
0,180 180,270 270,690 690,930 930,1440
is an indirect block number

1165
00:38:22,640 --> 00:38:23,690
0,150 150,270 270,480 480,870 870,1050
so that doesn't count so

1166
00:38:23,690 --> 00:38:25,700
0,210 330,1230 1230,1530 1530,1680 1680,2010
there's 256 sitting in this

1167
00:38:25,700 --> 00:38:28,190
0,450 450,900 1080,1470 1470,1950 1950,2490
indirect block plus twelve direct

1168
00:38:28,490 --> 00:38:29,840
0,270 270,750 780,1020 1020,1260 1260,1350
block numbers that makes it

1169
00:38:29,960 --> 00:38:31,200
0,750
268.

1170
00:38:32,620 --> 00:38:33,880
0,420 420,600 600,690 690,960 960,1260
Oh, sorry my question was

1171
00:38:33,910 --> 00:38:37,390
0,390 390,510 510,840 1350,2940 3120,3480
why is it 256 oh

1172
00:38:37,390 --> 00:38:38,950
0,270 270,510 510,1080 1080,1320 1320,1560
because it's a block number

1173
00:38:38,950 --> 00:38:41,180
0,180 180,690 990,1740
four byte probably.

1174
00:38:43,300 --> 00:38:46,000
0,330 360,1050 1050,1350 1350,1830 2250,2700
So 2024 divided by four

1175
00:38:46,000 --> 00:38:47,800
0,270 270,570 570,750 750,1260
three fifty six centuries.

1176
00:38:47,920 --> 00:38:49,280
0,810
Okay.

1177
00:38:49,280 --> 00:38:50,660
0,390 390,720 840,1110 1110,1170 1170,1380
Thank you, which is also

1178
00:38:50,660 --> 00:38:51,830
0,60 60,210 210,330 330,780 780,1170
a little bit ridiculous regular

1179
00:38:51,830 --> 00:38:53,090
0,240 240,510 510,750 750,870 870,1260
if block number is only

1180
00:38:53,090 --> 00:38:54,080
0,210 210,480 480,660 660,780 780,990
four bytes, how big can

1181
00:38:54,080 --> 00:38:55,180
0,240 240,510
this be.

1182
00:39:04,610 --> 00:39:05,780
0,630
Anybody.

1183
00:39:16,280 --> 00:39:17,120
0,120 120,360 360,480 480,570 570,840
A two to the power

1184
00:39:17,120 --> 00:39:19,400
0,480 480,960 1050,1560
32 right, right.

1185
00:39:19,490 --> 00:39:20,360
0,240 240,420 420,510 510,720 720,870
Some things are bigger than

1186
00:39:20,360 --> 00:39:22,190
0,330 540,900 900,1290 1320,1740 1740,1830
that, and so typically you

1187
00:39:22,190 --> 00:39:24,500
0,120 120,360 360,570 570,1230 1590,2310
know people use larger, um.

1188
00:39:25,230 --> 00:39:27,660
0,510 540,1230 1230,1800 1830,2160 2160,2430
A sizes for block numbers

1189
00:39:27,660 --> 00:39:29,180
0,240 240,600 600,990
and 32 bits.

1190
00:39:30,820 --> 00:39:31,900
0,600
Okay.

1191
00:39:32,080 --> 00:39:33,920
0,180 180,540 540,780 780,1290
Any questions further questions.

1192
00:39:36,430 --> 00:39:37,900
0,210 210,480 480,540 540,1050 1050,1470
A fourth a Max file

1193
00:39:37,900 --> 00:39:40,150
0,660 1080,1290 1290,1500 1500,1920 2010,2250
size, but could you could

1194
00:39:40,150 --> 00:39:42,550
0,120 120,960 1050,1680 1680,1860 1860,2400
you help explain that again

1195
00:39:42,580 --> 00:39:43,460
0,300
like.

1196
00:39:43,550 --> 00:39:46,190
0,450 690,1140 1380,1920 1920,2250 2250,2640
Okay, sure could each block

1197
00:39:46,190 --> 00:39:48,170
0,270 270,810 1020,1230 1230,1560 1560,1980
in the could each block

1198
00:39:48,170 --> 00:39:49,240
0,510
in.

1199
00:39:49,670 --> 00:39:51,110
0,270 270,720 720,870 870,1050 1050,1440
That's referenced by the indirect

1200
00:39:51,110 --> 00:39:53,340
0,330 330,570 570,990 990,1680
block could that also.

1201
00:39:53,600 --> 00:39:55,400
0,360 390,630 630,780 780,990 990,1800
I'm {22 -} more blocks,

1202
00:39:55,610 --> 00:39:56,810
0,300 300,450 450,600 600,810 810,1200
if that makes sense in

1203
00:39:56,810 --> 00:39:58,730
0,360 360,540 540,900 900,1350 1350,1920
in the default x86 design,

1204
00:39:58,820 --> 00:39:59,840
0,210 210,450 450,600 600,660 660,1020
um, that's not the case,

1205
00:39:59,840 --> 00:40:01,370
0,450 450,510 510,840 840,1050 1050,1530
basically a twelve block number

1206
00:40:01,580 --> 00:40:02,990
0,390 390,720 720,960 960,1260 1260,1410
twelve direct block numbers and

1207
00:40:03,110 --> 00:40:05,420
0,690 690,1110 1110,1410 1410,1860 2100,2310
256 Internet block numbers and

1208
00:40:05,450 --> 00:40:06,600
0,360 360,690
nothing more.

1209
00:40:06,840 --> 00:40:09,540
0,540 540,1200 1650,2070 2100,2340 2340,2700
Um in in the next

1210
00:40:09,540 --> 00:40:10,650
0,420 420,600 600,720 720,1020 1020,1110
lap you'll be adding a

1211
00:40:10,650 --> 00:40:12,000
0,270 270,660 660,990 990,1200 1200,1350
double indirect block to the

1212
00:40:12,000 --> 00:40:13,470
0,150 150,540 900,1050 1050,1260 1260,1470
I node so you'll take

1213
00:40:13,470 --> 00:40:14,280
0,180 180,270 270,480 480,690 690,810
one of these B N

1214
00:40:14,280 --> 00:40:15,600
0,240 240,630 630,840 840,1080 1080,1320
L Evans and turn out

1215
00:40:15,600 --> 00:40:17,600
0,360 360,600 630,960 960,1530
into a doubly indirect.

1216
00:40:17,660 --> 00:40:19,310
0,300 300,480 480,750 750,1290 1290,1650
And that double indirect going

1217
00:40:19,310 --> 00:40:20,420
0,90 90,600
to point.

1218
00:40:20,540 --> 00:40:21,980
0,660 690,930 930,1080 1080,1260 1260,1440
To this, we have to

1219
00:40:21,980 --> 00:40:23,960
0,210 330,1320
have 256.

1220
00:40:24,260 --> 00:40:26,120
0,510 510,750 750,1290
Indirect block numbers.

1221
00:40:26,880 --> 00:40:28,560
0,240 240,660 660,900 900,1200 1200,1680
Which itself then point to

1222
00:40:29,190 --> 00:40:30,580
0,900
blocks.

1223
00:40:31,060 --> 00:40:32,320
0,300 300,600 600,840 840,960 960,1260
Now, wait file can be

1224
00:40:32,350 --> 00:40:34,060
0,750 750,1170
substantially there.

1225
00:40:36,040 --> 00:40:38,820
0,420 420,810 810,1440
Oh okay, thanks.

1226
00:40:39,300 --> 00:40:41,610
0,540 930,1200 1200,1650 1650,1860 1860,2310
Okay, so now let's say

1227
00:40:41,610 --> 00:40:42,480
0,240 240,390 390,450 450,780 780,870
we want to implement the

1228
00:40:42,480 --> 00:40:43,940
0,180 180,450 450,900
read system call.

1229
00:40:44,000 --> 00:40:45,950
0,960 1050,1170 1170,1410 1410,1560 1560,1950
And, um, you know basically

1230
00:40:45,950 --> 00:40:48,530
0,180 180,480 480,720 720,1830 2250,2580
we start from a operating

1231
00:40:48,530 --> 00:40:50,570
0,240 240,720 930,1260 1260,1590 1590,2040
system boots wants to read

1232
00:40:50,870 --> 00:40:53,000
0,780 780,1050 1050,1650
a say bite.

1233
00:40:54,040 --> 00:40:55,640
0,1020
Reach.

1234
00:40:55,850 --> 00:40:57,960
0,540 540,1500
A bite.

1235
00:40:58,510 --> 00:41:00,320
0,540 540,1170
A 8000.

1236
00:41:04,320 --> 00:41:06,000
0,210 210,390 390,570 570,1140 1500,1680
Yeah, how would you know

1237
00:41:06,000 --> 00:41:07,050
0,180 180,450 450,570 570,690 690,1050
which block would you read.

1238
00:41:09,380 --> 00:41:11,690
0,330 330,840 840,990 990,1710 1740,2310
Which block will contain basically

1239
00:41:11,690 --> 00:41:13,420
0,300 300,1140
by 8000.

1240
00:41:17,340 --> 00:41:18,420
0,240 240,360 360,450 450,930 930,1080
How would you compute or

1241
00:41:18,420 --> 00:41:19,380
0,210 210,330 330,480 480,660 660,960
how you would look up

1242
00:41:19,410 --> 00:41:21,690
0,450 450,600 600,840 840,1440 1890,2280
giving this data structure, this

1243
00:41:21,690 --> 00:41:24,030
0,480 480,750 750,990 990,1710 1710,2340
extremely simple data structure, how

1244
00:41:24,030 --> 00:41:24,960
0,120 120,210 210,570 570,660 660,930
would you compute the actually

1245
00:41:24,960 --> 00:41:26,340
0,120 120,390 390,870 930,1140 1140,1380
the block number or find

1246
00:41:26,340 --> 00:41:27,600
0,90 90,360 360,600 600,750 750,1260
the block number that contains

1247
00:41:27,600 --> 00:41:29,380
0,540 540,1260
by 8000.

1248
00:41:36,070 --> 00:41:37,580
0,930
Anybody.

1249
00:41:38,670 --> 00:41:40,480
0,180 180,360 360,750
Do you just.

1250
00:41:40,510 --> 00:41:42,490
0,780 810,1140 1140,1380 1380,1470 1470,1980
Subtract light, first of all

1251
00:41:42,610 --> 00:41:44,260
0,570 570,930 960,1260 1260,1380 1380,1650
subtract the number of bytes

1252
00:41:44,260 --> 00:41:45,490
0,60 60,150 150,420 420,810 810,1230
in the first twelve direct

1253
00:41:45,490 --> 00:41:47,400
0,630 810,1380
blocks hmm.

1254
00:41:47,430 --> 00:41:49,110
0,180 180,600 600,1200 1200,1590 1590,1680
And then see what the

1255
00:41:49,110 --> 00:41:50,940
0,480 480,720 720,870 870,1050 1050,1830
offset is in the indirect

1256
00:41:50,940 --> 00:41:52,080
0,660
blocks.

1257
00:41:52,080 --> 00:41:53,130
0,240 240,480 480,660 660,900 900,1050
Yeah, so okay, so in

1258
00:41:53,130 --> 00:41:54,480
0,240 240,300 300,1020 1020,1230 1230,1350
case of {8000,years,} what we

1259
00:41:54,480 --> 00:41:55,650
0,150 150,330 330,660 660,1080 1080,1170
will do correctly divided by

1260
00:41:55,650 --> 00:41:56,940
0,30 30,390 390,630 630,990 990,1290
a thousand twenty four because

1261
00:41:56,940 --> 00:41:58,460
0,150 150,240 240,510 510,960
that's the block size.

1262
00:42:00,000 --> 00:42:02,790
0,300 300,540 540,1080 1260,2190 2220,2790
And that is a seven

1263
00:42:02,820 --> 00:42:03,800
0,420
right.

1264
00:42:05,250 --> 00:42:06,660
0,390 390,630 630,810 810,1110 1110,1410
And so that means that

1265
00:42:06,660 --> 00:42:09,480
0,600 600,930 930,1440 1440,2130 2460,2820
basically the seventh block actually

1266
00:42:09,480 --> 00:42:11,490
0,720 870,1050 1050,1380 1380,1800 1800,2010
has the second entry in

1267
00:42:11,490 --> 00:42:13,380
0,300 300,630 630,870 870,1380 1650,1890
this direct block number has

1268
00:42:13,380 --> 00:42:15,030
0,120 120,420 420,780 780,900 900,1650
the block number that contains

1269
00:42:15,030 --> 00:42:17,200
0,90 90,330 330,630 630,1680
you know by {8000,correct.}

1270
00:42:17,750 --> 00:42:20,240
0,330 330,810 810,1410 1770,2100 2100,2490
So bn seven whatever number

1271
00:42:20,240 --> 00:42:21,800
0,120 120,600 600,810 810,1230 1260,1560
is there is the block

1272
00:42:21,800 --> 00:42:23,930
0,300 300,480 480,1230 1440,1710 1710,2130
number that contains this particular

1273
00:42:23,930 --> 00:42:26,300
0,600 930,1860
file file.

1274
00:42:26,540 --> 00:42:28,910
0,420 420,1710 1710,1920 1920,2220 2220,2370
By {8000,to} actually find out

1275
00:42:28,910 --> 00:42:31,640
0,480 480,900 900,1200 1620,2220 2220,2730
exactly where that bite is

1276
00:42:31,670 --> 00:42:32,990
0,600 600,660 660,840 840,1230 1230,1320
inside of that block, you

1277
00:42:32,990 --> 00:42:33,890
0,120 120,540 540,660 660,810 810,900
know basically we have to

1278
00:42:33,890 --> 00:42:35,700
0,420 420,1260
confuse 8000.

1279
00:42:35,700 --> 00:42:37,000
0,270 270,840
Much loaf.

1280
00:42:37,260 --> 00:42:38,820
0,120 120,270 270,960
I was 24.

1281
00:42:40,690 --> 00:42:42,580
0,690 870,1050 1050,1470 1470,1800 1800,1890
Which, um, eyes probably I

1282
00:42:42,580 --> 00:42:44,440
0,150 150,270 420,1260
think it's 832.

1283
00:42:46,460 --> 00:42:48,410
0,540 930,1050 1050,1350 1350,1440 1440,1950
Okay, so basically to reach

1284
00:42:48,590 --> 00:42:50,120
0,420 420,630 630,1290 1290,1380 1380,1530
by eight thousands you know

1285
00:42:50,120 --> 00:42:51,560
0,120 120,360 360,900 900,1350 1350,1440
the file system looks at

1286
00:42:51,560 --> 00:42:53,900
0,150 150,300 300,810 1530,1800 1800,2340
the I note takes the

1287
00:42:53,930 --> 00:42:56,660
0,300 300,510 510,810 810,1980 2040,2730
bite number divide 5024 indexes

1288
00:42:56,660 --> 00:42:58,000
0,840
into.

1289
00:42:58,000 --> 00:42:59,680
0,750 780,1170 1170,1290 1290,1380 1380,1680
Esses seas if it falls

1290
00:42:59,680 --> 00:43:00,760
0,270 270,690 690,840 840,960 960,1080
below twelve then as a

1291
00:43:00,760 --> 00:43:02,860
0,300 300,540 540,1080 1440,1770 1770,2100
direct walk number a and

1292
00:43:02,860 --> 00:43:04,600
0,300 480,1050 1050,1170 1170,1380 1380,1740
just picks up the direct

1293
00:43:04,600 --> 00:43:05,890
0,210 210,510 510,780 780,1140 1140,1290
block number from the I

1294
00:43:05,890 --> 00:43:08,080
0,480 690,990 990,1290 1290,1830 2010,2190
node reach that block and

1295
00:43:08,080 --> 00:43:09,400
0,270 270,660 660,1050 1050,1170 1170,1320
then fishes out you know

1296
00:43:09,400 --> 00:43:12,220
0,960 960,1320 1350,1860 1860,2700 2700,2820
{8000,byte} by computing {8000,divided} by

1297
00:43:12,220 --> 00:43:13,690
0,270 300,660 660,990 990,1200 1200,1470
found by module 10,024 and

1298
00:43:13,690 --> 00:43:15,100
0,180 180,990 990,1110 1110,1230 1230,1410
so it will give us

1299
00:43:15,100 --> 00:43:16,000
0,180 180,330 330,450 450,780 780,900
an offset of eight thirty

1300
00:43:16,000 --> 00:43:17,110
0,180 180,420 420,780 780,870 870,1110
two and that's the location

1301
00:43:17,110 --> 00:43:20,710
0,390 660,1410 1410,1980 2250,2970 2970,3600
four by 8000 Dollar file.

1302
00:43:20,710 --> 00:43:21,560
0,540

1303
00:43:22,760 --> 00:43:23,940
0,720
Okay.

1304
00:43:24,690 --> 00:43:25,770
0,150 150,540 540,720 720,810 810,1080
So basically, this is enough

1305
00:43:25,770 --> 00:43:27,570
0,750 1110,1200 1200,1500 1500,1620 1620,1800
information to conclude from this

1306
00:43:27,570 --> 00:43:28,800
0,150 150,330 330,510 510,750 750,1230
is like there's enough information

1307
00:43:28,800 --> 00:43:31,590
0,330 330,720 720,900 900,1530 2160,2790
here now to actually implement

1308
00:43:31,620 --> 00:43:32,970
0,420 420,690 690,960 960,1260 1260,1350
read, write system calls at

1309
00:43:32,970 --> 00:43:33,900
0,150 150,240 240,540 540,630 630,930
least to find out which

1310
00:43:33,900 --> 00:43:35,610
0,300 300,810 1080,1470 1470,1530 1530,1710
disc walks need to be

1311
00:43:35,610 --> 00:43:40,470
0,360 360,810 960,2040 2220,2670 3930,4860
written written written, um, um.

1312
00:43:41,100 --> 00:43:42,780
0,240 240,660 660,930 930,1350 1350,1680
In response to a reader

1313
00:43:42,780 --> 00:43:44,060
0,180 180,420 420,720
right system call.

1314
00:43:46,630 --> 00:43:47,660
0,540
Okay.

1315
00:43:51,520 --> 00:43:52,120
0,210 210,330 330,420 420,570 570,600
So let me talk a

1316
00:43:52,120 --> 00:43:53,900
0,180 180,300 300,480 480,1140
little bit about directories.

1317
00:43:56,100 --> 00:43:56,970
0,210 210,300 300,360 360,600 600,870
One of the cool things

1318
00:43:56,970 --> 00:43:58,200
0,270 270,450 450,540 540,810 810,1230
about you know file systems

1319
00:43:58,200 --> 00:43:59,910
0,180 180,450 450,630 630,780 810,1710
where you have a hierarchical

1320
00:44:00,180 --> 00:44:02,580
0,810 810,1290 1290,1980 1980,2310 2310,2400
name space a and you

1321
00:44:02,580 --> 00:44:05,190
0,90 90,600 600,1170 1200,1830 1830,2610
can still store a symbolic

1322
00:44:05,370 --> 00:44:07,080
0,360 360,750 750,1170 1170,1590 1590,1710
user friendly names inside of

1323
00:44:07,080 --> 00:44:07,900
0,300
a.

1324
00:44:08,020 --> 00:44:10,360
0,300 300,750 750,840 840,1530 2070,2340
A inside of a inside

1325
00:44:10,360 --> 00:44:11,660
0,90 90,150 150,360 360,750
of the file system.

1326
00:44:11,720 --> 00:44:14,210
0,930 1110,1230 1230,1530 1530,1980 1980,2490
And the interesting aspect actually,

1327
00:44:14,210 --> 00:44:15,710
0,360 360,630 630,690 690,780 780,1500
um, one of the cool

1328
00:44:15,740 --> 00:44:18,140
0,450 450,840 840,1590 1860,2160 2160,2400
design features with new file

1329
00:44:18,140 --> 00:44:20,380
0,360 360,720 720,930 930,1710
systems actually does directory.

1330
00:44:20,380 --> 00:44:22,380
0,210 210,840 840,930 930,1440
Is basically the file.

1331
00:44:22,380 --> 00:44:23,490
0,390 390,480 480,870 870,990 990,1110
Except the file with some

1332
00:44:23,490 --> 00:44:24,620
0,630
structure.

1333
00:44:28,440 --> 00:44:30,180
0,300 300,510 510,750 750,1020 1020,1740
That the file system understands.

1334
00:44:30,830 --> 00:44:32,300
0,270 270,540 540,780 780,1050 1050,1470
In fact, in xc six

1335
00:44:32,300 --> 00:44:33,530
0,120 120,240 240,480 480,870 870,1230
you know the structure is

1336
00:44:33,860 --> 00:44:37,400
0,840 840,1440 2370,3000
extremely simple, every.

1337
00:44:37,910 --> 00:44:39,320
0,210 210,540 540,900 900,990 990,1410
The director consists of directory

1338
00:44:39,320 --> 00:44:40,420
0,600
entries.

1339
00:44:40,690 --> 00:44:42,680
0,330 330,630 630,1260
And every entry.

1340
00:44:42,850 --> 00:44:46,180
0,420 420,1080 1200,1830 1830,2430 2640,3330
Has affixed a format, namely,

1341
00:44:46,180 --> 00:44:47,590
0,120 120,450 450,630 630,810 810,1410
it contains an unknown number.

1342
00:44:48,690 --> 00:44:50,880
0,450 450,870 900,1410 1440,1620 1620,2190
In the first two bytes.

1343
00:44:51,860 --> 00:44:54,650
0,570 570,810 810,1380 1380,1860 1890,2790
And it contains a filename.

1344
00:44:56,530 --> 00:44:58,720
0,330 330,450 450,1200 1290,1740 1740,2190
In the remaining fourteen bytes

1345
00:44:58,720 --> 00:44:59,620
0,180 180,300 300,390 390,690 690,900
and so the total thing

1346
00:44:59,620 --> 00:45:01,040
0,90 90,450 450,900
is sixteen bytes.

1347
00:45:01,860 --> 00:45:03,080
0,690
HMM.

1348
00:45:03,280 --> 00:45:04,420
0,570
And.

1349
00:45:05,170 --> 00:45:07,240
0,300 300,420 420,630 630,1410 1500,2070
This is enough information basically

1350
00:45:07,240 --> 00:45:09,550
0,900 930,1620 1650,1800 1800,2010 2130,2310
for, um, you know we

1351
00:45:09,550 --> 00:45:11,020
0,270 270,600 600,840 840,1020 1020,1470
actually implement path name lookup.

1352
00:45:18,070 --> 00:45:19,060
0,180 180,270 270,600 600,810 810,990
So, for example just to

1353
00:45:19,060 --> 00:45:20,080
0,180 180,300 300,660 660,840 840,1020
make it clear let's say

1354
00:45:20,080 --> 00:45:21,130
0,150 150,330 330,450 450,810 810,1050
we want to look up

1355
00:45:21,130 --> 00:45:23,220
0,630 660,1020 1020,1560
the path name.

1356
00:45:23,250 --> 00:45:26,280
0,480 480,1320 1410,1920 1920,2520
Um, why, um acts.

1357
00:45:26,470 --> 00:45:27,430
0,240 240,420 420,570 570,720 720,960
Um, how we go about

1358
00:45:27,430 --> 00:45:28,520
0,210 210,540
doing that.

1359
00:45:29,750 --> 00:45:30,770
0,180 180,270 270,840 840,930 930,1020
To the world you know

1360
00:45:30,770 --> 00:45:33,320
0,240 240,480 480,630 630,1650 2010,2550
this path name explain a

1361
00:45:33,320 --> 00:45:34,430
0,480 480,750 750,870 870,1020 1020,1110
indicates that we have to

1362
00:45:34,430 --> 00:45:35,840
0,390 390,510 510,600 600,1020 1020,1410
start at the Rudy note.

1363
00:45:39,990 --> 00:45:40,680
0,210 210,270 270,480 480,600 600,690
And it turns out that

1364
00:45:40,680 --> 00:45:42,060
0,210 210,390 390,570 570,930 930,1380
through guy then basically has

1365
00:45:42,060 --> 00:45:43,230
0,120 120,600 600,870 870,930 930,1170
a fixed gears are fixed

1366
00:45:43,230 --> 00:45:44,880
0,90 90,270 270,720 750,1200 1200,1650
I note number route number

1367
00:45:44,880 --> 00:45:46,200
0,210 210,300 300,510 510,1020 1050,1320
has a pretty agreed fixed

1368
00:45:46,200 --> 00:45:47,550
0,570 570,960 960,1080 1080,1170 1170,1350
a number and in fact

1369
00:45:47,550 --> 00:45:48,780
0,150 150,480 480,690 690,900 900,1230
in acts six that number

1370
00:45:48,780 --> 00:45:49,780
0,90 90,480
is one.

1371
00:45:50,520 --> 00:45:51,600
0,150 150,270 270,450 450,570 570,1080
So how can we find

1372
00:45:51,630 --> 00:45:52,980
0,240 240,510 510,600 600,810 810,1350
the rude I note number.

1373
00:45:56,930 --> 00:45:57,860
0,210 210,450 450,570 570,810 810,930
Now we go back to

1374
00:45:57,860 --> 00:45:59,750
0,270 270,630 630,1050 1050,1500 1590,1890
our earlier picture right, yeah

1375
00:45:59,750 --> 00:46:01,040
0,270 270,510 510,930 960,1080 1080,1290
it's number one you know

1376
00:46:01,040 --> 00:46:02,150
0,120 120,510 510,840 900,990 990,1110
we know that you know

1377
00:46:02,150 --> 00:46:03,260
0,150 150,330 330,720 720,810 810,1110
I know start at block

1378
00:46:03,260 --> 00:46:04,580
0,570 570,750 750,870 870,1110 1110,1320
32, so it must be

1379
00:46:04,580 --> 00:46:06,110
0,300 300,570 570,1170 1170,1350 1350,1530
thirty block 32 and so

1380
00:46:06,110 --> 00:46:07,670
0,150 150,360 480,840 840,1380 1380,1560
it's the by sixteen to

1381
00:46:07,670 --> 00:46:10,010
0,810 1080,1380 1380,2040 2040,2160 2160,2340
whatever by 64 to one

1382
00:46:10,010 --> 00:46:11,140
0,300 300,660
twenty eight.

1383
00:46:11,140 --> 00:46:12,610
0,180 180,480 480,780 780,1290 1320,1470
In that first block that

1384
00:46:12,610 --> 00:46:14,120
0,540 540,930
contains the.

1385
00:46:14,120 --> 00:46:15,620
0,660 660,1080 1080,1200 1200,1350 1350,1500
Route number and so the

1386
00:46:15,620 --> 00:46:16,940
0,420 420,570 570,720 720,1170 1200,1320
falsehood can just read the

1387
00:46:16,940 --> 00:46:18,260
0,330 330,510 510,870
root note number.

1388
00:46:18,760 --> 00:46:19,920
0,630
Okay.

1389
00:46:21,060 --> 00:46:23,190
0,180 180,720 1110,1530 1530,1740 1740,2130
And then basically way pathway

1390
00:46:23,190 --> 00:46:24,720
0,450 450,570 570,900 900,1260 1260,1530
hookups and works, it just

1391
00:46:24,720 --> 00:46:26,880
0,630 900,1020 1020,1740
gets the blocks.

1392
00:46:30,890 --> 00:46:32,930
0,960 990,1110 1110,1260 1260,1380 1380,2040
Therefore, you know the name.

1393
00:46:34,660 --> 00:46:35,780
0,540
Wot.

1394
00:46:37,040 --> 00:46:38,000
0,240 240,390 390,540 540,750 750,960
Um, so the file system,

1395
00:46:38,000 --> 00:46:39,680
0,360 360,480 480,1020 1020,1260 1260,1680
basically go through reach the

1396
00:46:39,710 --> 00:46:42,710
0,630 660,870 870,1950 2340,2460 2460,3000
blocks of the I note

1397
00:46:43,160 --> 00:46:45,320
0,690 720,990 990,1050 1050,1710 1920,2160
file an a one a

1398
00:46:45,320 --> 00:46:46,730
0,390 390,540 540,990 990,1200 1200,1410
one by one and just

1399
00:46:46,730 --> 00:46:47,900
0,330 330,570 570,840 840,930 930,1170
looks going forward the date

1400
00:46:47,900 --> 00:46:49,670
0,120 120,330 330,840 1110,1320 1320,1770
of those blocks a whether

1401
00:46:49,670 --> 00:46:51,680
0,240 240,660 660,1050 1050,1590
the string y peers.

1402
00:46:51,900 --> 00:46:53,130
0,180 180,480 480,660 660,780 780,1230
And how can it find

1403
00:46:53,160 --> 00:46:54,240
0,240 240,330 330,720 720,840 840,1080
all the blocks of the

1404
00:46:54,240 --> 00:46:55,410
0,120 120,240 240,600 600,900 900,1170
I know one well, just

1405
00:46:55,410 --> 00:46:57,060
0,240 240,360 360,750 840,1230 1230,1650
look at the reach the

1406
00:46:57,090 --> 00:46:58,950
0,510 510,930 930,1050 1050,1350 1350,1860
bn zero the first block

1407
00:46:59,370 --> 00:47:00,870
0,120 120,210 210,510 510,840 840,1500
you know sees if a

1408
00:47:00,870 --> 00:47:02,190
0,420 420,510 510,930 930,1020 1020,1320
axes in that you know

1409
00:47:02,190 --> 00:47:03,300
0,240 240,570 570,840 840,1020 1020,1110
it's not will read the

1410
00:47:03,300 --> 00:47:05,580
0,300 300,720 720,1050 1050,1650 1680,2280
second block etc etc until

1411
00:47:05,580 --> 00:47:06,960
0,390 390,480 480,630 630,960 960,1380
hopefully at some point either

1412
00:47:06,960 --> 00:47:08,100
0,120 120,420 420,630 630,900 900,1140
it finds it doesn't find

1413
00:47:08,100 --> 00:47:08,720
0,210
it.

1414
00:47:10,140 --> 00:47:11,490
0,450 450,570 570,660 660,1020 1020,1350
And if it finds it's

1415
00:47:11,490 --> 00:47:13,110
0,120 120,390 390,810 810,1140 1140,1620
a let's find file acts.

1416
00:47:13,950 --> 00:47:15,870
0,450 480,690 690,1440 1470,1800 1800,1920
In the directory was going

1417
00:47:15,870 --> 00:47:17,010
0,60 60,240 240,420 420,750 750,1140
to have so man number

1418
00:47:17,010 --> 00:47:18,980
0,240 390,1380
say 251.

1419
00:47:19,010 --> 00:47:19,700
0,150 150,270 270,360 360,480 480,690
And then we can just

1420
00:47:19,700 --> 00:47:20,930
0,330 330,450 450,810 840,1140 1140,1230
proceed from there right we

1421
00:47:20,930 --> 00:47:21,950
0,210 210,360 360,480 480,630 630,1020
can say it's like well

1422
00:47:21,980 --> 00:47:23,270
0,330 330,480 480,780 780,1200 1200,1290
okay, well now reach you

1423
00:47:23,270 --> 00:47:25,460
0,120 120,420 420,960 1350,1560 1560,2190
know block number you read.

1424
00:47:27,110 --> 00:47:28,580
0,270 270,930
I note.

1425
00:47:29,110 --> 00:47:30,840
0,210 210,510 510,1140
Two fifty one.

1426
00:47:31,150 --> 00:47:33,400
0,360 360,870 870,1080 1080,1770
And skin, its blocks.

1427
00:47:36,520 --> 00:47:37,820
0,660
Four.

1428
00:47:38,130 --> 00:47:39,200
0,570
Bye.

1429
00:47:39,230 --> 00:47:40,160
0,240 240,510 510,690 690,840 840,930
Okay I just did my

1430
00:47:40,160 --> 00:47:41,900
0,420 420,780 780,930 930,1080 1080,1740
example wrong, this was why.

1431
00:47:42,880 --> 00:47:43,930
0,300 300,420 420,540 540,720 720,1050
And it's going to block

1432
00:47:43,930 --> 00:47:45,200
0,240 240,750
for x..

1433
00:47:47,080 --> 00:47:47,890
0,330 330,450 450,600 600,720 720,810
And Jim was going to

1434
00:47:47,890 --> 00:47:48,670
0,210 210,420 420,510 510,600 600,780
find us, you know, so

1435
00:47:48,670 --> 00:47:50,140
0,150 150,540 540,960 960,1140 1140,1470
my number again, we'll return

1436
00:47:50,140 --> 00:47:51,100
0,300 300,480 480,570 570,900 900,960
that as a result of

1437
00:47:51,100 --> 00:47:52,520
0,90 90,360 360,540 540,930
the path name lookup.

1438
00:47:55,540 --> 00:47:57,220
0,210 210,570 570,780 780,1110
Any questions about this.

1439
00:48:05,900 --> 00:48:06,740
0,120 120,240 240,450 450,660 660,840
Would you say you say

1440
00:48:06,740 --> 00:48:09,980
0,570 600,2160 2670,2910 2910,3090 3090,3240
this yeah, so this is

1441
00:48:09,980 --> 00:48:12,290
0,330 360,930 930,1170 1170,1320 1320,2310
the layout of the directory

1442
00:48:12,290 --> 00:48:14,270
0,540 570,780 780,1380 1620,1890 1890,1980
in the disc, but is

1443
00:48:14,270 --> 00:48:16,130
0,210 210,540 540,840 840,1500 1560,1860
there some bits somewhere, um

1444
00:48:16,130 --> 00:48:17,570
0,90 90,180 180,660 660,1230 1230,1440
in the metadata blocks that

1445
00:48:17,570 --> 00:48:19,430
0,600 600,1110 1110,1200 1200,1530 1530,1860
indicates whether the current thing

1446
00:48:19,430 --> 00:48:20,360
0,180 180,270 270,720 720,840 840,930
is a directory or a

1447
00:48:20,360 --> 00:48:22,520
0,450 900,1410 1410,1590 1590,1950 1950,2160
file, yeah it's actually I

1448
00:48:22,520 --> 00:48:23,990
0,450 720,960 960,1080 1080,1380 1380,1470
note so the type of

1449
00:48:23,990 --> 00:48:25,120
0,150 150,270 270,750
the I note.

1450
00:48:25,330 --> 00:48:26,530
0,360 360,660 660,690 690,1110 1110,1200
Says what's a directory or

1451
00:48:26,530 --> 00:48:27,490
0,390 390,540 540,660 660,750 750,960
file so if you do

1452
00:48:27,490 --> 00:48:30,310
0,210 210,420 420,1110 1530,2400 2400,2820
look up on a and

1453
00:48:30,310 --> 00:48:31,300
0,150 150,330 330,480 480,690 690,990
I know that actually happens

1454
00:48:31,300 --> 00:48:32,410
0,60 60,240 240,660 660,870 870,1110
to be filed then actually

1455
00:48:32,410 --> 00:48:33,370
0,90 90,300 300,570 570,690 690,960
the file system will return

1456
00:48:33,370 --> 00:48:34,340
0,90 90,450
an error.

1457
00:48:37,260 --> 00:48:39,700
0,270 270,750 1080,1590
I see, thanks.

1458
00:48:40,890 --> 00:48:42,000
0,660
Okay.

1459
00:48:44,830 --> 00:48:46,080
0,690
I'm.

1460
00:48:46,080 --> 00:48:48,630
0,960 1260,1650 1650,1860 1860,2460 2460,2550
Now, clearly this structure is

1461
00:48:48,630 --> 00:48:51,090
0,270 300,900 900,1260 1260,1860 1950,2460
not a particular efficient, um,

1462
00:48:51,090 --> 00:48:51,960
0,90 90,210 210,360 360,570 570,870
you know to actually find

1463
00:48:51,960 --> 00:48:54,090
0,720 750,1320 1320,1890 1890,2010 2010,2130
a directory name, you have

1464
00:48:54,090 --> 00:48:56,250
0,120 120,660 780,1530 1530,1860 1860,2160
to scan, um, and so

1465
00:48:56,250 --> 00:48:57,630
0,210 210,420 420,690 690,1170 1170,1380
a real file system, you

1466
00:48:57,630 --> 00:49:00,210
0,720 720,1260 1440,1770 1770,1980 1980,2580
probably would use more sophisticated

1467
00:49:00,210 --> 00:49:01,780
0,510 510,1140
dangerous structures.

1468
00:49:01,780 --> 00:49:03,970
0,210 210,1020 1020,1290 1290,1800 1800,2190
To actually, um, make zis

1469
00:49:03,970 --> 00:49:05,830
0,300 300,450 450,990 990,1560 1560,1860
lookups much faster than actually

1470
00:49:05,830 --> 00:49:07,000
0,240 240,690
six does.

1471
00:49:08,970 --> 00:49:10,050
0,270 270,510 510,810 810,930 930,1080
Um, but again it's sort

1472
00:49:10,050 --> 00:49:11,010
0,90 90,570 570,660 660,810 810,960
of almost you know a

1473
00:49:11,010 --> 00:49:12,570
0,330 330,930 930,1230 1230,1320 1320,1560
more designer question of data

1474
00:49:12,570 --> 00:49:13,740
0,420 420,690 690,780 780,840 840,1170
structures that is a question

1475
00:49:13,740 --> 00:49:15,460
0,90 90,420 420,750 750,1200
of operating system design.

1476
00:49:17,230 --> 00:49:18,160
0,270 270,360 360,510 510,690 690,930
And so you could plug

1477
00:49:18,160 --> 00:49:20,980
0,90 90,360 360,1050 1170,2310 2310,2820
in your favorite data structure

1478
00:49:20,980 --> 00:49:22,000
0,270 270,450 450,570 570,780 780,1020
and turn it into an

1479
00:49:22,000 --> 00:49:23,410
0,180 180,450 450,930 930,1140 1140,1410
this data structure, and then

1480
00:49:23,410 --> 00:49:24,160
0,330 330,420 420,540 540,600 600,750
hopefully you're going to get

1481
00:49:24,160 --> 00:49:25,420
0,180 180,810
better performance.

1482
00:49:26,450 --> 00:49:28,250
0,330 330,450 450,1170 1170,1500 1530,1800
But for simplicity and ease

1483
00:49:28,250 --> 00:49:30,620
0,810 840,1380 1380,1980 1980,2130 2130,2370
explanation, no executions is very

1484
00:49:30,620 --> 00:49:31,860
0,240 240,660
simple structure.

1485
00:49:37,530 --> 00:49:38,580
0,600
Okay.

1486
00:49:40,080 --> 00:49:41,010
0,180 180,270 270,420 420,660 660,930
Okay, so what I wanna

1487
00:49:41,010 --> 00:49:42,090
0,90 90,390 390,570 570,720 720,1080
do next is going to

1488
00:49:42,360 --> 00:49:43,140
0,180 180,210 210,360 360,480 480,780
get a little bit more

1489
00:49:43,140 --> 00:49:44,340
0,420 420,720 720,810 810,1080 1080,1200
concrete feel for this and

1490
00:49:44,340 --> 00:49:45,480
0,180 180,270 270,600 600,930 930,1140
just to see actually how

1491
00:49:45,480 --> 00:49:46,770
0,240 240,450 450,630 630,720 720,1290
things work out in practice

1492
00:49:46,980 --> 00:49:48,690
0,450 450,630 630,930 930,1380 1410,1710
a in X six and

1493
00:49:48,690 --> 00:49:50,070
0,240 240,390 390,510 510,1140 1200,1380
this will be helpful, you

1494
00:49:50,070 --> 00:49:52,290
0,180 180,390 390,720 750,1350 1380,2220
know for the next lab.

1495
00:49:52,910 --> 00:49:54,800
0,690 930,1260 1260,1410 1410,1650 1650,1890
I'm going to look at

1496
00:49:55,130 --> 00:49:56,960
0,330 330,510 510,630 630,1110 1170,1830
X six four second a

1497
00:49:56,960 --> 00:49:58,620
0,1140
usual.

1498
00:49:59,090 --> 00:50:00,540
0,960
Scream.

1499
00:50:00,540 --> 00:50:01,640
0,570
AW.

1500
00:50:02,520 --> 00:50:03,980
0,420 420,930
Um, so.

1501
00:50:04,010 --> 00:50:04,910
0,150 150,330 330,600 600,720 720,900
The first thing I'm gonna

1502
00:50:04,910 --> 00:50:06,080
0,270 270,510 510,690 690,1080 1080,1170
boot actually six again it's

1503
00:50:06,080 --> 00:50:08,570
0,690 810,1410 1800,2220 2220,2310 2310,2490
always a and I did

1504
00:50:08,570 --> 00:50:10,670
0,150 150,840 1080,1650 1650,1980 1980,2100
make clean, um, and as

1505
00:50:10,670 --> 00:50:12,560
0,120 120,600 600,1320 1320,1530 1530,1890
you probably remember or many

1506
00:50:12,560 --> 00:50:13,340
0,90 90,240 240,390 390,570 570,780
of you have run into

1507
00:50:13,340 --> 00:50:14,180
0,360 360,450 450,540 540,690 690,840
this, you know you want

1508
00:50:14,180 --> 00:50:15,830
0,240 240,420 420,720 720,1200 1410,1650
actually new file system, you

1509
00:50:15,830 --> 00:50:16,820
0,90 90,210 210,420 420,600 600,990
have to run, make clean

1510
00:50:16,820 --> 00:50:18,620
0,360 360,900 930,1110 1110,1350 1350,1800
because then a make career

1511
00:50:18,620 --> 00:50:19,610
0,150 150,450 450,660 660,750 750,990
will build you a new

1512
00:50:19,610 --> 00:50:20,960
0,300 300,570 570,930
clean file system.

1513
00:50:21,540 --> 00:50:23,310
0,690 780,960 960,1140 1140,1230 1230,1770
Um, so here we go.

1514
00:50:25,640 --> 00:50:27,320
0,420 420,600 600,810 810,1380 1380,1680
And we'll see that xc

1515
00:50:27,320 --> 00:50:30,410
0,480 480,1080 1440,2070 2070,2640 2670,3090
six a has started but

1516
00:50:30,410 --> 00:50:30,920
0,60 60,210 210,270 270,420 420,510
the thing I want to

1517
00:50:30,920 --> 00:50:33,200
0,210 210,390 390,840 840,1530 1770,2280
point out first is a

1518
00:50:33,200 --> 00:50:35,480
0,1050 1080,1590 1590,1800 1800,2070 2070,2280
here here you'll see there's

1519
00:50:35,480 --> 00:50:38,450
0,30 30,750 1170,1950 1950,2460 2460,2970
a call to a basically

1520
00:50:38,450 --> 00:50:39,500
0,210 210,270 270,540 540,900 900,1050
make a file system, so

1521
00:50:39,500 --> 00:50:42,290
0,180 180,480 480,1560 1560,2220 2250,2790
this makes a fresh disk

1522
00:50:42,290 --> 00:50:44,180
0,570 690,1350 1350,1530 1530,1620 1620,1890
image, um, in a disk

1523
00:50:44,180 --> 00:50:45,860
0,330 330,1170 1170,1260 1260,1590 1590,1680
image contains you know a

1524
00:50:45,860 --> 00:50:46,880
0,270 270,330 330,750 750,870 870,1020
bunch of files that we

1525
00:50:46,880 --> 00:50:48,320
0,480 480,600 600,660 660,990 990,1440
specify on the command line

1526
00:50:49,100 --> 00:50:50,180
0,270 270,450 450,540 540,780 780,1080
and make it fast basically

1527
00:50:50,180 --> 00:50:51,620
0,270 270,420 420,780 780,1080 1080,1440
built your new file system

1528
00:50:51,620 --> 00:50:53,240
0,150 150,690 690,1050 1050,1530 1530,1620
that contains those files as

1529
00:50:53,240 --> 00:50:54,170
0,90 90,510 510,600 600,690 690,930
the contents of the file

1530
00:50:54,170 --> 00:50:54,780
0,330
system.

1531
00:50:55,510 --> 00:50:56,500
0,420 420,540 540,630 630,870 870,990
And you can see you

1532
00:50:56,500 --> 00:50:57,700
0,210 210,480 480,750 750,1020 1020,1200
know the actually sexual which

1533
00:50:57,700 --> 00:50:59,320
0,270 270,600 630,1050 1050,1530 1530,1620
brings out a bit of

1534
00:50:59,320 --> 00:51:01,000
0,570 570,840 840,900 900,1140 1140,1680
information about the file system

1535
00:51:01,210 --> 00:51:02,320
0,270 270,390 390,720 720,960 960,1110
so it basically says there

1536
00:51:02,320 --> 00:51:03,850
0,120 120,660 660,900 900,1440 1440,1530
are 46 mega blocks you

1537
00:51:03,850 --> 00:51:04,690
0,90 90,240 240,570 570,630 630,840
know that includes the boot

1538
00:51:04,690 --> 00:51:06,130
0,330 330,390 390,690 690,1350 1350,1440
block the super block the

1539
00:51:06,130 --> 00:51:08,530
0,210 210,1050 1080,1710 1710,1890 1890,2400
free blocks 39 note blocks

1540
00:51:08,620 --> 00:51:10,540
0,360 360,540 540,750 750,1260 1650,1920
one big map block and

1541
00:51:10,540 --> 00:51:12,310
0,180 180,510 510,570 810,990 990,1770
then followed by {954 -}

1542
00:51:12,340 --> 00:51:13,900
0,450 450,930 960,1110 1110,1470 1470,1560
data blocks so it's a

1543
00:51:13,900 --> 00:51:15,370
0,420 420,690 690,1020 1020,1140 1140,1470
tiny file system in total

1544
00:51:15,370 --> 00:51:16,840
0,90 90,330 330,630 630,1140
of only thousand blocks.

1545
00:51:17,020 --> 00:51:17,590
0,120 120,270 270,330 330,390 390,570
And one of the things

1546
00:51:17,590 --> 00:51:19,270
0,120 120,210 210,360 360,870 1320,1680
you will do in a

1547
00:51:19,420 --> 00:51:20,860
0,480 690,840 840,960 960,1230 1230,1440
lot more to support bigger

1548
00:51:20,860 --> 00:51:21,910
0,330 330,450 450,660 660,840 840,1050
files, you also will have

1549
00:51:21,910 --> 00:51:23,830
0,90 90,330 330,360 360,600 600,1920
to use a much bigger

1550
00:51:23,860 --> 00:51:24,960
0,270 270,600
file system.

1551
00:51:25,830 --> 00:51:27,020
0,660
I'm.

1552
00:51:27,050 --> 00:51:29,980
0,420 420,540 540,1410 1500,2370
Then I modified a.

1553
00:51:29,980 --> 00:51:32,050
0,300 300,540 540,1020 1020,1290 1290,2070
Xc six slightly too visibly

1554
00:51:32,110 --> 00:51:34,030
0,690 690,840 840,1110 1110,1500 1500,1920
write or print something whenever

1555
00:51:34,030 --> 00:51:35,080
0,210 210,450 450,570 570,600 600,1050
we write through a particular

1556
00:51:35,080 --> 00:51:36,200
0,600
block.

1557
00:51:36,290 --> 00:51:37,520
0,630 630,930 930,1050 1050,1200 1200,1230
Eso gene, we see a

1558
00:51:37,520 --> 00:51:38,990
0,450 450,690 690,960 960,1350 1350,1470
couple file system called we

1559
00:51:38,990 --> 00:51:40,700
0,570 810,1110 1110,1320 1320,1500 1500,1710
had actually six winner star

1560
00:51:40,700 --> 00:51:41,870
0,210 210,390 390,450 450,660 660,1170
job does a bunch of

1561
00:51:41,870 --> 00:51:43,580
0,210 210,420 420,900 1080,1290 1290,1710
file system calls and apparently

1562
00:51:43,580 --> 00:51:45,380
0,510 540,990 990,1200 1200,1560 1560,1800
wrote block thirty three forty

1563
00:51:45,380 --> 00:51:46,640
0,300 300,630 630,720 720,810 810,1260
three forty eight to 32.

1564
00:51:47,430 --> 00:51:49,920
0,810 870,1470 1620,1890 1890,2070 2070,2490
Um, and we're gonna run

1565
00:51:49,920 --> 00:51:51,420
0,510 510,1050 1050,1170 1170,1260 1260,1500
basically command and we're just

1566
00:51:51,420 --> 00:51:53,880
0,150 150,750 750,1380 1380,1860 1860,2460
gonna see what block numbers

1567
00:51:53,940 --> 00:51:56,700
0,840 840,1110 1110,1650 1950,2430 2460,2760
are being written a bind

1568
00:51:56,700 --> 00:51:59,730
0,150 150,750 1080,1500 1500,1500 2640,3030
up command a or calls

1569
00:51:59,730 --> 00:52:00,600
0,210 210,540 540,660 660,780 780,870
without command and we've been

1570
00:52:00,600 --> 00:52:02,490
0,210 210,270 270,990 1050,1380 1380,1890
trying to understand where do

1571
00:52:02,520 --> 00:52:03,510
0,210 210,300 300,510 510,780 780,990
where do those rights make

1572
00:52:03,510 --> 00:52:05,730
0,450 450,720 720,960 990,1500 1500,2220
sense when we expect to

1573
00:52:05,760 --> 00:52:06,630
0,240 240,330 330,420 420,570 570,870
see if they were actually,

1574
00:52:06,630 --> 00:52:07,580
0,390
um.

1575
00:52:08,730 --> 00:52:10,020
0,150 150,540 540,840 840,960 960,1290
To see what is happening

1576
00:52:10,020 --> 00:52:11,220
0,120 120,300 300,390 390,690 690,1200
is what we actually expect.

1577
00:52:12,110 --> 00:52:12,980
0,210 210,420 420,480 480,810 810,870
Um, so I'm going to

1578
00:52:12,980 --> 00:52:15,110
0,240 240,300 300,930 1320,1980 1980,2130
create a file, um, um,

1579
00:52:15,110 --> 00:52:16,640
0,210 210,930
ko Hai.

1580
00:52:17,480 --> 00:52:18,290
0,330 330,450 450,570 570,780 780,810
Yeah I'm gonna create a

1581
00:52:18,290 --> 00:52:19,520
0,300 300,720
file acts.

1582
00:52:21,310 --> 00:52:23,320
0,630 660,900 900,990 990,1500
And let me actually.

1583
00:52:26,200 --> 00:52:27,760
0,450 450,630 630,900 900,1170 1170,1560
Copy that item left over,

1584
00:52:27,760 --> 00:52:28,900
0,150 150,240 240,540
so I can.

1585
00:52:31,820 --> 00:52:33,680
0,1050 1050,1440 1470,1680 1680,1800 1800,1860
Delineate this I'm going to

1586
00:52:33,680 --> 00:52:35,030
0,540 540,750 750,810 810,1020 1020,1350
delineate in a couple places

1587
00:52:35,030 --> 00:52:37,490
0,210 210,510 510,870 870,1530 1560,2460
just for health for understanding,

1588
00:52:37,790 --> 00:52:39,540
0,1110
um.

1589
00:52:39,850 --> 00:52:42,220
0,810 810,1170 1170,1860
Probably right here.

1590
00:52:42,560 --> 00:52:43,960
0,810
HMM.

1591
00:52:44,990 --> 00:52:47,000
0,450 450,870 870,1440
Then probably here.

1592
00:52:48,680 --> 00:52:49,820
0,750
Okay.

1593
00:52:50,240 --> 00:52:51,320
0,270 270,420 420,810 810,870 870,1080
Um, it's basically it turns

1594
00:52:51,320 --> 00:52:53,000
0,120 120,360 360,510 510,960 1200,1680
out there's gonna be a

1595
00:52:53,000 --> 00:52:54,710
0,270 270,990 990,1260 1260,1560 1560,1710
couple phases here, one is

1596
00:52:54,710 --> 00:52:55,970
0,60 60,390 390,510 510,750 750,1260
the phase to actually create

1597
00:52:55,970 --> 00:52:57,200
0,90 90,660
the file.

1598
00:52:57,700 --> 00:52:59,020
0,660
HMMM.

1599
00:52:59,970 --> 00:53:02,940
0,690 720,1470 1650,2040 2040,2730 2850,2970
Then, um, there's write the

1600
00:53:02,940 --> 00:53:05,300
0,480 480,900 900,1200 1200,1740
file namely right hi.

1601
00:53:06,330 --> 00:53:08,640
0,600 630,750 750,1410 1470,1980 1980,2310
File and then one more

1602
00:53:08,640 --> 00:53:09,720
0,540
right.

1603
00:53:10,260 --> 00:53:11,940
0,570 570,870 870,960 960,1170 1170,1680
Alright, actually the new line.

1604
00:53:14,860 --> 00:53:16,180
0,90 90,300 300,390 390,810
I took the final.

1605
00:53:18,540 --> 00:53:19,380
0,150 150,270 270,450 450,540 540,840
So you look at the

1606
00:53:19,380 --> 00:53:21,360
0,780 810,1410 1410,1560 1560,1680 1680,1980
echo program that is basically

1607
00:53:21,360 --> 00:53:23,360
0,150 150,240 240,690
what it does.

1608
00:53:23,560 --> 00:53:24,740
0,180 180,240 240,690
Pick it up.

1609
00:53:28,460 --> 00:53:30,440
0,120 120,450 450,570 570,1260
He stood for completeness.

1610
00:53:30,590 --> 00:53:32,320
0,240 240,360 360,1230
Right to echo.

1611
00:53:34,020 --> 00:53:35,730
0,210 210,270 270,360 360,1140 1140,1710
Look at his arguments {write's

1612
00:53:35,730 --> 00:53:38,850
0,30 30,30 1020,1770 2190,2910 2940,3120
-} a arguments to follow

1613
00:53:38,850 --> 00:53:39,900
0,60 60,300 300,810 810,900 900,1050
the script one and then

1614
00:53:39,900 --> 00:53:40,440
0,90 90,210 210,390 390,450 450,540
at the end of the

1615
00:53:40,440 --> 00:53:42,020
0,540
Pence.

1616
00:53:42,450 --> 00:53:43,620
0,270 270,600
New line.

1617
00:53:43,620 --> 00:53:44,800
0,690
Okay.

1618
00:53:44,890 --> 00:53:46,360
0,360 360,480 480,690 690,1080 1080,1470
Um, so, these are basically

1619
00:53:46,360 --> 00:53:48,250
0,150 150,960 990,1260 1260,1500 1500,1890
the sequences of disk writes

1620
00:53:48,250 --> 00:53:49,780
0,120 120,600 600,690 690,870 870,1530
get involved in each operation.

1621
00:53:50,640 --> 00:53:52,530
0,600 900,1410 1410,1590 1590,1830 1830,1890
And let's go look at

1622
00:53:52,530 --> 00:53:53,430
0,150 150,390 390,510 510,780 780,900
them one by one and

1623
00:53:53,430 --> 00:53:54,570
0,270 270,330 330,720 720,870 870,1140
start to understand what's going

1624
00:53:54,570 --> 00:53:55,460
0,300
on.

1625
00:53:55,460 --> 00:53:57,500
0,630 630,750 750,990 1140,1590 1590,2040
I'm going to basically maybe

1626
00:53:57,500 --> 00:53:59,240
0,450 480,930 930,1110 1110,1260 1260,1740
the easiest thing to do

1627
00:53:59,240 --> 00:54:00,740
0,420 420,750 750,990 1020,1320 1320,1500
actually used to move this

1628
00:54:00,740 --> 00:54:01,560
0,540
over.

1629
00:54:04,420 --> 00:54:06,060
0,1140
MHM.

1630
00:54:07,880 --> 00:54:09,300
0,330 330,840
Okay so.

1631
00:54:09,530 --> 00:54:12,800
0,840 1080,1290 1290,2040 2100,2640 2820,3270
Um, it's convenient to understand

1632
00:54:12,800 --> 00:54:13,790
0,120 120,330 330,690 690,930 930,990
what's going on instead of

1633
00:54:13,790 --> 00:54:14,630
0,270 270,330 330,390 390,750 750,840
looking at the code, we're

1634
00:54:14,630 --> 00:54:15,380
0,210 210,300 300,480 480,630 630,750
going to just look at

1635
00:54:15,380 --> 00:54:18,080
0,390 510,1020 1020,1680 1740,2400 2430,2700
this disk layout and trying

1636
00:54:18,080 --> 00:54:19,670
0,60 60,390 390,750 1020,1230 1230,1590
to figure out a what

1637
00:54:19,670 --> 00:54:20,960
0,270 270,420 420,750 750,1170 1170,1290
might be going on in

1638
00:54:20,960 --> 00:54:22,780
0,150 150,600 600,1380
these particular operations.

1639
00:54:25,950 --> 00:54:27,020
0,630
MHM.

1640
00:54:39,280 --> 00:54:40,520
0,360 360,630
Okay good.

1641
00:54:40,520 --> 00:54:41,780
0,720
I'm.

1642
00:54:42,310 --> 00:54:43,870
0,210 210,360 360,420 420,540 540,1560
So what do we think,

1643
00:54:44,110 --> 00:54:46,800
0,870 1290,1560 1560,2160
um, this writers.

1644
00:54:53,210 --> 00:54:54,410
0,360 360,660 660,810 810,930 930,1200
Any idea what this might

1645
00:54:54,410 --> 00:54:55,680
0,330 330,660
actually be.

1646
00:54:56,230 --> 00:54:57,340
0,240 240,600 600,690 690,1020 1020,1110
We're creating a file, so

1647
00:54:57,340 --> 00:54:58,690
0,120 120,180 180,270 270,1140 1140,1350
what do we expect file

1648
00:54:58,690 --> 00:55:00,080
0,270 270,360 360,780
system to do.

1649
00:55:00,340 --> 00:55:01,870
0,420 420,720 720,900 900,1080 1080,1530
It writes the AI nodes

1650
00:55:01,870 --> 00:55:03,000
0,570
entry.

1651
00:55:03,200 --> 00:55:04,340
0,270 270,420 420,600 600,720 720,1140
Yeah, so first thing I

1652
00:55:04,340 --> 00:55:06,140
0,270 270,510 510,990 990,1320 1320,1800
was just too, um, so

1653
00:55:06,230 --> 00:55:07,820
0,240 240,450 450,1050 1050,1290 1290,1590
okay so it's {33, -}

1654
00:55:07,820 --> 00:55:08,390
0,150 150,270 270,330 330,450 450,570
so what do we know

1655
00:55:08,390 --> 00:55:09,920
0,210 210,450 450,660 660,990
{about -} block 33.

1656
00:55:10,210 --> 00:55:10,720
0,180 180,240 240,360 360,450 450,510
If we look at the

1657
00:55:10,720 --> 00:55:12,120
0,210 210,480 480,840
disk layout picture.

1658
00:55:14,130 --> 00:55:16,020
0,240 240,1110 1110,1260 1260,1620 1620,1890
It contains a free an

1659
00:55:16,020 --> 00:55:17,020
0,480
ode.

1660
00:55:17,020 --> 00:55:18,550
0,510 510,690 690,900 900,1200 1200,1530
Yeah you know things we

1661
00:55:18,550 --> 00:55:19,330
0,120 120,270 270,330 330,480 480,780
know that I no one

1662
00:55:19,330 --> 00:55:21,640
0,210 210,270 270,780 780,1230 1560,2310
lives in 32, heck, um,

1663
00:55:21,640 --> 00:55:23,230
0,270 270,630 630,810 810,1230 1230,1590
and so we're whatever bay

1664
00:55:23,230 --> 00:55:26,470
0,600 600,1530 1830,2820 2820,3030 3030,3240
apparently a za that's being

1665
00:55:26,470 --> 00:55:27,640
0,540 540,630 630,960 960,1050 1050,1170
allocated is probably and I

1666
00:55:27,640 --> 00:55:28,510
0,150 150,300 300,510 510,600 600,870
know that lives in block

1667
00:55:28,510 --> 00:55:29,720
0,270 270,720
{33. -}

1668
00:55:29,870 --> 00:55:31,760
0,480 480,600 600,840 840,1350 1590,1890
Presumably the firth right might

1669
00:55:31,760 --> 00:55:32,960
0,180 180,300 300,960 960,1080 1080,1200
just be marking you know

1670
00:55:32,960 --> 00:55:33,980
0,180 180,330 330,480 480,720 720,1020
that this I know actually

1671
00:55:33,980 --> 00:55:34,520
0,60 60,210 210,360 360,420 420,540
is now going to be

1672
00:55:34,520 --> 00:55:35,630
0,510 570,780 780,900 900,960 960,1110
used and so I think

1673
00:55:35,630 --> 00:55:36,710
0,90 90,330 330,600 600,840 840,1080
the way actually six does

1674
00:55:36,710 --> 00:55:38,210
0,390 570,780 780,1020 1020,1170 1170,1500
this it uses the type

1675
00:55:38,210 --> 00:55:39,180
0,450
field.

1676
00:55:39,180 --> 00:55:40,320
0,330 330,660 660,780 780,960 960,1140
Um, in the I know

1677
00:55:40,320 --> 00:55:41,370
0,120 120,360 360,690 690,960 960,1050
to actually indicate where I

1678
00:55:41,370 --> 00:55:43,320
0,300 300,780 810,1290 1290,1470 1470,1950
notice free file or directory,

1679
00:55:43,350 --> 00:55:44,970
0,150 150,330 330,690 690,1140 1140,1620
so it basically changes from

1680
00:55:45,300 --> 00:55:47,940
0,750 750,1050 1050,1380 1380,1890 1890,2640
a three to file and

1681
00:55:48,270 --> 00:55:50,040
0,780 810,1140 1140,1290 1290,1380 1380,1770
a right to the desk

1682
00:55:50,040 --> 00:55:51,660
0,180 180,630 630,900 900,1110 1110,1620
to market as in use.

1683
00:55:52,960 --> 00:55:54,310
0,420 420,630 630,690 690,780 780,1350
Um, what do we think

1684
00:55:54,340 --> 00:55:56,290
0,810 810,1080 1080,1290 1290,1500 1500,1950
next right {33 -} years.

1685
00:56:02,320 --> 00:56:04,180
0,600 600,1290 1290,1410 1410,1680 1680,1860
Actually, populating the an own

1686
00:56:04,180 --> 00:56:06,240
0,420 420,750 780,1470
entry would like.

1687
00:56:06,240 --> 00:56:08,400
0,570 870,1170 1170,1650 1650,1890 1890,2160
Info, yeah exactly yeah, indeed

1688
00:56:08,400 --> 00:56:10,200
0,540 540,1080 1080,1200 1200,1620 1680,1800
populating an aim for you

1689
00:56:10,200 --> 00:56:11,850
0,240 240,390 390,600 600,1320 1320,1650
know I know probably with

1690
00:56:11,850 --> 00:56:13,380
0,450 450,870 900,1200 1200,1320 1320,1530
entries like setting the link

1691
00:56:13,380 --> 00:56:15,960
0,300 300,930 1320,2280 2280,2460 2460,2580
count one and things like

1692
00:56:15,960 --> 00:56:17,080
0,240 270,660
that, right.

1693
00:56:18,210 --> 00:56:19,760
0,960
IN.

1694
00:56:21,230 --> 00:56:22,370
0,210 210,330 330,900 900,1080 1080,1140
What is 46, what do

1695
00:56:22,370 --> 00:56:23,390
0,60 60,360 360,810 810,900 900,1020
we expect 46 to be

1696
00:56:23,390 --> 00:56:24,980
0,180 180,780 810,1050 1050,1290 1290,1590
UN 32, maybe that's there.

1697
00:56:30,300 --> 00:56:33,360
0,360 360,1170 1170,1680 1710,2220 2220,3060
Is 46, the first data,

1698
00:56:33,450 --> 00:56:35,160
0,180 180,570 570,1080 1080,1290 1290,1710
um, no actually bit mad

1699
00:56:35,190 --> 00:56:36,520
0,480 480,900
beat mad.

1700
00:56:36,640 --> 00:56:37,840
0,450 450,750 750,930 930,990 990,1200
No just it's a data

1701
00:56:37,840 --> 00:56:39,160
0,480 510,750 750,900 900,1140 1140,1320
block and you're right it's

1702
00:56:39,160 --> 00:56:40,700
0,120 120,360 360,570 570,1020
the first data block.

1703
00:56:41,260 --> 00:56:42,190
0,150 150,390 390,600 600,840 840,930
So who's data block do

1704
00:56:42,190 --> 00:56:43,520
0,60 60,270 270,360 360,750
you think is this.

1705
00:56:45,640 --> 00:56:50,860
0,390 390,840 870,1830 2160,3510 3630,5220
See a root directory entry.

1706
00:56:51,440 --> 00:56:52,730
0,420 450,690 690,840 840,930 930,1290
Yeah correct, this is this

1707
00:56:52,730 --> 00:56:54,140
0,90 90,510 510,720 720,810 810,1410
is probably used to block.

1708
00:56:54,960 --> 00:56:56,680
0,360 360,960
First lock.

1709
00:56:57,970 --> 00:57:00,600
0,720 750,1140 1140,1350 1350,1890
Off the root directory.

1710
00:57:01,040 --> 00:57:03,040
0,480 480,630 630,930 930,1320
Yeah I node one.

1711
00:57:03,070 --> 00:57:04,020
0,480
Reg.

1712
00:57:04,420 --> 00:57:06,100
0,300 300,810 810,1050 1050,1170 1170,1680
And why were we expecting

1713
00:57:06,100 --> 00:57:07,300
0,240 240,810 810,990 990,1050 1050,1200
to actually that to be

1714
00:57:07,300 --> 00:57:08,280
0,420
written.

1715
00:57:09,180 --> 00:57:13,050
0,270 270,420 420,1050 1980,3120 3120,3870
What has because because we're.

1716
00:57:13,940 --> 00:57:16,280
0,810 1080,1290 1290,1710 1710,1890 1890,2340
Um, we're creating like acts

1717
00:57:16,280 --> 00:57:17,440
0,600
in.

1718
00:57:17,620 --> 00:57:18,940
0,480 480,750 750,840 840,1020 1020,1320
We're adding a new file

1719
00:57:18,940 --> 00:57:20,020
0,210 210,300 300,510 510,750 750,1080
access to the current directory,

1720
00:57:20,020 --> 00:57:20,920
0,150 150,390 390,510 510,750 780,900
so adding it to the

1721
00:57:20,920 --> 00:57:23,320
0,300 300,930 1020,1680 1800,2220 2220,2400
file hierarchy, yeah exactly so

1722
00:57:23,320 --> 00:57:24,700
0,600 630,810 810,990 990,1200 1200,1380
we have we've done this

1723
00:57:24,700 --> 00:57:26,920
0,90 90,1590
and we.

1724
00:57:26,950 --> 00:57:29,230
0,450 480,600 600,1050 1050,1590 1620,2280
Added an entry to the

1725
00:57:29,320 --> 00:57:31,240
0,330 330,780 780,1230 1230,1530 1530,1920
root directory, namely entry X

1726
00:57:31,240 --> 00:57:32,620
0,330 330,840 840,1020 1020,1200 1200,1380
with whatever I know we

1727
00:57:32,620 --> 00:57:35,140
0,690 780,990 990,1440 1440,1890 1980,2520
allocated you know the step

1728
00:57:35,170 --> 00:57:36,560
0,150 150,420 420,870
two steps before.

1729
00:57:37,250 --> 00:57:38,500
0,120 120,240 240,360 360,720
Does that make sense.

1730
00:57:40,030 --> 00:57:40,690
0,120 120,240 240,300 300,450 450,660
So what do we think

1731
00:57:40,690 --> 00:57:41,500
0,120 120,420 420,540 540,630 630,810
is right for it to

1732
00:57:41,500 --> 00:57:42,380
0,330
us.

1733
00:57:47,190 --> 00:57:48,540
0,150 150,420 420,750 750,1080 1080,1350
To block 32 well, the

1734
00:57:48,540 --> 00:57:49,170
0,180 180,240 240,360 360,480 480,630
thing to do is go

1735
00:57:49,170 --> 00:57:49,890
0,300 300,390 390,510 510,600 600,720
back and look at the

1736
00:57:49,890 --> 00:57:51,600
0,240 240,570 570,1110
lakes layout picture.

1737
00:57:51,630 --> 00:57:53,010
0,210 210,390 390,510 510,780 780,1380
And one is block 52.

1738
00:57:55,490 --> 00:57:56,960
0,270 270,450 450,540 540,810 810,1470
I know the one probably.

1739
00:57:57,790 --> 00:57:59,800
0,480 480,1020 1140,1350 1350,1560 1560,2010
Yeah, well it will include

1740
00:57:59,800 --> 00:58:01,240
0,270 270,690 750,1200 1200,1350 1350,1440
an one includes all the

1741
00:58:01,240 --> 00:58:02,260
0,300 300,420 420,570 570,690 690,1020
other I know it's correct,

1742
00:58:02,260 --> 00:58:03,430
0,330 330,600 600,660 660,1050 1050,1170
because nine is smaller than

1743
00:58:03,430 --> 00:58:04,480
0,60 60,360 360,510 510,750 750,1050
a block, but it will

1744
00:58:04,480 --> 00:58:06,180
0,420 420,750 750,1170
include an one.

1745
00:58:06,210 --> 00:58:06,870
0,210 210,300 300,360 360,540 540,660
Why do you think it's

1746
00:58:06,870 --> 00:58:07,950
0,120 120,180 180,300 300,660 810,1080
going to be written what

1747
00:58:07,980 --> 00:58:09,330
0,300 300,480 480,570 570,1260 1260,1350
what might have changed in

1748
00:58:09,330 --> 00:58:10,680
0,120 120,270 270,540 540,690 720,1350
the I note that requires

1749
00:58:10,680 --> 00:58:11,730
0,120 120,270 270,480 480,810 810,1050
that the I'd actually written

1750
00:58:11,730 --> 00:58:12,700
0,90 90,480
to disk.

1751
00:58:13,390 --> 00:58:16,030
0,840 1020,1440 1440,1710 1710,2100 2130,2640
Sighs, yeah so change exactly

1752
00:58:16,030 --> 00:58:17,530
0,360 360,690 690,960 960,1230 1230,1500
besides change because we grew

1753
00:58:17,530 --> 00:58:19,330
0,90 90,600 600,810 810,1350 1380,1800
the directory work by sixteen

1754
00:58:19,330 --> 00:58:21,370
0,330 330,870 900,1290 1290,1620 1620,2040
bytes directly story entry X.

1755
00:58:24,220 --> 00:58:26,500
0,300 300,480 480,690 690,1350 1410,2280
Then there's one more a

1756
00:58:26,530 --> 00:58:28,900
0,270 270,390 390,600 600,1230 1500,2370
right to free food and

1757
00:58:28,900 --> 00:58:30,400
0,630 690,900 900,1080 1080,1230 1230,1500
I I'll leave that hanging

1758
00:58:30,400 --> 00:58:32,800
0,150 150,210 210,720 780,1530 1920,2400
for a second, um, basically

1759
00:58:32,800 --> 00:58:34,760
0,240 240,810 810,1440
we're updating a.

1760
00:58:34,820 --> 00:58:35,780
0,240 240,450 450,570 570,780 780,960
I know for X one

1761
00:58:35,780 --> 00:58:38,270
0,180 180,690 720,1500 1860,2100 2100,2490
more time, um, you've known

1762
00:58:38,300 --> 00:58:39,800
0,270 270,750 750,930 930,1140 1140,1500
nothing actually what's written yet,

1763
00:58:40,190 --> 00:58:41,320
0,600
um.

1764
00:58:41,540 --> 00:58:42,800
0,750
Okay.

1765
00:58:44,380 --> 00:58:45,490
0,120 120,300 300,390 390,630 630,1110
So that's the first phase,

1766
00:58:45,520 --> 00:58:46,390
0,150 150,330 330,510 510,720 720,870
so let's now look at

1767
00:58:46,390 --> 00:58:49,120
0,810 900,1500 1920,2040 2040,2520 2550,2730
the second you know so

1768
00:58:49,120 --> 00:58:50,440
0,270 270,780 780,960 960,1140 1140,1320
there's creation, now let's look

1769
00:58:50,440 --> 00:58:51,910
0,450 450,570 570,840 840,1320 1320,1470
at the second phase or

1770
00:58:51,910 --> 00:58:52,960
0,90 90,360 360,810 810,900 900,1050
the first right you know

1771
00:58:52,990 --> 00:58:54,310
0,330 330,360 360,630 630,780 780,1320
right, um hi to file

1772
00:58:54,490 --> 00:58:55,480
0,540
X.

1773
00:58:57,470 --> 00:58:58,580
0,300 300,450 450,510 510,630 630,1110
Well, what do we think

1774
00:58:58,610 --> 00:59:00,780
0,1200
45.

1775
00:59:01,910 --> 00:59:05,120
0,2250 2370,2880 2880,3000 3000,3030 3030,3210
Yeah yeah it's a big

1776
00:59:05,120 --> 00:59:06,260
0,240 240,420 420,690 690,870 870,1140
map, so remember what happened

1777
00:59:06,260 --> 00:59:07,550
0,60 60,270 270,720 720,930 930,1290
to your district, does that.

1778
00:59:08,200 --> 00:59:09,910
0,180 180,870 900,1260 1260,1620 1620,1710
File system a scan the

1779
00:59:09,910 --> 00:59:12,010
0,180 180,390 390,930 1350,1680 1680,2100
bit map block to find

1780
00:59:12,010 --> 00:59:13,030
0,210 210,510 510,630 630,780 780,1020
a block that was not

1781
00:59:13,030 --> 00:59:15,490
0,540 660,780 780,1140 1140,1770 1770,2460
used, so find it zero

1782
00:59:15,760 --> 00:59:18,190
0,480 480,1020 1020,1470 1980,2310 2310,2430
and then a set a

1783
00:59:18,190 --> 00:59:19,360
0,420 420,510 510,600 600,720 720,1170
bit, you know to one

1784
00:59:19,360 --> 00:59:20,680
0,120 120,540 540,660 660,870 870,1320
to indicate that that particular

1785
00:59:20,680 --> 00:59:22,210
0,390 390,600 600,810 810,990 990,1530
block now is in use.

1786
00:59:22,890 --> 00:59:24,030
0,240 240,480 480,630 630,750 750,1140
Um, and so it wrote

1787
00:59:24,030 --> 00:59:25,830
0,60 60,240 240,870 870,1260 1290,1800
you know 45 to a

1788
00:59:25,830 --> 00:59:27,450
0,210 210,600 600,1110 1110,1560 1560,1620
two disc version updated the

1789
00:59:27,450 --> 00:59:28,740
0,180 180,420 420,780
big map walk.

1790
00:59:30,180 --> 00:59:31,500
0,330 330,600 600,720 720,840 840,1320
What block do you think

1791
00:59:31,530 --> 00:59:33,480
0,420 450,630 630,780 780,1440 1440,1950
the big map allocator picked.

1792
00:59:36,690 --> 00:59:39,780
0,1380 1440,2070 2100,2490 2490,2820 2820,3090
595 yeah most likely correct

1793
00:59:39,780 --> 00:59:41,010
0,330 330,600 600,960 960,1110 1110,1230
because right after it we

1794
00:59:41,010 --> 00:59:41,910
0,120 120,270 270,510 510,630 630,900
see your right two five

1795
00:59:41,910 --> 00:59:43,280
0,240 240,750
ninety five.

1796
00:59:43,280 --> 00:59:45,590
0,270 270,630 660,1200 1200,1860 1920,2310
Um and Julie the block

1797
00:59:45,590 --> 00:59:46,490
0,90 90,210 210,720 720,810 810,900
that was allocated to the

1798
00:59:46,490 --> 00:59:47,720
0,330 330,750
file X.

1799
00:59:47,720 --> 00:59:48,560
0,120 120,270 270,630 630,720 720,840
And so basically in the

1800
00:59:48,560 --> 00:59:50,240
0,120 120,390 390,720 750,1470 1470,1680
I node correct fx now

1801
00:59:50,240 --> 00:59:51,740
0,210 210,510 510,1080 1110,1320 1320,1500
in bn zero will have

1802
00:59:51,740 --> 00:59:53,510
0,90 90,360 360,570 570,1320 1320,1770
the number five ninety five.

1803
00:59:54,640 --> 00:59:57,310
0,600 900,1680 1680,2010 2010,2430 2430,2670
And, um, and basically what

1804
00:59:57,310 --> 00:59:58,660
0,180 180,330 330,480 480,810 810,1350
will be the first bite,

1805
00:59:58,990 --> 00:59:59,770
0,240 240,330 330,630 630,720 720,780
what's the value of the

1806
00:59:59,770 --> 01:00:01,390
0,270 270,720 750,1050 1050,1380 1380,1620
first byte of block five

1807
01:00:01,390 --> 01:00:02,560
0,240 240,660
ninety five.

1808
01:00:03,250 --> 01:00:04,740
0,330 330,480 480,870
After this, right.

1809
01:00:05,560 --> 01:00:08,140
0,1230 1260,1650 1650,2070 2340,2460 2460,2580
H H go and what

1810
01:00:08,140 --> 01:00:08,860
0,60 60,150 150,330 330,420 420,720
do we think the second

1811
01:00:08,860 --> 01:00:10,000
0,240 240,570
right is.

1812
01:00:11,650 --> 01:00:12,820
0,210 210,660
This one.

1813
01:00:14,030 --> 01:00:15,200
0,690
Aye.

1814
01:00:15,200 --> 01:00:17,960
0,330 330,1020 1740,2070 2070,2250 2250,2760
Yes I write there's every

1815
01:00:18,260 --> 01:00:20,180
0,810 840,1380 1380,1530 1530,1620 1620,1920
echoed a you know there's

1816
01:00:20,180 --> 01:00:21,640
0,60 60,360 360,480 480,930
a character by character.

1817
01:00:21,940 --> 01:00:22,690
0,240 240,390 390,450 450,570 570,750
Okay, what do we think

1818
01:00:22,690 --> 01:00:24,160
0,360 390,630 630,840 840,1050 1050,1470
this right {33 -} years.

1819
01:00:28,500 --> 01:00:30,510
0,510 510,600 600,900 900,1230 1680,2010
Updating the size again, yeah

1820
01:00:30,510 --> 01:00:31,380
0,300 300,390 390,690 690,750 750,870
again the size of the

1821
01:00:31,380 --> 01:00:32,670
0,120 120,510 510,810 810,1110 1110,1290
eye note, that's because now

1822
01:00:32,670 --> 01:00:33,480
0,120 120,270 270,390 390,690 690,810
it has two bytes in

1823
01:00:33,480 --> 01:00:34,280
0,240
it.

1824
01:00:34,760 --> 01:00:36,100
0,210 210,270 270,420 420,780
Does it make sense.

1825
01:00:37,740 --> 01:00:39,960
0,330 330,1110 1110,1470 1470,1830 1830,2220
A question five ninety five

1826
01:00:39,960 --> 01:00:42,690
0,660 900,1290 1290,2010 2040,2460 2460,2730
seems very high up in

1827
01:00:42,690 --> 01:00:44,790
0,270 300,900 1170,1500 1500,1860 1860,2100
the disk that because there's

1828
01:00:44,790 --> 01:00:46,590
0,570 600,960 960,1110 1110,1500 1500,1800
other stuff that's currently living

1829
01:00:46,590 --> 01:00:47,670
0,180 180,420 420,510 510,810 810,1080
there like the kernel boot

1830
01:00:47,670 --> 01:00:49,080
0,390 390,570 570,1080 1080,1320 1320,1410
code and other things that

1831
01:00:49,080 --> 01:00:50,340
0,120 120,330 330,480 480,870 930,1260
have already been start well,

1832
01:00:50,340 --> 01:00:51,750
0,180 180,480 480,720 720,1140 1140,1410
yeah we can go back

1833
01:00:51,750 --> 01:00:52,980
0,120 120,510 540,660 660,1140 1140,1230
to the big screen, we

1834
01:00:52,980 --> 01:00:53,730
0,90 90,270 270,360 360,540 540,750
can look at what make

1835
01:00:53,730 --> 01:00:55,530
0,540 540,840 870,1200 1200,1470 1500,1800
s did right so mega

1836
01:00:55,530 --> 01:00:56,460
0,330 330,450 450,480 480,720 720,930
fest or a whole bunch

1837
01:00:56,460 --> 01:00:58,000
0,330 390,780 780,1140
of files there.

1838
01:00:58,410 --> 01:00:59,670
0,210 210,300 300,720 720,870 870,1260
In the files that before

1839
01:00:59,670 --> 01:01:01,050
0,120 120,330 330,630 630,900 900,1380
we actually created file acts.

1840
01:01:01,800 --> 01:01:03,210
0,660 690,750 750,960 960,1080 1080,1410
And in fact we've created

1841
01:01:03,210 --> 01:01:04,660
0,210 210,420 420,960
all these guys.

1842
01:01:05,540 --> 01:01:06,560
0,420 420,600 600,660 660,810 810,1020
And so it was only

1843
01:01:06,560 --> 01:01:07,220
0,60 60,240 240,510 510,570 570,660
a good chunk of the

1844
01:01:07,220 --> 01:01:08,870
0,270 270,360 360,630 630,1080 1110,1650
disk is already filled by

1845
01:01:08,870 --> 01:01:10,550
0,150 150,600 600,870 930,1140 1140,1680
the files, the four blocks

1846
01:01:10,790 --> 01:01:12,470
0,30 240,930 930,1170 1170,1260 1260,1680
a good number of blocks

1847
01:01:12,470 --> 01:01:14,630
0,450 450,1050 1050,1410 1410,1710 1710,2160
already news basically by the

1848
01:01:14,630 --> 01:01:15,800
0,180 180,240 240,720
set of files.

1849
01:01:18,660 --> 01:01:19,920
0,660
Regardless.

1850
01:01:20,800 --> 01:01:22,510
0,390 390,690 690,1140 1140,1380 1380,1710
I'm with it right down

1851
01:01:22,510 --> 01:01:24,340
0,300 300,840 840,1170 1170,1410 1410,1830
that block five ninety five

1852
01:01:24,370 --> 01:01:26,680
0,660 720,1320 1320,1770
is related to.

1853
01:01:26,680 --> 01:01:28,090
0,510 510,660 660,930 960,1110 1110,1410
That too that I know

1854
01:01:28,090 --> 01:01:30,250
0,540 540,750 750,1380 1410,1770 1770,2160
during the last alt during

1855
01:01:30,250 --> 01:01:32,500
0,420 720,1230 1230,1590 1590,1950 1950,2250
the right three to that,

1856
01:01:32,530 --> 01:01:35,260
0,720 900,1650 1650,1950 1950,2130 2130,2730
yes exactly correct, so there's

1857
01:01:35,260 --> 01:01:36,400
0,240 240,570 570,810 810,1080 1080,1140
very fruity three probably a

1858
01:01:36,400 --> 01:01:37,630
0,210 210,270 270,480 480,810 900,1230
bunch of things happened or

1859
01:01:37,630 --> 01:01:39,420
0,120 120,480 480,630 630,1200
the size got updated.

1860
01:01:40,640 --> 01:01:42,440
0,600 600,660 660,840 840,1260 1260,1800
And you know bn zero

1861
01:01:42,440 --> 01:01:44,320
0,180 180,570 570,1080
and bn one.

1862
01:01:44,320 --> 01:01:46,030
0,240 240,690 720,930 930,1500 1500,1710
We're updated we're certainly being

1863
01:01:46,030 --> 01:01:47,620
0,510 570,750 750,1200 1200,1440 1440,1590
zero is updated correct to

1864
01:01:47,620 --> 01:01:48,790
0,360 360,600 600,780 780,1080 1080,1170
contain five ninety five and

1865
01:01:48,790 --> 01:01:50,620
0,240 240,450 450,540 540,1200 1560,1830
both pieces of information are

1866
01:01:50,620 --> 01:01:52,090
0,510 510,690 690,1020 1020,1200 1200,1470
ability I noted then written

1867
01:01:52,090 --> 01:01:53,650
0,450 450,690 690,1110 1140,1380 1380,1560
to the disk by this

1868
01:01:53,650 --> 01:01:54,520
0,390
right.

1869
01:01:59,340 --> 01:02:00,560
0,150 150,270 270,630
That makes sense.

1870
01:02:01,580 --> 01:02:03,680
0,450 570,870 870,1110 1110,1620
Yeah yeah, thank you.

1871
01:02:04,430 --> 01:02:05,750
0,240 240,330 330,540 540,1170 1200,1320
Good, so that's a you

1872
01:02:05,750 --> 01:02:06,770
0,120 120,270 270,360 360,510 510,1020
know sort of the essence

1873
01:02:07,130 --> 01:02:09,830
0,600 600,870 870,1440 1830,2250 2250,2700
of disk layout and hopefully

1874
01:02:09,830 --> 01:02:10,700
0,330 330,450 450,540 540,720 720,870
you have a pretty good

1875
01:02:10,700 --> 01:02:13,730
0,510 510,810 2130,2400 2400,2640 2640,3030
understanding of what goes on

1876
01:02:14,090 --> 01:02:15,530
0,600 660,840 840,960 960,1350 1350,1440
to make this work and

1877
01:02:15,530 --> 01:02:16,550
0,180 180,330 330,750 750,810 810,1020
so it's going to look

1878
01:02:16,550 --> 01:02:17,270
0,90 90,240 240,360 360,630 630,720
a little bit more in

1879
01:02:17,270 --> 01:02:19,190
0,450 450,870 870,1050 1050,1320 1380,1920
detail now at the code,

1880
01:02:19,310 --> 01:02:21,770
0,690 690,1230 1230,1500 1500,2040 2040,2460
um to see actually a.

1881
01:02:22,260 --> 01:02:24,260
0,390 390,1470
Things little.

1882
01:02:24,620 --> 01:02:25,640
0,150 150,420 420,690 690,960 960,1020
And one more level of

1883
01:02:25,640 --> 01:02:26,660
0,480
detail.

1884
01:02:26,830 --> 01:02:28,360
0,420 420,900
Okay, Joe.

1885
01:02:28,520 --> 01:02:30,230
0,120 120,360 360,810 840,1140 1140,1710
The first thing since reallocated

1886
01:02:30,230 --> 01:02:31,280
0,150 150,330 330,570 570,870 870,1050
I know let's first look

1887
01:02:31,280 --> 01:02:33,890
0,120 120,600 600,1170 1590,1950 1950,2610
at actually, um, um, how,

1888
01:02:33,890 --> 01:02:36,500
0,420 780,990 990,1170 1170,1680 2130,2610
um how that happened, um,

1889
01:02:36,500 --> 01:02:38,750
0,510 720,870 870,1170 1170,1950 1980,2250
so in this file, let's

1890
01:02:38,750 --> 01:02:39,740
0,570
see.

1891
01:02:39,740 --> 01:02:40,900
0,630
Girl.

1892
01:02:43,940 --> 01:02:45,620
0,180 180,480 480,660 660,1110
So you're all the.

1893
01:02:46,010 --> 01:02:47,390
0,420 420,780 780,870 870,1110 1110,1380
Calls related to file system

1894
01:02:47,390 --> 01:02:48,410
0,390 390,540 540,630 630,870 870,1020
calls so the first thing

1895
01:02:48,410 --> 01:02:49,400
0,150 150,420 420,750 750,900 900,990
that actually happens when it

1896
01:02:49,400 --> 01:02:50,660
0,150 150,360 360,900 900,1170 1170,1260
was just open because we're

1897
01:02:50,660 --> 01:02:51,800
0,120 120,180 180,450 450,510 510,1140
going to create a file.

1898
01:02:52,440 --> 01:02:54,180
0,330 330,810 930,1260 1260,1620 1620,1740
Um, since, um open will

1899
01:02:54,180 --> 01:02:55,780
0,390 390,1080
call create.

1900
01:02:59,570 --> 01:03:01,400
0,540 540,1290
News create.

1901
01:03:01,520 --> 01:03:03,110
0,600 630,1200 1200,1350 1350,1530 1530,1590
A create will look at

1902
01:03:03,110 --> 01:03:05,300
0,210 210,750 1140,1800 1800,1860 1860,2190
this later resolves the path

1903
01:03:05,300 --> 01:03:07,400
0,420 450,780 780,1260 1260,1440 1440,2100
name to basically the last

1904
01:03:07,580 --> 01:03:08,920
0,810
directory.

1905
01:03:08,920 --> 01:03:11,350
0,390 390,1500 1530,2220 2220,2310 2310,2430
Walks the directory and then

1906
01:03:11,350 --> 01:03:12,640
0,240 240,450 450,750 780,1020 1020,1290
doesn't look up and really

1907
01:03:12,640 --> 01:03:14,590
0,210 210,450 450,810 1290,1770 1770,1950
care about that a just

1908
01:03:14,590 --> 01:03:15,190
0,60 60,210 210,300 300,360 360,600
to see if the file

1909
01:03:15,190 --> 01:03:16,150
0,270 270,660 660,780 780,870 870,960
already exists, and if the

1910
01:03:16,150 --> 01:03:17,350
0,240 240,690 690,810 810,930 930,1200
file exists, you know maybe

1911
01:03:17,350 --> 01:03:19,800
0,120 120,390 390,930
you're turning error.

1912
01:03:19,830 --> 01:03:21,360
0,510 570,930 930,990 990,1350 1350,1530
And then it calls an

1913
01:03:21,360 --> 01:03:23,130
0,120 120,720 750,990 990,1350 1440,1770
ode allocate and so this

1914
01:03:23,130 --> 01:03:24,600
0,180 180,690 720,1200 1200,1380 1380,1470
is the call that is

1915
01:03:24,600 --> 01:03:26,070
0,120 120,210 210,660 660,870 870,1470
going to allocate this an

1916
01:03:26,070 --> 01:03:28,320
0,270 270,870 1230,1950
ode for um.

1917
01:03:28,320 --> 01:03:29,760
0,150 150,480 480,960
The file acts.

1918
01:03:29,850 --> 01:03:31,050
0,180 180,420 420,660 660,1050 1050,1200
So let's look out it's

1919
01:03:31,050 --> 01:03:32,940
0,210 210,780 810,1110 1110,1350 1350,1890
gonna be f dot c.

1920
01:03:37,840 --> 01:03:39,580
0,240 240,480 480,660 660,1110 1110,1740
And here I I alack,

1921
01:03:39,610 --> 01:03:41,500
0,570 570,870 870,1350 1350,1770 1770,1890
like most x86 code, you

1922
01:03:41,500 --> 01:03:42,940
0,90 90,210 210,570 660,930 930,1440
know it's just very simple,

1923
01:03:42,940 --> 01:03:44,820
0,180 180,330 330,720 720,1320
but not particularly efficient.

1924
01:03:44,880 --> 01:03:45,960
0,420 420,750 750,870 870,1020 1020,1080
Um, and so what it

1925
01:03:45,960 --> 01:03:48,060
0,360 360,900 900,1200 1230,1620 1620,2100
does, basically it goes for

1926
01:03:48,090 --> 01:03:50,490
0,270 270,390 390,660 660,1290 1530,2400
all the item numbers possible.

1927
01:03:51,090 --> 01:03:52,500
0,510 510,660 660,930 930,1080 1080,1410
A from one to whatever

1928
01:03:52,500 --> 01:03:53,280
0,60 60,420 420,660 660,780 780,780
the maximum number of I

1929
01:03:53,280 --> 01:03:54,720
0,360 360,540 540,660 660,990 1020,1440
notice that as a possible

1930
01:03:54,720 --> 01:03:56,880
0,90 90,240 240,1380 1380,1620 1620,2160
on this particular file system,

1931
01:03:57,120 --> 01:04:00,600
0,240 240,390 390,930 1890,3000
and then reach block.

1932
01:04:00,720 --> 01:04:01,530
0,270 270,420 420,570 570,660 660,810
A four that I know

1933
01:04:01,530 --> 01:04:02,700
0,330 330,510 510,570 570,900 900,1170
number show, for example starts

1934
01:04:02,700 --> 01:04:04,350
0,90 90,600 990,1470 1470,1560 1560,1650
with one reach, you know

1935
01:04:04,350 --> 01:04:05,400
0,120 120,480 480,870 870,1050 1050,1050
the block contains an oh

1936
01:04:05,400 --> 01:04:08,940
0,360 360,870 1260,2010 2010,3000
number one and um.

1937
01:04:09,220 --> 01:04:11,050
0,600 690,1020 1020,1260 1260,1680 1680,1830
And, um, then sees if

1938
01:04:11,050 --> 01:04:13,060
0,240 240,330 330,540 540,1710 1770,2010
that I know number is

1939
01:04:13,060 --> 01:04:14,740
0,420 420,840 870,1080 1080,1260 1260,1680
free and if it's not

1940
01:04:14,770 --> 01:04:16,630
0,210 210,300 300,450 450,900 1200,1860
if it is free, then

1941
01:04:16,630 --> 01:04:18,280
0,0 0,630 630,840 840,1020 1020,1650
a it says it to

1942
01:04:18,610 --> 01:04:20,290
0,450 450,1020 1020,1200 1200,1530 1530,1680
a file, and that way

1943
01:04:20,290 --> 01:04:23,230
0,420 420,720 750,1380 1380,2190 2520,2940
Marks it as allocated and

1944
01:04:23,230 --> 01:04:24,220
0,210 210,270 270,360 360,780 810,990
writes it to disk, and

1945
01:04:24,220 --> 01:04:25,720
0,270 270,600 600,1020 1020,1140 1140,1500
this log right, you actually

1946
01:04:25,720 --> 01:04:27,550
0,240 240,570 570,720 720,1170 1500,1830
print statements I had I

1947
01:04:27,550 --> 01:04:29,530
0,240 240,570 570,960 960,1380 1680,1980
put actually log right so

1948
01:04:29,530 --> 01:04:31,060
0,420 420,690 690,1110
that log right.

1949
01:04:33,080 --> 01:04:34,760
0,750 810,1020 1020,1140 1140,1410 1410,1680
Um was the first right

1950
01:04:34,760 --> 01:04:36,710
0,150 150,390 390,900 1230,1710 1710,1950
that we've seen, um, in

1951
01:04:36,710 --> 01:04:38,060
0,510 510,870 870,960 960,1230 1230,1350
that sequence of rights that

1952
01:04:38,060 --> 01:04:39,080
0,90 90,420
we did.

1953
01:04:39,500 --> 01:04:41,240
0,420 420,630 630,900 900,1380 1410,1740
What file system do this

1954
01:04:41,240 --> 01:04:42,300
0,150 150,510
make sense.

1955
01:04:47,880 --> 01:04:50,640
0,240 240,930 1050,1890 2430,2580 2580,2760
So interesting, um, so it's

1956
01:04:50,640 --> 01:04:51,630
0,300 300,450 450,540 540,630 630,990
basically sort of the sequence

1957
01:04:51,630 --> 01:04:52,710
0,150 150,480 480,750 750,930 930,1080
of events that get you

1958
01:04:52,710 --> 01:04:54,630
0,150 150,270 270,870 900,1800 1800,1920
to the first, write to

1959
01:04:54,630 --> 01:04:56,910
0,90 90,540 960,1290 1290,1740 1740,2280
the disk, a interesting question

1960
01:04:56,910 --> 01:04:57,960
0,90 90,600
of course.

1961
01:04:58,200 --> 01:05:00,300
0,210 210,630 630,960 960,1200 1200,2100
Um, what happens if multiple

1962
01:05:00,750 --> 01:05:04,560
0,1410 1650,2490 2640,3360 3360,3720 3720,3810
processes are calling create at

1963
01:05:04,560 --> 01:05:05,820
0,60 60,240 240,600 630,990 990,1260
the same time, a multi

1964
01:05:05,820 --> 01:05:07,350
0,210 210,960 960,1050 1050,1140 1140,1530
core machine that can be

1965
01:05:07,710 --> 01:05:09,630
0,930 930,1050 1050,1680 1710,1800 1800,1920
running in parallel, you know

1966
01:05:09,630 --> 01:05:11,490
0,240 240,810 810,1290 1290,1650 1650,1860
coming down and all get

1967
01:05:11,490 --> 01:05:12,510
0,60 60,240 240,660 660,930 930,1020
to my Alex roughly at

1968
01:05:12,510 --> 01:05:13,950
0,60 60,300 300,840 1170,1290 1290,1440
the same time, and then

1969
01:05:13,950 --> 01:05:15,330
0,300 300,480 480,630 630,1200 1200,1380
all they're gonna call they're

1970
01:05:15,330 --> 01:05:17,100
0,150 150,360 360,570 570,960 1530,1770
gonna call be reek, so

1971
01:05:17,100 --> 01:05:18,720
0,210 210,300 300,540 540,1200
ask me some story.

1972
01:05:18,720 --> 01:05:21,570
0,180 180,900 1170,1980 1980,2490 2490,2850
Or how a these rights

1973
01:05:21,570 --> 01:05:22,830
0,210 210,600 600,750 750,900 900,1260
don't interfere with each other.

1974
01:05:23,700 --> 01:05:25,110
0,330 330,480 480,690 690,1140 1140,1410
Yeah it's really worthwhile looking

1975
01:05:25,110 --> 01:05:27,090
0,510 960,1440 1440,1710 1710,1770 1770,1980
into um, because in some

1976
01:05:27,090 --> 01:05:27,990
0,360 360,450 450,570 570,780 780,900
sense you know this is

1977
01:05:27,990 --> 01:05:29,550
0,360 360,870 900,1140 1140,1230 1230,1560
actually the part of the

1978
01:05:30,030 --> 01:05:31,560
0,750 750,930 930,990 990,1320 1320,1530
last part of digital APP

1979
01:05:31,560 --> 01:05:33,420
0,90 90,210 210,600 600,930 1410,1860
that you're currently doing a

1980
01:05:33,420 --> 01:05:34,380
0,210 210,330 330,630 630,870 870,960
so it gets into the

1981
01:05:34,380 --> 01:05:35,480
0,210 210,660
buffer cache.

1982
01:05:37,940 --> 01:05:39,260
0,570 570,750 750,1050 1050,1200 1200,1320
Um, so let's look at

1983
01:05:39,260 --> 01:05:41,120
0,210 210,750 1320,1500 1500,1680 1680,1860
be read so I'll be

1984
01:05:41,120 --> 01:05:42,350
0,510 540,840 840,930 930,1140 1140,1230
read more the first thing

1985
01:05:42,350 --> 01:05:43,370
0,90 90,330 330,600 600,720 720,1020
it does actually it's called

1986
01:05:43,370 --> 01:05:45,470
0,150 150,600 630,1140 1140,1560 1620,2100
be get and so basically

1987
01:05:45,470 --> 01:05:47,330
0,180 180,660 660,900 900,1680 1710,1860
b gets a slot in

1988
01:05:47,330 --> 01:05:48,660
0,90 90,360 360,870
the buffer cache.

1989
01:05:48,660 --> 01:05:50,430
0,240 240,390 390,480 480,1140 1440,1770
Let's look at the big

1990
01:05:50,430 --> 01:05:51,990
0,210 210,450 450,690 690,900 900,1560
ET for a little while

1991
01:05:51,990 --> 01:05:53,130
0,210 210,360 360,480 480,840 840,1140
because there's a reasonable tricky

1992
01:05:53,130 --> 01:05:54,080
0,390
code.

1993
01:05:55,700 --> 01:05:57,080
0,690
And.

1994
01:05:58,460 --> 01:05:59,210
0,150 150,300 300,480 480,690 690,750
So what's going on in

1995
01:05:59,210 --> 01:06:01,040
0,90 90,660 840,1140 1140,1410 1410,1830
the first couple lines here.

1996
01:06:03,810 --> 01:06:04,740
0,180 180,540 540,720 720,810 810,930
I imagine some of you

1997
01:06:04,740 --> 01:06:05,790
0,360 360,630 630,690 690,810 810,1050
already looked at this code

1998
01:06:05,790 --> 01:06:06,720
0,180 180,210 210,330 330,390 390,930
quite a bit of detail

1999
01:06:06,720 --> 01:06:07,770
0,150 150,360 360,420 420,600 600,1050
as part of this lab.

2000
01:06:08,510 --> 01:06:10,080
0,150 150,480 480,990
The locking block.

2001
01:06:10,170 --> 01:06:11,040
0,180 180,300 300,480 480,690 690,870
Um, so what's going on

2002
01:06:11,040 --> 01:06:12,000
0,360
here.

2003
01:06:18,480 --> 01:06:20,760
0,420 450,930 930,1440 1440,1890 1920,2280
Um, it blocks the linked

2004
01:06:20,760 --> 01:06:22,860
0,330 330,480 480,1020 1050,1500 1530,2100
list and check if any

2005
01:06:22,860 --> 01:06:24,690
0,120 120,450 600,1140 1350,1710 1710,1830
of the um things in

2006
01:06:24,690 --> 01:06:27,330
0,390 450,1050 1050,1320 1320,2070 2400,2640
the cache or mashing with

2007
01:06:27,330 --> 01:06:28,980
0,180 180,330 330,660 660,1140
what we're looking for.

2008
01:06:28,980 --> 01:06:31,260
0,600 630,1410 1440,2010 2010,2160 2160,2280
Yeah, so basically this is

2009
01:06:31,260 --> 01:06:33,300
0,90 90,510 510,660 660,1260 1530,2040
the cash in action, um,

2010
01:06:33,300 --> 01:06:34,530
0,150 150,510 510,810 810,1140 1140,1230
we're looking for whatever the

2011
01:06:34,530 --> 01:06:36,510
0,330 330,870 870,870 1560,1800 1800,1980
block number a block number

2012
01:06:36,510 --> 01:06:38,730
0,450 450,900 1230,1710 1710,1830 1830,2220
{33 -} and we're basically

2013
01:06:38,730 --> 01:06:40,380
0,630 630,870 870,960 960,1290 1290,1650
seeing if the cash already

2014
01:06:40,380 --> 01:06:41,790
0,390 390,660 660,840 840,1110 1110,1410
has {walk -} number 33.

2015
01:06:43,040 --> 01:06:45,440
0,540 720,1650 1830,2070 2070,2310 2310,2400
And and if that is

2016
01:06:45,440 --> 01:06:46,940
0,90 90,750 990,1170 1170,1440 1440,1500
the case it bumps the

2017
01:06:46,940 --> 01:06:50,510
0,240 240,810 900,1530 1650,2490 2850,3570
ref count up and um,

2018
01:06:50,510 --> 01:06:51,470
0,180 180,390 390,750 750,840 840,960
and then reused to be

2019
01:06:51,470 --> 01:06:52,940
0,270 270,660 690,870 870,990 990,1470
cash walk because we're done

2020
01:06:52,970 --> 01:06:54,980
0,360 360,480 480,780 780,1410 1710,2010
looking into cash itself, we

2021
01:06:54,980 --> 01:06:56,750
0,150 150,300 300,900 1230,1590 1590,1770
know it's there we know

2022
01:06:56,750 --> 01:06:58,130
0,150 150,300 300,360 360,900 930,1380
that there's a buffy buffer

2023
01:06:58,130 --> 01:06:59,390
0,120 120,240 240,570 570,840 840,1260
for that particular block, there,

2024
01:06:59,630 --> 01:07:01,820
0,480 480,1080 1110,1770 1770,2040 2040,2190
um and um, and then

2025
01:07:01,820 --> 01:07:02,690
0,60 60,300 300,540 540,660 660,870
the next step that actually

2026
01:07:02,690 --> 01:07:04,220
0,600 870,1080 1080,1290 1290,1440 1440,1530
happens a is sort of

2027
01:07:04,220 --> 01:07:05,260
0,600
interesting.

2028
01:07:06,490 --> 01:07:08,680
0,450 450,960 990,1620 1650,1950 1950,2190
Next step, the block Ash

2029
01:07:08,680 --> 01:07:10,480
0,390 390,720 720,1050 1080,1770 1770,1800
basically tries to get a

2030
01:07:10,480 --> 01:07:13,340
0,630 1020,1740 1770,1920 1920,2370
walk on the buffer.

2031
01:07:13,660 --> 01:07:15,730
0,630 1050,1440 1440,1560 1560,1740 1740,2070
So, um, so what happens

2032
01:07:15,730 --> 01:07:17,440
0,120 120,300 300,1110
if like multiple.

2033
01:07:17,560 --> 01:07:18,880
0,630 630,720 720,810 810,1080 1080,1320
Processes at the same time

2034
01:07:18,880 --> 01:07:21,100
0,270 270,480 480,870 900,1530 1860,2220
called beck ET well one

2035
01:07:21,100 --> 01:07:21,970
0,90 90,540 570,690 690,810 810,870
of them is going to

2036
01:07:21,970 --> 01:07:23,020
0,150 150,210 210,360 360,630 630,1050
get the b cache lock,

2037
01:07:23,050 --> 01:07:24,040
0,450
right.

2038
01:07:24,350 --> 01:07:25,670
0,120 120,270 270,330 330,660 660,1320
It's going to scan the

2039
01:07:25,940 --> 01:07:27,500
0,300 300,810 840,1020 1020,1170 1170,1560
buffer cache, and so nobody

2040
01:07:27,500 --> 01:07:28,520
0,120 120,330 330,720 720,810 810,1020
can actually modify the buffer

2041
01:07:28,520 --> 01:07:29,840
0,240 240,300 300,450 450,840 840,1320
cache in this particular point.

2042
01:07:30,420 --> 01:07:32,430
0,480 510,750 750,1410 1440,1740 1740,2010
Find if the block number

2043
01:07:32,430 --> 01:07:33,180
0,120 120,420 420,540 540,660 660,750
is there and if the

2044
01:07:33,180 --> 01:07:35,130
0,240 240,450 450,570 570,1140 1350,1950
block number is there a

2045
01:07:35,130 --> 01:07:36,540
0,360 360,660 660,750 750,930 930,1410
it bumps the ref count,

2046
01:07:36,600 --> 01:07:38,460
0,210 210,750 750,870 870,1440 1440,1860
um, indicating that basically it

2047
01:07:38,490 --> 01:07:39,660
0,270 270,360 360,990 990,1080 1080,1170
has a reference, you know

2048
01:07:39,660 --> 01:07:41,320
0,210 210,600 600,1200
to this, um.

2049
01:07:41,320 --> 01:07:42,340
0,240 240,540 540,780 780,870 870,1020
This particular walk and then

2050
01:07:42,340 --> 01:07:44,530
0,630 660,1290 1320,1500 1500,1770 1770,2190
releases the b cash walk,

2051
01:07:44,800 --> 01:07:45,430
0,180 180,300 300,420 420,570 570,630
so if there were a

2052
01:07:45,430 --> 01:07:47,840
0,330 330,990 1020,1860
second process waiting.

2053
01:07:47,960 --> 01:07:50,150
0,870 870,1050 1050,1170 1170,1440 1440,2190
Um, all to also scan

2054
01:07:50,150 --> 01:07:51,920
0,210 210,480 480,900 900,1410 1530,1770
the um, this cash it

2055
01:07:51,920 --> 01:07:53,000
0,150 150,330 330,540 540,990 990,1080
might not actually require to

2056
01:07:53,000 --> 01:07:54,800
0,330 330,480 480,840 870,1260 1650,1800
walk right away right, in

2057
01:07:54,800 --> 01:07:55,430
0,240 240,360 360,510 510,570 570,630
fact it might be a

2058
01:07:55,430 --> 01:07:57,050
0,330 330,780 780,990 990,1440 1440,1620
second process of scanning for

2059
01:07:57,050 --> 01:07:58,160
0,240 240,510 510,660 660,720 720,1110
one also want to scan

2060
01:07:58,160 --> 01:07:59,630
0,120 120,270 270,780 780,930 930,1470
for this block for degree.

2061
01:08:00,140 --> 01:08:01,760
0,570 600,780 780,870 870,1260 1260,1620
And it will also get

2062
01:08:01,760 --> 01:08:02,990
0,150 150,330 330,720 720,810 810,1230
you know basically a reference

2063
01:08:02,990 --> 01:08:05,180
0,450 450,840 840,1290 1560,1800 1800,2190
to a be a bump,

2064
01:08:05,180 --> 01:08:07,010
0,90 90,450 450,960 1230,1590 1590,1830
the reference count, um two

2065
01:08:07,010 --> 01:08:08,660
0,540 750,930 930,1170 1170,1560 1560,1650
two or three whatever it

2066
01:08:08,660 --> 01:08:10,190
0,450 660,900 900,1350 1350,1440 1440,1530
is and then you know

2067
01:08:10,190 --> 01:08:11,060
0,270 270,330 330,510 510,630 630,870
both of them will try

2068
01:08:11,060 --> 01:08:12,800
0,120 120,390 390,810 810,1290
to call acquire sleep.

2069
01:08:13,200 --> 01:08:14,580
0,300 300,450 450,780 780,1110 1110,1380
On that particular buffer buffer

2070
01:08:14,580 --> 01:08:15,780
0,270 270,630
{33. -}

2071
01:08:16,120 --> 01:08:17,380
0,270 270,630 630,990 990,1080 1080,1260
And acquire sleep, it's just

2072
01:08:17,380 --> 01:08:19,030
0,360 360,780 780,1050 1050,1170 1170,1650
basically another type of lock,

2073
01:08:19,210 --> 01:08:20,860
0,570 570,1020 1020,1200 1200,1320 1320,1650
um, we call them sleep

2074
01:08:20,860 --> 01:08:22,630
0,540 720,1050 1050,1350 1350,1530 1530,1770
blocks and we'll talk about

2075
01:08:22,630 --> 01:08:25,480
0,150 150,180 180,660 870,1650 1980,2850
in a second, but basically

2076
01:08:25,480 --> 01:08:27,100
0,120 120,540 540,780 780,1560 1560,1620
you know this acquires the

2077
01:08:27,100 --> 01:08:28,930
0,600 630,840 840,960 960,1470 1650,1830
lock on the buffer, so

2078
01:08:28,930 --> 01:08:30,130
0,270 270,360 360,450 450,630 630,1200
one of the two processes

2079
01:08:30,130 --> 01:08:31,480
0,180 180,390 390,840
will get the.

2080
01:08:31,480 --> 01:08:32,620
0,270 270,420 420,750 750,870 870,1140
A the locke of buffer

2081
01:08:32,620 --> 01:08:33,900
0,270 270,720
{33. -}

2082
01:08:33,900 --> 01:08:36,390
0,660 660,930 930,1560 1590,2220 2220,2490
And will proceed and that

2083
01:08:36,390 --> 01:08:38,430
0,120 120,210 210,900 1200,1890 1890,2040
will be returned and go

2084
01:08:38,430 --> 01:08:40,260
0,150 150,390 390,660 660,1440 1710,1830
from growing food emotions, you

2085
01:08:40,260 --> 01:08:41,520
0,210 240,480 480,840 840,990 990,1260
know like scanning that block

2086
01:08:41,520 --> 01:08:42,450
0,210 210,540 540,660 660,810 810,930
thirty free to see your

2087
01:08:42,450 --> 01:08:43,320
0,180 180,300 300,420 420,690 690,870
death and I know that

2088
01:08:43,320 --> 01:08:44,700
0,420 420,540 540,900
actually is free.

2089
01:08:45,580 --> 01:08:47,230
0,210 210,300 300,630 630,1320 1440,1650
And the other process will

2090
01:08:47,230 --> 01:08:48,220
0,210 210,300 300,720 720,840 840,990
just be sitting in the

2091
01:08:48,220 --> 01:08:49,570
0,360 360,720 720,1140 1140,1260 1260,1350
choir sleep here you know

2092
01:08:49,570 --> 01:08:52,120
0,480 480,900 900,1440 1740,2190 2190,2550
waiting until the first process

2093
01:08:52,120 --> 01:08:53,080
0,120 120,480 480,660 660,840 840,960
is done with all its

2094
01:08:53,080 --> 01:08:54,280
0,810
operations.

2095
01:08:58,380 --> 01:08:59,920
0,180 180,540 540,720 720,1020
Any questions about this.

2096
01:09:01,970 --> 01:09:03,740
0,690 720,900 900,1050 1050,1140 1140,1770
Um I have a question.

2097
01:09:05,440 --> 01:09:07,900
0,840 930,1410 1410,1590 1590,1920 1920,2460
Um, while the ref count

2098
01:09:07,930 --> 01:09:09,790
0,360 360,510 510,1170 1200,1590 1590,1860
of a block is not

2099
01:09:09,790 --> 01:09:12,310
0,600 600,1050 1050,1680 1680,2220 2220,2520
zero can anything important about

2100
01:09:12,310 --> 01:09:15,010
0,210 210,600 630,1560 1590,2370 2370,2700
that block change because something

2101
01:09:15,010 --> 01:09:16,810
0,210 210,750 750,1170 1170,1320 1320,1800
can happen between the release

2102
01:09:16,810 --> 01:09:18,640
0,150 150,330 330,600 600,1350
of the big cash.

2103
01:09:18,640 --> 01:09:20,980
0,540 780,1710 1710,1830 1830,2160 2160,2340
And acquiring the lock of

2104
01:09:20,980 --> 01:09:22,080
0,120 120,570
the block.

2105
01:09:22,600 --> 01:09:24,910
0,330 330,780 780,1710 1710,1830 1830,2310
Yeah actually the the protocol

2106
01:09:24,910 --> 01:09:25,930
0,180 180,330 330,510 510,720 750,1020
okay, so there's a couple

2107
01:09:25,930 --> 01:09:26,500
0,210 210,240 240,360 360,420 420,570
points I want to make

2108
01:09:26,500 --> 01:09:29,170
0,510 510,780 780,1200 1200,1950 1950,2670
here the protocol basically, um,

2109
01:09:29,260 --> 01:09:30,970
0,660 660,960 960,1170 1170,1530 1530,1710
um, actually six follows is

2110
01:09:30,970 --> 01:09:32,290
0,360 360,540 540,660 660,1200 1200,1320
that for any modification to

2111
01:09:32,290 --> 01:09:33,880
0,240 240,510 510,1260 1320,1470 1470,1590
the cache itself, you need

2112
01:09:33,880 --> 01:09:35,050
0,60 60,300 300,450 450,720 720,1170
to hold the caps lock.

2113
01:09:36,180 --> 01:09:37,680
0,300 300,450 450,1020 1020,1260 1260,1500
For any modification to this

2114
01:09:37,680 --> 01:09:38,970
0,300 300,510 510,1020 1050,1170 1170,1290
block {33, -} you need

2115
01:09:38,970 --> 01:09:40,050
0,60 60,330 330,390 390,690 690,1080
to hold the sleep {lock

2116
01:09:40,080 --> 01:09:41,640
0,420 420,660 660,990
-} block 33.

2117
01:09:41,790 --> 01:09:42,960
0,420 420,540 540,690 690,840 840,1170
And so at any particular

2118
01:09:42,960 --> 01:09:45,150
0,180 180,240 240,840 1140,1920 1920,2190
point in time, um, so

2119
01:09:45,180 --> 01:09:48,660
0,420 420,570 570,1200 1590,2550 2670,3480
after the release a DB

2120
01:09:48,660 --> 01:09:51,360
0,210 210,510 510,1080 1110,2100 2250,2700
ref count is a larger

2121
01:09:51,360 --> 01:09:53,280
0,120 120,720 1050,1620 1650,1800 1800,1920
than zero and there will

2122
01:09:53,280 --> 01:09:55,050
0,150 150,540 540,1470 1560,1710 1710,1770
be no modification to the

2123
01:09:55,050 --> 01:09:56,580
0,240 240,720 960,1200 1200,1410 1410,1530
buffer cache buffer cache will

2124
01:09:56,580 --> 01:09:57,920
0,420 420,930
only evict.

2125
01:09:57,920 --> 01:09:59,150
0,420 420,750 750,870 870,1110 1110,1230
Or things that actually have

2126
01:09:59,150 --> 01:10:00,530
0,90 90,270 270,510 510,840 840,1380
the ref count zero never

2127
01:10:00,530 --> 01:10:01,400
0,210 210,390 390,450 450,630 630,870
that has a ref count

2128
01:10:01,400 --> 01:10:03,290
0,480 510,840 840,1080 1080,1350 1380,1890
of something bigger than zero.

2129
01:10:04,120 --> 01:10:04,840
0,180 180,330 330,450 450,630 630,720
And so we know for

2130
01:10:04,840 --> 01:10:06,340
0,300 300,420 420,570 570,930 930,1500
sure that this block basically

2131
01:10:06,340 --> 01:10:08,020
0,210 210,570 570,1080 1080,1170 1170,1680
this buffer won't be touched

2132
01:10:08,020 --> 01:10:09,760
0,180 180,360 360,660 660,1230 1530,1740
in the cache itself, no

2133
01:10:09,760 --> 01:10:11,020
0,300 300,720 720,930 930,990 990,1260
other processes might be looking

2134
01:10:11,020 --> 01:10:12,760
0,330 330,1110 1110,1350 1350,1440 1440,1740
up, um might be looking

2135
01:10:12,760 --> 01:10:14,260
0,360 420,600 600,1110 1110,1290 1290,1500
up the entry in the

2136
01:10:14,260 --> 01:10:16,450
0,510 750,1530 1530,1770 1770,2040 2040,2190
cache, but it won't be

2137
01:10:16,450 --> 01:10:18,360
0,630 630,810 810,990 990,1500
removed from the cache.

2138
01:10:19,710 --> 01:10:20,700
0,510
Rec.

2139
01:10:21,160 --> 01:10:22,990
0,330 330,990 990,1200 1200,1680 1680,1830
And doesn't this lock that

2140
01:10:22,990 --> 01:10:23,950
0,270 270,450 450,510 510,630 630,960
second look at this sleep

2141
01:10:23,950 --> 01:10:25,330
0,240 240,360 360,600 600,1020 1020,1380
lock is really what protects

2142
01:10:25,330 --> 01:10:26,770
0,120 120,720 720,900 900,990 990,1440
the content of the buffer.

2143
01:10:27,440 --> 01:10:29,240
0,390 390,990 990,1140 1140,1410 1410,1800
A ensuring that only one

2144
01:10:29,240 --> 01:10:30,860
0,420 420,720 720,930 930,1320 1320,1620
process actually will be reading

2145
01:10:30,860 --> 01:10:32,360
0,90 90,450 450,510 510,990 1290,1500
or writing the buffer at

2146
01:10:32,360 --> 01:10:33,410
0,180 180,510 510,690 690,750 750,1050
any particular point of time.

2147
01:10:36,060 --> 01:10:39,180
0,600 780,990 990,1530 1530,2040 2490,3120
And it's important correct that.

2148
01:10:39,920 --> 01:10:42,080
0,390 390,870 1110,1530 1530,1680 1680,2160
Canada St wouldn't be bad

2149
01:10:42,080 --> 01:10:43,640
0,390 420,600 600,900 900,1470 1470,1560
if like say wouldn't be

2150
01:10:43,640 --> 01:10:44,810
0,300 300,390 390,660 660,870 870,1170
bad if walk {33 -}

2151
01:10:44,810 --> 01:10:45,590
0,210 210,330 330,420 420,480 480,780
ended up in the cache

2152
01:10:45,590 --> 01:10:46,640
0,600
twice.

2153
01:10:48,940 --> 01:10:50,440
0,150 150,420 420,930
In different slots.

2154
01:10:53,100 --> 01:10:54,090
0,420 420,630 630,780 780,840 840,990
Yeah, because then he could

2155
01:10:54,090 --> 01:10:55,830
0,210 210,330 330,720 720,1350 1350,1740
have the correct information, right.

2156
01:10:56,720 --> 01:10:58,100
0,450 450,780 780,840 840,1200 1200,1380
Yeah correctly, for example let's

2157
01:10:58,100 --> 01:10:59,450
0,180 180,510 510,810 810,1200 1200,1350
say process one writes I

2158
01:10:59,450 --> 01:11:02,480
0,570 930,1530 1800,2880 2880,2970 2970,3030
note a nineteen and the

2159
01:11:02,480 --> 01:11:03,620
0,180 180,510 510,810 810,960 960,1140
other process writes I know

2160
01:11:03,620 --> 01:11:05,120
0,480 480,900 900,1170 1170,1320 1320,1500
twenty correct and so if

2161
01:11:05,120 --> 01:11:06,170
0,120 120,480 480,630 630,690 690,1050
they both get a handle

2162
01:11:06,170 --> 01:11:08,000
0,180 180,270 270,840 1110,1650 1650,1830
on the buffer for that

2163
01:11:08,000 --> 01:11:09,350
0,600 600,690 690,840 840,1110 1110,1350
represents you know the the

2164
01:11:09,380 --> 01:11:11,570
0,630 630,870 870,1320 1620,1890 1890,2190
block {33, -} um, one

2165
01:11:11,570 --> 01:11:13,310
0,540 570,1050 1050,1110 1110,1260 1260,1740
my update I know eighteen

2166
01:11:13,310 --> 01:11:15,230
0,690 690,900 900,1530 1530,1680 1680,1920
Yoga in nineteen the first

2167
01:11:15,230 --> 01:11:16,820
0,150 150,390 390,660 660,1170 1170,1590
one, maybe arrange its eighteen

2168
01:11:16,820 --> 01:11:18,020
0,270 270,360 360,450 450,780 810,1200
back to the desk, then

2169
01:11:18,020 --> 01:11:19,580
0,240 270,720 720,840 840,1230
the guy that does.

2170
01:11:19,670 --> 01:11:21,740
0,630 630,1080 1080,1320 1320,1710 1710,2070
Modified nineteen read nineteen back

2171
01:11:21,860 --> 01:11:23,720
0,240 240,900 900,1380 1380,1530 1530,1860
will overwrite changes at eighteen

2172
01:11:23,720 --> 01:11:25,220
0,390 420,840 930,1140 1140,1290 1290,1500
mate right that were made

2173
01:11:25,220 --> 01:11:26,660
0,120 120,270 270,900
for an eighteen.

2174
01:11:26,690 --> 01:11:28,220
0,120 120,210 210,390 390,930 1380,1530
And so that's terrible so

2175
01:11:28,220 --> 01:11:28,850
0,60 60,360 360,450 450,540 540,630
it has to be the

2176
01:11:28,850 --> 01:11:31,760
0,630 900,1440 1440,1740 1740,2100 2100,2910
case that a block number

2177
01:11:31,790 --> 01:11:33,170
0,510 510,960 960,1050 1050,1140 1140,1380
only appears in the buffer

2178
01:11:33,170 --> 01:11:35,340
0,270 300,630 630,1170 1170,1740
cache only exactly once.

2179
01:11:38,380 --> 01:11:39,670
0,180 180,300 300,420 420,930 930,1290
And there's an invariant correct,

2180
01:11:39,670 --> 01:11:41,260
0,150 150,420 420,1350 1350,1530 1530,1590
you know you sort of

2181
01:11:41,260 --> 01:11:42,910
0,210 210,510 570,1290 1290,1530 1530,1650
have to maintain while you're

2182
01:11:42,910 --> 01:11:45,040
0,270 270,540 540,1080 1230,1740 1740,2130
doing this a block cache

2183
01:11:45,040 --> 01:11:47,680
0,630 660,930 930,1290 1290,1650 1650,2640
lap, a walking lap in

2184
01:11:47,860 --> 01:11:49,300
0,390 390,600 600,990
this week's lab.

2185
01:11:50,140 --> 01:11:51,070
0,240 240,360 360,480 480,810 810,930
Does that make sense, the

2186
01:11:51,070 --> 01:11:52,280
0,120 120,600
new variant.

2187
01:11:54,220 --> 01:11:56,080
0,150 150,360 360,630 630,1410 1410,1860
Yeah I guess tangential question

2188
01:11:56,080 --> 01:11:57,820
0,120 120,570 930,1200 1200,1500 1500,1740
to this there might be

2189
01:11:57,820 --> 01:11:59,380
0,300 300,690 690,870 870,1110 1110,1560
some blocks that have multiple

2190
01:11:59,380 --> 01:12:01,750
0,540 540,690 690,990 1590,1770 1770,2370
references to them and then

2191
01:12:01,780 --> 01:12:03,580
0,540 540,750 750,840 840,930 930,1800
maybe one of the processes

2192
01:12:03,580 --> 01:12:05,620
0,240 240,930 1140,1290 1290,1740 1740,2040
that has is touching this

2193
01:12:05,620 --> 01:12:08,350
0,510 810,1410 1410,1560 1560,2130 2160,2730
block flushes the cache by

2194
01:12:08,380 --> 01:12:09,430
0,420 420,570 570,810 810,930 930,1050
forcing a write to the

2195
01:12:09,430 --> 01:12:12,130
0,540 540,1410 1410,2100 2100,2280 2280,2700
disk, what happens to what

2196
01:12:12,310 --> 01:12:14,040
0,420 420,690 690,1200
everyone else sees.

2197
01:12:14,070 --> 01:12:17,180
0,450 450,1440 1470,1500 1710,2430
Well as I did.

2198
01:12:17,440 --> 01:12:18,670
0,420 420,540 540,840 840,1080 1080,1230
If the right okay so

2199
01:12:18,670 --> 01:12:19,840
0,180 180,390 390,690 690,780 780,1170
the first process is done

2200
01:12:19,840 --> 01:12:20,980
0,150 150,300 300,600 600,900 900,1140
at some point, we'll call

2201
01:12:20,980 --> 01:12:23,590
0,780 810,1410 1590,1800 1800,2430 2430,2610
release a game whatever it's

2202
01:12:23,860 --> 01:12:25,630
0,360 360,780 810,1140 1170,1650 1650,1770
called, um, so basically you

2203
01:12:25,630 --> 01:12:27,820
0,90 90,240 240,660 1050,1710 2040,2190
can think about a at

2204
01:12:27,820 --> 01:12:29,050
0,120 120,360 360,810 810,1020 1020,1230
the end when the first

2205
01:12:29,050 --> 01:12:30,310
0,360 360,600 600,720 720,990 990,1260
process done with it's reading

2206
01:12:30,310 --> 01:12:31,330
0,120 120,450 450,540 540,750 750,1020
and writing to that block

2207
01:12:31,330 --> 01:12:33,040
0,240 240,690 960,1080 1080,1440 1440,1710
{33 -} I call beer

2208
01:12:33,040 --> 01:12:34,540
0,390 390,510 510,600 600,1110
release with a buffer.

2209
01:12:34,540 --> 01:12:36,880
0,510 510,780 780,960 960,1530 1560,2340
And that will actually decrease

2210
01:12:36,880 --> 01:12:38,460
0,90 90,450 450,990
the reference count.

2211
01:12:38,460 --> 01:12:40,260
0,450 450,750 750,1170 1170,1590 1620,1800
Well really sleep lock, and

2212
01:12:40,260 --> 01:12:41,430
0,150 150,390 390,540 540,750 750,1170
that means that if anybody

2213
01:12:41,430 --> 01:12:42,660
0,150 150,570 570,720 720,900 900,1230
was waiting any other crashes

2214
01:12:42,660 --> 01:12:43,980
0,120 120,480 480,630 630,810 810,1320
was waiting for that particular

2215
01:12:43,980 --> 01:12:45,540
0,510 750,1110 1110,1230 1230,1440 1440,1560
buffer and will now be

2216
01:12:45,540 --> 01:12:46,920
0,180 180,240 240,450 450,780 810,1380
able to get the OS

2217
01:12:46,920 --> 01:12:48,150
0,180 180,450 450,600 600,720 720,1230
lip lock on the buffer

2218
01:12:48,390 --> 01:12:50,700
0,780 780,990 990,1500 1530,1860 1860,2310
and go read a it

2219
01:12:50,700 --> 01:12:52,770
0,240 240,1020 1260,1590 1590,1710 1710,2070
will observe a the preview

2220
01:12:52,770 --> 01:12:54,720
0,210 210,330 330,930 930,1560
than you make changes.

2221
01:12:54,810 --> 01:12:55,980
0,240 240,330 330,510 510,720 720,1170
Right, so if two processes

2222
01:12:55,980 --> 01:12:57,270
0,90 90,450 450,540 540,840 840,1290
were returning to the update

2223
01:12:57,270 --> 01:12:58,980
0,90 90,240 240,660 660,750 750,1710
I know eighteen and {1919,that}

2224
01:12:58,980 --> 01:13:00,030
0,150 150,480 480,690 690,780 780,1050
all both live in block

2225
01:13:00,030 --> 01:13:01,710
0,630 900,1230 1230,1350 1350,1440 1440,1680
43, then if the first

2226
01:13:01,710 --> 01:13:03,450
0,330 330,420 420,870 960,1170 1170,1740
process is done, it changes

2227
01:13:03,450 --> 01:13:06,510
0,360 360,450 450,1110 1470,2370 2370,3060
eighteen are visible a and

2228
01:13:06,510 --> 01:13:08,160
0,300 300,540 540,750 750,1140 1260,1650
a so the next um,

2229
01:13:08,160 --> 01:13:09,090
0,300 300,420 420,540 540,750 750,930
and so the next guy

2230
01:13:09,090 --> 01:13:10,500
0,150 150,360 360,840 840,1050 1050,1410
will actually allocate why I

2231
01:13:10,500 --> 01:13:12,390
0,120 120,840 870,1290 1290,1620 1620,1890
know nineteen because actually eighteen

2232
01:13:12,390 --> 01:13:13,410
0,120 120,480 480,630 630,720 720,1020
is marked as a file

2233
01:13:13,410 --> 01:13:14,100
0,270
now.

2234
01:13:14,820 --> 01:13:16,680
0,150 150,480 480,1110 1110,1260 1260,1860
To anybody afterwards will observe

2235
01:13:16,680 --> 01:13:17,880
0,90 90,690
the changes.

2236
01:13:20,400 --> 01:13:21,480
0,180 180,540
Makes sense.

2237
01:13:23,220 --> 01:13:25,340
0,510 900,1380
Yes, thanks.

2238
01:13:25,550 --> 01:13:26,300
0,120 120,210 210,270 270,570 570,750
And this is exactly what

2239
01:13:26,300 --> 01:13:27,350
0,120 120,390 390,510 510,630 630,1050
we hoped would be decays

2240
01:13:28,400 --> 01:13:29,960
0,630 660,900 900,1230 1230,1470 1470,1560
if one process creates an

2241
01:13:29,960 --> 01:13:31,520
0,150 150,360 360,960 960,1380 1380,1560
I know torquay file, then

2242
01:13:31,520 --> 01:13:33,440
0,450 690,1170 1170,1410 1410,1740 1740,1920
the approximate later process does

2243
01:13:33,440 --> 01:13:34,820
0,360 360,690 690,870 870,1230 1230,1380
reach you should observe that

2244
01:13:34,820 --> 01:13:35,700
0,420
file.

2245
01:13:37,650 --> 01:13:39,740
0,270 270,630 630,630
Okay, then, um.

2246
01:13:40,090 --> 01:13:42,370
0,300 300,540 540,900 900,1470 1470,2280
Because one more smaller detail,

2247
01:13:42,400 --> 01:13:43,570
0,630 660,810 810,900 900,990 990,1170
um, as you can see

2248
01:13:43,570 --> 01:13:44,440
0,150 150,210 210,300 300,600 600,870
here in the code in

2249
01:13:44,440 --> 01:13:45,660
0,630
the.

2250
01:13:45,690 --> 01:13:47,670
0,420 420,780 780,1080 1080,1140 1140,1980
Process actually takes a sleepwalk

2251
01:13:47,670 --> 01:13:48,990
0,150 150,210 210,660 870,1200 1200,1320
on the buffer and so

2252
01:13:48,990 --> 01:13:50,010
0,90 90,360 360,540 540,660 660,1020
the sleep lock is slightly

2253
01:13:50,010 --> 01:13:52,890
0,360 360,840 1110,1740 1770,2580 2580,2880
different than a regular or

2254
01:13:52,950 --> 01:13:54,810
0,270 270,540 540,990 1200,1530 1530,1860
a spin lock let's look

2255
01:13:54,810 --> 01:13:55,560
0,120 120,390 390,630 630,720 720,750
at sleep lock for a

2256
01:13:55,560 --> 01:13:56,620
0,540
second.

2257
01:13:57,050 --> 01:13:58,400
0,690 690,840 840,1050 1050,1260 1260,1350
And you see what it

2258
01:13:58,400 --> 01:13:59,320
0,420
is.

2259
01:13:59,350 --> 01:14:00,220
0,240 240,300 300,390 390,480 480,870
So we need to acquire

2260
01:14:00,220 --> 01:14:01,600
0,750
sleepwalk.

2261
01:14:02,040 --> 01:14:04,320
0,1080 1080,1470 1470,1650 1650,1740 1740,2280
Yeah, and when it does,

2262
01:14:04,350 --> 01:14:05,760
0,150 150,930 930,1080 1080,1170 1170,1410
it requires you know some

2263
01:14:05,760 --> 01:14:08,700
0,480 930,2130 2130,2490 2490,2550 2550,2940
fuel basically requires a spin

2264
01:14:08,700 --> 01:14:09,990
0,360 360,480 480,570 570,1140 1140,1290
lock that is associated with

2265
01:14:09,990 --> 01:14:12,450
0,360 360,750 1170,1710 2010,2190 2190,2460
sleep lock, if the lock

2266
01:14:12,450 --> 01:14:13,940
0,90 90,420 420,1020
is actually health.

2267
01:14:14,170 --> 01:14:15,100
0,240 240,360 360,630 630,840 840,930
Okay, the spin lock is

2268
01:14:15,100 --> 01:14:18,100
0,420 420,960 1230,1950 1950,2790 2970,3000
held then, um, um, um,

2269
01:14:18,100 --> 01:14:19,060
0,330 330,450 450,630 630,720 720,960
if the walk is actually

2270
01:14:19,060 --> 01:14:20,650
0,390 390,870 930,1140 1140,1290 1290,1590
held so okay, let me.

2271
01:14:22,110 --> 01:14:23,430
0,450 450,720 720,930 930,1200 1200,1320
Firstly, C H Fox the

2272
01:14:23,430 --> 01:14:24,810
0,150 150,420 420,930 930,1080 1080,1380
h file contains a box

2273
01:14:24,810 --> 01:14:25,900
0,510
field.

2274
01:14:25,900 --> 01:14:28,180
0,780 930,1680
Um, and.

2275
01:14:30,380 --> 01:14:31,880
0,270 270,390 390,600 600,870
Um, and that's it.

2276
01:14:33,800 --> 01:14:35,680
0,300 300,420 420,1230
And so basically.

2277
01:14:36,230 --> 01:14:37,200
0,480
HMM.

2278
01:14:38,110 --> 01:14:40,120
0,360 360,570 570,780 780,1320 1320,2010
That was the spin lock,

2279
01:14:40,150 --> 01:14:42,680
0,330 330,570 570,900 900,1290
yeah, we're spin lock.

2280
01:14:46,000 --> 01:14:48,240
0,510 960,1650
Oh, um.

2281
01:14:50,110 --> 01:14:51,490
0,270 270,480 480,540 540,780 780,1380
Yeah there's a spin lock.

2282
01:14:53,000 --> 01:14:54,280
0,690
AM.

2283
01:14:55,280 --> 01:14:56,620
0,450 450,690
Good move.

2284
01:15:01,020 --> 01:15:03,720
0,390 1200,1770 2130,2280 2280,2460 2460,2700
Sorry, um, and then if

2285
01:15:03,720 --> 01:15:04,860
0,120 120,360 360,450 450,690 690,1140
the lock is actually held

2286
01:15:05,010 --> 01:15:06,000
0,300 300,570 570,660 660,900 900,990
c block is held it

2287
01:15:06,000 --> 01:15:07,500
0,180 180,420 420,510 510,960
actually goes to sleep.

2288
01:15:08,160 --> 01:15:10,140
0,150 150,420 420,840 840,1380
So the schedules itself.

2289
01:15:10,140 --> 01:15:12,630
0,690 690,1260 1680,2190 2190,2400 2400,2490
Um, and why, why do

2290
01:15:12,630 --> 01:15:13,770
0,150 150,420 420,570 570,750 750,1140
you think for these buffers

2291
01:15:13,770 --> 01:15:15,660
0,210 210,420 420,780 780,1440 1560,1890
are we {using's -} sleep

2292
01:15:15,660 --> 01:15:16,980
0,270 270,540 540,630 630,840 840,1320
walks instead of spin walks.

2293
01:15:17,820 --> 01:15:19,110
0,120 120,240 240,810 810,1020 1020,1290
I guess indirectly we're using

2294
01:15:19,110 --> 01:15:20,340
0,240 240,450 450,510 510,930 930,1230
spin locks to implement sleep

2295
01:15:20,340 --> 01:15:21,960
0,450 720,1020 1020,1200 1200,1410 1410,1620
walks, but why not just

2296
01:15:21,960 --> 01:15:23,500
0,360 390,930
use regular.

2297
01:15:26,760 --> 01:15:28,560
0,570 570,840 840,1560 1560,1740 1740,1800
Because disk operations take a

2298
01:15:28,560 --> 01:15:29,740
0,210 210,630
long time.

2299
01:15:29,740 --> 01:15:32,110
0,540 570,900 900,1260 1260,1800 2010,2370
Yeah there's multiple regions, um

2300
01:15:32,110 --> 01:15:32,980
0,210 210,270 270,480 480,570 570,870
there's all kinds of rules

2301
01:15:32,980 --> 01:15:36,130
0,210 210,750 750,2130 2460,2790 2790,3150
correct restrictions on a on

2302
01:15:36,130 --> 01:15:37,870
0,630 660,930 930,1350 1440,1680 1680,1740
a spin watch, what is

2303
01:15:37,870 --> 01:15:38,980
0,180 180,270 270,420 420,960 960,1110
one of the restrictions on

2304
01:15:38,980 --> 01:15:40,160
0,210 210,720
spin watch.

2305
01:15:43,990 --> 01:15:45,190
0,210 210,450 450,540 540,780 780,1200
Well, what do you have

2306
01:15:45,190 --> 01:15:46,660
0,90 90,240 240,810 1140,1350 1350,1470
to be off, yeah they

2307
01:15:46,660 --> 01:15:48,500
0,210 210,570 570,840 840,1260
turn interrupts off Greg.

2308
01:15:48,830 --> 01:15:50,810
0,330 330,570 570,720 720,1590 1740,1980
And so we were we

2309
01:15:50,810 --> 01:15:53,540
0,390 390,570 570,1350 1710,2250 2250,2730
started this operation while holding

2310
01:15:53,540 --> 01:15:55,400
0,90 90,660 960,1530 1530,1800 1800,1860
a buffer while holding a

2311
01:15:55,400 --> 01:15:56,330
0,240 240,480 480,570 570,630 630,930
spin lock on the buffer

2312
01:15:56,330 --> 01:15:57,200
0,120 120,270 270,390 390,540 540,870
and then we would never

2313
01:15:57,200 --> 01:15:58,700
0,330 330,540 540,630 630,1110
hear from the disk.

2314
01:15:58,700 --> 01:16:00,170
0,180 180,510 510,810 810,1170 1170,1470
Well, maybe another coral here,

2315
01:16:00,170 --> 01:16:01,160
0,390 390,540 540,660 660,810 810,990
but if we had only

2316
01:16:01,160 --> 01:16:02,030
0,180 180,540 540,630 630,750 750,870
one core and we would

2317
01:16:02,030 --> 01:16:03,290
0,210 210,420 420,630 630,810 930,1260
never hear from it right.

2318
01:16:05,320 --> 01:16:06,730
0,330 330,480 480,930 1170,1320 1320,1410
And for more for the

2319
01:16:06,730 --> 01:16:07,840
0,210 210,630 630,840 840,960 960,1110
same reasons you know you're

2320
01:16:07,840 --> 01:16:08,500
0,180 180,390 390,450 450,570 570,660
not allowed to go to

2321
01:16:08,500 --> 01:16:09,910
0,390 390,780 780,1080 1080,1170 1170,1410
sleep while holding a spin

2322
01:16:09,910 --> 01:16:10,760
0,390
walk.

2323
01:16:10,930 --> 01:16:12,310
0,360 360,660 660,810 810,1260 1260,1380
Um, and so therefore we

2324
01:16:12,310 --> 01:16:14,110
0,240 240,720 780,1350 1350,1650 1650,1800
have these sleep locks that

2325
01:16:14,110 --> 01:16:15,490
0,30 30,210 210,330 330,1050 1050,1380
are sort of Long-term walks,

2326
01:16:15,490 --> 01:16:18,700
0,90 90,240 240,660 1050,2850 2880,3210
if you will for for

2327
01:16:18,700 --> 01:16:20,280
0,180 180,510 510,660 660,1110
that particular use case.

2328
01:16:20,310 --> 01:16:21,540
0,300 300,390 390,480 480,600 600,1230
So that we can hold

2329
01:16:21,780 --> 01:16:24,780
0,870 1020,1440 1440,2040 2700,2940 2940,3000
a lock source one of

2330
01:16:24,780 --> 01:16:25,950
0,60 60,480 480,570 570,810 810,1170
the advantages of sleep boxes

2331
01:16:25,950 --> 01:16:26,610
0,120 120,210 210,330 330,540 540,660
that we can hold them

2332
01:16:26,610 --> 01:16:28,920
0,360 360,960 1230,1770 1770,2040 2040,2310
across interrupts hold becomes disk

2333
01:16:28,920 --> 01:16:30,000
0,570 570,720 720,810 810,990 990,1080
operations, we can hold them

2334
01:16:30,000 --> 01:16:30,960
0,150 150,330 330,570 570,630 630,960
for long periods of time.

2335
01:16:32,010 --> 01:16:33,690
0,150 150,240 240,630 630,1350 1380,1680
And we're not if we're

2336
01:16:33,690 --> 01:16:35,340
0,510 510,720 720,870 870,1200 1200,1650
waiting on that lock worlds

2337
01:16:35,340 --> 01:16:37,410
0,360 360,960 1230,1590 1590,1680 1680,2070
not a keeping the CPU

2338
01:16:37,410 --> 01:16:38,490
0,330 330,510 510,930 930,1020 1020,1080
busy or spending on the

2339
01:16:38,490 --> 01:16:40,320
0,600 660,960 960,1320 1320,1740 1740,1830
CPU, we're basically releasing the

2340
01:16:40,320 --> 01:16:42,560
0,420 420,600 600,1110 1110,1770
CPU by calling asleep.

2341
01:16:43,530 --> 01:16:44,780
0,120 120,210 210,330 330,660
Does that make sense.

2342
01:16:49,580 --> 01:16:51,140
0,240 240,540 540,690 690,990
Any questions about this.

2343
01:16:56,490 --> 01:16:59,160
0,1230 1410,1950 1950,2220 2220,2310 2310,2670
Okay, let's look at one

2344
01:16:59,160 --> 01:17:02,250
0,480 480,1230 1260,1680 1680,2400 2610,3090
more, um thing, um, which

2345
01:17:02,250 --> 01:17:03,700
0,960
is.

2346
01:17:06,160 --> 01:17:07,900
0,540 540,600 600,1200
Be a release.

2347
01:17:08,190 --> 01:17:09,570
0,510 510,660 660,720 720,930 930,1380
Um, so we looked already

2348
01:17:09,570 --> 01:17:10,620
0,60 60,270 270,600 600,690 690,1050
a little bit, you basically

2349
01:17:10,620 --> 01:17:11,910
0,120 120,300 300,570 570,840 840,1290
would be released us releases

2350
01:17:11,910 --> 01:17:13,560
0,120 120,390 390,840 870,1230 1230,1650
to sleep lock then acquires

2351
01:17:13,560 --> 01:17:15,270
0,180 180,480 480,840 840,1350 1350,1710
the cache log difference reference

2352
01:17:15,270 --> 01:17:16,560
0,300 300,390 390,720 720,840 840,1290
count to indicate that one

2353
01:17:16,560 --> 01:17:17,970
0,390 390,510 510,690 690,1020 1020,1410
process is not interested anymore,

2354
01:17:17,970 --> 01:17:19,500
0,90 90,270 270,570 570,1020
in this particular buffer.

2355
01:17:19,590 --> 01:17:21,030
0,210 210,450 450,720 720,1170 1170,1440
And then, if a if

2356
01:17:21,030 --> 01:17:22,170
0,90 90,270 270,450 450,510 510,1140
the ref count is zero,

2357
01:17:22,440 --> 01:17:25,740
0,720 720,1470 1710,2100 2100,2490 2520,3300
um, the um, it manipulates

2358
01:17:25,740 --> 01:17:28,460
0,840 1320,2190
the um.

2359
01:17:28,460 --> 01:17:29,480
0,420 420,480 480,780 780,840 840,1020
List of buffers a little

2360
01:17:29,480 --> 01:17:30,200
0,210 210,420 420,510 510,600 600,720
bit, what does it do

2361
01:17:30,200 --> 01:17:31,280
0,540
here.

2362
01:17:38,220 --> 01:17:40,540
0,240 240,990 990,1620
It inserts the.

2363
01:17:40,540 --> 01:17:42,880
0,330 330,750 750,1500 1620,1830 1830,2340
I'm being into the position

2364
01:17:42,880 --> 01:17:46,150
0,810 1140,1860 1890,2460 2640,3150 3150,3270
after be had inside of

2365
01:17:46,150 --> 01:17:48,340
0,330 360,1200 1320,1680 1680,2070 2070,2190
the cyclist yeah, where does

2366
01:17:48,340 --> 01:17:49,330
0,90 90,450 450,690 690,870 870,990
it visually go, what does

2367
01:17:49,330 --> 01:17:50,500
0,180 180,720
that mean.

2368
01:17:52,340 --> 01:17:53,300
0,180 180,360 360,480 480,750 750,960
So let's go back up

2369
01:17:53,300 --> 01:17:55,460
0,450 450,660 660,960 960,1260 1620,2160
correctly let's look at ned.

2370
01:17:56,640 --> 01:17:58,040
0,120 120,390 390,810
It was a.

2371
01:17:58,130 --> 01:18:01,610
0,720 720,1320 1320,1950 2010,2670 2850,3480
Most recently used yeah basically

2372
01:18:01,610 --> 01:18:02,780
0,300 300,570 570,690 690,1110 1110,1170
moves into the position of

2373
01:18:02,780 --> 01:18:04,250
0,90 90,390 390,810 810,1080 1080,1470
the most recently used buffer

2374
01:18:04,280 --> 01:18:05,220
0,360
right.

2375
01:18:05,340 --> 01:18:06,870
0,150 150,270 270,390 390,1260 1260,1530
And this is important because

2376
01:18:06,870 --> 01:18:09,900
0,570 870,1680 2040,2400 2400,2550 2550,3030
when um when we cannot

2377
01:18:09,900 --> 01:18:11,310
0,510 660,840 840,1230 1230,1320 1320,1410
find the block in the

2378
01:18:11,310 --> 01:18:12,600
0,300 300,840
block Ash.

2379
01:18:12,770 --> 01:18:14,780
0,750 990,1290 1290,1440 1440,1530 1530,2010
Then we need to fix

2380
01:18:14,810 --> 01:18:16,490
0,480 480,570 570,750 750,1260 1290,1680
something to make space right.

2381
01:18:17,280 --> 01:18:18,630
0,750 780,1080 1080,1170 1170,1290 1290,1350
And so we're going to

2382
01:18:18,630 --> 01:18:19,590
0,180 180,360 360,420 420,780 780,960
go through the block as

2383
01:18:19,590 --> 01:18:20,730
0,90 90,330 330,630 630,780 780,1140
we go and we basically

2384
01:18:20,730 --> 01:18:22,770
0,360 360,480 480,1500 1500,1830 1830,2040
start from zero recently used

2385
01:18:22,770 --> 01:18:24,680
0,330
one.

2386
01:18:24,800 --> 01:18:26,120
0,150 150,390 390,600 600,840 840,1320
And dig that one first.

2387
01:18:27,540 --> 01:18:29,220
0,390 390,630 630,870 870,1350 1350,1680
Um, and so we just

2388
01:18:29,220 --> 01:18:30,540
0,180 180,240 240,630 630,870 900,1320
used the buffer as very

2389
01:18:30,540 --> 01:18:32,460
0,600 600,780 780,870 870,1350 1350,1920
unlikely that it actually evicted.

2390
01:18:33,540 --> 01:18:34,500
0,540 540,630 630,750 750,810 810,960
Why is that a good

2391
01:18:34,500 --> 01:18:35,580
0,600
policy.

2392
01:18:41,610 --> 01:18:44,070
0,630 630,1080 1080,1500 1500,1830 1860,2460
Generally systems obey a temporal

2393
01:18:44,070 --> 01:18:46,530
0,690 1110,1650 1710,1950 1950,2190 2190,2460
locality, yeah right, so if

2394
01:18:46,530 --> 01:18:48,570
0,90 90,390 390,660 1050,1590 1590,2040
the block is reasonably used

2395
01:18:48,570 --> 01:18:49,920
0,240 240,600 600,660 660,900 900,1350
it's probably a good indicator

2396
01:18:49,920 --> 01:18:50,700
0,150 150,210 210,420 420,630 630,780
that it might actually be

2397
01:18:50,700 --> 01:18:52,300
0,240 240,570 570,1080
used again quickly.

2398
01:18:52,390 --> 01:18:53,410
0,270 270,450 450,750 750,810 810,1020
And so it's a good

2399
01:18:53,410 --> 01:18:54,640
0,330 330,600 600,660 660,990 990,1230
idea not to evict it.

2400
01:18:55,320 --> 01:18:57,030
0,120 120,600 600,960 960,1350 1350,1710
You wanna and it's generally

2401
01:18:57,030 --> 01:18:58,290
0,180 180,240 240,600 600,840 840,1260
sort of if you even

2402
01:18:58,620 --> 01:19:00,960
0,210 210,510 510,1290 1590,2070 2070,2340
you have locality Catholic allie

2403
01:19:00,960 --> 01:19:02,010
0,300 300,390 390,660 660,810 810,1050
and the block that is

2404
01:19:02,010 --> 01:19:05,070
0,120 120,510 630,1500 1590,2790 2790,3060
you know least recently used

2405
01:19:05,070 --> 01:19:06,360
0,330 330,420 420,1050 1050,1140 1140,1290
probably the block that is

2406
01:19:06,360 --> 01:19:07,710
0,210 210,540 540,930 930,1050 1050,1350
also most likely to be

2407
01:19:07,710 --> 01:19:09,300
0,300 300,360 360,420 420,960 1110,1590
used in the future and

2408
01:19:09,300 --> 01:19:10,080
0,120 120,360 360,420 420,570 570,780
so that's a good one

2409
01:19:10,080 --> 01:19:11,000
0,90 90,480
to evict.

2410
01:19:12,220 --> 01:19:13,520
0,120 120,210 210,360 360,690
Does that make sense.

2411
01:19:18,160 --> 01:19:20,260
0,570 810,1560
Okay, um.

2412
01:19:21,920 --> 01:19:23,990
0,600 660,1380 1410,1650 1650,1890 1890,2070
So, um, let me go

2413
01:19:23,990 --> 01:19:25,280
0,300 300,420 420,720 750,1110 1110,1290
back to my slides here

2414
01:19:25,280 --> 01:19:27,180
0,450 660,1320
show a.

2415
01:19:27,440 --> 01:19:28,310
0,270 270,420 420,480 480,690 690,870
So there's a little bit

2416
01:19:28,310 --> 01:19:31,310
0,270 270,960 1140,1770 1770,2670 2670,3000
of a slight excursion in

2417
01:19:31,310 --> 01:19:32,420
0,510
the.

2418
01:19:32,800 --> 01:19:35,620
0,300 300,1020 1380,1950
B cache cookies.

2419
01:19:35,770 --> 01:19:38,040
0,480 480,660 660,990 990,1680
A do block cache.

2420
01:19:40,200 --> 01:19:41,340
0,210 210,270 270,480 480,780 780,1140
There's a couple interesting things

2421
01:19:41,340 --> 01:19:42,270
0,120 120,180 180,540 540,780 780,930
at the point at to

2422
01:19:42,270 --> 01:19:43,230
0,450 450,510 510,630 630,810 810,960
correct you know there's this

2423
01:19:43,230 --> 01:19:45,150
0,660 660,810 810,1020 1020,1260 1260,1920
invariant that there's only one

2424
01:19:45,330 --> 01:19:46,660
0,810
copy.

2425
01:19:47,020 --> 01:19:48,820
0,240 240,600 600,1290
Of blocking memory.

2426
01:19:50,840 --> 01:19:52,250
0,180 180,300 300,390 390,810 810,1410
And as an important variant

2427
01:19:52,280 --> 01:19:53,660
0,240 330,660 660,750 750,1230 1230,1380
that must be maintained by

2428
01:19:53,660 --> 01:19:54,920
0,360 360,600 600,750 750,1080 1080,1260
block Ash, it has these

2429
01:19:54,920 --> 01:19:56,510
0,390 390,870 900,1140 1140,1410 1410,1590
sleep locks are different types

2430
01:19:56,510 --> 01:19:57,890
0,90 90,630 630,960 960,1140 1140,1380
of locks than the ones

2431
01:19:57,890 --> 01:19:59,720
0,90 90,270 270,450 450,1050 1620,1830
that we've seen before, that

2432
01:19:59,720 --> 01:20:01,820
0,90 90,450 450,810 810,1590 1920,2100
can span io operations that

2433
01:20:01,820 --> 01:20:03,320
0,540 540,660 660,960 960,1110 1110,1500
implements you know, are you

2434
01:20:03,350 --> 01:20:05,630
0,360 360,750 750,1170 1170,1620 1620,2280
least recently catching replacement policy

2435
01:20:05,840 --> 01:20:07,610
0,270 270,330 330,570 570,1560 1590,1770
need to have z two

2436
01:20:07,610 --> 01:20:09,300
0,450 450,630 630,1170
levels of locking.

2437
01:20:09,540 --> 01:20:11,220
0,990
DO.

2438
01:20:11,370 --> 01:20:13,440
0,600 900,1050 1050,1200 1200,1800 1800,2070
A in its implementation, one

2439
01:20:13,440 --> 01:20:14,730
0,330 330,540 540,900 900,1230 1230,1290
level to basically protect the

2440
01:20:14,730 --> 01:20:16,560
0,150 150,510 510,960 960,1200 1200,1830
be cash internal data structures,

2441
01:20:16,860 --> 01:20:17,730
0,180 180,300 300,540 540,780 780,870
and then one level of

2442
01:20:17,730 --> 01:20:19,050
0,390 390,600 600,900 900,1200 1200,1320
walking through sleep locks to

2443
01:20:19,050 --> 01:20:22,140
0,540 570,1380 1380,2160 2160,2670
actually lock individual buffers.

2444
01:20:24,010 --> 01:20:25,140
0,630
I'm.

2445
01:20:26,570 --> 01:20:27,940
0,240 240,330 330,450 450,840
Does that make sense.

2446
01:20:29,230 --> 01:20:30,920
0,480 510,1140
Okay, I'm.

2447
01:20:32,200 --> 01:20:33,280
0,150 150,270 270,720 750,990 990,1080
I'm going to run out

2448
01:20:33,280 --> 01:20:34,810
0,60 60,330 330,450 450,870 870,1530
of time so let me

2449
01:20:34,810 --> 01:20:36,700
0,330 330,780 1080,1530 1530,1650 1650,1890
stop here, um, you know

2450
01:20:36,820 --> 01:20:38,560
0,330 330,960 960,1080 1080,1560 1560,1740
quitting, summarized what we've seen

2451
01:20:38,560 --> 01:20:39,400
0,150 150,420 420,600 600,690 690,840
so far and we're going

2452
01:20:39,400 --> 01:20:40,240
0,390 390,510 510,600 600,720 720,840
wednesday and we're going to

2453
01:20:40,270 --> 01:20:42,970
0,450 450,690 690,1080 1080,1800 2130,2700
focus really on crash safety

2454
01:20:43,210 --> 01:20:44,620
0,210 210,720 720,810 810,1020 1050,1410
so visibly you know file

2455
01:20:44,620 --> 01:20:45,940
0,420 510,690 690,900 900,1080 1080,1320
system is on this data

2456
01:20:45,940 --> 01:20:46,920
0,630
structure.

2457
01:20:47,410 --> 01:20:48,610
0,540 540,840 840,900 900,960 960,1200
Basically, most of the lecture

2458
01:20:48,610 --> 01:20:50,050
0,270 270,570 570,1080 1080,1320 1320,1440
today, we're focusing on the

2459
01:20:50,050 --> 01:20:51,520
0,630 660,870 870,1050 1080,1260 1260,1470
layout of the on this

2460
01:20:51,520 --> 01:20:53,620
0,300 300,720 750,1080 1320,1560 1710,2100
native structure of the xc

2461
01:20:53,620 --> 01:20:55,870
0,630 780,1050 1050,1350 1350,1620 1620,2250
six zero this native structure

2462
01:20:55,930 --> 01:20:57,640
0,390 390,780 780,1380 1410,1530 1530,1710
on this and you know

2463
01:20:57,640 --> 01:20:58,720
0,330 330,600 600,870 870,1050 1050,1080
shot actually six has a

2464
01:20:58,720 --> 01:21:00,180
0,270 270,570 570,990
very simple one.

2465
01:21:04,480 --> 01:21:05,680
0,330 330,450 450,540 540,990 990,1200
But you can imagine like

2466
01:21:05,680 --> 01:21:07,300
0,60 60,150 150,570 570,780 780,1620
you know implementing more complicated

2467
01:21:07,300 --> 01:21:08,530
0,300 630,900 900,960 960,1110 1110,1230
one and the other thing

2468
01:21:08,530 --> 01:21:09,640
0,120 120,360 360,720 720,840 840,1110
that we spend much time

2469
01:21:09,640 --> 01:21:10,540
0,240 240,390 390,510 510,660 660,900
looking at is this block

2470
01:21:10,540 --> 01:21:11,860
0,300 300,510 510,660 660,1170 1170,1320
cache which is crucial for

2471
01:21:11,860 --> 01:21:14,050
0,660 900,1200 1200,1470 1470,1590 1590,2190
performance because reading and writing

2472
01:21:14,050 --> 01:21:15,460
0,480 480,660 660,990 990,1110 1110,1410
typically to disk is actually

2473
01:21:15,460 --> 01:21:16,960
0,690 720,810 810,1170 1170,1350 1350,1500
expensive, you know we're there

2474
01:21:16,960 --> 01:21:18,370
0,360 390,750 750,810 810,1080 1080,1410
for hundreds of micro seconds

2475
01:21:18,370 --> 01:21:20,290
0,120 120,960 1170,1590 1590,1650 1650,1920
to milliseconds and the block

2476
01:21:20,290 --> 01:21:22,660
0,240 240,570 570,1080 1080,1380 1740,2370
cache basically ensures that you

2477
01:21:22,780 --> 01:21:23,800
0,270 270,540 540,600 600,900 900,1020
know if a block was

2478
01:21:23,800 --> 01:21:25,450
0,660 690,1110 1110,1200 1200,1290 1290,1650
recently read from the disk

2479
01:21:25,450 --> 01:21:26,590
0,360 360,570 570,780 780,990 990,1140
were actually not reading it

2480
01:21:26,590 --> 01:21:27,840
0,330 330,540 540,600 600,990
again from the disk.

2481
01:21:28,620 --> 01:21:30,750
0,480 510,660 660,960 990,1620 1710,2130
Okay, and then wednesday, um

2482
01:21:30,750 --> 01:21:31,560
0,120 120,240 240,300 300,450 450,810
I'm going to talk about

2483
01:21:31,620 --> 01:21:33,080
0,450 450,840
crash safety.

2484
01:21:33,890 --> 01:21:36,230
0,330 330,540 540,690 690,990 1350,2340
Um, which is a fascinating,

2485
01:21:36,440 --> 01:21:38,060
0,360 360,600 600,1230 1260,1380 1380,1620
um, another aspect of file

2486
01:21:38,060 --> 01:21:39,290
0,270 270,660 660,750 750,1050 1050,1230
system design, in fact will

2487
01:21:39,290 --> 01:21:40,580
0,270 270,480 480,870 870,990 990,1290
spend two lectures on crash

2488
01:21:40,580 --> 01:21:41,660
0,540
safety.

2489
01:21:41,660 --> 01:21:43,220
0,300 300,630 630,720 720,1110 1110,1560
We'll see a logging design

2490
01:21:43,220 --> 01:21:44,570
0,240 240,570 570,750 750,1260 1260,1350
on wednesday that's slow and

2491
01:21:44,570 --> 01:21:45,500
0,150 150,360 360,600 600,750 750,930
then next week we'll look

2492
01:21:45,500 --> 01:21:47,390
0,180 180,660 660,1080 1080,1530 1530,1890
at how Linux HD three

2493
01:21:47,390 --> 01:21:48,920
0,480 480,960 1080,1350 1350,1440 1440,1530
does logging which is a

2494
01:21:48,920 --> 01:21:50,920
0,210 210,390 390,1050 1050,1410
much more faster ski.

2495
01:21:51,620 --> 01:21:52,280
0,180 180,330 330,390 390,480 480,660
Um, if you have any

2496
01:21:52,280 --> 01:21:53,750
0,210 210,570 570,750 750,1320 1320,1470
other questions feel peacefully to

2497
01:21:53,750 --> 01:21:55,460
0,240 240,780 810,1200 1200,1380 1380,1710
hang around and I'm happy

2498
01:21:55,460 --> 01:21:57,140
0,300 300,600 600,900 900,1590 1590,1680
to answer them, otherwise you

2499
01:21:57,140 --> 01:21:57,940
0,240
know.

2500
01:21:58,000 --> 01:21:59,700
0,390 390,540 540,1080
See you wednesday.

2501
01:22:02,160 --> 01:22:03,880
0,300 300,480 480,840
Alright, thank you.

2502
01:22:04,370 --> 01:22:05,810
0,420 480,690 690,900 900,990 990,1440
A I have a question

2503
01:22:05,810 --> 01:22:08,140
0,600 600,840 840,1830
about beer release.

2504
01:22:08,330 --> 01:22:09,380
0,480
Yes.

2505
01:22:09,640 --> 01:22:12,190
0,450 450,1110 1170,1650 1650,2100 2100,2550
Um, so it seems like

2506
01:22:12,250 --> 01:22:15,460
0,360 360,990 990,1380 1380,2340 2460,3210
it releases the blocks block

2507
01:22:15,520 --> 01:22:18,310
0,210 210,510 510,900 930,1380 1650,2790
and after that it modifies

2508
01:22:18,490 --> 01:22:20,720
0,210 210,480 480,1110 1230,1830
the rough count mhm.

2509
01:22:21,180 --> 01:22:23,340
0,510 510,660 660,840 840,1470 1710,2160
Why is that OK yo

2510
01:22:23,370 --> 01:22:24,460
0,570
portion.

2511
01:22:25,580 --> 01:22:26,750
0,180 180,330 330,390 390,510 510,1170
So what do we know

2512
01:22:26,930 --> 01:22:27,980
0,240 240,510 510,660 660,900 900,1050
you know so let's say

2513
01:22:27,980 --> 01:22:29,000
0,150 150,330 330,630 630,720 720,1020
we do release the sleep

2514
01:22:29,000 --> 01:22:30,290
0,510 570,870 870,1020 1020,1170 1170,1290
lock, um, so if some

2515
01:22:30,290 --> 01:22:32,360
0,180 180,780 1410,1740 1740,1860 1860,2070
other guy or some other

2516
01:22:32,360 --> 01:22:34,490
0,390 390,900 900,1350 1350,1560 1560,2130
process actually, um was waiting,

2517
01:22:34,490 --> 01:22:35,870
0,210 210,420 420,600 600,1050 1050,1380
or what doing acquire snoop

2518
01:22:35,870 --> 01:22:37,010
0,390 420,720 720,900 900,1020 1020,1140
lock a what does that

2519
01:22:37,010 --> 01:22:38,180
0,240 240,450 450,540 540,720 720,1170
mean about the ref count.

2520
01:22:41,300 --> 01:22:44,320
0,420 420,570 570,1290 1320,2340
But it was zero.

2521
01:22:45,230 --> 01:22:47,630
0,1140 1140,1470 1470,1590 1590,1950 1950,2400
No correct, so if n

2522
01:22:47,630 --> 01:22:49,730
0,570 570,690 690,1080 1080,1620 1620,2100
processes are waiting for a

2523
01:22:49,730 --> 01:22:53,360
0,600 750,2370 2490,2730 2730,3120
buffer, okay check out.

2524
01:22:54,390 --> 01:22:56,670
0,270 270,630 660,870 870,1500 1740,2280
There was a twist one.

2525
01:22:57,290 --> 01:22:58,580
0,330 330,570 570,810 810,1080 1080,1290
Yo more than one group

2526
01:22:58,580 --> 01:22:59,750
0,60 60,300 300,600 600,750 750,1170
of ten process you're waiting

2527
01:22:59,750 --> 01:23:00,500
0,120 120,210 210,390 390,630 630,750
in the f can be

2528
01:23:00,500 --> 01:23:01,460
0,360
ten.

2529
01:23:01,640 --> 01:23:03,320
0,540 570,1170
Yeah, okay.

2530
01:23:03,380 --> 01:23:06,140
0,480 480,1110 1320,2190 2190,2370 2370,2760
And so, um, is this

2531
01:23:06,140 --> 01:23:07,190
0,330 330,540 540,780 780,990 990,1050
only this only line of

2532
01:23:07,190 --> 01:23:08,090
0,270 270,390 390,480 480,810 810,900
code what it does is

2533
01:23:08,090 --> 01:23:09,380
0,390 390,510 510,960 960,1050 1050,1290
basically it updates the ref

2534
01:23:09,380 --> 01:23:10,760
0,270 270,390 390,570 570,870 870,1380
count for just one guy

2535
01:23:10,790 --> 01:23:11,870
0,120 120,210 210,450 450,900 900,1080
which is one process that

2536
01:23:11,870 --> 01:23:13,010
0,240 240,390 390,450 450,990 990,1140
actually did the release and

2537
01:23:13,010 --> 01:23:14,270
0,210 210,630 630,690 690,1020 1020,1260
it reduces the death death

2538
01:23:14,270 --> 01:23:16,160
0,240 240,600 630,960 960,1350
camp to buy one.

2539
01:23:16,490 --> 01:23:17,990
0,480 660,870 870,1080 1080,1350 1350,1500
And if other people were

2540
01:23:17,990 --> 01:23:20,120
0,510 630,780 780,1440 1470,1860 1860,2130
waiting and never rest was

2541
01:23:20,120 --> 01:23:21,380
0,330 330,570 570,960 960,1110 1110,1260
definitely not zero will do

2542
01:23:21,380 --> 01:23:22,610
0,210 210,390 390,690 690,1080 1080,1230
it will never execute this

2543
01:23:22,610 --> 01:23:23,460
0,360
code.

2544
01:23:25,640 --> 01:23:28,130
0,510 540,1140 1500,1890 1890,1890 1890,2490
OK, OK, OK I see

2545
01:23:28,160 --> 01:23:29,390
0,150 150,360 360,900 900,990 990,1230
I I think I see

2546
01:23:29,390 --> 01:23:30,380
0,420
okay.

2547
01:23:30,380 --> 01:23:32,360
0,570 660,1050 1050,1380 1380,1620 1620,1980
A rather question was why

2548
01:23:32,360 --> 01:23:34,120
0,600 660,1200
is a.

2549
01:23:34,460 --> 01:23:37,010
0,720 720,1020 1020,1710 1980,2340 2340,2550
Wise to bits to buy

2550
01:23:37,010 --> 01:23:39,500
0,540 540,840 840,1170 1170,1650 1650,2490
enough for a nine number,

2551
01:23:39,590 --> 01:23:41,420
0,300 300,840
it's not.

2552
01:23:41,450 --> 01:23:43,310
0,210 210,600 630,1110 1110,1500 1500,1860
Is a ridiculously small correct

2553
01:23:43,520 --> 01:23:45,020
0,780 780,870 870,1110 1110,1380 1380,1500
because how many items can

2554
01:23:45,020 --> 01:23:46,160
0,90 90,450
you have.

2555
01:23:46,800 --> 01:23:48,330
0,510 600,930 930,1080 1080,1200 1200,1530
A two to the power

2556
01:23:48,330 --> 01:23:49,520
0,180 180,690
of each.

2557
01:23:49,520 --> 01:23:52,850
0,480 510,900 900,2070 2250,2880 2880,3330
Yeah yeah yeah yeah, whatever

2558
01:23:52,850 --> 01:23:56,240
0,150 150,480 720,1770 1770,2010 2790,3390
two byte sixteen bit sixteen

2559
01:23:56,570 --> 01:23:58,310
0,780 810,1140 1140,1290 1290,1560 1560,1740
thirteen thirty two thousand nine

2560
01:23:58,310 --> 01:23:59,220
0,330
notes.

2561
01:23:59,540 --> 01:24:00,290
0,180 180,210 210,420 420,420 420,750
That's a lot I know

2562
01:24:00,290 --> 01:24:02,150
0,570 570,870 870,1590 1620,1770 1770,1860
for nineteen sixties or the

2563
01:24:02,150 --> 01:24:03,650
0,330 330,450 450,1050 1080,1320 1320,1500
sixties and seventies, um, but

2564
01:24:03,650 --> 01:24:04,910
0,330 330,510 510,750 750,870 870,1260
certainly would not be sufficient

2565
01:24:04,910 --> 01:24:05,920
0,90 90,450
for today.

2566
01:24:06,700 --> 01:24:08,440
0,450 450,720 720,1230 1260,1560 1560,1740
And so, um, today's file

2567
01:24:08,440 --> 01:24:09,760
0,360 360,540 540,570 570,840 840,1320
systems use a bigger number

2568
01:24:09,880 --> 01:24:11,680
0,240 240,480 480,810 810,1230
or no more bits.

2569
01:24:12,140 --> 01:24:13,380
0,720
Okay.

2570
01:24:13,380 --> 01:24:14,400
0,90 90,420 420,720 720,900 900,1020
I see I guess my

2571
01:24:14,400 --> 01:24:16,770
0,240 240,570 690,870 870,1380 1560,2370
question was in the architecture

2572
01:24:16,770 --> 01:24:18,800
0,180 180,270 270,660 660,1440
that we have for.

2573
01:24:18,860 --> 01:24:20,840
0,420 420,900 900,1380
Xc six a.

2574
01:24:20,930 --> 01:24:23,480
0,660 780,1200 1200,1560 1590,2280 2280,2550
The those two sixteen bit

2575
01:24:23,480 --> 01:24:26,150
0,450 480,1200 1680,1920 1920,2400 2400,2670
for idols like where where

2576
01:24:26,150 --> 01:24:28,340
0,360 360,510 510,930 1170,1680 1950,2190
else do they, um, where

2577
01:24:28,340 --> 01:24:28,940
0,150 150,270 270,360 360,450 450,600
else can we see this

2578
01:24:28,940 --> 01:24:30,020
0,570
number.

2579
01:24:30,020 --> 01:24:31,180
0,300 300,660
Show up.

2580
01:24:31,490 --> 01:24:33,080
0,480 480,690 690,1140 1140,1200 1200,1590
Um, well the the one

2581
01:24:33,080 --> 01:24:35,090
0,120 120,510 510,900 900,1560 1770,2010
that is two bytes is

2582
01:24:35,090 --> 01:24:36,980
0,300 300,1200 1200,1620 1620,1770 1770,1890
really on disk than it

2583
01:24:36,980 --> 01:24:38,360
0,180 180,330 330,840
is to bite.

2584
01:24:38,420 --> 01:24:41,390
0,630 630,960 960,1920 1920,2430 2460,2970
Um, any number in a

2585
01:24:41,870 --> 01:24:43,820
0,390 390,480 480,1200 1200,1590 1590,1950
when it's compiled when it's

2586
01:24:43,820 --> 01:24:45,080
0,240 240,330 330,420 420,990 990,1260
sitting in a register or

2587
01:24:45,080 --> 01:24:46,580
0,240 240,360 360,960
sit in memory.

2588
01:24:46,580 --> 01:24:49,130
0,1050 1110,1770 1770,1950 1950,2190 2190,2550
Um, this guy known is

2589
01:24:49,160 --> 01:24:51,740
0,720 960,1680 1680,1770 1770,2010
a look at it.

2590
01:24:54,040 --> 01:24:56,020
0,300 300,810 810,1470
Um, let's see.

2591
01:24:56,170 --> 01:24:57,790
0,180 180,510 510,690 690,1230 1260,1620
So this guy note as

2592
01:24:57,790 --> 01:24:59,590
0,120 120,300 300,780 780,1260 1260,1800
we said before actually the.

2593
01:25:03,900 --> 01:25:05,130
0,240 240,300 300,750 750,840 840,1230
Use a directory in three

2594
01:25:05,130 --> 01:25:06,360
0,300 330,450 450,630 630,750 750,1230
where we say is inside,

2595
01:25:06,360 --> 01:25:07,680
0,480 510,630 630,930 930,1170 1170,1320
short and others there's two

2596
01:25:07,680 --> 01:25:09,400
0,330 330,750 750,1200
byte sixteen bits.

2597
01:25:09,520 --> 01:25:11,980
0,510 510,750 750,1410 1410,2250 2250,2460
Um the in-memory representation of

2598
01:25:11,980 --> 01:25:13,340
0,120 120,240 240,810
an I note.

2599
01:25:13,540 --> 01:25:16,660
0,1110 1140,1980 1980,2370 2370,2700 2700,3120
Um, you okay, that's in.

2600
01:25:18,910 --> 01:25:20,710
0,270 270,510 510,1050 1050,1710 1710,1800
You're doing in-memory representation of

2601
01:25:20,710 --> 01:25:21,940
0,300 300,690
an oat.

2602
01:25:21,940 --> 01:25:24,520
0,300 300,660 660,1080 1080,1650 1680,2580
That actually number is a.

2603
01:25:25,400 --> 01:25:27,620
0,720 720,1440 1440,1980 1980,2100 2100,2220
A integer and you know

2604
01:25:27,620 --> 01:25:29,750
0,90 90,300 300,450 450,1170 1470,2130
the way we compile c-code

2605
01:25:29,750 --> 01:25:30,950
0,120 120,360 360,810 810,1140 1140,1200
and energy or happens to

2606
01:25:30,950 --> 01:25:32,240
0,150 150,360 360,810
be four bytes.

2607
01:25:34,480 --> 01:25:36,700
0,600 630,1170 1170,1440 1440,1860 1890,2220
Okay, okay I see, thank

2608
01:25:36,700 --> 01:25:38,050
0,540 570,750 750,810 810,960 960,1350
you, thank you so much.
