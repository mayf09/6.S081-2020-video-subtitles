1
00:00:01,280 --> 00:00:05,749

yep

2
00:00:05,749 --> 00:00:05,759

 

3
00:00:05,759 --> 00:00:07,990

can anybody people hear what i'm saying

4
00:00:07,990 --> 00:00:08,000
can anybody people hear what i'm saying
 

5
00:00:08,000 --> 00:00:11,350
can anybody people hear what i'm saying
or you're good

6
00:00:11,350 --> 00:00:11,360

 

7
00:00:11,360 --> 00:00:13,669

awesome so i just want to get started

8
00:00:13,669 --> 00:00:13,679
awesome so i just want to get started
 

9
00:00:13,679 --> 00:00:15,589
awesome so i just want to get started
with similar to last week where we asked

10
00:00:15,589 --> 00:00:15,599
with similar to last week where we asked
 

11
00:00:15,599 --> 00:00:17,430
with similar to last week where we asked
you about

12
00:00:17,430 --> 00:00:17,440
you about
 

13
00:00:17,440 --> 00:00:19,189
you about
the util lab i just want to get started

14
00:00:19,189 --> 00:00:19,199
the util lab i just want to get started
 

15
00:00:19,199 --> 00:00:20,790
the util lab i just want to get started
by asking a little bit about cisco lab

16
00:00:20,790 --> 00:00:20,800
by asking a little bit about cisco lab
 

17
00:00:20,800 --> 00:00:22,310
by asking a little bit about cisco lab
since that was due

18
00:00:22,310 --> 00:00:22,320
since that was due
 

19
00:00:22,320 --> 00:00:26,310
since that was due
on thursday so if anybody just has

20
00:00:26,310 --> 00:00:26,320
on thursday so if anybody just has
 

21
00:00:26,320 --> 00:00:27,910
on thursday so if anybody just has
like something particularly interesting

22
00:00:27,910 --> 00:00:27,920
like something particularly interesting
 

23
00:00:27,920 --> 00:00:29,990
like something particularly interesting
they found about the lab or a nasty bug

24
00:00:29,990 --> 00:00:30,000
they found about the lab or a nasty bug
 

25
00:00:30,000 --> 00:00:31,429
they found about the lab or a nasty bug
that they found or

26
00:00:31,429 --> 00:00:31,439
that they found or
 

27
00:00:31,439 --> 00:00:33,110
that they found or
just a silly mistake they made anything

28
00:00:33,110 --> 00:00:33,120
just a silly mistake they made anything
 

29
00:00:33,120 --> 00:00:34,790
just a silly mistake they made anything
you want to share about the syscall lab

30
00:00:34,790 --> 00:00:34,800
you want to share about the syscall lab
 

31
00:00:34,800 --> 00:00:35,670
you want to share about the syscall lab
that'd be

32
00:00:35,670 --> 00:00:35,680
that'd be
 

33
00:00:35,680 --> 00:00:39,750
that'd be
that'd be great i somehow managed to

34
00:00:39,750 --> 00:00:39,760
that'd be great i somehow managed to
 

35
00:00:39,760 --> 00:00:40,950
that'd be great i somehow managed to
delete the part

36
00:00:40,950 --> 00:00:40,960
delete the part
 

37
00:00:40,960 --> 00:00:44,310
delete the part
from where from fork where you have to

38
00:00:44,310 --> 00:00:44,320
from where from fork where you have to
 

39
00:00:44,320 --> 00:00:46,389
from where from fork where you have to
copy over the mask so i had that working

40
00:00:46,389 --> 00:00:46,399
copy over the mask so i had that working
 

41
00:00:46,399 --> 00:00:47,750
copy over the mask so i had that working
and then i changed something else and

42
00:00:47,750 --> 00:00:47,760
and then i changed something else and
 

43
00:00:47,760 --> 00:00:50,229
and then i changed something else and
then i tested it

44
00:00:50,229 --> 00:00:50,239
then i tested it
 

45
00:00:50,239 --> 00:00:51,830
then i tested it
your audio is like cutting out i think

46
00:00:51,830 --> 00:00:51,840
your audio is like cutting out i think
 

47
00:00:51,840 --> 00:00:53,910
your audio is like cutting out i think
oh it is sorry

48
00:00:53,910 --> 00:00:53,920
oh it is sorry
 

49
00:00:53,920 --> 00:00:57,990
oh it is sorry
you heard me

50
00:00:57,990 --> 00:00:58,000
you heard me
 

51
00:00:58,000 --> 00:01:02,069
you heard me
i hear you oh okay um

52
00:01:02,069 --> 00:01:02,079
i hear you oh okay um
 

53
00:01:02,079 --> 00:01:05,429
i hear you oh okay um
yeah i guess so basically i deleted

54
00:01:05,429 --> 00:01:05,439
yeah i guess so basically i deleted
 

55
00:01:05,439 --> 00:01:06,070
yeah i guess so basically i deleted
somehow

56
00:01:06,070 --> 00:01:06,080
somehow
 

57
00:01:06,080 --> 00:01:09,750
somehow
the copy of the mask and then my my fork

58
00:01:09,750 --> 00:01:09,760
the copy of the mask and then my my fork
 

59
00:01:09,760 --> 00:01:11,910
the copy of the mask and then my my fork
didn't work anymore so then i was just

60
00:01:11,910 --> 00:01:11,920
didn't work anymore so then i was just
 

61
00:01:11,920 --> 00:01:12,870
didn't work anymore so then i was just
like i did that

62
00:01:12,870 --> 00:01:12,880
like i did that
 

63
00:01:12,880 --> 00:01:15,109
like i did that
how does it not work so spend a lot of

64
00:01:15,109 --> 00:01:15,119
how does it not work so spend a lot of
 

65
00:01:15,119 --> 00:01:16,630
how does it not work so spend a lot of
time figuring out

66
00:01:16,630 --> 00:01:16,640
time figuring out
 

67
00:01:16,640 --> 00:01:18,950
time figuring out
what i did wrong and i realized i just

68
00:01:18,950 --> 00:01:18,960
what i did wrong and i realized i just
 

69
00:01:18,960 --> 00:01:22,710
what i did wrong and i realized i just
deleted that line somehow

70
00:01:22,710 --> 00:01:22,720

 

71
00:01:22,720 --> 00:01:24,469

is anybody having trouble hearing luca

72
00:01:24,469 --> 00:01:24,479
is anybody having trouble hearing luca
 

73
00:01:24,479 --> 00:01:26,149
is anybody having trouble hearing luca
or is that on my end

74
00:01:26,149 --> 00:01:26,159
or is that on my end
 

75
00:01:26,159 --> 00:01:28,550
or is that on my end
i think it's on your end yeah i hear him

76
00:01:28,550 --> 00:01:28,560
i think it's on your end yeah i hear him
 

77
00:01:28,560 --> 00:01:32,149
i think it's on your end yeah i hear him
fine

78
00:01:32,149 --> 00:01:32,159

 

79
00:01:32,159 --> 00:01:56,230

this must be on my end

80
00:01:56,230 --> 00:01:56,240

 

81
00:01:56,240 --> 00:02:02,630

sorry maybe that'll work better now

82
00:02:02,630 --> 00:02:02,640

 

83
00:02:02,640 --> 00:02:06,389

can you hear me now perfect okay great

84
00:02:06,389 --> 00:02:06,399
can you hear me now perfect okay great
 

85
00:02:06,399 --> 00:02:08,710
can you hear me now perfect okay great
i was worried that i was just talking no

86
00:02:08,710 --> 00:02:08,720
i was worried that i was just talking no
 

87
00:02:08,720 --> 00:02:09,910
i was worried that i was just talking no
no no

88
00:02:09,910 --> 00:02:09,920
no no
 

89
00:02:09,920 --> 00:02:17,190
no no
it seems to be on my end all right

90
00:02:17,190 --> 00:02:17,200

 

91
00:02:17,200 --> 00:02:19,430

awesome will anybody else have anything

92
00:02:19,430 --> 00:02:19,440
awesome will anybody else have anything
 

93
00:02:19,440 --> 00:02:20,710
awesome will anybody else have anything
they'd like to share about you

94
00:02:20,710 --> 00:02:20,720
they'd like to share about you
 

95
00:02:20,720 --> 00:02:24,150
they'd like to share about you
our a syscall

96
00:02:24,150 --> 00:02:24,160

 

97
00:02:24,160 --> 00:02:26,949

anything particularly interesting or was

98
00:02:26,949 --> 00:02:26,959
anything particularly interesting or was
 

99
00:02:26,959 --> 00:02:27,510
anything particularly interesting or was
the lab

100
00:02:27,510 --> 00:02:27,520
the lab
 

101
00:02:27,520 --> 00:02:29,110
the lab
absolutely horrendous and you think we

102
00:02:29,110 --> 00:02:29,120
absolutely horrendous and you think we
 

103
00:02:29,120 --> 00:02:31,190
absolutely horrendous and you think we
should cut it out of the class

104
00:02:31,190 --> 00:02:31,200
should cut it out of the class
 

105
00:02:31,200 --> 00:02:36,070
should cut it out of the class
never do it again i have something

106
00:02:36,070 --> 00:02:36,080
never do it again i have something
 

107
00:02:36,080 --> 00:02:38,949
never do it again i have something
apparently the order of things matters

108
00:02:38,949 --> 00:02:38,959
apparently the order of things matters
 

109
00:02:38,959 --> 00:02:40,790
apparently the order of things matters
which is a general statement

110
00:02:40,790 --> 00:02:40,800
which is a general statement
 

111
00:02:40,800 --> 00:02:44,710
which is a general statement
uh so i tried to determine

112
00:02:44,710 --> 00:02:44,720
uh so i tried to determine
 

113
00:02:44,720 --> 00:02:47,830
uh so i tried to determine
the mass computation inside the syscall

114
00:02:47,830 --> 00:02:47,840
the mass computation inside the syscall
 

115
00:02:47,840 --> 00:02:49,030
the mass computation inside the syscall
function

116
00:02:49,030 --> 00:02:49,040
function
 

117
00:02:49,040 --> 00:02:50,949
function
before determining whether i actually

118
00:02:50,949 --> 00:02:50,959
before determining whether i actually
 

119
00:02:50,959 --> 00:02:53,110
before determining whether i actually
needed to do the tracing

120
00:02:53,110 --> 00:02:53,120
needed to do the tracing
 

121
00:02:53,120 --> 00:02:56,309
needed to do the tracing
and so all the sys calls were getting

122
00:02:56,309 --> 00:02:56,319
and so all the sys calls were getting
 

123
00:02:56,319 --> 00:02:59,509
and so all the sys calls were getting
correctly traced except the trace call

124
00:02:59,509 --> 00:02:59,519
correctly traced except the trace call
 

125
00:02:59,519 --> 00:03:02,149
correctly traced except the trace call
and i was really getting disturbed by

126
00:03:02,149 --> 00:03:02,159
and i was really getting disturbed by
 

127
00:03:02,159 --> 00:03:03,910
and i was really getting disturbed by
that until i think it was david who

128
00:03:03,910 --> 00:03:03,920
that until i think it was david who
 

129
00:03:03,920 --> 00:03:05,030
that until i think it was david who
pointed out you know you should do the

130
00:03:05,030 --> 00:03:05,040
pointed out you know you should do the
 

131
00:03:05,040 --> 00:03:06,790
pointed out you know you should do the
computation after you

132
00:03:06,790 --> 00:03:06,800
computation after you
 

133
00:03:06,800 --> 00:03:10,710
computation after you
you should trace she's like ah that's

134
00:03:10,710 --> 00:03:10,720
you should trace she's like ah that's
 

135
00:03:10,720 --> 00:03:14,070
you should trace she's like ah that's
all right i'm glad you were able to

136
00:03:14,070 --> 00:03:14,080
all right i'm glad you were able to
 

137
00:03:14,080 --> 00:03:15,270
all right i'm glad you were able to
catch that

138
00:03:15,270 --> 00:03:15,280
catch that
 

139
00:03:15,280 --> 00:03:17,990
catch that
uh yeah order does matter um especially

140
00:03:17,990 --> 00:03:18,000
uh yeah order does matter um especially
 

141
00:03:18,000 --> 00:03:19,910
uh yeah order does matter um especially
for page tables you'll find i think that

142
00:03:19,910 --> 00:03:19,920
for page tables you'll find i think that
 

143
00:03:19,920 --> 00:03:20,869
for page tables you'll find i think that
order

144
00:03:20,869 --> 00:03:20,879
order
 

145
00:03:20,879 --> 00:03:22,630
order
matters there as well and generally

146
00:03:22,630 --> 00:03:22,640
matters there as well and generally
 

147
00:03:22,640 --> 00:03:23,990
matters there as well and generally
throughout the class

148
00:03:23,990 --> 00:03:24,000
throughout the class
 

149
00:03:24,000 --> 00:03:25,430
throughout the class
paying attention to the order of things

150
00:03:25,430 --> 00:03:25,440
paying attention to the order of things
 

151
00:03:25,440 --> 00:03:27,990
paying attention to the order of things
will be important

152
00:03:27,990 --> 00:03:28,000
will be important
 

153
00:03:28,000 --> 00:03:29,670
will be important
it's good to not overwrite things in

154
00:03:29,670 --> 00:03:29,680
it's good to not overwrite things in
 

155
00:03:29,680 --> 00:03:31,750
it's good to not overwrite things in
page table

156
00:03:31,750 --> 00:03:31,760
page table
 

157
00:03:31,760 --> 00:03:34,149
page table
also had something which i'm actually

158
00:03:34,149 --> 00:03:34,159
also had something which i'm actually
 

159
00:03:34,159 --> 00:03:34,869
also had something which i'm actually
still

160
00:03:34,869 --> 00:03:34,879
still
 

161
00:03:34,879 --> 00:03:38,390
still
confused about um well i

162
00:03:38,390 --> 00:03:38,400
confused about um well i
 

163
00:03:38,400 --> 00:03:40,789
confused about um well i
had a lot of debugging print statements

164
00:03:40,789 --> 00:03:40,799
had a lot of debugging print statements
 

165
00:03:40,799 --> 00:03:42,869
had a lot of debugging print statements
in the kernel code

166
00:03:42,869 --> 00:03:42,879
in the kernel code
 

167
00:03:42,879 --> 00:03:45,990
in the kernel code
i then ran the trace thing with

168
00:03:45,990 --> 00:03:46,000
i then ran the trace thing with
 

169
00:03:46,000 --> 00:03:49,589
i then ran the trace thing with
all of the bits set so basically tracing

170
00:03:49,589 --> 00:03:49,599
all of the bits set so basically tracing
 

171
00:03:49,599 --> 00:03:52,869
all of the bits set so basically tracing
all the system calls and

172
00:03:52,869 --> 00:03:52,879
all the system calls and
 

173
00:03:52,879 --> 00:03:56,470
all the system calls and
i think i saw a lot of

174
00:03:56,470 --> 00:03:56,480
i think i saw a lot of
 

175
00:03:56,480 --> 00:03:58,789
i think i saw a lot of
tracing for the print statements in the

176
00:03:58,789 --> 00:03:58,799
tracing for the print statements in the
 

177
00:03:58,799 --> 00:04:00,390
tracing for the print statements in the
kernel and then

178
00:04:00,390 --> 00:04:00,400
kernel and then
 

179
00:04:00,400 --> 00:04:03,030
kernel and then
because and then i assumed that my

180
00:04:03,030 --> 00:04:03,040
because and then i assumed that my
 

181
00:04:03,040 --> 00:04:03,750
because and then i assumed that my
prints

182
00:04:03,750 --> 00:04:03,760
prints
 

183
00:04:03,760 --> 00:04:06,949
prints
my print apps were trying to

184
00:04:06,949 --> 00:04:06,959
my print apps were trying to
 

185
00:04:06,959 --> 00:04:09,830
my print apps were trying to
read and write to the console but that

186
00:04:09,830 --> 00:04:09,840
read and write to the console but that
 

187
00:04:09,840 --> 00:04:11,990
read and write to the console but that
to write to the console but then

188
00:04:11,990 --> 00:04:12,000
to write to the console but then
 

189
00:04:12,000 --> 00:04:15,190
to write to the console but then
i was wondering why are we

190
00:04:15,190 --> 00:04:15,200
i was wondering why are we
 

191
00:04:15,200 --> 00:04:17,030
i was wondering why are we
i guess i'm just confused why we're able

192
00:04:17,030 --> 00:04:17,040
i guess i'm just confused why we're able
 

193
00:04:17,040 --> 00:04:22,629
i guess i'm just confused why we're able
to use printf in the kernel

194
00:04:22,629 --> 00:04:22,639

 

195
00:04:22,639 --> 00:04:24,629

yeah i'm not uh i haven't looked at the

196
00:04:24,629 --> 00:04:24,639
yeah i'm not uh i haven't looked at the
 

197
00:04:24,639 --> 00:04:26,230
yeah i'm not uh i haven't looked at the
printf code

198
00:04:26,230 --> 00:04:26,240
printf code
 

199
00:04:26,240 --> 00:04:28,790
printf code
recently but i think there's a file uh

200
00:04:28,790 --> 00:04:28,800
recently but i think there's a file uh
 

201
00:04:28,800 --> 00:04:30,710
recently but i think there's a file uh
printf.c that you might be able to look

202
00:04:30,710 --> 00:04:30,720
printf.c that you might be able to look
 

203
00:04:30,720 --> 00:04:34,550
printf.c that you might be able to look
at if you want to

204
00:04:34,550 --> 00:04:34,560

 

205
00:04:34,560 --> 00:04:36,070

figure out what was going on there so i

206
00:04:36,070 --> 00:04:36,080
figure out what was going on there so i
 

207
00:04:36,080 --> 00:04:37,270
figure out what was going on there so i
think the printf function should be

208
00:04:37,270 --> 00:04:37,280
think the printf function should be
 

209
00:04:37,280 --> 00:04:41,110
think the printf function should be
implemented in there

210
00:04:41,110 --> 00:04:41,120

 

211
00:04:41,120 --> 00:04:43,030

at least our version of it i don't know

212
00:04:43,030 --> 00:04:43,040
at least our version of it i don't know
 

213
00:04:43,040 --> 00:04:44,550
at least our version of it i don't know
perhaps one of the

214
00:04:44,550 --> 00:04:44,560
perhaps one of the
 

215
00:04:44,560 --> 00:04:45,909
perhaps one of the
one of some of the other core staff

216
00:04:45,909 --> 00:04:45,919
one of some of the other core staff
 

217
00:04:45,919 --> 00:04:49,510
one of some of the other core staff
might know what's going on

218
00:04:49,510 --> 00:04:49,520
might know what's going on
 

219
00:04:49,520 --> 00:04:51,110
might know what's going on
the the print ups in the kernel

220
00:04:51,110 --> 00:04:51,120
the the print ups in the kernel
 

221
00:04:51,120 --> 00:04:52,629
the the print ups in the kernel
shouldn't show up as

222
00:04:52,629 --> 00:04:52,639
shouldn't show up as
 

223
00:04:52,639 --> 00:04:54,629
shouldn't show up as
in your traces because printf in the

224
00:04:54,629 --> 00:04:54,639
in your traces because printf in the
 

225
00:04:54,639 --> 00:04:55,990
in your traces because printf in the
kernel doesn't call any system

226
00:04:55,990 --> 00:04:56,000
kernel doesn't call any system
 

227
00:04:56,000 --> 00:04:59,430
kernel doesn't call any system
calls yeah that's what i

228
00:04:59,430 --> 00:04:59,440
calls yeah that's what i
 

229
00:04:59,440 --> 00:05:02,790
calls yeah that's what i
thought maybe then maybe the tracing was

230
00:05:02,790 --> 00:05:02,800
thought maybe then maybe the tracing was
 

231
00:05:02,800 --> 00:05:04,710
thought maybe then maybe the tracing was
not from that

232
00:05:04,710 --> 00:05:04,720
not from that
 

233
00:05:04,720 --> 00:05:05,909
not from that
yeah i don't think it is from your

234
00:05:05,909 --> 00:05:05,919
yeah i don't think it is from your
 

235
00:05:05,919 --> 00:05:08,830
yeah i don't think it is from your
printers in the kernel

236
00:05:08,830 --> 00:05:08,840
printers in the kernel
 

237
00:05:08,840 --> 00:05:12,469
printers in the kernel
okay

238
00:05:12,469 --> 00:05:12,479

 

239
00:05:12,479 --> 00:05:16,230

okay well unless anybody has any other

240
00:05:16,230 --> 00:05:16,240
okay well unless anybody has any other
 

241
00:05:16,240 --> 00:05:18,790
okay well unless anybody has any other
burning comments about uh cisco i think

242
00:05:18,790 --> 00:05:18,800
burning comments about uh cisco i think
 

243
00:05:18,800 --> 00:05:19,670
burning comments about uh cisco i think
we can

244
00:05:19,670 --> 00:05:19,680
we can
 

245
00:05:19,680 --> 00:05:23,430
we can
uh get started with lecture for today

246
00:05:23,430 --> 00:05:23,440
uh get started with lecture for today
 

247
00:05:23,440 --> 00:05:26,550
uh get started with lecture for today
we'll be talking a little bit about

248
00:05:26,550 --> 00:05:26,560
we'll be talking a little bit about
 

249
00:05:26,560 --> 00:05:31,670
we'll be talking a little bit about
the uh process of converting c2 assembly

250
00:05:31,670 --> 00:05:31,680
the uh process of converting c2 assembly
 

251
00:05:31,680 --> 00:05:33,909
the uh process of converting c2 assembly
and processors and this is more of kind

252
00:05:33,909 --> 00:05:33,919
and processors and this is more of kind
 

253
00:05:33,919 --> 00:05:35,830
and processors and this is more of kind
of a practical lecture today or at least

254
00:05:35,830 --> 00:05:35,840
of a practical lecture today or at least
 

255
00:05:35,840 --> 00:05:38,310
of a practical lecture today or at least
that's the aim so the goal here is

256
00:05:38,310 --> 00:05:38,320
that's the aim so the goal here is
 

257
00:05:38,320 --> 00:05:42,469
that's the aim so the goal here is
to get you all familiarized with

258
00:05:42,469 --> 00:05:42,479
to get you all familiarized with
 

259
00:05:42,479 --> 00:05:45,029
to get you all familiarized with
risk five the processor the assembly

260
00:05:45,029 --> 00:05:45,039
risk five the processor the assembly
 

261
00:05:45,039 --> 00:05:45,909
risk five the processor the assembly
language

262
00:05:45,909 --> 00:05:45,919
language
 

263
00:05:45,919 --> 00:05:48,310
language
and the calling conventions for risk

264
00:05:48,310 --> 00:05:48,320
and the calling conventions for risk
 

265
00:05:48,320 --> 00:05:49,270
and the calling conventions for risk
five

266
00:05:49,270 --> 00:05:49,280
five
 

267
00:05:49,280 --> 00:05:51,749
five
and this will be important in not not

268
00:05:51,749 --> 00:05:51,759
and this will be important in not not
 

269
00:05:51,759 --> 00:05:53,749
and this will be important in not not
super important for a page table but

270
00:05:53,749 --> 00:05:53,759
super important for a page table but
 

271
00:05:53,759 --> 00:05:56,550
super important for a page table but
certainly for the traps lab which is

272
00:05:56,550 --> 00:05:56,560
certainly for the traps lab which is
 

273
00:05:56,560 --> 00:05:58,150
certainly for the traps lab which is
will be assigned later this week this

274
00:05:58,150 --> 00:05:58,160
will be assigned later this week this
 

275
00:05:58,160 --> 00:05:59,909
will be assigned later this week this
will be essential for

276
00:05:59,909 --> 00:05:59,919
will be essential for
 

277
00:05:59,919 --> 00:06:01,909
will be essential for
debugging and implementing things

278
00:06:01,909 --> 00:06:01,919
debugging and implementing things
 

279
00:06:01,919 --> 00:06:03,110
debugging and implementing things
because you'll be working

280
00:06:03,110 --> 00:06:03,120
because you'll be working
 

281
00:06:03,120 --> 00:06:05,350
because you'll be working
quite intimately with trap frames and

282
00:06:05,350 --> 00:06:05,360
quite intimately with trap frames and
 

283
00:06:05,360 --> 00:06:07,510
quite intimately with trap frames and
the stack and things like that

284
00:06:07,510 --> 00:06:07,520
the stack and things like that
 

285
00:06:07,520 --> 00:06:08,870
the stack and things like that
so that's the that's kind of the goal

286
00:06:08,870 --> 00:06:08,880
so that's the that's kind of the goal
 

287
00:06:08,880 --> 00:06:10,870
so that's the that's kind of the goal
for today and

288
00:06:10,870 --> 00:06:10,880
for today and
 

289
00:06:10,880 --> 00:06:13,590
for today and
my first aim was to and this might be a

290
00:06:13,590 --> 00:06:13,600
my first aim was to and this might be a
 

291
00:06:13,600 --> 00:06:14,870
my first aim was to and this might be a
little bit of review

292
00:06:14,870 --> 00:06:14,880
little bit of review
 

293
00:06:14,880 --> 00:06:18,710
little bit of review
from 6004 or any other computer

294
00:06:18,710 --> 00:06:18,720
from 6004 or any other computer
 

295
00:06:18,720 --> 00:06:20,710
from 6004 or any other computer
architecture theme classes that you may

296
00:06:20,710 --> 00:06:20,720
architecture theme classes that you may
 

297
00:06:20,720 --> 00:06:22,150
architecture theme classes that you may
have taken in the past

298
00:06:22,150 --> 00:06:22,160
have taken in the past
 

299
00:06:22,160 --> 00:06:24,790
have taken in the past
but i just want to go over briefly kind

300
00:06:24,790 --> 00:06:24,800
but i just want to go over briefly kind
 

301
00:06:24,800 --> 00:06:25,510
but i just want to go over briefly kind
of

302
00:06:25,510 --> 00:06:25,520
of
 

303
00:06:25,520 --> 00:06:28,469
of
see the c language how we get to

304
00:06:28,469 --> 00:06:28,479
see the c language how we get to
 

305
00:06:28,479 --> 00:06:29,749
see the c language how we get to
assembly

306
00:06:29,749 --> 00:06:29,759
assembly
 

307
00:06:29,759 --> 00:06:32,830
assembly
and maybe a little bit about processor

308
00:06:32,830 --> 00:06:32,840
and maybe a little bit about processor
 

309
00:06:32,840 --> 00:06:34,710
and maybe a little bit about processor
so throughout and then

310
00:06:34,710 --> 00:06:34,720
so throughout and then
 

311
00:06:34,720 --> 00:06:36,230
so throughout and then
of course throughout this lecture feel

312
00:06:36,230 --> 00:06:36,240
of course throughout this lecture feel
 

313
00:06:36,240 --> 00:06:38,390
of course throughout this lecture feel
free to interrupt uh with any

314
00:06:38,390 --> 00:06:38,400
free to interrupt uh with any
 

315
00:06:38,400 --> 00:06:41,830
free to interrupt uh with any
questions that you have so

316
00:06:41,830 --> 00:06:41,840
questions that you have so
 

317
00:06:41,840 --> 00:06:43,749
questions that you have so
uh you know we have our normal main

318
00:06:43,749 --> 00:06:43,759
uh you know we have our normal main
 

319
00:06:43,759 --> 00:06:45,590
uh you know we have our normal main
functions in c

320
00:06:45,590 --> 00:06:45,600
functions in c
 

321
00:06:45,600 --> 00:06:47,590
functions in c
you know they do something maybe they

322
00:06:47,590 --> 00:06:47,600
you know they do something maybe they
 

323
00:06:47,600 --> 00:06:50,629
you know they do something maybe they
print something

324
00:06:50,629 --> 00:06:50,639

 

325
00:06:50,639 --> 00:06:54,870

then they exit and this all looks

326
00:06:54,870 --> 00:06:54,880
then they exit and this all looks
 

327
00:06:54,880 --> 00:06:57,990
then they exit and this all looks
uh well and good but as any of you are

328
00:06:57,990 --> 00:06:58,000
uh well and good but as any of you are
 

329
00:06:58,000 --> 00:06:59,350
uh well and good but as any of you are
aware from 6004

330
00:06:59,350 --> 00:06:59,360
aware from 6004
 

331
00:06:59,360 --> 00:07:02,469
aware from 6004
processors don't actually understand the

332
00:07:02,469 --> 00:07:02,479
processors don't actually understand the
 

333
00:07:02,479 --> 00:07:02,710
processors don't actually understand the
c

334
00:07:02,710 --> 00:07:02,720
c
 

335
00:07:02,720 --> 00:07:05,029
c
language rather they understand what we

336
00:07:05,029 --> 00:07:05,039
language rather they understand what we
 

337
00:07:05,039 --> 00:07:05,909
language rather they understand what we
call

338
00:07:05,909 --> 00:07:05,919
call
 

339
00:07:05,919 --> 00:07:07,749
call
assembly or more specifically they

340
00:07:07,749 --> 00:07:07,759
assembly or more specifically they
 

341
00:07:07,759 --> 00:07:09,270
assembly or more specifically they
understand the binary encodings of

342
00:07:09,270 --> 00:07:09,280
understand the binary encodings of
 

343
00:07:09,280 --> 00:07:10,150
understand the binary encodings of
assembly

344
00:07:10,150 --> 00:07:10,160
assembly
 

345
00:07:10,160 --> 00:07:13,029
assembly
and so this here i've circled a picture

346
00:07:13,029 --> 00:07:13,039
and so this here i've circled a picture
 

347
00:07:13,039 --> 00:07:15,270
and so this here i've circled a picture
of an actual risk five processor from a

348
00:07:15,270 --> 00:07:15,280
of an actual risk five processor from a
 

349
00:07:15,280 --> 00:07:16,629
of an actual risk five processor from a
sci-5 board

350
00:07:16,629 --> 00:07:16,639
sci-5 board
 

351
00:07:16,639 --> 00:07:20,070
sci-5 board
and when we say a processor is risk 5

352
00:07:20,070 --> 00:07:20,080
and when we say a processor is risk 5
 

353
00:07:20,080 --> 00:07:22,390
and when we say a processor is risk 5
that means that it understands the risk

354
00:07:22,390 --> 00:07:22,400
that means that it understands the risk
 

355
00:07:22,400 --> 00:07:24,309
that means that it understands the risk
5 instruction set

356
00:07:24,309 --> 00:07:24,319
5 instruction set
 

357
00:07:24,319 --> 00:07:28,070
5 instruction set
so every processor has an associated isa

358
00:07:28,070 --> 00:07:28,080
so every processor has an associated isa
 

359
00:07:28,080 --> 00:07:32,150
so every processor has an associated isa
or instruction and that's kind of the

360
00:07:32,150 --> 00:07:32,160
or instruction and that's kind of the
 

361
00:07:32,160 --> 00:07:35,990
or instruction and that's kind of the
set of instructions that make sense to

362
00:07:35,990 --> 00:07:36,000
set of instructions that make sense to
 

363
00:07:36,000 --> 00:07:37,430
set of instructions that make sense to
that processor so

364
00:07:37,430 --> 00:07:37,440
that processor so
 

365
00:07:37,440 --> 00:07:39,270
that processor so
every instruction has an associated

366
00:07:39,270 --> 00:07:39,280
every instruction has an associated
 

367
00:07:39,280 --> 00:07:42,390
every instruction has an associated
binary encoding or an op code

368
00:07:42,390 --> 00:07:42,400
binary encoding or an op code
 

369
00:07:42,400 --> 00:07:45,029
binary encoding or an op code
and when a processor is running and it

370
00:07:45,029 --> 00:07:45,039
and when a processor is running and it
 

371
00:07:45,039 --> 00:07:46,309
and when a processor is running and it
sees a particular

372
00:07:46,309 --> 00:07:46,319
sees a particular
 

373
00:07:46,319 --> 00:07:50,150
sees a particular
encoding it knows what to do and so

374
00:07:50,150 --> 00:07:50,160
encoding it knows what to do and so
 

375
00:07:50,160 --> 00:07:52,150
encoding it knows what to do and so
you know this processor on this board

376
00:07:52,150 --> 00:07:52,160
you know this processor on this board
 

377
00:07:52,160 --> 00:07:53,189
you know this processor on this board
happens to

378
00:07:53,189 --> 00:07:53,199
happens to
 

379
00:07:53,199 --> 00:07:56,950
happens to
understand the risk 5 assembly which is

380
00:07:56,950 --> 00:07:56,960
understand the risk 5 assembly which is
 

381
00:07:56,960 --> 00:07:59,110
understand the risk 5 assembly which is
what c code is compiled to so the

382
00:07:59,110 --> 00:07:59,120
what c code is compiled to so the
 

383
00:07:59,120 --> 00:08:00,869
what c code is compiled to so the
general process of getting

384
00:08:00,869 --> 00:08:00,879
general process of getting
 

385
00:08:00,879 --> 00:08:03,670
general process of getting
c code to actually run on your processor

386
00:08:03,670 --> 00:08:03,680
c code to actually run on your processor
 

387
00:08:03,680 --> 00:08:05,029
c code to actually run on your processor
is we start with c

388
00:08:05,029 --> 00:08:05,039
is we start with c
 

389
00:08:05,039 --> 00:08:07,110
is we start with c
it gets compiled to assembly and there's

390
00:08:07,110 --> 00:08:07,120
it gets compiled to assembly and there's
 

391
00:08:07,120 --> 00:08:08,710
it gets compiled to assembly and there's
some linking and things like that that

392
00:08:08,710 --> 00:08:08,720
some linking and things like that that
 

393
00:08:08,720 --> 00:08:10,629
some linking and things like that that
happen between the step but that's

394
00:08:10,629 --> 00:08:10,639
happen between the step but that's
 

395
00:08:10,639 --> 00:08:13,350
happen between the step but that's
we're not a compilers class so and then

396
00:08:13,350 --> 00:08:13,360
we're not a compilers class so and then
 

397
00:08:13,360 --> 00:08:14,950
we're not a compilers class so and then
the assembly will

398
00:08:14,950 --> 00:08:14,960
the assembly will
 

399
00:08:14,960 --> 00:08:18,469
the assembly will
then be translated into binary and so

400
00:08:18,469 --> 00:08:18,479
then be translated into binary and so
 

401
00:08:18,479 --> 00:08:19,029
then be translated into binary and so
this is

402
00:08:19,029 --> 00:08:19,039
this is
 

403
00:08:19,039 --> 00:08:22,629
this is
the object or

404
00:08:22,629 --> 00:08:22,639
the object or
 

405
00:08:22,639 --> 00:08:26,070
the object or
dot o files that you see

406
00:08:26,070 --> 00:08:26,080
dot o files that you see
 

407
00:08:26,080 --> 00:08:29,270
dot o files that you see
so if you've ever paid attention to

408
00:08:29,270 --> 00:08:29,280
so if you've ever paid attention to
 

409
00:08:29,280 --> 00:08:31,749
so if you've ever paid attention to
what's inside of your lab directory

410
00:08:31,749 --> 00:08:31,759
what's inside of your lab directory
 

411
00:08:31,759 --> 00:08:33,990
what's inside of your lab directory
after you run make qmu you'll see a

412
00:08:33,990 --> 00:08:34,000
after you run make qmu you'll see a
 

413
00:08:34,000 --> 00:08:36,230
after you run make qmu you'll see a
bunch of dot o files lying around

414
00:08:36,230 --> 00:08:36,240
bunch of dot o files lying around
 

415
00:08:36,240 --> 00:08:37,829
bunch of dot o files lying around
and those are the actual object files

416
00:08:37,829 --> 00:08:37,839
and those are the actual object files
 

417
00:08:37,839 --> 00:08:40,949
and those are the actual object files
that the processor understands

418
00:08:40,949 --> 00:08:40,959
that the processor understands
 

419
00:08:40,959 --> 00:08:43,269
that the processor understands
and the asm files you've also seen um

420
00:08:43,269 --> 00:08:43,279
and the asm files you've also seen um
 

421
00:08:43,279 --> 00:08:45,430
and the asm files you've also seen um
you haven't really written any but

422
00:08:45,430 --> 00:08:45,440
you haven't really written any but
 

423
00:08:45,440 --> 00:08:48,470
you haven't really written any but
if you recall from syscall usas.pl is

424
00:08:48,470 --> 00:08:48,480
if you recall from syscall usas.pl is
 

425
00:08:48,480 --> 00:08:50,670
if you recall from syscall usas.pl is
compiled to a file called

426
00:08:50,670 --> 00:08:50,680
compiled to a file called
 

427
00:08:50,680 --> 00:08:54,310
compiled to a file called
usys.s and so dot s files

428
00:08:54,310 --> 00:08:54,320
usys.s and so dot s files
 

429
00:08:54,320 --> 00:08:57,509
usys.s and so dot s files
are assembly language and so you've seen

430
00:08:57,509 --> 00:08:57,519
are assembly language and so you've seen
 

431
00:08:57,519 --> 00:08:59,030
are assembly language and so you've seen
you've certainly seen some risk five

432
00:08:59,030 --> 00:08:59,040
you've certainly seen some risk five
 

433
00:08:59,040 --> 00:09:01,030
you've certainly seen some risk five
assembly and if you took double 04

434
00:09:01,030 --> 00:09:01,040
assembly and if you took double 04
 

435
00:09:01,040 --> 00:09:02,870
assembly and if you took double 04
i believe you you've also seen a good

436
00:09:02,870 --> 00:09:02,880
i believe you you've also seen a good
 

437
00:09:02,880 --> 00:09:05,430
i believe you you've also seen a good
amount of assembly language

438
00:09:05,430 --> 00:09:05,440
amount of assembly language
 

439
00:09:05,440 --> 00:09:08,790
amount of assembly language
and assembly looks in general much less

440
00:09:08,790 --> 00:09:08,800
and assembly looks in general much less
 

441
00:09:08,800 --> 00:09:09,670
and assembly looks in general much less
structured than

442
00:09:09,670 --> 00:09:09,680
structured than
 

443
00:09:09,680 --> 00:09:11,910
structured than
c so you'll just see lines after line

444
00:09:11,910 --> 00:09:11,920
c so you'll just see lines after line
 

445
00:09:11,920 --> 00:09:13,030
c so you'll just see lines after line
after line

446
00:09:13,030 --> 00:09:13,040
after line
 

447
00:09:13,040 --> 00:09:14,870
after line
of instructions you know you'll see

448
00:09:14,870 --> 00:09:14,880
of instructions you know you'll see
 

449
00:09:14,880 --> 00:09:17,190
of instructions you know you'll see
simple things like add

450
00:09:17,190 --> 00:09:17,200
simple things like add
 

451
00:09:17,200 --> 00:09:20,389
simple things like add
malt etc

452
00:09:20,389 --> 00:09:20,399
malt etc
 

453
00:09:20,399 --> 00:09:22,710
malt etc
and so on and so forth and this doesn't

454
00:09:22,710 --> 00:09:22,720
and so on and so forth and this doesn't
 

455
00:09:22,720 --> 00:09:23,910
and so on and so forth and this doesn't
have there's no

456
00:09:23,910 --> 00:09:23,920
have there's no
 

457
00:09:23,920 --> 00:09:27,430
have there's no
um nice control flow there's no loops

458
00:09:27,430 --> 00:09:27,440
um nice control flow there's no loops
 

459
00:09:27,440 --> 00:09:29,269
um nice control flow there's no loops
there are functions but not in the sense

460
00:09:29,269 --> 00:09:29,279
there are functions but not in the sense
 

461
00:09:29,279 --> 00:09:30,949
there are functions but not in the sense
that you might remember know from c

462
00:09:30,949 --> 00:09:30,959
that you might remember know from c
 

463
00:09:30,959 --> 00:09:33,030
that you might remember know from c
you know we see labels as opposed to

464
00:09:33,030 --> 00:09:33,040
you know we see labels as opposed to
 

465
00:09:33,040 --> 00:09:36,470
you know we see labels as opposed to
true function definitions

466
00:09:36,470 --> 00:09:36,480
true function definitions
 

467
00:09:36,480 --> 00:09:38,550
true function definitions
and assembly so it's it's a much lower

468
00:09:38,550 --> 00:09:38,560
and assembly so it's it's a much lower
 

469
00:09:38,560 --> 00:09:39,750
and assembly so it's it's a much lower
language and there are plenty of other

470
00:09:39,750 --> 00:09:39,760
language and there are plenty of other
 

471
00:09:39,760 --> 00:09:41,430
language and there are plenty of other
languages that are also compiled to

472
00:09:41,430 --> 00:09:41,440
languages that are also compiled to
 

473
00:09:41,440 --> 00:09:42,790
languages that are also compiled to
assembly so

474
00:09:42,790 --> 00:09:42,800
assembly so
 

475
00:09:42,800 --> 00:09:45,430
assembly so
um the same process holds true for

476
00:09:45,430 --> 00:09:45,440
um the same process holds true for
 

477
00:09:45,440 --> 00:09:46,230
um the same process holds true for
things like c

478
00:09:46,230 --> 00:09:46,240
things like c
 

479
00:09:46,240 --> 00:09:49,509
things like c
plus plus um

480
00:09:49,509 --> 00:09:49,519
plus plus um
 

481
00:09:49,519 --> 00:09:51,110
plus plus um
you know any any language that's

482
00:09:51,110 --> 00:09:51,120
you know any any language that's
 

483
00:09:51,120 --> 00:09:53,430
you know any any language that's
compiled will go to the same

484
00:09:53,430 --> 00:09:53,440
compiled will go to the same
 

485
00:09:53,440 --> 00:09:56,630
compiled will go to the same
assembly language at the base

486
00:09:56,630 --> 00:09:56,640
assembly language at the base
 

487
00:09:56,640 --> 00:09:59,910
assembly language at the base
and uh and so that's that's kind of the

488
00:09:59,910 --> 00:09:59,920
and uh and so that's that's kind of the
 

489
00:09:59,920 --> 00:10:01,910
and uh and so that's that's kind of the
basic process of getting our

490
00:10:01,910 --> 00:10:01,920
basic process of getting our
 

491
00:10:01,920 --> 00:10:04,870
basic process of getting our
computer to actually understand the c

492
00:10:04,870 --> 00:10:04,880
computer to actually understand the c
 

493
00:10:04,880 --> 00:10:06,389
computer to actually understand the c
code that we're writing

494
00:10:06,389 --> 00:10:06,399
code that we're writing
 

495
00:10:06,399 --> 00:10:08,310
code that we're writing
but you'll notice that we've been

496
00:10:08,310 --> 00:10:08,320
but you'll notice that we've been
 

497
00:10:08,320 --> 00:10:10,389
but you'll notice that we've been
referring to

498
00:10:10,389 --> 00:10:10,399
referring to
 

499
00:10:10,399 --> 00:10:13,670
referring to
risk five assembly

500
00:10:13,670 --> 00:10:13,680
risk five assembly
 

501
00:10:13,680 --> 00:10:15,190
risk five assembly
throughout the course and the processor

502
00:10:15,190 --> 00:10:15,200
throughout the course and the processor
 

503
00:10:15,200 --> 00:10:17,350
throughout the course and the processor
is risk five and that's because

504
00:10:17,350 --> 00:10:17,360
is risk five and that's because
 

505
00:10:17,360 --> 00:10:19,350
is risk five and that's because
uh it's important because there's many

506
00:10:19,350 --> 00:10:19,360
uh it's important because there's many
 

507
00:10:19,360 --> 00:10:20,870
uh it's important because there's many
different kinds of assembly so

508
00:10:20,870 --> 00:10:20,880
different kinds of assembly so
 

509
00:10:20,880 --> 00:10:23,350
different kinds of assembly so
it's unlikely that you're using risk

510
00:10:23,350 --> 00:10:23,360
it's unlikely that you're using risk
 

511
00:10:23,360 --> 00:10:24,630
it's unlikely that you're using risk
five

512
00:10:24,630 --> 00:10:24,640
five
 

513
00:10:24,640 --> 00:10:26,550
five
yourself like you're not going to be

514
00:10:26,550 --> 00:10:26,560
yourself like you're not going to be
 

515
00:10:26,560 --> 00:10:27,910
yourself like you're not going to be
running linux on it

516
00:10:27,910 --> 00:10:27,920
running linux on it
 

517
00:10:27,920 --> 00:10:30,949
running linux on it
uh instead most modern computers will

518
00:10:30,949 --> 00:10:30,959
uh instead most modern computers will
 

519
00:10:30,959 --> 00:10:31,350
uh instead most modern computers will
run

520
00:10:31,350 --> 00:10:31,360
run
 

521
00:10:31,360 --> 00:10:34,470
run
on what's called x86 or you'll sometimes

522
00:10:34,470 --> 00:10:34,480
on what's called x86 or you'll sometimes
 

523
00:10:34,480 --> 00:10:37,750
on what's called x86 or you'll sometimes
see it as x86 64.

524
00:10:37,750 --> 00:10:37,760
see it as x86 64.
 

525
00:10:37,760 --> 00:10:40,949
see it as x86 64.
and this is this is a different isa

526
00:10:40,949 --> 00:10:40,959
and this is this is a different isa
 

527
00:10:40,959 --> 00:10:42,389
and this is this is a different isa
this is a different instruction set it

528
00:10:42,389 --> 00:10:42,399
this is a different instruction set it
 

529
00:10:42,399 --> 00:10:44,230
this is a different instruction set it
looks pretty similar to risk five

530
00:10:44,230 --> 00:10:44,240
looks pretty similar to risk five
 

531
00:10:44,240 --> 00:10:46,710
looks pretty similar to risk five
but this is what you see in kind of your

532
00:10:46,710 --> 00:10:46,720
but this is what you see in kind of your
 

533
00:10:46,720 --> 00:10:51,750
but this is what you see in kind of your
personal computers often

534
00:10:51,750 --> 00:10:51,760

 

535
00:10:51,760 --> 00:10:55,110

so if you use an intel so

536
00:10:55,110 --> 00:10:55,120
so if you use an intel so
 

537
00:10:55,120 --> 00:10:58,389
so if you use an intel so
intel cpus implement x86

538
00:10:58,389 --> 00:10:58,399
intel cpus implement x86
 

539
00:10:58,399 --> 00:11:02,230
intel cpus implement x86
and i believe amd also do

540
00:11:02,230 --> 00:11:02,240
and i believe amd also do
 

541
00:11:02,240 --> 00:11:06,550
and i believe amd also do
and this is a relatively important

542
00:11:06,550 --> 00:11:06,560
and this is a relatively important
 

543
00:11:06,560 --> 00:11:08,150
and this is a relatively important
distinction between the two they're not

544
00:11:08,150 --> 00:11:08,160
distinction between the two they're not
 

545
00:11:08,160 --> 00:11:09,590
distinction between the two they're not
quite as similar as they may

546
00:11:09,590 --> 00:11:09,600
quite as similar as they may
 

547
00:11:09,600 --> 00:11:12,870
quite as similar as they may
look at first and that comes down to the

548
00:11:12,870 --> 00:11:12,880
look at first and that comes down to the
 

549
00:11:12,880 --> 00:11:15,829
look at first and that comes down to the
fact that risk five is what we call

550
00:11:15,829 --> 00:11:15,839
fact that risk five is what we call
 

551
00:11:15,839 --> 00:11:18,630
fact that risk five is what we call
as a risk the risk part of risk five

552
00:11:18,630 --> 00:11:18,640
as a risk the risk part of risk five
 

553
00:11:18,640 --> 00:11:20,069
as a risk the risk part of risk five
refers to

554
00:11:20,069 --> 00:11:20,079
refers to
 

555
00:11:20,079 --> 00:11:23,829
refers to
a reduced instruction set and

556
00:11:23,829 --> 00:11:23,839
a reduced instruction set and
 

557
00:11:23,839 --> 00:11:28,069
a reduced instruction set and
x86 64 is what's called a cisc

558
00:11:28,069 --> 00:11:28,079
x86 64 is what's called a cisc
 

559
00:11:28,079 --> 00:11:34,790
x86 64 is what's called a cisc
or complex instruction set

560
00:11:34,790 --> 00:11:34,800

 

561
00:11:34,800 --> 00:11:37,910

and there's a couple of key differences

562
00:11:37,910 --> 00:11:37,920
and there's a couple of key differences
 

563
00:11:37,920 --> 00:11:38,630
and there's a couple of key differences
here one

564
00:11:38,630 --> 00:11:38,640
here one
 

565
00:11:38,640 --> 00:11:40,310
here one
is just the number of instructions that

566
00:11:40,310 --> 00:11:40,320
is just the number of instructions that
 

567
00:11:40,320 --> 00:11:41,990
is just the number of instructions that
are present in x86

568
00:11:41,990 --> 00:11:42,000
are present in x86
 

569
00:11:42,000 --> 00:11:45,110
are present in x86
64 in fact one of the big motivations

570
00:11:45,110 --> 00:11:45,120
64 in fact one of the big motivations
 

571
00:11:45,120 --> 00:11:48,230
64 in fact one of the big motivations
for writing um for for

572
00:11:48,230 --> 00:11:48,240
for writing um for for
 

573
00:11:48,240 --> 00:11:51,269
for writing um for for
making risk five was how

574
00:11:51,269 --> 00:11:51,279
making risk five was how
 

575
00:11:51,279 --> 00:11:55,110
making risk five was how
many uh instructions we we actually have

576
00:11:55,110 --> 00:11:55,120
many uh instructions we we actually have
 

577
00:11:55,120 --> 00:11:57,990
many uh instructions we we actually have
in the intel kind of handbook so for

578
00:11:57,990 --> 00:11:58,000
in the intel kind of handbook so for
 

579
00:11:58,000 --> 00:11:59,110
in the intel kind of handbook so for
reference there's

580
00:11:59,110 --> 00:11:59,120
reference there's
 

581
00:11:59,120 --> 00:12:02,150
reference there's
three full books

582
00:12:02,150 --> 00:12:02,160
three full books
 

583
00:12:02,160 --> 00:12:05,590
three full books
that encompass the isa and

584
00:12:05,590 --> 00:12:05,600
that encompass the isa and
 

585
00:12:05,600 --> 00:12:08,710
that encompass the isa and
some statistics i think there's

586
00:12:08,710 --> 00:12:08,720
some statistics i think there's
 

587
00:12:08,720 --> 00:12:11,750
some statistics i think there's
new instructions have been added at a

588
00:12:11,750 --> 00:12:11,760
new instructions have been added at a
 

589
00:12:11,760 --> 00:12:16,629
new instructions have been added at a
rate of three instructions

590
00:12:16,629 --> 00:12:16,639
rate of three instructions
 

591
00:12:16,639 --> 00:12:21,350
rate of three instructions
per month since x86 64 was added

592
00:12:21,350 --> 00:12:21,360
per month since x86 64 was added
 

593
00:12:21,360 --> 00:12:24,310
per month since x86 64 was added
it was uh first published in the 70s so

594
00:12:24,310 --> 00:12:24,320
it was uh first published in the 70s so
 

595
00:12:24,320 --> 00:12:24,790
it was uh first published in the 70s so
i

596
00:12:24,790 --> 00:12:24,800
i
 

597
00:12:24,800 --> 00:12:28,310
i
believe there's like north of uh 15 000

598
00:12:28,310 --> 00:12:28,320
believe there's like north of uh 15 000
 

599
00:12:28,320 --> 00:12:31,350
believe there's like north of uh 15 000
instructions

600
00:12:31,350 --> 00:12:31,360

 

601
00:12:31,360 --> 00:12:35,750

in x 86 64. and risk five on the other

602
00:12:35,750 --> 00:12:35,760
in x 86 64. and risk five on the other
 

603
00:12:35,760 --> 00:12:37,430
in x 86 64. and risk five on the other
hand

604
00:12:37,430 --> 00:12:37,440
hand
 

605
00:12:37,440 --> 00:12:39,430
hand
the assembly for risk five can be nicely

606
00:12:39,430 --> 00:12:39,440
the assembly for risk five can be nicely
 

607
00:12:39,440 --> 00:12:42,870
the assembly for risk five can be nicely
contained within two documents and so

608
00:12:42,870 --> 00:12:42,880
contained within two documents and so
 

609
00:12:42,880 --> 00:12:44,949
contained within two documents and so
kind of going off of that we don't

610
00:12:44,949 --> 00:12:44,959
kind of going off of that we don't
 

611
00:12:44,959 --> 00:12:45,910
kind of going off of that we don't
expect you

612
00:12:45,910 --> 00:12:45,920
expect you
 

613
00:12:45,920 --> 00:12:48,629
expect you
in this course to memorize every single

614
00:12:48,629 --> 00:12:48,639
in this course to memorize every single
 

615
00:12:48,639 --> 00:12:50,389
in this course to memorize every single
risk five instruction

616
00:12:50,389 --> 00:12:50,399
risk five instruction
 

617
00:12:50,399 --> 00:12:52,710
risk five instruction
but if you are interested or you ever

618
00:12:52,710 --> 00:12:52,720
but if you are interested or you ever
 

619
00:12:52,720 --> 00:12:54,150
but if you are interested or you ever
find yourself confused by what a

620
00:12:54,150 --> 00:12:54,160
find yourself confused by what a
 

621
00:12:54,160 --> 00:12:55,910
find yourself confused by what a
specific instruction

622
00:12:55,910 --> 00:12:55,920
specific instruction
 

623
00:12:55,920 --> 00:12:58,949
specific instruction
is or does if you go to the course

624
00:12:58,949 --> 00:12:58,959
is or does if you go to the course
 

625
00:12:58,959 --> 00:12:59,990
is or does if you go to the course
website

626
00:12:59,990 --> 00:13:00,000
website
 

627
00:13:00,000 --> 00:13:03,509
website
and we look under the references tab

628
00:13:03,509 --> 00:13:03,519
and we look under the references tab
 

629
00:13:03,519 --> 00:13:05,670
and we look under the references tab
under risk five we give you the links to

630
00:13:05,670 --> 00:13:05,680
under risk five we give you the links to
 

631
00:13:05,680 --> 00:13:07,430
under risk five we give you the links to
both the privileged

632
00:13:07,430 --> 00:13:07,440
both the privileged
 

633
00:13:07,440 --> 00:13:10,629
both the privileged
and unprivileged instruction sets so

634
00:13:10,629 --> 00:13:10,639
and unprivileged instruction sets so
 

635
00:13:10,639 --> 00:13:12,870
and unprivileged instruction sets so
this is kind of the document

636
00:13:12,870 --> 00:13:12,880
this is kind of the document
 

637
00:13:12,880 --> 00:13:15,190
this is kind of the document
that gives you a whole bunch of

638
00:13:15,190 --> 00:13:15,200
that gives you a whole bunch of
 

639
00:13:15,200 --> 00:13:16,790
that gives you a whole bunch of
information about the isa

640
00:13:16,790 --> 00:13:16,800
information about the isa
 

641
00:13:16,800 --> 00:13:19,190
information about the isa
but you'll note that like this is 240

642
00:13:19,190 --> 00:13:19,200
but you'll note that like this is 240
 

643
00:13:19,200 --> 00:13:20,470
but you'll note that like this is 240
pages

644
00:13:20,470 --> 00:13:20,480
pages
 

645
00:13:20,480 --> 00:13:23,030
pages
and this is 135 pages so it's

646
00:13:23,030 --> 00:13:23,040
and this is 135 pages so it's
 

647
00:13:23,040 --> 00:13:25,350
and this is 135 pages so it's
significantly significantly smaller

648
00:13:25,350 --> 00:13:25,360
significantly significantly smaller
 

649
00:13:25,360 --> 00:13:28,790
significantly significantly smaller
than uh the x86 instruction set that's

650
00:13:28,790 --> 00:13:28,800
than uh the x86 instruction set that's
 

651
00:13:28,800 --> 00:13:31,829
than uh the x86 instruction set that's
one of the the nice things about

652
00:13:31,829 --> 00:13:31,839
one of the the nice things about
 

653
00:13:31,839 --> 00:13:35,990
one of the the nice things about
about risk five so we have

654
00:13:35,990 --> 00:13:36,000
about risk five so we have
 

655
00:13:36,000 --> 00:13:38,790
about risk five so we have
in risk five we have uh fewer

656
00:13:38,790 --> 00:13:38,800
in risk five we have uh fewer
 

657
00:13:38,800 --> 00:13:39,910
in risk five we have uh fewer
instructions

658
00:13:39,910 --> 00:13:39,920
instructions
 

659
00:13:39,920 --> 00:13:43,030
instructions
and not only that the instructions are

660
00:13:43,030 --> 00:13:43,040
and not only that the instructions are
 

661
00:13:43,040 --> 00:13:44,310
and not only that the instructions are
simpler

662
00:13:44,310 --> 00:13:44,320
simpler
 

663
00:13:44,320 --> 00:13:48,790
simpler
so what i mean by that is that

664
00:13:48,790 --> 00:13:48,800
so what i mean by that is that
 

665
00:13:48,800 --> 00:13:52,389
so what i mean by that is that
there are many instructions in x8664 and

666
00:13:52,389 --> 00:13:52,399
there are many instructions in x8664 and
 

667
00:13:52,399 --> 00:13:53,509
there are many instructions in x8664 and
by instruction i'm referring to

668
00:13:53,509 --> 00:13:53,519
by instruction i'm referring to
 

669
00:13:53,519 --> 00:13:55,750
by instruction i'm referring to
something like at or malt or sub

670
00:13:55,750 --> 00:13:55,760
something like at or malt or sub
 

671
00:13:55,760 --> 00:13:58,710
something like at or malt or sub
um in x8664 there's plenty of

672
00:13:58,710 --> 00:13:58,720
um in x8664 there's plenty of
 

673
00:13:58,720 --> 00:14:00,069
um in x8664 there's plenty of
instructions that do

674
00:14:00,069 --> 00:14:00,079
instructions that do
 

675
00:14:00,079 --> 00:14:02,550
instructions that do
more than one thing so they perform some

676
00:14:02,550 --> 00:14:02,560
more than one thing so they perform some
 

677
00:14:02,560 --> 00:14:03,910
more than one thing so they perform some
complicated

678
00:14:03,910 --> 00:14:03,920
complicated
 

679
00:14:03,920 --> 00:14:06,629
complicated
uh set of operations and then get you

680
00:14:06,629 --> 00:14:06,639
uh set of operations and then get you
 

681
00:14:06,639 --> 00:14:07,350
uh set of operations and then get you
the result

682
00:14:07,350 --> 00:14:07,360
the result
 

683
00:14:07,360 --> 00:14:09,509
the result
and that's uh not not the case with risk

684
00:14:09,509 --> 00:14:09,519
and that's uh not not the case with risk
 

685
00:14:09,519 --> 00:14:11,990
and that's uh not not the case with risk
five uh risk five instructions tend to

686
00:14:11,990 --> 00:14:12,000
five uh risk five instructions tend to
 

687
00:14:12,000 --> 00:14:12,389
five uh risk five instructions tend to
be

688
00:14:12,389 --> 00:14:12,399
be
 

689
00:14:12,399 --> 00:14:14,230
be
smaller in scope and so they take you

690
00:14:14,230 --> 00:14:14,240
smaller in scope and so they take you
 

691
00:14:14,240 --> 00:14:15,990
smaller in scope and so they take you
know it's less cycles to run each

692
00:14:15,990 --> 00:14:16,000
know it's less cycles to run each
 

693
00:14:16,000 --> 00:14:19,269
know it's less cycles to run each
instruction than maybe x8664 is and this

694
00:14:19,269 --> 00:14:19,279
instruction than maybe x8664 is and this
 

695
00:14:19,279 --> 00:14:21,030
instruction than maybe x8664 is and this
is just a trade-off that the designers

696
00:14:21,030 --> 00:14:21,040
is just a trade-off that the designers
 

697
00:14:21,040 --> 00:14:21,910
is just a trade-off that the designers
chose to uh

698
00:14:21,910 --> 00:14:21,920
chose to uh
 

699
00:14:21,920 --> 00:14:25,350
chose to uh
chose to undertake um there's nothing

700
00:14:25,350 --> 00:14:25,360
chose to undertake um there's nothing
 

701
00:14:25,360 --> 00:14:28,389
chose to undertake um there's nothing
or you know there's no

702
00:14:28,389 --> 00:14:28,399
or you know there's no
 

703
00:14:28,399 --> 00:14:30,470
or you know there's no
canonical reason why a reduced

704
00:14:30,470 --> 00:14:30,480
canonical reason why a reduced
 

705
00:14:30,480 --> 00:14:31,509
canonical reason why a reduced
instruction set

706
00:14:31,509 --> 00:14:31,519
instruction set
 

707
00:14:31,519 --> 00:14:34,310
instruction set
is better than you know a complex

708
00:14:34,310 --> 00:14:34,320
is better than you know a complex
 

709
00:14:34,320 --> 00:14:35,189
is better than you know a complex
induction

710
00:14:35,189 --> 00:14:35,199
induction
 

711
00:14:35,199 --> 00:14:37,269
induction
instruction set they each have their own

712
00:14:37,269 --> 00:14:37,279
instruction set they each have their own
 

713
00:14:37,279 --> 00:14:38,310
instruction set they each have their own
uses

714
00:14:38,310 --> 00:14:38,320
uses
 

715
00:14:38,320 --> 00:14:40,470
uses
um and so on and so forth and another

716
00:14:40,470 --> 00:14:40,480
um and so on and so forth and another
 

717
00:14:40,480 --> 00:14:42,389
um and so on and so forth and another
another cool thing about risk five as

718
00:14:42,389 --> 00:14:42,399
another cool thing about risk five as
 

719
00:14:42,399 --> 00:14:43,509
another cool thing about risk five as
opposed to

720
00:14:43,509 --> 00:14:43,519
opposed to
 

721
00:14:43,519 --> 00:14:47,750
opposed to
x86 is that this is open source

722
00:14:47,750 --> 00:14:47,760
x86 is that this is open source
 

723
00:14:47,760 --> 00:14:51,750
x86 is that this is open source
so it's one of the only open source

724
00:14:51,750 --> 00:14:51,760
so it's one of the only open source
 

725
00:14:51,760 --> 00:14:53,829
so it's one of the only open source
instruction sets on the market so that

726
00:14:53,829 --> 00:14:53,839
instruction sets on the market so that
 

727
00:14:53,839 --> 00:14:55,750
instruction sets on the market so that
means anybody can develop a board for

728
00:14:55,750 --> 00:14:55,760
means anybody can develop a board for
 

729
00:14:55,760 --> 00:14:57,269
means anybody can develop a board for
risk five

730
00:14:57,269 --> 00:14:57,279
risk five
 

731
00:14:57,279 --> 00:14:59,030
risk five
and it was it came out of a research

732
00:14:59,030 --> 00:14:59,040
and it was it came out of a research
 

733
00:14:59,040 --> 00:15:00,550
and it was it came out of a research
project from

734
00:15:00,550 --> 00:15:00,560
project from
 

735
00:15:00,560 --> 00:15:02,710
project from
uc berkeley and so that's kind of where

736
00:15:02,710 --> 00:15:02,720
uc berkeley and so that's kind of where
 

737
00:15:02,720 --> 00:15:03,990
uc berkeley and so that's kind of where
risk five started

738
00:15:03,990 --> 00:15:04,000
risk five started
 

739
00:15:04,000 --> 00:15:05,430
risk five started
and since then it's been picked up and

740
00:15:05,430 --> 00:15:05,440
and since then it's been picked up and
 

741
00:15:05,440 --> 00:15:07,829
and since then it's been picked up and
supported by a number of companies

742
00:15:07,829 --> 00:15:07,839
supported by a number of companies
 

743
00:15:07,839 --> 00:15:09,750
supported by a number of companies
uh you can find the list online but you

744
00:15:09,750 --> 00:15:09,760
uh you can find the list online but you
 

745
00:15:09,760 --> 00:15:11,110
uh you can find the list online but you
know there's tons of big companies that

746
00:15:11,110 --> 00:15:11,120
know there's tons of big companies that
 

747
00:15:11,120 --> 00:15:13,269
know there's tons of big companies that
are interested in supporting an open

748
00:15:13,269 --> 00:15:13,279
are interested in supporting an open
 

749
00:15:13,279 --> 00:15:16,069
are interested in supporting an open
instruction set and actually i think

750
00:15:16,069 --> 00:15:16,079
instruction set and actually i think
 

751
00:15:16,079 --> 00:15:17,750
instruction set and actually i think
quite recently there was an announcement

752
00:15:17,750 --> 00:15:17,760
quite recently there was an announcement
 

753
00:15:17,760 --> 00:15:18,710
quite recently there was an announcement
made by

754
00:15:18,710 --> 00:15:18,720
made by
 

755
00:15:18,720 --> 00:15:22,310
made by
sci-5 who are sort of the premier

756
00:15:22,310 --> 00:15:22,320
sci-5 who are sort of the premier
 

757
00:15:22,320 --> 00:15:25,269
sci-5 who are sort of the premier
board manufacturer for risk 5 processors

758
00:15:25,269 --> 00:15:25,279
board manufacturer for risk 5 processors
 

759
00:15:25,279 --> 00:15:26,069
board manufacturer for risk 5 processors
that they will

760
00:15:26,069 --> 00:15:26,079
that they will
 

761
00:15:26,079 --> 00:15:29,670
that they will
be releasing a board for

762
00:15:29,670 --> 00:15:29,680
be releasing a board for
 

763
00:15:29,680 --> 00:15:31,269
be releasing a board for
personal computers that should

764
00:15:31,269 --> 00:15:31,279
personal computers that should
 

765
00:15:31,279 --> 00:15:32,629
personal computers that should
ostensibly you know a risk five

766
00:15:32,629 --> 00:15:32,639
ostensibly you know a risk five
 

767
00:15:32,639 --> 00:15:34,550
ostensibly you know a risk five
processor designed to run linux for

768
00:15:34,550 --> 00:15:34,560
processor designed to run linux for
 

769
00:15:34,560 --> 00:15:35,829
processor designed to run linux for
personal computers

770
00:15:35,829 --> 00:15:35,839
personal computers
 

771
00:15:35,839 --> 00:15:37,749
personal computers
and i think that that's been released in

772
00:15:37,749 --> 00:15:37,759
and i think that that's been released in
 

773
00:15:37,759 --> 00:15:39,189
and i think that that's been released in
the last week or two the

774
00:15:39,189 --> 00:15:39,199
the last week or two the
 

775
00:15:39,199 --> 00:15:41,590
the last week or two the
announcement about it um so if you're if

776
00:15:41,590 --> 00:15:41,600
announcement about it um so if you're if
 

777
00:15:41,600 --> 00:15:43,030
announcement about it um so if you're if
you're curious if you're

778
00:15:43,030 --> 00:15:43,040
you're curious if you're
 

779
00:15:43,040 --> 00:15:44,710
you're curious if you're
find yourself you know absolutely you

780
00:15:44,710 --> 00:15:44,720
find yourself you know absolutely you
 

781
00:15:44,720 --> 00:15:46,870
find yourself you know absolutely you
know i want to use risk 5 after i finish

782
00:15:46,870 --> 00:15:46,880
know i want to use risk 5 after i finish
 

783
00:15:46,880 --> 00:15:48,310
know i want to use risk 5 after i finish
6s081

784
00:15:48,310 --> 00:15:48,320
6s081
 

785
00:15:48,320 --> 00:15:50,150
6s081
hopefully by that time there will be a

786
00:15:50,150 --> 00:15:50,160
hopefully by that time there will be a
 

787
00:15:50,160 --> 00:15:51,749
hopefully by that time there will be a
processor available that you can run

788
00:15:51,749 --> 00:15:51,759
processor available that you can run
 

789
00:15:51,759 --> 00:15:55,110
processor available that you can run
linux on on your own computer

790
00:15:55,110 --> 00:15:55,120
linux on on your own computer
 

791
00:15:55,120 --> 00:15:56,870
linux on on your own computer
but even in your day to day lives you're

792
00:15:56,870 --> 00:15:56,880
but even in your day to day lives you're
 

793
00:15:56,880 --> 00:15:59,350
but even in your day to day lives you're
most likely using reduced instruction

794
00:15:59,350 --> 00:15:59,360
most likely using reduced instruction
 

795
00:15:59,360 --> 00:16:02,069
most likely using reduced instruction
sets even if you don't realize it so

796
00:16:02,069 --> 00:16:02,079
sets even if you don't realize it so
 

797
00:16:02,079 --> 00:16:05,509
sets even if you don't realize it so
the arm assembly so that's

798
00:16:05,509 --> 00:16:05,519
the arm assembly so that's
 

799
00:16:05,519 --> 00:16:09,350
the arm assembly so that's
arm this is also a reduced instruction

800
00:16:09,350 --> 00:16:09,360
arm this is also a reduced instruction
 

801
00:16:09,360 --> 00:16:11,189
arm this is also a reduced instruction
set

802
00:16:11,189 --> 00:16:11,199
set
 

803
00:16:11,199 --> 00:16:14,470
set
and arm is implemented by

804
00:16:14,470 --> 00:16:14,480
and arm is implemented by
 

805
00:16:14,480 --> 00:16:17,749
and arm is implemented by
qualcomm the the snapdragon series of

806
00:16:17,749 --> 00:16:17,759
qualcomm the the snapdragon series of
 

807
00:16:17,759 --> 00:16:19,030
qualcomm the the snapdragon series of
processors

808
00:16:19,030 --> 00:16:19,040
processors
 

809
00:16:19,040 --> 00:16:22,790
processors
so if you have an android phone

810
00:16:22,790 --> 00:16:22,800
so if you have an android phone
 

811
00:16:22,800 --> 00:16:26,790
so if you have an android phone
you are most likely

812
00:16:26,790 --> 00:16:26,800
you are most likely
 

813
00:16:26,800 --> 00:16:30,150
you are most likely
running a reduced instruction set

814
00:16:30,150 --> 00:16:30,160
running a reduced instruction set
 

815
00:16:30,160 --> 00:16:34,069
running a reduced instruction set
and even if you're using ios ios i think

816
00:16:34,069 --> 00:16:34,079
and even if you're using ios ios i think
 

817
00:16:34,079 --> 00:16:35,670
and even if you're using ios ios i think
i forget what the name of it is but

818
00:16:35,670 --> 00:16:35,680
i forget what the name of it is but
 

819
00:16:35,680 --> 00:16:35,990
i forget what the name of it is but
apple

820
00:16:35,990 --> 00:16:36,000
apple
 

821
00:16:36,000 --> 00:16:39,189
apple
has some has some version

822
00:16:39,189 --> 00:16:39,199
has some has some version
 

823
00:16:39,199 --> 00:16:41,430
has some has some version
of of arm that they also implement in

824
00:16:41,430 --> 00:16:41,440
of of arm that they also implement in
 

825
00:16:41,440 --> 00:16:42,790
of of arm that they also implement in
their own processors

826
00:16:42,790 --> 00:16:42,800
their own processors
 

827
00:16:42,800 --> 00:16:46,470
their own processors
that runs on ipads iphones and most

828
00:16:46,470 --> 00:16:46,480
that runs on ipads iphones and most
 

829
00:16:46,480 --> 00:16:48,790
that runs on ipads iphones and most
mobile apple devices so you know reduced

830
00:16:48,790 --> 00:16:48,800
mobile apple devices so you know reduced
 

831
00:16:48,800 --> 00:16:49,990
mobile apple devices so you know reduced
instruction sets are present

832
00:16:49,990 --> 00:16:50,000
instruction sets are present
 

833
00:16:50,000 --> 00:16:51,509
instruction sets are present
all over the place and if you're looking

834
00:16:51,509 --> 00:16:51,519
all over the place and if you're looking
 

835
00:16:51,519 --> 00:16:54,790
all over the place and if you're looking
for a risk five in the real world

836
00:16:54,790 --> 00:16:54,800
for a risk five in the real world
 

837
00:16:54,800 --> 00:16:58,069
for a risk five in the real world
uh you know outside of your qmu

838
00:16:58,069 --> 00:16:58,079
uh you know outside of your qmu
 

839
00:16:58,079 --> 00:17:01,670
uh you know outside of your qmu
you'll be able to find that in uh like

840
00:17:01,670 --> 00:17:01,680
you'll be able to find that in uh like
 

841
00:17:01,680 --> 00:17:05,270
you'll be able to find that in uh like
integrated devices so it is present

842
00:17:05,270 --> 00:17:05,280
integrated devices so it is present
 

843
00:17:05,280 --> 00:17:07,029
integrated devices so it is present
it's not as it's certainly not as

844
00:17:07,029 --> 00:17:07,039
it's not as it's certainly not as
 

845
00:17:07,039 --> 00:17:10,230
it's not as it's certainly not as
ubiquitous as something like x8664

846
00:17:10,230 --> 00:17:10,240
ubiquitous as something like x8664
 

847
00:17:10,240 --> 00:17:13,350
ubiquitous as something like x8664
but it's it's uh yes i

848
00:17:13,350 --> 00:17:13,360
but it's it's uh yes i
 

849
00:17:13,360 --> 00:17:15,669
but it's it's uh yes i
yes i think apple is as lucas just said

850
00:17:15,669 --> 00:17:15,679
yes i think apple is as lucas just said
 

851
00:17:15,679 --> 00:17:18,230
yes i think apple is as lucas just said
in the chat i think apple is moving max

852
00:17:18,230 --> 00:17:18,240
in the chat i think apple is moving max
 

853
00:17:18,240 --> 00:17:20,549
in the chat i think apple is moving max
to arm i believe that's also the case

854
00:17:20,549 --> 00:17:20,559
to arm i believe that's also the case
 

855
00:17:20,559 --> 00:17:21,829
to arm i believe that's also the case
there's been in the last few years

856
00:17:21,829 --> 00:17:21,839
there's been in the last few years
 

857
00:17:21,839 --> 00:17:23,189
there's been in the last few years
there's definitely been a push towards

858
00:17:23,189 --> 00:17:23,199
there's definitely been a push towards
 

859
00:17:23,199 --> 00:17:25,909
there's definitely been a push towards
reduced instruction sets

860
00:17:25,909 --> 00:17:25,919
reduced instruction sets
 

861
00:17:25,919 --> 00:17:28,710
reduced instruction sets
given given how big the intel isa has

862
00:17:28,710 --> 00:17:28,720
given given how big the intel isa has
 

863
00:17:28,720 --> 00:17:29,430
given given how big the intel isa has
gotten

864
00:17:29,430 --> 00:17:29,440
gotten
 

865
00:17:29,440 --> 00:17:31,510
gotten
and the reason why intel's isa is so big

866
00:17:31,510 --> 00:17:31,520
and the reason why intel's isa is so big
 

867
00:17:31,520 --> 00:17:33,190
and the reason why intel's isa is so big
is because they're

868
00:17:33,190 --> 00:17:33,200
is because they're
 

869
00:17:33,200 --> 00:17:34,310
is because they're
very concerned with backwards

870
00:17:34,310 --> 00:17:34,320
very concerned with backwards
 

871
00:17:34,320 --> 00:17:36,789
very concerned with backwards
compatibility so if you write

872
00:17:36,789 --> 00:17:36,799
compatibility so if you write
 

873
00:17:36,799 --> 00:17:39,110
compatibility so if you write
you know a modern intel processor can

874
00:17:39,110 --> 00:17:39,120
you know a modern intel processor can
 

875
00:17:39,120 --> 00:17:39,990
you know a modern intel processor can
run the same

876
00:17:39,990 --> 00:17:40,000
run the same
 

877
00:17:40,000 --> 00:17:42,870
run the same
instructions that intel code from you

878
00:17:42,870 --> 00:17:42,880
instructions that intel code from you
 

879
00:17:42,880 --> 00:17:43,430
instructions that intel code from you
know

880
00:17:43,430 --> 00:17:43,440
know
 

881
00:17:43,440 --> 00:17:46,310
know
30 40 years ago was written in so they

882
00:17:46,310 --> 00:17:46,320
30 40 years ago was written in so they
 

883
00:17:46,320 --> 00:17:48,150
30 40 years ago was written in so they
don't really deprecate any instruction

884
00:17:48,150 --> 00:17:48,160
don't really deprecate any instruction
 

885
00:17:48,160 --> 00:17:49,350
don't really deprecate any instruction
so that they maintain backwards

886
00:17:49,350 --> 00:17:49,360
so that they maintain backwards
 

887
00:17:49,360 --> 00:17:50,310
so that they maintain backwards
compatibility

888
00:17:50,310 --> 00:17:50,320
compatibility
 

889
00:17:50,320 --> 00:17:52,549
compatibility
and risk five is more modern so that's

890
00:17:52,549 --> 00:17:52,559
and risk five is more modern so that's
 

891
00:17:52,559 --> 00:17:55,190
and risk five is more modern so that's
not a worry risk five is also so if we

892
00:17:55,190 --> 00:17:55,200
not a worry risk five is also so if we
 

893
00:17:55,200 --> 00:17:58,150
not a worry risk five is also so if we
jump back to those manuals risk five is

894
00:17:58,150 --> 00:17:58,160
jump back to those manuals risk five is
 

895
00:17:58,160 --> 00:18:01,110
jump back to those manuals risk five is
unique in that it's divided we have

896
00:18:01,110 --> 00:18:01,120
unique in that it's divided we have
 

897
00:18:01,120 --> 00:18:02,390
unique in that it's divided we have
what's called the base integer

898
00:18:02,390 --> 00:18:02,400
what's called the base integer
 

899
00:18:02,400 --> 00:18:04,549
what's called the base integer
instruction set which all risk five

900
00:18:04,549 --> 00:18:04,559
instruction set which all risk five
 

901
00:18:04,559 --> 00:18:06,070
instruction set which all risk five
processors

902
00:18:06,070 --> 00:18:06,080
processors
 

903
00:18:06,080 --> 00:18:09,029
processors
uh if we have fifth so gabriel asks in

904
00:18:09,029 --> 00:18:09,039
uh if we have fifth so gabriel asks in
 

905
00:18:09,039 --> 00:18:10,870
uh if we have fifth so gabriel asks in
the chat if we have 15 000 instructions

906
00:18:10,870 --> 00:18:10,880
the chat if we have 15 000 instructions
 

907
00:18:10,880 --> 00:18:12,549
the chat if we have 15 000 instructions
is it nearly impossible to efficiently

908
00:18:12,549 --> 00:18:12,559
is it nearly impossible to efficiently
 

909
00:18:12,559 --> 00:18:13,669
is it nearly impossible to efficiently
pipeline them

910
00:18:13,669 --> 00:18:13,679
pipeline them
 

911
00:18:13,679 --> 00:18:15,590
pipeline them
why do we need so many i like i was

912
00:18:15,590 --> 00:18:15,600
why do we need so many i like i was
 

913
00:18:15,600 --> 00:18:17,110
why do we need so many i like i was
saying we need so many for backwards

914
00:18:17,110 --> 00:18:17,120
saying we need so many for backwards
 

915
00:18:17,120 --> 00:18:19,029
saying we need so many for backwards
compatibility reasons it's up to you to

916
00:18:19,029 --> 00:18:19,039
compatibility reasons it's up to you to
 

917
00:18:19,039 --> 00:18:20,870
compatibility reasons it's up to you to
decide you know whether you

918
00:18:20,870 --> 00:18:20,880
decide you know whether you
 

919
00:18:20,880 --> 00:18:22,390
decide you know whether you
think that that's super important but

920
00:18:22,390 --> 00:18:22,400
think that that's super important but
 

921
00:18:22,400 --> 00:18:24,390
think that that's super important but
many of those instructions i think a ton

922
00:18:24,390 --> 00:18:24,400
many of those instructions i think a ton
 

923
00:18:24,400 --> 00:18:25,830
many of those instructions i think a ton
of them are also

924
00:18:25,830 --> 00:18:25,840
of them are also
 

925
00:18:25,840 --> 00:18:27,990
of them are also
eaten up by cmd instructions which are

926
00:18:27,990 --> 00:18:28,000
eaten up by cmd instructions which are
 

927
00:18:28,000 --> 00:18:28,870
eaten up by cmd instructions which are
their own

928
00:18:28,870 --> 00:18:28,880
their own
 

929
00:18:28,880 --> 00:18:32,310
their own
kind of special class of things um

930
00:18:32,310 --> 00:18:32,320
kind of special class of things um
 

931
00:18:32,320 --> 00:18:34,870
kind of special class of things um
you won't i i've never seen intel

932
00:18:34,870 --> 00:18:34,880
you won't i i've never seen intel
 

933
00:18:34,880 --> 00:18:36,710
you won't i i've never seen intel
assembly code that makes full uses

934
00:18:36,710 --> 00:18:36,720
assembly code that makes full uses
 

935
00:18:36,720 --> 00:18:38,470
assembly code that makes full uses
full usage out of the 15 000

936
00:18:38,470 --> 00:18:38,480
full usage out of the 15 000
 

937
00:18:38,480 --> 00:18:40,630
full usage out of the 15 000
instructions but mostly this comes from

938
00:18:40,630 --> 00:18:40,640
instructions but mostly this comes from
 

939
00:18:40,640 --> 00:18:42,310
instructions but mostly this comes from
from a need for backwards compatibility

940
00:18:42,310 --> 00:18:42,320
from a need for backwards compatibility
 

941
00:18:42,320 --> 00:18:43,990
from a need for backwards compatibility
and cmd but

942
00:18:43,990 --> 00:18:44,000
and cmd but
 

943
00:18:44,000 --> 00:18:46,070
and cmd but
like i was saying so risk five has uh

944
00:18:46,070 --> 00:18:46,080
like i was saying so risk five has uh
 

945
00:18:46,080 --> 00:18:47,029
like i was saying so risk five has uh
what's called the base

946
00:18:47,029 --> 00:18:47,039
what's called the base
 

947
00:18:47,039 --> 00:18:50,150
what's called the base
integer instruction set which uh

948
00:18:50,150 --> 00:18:50,160
integer instruction set which uh
 

949
00:18:50,160 --> 00:18:52,630
integer instruction set which uh
contains all of the normal add and

950
00:18:52,630 --> 00:18:52,640
contains all of the normal add and
 

951
00:18:52,640 --> 00:18:53,669
contains all of the normal add and
multiply

952
00:18:53,669 --> 00:18:53,679
multiply
 

953
00:18:53,679 --> 00:18:56,710
multiply
things and then processors can choose to

954
00:18:56,710 --> 00:18:56,720
things and then processors can choose to
 

955
00:18:56,720 --> 00:18:58,549
things and then processors can choose to
implement a number of other modules

956
00:18:58,549 --> 00:18:58,559
implement a number of other modules
 

957
00:18:58,559 --> 00:19:00,390
implement a number of other modules
which you can see along the side here

958
00:19:00,390 --> 00:19:00,400
which you can see along the side here
 

959
00:19:00,400 --> 00:19:02,470
which you can see along the side here
it's probably impossible to read on your

960
00:19:02,470 --> 00:19:02,480
it's probably impossible to read on your
 

961
00:19:02,480 --> 00:19:03,909
it's probably impossible to read on your
screen but for example

962
00:19:03,909 --> 00:19:03,919
screen but for example
 

963
00:19:03,919 --> 00:19:06,150
screen but for example
if you want a processor you know that

964
00:19:06,150 --> 00:19:06,160
if you want a processor you know that
 

965
00:19:06,160 --> 00:19:07,830
if you want a processor you know that
supports standard extension for single

966
00:19:07,830 --> 00:19:07,840
supports standard extension for single
 

967
00:19:07,840 --> 00:19:09,430
supports standard extension for single
precision floating point

968
00:19:09,430 --> 00:19:09,440
precision floating point
 

969
00:19:09,440 --> 00:19:12,150
precision floating point
then you can include the f module and

970
00:19:12,150 --> 00:19:12,160
then you can include the f module and
 

971
00:19:12,160 --> 00:19:13,909
then you can include the f module and
this makes it easier for risk five to

972
00:19:13,909 --> 00:19:13,919
this makes it easier for risk five to
 

973
00:19:13,919 --> 00:19:14,630
this makes it easier for risk five to
support

974
00:19:14,630 --> 00:19:14,640
support
 

975
00:19:14,640 --> 00:19:18,070
support
um backwards compatibility because if uh

976
00:19:18,070 --> 00:19:18,080
um backwards compatibility because if uh
 

977
00:19:18,080 --> 00:19:19,750
um backwards compatibility because if uh
you can just say you know what set of

978
00:19:19,750 --> 00:19:19,760
you can just say you know what set of
 

979
00:19:19,760 --> 00:19:22,230
you can just say you know what set of
the modules do i include and support

980
00:19:22,230 --> 00:19:22,240
the modules do i include and support
 

981
00:19:22,240 --> 00:19:25,350
the modules do i include and support
and the compiler can choose then the

982
00:19:25,350 --> 00:19:25,360
and the compiler can choose then the
 

983
00:19:25,360 --> 00:19:27,270
and the compiler can choose then the
compiler can say okay you know

984
00:19:27,270 --> 00:19:27,280
compiler can say okay you know
 

985
00:19:27,280 --> 00:19:28,950
compiler can say okay you know
this processor is telling me it supports

986
00:19:28,950 --> 00:19:28,960
this processor is telling me it supports
 

987
00:19:28,960 --> 00:19:30,789
this processor is telling me it supports
these modules so i can only compile this

988
00:19:30,789 --> 00:19:30,799
these modules so i can only compile this
 

989
00:19:30,799 --> 00:19:33,669
these modules so i can only compile this
code with these modules

990
00:19:33,669 --> 00:19:33,679
code with these modules
 

991
00:19:33,679 --> 00:19:36,390
code with these modules
okay bibx says it seems that the only

992
00:19:36,390 --> 00:19:36,400
okay bibx says it seems that the only
 

993
00:19:36,400 --> 00:19:38,390
okay bibx says it seems that the only
advantage of using x86 instead of risk

994
00:19:38,390 --> 00:19:38,400
advantage of using x86 instead of risk
 

995
00:19:38,400 --> 00:19:39,430
advantage of using x86 instead of risk
five processors is the kind of

996
00:19:39,430 --> 00:19:39,440
five processors is the kind of
 

997
00:19:39,440 --> 00:19:40,630
five processors is the kind of
performance you can get

998
00:19:40,630 --> 00:19:40,640
performance you can get
 

999
00:19:40,640 --> 00:19:42,549
performance you can get
however that performance comes as a

1000
00:19:42,549 --> 00:19:42,559
however that performance comes as a
 

1001
00:19:42,559 --> 00:19:43,990
however that performance comes as a
massive cost and complexity and

1002
00:19:43,990 --> 00:19:44,000
massive cost and complexity and
 

1003
00:19:44,000 --> 00:19:45,270
massive cost and complexity and
potential security

1004
00:19:45,270 --> 00:19:45,280
potential security
 

1005
00:19:45,280 --> 00:19:46,870
potential security
my question is why are we still using

1006
00:19:46,870 --> 00:19:46,880
my question is why are we still using
 

1007
00:19:46,880 --> 00:19:48,789
my question is why are we still using
x86 instead of moving to something like

1008
00:19:48,789 --> 00:19:48,799
x86 instead of moving to something like
 

1009
00:19:48,799 --> 00:19:49,990
x86 instead of moving to something like
risk five

1010
00:19:49,990 --> 00:19:50,000
risk five
 

1011
00:19:50,000 --> 00:19:52,710
risk five
uh well the big answer is that is the

1012
00:19:52,710 --> 00:19:52,720
uh well the big answer is that is the
 

1013
00:19:52,720 --> 00:19:54,710
uh well the big answer is that is the
world has run on x86

1014
00:19:54,710 --> 00:19:54,720
world has run on x86
 

1015
00:19:54,720 --> 00:19:57,669
world has run on x86
for i i don't have a great answer for

1016
00:19:57,669 --> 00:19:57,679
for i i don't have a great answer for
 

1017
00:19:57,679 --> 00:19:58,390
for i i don't have a great answer for
why

1018
00:19:58,390 --> 00:19:58,400
why
 

1019
00:19:58,400 --> 00:20:01,990
why
risk five is pretty modern too so

1020
00:20:01,990 --> 00:20:02,000
risk five is pretty modern too so
 

1021
00:20:02,000 --> 00:20:04,310
risk five is pretty modern too so
the world as a whole pretty much runs on

1022
00:20:04,310 --> 00:20:04,320
the world as a whole pretty much runs on
 

1023
00:20:04,320 --> 00:20:06,149
the world as a whole pretty much runs on
x86 so if you suddenly

1024
00:20:06,149 --> 00:20:06,159
x86 so if you suddenly
 

1025
00:20:06,159 --> 00:20:09,909
x86 so if you suddenly
start converting your processors

1026
00:20:09,909 --> 00:20:09,919
start converting your processors
 

1027
00:20:09,919 --> 00:20:13,990
start converting your processors
to risk five you run the risk of uh

1028
00:20:13,990 --> 00:20:14,000
to risk five you run the risk of uh
 

1029
00:20:14,000 --> 00:20:16,230
to risk five you run the risk of uh
you know losing support for a bunch of

1030
00:20:16,230 --> 00:20:16,240
you know losing support for a bunch of
 

1031
00:20:16,240 --> 00:20:17,430
you know losing support for a bunch of
important things

1032
00:20:17,430 --> 00:20:17,440
important things
 

1033
00:20:17,440 --> 00:20:19,750
important things
also there are like intel does do

1034
00:20:19,750 --> 00:20:19,760
also there are like intel does do
 

1035
00:20:19,760 --> 00:20:21,510
also there are like intel does do
interesting things within their

1036
00:20:21,510 --> 00:20:21,520
interesting things within their
 

1037
00:20:21,520 --> 00:20:22,789
interesting things within their
processors

1038
00:20:22,789 --> 00:20:22,799
processors
 

1039
00:20:22,799 --> 00:20:25,190
processors
it's like security wise there are

1040
00:20:25,190 --> 00:20:25,200
it's like security wise there are
 

1041
00:20:25,200 --> 00:20:27,350
it's like security wise there are
enclaves and intel processors and

1042
00:20:27,350 --> 00:20:27,360
enclaves and intel processors and
 

1043
00:20:27,360 --> 00:20:28,789
enclaves and intel processors and
there's things that um

1044
00:20:28,789 --> 00:20:28,799
there's things that um
 

1045
00:20:28,799 --> 00:20:30,549
there's things that um
they've been doing in recent years to

1046
00:20:30,549 --> 00:20:30,559
they've been doing in recent years to
 

1047
00:20:30,559 --> 00:20:32,710
they've been doing in recent years to
try to try and give you extra

1048
00:20:32,710 --> 00:20:32,720
try to try and give you extra
 

1049
00:20:32,720 --> 00:20:35,430
try to try and give you extra
added security and uh some of those

1050
00:20:35,430 --> 00:20:35,440
added security and uh some of those
 

1051
00:20:35,440 --> 00:20:37,110
added security and uh some of those
instructions that intel does implement

1052
00:20:37,110 --> 00:20:37,120
instructions that intel does implement
 

1053
00:20:37,120 --> 00:20:38,789
instructions that intel does implement
which are hyper-specific

1054
00:20:38,789 --> 00:20:38,799
which are hyper-specific
 

1055
00:20:38,799 --> 00:20:41,830
which are hyper-specific
can be really efficient for certain

1056
00:20:41,830 --> 00:20:41,840
can be really efficient for certain
 

1057
00:20:41,840 --> 00:20:44,470
can be really efficient for certain
computations uh and so they have so many

1058
00:20:44,470 --> 00:20:44,480
computations uh and so they have so many
 

1059
00:20:44,480 --> 00:20:46,710
computations uh and so they have so many
instructions that there's often you know

1060
00:20:46,710 --> 00:20:46,720
instructions that there's often you know
 

1061
00:20:46,720 --> 00:20:48,789
instructions that there's often you know
a perfect instruction for a situation

1062
00:20:48,789 --> 00:20:48,799
a perfect instruction for a situation
 

1063
00:20:48,799 --> 00:20:50,870
a perfect instruction for a situation
that may be more efficient than

1064
00:20:50,870 --> 00:20:50,880
that may be more efficient than
 

1065
00:20:50,880 --> 00:20:54,070
that may be more efficient than
than what exists within risk five but a

1066
00:20:54,070 --> 00:20:54,080
than what exists within risk five but a
 

1067
00:20:54,080 --> 00:20:55,669
than what exists within risk five but a
more practical answer is that risk five

1068
00:20:55,669 --> 00:20:55,679
more practical answer is that risk five
 

1069
00:20:55,679 --> 00:20:57,350
more practical answer is that risk five
is relatively new and we just don't

1070
00:20:57,350 --> 00:20:57,360
is relatively new and we just don't
 

1071
00:20:57,360 --> 00:20:58,630
is relatively new and we just don't
you know nobody's really making

1072
00:20:58,630 --> 00:20:58,640
you know nobody's really making
 

1073
00:20:58,640 --> 00:21:00,310
you know nobody's really making
processors for personal computers i

1074
00:21:00,310 --> 00:21:00,320
processors for personal computers i
 

1075
00:21:00,320 --> 00:21:01,110
processors for personal computers i
think the

1076
00:21:01,110 --> 00:21:01,120
think the
 

1077
00:21:01,120 --> 00:21:04,070
think the
sci 5 announcement is super recent um

1078
00:21:04,070 --> 00:21:04,080
sci 5 announcement is super recent um
 

1079
00:21:04,080 --> 00:21:04,630
sci 5 announcement is super recent um
and

1080
00:21:04,630 --> 00:21:04,640
and
 

1081
00:21:04,640 --> 00:21:06,070
and
they're kind of the first people to be

1082
00:21:06,070 --> 00:21:06,080
they're kind of the first people to be
 

1083
00:21:06,080 --> 00:21:08,870
they're kind of the first people to be
doing that so on a practical level

1084
00:21:08,870 --> 00:21:08,880
doing that so on a practical level
 

1085
00:21:08,880 --> 00:21:10,950
doing that so on a practical level
that and the inability to run all the

1086
00:21:10,950 --> 00:21:10,960
that and the inability to run all the
 

1087
00:21:10,960 --> 00:21:12,870
that and the inability to run all the
software design for intel

1088
00:21:12,870 --> 00:21:12,880
software design for intel
 

1089
00:21:12,880 --> 00:21:17,270
software design for intel
is is my best answer

1090
00:21:17,270 --> 00:21:17,280
is is my best answer
 

1091
00:21:17,280 --> 00:21:19,669
is is my best answer
so we've been now chatting a little bit

1092
00:21:19,669 --> 00:21:19,679
so we've been now chatting a little bit
 

1093
00:21:19,679 --> 00:21:22,870
so we've been now chatting a little bit
about assembly so i just wanted to

1094
00:21:22,870 --> 00:21:22,880
about assembly so i just wanted to
 

1095
00:21:22,880 --> 00:21:26,630
about assembly so i just wanted to
take a look at some actual assembly code

1096
00:21:26,630 --> 00:21:26,640
take a look at some actual assembly code
 

1097
00:21:26,640 --> 00:21:29,990
take a look at some actual assembly code
so here is uh the

1098
00:21:29,990 --> 00:21:30,000
so here is uh the
 

1099
00:21:30,000 --> 00:21:31,990
so here is uh the
c code for what's below so this is a

1100
00:21:31,990 --> 00:21:32,000
c code for what's below so this is a
 

1101
00:21:32,000 --> 00:21:34,310
c code for what's below so this is a
simple function that has an accumulator

1102
00:21:34,310 --> 00:21:34,320
simple function that has an accumulator
 

1103
00:21:34,320 --> 00:21:37,669
simple function that has an accumulator
we loop from zero to n and we

1104
00:21:37,669 --> 00:21:37,679
we loop from zero to n and we
 

1105
00:21:37,679 --> 00:21:40,630
we loop from zero to n and we
sum up all the numbers from uh from zero

1106
00:21:40,630 --> 00:21:40,640
sum up all the numbers from uh from zero
 

1107
00:21:40,640 --> 00:21:41,909
sum up all the numbers from uh from zero
to n

1108
00:21:41,909 --> 00:21:41,919
to n
 

1109
00:21:41,919 --> 00:21:44,950
to n
and then return that value and uh

1110
00:21:44,950 --> 00:21:44,960
and then return that value and uh
 

1111
00:21:44,960 --> 00:21:46,470
and then return that value and uh
at its simplest level you know this is

1112
00:21:46,470 --> 00:21:46,480
at its simplest level you know this is
 

1113
00:21:46,480 --> 00:21:48,390
at its simplest level you know this is
the easiest kind of assembly that you

1114
00:21:48,390 --> 00:21:48,400
the easiest kind of assembly that you
 

1115
00:21:48,400 --> 00:21:50,789
the easiest kind of assembly that you
can get out of compiling that program

1116
00:21:50,789 --> 00:21:50,799
can get out of compiling that program
 

1117
00:21:50,799 --> 00:21:53,830
can get out of compiling that program
if you actually go into your own

1118
00:21:53,830 --> 00:21:53,840
if you actually go into your own
 

1119
00:21:53,840 --> 00:21:55,350
if you actually go into your own
computer and you write the c

1120
00:21:55,350 --> 00:21:55,360
computer and you write the c
 

1121
00:21:55,360 --> 00:21:57,190
computer and you write the c
code and you try to compile it you will

1122
00:21:57,190 --> 00:21:57,200
code and you try to compile it you will
 

1123
00:21:57,200 --> 00:21:58,470
code and you try to compile it you will
end up with something

1124
00:21:58,470 --> 00:21:58,480
end up with something
 

1125
00:21:58,480 --> 00:22:01,430
end up with something
that likely looks quite different and

1126
00:22:01,430 --> 00:22:01,440
that likely looks quite different and
 

1127
00:22:01,440 --> 00:22:03,350
that likely looks quite different and
that's true for a variety of reasons we

1128
00:22:03,350 --> 00:22:03,360
that's true for a variety of reasons we
 

1129
00:22:03,360 --> 00:22:03,909
that's true for a variety of reasons we
haven't

1130
00:22:03,909 --> 00:22:03,919
haven't
 

1131
00:22:03,919 --> 00:22:05,270
haven't
some of which we'll get to and some of

1132
00:22:05,270 --> 00:22:05,280
some of which we'll get to and some of
 

1133
00:22:05,280 --> 00:22:07,110
some of which we'll get to and some of
which are compiler specific

1134
00:22:07,110 --> 00:22:07,120
which are compiler specific
 

1135
00:22:07,120 --> 00:22:10,470
which are compiler specific
so modern compilers make a large number

1136
00:22:10,470 --> 00:22:10,480
so modern compilers make a large number
 

1137
00:22:10,480 --> 00:22:12,149
so modern compilers make a large number
of optimizations

1138
00:22:12,149 --> 00:22:12,159
of optimizations
 

1139
00:22:12,159 --> 00:22:15,430
of optimizations
um within when they compile your c2

1140
00:22:15,430 --> 00:22:15,440
um within when they compile your c2
 

1141
00:22:15,440 --> 00:22:16,789
um within when they compile your c2
assembly and so your assembly

1142
00:22:16,789 --> 00:22:16,799
assembly and so your assembly
 

1143
00:22:16,799 --> 00:22:18,390
assembly and so your assembly
instructions may look different

1144
00:22:18,390 --> 00:22:18,400
instructions may look different
 

1145
00:22:18,400 --> 00:22:20,630
instructions may look different
for instance while you're debugging in

1146
00:22:20,630 --> 00:22:20,640
for instance while you're debugging in
 

1147
00:22:20,640 --> 00:22:22,390
for instance while you're debugging in
gdv you may come across something that

1148
00:22:22,390 --> 00:22:22,400
gdv you may come across something that
 

1149
00:22:22,400 --> 00:22:23,350
gdv you may come across something that
tells you that it's

1150
00:22:23,350 --> 00:22:23,360
tells you that it's
 

1151
00:22:23,360 --> 00:22:26,149
tells you that it's
some variable has been optimized out and

1152
00:22:26,149 --> 00:22:26,159
some variable has been optimized out and
 

1153
00:22:26,159 --> 00:22:27,909
some variable has been optimized out and
that means that the compiler decided it

1154
00:22:27,909 --> 00:22:27,919
that means that the compiler decided it
 

1155
00:22:27,919 --> 00:22:29,430
that means that the compiler decided it
didn't need that variable

1156
00:22:29,430 --> 00:22:29,440
didn't need that variable
 

1157
00:22:29,440 --> 00:22:32,390
didn't need that variable
uh and so that'll be gone effectively

1158
00:22:32,390 --> 00:22:32,400
uh and so that'll be gone effectively
 

1159
00:22:32,400 --> 00:22:33,590
uh and so that'll be gone effectively
from the program

1160
00:22:33,590 --> 00:22:33,600
from the program
 

1161
00:22:33,600 --> 00:22:35,190
from the program
but yeah and it's at its most

1162
00:22:35,190 --> 00:22:35,200
but yeah and it's at its most
 

1163
00:22:35,200 --> 00:22:36,950
but yeah and it's at its most
straightforward

1164
00:22:36,950 --> 00:22:36,960
straightforward
 

1165
00:22:36,960 --> 00:22:39,830
straightforward
we're moving uh the value that's in a

1166
00:22:39,830 --> 00:22:39,840
we're moving uh the value that's in a
 

1167
00:22:39,840 --> 00:22:40,470
we're moving uh the value that's in a
zero to t

1168
00:22:40,470 --> 00:22:40,480
zero to t
 

1169
00:22:40,480 --> 00:22:43,029
zero to t
zero we're setting a zero to zero and

1170
00:22:43,029 --> 00:22:43,039
zero we're setting a zero to zero and
 

1171
00:22:43,039 --> 00:22:43,830
zero we're setting a zero to zero and
then

1172
00:22:43,830 --> 00:22:43,840
then
 

1173
00:22:43,840 --> 00:22:47,270
then
we are just adding what's in t zero to a

1174
00:22:47,270 --> 00:22:47,280
we are just adding what's in t zero to a
 

1175
00:22:47,280 --> 00:22:47,750
we are just adding what's in t zero to a
zero

1176
00:22:47,750 --> 00:22:47,760
zero
 

1177
00:22:47,760 --> 00:22:50,070
zero
for every iteration of a loop until t

1178
00:22:50,070 --> 00:22:50,080
for every iteration of a loop until t
 

1179
00:22:50,080 --> 00:22:52,390
for every iteration of a loop until t
zero reaches zero

1180
00:22:52,390 --> 00:22:52,400
zero reaches zero
 

1181
00:22:52,400 --> 00:22:53,669
zero reaches zero
and that's all that's going on in this

1182
00:22:53,669 --> 00:22:53,679
and that's all that's going on in this
 

1183
00:22:53,679 --> 00:22:57,350
and that's all that's going on in this
piece uh amir your hands erased

1184
00:22:57,350 --> 00:22:57,360

 

1185
00:22:57,360 --> 00:22:59,909

yeah i was wondering what dot section

1186
00:22:59,909 --> 00:22:59,919
yeah i was wondering what dot section
 

1187
00:22:59,919 --> 00:23:00,710
yeah i was wondering what dot section
dot text

1188
00:23:00,710 --> 00:23:00,720
dot text
 

1189
00:23:00,720 --> 00:23:03,669
dot text
and dot global do global means that you

1190
00:23:03,669 --> 00:23:03,679
and dot global do global means that you
 

1191
00:23:03,679 --> 00:23:04,230
and dot global do global means that you
can

1192
00:23:04,230 --> 00:23:04,240
can
 

1193
00:23:04,240 --> 00:23:06,870
can
include this from other files so if we

1194
00:23:06,870 --> 00:23:06,880
include this from other files so if we
 

1195
00:23:06,880 --> 00:23:08,950
include this from other files so if we
actually hop into

1196
00:23:08,950 --> 00:23:08,960
actually hop into
 

1197
00:23:08,960 --> 00:23:14,230
actually hop into
uh let's see def.h

1198
00:23:14,230 --> 00:23:14,240
uh let's see def.h
 

1199
00:23:14,240 --> 00:23:17,350
uh let's see def.h
this is the file that you're uh will if

1200
00:23:17,350 --> 00:23:17,360
this is the file that you're uh will if
 

1201
00:23:17,360 --> 00:23:18,870
this is the file that you're uh will if
you aren't already you will become quite

1202
00:23:18,870 --> 00:23:18,880
you aren't already you will become quite
 

1203
00:23:18,880 --> 00:23:20,149
you aren't already you will become quite
familiar with this

1204
00:23:20,149 --> 00:23:20,159
familiar with this
 

1205
00:23:20,159 --> 00:23:22,310
familiar with this
includes basically all of the functions

1206
00:23:22,310 --> 00:23:22,320
includes basically all of the functions
 

1207
00:23:22,320 --> 00:23:23,669
includes basically all of the functions
within the kernel that you may want to

1208
00:23:23,669 --> 00:23:23,679
within the kernel that you may want to
 

1209
00:23:23,679 --> 00:23:24,870
within the kernel that you may want to
be using

1210
00:23:24,870 --> 00:23:24,880
be using
 

1211
00:23:24,880 --> 00:23:28,149
be using
and uh within here you know we can see

1212
00:23:28,149 --> 00:23:28,159
and uh within here you know we can see
 

1213
00:23:28,159 --> 00:23:29,590
and uh within here you know we can see
that in my

1214
00:23:29,590 --> 00:23:29,600
that in my
 

1215
00:23:29,600 --> 00:23:32,149
that in my
my file i've included the definitions to

1216
00:23:32,149 --> 00:23:32,159
my file i've included the definitions to
 

1217
00:23:32,159 --> 00:23:33,350
my file i've included the definitions to
these functions

1218
00:23:33,350 --> 00:23:33,360
these functions
 

1219
00:23:33,360 --> 00:23:37,590
these functions
and so that dot global make sure that

1220
00:23:37,590 --> 00:23:37,600
and so that dot global make sure that
 

1221
00:23:37,600 --> 00:23:39,669
and so that dot global make sure that
that these these functions can be called

1222
00:23:39,669 --> 00:23:39,679
that these these functions can be called
 

1223
00:23:39,679 --> 00:23:41,110
that these these functions can be called
from other places

1224
00:23:41,110 --> 00:23:41,120
from other places
 

1225
00:23:41,120 --> 00:23:44,149
from other places
and dot text just says this is code

1226
00:23:44,149 --> 00:23:44,159
and dot text just says this is code
 

1227
00:23:44,159 --> 00:23:47,750
and dot text just says this is code
so if you recall from figure 3.4

1228
00:23:47,750 --> 00:23:47,760
so if you recall from figure 3.4
 

1229
00:23:47,760 --> 00:23:51,669
so if you recall from figure 3.4
in the book so that's if we go

1230
00:23:51,669 --> 00:23:51,679
in the book so that's if we go
 

1231
00:23:51,679 --> 00:23:56,310
in the book so that's if we go
to the book

1232
00:23:56,310 --> 00:23:56,320

 

1233
00:23:56,320 --> 00:23:59,590

and we go into page tables

1234
00:23:59,590 --> 00:23:59,600
and we go into page tables
 

1235
00:23:59,600 --> 00:24:02,630
and we go into page tables
process address space so in here in this

1236
00:24:02,630 --> 00:24:02,640
process address space so in here in this
 

1237
00:24:02,640 --> 00:24:03,750
process address space so in here in this
diagram

1238
00:24:03,750 --> 00:24:03,760
diagram
 

1239
00:24:03,760 --> 00:24:05,750
diagram
that's the same thing this is text so it

1240
00:24:05,750 --> 00:24:05,760
that's the same thing this is text so it
 

1241
00:24:05,760 --> 00:24:09,269
that's the same thing this is text so it
just means code

1242
00:24:09,269 --> 00:24:09,279

 

1243
00:24:09,279 --> 00:24:14,789

that answer your question okay thanks

1244
00:24:14,789 --> 00:24:14,799

 

1245
00:24:14,799 --> 00:24:18,149

and so if we want to run let's say we

1246
00:24:18,149 --> 00:24:18,159
and so if we want to run let's say we
 

1247
00:24:18,159 --> 00:24:19,590
and so if we want to run let's say we
have some assembly

1248
00:24:19,590 --> 00:24:19,600
have some assembly
 

1249
00:24:19,600 --> 00:24:21,830
have some assembly
also if you ever find yourself

1250
00:24:21,830 --> 00:24:21,840
also if you ever find yourself
 

1251
00:24:21,840 --> 00:24:23,190
also if you ever find yourself
interested in

1252
00:24:23,190 --> 00:24:23,200
interested in
 

1253
00:24:23,200 --> 00:24:26,230
interested in
what the kernel looks like we can go

1254
00:24:26,230 --> 00:24:26,240
what the kernel looks like we can go
 

1255
00:24:26,240 --> 00:24:28,950
what the kernel looks like we can go
inside the after you compile you can

1256
00:24:28,950 --> 00:24:28,960
inside the after you compile you can
 

1257
00:24:28,960 --> 00:24:30,830
inside the after you compile you can
look in the file kernel

1258
00:24:30,830 --> 00:24:30,840
look in the file kernel
 

1259
00:24:30,840 --> 00:24:35,510
look in the file kernel
kernel.asm and this is the full kind of

1260
00:24:35,510 --> 00:24:35,520
kernel.asm and this is the full kind of
 

1261
00:24:35,520 --> 00:24:39,350
kernel.asm and this is the full kind of
assembly for the kernel

1262
00:24:39,350 --> 00:24:39,360
assembly for the kernel
 

1263
00:24:39,360 --> 00:24:41,909
assembly for the kernel
of xv6 and each of these numbers on the

1264
00:24:41,909 --> 00:24:41,919
of xv6 and each of these numbers on the
 

1265
00:24:41,919 --> 00:24:43,110
of xv6 and each of these numbers on the
left here

1266
00:24:43,110 --> 00:24:43,120
left here
 

1267
00:24:43,120 --> 00:24:45,510
left here
is a label that tells you where in

1268
00:24:45,510 --> 00:24:45,520
is a label that tells you where in
 

1269
00:24:45,520 --> 00:24:46,310
is a label that tells you where in
memory this

1270
00:24:46,310 --> 00:24:46,320
memory this
 

1271
00:24:46,320 --> 00:24:48,950
memory this
in this instruction will be and that'll

1272
00:24:48,950 --> 00:24:48,960
in this instruction will be and that'll
 

1273
00:24:48,960 --> 00:24:50,630
in this instruction will be and that'll
come in quite handy

1274
00:24:50,630 --> 00:24:50,640
come in quite handy
 

1275
00:24:50,640 --> 00:24:54,710
come in quite handy
and so here is the here's the actual uh

1276
00:24:54,710 --> 00:24:54,720
and so here is the here's the actual uh
 

1277
00:24:54,720 --> 00:24:56,230
and so here is the here's the actual uh
here's the actual assembly code and you

1278
00:24:56,230 --> 00:24:56,240
here's the actual assembly code and you
 

1279
00:24:56,240 --> 00:24:59,029
here's the actual assembly code and you
can see the labels for the functions

1280
00:24:59,029 --> 00:24:59,039
can see the labels for the functions
 

1281
00:24:59,039 --> 00:25:00,310
can see the labels for the functions
and where they're declared so this is

1282
00:25:00,310 --> 00:25:00,320
and where they're declared so this is
 

1283
00:25:00,320 --> 00:25:03,269
and where they're declared so this is
this is a can be really really useful as

1284
00:25:03,269 --> 00:25:03,279
this is a can be really really useful as
 

1285
00:25:03,279 --> 00:25:04,310
this is a can be really really useful as
we're debugging code

1286
00:25:04,310 --> 00:25:04,320
we're debugging code
 

1287
00:25:04,320 --> 00:25:06,070
we're debugging code
and hopefully i'll be able to show that

1288
00:25:06,070 --> 00:25:06,080
and hopefully i'll be able to show that
 

1289
00:25:06,080 --> 00:25:07,590
and hopefully i'll be able to show that
in a second

1290
00:25:07,590 --> 00:25:07,600
in a second
 

1291
00:25:07,600 --> 00:25:10,710
in a second
but for now we'll jump back to this

1292
00:25:10,710 --> 00:25:10,720
but for now we'll jump back to this
 

1293
00:25:10,720 --> 00:25:11,510
but for now we'll jump back to this
first function

1294
00:25:11,510 --> 00:25:11,520
first function
 

1295
00:25:11,520 --> 00:25:14,310
first function
sum2 and we'll just see how we can

1296
00:25:14,310 --> 00:25:14,320
sum2 and we'll just see how we can
 

1297
00:25:14,320 --> 00:25:15,430
sum2 and we'll just see how we can
examine that

1298
00:25:15,430 --> 00:25:15,440
examine that
 

1299
00:25:15,440 --> 00:25:19,590
examine that
inside of gdd so the first step is i

1300
00:25:19,590 --> 00:25:19,600
inside of gdd so the first step is i
 

1301
00:25:19,600 --> 00:25:21,750
inside of gdd so the first step is i
have my two windows here

1302
00:25:21,750 --> 00:25:21,760
have my two windows here
 

1303
00:25:21,760 --> 00:25:23,830
have my two windows here
what's the difference between asm and s

1304
00:25:23,830 --> 00:25:23,840
what's the difference between asm and s
 

1305
00:25:23,840 --> 00:25:25,190
what's the difference between asm and s
files

1306
00:25:25,190 --> 00:25:25,200
files
 

1307
00:25:25,200 --> 00:25:28,710
files
um i'm not 100

1308
00:25:28,710 --> 00:25:28,720
um i'm not 100
 

1309
00:25:28,720 --> 00:25:31,029
um i'm not 100
certain they're both assembly i think

1310
00:25:31,029 --> 00:25:31,039
certain they're both assembly i think
 

1311
00:25:31,039 --> 00:25:33,430
certain they're both assembly i think
the dot asm file includes a bunch of

1312
00:25:33,430 --> 00:25:33,440
the dot asm file includes a bunch of
 

1313
00:25:33,440 --> 00:25:35,350
the dot asm file includes a bunch of
extra annotations that aren't included

1314
00:25:35,350 --> 00:25:35,360
extra annotations that aren't included
 

1315
00:25:35,360 --> 00:25:35,750
extra annotations that aren't included
in dot

1316
00:25:35,750 --> 00:25:35,760
in dot
 

1317
00:25:35,760 --> 00:25:38,070
in dot
s so usually when you compile your c

1318
00:25:38,070 --> 00:25:38,080
s so usually when you compile your c
 

1319
00:25:38,080 --> 00:25:39,990
s so usually when you compile your c
code to

1320
00:25:39,990 --> 00:25:40,000
code to
 

1321
00:25:40,000 --> 00:25:41,990
code to
dot s you'll end up with something that

1322
00:25:41,990 --> 00:25:42,000
dot s you'll end up with something that
 

1323
00:25:42,000 --> 00:25:43,350
dot s you'll end up with something that
doesn't include all of those line

1324
00:25:43,350 --> 00:25:43,360
doesn't include all of those line
 

1325
00:25:43,360 --> 00:25:45,590
doesn't include all of those line
numbers and things like that so

1326
00:25:45,590 --> 00:25:45,600
numbers and things like that so
 

1327
00:25:45,600 --> 00:25:46,789
numbers and things like that so
if you're curious about how we get the

1328
00:25:46,789 --> 00:25:46,799
if you're curious about how we get the
 

1329
00:25:46,799 --> 00:25:49,029
if you're curious about how we get the
dot asm file i think the makefile

1330
00:25:49,029 --> 00:25:49,039
dot asm file i think the makefile
 

1331
00:25:49,039 --> 00:25:52,070
dot asm file i think the makefile
um will tell you the exact steps used to

1332
00:25:52,070 --> 00:25:52,080
um will tell you the exact steps used to
 

1333
00:25:52,080 --> 00:25:56,870
um will tell you the exact steps used to
get that and so

1334
00:25:56,870 --> 00:25:56,880
get that and so
 

1335
00:25:56,880 --> 00:25:58,470
get that and so
if we're we're in our terminal we have

1336
00:25:58,470 --> 00:25:58,480
if we're we're in our terminal we have
 

1337
00:25:58,480 --> 00:26:00,549
if we're we're in our terminal we have
our two uh two windows

1338
00:26:00,549 --> 00:26:00,559
our two uh two windows
 

1339
00:26:00,559 --> 00:26:03,909
our two uh two windows
so the first thing to do is of course uh

1340
00:26:03,909 --> 00:26:03,919
so the first thing to do is of course uh
 

1341
00:26:03,919 --> 00:26:08,470
so the first thing to do is of course uh
get qmu up and running so we can

1342
00:26:08,470 --> 00:26:08,480
get qmu up and running so we can
 

1343
00:26:08,480 --> 00:26:10,630
get qmu up and running so we can
start it within gdb mode so now we're

1344
00:26:10,630 --> 00:26:10,640
start it within gdb mode so now we're
 

1345
00:26:10,640 --> 00:26:11,909
start it within gdb mode so now we're
we're frozen here

1346
00:26:11,909 --> 00:26:11,919
we're frozen here
 

1347
00:26:11,919 --> 00:26:15,909
we're frozen here
and then we can start gdb uh

1348
00:26:15,909 --> 00:26:15,919
and then we can start gdb uh
 

1349
00:26:15,919 --> 00:26:18,470
and then we can start gdb uh
and what uh what what what uh professor

1350
00:26:18,470 --> 00:26:18,480
and what uh what what what uh professor
 

1351
00:26:18,480 --> 00:26:20,549
and what uh what what what uh professor
crasher showed last week

1352
00:26:20,549 --> 00:26:20,559
crasher showed last week
 

1353
00:26:20,559 --> 00:26:22,390
crasher showed last week
and which i think some people were

1354
00:26:22,390 --> 00:26:22,400
and which i think some people were
 

1355
00:26:22,400 --> 00:26:23,990
and which i think some people were
excited about if you type tui

1356
00:26:23,990 --> 00:26:24,000
excited about if you type tui
 

1357
00:26:24,000 --> 00:26:26,549
excited about if you type tui
enable you get this nice window which is

1358
00:26:26,549 --> 00:26:26,559
enable you get this nice window which is
 

1359
00:26:26,559 --> 00:26:28,390
enable you get this nice window which is
empty for now but will come in

1360
00:26:28,390 --> 00:26:28,400
empty for now but will come in
 

1361
00:26:28,400 --> 00:26:30,789
empty for now but will come in
quite useful as you're debugging so we

1362
00:26:30,789 --> 00:26:30,799
quite useful as you're debugging so we
 

1363
00:26:30,799 --> 00:26:32,950
quite useful as you're debugging so we
can set a breakpoint and i should note

1364
00:26:32,950 --> 00:26:32,960
can set a breakpoint and i should note
 

1365
00:26:32,960 --> 00:26:35,350
can set a breakpoint and i should note
that all this code is living inside the

1366
00:26:35,350 --> 00:26:35,360
that all this code is living inside the
 

1367
00:26:35,360 --> 00:26:37,350
that all this code is living inside the
kernel none of this is in user space

1368
00:26:37,350 --> 00:26:37,360
kernel none of this is in user space
 

1369
00:26:37,360 --> 00:26:38,710
kernel none of this is in user space
so we don't have any of those annoying

1370
00:26:38,710 --> 00:26:38,720
so we don't have any of those annoying
 

1371
00:26:38,720 --> 00:26:40,710
so we don't have any of those annoying
problems setting breakpoints so i can

1372
00:26:40,710 --> 00:26:40,720
problems setting breakpoints so i can
 

1373
00:26:40,720 --> 00:26:42,070
problems setting breakpoints so i can
set a breakpoint

1374
00:26:42,070 --> 00:26:42,080
set a breakpoint
 

1375
00:26:42,080 --> 00:26:44,789
set a breakpoint
in the function sum2 and then just

1376
00:26:44,789 --> 00:26:44,799
in the function sum2 and then just
 

1377
00:26:44,799 --> 00:26:47,190
in the function sum2 and then just
continue running

1378
00:26:47,190 --> 00:26:47,200
continue running
 

1379
00:26:47,200 --> 00:26:50,630
continue running
and run that function and now

1380
00:26:50,630 --> 00:26:50,640
and run that function and now
 

1381
00:26:50,640 --> 00:26:53,669
and run that function and now
so the first window that you see in tui

1382
00:26:53,669 --> 00:26:53,679
so the first window that you see in tui
 

1383
00:26:53,679 --> 00:26:57,269
so the first window that you see in tui
is the source window

1384
00:26:57,269 --> 00:26:57,279
is the source window
 

1385
00:26:57,279 --> 00:26:59,830
is the source window
uh yes as david is saying those those

1386
00:26:59,830 --> 00:26:59,840
uh yes as david is saying those those
 

1387
00:26:59,840 --> 00:27:01,909
uh yes as david is saying those those
numbers on the left of kernel.asm

1388
00:27:01,909 --> 00:27:01,919
numbers on the left of kernel.asm
 

1389
00:27:01,919 --> 00:27:05,269
numbers on the left of kernel.asm
are really useful when you're debugging

1390
00:27:05,269 --> 00:27:05,279
are really useful when you're debugging
 

1391
00:27:05,279 --> 00:27:07,430
are really useful when you're debugging
things and you get an address

1392
00:27:07,430 --> 00:27:07,440
things and you get an address
 

1393
00:27:07,440 --> 00:27:09,669
things and you get an address
it'll tell you so you can see now even

1394
00:27:09,669 --> 00:27:09,679
it'll tell you so you can see now even
 

1395
00:27:09,679 --> 00:27:11,750
it'll tell you so you can see now even
here we can see that the program so pc

1396
00:27:11,750 --> 00:27:11,760
here we can see that the program so pc
 

1397
00:27:11,760 --> 00:27:13,350
here we can see that the program so pc
here in gdb

1398
00:27:13,350 --> 00:27:13,360
here in gdb
 

1399
00:27:13,360 --> 00:27:15,190
here in gdb
is the program counter so we can see

1400
00:27:15,190 --> 00:27:15,200
is the program counter so we can see
 

1401
00:27:15,200 --> 00:27:16,870
is the program counter so we can see
this address 8 0 0

1402
00:27:16,870 --> 00:27:16,880
this address 8 0 0
 

1403
00:27:16,880 --> 00:27:20,350
this address 8 0 0
so on and so forth if we go into

1404
00:27:20,350 --> 00:27:20,360
so on and so forth if we go into
 

1405
00:27:20,360 --> 00:27:21,830
so on and so forth if we go into
kernel.asm

1406
00:27:21,830 --> 00:27:21,840
kernel.asm
 

1407
00:27:21,840 --> 00:27:24,310
kernel.asm
and we search for that specific address

1408
00:27:24,310 --> 00:27:24,320
and we search for that specific address
 

1409
00:27:24,320 --> 00:27:26,870
and we search for that specific address
we can see that it's the

1410
00:27:26,870 --> 00:27:26,880
we can see that it's the
 

1411
00:27:26,880 --> 00:27:28,789
we can see that it's the
uh well it comes up twice because it's a

1412
00:27:28,789 --> 00:27:28,799
uh well it comes up twice because it's a
 

1413
00:27:28,799 --> 00:27:30,870
uh well it comes up twice because it's a
function call but if we look here this

1414
00:27:30,870 --> 00:27:30,880
function call but if we look here this
 

1415
00:27:30,880 --> 00:27:32,070
function call but if we look here this
is that address

1416
00:27:32,070 --> 00:27:32,080
is that address
 

1417
00:27:32,080 --> 00:27:35,110
is that address
it's the top of the sum2 function so

1418
00:27:35,110 --> 00:27:35,120
it's the top of the sum2 function so
 

1419
00:27:35,120 --> 00:27:37,590
it's the top of the sum2 function so
if you see any time you see one of these

1420
00:27:37,590 --> 00:27:37,600
if you see any time you see one of these
 

1421
00:27:37,600 --> 00:27:38,389
if you see any time you see one of these
um

1422
00:27:38,389 --> 00:27:38,399
um
 

1423
00:27:38,399 --> 00:27:39,750
um
all the kernel addresses will look

1424
00:27:39,750 --> 00:27:39,760
all the kernel addresses will look
 

1425
00:27:39,760 --> 00:27:44,149
all the kernel addresses will look
something like 0x8000

1426
00:27:44,149 --> 00:27:44,159
something like 0x8000
 

1427
00:27:44,159 --> 00:27:48,070
something like 0x8000
some numbers those uh those addresses

1428
00:27:48,070 --> 00:27:48,080
some numbers those uh those addresses
 

1429
00:27:48,080 --> 00:27:50,230
some numbers those uh those addresses
you can jump straight into kernel.asm

1430
00:27:50,230 --> 00:27:50,240
you can jump straight into kernel.asm
 

1431
00:27:50,240 --> 00:27:51,750
you can jump straight into kernel.asm
and find the exact

1432
00:27:51,750 --> 00:27:51,760
and find the exact
 

1433
00:27:51,760 --> 00:27:53,669
and find the exact
line of assembly where the problem is

1434
00:27:53,669 --> 00:27:53,679
line of assembly where the problem is
 

1435
00:27:53,679 --> 00:27:54,870
line of assembly where the problem is
occurring and then you can set your

1436
00:27:54,870 --> 00:27:54,880
occurring and then you can set your
 

1437
00:27:54,880 --> 00:27:56,470
occurring and then you can set your
breakpoints accordingly

1438
00:27:56,470 --> 00:27:56,480
breakpoints accordingly
 

1439
00:27:56,480 --> 00:27:59,830
breakpoints accordingly
but for now uh that top window in tui

1440
00:27:59,830 --> 00:27:59,840
but for now uh that top window in tui
 

1441
00:27:59,840 --> 00:28:03,029
but for now uh that top window in tui
is source and if we want to look at

1442
00:28:03,029 --> 00:28:03,039
is source and if we want to look at
 

1443
00:28:03,039 --> 00:28:04,630
is source and if we want to look at
specifically the assembly we can do

1444
00:28:04,630 --> 00:28:04,640
specifically the assembly we can do
 

1445
00:28:04,640 --> 00:28:07,990
specifically the assembly we can do
layout ngdasm

1446
00:28:07,990 --> 00:28:08,000
layout ngdasm
 

1447
00:28:08,000 --> 00:28:09,990
layout ngdasm
and that'll give us all of the assembly

1448
00:28:09,990 --> 00:28:10,000
and that'll give us all of the assembly
 

1449
00:28:10,000 --> 00:28:11,110
and that'll give us all of the assembly
instructions

1450
00:28:11,110 --> 00:28:11,120
instructions
 

1451
00:28:11,120 --> 00:28:13,750
instructions
and we can also look at the registers if

1452
00:28:13,750 --> 00:28:13,760
and we can also look at the registers if
 

1453
00:28:13,760 --> 00:28:16,149
and we can also look at the registers if
we type layout reg we'll get assembly

1454
00:28:16,149 --> 00:28:16,159
we type layout reg we'll get assembly
 

1455
00:28:16,159 --> 00:28:18,549
we type layout reg we'll get assembly
and registers and if you find yourself

1456
00:28:18,549 --> 00:28:18,559
and registers and if you find yourself
 

1457
00:28:18,559 --> 00:28:19,909
and registers and if you find yourself
you know wanting to scroll through

1458
00:28:19,909 --> 00:28:19,919
you know wanting to scroll through
 

1459
00:28:19,919 --> 00:28:21,350
you know wanting to scroll through
things

1460
00:28:21,350 --> 00:28:21,360
things
 

1461
00:28:21,360 --> 00:28:22,789
things
now that we have three windows we need

1462
00:28:22,789 --> 00:28:22,799
now that we have three windows we need
 

1463
00:28:22,799 --> 00:28:24,549
now that we have three windows we need
to specify which one is focused so if i

1464
00:28:24,549 --> 00:28:24,559
to specify which one is focused so if i
 

1465
00:28:24,559 --> 00:28:25,909
to specify which one is focused so if i
want to look through all the registers

1466
00:28:25,909 --> 00:28:25,919
want to look through all the registers
 

1467
00:28:25,919 --> 00:28:26,710
want to look through all the registers
i'm going to focus

1468
00:28:26,710 --> 00:28:26,720
i'm going to focus
 

1469
00:28:26,720 --> 00:28:29,750
i'm going to focus
reg and now my focus is on the register

1470
00:28:29,750 --> 00:28:29,760
reg and now my focus is on the register
 

1471
00:28:29,760 --> 00:28:31,510
reg and now my focus is on the register
window so if i

1472
00:28:31,510 --> 00:28:31,520
window so if i
 

1473
00:28:31,520 --> 00:28:33,590
window so if i
move the arrow keys or scroll it'll

1474
00:28:33,590 --> 00:28:33,600
move the arrow keys or scroll it'll
 

1475
00:28:33,600 --> 00:28:35,350
move the arrow keys or scroll it'll
start scrolling that window

1476
00:28:35,350 --> 00:28:35,360
start scrolling that window
 

1477
00:28:35,360 --> 00:28:38,070
start scrolling that window
so for now we can focus on the assembly

1478
00:28:38,070 --> 00:28:38,080
so for now we can focus on the assembly
 

1479
00:28:38,080 --> 00:28:39,510
so for now we can focus on the assembly
window

1480
00:28:39,510 --> 00:28:39,520
window
 

1481
00:28:39,520 --> 00:28:41,029
window
and once we're here we can see all of

1482
00:28:41,029 --> 00:28:41,039
and once we're here we can see all of
 

1483
00:28:41,039 --> 00:28:42,549
and once we're here we can see all of
the things uh

1484
00:28:42,549 --> 00:28:42,559
the things uh
 

1485
00:28:42,559 --> 00:28:44,950
the things uh
so let's see we can see in the registry

1486
00:28:44,950 --> 00:28:44,960
so let's see we can see in the registry
 

1487
00:28:44,960 --> 00:28:46,630
so let's see we can see in the registry
register window we can see that t

1488
00:28:46,630 --> 00:28:46,640
register window we can see that t
 

1489
00:28:46,640 --> 00:28:49,750
register window we can see that t
0 contains this value we can see that a0

1490
00:28:49,750 --> 00:28:49,760
0 contains this value we can see that a0
 

1491
00:28:49,760 --> 00:28:51,830
0 contains this value we can see that a0
contains this value

1492
00:28:51,830 --> 00:28:51,840
contains this value
 

1493
00:28:51,840 --> 00:28:54,149
contains this value
and as we step through the assembly we

1494
00:28:54,149 --> 00:28:54,159
and as we step through the assembly we
 

1495
00:28:54,159 --> 00:28:55,190
and as we step through the assembly we
can watch

1496
00:28:55,190 --> 00:28:55,200
can watch
 

1497
00:28:55,200 --> 00:28:59,269
can watch
see okay t 0 just got the value of a0

1498
00:28:59,269 --> 00:28:59,279
see okay t 0 just got the value of a0
 

1499
00:28:59,279 --> 00:28:59,750
see okay t 0 just got the value of a0
which was

1500
00:28:59,750 --> 00:28:59,760
which was
 

1501
00:28:59,760 --> 00:29:01,590
which was
5 and it's nicely highlighted the

1502
00:29:01,590 --> 00:29:01,600
5 and it's nicely highlighted the
 

1503
00:29:01,600 --> 00:29:03,269
5 and it's nicely highlighted the
register that's changed

1504
00:29:03,269 --> 00:29:03,279
register that's changed
 

1505
00:29:03,279 --> 00:29:05,669
register that's changed
here and we can just keep remember if we

1506
00:29:05,669 --> 00:29:05,679
here and we can just keep remember if we
 

1507
00:29:05,679 --> 00:29:07,669
here and we can just keep remember if we
if we push enter we get the

1508
00:29:07,669 --> 00:29:07,679
if we push enter we get the
 

1509
00:29:07,679 --> 00:29:09,669
if we push enter we get the
most recently executed instructions so

1510
00:29:09,669 --> 00:29:09,679
most recently executed instructions so
 

1511
00:29:09,679 --> 00:29:10,950
most recently executed instructions so
we can go through

1512
00:29:10,950 --> 00:29:10,960
we can go through
 

1513
00:29:10,960 --> 00:29:13,430
we can go through
all right we set a0 to 0 and now we can

1514
00:29:13,430 --> 00:29:13,440
all right we set a0 to 0 and now we can
 

1515
00:29:13,440 --> 00:29:15,110
all right we set a0 to 0 and now we can
just kind of watch ourselves go through

1516
00:29:15,110 --> 00:29:15,120
just kind of watch ourselves go through
 

1517
00:29:15,120 --> 00:29:16,389
just kind of watch ourselves go through
this loop

1518
00:29:16,389 --> 00:29:16,399
this loop
 

1519
00:29:16,399 --> 00:29:19,909
this loop
and sum up the values

1520
00:29:19,909 --> 00:29:19,919
and sum up the values
 

1521
00:29:19,919 --> 00:29:21,750
and sum up the values
and again this is like a complete you

1522
00:29:21,750 --> 00:29:21,760
and again this is like a complete you
 

1523
00:29:21,760 --> 00:29:23,430
and again this is like a complete you
know toy function

1524
00:29:23,430 --> 00:29:23,440
know toy function
 

1525
00:29:23,440 --> 00:29:26,310
know toy function
and then we can continue and you know

1526
00:29:26,310 --> 00:29:26,320
and then we can continue and you know
 

1527
00:29:26,320 --> 00:29:27,590
and then we can continue and you know
live our lives and if you're ever

1528
00:29:27,590 --> 00:29:27,600
live our lives and if you're ever
 

1529
00:29:27,600 --> 00:29:29,750
live our lives and if you're ever
curious about

1530
00:29:29,750 --> 00:29:29,760
curious about
 

1531
00:29:29,760 --> 00:29:31,750
curious about
what kind of breakpoints you've set or

1532
00:29:31,750 --> 00:29:31,760
what kind of breakpoints you've set or
 

1533
00:29:31,760 --> 00:29:33,990
what kind of breakpoints you've set or
you lose track of what you were doing

1534
00:29:33,990 --> 00:29:34,000
you lose track of what you were doing
 

1535
00:29:34,000 --> 00:29:38,070
you lose track of what you were doing
if you type info break or break points

1536
00:29:38,070 --> 00:29:38,080
if you type info break or break points
 

1537
00:29:38,080 --> 00:29:39,909
if you type info break or break points
you can see all of the breakpoints that

1538
00:29:39,909 --> 00:29:39,919
you can see all of the breakpoints that
 

1539
00:29:39,919 --> 00:29:41,350
you can see all of the breakpoints that
you've set in your code

1540
00:29:41,350 --> 00:29:41,360
you've set in your code
 

1541
00:29:41,360 --> 00:29:43,269
you've set in your code
and you can even see okay this

1542
00:29:43,269 --> 00:29:43,279
and you can even see okay this
 

1543
00:29:43,279 --> 00:29:45,510
and you can even see okay this
breakpoint has already been hit one time

1544
00:29:45,510 --> 00:29:45,520
breakpoint has already been hit one time
 

1545
00:29:45,520 --> 00:29:47,830
breakpoint has already been hit one time
and you get lots of useful information

1546
00:29:47,830 --> 00:29:47,840
and you get lots of useful information
 

1547
00:29:47,840 --> 00:29:49,590
and you get lots of useful information
doing that

1548
00:29:49,590 --> 00:29:49,600
doing that
 

1549
00:29:49,600 --> 00:29:51,510
doing that
if you don't want to have the register

1550
00:29:51,510 --> 00:29:51,520
if you don't want to have the register
 

1551
00:29:51,520 --> 00:29:53,350
if you don't want to have the register
window but you do want to look at the

1552
00:29:53,350 --> 00:29:53,360
window but you do want to look at the
 

1553
00:29:53,360 --> 00:29:54,789
window but you do want to look at the
registers

1554
00:29:54,789 --> 00:29:54,799
registers
 

1555
00:29:54,799 --> 00:29:58,230
registers
info reg or info registers or ireg or

1556
00:29:58,230 --> 00:29:58,240
info reg or info registers or ireg or
 

1557
00:29:58,240 --> 00:29:59,269
info reg or info registers or ireg or
any of the

1558
00:29:59,269 --> 00:29:59,279
any of the
 

1559
00:29:59,279 --> 00:30:02,310
any of the
numerous gdb shortenings

1560
00:30:02,310 --> 00:30:02,320
numerous gdb shortenings
 

1561
00:30:02,320 --> 00:30:03,830
numerous gdb shortenings
will bring up the register window as

1562
00:30:03,830 --> 00:30:03,840
will bring up the register window as
 

1563
00:30:03,840 --> 00:30:05,909
will bring up the register window as
well

1564
00:30:05,909 --> 00:30:05,919
well
 

1565
00:30:05,919 --> 00:30:08,310
well
um so with that is there any are there

1566
00:30:08,310 --> 00:30:08,320
um so with that is there any are there
 

1567
00:30:08,320 --> 00:30:09,350
um so with that is there any are there
any questions about

1568
00:30:09,350 --> 00:30:09,360
any questions about
 

1569
00:30:09,360 --> 00:30:12,470
any questions about
gdd um simple ones i know it's been

1570
00:30:12,470 --> 00:30:12,480
gdd um simple ones i know it's been
 

1571
00:30:12,480 --> 00:30:14,870
gdd um simple ones i know it's been
um there's been lots of post sump shots

1572
00:30:14,870 --> 00:30:14,880
um there's been lots of post sump shots
 

1573
00:30:14,880 --> 00:30:15,909
um there's been lots of post sump shots
about it so

1574
00:30:15,909 --> 00:30:15,919
about it so
 

1575
00:30:15,919 --> 00:30:17,830
about it so
now is a good time to just ask uh some

1576
00:30:17,830 --> 00:30:17,840
now is a good time to just ask uh some
 

1577
00:30:17,840 --> 00:30:19,669
now is a good time to just ask uh some
straightforward we'll i'll be showing

1578
00:30:19,669 --> 00:30:19,679
straightforward we'll i'll be showing
 

1579
00:30:19,679 --> 00:30:20,630
straightforward we'll i'll be showing
more

1580
00:30:20,630 --> 00:30:20,640
more
 

1581
00:30:20,640 --> 00:30:23,190
more
usage of ddb what command did you use to

1582
00:30:23,190 --> 00:30:23,200
usage of ddb what command did you use to
 

1583
00:30:23,200 --> 00:30:25,750
usage of ddb what command did you use to
open the multiple windows so i use tmux

1584
00:30:25,750 --> 00:30:25,760
open the multiple windows so i use tmux
 

1585
00:30:25,760 --> 00:30:28,870
open the multiple windows so i use tmux
so i can show just from scratch uh if we

1586
00:30:28,870 --> 00:30:28,880
so i can show just from scratch uh if we
 

1587
00:30:28,880 --> 00:30:29,190
so i can show just from scratch uh if we
go

1588
00:30:29,190 --> 00:30:29,200
go
 

1589
00:30:29,200 --> 00:30:31,669
go
here and i open a new terminal so here's

1590
00:30:31,669 --> 00:30:31,679
here and i open a new terminal so here's
 

1591
00:30:31,679 --> 00:30:33,750
here and i open a new terminal so here's
just a blank terminal

1592
00:30:33,750 --> 00:30:33,760
just a blank terminal
 

1593
00:30:33,760 --> 00:30:35,830
just a blank terminal
if you type tmux and this is available

1594
00:30:35,830 --> 00:30:35,840
if you type tmux and this is available
 

1595
00:30:35,840 --> 00:30:40,070
if you type tmux and this is available
on athena

1596
00:30:40,070 --> 00:30:40,080

 

1597
00:30:40,080 --> 00:30:41,590

i'll address the next question in a

1598
00:30:41,590 --> 00:30:41,600
i'll address the next question in a
 

1599
00:30:41,600 --> 00:30:43,590
i'll address the next question in a
second so now i'm in tmux which you can

1600
00:30:43,590 --> 00:30:43,600
second so now i'm in tmux which you can
 

1601
00:30:43,600 --> 00:30:44,710
second so now i'm in tmux which you can
tell by this

1602
00:30:44,710 --> 00:30:44,720
tell by this
 

1603
00:30:44,720 --> 00:30:47,909
tell by this
green bar at the bottom and if you want

1604
00:30:47,909 --> 00:30:47,919
green bar at the bottom and if you want
 

1605
00:30:47,919 --> 00:30:48,389
green bar at the bottom and if you want
to

1606
00:30:48,389 --> 00:30:48,399
to
 

1607
00:30:48,399 --> 00:30:49,909
to
get so there's a couple ways you can do

1608
00:30:49,909 --> 00:30:49,919
get so there's a couple ways you can do
 

1609
00:30:49,919 --> 00:30:51,909
get so there's a couple ways you can do
multiple windows in tebow tmux

1610
00:30:51,909 --> 00:30:51,919
multiple windows in tebow tmux
 

1611
00:30:51,919 --> 00:30:55,669
multiple windows in tebow tmux
uh if you're so you can type control bc

1612
00:30:55,669 --> 00:30:55,679
uh if you're so you can type control bc
 

1613
00:30:55,679 --> 00:30:58,310
uh if you're so you can type control bc
and uh i know that's sometimes if you're

1614
00:30:58,310 --> 00:30:58,320
and uh i know that's sometimes if you're
 

1615
00:30:58,320 --> 00:30:59,909
and uh i know that's sometimes if you're
used to using emacs that will make a lot

1616
00:30:59,909 --> 00:30:59,919
used to using emacs that will make a lot
 

1617
00:30:59,919 --> 00:31:00,950
used to using emacs that will make a lot
of sense but

1618
00:31:00,950 --> 00:31:00,960
of sense but
 

1619
00:31:00,960 --> 00:31:04,149
of sense but
um normal people who don't use emacs

1620
00:31:04,149 --> 00:31:04,159
um normal people who don't use emacs
 

1621
00:31:04,159 --> 00:31:06,789
um normal people who don't use emacs
that's hitting control and then d and

1622
00:31:06,789 --> 00:31:06,799
that's hitting control and then d and
 

1623
00:31:06,799 --> 00:31:07,590
that's hitting control and then d and
then hitting

1624
00:31:07,590 --> 00:31:07,600
then hitting
 

1625
00:31:07,600 --> 00:31:09,830
then hitting
c on its own afterwards that will get

1626
00:31:09,830 --> 00:31:09,840
c on its own afterwards that will get
 

1627
00:31:09,840 --> 00:31:11,509
c on its own afterwards that will get
you a second window which you can then

1628
00:31:11,509 --> 00:31:11,519
you a second window which you can then
 

1629
00:31:11,519 --> 00:31:13,509
you a second window which you can then
navigate between with control b

1630
00:31:13,509 --> 00:31:13,519
navigate between with control b
 

1631
00:31:13,519 --> 00:31:16,630
navigate between with control b
and then p control b and then n to go

1632
00:31:16,630 --> 00:31:16,640
and then p control b and then n to go
 

1633
00:31:16,640 --> 00:31:17,750
and then p control b and then n to go
previous and next

1634
00:31:17,750 --> 00:31:17,760
previous and next
 

1635
00:31:17,760 --> 00:31:19,350
previous and next
yeah and david just posted a t-much

1636
00:31:19,350 --> 00:31:19,360
yeah and david just posted a t-much
 

1637
00:31:19,360 --> 00:31:21,269
yeah and david just posted a t-much
cheat sheet which is useful

1638
00:31:21,269 --> 00:31:21,279
cheat sheet which is useful
 

1639
00:31:21,279 --> 00:31:22,870
cheat sheet which is useful
and if you want to split the windows i

1640
00:31:22,870 --> 00:31:22,880
and if you want to split the windows i
 

1641
00:31:22,880 --> 00:31:24,310
and if you want to split the windows i
think it's ctrl b and then

1642
00:31:24,310 --> 00:31:24,320
think it's ctrl b and then
 

1643
00:31:24,320 --> 00:31:27,990
think it's ctrl b and then
the percent sign will split them um

1644
00:31:27,990 --> 00:31:28,000
the percent sign will split them um
 

1645
00:31:28,000 --> 00:31:30,549
the percent sign will split them um
vertically and then sing a double

1646
00:31:30,549 --> 00:31:30,559
vertically and then sing a double
 

1647
00:31:30,559 --> 00:31:31,269
vertically and then sing a double
control b

1648
00:31:31,269 --> 00:31:31,279
control b
 

1649
00:31:31,279 --> 00:31:33,990
control b
and then double quote we'll split them

1650
00:31:33,990 --> 00:31:34,000
and then double quote we'll split them
 

1651
00:31:34,000 --> 00:31:35,830
and then double quote we'll split them
uh horizontally

1652
00:31:35,830 --> 00:31:35,840
uh horizontally
 

1653
00:31:35,840 --> 00:31:37,110
uh horizontally
and so that's how we get them and if

1654
00:31:37,110 --> 00:31:37,120
and so that's how we get them and if
 

1655
00:31:37,120 --> 00:31:39,110
and so that's how we get them and if
we're in this state we can use control b

1656
00:31:39,110 --> 00:31:39,120
we're in this state we can use control b
 

1657
00:31:39,120 --> 00:31:42,870
we're in this state we can use control b
and o to jump between our windows

1658
00:31:42,870 --> 00:31:42,880
and o to jump between our windows
 

1659
00:31:42,880 --> 00:31:44,710
and o to jump between our windows
so that's what's that's how i got the

1660
00:31:44,710 --> 00:31:44,720
so that's what's that's how i got the
 

1661
00:31:44,720 --> 00:31:46,630
so that's what's that's how i got the
multiple windows yeah i don't care

1662
00:31:46,630 --> 00:31:46,640
multiple windows yeah i don't care
 

1663
00:31:46,640 --> 00:31:49,830
multiple windows yeah i don't care
um and then ahmed asked

1664
00:31:49,830 --> 00:31:49,840
um and then ahmed asked
 

1665
00:31:49,840 --> 00:31:51,190
um and then ahmed asked
why is this displaying assembly

1666
00:31:51,190 --> 00:31:51,200
why is this displaying assembly
 

1667
00:31:51,200 --> 00:31:52,950
why is this displaying assembly
addresses again instead of c line

1668
00:31:52,950 --> 00:31:52,960
addresses again instead of c line
 

1669
00:31:52,960 --> 00:31:53,750
addresses again instead of c line
numbers

1670
00:31:53,750 --> 00:31:53,760
numbers
 

1671
00:31:53,760 --> 00:31:57,909
numbers
ah so because the the function

1672
00:31:57,909 --> 00:31:57,919
ah so because the the function
 

1673
00:31:57,919 --> 00:32:00,230
ah so because the the function
so if we go back to the assembly

1674
00:32:00,230 --> 00:32:00,240
so if we go back to the assembly
 

1675
00:32:00,240 --> 00:32:00,950
so if we go back to the assembly
function

1676
00:32:00,950 --> 00:32:00,960
function
 

1677
00:32:00,960 --> 00:32:02,870
function
this is implemented entirely in assembly

1678
00:32:02,870 --> 00:32:02,880
this is implemented entirely in assembly
 

1679
00:32:02,880 --> 00:32:04,310
this is implemented entirely in assembly
and not at all in c

1680
00:32:04,310 --> 00:32:04,320
and not at all in c
 

1681
00:32:04,320 --> 00:32:05,990
and not at all in c
and so there just aren't any associated

1682
00:32:05,990 --> 00:32:06,000
and so there just aren't any associated
 

1683
00:32:06,000 --> 00:32:07,830
and so there just aren't any associated
c line numbers for this

1684
00:32:07,830 --> 00:32:07,840
c line numbers for this
 

1685
00:32:07,840 --> 00:32:10,950
c line numbers for this
um if we were to

1686
00:32:10,950 --> 00:32:10,960
um if we were to
 

1687
00:32:10,960 --> 00:32:13,990
um if we were to
set a breakpoint so if you type delete

1688
00:32:13,990 --> 00:32:14,000
set a breakpoint so if you type delete
 

1689
00:32:14,000 --> 00:32:16,389
set a breakpoint so if you type delete
you'll delete all your breakpoints uh so

1690
00:32:16,389 --> 00:32:16,399
you'll delete all your breakpoints uh so
 

1691
00:32:16,399 --> 00:32:18,630
you'll delete all your breakpoints uh so
i cleared the old one if i now set a

1692
00:32:18,630 --> 00:32:18,640
i cleared the old one if i now set a
 

1693
00:32:18,640 --> 00:32:19,669
i cleared the old one if i now set a
breakpoint in

1694
00:32:19,669 --> 00:32:19,679
breakpoint in
 

1695
00:32:19,679 --> 00:32:22,230
breakpoint in
demo one so that's a c breakpoint and

1696
00:32:22,230 --> 00:32:22,240
demo one so that's a c breakpoint and
 

1697
00:32:22,240 --> 00:32:23,590
demo one so that's a c breakpoint and
continue

1698
00:32:23,590 --> 00:32:23,600
continue
 

1699
00:32:23,600 --> 00:32:26,230
continue
and run this now if i go here and type

1700
00:32:26,230 --> 00:32:26,240
and run this now if i go here and type
 

1701
00:32:26,240 --> 00:32:27,350
and run this now if i go here and type
layout split

1702
00:32:27,350 --> 00:32:27,360
layout split
 

1703
00:32:27,360 --> 00:32:30,549
layout split
i'll get the c and the assembly um or if

1704
00:32:30,549 --> 00:32:30,559
i'll get the c and the assembly um or if
 

1705
00:32:30,559 --> 00:32:31,509
i'll get the c and the assembly um or if
i just want the c

1706
00:32:31,509 --> 00:32:31,519
i just want the c
 

1707
00:32:31,519 --> 00:32:33,110
i just want the c
source i can do layout source and i'll

1708
00:32:33,110 --> 00:32:33,120
source i can do layout source and i'll
 

1709
00:32:33,120 --> 00:32:35,430
source i can do layout source and i'll
just get the c

1710
00:32:35,430 --> 00:32:35,440
just get the c
 

1711
00:32:35,440 --> 00:32:37,110
just get the c
so that's uh that's what's going on it's

1712
00:32:37,110 --> 00:32:37,120
so that's uh that's what's going on it's
 

1713
00:32:37,120 --> 00:32:39,269
so that's uh that's what's going on it's
just a quirk of the fact that this

1714
00:32:39,269 --> 00:32:39,279
just a quirk of the fact that this
 

1715
00:32:39,279 --> 00:32:41,110
just a quirk of the fact that this
doesn't have associated c code and so we

1716
00:32:41,110 --> 00:32:41,120
doesn't have associated c code and so we
 

1717
00:32:41,120 --> 00:32:46,230
doesn't have associated c code and so we
don't see seedline numbers

1718
00:32:46,230 --> 00:32:46,240

 

1719
00:32:46,240 --> 00:32:49,590

any other any other questions about gdb

1720
00:32:49,590 --> 00:32:49,600
any other any other questions about gdb
 

1721
00:32:49,600 --> 00:32:53,110
any other any other questions about gdb
tmox and that that sort of thing

1722
00:32:53,110 --> 00:32:53,120
tmox and that that sort of thing
 

1723
00:32:53,120 --> 00:32:55,110
tmox and that that sort of thing
so layout split is the one that you use

1724
00:32:55,110 --> 00:32:55,120
so layout split is the one that you use
 

1725
00:32:55,120 --> 00:32:57,269
so layout split is the one that you use
to bring up this extra window of the

1726
00:32:57,269 --> 00:32:57,279
to bring up this extra window of the
 

1727
00:32:57,279 --> 00:32:59,190
to bring up this extra window of the
source and assembly and so on right

1728
00:32:59,190 --> 00:32:59,200
source and assembly and so on right
 

1729
00:32:59,200 --> 00:33:02,230
source and assembly and so on right
yes yes so layout uh if you do layout

1730
00:33:02,230 --> 00:33:02,240
yes yes so layout uh if you do layout
 

1731
00:33:02,240 --> 00:33:03,590
yes yes so layout uh if you do layout
split that'll get you

1732
00:33:03,590 --> 00:33:03,600
split that'll get you
 

1733
00:33:03,600 --> 00:33:05,590
split that'll get you
source and assembly layout source will

1734
00:33:05,590 --> 00:33:05,600
source and assembly layout source will
 

1735
00:33:05,600 --> 00:33:06,630
source and assembly layout source will
get you just source

1736
00:33:06,630 --> 00:33:06,640
get you just source
 

1737
00:33:06,640 --> 00:33:08,950
get you just source
asm we'll get you just assembly and the

1738
00:33:08,950 --> 00:33:08,960
asm we'll get you just assembly and the
 

1739
00:33:08,960 --> 00:33:10,470
asm we'll get you just assembly and the
registers are their own thing where if

1740
00:33:10,470 --> 00:33:10,480
registers are their own thing where if
 

1741
00:33:10,480 --> 00:33:11,669
registers are their own thing where if
you type layout reg

1742
00:33:11,669 --> 00:33:11,679
you type layout reg
 

1743
00:33:11,679 --> 00:33:13,830
you type layout reg
i think yeah that'll bring up the

1744
00:33:13,830 --> 00:33:13,840
i think yeah that'll bring up the
 

1745
00:33:13,840 --> 00:33:15,269
i think yeah that'll bring up the
registers but

1746
00:33:15,269 --> 00:33:15,279
registers but
 

1747
00:33:15,279 --> 00:33:17,669
registers but
unfortunately i don't know of a way to

1748
00:33:17,669 --> 00:33:17,679
unfortunately i don't know of a way to
 

1749
00:33:17,679 --> 00:33:18,630
unfortunately i don't know of a way to
get

1750
00:33:18,630 --> 00:33:18,640
get
 

1751
00:33:18,640 --> 00:33:20,389
get
the register of the assembly and the c

1752
00:33:20,389 --> 00:33:20,399
the register of the assembly and the c
 

1753
00:33:20,399 --> 00:33:22,149
the register of the assembly and the c
code all at the same time outside of

1754
00:33:22,149 --> 00:33:22,159
code all at the same time outside of
 

1755
00:33:22,159 --> 00:33:24,950
code all at the same time outside of
using inforeg with layout split

1756
00:33:24,950 --> 00:33:24,960
using inforeg with layout split
 

1757
00:33:24,960 --> 00:33:28,149
using inforeg with layout split
i have a question um so when we set the

1758
00:33:28,149 --> 00:33:28,159
i have a question um so when we set the
 

1759
00:33:28,159 --> 00:33:31,430
i have a question um so when we set the
break point uh add a line right it

1760
00:33:31,430 --> 00:33:31,440
break point uh add a line right it
 

1761
00:33:31,440 --> 00:33:34,549
break point uh add a line right it
displays the address of the like in this

1762
00:33:34,549 --> 00:33:34,559
displays the address of the like in this
 

1763
00:33:34,559 --> 00:33:35,990
displays the address of the like in this
case break point to add

1764
00:33:35,990 --> 00:33:36,000
case break point to add
 

1765
00:33:36,000 --> 00:33:39,269
case break point to add
0x 354. um

1766
00:33:39,269 --> 00:33:39,279
0x 354. um
 

1767
00:33:39,279 --> 00:33:42,070
0x 354. um
what any instruction might have multiple

1768
00:33:42,070 --> 00:33:42,080
what any instruction might have multiple
 

1769
00:33:42,080 --> 00:33:42,549
what any instruction might have multiple
uh

1770
00:33:42,549 --> 00:33:42,559
uh
 

1771
00:33:42,559 --> 00:33:45,509
uh
any like line of code in c might have

1772
00:33:45,509 --> 00:33:45,519
any like line of code in c might have
 

1773
00:33:45,519 --> 00:33:46,950
any like line of code in c might have
multiple instructions

1774
00:33:46,950 --> 00:33:46,960
multiple instructions
 

1775
00:33:46,960 --> 00:33:49,430
multiple instructions
so which one does its uh show i believe

1776
00:33:49,430 --> 00:33:49,440
so which one does its uh show i believe
 

1777
00:33:49,440 --> 00:33:51,509
so which one does its uh show i believe
it shows the first one

1778
00:33:51,509 --> 00:33:51,519
it shows the first one
 

1779
00:33:51,519 --> 00:33:54,230
it shows the first one
and uh it's to you for the person who

1780
00:33:54,230 --> 00:33:54,240
and uh it's to you for the person who
 

1781
00:33:54,240 --> 00:33:54,789
and uh it's to you for the person who
asked to

1782
00:33:54,789 --> 00:33:54,799
asked to
 

1783
00:33:54,799 --> 00:33:57,990
asked to
start the tui it's i think it's tui

1784
00:33:57,990 --> 00:33:58,000
start the tui it's i think it's tui
 

1785
00:33:58,000 --> 00:34:08,389
start the tui it's i think it's tui
enable not enable to ui sorry i think

1786
00:34:08,389 --> 00:34:08,399

 

1787
00:34:08,399 --> 00:34:10,869

um yeah again there's like a hundred

1788
00:34:10,869 --> 00:34:10,879
um yeah again there's like a hundred
 

1789
00:34:10,879 --> 00:34:13,270
um yeah again there's like a hundred
cheat sheets out here for gdb

1790
00:34:13,270 --> 00:34:13,280
cheat sheets out here for gdb
 

1791
00:34:13,280 --> 00:34:15,510
cheat sheets out here for gdb
and for tmux as well so if you ever find

1792
00:34:15,510 --> 00:34:15,520
and for tmux as well so if you ever find
 

1793
00:34:15,520 --> 00:34:16,470
and for tmux as well so if you ever find
yourself lost

1794
00:34:16,470 --> 00:34:16,480
yourself lost
 

1795
00:34:16,480 --> 00:34:21,430
yourself lost
i t gdp even has its own inbuilt um

1796
00:34:21,430 --> 00:34:21,440
i t gdp even has its own inbuilt um
 

1797
00:34:21,440 --> 00:34:23,990
i t gdp even has its own inbuilt um
its own thing called apropos so if you

1798
00:34:23,990 --> 00:34:24,000
its own thing called apropos so if you
 

1799
00:34:24,000 --> 00:34:25,510
its own thing called apropos so if you
look for apropos

1800
00:34:25,510 --> 00:34:25,520
look for apropos
 

1801
00:34:25,520 --> 00:34:28,550
look for apropos
tui it will actually show you all of the

1802
00:34:28,550 --> 00:34:28,560
tui it will actually show you all of the
 

1803
00:34:28,560 --> 00:34:33,430
tui it will actually show you all of the
commands that involve tui

1804
00:34:33,430 --> 00:34:33,440
commands that involve tui
 

1805
00:34:33,440 --> 00:34:36,310
commands that involve tui
so yeah uh this can be quite useful but

1806
00:34:36,310 --> 00:34:36,320
so yeah uh this can be quite useful but
 

1807
00:34:36,320 --> 00:34:38,710
so yeah uh this can be quite useful but
it can also be a little bit overwhelming

1808
00:34:38,710 --> 00:34:38,720
it can also be a little bit overwhelming
 

1809
00:34:38,720 --> 00:34:41,829
it can also be a little bit overwhelming
um if you do apropos dash b it'll give

1810
00:34:41,829 --> 00:34:41,839
um if you do apropos dash b it'll give
 

1811
00:34:41,839 --> 00:34:44,550
um if you do apropos dash b it'll give
you even more information i think

1812
00:34:44,550 --> 00:34:44,560
you even more information i think
 

1813
00:34:44,560 --> 00:34:48,389
you even more information i think
um i don't remember i i don't use it

1814
00:34:48,389 --> 00:34:48,399
um i don't remember i i don't use it
 

1815
00:34:48,399 --> 00:34:50,069
um i don't remember i i don't use it
often myself but if you if you do

1816
00:34:50,069 --> 00:34:50,079
often myself but if you if you do
 

1817
00:34:50,079 --> 00:34:52,230
often myself but if you if you do
find or if you forget the exact way to

1818
00:34:52,230 --> 00:34:52,240
find or if you forget the exact way to
 

1819
00:34:52,240 --> 00:34:54,069
find or if you forget the exact way to
type the command in in gdb and you don't

1820
00:34:54,069 --> 00:34:54,079
type the command in in gdb and you don't
 

1821
00:34:54,079 --> 00:34:55,990
type the command in in gdb and you don't
feel like googling it apropos

1822
00:34:55,990 --> 00:34:56,000
feel like googling it apropos
 

1823
00:34:56,000 --> 00:34:57,990
feel like googling it apropos
will will uh often be able to find

1824
00:34:57,990 --> 00:34:58,000
will will uh often be able to find
 

1825
00:34:58,000 --> 00:34:59,349
will will uh often be able to find
exactly what you're looking for in

1826
00:34:59,349 --> 00:34:59,359
exactly what you're looking for in
 

1827
00:34:59,359 --> 00:35:00,710
exactly what you're looking for in
addition to a whole bunch of stuff you

1828
00:35:00,710 --> 00:35:00,720
addition to a whole bunch of stuff you
 

1829
00:35:00,720 --> 00:35:02,230
addition to a whole bunch of stuff you
weren't looking for

1830
00:35:02,230 --> 00:35:02,240
weren't looking for
 

1831
00:35:02,240 --> 00:35:05,270
weren't looking for
um yeah so

1832
00:35:05,270 --> 00:35:05,280
um yeah so
 

1833
00:35:05,280 --> 00:35:06,790
um yeah so
that can be quite useful gdp is

1834
00:35:06,790 --> 00:35:06,800
that can be quite useful gdp is
 

1835
00:35:06,800 --> 00:35:08,470
that can be quite useful gdp is
extremely well documented as well

1836
00:35:08,470 --> 00:35:08,480
extremely well documented as well
 

1837
00:35:08,480 --> 00:35:11,030
extremely well documented as well
so um yeah if you ever find yourself

1838
00:35:11,030 --> 00:35:11,040
so um yeah if you ever find yourself
 

1839
00:35:11,040 --> 00:35:12,069
so um yeah if you ever find yourself
lost

1840
00:35:12,069 --> 00:35:12,079
lost
 

1841
00:35:12,079 --> 00:35:16,710
lost
you know google is your friend um

1842
00:35:16,710 --> 00:35:16,720
you know google is your friend um
 

1843
00:35:16,720 --> 00:35:18,710
you know google is your friend um
so now that we we've kind of been over

1844
00:35:18,710 --> 00:35:18,720
so now that we we've kind of been over
 

1845
00:35:18,720 --> 00:35:20,150
so now that we we've kind of been over
assembly and

1846
00:35:20,150 --> 00:35:20,160
assembly and
 

1847
00:35:20,160 --> 00:35:22,950
assembly and
and risk five and these sort of things i

1848
00:35:22,950 --> 00:35:22,960
and risk five and these sort of things i
 

1849
00:35:22,960 --> 00:35:24,470
and risk five and these sort of things i
want to dive a little bit more into the

1850
00:35:24,470 --> 00:35:24,480
want to dive a little bit more into the
 

1851
00:35:24,480 --> 00:35:25,750
want to dive a little bit more into the
specifics

1852
00:35:25,750 --> 00:35:25,760
specifics
 

1853
00:35:25,760 --> 00:35:28,470
specifics
um of what you you really need to know

1854
00:35:28,470 --> 00:35:28,480
um of what you you really need to know
 

1855
00:35:28,480 --> 00:35:29,589
um of what you you really need to know
for the

1856
00:35:29,589 --> 00:35:29,599
for the
 

1857
00:35:29,599 --> 00:35:32,310
for the
lab coming up and also is this will be a

1858
00:35:32,310 --> 00:35:32,320
lab coming up and also is this will be a
 

1859
00:35:32,320 --> 00:35:33,829
lab coming up and also is this will be a
little bit of review from the document

1860
00:35:33,829 --> 00:35:33,839
little bit of review from the document
 

1861
00:35:33,839 --> 00:35:34,630
little bit of review from the document
that you've all

1862
00:35:34,630 --> 00:35:34,640
that you've all
 

1863
00:35:34,640 --> 00:35:37,030
that you've all
of course as diligent students read

1864
00:35:37,030 --> 00:35:37,040
of course as diligent students read
 

1865
00:35:37,040 --> 00:35:38,870
of course as diligent students read
through thoroughly

1866
00:35:38,870 --> 00:35:38,880
through thoroughly
 

1867
00:35:38,880 --> 00:35:42,829
through thoroughly
uh in preparation for this lecture

1868
00:35:42,829 --> 00:35:42,839
uh in preparation for this lecture
 

1869
00:35:42,839 --> 00:35:45,670
uh in preparation for this lecture
um so you know this table will of course

1870
00:35:45,670 --> 00:35:45,680
um so you know this table will of course
 

1871
00:35:45,680 --> 00:35:47,829
um so you know this table will of course
be uh wildly familiar to you all

1872
00:35:47,829 --> 00:35:47,839
be uh wildly familiar to you all
 

1873
00:35:47,839 --> 00:35:51,109
be uh wildly familiar to you all
and uh from from both double o4

1874
00:35:51,109 --> 00:35:51,119
and uh from from both double o4
 

1875
00:35:51,119 --> 00:35:53,109
and uh from from both double o4
and from what you've read and this is

1876
00:35:53,109 --> 00:35:53,119
and from what you've read and this is
 

1877
00:35:53,119 --> 00:35:55,270
and from what you've read and this is
the table of registers and

1878
00:35:55,270 --> 00:35:55,280
the table of registers and
 

1879
00:35:55,280 --> 00:35:58,710
the table of registers and
registers are little you know locations

1880
00:35:58,710 --> 00:35:58,720
registers are little you know locations
 

1881
00:35:58,720 --> 00:36:02,790
registers are little you know locations
on the cpu or on the processor

1882
00:36:02,790 --> 00:36:02,800
on the cpu or on the processor
 

1883
00:36:02,800 --> 00:36:05,430
on the cpu or on the processor
pre-defined that it can use to store

1884
00:36:05,430 --> 00:36:05,440
pre-defined that it can use to store
 

1885
00:36:05,440 --> 00:36:06,390
pre-defined that it can use to store
values

1886
00:36:06,390 --> 00:36:06,400
values
 

1887
00:36:06,400 --> 00:36:08,630
values
and this is important because assembly

1888
00:36:08,630 --> 00:36:08,640
and this is important because assembly
 

1889
00:36:08,640 --> 00:36:09,510
and this is important because assembly
operations

1890
00:36:09,510 --> 00:36:09,520
operations
 

1891
00:36:09,520 --> 00:36:11,510
operations
if we remember from the assembly code

1892
00:36:11,510 --> 00:36:11,520
if we remember from the assembly code
 

1893
00:36:11,520 --> 00:36:14,069
if we remember from the assembly code
the assembly doesn't operate on memory

1894
00:36:14,069 --> 00:36:14,079
the assembly doesn't operate on memory
 

1895
00:36:14,079 --> 00:36:16,069
the assembly doesn't operate on memory
it operates on registers so when we do

1896
00:36:16,069 --> 00:36:16,079
it operates on registers so when we do
 

1897
00:36:16,079 --> 00:36:17,510
it operates on registers so when we do
add when we do subtract

1898
00:36:17,510 --> 00:36:17,520
add when we do subtract
 

1899
00:36:17,520 --> 00:36:20,950
add when we do subtract
we're operating on registers um

1900
00:36:20,950 --> 00:36:20,960
we're operating on registers um
 

1901
00:36:20,960 --> 00:36:22,790
we're operating on registers um
and so what you'll often see as the

1902
00:36:22,790 --> 00:36:22,800
and so what you'll often see as the
 

1903
00:36:22,800 --> 00:36:24,150
and so what you'll often see as the
pattern for

1904
00:36:24,150 --> 00:36:24,160
pattern for
 

1905
00:36:24,160 --> 00:36:26,069
pattern for
for writing assembly is we'll have some

1906
00:36:26,069 --> 00:36:26,079
for writing assembly is we'll have some
 

1907
00:36:26,079 --> 00:36:27,510
for writing assembly is we'll have some
kind of a load

1908
00:36:27,510 --> 00:36:27,520
kind of a load
 

1909
00:36:27,520 --> 00:36:30,950
kind of a load
so we'll load some value

1910
00:36:30,950 --> 00:36:30,960
so we'll load some value
 

1911
00:36:30,960 --> 00:36:34,630
so we'll load some value
to a register and that value can be from

1912
00:36:34,630 --> 00:36:34,640
to a register and that value can be from
 

1913
00:36:34,640 --> 00:36:35,109
to a register and that value can be from
memory

1914
00:36:35,109 --> 00:36:35,119
memory
 

1915
00:36:35,119 --> 00:36:38,310
memory
or it can be from another uh register

1916
00:36:38,310 --> 00:36:38,320
or it can be from another uh register
 

1917
00:36:38,320 --> 00:36:40,550
or it can be from another uh register
and and here i'm referring to load in

1918
00:36:40,550 --> 00:36:40,560
and and here i'm referring to load in
 

1919
00:36:40,560 --> 00:36:42,310
and and here i'm referring to load in
general not the load instruction

1920
00:36:42,310 --> 00:36:42,320
general not the load instruction
 

1921
00:36:42,320 --> 00:36:45,750
general not the load instruction
um and then we'll operate

1922
00:36:45,750 --> 00:36:45,760
um and then we'll operate
 

1923
00:36:45,760 --> 00:36:48,630
um and then we'll operate
so we'll perform some operation on the

1924
00:36:48,630 --> 00:36:48,640
so we'll perform some operation on the
 

1925
00:36:48,640 --> 00:36:49,349
so we'll perform some operation on the
register

1926
00:36:49,349 --> 00:36:49,359
register
 

1927
00:36:49,359 --> 00:36:50,870
register
and then if we care about the result of

1928
00:36:50,870 --> 00:36:50,880
and then if we care about the result of
 

1929
00:36:50,880 --> 00:36:52,550
and then if we care about the result of
that operation outside of the return

1930
00:36:52,550 --> 00:36:52,560
that operation outside of the return
 

1931
00:36:52,560 --> 00:36:53,349
that operation outside of the return
address

1932
00:36:53,349 --> 00:36:53,359
address
 

1933
00:36:53,359 --> 00:36:56,870
address
we will um will store that

1934
00:36:56,870 --> 00:36:56,880
we will um will store that
 

1935
00:36:56,880 --> 00:37:00,470
we will um will store that
register to somewhere

1936
00:37:00,470 --> 00:37:00,480
register to somewhere
 

1937
00:37:00,480 --> 00:37:01,990
register to somewhere
to some locate that will store that

1938
00:37:01,990 --> 00:37:02,000
to some locate that will store that
 

1939
00:37:02,000 --> 00:37:03,990
to some locate that will store that
register to some location

1940
00:37:03,990 --> 00:37:04,000
register to some location
 

1941
00:37:04,000 --> 00:37:08,150
register to some location
do that in memory or to another register

1942
00:37:08,150 --> 00:37:08,160
do that in memory or to another register
 

1943
00:37:08,160 --> 00:37:09,750
do that in memory or to another register
and so that's that's uh generally the

1944
00:37:09,750 --> 00:37:09,760
and so that's that's uh generally the
 

1945
00:37:09,760 --> 00:37:11,750
and so that's that's uh generally the
way things work and and registers are

1946
00:37:11,750 --> 00:37:11,760
way things work and and registers are
 

1947
00:37:11,760 --> 00:37:13,990
way things work and and registers are
the absolute fastest way to perform

1948
00:37:13,990 --> 00:37:14,000
the absolute fastest way to perform
 

1949
00:37:14,000 --> 00:37:16,550
the absolute fastest way to perform
any sort of calculation uh or to access

1950
00:37:16,550 --> 00:37:16,560
any sort of calculation uh or to access
 

1951
00:37:16,560 --> 00:37:18,310
any sort of calculation uh or to access
any value and that's why

1952
00:37:18,310 --> 00:37:18,320
any value and that's why
 

1953
00:37:18,320 --> 00:37:21,030
any value and that's why
um it's important to use them and also

1954
00:37:21,030 --> 00:37:21,040
um it's important to use them and also
 

1955
00:37:21,040 --> 00:37:21,750
um it's important to use them and also
why

1956
00:37:21,750 --> 00:37:21,760
why
 

1957
00:37:21,760 --> 00:37:24,150
why
we prefer using registers over using

1958
00:37:24,150 --> 00:37:24,160
we prefer using registers over using
 

1959
00:37:24,160 --> 00:37:26,069
we prefer using registers over using
memory so if you remember from

1960
00:37:26,069 --> 00:37:26,079
memory so if you remember from
 

1961
00:37:26,079 --> 00:37:28,390
memory so if you remember from
the reading when we call functions so

1962
00:37:28,390 --> 00:37:28,400
the reading when we call functions so
 

1963
00:37:28,400 --> 00:37:30,150
the reading when we call functions so
you can see here that registers

1964
00:37:30,150 --> 00:37:30,160
you can see here that registers
 

1965
00:37:30,160 --> 00:37:33,829
you can see here that registers
a0 to 7 and

1966
00:37:33,829 --> 00:37:33,839
a0 to 7 and
 

1967
00:37:33,839 --> 00:37:35,829
a0 to 7 and
in general when we speak about registers

1968
00:37:35,829 --> 00:37:35,839
in general when we speak about registers
 

1969
00:37:35,839 --> 00:37:37,030
in general when we speak about registers
we

1970
00:37:37,030 --> 00:37:37,040
we
 

1971
00:37:37,040 --> 00:37:39,030
we
we will be referring to them by their

1972
00:37:39,030 --> 00:37:39,040
we will be referring to them by their
 

1973
00:37:39,040 --> 00:37:41,270
we will be referring to them by their
abi name um

1974
00:37:41,270 --> 00:37:41,280
abi name um
 

1975
00:37:41,280 --> 00:37:43,190
abi name um
not only is it less confusing it's just

1976
00:37:43,190 --> 00:37:43,200
not only is it less confusing it's just
 

1977
00:37:43,200 --> 00:37:44,550
not only is it less confusing it's just
a standard and it's also the way that

1978
00:37:44,550 --> 00:37:44,560
a standard and it's also the way that
 

1979
00:37:44,560 --> 00:37:46,069
a standard and it's also the way that
you'll write assembly code

1980
00:37:46,069 --> 00:37:46,079
you'll write assembly code
 

1981
00:37:46,079 --> 00:37:49,430
you'll write assembly code
um this you know these actual numbers

1982
00:37:49,430 --> 00:37:49,440
um this you know these actual numbers
 

1983
00:37:49,440 --> 00:37:51,109
um this you know these actual numbers
are not super important

1984
00:37:51,109 --> 00:37:51,119
are not super important
 

1985
00:37:51,119 --> 00:37:54,390
are not super important
the only case where it does matter is

1986
00:37:54,390 --> 00:37:54,400
the only case where it does matter is
 

1987
00:37:54,400 --> 00:37:57,270
the only case where it does matter is
for the compressed version of risk 5

1988
00:37:57,270 --> 00:37:57,280
for the compressed version of risk 5
 

1989
00:37:57,280 --> 00:37:58,310
for the compressed version of risk 5
instructions

1990
00:37:58,310 --> 00:37:58,320
instructions
 

1991
00:37:58,320 --> 00:38:01,030
instructions
and if you want to know more about that

1992
00:38:01,030 --> 00:38:01,040
and if you want to know more about that
 

1993
00:38:01,040 --> 00:38:02,710
and if you want to know more about that
feel free to read up about it the basic

1994
00:38:02,710 --> 00:38:02,720
feel free to read up about it the basic
 

1995
00:38:02,720 --> 00:38:03,990
feel free to read up about it the basic
idea is that risk

1996
00:38:03,990 --> 00:38:04,000
idea is that risk
 

1997
00:38:04,000 --> 00:38:07,190
idea is that risk
5 normal instructions are 64 bits

1998
00:38:07,190 --> 00:38:07,200
5 normal instructions are 64 bits
 

1999
00:38:07,200 --> 00:38:08,870
5 normal instructions are 64 bits
but there's also a compressed version in

2000
00:38:08,870 --> 00:38:08,880
but there's also a compressed version in
 

2001
00:38:08,880 --> 00:38:10,790
but there's also a compressed version in
which instructions are 16 bits

2002
00:38:10,790 --> 00:38:10,800
which instructions are 16 bits
 

2003
00:38:10,800 --> 00:38:12,790
which instructions are 16 bits
and we use less registers and the

2004
00:38:12,790 --> 00:38:12,800
and we use less registers and the
 

2005
00:38:12,800 --> 00:38:14,790
and we use less registers and the
registers we use in that case

2006
00:38:14,790 --> 00:38:14,800
registers we use in that case
 

2007
00:38:14,800 --> 00:38:17,510
registers we use in that case
are 8 through 15. those are the

2008
00:38:17,510 --> 00:38:17,520
are 8 through 15. those are the
 

2009
00:38:17,520 --> 00:38:19,190
are 8 through 15. those are the
registers that are available to us

2010
00:38:19,190 --> 00:38:19,200
registers that are available to us
 

2011
00:38:19,200 --> 00:38:20,790
registers that are available to us
so i think somebody had a question about

2012
00:38:20,790 --> 00:38:20,800
so i think somebody had a question about
 

2013
00:38:20,800 --> 00:38:23,430
so i think somebody had a question about
you know why is this s1 register

2014
00:38:23,430 --> 00:38:23,440
you know why is this s1 register
 

2015
00:38:23,440 --> 00:38:26,630
you know why is this s1 register
x9 why is it separated from all of the

2016
00:38:26,630 --> 00:38:26,640
x9 why is it separated from all of the
 

2017
00:38:26,640 --> 00:38:27,190
x9 why is it separated from all of the
other s

2018
00:38:27,190 --> 00:38:27,200
other s
 

2019
00:38:27,200 --> 00:38:29,670
other s
registers and my guess is that that's

2020
00:38:29,670 --> 00:38:29,680
registers and my guess is that that's
 

2021
00:38:29,680 --> 00:38:31,829
registers and my guess is that that's
why

2022
00:38:31,829 --> 00:38:31,839
why
 

2023
00:38:31,839 --> 00:38:33,109
why
that we separated from all of the other

2024
00:38:33,109 --> 00:38:33,119
that we separated from all of the other
 

2025
00:38:33,119 --> 00:38:34,870
that we separated from all of the other
ones because it's available

2026
00:38:34,870 --> 00:38:34,880
ones because it's available
 

2027
00:38:34,880 --> 00:38:37,750
ones because it's available
in compressed instruction mode whereas

2028
00:38:37,750 --> 00:38:37,760
in compressed instruction mode whereas
 

2029
00:38:37,760 --> 00:38:40,069
in compressed instruction mode whereas
s2 to 11 or not

2030
00:38:40,069 --> 00:38:40,079
s2 to 11 or not
 

2031
00:38:40,079 --> 00:38:41,829
s2 to 11 or not
and so that's the idea so that's that's

2032
00:38:41,829 --> 00:38:41,839
and so that's the idea so that's that's
 

2033
00:38:41,839 --> 00:38:43,589
and so that's the idea so that's that's
for compressed but outside of that

2034
00:38:43,589 --> 00:38:43,599
for compressed but outside of that
 

2035
00:38:43,599 --> 00:38:46,470
for compressed but outside of that
registers will always be referred to by

2036
00:38:46,470 --> 00:38:46,480
registers will always be referred to by
 

2037
00:38:46,480 --> 00:38:47,190
registers will always be referred to by
their

2038
00:38:47,190 --> 00:38:47,200
their
 

2039
00:38:47,200 --> 00:38:50,069
their
abi name and so a0 to a7 are used for

2040
00:38:50,069 --> 00:38:50,079
abi name and so a0 to a7 are used for
 

2041
00:38:50,079 --> 00:38:51,270
abi name and so a0 to a7 are used for
function arguments

2042
00:38:51,270 --> 00:38:51,280
function arguments
 

2043
00:38:51,280 --> 00:38:52,630
function arguments
but if we have a function that takes

2044
00:38:52,630 --> 00:38:52,640
but if we have a function that takes
 

2045
00:38:52,640 --> 00:38:55,109
but if we have a function that takes
more than the eight arguments that those

2046
00:38:55,109 --> 00:38:55,119
more than the eight arguments that those
 

2047
00:38:55,119 --> 00:38:57,510
more than the eight arguments that those
registers give us access to

2048
00:38:57,510 --> 00:38:57,520
registers give us access to
 

2049
00:38:57,520 --> 00:38:59,990
registers give us access to
we do need to use memory but that's this

2050
00:38:59,990 --> 00:39:00,000
we do need to use memory but that's this
 

2051
00:39:00,000 --> 00:39:01,190
we do need to use memory but that's this
is kind of an illustration of the fact

2052
00:39:01,190 --> 00:39:01,200
is kind of an illustration of the fact
 

2053
00:39:01,200 --> 00:39:02,710
is kind of an illustration of the fact
that we don't want to use memory when we

2054
00:39:02,710 --> 00:39:02,720
that we don't want to use memory when we
 

2055
00:39:02,720 --> 00:39:04,310
that we don't want to use memory when we
can use registers

2056
00:39:04,310 --> 00:39:04,320
can use registers
 

2057
00:39:04,320 --> 00:39:07,190
can use registers
we only we only use a memory if we have

2058
00:39:07,190 --> 00:39:07,200
we only we only use a memory if we have
 

2059
00:39:07,200 --> 00:39:08,710
we only we only use a memory if we have
to

2060
00:39:08,710 --> 00:39:08,720
to
 

2061
00:39:08,720 --> 00:39:10,790
to
and this uh this column here the saver

2062
00:39:10,790 --> 00:39:10,800
and this uh this column here the saver
 

2063
00:39:10,800 --> 00:39:12,069
and this uh this column here the saver
column

2064
00:39:12,069 --> 00:39:12,079
column
 

2065
00:39:12,079 --> 00:39:14,069
column
this is also extremely important when

2066
00:39:14,069 --> 00:39:14,079
this is also extremely important when
 

2067
00:39:14,079 --> 00:39:16,230
this is also extremely important when
we're discussing registers caller versus

2068
00:39:16,230 --> 00:39:16,240
we're discussing registers caller versus
 

2069
00:39:16,240 --> 00:39:17,829
we're discussing registers caller versus
callee saved

2070
00:39:17,829 --> 00:39:17,839
callee saved
 

2071
00:39:17,839 --> 00:39:21,270
callee saved
and um the terms are

2072
00:39:21,270 --> 00:39:21,280
and um the terms are
 

2073
00:39:21,280 --> 00:39:23,990
and um the terms are
i confuse them regularly caller and

2074
00:39:23,990 --> 00:39:24,000
i confuse them regularly caller and
 

2075
00:39:24,000 --> 00:39:26,150
i confuse them regularly caller and
callie they only differ by one letter

2076
00:39:26,150 --> 00:39:26,160
callie they only differ by one letter
 

2077
00:39:26,160 --> 00:39:29,190
callie they only differ by one letter
the easiest way that i found to remember

2078
00:39:29,190 --> 00:39:29,200
the easiest way that i found to remember
 

2079
00:39:29,200 --> 00:39:30,470
the easiest way that i found to remember
them is that

2080
00:39:30,470 --> 00:39:30,480
them is that
 

2081
00:39:30,480 --> 00:39:34,390
them is that
caller saved registers are not

2082
00:39:34,390 --> 00:39:34,400
caller saved registers are not
 

2083
00:39:34,400 --> 00:39:37,589
caller saved registers are not
preserved

2084
00:39:37,589 --> 00:39:37,599

 

2085
00:39:37,599 --> 00:39:42,230

across a function call

2086
00:39:42,230 --> 00:39:42,240
across a function call
 

2087
00:39:42,240 --> 00:39:46,790
across a function call
so and callee saved registers

2088
00:39:46,790 --> 00:39:46,800
so and callee saved registers
 

2089
00:39:46,800 --> 00:39:52,069
so and callee saved registers
are preserved what i mean by this

2090
00:39:52,069 --> 00:39:52,079
are preserved what i mean by this
 

2091
00:39:52,079 --> 00:39:55,190
are preserved what i mean by this
is that

2092
00:39:55,190 --> 00:39:55,200

 

2093
00:39:55,200 --> 00:39:58,069

a caller saved register can be

2094
00:39:58,069 --> 00:39:58,079
a caller saved register can be
 

2095
00:39:58,079 --> 00:39:59,190
a caller saved register can be
overwritten

2096
00:39:59,190 --> 00:39:59,200
overwritten
 

2097
00:39:59,200 --> 00:40:02,310
overwritten
by the function so let's say i have

2098
00:40:02,310 --> 00:40:02,320
by the function so let's say i have
 

2099
00:40:02,320 --> 00:40:03,030
by the function so let's say i have
function a

2100
00:40:03,030 --> 00:40:03,040
function a
 

2101
00:40:03,040 --> 00:40:05,589
function a
which calls function b any registers

2102
00:40:05,589 --> 00:40:05,599
which calls function b any registers
 

2103
00:40:05,599 --> 00:40:07,109
which calls function b any registers
being used by function a

2104
00:40:07,109 --> 00:40:07,119
being used by function a
 

2105
00:40:07,119 --> 00:40:10,309
being used by function a
that are caller saved call function b

2106
00:40:10,309 --> 00:40:10,319
that are caller saved call function b
 

2107
00:40:10,319 --> 00:40:12,710
that are caller saved call function b
can overwrite when it gets called and i

2108
00:40:12,710 --> 00:40:12,720
can overwrite when it gets called and i
 

2109
00:40:12,720 --> 00:40:14,550
can overwrite when it gets called and i
think a good illustration of this

2110
00:40:14,550 --> 00:40:14,560
think a good illustration of this
 

2111
00:40:14,560 --> 00:40:17,349
think a good illustration of this
is the return address because you know

2112
00:40:17,349 --> 00:40:17,359
is the return address because you know
 

2113
00:40:17,359 --> 00:40:19,030
is the return address because you know
you can see that the return address is

2114
00:40:19,030 --> 00:40:19,040
you can see that the return address is
 

2115
00:40:19,040 --> 00:40:21,109
you can see that the return address is
caller saved

2116
00:40:21,109 --> 00:40:21,119
caller saved
 

2117
00:40:21,119 --> 00:40:23,109
caller saved
and that's important because every

2118
00:40:23,109 --> 00:40:23,119
and that's important because every
 

2119
00:40:23,119 --> 00:40:25,750
and that's important because every
function needs to use the return address

2120
00:40:25,750 --> 00:40:25,760
function needs to use the return address
 

2121
00:40:25,760 --> 00:40:28,630
function needs to use the return address
so when a calls b it's important that b

2122
00:40:28,630 --> 00:40:28,640
so when a calls b it's important that b
 

2123
00:40:28,640 --> 00:40:30,069
so when a calls b it's important that b
be able to

2124
00:40:30,069 --> 00:40:30,079
be able to
 

2125
00:40:30,079 --> 00:40:31,990
be able to
overwrite the value in the return

2126
00:40:31,990 --> 00:40:32,000
overwrite the value in the return
 

2127
00:40:32,000 --> 00:40:34,390
overwrite the value in the return
address hence why it's caller saved

2128
00:40:34,390 --> 00:40:34,400
address hence why it's caller saved
 

2129
00:40:34,400 --> 00:40:37,750
address hence why it's caller saved
and callee saved registers are just our

2130
00:40:37,750 --> 00:40:37,760
and callee saved registers are just our
 

2131
00:40:37,760 --> 00:40:40,069
and callee saved registers are just our
convention that we use

2132
00:40:40,069 --> 00:40:40,079
convention that we use
 

2133
00:40:40,079 --> 00:40:42,150
convention that we use
the frame pointer is important for that

2134
00:40:42,150 --> 00:40:42,160
the frame pointer is important for that
 

2135
00:40:42,160 --> 00:40:44,069
the frame pointer is important for that
reason

2136
00:40:44,069 --> 00:40:44,079
reason
 

2137
00:40:44,079 --> 00:40:45,670
reason
and those are preserved across the

2138
00:40:45,670 --> 00:40:45,680
and those are preserved across the
 

2139
00:40:45,680 --> 00:40:47,430
and those are preserved across the
function calls so basically any register

2140
00:40:47,430 --> 00:40:47,440
function calls so basically any register
 

2141
00:40:47,440 --> 00:40:49,030
function calls so basically any register
that is caller saved

2142
00:40:49,030 --> 00:40:49,040
that is caller saved
 

2143
00:40:49,040 --> 00:40:50,470
that is caller saved
the function that is making the call

2144
00:40:50,470 --> 00:40:50,480
the function that is making the call
 

2145
00:40:50,480 --> 00:40:52,550
the function that is making the call
needs to worry about those registers

2146
00:40:52,550 --> 00:40:52,560
needs to worry about those registers
 

2147
00:40:52,560 --> 00:40:54,069
needs to worry about those registers
and if they're calling saved the

2148
00:40:54,069 --> 00:40:54,079
and if they're calling saved the
 

2149
00:40:54,079 --> 00:40:55,829
and if they're calling saved the
function that is being called

2150
00:40:55,829 --> 00:40:55,839
function that is being called
 

2151
00:40:55,839 --> 00:40:57,349
function that is being called
needs to worry about preserving the

2152
00:40:57,349 --> 00:40:57,359
needs to worry about preserving the
 

2153
00:40:57,359 --> 00:40:59,750
needs to worry about preserving the
value in those registers

2154
00:40:59,750 --> 00:40:59,760
value in those registers
 

2155
00:40:59,760 --> 00:41:02,710
value in those registers
and again you know i i regularly confuse

2156
00:41:02,710 --> 00:41:02,720
and again you know i i regularly confuse
 

2157
00:41:02,720 --> 00:41:03,270
and again you know i i regularly confuse
the two

2158
00:41:03,270 --> 00:41:03,280
the two
 

2159
00:41:03,280 --> 00:41:07,750
the two
and find myself returning to this table

2160
00:41:07,750 --> 00:41:07,760
and find myself returning to this table
 

2161
00:41:07,760 --> 00:41:11,109
and find myself returning to this table
to remind myself about what they do

2162
00:41:11,109 --> 00:41:11,119
to remind myself about what they do
 

2163
00:41:11,119 --> 00:41:14,150
to remind myself about what they do
and so you know you if you remember from

2164
00:41:14,150 --> 00:41:14,160
and so you know you if you remember from
 

2165
00:41:14,160 --> 00:41:14,870
and so you know you if you remember from
the reading

2166
00:41:14,870 --> 00:41:14,880
the reading
 

2167
00:41:14,880 --> 00:41:18,150
the reading
all of these registers are 64 bits wide

2168
00:41:18,150 --> 00:41:18,160
all of these registers are 64 bits wide
 

2169
00:41:18,160 --> 00:41:19,349
all of these registers are 64 bits wide
so they have 64

2170
00:41:19,349 --> 00:41:19,359
so they have 64
 

2171
00:41:19,359 --> 00:41:22,550
so they have 64
places where we can put things and

2172
00:41:22,550 --> 00:41:22,560
places where we can put things and
 

2173
00:41:22,560 --> 00:41:24,950
places where we can put things and
the various data types are made to fit

2174
00:41:24,950 --> 00:41:24,960
the various data types are made to fit
 

2175
00:41:24,960 --> 00:41:27,190
the various data types are made to fit
into those 64 bits

2176
00:41:27,190 --> 00:41:27,200
into those 64 bits
 

2177
00:41:27,200 --> 00:41:28,950
into those 64 bits
based on the calling convention so if we

2178
00:41:28,950 --> 00:41:28,960
based on the calling convention so if we
 

2179
00:41:28,960 --> 00:41:30,710
based on the calling convention so if we
have a 32-bit integer

2180
00:41:30,710 --> 00:41:30,720
have a 32-bit integer
 

2181
00:41:30,720 --> 00:41:32,309
have a 32-bit integer
depending on how it's whether or not

2182
00:41:32,309 --> 00:41:32,319
depending on how it's whether or not
 

2183
00:41:32,319 --> 00:41:34,230
depending on how it's whether or not
it's sign extended you know we'll either

2184
00:41:34,230 --> 00:41:34,240
it's sign extended you know we'll either
 

2185
00:41:34,240 --> 00:41:36,150
it's sign extended you know we'll either
add zeros or ones to the front of that

2186
00:41:36,150 --> 00:41:36,160
add zeros or ones to the front of that
 

2187
00:41:36,160 --> 00:41:37,109
add zeros or ones to the front of that
integer

2188
00:41:37,109 --> 00:41:37,119
integer
 

2189
00:41:37,119 --> 00:41:38,870
integer
in order to make it 64 bits to put in

2190
00:41:38,870 --> 00:41:38,880
in order to make it 64 bits to put in
 

2191
00:41:38,880 --> 00:41:40,470
in order to make it 64 bits to put in
these registers

2192
00:41:40,470 --> 00:41:40,480
these registers
 

2193
00:41:40,480 --> 00:41:42,790
these registers
so before we move on uh does anybody

2194
00:41:42,790 --> 00:41:42,800
so before we move on uh does anybody
 

2195
00:41:42,800 --> 00:41:44,710
so before we move on uh does anybody
have questions about

2196
00:41:44,710 --> 00:41:44,720
have questions about
 

2197
00:41:44,720 --> 00:41:47,510
have questions about
registers or things things of that

2198
00:41:47,510 --> 00:41:47,520
registers or things things of that
 

2199
00:41:47,520 --> 00:41:58,069
registers or things things of that
nature

2200
00:41:58,069 --> 00:41:58,079

 

2201
00:41:58,079 --> 00:42:01,109

i have a question can you have a

2202
00:42:01,109 --> 00:42:01,119
i have a question can you have a
 

2203
00:42:01,119 --> 00:42:05,349
i have a question can you have a
can you put a return value in a1

2204
00:42:05,349 --> 00:42:05,359
can you put a return value in a1
 

2205
00:42:05,359 --> 00:42:08,550
can you put a return value in a1
yes it's a good question so um i think

2206
00:42:08,550 --> 00:42:08,560
yes it's a good question so um i think
 

2207
00:42:08,560 --> 00:42:09,430
yes it's a good question so um i think
in theory

2208
00:42:09,430 --> 00:42:09,440
in theory
 

2209
00:42:09,440 --> 00:42:14,550
in theory
you can the reason why we say a0 to a1

2210
00:42:14,550 --> 00:42:14,560
you can the reason why we say a0 to a1
 

2211
00:42:14,560 --> 00:42:16,950
you can the reason why we say a0 to a1
is if a function returns a long long

2212
00:42:16,950 --> 00:42:16,960
is if a function returns a long long
 

2213
00:42:16,960 --> 00:42:18,790
is if a function returns a long long
which is 128 bits

2214
00:42:18,790 --> 00:42:18,800
which is 128 bits
 

2215
00:42:18,800 --> 00:42:21,430
which is 128 bits
so if you remember from the reading if a

2216
00:42:21,430 --> 00:42:21,440
so if you remember from the reading if a
 

2217
00:42:21,440 --> 00:42:23,589
so if you remember from the reading if a
function argument is 100 is more than

2218
00:42:23,589 --> 00:42:23,599
function argument is 100 is more than
 

2219
00:42:23,599 --> 00:42:26,069
function argument is 100 is more than
a pointer word and so when we refer to

2220
00:42:26,069 --> 00:42:26,079
a pointer word and so when we refer to
 

2221
00:42:26,079 --> 00:42:28,150
a pointer word and so when we refer to
the prior word size we're saying 64 bits

2222
00:42:28,150 --> 00:42:28,160
the prior word size we're saying 64 bits
 

2223
00:42:28,160 --> 00:42:29,750
the prior word size we're saying 64 bits
so if we have something that is twice

2224
00:42:29,750 --> 00:42:29,760
so if we have something that is twice
 

2225
00:42:29,760 --> 00:42:32,309
so if we have something that is twice
the size of a pointer word

2226
00:42:32,309 --> 00:42:32,319
the size of a pointer word
 

2227
00:42:32,319 --> 00:42:35,349
the size of a pointer word
um we can put that in a register pair

2228
00:42:35,349 --> 00:42:35,359
um we can put that in a register pair
 

2229
00:42:35,359 --> 00:42:37,510
um we can put that in a register pair
and so the same convention holds true

2230
00:42:37,510 --> 00:42:37,520
and so the same convention holds true
 

2231
00:42:37,520 --> 00:42:39,270
and so the same convention holds true
for return addresses where if we have

2232
00:42:39,270 --> 00:42:39,280
for return addresses where if we have
 

2233
00:42:39,280 --> 00:42:40,150
for return addresses where if we have
something that's

2234
00:42:40,150 --> 00:42:40,160
something that's
 

2235
00:42:40,160 --> 00:42:42,790
something that's
the size of twice a pointer word we can

2236
00:42:42,790 --> 00:42:42,800
the size of twice a pointer word we can
 

2237
00:42:42,800 --> 00:42:44,150
the size of twice a pointer word we can
stick that in a0 and

2238
00:42:44,150 --> 00:42:44,160
stick that in a0 and
 

2239
00:42:44,160 --> 00:42:46,390
stick that in a0 and
a1 and use that as the return address i

2240
00:42:46,390 --> 00:42:46,400
a1 and use that as the return address i
 

2241
00:42:46,400 --> 00:42:47,829
a1 and use that as the return address i
think you'll run into problems if you

2242
00:42:47,829 --> 00:42:47,839
think you'll run into problems if you
 

2243
00:42:47,839 --> 00:42:49,829
think you'll run into problems if you
only try to put something in a1

2244
00:42:49,829 --> 00:42:49,839
only try to put something in a1
 

2245
00:42:49,839 --> 00:42:55,829
only try to put something in a1
make sense thanks

2246
00:42:55,829 --> 00:42:55,839

 

2247
00:42:55,839 --> 00:42:58,710

why are the registers not like

2248
00:42:58,710 --> 00:42:58,720
why are the registers not like
 

2249
00:42:58,720 --> 00:42:59,510
why are the registers not like
continuous

2250
00:42:59,510 --> 00:42:59,520
continuous
 

2251
00:42:59,520 --> 00:43:03,109
continuous
so why is like a zero and one separate

2252
00:43:03,109 --> 00:43:03,119
so why is like a zero and one separate
 

2253
00:43:03,119 --> 00:43:05,990
so why is like a zero and one separate
from sorry no that's a that's a bad

2254
00:43:05,990 --> 00:43:06,000
from sorry no that's a that's a bad
 

2255
00:43:06,000 --> 00:43:08,390
from sorry no that's a that's a bad
example what's why is s1

2256
00:43:08,390 --> 00:43:08,400
example what's why is s1
 

2257
00:43:08,400 --> 00:43:10,550
example what's why is s1
separate from s2 why are the a's in

2258
00:43:10,550 --> 00:43:10,560
separate from s2 why are the a's in
 

2259
00:43:10,560 --> 00:43:13,109
separate from s2 why are the a's in
between like is there any point in that

2260
00:43:13,109 --> 00:43:13,119
between like is there any point in that
 

2261
00:43:13,119 --> 00:43:15,430
between like is there any point in that
yeah so uh i mentioned this briefly

2262
00:43:15,430 --> 00:43:15,440
yeah so uh i mentioned this briefly
 

2263
00:43:15,440 --> 00:43:16,950
yeah so uh i mentioned this briefly
earlier but there is a

2264
00:43:16,950 --> 00:43:16,960
earlier but there is a
 

2265
00:43:16,960 --> 00:43:19,109
earlier but there is a
compressed this is a guess i don't i

2266
00:43:19,109 --> 00:43:19,119
compressed this is a guess i don't i
 

2267
00:43:19,119 --> 00:43:20,309
compressed this is a guess i don't i
don't know for sure

2268
00:43:20,309 --> 00:43:20,319
don't know for sure
 

2269
00:43:20,319 --> 00:43:23,109
don't know for sure
but there's a compressed version of the

2270
00:43:23,109 --> 00:43:23,119
but there's a compressed version of the
 

2271
00:43:23,119 --> 00:43:23,910
but there's a compressed version of the
risc 5

2272
00:43:23,910 --> 00:43:23,920
risc 5
 

2273
00:43:23,920 --> 00:43:26,950
risc 5
instructions which are 16 bits in size

2274
00:43:26,950 --> 00:43:26,960
instructions which are 16 bits in size
 

2275
00:43:26,960 --> 00:43:28,950
instructions which are 16 bits in size
as opposed to 64.

2276
00:43:28,950 --> 00:43:28,960
as opposed to 64.
 

2277
00:43:28,960 --> 00:43:32,309
as opposed to 64.
and you would use that to try and

2278
00:43:32,309 --> 00:43:32,319
and you would use that to try and
 

2279
00:43:32,319 --> 00:43:34,470
and you would use that to try and
make your code take less space in memory

2280
00:43:34,470 --> 00:43:34,480
make your code take less space in memory
 

2281
00:43:34,480 --> 00:43:36,710
make your code take less space in memory
and when you use those 16-bit

2282
00:43:36,710 --> 00:43:36,720
and when you use those 16-bit
 

2283
00:43:36,720 --> 00:43:38,309
and when you use those 16-bit
instructions you only have

2284
00:43:38,309 --> 00:43:38,319
instructions you only have
 

2285
00:43:38,319 --> 00:43:42,069
instructions you only have
accesses to registers 8 through 15.

2286
00:43:42,069 --> 00:43:42,079
accesses to registers 8 through 15.
 

2287
00:43:42,079 --> 00:43:45,990
accesses to registers 8 through 15.
so i think s1 is separate from s2 to 11

2288
00:43:45,990 --> 00:43:46,000
so i think s1 is separate from s2 to 11
 

2289
00:43:46,000 --> 00:43:47,910
so i think s1 is separate from s2 to 11
because they want to make it clear that

2290
00:43:47,910 --> 00:43:47,920
because they want to make it clear that
 

2291
00:43:47,920 --> 00:43:49,990
because they want to make it clear that
s1 is available to you

2292
00:43:49,990 --> 00:43:50,000
s1 is available to you
 

2293
00:43:50,000 --> 00:43:51,990
s1 is available to you
in the compressed instruction mode

2294
00:43:51,990 --> 00:43:52,000
in the compressed instruction mode
 

2295
00:43:52,000 --> 00:43:54,550
in the compressed instruction mode
whereas s2 to 11 aren't

2296
00:43:54,550 --> 00:43:54,560
whereas s2 to 11 aren't
 

2297
00:43:54,560 --> 00:43:56,790
whereas s2 to 11 aren't
um and the reason you know i don't know

2298
00:43:56,790 --> 00:43:56,800
um and the reason you know i don't know
 

2299
00:43:56,800 --> 00:43:58,470
um and the reason you know i don't know
why they picked x

2300
00:43:58,470 --> 00:43:58,480
why they picked x
 

2301
00:43:58,480 --> 00:44:01,670
why they picked x
x eight to 15 but i suspect that that's

2302
00:44:01,670 --> 00:44:01,680
x eight to 15 but i suspect that that's
 

2303
00:44:01,680 --> 00:44:03,030
x eight to 15 but i suspect that that's
just they looked at a bunch of code and

2304
00:44:03,030 --> 00:44:03,040
just they looked at a bunch of code and
 

2305
00:44:03,040 --> 00:44:04,069
just they looked at a bunch of code and
we're like oh these are the most

2306
00:44:04,069 --> 00:44:04,079
we're like oh these are the most
 

2307
00:44:04,079 --> 00:44:09,850
we're like oh these are the most
commonly used registers

2308
00:44:09,850 --> 00:44:09,860

 

2309
00:44:09,860 --> 00:44:17,109

[Music]

2310
00:44:17,109 --> 00:44:17,119

 

2311
00:44:17,119 --> 00:44:20,870

any other questions

2312
00:44:20,870 --> 00:44:20,880

 

2313
00:44:20,880 --> 00:44:24,870

i had a question um besides the frame

2314
00:44:24,870 --> 00:44:24,880
i had a question um besides the frame
 

2315
00:44:24,880 --> 00:44:27,030
i had a question um besides the frame
pointer the stack pointer and all

2316
00:44:27,030 --> 00:44:27,040
pointer the stack pointer and all
 

2317
00:44:27,040 --> 00:44:29,829
pointer the stack pointer and all
uh i i don't know why we would need more

2318
00:44:29,829 --> 00:44:29,839
uh i i don't know why we would need more
 

2319
00:44:29,839 --> 00:44:30,550
uh i i don't know why we would need more
call

2320
00:44:30,550 --> 00:44:30,560
call
 

2321
00:44:30,560 --> 00:44:33,589
call
callista registers but we do have

2322
00:44:33,589 --> 00:44:33,599
callista registers but we do have
 

2323
00:44:33,599 --> 00:44:37,670
callista registers but we do have
like a bunch of them yeah the s1s

2324
00:44:37,670 --> 00:44:37,680
like a bunch of them yeah the s1s
 

2325
00:44:37,680 --> 00:44:40,550
like a bunch of them yeah the s1s
to 11s those are just for i believe used

2326
00:44:40,550 --> 00:44:40,560
to 11s those are just for i believe used
 

2327
00:44:40,560 --> 00:44:42,470
to 11s those are just for i believe used
there for freedom for the compiler

2328
00:44:42,470 --> 00:44:42,480
there for freedom for the compiler
 

2329
00:44:42,480 --> 00:44:45,349
there for freedom for the compiler
or for the programmer to use um so there

2330
00:44:45,349 --> 00:44:45,359
or for the programmer to use um so there
 

2331
00:44:45,359 --> 00:44:46,790
or for the programmer to use um so there
are maybe there are certain cases where

2332
00:44:46,790 --> 00:44:46,800
are maybe there are certain cases where
 

2333
00:44:46,800 --> 00:44:47,510
are maybe there are certain cases where
you want

2334
00:44:47,510 --> 00:44:47,520
you want
 

2335
00:44:47,520 --> 00:44:49,190
you want
you want to guarantee that something is

2336
00:44:49,190 --> 00:44:49,200
you want to guarantee that something is
 

2337
00:44:49,200 --> 00:44:50,950
you want to guarantee that something is
still around

2338
00:44:50,950 --> 00:44:50,960
still around
 

2339
00:44:50,960 --> 00:44:53,829
still around
after after your function call the

2340
00:44:53,829 --> 00:44:53,839
after after your function call the
 

2341
00:44:53,839 --> 00:44:55,829
after after your function call the
compiler can choose to use

2342
00:44:55,829 --> 00:44:55,839
compiler can choose to use
 

2343
00:44:55,839 --> 00:45:00,150
compiler can choose to use
s1 211 to do that

2344
00:45:00,150 --> 00:45:00,160

 

2345
00:45:00,160 --> 00:45:02,710

i don't have like on hand a specific

2346
00:45:02,710 --> 00:45:02,720
i don't have like on hand a specific
 

2347
00:45:02,720 --> 00:45:04,710
i don't have like on hand a specific
example of where that's useful

2348
00:45:04,710 --> 00:45:04,720
example of where that's useful
 

2349
00:45:04,720 --> 00:45:07,910
example of where that's useful
but i'm sure it shows up where

2350
00:45:07,910 --> 00:45:07,920
but i'm sure it shows up where
 

2351
00:45:07,920 --> 00:45:14,309
but i'm sure it shows up where
having a callee save value is important

2352
00:45:14,309 --> 00:45:14,319

 

2353
00:45:14,319 --> 00:45:15,750

but these are basically basically you

2354
00:45:15,750 --> 00:45:15,760
but these are basically basically you
 

2355
00:45:15,760 --> 00:45:17,430
but these are basically basically you
know programmer or compiler's choice to

2356
00:45:17,430 --> 00:45:17,440
know programmer or compiler's choice to
 

2357
00:45:17,440 --> 00:45:18,150
know programmer or compiler's choice to
use

2358
00:45:18,150 --> 00:45:18,160
use
 

2359
00:45:18,160 --> 00:45:22,390
use
that's 1 to 11.

2360
00:45:22,390 --> 00:45:22,400

 

2361
00:45:22,400 --> 00:45:23,589

and i should note that these these

2362
00:45:23,589 --> 00:45:23,599
and i should note that these these
 

2363
00:45:23,599 --> 00:45:25,109
and i should note that these these
floating point registers they're for

2364
00:45:25,109 --> 00:45:25,119
floating point registers they're for
 

2365
00:45:25,119 --> 00:45:27,030
floating point registers they're for
floating point arithmetic

2366
00:45:27,030 --> 00:45:27,040
floating point arithmetic
 

2367
00:45:27,040 --> 00:45:30,069
floating point arithmetic
i as far as i'm aware you won't see them

2368
00:45:30,069 --> 00:45:30,079
i as far as i'm aware you won't see them
 

2369
00:45:30,079 --> 00:45:31,670
i as far as i'm aware you won't see them
in this class

2370
00:45:31,670 --> 00:45:31,680
in this class
 

2371
00:45:31,680 --> 00:45:33,349
in this class
and so you don't really need to worry

2372
00:45:33,349 --> 00:45:33,359
and so you don't really need to worry
 

2373
00:45:33,359 --> 00:45:38,550
and so you don't really need to worry
about them

2374
00:45:38,550 --> 00:45:38,560

 

2375
00:45:38,560 --> 00:45:41,829

okay so we started talking a little bit

2376
00:45:41,829 --> 00:45:41,839
okay so we started talking a little bit
 

2377
00:45:41,839 --> 00:45:45,430
okay so we started talking a little bit
about function calls

2378
00:45:45,430 --> 00:45:45,440
about function calls
 

2379
00:45:45,440 --> 00:45:48,630
about function calls
and so with that i want to

2380
00:45:48,630 --> 00:45:48,640
and so with that i want to
 

2381
00:45:48,640 --> 00:45:54,390
and so with that i want to
move us into discussion of the stack

2382
00:45:54,390 --> 00:45:54,400
move us into discussion of the stack
 

2383
00:45:54,400 --> 00:45:57,829
move us into discussion of the stack
so this is this is

2384
00:45:57,829 --> 00:45:57,839
so this is this is
 

2385
00:45:57,839 --> 00:46:01,030
so this is this is
we're talking about the stack and

2386
00:46:01,030 --> 00:46:01,040
we're talking about the stack and
 

2387
00:46:01,040 --> 00:46:03,910
we're talking about the stack and
the stack if you've seen it likely

2388
00:46:03,910 --> 00:46:03,920
the stack if you've seen it likely
 

2389
00:46:03,920 --> 00:46:04,550
the stack if you've seen it likely
before

2390
00:46:04,550 --> 00:46:04,560
before
 

2391
00:46:04,560 --> 00:46:07,430
before
the reason why the stack is important is

2392
00:46:07,430 --> 00:46:07,440
the reason why the stack is important is
 

2393
00:46:07,440 --> 00:46:07,750
the reason why the stack is important is
it

2394
00:46:07,750 --> 00:46:07,760
it
 

2395
00:46:07,760 --> 00:46:11,270
it
it's what keeps our functions

2396
00:46:11,270 --> 00:46:11,280
it's what keeps our functions
 

2397
00:46:11,280 --> 00:46:14,630
it's what keeps our functions
organized and sane and it's what allows

2398
00:46:14,630 --> 00:46:14,640
organized and sane and it's what allows
 

2399
00:46:14,640 --> 00:46:16,550
organized and sane and it's what allows
and what makes functions work it what

2400
00:46:16,550 --> 00:46:16,560
and what makes functions work it what
 

2401
00:46:16,560 --> 00:46:17,990
and what makes functions work it what
it's what makes return

2402
00:46:17,990 --> 00:46:18,000
it's what makes return
 

2403
00:46:18,000 --> 00:46:21,030
it's what makes return
work and it's also uh where often we'll

2404
00:46:21,030 --> 00:46:21,040
work and it's also uh where often we'll
 

2405
00:46:21,040 --> 00:46:21,990
work and it's also uh where often we'll
find ourselves

2406
00:46:21,990 --> 00:46:22,000
find ourselves
 

2407
00:46:22,000 --> 00:46:24,790
find ourselves
saving our registers and things like

2408
00:46:24,790 --> 00:46:24,800
saving our registers and things like
 

2409
00:46:24,800 --> 00:46:26,829
saving our registers and things like
that

2410
00:46:26,829 --> 00:46:26,839
that
 

2411
00:46:26,839 --> 00:46:29,430
that
um

2412
00:46:29,430 --> 00:46:29,440
um
 

2413
00:46:29,440 --> 00:46:32,710
um
so here i've

2414
00:46:32,710 --> 00:46:32,720
so here i've
 

2415
00:46:32,720 --> 00:46:35,710
so here i've
given just a pretty simple um

2416
00:46:35,710 --> 00:46:35,720
given just a pretty simple um
 

2417
00:46:35,720 --> 00:46:36,950
given just a pretty simple um
[Music]

2418
00:46:36,950 --> 00:46:36,960
[Music]
 

2419
00:46:36,960 --> 00:46:39,829
[Music]
layout of what a stack looks like and so

2420
00:46:39,829 --> 00:46:39,839
layout of what a stack looks like and so
 

2421
00:46:39,839 --> 00:46:41,430
layout of what a stack looks like and so
each of these

2422
00:46:41,430 --> 00:46:41,440
each of these
 

2423
00:46:41,440 --> 00:46:44,790
each of these
boxes here is what we refer to

2424
00:46:44,790 --> 00:46:44,800
boxes here is what we refer to
 

2425
00:46:44,800 --> 00:46:49,030
boxes here is what we refer to
as a stack frame

2426
00:46:49,030 --> 00:46:49,040
as a stack frame
 

2427
00:46:49,040 --> 00:46:52,390
as a stack frame
and every time we get

2428
00:46:52,390 --> 00:46:52,400
and every time we get
 

2429
00:46:52,400 --> 00:46:59,910
and every time we get
which are generated by function calls

2430
00:46:59,910 --> 00:46:59,920

 

2431
00:46:59,920 --> 00:47:03,270

um every time we call a function

2432
00:47:03,270 --> 00:47:03,280
um every time we call a function
 

2433
00:47:03,280 --> 00:47:06,309
um every time we call a function
that function makes for itself its own

2434
00:47:06,309 --> 00:47:06,319
that function makes for itself its own
 

2435
00:47:06,319 --> 00:47:07,670
that function makes for itself its own
stack frame

2436
00:47:07,670 --> 00:47:07,680
stack frame
 

2437
00:47:07,680 --> 00:47:11,030
stack frame
and which is in which it uses itself and

2438
00:47:11,030 --> 00:47:11,040
and which is in which it uses itself and
 

2439
00:47:11,040 --> 00:47:13,750
and which is in which it uses itself and
does that by moving around the stack

2440
00:47:13,750 --> 00:47:13,760
does that by moving around the stack
 

2441
00:47:13,760 --> 00:47:14,470
does that by moving around the stack
pointer

2442
00:47:14,470 --> 00:47:14,480
pointer
 

2443
00:47:14,480 --> 00:47:17,190
pointer
so here's the stack pointer and this is

2444
00:47:17,190 --> 00:47:17,200
so here's the stack pointer and this is
 

2445
00:47:17,200 --> 00:47:17,829
so here's the stack pointer and this is
uh

2446
00:47:17,829 --> 00:47:17,839
uh
 

2447
00:47:17,839 --> 00:47:20,150
uh
and it's very important to remember with

2448
00:47:20,150 --> 00:47:20,160
and it's very important to remember with
 

2449
00:47:20,160 --> 00:47:21,750
and it's very important to remember with
stacks

2450
00:47:21,750 --> 00:47:21,760
stacks
 

2451
00:47:21,760 --> 00:47:24,790
stacks
we start from high addresses

2452
00:47:24,790 --> 00:47:24,800
we start from high addresses
 

2453
00:47:24,800 --> 00:47:28,150
we start from high addresses
and we grow downwards to

2454
00:47:28,150 --> 00:47:28,160
and we grow downwards to
 

2455
00:47:28,160 --> 00:47:30,710
and we grow downwards to
low addresses so the stack grows down

2456
00:47:30,710 --> 00:47:30,720
low addresses so the stack grows down
 

2457
00:47:30,720 --> 00:47:32,150
low addresses so the stack grows down
always

2458
00:47:32,150 --> 00:47:32,160
always
 

2459
00:47:32,160 --> 00:47:34,390
always
and so you'll see that the arithmetic

2460
00:47:34,390 --> 00:47:34,400
and so you'll see that the arithmetic
 

2461
00:47:34,400 --> 00:47:36,230
and so you'll see that the arithmetic
for a stack pointer is uh

2462
00:47:36,230 --> 00:47:36,240
for a stack pointer is uh
 

2463
00:47:36,240 --> 00:47:38,470
for a stack pointer is uh
is usually done via subtraction when we

2464
00:47:38,470 --> 00:47:38,480
is usually done via subtraction when we
 

2465
00:47:38,480 --> 00:47:40,230
is usually done via subtraction when we
want to make a new stack frame

2466
00:47:40,230 --> 00:47:40,240
want to make a new stack frame
 

2467
00:47:40,240 --> 00:47:43,270
want to make a new stack frame
in assembly so the stack grows downwards

2468
00:47:43,270 --> 00:47:43,280
in assembly so the stack grows downwards
 

2469
00:47:43,280 --> 00:47:46,230
in assembly so the stack grows downwards
and stack frames for a function contain

2470
00:47:46,230 --> 00:47:46,240
and stack frames for a function contain
 

2471
00:47:46,240 --> 00:47:48,950
and stack frames for a function contain
saved registers local variables

2472
00:47:48,950 --> 00:47:48,960
saved registers local variables
 

2473
00:47:48,960 --> 00:47:51,510
saved registers local variables
um also like i like i was saying if you

2474
00:47:51,510 --> 00:47:51,520
um also like i like i was saying if you
 

2475
00:47:51,520 --> 00:47:51,990
um also like i like i was saying if you
run out

2476
00:47:51,990 --> 00:47:52,000
run out
 

2477
00:47:52,000 --> 00:47:54,630
run out
of argument registers additional

2478
00:47:54,630 --> 00:47:54,640
of argument registers additional
 

2479
00:47:54,640 --> 00:47:56,309
of argument registers additional
arguments will show up on the stack

2480
00:47:56,309 --> 00:47:56,319
arguments will show up on the stack
 

2481
00:47:56,319 --> 00:47:58,150
arguments will show up on the stack
and so not at stack frames are not all

2482
00:47:58,150 --> 00:47:58,160
and so not at stack frames are not all
 

2483
00:47:58,160 --> 00:47:59,430
and so not at stack frames are not all
the same size

2484
00:47:59,430 --> 00:47:59,440
the same size
 

2485
00:47:59,440 --> 00:48:00,790
the same size
even though they are in this diagram

2486
00:48:00,790 --> 00:48:00,800
even though they are in this diagram
 

2487
00:48:00,800 --> 00:48:02,630
even though they are in this diagram
that's not the case different functions

2488
00:48:02,630 --> 00:48:02,640
that's not the case different functions
 

2489
00:48:02,640 --> 00:48:03,990
that's not the case different functions
have different numbers of local

2490
00:48:03,990 --> 00:48:04,000
have different numbers of local
 

2491
00:48:04,000 --> 00:48:06,630
have different numbers of local
variables different safe registers

2492
00:48:06,630 --> 00:48:06,640
variables different safe registers
 

2493
00:48:06,640 --> 00:48:08,790
variables different safe registers
so on and so forth and so stack frames

2494
00:48:08,790 --> 00:48:08,800
so on and so forth and so stack frames
 

2495
00:48:08,800 --> 00:48:10,470
so on and so forth and so stack frames
will be different sizes but the two

2496
00:48:10,470 --> 00:48:10,480
will be different sizes but the two
 

2497
00:48:10,480 --> 00:48:12,790
will be different sizes but the two
things that you can definitely count on

2498
00:48:12,790 --> 00:48:12,800
things that you can definitely count on
 

2499
00:48:12,800 --> 00:48:14,950
things that you can definitely count on
which are important is that uh the

2500
00:48:14,950 --> 00:48:14,960
which are important is that uh the
 

2501
00:48:14,960 --> 00:48:16,470
which are important is that uh the
return address will always be

2502
00:48:16,470 --> 00:48:16,480
return address will always be
 

2503
00:48:16,480 --> 00:48:19,270
return address will always be
on the first thing and the frame pointer

2504
00:48:19,270 --> 00:48:19,280
on the first thing and the frame pointer
 

2505
00:48:19,280 --> 00:48:21,109
on the first thing and the frame pointer
the previous frames frame pointer is

2506
00:48:21,109 --> 00:48:21,119
the previous frames frame pointer is
 

2507
00:48:21,119 --> 00:48:23,190
the previous frames frame pointer is
also going to show up on the stack

2508
00:48:23,190 --> 00:48:23,200
also going to show up on the stack
 

2509
00:48:23,200 --> 00:48:26,630
also going to show up on the stack
at a predictable location so

2510
00:48:26,630 --> 00:48:26,640
at a predictable location so
 

2511
00:48:26,640 --> 00:48:29,270
at a predictable location so
the two important registers here are sp

2512
00:48:29,270 --> 00:48:29,280
the two important registers here are sp
 

2513
00:48:29,280 --> 00:48:30,710
the two important registers here are sp
which you know as we discussed

2514
00:48:30,710 --> 00:48:30,720
which you know as we discussed
 

2515
00:48:30,720 --> 00:48:33,349
which you know as we discussed
is used for this is the bottom of the

2516
00:48:33,349 --> 00:48:33,359
is used for this is the bottom of the
 

2517
00:48:33,359 --> 00:48:35,670
is used for this is the bottom of the
stack

2518
00:48:35,670 --> 00:48:35,680
stack
 

2519
00:48:35,680 --> 00:48:38,230
stack
or generally you know it's the location

2520
00:48:38,230 --> 00:48:38,240
or generally you know it's the location
 

2521
00:48:38,240 --> 00:48:39,270
or generally you know it's the location
of the stack

2522
00:48:39,270 --> 00:48:39,280
of the stack
 

2523
00:48:39,280 --> 00:48:43,270
of the stack
and then fp is our also important

2524
00:48:43,270 --> 00:48:43,280
and then fp is our also important
 

2525
00:48:43,280 --> 00:48:46,309
and then fp is our also important
register and this points to the top of

2526
00:48:46,309 --> 00:48:46,319
register and this points to the top of
 

2527
00:48:46,319 --> 00:48:48,870
register and this points to the top of
the current

2528
00:48:48,870 --> 00:48:48,880
the current
 

2529
00:48:48,880 --> 00:48:52,470
the current
frame and this is important because

2530
00:48:52,470 --> 00:48:52,480
frame and this is important because
 

2531
00:48:52,480 --> 00:48:54,790
frame and this is important because
that means that the return address and

2532
00:48:54,790 --> 00:48:54,800
that means that the return address and
 

2533
00:48:54,800 --> 00:48:56,230
that means that the return address and
the previous fp

2534
00:48:56,230 --> 00:48:56,240
the previous fp
 

2535
00:48:56,240 --> 00:48:59,589
the previous fp
will always be at a fixed location

2536
00:48:59,589 --> 00:48:59,599
will always be at a fixed location
 

2537
00:48:59,599 --> 00:49:02,710
will always be at a fixed location
from the current frame pointer so that

2538
00:49:02,710 --> 00:49:02,720
from the current frame pointer so that
 

2539
00:49:02,720 --> 00:49:03,829
from the current frame pointer so that
means that

2540
00:49:03,829 --> 00:49:03,839
means that
 

2541
00:49:03,839 --> 00:49:05,990
means that
if i want to find my return address or i

2542
00:49:05,990 --> 00:49:06,000
if i want to find my return address or i
 

2543
00:49:06,000 --> 00:49:07,829
if i want to find my return address or i
want to find the previous frame

2544
00:49:07,829 --> 00:49:07,839
want to find the previous frame
 

2545
00:49:07,839 --> 00:49:10,630
want to find the previous frame
i can always get to those values by

2546
00:49:10,630 --> 00:49:10,640
i can always get to those values by
 

2547
00:49:10,640 --> 00:49:13,589
i can always get to those values by
looking at the current frame pointer

2548
00:49:13,589 --> 00:49:13,599
looking at the current frame pointer
 

2549
00:49:13,599 --> 00:49:15,510
looking at the current frame pointer
and the reason why we store the previous

2550
00:49:15,510 --> 00:49:15,520
and the reason why we store the previous
 

2551
00:49:15,520 --> 00:49:17,750
and the reason why we store the previous
frame pointer is to allow us

2552
00:49:17,750 --> 00:49:17,760
frame pointer is to allow us
 

2553
00:49:17,760 --> 00:49:19,750
frame pointer is to allow us
to jump back so once this function

2554
00:49:19,750 --> 00:49:19,760
to jump back so once this function
 

2555
00:49:19,760 --> 00:49:22,710
to jump back so once this function
returns we can move this into fp

2556
00:49:22,710 --> 00:49:22,720
returns we can move this into fp
 

2557
00:49:22,720 --> 00:49:25,349
returns we can move this into fp
and all of a sudden fp again will go

2558
00:49:25,349 --> 00:49:25,359
and all of a sudden fp again will go
 

2559
00:49:25,359 --> 00:49:26,549
and all of a sudden fp again will go
from pointing to this

2560
00:49:26,549 --> 00:49:26,559
from pointing to this
 

2561
00:49:26,559 --> 00:49:29,349
from pointing to this
this stack frame to now pointing to this

2562
00:49:29,349 --> 00:49:29,359
this stack frame to now pointing to this
 

2563
00:49:29,359 --> 00:49:30,309
this stack frame to now pointing to this
stack frame

2564
00:49:30,309 --> 00:49:30,319
stack frame
 

2565
00:49:30,319 --> 00:49:32,150
stack frame
and so we use the frame pointer to

2566
00:49:32,150 --> 00:49:32,160
and so we use the frame pointer to
 

2567
00:49:32,160 --> 00:49:34,069
and so we use the frame pointer to
manipulate our stack frames

2568
00:49:34,069 --> 00:49:34,079
manipulate our stack frames
 

2569
00:49:34,079 --> 00:49:35,510
manipulate our stack frames
and make sure we're always pointing to

2570
00:49:35,510 --> 00:49:35,520
and make sure we're always pointing to
 

2571
00:49:35,520 --> 00:49:37,270
and make sure we're always pointing to
the one corresponding

2572
00:49:37,270 --> 00:49:37,280
the one corresponding
 

2573
00:49:37,280 --> 00:49:40,950
the one corresponding
to the correct function

2574
00:49:40,950 --> 00:49:40,960
to the correct function
 

2575
00:49:40,960 --> 00:49:42,870
to the correct function
and that's that's kind of how things uh

2576
00:49:42,870 --> 00:49:42,880
and that's that's kind of how things uh
 

2577
00:49:42,880 --> 00:49:44,150
and that's that's kind of how things uh
how things are done

2578
00:49:44,150 --> 00:49:44,160
how things are done
 

2579
00:49:44,160 --> 00:49:47,829
how things are done
and uh the these pieces of the stack

2580
00:49:47,829 --> 00:49:47,839
and uh the these pieces of the stack
 

2581
00:49:47,839 --> 00:49:50,870
and uh the these pieces of the stack
um need to be created by assembly

2582
00:49:50,870 --> 00:49:50,880
um need to be created by assembly
 

2583
00:49:50,880 --> 00:49:52,710
um need to be created by assembly
and so everything's everything in that

2584
00:49:52,710 --> 00:49:52,720
and so everything's everything in that
 

2585
00:49:52,720 --> 00:49:54,309
and so everything's everything in that
calling conventions

2586
00:49:54,309 --> 00:49:54,319
calling conventions
 

2587
00:49:54,319 --> 00:49:57,190
calling conventions
document that you read about that's all

2588
00:49:57,190 --> 00:49:57,200
document that you read about that's all
 

2589
00:49:57,200 --> 00:49:59,349
document that you read about that's all
um enforced by

2590
00:49:59,349 --> 00:49:59,359
um enforced by
 

2591
00:49:59,359 --> 00:50:01,030
um enforced by
effectively by the compiler so the

2592
00:50:01,030 --> 00:50:01,040
effectively by the compiler so the
 

2593
00:50:01,040 --> 00:50:03,030
effectively by the compiler so the
compiler adheres to

2594
00:50:03,030 --> 00:50:03,040
compiler adheres to
 

2595
00:50:03,040 --> 00:50:05,589
compiler adheres to
the calling convention and it's what

2596
00:50:05,589 --> 00:50:05,599
the calling convention and it's what
 

2597
00:50:05,599 --> 00:50:06,950
the calling convention and it's what
generates the stack frame

2598
00:50:06,950 --> 00:50:06,960
generates the stack frame
 

2599
00:50:06,960 --> 00:50:08,950
generates the stack frame
it generates the assembly code that

2600
00:50:08,950 --> 00:50:08,960
it generates the assembly code that
 

2601
00:50:08,960 --> 00:50:10,390
it generates the assembly code that
makes our stack frames look

2602
00:50:10,390 --> 00:50:10,400
makes our stack frames look
 

2603
00:50:10,400 --> 00:50:13,190
makes our stack frames look
correct so often at the top of a

2604
00:50:13,190 --> 00:50:13,200
correct so often at the top of a
 

2605
00:50:13,200 --> 00:50:15,270
correct so often at the top of a
function you'll see what's called

2606
00:50:15,270 --> 00:50:15,280
function you'll see what's called
 

2607
00:50:15,280 --> 00:50:21,270
function you'll see what's called
a function prolog

2608
00:50:21,270 --> 00:50:21,280

 

2609
00:50:21,280 --> 00:50:23,270

and then there will be the body of the

2610
00:50:23,270 --> 00:50:23,280
and then there will be the body of the
 

2611
00:50:23,280 --> 00:50:24,390
and then there will be the body of the
function

2612
00:50:24,390 --> 00:50:24,400
function
 

2613
00:50:24,400 --> 00:50:27,589
function
and then there will be an epilogue

2614
00:50:27,589 --> 00:50:27,599
and then there will be an epilogue
 

2615
00:50:27,599 --> 00:50:30,230
and then there will be an epilogue
that shows up after that so this is kind

2616
00:50:30,230 --> 00:50:30,240
that shows up after that so this is kind
 

2617
00:50:30,240 --> 00:50:31,910
that shows up after that so this is kind
of like

2618
00:50:31,910 --> 00:50:31,920
of like
 

2619
00:50:31,920 --> 00:50:35,270
of like
what an assembly uh

2620
00:50:35,270 --> 00:50:35,280
what an assembly uh
 

2621
00:50:35,280 --> 00:50:37,750
what an assembly uh
function will often look like and we'll

2622
00:50:37,750 --> 00:50:37,760
function will often look like and we'll
 

2623
00:50:37,760 --> 00:50:39,750
function will often look like and we'll
take a look at that

2624
00:50:39,750 --> 00:50:39,760
take a look at that
 

2625
00:50:39,760 --> 00:50:43,190
take a look at that
now so here i have another function

2626
00:50:43,190 --> 00:50:43,200
now so here i have another function
 

2627
00:50:43,200 --> 00:50:45,670
now so here i have another function
something so you you'll you'll note that

2628
00:50:45,670 --> 00:50:45,680
something so you you'll you'll note that
 

2629
00:50:45,680 --> 00:50:48,150
something so you you'll you'll note that
studently that sum2 did not have

2630
00:50:48,150 --> 00:50:48,160
studently that sum2 did not have
 

2631
00:50:48,160 --> 00:50:50,549
studently that sum2 did not have
any of these things that it it should if

2632
00:50:50,549 --> 00:50:50,559
any of these things that it it should if
 

2633
00:50:50,559 --> 00:50:52,069
any of these things that it it should if
it was a proper function

2634
00:50:52,069 --> 00:50:52,079
it was a proper function
 

2635
00:50:52,079 --> 00:50:53,750
it was a proper function
and this works fine because it's simple

2636
00:50:53,750 --> 00:50:53,760
and this works fine because it's simple
 

2637
00:50:53,760 --> 00:50:55,190
and this works fine because it's simple
enough so it does all of its

2638
00:50:55,190 --> 00:50:55,200
enough so it does all of its
 

2639
00:50:55,200 --> 00:50:56,390
enough so it does all of its
computations on

2640
00:50:56,390 --> 00:50:56,400
computations on
 

2641
00:50:56,400 --> 00:50:59,109
computations on
a0 and so things are things are good and

2642
00:50:59,109 --> 00:50:59,119
a0 and so things are things are good and
 

2643
00:50:59,119 --> 00:51:00,790
a0 and so things are things are good and
we're also not it's a it's a leaf

2644
00:51:00,790 --> 00:51:00,800
we're also not it's a it's a leaf
 

2645
00:51:00,800 --> 00:51:01,589
we're also not it's a it's a leaf
function

2646
00:51:01,589 --> 00:51:01,599
function
 

2647
00:51:01,599 --> 00:51:03,910
function
so you'll see if you see the term leaf

2648
00:51:03,910 --> 00:51:03,920
so you'll see if you see the term leaf
 

2649
00:51:03,920 --> 00:51:05,270
so you'll see if you see the term leaf
function that's a function that doesn't

2650
00:51:05,270 --> 00:51:05,280
function that's a function that doesn't
 

2651
00:51:05,280 --> 00:51:06,950
function that's a function that doesn't
call another function

2652
00:51:06,950 --> 00:51:06,960
call another function
 

2653
00:51:06,960 --> 00:51:08,870
call another function
and the functions are special in that

2654
00:51:08,870 --> 00:51:08,880
and the functions are special in that
 

2655
00:51:08,880 --> 00:51:11,109
and the functions are special in that
they don't need to

2656
00:51:11,109 --> 00:51:11,119
they don't need to
 

2657
00:51:11,119 --> 00:51:14,230
they don't need to
worry about saving their own return

2658
00:51:14,230 --> 00:51:14,240
worry about saving their own return
 

2659
00:51:14,240 --> 00:51:15,030
worry about saving their own return
address

2660
00:51:15,030 --> 00:51:15,040
address
 

2661
00:51:15,040 --> 00:51:17,430
address
or saving really any of the caller saved

2662
00:51:17,430 --> 00:51:17,440
or saving really any of the caller saved
 

2663
00:51:17,440 --> 00:51:18,710
or saving really any of the caller saved
registers

2664
00:51:18,710 --> 00:51:18,720
registers
 

2665
00:51:18,720 --> 00:51:21,750
registers
because they're going to they're not

2666
00:51:21,750 --> 00:51:21,760
because they're going to they're not
 

2667
00:51:21,760 --> 00:51:23,190
because they're going to they're not
going to make another function call so

2668
00:51:23,190 --> 00:51:23,200
going to make another function call so
 

2669
00:51:23,200 --> 00:51:24,309
going to make another function call so
they don't have to be

2670
00:51:24,309 --> 00:51:24,319
they don't have to be
 

2671
00:51:24,319 --> 00:51:27,109
they don't have to be
as careful some then double on the other

2672
00:51:27,109 --> 00:51:27,119
as careful some then double on the other
 

2673
00:51:27,119 --> 00:51:27,670
as careful some then double on the other
hand

2674
00:51:27,670 --> 00:51:27,680
hand
 

2675
00:51:27,680 --> 00:51:29,829
hand
is not a leaf function so you can see

2676
00:51:29,829 --> 00:51:29,839
is not a leaf function so you can see
 

2677
00:51:29,839 --> 00:51:31,430
is not a leaf function so you can see
here it calls

2678
00:51:31,430 --> 00:51:31,440
here it calls
 

2679
00:51:31,440 --> 00:51:35,750
here it calls
um sum2 and so it does need to include

2680
00:51:35,750 --> 00:51:35,760
um sum2 and so it does need to include
 

2681
00:51:35,760 --> 00:51:36,470
um sum2 and so it does need to include
that

2682
00:51:36,470 --> 00:51:36,480
that
 

2683
00:51:36,480 --> 00:51:39,190
that
that prolog and so we see here that we

2684
00:51:39,190 --> 00:51:39,200
that prolog and so we see here that we
 

2685
00:51:39,200 --> 00:51:40,150
that prolog and so we see here that we
are subtracting

2686
00:51:40,150 --> 00:51:40,160
are subtracting
 

2687
00:51:40,160 --> 00:51:42,870
are subtracting
16 from the stack pointer so we're

2688
00:51:42,870 --> 00:51:42,880
16 from the stack pointer so we're
 

2689
00:51:42,880 --> 00:51:43,829
16 from the stack pointer so we're
making space

2690
00:51:43,829 --> 00:51:43,839
making space
 

2691
00:51:43,839 --> 00:51:46,549
making space
on our stack we're storing the return

2692
00:51:46,549 --> 00:51:46,559
on our stack we're storing the return
 

2693
00:51:46,559 --> 00:51:47,190
on our stack we're storing the return
address

2694
00:51:47,190 --> 00:51:47,200
address
 

2695
00:51:47,200 --> 00:51:50,150
address
for something double on the stack and

2696
00:51:50,150 --> 00:51:50,160
for something double on the stack and
 

2697
00:51:50,160 --> 00:51:52,309
for something double on the stack and
then we make our call to sum2

2698
00:51:52,309 --> 00:51:52,319
then we make our call to sum2
 

2699
00:51:52,319 --> 00:51:53,829
then we make our call to sum2
and after that all this this function

2700
00:51:53,829 --> 00:51:53,839
and after that all this this function
 

2701
00:51:53,839 --> 00:51:55,589
and after that all this this function
does is it calls sum2 and then

2702
00:51:55,589 --> 00:51:55,599
does is it calls sum2 and then
 

2703
00:51:55,599 --> 00:51:59,109
does is it calls sum2 and then
doubles the result doubles the result

2704
00:51:59,109 --> 00:51:59,119
doubles the result doubles the result
 

2705
00:51:59,119 --> 00:52:01,829
doubles the result doubles the result
turned by some two and here you can see

2706
00:52:01,829 --> 00:52:01,839
turned by some two and here you can see
 

2707
00:52:01,839 --> 00:52:02,390
turned by some two and here you can see
the

2708
00:52:02,390 --> 00:52:02,400
the
 

2709
00:52:02,400 --> 00:52:05,910
the
epilog so we load the return address

2710
00:52:05,910 --> 00:52:05,920
epilog so we load the return address
 

2711
00:52:05,920 --> 00:52:08,950
epilog so we load the return address
back in to ra and

2712
00:52:08,950 --> 00:52:08,960
back in to ra and
 

2713
00:52:08,960 --> 00:52:11,589
back in to ra and
delete our stack frame and then jump out

2714
00:52:11,589 --> 00:52:11,599
delete our stack frame and then jump out
 

2715
00:52:11,599 --> 00:52:13,750
delete our stack frame and then jump out
of the function

2716
00:52:13,750 --> 00:52:13,760
of the function
 

2717
00:52:13,760 --> 00:52:16,150
of the function
and so we can run that to make sure it

2718
00:52:16,150 --> 00:52:16,160
and so we can run that to make sure it
 

2719
00:52:16,160 --> 00:52:20,630
and so we can run that to make sure it
does what we would expect

2720
00:52:20,630 --> 00:52:20,640

 

2721
00:52:20,640 --> 00:52:24,230

we can go here

2722
00:52:24,230 --> 00:52:24,240

 

2723
00:52:24,240 --> 00:52:27,589

we can run so if we run demo2 or demo

2724
00:52:27,589 --> 00:52:27,599
we can run so if we run demo2 or demo
 

2725
00:52:27,599 --> 00:52:29,510
we can run so if we run demo2 or demo
one we got a result of 15

2726
00:52:29,510 --> 00:52:29,520
one we got a result of 15
 

2727
00:52:29,520 --> 00:52:31,190
one we got a result of 15
for the sum and i'll tell you that demo

2728
00:52:31,190 --> 00:52:31,200
for the sum and i'll tell you that demo
 

2729
00:52:31,200 --> 00:52:33,589
for the sum and i'll tell you that demo
two just uh just calls something double

2730
00:52:33,589 --> 00:52:33,599
two just uh just calls something double
 

2731
00:52:33,599 --> 00:52:34,630
two just uh just calls something double
and indeed

2732
00:52:34,630 --> 00:52:34,640
and indeed
 

2733
00:52:34,640 --> 00:52:37,990
and indeed
you know it happily doubles the sum

2734
00:52:37,990 --> 00:52:38,000
you know it happily doubles the sum
 

2735
00:52:38,000 --> 00:52:41,190
you know it happily doubles the sum
returned by some two and

2736
00:52:41,190 --> 00:52:41,200
returned by some two and
 

2737
00:52:41,200 --> 00:52:45,349
returned by some two and
so a question i have for for anybody

2738
00:52:45,349 --> 00:52:45,359
so a question i have for for anybody
 

2739
00:52:45,359 --> 00:52:48,470
so a question i have for for anybody
what happens if we uh delete

2740
00:52:48,470 --> 00:52:48,480
what happens if we uh delete
 

2741
00:52:48,480 --> 00:52:52,230
what happens if we uh delete
this prologue and f so what happens

2742
00:52:52,230 --> 00:52:52,240
this prologue and f so what happens
 

2743
00:52:52,240 --> 00:52:55,030
this prologue and f so what happens
if we just have this as our function

2744
00:52:55,030 --> 00:52:55,040
if we just have this as our function
 

2745
00:52:55,040 --> 00:52:56,549
if we just have this as our function
something double can anybody predict

2746
00:52:56,549 --> 00:52:56,559
something double can anybody predict
 

2747
00:52:56,559 --> 00:53:01,510
something double can anybody predict
what's going to happen

2748
00:53:01,510 --> 00:53:01,520
what's going to happen
 

2749
00:53:01,520 --> 00:53:03,109
what's going to happen
i mean one thing is that some then

2750
00:53:03,109 --> 00:53:03,119
i mean one thing is that some then
 

2751
00:53:03,119 --> 00:53:05,109
i mean one thing is that some then
double wouldn't know

2752
00:53:05,109 --> 00:53:05,119
double wouldn't know
 

2753
00:53:05,119 --> 00:53:07,270
double wouldn't know
the return address that it should return

2754
00:53:07,270 --> 00:53:07,280
the return address that it should return
 

2755
00:53:07,280 --> 00:53:09,109
the return address that it should return
to so upon calling

2756
00:53:09,109 --> 00:53:09,119
to so upon calling
 

2757
00:53:09,119 --> 00:53:11,990
to so upon calling
sum to that's going to override the

2758
00:53:11,990 --> 00:53:12,000
sum to that's going to override the
 

2759
00:53:12,000 --> 00:53:13,270
sum to that's going to override the
return address to be

2760
00:53:13,270 --> 00:53:13,280
return address to be
 

2761
00:53:13,280 --> 00:53:15,670
return address to be
some then double so at the end of thumb

2762
00:53:15,670 --> 00:53:15,680
some then double so at the end of thumb
 

2763
00:53:15,680 --> 00:53:16,309
some then double so at the end of thumb
then double

2764
00:53:16,309 --> 00:53:16,319
then double
 

2765
00:53:16,319 --> 00:53:17,990
then double
it's not going to return to its original

2766
00:53:17,990 --> 00:53:18,000
it's not going to return to its original
 

2767
00:53:18,000 --> 00:53:19,430
it's not going to return to its original
call

2768
00:53:19,430 --> 00:53:19,440
call
 

2769
00:53:19,440 --> 00:53:22,309
call
yeah exactly um and we can see that

2770
00:53:22,309 --> 00:53:22,319
yeah exactly um and we can see that
 

2771
00:53:22,319 --> 00:53:23,990
yeah exactly um and we can see that
that's what happens

2772
00:53:23,990 --> 00:53:24,000
that's what happens
 

2773
00:53:24,000 --> 00:53:27,030
that's what happens
again so if we

2774
00:53:27,030 --> 00:53:27,040
again so if we
 

2775
00:53:27,040 --> 00:53:31,109
again so if we
exit out of this and we exit out of this

2776
00:53:31,109 --> 00:53:31,119
exit out of this and we exit out of this
 

2777
00:53:31,119 --> 00:53:33,190
exit out of this and we exit out of this
and we recompile with now with our

2778
00:53:33,190 --> 00:53:33,200
and we recompile with now with our
 

2779
00:53:33,200 --> 00:53:35,589
and we recompile with now with our
broken function

2780
00:53:35,589 --> 00:53:35,599
broken function
 

2781
00:53:35,599 --> 00:53:37,190
broken function
we can take a look at exactly what's

2782
00:53:37,190 --> 00:53:37,200
we can take a look at exactly what's
 

2783
00:53:37,200 --> 00:53:39,349
we can take a look at exactly what's
going to happen so we can actually

2784
00:53:39,349 --> 00:53:39,359
going to happen so we can actually
 

2785
00:53:39,359 --> 00:53:45,270
going to happen so we can actually
set our breakpoint for something double

2786
00:53:45,270 --> 00:53:45,280

 

2787
00:53:45,280 --> 00:53:49,430

and set up tui and let it continue so if

2788
00:53:49,430 --> 00:53:49,440
and set up tui and let it continue so if
 

2789
00:53:49,440 --> 00:53:50,870
and set up tui and let it continue so if
we now run demo 2

2790
00:53:50,870 --> 00:53:50,880
we now run demo 2
 

2791
00:53:50,880 --> 00:53:54,230
we now run demo 2
okay we're at some then double and

2792
00:53:54,230 --> 00:53:54,240
okay we're at some then double and
 

2793
00:53:54,240 --> 00:53:56,309
okay we're at some then double and
again this is an assembly only function

2794
00:53:56,309 --> 00:53:56,319
again this is an assembly only function
 

2795
00:53:56,319 --> 00:53:58,630
again this is an assembly only function
so we're going to want to look at it in

2796
00:53:58,630 --> 00:53:58,640
so we're going to want to look at it in
 

2797
00:53:58,640 --> 00:54:02,630
so we're going to want to look at it in
assembly so we'll do layout asm layout

2798
00:54:02,630 --> 00:54:02,640
assembly so we'll do layout asm layout
 

2799
00:54:02,640 --> 00:54:04,390
assembly so we'll do layout asm layout
reg because it's important what's in the

2800
00:54:04,390 --> 00:54:04,400
reg because it's important what's in the
 

2801
00:54:04,400 --> 00:54:06,549
reg because it's important what's in the
registers in this case

2802
00:54:06,549 --> 00:54:06,559
registers in this case
 

2803
00:54:06,559 --> 00:54:08,230
registers in this case
and you'll see that gdb knows a whole

2804
00:54:08,230 --> 00:54:08,240
and you'll see that gdb knows a whole
 

2805
00:54:08,240 --> 00:54:09,990
and you'll see that gdb knows a whole
bunch of extra information

2806
00:54:09,990 --> 00:54:10,000
bunch of extra information
 

2807
00:54:10,000 --> 00:54:14,710
bunch of extra information
and so we can see that

2808
00:54:14,710 --> 00:54:14,720

 

2809
00:54:14,720 --> 00:54:16,710

we can see that ra currently so the

2810
00:54:16,710 --> 00:54:16,720
we can see that ra currently so the
 

2811
00:54:16,720 --> 00:54:19,430
we can see that ra currently so the
return address currently points to demo2

2812
00:54:19,430 --> 00:54:19,440
return address currently points to demo2
 

2813
00:54:19,440 --> 00:54:22,470
return address currently points to demo2
the plus 18 so

2814
00:54:22,470 --> 00:54:22,480
the plus 18 so
 

2815
00:54:22,480 --> 00:54:24,230
the plus 18 so
it points effectively into the function

2816
00:54:24,230 --> 00:54:24,240
it points effectively into the function
 

2817
00:54:24,240 --> 00:54:26,150
it points effectively into the function
demo2

2818
00:54:26,150 --> 00:54:26,160
demo2
 

2819
00:54:26,160 --> 00:54:29,670
demo2
and now we can run um we can just kind

2820
00:54:29,670 --> 00:54:29,680
and now we can run um we can just kind
 

2821
00:54:29,680 --> 00:54:31,430
and now we can run um we can just kind
of step through our function and see

2822
00:54:31,430 --> 00:54:31,440
of step through our function and see
 

2823
00:54:31,440 --> 00:54:35,750
of step through our function and see
what happens so we've called sum2

2824
00:54:35,750 --> 00:54:35,760
what happens so we've called sum2
 

2825
00:54:35,760 --> 00:54:37,349
what happens so we've called sum2
and immediately we can see that the

2826
00:54:37,349 --> 00:54:37,359
and immediately we can see that the
 

2827
00:54:37,359 --> 00:54:39,270
and immediately we can see that the
return address was

2828
00:54:39,270 --> 00:54:39,280
return address was
 

2829
00:54:39,280 --> 00:54:41,990
return address was
overwritten by sum 2 to now point to sum

2830
00:54:41,990 --> 00:54:42,000
overwritten by sum 2 to now point to sum
 

2831
00:54:42,000 --> 00:54:43,349
overwritten by sum 2 to now point to sum
then double plus 4

2832
00:54:43,349 --> 00:54:43,359
then double plus 4
 

2833
00:54:43,359 --> 00:54:44,630
then double plus 4
which makes sense you know that's what

2834
00:54:44,630 --> 00:54:44,640
which makes sense you know that's what
 

2835
00:54:44,640 --> 00:54:46,950
which makes sense you know that's what
we'd expect if we go back into our code

2836
00:54:46,950 --> 00:54:46,960
we'd expect if we go back into our code
 

2837
00:54:46,960 --> 00:54:48,309
we'd expect if we go back into our code
we call sum 2

2838
00:54:48,309 --> 00:54:48,319
we call sum 2
 

2839
00:54:48,319 --> 00:54:52,710
we call sum 2
and so sum2 should return to uh to here

2840
00:54:52,710 --> 00:54:52,720
and so sum2 should return to uh to here
 

2841
00:54:52,720 --> 00:54:54,660
and so sum2 should return to uh to here
and now we can step through

2842
00:54:54,660 --> 00:54:54,670
and now we can step through
 

2843
00:54:54,670 --> 00:54:55,910
and now we can step through
[Music]

2844
00:54:55,910 --> 00:54:55,920
[Music]
 

2845
00:54:55,920 --> 00:54:59,270
[Music]
you know so on up and uh

2846
00:54:59,270 --> 00:54:59,280
you know so on up and uh
 

2847
00:54:59,280 --> 00:55:05,349
you know so on up and uh
then we get back into

2848
00:55:05,349 --> 00:55:05,359

 

2849
00:55:05,359 --> 00:55:14,470

whoops the wrong s

2850
00:55:14,470 --> 00:55:14,480

 

2851
00:55:14,480 --> 00:55:16,390

okay so now we're here and now when sum

2852
00:55:16,390 --> 00:55:16,400
okay so now we're here and now when sum
 

2853
00:55:16,400 --> 00:55:17,990
okay so now we're here and now when sum
then double returns

2854
00:55:17,990 --> 00:55:18,000
then double returns
 

2855
00:55:18,000 --> 00:55:21,109
then double returns
as exactly as amir pointed out um its

2856
00:55:21,109 --> 00:55:21,119
as exactly as amir pointed out um its
 

2857
00:55:21,119 --> 00:55:23,030
as exactly as amir pointed out um its
return it has not restored its own

2858
00:55:23,030 --> 00:55:23,040
return it has not restored its own
 

2859
00:55:23,040 --> 00:55:24,230
return it has not restored its own
return address

2860
00:55:24,230 --> 00:55:24,240
return address
 

2861
00:55:24,240 --> 00:55:26,069
return address
and instead its return address is still

2862
00:55:26,069 --> 00:55:26,079
and instead its return address is still
 

2863
00:55:26,079 --> 00:55:27,990
and instead its return address is still
the one that was used by

2864
00:55:27,990 --> 00:55:28,000
the one that was used by
 

2865
00:55:28,000 --> 00:55:31,750
the one that was used by
um sum two and so we will

2866
00:55:31,750 --> 00:55:31,760
um sum two and so we will
 

2867
00:55:31,760 --> 00:55:34,870
um sum two and so we will
get into an infinite loop where we just

2868
00:55:34,870 --> 00:55:34,880
get into an infinite loop where we just
 

2869
00:55:34,880 --> 00:55:37,270
get into an infinite loop where we just
keep doing this over and over and over

2870
00:55:37,270 --> 00:55:37,280
keep doing this over and over and over
 

2871
00:55:37,280 --> 00:55:39,829
keep doing this over and over and over
again and we'll never terminate from it

2872
00:55:39,829 --> 00:55:39,839
again and we'll never terminate from it
 

2873
00:55:39,839 --> 00:55:42,069
again and we'll never terminate from it
and so this is a i think this is a good

2874
00:55:42,069 --> 00:55:42,079
and so this is a i think this is a good
 

2875
00:55:42,079 --> 00:55:43,990
and so this is a i think this is a good
illustration of why it's important to

2876
00:55:43,990 --> 00:55:44,000
illustration of why it's important to
 

2877
00:55:44,000 --> 00:55:46,230
illustration of why it's important to
keep track of our caller versus callee

2878
00:55:46,230 --> 00:55:46,240
keep track of our caller versus callee
 

2879
00:55:46,240 --> 00:55:47,750
keep track of our caller versus callee
saved registers

2880
00:55:47,750 --> 00:55:47,760
saved registers
 

2881
00:55:47,760 --> 00:55:49,190
saved registers
and hopefully this also shows that you

2882
00:55:49,190 --> 00:55:49,200
and hopefully this also shows that you
 

2883
00:55:49,200 --> 00:55:51,750
and hopefully this also shows that you
can use kind of gdb to

2884
00:55:51,750 --> 00:55:51,760
can use kind of gdb to
 

2885
00:55:51,760 --> 00:55:54,710
can use kind of gdb to
debug these sorts of these sorts of

2886
00:55:54,710 --> 00:55:54,720
debug these sorts of these sorts of
 

2887
00:55:54,720 --> 00:55:55,910
debug these sorts of these sorts of
problems so let's

2888
00:55:55,910 --> 00:55:55,920
problems so let's
 

2889
00:55:55,920 --> 00:55:59,030
problems so let's
restore what we had and we'll go

2890
00:55:59,030 --> 00:55:59,040
restore what we had and we'll go
 

2891
00:55:59,040 --> 00:56:04,230
restore what we had and we'll go
into some other demos to talk about

2892
00:56:04,230 --> 00:56:04,240
into some other demos to talk about
 

2893
00:56:04,240 --> 00:56:07,270
into some other demos to talk about
to illustrate uh somebody asked why are

2894
00:56:07,270 --> 00:56:07,280
to illustrate uh somebody asked why are
 

2895
00:56:07,280 --> 00:56:08,870
to illustrate uh somebody asked why are
we subtracting 16

2896
00:56:08,870 --> 00:56:08,880
we subtracting 16
 

2897
00:56:08,880 --> 00:56:11,270
we subtracting 16
that's to put space to get our stack

2898
00:56:11,270 --> 00:56:11,280
that's to put space to get our stack
 

2899
00:56:11,280 --> 00:56:12,069
that's to put space to get our stack
frame

2900
00:56:12,069 --> 00:56:12,079
frame
 

2901
00:56:12,079 --> 00:56:15,349
frame
so this is subtracting 16 from the stack

2902
00:56:15,349 --> 00:56:15,359
so this is subtracting 16 from the stack
 

2903
00:56:15,359 --> 00:56:17,349
so this is subtracting 16 from the stack
pointer so it's moving it down basically

2904
00:56:17,349 --> 00:56:17,359
pointer so it's moving it down basically
 

2905
00:56:17,359 --> 00:56:18,470
pointer so it's moving it down basically
in memory

2906
00:56:18,470 --> 00:56:18,480
in memory
 

2907
00:56:18,480 --> 00:56:21,109
in memory
um moving it down so that we now have

2908
00:56:21,109 --> 00:56:21,119
um moving it down so that we now have
 

2909
00:56:21,119 --> 00:56:22,710
um moving it down so that we now have
space for our own stack frame and then

2910
00:56:22,710 --> 00:56:22,720
space for our own stack frame and then
 

2911
00:56:22,720 --> 00:56:24,230
space for our own stack frame and then
we can stick stuff there

2912
00:56:24,230 --> 00:56:24,240
we can stick stuff there
 

2913
00:56:24,240 --> 00:56:27,030
we can stick stuff there
so because uh at this point in fact we

2914
00:56:27,030 --> 00:56:27,040
so because uh at this point in fact we
 

2915
00:56:27,040 --> 00:56:28,390
so because uh at this point in fact we
don't want to override what's at the

2916
00:56:28,390 --> 00:56:28,400
don't want to override what's at the
 

2917
00:56:28,400 --> 00:56:30,309
don't want to override what's at the
stack pointer uh

2918
00:56:30,309 --> 00:56:30,319
stack pointer uh
 

2919
00:56:30,319 --> 00:56:33,750
stack pointer uh
why not four is just um

2920
00:56:33,750 --> 00:56:33,760
why not four is just um
 

2921
00:56:33,760 --> 00:56:36,789
why not four is just um
well four

2922
00:56:36,789 --> 00:56:36,799

 

2923
00:56:36,799 --> 00:56:39,030

we need to do 16 because instructions

2924
00:56:39,030 --> 00:56:39,040
we need to do 16 because instructions
 

2925
00:56:39,040 --> 00:56:42,829
we need to do 16 because instructions
are 64.

2926
00:56:42,829 --> 00:56:42,839

 

2927
00:56:42,839 --> 00:56:45,510

uh yeah i guess i guess we wouldn't

2928
00:56:45,510 --> 00:56:45,520
uh yeah i guess i guess we wouldn't
 

2929
00:56:45,520 --> 00:56:48,789
uh yeah i guess i guess we wouldn't
don't actually need to do 16 but that's

2930
00:56:48,789 --> 00:56:48,799
don't actually need to do 16 but that's
 

2931
00:56:48,799 --> 00:56:51,030
don't actually need to do 16 but that's
generally what you'll see

2932
00:56:51,030 --> 00:56:51,040
generally what you'll see
 

2933
00:56:51,040 --> 00:56:52,950
generally what you'll see
um you'll generally just see i don't

2934
00:56:52,950 --> 00:56:52,960
um you'll generally just see i don't
 

2935
00:56:52,960 --> 00:56:54,390
um you'll generally just see i don't
think yeah

2936
00:56:54,390 --> 00:56:54,400
think yeah
 

2937
00:56:54,400 --> 00:56:56,470
think yeah
you you can't you can't do four because

2938
00:56:56,470 --> 00:56:56,480
you you can't you can't do four because
 

2939
00:56:56,480 --> 00:56:58,710
you you can't you can't do four because
uh you need eight so four doesn't work

2940
00:56:58,710 --> 00:56:58,720
uh you need eight so four doesn't work
 

2941
00:56:58,720 --> 00:56:59,589
uh you need eight so four doesn't work
but i think you can do

2942
00:56:59,589 --> 00:56:59,599
but i think you can do
 

2943
00:56:59,599 --> 00:57:03,190
but i think you can do
uh you need the instruction size

2944
00:57:03,190 --> 00:57:03,200
uh you need the instruction size
 

2945
00:57:03,200 --> 00:57:04,630
uh you need the instruction size
and the size of the register right so

2946
00:57:04,630 --> 00:57:04,640
and the size of the register right so
 

2947
00:57:04,640 --> 00:57:06,230
and the size of the register right so
registers are 64.

2948
00:57:06,230 --> 00:57:06,240
registers are 64.
 

2949
00:57:06,240 --> 00:57:08,069
registers are 64.
yeah and then so the convention why you

2950
00:57:08,069 --> 00:57:08,079
yeah and then so the convention why you
 

2951
00:57:08,079 --> 00:57:10,150
yeah and then so the convention why you
usually see 16 is because if we jump

2952
00:57:10,150 --> 00:57:10,160
usually see 16 is because if we jump
 

2953
00:57:10,160 --> 00:57:11,430
usually see 16 is because if we jump
back to our document

2954
00:57:11,430 --> 00:57:11,440
back to our document
 

2955
00:57:11,440 --> 00:57:13,349
back to our document
usually we have the return address and

2956
00:57:13,349 --> 00:57:13,359
usually we have the return address and
 

2957
00:57:13,359 --> 00:57:14,549
usually we have the return address and
the frame pointer

2958
00:57:14,549 --> 00:57:14,559
the frame pointer
 

2959
00:57:14,559 --> 00:57:17,349
the frame pointer
uh but we're not doing that here because

2960
00:57:17,349 --> 00:57:17,359
uh but we're not doing that here because
 

2961
00:57:17,359 --> 00:57:19,030
uh but we're not doing that here because
we're being uh

2962
00:57:19,030 --> 00:57:19,040
we're being uh
 

2963
00:57:19,040 --> 00:57:22,150
we're being uh
not super careful with our assembly

2964
00:57:22,150 --> 00:57:22,160
not super careful with our assembly
 

2965
00:57:22,160 --> 00:57:25,430
not super careful with our assembly
so normally if we if we look in

2966
00:57:25,430 --> 00:57:25,440
so normally if we if we look in
 

2967
00:57:25,440 --> 00:57:27,510
so normally if we if we look in
i'm sure if we look in kernel.asm we'll

2968
00:57:27,510 --> 00:57:27,520
i'm sure if we look in kernel.asm we'll
 

2969
00:57:27,520 --> 00:57:28,950
i'm sure if we look in kernel.asm we'll
see

2970
00:57:28,950 --> 00:57:28,960
see
 

2971
00:57:28,960 --> 00:57:31,990
see
yeah so if we look in kernel. we see

2972
00:57:31,990 --> 00:57:32,000
yeah so if we look in kernel. we see
 

2973
00:57:32,000 --> 00:57:33,670
yeah so if we look in kernel. we see
it's also you know 16 this is generally

2974
00:57:33,670 --> 00:57:33,680
it's also you know 16 this is generally
 

2975
00:57:33,680 --> 00:57:37,990
it's also you know 16 this is generally
what you'll see with the compiler

2976
00:57:37,990 --> 00:57:38,000

 

2977
00:57:38,000 --> 00:57:41,190

um okay so

2978
00:57:41,190 --> 00:57:41,200
um okay so
 

2979
00:57:41,200 --> 00:57:46,789
um okay so
now we can go back to this

2980
00:57:46,789 --> 00:57:46,799

 

2981
00:57:46,799 --> 00:57:49,270

fixed our function and now we can look

2982
00:57:49,270 --> 00:57:49,280
fixed our function and now we can look
 

2983
00:57:49,280 --> 00:57:52,829
fixed our function and now we can look
at some c

2984
00:57:52,829 --> 00:57:52,839

 

2985
00:57:52,839 --> 00:57:54,549

code

2986
00:57:54,549 --> 00:57:54,559
code
 

2987
00:57:54,559 --> 00:57:57,750
code
all right so here we have demo four

2988
00:57:57,750 --> 00:57:57,760
all right so here we have demo four
 

2989
00:57:57,760 --> 00:58:01,349
all right so here we have demo four
which is just basically um a copy of a

2990
00:58:01,349 --> 00:58:01,359
which is just basically um a copy of a
 

2991
00:58:01,359 --> 00:58:02,150
which is just basically um a copy of a
main function

2992
00:58:02,150 --> 00:58:02,160
main function
 

2993
00:58:02,160 --> 00:58:05,510
main function
like a imitation of the main function

2994
00:58:05,510 --> 00:58:05,520
like a imitation of the main function
 

2995
00:58:05,520 --> 00:58:08,950
like a imitation of the main function
so we have our args

2996
00:58:08,950 --> 00:58:08,960
so we have our args
 

2997
00:58:08,960 --> 00:58:11,670
so we have our args
which is an array of strings and we have

2998
00:58:11,670 --> 00:58:11,680
which is an array of strings and we have
 

2999
00:58:11,680 --> 00:58:13,430
which is an array of strings and we have
dummy main which takes

3000
00:58:13,430 --> 00:58:13,440
dummy main which takes
 

3001
00:58:13,440 --> 00:58:15,670
dummy main which takes
uh the number of arguments and the

3002
00:58:15,670 --> 00:58:15,680
uh the number of arguments and the
 

3003
00:58:15,680 --> 00:58:16,789
uh the number of arguments and the
arguments frame

3004
00:58:16,789 --> 00:58:16,799
arguments frame
 

3005
00:58:16,799 --> 00:58:20,069
arguments frame
and just prints it out um for us

3006
00:58:20,069 --> 00:58:20,079
and just prints it out um for us
 

3007
00:58:20,079 --> 00:58:21,670
and just prints it out um for us
and so that's all that's that's all

3008
00:58:21,670 --> 00:58:21,680
and so that's all that's that's all
 

3009
00:58:21,680 --> 00:58:23,190
and so that's all that's that's all
that's happening here it's pretty

3010
00:58:23,190 --> 00:58:23,200
that's happening here it's pretty
 

3011
00:58:23,200 --> 00:58:24,630
that's happening here it's pretty
straightforward

3012
00:58:24,630 --> 00:58:24,640
straightforward
 

3013
00:58:24,640 --> 00:58:27,910
straightforward
uh if we set a breakpoint in

3014
00:58:27,910 --> 00:58:27,920
uh if we set a breakpoint in
 

3015
00:58:27,920 --> 00:58:31,190
uh if we set a breakpoint in
dummy main

3016
00:58:31,190 --> 00:58:31,200

 

3017
00:58:31,200 --> 00:58:35,510

and we pop over let this

3018
00:58:35,510 --> 00:58:35,520
and we pop over let this
 

3019
00:58:35,520 --> 00:58:38,630
and we pop over let this
okay we let this continue and we we

3020
00:58:38,630 --> 00:58:38,640
okay we let this continue and we we
 

3021
00:58:38,640 --> 00:58:39,349
okay we let this continue and we we
start this

3022
00:58:39,349 --> 00:58:39,359
start this
 

3023
00:58:39,359 --> 00:58:42,069
start this
we run down four okay so we now we've

3024
00:58:42,069 --> 00:58:42,079
we run down four okay so we now we've
 

3025
00:58:42,079 --> 00:58:42,870
we run down four okay so we now we've
hit

3026
00:58:42,870 --> 00:58:42,880
hit
 

3027
00:58:42,880 --> 00:58:46,230
hit
um dummy main and there's a couple of uh

3028
00:58:46,230 --> 00:58:46,240
um dummy main and there's a couple of uh
 

3029
00:58:46,240 --> 00:58:51,430
um dummy main and there's a couple of uh
important things to uh remember about

3030
00:58:51,430 --> 00:58:51,440
important things to uh remember about
 

3031
00:58:51,440 --> 00:58:53,670
important things to uh remember about
uh that you can use gdp for regarding

3032
00:58:53,670 --> 00:58:53,680
uh that you can use gdp for regarding
 

3033
00:58:53,680 --> 00:58:54,549
uh that you can use gdp for regarding
stack frames

3034
00:58:54,549 --> 00:58:54,559
stack frames
 

3035
00:58:54,559 --> 00:58:58,230
stack frames
so if we type i so again that's info

3036
00:58:58,230 --> 00:58:58,240
so if we type i so again that's info
 

3037
00:58:58,240 --> 00:59:00,549
so if we type i so again that's info
if we type iframe we can see a whole

3038
00:59:00,549 --> 00:59:00,559
if we type iframe we can see a whole
 

3039
00:59:00,559 --> 00:59:01,510
if we type iframe we can see a whole
bunch of uh

3040
00:59:01,510 --> 00:59:01,520
bunch of uh
 

3041
00:59:01,520 --> 00:59:03,829
bunch of uh
useful information about the current

3042
00:59:03,829 --> 00:59:03,839
useful information about the current
 

3043
00:59:03,839 --> 00:59:04,789
useful information about the current
stack frame

3044
00:59:04,789 --> 00:59:04,799
stack frame
 

3045
00:59:04,799 --> 00:59:06,710
stack frame
so we can see we're at stack level zero

3046
00:59:06,710 --> 00:59:06,720
so we can see we're at stack level zero
 

3047
00:59:06,720 --> 00:59:08,069
so we can see we're at stack level zero
level zero means

3048
00:59:08,069 --> 00:59:08,079
level zero means
 

3049
00:59:08,079 --> 00:59:10,470
level zero means
it's uh earth is down in the call stack

3050
00:59:10,470 --> 00:59:10,480
it's uh earth is down in the call stack
 

3051
00:59:10,480 --> 00:59:11,990
it's uh earth is down in the call stack
that we can go

3052
00:59:11,990 --> 00:59:12,000
that we can go
 

3053
00:59:12,000 --> 00:59:15,589
that we can go
and the frame is at this address

3054
00:59:15,589 --> 00:59:15,599
and the frame is at this address
 

3055
00:59:15,599 --> 00:59:17,990
and the frame is at this address
the program counter which is okay that's

3056
00:59:17,990 --> 00:59:18,000
the program counter which is okay that's
 

3057
00:59:18,000 --> 00:59:19,190
the program counter which is okay that's
all well and good

3058
00:59:19,190 --> 00:59:19,200
all well and good
 

3059
00:59:19,200 --> 00:59:22,069
all well and good
we have a save program counter as well

3060
00:59:22,069 --> 00:59:22,079
we have a save program counter as well
 

3061
00:59:22,079 --> 00:59:22,710
we have a save program counter as well
and if we

3062
00:59:22,710 --> 00:59:22,720
and if we
 

3063
00:59:22,720 --> 00:59:25,349
and if we
again if we take this address and we

3064
00:59:25,349 --> 00:59:25,359
again if we take this address and we
 

3065
00:59:25,359 --> 00:59:25,990
again if we take this address and we
jump

3066
00:59:25,990 --> 00:59:26,000
jump
 

3067
00:59:26,000 --> 00:59:28,320
jump
into kernel.asm

3068
00:59:28,320 --> 00:59:28,330
into kernel.asm
 

3069
00:59:28,330 --> 00:59:29,670
into kernel.asm
[Music]

3070
00:59:29,670 --> 00:59:29,680
[Music]
 

3071
00:59:29,680 --> 00:59:31,990
[Music]
and we search for that address we can

3072
00:59:31,990 --> 00:59:32,000
and we search for that address we can
 

3073
00:59:32,000 --> 00:59:33,190
and we search for that address we can
indeed see

3074
00:59:33,190 --> 00:59:33,200
indeed see
 

3075
00:59:33,200 --> 00:59:38,390
indeed see
that that address is inside of

3076
00:59:38,390 --> 00:59:38,400
that that address is inside of
 

3077
00:59:38,400 --> 00:59:40,789
that that address is inside of
inside of demo form which is exactly

3078
00:59:40,789 --> 00:59:40,799
inside of demo form which is exactly
 

3079
00:59:40,799 --> 00:59:42,230
inside of demo form which is exactly
where we expect

3080
00:59:42,230 --> 00:59:42,240
where we expect
 

3081
00:59:42,240 --> 00:59:45,750
where we expect
the program to return to and it was

3082
00:59:45,750 --> 00:59:45,760
the program to return to and it was
 

3083
00:59:45,760 --> 00:59:48,630
the program to return to and it was
called by a frame at this address source

3084
00:59:48,630 --> 00:59:48,640
called by a frame at this address source
 

3085
00:59:48,640 --> 00:59:49,510
called by a frame at this address source
language c

3086
00:59:49,510 --> 00:59:49,520
language c
 

3087
00:59:49,520 --> 00:59:51,829
language c
you know that's that's nice to know and

3088
00:59:51,829 --> 00:59:51,839
you know that's that's nice to know and
 

3089
00:59:51,839 --> 00:59:53,670
you know that's that's nice to know and
then we have the argument list

3090
00:59:53,670 --> 00:59:53,680
then we have the argument list
 

3091
00:59:53,680 --> 00:59:57,030
then we have the argument list
also starts at this address of course

3092
00:59:57,030 --> 00:59:57,040
also starts at this address of course
 

3093
00:59:57,040 --> 00:59:59,109
also starts at this address of course
in this case we have most of our

3094
00:59:59,109 --> 00:59:59,119
in this case we have most of our
 

3095
00:59:59,119 --> 01:00:00,230
in this case we have most of our
arguments in

3096
01:00:00,230 --> 01:00:00,240
arguments in
 

3097
01:00:00,240 --> 01:00:03,109
arguments in
registers uh and then we can even see

3098
01:00:03,109 --> 01:00:03,119
registers uh and then we can even see
 

3099
01:00:03,119 --> 01:00:03,430
registers uh and then we can even see
what

3100
01:00:03,430 --> 01:00:03,440
what
 

3101
01:00:03,440 --> 01:00:06,870
what
args are we mean rxc is three

3102
01:00:06,870 --> 01:00:06,880
args are we mean rxc is three
 

3103
01:00:06,880 --> 01:00:10,390
args are we mean rxc is three
and rv is this address

3104
01:00:10,390 --> 01:00:10,400
and rv is this address
 

3105
01:00:10,400 --> 01:00:13,510
and rv is this address
and if we want to more in depth examine

3106
01:00:13,510 --> 01:00:13,520
and if we want to more in depth examine
 

3107
01:00:13,520 --> 01:00:15,670
and if we want to more in depth examine
things we can look at things like

3108
01:00:15,670 --> 01:00:15,680
things we can look at things like
 

3109
01:00:15,680 --> 01:00:19,109
things we can look at things like
info arcs which will tell us information

3110
01:00:19,109 --> 01:00:19,119
info arcs which will tell us information
 

3111
01:00:19,119 --> 01:00:21,349
info arcs which will tell us information
about the arguments of the function

3112
01:00:21,349 --> 01:00:21,359
about the arguments of the function
 

3113
01:00:21,359 --> 01:00:25,190
about the arguments of the function
we can look at but more importantly

3114
01:00:25,190 --> 01:00:25,200
we can look at but more importantly
 

3115
01:00:25,200 --> 01:00:28,549
we can look at but more importantly
we can type if we type back trace or bt

3116
01:00:28,549 --> 01:00:28,559
we can type if we type back trace or bt
 

3117
01:00:28,559 --> 01:00:30,069
we can type if we type back trace or bt
works as well

3118
01:00:30,069 --> 01:00:30,079
works as well
 

3119
01:00:30,079 --> 01:00:33,990
works as well
we get a full back trace of all of the

3120
01:00:33,990 --> 01:00:34,000
we get a full back trace of all of the
 

3121
01:00:34,000 --> 01:00:37,030
we get a full back trace of all of the
stacks uh the all of the stack frames

3122
01:00:37,030 --> 01:00:37,040
stacks uh the all of the stack frames
 

3123
01:00:37,040 --> 01:00:38,950
stacks uh the all of the stack frames
from the call stack so you can see you

3124
01:00:38,950 --> 01:00:38,960
from the call stack so you can see you
 

3125
01:00:38,960 --> 01:00:40,230
from the call stack so you can see you
know something questionable happened

3126
01:00:40,230 --> 01:00:40,240
know something questionable happened
 

3127
01:00:40,240 --> 01:00:41,990
know something questionable happened
here that's when we invoked a system

3128
01:00:41,990 --> 01:00:42,000
here that's when we invoked a system
 

3129
01:00:42,000 --> 01:00:44,870
here that's when we invoked a system
call um then we get to the user track

3130
01:00:44,870 --> 01:00:44,880
call um then we get to the user track
 

3131
01:00:44,880 --> 01:00:45,589
call um then we get to the user track
function

3132
01:00:45,589 --> 01:00:45,599
function
 

3133
01:00:45,599 --> 01:00:47,990
function
then to the syscall function then to

3134
01:00:47,990 --> 01:00:48,000
then to the syscall function then to
 

3135
01:00:48,000 --> 01:00:49,270
then to the syscall function then to
sysdemo

3136
01:00:49,270 --> 01:00:49,280
sysdemo
 

3137
01:00:49,280 --> 01:00:52,470
sysdemo
then to demo four and then finally to

3138
01:00:52,470 --> 01:00:52,480
then to demo four and then finally to
 

3139
01:00:52,480 --> 01:00:54,150
then to demo four and then finally to
dummy main

3140
01:00:54,150 --> 01:00:54,160
dummy main
 

3141
01:00:54,160 --> 01:00:56,069
dummy main
and if we want to investigate any of

3142
01:00:56,069 --> 01:00:56,079
and if we want to investigate any of
 

3143
01:00:56,079 --> 01:00:57,349
and if we want to investigate any of
these stack frames

3144
01:00:57,349 --> 01:00:57,359
these stack frames
 

3145
01:00:57,359 --> 01:01:00,230
these stack frames
more in depth we can do frame and then

3146
01:01:00,230 --> 01:01:00,240
more in depth we can do frame and then
 

3147
01:01:00,240 --> 01:01:01,589
more in depth we can do frame and then
whatever number

3148
01:01:01,589 --> 01:01:01,599
whatever number
 

3149
01:01:01,599 --> 01:01:03,750
whatever number
uh is along the side here so let's say i

3150
01:01:03,750 --> 01:01:03,760
uh is along the side here so let's say i
 

3151
01:01:03,760 --> 01:01:05,829
uh is along the side here so let's say i
want to look at what was my stack frame

3152
01:01:05,829 --> 01:01:05,839
want to look at what was my stack frame
 

3153
01:01:05,839 --> 01:01:07,670
want to look at what was my stack frame
when six calls are called i can go to

3154
01:01:07,670 --> 01:01:07,680
when six calls are called i can go to
 

3155
01:01:07,680 --> 01:01:09,990
when six calls are called i can go to
frame three and so now i'm

3156
01:01:09,990 --> 01:01:10,000
frame three and so now i'm
 

3157
01:01:10,000 --> 01:01:11,910
frame three and so now i'm
inside of gdb i'm looking at that stack

3158
01:01:11,910 --> 01:01:11,920
inside of gdb i'm looking at that stack
 

3159
01:01:11,920 --> 01:01:13,829
inside of gdb i'm looking at that stack
frame so if i type info frame

3160
01:01:13,829 --> 01:01:13,839
frame so if i type info frame
 

3161
01:01:13,839 --> 01:01:16,549
frame so if i type info frame
i can get this and here we get a lot

3162
01:01:16,549 --> 01:01:16,559
i can get this and here we get a lot
 

3163
01:01:16,559 --> 01:01:17,109
i can get this and here we get a lot
more

3164
01:01:17,109 --> 01:01:17,119
more
 

3165
01:01:17,119 --> 01:01:19,109
more
a lot more information we have a bunch

3166
01:01:19,109 --> 01:01:19,119
a lot more information we have a bunch
 

3167
01:01:19,119 --> 01:01:22,390
a lot more information we have a bunch
of saved registers

3168
01:01:22,390 --> 01:01:22,400
of saved registers
 

3169
01:01:22,400 --> 01:01:25,270
of saved registers
we have some local variables we don't

3170
01:01:25,270 --> 01:01:25,280
we have some local variables we don't
 

3171
01:01:25,280 --> 01:01:27,510
we have some local variables we don't
have any arguments to this function

3172
01:01:27,510 --> 01:01:27,520
have any arguments to this function
 

3173
01:01:27,520 --> 01:01:29,270
have any arguments to this function
we can see where the program counter

3174
01:01:29,270 --> 01:01:29,280
we can see where the program counter
 

3175
01:01:29,280 --> 01:01:31,190
we can see where the program counter
where we're supposed to jump back to

3176
01:01:31,190 --> 01:01:31,200
where we're supposed to jump back to
 

3177
01:01:31,200 --> 01:01:32,950
where we're supposed to jump back to
um all kinds of things like that so this

3178
01:01:32,950 --> 01:01:32,960
um all kinds of things like that so this
 

3179
01:01:32,960 --> 01:01:34,630
um all kinds of things like that so this
is super super useful for

3180
01:01:34,630 --> 01:01:34,640
is super super useful for
 

3181
01:01:34,640 --> 01:01:36,150
is super super useful for
if you're debugging things and in fact

3182
01:01:36,150 --> 01:01:36,160
if you're debugging things and in fact
 

3183
01:01:36,160 --> 01:01:38,549
if you're debugging things and in fact
it's so useful we make you implement

3184
01:01:38,549 --> 01:01:38,559
it's so useful we make you implement
 

3185
01:01:38,559 --> 01:01:41,589
it's so useful we make you implement
um your own version not nowhere near and

3186
01:01:41,589 --> 01:01:41,599
um your own version not nowhere near and
 

3187
01:01:41,599 --> 01:01:41,829
um your own version not nowhere near and
as

3188
01:01:41,829 --> 01:01:41,839
as
 

3189
01:01:41,839 --> 01:01:44,950
as
in depth as what udb tells you but we're

3190
01:01:44,950 --> 01:01:44,960
in depth as what udb tells you but we're
 

3191
01:01:44,960 --> 01:01:46,710
in depth as what udb tells you but we're
one of the exercises on the next lab

3192
01:01:46,710 --> 01:01:46,720
one of the exercises on the next lab
 

3193
01:01:46,720 --> 01:01:48,630
one of the exercises on the next lab
will be to implement your own

3194
01:01:48,630 --> 01:01:48,640
will be to implement your own
 

3195
01:01:48,640 --> 01:01:51,190
will be to implement your own
backtrace helper function for use when

3196
01:01:51,190 --> 01:01:51,200
backtrace helper function for use when
 

3197
01:01:51,200 --> 01:01:53,990
backtrace helper function for use when
debugging things inside the lab

3198
01:01:53,990 --> 01:01:54,000
debugging things inside the lab
 

3199
01:01:54,000 --> 01:01:56,069
debugging things inside the lab
and so back back traces uh is quite

3200
01:01:56,069 --> 01:01:56,079
and so back back traces uh is quite
 

3201
01:01:56,079 --> 01:01:58,309
and so back back traces uh is quite
useful and then if we type frame 0 or we

3202
01:01:58,309 --> 01:01:58,319
useful and then if we type frame 0 or we
 

3203
01:01:58,319 --> 01:01:59,349
useful and then if we type frame 0 or we
go back to

3204
01:01:59,349 --> 01:01:59,359
go back to
 

3205
01:01:59,359 --> 01:02:02,870
go back to
where we were supposed to be

3206
01:02:02,870 --> 01:02:02,880
where we were supposed to be
 

3207
01:02:02,880 --> 01:02:04,710
where we were supposed to be
and if we want to investigate you

3208
01:02:04,710 --> 01:02:04,720
and if we want to investigate you
 

3209
01:02:04,720 --> 01:02:06,710
and if we want to investigate you
probably noticed it's not super helpful

3210
01:02:06,710 --> 01:02:06,720
probably noticed it's not super helpful
 

3211
01:02:06,720 --> 01:02:09,270
probably noticed it's not super helpful
you know rv is a string

3212
01:02:09,270 --> 01:02:09,280
you know rv is a string
 

3213
01:02:09,280 --> 01:02:11,029
you know rv is a string
as an array of strings and so we just

3214
01:02:11,029 --> 01:02:11,039
as an array of strings and so we just
 

3215
01:02:11,039 --> 01:02:12,789
as an array of strings and so we just
get a ref we just get a

3216
01:02:12,789 --> 01:02:12,799
get a ref we just get a
 

3217
01:02:12,799 --> 01:02:15,029
get a ref we just get a
an address for where that's actually

3218
01:02:15,029 --> 01:02:15,039
an address for where that's actually
 

3219
01:02:15,039 --> 01:02:15,910
an address for where that's actually
stored

3220
01:02:15,910 --> 01:02:15,920
stored
 

3221
01:02:15,920 --> 01:02:17,349
stored
and if we want to look at what's in

3222
01:02:17,349 --> 01:02:17,359
and if we want to look at what's in
 

3223
01:02:17,359 --> 01:02:18,549
and if we want to look at what's in
there there's a couple ways of doing

3224
01:02:18,549 --> 01:02:18,559
there there's a couple ways of doing
 

3225
01:02:18,559 --> 01:02:19,190
there there's a couple ways of doing
this

3226
01:02:19,190 --> 01:02:19,200
this
 

3227
01:02:19,200 --> 01:02:22,710
this
uh the easiest is uh if we type print p

3228
01:02:22,710 --> 01:02:22,720
uh the easiest is uh if we type print p
 

3229
01:02:22,720 --> 01:02:26,150
uh the easiest is uh if we type print p
is for print and then if we d

3230
01:02:26,150 --> 01:02:26,160
is for print and then if we d
 

3231
01:02:26,160 --> 01:02:28,470
is for print and then if we d
uh dereference the address so we go look

3232
01:02:28,470 --> 01:02:28,480
uh dereference the address so we go look
 

3233
01:02:28,480 --> 01:02:29,270
uh dereference the address so we go look
at what's at the

3234
01:02:29,270 --> 01:02:29,280
at what's at the
 

3235
01:02:29,280 --> 01:02:32,309
at what's at the
address we can do that and

3236
01:02:32,309 --> 01:02:32,319
address we can do that and
 

3237
01:02:32,319 --> 01:02:35,109
address we can do that and
you know as you would expect we get the

3238
01:02:35,109 --> 01:02:35,119
you know as you would expect we get the
 

3239
01:02:35,119 --> 01:02:37,510
you know as you would expect we get the
first element of that array because

3240
01:02:37,510 --> 01:02:37,520
first element of that array because
 

3241
01:02:37,520 --> 01:02:39,750
first element of that array because
when it tries to print a string it'll go

3242
01:02:39,750 --> 01:02:39,760
when it tries to print a string it'll go
 

3243
01:02:39,760 --> 01:02:41,430
when it tries to print a string it'll go
you know as c says it'll go in until it

3244
01:02:41,430 --> 01:02:41,440
you know as c says it'll go in until it
 

3245
01:02:41,440 --> 01:02:43,029
you know as c says it'll go in until it
hits the null character

3246
01:02:43,029 --> 01:02:43,039
hits the null character
 

3247
01:02:43,039 --> 01:02:44,710
hits the null character
so we get foo which is the first element

3248
01:02:44,710 --> 01:02:44,720
so we get foo which is the first element
 

3249
01:02:44,720 --> 01:02:46,150
so we get foo which is the first element
that array and if we want to get more

3250
01:02:46,150 --> 01:02:46,160
that array and if we want to get more
 

3251
01:02:46,160 --> 01:02:47,029
that array and if we want to get more
things

3252
01:02:47,029 --> 01:02:47,039
things
 

3253
01:02:47,039 --> 01:02:50,390
things
we can put in the length so if we do

3254
01:02:50,390 --> 01:02:50,400
we can put in the length so if we do
 

3255
01:02:50,400 --> 01:02:51,670
we can put in the length so if we do
and then a number it'll go up to a

3256
01:02:51,670 --> 01:02:51,680
and then a number it'll go up to a
 

3257
01:02:51,680 --> 01:02:53,829
and then a number it'll go up to a
certain index so then we can see

3258
01:02:53,829 --> 01:02:53,839
certain index so then we can see
 

3259
01:02:53,839 --> 01:02:57,109
certain index so then we can see
both of the strings here and

3260
01:02:57,109 --> 01:02:57,119
both of the strings here and
 

3261
01:02:57,119 --> 01:02:59,510
both of the strings here and
you know again gdb is quite smart so we

3262
01:02:59,510 --> 01:02:59,520
you know again gdb is quite smart so we
 

3263
01:02:59,520 --> 01:03:01,349
you know again gdb is quite smart so we
can even

3264
01:03:01,349 --> 01:03:01,359
can even
 

3265
01:03:01,359 --> 01:03:03,829
can even
use rxe to print out the whole argument

3266
01:03:03,829 --> 01:03:03,839
use rxe to print out the whole argument
 

3267
01:03:03,839 --> 01:03:05,510
use rxe to print out the whole argument
array

3268
01:03:05,510 --> 01:03:05,520
array
 

3269
01:03:05,520 --> 01:03:07,750
array
and so all of that information is

3270
01:03:07,750 --> 01:03:07,760
and so all of that information is
 

3271
01:03:07,760 --> 01:03:10,390
and so all of that information is
available to you

3272
01:03:10,390 --> 01:03:10,400
available to you
 

3273
01:03:10,400 --> 01:03:12,710
available to you
however you you want to get it so gdp is

3274
01:03:12,710 --> 01:03:12,720
however you you want to get it so gdp is
 

3275
01:03:12,720 --> 01:03:14,789
however you you want to get it so gdp is
a super powerful tool

3276
01:03:14,789 --> 01:03:14,799
a super powerful tool
 

3277
01:03:14,799 --> 01:03:17,190
a super powerful tool
why does gdb or sorry why does the

3278
01:03:17,190 --> 01:03:17,200
why does gdb or sorry why does the
 

3279
01:03:17,200 --> 01:03:18,309
why does gdb or sorry why does the
compiler sometimes

3280
01:03:18,309 --> 01:03:18,319
compiler sometimes
 

3281
01:03:18,319 --> 01:03:21,430
compiler sometimes
optimize out rg c

3282
01:03:21,430 --> 01:03:21,440
optimize out rg c
 

3283
01:03:21,440 --> 01:03:24,309
optimize out rg c
and rgb that has happened to be before

3284
01:03:24,309 --> 01:03:24,319
and rgb that has happened to be before
 

3285
01:03:24,319 --> 01:03:25,670
and rgb that has happened to be before
yeah uh that just means that the

3286
01:03:25,670 --> 01:03:25,680
yeah uh that just means that the
 

3287
01:03:25,680 --> 01:03:28,150
yeah uh that just means that the
compiler found a more efficient way

3288
01:03:28,150 --> 01:03:28,160
compiler found a more efficient way
 

3289
01:03:28,160 --> 01:03:29,589
compiler found a more efficient way
likely it just got rid of the variable

3290
01:03:29,589 --> 01:03:29,599
likely it just got rid of the variable
 

3291
01:03:29,599 --> 01:03:31,829
likely it just got rid of the variable
and it's doing all of its operations

3292
01:03:31,829 --> 01:03:31,839
and it's doing all of its operations
 

3293
01:03:31,839 --> 01:03:34,470
and it's doing all of its operations
um directly you know via regis it might

3294
01:03:34,470 --> 01:03:34,480
um directly you know via regis it might
 

3295
01:03:34,480 --> 01:03:36,630
um directly you know via regis it might
be doing all of its operations on a0 for

3296
01:03:36,630 --> 01:03:36,640
be doing all of its operations on a0 for
 

3297
01:03:36,640 --> 01:03:37,829
be doing all of its operations on a0 for
example

3298
01:03:37,829 --> 01:03:37,839
example
 

3299
01:03:37,839 --> 01:03:39,029
example
it might just be doing all of its

3300
01:03:39,029 --> 01:03:39,039
it might just be doing all of its
 

3301
01:03:39,039 --> 01:03:41,029
it might just be doing all of its
computations on the return address

3302
01:03:41,029 --> 01:03:41,039
computations on the return address
 

3303
01:03:41,039 --> 01:03:42,630
computations on the return address
it's pretty common to see something like

3304
01:03:42,630 --> 01:03:42,640
it's pretty common to see something like
 

3305
01:03:42,640 --> 01:03:44,549
it's pretty common to see something like
that if you um

3306
01:03:44,549 --> 01:03:44,559
that if you um
 

3307
01:03:44,559 --> 01:03:46,309
that if you um
if it's a variable that's not you know

3308
01:03:46,309 --> 01:03:46,319
if it's a variable that's not you know
 

3309
01:03:46,319 --> 01:03:47,589
if it's a variable that's not you know
100

3310
01:03:47,589 --> 01:03:47,599
100
 

3311
01:03:47,599 --> 01:03:50,309
100
necessary uh if you you know we don't

3312
01:03:50,309 --> 01:03:50,319
necessary uh if you you know we don't
 

3313
01:03:50,319 --> 01:03:50,710
necessary uh if you you know we don't
let

3314
01:03:50,710 --> 01:03:50,720
let
 

3315
01:03:50,720 --> 01:03:51,910
let
we don't give you control over the

3316
01:03:51,910 --> 01:03:51,920
we don't give you control over the
 

3317
01:03:51,920 --> 01:03:53,430
we don't give you control over the
compiler but if you ever find that in

3318
01:03:53,430 --> 01:03:53,440
compiler but if you ever find that in
 

3319
01:03:53,440 --> 01:03:54,470
compiler but if you ever find that in
your day-to-day

3320
01:03:54,470 --> 01:03:54,480
your day-to-day
 

3321
01:03:54,480 --> 01:03:57,029
your day-to-day
you can try setting the optimization

3322
01:03:57,029 --> 01:03:57,039
you can try setting the optimization
 

3323
01:03:57,039 --> 01:03:59,589
you can try setting the optimization
flag for the compiler to zero

3324
01:03:59,589 --> 01:03:59,599
flag for the compiler to zero
 

3325
01:03:59,599 --> 01:04:01,910
flag for the compiler to zero
um but even then you know the compiler

3326
01:04:01,910 --> 01:04:01,920
um but even then you know the compiler
 

3327
01:04:01,920 --> 01:04:03,829
um but even then you know the compiler
will do we'll do its we'll do some level

3328
01:04:03,829 --> 01:04:03,839
will do we'll do its we'll do some level
 

3329
01:04:03,839 --> 01:04:05,510
will do we'll do its we'll do some level
of optimization

3330
01:04:05,510 --> 01:04:05,520
of optimization
 

3331
01:04:05,520 --> 01:04:08,789
of optimization
uh your hand is raised yeah

3332
01:04:08,789 --> 01:04:08,799
uh your hand is raised yeah
 

3333
01:04:08,799 --> 01:04:12,150
uh your hand is raised yeah
um what's the address besides

3334
01:04:12,150 --> 01:04:12,160
um what's the address besides
 

3335
01:04:12,160 --> 01:04:14,309
um what's the address besides
that dollar one or dollar two you know

3336
01:04:14,309 --> 01:04:14,319
that dollar one or dollar two you know
 

3337
01:04:14,319 --> 01:04:15,750
that dollar one or dollar two you know
like before foo

3338
01:04:15,750 --> 01:04:15,760
like before foo
 

3339
01:04:15,760 --> 01:04:18,950
like before foo
or bar uh dollar this

3340
01:04:18,950 --> 01:04:18,960
or bar uh dollar this
 

3341
01:04:18,960 --> 01:04:21,349
or bar uh dollar this
yeah so what's that address is that the

3342
01:04:21,349 --> 01:04:21,359
yeah so what's that address is that the
 

3343
01:04:21,359 --> 01:04:22,309
yeah so what's that address is that the
address where

3344
01:04:22,309 --> 01:04:22,319
address where
 

3345
01:04:22,319 --> 01:04:26,069
address where
foo is probably yeah

3346
01:04:26,069 --> 01:04:26,079
foo is probably yeah
 

3347
01:04:26,079 --> 01:04:28,309
foo is probably yeah
but but then rv points to some other

3348
01:04:28,309 --> 01:04:28,319
but but then rv points to some other
 

3349
01:04:28,319 --> 01:04:30,789
but but then rv points to some other
address shouldn't those be the same

3350
01:04:30,789 --> 01:04:30,799
address shouldn't those be the same
 

3351
01:04:30,799 --> 01:04:35,109
address shouldn't those be the same
uh so our rv is on the stack

3352
01:04:35,109 --> 01:04:35,119
uh so our rv is on the stack
 

3353
01:04:35,119 --> 01:04:38,230
uh so our rv is on the stack
and it'll so the reason why

3354
01:04:38,230 --> 01:04:38,240
and it'll so the reason why
 

3355
01:04:38,240 --> 01:04:39,910
and it'll so the reason why
you know if you look at these addresses

3356
01:04:39,910 --> 01:04:39,920
you know if you look at these addresses
 

3357
01:04:39,920 --> 01:04:41,670
you know if you look at these addresses
we can see that they're in the kernel

3358
01:04:41,670 --> 01:04:41,680
we can see that they're in the kernel
 

3359
01:04:41,680 --> 01:04:44,710
we can see that they're in the kernel
uh just by the eight zero zero zero

3360
01:04:44,710 --> 01:04:44,720
uh just by the eight zero zero zero
 

3361
01:04:44,720 --> 01:04:47,510
uh just by the eight zero zero zero
um which makes sense because we they're

3362
01:04:47,510 --> 01:04:47,520
um which makes sense because we they're
 

3363
01:04:47,520 --> 01:04:49,910
um which makes sense because we they're
declared statically right so in demos if

3364
01:04:49,910 --> 01:04:49,920
declared statically right so in demos if
 

3365
01:04:49,920 --> 01:04:51,910
declared statically right so in demos if
i go here they're declared here

3366
01:04:51,910 --> 01:04:51,920
i go here they're declared here
 

3367
01:04:51,920 --> 01:04:53,270
i go here they're declared here
and so they're basically they're sitting

3368
01:04:53,270 --> 01:04:53,280
and so they're basically they're sitting
 

3369
01:04:53,280 --> 01:04:55,270
and so they're basically they're sitting
somewhere in the kernel and they're all

3370
01:04:55,270 --> 01:04:55,280
somewhere in the kernel and they're all
 

3371
01:04:55,280 --> 01:04:56,069
somewhere in the kernel and they're all
car stars

3372
01:04:56,069 --> 01:04:56,079
car stars
 

3373
01:04:56,079 --> 01:04:59,990
car stars
args arcs or rv is an array of car stars

3374
01:04:59,990 --> 01:05:00,000
args arcs or rv is an array of car stars
 

3375
01:05:00,000 --> 01:05:02,230
args arcs or rv is an array of car stars
and so i imagine that each element

3376
01:05:02,230 --> 01:05:02,240
and so i imagine that each element
 

3377
01:05:02,240 --> 01:05:05,750
and so i imagine that each element
points to points to

3378
01:05:05,750 --> 01:05:05,760
points to points to
 

3379
01:05:05,760 --> 01:05:08,230
points to points to
its own string right so it's an array of

3380
01:05:08,230 --> 01:05:08,240
its own string right so it's an array of
 

3381
01:05:08,240 --> 01:05:20,829
its own string right so it's an array of
pointers

3382
01:05:20,829 --> 01:05:20,839

 

3383
01:05:20,839 --> 01:05:24,630

crazy

3384
01:05:24,630 --> 01:05:24,640

 

3385
01:05:24,640 --> 01:05:27,349

i also have a question about this uh the

3386
01:05:27,349 --> 01:05:27,359
i also have a question about this uh the
 

3387
01:05:27,359 --> 01:05:29,270
i also have a question about this uh the
dollar three version of

3388
01:05:29,270 --> 01:05:29,280
dollar three version of
 

3389
01:05:29,280 --> 01:05:32,470
dollar three version of
the array has if i look

3390
01:05:32,470 --> 01:05:32,480
the array has if i look
 

3391
01:05:32,480 --> 01:05:35,270
the array has if i look
at these addresses the first one is

3392
01:05:35,270 --> 01:05:35,280
at these addresses the first one is
 

3393
01:05:35,280 --> 01:05:35,990
at these addresses the first one is
suffixed by

3394
01:05:35,990 --> 01:05:36,000
suffixed by
 

3395
01:05:36,000 --> 01:05:39,589
suffixed by
38. second one is suffixed by 40.

3396
01:05:39,589 --> 01:05:39,599
38. second one is suffixed by 40.
 

3397
01:05:39,599 --> 01:05:43,190
38. second one is suffixed by 40.
the third one is 48 which is

3398
01:05:43,190 --> 01:05:43,200
the third one is 48 which is
 

3399
01:05:43,200 --> 01:05:45,510
the third one is 48 which is
not uniform even though the length of

3400
01:05:45,510 --> 01:05:45,520
not uniform even though the length of
 

3401
01:05:45,520 --> 01:05:47,990
not uniform even though the length of
each of the three arguments

3402
01:05:47,990 --> 01:05:48,000
each of the three arguments
 

3403
01:05:48,000 --> 01:05:51,109
each of the three arguments
is three so why why are they different

3404
01:05:51,109 --> 01:05:51,119
is three so why why are they different
 

3405
01:05:51,119 --> 01:05:54,470
is three so why why are they different
uh not in i'm not 100

3406
01:05:54,470 --> 01:05:54,480
uh not in i'm not 100
 

3407
01:05:54,480 --> 01:05:56,150
uh not in i'm not 100
certain my guess is that this is an

3408
01:05:56,150 --> 01:05:56,160
certain my guess is that this is an
 

3409
01:05:56,160 --> 01:05:58,710
certain my guess is that this is an
attempt to align things

3410
01:05:58,710 --> 01:05:58,720
attempt to align things
 

3411
01:05:58,720 --> 01:06:03,430
attempt to align things
um right so to get them on a reasonable

3412
01:06:03,430 --> 01:06:03,440
um right so to get them on a reasonable
 

3413
01:06:03,440 --> 01:06:06,069
um right so to get them on a reasonable
alignment and it is uniform in hex as

3414
01:06:06,069 --> 01:06:06,079
alignment and it is uniform in hex as
 

3415
01:06:06,079 --> 01:06:08,390
alignment and it is uniform in hex as
people are pointing out

3416
01:06:08,390 --> 01:06:08,400
people are pointing out
 

3417
01:06:08,400 --> 01:06:11,750
people are pointing out
oh right yeah yeah that makes sense

3418
01:06:11,750 --> 01:06:11,760
oh right yeah yeah that makes sense
 

3419
01:06:11,760 --> 01:06:14,870
oh right yeah yeah that makes sense
oh oh yes i see it now yeah right

3420
01:06:14,870 --> 01:06:14,880
oh oh yes i see it now yeah right
 

3421
01:06:14,880 --> 01:06:17,029
oh oh yes i see it now yeah right
thanks so you'll sometimes see where

3422
01:06:17,029 --> 01:06:17,039
thanks so you'll sometimes see where
 

3423
01:06:17,039 --> 01:06:18,150
thanks so you'll sometimes see where
straight things are

3424
01:06:18,150 --> 01:06:18,160
straight things are
 

3425
01:06:18,160 --> 01:06:20,309
straight things are
laid out strangely where there might be

3426
01:06:20,309 --> 01:06:20,319
laid out strangely where there might be
 

3427
01:06:20,319 --> 01:06:22,390
laid out strangely where there might be
two things at strange offsets and that's

3428
01:06:22,390 --> 01:06:22,400
two things at strange offsets and that's
 

3429
01:06:22,400 --> 01:06:22,710
two things at strange offsets and that's
just

3430
01:06:22,710 --> 01:06:22,720
just
 

3431
01:06:22,720 --> 01:06:24,789
just
because not everything is uh naturally

3432
01:06:24,789 --> 01:06:24,799
because not everything is uh naturally
 

3433
01:06:24,799 --> 01:06:26,309
because not everything is uh naturally
the same size

3434
01:06:26,309 --> 01:06:26,319
the same size
 

3435
01:06:26,319 --> 01:06:37,270
the same size
um okay any other questions

3436
01:06:37,270 --> 01:06:37,280

 

3437
01:06:37,280 --> 01:06:41,109

okay uh we can skip the fifth demo

3438
01:06:41,109 --> 01:06:41,119
okay uh we can skip the fifth demo
 

3439
01:06:41,119 --> 01:06:43,670
okay uh we can skip the fifth demo
and so another useful function that we

3440
01:06:43,670 --> 01:06:43,680
and so another useful function that we
 

3441
01:06:43,680 --> 01:06:44,150
and so another useful function that we
get

3442
01:06:44,150 --> 01:06:44,160
get
 

3443
01:06:44,160 --> 01:06:48,069
get
from gdb are

3444
01:06:48,069 --> 01:06:48,079

 

3445
01:06:48,079 --> 01:06:50,390

instead of just break points uh there

3446
01:06:50,390 --> 01:06:50,400
instead of just break points uh there
 

3447
01:06:50,400 --> 01:06:52,390
instead of just break points uh there
are also watch points and we can also

3448
01:06:52,390 --> 01:06:52,400
are also watch points and we can also
 

3449
01:06:52,400 --> 01:06:53,510
are also watch points and we can also
set

3450
01:06:53,510 --> 01:06:53,520
set
 

3451
01:06:53,520 --> 01:06:58,150
set
conditional break points so

3452
01:06:58,150 --> 01:06:58,160

 

3453
01:06:58,160 --> 01:07:02,069

i'll just briefly go over that

3454
01:07:02,069 --> 01:07:02,079

 

3455
01:07:02,079 --> 01:07:05,670

we run demo six so we can set

3456
01:07:05,670 --> 01:07:05,680
we run demo six so we can set
 

3457
01:07:05,680 --> 01:07:07,990
we run demo six so we can set
inside this function we can watch so we

3458
01:07:07,990 --> 01:07:08,000
inside this function we can watch so we
 

3459
01:07:08,000 --> 01:07:09,670
inside this function we can watch so we
can set a watch point

3460
01:07:09,670 --> 01:07:09,680
can set a watch point
 

3461
01:07:09,680 --> 01:07:15,589
can set a watch point
um i think here you'll see um

3462
01:07:15,589 --> 01:07:15,599
um i think here you'll see um
 

3463
01:07:15,599 --> 01:07:18,309
um i think here you'll see um
yeah so here you'll see what uh luca was

3464
01:07:18,309 --> 01:07:18,319
yeah so here you'll see what uh luca was
 

3465
01:07:18,319 --> 01:07:20,150
yeah so here you'll see what uh luca was
talking about where

3466
01:07:20,150 --> 01:07:20,160
talking about where
 

3467
01:07:20,160 --> 01:07:22,710
talking about where
we see that sum has been optimized out

3468
01:07:22,710 --> 01:07:22,720
we see that sum has been optimized out
 

3469
01:07:22,720 --> 01:07:24,470
we see that sum has been optimized out
likely because it's just being

3470
01:07:24,470 --> 01:07:24,480
likely because it's just being
 

3471
01:07:24,480 --> 01:07:27,589
likely because it's just being
put in a zero or something we can look

3472
01:07:27,589 --> 01:07:27,599
put in a zero or something we can look
 

3473
01:07:27,599 --> 01:07:29,349
put in a zero or something we can look
even at the assembly for this right so

3474
01:07:29,349 --> 01:07:29,359
even at the assembly for this right so
 

3475
01:07:29,359 --> 01:07:31,349
even at the assembly for this right so
we can do layout

3476
01:07:31,349 --> 01:07:31,359
we can do layout
 

3477
01:07:31,359 --> 01:07:34,549
we can do layout
splits and yeah indeed we can see that

3478
01:07:34,549 --> 01:07:34,559
splits and yeah indeed we can see that
 

3479
01:07:34,559 --> 01:07:36,390
splits and yeah indeed we can see that
it all just being uh

3480
01:07:36,390 --> 01:07:36,400
it all just being uh
 

3481
01:07:36,400 --> 01:07:37,910
it all just being uh
it's all just being done on the stack it

3482
01:07:37,910 --> 01:07:37,920
it's all just being done on the stack it
 

3483
01:07:37,920 --> 01:07:40,150
it's all just being done on the stack it
looks like to me

3484
01:07:40,150 --> 01:07:40,160
looks like to me
 

3485
01:07:40,160 --> 01:07:41,950
looks like to me
oh no it's all just being done in s0

3486
01:07:41,950 --> 01:07:41,960
oh no it's all just being done in s0
 

3487
01:07:41,960 --> 01:07:43,270
oh no it's all just being done in s0
s013

3488
01:07:43,270 --> 01:07:43,280
s013
 

3489
01:07:43,280 --> 01:07:46,950
s013
so here you can see that the the

3490
01:07:46,950 --> 01:07:46,960

 

3491
01:07:46,960 --> 01:07:48,789

compiler decided even to use the quality

3492
01:07:48,789 --> 01:07:48,799
compiler decided even to use the quality
 

3493
01:07:48,799 --> 01:07:51,349
compiler decided even to use the quality
saved registers

3494
01:07:51,349 --> 01:07:51,359
saved registers
 

3495
01:07:51,359 --> 01:07:54,230
saved registers
and so we can set things like we can do

3496
01:07:54,230 --> 01:07:54,240
and so we can set things like we can do
 

3497
01:07:54,240 --> 01:07:55,029
and so we can set things like we can do
watch

3498
01:07:55,029 --> 01:07:55,039
watch
 

3499
01:07:55,039 --> 01:07:58,230
watch
on i

3500
01:07:58,230 --> 01:07:58,240
on i
 

3501
01:07:58,240 --> 01:08:00,230
on i
or we haven't declared i yet because

3502
01:08:00,230 --> 01:08:00,240
or we haven't declared i yet because
 

3503
01:08:00,240 --> 01:08:02,710
or we haven't declared i yet because
we're not inside

3504
01:08:02,710 --> 01:08:02,720
we're not inside
 

3505
01:08:02,720 --> 01:08:05,990
we're not inside
we're not inside the for loop so if we

3506
01:08:05,990 --> 01:08:06,000
we're not inside the for loop so if we
 

3507
01:08:06,000 --> 01:08:08,630
we're not inside the for loop so if we
step through the c instructions now if

3508
01:08:08,630 --> 01:08:08,640
step through the c instructions now if
 

3509
01:08:08,640 --> 01:08:11,430
step through the c instructions now if
we do information for the locals we see

3510
01:08:11,430 --> 01:08:11,440
we do information for the locals we see
 

3511
01:08:11,440 --> 01:08:12,390
we do information for the locals we see
we get i

3512
01:08:12,390 --> 01:08:12,400
we get i
 

3513
01:08:12,400 --> 01:08:16,149
we get i
we can even watch um watchpoint on

3514
01:08:16,149 --> 01:08:16,159
we can even watch um watchpoint on
 

3515
01:08:16,159 --> 01:08:20,470
we can even watch um watchpoint on
sum so now anytime that sum changes

3516
01:08:20,470 --> 01:08:20,480
sum so now anytime that sum changes
 

3517
01:08:20,480 --> 01:08:23,430
sum so now anytime that sum changes
we'll actually get a notification so we

3518
01:08:23,430 --> 01:08:23,440
we'll actually get a notification so we
 

3519
01:08:23,440 --> 01:08:24,789
we'll actually get a notification so we
can continue

3520
01:08:24,789 --> 01:08:24,799
can continue
 

3521
01:08:24,799 --> 01:08:27,590
can continue
and then we'll get a delete here because

3522
01:08:27,590 --> 01:08:27,600
and then we'll get a delete here because
 

3523
01:08:27,600 --> 01:08:27,990
and then we'll get a delete here because
some

3524
01:08:27,990 --> 01:08:28,000
some
 

3525
01:08:28,000 --> 01:08:30,550
some
has been removed so we can't we can't

3526
01:08:30,550 --> 01:08:30,560
has been removed so we can't we can't
 

3527
01:08:30,560 --> 01:08:31,829
has been removed so we can't we can't
actually watch it

3528
01:08:31,829 --> 01:08:31,839
actually watch it
 

3529
01:08:31,839 --> 01:08:35,910
actually watch it
we can even do things like break points

3530
01:08:35,910 --> 01:08:35,920
we can even do things like break points
 

3531
01:08:35,920 --> 01:08:37,749
we can even do things like break points
on sum2 so this is a conditional

3532
01:08:37,749 --> 01:08:37,759
on sum2 so this is a conditional
 

3533
01:08:37,759 --> 01:08:39,030
on sum2 so this is a conditional
breakpoint

3534
01:08:39,030 --> 01:08:39,040
breakpoint
 

3535
01:08:39,040 --> 01:08:42,229
breakpoint
if well let's actually see what is i

3536
01:08:42,229 --> 01:08:42,239
if well let's actually see what is i
 

3537
01:08:42,239 --> 01:08:44,630
if well let's actually see what is i
currently so i is currently one let's

3538
01:08:44,630 --> 01:08:44,640
currently so i is currently one let's
 

3539
01:08:44,640 --> 01:08:45,269
currently so i is currently one let's
say

3540
01:08:45,269 --> 01:08:45,279
say
 

3541
01:08:45,279 --> 01:08:47,590
say
i think my loop is breaking and whenever

3542
01:08:47,590 --> 01:08:47,600
i think my loop is breaking and whenever
 

3543
01:08:47,600 --> 01:08:48,789
i think my loop is breaking and whenever
i is five

3544
01:08:48,789 --> 01:08:48,799
i is five
 

3545
01:08:48,799 --> 01:08:50,630
i is five
well if i want to specifically debug

3546
01:08:50,630 --> 01:08:50,640
well if i want to specifically debug
 

3547
01:08:50,640 --> 01:08:53,749
well if i want to specifically debug
that case i can set a breakpoint

3548
01:08:53,749 --> 01:08:53,759
that case i can set a breakpoint
 

3549
01:08:53,759 --> 01:08:58,630
that case i can set a breakpoint
on sum2

3550
01:08:58,630 --> 01:08:58,640

 

3551
01:08:58,640 --> 01:09:02,789

if i equals five

3552
01:09:02,789 --> 01:09:02,799
if i equals five
 

3553
01:09:02,799 --> 01:09:05,269
if i equals five
so now we have this breakpoint and if we

3554
01:09:05,269 --> 01:09:05,279
so now we have this breakpoint and if we
 

3555
01:09:05,279 --> 01:09:06,630
so now we have this breakpoint and if we
continue along

3556
01:09:06,630 --> 01:09:06,640
continue along
 

3557
01:09:06,640 --> 01:09:09,669
continue along
we'll get to some two and uh we can see

3558
01:09:09,669 --> 01:09:09,679
we'll get to some two and uh we can see
 

3559
01:09:09,679 --> 01:09:11,510
we'll get to some two and uh we can see
that it actually printed out

3560
01:09:11,510 --> 01:09:11,520
that it actually printed out
 

3561
01:09:11,520 --> 01:09:14,149
that it actually printed out
the first couple values and so we only

3562
01:09:14,149 --> 01:09:14,159
the first couple values and so we only
 

3563
01:09:14,159 --> 01:09:15,910
the first couple values and so we only
break now on some two

3564
01:09:15,910 --> 01:09:15,920
break now on some two
 

3565
01:09:15,920 --> 01:09:19,510
break now on some two
if if i if we hit that breakpoint

3566
01:09:19,510 --> 01:09:19,520
if if i if we hit that breakpoint
 

3567
01:09:19,520 --> 01:09:21,189
if if i if we hit that breakpoint
condition

3568
01:09:21,189 --> 01:09:21,199
condition
 

3569
01:09:21,199 --> 01:09:22,870
condition
and so that's uh this can be again this

3570
01:09:22,870 --> 01:09:22,880
and so that's uh this can be again this
 

3571
01:09:22,880 --> 01:09:24,550
and so that's uh this can be again this
can be useful if you want to debug

3572
01:09:24,550 --> 01:09:24,560
can be useful if you want to debug
 

3573
01:09:24,560 --> 01:09:26,470
can be useful if you want to debug
specific edge cases of your code

3574
01:09:26,470 --> 01:09:26,480
specific edge cases of your code
 

3575
01:09:26,480 --> 01:09:29,189
specific edge cases of your code
and watch points can be useful if for

3576
01:09:29,189 --> 01:09:29,199
and watch points can be useful if for
 

3577
01:09:29,199 --> 01:09:30,550
and watch points can be useful if for
instance you think that something

3578
01:09:30,550 --> 01:09:30,560
instance you think that something
 

3579
01:09:30,560 --> 01:09:31,829
instance you think that something
shouldn't be changing

3580
01:09:31,829 --> 01:09:31,839
shouldn't be changing
 

3581
01:09:31,839 --> 01:09:34,870
shouldn't be changing
but you suspect that it is or you think

3582
01:09:34,870 --> 01:09:34,880
but you suspect that it is or you think
 

3583
01:09:34,880 --> 01:09:36,149
but you suspect that it is or you think
that something is going wrong

3584
01:09:36,149 --> 01:09:36,159
that something is going wrong
 

3585
01:09:36,159 --> 01:09:39,829
that something is going wrong
every time you change a certain variable

3586
01:09:39,829 --> 01:09:39,839
every time you change a certain variable
 

3587
01:09:39,839 --> 01:09:41,910
every time you change a certain variable
and so that's that's uh that's one one

3588
01:09:41,910 --> 01:09:41,920
and so that's that's uh that's one one
 

3589
01:09:41,920 --> 01:09:43,590
and so that's that's uh that's one one
usage for that

3590
01:09:43,590 --> 01:09:43,600
usage for that
 

3591
01:09:43,600 --> 01:09:45,510
usage for that
and uh the last thing i want to talk

3592
01:09:45,510 --> 01:09:45,520
and uh the last thing i want to talk
 

3593
01:09:45,520 --> 01:09:48,309
and uh the last thing i want to talk
about today is structs

3594
01:09:48,309 --> 01:09:48,319
about today is structs
 

3595
01:09:48,319 --> 01:09:50,070
about today is structs
structs are pretty important and they'll

3596
01:09:50,070 --> 01:09:50,080
structs are pretty important and they'll
 

3597
01:09:50,080 --> 01:09:51,590
structs are pretty important and they'll
come up in

3598
01:09:51,590 --> 01:09:51,600
come up in
 

3599
01:09:51,600 --> 01:09:55,030
come up in
um in the labs often

3600
01:09:55,030 --> 01:09:55,040
um in the labs often
 

3601
01:09:55,040 --> 01:09:58,790
um in the labs often
and also so what asks

3602
01:09:58,790 --> 01:09:58,800
and also so what asks
 

3603
01:09:58,800 --> 01:10:00,470
and also so what asks
i'll talk a little bit about the way

3604
01:10:00,470 --> 01:10:00,480
i'll talk a little bit about the way
 

3605
01:10:00,480 --> 01:10:03,590
i'll talk a little bit about the way
structs are laid out in memory

3606
01:10:03,590 --> 01:10:03,600
structs are laid out in memory
 

3607
01:10:03,600 --> 01:10:06,550
structs are laid out in memory
and so a struct is basically um it's a

3608
01:10:06,550 --> 01:10:06,560
and so a struct is basically um it's a
 

3609
01:10:06,560 --> 01:10:08,630
and so a struct is basically um it's a
continuous contiguous area of memory so

3610
01:10:08,630 --> 01:10:08,640
continuous contiguous area of memory so
 

3611
01:10:08,640 --> 01:10:11,430
continuous contiguous area of memory so
if we have some struct

3612
01:10:11,430 --> 01:10:11,440
if we have some struct
 

3613
01:10:11,440 --> 01:10:14,790
if we have some struct
and we have like field one field two

3614
01:10:14,790 --> 01:10:14,800
and we have like field one field two
 

3615
01:10:14,800 --> 01:10:18,149
and we have like field one field two
field three when we make that struck

3616
01:10:18,149 --> 01:10:18,159
field three when we make that struck
 

3617
01:10:18,159 --> 01:10:19,510
field three when we make that struck
those fields are going to be

3618
01:10:19,510 --> 01:10:19,520
those fields are going to be
 

3619
01:10:19,520 --> 01:10:22,630
those fields are going to be
aligned next to each other in memories

3620
01:10:22,630 --> 01:10:22,640
aligned next to each other in memories
 

3621
01:10:22,640 --> 01:10:24,310
aligned next to each other in memories
and you can kind of think of this

3622
01:10:24,310 --> 01:10:24,320
and you can kind of think of this
 

3623
01:10:24,320 --> 01:10:27,110
and you can kind of think of this
like an array but f1 f2 and f3 can all

3624
01:10:27,110 --> 01:10:27,120
like an array but f1 f2 and f3 can all
 

3625
01:10:27,120 --> 01:10:28,470
like an array but f1 f2 and f3 can all
be different types

3626
01:10:28,470 --> 01:10:28,480
be different types
 

3627
01:10:28,480 --> 01:10:31,830
be different types
and uh we can uh

3628
01:10:31,830 --> 01:10:31,840
and uh we can uh
 

3629
01:10:31,840 --> 01:10:33,270
and uh we can uh
pass them as functions usually they're

3630
01:10:33,270 --> 01:10:33,280
pass them as functions usually they're
 

3631
01:10:33,280 --> 01:10:34,870
pass them as functions usually they're
past uh pass them as arguments to

3632
01:10:34,870 --> 01:10:34,880
past uh pass them as arguments to
 

3633
01:10:34,880 --> 01:10:35,830
past uh pass them as arguments to
functions

3634
01:10:35,830 --> 01:10:35,840
functions
 

3635
01:10:35,840 --> 01:10:38,149
functions
usually they're passed by reference so

3636
01:10:38,149 --> 01:10:38,159
usually they're passed by reference so
 

3637
01:10:38,159 --> 01:10:40,229
usually they're passed by reference so
here i've made a struct person

3638
01:10:40,229 --> 01:10:40,239
here i've made a struct person
 

3639
01:10:40,239 --> 01:10:44,149
here i've made a struct person
with two integer arguments and

3640
01:10:44,149 --> 01:10:44,159
with two integer arguments and
 

3641
01:10:44,159 --> 01:10:46,550
with two integer arguments and
i'm passing them passing a person as an

3642
01:10:46,550 --> 01:10:46,560
i'm passing them passing a person as an
 

3643
01:10:46,560 --> 01:10:48,310
i'm passing them passing a person as an
argument to print person

3644
01:10:48,310 --> 01:10:48,320
argument to print person
 

3645
01:10:48,320 --> 01:10:51,110
argument to print person
and uh printing out some of that

3646
01:10:51,110 --> 01:10:51,120
and uh printing out some of that
 

3647
01:10:51,120 --> 01:10:52,149
and uh printing out some of that
information

3648
01:10:52,149 --> 01:10:52,159
information
 

3649
01:10:52,159 --> 01:10:54,870
information
so if we hop into gdb and let's delete

3650
01:10:54,870 --> 01:10:54,880
so if we hop into gdb and let's delete
 

3651
01:10:54,880 --> 01:10:57,030
so if we hop into gdb and let's delete
all of our breakpoints and watch points

3652
01:10:57,030 --> 01:10:57,040
all of our breakpoints and watch points
 

3653
01:10:57,040 --> 01:11:00,310
all of our breakpoints and watch points
and now we can set a breakpoint at

3654
01:11:00,310 --> 01:11:00,320
and now we can set a breakpoint at
 

3655
01:11:00,320 --> 01:11:04,149
and now we can set a breakpoint at
person and let's continue

3656
01:11:04,149 --> 01:11:04,159
person and let's continue
 

3657
01:11:04,159 --> 01:11:07,590
person and let's continue
and run seventh demo

3658
01:11:07,590 --> 01:11:07,600
and run seventh demo
 

3659
01:11:07,600 --> 01:11:09,270
and run seventh demo
we can see that now we're here and so if

3660
01:11:09,270 --> 01:11:09,280
we can see that now we're here and so if
 

3661
01:11:09,280 --> 01:11:11,030
we can see that now we're here and so if
we type iframe

3662
01:11:11,030 --> 01:11:11,040
we type iframe
 

3663
01:11:11,040 --> 01:11:15,350
we type iframe
we can see that we have an argument p

3664
01:11:15,350 --> 01:11:15,360
we can see that we have an argument p
 

3665
01:11:15,360 --> 01:11:18,870
we can see that we have an argument p
and indeed we can if we do print

3666
01:11:18,870 --> 01:11:18,880
and indeed we can if we do print
 

3667
01:11:18,880 --> 01:11:22,709
and indeed we can if we do print
p if we can even tell that it's a struct

3668
01:11:22,709 --> 01:11:22,719
p if we can even tell that it's a struct
 

3669
01:11:22,719 --> 01:11:23,510
p if we can even tell that it's a struct
person

3670
01:11:23,510 --> 01:11:23,520
person
 

3671
01:11:23,520 --> 01:11:26,870
person
at this address and

3672
01:11:26,870 --> 01:11:26,880
at this address and
 

3673
01:11:26,880 --> 01:11:30,229
at this address and
we can if we dereference it

3674
01:11:30,229 --> 01:11:30,239
we can if we dereference it
 

3675
01:11:30,239 --> 01:11:32,550
we can if we dereference it
gdb will tell us exactly what p looks

3676
01:11:32,550 --> 01:11:32,560
gdb will tell us exactly what p looks
 

3677
01:11:32,560 --> 01:11:35,270
gdb will tell us exactly what p looks
like it has id 1215

3678
01:11:35,270 --> 01:11:35,280
like it has id 1215
 

3679
01:11:35,280 --> 01:11:39,110
like it has id 1215
age is 22 and just to show kind of how

3680
01:11:39,110 --> 01:11:39,120
age is 22 and just to show kind of how
 

3681
01:11:39,120 --> 01:11:40,630
age is 22 and just to show kind of how
things are

3682
01:11:40,630 --> 01:11:40,640
things are
 

3683
01:11:40,640 --> 01:11:43,750
things are
laid out we can take this address

3684
01:11:43,750 --> 01:11:43,760
laid out we can take this address
 

3685
01:11:43,760 --> 01:11:53,669
laid out we can take this address
and we do x hd at this

3686
01:11:53,669 --> 01:11:53,679

 

3687
01:11:53,679 --> 01:12:02,149

i address exactly

3688
01:12:02,149 --> 01:12:02,159

 

3689
01:12:02,159 --> 01:12:04,310

so if we again so we can use this to

3690
01:12:04,310 --> 01:12:04,320
so if we again so we can use this to
 

3691
01:12:04,320 --> 01:12:05,270
so if we again so we can use this to
debug

3692
01:12:05,270 --> 01:12:05,280
debug
 

3693
01:12:05,280 --> 01:12:08,709
debug
our structures in

3694
01:12:08,709 --> 01:12:08,719
our structures in
 

3695
01:12:08,719 --> 01:12:11,910
our structures in
in the code we can take a look at what's

3696
01:12:11,910 --> 01:12:11,920
in the code we can take a look at what's
 

3697
01:12:11,920 --> 01:12:13,750
in the code we can take a look at what's
going on

3698
01:12:13,750 --> 01:12:13,760
going on
 

3699
01:12:13,760 --> 01:12:16,870
going on
with structures this way so gdb is a

3700
01:12:16,870 --> 01:12:16,880
with structures this way so gdb is a
 

3701
01:12:16,880 --> 01:12:18,070
with structures this way so gdb is a
super powerful tool

3702
01:12:18,070 --> 01:12:18,080
super powerful tool
 

3703
01:12:18,080 --> 01:12:20,229
super powerful tool
not just for you know stepping through

3704
01:12:20,229 --> 01:12:20,239
not just for you know stepping through
 

3705
01:12:20,239 --> 01:12:22,790
not just for you know stepping through
code but also for examining

3706
01:12:22,790 --> 01:12:22,800
code but also for examining
 

3707
01:12:22,800 --> 01:12:26,229
code but also for examining
all kinds of potentially problematic

3708
01:12:26,229 --> 01:12:26,239
all kinds of potentially problematic
 

3709
01:12:26,239 --> 01:12:28,149
all kinds of potentially problematic
pieces in your code and looking at

3710
01:12:28,149 --> 01:12:28,159
pieces in your code and looking at
 

3711
01:12:28,159 --> 01:12:29,990
pieces in your code and looking at
arguments and stack frames and things

3712
01:12:29,990 --> 01:12:30,000
arguments and stack frames and things
 

3713
01:12:30,000 --> 01:12:30,870
arguments and stack frames and things
like that

3714
01:12:30,870 --> 01:12:30,880
like that
 

3715
01:12:30,880 --> 01:12:32,470
like that
and this will be hopefully will be

3716
01:12:32,470 --> 01:12:32,480
and this will be hopefully will be
 

3717
01:12:32,480 --> 01:12:35,350
and this will be hopefully will be
useful in the next lab

3718
01:12:35,350 --> 01:12:35,360
useful in the next lab
 

3719
01:12:35,360 --> 01:12:37,990
useful in the next lab
when you have to work with um with stack

3720
01:12:37,990 --> 01:12:38,000
when you have to work with um with stack
 

3721
01:12:38,000 --> 01:12:40,070
when you have to work with um with stack
frames and with assembly code

3722
01:12:40,070 --> 01:12:40,080
frames and with assembly code
 

3723
01:12:40,080 --> 01:12:42,709
frames and with assembly code
so that's that's mostly what i wanted to

3724
01:12:42,709 --> 01:12:42,719
so that's that's mostly what i wanted to
 

3725
01:12:42,719 --> 01:12:44,070
so that's that's mostly what i wanted to
talk about today so

3726
01:12:44,070 --> 01:12:44,080
talk about today so
 

3727
01:12:44,080 --> 01:12:47,350
talk about today so
with the last kind of seven minutes of

3728
01:12:47,350 --> 01:12:47,360
with the last kind of seven minutes of
 

3729
01:12:47,360 --> 01:12:47,910
with the last kind of seven minutes of
lecture

3730
01:12:47,910 --> 01:12:47,920
lecture
 

3731
01:12:47,920 --> 01:12:50,550
lecture
i'll open it up to any any other

3732
01:12:50,550 --> 01:12:50,560
i'll open it up to any any other
 

3733
01:12:50,560 --> 01:12:59,350
i'll open it up to any any other
questions that you guys have

3734
01:12:59,350 --> 01:12:59,360

 

3735
01:12:59,360 --> 01:13:02,790

i had a bit of a tangential question who

3736
01:13:02,790 --> 01:13:02,800
i had a bit of a tangential question who
 

3737
01:13:02,800 --> 01:13:05,110
i had a bit of a tangential question who
is in who manages the the creation of

3738
01:13:05,110 --> 01:13:05,120
is in who manages the the creation of
 

3739
01:13:05,120 --> 01:13:05,910
is in who manages the the creation of
compilers

3740
01:13:05,910 --> 01:13:05,920
compilers
 

3741
01:13:05,920 --> 01:13:08,709
compilers
from like to get from c to various uh

3742
01:13:08,709 --> 01:13:08,719
from like to get from c to various uh
 

3743
01:13:08,719 --> 01:13:10,229
from like to get from c to various uh
instruction set architectures is that

3744
01:13:10,229 --> 01:13:10,239
instruction set architectures is that
 

3745
01:13:10,239 --> 01:13:11,910
instruction set architectures is that
the creator of the instruction set

3746
01:13:11,910 --> 01:13:11,920
the creator of the instruction set
 

3747
01:13:11,920 --> 01:13:13,270
the creator of the instruction set
architecture is it a third party

3748
01:13:13,270 --> 01:13:13,280
architecture is it a third party
 

3749
01:13:13,280 --> 01:13:14,550
architecture is it a third party
something like that

3750
01:13:14,550 --> 01:13:14,560
something like that
 

3751
01:13:14,560 --> 01:13:18,070
something like that
um i believe that it is

3752
01:13:18,070 --> 01:13:18,080
um i believe that it is
 

3753
01:13:18,080 --> 01:13:19,910
um i believe that it is
not the creator of the instruction set

3754
01:13:19,910 --> 01:13:19,920
not the creator of the instruction set
 

3755
01:13:19,920 --> 01:13:22,310
not the creator of the instruction set
so it's often a third party

3756
01:13:22,310 --> 01:13:22,320
so it's often a third party
 

3757
01:13:22,320 --> 01:13:24,149
so it's often a third party
so the two big c compilers that you'll

3758
01:13:24,149 --> 01:13:24,159
so the two big c compilers that you'll
 

3759
01:13:24,159 --> 01:13:26,229
so the two big c compilers that you'll
see refer to are gcc

3760
01:13:26,229 --> 01:13:26,239
see refer to are gcc
 

3761
01:13:26,239 --> 01:13:28,630
see refer to are gcc
which is maintained by i think the gnu

3762
01:13:28,630 --> 01:13:28,640
which is maintained by i think the gnu
 

3763
01:13:28,640 --> 01:13:29,990
which is maintained by i think the gnu
foundation

3764
01:13:29,990 --> 01:13:30,000
foundation
 

3765
01:13:30,000 --> 01:13:33,430
foundation
and uh c lang or llvm

3766
01:13:33,430 --> 01:13:33,440
and uh c lang or llvm
 

3767
01:13:33,440 --> 01:13:36,070
and uh c lang or llvm
which is its own thing so i think you

3768
01:13:36,070 --> 01:13:36,080
which is its own thing so i think you
 

3769
01:13:36,080 --> 01:13:37,270
which is its own thing so i think you
know you can find

3770
01:13:37,270 --> 01:13:37,280
know you can find
 

3771
01:13:37,280 --> 01:13:39,669
know you can find
i believe lovm is even open source so

3772
01:13:39,669 --> 01:13:39,679
i believe lovm is even open source so
 

3773
01:13:39,679 --> 01:13:40,950
i believe lovm is even open source so
you can find

3774
01:13:40,950 --> 01:13:40,960
you can find
 

3775
01:13:40,960 --> 01:13:43,110
you can find
um you can you can find the code

3776
01:13:43,110 --> 01:13:43,120
um you can you can find the code
 

3777
01:13:43,120 --> 01:13:44,550
um you can you can find the code
specifically that does this

3778
01:13:44,550 --> 01:13:44,560
specifically that does this
 

3779
01:13:44,560 --> 01:13:46,790
specifically that does this
uh when a new instruction set is

3780
01:13:46,790 --> 01:13:46,800
uh when a new instruction set is
 

3781
01:13:46,800 --> 01:13:48,790
uh when a new instruction set is
released such as risk five

3782
01:13:48,790 --> 01:13:48,800
released such as risk five
 

3783
01:13:48,800 --> 01:13:50,870
released such as risk five
that calling convention document as well

3784
01:13:50,870 --> 01:13:50,880
that calling convention document as well
 

3785
01:13:50,880 --> 01:13:53,350
that calling convention document as well
as all of those instruction documents

3786
01:13:53,350 --> 01:13:53,360
as all of those instruction documents
 

3787
01:13:53,360 --> 01:13:54,950
as all of those instruction documents
uh i think you're careful but i assume

3788
01:13:54,950 --> 01:13:54,960
uh i think you're careful but i assume
 

3789
01:13:54,960 --> 01:13:56,790
uh i think you're careful but i assume
there's like a high level of cooperation

3790
01:13:56,790 --> 01:13:56,800
there's like a high level of cooperation
 

3791
01:13:56,800 --> 01:13:58,470
there's like a high level of cooperation
between the compiler designer and the

3792
01:13:58,470 --> 01:13:58,480
between the compiler designer and the
 

3793
01:13:58,480 --> 01:14:00,229
between the compiler designer and the
instruction set designer

3794
01:14:00,229 --> 01:14:00,239
instruction set designer
 

3795
01:14:00,239 --> 01:14:03,750
instruction set designer
um but yeah short answer is i i believe

3796
01:14:03,750 --> 01:14:03,760
um but yeah short answer is i i believe
 

3797
01:14:03,760 --> 01:14:04,550
um but yeah short answer is i i believe
it's a third

3798
01:14:04,550 --> 01:14:04,560
it's a third
 

3799
01:14:04,560 --> 01:14:07,110
it's a third
third party who does it likely with a

3800
01:14:07,110 --> 01:14:07,120
third party who does it likely with a
 

3801
01:14:07,120 --> 01:14:08,709
third party who does it likely with a
lot of cooperation from the people who

3802
01:14:08,709 --> 01:14:08,719
lot of cooperation from the people who
 

3803
01:14:08,719 --> 01:14:09,830
lot of cooperation from the people who
make the instruction set

3804
01:14:09,830 --> 01:14:09,840
make the instruction set
 

3805
01:14:09,840 --> 01:14:12,709
make the instruction set
risk five is probably risk five might be

3806
01:14:12,709 --> 01:14:12,719
risk five is probably risk five might be
 

3807
01:14:12,719 --> 01:14:14,870
risk five is probably risk five might be
an exception where because it came out

3808
01:14:14,870 --> 01:14:14,880
an exception where because it came out
 

3809
01:14:14,880 --> 01:14:16,550
an exception where because it came out
of a research project

3810
01:14:16,550 --> 01:14:16,560
of a research project
 

3811
01:14:16,560 --> 01:14:18,550
of a research project
they may have written the the compiler

3812
01:14:18,550 --> 01:14:18,560
they may have written the the compiler
 

3813
01:14:18,560 --> 01:14:20,149
they may have written the the compiler
for it themselves

3814
01:14:20,149 --> 01:14:20,159
for it themselves
 

3815
01:14:20,159 --> 01:14:23,270
for it themselves
as well i i don't think intel has

3816
01:14:23,270 --> 01:14:23,280
as well i i don't think intel has
 

3817
01:14:23,280 --> 01:14:26,870
as well i i don't think intel has
for example has input in uh in gcc or

3818
01:14:26,870 --> 01:14:26,880
for example has input in uh in gcc or
 

3819
01:14:26,880 --> 01:14:45,510
for example has input in uh in gcc or
llvm

3820
01:14:45,510 --> 01:14:45,520

 

3821
01:14:45,520 --> 01:14:54,630

other questions

3822
01:14:54,630 --> 01:14:54,640

 

3823
01:14:54,640 --> 01:14:57,830

okay well uh thanks

3824
01:14:57,830 --> 01:14:57,840
okay well uh thanks
 

3825
01:14:57,840 --> 01:14:59,910
okay well uh thanks
for listening in that case and i guess

3826
01:14:59,910 --> 01:14:59,920
for listening in that case and i guess
 

3827
01:14:59,920 --> 01:15:01,750
for listening in that case and i guess
we can uh

3828
01:15:01,750 --> 01:15:01,760
we can uh
 

3829
01:15:01,760 --> 01:15:04,870
we can uh
we can end the lecture here uh with five

3830
01:15:04,870 --> 01:15:04,880
we can end the lecture here uh with five
 

3831
01:15:04,880 --> 01:15:06,470
we can end the lecture here uh with five
minutes to spare so

3832
01:15:06,470 --> 01:15:06,480
minutes to spare so
 

3833
01:15:06,480 --> 01:15:09,520
minutes to spare so
have a nice rest of

