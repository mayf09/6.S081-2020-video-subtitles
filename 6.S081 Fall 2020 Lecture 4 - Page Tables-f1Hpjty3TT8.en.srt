1
00:00:00,080 --> 00:00:04,630

sound check can everybody hear me

2
00:00:04,630 --> 00:00:04,640

 

3
00:00:04,640 --> 00:00:07,749

oh yep yup all right

4
00:00:07,749 --> 00:00:07,759
oh yep yup all right
 

5
00:00:07,759 --> 00:00:09,910
oh yep yup all right
okay so welcome to uh the next lecture

6
00:00:09,910 --> 00:00:09,920
okay so welcome to uh the next lecture
 

7
00:00:09,920 --> 00:00:11,190
okay so welcome to uh the next lecture
in s081

8
00:00:11,190 --> 00:00:11,200
in s081
 

9
00:00:11,200 --> 00:00:14,629
in s081
uh wherever you are a particular

10
00:00:14,629 --> 00:00:14,639
uh wherever you are a particular
 

11
00:00:14,639 --> 00:00:16,230
uh wherever you are a particular
i hope that the folks on the west coast

12
00:00:16,230 --> 00:00:16,240
i hope that the folks on the west coast
 

13
00:00:16,240 --> 00:00:18,870
i hope that the folks on the west coast
or in florida and alabama do okay

14
00:00:18,870 --> 00:00:18,880
or in florida and alabama do okay
 

15
00:00:18,880 --> 00:00:21,429
or in florida and alabama do okay
given all the terrible circumstances

16
00:00:21,429 --> 00:00:21,439
given all the terrible circumstances
 

17
00:00:21,439 --> 00:00:22,470
given all the terrible circumstances
there

18
00:00:22,470 --> 00:00:22,480
there
 

19
00:00:22,480 --> 00:00:27,189
there
um so uh the topic for today

20
00:00:27,189 --> 00:00:27,199
um so uh the topic for today
 

21
00:00:27,199 --> 00:00:29,029
um so uh the topic for today
is virtual memory particularly we're

22
00:00:29,029 --> 00:00:29,039
is virtual memory particularly we're
 

23
00:00:29,039 --> 00:00:30,470
is virtual memory particularly we're
going to talk about page tables

24
00:00:30,470 --> 00:00:30,480
going to talk about page tables
 

25
00:00:30,480 --> 00:00:32,870
going to talk about page tables
uh we'll return to this topic uh a few

26
00:00:32,870 --> 00:00:32,880
uh we'll return to this topic uh a few
 

27
00:00:32,880 --> 00:00:34,630
uh we'll return to this topic uh a few
times there will be multiple filicular

28
00:00:34,630 --> 00:00:34,640
times there will be multiple filicular
 

29
00:00:34,640 --> 00:00:35,990
times there will be multiple filicular
lectures

30
00:00:35,990 --> 00:00:36,000
lectures
 

31
00:00:36,000 --> 00:00:38,150
lectures
and maybe just to start off and you know

32
00:00:38,150 --> 00:00:38,160
and maybe just to start off and you know
 

33
00:00:38,160 --> 00:00:42,150
and maybe just to start off and you know
get our question and answer going again

34
00:00:42,150 --> 00:00:42,160
get our question and answer going again
 

35
00:00:42,160 --> 00:00:43,750
get our question and answer going again
i would like to ask you a little bit

36
00:00:43,750 --> 00:00:43,760
i would like to ask you a little bit
 

37
00:00:43,760 --> 00:00:45,270
i would like to ask you a little bit
what do you remember from

38
00:00:45,270 --> 00:00:45,280
what do you remember from
 

39
00:00:45,280 --> 00:00:47,830
what do you remember from
uh about virtual memory from double o4

40
00:00:47,830 --> 00:00:47,840
uh about virtual memory from double o4
 

41
00:00:47,840 --> 00:00:48,869
uh about virtual memory from double o4
maybe and or

42
00:00:48,869 --> 00:00:48,879
maybe and or
 

43
00:00:48,879 --> 00:00:50,869
maybe and or
uh nor six or two three if you're taking

44
00:00:50,869 --> 00:00:50,879
uh nor six or two three if you're taking
 

45
00:00:50,879 --> 00:00:52,470
uh nor six or two three if you're taking
that uh

46
00:00:52,470 --> 00:00:52,480
that uh
 

47
00:00:52,480 --> 00:00:54,549
that uh
i'll tell you my own sort of view on

48
00:00:54,549 --> 00:00:54,559
i'll tell you my own sort of view on
 

49
00:00:54,559 --> 00:00:56,150
i'll tell you my own sort of view on
virtual memory which is you know why i

50
00:00:56,150 --> 00:00:56,160
virtual memory which is you know why i
 

51
00:00:56,160 --> 00:00:57,750
virtual memory which is you know why i
took it when i first heard about it or

52
00:00:57,750 --> 00:00:57,760
took it when i first heard about it or
 

53
00:00:57,760 --> 00:00:59,189
took it when i first heard about it or
learned about it as a student

54
00:00:59,189 --> 00:00:59,199
learned about it as a student
 

55
00:00:59,199 --> 00:01:00,310
learned about it as a student
i thought you know it's pretty

56
00:01:00,310 --> 00:01:00,320
i thought you know it's pretty
 

57
00:01:00,320 --> 00:01:01,910
i thought you know it's pretty
straightforward you know hard can it be

58
00:01:01,910 --> 00:01:01,920
straightforward you know hard can it be
 

59
00:01:01,920 --> 00:01:03,189
straightforward you know hard can it be
it's a table that

60
00:01:03,189 --> 00:01:03,199
it's a table that
 

61
00:01:03,199 --> 00:01:04,469
it's a table that
you know maps virtual addresses to

62
00:01:04,469 --> 00:01:04,479
you know maps virtual addresses to
 

63
00:01:04,479 --> 00:01:06,550
you know maps virtual addresses to
physical addresses now uh

64
00:01:06,550 --> 00:01:06,560
physical addresses now uh
 

65
00:01:06,560 --> 00:01:07,990
physical addresses now uh
you know maybe a little more complicated

66
00:01:07,990 --> 00:01:08,000
you know maybe a little more complicated
 

67
00:01:08,000 --> 00:01:10,310
you know maybe a little more complicated
but you know not that complicated

68
00:01:10,310 --> 00:01:10,320
but you know not that complicated
 

69
00:01:10,320 --> 00:01:11,830
but you know not that complicated
and only when you start programming them

70
00:01:11,830 --> 00:01:11,840
and only when you start programming them
 

71
00:01:11,840 --> 00:01:14,070
and only when you start programming them
with it i should really have learned

72
00:01:14,070 --> 00:01:14,080
with it i should really have learned
 

73
00:01:14,080 --> 00:01:17,270
with it i should really have learned
that uh future memory is tricky and uh

74
00:01:17,270 --> 00:01:17,280
that uh future memory is tricky and uh
 

75
00:01:17,280 --> 00:01:21,350
that uh future memory is tricky and uh
fascinating um and very powerful

76
00:01:21,350 --> 00:01:21,360
fascinating um and very powerful
 

77
00:01:21,360 --> 00:01:23,749
fascinating um and very powerful
and so hopefully in the next you know

78
00:01:23,749 --> 00:01:23,759
and so hopefully in the next you know
 

79
00:01:23,759 --> 00:01:24,390
and so hopefully in the next you know
couple

80
00:01:24,390 --> 00:01:24,400
couple
 

81
00:01:24,400 --> 00:01:26,070
couple
lectures in the next couple laps you

82
00:01:26,070 --> 00:01:26,080
lectures in the next couple laps you
 

83
00:01:26,080 --> 00:01:27,670
lectures in the next couple laps you
know you'll you'll uh

84
00:01:27,670 --> 00:01:27,680
know you'll you'll uh
 

85
00:01:27,680 --> 00:01:29,749
know you'll you'll uh
you'll appreciate uh virtual memory from

86
00:01:29,749 --> 00:01:29,759
you'll appreciate uh virtual memory from
 

87
00:01:29,759 --> 00:01:30,950
you'll appreciate uh virtual memory from
that perspective

88
00:01:30,950 --> 00:01:30,960
that perspective
 

89
00:01:30,960 --> 00:01:32,469
that perspective
uh but we'll ask you a couple people

90
00:01:32,469 --> 00:01:32,479
uh but we'll ask you a couple people
 

91
00:01:32,479 --> 00:01:34,310
uh but we'll ask you a couple people
here that are online you know what do

92
00:01:34,310 --> 00:01:34,320
here that are online you know what do
 

93
00:01:34,320 --> 00:01:35,030
here that are online you know what do
you remember from

94
00:01:35,030 --> 00:01:35,040
you remember from
 

95
00:01:35,040 --> 00:01:37,270
you remember from
uh about virtual memory uh from either

96
00:01:37,270 --> 00:01:37,280
uh about virtual memory uh from either
 

97
00:01:37,280 --> 00:01:38,469
uh about virtual memory uh from either
double o four or

98
00:01:38,469 --> 00:01:38,479
double o four or
 

99
00:01:38,479 --> 00:01:40,310
double o four or
six or five if you're taking it and

100
00:01:40,310 --> 00:01:40,320
six or five if you're taking it and
 

101
00:01:40,320 --> 00:01:41,510
six or five if you're taking it and
again i'm just going to call out some

102
00:01:41,510 --> 00:01:41,520
again i'm just going to call out some
 

103
00:01:41,520 --> 00:01:42,389
again i'm just going to call out some
names and

104
00:01:42,389 --> 00:01:42,399
names and
 

105
00:01:42,399 --> 00:01:45,429
names and
you know share your your

106
00:01:45,429 --> 00:01:45,439
you know share your your
 

107
00:01:45,439 --> 00:01:52,950
you know share your your
your memories about the adela yang

108
00:01:52,950 --> 00:01:52,960

 

109
00:01:52,960 --> 00:01:55,109

oh sorry what was the question uh what

110
00:01:55,109 --> 00:01:55,119
oh sorry what was the question uh what
 

111
00:01:55,119 --> 00:01:56,149
oh sorry what was the question uh what
do you remember

112
00:01:56,149 --> 00:01:56,159
do you remember
 

113
00:01:56,159 --> 00:01:59,270
do you remember
uh about virtual memory from maybe 04

114
00:01:59,270 --> 00:01:59,280
uh about virtual memory from maybe 04
 

115
00:01:59,280 --> 00:02:03,109
uh about virtual memory from maybe 04
or 623 if you have taken that um

116
00:02:03,109 --> 00:02:03,119
or 623 if you have taken that um
 

117
00:02:03,119 --> 00:02:06,550
or 623 if you have taken that um
it uses like offset to save on like uh

118
00:02:06,550 --> 00:02:06,560
it uses like offset to save on like uh
 

119
00:02:06,560 --> 00:02:09,029
it uses like offset to save on like uh
remembering virtual address to physical

120
00:02:09,029 --> 00:02:09,039
remembering virtual address to physical
 

121
00:02:09,039 --> 00:02:11,589
remembering virtual address to physical
address mappings

122
00:02:11,589 --> 00:02:11,599
address mappings
 

123
00:02:11,599 --> 00:02:20,070
address mappings
okay uh how about abraham skandera

124
00:02:20,070 --> 00:02:20,080

 

125
00:02:20,080 --> 00:02:23,190

abram are you online

126
00:02:23,190 --> 00:02:23,200
abram are you online
 

127
00:02:23,200 --> 00:02:26,790
abram are you online
yeah uh my memory is that it uses uh

128
00:02:26,790 --> 00:02:26,800
yeah uh my memory is that it uses uh
 

129
00:02:26,800 --> 00:02:29,110
yeah uh my memory is that it uses uh
like it's a way of one protecting the

130
00:02:29,110 --> 00:02:29,120
like it's a way of one protecting the
 

131
00:02:29,120 --> 00:02:30,150
like it's a way of one protecting the
physical hardware

132
00:02:30,150 --> 00:02:30,160
physical hardware
 

133
00:02:30,160 --> 00:02:33,589
physical hardware
by kind of using your representation of

134
00:02:33,589 --> 00:02:33,599
by kind of using your representation of
 

135
00:02:33,599 --> 00:02:34,309
by kind of using your representation of
it

136
00:02:34,309 --> 00:02:34,319
it
 

137
00:02:34,319 --> 00:02:36,070
it
um and then yeah you just have like some

138
00:02:36,070 --> 00:02:36,080
um and then yeah you just have like some
 

139
00:02:36,080 --> 00:02:38,150
um and then yeah you just have like some
virtual address like

140
00:02:38,150 --> 00:02:38,160
virtual address like
 

141
00:02:38,160 --> 00:02:40,229
virtual address like
at least and double it for just like 12

142
00:02:40,229 --> 00:02:40,239
at least and double it for just like 12
 

143
00:02:40,239 --> 00:02:41,670
at least and double it for just like 12
bits that match

144
00:02:41,670 --> 00:02:41,680
bits that match
 

145
00:02:41,680 --> 00:02:44,550
bits that match
some physical address uh that's usually

146
00:02:44,550 --> 00:02:44,560
some physical address uh that's usually
 

147
00:02:44,560 --> 00:02:44,949
some physical address uh that's usually
i think

148
00:02:44,949 --> 00:02:44,959
i think
 

149
00:02:44,959 --> 00:02:50,630
i think
16 bits like that

150
00:02:50,630 --> 00:02:50,640
16 bits like that
 

151
00:02:50,640 --> 00:02:55,430
16 bits like that
uh how about the bibic pendant

152
00:02:55,430 --> 00:02:55,440

 

153
00:02:55,440 --> 00:02:59,110

um what i remember was um

154
00:02:59,110 --> 00:02:59,120
um what i remember was um
 

155
00:02:59,120 --> 00:03:02,149
um what i remember was um
you can have each process

156
00:03:02,149 --> 00:03:02,159
you can have each process
 

157
00:03:02,159 --> 00:03:07,110
you can have each process
has a separate address space and

158
00:03:07,110 --> 00:03:07,120

 

159
00:03:07,120 --> 00:03:09,190

the memory management unit or i mean

160
00:03:09,190 --> 00:03:09,200
the memory management unit or i mean
 

161
00:03:09,200 --> 00:03:11,830
the memory management unit or i mean
some other technique can be used to map

162
00:03:11,830 --> 00:03:11,840
some other technique can be used to map
 

163
00:03:11,840 --> 00:03:14,229
some other technique can be used to map
uh the virtual addresses of the address

164
00:03:14,229 --> 00:03:14,239
uh the virtual addresses of the address
 

165
00:03:14,239 --> 00:03:16,229
uh the virtual addresses of the address
space of each of the processes to the

166
00:03:16,229 --> 00:03:16,239
space of each of the processes to the
 

167
00:03:16,239 --> 00:03:17,270
space of each of the processes to the
physical

168
00:03:17,270 --> 00:03:17,280
physical
 

169
00:03:17,280 --> 00:03:20,390
physical
um physical address and

170
00:03:20,390 --> 00:03:20,400
um physical address and
 

171
00:03:20,400 --> 00:03:23,670
um physical address and
um the the virtual address the

172
00:03:23,670 --> 00:03:23,680
um the the virtual address the
 

173
00:03:23,680 --> 00:03:25,990
um the the virtual address the
the lower bits are kind of the same so

174
00:03:25,990 --> 00:03:26,000
the lower bits are kind of the same so
 

175
00:03:26,000 --> 00:03:27,270
the lower bits are kind of the same so
that uh the

176
00:03:27,270 --> 00:03:27,280
that uh the
 

177
00:03:27,280 --> 00:03:30,630
that uh the
the mapping is in blocks which

178
00:03:30,630 --> 00:03:30,640
the mapping is in blocks which
 

179
00:03:30,640 --> 00:03:33,990
the mapping is in blocks which
helps with performance

180
00:03:33,990 --> 00:03:34,000

 

181
00:03:34,000 --> 00:03:39,509

uh

182
00:03:39,509 --> 00:03:39,519

 

183
00:03:39,519 --> 00:03:42,869

i yeah um yeah i guess what i remember

184
00:03:42,869 --> 00:03:42,879
i yeah um yeah i guess what i remember
 

185
00:03:42,879 --> 00:03:43,670
i yeah um yeah i guess what i remember
most is that

186
00:03:43,670 --> 00:03:43,680
most is that
 

187
00:03:43,680 --> 00:03:47,670
most is that
virtual addressing allows us to um

188
00:03:47,670 --> 00:03:47,680
virtual addressing allows us to um
 

189
00:03:47,680 --> 00:03:49,990
virtual addressing allows us to um
yeah protect physical addresses from

190
00:03:49,990 --> 00:03:50,000
yeah protect physical addresses from
 

191
00:03:50,000 --> 00:03:51,589
yeah protect physical addresses from
from each process

192
00:03:51,589 --> 00:03:51,599
from each process
 

193
00:03:51,599 --> 00:03:54,070
from each process
and we can use some like clever

194
00:03:54,070 --> 00:03:54,080
and we can use some like clever
 

195
00:03:54,080 --> 00:03:55,589
and we can use some like clever
manipulations so that the

196
00:03:55,589 --> 00:03:55,599
manipulations so that the
 

197
00:03:55,599 --> 00:03:57,190
manipulations so that the
bits that correspond to the physical

198
00:03:57,190 --> 00:03:57,200
bits that correspond to the physical
 

199
00:03:57,200 --> 00:03:59,190
bits that correspond to the physical
address can be used somehow in the

200
00:03:59,190 --> 00:03:59,200
address can be used somehow in the
 

201
00:03:59,200 --> 00:04:03,030
address can be used somehow in the
virtual addresses as well

202
00:04:03,030 --> 00:04:03,040

 

203
00:04:03,040 --> 00:04:08,949

wilson spearman or spearman

204
00:04:08,949 --> 00:04:08,959

 

205
00:04:08,959 --> 00:04:10,789

yeah i remember it's really fundamental

206
00:04:10,789 --> 00:04:10,799
yeah i remember it's really fundamental
 

207
00:04:10,799 --> 00:04:13,350
yeah i remember it's really fundamental
to isolation because every process can

208
00:04:13,350 --> 00:04:13,360
to isolation because every process can
 

209
00:04:13,360 --> 00:04:14,070
to isolation because every process can
basically

210
00:04:14,070 --> 00:04:14,080
basically
 

211
00:04:14,080 --> 00:04:17,189
basically
uh pretend that it has its own uh

212
00:04:17,189 --> 00:04:17,199
uh pretend that it has its own uh
 

213
00:04:17,199 --> 00:04:20,949
uh pretend that it has its own uh
set of memory to use yeah good good

214
00:04:20,949 --> 00:04:20,959
set of memory to use yeah good good
 

215
00:04:20,959 --> 00:04:24,230
set of memory to use yeah good good
well so clearly uh that's awesome the

216
00:04:24,230 --> 00:04:24,240
well so clearly uh that's awesome the
 

217
00:04:24,240 --> 00:04:25,990
well so clearly uh that's awesome the
the here so clear two themes a year

218
00:04:25,990 --> 00:04:26,000
the here so clear two themes a year
 

219
00:04:26,000 --> 00:04:27,270
the here so clear two themes a year
correct

220
00:04:27,270 --> 00:04:27,280
correct
 

221
00:04:27,280 --> 00:04:28,870
correct
one is you know there's some form of

222
00:04:28,870 --> 00:04:28,880
one is you know there's some form of
 

223
00:04:28,880 --> 00:04:31,430
one is you know there's some form of
mapping uh and that mapping is helpful

224
00:04:31,430 --> 00:04:31,440
mapping uh and that mapping is helpful
 

225
00:04:31,440 --> 00:04:33,830
mapping uh and that mapping is helpful
in sort of achieving isolation and this

226
00:04:33,830 --> 00:04:33,840
in sort of achieving isolation and this
 

227
00:04:33,840 --> 00:04:34,790
in sort of achieving isolation and this
is exactly the

228
00:04:34,790 --> 00:04:34,800
is exactly the
 

229
00:04:34,800 --> 00:04:37,189
is exactly the
reason we're talking about uh virtual

230
00:04:37,189 --> 00:04:37,199
reason we're talking about uh virtual
 

231
00:04:37,199 --> 00:04:38,950
reason we're talking about uh virtual
memory you know isolation

232
00:04:38,950 --> 00:04:38,960
memory you know isolation
 

233
00:04:38,960 --> 00:04:41,909
memory you know isolation
so what we'll see is that uh in the next

234
00:04:41,909 --> 00:04:41,919
so what we'll see is that uh in the next
 

235
00:04:41,919 --> 00:04:42,469
so what we'll see is that uh in the next
you know the

236
00:04:42,469 --> 00:04:42,479
you know the
 

237
00:04:42,479 --> 00:04:43,590
you know the
the next couple lectures and

238
00:04:43,590 --> 00:04:43,600
the next couple lectures and
 

239
00:04:43,600 --> 00:04:44,710
the next couple lectures and
particularly when we start programming

240
00:04:44,710 --> 00:04:44,720
particularly when we start programming
 

241
00:04:44,720 --> 00:04:45,990
particularly when we start programming
with virtual memory

242
00:04:45,990 --> 00:04:46,000
with virtual memory
 

243
00:04:46,000 --> 00:04:48,629
with virtual memory
i really get an in-depth understanding

244
00:04:48,629 --> 00:04:48,639
i really get an in-depth understanding
 

245
00:04:48,639 --> 00:04:49,030
i really get an in-depth understanding
uh

246
00:04:49,030 --> 00:04:49,040
uh
 

247
00:04:49,040 --> 00:04:52,150
uh
what its power is uh and so to get a

248
00:04:52,150 --> 00:04:52,160
what its power is uh and so to get a
 

249
00:04:52,160 --> 00:04:53,110
what its power is uh and so to get a
sense of that you know

250
00:04:53,110 --> 00:04:53,120
sense of that you know
 

251
00:04:53,120 --> 00:04:54,790
sense of that you know
this is the first lecture and i'm mostly

252
00:04:54,790 --> 00:04:54,800
this is the first lecture and i'm mostly
 

253
00:04:54,800 --> 00:04:56,710
this is the first lecture and i'm mostly
focusing on the mechanisms

254
00:04:56,710 --> 00:04:56,720
focusing on the mechanisms
 

255
00:04:56,720 --> 00:04:59,909
focusing on the mechanisms
uh for uh virtual memory and then later

256
00:04:59,909 --> 00:04:59,919
uh for uh virtual memory and then later
 

257
00:04:59,919 --> 00:05:01,350
uh for uh virtual memory and then later
we can see how we can use these

258
00:05:01,350 --> 00:05:01,360
we can see how we can use these
 

259
00:05:01,360 --> 00:05:02,550
we can see how we can use these
mechanisms to achieve

260
00:05:02,550 --> 00:05:02,560
mechanisms to achieve
 

261
00:05:02,560 --> 00:05:05,510
mechanisms to achieve
you know cool tricks so the topic for

262
00:05:05,510 --> 00:05:05,520
you know cool tricks so the topic for
 

263
00:05:05,520 --> 00:05:05,909
you know cool tricks so the topic for
today

264
00:05:05,909 --> 00:05:05,919
today
 

265
00:05:05,919 --> 00:05:09,029
today
or the agenda for today uh the plan is

266
00:05:09,029 --> 00:05:09,039
or the agenda for today uh the plan is
 

267
00:05:09,039 --> 00:05:10,710
or the agenda for today uh the plan is
sort of free fault

268
00:05:10,710 --> 00:05:10,720
sort of free fault
 

269
00:05:10,720 --> 00:05:12,150
sort of free fault
uh first i'm going to talk about the

270
00:05:12,150 --> 00:05:12,160
uh first i'm going to talk about the
 

271
00:05:12,160 --> 00:05:14,629
uh first i'm going to talk about the
dress spaces as some of you mentioned in

272
00:05:14,629 --> 00:05:14,639
dress spaces as some of you mentioned in
 

273
00:05:14,639 --> 00:05:15,189
dress spaces as some of you mentioned in
your

274
00:05:15,189 --> 00:05:15,199
your
 

275
00:05:15,199 --> 00:05:18,950
your
uh just in the just mentioned

276
00:05:18,950 --> 00:05:18,960
uh just in the just mentioned
 

277
00:05:18,960 --> 00:05:21,430
uh just in the just mentioned
just briefly mentioned in a response to

278
00:05:21,430 --> 00:05:21,440
just briefly mentioned in a response to
 

279
00:05:21,440 --> 00:05:22,390
just briefly mentioned in a response to
this question

280
00:05:22,390 --> 00:05:22,400
this question
 

281
00:05:22,400 --> 00:05:23,909
this question
uh now i'm going to talk about the

282
00:05:23,909 --> 00:05:23,919
uh now i'm going to talk about the
 

283
00:05:23,919 --> 00:05:26,950
uh now i'm going to talk about the
paging hardware or paging hardener

284
00:05:26,950 --> 00:05:26,960
paging hardware or paging hardener
 

285
00:05:26,960 --> 00:05:28,629
paging hardware or paging hardener
and i'm going to focus of course on the

286
00:05:28,629 --> 00:05:28,639
and i'm going to focus of course on the
 

287
00:05:28,639 --> 00:05:32,070
and i'm going to focus of course on the
paging hardware of the risk 5

288
00:05:32,070 --> 00:05:32,080
paging hardware of the risk 5
 

289
00:05:32,080 --> 00:05:35,510
paging hardware of the risk 5
but basically every processor uh

290
00:05:35,510 --> 00:05:35,520
but basically every processor uh
 

291
00:05:35,520 --> 00:05:38,230
but basically every processor uh
modem processor has some form of aging

292
00:05:38,230 --> 00:05:38,240
modem processor has some form of aging
 

293
00:05:38,240 --> 00:05:38,950
modem processor has some form of aging
hardware

294
00:05:38,950 --> 00:05:38,960
hardware
 

295
00:05:38,960 --> 00:05:41,990
hardware
sort of d uh if you will the default

296
00:05:41,990 --> 00:05:42,000
sort of d uh if you will the default
 

297
00:05:42,000 --> 00:05:44,390
sort of d uh if you will the default
mechanism for actually uh

298
00:05:44,390 --> 00:05:44,400
mechanism for actually uh
 

299
00:05:44,400 --> 00:05:47,510
mechanism for actually uh
supporting virtual memory and then uh

300
00:05:47,510 --> 00:05:47,520
supporting virtual memory and then uh
 

301
00:05:47,520 --> 00:05:49,590
supporting virtual memory and then uh
the last part of the lecture is going to

302
00:05:49,590 --> 00:05:49,600
the last part of the lecture is going to
 

303
00:05:49,600 --> 00:05:50,710
the last part of the lecture is going to
walk through

304
00:05:50,710 --> 00:05:50,720
walk through
 

305
00:05:50,720 --> 00:05:54,310
walk through
some xp6 virtual memory code

306
00:05:54,310 --> 00:05:54,320
some xp6 virtual memory code
 

307
00:05:54,320 --> 00:05:57,510
some xp6 virtual memory code
and layout

308
00:05:57,510 --> 00:05:57,520
and layout
 

309
00:05:57,520 --> 00:06:00,629
and layout
of you know the kernel address space and

310
00:06:00,629 --> 00:06:00,639
of you know the kernel address space and
 

311
00:06:00,639 --> 00:06:02,629
of you know the kernel address space and
user address spaces

312
00:06:02,629 --> 00:06:02,639
user address spaces
 

313
00:06:02,639 --> 00:06:08,230
user address spaces
so that's the the main plan

314
00:06:08,230 --> 00:06:08,240

 

315
00:06:08,240 --> 00:06:11,110

okay so uh so i guess you know number of

316
00:06:11,110 --> 00:06:11,120
okay so uh so i guess you know number of
 

317
00:06:11,120 --> 00:06:12,469
okay so uh so i guess you know number of
you mentioned

318
00:06:12,469 --> 00:06:12,479
you mentioned
 

319
00:06:12,479 --> 00:06:14,390
you mentioned
in the response to this question you

320
00:06:14,390 --> 00:06:14,400
in the response to this question you
 

321
00:06:14,400 --> 00:06:15,590
in the response to this question you
know

322
00:06:15,590 --> 00:06:15,600
know
 

323
00:06:15,600 --> 00:06:18,629
know
one driving uh reason to have virtual

324
00:06:18,629 --> 00:06:18,639
one driving uh reason to have virtual
 

325
00:06:18,639 --> 00:06:19,990
one driving uh reason to have virtual
memory is because you can

326
00:06:19,990 --> 00:06:20,000
memory is because you can
 

327
00:06:20,000 --> 00:06:22,309
memory is because you can
use it to achieve isolation if you set

328
00:06:22,309 --> 00:06:22,319
use it to achieve isolation if you set
 

329
00:06:22,319 --> 00:06:24,070
use it to achieve isolation if you set
up the page tables correctly

330
00:06:24,070 --> 00:06:24,080
up the page tables correctly
 

331
00:06:24,080 --> 00:06:26,150
up the page tables correctly
and program them correctly then you can

332
00:06:26,150 --> 00:06:26,160
and program them correctly then you can
 

333
00:06:26,160 --> 00:06:27,110
and program them correctly then you can
in principle achieve

334
00:06:27,110 --> 00:06:27,120
in principle achieve
 

335
00:06:27,120 --> 00:06:29,909
in principle achieve
a strong isolation and so this is to

336
00:06:29,909 --> 00:06:29,919
a strong isolation and so this is to
 

337
00:06:29,919 --> 00:06:31,590
a strong isolation and so this is to
remind us again you know what we want

338
00:06:31,590 --> 00:06:31,600
remind us again you know what we want
 

339
00:06:31,600 --> 00:06:31,990
remind us again you know what we want
with

340
00:06:31,990 --> 00:06:32,000
with
 

341
00:06:32,000 --> 00:06:34,150
with
from isolation let's just say you know

342
00:06:34,150 --> 00:06:34,160
from isolation let's just say you know
 

343
00:06:34,160 --> 00:06:35,990
from isolation let's just say you know
our standard picture we have some user

344
00:06:35,990 --> 00:06:36,000
our standard picture we have some user
 

345
00:06:36,000 --> 00:06:37,830
our standard picture we have some user
applications like the shell

346
00:06:37,830 --> 00:06:37,840
applications like the shell
 

347
00:06:37,840 --> 00:06:39,990
applications like the shell
you know cat you know all the util

348
00:06:39,990 --> 00:06:40,000
you know cat you know all the util
 

349
00:06:40,000 --> 00:06:41,270
you know cat you know all the util
things that you built

350
00:06:41,270 --> 00:06:41,280
things that you built
 

351
00:06:41,280 --> 00:06:44,629
things that you built
uh in lab one and you know we have

352
00:06:44,629 --> 00:06:44,639
uh in lab one and you know we have
 

353
00:06:44,639 --> 00:06:47,590
uh in lab one and you know we have
the kernel or you know the kernel

354
00:06:47,590 --> 00:06:47,600
the kernel or you know the kernel
 

355
00:06:47,600 --> 00:06:48,950
the kernel or you know the kernel
sitting below through the operating

356
00:06:48,950 --> 00:06:48,960
sitting below through the operating
 

357
00:06:48,960 --> 00:06:51,270
sitting below through the operating
system or sitting in kernel space

358
00:06:51,270 --> 00:06:51,280
system or sitting in kernel space
 

359
00:06:51,280 --> 00:06:54,390
system or sitting in kernel space
and you know what we like to do is sort

360
00:06:54,390 --> 00:06:54,400
and you know what we like to do is sort
 

361
00:06:54,400 --> 00:06:55,029
and you know what we like to do is sort
of have

362
00:06:55,029 --> 00:06:55,039
of have
 

363
00:06:55,039 --> 00:06:58,150
of have
you know boxes around these

364
00:06:58,150 --> 00:06:58,160
you know boxes around these
 

365
00:06:58,160 --> 00:07:01,029
you know boxes around these
uh applications so that they can really

366
00:07:01,029 --> 00:07:01,039
uh applications so that they can really
 

367
00:07:01,039 --> 00:07:02,150
uh applications so that they can really
effective each other

368
00:07:02,150 --> 00:07:02,160
effective each other
 

369
00:07:02,160 --> 00:07:04,309
effective each other
and similarly you know we want them uh

370
00:07:04,309 --> 00:07:04,319
and similarly you know we want them uh
 

371
00:07:04,319 --> 00:07:05,350
and similarly you know we want them uh
to be

372
00:07:05,350 --> 00:07:05,360
to be
 

373
00:07:05,360 --> 00:07:07,510
to be
completely sort of independent of the

374
00:07:07,510 --> 00:07:07,520
completely sort of independent of the
 

375
00:07:07,520 --> 00:07:08,870
completely sort of independent of the
kernel in the operating system so that

376
00:07:08,870 --> 00:07:08,880
kernel in the operating system so that
 

377
00:07:08,880 --> 00:07:10,309
kernel in the operating system so that
like if an application does something

378
00:07:10,309 --> 00:07:10,319
like if an application does something
 

379
00:07:10,319 --> 00:07:10,950
like if an application does something
either

380
00:07:10,950 --> 00:07:10,960
either
 

381
00:07:10,960 --> 00:07:13,990
either
accidentally bad or maliciously bad that

382
00:07:13,990 --> 00:07:14,000
accidentally bad or maliciously bad that
 

383
00:07:14,000 --> 00:07:15,270
accidentally bad or maliciously bad that
doesn't really affect the operating

384
00:07:15,270 --> 00:07:15,280
doesn't really affect the operating
 

385
00:07:15,280 --> 00:07:17,909
doesn't really affect the operating
system and so that's our goal

386
00:07:17,909 --> 00:07:17,919
system and so that's our goal
 

387
00:07:17,919 --> 00:07:21,189
system and so that's our goal
and the particular aspect of the problem

388
00:07:21,189 --> 00:07:21,199
and the particular aspect of the problem
 

389
00:07:21,199 --> 00:07:21,670
and the particular aspect of the problem
that we

390
00:07:21,670 --> 00:07:21,680
that we
 

391
00:07:21,680 --> 00:07:24,309
that we
want to focus on today is the memory

392
00:07:24,309 --> 00:07:24,319
want to focus on today is the memory
 

393
00:07:24,319 --> 00:07:25,430
want to focus on today is the memory
side of things

394
00:07:25,430 --> 00:07:25,440
side of things
 

395
00:07:25,440 --> 00:07:28,830
side of things
so we really want to focus on memory

396
00:07:28,830 --> 00:07:28,840
so we really want to focus on memory
 

397
00:07:28,840 --> 00:07:30,629
so we really want to focus on memory
isolation and

398
00:07:30,629 --> 00:07:30,639
isolation and
 

399
00:07:30,639 --> 00:07:32,629
isolation and
by default you know if we don't do

400
00:07:32,629 --> 00:07:32,639
by default you know if we don't do
 

401
00:07:32,639 --> 00:07:34,469
by default you know if we don't do
anything you know we don't really have

402
00:07:34,469 --> 00:07:34,479
anything you know we don't really have
 

403
00:07:34,479 --> 00:07:36,390
anything you know we don't really have
memory isolation right because

404
00:07:36,390 --> 00:07:36,400
memory isolation right because
 

405
00:07:36,400 --> 00:07:37,909
memory isolation right because
if you think about it you know there's

406
00:07:37,909 --> 00:07:37,919
if you think about it you know there's
 

407
00:07:37,919 --> 00:07:39,589
if you think about it you know there's
going to be one you know there is five

408
00:07:39,589 --> 00:07:39,599
going to be one you know there is five
 

409
00:07:39,599 --> 00:07:41,110
going to be one you know there is five
boards that i showed you last week you

410
00:07:41,110 --> 00:07:41,120
boards that i showed you last week you
 

411
00:07:41,120 --> 00:07:42,629
boards that i showed you last week you
know it has like a memory

412
00:07:42,629 --> 00:07:42,639
know it has like a memory
 

413
00:07:42,639 --> 00:07:45,749
know it has like a memory
a bunch of dram chips uh and

414
00:07:45,749 --> 00:07:45,759
a bunch of dram chips uh and
 

415
00:07:45,759 --> 00:07:48,070
a bunch of dram chips uh and
in the drm chips you know the code for

416
00:07:48,070 --> 00:07:48,080
in the drm chips you know the code for
 

417
00:07:48,080 --> 00:07:49,589
in the drm chips you know the code for
these applications

418
00:07:49,589 --> 00:07:49,599
these applications
 

419
00:07:49,599 --> 00:07:51,670
these applications
uh is stored and so for example

420
00:07:51,670 --> 00:07:51,680
uh is stored and so for example
 

421
00:07:51,680 --> 00:07:54,309
uh is stored and so for example
somewhere in the memory is the kernel

422
00:07:54,309 --> 00:07:54,319
somewhere in the memory is the kernel
 

423
00:07:54,319 --> 00:07:56,629
somewhere in the memory is the kernel
you know text and data stack everything

424
00:07:56,629 --> 00:07:56,639
you know text and data stack everything
 

425
00:07:56,639 --> 00:07:58,710
you know text and data stack everything
somewhere in memory is the shell if the

426
00:07:58,710 --> 00:07:58,720
somewhere in memory is the shell if the
 

427
00:07:58,720 --> 00:07:59,909
somewhere in memory is the shell if the
shell is running

428
00:07:59,909 --> 00:07:59,919
shell is running
 

429
00:07:59,919 --> 00:08:01,909
shell is running
uh somewhere in memory is the cat

430
00:08:01,909 --> 00:08:01,919
uh somewhere in memory is the cat
 

431
00:08:01,919 --> 00:08:03,350
uh somewhere in memory is the cat
program

432
00:08:03,350 --> 00:08:03,360
program
 

433
00:08:03,360 --> 00:08:05,990
program
um and so there's one sort of physical

434
00:08:05,990 --> 00:08:06,000
um and so there's one sort of physical
 

435
00:08:06,000 --> 00:08:07,189
um and so there's one sort of physical
memory you know starting from someone

436
00:08:07,189 --> 00:08:07,199
memory you know starting from someone
 

437
00:08:07,199 --> 00:08:08,150
memory you know starting from someone
through zero to

438
00:08:08,150 --> 00:08:08,160
through zero to
 

439
00:08:08,160 --> 00:08:11,110
through zero to
you know so you know a big big address

440
00:08:11,110 --> 00:08:11,120
you know so you know a big big address
 

441
00:08:11,120 --> 00:08:12,469
you know so you know a big big address
you know depending how much memory we

442
00:08:12,469 --> 00:08:12,479
you know depending how much memory we
 

443
00:08:12,479 --> 00:08:14,070
you know depending how much memory we
actually have in our machine

444
00:08:14,070 --> 00:08:14,080
actually have in our machine
 

445
00:08:14,080 --> 00:08:15,589
actually have in our machine
and in that physical memory all these

446
00:08:15,589 --> 00:08:15,599
and in that physical memory all these
 

447
00:08:15,599 --> 00:08:17,189
and in that physical memory all these
programs must be present

448
00:08:17,189 --> 00:08:17,199
programs must be present
 

449
00:08:17,199 --> 00:08:19,270
programs must be present
and otherwise you know the processor

450
00:08:19,270 --> 00:08:19,280
and otherwise you know the processor
 

451
00:08:19,280 --> 00:08:22,230
and otherwise you know the processor
can't even execute their instructions

452
00:08:22,230 --> 00:08:22,240
can't even execute their instructions
 

453
00:08:22,240 --> 00:08:23,909
can't even execute their instructions
and so what the risk you know clearly

454
00:08:23,909 --> 00:08:23,919
and so what the risk you know clearly
 

455
00:08:23,919 --> 00:08:26,390
and so what the risk you know clearly
here is that let's say you know

456
00:08:26,390 --> 00:08:26,400
here is that let's say you know
 

457
00:08:26,400 --> 00:08:27,589
here is that let's say you know
let's make it a little bit you know

458
00:08:27,589 --> 00:08:27,599
let's make it a little bit you know
 

459
00:08:27,599 --> 00:08:29,110
let's make it a little bit you know
simplistic but let's say you know the

460
00:08:29,110 --> 00:08:29,120
simplistic but let's say you know the
 

461
00:08:29,120 --> 00:08:29,830
simplistic but let's say you know the
shell

462
00:08:29,830 --> 00:08:29,840
shell
 

463
00:08:29,840 --> 00:08:32,149
shell
you know sits from being addressed zero

464
00:08:32,149 --> 00:08:32,159
you know sits from being addressed zero
 

465
00:08:32,159 --> 00:08:34,630
you know sits from being addressed zero
to address 200

466
00:08:34,630 --> 00:08:34,640
to address 200
 

467
00:08:34,640 --> 00:08:37,670
to address 200
or 2000 from 1000 to 2000.

468
00:08:37,670 --> 00:08:37,680
or 2000 from 1000 to 2000.
 

469
00:08:37,680 --> 00:08:39,350
or 2000 from 1000 to 2000.
and let's say you know the you know

470
00:08:39,350 --> 00:08:39,360
and let's say you know the you know
 

471
00:08:39,360 --> 00:08:40,709
and let's say you know the you know
whatever cat has a

472
00:08:40,709 --> 00:08:40,719
whatever cat has a
 

473
00:08:40,719 --> 00:08:44,149
whatever cat has a
programming error uh it loads you know

474
00:08:44,149 --> 00:08:44,159
programming error uh it loads you know
 

475
00:08:44,159 --> 00:08:47,670
programming error uh it loads you know
in a register a0

476
00:08:47,670 --> 00:08:47,680
in a register a0
 

477
00:08:47,680 --> 00:08:50,310
in a register a0
let's say it loads a thousand the

478
00:08:50,310 --> 00:08:50,320
let's say it loads a thousand the
 

479
00:08:50,320 --> 00:08:51,990
let's say it loads a thousand the
address basically corresponding to the

480
00:08:51,990 --> 00:08:52,000
address basically corresponding to the
 

481
00:08:52,000 --> 00:08:53,350
address basically corresponding to the
start of the shell

482
00:08:53,350 --> 00:08:53,360
start of the shell
 

483
00:08:53,360 --> 00:08:55,750
start of the shell
and then you know by accident uh you

484
00:08:55,750 --> 00:08:55,760
and then you know by accident uh you
 

485
00:08:55,760 --> 00:08:57,670
and then you know by accident uh you
know it executes the instruction

486
00:08:57,670 --> 00:08:57,680
know it executes the instruction
 

487
00:08:57,680 --> 00:09:00,710
know it executes the instruction
you know dollar seven uh

488
00:09:00,710 --> 00:09:00,720
you know dollar seven uh
 

489
00:09:00,720 --> 00:09:03,910
you know dollar seven uh
a zero correct which has the effect of

490
00:09:03,910 --> 00:09:03,920
a zero correct which has the effect of
 

491
00:09:03,920 --> 00:09:04,150
a zero correct which has the effect of
the

492
00:09:04,150 --> 00:09:04,160
the
 

493
00:09:04,160 --> 00:09:06,230
the
basically it writes value seven to the

494
00:09:06,230 --> 00:09:06,240
basically it writes value seven to the
 

495
00:09:06,240 --> 00:09:08,150
basically it writes value seven to the
address you know one thousand and so and

496
00:09:08,150 --> 00:09:08,160
address you know one thousand and so and
 

497
00:09:08,160 --> 00:09:09,990
address you know one thousand and so and
then it would be scribbling over

498
00:09:09,990 --> 00:09:10,000
then it would be scribbling over
 

499
00:09:10,000 --> 00:09:12,550
then it would be scribbling over
you know the basically the memory image

500
00:09:12,550 --> 00:09:12,560
you know the basically the memory image
 

501
00:09:12,560 --> 00:09:14,790
you know the basically the memory image
uh that belongs to the shell

502
00:09:14,790 --> 00:09:14,800
uh that belongs to the shell
 

503
00:09:14,800 --> 00:09:16,630
uh that belongs to the shell
and so that would you know certainly not

504
00:09:16,630 --> 00:09:16,640
and so that would you know certainly not
 

505
00:09:16,640 --> 00:09:19,110
and so that would you know certainly not
uh that certainly would break isolation

506
00:09:19,110 --> 00:09:19,120
uh that certainly would break isolation
 

507
00:09:19,120 --> 00:09:22,310
uh that certainly would break isolation
uh and be quite undesirable

508
00:09:22,310 --> 00:09:22,320
uh and be quite undesirable
 

509
00:09:22,320 --> 00:09:24,230
uh and be quite undesirable
and so you know we want something that

510
00:09:24,230 --> 00:09:24,240
and so you know we want something that
 

511
00:09:24,240 --> 00:09:25,829
and so you know we want something that
basically really separates these

512
00:09:25,829 --> 00:09:25,839
basically really separates these
 

513
00:09:25,839 --> 00:09:27,190
basically really separates these
memories from the different programs

514
00:09:27,190 --> 00:09:27,200
memories from the different programs
 

515
00:09:27,200 --> 00:09:28,790
memories from the different programs
from each other so that things like that

516
00:09:28,790 --> 00:09:28,800
from each other so that things like that
 

517
00:09:28,800 --> 00:09:32,230
from each other so that things like that
just cannot happen so one way

518
00:09:32,230 --> 00:09:32,240
just cannot happen so one way
 

519
00:09:32,240 --> 00:09:35,990
just cannot happen so one way
you know to do that uh is an idea that's

520
00:09:35,990 --> 00:09:36,000
you know to do that uh is an idea that's
 

521
00:09:36,000 --> 00:09:37,269
you know to do that uh is an idea that's
you know typically called the dress

522
00:09:37,269 --> 00:09:37,279
you know typically called the dress
 

523
00:09:37,279 --> 00:09:44,470
you know typically called the dress
basis

524
00:09:44,470 --> 00:09:44,480

 

525
00:09:44,480 --> 00:09:47,829

and the basic idea is straightforward

526
00:09:47,829 --> 00:09:47,839
and the basic idea is straightforward
 

527
00:09:47,839 --> 00:09:49,590
and the basic idea is straightforward
what we want to do is basically give

528
00:09:49,590 --> 00:09:49,600
what we want to do is basically give
 

529
00:09:49,600 --> 00:09:50,230
what we want to do is basically give
every

530
00:09:50,230 --> 00:09:50,240
every
 

531
00:09:50,240 --> 00:09:53,030
every
application including the kernel its own

532
00:09:53,030 --> 00:09:53,040
application including the kernel its own
 

533
00:09:53,040 --> 00:09:55,110
application including the kernel its own
address space

534
00:09:55,110 --> 00:09:55,120
address space
 

535
00:09:55,120 --> 00:09:56,550
address space
and so we can think about this like

536
00:09:56,550 --> 00:09:56,560
and so we can think about this like
 

537
00:09:56,560 --> 00:09:58,630
and so we can think about this like
example use cat running

538
00:09:58,630 --> 00:09:58,640
example use cat running
 

539
00:09:58,640 --> 00:10:00,150
example use cat running
you know it has an address space

540
00:10:00,150 --> 00:10:00,160
you know it has an address space
 

541
00:10:00,160 --> 00:10:01,829
you know it has an address space
starting at zero you know

542
00:10:01,829 --> 00:10:01,839
starting at zero you know
 

543
00:10:01,839 --> 00:10:04,150
starting at zero you know
to whatever so maximum value you know

544
00:10:04,150 --> 00:10:04,160
to whatever so maximum value you know
 

545
00:10:04,160 --> 00:10:05,190
to whatever so maximum value you know
there's a shelra

546
00:10:05,190 --> 00:10:05,200
there's a shelra
 

547
00:10:05,200 --> 00:10:06,870
there's a shelra
has an address space its own address

548
00:10:06,870 --> 00:10:06,880
has an address space its own address
 

549
00:10:06,880 --> 00:10:09,110
has an address space its own address
space also starting at address zero

550
00:10:09,110 --> 00:10:09,120
space also starting at address zero
 

551
00:10:09,120 --> 00:10:11,829
space also starting at address zero
uh going to some value you know the

552
00:10:11,829 --> 00:10:11,839
uh going to some value you know the
 

553
00:10:11,839 --> 00:10:14,630
uh going to some value you know the
kernel has its own address space

554
00:10:14,630 --> 00:10:14,640
kernel has its own address space
 

555
00:10:14,640 --> 00:10:17,670
kernel has its own address space
os has its own address space

556
00:10:17,670 --> 00:10:17,680
os has its own address space
 

557
00:10:17,680 --> 00:10:20,310
os has its own address space
and and so one example when cat you know

558
00:10:20,310 --> 00:10:20,320
and and so one example when cat you know
 

559
00:10:20,320 --> 00:10:22,150
and and so one example when cat you know
refers to really we go back to our you

560
00:10:22,150 --> 00:10:22,160
refers to really we go back to our you
 

561
00:10:22,160 --> 00:10:23,829
refers to really we go back to our you
know the example of the previous slide

562
00:10:23,829 --> 00:10:23,839
know the example of the previous slide
 

563
00:10:23,839 --> 00:10:24,230
know the example of the previous slide
where

564
00:10:24,230 --> 00:10:24,240
where
 

565
00:10:24,240 --> 00:10:27,590
where
you know we did uh whatever store

566
00:10:27,590 --> 00:10:27,600
you know we did uh whatever store
 

567
00:10:27,600 --> 00:10:30,870
you know we did uh whatever store
seven to you know a0

568
00:10:30,870 --> 00:10:30,880
seven to you know a0
 

569
00:10:30,880 --> 00:10:33,509
seven to you know a0
and let's say in a0 there's the value of

570
00:10:33,509 --> 00:10:33,519
and let's say in a0 there's the value of
 

571
00:10:33,519 --> 00:10:34,710
and let's say in a0 there's the value of
1000.

572
00:10:34,710 --> 00:10:34,720
1000.
 

573
00:10:34,720 --> 00:10:36,470
1000.
you know if cat you know executes an

574
00:10:36,470 --> 00:10:36,480
you know if cat you know executes an
 

575
00:10:36,480 --> 00:10:39,110
you know if cat you know executes an
instruction uh it will write to the

576
00:10:39,110 --> 00:10:39,120
instruction uh it will write to the
 

577
00:10:39,120 --> 00:10:42,150
instruction uh it will write to the
address 1000 but it is its own address

578
00:10:42,150 --> 00:10:42,160
address 1000 but it is its own address
 

579
00:10:42,160 --> 00:10:42,949
address 1000 but it is its own address
1000.

580
00:10:42,949 --> 00:10:42,959
1000.
 

581
00:10:42,959 --> 00:10:44,949
1000.
it's not you know the address of the

582
00:10:44,949 --> 00:10:44,959
it's not you know the address of the
 

583
00:10:44,959 --> 00:10:46,310
it's not you know the address of the
1000 of the shell

584
00:10:46,310 --> 00:10:46,320
1000 of the shell
 

585
00:10:46,320 --> 00:10:48,790
1000 of the shell
so basically every program runs with its

586
00:10:48,790 --> 00:10:48,800
so basically every program runs with its
 

587
00:10:48,800 --> 00:10:49,910
so basically every program runs with its
own address space

588
00:10:49,910 --> 00:10:49,920
own address space
 

589
00:10:49,920 --> 00:10:52,470
own address space
has its own value and those address

590
00:10:52,470 --> 00:10:52,480
has its own value and those address
 

591
00:10:52,480 --> 00:10:54,389
has its own value and those address
spaces are completely independent

592
00:10:54,389 --> 00:10:54,399
spaces are completely independent
 

593
00:10:54,399 --> 00:10:56,389
spaces are completely independent
uh you know in this notion of different

594
00:10:56,389 --> 00:10:56,399
uh you know in this notion of different
 

595
00:10:56,399 --> 00:10:57,670
uh you know in this notion of different
different address spaces

596
00:10:57,670 --> 00:10:57,680
different address spaces
 

597
00:10:57,680 --> 00:10:59,430
different address spaces
cat doesn't really have an ability to

598
00:10:59,430 --> 00:10:59,440
cat doesn't really have an ability to
 

599
00:10:59,440 --> 00:11:01,190
cat doesn't really have an ability to
even refer to

600
00:11:01,190 --> 00:11:01,200
even refer to
 

601
00:11:01,200 --> 00:11:03,030
even refer to
an address that actually belongs to the

602
00:11:03,030 --> 00:11:03,040
an address that actually belongs to the
 

603
00:11:03,040 --> 00:11:04,790
an address that actually belongs to the
shell

604
00:11:04,790 --> 00:11:04,800
shell
 

605
00:11:04,800 --> 00:11:07,990
shell
and so that's sort of the the game that

606
00:11:07,990 --> 00:11:08,000
and so that's sort of the the game that
 

607
00:11:08,000 --> 00:11:09,670
and so that's sort of the the game that
we're the end goal that we'd like to

608
00:11:09,670 --> 00:11:09,680
we're the end goal that we'd like to
 

609
00:11:09,680 --> 00:11:10,230
we're the end goal that we'd like to
achieve

610
00:11:10,230 --> 00:11:10,240
achieve
 

611
00:11:10,240 --> 00:11:11,509
achieve
because this is going to provide us with

612
00:11:11,509 --> 00:11:11,519
because this is going to provide us with
 

613
00:11:11,519 --> 00:11:13,350
because this is going to provide us with
strong isolation because you know

614
00:11:13,350 --> 00:11:13,360
strong isolation because you know
 

615
00:11:13,360 --> 00:11:15,269
strong isolation because you know
it is just not possible for cat to refer

616
00:11:15,269 --> 00:11:15,279
it is just not possible for cat to refer
 

617
00:11:15,279 --> 00:11:16,949
it is just not possible for cat to refer
to any other memory that is not

618
00:11:16,949 --> 00:11:16,959
to any other memory that is not
 

619
00:11:16,959 --> 00:11:20,069
to any other memory that is not
you know its own and so our goal now is

620
00:11:20,069 --> 00:11:20,079
you know its own and so our goal now is
 

621
00:11:20,079 --> 00:11:21,430
you know its own and so our goal now is
to basically sort of

622
00:11:21,430 --> 00:11:21,440
to basically sort of
 

623
00:11:21,440 --> 00:11:24,710
to basically sort of
figure out how to multiplex if you will

624
00:11:24,710 --> 00:11:24,720
figure out how to multiplex if you will
 

625
00:11:24,720 --> 00:11:27,190
figure out how to multiplex if you will
all these different address spaces on a

626
00:11:27,190 --> 00:11:27,200
all these different address spaces on a
 

627
00:11:27,200 --> 00:11:28,389
all these different address spaces on a
single

628
00:11:28,389 --> 00:11:28,399
single
 

629
00:11:28,399 --> 00:11:30,069
single
physical memory because in the end we

630
00:11:30,069 --> 00:11:30,079
physical memory because in the end we
 

631
00:11:30,079 --> 00:11:32,230
physical memory because in the end we
only have a bunch of dram chips

632
00:11:32,230 --> 00:11:32,240
only have a bunch of dram chips
 

633
00:11:32,240 --> 00:11:34,550
only have a bunch of dram chips
uh where you know or ram chips where the

634
00:11:34,550 --> 00:11:34,560
uh where you know or ram chips where the
 

635
00:11:34,560 --> 00:11:36,870
uh where you know or ram chips where the
memory is located

636
00:11:36,870 --> 00:11:36,880
memory is located
 

637
00:11:36,880 --> 00:11:40,230
memory is located
and so uh

638
00:11:40,230 --> 00:11:40,240

 

639
00:11:40,240 --> 00:11:42,630

uh that's another plan okay yeah uh i'm

640
00:11:42,630 --> 00:11:42,640
uh that's another plan okay yeah uh i'm
 

641
00:11:42,640 --> 00:11:46,150
uh that's another plan okay yeah uh i'm
here you have a question go ahead

642
00:11:46,150 --> 00:11:46,160

 

643
00:11:46,160 --> 00:11:48,710

yeah so i'm wondering uh in the

644
00:11:48,710 --> 00:11:48,720
yeah so i'm wondering uh in the
 

645
00:11:48,720 --> 00:11:50,550
yeah so i'm wondering uh in the
configuration of the

646
00:11:50,550 --> 00:11:50,560
configuration of the
 

647
00:11:50,560 --> 00:11:52,949
configuration of the
physical hardware there's only so much

648
00:11:52,949 --> 00:11:52,959
physical hardware there's only so much
 

649
00:11:52,959 --> 00:11:54,150
physical hardware there's only so much
space

650
00:11:54,150 --> 00:11:54,160
space
 

651
00:11:54,160 --> 00:11:56,790
space
and in the virtual memory layout there's

652
00:11:56,790 --> 00:11:56,800
and in the virtual memory layout there's
 

653
00:11:56,800 --> 00:11:59,190
and in the virtual memory layout there's
also a max virtual address

654
00:11:59,190 --> 00:11:59,200
also a max virtual address
 

655
00:11:59,200 --> 00:12:02,230
also a max virtual address
uh by design is the virtual address

656
00:12:02,230 --> 00:12:02,240
uh by design is the virtual address
 

657
00:12:02,240 --> 00:12:05,590
uh by design is the virtual address
made to be small enough i know that it

658
00:12:05,590 --> 00:12:05,600
made to be small enough i know that it
 

659
00:12:05,600 --> 00:12:07,829
made to be small enough i know that it
no not necessarily you know the virtual

660
00:12:07,829 --> 00:12:07,839
no not necessarily you know the virtual
 

661
00:12:07,839 --> 00:12:09,190
no not necessarily you know the virtual
dress space could be bigger than the

662
00:12:09,190 --> 00:12:09,200
dress space could be bigger than the
 

663
00:12:09,200 --> 00:12:10,629
dress space could be bigger than the
physical memory the physical memory

664
00:12:10,629 --> 00:12:10,639
physical memory the physical memory
 

665
00:12:10,639 --> 00:12:11,910
physical memory the physical memory
could be bigger than the virtual address

666
00:12:11,910 --> 00:12:11,920
could be bigger than the virtual address
 

667
00:12:11,920 --> 00:12:12,710
could be bigger than the virtual address
phase

668
00:12:12,710 --> 00:12:12,720
phase
 

669
00:12:12,720 --> 00:12:14,230
phase
uh and we'll see in a second how that

670
00:12:14,230 --> 00:12:14,240
uh and we'll see in a second how that
 

671
00:12:14,240 --> 00:12:15,750
uh and we'll see in a second how that
all can happen and it's actually one of

672
00:12:15,750 --> 00:12:15,760
all can happen and it's actually one of
 

673
00:12:15,760 --> 00:12:16,069
all can happen and it's actually one of
the

674
00:12:16,069 --> 00:12:16,079
the
 

675
00:12:16,079 --> 00:12:18,310
the
you know cool parts about as we will see

676
00:12:18,310 --> 00:12:18,320
you know cool parts about as we will see
 

677
00:12:18,320 --> 00:12:19,670
you know cool parts about as we will see
with page tables

678
00:12:19,670 --> 00:12:19,680
with page tables
 

679
00:12:19,680 --> 00:12:23,110
with page tables
that's extremely flexible so is it

680
00:12:23,110 --> 00:12:23,120
that's extremely flexible so is it
 

681
00:12:23,120 --> 00:12:25,670
that's extremely flexible so is it
is it possible that like the physical

682
00:12:25,670 --> 00:12:25,680
is it possible that like the physical
 

683
00:12:25,680 --> 00:12:26,310
is it possible that like the physical
memory

684
00:12:26,310 --> 00:12:26,320
memory
 

685
00:12:26,320 --> 00:12:29,269
memory
gets exhausted uh because so many

686
00:12:29,269 --> 00:12:29,279
gets exhausted uh because so many
 

687
00:12:29,279 --> 00:12:30,550
gets exhausted uh because so many
processes use up

688
00:12:30,550 --> 00:12:30,560
processes use up
 

689
00:12:30,560 --> 00:12:32,389
processes use up
all their virtual space yeah that's

690
00:12:32,389 --> 00:12:32,399
all their virtual space yeah that's
 

691
00:12:32,399 --> 00:12:33,750
all their virtual space yeah that's
certainly possible

692
00:12:33,750 --> 00:12:33,760
certainly possible
 

693
00:12:33,760 --> 00:12:35,750
certainly possible
uh and we'll see in a second how for

694
00:12:35,750 --> 00:12:35,760
uh and we'll see in a second how for
 

695
00:12:35,760 --> 00:12:37,350
uh and we'll see in a second how for
example you know if you have a

696
00:12:37,350 --> 00:12:37,360
example you know if you have a
 

697
00:12:37,360 --> 00:12:38,949
example you know if you have a
bunch of big applications that each have

698
00:12:38,949 --> 00:12:38,959
bunch of big applications that each have
 

699
00:12:38,959 --> 00:12:40,949
bunch of big applications that each have
big page tables and they allocate a lot

700
00:12:40,949 --> 00:12:40,959
big page tables and they allocate a lot
 

701
00:12:40,959 --> 00:12:42,069
big page tables and they allocate a lot
of memory you know at some point you're

702
00:12:42,069 --> 00:12:42,079
of memory you know at some point you're
 

703
00:12:42,079 --> 00:12:43,829
of memory you know at some point you're
gonna run out of memory

704
00:12:43,829 --> 00:12:43,839
gonna run out of memory
 

705
00:12:43,839 --> 00:12:46,949
gonna run out of memory
i see thanks and so where does it show

706
00:12:46,949 --> 00:12:46,959
i see thanks and so where does it show
 

707
00:12:46,959 --> 00:12:50,829
i see thanks and so where does it show
up in xv6

708
00:12:50,829 --> 00:12:50,839

 

709
00:12:50,839 --> 00:12:52,710

anybody

710
00:12:52,710 --> 00:12:52,720
anybody
 

711
00:12:52,720 --> 00:12:55,430
anybody
you you sort of touched on it a little

712
00:12:55,430 --> 00:12:55,440
you you sort of touched on it a little
 

713
00:12:55,440 --> 00:12:56,629
you you sort of touched on it a little
bit in the

714
00:12:56,629 --> 00:12:56,639
bit in the
 

715
00:12:56,639 --> 00:13:01,269
bit in the
cisco lab that you're currently doing

716
00:13:01,269 --> 00:13:01,279

 

717
00:13:01,279 --> 00:13:08,629

where are pages allocated

718
00:13:08,629 --> 00:13:08,639

 

719
00:13:08,639 --> 00:13:10,790

or if you did the cisco lab and you

720
00:13:10,790 --> 00:13:10,800
or if you did the cisco lab and you
 

721
00:13:10,800 --> 00:13:12,310
or if you did the cisco lab and you
finished it you know one part of the

722
00:13:12,310 --> 00:13:12,320
finished it you know one part of the
 

723
00:13:12,320 --> 00:13:13,750
finished it you know one part of the
physical life correctly is printing how

724
00:13:13,750 --> 00:13:13,760
physical life correctly is printing how
 

725
00:13:13,760 --> 00:13:17,750
physical life correctly is printing how
much free memory there is

726
00:13:17,750 --> 00:13:17,760

 

727
00:13:17,760 --> 00:13:20,870

k alec yeah chaok right for chao it has

728
00:13:20,870 --> 00:13:20,880
k alec yeah chaok right for chao it has
 

729
00:13:20,880 --> 00:13:22,310
k alec yeah chaok right for chao it has
some list of three pages

730
00:13:22,310 --> 00:13:22,320
some list of three pages
 

731
00:13:22,320 --> 00:13:24,629
some list of three pages
if that list of three places is empty or

732
00:13:24,629 --> 00:13:24,639
if that list of three places is empty or
 

733
00:13:24,639 --> 00:13:26,230
if that list of three places is empty or
runs out at some point

734
00:13:26,230 --> 00:13:26,240
runs out at some point
 

735
00:13:26,240 --> 00:13:27,990
runs out at some point
then you know chaotic is going to return

736
00:13:27,990 --> 00:13:28,000
then you know chaotic is going to return
 

737
00:13:28,000 --> 00:13:29,269
then you know chaotic is going to return
a null pointer

738
00:13:29,269 --> 00:13:29,279
a null pointer
 

739
00:13:29,279 --> 00:13:30,870
a null pointer
and hopefully the operating system does

740
00:13:30,870 --> 00:13:30,880
and hopefully the operating system does
 

741
00:13:30,880 --> 00:13:32,310
and hopefully the operating system does
something sensible and that basically

742
00:13:32,310 --> 00:13:32,320
something sensible and that basically
 

743
00:13:32,320 --> 00:13:34,230
something sensible and that basically
propagates back to the user application

744
00:13:34,230 --> 00:13:34,240
propagates back to the user application
 

745
00:13:34,240 --> 00:13:35,350
propagates back to the user application
saying like well you know

746
00:13:35,350 --> 00:13:35,360
saying like well you know
 

747
00:13:35,360 --> 00:13:37,190
saying like well you know
no more memory for you or no more memory

748
00:13:37,190 --> 00:13:37,200
no more memory for you or no more memory
 

749
00:13:37,200 --> 00:13:40,949
no more memory for you or no more memory
in total for nobody

750
00:13:40,949 --> 00:13:40,959

 

751
00:13:40,959 --> 00:13:44,710

okay and just a job for the os to handle

752
00:13:44,710 --> 00:13:44,720
okay and just a job for the os to handle
 

753
00:13:44,720 --> 00:13:46,150
okay and just a job for the os to handle
those cases gracefully

754
00:13:46,150 --> 00:13:46,160
those cases gracefully
 

755
00:13:46,160 --> 00:13:47,670
those cases gracefully
where it basically generally means you

756
00:13:47,670 --> 00:13:47,680
where it basically generally means you
 

757
00:13:47,680 --> 00:13:49,189
where it basically generally means you
know propagating an error message to the

758
00:13:49,189 --> 00:13:49,199
know propagating an error message to the
 

759
00:13:49,199 --> 00:13:57,189
know propagating an error message to the
user application

760
00:13:57,189 --> 00:13:57,199

 

761
00:13:57,199 --> 00:14:00,389

okay good um so how do we implement

762
00:14:00,389 --> 00:14:00,399
okay good um so how do we implement
 

763
00:14:00,399 --> 00:14:00,710
okay good um so how do we implement
these

764
00:14:00,710 --> 00:14:00,720
these
 

765
00:14:00,720 --> 00:14:02,949
these
address spaces you know how basically

766
00:14:02,949 --> 00:14:02,959
address spaces you know how basically
 

767
00:14:02,959 --> 00:14:04,550
address spaces you know how basically
multiplex all these address spaces

768
00:14:04,550 --> 00:14:04,560
multiplex all these address spaces
 

769
00:14:04,560 --> 00:14:06,550
multiplex all these address spaces
across a single physical memory

770
00:14:06,550 --> 00:14:06,560
across a single physical memory
 

771
00:14:06,560 --> 00:14:09,910
across a single physical memory
and the most common approach and a very

772
00:14:09,910 --> 00:14:09,920
and the most common approach and a very
 

773
00:14:09,920 --> 00:14:11,750
and the most common approach and a very
flexible approach is to use

774
00:14:11,750 --> 00:14:11,760
flexible approach is to use
 

775
00:14:11,760 --> 00:14:17,350
flexible approach is to use
page tables

776
00:14:17,350 --> 00:14:17,360
page tables
 

777
00:14:17,360 --> 00:14:19,910
page tables
um and the idea is uh and this is a

778
00:14:19,910 --> 00:14:19,920
um and the idea is uh and this is a
 

779
00:14:19,920 --> 00:14:21,030
um and the idea is uh and this is a
hardware support

780
00:14:21,030 --> 00:14:21,040
hardware support
 

781
00:14:21,040 --> 00:14:23,750
hardware support
so this is implemented in hardware by

782
00:14:23,750 --> 00:14:23,760
so this is implemented in hardware by
 

783
00:14:23,760 --> 00:14:24,550
so this is implemented in hardware by
the processor

784
00:14:24,550 --> 00:14:24,560
the processor
 

785
00:14:24,560 --> 00:14:26,710
the processor
or uh by a unit called the memory

786
00:14:26,710 --> 00:14:26,720
or uh by a unit called the memory
 

787
00:14:26,720 --> 00:14:27,990
or uh by a unit called the memory
management unit

788
00:14:27,990 --> 00:14:28,000
management unit
 

789
00:14:28,000 --> 00:14:29,189
management unit
and so the picture that you sort of

790
00:14:29,189 --> 00:14:29,199
and so the picture that you sort of
 

791
00:14:29,199 --> 00:14:31,110
and so the picture that you sort of
should have in your head is you know you

792
00:14:31,110 --> 00:14:31,120
should have in your head is you know you
 

793
00:14:31,120 --> 00:14:32,629
should have in your head is you know you
have the cpu

794
00:14:32,629 --> 00:14:32,639
have the cpu
 

795
00:14:32,639 --> 00:14:34,310
have the cpu
that executes instructions you know

796
00:14:34,310 --> 00:14:34,320
that executes instructions you know
 

797
00:14:34,320 --> 00:14:35,910
that executes instructions you know
whatever our

798
00:14:35,910 --> 00:14:35,920
whatever our
 

799
00:14:35,920 --> 00:14:39,990
whatever our
you know uh uh our store instruction

800
00:14:39,990 --> 00:14:40,000
you know uh uh our store instruction
 

801
00:14:40,000 --> 00:14:42,829
you know uh uh our store instruction
that was you know putting dollar seven

802
00:14:42,829 --> 00:14:42,839
that was you know putting dollar seven
 

803
00:14:42,839 --> 00:14:44,470
that was you know putting dollar seven
into

804
00:14:44,470 --> 00:14:44,480
into
 

805
00:14:44,480 --> 00:14:47,509
into
uh a zero indirect

806
00:14:47,509 --> 00:14:47,519
uh a zero indirect
 

807
00:14:47,519 --> 00:14:48,710
uh a zero indirect
so it executes those kind of

808
00:14:48,710 --> 00:14:48,720
so it executes those kind of
 

809
00:14:48,720 --> 00:14:51,030
so it executes those kind of
instructions and you know one that

810
00:14:51,030 --> 00:14:51,040
instructions and you know one that
 

811
00:14:51,040 --> 00:14:52,629
instructions and you know one that
executes one is their story instruction

812
00:14:52,629 --> 00:14:52,639
executes one is their story instruction
 

813
00:14:52,639 --> 00:14:53,750
executes one is their story instruction
load instruction or whatever

814
00:14:53,750 --> 00:14:53,760
load instruction or whatever
 

815
00:14:53,760 --> 00:14:55,670
load instruction or whatever
anything that actually has an address

816
00:14:55,670 --> 00:14:55,680
anything that actually has an address
 

817
00:14:55,680 --> 00:14:56,790
anything that actually has an address
you know that address

818
00:14:56,790 --> 00:14:56,800
you know that address
 

819
00:14:56,800 --> 00:14:58,310
you know that address
uh we're going to think about as a

820
00:14:58,310 --> 00:14:58,320
uh we're going to think about as a
 

821
00:14:58,320 --> 00:14:59,990
uh we're going to think about as a
virtual address so it's not a physical

822
00:14:59,990 --> 00:15:00,000
virtual address so it's not a physical
 

823
00:15:00,000 --> 00:15:01,990
virtual address so it's not a physical
address it's a virtual address

824
00:15:01,990 --> 00:15:02,000
address it's a virtual address
 

825
00:15:02,000 --> 00:15:04,150
address it's a virtual address
and so for example the value in a0 that

826
00:15:04,150 --> 00:15:04,160
and so for example the value in a0 that
 

827
00:15:04,160 --> 00:15:05,269
and so for example the value in a0 that
we're using here

828
00:15:05,269 --> 00:15:05,279
we're using here
 

829
00:15:05,279 --> 00:15:08,710
we're using here
uh yeah say that's 1000

830
00:15:08,710 --> 00:15:08,720
uh yeah say that's 1000
 

831
00:15:08,720 --> 00:15:11,590
uh yeah say that's 1000
oh x you know 1000 data is a virtual

832
00:15:11,590 --> 00:15:11,600
oh x you know 1000 data is a virtual
 

833
00:15:11,600 --> 00:15:11,990
oh x you know 1000 data is a virtual
address

834
00:15:11,990 --> 00:15:12,000
address
 

835
00:15:12,000 --> 00:15:13,990
address
and that virtual address is basically

836
00:15:13,990 --> 00:15:14,000
and that virtual address is basically
 

837
00:15:14,000 --> 00:15:15,990
and that virtual address is basically
routed through something what's called

838
00:15:15,990 --> 00:15:16,000
routed through something what's called
 

839
00:15:16,000 --> 00:15:16,310
routed through something what's called
the

840
00:15:16,310 --> 00:15:16,320
the
 

841
00:15:16,320 --> 00:15:21,750
the
memory management unit

842
00:15:21,750 --> 00:15:21,760

 

843
00:15:21,760 --> 00:15:24,310

and the memory manager unit translates

844
00:15:24,310 --> 00:15:24,320
and the memory manager unit translates
 

845
00:15:24,320 --> 00:15:25,110
and the memory manager unit translates
it into

846
00:15:25,110 --> 00:15:25,120
it into
 

847
00:15:25,120 --> 00:15:28,150
it into
a physical address and

848
00:15:28,150 --> 00:15:28,160
a physical address and
 

849
00:15:28,160 --> 00:15:29,910
a physical address and
that physical address then you know is

850
00:15:29,910 --> 00:15:29,920
that physical address then you know is
 

851
00:15:29,920 --> 00:15:31,990
that physical address then you know is
actually used to you know index into

852
00:15:31,990 --> 00:15:32,000
actually used to you know index into
 

853
00:15:32,000 --> 00:15:33,110
actually used to you know index into
memory

854
00:15:33,110 --> 00:15:33,120
memory
 

855
00:15:33,120 --> 00:15:35,990
memory
and load whatever value or store

856
00:15:35,990 --> 00:15:36,000
and load whatever value or store
 

857
00:15:36,000 --> 00:15:39,189
and load whatever value or store
whatever value needs to be written there

858
00:15:39,189 --> 00:15:39,199
whatever value needs to be written there
 

859
00:15:39,199 --> 00:15:41,189
whatever value needs to be written there
and so the cpu from the cpu point of

860
00:15:41,189 --> 00:15:41,199
and so the cpu from the cpu point of
 

861
00:15:41,199 --> 00:15:42,710
and so the cpu from the cpu point of
view it always issues

862
00:15:42,710 --> 00:15:42,720
view it always issues
 

863
00:15:42,720 --> 00:15:45,430
view it always issues
every instruction that it issues uh once

864
00:15:45,430 --> 00:15:45,440
every instruction that it issues uh once
 

865
00:15:45,440 --> 00:15:46,949
every instruction that it issues uh once
the mmu is enabled

866
00:15:46,949 --> 00:15:46,959
the mmu is enabled
 

867
00:15:46,959 --> 00:15:50,150
the mmu is enabled
are virtual addresses and to translate

868
00:15:50,150 --> 00:15:50,160
are virtual addresses and to translate
 

869
00:15:50,160 --> 00:15:51,430
are virtual addresses and to translate
these virtual addresses to physical

870
00:15:51,430 --> 00:15:51,440
these virtual addresses to physical
 

871
00:15:51,440 --> 00:15:52,150
these virtual addresses to physical
addresses

872
00:15:52,150 --> 00:15:52,160
addresses
 

873
00:15:52,160 --> 00:15:55,670
addresses
basically the mmu has a table and

874
00:15:55,670 --> 00:15:55,680
basically the mmu has a table and
 

875
00:15:55,680 --> 00:15:57,590
basically the mmu has a table and
you know the virtual address on one side

876
00:15:57,590 --> 00:15:57,600
you know the virtual address on one side
 

877
00:15:57,600 --> 00:15:59,189
you know the virtual address on one side
physical drafts on one side

878
00:15:59,189 --> 00:15:59,199
physical drafts on one side
 

879
00:15:59,199 --> 00:16:01,350
physical drafts on one side
on the other side an example here is you

880
00:16:01,350 --> 00:16:01,360
on the other side an example here is you
 

881
00:16:01,360 --> 00:16:02,710
on the other side an example here is you
know our entry for

882
00:16:02,710 --> 00:16:02,720
know our entry for
 

883
00:16:02,720 --> 00:16:07,749
know our entry for
1000 and maybe that maps to whatever uh

884
00:16:07,749 --> 00:16:07,759
1000 and maybe that maps to whatever uh
 

885
00:16:07,759 --> 00:16:10,069
1000 and maybe that maps to whatever uh
you know ox whatever i'm just making

886
00:16:10,069 --> 00:16:10,079
you know ox whatever i'm just making
 

887
00:16:10,079 --> 00:16:12,710
you know ox whatever i'm just making
something up with like some big value

888
00:16:12,710 --> 00:16:12,720
something up with like some big value
 

889
00:16:12,720 --> 00:16:14,230
something up with like some big value
you know somewhere in physical memory

890
00:16:14,230 --> 00:16:14,240
you know somewhere in physical memory
 

891
00:16:14,240 --> 00:16:16,069
you know somewhere in physical memory
and so this mapping between virtual and

892
00:16:16,069 --> 00:16:16,079
and so this mapping between virtual and
 

893
00:16:16,079 --> 00:16:17,350
and so this mapping between virtual and
physical ma

894
00:16:17,350 --> 00:16:17,360
physical ma
 

895
00:16:17,360 --> 00:16:20,790
physical ma
uh it is quite flexible so on one side

896
00:16:20,790 --> 00:16:20,800
uh it is quite flexible so on one side
 

897
00:16:20,800 --> 00:16:22,069
uh it is quite flexible so on one side
we have the virtual address of the other

898
00:16:22,069 --> 00:16:22,079
we have the virtual address of the other
 

899
00:16:22,079 --> 00:16:24,629
we have the virtual address of the other
side of the physical addresses

900
00:16:24,629 --> 00:16:24,639
side of the physical addresses
 

901
00:16:24,639 --> 00:16:28,069
side of the physical addresses
um typically you know this this mapping

902
00:16:28,069 --> 00:16:28,079
um typically you know this this mapping
 

903
00:16:28,079 --> 00:16:30,629
um typically you know this this mapping
itself is also stored in memory and so

904
00:16:30,629 --> 00:16:30,639
itself is also stored in memory and so
 

905
00:16:30,639 --> 00:16:32,790
itself is also stored in memory and so
the cpu has some register

906
00:16:32,790 --> 00:16:32,800
the cpu has some register
 

907
00:16:32,800 --> 00:16:35,990
the cpu has some register
that basically points to uh

908
00:16:35,990 --> 00:16:36,000
that basically points to uh
 

909
00:16:36,000 --> 00:16:38,550
that basically points to uh
that contains the physical address of

910
00:16:38,550 --> 00:16:38,560
that contains the physical address of
 

911
00:16:38,560 --> 00:16:40,550
that contains the physical address of
where the page table is stored

912
00:16:40,550 --> 00:16:40,560
where the page table is stored
 

913
00:16:40,560 --> 00:16:42,550
where the page table is stored
so somewhere in the basically the page

914
00:16:42,550 --> 00:16:42,560
so somewhere in the basically the page
 

915
00:16:42,560 --> 00:16:44,470
so somewhere in the basically the page
table or this map is somewhere stored in

916
00:16:44,470 --> 00:16:44,480
table or this map is somewhere stored in
 

917
00:16:44,480 --> 00:16:45,749
table or this map is somewhere stored in
physical memory

918
00:16:45,749 --> 00:16:45,759
physical memory
 

919
00:16:45,759 --> 00:16:48,389
physical memory
uh let's say you know whatever you know

920
00:16:48,389 --> 00:16:48,399
uh let's say you know whatever you know
 

921
00:16:48,399 --> 00:16:49,829
uh let's say you know whatever you know
address

922
00:16:49,829 --> 00:16:49,839
address
 

923
00:16:49,839 --> 00:16:51,749
address
and basically this register which is

924
00:16:51,749 --> 00:16:51,759
and basically this register which is
 

925
00:16:51,759 --> 00:16:53,030
and basically this register which is
called on the risk 5

926
00:16:53,030 --> 00:16:53,040
called on the risk 5
 

927
00:16:53,040 --> 00:16:56,710
called on the risk 5
satp you know stores the

928
00:16:56,710 --> 00:16:56,720
satp you know stores the
 

929
00:16:56,720 --> 00:16:59,829
satp you know stores the
address 10 and so uh that the

930
00:16:59,829 --> 00:16:59,839
address 10 and so uh that the
 

931
00:16:59,839 --> 00:17:02,230
address 10 and so uh that the
cpu can tell the memory manage unit

932
00:17:02,230 --> 00:17:02,240
cpu can tell the memory manage unit
 

933
00:17:02,240 --> 00:17:03,590
cpu can tell the memory manage unit
where to find

934
00:17:03,590 --> 00:17:03,600
where to find
 

935
00:17:03,600 --> 00:17:05,590
where to find
you know basically the map to actually

936
00:17:05,590 --> 00:17:05,600
you know basically the map to actually
 

937
00:17:05,600 --> 00:17:07,110
you know basically the map to actually
translate uh

938
00:17:07,110 --> 00:17:07,120
translate uh
 

939
00:17:07,120 --> 00:17:10,390
translate uh
virtual to physical addresses and then

940
00:17:10,390 --> 00:17:10,400
virtual to physical addresses and then
 

941
00:17:10,400 --> 00:17:12,230
virtual to physical addresses and then
the basic idea is to give every

942
00:17:12,230 --> 00:17:12,240
the basic idea is to give every
 

943
00:17:12,240 --> 00:17:14,309
the basic idea is to give every
application its own map

944
00:17:14,309 --> 00:17:14,319
application its own map
 

945
00:17:14,319 --> 00:17:26,549
application its own map
so you know cad is going to have its map

946
00:17:26,549 --> 00:17:26,559

 

947
00:17:26,559 --> 00:17:30,390

go ahead um

948
00:17:30,390 --> 00:17:30,400
go ahead um
 

949
00:17:30,400 --> 00:17:33,669
go ahead um
so the mmu you said it doesn't

950
00:17:33,669 --> 00:17:33,679
so the mmu you said it doesn't
 

951
00:17:33,679 --> 00:17:34,630
so the mmu you said it doesn't
necessarily

952
00:17:34,630 --> 00:17:34,640
necessarily
 

953
00:17:34,640 --> 00:17:37,750
necessarily
store the mapping so does it

954
00:17:37,750 --> 00:17:37,760
store the mapping so does it
 

955
00:17:37,760 --> 00:17:40,150
store the mapping so does it
does it just just do the translation

956
00:17:40,150 --> 00:17:40,160
does it just just do the translation
 

957
00:17:40,160 --> 00:17:41,029
does it just just do the translation
like it will

958
00:17:41,029 --> 00:17:41,039
like it will
 

959
00:17:41,039 --> 00:17:43,350
like it will
read the memory and do the translation

960
00:17:43,350 --> 00:17:43,360
read the memory and do the translation
 

961
00:17:43,360 --> 00:17:45,750
read the memory and do the translation
but not necessarily

962
00:17:45,750 --> 00:17:45,760
but not necessarily
 

963
00:17:45,760 --> 00:17:47,830
but not necessarily
store the mappings that's that's exactly

964
00:17:47,830 --> 00:17:47,840
store the mappings that's that's exactly
 

965
00:17:47,840 --> 00:17:48,950
store the mappings that's that's exactly
the right picture that you should have

966
00:17:48,950 --> 00:17:48,960
the right picture that you should have
 

967
00:17:48,960 --> 00:17:52,870
the right picture that you should have
in your head

968
00:17:52,870 --> 00:17:52,880

 

969
00:17:52,880 --> 00:17:55,750

but every map okay so the the the map

970
00:17:55,750 --> 00:17:55,760
but every map okay so the the the map
 

971
00:17:55,760 --> 00:17:57,830
but every map okay so the the the map
itself is stored in memory the mmu just

972
00:17:57,830 --> 00:17:57,840
itself is stored in memory the mmu just
 

973
00:17:57,840 --> 00:17:59,669
itself is stored in memory the mmu just
basically walks or looks ups into the

974
00:17:59,669 --> 00:17:59,679
basically walks or looks ups into the
 

975
00:17:59,679 --> 00:18:01,110
basically walks or looks ups into the
map and we'll see in a second that you

976
00:18:01,110 --> 00:18:01,120
map and we'll see in a second that you
 

977
00:18:01,120 --> 00:18:02,150
map and we'll see in a second that you
know this map is slightly more

978
00:18:02,150 --> 00:18:02,160
know this map is slightly more
 

979
00:18:02,160 --> 00:18:02,870
know this map is slightly more
complicated than

980
00:18:02,870 --> 00:18:02,880
complicated than
 

981
00:18:02,880 --> 00:18:06,789
complicated than
what you're drawing here so every app

982
00:18:06,789 --> 00:18:06,799
what you're drawing here so every app
 

983
00:18:06,799 --> 00:18:12,230
what you're drawing here so every app
has its own its own map

984
00:18:12,230 --> 00:18:12,240
has its own its own map
 

985
00:18:12,240 --> 00:18:14,390
has its own its own map
correct and that map basically defines

986
00:18:14,390 --> 00:18:14,400
correct and that map basically defines
 

987
00:18:14,400 --> 00:18:16,230
correct and that map basically defines
its address space

988
00:18:16,230 --> 00:18:16,240
its address space
 

989
00:18:16,240 --> 00:18:18,470
its address space
and so when with the cpu or when the

990
00:18:18,470 --> 00:18:18,480
and so when with the cpu or when the
 

991
00:18:18,480 --> 00:18:20,390
and so when with the cpu or when the
operating system switches the cpu from

992
00:18:20,390 --> 00:18:20,400
operating system switches the cpu from
 

993
00:18:20,400 --> 00:18:21,270
operating system switches the cpu from
one process

994
00:18:21,270 --> 00:18:21,280
one process
 

995
00:18:21,280 --> 00:18:22,710
one process
or from one application to another

996
00:18:22,710 --> 00:18:22,720
or from one application to another
 

997
00:18:22,720 --> 00:18:24,870
or from one application to another
application it also switches to you know

998
00:18:24,870 --> 00:18:24,880
application it also switches to you know
 

999
00:18:24,880 --> 00:18:26,070
application it also switches to you know
the content of this

1000
00:18:26,070 --> 00:18:26,080
the content of this
 

1001
00:18:26,080 --> 00:18:29,190
the content of this
satp register to store

1002
00:18:29,190 --> 00:18:29,200
satp register to store
 

1003
00:18:29,200 --> 00:18:31,909
satp register to store
the root of the map of the appropriate

1004
00:18:31,909 --> 00:18:31,919
the root of the map of the appropriate
 

1005
00:18:31,919 --> 00:18:33,350
the root of the map of the appropriate
process

1006
00:18:33,350 --> 00:18:33,360
process
 

1007
00:18:33,360 --> 00:18:35,510
process
and so in that way basically you know

1008
00:18:35,510 --> 00:18:35,520
and so in that way basically you know
 

1009
00:18:35,520 --> 00:18:36,950
and so in that way basically you know
multiple applications can run

1010
00:18:36,950 --> 00:18:36,960
multiple applications can run
 

1011
00:18:36,960 --> 00:18:38,950
multiple applications can run
on the cpu every time we switch between

1012
00:18:38,950 --> 00:18:38,960
on the cpu every time we switch between
 

1013
00:18:38,960 --> 00:18:40,230
on the cpu every time we switch between
from one application to the next

1014
00:18:40,230 --> 00:18:40,240
from one application to the next
 

1015
00:18:40,240 --> 00:18:41,029
from one application to the next
application

1016
00:18:41,029 --> 00:18:41,039
application
 

1017
00:18:41,039 --> 00:18:44,710
application
we also switch the satp register to

1018
00:18:44,710 --> 00:18:44,720
we also switch the satp register to
 

1019
00:18:44,720 --> 00:18:46,310
we also switch the satp register to
point to the appropriate map for that

1020
00:18:46,310 --> 00:18:46,320
point to the appropriate map for that
 

1021
00:18:46,320 --> 00:18:47,350
point to the appropriate map for that
application

1022
00:18:47,350 --> 00:18:47,360
application
 

1023
00:18:47,360 --> 00:18:50,310
application
and in that way basically the virtual

1024
00:18:50,310 --> 00:18:50,320
and in that way basically the virtual
 

1025
00:18:50,320 --> 00:18:51,190
and in that way basically the virtual
addresses

1026
00:18:51,190 --> 00:18:51,200
addresses
 

1027
00:18:51,200 --> 00:18:54,870
addresses
for cad are translated differently than

1028
00:18:54,870 --> 00:18:54,880
for cad are translated differently than
 

1029
00:18:54,880 --> 00:18:55,990
for cad are translated differently than
the virtual addresses

1030
00:18:55,990 --> 00:18:56,000
the virtual addresses
 

1031
00:18:56,000 --> 00:18:58,230
the virtual addresses
for the shell because you know each one

1032
00:18:58,230 --> 00:18:58,240
for the shell because you know each one
 

1033
00:18:58,240 --> 00:19:02,230
for the shell because you know each one
of them has their own map

1034
00:19:02,230 --> 00:19:02,240

 

1035
00:19:02,240 --> 00:19:06,470

that makes sense

1036
00:19:06,470 --> 00:19:06,480

 

1037
00:19:06,480 --> 00:19:09,510

okay so the way

1038
00:19:09,510 --> 00:19:09,520
okay so the way
 

1039
00:19:09,520 --> 00:19:11,350
okay so the way
this is sort of the basic plan and the

1040
00:19:11,350 --> 00:19:11,360
this is sort of the basic plan and the
 

1041
00:19:11,360 --> 00:19:12,710
this is sort of the basic plan and the
way i've drawn

1042
00:19:12,710 --> 00:19:12,720
way i've drawn
 

1043
00:19:12,720 --> 00:19:14,950
way i've drawn
or you know explained it so far is

1044
00:19:14,950 --> 00:19:14,960
or you know explained it so far is
 

1045
00:19:14,960 --> 00:19:16,549
or you know explained it so far is
pretty naive

1046
00:19:16,549 --> 00:19:16,559
pretty naive
 

1047
00:19:16,559 --> 00:19:19,350
pretty naive
and unreasonable uh yeah did that go

1048
00:19:19,350 --> 00:19:19,360
and unreasonable uh yeah did that go
 

1049
00:19:19,360 --> 00:19:20,789
and unreasonable uh yeah did that go
ahead

1050
00:19:20,789 --> 00:19:20,799
ahead
 

1051
00:19:20,799 --> 00:19:24,390
ahead
i'm sorry um so um

1052
00:19:24,390 --> 00:19:24,400
i'm sorry um so um
 

1053
00:19:24,400 --> 00:19:27,029
i'm sorry um so um
the you said the satp register gets

1054
00:19:27,029 --> 00:19:27,039
the you said the satp register gets
 

1055
00:19:27,039 --> 00:19:27,990
the you said the satp register gets
modified uh

1056
00:19:27,990 --> 00:19:28,000
modified uh
 

1057
00:19:28,000 --> 00:19:30,870
modified uh
for the process i am guessing the value

1058
00:19:30,870 --> 00:19:30,880
for the process i am guessing the value
 

1059
00:19:30,880 --> 00:19:31,430
for the process i am guessing the value
of

1060
00:19:31,430 --> 00:19:31,440
of
 

1061
00:19:31,440 --> 00:19:33,590
of
uh for the satp register for each

1062
00:19:33,590 --> 00:19:33,600
uh for the satp register for each
 

1063
00:19:33,600 --> 00:19:34,710
uh for the satp register for each
process

1064
00:19:34,710 --> 00:19:34,720
process
 

1065
00:19:34,720 --> 00:19:37,510
process
is stored by the kernel yes yes the

1066
00:19:37,510 --> 00:19:37,520
is stored by the kernel yes yes the
 

1067
00:19:37,520 --> 00:19:39,190
is stored by the kernel yes yes the
kernel is writing the sntp your editor

1068
00:19:39,190 --> 00:19:39,200
kernel is writing the sntp your editor
 

1069
00:19:39,200 --> 00:19:39,830
kernel is writing the sntp your editor
in fact

1070
00:19:39,830 --> 00:19:39,840
in fact
 

1071
00:19:39,840 --> 00:19:41,990
in fact
writing or reading the or particularly

1072
00:19:41,990 --> 00:19:42,000
writing or reading the or particularly
 

1073
00:19:42,000 --> 00:19:42,950
writing or reading the or particularly
writing the uh

1074
00:19:42,950 --> 00:19:42,960
writing the uh
 

1075
00:19:42,960 --> 00:19:45,830
writing the uh
satp register is a privilege instruction

1076
00:19:45,830 --> 00:19:45,840
satp register is a privilege instruction
 

1077
00:19:45,840 --> 00:19:46,230
satp register is a privilege instruction
so

1078
00:19:46,230 --> 00:19:46,240
so
 

1079
00:19:46,240 --> 00:19:48,390
so
a user application cannot just you know

1080
00:19:48,390 --> 00:19:48,400
a user application cannot just you know
 

1081
00:19:48,400 --> 00:19:50,150
a user application cannot just you know
update the page map register and say

1082
00:19:50,150 --> 00:19:50,160
update the page map register and say
 

1083
00:19:50,160 --> 00:19:51,590
update the page map register and say
like i want to run with this page map

1084
00:19:51,590 --> 00:19:51,600
like i want to run with this page map
 

1085
00:19:51,600 --> 00:19:52,549
like i want to run with this page map
now

1086
00:19:52,549 --> 00:19:52,559
now
 

1087
00:19:52,559 --> 00:19:55,830
now
because that would violate isolation

1088
00:19:55,830 --> 00:19:55,840
because that would violate isolation
 

1089
00:19:55,840 --> 00:19:57,750
because that would violate isolation
right so it's only the kernel only a

1090
00:19:57,750 --> 00:19:57,760
right so it's only the kernel only a
 

1091
00:19:57,760 --> 00:19:59,270
right so it's only the kernel only a
code in kernel mode can actually update

1092
00:19:59,270 --> 00:19:59,280
code in kernel mode can actually update
 

1093
00:19:59,280 --> 00:20:00,950
code in kernel mode can actually update
it

1094
00:20:00,950 --> 00:20:00,960
it
 

1095
00:20:00,960 --> 00:20:04,549
it
i see okay so

1096
00:20:04,549 --> 00:20:04,559
i see okay so
 

1097
00:20:04,559 --> 00:20:06,149
i see okay so
as i said this picture is pretty naive

1098
00:20:06,149 --> 00:20:06,159
as i said this picture is pretty naive
 

1099
00:20:06,159 --> 00:20:07,750
as i said this picture is pretty naive
uh you know one thing i haven't really

1100
00:20:07,750 --> 00:20:07,760
uh you know one thing i haven't really
 

1101
00:20:07,760 --> 00:20:09,350
uh you know one thing i haven't really
said anything about how this actually

1102
00:20:09,350 --> 00:20:09,360
said anything about how this actually
 

1103
00:20:09,360 --> 00:20:10,710
said anything about how this actually
map works

1104
00:20:10,710 --> 00:20:10,720
map works
 

1105
00:20:10,720 --> 00:20:13,750
map works
uh and you know the way actually drawn

1106
00:20:13,750 --> 00:20:13,760
uh and you know the way actually drawn
 

1107
00:20:13,760 --> 00:20:15,430
uh and you know the way actually drawn
out seems to indicate that you know

1108
00:20:15,430 --> 00:20:15,440
out seems to indicate that you know
 

1109
00:20:15,440 --> 00:20:16,470
out seems to indicate that you know
basically for every

1110
00:20:16,470 --> 00:20:16,480
basically for every
 

1111
00:20:16,480 --> 00:20:18,149
basically for every
virtual address you have an entry in the

1112
00:20:18,149 --> 00:20:18,159
virtual address you have an entry in the
 

1113
00:20:18,159 --> 00:20:19,830
virtual address you have an entry in the
map

1114
00:20:19,830 --> 00:20:19,840
map
 

1115
00:20:19,840 --> 00:20:22,230
map
and if you do that how big would the map

1116
00:20:22,230 --> 00:20:22,240
and if you do that how big would the map
 

1117
00:20:22,240 --> 00:20:25,270
and if you do that how big would the map
be

1118
00:20:25,270 --> 00:20:25,280

 

1119
00:20:25,280 --> 00:20:32,830

on risk five

1120
00:20:32,830 --> 00:20:32,840

 

1121
00:20:32,840 --> 00:20:35,990

anybody

1122
00:20:35,990 --> 00:20:36,000

 

1123
00:20:36,000 --> 00:20:37,750

how many addresses are there on the risk

1124
00:20:37,750 --> 00:20:37,760
how many addresses are there on the risk
 

1125
00:20:37,760 --> 00:20:39,430
how many addresses are there on the risk
five in principle or how big

1126
00:20:39,430 --> 00:20:39,440
five in principle or how big
 

1127
00:20:39,440 --> 00:20:41,110
five in principle or how big
how many addresses could a register

1128
00:20:41,110 --> 00:20:41,120
how many addresses could a register
 

1129
00:20:41,120 --> 00:20:46,230
how many addresses could a register
store

1130
00:20:46,230 --> 00:20:46,240

 

1131
00:20:46,240 --> 00:20:48,950

registers are 64 bit wide so how many

1132
00:20:48,950 --> 00:20:48,960
registers are 64 bit wide so how many
 

1133
00:20:48,960 --> 00:20:52,470
registers are 64 bit wide so how many
addresses

1134
00:20:52,470 --> 00:20:52,480

 

1135
00:20:52,480 --> 00:20:55,190

anybody i know i'm so insulting your

1136
00:20:55,190 --> 00:20:55,200
anybody i know i'm so insulting your
 

1137
00:20:55,200 --> 00:20:56,710
anybody i know i'm so insulting your
intelligence by asking these questions

1138
00:20:56,710 --> 00:20:56,720
intelligence by asking these questions
 

1139
00:20:56,720 --> 00:20:59,990
intelligence by asking these questions
but

1140
00:20:59,990 --> 00:21:00,000

 

1141
00:21:00,000 --> 00:21:01,430

we have some answers in the chat like

1142
00:21:01,430 --> 00:21:01,440
we have some answers in the chat like
 

1143
00:21:01,440 --> 00:21:03,430
we have some answers in the chat like
two to the 64. uh so yeah i didn't see

1144
00:21:03,430 --> 00:21:03,440
two to the 64. uh so yeah i didn't see
 

1145
00:21:03,440 --> 00:21:04,230
two to the 64. uh so yeah i didn't see
the chat sorry

1146
00:21:04,230 --> 00:21:04,240
the chat sorry
 

1147
00:21:04,240 --> 00:21:06,149
the chat sorry
uh yeah two to the 64. let's see if i

1148
00:21:06,149 --> 00:21:06,159
uh yeah two to the 64. let's see if i
 

1149
00:21:06,159 --> 00:21:07,909
uh yeah two to the 64. let's see if i
can actually pop up the chip

1150
00:21:07,909 --> 00:21:07,919
can actually pop up the chip
 

1151
00:21:07,919 --> 00:21:13,350
can actually pop up the chip
so i can see it

1152
00:21:13,350 --> 00:21:13,360

 

1153
00:21:13,360 --> 00:21:16,870

yeah 2264. thank you

1154
00:21:16,870 --> 00:21:16,880
yeah 2264. thank you
 

1155
00:21:16,880 --> 00:21:19,110
yeah 2264. thank you
all right so this table would be

1156
00:21:19,110 --> 00:21:19,120
all right so this table would be
 

1157
00:21:19,120 --> 00:21:20,390
all right so this table would be
gigantic

1158
00:21:20,390 --> 00:21:20,400
gigantic
 

1159
00:21:20,400 --> 00:21:22,870
gigantic
uh in fact you know all memory would be

1160
00:21:22,870 --> 00:21:22,880
uh in fact you know all memory would be
 

1161
00:21:22,880 --> 00:21:24,630
uh in fact you know all memory would be
consumed by just having that table so

1162
00:21:24,630 --> 00:21:24,640
consumed by just having that table so
 

1163
00:21:24,640 --> 00:21:24,950
consumed by just having that table so
that's

1164
00:21:24,950 --> 00:21:24,960
that's
 

1165
00:21:24,960 --> 00:21:27,590
that's
unreasonable and so in fact you know

1166
00:21:27,590 --> 00:21:27,600
unreasonable and so in fact you know
 

1167
00:21:27,600 --> 00:21:29,830
unreasonable and so in fact you know
that's not how things work

1168
00:21:29,830 --> 00:21:29,840
that's not how things work
 

1169
00:21:29,840 --> 00:21:31,750
that's not how things work
in fact i'm going to go in two steps to

1170
00:21:31,750 --> 00:21:31,760
in fact i'm going to go in two steps to
 

1171
00:21:31,760 --> 00:21:32,950
in fact i'm going to go in two steps to
actually how it actually works in the

1172
00:21:32,950 --> 00:21:32,960
actually how it actually works in the
 

1173
00:21:32,960 --> 00:21:33,830
actually how it actually works in the
race five

1174
00:21:33,830 --> 00:21:33,840
race five
 

1175
00:21:33,840 --> 00:21:36,870
race five
so step one is you know don't play the

1176
00:21:36,870 --> 00:21:36,880
so step one is you know don't play the
 

1177
00:21:36,880 --> 00:21:38,230
so step one is you know don't play the
game

1178
00:21:38,230 --> 00:21:38,240
game
 

1179
00:21:38,240 --> 00:21:44,470
game
per address but do it per page

1180
00:21:44,470 --> 00:21:44,480
per address but do it per page
 

1181
00:21:44,480 --> 00:21:46,630
per address but do it per page
so you translate the page at a time and

1182
00:21:46,630 --> 00:21:46,640
so you translate the page at a time and
 

1183
00:21:46,640 --> 00:21:47,830
so you translate the page at a time and
the page uh

1184
00:21:47,830 --> 00:21:47,840
the page uh
 

1185
00:21:47,840 --> 00:21:51,669
the page uh
on the risk five is four kilobyte

1186
00:21:51,669 --> 00:21:51,679
on the risk five is four kilobyte
 

1187
00:21:51,679 --> 00:21:53,510
on the risk five is four kilobyte
and which is four and four thousand

1188
00:21:53,510 --> 00:21:53,520
and which is four and four thousand
 

1189
00:21:53,520 --> 00:21:54,950
and which is four and four thousand
ninety six bytes

1190
00:21:54,950 --> 00:21:54,960
ninety six bytes
 

1191
00:21:54,960 --> 00:21:57,430
ninety six bytes
and this is pretty common uh almost all

1192
00:21:57,430 --> 00:21:57,440
and this is pretty common uh almost all
 

1193
00:21:57,440 --> 00:21:59,430
and this is pretty common uh almost all
processors you know use roughly a page

1194
00:21:59,430 --> 00:21:59,440
processors you know use roughly a page
 

1195
00:21:59,440 --> 00:22:01,190
processors you know use roughly a page
size or four kilobytes or support

1196
00:22:01,190 --> 00:22:01,200
size or four kilobytes or support
 

1197
00:22:01,200 --> 00:22:03,830
size or four kilobytes or support
a page size or four kilobytes and so now

1198
00:22:03,830 --> 00:22:03,840
a page size or four kilobytes and so now
 

1199
00:22:03,840 --> 00:22:05,350
a page size or four kilobytes and so now
again translation works slightly

1200
00:22:05,350 --> 00:22:05,360
again translation works slightly
 

1201
00:22:05,360 --> 00:22:06,710
again translation works slightly
differently so if here

1202
00:22:06,710 --> 00:22:06,720
differently so if here
 

1203
00:22:06,720 --> 00:22:09,350
differently so if here
we have our virtual address and

1204
00:22:09,350 --> 00:22:09,360
we have our virtual address and
 

1205
00:22:09,360 --> 00:22:11,270
we have our virtual address and
basically we split it in two pieces

1206
00:22:11,270 --> 00:22:11,280
basically we split it in two pieces
 

1207
00:22:11,280 --> 00:22:15,190
basically we split it in two pieces
an index and an offset

1208
00:22:15,190 --> 00:22:15,200
an index and an offset
 

1209
00:22:15,200 --> 00:22:17,029
an index and an offset
and so the offset is basically the byte

1210
00:22:17,029 --> 00:22:17,039
and so the offset is basically the byte
 

1211
00:22:17,039 --> 00:22:18,789
and so the offset is basically the byte
within the page

1212
00:22:18,789 --> 00:22:18,799
within the page
 

1213
00:22:18,799 --> 00:22:21,669
within the page
and so when we do when the mmu does the

1214
00:22:21,669 --> 00:22:21,679
and so when we do when the mmu does the
 

1215
00:22:21,679 --> 00:22:22,470
and so when we do when the mmu does the
translation

1216
00:22:22,470 --> 00:22:22,480
translation
 

1217
00:22:22,480 --> 00:22:25,669
translation
it takes the index uh indexes into

1218
00:22:25,669 --> 00:22:25,679
it takes the index uh indexes into
 

1219
00:22:25,679 --> 00:22:28,230
it takes the index uh indexes into
the map that gives you you know some

1220
00:22:28,230 --> 00:22:28,240
the map that gives you you know some
 

1221
00:22:28,240 --> 00:22:29,350
the map that gives you you know some
physical page number

1222
00:22:29,350 --> 00:22:29,360
physical page number
 

1223
00:22:29,360 --> 00:22:32,390
physical page number
you know the in memory and that physical

1224
00:22:32,390 --> 00:22:32,400
you know the in memory and that physical
 

1225
00:22:32,400 --> 00:22:34,950
you know the in memory and that physical
page number that points to some you know

1226
00:22:34,950 --> 00:22:34,960
page number that points to some you know
 

1227
00:22:34,960 --> 00:22:37,990
page number that points to some you know
physical page of 4096 bytes

1228
00:22:37,990 --> 00:22:38,000
physical page of 4096 bytes
 

1229
00:22:38,000 --> 00:22:40,230
physical page of 4096 bytes
and then the offset part basically

1230
00:22:40,230 --> 00:22:40,240
and then the offset part basically
 

1231
00:22:40,240 --> 00:22:41,830
and then the offset part basically
indexes into that

1232
00:22:41,830 --> 00:22:41,840
indexes into that
 

1233
00:22:41,840 --> 00:22:43,990
indexes into that
physical page so for example the offset

1234
00:22:43,990 --> 00:22:44,000
physical page so for example the offset
 

1235
00:22:44,000 --> 00:22:45,750
physical page so for example the offset
is you know 12

1236
00:22:45,750 --> 00:22:45,760
is you know 12
 

1237
00:22:45,760 --> 00:22:48,870
is you know 12
then you know the

1238
00:22:48,870 --> 00:22:48,880
then you know the
 

1239
00:22:48,880 --> 00:22:52,950
then you know the
the 12th entry of that page is actually

1240
00:22:52,950 --> 00:22:52,960
the 12th entry of that page is actually
 

1241
00:22:52,960 --> 00:22:55,830
the 12th entry of that page is actually
used a lot of you people a lot of you

1242
00:22:55,830 --> 00:22:55,840
used a lot of you people a lot of you
 

1243
00:22:55,840 --> 00:22:57,029
used a lot of you people a lot of you
answered this and

1244
00:22:57,029 --> 00:22:57,039
answered this and
 

1245
00:22:57,039 --> 00:22:59,750
answered this and
mentioned this in the uh in response to

1246
00:22:59,750 --> 00:22:59,760
mentioned this in the uh in response to
 

1247
00:22:59,760 --> 00:23:00,630
mentioned this in the uh in response to
the question that

1248
00:23:00,630 --> 00:23:00,640
the question that
 

1249
00:23:00,640 --> 00:23:01,990
the question that
there's always some scheme of like

1250
00:23:01,990 --> 00:23:02,000
there's always some scheme of like
 

1251
00:23:02,000 --> 00:23:04,070
there's always some scheme of like
taking an offset and uh

1252
00:23:04,070 --> 00:23:04,080
taking an offset and uh
 

1253
00:23:04,080 --> 00:23:06,549
taking an offset and uh
adding that to the base of the page uh

1254
00:23:06,549 --> 00:23:06,559
adding that to the base of the page uh
 

1255
00:23:06,559 --> 00:23:07,350
adding that to the base of the page uh
to uh

1256
00:23:07,350 --> 00:23:07,360
to uh
 

1257
00:23:07,360 --> 00:23:10,390
to uh
obtain the actual uh memory fiscal

1258
00:23:10,390 --> 00:23:10,400
obtain the actual uh memory fiscal
 

1259
00:23:10,400 --> 00:23:11,590
obtain the actual uh memory fiscal
memory location where

1260
00:23:11,590 --> 00:23:11,600
memory location where
 

1261
00:23:11,600 --> 00:23:13,990
memory location where
a value is stored or where value will be

1262
00:23:13,990 --> 00:23:14,000
a value is stored or where value will be
 

1263
00:23:14,000 --> 00:23:16,310
a value is stored or where value will be
uh loaded to

1264
00:23:16,310 --> 00:23:16,320
uh loaded to
 

1265
00:23:16,320 --> 00:23:17,669
uh loaded to
and one of the interesting things about

1266
00:23:17,669 --> 00:23:17,679
and one of the interesting things about
 

1267
00:23:17,679 --> 00:23:19,830
and one of the interesting things about
the risk five is and there's a

1268
00:23:19,830 --> 00:23:19,840
the risk five is and there's a
 

1269
00:23:19,840 --> 00:23:21,029
the risk five is and there's a
in response to some other question to

1270
00:23:21,029 --> 00:23:21,039
in response to some other question to
 

1271
00:23:21,039 --> 00:23:22,870
in response to some other question to
them or somebody asked earlier the

1272
00:23:22,870 --> 00:23:22,880
them or somebody asked earlier the
 

1273
00:23:22,880 --> 00:23:25,510
them or somebody asked earlier the
physical uh or the virtual dresses are

1274
00:23:25,510 --> 00:23:25,520
physical uh or the virtual dresses are
 

1275
00:23:25,520 --> 00:23:28,149
physical uh or the virtual dresses are
64 bits

1276
00:23:28,149 --> 00:23:28,159
64 bits
 

1277
00:23:28,159 --> 00:23:29,590
64 bits
which makes totally sense correct

1278
00:23:29,590 --> 00:23:29,600
which makes totally sense correct
 

1279
00:23:29,600 --> 00:23:33,669
which makes totally sense correct
because the risk 5 is 64-bit register

1280
00:23:33,669 --> 00:23:33,679
because the risk 5 is 64-bit register
 

1281
00:23:33,679 --> 00:23:36,310
because the risk 5 is 64-bit register
but in fact on the risc-v processor that

1282
00:23:36,310 --> 00:23:36,320
but in fact on the risc-v processor that
 

1283
00:23:36,320 --> 00:23:37,669
but in fact on the risc-v processor that
we're using

1284
00:23:37,669 --> 00:23:37,679
we're using
 

1285
00:23:37,679 --> 00:23:41,750
we're using
uh not all of the 64 bits actually used

1286
00:23:41,750 --> 00:23:41,760
uh not all of the 64 bits actually used
 

1287
00:23:41,760 --> 00:23:44,470
uh not all of the 64 bits actually used
namely the top 25 are actually not used

1288
00:23:44,470 --> 00:23:44,480
namely the top 25 are actually not used
 

1289
00:23:44,480 --> 00:23:46,390
namely the top 25 are actually not used
at all

1290
00:23:46,390 --> 00:23:46,400
at all
 

1291
00:23:46,400 --> 00:23:48,549
at all
and so that limits the size of a virtual

1292
00:23:48,549 --> 00:23:48,559
and so that limits the size of a virtual
 

1293
00:23:48,559 --> 00:23:50,470
and so that limits the size of a virtual
address right that limits the size of a

1294
00:23:50,470 --> 00:23:50,480
address right that limits the size of a
 

1295
00:23:50,480 --> 00:23:51,750
address right that limits the size of a
virtual address space to

1296
00:23:51,750 --> 00:23:51,760
virtual address space to
 

1297
00:23:51,760 --> 00:23:55,029
virtual address space to
2 to the power 39

1298
00:23:55,029 --> 00:23:55,039

 

1299
00:23:55,039 --> 00:24:02,830

which is roughly 512

1300
00:24:02,830 --> 00:24:02,840

 

1301
00:24:02,840 --> 00:24:04,230

gigabytes

1302
00:24:04,230 --> 00:24:04,240
gigabytes
 

1303
00:24:04,240 --> 00:24:07,990
gigabytes
um and so of course you know later uh

1304
00:24:07,990 --> 00:24:08,000
um and so of course you know later uh
 

1305
00:24:08,000 --> 00:24:09,750
um and so of course you know later uh
versions of the processor might support

1306
00:24:09,750 --> 00:24:09,760
versions of the processor might support
 

1307
00:24:09,760 --> 00:24:11,350
versions of the processor might support
bigger address spaces if that isn't

1308
00:24:11,350 --> 00:24:11,360
bigger address spaces if that isn't
 

1309
00:24:11,360 --> 00:24:12,149
bigger address spaces if that isn't
necessary

1310
00:24:12,149 --> 00:24:12,159
necessary
 

1311
00:24:12,159 --> 00:24:13,590
necessary
and that could then be done and so that

1312
00:24:13,590 --> 00:24:13,600
and that could then be done and so that
 

1313
00:24:13,600 --> 00:24:15,750
and that could then be done and so that
for example some of those 25 bits that

1314
00:24:15,750 --> 00:24:15,760
for example some of those 25 bits that
 

1315
00:24:15,760 --> 00:24:17,830
for example some of those 25 bits that
are basically unused you know could be

1316
00:24:17,830 --> 00:24:17,840
are basically unused you know could be
 

1317
00:24:17,840 --> 00:24:18,870
are basically unused you know could be
used to

1318
00:24:18,870 --> 00:24:18,880
used to
 

1319
00:24:18,880 --> 00:24:22,230
used to
uh build bigger virtual address spaces

1320
00:24:22,230 --> 00:24:22,240
uh build bigger virtual address spaces
 

1321
00:24:22,240 --> 00:24:24,710
uh build bigger virtual address spaces
and so uh and so in the index in that

1322
00:24:24,710 --> 00:24:24,720
and so uh and so in the index in that
 

1323
00:24:24,720 --> 00:24:26,310
and so uh and so in the index in that
you know we're 39 bits left

1324
00:24:26,310 --> 00:24:26,320
you know we're 39 bits left
 

1325
00:24:26,320 --> 00:24:29,190
you know we're 39 bits left
you know as the virtual address 20 27

1326
00:24:29,190 --> 00:24:29,200
you know as the virtual address 20 27
 

1327
00:24:29,200 --> 00:24:29,590
you know as the virtual address 20 27
bits

1328
00:24:29,590 --> 00:24:29,600
bits
 

1329
00:24:29,600 --> 00:24:31,510
bits
are indexed and we'll see in a second

1330
00:24:31,510 --> 00:24:31,520
are indexed and we'll see in a second
 

1331
00:24:31,520 --> 00:24:33,510
are indexed and we'll see in a second
why they're 27

1332
00:24:33,510 --> 00:24:33,520
why they're 27
 

1333
00:24:33,520 --> 00:24:36,710
why they're 27
uh our index and then the 12 are

1334
00:24:36,710 --> 00:24:36,720
uh our index and then the 12 are
 

1335
00:24:36,720 --> 00:24:39,909
uh our index and then the 12 are
offset and you know they have to be 12

1336
00:24:39,909 --> 00:24:39,919
offset and you know they have to be 12
 

1337
00:24:39,919 --> 00:24:41,750
offset and you know they have to be 12
correct because 2 to the power 12

1338
00:24:41,750 --> 00:24:41,760
correct because 2 to the power 12
 

1339
00:24:41,760 --> 00:24:45,350
correct because 2 to the power 12
is you know 4 5 and 96

1340
00:24:45,350 --> 00:24:45,360
is you know 4 5 and 96
 

1341
00:24:45,360 --> 00:24:48,149
is you know 4 5 and 96
all right so that's virtual addresses on

1342
00:24:48,149 --> 00:24:48,159
all right so that's virtual addresses on
 

1343
00:24:48,159 --> 00:24:49,269
all right so that's virtual addresses on
the risk 5

1344
00:24:49,269 --> 00:24:49,279
the risk 5
 

1345
00:24:49,279 --> 00:24:51,190
the risk 5
physical addresses as you can see here

1346
00:24:51,190 --> 00:24:51,200
physical addresses as you can see here
 

1347
00:24:51,200 --> 00:24:57,830
physical addresses as you can see here
are actually 56 bits wide

1348
00:24:57,830 --> 00:24:57,840

 

1349
00:24:57,840 --> 00:24:59,590

so the physical memory you know can be

1350
00:24:59,590 --> 00:24:59,600
so the physical memory you know can be
 

1351
00:24:59,600 --> 00:25:01,510
so the physical memory you know can be
bigger than the

1352
00:25:01,510 --> 00:25:01,520
bigger than the
 

1353
00:25:01,520 --> 00:25:04,149
bigger than the
single virtual address space but it's

1354
00:25:04,149 --> 00:25:04,159
single virtual address space but it's
 

1355
00:25:04,159 --> 00:25:05,830
single virtual address space but it's
limited to two power up to 56

1356
00:25:05,830 --> 00:25:05,840
limited to two power up to 56
 

1357
00:25:05,840 --> 00:25:07,830
limited to two power up to 56
you know most boards probably you know

1358
00:25:07,830 --> 00:25:07,840
you know most boards probably you know
 

1359
00:25:07,840 --> 00:25:10,310
you know most boards probably you know
that don't support two to the power 56

1360
00:25:10,310 --> 00:25:10,320
that don't support two to the power 56
 

1361
00:25:10,320 --> 00:25:12,549
that don't support two to the power 56
uh physical memory because of gigantic

1362
00:25:12,549 --> 00:25:12,559
uh physical memory because of gigantic
 

1363
00:25:12,559 --> 00:25:14,230
uh physical memory because of gigantic
amount of physical memory

1364
00:25:14,230 --> 00:25:14,240
amount of physical memory
 

1365
00:25:14,240 --> 00:25:16,149
amount of physical memory
but in principle the board could you

1366
00:25:16,149 --> 00:25:16,159
but in principle the board could you
 

1367
00:25:16,159 --> 00:25:18,630
but in principle the board could you
know if you could manufacture it

1368
00:25:18,630 --> 00:25:18,640
know if you could manufacture it
 

1369
00:25:18,640 --> 00:25:20,630
know if you could manufacture it
support 2 to the power 56 of physical

1370
00:25:20,630 --> 00:25:20,640
support 2 to the power 56 of physical
 

1371
00:25:20,640 --> 00:25:21,909
support 2 to the power 56 of physical
memory

1372
00:25:21,909 --> 00:25:21,919
memory
 

1373
00:25:21,919 --> 00:25:23,750
memory
and so in this scheme then if you have

1374
00:25:23,750 --> 00:25:23,760
and so in this scheme then if you have
 

1375
00:25:23,760 --> 00:25:25,110
and so in this scheme then if you have
56

1376
00:25:25,110 --> 00:25:25,120
56
 

1377
00:25:25,120 --> 00:25:27,190
56
bits for the physical address 44 are

1378
00:25:27,190 --> 00:25:27,200
bits for the physical address 44 are
 

1379
00:25:27,200 --> 00:25:28,789
bits for the physical address 44 are
basically the physical page number

1380
00:25:28,789 --> 00:25:28,799
basically the physical page number
 

1381
00:25:28,799 --> 00:25:31,350
basically the physical page number
the ppn and 12 again are the offset that

1382
00:25:31,350 --> 00:25:31,360
the ppn and 12 again are the offset that
 

1383
00:25:31,360 --> 00:25:33,590
the ppn and 12 again are the offset that
are inherited directly from the

1384
00:25:33,590 --> 00:25:33,600
are inherited directly from the
 

1385
00:25:33,600 --> 00:25:36,630
are inherited directly from the
virtual address

1386
00:25:36,630 --> 00:25:36,640

 

1387
00:25:36,640 --> 00:25:40,470

does that all make sense

1388
00:25:40,470 --> 00:25:40,480

 

1389
00:25:40,480 --> 00:25:42,789

so i'm going to stop for a second here

1390
00:25:42,789 --> 00:25:42,799
so i'm going to stop for a second here
 

1391
00:25:42,799 --> 00:25:44,230
so i'm going to stop for a second here
usually you're collecting foss

1392
00:25:44,230 --> 00:25:44,240
usually you're collecting foss
 

1393
00:25:44,240 --> 00:25:45,590
usually you're collecting foss
the other thing point i wanted to make

1394
00:25:45,590 --> 00:25:45,600
the other thing point i wanted to make
 

1395
00:25:45,600 --> 00:25:47,510
the other thing point i wanted to make
here is that uh

1396
00:25:47,510 --> 00:25:47,520
here is that uh
 

1397
00:25:47,520 --> 00:25:49,750
here is that uh
this material uh is important so just

1398
00:25:49,750 --> 00:25:49,760
this material uh is important so just
 

1399
00:25:49,760 --> 00:25:50,870
this material uh is important so just
ask questions

1400
00:25:50,870 --> 00:25:50,880
ask questions
 

1401
00:25:50,880 --> 00:25:53,830
ask questions
uh the details matter uh and it will be

1402
00:25:53,830 --> 00:25:53,840
uh the details matter uh and it will be
 

1403
00:25:53,840 --> 00:25:54,950
uh the details matter uh and it will be
a large part

1404
00:25:54,950 --> 00:25:54,960
a large part
 

1405
00:25:54,960 --> 00:25:56,149
a large part
of you know you really need to

1406
00:25:56,149 --> 00:25:56,159
of you know you really need to
 

1407
00:25:56,159 --> 00:25:58,230
of you know you really need to
understand all this stuff uh to be able

1408
00:25:58,230 --> 00:25:58,240
understand all this stuff uh to be able
 

1409
00:25:58,240 --> 00:25:59,669
understand all this stuff uh to be able
to basically do lab

1410
00:25:59,669 --> 00:25:59,679
to basically do lab
 

1411
00:25:59,679 --> 00:26:02,789
to basically do lab
the next lap the page table lab yeah i'm

1412
00:26:02,789 --> 00:26:02,799
the next lap the page table lab yeah i'm
 

1413
00:26:02,799 --> 00:26:03,669
the next lap the page table lab yeah i'm
here go ahead

1414
00:26:03,669 --> 00:26:03,679
here go ahead
 

1415
00:26:03,679 --> 00:26:07,029
here go ahead
please if you can go back one slide

1416
00:26:07,029 --> 00:26:07,039
please if you can go back one slide
 

1417
00:26:07,039 --> 00:26:10,710
please if you can go back one slide
uh the screen is unclear

1418
00:26:10,710 --> 00:26:10,720
uh the screen is unclear
 

1419
00:26:10,720 --> 00:26:20,149
uh the screen is unclear
which one the page table slide

1420
00:26:20,149 --> 00:26:20,159

 

1421
00:26:20,159 --> 00:26:23,909

this one uh no the most recent one all

1422
00:26:23,909 --> 00:26:23,919
this one uh no the most recent one all
 

1423
00:26:23,919 --> 00:26:25,269
this one uh no the most recent one all
right it also doesn't really matter

1424
00:26:25,269 --> 00:26:25,279
right it also doesn't really matter
 

1425
00:26:25,279 --> 00:26:27,590
right it also doesn't really matter
uh yeah that this is perfect thank you

1426
00:26:27,590 --> 00:26:27,600
uh yeah that this is perfect thank you
 

1427
00:26:27,600 --> 00:26:28,710
uh yeah that this is perfect thank you
so i'm wondering

1428
00:26:28,710 --> 00:26:28,720
so i'm wondering
 

1429
00:26:28,720 --> 00:26:32,230
so i'm wondering
this 4096 byte range

1430
00:26:32,230 --> 00:26:32,240
this 4096 byte range
 

1431
00:26:32,240 --> 00:26:34,710
this 4096 byte range
which we've called a page is that

1432
00:26:34,710 --> 00:26:34,720
which we've called a page is that
 

1433
00:26:34,720 --> 00:26:36,149
which we've called a page is that
assigned as a

1434
00:26:36,149 --> 00:26:36,159
assigned as a
 

1435
00:26:36,159 --> 00:26:38,390
assigned as a
continuous chunk in memory yes there's a

1436
00:26:38,390 --> 00:26:38,400
continuous chunk in memory yes there's a
 

1437
00:26:38,400 --> 00:26:39,830
continuous chunk in memory yes there's a
continuous physical

1438
00:26:39,830 --> 00:26:39,840
continuous physical
 

1439
00:26:39,840 --> 00:26:43,750
continuous physical
you know continuous range of 4096

1440
00:26:43,750 --> 00:26:43,760
you know continuous range of 4096
 

1441
00:26:43,760 --> 00:26:47,430
you know continuous range of 4096
bytes in memory i see

1442
00:26:47,430 --> 00:26:47,440
bytes in memory i see
 

1443
00:26:47,440 --> 00:26:50,630
bytes in memory i see
and then the snap at a granularity

1444
00:26:50,630 --> 00:26:50,640
and then the snap at a granularity
 

1445
00:26:50,640 --> 00:26:53,909
and then the snap at a granularity
of 496 bytes okay

1446
00:26:53,909 --> 00:26:53,919
of 496 bytes okay
 

1447
00:26:53,919 --> 00:26:57,510
of 496 bytes okay
and then 12 the offset like 2 to the 12

1448
00:26:57,510 --> 00:26:57,520
and then 12 the offset like 2 to the 12
 

1449
00:26:57,520 --> 00:26:59,750
and then 12 the offset like 2 to the 12
is 4096 so that's sufficient to

1450
00:26:59,750 --> 00:26:59,760
is 4096 so that's sufficient to
 

1451
00:26:59,760 --> 00:27:02,549
is 4096 so that's sufficient to
uh to cover each of the chunks yeah each

1452
00:27:02,549 --> 00:27:02,559
uh to cover each of the chunks yeah each
 

1453
00:27:02,559 --> 00:27:04,710
uh to cover each of the chunks yeah each
byte and webpage

1454
00:27:04,710 --> 00:27:04,720
byte and webpage
 

1455
00:27:04,720 --> 00:27:07,669
byte and webpage
and where does the 56 come from in the

1456
00:27:07,669 --> 00:27:07,679
and where does the 56 come from in the
 

1457
00:27:07,679 --> 00:27:08,789
and where does the 56 come from in the
diagram

1458
00:27:08,789 --> 00:27:08,799
diagram
 

1459
00:27:08,799 --> 00:27:10,789
diagram
i could follow up until then but i

1460
00:27:10,789 --> 00:27:10,799
i could follow up until then but i
 

1461
00:27:10,799 --> 00:27:12,549
i could follow up until then but i
didn't get where that came from

1462
00:27:12,549 --> 00:27:12,559
didn't get where that came from
 

1463
00:27:12,559 --> 00:27:15,510
didn't get where that came from
uh the designers cook it up so the

1464
00:27:15,510 --> 00:27:15,520
uh the designers cook it up so the
 

1465
00:27:15,520 --> 00:27:17,269
uh the designers cook it up so the
hardware designers decide how big you

1466
00:27:17,269 --> 00:27:17,279
hardware designers decide how big you
 

1467
00:27:17,279 --> 00:27:18,549
hardware designers decide how big you
know a physical dress is

1468
00:27:18,549 --> 00:27:18,559
know a physical dress is
 

1469
00:27:18,559 --> 00:27:20,870
know a physical dress is
uh basically for the whatever board they

1470
00:27:20,870 --> 00:27:20,880
uh basically for the whatever board they
 

1471
00:27:20,880 --> 00:27:22,630
uh basically for the whatever board they
want to design

1472
00:27:22,630 --> 00:27:22,640
want to design
 

1473
00:27:22,640 --> 00:27:26,070
want to design
and so the risk 5 designers decided that

1474
00:27:26,070 --> 00:27:26,080
and so the risk 5 designers decided that
 

1475
00:27:26,080 --> 00:27:26,789
and so the risk 5 designers decided that
56

1476
00:27:26,789 --> 00:27:26,799
56
 

1477
00:27:26,799 --> 00:27:30,870
56
bit physical addresses were a good idea

1478
00:27:30,870 --> 00:27:30,880

 

1479
00:27:30,880 --> 00:27:32,630

and presumably the way they come up with

1480
00:27:32,630 --> 00:27:32,640
and presumably the way they come up with
 

1481
00:27:32,640 --> 00:27:34,389
and presumably the way they come up with
these numbers is they look at technology

1482
00:27:34,389 --> 00:27:34,399
these numbers is they look at technology
 

1483
00:27:34,399 --> 00:27:35,510
these numbers is they look at technology
trends

1484
00:27:35,510 --> 00:27:35,520
trends
 

1485
00:27:35,520 --> 00:27:37,510
trends
and say like well we want to be able for

1486
00:27:37,510 --> 00:27:37,520
and say like well we want to be able for
 

1487
00:27:37,520 --> 00:27:39,190
and say like well we want to be able for
the next sort of five years you know we

1488
00:27:39,190 --> 00:27:39,200
the next sort of five years you know we
 

1489
00:27:39,200 --> 00:27:40,070
the next sort of five years you know we
don't want to predict

1490
00:27:40,070 --> 00:27:40,080
don't want to predict
 

1491
00:27:40,080 --> 00:27:42,070
don't want to predict
that physical memory will be ever bigger

1492
00:27:42,070 --> 00:27:42,080
that physical memory will be ever bigger
 

1493
00:27:42,080 --> 00:27:44,630
that physical memory will be ever bigger
than 2 to the power 56

1494
00:27:44,630 --> 00:27:44,640
than 2 to the power 56
 

1495
00:27:44,640 --> 00:27:45,750
than 2 to the power 56
and probably they're thinking it won't

1496
00:27:45,750 --> 00:27:45,760
and probably they're thinking it won't
 

1497
00:27:45,760 --> 00:27:47,029
and probably they're thinking it won't
be bigger than you know something much

1498
00:27:47,029 --> 00:27:47,039
be bigger than you know something much
 

1499
00:27:47,039 --> 00:27:49,590
be bigger than you know something much
smaller but then you know give them some

1500
00:27:49,590 --> 00:27:49,600
smaller but then you know give them some
 

1501
00:27:49,600 --> 00:27:51,430
smaller but then you know give them some
v-way you know in case you know their

1502
00:27:51,430 --> 00:27:51,440
v-way you know in case you know their
 

1503
00:27:51,440 --> 00:27:52,789
v-way you know in case you know their
prediction is wrong

1504
00:27:52,789 --> 00:27:52,799
prediction is wrong
 

1505
00:27:52,799 --> 00:27:56,549
prediction is wrong
uh they pick a slightly bigger number

1506
00:27:56,549 --> 00:27:56,559
uh they pick a slightly bigger number
 

1507
00:27:56,559 --> 00:27:59,669
uh they pick a slightly bigger number
does that make sense see yeah thanks

1508
00:27:59,669 --> 00:27:59,679
does that make sense see yeah thanks
 

1509
00:27:59,679 --> 00:28:03,830
does that make sense see yeah thanks
yeah a lot of people ask about this

1510
00:28:03,830 --> 00:28:03,840
yeah a lot of people ask about this
 

1511
00:28:03,840 --> 00:28:05,590
yeah a lot of people ask about this
anybody else who raised a hand i think

1512
00:28:05,590 --> 00:28:05,600
anybody else who raised a hand i think
 

1513
00:28:05,600 --> 00:28:06,789
anybody else who raised a hand i think
there's a bunch of people asking

1514
00:28:06,789 --> 00:28:06,799
there's a bunch of people asking
 

1515
00:28:06,799 --> 00:28:07,510
there's a bunch of people asking
questions and

1516
00:28:07,510 --> 00:28:07,520
questions and
 

1517
00:28:07,520 --> 00:28:09,750
questions and
unfortunately my zoom doesn't show it's

1518
00:28:09,750 --> 00:28:09,760
unfortunately my zoom doesn't show it's
 

1519
00:28:09,760 --> 00:28:11,110
unfortunately my zoom doesn't show it's
more than two people ranked hands it's

1520
00:28:11,110 --> 00:28:11,120
more than two people ranked hands it's
 

1521
00:28:11,120 --> 00:28:11,590
more than two people ranked hands it's
just

1522
00:28:11,590 --> 00:28:11,600
just
 

1523
00:28:11,600 --> 00:28:13,669
just
multiple people are raising their hands

1524
00:28:13,669 --> 00:28:13,679
multiple people are raising their hands
 

1525
00:28:13,679 --> 00:28:20,230
multiple people are raising their hands
so please jump in if you have a question

1526
00:28:20,230 --> 00:28:20,240

 

1527
00:28:20,240 --> 00:28:23,669

okay if not i have a question

1528
00:28:23,669 --> 00:28:23,679
okay if not i have a question
 

1529
00:28:23,679 --> 00:28:27,110
okay if not i have a question
yeah go ahead um so if the virtual

1530
00:28:27,110 --> 00:28:27,120
yeah go ahead um so if the virtual
 

1531
00:28:27,120 --> 00:28:27,830
yeah go ahead um so if the virtual
memory is

1532
00:28:27,830 --> 00:28:27,840
memory is
 

1533
00:28:27,840 --> 00:28:30,310
memory is
up to 2 to the power of 27 and the

1534
00:28:30,310 --> 00:28:30,320
up to 2 to the power of 27 and the
 

1535
00:28:30,320 --> 00:28:32,549
up to 2 to the power of 27 and the
physical memory is up 2 to the power

1536
00:28:32,549 --> 00:28:32,559
physical memory is up 2 to the power
 

1537
00:28:32,559 --> 00:28:35,669
physical memory is up 2 to the power
2 to the 56 right so

1538
00:28:35,669 --> 00:28:35,679
2 to the 56 right so
 

1539
00:28:35,679 --> 00:28:39,269
2 to the 56 right so
we could have like we could

1540
00:28:39,269 --> 00:28:39,279
we could have like we could
 

1541
00:28:39,279 --> 00:28:41,110
we could have like we could
we could have multiple processes that

1542
00:28:41,110 --> 00:28:41,120
we could have multiple processes that
 

1543
00:28:41,120 --> 00:28:42,950
we could have multiple processes that
could exhaust all their virtual memories

1544
00:28:42,950 --> 00:28:42,960
could exhaust all their virtual memories
 

1545
00:28:42,960 --> 00:28:44,070
could exhaust all their virtual memories
without

1546
00:28:44,070 --> 00:28:44,080
without
 

1547
00:28:44,080 --> 00:28:46,549
without
using up all the physical memory right

1548
00:28:46,549 --> 00:28:46,559
using up all the physical memory right
 

1549
00:28:46,559 --> 00:28:52,070
using up all the physical memory right
that's correct

1550
00:28:52,070 --> 00:28:52,080

 

1551
00:28:52,080 --> 00:28:55,269

that's absolutely correct okay i have a

1552
00:28:55,269 --> 00:28:55,279
that's absolutely correct okay i have a
 

1553
00:28:55,279 --> 00:28:56,149
that's absolutely correct okay i have a
question too

1554
00:28:56,149 --> 00:28:56,159
question too
 

1555
00:28:56,159 --> 00:28:59,669
question too
yeah go ahead um so this 56

1556
00:28:59,669 --> 00:28:59,679
yeah go ahead um so this 56
 

1557
00:28:59,679 --> 00:29:03,190
yeah go ahead um so this 56
for the physical address is that the

1558
00:29:03,190 --> 00:29:03,200
for the physical address is that the
 

1559
00:29:03,200 --> 00:29:06,389
for the physical address is that the
the number of possible memory locations

1560
00:29:06,389 --> 00:29:06,399
the number of possible memory locations
 

1561
00:29:06,399 --> 00:29:08,470
the number of possible memory locations
i i don't think it's the number of bits

1562
00:29:08,470 --> 00:29:08,480
i i don't think it's the number of bits
 

1563
00:29:08,480 --> 00:29:10,230
i i don't think it's the number of bits
right because this is a 64-bit

1564
00:29:10,230 --> 00:29:10,240
right because this is a 64-bit
 

1565
00:29:10,240 --> 00:29:13,669
right because this is a 64-bit
machine that 56 could go up to

1566
00:29:13,669 --> 00:29:13,679
machine that 56 could go up to
 

1567
00:29:13,679 --> 00:29:16,950
machine that 56 could go up to
64 but they just chose it to have just

1568
00:29:16,950 --> 00:29:16,960
64 but they just chose it to have just
 

1569
00:29:16,960 --> 00:29:17,830
64 but they just chose it to have just
56.

1570
00:29:17,830 --> 00:29:17,840
56.
 

1571
00:29:17,840 --> 00:29:19,669
56.
that's right that's correct and one way

1572
00:29:19,669 --> 00:29:19,679
that's right that's correct and one way
 

1573
00:29:19,679 --> 00:29:20,870
that's right that's correct and one way
to think about it then they only have to

1574
00:29:20,870 --> 00:29:20,880
to think about it then they only have to
 

1575
00:29:20,880 --> 00:29:22,070
to think about it then they only have to
run 56 wire

1576
00:29:22,070 --> 00:29:22,080
run 56 wire
 

1577
00:29:22,080 --> 00:29:25,510
run 56 wire
wires on the board as opposed to 64.

1578
00:29:25,510 --> 00:29:25,520
wires on the board as opposed to 64.
 

1579
00:29:25,520 --> 00:29:30,310
wires on the board as opposed to 64.
i see i see

1580
00:29:30,310 --> 00:29:30,320

 

1581
00:29:30,320 --> 00:29:33,669

okay i also have a question um

1582
00:29:33,669 --> 00:29:33,679
okay i also have a question um
 

1583
00:29:33,679 --> 00:29:36,230
okay i also have a question um
so kind of um could you go back one

1584
00:29:36,230 --> 00:29:36,240
so kind of um could you go back one
 

1585
00:29:36,240 --> 00:29:37,269
so kind of um could you go back one
slide maybe

1586
00:29:37,269 --> 00:29:37,279
slide maybe
 

1587
00:29:37,279 --> 00:29:40,630
slide maybe
yep um so

1588
00:29:40,630 --> 00:29:40,640
yep um so
 

1589
00:29:40,640 --> 00:29:44,389
yep um so
from the cpu um we go through the mmu

1590
00:29:44,389 --> 00:29:44,399
from the cpu um we go through the mmu
 

1591
00:29:44,399 --> 00:29:46,149
from the cpu um we go through the mmu
and then to the memory

1592
00:29:46,149 --> 00:29:46,159
and then to the memory
 

1593
00:29:46,159 --> 00:29:48,870
and then to the memory
uh but where where here is the

1594
00:29:48,870 --> 00:29:48,880
uh but where where here is the
 

1595
00:29:48,880 --> 00:29:50,230
uh but where where here is the
distinction

1596
00:29:50,230 --> 00:29:50,240
distinction
 

1597
00:29:50,240 --> 00:29:53,110
distinction
for different processes because like

1598
00:29:53,110 --> 00:29:53,120
for different processes because like
 

1599
00:29:53,120 --> 00:29:54,230
for different processes because like
each process

1600
00:29:54,230 --> 00:29:54,240
each process
 

1601
00:29:54,240 --> 00:29:56,710
each process
like process like the shell process has

1602
00:29:56,710 --> 00:29:56,720
like process like the shell process has
 

1603
00:29:56,720 --> 00:29:57,350
like process like the shell process has
something at

1604
00:29:57,350 --> 00:29:57,360
something at
 

1605
00:29:57,360 --> 00:30:01,190
something at
address like 0x uh one zero zero zero

1606
00:30:01,190 --> 00:30:01,200
address like 0x uh one zero zero zero
 

1607
00:30:01,200 --> 00:30:02,950
address like 0x uh one zero zero zero
and then the ls process also has

1608
00:30:02,950 --> 00:30:02,960
and then the ls process also has
 

1609
00:30:02,960 --> 00:30:04,950
and then the ls process also has
something at address zero x one zero

1610
00:30:04,950 --> 00:30:04,960
something at address zero x one zero
 

1611
00:30:04,960 --> 00:30:05,830
something at address zero x one zero
zero zero

1612
00:30:05,830 --> 00:30:05,840
zero zero
 

1613
00:30:05,840 --> 00:30:07,350
zero zero
so we need to translate those to

1614
00:30:07,350 --> 00:30:07,360
so we need to translate those to
 

1615
00:30:07,360 --> 00:30:09,110
so we need to translate those to
different physical

1616
00:30:09,110 --> 00:30:09,120
different physical
 

1617
00:30:09,120 --> 00:30:13,269
different physical
so the satp register

1618
00:30:13,269 --> 00:30:13,279
so the satp register
 

1619
00:30:13,279 --> 00:30:15,510
so the satp register
contains the register it contains the

1620
00:30:15,510 --> 00:30:15,520
contains the register it contains the
 

1621
00:30:15,520 --> 00:30:18,389
contains the register it contains the
address of which map to use

1622
00:30:18,389 --> 00:30:18,399
address of which map to use
 

1623
00:30:18,399 --> 00:30:21,350
address of which map to use
so ls runs with its own map you know cat

1624
00:30:21,350 --> 00:30:21,360
so ls runs with its own map you know cat
 

1625
00:30:21,360 --> 00:30:22,710
so ls runs with its own map you know cat
runs with zone map

1626
00:30:22,710 --> 00:30:22,720
runs with zone map
 

1627
00:30:22,720 --> 00:30:25,029
runs with zone map
okay so so each process will have com

1628
00:30:25,029 --> 00:30:25,039
okay so so each process will have com
 

1629
00:30:25,039 --> 00:30:25,990
okay so so each process will have com
it's completely

1630
00:30:25,990 --> 00:30:26,000
it's completely
 

1631
00:30:26,000 --> 00:30:29,590
it's completely
own map yep makes sense thank you

1632
00:30:29,590 --> 00:30:29,600
own map yep makes sense thank you
 

1633
00:30:29,600 --> 00:30:31,590
own map yep makes sense thank you
and in fact there's a great uh leeway to

1634
00:30:31,590 --> 00:30:31,600
and in fact there's a great uh leeway to
 

1635
00:30:31,600 --> 00:30:33,269
and in fact there's a great uh leeway to
the next

1636
00:30:33,269 --> 00:30:33,279
the next
 

1637
00:30:33,279 --> 00:30:35,590
the next
point so if every process has its own

1638
00:30:35,590 --> 00:30:35,600
point so if every process has its own
 

1639
00:30:35,600 --> 00:30:36,789
point so if every process has its own
map

1640
00:30:36,789 --> 00:30:36,799
map
 

1641
00:30:36,799 --> 00:30:39,110
map
you know how big is this map like that

1642
00:30:39,110 --> 00:30:39,120
you know how big is this map like that
 

1643
00:30:39,120 --> 00:30:40,789
you know how big is this map like that
i've drawn here

1644
00:30:40,789 --> 00:30:40,799
i've drawn here
 

1645
00:30:40,799 --> 00:30:43,430
i've drawn here
well that map is 2 to the power of 47

1646
00:30:43,430 --> 00:30:43,440
well that map is 2 to the power of 47
 

1647
00:30:43,440 --> 00:30:46,549
well that map is 2 to the power of 47
entries correct

1648
00:30:46,549 --> 00:30:46,559

 

1649
00:30:46,559 --> 00:30:49,669

uh and that's pretty big uh and i would

1650
00:30:49,669 --> 00:30:49,679
uh and that's pretty big uh and i would
 

1651
00:30:49,679 --> 00:30:50,070
uh and that's pretty big uh and i would
feel

1652
00:30:50,070 --> 00:30:50,080
feel
 

1653
00:30:50,080 --> 00:30:52,230
feel
physical memory reasonable quickly uh if

1654
00:30:52,230 --> 00:30:52,240
physical memory reasonable quickly uh if
 

1655
00:30:52,240 --> 00:30:54,549
physical memory reasonable quickly uh if
every process exactly had a complete you

1656
00:30:54,549 --> 00:30:54,559
every process exactly had a complete you
 

1657
00:30:54,559 --> 00:30:55,029
every process exactly had a complete you
know

1658
00:30:55,029 --> 00:30:55,039
know
 

1659
00:30:55,039 --> 00:30:57,750
know
populated map right then it was gigantic

1660
00:30:57,750 --> 00:30:57,760
populated map right then it was gigantic
 

1661
00:30:57,760 --> 00:30:59,110
populated map right then it was gigantic
you know means that every process is

1662
00:30:59,110 --> 00:30:59,120
you know means that every process is
 

1663
00:30:59,120 --> 00:31:00,070
you know means that every process is
very big

1664
00:31:00,070 --> 00:31:00,080
very big
 

1665
00:31:00,080 --> 00:31:02,870
very big
and so in fact this is not the way uh

1666
00:31:02,870 --> 00:31:02,880
and so in fact this is not the way uh
 

1667
00:31:02,880 --> 00:31:04,789
and so in fact this is not the way uh
the hardware actually stores page tables

1668
00:31:04,789 --> 00:31:04,799
the hardware actually stores page tables
 

1669
00:31:04,799 --> 00:31:05,909
the hardware actually stores page tables
uh you know you can think about it

1670
00:31:05,909 --> 00:31:05,919
uh you know you can think about it
 

1671
00:31:05,919 --> 00:31:07,590
uh you know you can think about it
conceptually as an array

1672
00:31:07,590 --> 00:31:07,600
conceptually as an array
 

1673
00:31:07,600 --> 00:31:09,350
conceptually as an array
you know going from zero to two to power

1674
00:31:09,350 --> 00:31:09,360
you know going from zero to two to power
 

1675
00:31:09,360 --> 00:31:11,110
you know going from zero to two to power
27 but actually is not what happens in

1676
00:31:11,110 --> 00:31:11,120
27 but actually is not what happens in
 

1677
00:31:11,120 --> 00:31:12,070
27 but actually is not what happens in
practice

1678
00:31:12,070 --> 00:31:12,080
practice
 

1679
00:31:12,080 --> 00:31:14,950
practice
in practice it's a multi-level uh

1680
00:31:14,950 --> 00:31:14,960
in practice it's a multi-level uh
 

1681
00:31:14,960 --> 00:31:15,509
in practice it's a multi-level uh
structure

1682
00:31:15,509 --> 00:31:15,519
structure
 

1683
00:31:15,519 --> 00:31:20,789
structure
and here's actually the real risk five

1684
00:31:20,789 --> 00:31:20,799

 

1685
00:31:20,799 --> 00:31:24,070

page table structure

1686
00:31:24,070 --> 00:31:24,080
page table structure
 

1687
00:31:24,080 --> 00:31:27,509
page table structure
and what the hardware implements and so

1688
00:31:27,509 --> 00:31:27,519
and what the hardware implements and so
 

1689
00:31:27,519 --> 00:31:29,509
and what the hardware implements and so
what happens with the 27 bits that we

1690
00:31:29,509 --> 00:31:29,519
what happens with the 27 bits that we
 

1691
00:31:29,519 --> 00:31:30,789
what happens with the 27 bits that we
saw earlier

1692
00:31:30,789 --> 00:31:30,799
saw earlier
 

1693
00:31:30,799 --> 00:31:34,230
saw earlier
the index it's actually split in

1694
00:31:34,230 --> 00:31:34,240
the index it's actually split in
 

1695
00:31:34,240 --> 00:31:38,230
the index it's actually split in
three nine bit numbers

1696
00:31:38,230 --> 00:31:38,240
three nine bit numbers
 

1697
00:31:38,240 --> 00:31:41,509
three nine bit numbers
and the first the top nine bits are used

1698
00:31:41,509 --> 00:31:41,519
and the first the top nine bits are used
 

1699
00:31:41,519 --> 00:31:42,230
and the first the top nine bits are used
to index

1700
00:31:42,230 --> 00:31:42,240
to index
 

1701
00:31:42,240 --> 00:31:45,590
to index
into the top level page table directory

1702
00:31:45,590 --> 00:31:45,600
into the top level page table directory
 

1703
00:31:45,600 --> 00:31:47,029
into the top level page table directory
as they're called

1704
00:31:47,029 --> 00:31:47,039
as they're called
 

1705
00:31:47,039 --> 00:31:48,789
as they're called
and so in one directory you know one of

1706
00:31:48,789 --> 00:31:48,799
and so in one directory you know one of
 

1707
00:31:48,799 --> 00:31:51,830
and so in one directory you know one of
these guys you know is 496 bytes

1708
00:31:51,830 --> 00:31:51,840
these guys you know is 496 bytes
 

1709
00:31:51,840 --> 00:31:56,149
these guys you know is 496 bytes
496 bytes just like a page size

1710
00:31:56,149 --> 00:31:56,159
496 bytes just like a page size
 

1711
00:31:56,159 --> 00:31:59,590
496 bytes just like a page size
uh a pte entry one of these entries in

1712
00:31:59,590 --> 00:31:59,600
uh a pte entry one of these entries in
 

1713
00:31:59,600 --> 00:32:00,630
uh a pte entry one of these entries in
that thing is

1714
00:32:00,630 --> 00:32:00,640
that thing is
 

1715
00:32:00,640 --> 00:32:03,669
that thing is
64 bytes

1716
00:32:03,669 --> 00:32:03,679

 

1717
00:32:03,679 --> 00:32:07,190

64 bits i mean sorry like the register

1718
00:32:07,190 --> 00:32:07,200
64 bits i mean sorry like the register
 

1719
00:32:07,200 --> 00:32:09,669
64 bits i mean sorry like the register
with so eight bytes and so this is going

1720
00:32:09,669 --> 00:32:09,679
with so eight bytes and so this is going
 

1721
00:32:09,679 --> 00:32:12,630
with so eight bytes and so this is going
to mean that if you do 496

1722
00:32:12,630 --> 00:32:12,640
to mean that if you do 496
 

1723
00:32:12,640 --> 00:32:16,149
to mean that if you do 496
divided by 8 means there are 512 entries

1724
00:32:16,149 --> 00:32:16,159
divided by 8 means there are 512 entries
 

1725
00:32:16,159 --> 00:32:19,269
divided by 8 means there are 512 entries
in one of those directory pages

1726
00:32:19,269 --> 00:32:19,279
in one of those directory pages
 

1727
00:32:19,279 --> 00:32:21,909
in one of those directory pages
so basically what happens is the satp

1728
00:32:21,909 --> 00:32:21,919
so basically what happens is the satp
 

1729
00:32:21,919 --> 00:32:23,430
so basically what happens is the satp
points to the top

1730
00:32:23,430 --> 00:32:23,440
points to the top
 

1731
00:32:23,440 --> 00:32:25,590
points to the top
uh root directory we take the top level

1732
00:32:25,590 --> 00:32:25,600
uh root directory we take the top level
 

1733
00:32:25,600 --> 00:32:26,789
uh root directory we take the top level
nine bits index

1734
00:32:26,789 --> 00:32:26,799
nine bits index
 

1735
00:32:26,799 --> 00:32:29,669
nine bits index
into the page directory and that gives

1736
00:32:29,669 --> 00:32:29,679
into the page directory and that gives
 

1737
00:32:29,679 --> 00:32:31,909
into the page directory and that gives
us a new physical page number

1738
00:32:31,909 --> 00:32:31,919
us a new physical page number
 

1739
00:32:31,919 --> 00:32:33,990
us a new physical page number
and that physical page number is the

1740
00:32:33,990 --> 00:32:34,000
and that physical page number is the
 

1741
00:32:34,000 --> 00:32:35,909
and that physical page number is the
page directory for the next level

1742
00:32:35,909 --> 00:32:35,919
page directory for the next level
 

1743
00:32:35,919 --> 00:32:39,269
page directory for the next level
so whenever we use the next level index

1744
00:32:39,269 --> 00:32:39,279
so whenever we use the next level index
 

1745
00:32:39,279 --> 00:32:42,070
so whenever we use the next level index
to index into that page directory and

1746
00:32:42,070 --> 00:32:42,080
to index into that page directory and
 

1747
00:32:42,080 --> 00:32:43,990
to index into that page directory and
then you know and so forth you know we

1748
00:32:43,990 --> 00:32:44,000
then you know and so forth you know we
 

1749
00:32:44,000 --> 00:32:45,750
then you know and so forth you know we
like the final one you know we get the

1750
00:32:45,750 --> 00:32:45,760
like the final one you know we get the
 

1751
00:32:45,760 --> 00:32:48,149
like the final one you know we get the
bottom level page directory and that

1752
00:32:48,149 --> 00:32:48,159
bottom level page directory and that
 

1753
00:32:48,159 --> 00:32:49,669
bottom level page directory and that
basically gives us the entry

1754
00:32:49,669 --> 00:32:49,679
basically gives us the entry
 

1755
00:32:49,679 --> 00:32:51,669
basically gives us the entry
uh that maps the virtual address to a

1756
00:32:51,669 --> 00:32:51,679
uh that maps the virtual address to a
 

1757
00:32:51,679 --> 00:32:55,509
uh that maps the virtual address to a
fiscal address

1758
00:32:55,509 --> 00:32:55,519

 

1759
00:32:55,519 --> 00:32:57,110

so in some sense again it's very similar

1760
00:32:57,110 --> 00:32:57,120
so in some sense again it's very similar
 

1761
00:32:57,120 --> 00:32:58,870
so in some sense again it's very similar
to uh what i showed you in the previous

1762
00:32:58,870 --> 00:32:58,880
to uh what i showed you in the previous
 

1763
00:32:58,880 --> 00:33:00,070
to uh what i showed you in the previous
slide except you know basically the

1764
00:33:00,070 --> 00:33:00,080
slide except you know basically the
 

1765
00:33:00,080 --> 00:33:01,830
slide except you know basically the
index happens in three steps instead of

1766
00:33:01,830 --> 00:33:01,840
index happens in three steps instead of
 

1767
00:33:01,840 --> 00:33:02,789
index happens in three steps instead of
one step

1768
00:33:02,789 --> 00:33:02,799
one step
 

1769
00:33:02,799 --> 00:33:04,789
one step
and this is advantage the main advantage

1770
00:33:04,789 --> 00:33:04,799
and this is advantage the main advantage
 

1771
00:33:04,799 --> 00:33:06,310
and this is advantage the main advantage
of this scheme is that then

1772
00:33:06,310 --> 00:33:06,320
of this scheme is that then
 

1773
00:33:06,320 --> 00:33:08,149
of this scheme is that then
if large paid parts of the address phase

1774
00:33:08,149 --> 00:33:08,159
if large paid parts of the address phase
 

1775
00:33:08,159 --> 00:33:09,350
if large paid parts of the address phase
are not being used

1776
00:33:09,350 --> 00:33:09,360
are not being used
 

1777
00:33:09,360 --> 00:33:10,789
are not being used
you don't have to have any page table

1778
00:33:10,789 --> 00:33:10,799
you don't have to have any page table
 

1779
00:33:10,799 --> 00:33:12,710
you don't have to have any page table
entries for them

1780
00:33:12,710 --> 00:33:12,720
entries for them
 

1781
00:33:12,720 --> 00:33:14,470
entries for them
as for example let's say you have an

1782
00:33:14,470 --> 00:33:14,480
as for example let's say you have an
 

1783
00:33:14,480 --> 00:33:16,149
as for example let's say you have an
address space

1784
00:33:16,149 --> 00:33:16,159
address space
 

1785
00:33:16,159 --> 00:33:18,789
address space
that has only one page like the bottom

1786
00:33:18,789 --> 00:33:18,799
that has only one page like the bottom
 

1787
00:33:18,799 --> 00:33:19,509
that has only one page like the bottom
page

1788
00:33:19,509 --> 00:33:19,519
page
 

1789
00:33:19,519 --> 00:33:22,789
page
you know it's a 4096

1790
00:33:22,789 --> 00:33:22,799
you know it's a 4096
 

1791
00:33:22,799 --> 00:33:24,710
you know it's a 4096
and no other pages are in the address

1792
00:33:24,710 --> 00:33:24,720
and no other pages are in the address
 

1793
00:33:24,720 --> 00:33:26,950
and no other pages are in the address
page so only the addresses zero to four

1794
00:33:26,950 --> 00:33:26,960
page so only the addresses zero to four
 

1795
00:33:26,960 --> 00:33:27,909
page so only the addresses zero to four
thousand ninety five

1796
00:33:27,909 --> 00:33:27,919
thousand ninety five
 

1797
00:33:27,919 --> 00:33:29,990
thousand ninety five
six are actually mapped how many page

1798
00:33:29,990 --> 00:33:30,000
six are actually mapped how many page
 

1799
00:33:30,000 --> 00:33:31,830
six are actually mapped how many page
table entry or page table directors do

1800
00:33:31,830 --> 00:33:31,840
table entry or page table directors do
 

1801
00:33:31,840 --> 00:33:32,230
table entry or page table directors do
you need

1802
00:33:32,230 --> 00:33:32,240
you need
 

1803
00:33:32,240 --> 00:33:39,190
you need
to map that particular page

1804
00:33:39,190 --> 00:33:39,200
to map that particular page
 

1805
00:33:39,200 --> 00:33:41,830
to map that particular page
well you need one at the top correct and

1806
00:33:41,830 --> 00:33:41,840
well you need one at the top correct and
 

1807
00:33:41,840 --> 00:33:42,310
well you need one at the top correct and
you need

1808
00:33:42,310 --> 00:33:42,320
you need
 

1809
00:33:42,320 --> 00:33:46,389
you need
basically value in that entry for zero

1810
00:33:46,389 --> 00:33:46,399
basically value in that entry for zero
 

1811
00:33:46,399 --> 00:33:48,230
basically value in that entry for zero
the top level nine bits you know of the

1812
00:33:48,230 --> 00:33:48,240
the top level nine bits you know of the
 

1813
00:33:48,240 --> 00:33:50,549
the top level nine bits you know of the
zero earned zero so you need an entry

1814
00:33:50,549 --> 00:33:50,559
zero earned zero so you need an entry
 

1815
00:33:50,559 --> 00:33:51,750
zero earned zero so you need an entry
for zero

1816
00:33:51,750 --> 00:33:51,760
for zero
 

1817
00:33:51,760 --> 00:33:53,909
for zero
so that means you need one middle level

1818
00:33:53,909 --> 00:33:53,919
so that means you need one middle level
 

1819
00:33:53,919 --> 00:33:55,830
so that means you need one middle level
entry you know that basically uh

1820
00:33:55,830 --> 00:33:55,840
entry you know that basically uh
 

1821
00:33:55,840 --> 00:33:57,110
entry you know that basically uh
corresponds to the next

1822
00:33:57,110 --> 00:33:57,120
corresponds to the next
 

1823
00:33:57,120 --> 00:33:59,350
corresponds to the next
you know nine zero bits and then one

1824
00:33:59,350 --> 00:33:59,360
you know nine zero bits and then one
 

1825
00:33:59,360 --> 00:34:00,149
you know nine zero bits and then one
entry for the

1826
00:34:00,149 --> 00:34:00,159
entry for the
 

1827
00:34:00,159 --> 00:34:02,870
entry for the
next nine zero bits so basically we get

1828
00:34:02,870 --> 00:34:02,880
next nine zero bits so basically we get
 

1829
00:34:02,880 --> 00:34:03,590
next nine zero bits so basically we get
away

1830
00:34:03,590 --> 00:34:03,600
away
 

1831
00:34:03,600 --> 00:34:11,270
away
with three uh page directories

1832
00:34:11,270 --> 00:34:11,280

 

1833
00:34:11,280 --> 00:34:12,710

and in our previous scheme on the

1834
00:34:12,710 --> 00:34:12,720
and in our previous scheme on the
 

1835
00:34:12,720 --> 00:34:14,710
and in our previous scheme on the
previous slide correct we had 2 to the

1836
00:34:14,710 --> 00:34:14,720
previous slide correct we had 2 to the
 

1837
00:34:14,720 --> 00:34:15,750
previous slide correct we had 2 to the
power of 27

1838
00:34:15,750 --> 00:34:15,760
power of 27
 

1839
00:34:15,760 --> 00:34:17,589
power of 27
entries and now we basically have to

1840
00:34:17,589 --> 00:34:17,599
entries and now we basically have to
 

1841
00:34:17,599 --> 00:34:19,829
entries and now we basically have to
have 3 times whatever 512 entries and

1842
00:34:19,829 --> 00:34:19,839
have 3 times whatever 512 entries and
 

1843
00:34:19,839 --> 00:34:21,829
have 3 times whatever 512 entries and
we're done

1844
00:34:21,829 --> 00:34:21,839
we're done
 

1845
00:34:21,839 --> 00:34:25,109
we're done
and that's the main reason why

1846
00:34:25,109 --> 00:34:25,119
and that's the main reason why
 

1847
00:34:25,119 --> 00:34:27,270
and that's the main reason why
the actual hardware has this

1848
00:34:27,270 --> 00:34:27,280
the actual hardware has this
 

1849
00:34:27,280 --> 00:34:28,869
the actual hardware has this
hierarchical

1850
00:34:28,869 --> 00:34:28,879
hierarchical
 

1851
00:34:28,879 --> 00:34:32,470
hierarchical
or multi-level 3 scheme

1852
00:34:32,470 --> 00:34:32,480
or multi-level 3 scheme
 

1853
00:34:32,480 --> 00:34:33,990
or multi-level 3 scheme
any questions about this because it's

1854
00:34:33,990 --> 00:34:34,000
any questions about this because it's
 

1855
00:34:34,000 --> 00:34:36,149
any questions about this because it's
pretty important

1856
00:34:36,149 --> 00:34:36,159
pretty important
 

1857
00:34:36,159 --> 00:34:39,750
pretty important
samir go ahead um

1858
00:34:39,750 --> 00:34:39,760
samir go ahead um
 

1859
00:34:39,760 --> 00:34:42,950
samir go ahead um
so my question is

1860
00:34:42,950 --> 00:34:42,960
so my question is
 

1861
00:34:42,960 --> 00:34:46,069
so my question is
since the ppn number from each page

1862
00:34:46,069 --> 00:34:46,079
since the ppn number from each page
 

1863
00:34:46,079 --> 00:34:48,389
since the ppn number from each page
table is 44 bits

1864
00:34:48,389 --> 00:34:48,399
table is 44 bits
 

1865
00:34:48,399 --> 00:34:51,589
table is 44 bits
and the second say the middle table

1866
00:34:51,589 --> 00:34:51,599
and the second say the middle table
 

1867
00:34:51,599 --> 00:34:54,149
and the second say the middle table
resides on the virtual memory where do

1868
00:34:54,149 --> 00:34:54,159
resides on the virtual memory where do
 

1869
00:34:54,159 --> 00:34:54,950
resides on the virtual memory where do
we get the

1870
00:34:54,950 --> 00:34:54,960
we get the
 

1871
00:34:54,960 --> 00:34:58,150
we get the
missing 12 bits from well the final 12

1872
00:34:58,150 --> 00:34:58,160
missing 12 bits from well the final 12
 

1873
00:34:58,160 --> 00:34:58,550
missing 12 bits from well the final 12
bits

1874
00:34:58,550 --> 00:34:58,560
bits
 

1875
00:34:58,560 --> 00:35:01,270
bits
okay so good good so you're saying these

1876
00:35:01,270 --> 00:35:01,280
okay so good good so you're saying these
 

1877
00:35:01,280 --> 00:35:02,870
okay so good good so you're saying these
44 correct

1878
00:35:02,870 --> 00:35:02,880
44 correct
 

1879
00:35:02,880 --> 00:35:04,870
44 correct
yes what is going on with that well all

1880
00:35:04,870 --> 00:35:04,880
yes what is going on with that well all
 

1881
00:35:04,880 --> 00:35:06,390
yes what is going on with that well all
pages all page directories are

1882
00:35:06,390 --> 00:35:06,400
pages all page directories are
 

1883
00:35:06,400 --> 00:35:10,230
pages all page directories are
page lines and so basically their uh

1884
00:35:10,230 --> 00:35:10,240
page lines and so basically their uh
 

1885
00:35:10,240 --> 00:35:13,030
page lines and so basically their uh
physical page number is 44 plus the 12

1886
00:35:13,030 --> 00:35:13,040
physical page number is 44 plus the 12
 

1887
00:35:13,040 --> 00:35:13,470
physical page number is 44 plus the 12
uh

1888
00:35:13,470 --> 00:35:13,480
uh
 

1889
00:35:13,480 --> 00:35:14,630
uh
[Music]

1890
00:35:14,630 --> 00:35:14,640
[Music]
 

1891
00:35:14,640 --> 00:35:18,870
[Music]
12 zero bits

1892
00:35:18,870 --> 00:35:18,880

 

1893
00:35:18,880 --> 00:35:20,310

and so what actually happens if we look

1894
00:35:20,310 --> 00:35:20,320
and so what actually happens if we look
 

1895
00:35:20,320 --> 00:35:22,310
and so what actually happens if we look
at these pte entries you know they all

1896
00:35:22,310 --> 00:35:22,320
at these pte entries you know they all
 

1897
00:35:22,320 --> 00:35:23,589
at these pte entries you know they all
have the same sort of form

1898
00:35:23,589 --> 00:35:23,599
have the same sort of form
 

1899
00:35:23,599 --> 00:35:25,750
have the same sort of form
right if you look at one of these guys

1900
00:35:25,750 --> 00:35:25,760
right if you look at one of these guys
 

1901
00:35:25,760 --> 00:35:26,950
right if you look at one of these guys
they're 44

1902
00:35:26,950 --> 00:35:26,960
they're 44
 

1903
00:35:26,960 --> 00:35:29,829
they're 44
bits they're 12 bits zeros so that gives

1904
00:35:29,829 --> 00:35:29,839
bits they're 12 bits zeros so that gives
 

1905
00:35:29,839 --> 00:35:30,390
bits they're 12 bits zeros so that gives
us a

1906
00:35:30,390 --> 00:35:30,400
us a
 

1907
00:35:30,400 --> 00:35:33,589
us a
44 plus 12 is 56 so that gives us a

1908
00:35:33,589 --> 00:35:33,599
44 plus 12 is 56 so that gives us a
 

1909
00:35:33,599 --> 00:35:34,790
44 plus 12 is 56 so that gives us a
physical address

1910
00:35:34,790 --> 00:35:34,800
physical address
 

1911
00:35:34,800 --> 00:35:38,310
physical address
correct um and so that means

1912
00:35:38,310 --> 00:35:38,320
correct um and so that means
 

1913
00:35:38,320 --> 00:35:40,390
correct um and so that means
in this 64 bits there's actually some

1914
00:35:40,390 --> 00:35:40,400
in this 64 bits there's actually some
 

1915
00:35:40,400 --> 00:35:43,030
in this 64 bits there's actually some
bits left they're not being used in fact

1916
00:35:43,030 --> 00:35:43,040
bits left they're not being used in fact
 

1917
00:35:43,040 --> 00:35:44,950
bits left they're not being used in fact
the bottom 12 bits will basically or the

1918
00:35:44,950 --> 00:35:44,960
the bottom 12 bits will basically or the
 

1919
00:35:44,960 --> 00:35:46,150
the bottom 12 bits will basically or the
bottom 10 would definitely

1920
00:35:46,150 --> 00:35:46,160
bottom 10 would definitely
 

1921
00:35:46,160 --> 00:35:47,589
bottom 10 would definitely
you know the bottom bits are not not

1922
00:35:47,589 --> 00:35:47,599
you know the bottom bits are not not
 

1923
00:35:47,599 --> 00:35:49,349
you know the bottom bits are not not
used at all and in fact the paging

1924
00:35:49,349 --> 00:35:49,359
used at all and in fact the paging
 

1925
00:35:49,359 --> 00:35:50,230
used at all and in fact the paging
hardware

1926
00:35:50,230 --> 00:35:50,240
hardware
 

1927
00:35:50,240 --> 00:35:52,550
hardware
stores or stores that are a bunch of

1928
00:35:52,550 --> 00:35:52,560
stores or stores that are a bunch of
 

1929
00:35:52,560 --> 00:35:53,349
stores or stores that are a bunch of
flags

1930
00:35:53,349 --> 00:35:53,359
flags
 

1931
00:35:53,359 --> 00:35:55,589
flags
that control the translation and we'll

1932
00:35:55,589 --> 00:35:55,599
that control the translation and we'll
 

1933
00:35:55,599 --> 00:35:58,630
that control the translation and we'll
talk about those flags in a second

1934
00:35:58,630 --> 00:35:58,640
talk about those flags in a second
 

1935
00:35:58,640 --> 00:36:01,349
talk about those flags in a second
and but they're there to control the

1936
00:36:01,349 --> 00:36:01,359
and but they're there to control the
 

1937
00:36:01,359 --> 00:36:02,950
and but they're there to control the
translation and they're stored basically

1938
00:36:02,950 --> 00:36:02,960
translation and they're stored basically
 

1939
00:36:02,960 --> 00:36:05,270
translation and they're stored basically
in the bottom 10 bits

1940
00:36:05,270 --> 00:36:05,280
in the bottom 10 bits
 

1941
00:36:05,280 --> 00:36:06,950
in the bottom 10 bits
and it also means correct that you know

1942
00:36:06,950 --> 00:36:06,960
and it also means correct that you know
 

1943
00:36:06,960 --> 00:36:09,670
and it also means correct that you know
if you add these two up that's 54 bits

1944
00:36:09,670 --> 00:36:09,680
if you add these two up that's 54 bits
 

1945
00:36:09,680 --> 00:36:12,230
if you add these two up that's 54 bits
basically there's 10 bits left that are

1946
00:36:12,230 --> 00:36:12,240
basically there's 10 bits left that are
 

1947
00:36:12,240 --> 00:36:13,990
basically there's 10 bits left that are
unused and those 10 bits are

1948
00:36:13,990 --> 00:36:14,000
unused and those 10 bits are
 

1949
00:36:14,000 --> 00:36:17,030
unused and those 10 bits are
again you know for future growth so

1950
00:36:17,030 --> 00:36:17,040
again you know for future growth so
 

1951
00:36:17,040 --> 00:36:18,470
again you know for future growth so
at some point we might have a new type

1952
00:36:18,470 --> 00:36:18,480
at some point we might have a new type
 

1953
00:36:18,480 --> 00:36:20,710
at some point we might have a new type
of risk five processor that will have

1954
00:36:20,710 --> 00:36:20,720
of risk five processor that will have
 

1955
00:36:20,720 --> 00:36:22,710
of risk five processor that will have
slightly different structure page tables

1956
00:36:22,710 --> 00:36:22,720
slightly different structure page tables
 

1957
00:36:22,720 --> 00:36:24,390
slightly different structure page tables
and it might actually have bigger

1958
00:36:24,390 --> 00:36:24,400
and it might actually have bigger
 

1959
00:36:24,400 --> 00:36:26,390
and it might actually have bigger
than 44 bits for the physical page

1960
00:36:26,390 --> 00:36:26,400
than 44 bits for the physical page
 

1961
00:36:26,400 --> 00:36:29,349
than 44 bits for the physical page
number

1962
00:36:29,349 --> 00:36:29,359

 

1963
00:36:29,359 --> 00:36:32,390

okay and in fact you know you can see it

1964
00:36:32,390 --> 00:36:32,400
okay and in fact you know you can see it
 

1965
00:36:32,400 --> 00:36:33,589
okay and in fact you know you can see it
here like if you look at the single

1966
00:36:33,589 --> 00:36:33,599
here like if you look at the single
 

1967
00:36:33,599 --> 00:36:34,390
here like if you look at the single
entry correct

1968
00:36:34,390 --> 00:36:34,400
entry correct
 

1969
00:36:34,400 --> 00:36:36,870
entry correct
that's drawn here uh you know they're

1970
00:36:36,870 --> 00:36:36,880
that's drawn here uh you know they're
 

1971
00:36:36,880 --> 00:36:38,390
that's drawn here uh you know they're
basically

1972
00:36:38,390 --> 00:36:38,400
basically
 

1973
00:36:38,400 --> 00:36:41,990
basically
10 10 bits left that are not being used

1974
00:36:41,990 --> 00:36:42,000
10 10 bits left that are not being used
 

1975
00:36:42,000 --> 00:36:44,310
10 10 bits left that are not being used
um okay so let's look at the flags for a

1976
00:36:44,310 --> 00:36:44,320
um okay so let's look at the flags for a
 

1977
00:36:44,320 --> 00:36:45,030
um okay so let's look at the flags for a
second

1978
00:36:45,030 --> 00:36:45,040
second
 

1979
00:36:45,040 --> 00:36:47,910
second
because that's sort of important uh so

1980
00:36:47,910 --> 00:36:47,920
because that's sort of important uh so
 

1981
00:36:47,920 --> 00:36:49,190
because that's sort of important uh so
every translation

1982
00:36:49,190 --> 00:36:49,200
every translation
 

1983
00:36:49,200 --> 00:36:50,710
every translation
in the bottom 10 bits there are a bunch

1984
00:36:50,710 --> 00:36:50,720
in the bottom 10 bits there are a bunch
 

1985
00:36:50,720 --> 00:36:52,710
in the bottom 10 bits there are a bunch
of flags stored and the first

1986
00:36:52,710 --> 00:36:52,720
of flags stored and the first
 

1987
00:36:52,720 --> 00:36:56,630
of flags stored and the first
flag uh is valid and if

1988
00:36:56,630 --> 00:36:56,640
flag uh is valid and if
 

1989
00:36:56,640 --> 00:36:58,630
flag uh is valid and if
the valid bit is set that means this is

1990
00:36:58,630 --> 00:36:58,640
the valid bit is set that means this is
 

1991
00:36:58,640 --> 00:37:00,069
the valid bit is set that means this is
a valid pte

1992
00:37:00,069 --> 00:37:00,079
a valid pte
 

1993
00:37:00,079 --> 00:37:03,109
a valid pte
and you can use it for translation

1994
00:37:03,109 --> 00:37:03,119
and you can use it for translation
 

1995
00:37:03,119 --> 00:37:06,230
and you can use it for translation
and so for uh so for my little example

1996
00:37:06,230 --> 00:37:06,240
and so for uh so for my little example
 

1997
00:37:06,240 --> 00:37:07,510
and so for uh so for my little example
that i used here with

1998
00:37:07,510 --> 00:37:07,520
that i used here with
 

1999
00:37:07,520 --> 00:37:09,670
that i used here with
three page directories where only entry

2000
00:37:09,670 --> 00:37:09,680
three page directories where only entry
 

2001
00:37:09,680 --> 00:37:10,550
three page directories where only entry
zero is used

2002
00:37:10,550 --> 00:37:10,560
zero is used
 

2003
00:37:10,560 --> 00:37:12,630
zero is used
then only enter zero will have the valve

2004
00:37:12,630 --> 00:37:12,640
then only enter zero will have the valve
 

2005
00:37:12,640 --> 00:37:14,550
then only enter zero will have the valve
bit set and none the other five and

2006
00:37:14,550 --> 00:37:14,560
bit set and none the other five and
 

2007
00:37:14,560 --> 00:37:16,470
bit set and none the other five and
eleven entries will not have the valve

2008
00:37:16,470 --> 00:37:16,480
eleven entries will not have the valve
 

2009
00:37:16,480 --> 00:37:18,470
eleven entries will not have the valve
bit set

2010
00:37:18,470 --> 00:37:18,480
bit set
 

2011
00:37:18,480 --> 00:37:21,510
bit set
and that basically tells the uh mmu well

2012
00:37:21,510 --> 00:37:21,520
and that basically tells the uh mmu well
 

2013
00:37:21,520 --> 00:37:22,870
and that basically tells the uh mmu well
you know you don't have to change down

2014
00:37:22,870 --> 00:37:22,880
you know you don't have to change down
 

2015
00:37:22,880 --> 00:37:23,349
you know you don't have to change down
this

2016
00:37:23,349 --> 00:37:23,359
this
 

2017
00:37:23,359 --> 00:37:25,910
this
uh pt this pte just contains no valid

2018
00:37:25,910 --> 00:37:25,920
uh pt this pte just contains no valid
 

2019
00:37:25,920 --> 00:37:27,910
uh pt this pte just contains no valid
information

2020
00:37:27,910 --> 00:37:27,920
information
 

2021
00:37:27,920 --> 00:37:30,790
information
then r means you know you're allowed to

2022
00:37:30,790 --> 00:37:30,800
then r means you know you're allowed to
 

2023
00:37:30,800 --> 00:37:32,230
then r means you know you're allowed to
read from the page

2024
00:37:32,230 --> 00:37:32,240
read from the page
 

2025
00:37:32,240 --> 00:37:34,230
read from the page
right means you're allowed to write to

2026
00:37:34,230 --> 00:37:34,240
right means you're allowed to write to
 

2027
00:37:34,240 --> 00:37:36,630
right means you're allowed to write to
the page execute means

2028
00:37:36,630 --> 00:37:36,640
the page execute means
 

2029
00:37:36,640 --> 00:37:38,230
the page execute means
you're allowed to execute instructions

2030
00:37:38,230 --> 00:37:38,240
you're allowed to execute instructions
 

2031
00:37:38,240 --> 00:37:39,750
you're allowed to execute instructions
from it uh

2032
00:37:39,750 --> 00:37:39,760
from it uh
 

2033
00:37:39,760 --> 00:37:42,790
from it uh
and user means you know uh this page is

2034
00:37:42,790 --> 00:37:42,800
and user means you know uh this page is
 

2035
00:37:42,800 --> 00:37:44,710
and user means you know uh this page is
also accessible by a process user

2036
00:37:44,710 --> 00:37:44,720
also accessible by a process user
 

2037
00:37:44,720 --> 00:37:45,190
also accessible by a process user
running

2038
00:37:45,190 --> 00:37:45,200
running
 

2039
00:37:45,200 --> 00:37:47,990
running
in user space and then the other bits

2040
00:37:47,990 --> 00:37:48,000
in user space and then the other bits
 

2041
00:37:48,000 --> 00:37:49,270
in user space and then the other bits
you know not that important they'll all

2042
00:37:49,270 --> 00:37:49,280
you know not that important they'll all
 

2043
00:37:49,280 --> 00:37:50,790
you know not that important they'll all
show up at some point

2044
00:37:50,790 --> 00:37:50,800
show up at some point
 

2045
00:37:50,800 --> 00:37:52,230
show up at some point
but those are sort of the five important

2046
00:37:52,230 --> 00:37:52,240
but those are sort of the five important
 

2047
00:37:52,240 --> 00:37:55,829
but those are sort of the five important
bits

2048
00:37:55,829 --> 00:37:55,839

 

2049
00:37:55,839 --> 00:37:59,270

does it all make sense

2050
00:37:59,270 --> 00:37:59,280

 

2051
00:37:59,280 --> 00:38:02,710

yeah nithya

2052
00:38:02,710 --> 00:38:02,720
yeah nithya
 

2053
00:38:02,720 --> 00:38:06,790
yeah nithya
i'm

2054
00:38:06,790 --> 00:38:06,800

 

2055
00:38:06,800 --> 00:38:08,390

that's that's the right presentation

2056
00:38:08,390 --> 00:38:08,400
that's that's the right presentation
 

2057
00:38:08,400 --> 00:38:10,150
that's that's the right presentation
thank you um i had

2058
00:38:10,150 --> 00:38:10,160
thank you um i had
 

2059
00:38:10,160 --> 00:38:12,630
thank you um i had
a quick question about uh the three page

2060
00:38:12,630 --> 00:38:12,640
a quick question about uh the three page
 

2061
00:38:12,640 --> 00:38:13,349
a quick question about uh the three page
tables

2062
00:38:13,349 --> 00:38:13,359
tables
 

2063
00:38:13,359 --> 00:38:16,630
tables
no so um how are the addresses or like

2064
00:38:16,630 --> 00:38:16,640
no so um how are the addresses or like
 

2065
00:38:16,640 --> 00:38:18,310
no so um how are the addresses or like
the ppn values

2066
00:38:18,310 --> 00:38:18,320
the ppn values
 

2067
00:38:18,320 --> 00:38:20,230
the ppn values
combined to form the final physical

2068
00:38:20,230 --> 00:38:20,240
combined to form the final physical
 

2069
00:38:20,240 --> 00:38:22,310
combined to form the final physical
address and i might have missed that

2070
00:38:22,310 --> 00:38:22,320
address and i might have missed that
 

2071
00:38:22,320 --> 00:38:24,150
address and i might have missed that
i know well i may have not said i said

2072
00:38:24,150 --> 00:38:24,160
i know well i may have not said i said
 

2073
00:38:24,160 --> 00:38:25,430
i know well i may have not said i said
it very explicitly

2074
00:38:25,430 --> 00:38:25,440
it very explicitly
 

2075
00:38:25,440 --> 00:38:28,069
it very explicitly
uh so the first ppn correct in top step

2076
00:38:28,069 --> 00:38:28,079
uh so the first ppn correct in top step
 

2077
00:38:28,079 --> 00:38:29,270
uh so the first ppn correct in top step
page

2078
00:38:29,270 --> 00:38:29,280
page
 

2079
00:38:29,280 --> 00:38:31,270
page
the first vpn in the top level page

2080
00:38:31,270 --> 00:38:31,280
the first vpn in the top level page
 

2081
00:38:31,280 --> 00:38:32,390
the first vpn in the top level page
directory

2082
00:38:32,390 --> 00:38:32,400
directory
 

2083
00:38:32,400 --> 00:38:35,270
directory
contains the physical address of the

2084
00:38:35,270 --> 00:38:35,280
contains the physical address of the
 

2085
00:38:35,280 --> 00:38:35,750
contains the physical address of the
next

2086
00:38:35,750 --> 00:38:35,760
next
 

2087
00:38:35,760 --> 00:38:39,109
next
level down right and that one contains

2088
00:38:39,109 --> 00:38:39,119
level down right and that one contains
 

2089
00:38:39,119 --> 00:38:40,950
level down right and that one contains
the one next level down and then in the

2090
00:38:40,950 --> 00:38:40,960
the one next level down and then in the
 

2091
00:38:40,960 --> 00:38:41,910
the one next level down and then in the
final one

2092
00:38:41,910 --> 00:38:41,920
final one
 

2093
00:38:41,920 --> 00:38:44,550
final one
we still have our few 44 bits that

2094
00:38:44,550 --> 00:38:44,560
we still have our few 44 bits that
 

2095
00:38:44,560 --> 00:38:46,069
we still have our few 44 bits that
contains then the actual

2096
00:38:46,069 --> 00:38:46,079
contains then the actual
 

2097
00:38:46,079 --> 00:38:47,910
contains then the actual
physical address of the page that we're

2098
00:38:47,910 --> 00:38:47,920
physical address of the page that we're
 

2099
00:38:47,920 --> 00:38:50,069
physical address of the page that we're
actually trying to translate to

2100
00:38:50,069 --> 00:38:50,079
actually trying to translate to
 

2101
00:38:50,079 --> 00:38:52,470
actually trying to translate to
ah okay that makes sense thank you okay

2102
00:38:52,470 --> 00:38:52,480
ah okay that makes sense thank you okay
 

2103
00:38:52,480 --> 00:38:53,109
ah okay that makes sense thank you okay
and one

2104
00:38:53,109 --> 00:38:53,119
and one
 

2105
00:38:53,119 --> 00:38:54,470
and one
interesting question just like a side

2106
00:38:54,470 --> 00:38:54,480
interesting question just like a side
 

2107
00:38:54,480 --> 00:38:56,550
interesting question just like a side
note before let me answer this

2108
00:38:56,550 --> 00:38:56,560
note before let me answer this
 

2109
00:38:56,560 --> 00:38:58,630
note before let me answer this
my own question before answering the two

2110
00:38:58,630 --> 00:38:58,640
my own question before answering the two
 

2111
00:38:58,640 --> 00:39:00,310
my own question before answering the two
raised hands here uh

2112
00:39:00,310 --> 00:39:00,320
raised hands here uh
 

2113
00:39:00,320 --> 00:39:03,030
raised hands here uh
if you look back at this picture why why

2114
00:39:03,030 --> 00:39:03,040
if you look back at this picture why why
 

2115
00:39:03,040 --> 00:39:04,470
if you look back at this picture why why
are there physical page numbers stored

2116
00:39:04,470 --> 00:39:04,480
are there physical page numbers stored
 

2117
00:39:04,480 --> 00:39:07,829
are there physical page numbers stored
in these page directories

2118
00:39:07,829 --> 00:39:07,839

 

2119
00:39:07,839 --> 00:39:11,510

why not a virtual address

2120
00:39:11,510 --> 00:39:11,520
why not a virtual address
 

2121
00:39:11,520 --> 00:39:13,750
why not a virtual address
because we need to look it up in memory

2122
00:39:13,750 --> 00:39:13,760
because we need to look it up in memory
 

2123
00:39:13,760 --> 00:39:15,430
because we need to look it up in memory
like look up the next directory in

2124
00:39:15,430 --> 00:39:15,440
like look up the next directory in
 

2125
00:39:15,440 --> 00:39:16,069
like look up the next directory in
memory

2126
00:39:16,069 --> 00:39:16,079
memory
 

2127
00:39:16,079 --> 00:39:17,990
memory
yeah right we could not have you know

2128
00:39:17,990 --> 00:39:18,000
yeah right we could not have you know
 

2129
00:39:18,000 --> 00:39:19,750
yeah right we could not have you know
our translation scheme depend on yet

2130
00:39:19,750 --> 00:39:19,760
our translation scheme depend on yet
 

2131
00:39:19,760 --> 00:39:21,190
our translation scheme depend on yet
another translation scheme you know we

2132
00:39:21,190 --> 00:39:21,200
another translation scheme you know we
 

2133
00:39:21,200 --> 00:39:22,470
another translation scheme you know we
could sort of in a recursive intent

2134
00:39:22,470 --> 00:39:22,480
could sort of in a recursive intent
 

2135
00:39:22,480 --> 00:39:24,470
could sort of in a recursive intent
would look so it just doesn't make sense

2136
00:39:24,470 --> 00:39:24,480
would look so it just doesn't make sense
 

2137
00:39:24,480 --> 00:39:26,310
would look so it just doesn't make sense
so that's exactly the right answer it

2138
00:39:26,310 --> 00:39:26,320
so that's exactly the right answer it
 

2139
00:39:26,320 --> 00:39:27,589
so that's exactly the right answer it
has to be a physical number

2140
00:39:27,589 --> 00:39:27,599
has to be a physical number
 

2141
00:39:27,599 --> 00:39:29,349
has to be a physical number
how about the satp what do you use the

2142
00:39:29,349 --> 00:39:29,359
how about the satp what do you use the
 

2143
00:39:29,359 --> 00:39:31,109
how about the satp what do you use the
satp what does it store does it store a

2144
00:39:31,109 --> 00:39:31,119
satp what does it store does it store a
 

2145
00:39:31,119 --> 00:39:39,589
satp what does it store does it store a
physical address or a virtual address

2146
00:39:39,589 --> 00:39:39,599

 

2147
00:39:39,599 --> 00:39:41,670

also physical assuming that the first

2148
00:39:41,670 --> 00:39:41,680
also physical assuming that the first
 

2149
00:39:41,680 --> 00:39:43,589
also physical assuming that the first
page directory is also memory right

2150
00:39:43,589 --> 00:39:43,599
page directory is also memory right
 

2151
00:39:43,599 --> 00:39:45,990
page directory is also memory right
yep yeah exactly so it has to be a

2152
00:39:45,990 --> 00:39:46,000
yep yeah exactly so it has to be a
 

2153
00:39:46,000 --> 00:39:47,109
yep yeah exactly so it has to be a
physical number because

2154
00:39:47,109 --> 00:39:47,119
physical number because
 

2155
00:39:47,119 --> 00:39:48,310
physical number because
we're actually trying to use it for

2156
00:39:48,310 --> 00:39:48,320
we're actually trying to use it for
 

2157
00:39:48,320 --> 00:39:50,710
we're actually trying to use it for
translation and

2158
00:39:50,710 --> 00:39:50,720
translation and
 

2159
00:39:50,720 --> 00:39:52,950
translation and
uh so you know the sap needs to know

2160
00:39:52,950 --> 00:39:52,960
uh so you know the sap needs to know
 

2161
00:39:52,960 --> 00:39:55,109
uh so you know the sap needs to know
what the physical page number is

2162
00:39:55,109 --> 00:39:55,119
what the physical page number is
 

2163
00:39:55,119 --> 00:39:59,030
what the physical page number is
of the root of the page directory

2164
00:39:59,030 --> 00:39:59,040
of the root of the page directory
 

2165
00:39:59,040 --> 00:40:00,630
of the root of the page directory
okay there were two other questions or

2166
00:40:00,630 --> 00:40:00,640
okay there were two other questions or
 

2167
00:40:00,640 --> 00:40:02,150
okay there were two other questions or
two people raised their hands

2168
00:40:02,150 --> 00:40:02,160
two people raised their hands
 

2169
00:40:02,160 --> 00:40:02,560
two people raised their hands
could you

2170
00:40:02,560 --> 00:40:02,570
could you
 

2171
00:40:02,570 --> 00:40:05,990
could you
[Music]

2172
00:40:05,990 --> 00:40:06,000

 

2173
00:40:06,000 --> 00:40:09,190

repeat your question if if it hasn't

2174
00:40:09,190 --> 00:40:09,200
repeat your question if if it hasn't
 

2175
00:40:09,200 --> 00:40:10,790
repeat your question if if it hasn't
been answered yet

2176
00:40:10,790 --> 00:40:10,800
been answered yet
 

2177
00:40:10,800 --> 00:40:14,309
been answered yet
so there's a hierarchy of three tables

2178
00:40:14,309 --> 00:40:14,319
so there's a hierarchy of three tables
 

2179
00:40:14,319 --> 00:40:16,550
so there's a hierarchy of three tables
and each of them is indexed by a part of

2180
00:40:16,550 --> 00:40:16,560
and each of them is indexed by a part of
 

2181
00:40:16,560 --> 00:40:17,990
and each of them is indexed by a part of
the virtual address

2182
00:40:17,990 --> 00:40:18,000
the virtual address
 

2183
00:40:18,000 --> 00:40:22,710
the virtual address
each nine bits long uh

2184
00:40:22,710 --> 00:40:22,720
each nine bits long uh
 

2185
00:40:22,720 --> 00:40:25,990
each nine bits long uh
so i i'm not sure i understand how

2186
00:40:25,990 --> 00:40:26,000
so i i'm not sure i understand how
 

2187
00:40:26,000 --> 00:40:28,390
so i i'm not sure i understand how
chaining between them happens and what

2188
00:40:28,390 --> 00:40:28,400
chaining between them happens and what
 

2189
00:40:28,400 --> 00:40:29,990
chaining between them happens and what
it's meant to accomplish like shouldn't

2190
00:40:29,990 --> 00:40:30,000
it's meant to accomplish like shouldn't
 

2191
00:40:30,000 --> 00:40:30,870
it's meant to accomplish like shouldn't
it be sufficient

2192
00:40:30,870 --> 00:40:30,880
it be sufficient
 

2193
00:40:30,880 --> 00:40:33,670
it be sufficient
to just use those three nine bit

2194
00:40:33,670 --> 00:40:33,680
to just use those three nine bit
 

2195
00:40:33,680 --> 00:40:36,630
to just use those three nine bit
addresses to index into each of them

2196
00:40:36,630 --> 00:40:36,640
addresses to index into each of them
 

2197
00:40:36,640 --> 00:40:38,790
addresses to index into each of them
that's correct so the first the top

2198
00:40:38,790 --> 00:40:38,800
that's correct so the first the top
 

2199
00:40:38,800 --> 00:40:40,390
that's correct so the first the top
level nine bits are usually index in the

2200
00:40:40,390 --> 00:40:40,400
level nine bits are usually index in the
 

2201
00:40:40,400 --> 00:40:41,030
level nine bits are usually index in the
first top

2202
00:40:41,030 --> 00:40:41,040
first top
 

2203
00:40:41,040 --> 00:40:43,030
first top
uh page level directory the second and

2204
00:40:43,030 --> 00:40:43,040
uh page level directory the second and
 

2205
00:40:43,040 --> 00:40:44,550
uh page level directory the second and
the next one and the third in the third

2206
00:40:44,550 --> 00:40:44,560
the next one and the third in the third
 

2207
00:40:44,560 --> 00:40:46,069
the next one and the third in the third
one

2208
00:40:46,069 --> 00:40:46,079
one
 

2209
00:40:46,079 --> 00:40:50,069
one
and so maybe i'm just not understanding

2210
00:40:50,069 --> 00:40:50,079
and so maybe i'm just not understanding
 

2211
00:40:50,079 --> 00:40:51,030
and so maybe i'm just not understanding
this correctly

2212
00:40:51,030 --> 00:40:51,040
this correctly
 

2213
00:40:51,040 --> 00:40:54,790
this correctly
so when uh a process requests a certain

2214
00:40:54,790 --> 00:40:54,800
so when uh a process requests a certain
 

2215
00:40:54,800 --> 00:40:57,349
so when uh a process requests a certain
like virtual address to be looked up it

2216
00:40:57,349 --> 00:40:57,359
like virtual address to be looked up it
 

2217
00:40:57,359 --> 00:41:00,390
like virtual address to be looked up it
loads into the satp register or the cpu

2218
00:41:00,390 --> 00:41:00,400
loads into the satp register or the cpu
 

2219
00:41:00,400 --> 00:41:01,109
loads into the satp register or the cpu
does

2220
00:41:01,109 --> 00:41:01,119
does
 

2221
00:41:01,119 --> 00:41:04,550
does
and that gets the corresponding correct

2222
00:41:04,550 --> 00:41:04,560
and that gets the corresponding correct
 

2223
00:41:04,560 --> 00:41:07,589
and that gets the corresponding correct
highest level page table yeah

2224
00:41:07,589 --> 00:41:07,599
highest level page table yeah
 

2225
00:41:07,599 --> 00:41:10,630
highest level page table yeah
and then that page table

2226
00:41:10,630 --> 00:41:10,640
and then that page table
 

2227
00:41:10,640 --> 00:41:13,270
and then that page table
will and we'll use then the top level

2228
00:41:13,270 --> 00:41:13,280
will and we'll use then the top level
 

2229
00:41:13,280 --> 00:41:15,190
will and we'll use then the top level
nine bits from the 27

2230
00:41:15,190 --> 00:41:15,200
nine bits from the 27
 

2231
00:41:15,200 --> 00:41:18,550
nine bits from the 27
to index into that page directory

2232
00:41:18,550 --> 00:41:18,560
to index into that page directory
 

2233
00:41:18,560 --> 00:41:20,390
to index into that page directory
and then what is what is the result of

2234
00:41:20,390 --> 00:41:20,400
and then what is what is the result of
 

2235
00:41:20,400 --> 00:41:22,309
and then what is what is the result of
that like if the result is

2236
00:41:22,309 --> 00:41:22,319
that like if the result is
 

2237
00:41:22,319 --> 00:41:25,030
that like if the result is
there's nothing there does the mmu

2238
00:41:25,030 --> 00:41:25,040
there's nothing there does the mmu
 

2239
00:41:25,040 --> 00:41:25,670
there's nothing there does the mmu
create

2240
00:41:25,670 --> 00:41:25,680
create
 

2241
00:41:25,680 --> 00:41:28,150
create
a page table no no the mmu basically

2242
00:41:28,150 --> 00:41:28,160
a page table no no the mmu basically
 

2243
00:41:28,160 --> 00:41:29,750
a page table no no the mmu basically
tells the operating system

2244
00:41:29,750 --> 00:41:29,760
tells the operating system
 

2245
00:41:29,760 --> 00:41:31,270
tells the operating system
or tells the processor sorry i couldn't

2246
00:41:31,270 --> 00:41:31,280
or tells the processor sorry i couldn't
 

2247
00:41:31,280 --> 00:41:33,030
or tells the processor sorry i couldn't
translate that address and

2248
00:41:33,030 --> 00:41:33,040
translate that address and
 

2249
00:41:33,040 --> 00:41:35,510
translate that address and
uh and basically turns into a page fault

2250
00:41:35,510 --> 00:41:35,520
uh and basically turns into a page fault
 

2251
00:41:35,520 --> 00:41:36,630
uh and basically turns into a page fault
which we'll talk about a little bit

2252
00:41:36,630 --> 00:41:36,640
which we'll talk about a little bit
 

2253
00:41:36,640 --> 00:41:38,870
which we'll talk about a little bit
later

2254
00:41:38,870 --> 00:41:38,880
later
 

2255
00:41:38,880 --> 00:41:40,790
later
but just you just can't not translate

2256
00:41:40,790 --> 00:41:40,800
but just you just can't not translate
 

2257
00:41:40,800 --> 00:41:42,150
but just you just can't not translate
the address so it doesn't translate it

2258
00:41:42,150 --> 00:41:42,160
the address so it doesn't translate it
 

2259
00:41:42,160 --> 00:41:43,349
the address so it doesn't translate it
it's like you know you can't divide by

2260
00:41:43,349 --> 00:41:43,359
it's like you know you can't divide by
 

2261
00:41:43,359 --> 00:41:43,910
it's like you know you can't divide by
zero

2262
00:41:43,910 --> 00:41:43,920
zero
 

2263
00:41:43,920 --> 00:41:45,750
zero
you know you try to do that the process

2264
00:41:45,750 --> 00:41:45,760
you know you try to do that the process
 

2265
00:41:45,760 --> 00:41:50,069
you know you try to do that the process
just refuses to do it

2266
00:41:50,069 --> 00:41:50,079

 

2267
00:41:50,079 --> 00:41:53,910

i see okay

2268
00:41:53,910 --> 00:41:53,920

 

2269
00:41:53,920 --> 00:41:57,270

brandman what about you brandon yep um

2270
00:41:57,270 --> 00:41:57,280
brandman what about you brandon yep um
 

2271
00:41:57,280 --> 00:41:58,710
brandman what about you brandon yep um
so i just wanted to make sure i

2272
00:41:58,710 --> 00:41:58,720
so i just wanted to make sure i
 

2273
00:41:58,720 --> 00:41:59,510
so i just wanted to make sure i
understand

2274
00:41:59,510 --> 00:41:59,520
understand
 

2275
00:41:59,520 --> 00:42:04,230
understand
how i think maybe we covered

2276
00:42:04,230 --> 00:42:04,240

 

2277
00:42:04,240 --> 00:42:07,270

kind of intermediate page table how we

2278
00:42:07,270 --> 00:42:07,280
kind of intermediate page table how we
 

2279
00:42:07,280 --> 00:42:09,510
kind of intermediate page table how we
calculate the physical address of those

2280
00:42:09,510 --> 00:42:09,520
calculate the physical address of those
 

2281
00:42:09,520 --> 00:42:12,390
calculate the physical address of those
um so is it correct that say if we were

2282
00:42:12,390 --> 00:42:12,400
um so is it correct that say if we were
 

2283
00:42:12,400 --> 00:42:13,990
um so is it correct that say if we were
trying to find a second level page

2284
00:42:13,990 --> 00:42:14,000
trying to find a second level page
 

2285
00:42:14,000 --> 00:42:15,990
trying to find a second level page
table's physical address we would take

2286
00:42:15,990 --> 00:42:16,000
table's physical address we would take
 

2287
00:42:16,000 --> 00:42:18,710
table's physical address we would take
the ppn from the first level page table

2288
00:42:18,710 --> 00:42:18,720
the ppn from the first level page table
 

2289
00:42:18,720 --> 00:42:20,069
the ppn from the first level page table
that's 44 bits

2290
00:42:20,069 --> 00:42:20,079
that's 44 bits
 

2291
00:42:20,079 --> 00:42:22,230
that's 44 bits
and then we add the 12-bit offset from

2292
00:42:22,230 --> 00:42:22,240
and then we add the 12-bit offset from
 

2293
00:42:22,240 --> 00:42:23,670
and then we add the 12-bit offset from
the original virtual address to get the

2294
00:42:23,670 --> 00:42:23,680
the original virtual address to get the
 

2295
00:42:23,680 --> 00:42:24,790
the original virtual address to get the
full 56-bit

2296
00:42:24,790 --> 00:42:24,800
full 56-bit
 

2297
00:42:24,800 --> 00:42:27,349
full 56-bit
fiscal address we don't add the offset

2298
00:42:27,349 --> 00:42:27,359
fiscal address we don't add the offset
 

2299
00:42:27,359 --> 00:42:29,190
fiscal address we don't add the offset
from the virtual address we just take 12

2300
00:42:29,190 --> 00:42:29,200
from the virtual address we just take 12
 

2301
00:42:29,200 --> 00:42:30,870
from the virtual address we just take 12
zero bits

2302
00:42:30,870 --> 00:42:30,880
zero bits
 

2303
00:42:30,880 --> 00:42:33,510
zero bits
so we take the ppn there's 44 bits oh

2304
00:42:33,510 --> 00:42:33,520
so we take the ppn there's 44 bits oh
 

2305
00:42:33,520 --> 00:42:33,910
so we take the ppn there's 44 bits oh
okay

2306
00:42:33,910 --> 00:42:33,920
okay
 

2307
00:42:33,920 --> 00:42:35,990
okay
we do 12 zero bits in the bottom and

2308
00:42:35,990 --> 00:42:36,000
we do 12 zero bits in the bottom and
 

2309
00:42:36,000 --> 00:42:38,550
we do 12 zero bits in the bottom and
that gives us a 56 bit physical address

2310
00:42:38,550 --> 00:42:38,560
that gives us a 56 bit physical address
 

2311
00:42:38,560 --> 00:42:40,069
that gives us a 56 bit physical address
and that's where the next page directory

2312
00:42:40,069 --> 00:42:40,079
and that's where the next page directory
 

2313
00:42:40,079 --> 00:42:41,510
and that's where the next page directory
is and this requires that basically

2314
00:42:41,510 --> 00:42:41,520
is and this requires that basically
 

2315
00:42:41,520 --> 00:42:45,430
is and this requires that basically
every page directory is page aligned

2316
00:42:45,430 --> 00:42:45,440
every page directory is page aligned
 

2317
00:42:45,440 --> 00:42:49,750
every page directory is page aligned
i see okay that makes sense

2318
00:42:49,750 --> 00:42:49,760

 

2319
00:42:49,760 --> 00:42:50,870

so these are all great questions and

2320
00:42:50,870 --> 00:42:50,880
so these are all great questions and
 

2321
00:42:50,880 --> 00:42:51,829
so these are all great questions and
these are all things you're going to be

2322
00:42:51,829 --> 00:42:51,839
these are all things you're going to be
 

2323
00:42:51,839 --> 00:42:54,069
these are all things you're going to be
struggling with in the page table lab so

2324
00:42:54,069 --> 00:42:54,079
struggling with in the page table lab so
 

2325
00:42:54,079 --> 00:42:59,910
struggling with in the page table lab so
it's very good to ask them right now um

2326
00:42:59,910 --> 00:42:59,920

 

2327
00:42:59,920 --> 00:43:02,470

okay uh let me see uh

2328
00:43:02,470 --> 00:43:02,480
okay uh let me see uh
 

2329
00:43:02,480 --> 00:43:04,309
okay uh let me see uh
[Music]

2330
00:43:04,309 --> 00:43:04,319
[Music]
 

2331
00:43:04,319 --> 00:43:07,589
[Music]
yes uh okay let me

2332
00:43:07,589 --> 00:43:07,599
yes uh okay let me
 

2333
00:43:07,599 --> 00:43:10,829
yes uh okay let me
hold on for a second and collect my

2334
00:43:10,829 --> 00:43:10,839
hold on for a second and collect my
 

2335
00:43:10,839 --> 00:43:12,550
hold on for a second and collect my
thoughts

2336
00:43:12,550 --> 00:43:12,560
thoughts
 

2337
00:43:12,560 --> 00:43:16,230
thoughts
and see where i am

2338
00:43:16,230 --> 00:43:16,240

 

2339
00:43:16,240 --> 00:43:19,910

good good good okay one uh sort of uh

2340
00:43:19,910 --> 00:43:19,920
good good good okay one uh sort of uh
 

2341
00:43:19,920 --> 00:43:21,750
good good good okay one uh sort of uh
you know one other thing that i want to

2342
00:43:21,750 --> 00:43:21,760
you know one other thing that i want to
 

2343
00:43:21,760 --> 00:43:25,270
you know one other thing that i want to
mention because you will see that

2344
00:43:25,270 --> 00:43:25,280
mention because you will see that
 

2345
00:43:25,280 --> 00:43:27,589
mention because you will see that
is that if we think about this you know

2346
00:43:27,589 --> 00:43:27,599
is that if we think about this you know
 

2347
00:43:27,599 --> 00:43:29,030
is that if we think about this you know
the scheme that i just showed

2348
00:43:29,030 --> 00:43:29,040
the scheme that i just showed
 

2349
00:43:29,040 --> 00:43:30,870
the scheme that i just showed
correct uh what really seems to be going

2350
00:43:30,870 --> 00:43:30,880
correct uh what really seems to be going
 

2351
00:43:30,880 --> 00:43:32,309
correct uh what really seems to be going
on is that when you load

2352
00:43:32,309 --> 00:43:32,319
on is that when you load
 

2353
00:43:32,319 --> 00:43:34,710
on is that when you load
or store a value to memory or the

2354
00:43:34,710 --> 00:43:34,720
or store a value to memory or the
 

2355
00:43:34,720 --> 00:43:36,710
or store a value to memory or the
processor motor storage value to memory

2356
00:43:36,710 --> 00:43:36,720
processor motor storage value to memory
 

2357
00:43:36,720 --> 00:43:38,230
processor motor storage value to memory
we basically have to do three memory

2358
00:43:38,230 --> 00:43:38,240
we basically have to do three memory
 

2359
00:43:38,240 --> 00:43:40,150
we basically have to do three memory
lookups right one in the

2360
00:43:40,150 --> 00:43:40,160
lookups right one in the
 

2361
00:43:40,160 --> 00:43:41,589
lookups right one in the
top level page directory one in the

2362
00:43:41,589 --> 00:43:41,599
top level page directory one in the
 

2363
00:43:41,599 --> 00:43:43,030
top level page directory one in the
intermediate page therefore library and

2364
00:43:43,030 --> 00:43:43,040
intermediate page therefore library and
 

2365
00:43:43,040 --> 00:43:44,550
intermediate page therefore library and
then one in the bottom level page

2366
00:43:44,550 --> 00:43:44,560
then one in the bottom level page
 

2367
00:43:44,560 --> 00:43:45,349
then one in the bottom level page
directory

2368
00:43:45,349 --> 00:43:45,359
directory
 

2369
00:43:45,359 --> 00:43:47,109
directory
so it looks like that you know any

2370
00:43:47,109 --> 00:43:47,119
so it looks like that you know any
 

2371
00:43:47,119 --> 00:43:48,950
so it looks like that you know any
memory reference to a virtual address

2372
00:43:48,950 --> 00:43:48,960
memory reference to a virtual address
 

2373
00:43:48,960 --> 00:43:52,309
memory reference to a virtual address
basically requires free memory reads

2374
00:43:52,309 --> 00:43:52,319
basically requires free memory reads
 

2375
00:43:52,319 --> 00:43:55,670
basically requires free memory reads
and so that seems expensive uh and so

2376
00:43:55,670 --> 00:43:55,680
and so that seems expensive uh and so
 

2377
00:43:55,680 --> 00:43:58,150
and so that seems expensive uh and so
uh what happens in practice where almost

2378
00:43:58,150 --> 00:43:58,160
uh what happens in practice where almost
 

2379
00:43:58,160 --> 00:43:59,589
uh what happens in practice where almost
all every prussian does this

2380
00:43:59,589 --> 00:43:59,599
all every prussian does this
 

2381
00:43:59,599 --> 00:44:01,670
all every prussian does this
it has a cache sitting on the side that

2382
00:44:01,670 --> 00:44:01,680
it has a cache sitting on the side that
 

2383
00:44:01,680 --> 00:44:05,190
it has a cache sitting on the side that
contains recently used translations

2384
00:44:05,190 --> 00:44:05,200
contains recently used translations
 

2385
00:44:05,200 --> 00:44:07,750
contains recently used translations
and this is called the translation

2386
00:44:07,750 --> 00:44:07,760
and this is called the translation
 

2387
00:44:07,760 --> 00:44:10,309
and this is called the translation
leukocyte

2388
00:44:10,309 --> 00:44:10,319
leukocyte
 

2389
00:44:10,319 --> 00:44:14,390
leukocyte
buffer and you'll see that term

2390
00:44:14,390 --> 00:44:14,400
buffer and you'll see that term
 

2391
00:44:14,400 --> 00:44:18,630
buffer and you'll see that term
quite often and it's called the tlb

2392
00:44:18,630 --> 00:44:18,640
quite often and it's called the tlb
 

2393
00:44:18,640 --> 00:44:19,910
quite often and it's called the tlb
basically it's nothing else than the

2394
00:44:19,910 --> 00:44:19,920
basically it's nothing else than the
 

2395
00:44:19,920 --> 00:44:22,470
basically it's nothing else than the
cache of

2396
00:44:22,470 --> 00:44:22,480
cache of
 

2397
00:44:22,480 --> 00:44:28,069
cache of
entry page table entries pt entries

2398
00:44:28,069 --> 00:44:28,079

 

2399
00:44:28,079 --> 00:44:29,910

so when the processor has you know the

2400
00:44:29,910 --> 00:44:29,920
so when the processor has you know the
 

2401
00:44:29,920 --> 00:44:31,349
so when the processor has you know the
first time the processor looks enough a

2402
00:44:31,349 --> 00:44:31,359
first time the processor looks enough a
 

2403
00:44:31,359 --> 00:44:33,829
first time the processor looks enough a
virtual address you know walks this uh

2404
00:44:33,829 --> 00:44:33,839
virtual address you know walks this uh
 

2405
00:44:33,839 --> 00:44:36,870
virtual address you know walks this uh
the hardware walks this uh page the

2406
00:44:36,870 --> 00:44:36,880
the hardware walks this uh page the
 

2407
00:44:36,880 --> 00:44:38,390
the hardware walks this uh page the
three level page tables

2408
00:44:38,390 --> 00:44:38,400
three level page tables
 

2409
00:44:38,400 --> 00:44:40,390
three level page tables
it will come out with you know the final

2410
00:44:40,390 --> 00:44:40,400
it will come out with you know the final
 

2411
00:44:40,400 --> 00:44:42,390
it will come out with you know the final
physical uh page or the finder called

2412
00:44:42,390 --> 00:44:42,400
physical uh page or the finder called
 

2413
00:44:42,400 --> 00:44:44,470
physical uh page or the finder called
ppn for that particular virtual address

2414
00:44:44,470 --> 00:44:44,480
ppn for that particular virtual address
 

2415
00:44:44,480 --> 00:44:48,829
ppn for that particular virtual address
and then basically the the tob

2416
00:44:48,829 --> 00:44:48,839

 

2417
00:44:48,839 --> 00:44:50,710

store.vnpapn

2418
00:44:50,710 --> 00:44:50,720
store.vnpapn
 

2419
00:44:50,720 --> 00:44:53,910
store.vnpapn
or pa mapping uh on the site

2420
00:44:53,910 --> 00:44:53,920
or pa mapping uh on the site
 

2421
00:44:53,920 --> 00:44:55,510
or pa mapping uh on the site
and so then when the next time you refer

2422
00:44:55,510 --> 00:44:55,520
and so then when the next time you refer
 

2423
00:44:55,520 --> 00:44:57,510
and so then when the next time you refer
to that particular virtual address

2424
00:44:57,510 --> 00:44:57,520
to that particular virtual address
 

2425
00:44:57,520 --> 00:44:59,030
to that particular virtual address
i can just look at the straight up in

2426
00:44:59,030 --> 00:44:59,040
i can just look at the straight up in
 

2427
00:44:59,040 --> 00:45:01,589
i can just look at the straight up in
the tlb and the tlb will respond

2428
00:45:01,589 --> 00:45:01,599
the tlb and the tlb will respond
 

2429
00:45:01,599 --> 00:45:03,030
the tlb and the tlb will respond
instead of having to do the page table

2430
00:45:03,030 --> 00:45:03,040
instead of having to do the page table
 

2431
00:45:03,040 --> 00:45:06,150
instead of having to do the page table
walk

2432
00:45:06,150 --> 00:45:06,160

 

2433
00:45:06,160 --> 00:45:09,750

yep i'm here

2434
00:45:09,750 --> 00:45:09,760

 

2435
00:45:09,760 --> 00:45:13,670

so the tlb maps

2436
00:45:13,670 --> 00:45:13,680
so the tlb maps
 

2437
00:45:13,680 --> 00:45:15,589
so the tlb maps
virtual addresses to the physical

2438
00:45:15,589 --> 00:45:15,599
virtual addresses to the physical
 

2439
00:45:15,599 --> 00:45:17,030
virtual addresses to the physical
address of the page

2440
00:45:17,030 --> 00:45:17,040
address of the page
 

2441
00:45:17,040 --> 00:45:19,270
address of the page
that the virtual address uh along with

2442
00:45:19,270 --> 00:45:19,280
that the virtual address uh along with
 

2443
00:45:19,280 --> 00:45:20,309
that the virtual address uh along with
the offset

2444
00:45:20,309 --> 00:45:20,319
the offset
 

2445
00:45:20,319 --> 00:45:23,750
the offset
yeah right wouldn't it be more

2446
00:45:23,750 --> 00:45:23,760
yeah right wouldn't it be more
 

2447
00:45:23,760 --> 00:45:25,829
yeah right wouldn't it be more
efficient to like cache at the page

2448
00:45:25,829 --> 00:45:25,839
efficient to like cache at the page
 

2449
00:45:25,839 --> 00:45:27,750
efficient to like cache at the page
table level

2450
00:45:27,750 --> 00:45:27,760
table level
 

2451
00:45:27,760 --> 00:45:30,870
table level
uh okay so i let me uh take a step back

2452
00:45:30,870 --> 00:45:30,880
uh okay so i let me uh take a step back
 

2453
00:45:30,880 --> 00:45:31,349
uh okay so i let me uh take a step back
here

2454
00:45:31,349 --> 00:45:31,359
here
 

2455
00:45:31,359 --> 00:45:33,430
here
um there's many ways of implementing the

2456
00:45:33,430 --> 00:45:33,440
um there's many ways of implementing the
 

2457
00:45:33,440 --> 00:45:34,470
um there's many ways of implementing the
tob

2458
00:45:34,470 --> 00:45:34,480
tob
 

2459
00:45:34,480 --> 00:45:35,910
tob
uh the most important thing that you

2460
00:45:35,910 --> 00:45:35,920
uh the most important thing that you
 

2461
00:45:35,920 --> 00:45:38,230
uh the most important thing that you
need to know is that there is a top

2462
00:45:38,230 --> 00:45:38,240
need to know is that there is a top
 

2463
00:45:38,240 --> 00:45:40,710
need to know is that there is a top
uh and the exact details of actually how

2464
00:45:40,710 --> 00:45:40,720
uh and the exact details of actually how
 

2465
00:45:40,720 --> 00:45:42,390
uh and the exact details of actually how
the pov is implemented to sort of

2466
00:45:42,390 --> 00:45:42,400
the pov is implemented to sort of
 

2467
00:45:42,400 --> 00:45:44,069
the pov is implemented to sort of
you know now the topic that we're going

2468
00:45:44,069 --> 00:45:44,079
you know now the topic that we're going
 

2469
00:45:44,079 --> 00:45:45,430
you know now the topic that we're going
to talk about in a great amount of

2470
00:45:45,430 --> 00:45:45,440
to talk about in a great amount of
 

2471
00:45:45,440 --> 00:45:46,470
to talk about in a great amount of
detail

2472
00:45:46,470 --> 00:45:46,480
detail
 

2473
00:45:46,480 --> 00:45:49,430
detail
in fact not at all and so this is really

2474
00:45:49,430 --> 00:45:49,440
in fact not at all and so this is really
 

2475
00:45:49,440 --> 00:45:50,390
in fact not at all and so this is really
something that sort of sits

2476
00:45:50,390 --> 00:45:50,400
something that sort of sits
 

2477
00:45:50,400 --> 00:45:51,910
something that sort of sits
inside of the processor and is mostly

2478
00:45:51,910 --> 00:45:51,920
inside of the processor and is mostly
 

2479
00:45:51,920 --> 00:45:53,109
inside of the processor and is mostly
hidden from the operating system the

2480
00:45:53,109 --> 00:45:53,119
hidden from the operating system the
 

2481
00:45:53,119 --> 00:45:54,550
hidden from the operating system the
operating system doesn't really know how

2482
00:45:54,550 --> 00:45:54,560
operating system doesn't really know how
 

2483
00:45:54,560 --> 00:45:55,109
operating system doesn't really know how
the top

2484
00:45:55,109 --> 00:45:55,119
the top
 

2485
00:45:55,119 --> 00:45:57,990
the top
operates the only thing the reason you

2486
00:45:57,990 --> 00:45:58,000
operates the only thing the reason you
 

2487
00:45:58,000 --> 00:45:59,990
operates the only thing the reason you
need to know that the qob exists

2488
00:45:59,990 --> 00:46:00,000
need to know that the qob exists
 

2489
00:46:00,000 --> 00:46:03,829
need to know that the qob exists
is that if you switch page tables

2490
00:46:03,829 --> 00:46:03,839
is that if you switch page tables
 

2491
00:46:03,839 --> 00:46:06,150
is that if you switch page tables
then typically the operating system

2492
00:46:06,150 --> 00:46:06,160
then typically the operating system
 

2493
00:46:06,160 --> 00:46:07,510
then typically the operating system
needs to tell

2494
00:46:07,510 --> 00:46:07,520
needs to tell
 

2495
00:46:07,520 --> 00:46:09,190
needs to tell
the processor that it's switching page

2496
00:46:09,190 --> 00:46:09,200
the processor that it's switching page
 

2497
00:46:09,200 --> 00:46:10,710
the processor that it's switching page
tables

2498
00:46:10,710 --> 00:46:10,720
tables
 

2499
00:46:10,720 --> 00:46:16,710
tables
and the be needs to be flushed

2500
00:46:16,710 --> 00:46:16,720

 

2501
00:46:16,720 --> 00:46:18,390

because basically you can't use tail

2502
00:46:18,390 --> 00:46:18,400
because basically you can't use tail
 

2503
00:46:18,400 --> 00:46:20,069
because basically you can't use tail
entries like if you switch to a new cage

2504
00:46:20,069 --> 00:46:20,079
entries like if you switch to a new cage
 

2505
00:46:20,079 --> 00:46:20,790
entries like if you switch to a new cage
table

2506
00:46:20,790 --> 00:46:20,800
table
 

2507
00:46:20,800 --> 00:46:22,950
table
the entries in the tob may not be valid

2508
00:46:22,950 --> 00:46:22,960
the entries in the tob may not be valid
 

2509
00:46:22,960 --> 00:46:25,510
the entries in the tob may not be valid
anymore and so they need to be removed

2510
00:46:25,510 --> 00:46:25,520
anymore and so they need to be removed
 

2511
00:46:25,520 --> 00:46:26,630
anymore and so they need to be removed
because otherwise you know the

2512
00:46:26,630 --> 00:46:26,640
because otherwise you know the
 

2513
00:46:26,640 --> 00:46:28,790
because otherwise you know the
translation would be incorrect

2514
00:46:28,790 --> 00:46:28,800
translation would be incorrect
 

2515
00:46:28,800 --> 00:46:31,109
translation would be incorrect
and so the operating system is typically

2516
00:46:31,109 --> 00:46:31,119
and so the operating system is typically
 

2517
00:46:31,119 --> 00:46:32,150
and so the operating system is typically
where

2518
00:46:32,150 --> 00:46:32,160
where
 

2519
00:46:32,160 --> 00:46:33,750
where
it's aware that there's a t that there

2520
00:46:33,750 --> 00:46:33,760
it's aware that there's a t that there
 

2521
00:46:33,760 --> 00:46:35,430
it's aware that there's a t that there
is a tlb

2522
00:46:35,430 --> 00:46:35,440
is a tlb
 

2523
00:46:35,440 --> 00:46:37,270
is a tlb
only basically to tell the hardware once

2524
00:46:37,270 --> 00:46:37,280
only basically to tell the hardware once
 

2525
00:46:37,280 --> 00:46:38,630
only basically to tell the hardware once
in a while saying like okay well don't

2526
00:46:38,630 --> 00:46:38,640
in a while saying like okay well don't
 

2527
00:46:38,640 --> 00:46:39,910
in a while saying like okay well don't
use them anymore

2528
00:46:39,910 --> 00:46:39,920
use them anymore
 

2529
00:46:39,920 --> 00:46:44,069
use them anymore
because i'm going to switch page tables

2530
00:46:44,069 --> 00:46:44,079

 

2531
00:46:44,079 --> 00:46:48,790

and in fact on you know the uh

2532
00:46:48,790 --> 00:46:48,800
and in fact on you know the uh
 

2533
00:46:48,800 --> 00:46:50,390
and in fact on you know the uh
on the risk files the instruction to

2534
00:46:50,390 --> 00:46:50,400
on the risk files the instruction to
 

2535
00:46:50,400 --> 00:46:51,910
on the risk files the instruction to
flush the tov is called

2536
00:46:51,910 --> 00:46:51,920
flush the tov is called
 

2537
00:46:51,920 --> 00:46:57,270
flush the tov is called
s fence underscore vma

2538
00:46:57,270 --> 00:46:57,280
s fence underscore vma
 

2539
00:46:57,280 --> 00:47:01,270
s fence underscore vma
and that will actually flush the top

2540
00:47:01,270 --> 00:47:01,280
and that will actually flush the top
 

2541
00:47:01,280 --> 00:47:04,790
and that will actually flush the top
be back um

2542
00:47:04,790 --> 00:47:04,800
be back um
 

2543
00:47:04,800 --> 00:47:07,190
be back um
so i have a question uh like not

2544
00:47:07,190 --> 00:47:07,200
so i have a question uh like not
 

2545
00:47:07,200 --> 00:47:08,710
so i have a question uh like not
regarding tlb but

2546
00:47:08,710 --> 00:47:08,720
regarding tlb but
 

2547
00:47:08,720 --> 00:47:11,990
regarding tlb but
that brought kind of uh this question

2548
00:47:11,990 --> 00:47:12,000
that brought kind of uh this question
 

2549
00:47:12,000 --> 00:47:15,109
that brought kind of uh this question
the three level support that the three

2550
00:47:15,109 --> 00:47:15,119
the three level support that the three
 

2551
00:47:15,119 --> 00:47:16,069
the three level support that the three
level um

2552
00:47:16,069 --> 00:47:16,079
level um
 

2553
00:47:16,079 --> 00:47:19,030
level um
paging that we have is it implemented by

2554
00:47:19,030 --> 00:47:19,040
paging that we have is it implemented by
 

2555
00:47:19,040 --> 00:47:20,790
paging that we have is it implemented by
the operating system or the hardware

2556
00:47:20,790 --> 00:47:20,800
the operating system or the hardware
 

2557
00:47:20,800 --> 00:47:21,430
the operating system or the hardware
itself

2558
00:47:21,430 --> 00:47:21,440
itself
 

2559
00:47:21,440 --> 00:47:23,829
itself
it's implemented by the hardware so you

2560
00:47:23,829 --> 00:47:23,839
it's implemented by the hardware so you
 

2561
00:47:23,839 --> 00:47:25,750
it's implemented by the hardware so you
know this all happens in hardware

2562
00:47:25,750 --> 00:47:25,760
know this all happens in hardware
 

2563
00:47:25,760 --> 00:47:29,270
know this all happens in hardware
the mmu is a block of hardware not in

2564
00:47:29,270 --> 00:47:29,280
the mmu is a block of hardware not in
 

2565
00:47:29,280 --> 00:47:30,150
the mmu is a block of hardware not in
the operating system

2566
00:47:30,150 --> 00:47:30,160
the operating system
 

2567
00:47:30,160 --> 00:47:32,309
the operating system
we'll see in a second when we look at

2568
00:47:32,309 --> 00:47:32,319
we'll see in a second when we look at
 

2569
00:47:32,319 --> 00:47:33,270
we'll see in a second when we look at
xv6

2570
00:47:33,270 --> 00:47:33,280
xv6
 

2571
00:47:33,280 --> 00:47:36,230
xv6
that xv6 has a function that models the

2572
00:47:36,230 --> 00:47:36,240
that xv6 has a function that models the
 

2573
00:47:36,240 --> 00:47:38,069
that xv6 has a function that models the
page table walk because once in a while

2574
00:47:38,069 --> 00:47:38,079
page table walk because once in a while
 

2575
00:47:38,079 --> 00:47:40,230
page table walk because once in a while
you know sv6 basically has to do what

2576
00:47:40,230 --> 00:47:40,240
you know sv6 basically has to do what
 

2577
00:47:40,240 --> 00:47:41,990
you know sv6 basically has to do what
the hardware does

2578
00:47:41,990 --> 00:47:42,000
the hardware does
 

2579
00:47:42,000 --> 00:47:43,990
the hardware does
uh and so it also doesn't have a

2580
00:47:43,990 --> 00:47:44,000
uh and so it also doesn't have a
 

2581
00:47:44,000 --> 00:47:45,190
uh and so it also doesn't have a
function called walk

2582
00:47:45,190 --> 00:47:45,200
function called walk
 

2583
00:47:45,200 --> 00:47:46,710
function called walk
that basically does exactly the same

2584
00:47:46,710 --> 00:47:46,720
that basically does exactly the same
 

2585
00:47:46,720 --> 00:47:51,430
that basically does exactly the same
thing but in software

2586
00:47:51,430 --> 00:47:51,440

 

2587
00:47:51,440 --> 00:47:54,549

so can i ask a question yeah go ahead

2588
00:47:54,549 --> 00:47:54,559
so can i ask a question yeah go ahead
 

2589
00:47:54,559 --> 00:47:58,630
so can i ask a question yeah go ahead
so um where in this scheme does the

2590
00:47:58,630 --> 00:47:58,640
so um where in this scheme does the
 

2591
00:47:58,640 --> 00:48:00,069
so um where in this scheme does the
processor cache fit

2592
00:48:00,069 --> 00:48:00,079
processor cache fit
 

2593
00:48:00,079 --> 00:48:02,470
processor cache fit
does it happen before the address

2594
00:48:02,470 --> 00:48:02,480
does it happen before the address
 

2595
00:48:02,480 --> 00:48:04,549
does it happen before the address
translation or after

2596
00:48:04,549 --> 00:48:04,559
translation or after
 

2597
00:48:04,559 --> 00:48:06,790
translation or after
because yeah yeah okay let me just

2598
00:48:06,790 --> 00:48:06,800
because yeah yeah okay let me just
 

2599
00:48:06,800 --> 00:48:07,829
because yeah yeah okay let me just
switch back a little bit

2600
00:48:07,829 --> 00:48:07,839
switch back a little bit
 

2601
00:48:07,839 --> 00:48:11,270
switch back a little bit
a couple uh let me see

2602
00:48:11,270 --> 00:48:11,280
a couple uh let me see
 

2603
00:48:11,280 --> 00:48:14,390
a couple uh let me see
uh okay here's your mmu

2604
00:48:14,390 --> 00:48:14,400
uh okay here's your mmu
 

2605
00:48:14,400 --> 00:48:16,470
uh okay here's your mmu
the whale really the way to think if i

2606
00:48:16,470 --> 00:48:16,480
the whale really the way to think if i
 

2607
00:48:16,480 --> 00:48:19,829
the whale really the way to think if i
think about it is that all this

2608
00:48:19,829 --> 00:48:19,839
think about it is that all this
 

2609
00:48:19,839 --> 00:48:21,670
think about it is that all this
know this whole block is inside of the

2610
00:48:21,670 --> 00:48:21,680
know this whole block is inside of the
 

2611
00:48:21,680 --> 00:48:24,230
know this whole block is inside of the
processor silicon

2612
00:48:24,230 --> 00:48:24,240
processor silicon
 

2613
00:48:24,240 --> 00:48:26,870
processor silicon
so there's a risc-v chip and inside of

2614
00:48:26,870 --> 00:48:26,880
so there's a risc-v chip and inside of
 

2615
00:48:26,880 --> 00:48:27,990
so there's a risc-v chip and inside of
it is the cpu

2616
00:48:27,990 --> 00:48:28,000
it is the cpu
 

2617
00:48:28,000 --> 00:48:29,430
it is the cpu
in fact they're multiple cpu correct

2618
00:48:29,430 --> 00:48:29,440
in fact they're multiple cpu correct
 

2619
00:48:29,440 --> 00:48:32,230
in fact they're multiple cpu correct
they're four cores and there's an mmu

2620
00:48:32,230 --> 00:48:32,240
they're four cores and there's an mmu
 

2621
00:48:32,240 --> 00:48:33,910
they're four cores and there's an mmu
and you know you can think about that

2622
00:48:33,910 --> 00:48:33,920
and you know you can think about that
 

2623
00:48:33,920 --> 00:48:36,069
and you know you can think about that
either on this on the cpu site you know

2624
00:48:36,069 --> 00:48:36,079
either on this on the cpu site you know
 

2625
00:48:36,079 --> 00:48:41,270
either on this on the cpu site you know
there's a you know tlb

2626
00:48:41,270 --> 00:48:41,280

 

2627
00:48:41,280 --> 00:48:44,390

okay

2628
00:48:44,390 --> 00:48:44,400

 

2629
00:48:44,400 --> 00:48:46,870

that makes sense um but i guess my

2630
00:48:46,870 --> 00:48:46,880
that makes sense um but i guess my
 

2631
00:48:46,880 --> 00:48:48,710
that makes sense um but i guess my
question was about the like

2632
00:48:48,710 --> 00:48:48,720
question was about the like
 

2633
00:48:48,720 --> 00:48:52,470
question was about the like
um cash in terms of not the tlb but just

2634
00:48:52,470 --> 00:48:52,480
um cash in terms of not the tlb but just
 

2635
00:48:52,480 --> 00:48:53,030
um cash in terms of not the tlb but just
the

2636
00:48:53,030 --> 00:48:53,040
the
 

2637
00:48:53,040 --> 00:48:55,430
the
normal cash like uh because sometimes we

2638
00:48:55,430 --> 00:48:55,440
normal cash like uh because sometimes we
 

2639
00:48:55,440 --> 00:48:57,109
normal cash like uh because sometimes we
don't actually go all the way to access

2640
00:48:57,109 --> 00:48:57,119
don't actually go all the way to access
 

2641
00:48:57,119 --> 00:48:57,910
don't actually go all the way to access
the memory

2642
00:48:57,910 --> 00:48:57,920
the memory
 

2643
00:48:57,920 --> 00:48:59,430
the memory
yeah yeah good good point so like i

2644
00:48:59,430 --> 00:48:59,440
yeah yeah good good point so like i
 

2645
00:48:59,440 --> 00:49:00,710
yeah yeah good good point so like i
showed you like the schema last week

2646
00:49:00,710 --> 00:49:00,720
showed you like the schema last week
 

2647
00:49:00,720 --> 00:49:01,670
showed you like the schema last week
correctly the

2648
00:49:01,670 --> 00:49:01,680
correctly the
 

2649
00:49:01,680 --> 00:49:03,430
correctly the
monday of the risk five processor it has

2650
00:49:03,430 --> 00:49:03,440
monday of the risk five processor it has
 

2651
00:49:03,440 --> 00:49:05,990
monday of the risk five processor it has
now one cache it has an l2 cache

2652
00:49:05,990 --> 00:49:06,000
now one cache it has an l2 cache
 

2653
00:49:06,000 --> 00:49:08,069
now one cache it has an l2 cache
uh some caches are indexed by physical

2654
00:49:08,069 --> 00:49:08,079
uh some caches are indexed by physical
 

2655
00:49:08,079 --> 00:49:10,470
uh some caches are indexed by physical
address and some caches are indexed by

2656
00:49:10,470 --> 00:49:10,480
address and some caches are indexed by
 

2657
00:49:10,480 --> 00:49:11,670
address and some caches are indexed by
virtual address

2658
00:49:11,670 --> 00:49:11,680
virtual address
 

2659
00:49:11,680 --> 00:49:13,109
virtual address
so the caches that are indexed by

2660
00:49:13,109 --> 00:49:13,119
so the caches that are indexed by
 

2661
00:49:13,119 --> 00:49:15,030
so the caches that are indexed by
virtual address sit before

2662
00:49:15,030 --> 00:49:15,040
virtual address sit before
 

2663
00:49:15,040 --> 00:49:17,750
virtual address sit before
the mmu and cache their index by

2664
00:49:17,750 --> 00:49:17,760
the mmu and cache their index by
 

2665
00:49:17,760 --> 00:49:24,549
the mmu and cache their index by
physical addressing after the mmu

2666
00:49:24,549 --> 00:49:24,559

 

2667
00:49:24,559 --> 00:49:26,630

does that make sense can i also ask a

2668
00:49:26,630 --> 00:49:26,640
does that make sense can i also ask a
 

2669
00:49:26,640 --> 00:49:27,910
does that make sense can i also ask a
question

2670
00:49:27,910 --> 00:49:27,920
question
 

2671
00:49:27,920 --> 00:49:31,030
question
my question is you said that the um

2672
00:49:31,030 --> 00:49:31,040
my question is you said that the um
 

2673
00:49:31,040 --> 00:49:34,230
my question is you said that the um
tlb it walks so like to put stuff into

2674
00:49:34,230 --> 00:49:34,240
tlb it walks so like to put stuff into
 

2675
00:49:34,240 --> 00:49:34,950
tlb it walks so like to put stuff into
tlb

2676
00:49:34,950 --> 00:49:34,960
tlb
 

2677
00:49:34,960 --> 00:49:37,670
tlb
the hardware walks through the page

2678
00:49:37,670 --> 00:49:37,680
the hardware walks through the page
 

2679
00:49:37,680 --> 00:49:38,790
the hardware walks through the page
tables

2680
00:49:38,790 --> 00:49:38,800
tables
 

2681
00:49:38,800 --> 00:49:42,470
tables
um why do we write walk function if

2682
00:49:42,470 --> 00:49:42,480
um why do we write walk function if
 

2683
00:49:42,480 --> 00:49:44,710
um why do we write walk function if
hardware can do that

2684
00:49:44,710 --> 00:49:44,720
hardware can do that
 

2685
00:49:44,720 --> 00:49:47,910
hardware can do that
very good question um one reason

2686
00:49:47,910 --> 00:49:47,920
very good question um one reason
 

2687
00:49:47,920 --> 00:49:49,589
very good question um one reason
there's a couple of reasons why we do it

2688
00:49:49,589 --> 00:49:49,599
there's a couple of reasons why we do it
 

2689
00:49:49,599 --> 00:49:51,430
there's a couple of reasons why we do it
or why xv6 needs it

2690
00:49:51,430 --> 00:49:51,440
or why xv6 needs it
 

2691
00:49:51,440 --> 00:49:52,710
or why xv6 needs it
one is when it actually sets up the

2692
00:49:52,710 --> 00:49:52,720
one is when it actually sets up the
 

2693
00:49:52,720 --> 00:49:54,950
one is when it actually sets up the
initial page tables

2694
00:49:54,950 --> 00:49:54,960
initial page tables
 

2695
00:49:54,960 --> 00:49:57,510
initial page tables
uh you know it needs to program the the

2696
00:49:57,510 --> 00:49:57,520
uh you know it needs to program the the
 

2697
00:49:57,520 --> 00:49:58,549
uh you know it needs to program the the
three levels

2698
00:49:58,549 --> 00:49:58,559
three levels
 

2699
00:49:58,559 --> 00:50:00,470
three levels
and so it needs to basically emulate the

2700
00:50:00,470 --> 00:50:00,480
and so it needs to basically emulate the
 

2701
00:50:00,480 --> 00:50:02,069
and so it needs to basically emulate the
three levels

2702
00:50:02,069 --> 00:50:02,079
three levels
 

2703
00:50:02,079 --> 00:50:06,069
three levels
uh another uh example that you actually

2704
00:50:06,069 --> 00:50:06,079
uh another uh example that you actually
 

2705
00:50:06,079 --> 00:50:08,470
uh another uh example that you actually
sort of ran into or are running into in

2706
00:50:08,470 --> 00:50:08,480
sort of ran into or are running into in
 

2707
00:50:08,480 --> 00:50:09,829
sort of ran into or are running into in
the cisco lab

2708
00:50:09,829 --> 00:50:09,839
the cisco lab
 

2709
00:50:09,839 --> 00:50:12,470
the cisco lab
is that when you cop you know the in xv6

2710
00:50:12,470 --> 00:50:12,480
is that when you cop you know the in xv6
 

2711
00:50:12,480 --> 00:50:14,470
is that when you cop you know the in xv6
the kernel has its own page table

2712
00:50:14,470 --> 00:50:14,480
the kernel has its own page table
 

2713
00:50:14,480 --> 00:50:16,790
the kernel has its own page table
and every user address space has its own

2714
00:50:16,790 --> 00:50:16,800
and every user address space has its own
 

2715
00:50:16,800 --> 00:50:18,069
and every user address space has its own
page table

2716
00:50:18,069 --> 00:50:18,079
page table
 

2717
00:50:18,079 --> 00:50:20,069
page table
and but once in a while you know for

2718
00:50:20,069 --> 00:50:20,079
and but once in a while you know for
 

2719
00:50:20,079 --> 00:50:21,109
and but once in a while you know for
example it says info

2720
00:50:21,109 --> 00:50:21,119
example it says info
 

2721
00:50:21,119 --> 00:50:22,470
example it says info
you know like this is the pointer to the

2722
00:50:22,470 --> 00:50:22,480
you know like this is the pointer to the
 

2723
00:50:22,480 --> 00:50:24,309
you know like this is the pointer to the
system construct you know that lives in

2724
00:50:24,309 --> 00:50:24,319
system construct you know that lives in
 

2725
00:50:24,319 --> 00:50:25,589
system construct you know that lives in
user space

2726
00:50:25,589 --> 00:50:25,599
user space
 

2727
00:50:25,599 --> 00:50:27,430
user space
the kernel needs to be translated to an

2728
00:50:27,430 --> 00:50:27,440
the kernel needs to be translated to an
 

2729
00:50:27,440 --> 00:50:29,030
the kernel needs to be translated to an
address that it can use to read and

2730
00:50:29,030 --> 00:50:29,040
address that it can use to read and
 

2731
00:50:29,040 --> 00:50:30,309
address that it can use to read and
write it

2732
00:50:30,309 --> 00:50:30,319
write it
 

2733
00:50:30,319 --> 00:50:32,549
write it
and so for example if you look in copy

2734
00:50:32,549 --> 00:50:32,559
and so for example if you look in copy
 

2735
00:50:32,559 --> 00:50:33,510
and so for example if you look in copy
in or

2736
00:50:33,510 --> 00:50:33,520
in or
 

2737
00:50:33,520 --> 00:50:36,870
in or
copy out basically the kernel

2738
00:50:36,870 --> 00:50:36,880
copy out basically the kernel
 

2739
00:50:36,880 --> 00:50:40,069
copy out basically the kernel
translates the user virtual address

2740
00:50:40,069 --> 00:50:40,079
translates the user virtual address
 

2741
00:50:40,079 --> 00:50:43,670
translates the user virtual address
using the user uh virtual using the user

2742
00:50:43,670 --> 00:50:43,680
using the user uh virtual using the user
 

2743
00:50:43,680 --> 00:50:45,670
using the user uh virtual using the user
page table to get out a physical address

2744
00:50:45,670 --> 00:50:45,680
page table to get out a physical address
 

2745
00:50:45,680 --> 00:50:47,190
page table to get out a physical address
that that kernel then

2746
00:50:47,190 --> 00:50:47,200
that that kernel then
 

2747
00:50:47,200 --> 00:50:49,910
that that kernel then
uh to get an address out that actually

2748
00:50:49,910 --> 00:50:49,920
uh to get an address out that actually
 

2749
00:50:49,920 --> 00:50:51,190
uh to get an address out that actually
then the kernel can use to read and

2750
00:50:51,190 --> 00:50:51,200
then the kernel can use to read and
 

2751
00:50:51,200 --> 00:50:54,390
then the kernel can use to read and
write that memory

2752
00:50:54,390 --> 00:50:54,400
write that memory
 

2753
00:50:54,400 --> 00:50:55,510
write that memory
so there's a bunch of places like the

2754
00:50:55,510 --> 00:50:55,520
so there's a bunch of places like the
 

2755
00:50:55,520 --> 00:50:57,190
so there's a bunch of places like the
show job and i'll talk about it

2756
00:50:57,190 --> 00:50:57,200
show job and i'll talk about it
 

2757
00:50:57,200 --> 00:50:57,829
show job and i'll talk about it
hopefully in

2758
00:50:57,829 --> 00:50:57,839
hopefully in
 

2759
00:50:57,839 --> 00:50:59,190
hopefully in
you know whatever 10 minutes or 15

2760
00:50:59,190 --> 00:50:59,200
you know whatever 10 minutes or 15
 

2761
00:50:59,200 --> 00:51:01,750
you know whatever 10 minutes or 15
minutes um i have a question

2762
00:51:01,750 --> 00:51:01,760
minutes um i have a question
 

2763
00:51:01,760 --> 00:51:05,270
minutes um i have a question
why doesn't the hardware like expose

2764
00:51:05,270 --> 00:51:05,280
why doesn't the hardware like expose
 

2765
00:51:05,280 --> 00:51:07,030
why doesn't the hardware like expose
that walk function so we don't have to

2766
00:51:07,030 --> 00:51:07,040
that walk function so we don't have to
 

2767
00:51:07,040 --> 00:51:08,549
that walk function so we don't have to
write our own and like potentially have

2768
00:51:08,549 --> 00:51:08,559
write our own and like potentially have
 

2769
00:51:08,559 --> 00:51:09,430
write our own and like potentially have
bugs in it

2770
00:51:09,430 --> 00:51:09,440
bugs in it
 

2771
00:51:09,440 --> 00:51:11,670
bugs in it
uh why isn't there like a you know maybe

2772
00:51:11,670 --> 00:51:11,680
uh why isn't there like a you know maybe
 

2773
00:51:11,680 --> 00:51:12,870
uh why isn't there like a you know maybe
a privileged instruction that you can

2774
00:51:12,870 --> 00:51:12,880
a privileged instruction that you can
 

2775
00:51:12,880 --> 00:51:14,470
a privileged instruction that you can
pass a virtual address and it'll give

2776
00:51:14,470 --> 00:51:14,480
pass a virtual address and it'll give
 

2777
00:51:14,480 --> 00:51:16,309
pass a virtual address and it'll give
back the physical address

2778
00:51:16,309 --> 00:51:16,319
back the physical address
 

2779
00:51:16,319 --> 00:51:18,069
back the physical address
well this is just like just store to the

2780
00:51:18,069 --> 00:51:18,079
well this is just like just store to the
 

2781
00:51:18,079 --> 00:51:19,910
well this is just like just store to the
virtual address and you get back

2782
00:51:19,910 --> 00:51:19,920
virtual address and you get back
 

2783
00:51:19,920 --> 00:51:22,710
virtual address and you get back
and we'll do it right for you uh so and

2784
00:51:22,710 --> 00:51:22,720
and we'll do it right for you uh so and
 

2785
00:51:22,720 --> 00:51:23,349
and we'll do it right for you uh so and
we'll see

2786
00:51:23,349 --> 00:51:23,359
we'll see
 

2787
00:51:23,359 --> 00:51:26,950
we'll see
later on uh in the next lap the page

2788
00:51:26,950 --> 00:51:26,960
later on uh in the next lap the page
 

2789
00:51:26,960 --> 00:51:27,829
later on uh in the next lap the page
table app

2790
00:51:27,829 --> 00:51:27,839
table app
 

2791
00:51:27,839 --> 00:51:29,510
table app
in fact is exactly what you'll be doing

2792
00:51:29,510 --> 00:51:29,520
in fact is exactly what you'll be doing
 

2793
00:51:29,520 --> 00:51:31,190
in fact is exactly what you'll be doing
you will actually set up the page table

2794
00:51:31,190 --> 00:51:31,200
you will actually set up the page table
 

2795
00:51:31,200 --> 00:51:32,710
you will actually set up the page table
slightly differently so that you can

2796
00:51:32,710 --> 00:51:32,720
slightly differently so that you can
 

2797
00:51:32,720 --> 00:51:33,270
slightly differently so that you can
avoid

2798
00:51:33,270 --> 00:51:33,280
avoid
 

2799
00:51:33,280 --> 00:51:42,390
avoid
the walk and copy in and copy and string

2800
00:51:42,390 --> 00:51:42,400

 

2801
00:51:42,400 --> 00:51:43,670

i think this will become clear in a

2802
00:51:43,670 --> 00:51:43,680
i think this will become clear in a
 

2803
00:51:43,680 --> 00:51:45,349
i think this will become clear in a
second that we when we talk about look

2804
00:51:45,349 --> 00:51:45,359
second that we when we talk about look
 

2805
00:51:45,359 --> 00:51:49,670
second that we when we talk about look
at the xv6 okay

2806
00:51:49,670 --> 00:51:49,680

 

2807
00:51:49,680 --> 00:51:52,950

okay good um one more issue

2808
00:51:52,950 --> 00:51:52,960
okay good um one more issue
 

2809
00:51:52,960 --> 00:51:54,390
okay good um one more issue
and basically before jumping into the

2810
00:51:54,390 --> 00:51:54,400
and basically before jumping into the
 

2811
00:51:54,400 --> 00:51:56,470
and basically before jumping into the
x86 uh i wanted to make one

2812
00:51:56,470 --> 00:51:56,480
x86 uh i wanted to make one
 

2813
00:51:56,480 --> 00:52:00,069
x86 uh i wanted to make one
point um one way to think about

2814
00:52:00,069 --> 00:52:00,079
point um one way to think about
 

2815
00:52:00,079 --> 00:52:05,910
point um one way to think about
uh you know uh page tables

2816
00:52:05,910 --> 00:52:05,920

 

2817
00:52:05,920 --> 00:52:09,829

uh a popular way to phrase this

2818
00:52:09,829 --> 00:52:09,839
uh a popular way to phrase this
 

2819
00:52:09,839 --> 00:52:13,270
uh a popular way to phrase this
is the page tables uh provide

2820
00:52:13,270 --> 00:52:13,280
is the page tables uh provide
 

2821
00:52:13,280 --> 00:52:19,670
is the page tables uh provide
a level of indirection

2822
00:52:19,670 --> 00:52:19,680
a level of indirection
 

2823
00:52:19,680 --> 00:52:25,030
a level of indirection
and

2824
00:52:25,030 --> 00:52:25,040

 

2825
00:52:25,040 --> 00:52:27,270

and that uh and so basically this

2826
00:52:27,270 --> 00:52:27,280
and that uh and so basically this
 

2827
00:52:27,280 --> 00:52:28,549
and that uh and so basically this
indirection grid what i'm talking about

2828
00:52:28,549 --> 00:52:28,559
indirection grid what i'm talking about
 

2829
00:52:28,559 --> 00:52:29,750
indirection grid what i'm talking about
you know this mapping from virtual

2830
00:52:29,750 --> 00:52:29,760
you know this mapping from virtual
 

2831
00:52:29,760 --> 00:52:31,430
you know this mapping from virtual
address the physical address

2832
00:52:31,430 --> 00:52:31,440
address the physical address
 

2833
00:52:31,440 --> 00:52:33,670
address the physical address
and this mapping is completely under the

2834
00:52:33,670 --> 00:52:33,680
and this mapping is completely under the
 

2835
00:52:33,680 --> 00:52:35,030
and this mapping is completely under the
control

2836
00:52:35,030 --> 00:52:35,040
control
 

2837
00:52:35,040 --> 00:52:38,230
control
of the operating system

2838
00:52:38,230 --> 00:52:38,240

 

2839
00:52:38,240 --> 00:52:40,710

as we've seen you know in the last in a

2840
00:52:40,710 --> 00:52:40,720
as we've seen you know in the last in a
 

2841
00:52:40,720 --> 00:52:42,630
as we've seen you know in the last in a
couple of slides that we talked

2842
00:52:42,630 --> 00:52:42,640
couple of slides that we talked
 

2843
00:52:42,640 --> 00:52:44,950
couple of slides that we talked
and that means that the operating system

2844
00:52:44,950 --> 00:52:44,960
and that means that the operating system
 

2845
00:52:44,960 --> 00:52:46,630
and that means that the operating system
because it has so much control over it

2846
00:52:46,630 --> 00:52:46,640
because it has so much control over it
 

2847
00:52:46,640 --> 00:52:48,230
because it has so much control over it
has control over the complete control of

2848
00:52:48,230 --> 00:52:48,240
has control over the complete control of
 

2849
00:52:48,240 --> 00:52:49,430
has control over the complete control of
that translation

2850
00:52:49,430 --> 00:52:49,440
that translation
 

2851
00:52:49,440 --> 00:52:51,349
that translation
um it can do all kinds of interesting

2852
00:52:51,349 --> 00:52:51,359
um it can do all kinds of interesting
 

2853
00:52:51,359 --> 00:52:52,630
um it can do all kinds of interesting
tricks

2854
00:52:52,630 --> 00:52:52,640
tricks
 

2855
00:52:52,640 --> 00:52:55,430
tricks
uh and so for example like one trick uh

2856
00:52:55,430 --> 00:52:55,440
uh and so for example like one trick uh
 

2857
00:52:55,440 --> 00:52:56,549
uh and so for example like one trick uh
you know we talked a little bit about

2858
00:52:56,549 --> 00:52:56,559
you know we talked a little bit about
 

2859
00:52:56,559 --> 00:52:57,750
you know we talked a little bit about
this like if a pitch

2860
00:52:57,750 --> 00:52:57,760
this like if a pitch
 

2861
00:52:57,760 --> 00:53:00,230
this like if a pitch
pedal entry is invalid and will really

2862
00:53:00,230 --> 00:53:00,240
pedal entry is invalid and will really
 

2863
00:53:00,240 --> 00:53:03,109
pedal entry is invalid and will really
return a page you know the hardware will

2864
00:53:03,109 --> 00:53:03,119
return a page you know the hardware will
 

2865
00:53:03,119 --> 00:53:05,829
return a page you know the hardware will
raise a page fault in response that page

2866
00:53:05,829 --> 00:53:05,839
raise a page fault in response that page
 

2867
00:53:05,839 --> 00:53:06,549
raise a page fault in response that page
fault

2868
00:53:06,549 --> 00:53:06,559
fault
 

2869
00:53:06,559 --> 00:53:08,150
fault
the operating system could update the

2870
00:53:08,150 --> 00:53:08,160
the operating system could update the
 

2871
00:53:08,160 --> 00:53:09,670
the operating system could update the
page tables and then maybe

2872
00:53:09,670 --> 00:53:09,680
page tables and then maybe
 

2873
00:53:09,680 --> 00:53:12,309
page tables and then maybe
restart the instruction and so there's

2874
00:53:12,309 --> 00:53:12,319
restart the instruction and so there's
 

2875
00:53:12,319 --> 00:53:13,990
restart the instruction and so there's
all kinds of things that they can do

2876
00:53:13,990 --> 00:53:14,000
all kinds of things that they can do
 

2877
00:53:14,000 --> 00:53:17,910
all kinds of things that they can do
at runtime by manipulating the page

2878
00:53:17,910 --> 00:53:17,920
at runtime by manipulating the page
 

2879
00:53:17,920 --> 00:53:19,109
at runtime by manipulating the page
tables

2880
00:53:19,109 --> 00:53:19,119
tables
 

2881
00:53:19,119 --> 00:53:21,190
tables
and we're not going to talk about that

2882
00:53:21,190 --> 00:53:21,200
and we're not going to talk about that
 

2883
00:53:21,200 --> 00:53:22,710
and we're not going to talk about that
to today but in

2884
00:53:22,710 --> 00:53:22,720
to today but in
 

2885
00:53:22,720 --> 00:53:25,349
to today but in
two weeks we'll have a lecture exactly

2886
00:53:25,349 --> 00:53:25,359
two weeks we'll have a lecture exactly
 

2887
00:53:25,359 --> 00:53:26,790
two weeks we'll have a lecture exactly
sort of about this topic about

2888
00:53:26,790 --> 00:53:26,800
sort of about this topic about
 

2889
00:53:26,800 --> 00:53:28,549
sort of about this topic about
what cool things can you do once you

2890
00:53:28,549 --> 00:53:28,559
what cool things can you do once you
 

2891
00:53:28,559 --> 00:53:31,430
what cool things can you do once you
have page tables and page faults

2892
00:53:31,430 --> 00:53:31,440
have page tables and page faults
 

2893
00:53:31,440 --> 00:53:34,309
have page tables and page faults
but it's important to keep in mind that

2894
00:53:34,309 --> 00:53:34,319
but it's important to keep in mind that
 

2895
00:53:34,319 --> 00:53:35,270
but it's important to keep in mind that
this is a

2896
00:53:35,270 --> 00:53:35,280
this is a
 

2897
00:53:35,280 --> 00:53:38,790
this is a
incredibly powerful mechanism

2898
00:53:38,790 --> 00:53:38,800
incredibly powerful mechanism
 

2899
00:53:38,800 --> 00:53:40,710
incredibly powerful mechanism
that will provide the operating system

2900
00:53:40,710 --> 00:53:40,720
that will provide the operating system
 

2901
00:53:40,720 --> 00:53:43,430
that will provide the operating system
with a tremendous amount of flexibility

2902
00:53:43,430 --> 00:53:43,440
with a tremendous amount of flexibility
 

2903
00:53:43,440 --> 00:53:45,190
with a tremendous amount of flexibility
and there's one reason why page tables

2904
00:53:45,190 --> 00:53:45,200
and there's one reason why page tables
 

2905
00:53:45,200 --> 00:53:49,430
and there's one reason why page tables
are so popular

2906
00:53:49,430 --> 00:53:49,440

 

2907
00:53:49,440 --> 00:53:51,589

okay so what i want to do next is

2908
00:53:51,589 --> 00:53:51,599
okay so what i want to do next is
 

2909
00:53:51,599 --> 00:53:52,870
okay so what i want to do next is
actually talk about

2910
00:53:52,870 --> 00:53:52,880
actually talk about
 

2911
00:53:52,880 --> 00:53:56,230
actually talk about
xv6 and sort of see

2912
00:53:56,230 --> 00:53:56,240
xv6 and sort of see
 

2913
00:53:56,240 --> 00:53:59,510
xv6 and sort of see
how this all plays out in xv6

2914
00:53:59,510 --> 00:53:59,520
how this all plays out in xv6
 

2915
00:53:59,520 --> 00:54:01,510
how this all plays out in xv6
so the first thing i'm going to do is

2916
00:54:01,510 --> 00:54:01,520
so the first thing i'm going to do is
 

2917
00:54:01,520 --> 00:54:03,030
so the first thing i'm going to do is
i'm going to look at the

2918
00:54:03,030 --> 00:54:03,040
i'm going to look at the
 

2919
00:54:03,040 --> 00:54:06,710
i'm going to look at the
kernel page layout if you will um

2920
00:54:06,710 --> 00:54:06,720
kernel page layout if you will um
 

2921
00:54:06,720 --> 00:54:10,309
kernel page layout if you will um
and the the mapping is on this slide

2922
00:54:10,309 --> 00:54:10,319
and the the mapping is on this slide
 

2923
00:54:10,319 --> 00:54:20,790
and the the mapping is on this slide
so here's the virtual address space

2924
00:54:20,790 --> 00:54:20,800

 

2925
00:54:20,800 --> 00:54:24,470

of the kernel and here is actually the

2926
00:54:24,470 --> 00:54:24,480
of the kernel and here is actually the
 

2927
00:54:24,480 --> 00:54:25,910
of the kernel and here is actually the
physical memory so this is what

2928
00:54:25,910 --> 00:54:25,920
physical memory so this is what
 

2929
00:54:25,920 --> 00:54:27,349
physical memory so this is what
basically whatever you can think about

2930
00:54:27,349 --> 00:54:27,359
basically whatever you can think about
 

2931
00:54:27,359 --> 00:54:31,670
basically whatever you can think about
this is drm

2932
00:54:31,670 --> 00:54:31,680

 

2933
00:54:31,680 --> 00:54:34,790

and in fact it is not uh let me take the

2934
00:54:34,790 --> 00:54:34,800
and in fact it is not uh let me take the
 

2935
00:54:34,800 --> 00:54:35,910
and in fact it is not uh let me take the
back immediately

2936
00:54:35,910 --> 00:54:35,920
back immediately
 

2937
00:54:35,920 --> 00:54:39,589
back immediately
one part is drm and one part

2938
00:54:39,589 --> 00:54:39,599
one part is drm and one part
 

2939
00:54:39,599 --> 00:54:46,309
one part is drm and one part
is actually i o devices

2940
00:54:46,309 --> 00:54:46,319

 

2941
00:54:46,319 --> 00:54:49,030

and so to sort of maybe i'm going to

2942
00:54:49,030 --> 00:54:49,040
and so to sort of maybe i'm going to
 

2943
00:54:49,040 --> 00:54:50,630
and so to sort of maybe i'm going to
talk about the physical the right side

2944
00:54:50,630 --> 00:54:50,640
talk about the physical the right side
 

2945
00:54:50,640 --> 00:54:52,150
talk about the physical the right side
of the slide a little bit first and then

2946
00:54:52,150 --> 00:54:52,160
of the slide a little bit first and then
 

2947
00:54:52,160 --> 00:54:53,430
of the slide a little bit first and then
we'll talk about the left side in a

2948
00:54:53,430 --> 00:54:53,440
we'll talk about the left side in a
 

2949
00:54:53,440 --> 00:54:54,230
we'll talk about the left side in a
second

2950
00:54:54,230 --> 00:54:54,240
second
 

2951
00:54:54,240 --> 00:54:56,870
second
so the left side of the slide is

2952
00:54:56,870 --> 00:54:56,880
so the left side of the slide is
 

2953
00:54:56,880 --> 00:54:59,190
so the left side of the slide is
completely determined by the hardware

2954
00:54:59,190 --> 00:54:59,200
completely determined by the hardware
 

2955
00:54:59,200 --> 00:55:01,030
completely determined by the hardware
and so the hardware designers basically

2956
00:55:01,030 --> 00:55:01,040
and so the hardware designers basically
 

2957
00:55:01,040 --> 00:55:02,950
and so the hardware designers basically
determine the layout of that fit

2958
00:55:02,950 --> 00:55:02,960
determine the layout of that fit
 

2959
00:55:02,960 --> 00:55:06,710
determine the layout of that fit
and you know as you saw before last week

2960
00:55:06,710 --> 00:55:06,720
and you know as you saw before last week
 

2961
00:55:06,720 --> 00:55:08,789
and you know as you saw before last week
when the kernel starts it starts at this

2962
00:55:08,789 --> 00:55:08,799
when the kernel starts it starts at this
 

2963
00:55:08,799 --> 00:55:12,390
when the kernel starts it starts at this
address ox880

2964
00:55:12,390 --> 00:55:12,400
address ox880
 

2965
00:55:12,400 --> 00:55:13,829
address ox880
and that's just determined by the

2966
00:55:13,829 --> 00:55:13,839
and that's just determined by the
 

2967
00:55:13,839 --> 00:55:15,670
and that's just determined by the
hardware designers uh

2968
00:55:15,670 --> 00:55:15,680
hardware designers uh
 

2969
00:55:15,680 --> 00:55:19,109
hardware designers uh
and so to be more explicit

2970
00:55:19,109 --> 00:55:19,119
and so to be more explicit
 

2971
00:55:19,119 --> 00:55:20,870
and so to be more explicit
so if you look at the board this is the

2972
00:55:20,870 --> 00:55:20,880
so if you look at the board this is the
 

2973
00:55:20,880 --> 00:55:22,549
so if you look at the board this is the
same picture of the board that i showed

2974
00:55:22,549 --> 00:55:22,559
same picture of the board that i showed
 

2975
00:55:22,559 --> 00:55:23,990
same picture of the board that i showed
on monday but it's hopefully a little

2976
00:55:23,990 --> 00:55:24,000
on monday but it's hopefully a little
 

2977
00:55:24,000 --> 00:55:24,789
on monday but it's hopefully a little
bit better

2978
00:55:24,789 --> 00:55:24,799
bit better
 

2979
00:55:24,799 --> 00:55:26,710
bit better
picture it's easier to see here's our

2980
00:55:26,710 --> 00:55:26,720
picture it's easier to see here's our
 

2981
00:55:26,720 --> 00:55:28,309
picture it's easier to see here's our
risk five processor

2982
00:55:28,309 --> 00:55:28,319
risk five processor
 

2983
00:55:28,319 --> 00:55:29,829
risk five processor
and we now know correct that in the risk

2984
00:55:29,829 --> 00:55:29,839
and we now know correct that in the risk
 

2985
00:55:29,839 --> 00:55:31,589
and we now know correct that in the risk
five processor there are four cores

2986
00:55:31,589 --> 00:55:31,599
five processor there are four cores
 

2987
00:55:31,599 --> 00:55:34,230
five processor there are four cores
but there's also an mmu and there's also

2988
00:55:34,230 --> 00:55:34,240
but there's also an mmu and there's also
 

2989
00:55:34,240 --> 00:55:35,349
but there's also an mmu and there's also
a tob

2990
00:55:35,349 --> 00:55:35,359
a tob
 

2991
00:55:35,359 --> 00:55:37,910
a tob
or multiple tv every cord has his own

2992
00:55:37,910 --> 00:55:37,920
or multiple tv every cord has his own
 

2993
00:55:37,920 --> 00:55:40,789
or multiple tv every cord has his own
mmu and every core has his own tlb

2994
00:55:40,789 --> 00:55:40,799
mmu and every core has his own tlb
 

2995
00:55:40,799 --> 00:55:44,710
mmu and every core has his own tlb
and here are the d-ring chips and so

2996
00:55:44,710 --> 00:55:44,720
and here are the d-ring chips and so
 

2997
00:55:44,720 --> 00:55:46,549
and here are the d-ring chips and so
basically the designers of the board

2998
00:55:46,549 --> 00:55:46,559
basically the designers of the board
 

2999
00:55:46,559 --> 00:55:48,549
basically the designers of the board
have decided that uh

3000
00:55:48,549 --> 00:55:48,559
have decided that uh
 

3001
00:55:48,559 --> 00:55:51,270
have decided that uh
when you know the after you know the

3002
00:55:51,270 --> 00:55:51,280
when you know the after you know the
 

3003
00:55:51,280 --> 00:55:52,549
when you know the after you know the
translation for virtual to fiscal

3004
00:55:52,549 --> 00:55:52,559
translation for virtual to fiscal
 

3005
00:55:52,559 --> 00:55:53,190
translation for virtual to fiscal
address

3006
00:55:53,190 --> 00:55:53,200
address
 

3007
00:55:53,200 --> 00:55:54,630
address
basically physical addresses that's

3008
00:55:54,630 --> 00:55:54,640
basically physical addresses that's
 

3009
00:55:54,640 --> 00:55:57,030
basically physical addresses that's
starting you know at 08 you know a lot

3010
00:55:57,030 --> 00:55:57,040
starting you know at 08 you know a lot
 

3011
00:55:57,040 --> 00:55:57,750
starting you know at 08 you know a lot
of zeros

3012
00:55:57,750 --> 00:55:57,760
of zeros
 

3013
00:55:57,760 --> 00:56:00,789
of zeros
actually go to the dram chips and

3014
00:56:00,789 --> 00:56:00,799
actually go to the dram chips and
 

3015
00:56:00,799 --> 00:56:02,069
actually go to the dram chips and
dresses above below

3016
00:56:02,069 --> 00:56:02,079
dresses above below
 

3017
00:56:02,079 --> 00:56:05,109
dresses above below
oa8 may go to different io devices

3018
00:56:05,109 --> 00:56:05,119
oa8 may go to different io devices
 

3019
00:56:05,119 --> 00:56:08,309
oa8 may go to different io devices
and so the the platform decides

3020
00:56:08,309 --> 00:56:08,319
and so the the platform decides
 

3021
00:56:08,319 --> 00:56:08,950
and so the the platform decides
basically

3022
00:56:08,950 --> 00:56:08,960
basically
 

3023
00:56:08,960 --> 00:56:10,630
basically
the designers of this board have decided

3024
00:56:10,630 --> 00:56:10,640
the designers of this board have decided
 

3025
00:56:10,640 --> 00:56:12,630
the designers of this board have decided
exactly what the physical layout

3026
00:56:12,630 --> 00:56:12,640
exactly what the physical layout
 

3027
00:56:12,640 --> 00:56:14,069
exactly what the physical layout
in fact you can look that up the

3028
00:56:14,069 --> 00:56:14,079
in fact you can look that up the
 

3029
00:56:14,079 --> 00:56:16,069
in fact you can look that up the
physical layout if you want to

3030
00:56:16,069 --> 00:56:16,079
physical layout if you want to
 

3031
00:56:16,079 --> 00:56:17,910
physical layout if you want to
just let me show you that so here's the

3032
00:56:17,910 --> 00:56:17,920
just let me show you that so here's the
 

3033
00:56:17,920 --> 00:56:21,990
just let me show you that so here's the
the same manual that i showed you on uh

3034
00:56:21,990 --> 00:56:22,000
the same manual that i showed you on uh
 

3035
00:56:22,000 --> 00:56:25,670
the same manual that i showed you on uh
on on monday

3036
00:56:25,670 --> 00:56:25,680
on on monday
 

3037
00:56:25,680 --> 00:56:29,430
on on monday
and if you go to actually escape

3038
00:56:29,430 --> 00:56:29,440
and if you go to actually escape
 

3039
00:56:29,440 --> 00:56:32,710
and if you go to actually escape
you go to page 31 i believe

3040
00:56:32,710 --> 00:56:32,720
you go to page 31 i believe
 

3041
00:56:32,720 --> 00:56:35,990
you go to page 31 i believe
here is the page um and if you go down

3042
00:56:35,990 --> 00:56:36,000
here is the page um and if you go down
 

3043
00:56:36,000 --> 00:56:36,470
here is the page um and if you go down
this

3044
00:56:36,470 --> 00:56:36,480
this
 

3045
00:56:36,480 --> 00:56:38,390
this
is what's the memory it will spell out

3046
00:56:38,390 --> 00:56:38,400
is what's the memory it will spell out
 

3047
00:56:38,400 --> 00:56:39,510
is what's the memory it will spell out
what the memory map is

3048
00:56:39,510 --> 00:56:39,520
what the memory map is
 

3049
00:56:39,520 --> 00:56:42,789
what the memory map is
of the uh the board and it will say like

3050
00:56:42,789 --> 00:56:42,799
of the uh the board and it will say like
 

3051
00:56:42,799 --> 00:56:43,990
of the uh the board and it will say like
at address zero zero

3052
00:56:43,990 --> 00:56:44,000
at address zero zero
 

3053
00:56:44,000 --> 00:56:47,510
at address zero zero
is reserved nothing is there uh if you

3054
00:56:47,510 --> 00:56:47,520
is reserved nothing is there uh if you
 

3055
00:56:47,520 --> 00:56:49,910
is reserved nothing is there uh if you
go scroll down in this memory map you

3056
00:56:49,910 --> 00:56:49,920
go scroll down in this memory map you
 

3057
00:56:49,920 --> 00:56:51,109
go scroll down in this memory map you
know you'll see

3058
00:56:51,109 --> 00:56:51,119
know you'll see
 

3059
00:56:51,119 --> 00:56:53,109
know you'll see
some information about all the different

3060
00:56:53,109 --> 00:56:53,119
some information about all the different
 

3061
00:56:53,119 --> 00:56:54,549
some information about all the different
things that are mapped for example

3062
00:56:54,549 --> 00:56:54,559
things that are mapped for example
 

3063
00:56:54,559 --> 00:56:57,829
things that are mapped for example
ethernet board is mapped at ox 1

3064
00:56:57,829 --> 00:56:57,839
ethernet board is mapped at ox 1
 

3065
00:56:57,839 --> 00:57:01,109
ethernet board is mapped at ox 1
you know x something

3066
00:57:01,109 --> 00:57:01,119
you know x something
 

3067
00:57:01,119 --> 00:57:03,910
you know x something
if you go further down oops that was too

3068
00:57:03,910 --> 00:57:03,920
if you go further down oops that was too
 

3069
00:57:03,920 --> 00:57:05,510
if you go further down oops that was too
much down

3070
00:57:05,510 --> 00:57:05,520
much down
 

3071
00:57:05,520 --> 00:57:08,870
much down
here you see the entry for ox 8

3072
00:57:08,870 --> 00:57:08,880
here you see the entry for ox 8
 

3073
00:57:08,880 --> 00:57:12,549
here you see the entry for ox 8
0 0 0 correct and that actually is ddr

3074
00:57:12,549 --> 00:57:12,559
0 0 0 correct and that actually is ddr
 

3075
00:57:12,559 --> 00:57:14,950
0 0 0 correct and that actually is ddr
memory the off chip volatile memory and

3076
00:57:14,950 --> 00:57:14,960
memory the off chip volatile memory and
 

3077
00:57:14,960 --> 00:57:16,630
memory the off chip volatile memory and
so those are the dram chips that i just

3078
00:57:16,630 --> 00:57:16,640
so those are the dram chips that i just
 

3079
00:57:16,640 --> 00:57:19,349
so those are the dram chips that i just
showed you on the previous slide

3080
00:57:19,349 --> 00:57:19,359
showed you on the previous slide
 

3081
00:57:19,359 --> 00:57:20,789
showed you on the previous slide
and so it's just good to keep in your

3082
00:57:20,789 --> 00:57:20,799
and so it's just good to keep in your
 

3083
00:57:20,799 --> 00:57:21,910
and so it's just good to keep in your
head correct even though we're not

3084
00:57:21,910 --> 00:57:21,920
head correct even though we're not
 

3085
00:57:21,920 --> 00:57:23,589
head correct even though we're not
talking to keemu and your old osc

3086
00:57:23,589 --> 00:57:23,599
talking to keemu and your old osc
 

3087
00:57:23,599 --> 00:57:24,150
talking to keemu and your old osc
software

3088
00:57:24,150 --> 00:57:24,160
software
 

3089
00:57:24,160 --> 00:57:26,470
software
in the end everything is determined uh

3090
00:57:26,470 --> 00:57:26,480
in the end everything is determined uh
 

3091
00:57:26,480 --> 00:57:30,549
in the end everything is determined uh
by you know the actual board

3092
00:57:30,549 --> 00:57:30,559

 

3093
00:57:30,559 --> 00:57:34,630

okay so go back to uh my slides

3094
00:57:34,630 --> 00:57:34,640
okay so go back to uh my slides
 

3095
00:57:34,640 --> 00:57:38,150
okay so go back to uh my slides
uh so let's look at the layout

3096
00:57:38,150 --> 00:57:38,160
uh so let's look at the layout
 

3097
00:57:38,160 --> 00:57:41,349
uh so let's look at the layout
yeah uh noah go ahead

3098
00:57:41,349 --> 00:57:41,359
yeah uh noah go ahead
 

3099
00:57:41,359 --> 00:57:43,109
yeah uh noah go ahead
yeah when you say that this this layout

3100
00:57:43,109 --> 00:57:43,119
yeah when you say that this this layout
 

3101
00:57:43,119 --> 00:57:44,470
yeah when you say that this this layout
is determined by the hardware uh

3102
00:57:44,470 --> 00:57:44,480
is determined by the hardware uh
 

3103
00:57:44,480 --> 00:57:47,030
is determined by the hardware uh
do you specifically mean uh like the cpu

3104
00:57:47,030 --> 00:57:47,040
do you specifically mean uh like the cpu
 

3105
00:57:47,040 --> 00:57:48,390
do you specifically mean uh like the cpu
itself or the

3106
00:57:48,390 --> 00:57:48,400
itself or the
 

3107
00:57:48,400 --> 00:57:50,870
itself or the
the board on which the cpu resides the

3108
00:57:50,870 --> 00:57:50,880
the board on which the cpu resides the
 

3109
00:57:50,880 --> 00:57:52,630
the board on which the cpu resides the
board in which the cpu resides correct

3110
00:57:52,630 --> 00:57:52,640
board in which the cpu resides correct
 

3111
00:57:52,640 --> 00:57:54,390
board in which the cpu resides correct
because you know the board you know the

3112
00:57:54,390 --> 00:57:54,400
because you know the board you know the
 

3113
00:57:54,400 --> 00:57:55,510
because you know the board you know the
the cpu is that that

3114
00:57:55,510 --> 00:57:55,520
the cpu is that that
 

3115
00:57:55,520 --> 00:57:57,030
the cpu is that that
gray thing in the middle that square

3116
00:57:57,030 --> 00:57:57,040
gray thing in the middle that square
 

3117
00:57:57,040 --> 00:57:59,430
gray thing in the middle that square
thing saying uh whatever risk five

3118
00:57:59,430 --> 00:57:59,440
thing saying uh whatever risk five
 

3119
00:57:59,440 --> 00:58:02,950
thing saying uh whatever risk five
the dram chips are sitting off the uh

3120
00:58:02,950 --> 00:58:02,960
the dram chips are sitting off the uh
 

3121
00:58:02,960 --> 00:58:04,710
the dram chips are sitting off the uh
of the processor correct and it's the

3122
00:58:04,710 --> 00:58:04,720
of the processor correct and it's the
 

3123
00:58:04,720 --> 00:58:06,150
of the processor correct and it's the
board designers who put the

3124
00:58:06,150 --> 00:58:06,160
board designers who put the
 

3125
00:58:06,160 --> 00:58:09,430
board designers who put the
chip the the the many i o devices all

3126
00:58:09,430 --> 00:58:09,440
chip the the the many i o devices all
 

3127
00:58:09,440 --> 00:58:12,390
chip the the the many i o devices all
together

3128
00:58:12,390 --> 00:58:12,400

 

3129
00:58:12,400 --> 00:58:14,230

the large part of an operating system is

3130
00:58:14,230 --> 00:58:14,240
the large part of an operating system is
 

3131
00:58:14,240 --> 00:58:15,750
the large part of an operating system is
actually you know the cpu is one part

3132
00:58:15,750 --> 00:58:15,760
actually you know the cpu is one part
 

3133
00:58:15,760 --> 00:58:17,270
actually you know the cpu is one part
but the i o devices are at least as

3134
00:58:17,270 --> 00:58:17,280
but the i o devices are at least as
 

3135
00:58:17,280 --> 00:58:18,950
but the i o devices are at least as
important right and so when you're

3136
00:58:18,950 --> 00:58:18,960
important right and so when you're
 

3137
00:58:18,960 --> 00:58:20,230
important right and so when you're
writing an operating system

3138
00:58:20,230 --> 00:58:20,240
writing an operating system
 

3139
00:58:20,240 --> 00:58:21,910
writing an operating system
you both have to deal with the cpu as

3140
00:58:21,910 --> 00:58:21,920
you both have to deal with the cpu as
 

3141
00:58:21,920 --> 00:58:23,510
you both have to deal with the cpu as
well as you know with the i o devices

3142
00:58:23,510 --> 00:58:23,520
well as you know with the i o devices
 

3143
00:58:23,520 --> 00:58:24,630
well as you know with the i o devices
you know you and you want to send a

3144
00:58:24,630 --> 00:58:24,640
you know you and you want to send a
 

3145
00:58:24,640 --> 00:58:25,829
you know you and you want to send a
packet over the internet

3146
00:58:25,829 --> 00:58:25,839
packet over the internet
 

3147
00:58:25,839 --> 00:58:29,270
packet over the internet
well somebody has to tickle

3148
00:58:29,270 --> 00:58:29,280
well somebody has to tickle
 

3149
00:58:29,280 --> 00:58:30,870
well somebody has to tickle
you know the network drive or the nic

3150
00:58:30,870 --> 00:58:30,880
you know the network drive or the nic
 

3151
00:58:30,880 --> 00:58:32,230
you know the network drive or the nic
card to actually do that and that's the

3152
00:58:32,230 --> 00:58:32,240
card to actually do that and that's the
 

3153
00:58:32,240 --> 00:58:35,349
card to actually do that and that's the
operating system

3154
00:58:35,349 --> 00:58:35,359

 

3155
00:58:35,359 --> 00:58:37,589

so going back to the right side of this

3156
00:58:37,589 --> 00:58:37,599
so going back to the right side of this
 

3157
00:58:37,599 --> 00:58:38,870
so going back to the right side of this
picture correct this is the physical

3158
00:58:38,870 --> 00:58:38,880
picture correct this is the physical
 

3159
00:58:38,880 --> 00:58:39,670
picture correct this is the physical
dress

3160
00:58:39,670 --> 00:58:39,680
dress
 

3161
00:58:39,680 --> 00:58:41,829
dress
layout you know we see basically that

3162
00:58:41,829 --> 00:58:41,839
layout you know we see basically that
 

3163
00:58:41,839 --> 00:58:43,430
layout you know we see basically that
you know the bottom was unused as i

3164
00:58:43,430 --> 00:58:43,440
you know the bottom was unused as i
 

3165
00:58:43,440 --> 00:58:44,710
you know the bottom was unused as i
showed you on that uh

3166
00:58:44,710 --> 00:58:44,720
showed you on that uh
 

3167
00:58:44,720 --> 00:58:47,910
showed you on that uh
document it turns out that ox100 that

3168
00:58:47,910 --> 00:58:47,920
document it turns out that ox100 that
 

3169
00:58:47,920 --> 00:58:49,829
document it turns out that ox100 that
physical address does where the boot rom

3170
00:58:49,829 --> 00:58:49,839
physical address does where the boot rom
 

3171
00:58:49,839 --> 00:58:51,349
physical address does where the boot rom
is so when you turn on

3172
00:58:51,349 --> 00:58:51,359
is so when you turn on
 

3173
00:58:51,359 --> 00:58:52,950
is so when you turn on
you know that board the first thing that

3174
00:58:52,950 --> 00:58:52,960
you know that board the first thing that
 

3175
00:58:52,960 --> 00:58:54,870
you know that board the first thing that
happens is actually code in the boot rom

3176
00:58:54,870 --> 00:58:54,880
happens is actually code in the boot rom
 

3177
00:58:54,880 --> 00:58:57,589
happens is actually code in the boot rom
runs and when the boot run is done it

3178
00:58:57,589 --> 00:58:57,599
runs and when the boot run is done it
 

3179
00:58:57,599 --> 00:59:00,390
runs and when the boot run is done it
actually will jump to this ox000

3180
00:59:00,390 --> 00:59:00,400
actually will jump to this ox000
 

3181
00:59:00,400 --> 00:59:01,990
actually will jump to this ox000
and it's a job of the operating system

3182
00:59:01,990 --> 00:59:02,000
and it's a job of the operating system
 

3183
00:59:02,000 --> 00:59:03,589
and it's a job of the operating system
make sure that there's some

3184
00:59:03,589 --> 00:59:03,599
make sure that there's some
 

3185
00:59:03,599 --> 00:59:05,670
make sure that there's some
you know some data there and then

3186
00:59:05,670 --> 00:59:05,680
you know some data there and then
 

3187
00:59:05,680 --> 00:59:07,190
you know some data there and then
there's a bunch of other devices

3188
00:59:07,190 --> 00:59:07,200
there's a bunch of other devices
 

3189
00:59:07,200 --> 00:59:10,309
there's a bunch of other devices
that we'll talk about here's the uh an

3190
00:59:10,309 --> 00:59:10,319
that we'll talk about here's the uh an
 

3191
00:59:10,319 --> 00:59:11,349
that we'll talk about here's the uh an
interrupt controller

3192
00:59:11,349 --> 00:59:11,359
interrupt controller
 

3193
00:59:11,359 --> 00:59:13,750
interrupt controller
uh we'll talk about it next week uh

3194
00:59:13,750 --> 00:59:13,760
uh we'll talk about it next week uh
 

3195
00:59:13,760 --> 00:59:14,870
uh we'll talk about it next week uh
there's a clint

3196
00:59:14,870 --> 00:59:14,880
there's a clint
 

3197
00:59:14,880 --> 00:59:17,910
there's a clint
another a part of the interrupt story

3198
00:59:17,910 --> 00:59:17,920
another a part of the interrupt story
 

3199
00:59:17,920 --> 00:59:19,349
another a part of the interrupt story
that we'll talk about next week

3200
00:59:19,349 --> 00:59:19,359
that we'll talk about next week
 

3201
00:59:19,359 --> 00:59:21,030
that we'll talk about next week
so basically multiple devices can

3202
00:59:21,030 --> 00:59:21,040
so basically multiple devices can
 

3203
00:59:21,040 --> 00:59:22,549
so basically multiple devices can
generate interrupts there needs to be a

3204
00:59:22,549 --> 00:59:22,559
generate interrupts there needs to be a
 

3205
00:59:22,559 --> 00:59:24,630
generate interrupts there needs to be a
plan to route those interrupts to

3206
00:59:24,630 --> 00:59:24,640
plan to route those interrupts to
 

3207
00:59:24,640 --> 00:59:26,710
plan to route those interrupts to
the to the appropriate request level and

3208
00:59:26,710 --> 00:59:26,720
the to the appropriate request level and
 

3209
00:59:26,720 --> 00:59:28,630
the to the appropriate request level and
that's all implemented by

3210
00:59:28,630 --> 00:59:28,640
that's all implemented by
 

3211
00:59:28,640 --> 00:59:31,670
that's all implemented by
those interrupt controllers and let me

3212
00:59:31,670 --> 00:59:31,680
those interrupt controllers and let me
 

3213
00:59:31,680 --> 00:59:33,349
those interrupt controllers and let me
finish for a second you know this this

3214
00:59:33,349 --> 00:59:33,359
finish for a second you know this this
 

3215
00:59:33,359 --> 00:59:34,710
finish for a second you know this this
slide before

3216
00:59:34,710 --> 00:59:34,720
slide before
 

3217
00:59:34,720 --> 00:59:37,829
slide before
answering the question um then there's a

3218
00:59:37,829 --> 00:59:37,839
answering the question um then there's a
 

3219
00:59:37,839 --> 00:59:39,829
answering the question um then there's a
uart that was the device

3220
00:59:39,829 --> 00:59:39,839
uart that was the device
 

3221
00:59:39,839 --> 00:59:41,670
uart that was the device
uh that was actually the thing that

3222
00:59:41,670 --> 00:59:41,680
uh that was actually the thing that
 

3223
00:59:41,680 --> 00:59:43,990
uh that was actually the thing that
actually the device is actually in a new

3224
00:59:43,990 --> 00:59:44,000
actually the device is actually in a new
 

3225
00:59:44,000 --> 00:59:45,270
actually the device is actually in a new
device that actually interacts with the

3226
00:59:45,270 --> 00:59:45,280
device that actually interacts with the
 

3227
00:59:45,280 --> 00:59:47,030
device that actually interacts with the
console and the display

3228
00:59:47,030 --> 00:59:47,040
console and the display
 

3229
00:59:47,040 --> 00:59:48,630
console and the display
and then there's the virtual there's the

3230
00:59:48,630 --> 00:59:48,640
and then there's the virtual there's the
 

3231
00:59:48,640 --> 00:59:50,230
and then there's the virtual there's the
disk uh

3232
00:59:50,230 --> 00:59:50,240
disk uh
 

3233
00:59:50,240 --> 00:59:52,150
disk uh
and that's the device there's where the

3234
00:59:52,150 --> 00:59:52,160
and that's the device there's where the
 

3235
00:59:52,160 --> 00:59:54,150
and that's the device there's where the
device sits that actually interacts with

3236
00:59:54,150 --> 00:59:54,160
device sits that actually interacts with
 

3237
00:59:54,160 --> 00:59:54,789
device sits that actually interacts with
the disk

3238
00:59:54,789 --> 00:59:54,799
the disk
 

3239
00:59:54,799 --> 00:59:57,030
the disk
and so when you write to location to

3240
00:59:57,030 --> 00:59:57,040
and so when you write to location to
 

3241
00:59:57,040 --> 00:59:58,829
and so when you write to location to
address let's say

3242
00:59:58,829 --> 00:59:58,839
address let's say
 

3243
00:59:58,839 --> 01:00:02,390
address let's say
ox200 then that physical address

3244
01:00:02,390 --> 01:00:02,400
ox200 then that physical address
 

3245
01:00:02,400 --> 01:00:03,670
ox200 then that physical address
corresponds to the clint

3246
01:00:03,670 --> 01:00:03,680
corresponds to the clint
 

3247
01:00:03,680 --> 01:00:04,870
corresponds to the clint
and so do you when you do store

3248
01:00:04,870 --> 01:00:04,880
and so do you when you do store
 

3249
01:00:04,880 --> 01:00:06,950
and so do you when you do store
instruction or load instruction you're

3250
01:00:06,950 --> 01:00:06,960
instruction or load instruction you're
 

3251
01:00:06,960 --> 01:00:10,069
instruction or load instruction you're
reading and writing to the chip that

3252
01:00:10,069 --> 01:00:10,079
reading and writing to the chip that
 

3253
01:00:10,079 --> 01:00:10,789
reading and writing to the chip that
implements the

3254
01:00:10,789 --> 01:00:10,799
implements the
 

3255
01:00:10,799 --> 01:00:14,069
implements the
uh clint and we'll see later what that

3256
01:00:14,069 --> 01:00:14,079
uh clint and we'll see later what that
 

3257
01:00:14,079 --> 01:00:14,870
uh clint and we'll see later what that
exactly means

3258
01:00:14,870 --> 01:00:14,880
exactly means
 

3259
01:00:14,880 --> 01:00:16,230
exactly means
but basically you can think about this

3260
01:00:16,230 --> 01:00:16,240
but basically you can think about this
 

3261
01:00:16,240 --> 01:00:18,069
but basically you can think about this
as interacting directly with the device

3262
01:00:18,069 --> 01:00:18,079
as interacting directly with the device
 

3263
01:00:18,079 --> 01:00:19,349
as interacting directly with the device
and not reading and writing physical

3264
01:00:19,349 --> 01:00:19,359
and not reading and writing physical
 

3265
01:00:19,359 --> 01:00:21,589
and not reading and writing physical
memory

3266
01:00:21,589 --> 01:00:21,599
memory
 

3267
01:00:21,599 --> 01:00:24,630
memory
yeah there was a question um

3268
01:00:24,630 --> 01:00:24,640
yeah there was a question um
 

3269
01:00:24,640 --> 01:00:26,630
yeah there was a question um
so just trying to make sure the

3270
01:00:26,630 --> 01:00:26,640
so just trying to make sure the
 

3271
01:00:26,640 --> 01:00:29,069
so just trying to make sure the
addresses below

3272
01:00:29,069 --> 01:00:29,079
addresses below
 

3273
01:00:29,079 --> 01:00:33,670
addresses below
ox800 they don't really exist in dram

3274
01:00:33,670 --> 01:00:33,680
ox800 they don't really exist in dram
 

3275
01:00:33,680 --> 01:00:35,270
ox800 they don't really exist in dram
if when we mention those addresses we

3276
01:00:35,270 --> 01:00:35,280
if when we mention those addresses we
 

3277
01:00:35,280 --> 01:00:37,190
if when we mention those addresses we
directly go to the other hardwares

3278
01:00:37,190 --> 01:00:37,200
directly go to the other hardwares
 

3279
01:00:37,200 --> 01:00:39,270
directly go to the other hardwares
yeah yeah so like if you go back to this

3280
01:00:39,270 --> 01:00:39,280
yeah yeah so like if you go back to this
 

3281
01:00:39,280 --> 01:00:40,309
yeah yeah so like if you go back to this
picture

3282
01:00:40,309 --> 01:00:40,319
picture
 

3283
01:00:40,319 --> 01:00:45,190
picture
anything above ox one zero correct

3284
01:00:45,190 --> 01:00:45,200

 

3285
01:00:45,200 --> 01:00:48,789

that's these dram chips and

3286
01:00:48,789 --> 01:00:48,799
that's these dram chips and
 

3287
01:00:48,799 --> 01:00:50,630
that's these dram chips and
you know i can't draw you i can't point

3288
01:00:50,630 --> 01:00:50,640
you know i can't draw you i can't point
 

3289
01:00:50,640 --> 01:00:52,789
you know i can't draw you i can't point
you to the clint uh but like for example

3290
01:00:52,789 --> 01:00:52,799
you to the clint uh but like for example
 

3291
01:00:52,799 --> 01:00:53,750
you to the clint uh but like for example
here's the

3292
01:00:53,750 --> 01:00:53,760
here's the
 

3293
01:00:53,760 --> 01:00:57,109
here's the
uh and so that's it's a particular

3294
01:00:57,109 --> 01:00:57,119
uh and so that's it's a particular
 

3295
01:00:57,119 --> 01:00:58,549
uh and so that's it's a particular
physical address and we can write

3296
01:00:58,549 --> 01:00:58,559
physical address and we can write
 

3297
01:00:58,559 --> 01:00:59,589
physical address and we can write
you know with load and store

3298
01:00:59,589 --> 01:00:59,599
you know with load and store
 

3299
01:00:59,599 --> 01:01:00,789
you know with load and store
instructions this is called memory

3300
01:01:00,789 --> 01:01:00,799
instructions this is called memory
 

3301
01:01:00,799 --> 01:01:01,750
instructions this is called memory
mapped io

3302
01:01:01,750 --> 01:01:01,760
mapped io
 

3303
01:01:01,760 --> 01:01:03,510
mapped io
we can do load and store instructions we

3304
01:01:03,510 --> 01:01:03,520
we can do load and store instructions we
 

3305
01:01:03,520 --> 01:01:09,190
we can do load and store instructions we
can program the ethernet controller

3306
01:01:09,190 --> 01:01:09,200

 

3307
01:01:09,200 --> 01:01:12,069

um i also have a question uh why why is

3308
01:01:12,069 --> 01:01:12,079
um i also have a question uh why why is
 

3309
01:01:12,079 --> 01:01:13,270
um i also have a question uh why why is
this big chunk

3310
01:01:13,270 --> 01:01:13,280
this big chunk
 

3311
01:01:13,280 --> 01:01:16,230
this big chunk
at the top says and used why is it not

3312
01:01:16,230 --> 01:01:16,240
at the top says and used why is it not
 

3313
01:01:16,240 --> 01:01:17,030
at the top says and used why is it not
used

3314
01:01:17,030 --> 01:01:17,040
used
 

3315
01:01:17,040 --> 01:01:20,630
used
oh uh okay so remember uh

3316
01:01:20,630 --> 01:01:20,640
oh uh okay so remember uh
 

3317
01:01:20,640 --> 01:01:23,109
oh uh okay so remember uh
not every machine not every so there's

3318
01:01:23,109 --> 01:01:23,119
not every machine not every so there's
 

3319
01:01:23,119 --> 01:01:25,190
not every machine not every so there's
two to the power 56

3320
01:01:25,190 --> 01:01:25,200
two to the power 56
 

3321
01:01:25,200 --> 01:01:27,990
two to the power 56
uh bytes of physical address space uh

3322
01:01:27,990 --> 01:01:28,000
uh bytes of physical address space uh
 

3323
01:01:28,000 --> 01:01:29,190
uh bytes of physical address space uh
but you don't have to

3324
01:01:29,190 --> 01:01:29,200
but you don't have to
 

3325
01:01:29,200 --> 01:01:31,030
but you don't have to
you know plug in that much memory into

3326
01:01:31,030 --> 01:01:31,040
you know plug in that much memory into
 

3327
01:01:31,040 --> 01:01:32,870
you know plug in that much memory into
the board if you don't want to

3328
01:01:32,870 --> 01:01:32,880
the board if you don't want to
 

3329
01:01:32,880 --> 01:01:35,510
the board if you don't want to
and so some parts of it may be unused

3330
01:01:35,510 --> 01:01:35,520
and so some parts of it may be unused
 

3331
01:01:35,520 --> 01:01:36,870
and so some parts of it may be unused
depending on how much you know dram

3332
01:01:36,870 --> 01:01:36,880
depending on how much you know dram
 

3333
01:01:36,880 --> 01:01:42,230
depending on how much you know dram
chips are sitting on the board

3334
01:01:42,230 --> 01:01:42,240

 

3335
01:01:42,240 --> 01:01:45,510

in fact like in xv6 we i think

3336
01:01:45,510 --> 01:01:45,520
in fact like in xv6 we i think
 

3337
01:01:45,520 --> 01:01:50,309
in fact like in xv6 we i think
limit ourselves to 128 megabytes

3338
01:01:50,309 --> 01:01:50,319
limit ourselves to 128 megabytes
 

3339
01:01:50,319 --> 01:01:55,349
limit ourselves to 128 megabytes
and no more

3340
01:01:55,349 --> 01:01:55,359

 

3341
01:01:55,359 --> 01:01:59,029

so when um um when a

3342
01:01:59,029 --> 01:01:59,039
so when um um when a
 

3343
01:01:59,039 --> 01:02:01,430
so when um um when a
load restore instruction goes out of the

3344
01:02:01,430 --> 01:02:01,440
load restore instruction goes out of the
 

3345
01:02:01,440 --> 01:02:02,470
load restore instruction goes out of the
cpu

3346
01:02:02,470 --> 01:02:02,480
cpu
 

3347
01:02:02,480 --> 01:02:05,829
cpu
um does that go like

3348
01:02:05,829 --> 01:02:05,839
um does that go like
 

3349
01:02:05,839 --> 01:02:07,829
um does that go like
where does it get routed to the correct

3350
01:02:07,829 --> 01:02:07,839
where does it get routed to the correct
 

3351
01:02:07,839 --> 01:02:10,150
where does it get routed to the correct
i o like already from the cpu

3352
01:02:10,150 --> 01:02:10,160
i o like already from the cpu
 

3353
01:02:10,160 --> 01:02:12,870
i o like already from the cpu
so kind of like if the cpu before it

3354
01:02:12,870 --> 01:02:12,880
so kind of like if the cpu before it
 

3355
01:02:12,880 --> 01:02:13,510
so kind of like if the cpu before it
sends it out

3356
01:02:13,510 --> 01:02:13,520
sends it out
 

3357
01:02:13,520 --> 01:02:16,390
sends it out
it says okay if it's lower than 0x8 and

3358
01:02:16,390 --> 01:02:16,400
it says okay if it's lower than 0x8 and
 

3359
01:02:16,400 --> 01:02:17,510
it says okay if it's lower than 0x8 and
all the zeros

3360
01:02:17,510 --> 01:02:17,520
all the zeros
 

3361
01:02:17,520 --> 01:02:19,190
all the zeros
then i'm gonna send it to like the

3362
01:02:19,190 --> 01:02:19,200
then i'm gonna send it to like the
 

3363
01:02:19,200 --> 01:02:20,950
then i'm gonna send it to like the
correct i o device and then otherwise

3364
01:02:20,950 --> 01:02:20,960
correct i o device and then otherwise
 

3365
01:02:20,960 --> 01:02:22,549
correct i o device and then otherwise
i'm going to send it to

3366
01:02:22,549 --> 01:02:22,559
i'm going to send it to
 

3367
01:02:22,559 --> 01:02:27,430
i'm going to send it to
the um to the memory like the dram chip

3368
01:02:27,430 --> 01:02:27,440
the um to the memory like the dram chip
 

3369
01:02:27,440 --> 01:02:29,029
the um to the memory like the dram chip
you can think about as a demultiplexer

3370
01:02:29,029 --> 01:02:29,039
you can think about as a demultiplexer
 

3371
01:02:29,039 --> 01:02:30,630
you can think about as a demultiplexer
sitting on the inside of the

3372
01:02:30,630 --> 01:02:30,640
sitting on the inside of the
 

3373
01:02:30,640 --> 01:02:33,910
sitting on the inside of the
risc-5 you know blob oh so it's inside

3374
01:02:33,910 --> 01:02:33,920
risc-5 you know blob oh so it's inside
 

3375
01:02:33,920 --> 01:02:35,670
risc-5 you know blob oh so it's inside
of that block

3376
01:02:35,670 --> 01:02:35,680
of that block
 

3377
01:02:35,680 --> 01:02:39,349
of that block
okay that's your memory controller

3378
01:02:39,349 --> 01:02:39,359
okay that's your memory controller
 

3379
01:02:39,359 --> 01:02:45,270
okay that's your memory controller
and that doesn't do routing

3380
01:02:45,270 --> 01:02:45,280

 

3381
01:02:45,280 --> 01:02:46,549

very important to have that sort of all

3382
01:02:46,549 --> 01:02:46,559
very important to have that sort of all
 

3383
01:02:46,559 --> 01:02:51,270
very important to have that sort of all
clear in your head

3384
01:02:51,270 --> 01:02:51,280

 

3385
01:02:51,280 --> 01:02:53,190

are we okay so now i want to switch to

3386
01:02:53,190 --> 01:02:53,200
are we okay so now i want to switch to
 

3387
01:02:53,200 --> 01:02:55,510
are we okay so now i want to switch to
the right side of this picture

3388
01:02:55,510 --> 01:02:55,520
the right side of this picture
 

3389
01:02:55,520 --> 01:02:58,630
the right side of this picture
and this is basically what xv6 sets up

3390
01:02:58,630 --> 01:02:58,640
and this is basically what xv6 sets up
 

3391
01:02:58,640 --> 01:03:01,990
and this is basically what xv6 sets up
to uh the virtual dress space that xv6

3392
01:03:01,990 --> 01:03:02,000
to uh the virtual dress space that xv6
 

3393
01:03:02,000 --> 01:03:04,549
to uh the virtual dress space that xv6
sets up so when the machine boots

3394
01:03:04,549 --> 01:03:04,559
sets up so when the machine boots
 

3395
01:03:04,559 --> 01:03:05,349
sets up so when the machine boots
there's no

3396
01:03:05,349 --> 01:03:05,359
there's no
 

3397
01:03:05,359 --> 01:03:08,710
there's no
aging enabler yet uh xv6 sets up the

3398
01:03:08,710 --> 01:03:08,720
aging enabler yet uh xv6 sets up the
 

3399
01:03:08,720 --> 01:03:09,190
aging enabler yet uh xv6 sets up the
first

3400
01:03:09,190 --> 01:03:09,200
first
 

3401
01:03:09,200 --> 01:03:11,270
first
you know page page tables the first

3402
01:03:11,270 --> 01:03:11,280
you know page page tables the first
 

3403
01:03:11,280 --> 01:03:12,549
you know page page tables the first
virtual address space and that's

3404
01:03:12,549 --> 01:03:12,559
virtual address space and that's
 

3405
01:03:12,559 --> 01:03:13,589
virtual address space and that's
actually the virtual address space that

3406
01:03:13,589 --> 01:03:13,599
actually the virtual address space that
 

3407
01:03:13,599 --> 01:03:15,190
actually the virtual address space that
the kernel uses and we'll look at it in

3408
01:03:15,190 --> 01:03:15,200
the kernel uses and we'll look at it in
 

3409
01:03:15,200 --> 01:03:17,270
the kernel uses and we'll look at it in
a second at the code

3410
01:03:17,270 --> 01:03:17,280
a second at the code
 

3411
01:03:17,280 --> 01:03:19,589
a second at the code
but uh and this is the layout and it

3412
01:03:19,589 --> 01:03:19,599
but uh and this is the layout and it
 

3413
01:03:19,599 --> 01:03:20,549
but uh and this is the layout and it
turns out

3414
01:03:20,549 --> 01:03:20,559
turns out
 

3415
01:03:20,559 --> 01:03:22,950
turns out
uh you know because we want to keep xv6

3416
01:03:22,950 --> 01:03:22,960
uh you know because we want to keep xv6
 

3417
01:03:22,960 --> 01:03:24,309
uh you know because we want to keep xv6
as simple as possible it's

3418
01:03:24,309 --> 01:03:24,319
as simple as possible it's
 

3419
01:03:24,319 --> 01:03:26,789
as simple as possible it's
easy for you to understand the mapping

3420
01:03:26,789 --> 01:03:26,799
easy for you to understand the mapping
 

3421
01:03:26,799 --> 01:03:28,470
easy for you to understand the mapping
from virtual

3422
01:03:28,470 --> 01:03:28,480
from virtual
 

3423
01:03:28,480 --> 01:03:31,910
from virtual
to physical is mostly in identity

3424
01:03:31,910 --> 01:03:31,920
to physical is mostly in identity
 

3425
01:03:31,920 --> 01:03:37,990
to physical is mostly in identity
mapping

3426
01:03:37,990 --> 01:03:38,000

 

3427
01:03:38,000 --> 01:03:40,470

so basically what that means is that the

3428
01:03:40,470 --> 01:03:40,480
so basically what that means is that the
 

3429
01:03:40,480 --> 01:03:43,270
so basically what that means is that the
virtual address ox200

3430
01:03:43,270 --> 01:03:43,280
virtual address ox200
 

3431
01:03:43,280 --> 01:03:46,470
virtual address ox200
maps to physical address ox2000

3432
01:03:46,470 --> 01:03:46,480
maps to physical address ox2000
 

3433
01:03:46,480 --> 01:03:48,390
maps to physical address ox2000
the kernel will set up the page tables

3434
01:03:48,390 --> 01:03:48,400
the kernel will set up the page tables
 

3435
01:03:48,400 --> 01:03:49,829
the kernel will set up the page tables
exactly in that way

3436
01:03:49,829 --> 01:03:49,839
exactly in that way
 

3437
01:03:49,839 --> 01:03:51,670
exactly in that way
and so that means basically that you

3438
01:03:51,670 --> 01:03:51,680
and so that means basically that you
 

3439
01:03:51,680 --> 01:03:53,270
and so that means basically that you
know for all virtual addresses

3440
01:03:53,270 --> 01:03:53,280
know for all virtual addresses
 

3441
01:03:53,280 --> 01:03:56,630
know for all virtual addresses
below this top which is the top of

3442
01:03:56,630 --> 01:03:56,640
below this top which is the top of
 

3443
01:03:56,640 --> 01:03:57,829
below this top which is the top of
physical memory

3444
01:03:57,829 --> 01:03:57,839
physical memory
 

3445
01:03:57,839 --> 01:03:59,829
physical memory
are identical to the physical addresses

3446
01:03:59,829 --> 01:03:59,839
are identical to the physical addresses
 

3447
01:03:59,839 --> 01:04:01,109
are identical to the physical addresses
that are actually being used

3448
01:04:01,109 --> 01:04:01,119
that are actually being used
 

3449
01:04:01,119 --> 01:04:03,750
that are actually being used
uh on the right side and so this is like

3450
01:04:03,750 --> 01:04:03,760
uh on the right side and so this is like
 

3451
01:04:03,760 --> 01:04:05,430
uh on the right side and so this is like
why all the arrows are straight

3452
01:04:05,430 --> 01:04:05,440
why all the arrows are straight
 

3453
01:04:05,440 --> 01:04:09,270
why all the arrows are straight
because it's you know identity mapping

3454
01:04:09,270 --> 01:04:09,280

 

3455
01:04:09,280 --> 01:04:13,430

okay there's a small changes to this

3456
01:04:13,430 --> 01:04:13,440
okay there's a small changes to this
 

3457
01:04:13,440 --> 01:04:16,150
okay there's a small changes to this
uh uh the two important things to

3458
01:04:16,150 --> 01:04:16,160
uh uh the two important things to
 

3459
01:04:16,160 --> 01:04:17,589
uh uh the two important things to
mention

3460
01:04:17,589 --> 01:04:17,599
mention
 

3461
01:04:17,599 --> 01:04:20,470
mention
uh let me hold one second uh while i try

3462
01:04:20,470 --> 01:04:20,480
uh let me hold one second uh while i try
 

3463
01:04:20,480 --> 01:04:20,950
uh let me hold one second uh while i try
to

3464
01:04:20,950 --> 01:04:20,960
to
 

3465
01:04:20,960 --> 01:04:22,230
to
first mention the two important things

3466
01:04:22,230 --> 01:04:22,240
first mention the two important things
 

3467
01:04:22,240 --> 01:04:24,230
first mention the two important things
to mention um

3468
01:04:24,230 --> 01:04:24,240
to mention um
 

3469
01:04:24,240 --> 01:04:27,270
to mention um
first of all there's some pages some map

3470
01:04:27,270 --> 01:04:27,280
first of all there's some pages some map
 

3471
01:04:27,280 --> 01:04:33,349
first of all there's some pages some map
is very high up in memory

3472
01:04:33,349 --> 01:04:33,359

 

3473
01:04:33,359 --> 01:04:35,349

some pages very high up in memory uh for

3474
01:04:35,349 --> 01:04:35,359
some pages very high up in memory uh for
 

3475
01:04:35,359 --> 01:04:36,390
some pages very high up in memory uh for
example

3476
01:04:36,390 --> 01:04:36,400
example
 

3477
01:04:36,400 --> 01:04:39,589
example
the stack uh the kernel stack actually

3478
01:04:39,589 --> 01:04:39,599
the stack uh the kernel stack actually
 

3479
01:04:39,599 --> 01:04:40,230
the stack uh the kernel stack actually
sits up

3480
01:04:40,230 --> 01:04:40,240
sits up
 

3481
01:04:40,240 --> 01:04:42,710
sits up
it's also mapped high up in memory and

3482
01:04:42,710 --> 01:04:42,720
it's also mapped high up in memory and
 

3483
01:04:42,720 --> 01:04:44,309
it's also mapped high up in memory and
the reason it's high up in memory is

3484
01:04:44,309 --> 01:04:44,319
the reason it's high up in memory is
 

3485
01:04:44,319 --> 01:04:46,230
the reason it's high up in memory is
because we have a guard page below it

3486
01:04:46,230 --> 01:04:46,240
because we have a guard page below it
 

3487
01:04:46,240 --> 01:04:47,670
because we have a guard page below it
that is not mapped

3488
01:04:47,670 --> 01:04:47,680
that is not mapped
 

3489
01:04:47,680 --> 01:04:50,870
that is not mapped
so the pte entry below the kernel stack

3490
01:04:50,870 --> 01:04:50,880
so the pte entry below the kernel stack
 

3491
01:04:50,880 --> 01:04:52,390
so the pte entry below the kernel stack
of one of the kernel stacks

3492
01:04:52,390 --> 01:04:52,400
of one of the kernel stacks
 

3493
01:04:52,400 --> 01:04:55,670
of one of the kernel stacks
does have not have uh it's valid bit set

3494
01:04:55,670 --> 01:04:55,680
does have not have uh it's valid bit set
 

3495
01:04:55,680 --> 01:04:58,549
does have not have uh it's valid bit set
and uh so if you know the kernel runs

3496
01:04:58,549 --> 01:04:58,559
and uh so if you know the kernel runs
 

3497
01:04:58,559 --> 01:04:59,670
and uh so if you know the kernel runs
off its stack

3498
01:04:59,670 --> 01:04:59,680
off its stack
 

3499
01:04:59,680 --> 01:05:02,069
off its stack
it will result in a page fault which is

3500
01:05:02,069 --> 01:05:02,079
it will result in a page fault which is
 

3501
01:05:02,079 --> 01:05:03,190
it will result in a page fault which is
better than basically

3502
01:05:03,190 --> 01:05:03,200
better than basically
 

3503
01:05:03,200 --> 01:05:04,549
better than basically
you know scribbling over some other

3504
01:05:04,549 --> 01:05:04,559
you know scribbling over some other
 

3505
01:05:04,559 --> 01:05:06,390
you know scribbling over some other
memory that the kernel has you get an

3506
01:05:06,390 --> 01:05:06,400
memory that the kernel has you get an
 

3507
01:05:06,400 --> 01:05:07,589
memory that the kernel has you get an
immediate panic and you know that

3508
01:05:07,589 --> 01:05:07,599
immediate panic and you know that
 

3509
01:05:07,599 --> 01:05:08,309
immediate panic and you know that
something's bad

3510
01:05:08,309 --> 01:05:08,319
something's bad
 

3511
01:05:08,319 --> 01:05:11,589
something's bad
to stack um of course we don't want to

3512
01:05:11,589 --> 01:05:11,599
to stack um of course we don't want to
 

3513
01:05:11,599 --> 01:05:13,029
to stack um of course we don't want to
waste physical memory

3514
01:05:13,029 --> 01:05:13,039
waste physical memory
 

3515
01:05:13,039 --> 01:05:15,270
waste physical memory
and so when we do that by basically uh

3516
01:05:15,270 --> 01:05:15,280
and so when we do that by basically uh
 

3517
01:05:15,280 --> 01:05:16,950
and so when we do that by basically uh
putting the stack high

3518
01:05:16,950 --> 01:05:16,960
putting the stack high
 

3519
01:05:16,960 --> 01:05:20,630
putting the stack high
uh in a guard page an empty guard

3520
01:05:20,630 --> 01:05:20,640
uh in a guard page an empty guard
 

3521
01:05:20,640 --> 01:05:23,910
uh in a guard page an empty guard
pte entry below it and the guard

3522
01:05:23,910 --> 01:05:23,920
pte entry below it and the guard
 

3523
01:05:23,920 --> 01:05:25,990
pte entry below it and the guard
page doesn't really consume any physical

3524
01:05:25,990 --> 01:05:26,000
page doesn't really consume any physical
 

3525
01:05:26,000 --> 01:05:27,510
page doesn't really consume any physical
memory like it's sitting high up in the

3526
01:05:27,510 --> 01:05:27,520
memory like it's sitting high up in the
 

3527
01:05:27,520 --> 01:05:29,190
memory like it's sitting high up in the
virtual address space so

3528
01:05:29,190 --> 01:05:29,200
virtual address space so
 

3529
01:05:29,200 --> 01:05:31,910
virtual address space so
nothing is being consumed but that means

3530
01:05:31,910 --> 01:05:31,920
nothing is being consumed but that means
 

3531
01:05:31,920 --> 01:05:33,430
nothing is being consumed but that means
that they're showing this k stack page

3532
01:05:33,430 --> 01:05:33,440
that they're showing this k stack page
 

3533
01:05:33,440 --> 01:05:35,270
that they're showing this k stack page
for example is mapped twice

3534
01:05:35,270 --> 01:05:35,280
for example is mapped twice
 

3535
01:05:35,280 --> 01:05:37,510
for example is mapped twice
it's mapped at a high address and it's

3536
01:05:37,510 --> 01:05:37,520
it's mapped at a high address and it's
 

3537
01:05:37,520 --> 01:05:38,549
it's mapped at a high address and it's
mapped directly

3538
01:05:38,549 --> 01:05:38,559
mapped directly
 

3539
01:05:38,559 --> 01:05:40,069
mapped directly
you know by one of the addresses that

3540
01:05:40,069 --> 01:05:40,079
you know by one of the addresses that
 

3541
01:05:40,079 --> 01:05:42,470
you know by one of the addresses that
below this top

3542
01:05:42,470 --> 01:05:42,480
below this top
 

3543
01:05:42,480 --> 01:05:44,950
below this top
and so you can do this is one example of

3544
01:05:44,950 --> 01:05:44,960
and so you can do this is one example of
 

3545
01:05:44,960 --> 01:05:45,990
and so you can do this is one example of
all the sort of

3546
01:05:45,990 --> 01:05:46,000
all the sort of
 

3547
01:05:46,000 --> 01:05:48,150
all the sort of
cool things you can do with page tables

3548
01:05:48,150 --> 01:05:48,160
cool things you can do with page tables
 

3549
01:05:48,160 --> 01:05:50,549
cool things you can do with page tables
you can map a physical address twice

3550
01:05:50,549 --> 01:05:50,559
you can map a physical address twice
 

3551
01:05:50,559 --> 01:05:53,430
you can map a physical address twice
you cannot map a physical address uh you

3552
01:05:53,430 --> 01:05:53,440
you cannot map a physical address uh you
 

3553
01:05:53,440 --> 01:05:54,789
you cannot map a physical address uh you
know it can be one-to-one mapping

3554
01:05:54,789 --> 01:05:54,799
know it can be one-to-one mapping
 

3555
01:05:54,799 --> 01:05:56,950
know it can be one-to-one mapping
one-to-many mapping many-to-one mapping

3556
01:05:56,950 --> 01:05:56,960
one-to-many mapping many-to-one mapping
 

3557
01:05:56,960 --> 01:05:59,670
one-to-many mapping many-to-one mapping
all that kind of stuff is possible xv6

3558
01:05:59,670 --> 01:05:59,680
all that kind of stuff is possible xv6
 

3559
01:05:59,680 --> 01:06:00,710
all that kind of stuff is possible xv6
doesn't really

3560
01:06:00,710 --> 01:06:00,720
doesn't really
 

3561
01:06:00,720 --> 01:06:02,150
doesn't really
use many of them but there's a couple

3562
01:06:02,150 --> 01:06:02,160
use many of them but there's a couple
 

3563
01:06:02,160 --> 01:06:04,470
use many of them but there's a couple
places we use those tricks and

3564
01:06:04,470 --> 01:06:04,480
places we use those tricks and
 

3565
01:06:04,480 --> 01:06:05,990
places we use those tricks and
the stack and the guard page is one

3566
01:06:05,990 --> 01:06:06,000
the stack and the guard page is one
 

3567
01:06:06,000 --> 01:06:07,829
the stack and the guard page is one
example of one of the cool trick that

3568
01:06:07,829 --> 01:06:07,839
example of one of the cool trick that
 

3569
01:06:07,839 --> 01:06:10,309
example of one of the cool trick that
you know xv6 uses mostly to track down

3570
01:06:10,309 --> 01:06:10,319
you know xv6 uses mostly to track down
 

3571
01:06:10,319 --> 01:06:12,710
you know xv6 uses mostly to track down
bugs

3572
01:06:12,710 --> 01:06:12,720
bugs
 

3573
01:06:12,720 --> 01:06:14,150
bugs
the second thing i wanted to mention is

3574
01:06:14,150 --> 01:06:14,160
the second thing i wanted to mention is
 

3575
01:06:14,160 --> 01:06:16,470
the second thing i wanted to mention is
that the permissions

3576
01:06:16,470 --> 01:06:16,480
that the permissions
 

3577
01:06:16,480 --> 01:06:18,870
that the permissions
so for example the kernel text the pages

3578
01:06:18,870 --> 01:06:18,880
so for example the kernel text the pages
 

3579
01:06:18,880 --> 01:06:20,309
so for example the kernel text the pages
for the kernel text are mapped

3580
01:06:20,309 --> 01:06:20,319
for the kernel text are mapped
 

3581
01:06:20,319 --> 01:06:22,870
for the kernel text are mapped
read nx meaning you can read it and

3582
01:06:22,870 --> 01:06:22,880
read nx meaning you can read it and
 

3583
01:06:22,880 --> 01:06:23,750
read nx meaning you can read it and
execute it

3584
01:06:23,750 --> 01:06:23,760
execute it
 

3585
01:06:23,760 --> 01:06:25,589
execute it
but you cannot write the kernel text and

3586
01:06:25,589 --> 01:06:25,599
but you cannot write the kernel text and
 

3587
01:06:25,599 --> 01:06:27,750
but you cannot write the kernel text and
again this is basically the void

3588
01:06:27,750 --> 01:06:27,760
again this is basically the void
 

3589
01:06:27,760 --> 01:06:29,829
again this is basically the void
box so that we catch them early kernel

3590
01:06:29,829 --> 01:06:29,839
box so that we catch them early kernel
 

3591
01:06:29,839 --> 01:06:31,510
box so that we catch them early kernel
data of course needs to be able to be

3592
01:06:31,510 --> 01:06:31,520
data of course needs to be able to be
 

3593
01:06:31,520 --> 01:06:32,150
data of course needs to be able to be
written to

3594
01:06:32,150 --> 01:06:32,160
written to
 

3595
01:06:32,160 --> 01:06:34,630
written to
and so it has is mapped read write but

3596
01:06:34,630 --> 01:06:34,640
and so it has is mapped read write but
 

3597
01:06:34,640 --> 01:06:36,789
and so it has is mapped read write but
you cannot execute

3598
01:06:36,789 --> 01:06:36,799
you cannot execute
 

3599
01:06:36,799 --> 01:06:41,029
you cannot execute
out of kernel data pages instructions

3600
01:06:41,029 --> 01:06:41,039
out of kernel data pages instructions
 

3601
01:06:41,039 --> 01:06:45,990
out of kernel data pages instructions
so the xbit is not set

3602
01:06:45,990 --> 01:06:46,000
so the xbit is not set
 

3603
01:06:46,000 --> 01:06:49,430
so the xbit is not set
it all make sense uh i skipped one or

3604
01:06:49,430 --> 01:06:49,440
it all make sense uh i skipped one or
 

3605
01:06:49,440 --> 01:06:50,470
it all make sense uh i skipped one or
two questions so if

3606
01:06:50,470 --> 01:06:50,480
two questions so if
 

3607
01:06:50,480 --> 01:06:51,750
two questions so if
these questions are still not answered

3608
01:06:51,750 --> 01:06:51,760
these questions are still not answered
 

3609
01:06:51,760 --> 01:06:55,670
these questions are still not answered
you know please ask them

3610
01:06:55,670 --> 01:06:55,680

 

3611
01:06:55,680 --> 01:06:58,789

we have a question in the chat um do we

3612
01:06:58,789 --> 01:06:58,799
we have a question in the chat um do we
 

3613
01:06:58,799 --> 01:06:59,510
we have a question in the chat um do we
have multiple

3614
01:06:59,510 --> 01:06:59,520
have multiple
 

3615
01:06:59,520 --> 01:07:01,349
have multiple
kernel stacks for different processes

3616
01:07:01,349 --> 01:07:01,359
kernel stacks for different processes
 

3617
01:07:01,359 --> 01:07:02,549
kernel stacks for different processes
like will we have n

3618
01:07:02,549 --> 01:07:02,559
like will we have n
 

3619
01:07:02,559 --> 01:07:06,789
like will we have n
k stacks for n processes answers yes

3620
01:07:06,789 --> 01:07:06,799
k stacks for n processes answers yes
 

3621
01:07:06,799 --> 01:07:08,950
k stacks for n processes answers yes
so every process every user process has

3622
01:07:08,950 --> 01:07:08,960
so every process every user process has
 

3623
01:07:08,960 --> 01:07:13,029
so every process every user process has
a corresponding kernel stack

3624
01:07:13,029 --> 01:07:13,039

 

3625
01:07:13,039 --> 01:07:17,270

and we'll see that in a little bit later

3626
01:07:17,270 --> 01:07:17,280

 

3627
01:07:17,280 --> 01:07:20,630

okay okay so let me uh

3628
01:07:20,630 --> 01:07:20,640
okay okay so let me uh
 

3629
01:07:20,640 --> 01:07:23,990
okay okay so let me uh
uh samir go ahead um

3630
01:07:23,990 --> 01:07:24,000
uh samir go ahead um
 

3631
01:07:24,000 --> 01:07:27,109
uh samir go ahead um
so what the virtual memory of another

3632
01:07:27,109 --> 01:07:27,119
so what the virtual memory of another
 

3633
01:07:27,119 --> 01:07:29,670
so what the virtual memory of another
application mapped to somewhere in the

3634
01:07:29,670 --> 01:07:29,680
application mapped to somewhere in the
 

3635
01:07:29,680 --> 01:07:31,589
application mapped to somewhere in the
physical memory in the unused space

3636
01:07:31,589 --> 01:07:31,599
physical memory in the unused space
 

3637
01:07:31,599 --> 01:07:35,270
physical memory in the unused space
or yes uh very good point so there's

3638
01:07:35,270 --> 01:07:35,280
or yes uh very good point so there's
 

3639
01:07:35,280 --> 01:07:37,430
or yes uh very good point so there's
a bunch of physical memory correct

3640
01:07:37,430 --> 01:07:37,440
a bunch of physical memory correct
 

3641
01:07:37,440 --> 01:07:39,349
a bunch of physical memory correct
here's free memory

3642
01:07:39,349 --> 01:07:39,359
here's free memory
 

3643
01:07:39,359 --> 01:07:42,549
here's free memory
uh and that's free memory year two right

3644
01:07:42,549 --> 01:07:42,559
uh and that's free memory year two right
 

3645
01:07:42,559 --> 01:07:45,270
uh and that's free memory year two right
uh and uh we use that or xpc it uses

3646
01:07:45,270 --> 01:07:45,280
uh and uh we use that or xpc it uses
 

3647
01:07:45,280 --> 01:07:47,029
uh and uh we use that or xpc it uses
that free memory to basically store

3648
01:07:47,029 --> 01:07:47,039
that free memory to basically store
 

3649
01:07:47,039 --> 01:07:50,230
that free memory to basically store
pages of page tables of user processes

3650
01:07:50,230 --> 01:07:50,240
pages of page tables of user processes
 

3651
01:07:50,240 --> 01:07:53,270
pages of page tables of user processes
as well as you know the text and data of

3652
01:07:53,270 --> 01:07:53,280
as well as you know the text and data of
 

3653
01:07:53,280 --> 01:07:56,630
as well as you know the text and data of
user level processes and if we run many

3654
01:07:56,630 --> 01:07:56,640
user level processes and if we run many
 

3655
01:07:56,640 --> 01:07:58,150
user level processes and if we run many
many many usual level processes at some

3656
01:07:58,150 --> 01:07:58,160
many many usual level processes at some
 

3657
01:07:58,160 --> 01:07:59,589
many many usual level processes at some
point we'll run out of free memory

3658
01:07:59,589 --> 01:07:59,599
point we'll run out of free memory
 

3659
01:07:59,599 --> 01:08:01,589
point we'll run out of free memory
and then basically fork or exact will

3660
01:08:01,589 --> 01:08:01,599
and then basically fork or exact will
 

3661
01:08:01,599 --> 01:08:04,870
and then basically fork or exact will
return an error

3662
01:08:04,870 --> 01:08:04,880
return an error
 

3663
01:08:04,880 --> 01:08:06,710
return an error
but that means that the virtual space

3664
01:08:06,710 --> 01:08:06,720
but that means that the virtual space
 

3665
01:08:06,720 --> 01:08:09,349
but that means that the virtual space
for processes are much smaller than the

3666
01:08:09,349 --> 01:08:09,359
for processes are much smaller than the
 

3667
01:08:09,359 --> 01:08:10,870
for processes are much smaller than the
virtual space for

3668
01:08:10,870 --> 01:08:10,880
virtual space for
 

3669
01:08:10,880 --> 01:08:13,349
virtual space for
the kernel right well the virtual stages

3670
01:08:13,349 --> 01:08:13,359
the kernel right well the virtual stages
 

3671
01:08:13,359 --> 01:08:14,630
the kernel right well the virtual stages
is the same

3672
01:08:14,630 --> 01:08:14,640
is the same
 

3673
01:08:14,640 --> 01:08:17,030
is the same
as the same you know size in principle

3674
01:08:17,030 --> 01:08:17,040
as the same you know size in principle
 

3675
01:08:17,040 --> 01:08:22,709
as the same you know size in principle
but it will be less populated

3676
01:08:22,709 --> 01:08:22,719

 

3677
01:08:22,719 --> 01:08:24,470

let me uh let's let's look at some code

3678
01:08:24,470 --> 01:08:24,480
let me uh let's let's look at some code
 

3679
01:08:24,480 --> 01:08:25,590
let me uh let's let's look at some code
and i think that all the stuff becomes a

3680
01:08:25,590 --> 01:08:25,600
and i think that all the stuff becomes a
 

3681
01:08:25,600 --> 01:08:27,990
and i think that all the stuff becomes a
little bit more clear

3682
01:08:27,990 --> 01:08:28,000
little bit more clear
 

3683
01:08:28,000 --> 01:08:31,510
little bit more clear
uh just one small thing um is so given

3684
01:08:31,510 --> 01:08:31,520
uh just one small thing um is so given
 

3685
01:08:31,520 --> 01:08:32,070
uh just one small thing um is so given
that

3686
01:08:32,070 --> 01:08:32,080
that
 

3687
01:08:32,080 --> 01:08:34,950
that
um a lot of the like each process has a

3688
01:08:34,950 --> 01:08:34,960
um a lot of the like each process has a
 

3689
01:08:34,960 --> 01:08:37,269
um a lot of the like each process has a
big part of the memory mapped the same

3690
01:08:37,269 --> 01:08:37,279
big part of the memory mapped the same
 

3691
01:08:37,279 --> 01:08:38,309
big part of the memory mapped the same
location

3692
01:08:38,309 --> 01:08:38,319
location
 

3693
01:08:38,319 --> 01:08:41,269
location
is that optimized by like consolidating

3694
01:08:41,269 --> 01:08:41,279
is that optimized by like consolidating
 

3695
01:08:41,279 --> 01:08:41,590
is that optimized by like consolidating
in

3696
01:08:41,590 --> 01:08:41,600
in
 

3697
01:08:41,600 --> 01:08:44,470
in
that into one place that mapping or no

3698
01:08:44,470 --> 01:08:44,480
that into one place that mapping or no
 

3699
01:08:44,480 --> 01:08:44,789
that into one place that mapping or no
because

3700
01:08:44,789 --> 01:08:44,799
because
 

3701
01:08:44,799 --> 01:08:47,829
because
you could uh xp6 does not do that uh

3702
01:08:47,829 --> 01:08:47,839
you could uh xp6 does not do that uh
 

3703
01:08:47,839 --> 01:08:49,669
you could uh xp6 does not do that uh
but like one of the challenge exercises

3704
01:08:49,669 --> 01:08:49,679
but like one of the challenge exercises
 

3705
01:08:49,679 --> 01:08:51,669
but like one of the challenge exercises
in the page table app is to actually

3706
01:08:51,669 --> 01:08:51,679
in the page table app is to actually
 

3707
01:08:51,679 --> 01:08:52,070
in the page table app is to actually
implement

3708
01:08:52,070 --> 01:08:52,080
implement
 

3709
01:08:52,080 --> 01:08:55,749
implement
that let's see and the real operating

3710
01:08:55,749 --> 01:08:55,759
that let's see and the real operating
 

3711
01:08:55,759 --> 01:08:58,630
that let's see and the real operating
system would do that

3712
01:08:58,630 --> 01:08:58,640

 

3713
01:08:58,640 --> 01:09:02,149

yeah that makes sense very good question

3714
01:09:02,149 --> 01:09:02,159
yeah that makes sense very good question
 

3715
01:09:02,159 --> 01:09:03,590
yeah that makes sense very good question
and i think you get a sense of like what

3716
01:09:03,590 --> 01:09:03,600
and i think you get a sense of like what
 

3717
01:09:03,600 --> 01:09:04,870
and i think you get a sense of like what
all kinds of things are possible once

3718
01:09:04,870 --> 01:09:04,880
all kinds of things are possible once
 

3719
01:09:04,880 --> 01:09:08,789
all kinds of things are possible once
you have page tables

3720
01:09:08,789 --> 01:09:08,799

 

3721
01:09:08,799 --> 01:09:12,709

okay so let's do the usual thing

3722
01:09:12,709 --> 01:09:12,719
okay so let's do the usual thing
 

3723
01:09:12,719 --> 01:09:15,510
okay so let's do the usual thing
boot our xv6 again and again you know

3724
01:09:15,510 --> 01:09:15,520
boot our xv6 again and again you know
 

3725
01:09:15,520 --> 01:09:16,950
boot our xv6 again and again you know
qmu is just basically implementing the

3726
01:09:16,950 --> 01:09:16,960
qmu is just basically implementing the
 

3727
01:09:16,960 --> 01:09:19,349
qmu is just basically implementing the
board

3728
01:09:19,349 --> 01:09:19,359

 

3729
01:09:19,359 --> 01:09:27,139

and you know let's oops

3730
01:09:27,139 --> 01:09:27,149

 

3731
01:09:27,149 --> 01:09:29,749

[Music]

3732
01:09:29,749 --> 01:09:29,759
[Music]
 

3733
01:09:29,759 --> 01:09:32,630
[Music]
so last time we looked at uh how the

3734
01:09:32,630 --> 01:09:32,640
so last time we looked at uh how the
 

3735
01:09:32,640 --> 01:09:34,149
so last time we looked at uh how the
booting happens correct and then we got

3736
01:09:34,149 --> 01:09:34,159
booting happens correct and then we got
 

3737
01:09:34,159 --> 01:09:35,590
booting happens correct and then we got
to main and then basically one of the

3738
01:09:35,590 --> 01:09:35,600
to main and then basically one of the
 

3739
01:09:35,600 --> 01:09:36,229
to main and then basically one of the
things that

3740
01:09:36,229 --> 01:09:36,239
things that
 

3741
01:09:36,239 --> 01:09:39,990
things that
uh uh the kernel uh when

3742
01:09:39,990 --> 01:09:40,000
uh uh the kernel uh when
 

3743
01:09:40,000 --> 01:09:41,269
uh uh the kernel uh when
one of the functions is called called

3744
01:09:41,269 --> 01:09:41,279
one of the functions is called called
 

3745
01:09:41,279 --> 01:09:43,030
one of the functions is called called
kva minute and that actually sets up the

3746
01:09:43,030 --> 01:09:43,040
kva minute and that actually sets up the
 

3747
01:09:43,040 --> 01:09:43,829
kva minute and that actually sets up the
address space

3748
01:09:43,829 --> 01:09:43,839
address space
 

3749
01:09:43,839 --> 01:09:46,229
address space
for the kernel and so we saw in the

3750
01:09:46,229 --> 01:09:46,239
for the kernel and so we saw in the
 

3751
01:09:46,239 --> 01:09:47,829
for the kernel and so we saw in the
picture or in the previous slide what

3752
01:09:47,829 --> 01:09:47,839
picture or in the previous slide what
 

3753
01:09:47,839 --> 01:09:48,149
picture or in the previous slide what
that

3754
01:09:48,149 --> 01:09:48,159
that
 

3755
01:09:48,159 --> 01:09:50,470
that
you know looks like and here we can see

3756
01:09:50,470 --> 01:09:50,480
you know looks like and here we can see
 

3757
01:09:50,480 --> 01:09:52,149
you know looks like and here we can see
seeing code how it actually is being set

3758
01:09:52,149 --> 01:09:52,159
seeing code how it actually is being set
 

3759
01:09:52,159 --> 01:09:54,390
seeing code how it actually is being set
up

3760
01:09:54,390 --> 01:09:54,400

 

3761
01:09:54,400 --> 01:09:58,390

uh

3762
01:09:58,390 --> 01:09:58,400

 

3763
01:09:58,400 --> 01:10:02,390

and why hold on something is not going

3764
01:10:02,390 --> 01:10:02,400
and why hold on something is not going
 

3765
01:10:02,400 --> 01:10:05,830
and why hold on something is not going
as i wanted to am i in the right

3766
01:10:05,830 --> 01:10:05,840
as i wanted to am i in the right
 

3767
01:10:05,840 --> 01:10:10,950
as i wanted to am i in the right
directories

3768
01:10:10,950 --> 01:10:10,960

 

3769
01:10:10,960 --> 01:10:12,709

hold on a second here while i'm trying

3770
01:10:12,709 --> 01:10:12,719
hold on a second here while i'm trying
 

3771
01:10:12,719 --> 01:10:16,550
hold on a second here while i'm trying
to sort out my problems

3772
01:10:16,550 --> 01:10:16,560
to sort out my problems
 

3773
01:10:16,560 --> 01:10:21,350
to sort out my problems
that is good

3774
01:10:21,350 --> 01:10:21,360

 

3775
01:10:21,360 --> 01:10:24,470

and in the right directories yeah

3776
01:10:24,470 --> 01:10:24,480
and in the right directories yeah
 

3777
01:10:24,480 --> 01:10:27,910
and in the right directories yeah
okay gdp

3778
01:10:27,910 --> 01:10:27,920
okay gdp
 

3779
01:10:27,920 --> 01:10:29,350
okay gdp
and let's have a break from the main

3780
01:10:29,350 --> 01:10:29,360
and let's have a break from the main
 

3781
01:10:29,360 --> 01:10:31,030
and let's have a break from the main
just to make sure

3782
01:10:31,030 --> 01:10:31,040
just to make sure
 

3783
01:10:31,040 --> 01:10:35,030
just to make sure
good and then i set a breakpoint at kvm

3784
01:10:35,030 --> 01:10:35,040
good and then i set a breakpoint at kvm
 

3785
01:10:35,040 --> 01:10:37,350
good and then i set a breakpoint at kvm
in it actually i can just stack to it

3786
01:10:37,350 --> 01:10:37,360
in it actually i can just stack to it
 

3787
01:10:37,360 --> 01:10:38,709
in it actually i can just stack to it
now

3788
01:10:38,709 --> 01:10:38,719
now
 

3789
01:10:38,719 --> 01:10:41,189
now
next console in it greendev in it you

3790
01:10:41,189 --> 01:10:41,199
next console in it greendev in it you
 

3791
01:10:41,199 --> 01:10:43,270
next console in it greendev in it you
know we shot it before

3792
01:10:43,270 --> 01:10:43,280
know we shot it before
 

3793
01:10:43,280 --> 01:10:47,030
know we shot it before
uh physical memory allocator

3794
01:10:47,030 --> 01:10:47,040

 

3795
01:10:47,040 --> 01:10:51,030

and

3796
01:10:51,030 --> 01:10:51,040

 

3797
01:10:51,040 --> 01:10:52,870

now something happens that i'm not

3798
01:10:52,870 --> 01:10:52,880
now something happens that i'm not
 

3799
01:10:52,880 --> 01:10:55,560
now something happens that i'm not
expecting

3800
01:10:55,560 --> 01:10:55,570

 

3801
01:10:55,570 --> 01:10:57,590

[Music]

3802
01:10:57,590 --> 01:10:57,600
[Music]
 

3803
01:10:57,600 --> 01:11:02,470
[Music]
what is going on

3804
01:11:02,470 --> 01:11:02,480

 

3805
01:11:02,480 --> 01:11:03,910

we're gonna run this right before

3806
01:11:03,910 --> 01:11:03,920
we're gonna run this right before
 

3807
01:11:03,920 --> 01:11:05,510
we're gonna run this right before
lecture ah here that's what's going on

3808
01:11:05,510 --> 01:11:05,520
lecture ah here that's what's going on
 

3809
01:11:05,520 --> 01:11:06,709
lecture ah here that's what's going on
that actually is printing

3810
01:11:06,709 --> 01:11:06,719
that actually is printing
 

3811
01:11:06,719 --> 01:11:10,229
that actually is printing
uh okay um

3812
01:11:10,229 --> 01:11:10,239
uh okay um
 

3813
01:11:10,239 --> 01:11:12,550
uh okay um
huh interesting okay one more time see

3814
01:11:12,550 --> 01:11:12,560
huh interesting okay one more time see
 

3815
01:11:12,560 --> 01:11:14,310
huh interesting okay one more time see
if i can get

3816
01:11:14,310 --> 01:11:14,320
if i can get
 

3817
01:11:14,320 --> 01:11:28,870
if i can get
lucky more looks

3818
01:11:28,870 --> 01:11:28,880

 

3819
01:11:28,880 --> 01:11:32,709

continue and hopefully it will get there

3820
01:11:32,709 --> 01:11:32,719
continue and hopefully it will get there
 

3821
01:11:32,719 --> 01:11:33,830
continue and hopefully it will get there
it's going to wait a little bit okay

3822
01:11:33,830 --> 01:11:33,840
it's going to wait a little bit okay
 

3823
01:11:33,840 --> 01:11:35,750
it's going to wait a little bit okay
great we're at the kvm unit

3824
01:11:35,750 --> 01:11:35,760
great we're at the kvm unit
 

3825
01:11:35,760 --> 01:11:37,350
great we're at the kvm unit
so basically we're now at this function

3826
01:11:37,350 --> 01:11:37,360
so basically we're now at this function
 

3827
01:11:37,360 --> 01:11:39,590
so basically we're now at this function
here on the right side in the emacs

3828
01:11:39,590 --> 01:11:39,600
here on the right side in the emacs
 

3829
01:11:39,600 --> 01:11:39,990
here on the right side in the emacs
buffer

3830
01:11:39,990 --> 01:11:40,000
buffer
 

3831
01:11:40,000 --> 01:11:45,030
buffer
you can see it and

3832
01:11:45,030 --> 01:11:45,040

 

3833
01:11:45,040 --> 01:11:47,669

i think i modified the function slightly

3834
01:11:47,669 --> 01:11:47,679
i think i modified the function slightly
 

3835
01:11:47,679 --> 01:11:53,110
i think i modified the function slightly
i hope i did

3836
01:11:53,110 --> 01:11:53,120

 

3837
01:11:53,120 --> 01:11:56,390

i think i did well we'll see um and what

3838
01:11:56,390 --> 01:11:56,400
i think i did well we'll see um and what
 

3839
01:11:56,400 --> 01:11:57,030
i think i did well we'll see um and what
we're going to do is

3840
01:11:57,030 --> 01:11:57,040
we're going to do is
 

3841
01:11:57,040 --> 01:11:58,709
we're going to do is
again we're going to walk step into that

3842
01:11:58,709 --> 01:11:58,719
again we're going to walk step into that
 

3843
01:11:58,719 --> 01:12:00,149
again we're going to walk step into that
function

3844
01:12:00,149 --> 01:12:00,159
function
 

3845
01:12:00,159 --> 01:12:02,149
function
uh it'll give me the layout split it's

3846
01:12:02,149 --> 01:12:02,159
uh it'll give me the layout split it's
 

3847
01:12:02,159 --> 01:12:03,590
uh it'll give me the layout split it's
easier to see

3848
01:12:03,590 --> 01:12:03,600
easier to see
 

3849
01:12:03,600 --> 01:12:04,870
easier to see
and that's the first thing that you can

3850
01:12:04,870 --> 01:12:04,880
and that's the first thing that you can
 

3851
01:12:04,880 --> 01:12:06,149
and that's the first thing that you can
see is actually the kernel actually

3852
01:12:06,149 --> 01:12:06,159
see is actually the kernel actually
 

3853
01:12:06,159 --> 01:12:08,070
see is actually the kernel actually
allocates a physical page for the top

3854
01:12:08,070 --> 01:12:08,080
allocates a physical page for the top
 

3855
01:12:08,080 --> 01:12:10,149
allocates a physical page for the top
level page directory

3856
01:12:10,149 --> 01:12:10,159
level page directory
 

3857
01:12:10,159 --> 01:12:13,189
level page directory
and then it zeros it out so that all the

3858
01:12:13,189 --> 01:12:13,199
and then it zeros it out so that all the
 

3859
01:12:13,199 --> 01:12:15,270
and then it zeros it out so that all the
pte entries are zero

3860
01:12:15,270 --> 01:12:15,280
pte entries are zero
 

3861
01:12:15,280 --> 01:12:17,510
pte entries are zero
and then basically it starts mapping in

3862
01:12:17,510 --> 01:12:17,520
and then basically it starts mapping in
 

3863
01:12:17,520 --> 01:12:18,950
and then basically it starts mapping in
every

3864
01:12:18,950 --> 01:12:18,960
every
 

3865
01:12:18,960 --> 01:12:22,149
every
device i o device one by one and so for

3866
01:12:22,149 --> 01:12:22,159
device i o device one by one and so for
 

3867
01:12:22,159 --> 01:12:23,750
device i o device one by one and so for
example the uart0

3868
01:12:23,750 --> 01:12:23,760
example the uart0
 

3869
01:12:23,760 --> 01:12:25,350
example the uart0
it basically starts mapping and maps

3870
01:12:25,350 --> 01:12:25,360
it basically starts mapping and maps
 

3871
01:12:25,360 --> 01:12:27,189
it basically starts mapping and maps
that into the kernel

3872
01:12:27,189 --> 01:12:27,199
that into the kernel
 

3873
01:12:27,199 --> 01:12:29,510
that into the kernel
address space and so we can look at a

3874
01:12:29,510 --> 01:12:29,520
address space and so we can look at a
 

3875
01:12:29,520 --> 01:12:31,189
address space and so we can look at a
file called mem layout

3876
01:12:31,189 --> 01:12:31,199
file called mem layout
 

3877
01:12:31,199 --> 01:12:34,070
file called mem layout
this basically translates a page 31 that

3878
01:12:34,070 --> 01:12:34,080
this basically translates a page 31 that
 

3879
01:12:34,080 --> 01:12:35,830
this basically translates a page 31 that
i showed you from the document into a

3880
01:12:35,830 --> 01:12:35,840
i showed you from the document into a
 

3881
01:12:35,840 --> 01:12:37,910
i showed you from the document into a
bunch of constants that we're using

3882
01:12:37,910 --> 01:12:37,920
bunch of constants that we're using
 

3883
01:12:37,920 --> 01:12:39,510
bunch of constants that we're using
and so for example here it says what the

3884
01:12:39,510 --> 01:12:39,520
and so for example here it says what the
 

3885
01:12:39,520 --> 01:12:44,070
and so for example here it says what the
address of you ox1000 is

3886
01:12:44,070 --> 01:12:44,080
address of you ox1000 is
 

3887
01:12:44,080 --> 01:12:47,910
address of you ox1000 is
uh over the year it is and so

3888
01:12:47,910 --> 01:12:47,920
uh over the year it is and so
 

3889
01:12:47,920 --> 01:12:50,950
uh over the year it is and so
uh you know we can basically uh map it

3890
01:12:50,950 --> 01:12:50,960
uh you know we can basically uh map it
 

3891
01:12:50,960 --> 01:12:52,790
uh you know we can basically uh map it
into the address space by calling this

3892
01:12:52,790 --> 01:12:52,800
into the address space by calling this
 

3893
01:12:52,800 --> 01:12:54,790
into the address space by calling this
function kvmf which i will look in in a

3894
01:12:54,790 --> 01:12:54,800
function kvmf which i will look in in a
 

3895
01:12:54,800 --> 01:12:55,990
function kvmf which i will look in in a
second

3896
01:12:55,990 --> 01:12:56,000
second
 

3897
01:12:56,000 --> 01:13:00,229
second
and then in the first exercise of

3898
01:13:00,229 --> 01:13:00,239
and then in the first exercise of
 

3899
01:13:00,239 --> 01:13:02,229
and then in the first exercise of
the page table app you are asked to

3900
01:13:02,229 --> 01:13:02,239
the page table app you are asked to
 

3901
01:13:02,239 --> 01:13:04,550
the page table app you are asked to
implement a function called vm print

3902
01:13:04,550 --> 01:13:04,560
implement a function called vm print
 

3903
01:13:04,560 --> 01:13:07,110
implement a function called vm print
and i implemented it too and we're going

3904
01:13:07,110 --> 01:13:07,120
and i implemented it too and we're going
 

3905
01:13:07,120 --> 01:13:08,550
and i implemented it too and we're going
to step over it and we'll see

3906
01:13:08,550 --> 01:13:08,560
to step over it and we'll see
 

3907
01:13:08,560 --> 01:13:11,910
to step over it and we'll see
basically uh the page tables

3908
01:13:11,910 --> 01:13:11,920
basically uh the page tables
 

3909
01:13:11,920 --> 01:13:14,310
basically uh the page tables
uh the kernel page table as it is set up

3910
01:13:14,310 --> 01:13:14,320
uh the kernel page table as it is set up
 

3911
01:13:14,320 --> 01:13:16,950
uh the kernel page table as it is set up
after that one call to tpm map so i'm

3912
01:13:16,950 --> 01:13:16,960
after that one call to tpm map so i'm
 

3913
01:13:16,960 --> 01:13:18,070
after that one call to tpm map so i'm
going to do that

3914
01:13:18,070 --> 01:13:18,080
going to do that
 

3915
01:13:18,080 --> 01:13:20,229
going to do that
and boom and it prints out something and

3916
01:13:20,229 --> 01:13:20,239
and boom and it prints out something and
 

3917
01:13:20,239 --> 01:13:21,189
and boom and it prints out something and
so we're going to look at a little bit

3918
01:13:21,189 --> 01:13:21,199
so we're going to look at a little bit
 

3919
01:13:21,199 --> 01:13:22,870
so we're going to look at a little bit
of the output here so here's the page

3920
01:13:22,870 --> 01:13:22,880
of the output here so here's the page
 

3921
01:13:22,880 --> 01:13:24,790
of the output here so here's the page
table that is the

3922
01:13:24,790 --> 01:13:24,800
table that is the
 

3923
01:13:24,800 --> 01:13:28,070
table that is the
physical address of the top level

3924
01:13:28,070 --> 01:13:28,080
physical address of the top level
 

3925
01:13:28,080 --> 01:13:30,709
physical address of the top level
uh page directory so the thing that

3926
01:13:30,709 --> 01:13:30,719
uh page directory so the thing that
 

3927
01:13:30,719 --> 01:13:31,990
uh page directory so the thing that
actually sits in satp

3928
01:13:31,990 --> 01:13:32,000
actually sits in satp
 

3929
01:13:32,000 --> 01:13:35,110
actually sits in satp
or will sit in satp and then

3930
01:13:35,110 --> 01:13:35,120
or will sit in satp and then
 

3931
01:13:35,120 --> 01:13:37,990
or will sit in satp and then
you know we have entry 0 of the top

3932
01:13:37,990 --> 01:13:38,000
you know we have entry 0 of the top
 

3933
01:13:38,000 --> 01:13:39,270
you know we have entry 0 of the top
level page directly has

3934
01:13:39,270 --> 01:13:39,280
level page directly has
 

3935
01:13:39,280 --> 01:13:43,189
level page directly has
one pte entry in it

3936
01:13:43,189 --> 01:13:43,199
one pte entry in it
 

3937
01:13:43,199 --> 01:13:45,590
one pte entry in it
and that is the contains the physical

3938
01:13:45,590 --> 01:13:45,600
and that is the contains the physical
 

3939
01:13:45,600 --> 01:13:47,430
and that is the contains the physical
address for the middle level page table

3940
01:13:47,430 --> 01:13:47,440
address for the middle level page table
 

3941
01:13:47,440 --> 01:13:48,470
address for the middle level page table
directory

3942
01:13:48,470 --> 01:13:48,480
directory
 

3943
01:13:48,480 --> 01:13:50,390
directory
the middle page table directory has one

3944
01:13:50,390 --> 01:13:50,400
the middle page table directory has one
 

3945
01:13:50,400 --> 01:13:52,790
the middle page table directory has one
entry namely 128

3946
01:13:52,790 --> 01:13:52,800
entry namely 128
 

3947
01:13:52,800 --> 01:13:54,550
entry namely 128
and that points to the bottom page table

3948
01:13:54,550 --> 01:13:54,560
and that points to the bottom page table
 

3949
01:13:54,560 --> 01:13:56,070
and that points to the bottom page table
directory and the bottom plane table

3950
01:13:56,070 --> 01:13:56,080
directory and the bottom plane table
 

3951
01:13:56,080 --> 01:13:57,910
directory and the bottom plane table
directory has the entry then for the

3952
01:13:57,910 --> 01:13:57,920
directory has the entry then for the
 

3953
01:13:57,920 --> 01:14:00,390
directory has the entry then for the
physical page and you can see indeed

3954
01:14:00,390 --> 01:14:00,400
physical page and you can see indeed
 

3955
01:14:00,400 --> 01:14:00,950
physical page and you can see indeed
that the

3956
01:14:00,950 --> 01:14:00,960
that the
 

3957
01:14:00,960 --> 01:14:02,870
that the
physical address you know for that the

3958
01:14:02,870 --> 01:14:02,880
physical address you know for that the
 

3959
01:14:02,880 --> 01:14:04,870
physical address you know for that the
bottom level is ox

3960
01:14:04,870 --> 01:14:04,880
bottom level is ox
 

3961
01:14:04,880 --> 01:14:08,870
bottom level is ox
1 0 0 0 corresponding to uh 0.

3962
01:14:08,870 --> 01:14:08,880
1 0 0 0 corresponding to uh 0.
 

3963
01:14:08,880 --> 01:14:12,709
1 0 0 0 corresponding to uh 0.
so basically virtual address 1 0 0 0

3964
01:14:12,709 --> 01:14:12,719
so basically virtual address 1 0 0 0
 

3965
01:14:12,719 --> 01:14:14,550
so basically virtual address 1 0 0 0
translates to physical address one one

3966
01:14:14,550 --> 01:14:14,560
translates to physical address one one
 

3967
01:14:14,560 --> 01:14:17,350
translates to physical address one one
one zero zero

3968
01:14:17,350 --> 01:14:17,360
one zero zero
 

3969
01:14:17,360 --> 01:14:18,630
one zero zero
and we can sort of double check that

3970
01:14:18,630 --> 01:14:18,640
and we can sort of double check that
 

3971
01:14:18,640 --> 01:14:20,950
and we can sort of double check that
this is uh indeed all legit

3972
01:14:20,950 --> 01:14:20,960
this is uh indeed all legit
 

3973
01:14:20,960 --> 01:14:26,630
this is uh indeed all legit
right by uh let's take that address

3974
01:14:26,630 --> 01:14:26,640

 

3975
01:14:26,640 --> 01:14:29,510

on that ox one zero zero l and we're

3976
01:14:29,510 --> 01:14:29,520
on that ox one zero zero l and we're
 

3977
01:14:29,520 --> 01:14:31,669
on that ox one zero zero l and we're
going to shift to 12.

3978
01:14:31,669 --> 01:14:31,679
going to shift to 12.
 

3979
01:14:31,679 --> 01:14:35,030
going to shift to 12.
um and that should be uh

3980
01:14:35,030 --> 01:14:35,040
um and that should be uh
 

3981
01:14:35,040 --> 01:14:37,430
um and that should be uh
you know that gives us the top level 27

3982
01:14:37,430 --> 01:14:37,440
you know that gives us the top level 27
 

3983
01:14:37,440 --> 01:14:38,950
you know that gives us the top level 27
27 bits

3984
01:14:38,950 --> 01:14:38,960
27 bits
 

3985
01:14:38,960 --> 01:14:41,590
27 bits
we've shifted nine so i'm going to take

3986
01:14:41,590 --> 01:14:41,600
we've shifted nine so i'm going to take
 

3987
01:14:41,600 --> 01:14:43,910
we've shifted nine so i'm going to take
ox one zero zero

3988
01:14:43,910 --> 01:14:43,920
ox one zero zero
 

3989
01:14:43,920 --> 01:14:47,750
ox one zero zero
uh one zero zero zero one zero one more

3990
01:14:47,750 --> 01:14:47,760
uh one zero zero zero one zero one more
 

3991
01:14:47,760 --> 01:14:50,149
uh one zero zero zero one zero one more
and we're gonna shift at nine and print

3992
01:14:50,149 --> 01:14:50,159
and we're gonna shift at nine and print
 

3993
01:14:50,159 --> 01:14:52,950
and we're gonna shift at nine and print
that

3994
01:14:52,950 --> 01:14:52,960

 

3995
01:14:52,960 --> 01:14:55,350

and that is ox zero and actually if we

3996
01:14:55,350 --> 01:14:55,360
and that is ox zero and actually if we
 

3997
01:14:55,360 --> 01:14:58,149
and that is ox zero and actually if we
print ox0 as a decimal decimal number

3998
01:14:58,149 --> 01:14:58,159
print ox0 as a decimal decimal number
 

3999
01:14:58,159 --> 01:15:02,149
print ox0 as a decimal decimal number
it's going to be 128. okay

4000
01:15:02,149 --> 01:15:02,159
it's going to be 128. okay
 

4001
01:15:02,159 --> 01:15:03,910
it's going to be 128. okay
so we see you actually sort of you know

4002
01:15:03,910 --> 01:15:03,920
so we see you actually sort of you know
 

4003
01:15:03,920 --> 01:15:05,830
so we see you actually sort of you know
it all sort of makes sense

4004
01:15:05,830 --> 01:15:05,840
it all sort of makes sense
 

4005
01:15:05,840 --> 01:15:08,709
it all sort of makes sense
we also see i printed out the flags here

4006
01:15:08,709 --> 01:15:08,719
we also see i printed out the flags here
 

4007
01:15:08,719 --> 01:15:09,430
we also see i printed out the flags here
uh

4008
01:15:09,430 --> 01:15:09,440
uh
 

4009
01:15:09,440 --> 01:15:12,229
uh
and you know the bottom level has read

4010
01:15:12,229 --> 01:15:12,239
and you know the bottom level has read
 

4011
01:15:12,239 --> 01:15:13,030
and you know the bottom level has read
write

4012
01:15:13,030 --> 01:15:13,040
write
 

4013
01:15:13,040 --> 01:15:18,390
write
and uh invalid because valid is one

4014
01:15:18,390 --> 01:15:18,400
and uh invalid because valid is one
 

4015
01:15:18,400 --> 01:15:24,790
and uh invalid because valid is one
any questions about this

4016
01:15:24,790 --> 01:15:24,800
any questions about this
 

4017
01:15:24,800 --> 01:15:28,870
any questions about this
okay so um the kernel basically proceeds

4018
01:15:28,870 --> 01:15:28,880
okay so um the kernel basically proceeds
 

4019
01:15:28,880 --> 01:15:31,590
okay so um the kernel basically proceeds
uh you know doing setting up the whole

4020
01:15:31,590 --> 01:15:31,600
uh you know doing setting up the whole
 

4021
01:15:31,600 --> 01:15:33,830
uh you know doing setting up the whole
address space in this way

4022
01:15:33,830 --> 01:15:33,840
address space in this way
 

4023
01:15:33,840 --> 01:15:36,390
address space in this way
uh and so we've calls kvn map you know

4024
01:15:36,390 --> 01:15:36,400
uh and so we've calls kvn map you know
 

4025
01:15:36,400 --> 01:15:37,350
uh and so we've calls kvn map you know
for virgil

4026
01:15:37,350 --> 01:15:37,360
for virgil
 

4027
01:15:37,360 --> 01:15:40,790
for virgil
for the clint for the click uh maps the

4028
01:15:40,790 --> 01:15:40,800
for the clint for the click uh maps the
 

4029
01:15:40,800 --> 01:15:43,350
for the clint for the click uh maps the
kernel text maps the kernel memory or

4030
01:15:43,350 --> 01:15:43,360
kernel text maps the kernel memory or
 

4031
01:15:43,360 --> 01:15:44,390
kernel text maps the kernel memory or
kernel data

4032
01:15:44,390 --> 01:15:44,400
kernel data
 

4033
01:15:44,400 --> 01:15:45,830
kernel data
and then the trampoline page that we'll

4034
01:15:45,830 --> 01:15:45,840
and then the trampoline page that we'll
 

4035
01:15:45,840 --> 01:15:47,430
and then the trampoline page that we'll
talk about next week

4036
01:15:47,430 --> 01:15:47,440
talk about next week
 

4037
01:15:47,440 --> 01:15:48,950
talk about next week
uh and so in fact you know we can sort

4038
01:15:48,950 --> 01:15:48,960
uh and so in fact you know we can sort
 

4039
01:15:48,960 --> 01:15:50,790
uh and so in fact you know we can sort
of single step through this and then

4040
01:15:50,790 --> 01:15:50,800
of single step through this and then
 

4041
01:15:50,800 --> 01:15:53,110
of single step through this and then
see what the final page directory looks

4042
01:15:53,110 --> 01:15:53,120
see what the final page directory looks
 

4043
01:15:53,120 --> 01:15:54,149
see what the final page directory looks
like

4044
01:15:54,149 --> 01:15:54,159
like
 

4045
01:15:54,159 --> 01:15:57,510
like
uh next next

4046
01:15:57,510 --> 01:15:57,520
uh next next
 

4047
01:15:57,520 --> 01:16:00,470
uh next next
next next basically you know we set the

4048
01:16:00,470 --> 01:16:00,480
next next basically you know we set the
 

4049
01:16:00,480 --> 01:16:01,669
next next basically you know we set the
trampoline and so now we're going to

4050
01:16:01,669 --> 01:16:01,679
trampoline and so now we're going to
 

4051
01:16:01,679 --> 01:16:04,149
trampoline and so now we're going to
print the complete page table directory

4052
01:16:04,149 --> 01:16:04,159
print the complete page table directory
 

4053
01:16:04,159 --> 01:16:07,430
print the complete page table directory
and you know we see you know basically

4054
01:16:07,430 --> 01:16:07,440
and you know we see you know basically
 

4055
01:16:07,440 --> 01:16:10,709
and you know we see you know basically
a lot of pte is actually being uh

4056
01:16:10,709 --> 01:16:10,719
a lot of pte is actually being uh
 

4057
01:16:10,719 --> 01:16:13,270
a lot of pte is actually being uh
set up um and we're not gonna really

4058
01:16:13,270 --> 01:16:13,280
set up um and we're not gonna really
 

4059
01:16:13,280 --> 01:16:14,870
set up um and we're not gonna really
talk about in any detail

4060
01:16:14,870 --> 01:16:14,880
talk about in any detail
 

4061
01:16:14,880 --> 01:16:16,709
talk about in any detail
uh but you know basically it fills out

4062
01:16:16,709 --> 01:16:16,719
uh but you know basically it fills out
 

4063
01:16:16,719 --> 01:16:19,030
uh but you know basically it fills out
the page directory

4064
01:16:19,030 --> 01:16:19,040
the page directory
 

4065
01:16:19,040 --> 01:16:20,550
the page directory
uh to actually create that virtual

4066
01:16:20,550 --> 01:16:20,560
uh to actually create that virtual
 

4067
01:16:20,560 --> 01:16:22,310
uh to actually create that virtual
mapping mapping that we basically saw on

4068
01:16:22,310 --> 01:16:22,320
mapping mapping that we basically saw on
 

4069
01:16:22,320 --> 01:16:24,790
mapping mapping that we basically saw on
the previous slide

4070
01:16:24,790 --> 01:16:24,800
the previous slide
 

4071
01:16:24,800 --> 01:16:26,470
the previous slide
when i in fact what i'm going to do next

4072
01:16:26,470 --> 01:16:26,480
when i in fact what i'm going to do next
 

4073
01:16:26,480 --> 01:16:29,990
when i in fact what i'm going to do next
is actually much more interesting

4074
01:16:29,990 --> 01:16:30,000

 

4075
01:16:30,000 --> 01:16:33,270

i'm going to yeah i want to go here

4076
01:16:33,270 --> 01:16:33,280
i'm going to yeah i want to go here
 

4077
01:16:33,280 --> 01:16:34,870
i'm going to yeah i want to go here
actually i guess maybe i already did

4078
01:16:34,870 --> 01:16:34,880
actually i guess maybe i already did
 

4079
01:16:34,880 --> 01:16:35,270
actually i guess maybe i already did
this

4080
01:16:35,270 --> 01:16:35,280
this
 

4081
01:16:35,280 --> 01:16:38,390
this
uh we're 21 no i'm 21 okay so single

4082
01:16:38,390 --> 01:16:38,400
uh we're 21 no i'm 21 okay so single
 

4083
01:16:38,400 --> 01:16:38,709
uh we're 21 no i'm 21 okay so single
step

4084
01:16:38,709 --> 01:16:38,719
step
 

4085
01:16:38,719 --> 01:16:42,070
step
not okay that's too bad i got past that

4086
01:16:42,070 --> 01:16:42,080
not okay that's too bad i got past that
 

4087
01:16:42,080 --> 01:16:42,709
not okay that's too bad i got past that
but

4088
01:16:42,709 --> 01:16:42,719
but
 

4089
01:16:42,719 --> 01:16:46,229
but
basically uh let me

4090
01:16:46,229 --> 01:16:46,239
basically uh let me
 

4091
01:16:46,239 --> 01:16:51,110
basically uh let me
let me restart this

4092
01:16:51,110 --> 01:16:51,120

 

4093
01:16:51,120 --> 01:16:54,990

and i want to break point at

4094
01:16:54,990 --> 01:16:55,000
and i want to break point at
 

4095
01:16:55,000 --> 01:17:00,470
and i want to break point at
kvm in at heart

4096
01:17:00,470 --> 01:17:00,480

 

4097
01:17:00,480 --> 01:17:03,590

and continue

4098
01:17:03,590 --> 01:17:03,600
and continue
 

4099
01:17:03,600 --> 01:17:06,790
and continue
boom i'm now here at kvm at heart and we

4100
01:17:06,790 --> 01:17:06,800
boom i'm now here at kvm at heart and we
 

4101
01:17:06,800 --> 01:17:08,229
boom i'm now here at kvm at heart and we
see here basically

4102
01:17:08,229 --> 01:17:08,239
see here basically
 

4103
01:17:08,239 --> 01:17:10,390
see here basically
that we're writing the satp register so

4104
01:17:10,390 --> 01:17:10,400
that we're writing the satp register so
 

4105
01:17:10,400 --> 01:17:12,470
that we're writing the satp register so
basically the kernel is going to enable

4106
01:17:12,470 --> 01:17:12,480
basically the kernel is going to enable
 

4107
01:17:12,480 --> 01:17:15,990
basically the kernel is going to enable
uh the page table or the mmu to

4108
01:17:15,990 --> 01:17:16,000
uh the page table or the mmu to
 

4109
01:17:16,000 --> 01:17:17,590
uh the page table or the mmu to
basically start using the page table

4110
01:17:17,590 --> 01:17:17,600
basically start using the page table
 

4111
01:17:17,600 --> 01:17:19,430
basically start using the page table
that we just set up

4112
01:17:19,430 --> 01:17:19,440
that we just set up
 

4113
01:17:19,440 --> 01:17:23,189
that we just set up
and one uh interesting question

4114
01:17:23,189 --> 01:17:23,199
and one uh interesting question
 

4115
01:17:23,199 --> 01:17:26,470
and one uh interesting question
okay so i do have layout split again

4116
01:17:26,470 --> 01:17:26,480
okay so i do have layout split again
 

4117
01:17:26,480 --> 01:17:31,270
okay so i do have layout split again
so somewhere here correct is going to be

4118
01:17:31,270 --> 01:17:31,280
so somewhere here correct is going to be
 

4119
01:17:31,280 --> 01:17:34,950
so somewhere here correct is going to be
here's the instruction uh and

4120
01:17:34,950 --> 01:17:34,960
here's the instruction uh and
 

4121
01:17:34,960 --> 01:17:38,709
here's the instruction uh and
so once so something really dramatic

4122
01:17:38,709 --> 01:17:38,719
so once so something really dramatic
 

4123
01:17:38,719 --> 01:17:39,590
so once so something really dramatic
happens

4124
01:17:39,590 --> 01:17:39,600
happens
 

4125
01:17:39,600 --> 01:17:43,030
happens
after executing this instruction

4126
01:17:43,030 --> 01:17:43,040
after executing this instruction
 

4127
01:17:43,040 --> 01:17:45,189
after executing this instruction
once i say you know i can't see the

4128
01:17:45,189 --> 01:17:45,199
once i say you know i can't see the
 

4129
01:17:45,199 --> 01:17:46,630
once i say you know i can't see the
assembly instruction exactly but there

4130
01:17:46,630 --> 01:17:46,640
assembly instruction exactly but there
 

4131
01:17:46,640 --> 01:17:47,750
assembly instruction exactly but there
are there is this

4132
01:17:47,750 --> 01:17:47,760
are there is this
 

4133
01:17:47,760 --> 01:17:50,070
are there is this
this extent once this instruction is

4134
01:17:50,070 --> 01:17:50,080
this extent once this instruction is
 

4135
01:17:50,080 --> 01:17:51,669
this extent once this instruction is
executed what will happen with the next

4136
01:17:51,669 --> 01:17:51,679
executed what will happen with the next
 

4137
01:17:51,679 --> 01:17:58,310
executed what will happen with the next
address that's being translated

4138
01:17:58,310 --> 01:17:58,320
address that's being translated
 

4139
01:17:58,320 --> 01:18:00,070
address that's being translated
well at the point that we execute this

4140
01:18:00,070 --> 01:18:00,080
well at the point that we execute this
 

4141
01:18:00,080 --> 01:18:01,430
well at the point that we execute this
instruction before

4142
01:18:01,430 --> 01:18:01,440
instruction before
 

4143
01:18:01,440 --> 01:18:03,350
instruction before
executing this instruction there's no

4144
01:18:03,350 --> 01:18:03,360
executing this instruction there's no
 

4145
01:18:03,360 --> 01:18:04,950
executing this instruction there's no
page tables enabled yet so no

4146
01:18:04,950 --> 01:18:04,960
page tables enabled yet so no
 

4147
01:18:04,960 --> 01:18:06,310
page tables enabled yet so no
translation happens

4148
01:18:06,310 --> 01:18:06,320
translation happens
 

4149
01:18:06,320 --> 01:18:08,070
translation happens
but the next and then the program

4150
01:18:08,070 --> 01:18:08,080
but the next and then the program
 

4151
01:18:08,080 --> 01:18:10,149
but the next and then the program
counter is updated by four

4152
01:18:10,149 --> 01:18:10,159
counter is updated by four
 

4153
01:18:10,159 --> 01:18:11,350
counter is updated by four
and then the next instruction are

4154
01:18:11,350 --> 01:18:11,360
and then the next instruction are
 

4155
01:18:11,360 --> 01:18:13,110
and then the next instruction are
executed and the program counter will be

4156
01:18:13,110 --> 01:18:13,120
executed and the program counter will be
 

4157
01:18:13,120 --> 01:18:15,189
executed and the program counter will be
translated using the virtual page

4158
01:18:15,189 --> 01:18:15,199
translated using the virtual page
 

4159
01:18:15,199 --> 01:18:18,390
translated using the virtual page
page table memory and so this is a

4160
01:18:18,390 --> 01:18:18,400
page table memory and so this is a
 

4161
01:18:18,400 --> 01:18:19,669
page table memory and so this is a
you know the way to think about this

4162
01:18:19,669 --> 01:18:19,679
you know the way to think about this
 

4163
01:18:19,679 --> 01:18:21,510
you know the way to think about this
this is a dramatic moment

4164
01:18:21,510 --> 01:18:21,520
this is a dramatic moment
 

4165
01:18:21,520 --> 01:18:23,750
this is a dramatic moment
because basically the whole address

4166
01:18:23,750 --> 01:18:23,760
because basically the whole address
 

4167
01:18:23,760 --> 01:18:25,430
because basically the whole address
translation is starting to enable and

4168
01:18:25,430 --> 01:18:25,440
translation is starting to enable and
 

4169
01:18:25,440 --> 01:18:25,990
translation is starting to enable and
every address

4170
01:18:25,990 --> 01:18:26,000
every address
 

4171
01:18:26,000 --> 01:18:27,430
every address
needs to know maybe potentially

4172
01:18:27,430 --> 01:18:27,440
needs to know maybe potentially
 

4173
01:18:27,440 --> 01:18:29,510
needs to know maybe potentially
something different

4174
01:18:29,510 --> 01:18:29,520
something different
 

4175
01:18:29,520 --> 01:18:30,790
something different
right because before we're running

4176
01:18:30,790 --> 01:18:30,800
right because before we're running
 

4177
01:18:30,800 --> 01:18:32,310
right because before we're running
there's like the physical addresses then

4178
01:18:32,310 --> 01:18:32,320
there's like the physical addresses then
 

4179
01:18:32,320 --> 01:18:33,590
there's like the physical addresses then
the page table henderson

4180
01:18:33,590 --> 01:18:33,600
the page table henderson
 

4181
01:18:33,600 --> 01:18:34,950
the page table henderson
and whatever is in the mapping that is

4182
01:18:34,950 --> 01:18:34,960
and whatever is in the mapping that is
 

4183
01:18:34,960 --> 01:18:38,790
and whatever is in the mapping that is
now the new meaning of a virtual dress

4184
01:18:38,790 --> 01:18:38,800
now the new meaning of a virtual dress
 

4185
01:18:38,800 --> 01:18:40,709
now the new meaning of a virtual dress
and this is how this works out you know

4186
01:18:40,709 --> 01:18:40,719
and this is how this works out you know
 

4187
01:18:40,719 --> 01:18:41,910
and this is how this works out you know
the fact that this actually works out is

4188
01:18:41,910 --> 01:18:41,920
the fact that this actually works out is
 

4189
01:18:41,920 --> 01:18:43,910
the fact that this actually works out is
sort of remarkable because like the next

4190
01:18:43,910 --> 01:18:43,920
sort of remarkable because like the next
 

4191
01:18:43,920 --> 01:18:46,070
sort of remarkable because like the next
instruction the next value is a virtual

4192
01:18:46,070 --> 01:18:46,080
instruction the next value is a virtual
 

4193
01:18:46,080 --> 01:18:49,189
instruction the next value is a virtual
address and not a physical address

4194
01:18:49,189 --> 01:18:49,199
address and not a physical address
 

4195
01:18:49,199 --> 01:18:50,229
address and not a physical address
next instruction is going to be this

4196
01:18:50,229 --> 01:18:50,239
next instruction is going to be this
 

4197
01:18:50,239 --> 01:18:52,630
next instruction is going to be this
whatever ox1110

4198
01:18:52,630 --> 01:18:52,640
whatever ox1110
 

4199
01:18:52,640 --> 01:18:55,750
whatever ox1110
and why does this work out

4200
01:18:55,750 --> 01:18:55,760
and why does this work out
 

4201
01:18:55,760 --> 01:18:57,430
and why does this work out
well the reason works out is because the

4202
01:18:57,430 --> 01:18:57,440
well the reason works out is because the
 

4203
01:18:57,440 --> 01:18:59,189
well the reason works out is because the
kernel is set up with an identity page

4204
01:18:59,189 --> 01:18:59,199
kernel is set up with an identity page
 

4205
01:18:59,199 --> 01:18:59,669
kernel is set up with an identity page
mapping

4206
01:18:59,669 --> 01:18:59,679
mapping
 

4207
01:18:59,679 --> 01:19:02,870
mapping
so after we enable the virtual paging

4208
01:19:02,870 --> 01:19:02,880
so after we enable the virtual paging
 

4209
01:19:02,880 --> 01:19:03,669
so after we enable the virtual paging
hardware

4210
01:19:03,669 --> 01:19:03,679
hardware
 

4211
01:19:03,679 --> 01:19:05,350
hardware
we actually you know this translation

4212
01:19:05,350 --> 01:19:05,360
we actually you know this translation
 

4213
01:19:05,360 --> 01:19:07,110
we actually you know this translation
will translate again to the same

4214
01:19:07,110 --> 01:19:07,120
will translate again to the same
 

4215
01:19:07,120 --> 01:19:08,149
will translate again to the same
physical address

4216
01:19:08,149 --> 01:19:08,159
physical address
 

4217
01:19:08,159 --> 01:19:09,910
physical address
and so indeed you know we'll actually

4218
01:19:09,910 --> 01:19:09,920
and so indeed you know we'll actually
 

4219
01:19:09,920 --> 01:19:11,189
and so indeed you know we'll actually
end up you know

4220
01:19:11,189 --> 01:19:11,199
end up you know
 

4221
01:19:11,199 --> 01:19:13,110
end up you know
executing the right instruction because

4222
01:19:13,110 --> 01:19:13,120
executing the right instruction because
 

4223
01:19:13,120 --> 01:19:14,709
executing the right instruction because
that's actually exactly the instructions

4224
01:19:14,709 --> 01:19:14,719
that's actually exactly the instructions
 

4225
01:19:14,719 --> 01:19:16,070
that's actually exactly the instructions
the memory location that the

4226
01:19:16,070 --> 01:19:16,080
the memory location that the
 

4227
01:19:16,080 --> 01:19:19,110
the memory location that the
virtual hardware is programmed for so

4228
01:19:19,110 --> 01:19:19,120
virtual hardware is programmed for so
 

4229
01:19:19,120 --> 01:19:22,790
virtual hardware is programmed for so
does this make sense

4230
01:19:22,790 --> 01:19:22,800
does this make sense
 

4231
01:19:22,800 --> 01:19:25,189
does this make sense
again one reason why programming with

4232
01:19:25,189 --> 01:19:25,199
again one reason why programming with
 

4233
01:19:25,199 --> 01:19:26,790
again one reason why programming with
virtual memory is difficult

4234
01:19:26,790 --> 01:19:26,800
virtual memory is difficult
 

4235
01:19:26,800 --> 01:19:28,470
virtual memory is difficult
is because once you execute one of these

4236
01:19:28,470 --> 01:19:28,480
is because once you execute one of these
 

4237
01:19:28,480 --> 01:19:29,910
is because once you execute one of these
satp instructions

4238
01:19:29,910 --> 01:19:29,920
satp instructions
 

4239
01:19:29,920 --> 01:19:33,030
satp instructions
you know you load a page table in the

4240
01:19:33,030 --> 01:19:33,040
you know you load a page table in the
 

4241
01:19:33,040 --> 01:19:35,430
you know you load a page table in the
satp register your world completely

4242
01:19:35,430 --> 01:19:35,440
satp register your world completely
 

4243
01:19:35,440 --> 01:19:36,630
satp register your world completely
changes

4244
01:19:36,630 --> 01:19:36,640
changes
 

4245
01:19:36,640 --> 01:19:38,790
changes
and every address is now translated with

4246
01:19:38,790 --> 01:19:38,800
and every address is now translated with
 

4247
01:19:38,800 --> 01:19:41,430
and every address is now translated with
the pay stable that you set up

4248
01:19:41,430 --> 01:19:41,440
the pay stable that you set up
 

4249
01:19:41,440 --> 01:19:43,030
the pay stable that you set up
and so what happens if the page table

4250
01:19:43,030 --> 01:19:43,040
and so what happens if the page table
 

4251
01:19:43,040 --> 01:19:44,790
and so what happens if the page table
set up incorrectly

4252
01:19:44,790 --> 01:19:44,800
set up incorrectly
 

4253
01:19:44,800 --> 01:19:53,590
set up incorrectly
what would you what might happen

4254
01:19:53,590 --> 01:19:53,600

 

4255
01:19:53,600 --> 01:19:56,070

anybody who wants to say that answer it

4256
01:19:56,070 --> 01:19:56,080
anybody who wants to say that answer it
 

4257
01:19:56,080 --> 01:20:00,390
anybody who wants to say that answer it
or answer it in the chat either way

4258
01:20:00,390 --> 01:20:00,400

 

4259
01:20:00,400 --> 01:20:03,110

you could override kernel data yeah you

4260
01:20:03,110 --> 01:20:03,120
you could override kernel data yeah you
 

4261
01:20:03,120 --> 01:20:04,550
you could override kernel data yeah you
could overwrite kernel data what else

4262
01:20:04,550 --> 01:20:04,560
could overwrite kernel data what else
 

4263
01:20:04,560 --> 01:20:06,070
could overwrite kernel data what else
could happen yeah page fault you know

4264
01:20:06,070 --> 01:20:06,080
could happen yeah page fault you know
 

4265
01:20:06,080 --> 01:20:07,590
could happen yeah page fault you know
basically the

4266
01:20:07,590 --> 01:20:07,600
basically the
 

4267
01:20:07,600 --> 01:20:09,910
basically the
the mapping may be uh incorrect and

4268
01:20:09,910 --> 01:20:09,920
the mapping may be uh incorrect and
 

4269
01:20:09,920 --> 01:20:11,590
the mapping may be uh incorrect and
basically the dress can't be translated

4270
01:20:11,590 --> 01:20:11,600
basically the dress can't be translated
 

4271
01:20:11,600 --> 01:20:12,950
basically the dress can't be translated
at all and so the kernel can

4272
01:20:12,950 --> 01:20:12,960
at all and so the kernel can
 

4273
01:20:12,960 --> 01:20:14,629
at all and so the kernel can
you know the heart rate won't do it and

4274
01:20:14,629 --> 01:20:14,639
you know the heart rate won't do it and
 

4275
01:20:14,639 --> 01:20:18,629
you know the heart rate won't do it and
use the kernel just stops it panics

4276
01:20:18,629 --> 01:20:18,639
use the kernel just stops it panics
 

4277
01:20:18,639 --> 01:20:21,590
use the kernel just stops it panics
does that make sense so if you get a bug

4278
01:20:21,590 --> 01:20:21,600
does that make sense so if you get a bug
 

4279
01:20:21,600 --> 01:20:23,430
does that make sense so if you get a bug
in your page tables

4280
01:20:23,430 --> 01:20:23,440
in your page tables
 

4281
01:20:23,440 --> 01:20:26,149
in your page tables
you know you're going to see bizarre

4282
01:20:26,149 --> 01:20:26,159
you know you're going to see bizarre
 

4283
01:20:26,159 --> 01:20:26,870
you know you're going to see bizarre
errors

4284
01:20:26,870 --> 01:20:26,880
errors
 

4285
01:20:26,880 --> 01:20:29,910
errors
or crashes and so one reason that for

4286
01:20:29,910 --> 01:20:29,920
or crashes and so one reason that for
 

4287
01:20:29,920 --> 01:20:31,110
or crashes and so one reason that for
example the next lab

4288
01:20:31,110 --> 01:20:31,120
example the next lab
 

4289
01:20:31,120 --> 01:20:32,950
example the next lab
uh the page table app that we'll hand

4290
01:20:32,950 --> 01:20:32,960
uh the page table app that we'll hand
 

4291
01:20:32,960 --> 01:20:34,870
uh the page table app that we'll hand
out or release tonight

4292
01:20:34,870 --> 01:20:34,880
out or release tonight
 

4293
01:20:34,880 --> 01:20:36,390
out or release tonight
is going to be hard is because those

4294
01:20:36,390 --> 01:20:36,400
is going to be hard is because those
 

4295
01:20:36,400 --> 01:20:38,070
is going to be hard is because those
kind of bugs will show up

4296
01:20:38,070 --> 01:20:38,080
kind of bugs will show up
 

4297
01:20:38,080 --> 01:20:39,189
kind of bugs will show up
and you're going to be not careful

4298
01:20:39,189 --> 01:20:39,199
and you're going to be not careful
 

4299
01:20:39,199 --> 01:20:41,110
and you're going to be not careful
enough or you haven't fully internalized

4300
01:20:41,110 --> 01:20:41,120
enough or you haven't fully internalized
 

4301
01:20:41,120 --> 01:20:42,470
enough or you haven't fully internalized
some aspect yet

4302
01:20:42,470 --> 01:20:42,480
some aspect yet
 

4303
01:20:42,480 --> 01:20:43,910
some aspect yet
and you're basically going to get a

4304
01:20:43,910 --> 01:20:43,920
and you're basically going to get a
 

4305
01:20:43,920 --> 01:20:46,070
and you're basically going to get a
kernel crash and you're going to have a

4306
01:20:46,070 --> 01:20:46,080
kernel crash and you're going to have a
 

4307
01:20:46,080 --> 01:20:47,510
kernel crash and you're going to have a
hard time or you know it will take a

4308
01:20:47,510 --> 01:20:47,520
hard time or you know it will take a
 

4309
01:20:47,520 --> 01:20:49,189
hard time or you know it will take a
little bit of time and energy and

4310
01:20:49,189 --> 01:20:49,199
little bit of time and energy and
 

4311
01:20:49,199 --> 01:20:51,189
little bit of time and energy and
detective work to basically track down

4312
01:20:51,189 --> 01:20:51,199
detective work to basically track down
 

4313
01:20:51,199 --> 01:20:53,350
detective work to basically track down
why that happened

4314
01:20:53,350 --> 01:20:53,360
why that happened
 

4315
01:20:53,360 --> 01:20:56,229
why that happened
and that's just the that's just part of

4316
01:20:56,229 --> 01:20:56,239
and that's just the that's just part of
 

4317
01:20:56,239 --> 01:20:58,390
and that's just the that's just part of
like programming virtual memory

4318
01:20:58,390 --> 01:20:58,400
like programming virtual memory
 

4319
01:20:58,400 --> 01:21:00,229
like programming virtual memory
because it's such a powerful primitive

4320
01:21:00,229 --> 01:21:00,239
because it's such a powerful primitive
 

4321
01:21:00,239 --> 01:21:01,830
because it's such a powerful primitive
you know if you get it wrong you're also

4322
01:21:01,830 --> 01:21:01,840
you know if you get it wrong you're also
 

4323
01:21:01,840 --> 01:21:03,350
you know if you get it wrong you're also
going to have

4324
01:21:03,350 --> 01:21:03,360
going to have
 

4325
01:21:03,360 --> 01:21:08,070
going to have
powerful consequences

4326
01:21:08,070 --> 01:21:08,080

 

4327
01:21:08,080 --> 01:21:09,510

yet the other hand is a great amount of

4328
01:21:09,510 --> 01:21:09,520
yet the other hand is a great amount of
 

4329
01:21:09,520 --> 01:21:11,189
yet the other hand is a great amount of
fun so i don't want to end on a negative

4330
01:21:11,189 --> 01:21:11,199
fun so i don't want to end on a negative
 

4331
01:21:11,199 --> 01:21:13,430
fun so i don't want to end on a negative
note

4332
01:21:13,430 --> 01:21:13,440
note
 

4333
01:21:13,440 --> 01:21:15,110
note
but all that will give you sort of a

4334
01:21:15,110 --> 01:21:15,120
but all that will give you sort of a
 

4335
01:21:15,120 --> 01:21:16,629
but all that will give you sort of a
real understanding of actually what

4336
01:21:16,629 --> 01:21:16,639
real understanding of actually what
 

4337
01:21:16,639 --> 01:21:17,830
real understanding of actually what
really virtual memory is

4338
01:21:17,830 --> 01:21:17,840
really virtual memory is
 

4339
01:21:17,840 --> 01:21:20,790
really virtual memory is
and what it can do okay i think i'm

4340
01:21:20,790 --> 01:21:20,800
and what it can do okay i think i'm
 

4341
01:21:20,800 --> 01:21:22,310
and what it can do okay i think i'm
running out of time so i'm going to stop

4342
01:21:22,310 --> 01:21:22,320
running out of time so i'm going to stop
 

4343
01:21:22,320 --> 01:21:22,950
running out of time so i'm going to stop
here

4344
01:21:22,950 --> 01:21:22,960
here
 

4345
01:21:22,960 --> 01:21:24,629
here
so people have time to go to the next

4346
01:21:24,629 --> 01:21:24,639
so people have time to go to the next
 

4347
01:21:24,639 --> 01:21:25,990
so people have time to go to the next
class or next activity

4348
01:21:25,990 --> 01:21:26,000
class or next activity
 

4349
01:21:26,000 --> 01:21:28,229
class or next activity
uh but if you have any questions left uh

4350
01:21:28,229 --> 01:21:28,239
uh but if you have any questions left uh
 

4351
01:21:28,239 --> 01:21:29,350
uh but if you have any questions left uh
you know please hang on

4352
01:21:29,350 --> 01:21:29,360
you know please hang on
 

4353
01:21:29,360 --> 01:21:32,470
you know please hang on
and ask them and

4354
01:21:32,470 --> 01:21:32,480
and ask them and
 

4355
01:21:32,480 --> 01:21:35,990
and ask them and
we'll see you on monday and good luck

4356
01:21:35,990 --> 01:21:36,000
we'll see you on monday and good luck
 

4357
01:21:36,000 --> 01:21:36,629
we'll see you on monday and good luck
with

4358
01:21:36,629 --> 01:21:36,639
with
 

4359
01:21:36,639 --> 01:21:40,870
with
finishing the cisco lab

4360
01:21:40,870 --> 01:21:40,880

 

4361
01:21:40,880 --> 01:21:44,310

um hi i have a question about walk

4362
01:21:44,310 --> 01:21:44,320
um hi i have a question about walk
 

4363
01:21:44,320 --> 01:21:47,669
um hi i have a question about walk
um so it says and in the code it returns

4364
01:21:47,669 --> 01:21:47,679
um so it says and in the code it returns
 

4365
01:21:47,679 --> 01:21:48,790
um so it says and in the code it returns
the

4366
01:21:48,790 --> 01:21:48,800
the
 

4367
01:21:48,800 --> 01:21:52,390
the
like the first tables on pte

4368
01:21:52,390 --> 01:21:52,400
like the first tables on pte
 

4369
01:21:52,400 --> 01:21:55,430
like the first tables on pte
yeah right um but

4370
01:21:55,430 --> 01:21:55,440
yeah right um but
 

4371
01:21:55,440 --> 01:21:57,110
yeah right um but
but how does it work then like the other

4372
01:21:57,110 --> 01:21:57,120
but how does it work then like the other
 

4373
01:21:57,120 --> 01:21:59,430
but how does it work then like the other
functions when they expect

4374
01:21:59,430 --> 01:21:59,440
functions when they expect
 

4375
01:21:59,440 --> 01:22:02,629
functions when they expect
the actual pte that like the physical

4376
01:22:02,629 --> 01:22:02,639
the actual pte that like the physical
 

4377
01:22:02,639 --> 01:22:04,310
the actual pte that like the physical
address

4378
01:22:04,310 --> 01:22:04,320
address
 

4379
01:22:04,320 --> 01:22:07,590
address
like yeah so basically this

4380
01:22:07,590 --> 01:22:07,600
like yeah so basically this
 

4381
01:22:07,600 --> 01:22:11,110
like yeah so basically this
returns the pt entry in the page table

4382
01:22:11,110 --> 01:22:11,120
returns the pt entry in the page table
 

4383
01:22:11,120 --> 01:22:12,070
returns the pt entry in the page table
correct

4384
01:22:12,070 --> 01:22:12,080
correct
 

4385
01:22:12,080 --> 01:22:13,669
correct
and the kernel can read and write page

4386
01:22:13,669 --> 01:22:13,679
and the kernel can read and write page
 

4387
01:22:13,679 --> 01:22:15,750
and the kernel can read and write page
table entries

4388
01:22:15,750 --> 01:22:15,760
table entries
 

4389
01:22:15,760 --> 01:22:18,310
table entries
and so now you can stick values into the

4390
01:22:18,310 --> 01:22:18,320
and so now you can stick values into the
 

4391
01:22:18,320 --> 01:22:21,110
and so now you can stick values into the
pte

4392
01:22:21,110 --> 01:22:21,120

 

4393
01:22:21,120 --> 01:22:23,430

and so maybe i can draw a picture if

4394
01:22:23,430 --> 01:22:23,440
and so maybe i can draw a picture if
 

4395
01:22:23,440 --> 01:22:24,870
and so maybe i can draw a picture if
that is helpful

4396
01:22:24,870 --> 01:22:24,880
that is helpful
 

4397
01:22:24,880 --> 01:22:35,750
that is helpful
um let's see

4398
01:22:35,750 --> 01:22:35,760

 

4399
01:22:35,760 --> 01:22:45,030

so basically we have a page directory

4400
01:22:45,030 --> 01:22:45,040

 

4401
01:22:45,040 --> 01:22:48,550

and you know this walk code so the page

4402
01:22:48,550 --> 01:22:48,560
and you know this walk code so the page
 

4403
01:22:48,560 --> 01:22:50,950
and you know this walk code so the page
directory has 512

4404
01:22:50,950 --> 01:22:50,960
directory has 512
 

4405
01:22:50,960 --> 01:22:57,030
directory has 512
ptes in it

4406
01:22:57,030 --> 01:22:57,040

 

4407
01:22:57,040 --> 01:22:59,910

here's zero here's five and eleven and

4408
01:22:59,910 --> 01:22:59,920
here's zero here's five and eleven and
 

4409
01:22:59,920 --> 01:23:01,669
here's zero here's five and eleven and
basically what the function does

4410
01:23:01,669 --> 01:23:01,679
basically what the function does
 

4411
01:23:01,679 --> 01:23:04,830
basically what the function does
it returns a pointer to one of these

4412
01:23:04,830 --> 01:23:04,840
it returns a pointer to one of these
 

4413
01:23:04,840 --> 01:23:06,870
it returns a pointer to one of these
pkes and so that's just a virtual

4414
01:23:06,870 --> 01:23:06,880
pkes and so that's just a virtual
 

4415
01:23:06,880 --> 01:23:07,510
pkes and so that's just a virtual
address

4416
01:23:07,510 --> 01:23:07,520
address
 

4417
01:23:07,520 --> 01:23:08,870
address
and it just points to that particular

4418
01:23:08,870 --> 01:23:08,880
and it just points to that particular
 

4419
01:23:08,880 --> 01:23:11,750
and it just points to that particular
pte and now the kernel can

4420
01:23:11,750 --> 01:23:11,760
pte and now the kernel can
 

4421
01:23:11,760 --> 01:23:13,830
pte and now the kernel can
you know manipulate that pte by like

4422
01:23:13,830 --> 01:23:13,840
you know manipulate that pte by like
 

4423
01:23:13,840 --> 01:23:15,990
you know manipulate that pte by like
whatever writing values to it

4424
01:23:15,990 --> 01:23:16,000
whatever writing values to it
 

4425
01:23:16,000 --> 01:23:19,110
whatever writing values to it
like some physical address maybe

4426
01:23:19,110 --> 01:23:19,120
like some physical address maybe
 

4427
01:23:19,120 --> 01:23:20,550
like some physical address maybe
with some permissions ordered into it

4428
01:23:20,550 --> 01:23:20,560
with some permissions ordered into it
 

4429
01:23:20,560 --> 01:23:23,750
with some permissions ordered into it
for the top bottom 10 bits

4430
01:23:23,750 --> 01:23:23,760
for the top bottom 10 bits
 

4431
01:23:23,760 --> 01:23:25,189
for the top bottom 10 bits
and then that basically updates the page

4432
01:23:25,189 --> 01:23:25,199
and then that basically updates the page
 

4433
01:23:25,199 --> 01:23:27,030
and then that basically updates the page
sample directory and then later on

4434
01:23:27,030 --> 01:23:27,040
sample directory and then later on
 

4435
01:23:27,040 --> 01:23:30,229
sample directory and then later on
when you load that into satp now that

4436
01:23:30,229 --> 01:23:30,239
when you load that into satp now that
 

4437
01:23:30,239 --> 01:23:30,709
when you load that into satp now that
effect

4438
01:23:30,709 --> 01:23:30,719
effect
 

4439
01:23:30,719 --> 01:23:35,189
effect
that that change will go into effect

4440
01:23:35,189 --> 01:23:35,199
that that change will go into effect
 

4441
01:23:35,199 --> 01:23:37,750
that that change will go into effect
does that make sense yeah that makes

4442
01:23:37,750 --> 01:23:37,760
does that make sense yeah that makes
 

4443
01:23:37,760 --> 01:23:39,430
does that make sense yeah that makes
sense i guess i was just confused like

4444
01:23:39,430 --> 01:23:39,440
sense i guess i was just confused like
 

4445
01:23:39,440 --> 01:23:41,750
sense i guess i was just confused like
why does it do the work of going all the

4446
01:23:41,750 --> 01:23:41,760
why does it do the work of going all the
 

4447
01:23:41,760 --> 01:23:42,629
why does it do the work of going all the
way to the

4448
01:23:42,629 --> 01:23:42,639
way to the
 

4449
01:23:42,639 --> 01:23:45,990
way to the
third page table and then only return

4450
01:23:45,990 --> 01:23:46,000
third page table and then only return
 

4451
01:23:46,000 --> 01:23:48,870
third page table and then only return
the first pte no the return is actually

4452
01:23:48,870 --> 01:23:48,880
the first pte no the return is actually
 

4453
01:23:48,880 --> 01:23:49,350
the first pte no the return is actually
the

4454
01:23:49,350 --> 01:23:49,360
the
 

4455
01:23:49,360 --> 01:23:52,229
the
the bottom one all right actually but

4456
01:23:52,229 --> 01:23:52,239
the bottom one all right actually but
 

4457
01:23:52,239 --> 01:23:52,629
the bottom one all right actually but
let me

4458
01:23:52,629 --> 01:23:52,639
let me
 

4459
01:23:52,639 --> 01:23:56,550
let me
be careful uh if you notice it goes

4460
01:23:56,550 --> 01:23:56,560
be careful uh if you notice it goes
 

4461
01:23:56,560 --> 01:23:58,149
be careful uh if you notice it goes
through the end levels so it starts at

4462
01:23:58,149 --> 01:23:58,159
through the end levels so it starts at
 

4463
01:23:58,159 --> 01:23:59,590
through the end levels so it starts at
level two and then it goes to level one

4464
01:23:59,590 --> 01:23:59,600
level two and then it goes to level one
 

4465
01:23:59,600 --> 01:24:01,750
level two and then it goes to level one
then it goes to level zero

4466
01:24:01,750 --> 01:24:01,760
then it goes to level zero
 

4467
01:24:01,760 --> 01:24:05,110
then it goes to level zero
if uh the alkbit is set

4468
01:24:05,110 --> 01:24:05,120
if uh the alkbit is set
 

4469
01:24:05,120 --> 01:24:07,510
if uh the alkbit is set
and and level doesn't exist it will

4470
01:24:07,510 --> 01:24:07,520
and and level doesn't exist it will
 

4471
01:24:07,520 --> 01:24:09,110
and and level doesn't exist it will
create the intermediate page default

4472
01:24:09,110 --> 01:24:09,120
create the intermediate page default
 

4473
01:24:09,120 --> 01:24:10,470
create the intermediate page default
directory

4474
01:24:10,470 --> 01:24:10,480
directory
 

4475
01:24:10,480 --> 01:24:12,550
directory
and zero it out and then keep going in

4476
01:24:12,550 --> 01:24:12,560
and zero it out and then keep going in
 

4477
01:24:12,560 --> 01:24:13,669
and zero it out and then keep going in
the loop

4478
01:24:13,669 --> 01:24:13,679
the loop
 

4479
01:24:13,679 --> 01:24:16,550
the loop
so in what you always end up on the

4480
01:24:16,550 --> 01:24:16,560
so in what you always end up on the
 

4481
01:24:16,560 --> 01:24:18,470
so in what you always end up on the
bottom pte

4482
01:24:18,470 --> 01:24:18,480
bottom pte
 

4483
01:24:18,480 --> 01:24:21,669
bottom pte
if alex is not set you stop at the first

4484
01:24:21,669 --> 01:24:21,679
if alex is not set you stop at the first
 

4485
01:24:21,679 --> 01:24:25,510
if alex is not set you stop at the first
pte that doesn't have a value

4486
01:24:25,510 --> 01:24:25,520

 

4487
01:24:25,520 --> 01:24:26,870

okay that makes sense so this is the

4488
01:24:26,870 --> 01:24:26,880
okay that makes sense so this is the
 

4489
01:24:26,880 --> 01:24:28,550
okay that makes sense so this is the
last one the actual

4490
01:24:28,550 --> 01:24:28,560
last one the actual
 

4491
01:24:28,560 --> 01:24:36,790
last one the actual
one that gonna have okay okay thank you

4492
01:24:36,790 --> 01:24:36,800

 

4493
01:24:36,800 --> 01:24:40,709

any other questions

4494
01:24:40,709 --> 01:24:40,719

 

4495
01:24:40,719 --> 01:24:43,750

um so i have a question uh basically

4496
01:24:43,750 --> 01:24:43,760
um so i have a question uh basically
 

4497
01:24:43,760 --> 01:24:45,110
um so i have a question uh basically
everything made sense

4498
01:24:45,110 --> 01:24:45,120
everything made sense
 

4499
01:24:45,120 --> 01:24:48,310
everything made sense
until we mapped the virtual addresses to

4500
01:24:48,310 --> 01:24:48,320
until we mapped the virtual addresses to
 

4501
01:24:48,320 --> 01:24:51,030
until we mapped the virtual addresses to
of the kernel to the physical addresses

4502
01:24:51,030 --> 01:24:51,040
of the kernel to the physical addresses
 

4503
01:24:51,040 --> 01:24:53,750
of the kernel to the physical addresses
um

4504
01:24:53,750 --> 01:24:53,760

 

4505
01:24:53,760 --> 01:24:56,390

so my understanding is that each process

4506
01:24:56,390 --> 01:24:56,400
so my understanding is that each process
 

4507
01:24:56,400 --> 01:24:58,310
so my understanding is that each process
will have its own page table which is

4508
01:24:58,310 --> 01:24:58,320
will have its own page table which is
 

4509
01:24:58,320 --> 01:24:59,830
will have its own page table which is
also a three level tree

4510
01:24:59,830 --> 01:24:59,840
also a three level tree
 

4511
01:24:59,840 --> 01:25:02,390
also a three level tree
which maps its virtual addresses to

4512
01:25:02,390 --> 01:25:02,400
which maps its virtual addresses to
 

4513
01:25:02,400 --> 01:25:03,590
which maps its virtual addresses to
physical addresses

4514
01:25:03,590 --> 01:25:03,600
physical addresses
 

4515
01:25:03,600 --> 01:25:05,669
physical addresses
but then when we map the kernel address

4516
01:25:05,669 --> 01:25:05,679
but then when we map the kernel address
 

4517
01:25:05,679 --> 01:25:07,350
but then when we map the kernel address
the kernel virtual addresses to physical

4518
01:25:07,350 --> 01:25:07,360
the kernel virtual addresses to physical
 

4519
01:25:07,360 --> 01:25:07,990
the kernel virtual addresses to physical
addresses

4520
01:25:07,990 --> 01:25:08,000
addresses
 

4521
01:25:08,000 --> 01:25:09,669
addresses
i don't think we accounted for the

4522
01:25:09,669 --> 01:25:09,679
i don't think we accounted for the
 

4523
01:25:09,679 --> 01:25:12,470
i don't think we accounted for the
actual tree of the

4524
01:25:12,470 --> 01:25:12,480
actual tree of the
 

4525
01:25:12,480 --> 01:25:15,350
actual tree of the
virtual addresses of the kernel or where

4526
01:25:15,350 --> 01:25:15,360
virtual addresses of the kernel or where
 

4527
01:25:15,360 --> 01:25:16,709
virtual addresses of the kernel or where
other processes

4528
01:25:16,709 --> 01:25:16,719
other processes
 

4529
01:25:16,719 --> 01:25:20,870
other processes
will have their virtual addresses and

4530
01:25:20,870 --> 01:25:20,880
will have their virtual addresses and
 

4531
01:25:20,880 --> 01:25:23,830
will have their virtual addresses and
i'm sorry virtual addresses um like the

4532
01:25:23,830 --> 01:25:23,840
i'm sorry virtual addresses um like the
 

4533
01:25:23,840 --> 01:25:25,030
i'm sorry virtual addresses um like the
page table trees

4534
01:25:25,030 --> 01:25:25,040
page table trees
 

4535
01:25:25,040 --> 01:25:27,830
page table trees
and whatever the page table tree points

4536
01:25:27,830 --> 01:25:27,840
and whatever the page table tree points
 

4537
01:25:27,840 --> 01:25:28,310
and whatever the page table tree points
at

4538
01:25:28,310 --> 01:25:28,320
at
 

4539
01:25:28,320 --> 01:25:31,510
at
in the physical memory yeah so so

4540
01:25:31,510 --> 01:25:31,520
in the physical memory yeah so so
 

4541
01:25:31,520 --> 01:25:33,270
in the physical memory yeah so so
so you know you're back so this is the

4542
01:25:33,270 --> 01:25:33,280
so you know you're back so this is the
 

4543
01:25:33,280 --> 01:25:34,629
so you know you're back so this is the
slide with the kernel

4544
01:25:34,629 --> 01:25:34,639
slide with the kernel
 

4545
01:25:34,639 --> 01:25:37,270
slide with the kernel
uh uh address space the virtual kernel

4546
01:25:37,270 --> 01:25:37,280
uh uh address space the virtual kernel
 

4547
01:25:37,280 --> 01:25:38,470
uh uh address space the virtual kernel
address space

4548
01:25:38,470 --> 01:25:38,480
address space
 

4549
01:25:38,480 --> 01:25:41,350
address space
and so when the kernel allocates a proc

4550
01:25:41,350 --> 01:25:41,360
and so when the kernel allocates a proc
 

4551
01:25:41,360 --> 01:25:42,149
and so when the kernel allocates a proc
uh

4552
01:25:42,149 --> 01:25:42,159
uh
 

4553
01:25:42,159 --> 01:25:44,229
uh
and the page tables for that particular

4554
01:25:44,229 --> 01:25:44,239
and the page tables for that particular
 

4555
01:25:44,239 --> 01:25:46,229
and the page tables for that particular
process they're going to be allocated

4556
01:25:46,229 --> 01:25:46,239
process they're going to be allocated
 

4557
01:25:46,239 --> 01:25:48,390
process they're going to be allocated
out of memory here you know memory

4558
01:25:48,390 --> 01:25:48,400
out of memory here you know memory
 

4559
01:25:48,400 --> 01:25:50,790
out of memory here you know memory
that's not being used yet

4560
01:25:50,790 --> 01:25:50,800
that's not being used yet
 

4561
01:25:50,800 --> 01:25:54,149
that's not being used yet
and the kernel is going to program uh

4562
01:25:54,149 --> 01:25:54,159
and the kernel is going to program uh
 

4563
01:25:54,159 --> 01:25:55,990
and the kernel is going to program uh
we will probably allocate a couple pages

4564
01:25:55,990 --> 01:25:56,000
we will probably allocate a couple pages
 

4565
01:25:56,000 --> 01:25:58,229
we will probably allocate a couple pages
for the page table of the user level

4566
01:25:58,229 --> 01:25:58,239
for the page table of the user level
 

4567
01:25:58,239 --> 01:26:01,350
for the page table of the user level
process and we'll fill in the ptes

4568
01:26:01,350 --> 01:26:01,360
process and we'll fill in the ptes
 

4569
01:26:01,360 --> 01:26:03,669
process and we'll fill in the ptes
and then some point when the kernel runs

4570
01:26:03,669 --> 01:26:03,679
and then some point when the kernel runs
 

4571
01:26:03,679 --> 01:26:04,790
and then some point when the kernel runs
that process

4572
01:26:04,790 --> 01:26:04,800
that process
 

4573
01:26:04,800 --> 01:26:08,149
that process
it will load the root

4574
01:26:08,149 --> 01:26:08,159
it will load the root
 

4575
01:26:08,159 --> 01:26:10,629
it will load the root
physical address for those pages that it

4576
01:26:10,629 --> 01:26:10,639
physical address for those pages that it
 

4577
01:26:10,639 --> 01:26:12,629
physical address for those pages that it
allocated for that page table or

4578
01:26:12,629 --> 01:26:12,639
allocated for that page table or
 

4579
01:26:12,639 --> 01:26:14,070
allocated for that page table or
basically for the page table then built

4580
01:26:14,070 --> 01:26:14,080
basically for the page table then built
 

4581
01:26:14,080 --> 01:26:16,550
basically for the page table then built
into the satp register

4582
01:26:16,550 --> 01:26:16,560
into the satp register
 

4583
01:26:16,560 --> 01:26:20,470
into the satp register
and at that point the processor will run

4584
01:26:20,470 --> 01:26:20,480
and at that point the processor will run
 

4585
01:26:20,480 --> 01:26:22,229
and at that point the processor will run
with the virtual address space that the

4586
01:26:22,229 --> 01:26:22,239
with the virtual address space that the
 

4587
01:26:22,239 --> 01:26:23,910
with the virtual address space that the
kernel constructed for that particular

4588
01:26:23,910 --> 01:26:23,920
kernel constructed for that particular
 

4589
01:26:23,920 --> 01:26:27,030
kernel constructed for that particular
process

4590
01:26:27,030 --> 01:26:27,040

 

4591
01:26:27,040 --> 01:26:29,669

uh so the kernel give up some of its

4592
01:26:29,669 --> 01:26:29,679
uh so the kernel give up some of its
 

4593
01:26:29,679 --> 01:26:31,189
uh so the kernel give up some of its
memory

4594
01:26:31,189 --> 01:26:31,199
memory
 

4595
01:26:31,199 --> 01:26:33,350
memory
for processes and then but then the

4596
01:26:33,350 --> 01:26:33,360
for processes and then but then the
 

4597
01:26:33,360 --> 01:26:34,870
for processes and then but then the
virtual space

4598
01:26:34,870 --> 01:26:34,880
virtual space
 

4599
01:26:34,880 --> 01:26:38,629
virtual space
in theory is as big for the process as

4600
01:26:38,629 --> 01:26:38,639
in theory is as big for the process as
 

4601
01:26:38,639 --> 01:26:41,270
in theory is as big for the process as
the current but in reality it's really

4602
01:26:41,270 --> 01:26:41,280
the current but in reality it's really
 

4603
01:26:41,280 --> 01:26:42,310
the current but in reality it's really
not

4604
01:26:42,310 --> 01:26:42,320
not
 

4605
01:26:42,320 --> 01:26:44,629
not
yeah for example yes here's a picture

4606
01:26:44,629 --> 01:26:44,639
yeah for example yes here's a picture
 

4607
01:26:44,639 --> 01:26:45,990
yeah for example yes here's a picture
with the layout of a virtual address

4608
01:26:45,990 --> 01:26:46,000
with the layout of a virtual address
 

4609
01:26:46,000 --> 01:26:47,430
with the layout of a virtual address
space over user level process

4610
01:26:47,430 --> 01:26:47,440
space over user level process
 

4611
01:26:47,440 --> 01:26:51,910
space over user level process
and again it goes from zero to max va

4612
01:26:51,910 --> 01:26:51,920

 

4613
01:26:51,920 --> 01:26:54,709

in the same way as the kernel address

4614
01:26:54,709 --> 01:26:54,719
in the same way as the kernel address
 

4615
01:26:54,719 --> 01:26:55,590
in the same way as the kernel address
space does

4616
01:26:55,590 --> 01:26:55,600
space does
 

4617
01:26:55,600 --> 01:26:57,030
space does
and it just basically has his own set of

4618
01:26:57,030 --> 01:26:57,040
and it just basically has his own set of
 

4619
01:26:57,040 --> 01:26:58,629
and it just basically has his own set of
page tables to map those

4620
01:26:58,629 --> 01:26:58,639
page tables to map those
 

4621
01:26:58,639 --> 01:27:01,270
page tables to map those
do do do translation that the kernel set

4622
01:27:01,270 --> 01:27:01,280
do do do translation that the kernel set
 

4623
01:27:01,280 --> 01:27:03,189
do do do translation that the kernel set
up

4624
01:27:03,189 --> 01:27:03,199
up
 

4625
01:27:03,199 --> 01:27:05,430
up
but we can't actually use all of the max

4626
01:27:05,430 --> 01:27:05,440
but we can't actually use all of the max
 

4627
01:27:05,440 --> 01:27:07,910
but we can't actually use all of the max
va virtually no we cannot

4628
01:27:07,910 --> 01:27:07,920
va virtually no we cannot
 

4629
01:27:07,920 --> 01:27:11,510
va virtually no we cannot
we run out of memory

4630
01:27:11,510 --> 01:27:11,520

 

4631
01:27:11,520 --> 01:27:13,270

so many of the processes are much much

4632
01:27:13,270 --> 01:27:13,280
so many of the processes are much much
 

4633
01:27:13,280 --> 01:27:14,870
so many of the processes are much much
smaller correct than

4634
01:27:14,870 --> 01:27:14,880
smaller correct than
 

4635
01:27:14,880 --> 01:27:19,750
smaller correct than
all of the virtual address space

4636
01:27:19,750 --> 01:27:19,760
all of the virtual address space
 

4637
01:27:19,760 --> 01:27:23,110
all of the virtual address space
i see thinking

4638
01:27:23,110 --> 01:27:23,120

 

4639
01:27:23,120 --> 01:27:26,390

i've got a quick question yep um

4640
01:27:26,390 --> 01:27:26,400
i've got a quick question yep um
 

4641
01:27:26,400 --> 01:27:28,870
i've got a quick question yep um
could you go back to the walk code yeah

4642
01:27:28,870 --> 01:27:28,880
could you go back to the walk code yeah
 

4643
01:27:28,880 --> 01:27:31,430
could you go back to the walk code yeah
yeah yeah absolutely

4644
01:27:31,430 --> 01:27:31,440
yeah yeah absolutely
 

4645
01:27:31,440 --> 01:27:32,950
yeah yeah absolutely
and it's like one of my favorite

4646
01:27:32,950 --> 01:27:32,960
and it's like one of my favorite
 

4647
01:27:32,960 --> 01:27:35,270
and it's like one of my favorite
functions

4648
01:27:35,270 --> 01:27:35,280
functions
 

4649
01:27:35,280 --> 01:27:38,790
functions
uh so i guess um i think one thing i'm

4650
01:27:38,790 --> 01:27:38,800
uh so i guess um i think one thing i'm
 

4651
01:27:38,800 --> 01:27:40,149
uh so i guess um i think one thing i'm
confused about is

4652
01:27:40,149 --> 01:27:40,159
confused about is
 

4653
01:27:40,159 --> 01:27:42,870
confused about is
after you write to the set p register

4654
01:27:42,870 --> 01:27:42,880
after you write to the set p register
 

4655
01:27:42,880 --> 01:27:44,229
after you write to the set p register
can the colonel even

4656
01:27:44,229 --> 01:27:44,239
can the colonel even
 

4657
01:27:44,239 --> 01:27:46,870
can the colonel even
access physical addresses directly so it

4658
01:27:46,870 --> 01:27:46,880
access physical addresses directly so it
 

4659
01:27:46,880 --> 01:27:48,310
access physical addresses directly so it
looks like in the code that it's

4660
01:27:48,310 --> 01:27:48,320
looks like in the code that it's
 

4661
01:27:48,320 --> 01:27:49,750
looks like in the code that it's
converting you know like page tables

4662
01:27:49,750 --> 01:27:49,760
converting you know like page tables
 

4663
01:27:49,760 --> 01:27:51,510
converting you know like page tables
being set to a physical address but if

4664
01:27:51,510 --> 01:27:51,520
being set to a physical address but if
 

4665
01:27:51,520 --> 01:27:53,830
being set to a physical address but if
sap is set

4666
01:27:53,830 --> 01:27:53,840
sap is set
 

4667
01:27:53,840 --> 01:27:56,149
sap is set
um won't that be interpreted as a

4668
01:27:56,149 --> 01:27:56,159
um won't that be interpreted as a
 

4669
01:27:56,159 --> 01:27:57,910
um won't that be interpreted as a
virtual address

4670
01:27:57,910 --> 01:27:57,920
virtual address
 

4671
01:27:57,920 --> 01:28:00,950
virtual address
yeah uh so uh

4672
01:28:00,950 --> 01:28:00,960
yeah uh so uh
 

4673
01:28:00,960 --> 01:28:03,990
yeah uh so uh
okay so let's look at uh whatever the

4674
01:28:03,990 --> 01:28:04,000
okay so let's look at uh whatever the
 

4675
01:28:04,000 --> 01:28:09,669
okay so let's look at uh whatever the
heart in it

4676
01:28:09,669 --> 01:28:09,679

 

4677
01:28:09,679 --> 01:28:13,669

so there's kvm so built in the kernel

4678
01:28:13,669 --> 01:28:13,679
so there's kvm so built in the kernel
 

4679
01:28:13,679 --> 01:28:15,030
so there's kvm so built in the kernel
address space

4680
01:28:15,030 --> 01:28:15,040
address space
 

4681
01:28:15,040 --> 01:28:19,830
address space
uh the kernel page table uh

4682
01:28:19,830 --> 01:28:19,840
uh the kernel page table uh
 

4683
01:28:19,840 --> 01:28:22,470
uh the kernel page table uh
initially is a ver physical you know

4684
01:28:22,470 --> 01:28:22,480
initially is a ver physical you know
 

4685
01:28:22,480 --> 01:28:24,790
initially is a ver physical you know
there's an address it's translated to

4686
01:28:24,790 --> 01:28:24,800
there's an address it's translated to
 

4687
01:28:24,800 --> 01:28:26,709
there's an address it's translated to
uh a physical address and that's

4688
01:28:26,709 --> 01:28:26,719
uh a physical address and that's
 

4689
01:28:26,719 --> 01:28:31,189
uh a physical address and that's
actually written into the satp register

4690
01:28:31,189 --> 01:28:31,199

 

4691
01:28:31,199 --> 01:28:32,870

and at that point you know we're running

4692
01:28:32,870 --> 01:28:32,880
and at that point you know we're running
 

4693
01:28:32,880 --> 01:28:34,709
and at that point you know we're running
with the address space that we

4694
01:28:34,709 --> 01:28:34,719
with the address space that we
 

4695
01:28:34,719 --> 01:28:35,669
with the address space that we
constructed

4696
01:28:35,669 --> 01:28:35,679
constructed
 

4697
01:28:35,679 --> 01:28:37,590
constructed
like right before here in this kvm

4698
01:28:37,590 --> 01:28:37,600
like right before here in this kvm
 

4699
01:28:37,600 --> 01:28:39,910
like right before here in this kvm
minute

4700
01:28:39,910 --> 01:28:39,920
minute
 

4701
01:28:39,920 --> 01:28:42,310
minute
and kvn map is basically nothing else

4702
01:28:42,310 --> 01:28:42,320
and kvn map is basically nothing else
 

4703
01:28:42,320 --> 01:28:42,950
and kvn map is basically nothing else
than

4704
01:28:42,950 --> 01:28:42,960
than
 

4705
01:28:42,960 --> 01:28:46,310
than
calling uh uh walk

4706
01:28:46,310 --> 01:28:46,320
calling uh uh walk
 

4707
01:28:46,320 --> 01:28:48,629
calling uh uh walk
for every address or every page in that

4708
01:28:48,629 --> 01:28:48,639
for every address or every page in that
 

4709
01:28:48,639 --> 01:28:50,310
for every address or every page in that
range

4710
01:28:50,310 --> 01:28:50,320
range
 

4711
01:28:50,320 --> 01:28:53,590
range
and so what was your question uh

4712
01:28:53,590 --> 01:28:53,600
and so what was your question uh
 

4713
01:28:53,600 --> 01:28:56,870
and so what was your question uh
um i guess it's does walk still work the

4714
01:28:56,870 --> 01:28:56,880
um i guess it's does walk still work the
 

4715
01:28:56,880 --> 01:28:58,629
um i guess it's does walk still work the
same way if you call it after

4716
01:28:58,629 --> 01:28:58,639
same way if you call it after
 

4717
01:28:58,639 --> 01:29:04,550
same way if you call it after
set p is set yeah why

4718
01:29:04,550 --> 01:29:04,560

 

4719
01:29:04,560 --> 01:29:06,550

yeah why why would it work out the

4720
01:29:06,550 --> 01:29:06,560
yeah why why would it work out the
 

4721
01:29:06,560 --> 01:29:07,910
yeah why why would it work out the
reason it will work out is because the

4722
01:29:07,910 --> 01:29:07,920
reason it will work out is because the
 

4723
01:29:07,920 --> 01:29:11,669
reason it will work out is because the
kernel set up in identity mapping

4724
01:29:11,669 --> 01:29:11,679
kernel set up in identity mapping
 

4725
01:29:11,679 --> 01:29:15,350
kernel set up in identity mapping
uh okay right right

4726
01:29:15,350 --> 01:29:15,360
uh okay right right
 

4727
01:29:15,360 --> 01:29:18,470
uh okay right right
very important very good question

4728
01:29:18,470 --> 01:29:18,480
very important very good question
 

4729
01:29:18,480 --> 01:29:20,229
very important very good question
like a lot of things just happen to work

4730
01:29:20,229 --> 01:29:20,239
like a lot of things just happen to work
 

4731
01:29:20,239 --> 01:29:21,510
like a lot of things just happen to work
out because actually the identity

4732
01:29:21,510 --> 01:29:21,520
out because actually the identity
 

4733
01:29:21,520 --> 01:29:24,629
out because actually the identity
mapping is set up

4734
01:29:24,629 --> 01:29:24,639
mapping is set up
 

4735
01:29:24,639 --> 01:29:28,709
mapping is set up
i see okay i think that makes sense yeah

4736
01:29:28,709 --> 01:29:28,719
i see okay i think that makes sense yeah
 

4737
01:29:28,719 --> 01:29:32,550
i see okay i think that makes sense yeah
thanks i have a good question

4738
01:29:32,550 --> 01:29:32,560
thanks i have a good question
 

4739
01:29:32,560 --> 01:29:35,830
thanks i have a good question
no um where are the satp registers

4740
01:29:35,830 --> 01:29:35,840
no um where are the satp registers
 

4741
01:29:35,840 --> 01:29:36,550
no um where are the satp registers
stored for

4742
01:29:36,550 --> 01:29:36,560
stored for
 

4743
01:29:36,560 --> 01:29:39,830
stored for
all of the processes there's only one

4744
01:29:39,830 --> 01:29:39,840
all of the processes there's only one
 

4745
01:29:39,840 --> 01:29:41,990
all of the processes there's only one
satp per core

4746
01:29:41,990 --> 01:29:42,000
satp per core
 

4747
01:29:42,000 --> 01:29:45,030
satp per core
uh but in every proc structure

4748
01:29:45,030 --> 01:29:45,040
uh but in every proc structure
 

4749
01:29:45,040 --> 01:29:48,950
uh but in every proc structure
okay in every if you look in proctored h

4750
01:29:48,950 --> 01:29:48,960
okay in every if you look in proctored h
 

4751
01:29:48,960 --> 01:29:52,709
okay in every if you look in proctored h
uh there is a

4752
01:29:52,709 --> 01:29:52,719
uh there is a
 

4753
01:29:52,719 --> 01:29:55,990
uh there is a
uh uh pointed to the page table here

4754
01:29:55,990 --> 01:29:56,000
uh uh pointed to the page table here
 

4755
01:29:56,000 --> 01:29:58,790
uh uh pointed to the page table here
here okay that makes sense yep um and

4756
01:29:58,790 --> 01:29:58,800
here okay that makes sense yep um and
 

4757
01:29:58,800 --> 01:29:59,430
here okay that makes sense yep um and
also

4758
01:29:59,430 --> 01:29:59,440
also
 

4759
01:29:59,440 --> 01:30:02,870
also
um with regards to the three uh page

4760
01:30:02,870 --> 01:30:02,880
um with regards to the three uh page
 

4761
01:30:02,880 --> 01:30:05,750
um with regards to the three uh page
tables are like the three tables that

4762
01:30:05,750 --> 01:30:05,760
tables are like the three tables that
 

4763
01:30:05,760 --> 01:30:06,070
tables are like the three tables that
can

4764
01:30:06,070 --> 01:30:06,080
can
 

4765
01:30:06,080 --> 01:30:07,750
can
complete the full address and help you

4766
01:30:07,750 --> 01:30:07,760
complete the full address and help you
 

4767
01:30:07,760 --> 01:30:09,510
complete the full address and help you
get a full address for

4768
01:30:09,510 --> 01:30:09,520
get a full address for
 

4769
01:30:09,520 --> 01:30:12,470
get a full address for
um given something um how does how is

4770
01:30:12,470 --> 01:30:12,480
um given something um how does how is
 

4771
01:30:12,480 --> 01:30:13,910
um given something um how does how is
that better i guess than

4772
01:30:13,910 --> 01:30:13,920
that better i guess than
 

4773
01:30:13,920 --> 01:30:16,629
that better i guess than
than having one giant page table i

4774
01:30:16,629 --> 01:30:16,639
than having one giant page table i
 

4775
01:30:16,639 --> 01:30:18,149
than having one giant page table i
didn't really fully understand that okay

4776
01:30:18,149 --> 01:30:18,159
didn't really fully understand that okay
 

4777
01:30:18,159 --> 01:30:18,709
didn't really fully understand that okay
good good

4778
01:30:18,709 --> 01:30:18,719
good good
 

4779
01:30:18,719 --> 01:30:20,709
good good
there's a good great question the reason

4780
01:30:20,709 --> 01:30:20,719
there's a good great question the reason
 

4781
01:30:20,719 --> 01:30:22,149
there's a good great question the reason
is is because in the free level page

4782
01:30:22,149 --> 01:30:22,159
is is because in the free level page
 

4783
01:30:22,159 --> 01:30:23,750
is is because in the free level page
table you can leave a lot of entries

4784
01:30:23,750 --> 01:30:23,760
table you can leave a lot of entries
 

4785
01:30:23,760 --> 01:30:25,030
table you can leave a lot of entries
empty

4786
01:30:25,030 --> 01:30:25,040
empty
 

4787
01:30:25,040 --> 01:30:27,830
empty
so for example if you leave the an entry

4788
01:30:27,830 --> 01:30:27,840
so for example if you leave the an entry
 

4789
01:30:27,840 --> 01:30:29,350
so for example if you leave the an entry
in the top level page table

4790
01:30:29,350 --> 01:30:29,360
in the top level page table
 

4791
01:30:29,360 --> 01:30:31,590
in the top level page table
directly empty you don't have to create

4792
01:30:31,590 --> 01:30:31,600
directly empty you don't have to create
 

4793
01:30:31,600 --> 01:30:33,110
directly empty you don't have to create
middle level page tables

4794
01:30:33,110 --> 01:30:33,120
middle level page tables
 

4795
01:30:33,120 --> 01:30:35,189
middle level page tables
or bottom level page tables at all for

4796
01:30:35,189 --> 01:30:35,199
or bottom level page tables at all for
 

4797
01:30:35,199 --> 01:30:36,550
or bottom level page tables at all for
those entries

4798
01:30:36,550 --> 01:30:36,560
those entries
 

4799
01:30:36,560 --> 01:30:38,870
those entries
okay and so like this means like a big

4800
01:30:38,870 --> 01:30:38,880
okay and so like this means like a big
 

4801
01:30:38,880 --> 01:30:39,669
okay and so like this means like a big
swath

4802
01:30:39,669 --> 01:30:39,679
swath
 

4803
01:30:39,679 --> 01:30:41,110
swath
of the whole virtual address page

4804
01:30:41,110 --> 01:30:41,120
of the whole virtual address page
 

4805
01:30:41,120 --> 01:30:44,870
of the whole virtual address page
doesn't have to have any mappings at all

4806
01:30:44,870 --> 01:30:44,880
doesn't have to have any mappings at all
 

4807
01:30:44,880 --> 01:30:46,950
doesn't have to have any mappings at all
okay okay you don't have the table there

4808
01:30:46,950 --> 01:30:46,960
okay okay you don't have the table there
 

4809
01:30:46,960 --> 01:30:48,950
okay okay you don't have the table there
it just doesn't exist

4810
01:30:48,950 --> 01:30:48,960
it just doesn't exist
 

4811
01:30:48,960 --> 01:30:51,750
it just doesn't exist
see basically allocating these chunks on

4812
01:30:51,750 --> 01:30:51,760
see basically allocating these chunks on
 

4813
01:30:51,760 --> 01:30:52,390
see basically allocating these chunks on
demand

4814
01:30:52,390 --> 01:30:52,400
demand
 

4815
01:30:52,400 --> 01:30:54,229
demand
as opposed to auditing and typing okay

4816
01:30:54,229 --> 01:30:54,239
as opposed to auditing and typing okay
 

4817
01:30:54,239 --> 01:30:55,750
as opposed to auditing and typing okay
that makes sense yeah you start out

4818
01:30:55,750 --> 01:30:55,760
that makes sense yeah you start out
 

4819
01:30:55,760 --> 01:30:56,790
that makes sense yeah you start out
basically with three

4820
01:30:56,790 --> 01:30:56,800
basically with three
 

4821
01:30:56,800 --> 01:30:58,870
basically with three
page three pages namely one from the top

4822
01:30:58,870 --> 01:30:58,880
page three pages namely one from the top
 

4823
01:30:58,880 --> 01:31:00,470
page three pages namely one from the top
level one for the and one intermediate

4824
01:31:00,470 --> 01:31:00,480
level one for the and one intermediate
 

4825
01:31:00,480 --> 01:31:03,189
level one for the and one intermediate
and one for a and one bottom level

4826
01:31:03,189 --> 01:31:03,199
and one for a and one bottom level
 

4827
01:31:03,199 --> 01:31:05,189
and one for a and one bottom level
and then as you go you create more page

4828
01:31:05,189 --> 01:31:05,199
and then as you go you create more page
 

4829
01:31:05,199 --> 01:31:06,790
and then as you go you create more page
stable directories

4830
01:31:06,790 --> 01:31:06,800
stable directories
 

4831
01:31:06,800 --> 01:31:10,229
stable directories
okay okay cool cool thank you so much

4832
01:31:10,229 --> 01:31:10,239
okay okay cool cool thank you so much
 

4833
01:31:10,239 --> 01:31:14,550
okay okay cool cool thank you so much
are you welcome any more questions

4834
01:31:14,550 --> 01:31:14,560
are you welcome any more questions
 

4835
01:31:14,560 --> 01:31:17,189
are you welcome any more questions
oh sorry i have another one it's really

4836
01:31:17,189 --> 01:31:17,199
oh sorry i have another one it's really
 

4837
01:31:17,199 --> 01:31:18,390
oh sorry i have another one it's really
really small but

4838
01:31:18,390 --> 01:31:18,400
really small but
 

4839
01:31:18,400 --> 01:31:21,590
really small but
um in the vm dot c

4840
01:31:21,590 --> 01:31:21,600
um in the vm dot c
 

4841
01:31:21,600 --> 01:31:24,790
um in the vm dot c
online 43 yep or sorry 40

4842
01:31:24,790 --> 01:31:24,800
online 43 yep or sorry 40
 

4843
01:31:24,800 --> 01:31:28,709
online 43 yep or sorry 40
1 40 yeah um it says that it

4844
01:31:28,709 --> 01:31:28,719
1 40 yeah um it says that it
 

4845
01:31:28,719 --> 01:31:32,149
1 40 yeah um it says that it
no never nevermind 43. my bad um it says

4846
01:31:32,149 --> 01:31:32,159
no never nevermind 43. my bad um it says
 

4847
01:31:32,159 --> 01:31:33,189
no never nevermind 43. my bad um it says
physical stop

4848
01:31:33,189 --> 01:31:33,199
physical stop
 

4849
01:31:33,199 --> 01:31:36,709
physical stop
minus um un-64 e-text

4850
01:31:36,709 --> 01:31:36,719
minus um un-64 e-text
 

4851
01:31:36,719 --> 01:31:39,750
minus um un-64 e-text
but wouldn't that would not go over

4852
01:31:39,750 --> 01:31:39,760
but wouldn't that would not go over
 

4853
01:31:39,760 --> 01:31:43,270
but wouldn't that would not go over
the um i guess the memory that

4854
01:31:43,270 --> 01:31:43,280
the um i guess the memory that
 

4855
01:31:43,280 --> 01:31:46,550
the um i guess the memory that
we shouldn't touch i don't know if that

4856
01:31:46,550 --> 01:31:46,560
we shouldn't touch i don't know if that
 

4857
01:31:46,560 --> 01:31:47,590
we shouldn't touch i don't know if that
makes sense but

4858
01:31:47,590 --> 01:31:47,600
makes sense but
 

4859
01:31:47,600 --> 01:31:51,110
makes sense but
um wouldn't that go

4860
01:31:51,110 --> 01:31:51,120
um wouldn't that go
 

4861
01:31:51,120 --> 01:31:52,790
um wouldn't that go
i guess i don't i don't understand

4862
01:31:52,790 --> 01:31:52,800
i guess i don't i don't understand
 

4863
01:31:52,800 --> 01:31:55,830
i guess i don't i don't understand
wouldn't i go over free memory

4864
01:31:55,830 --> 01:31:55,840
wouldn't i go over free memory
 

4865
01:31:55,840 --> 01:31:59,830
wouldn't i go over free memory
uh no i don't think so uh

4866
01:31:59,830 --> 01:31:59,840
uh no i don't think so uh
 

4867
01:31:59,840 --> 01:32:03,669
uh no i don't think so uh
so current base is ox8800 correct so

4868
01:32:03,669 --> 01:32:03,679
so current base is ox8800 correct so
 

4869
01:32:03,679 --> 01:32:04,629
so current base is ox8800 correct so
that's the beginning

4870
01:32:04,629 --> 01:32:04,639
that's the beginning
 

4871
01:32:04,639 --> 01:32:08,390
that's the beginning
of memory uh and the kernel sits there

4872
01:32:08,390 --> 01:32:08,400
of memory uh and the kernel sits there
 

4873
01:32:08,400 --> 01:32:12,550
of memory uh and the kernel sits there
and uh basically

4874
01:32:12,550 --> 01:32:12,560
and uh basically
 

4875
01:32:12,560 --> 01:32:16,149
and uh basically
this thing is a size right so e-text is

4876
01:32:16,149 --> 01:32:16,159
this thing is a size right so e-text is
 

4877
01:32:16,159 --> 01:32:18,229
this thing is a size right so e-text is
the last address of the kernel

4878
01:32:18,229 --> 01:32:18,239
the last address of the kernel
 

4879
01:32:18,239 --> 01:32:19,910
the last address of the kernel
subtract current base that basically

4880
01:32:19,910 --> 01:32:19,920
subtract current base that basically
 

4881
01:32:19,920 --> 01:32:22,790
subtract current base that basically
gives you the size of the kernel

4882
01:32:22,790 --> 01:32:22,800
gives you the size of the kernel
 

4883
01:32:22,800 --> 01:32:26,470
gives you the size of the kernel
uh in uh in bytes

4884
01:32:26,470 --> 01:32:26,480
uh in uh in bytes
 

4885
01:32:26,480 --> 01:32:28,629
uh in uh in bytes
and you know i don't know how much it is

4886
01:32:28,629 --> 01:32:28,639
and you know i don't know how much it is
 

4887
01:32:28,639 --> 01:32:29,830
and you know i don't know how much it is
but the uh

4888
01:32:29,830 --> 01:32:29,840
but the uh
 

4889
01:32:29,840 --> 01:32:32,229
but the uh
uh it's like you know 60 or 90 pages or

4890
01:32:32,229 --> 01:32:32,239
uh it's like you know 60 or 90 pages or
 

4891
01:32:32,239 --> 01:32:33,990
uh it's like you know 60 or 90 pages or
something like that

4892
01:32:33,990 --> 01:32:34,000
something like that
 

4893
01:32:34,000 --> 01:32:36,470
something like that
uh and so this map is basically the text

4894
01:32:36,470 --> 01:32:36,480
uh and so this map is basically the text
 

4895
01:32:36,480 --> 01:32:39,430
uh and so this map is basically the text
part of the kernel

4896
01:32:39,430 --> 01:32:39,440

 

4897
01:32:39,440 --> 01:32:43,270

and uh and there's enough space

4898
01:32:43,270 --> 01:32:43,280
and uh and there's enough space
 

4899
01:32:43,280 --> 01:32:45,590
and uh and there's enough space
uh there's enough dram you know to map

4900
01:32:45,590 --> 01:32:45,600
uh there's enough dram you know to map
 

4901
01:32:45,600 --> 01:32:47,430
uh there's enough dram you know to map
that

4902
01:32:47,430 --> 01:32:47,440
that
 

4903
01:32:47,440 --> 01:32:49,350
that
the kernel text i'm not sure i'm

4904
01:32:49,350 --> 01:32:49,360
the kernel text i'm not sure i'm
 

4905
01:32:49,360 --> 01:32:51,189
the kernel text i'm not sure i'm
answering your question but

4906
01:32:51,189 --> 01:32:51,199
answering your question but
 

4907
01:32:51,199 --> 01:32:54,149
answering your question but
oh oh i think i think i understand i

4908
01:32:54,149 --> 01:32:54,159
oh oh i think i think i understand i
 

4909
01:32:54,159 --> 01:32:54,870
oh oh i think i think i understand i
thought that

4910
01:32:54,870 --> 01:32:54,880
thought that
 

4911
01:32:54,880 --> 01:32:57,669
thought that
attacks starts somewhere else okay i

4912
01:32:57,669 --> 01:32:57,679
attacks starts somewhere else okay i
 

4913
01:32:57,679 --> 01:32:58,790
attacks starts somewhere else okay i
think i understand now thank you

4914
01:32:58,790 --> 01:32:58,800
think i understand now thank you
 

4915
01:32:58,800 --> 01:33:00,229
think i understand now thank you
so much is basically the last

4916
01:33:00,229 --> 01:33:00,239
so much is basically the last
 

4917
01:33:00,239 --> 01:33:01,830
so much is basically the last
instruction the address of the last

4918
01:33:01,830 --> 01:33:01,840
instruction the address of the last
 

4919
01:33:01,840 --> 01:33:03,669
instruction the address of the last
instruction of the kernel

4920
01:33:03,669 --> 01:33:03,679
instruction of the kernel
 

4921
01:33:03,679 --> 01:33:06,560
instruction of the kernel
okay okay

