0
00:00:00,030 --> 00:00:04,500
For a function already signed in whose curiosity,

1
00:00:04,501 --> 00:00:06,300
how is your experience been with thee?

2
00:00:06,301 --> 00:00:08,280
translate afternoon?

3
00:00:08,281 --> 00:00:09,030
If you really?

4
00:00:09,031 --> 00:00:11,130
I started on their lazy allocation.

5
00:00:11,131 --> 00:00:11,610
While how,

6
00:00:11,611 --> 00:00:12,480
how is that going?

7
00:00:13,860 --> 00:00:14,520
Here to here,

8
00:00:14,521 --> 00:00:16,380
what did I ever saw?

9
00:00:16,381 --> 00:00:18,300
Less painful than the peach table?

10
00:00:18,301 --> 00:00:18,660
Laugh.

11
00:00:21,390 --> 00:00:23,220
And you don't want to say something about that.

12
00:00:32,100 --> 00:00:33,900
I thought the drops lab was okay.

13
00:00:35,100 --> 00:00:35,730
It was just.

14
00:00:37,350 --> 00:00:44,460
Making sure that I've actually used the trampling page properly was a little annoying,

15
00:00:44,461 --> 00:00:46,080
but once I figured that out then,

16
00:00:46,081 --> 00:00:48,480
then I just like going to work.

17
00:00:48,481 --> 00:00:48,810
Yeah,

18
00:00:48,811 --> 00:00:51,900
they don't go with the lab was sure to really expose you to the year.

19
00:00:52,920 --> 00:00:57,150
Trap handling into entry and exit.

20
00:01:02,070 --> 00:01:03,570
How about an I'm here?

21
00:01:03,571 --> 00:01:05,340
What was your experience to be shared with me?

22
00:01:09,690 --> 00:01:12,480
I thought the trap slump was good,

23
00:01:12,481 --> 00:01:17,610
very much more manageable than the page table.

24
00:01:17,611 --> 00:01:22,620
I noticed that there were like opportunities to be clever about some aspects of the implementation,

25
00:01:22,621 --> 00:01:23,970
which is nice,

26
00:01:23,971 --> 00:01:26,850
and the lazy love is good.

27
00:01:26,851 --> 00:01:29,580
so far of debugging,

28
00:01:29,581 --> 00:01:32,460
but both better than the page table of moving him.

29
00:01:32,461 --> 00:01:33,270
Why did you hear that?

30
00:01:34,320 --> 00:01:37,050
I'm sure you are glad to get up at quantico or two.

31
00:01:40,590 --> 00:01:42,090
How about the right?

32
00:01:44,520 --> 00:01:45,270
Yeah,

33
00:01:45,271 --> 00:01:51,000
these two previous lives have been lot better than the page table one.

34
00:01:51,001 --> 00:01:52,020
Oh,

35
00:01:52,021 --> 00:01:52,770
I guess.

36
00:01:53,850 --> 00:01:55,950
The hardest part for the latest slump,

37
00:01:55,951 --> 00:02:00,510
though lazy one was to read and write.

38
00:02:00,511 --> 00:02:01,950
and all that stuff.

39
00:02:01,951 --> 00:02:02,940
But it's not.

40
00:02:02,941 --> 00:02:04,170
It's not that that,

41
00:02:04,171 --> 00:02:04,890
in my opinion.

42
00:02:05,790 --> 00:02:05,820
Ah.

43
00:02:11,550 --> 00:02:11,910
How would you,

44
00:02:11,911 --> 00:02:13,740
Catherine,

45
00:02:13,741 --> 00:02:19,140
to trap Latin laser Lab for your readers in comparison to the picks up a lab?

46
00:02:33,390 --> 00:02:33,810
Are you there,

47
00:02:33,811 --> 00:02:34,320
Catherine,

48
00:02:34,321 --> 00:02:35,400
Like its Kathryn Weeks?

49
00:02:36,750 --> 00:02:37,230
Hello,

50
00:02:37,231 --> 00:02:37,920
I'm doing well,

51
00:02:37,921 --> 00:02:40,320
so I didn't know which Catherine you're talking to.

52
00:02:40,321 --> 00:02:41,400
I guess it's really too many people,

53
00:02:41,401 --> 00:02:49,140
so you're not likely that there's another one I'm doing quite well to get.

54
00:02:49,141 --> 00:02:51,210
His life is less painful than a Phd in Lahore.

55
00:02:51,211 --> 00:02:51,510
Yes,

56
00:02:51,511 --> 00:02:52,920
it is definitely less painful.

57
00:02:55,500 --> 00:02:55,950
Looks like.

58
00:02:59,520 --> 00:03:06,600
The one the one after a page tables that love is that traps that was definitely much simpler.

59
00:03:09,510 --> 00:03:10,770
OK,

60
00:03:10,771 --> 00:03:13,200
I'm glad to hear that and just wanted to get rid of any formal ball.

61
00:03:13,201 --> 00:03:22,800
See the pitch staple turned out harder than we thought a wood and so like you get at these ones are better OK.

62
00:03:22,801 --> 00:03:28,620
So what do we get going and welcome to the next lecture in a situation now,

63
00:03:28,621 --> 00:03:30,780
wherever you are,

64
00:03:30,781 --> 00:03:36,150
so the topic for today is about interrupts before jumping into you sort of talking about interrupts.

65
00:03:36,151 --> 00:03:38,100
I wanted to share a little bit.

66
00:03:38,101 --> 00:03:41,010
one thing that I wanted to talk about last week,

67
00:03:41,011 --> 00:03:42,840
which I didn't get around to it through,

68
00:03:42,841 --> 00:03:44,760
and you know what you might find interesting.

69
00:03:48,000 --> 00:03:51,030
Let me see if I can get my right screen Europe.

70
00:03:51,031 --> 00:03:55,590
So here you see my screens here on the bottom left,

71
00:03:55,591 --> 00:04:01,260
I make a longing to Athena through the dialogue machines,

72
00:04:01,261 --> 00:04:05,370
and there's a couple of things I wanted to talk about.

73
00:04:05,371 --> 00:04:09,630
It turned to how memory is being used by real operating system.

74
00:04:09,631 --> 00:04:11,160
since we talked a lot about that last week.

75
00:04:11,161 --> 00:04:12,150
In particular at the end of the lecture.

76
00:04:12,151 --> 00:04:13,650
We're a lot of questions about,

77
00:04:13,651 --> 00:04:13,740
you.

78
00:04:13,741 --> 00:04:14,040
know,

79
00:04:14,041 --> 00:04:15,510
pick out,

80
00:04:15,511 --> 00:04:18,840
finding free memory and all that kind of stuff,

81
00:04:18,841 --> 00:04:19,770
and so this isn't a one.

82
00:04:19,771 --> 00:04:21,540
Have you seen a change?

83
00:04:21,541 --> 00:04:24,960
You're wanting to know that if you look at a memory line,

84
00:04:24,961 --> 00:04:32,190
I guess it tells you how much I could a program running school talk if you used it,

85
00:04:32,191 --> 00:04:35,070
you see how much machine memories in the machine and as you can see,

86
00:04:35,071 --> 00:04:39,630
there's quite a bit of memory in this machine,

87
00:04:39,631 --> 00:04:40,890
and if you look at it,

88
00:04:40,891 --> 00:04:42,210
it will be carefully he actually.

89
00:04:42,211 --> 00:04:44,070
Most of it is used.

90
00:04:47,430 --> 00:04:50,220
A large part of the memory that's not being used by applications,

91
00:04:50,221 --> 00:04:52,530
but it actually used by the buffer cache,

92
00:04:52,531 --> 00:04:54,990
and so this is quite common in an operating system.

93
00:04:54,991 --> 00:04:59,340
You don't really want to leave your physical memory sitting idle and do nothing.

94
00:04:59,341 --> 00:05:01,050
We might as well use it for something useful.

95
00:05:01,051 --> 00:05:05,670
And so in this case you know the a good chunk of it is actually used for the buffer.

96
00:05:05,671 --> 00:05:09,690
Cache is a little bit of memory free.

97
00:05:09,691 --> 00:05:15,030
not march refraction of light from the total memory that actually is in the machine,

98
00:05:15,031 --> 00:05:16,770
and so this is a very common case for,

99
00:05:16,771 --> 00:05:19,110
like most operating systems are run.

100
00:05:19,111 --> 00:05:19,620
Ah,

101
00:05:19,621 --> 00:05:22,590
we basically almost no memory free at any particular instant in time.

102
00:05:24,210 --> 00:05:25,050
And so in a move,

103
00:05:25,051 --> 00:05:25,620
for example,

104
00:05:25,621 --> 00:05:31,170
if an application or the kernel needs some memory and we'll have to throw out something,

105
00:05:31,171 --> 00:05:32,160
maybe it has enough.

106
00:05:32,161 --> 00:05:34,740
If a few pages were a handful of pages.

107
00:05:34,741 --> 00:05:36,660
but at some point it needs a lot of free memory.

108
00:05:36,661 --> 00:05:40,350
It will ask the evict something either from the applications or from the buffer cache.

109
00:05:41,460 --> 00:05:42,870
As I was looking at this river,

110
00:05:42,871 --> 00:05:44,790
and so the main point here are basically used that year,

111
00:05:44,791 --> 00:05:46,320
when the kernel needs to allocate memory for you,

112
00:05:46,321 --> 00:05:48,390
there's actually not generally not a cheap operation,

113
00:05:48,391 --> 00:05:50,460
because the memory is not.

114
00:05:50,461 --> 00:05:52,170
There's not a ton of memory free available.

115
00:05:53,430 --> 00:05:55,080
You're doing this sort of interesting to look at it.

116
00:05:55,081 --> 00:06:02,070
I sorted the output of a top by the amount of resident memory.

117
00:06:02,071 --> 00:06:04,830
so you look at every line for every process you know.

118
00:06:04,831 --> 00:06:08,370
you see that this is the size of the address space,

119
00:06:08,371 --> 00:06:14,280
and then the next line that tells you how much memory is actually being used to like the amount of physical memory,

120
00:06:14,281 --> 00:06:17,910
the fraction of the dress beta actually easy in physical memory and as you can see it.

121
00:06:17,911 --> 00:06:18,210
Actually,

122
00:06:18,211 --> 00:06:18,420
you know,

123
00:06:18,421 --> 00:06:22,200
it's typically way smaller than the address space.

124
00:06:22,201 --> 00:06:24,300
So the tricks that we talked about last order,

125
00:06:24,301 --> 00:06:25,620
the cool ideas.

126
00:06:25,621 --> 00:06:28,830
If your memory provides are being used here.

127
00:06:28,831 --> 00:06:42,180
and I'll use demand paging the sheriff call me shared pages from the shared libraries and using general that basically the resident memory is much much much smaller than the virtual address.

128
00:06:42,181 --> 00:06:42,540
Space.

129
00:06:43,830 --> 00:06:48,390
Maybe a couple of other interesting things that you should note just like looking at this machine.

130
00:06:48,391 --> 00:06:49,680
The load is very low,

131
00:06:49,681 --> 00:06:54,840
even though the one hundred twenty years until one hundred two years in London.

132
00:06:54,841 --> 00:06:57,510
And you're going to see there's a lot of processes,

133
00:06:57,511 --> 00:07:04,050
no nine hundred fifty year Earth roughly nothing to know how long the machine has been up like two hundred forty,

134
00:07:04,051 --> 00:07:05,880
nine days.

135
00:07:05,881 --> 00:07:06,600
you're actually strikes.

136
00:07:06,601 --> 00:07:09,300
Colonel was probably not up that long at all ever.

137
00:07:12,840 --> 00:07:13,950
Okay,

138
00:07:13,951 --> 00:07:16,950
any questions about this to sort of cover,

139
00:07:16,951 --> 00:07:17,880
the main point being that,

140
00:07:17,881 --> 00:07:23,010
like most families in use and the resident memory is typically much smaller than the virtual address space.

141
00:07:27,480 --> 00:07:30,630
You can afford to run this in yourself if you want to and see you an extrovert.

142
00:07:33,420 --> 00:07:34,110
Any questions.

143
00:07:35,820 --> 00:07:41,670
You see some of the cyclical weighed one still being locked in and if you look around and you see a whole bunch of few years right.

144
00:07:43,500 --> 00:07:45,420
Okay,

145
00:07:45,421 --> 00:07:46,350
no questions!

146
00:07:46,351 --> 00:07:48,780
Let me go back to the topic for today,

147
00:07:48,781 --> 00:07:49,920
which is sure interrupts.

148
00:07:52,320 --> 00:08:02,100
And the basic idea is wearing a very straightforward or what we want to enable is that there's going to be cases where two hardware.

149
00:08:02,101 --> 00:08:03,240
I want attention.

150
00:08:06,960 --> 00:08:07,890
I want to tell you now.

151
00:08:11,100 --> 00:08:14,820
A pack of comes in from the network and answered the network.

152
00:08:14,821 --> 00:08:23,580
The network at card generates and interrupt you to talk to a key on the keyboard and the keyboard generates and interrupt.

153
00:08:23,581 --> 00:08:26,610
And you know what the chauffeur has to do.

154
00:08:26,611 --> 00:08:29,670
using the software has to save its work.

155
00:08:29,671 --> 00:08:31,350
Whatever he was doing right now.

156
00:08:33,120 --> 00:08:34,170
Put it on the side.

157
00:08:35,220 --> 00:08:35,430
You know,

158
00:08:35,431 --> 00:08:36,510
process the interrupt.

159
00:08:41,700 --> 00:08:45,450
An resume or a store into the work that it is doing.

160
00:08:51,090 --> 00:08:53,490
And basically,

161
00:08:53,491 --> 00:08:56,250
that saving and restoring it was very,

162
00:08:56,251 --> 00:09:00,030
very similar to the mechanisms that already have seen before,

163
00:09:00,031 --> 00:09:01,380
namely for system calls.

164
00:09:04,920 --> 00:09:05,790
And traps.

165
00:09:08,190 --> 00:09:09,750
Pitfalls,

166
00:09:09,751 --> 00:09:11,040
you'll use the same mechanism.

167
00:09:18,990 --> 00:09:19,710
So in that sense,

168
00:09:19,711 --> 00:09:19,920
you know,

169
00:09:19,921 --> 00:09:24,180
interrupts are no different whatsoever compared to traps.

170
00:09:24,181 --> 00:09:30,510
The system calls when a couple things that make them a little bit different and why it works from spinning in a lecture on them.

171
00:09:30,511 --> 00:09:33,390
So the free basically thinks not make interrupts.

172
00:09:35,430 --> 00:09:38,940
Slightly different from system calls and exceptions,

173
00:09:38,941 --> 00:09:42,450
one we can forget a word I'm going to call their asynchronous.

174
00:09:46,350 --> 00:09:53,280
And we've got a mean that the system called the interrupt that happens when the hardware actually generate an interruption,

175
00:09:53,281 --> 00:10:00,480
and the interrupt handler runs that interrupt handler might actually had nothing to do with the current running process on the sea view.

176
00:10:00,481 --> 00:10:04,980
so it would like your example when you do a system call her when the system call happens and then you jump into.

177
00:10:04,981 --> 00:10:05,940
The kernel,

178
00:10:05,941 --> 00:10:09,390
then were running in the context of the calling process.

179
00:10:09,391 --> 00:10:11,400
and this is not true with interrupt.

180
00:10:11,401 --> 00:10:20,130
They might have been completely unrelated to actually the process that you know it was running and Scipio might actually have nothing to do with the inner handler may not even have cost it.

181
00:10:21,360 --> 00:10:24,630
So that's a different second of all,

182
00:10:24,631 --> 00:10:28,830
there is much more concurrency that we have seen so far.

183
00:10:28,831 --> 00:10:35,880
In fact you know this is a starting stock in a place where you're talking about concurrency,

184
00:10:35,881 --> 00:10:38,850
and we'll talk about it in Wednesday's lecture a lot more.

185
00:10:38,851 --> 00:10:47,250
The basic observation is that basically to seek you and the device that generate this operate in parallel the yard with another card.

186
00:10:47,251 --> 00:10:48,510
Here she's doing its thing.

187
00:10:48,511 --> 00:10:51,870
Europe needs a new picking packets on the network and then at some point,

188
00:10:51,871 --> 00:10:54,990
generating an interrupt and at the same time to see if he was running.

189
00:10:54,991 --> 00:10:56,400
And it also is doing you don't see anything.

190
00:10:56,401 --> 00:11:00,720
So we have a true parallelism going on between the device and the sea view.

191
00:11:00,721 --> 00:11:03,390
And we have to manage that parallelism,

192
00:11:03,391 --> 00:11:04,260
as we'll see in a second.

193
00:11:05,730 --> 00:11:07,560
Finally,

194
00:11:07,561 --> 00:11:10,320
I'm going to focus mostly on external devices,

195
00:11:10,321 --> 00:11:12,150
like network cards in Yorkshire,

196
00:11:12,151 --> 00:11:13,350
and that would have to be programmed.

197
00:11:21,390 --> 00:11:38,310
And it basically going to every device has sold its own programming manual in the same way that it would risk five has manual with instructions in which registers do what every device actually has a similar type manual describing what register it has,

198
00:11:38,311 --> 00:11:43,380
what operations you can perform and what the device does get a response to reading and writing patrol relative.

199
00:11:45,030 --> 00:11:45,480
Unfortunately,

200
00:11:45,481 --> 00:11:55,680
often the manuals for the devices are less clear and there is five manual and which makes it a complex programming even more complicated.

201
00:11:56,910 --> 00:12:08,610
And so what I'm going to do in these lectures and it's a pretty straightforward if you want to talk about how the front shows up when you know the shell,

202
00:12:08,611 --> 00:12:10,020
the prince to try out front,

203
00:12:10,021 --> 00:12:12,330
and then if you take a less,

204
00:12:12,331 --> 00:12:12,510
you know,

205
00:12:12,511 --> 00:12:18,270
how do these characters get red and actually didn't being displayed in the console and in fact,

206
00:12:18,271 --> 00:12:20,820
so basically the rest of those lectures about these three characters.

207
00:12:23,850 --> 00:12:27,150
But you all the mechanism that's necessary to actually make it happen.

208
00:12:29,520 --> 00:12:32,580
Any questions so far before I struck it guide anymore a little deeper.

209
00:12:38,670 --> 00:12:39,030
Okay.

210
00:12:41,910 --> 00:12:43,950
So let's say so the first question,

211
00:12:43,951 --> 00:12:44,610
maybe due to ask,

212
00:12:44,611 --> 00:12:45,900
is where do the interrupts come from?

213
00:13:00,420 --> 00:13:03,180
And since I'm going to be focusing,

214
00:13:03,181 --> 00:13:05,970
most of the intellectual and external interrupts are not timely.

215
00:13:05,971 --> 00:13:08,760
Interrupts war which operates the rot,

216
00:13:08,761 --> 00:13:14,730
external interrupts here has come from devices that are sitting on the board and you are safe.

217
00:13:14,731 --> 00:13:21,210
I board Kim you more or less emulates filled with some small modifications,

218
00:13:21,211 --> 00:13:21,900
and we see it,

219
00:13:21,901 --> 00:13:24,870
particularly if you look around so this the board,

220
00:13:24,871 --> 00:13:29,070
There's a lot of actually different devices there that can be connected to notice this for you.

221
00:13:29,071 --> 00:13:32,250
Here are even its connector.

222
00:13:32,251 --> 00:13:33,450
In fact,

223
00:13:33,451 --> 00:13:34,830
here's a micro USB.

224
00:13:34,831 --> 00:13:36,180
It's over there,

225
00:13:36,181 --> 00:13:45,720
others SD card buttons into their organs of serves lines that must be really running from those devices.

226
00:13:45,721 --> 00:13:47,640
no into disrepute.

227
00:13:47,641 --> 00:13:57,540
and most of this lecture is basically sort of understanding what happens at the CP knew when at the device generates and interrupt and how to be the right,

228
00:13:57,541 --> 00:13:59,850
then information from the device,

229
00:13:59,851 --> 00:14:01,050
I believe,

230
00:14:01,051 --> 00:14:06,180
like these lower the two Pins Year at this expansion connector,

231
00:14:06,181 --> 00:14:07,650
I think one of them,

232
00:14:07,651 --> 00:14:08,250
as you are.

233
00:14:10,320 --> 00:14:12,780
You are a tent or transmission,

234
00:14:12,781 --> 00:14:14,160
and the other one is New York.

235
00:14:15,570 --> 00:14:20,100
Zero received why?

236
00:14:22,140 --> 00:14:26,070
And I think it's actually connected to both sides to my Community as well as through this extension cord,

237
00:14:26,071 --> 00:14:28,200
and I think that you are chip itself,

238
00:14:28,201 --> 00:14:28,440
you know,

239
00:14:28,441 --> 00:14:29,910
might actually be in sight of this.

240
00:14:31,200 --> 00:14:31,830
Trip over there.

241
00:14:37,890 --> 00:14:38,130
Okay,

242
00:14:38,131 --> 00:14:47,370
so it's basically there are a bunch of lines running it on the board into the city that we going to zoom in a little bit more in detail.

243
00:14:47,371 --> 00:14:49,260
In this view,

244
00:14:49,261 --> 00:14:59,190
you can use a schema from thee so five documentation for the board and a word processor to corded ware,

245
00:14:59,191 --> 00:15:01,410
which five project we're using.

246
00:15:01,411 --> 00:15:04,950
And we looked at this a little bit before we see here.

247
00:15:04,951 --> 00:15:09,930
Basically here are the device's skirt on the right side here a huge zero,

248
00:15:09,931 --> 00:15:10,740
and you know,

249
00:15:10,741 --> 00:15:11,670
we know that basically,

250
00:15:11,671 --> 00:15:12,120
does humour,

251
00:15:12,121 --> 00:15:12,690
Zeros,

252
00:15:12,691 --> 00:15:16,200
Memory mapped some war in the physical respects,

253
00:15:16,201 --> 00:15:17,610
like all the Durham,

254
00:15:17,611 --> 00:15:17,880
yes,

255
00:15:17,881 --> 00:15:21,480
it's in his side's winner without a dram sits above a wax.

256
00:15:21,481 --> 00:15:21,930
zero zero,

257
00:15:21,931 --> 00:15:22,920
zero and blue,

258
00:15:22,921 --> 00:15:28,170
while we take zero are the different devices basically with lots of stories,

259
00:15:28,171 --> 00:15:33,270
instructions to the physical dress I was given,

260
00:15:33,271 --> 00:15:36,690
and we can actually program that you are to look at that in a much more detail on the sand.

261
00:15:38,040 --> 00:15:42,060
All the device is going to basically come into the processor and really,

262
00:15:42,061 --> 00:15:47,220
what happens is this platform level Internet interrupt controller which is called the plague,

263
00:15:47,221 --> 00:15:48,780
for short,

264
00:15:48,781 --> 00:15:54,840
is the one that's sort of general managers that interrupt coming in from external devices.

265
00:15:56,400 --> 00:15:58,560
Zoom in a little bit more.

266
00:15:58,561 --> 00:16:04,830
You're a diagram of the the quick and cheap devices,

267
00:16:04,831 --> 00:16:07,110
so you are receiving this fifty three.

268
00:16:07,111 --> 00:16:11,370
interrupt lines coming in from different devices,

269
00:16:11,371 --> 00:16:12,240
probably ever devices,

270
00:16:12,241 --> 00:16:13,170
an owner of line,

271
00:16:13,171 --> 00:16:14,670
they come into the plague,

272
00:16:14,671 --> 00:16:16,860
and the public and route interrupts.

273
00:16:24,480 --> 00:16:24,660
So,

274
00:16:24,661 --> 00:16:25,500
for example,

275
00:16:25,501 --> 00:16:27,060
in a depending,

276
00:16:27,061 --> 00:16:28,950
so here are our particular course.

277
00:16:30,870 --> 00:16:31,770
The way we run it,

278
00:16:31,771 --> 00:16:34,410
we run it in a free course.

279
00:16:34,411 --> 00:16:42,300
In immediately the plate can be programmed so that the political reality interrupts to either one of these course or two,

280
00:16:42,301 --> 00:16:47,850
the first core that can take an interrupt and a bit of flexibility,

281
00:16:47,851 --> 00:16:50,580
and if none of the court can take an interrupted at this point,

282
00:16:50,581 --> 00:16:50,970
for example,

283
00:16:50,971 --> 00:17:00,870
to have disabled in Iraq's because they're processing another interrupt and the public will behold that interrupt processor is available to figure in Iraq.

284
00:17:02,310 --> 00:17:06,930
So let's look at some internal state to keep track of that.

285
00:17:06,931 --> 00:17:13,650
If you saw the documentation a little bit here in the way the real things are happening is to pluck indicates that the region interrupt,

286
00:17:13,651 --> 00:17:19,050
upending what the course bitterly claims it,

287
00:17:19,051 --> 00:17:21,960
so they will tell the public not to give to any other core.

288
00:17:21,961 --> 00:17:24,060
I once did probably done with it.

289
00:17:24,061 --> 00:17:24,390
It will say,

290
00:17:24,391 --> 00:17:24,870
like OK,

291
00:17:24,871 --> 00:17:31,350
I'm done with this particularly interrupt and the flexible and informed the public that narrowed.

292
00:17:31,351 --> 00:17:32,580
It can forget about this.

293
00:17:32,581 --> 00:17:32,970
Interrupt.

294
00:17:35,850 --> 00:17:37,830
Any questions about this,

295
00:17:37,831 --> 00:17:39,540
they sort of the internal risk.

296
00:17:39,541 --> 00:17:40,050
five.

297
00:17:41,190 --> 00:17:42,180
In rup structure.

298
00:17:44,220 --> 00:17:47,700
Yet when each heart holds the plague,

299
00:17:47,701 --> 00:17:51,600
does the play have some enforcement mechanism to ensure fairness?

300
00:17:53,790 --> 00:17:58,590
It is all up to the kernel to prevent the public in whatever way it wants.

301
00:18:00,540 --> 00:18:02,610
The public doesn't really.

302
00:18:02,611 --> 00:18:05,160
it's just a surface of delivering interrupted writing them.

303
00:18:05,161 --> 00:18:05,610
But it is.

304
00:18:05,611 --> 00:18:08,610
The kernel of the programs to play compels we're in rough,

305
00:18:08,611 --> 00:18:09,390
should be delivered to,

306
00:18:09,391 --> 00:18:10,530
etc.

307
00:18:10,531 --> 00:18:13,020
I bet you know interrupted priorities.

308
00:18:13,021 --> 00:18:16,770
The kernel can decide which in rup is more important than another interrupt.

309
00:18:16,771 --> 00:18:18,300
There's a huge amount of flexibility.

310
00:18:26,460 --> 00:18:28,170
Any other questions about the hardware.

311
00:18:34,080 --> 00:18:34,380
Okay.

312
00:18:37,710 --> 00:18:40,380
Because you know sort of the hardware side of it,

313
00:18:40,381 --> 00:18:43,320
we'll talk little bits here at a high level about the software side.

314
00:18:45,450 --> 00:18:50,130
So typically learn to code that manages his device is called the driver.

315
00:19:02,850 --> 00:19:05,730
It is just code,

316
00:19:05,731 --> 00:19:08,460
typically according nerve going into the kernel that we'll be looking at here.

317
00:19:08,461 --> 00:19:11,550
She code and an extra six in all.

318
00:19:11,551 --> 00:19:18,060
The drivers are in sight of the kernel in the courtyard.

319
00:19:18,061 --> 00:19:23,160
Basically managing or the drivers are all inside of the kernel.

320
00:19:23,161 --> 00:19:25,860
So we got the point that we're going to be looking a little bit today.

321
00:19:25,861 --> 00:19:27,510
Here is your Karachi.

322
00:19:27,511 --> 00:19:29,850
is the driver for viewership?

323
00:19:30,930 --> 00:19:37,590
And if you look at the structure of the internal structure of the code,

324
00:19:37,591 --> 00:19:43,140
most drivers have a structure we're going to draw this,

325
00:19:43,141 --> 00:19:43,890
not as an address.

326
00:19:43,891 --> 00:19:45,720
Space are not intended to be used in address space,

327
00:19:45,721 --> 00:19:47,790
particularly when people talk about drivers.

328
00:19:47,791 --> 00:19:48,810
There's a bottom part.

329
00:19:50,160 --> 00:19:51,030
And the top part.

330
00:19:55,200 --> 00:19:55,680
And basically,

331
00:19:55,681 --> 00:19:57,450
the bottom parties of the interrupt handling.

332
00:20:03,150 --> 00:20:04,440
So when the interrupt handler,

333
00:20:04,441 --> 00:20:06,780
when an inner comes in the process of this,

334
00:20:06,781 --> 00:20:12,300
a few house interrupts enabled the interrupt will fire near the posture of wool.

335
00:20:12,301 --> 00:20:20,370
I guess we've seen the second rule actually here called the interrupt handler for that to be device basically calls into the code here.

336
00:20:20,371 --> 00:20:23,970
An interrupt handler runs in,

337
00:20:23,971 --> 00:20:27,300
doesn't doesn't run in any context of any specific process.

338
00:20:27,301 --> 00:20:30,540
I just processes are just part of the Internet.

339
00:20:30,541 --> 00:20:31,050
The interrupt.

340
00:20:32,430 --> 00:20:33,390
The top part,

341
00:20:33,391 --> 00:20:35,430
if you will of the driver,

342
00:20:35,431 --> 00:20:39,600
is where user processes or going to the rest of the kernel calls into,

343
00:20:39,601 --> 00:20:40,170
for example,

344
00:20:40,171 --> 00:20:42,930
and it consulting is a great pair of where you are.

345
00:20:42,931 --> 00:20:44,430
There's a meteorite interface.

346
00:20:46,710 --> 00:20:53,880
That actually higher level code actually calls into,

347
00:20:53,881 --> 00:20:55,470
and then typically cage is actually.

348
00:20:55,471 --> 00:21:00,660
There are some few often in the driver and the top of your code,

349
00:21:00,661 --> 00:21:02,310
you know calls in the sticks.

350
00:21:02,311 --> 00:21:12,000
you know characters into the into this queue and interrupt handler puts girls or depending on sending and receiving receiving,

351
00:21:12,001 --> 00:21:12,600
made an interrupt.

352
00:21:12,601 --> 00:21:13,530
and one also will stick.

353
00:21:15,000 --> 00:21:17,880
It's actually kind of these interviews.

354
00:21:17,881 --> 00:21:27,090
It will see it an excuse that are basically used to decouple the top and the bottom part from each other and allowing the device to run in parallel with the rest of the code.

355
00:21:27,091 --> 00:21:27,780
on the sea view.

356
00:21:30,270 --> 00:21:34,290
In the inner a panel that typically under some restrictions on the Internet peddler because,

357
00:21:34,291 --> 00:21:34,380
though,

358
00:21:34,381 --> 00:21:38,280
to run in any context any process context with therapy,

359
00:21:38,281 --> 00:21:41,640
you can call a copying or copy out because.

360
00:21:42,990 --> 00:21:50,130
The current page table might actually not be reflective of the page table that the product to which character should be copied.

361
00:21:51,000 --> 00:21:54,120
And so it's the upper part of the driver generally,

362
00:21:54,121 --> 00:21:57,060
does the interaction with usual awful prosecution may become calls,

363
00:21:57,061 --> 00:21:58,230
copying a copy out.

364
00:22:01,350 --> 00:22:03,270
Any questions about this sort of this high level.

365
00:22:04,260 --> 00:22:04,710
Picture.

366
00:22:07,680 --> 00:22:09,930
We'll look at is quite a bit more detail,

367
00:22:09,931 --> 00:22:11,550
but this is sort of going to mean.

368
00:22:13,200 --> 00:22:15,330
Organization of a typical driver.

369
00:22:15,331 --> 00:22:18,900
If you do need to realize that there are many drivers in an operating system.

370
00:22:18,901 --> 00:22:21,300
In fact,

371
00:22:21,301 --> 00:22:28,200
quite common that near the sum of the driver code is quite bigger or larger than the core kernel itself.

372
00:22:29,160 --> 00:22:32,190
It mostly because going for every device you need to drive,

373
00:22:32,191 --> 00:22:34,830
you need a driver and most computers,

374
00:22:34,831 --> 00:22:35,700
you have a lot of devices.

375
00:22:42,600 --> 00:22:43,620
Okay,

376
00:22:43,621 --> 00:22:45,690
so let's talk a little bit about programming devices.

377
00:22:55,740 --> 00:22:59,160
So the typically programming is done using memory method.

378
00:23:06,840 --> 00:23:13,230
So as we've seen in risk life or in the safety Board,

379
00:23:13,231 --> 00:23:20,580
the device to show up at particularly addresses in the physical address space can and this is decided by the device,

380
00:23:20,581 --> 00:23:38,190
went overboard manufacturer and it would not bring system needs to know what those weirdos device are located in a physical law in memory space and then basically programs them use using ordinary load and store instructions to those addresses.

381
00:23:39,960 --> 00:23:42,330
But basically what these lonely story structures do?

382
00:23:42,331 --> 00:23:50,760
Is they read or write a meteorite control register.

383
00:23:53,730 --> 00:23:54,540
Of the device.

384
00:24:00,270 --> 00:24:01,110
And so typically,

385
00:24:01,111 --> 00:24:01,650
one year,

386
00:24:01,651 --> 00:24:03,270
ladies like store something you mean,

387
00:24:03,271 --> 00:24:06,360
the one of the control registers that causes a package to be sent.

388
00:24:06,361 --> 00:24:08,580
So instead of reading or writing memory,

389
00:24:08,581 --> 00:24:11,040
just wanting a strong structure typically have side effects.

390
00:24:11,041 --> 00:24:13,290
The cost of the device to do something.

391
00:24:15,930 --> 00:24:16,380
And you know,

392
00:24:16,381 --> 00:24:22,980
you have to look basically in the documentation of the device to actually figure out what the device does.

393
00:24:22,981 --> 00:24:27,480
Sometimes this documentation is very clear that sometimes these documentation is less clear.

394
00:24:27,481 --> 00:24:29,100
but you should give you a little bit of a sample.

395
00:24:32,640 --> 00:24:41,820
Two things I wanted to show you here on the right side of the screen you see the memory mapped.

396
00:24:41,821 --> 00:24:45,960
physical memory mapped space can afford a sofa and a board.

397
00:24:45,961 --> 00:24:47,940
I and you see what the addresses are,

398
00:24:47,941 --> 00:24:49,560
where particular things are mapped.

399
00:24:49,561 --> 00:24:52,620
Why we're going to show up in the physical dress days soon.

400
00:24:52,621 --> 00:24:53,040
Use the word.

401
00:24:53,041 --> 00:24:56,160
Backwardation actually show up in the physical address space,

402
00:24:56,161 --> 00:24:56,580
and so,

403
00:24:56,581 --> 00:24:56,970
for example,

404
00:24:56,971 --> 00:24:58,290
to see to clean to Skinner.

405
00:24:58,291 --> 00:25:02,430
Is there at zero zero?

406
00:25:02,431 --> 00:25:05,640
We pick out another one.

407
00:25:07,620 --> 00:25:09,210
Applique was somewhere there to again.

408
00:25:09,211 --> 00:25:10,800
Here's the public at Alex.

409
00:25:10,801 --> 00:25:11,640
since you were two,

410
00:25:11,641 --> 00:25:12,240
your hero,

411
00:25:12,241 --> 00:25:14,670
that's the platform,

412
00:25:14,671 --> 00:25:17,700
the platform room and even a controller,

413
00:25:17,701 --> 00:25:19,710
and she actually.

414
00:25:19,711 --> 00:25:22,680
You are zero here at this particular dress.

415
00:25:22,681 --> 00:25:29,220
It turns out that the cumulative we're using.

416
00:25:29,221 --> 00:25:32,700
It has the right action at a different location,

417
00:25:32,701 --> 00:25:38,130
and that's because we use vacuum you who doesn't actually literally emulate to satisfy aboard,

418
00:25:38,131 --> 00:25:39,840
but something that is very close to decipher.

419
00:25:41,700 --> 00:25:50,130
Or it's just a memory mapped the memory map or physical addresses to two devices.

420
00:25:52,620 --> 00:25:53,580
And then on,

421
00:25:53,581 --> 00:26:00,690
the website is just a piece of documentation for New York.

422
00:26:02,640 --> 00:26:07,080
This is the sixteen fifty five one,

423
00:26:07,081 --> 00:26:08,190
six point five zero.

424
00:26:08,191 --> 00:26:20,700
that's actually do your chip that sits on the accumulation that we're using to actually interact with a keyboard and consult,

425
00:26:20,701 --> 00:26:23,130
and this is a reasonable sample chip.

426
00:26:23,131 --> 00:26:27,030
There's not too much going on in this device,

427
00:26:27,031 --> 00:26:31,770
even when there are no complications here on this table.

428
00:26:31,771 --> 00:26:32,280
Here.

429
00:26:34,680 --> 00:26:42,570
The registers that the chip has the control rate assertion is an example in a control registers zero zero zero.

430
00:26:42,571 --> 00:26:44,430
When you do a lone instruction,

431
00:26:44,431 --> 00:26:46,530
it halts its will.

432
00:26:46,531 --> 00:26:49,710
Hold the data if you do a store instruction.

433
00:26:49,711 --> 00:26:50,880
As the register got mauled.

434
00:26:50,881 --> 00:26:51,510
basically to date,

435
00:26:51,511 --> 00:26:55,260
it will be copied into to be transmitted outside on the wire,

436
00:26:55,261 --> 00:27:05,490
and you are basically a device that allows you to send bits over a serial line.

437
00:27:05,491 --> 00:27:08,310
St Line is one line and the received line is not a line.

438
00:27:10,320 --> 00:27:11,790
Invisible you to take a bite,

439
00:27:11,791 --> 00:27:24,660
and basically there a multiplex or she realized on this is a single line sent over to the other side as he marched to the chip sitting on the other side and basically assembles the big back into a single byte.

440
00:27:25,950 --> 00:27:30,240
In a couple of other things that you can control a device,

441
00:27:30,241 --> 00:27:35,760
you can actually control the moderate after the device.

442
00:27:35,761 --> 00:27:38,250
But due to some degree,

443
00:27:38,251 --> 00:27:42,390
and probably most important for us is the register.

444
00:27:45,690 --> 00:27:47,610
Register one or more to sit here,

445
00:27:47,611 --> 00:27:49,650
which is the ant interrupt enable register,

446
00:27:49,651 --> 00:27:55,080
and so we can program it to actually a cause that you are to generate interrupts.

447
00:27:58,950 --> 00:28:01,560
Scroll down this document,

448
00:28:01,561 --> 00:28:06,180
you'll see that we're gonna be able to get out the document.

449
00:28:06,181 --> 00:28:07,110
actually more detail,

450
00:28:07,111 --> 00:28:15,000
basically described with every bit in a register means including four years in the interoperable registered.

451
00:28:15,001 --> 00:28:20,610
I are the register which the acronym for it you know they basically do system she's learned,

452
00:28:20,611 --> 00:28:20,970
stated,

453
00:28:20,971 --> 00:28:24,240
interrupt and transmit holding register,

454
00:28:24,241 --> 00:28:26,010
interrupt,

455
00:28:26,011 --> 00:28:32,820
but the between and it just goes on and on and therefore what the documentation tells you,

456
00:28:32,821 --> 00:28:37,770
what do you tell what the registers are and how you can use entity in falling voter in remote?

457
00:28:37,771 --> 00:28:42,090
We'll talk about a little bit of the work you have to program in an up,

458
00:28:42,091 --> 00:28:43,020
enable rather foolish,

459
00:28:43,021 --> 00:28:43,380
etc.

460
00:28:43,381 --> 00:28:43,770
etc.

461
00:28:43,771 --> 00:28:48,030
so that we started out to be a short version of the real documents.

462
00:28:48,031 --> 00:28:59,190
The hill documents from the chip manufacturer is much more has much more stuff in it in much more detail a minister of sufficient for us to actually be able to talk about how to program the EU art.

463
00:28:59,191 --> 00:28:59,700
and you can see.

464
00:28:59,701 --> 00:29:04,350
this is one of the most simple devices and even that document or you know it's quite a bit to it.

465
00:29:10,170 --> 00:29:13,680
I'm sorry I was wondering if your rights.

466
00:29:13,681 --> 00:29:22,800
so if you raise something to the transmit holding registered and then you write a game like right after that.

467
00:29:24,870 --> 00:29:26,460
It makes sure that,

468
00:29:26,461 --> 00:29:28,350
like the previous number,

469
00:29:28,351 --> 00:29:29,160
it didn't just like.

470
00:29:30,600 --> 00:29:33,360
get overridden?

471
00:29:33,361 --> 00:29:33,630
Yes,

472
00:29:33,631 --> 00:29:36,570
just just to know it's part of you actually,

473
00:29:36,571 --> 00:29:41,820
this is one and one of the things that we're going to pay a bit of tension to the EU.

474
00:29:41,821 --> 00:29:43,230
Tell basically load instruction,

475
00:29:43,231 --> 00:29:43,980
you lose some value.

476
00:29:43,981 --> 00:29:44,340
we're storing,

477
00:29:44,341 --> 00:29:46,260
So if you're losing value in a creditor,

478
00:29:46,261 --> 00:29:50,730
ah and in the EU are chip,

479
00:29:50,731 --> 00:29:58,530
you know it goes off and it's going to send off that bite counting the line on the serial line brick and when it's done,

480
00:29:58,531 --> 00:29:59,730
it will generate an interrupt.

481
00:29:59,731 --> 00:30:00,780
seeing through the kernel.

482
00:30:00,781 --> 00:30:00,990
OK,

483
00:30:00,991 --> 00:30:03,300
I'm done with that right now you can give me the next byte.

484
00:30:04,950 --> 00:30:09,150
Into the kernel and the device has been sort of a normal protocol to make sure that actually everything works out.

485
00:30:10,530 --> 00:30:11,520
This particular,

486
00:30:11,521 --> 00:30:12,000
you aren't,

487
00:30:12,001 --> 00:30:15,660
you know that we're using has a fixed sixteen.

488
00:30:15,661 --> 00:30:16,440
Fifty,

489
00:30:16,441 --> 00:30:17,430
five,

490
00:30:17,431 --> 00:30:22,950
five fifty eight actually internally has a fatal and I think it can buffer a bunch of character.

491
00:30:22,951 --> 00:30:24,390
Shall I come to pick up to sixteen?

492
00:30:25,650 --> 00:30:27,990
But you still have to sort of play this game of life.

493
00:30:27,991 --> 00:30:32,820
You can't stick more than sixteen characters into it until the device actually play has told you.

494
00:30:32,821 --> 00:30:33,570
Well,

495
00:30:33,571 --> 00:30:34,860
I have seen one character.

496
00:30:37,410 --> 00:30:38,070
Because that makes sense.

497
00:30:39,180 --> 00:30:39,540
Oh,

498
00:30:39,541 --> 00:30:39,930
yeah,

499
00:30:39,931 --> 00:30:40,530
thank you.

500
00:30:41,820 --> 00:30:45,870
So I'm going to talk a little bit more before we look at.

501
00:30:46,980 --> 00:30:51,420
When the more detailed the case study,

502
00:30:51,421 --> 00:30:56,520
you know that I'm going to go through four,

503
00:30:56,521 --> 00:30:57,900
explaining how devices,

504
00:30:57,901 --> 00:30:59,430
an interrupted work users dollar.

505
00:30:59,431 --> 00:30:59,910
I'll ask,

506
00:30:59,911 --> 00:31:00,750
you know what happens.

507
00:31:04,890 --> 00:31:06,930
How actually how you print?

508
00:31:06,931 --> 00:31:07,590
And so basically,

509
00:31:07,591 --> 00:31:10,080
what happens is that the device,

510
00:31:10,081 --> 00:31:12,990
as we actually sort of discussed in the second ago,

511
00:31:12,991 --> 00:31:18,480
has basically puts the character of the dollar in this case into the yard.

512
00:31:18,481 --> 00:31:18,840
In fact,

513
00:31:18,841 --> 00:31:21,630
in the render service that we just looked at,

514
00:31:21,631 --> 00:31:26,550
and then the York generates an interrupt.

515
00:31:26,551 --> 00:31:32,310
the way that leaves us the way that we're going to set things up generates and interrupt when the device,

516
00:31:32,311 --> 00:31:33,630
when the character has been sent.

517
00:31:42,210 --> 00:31:43,980
And then on the other side,

518
00:31:43,981 --> 00:31:52,650
and so basically the way things are set up in Cuba and communities that are on the same line on the other side of the same wine.

519
00:31:52,651 --> 00:32:00,510
another your shipment that actually connects due to console to the virtual virtual console.

520
00:32:00,511 --> 00:32:01,950
On the other side.

521
00:32:01,951 --> 00:32:06,240
You know what happens when Alice is going to pay me to do the input,

522
00:32:06,241 --> 00:32:10,080
and so the keyboard actually is connected to the received line.

523
00:32:16,410 --> 00:32:17,280
There she is lying.

524
00:32:18,540 --> 00:32:23,220
And so basically the keyboard you know when you hit a key on the keyboard,

525
00:32:23,221 --> 00:32:24,480
the keyboard,

526
00:32:24,481 --> 00:32:25,770
the virtual keyboard.

527
00:32:25,771 --> 00:32:31,260
in this case you know your chips on that site you know well civilized,

528
00:32:31,261 --> 00:32:35,880
the character Hell send it to view it on the other side.

529
00:32:35,881 --> 00:32:42,900
the other side puts the you know the bitch you know together again into one night and then generating an interrupt.

530
00:32:45,180 --> 00:32:51,480
Generate an interrupt to tell the processor hate is a character available from their keyboard.

531
00:32:53,400 --> 00:32:54,390
In an interview panels,

532
00:32:54,391 --> 00:32:57,210
the interruption will reach the debate from the yard.

533
00:32:57,211 --> 00:32:58,380
as we'll see in a second.

534
00:32:58,381 --> 00:32:59,700
and so there was a new sort of two things.

535
00:32:59,701 --> 00:33:03,480
If we want to sort of understand a more detailed and actually how they work.

536
00:33:06,000 --> 00:33:07,170
Okay,

537
00:33:07,171 --> 00:33:08,280
any questions about this.

538
00:33:13,920 --> 00:33:14,160
Okay,

539
00:33:14,161 --> 00:33:14,580
so.

540
00:33:16,740 --> 00:33:19,410
The response has a bunch of support.

541
00:33:24,240 --> 00:33:25,200
Support raindrops.

542
00:33:34,470 --> 00:33:39,270
And numerous reddish fish that we'll see here in more detail.

543
00:33:39,271 --> 00:33:49,230
I asked they could do is we're going to be useful to know which ones they are there is that as I E supervisor interrupt an evil registered,

544
00:33:49,231 --> 00:33:53,280
and that has a bit you know one bit for.

545
00:33:55,290 --> 00:33:56,340
External interrupts,

546
00:33:56,341 --> 00:34:01,260
but from devices like the EU art from the suffering rocks,

547
00:34:01,261 --> 00:34:03,000
which I'm going to do is we're going to talk about it.

548
00:34:03,001 --> 00:34:08,490
But it is possible from one sea view from one requires core to send an interrupt to another.

549
00:34:08,491 --> 00:34:12,030
Is five core and timer.

550
00:34:12,031 --> 00:34:12,510
Interrupt.

551
00:34:14,790 --> 00:34:17,040
And I'm not really going to talk about either.

552
00:34:17,041 --> 00:34:19,740
The supervisor of the suffering,

553
00:34:19,741 --> 00:34:22,410
the ropes nor the timing interrupts are going to focusing externally for us.

554
00:34:24,030 --> 00:34:26,250
Then there's another very interesting that we've seen before.

555
00:34:26,251 --> 00:34:27,090
It's faulty.

556
00:34:27,091 --> 00:34:28,980
Supervise her status,

557
00:34:28,981 --> 00:34:29,490
register.

558
00:34:30,600 --> 00:34:33,900
And that has a bit to disable and enable interrupts.

559
00:34:38,490 --> 00:34:39,720
On this particular core.

560
00:34:42,270 --> 00:34:50,040
So every courthouse near these registers and in addition to these three bids for individual control,

561
00:34:50,041 --> 00:34:54,480
when you want to have external interrupts or something to read for ten minutes,

562
00:34:54,481 --> 00:34:57,750
there isn't one beer to digital controls that you're going to receive interrupt at all,

563
00:34:57,751 --> 00:35:03,450
and so you can automatically switch from not getting rid of interrupts to having written a rupture with the other way around,

564
00:35:03,451 --> 00:35:04,440
but just changing that.

565
00:35:04,441 --> 00:35:07,170
One bid in the US state of repetition.

566
00:35:10,440 --> 00:35:13,650
Separator cut the supervisor,

567
00:35:13,651 --> 00:35:15,300
your inner pending registered.

568
00:35:21,090 --> 00:35:21,780
And basically,

569
00:35:21,781 --> 00:35:32,910
the process you can use that I want to interrupt is going to happen to me in a profit and look at the years I came to see what one interrupt actually has come in and in addition,

570
00:35:32,911 --> 00:35:38,970
there will be even in Europe happens in the s cars registered that we should have seen competition for now.

571
00:35:40,860 --> 00:35:46,080
There will be an indication of one interrupt actually came in with a look in the second,

572
00:35:46,081 --> 00:35:46,230
and,

573
00:35:46,231 --> 00:36:06,270
of course there's the Sdg Vic registered that basically holds the program were also addressed to which the processor switch once either trap or trap of system call or a page fault happens when an interrupt habits because basically uses for all three cases the same mechanism.

574
00:36:06,271 --> 00:36:17,940
I'm not going to talk too much about its cause and effect because we know we've seen a tear in detail before and the business operates in exactly the same.

575
00:36:17,941 --> 00:36:19,020
We asked.

576
00:36:23,490 --> 00:36:24,870
A system calls in the page,

577
00:36:24,871 --> 00:36:26,700
faults or other exceptions.

578
00:36:30,120 --> 00:36:30,360
OK,

579
00:36:30,361 --> 00:36:35,940
so let's see you're going a little bit of a sense of how this stuff,

580
00:36:35,941 --> 00:36:37,140
the sort of initialized.

581
00:36:37,141 --> 00:36:40,860
So we're not talking even about how the drivers actually work,

582
00:36:40,861 --> 00:36:44,640
but just to see how exactly six programs,

583
00:36:44,641 --> 00:36:48,720
these research said that we were going to be in a position to take interruption.

584
00:36:51,240 --> 00:36:52,140
Courses in the church.

585
00:37:04,890 --> 00:37:07,530
I think a little bit behind on the chat,

586
00:37:07,531 --> 00:37:09,780
so let's see you get a little bit on what they have.

587
00:37:12,360 --> 00:37:12,780
Programs,

588
00:37:12,781 --> 00:37:19,110
these research reports and code you get rid of there.

589
00:37:24,750 --> 00:37:24,990
No,

590
00:37:24,991 --> 00:37:25,380
actually,

591
00:37:25,381 --> 00:37:27,900
they don't really need that eater,

592
00:37:27,901 --> 00:37:30,450
so I'm not going to use d to be to walk through things,

593
00:37:30,451 --> 00:37:35,160
and we are going to look at the particular functions that are irrelevant.

594
00:37:35,161 --> 00:37:37,710
So probably the first thing is in start.

595
00:37:37,711 --> 00:37:38,370
Dot C.

596
00:37:38,371 --> 00:37:41,280
So when the machine boots were to process your boots.

597
00:37:45,750 --> 00:37:52,200
Start function is called it's runs in the emerald and disables.

598
00:37:52,201 --> 00:37:55,800
Paging in the right way.

599
00:37:55,801 --> 00:37:59,160
Because you know sort of leader on the kernel has set up the page tables,

600
00:37:59,161 --> 00:38:01,170
and when she heard a basically delegates,

601
00:38:01,171 --> 00:38:04,950
all interrupts and exceptions to supervise the mood.

602
00:38:04,951 --> 00:38:17,340
And then it's programmed the supervisor enabling an interop Enable register to take suffering ruffs tamer interrupts and external interrupts.

603
00:38:19,650 --> 00:38:26,730
And then we could have a good measure a timer interrupt it actually happened to coming to him are handled in emerald.

604
00:38:29,880 --> 00:38:35,190
Emerald Code actually a program's Tyler registers,

605
00:38:35,191 --> 00:38:40,260
and so that Tamerlan rupture and generated no,

606
00:38:40,261 --> 00:38:40,440
no,

607
00:38:40,441 --> 00:38:41,760
We want to talk about that next week,

608
00:38:41,761 --> 00:38:42,870
so I'm gonna go to me.

609
00:38:42,871 --> 00:38:43,440
Not see.

610
00:38:48,090 --> 00:38:53,370
So see how external devices are handled and so our first external devices to console them,

611
00:38:53,371 --> 00:38:56,160
and that is where we print too.

612
00:38:56,161 --> 00:38:56,820
What can you conceive?

613
00:38:56,821 --> 00:38:57,930
It was all in at us.

614
00:39:00,300 --> 00:39:04,200
So here's control in it you can easily get to walk here.

615
00:39:04,201 --> 00:39:07,320
We actually care not much about that at all,

616
00:39:07,321 --> 00:39:09,060
at least not for this lecture,

617
00:39:09,061 --> 00:39:15,720
and it actually can basically cause the yard in it and you aren't in it.

618
00:39:15,721 --> 00:39:16,860
He is right here.

619
00:39:19,350 --> 00:39:24,120
It actually sets up the newer chip or configure for your chips.

620
00:39:24,121 --> 00:39:28,800
It is ready for use at first actually disables in roskilde.

621
00:39:28,801 --> 00:39:31,290
This is just a sequence you have to go through when you program.

622
00:39:31,291 --> 00:39:35,310
It is at about rate,

623
00:39:35,311 --> 00:39:38,760
then you set in six or seven bits,

624
00:39:38,761 --> 00:39:40,650
seven or eight bits bytes while prepared.

625
00:39:40,651 --> 00:39:45,120
You're not and ah.

626
00:39:46,560 --> 00:39:54,120
You set the internal five folks that you aren't having to clear out anything that it actually might be in there,

627
00:39:54,121 --> 00:40:00,810
and then we receive when evil interrupts for transmission in interruption.

628
00:40:03,390 --> 00:40:03,690
I mean,

629
00:40:03,691 --> 00:40:04,890
I think you raise your hand.

630
00:40:07,200 --> 00:40:12,390
And I'm wondering what the baud rate is exactly of the speed at which you know the line runs.

631
00:40:14,760 --> 00:40:14,820
Oh,

632
00:40:14,821 --> 00:40:15,360
I see.

633
00:40:20,580 --> 00:40:20,790
Okay,

634
00:40:20,791 --> 00:40:23,280
so that's what you were doing it now.

635
00:40:23,281 --> 00:40:24,900
At this point you know you are.

636
00:40:24,901 --> 00:40:27,960
In principle a component can generate interrupted,

637
00:40:27,961 --> 00:40:34,350
but of course we haven't been actually programmed the interrupt enabling stuff on the on the risk by project itself.

638
00:40:34,351 --> 00:40:37,200
and yet we haven't programmed to public yet mere from nothing really happens.

639
00:40:38,460 --> 00:40:39,330
At this point yet,

640
00:40:39,331 --> 00:40:40,260
and so the next thing,

641
00:40:40,261 --> 00:40:43,680
if we are going to move back to may not see it,

642
00:40:43,681 --> 00:40:46,710
we'll see a little bit scroll down.

643
00:40:46,711 --> 00:40:49,200
We'll see actually that the public is initialized,

644
00:40:49,201 --> 00:40:50,610
and so let's look at that.

645
00:40:53,280 --> 00:40:57,270
And basically in a goat,

646
00:40:57,271 --> 00:41:07,740
you looked at this table that I showed you a little while ago with the physical memory or the memory leak out to get to the public is in some particular location record.

647
00:41:07,741 --> 00:41:08,880
The location is incredible.

648
00:41:08,881 --> 00:41:11,130
Many lay out what she did.

649
00:41:11,131 --> 00:41:11,760
The flick is here.

650
00:41:11,761 --> 00:41:11,910
Oh,

651
00:41:11,911 --> 00:41:12,510
here is zero,

652
00:41:12,511 --> 00:41:15,960
zero zero breaking it literally copied from the document,

653
00:41:15,961 --> 00:41:17,430
and it went away.

654
00:41:17,431 --> 00:41:20,850
We write stuff to the plate is basically you're taking.

655
00:41:20,851 --> 00:41:27,990
The number would be dressed for the plague castles to thirty two pointer,

656
00:41:27,991 --> 00:41:31,170
endured because the plink of registers are free to bit,

657
00:41:31,171 --> 00:41:33,210
and then you're basically write a one to it.

658
00:41:33,211 --> 00:41:38,490
So this class is basically I want to be written to the register.

659
00:41:38,491 --> 00:41:39,870
You aren't zero error.

660
00:41:39,871 --> 00:41:40,200
queue.

661
00:41:41,250 --> 00:41:41,760
And basically,

662
00:41:41,761 --> 00:41:46,440
what this does is it enables interrupt request from the yard,

663
00:41:46,441 --> 00:41:49,860
but remember to play kunar busily routes,

664
00:41:49,861 --> 00:41:50,730
the interrupts,

665
00:41:50,731 --> 00:41:51,240
answered.

666
00:41:51,241 --> 00:41:58,800
The interim might come in from the left side from that picture into the plane or into places like this program to actually accept note in a rush.

667
00:42:00,390 --> 00:42:00,840
Similarly,

668
00:42:00,841 --> 00:42:02,220
had actually programs to play ducks,

669
00:42:02,221 --> 00:42:05,070
accepting risks from the Iowa disk,

670
00:42:05,071 --> 00:42:06,270
which I'm not going to talk about at all.

671
00:42:08,580 --> 00:42:08,940
OK,

672
00:42:08,941 --> 00:42:12,510
and then we go back to main dot C.

673
00:42:15,840 --> 00:42:18,630
Right after the publication of the machines is blinking at heart,

674
00:42:18,631 --> 00:42:20,790
and invisibly for every core.

675
00:42:20,791 --> 00:42:24,330
Specifically,

676
00:42:24,331 --> 00:42:28,860
every core individually owned one core that is first core actually initialize.

677
00:42:28,861 --> 00:42:31,140
This disparate aspect there was a basement were taking,

678
00:42:31,141 --> 00:42:38,100
interrupts when those devices and in every core individually has to say I'm interested in those devices too.

679
00:42:38,101 --> 00:42:38,820
And so,

680
00:42:38,821 --> 00:42:39,330
for example,

681
00:42:39,331 --> 00:42:43,800
here every core extra calls dysfunctions of every course,

682
00:42:43,801 --> 00:42:49,800
as I mentioned in an interrupt from do you aren't in a minute interrupts from the video.

683
00:42:50,820 --> 00:42:55,920
You can see here basically does you are just prior to basically is a unique number,

684
00:42:55,921 --> 00:43:01,290
and for New York and I argue for what you are to him,

685
00:43:01,291 --> 00:43:02,220
I think you would live on.

686
00:43:02,221 --> 00:43:04,620
The commune is number ten.

687
00:43:06,960 --> 00:43:09,210
We're basically ignore priorities,

688
00:43:09,211 --> 00:43:10,470
and so we just set it to zero.

689
00:43:11,940 --> 00:43:12,570
OK,

690
00:43:12,571 --> 00:43:20,220
and so does every ship you a record individually has to indicate to the public that it actually is interested in receiving interrupts.

691
00:43:22,380 --> 00:43:22,560
Now,

692
00:43:22,561 --> 00:43:23,100
at this point,

693
00:43:23,101 --> 00:43:28,260
you know we were basically green basically have to program the device to generate interrupts.

694
00:43:28,261 --> 00:43:33,630
We have programmed the click through the pass in rocks on between the individual while she abused,

695
00:43:33,631 --> 00:43:40,650
but she views itself haven't actually are not accepting inner of yet because we haven't set the bid in the estate of rhetoric,

696
00:43:40,651 --> 00:43:44,580
and so let's go back to main got Sheen.

697
00:43:47,520 --> 00:43:48,270
And you know what,

698
00:43:48,271 --> 00:43:48,900
I mean.

699
00:43:48,901 --> 00:43:50,970
does he does a bunch of organization?

700
00:43:50,971 --> 00:43:52,920
But he ended agriculture scheduler.

701
00:43:54,000 --> 00:43:55,890
So let's go look at Procter Dot C.

702
00:43:57,060 --> 00:43:59,250
And the skin color.

703
00:44:05,010 --> 00:44:07,470
And what we see here is like when we're out.

704
00:44:07,471 --> 00:44:07,890
Basically,

705
00:44:07,891 --> 00:44:09,300
the whole machine is sort of.

706
00:44:09,301 --> 00:44:13,560
The prosecutors has been set up and schedule your schedule,

707
00:44:13,561 --> 00:44:19,290
but your process to run before any of that actually enables interrupts.

708
00:44:20,250 --> 00:44:22,560
And so we look at risk life,

709
00:44:22,561 --> 00:44:24,150
and you'll see there is basically this.

710
00:44:24,151 --> 00:44:24,480
Is there.

711
00:44:26,100 --> 00:44:27,090
C function.

712
00:44:28,320 --> 00:44:30,000
And that basically Naples interruption.

713
00:44:30,001 --> 00:44:31,650
If you can not surprising,

714
00:44:31,651 --> 00:44:32,130
you know basically,

715
00:44:32,131 --> 00:44:33,390
the only thing it does.

716
00:44:33,391 --> 00:44:36,600
it sets the interrupt enable bit in the status register.

717
00:44:37,470 --> 00:44:39,870
So at this particular point in time,

718
00:44:39,871 --> 00:44:41,460
right at this instance,

719
00:44:41,461 --> 00:44:44,460
if there were an inner appending at public,

720
00:44:44,461 --> 00:44:47,460
then this particular core would be interrupted.

721
00:44:48,690 --> 00:44:50,190
We'll see that in a second later,

722
00:44:50,191 --> 00:44:51,000
but this is this point.

723
00:44:51,001 --> 00:44:52,350
Interrupts are enabled.

724
00:44:53,910 --> 00:44:56,130
And so those are the basic setup.

725
00:44:56,131 --> 00:44:57,180
Any questions about this.

726
00:45:02,160 --> 00:45:04,050
Outside,

727
00:45:04,051 --> 00:45:15,060
he interrupted when at that point so every quarter runs his camera removed wreck and whatever coracles interact on,

728
00:45:15,061 --> 00:45:15,960
were all cordial,

729
00:45:15,961 --> 00:45:16,710
calling and rub it on.

730
00:45:16,711 --> 00:45:20,520
But let's say there's only one core gets there first,

731
00:45:20,521 --> 00:45:21,720
like one.

732
00:45:21,721 --> 00:45:24,150
And if core one sets its interrupt,

733
00:45:24,151 --> 00:45:26,040
enable bit at that point,

734
00:45:26,041 --> 00:45:27,360
it could receive an interrupt.

735
00:45:29,610 --> 00:45:31,830
And we'll see in a second what happens exactly at an interrupt.

736
00:45:33,240 --> 00:45:33,870
Mesa,

737
00:45:33,871 --> 00:45:34,410
thank you.

738
00:45:38,430 --> 00:45:38,640
OK,

739
00:45:38,641 --> 00:45:43,590
so what I want to do is look at this.

740
00:45:43,591 --> 00:45:44,610
how to print the dollar?

741
00:45:45,570 --> 00:45:55,050
The prompt at the shell prompt and so for that we want to go back a little bit and I will just want to look at in it again,

742
00:45:55,051 --> 00:45:59,610
so this was the first process that actually is being your inner code execs in it.

743
00:45:59,611 --> 00:46:16,860
and so that's basically the first process running and one of the things that in the dust it makes a device that represents to console some here that the file is created using to make not operation and returns.

744
00:46:16,861 --> 00:46:18,720
A file descriptor file the script to zero.

745
00:46:18,721 --> 00:46:21,240
Because it's the first file descriptor open and an adopted.

746
00:46:21,241 --> 00:46:21,420
You know,

747
00:46:21,421 --> 00:46:24,750
first hand it out and then pushed in an error and dumped it again.

748
00:46:24,751 --> 00:46:26,940
And so this basically sets up a file,

749
00:46:26,941 --> 00:46:27,750
the script of zero,

750
00:46:27,751 --> 00:46:31,860
one and two to correspond to the console.

751
00:46:34,140 --> 00:46:36,120
You know,

752
00:46:36,121 --> 00:46:37,200
so you know,

753
00:46:37,201 --> 00:46:38,700
then the force of the shell.

754
00:46:40,350 --> 00:46:42,090
So once you get to Shell for a second.

755
00:46:43,080 --> 00:46:44,250
So the shell opens,

756
00:46:44,251 --> 00:46:48,840
it will start running with your father.

757
00:46:48,841 --> 00:46:57,570
I want to a free sort of zero one or two open pointing to the console and then the shell prince,

758
00:46:57,571 --> 00:47:04,320
the character dollar in the space to file the script or too.

759
00:47:04,321 --> 00:47:12,480
And so even though the console and you are in a rough sort of all you to blow all this to the application programmer with the shell.

760
00:47:12,481 --> 00:47:14,070
Although the person who wrote the shell,

761
00:47:14,071 --> 00:47:18,180
it just looks like a regular file to effect to show itself,

762
00:47:18,181 --> 00:47:20,490
since its rights to fathers is no idea,

763
00:47:20,491 --> 00:47:22,170
what actually sits in the other side right?

764
00:47:22,171 --> 00:47:25,500
And we have seen in Utah Lab and you can do all kinds of cool stuff with it.

765
00:47:25,501 --> 00:47:27,240
But here's an example we're going to.

766
00:47:27,241 --> 00:47:27,600
Basically,

767
00:47:27,601 --> 00:47:30,450
the device in UNIX is represented as a file.

768
00:47:30,451 --> 00:47:32,130
It's not different than anything else.

769
00:47:33,840 --> 00:47:34,080
OK,

770
00:47:34,081 --> 00:47:48,660
so let's see how this actually printing networks so that a printer is actually six user application if a tiny little C library which include scenario print stuff and you're enough,

771
00:47:48,661 --> 00:47:49,200
as you've seen,

772
00:47:49,201 --> 00:47:50,670
these have been a tram flap.

773
00:47:50,671 --> 00:47:58,920
You know sort of interesting function in itself but Indians and basically calls the write system call.

774
00:47:58,921 --> 00:47:59,610
and in our case,

775
00:47:59,611 --> 00:48:00,000
for example,

776
00:48:00,001 --> 00:48:00,420
write system.

777
00:48:00,421 --> 00:48:02,430
Call will be found to skip the two.

778
00:48:02,431 --> 00:48:05,130
And he would be.

779
00:48:05,131 --> 00:48:14,670
I hold the character dollar as we're past the address of the memory location that holds the dollar to the file descriptor to right,

780
00:48:14,671 --> 00:48:17,070
and we ask him to write one character.

781
00:48:19,350 --> 00:48:19,830
So basically,

782
00:48:19,831 --> 00:48:23,430
every character written by the shell in a result in system call,

783
00:48:23,431 --> 00:48:24,690
and so now we can go.

784
00:48:26,040 --> 00:48:32,130
And see what actually happens so you've seen the system call before.

785
00:48:32,131 --> 00:48:34,200
But since its file.

786
00:48:37,710 --> 00:48:38,880
She is right.

787
00:48:40,260 --> 00:48:44,130
So here's the write system call it grabs his arguments,

788
00:48:44,131 --> 00:48:45,570
the file descriptor.

789
00:48:45,571 --> 00:48:47,970
then it requires to be written in the address of there.

790
00:48:49,170 --> 00:48:49,620
They addressed,

791
00:48:49,621 --> 00:48:53,070
it contains the character dollar has been file right.

792
00:48:58,170 --> 00:49:00,720
Let's quickly look at file right.

793
00:49:01,950 --> 00:49:07,950
We're getting close to actually wear the thing that we want to talk about and you know here.

794
00:49:07,951 --> 00:49:08,730
If I'll write it.

795
00:49:08,731 --> 00:49:13,170
looks for the type of the founders cutter is it's a pipe recalled a pipe functions,

796
00:49:13,171 --> 00:49:15,330
and if its device,

797
00:49:15,331 --> 00:49:17,070
which will make not dusk,

798
00:49:17,071 --> 00:49:21,000
then it will call the right function for that particular device.

799
00:49:22,020 --> 00:49:29,010
And so we know that you know that I think it's going to call the right function in the console.

800
00:49:30,420 --> 00:49:32,430
And so let's see what happens there so useless.

801
00:49:32,431 --> 00:49:33,000
All right.

802
00:49:34,590 --> 00:49:35,280
Gratz walk,

803
00:49:35,281 --> 00:49:37,890
you know we would care about that right now.

804
00:49:37,891 --> 00:49:42,450
It copies in the one character you to eat or copying.

805
00:49:42,451 --> 00:49:44,040
in animals you are twitchy.

806
00:49:45,570 --> 00:49:51,870
So that these were calls into the EU art and so you can think about the end of the console is being the driver.

807
00:49:51,871 --> 00:50:00,750
We're looking sort of at the top end of the driver and makes a call an interviewer to see two actually printed character.

808
00:50:02,130 --> 00:50:12,720
And so here's your two Let's see so this is going to be a little bit interesting basically eternally keeps a buffer,

809
00:50:12,721 --> 00:50:16,170
so let's go back and back up a little bit on the top.

810
00:50:16,171 --> 00:50:16,560
In fact,

811
00:50:16,561 --> 00:50:20,970
it into a buffer for transmission and the buffer size is thirty two characters.

812
00:50:21,840 --> 00:50:32,610
And there's a pointer and the write pointer in the read pointer now would be used to put this in a characters into the circle of circular buffer if a little bit about that in more detail,

813
00:50:32,611 --> 00:50:41,340
but such a pointer for the producer and is a pointer for the consumer and in this case you know thee shall,

814
00:50:41,341 --> 00:50:41,760
if you will,

815
00:50:41,761 --> 00:50:45,810
is the producer and it actually checks.

816
00:50:45,811 --> 00:50:51,360
The first thing it does is actually checked whether the circular buffers for so long and weighed the checks of the circle,

817
00:50:51,361 --> 00:50:52,020
the preferred tool,

818
00:50:52,021 --> 00:51:00,030
so it started out in the original state is both the write pointer and the write pointer is zero corrected zero induction to dump buffer if they're equal.

819
00:51:00,031 --> 00:51:00,330
You know,

820
00:51:00,331 --> 00:51:03,300
it's there.

821
00:51:03,301 --> 00:51:04,950
The buffer is empty.

822
00:51:04,951 --> 00:51:08,070
But if he had wanted to write pointer and it's the same as the receive pointer.

823
00:51:08,071 --> 00:51:08,250
So,

824
00:51:08,251 --> 00:51:08,700
for example,

825
00:51:08,701 --> 00:51:11,100
is you're feeling a zero one,

826
00:51:11,101 --> 00:51:11,190
Two,

827
00:51:11,191 --> 00:51:11,370
three,

828
00:51:11,371 --> 00:51:11,520
four,

829
00:51:11,521 --> 00:51:11,730
five,

830
00:51:11,731 --> 00:51:11,910
six,

831
00:51:11,911 --> 00:51:12,090
seven,

832
00:51:12,091 --> 00:51:12,210
eight,

833
00:51:12,211 --> 00:51:12,450
nine thousand,

834
00:51:12,451 --> 00:51:13,470
nine hundred and eighty one.

835
00:51:13,471 --> 00:51:18,870
And then you're about to wrap around Harry and one.

836
00:51:18,871 --> 00:51:24,870
and it's still equal to the receive index or the reading that you know that the buffer is full,

837
00:51:24,871 --> 00:51:28,650
And so there's no point and you can write anything at that point,

838
00:51:28,651 --> 00:51:38,460
because I found that you are still busy working its way through trying to send off the preceding thirty one characters or refer to characters,

839
00:51:38,461 --> 00:51:39,540
in this case,

840
00:51:39,541 --> 00:51:43,470
the Buffett rule.

841
00:51:43,471 --> 00:51:46,290
Basically we would put to sleep and put on the site.

842
00:51:46,291 --> 00:51:53,730
And the kernel would run some other program until the shelves be woken up in the notes actually ready to set.

843
00:51:55,260 --> 00:51:58,830
When you are just ready to send more data now,

844
00:51:58,831 --> 00:51:59,100
of course,

845
00:51:59,101 --> 00:51:59,490
in this case,

846
00:51:59,491 --> 00:52:00,990
this is not the case because it's like this.

847
00:52:00,991 --> 00:52:06,930
The first few characters that are being print since the space in the buffer and so basically to the driver,

848
00:52:06,931 --> 00:52:14,220
puts the character into the mother and teach them at the right point in time to go to the next slot and then calls your start.

849
00:52:16,020 --> 00:52:20,160
And basically your charge is nothing else and sort of kicking the device and saying,

850
00:52:20,161 --> 00:52:26,880
Go do some work for me and immediately.

851
00:52:29,100 --> 00:52:36,960
It first checks the mightiest of busy sending the current character that until recently,

852
00:52:36,961 --> 00:52:39,420
if if the device is busy,

853
00:52:39,421 --> 00:52:44,130
you know we just go back and it will go to sleep probably won't going to sleep.

854
00:52:44,131 --> 00:52:46,920
and otherwise we'll read the character out of the buffer.

855
00:52:46,921 --> 00:52:52,830
Ah and put it in the transmission register that we saw earlier.

856
00:52:55,380 --> 00:52:58,770
The transmission managed to introduce it like this before.

857
00:52:58,771 --> 00:53:00,030
Let's look at that for a second.

858
00:53:02,520 --> 00:53:02,730
You know,

859
00:53:02,731 --> 00:53:03,540
we usually write,

860
00:53:03,541 --> 00:53:04,620
register you know,

861
00:53:04,621 --> 00:53:05,190
casts.

862
00:53:07,260 --> 00:53:11,310
Particularly registered to do the will of a wrench type and then right near the value into it.

863
00:53:13,260 --> 00:53:18,270
Do you charge to transmit all the medical is that it's the zero waste himself before from the documentation?

864
00:53:20,490 --> 00:53:20,730
Okay,

865
00:53:20,731 --> 00:53:23,130
so so basically.

866
00:53:26,910 --> 00:53:27,330
Where I was,

867
00:53:27,331 --> 00:53:29,010
I didn't start.

868
00:53:29,011 --> 00:53:29,670
Ah,

869
00:53:29,671 --> 00:53:31,770
you should start basically kicks the device in saying,

870
00:53:31,771 --> 00:53:31,980
like,

871
00:53:31,981 --> 00:53:32,370
Hey,

872
00:53:32,371 --> 00:53:33,480
I got a register,

873
00:53:33,481 --> 00:53:36,870
I got a bite for you available to shut off.

874
00:53:36,871 --> 00:53:44,220
and that's basically all there that that basically,

875
00:53:44,221 --> 00:53:45,330
if you will to shell,

876
00:53:45,331 --> 00:53:48,840
you know their system called the shell called Will do,

877
00:53:48,841 --> 00:53:51,510
and you know at once it actually kicked off the device.

878
00:53:51,511 --> 00:53:52,980
and these will return to user space,

879
00:53:52,981 --> 00:53:55,920
and the shell can go on and do whatever he wants to do.

880
00:53:55,921 --> 00:53:58,380
And generally the next thing Michelle will do is called the read System,

881
00:53:58,381 --> 00:54:01,050
call to actually read input from the keyboard.

882
00:54:01,051 --> 00:54:05,910
and so the shell will return to use a space using the standard mechanism I've seen before.

883
00:54:05,911 --> 00:54:07,050
like user read,

884
00:54:07,051 --> 00:54:08,730
it just goes off and does its thing.

885
00:54:08,731 --> 00:54:09,990
And in the meantime,

886
00:54:09,991 --> 00:54:13,710
the device has not gotten a kick to actually send some bites off.

887
00:54:16,320 --> 00:54:17,220
And so.

888
00:54:19,440 --> 00:54:20,580
So at some point,

889
00:54:20,581 --> 00:54:21,690
you know we're going to get to interrupt.

890
00:54:22,860 --> 00:54:23,070
Well,

891
00:54:23,071 --> 00:54:23,460
hopefully,

892
00:54:23,461 --> 00:54:27,570
you know because we programmed the hardware to actually generate interrupts.

893
00:54:27,571 --> 00:54:30,000
what's it going to look back and talk a little bit about the direction?

894
00:54:30,001 --> 00:54:32,100
What happens now when it interrupt happens?

895
00:54:37,200 --> 00:54:37,650
I'll get you.

896
00:54:40,080 --> 00:54:42,210
So what does the hardware do?

897
00:54:44,370 --> 00:54:45,270
In this particular case,

898
00:54:45,271 --> 00:54:48,270
the risk life do you want an interrupt.

899
00:54:48,271 --> 00:54:49,170
It actually hasn't happened,

900
00:54:49,171 --> 00:54:53,430
so we set these interop enable bid in the estate of editor,

901
00:54:53,431 --> 00:54:55,560
so the process can be interrupted.

902
00:54:55,561 --> 00:54:55,740
You know,

903
00:54:55,741 --> 00:54:59,100
let's say a keyboard and it raises the inner applying you know,

904
00:54:59,101 --> 00:55:06,390
go through the plague can arouse the interrupt you a particular core and a core.

905
00:55:06,391 --> 00:55:08,880
Last year as a new bid set.

906
00:55:09,900 --> 00:55:11,520
So in Europe enabled it said.

907
00:55:13,350 --> 00:55:14,520
The supervisor,

908
00:55:14,521 --> 00:55:17,790
in a remarkable bit said so If the bit is set,

909
00:55:17,791 --> 00:55:22,650
the following things happened and this it will look very similar to what we've seen before.

910
00:55:22,651 --> 00:55:26,730
But the first thing the hardware does is clear.

911
00:55:26,731 --> 00:55:27,630
As I eat it.

912
00:55:29,340 --> 00:55:32,490
This stops any further raindrops coming in,

913
00:55:32,491 --> 00:55:33,690
so we can just deal with it,

914
00:55:33,691 --> 00:55:34,710
interrupt first and then,

915
00:55:34,711 --> 00:55:35,700
if we want more interrupts,

916
00:55:35,701 --> 00:55:35,940
get up,

917
00:55:35,941 --> 00:55:36,570
we have to learn,

918
00:55:36,571 --> 00:55:37,560
We enabled a bit,

919
00:55:37,561 --> 00:55:41,310
but I used to stop for doing a rupture can visually interact,

920
00:55:41,311 --> 00:55:42,360
interrupting to interrupt.

921
00:55:44,640 --> 00:55:46,800
Then,

922
00:55:46,801 --> 00:55:51,810
as the PC to the exception from encounter to the current PC.

923
00:55:52,890 --> 00:55:54,780
Over generally we were interrupted together.

924
00:55:54,781 --> 00:55:55,530
Let's say Michelle,

925
00:55:55,531 --> 00:55:58,230
return to user space looks happily running in user space,

926
00:55:58,231 --> 00:56:01,350
and interrupt comes in because that one character resent.

927
00:56:01,351 --> 00:56:02,940
Then the programmer found the shaved his.

928
00:56:02,941 --> 00:56:06,030
whatever program counter was in user space.

929
00:56:06,031 --> 00:56:10,590
It saves the safety occurred mode.

930
00:56:13,200 --> 00:56:15,210
In this case of being in our example would be,

931
00:56:15,211 --> 00:56:21,900
you will see that actually the processing supervising amount of in user mode then it's just a moment to supervisor.

932
00:56:26,430 --> 00:56:31,350
and visually sits the program counter to SD Vic,

933
00:56:31,351 --> 00:56:35,580
whenever values in SDB back then that's going to be either.

934
00:56:35,581 --> 00:56:38,550
use a trap or use your back or kernel.

935
00:56:38,551 --> 00:56:38,850
Vic.

936
00:56:39,690 --> 00:56:42,450
I'm depending whether the interrupt happened in whatever.

937
00:56:42,451 --> 00:56:44,280
We're a new kernel space where in Hughes about,

938
00:56:44,281 --> 00:56:49,020
but in our example where maybe she'll return to use a space,

939
00:56:49,021 --> 00:56:52,410
effectively contain the user.

940
00:56:52,411 --> 00:56:54,180
pick a dress and basically,

941
00:56:54,181 --> 00:57:01,740
the hardware level using the kernel at the instruction that is located at the back.

942
00:57:01,741 --> 00:57:04,290
and then we remember from previous lecture.

943
00:57:04,291 --> 00:57:08,850
basically a student you know it goes off and calls user trap.

944
00:57:10,080 --> 00:57:10,380
Okay,

945
00:57:10,381 --> 00:57:12,540
so in the end will basically end up in your trap.

946
00:57:15,390 --> 00:57:17,040
And that's where we start to pick up the story,

947
00:57:17,041 --> 00:57:22,470
because I don't really want to talk too much about the saving and restoring anymore because one,

948
00:57:22,471 --> 00:57:25,650
we explained it in detail in the previous lecture to you already played me,

949
00:57:25,651 --> 00:57:30,000
but also in there and this last traps and laughed and said,

950
00:57:30,001 --> 00:57:30,690
You know,

951
00:57:30,691 --> 00:57:31,920
you know exactly what's going on.

952
00:57:36,930 --> 00:57:37,560
Any questions.

953
00:57:43,320 --> 00:57:43,530
Okay,

954
00:57:43,531 --> 00:57:43,920
so.

955
00:57:46,470 --> 00:57:49,020
So here we go back and use your track in function,

956
00:57:49,021 --> 00:57:50,910
you looked in detail at in their traps,

957
00:57:50,911 --> 00:57:51,930
your love,

958
00:57:51,931 --> 00:58:01,650
and we've dealt with a case of system calls and what we're going to do is basically the only thing we're going to do is look at this case.

959
00:58:02,760 --> 00:58:07,350
We just did a device interrupted,

960
00:58:07,351 --> 00:58:08,130
so we're going to.

961
00:58:09,210 --> 00:58:12,090
That's a little bit lower here in the file.

962
00:58:16,200 --> 00:58:22,620
So here's a device to interrupt and it looks basically at s costs,

963
00:58:22,621 --> 00:58:26,190
register and sees if this is an external interrupt,

964
00:58:26,191 --> 00:58:28,500
and if it's an internal interrupt,

965
00:58:28,501 --> 00:58:31,590
it calls a function we'll play claim to.

966
00:58:31,591 --> 00:58:32,100
Basically,

967
00:58:32,101 --> 00:58:34,860
I clean that particular to clean the interrupt.

968
00:58:34,861 --> 00:58:36,180
So let's go back to the public.

969
00:58:39,420 --> 00:58:41,100
Look at the claim,

970
00:58:41,101 --> 00:58:48,570
and basically what it boils down to is that this particular shampoo will tell the plague.

971
00:58:48,571 --> 00:58:48,870
Hey,

972
00:58:48,871 --> 00:58:52,440
I'm claiming it will distribute zero if you want,

973
00:58:52,441 --> 00:59:03,150
It will tell the plate that's if you one is claiming this particular interrupt and was claim an interrupt and the bleak returns which interrupts it gets down.

974
00:59:03,151 --> 00:59:05,430
your queue for the interrupted actually came in.

975
00:59:05,431 --> 00:59:06,180
And so in this case,

976
00:59:06,181 --> 00:59:08,010
that will be an interrupt.

977
00:59:08,011 --> 00:59:09,270
Or do you aren't in the Arctic,

978
00:59:09,271 --> 00:59:10,890
you tend to duplicate.

979
00:59:10,891 --> 00:59:14,460
the same plane were basically return ten,

980
00:59:14,461 --> 00:59:16,950
and then here in this code will look,

981
00:59:16,951 --> 00:59:17,220
you say,

982
00:59:17,221 --> 00:59:17,520
hey,

983
00:59:17,521 --> 00:59:18,780
is this?

984
00:59:18,781 --> 00:59:19,500
In return?

985
00:59:19,501 --> 00:59:20,370
he was interrupted.

986
00:59:20,371 --> 00:59:20,430
Oh,

987
00:59:20,431 --> 00:59:21,030
that must be a.

988
00:59:21,031 --> 00:59:22,230
you are an interrupt,

989
00:59:22,231 --> 00:59:28,920
and we basically called ewart interrupt function and you are neither a function.

990
00:59:32,130 --> 00:59:36,420
Runs and basically gets the character off your heart,

991
00:59:36,421 --> 00:59:37,650
and we had guessed the character.

992
00:59:37,651 --> 00:59:45,840
If you already has basically looks in the first registered the receive register and gets the character out of there.

993
00:59:47,310 --> 00:59:50,730
And that is an integer and n.

994
00:59:50,731 --> 00:59:55,290
It calls Kosovo interrupt to do the rest of the world.

995
00:59:58,590 --> 00:59:59,100
Okay.

996
01:00:01,680 --> 01:00:02,700
Actually,

997
01:00:02,701 --> 01:00:05,580
I just get did the wrong thing and we were talking about transmission.

998
01:00:11,610 --> 01:00:16,650
So if there was a character on the right side and then the inner wall Tile,

999
01:00:16,651 --> 01:00:17,970
the console era.

1000
01:00:17,971 --> 01:00:23,700
But there is no character correct on the read side because we haven't read any keyboard hasn't done anything yet.

1001
01:00:23,701 --> 01:00:25,860
I were just transmitting a character.

1002
01:00:25,861 --> 01:00:30,120
So doesn't want you return of minus one fall through and then basically,

1003
01:00:30,121 --> 01:00:35,160
when the whole thing in the loop it's called,

1004
01:00:35,161 --> 01:00:43,560
you are start to basically set and use any other color characters that might be in the buffer that the shell and it might be stuck in there and grooming.

1005
01:00:43,561 --> 01:00:50,010
There's another character in there because after the dollar is to space and the write system call might forget how to write.

1006
01:00:50,011 --> 01:00:54,060
This space might have happened concurrently while the device for sending off.

1007
01:00:54,061 --> 01:00:57,870
And so when the interrupt transmit interrupt complete,

1008
01:00:57,871 --> 01:01:01,380
it's going to ask you know that you will find in the buffer yet another character,

1009
01:01:01,381 --> 01:01:03,990
the space character animals in that space character off.

1010
01:01:07,050 --> 01:01:07,560
Okay,

1011
01:01:07,561 --> 01:01:08,160
so it makes sense.

1012
01:01:10,380 --> 01:01:13,530
I have a high level question actually,

1013
01:01:13,531 --> 01:01:18,090
so I understand your tears like useful,

1014
01:01:18,091 --> 01:01:18,540
if I am,

1015
01:01:18,541 --> 01:01:28,170
you like using a keyboard and like characters from the keyboard goes through the yard and then through the sea for years and then the kernel code that we wrote.

1016
01:01:28,171 --> 01:01:31,320
But I am not sure I understand what the point of the report is.

1017
01:01:31,321 --> 01:01:36,570
When the shell is printing characters like the keyboard isn't being interacted with.

1018
01:01:36,571 --> 01:01:36,810
No,

1019
01:01:36,811 --> 01:01:37,380
it is correct,

1020
01:01:37,381 --> 01:01:39,180
but the display is actually.

1021
01:01:39,181 --> 01:01:40,800
there should have two devices here.

1022
01:01:40,801 --> 01:01:47,760
One is that a keyboard and wanted to display or to console and and the way you interact with.

1023
01:01:47,761 --> 01:01:50,400
the console is by York.

1024
01:01:50,401 --> 01:01:54,720
just by sending a character to the console and then the consoles job,

1025
01:01:54,721 --> 01:01:57,840
especially to draw that character on the display.

1026
01:01:59,130 --> 01:02:00,720
I see other things.

1027
01:02:03,000 --> 01:02:04,500
And it might take a time during those Why,

1028
01:02:04,501 --> 01:02:05,370
again of this thing,

1029
01:02:05,371 --> 01:02:06,450
you are sort of interrupt driven.

1030
01:02:08,100 --> 01:02:10,170
Okay,

1031
01:02:10,171 --> 01:02:11,130
so a couple of things.

1032
01:02:11,131 --> 01:02:16,890
Now I want to step back a little bit and think moving at a higher level.

1033
01:02:16,891 --> 01:02:17,340
it's going on,

1034
01:02:17,341 --> 01:02:18,630
so we should walk through the code,

1035
01:02:18,631 --> 01:02:21,570
we get a feeling for the lay of the land,

1036
01:02:21,571 --> 01:02:22,080
and like,

1037
01:02:22,081 --> 01:02:23,010
How did you guess?

1038
01:02:25,800 --> 01:02:31,380
The details before file to step back a second and think a little bit about what it all means.

1039
01:02:32,520 --> 01:02:33,690
And particular,

1040
01:02:33,691 --> 01:02:38,940
what is interesting is interrupted concurrency you sort of think about interrupt from the perspective of concurrency.

1041
01:02:43,320 --> 01:02:48,510
This is one of the things that actually makes interrupts tricky or and difficult to program.

1042
01:02:48,511 --> 01:02:50,340
So first of all,

1043
01:02:50,341 --> 01:02:51,810
if you mention a little bit earlier,

1044
01:02:51,811 --> 01:02:52,770
did the device,

1045
01:02:52,771 --> 01:02:53,370
you know the New York?

1046
01:02:53,371 --> 01:02:54,390
In our case,

1047
01:02:54,391 --> 01:02:55,770
the device in the shampoo.

1048
01:02:56,760 --> 01:02:57,600
Run in parallel.

1049
01:03:03,180 --> 01:03:03,450
So,

1050
01:03:03,451 --> 01:03:03,930
for example,

1051
01:03:03,931 --> 01:03:05,430
in this scenario,

1052
01:03:05,431 --> 01:03:12,540
when you've talked about you already sending off the character to the console,

1053
01:03:12,541 --> 01:03:14,160
and while that's happening,

1054
01:03:14,161 --> 01:03:26,610
distribution skill going about its business and indication of returning to the shell that Shell may make another system called Attempt to write up a space character and all happens in parallel.

1055
01:03:26,611 --> 01:03:29,280
And so we need to manage the parallelism a bit.

1056
01:03:29,281 --> 01:03:30,750
and we already saw a little bit.

1057
01:03:30,751 --> 01:03:32,640
But I can talk a little bit more in detail.

1058
01:03:32,641 --> 01:03:37,590
And the type of parallelism that actually shows up here is typically called a producer and consumer parallelism.

1059
01:03:45,870 --> 01:03:50,400
Now let me talk about it in a second.

1060
01:03:50,401 --> 01:03:53,040
so now we're going to talk about that a little bit more detail.

1061
01:03:53,041 --> 01:03:53,820
The second is.

1062
01:03:55,530 --> 01:03:58,260
That the interrupt.

1063
01:04:02,160 --> 01:04:03,690
Stops the current running program.

1064
01:04:08,700 --> 01:04:09,870
The current program is running.

1065
01:04:12,810 --> 01:04:14,550
So in the case of the shell,

1066
01:04:14,551 --> 01:04:19,890
the shell might be executing extraction like fear of two hundred and twelve and boom.

1067
01:04:19,891 --> 01:04:21,870
Interrupt comes in at a meager at that point.

1068
01:04:21,871 --> 01:04:25,020
Is you stopped?

1069
01:04:25,021 --> 01:04:30,420
If a user space code is not a particularly big deal because when we return the interruptible,

1070
01:04:30,421 --> 01:04:34,020
we restore on the state after the usual of a program,

1071
01:04:34,021 --> 01:04:36,660
and it will resume at that address,

1072
01:04:36,661 --> 01:04:38,130
where which I got interrupted.

1073
01:04:38,131 --> 01:04:44,790
And so we have seen that therewith attracts a page fault into actually worked reasonably well.

1074
01:04:44,791 --> 01:04:48,780
But there's a little bit of a tricky case when the kernel itself could interrupt it.

1075
01:04:48,781 --> 01:04:52,050
So you're running in kernel mode and the Colonel gets interrupted.

1076
01:04:52,051 --> 01:04:55,860
That means that you've got a little bit more detail.

1077
01:04:55,861 --> 01:04:59,640
that even the kernel doesn't really sort of executed straight sequentially.

1078
01:04:59,641 --> 01:05:01,110
If you see one kernel instruction,

1079
01:05:01,111 --> 01:05:03,120
followed by another internal instruction,

1080
01:05:03,121 --> 01:05:05,760
he may be those between those two instructions.

1081
01:05:05,761 --> 01:05:08,730
An interim might happen,

1082
01:05:08,731 --> 01:05:14,490
depending when an interrupt are enabled or not in the winter and some piece of code,

1083
01:05:14,491 --> 01:05:18,180
and it's not good to have an interrupt in between in an occasion.

1084
01:05:18,181 --> 01:05:23,670
The kernel might actually have to disable or enable interrupts to make basically consequences atomic.

1085
01:05:25,350 --> 01:05:26,340
So interrupt.

1086
01:05:29,370 --> 01:05:30,900
Enable and disable.

1087
01:05:35,340 --> 01:05:41,340
I'll talk about it in a second in the more detail and then sort of deferred sort of concurrency problem.

1088
01:05:41,341 --> 01:05:42,000
It shows up.

1089
01:05:44,760 --> 01:05:45,720
Interrupt handler.

1090
01:05:47,520 --> 01:05:48,150
For me to say,

1091
01:05:48,151 --> 01:05:51,300
let me say it differently The top of the driver.

1092
01:05:55,170 --> 01:05:56,400
In the bottom of the driver.

1093
01:05:57,630 --> 01:05:59,160
may run in parallel.

1094
01:06:08,730 --> 01:06:08,880
So,

1095
01:06:08,881 --> 01:06:09,540
for example,

1096
01:06:09,541 --> 01:06:10,440
in our example.

1097
01:06:12,450 --> 01:06:20,130
The shell is going to call the write system call again near to pry the white space after it printed the dollar.

1098
01:06:20,131 --> 01:06:24,360
And while you may need to go back into the top level of the driver,

1099
01:06:24,361 --> 01:06:26,610
it might want to remain on Earth.

1100
01:06:26,611 --> 01:06:30,990
You know this white space to that queue you are actually house,

1101
01:06:30,991 --> 01:06:32,070
but at the same time,

1102
01:06:32,071 --> 01:06:32,820
on another sheep,

1103
01:06:32,821 --> 01:06:41,760
you knew it might actually take interrupt uniform you art and basically also be running in parallel,

1104
01:06:41,761 --> 01:06:45,390
and that's sort of roughly the same code and looking at the same queue.

1105
01:06:45,391 --> 01:06:46,950
and so it's really true that basically,

1106
01:06:46,951 --> 01:06:49,320
the interrupt handler can run in parallel with the bottom.

1107
01:06:49,321 --> 01:06:57,330
half of the device driver must run in parallel in different views on a live interview with the top half of the driver.

1108
01:06:57,331 --> 01:07:00,720
And so we have to manage down a bit in the way you know,

1109
01:07:00,721 --> 01:07:01,560
we're going to manage that.

1110
01:07:01,561 --> 01:07:02,430
He's using locks.

1111
01:07:06,120 --> 01:07:07,830
And because there's a shared data structure here,

1112
01:07:07,831 --> 01:07:09,570
namely the buffer.

1113
01:07:09,571 --> 01:07:20,820
and then we're going to make sure that you know the buffers of data to correctly and you need to make sure that the only one she view at a time basically manipulates.

1114
01:07:20,821 --> 01:07:21,750
dump on a particular buffer.

1115
01:07:21,751 --> 01:07:25,560
If we're going to use locks and locks is going to be the topic of Wednesday's lecture.

1116
01:07:25,561 --> 01:07:27,570
so I'm going to talk much about it at all.

1117
01:07:27,571 --> 01:07:28,500
But it will show a big time.

1118
01:07:28,501 --> 01:07:29,190
on Wednesday.

1119
01:07:30,900 --> 01:07:33,240
The thing I want to focus on is actually a dispute consumer.

1120
01:07:37,470 --> 01:07:38,310
Parallelism,

1121
01:07:38,311 --> 01:07:41,370
and this is a typical thing that shows up in the drivers,

1122
01:07:41,371 --> 01:07:45,030
and it is extremely common to see them.

1123
01:07:45,031 --> 01:07:47,520
so producers,

1124
01:07:47,521 --> 01:07:48,150
consumer.

1125
01:07:53,280 --> 01:07:55,590
And I think it's pretty straightforward,

1126
01:07:55,591 --> 01:07:57,120
so what you've seen.

1127
01:07:57,121 --> 01:07:59,940
there's basically a buffer in the driver.

1128
01:08:01,830 --> 01:08:02,040
You know,

1129
01:08:02,041 --> 01:08:02,580
in our case,

1130
01:08:02,581 --> 01:08:04,710
I think it over thirty two entries in it,

1131
01:08:04,711 --> 01:08:11,010
so the zero to one and there are two pointers.

1132
01:08:11,011 --> 01:08:12,840
There's a read pointer and the write pointer.

1133
01:08:15,180 --> 01:08:19,380
And here's the write pointer read pointer if they're equal,

1134
01:08:19,381 --> 01:08:25,380
the buffer is empty and to win near the shell right in her pussy.

1135
01:08:27,360 --> 01:08:30,990
Basically puts the character like the dollar here and bumps up here,

1136
01:08:30,991 --> 01:08:32,760
the write pointer to the next entry.

1137
01:08:34,560 --> 01:08:37,710
Then I started to produce a part and a producer can keep going,

1138
01:08:37,711 --> 01:08:38,640
and you are feeling up.

1139
01:08:38,641 --> 01:08:47,610
You know all this and all you know and all hit if the next incremental hit,

1140
01:08:47,611 --> 01:08:48,210
the read pointer.

1141
01:08:48,211 --> 01:08:51,270
we know that there's this circled buffer is full,

1142
01:08:51,271 --> 01:08:53,250
and at that point you know the producer must stop.

1143
01:08:53,251 --> 01:09:00,870
and we started happening in the code I second ago where the user basically the euro Cup of Sleep and we'll put this.

1144
01:09:02,940 --> 01:09:06,360
Shell on the site and started running another process.

1145
01:09:07,980 --> 01:09:10,890
So the interrupt handlers me like you aren't in it or enter.

1146
01:09:12,930 --> 01:09:13,650
In this case,

1147
01:09:13,651 --> 01:09:18,750
at the consumer immediately every time,

1148
01:09:18,751 --> 01:09:23,460
or you would start basically when you are an interest,

1149
01:09:23,461 --> 01:09:25,980
it will look at the end of the read pointer.

1150
01:09:25,981 --> 01:09:29,820
If the read pointer is behind the write pointer to the write pointer are any further.

1151
01:09:29,821 --> 01:09:31,470
Let's say to space if you're too now,

1152
01:09:31,471 --> 01:09:35,160
and I know I can know how to draw a space for two years of space.

1153
01:09:35,161 --> 01:09:41,640
It's where the write pointer might now be here till after the always mean you're changed at all.

1154
01:09:41,641 --> 01:09:41,970
You know,

1155
01:09:41,971 --> 01:09:43,140
I'm behind the right order.

1156
01:09:43,141 --> 01:09:45,060
That means I got to send the next one.

1157
01:09:46,350 --> 01:09:53,460
And so you can think about this as sort of these right in a pointer and the write pointer is chasing the write pointer,

1158
01:09:53,461 --> 01:09:56,670
and that's what's gone now.

1159
01:09:56,671 --> 01:10:03,570
It could be the case that at some point you keeps up with the write pointer and return them when they're equal.

1160
01:10:03,571 --> 01:10:05,940
And then he noticed that the buffer is empty and there's nothing to do.

1161
01:10:09,300 --> 01:10:09,870
So it makes sense.

1162
01:10:12,270 --> 01:10:18,450
So so this Danish pressure is the same for all course.

1163
01:10:18,451 --> 01:10:18,630
OK,

1164
01:10:18,631 --> 01:10:23,640
so let me go back to the code works since the height of the picture,

1165
01:10:23,641 --> 01:10:25,110
and let's go back to your heart.

1166
01:10:25,111 --> 01:10:28,920
So this data structure that I just talked about is this buffer.

1167
01:10:32,670 --> 01:10:38,430
And the two pointers get the right in the read pointer are used to point out indexes using Pcs.

1168
01:10:39,540 --> 01:10:39,900
Okay.

1169
01:10:41,160 --> 01:10:44,070
And this data fractured Lucy Memory.

1170
01:10:45,510 --> 01:10:51,750
And there's only one ram right until all the course might be interacting with this data structure in parallel.

1171
01:10:53,280 --> 01:10:54,450
As why we need locks.

1172
01:10:57,570 --> 01:10:57,870
OK,

1173
01:10:57,871 --> 01:11:02,250
I see a rather question was for a sleep.

1174
01:11:02,251 --> 01:11:09,180
How does it know to I'll make the shell sleep won't like what is written.

1175
01:11:09,181 --> 01:11:12,660
There is just the address.

1176
01:11:12,661 --> 01:11:14,640
Yeah,

1177
01:11:14,641 --> 01:11:16,860
basically,

1178
01:11:16,861 --> 01:11:23,100
sleep color puts the current process running on the sleep in a sleep state,

1179
01:11:23,101 --> 01:11:28,350
and we'll talk about it next week or the week after in a great amount of detail,

1180
01:11:28,351 --> 01:11:32,250
and it passes in the thing that is waiting for,

1181
01:11:32,251 --> 01:11:35,220
and in this case he had on his d the dress you know.

1182
01:11:35,221 --> 01:11:35,520
Basically,

1183
01:11:35,521 --> 01:11:36,960
it has a channel idea where,

1184
01:11:36,961 --> 01:11:51,960
like a way of communicating from one and actually sleeping on this cases of teacher is the dress of new artists are in and start function.

1185
01:11:51,961 --> 01:11:54,900
It wants their space again in the buffer.

1186
01:11:54,901 --> 01:11:55,440
Ah,

1187
01:11:55,441 --> 01:11:59,340
it will wake up corundum call the corresponding call and wake up with the?

1188
01:11:59,341 --> 01:11:59,580
U.

1189
01:11:59,581 --> 01:12:04,620
R T are charged to indicate that any process that actually sleeping on this address should be woken up.

1190
01:12:07,500 --> 01:12:10,590
How does exactly is implemented is something that we'll see a little bit later.

1191
01:12:13,710 --> 01:12:15,780
It's a mixed history.

1192
01:12:15,781 --> 01:12:17,280
goal is going to get our sleep and wake up.

1193
01:12:21,540 --> 01:12:23,490
Sometimes called conditional synchronization.

1194
01:12:27,510 --> 01:12:28,410
Any other questions?

1195
01:12:36,090 --> 01:12:36,480
Okay.

1196
01:12:37,680 --> 01:12:37,950
Good.

1197
01:12:39,600 --> 01:12:40,950
Let's say so,

1198
01:12:40,951 --> 01:12:41,550
let's see.

1199
01:12:43,920 --> 01:12:48,480
So that is basically the whole story for printing and daughter,

1200
01:12:48,481 --> 01:12:49,230
and as you can see,

1201
01:12:49,231 --> 01:12:51,780
it's actually quite involved.

1202
01:12:51,781 --> 01:12:56,850
There's a lot of pieces I'm working together to actually get this dollar out into the console.

1203
01:12:58,080 --> 01:13:02,490
And something similar basically happens on the read side.

1204
01:13:02,491 --> 01:13:13,860
so at some point to Shell has printed the above the door and the white space and minimal coverage to basically read input from the keyboard like this one.

1205
01:13:13,861 --> 01:13:18,900
And we wanted to see what happens when that had been happening.

1206
01:13:18,901 --> 01:13:19,680
So the starch,

1207
01:13:19,681 --> 01:13:22,560
basically Indians with filed again.

1208
01:13:22,561 --> 01:13:23,400
That's what they noticed.

1209
01:13:23,401 --> 01:13:25,530
There's a read system call.

1210
01:13:25,531 --> 01:13:27,660
If its scale reading for the console,

1211
01:13:27,661 --> 01:13:30,870
it will cause a more accurate CT file.

1212
01:13:30,871 --> 01:13:32,850
Read not right.

1213
01:13:35,880 --> 01:13:36,720
The device,

1214
01:13:36,721 --> 01:13:37,860
which in this case is a case,

1215
01:13:37,861 --> 01:13:38,610
hits the console.

1216
01:13:38,611 --> 01:13:42,330
Then we call the read method for that device,

1217
01:13:42,331 --> 01:13:44,520
and that is a console that C,

1218
01:13:44,521 --> 01:13:45,630
and so we're going to go from.

1219
01:13:45,631 --> 01:13:52,530
Two personal read is being called and basically it has the same structure business you are.

1220
01:13:52,531 --> 01:13:53,640
there's a circular buffer.

1221
01:13:54,720 --> 01:13:58,530
On the top here it is,

1222
01:13:58,531 --> 01:14:01,680
it's an input buffer from the two thousand and eight characters in it.

1223
01:14:01,681 --> 01:14:05,100
and basically it's the same game to produce a consumer parallelism.

1224
01:14:05,101 --> 01:14:07,860
but in this case the shell is the consumer unity.

1225
01:14:07,861 --> 01:14:17,340
It actually is reading characters off the buffer and the keyboard is the pollution and it sticks to characters into the butter.

1226
01:14:17,341 --> 01:14:22,560
And so you know let's go back to console read if there's nothing.

1227
01:14:22,561 --> 01:14:24,840
If the read pointer would read.

1228
01:14:24,841 --> 01:14:30,390
Index in the right index are the same in the buffer is empty and it goes back to sleep again.

1229
01:14:31,380 --> 01:14:33,900
And so after its print,

1230
01:14:33,901 --> 01:14:40,110
the dollar in an important the shell is going to go to sleep.

1231
01:14:40,111 --> 01:14:44,370
Colonel will put the shell to sleep until a character comes in.

1232
01:14:45,510 --> 01:14:47,010
And so at some point,

1233
01:14:47,011 --> 01:14:49,770
let's say you know a user types in l.

1234
01:14:49,771 --> 01:15:04,080
you know the first character from Alice on the keyboard that will cost around and the L to be sent into the yard cheap on the on the board that will be routed through the plate to some core.

1235
01:15:04,081 --> 01:15:10,020
That horrible thing to interrupt that will go to death inner that that inner we'll see how that viewer had interrupted,

1236
01:15:10,021 --> 01:15:15,480
and it will call the function that we looked at a second ago.

1237
01:15:15,481 --> 01:15:20,430
It's goes back to the bottom where I got my confused myself just for a second.

1238
01:15:20,431 --> 01:15:21,690
So in this case,

1239
01:15:21,691 --> 01:15:22,620
we will write.

1240
01:15:22,621 --> 01:15:33,240
It won't get a character from the device from the unit of ice cream will get the character hell and we'll call the console interrupt function using the character hell so we can go back to control.

1241
01:15:36,150 --> 01:15:42,060
And because you know it gets the character so now we have an L.

1242
01:15:42,061 --> 01:15:43,620
If the control P,

1243
01:15:43,621 --> 01:15:47,070
you know an act of Princeton list in the preceding list,

1244
01:15:47,071 --> 01:15:47,880
implements control,

1245
01:15:47,881 --> 01:15:52,380
age and control you to do that space and control whatever.

1246
01:15:52,381 --> 01:15:55,530
But in all other cases going to basically what it does,

1247
01:15:55,531 --> 01:16:07,770
it echoes to the character back to the user by printing it to the console and then eventually sixty character into the buffer and wake up the process.

1248
01:16:07,771 --> 01:16:09,420
That's waiting for that buffer.

1249
01:16:09,421 --> 01:16:18,960
If there's a process weighting if it has hit new wine and there's a process waiting and will wake up the waiting process and then the waiting process will reach.

1250
01:16:18,961 --> 01:16:20,370
you know the characters out of the buffer.

1251
01:16:22,920 --> 01:16:31,500
So here again we see this sort of decoupling using a buffer between the consumers and the producers show that the precision of consumer can just run in parallel.

1252
01:16:31,501 --> 01:16:33,600
independent each on their own speed.

1253
01:16:33,601 --> 01:16:35,100
and you want to go very fast.

1254
01:16:35,101 --> 01:16:36,720
You know that you know the button will be inferior,

1255
01:16:36,721 --> 01:16:38,250
fool and it will block,

1256
01:16:38,251 --> 01:16:40,020
wait until the other guy catch your shop.

1257
01:16:43,440 --> 01:16:44,490
Any questions about this.

1258
01:16:55,230 --> 01:16:55,710
Okay.

1259
01:16:58,920 --> 01:17:01,560
Can I talk basically like one more thing?

1260
01:17:04,830 --> 01:17:05,550
In earnest.

1261
01:17:09,510 --> 01:17:09,750
You know,

1262
01:17:09,751 --> 01:17:13,920
I'm going to talk a little bit about sort of interrupt evolution.

1263
01:17:13,921 --> 01:17:15,810
What has happened over the last decades?

1264
01:17:25,350 --> 01:17:30,000
So if your interviews to be relative to not do across a reasonable fast.

1265
01:17:31,740 --> 01:17:32,220
Tickler.

1266
01:17:36,750 --> 01:17:41,610
Fast Times the original UNIX was developed.

1267
01:17:41,611 --> 01:17:45,390
You know that's the case and then basically meant that the hardware is very simple.

1268
01:17:46,890 --> 01:17:50,850
Because if any really serious work needs to be done so hard,

1269
01:17:50,851 --> 01:17:56,130
we could just interrupt the posture and you know the project would do it on the work and its old,

1270
01:17:56,131 --> 01:17:57,930
but they get an art in itself could be reasonable,

1271
01:17:57,931 --> 01:17:58,770
Illustrate fork.

1272
01:18:00,120 --> 01:18:02,550
Now interrupts are slow.

1273
01:18:03,480 --> 01:18:05,610
Compared to the process,

1274
01:18:05,611 --> 01:18:08,880
you can see that right because the interrupt handler you need to save,

1275
01:18:08,881 --> 01:18:10,650
restore registers,

1276
01:18:10,651 --> 01:18:11,610
it makes you take the interact.

1277
01:18:11,611 --> 01:18:12,570
so there's a couple who you know.

1278
01:18:15,180 --> 01:18:18,780
This is a whole bunch of instructions that it is being used to actually serve the interrupt.

1279
01:18:19,650 --> 01:18:21,060
And so ah,

1280
01:18:21,061 --> 01:18:24,090
if a device generate interrupted a high speed,

1281
01:18:24,091 --> 01:18:27,540
then the process is going to have a tough time keeping up.

1282
01:18:27,541 --> 01:18:30,750
And so you look at today's devices.

1283
01:18:30,751 --> 01:18:31,050
Basically,

1284
01:18:31,051 --> 01:18:33,540
the hardware of the device is a lot more work.

1285
01:18:40,080 --> 01:18:45,060
And so basically without too much of the work on the device itself before actually generating an interrupt.

1286
01:18:47,400 --> 01:18:50,520
And just to avoid interrupting the process or too much.

1287
01:18:51,660 --> 01:18:52,140
Now,

1288
01:18:52,141 --> 01:18:56,850
if you really have a high performance device like saying you have a gigabyte kick a bit.

1289
01:18:58,590 --> 01:18:59,160
Even it?

1290
01:19:01,050 --> 01:19:02,820
And you know that card.

1291
01:19:02,821 --> 01:19:03,780
If you use a lot,

1292
01:19:03,781 --> 01:19:06,000
a lot of small packages packets,

1293
01:19:06,001 --> 01:19:11,430
then you know you can actually generates weren't even itself could generate about one fire.

1294
01:19:11,431 --> 01:19:11,940
At one point,

1295
01:19:11,941 --> 01:19:13,650
five million packets per second.

1296
01:19:16,710 --> 01:19:18,990
For animals like sixty four even a pack,

1297
01:19:18,991 --> 01:19:21,390
achieving you do the math you can roughly out to.

1298
01:19:21,391 --> 01:19:22,710
Basically you're generating one point.

1299
01:19:22,711 --> 01:19:25,530
five million packets per second thing you could receive.

1300
01:19:25,531 --> 01:19:27,960
and so that basically means you know one interrupt.

1301
01:19:30,360 --> 01:19:33,510
If you did it for every packet per microseconds.

1302
01:19:37,380 --> 01:19:37,710
In fact,

1303
01:19:37,711 --> 01:19:44,490
a little bit more narrow than it loses less than a little bit more than that.

1304
01:19:44,491 --> 01:19:45,630
You basically,

1305
01:19:45,631 --> 01:19:49,950
you know we're going to think about it because one interrupted or three microseconds is basically to operating system.

1306
01:19:49,951 --> 01:19:53,250
The kernel basically has a budget of like one microseconds,

1307
01:19:53,251 --> 01:19:55,890
obstructions to actually process the packets and the fact that it's one point,

1308
01:19:55,891 --> 01:20:01,680
five million such a little bit less than a budget of a microsecond.

1309
01:20:02,760 --> 01:20:03,780
So you could compute out on me,

1310
01:20:03,781 --> 01:20:05,100
I'm an obstruction to ideas,

1311
01:20:05,101 --> 01:20:06,810
and it's not going to be that much.

1312
01:20:06,811 --> 01:20:24,030
and so in that case you need to have a different plants like what do you do with the package would interrupt her actually coming so fast that the pressure really can't keep up and the solution to that you used to you.

1313
01:20:24,031 --> 01:20:25,530
for these fast devices,

1314
01:20:25,531 --> 01:20:26,820
it's actually something that we use.

1315
01:20:26,821 --> 01:20:27,630
It's called calling.

1316
01:20:33,060 --> 01:20:37,980
And instead of lying in Arabic,

1317
01:20:37,981 --> 01:20:39,150
so if you also could do you,

1318
01:20:39,151 --> 01:20:42,900
just keep in reading that control register and to see if there's a byte,

1319
01:20:42,901 --> 01:20:44,520
dare like a new art registered.

1320
01:20:44,521 --> 01:20:50,250
We used to keep reading that in each are registered and just check if there's a right there,

1321
01:20:50,251 --> 01:20:56,250
and you know what the spinal boils out extends to distribute your spins.

1322
01:20:59,730 --> 01:21:04,410
The spins on the device and the old device as input.

1323
01:21:06,480 --> 01:21:06,990
Test data.

1324
01:21:10,650 --> 01:21:12,120
In this waste,

1325
01:21:12,121 --> 01:21:13,290
so if you say it goes crazy,

1326
01:21:13,291 --> 01:21:13,800
because?

1327
01:21:17,040 --> 01:21:24,000
Yet while we're checking that register over and over and over again to see if they're tackling a year and you data,

1328
01:21:24,001 --> 01:21:35,130
you are not using those cycles to run it on an application and before and what you're seeing is that you know if there's nothing here basically to a kernel which to shout to sleep so that another application could run.

1329
01:21:35,131 --> 01:21:42,360
But do we do pulling then what did happen now for a slow device you clearly want,

1330
01:21:42,361 --> 01:21:42,630
you know,

1331
01:21:42,631 --> 01:21:44,460
not spin forever until the slides,

1332
01:21:44,461 --> 01:21:47,280
if I finally get around to actually doing its work.

1333
01:21:47,281 --> 01:21:47,760
Ah,

1334
01:21:47,761 --> 01:21:53,430
we really like to basically switch out into the shell and so that we can run something else.

1335
01:21:53,431 --> 01:21:56,340
But if the device extremely fast,

1336
01:21:56,341 --> 01:21:58,860
then the overhead of the interruption is high,

1337
01:21:58,861 --> 01:22:03,450
and we'd better off actually wasting basically pulling the device because very quickly,

1338
01:22:03,451 --> 01:22:04,500
we're going to get success.

1339
01:22:06,930 --> 01:22:10,590
And so if we should be able to devise a slow.

1340
01:22:16,770 --> 01:22:17,220
Butt.

1341
01:22:23,370 --> 01:22:24,870
But if the device is fast.

1342
01:22:30,270 --> 01:22:33,450
It seems safe saving your story.

1343
01:22:36,840 --> 01:22:39,870
Who says the old entries entering an Egypt costs?

1344
01:22:46,050 --> 01:22:55,560
It's over time will help you get through a high performance network cards on a wall if it's a stream of packets coming in and it actually you will use falling and more.

1345
01:22:55,561 --> 01:22:59,160
and the most sophisticated drivers are basically they dynamically switch.

1346
01:23:02,820 --> 01:23:04,470
Switch between polling and interrupts.

1347
01:23:18,270 --> 01:23:18,750
Okay.

1348
01:23:21,030 --> 01:23:21,870
Any questions.

1349
01:23:24,300 --> 01:23:25,440
Close to my eye,

1350
01:23:25,441 --> 01:23:26,280
my eye does my time.

1351
01:23:26,281 --> 01:23:26,970
Roger de job.

1352
01:23:29,340 --> 01:23:30,510
And your remaining questions?

1353
01:23:35,250 --> 01:23:36,360
Okay,

1354
01:23:36,361 --> 01:23:40,830
then I'll see you on Wednesday and visually Wednesday we're going to continue the story off currency,

1355
01:23:40,831 --> 01:23:42,180
and we're going to sort of have their parallels.

1356
01:23:42,181 --> 01:23:46,740
And we're going to see some mechanisms to actually manage the parallelism to make sure that's shared.

1357
01:23:46,741 --> 01:23:49,620
Data structures get them data correctly.

1358
01:23:49,621 --> 01:23:50,970
So I'll see you On Wednesday.

1359
01:23:54,690 --> 01:23:55,320
Oh,

1360
01:23:55,321 --> 01:23:56,610
I'm sorry,

1361
01:23:56,611 --> 01:24:02,220
I was trying to find where my question was because I lost my question was,

1362
01:24:02,221 --> 01:24:04,800
and the so I saw it.

1363
01:24:04,801 --> 01:24:05,430
you are in,

1364
01:24:05,431 --> 01:24:09,390
it is just being called once is out Y.

1365
01:24:09,391 --> 01:24:11,100
There is just one,

1366
01:24:11,101 --> 01:24:14,130
a buffer for all thee,

1367
01:24:14,131 --> 01:24:14,850
of course,

1368
01:24:14,851 --> 01:24:19,050
to share together.

1369
01:24:19,051 --> 01:24:19,260
Well,

1370
01:24:19,261 --> 01:24:21,030
there's also the only one you are device.

1371
01:24:24,540 --> 01:24:32,280
Other men in a critical response to the one you are device that action is being shared between all the course,

1372
01:24:32,281 --> 01:24:35,610
are likely to make multiple processes running on different course.

1373
01:24:35,611 --> 01:24:37,050
All trying to print to the console.

1374
01:24:38,610 --> 01:24:39,300
OK,

1375
01:24:39,301 --> 01:24:40,050
I see,

1376
01:24:40,051 --> 01:24:40,170
Oh,

1377
01:24:40,171 --> 01:24:40,530
yeah,

1378
01:24:40,531 --> 01:24:41,460
my sense,

1379
01:24:41,461 --> 01:24:43,710
I make sense.

1380
01:24:43,711 --> 01:24:44,760
like only one.

1381
01:24:45,600 --> 01:24:49,620
A quarrel do stuff with you are at a time.

1382
01:24:49,621 --> 01:24:50,490
Yeah,

1383
01:24:50,491 --> 01:24:50,970
well,

1384
01:24:50,971 --> 01:24:52,740
it's a slightly complicated,

1385
01:24:52,741 --> 01:24:53,910
but let's look at,

1386
01:24:53,911 --> 01:24:58,350
so let's say there are multiple guys writing just the forward one experiment.

1387
01:24:58,351 --> 01:24:59,250
correct.

1388
01:24:59,251 --> 01:25:00,090
Ah.

1389
01:25:04,320 --> 01:25:06,750
And what we see there are multiple all.

1390
01:25:06,751 --> 01:25:07,650
Let me actually.

1391
01:25:11,700 --> 01:25:12,060
So here,

1392
01:25:12,061 --> 01:25:12,900
if you are twitchy,

1393
01:25:12,901 --> 01:25:13,230
convicted,

1394
01:25:13,231 --> 01:25:15,840
the first thing you see is actually it actually required for lock.

1395
01:25:16,920 --> 01:25:21,750
So a multiple cores are trying to have put a character into it in a buffer,

1396
01:25:21,751 --> 01:25:25,230
and one of them is going to get to walk and none of the others were getting to walk.

1397
01:25:25,231 --> 01:25:28,500
That's about one guy you know the one sea view that actually got to lock her quiet.

1398
01:25:28,501 --> 01:25:34,650
A lot successfully is able to go in and look at the write pointer.

1399
01:25:34,651 --> 01:25:36,840
Stick a character in it and if possible,

1400
01:25:36,841 --> 01:25:38,940
and otherwise go to sleep.

1401
01:25:38,941 --> 01:25:41,310
and then if it's done,

1402
01:25:41,311 --> 01:25:41,610
you know,

1403
01:25:41,611 --> 01:25:42,180
religious,

1404
01:25:42,181 --> 01:25:48,900
the moc and in the next you know a coworker can go in and acquire the lock into its work.

1405
01:25:48,901 --> 01:25:54,780
And so basically these lock and civilize the concurrent access to New York.

1406
01:25:58,440 --> 01:25:59,400
That makes sense.

1407
01:25:59,401 --> 01:25:59,760
Yeah,

1408
01:25:59,761 --> 01:26:00,510
thank you.

1409
01:26:02,520 --> 01:26:03,240
On Wednesday,

1410
01:26:03,241 --> 01:26:04,650
we'll talk in detail about locks.

1411
01:26:07,290 --> 01:26:08,070
Thank you.

1412
01:26:10,230 --> 01:26:11,160
Any further questions.

1413
01:26:12,900 --> 01:26:13,800
I have a question.

1414
01:26:14,790 --> 01:26:17,100
So I,

1415
01:26:17,101 --> 01:26:24,060
as far as I understand why we need the lock inside the interrupted because me there's only one console and they can be multiple.

1416
01:26:24,061 --> 01:26:24,990
Cores lights.

1417
01:26:27,270 --> 01:26:29,910
You mean the words this luck,

1418
01:26:29,911 --> 01:26:34,890
I think so right because usually we don't want to lock things inside interrupts right.

1419
01:26:34,891 --> 01:26:35,190
Yeah,

1420
01:26:35,191 --> 01:26:35,580
yeah,

1421
01:26:35,581 --> 01:26:36,060
yeah,

1422
01:26:36,061 --> 01:26:37,140
you asked this question by email.

1423
01:26:39,240 --> 01:26:40,380
Yes,

1424
01:26:40,381 --> 01:26:43,950
the economy is that the US has mentioned earlier the bottom half.

1425
01:26:43,951 --> 01:26:44,520
During the interim,

1426
01:26:44,521 --> 01:26:49,560
Henry could run in parallel with the top half,

1427
01:26:49,561 --> 01:26:51,480
and so one core.

1428
01:26:51,481 --> 01:26:55,380
if you could be doing you are Pucci and another core could be used in running.

1429
01:26:55,381 --> 01:26:58,080
You are an inner.

1430
01:26:58,081 --> 01:27:01,950
We've got to make sure that they sort of don't get tangled up together so that they shared.

1431
01:27:01,951 --> 01:27:06,240
Realize correctly in the lock basically ensures that they get serialized OK.

1432
01:27:06,241 --> 01:27:09,030
that makes sense.

1433
01:27:09,031 --> 01:27:15,390
That does mean that sometimes like all course could potentially be waiting for one of them to be handling this right.

1434
01:27:18,150 --> 01:27:22,320
Is the integral test the weight and that nothing else can get scheduled?

1435
01:27:22,321 --> 01:27:22,920
Oh,

1436
01:27:22,921 --> 01:27:23,190
well,

1437
01:27:23,191 --> 01:27:24,060
I'll get to bloom into.

1438
01:27:24,061 --> 01:27:25,230
Some other process may be running.

1439
01:27:25,231 --> 01:27:28,320
It's unlikely there's no deadlock.

1440
01:27:28,321 --> 01:27:28,650
OK.

1441
01:27:28,651 --> 01:27:30,690
There is a risk of Denmark.

1442
01:27:30,691 --> 01:27:33,510
that's not this one we'll talk about on Wednesday.

1443
01:27:35,880 --> 01:27:36,300
Butt.

1444
01:27:38,790 --> 01:27:39,180
Recently,

1445
01:27:39,181 --> 01:27:39,810
one of these means,

1446
01:27:39,811 --> 01:27:40,980
like if there's multiple guys.

1447
01:27:42,060 --> 01:27:45,390
I told you I could see in the buffer pool,

1448
01:27:45,391 --> 01:27:46,800
then some point is interrupted.

1449
01:27:46,801 --> 01:27:50,820
The actual release didn't walk.

1450
01:27:50,821 --> 01:27:51,090
So,

1451
01:27:51,091 --> 01:27:51,870
for example,

1452
01:27:51,871 --> 01:27:53,430
let's go back to your Gucci.

1453
01:27:53,431 --> 01:27:53,850
What actually,

1454
01:27:53,851 --> 01:27:54,360
what happened,

1455
01:27:54,361 --> 01:28:01,050
Greg is that they will call sleep and sleep actually takes the walkers and are an argument,

1456
01:28:01,051 --> 01:28:02,670
and we'll see later why.

1457
01:28:02,671 --> 01:28:03,840
But internally,

1458
01:28:03,841 --> 01:28:09,030
before sleep actually puts the process definitely to sleep and will release the lock.

1459
01:28:09,031 --> 01:28:09,420
Oh,

1460
01:28:09,421 --> 01:28:09,720
I see,

1461
01:28:09,721 --> 01:28:11,880
so basically you call sleep with the law,

1462
01:28:11,881 --> 01:28:13,140
and then that means okay.

1463
01:28:13,141 --> 01:28:16,650
Release the law while you sleep with so someone else does them.

1464
01:28:16,651 --> 01:28:17,940
It's like an interesting.

1465
01:28:18,900 --> 01:28:20,850
Your name when you return from sleep,

1466
01:28:20,851 --> 01:28:23,130
you just read it again.

1467
01:28:23,131 --> 01:28:25,350
You get to walk back as bright,

1468
01:28:25,351 --> 01:28:31,170
bright media fast asleep has a separate story that we'll talk about in a week or two weeks.

1469
01:28:32,160 --> 01:28:32,760
Then I said,

1470
01:28:32,761 --> 01:28:34,440
Yeah,

1471
01:28:34,441 --> 01:28:35,700
so I guess.

1472
01:28:37,590 --> 01:28:41,880
So I guess I wasn't that clear to me until she feels.

1473
01:28:41,881 --> 01:28:55,410
get interrupted when somebody you like to send something through you are no well depends depends on how you program the bleak the way you actually six US program to places that only one seat for you.

1474
01:28:55,411 --> 01:28:56,880
I'll see if you might get interrupted.

1475
01:28:59,100 --> 01:29:01,080
One is going to clean the interrupt.

1476
01:29:03,330 --> 01:29:04,560
Okay,

1477
01:29:04,561 --> 01:29:07,200
so if you go back to the place you know when you're going to get an interrupt,

1478
01:29:07,201 --> 01:29:08,670
you and you call display claim,

1479
01:29:08,671 --> 01:29:14,490
and that's if you knew that particular quarter is going to get the,

1480
01:29:14,491 --> 01:29:17,100
it's going to get their dire que.

1481
01:29:17,101 --> 01:29:19,860
and basically the bleak will remember that no.

1482
01:29:19,861 --> 01:29:22,590
then I accused him of being served and won't give it to anybody else.

1483
01:29:24,780 --> 01:29:25,620
I see OK,

1484
01:29:25,621 --> 01:29:30,060
so we'll just one of them will get it randomly or no.

1485
01:29:30,061 --> 01:29:31,350
Ah,

1486
01:29:31,351 --> 01:29:32,820
you can program to place.

1487
01:29:32,821 --> 01:29:35,100
You could say maybe predators.

1488
01:29:35,101 --> 01:29:39,180
Once all I see the blood I see as he saw inside that.

1489
01:29:39,181 --> 01:29:39,690
yeah,

1490
01:29:39,691 --> 01:29:40,470
inside the plague,

1491
01:29:40,471 --> 01:29:43,380
as the code that actually the size and who they recruited bother.

1492
01:29:44,640 --> 01:29:45,870
If you had to pick a shirt,

1493
01:29:45,871 --> 01:29:46,980
but there's no code in the public,

1494
01:29:46,981 --> 01:29:47,970
I think you know it's all.

1495
01:29:47,971 --> 01:29:48,420
Yeah,

1496
01:29:48,421 --> 01:29:48,750
alright,

1497
01:29:48,751 --> 01:29:50,850
OK,

1498
01:29:50,851 --> 01:29:51,660
if you prove it.

1499
01:29:54,000 --> 01:29:54,780
Yeah,

1500
01:29:54,781 --> 01:29:55,230
I've grown up,

1501
01:29:55,231 --> 01:29:55,560
OK?

1502
01:29:57,420 --> 01:29:57,690
Yeah,

1503
01:29:57,691 --> 01:29:58,530
I was just going to say,

1504
01:29:58,531 --> 01:30:00,120
Where does the play cold run by?

1505
01:30:00,121 --> 01:30:00,330
Yeah,

1506
01:30:00,331 --> 01:30:01,500
it's not called its hardware.

1507
01:30:01,501 --> 01:30:03,030
I'll get that make sense.

1508
01:30:03,031 --> 01:30:03,330
All right,

1509
01:30:03,331 --> 01:30:04,230
thanks,

1510
01:30:04,231 --> 01:30:04,560
I'll see you.

1511
01:30:04,561 --> 01:30:05,040
On Wednesday.

1512
01:30:07,860 --> 01:30:15,090
So I've got a question and related to the thinking about multiple cores running at the same time,

1513
01:30:15,091 --> 01:30:16,140
so I think I,

1514
01:30:16,141 --> 01:30:18,360
we're calling them one of them to the labs with say,

1515
01:30:18,361 --> 01:30:22,050
the crime suppression actually liked interleaves style.

1516
01:30:22,051 --> 01:30:27,480
But often is that because the locks are only around,

1517
01:30:27,481 --> 01:30:28,920
like the policy,

1518
01:30:28,921 --> 01:30:32,550
not at the glitzy caused from multiple course could interleave,

1519
01:30:32,551 --> 01:30:33,030
meaning that,

1520
01:30:33,031 --> 01:30:33,750
like a single print,

1521
01:30:33,751 --> 01:30:36,720
cash is not guaranteed to be a tensor You got it.

1522
01:30:39,540 --> 01:30:40,320
I thank you.

1523
01:30:42,270 --> 01:30:44,280
I have a quick question,

1524
01:30:44,281 --> 01:30:52,050
so I remember reading that the meeting said something about the timer interrupts being handled in machine learning,

1525
01:30:52,051 --> 01:30:55,470
and I was wondering where that was handled.

1526
01:30:55,471 --> 01:30:56,970
When we're doing the chops up.

1527
01:30:58,020 --> 01:30:59,700
I'm like what were they switch to?

1528
01:30:59,701 --> 01:31:04,950
Machine mode was happening during the chops lab and then what we were doing.

1529
01:31:04,951 --> 01:31:05,280
Yeah,

1530
01:31:05,281 --> 01:31:09,900
that's a great question,

1531
01:31:09,901 --> 01:31:12,900
so I'm pulling up the code.

1532
01:31:12,901 --> 01:31:14,820
So if you look at your star to correct and dessert,

1533
01:31:14,821 --> 01:31:16,950
Start rooms in edit mode at the beginning of time,

1534
01:31:16,951 --> 01:31:23,220
when the machine boots and IT programmes the time of chip,

1535
01:31:23,221 --> 01:31:23,670
your time,

1536
01:31:23,671 --> 01:31:25,740
reading it and the time read,

1537
01:31:25,741 --> 01:31:29,550
it basically prevents the plate of the Clint,

1538
01:31:29,551 --> 01:31:41,910
which is the local interrupter to generate interrupts when a clock interrupt happens and and basically years,

1539
01:31:41,911 --> 01:31:55,170
probably the most important function here it sets the machine will trap him or to dysfunctional timer back so there's written assembly and when a timer interrupt happens,

1540
01:31:55,171 --> 01:31:57,240
that function is being called.

1541
01:31:57,241 --> 01:31:59,160
and so when you're a kernel,

1542
01:31:59,161 --> 01:32:04,230
running in user mode or in supervised mode and cleaned,

1543
01:32:04,231 --> 01:32:05,340
generates and interrupt,

1544
01:32:05,341 --> 01:32:13,230
raises the line and it will switch to machine mode and call this function time effect in same way,

1545
01:32:13,231 --> 01:32:18,630
basically as almost equivalent to what we have seen for supervisor mode and user mode.

1546
01:32:18,631 --> 01:32:20,190
OK,

1547
01:32:20,191 --> 01:32:23,190
and then if you look in awe,

1548
01:32:23,191 --> 01:32:25,890
Colonel Vic done s.

1549
01:32:25,891 --> 01:32:27,720
We looked a girdle back a lot like me.

1550
01:32:27,721 --> 01:32:31,140
They'll start function to saving stores a lot and he hears timer event.

1551
01:32:32,190 --> 01:32:32,730
Basically,

1552
01:32:32,731 --> 01:32:45,120
the same sort of type of idea that sees a couple of registration that it could do a job and the only job does not actually have these sort of six lines of code here or whatever five satellites code,

1553
01:32:45,121 --> 01:32:50,010
and this is what it does so using a reprograms too claims to generate future interrupts,

1554
01:32:50,011 --> 01:32:50,730
and invisibly,

1555
01:32:50,731 --> 01:32:55,080
raises a software interrupt to the supervisor.

1556
01:32:55,081 --> 01:32:57,510
So this goes to supervise a moat.

1557
01:32:57,511 --> 01:32:57,900
OK,

1558
01:32:57,901 --> 01:33:02,580
so then at the point and Internet can emerge.

1559
01:33:02,581 --> 01:33:05,460
Let's say the colonel was interrupted during a time of chip,

1560
01:33:05,461 --> 01:33:07,050
though at a time a chip so we went to machine,

1561
01:33:07,051 --> 01:33:08,280
moods and red,

1562
01:33:08,281 --> 01:33:09,240
then returned from machine,

1563
01:33:09,241 --> 01:33:13,740
moved back to supervise a moat and if interrupts,

1564
01:33:13,741 --> 01:33:15,510
enabled and supervise a moat.

1565
01:33:15,511 --> 01:33:16,080
And that point,

1566
01:33:16,081 --> 01:33:18,750
maybe that supervisor in the supervisor refer in.

1567
01:33:18,751 --> 01:33:20,220
Europe will be generated.

1568
01:33:21,030 --> 01:33:21,570
Oh,

1569
01:33:21,571 --> 01:33:22,260
OK,

1570
01:33:22,261 --> 01:33:22,980
I'll go.

1571
01:33:22,981 --> 01:33:23,730
Basically.

1572
01:33:23,731 --> 01:33:24,750
The kernel does the same thing.

1573
01:33:24,751 --> 01:33:25,200
Grant Mitchell.

1574
01:33:25,201 --> 01:33:26,910
He would go to Colonel back.

1575
01:33:26,911 --> 01:33:27,150
You know,

1576
01:33:27,151 --> 01:33:31,200
save restore all the registers and ah,

1577
01:33:31,201 --> 01:33:34,680
and then go to Colonel Trap and the kernel trend,

1578
01:33:34,681 --> 01:33:36,540
we'll see how there was a time when interrupt.

1579
01:33:37,410 --> 01:33:38,160
I see,

1580
01:33:38,161 --> 01:33:42,240
and so what was the point of switching to machine code in the first place?

1581
01:33:42,241 --> 01:33:43,470
What exactly does it do?

1582
01:33:45,570 --> 01:33:46,830
I don't know what the point is,

1583
01:33:46,831 --> 01:33:56,460
but this is actually going through a little bit.

1584
01:33:56,461 --> 01:34:00,450
There's some reason to think why the temperature textbooks,

1585
01:34:00,451 --> 01:34:01,050
machine mode,

1586
01:34:01,051 --> 01:34:03,570
but from our perspective,

1587
01:34:03,571 --> 01:34:07,080
it would be great if you could have delegated to the time or in the refrigerator,

1588
01:34:07,081 --> 01:34:10,410
treat to supervise your mode and never had to deal with a time.

1589
01:34:10,411 --> 01:34:14,040
But that doesn't work for this article,

1590
01:34:14,041 --> 01:34:16,200
chip and exempt.

1591
01:34:16,201 --> 01:34:17,820
Thank you so much for your welcome.

1592
01:34:20,250 --> 01:34:26,160
Fall off on this to keep us in persons.

1593
01:34:26,161 --> 01:34:26,880
Please.

1594
01:34:26,881 --> 01:34:28,800
Yeah,

1595
01:34:28,801 --> 01:34:33,510
I saw it in algebra two.

1596
01:34:33,511 --> 01:34:35,250
You went sixty forest.

1597
01:34:35,251 --> 01:34:39,480
but it only seems to be using for no three of them.

1598
01:34:40,560 --> 01:34:42,180
Right,

1599
01:34:42,181 --> 01:34:46,500
it's hard to see a scratchy access.

1600
01:34:46,501 --> 01:34:56,610
It allocates more than is necessary scratches fruity to scratch area the region,

1601
01:34:56,611 --> 01:34:57,060
so.

1602
01:34:59,610 --> 01:35:00,120
Ah,

1603
01:35:00,121 --> 01:35:02,400
so for every shampoo correct,

1604
01:35:02,401 --> 01:35:08,130
there has to be some scratch space because we have three or something like that,

1605
01:35:08,131 --> 01:35:10,620
she views showed basically allocate a little bit too much.

1606
01:35:18,420 --> 01:35:21,120
But there's no harm in allocating too much.

1607
01:35:22,350 --> 01:35:23,280
Okay,

1608
01:35:23,281 --> 01:35:23,400
oh,

1609
01:35:23,401 --> 01:35:25,800
he's like you don't scratch zero.

1610
01:35:25,801 --> 01:35:28,920
Scratch one's crashes ill with a little wine,

1611
01:35:28,921 --> 01:35:30,120
so it uses free.

1612
01:35:30,121 --> 01:35:30,300
OK,

1613
01:35:30,301 --> 01:35:31,980
so if you were to free,

1614
01:35:31,981 --> 01:35:38,910
that's for four or five groups of six and a six hundred years,

1615
01:35:38,911 --> 01:35:42,330
and because we have been running,

1616
01:35:42,331 --> 01:35:43,740
we could run before she'd be used,

1617
01:35:43,741 --> 01:35:44,730
but we're running with free,

1618
01:35:44,731 --> 01:35:48,570
but we could run it for six hundred,

1619
01:35:48,571 --> 01:35:50,040
forty and twenty four like a skater.

1620
01:35:50,041 --> 01:35:51,000
This,

1621
01:35:51,001 --> 01:35:52,680
whatever allocating a bit too much memory.

1622
01:35:54,150 --> 01:35:54,660
I don't remember,

1623
01:35:54,661 --> 01:35:56,190
I've thought about this a while back and go,

1624
01:35:56,191 --> 01:35:58,890
and I don't remember exactly where there.

1625
01:36:02,460 --> 01:36:04,260
For the two came from.

1626
01:36:06,120 --> 01:36:07,110
On the double check.

1627
01:36:08,700 --> 01:36:10,020
See if I can reconstruct that.

1628
01:36:41,490 --> 01:36:45,930
Over the same period,

1629
01:36:45,931 --> 01:36:46,620
there are four,

1630
01:36:46,621 --> 01:36:47,430
after all,

1631
01:36:47,431 --> 01:36:48,360
a bicycle to work.

1632
01:36:49,680 --> 01:36:50,130
Yeah.

1633
01:36:53,280 --> 01:36:55,140
And it.

1634
01:37:03,930 --> 01:37:05,160
I don't want to let me get back to you.

1635
01:37:05,161 --> 01:37:08,010
I can recall writer to top my head.

1636
01:37:08,011 --> 01:37:09,360
You know why it is the way it is.

1637
01:37:10,530 --> 01:37:12,780
Okay,

1638
01:37:12,781 --> 01:37:14,160
thank you so much.

1639
01:37:14,161 --> 01:37:15,990
You want a good question.

1640
01:37:15,991 --> 01:37:16,560
Thank you.
