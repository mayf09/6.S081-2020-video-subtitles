1
00:00:07,600 --> 00:00:09,910

all right

2
00:00:09,910 --> 00:00:09,920
all right
 

3
00:00:09,920 --> 00:00:13,270
all right
you guys hear me

4
00:00:13,270 --> 00:00:13,280

 

5
00:00:13,280 --> 00:00:16,230

yes excellent thank you all right today

6
00:00:16,230 --> 00:00:16,240
yes excellent thank you all right today
 

7
00:00:16,240 --> 00:00:17,830
yes excellent thank you all right today
i want to talk about talk mostly about

8
00:00:17,830 --> 00:00:17,840
i want to talk about talk mostly about
 

9
00:00:17,840 --> 00:00:18,710
i want to talk about talk mostly about
microkernels

10
00:00:18,710 --> 00:00:18,720
microkernels
 

11
00:00:18,720 --> 00:00:21,990
microkernels
um but but first a little bit of uh

12
00:00:21,990 --> 00:00:22,000
um but but first a little bit of uh
 

13
00:00:22,000 --> 00:00:25,509
um but but first a little bit of uh
context to um sort of help explain why

14
00:00:25,509 --> 00:00:25,519
context to um sort of help explain why
 

15
00:00:25,519 --> 00:00:26,310
context to um sort of help explain why
people

16
00:00:26,310 --> 00:00:26,320
people
 

17
00:00:26,320 --> 00:00:28,470
people
explored microkernels in the first place

18
00:00:28,470 --> 00:00:28,480
explored microkernels in the first place
 

19
00:00:28,480 --> 00:00:29,830
explored microkernels in the first place
um

20
00:00:29,830 --> 00:00:29,840
um
 

21
00:00:29,840 --> 00:00:32,709
um
this uh the p people got the

22
00:00:32,709 --> 00:00:32,719
this uh the p people got the
 

23
00:00:32,719 --> 00:00:35,190
this uh the p people got the
microkernels by trying to think about

24
00:00:35,190 --> 00:00:35,200
microkernels by trying to think about
 

25
00:00:35,200 --> 00:00:37,350
microkernels by trying to think about
uh a little more broadly about what

26
00:00:37,350 --> 00:00:37,360
uh a little more broadly about what
 

27
00:00:37,360 --> 00:00:38,869
uh a little more broadly about what
kernels should actually do

28
00:00:38,869 --> 00:00:38,879
kernels should actually do
 

29
00:00:38,879 --> 00:00:42,069
kernels should actually do
like we you know with xv6 is sort of

30
00:00:42,069 --> 00:00:42,079
like we you know with xv6 is sort of
 

31
00:00:42,079 --> 00:00:43,750
like we you know with xv6 is sort of
does the things that unix does and we

32
00:00:43,750 --> 00:00:43,760
does the things that unix does and we
 

33
00:00:43,760 --> 00:00:45,270
does the things that unix does and we
kind of take

34
00:00:45,270 --> 00:00:45,280
kind of take
 

35
00:00:45,280 --> 00:00:47,510
kind of take
um that set of abstractions and system

36
00:00:47,510 --> 00:00:47,520
um that set of abstractions and system
 

37
00:00:47,520 --> 00:00:48,389
um that set of abstractions and system
calls and

38
00:00:48,389 --> 00:00:48,399
calls and
 

39
00:00:48,399 --> 00:00:50,389
calls and
uh keep sort of facilities inside the

40
00:00:50,389 --> 00:00:50,399
uh keep sort of facilities inside the
 

41
00:00:50,399 --> 00:00:51,670
uh keep sort of facilities inside the
kernel is kind of

42
00:00:51,670 --> 00:00:51,680
kernel is kind of
 

43
00:00:51,680 --> 00:00:54,150
kernel is kind of
for granted as the target of what we're

44
00:00:54,150 --> 00:00:54,160
for granted as the target of what we're
 

45
00:00:54,160 --> 00:00:56,630
for granted as the target of what we're
trying to design but

46
00:00:56,630 --> 00:00:56,640
trying to design but
 

47
00:00:56,640 --> 00:00:58,869
trying to design but
it's totally worth wondering gosh what

48
00:00:58,869 --> 00:00:58,879
it's totally worth wondering gosh what
 

49
00:00:58,879 --> 00:01:00,310
it's totally worth wondering gosh what
should a kernel do in the first place

50
00:01:00,310 --> 00:01:00,320
should a kernel do in the first place
 

51
00:01:00,320 --> 00:01:01,510
should a kernel do in the first place
maybe

52
00:01:01,510 --> 00:01:01,520
maybe
 

53
00:01:01,520 --> 00:01:02,950
maybe
maybe the particular kind of stuff that

54
00:01:02,950 --> 00:01:02,960
maybe the particular kind of stuff that
 

55
00:01:02,960 --> 00:01:04,869
maybe the particular kind of stuff that
xv6 or linux does

56
00:01:04,869 --> 00:01:04,879
xv6 or linux does
 

57
00:01:04,879 --> 00:01:07,109
xv6 or linux does
um is not really the best answer or

58
00:01:07,109 --> 00:01:07,119
um is not really the best answer or
 

59
00:01:07,119 --> 00:01:08,390
um is not really the best answer or
maybe it is

60
00:01:08,390 --> 00:01:08,400
maybe it is
 

61
00:01:08,400 --> 00:01:10,789
maybe it is
um and of course you know we're on

62
00:01:10,789 --> 00:01:10,799
um and of course you know we're on
 

63
00:01:10,799 --> 00:01:12,789
um and of course you know we're on
somewhat treacherous ground here because

64
00:01:12,789 --> 00:01:12,799
somewhat treacherous ground here because
 

65
00:01:12,799 --> 00:01:14,950
somewhat treacherous ground here because
now we're you know where what kernels

66
00:01:14,950 --> 00:01:14,960
now we're you know where what kernels
 

67
00:01:14,960 --> 00:01:16,950
now we're you know where what kernels
are is kind of a development platform

68
00:01:16,950 --> 00:01:16,960
are is kind of a development platform
 

69
00:01:16,960 --> 00:01:18,230
are is kind of a development platform
for programmers

70
00:01:18,230 --> 00:01:18,240
for programmers
 

71
00:01:18,240 --> 00:01:20,070
for programmers
as we know programmers different people

72
00:01:20,070 --> 00:01:20,080
as we know programmers different people
 

73
00:01:20,080 --> 00:01:22,230
as we know programmers different people
have like very different

74
00:01:22,230 --> 00:01:22,240
have like very different
 

75
00:01:22,240 --> 00:01:25,830
have like very different
um sort of subjective preferences about

76
00:01:25,830 --> 00:01:25,840
um sort of subjective preferences about
 

77
00:01:25,840 --> 00:01:27,429
um sort of subjective preferences about
what kind of infrastructure they like to

78
00:01:27,429 --> 00:01:27,439
what kind of infrastructure they like to
 

79
00:01:27,439 --> 00:01:28,870
what kind of infrastructure they like to
program on so we

80
00:01:28,870 --> 00:01:28,880
program on so we
 

81
00:01:28,880 --> 00:01:30,950
program on so we
can't necessarily expect a single best

82
00:01:30,950 --> 00:01:30,960
can't necessarily expect a single best
 

83
00:01:30,960 --> 00:01:33,270
can't necessarily expect a single best
answer

84
00:01:33,270 --> 00:01:33,280
answer
 

85
00:01:33,280 --> 00:01:34,870
answer
but we can expect to maybe learn

86
00:01:34,870 --> 00:01:34,880
but we can expect to maybe learn
 

87
00:01:34,880 --> 00:01:37,109
but we can expect to maybe learn
something and maybe make some progress

88
00:01:37,109 --> 00:01:37,119
something and maybe make some progress
 

89
00:01:37,119 --> 00:01:37,830
something and maybe make some progress
by

90
00:01:37,830 --> 00:01:37,840
by
 

91
00:01:37,840 --> 00:01:39,190
by
trying to think about what answers might

92
00:01:39,190 --> 00:01:39,200
trying to think about what answers might
 

93
00:01:39,200 --> 00:01:41,749
trying to think about what answers might
be so first of all

94
00:01:41,749 --> 00:01:41,759
be so first of all
 

95
00:01:41,759 --> 00:01:43,990
be so first of all
let me try to kind of crystallize what

96
00:01:43,990 --> 00:01:44,000
let me try to kind of crystallize what
 

97
00:01:44,000 --> 00:01:45,510
let me try to kind of crystallize what
the traditional

98
00:01:45,510 --> 00:01:45,520
the traditional
 

99
00:01:45,520 --> 00:01:48,870
the traditional
approach is to what kind of kernel

100
00:01:48,870 --> 00:01:48,880
approach is to what kind of kernel
 

101
00:01:48,880 --> 00:01:49,670
approach is to what kind of kernel
interfaces

102
00:01:49,670 --> 00:01:49,680
interfaces
 

103
00:01:49,680 --> 00:01:53,270
interfaces
we ought to be using and linux and unix

104
00:01:53,270 --> 00:01:53,280
we ought to be using and linux and unix
 

105
00:01:53,280 --> 00:01:53,990
we ought to be using and linux and unix
and xv6

106
00:01:53,990 --> 00:01:54,000
and xv6
 

107
00:01:54,000 --> 00:01:57,590
and xv6
are all examples of of what i personally

108
00:01:57,590 --> 00:01:57,600
are all examples of of what i personally
 

109
00:01:57,600 --> 00:01:58,709
are all examples of of what i personally
call the

110
00:01:58,709 --> 00:01:58,719
call the
 

111
00:01:58,719 --> 00:02:01,190
call the
a traditional design approach but

112
00:02:01,190 --> 00:02:01,200
a traditional design approach but
 

113
00:02:01,200 --> 00:02:02,709
a traditional design approach but
another word for it that kind of

114
00:02:02,709 --> 00:02:02,719
another word for it that kind of
 

115
00:02:02,719 --> 00:02:03,990
another word for it that kind of
summarizes

116
00:02:03,990 --> 00:02:04,000
summarizes
 

117
00:02:04,000 --> 00:02:06,389
summarizes
uh what this approach has ended up like

118
00:02:06,389 --> 00:02:06,399
uh what this approach has ended up like
 

119
00:02:06,399 --> 00:02:13,430
uh what this approach has ended up like
is monolithic

120
00:02:13,430 --> 00:02:13,440

 

121
00:02:13,440 --> 00:02:17,430

monolithic and what that means is that

122
00:02:17,430 --> 00:02:17,440
monolithic and what that means is that
 

123
00:02:17,440 --> 00:02:19,990
monolithic and what that means is that
the kernel is a single big program that

124
00:02:19,990 --> 00:02:20,000
the kernel is a single big program that
 

125
00:02:20,000 --> 00:02:22,630
the kernel is a single big program that
does all kinds of things all within the

126
00:02:22,630 --> 00:02:22,640
does all kinds of things all within the
 

127
00:02:22,640 --> 00:02:25,430
does all kinds of things all within the
same program

128
00:02:25,430 --> 00:02:25,440

 

129
00:02:25,440 --> 00:02:28,070

and indeed this really reflects the way

130
00:02:28,070 --> 00:02:28,080
and indeed this really reflects the way
 

131
00:02:28,080 --> 00:02:29,589
and indeed this really reflects the way
people thought about

132
00:02:29,589 --> 00:02:29,599
people thought about
 

133
00:02:29,599 --> 00:02:31,589
people thought about
what kernels ought to be doing a real

134
00:02:31,589 --> 00:02:31,599
what kernels ought to be doing a real
 

135
00:02:31,599 --> 00:02:33,509
what kernels ought to be doing a real
hallmark of

136
00:02:33,509 --> 00:02:33,519
hallmark of
 

137
00:02:33,519 --> 00:02:36,790
hallmark of
kernels like linux is that they have

138
00:02:36,790 --> 00:02:36,800
kernels like linux is that they have
 

139
00:02:36,800 --> 00:02:40,470
kernels like linux is that they have
they provide powerful abstractions

140
00:02:40,470 --> 00:02:40,480
they provide powerful abstractions
 

141
00:02:40,480 --> 00:02:42,630
they provide powerful abstractions
you know they choose things like file

142
00:02:42,630 --> 00:02:42,640
you know they choose things like file
 

143
00:02:42,640 --> 00:02:43,589
you know they choose things like file
systems

144
00:02:43,589 --> 00:02:43,599
systems
 

145
00:02:43,599 --> 00:02:47,030
systems
and which is really a complicated item

146
00:02:47,030 --> 00:02:47,040
and which is really a complicated item
 

147
00:02:47,040 --> 00:02:48,869
and which is really a complicated item
and they present file systems and files

148
00:02:48,869 --> 00:02:48,879
and they present file systems and files
 

149
00:02:48,879 --> 00:02:51,270
and they present file systems and files
and directories and file descriptors

150
00:02:51,270 --> 00:02:51,280
and directories and file descriptors
 

151
00:02:51,280 --> 00:02:53,110
and directories and file descriptors
as their interface rather than for

152
00:02:53,110 --> 00:02:53,120
as their interface rather than for
 

153
00:02:53,120 --> 00:02:55,190
as their interface rather than for
example presenting

154
00:02:55,190 --> 00:02:55,200
example presenting
 

155
00:02:55,200 --> 00:02:57,350
example presenting
disk hardware as their interface to

156
00:02:57,350 --> 00:02:57,360
disk hardware as their interface to
 

157
00:02:57,360 --> 00:02:58,390
disk hardware as their interface to
applications

158
00:02:58,390 --> 00:02:58,400
applications
 

159
00:02:58,400 --> 00:03:01,750
applications
so um and using

160
00:03:01,750 --> 00:03:01,760
so um and using
 

161
00:03:01,760 --> 00:03:03,430
so um and using
presenting powerful abstractions instead

162
00:03:03,430 --> 00:03:03,440
presenting powerful abstractions instead
 

163
00:03:03,440 --> 00:03:04,949
presenting powerful abstractions instead
of very low level abstractions have some

164
00:03:04,949 --> 00:03:04,959
of very low level abstractions have some
 

165
00:03:04,959 --> 00:03:06,149
of very low level abstractions have some
big advantages

166
00:03:06,149 --> 00:03:06,159
big advantages
 

167
00:03:06,159 --> 00:03:08,309
big advantages
um so these monolithic kernels often

168
00:03:08,309 --> 00:03:08,319
um so these monolithic kernels often
 

169
00:03:08,319 --> 00:03:09,350
um so these monolithic kernels often
have sort of

170
00:03:09,350 --> 00:03:09,360
have sort of
 

171
00:03:09,360 --> 00:03:17,110
have sort of
big abstractions

172
00:03:17,110 --> 00:03:17,120

 

173
00:03:17,120 --> 00:03:21,030

like file the file system

174
00:03:21,030 --> 00:03:21,040
like file the file system
 

175
00:03:21,040 --> 00:03:22,550
like file the file system
one advantage of big abstractions is

176
00:03:22,550 --> 00:03:22,560
one advantage of big abstractions is
 

177
00:03:22,560 --> 00:03:24,390
one advantage of big abstractions is
that they're often portable

178
00:03:24,390 --> 00:03:24,400
that they're often portable
 

179
00:03:24,400 --> 00:03:27,030
that they're often portable
um of files and directories you can

180
00:03:27,030 --> 00:03:27,040
um of files and directories you can
 

181
00:03:27,040 --> 00:03:28,630
um of files and directories you can
implement files and directories on all

182
00:03:28,630 --> 00:03:28,640
implement files and directories on all
 

183
00:03:28,640 --> 00:03:30,229
implement files and directories on all
kinds of storage

184
00:03:30,229 --> 00:03:30,239
kinds of storage
 

185
00:03:30,239 --> 00:03:32,949
kinds of storage
um and it the file you know you can use

186
00:03:32,949 --> 00:03:32,959
um and it the file you know you can use
 

187
00:03:32,959 --> 00:03:34,149
um and it the file you know you can use
files and directories that have

188
00:03:34,149 --> 00:03:34,159
files and directories that have
 

189
00:03:34,159 --> 00:03:36,390
files and directories that have
having to worry about what brand of disk

190
00:03:36,390 --> 00:03:36,400
having to worry about what brand of disk
 

191
00:03:36,400 --> 00:03:37,670
having to worry about what brand of disk
drive it's running on or

192
00:03:37,670 --> 00:03:37,680
drive it's running on or
 

193
00:03:37,680 --> 00:03:39,430
drive it's running on or
maybe it's an ssd instead of a hard

194
00:03:39,430 --> 00:03:39,440
maybe it's an ssd instead of a hard
 

195
00:03:39,440 --> 00:03:40,949
maybe it's an ssd instead of a hard
drive or maybe it's a network file

196
00:03:40,949 --> 00:03:40,959
drive or maybe it's a network file
 

197
00:03:40,959 --> 00:03:42,390
drive or maybe it's a network file
system at all it's the same interface

198
00:03:42,390 --> 00:03:42,400
system at all it's the same interface
 

199
00:03:42,400 --> 00:03:43,350
system at all it's the same interface
because

200
00:03:43,350 --> 00:03:43,360
because
 

201
00:03:43,360 --> 00:03:44,949
because
the file system interface is pretty high

202
00:03:44,949 --> 00:03:44,959
the file system interface is pretty high
 

203
00:03:44,959 --> 00:03:47,030
the file system interface is pretty high
level pretty abstract

204
00:03:47,030 --> 00:03:47,040
level pretty abstract
 

205
00:03:47,040 --> 00:03:50,149
level pretty abstract
so an advantage of this is that the

206
00:03:50,149 --> 00:03:50,159
so an advantage of this is that the
 

207
00:03:50,159 --> 00:03:52,470
so an advantage of this is that the
it's a way to get portability you can

208
00:03:52,470 --> 00:03:52,480
it's a way to get portability you can
 

209
00:03:52,480 --> 00:03:54,789
it's a way to get portability you can
write an application and have it run on

210
00:03:54,789 --> 00:03:54,799
write an application and have it run on
 

211
00:03:54,799 --> 00:03:56,149
write an application and have it run on
all kinds of different hardware without

212
00:03:56,149 --> 00:03:56,159
all kinds of different hardware without
 

213
00:03:56,159 --> 00:03:58,830
all kinds of different hardware without
having to modify the

214
00:03:58,830 --> 00:03:58,840
having to modify the
 

215
00:03:58,840 --> 00:04:01,190
having to modify the
application another example of this is

216
00:04:01,190 --> 00:04:01,200
application another example of this is
 

217
00:04:01,200 --> 00:04:02,869
application another example of this is
that

218
00:04:02,869 --> 00:04:02,879
that
 

219
00:04:02,879 --> 00:04:05,509
that
you know unix linux provides an address

220
00:04:05,509 --> 00:04:05,519
you know unix linux provides an address
 

221
00:04:05,519 --> 00:04:06,630
you know unix linux provides an address
space

222
00:04:06,630 --> 00:04:06,640
space
 

223
00:04:06,640 --> 00:04:08,710
space
abstraction rather than providing

224
00:04:08,710 --> 00:04:08,720
abstraction rather than providing
 

225
00:04:08,720 --> 00:04:10,070
abstraction rather than providing
something that's like

226
00:04:10,070 --> 00:04:10,080
something that's like
 

227
00:04:10,080 --> 00:04:11,670
something that's like
rather than providing direct access to

228
00:04:11,670 --> 00:04:11,680
rather than providing direct access to
 

229
00:04:11,680 --> 00:04:14,070
rather than providing direct access to
the mmu hardware

230
00:04:14,070 --> 00:04:14,080
the mmu hardware
 

231
00:04:14,080 --> 00:04:16,710
the mmu hardware
and that's useful to for portability and

232
00:04:16,710 --> 00:04:16,720
and that's useful to for portability and
 

233
00:04:16,720 --> 00:04:17,990
and that's useful to for portability and
to sort of hide complexity from

234
00:04:17,990 --> 00:04:18,000
to sort of hide complexity from
 

235
00:04:18,000 --> 00:04:20,550
to sort of hide complexity from
applications

236
00:04:20,550 --> 00:04:20,560
applications
 

237
00:04:20,560 --> 00:04:23,670
applications
so so another big advantage here these

238
00:04:23,670 --> 00:04:23,680
so so another big advantage here these
 

239
00:04:23,680 --> 00:04:25,270
so so another big advantage here these
powerful abstractions is that they tend

240
00:04:25,270 --> 00:04:25,280
powerful abstractions is that they tend
 

241
00:04:25,280 --> 00:04:30,310
powerful abstractions is that they tend
to hide complexity from applications

242
00:04:30,310 --> 00:04:30,320

 

243
00:04:30,320 --> 00:04:33,909

the so for example the file descriptor

244
00:04:33,909 --> 00:04:33,919
the so for example the file descriptor
 

245
00:04:33,919 --> 00:04:36,390
the so for example the file descriptor
interface that xv6 provides it's very

246
00:04:36,390 --> 00:04:36,400
interface that xv6 provides it's very
 

247
00:04:36,400 --> 00:04:37,909
interface that xv6 provides it's very
simple interface but

248
00:04:37,909 --> 00:04:37,919
simple interface but
 

249
00:04:37,919 --> 00:04:39,189
simple interface but
you know just read and write on file

250
00:04:39,189 --> 00:04:39,199
you know just read and write on file
 

251
00:04:39,199 --> 00:04:41,270
you know just read and write on file
descriptors can get much simpler

252
00:04:41,270 --> 00:04:41,280
descriptors can get much simpler
 

253
00:04:41,280 --> 00:04:43,030
descriptors can get much simpler
but behind it is some very complicated

254
00:04:43,030 --> 00:04:43,040
but behind it is some very complicated
 

255
00:04:43,040 --> 00:04:46,070
but behind it is some very complicated
code for actually reading and writing

256
00:04:46,070 --> 00:04:46,080
code for actually reading and writing
 

257
00:04:46,080 --> 00:04:50,550
code for actually reading and writing
the disk the file system on disk

258
00:04:50,550 --> 00:04:50,560

 

259
00:04:50,560 --> 00:04:51,990

and so it's nice for programmers but it

260
00:04:51,990 --> 00:04:52,000
and so it's nice for programmers but it
 

261
00:04:52,000 --> 00:04:54,870
and so it's nice for programmers but it
makes for a big complex kernel

262
00:04:54,870 --> 00:04:54,880
makes for a big complex kernel
 

263
00:04:54,880 --> 00:04:56,790
makes for a big complex kernel
these big abstractions also help the

264
00:04:56,790 --> 00:04:56,800
these big abstractions also help the
 

265
00:04:56,800 --> 00:04:59,350
these big abstractions also help the
kernel manage and share resources we

266
00:04:59,350 --> 00:04:59,360
kernel manage and share resources we
 

267
00:04:59,360 --> 00:05:00,790
kernel manage and share resources we
sort of delegated to the kernel

268
00:05:00,790 --> 00:05:00,800
sort of delegated to the kernel
 

269
00:05:00,800 --> 00:05:02,870
sort of delegated to the kernel
things like memory management the kernel

270
00:05:02,870 --> 00:05:02,880
things like memory management the kernel
 

271
00:05:02,880 --> 00:05:04,790
things like memory management the kernel
keeps track of what memory is free

272
00:05:04,790 --> 00:05:04,800
keeps track of what memory is free
 

273
00:05:04,800 --> 00:05:07,749
keeps track of what memory is free
we similarly the kernel keeps track of

274
00:05:07,749 --> 00:05:07,759
we similarly the kernel keeps track of
 

275
00:05:07,759 --> 00:05:09,430
we similarly the kernel keeps track of
what parts of the disk are free and what

276
00:05:09,430 --> 00:05:09,440
what parts of the disk are free and what
 

277
00:05:09,440 --> 00:05:11,110
what parts of the disk are free and what
parts of the disk are in current use

278
00:05:11,110 --> 00:05:11,120
parts of the disk are in current use
 

279
00:05:11,120 --> 00:05:14,070
parts of the disk are in current use
so programs don't get to think about it

280
00:05:14,070 --> 00:05:14,080
so programs don't get to think about it
 

281
00:05:14,080 --> 00:05:15,749
so programs don't get to think about it
and that again it simplifies programs it

282
00:05:15,749 --> 00:05:15,759
and that again it simplifies programs it
 

283
00:05:15,759 --> 00:05:17,909
and that again it simplifies programs it
also helps with robustness and security

284
00:05:17,909 --> 00:05:17,919
also helps with robustness and security
 

285
00:05:17,919 --> 00:05:19,189
also helps with robustness and security
even

286
00:05:19,189 --> 00:05:19,199
even
 

287
00:05:19,199 --> 00:05:20,950
even
because if programs are allowed to

288
00:05:20,950 --> 00:05:20,960
because if programs are allowed to
 

289
00:05:20,960 --> 00:05:22,550
because if programs are allowed to
decide what parts of the disk are free

290
00:05:22,550 --> 00:05:22,560
decide what parts of the disk are free
 

291
00:05:22,560 --> 00:05:23,029
decide what parts of the disk are free
or not

292
00:05:23,029 --> 00:05:23,039
or not
 

293
00:05:23,039 --> 00:05:26,070
or not
then maybe one program could use

294
00:05:26,070 --> 00:05:26,080
then maybe one program could use
 

295
00:05:26,080 --> 00:05:27,189
then maybe one program could use
part of the disk that's already being

296
00:05:27,189 --> 00:05:27,199
part of the disk that's already being
 

297
00:05:27,199 --> 00:05:30,310
part of the disk that's already being
used by another program

298
00:05:30,310 --> 00:05:30,320
used by another program
 

299
00:05:30,320 --> 00:05:33,110
used by another program
so the fact that the kernel is in charge

300
00:05:33,110 --> 00:05:33,120
so the fact that the kernel is in charge
 

301
00:05:33,120 --> 00:05:37,029
so the fact that the kernel is in charge
of resource management

302
00:05:37,029 --> 00:05:37,039

 

303
00:05:37,039 --> 00:05:38,469

helps with sharing it helps with

304
00:05:38,469 --> 00:05:38,479
helps with sharing it helps with
 

305
00:05:38,479 --> 00:05:40,550
helps with sharing it helps with
security um but again it

306
00:05:40,550 --> 00:05:40,560
security um but again it
 

307
00:05:40,560 --> 00:05:44,070
security um but again it
it's a force that um sort of

308
00:05:44,070 --> 00:05:44,080
it's a force that um sort of
 

309
00:05:44,080 --> 00:05:49,350
it's a force that um sort of
causes the kernel to be big um

310
00:05:49,350 --> 00:05:49,360

 

311
00:05:49,360 --> 00:05:51,270

so anyway so so having the kernel be in

312
00:05:51,270 --> 00:05:51,280
so anyway so so having the kernel be in
 

313
00:05:51,280 --> 00:05:52,469
so anyway so so having the kernel be in
charge of all these

314
00:05:52,469 --> 00:05:52,479
charge of all these
 

315
00:05:52,479 --> 00:05:56,309
charge of all these
sort of juicy abstractions that

316
00:05:56,309 --> 00:05:56,319
sort of juicy abstractions that
 

317
00:05:56,319 --> 00:05:58,390
sort of juicy abstractions that
even if they have simple interfaces have

318
00:05:58,390 --> 00:05:58,400
even if they have simple interfaces have
 

319
00:05:58,400 --> 00:05:59,749
even if they have simple interfaces have
a lot of complexity inside

320
00:05:59,749 --> 00:05:59,759
a lot of complexity inside
 

321
00:05:59,759 --> 00:06:03,430
a lot of complexity inside
have led kernels to be big

322
00:06:03,430 --> 00:06:03,440

 

323
00:06:03,440 --> 00:06:07,110

and complex items and another aspect of

324
00:06:07,110 --> 00:06:07,120
and complex items and another aspect of
 

325
00:06:07,120 --> 00:06:07,670
and complex items and another aspect of
this

326
00:06:07,670 --> 00:06:07,680
this
 

327
00:06:07,680 --> 00:06:09,909
this
monolithic design approach is that

328
00:06:09,909 --> 00:06:09,919
monolithic design approach is that
 

329
00:06:09,919 --> 00:06:11,909
monolithic design approach is that
because it's all one program

330
00:06:11,909 --> 00:06:11,919
because it's all one program
 

331
00:06:11,919 --> 00:06:13,590
because it's all one program
all the different kernel substances like

332
00:06:13,590 --> 00:06:13,600
all the different kernel substances like
 

333
00:06:13,600 --> 00:06:15,270
all the different kernel substances like
the file system and the memory allocator

334
00:06:15,270 --> 00:06:15,280
the file system and the memory allocator
 

335
00:06:15,280 --> 00:06:16,950
the file system and the memory allocator
and the scheduler and the virtual memory

336
00:06:16,950 --> 00:06:16,960
and the scheduler and the virtual memory
 

337
00:06:16,960 --> 00:06:18,309
and the scheduler and the virtual memory
system they're all part of one big

338
00:06:18,309 --> 00:06:18,319
system they're all part of one big
 

339
00:06:18,319 --> 00:06:19,590
system they're all part of one big
integrated program

340
00:06:19,590 --> 00:06:19,600
integrated program
 

341
00:06:19,600 --> 00:06:21,110
integrated program
it means that they can peer into each

342
00:06:21,110 --> 00:06:21,120
it means that they can peer into each
 

343
00:06:21,120 --> 00:06:23,590
it means that they can peer into each
other's data structures and so

344
00:06:23,590 --> 00:06:23,600
other's data structures and so
 

345
00:06:23,600 --> 00:06:25,590
other's data structures and so
that's just tended to make it much

346
00:06:25,590 --> 00:06:25,600
that's just tended to make it much
 

347
00:06:25,600 --> 00:06:27,510
that's just tended to make it much
easier to implement

348
00:06:27,510 --> 00:06:27,520
easier to implement
 

349
00:06:27,520 --> 00:06:29,749
easier to implement
facilities that are sort of parts of

350
00:06:29,749 --> 00:06:29,759
facilities that are sort of parts of
 

351
00:06:29,759 --> 00:06:31,670
facilities that are sort of parts of
more than one

352
00:06:31,670 --> 00:06:31,680
more than one
 

353
00:06:31,680 --> 00:06:33,189
more than one
or what you might think of as more than

354
00:06:33,189 --> 00:06:33,199
or what you might think of as more than
 

355
00:06:33,199 --> 00:06:35,749
or what you might think of as more than
one kind of modular subsystem so for

356
00:06:35,749 --> 00:06:35,759
one kind of modular subsystem so for
 

357
00:06:35,759 --> 00:06:37,189
one kind of modular subsystem so for
example

358
00:06:37,189 --> 00:06:37,199
example
 

359
00:06:37,199 --> 00:06:40,309
example
a system called like exec exec has his

360
00:06:40,309 --> 00:06:40,319
a system called like exec exec has his
 

361
00:06:40,319 --> 00:06:41,909
a system called like exec exec has his
fingers deeply into the file system

362
00:06:41,909 --> 00:06:41,919
fingers deeply into the file system
 

363
00:06:41,919 --> 00:06:43,990
fingers deeply into the file system
because it's reading binary images off

364
00:06:43,990 --> 00:06:44,000
because it's reading binary images off
 

365
00:06:44,000 --> 00:06:44,469
because it's reading binary images off
the

366
00:06:44,469 --> 00:06:44,479
the
 

367
00:06:44,479 --> 00:06:46,390
the
disk in order to load them into memory

368
00:06:46,390 --> 00:06:46,400
disk in order to load them into memory
 

369
00:06:46,400 --> 00:06:48,469
disk in order to load them into memory
it also has his fingers into the

370
00:06:48,469 --> 00:06:48,479
it also has his fingers into the
 

371
00:06:48,479 --> 00:06:50,629
it also has his fingers into the
memory allocation and virtual memory

372
00:06:50,629 --> 00:06:50,639
memory allocation and virtual memory
 

373
00:06:50,639 --> 00:06:51,670
memory allocation and virtual memory
paging system

374
00:06:51,670 --> 00:06:51,680
paging system
 

375
00:06:51,680 --> 00:06:53,029
paging system
because it needs to set up the address

376
00:06:53,029 --> 00:06:53,039
because it needs to set up the address
 

377
00:06:53,039 --> 00:06:54,950
because it needs to set up the address
space of the new process but it's really

378
00:06:54,950 --> 00:06:54,960
space of the new process but it's really
 

379
00:06:54,960 --> 00:06:56,150
space of the new process but it's really
easy there's no

380
00:06:56,150 --> 00:06:56,160
easy there's no
 

381
00:06:56,160 --> 00:06:58,230
easy there's no
problem with doing that in xv6 or linux

382
00:06:58,230 --> 00:06:58,240
problem with doing that in xv6 or linux
 

383
00:06:58,240 --> 00:07:00,230
problem with doing that in xv6 or linux
because you know both all the file

384
00:07:00,230 --> 00:07:00,240
because you know both all the file
 

385
00:07:00,240 --> 00:07:01,670
because you know both all the file
system is right there

386
00:07:01,670 --> 00:07:01,680
system is right there
 

387
00:07:01,680 --> 00:07:03,110
system is right there
in the same kernel program and the

388
00:07:03,110 --> 00:07:03,120
in the same kernel program and the
 

389
00:07:03,120 --> 00:07:04,469
in the same kernel program and the
virtual memory system is also right

390
00:07:04,469 --> 00:07:04,479
virtual memory system is also right
 

391
00:07:04,479 --> 00:07:06,309
virtual memory system is also right
there as part of the same program

392
00:07:06,309 --> 00:07:06,319
there as part of the same program
 

393
00:07:06,319 --> 00:07:09,029
there as part of the same program
um and if you know somehow there was a

394
00:07:09,029 --> 00:07:09,039
um and if you know somehow there was a
 

395
00:07:09,039 --> 00:07:10,230
um and if you know somehow there was a
rigid

396
00:07:10,230 --> 00:07:10,240
rigid
 

397
00:07:10,240 --> 00:07:11,749
rigid
split between the file system and the

398
00:07:11,749 --> 00:07:11,759
split between the file system and the
 

399
00:07:11,759 --> 00:07:13,270
split between the file system and the
virtual memory system it'd be much

400
00:07:13,270 --> 00:07:13,280
virtual memory system it'd be much
 

401
00:07:13,280 --> 00:07:15,110
virtual memory system it'd be much
harder to implement something like exec

402
00:07:15,110 --> 00:07:15,120
harder to implement something like exec
 

403
00:07:15,120 --> 00:07:17,029
harder to implement something like exec
that has sort of fingers in both of

404
00:07:17,029 --> 00:07:17,039
that has sort of fingers in both of
 

405
00:07:17,039 --> 00:07:18,469
that has sort of fingers in both of
these pies

406
00:07:18,469 --> 00:07:18,479
these pies
 

407
00:07:18,479 --> 00:07:20,230
these pies
but in a monolithic system just one big

408
00:07:20,230 --> 00:07:20,240
but in a monolithic system just one big
 

409
00:07:20,240 --> 00:07:22,070
but in a monolithic system just one big
program

410
00:07:22,070 --> 00:07:22,080
program
 

411
00:07:22,080 --> 00:07:25,430
program
it's much easier another thing that

412
00:07:25,430 --> 00:07:25,440
it's much easier another thing that
 

413
00:07:25,440 --> 00:07:27,189
it's much easier another thing that
makes

414
00:07:27,189 --> 00:07:27,199
makes
 

415
00:07:27,199 --> 00:07:28,469
makes
implementing software inside a

416
00:07:28,469 --> 00:07:28,479
implementing software inside a
 

417
00:07:28,479 --> 00:07:30,870
implementing software inside a
monolithic kernel like xv6 or linux easy

418
00:07:30,870 --> 00:07:30,880
monolithic kernel like xv6 or linux easy
 

419
00:07:30,880 --> 00:07:31,510
monolithic kernel like xv6 or linux easy
is that

420
00:07:31,510 --> 00:07:31,520
is that
 

421
00:07:31,520 --> 00:07:34,550
is that
all the code runs with full uh

422
00:07:34,550 --> 00:07:34,560
all the code runs with full uh
 

423
00:07:34,560 --> 00:07:37,270
all the code runs with full uh
hardware privileges all of xc6 runs in

424
00:07:37,270 --> 00:07:37,280
hardware privileges all of xc6 runs in
 

425
00:07:37,280 --> 00:07:39,510
hardware privileges all of xc6 runs in
supervisor mode for example

426
00:07:39,510 --> 00:07:39,520
supervisor mode for example
 

427
00:07:39,520 --> 00:07:41,589
supervisor mode for example
which means there's no limits there's no

428
00:07:41,589 --> 00:07:41,599
which means there's no limits there's no
 

429
00:07:41,599 --> 00:07:42,790
which means there's no limits there's no
irritating

430
00:07:42,790 --> 00:07:42,800
irritating
 

431
00:07:42,800 --> 00:07:44,790
irritating
oh you can't you know redirect that

432
00:07:44,790 --> 00:07:44,800
oh you can't you know redirect that
 

433
00:07:44,800 --> 00:07:45,909
oh you can't you know redirect that
memory here because you don't have

434
00:07:45,909 --> 00:07:45,919
memory here because you don't have
 

435
00:07:45,919 --> 00:07:47,029
memory here because you don't have
enough privilege

436
00:07:47,029 --> 00:07:47,039
enough privilege
 

437
00:07:47,039 --> 00:07:49,670
enough privilege
um all the kernel code runs with sort of

438
00:07:49,670 --> 00:07:49,680
um all the kernel code runs with sort of
 

439
00:07:49,680 --> 00:07:52,550
um all the kernel code runs with sort of
maximum privilege

440
00:07:52,550 --> 00:07:52,560
maximum privilege
 

441
00:07:52,560 --> 00:07:54,869
maximum privilege
and you know the same is true of

442
00:07:54,869 --> 00:07:54,879
and you know the same is true of
 

443
00:07:54,879 --> 00:07:57,749
and you know the same is true of
operating systems like linux

444
00:07:57,749 --> 00:07:57,759
operating systems like linux
 

445
00:07:57,759 --> 00:08:01,589
operating systems like linux
so this design

446
00:08:01,589 --> 00:08:01,599
so this design
 

447
00:08:01,599 --> 00:08:04,150
so this design
strategy is very convenient for kernel

448
00:08:04,150 --> 00:08:04,160
strategy is very convenient for kernel
 

449
00:08:04,160 --> 00:08:05,510
strategy is very convenient for kernel
developers

450
00:08:05,510 --> 00:08:05,520
developers
 

451
00:08:05,520 --> 00:08:08,070
developers
and it's made it easy to build these big

452
00:08:08,070 --> 00:08:08,080
and it's made it easy to build these big
 

453
00:08:08,080 --> 00:08:09,270
and it's made it easy to build these big
abstractions which are

454
00:08:09,270 --> 00:08:09,280
abstractions which are
 

455
00:08:09,280 --> 00:08:13,589
abstractions which are
convenient for application developers

456
00:08:13,589 --> 00:08:13,599
convenient for application developers
 

457
00:08:13,599 --> 00:08:16,070
convenient for application developers
however there's also a certain amount to

458
00:08:16,070 --> 00:08:16,080
however there's also a certain amount to
 

459
00:08:16,080 --> 00:08:16,950
however there's also a certain amount to
criticize

460
00:08:16,950 --> 00:08:16,960
criticize
 

461
00:08:16,960 --> 00:08:19,270
criticize
with the monolithic the traditional

462
00:08:19,270 --> 00:08:19,280
with the monolithic the traditional
 

463
00:08:19,280 --> 00:08:23,189
with the monolithic the traditional
monolithic approach

464
00:08:23,189 --> 00:08:23,199

 

465
00:08:23,199 --> 00:08:24,869

and this is starting to be part of the

466
00:08:24,869 --> 00:08:24,879
and this is starting to be part of the
 

467
00:08:24,879 --> 00:08:27,670
and this is starting to be part of the
motivation for

468
00:08:27,670 --> 00:08:27,680
motivation for
 

469
00:08:27,680 --> 00:08:30,869
motivation for
looking at other architectures

470
00:08:30,869 --> 00:08:30,879
looking at other architectures
 

471
00:08:30,879 --> 00:08:33,430
looking at other architectures
like microkernels so you might ask why

472
00:08:33,430 --> 00:08:33,440
like microkernels so you might ask why
 

473
00:08:33,440 --> 00:08:35,750
like microkernels so you might ask why
not

474
00:08:35,750 --> 00:08:35,760

 

475
00:08:35,760 --> 00:08:43,430

monolithic kernels

476
00:08:43,430 --> 00:08:43,440

 

477
00:08:43,440 --> 00:08:46,710

so one is just that they're big and

478
00:08:46,710 --> 00:08:46,720
so one is just that they're big and
 

479
00:08:46,720 --> 00:08:47,829
so one is just that they're big and
complex

480
00:08:47,829 --> 00:08:47,839
complex
 

481
00:08:47,839 --> 00:08:50,949
complex
so anything that's linux is

482
00:08:50,949 --> 00:08:50,959
so anything that's linux is
 

483
00:08:50,959 --> 00:08:53,190
so anything that's linux is
depending on how you count linux is

484
00:08:53,190 --> 00:08:53,200
depending on how you count linux is
 

485
00:08:53,200 --> 00:08:54,630
depending on how you count linux is
somewhere between many hundreds of

486
00:08:54,630 --> 00:08:54,640
somewhere between many hundreds of
 

487
00:08:54,640 --> 00:08:57,110
somewhere between many hundreds of
thousands and a few million

488
00:08:57,110 --> 00:08:57,120
thousands and a few million
 

489
00:08:57,120 --> 00:09:00,230
thousands and a few million
lines of code and people really do take

490
00:09:00,230 --> 00:09:00,240
lines of code and people really do take
 

491
00:09:00,240 --> 00:09:02,389
lines of code and people really do take
advantage of the fact that one part of

492
00:09:02,389 --> 00:09:02,399
advantage of the fact that one part of
 

493
00:09:02,399 --> 00:09:03,990
advantage of the fact that one part of
linux can sort of look at the data of

494
00:09:03,990 --> 00:09:04,000
linux can sort of look at the data of
 

495
00:09:04,000 --> 00:09:05,590
linux can sort of look at the data of
another and that makes the programming

496
00:09:05,590 --> 00:09:05,600
another and that makes the programming
 

497
00:09:05,600 --> 00:09:07,750
another and that makes the programming
easier but it also make there be a lot

498
00:09:07,750 --> 00:09:07,760
easier but it also make there be a lot
 

499
00:09:07,760 --> 00:09:09,910
easier but it also make there be a lot
of sort of interconnections

500
00:09:09,910 --> 00:09:09,920
of sort of interconnections
 

501
00:09:09,920 --> 00:09:11,829
of sort of interconnections
and interrelationships between code and

502
00:09:11,829 --> 00:09:11,839
and interrelationships between code and
 

503
00:09:11,839 --> 00:09:13,190
and interrelationships between code and
so it can be

504
00:09:13,190 --> 00:09:13,200
so it can be
 

505
00:09:13,200 --> 00:09:15,030
so it can be
a bit challenging sometimes to look at

506
00:09:15,030 --> 00:09:15,040
a bit challenging sometimes to look at
 

507
00:09:15,040 --> 00:09:16,310
a bit challenging sometimes to look at
linux kernel code and figure out what

508
00:09:16,310 --> 00:09:16,320
linux kernel code and figure out what
 

509
00:09:16,320 --> 00:09:19,350
linux kernel code and figure out what
it's up to

510
00:09:19,350 --> 00:09:19,360

 

511
00:09:19,360 --> 00:09:21,269

and anytime you get big programs

512
00:09:21,269 --> 00:09:21,279
and anytime you get big programs
 

513
00:09:21,279 --> 00:09:23,110
and anytime you get big programs
especially ones that are

514
00:09:23,110 --> 00:09:23,120
especially ones that are
 

515
00:09:23,120 --> 00:09:27,190
especially ones that are
complex structure you get bugs

516
00:09:27,190 --> 00:09:27,200

 

517
00:09:27,200 --> 00:09:29,430

and operating system kernels are no

518
00:09:29,430 --> 00:09:29,440
and operating system kernels are no
 

519
00:09:29,440 --> 00:09:30,470
and operating system kernels are no
exceptions and

520
00:09:30,470 --> 00:09:30,480
exceptions and
 

521
00:09:30,480 --> 00:09:31,750
exceptions and
over the years they've had all kinds of

522
00:09:31,750 --> 00:09:31,760
over the years they've had all kinds of
 

523
00:09:31,760 --> 00:09:35,110
over the years they've had all kinds of
bugs including bugs that

524
00:09:35,110 --> 00:09:35,120
bugs including bugs that
 

525
00:09:35,120 --> 00:09:40,070
bugs including bugs that
are exploitable for security

526
00:09:40,070 --> 00:09:40,080

 

527
00:09:40,080 --> 00:09:44,150

so

528
00:09:44,150 --> 00:09:44,160

 

529
00:09:44,160 --> 00:09:46,630

so this is sort of a troubling set of

530
00:09:46,630 --> 00:09:46,640
so this is sort of a troubling set of
 

531
00:09:46,640 --> 00:09:47,590
so this is sort of a troubling set of
relationships

532
00:09:47,590 --> 00:09:47,600
relationships
 

533
00:09:47,600 --> 00:09:49,350
relationships
if you allow a big model of the kernel

534
00:09:49,350 --> 00:09:49,360
if you allow a big model of the kernel
 

535
00:09:49,360 --> 00:09:50,710
if you allow a big model of the kernel
you're most certainly

536
00:09:50,710 --> 00:09:50,720
you're most certainly
 

537
00:09:50,720 --> 00:09:53,430
you're most certainly
can't avoid bugs and exploitable

538
00:09:53,430 --> 00:09:53,440
can't avoid bugs and exploitable
 

539
00:09:53,440 --> 00:09:54,870
can't avoid bugs and exploitable
security problems

540
00:09:54,870 --> 00:09:54,880
security problems
 

541
00:09:54,880 --> 00:09:57,350
security problems
and that's a real i mean there really is

542
00:09:57,350 --> 00:09:57,360
and that's a real i mean there really is
 

543
00:09:57,360 --> 00:10:00,389
and that's a real i mean there really is
a problem

544
00:10:00,389 --> 00:10:00,399

 

545
00:10:00,399 --> 00:10:03,750

another reason why people are

546
00:10:03,750 --> 00:10:03,760
another reason why people are
 

547
00:10:03,760 --> 00:10:05,590
another reason why people are
maybe not entirely happy with monolithic

548
00:10:05,590 --> 00:10:05,600
maybe not entirely happy with monolithic
 

549
00:10:05,600 --> 00:10:06,870
maybe not entirely happy with monolithic
kernels is that

550
00:10:06,870 --> 00:10:06,880
kernels is that
 

551
00:10:06,880 --> 00:10:10,150
kernels is that
they tend to just grow with

552
00:10:10,150 --> 00:10:10,160
they tend to just grow with
 

553
00:10:10,160 --> 00:10:13,670
they tend to just grow with
all desirable features over time and so

554
00:10:13,670 --> 00:10:13,680
all desirable features over time and so
 

555
00:10:13,680 --> 00:10:15,190
all desirable features over time and so
you know linux is used for all kinds of

556
00:10:15,190 --> 00:10:15,200
you know linux is used for all kinds of
 

557
00:10:15,200 --> 00:10:17,110
you know linux is used for all kinds of
different things from telephone handsets

558
00:10:17,110 --> 00:10:17,120
different things from telephone handsets
 

559
00:10:17,120 --> 00:10:21,430
different things from telephone handsets
to desktop workstations and laptops to

560
00:10:21,430 --> 00:10:21,440
to desktop workstations and laptops to
 

561
00:10:21,440 --> 00:10:23,829
to desktop workstations and laptops to
tablets to servers on the internet to

562
00:10:23,829 --> 00:10:23,839
tablets to servers on the internet to
 

563
00:10:23,839 --> 00:10:24,949
tablets to servers on the internet to
routers

564
00:10:24,949 --> 00:10:24,959
routers
 

565
00:10:24,959 --> 00:10:27,590
routers
um and that's caused the next it's

566
00:10:27,590 --> 00:10:27,600
um and that's caused the next it's
 

567
00:10:27,600 --> 00:10:29,190
um and that's caused the next it's
fantastic that linux can support all

568
00:10:29,190 --> 00:10:29,200
fantastic that linux can support all
 

569
00:10:29,200 --> 00:10:30,150
fantastic that linux can support all
those things

570
00:10:30,150 --> 00:10:30,160
those things
 

571
00:10:30,160 --> 00:10:31,910
those things
but it has caused it to be very general

572
00:10:31,910 --> 00:10:31,920
but it has caused it to be very general
 

573
00:10:31,920 --> 00:10:34,069
but it has caused it to be very general
so it has support in there for many many

574
00:10:34,069 --> 00:10:34,079
so it has support in there for many many
 

575
00:10:34,079 --> 00:10:35,110
so it has support in there for many many
different things

576
00:10:35,110 --> 00:10:35,120
different things
 

577
00:10:35,120 --> 00:10:37,430
different things
and any one application like me running

578
00:10:37,430 --> 00:10:37,440
and any one application like me running
 

579
00:10:37,440 --> 00:10:39,990
and any one application like me running
my web server is unlikely to need

580
00:10:39,990 --> 00:10:40,000
my web server is unlikely to need
 

581
00:10:40,000 --> 00:10:41,590
my web server is unlikely to need
uh for example linux's very

582
00:10:41,590 --> 00:10:41,600
uh for example linux's very
 

583
00:10:41,600 --> 00:10:43,990
uh for example linux's very
sophisticated sound card support

584
00:10:43,990 --> 00:10:44,000
sophisticated sound card support
 

585
00:10:44,000 --> 00:10:45,910
sophisticated sound card support
so there's just a huge amount of stuff

586
00:10:45,910 --> 00:10:45,920
so there's just a huge amount of stuff
 

587
00:10:45,920 --> 00:10:47,750
so there's just a huge amount of stuff
that's there for

588
00:10:47,750 --> 00:10:47,760
that's there for
 

589
00:10:47,760 --> 00:10:50,949
that's there for
to allow linux to be general purpose um

590
00:10:50,949 --> 00:10:50,959
to allow linux to be general purpose um
 

591
00:10:50,959 --> 00:10:54,550
to allow linux to be general purpose um
which is good but there's a worry

592
00:10:54,550 --> 00:10:54,560
which is good but there's a worry
 

593
00:10:54,560 --> 00:10:57,590
which is good but there's a worry
that uh general purpose is gonna tend to

594
00:10:57,590 --> 00:10:57,600
that uh general purpose is gonna tend to
 

595
00:10:57,600 --> 00:10:58,870
that uh general purpose is gonna tend to
mean slow

596
00:10:58,870 --> 00:10:58,880
mean slow
 

597
00:10:58,880 --> 00:11:01,030
mean slow
that you know it may be good for all

598
00:11:01,030 --> 00:11:01,040
that you know it may be good for all
 

599
00:11:01,040 --> 00:11:02,230
that you know it may be good for all
kinds of different things but

600
00:11:02,230 --> 00:11:02,240
kinds of different things but
 

601
00:11:02,240 --> 00:11:04,710
kinds of different things but
maybe not optimum for anything in

602
00:11:04,710 --> 00:11:04,720
maybe not optimum for anything in
 

603
00:11:04,720 --> 00:11:06,630
maybe not optimum for anything in
particular

604
00:11:06,630 --> 00:11:06,640
particular
 

605
00:11:06,640 --> 00:11:08,949
particular
so it's very hard to you know when

606
00:11:08,949 --> 00:11:08,959
so it's very hard to you know when
 

607
00:11:08,959 --> 00:11:09,990
so it's very hard to you know when
you're trying to make something run

608
00:11:09,990 --> 00:11:10,000
you're trying to make something run
 

609
00:11:10,000 --> 00:11:10,710
you're trying to make something run
really fast

610
00:11:10,710 --> 00:11:10,720
really fast
 

611
00:11:10,720 --> 00:11:13,110
really fast
it's great to have it just only do one

612
00:11:13,110 --> 00:11:13,120
it's great to have it just only do one
 

613
00:11:13,120 --> 00:11:14,710
it's great to have it just only do one
or two things so you can focus on

614
00:11:14,710 --> 00:11:14,720
or two things so you can focus on
 

615
00:11:14,720 --> 00:11:17,269
or two things so you can focus on
optimizing a single code path

616
00:11:17,269 --> 00:11:17,279
optimizing a single code path
 

617
00:11:17,279 --> 00:11:19,350
optimizing a single code path
but if your software needs to do any one

618
00:11:19,350 --> 00:11:19,360
but if your software needs to do any one
 

619
00:11:19,360 --> 00:11:20,710
but if your software needs to do any one
of a thousand different things it's much

620
00:11:20,710 --> 00:11:20,720
of a thousand different things it's much
 

621
00:11:20,720 --> 00:11:25,190
of a thousand different things it's much
harder to have focused optimization

622
00:11:25,190 --> 00:11:25,200

 

623
00:11:25,200 --> 00:11:27,509

so this is linux is not necessarily slow

624
00:11:27,509 --> 00:11:27,519
so this is linux is not necessarily slow
 

625
00:11:27,519 --> 00:11:29,030
so this is linux is not necessarily slow
but it's you know you you might wonder

626
00:11:29,030 --> 00:11:29,040
but it's you know you you might wonder
 

627
00:11:29,040 --> 00:11:30,389
but it's you know you you might wonder
if it's really as fast as

628
00:11:30,389 --> 00:11:30,399
if it's really as fast as
 

629
00:11:30,399 --> 00:11:32,870
if it's really as fast as
um it could possibly be for any given

630
00:11:32,870 --> 00:11:32,880
um it could possibly be for any given
 

631
00:11:32,880 --> 00:11:34,310
um it could possibly be for any given
situation

632
00:11:34,310 --> 00:11:34,320
situation
 

633
00:11:34,320 --> 00:11:36,550
situation
um and so if you think about i mean all

634
00:11:36,550 --> 00:11:36,560
um and so if you think about i mean all
 

635
00:11:36,560 --> 00:11:37,430
um and so if you think about i mean all
you you think

636
00:11:37,430 --> 00:11:37,440
you you think
 

637
00:11:37,440 --> 00:11:39,670
you you think
if you think about almost anything in

638
00:11:39,670 --> 00:11:39,680
if you think about almost anything in
 

639
00:11:39,680 --> 00:11:41,750
if you think about almost anything in
linux or xb6

640
00:11:41,750 --> 00:11:41,760
linux or xb6
 

641
00:11:41,760 --> 00:11:42,949
linux or xb6
you know you may wonder whether it

642
00:11:42,949 --> 00:11:42,959
you know you may wonder whether it
 

643
00:11:42,959 --> 00:11:44,550
you know you may wonder whether it
really needs to do everything it does so

644
00:11:44,550 --> 00:11:44,560
really needs to do everything it does so
 

645
00:11:44,560 --> 00:11:46,630
really needs to do everything it does so
for example if you write a single byte

646
00:11:46,630 --> 00:11:46,640
for example if you write a single byte
 

647
00:11:46,640 --> 00:11:47,590
for example if you write a single byte
over a pipe

648
00:11:47,590 --> 00:11:47,600
over a pipe
 

649
00:11:47,600 --> 00:11:49,829
over a pipe
from one process to another boy there's

650
00:11:49,829 --> 00:11:49,839
from one process to another boy there's
 

651
00:11:49,839 --> 00:11:51,910
from one process to another boy there's
a lot of instructions that get executed

652
00:11:51,910 --> 00:11:51,920
a lot of instructions that get executed
 

653
00:11:51,920 --> 00:11:54,470
a lot of instructions that get executed
even in xv6 which is a simple kernel

654
00:11:54,470 --> 00:11:54,480
even in xv6 which is a simple kernel
 

655
00:11:54,480 --> 00:11:55,350
even in xv6 which is a simple kernel
right there's

656
00:11:55,350 --> 00:11:55,360
right there's
 

657
00:11:55,360 --> 00:11:58,150
right there's
buffering you know there's locking

658
00:11:58,150 --> 00:11:58,160
buffering you know there's locking
 

659
00:11:58,160 --> 00:12:00,310
buffering you know there's locking
there's could be a sleep and a wake up

660
00:12:00,310 --> 00:12:00,320
there's could be a sleep and a wake up
 

661
00:12:00,320 --> 00:12:01,750
there's could be a sleep and a wake up
during a pipe read and write there's

662
00:12:01,750 --> 00:12:01,760
during a pipe read and write there's
 

663
00:12:01,760 --> 00:12:03,430
during a pipe read and write there's
maybe a scheduling may

664
00:12:03,430 --> 00:12:03,440
maybe a scheduling may
 

665
00:12:03,440 --> 00:12:05,670
maybe a scheduling may
call to the scheduler or contact switch

666
00:12:05,670 --> 00:12:05,680
call to the scheduler or contact switch
 

667
00:12:05,680 --> 00:12:07,509
call to the scheduler or contact switch
that's a lot of stuff that's

668
00:12:07,509 --> 00:12:07,519
that's a lot of stuff that's
 

669
00:12:07,519 --> 00:12:10,870
that's a lot of stuff that's
maybe not necessarily

670
00:12:10,870 --> 00:12:10,880
maybe not necessarily
 

671
00:12:10,880 --> 00:12:12,150
maybe not necessarily
the absolute minimum that would be

672
00:12:12,150 --> 00:12:12,160
the absolute minimum that would be
 

673
00:12:12,160 --> 00:12:13,990
the absolute minimum that would be
required to move a byte from

674
00:12:13,990 --> 00:12:14,000
required to move a byte from
 

675
00:12:14,000 --> 00:12:17,829
required to move a byte from
one process to another

676
00:12:17,829 --> 00:12:17,839

 

677
00:12:17,839 --> 00:12:19,430

another potential problem with these big

678
00:12:19,430 --> 00:12:19,440
another potential problem with these big
 

679
00:12:19,440 --> 00:12:21,430
another potential problem with these big
kernels is that

680
00:12:21,430 --> 00:12:21,440
kernels is that
 

681
00:12:21,440 --> 00:12:23,829
kernels is that
they because they're so big and they

682
00:12:23,829 --> 00:12:23,839
they because they're so big and they
 

683
00:12:23,839 --> 00:12:25,670
they because they're so big and they
sort of intentionally

684
00:12:25,670 --> 00:12:25,680
sort of intentionally
 

685
00:12:25,680 --> 00:12:28,629
sort of intentionally
bite off some very sophisticated

686
00:12:28,629 --> 00:12:28,639
bite off some very sophisticated
 

687
00:12:28,639 --> 00:12:29,670
bite off some very sophisticated
abstractions

688
00:12:29,670 --> 00:12:29,680
abstractions
 

689
00:12:29,680 --> 00:12:30,870
abstractions
they tend to have a lot of design

690
00:12:30,870 --> 00:12:30,880
they tend to have a lot of design
 

691
00:12:30,880 --> 00:12:33,350
they tend to have a lot of design
decisions kind of baked into the kernel

692
00:12:33,350 --> 00:12:33,360
decisions kind of baked into the kernel
 

693
00:12:33,360 --> 00:12:37,829
decisions kind of baked into the kernel
um so you know in ways that you can't

694
00:12:37,829 --> 00:12:37,839
um so you know in ways that you can't
 

695
00:12:37,839 --> 00:12:39,190
um so you know in ways that you can't
even if you disagree with them you can't

696
00:12:39,190 --> 00:12:39,200
even if you disagree with them you can't
 

697
00:12:39,200 --> 00:12:39,670
even if you disagree with them you can't
really

698
00:12:39,670 --> 00:12:39,680
really
 

699
00:12:39,680 --> 00:12:41,350
really
you know tough luck like applications

700
00:12:41,350 --> 00:12:41,360
you know tough luck like applications
 

701
00:12:41,360 --> 00:12:43,030
you know tough luck like applications
just have to have to live with it

702
00:12:43,030 --> 00:12:43,040
just have to have to live with it
 

703
00:12:43,040 --> 00:12:47,509
just have to have to live with it
so

704
00:12:47,509 --> 00:12:47,519

 

705
00:12:47,519 --> 00:12:49,110

you know as a as opposed to you men in

706
00:12:49,110 --> 00:12:49,120
you know as a as opposed to you men in
 

707
00:12:49,120 --> 00:12:50,230
you know as a as opposed to you men in
some fantasy world maybe the

708
00:12:50,230 --> 00:12:50,240
some fantasy world maybe the
 

709
00:12:50,240 --> 00:12:51,509
some fantasy world maybe the
applications could

710
00:12:51,509 --> 00:12:51,519
applications could
 

711
00:12:51,519 --> 00:12:53,590
applications could
make a lot more of the decisions so you

712
00:12:53,590 --> 00:12:53,600
make a lot more of the decisions so you
 

713
00:12:53,600 --> 00:12:57,829
make a lot more of the decisions so you
know some examples of things where

714
00:12:57,829 --> 00:12:57,839

 

715
00:12:57,839 --> 00:13:02,069

you may just you may be bummed out by

716
00:13:02,069 --> 00:13:02,079
you may just you may be bummed out by
 

717
00:13:02,079 --> 00:13:05,269
you may just you may be bummed out by
the way the api is designed for example

718
00:13:05,269 --> 00:13:05,279
the way the api is designed for example
 

719
00:13:05,279 --> 00:13:08,069
the way the api is designed for example
in uh in unix you can wait for a process

720
00:13:08,069 --> 00:13:08,079
in uh in unix you can wait for a process
 

721
00:13:08,079 --> 00:13:09,509
in uh in unix you can wait for a process
your own children you know if you fork

722
00:13:09,509 --> 00:13:09,519
your own children you know if you fork
 

723
00:13:09,519 --> 00:13:10,629
your own children you know if you fork
you can then wait for your children but

724
00:13:10,629 --> 00:13:10,639
you can then wait for your children but
 

725
00:13:10,639 --> 00:13:12,150
you can then wait for your children but
you can't wait for some other process

726
00:13:12,150 --> 00:13:12,160
you can't wait for some other process
 

727
00:13:12,160 --> 00:13:13,509
you can't wait for some other process
and you know maybe you want to wait for

728
00:13:13,509 --> 00:13:13,519
and you know maybe you want to wait for
 

729
00:13:13,519 --> 00:13:15,829
and you know maybe you want to wait for
a grandchild or an unrelated process but

730
00:13:15,829 --> 00:13:15,839
a grandchild or an unrelated process but
 

731
00:13:15,839 --> 00:13:17,030
a grandchild or an unrelated process but
that's just not an option

732
00:13:17,030 --> 00:13:17,040
that's just not an option
 

733
00:13:17,040 --> 00:13:19,110
that's just not an option
just not the way things work even if it

734
00:13:19,110 --> 00:13:19,120
just not the way things work even if it
 

735
00:13:19,120 --> 00:13:21,670
just not the way things work even if it
would be convenient for you

736
00:13:21,670 --> 00:13:21,680
would be convenient for you
 

737
00:13:21,680 --> 00:13:24,550
would be convenient for you
maybe you want to change the way another

738
00:13:24,550 --> 00:13:24,560
maybe you want to change the way another
 

739
00:13:24,560 --> 00:13:26,550
maybe you want to change the way another
processes address space is set up you

740
00:13:26,550 --> 00:13:26,560
processes address space is set up you
 

741
00:13:26,560 --> 00:13:27,030
processes address space is set up you
know maybe

742
00:13:27,030 --> 00:13:27,040
know maybe
 

743
00:13:27,040 --> 00:13:29,910
know maybe
call a map on behalf of another process

744
00:13:29,910 --> 00:13:29,920
call a map on behalf of another process
 

745
00:13:29,920 --> 00:13:31,190
call a map on behalf of another process
that you're controlling but

746
00:13:31,190 --> 00:13:31,200
that you're controlling but
 

747
00:13:31,200 --> 00:13:33,990
that you're controlling but
again that's just not an option you can

748
00:13:33,990 --> 00:13:34,000
again that's just not an option you can
 

749
00:13:34,000 --> 00:13:34,470
again that's just not an option you can
map

750
00:13:34,470 --> 00:13:34,480
map
 

751
00:13:34,480 --> 00:13:35,910
map
change your own address space but not

752
00:13:35,910 --> 00:13:35,920
change your own address space but not
 

753
00:13:35,920 --> 00:13:37,750
change your own address space but not
change other other processes address

754
00:13:37,750 --> 00:13:37,760
change other other processes address
 

755
00:13:37,760 --> 00:13:38,310
change other other processes address
space

756
00:13:38,310 --> 00:13:38,320
space
 

757
00:13:38,320 --> 00:13:40,389
space
maybe you're a database and you know you

758
00:13:40,389 --> 00:13:40,399
maybe you're a database and you know you
 

759
00:13:40,399 --> 00:13:43,509
maybe you're a database and you know you
have b tree indexes on the disk

760
00:13:43,509 --> 00:13:43,519
have b tree indexes on the disk
 

761
00:13:43,519 --> 00:13:45,189
have b tree indexes on the disk
and you may know a lot about it the

762
00:13:45,189 --> 00:13:45,199
and you may know a lot about it the
 

763
00:13:45,199 --> 00:13:46,629
and you may know a lot about it the
fastest way to layout a b

764
00:13:46,629 --> 00:13:46,639
fastest way to layout a b
 

765
00:13:46,639 --> 00:13:48,710
fastest way to layout a b
tree on a disk but if you're reading and

766
00:13:48,710 --> 00:13:48,720
tree on a disk but if you're reading and
 

767
00:13:48,720 --> 00:13:50,310
tree on a disk but if you're reading and
writing files with the file system

768
00:13:50,310 --> 00:13:50,320
writing files with the file system
 

769
00:13:50,320 --> 00:13:52,629
writing files with the file system
the file system has no idea that you're

770
00:13:52,629 --> 00:13:52,639
the file system has no idea that you're
 

771
00:13:52,639 --> 00:13:54,550
the file system has no idea that you're
actually writing a b tree or

772
00:13:54,550 --> 00:13:54,560
actually writing a b tree or
 

773
00:13:54,560 --> 00:13:56,230
actually writing a b tree or
how a b tree ought to be laid out on a

774
00:13:56,230 --> 00:13:56,240
how a b tree ought to be laid out on a
 

775
00:13:56,240 --> 00:13:59,030
how a b tree ought to be laid out on a
disk for fastest access

776
00:13:59,030 --> 00:13:59,040
disk for fastest access
 

777
00:13:59,040 --> 00:14:00,230
disk for fastest access
and so if you're a database you're going

778
00:14:00,230 --> 00:14:00,240
and so if you're a database you're going
 

779
00:14:00,240 --> 00:14:01,990
and so if you're a database you're going
to be kind of bummed you know maybe

780
00:14:01,990 --> 00:14:02,000
to be kind of bummed you know maybe
 

781
00:14:02,000 --> 00:14:03,110
to be kind of bummed you know maybe
you're happy that you have this file

782
00:14:03,110 --> 00:14:03,120
you're happy that you have this file
 

783
00:14:03,120 --> 00:14:04,550
you're happy that you have this file
system at your disposal

784
00:14:04,550 --> 00:14:04,560
system at your disposal
 

785
00:14:04,560 --> 00:14:05,910
system at your disposal
but it doesn't really do what you want

786
00:14:05,910 --> 00:14:05,920
but it doesn't really do what you want
 

787
00:14:05,920 --> 00:14:07,750
but it doesn't really do what you want
it to do um

788
00:14:07,750 --> 00:14:07,760
it to do um
 

789
00:14:07,760 --> 00:14:09,910
it to do um
and that's the sense in which uh design

790
00:14:09,910 --> 00:14:09,920
and that's the sense in which uh design
 

791
00:14:09,920 --> 00:14:11,430
and that's the sense in which uh design
decisions are often baked into big

792
00:14:11,430 --> 00:14:11,440
decisions are often baked into big
 

793
00:14:11,440 --> 00:14:13,189
decisions are often baked into big
kernels

794
00:14:13,189 --> 00:14:13,199
kernels
 

795
00:14:13,199 --> 00:14:16,550
kernels
and finally a specific uh

796
00:14:16,550 --> 00:14:16,560
and finally a specific uh
 

797
00:14:16,560 --> 00:14:20,870
and finally a specific uh
sort of issue that um

798
00:14:20,870 --> 00:14:20,880
sort of issue that um
 

799
00:14:20,880 --> 00:14:23,509
sort of issue that um
sort of came up in a big way in the

800
00:14:23,509 --> 00:14:23,519
sort of came up in a big way in the
 

801
00:14:23,519 --> 00:14:24,949
sort of came up in a big way in the
1990s probably

802
00:14:24,949 --> 00:14:24,959
1990s probably
 

803
00:14:24,959 --> 00:14:30,230
1990s probably
um it's a notion of extensibility uh

804
00:14:30,230 --> 00:14:30,240
um it's a notion of extensibility uh
 

805
00:14:30,240 --> 00:14:31,910
um it's a notion of extensibility uh
that it might be desirable for programs

806
00:14:31,910 --> 00:14:31,920
that it might be desirable for programs
 

807
00:14:31,920 --> 00:14:33,430
that it might be desirable for programs
to be able to change the kernel on the

808
00:14:33,430 --> 00:14:33,440
to be able to change the kernel on the
 

809
00:14:33,440 --> 00:14:35,189
to be able to change the kernel on the
fly like to be able to download new code

810
00:14:35,189 --> 00:14:35,199
fly like to be able to download new code
 

811
00:14:35,199 --> 00:14:36,389
fly like to be able to download new code
into the kernel or change the way it

812
00:14:36,389 --> 00:14:36,399
into the kernel or change the way it
 

813
00:14:36,399 --> 00:14:37,829
into the kernel or change the way it
operates or something

814
00:14:37,829 --> 00:14:37,839
operates or something
 

815
00:14:37,839 --> 00:14:40,150
operates or something
um in order to do things like have

816
00:14:40,150 --> 00:14:40,160
um in order to do things like have
 

817
00:14:40,160 --> 00:14:42,389
um in order to do things like have
databases be able to control the

818
00:14:42,389 --> 00:14:42,399
databases be able to control the
 

819
00:14:42,399 --> 00:14:45,910
databases be able to control the
layout of data on the disk um

820
00:14:45,910 --> 00:14:45,920
layout of data on the disk um
 

821
00:14:45,920 --> 00:14:48,949
layout of data on the disk um
and uh at least

822
00:14:48,949 --> 00:14:48,959
and uh at least
 

823
00:14:48,959 --> 00:14:51,350
and uh at least
in in decades past monolithic kernels

824
00:14:51,350 --> 00:14:51,360
in in decades past monolithic kernels
 

825
00:14:51,360 --> 00:14:53,110
in in decades past monolithic kernels
tended not

826
00:14:53,110 --> 00:14:53,120
tended not
 

827
00:14:53,120 --> 00:14:55,030
tended not
to have any particular features that

828
00:14:55,030 --> 00:14:55,040
to have any particular features that
 

829
00:14:55,040 --> 00:14:56,710
to have any particular features that
helped with this kind of extensibility

830
00:14:56,710 --> 00:14:56,720
helped with this kind of extensibility
 

831
00:14:56,720 --> 00:14:57,430
helped with this kind of extensibility
you're just

832
00:14:57,430 --> 00:14:57,440
you're just
 

833
00:14:57,440 --> 00:15:01,430
you're just
stuck with whatever the kernel did

834
00:15:01,430 --> 00:15:01,440

 

835
00:15:01,440 --> 00:15:05,189

okay so these were sort of

836
00:15:05,189 --> 00:15:05,199
okay so these were sort of
 

837
00:15:05,199 --> 00:15:07,189
okay so these were sort of
problems in the back of people's minds

838
00:15:07,189 --> 00:15:07,199
problems in the back of people's minds
 

839
00:15:07,199 --> 00:15:08,870
problems in the back of people's minds
that

840
00:15:08,870 --> 00:15:08,880
that
 

841
00:15:08,880 --> 00:15:11,189
that
led them to think about other kinds of

842
00:15:11,189 --> 00:15:11,199
led them to think about other kinds of
 

843
00:15:11,199 --> 00:15:12,790
led them to think about other kinds of
other ways of designing

844
00:15:12,790 --> 00:15:12,800
other ways of designing
 

845
00:15:12,800 --> 00:15:14,150
other ways of designing
other architectures for operating

846
00:15:14,150 --> 00:15:14,160
other architectures for operating
 

847
00:15:14,160 --> 00:15:16,710
other architectures for operating
systems um and there were another number

848
00:15:16,710 --> 00:15:16,720
systems um and there were another number
 

849
00:15:16,720 --> 00:15:17,670
systems um and there were another number
of

850
00:15:17,670 --> 00:15:17,680
of
 

851
00:15:17,680 --> 00:15:19,350
of
a number of ideas some quite radically

852
00:15:19,350 --> 00:15:19,360
a number of ideas some quite radically
 

853
00:15:19,360 --> 00:15:21,030
a number of ideas some quite radically
different that people pursued

854
00:15:21,030 --> 00:15:21,040
different that people pursued
 

855
00:15:21,040 --> 00:15:23,269
different that people pursued
we're going to talk about one of them a

856
00:15:23,269 --> 00:15:23,279
we're going to talk about one of them a
 

857
00:15:23,279 --> 00:15:24,470
we're going to talk about one of them a
particularly

858
00:15:24,470 --> 00:15:24,480
particularly
 

859
00:15:24,480 --> 00:15:26,470
particularly
popular one today and that's the idea of

860
00:15:26,470 --> 00:15:26,480
popular one today and that's the idea of
 

861
00:15:26,480 --> 00:15:31,509
popular one today and that's the idea of
microkernels

862
00:15:31,509 --> 00:15:31,519

 

863
00:15:31,519 --> 00:15:33,509

microkernels although the many of the

864
00:15:33,509 --> 00:15:33,519
microkernels although the many of the
 

865
00:15:33,519 --> 00:15:34,710
microkernels although the many of the
ideas are

866
00:15:34,710 --> 00:15:34,720
ideas are
 

867
00:15:34,720 --> 00:15:37,590
ideas are
go back to the beginning of computer

868
00:15:37,590 --> 00:15:37,600
go back to the beginning of computer
 

869
00:15:37,600 --> 00:15:39,590
go back to the beginning of computer
history

870
00:15:39,590 --> 00:15:39,600
history
 

871
00:15:39,600 --> 00:15:43,189
history
they became a sort of hot research topic

872
00:15:43,189 --> 00:15:43,199
they became a sort of hot research topic
 

873
00:15:43,199 --> 00:15:48,069
they became a sort of hot research topic
starting in maybe the mid to late 1980s

874
00:15:48,069 --> 00:15:48,079

 

875
00:15:48,079 --> 00:15:52,629

and the big idea

876
00:15:52,629 --> 00:15:52,639

 

877
00:15:52,639 --> 00:15:55,910

so a micro kernel this this word uh by

878
00:15:55,910 --> 00:15:55,920
so a micro kernel this this word uh by
 

879
00:15:55,920 --> 00:15:57,430
so a micro kernel this this word uh by
the way refers to a sort of general

880
00:15:57,430 --> 00:15:57,440
the way refers to a sort of general
 

881
00:15:57,440 --> 00:15:58,710
the way refers to a sort of general
approach or concept

882
00:15:58,710 --> 00:15:58,720
approach or concept
 

883
00:15:58,720 --> 00:16:00,310
approach or concept
it doesn't refer to any specific

884
00:16:00,310 --> 00:16:00,320
it doesn't refer to any specific
 

885
00:16:00,320 --> 00:16:01,829
it doesn't refer to any specific
artifact there were many

886
00:16:01,829 --> 00:16:01,839
artifact there were many
 

887
00:16:01,839 --> 00:16:04,470
artifact there were many
uh people who who designed and built

888
00:16:04,470 --> 00:16:04,480
uh people who who designed and built
 

889
00:16:04,480 --> 00:16:05,829
uh people who who designed and built
operating systems that

890
00:16:05,829 --> 00:16:05,839
operating systems that
 

891
00:16:05,839 --> 00:16:08,310
operating systems that
followed the general sort of plan for

892
00:16:08,310 --> 00:16:08,320
followed the general sort of plan for
 

893
00:16:08,320 --> 00:16:09,910
followed the general sort of plan for
micro kernels but you know each of these

894
00:16:09,910 --> 00:16:09,920
micro kernels but you know each of these
 

895
00:16:09,920 --> 00:16:10,710
micro kernels but you know each of these
projects

896
00:16:10,710 --> 00:16:10,720
projects
 

897
00:16:10,720 --> 00:16:12,230
projects
ended up designing an operating system

898
00:16:12,230 --> 00:16:12,240
ended up designing an operating system
 

899
00:16:12,240 --> 00:16:13,430
ended up designing an operating system
was maybe quite different from the

900
00:16:13,430 --> 00:16:13,440
was maybe quite different from the
 

901
00:16:13,440 --> 00:16:13,990
was maybe quite different from the
others

902
00:16:13,990 --> 00:16:14,000
others
 

903
00:16:14,000 --> 00:16:17,670
others
so the key idea was the

904
00:16:17,670 --> 00:16:17,680
so the key idea was the
 

905
00:16:17,680 --> 00:16:22,470
so the key idea was the
tiny kernel um

906
00:16:22,470 --> 00:16:22,480
tiny kernel um
 

907
00:16:22,480 --> 00:16:26,230
tiny kernel um
that supported just ipc

908
00:16:26,230 --> 00:16:26,240
that supported just ipc
 

909
00:16:26,240 --> 00:16:29,509
that supported just ipc
or inter-process communication

910
00:16:29,509 --> 00:16:29,519
or inter-process communication
 

911
00:16:29,519 --> 00:16:32,550
or inter-process communication
and some sort of notion of

912
00:16:32,550 --> 00:16:32,560
and some sort of notion of
 

913
00:16:32,560 --> 00:16:36,389
and some sort of notion of
threads or tasks um so you have a kernel

914
00:16:36,389 --> 00:16:36,399
threads or tasks um so you have a kernel
 

915
00:16:36,399 --> 00:16:37,110
threads or tasks um so you have a kernel
that that

916
00:16:37,110 --> 00:16:37,120
that that
 

917
00:16:37,120 --> 00:16:39,110
that that
you know provides you a notion of sort

918
00:16:39,110 --> 00:16:39,120
you know provides you a notion of sort
 

919
00:16:39,120 --> 00:16:40,870
you know provides you a notion of sort
of process-like abstraction and a way

920
00:16:40,870 --> 00:16:40,880
of process-like abstraction and a way
 

921
00:16:40,880 --> 00:16:42,470
of process-like abstraction and a way
for processes to communicate with each

922
00:16:42,470 --> 00:16:42,480
for processes to communicate with each
 

923
00:16:42,480 --> 00:16:43,430
for processes to communicate with each
other with this

924
00:16:43,430 --> 00:16:43,440
other with this
 

925
00:16:43,440 --> 00:16:45,829
other with this
inner process communication and nothing

926
00:16:45,829 --> 00:16:45,839
inner process communication and nothing
 

927
00:16:45,839 --> 00:16:46,949
inner process communication and nothing
else and

928
00:16:46,949 --> 00:16:46,959
else and
 

929
00:16:46,959 --> 00:16:48,069
else and
everything else you might want to do

930
00:16:48,069 --> 00:16:48,079
everything else you might want to do
 

931
00:16:48,079 --> 00:16:50,389
everything else you might want to do
like have a file system you'd implement

932
00:16:50,389 --> 00:16:50,399
like have a file system you'd implement
 

933
00:16:50,399 --> 00:16:52,870
like have a file system you'd implement
as a process as a task as a user level

934
00:16:52,870 --> 00:16:52,880
as a process as a task as a user level
 

935
00:16:52,880 --> 00:16:53,430
as a process as a task as a user level
code

936
00:16:53,430 --> 00:16:53,440
code
 

937
00:16:53,440 --> 00:16:56,230
code
not in the kernel at all and so a

938
00:16:56,230 --> 00:16:56,240
not in the kernel at all and so a
 

939
00:16:56,240 --> 00:17:01,030
not in the kernel at all and so a
picture for that

940
00:17:01,030 --> 00:17:01,040

 

941
00:17:01,040 --> 00:17:03,990

might be now we're going to use mu for

942
00:17:03,990 --> 00:17:04,000
might be now we're going to use mu for
 

943
00:17:04,000 --> 00:17:05,909
might be now we're going to use mu for
microkernel we've got the microkernel

944
00:17:05,909 --> 00:17:05,919
microkernel we've got the microkernel
 

945
00:17:05,919 --> 00:17:07,189
microkernel we've got the microkernel
down here and we got

946
00:17:07,189 --> 00:17:07,199
down here and we got
 

947
00:17:07,199 --> 00:17:09,510
down here and we got
user space processes up here and we

948
00:17:09,510 --> 00:17:09,520
user space processes up here and we
 

949
00:17:09,520 --> 00:17:10,870
user space processes up here and we
might have all the kind of usual

950
00:17:10,870 --> 00:17:10,880
might have all the kind of usual
 

951
00:17:10,880 --> 00:17:13,029
might have all the kind of usual
processes run maybe

952
00:17:13,029 --> 00:17:13,039
processes run maybe
 

953
00:17:13,039 --> 00:17:15,829
processes run maybe
we're going to run vi my favorite text

954
00:17:15,829 --> 00:17:15,839
we're going to run vi my favorite text
 

955
00:17:15,839 --> 00:17:19,829
we're going to run vi my favorite text
editor and my compiler

956
00:17:19,829 --> 00:17:19,839
editor and my compiler
 

957
00:17:19,839 --> 00:17:25,350
editor and my compiler
my windows system

958
00:17:25,350 --> 00:17:25,360

 

959
00:17:25,360 --> 00:17:27,350

but also up here as user level processes

960
00:17:27,350 --> 00:17:27,360
but also up here as user level processes
 

961
00:17:27,360 --> 00:17:29,590
but also up here as user level processes
we're going to have the file system

962
00:17:29,590 --> 00:17:29,600
we're going to have the file system
 

963
00:17:29,600 --> 00:17:32,470
we're going to have the file system
just as a server process in user space

964
00:17:32,470 --> 00:17:32,480
just as a server process in user space
 

965
00:17:32,480 --> 00:17:34,150
just as a server process in user space
maybe we're going to have a

966
00:17:34,150 --> 00:17:34,160
maybe we're going to have a
 

967
00:17:34,160 --> 00:17:37,110
maybe we're going to have a
disk driver that knows how to talk to my

968
00:17:37,110 --> 00:17:37,120
disk driver that knows how to talk to my
 

969
00:17:37,120 --> 00:17:38,310
disk driver that knows how to talk to my
disk hardware

970
00:17:38,310 --> 00:17:38,320
disk hardware
 

971
00:17:38,320 --> 00:17:42,950
disk hardware
maybe we'll have a network stack that

972
00:17:42,950 --> 00:17:42,960

 

973
00:17:42,960 --> 00:17:46,230

knows how to talk talk tcp to my

974
00:17:46,230 --> 00:17:46,240
knows how to talk talk tcp to my
 

975
00:17:46,240 --> 00:17:49,270
knows how to talk talk tcp to my
network interface card maybe we'll have

976
00:17:49,270 --> 00:17:49,280
network interface card maybe we'll have
 

977
00:17:49,280 --> 00:17:51,990
network interface card maybe we'll have
a user level process that's in charge of

978
00:17:51,990 --> 00:17:52,000
a user level process that's in charge of
 

979
00:17:52,000 --> 00:17:52,710
a user level process that's in charge of
doing

980
00:17:52,710 --> 00:17:52,720
doing
 

981
00:17:52,720 --> 00:17:56,310
doing
fancy paging tricks like memory mapped

982
00:17:56,310 --> 00:17:56,320
fancy paging tricks like memory mapped
 

983
00:17:56,320 --> 00:17:57,430
fancy paging tricks like memory mapped
files or

984
00:17:57,430 --> 00:17:57,440
files or
 

985
00:17:57,440 --> 00:17:59,430
files or
maybe implements copy on right fork or

986
00:17:59,430 --> 00:17:59,440
maybe implements copy on right fork or
 

987
00:17:59,440 --> 00:18:01,510
maybe implements copy on right fork or
something

988
00:18:01,510 --> 00:18:01,520
something
 

989
00:18:01,520 --> 00:18:04,789
something
and when my text editor needs to read a

990
00:18:04,789 --> 00:18:04,799
and when my text editor needs to read a
 

991
00:18:04,799 --> 00:18:05,669
and when my text editor needs to read a
file

992
00:18:05,669 --> 00:18:05,679
file
 

993
00:18:05,679 --> 00:18:07,270
file
it needs to talk to the file system and

994
00:18:07,270 --> 00:18:07,280
it needs to talk to the file system and
 

995
00:18:07,280 --> 00:18:08,789
it needs to talk to the file system and
so

996
00:18:08,789 --> 00:18:08,799
so
 

997
00:18:08,799 --> 00:18:13,350
so
it's going to send a

998
00:18:13,350 --> 00:18:13,360

 

999
00:18:13,360 --> 00:18:16,870

um a message via ipc

1000
00:18:16,870 --> 00:18:16,880
um a message via ipc
 

1001
00:18:16,880 --> 00:18:19,990
um a message via ipc
in our process communication um to the

1002
00:18:19,990 --> 00:18:20,000
in our process communication um to the
 

1003
00:18:20,000 --> 00:18:21,590
in our process communication um to the
file system server

1004
00:18:21,590 --> 00:18:21,600
file system server
 

1005
00:18:21,600 --> 00:18:23,190
file system server
which has all the file system code in it

1006
00:18:23,190 --> 00:18:23,200
which has all the file system code in it
 

1007
00:18:23,200 --> 00:18:24,630
which has all the file system code in it
knows about files and directories the

1008
00:18:24,630 --> 00:18:24,640
knows about files and directories the
 

1009
00:18:24,640 --> 00:18:26,789
knows about files and directories the
file system of server code may need to

1010
00:18:26,789 --> 00:18:26,799
file system of server code may need to
 

1011
00:18:26,799 --> 00:18:28,390
file system of server code may need to
you know talk to the disk so it might

1012
00:18:28,390 --> 00:18:28,400
you know talk to the disk so it might
 

1013
00:18:28,400 --> 00:18:30,310
you know talk to the disk so it might
send another sort of disk

1014
00:18:30,310 --> 00:18:30,320
send another sort of disk
 

1015
00:18:30,320 --> 00:18:33,510
send another sort of disk
reader right to the another ipc to the

1016
00:18:33,510 --> 00:18:33,520
reader right to the another ipc to the
 

1017
00:18:33,520 --> 00:18:35,190
reader right to the another ipc to the
disk driver which somehow talks to this

1018
00:18:35,190 --> 00:18:35,200
disk driver which somehow talks to this
 

1019
00:18:35,200 --> 00:18:36,230
disk driver which somehow talks to this
hardware

1020
00:18:36,230 --> 00:18:36,240
hardware
 

1021
00:18:36,240 --> 00:18:39,190
hardware
and this driver may return you know a

1022
00:18:39,190 --> 00:18:39,200
and this driver may return you know a
 

1023
00:18:39,200 --> 00:18:41,190
and this driver may return you know a
disk block to the file server

1024
00:18:41,190 --> 00:18:41,200
disk block to the file server
 

1025
00:18:41,200 --> 00:18:42,710
disk block to the file server
after it does its thing maybe the file

1026
00:18:42,710 --> 00:18:42,720
after it does its thing maybe the file
 

1027
00:18:42,720 --> 00:18:44,230
after it does its thing maybe the file
server finally returns the data you

1028
00:18:44,230 --> 00:18:44,240
server finally returns the data you
 

1029
00:18:44,240 --> 00:18:45,830
server finally returns the data you
asked for again by inner process

1030
00:18:45,830 --> 00:18:45,840
asked for again by inner process
 

1031
00:18:45,840 --> 00:18:48,070
asked for again by inner process
communication messages

1032
00:18:48,070 --> 00:18:48,080
communication messages
 

1033
00:18:48,080 --> 00:18:51,830
communication messages
back to my text editor but you know the

1034
00:18:51,830 --> 00:18:51,840
back to my text editor but you know the
 

1035
00:18:51,840 --> 00:18:53,510
back to my text editor but you know the
the critical thing to notice here is

1036
00:18:53,510 --> 00:18:53,520
the critical thing to notice here is
 

1037
00:18:53,520 --> 00:18:55,909
the critical thing to notice here is
that the only stuff going down here in

1038
00:18:55,909 --> 00:18:55,919
that the only stuff going down here in
 

1039
00:18:55,919 --> 00:18:57,110
that the only stuff going down here in
the kernel is support

1040
00:18:57,110 --> 00:18:57,120
the kernel is support
 

1041
00:18:57,120 --> 00:19:00,549
the kernel is support
for these these processes or tasks or

1042
00:19:00,549 --> 00:19:00,559
for these these processes or tasks or
 

1043
00:19:00,559 --> 00:19:01,990
for these these processes or tasks or
threads or

1044
00:19:01,990 --> 00:19:02,000
threads or
 

1045
00:19:02,000 --> 00:19:05,029
threads or
whatever they might be and um support

1046
00:19:05,029 --> 00:19:05,039
whatever they might be and um support
 

1047
00:19:05,039 --> 00:19:06,710
whatever they might be and um support
for the inner process communication

1048
00:19:06,710 --> 00:19:06,720
for the inner process communication
 

1049
00:19:06,720 --> 00:19:07,669
for the inner process communication
message passing

1050
00:19:07,669 --> 00:19:07,679
message passing
 

1051
00:19:07,679 --> 00:19:09,270
message passing
and nothing else there's no file system

1052
00:19:09,270 --> 00:19:09,280
and nothing else there's no file system
 

1053
00:19:09,280 --> 00:19:10,710
and nothing else there's no file system
down here there's no

1054
00:19:10,710 --> 00:19:10,720
down here there's no
 

1055
00:19:10,720 --> 00:19:12,710
down here there's no
device drivers necessarily down here in

1056
00:19:12,710 --> 00:19:12,720
device drivers necessarily down here in
 

1057
00:19:12,720 --> 00:19:14,230
device drivers necessarily down here in
the kernel there's no

1058
00:19:14,230 --> 00:19:14,240
the kernel there's no
 

1059
00:19:14,240 --> 00:19:16,950
the kernel there's no
network stack all that stuff is up here

1060
00:19:16,950 --> 00:19:16,960
network stack all that stuff is up here
 

1061
00:19:16,960 --> 00:19:17,750
network stack all that stuff is up here
is

1062
00:19:17,750 --> 00:19:17,760
is
 

1063
00:19:17,760 --> 00:19:20,150
is
more or less ordinary user level

1064
00:19:20,150 --> 00:19:20,160
more or less ordinary user level
 

1065
00:19:20,160 --> 00:19:23,350
more or less ordinary user level
processes

1066
00:19:23,350 --> 00:19:23,360

 

1067
00:19:23,360 --> 00:19:26,150

and so they lead you to a very small

1068
00:19:26,150 --> 00:19:26,160
and so they lead you to a very small
 

1069
00:19:26,160 --> 00:19:27,350
and so they lead you to a very small
kernel with

1070
00:19:27,350 --> 00:19:27,360
kernel with
 

1071
00:19:27,360 --> 00:19:30,870
kernel with
uh relatively little code optimize like

1072
00:19:30,870 --> 00:19:30,880
uh relatively little code optimize like
 

1073
00:19:30,880 --> 00:19:32,470
uh relatively little code optimize like
you can optimize ipc and there's not

1074
00:19:32,470 --> 00:19:32,480
you can optimize ipc and there's not
 

1075
00:19:32,480 --> 00:19:34,870
you can optimize ipc and there's not
much else going on

1076
00:19:34,870 --> 00:19:34,880
much else going on
 

1077
00:19:34,880 --> 00:19:37,669
much else going on
um and so this this is the kind of

1078
00:19:37,669 --> 00:19:37,679
um and so this this is the kind of
 

1079
00:19:37,679 --> 00:19:38,950
um and so this this is the kind of
picture we're going to talk about for

1080
00:19:38,950 --> 00:19:38,960
picture we're going to talk about for
 

1081
00:19:38,960 --> 00:19:40,549
picture we're going to talk about for
the rest of the lecture and

1082
00:19:40,549 --> 00:19:40,559
the rest of the lecture and
 

1083
00:19:40,559 --> 00:19:41,590
the rest of the lecture and
just to give you a taste of kind of

1084
00:19:41,590 --> 00:19:41,600
just to give you a taste of kind of
 

1085
00:19:41,600 --> 00:19:43,669
just to give you a taste of kind of
where this ended up um

1086
00:19:43,669 --> 00:19:43,679
where this ended up um
 

1087
00:19:43,679 --> 00:19:46,470
where this ended up um
there are actually still uh microkernels

1088
00:19:46,470 --> 00:19:46,480
there are actually still uh microkernels
 

1089
00:19:46,480 --> 00:19:47,270
there are actually still uh microkernels
in use today

1090
00:19:47,270 --> 00:19:47,280
in use today
 

1091
00:19:47,280 --> 00:19:49,270
in use today
and indeed the l4 microkernel which is

1092
00:19:49,270 --> 00:19:49,280
and indeed the l4 microkernel which is
 

1093
00:19:49,280 --> 00:19:51,430
and indeed the l4 microkernel which is
the topic of today's paper

1094
00:19:51,430 --> 00:19:51,440
the topic of today's paper
 

1095
00:19:51,440 --> 00:19:54,310
the topic of today's paper
turns out to be used um there's many

1096
00:19:54,310 --> 00:19:54,320
turns out to be used um there's many
 

1097
00:19:54,320 --> 00:19:56,390
turns out to be used um there's many
instances many many instances of l4

1098
00:19:56,390 --> 00:19:56,400
instances many many instances of l4
 

1099
00:19:56,400 --> 00:19:57,350
instances many many instances of l4
running because

1100
00:19:57,350 --> 00:19:57,360
running because
 

1101
00:19:57,360 --> 00:19:59,510
running because
it's used in a lot of cell phones to in

1102
00:19:59,510 --> 00:19:59,520
it's used in a lot of cell phones to in
 

1103
00:19:59,520 --> 00:20:01,190
it's used in a lot of cell phones to in
the little microcontrollers that control

1104
00:20:01,190 --> 00:20:01,200
the little microcontrollers that control
 

1105
00:20:01,200 --> 00:20:03,270
the little microcontrollers that control
the cell phone radios

1106
00:20:03,270 --> 00:20:03,280
the cell phone radios
 

1107
00:20:03,280 --> 00:20:05,750
the cell phone radios
and it's also apparently used in recent

1108
00:20:05,750 --> 00:20:05,760
and it's also apparently used in recent
 

1109
00:20:05,760 --> 00:20:06,870
and it's also apparently used in recent
iphones

1110
00:20:06,870 --> 00:20:06,880
iphones
 

1111
00:20:06,880 --> 00:20:09,590
iphones
as the operating system that runs on the

1112
00:20:09,590 --> 00:20:09,600
as the operating system that runs on the
 

1113
00:20:09,600 --> 00:20:10,630
as the operating system that runs on the
special

1114
00:20:10,630 --> 00:20:10,640
special
 

1115
00:20:10,640 --> 00:20:13,110
special
dedicated enclave processor in the

1116
00:20:13,110 --> 00:20:13,120
dedicated enclave processor in the
 

1117
00:20:13,120 --> 00:20:14,310
dedicated enclave processor in the
iphone that hides

1118
00:20:14,310 --> 00:20:14,320
iphone that hides
 

1119
00:20:14,320 --> 00:20:17,430
iphone that hides
the secret cryptographic keys so there's

1120
00:20:17,430 --> 00:20:17,440
the secret cryptographic keys so there's
 

1121
00:20:17,440 --> 00:20:19,270
the secret cryptographic keys so there's
a bunch of embedded

1122
00:20:19,270 --> 00:20:19,280
a bunch of embedded
 

1123
00:20:19,280 --> 00:20:21,350
a bunch of embedded
where these microkernels have won out is

1124
00:20:21,350 --> 00:20:21,360
where these microkernels have won out is
 

1125
00:20:21,360 --> 00:20:23,510
where these microkernels have won out is
in little embedded specialized

1126
00:20:23,510 --> 00:20:23,520
in little embedded specialized
 

1127
00:20:23,520 --> 00:20:25,669
in little embedded specialized
computer systems you know not not

1128
00:20:25,669 --> 00:20:25,679
computer systems you know not not
 

1129
00:20:25,679 --> 00:20:27,029
computer systems you know not not
laptops but

1130
00:20:27,029 --> 00:20:27,039
laptops but
 

1131
00:20:27,039 --> 00:20:30,789
laptops but
um computers are dedicated to

1132
00:20:30,789 --> 00:20:30,799
um computers are dedicated to
 

1133
00:20:30,799 --> 00:20:33,029
um computers are dedicated to
single specialized tasks where you may

1134
00:20:33,029 --> 00:20:33,039
single specialized tasks where you may
 

1135
00:20:33,039 --> 00:20:33,990
single specialized tasks where you may
not need the complexity

1136
00:20:33,990 --> 00:20:34,000
not need the complexity
 

1137
00:20:34,000 --> 00:20:35,830
not need the complexity
of linux but you do need some operating

1138
00:20:35,830 --> 00:20:35,840
of linux but you do need some operating
 

1139
00:20:35,840 --> 00:20:37,669
of linux but you do need some operating
system

1140
00:20:37,669 --> 00:20:37,679
system
 

1141
00:20:37,679 --> 00:20:40,230
system
and the other thing that's uh the other

1142
00:20:40,230 --> 00:20:40,240
and the other thing that's uh the other
 

1143
00:20:40,240 --> 00:20:41,990
and the other thing that's uh the other
sort of final result

1144
00:20:41,990 --> 00:20:42,000
sort of final result
 

1145
00:20:42,000 --> 00:20:44,149
sort of final result
from microkernels is that the idea of

1146
00:20:44,149 --> 00:20:44,159
from microkernels is that the idea of
 

1147
00:20:44,159 --> 00:20:45,990
from microkernels is that the idea of
user level services with

1148
00:20:45,990 --> 00:20:46,000
user level services with
 

1149
00:20:46,000 --> 00:20:48,310
user level services with
i with other programs talking to them

1150
00:20:48,310 --> 00:20:48,320
i with other programs talking to them
 

1151
00:20:48,320 --> 00:20:49,830
i with other programs talking to them
from with ipc

1152
00:20:49,830 --> 00:20:49,840
from with ipc
 

1153
00:20:49,840 --> 00:20:52,149
from with ipc
that also has made its way into a lot of

1154
00:20:52,149 --> 00:20:52,159
that also has made its way into a lot of
 

1155
00:20:52,159 --> 00:20:53,990
that also has made its way into a lot of
operating systems like mac os which i'm

1156
00:20:53,990 --> 00:20:54,000
operating systems like mac os which i'm
 

1157
00:20:54,000 --> 00:20:56,549
operating systems like mac os which i'm
running right now to talk to you um you

1158
00:20:56,549 --> 00:20:56,559
running right now to talk to you um you
 

1159
00:20:56,559 --> 00:20:57,430
running right now to talk to you um you
know it's a

1160
00:20:57,430 --> 00:20:57,440
know it's a
 

1161
00:20:57,440 --> 00:20:59,029
know it's a
sort of as well as being a kind of

1162
00:20:59,029 --> 00:20:59,039
sort of as well as being a kind of
 

1163
00:20:59,039 --> 00:21:00,870
sort of as well as being a kind of
ordinary monolithic kernel

1164
00:21:00,870 --> 00:21:00,880
ordinary monolithic kernel
 

1165
00:21:00,880 --> 00:21:04,470
ordinary monolithic kernel
it also has good support for user level

1166
00:21:04,470 --> 00:21:04,480
it also has good support for user level
 

1167
00:21:04,480 --> 00:21:05,190
it also has good support for user level
services

1168
00:21:05,190 --> 00:21:05,200
services
 

1169
00:21:05,200 --> 00:21:08,630
services
and ipc between unix processes to talk

1170
00:21:08,630 --> 00:21:08,640
and ipc between unix processes to talk
 

1171
00:21:08,640 --> 00:21:10,470
and ipc between unix processes to talk
to these services so

1172
00:21:10,470 --> 00:21:10,480
to these services so
 

1173
00:21:10,480 --> 00:21:14,549
to these services so
that idea also

1174
00:21:14,549 --> 00:21:14,559

 

1175
00:21:14,559 --> 00:21:17,590

was a successful idea and widely adopted

1176
00:21:17,590 --> 00:21:17,600
was a successful idea and widely adopted
 

1177
00:21:17,600 --> 00:21:19,270
was a successful idea and widely adopted
okay so uh this is the basic

1178
00:21:19,270 --> 00:21:19,280
okay so uh this is the basic
 

1179
00:21:19,280 --> 00:21:21,270
okay so uh this is the basic
architecture um

1180
00:21:21,270 --> 00:21:21,280
architecture um
 

1181
00:21:21,280 --> 00:21:23,110
architecture um
i'm gonna uh go on and sort of talk

1182
00:21:23,110 --> 00:21:23,120
i'm gonna uh go on and sort of talk
 

1183
00:21:23,120 --> 00:21:24,630
i'm gonna uh go on and sort of talk
about some ways and

1184
00:21:24,630 --> 00:21:24,640
about some ways and
 

1185
00:21:24,640 --> 00:21:26,710
about some ways and
uh reasons why this might be attractive

1186
00:21:26,710 --> 00:21:26,720
uh reasons why this might be attractive
 

1187
00:21:26,720 --> 00:21:27,830
uh reasons why this might be attractive
but first are there any just

1188
00:21:27,830 --> 00:21:27,840
but first are there any just
 

1189
00:21:27,840 --> 00:21:31,590
but first are there any just
kind of high level questions about

1190
00:21:31,590 --> 00:21:31,600
kind of high level questions about
 

1191
00:21:31,600 --> 00:21:38,950
kind of high level questions about
what it is i mean by microkernel

1192
00:21:38,950 --> 00:21:38,960

 

1193
00:21:38,960 --> 00:21:42,830

okay

1194
00:21:42,830 --> 00:21:42,840

 

1195
00:21:42,840 --> 00:21:46,310

so what is it that people were hoping

1196
00:21:46,310 --> 00:21:46,320
so what is it that people were hoping
 

1197
00:21:46,320 --> 00:21:47,270
so what is it that people were hoping
for

1198
00:21:47,270 --> 00:21:47,280
for
 

1199
00:21:47,280 --> 00:21:50,470
for
um

1200
00:21:50,470 --> 00:21:50,480

 

1201
00:21:50,480 --> 00:21:53,830

when they uh started building like

1202
00:21:53,830 --> 00:21:53,840
when they uh started building like
 

1203
00:21:53,840 --> 00:21:57,590
when they uh started building like
microkernels so one big motivation

1204
00:21:57,590 --> 00:21:57,600
microkernels so one big motivation
 

1205
00:21:57,600 --> 00:21:58,950
microkernels so one big motivation
although you wouldn't necessarily see it

1206
00:21:58,950 --> 00:21:58,960
although you wouldn't necessarily see it
 

1207
00:21:58,960 --> 00:22:00,310
although you wouldn't necessarily see it
written down much is just a sense of

1208
00:22:00,310 --> 00:22:00,320
written down much is just a sense of
 

1209
00:22:00,320 --> 00:22:01,430
written down much is just a sense of
aesthetics

1210
00:22:01,430 --> 00:22:01,440
aesthetics
 

1211
00:22:01,440 --> 00:22:03,669
aesthetics
right i think just a lot of people feel

1212
00:22:03,669 --> 00:22:03,679
right i think just a lot of people feel
 

1213
00:22:03,679 --> 00:22:05,830
right i think just a lot of people feel
that huge complicated

1214
00:22:05,830 --> 00:22:05,840
that huge complicated
 

1215
00:22:05,840 --> 00:22:08,950
that huge complicated
uh single programs like like a linux

1216
00:22:08,950 --> 00:22:08,960
uh single programs like like a linux
 

1217
00:22:08,960 --> 00:22:09,669
uh single programs like like a linux
kernel

1218
00:22:09,669 --> 00:22:09,679
kernel
 

1219
00:22:09,679 --> 00:22:12,310
kernel
um are just not very elegant that surely

1220
00:22:12,310 --> 00:22:12,320
um are just not very elegant that surely
 

1221
00:22:12,320 --> 00:22:14,390
um are just not very elegant that surely
we can build something that's

1222
00:22:14,390 --> 00:22:14,400
we can build something that's
 

1223
00:22:14,400 --> 00:22:17,590
we can build something that's
much more much much smaller but it's a

1224
00:22:17,590 --> 00:22:17,600
much more much much smaller but it's a
 

1225
00:22:17,600 --> 00:22:18,789
much more much much smaller but it's a
much more focused design

1226
00:22:18,789 --> 00:22:18,799
much more focused design
 

1227
00:22:18,799 --> 00:22:21,990
much more focused design
isn't such a huge grab bag of uh random

1228
00:22:21,990 --> 00:22:22,000
isn't such a huge grab bag of uh random
 

1229
00:22:22,000 --> 00:22:23,270
isn't such a huge grab bag of uh random
different features

1230
00:22:23,270 --> 00:22:23,280
different features
 

1231
00:22:23,280 --> 00:22:26,549
different features
um so i think there was a strong sort of

1232
00:22:26,549 --> 00:22:26,559
um so i think there was a strong sort of
 

1233
00:22:26,559 --> 00:22:29,350
um so i think there was a strong sort of
aesthetic feeling that surely we can do

1234
00:22:29,350 --> 00:22:29,360
aesthetic feeling that surely we can do
 

1235
00:22:29,360 --> 00:22:32,870
aesthetic feeling that surely we can do
better than big kernels

1236
00:22:32,870 --> 00:22:32,880

 

1237
00:22:32,880 --> 00:22:34,390

but other sort of more specific things

1238
00:22:34,390 --> 00:22:34,400
but other sort of more specific things
 

1239
00:22:34,400 --> 00:22:36,230
but other sort of more specific things
that you might be able to quantify

1240
00:22:36,230 --> 00:22:36,240
that you might be able to quantify
 

1241
00:22:36,240 --> 00:22:41,270
that you might be able to quantify
are something a kernel that's small

1242
00:22:41,270 --> 00:22:41,280
are something a kernel that's small
 

1243
00:22:41,280 --> 00:22:44,789
are something a kernel that's small
might be more secure

1244
00:22:44,789 --> 00:22:44,799

 

1245
00:22:44,799 --> 00:22:47,190

all right a few lines of code you have

1246
00:22:47,190 --> 00:22:47,200
all right a few lines of code you have
 

1247
00:22:47,200 --> 00:22:49,270
all right a few lines of code you have
probably fewer bugs you have

1248
00:22:49,270 --> 00:22:49,280
probably fewer bugs you have
 

1249
00:22:49,280 --> 00:22:51,510
probably fewer bugs you have
less chance of somebody to be able to

1250
00:22:51,510 --> 00:22:51,520
less chance of somebody to be able to
 

1251
00:22:51,520 --> 00:22:53,190
less chance of somebody to be able to
exploit one of those bugs to

1252
00:22:53,190 --> 00:22:53,200
exploit one of those bugs to
 

1253
00:22:53,200 --> 00:22:57,029
exploit one of those bugs to
break security and in the uh

1254
00:22:57,029 --> 00:22:57,039
break security and in the uh
 

1255
00:22:57,039 --> 00:23:01,110
break security and in the uh
extreme of that you could imagine an

1256
00:23:01,110 --> 00:23:01,120
extreme of that you could imagine an
 

1257
00:23:01,120 --> 00:23:02,630
extreme of that you could imagine an
operating system that's actually

1258
00:23:02,630 --> 00:23:02,640
operating system that's actually
 

1259
00:23:02,640 --> 00:23:07,029
operating system that's actually
provable provably correct

1260
00:23:07,029 --> 00:23:07,039

 

1261
00:23:07,039 --> 00:23:08,470

where somebody can sit down and write a

1262
00:23:08,470 --> 00:23:08,480
where somebody can sit down and write a
 

1263
00:23:08,480 --> 00:23:10,470
where somebody can sit down and write a
proof that it the operating system has

1264
00:23:10,470 --> 00:23:10,480
proof that it the operating system has
 

1265
00:23:10,480 --> 00:23:11,830
proof that it the operating system has
no bugs or does exactly what it's

1266
00:23:11,830 --> 00:23:11,840
no bugs or does exactly what it's
 

1267
00:23:11,840 --> 00:23:13,750
no bugs or does exactly what it's
supposed to do and nothing else

1268
00:23:13,750 --> 00:23:13,760
supposed to do and nothing else
 

1269
00:23:13,760 --> 00:23:17,909
supposed to do and nothing else
and indeed there is a at least one

1270
00:23:17,909 --> 00:23:17,919
and indeed there is a at least one
 

1271
00:23:17,919 --> 00:23:21,270
and indeed there is a at least one
verified proved correct proved secure

1272
00:23:21,270 --> 00:23:21,280
verified proved correct proved secure
 

1273
00:23:21,280 --> 00:23:23,990
verified proved correct proved secure
operating system named sel4 which is a

1274
00:23:23,990 --> 00:23:24,000
operating system named sel4 which is a
 

1275
00:23:24,000 --> 00:23:26,549
operating system named sel4 which is a
one of the many descendants of the l4

1276
00:23:26,549 --> 00:23:26,559
one of the many descendants of the l4
 

1277
00:23:26,559 --> 00:23:30,630
one of the many descendants of the l4
microkernel that um

1278
00:23:30,630 --> 00:23:30,640

 

1279
00:23:30,640 --> 00:23:32,870

today's paper but you really you know

1280
00:23:32,870 --> 00:23:32,880
today's paper but you really you know
 

1281
00:23:32,880 --> 00:23:34,230
today's paper but you really you know
people know how to verify

1282
00:23:34,230 --> 00:23:34,240
people know how to verify
 

1283
00:23:34,240 --> 00:23:36,310
people know how to verify
sort of small the medium-sized program

1284
00:23:36,310 --> 00:23:36,320
sort of small the medium-sized program
 

1285
00:23:36,320 --> 00:23:37,669
sort of small the medium-sized program
so they don't know how to verify huge

1286
00:23:37,669 --> 00:23:37,679
so they don't know how to verify huge
 

1287
00:23:37,679 --> 00:23:38,789
so they don't know how to verify huge
programs unless the fact that

1288
00:23:38,789 --> 00:23:38,799
programs unless the fact that
 

1289
00:23:38,799 --> 00:23:40,230
programs unless the fact that
microkernels are small

1290
00:23:40,230 --> 00:23:40,240
microkernels are small
 

1291
00:23:40,240 --> 00:23:42,149
microkernels are small
is sort of a critical ingredient and be

1292
00:23:42,149 --> 00:23:42,159
is sort of a critical ingredient and be
 

1293
00:23:42,159 --> 00:23:45,430
is sort of a critical ingredient and be
able to prove they're correct

1294
00:23:45,430 --> 00:23:45,440

 

1295
00:23:45,440 --> 00:23:47,110

another reason why you might like small

1296
00:23:47,110 --> 00:23:47,120
another reason why you might like small
 

1297
00:23:47,120 --> 00:23:49,669
another reason why you might like small
is that a small amount of code is

1298
00:23:49,669 --> 00:23:49,679
is that a small amount of code is
 

1299
00:23:49,679 --> 00:23:54,470
is that a small amount of code is
often a lot easier to optimize than

1300
00:23:54,470 --> 00:23:54,480

 

1301
00:23:54,480 --> 00:23:57,669

than a huge program

1302
00:23:57,669 --> 00:23:57,679
than a huge program
 

1303
00:23:57,679 --> 00:23:59,590
than a huge program
another reason why small might result in

1304
00:23:59,590 --> 00:23:59,600
another reason why small might result in
 

1305
00:23:59,600 --> 00:24:03,110
another reason why small might result in
fast is that you don't have to pay for

1306
00:24:03,110 --> 00:24:03,120
fast is that you don't have to pay for
 

1307
00:24:03,120 --> 00:24:04,789
fast is that you don't have to pay for
a lot of features that you don't use if

1308
00:24:04,789 --> 00:24:04,799
a lot of features that you don't use if
 

1309
00:24:04,799 --> 00:24:06,310
a lot of features that you don't use if
your microkernel does hardly anything

1310
00:24:06,310 --> 00:24:06,320
your microkernel does hardly anything
 

1311
00:24:06,320 --> 00:24:07,269
your microkernel does hardly anything
then

1312
00:24:07,269 --> 00:24:07,279
then
 

1313
00:24:07,279 --> 00:24:08,470
then
you're not paying for a lot of features

1314
00:24:08,470 --> 00:24:08,480
you're not paying for a lot of features
 

1315
00:24:08,480 --> 00:24:11,510
you're not paying for a lot of features
you're not using

1316
00:24:11,510 --> 00:24:11,520

 

1317
00:24:11,520 --> 00:24:15,029

another reason for small is that a small

1318
00:24:15,029 --> 00:24:15,039
another reason for small is that a small
 

1319
00:24:15,039 --> 00:24:16,310
another reason for small is that a small
kernel probably bakes in

1320
00:24:16,310 --> 00:24:16,320
kernel probably bakes in
 

1321
00:24:16,320 --> 00:24:19,190
kernel probably bakes in
far fewer design decisions forces fewer

1322
00:24:19,190 --> 00:24:19,200
far fewer design decisions forces fewer
 

1323
00:24:19,200 --> 00:24:22,470
far fewer design decisions forces fewer
design decisions on application writers

1324
00:24:22,470 --> 00:24:22,480
design decisions on application writers
 

1325
00:24:22,480 --> 00:24:24,149
design decisions on application writers
and so it leaves them more maybe leaves

1326
00:24:24,149 --> 00:24:24,159
and so it leaves them more maybe leaves
 

1327
00:24:24,159 --> 00:24:26,149
and so it leaves them more maybe leaves
them more flexible flexibility to make

1328
00:24:26,149 --> 00:24:26,159
them more flexible flexibility to make
 

1329
00:24:26,159 --> 00:24:30,549
them more flexible flexibility to make
their own design decisions

1330
00:24:30,549 --> 00:24:30,559

 

1331
00:24:30,559 --> 00:24:32,230

so by the way these are all these are

1332
00:24:32,230 --> 00:24:32,240
so by the way these are all these are
 

1333
00:24:32,240 --> 00:24:34,310
so by the way these are all these are
not uh

1334
00:24:34,310 --> 00:24:34,320
not uh
 

1335
00:24:34,320 --> 00:24:35,750
not uh
necessary consequences of the

1336
00:24:35,750 --> 00:24:35,760
necessary consequences of the
 

1337
00:24:35,760 --> 00:24:37,430
necessary consequences of the
microkernel approach these are things

1338
00:24:37,430 --> 00:24:37,440
microkernel approach these are things
 

1339
00:24:37,440 --> 00:24:38,870
microkernel approach these are things
that people hoped for and tried to

1340
00:24:38,870 --> 00:24:38,880
that people hoped for and tried to
 

1341
00:24:38,880 --> 00:24:39,510
that people hoped for and tried to
achieve

1342
00:24:39,510 --> 00:24:39,520
achieve
 

1343
00:24:39,520 --> 00:24:42,870
achieve
by using microkernels another set of

1344
00:24:42,870 --> 00:24:42,880
by using microkernels another set of
 

1345
00:24:42,880 --> 00:24:44,310
by using microkernels another set of
reasons why microkernels seemed

1346
00:24:44,310 --> 00:24:44,320
reasons why microkernels seemed
 

1347
00:24:44,320 --> 00:24:45,990
reasons why microkernels seemed
attractive has to do with the fact that

1348
00:24:45,990 --> 00:24:46,000
attractive has to do with the fact that
 

1349
00:24:46,000 --> 00:24:49,110
attractive has to do with the fact that
a lot of the code was at user level

1350
00:24:49,110 --> 00:24:49,120
a lot of the code was at user level
 

1351
00:24:49,120 --> 00:24:51,830
a lot of the code was at user level
um that is a lot of features and

1352
00:24:51,830 --> 00:24:51,840
um that is a lot of features and
 

1353
00:24:51,840 --> 00:24:52,950
um that is a lot of features and
functions that we

1354
00:24:52,950 --> 00:24:52,960
functions that we
 

1355
00:24:52,960 --> 00:24:54,950
functions that we
sort of have grown used to being inside

1356
00:24:54,950 --> 00:24:54,960
sort of have grown used to being inside
 

1357
00:24:54,960 --> 00:24:56,549
sort of have grown used to being inside
the kernel where actually user level

1358
00:24:56,549 --> 00:24:56,559
the kernel where actually user level
 

1359
00:24:56,559 --> 00:24:57,430
the kernel where actually user level
services

1360
00:24:57,430 --> 00:24:57,440
services
 

1361
00:24:57,440 --> 00:25:00,230
services
so they hope that by sort of breaking

1362
00:25:00,230 --> 00:25:00,240
so they hope that by sort of breaking
 

1363
00:25:00,240 --> 00:25:01,350
so they hope that by sort of breaking
the kernel apart and running the

1364
00:25:01,350 --> 00:25:01,360
the kernel apart and running the
 

1365
00:25:01,360 --> 00:25:02,710
the kernel apart and running the
different parts like

1366
00:25:02,710 --> 00:25:02,720
different parts like
 

1367
00:25:02,720 --> 00:25:05,190
different parts like
in user-level services like a file

1368
00:25:05,190 --> 00:25:05,200
in user-level services like a file
 

1369
00:25:05,200 --> 00:25:05,990
in user-level services like a file
service

1370
00:25:05,990 --> 00:25:06,000
service
 

1371
00:25:06,000 --> 00:25:09,269
service
pro fires file service server

1372
00:25:09,269 --> 00:25:09,279
pro fires file service server
 

1373
00:25:09,279 --> 00:25:12,630
pro fires file service server
it might cause the uh

1374
00:25:12,630 --> 00:25:12,640
it might cause the uh
 

1375
00:25:12,640 --> 00:25:15,590
it might cause the uh
the code to be more modular might sort

1376
00:25:15,590 --> 00:25:15,600
the code to be more modular might sort
 

1377
00:25:15,600 --> 00:25:16,390
the code to be more modular might sort
of

1378
00:25:16,390 --> 00:25:16,400
of
 

1379
00:25:16,400 --> 00:25:18,310
of
encourage operating system designers to

1380
00:25:18,310 --> 00:25:18,320
encourage operating system designers to
 

1381
00:25:18,320 --> 00:25:20,549
encourage operating system designers to
split up all these functions into

1382
00:25:20,549 --> 00:25:20,559
split up all these functions into
 

1383
00:25:20,559 --> 00:25:24,230
split up all these functions into
many separate services and that might

1384
00:25:24,230 --> 00:25:24,240
many separate services and that might
 

1385
00:25:24,240 --> 00:25:27,269
many separate services and that might
that might be a good thing

1386
00:25:27,269 --> 00:25:27,279

 

1387
00:25:27,279 --> 00:25:30,470

user level code is also possibly easier

1388
00:25:30,470 --> 00:25:30,480
user level code is also possibly easier
 

1389
00:25:30,480 --> 00:25:32,230
user level code is also possibly easier
to modify if steps at user level it's

1390
00:25:32,230 --> 00:25:32,240
to modify if steps at user level it's
 

1391
00:25:32,240 --> 00:25:33,350
to modify if steps at user level it's
usually easier to

1392
00:25:33,350 --> 00:25:33,360
usually easier to
 

1393
00:25:33,360 --> 00:25:36,630
usually easier to
tweak it or replace it or modify it than

1394
00:25:36,630 --> 00:25:36,640
tweak it or replace it or modify it than
 

1395
00:25:36,640 --> 00:25:38,470
tweak it or replace it or modify it than
doing the same stuff in the kernel so

1396
00:25:38,470 --> 00:25:38,480
doing the same stuff in the kernel so
 

1397
00:25:38,480 --> 00:25:43,590
doing the same stuff in the kernel so
maybe it's easier to customize

1398
00:25:43,590 --> 00:25:43,600
maybe it's easier to customize
 

1399
00:25:43,600 --> 00:25:47,029
maybe it's easier to customize
um putting the uh operating systems at

1400
00:25:47,029 --> 00:25:47,039
um putting the uh operating systems at
 

1401
00:25:47,039 --> 00:25:48,630
um putting the uh operating systems at
user level also might make them more

1402
00:25:48,630 --> 00:25:48,640
user level also might make them more
 

1403
00:25:48,640 --> 00:25:50,230
user level also might make them more
robust

1404
00:25:50,230 --> 00:25:50,240
robust
 

1405
00:25:50,240 --> 00:25:52,230
robust
you can we can if the kernel something

1406
00:25:52,230 --> 00:25:52,240
you can we can if the kernel something
 

1407
00:25:52,240 --> 00:25:53,669
you can we can if the kernel something
goes wrong with the kernel

1408
00:25:53,669 --> 00:25:53,679
goes wrong with the kernel
 

1409
00:25:53,679 --> 00:25:57,350
goes wrong with the kernel
um you know usually you have to panic

1410
00:25:57,350 --> 00:25:57,360
um you know usually you have to panic
 

1411
00:25:57,360 --> 00:25:58,950
um you know usually you have to panic
and reboot because

1412
00:25:58,950 --> 00:25:58,960
and reboot because
 

1413
00:25:58,960 --> 00:26:01,750
and reboot because
um you know you can't necessarily trust

1414
00:26:01,750 --> 00:26:01,760
um you know you can't necessarily trust
 

1415
00:26:01,760 --> 00:26:03,269
um you know you can't necessarily trust
what's in the kernel anymore if it's had

1416
00:26:03,269 --> 00:26:03,279
what's in the kernel anymore if it's had
 

1417
00:26:03,279 --> 00:26:04,630
what's in the kernel anymore if it's had
some bug that maybe causes it to

1418
00:26:04,630 --> 00:26:04,640
some bug that maybe causes it to
 

1419
00:26:04,640 --> 00:26:05,750
some bug that maybe causes it to
overwrite

1420
00:26:05,750 --> 00:26:05,760
overwrite
 

1421
00:26:05,760 --> 00:26:08,630
overwrite
a random part of its data whereas if you

1422
00:26:08,630 --> 00:26:08,640
a random part of its data whereas if you
 

1423
00:26:08,640 --> 00:26:10,149
a random part of its data whereas if you
have a bunch of user level services and

1424
00:26:10,149 --> 00:26:10,159
have a bunch of user level services and
 

1425
00:26:10,159 --> 00:26:11,750
have a bunch of user level services and
one of them malfunctions and

1426
00:26:11,750 --> 00:26:11,760
one of them malfunctions and
 

1427
00:26:11,760 --> 00:26:14,710
one of them malfunctions and
devise by xero or d references a wild

1428
00:26:14,710 --> 00:26:14,720
devise by xero or d references a wild
 

1429
00:26:14,720 --> 00:26:15,350
devise by xero or d references a wild
pointer

1430
00:26:15,350 --> 00:26:15,360
pointer
 

1431
00:26:15,360 --> 00:26:17,350
pointer
maybe only that one server will crash

1432
00:26:17,350 --> 00:26:17,360
maybe only that one server will crash
 

1433
00:26:17,360 --> 00:26:18,630
maybe only that one server will crash
and leaving the rest of the operating

1434
00:26:18,630 --> 00:26:18,640
and leaving the rest of the operating
 

1435
00:26:18,640 --> 00:26:19,269
and leaving the rest of the operating
system

1436
00:26:19,269 --> 00:26:19,279
system
 

1437
00:26:19,279 --> 00:26:21,510
system
intact and maybe you can restart it just

1438
00:26:21,510 --> 00:26:21,520
intact and maybe you can restart it just
 

1439
00:26:21,520 --> 00:26:23,430
intact and maybe you can restart it just
that one server so maybe

1440
00:26:23,430 --> 00:26:23,440
that one server so maybe
 

1441
00:26:23,440 --> 00:26:27,430
that one server so maybe
user level moving os functionality

1442
00:26:27,430 --> 00:26:27,440
user level moving os functionality
 

1443
00:26:27,440 --> 00:26:29,029
user level moving os functionality
to user level processors it might lead

1444
00:26:29,029 --> 00:26:29,039
to user level processors it might lead
 

1445
00:26:29,039 --> 00:26:31,750
to user level processors it might lead
to more robustness this is probably

1446
00:26:31,750 --> 00:26:31,760
to more robustness this is probably
 

1447
00:26:31,760 --> 00:26:34,950
to more robustness this is probably
particularly evident for drivers most

1448
00:26:34,950 --> 00:26:34,960
particularly evident for drivers most
 

1449
00:26:34,960 --> 00:26:38,070
particularly evident for drivers most
bugs in the kernel are actually hardware

1450
00:26:38,070 --> 00:26:38,080
bugs in the kernel are actually hardware
 

1451
00:26:38,080 --> 00:26:39,269
bugs in the kernel are actually hardware
device drivers

1452
00:26:39,269 --> 00:26:39,279
device drivers
 

1453
00:26:39,279 --> 00:26:40,549
device drivers
if we can manage to move the device

1454
00:26:40,549 --> 00:26:40,559
if we can manage to move the device
 

1455
00:26:40,559 --> 00:26:42,470
if we can manage to move the device
drivers out of the kernel then we might

1456
00:26:42,470 --> 00:26:42,480
drivers out of the kernel then we might
 

1457
00:26:42,480 --> 00:26:43,750
drivers out of the kernel then we might
have many fewer

1458
00:26:43,750 --> 00:26:43,760
have many fewer
 

1459
00:26:43,760 --> 00:26:46,950
have many fewer
bugs and crashes in the kernel and a

1460
00:26:46,950 --> 00:26:46,960
bugs and crashes in the kernel and a
 

1461
00:26:46,960 --> 00:26:48,390
bugs and crashes in the kernel and a
final advantage that people were

1462
00:26:48,390 --> 00:26:48,400
final advantage that people were
 

1463
00:26:48,400 --> 00:26:50,149
final advantage that people were
thinking about back then is that

1464
00:26:50,149 --> 00:26:50,159
thinking about back then is that
 

1465
00:26:50,159 --> 00:26:52,070
thinking about back then is that
you could emulate or run multiple

1466
00:26:52,070 --> 00:26:52,080
you could emulate or run multiple
 

1467
00:26:52,080 --> 00:26:54,070
you could emulate or run multiple
operating system personalities on top of

1468
00:26:54,070 --> 00:26:54,080
operating system personalities on top of
 

1469
00:26:54,080 --> 00:26:55,110
operating system personalities on top of
a microkernel

1470
00:26:55,110 --> 00:26:55,120
a microkernel
 

1471
00:26:55,120 --> 00:26:56,789
a microkernel
so even though the microkernel does does

1472
00:26:56,789 --> 00:26:56,799
so even though the microkernel does does
 

1473
00:26:56,799 --> 00:26:58,390
so even though the microkernel does does
hardly anything for you directly

1474
00:26:58,390 --> 00:26:58,400
hardly anything for you directly
 

1475
00:26:58,400 --> 00:27:00,070
hardly anything for you directly
you might be able to run a unix server

1476
00:27:00,070 --> 00:27:00,080
you might be able to run a unix server
 

1477
00:27:00,080 --> 00:27:02,070
you might be able to run a unix server
or something on top of it

1478
00:27:02,070 --> 00:27:02,080
or something on top of it
 

1479
00:27:02,080 --> 00:27:05,350
or something on top of it
maybe more than one on the same

1480
00:27:05,350 --> 00:27:05,360
maybe more than one on the same
 

1481
00:27:05,360 --> 00:27:08,710
maybe more than one on the same
machine

1482
00:27:08,710 --> 00:27:08,720

 

1483
00:27:08,720 --> 00:27:10,149

of course that's what today's paper is

1484
00:27:10,149 --> 00:27:10,159
of course that's what today's paper is
 

1485
00:27:10,159 --> 00:27:13,029
of course that's what today's paper is
about running a unix

1486
00:27:13,029 --> 00:27:13,039
about running a unix
 

1487
00:27:13,039 --> 00:27:15,350
about running a unix
running linux as a service on a

1488
00:27:15,350 --> 00:27:15,360
running linux as a service on a
 

1489
00:27:15,360 --> 00:27:16,470
running linux as a service on a
microkernel

1490
00:27:16,470 --> 00:27:16,480
microkernel
 

1491
00:27:16,480 --> 00:27:19,510
microkernel
these were all the set of things that

1492
00:27:19,510 --> 00:27:19,520
these were all the set of things that
 

1493
00:27:19,520 --> 00:27:21,350
these were all the set of things that
people were hoping to be able to

1494
00:27:21,350 --> 00:27:21,360
people were hoping to be able to
 

1495
00:27:21,360 --> 00:27:24,630
people were hoping to be able to
get some traction on by uh looking into

1496
00:27:24,630 --> 00:27:24,640
get some traction on by uh looking into
 

1497
00:27:24,640 --> 00:27:27,269
get some traction on by uh looking into
microkernel signs

1498
00:27:27,269 --> 00:27:27,279
microkernel signs
 

1499
00:27:27,279 --> 00:27:30,549
microkernel signs
of course there's some um sort of

1500
00:27:30,549 --> 00:27:30,559
of course there's some um sort of
 

1501
00:27:30,559 --> 00:27:33,190
of course there's some um sort of
puzzles you have to think through some

1502
00:27:33,190 --> 00:27:33,200
puzzles you have to think through some
 

1503
00:27:33,200 --> 00:27:37,669
puzzles you have to think through some
challenges

1504
00:27:37,669 --> 00:27:37,679

 

1505
00:27:37,679 --> 00:27:40,630

uh one challenge if you want to design

1506
00:27:40,630 --> 00:27:40,640
uh one challenge if you want to design
 

1507
00:27:40,640 --> 00:27:42,149
uh one challenge if you want to design
your own micro kernel is

1508
00:27:42,149 --> 00:27:42,159
your own micro kernel is
 

1509
00:27:42,159 --> 00:27:44,070
your own micro kernel is
actually figuring out you want the api

1510
00:27:44,070 --> 00:27:44,080
actually figuring out you want the api
 

1511
00:27:44,080 --> 00:27:45,830
actually figuring out you want the api
you want the micro kernel system call

1512
00:27:45,830 --> 00:27:45,840
you want the micro kernel system call
 

1513
00:27:45,840 --> 00:27:46,870
you want the micro kernel system call
interface to be as

1514
00:27:46,870 --> 00:27:46,880
interface to be as
 

1515
00:27:46,880 --> 00:27:48,630
interface to be as
simple as possible because the whole

1516
00:27:48,630 --> 00:27:48,640
simple as possible because the whole
 

1517
00:27:48,640 --> 00:27:50,149
simple as possible because the whole
point was to keep it small

1518
00:27:50,149 --> 00:27:50,159
point was to keep it small
 

1519
00:27:50,159 --> 00:27:52,630
point was to keep it small
now what is the actual smallest set of

1520
00:27:52,630 --> 00:27:52,640
now what is the actual smallest set of
 

1521
00:27:52,640 --> 00:27:53,750
now what is the actual smallest set of
useful

1522
00:27:53,750 --> 00:27:53,760
useful
 

1523
00:27:53,760 --> 00:27:56,870
useful
system calls you can get away with um

1524
00:27:56,870 --> 00:27:56,880
system calls you can get away with um
 

1525
00:27:56,880 --> 00:27:59,350
system calls you can get away with um
you know what does it look like so

1526
00:27:59,350 --> 00:27:59,360
you know what does it look like so
 

1527
00:27:59,360 --> 00:27:59,909
you know what does it look like so
that's not

1528
00:27:59,909 --> 00:27:59,919
that's not
 

1529
00:27:59,919 --> 00:28:03,110
that's not
particularly clear so we're looking at

1530
00:28:03,110 --> 00:28:03,120
particularly clear so we're looking at
 

1531
00:28:03,120 --> 00:28:03,750
particularly clear so we're looking at
the minimum

1532
00:28:03,750 --> 00:28:03,760
the minimum
 

1533
00:28:03,760 --> 00:28:07,669
the minimum
system call

1534
00:28:07,669 --> 00:28:07,679

 

1535
00:28:07,679 --> 00:28:12,230

api

1536
00:28:12,230 --> 00:28:12,240

 

1537
00:28:12,240 --> 00:28:14,230

you need these this minimum system call

1538
00:28:14,230 --> 00:28:14,240
you need these this minimum system call
 

1539
00:28:14,240 --> 00:28:16,310
you need these this minimum system call
api it's great if it's simple but you

1540
00:28:16,310 --> 00:28:16,320
api it's great if it's simple but you
 

1541
00:28:16,320 --> 00:28:17,990
api it's great if it's simple but you
actually have to be able to build

1542
00:28:17,990 --> 00:28:18,000
actually have to be able to build
 

1543
00:28:18,000 --> 00:28:20,230
actually have to be able to build
some pretty sophisticated features out

1544
00:28:20,230 --> 00:28:20,240
some pretty sophisticated features out
 

1545
00:28:20,240 --> 00:28:22,950
some pretty sophisticated features out
of your minimum system call api because

1546
00:28:22,950 --> 00:28:22,960
of your minimum system call api because
 

1547
00:28:22,960 --> 00:28:24,470
of your minimum system call api because
even if the kernel doesn't do much you

1548
00:28:24,470 --> 00:28:24,480
even if the kernel doesn't do much you
 

1549
00:28:24,480 --> 00:28:25,830
even if the kernel doesn't do much you
know in the end you got to be able to

1550
00:28:25,830 --> 00:28:25,840
know in the end you got to be able to
 

1551
00:28:25,840 --> 00:28:26,149
know in the end you got to be able to
run

1552
00:28:26,149 --> 00:28:26,159
run
 

1553
00:28:26,159 --> 00:28:28,070
run
programs you got to maybe you're trying

1554
00:28:28,070 --> 00:28:28,080
programs you got to maybe you're trying
 

1555
00:28:28,080 --> 00:28:30,389
programs you got to maybe you're trying
to run unix on top of a micro chrome you

1556
00:28:30,389 --> 00:28:30,399
to run unix on top of a micro chrome you
 

1557
00:28:30,399 --> 00:28:31,909
to run unix on top of a micro chrome you
got to be able to do things like fork

1558
00:28:31,909 --> 00:28:31,919
got to be able to do things like fork
 

1559
00:28:31,919 --> 00:28:33,990
got to be able to do things like fork
and map

1560
00:28:33,990 --> 00:28:34,000
and map
 

1561
00:28:34,000 --> 00:28:37,190
and map
so as part of the system call interface

1562
00:28:37,190 --> 00:28:37,200
so as part of the system call interface
 

1563
00:28:37,200 --> 00:28:40,310
so as part of the system call interface
simple low-level system call interface

1564
00:28:40,310 --> 00:28:40,320
simple low-level system call interface
 

1565
00:28:40,320 --> 00:28:45,750
simple low-level system call interface
it has to be powerful enough to support

1566
00:28:45,750 --> 00:28:45,760

 

1567
00:28:45,760 --> 00:28:47,590

all the stuff people need to do like

1568
00:28:47,590 --> 00:28:47,600
all the stuff people need to do like
 

1569
00:28:47,600 --> 00:28:49,350
all the stuff people need to do like
exec

1570
00:28:49,350 --> 00:28:49,360
exec
 

1571
00:28:49,360 --> 00:28:52,470
exec
and fork and heck maybe even

1572
00:28:52,470 --> 00:28:52,480
and fork and heck maybe even
 

1573
00:28:52,480 --> 00:28:55,990
and fork and heck maybe even
copy on right fork or memory mapping

1574
00:28:55,990 --> 00:28:56,000
copy on right fork or memory mapping
 

1575
00:28:56,000 --> 00:28:58,470
copy on right fork or memory mapping
on disk files but all in a kernel that

1576
00:28:58,470 --> 00:28:58,480
on disk files but all in a kernel that
 

1577
00:28:58,480 --> 00:29:00,710
on disk files but all in a kernel that
has no idea about files or a file system

1578
00:29:00,710 --> 00:29:00,720
has no idea about files or a file system
 

1579
00:29:00,720 --> 00:29:01,190
has no idea about files or a file system
right

1580
00:29:01,190 --> 00:29:01,200
right
 

1581
00:29:01,200 --> 00:29:02,870
right
it needs to support exec but with a

1582
00:29:02,870 --> 00:29:02,880
it needs to support exec but with a
 

1583
00:29:02,880 --> 00:29:06,470
it needs to support exec but with a
kernel that knows nothing about files

1584
00:29:06,470 --> 00:29:06,480
kernel that knows nothing about files
 

1585
00:29:06,480 --> 00:29:11,029
kernel that knows nothing about files
um we need the rest of the

1586
00:29:11,029 --> 00:29:11,039

 

1587
00:29:11,039 --> 00:29:12,789

of the operating system somehow you know

1588
00:29:12,789 --> 00:29:12,799
of the operating system somehow you know
 

1589
00:29:12,799 --> 00:29:15,029
of the operating system somehow you know
sure the micro kernel may be

1590
00:29:15,029 --> 00:29:15,039
sure the micro kernel may be
 

1591
00:29:15,039 --> 00:29:17,110
sure the micro kernel may be
very simple but you know now we're sort

1592
00:29:17,110 --> 00:29:17,120
very simple but you know now we're sort
 

1593
00:29:17,120 --> 00:29:19,590
very simple but you know now we're sort
of requiring the development of

1594
00:29:19,590 --> 00:29:19,600
of requiring the development of
 

1595
00:29:19,600 --> 00:29:22,149
of requiring the development of
some set of user level servers that

1596
00:29:22,149 --> 00:29:22,159
some set of user level servers that
 

1597
00:29:22,159 --> 00:29:23,350
some set of user level servers that
implement the rest of the operating

1598
00:29:23,350 --> 00:29:23,360
implement the rest of the operating
 

1599
00:29:23,360 --> 00:29:24,230
implement the rest of the operating
system

1600
00:29:24,230 --> 00:29:24,240
system
 

1601
00:29:24,240 --> 00:29:26,310
system
so we need to that has to get done at

1602
00:29:26,310 --> 00:29:26,320
so we need to that has to get done at
 

1603
00:29:26,320 --> 00:29:27,750
so we need to that has to get done at
least and may require some

1604
00:29:27,750 --> 00:29:27,760
least and may require some
 

1605
00:29:27,760 --> 00:29:30,950
least and may require some
uh just solving design puzzles um

1606
00:29:30,950 --> 00:29:30,960
uh just solving design puzzles um
 

1607
00:29:30,960 --> 00:29:33,269
uh just solving design puzzles um
and finally the you know this

1608
00:29:33,269 --> 00:29:33,279
and finally the you know this
 

1609
00:29:33,279 --> 00:29:35,190
and finally the you know this
arrangement requires a lot of chit chat

1610
00:29:35,190 --> 00:29:35,200
arrangement requires a lot of chit chat
 

1611
00:29:35,200 --> 00:29:35,830
arrangement requires a lot of chit chat
over

1612
00:29:35,830 --> 00:29:35,840
over
 

1613
00:29:35,840 --> 00:29:39,269
over
interprocessor communication over ipc um

1614
00:29:39,269 --> 00:29:39,279
interprocessor communication over ipc um
 

1615
00:29:39,279 --> 00:29:41,750
interprocessor communication over ipc um
so there's going to be great pressure to

1616
00:29:41,750 --> 00:29:41,760
so there's going to be great pressure to
 

1617
00:29:41,760 --> 00:29:43,510
so there's going to be great pressure to
make the

1618
00:29:43,510 --> 00:29:43,520
make the
 

1619
00:29:43,520 --> 00:29:47,269
make the
you know ipc very fast

1620
00:29:47,269 --> 00:29:47,279
you know ipc very fast
 

1621
00:29:47,279 --> 00:29:50,870
you know ipc very fast
so we're going to wonder whether ipc can

1622
00:29:50,870 --> 00:29:50,880
so we're going to wonder whether ipc can
 

1623
00:29:50,880 --> 00:29:54,070
so we're going to wonder whether ipc can
be made fast enough uh

1624
00:29:54,070 --> 00:29:54,080
be made fast enough uh
 

1625
00:29:54,080 --> 00:29:57,669
be made fast enough uh
to keep microkernels competitive

1626
00:29:57,669 --> 00:29:57,679

 

1627
00:29:57,679 --> 00:30:00,149

all right um and just in general

1628
00:30:00,149 --> 00:30:00,159
all right um and just in general
 

1629
00:30:00,159 --> 00:30:01,190
all right um and just in general
actually the

1630
00:30:01,190 --> 00:30:01,200
actually the
 

1631
00:30:01,200 --> 00:30:04,710
actually the
not just ipc speed but in general the

1632
00:30:04,710 --> 00:30:04,720
not just ipc speed but in general the
 

1633
00:30:04,720 --> 00:30:06,149
not just ipc speed but in general the
um there's a lot of reason to believe

1634
00:30:06,149 --> 00:30:06,159
um there's a lot of reason to believe
 

1635
00:30:06,159 --> 00:30:08,070
um there's a lot of reason to believe
that monolithic kernels derive

1636
00:30:08,070 --> 00:30:08,080
that monolithic kernels derive
 

1637
00:30:08,080 --> 00:30:10,149
that monolithic kernels derive
some performance out of the fact that

1638
00:30:10,149 --> 00:30:10,159
some performance out of the fact that
 

1639
00:30:10,159 --> 00:30:11,669
some performance out of the fact that
they're integrated that the file system

1640
00:30:11,669 --> 00:30:11,679
they're integrated that the file system
 

1641
00:30:11,679 --> 00:30:12,470
they're integrated that the file system
code can

1642
00:30:12,470 --> 00:30:12,480
code can
 

1643
00:30:12,480 --> 00:30:14,070
code can
talk to the virtual memory code in the

1644
00:30:14,070 --> 00:30:14,080
talk to the virtual memory code in the
 

1645
00:30:14,080 --> 00:30:15,669
talk to the virtual memory code in the
memory allocation code and

1646
00:30:15,669 --> 00:30:15,679
memory allocation code and
 

1647
00:30:15,679 --> 00:30:17,590
memory allocation code and
it's all sort of one big happy giant

1648
00:30:17,590 --> 00:30:17,600
it's all sort of one big happy giant
 

1649
00:30:17,600 --> 00:30:19,590
it's all sort of one big happy giant
program

1650
00:30:19,590 --> 00:30:19,600
program
 

1651
00:30:19,600 --> 00:30:21,909
program
and if you require all those things to

1652
00:30:21,909 --> 00:30:21,919
and if you require all those things to
 

1653
00:30:21,919 --> 00:30:23,669
and if you require all those things to
be split out into separate servers or

1654
00:30:23,669 --> 00:30:23,679
be split out into separate servers or
 

1655
00:30:23,679 --> 00:30:25,110
be split out into separate servers or
maybe split between a kernel

1656
00:30:25,110 --> 00:30:25,120
maybe split between a kernel
 

1657
00:30:25,120 --> 00:30:27,269
maybe split between a kernel
and user level there may be fewer

1658
00:30:27,269 --> 00:30:27,279
and user level there may be fewer
 

1659
00:30:27,279 --> 00:30:29,669
and user level there may be fewer
opportunities for optimization by way of

1660
00:30:29,669 --> 00:30:29,679
opportunities for optimization by way of
 

1661
00:30:29,679 --> 00:30:32,789
opportunities for optimization by way of
integration and that may or may not

1662
00:30:32,789 --> 00:30:32,799
integration and that may or may not
 

1663
00:30:32,799 --> 00:30:37,190
integration and that may or may not
end up hurting performance

1664
00:30:37,190 --> 00:30:37,200
end up hurting performance
 

1665
00:30:37,200 --> 00:30:40,710
end up hurting performance
all right um so these are sort of

1666
00:30:40,710 --> 00:30:40,720
all right um so these are sort of
 

1667
00:30:40,720 --> 00:30:41,510
all right um so these are sort of
cross-cutting

1668
00:30:41,510 --> 00:30:41,520
cross-cutting
 

1669
00:30:41,520 --> 00:30:44,789
cross-cutting
and hoped-for wins and

1670
00:30:44,789 --> 00:30:44,799
and hoped-for wins and
 

1671
00:30:44,799 --> 00:30:47,750
and hoped-for wins and
sort of challenges that all the many

1672
00:30:47,750 --> 00:30:47,760
sort of challenges that all the many
 

1673
00:30:47,760 --> 00:30:52,950
sort of challenges that all the many
micro-kernel projects faced

1674
00:30:52,950 --> 00:30:52,960

 

1675
00:30:52,960 --> 00:30:55,909

because of today's paper i'm going to

1676
00:30:55,909 --> 00:30:55,919
because of today's paper i'm going to
 

1677
00:30:55,919 --> 00:30:56,870
because of today's paper i'm going to
tell you a bunch about

1678
00:30:56,870 --> 00:30:56,880
tell you a bunch about
 

1679
00:30:56,880 --> 00:31:00,310
tell you a bunch about
l4 specifically which is

1680
00:31:00,310 --> 00:31:00,320
l4 specifically which is
 

1681
00:31:00,320 --> 00:31:03,590
l4 specifically which is
the microkernel that the authors of

1682
00:31:03,590 --> 00:31:03,600
the microkernel that the authors of
 

1683
00:31:03,600 --> 00:31:06,070
the microkernel that the authors of
today's paper developed and used

1684
00:31:06,070 --> 00:31:06,080
today's paper developed and used
 

1685
00:31:06,080 --> 00:31:09,590
today's paper developed and used
um l4 is not

1686
00:31:09,590 --> 00:31:09,600
um l4 is not
 

1687
00:31:09,600 --> 00:31:11,990
um l4 is not
um it's certainly not the earliest

1688
00:31:11,990 --> 00:31:12,000
um it's certainly not the earliest
 

1689
00:31:12,000 --> 00:31:13,750
um it's certainly not the earliest
microkernel ever made but it's

1690
00:31:13,750 --> 00:31:13,760
microkernel ever made but it's
 

1691
00:31:13,760 --> 00:31:15,990
microkernel ever made but it's
one of the sort of early microkernels

1692
00:31:15,990 --> 00:31:16,000
one of the sort of early microkernels
 

1693
00:31:16,000 --> 00:31:17,990
one of the sort of early microkernels
that came out of all the work in this

1694
00:31:17,990 --> 00:31:18,000
that came out of all the work in this
 

1695
00:31:18,000 --> 00:31:20,950
that came out of all the work in this
uh starting in the 1980s and it's fairly

1696
00:31:20,950 --> 00:31:20,960
uh starting in the 1980s and it's fairly
 

1697
00:31:20,960 --> 00:31:22,389
uh starting in the 1980s and it's fairly
representative as far as

1698
00:31:22,389 --> 00:31:22,399
representative as far as
 

1699
00:31:22,399 --> 00:31:26,549
representative as far as
uh how it works there's been

1700
00:31:26,549 --> 00:31:26,559
uh how it works there's been
 

1701
00:31:26,559 --> 00:31:28,630
uh how it works there's been
it's it's a bit of a moving target it

1702
00:31:28,630 --> 00:31:28,640
it's it's a bit of a moving target it
 

1703
00:31:28,640 --> 00:31:29,590
it's it's a bit of a moving target it
was the

1704
00:31:29,590 --> 00:31:29,600
was the
 

1705
00:31:29,600 --> 00:31:31,190
was the
subject of intense development and

1706
00:31:31,190 --> 00:31:31,200
subject of intense development and
 

1707
00:31:31,200 --> 00:31:33,190
subject of intense development and
evolution for many years and it's still

1708
00:31:33,190 --> 00:31:33,200
evolution for many years and it's still
 

1709
00:31:33,200 --> 00:31:34,549
evolution for many years and it's still
going strong

1710
00:31:34,549 --> 00:31:34,559
going strong
 

1711
00:31:34,559 --> 00:31:36,070
going strong
if you look at up on wikipedia you'll

1712
00:31:36,070 --> 00:31:36,080
if you look at up on wikipedia you'll
 

1713
00:31:36,080 --> 00:31:38,470
if you look at up on wikipedia you'll
see that there's maybe 15 or 20

1714
00:31:38,470 --> 00:31:38,480
see that there's maybe 15 or 20
 

1715
00:31:38,480 --> 00:31:40,070
see that there's maybe 15 or 20
different variants of l4 that have kind

1716
00:31:40,070 --> 00:31:40,080
different variants of l4 that have kind
 

1717
00:31:40,080 --> 00:31:42,870
different variants of l4 that have kind
of come and gone and some are still here

1718
00:31:42,870 --> 00:31:42,880
of come and gone and some are still here
 

1719
00:31:42,880 --> 00:31:46,149
of come and gone and some are still here
starting i think in the late 1980s and

1720
00:31:46,149 --> 00:31:46,159
starting i think in the late 1980s and
 

1721
00:31:46,159 --> 00:31:48,470
starting i think in the late 1980s and
i know what i'm going to try to explain

1722
00:31:48,470 --> 00:31:48,480
i know what i'm going to try to explain
 

1723
00:31:48,480 --> 00:31:50,549
i know what i'm going to try to explain
to you is my understanding of how l4

1724
00:31:50,549 --> 00:31:50,559
to you is my understanding of how l4
 

1725
00:31:50,559 --> 00:31:51,190
to you is my understanding of how l4
worked

1726
00:31:51,190 --> 00:31:51,200
worked
 

1727
00:31:51,200 --> 00:31:54,230
worked
at about the time that today's paper

1728
00:31:54,230 --> 00:31:54,240
at about the time that today's paper
 

1729
00:31:54,240 --> 00:31:58,950
at about the time that today's paper
came out

1730
00:31:58,950 --> 00:31:58,960

 

1731
00:31:58,960 --> 00:32:02,389

all right so um

1732
00:32:02,389 --> 00:32:02,399
all right so um
 

1733
00:32:02,399 --> 00:32:05,830
all right so um
just at a a it's a high level um

1734
00:32:05,830 --> 00:32:05,840
just at a a it's a high level um
 

1735
00:32:05,840 --> 00:32:08,789
just at a a it's a high level um
the l4 was certainly micro in the sense

1736
00:32:08,789 --> 00:32:08,799
the l4 was certainly micro in the sense
 

1737
00:32:08,799 --> 00:32:10,389
the l4 was certainly micro in the sense
that it was actually

1738
00:32:10,389 --> 00:32:10,399
that it was actually
 

1739
00:32:10,399 --> 00:32:13,990
that it was actually
is a a small kernel it has only seven

1740
00:32:13,990 --> 00:32:14,000
is a a small kernel it has only seven
 

1741
00:32:14,000 --> 00:32:16,310
is a a small kernel it has only seven
system calls some of them are a little

1742
00:32:16,310 --> 00:32:16,320
system calls some of them are a little
 

1743
00:32:16,320 --> 00:32:18,070
system calls some of them are a little
bit complex but still it only has seven

1744
00:32:18,070 --> 00:32:18,080
bit complex but still it only has seven
 

1745
00:32:18,080 --> 00:32:19,029
bit complex but still it only has seven
system calls

1746
00:32:19,029 --> 00:32:19,039
system calls
 

1747
00:32:19,039 --> 00:32:20,630
system calls
whereas today's linux the last time i

1748
00:32:20,630 --> 00:32:20,640
whereas today's linux the last time i
 

1749
00:32:20,640 --> 00:32:23,750
whereas today's linux the last time i
counted had in the mid 300s

1750
00:32:23,750 --> 00:32:23,760
counted had in the mid 300s
 

1751
00:32:23,760 --> 00:32:25,669
counted had in the mid 300s
and even xv6 which is an extremely

1752
00:32:25,669 --> 00:32:25,679
and even xv6 which is an extremely
 

1753
00:32:25,679 --> 00:32:27,669
and even xv6 which is an extremely
simple kernel even xc6 has 21

1754
00:32:27,669 --> 00:32:27,679
simple kernel even xc6 has 21
 

1755
00:32:27,679 --> 00:32:33,350
simple kernel even xc6 has 21
system calls so l4

1756
00:32:33,350 --> 00:32:33,360

 

1757
00:32:33,360 --> 00:32:36,070

is only 7. so by that metric it's simple

1758
00:32:36,070 --> 00:32:36,080
is only 7. so by that metric it's simple
 

1759
00:32:36,080 --> 00:32:38,389
is only 7. so by that metric it's simple
it's also not very big

1760
00:32:38,389 --> 00:32:38,399
it's also not very big
 

1761
00:32:38,399 --> 00:32:41,269
it's also not very big
i think as of the time this paper was

1762
00:32:41,269 --> 00:32:41,279
i think as of the time this paper was
 

1763
00:32:41,279 --> 00:32:42,549
i think as of the time this paper was
written at about

1764
00:32:42,549 --> 00:32:42,559
written at about
 

1765
00:32:42,559 --> 00:32:45,590
written at about
13 000 lines of code um

1766
00:32:45,590 --> 00:32:45,600
13 000 lines of code um
 

1767
00:32:45,600 --> 00:32:47,750
13 000 lines of code um
which is not too much uh xv6 is smaller

1768
00:32:47,750 --> 00:32:47,760
which is not too much uh xv6 is smaller
 

1769
00:32:47,760 --> 00:32:49,750
which is not too much uh xv6 is smaller
than that um

1770
00:32:49,750 --> 00:32:49,760
than that um
 

1771
00:32:49,760 --> 00:32:51,430
than that um
i think xv6 is maybe six or seven

1772
00:32:51,430 --> 00:32:51,440
i think xv6 is maybe six or seven
 

1773
00:32:51,440 --> 00:32:52,950
i think xv6 is maybe six or seven
thousand lines of code in the kernel

1774
00:32:52,950 --> 00:32:52,960
thousand lines of code in the kernel
 

1775
00:32:52,960 --> 00:32:55,029
thousand lines of code in the kernel
but still xp6 is very simple as kernels

1776
00:32:55,029 --> 00:32:55,039
but still xp6 is very simple as kernels
 

1777
00:32:55,039 --> 00:32:56,870
but still xp6 is very simple as kernels
go it's a l4 not much

1778
00:32:56,870 --> 00:32:56,880
go it's a l4 not much
 

1779
00:32:56,880 --> 00:32:58,310
go it's a l4 not much
more complex than that and this is you

1780
00:32:58,310 --> 00:32:58,320
more complex than that and this is you
 

1781
00:32:58,320 --> 00:32:59,990
more complex than that and this is you
know a tenth or

1782
00:32:59,990 --> 00:33:00,000
know a tenth or
 

1783
00:33:00,000 --> 00:33:03,110
know a tenth or
a 20th or a 30th as big as uh as linux

1784
00:33:03,110 --> 00:33:03,120
a 20th or a 30th as big as uh as linux
 

1785
00:33:03,120 --> 00:33:03,509
a 20th or a 30th as big as uh as linux
is

1786
00:33:03,509 --> 00:33:03,519
is
 

1787
00:33:03,519 --> 00:33:07,590
is
this is pretty small it had only a few

1788
00:33:07,590 --> 00:33:07,600
this is pretty small it had only a few
 

1789
00:33:07,600 --> 00:33:10,950
this is pretty small it had only a few
basic abstractions

1790
00:33:10,950 --> 00:33:10,960

 

1791
00:33:10,960 --> 00:33:15,110

it had a notion of

1792
00:33:15,110 --> 00:33:15,120
it had a notion of
 

1793
00:33:15,120 --> 00:33:20,389
it had a notion of
what they called tasks or address spaces

1794
00:33:20,389 --> 00:33:20,399
what they called tasks or address spaces
 

1795
00:33:20,399 --> 00:33:23,509
what they called tasks or address spaces
um and these more or less correspond to

1796
00:33:23,509 --> 00:33:23,519
um and these more or less correspond to
 

1797
00:33:23,519 --> 00:33:25,669
um and these more or less correspond to
what we would call a process in unix

1798
00:33:25,669 --> 00:33:25,679
what we would call a process in unix
 

1799
00:33:25,679 --> 00:33:27,190
what we would call a process in unix
it's a

1800
00:33:27,190 --> 00:33:27,200
it's a
 

1801
00:33:27,200 --> 00:33:29,509
it's a
bunch of memories um maps starting at

1802
00:33:29,509 --> 00:33:29,519
bunch of memories um maps starting at
 

1803
00:33:29,519 --> 00:33:31,190
bunch of memories um maps starting at
zero and

1804
00:33:31,190 --> 00:33:31,200
zero and
 

1805
00:33:31,200 --> 00:33:34,549
zero and
um and you're able to execute in here

1806
00:33:34,549 --> 00:33:34,559
um and you're able to execute in here
 

1807
00:33:34,559 --> 00:33:36,950
um and you're able to execute in here
uh just like in a process one difference

1808
00:33:36,950 --> 00:33:36,960
uh just like in a process one difference
 

1809
00:33:36,960 --> 00:33:37,990
uh just like in a process one difference
from

1810
00:33:37,990 --> 00:33:38,000
from
 

1811
00:33:38,000 --> 00:33:40,549
from
xv6 is that there can be multiple

1812
00:33:40,549 --> 00:33:40,559
xv6 is that there can be multiple
 

1813
00:33:40,559 --> 00:33:42,710
xv6 is that there can be multiple
threads

1814
00:33:42,710 --> 00:33:42,720
threads
 

1815
00:33:42,720 --> 00:33:48,549
threads
per task and l4 was in charge of

1816
00:33:48,549 --> 00:33:48,559
per task and l4 was in charge of
 

1817
00:33:48,559 --> 00:33:50,230
per task and l4 was in charge of
scheduling the multiple threads of

1818
00:33:50,230 --> 00:33:50,240
scheduling the multiple threads of
 

1819
00:33:50,240 --> 00:33:54,389
scheduling the multiple threads of
execution within each task

1820
00:33:54,389 --> 00:33:54,399

 

1821
00:33:54,399 --> 00:33:56,549

and part of the reason for this is just

1822
00:33:56,549 --> 00:33:56,559
and part of the reason for this is just
 

1823
00:33:56,559 --> 00:33:57,909
and part of the reason for this is just
that it's very convenient to have

1824
00:33:57,909 --> 00:33:57,919
that it's very convenient to have
 

1825
00:33:57,919 --> 00:33:59,830
that it's very convenient to have
threads as a programming structuring

1826
00:33:59,830 --> 00:33:59,840
threads as a programming structuring
 

1827
00:33:59,840 --> 00:34:01,750
threads as a programming structuring
program structuring tool

1828
00:34:01,750 --> 00:34:01,760
program structuring tool
 

1829
00:34:01,760 --> 00:34:04,789
program structuring tool
and it was also

1830
00:34:04,789 --> 00:34:04,799

 

1831
00:34:04,799 --> 00:34:06,310

i don't know if they actually supported

1832
00:34:06,310 --> 00:34:06,320
i don't know if they actually supported
 

1833
00:34:06,320 --> 00:34:08,470
i don't know if they actually supported
multi-core or multi-processor machines

1834
00:34:08,470 --> 00:34:08,480
multi-core or multi-processor machines
 

1835
00:34:08,480 --> 00:34:10,310
multi-core or multi-processor machines
at the time the paper was written but it

1836
00:34:10,310 --> 00:34:10,320
at the time the paper was written but it
 

1837
00:34:10,320 --> 00:34:12,230
at the time the paper was written but it
um they may well have

1838
00:34:12,230 --> 00:34:12,240
um they may well have
 

1839
00:34:12,240 --> 00:34:14,470
um they may well have
and uh threads are of course just what

1840
00:34:14,470 --> 00:34:14,480
and uh threads are of course just what
 

1841
00:34:14,480 --> 00:34:16,149
and uh threads are of course just what
you need to be able to harness

1842
00:34:16,149 --> 00:34:16,159
you need to be able to harness
 

1843
00:34:16,159 --> 00:34:18,389
you need to be able to harness
multiple cores you know executing in the

1844
00:34:18,389 --> 00:34:18,399
multiple cores you know executing in the
 

1845
00:34:18,399 --> 00:34:19,270
multiple cores you know executing in the
same program

1846
00:34:19,270 --> 00:34:19,280
same program
 

1847
00:34:19,280 --> 00:34:20,710
same program
so whether there were threads supported

1848
00:34:20,710 --> 00:34:20,720
so whether there were threads supported
 

1849
00:34:20,720 --> 00:34:22,389
so whether there were threads supported
by it by

1850
00:34:22,389 --> 00:34:22,399
by it by
 

1851
00:34:22,399 --> 00:34:26,629
by it by
the l4 kernel

1852
00:34:26,629 --> 00:34:26,639

 

1853
00:34:26,639 --> 00:34:29,669

so so l source l4 supported tasks

1854
00:34:29,669 --> 00:34:29,679
so so l source l4 supported tasks
 

1855
00:34:29,679 --> 00:34:32,790
so so l source l4 supported tasks
it knew about tasks i knew about threads

1856
00:34:32,790 --> 00:34:32,800
it knew about tasks i knew about threads
 

1857
00:34:32,800 --> 00:34:36,149
it knew about tasks i knew about threads
and it also knew about address spaces in

1858
00:34:36,149 --> 00:34:36,159
and it also knew about address spaces in
 

1859
00:34:36,159 --> 00:34:37,750
and it also knew about address spaces in
the sense that you could

1860
00:34:37,750 --> 00:34:37,760
the sense that you could
 

1861
00:34:37,760 --> 00:34:39,909
the sense that you could
you could ask tell l4 look here's you

1862
00:34:39,909 --> 00:34:39,919
you could ask tell l4 look here's you
 

1863
00:34:39,919 --> 00:34:41,270
you could ask tell l4 look here's you
know how i want pages mapped in my

1864
00:34:41,270 --> 00:34:41,280
know how i want pages mapped in my
 

1865
00:34:41,280 --> 00:34:43,109
know how i want pages mapped in my
address space

1866
00:34:43,109 --> 00:34:43,119
address space
 

1867
00:34:43,119 --> 00:34:46,230
address space
um and the other main thing that l4 knew

1868
00:34:46,230 --> 00:34:46,240
um and the other main thing that l4 knew
 

1869
00:34:46,240 --> 00:34:47,430
um and the other main thing that l4 knew
about

1870
00:34:47,430 --> 00:34:47,440
about
 

1871
00:34:47,440 --> 00:34:50,470
about
uh process communication so

1872
00:34:50,470 --> 00:34:50,480
uh process communication so
 

1873
00:34:50,480 --> 00:34:53,430
uh process communication so
that was every thread had an identifier

1874
00:34:53,430 --> 00:34:53,440
that was every thread had an identifier
 

1875
00:34:53,440 --> 00:34:54,869
that was every thread had an identifier
and one thread could say look i want to

1876
00:34:54,869 --> 00:34:54,879
and one thread could say look i want to
 

1877
00:34:54,879 --> 00:34:56,389
and one thread could say look i want to
send a message

1878
00:34:56,389 --> 00:34:56,399
send a message
 

1879
00:34:56,399 --> 00:34:59,589
send a message
just some bytes to another thread and

1880
00:34:59,589 --> 00:34:59,599
just some bytes to another thread and
 

1881
00:34:59,599 --> 00:35:03,430
just some bytes to another thread and
here's this identifier please

1882
00:35:03,430 --> 00:35:03,440
here's this identifier please
 

1883
00:35:03,440 --> 00:35:05,030
here's this identifier please
please send a message to that other

1884
00:35:05,030 --> 00:35:05,040
please send a message to that other
 

1885
00:35:05,040 --> 00:35:07,750
please send a message to that other
thread

1886
00:35:07,750 --> 00:35:07,760

 

1887
00:35:07,760 --> 00:35:12,230

so these are really the only

1888
00:35:12,230 --> 00:35:12,240

 

1889
00:35:12,240 --> 00:35:15,430

task threads address spaces and ipc were

1890
00:35:15,430 --> 00:35:15,440
task threads address spaces and ipc were
 

1891
00:35:15,440 --> 00:35:16,950
task threads address spaces and ipc were
really the only abstractions

1892
00:35:16,950 --> 00:35:16,960
really the only abstractions
 

1893
00:35:16,960 --> 00:35:20,470
really the only abstractions
the system calls i don't know if i can

1894
00:35:20,470 --> 00:35:20,480
the system calls i don't know if i can
 

1895
00:35:20,480 --> 00:35:26,069
the system calls i don't know if i can
be able to list them all but

1896
00:35:26,069 --> 00:35:26,079

 

1897
00:35:26,079 --> 00:35:30,230

the system calls were there was a thread

1898
00:35:30,230 --> 00:35:30,240
the system calls were there was a thread
 

1899
00:35:30,240 --> 00:35:34,870
the system calls were there was a thread
create system call which also

1900
00:35:34,870 --> 00:35:34,880
create system call which also
 

1901
00:35:34,880 --> 00:35:37,910
create system call which also
you gave it a address space id and a ask

1902
00:35:37,910 --> 00:35:37,920
you gave it a address space id and a ask
 

1903
00:35:37,920 --> 00:35:39,510
you gave it a address space id and a ask
to create a new thread and

1904
00:35:39,510 --> 00:35:39,520
to create a new thread and
 

1905
00:35:39,520 --> 00:35:40,950
to create a new thread and
if the address space or task didn't

1906
00:35:40,950 --> 00:35:40,960
if the address space or task didn't
 

1907
00:35:40,960 --> 00:35:42,710
if the address space or task didn't
already exist it would create a new task

1908
00:35:42,710 --> 00:35:42,720
already exist it would create a new task
 

1909
00:35:42,720 --> 00:35:43,190
already exist it would create a new task
for you

1910
00:35:43,190 --> 00:35:43,200
for you
 

1911
00:35:43,200 --> 00:35:45,190
for you
so to sort of combine thread and task

1912
00:35:45,190 --> 00:35:45,200
so to sort of combine thread and task
 

1913
00:35:45,200 --> 00:35:48,150
so to sort of combine thread and task
creation

1914
00:35:48,150 --> 00:35:48,160

 

1915
00:35:48,160 --> 00:35:53,190

there's send and receive

1916
00:35:53,190 --> 00:35:53,200
there's send and receive
 

1917
00:35:53,200 --> 00:35:56,150
there's send and receive
various flavors of send and receive ipc

1918
00:35:56,150 --> 00:35:56,160
various flavors of send and receive ipc
 

1919
00:35:56,160 --> 00:35:59,750
various flavors of send and receive ipc
system calls um

1920
00:35:59,750 --> 00:35:59,760
system calls um
 

1921
00:35:59,760 --> 00:36:03,349
system calls um
there's a way to map pages into your or

1922
00:36:03,349 --> 00:36:03,359
there's a way to map pages into your or
 

1923
00:36:03,359 --> 00:36:07,829
there's a way to map pages into your or
other address spaces so um

1924
00:36:07,829 --> 00:36:07,839
other address spaces so um
 

1925
00:36:07,839 --> 00:36:09,910
other address spaces so um
you could ask the l4 to change the way

1926
00:36:09,910 --> 00:36:09,920
you could ask the l4 to change the way
 

1927
00:36:09,920 --> 00:36:11,349
you could ask the l4 to change the way
your address space was set up the way

1928
00:36:11,349 --> 00:36:11,359
your address space was set up the way
 

1929
00:36:11,359 --> 00:36:12,069
your address space was set up the way
your

1930
00:36:12,069 --> 00:36:12,079
your
 

1931
00:36:12,079 --> 00:36:13,750
your
page table mappings were set up but you

1932
00:36:13,750 --> 00:36:13,760
page table mappings were set up but you
 

1933
00:36:13,760 --> 00:36:16,790
page table mappings were set up but you
could also ask lford if you had

1934
00:36:16,790 --> 00:36:16,800
could also ask lford if you had
 

1935
00:36:16,800 --> 00:36:18,069
could also ask lford if you had
the right permissions to go and change

1936
00:36:18,069 --> 00:36:18,079
the right permissions to go and change
 

1937
00:36:18,079 --> 00:36:20,069
the right permissions to go and change
the way another tasks

1938
00:36:20,069 --> 00:36:20,079
the way another tasks
 

1939
00:36:20,079 --> 00:36:23,430
the way another tasks
address space was set up so

1940
00:36:23,430 --> 00:36:23,440
address space was set up so
 

1941
00:36:23,440 --> 00:36:27,430
address space was set up so
and um

1942
00:36:27,430 --> 00:36:27,440
and um
 

1943
00:36:27,440 --> 00:36:28,870
and um
this was actually done through the ipc

1944
00:36:28,870 --> 00:36:28,880
this was actually done through the ipc
 

1945
00:36:28,880 --> 00:36:30,710
this was actually done through the ipc
with spent through the ipc interface you

1946
00:36:30,710 --> 00:36:30,720
with spent through the ipc interface you
 

1947
00:36:30,720 --> 00:36:33,109
with spent through the ipc interface you
would send a kind of special ipc message

1948
00:36:33,109 --> 00:36:33,119
would send a kind of special ipc message
 

1949
00:36:33,119 --> 00:36:35,349
would send a kind of special ipc message
that the kernel knew about to the target

1950
00:36:35,349 --> 00:36:35,359
that the kernel knew about to the target
 

1951
00:36:35,359 --> 00:36:37,670
that the kernel knew about to the target
thread and the kernel would

1952
00:36:37,670 --> 00:36:37,680
thread and the kernel would
 

1953
00:36:37,680 --> 00:36:41,349
thread and the kernel would
modify the target threads address space

1954
00:36:41,349 --> 00:36:41,359
modify the target threads address space
 

1955
00:36:41,359 --> 00:36:42,710
modify the target threads address space
and this is if you were creating a new

1956
00:36:42,710 --> 00:36:42,720
and this is if you were creating a new
 

1957
00:36:42,720 --> 00:36:44,069
and this is if you were creating a new
thread this is actually new threads are

1958
00:36:44,069 --> 00:36:44,079
thread this is actually new threads are
 

1959
00:36:44,079 --> 00:36:46,630
thread this is actually new threads are
created with no memory at all

1960
00:36:46,630 --> 00:36:46,640
created with no memory at all
 

1961
00:36:46,640 --> 00:36:47,750
created with no memory at all
so if you want to create a thread you

1962
00:36:47,750 --> 00:36:47,760
so if you want to create a thread you
 

1963
00:36:47,760 --> 00:36:49,670
so if you want to create a thread you
first call the thread create system call

1964
00:36:49,670 --> 00:36:49,680
first call the thread create system call
 

1965
00:36:49,680 --> 00:36:51,829
first call the thread create system call
to create the new thread and a task an

1966
00:36:51,829 --> 00:36:51,839
to create the new thread and a task an
 

1967
00:36:51,839 --> 00:36:52,950
to create the new thread and a task an
address space

1968
00:36:52,950 --> 00:36:52,960
address space
 

1969
00:36:52,960 --> 00:36:55,190
address space
and then you send it you make one of

1970
00:36:55,190 --> 00:36:55,200
and then you send it you make one of
 

1971
00:36:55,200 --> 00:36:57,109
and then you send it you make one of
these magic ipc's to send it some of

1972
00:36:57,109 --> 00:36:57,119
these magic ipc's to send it some of
 

1973
00:36:57,119 --> 00:36:58,710
these magic ipc's to send it some of
your own memory

1974
00:36:58,710 --> 00:36:58,720
your own memory
 

1975
00:36:58,720 --> 00:37:00,150
your own memory
to map some of your own memory that

1976
00:37:00,150 --> 00:37:00,160
to map some of your own memory that
 

1977
00:37:00,160 --> 00:37:01,750
to map some of your own memory that
you've prepared with instructions or

1978
00:37:01,750 --> 00:37:01,760
you've prepared with instructions or
 

1979
00:37:01,760 --> 00:37:02,710
you've prepared with instructions or
data

1980
00:37:02,710 --> 00:37:02,720
data
 

1981
00:37:02,720 --> 00:37:05,829
data
to map that memory into the new uh into

1982
00:37:05,829 --> 00:37:05,839
to map that memory into the new uh into
 

1983
00:37:05,839 --> 00:37:06,230
to map that memory into the new uh into
the

1984
00:37:06,230 --> 00:37:06,240
the
 

1985
00:37:06,240 --> 00:37:08,470
the
new task address space and then you send

1986
00:37:08,470 --> 00:37:08,480
new task address space and then you send
 

1987
00:37:08,480 --> 00:37:10,230
new task address space and then you send
a special start ipc

1988
00:37:10,230 --> 00:37:10,240
a special start ipc
 

1989
00:37:10,240 --> 00:37:12,150
a special start ipc
to this new task with the program

1990
00:37:12,150 --> 00:37:12,160
to this new task with the program
 

1991
00:37:12,160 --> 00:37:13,510
to this new task with the program
counter and the stack pointer you want

1992
00:37:13,510 --> 00:37:13,520
counter and the stack pointer you want
 

1993
00:37:13,520 --> 00:37:15,030
counter and the stack pointer you want
it to start executing with

1994
00:37:15,030 --> 00:37:15,040
it to start executing with
 

1995
00:37:15,040 --> 00:37:16,550
it to start executing with
it'll start executing and that memory

1996
00:37:16,550 --> 00:37:16,560
it'll start executing and that memory
 

1997
00:37:16,560 --> 00:37:18,470
it'll start executing and that memory
you've set up at the program calendar

1998
00:37:18,470 --> 00:37:18,480
you've set up at the program calendar
 

1999
00:37:18,480 --> 00:37:20,829
you've set up at the program calendar
that you asked it to start at

2000
00:37:20,829 --> 00:37:20,839
that you asked it to start at
 

2001
00:37:20,839 --> 00:37:23,430
that you asked it to start at
um there's a way not through system

2002
00:37:23,430 --> 00:37:23,440
um there's a way not through system
 

2003
00:37:23,440 --> 00:37:24,230
um there's a way not through system
calls

2004
00:37:24,230 --> 00:37:24,240
calls
 

2005
00:37:24,240 --> 00:37:26,230
calls
in fact i don't know how it worked but

2006
00:37:26,230 --> 00:37:26,240
in fact i don't know how it worked but
 

2007
00:37:26,240 --> 00:37:27,349
in fact i don't know how it worked but
um

2008
00:37:27,349 --> 00:37:27,359
um
 

2009
00:37:27,359 --> 00:37:29,829
um
privileged tasks could map device

2010
00:37:29,829 --> 00:37:29,839
privileged tasks could map device
 

2011
00:37:29,839 --> 00:37:31,670
privileged tasks could map device
hardware

2012
00:37:31,670 --> 00:37:31,680
hardware
 

2013
00:37:31,680 --> 00:37:35,109
hardware
um you know device control registers

2014
00:37:35,109 --> 00:37:35,119
um you know device control registers
 

2015
00:37:35,119 --> 00:37:35,990
um you know device control registers
into their own address

2016
00:37:35,990 --> 00:37:36,000
into their own address
 

2017
00:37:36,000 --> 00:37:39,910
into their own address
spaces

2018
00:37:39,910 --> 00:37:39,920

 

2019
00:37:39,920 --> 00:37:41,510

so l4 didn't really know much about

2020
00:37:41,510 --> 00:37:41,520
so l4 didn't really know much about
 

2021
00:37:41,520 --> 00:37:43,510
so l4 didn't really know much about
devices like disks or network interface

2022
00:37:43,510 --> 00:37:43,520
devices like disks or network interface
 

2023
00:37:43,520 --> 00:37:44,790
devices like disks or network interface
cards but

2024
00:37:44,790 --> 00:37:44,800
cards but
 

2025
00:37:44,800 --> 00:37:48,829
cards but
user level software could get directly

2026
00:37:48,829 --> 00:37:48,839
user level software could get directly
 

2027
00:37:48,839 --> 00:37:51,030
user level software could get directly
at

2028
00:37:51,030 --> 00:37:51,040
at
 

2029
00:37:51,040 --> 00:37:52,150
at
you use a level software that

2030
00:37:52,150 --> 00:37:52,160
you use a level software that
 

2031
00:37:52,160 --> 00:37:53,670
you use a level software that
implemented device drivers that user

2032
00:37:53,670 --> 00:37:53,680
implemented device drivers that user
 

2033
00:37:53,680 --> 00:37:55,270
implemented device drivers that user
level could get directly at device

2034
00:37:55,270 --> 00:37:55,280
level could get directly at device
 

2035
00:37:55,280 --> 00:37:57,430
level could get directly at device
hardware

2036
00:37:57,430 --> 00:37:57,440
hardware
 

2037
00:37:57,440 --> 00:38:01,670
hardware
there was a way to you could tell l4

2038
00:38:01,670 --> 00:38:01,680
there was a way to you could tell l4
 

2039
00:38:01,680 --> 00:38:05,750
there was a way to you could tell l4
to turn and interrupt um

2040
00:38:05,750 --> 00:38:05,760
to turn and interrupt um
 

2041
00:38:05,760 --> 00:38:07,670
to turn and interrupt um
any interrupt from any device l4 didn't

2042
00:38:07,670 --> 00:38:07,680
any interrupt from any device l4 didn't
 

2043
00:38:07,680 --> 00:38:10,310
any interrupt from any device l4 didn't
really know which device just turned

2044
00:38:10,310 --> 00:38:10,320
really know which device just turned
 

2045
00:38:10,320 --> 00:38:13,990
really know which device just turned
a given interrupt into an ipc message

2046
00:38:13,990 --> 00:38:14,000
a given interrupt into an ipc message
 

2047
00:38:14,000 --> 00:38:18,630
a given interrupt into an ipc message
so a device driver tasks could

2048
00:38:18,630 --> 00:38:18,640
so a device driver tasks could
 

2049
00:38:18,640 --> 00:38:19,750
so a device driver tasks could
not just read and write the device

2050
00:38:19,750 --> 00:38:19,760
not just read and write the device
 

2051
00:38:19,760 --> 00:38:21,589
not just read and write the device
harder but also tell l4 well anytime

2052
00:38:21,589 --> 00:38:21,599
harder but also tell l4 well anytime
 

2053
00:38:21,599 --> 00:38:22,710
harder but also tell l4 well anytime
that device interrupts

2054
00:38:22,710 --> 00:38:22,720
that device interrupts
 

2055
00:38:22,720 --> 00:38:25,750
that device interrupts
please send me an ipc message to notify

2056
00:38:25,750 --> 00:38:25,760
please send me an ipc message to notify
 

2057
00:38:25,760 --> 00:38:28,630
please send me an ipc message to notify
me at the interrupt

2058
00:38:28,630 --> 00:38:28,640

 

2059
00:38:28,640 --> 00:38:31,670

and finally one task could tell the

2060
00:38:31,670 --> 00:38:31,680
and finally one task could tell the
 

2061
00:38:31,680 --> 00:38:32,390
and finally one task could tell the
kernel

2062
00:38:32,390 --> 00:38:32,400
kernel
 

2063
00:38:32,400 --> 00:38:36,310
kernel
to give it notifications of another task

2064
00:38:36,310 --> 00:38:36,320
to give it notifications of another task
 

2065
00:38:36,320 --> 00:38:38,470
to give it notifications of another task
page faults

2066
00:38:38,470 --> 00:38:38,480
page faults
 

2067
00:38:38,480 --> 00:38:42,150
page faults
so if this task page faults l4 would

2068
00:38:42,150 --> 00:38:42,160
so if this task page faults l4 would
 

2069
00:38:42,160 --> 00:38:45,670
so if this task page faults l4 would
turn that into a ipc message

2070
00:38:45,670 --> 00:38:45,680
turn that into a ipc message
 

2071
00:38:45,680 --> 00:38:48,310
turn that into a ipc message
and send it to another designated pager

2072
00:38:48,310 --> 00:38:48,320
and send it to another designated pager
 

2073
00:38:48,320 --> 00:38:49,510
and send it to another designated pager
task

2074
00:38:49,510 --> 00:38:49,520
task
 

2075
00:38:49,520 --> 00:38:51,349
task
uh send the notification the page fault

2076
00:38:51,349 --> 00:38:51,359
uh send the notification the page fault
 

2077
00:38:51,359 --> 00:38:53,990
uh send the notification the page fault
to a designated pager task so every task

2078
00:38:53,990 --> 00:38:54,000
to a designated pager task so every task
 

2079
00:38:54,000 --> 00:38:55,990
to a designated pager task so every task
had an associated pager task that

2080
00:38:55,990 --> 00:38:56,000
had an associated pager task that
 

2081
00:38:56,000 --> 00:38:57,349
had an associated pager task that
handled its page faults

2082
00:38:57,349 --> 00:38:57,359
handled its page faults
 

2083
00:38:57,359 --> 00:38:59,829
handled its page faults
and that's the way you know you get

2084
00:38:59,829 --> 00:38:59,839
and that's the way you know you get
 

2085
00:38:59,839 --> 00:39:01,030
and that's the way you know you get
hooks into the

2086
00:39:01,030 --> 00:39:01,040
hooks into the
 

2087
00:39:01,040 --> 00:39:02,550
hooks into the
page faults in order to implement things

2088
00:39:02,550 --> 00:39:02,560
page faults in order to implement things
 

2089
00:39:02,560 --> 00:39:04,870
page faults in order to implement things
like copy on write fork or lazy

2090
00:39:04,870 --> 00:39:04,880
like copy on write fork or lazy
 

2091
00:39:04,880 --> 00:39:08,950
like copy on write fork or lazy
allocation

2092
00:39:08,950 --> 00:39:08,960

 

2093
00:39:08,960 --> 00:39:10,470

and that's it for the kernel there's no

2094
00:39:10,470 --> 00:39:10,480
and that's it for the kernel there's no
 

2095
00:39:10,480 --> 00:39:12,150
and that's it for the kernel there's no
nothing else in l4 there's no file

2096
00:39:12,150 --> 00:39:12,160
nothing else in l4 there's no file
 

2097
00:39:12,160 --> 00:39:13,190
nothing else in l4 there's no file
system

2098
00:39:13,190 --> 00:39:13,200
system
 

2099
00:39:13,200 --> 00:39:15,030
system
l4 didn't itself have support for things

2100
00:39:15,030 --> 00:39:15,040
l4 didn't itself have support for things
 

2101
00:39:15,040 --> 00:39:16,790
l4 didn't itself have support for things
like fork or exec

2102
00:39:16,790 --> 00:39:16,800
like fork or exec
 

2103
00:39:16,800 --> 00:39:19,109
like fork or exec
um it didn't have any communication

2104
00:39:19,109 --> 00:39:19,119
um it didn't have any communication
 

2105
00:39:19,119 --> 00:39:21,270
um it didn't have any communication
beyond these very simple ipc

2106
00:39:21,270 --> 00:39:21,280
beyond these very simple ipc
 

2107
00:39:21,280 --> 00:39:23,910
beyond these very simple ipc
like did not pipes enough device drivers

2108
00:39:23,910 --> 00:39:23,920
like did not pipes enough device drivers
 

2109
00:39:23,920 --> 00:39:26,390
like did not pipes enough device drivers
no networking support nothing

2110
00:39:26,390 --> 00:39:26,400
no networking support nothing
 

2111
00:39:26,400 --> 00:39:28,550
no networking support nothing
everything else if you wanted it you

2112
00:39:28,550 --> 00:39:28,560
everything else if you wanted it you
 

2113
00:39:28,560 --> 00:39:30,550
everything else if you wanted it you
need to supply as

2114
00:39:30,550 --> 00:39:30,560
need to supply as
 

2115
00:39:30,560 --> 00:39:37,030
need to supply as
user level services

2116
00:39:37,030 --> 00:39:37,040

 

2117
00:39:37,040 --> 00:39:41,589

okay so one thing that uh

2118
00:39:41,589 --> 00:39:41,599
okay so one thing that uh
 

2119
00:39:41,599 --> 00:39:45,430
okay so one thing that uh
l4 does supply is switching among

2120
00:39:45,430 --> 00:39:45,440
l4 does supply is switching among
 

2121
00:39:45,440 --> 00:39:48,710
l4 does supply is switching among
threads l4 would actually do the

2122
00:39:48,710 --> 00:39:48,720
threads l4 would actually do the
 

2123
00:39:48,720 --> 00:39:51,750
threads l4 would actually do the
scheduling and context switches in order

2124
00:39:51,750 --> 00:39:51,760
scheduling and context switches in order
 

2125
00:39:51,760 --> 00:39:53,990
scheduling and context switches in order
to multiplex a single cpu among multiple

2126
00:39:53,990 --> 00:39:54,000
to multiplex a single cpu among multiple
 

2127
00:39:54,000 --> 00:39:54,630
to multiplex a single cpu among multiple
threads

2128
00:39:54,630 --> 00:39:54,640
threads
 

2129
00:39:54,640 --> 00:39:56,390
threads
and the way it did it you would find

2130
00:39:56,390 --> 00:39:56,400
and the way it did it you would find
 

2131
00:39:56,400 --> 00:39:58,790
and the way it did it you would find
completely unsurprising

2132
00:39:58,790 --> 00:39:58,800
completely unsurprising
 

2133
00:39:58,800 --> 00:40:01,829
completely unsurprising
l4 basically had saved registers

2134
00:40:01,829 --> 00:40:01,839
l4 basically had saved registers
 

2135
00:40:01,839 --> 00:40:05,109
l4 basically had saved registers
for every task for every thread when it

2136
00:40:05,109 --> 00:40:05,119
for every task for every thread when it
 

2137
00:40:05,119 --> 00:40:06,790
for every task for every thread when it
executed a thread the executed

2138
00:40:06,790 --> 00:40:06,800
executed a thread the executed
 

2139
00:40:06,800 --> 00:40:08,630
executed a thread the executed
thread you know would jump into user

2140
00:40:08,630 --> 00:40:08,640
thread you know would jump into user
 

2141
00:40:08,640 --> 00:40:10,230
thread you know would jump into user
space and switch page tables to that

2142
00:40:10,230 --> 00:40:10,240
space and switch page tables to that
 

2143
00:40:10,240 --> 00:40:11,829
space and switch page tables to that
thread and that thread will execute for

2144
00:40:11,829 --> 00:40:11,839
thread and that thread will execute for
 

2145
00:40:11,839 --> 00:40:12,950
thread and that thread will execute for
a while in user space

2146
00:40:12,950 --> 00:40:12,960
a while in user space
 

2147
00:40:12,960 --> 00:40:14,950
a while in user space
then maybe the timer interrupt would go

2148
00:40:14,950 --> 00:40:14,960
then maybe the timer interrupt would go
 

2149
00:40:14,960 --> 00:40:16,309
then maybe the timer interrupt would go
off and that was actually a device

2150
00:40:16,309 --> 00:40:16,319
off and that was actually a device
 

2151
00:40:16,319 --> 00:40:18,630
off and that was actually a device
l4 knew about the timer internet might

2152
00:40:18,630 --> 00:40:18,640
l4 knew about the timer internet might
 

2153
00:40:18,640 --> 00:40:20,150
l4 knew about the timer internet might
go off after a while

2154
00:40:20,150 --> 00:40:20,160
go off after a while
 

2155
00:40:20,160 --> 00:40:22,390
go off after a while
interrupt into l4 l4 would save this

2156
00:40:22,390 --> 00:40:22,400
interrupt into l4 l4 would save this
 

2157
00:40:22,400 --> 00:40:24,630
interrupt into l4 l4 would save this
tasks user registers in a

2158
00:40:24,630 --> 00:40:24,640
tasks user registers in a
 

2159
00:40:24,640 --> 00:40:28,069
tasks user registers in a
per task an array of like tasks

2160
00:40:28,069 --> 00:40:28,079
per task an array of like tasks
 

2161
00:40:28,079 --> 00:40:30,309
per task an array of like tasks
or thread structures would save this

2162
00:40:30,309 --> 00:40:30,319
or thread structures would save this
 

2163
00:40:30,319 --> 00:40:31,750
or thread structures would save this
threads

2164
00:40:31,750 --> 00:40:31,760
threads
 

2165
00:40:31,760 --> 00:40:34,710
threads
registers away pick a new task to run in

2166
00:40:34,710 --> 00:40:34,720
registers away pick a new task to run in
 

2167
00:40:34,720 --> 00:40:35,190
registers away pick a new task to run in
a loop

2168
00:40:35,190 --> 00:40:35,200
a loop
 

2169
00:40:35,200 --> 00:40:38,069
a loop
much like the scheduling loop in xv6

2170
00:40:38,069 --> 00:40:38,079
much like the scheduling loop in xv6
 

2171
00:40:38,079 --> 00:40:39,510
much like the scheduling loop in xv6
restore

2172
00:40:39,510 --> 00:40:39,520
restore
 

2173
00:40:39,520 --> 00:40:42,230
restore
this task's registers out from its

2174
00:40:42,230 --> 00:40:42,240
this task's registers out from its
 

2175
00:40:42,240 --> 00:40:44,150
this task's registers out from its
previously saved registers

2176
00:40:44,150 --> 00:40:44,160
previously saved registers
 

2177
00:40:44,160 --> 00:40:46,230
previously saved registers
switch page tables and then jump into

2178
00:40:46,230 --> 00:40:46,240
switch page tables and then jump into
 

2179
00:40:46,240 --> 00:40:48,790
switch page tables and then jump into
this task and execute it for a while

2180
00:40:48,790 --> 00:40:48,800
this task and execute it for a while
 

2181
00:40:48,800 --> 00:40:50,870
this task and execute it for a while
until the timer interrupt went off or

2182
00:40:50,870 --> 00:40:50,880
until the timer interrupt went off or
 

2183
00:40:50,880 --> 00:40:53,190
until the timer interrupt went off or
until this

2184
00:40:53,190 --> 00:40:53,200
until this
 

2185
00:40:53,200 --> 00:40:55,589
until this
task either yielded i think there's also

2186
00:40:55,589 --> 00:40:55,599
task either yielded i think there's also
 

2187
00:40:55,599 --> 00:40:57,349
task either yielded i think there's also
probably a yield system call or

2188
00:40:57,349 --> 00:40:57,359
probably a yield system call or
 

2189
00:40:57,359 --> 00:40:59,430
probably a yield system call or
something like it

2190
00:40:59,430 --> 00:40:59,440
something like it
 

2191
00:40:59,440 --> 00:41:02,710
something like it
a task could yield a cpu or a task could

2192
00:41:02,710 --> 00:41:02,720
a task could yield a cpu or a task could
 

2193
00:41:02,720 --> 00:41:06,069
a task could yield a cpu or a task could
wait to receive an ipc in that case

2194
00:41:06,069 --> 00:41:06,079
wait to receive an ipc in that case
 

2195
00:41:06,079 --> 00:41:08,390
wait to receive an ipc in that case
l4 would jump back into l4 and alpha

2196
00:41:08,390 --> 00:41:08,400
l4 would jump back into l4 and alpha
 

2197
00:41:08,400 --> 00:41:10,069
l4 would jump back into l4 and alpha
would save us registers

2198
00:41:10,069 --> 00:41:10,079
would save us registers
 

2199
00:41:10,079 --> 00:41:12,550
would save us registers
switch to a new task and run that task

2200
00:41:12,550 --> 00:41:12,560
switch to a new task and run that task
 

2201
00:41:12,560 --> 00:41:13,190
switch to a new task and run that task
so that

2202
00:41:13,190 --> 00:41:13,200
so that
 

2203
00:41:13,200 --> 00:41:18,069
so that
thread switching part of l4 is very um

2204
00:41:18,069 --> 00:41:18,079

 

2205
00:41:18,079 --> 00:41:25,349

be very familiar um

2206
00:41:25,349 --> 00:41:25,359

 

2207
00:41:25,359 --> 00:41:30,470

the um

2208
00:41:30,470 --> 00:41:30,480

 

2209
00:41:30,480 --> 00:41:32,309

i mentioned this before but i just i

2210
00:41:32,309 --> 00:41:32,319
i mentioned this before but i just i
 

2211
00:41:32,319 --> 00:41:34,870
i mentioned this before but i just i
want to uh because it comes up

2212
00:41:34,870 --> 00:41:34,880
want to uh because it comes up
 

2213
00:41:34,880 --> 00:41:39,829
want to uh because it comes up
i want to um just write here

2214
00:41:39,829 --> 00:41:39,839

 

2215
00:41:39,839 --> 00:41:44,710

this notion of a pager um the uh

2216
00:41:44,710 --> 00:41:44,720
this notion of a pager um the uh
 

2217
00:41:44,720 --> 00:41:48,630
this notion of a pager um the uh
repeat if a process takes a page fault

2218
00:41:48,630 --> 00:41:48,640
repeat if a process takes a page fault
 

2219
00:41:48,640 --> 00:41:50,230
repeat if a process takes a page fault
traps into the kernel and the kernel

2220
00:41:50,230 --> 00:41:50,240
traps into the kernel and the kernel
 

2221
00:41:50,240 --> 00:41:51,910
traps into the kernel and the kernel
turns that page fault into an ipc

2222
00:41:51,910 --> 00:41:51,920
turns that page fault into an ipc
 

2223
00:41:51,920 --> 00:41:52,790
turns that page fault into an ipc
message to

2224
00:41:52,790 --> 00:41:52,800
message to
 

2225
00:41:52,800 --> 00:41:55,430
message to
a designated pager task and tells it the

2226
00:41:55,430 --> 00:41:55,440
a designated pager task and tells it the
 

2227
00:41:55,440 --> 00:41:56,470
a designated pager task and tells it the
address

2228
00:41:56,470 --> 00:41:56,480
address
 

2229
00:41:56,480 --> 00:41:58,950
address
you know that tells it tells this pager

2230
00:41:58,950 --> 00:41:58,960
you know that tells it tells this pager
 

2231
00:41:58,960 --> 00:42:00,550
you know that tells it tells this pager
task

2232
00:42:00,550 --> 00:42:00,560
task
 

2233
00:42:00,560 --> 00:42:02,710
task
which thread faulted and the address it

2234
00:42:02,710 --> 00:42:02,720
which thread faulted and the address it
 

2235
00:42:02,720 --> 00:42:03,829
which thread faulted and the address it
faulted on

2236
00:42:03,829 --> 00:42:03,839
faulted on
 

2237
00:42:03,839 --> 00:42:06,790
faulted on
um and then the pager task if it wants

2238
00:42:06,790 --> 00:42:06,800
um and then the pager task if it wants
 

2239
00:42:06,800 --> 00:42:07,990
um and then the pager task if it wants
to say implement

2240
00:42:07,990 --> 00:42:08,000
to say implement
 

2241
00:42:08,000 --> 00:42:10,150
to say implement
lazy allocation you know maybe this

2242
00:42:10,150 --> 00:42:10,160
lazy allocation you know maybe this
 

2243
00:42:10,160 --> 00:42:11,109
lazy allocation you know maybe this
thread

2244
00:42:11,109 --> 00:42:11,119
thread
 

2245
00:42:11,119 --> 00:42:12,630
thread
wrote read or write some memory that

2246
00:42:12,630 --> 00:42:12,640
wrote read or write some memory that
 

2247
00:42:12,640 --> 00:42:14,230
wrote read or write some memory that
wasn't allocated yet but it

2248
00:42:14,230 --> 00:42:14,240
wasn't allocated yet but it
 

2249
00:42:14,240 --> 00:42:16,550
wasn't allocated yet but it
think that it sort of has to be lazily

2250
00:42:16,550 --> 00:42:16,560
think that it sort of has to be lazily
 

2251
00:42:16,560 --> 00:42:17,430
think that it sort of has to be lazily
allocated

2252
00:42:17,430 --> 00:42:17,440
allocated
 

2253
00:42:17,440 --> 00:42:19,270
allocated
its pager task would then be in charge

2254
00:42:19,270 --> 00:42:19,280
its pager task would then be in charge
 

2255
00:42:19,280 --> 00:42:20,950
its pager task would then be in charge
of allocating some memory from

2256
00:42:20,950 --> 00:42:20,960
of allocating some memory from
 

2257
00:42:20,960 --> 00:42:24,630
of allocating some memory from
l4 um sending one of these special

2258
00:42:24,630 --> 00:42:24,640
l4 um sending one of these special
 

2259
00:42:24,640 --> 00:42:27,990
l4 um sending one of these special
ipc's uh the cause

2260
00:42:27,990 --> 00:42:28,000
ipc's uh the cause
 

2261
00:42:28,000 --> 00:42:31,109
ipc's uh the cause
mem that caused the memory to be mapped

2262
00:42:31,109 --> 00:42:31,119
mem that caused the memory to be mapped
 

2263
00:42:31,119 --> 00:42:32,790
mem that caused the memory to be mapped
into this task and then

2264
00:42:32,790 --> 00:42:32,800
into this task and then
 

2265
00:42:32,800 --> 00:42:35,589
into this task and then
sending an ipc to resume execution

2266
00:42:35,589 --> 00:42:35,599
sending an ipc to resume execution
 

2267
00:42:35,599 --> 00:42:37,190
sending an ipc to resume execution
inside this thread

2268
00:42:37,190 --> 00:42:37,200
inside this thread
 

2269
00:42:37,200 --> 00:42:39,670
inside this thread
um so there was this notion of page or

2270
00:42:39,670 --> 00:42:39,680
um so there was this notion of page or
 

2271
00:42:39,680 --> 00:42:40,950
um so there was this notion of page or
task to implement all this

2272
00:42:40,950 --> 00:42:40,960
task to implement all this
 

2273
00:42:40,960 --> 00:42:43,270
task to implement all this
all the stuff that xv6 or linux

2274
00:42:43,270 --> 00:42:43,280
all the stuff that xv6 or linux
 

2275
00:42:43,280 --> 00:42:43,990
all the stuff that xv6 or linux
implements in

2276
00:42:43,990 --> 00:42:44,000
implements in
 

2277
00:42:44,000 --> 00:42:45,829
implements in
page fault handlers like you could

2278
00:42:45,829 --> 00:42:45,839
page fault handlers like you could
 

2279
00:42:45,839 --> 00:42:47,589
page fault handlers like you could
implement copy on the right fork with

2280
00:42:47,589 --> 00:42:47,599
implement copy on the right fork with
 

2281
00:42:47,599 --> 00:42:47,990
implement copy on the right fork with
this

2282
00:42:47,990 --> 00:42:48,000
this
 

2283
00:42:48,000 --> 00:42:52,069
this
if you liked or memory mapped files all

2284
00:42:52,069 --> 00:42:52,079
if you liked or memory mapped files all
 

2285
00:42:52,079 --> 00:42:53,670
if you liked or memory mapped files all
using one of these pager tags so they

2286
00:42:53,670 --> 00:42:53,680
using one of these pager tags so they
 

2287
00:42:53,680 --> 00:42:56,069
using one of these pager tags so they
were sort of

2288
00:42:56,069 --> 00:42:56,079
were sort of
 

2289
00:42:56,079 --> 00:42:59,190
were sort of
powerful user level way to

2290
00:42:59,190 --> 00:42:59,200
powerful user level way to
 

2291
00:42:59,200 --> 00:43:01,829
powerful user level way to
play tricks with uh driven by page

2292
00:43:01,829 --> 00:43:01,839
play tricks with uh driven by page
 

2293
00:43:01,839 --> 00:43:03,589
play tricks with uh driven by page
faults

2294
00:43:03,589 --> 00:43:03,599
faults
 

2295
00:43:03,599 --> 00:43:05,430
faults
and so this is an example and one of

2296
00:43:05,430 --> 00:43:05,440
and so this is an example and one of
 

2297
00:43:05,440 --> 00:43:07,190
and so this is an example and one of
many examples in which

2298
00:43:07,190 --> 00:43:07,200
many examples in which
 

2299
00:43:07,200 --> 00:43:09,270
many examples in which
a micro kernel like l4 might have been

2300
00:43:09,270 --> 00:43:09,280
a micro kernel like l4 might have been
 

2301
00:43:09,280 --> 00:43:10,470
a micro kernel like l4 might have been
quite a bit more

2302
00:43:10,470 --> 00:43:10,480
quite a bit more
 

2303
00:43:10,480 --> 00:43:12,309
quite a bit more
flexible for user programs than a

2304
00:43:12,309 --> 00:43:12,319
flexible for user programs than a
 

2305
00:43:12,319 --> 00:43:14,230
flexible for user programs than a
conventional kernel like if you just

2306
00:43:14,230 --> 00:43:14,240
conventional kernel like if you just
 

2307
00:43:14,240 --> 00:43:15,670
conventional kernel like if you just
if you think linux ought to do some

2308
00:43:15,670 --> 00:43:15,680
if you think linux ought to do some
 

2309
00:43:15,680 --> 00:43:18,390
if you think linux ought to do some
extra thing like maybe

2310
00:43:18,390 --> 00:43:18,400
extra thing like maybe
 

2311
00:43:18,400 --> 00:43:20,870
extra thing like maybe
you know some you know if linux didn't

2312
00:43:20,870 --> 00:43:20,880
you know some you know if linux didn't
 

2313
00:43:20,880 --> 00:43:22,550
you know some you know if linux didn't
already have copy on right fork and you

2314
00:43:22,550 --> 00:43:22,560
already have copy on right fork and you
 

2315
00:43:22,560 --> 00:43:24,470
already have copy on right fork and you
wanted to have copy on right fork

2316
00:43:24,470 --> 00:43:24,480
wanted to have copy on right fork
 

2317
00:43:24,480 --> 00:43:25,910
wanted to have copy on right fork
you know you really can't implement that

2318
00:43:25,910 --> 00:43:25,920
you know you really can't implement that
 

2319
00:43:25,920 --> 00:43:28,069
you know you really can't implement that
in linux without modifying the kernel

2320
00:43:28,069 --> 00:43:28,079
in linux without modifying the kernel
 

2321
00:43:28,079 --> 00:43:30,069
in linux without modifying the kernel
there's no way to write portable code

2322
00:43:30,069 --> 00:43:30,079
there's no way to write portable code
 

2323
00:43:30,079 --> 00:43:31,829
there's no way to write portable code
portable user level code

2324
00:43:31,829 --> 00:43:31,839
portable user level code
 

2325
00:43:31,839 --> 00:43:33,589
portable user level code
for linux that could implement something

2326
00:43:33,589 --> 00:43:33,599
for linux that could implement something
 

2327
00:43:33,599 --> 00:43:35,990
for linux that could implement something
like copy on right fork

2328
00:43:35,990 --> 00:43:36,000
like copy on right fork
 

2329
00:43:36,000 --> 00:43:38,870
like copy on right fork
um so i'm not that's not quite true but

2330
00:43:38,870 --> 00:43:38,880
um so i'm not that's not quite true but
 

2331
00:43:38,880 --> 00:43:40,950
um so i'm not that's not quite true but
it will be very difficult whereas

2332
00:43:40,950 --> 00:43:40,960
it will be very difficult whereas
 

2333
00:43:40,960 --> 00:43:43,270
it will be very difficult whereas
um in l4 it's relatively straightforward

2334
00:43:43,270 --> 00:43:43,280
um in l4 it's relatively straightforward
 

2335
00:43:43,280 --> 00:43:45,270
um in l4 it's relatively straightforward
l4 is like completely set up for you to

2336
00:43:45,270 --> 00:43:45,280
l4 is like completely set up for you to
 

2337
00:43:45,280 --> 00:43:46,950
l4 is like completely set up for you to
be able to write user level code

2338
00:43:46,950 --> 00:43:46,960
be able to write user level code
 

2339
00:43:46,960 --> 00:43:48,790
be able to write user level code
that gets the page faults that are

2340
00:43:48,790 --> 00:43:48,800
that gets the page faults that are
 

2341
00:43:48,800 --> 00:43:50,150
that gets the page faults that are
required to drive

2342
00:43:50,150 --> 00:43:50,160
required to drive
 

2343
00:43:50,160 --> 00:43:53,270
required to drive
copy on right fork all in user space

2344
00:43:53,270 --> 00:43:53,280
copy on right fork all in user space
 

2345
00:43:53,280 --> 00:43:54,309
copy on right fork all in user space
without having to

2346
00:43:54,309 --> 00:43:54,319
without having to
 

2347
00:43:54,319 --> 00:43:58,069
without having to
mess with the kernel

2348
00:43:58,069 --> 00:43:58,079

 

2349
00:43:58,079 --> 00:44:02,470

okay so any questions so far about

2350
00:44:02,470 --> 00:44:02,480
okay so any questions so far about
 

2351
00:44:02,480 --> 00:44:05,510
okay so any questions so far about
how l4 works

2352
00:44:05,510 --> 00:44:05,520

 

2353
00:44:05,520 --> 00:44:07,190

oh sorry can you just clarify the

2354
00:44:07,190 --> 00:44:07,200
oh sorry can you just clarify the
 

2355
00:44:07,200 --> 00:44:10,069
oh sorry can you just clarify the
difference between a thread and a task

2356
00:44:10,069 --> 00:44:10,079
difference between a thread and a task
 

2357
00:44:10,079 --> 00:44:14,630
difference between a thread and a task
um yes a a a task

2358
00:44:14,630 --> 00:44:14,640
um yes a a a task
 

2359
00:44:14,640 --> 00:44:17,750
um yes a a a task
corresponds to a it's like a process

2360
00:44:17,750 --> 00:44:17,760
corresponds to a it's like a process
 

2361
00:44:17,760 --> 00:44:20,550
corresponds to a it's like a process
in xv6 it has a bunch of memory and an

2362
00:44:20,550 --> 00:44:20,560
in xv6 it has a bunch of memory and an
 

2363
00:44:20,560 --> 00:44:21,829
in xv6 it has a bunch of memory and an
address space

2364
00:44:21,829 --> 00:44:21,839
address space
 

2365
00:44:21,839 --> 00:44:26,790
address space
and you can execute user code in it xv6

2366
00:44:26,790 --> 00:44:26,800
and you can execute user code in it xv6
 

2367
00:44:26,800 --> 00:44:28,710
and you can execute user code in it xv6
if you have a process in xv6 it can only

2368
00:44:28,710 --> 00:44:28,720
if you have a process in xv6 it can only
 

2369
00:44:28,720 --> 00:44:30,790
if you have a process in xv6 it can only
there can only be one thread of control

2370
00:44:30,790 --> 00:44:30,800
there can only be one thread of control
 

2371
00:44:30,800 --> 00:44:32,870
there can only be one thread of control
on a single on you know executing inside

2372
00:44:32,870 --> 00:44:32,880
on a single on you know executing inside
 

2373
00:44:32,880 --> 00:44:34,309
on a single on you know executing inside
a process

2374
00:44:34,309 --> 00:44:34,319
a process
 

2375
00:44:34,319 --> 00:44:37,510
a process
in xv6 but in modern operating systems

2376
00:44:37,510 --> 00:44:37,520
in xv6 but in modern operating systems
 

2377
00:44:37,520 --> 00:44:39,990
in xv6 but in modern operating systems
and in l4

2378
00:44:39,990 --> 00:44:40,000
and in l4
 

2379
00:44:40,000 --> 00:44:41,990
and in l4
in a single process in a single address

2380
00:44:41,990 --> 00:44:42,000
in a single process in a single address
 

2381
00:44:42,000 --> 00:44:43,270
in a single process in a single address
space you could have mult

2382
00:44:43,270 --> 00:44:43,280
space you could have mult
 

2383
00:44:43,280 --> 00:44:45,990
space you could have mult
if you have multiple cores you can have

2384
00:44:45,990 --> 00:44:46,000
if you have multiple cores you can have
 

2385
00:44:46,000 --> 00:44:47,030
if you have multiple cores you can have
multiple cores

2386
00:44:47,030 --> 00:44:47,040
multiple cores
 

2387
00:44:47,040 --> 00:44:51,670
multiple cores
executing in a single task

2388
00:44:51,670 --> 00:44:51,680
executing in a single task
 

2389
00:44:51,680 --> 00:44:54,150
executing in a single task
each you know typically always each set

2390
00:44:54,150 --> 00:44:54,160
each you know typically always each set
 

2391
00:44:54,160 --> 00:44:55,430
each you know typically always each set
up with its own stack

2392
00:44:55,430 --> 00:44:55,440
up with its own stack
 

2393
00:44:55,440 --> 00:44:58,790
up with its own stack
inside that tasks address space and so

2394
00:44:58,790 --> 00:44:58,800
inside that tasks address space and so
 

2395
00:44:58,800 --> 00:44:59,270
inside that tasks address space and so
if you

2396
00:44:59,270 --> 00:44:59,280
if you
 

2397
00:44:59,280 --> 00:45:00,630
if you
that means you can for example write a

2398
00:45:00,630 --> 00:45:00,640
that means you can for example write a
 

2399
00:45:00,640 --> 00:45:02,950
that means you can for example write a
single program that can get

2400
00:45:02,950 --> 00:45:02,960
single program that can get
 

2401
00:45:02,960 --> 00:45:05,750
single program that can get
parallel speed up improved performance

2402
00:45:05,750 --> 00:45:05,760
parallel speed up improved performance
 

2403
00:45:05,760 --> 00:45:08,150
parallel speed up improved performance
from multi-core hardware by running

2404
00:45:08,150 --> 00:45:08,160
from multi-core hardware by running
 

2405
00:45:08,160 --> 00:45:10,470
from multi-core hardware by running
one thread on having multiple threads

2406
00:45:10,470 --> 00:45:10,480
one thread on having multiple threads
 

2407
00:45:10,480 --> 00:45:11,910
one thread on having multiple threads
each running on a different core

2408
00:45:11,910 --> 00:45:11,920
each running on a different core
 

2409
00:45:11,920 --> 00:45:15,270
each running on a different core
thereby getting more work done

2410
00:45:15,270 --> 00:45:15,280

 

2411
00:45:15,280 --> 00:45:21,910

okay i see thank you yes

2412
00:45:21,910 --> 00:45:21,920

 

2413
00:45:21,920 --> 00:45:25,510

okay um so as you can see this is a

2414
00:45:25,510 --> 00:45:25,520
okay um so as you can see this is a
 

2415
00:45:25,520 --> 00:45:27,589
okay um so as you can see this is a
design that relies heavily on

2416
00:45:27,589 --> 00:45:27,599
design that relies heavily on
 

2417
00:45:27,599 --> 00:45:30,630
design that relies heavily on
on ipc because you're going to want to

2418
00:45:30,630 --> 00:45:30,640
on ipc because you're going to want to
 

2419
00:45:30,640 --> 00:45:32,230
on ipc because you're going to want to
talk to your file server the file server

2420
00:45:32,230 --> 00:45:32,240
talk to your file server the file server
 

2421
00:45:32,240 --> 00:45:33,589
talk to your file server the file server
is going to want to talk to the device

2422
00:45:33,589 --> 00:45:33,599
is going to want to talk to the device
 

2423
00:45:33,599 --> 00:45:34,069
is going to want to talk to the device
driver

2424
00:45:34,069 --> 00:45:34,079
driver
 

2425
00:45:34,079 --> 00:45:36,150
driver
server and you're going to have ipc

2426
00:45:36,150 --> 00:45:36,160
server and you're going to have ipc
 

2427
00:45:36,160 --> 00:45:37,750
server and you're going to have ipc
messages flying back and forth

2428
00:45:37,750 --> 00:45:37,760
messages flying back and forth
 

2429
00:45:37,760 --> 00:45:39,829
messages flying back and forth
for every system call for every page

2430
00:45:39,829 --> 00:45:39,839
for every system call for every page
 

2431
00:45:39,839 --> 00:45:41,430
for every system call for every page
fault for every device interrupt

2432
00:45:41,430 --> 00:45:41,440
fault for every device interrupt
 

2433
00:45:41,440 --> 00:45:44,829
fault for every device interrupt
the ibc system just has to be fast

2434
00:45:44,829 --> 00:45:44,839
the ibc system just has to be fast
 

2435
00:45:44,839 --> 00:45:47,190
the ibc system just has to be fast
however

2436
00:45:47,190 --> 00:45:47,200
however
 

2437
00:45:47,200 --> 00:45:50,390
however
and now we're starting to

2438
00:45:50,390 --> 00:45:50,400

 

2439
00:45:50,400 --> 00:45:52,950

sort of talk about a serious potential

2440
00:45:52,950 --> 00:45:52,960
sort of talk about a serious potential
 

2441
00:45:52,960 --> 00:45:54,710
sort of talk about a serious potential
defect in the

2442
00:45:54,710 --> 00:45:54,720
defect in the
 

2443
00:45:54,720 --> 00:46:04,630
defect in the
microkernel story

2444
00:46:04,630 --> 00:46:04,640

 

2445
00:46:04,640 --> 00:46:07,589

so first let me show you um a

2446
00:46:07,589 --> 00:46:07,599
so first let me show you um a
 

2447
00:46:07,599 --> 00:46:10,950
so first let me show you um a
straightforward but very slow design

2448
00:46:10,950 --> 00:46:10,960
straightforward but very slow design
 

2449
00:46:10,960 --> 00:46:14,309
straightforward but very slow design
for ipc patterned off of

2450
00:46:14,309 --> 00:46:14,319
for ipc patterned off of
 

2451
00:46:14,319 --> 00:46:16,150
for ipc patterned off of
unix pipes and i'm bringing this up

2452
00:46:16,150 --> 00:46:16,160
unix pipes and i'm bringing this up
 

2453
00:46:16,160 --> 00:46:20,470
unix pipes and i'm bringing this up
because some early microkernels

2454
00:46:20,470 --> 00:46:20,480

 

2455
00:46:20,480 --> 00:46:22,069

worked in sort of a similar way to what

2456
00:46:22,069 --> 00:46:22,079
worked in sort of a similar way to what
 

2457
00:46:22,079 --> 00:46:23,589
worked in sort of a similar way to what
i'm about to show you which turned out

2458
00:46:23,589 --> 00:46:23,599
i'm about to show you which turned out
 

2459
00:46:23,599 --> 00:46:25,349
i'm about to show you which turned out
to be slow

2460
00:46:25,349 --> 00:46:25,359
to be slow
 

2461
00:46:25,359 --> 00:46:29,910
to be slow
okay so um let's suppose you have

2462
00:46:29,910 --> 00:46:29,920
okay so um let's suppose you have
 

2463
00:46:29,920 --> 00:46:32,630
okay so um let's suppose you have
uh you know you have two processes we

2464
00:46:32,630 --> 00:46:32,640
uh you know you have two processes we
 

2465
00:46:32,640 --> 00:46:34,630
uh you know you have two processes we
got p1

2466
00:46:34,630 --> 00:46:34,640
got p1
 

2467
00:46:34,640 --> 00:46:39,910
got p1
p1 wants to send a message to p2

2468
00:46:39,910 --> 00:46:39,920

 

2469
00:46:39,920 --> 00:46:41,670

so how should that actually work well

2470
00:46:41,670 --> 00:46:41,680
so how should that actually work well
 

2471
00:46:41,680 --> 00:46:43,589
so how should that actually work well
one possibility is to have

2472
00:46:43,589 --> 00:46:43,599
one possibility is to have
 

2473
00:46:43,599 --> 00:46:47,030
one possibility is to have
a send system call and you give send

2474
00:46:47,030 --> 00:46:47,040
a send system call and you give send
 

2475
00:46:47,040 --> 00:46:48,470
a send system call and you give send
system call the id

2476
00:46:48,470 --> 00:46:48,480
system call the id
 

2477
00:46:48,480 --> 00:46:50,630
system call the id
of the thread you want to send the

2478
00:46:50,630 --> 00:46:50,640
of the thread you want to send the
 

2479
00:46:50,640 --> 00:46:52,710
of the thread you want to send the
message to and

2480
00:46:52,710 --> 00:46:52,720
message to and
 

2481
00:46:52,720 --> 00:46:56,470
message to and
a pointer to the message to the bytes

2482
00:46:56,470 --> 00:46:56,480
a pointer to the message to the bytes
 

2483
00:46:56,480 --> 00:46:57,510
a pointer to the message to the bytes
maybe

2484
00:46:57,510 --> 00:46:57,520
maybe
 

2485
00:46:57,520 --> 00:46:58,870
maybe
that you actually want to send to that

2486
00:46:58,870 --> 00:46:58,880
that you actually want to send to that
 

2487
00:46:58,880 --> 00:47:00,550
that you actually want to send to that
process so this is a system call so

2488
00:47:00,550 --> 00:47:00,560
process so this is a system call so
 

2489
00:47:00,560 --> 00:47:02,230
process so this is a system call so
you're going to jump into the kernel

2490
00:47:02,230 --> 00:47:02,240
you're going to jump into the kernel
 

2491
00:47:02,240 --> 00:47:04,470
you're going to jump into the kernel
um you know maybe we designed this

2492
00:47:04,470 --> 00:47:04,480
um you know maybe we designed this
 

2493
00:47:04,480 --> 00:47:05,829
um you know maybe we designed this
patterned after uh

2494
00:47:05,829 --> 00:47:05,839
patterned after uh
 

2495
00:47:05,839 --> 00:47:08,069
patterned after uh
pipes and xv6 and so you can imagine

2496
00:47:08,069 --> 00:47:08,079
pipes and xv6 and so you can imagine
 

2497
00:47:08,079 --> 00:47:09,270
pipes and xv6 and so you can imagine
there being a

2498
00:47:09,270 --> 00:47:09,280
there being a
 

2499
00:47:09,280 --> 00:47:11,589
there being a
buffer of messages waiting you know

2500
00:47:11,589 --> 00:47:11,599
buffer of messages waiting you know
 

2501
00:47:11,599 --> 00:47:13,270
buffer of messages waiting you know
maybe p2 is doing something else right

2502
00:47:13,270 --> 00:47:13,280
maybe p2 is doing something else right
 

2503
00:47:13,280 --> 00:47:13,910
maybe p2 is doing something else right
now

2504
00:47:13,910 --> 00:47:13,920
now
 

2505
00:47:13,920 --> 00:47:15,109
now
maybe it's a server it's serving

2506
00:47:15,109 --> 00:47:15,119
maybe it's a server it's serving
 

2507
00:47:15,119 --> 00:47:16,710
maybe it's a server it's serving
somebody else's request so it's not

2508
00:47:16,710 --> 00:47:16,720
somebody else's request so it's not
 

2509
00:47:16,720 --> 00:47:18,870
somebody else's request so it's not
ready to handle your request

2510
00:47:18,870 --> 00:47:18,880
ready to handle your request
 

2511
00:47:18,880 --> 00:47:20,549
ready to handle your request
you can imagine maybe a buffer of

2512
00:47:20,549 --> 00:47:20,559
you can imagine maybe a buffer of
 

2513
00:47:20,559 --> 00:47:23,190
you can imagine maybe a buffer of
waiting messages

2514
00:47:23,190 --> 00:47:23,200
waiting messages
 

2515
00:47:23,200 --> 00:47:25,109
waiting messages
in the kernel like a pipe buffer and

2516
00:47:25,109 --> 00:47:25,119
in the kernel like a pipe buffer and
 

2517
00:47:25,119 --> 00:47:27,270
in the kernel like a pipe buffer and
when you call send

2518
00:47:27,270 --> 00:47:27,280
when you call send
 

2519
00:47:27,280 --> 00:47:30,069
when you call send
it appends your message to this buffer

2520
00:47:30,069 --> 00:47:30,079
it appends your message to this buffer
 

2521
00:47:30,079 --> 00:47:32,069
it appends your message to this buffer
waiting for pdu to receive it

2522
00:47:32,069 --> 00:47:32,079
waiting for pdu to receive it
 

2523
00:47:32,079 --> 00:47:35,990
waiting for pdu to receive it
now in fact almost always

2524
00:47:35,990 --> 00:47:36,000

 

2525
00:47:36,000 --> 00:47:38,549

in these systems you rarely just wanted

2526
00:47:38,549 --> 00:47:38,559
in these systems you rarely just wanted
 

2527
00:47:38,559 --> 00:47:39,750
in these systems you rarely just wanted
to send a message

2528
00:47:39,750 --> 00:47:39,760
to send a message
 

2529
00:47:39,760 --> 00:47:41,030
to send a message
you almost always wanted to get a

2530
00:47:41,030 --> 00:47:41,040
you almost always wanted to get a
 

2531
00:47:41,040 --> 00:47:43,510
you almost always wanted to get a
response to you wanted an rpc or remote

2532
00:47:43,510 --> 00:47:43,520
response to you wanted an rpc or remote
 

2533
00:47:43,520 --> 00:47:45,430
response to you wanted an rpc or remote
procedure call

2534
00:47:45,430 --> 00:47:45,440
procedure call
 

2535
00:47:45,440 --> 00:47:47,750
procedure call
operation so in fact p1 would probably

2536
00:47:47,750 --> 00:47:47,760
operation so in fact p1 would probably
 

2537
00:47:47,760 --> 00:47:49,829
operation so in fact p1 would probably
follow this immediately by a receive to

2538
00:47:49,829 --> 00:47:49,839
follow this immediately by a receive to
 

2539
00:47:49,839 --> 00:47:52,150
follow this immediately by a receive to
try to get the response back

2540
00:47:52,150 --> 00:47:52,160
try to get the response back
 

2541
00:47:52,160 --> 00:47:54,710
try to get the response back
but in general let's just imagine we're

2542
00:47:54,710 --> 00:47:54,720
but in general let's just imagine we're
 

2543
00:47:54,720 --> 00:47:56,549
but in general let's just imagine we're
doing a one-way ipc for the moment so

2544
00:47:56,549 --> 00:47:56,559
doing a one-way ipc for the moment so
 

2545
00:47:56,559 --> 00:47:57,430
doing a one-way ipc for the moment so
send would

2546
00:47:57,430 --> 00:47:57,440
send would
 

2547
00:47:57,440 --> 00:48:00,630
send would
append your message uh to the in kernel

2548
00:48:00,630 --> 00:48:00,640
append your message uh to the in kernel
 

2549
00:48:00,640 --> 00:48:01,829
append your message uh to the in kernel
buffer

2550
00:48:01,829 --> 00:48:01,839
buffer
 

2551
00:48:01,839 --> 00:48:04,150
buffer
we would have to copy the message bytes

2552
00:48:04,150 --> 00:48:04,160
we would have to copy the message bytes
 

2553
00:48:04,160 --> 00:48:06,150
we would have to copy the message bytes
from user space into this buffer

2554
00:48:06,150 --> 00:48:06,160
from user space into this buffer
 

2555
00:48:06,160 --> 00:48:08,150
from user space into this buffer
and then return and process one can do

2556
00:48:08,150 --> 00:48:08,160
and then return and process one can do
 

2557
00:48:08,160 --> 00:48:09,589
and then return and process one can do
something else like

2558
00:48:09,589 --> 00:48:09,599
something else like
 

2559
00:48:09,599 --> 00:48:12,630
something else like
maybe prepare to receive the response

2560
00:48:12,630 --> 00:48:12,640
maybe prepare to receive the response
 

2561
00:48:12,640 --> 00:48:16,069
maybe prepare to receive the response
after a while p2

2562
00:48:16,069 --> 00:48:16,079

 

2563
00:48:16,079 --> 00:48:17,589

is going to want to receive the next

2564
00:48:17,589 --> 00:48:17,599
is going to want to receive the next
 

2565
00:48:17,599 --> 00:48:19,190
is going to want to receive the next
message just going to make the receive

2566
00:48:19,190 --> 00:48:19,200
message just going to make the receive
 

2567
00:48:19,200 --> 00:48:22,390
message just going to make the receive
system call

2568
00:48:22,390 --> 00:48:22,400

 

2569
00:48:22,400 --> 00:48:25,430

and that's going to return the id of the

2570
00:48:25,430 --> 00:48:25,440
and that's going to return the id of the
 

2571
00:48:25,440 --> 00:48:27,109
and that's going to return the id of the
sender

2572
00:48:27,109 --> 00:48:27,119
sender
 

2573
00:48:27,119 --> 00:48:31,190
sender
and copy the message into p2's memory

2574
00:48:31,190 --> 00:48:31,200
and copy the message into p2's memory
 

2575
00:48:31,200 --> 00:48:32,790
and copy the message into p2's memory
that's going to take the front message

2576
00:48:32,790 --> 00:48:32,800
that's going to take the front message
 

2577
00:48:32,800 --> 00:48:36,470
that's going to take the front message
off the queue copying the p2's memory

2578
00:48:36,470 --> 00:48:36,480
off the queue copying the p2's memory
 

2579
00:48:36,480 --> 00:48:40,790
off the queue copying the p2's memory
and then return

2580
00:48:40,790 --> 00:48:40,800

 

2581
00:48:40,800 --> 00:48:46,950

so um

2582
00:48:46,950 --> 00:48:46,960

 

2583
00:48:46,960 --> 00:48:50,150

this is called uh

2584
00:48:50,150 --> 00:48:50,160

 

2585
00:48:50,160 --> 00:48:52,790

there's some words for this uh whose

2586
00:48:52,790 --> 00:48:52,800
there's some words for this uh whose
 

2587
00:48:52,800 --> 00:48:54,309
there's some words for this uh whose
opposites you'll see and

2588
00:48:54,309 --> 00:48:54,319
opposites you'll see and
 

2589
00:48:54,319 --> 00:48:56,150
opposites you'll see and
you saw in today's paper this is called

2590
00:48:56,150 --> 00:48:56,160
you saw in today's paper this is called
 

2591
00:48:56,160 --> 00:48:58,790
you saw in today's paper this is called
an asynchronous

2592
00:48:58,790 --> 00:48:58,800
an asynchronous
 

2593
00:48:58,800 --> 00:49:01,990
an asynchronous
scheme because

2594
00:49:01,990 --> 00:49:02,000
scheme because
 

2595
00:49:02,000 --> 00:49:03,589
scheme because
p1 sends a message without having to

2596
00:49:03,589 --> 00:49:03,599
p1 sends a message without having to
 

2597
00:49:03,599 --> 00:49:04,950
p1 sends a message without having to
wait for anything it just appends to

2598
00:49:04,950 --> 00:49:04,960
wait for anything it just appends to
 

2599
00:49:04,960 --> 00:49:07,190
wait for anything it just appends to
this queue and returns

2600
00:49:07,190 --> 00:49:07,200
this queue and returns
 

2601
00:49:07,200 --> 00:49:12,549
this queue and returns
and it's called a buffered system

2602
00:49:12,549 --> 00:49:12,559

 

2603
00:49:12,559 --> 00:49:16,069

because the kernel copies each message

2604
00:49:16,069 --> 00:49:16,079
because the kernel copies each message
 

2605
00:49:16,079 --> 00:49:18,150
because the kernel copies each message
into the buffer into its internal buffer

2606
00:49:18,150 --> 00:49:18,160
into the buffer into its internal buffer
 

2607
00:49:18,160 --> 00:49:20,309
into the buffer into its internal buffer
on ascend and then later when the

2608
00:49:20,309 --> 00:49:20,319
on ascend and then later when the
 

2609
00:49:20,319 --> 00:49:21,829
on ascend and then later when the
receive happens it copies the message

2610
00:49:21,829 --> 00:49:21,839
receive happens it copies the message
 

2611
00:49:21,839 --> 00:49:22,630
receive happens it copies the message
out of the buffer

2612
00:49:22,630 --> 00:49:22,640
out of the buffer
 

2613
00:49:22,640 --> 00:49:24,630
out of the buffer
into the target so this is asynchronous

2614
00:49:24,630 --> 00:49:24,640
into the target so this is asynchronous
 

2615
00:49:24,640 --> 00:49:27,030
into the target so this is asynchronous
and buffered

2616
00:49:27,030 --> 00:49:27,040
and buffered
 

2617
00:49:27,040 --> 00:49:29,190
and buffered
if you're doing a full request response

2618
00:49:29,190 --> 00:49:29,200
if you're doing a full request response
 

2619
00:49:29,200 --> 00:49:31,430
if you're doing a full request response
pair then p1 is going to call send sends

2620
00:49:31,430 --> 00:49:31,440
pair then p1 is going to call send sends
 

2621
00:49:31,440 --> 00:49:32,309
pair then p1 is going to call send sends
going to return

2622
00:49:32,309 --> 00:49:32,319
going to return
 

2623
00:49:32,319 --> 00:49:34,790
going to return
p1 is then immediately let's assume

2624
00:49:34,790 --> 00:49:34,800
p1 is then immediately let's assume
 

2625
00:49:34,800 --> 00:49:35,589
p1 is then immediately let's assume
we're going to assume that there's

2626
00:49:35,589 --> 00:49:35,599
we're going to assume that there's
 

2627
00:49:35,599 --> 00:49:35,990
we're going to assume that there's
really

2628
00:49:35,990 --> 00:49:36,000
really
 

2629
00:49:36,000 --> 00:49:37,829
really
sort of two sets of buffers one for each

2630
00:49:37,829 --> 00:49:37,839
sort of two sets of buffers one for each
 

2631
00:49:37,839 --> 00:49:39,990
sort of two sets of buffers one for each
direction p1 is immediately going to

2632
00:49:39,990 --> 00:49:40,000
direction p1 is immediately going to
 

2633
00:49:40,000 --> 00:49:42,790
direction p1 is immediately going to
call receive

2634
00:49:42,790 --> 00:49:42,800
call receive
 

2635
00:49:42,800 --> 00:49:44,950
call receive
um receives gonna wait gonna need to

2636
00:49:44,950 --> 00:49:44,960
um receives gonna wait gonna need to
 

2637
00:49:44,960 --> 00:49:46,549
um receives gonna wait gonna need to
wait for something to appear in the

2638
00:49:46,549 --> 00:49:46,559
wait for something to appear in the
 

2639
00:49:46,559 --> 00:49:47,829
wait for something to appear in the
reply

2640
00:49:47,829 --> 00:49:47,839
reply
 

2641
00:49:47,839 --> 00:49:49,829
reply
buffer so it's gonna have to yield the

2642
00:49:49,829 --> 00:49:49,839
buffer so it's gonna have to yield the
 

2643
00:49:49,839 --> 00:49:51,349
buffer so it's gonna have to yield the
cpu it's gonna have to do something i

2644
00:49:51,349 --> 00:49:51,359
cpu it's gonna have to do something i
 

2645
00:49:51,359 --> 00:49:54,309
cpu it's gonna have to do something i
call sleep in xv6 to yield the cpu

2646
00:49:54,309 --> 00:49:54,319
call sleep in xv6 to yield the cpu
 

2647
00:49:54,319 --> 00:49:56,870
call sleep in xv6 to yield the cpu
um and on a single cpu system it may

2648
00:49:56,870 --> 00:49:56,880
um and on a single cpu system it may
 

2649
00:49:56,880 --> 00:49:58,710
um and on a single cpu system it may
maybe only at this point

2650
00:49:58,710 --> 00:49:58,720
maybe only at this point
 

2651
00:49:58,720 --> 00:50:01,589
maybe only at this point
that p1 gives up the cpu and now p2 can

2652
00:50:01,589 --> 00:50:01,599
that p1 gives up the cpu and now p2 can
 

2653
00:50:01,599 --> 00:50:02,549
that p1 gives up the cpu and now p2 can
run

2654
00:50:02,549 --> 00:50:02,559
run
 

2655
00:50:02,559 --> 00:50:04,870
run
and indeed um the hardware in this era

2656
00:50:04,870 --> 00:50:04,880
and indeed um the hardware in this era
 

2657
00:50:04,880 --> 00:50:05,910
and indeed um the hardware in this era
was almost always

2658
00:50:05,910 --> 00:50:05,920
was almost always
 

2659
00:50:05,920 --> 00:50:09,670
was almost always
single core certainly this paper

2660
00:50:09,670 --> 00:50:09,680
single core certainly this paper
 

2661
00:50:09,680 --> 00:50:12,230
single core certainly this paper
is running on single core hardware so p1

2662
00:50:12,230 --> 00:50:12,240
is running on single core hardware so p1
 

2663
00:50:12,240 --> 00:50:12,790
is running on single core hardware so p1
is going to

2664
00:50:12,790 --> 00:50:12,800
is going to
 

2665
00:50:12,800 --> 00:50:14,790
is going to
it's going to be v1 executing and p1 not

2666
00:50:14,790 --> 00:50:14,800
it's going to be v1 executing and p1 not
 

2667
00:50:14,800 --> 00:50:16,870
it's going to be v1 executing and p1 not
executing until p1 finally gives up the

2668
00:50:16,870 --> 00:50:16,880
executing until p1 finally gives up the
 

2669
00:50:16,880 --> 00:50:18,470
executing until p1 finally gives up the
cpu and receive

2670
00:50:18,470 --> 00:50:18,480
cpu and receive
 

2671
00:50:18,480 --> 00:50:20,630
cpu and receive
waiting for a message to appear here and

2672
00:50:20,630 --> 00:50:20,640
waiting for a message to appear here and
 

2673
00:50:20,640 --> 00:50:22,549
waiting for a message to appear here and
only then will p2 be scheduled maybe

2674
00:50:22,549 --> 00:50:22,559
only then will p2 be scheduled maybe
 

2675
00:50:22,559 --> 00:50:24,150
only then will p2 be scheduled maybe
it'll call receive

2676
00:50:24,150 --> 00:50:24,160
it'll call receive
 

2677
00:50:24,160 --> 00:50:26,309
it'll call receive
there's people copy the message and then

2678
00:50:26,309 --> 00:50:26,319
there's people copy the message and then
 

2679
00:50:26,319 --> 00:50:27,270
there's people copy the message and then
p2

2680
00:50:27,270 --> 00:50:27,280
p2
 

2681
00:50:27,280 --> 00:50:31,190
p2
will make its call to send

2682
00:50:31,190 --> 00:50:31,200

 

2683
00:50:31,200 --> 00:50:34,790

um to append its reply

2684
00:50:34,790 --> 00:50:34,800
um to append its reply
 

2685
00:50:34,800 --> 00:50:37,589
um to append its reply
um and then the send system call would

2686
00:50:37,589 --> 00:50:37,599
um and then the send system call would
 

2687
00:50:37,599 --> 00:50:39,270
um and then the send system call would
return to p2 and at some point

2688
00:50:39,270 --> 00:50:39,280
return to p2 and at some point
 

2689
00:50:39,280 --> 00:50:41,109
return to p2 and at some point
presumably p2 will give up the cpu

2690
00:50:41,109 --> 00:50:41,119
presumably p2 will give up the cpu
 

2691
00:50:41,119 --> 00:50:44,069
presumably p2 will give up the cpu
maybe the timer will go off then p1 1

2692
00:50:44,069 --> 00:50:44,079
maybe the timer will go off then p1 1
 

2693
00:50:44,079 --> 00:50:46,470
maybe the timer will go off then p1 1
will resume execution in the kernel

2694
00:50:46,470 --> 00:50:46,480
will resume execution in the kernel
 

2695
00:50:46,480 --> 00:50:47,750
will resume execution in the kernel
see that there's a message there and

2696
00:50:47,750 --> 00:50:47,760
see that there's a message there and
 

2697
00:50:47,760 --> 00:50:50,309
see that there's a message there and
return it back to user space

2698
00:50:50,309 --> 00:50:50,319
return it back to user space
 

2699
00:50:50,319 --> 00:50:52,870
return it back to user space
and so that means that in this design

2700
00:50:52,870 --> 00:50:52,880
and so that means that in this design
 

2701
00:50:52,880 --> 00:50:55,349
and so that means that in this design
this slow design

2702
00:50:55,349 --> 00:50:55,359
this slow design
 

2703
00:50:55,359 --> 00:50:57,910
this slow design
there's in order to have a request and a

2704
00:50:57,910 --> 00:50:57,920
there's in order to have a request and a
 

2705
00:50:57,920 --> 00:51:01,910
there's in order to have a request and a
response

2706
00:51:01,910 --> 00:51:01,920

 

2707
00:51:01,920 --> 00:51:05,349

there's four system calls two sends

2708
00:51:05,349 --> 00:51:05,359
there's four system calls two sends
 

2709
00:51:05,359 --> 00:51:08,069
there's four system calls two sends
and two receives and you know eight user

2710
00:51:08,069 --> 00:51:08,079
and two receives and you know eight user
 

2711
00:51:08,079 --> 00:51:09,670
and two receives and you know eight user
kernel crossings each one of which is

2712
00:51:09,670 --> 00:51:09,680
kernel crossings each one of which is
 

2713
00:51:09,680 --> 00:51:12,309
kernel crossings each one of which is
like reasonably expensive

2714
00:51:12,309 --> 00:51:12,319
like reasonably expensive
 

2715
00:51:12,319 --> 00:51:14,870
like reasonably expensive
there's a need to sleep this receive has

2716
00:51:14,870 --> 00:51:14,880
there's a need to sleep this receive has
 

2717
00:51:14,880 --> 00:51:15,589
there's a need to sleep this receive has
to

2718
00:51:15,589 --> 00:51:15,599
to
 

2719
00:51:15,599 --> 00:51:18,870
to
sleep waiting for data to appear

2720
00:51:18,870 --> 00:51:18,880
sleep waiting for data to appear
 

2721
00:51:18,880 --> 00:51:20,710
sleep waiting for data to appear
and there's a full call to the scheduler

2722
00:51:20,710 --> 00:51:20,720
and there's a full call to the scheduler
 

2723
00:51:20,720 --> 00:51:22,630
and there's a full call to the scheduler
loop and a context switch from

2724
00:51:22,630 --> 00:51:22,640
loop and a context switch from
 

2725
00:51:22,640 --> 00:51:25,750
loop and a context switch from
p1 to p2 i'm in order to make this and

2726
00:51:25,750 --> 00:51:25,760
p1 to p2 i'm in order to make this and
 

2727
00:51:25,760 --> 00:51:27,589
p1 to p2 i'm in order to make this and
you know each of these kernel crossings

2728
00:51:27,589 --> 00:51:27,599
you know each of these kernel crossings
 

2729
00:51:27,599 --> 00:51:29,190
you know each of these kernel crossings
and context switches is potentially

2730
00:51:29,190 --> 00:51:29,200
and context switches is potentially
 

2731
00:51:29,200 --> 00:51:30,390
and context switches is potentially
expensive because

2732
00:51:30,390 --> 00:51:30,400
expensive because
 

2733
00:51:30,400 --> 00:51:32,069
expensive because
you know every time you cross the kernel

2734
00:51:32,069 --> 00:51:32,079
you know every time you cross the kernel
 

2735
00:51:32,079 --> 00:51:35,190
you know every time you cross the kernel
user boundary you switch page tables

2736
00:51:35,190 --> 00:51:35,200
user boundary you switch page tables
 

2737
00:51:35,200 --> 00:51:40,549
user boundary you switch page tables
and that is a has a near certainty of um

2738
00:51:40,549 --> 00:51:40,559
and that is a has a near certainty of um
 

2739
00:51:40,559 --> 00:51:43,589
and that is a has a near certainty of um
disturbing the cpu caches like changing

2740
00:51:43,589 --> 00:51:43,599
disturbing the cpu caches like changing
 

2741
00:51:43,599 --> 00:51:44,470
disturbing the cpu caches like changing
the page table

2742
00:51:44,470 --> 00:51:44,480
the page table
 

2743
00:51:44,480 --> 00:51:47,670
the page table
probably flushes the ver the tlb

2744
00:51:47,670 --> 00:51:47,680
probably flushes the ver the tlb
 

2745
00:51:47,680 --> 00:51:49,430
probably flushes the ver the tlb
the virtual memory lookup cache which is

2746
00:51:49,430 --> 00:51:49,440
the virtual memory lookup cache which is
 

2747
00:51:49,440 --> 00:51:52,309
the virtual memory lookup cache which is
going to slow things down

2748
00:51:52,309 --> 00:51:52,319
going to slow things down
 

2749
00:51:52,319 --> 00:51:55,990
going to slow things down
so this is a pretty slow way to go

2750
00:51:55,990 --> 00:51:56,000
so this is a pretty slow way to go
 

2751
00:51:56,000 --> 00:51:58,390
so this is a pretty slow way to go
it involves a lot of kernel crossings

2752
00:51:58,390 --> 00:51:58,400
it involves a lot of kernel crossings
 

2753
00:51:58,400 --> 00:52:00,470
it involves a lot of kernel crossings
message copying of messages between user

2754
00:52:00,470 --> 00:52:00,480
message copying of messages between user
 

2755
00:52:00,480 --> 00:52:01,109
message copying of messages between user
and kernel

2756
00:52:01,109 --> 00:52:01,119
and kernel
 

2757
00:52:01,119 --> 00:52:04,950
and kernel
maybe allocation of buffers etc

2758
00:52:04,950 --> 00:52:04,960
maybe allocation of buffers etc
 

2759
00:52:04,960 --> 00:52:07,510
maybe allocation of buffers etc
but it turns out that for the for this

2760
00:52:07,510 --> 00:52:07,520
but it turns out that for the for this
 

2761
00:52:07,520 --> 00:52:09,190
but it turns out that for the for this
stylized case in which you're sending a

2762
00:52:09,190 --> 00:52:09,200
stylized case in which you're sending a
 

2763
00:52:09,200 --> 00:52:10,790
stylized case in which you're sending a
request and you want to get a response

2764
00:52:10,790 --> 00:52:10,800
request and you want to get a response
 

2765
00:52:10,800 --> 00:52:13,030
request and you want to get a response
back

2766
00:52:13,030 --> 00:52:13,040
back
 

2767
00:52:13,040 --> 00:52:15,109
back
you can strip this down to a

2768
00:52:15,109 --> 00:52:15,119
you can strip this down to a
 

2769
00:52:15,119 --> 00:52:16,069
you can strip this down to a
considerably

2770
00:52:16,069 --> 00:52:16,079
considerably
 

2771
00:52:16,079 --> 00:52:19,109
considerably
simpler design i mean in fact this is

2772
00:52:19,109 --> 00:52:19,119
simpler design i mean in fact this is
 

2773
00:52:19,119 --> 00:52:21,829
simpler design i mean in fact this is
the way l4 worked

2774
00:52:21,829 --> 00:52:21,839
the way l4 worked
 

2775
00:52:21,839 --> 00:52:25,190
the way l4 worked
and this was laid out in a famous paper

2776
00:52:25,190 --> 00:52:25,200
and this was laid out in a famous paper
 

2777
00:52:25,200 --> 00:52:27,990
and this was laid out in a famous paper
called improving ipc by kernel design

2778
00:52:27,990 --> 00:52:28,000
called improving ipc by kernel design
 

2779
00:52:28,000 --> 00:52:30,829
called improving ipc by kernel design
published a few years before today's

2780
00:52:30,829 --> 00:52:30,839
published a few years before today's
 

2781
00:52:30,839 --> 00:52:34,790
published a few years before today's
paper

2782
00:52:34,790 --> 00:52:34,800

 

2783
00:52:34,800 --> 00:52:37,030

so it does a couple things differently

2784
00:52:37,030 --> 00:52:37,040
so it does a couple things differently
 

2785
00:52:37,040 --> 00:52:39,190
so it does a couple things differently
for one thing

2786
00:52:39,190 --> 00:52:39,200
for one thing
 

2787
00:52:39,200 --> 00:52:42,390
for one thing
it's synchronous

2788
00:52:42,390 --> 00:52:42,400

 

2789
00:52:42,400 --> 00:52:46,470

that is um

2790
00:52:46,470 --> 00:52:46,480
that is um
 

2791
00:52:46,480 --> 00:52:50,150
that is um
there's none of this there's no uh

2792
00:52:50,150 --> 00:52:50,160

 

2793
00:52:50,160 --> 00:52:51,990

dropping something off and returning and

2794
00:52:51,990 --> 00:52:52,000
dropping something off and returning and
 

2795
00:52:52,000 --> 00:52:54,390
dropping something off and returning and
waiting letting the other guy

2796
00:52:54,390 --> 00:52:54,400
waiting letting the other guy
 

2797
00:52:54,400 --> 00:52:55,750
waiting letting the other guy
letting the other process pick up the

2798
00:52:55,750 --> 00:52:55,760
letting the other process pick up the
 

2799
00:52:55,760 --> 00:52:59,030
letting the other process pick up the
data uh when it feels like it instead

2800
00:52:59,030 --> 00:52:59,040
data uh when it feels like it instead
 

2801
00:52:59,040 --> 00:53:02,150
data uh when it feels like it instead
send waits for receive and receive waits

2802
00:53:02,150 --> 00:53:02,160
send waits for receive and receive waits
 

2803
00:53:02,160 --> 00:53:04,390
send waits for receive and receive waits
for sand so

2804
00:53:04,390 --> 00:53:04,400
for sand so
 

2805
00:53:04,400 --> 00:53:05,990
for sand so
if i'm process one and i want to send

2806
00:53:05,990 --> 00:53:06,000
if i'm process one and i want to send
 

2807
00:53:06,000 --> 00:53:11,190
if i'm process one and i want to send
and i call send

2808
00:53:11,190 --> 00:53:11,200

 

2809
00:53:11,200 --> 00:53:14,069

it it doesn't copy my message into a

2810
00:53:14,069 --> 00:53:14,079
it it doesn't copy my message into a
 

2811
00:53:14,079 --> 00:53:14,549
it it doesn't copy my message into a
buffer

2812
00:53:14,549 --> 00:53:14,559
buffer
 

2813
00:53:14,559 --> 00:53:19,430
buffer
it actually p1 will now immediately if

2814
00:53:19,430 --> 00:53:19,440
it actually p1 will now immediately if
 

2815
00:53:19,440 --> 00:53:22,630
it actually p1 will now immediately if
the p1 send in the l4 kernel waits for

2816
00:53:22,630 --> 00:53:22,640
the p1 send in the l4 kernel waits for
 

2817
00:53:22,640 --> 00:53:24,470
the p1 send in the l4 kernel waits for
p2 to call receive

2818
00:53:24,470 --> 00:53:24,480
p2 to call receive
 

2819
00:53:24,480 --> 00:53:26,870
p2 to call receive
and if p2 is already in the kernel

2820
00:53:26,870 --> 00:53:26,880
and if p2 is already in the kernel
 

2821
00:53:26,880 --> 00:53:28,549
and if p2 is already in the kernel
waiting on a call to receive

2822
00:53:28,549 --> 00:53:28,559
waiting on a call to receive
 

2823
00:53:28,559 --> 00:53:32,230
waiting on a call to receive
well p2 is either already in the kernel

2824
00:53:32,230 --> 00:53:32,240
well p2 is either already in the kernel
 

2825
00:53:32,240 --> 00:53:35,910
well p2 is either already in the kernel
waiting on a call to receive or

2826
00:53:35,910 --> 00:53:35,920
waiting on a call to receive or
 

2827
00:53:35,920 --> 00:53:38,470
waiting on a call to receive or
p1 send wait for it waits for p2's next

2828
00:53:38,470 --> 00:53:38,480
p1 send wait for it waits for p2's next
 

2829
00:53:38,480 --> 00:53:39,910
p1 send wait for it waits for p2's next
call to receive

2830
00:53:39,910 --> 00:53:39,920
call to receive
 

2831
00:53:39,920 --> 00:53:44,870
call to receive
when both have arrived here when p1 is

2832
00:53:44,870 --> 00:53:44,880
when both have arrived here when p1 is
 

2833
00:53:44,880 --> 00:53:46,069
when both have arrived here when p1 is
in the kernel and it's called the send

2834
00:53:46,069 --> 00:53:46,079
in the kernel and it's called the send
 

2835
00:53:46,079 --> 00:53:47,510
in the kernel and it's called the send
and p2's in the kernel is called to

2836
00:53:47,510 --> 00:53:47,520
and p2's in the kernel is called to
 

2837
00:53:47,520 --> 00:53:48,150
and p2's in the kernel is called to
receive

2838
00:53:48,150 --> 00:53:48,160
receive
 

2839
00:53:48,160 --> 00:53:52,630
receive
only then does anything happen and

2840
00:53:52,630 --> 00:53:52,640
only then does anything happen and
 

2841
00:53:52,640 --> 00:53:55,670
only then does anything happen and
one reason this is fast is that

2842
00:53:55,670 --> 00:53:55,680
one reason this is fast is that
 

2843
00:53:55,680 --> 00:53:59,990
one reason this is fast is that
if p2 is already in receive then p1

2844
00:53:59,990 --> 00:54:00,000
if p2 is already in receive then p1
 

2845
00:54:00,000 --> 00:54:01,990
if p2 is already in receive then p1
when it's executing send in the kernel

2846
00:54:01,990 --> 00:54:02,000
when it's executing send in the kernel
 

2847
00:54:02,000 --> 00:54:03,349
when it's executing send in the kernel
can just

2848
00:54:03,349 --> 00:54:03,359
can just
 

2849
00:54:03,359 --> 00:54:06,549
can just
without a context switch or a general

2850
00:54:06,549 --> 00:54:06,559
without a context switch or a general
 

2851
00:54:06,559 --> 00:54:07,670
without a context switch or a general
purpose scheduling

2852
00:54:07,670 --> 00:54:07,680
purpose scheduling
 

2853
00:54:07,680 --> 00:54:10,950
purpose scheduling
can just jump back into user space into

2854
00:54:10,950 --> 00:54:10,960
can just jump back into user space into
 

2855
00:54:10,960 --> 00:54:11,990
can just jump back into user space into
p2

2856
00:54:11,990 --> 00:54:12,000
p2
 

2857
00:54:12,000 --> 00:54:14,950
p2
as if it was returning from this receive

2858
00:54:14,950 --> 00:54:14,960
as if it was returning from this receive
 

2859
00:54:14,960 --> 00:54:16,790
as if it was returning from this receive
right and that's a much faster path to

2860
00:54:16,790 --> 00:54:16,800
right and that's a much faster path to
 

2861
00:54:16,800 --> 00:54:17,990
right and that's a much faster path to
the kernel

2862
00:54:17,990 --> 00:54:18,000
the kernel
 

2863
00:54:18,000 --> 00:54:20,549
the kernel
than you know saving registers giving up

2864
00:54:20,549 --> 00:54:20,559
than you know saving registers giving up
 

2865
00:54:20,559 --> 00:54:21,270
than you know saving registers giving up
the cpu

2866
00:54:21,270 --> 00:54:21,280
the cpu
 

2867
00:54:21,280 --> 00:54:24,309
the cpu
calling the scheduler and finding a new

2868
00:54:24,309 --> 00:54:24,319
calling the scheduler and finding a new
 

2869
00:54:24,319 --> 00:54:25,190
calling the scheduler and finding a new
process to run

2870
00:54:25,190 --> 00:54:25,200
process to run
 

2871
00:54:25,200 --> 00:54:28,630
process to run
instead p1 send knows that there's a

2872
00:54:28,630 --> 00:54:28,640
instead p1 send knows that there's a
 

2873
00:54:28,640 --> 00:54:30,470
instead p1 send knows that there's a
waiting receive

2874
00:54:30,470 --> 00:54:30,480
waiting receive
 

2875
00:54:30,480 --> 00:54:34,150
waiting receive
and just sort of immediately

2876
00:54:34,150 --> 00:54:34,160
and just sort of immediately
 

2877
00:54:34,160 --> 00:54:36,789
and just sort of immediately
jumps into p2 as if it was returning

2878
00:54:36,789 --> 00:54:36,799
jumps into p2 as if it was returning
 

2879
00:54:36,799 --> 00:54:40,789
jumps into p2 as if it was returning
from receive

2880
00:54:40,789 --> 00:54:40,799

 

2881
00:54:40,799 --> 00:54:42,630

the scheme that they developed is also

2882
00:54:42,630 --> 00:54:42,640
the scheme that they developed is also
 

2883
00:54:42,640 --> 00:54:47,510
the scheme that they developed is also
unbuffered

2884
00:54:47,510 --> 00:54:47,520

 

2885
00:54:47,520 --> 00:54:49,109

and it can do that partially because

2886
00:54:49,109 --> 00:54:49,119
and it can do that partially because
 

2887
00:54:49,119 --> 00:54:52,150
and it can do that partially because
it's synchronous

2888
00:54:52,150 --> 00:54:52,160
it's synchronous
 

2889
00:54:52,160 --> 00:54:54,390
it's synchronous
when both the send and the receive are

2890
00:54:54,390 --> 00:54:54,400
when both the send and the receive are
 

2891
00:54:54,400 --> 00:54:56,069
when both the send and the receive are
in the kernel

2892
00:54:56,069 --> 00:54:56,079
in the kernel
 

2893
00:54:56,079 --> 00:54:58,549
in the kernel
the message can be you know send is

2894
00:54:58,549 --> 00:54:58,559
the message can be you know send is
 

2895
00:54:58,559 --> 00:55:00,630
the message can be you know send is
sending some message

2896
00:55:00,630 --> 00:55:00,640
sending some message
 

2897
00:55:00,640 --> 00:55:02,470
sending some message
the kernel can directly copy the message

2898
00:55:02,470 --> 00:55:02,480
the kernel can directly copy the message
 

2899
00:55:02,480 --> 00:55:03,910
the kernel can directly copy the message
from user space

2900
00:55:03,910 --> 00:55:03,920
from user space
 

2901
00:55:03,920 --> 00:55:05,829
from user space
to user space without having to first

2902
00:55:05,829 --> 00:55:05,839
to user space without having to first
 

2903
00:55:05,839 --> 00:55:07,430
to user space without having to first
copy it into the kernel and then back

2904
00:55:07,430 --> 00:55:07,440
copy it into the kernel and then back
 

2905
00:55:07,440 --> 00:55:08,470
copy it into the kernel and then back
out of the kernel

2906
00:55:08,470 --> 00:55:08,480
out of the kernel
 

2907
00:55:08,480 --> 00:55:11,109
out of the kernel
because because since you know both

2908
00:55:11,109 --> 00:55:11,119
because because since you know both
 

2909
00:55:11,119 --> 00:55:12,390
because because since you know both
sides wait for the other

2910
00:55:12,390 --> 00:55:12,400
sides wait for the other
 

2911
00:55:12,400 --> 00:55:15,349
sides wait for the other
system call to happen that means that

2912
00:55:15,349 --> 00:55:15,359
system call to happen that means that
 

2913
00:55:15,359 --> 00:55:16,630
system call to happen that means that
they've waited for both

2914
00:55:16,630 --> 00:55:16,640
they've waited for both
 

2915
00:55:16,640 --> 00:55:19,030
they've waited for both
pointers to be known receive specifies

2916
00:55:19,030 --> 00:55:19,040
pointers to be known receive specifies
 

2917
00:55:19,040 --> 00:55:20,630
pointers to be known receive specifies
where it wants the

2918
00:55:20,630 --> 00:55:20,640
where it wants the
 

2919
00:55:20,640 --> 00:55:23,349
where it wants the
message to be deposited so at this point

2920
00:55:23,349 --> 00:55:23,359
message to be deposited so at this point
 

2921
00:55:23,359 --> 00:55:24,870
message to be deposited so at this point
we know both addresses then colonel can

2922
00:55:24,870 --> 00:55:24,880
we know both addresses then colonel can
 

2923
00:55:24,880 --> 00:55:26,230
we know both addresses then colonel can
just do the copy directly

2924
00:55:26,230 --> 00:55:26,240
just do the copy directly
 

2925
00:55:26,240 --> 00:55:31,030
just do the copy directly
instead of through the kernel

2926
00:55:31,030 --> 00:55:31,040

 

2927
00:55:31,040 --> 00:55:34,710

for and if the message is

2928
00:55:34,710 --> 00:55:34,720
for and if the message is
 

2929
00:55:34,720 --> 00:55:36,630
for and if the message is
super small like maybe only a few dozen

2930
00:55:36,630 --> 00:55:36,640
super small like maybe only a few dozen
 

2931
00:55:36,640 --> 00:55:38,549
super small like maybe only a few dozen
bytes then

2932
00:55:38,549 --> 00:55:38,559
bytes then
 

2933
00:55:38,559 --> 00:55:40,870
bytes then
uh it can be passed in registers without

2934
00:55:40,870 --> 00:55:40,880
uh it can be passed in registers without
 

2935
00:55:40,880 --> 00:55:43,349
uh it can be passed in registers without
any copy at all

2936
00:55:43,349 --> 00:55:43,359
any copy at all
 

2937
00:55:43,359 --> 00:55:49,910
any copy at all
um what you might call zero copy

2938
00:55:49,910 --> 00:55:49,920

 

2939
00:55:49,920 --> 00:55:52,789

remember the send only proceeds if p2 is

2940
00:55:52,789 --> 00:55:52,799
remember the send only proceeds if p2 is
 

2941
00:55:52,799 --> 00:55:54,470
remember the send only proceeds if p2 is
already in receive and it

2942
00:55:54,470 --> 00:55:54,480
already in receive and it
 

2943
00:55:54,480 --> 00:55:56,789
already in receive and it
the send basically jumps directly to p2

2944
00:55:56,789 --> 00:55:56,799
the send basically jumps directly to p2
 

2945
00:55:56,799 --> 00:55:59,510
the send basically jumps directly to p2
well this code path through the kernel

2946
00:55:59,510 --> 00:55:59,520
well this code path through the kernel
 

2947
00:55:59,520 --> 00:56:02,549
well this code path through the kernel
takes care to not disturb a bunch of the

2948
00:56:02,549 --> 00:56:02,559
takes care to not disturb a bunch of the
 

2949
00:56:02,559 --> 00:56:04,150
takes care to not disturb a bunch of the
registers

2950
00:56:04,150 --> 00:56:04,160
registers
 

2951
00:56:04,160 --> 00:56:05,670
registers
and that means that p1 can put its

2952
00:56:05,670 --> 00:56:05,680
and that means that p1 can put its
 

2953
00:56:05,680 --> 00:56:07,510
and that means that p1 can put its
system call if it's if the message is

2954
00:56:07,510 --> 00:56:07,520
system call if it's if the message is
 

2955
00:56:07,520 --> 00:56:07,990
system call if it's if the message is
short

2956
00:56:07,990 --> 00:56:08,000
short
 

2957
00:56:08,000 --> 00:56:10,390
short
it can put the message in certain

2958
00:56:10,390 --> 00:56:10,400
it can put the message in certain
 

2959
00:56:10,400 --> 00:56:11,990
it can put the message in certain
designated registers the kernel

2960
00:56:11,990 --> 00:56:12,000
designated registers the kernel
 

2961
00:56:12,000 --> 00:56:14,950
designated registers the kernel
guarantees to preserve those registers

2962
00:56:14,950 --> 00:56:14,960
guarantees to preserve those registers
 

2963
00:56:14,960 --> 00:56:18,390
guarantees to preserve those registers
on its way up to p2 and that means that

2964
00:56:18,390 --> 00:56:18,400
on its way up to p2 and that means that
 

2965
00:56:18,400 --> 00:56:21,109
on its way up to p2 and that means that
when the kernel returns from the receive

2966
00:56:21,109 --> 00:56:21,119
when the kernel returns from the receive
 

2967
00:56:21,119 --> 00:56:22,230
when the kernel returns from the receive
system call but

2968
00:56:22,230 --> 00:56:22,240
system call but
 

2969
00:56:22,240 --> 00:56:24,470
system call but
as a result of send the contents of

2970
00:56:24,470 --> 00:56:24,480
as a result of send the contents of
 

2971
00:56:24,480 --> 00:56:25,270
as a result of send the contents of
those

2972
00:56:25,270 --> 00:56:25,280
those
 

2973
00:56:25,280 --> 00:56:28,549
those
designated registers hold the message

2974
00:56:28,549 --> 00:56:28,559
designated registers hold the message
 

2975
00:56:28,559 --> 00:56:30,150
designated registers hold the message
and therefore never had to be copied at

2976
00:56:30,150 --> 00:56:30,160
and therefore never had to be copied at
 

2977
00:56:30,160 --> 00:56:31,829
and therefore never had to be copied at
all from memory to memory

2978
00:56:31,829 --> 00:56:31,839
all from memory to memory
 

2979
00:56:31,839 --> 00:56:33,270
all from memory to memory
um never had to be moved at all they're

2980
00:56:33,270 --> 00:56:33,280
um never had to be moved at all they're
 

2981
00:56:33,280 --> 00:56:34,549
um never had to be moved at all they're
just sitting right in the registers

2982
00:56:34,549 --> 00:56:34,559
just sitting right in the registers
 

2983
00:56:34,559 --> 00:56:35,589
just sitting right in the registers
where they can be accessed

2984
00:56:35,589 --> 00:56:35,599
where they can be accessed
 

2985
00:56:35,599 --> 00:56:39,030
where they can be accessed
very quickly um

2986
00:56:39,030 --> 00:56:39,040
very quickly um
 

2987
00:56:39,040 --> 00:56:40,069
very quickly um
and this you know of course this only

2988
00:56:40,069 --> 00:56:40,079
and this you know of course this only
 

2989
00:56:40,079 --> 00:56:42,549
and this you know of course this only
works for small messages

2990
00:56:42,549 --> 00:56:42,559
works for small messages
 

2991
00:56:42,559 --> 00:56:45,670
works for small messages
for very large messages l4

2992
00:56:45,670 --> 00:56:45,680
for very large messages l4
 

2993
00:56:45,680 --> 00:56:48,630
for very large messages l4
could carry a page mapping in an ipc

2994
00:56:48,630 --> 00:56:48,640
could carry a page mapping in an ipc
 

2995
00:56:48,640 --> 00:56:49,589
could carry a page mapping in an ipc
message so for

2996
00:56:49,589 --> 00:56:49,599
message so for
 

2997
00:56:49,599 --> 00:56:53,510
message so for
for huge messages um

2998
00:56:53,510 --> 00:56:53,520
for huge messages um
 

2999
00:56:53,520 --> 00:56:54,950
for huge messages um
you know like the result of reading a

3000
00:56:54,950 --> 00:56:54,960
you know like the result of reading a
 

3001
00:56:54,960 --> 00:56:56,829
you know like the result of reading a
block from a file or something

3002
00:56:56,829 --> 00:56:56,839
block from a file or something
 

3003
00:56:56,839 --> 00:57:00,630
block from a file or something
um you could just

3004
00:57:00,630 --> 00:57:00,640
um you could just
 

3005
00:57:00,640 --> 00:57:02,150
um you could just
send the page and it'll be mapped into

3006
00:57:02,150 --> 00:57:02,160
send the page and it'll be mapped into
 

3007
00:57:02,160 --> 00:57:04,150
send the page and it'll be mapped into
the target's address space again

3008
00:57:04,150 --> 00:57:04,160
the target's address space again
 

3009
00:57:04,160 --> 00:57:08,069
the target's address space again
without any copy so this is done through

3010
00:57:08,069 --> 00:57:08,079
without any copy so this is done through
 

3011
00:57:08,079 --> 00:57:11,430
without any copy so this is done through
page mapping give away the page

3012
00:57:11,430 --> 00:57:11,440
page mapping give away the page
 

3013
00:57:11,440 --> 00:57:14,630
page mapping give away the page
or access to a copy to

3014
00:57:14,630 --> 00:57:14,640
or access to a copy to
 

3015
00:57:14,640 --> 00:57:18,230
or access to a copy to
access to permission to share the page

3016
00:57:18,230 --> 00:57:18,240
access to permission to share the page
 

3017
00:57:18,240 --> 00:57:20,789
access to permission to share the page
and so if small messages are fast uh

3018
00:57:20,789 --> 00:57:20,799
and so if small messages are fast uh
 

3019
00:57:20,799 --> 00:57:22,470
and so if small messages are fast uh
huge messages are pretty fast you know

3020
00:57:22,470 --> 00:57:22,480
huge messages are pretty fast you know
 

3021
00:57:22,480 --> 00:57:23,829
huge messages are pretty fast you know
you still have to adjust the page table

3022
00:57:23,829 --> 00:57:23,839
you still have to adjust the page table
 

3023
00:57:23,839 --> 00:57:24,870
you still have to adjust the page table
of the target but

3024
00:57:24,870 --> 00:57:24,880
of the target but
 

3025
00:57:24,880 --> 00:57:27,349
of the target but
that's much faster than copying and a

3026
00:57:27,349 --> 00:57:27,359
that's much faster than copying and a
 

3027
00:57:27,359 --> 00:57:28,390
that's much faster than copying and a
final trick that

3028
00:57:28,390 --> 00:57:28,400
final trick that
 

3029
00:57:28,400 --> 00:57:32,470
final trick that
l4 played was noticing that

3030
00:57:32,470 --> 00:57:32,480
l4 played was noticing that
 

3031
00:57:32,480 --> 00:57:34,069
l4 played was noticing that
if you're doing an rpc with a request

3032
00:57:34,069 --> 00:57:34,079
if you're doing an rpc with a request
 

3033
00:57:34,079 --> 00:57:36,230
if you're doing an rpc with a request
and a response there's a very stylized

3034
00:57:36,230 --> 00:57:36,240
and a response there's a very stylized
 

3035
00:57:36,240 --> 00:57:37,109
and a response there's a very stylized
pairs

3036
00:57:37,109 --> 00:57:37,119
pairs
 

3037
00:57:37,119 --> 00:57:40,309
pairs
of um

3038
00:57:40,309 --> 00:57:40,319
of um
 

3039
00:57:40,319 --> 00:57:42,950
of um
uh system calls and you may as well

3040
00:57:42,950 --> 00:57:42,960
uh system calls and you may as well
 

3041
00:57:42,960 --> 00:57:43,829
uh system calls and you may as well
combine

3042
00:57:43,829 --> 00:57:43,839
combine
 

3043
00:57:43,839 --> 00:57:45,910
combine
system calls send and receive system

3044
00:57:45,910 --> 00:57:45,920
system calls send and receive system
 

3045
00:57:45,920 --> 00:57:47,349
system calls send and receive system
calls in order to

3046
00:57:47,349 --> 00:57:47,359
calls in order to
 

3047
00:57:47,359 --> 00:57:50,069
calls in order to
reduce kernel crossings so um for the

3048
00:57:50,069 --> 00:57:50,079
reduce kernel crossings so um for the
 

3049
00:57:50,079 --> 00:57:52,230
reduce kernel crossings so um for the
special case of rpc which is

3050
00:57:52,230 --> 00:57:52,240
special case of rpc which is
 

3051
00:57:52,240 --> 00:57:55,510
special case of rpc which is
almost always what people are doing

3052
00:57:55,510 --> 00:57:55,520
almost always what people are doing
 

3053
00:57:55,520 --> 00:57:57,750
almost always what people are doing
when they're using ipc there was a call

3054
00:57:57,750 --> 00:57:57,760
when they're using ipc there was a call
 

3055
00:57:57,760 --> 00:58:00,710
when they're using ipc there was a call
system call

3056
00:58:00,710 --> 00:58:00,720

 

3057
00:58:00,720 --> 00:58:05,109

and a call was basically a combined send

3058
00:58:05,109 --> 00:58:05,119
and a call was basically a combined send
 

3059
00:58:05,119 --> 00:58:08,470
and a call was basically a combined send
plus receive

3060
00:58:08,470 --> 00:58:08,480
plus receive
 

3061
00:58:08,480 --> 00:58:09,990
plus receive
you know but without the return to user

3062
00:58:09,990 --> 00:58:10,000
you know but without the return to user
 

3063
00:58:10,000 --> 00:58:11,750
you know but without the return to user
space and then

3064
00:58:11,750 --> 00:58:11,760
space and then
 

3065
00:58:11,760 --> 00:58:13,670
space and then
re-entry into kernel space that a pair

3066
00:58:13,670 --> 00:58:13,680
re-entry into kernel space that a pair
 

3067
00:58:13,680 --> 00:58:15,670
re-entry into kernel space that a pair
of system

3068
00:58:15,670 --> 00:58:15,680
of system
 

3069
00:58:15,680 --> 00:58:18,630
of system
calls would take um and on the server

3070
00:58:18,630 --> 00:58:18,640
calls would take um and on the server
 

3071
00:58:18,640 --> 00:58:21,430
calls would take um and on the server
side there was a um

3072
00:58:21,430 --> 00:58:21,440
side there was a um
 

3073
00:58:21,440 --> 00:58:24,470
side there was a um
a single call that would send the reply

3074
00:58:24,470 --> 00:58:24,480
a single call that would send the reply
 

3075
00:58:24,480 --> 00:58:28,390
a single call that would send the reply
um from one system call and then

3076
00:58:28,390 --> 00:58:28,400
um from one system call and then
 

3077
00:58:28,400 --> 00:58:31,829
um from one system call and then
wait for uh the request message

3078
00:58:31,829 --> 00:58:31,839
wait for uh the request message
 

3079
00:58:31,839 --> 00:58:34,710
wait for uh the request message
from anyone for the next system call and

3080
00:58:34,710 --> 00:58:34,720
from anyone for the next system call and
 

3081
00:58:34,720 --> 00:58:36,630
from anyone for the next system call and
this is basically ascend of

3082
00:58:36,630 --> 00:58:36,640
this is basically ascend of
 

3083
00:58:36,640 --> 00:58:39,430
this is basically ascend of
one response plus a wait to receive the

3084
00:58:39,430 --> 00:58:39,440
one response plus a wait to receive the
 

3085
00:58:39,440 --> 00:58:40,549
one response plus a wait to receive the
next request

3086
00:58:40,549 --> 00:58:40,559
next request
 

3087
00:58:40,559 --> 00:58:42,150
next request
and this again cut in half the number of

3088
00:58:42,150 --> 00:58:42,160
and this again cut in half the number of
 

3089
00:58:42,160 --> 00:58:44,549
and this again cut in half the number of
kernel crossings

3090
00:58:44,549 --> 00:58:44,559
kernel crossings
 

3091
00:58:44,559 --> 00:58:47,270
kernel crossings
and it turned out that uh the sum of all

3092
00:58:47,270 --> 00:58:47,280
and it turned out that uh the sum of all
 

3093
00:58:47,280 --> 00:58:48,829
and it turned out that uh the sum of all
of these

3094
00:58:48,829 --> 00:58:48,839
of these
 

3095
00:58:48,839 --> 00:58:51,670
of these
optimizations now for the kind of short

3096
00:58:51,670 --> 00:58:51,680
optimizations now for the kind of short
 

3097
00:58:51,680 --> 00:58:55,030
optimizations now for the kind of short
rpcs which

3098
00:58:55,030 --> 00:58:55,040

 

3099
00:58:55,040 --> 00:58:57,670

are you know one typical workload all

3100
00:58:57,670 --> 00:58:57,680
are you know one typical workload all
 

3101
00:58:57,680 --> 00:59:00,870
are you know one typical workload all
this led to a

3102
00:59:00,870 --> 00:59:00,880
this led to a
 

3103
00:59:00,880 --> 00:59:04,150
this led to a
20x speed up this is what their paper

3104
00:59:04,150 --> 00:59:04,160
20x speed up this is what their paper
 

3105
00:59:04,160 --> 00:59:05,750
20x speed up this is what their paper
reported 20 x speed up over their

3106
00:59:05,750 --> 00:59:05,760
reported 20 x speed up over their
 

3107
00:59:05,760 --> 00:59:07,589
reported 20 x speed up over their
previous system which was

3108
00:59:07,589 --> 00:59:07,599
previous system which was
 

3109
00:59:07,599 --> 00:59:09,030
previous system which was
presumably a little bit more like what i

3110
00:59:09,030 --> 00:59:09,040
presumably a little bit more like what i
 

3111
00:59:09,040 --> 00:59:12,710
presumably a little bit more like what i
showed in the previous design

3112
00:59:12,710 --> 00:59:12,720
showed in the previous design
 

3113
00:59:12,720 --> 00:59:16,150
showed in the previous design
and so this was an impressive

3114
00:59:16,150 --> 00:59:16,160

 

3115
00:59:16,160 --> 00:59:17,990

this paper came out a few years before

3116
00:59:17,990 --> 00:59:18,000
this paper came out a few years before
 

3117
00:59:18,000 --> 00:59:19,829
this paper came out a few years before
the by the some of the same authors

3118
00:59:19,829 --> 00:59:19,839
the by the some of the same authors
 

3119
00:59:19,839 --> 00:59:21,109
the by the some of the same authors
but a few years before the people were

3120
00:59:21,109 --> 00:59:21,119
but a few years before the people were
 

3121
00:59:21,119 --> 00:59:23,510
but a few years before the people were
reading and this caused people to

3122
00:59:23,510 --> 00:59:23,520
reading and this caused people to
 

3123
00:59:23,520 --> 00:59:26,309
reading and this caused people to
um view microkernels a little bit more

3124
00:59:26,309 --> 00:59:26,319
um view microkernels a little bit more
 

3125
00:59:26,319 --> 00:59:27,829
um view microkernels a little bit more
favorably

3126
00:59:27,829 --> 00:59:27,839
favorably
 

3127
00:59:27,839 --> 00:59:29,349
favorably
that the ipc could actually be made

3128
00:59:29,349 --> 00:59:29,359
that the ipc could actually be made
 

3129
00:59:29,359 --> 00:59:32,069
that the ipc could actually be made
quite fast

3130
00:59:32,069 --> 00:59:32,079
quite fast
 

3131
00:59:32,079 --> 00:59:35,670
quite fast
any questions about um these ipc tricks

3132
00:59:35,670 --> 00:59:35,680
any questions about um these ipc tricks
 

3133
00:59:35,680 --> 00:59:36,390
any questions about um these ipc tricks
that

3134
00:59:36,390 --> 00:59:36,400
that
 

3135
00:59:36,400 --> 00:59:39,829
that
l4 plays yeah i

3136
00:59:39,829 --> 00:59:39,839
l4 plays yeah i
 

3137
00:59:39,839 --> 00:59:42,150
l4 plays yeah i
i think i missed this but um when is the

3138
00:59:42,150 --> 00:59:42,160
i think i missed this but um when is the
 

3139
00:59:42,160 --> 00:59:42,950
i think i missed this but um when is the
process

3140
00:59:42,950 --> 00:59:42,960
process
 

3141
00:59:42,960 --> 00:59:45,829
process
uh sending the or like receiving uh

3142
00:59:45,829 --> 00:59:45,839
uh sending the or like receiving uh
 

3143
00:59:45,839 --> 00:59:46,789
uh sending the or like receiving uh
messages

3144
00:59:46,789 --> 00:59:46,799
messages
 

3145
00:59:46,799 --> 00:59:50,150
messages
like when is it using that system call

3146
00:59:50,150 --> 00:59:50,160
like when is it using that system call
 

3147
00:59:50,160 --> 00:59:52,870
like when is it using that system call
okay actually so for rpcs for request

3148
00:59:52,870 --> 00:59:52,880
okay actually so for rpcs for request
 

3149
00:59:52,880 --> 00:59:53,990
okay actually so for rpcs for request
response

3150
00:59:53,990 --> 00:59:54,000
response
 

3151
00:59:54,000 --> 00:59:57,670
response
in fact in fact the the

3152
00:59:57,670 --> 00:59:57,680
in fact in fact the the
 

3153
00:59:57,680 --> 01:00:00,870
in fact in fact the the
processes use this pair of of system

3154
01:00:00,870 --> 01:00:00,880
processes use this pair of of system
 

3155
01:00:00,880 --> 01:00:01,430
processes use this pair of of system
calls

3156
01:00:01,430 --> 01:00:01,440
calls
 

3157
01:00:01,440 --> 01:00:04,710
calls
rather than send and receive so yeah

3158
01:00:04,710 --> 01:00:04,720
rather than send and receive so yeah
 

3159
01:00:04,720 --> 01:00:06,150
rather than send and receive so yeah
call

3160
01:00:06,150 --> 01:00:06,160
call
 

3161
01:00:06,160 --> 01:00:07,270
call
you really give it two arguments a

3162
01:00:07,270 --> 01:00:07,280
you really give it two arguments a
 

3163
01:00:07,280 --> 01:00:09,670
you really give it two arguments a
message you want to send and a place to

3164
01:00:09,670 --> 01:00:09,680
message you want to send and a place to
 

3165
01:00:09,680 --> 01:00:11,190
message you want to send and a place to
put the response

3166
01:00:11,190 --> 01:00:11,200
put the response
 

3167
01:00:11,200 --> 01:00:12,870
put the response
and inside the kernel it just combines

3168
01:00:12,870 --> 01:00:12,880
and inside the kernel it just combines
 

3169
01:00:12,880 --> 01:00:14,710
and inside the kernel it just combines
these two now you could view this as a

3170
01:00:14,710 --> 01:00:14,720
these two now you could view this as a
 

3171
01:00:14,720 --> 01:00:15,349
these two now you could view this as a
bit of a hack

3172
01:00:15,349 --> 01:00:15,359
bit of a hack
 

3173
01:00:15,359 --> 01:00:19,910
bit of a hack
but um because ipc is so frequent

3174
01:00:19,910 --> 01:00:19,920
but um because ipc is so frequent
 

3175
01:00:19,920 --> 01:00:22,230
but um because ipc is so frequent
it's worth a little bit of hackery in

3176
01:00:22,230 --> 01:00:22,240
it's worth a little bit of hackery in
 

3177
01:00:22,240 --> 01:00:23,510
it's worth a little bit of hackery in
order

3178
01:00:23,510 --> 01:00:23,520
order
 

3179
01:00:23,520 --> 01:00:26,870
order
to make it be fast and in the diagram um

3180
01:00:26,870 --> 01:00:26,880
to make it be fast and in the diagram um
 

3181
01:00:26,880 --> 01:00:29,589
to make it be fast and in the diagram um
up there in the box where um you have p2

3182
01:00:29,589 --> 01:00:29,599
up there in the box where um you have p2
 

3183
01:00:29,599 --> 01:00:30,710
up there in the box where um you have p2
sending that or like

3184
01:00:30,710 --> 01:00:30,720
sending that or like
 

3185
01:00:30,720 --> 01:00:33,750
sending that or like
running the receive system call why what

3186
01:00:33,750 --> 01:00:33,760
running the receive system call why what
 

3187
01:00:33,760 --> 01:00:37,589
running the receive system call why what
what prompted p2 to okay

3188
01:00:37,589 --> 01:00:37,599
what prompted p2 to okay
 

3189
01:00:37,599 --> 01:00:40,870
what prompted p2 to okay
in in uh in my rbc world uh we got a we

3190
01:00:40,870 --> 01:00:40,880
in in uh in my rbc world uh we got a we
 

3191
01:00:40,880 --> 01:00:43,750
in in uh in my rbc world uh we got a we
have clients

3192
01:00:43,750 --> 01:00:43,760
have clients
 

3193
01:00:43,760 --> 01:00:47,510
have clients
and they're sending requests to servers

3194
01:00:47,510 --> 01:00:47,520
and they're sending requests to servers
 

3195
01:00:47,520 --> 01:00:50,950
and they're sending requests to servers
um and the server is gonna do something

3196
01:00:50,950 --> 01:00:50,960
um and the server is gonna do something
 

3197
01:00:50,960 --> 01:00:52,470
um and the server is gonna do something
and reply so

3198
01:00:52,470 --> 01:00:52,480
and reply so
 

3199
01:00:52,480 --> 01:00:54,789
and reply so
since p2 is a server we imagine that p2

3200
01:00:54,789 --> 01:00:54,799
since p2 is a server we imagine that p2
 

3201
01:00:54,799 --> 01:00:56,150
since p2 is a server we imagine that p2
is sitting on a while loop

3202
01:00:56,150 --> 01:00:56,160
is sitting on a while loop
 

3203
01:00:56,160 --> 01:00:57,910
is sitting on a while loop
in which it in which it's going to

3204
01:00:57,910 --> 01:00:57,920
in which it in which it's going to
 

3205
01:00:57,920 --> 01:00:59,990
in which it in which it's going to
receive the next message from any client

3206
01:00:59,990 --> 01:01:00,000
receive the next message from any client
 

3207
01:01:00,000 --> 01:01:01,430
receive the next message from any client
do a little bit of work to process it

3208
01:01:01,430 --> 01:01:01,440
do a little bit of work to process it
 

3209
01:01:01,440 --> 01:01:02,950
do a little bit of work to process it
you know look up some data in a database

3210
01:01:02,950 --> 01:01:02,960
you know look up some data in a database
 

3211
01:01:02,960 --> 01:01:04,390
you know look up some data in a database
or something and then send a reply

3212
01:01:04,390 --> 01:01:04,400
or something and then send a reply
 

3213
01:01:04,400 --> 01:01:05,829
or something and then send a reply
and go back to the top of the loop and

3214
01:01:05,829 --> 01:01:05,839
and go back to the top of the loop and
 

3215
01:01:05,839 --> 01:01:08,630
and go back to the top of the loop and
wait again so to a first approximation

3216
01:01:08,630 --> 01:01:08,640
wait again so to a first approximation
 

3217
01:01:08,640 --> 01:01:12,230
wait again so to a first approximation
we expect p2 to spend all its time

3218
01:01:12,230 --> 01:01:12,240
we expect p2 to spend all its time
 

3219
01:01:12,240 --> 01:01:15,030
we expect p2 to spend all its time
uh waiting for the next message from

3220
01:01:15,030 --> 01:01:15,040
uh waiting for the next message from
 

3221
01:01:15,040 --> 01:01:15,750
uh waiting for the next message from
anyone

3222
01:01:15,750 --> 01:01:15,760
anyone
 

3223
01:01:15,760 --> 01:01:19,030
anyone
next request from anyone

3224
01:01:19,030 --> 01:01:19,040
next request from anyone
 

3225
01:01:19,040 --> 01:01:22,230
next request from anyone
and this design really

3226
01:01:22,230 --> 01:01:22,240
and this design really
 

3227
01:01:22,240 --> 01:01:26,309
and this design really
um it does kind of rely on p2 always

3228
01:01:26,309 --> 01:01:26,319
um it does kind of rely on p2 always
 

3229
01:01:26,319 --> 01:01:28,230
um it does kind of rely on p2 always
at when it's at rest basically sitting

3230
01:01:28,230 --> 01:01:28,240
at when it's at rest basically sitting
 

3231
01:01:28,240 --> 01:01:30,870
at when it's at rest basically sitting
in the kernel in a receive system call

3232
01:01:30,870 --> 01:01:30,880
in the kernel in a receive system call
 

3233
01:01:30,880 --> 01:01:33,750
in the kernel in a receive system call
waiting for the next request so that the

3234
01:01:33,750 --> 01:01:33,760
waiting for the next request so that the
 

3235
01:01:33,760 --> 01:01:35,349
waiting for the next request so that the
next request

3236
01:01:35,349 --> 01:01:35,359
next request
 

3237
01:01:35,359 --> 01:01:39,190
next request
can directly basically return from that

3238
01:01:39,190 --> 01:01:39,200
can directly basically return from that
 

3239
01:01:39,200 --> 01:01:40,390
can directly basically return from that
system call

3240
01:01:40,390 --> 01:01:40,400
system call
 

3241
01:01:40,400 --> 01:01:42,870
system call
right and that's the fast path that's

3242
01:01:42,870 --> 01:01:42,880
right and that's the fast path that's
 

3243
01:01:42,880 --> 01:01:43,750
right and that's the fast path that's
super efficient

3244
01:01:43,750 --> 01:01:43,760
super efficient
 

3245
01:01:43,760 --> 01:01:48,470
super efficient
in this design cool thank you

3246
01:01:48,470 --> 01:01:48,480

 

3247
01:01:48,480 --> 01:01:50,710

sorry just to follow up on that that

3248
01:01:50,710 --> 01:01:50,720
sorry just to follow up on that that
 

3249
01:01:50,720 --> 01:01:52,150
sorry just to follow up on that that
means that um

3250
01:01:52,150 --> 01:01:52,160
means that um
 

3251
01:01:52,160 --> 01:01:54,069
means that um
you said that it goes from p1 it like

3252
01:01:54,069 --> 01:01:54,079
you said that it goes from p1 it like
 

3253
01:01:54,079 --> 01:01:55,910
you said that it goes from p1 it like
returns to p2

3254
01:01:55,910 --> 01:01:55,920
returns to p2
 

3255
01:01:55,920 --> 01:01:58,309
returns to p2
so like to come back you would need to

3256
01:01:58,309 --> 01:01:58,319
so like to come back you would need to
 

3257
01:01:58,319 --> 01:01:59,750
so like to come back you would need to
send the response

3258
01:01:59,750 --> 01:01:59,760
send the response
 

3259
01:01:59,760 --> 01:02:03,109
send the response
so that's right we expect p2 to

3260
01:02:03,109 --> 01:02:03,119
so that's right we expect p2 to
 

3261
01:02:03,119 --> 01:02:06,630
so that's right we expect p2 to
um send a response and and that sending

3262
01:02:06,630 --> 01:02:06,640
um send a response and and that sending
 

3263
01:02:06,640 --> 01:02:07,589
um send a response and and that sending
of the response actually

3264
01:02:07,589 --> 01:02:07,599
of the response actually
 

3265
01:02:07,599 --> 01:02:09,670
of the response actually
follows basically the same code path in

3266
01:02:09,670 --> 01:02:09,680
follows basically the same code path in
 

3267
01:02:09,680 --> 01:02:12,470
follows basically the same code path in
reverse so that when p2 sends a response

3268
01:02:12,470 --> 01:02:12,480
reverse so that when p2 sends a response
 

3269
01:02:12,480 --> 01:02:16,230
reverse so that when p2 sends a response
um that that effectively causes p1 to

3270
01:02:16,230 --> 01:02:16,240
um that that effectively causes p1 to
 

3271
01:02:16,240 --> 01:02:16,950
um that that effectively causes p1 to
return

3272
01:02:16,950 --> 01:02:16,960
return
 

3273
01:02:16,960 --> 01:02:19,990
return
from i mean p1 is actually making this

3274
01:02:19,990 --> 01:02:20,000
from i mean p1 is actually making this
 

3275
01:02:20,000 --> 01:02:23,109
from i mean p1 is actually making this
call system call so the delivery of p2's

3276
01:02:23,109 --> 01:02:23,119
call system call so the delivery of p2's
 

3277
01:02:23,119 --> 01:02:24,470
call system call so the delivery of p2's
response

3278
01:02:24,470 --> 01:02:24,480
response
 

3279
01:02:24,480 --> 01:02:26,630
response
causes the call the return from this

3280
01:02:26,630 --> 01:02:26,640
causes the call the return from this
 

3281
01:02:26,640 --> 01:02:29,510
causes the call the return from this
from this system call back into p1

3282
01:02:29,510 --> 01:02:29,520
from this system call back into p1
 

3283
01:02:29,520 --> 01:02:32,710
from this system call back into p1
okay i see thank you you know this is a

3284
01:02:32,710 --> 01:02:32,720
okay i see thank you you know this is a
 

3285
01:02:32,720 --> 01:02:33,829
okay i see thank you you know this is a
little bit different from the usual

3286
01:02:33,829 --> 01:02:33,839
little bit different from the usual
 

3287
01:02:33,839 --> 01:02:35,029
little bit different from the usual
setup where you think of

3288
01:02:35,029 --> 01:02:35,039
setup where you think of
 

3289
01:02:35,039 --> 01:02:36,789
setup where you think of
you know you jump into the kernel on a

3290
01:02:36,789 --> 01:02:36,799
you know you jump into the kernel on a
 

3291
01:02:36,799 --> 01:02:38,230
you know you jump into the kernel on a
system call and you execute that system

3292
01:02:38,230 --> 01:02:38,240
system call and you execute that system
 

3293
01:02:38,240 --> 01:02:39,430
system call and you execute that system
call and it returns

3294
01:02:39,430 --> 01:02:39,440
call and it returns
 

3295
01:02:39,440 --> 01:02:41,430
call and it returns
sort of all working on behalf of p1

3296
01:02:41,430 --> 01:02:41,440
sort of all working on behalf of p1
 

3297
01:02:41,440 --> 01:02:42,470
sort of all working on behalf of p1
which is the way pipe

3298
01:02:42,470 --> 01:02:42,480
which is the way pipe
 

3299
01:02:42,480 --> 01:02:45,029
which is the way pipe
read and write work here you know p1 is

3300
01:02:45,029 --> 01:02:45,039
read and write work here you know p1 is
 

3301
01:02:45,039 --> 01:02:46,309
read and write work here you know p1 is
entering the kernel

3302
01:02:46,309 --> 01:02:46,319
entering the kernel
 

3303
01:02:46,319 --> 01:02:49,589
entering the kernel
you know it's p1 entering the kernel

3304
01:02:49,589 --> 01:02:49,599
you know it's p1 entering the kernel
 

3305
01:02:49,599 --> 01:02:51,670
you know it's p1 entering the kernel
you know but the return goes to p2 so

3306
01:02:51,670 --> 01:02:51,680
you know but the return goes to p2 so
 

3307
01:02:51,680 --> 01:02:53,589
you know but the return goes to p2 so
it's

3308
01:02:53,589 --> 01:02:53,599
it's
 

3309
01:02:53,599 --> 01:03:02,549
it's
kind of odd but very fast

3310
01:03:02,549 --> 01:03:02,559
kind of odd but very fast
 

3311
01:03:02,559 --> 01:03:06,309
kind of odd but very fast
okay um so this was a big

3312
01:03:06,309 --> 01:03:06,319
okay um so this was a big
 

3313
01:03:06,319 --> 01:03:10,069
okay um so this was a big
uh big sort of uh contribution to people

3314
01:03:10,069 --> 01:03:10,079
uh big sort of uh contribution to people
 

3315
01:03:10,079 --> 01:03:13,670
uh big sort of uh contribution to people
uh taking microkernels um

3316
01:03:13,670 --> 01:03:13,680

 

3317
01:03:13,680 --> 01:03:14,710

people's willingness to take

3318
01:03:14,710 --> 01:03:14,720
people's willingness to take
 

3319
01:03:14,720 --> 01:03:17,270
people's willingness to take
microkernels seriously as potentially a

3320
01:03:17,270 --> 01:03:17,280
microkernels seriously as potentially a
 

3321
01:03:17,280 --> 01:03:18,950
microkernels seriously as potentially a
replacement for uh

3322
01:03:18,950 --> 01:03:18,960
replacement for uh
 

3323
01:03:18,960 --> 01:03:21,910
replacement for uh
monolithic kernels um however you know

3324
01:03:21,910 --> 01:03:21,920
monolithic kernels um however you know
 

3325
01:03:21,920 --> 01:03:22,950
monolithic kernels um however you know
you still have to

3326
01:03:22,950 --> 01:03:22,960
you still have to
 

3327
01:03:22,960 --> 01:03:24,549
you still have to
still leave open the question even if

3328
01:03:24,549 --> 01:03:24,559
still leave open the question even if
 

3329
01:03:24,559 --> 01:03:26,309
still leave open the question even if
rpc's fast like where do you get the

3330
01:03:26,309 --> 01:03:26,319
rpc's fast like where do you get the
 

3331
01:03:26,319 --> 01:03:27,670
rpc's fast like where do you get the
rest of the operating system

3332
01:03:27,670 --> 01:03:27,680
rest of the operating system
 

3333
01:03:27,680 --> 01:03:29,670
rest of the operating system
right you know this kernel only has like

3334
01:03:29,670 --> 01:03:29,680
right you know this kernel only has like
 

3335
01:03:29,680 --> 01:03:31,829
right you know this kernel only has like
a few percent of all the stuff like file

3336
01:03:31,829 --> 01:03:31,839
a few percent of all the stuff like file
 

3337
01:03:31,839 --> 01:03:33,430
a few percent of all the stuff like file
systems and network stacks we expect to

3338
01:03:33,430 --> 01:03:33,440
systems and network stacks we expect to
 

3339
01:03:33,440 --> 01:03:33,990
systems and network stacks we expect to
be

3340
01:03:33,990 --> 01:03:34,000
be
 

3341
01:03:34,000 --> 01:03:36,069
be
in a full operating system what do we do

3342
01:03:36,069 --> 01:03:36,079
in a full operating system what do we do
 

3343
01:03:36,079 --> 01:03:37,190
in a full operating system what do we do
about the rest

3344
01:03:37,190 --> 01:03:37,200
about the rest
 

3345
01:03:37,200 --> 01:03:39,109
about the rest
um and this question is usually being

3346
01:03:39,109 --> 01:03:39,119
um and this question is usually being
 

3347
01:03:39,119 --> 01:03:41,190
um and this question is usually being
asked in the context of some

3348
01:03:41,190 --> 01:03:41,200
asked in the context of some
 

3349
01:03:41,200 --> 01:03:42,789
asked in the context of some
university research project with

3350
01:03:42,789 --> 01:03:42,799
university research project with
 

3351
01:03:42,799 --> 01:03:46,870
university research project with
relatively limited resources

3352
01:03:46,870 --> 01:03:46,880

 

3353
01:03:46,880 --> 01:03:49,510

we need to get all those user level

3354
01:03:49,510 --> 01:03:49,520
we need to get all those user level
 

3355
01:03:49,520 --> 01:03:51,990
we need to get all those user level
services from somewhere

3356
01:03:51,990 --> 01:03:52,000
services from somewhere
 

3357
01:03:52,000 --> 01:03:54,150
services from somewhere
now actually there are specialized

3358
01:03:54,150 --> 01:03:54,160
now actually there are specialized
 

3359
01:03:54,160 --> 01:03:55,589
now actually there are specialized
applications for which that's not too

3360
01:03:55,589 --> 01:03:55,599
applications for which that's not too
 

3361
01:03:55,599 --> 01:03:57,190
applications for which that's not too
much of a problem if we're

3362
01:03:57,190 --> 01:03:57,200
much of a problem if we're
 

3363
01:03:57,200 --> 01:03:59,670
much of a problem if we're
you know running a you know some sort of

3364
01:03:59,670 --> 01:03:59,680
you know running a you know some sort of
 

3365
01:03:59,680 --> 01:04:01,109
you know running a you know some sort of
device you know controller

3366
01:04:01,109 --> 01:04:01,119
device you know controller
 

3367
01:04:01,119 --> 01:04:04,309
device you know controller
maybe the you know ignition

3368
01:04:04,309 --> 01:04:04,319
maybe the you know ignition
 

3369
01:04:04,319 --> 01:04:07,270
maybe the you know ignition
control system for your car that is you

3370
01:04:07,270 --> 01:04:07,280
control system for your car that is you
 

3371
01:04:07,280 --> 01:04:08,630
control system for your car that is you
know only running a few thousand lines

3372
01:04:08,630 --> 01:04:08,640
know only running a few thousand lines
 

3373
01:04:08,640 --> 01:04:10,390
know only running a few thousand lines
of code anyway maybe doesn't need a file

3374
01:04:10,390 --> 01:04:10,400
of code anyway maybe doesn't need a file
 

3375
01:04:10,400 --> 01:04:12,230
of code anyway maybe doesn't need a file
system

3376
01:04:12,230 --> 01:04:12,240
system
 

3377
01:04:12,240 --> 01:04:13,589
system
then we can get away with like very

3378
01:04:13,589 --> 01:04:13,599
then we can get away with like very
 

3379
01:04:13,599 --> 01:04:15,109
then we can get away with like very
little stuff at user level and

3380
01:04:15,109 --> 01:04:15,119
little stuff at user level and
 

3381
01:04:15,119 --> 01:04:16,470
little stuff at user level and
microkernels

3382
01:04:16,470 --> 01:04:16,480
microkernels
 

3383
01:04:16,480 --> 01:04:17,910
microkernels
totally make sense for that kind of

3384
01:04:17,910 --> 01:04:17,920
totally make sense for that kind of
 

3385
01:04:17,920 --> 01:04:19,990
totally make sense for that kind of
application um but the

3386
01:04:19,990 --> 01:04:20,000
application um but the
 

3387
01:04:20,000 --> 01:04:22,309
application um but the
people you know in these projects really

3388
01:04:22,309 --> 01:04:22,319
people you know in these projects really
 

3389
01:04:22,319 --> 01:04:24,069
people you know in these projects really
they had ambitions that oh gosh

3390
01:04:24,069 --> 01:04:24,079
they had ambitions that oh gosh
 

3391
01:04:24,079 --> 01:04:26,390
they had ambitions that oh gosh
we can totally replace existing

3392
01:04:26,390 --> 01:04:26,400
we can totally replace existing
 

3393
01:04:26,400 --> 01:04:27,750
we can totally replace existing
operating systems and

3394
01:04:27,750 --> 01:04:27,760
operating systems and
 

3395
01:04:27,760 --> 01:04:28,950
operating systems and
they hoped that they could build

3396
01:04:28,950 --> 01:04:28,960
they hoped that they could build
 

3397
01:04:28,960 --> 01:04:30,309
they hoped that they could build
something that people would want to run

3398
01:04:30,309 --> 01:04:30,319
something that people would want to run
 

3399
01:04:30,319 --> 01:04:30,870
something that people would want to run
on their

3400
01:04:30,870 --> 01:04:30,880
on their
 

3401
01:04:30,880 --> 01:04:32,789
on their
on their workstations and run on their

3402
01:04:32,789 --> 01:04:32,799
on their workstations and run on their
 

3403
01:04:32,799 --> 01:04:34,390
on their workstations and run on their
servers and everywhere and just

3404
01:04:34,390 --> 01:04:34,400
servers and everywhere and just
 

3405
01:04:34,400 --> 01:04:36,150
servers and everywhere and just
replace big monolithic kernels all

3406
01:04:36,150 --> 01:04:36,160
replace big monolithic kernels all
 

3407
01:04:36,160 --> 01:04:38,549
replace big monolithic kernels all
together i'm but for that you know you

3408
01:04:38,549 --> 01:04:38,559
together i'm but for that you know you
 

3409
01:04:38,559 --> 01:04:40,230
together i'm but for that you know you
need a real you need all the stuff that

3410
01:04:40,230 --> 01:04:40,240
need a real you need all the stuff that
 

3411
01:04:40,240 --> 01:04:42,150
need a real you need all the stuff that
an operating system does

3412
01:04:42,150 --> 01:04:42,160
an operating system does
 

3413
01:04:42,160 --> 01:04:45,349
an operating system does
um one possibility the most maybe

3414
01:04:45,349 --> 01:04:45,359
um one possibility the most maybe
 

3415
01:04:45,359 --> 01:04:48,789
um one possibility the most maybe
sort of philosophically consistent

3416
01:04:48,789 --> 01:04:48,799
sort of philosophically consistent
 

3417
01:04:48,799 --> 01:04:51,430
sort of philosophically consistent
possibility would be to you know

3418
01:04:51,430 --> 01:04:51,440
possibility would be to you know
 

3419
01:04:51,440 --> 01:04:52,390
possibility would be to you know
reimplement

3420
01:04:52,390 --> 01:04:52,400
reimplement
 

3421
01:04:52,400 --> 01:04:54,470
reimplement
everything you need but in a sort of

3422
01:04:54,470 --> 01:04:54,480
everything you need but in a sort of
 

3423
01:04:54,480 --> 01:04:55,829
everything you need but in a sort of
microkernel

3424
01:04:55,829 --> 01:04:55,839
microkernel
 

3425
01:04:55,839 --> 01:04:57,990
microkernel
way as lots and lots of different user

3426
01:04:57,990 --> 01:04:58,000
way as lots and lots of different user
 

3427
01:04:58,000 --> 01:04:59,349
way as lots and lots of different user
level processes

3428
01:04:59,349 --> 01:04:59,359
level processes
 

3429
01:04:59,359 --> 01:05:03,029
level processes
um but that's just actually people

3430
01:05:03,029 --> 01:05:03,039
um but that's just actually people
 

3431
01:05:03,039 --> 01:05:04,630
um but that's just actually people
you know there were projects that did

3432
01:05:04,630 --> 01:05:04,640
you know there were projects that did
 

3433
01:05:04,640 --> 01:05:07,750
you know there were projects that did
that but it's a vast amount of work

3434
01:05:07,750 --> 01:05:07,760
that but it's a vast amount of work
 

3435
01:05:07,760 --> 01:05:10,549
that but it's a vast amount of work
and more specifically people really want

3436
01:05:10,549 --> 01:05:10,559
and more specifically people really want
 

3437
01:05:10,559 --> 01:05:11,109
and more specifically people really want
to run

3438
01:05:11,109 --> 01:05:11,119
to run
 

3439
01:05:11,119 --> 01:05:13,510
to run
you know in order for me to use a laptop

3440
01:05:13,510 --> 01:05:13,520
you know in order for me to use a laptop
 

3441
01:05:13,520 --> 01:05:14,630
you know in order for me to use a laptop
it just has to run

3442
01:05:14,630 --> 01:05:14,640
it just has to run
 

3443
01:05:14,640 --> 01:05:17,270
it just has to run
emacs right and it has to run my

3444
01:05:17,270 --> 01:05:17,280
emacs right and it has to run my
 

3445
01:05:17,280 --> 01:05:18,390
emacs right and it has to run my
favorite c compiler

3446
01:05:18,390 --> 01:05:18,400
favorite c compiler
 

3447
01:05:18,400 --> 01:05:20,069
favorite c compiler
otherwise i'm just definitely not going

3448
01:05:20,069 --> 01:05:20,079
otherwise i'm just definitely not going
 

3449
01:05:20,079 --> 01:05:22,549
otherwise i'm just definitely not going
to switch to your operating system

3450
01:05:22,549 --> 01:05:22,559
to switch to your operating system
 

3451
01:05:22,559 --> 01:05:24,470
to switch to your operating system
and what that meant is that microkernels

3452
01:05:24,470 --> 01:05:24,480
and what that meant is that microkernels
 

3453
01:05:24,480 --> 01:05:25,910
and what that meant is that microkernels
in order for to gain any kind of

3454
01:05:25,910 --> 01:05:25,920
in order for to gain any kind of
 

3455
01:05:25,920 --> 01:05:27,750
in order for to gain any kind of
adoption they had to be able to support

3456
01:05:27,750 --> 01:05:27,760
adoption they had to be able to support
 

3457
01:05:27,760 --> 01:05:29,510
adoption they had to be able to support
existing applications

3458
01:05:29,510 --> 01:05:29,520
existing applications
 

3459
01:05:29,520 --> 01:05:31,270
existing applications
they had to be able to be compatible

3460
01:05:31,270 --> 01:05:31,280
they had to be able to be compatible
 

3461
01:05:31,280 --> 01:05:33,589
they had to be able to be compatible
provide an identical

3462
01:05:33,589 --> 01:05:33,599
provide an identical
 

3463
01:05:33,599 --> 01:05:36,150
provide an identical
at least at the system called at the

3464
01:05:36,150 --> 01:05:36,160
at least at the system called at the
 

3465
01:05:36,160 --> 01:05:37,670
at least at the system called at the
higher level

3466
01:05:37,670 --> 01:05:37,680
higher level
 

3467
01:05:37,680 --> 01:05:40,950
higher level
service api level they had to be totally

3468
01:05:40,950 --> 01:05:40,960
service api level they had to be totally
 

3469
01:05:40,960 --> 01:05:42,630
service api level they had to be totally
compatible with some exist on operating

3470
01:05:42,630 --> 01:05:42,640
compatible with some exist on operating
 

3471
01:05:42,640 --> 01:05:44,549
compatible with some exist on operating
system like unix like linux

3472
01:05:44,549 --> 01:05:44,559
system like unix like linux
 

3473
01:05:44,559 --> 01:05:46,470
system like unix like linux
in order for anybody to be willing to

3474
01:05:46,470 --> 01:05:46,480
in order for anybody to be willing to
 

3475
01:05:46,480 --> 01:05:48,470
in order for anybody to be willing to
switch

3476
01:05:48,470 --> 01:05:48,480
switch
 

3477
01:05:48,480 --> 01:05:50,870
switch
so these projects faced a more specific

3478
01:05:50,870 --> 01:05:50,880
so these projects faced a more specific
 

3479
01:05:50,880 --> 01:05:52,870
so these projects faced a more specific
problem of how they were going to get

3480
01:05:52,870 --> 01:05:52,880
problem of how they were going to get
 

3481
01:05:52,880 --> 01:05:54,470
problem of how they were going to get
uh how are they going to attain

3482
01:05:54,470 --> 01:05:54,480
uh how are they going to attain
 

3483
01:05:54,480 --> 01:05:56,549
uh how are they going to attain
compatibility with

3484
01:05:56,549 --> 01:05:56,559
compatibility with
 

3485
01:05:56,559 --> 01:05:58,069
compatibility with
you know existing applications written

3486
01:05:58,069 --> 01:05:58,079
you know existing applications written
 

3487
01:05:58,079 --> 01:05:59,670
you know existing applications written
for linux or maybe windows or

3488
01:05:59,670 --> 01:05:59,680
for linux or maybe windows or
 

3489
01:05:59,680 --> 01:06:02,829
for linux or maybe windows or
something but for this project it was

3490
01:06:02,829 --> 01:06:02,839
something but for this project it was
 

3491
01:06:02,839 --> 01:06:04,309
something but for this project it was
linux

3492
01:06:04,309 --> 01:06:04,319
linux
 

3493
01:06:04,319 --> 01:06:07,349
linux
and rather than write their own totally

3494
01:06:07,349 --> 01:06:07,359
and rather than write their own totally
 

3495
01:06:07,359 --> 01:06:09,109
and rather than write their own totally
new set of user level servers that mimic

3496
01:06:09,109 --> 01:06:09,119
new set of user level servers that mimic
 

3497
01:06:09,119 --> 01:06:09,829
new set of user level servers that mimic
linux

3498
01:06:09,829 --> 01:06:09,839
linux
 

3499
01:06:09,839 --> 01:06:12,470
linux
they decided to take the far easier path

3500
01:06:12,470 --> 01:06:12,480
they decided to take the far easier path
 

3501
01:06:12,480 --> 01:06:13,990
they decided to take the far easier path
and many projects did this of

3502
01:06:13,990 --> 01:06:14,000
and many projects did this of
 

3503
01:06:14,000 --> 01:06:18,150
and many projects did this of
simply directly running an existing

3504
01:06:18,150 --> 01:06:18,160
simply directly running an existing
 

3505
01:06:18,160 --> 01:06:21,270
simply directly running an existing
monolithic kernel as

3506
01:06:21,270 --> 01:06:21,280
monolithic kernel as
 

3507
01:06:21,280 --> 01:06:24,309
monolithic kernel as
on top of their microkernel instead of

3508
01:06:24,309 --> 01:06:24,319
on top of their microkernel instead of
 

3509
01:06:24,319 --> 01:06:25,829
on top of their microkernel instead of
re-implementing some new thing

3510
01:06:25,829 --> 01:06:25,839
re-implementing some new thing
 

3511
01:06:25,839 --> 01:06:27,349
re-implementing some new thing
and so that's that's exactly what

3512
01:06:27,349 --> 01:06:27,359
and so that's that's exactly what
 

3513
01:06:27,359 --> 01:06:31,349
and so that's that's exactly what
today's paper is about

3514
01:06:31,349 --> 01:06:31,359

 

3515
01:06:31,359 --> 01:06:35,430

it has uh

3516
01:06:35,430 --> 01:06:35,440

 

3517
01:06:35,440 --> 01:06:37,750

indeed you know l4 microkernel down at

3518
01:06:37,750 --> 01:06:37,760
indeed you know l4 microkernel down at
 

3519
01:06:37,760 --> 01:06:39,029
indeed you know l4 microkernel down at
the bottom

3520
01:06:39,029 --> 01:06:39,039
the bottom
 

3521
01:06:39,039 --> 01:06:42,789
the bottom
um

3522
01:06:42,789 --> 01:06:42,799

 

3523
01:06:42,799 --> 01:06:46,549

but also as like a pretty big server

3524
01:06:46,549 --> 01:06:46,559
but also as like a pretty big server
 

3525
01:06:46,559 --> 01:06:49,829
but also as like a pretty big server
they run a pretty full

3526
01:06:49,829 --> 01:06:49,839
they run a pretty full
 

3527
01:06:49,839 --> 01:06:54,789
they run a pretty full
linux kernel as a user level process

3528
01:06:54,789 --> 01:06:54,799
linux kernel as a user level process
 

3529
01:06:54,799 --> 01:06:56,710
linux kernel as a user level process
and so they may sound a little

3530
01:06:56,710 --> 01:06:56,720
and so they may sound a little
 

3531
01:06:56,720 --> 01:06:58,390
and so they may sound a little
surprising the kernels not use a level

3532
01:06:58,390 --> 01:06:58,400
surprising the kernels not use a level
 

3533
01:06:58,400 --> 01:07:01,109
surprising the kernels not use a level
process right the kernel's the kernel

3534
01:07:01,109 --> 01:07:01,119
process right the kernel's the kernel
 

3535
01:07:01,119 --> 01:07:02,150
process right the kernel's the kernel
you think of it as running on the

3536
01:07:02,150 --> 01:07:02,160
you think of it as running on the
 

3537
01:07:02,160 --> 01:07:04,630
you think of it as running on the
hardware but in fact you know linux

3538
01:07:04,630 --> 01:07:04,640
hardware but in fact you know linux
 

3539
01:07:04,640 --> 01:07:05,349
hardware but in fact you know linux
kernel

3540
01:07:05,349 --> 01:07:05,359
kernel
 

3541
01:07:05,359 --> 01:07:08,630
kernel
as you can see from running xv6 and qmu

3542
01:07:08,630 --> 01:07:08,640
as you can see from running xv6 and qmu
 

3543
01:07:08,640 --> 01:07:09,029
as you can see from running xv6 and qmu
which is

3544
01:07:09,029 --> 01:07:09,039
which is
 

3545
01:07:09,039 --> 01:07:11,910
which is
running in user space after all a kernel

3546
01:07:11,910 --> 01:07:11,920
running in user space after all a kernel
 

3547
01:07:11,920 --> 01:07:12,870
running in user space after all a kernel
is just a program

3548
01:07:12,870 --> 01:07:12,880
is just a program
 

3549
01:07:12,880 --> 01:07:15,349
is just a program
and so with some modifications it can be

3550
01:07:15,349 --> 01:07:15,359
and so with some modifications it can be
 

3551
01:07:15,359 --> 01:07:16,710
and so with some modifications it can be
made to run

3552
01:07:16,710 --> 01:07:16,720
made to run
 

3553
01:07:16,720 --> 01:07:20,069
made to run
um at user level and so they had to

3554
01:07:20,069 --> 01:07:20,079
um at user level and so they had to
 

3555
01:07:20,079 --> 01:07:21,589
um at user level and so they had to
modify linux and

3556
01:07:21,589 --> 01:07:21,599
modify linux and
 

3557
01:07:21,599 --> 01:07:23,910
modify linux and
they took a lot of the low-level stuff

3558
01:07:23,910 --> 01:07:23,920
they took a lot of the low-level stuff
 

3559
01:07:23,920 --> 01:07:25,829
they took a lot of the low-level stuff
in linux for example the code in linux

3560
01:07:25,829 --> 01:07:25,839
in linux for example the code in linux
 

3561
01:07:25,839 --> 01:07:27,190
in linux for example the code in linux
that expects to be able to directly

3562
01:07:27,190 --> 01:07:27,200
that expects to be able to directly
 

3563
01:07:27,200 --> 01:07:28,069
that expects to be able to directly
modify page

3564
01:07:28,069 --> 01:07:28,079
modify page
 

3565
01:07:28,079 --> 01:07:30,390
modify page
tables or read and write processor

3566
01:07:30,390 --> 01:07:30,400
tables or read and write processor
 

3567
01:07:30,400 --> 01:07:31,670
tables or read and write processor
registers

3568
01:07:31,670 --> 01:07:31,680
registers
 

3569
01:07:31,680 --> 01:07:33,029
registers
there was some low-level stuff they had

3570
01:07:33,029 --> 01:07:33,039
there was some low-level stuff they had
 

3571
01:07:33,039 --> 01:07:35,270
there was some low-level stuff they had
to modify so some parts of linux i had

3572
01:07:35,270 --> 01:07:35,280
to modify so some parts of linux i had
 

3573
01:07:35,280 --> 01:07:37,750
to modify so some parts of linux i had
to change

3574
01:07:37,750 --> 01:07:37,760
to change
 

3575
01:07:37,760 --> 01:07:40,069
to change
in order to convert them to basically

3576
01:07:40,069 --> 01:07:40,079
in order to convert them to basically
 

3577
01:07:40,079 --> 01:07:42,470
in order to convert them to basically
make system calls or send ipc messages

3578
01:07:42,470 --> 01:07:42,480
make system calls or send ipc messages
 

3579
01:07:42,480 --> 01:07:45,029
make system calls or send ipc messages
through l4 instead of directly get at

3580
01:07:45,029 --> 01:07:45,039
through l4 instead of directly get at
 

3581
01:07:45,039 --> 01:07:47,510
through l4 instead of directly get at
hardware but for the most part they were

3582
01:07:47,510 --> 01:07:47,520
hardware but for the most part they were
 

3583
01:07:47,520 --> 01:07:49,910
hardware but for the most part they were
able to directly run without change

3584
01:07:49,910 --> 01:07:49,920
able to directly run without change
 

3585
01:07:49,920 --> 01:07:51,750
able to directly run without change
almost all of linux so that means they

3586
01:07:51,750 --> 01:07:51,760
almost all of linux so that means they
 

3587
01:07:51,760 --> 01:07:53,349
almost all of linux so that means they
got as part of linux

3588
01:07:53,349 --> 01:07:53,359
got as part of linux
 

3589
01:07:53,359 --> 01:07:55,910
got as part of linux
you know a file system and a network

3590
01:07:55,910 --> 01:07:55,920
you know a file system and a network
 

3591
01:07:55,920 --> 01:07:57,589
you know a file system and a network
support and all kinds of

3592
01:07:57,589 --> 01:07:57,599
support and all kinds of
 

3593
01:07:57,599 --> 01:08:00,789
support and all kinds of
device drivers and

3594
01:08:00,789 --> 01:08:00,799
device drivers and
 

3595
01:08:00,799 --> 01:08:03,349
device drivers and
who knows what that comes with linux

3596
01:08:03,349 --> 01:08:03,359
who knows what that comes with linux
 

3597
01:08:03,359 --> 01:08:04,789
who knows what that comes with linux
without having to

3598
01:08:04,789 --> 01:08:04,799
without having to
 

3599
01:08:04,799 --> 01:08:08,390
without having to
write their own version of this um

3600
01:08:08,390 --> 01:08:08,400
write their own version of this um
 

3601
01:08:08,400 --> 01:08:11,349
write their own version of this um
now um in fact the way this was set up

3602
01:08:11,349 --> 01:08:11,359
now um in fact the way this was set up
 

3603
01:08:11,359 --> 01:08:12,309
now um in fact the way this was set up
was that

3604
01:08:12,309 --> 01:08:12,319
was that
 

3605
01:08:12,319 --> 01:08:15,829
was that
linux the linux kernel ran as one

3606
01:08:15,829 --> 01:08:15,839
linux the linux kernel ran as one
 

3607
01:08:15,839 --> 01:08:18,950
linux the linux kernel ran as one
l4 task and but

3608
01:08:18,950 --> 01:08:18,960
l4 task and but
 

3609
01:08:18,960 --> 01:08:22,070
l4 task and but
each linux process ran as a separate

3610
01:08:22,070 --> 01:08:22,080
each linux process ran as a separate
 

3611
01:08:22,080 --> 01:08:25,269
each linux process ran as a separate
l4 task so when you log into this linux

3612
01:08:25,269 --> 01:08:25,279
l4 task so when you log into this linux
 

3613
01:08:25,279 --> 01:08:26,309
l4 task so when you log into this linux
and you ask it to run

3614
01:08:26,309 --> 01:08:26,319
and you ask it to run
 

3615
01:08:26,319 --> 01:08:28,149
and you ask it to run
a shell for you a terminal window or

3616
01:08:28,149 --> 01:08:28,159
a shell for you a terminal window or
 

3617
01:08:28,159 --> 01:08:29,910
a shell for you a terminal window or
something it's going to fire up an

3618
01:08:29,910 --> 01:08:29,920
something it's going to fire up an
 

3619
01:08:29,920 --> 01:08:33,669
something it's going to fire up an
l4 task that's going to run that linux

3620
01:08:33,669 --> 01:08:33,679
l4 task that's going to run that linux
 

3621
01:08:33,679 --> 01:08:34,550
l4 task that's going to run that linux
program

3622
01:08:34,550 --> 01:08:34,560
program
 

3623
01:08:34,560 --> 01:08:37,910
program
at user level so there were one task for

3624
01:08:37,910 --> 01:08:37,920
at user level so there were one task for
 

3625
01:08:37,920 --> 01:08:39,189
at user level so there were one task for
linux and one task

3626
01:08:39,189 --> 01:08:39,199
linux and one task
 

3627
01:08:39,199 --> 01:08:43,189
linux and one task
for each linux process that you fire up

3628
01:08:43,189 --> 01:08:43,199
for each linux process that you fire up
 

3629
01:08:43,199 --> 01:08:46,390
for each linux process that you fire up
um under linux and linux and instead of

3630
01:08:46,390 --> 01:08:46,400
um under linux and linux and instead of
 

3631
01:08:46,400 --> 01:08:48,229
um under linux and linux and instead of
directly you know modifying the

3632
01:08:48,229 --> 01:08:48,239
directly you know modifying the
 

3633
01:08:48,239 --> 01:08:51,990
directly you know modifying the
page table that uh that vi

3634
01:08:51,990 --> 01:08:52,000
page table that uh that vi
 

3635
01:08:52,000 --> 01:08:54,309
page table that uh that vi
that the vi process uses linux is going

3636
01:08:54,309 --> 01:08:54,319
that the vi process uses linux is going
 

3637
01:08:54,319 --> 01:08:55,030
that the vi process uses linux is going
to ask

3638
01:08:55,030 --> 01:08:55,040
to ask
 

3639
01:08:55,040 --> 01:08:58,229
to ask
i'll send the right ipc's to l4 to cause

3640
01:08:58,229 --> 01:08:58,239
i'll send the right ipc's to l4 to cause
 

3641
01:08:58,239 --> 01:08:59,430
i'll send the right ipc's to l4 to cause
l4 to

3642
01:08:59,430 --> 01:08:59,440
l4 to
 

3643
01:08:59,440 --> 01:09:05,189
l4 to
change vi's page table

3644
01:09:05,189 --> 01:09:05,199

 

3645
01:09:05,199 --> 01:09:08,229

any questions about the about the basic

3646
01:09:08,229 --> 01:09:08,239
any questions about the about the basic
 

3647
01:09:08,239 --> 01:09:14,149
any questions about the about the basic
scheme here

3648
01:09:14,149 --> 01:09:14,159

 

3649
01:09:14,159 --> 01:09:17,189

um another thing to uh another thing

3650
01:09:17,189 --> 01:09:17,199
um another thing to uh another thing
 

3651
01:09:17,199 --> 01:09:18,789
um another thing to uh another thing
that was changed

3652
01:09:18,789 --> 01:09:18,799
that was changed
 

3653
01:09:18,799 --> 01:09:22,229
that was changed
many small things were changed but um a

3654
01:09:22,229 --> 01:09:22,239
many small things were changed but um a
 

3655
01:09:22,239 --> 01:09:24,070
many small things were changed but um a
specific thing of interest is that

3656
01:09:24,070 --> 01:09:24,080
specific thing of interest is that
 

3657
01:09:24,080 --> 01:09:26,870
specific thing of interest is that
when vi wants to make a system call so

3658
01:09:26,870 --> 01:09:26,880
when vi wants to make a system call so
 

3659
01:09:26,880 --> 01:09:31,669
when vi wants to make a system call so
if vi doesn't know it's running on l4

3660
01:09:31,669 --> 01:09:31,679

 

3661
01:09:31,679 --> 01:09:34,149

in this scheme it's it's really all

3662
01:09:34,149 --> 01:09:34,159
in this scheme it's it's really all
 

3663
01:09:34,159 --> 01:09:35,669
in this scheme it's it's really all
these programs just think of themselves

3664
01:09:35,669 --> 01:09:35,679
these programs just think of themselves
 

3665
01:09:35,679 --> 01:09:36,789
these programs just think of themselves
as running on linux

3666
01:09:36,789 --> 01:09:36,799
as running on linux
 

3667
01:09:36,799 --> 01:09:39,590
as running on linux
when vi wants to make a system call um

3668
01:09:39,590 --> 01:09:39,600
when vi wants to make a system call um
 

3669
01:09:39,600 --> 01:09:41,269
when vi wants to make a system call um
you know l4 does not

3670
01:09:41,269 --> 01:09:41,279
you know l4 does not
 

3671
01:09:41,279 --> 01:09:44,390
you know l4 does not
support it it's not making an l4 system

3672
01:09:44,390 --> 01:09:44,400
support it it's not making an l4 system
 

3673
01:09:44,400 --> 01:09:45,990
support it it's not making an l4 system
called it's making a linux system call

3674
01:09:45,990 --> 01:09:46,000
called it's making a linux system call
 

3675
01:09:46,000 --> 01:09:48,789
called it's making a linux system call
so vi system calls like fork there's a

3676
01:09:48,789 --> 01:09:48,799
so vi system calls like fork there's a
 

3677
01:09:48,799 --> 01:09:50,229
so vi system calls like fork there's a
little library

3678
01:09:50,229 --> 01:09:50,239
little library
 

3679
01:09:50,239 --> 01:09:56,550
little library
basically that was linked into these

3680
01:09:56,550 --> 01:09:56,560

 

3681
01:09:56,560 --> 01:09:59,590

linux processes that would turn calls to

3682
01:09:59,590 --> 01:09:59,600
linux processes that would turn calls to
 

3683
01:09:59,600 --> 01:10:01,270
linux processes that would turn calls to
things like fork or exec

3684
01:10:01,270 --> 01:10:01,280
things like fork or exec
 

3685
01:10:01,280 --> 01:10:03,910
things like fork or exec
or pipe or read or write into ipc

3686
01:10:03,910 --> 01:10:03,920
or pipe or read or write into ipc
 

3687
01:10:03,920 --> 01:10:05,510
or pipe or read or write into ipc
messages

3688
01:10:05,510 --> 01:10:05,520
messages
 

3689
01:10:05,520 --> 01:10:09,830
messages
that it would send to the linux task

3690
01:10:09,830 --> 01:10:09,840
that it would send to the linux task
 

3691
01:10:09,840 --> 01:10:11,669
that it would send to the linux task
and wait for the response to linux task

3692
01:10:11,669 --> 01:10:11,679
and wait for the response to linux task
 

3693
01:10:11,679 --> 01:10:13,030
and wait for the response to linux task
and then return as if

3694
01:10:13,030 --> 01:10:13,040
and then return as if
 

3695
01:10:13,040 --> 01:10:16,149
and then return as if
the system call it returned so

3696
01:10:16,149 --> 01:10:16,159
the system call it returned so
 

3697
01:10:16,159 --> 01:10:17,510
the system call it returned so
so these little libraries would turn

3698
01:10:17,510 --> 01:10:17,520
so these little libraries would turn
 

3699
01:10:17,520 --> 01:10:20,229
so these little libraries would turn
system calls into

3700
01:10:20,229 --> 01:10:20,239
system calls into
 

3701
01:10:20,239 --> 01:10:22,390
system calls into
ipc messages to linux and what that

3702
01:10:22,390 --> 01:10:22,400
ipc messages to linux and what that
 

3703
01:10:22,400 --> 01:10:24,390
ipc messages to linux and what that
meant is that if the linux kernel task

3704
01:10:24,390 --> 01:10:24,400
meant is that if the linux kernel task
 

3705
01:10:24,400 --> 01:10:25,590
meant is that if the linux kernel task
doesn't do anything it

3706
01:10:25,590 --> 01:10:25,600
doesn't do anything it
 

3707
01:10:25,600 --> 01:10:27,830
doesn't do anything it
isn't doing anything else it's sitting

3708
01:10:27,830 --> 01:10:27,840
isn't doing anything else it's sitting
 

3709
01:10:27,840 --> 01:10:29,350
isn't doing anything else it's sitting
on a call to receive waiting for the

3710
01:10:29,350 --> 01:10:29,360
on a call to receive waiting for the
 

3711
01:10:29,360 --> 01:10:31,030
on a call to receive waiting for the
next system call request

3712
01:10:31,030 --> 01:10:31,040
next system call request
 

3713
01:10:31,040 --> 01:10:38,950
next system call request
ipc from any one of these processes

3714
01:10:38,950 --> 01:10:38,960

 

3715
01:10:38,960 --> 01:10:42,790

and that led to a that leads to a

3716
01:10:42,790 --> 01:10:42,800
and that led to a that leads to a
 

3717
01:10:42,800 --> 01:10:45,990
and that led to a that leads to a
significant difference between how this

3718
01:10:45,990 --> 01:10:46,000
significant difference between how this
 

3719
01:10:46,000 --> 01:10:48,790
significant difference between how this
linux works and how ordinary linux works

3720
01:10:48,790 --> 01:10:48,800
linux works and how ordinary linux works
 

3721
01:10:48,800 --> 01:10:49,189
linux works and how ordinary linux works
um

3722
01:10:49,189 --> 01:10:49,199
um
 

3723
01:10:49,199 --> 01:10:51,270
um
in ordinary linux just like xv6 there's

3724
01:10:51,270 --> 01:10:51,280
in ordinary linux just like xv6 there's
 

3725
01:10:51,280 --> 01:10:52,630
in ordinary linux just like xv6 there's
a basically a

3726
01:10:52,630 --> 01:10:52,640
a basically a
 

3727
01:10:52,640 --> 01:10:55,510
a basically a
kernel thread that corresponds to every

3728
01:10:55,510 --> 01:10:55,520
kernel thread that corresponds to every
 

3729
01:10:55,520 --> 01:10:57,110
kernel thread that corresponds to every
user-level process and

3730
01:10:57,110 --> 01:10:57,120
user-level process and
 

3731
01:10:57,120 --> 01:11:00,149
user-level process and
when a program makes a system call it

3732
01:11:00,149 --> 01:11:00,159
when a program makes a system call it
 

3733
01:11:00,159 --> 01:11:02,229
when a program makes a system call it
the kernel runs a thread on behalf of

3734
01:11:02,229 --> 01:11:02,239
the kernel runs a thread on behalf of
 

3735
01:11:02,239 --> 01:11:04,709
the kernel runs a thread on behalf of
that system call

3736
01:11:04,709 --> 01:11:04,719
that system call
 

3737
01:11:04,719 --> 01:11:07,750
that system call
and when in ordinary linux when linux

3738
01:11:07,750 --> 01:11:07,760
and when in ordinary linux when linux
 

3739
01:11:07,760 --> 01:11:09,350
and when in ordinary linux when linux
switches between

3740
01:11:09,350 --> 01:11:09,360
switches between
 

3741
01:11:09,360 --> 01:11:12,149
switches between
kernel threads that basically implies a

3742
01:11:12,149 --> 01:11:12,159
kernel threads that basically implies a
 

3743
01:11:12,159 --> 01:11:14,950
kernel threads that basically implies a
switch from one process to another

3744
01:11:14,950 --> 01:11:14,960
switch from one process to another
 

3745
01:11:14,960 --> 01:11:15,990
switch from one process to another
so there's kind of one-to-one

3746
01:11:15,990 --> 01:11:16,000
so there's kind of one-to-one
 

3747
01:11:16,000 --> 01:11:19,669
so there's kind of one-to-one
correspondence between

3748
01:11:19,669 --> 01:11:19,679

 

3749
01:11:19,679 --> 01:11:21,270

what kernel thread linux kernel is

3750
01:11:21,270 --> 01:11:21,280
what kernel thread linux kernel is
 

3751
01:11:21,280 --> 01:11:23,750
what kernel thread linux kernel is
running and what process is going to run

3752
01:11:23,750 --> 01:11:23,760
running and what process is going to run
 

3753
01:11:23,760 --> 01:11:25,270
running and what process is going to run
when linux is done

3754
01:11:25,270 --> 01:11:25,280
when linux is done
 

3755
01:11:25,280 --> 01:11:26,950
when linux is done
here that connection's broken they were

3756
01:11:26,950 --> 01:11:26,960
here that connection's broken they were
 

3757
01:11:26,960 --> 01:11:28,550
here that connection's broken they were
indeed

3758
01:11:28,550 --> 01:11:28,560
indeed
 

3759
01:11:28,560 --> 01:11:31,430
indeed
in this linux server a kernel thread

3760
01:11:31,430 --> 01:11:31,440
in this linux server a kernel thread
 

3761
01:11:31,440 --> 01:11:34,149
in this linux server a kernel thread
corresponding to each

3762
01:11:34,149 --> 01:11:34,159
corresponding to each
 

3763
01:11:34,159 --> 01:11:37,350
corresponding to each
i'm sorry let me start again the

3764
01:11:37,350 --> 01:11:37,360
i'm sorry let me start again the
 

3765
01:11:37,360 --> 01:11:40,229
i'm sorry let me start again the
linux kernel server was running in a

3766
01:11:40,229 --> 01:11:40,239
linux kernel server was running in a
 

3767
01:11:40,239 --> 01:11:41,669
linux kernel server was running in a
single l4 thread

3768
01:11:41,669 --> 01:11:41,679
single l4 thread
 

3769
01:11:41,679 --> 01:11:44,550
single l4 thread
so there was only a single sort of

3770
01:11:44,550 --> 01:11:44,560
so there was only a single sort of
 

3771
01:11:44,560 --> 01:11:46,630
so there was only a single sort of
thread of control executing in linux

3772
01:11:46,630 --> 01:11:46,640
thread of control executing in linux
 

3773
01:11:46,640 --> 01:11:52,470
thread of control executing in linux
at a time however just as an xv6

3774
01:11:52,470 --> 01:11:52,480
at a time however just as an xv6
 

3775
01:11:52,480 --> 01:11:55,350
at a time however just as an xv6
this one thread of control would switch

3776
01:11:55,350 --> 01:11:55,360
this one thread of control would switch
 

3777
01:11:55,360 --> 01:11:56,790
this one thread of control would switch
you know using a technique very much

3778
01:11:56,790 --> 01:11:56,800
you know using a technique very much
 

3779
01:11:56,800 --> 01:11:58,149
you know using a technique very much
like

3780
01:11:58,149 --> 01:11:58,159
like
 

3781
01:11:58,159 --> 01:12:01,510
like
uh xp6's context switch

3782
01:12:01,510 --> 01:12:01,520
uh xp6's context switch
 

3783
01:12:01,520 --> 01:12:05,110
uh xp6's context switch
could switch between um a kernel thread

3784
01:12:05,110 --> 01:12:05,120
could switch between um a kernel thread
 

3785
01:12:05,120 --> 01:12:07,270
could switch between um a kernel thread
corresponding to each user process

3786
01:12:07,270 --> 01:12:07,280
corresponding to each user process
 

3787
01:12:07,280 --> 01:12:08,550
corresponding to each user process
however

3788
01:12:08,550 --> 01:12:08,560
however
 

3789
01:12:08,560 --> 01:12:11,590
however
now which of these these

3790
01:12:11,590 --> 01:12:11,600
now which of these these
 

3791
01:12:11,600 --> 01:12:13,030
now which of these these
kernel threads were implemented purely

3792
01:12:13,030 --> 01:12:13,040
kernel threads were implemented purely
 

3793
01:12:13,040 --> 01:12:15,110
kernel threads were implemented purely
within linux and nothing to do with l4

3794
01:12:15,110 --> 01:12:15,120
within linux and nothing to do with l4
 

3795
01:12:15,120 --> 01:12:15,669
within linux and nothing to do with l4
threads

3796
01:12:15,669 --> 01:12:15,679
threads
 

3797
01:12:15,679 --> 01:12:18,709
threads
there's only one l4 thread here

3798
01:12:18,709 --> 01:12:18,719
there's only one l4 thread here
 

3799
01:12:18,719 --> 01:12:20,950
there's only one l4 thread here
but which user process was running was

3800
01:12:20,950 --> 01:12:20,960
but which user process was running was
 

3801
01:12:20,960 --> 01:12:23,030
but which user process was running was
determined by l4

3802
01:12:23,030 --> 01:12:23,040
determined by l4
 

3803
01:12:23,040 --> 01:12:26,070
determined by l4
so in this setup uh linux might be

3804
01:12:26,070 --> 01:12:26,080
so in this setup uh linux might be
 

3805
01:12:26,080 --> 01:12:27,270
so in this setup uh linux might be
serving a request

3806
01:12:27,270 --> 01:12:27,280
serving a request
 

3807
01:12:27,280 --> 01:12:31,430
serving a request
from executing the kernel thread for vi

3808
01:12:31,430 --> 01:12:31,440
from executing the kernel thread for vi
 

3809
01:12:31,440 --> 01:12:33,910
from executing the kernel thread for vi
serving a vi system call at the same

3810
01:12:33,910 --> 01:12:33,920
serving a vi system call at the same
 

3811
01:12:33,920 --> 01:12:36,070
serving a vi system call at the same
time that l4 is causing this shell to

3812
01:12:36,070 --> 01:12:36,080
time that l4 is causing this shell to
 

3813
01:12:36,080 --> 01:12:37,910
time that l4 is causing this shell to
run in user space

3814
01:12:37,910 --> 01:12:37,920
run in user space
 

3815
01:12:37,920 --> 01:12:41,189
run in user space
which is very unlike what happens in xv6

3816
01:12:41,189 --> 01:12:41,199
which is very unlike what happens in xv6
 

3817
01:12:41,199 --> 01:12:42,790
which is very unlike what happens in xv6
or linux where

3818
01:12:42,790 --> 01:12:42,800
or linux where
 

3819
01:12:42,800 --> 01:12:45,270
or linux where
there's a direct correspondence between

3820
01:12:45,270 --> 01:12:45,280
there's a direct correspondence between
 

3821
01:12:45,280 --> 01:12:46,470
there's a direct correspondence between
the sort of active

3822
01:12:46,470 --> 01:12:46,480
the sort of active
 

3823
01:12:46,480 --> 01:12:49,590
the sort of active
kernel thread and the corresponding

3824
01:12:49,590 --> 01:12:49,600
kernel thread and the corresponding
 

3825
01:12:49,600 --> 01:12:51,350
kernel thread and the corresponding
use a level thread here l4 is off

3826
01:12:51,350 --> 01:12:51,360
use a level thread here l4 is off
 

3827
01:12:51,360 --> 01:12:53,430
use a level thread here l4 is off
running whatever it feels like

3828
01:12:53,430 --> 01:12:53,440
running whatever it feels like
 

3829
01:12:53,440 --> 01:12:55,270
running whatever it feels like
and these threads in the linux kernel

3830
01:12:55,270 --> 01:12:55,280
and these threads in the linux kernel
 

3831
01:12:55,280 --> 01:12:56,950
and these threads in the linux kernel
are really much more private and are

3832
01:12:56,950 --> 01:12:56,960
are really much more private and are
 

3833
01:12:56,960 --> 01:12:57,910
are really much more private and are
just about

3834
01:12:57,910 --> 01:12:57,920
just about
 

3835
01:12:57,920 --> 01:13:00,310
just about
linux being able to um concurrently

3836
01:13:00,310 --> 01:13:00,320
linux being able to um concurrently
 

3837
01:13:00,320 --> 01:13:01,030
linux being able to um concurrently
execute

3838
01:13:01,030 --> 01:13:01,040
execute
 

3839
01:13:01,040 --> 01:13:02,790
execute
system calls in different stages of

3840
01:13:02,790 --> 01:13:02,800
system calls in different stages of
 

3841
01:13:02,800 --> 01:13:04,950
system calls in different stages of
execution where maybe

3842
01:13:04,950 --> 01:13:04,960
execution where maybe
 

3843
01:13:04,960 --> 01:13:07,030
execution where maybe
one process is waiting for the disk it

3844
01:13:07,030 --> 01:13:07,040
one process is waiting for the disk it
 

3845
01:13:07,040 --> 01:13:08,550
one process is waiting for the disk it
needs thread

3846
01:13:08,550 --> 01:13:08,560
needs thread
 

3847
01:13:08,560 --> 01:13:11,270
needs thread
linux can run a different processes

3848
01:13:11,270 --> 01:13:11,280
linux can run a different processes
 

3849
01:13:11,280 --> 01:13:12,390
linux can run a different processes
kernel thread to

3850
01:13:12,390 --> 01:13:12,400
kernel thread to
 

3851
01:13:12,400 --> 01:13:20,550
kernel thread to
serve that process system call um

3852
01:13:20,550 --> 01:13:20,560

 

3853
01:13:20,560 --> 01:13:23,669

so you might wonder uh why

3854
01:13:23,669 --> 01:13:23,679
so you might wonder uh why
 

3855
01:13:23,679 --> 01:13:26,070
so you might wonder uh why
the this design didn't directly use l4

3856
01:13:26,070 --> 01:13:26,080
the this design didn't directly use l4
 

3857
01:13:26,080 --> 01:13:27,110
the this design didn't directly use l4
threads

3858
01:13:27,110 --> 01:13:27,120
threads
 

3859
01:13:27,120 --> 01:13:30,830
threads
uh to implement the various different

3860
01:13:30,830 --> 01:13:30,840
uh to implement the various different
 

3861
01:13:30,840 --> 01:13:35,030
uh to implement the various different
um uh kernel threads inside linux

3862
01:13:35,030 --> 01:13:35,040
um uh kernel threads inside linux
 

3863
01:13:35,040 --> 01:13:37,030
um uh kernel threads inside linux
why you know why did linux implement its

3864
01:13:37,030 --> 01:13:37,040
why you know why did linux implement its
 

3865
01:13:37,040 --> 01:13:39,110
why you know why did linux implement its
own sort of internal threads package

3866
01:13:39,110 --> 01:13:39,120
own sort of internal threads package
 

3867
01:13:39,120 --> 01:13:40,790
own sort of internal threads package
instead of using l4 threads

3868
01:13:40,790 --> 01:13:40,800
instead of using l4 threads
 

3869
01:13:40,800 --> 01:13:43,910
instead of using l4 threads
and the answer was that in those days um

3870
01:13:43,910 --> 01:13:43,920
and the answer was that in those days um
 

3871
01:13:43,920 --> 01:13:46,709
and the answer was that in those days um
a they didn't have access to multi-core

3872
01:13:46,709 --> 01:13:46,719
a they didn't have access to multi-core
 

3873
01:13:46,719 --> 01:13:48,229
a they didn't have access to multi-core
hardware they were using

3874
01:13:48,229 --> 01:13:48,239
hardware they were using
 

3875
01:13:48,239 --> 01:13:49,830
hardware they were using
single core hardware so there would no

3876
01:13:49,830 --> 01:13:49,840
single core hardware so there would no
 

3877
01:13:49,840 --> 01:13:51,830
single core hardware so there would no
performance advantage

3878
01:13:51,830 --> 01:13:51,840
performance advantage
 

3879
01:13:51,840 --> 01:13:54,390
performance advantage
um to be able to execute multiple

3880
01:13:54,390 --> 01:13:54,400
um to be able to execute multiple
 

3881
01:13:54,400 --> 01:13:55,990
um to be able to execute multiple
threads in the kernel at the same time

3882
01:13:55,990 --> 01:13:56,000
threads in the kernel at the same time
 

3883
01:13:56,000 --> 01:13:58,390
threads in the kernel at the same time
because it was only one core

3884
01:13:58,390 --> 01:13:58,400
because it was only one core
 

3885
01:13:58,400 --> 01:14:00,390
because it was only one core
so a second thread couldn't be executing

3886
01:14:00,390 --> 01:14:00,400
so a second thread couldn't be executing
 

3887
01:14:00,400 --> 01:14:01,830
so a second thread couldn't be executing
only one thread could execute it at a

3888
01:14:01,830 --> 01:14:01,840
only one thread could execute it at a
 

3889
01:14:01,840 --> 01:14:03,750
only one thread could execute it at a
time due to the hardware

3890
01:14:03,750 --> 01:14:03,760
time due to the hardware
 

3891
01:14:03,760 --> 01:14:05,590
time due to the hardware
and the other maybe even more powerful

3892
01:14:05,590 --> 01:14:05,600
and the other maybe even more powerful
 

3893
01:14:05,600 --> 01:14:07,430
and the other maybe even more powerful
reason is that in those days

3894
01:14:07,430 --> 01:14:07,440
reason is that in those days
 

3895
01:14:07,440 --> 01:14:10,390
reason is that in those days
the version of linux they were using did

3896
01:14:10,390 --> 01:14:10,400
the version of linux they were using did
 

3897
01:14:10,400 --> 01:14:10,709
the version of linux they were using did
not

3898
01:14:10,709 --> 01:14:10,719
not
 

3899
01:14:10,719 --> 01:14:13,590
not
did not have the support that's required

3900
01:14:13,590 --> 01:14:13,600
did not have the support that's required
 

3901
01:14:13,600 --> 01:14:14,229
did not have the support that's required
to have

3902
01:14:14,229 --> 01:14:14,239
to have
 

3903
01:14:14,239 --> 01:14:16,070
to have
multiple threads multiple cores

3904
01:14:16,070 --> 01:14:16,080
multiple threads multiple cores
 

3905
01:14:16,080 --> 01:14:17,830
multiple threads multiple cores
executing inside the kernel at the same

3906
01:14:17,830 --> 01:14:17,840
executing inside the kernel at the same
 

3907
01:14:17,840 --> 01:14:18,470
executing inside the kernel at the same
time

3908
01:14:18,470 --> 01:14:18,480
time
 

3909
01:14:18,480 --> 01:14:21,270
time
they were using a uniprocessor linux

3910
01:14:21,270 --> 01:14:21,280
they were using a uniprocessor linux
 

3911
01:14:21,280 --> 01:14:23,350
they were using a uniprocessor linux
said old enough linux that

3912
01:14:23,350 --> 01:14:23,360
said old enough linux that
 

3913
01:14:23,360 --> 01:14:25,030
said old enough linux that
expected only one core in the kernel at

3914
01:14:25,030 --> 01:14:25,040
expected only one core in the kernel at
 

3915
01:14:25,040 --> 01:14:27,350
expected only one core in the kernel at
a time

3916
01:14:27,350 --> 01:14:27,360
a time
 

3917
01:14:27,360 --> 01:14:28,870
a time
it didn't have things like the spin

3918
01:14:28,870 --> 01:14:28,880
it didn't have things like the spin
 

3919
01:14:28,880 --> 01:14:30,709
it didn't have things like the spin
locks that xv6 has

3920
01:14:30,709 --> 01:14:30,719
locks that xv6 has
 

3921
01:14:30,719 --> 01:14:34,229
locks that xv6 has
that would allow it to correctly

3922
01:14:34,229 --> 01:14:34,239
that would allow it to correctly
 

3923
01:14:34,239 --> 01:14:36,390
that would allow it to correctly
execute multiple multiple cores inside

3924
01:14:36,390 --> 01:14:36,400
execute multiple multiple cores inside
 

3925
01:14:36,400 --> 01:14:37,750
execute multiple multiple cores inside
the kernel so there would have been no

3926
01:14:37,750 --> 01:14:37,760
the kernel so there would have been no
 

3927
01:14:37,760 --> 01:14:40,070
the kernel so there would have been no
performance advantage

3928
01:14:40,070 --> 01:14:40,080
performance advantage
 

3929
01:14:40,080 --> 01:14:42,470
performance advantage
in having multiple l4 threads active

3930
01:14:42,470 --> 01:14:42,480
in having multiple l4 threads active
 

3931
01:14:42,480 --> 01:14:43,750
in having multiple l4 threads active
inside the kernel

3932
01:14:43,750 --> 01:14:43,760
inside the kernel
 

3933
01:14:43,760 --> 01:14:47,430
inside the kernel
um but it would have required adding in

3934
01:14:47,430 --> 01:14:47,440
um but it would have required adding in
 

3935
01:14:47,440 --> 01:14:49,830
um but it would have required adding in
you know for no performance when adding

3936
01:14:49,830 --> 01:14:49,840
you know for no performance when adding
 

3937
01:14:49,840 --> 01:14:50,470
you know for no performance when adding
in all the

3938
01:14:50,470 --> 01:14:50,480
in all the
 

3939
01:14:50,480 --> 01:14:52,149
in all the
spin locks and other stuff is required

3940
01:14:52,149 --> 01:14:52,159
spin locks and other stuff is required
 

3941
01:14:52,159 --> 01:14:53,910
spin locks and other stuff is required
to support concurrency

3942
01:14:53,910 --> 01:14:53,920
to support concurrency
 

3943
01:14:53,920 --> 01:14:57,990
to support concurrency
so they didn't do it

3944
01:14:57,990 --> 01:14:58,000

 

3945
01:14:58,000 --> 01:15:01,189

a drawback of this arrangement is that

3946
01:15:01,189 --> 01:15:01,199
a drawback of this arrangement is that
 

3947
01:15:01,199 --> 01:15:03,669
a drawback of this arrangement is that
um in ordinary linux in native linux

3948
01:15:03,669 --> 01:15:03,679
um in ordinary linux in native linux
 

3949
01:15:03,679 --> 01:15:05,030
um in ordinary linux in native linux
like you would run directly on your

3950
01:15:05,030 --> 01:15:05,040
like you would run directly on your
 

3951
01:15:05,040 --> 01:15:05,750
like you would run directly on your
laptop

3952
01:15:05,750 --> 01:15:05,760
laptop
 

3953
01:15:05,760 --> 01:15:07,990
laptop
linux has a lot of sophisticated

3954
01:15:07,990 --> 01:15:08,000
linux has a lot of sophisticated
 

3955
01:15:08,000 --> 01:15:08,950
linux has a lot of sophisticated
scheduling

3956
01:15:08,950 --> 01:15:08,960
scheduling
 

3957
01:15:08,960 --> 01:15:11,270
scheduling
machinery that can do things like impose

3958
01:15:11,270 --> 01:15:11,280
machinery that can do things like impose
 

3959
01:15:11,280 --> 01:15:13,110
machinery that can do things like impose
priorities on different processes or

3960
01:15:13,110 --> 01:15:13,120
priorities on different processes or
 

3961
01:15:13,120 --> 01:15:13,750
priorities on different processes or
ensure

3962
01:15:13,750 --> 01:15:13,760
ensure
 

3963
01:15:13,760 --> 01:15:17,030
ensure
various kinds of fairness um

3964
01:15:17,030 --> 01:15:17,040
various kinds of fairness um
 

3965
01:15:17,040 --> 01:15:19,270
various kinds of fairness um
and that works fine because in a on your

3966
01:15:19,270 --> 01:15:19,280
and that works fine because in a on your
 

3967
01:15:19,280 --> 01:15:20,470
and that works fine because in a on your
laptop because linux is

3968
01:15:20,470 --> 01:15:20,480
laptop because linux is
 

3969
01:15:20,480 --> 01:15:23,750
laptop because linux is
in control of what process is running on

3970
01:15:23,750 --> 01:15:23,760
in control of what process is running on
 

3971
01:15:23,760 --> 01:15:23,990
in control of what process is running on
each

3972
01:15:23,990 --> 01:15:24,000
each
 

3973
01:15:24,000 --> 01:15:25,830
each
core but in this setup linux is not

3974
01:15:25,830 --> 01:15:25,840
core but in this setup linux is not
 

3975
01:15:25,840 --> 01:15:27,270
core but in this setup linux is not
controlling that at all

3976
01:15:27,270 --> 01:15:27,280
controlling that at all
 

3977
01:15:27,280 --> 01:15:30,310
controlling that at all
linux has no control over what what

3978
01:15:30,310 --> 01:15:30,320
linux has no control over what what
 

3979
01:15:30,320 --> 01:15:31,830
linux has no control over what what
process is running

3980
01:15:31,830 --> 01:15:31,840
process is running
 

3981
01:15:31,840 --> 01:15:33,669
process is running
because it's l4 that does this

3982
01:15:33,669 --> 01:15:33,679
because it's l4 that does this
 

3983
01:15:33,679 --> 01:15:35,590
because it's l4 that does this
scheduling not linux

3984
01:15:35,590 --> 01:15:35,600
scheduling not linux
 

3985
01:15:35,600 --> 01:15:37,830
scheduling not linux
these processes are scheduled by l4 so

3986
01:15:37,830 --> 01:15:37,840
these processes are scheduled by l4 so
 

3987
01:15:37,840 --> 01:15:39,910
these processes are scheduled by l4 so
they kind of lost the ability to

3988
01:15:39,910 --> 01:15:39,920
they kind of lost the ability to
 

3989
01:15:39,920 --> 01:15:43,270
they kind of lost the ability to
have linux be in charge of uh scheduling

3990
01:15:43,270 --> 01:15:43,280
have linux be in charge of uh scheduling
 

3991
01:15:43,280 --> 01:15:45,750
have linux be in charge of uh scheduling
um you know that's a bit of a defect of

3992
01:15:45,750 --> 01:15:45,760
um you know that's a bit of a defect of
 

3993
01:15:45,760 --> 01:15:46,870
um you know that's a bit of a defect of
this the

3994
01:15:46,870 --> 01:15:46,880
this the
 

3995
01:15:46,880 --> 01:15:50,149
this the
although i'm sure later versions of l4

3996
01:15:50,149 --> 01:15:50,159
although i'm sure later versions of l4
 

3997
01:15:50,159 --> 01:15:53,669
although i'm sure later versions of l4
had some way for linux or something like

3998
01:15:53,669 --> 01:15:53,679
had some way for linux or something like
 

3999
01:15:53,679 --> 01:15:55,270
had some way for linux or something like
it to be able to tell the l4 scheduler

4000
01:15:55,270 --> 01:15:55,280
it to be able to tell the l4 scheduler
 

4001
01:15:55,280 --> 01:15:57,430
it to be able to tell the l4 scheduler
oh look please

4002
01:15:57,430 --> 01:15:57,440
oh look please
 

4003
01:15:57,440 --> 01:15:59,030
oh look please
give this process higher priority or

4004
01:15:59,030 --> 01:15:59,040
give this process higher priority or
 

4005
01:15:59,040 --> 01:16:00,550
give this process higher priority or
whatever

4006
01:16:00,550 --> 01:16:00,560
whatever
 

4007
01:16:00,560 --> 01:16:06,870
whatever
so it's a bit awkward

4008
01:16:06,870 --> 01:16:06,880
so it's a bit awkward
 

4009
01:16:06,880 --> 01:16:11,510
so it's a bit awkward
all right um

4010
01:16:11,510 --> 01:16:11,520

 

4011
01:16:11,520 --> 01:16:14,790

so so they went to all this work

4012
01:16:14,790 --> 01:16:14,800
so so they went to all this work
 

4013
01:16:14,800 --> 01:16:19,110
so so they went to all this work
um to get this going and

4014
01:16:19,110 --> 01:16:19,120
um to get this going and
 

4015
01:16:19,120 --> 01:16:21,590
um to get this going and
um you should ask yourself you know what

4016
01:16:21,590 --> 01:16:21,600
um you should ask yourself you know what
 

4017
01:16:21,600 --> 01:16:22,149
um you should ask yourself you know what
is the

4018
01:16:22,149 --> 01:16:22,159
is the
 

4019
01:16:22,159 --> 01:16:24,310
is the
what's the takeaway lesson from from

4020
01:16:24,310 --> 01:16:24,320
what's the takeaway lesson from from
 

4021
01:16:24,320 --> 01:16:25,750
what's the takeaway lesson from from
this paper

4022
01:16:25,750 --> 01:16:25,760
this paper
 

4023
01:16:25,760 --> 01:16:30,149
this paper
about microkernels um

4024
01:16:30,149 --> 01:16:30,159
about microkernels um
 

4025
01:16:30,159 --> 01:16:32,070
about microkernels um
now one thing this so for us you know

4026
01:16:32,070 --> 01:16:32,080
now one thing this so for us you know
 

4027
01:16:32,080 --> 01:16:33,350
now one thing this so for us you know
this paper has a lot of

4028
01:16:33,350 --> 01:16:33,360
this paper has a lot of
 

4029
01:16:33,360 --> 01:16:34,870
this paper has a lot of
interesting tidbits about how micro

4030
01:16:34,870 --> 01:16:34,880
interesting tidbits about how micro
 

4031
01:16:34,880 --> 01:16:36,550
interesting tidbits about how micro
kernels work and about how linux works

4032
01:16:36,550 --> 01:16:36,560
kernels work and about how linux works
 

4033
01:16:36,560 --> 01:16:37,350
kernels work and about how linux works
and how

4034
01:16:37,350 --> 01:16:37,360
and how
 

4035
01:16:37,360 --> 01:16:39,270
and how
you know you set up how you can design a

4036
01:16:39,270 --> 01:16:39,280
you know you set up how you can design a
 

4037
01:16:39,280 --> 01:16:40,790
you know you set up how you can design a
system like this which

4038
01:16:40,790 --> 01:16:40,800
system like this which
 

4039
01:16:40,800 --> 01:16:43,990
system like this which
may be interesting but um

4040
01:16:43,990 --> 01:16:44,000
may be interesting but um
 

4041
01:16:44,000 --> 01:16:45,430
may be interesting but um
in the larger world you know people want

4042
01:16:45,430 --> 01:16:45,440
in the larger world you know people want
 

4043
01:16:45,440 --> 01:16:47,830
in the larger world you know people want
to want to draw some lessons

4044
01:16:47,830 --> 01:16:47,840
to want to draw some lessons
 

4045
01:16:47,840 --> 01:16:50,229
to want to draw some lessons
they need to be able to present some

4046
01:16:50,229 --> 01:16:50,239
they need to be able to present some
 

4047
01:16:50,239 --> 01:16:53,270
they need to be able to present some
lessons in this paper

4048
01:16:53,270 --> 01:16:53,280

 

4049
01:16:53,280 --> 01:16:55,270

the paper is not really answering the

4050
01:16:55,270 --> 01:16:55,280
the paper is not really answering the
 

4051
01:16:55,280 --> 01:16:57,990
the paper is not really answering the
question are microkernels a good idea

4052
01:16:57,990 --> 01:16:58,000
question are microkernels a good idea
 

4053
01:16:58,000 --> 01:17:00,630
question are microkernels a good idea
that's not really what's going on here

4054
01:17:00,630 --> 01:17:00,640
that's not really what's going on here
 

4055
01:17:00,640 --> 01:17:01,590
that's not really what's going on here
the paper

4056
01:17:01,590 --> 01:17:01,600
the paper
 

4057
01:17:01,600 --> 01:17:03,830
the paper
what the paper is is part of a argument

4058
01:17:03,830 --> 01:17:03,840
what the paper is is part of a argument
 

4059
01:17:03,840 --> 01:17:04,950
what the paper is is part of a argument
about whether

4060
01:17:04,950 --> 01:17:04,960
about whether
 

4061
01:17:04,960 --> 01:17:07,990
about whether
microkernels have enough performance

4062
01:17:07,990 --> 01:17:08,000
microkernels have enough performance
 

4063
01:17:08,000 --> 01:17:11,830
microkernels have enough performance
to um to be worth using

4064
01:17:11,830 --> 01:17:11,840
to um to be worth using
 

4065
01:17:11,840 --> 01:17:15,189
to um to be worth using
and the reason is that in

4066
01:17:15,189 --> 01:17:15,199
and the reason is that in
 

4067
01:17:15,199 --> 01:17:17,189
and the reason is that in
maybe sort of five years or five or ten

4068
01:17:17,189 --> 01:17:17,199
maybe sort of five years or five or ten
 

4069
01:17:17,199 --> 01:17:18,950
maybe sort of five years or five or ten
years before this paper came out

4070
01:17:18,950 --> 01:17:18,960
years before this paper came out
 

4071
01:17:18,960 --> 01:17:20,550
years before this paper came out
um there was a famous set of

4072
01:17:20,550 --> 01:17:20,560
um there was a famous set of
 

4073
01:17:20,560 --> 01:17:22,149
um there was a famous set of
measurements on one of the predecessor

4074
01:17:22,149 --> 01:17:22,159
measurements on one of the predecessor
 

4075
01:17:22,159 --> 01:17:23,669
measurements on one of the predecessor
microkernels an earlier microkernel

4076
01:17:23,669 --> 01:17:23,679
microkernels an earlier microkernel
 

4077
01:17:23,679 --> 01:17:25,030
microkernels an earlier microkernel
called mock

4078
01:17:25,030 --> 01:17:25,040
called mock
 

4079
01:17:25,040 --> 01:17:27,510
called mock
basically running in very much this uh

4080
01:17:27,510 --> 01:17:27,520
basically running in very much this uh
 

4081
01:17:27,520 --> 01:17:29,030
basically running in very much this uh
configuration

4082
01:17:29,030 --> 01:17:29,040
configuration
 

4083
01:17:29,040 --> 01:17:30,790
configuration
but a different you know totally

4084
01:17:30,790 --> 01:17:30,800
but a different you know totally
 

4085
01:17:30,800 --> 01:17:32,709
but a different you know totally
different design internally but

4086
01:17:32,709 --> 01:17:32,719
different design internally but
 

4087
01:17:32,719 --> 01:17:35,750
different design internally but
kind of the same architecture um this

4088
01:17:35,750 --> 01:17:35,760
kind of the same architecture um this
 

4089
01:17:35,760 --> 01:17:38,709
kind of the same architecture um this
um the name of this earlier micro kernel

4090
01:17:38,709 --> 01:17:38,719
um the name of this earlier micro kernel
 

4091
01:17:38,719 --> 01:17:40,550
um the name of this earlier micro kernel
project is mock

4092
01:17:40,550 --> 01:17:40,560
project is mock
 

4093
01:17:40,560 --> 01:17:41,910
project is mock
there was measurements on mach that

4094
01:17:41,910 --> 01:17:41,920
there was measurements on mach that
 

4095
01:17:41,920 --> 01:17:43,590
there was measurements on mach that
showed that mach was

4096
01:17:43,590 --> 01:17:43,600
showed that mach was
 

4097
01:17:43,600 --> 01:17:46,310
showed that mach was
dramatically slower than just ordinary

4098
01:17:46,310 --> 01:17:46,320
dramatically slower than just ordinary
 

4099
01:17:46,320 --> 01:17:47,590
dramatically slower than just ordinary
unix

4100
01:17:47,590 --> 01:17:47,600
unix
 

4101
01:17:47,600 --> 01:17:49,750
unix
when it was run in this configuration

4102
01:17:49,750 --> 01:17:49,760
when it was run in this configuration
 

4103
01:17:49,760 --> 01:17:50,709
when it was run in this configuration
and

4104
01:17:50,709 --> 01:17:50,719
and
 

4105
01:17:50,719 --> 01:17:52,310
and
you know there are a lot of reasons for

4106
01:17:52,310 --> 01:17:52,320
you know there are a lot of reasons for
 

4107
01:17:52,320 --> 01:17:54,870
you know there are a lot of reasons for
that having to do with the ipc system

4108
01:17:54,870 --> 01:17:54,880
that having to do with the ipc system
 

4109
01:17:54,880 --> 01:17:57,110
that having to do with the ipc system
not being as optimized as you might hope

4110
01:17:57,110 --> 01:17:57,120
not being as optimized as you might hope
 

4111
01:17:57,120 --> 01:17:59,110
not being as optimized as you might hope
there being just sort of more context

4112
01:17:59,110 --> 01:17:59,120
there being just sort of more context
 

4113
01:17:59,120 --> 01:18:00,950
there being just sort of more context
switches and

4114
01:18:00,950 --> 01:18:00,960
switches and
 

4115
01:18:00,960 --> 01:18:04,310
switches and
um you know user kernel crossings and

4116
01:18:04,310 --> 01:18:04,320
um you know user kernel crossings and
 

4117
01:18:04,320 --> 01:18:05,590
um you know user kernel crossings and
cache misses and whatever you know

4118
01:18:05,590 --> 01:18:05,600
cache misses and whatever you know
 

4119
01:18:05,600 --> 01:18:07,590
cache misses and whatever you know
there's a whole lot of reasons why mock

4120
01:18:07,590 --> 01:18:07,600
there's a whole lot of reasons why mock
 

4121
01:18:07,600 --> 01:18:10,709
there's a whole lot of reasons why mock
uh was slow but many people saw those

4122
01:18:10,709 --> 01:18:10,719
uh was slow but many people saw those
 

4123
01:18:10,719 --> 01:18:12,149
uh was slow but many people saw those
benchmark results showing that mock was

4124
01:18:12,149 --> 01:18:12,159
benchmark results showing that mock was
 

4125
01:18:12,159 --> 01:18:13,270
benchmark results showing that mock was
much slower than

4126
01:18:13,270 --> 01:18:13,280
much slower than
 

4127
01:18:13,280 --> 01:18:14,870
much slower than
native operating systems and decided

4128
01:18:14,870 --> 01:18:14,880
native operating systems and decided
 

4129
01:18:14,880 --> 01:18:16,709
native operating systems and decided
that microkernels were just

4130
01:18:16,709 --> 01:18:16,719
that microkernels were just
 

4131
01:18:16,719 --> 01:18:19,270
that microkernels were just
uh hopeless hopelessly inefficient were

4132
01:18:19,270 --> 01:18:19,280
uh hopeless hopelessly inefficient were
 

4133
01:18:19,280 --> 01:18:20,950
uh hopeless hopelessly inefficient were
unlikely ever to be fast enough to be

4134
01:18:20,950 --> 01:18:20,960
unlikely ever to be fast enough to be
 

4135
01:18:20,960 --> 01:18:22,390
unlikely ever to be fast enough to be
competitive and

4136
01:18:22,390 --> 01:18:22,400
competitive and
 

4137
01:18:22,400 --> 01:18:24,310
competitive and
you know we should just all use

4138
01:18:24,310 --> 01:18:24,320
you know we should just all use
 

4139
01:18:24,320 --> 01:18:26,470
you know we should just all use
monolithic kernels

4140
01:18:26,470 --> 01:18:26,480
monolithic kernels
 

4141
01:18:26,480 --> 01:18:29,350
monolithic kernels
today's paper is like an answer

4142
01:18:29,350 --> 01:18:29,360
today's paper is like an answer
 

4143
01:18:29,360 --> 01:18:30,229
today's paper is like an answer
basically

4144
01:18:30,229 --> 01:18:30,239
basically
 

4145
01:18:30,239 --> 01:18:33,189
basically
um to that argument it's sort of the

4146
01:18:33,189 --> 01:18:33,199
um to that argument it's sort of the
 

4147
01:18:33,199 --> 01:18:34,470
um to that argument it's sort of the
rebuttal to that argument

4148
01:18:34,470 --> 01:18:34,480
rebuttal to that argument
 

4149
01:18:34,480 --> 01:18:36,149
rebuttal to that argument
and the point of this paper is to show

4150
01:18:36,149 --> 01:18:36,159
and the point of this paper is to show
 

4151
01:18:36,159 --> 01:18:38,390
and the point of this paper is to show
that you can build this architecture

4152
01:18:38,390 --> 01:18:38,400
that you can build this architecture
 

4153
01:18:38,400 --> 01:18:40,229
that you can build this architecture
and if you pay enough attention to

4154
01:18:40,229 --> 01:18:40,239
and if you pay enough attention to
 

4155
01:18:40,239 --> 01:18:41,669
and if you pay enough attention to
optimizing performance

4156
01:18:41,669 --> 01:18:41,679
optimizing performance
 

4157
01:18:41,679 --> 01:18:45,350
optimizing performance
you can get competitive performance with

4158
01:18:45,350 --> 01:18:45,360
you can get competitive performance with
 

4159
01:18:45,360 --> 01:18:47,189
you can get competitive performance with
native operating systems so it's just

4160
01:18:47,189 --> 01:18:47,199
native operating systems so it's just
 

4161
01:18:47,199 --> 01:18:48,950
native operating systems so it's just
directly running unix

4162
01:18:48,950 --> 01:18:48,960
directly running unix
 

4163
01:18:48,960 --> 01:18:51,590
directly running unix
and therefore you can't dismiss

4164
01:18:51,590 --> 01:18:51,600
and therefore you can't dismiss
 

4165
01:18:51,600 --> 01:18:53,270
and therefore you can't dismiss
microkernels simply on the basis of

4166
01:18:53,270 --> 01:18:53,280
microkernels simply on the basis of
 

4167
01:18:53,280 --> 01:18:54,390
microkernels simply on the basis of
performance

4168
01:18:54,390 --> 01:18:54,400
performance
 

4169
01:18:54,400 --> 01:18:55,669
performance
you know you may not want them for other

4170
01:18:55,669 --> 01:18:55,679
you know you may not want them for other
 

4171
01:18:55,679 --> 01:18:59,110
you know you may not want them for other
reasons but you can't use performance

4172
01:18:59,110 --> 01:18:59,120
reasons but you can't use performance
 

4173
01:18:59,120 --> 01:19:02,390
reasons but you can't use performance
as the reason to reject them

4174
01:19:02,390 --> 01:19:02,400
as the reason to reject them
 

4175
01:19:02,400 --> 01:19:03,750
as the reason to reject them
part of the a huge part of the

4176
01:19:03,750 --> 01:19:03,760
part of the a huge part of the
 

4177
01:19:03,760 --> 01:19:06,229
part of the a huge part of the
ingredient in

4178
01:19:06,229 --> 01:19:06,239
ingredient in
 

4179
01:19:06,239 --> 01:19:07,510
ingredient in
making that argument is that they made

4180
01:19:07,510 --> 01:19:07,520
making that argument is that they made
 

4181
01:19:07,520 --> 01:19:09,430
making that argument is that they made
the ibc much faster with the techniques

4182
01:19:09,430 --> 01:19:09,440
the ibc much faster with the techniques
 

4183
01:19:09,440 --> 01:19:11,430
the ibc much faster with the techniques
that i outlined a few minutes ago

4184
01:19:11,430 --> 01:19:11,440
that i outlined a few minutes ago
 

4185
01:19:11,440 --> 01:19:14,470
that i outlined a few minutes ago
and you can see this i think in um

4186
01:19:14,470 --> 01:19:14,480
and you can see this i think in um
 

4187
01:19:14,480 --> 01:19:17,110
and you can see this i think in um
in a very simple benchmark in table two

4188
01:19:17,110 --> 01:19:17,120
in a very simple benchmark in table two
 

4189
01:19:17,120 --> 01:19:19,030
in a very simple benchmark in table two
if you have a copy of the paper with you

4190
01:19:19,030 --> 01:19:19,040
if you have a copy of the paper with you
 

4191
01:19:19,040 --> 01:19:22,550
if you have a copy of the paper with you
um table two has measurements of

4192
01:19:22,550 --> 01:19:22,560
um table two has measurements of
 

4193
01:19:22,560 --> 01:19:24,229
um table two has measurements of
just native linux running in the

4194
01:19:24,229 --> 01:19:24,239
just native linux running in the
 

4195
01:19:24,239 --> 01:19:25,990
just native linux running in the
ordinary way on hardware

4196
01:19:25,990 --> 01:19:26,000
ordinary way on hardware
 

4197
01:19:26,000 --> 01:19:28,550
ordinary way on hardware
um and on native linux they show that uh

4198
01:19:28,550 --> 01:19:28,560
um and on native linux they show that uh
 

4199
01:19:28,560 --> 01:19:29,750
um and on native linux they show that uh
you know on their hardware and their

4200
01:19:29,750 --> 01:19:29,760
you know on their hardware and their
 

4201
01:19:29,760 --> 01:19:30,950
you know on their hardware and their
version of linux

4202
01:19:30,950 --> 01:19:30,960
version of linux
 

4203
01:19:30,960 --> 01:19:33,669
version of linux
that um a single simple system called

4204
01:19:33,669 --> 01:19:33,679
that um a single simple system called
 

4205
01:19:33,679 --> 01:19:34,550
that um a single simple system called
get pid

4206
01:19:34,550 --> 01:19:34,560
get pid
 

4207
01:19:34,560 --> 01:19:38,470
get pid
took 1.7 microseconds

4208
01:19:38,470 --> 01:19:38,480
took 1.7 microseconds
 

4209
01:19:38,480 --> 01:19:41,750
took 1.7 microseconds
and they also show that the

4210
01:19:41,750 --> 01:19:41,760
and they also show that the
 

4211
01:19:41,760 --> 01:19:44,470
and they also show that the
sort of equivalent thing in their in l4

4212
01:19:44,470 --> 01:19:44,480
sort of equivalent thing in their in l4
 

4213
01:19:44,480 --> 01:19:45,110
sort of equivalent thing in their in l4
setup

4214
01:19:45,110 --> 01:19:45,120
setup
 

4215
01:19:45,120 --> 01:19:46,790
setup
where you have to send an ipc request

4216
01:19:46,790 --> 01:19:46,800
where you have to send an ipc request
 

4217
01:19:46,800 --> 01:19:48,229
where you have to send an ipc request
and get an ipc response

4218
01:19:48,229 --> 01:19:48,239
and get an ipc response
 

4219
01:19:48,239 --> 01:19:51,110
and get an ipc response
just for this get process id system call

4220
01:19:51,110 --> 01:19:51,120
just for this get process id system call
 

4221
01:19:51,120 --> 01:19:54,070
just for this get process id system call
that that

4222
01:19:54,070 --> 01:19:54,080

 

4223
01:19:54,080 --> 01:19:57,750

that took uh four microseconds under l4

4224
01:19:57,750 --> 01:19:57,760
that took uh four microseconds under l4
 

4225
01:19:57,760 --> 01:20:00,229
that took uh four microseconds under l4
linux which is to say twice as long but

4226
01:20:00,229 --> 01:20:00,239
linux which is to say twice as long but
 

4227
01:20:00,239 --> 01:20:02,390
linux which is to say twice as long but
there's sort of twice as much work going

4228
01:20:02,390 --> 01:20:02,400
there's sort of twice as much work going
 

4229
01:20:02,400 --> 01:20:03,590
there's sort of twice as much work going
on because you're doing

4230
01:20:03,590 --> 01:20:03,600
on because you're doing
 

4231
01:20:03,600 --> 01:20:05,669
on because you're doing
two sets of user kernel crossings

4232
01:20:05,669 --> 01:20:05,679
two sets of user kernel crossings
 

4233
01:20:05,679 --> 01:20:06,790
two sets of user kernel crossings
instead of

4234
01:20:06,790 --> 01:20:06,800
instead of
 

4235
01:20:06,800 --> 01:20:10,310
instead of
just a single simple system call that is

4236
01:20:10,310 --> 01:20:10,320
just a single simple system call that is
 

4237
01:20:10,320 --> 01:20:11,669
just a single simple system call that is
they could claim that they had paired

4238
01:20:11,669 --> 01:20:11,679
they could claim that they had paired
 

4239
01:20:11,679 --> 01:20:14,629
they could claim that they had paired
the expense of these ipc based system

4240
01:20:14,629 --> 01:20:14,639
the expense of these ipc based system
 

4241
01:20:14,639 --> 01:20:15,110
the expense of these ipc based system
calls

4242
01:20:15,110 --> 01:20:15,120
calls
 

4243
01:20:15,120 --> 01:20:17,510
calls
down to basically the minimum that is

4244
01:20:17,510 --> 01:20:17,520
down to basically the minimum that is
 

4245
01:20:17,520 --> 01:20:19,510
down to basically the minimum that is
twice the cost of a

4246
01:20:19,510 --> 01:20:19,520
twice the cost of a
 

4247
01:20:19,520 --> 01:20:21,510
twice the cost of a
system called native linux and therefore

4248
01:20:21,510 --> 01:20:21,520
system called native linux and therefore
 

4249
01:20:21,520 --> 01:20:22,950
system called native linux and therefore
they were doing roughly as good as

4250
01:20:22,950 --> 01:20:22,960
they were doing roughly as good as
 

4251
01:20:22,960 --> 01:20:26,390
they were doing roughly as good as
as you could possibly expect

4252
01:20:26,390 --> 01:20:26,400

 

4253
01:20:26,400 --> 01:20:28,790

now of course that's still their system

4254
01:20:28,790 --> 01:20:28,800
now of course that's still their system
 

4255
01:20:28,800 --> 01:20:30,310
now of course that's still their system
goals are still half as fast as native

4256
01:20:30,310 --> 01:20:30,320
goals are still half as fast as native
 

4257
01:20:30,320 --> 01:20:33,189
goals are still half as fast as native
linux

4258
01:20:33,189 --> 01:20:33,199

 

4259
01:20:33,199 --> 01:20:35,590

and you know it's not clear unless you

4260
01:20:35,590 --> 01:20:35,600
and you know it's not clear unless you
 

4261
01:20:35,600 --> 01:20:37,189
and you know it's not clear unless you
did some measurements whether

4262
01:20:37,189 --> 01:20:37,199
did some measurements whether
 

4263
01:20:37,199 --> 01:20:39,110
did some measurements whether
system calls taking twice or simple

4264
01:20:39,110 --> 01:20:39,120
system calls taking twice or simple
 

4265
01:20:39,120 --> 01:20:40,629
system calls taking twice or simple
system calls taking twice as long as a

4266
01:20:40,629 --> 01:20:40,639
system calls taking twice as long as a
 

4267
01:20:40,639 --> 01:20:41,830
system calls taking twice as long as a
disaster or

4268
01:20:41,830 --> 01:20:41,840
disaster or
 

4269
01:20:41,840 --> 01:20:44,550
disaster or
not a problem and in order to show that

4270
01:20:44,550 --> 01:20:44,560
not a problem and in order to show that
 

4271
01:20:44,560 --> 01:20:46,070
not a problem and in order to show that
and you know it might be a disaster

4272
01:20:46,070 --> 01:20:46,080
and you know it might be a disaster
 

4273
01:20:46,080 --> 01:20:47,750
and you know it might be a disaster
if you do a lot of system calls or might

4274
01:20:47,750 --> 01:20:47,760
if you do a lot of system calls or might
 

4275
01:20:47,760 --> 01:20:49,830
if you do a lot of system calls or might
be not a problem if

4276
01:20:49,830 --> 01:20:49,840
be not a problem if
 

4277
01:20:49,840 --> 01:20:51,910
be not a problem if
uh you do relatively few system calls or

4278
01:20:51,910 --> 01:20:51,920
uh you do relatively few system calls or
 

4279
01:20:51,920 --> 01:20:53,270
uh you do relatively few system calls or
there's a lot of work

4280
01:20:53,270 --> 01:20:53,280
there's a lot of work
 

4281
01:20:53,280 --> 01:20:55,350
there's a lot of work
per system call because maybe your

4282
01:20:55,350 --> 01:20:55,360
per system call because maybe your
 

4283
01:20:55,360 --> 01:20:56,709
per system call because maybe your
system calls it more complicated than

4284
01:20:56,709 --> 01:20:56,719
system calls it more complicated than
 

4285
01:20:56,719 --> 01:20:59,030
system calls it more complicated than
get pid

4286
01:20:59,030 --> 01:20:59,040
get pid
 

4287
01:20:59,040 --> 01:21:01,430
get pid
and their answer to that in the paper is

4288
01:21:01,430 --> 01:21:01,440
and their answer to that in the paper is
 

4289
01:21:01,440 --> 01:21:02,629
and their answer to that in the paper is
the figure eight

4290
01:21:02,629 --> 01:21:02,639
the figure eight
 

4291
01:21:02,639 --> 01:21:05,510
the figure eight
benchmark using this benchmark called

4292
01:21:05,510 --> 01:21:05,520
benchmark using this benchmark called
 

4293
01:21:05,520 --> 01:21:06,709
benchmark using this benchmark called
aim

4294
01:21:06,709 --> 01:21:06,719
aim
 

4295
01:21:06,719 --> 01:21:08,950
aim
which is just a more it's a benchmark

4296
01:21:08,950 --> 01:21:08,960
which is just a more it's a benchmark
 

4297
01:21:08,960 --> 01:21:10,550
which is just a more it's a benchmark
that does all kinds of different system

4298
01:21:10,550 --> 01:21:10,560
that does all kinds of different system
 

4299
01:21:10,560 --> 01:21:11,990
that does all kinds of different system
calls it reads and writes files and

4300
01:21:11,990 --> 01:21:12,000
calls it reads and writes files and
 

4301
01:21:12,000 --> 01:21:13,510
calls it reads and writes files and
creates processes or it does all the

4302
01:21:13,510 --> 01:21:13,520
creates processes or it does all the
 

4303
01:21:13,520 --> 01:21:15,350
creates processes or it does all the
things with the kernel that

4304
01:21:15,350 --> 01:21:15,360
things with the kernel that
 

4305
01:21:15,360 --> 01:21:17,830
things with the kernel that
processes do and they basically showed

4306
01:21:17,830 --> 01:21:17,840
processes do and they basically showed
 

4307
01:21:17,840 --> 01:21:18,629
processes do and they basically showed
in figure eight

4308
01:21:18,629 --> 01:21:18,639
in figure eight
 

4309
01:21:18,639 --> 01:21:21,669
in figure eight
that their setup running a much more

4310
01:21:21,669 --> 01:21:21,679
that their setup running a much more
 

4311
01:21:21,679 --> 01:21:23,750
that their setup running a much more
full application that does

4312
01:21:23,750 --> 01:21:23,760
full application that does
 

4313
01:21:23,760 --> 01:21:26,470
full application that does
you know much more than just get pid

4314
01:21:26,470 --> 01:21:26,480
you know much more than just get pid
 

4315
01:21:26,480 --> 01:21:26,870
you know much more than just get pid
runs

4316
01:21:26,870 --> 01:21:26,880
runs
 

4317
01:21:26,880 --> 01:21:28,950
runs
only a few percent slower than native

4318
01:21:28,950 --> 01:21:28,960
only a few percent slower than native
 

4319
01:21:28,960 --> 01:21:29,910
only a few percent slower than native
linux

4320
01:21:29,910 --> 01:21:29,920
linux
 

4321
01:21:29,920 --> 01:21:31,750
linux
um and that therefore hopefully you

4322
01:21:31,750 --> 01:21:31,760
um and that therefore hopefully you
 

4323
01:21:31,760 --> 01:21:33,270
um and that therefore hopefully you
could expect that whatever it is you

4324
01:21:33,270 --> 01:21:33,280
could expect that whatever it is you
 

4325
01:21:33,280 --> 01:21:34,790
could expect that whatever it is you
wanted to run on a computer

4326
01:21:34,790 --> 01:21:34,800
wanted to run on a computer
 

4327
01:21:34,800 --> 01:21:37,669
wanted to run on a computer
would run almost as fast under l4 plus

4328
01:21:37,669 --> 01:21:37,679
would run almost as fast under l4 plus
 

4329
01:21:37,679 --> 01:21:39,430
would run almost as fast under l4 plus
linux as it does under

4330
01:21:39,430 --> 01:21:39,440
linux as it does under
 

4331
01:21:39,440 --> 01:21:41,510
linux as it does under
a straight operating system under native

4332
01:21:41,510 --> 01:21:41,520
a straight operating system under native
 

4333
01:21:41,520 --> 01:21:42,470
a straight operating system under native
operating system

4334
01:21:42,470 --> 01:21:42,480
operating system
 

4335
01:21:42,480 --> 01:21:44,790
operating system
now therefore you know they were

4336
01:21:44,790 --> 01:21:44,800
now therefore you know they were
 

4337
01:21:44,800 --> 01:21:46,790
now therefore you know they were
basically to a first approximation as

4338
01:21:46,790 --> 01:21:46,800
basically to a first approximation as
 

4339
01:21:46,800 --> 01:21:49,030
basically to a first approximation as
fast

4340
01:21:49,030 --> 01:21:49,040
fast
 

4341
01:21:49,040 --> 01:21:52,070
fast
as just running straight linux and

4342
01:21:52,070 --> 01:21:52,080
as just running straight linux and
 

4343
01:21:52,080 --> 01:21:55,590
as just running straight linux and
therefore you should take them seriously

4344
01:21:55,590 --> 01:21:55,600

 

4345
01:21:55,600 --> 01:21:57,669

okay so that was an impressive result by

4346
01:21:57,669 --> 01:21:57,679
okay so that was an impressive result by
 

4347
01:21:57,679 --> 01:21:58,870
okay so that was an impressive result by
the way this is

4348
01:21:58,870 --> 01:21:58,880
the way this is
 

4349
01:21:58,880 --> 01:22:01,750
the way this is
like like somewhat unexpected and um

4350
01:22:01,750 --> 01:22:01,760
like like somewhat unexpected and um
 

4351
01:22:01,760 --> 01:22:03,189
like like somewhat unexpected and um
cool

4352
01:22:03,189 --> 01:22:03,199
cool
 

4353
01:22:03,199 --> 01:22:06,870
cool
just fast forwarding 20 years um

4354
01:22:06,870 --> 01:22:06,880
just fast forwarding 20 years um
 

4355
01:22:06,880 --> 01:22:08,229
just fast forwarding 20 years um
where this ended up as i mentioned

4356
01:22:08,229 --> 01:22:08,239
where this ended up as i mentioned
 

4357
01:22:08,239 --> 01:22:10,870
where this ended up as i mentioned
before people actually use l4

4358
01:22:10,870 --> 01:22:10,880
before people actually use l4
 

4359
01:22:10,880 --> 01:22:12,390
before people actually use l4
in a bunch of embedded situations

4360
01:22:12,390 --> 01:22:12,400
in a bunch of embedded situations
 

4361
01:22:12,400 --> 01:22:14,149
in a bunch of embedded situations
particularly it's used a lot

4362
01:22:14,149 --> 01:22:14,159
particularly it's used a lot
 

4363
01:22:14,159 --> 01:22:17,030
particularly it's used a lot
there's many instances of l4 running in

4364
01:22:17,030 --> 01:22:17,040
there's many instances of l4 running in
 

4365
01:22:17,040 --> 01:22:18,550
there's many instances of l4 running in
in smartphones

4366
01:22:18,550 --> 01:22:18,560
in smartphones
 

4367
01:22:18,560 --> 01:22:21,990
in smartphones
um hidden from view but nevertheless

4368
01:22:21,990 --> 01:22:22,000
um hidden from view but nevertheless
 

4369
01:22:22,000 --> 01:22:23,590
um hidden from view but nevertheless
and all running various kinds of custom

4370
01:22:23,590 --> 01:22:23,600
and all running various kinds of custom
 

4371
01:22:23,600 --> 01:22:25,350
and all running various kinds of custom
software not not running

4372
01:22:25,350 --> 01:22:25,360
software not not running
 

4373
01:22:25,360 --> 01:22:26,470
software not not running
you know they don't have to have

4374
01:22:26,470 --> 01:22:26,480
you know they don't have to have
 

4375
01:22:26,480 --> 01:22:29,189
you know they don't have to have
compatibility with unix

4376
01:22:29,189 --> 01:22:29,199
compatibility with unix
 

4377
01:22:29,199 --> 01:22:32,070
compatibility with unix
in these situations microkernels in

4378
01:22:32,070 --> 01:22:32,080
in these situations microkernels in
 

4379
01:22:32,080 --> 01:22:32,470
in these situations microkernels in
other

4380
01:22:32,470 --> 01:22:32,480
other
 

4381
01:22:32,480 --> 01:22:33,750
other
more general situations like

4382
01:22:33,750 --> 01:22:33,760
more general situations like
 

4383
01:22:33,760 --> 01:22:36,070
more general situations like
workstations or servers never

4384
01:22:36,070 --> 01:22:36,080
workstations or servers never
 

4385
01:22:36,080 --> 01:22:38,310
workstations or servers never
really caught on and it's not because

4386
01:22:38,310 --> 01:22:38,320
really caught on and it's not because
 

4387
01:22:38,320 --> 01:22:39,910
really caught on and it's not because
there's necessarily anything wrong with

4388
01:22:39,910 --> 01:22:39,920
there's necessarily anything wrong with
 

4389
01:22:39,920 --> 01:22:40,950
there's necessarily anything wrong with
that design

4390
01:22:40,950 --> 01:22:40,960
that design
 

4391
01:22:40,960 --> 01:22:42,790
that design
it's just they would have in order to

4392
01:22:42,790 --> 01:22:42,800
it's just they would have in order to
 

4393
01:22:42,800 --> 01:22:45,110
it's just they would have in order to
displace some existing

4394
01:22:45,110 --> 01:22:45,120
displace some existing
 

4395
01:22:45,120 --> 01:22:47,830
displace some existing
software your new thing has to be you

4396
01:22:47,830 --> 01:22:47,840
software your new thing has to be you
 

4397
01:22:47,840 --> 01:22:48,470
software your new thing has to be you
know like

4398
01:22:48,470 --> 01:22:48,480
know like
 

4399
01:22:48,480 --> 01:22:50,310
know like
better so people will be motivated to

4400
01:22:50,310 --> 01:22:50,320
better so people will be motivated to
 

4401
01:22:50,320 --> 01:22:52,550
better so people will be motivated to
switch and these micro kernels were

4402
01:22:52,550 --> 01:22:52,560
switch and these micro kernels were
 

4403
01:22:52,560 --> 01:22:53,910
switch and these micro kernels were
perfectly good

4404
01:22:53,910 --> 01:22:53,920
perfectly good
 

4405
01:22:53,920 --> 01:22:56,950
perfectly good
not certainly elegant um but it was hard

4406
01:22:56,950 --> 01:22:56,960
not certainly elegant um but it was hard
 

4407
01:22:56,960 --> 01:22:58,550
not certainly elegant um but it was hard
to put for people to put their finger on

4408
01:22:58,550 --> 01:22:58,560
to put for people to put their finger on
 

4409
01:22:58,560 --> 01:22:59,350
to put for people to put their finger on
why it was

4410
01:22:59,350 --> 01:22:59,360
why it was
 

4411
01:22:59,360 --> 01:23:00,870
why it was
so much better that they should like go

4412
01:23:00,870 --> 01:23:00,880
so much better that they should like go
 

4413
01:23:00,880 --> 01:23:03,110
so much better that they should like go
to the trouble of switching from linux

4414
01:23:03,110 --> 01:23:03,120
to the trouble of switching from linux
 

4415
01:23:03,120 --> 01:23:05,510
to the trouble of switching from linux
or whatever they were running

4416
01:23:05,510 --> 01:23:05,520
or whatever they were running
 

4417
01:23:05,520 --> 01:23:08,149
or whatever they were running
this and so it never really caught on

4418
01:23:08,149 --> 01:23:08,159
this and so it never really caught on
 

4419
01:23:08,159 --> 01:23:09,750
this and so it never really caught on
not necessarily for good reasons

4420
01:23:09,750 --> 01:23:09,760
not necessarily for good reasons
 

4421
01:23:09,760 --> 01:23:11,910
not necessarily for good reasons
but because they weren't like

4422
01:23:11,910 --> 01:23:11,920
but because they weren't like
 

4423
01:23:11,920 --> 01:23:13,590
but because they weren't like
dramatically better

4424
01:23:13,590 --> 01:23:13,600
dramatically better
 

4425
01:23:13,600 --> 01:23:15,750
dramatically better
on the other hand many ideas from this

4426
01:23:15,750 --> 01:23:15,760
on the other hand many ideas from this
 

4427
01:23:15,760 --> 01:23:16,870
on the other hand many ideas from this
architecture

4428
01:23:16,870 --> 01:23:16,880
architecture
 

4429
01:23:16,880 --> 01:23:20,390
architecture
had a lasting impact um the

4430
01:23:20,390 --> 01:23:20,400
had a lasting impact um the
 

4431
01:23:20,400 --> 01:23:23,510
had a lasting impact um the
the people had to work out much more

4432
01:23:23,510 --> 01:23:23,520
the people had to work out much more
 

4433
01:23:23,520 --> 01:23:25,590
the people had to work out much more
interesting and flexible ways of using

4434
01:23:25,590 --> 01:23:25,600
interesting and flexible ways of using
 

4435
01:23:25,600 --> 01:23:28,229
interesting and flexible ways of using
virtual memory in order to support

4436
01:23:28,229 --> 01:23:28,239
virtual memory in order to support
 

4437
01:23:28,239 --> 01:23:30,709
virtual memory in order to support
operating systems on their microkernels

4438
01:23:30,709 --> 01:23:30,719
operating systems on their microkernels
 

4439
01:23:30,719 --> 01:23:33,189
operating systems on their microkernels
and those more sophisticated interfaces

4440
01:23:33,189 --> 01:23:33,199
and those more sophisticated interfaces
 

4441
01:23:33,199 --> 01:23:36,070
and those more sophisticated interfaces
made their way through things like mmap

4442
01:23:36,070 --> 01:23:36,080
made their way through things like mmap
 

4443
01:23:36,080 --> 01:23:37,910
made their way through things like mmap
into mainstream operating systems like

4444
01:23:37,910 --> 01:23:37,920
into mainstream operating systems like
 

4445
01:23:37,920 --> 01:23:39,830
into mainstream operating systems like
linux

4446
01:23:39,830 --> 01:23:39,840
linux
 

4447
01:23:39,840 --> 01:23:41,750
linux
this idea of running an operating system

4448
01:23:41,750 --> 01:23:41,760
this idea of running an operating system
 

4449
01:23:41,760 --> 01:23:43,510
this idea of running an operating system
kind of on top

4450
01:23:43,510 --> 01:23:43,520
kind of on top
 

4451
01:23:43,520 --> 01:23:46,709
kind of on top
as a as a server on top of a

4452
01:23:46,709 --> 01:23:46,719
as a as a server on top of a
 

4453
01:23:46,719 --> 01:23:48,550
as a as a server on top of a
lower level operating system is

4454
01:23:48,550 --> 01:23:48,560
lower level operating system is
 

4455
01:23:48,560 --> 01:23:50,950
lower level operating system is
extremely popular today in the form of

4456
01:23:50,950 --> 01:23:50,960
extremely popular today in the form of
 

4457
01:23:50,960 --> 01:23:53,110
extremely popular today in the form of
virtual machine monitors which use all

4458
01:23:53,110 --> 01:23:53,120
virtual machine monitors which use all
 

4459
01:23:53,120 --> 01:23:54,310
virtual machine monitors which use all
over the place in

4460
01:23:54,310 --> 01:23:54,320
over the place in
 

4461
01:23:54,320 --> 01:23:57,510
over the place in
sort of cloud hosting services

4462
01:23:57,510 --> 01:23:57,520
sort of cloud hosting services
 

4463
01:23:57,520 --> 01:24:00,830
sort of cloud hosting services
the desire for extensibility you could

4464
01:24:00,830 --> 01:24:00,840
the desire for extensibility you could
 

4465
01:24:00,840 --> 01:24:02,470
the desire for extensibility you could
modify

4466
01:24:02,470 --> 01:24:02,480
modify
 

4467
01:24:02,480 --> 01:24:05,030
modify
a user level service the way that played

4468
01:24:05,030 --> 01:24:05,040
a user level service the way that played
 

4469
01:24:05,040 --> 01:24:05,669
a user level service the way that played
out in

4470
01:24:05,669 --> 01:24:05,679
out in
 

4471
01:24:05,679 --> 01:24:07,510
out in
things like linux was loadable kernel

4472
01:24:07,510 --> 01:24:07,520
things like linux was loadable kernel
 

4473
01:24:07,520 --> 01:24:09,189
things like linux was loadable kernel
modules which allow you to

4474
01:24:09,189 --> 01:24:09,199
modules which allow you to
 

4475
01:24:09,199 --> 01:24:11,430
modules which allow you to
load you know modify the way the linux

4476
01:24:11,430 --> 01:24:11,440
load you know modify the way the linux
 

4477
01:24:11,440 --> 01:24:13,270
load you know modify the way the linux
kernel works on the fly

4478
01:24:13,270 --> 01:24:13,280
kernel works on the fly
 

4479
01:24:13,280 --> 01:24:15,830
kernel works on the fly
um and of course the sort of client

4480
01:24:15,830 --> 01:24:15,840
um and of course the sort of client
 

4481
01:24:15,840 --> 01:24:17,510
um and of course the sort of client
server good support for this client

4482
01:24:17,510 --> 01:24:17,520
server good support for this client
 

4483
01:24:17,520 --> 01:24:19,110
server good support for this client
server architecture

4484
01:24:19,110 --> 01:24:19,120
server architecture
 

4485
01:24:19,120 --> 01:24:20,790
server architecture
also made its way into kernels like mac

4486
01:24:20,790 --> 01:24:20,800
also made its way into kernels like mac
 

4487
01:24:20,800 --> 01:24:23,110
also made its way into kernels like mac
os which has good ipc and

4488
01:24:23,110 --> 01:24:23,120
os which has good ipc and
 

4489
01:24:23,120 --> 01:24:26,149
os which has good ipc and
good client server and that's all i have

4490
01:24:26,149 --> 01:24:26,159
good client server and that's all i have
 

4491
01:24:26,159 --> 01:24:27,350
good client server and that's all i have
to say for this lecture

4492
01:24:27,350 --> 01:24:27,360
to say for this lecture
 

4493
01:24:27,360 --> 01:24:30,229
to say for this lecture
um and i'm happy to stick around for

4494
01:24:30,229 --> 01:24:30,239
um and i'm happy to stick around for
 

4495
01:24:30,239 --> 01:24:31,270
um and i'm happy to stick around for
questions

4496
01:24:31,270 --> 01:24:31,280
questions
 

4497
01:24:31,280 --> 01:24:36,629
questions
thank you

4498
01:24:36,629 --> 01:24:36,639

 

4499
01:24:36,639 --> 01:24:40,149

thank you you're welcome

4500
01:24:40,149 --> 01:24:40,159
thank you you're welcome
 

4501
01:24:40,159 --> 01:24:42,470
thank you you're welcome
oh i wanted to ask so the paper was

4502
01:24:42,470 --> 01:24:42,480
oh i wanted to ask so the paper was
 

4503
01:24:42,480 --> 01:24:43,430
oh i wanted to ask so the paper was
talking

4504
01:24:43,430 --> 01:24:43,440
talking
 

4505
01:24:43,440 --> 01:24:47,990
talking
about virtual about page tables

4506
01:24:47,990 --> 01:24:48,000
about virtual about page tables
 

4507
01:24:48,000 --> 01:24:51,110
about virtual about page tables
at i think 4.2 um

4508
01:24:51,110 --> 01:24:51,120
at i think 4.2 um
 

4509
01:24:51,120 --> 01:24:54,950
at i think 4.2 um
and it was seeing how

4510
01:24:54,950 --> 01:24:54,960

 

4511
01:24:54,960 --> 01:24:56,709

i think it was kind of what we what you

4512
01:24:56,709 --> 01:24:56,719
i think it was kind of what we what you
 

4513
01:24:56,719 --> 01:24:58,070
i think it was kind of what we what you
mentioned before

4514
01:24:58,070 --> 01:24:58,080
mentioned before
 

4515
01:24:58,080 --> 01:25:01,430
mentioned before
where you said that there is a wrong way

4516
01:25:01,430 --> 01:25:01,440
where you said that there is a wrong way
 

4517
01:25:01,440 --> 01:25:02,629
where you said that there is a wrong way
to do that

4518
01:25:02,629 --> 01:25:02,639
to do that
 

4519
01:25:02,639 --> 01:25:05,510
to do that
i think might be kind of similar to that

4520
01:25:05,510 --> 01:25:05,520
i think might be kind of similar to that
 

4521
01:25:05,520 --> 01:25:05,990
i think might be kind of similar to that
but

4522
01:25:05,990 --> 01:25:06,000
but
 

4523
01:25:06,000 --> 01:25:09,430
but
um if you do this this

4524
01:25:09,430 --> 01:25:09,440
um if you do this this
 

4525
01:25:09,440 --> 01:25:12,709
um if you do this this
thing that you explain in this in your

4526
01:25:12,709 --> 01:25:12,719
thing that you explain in this in your
 

4527
01:25:12,719 --> 01:25:14,390
thing that you explain in this in your
picture now

4528
01:25:14,390 --> 01:25:14,400
picture now
 

4529
01:25:14,400 --> 01:25:17,990
picture now
uh would it be i guess how how would the

4530
01:25:17,990 --> 01:25:18,000
uh would it be i guess how how would the
 

4531
01:25:18,000 --> 01:25:22,149
uh would it be i guess how how would the
page tables work in this case well

4532
01:25:22,149 --> 01:25:22,159
page tables work in this case well
 

4533
01:25:22,159 --> 01:25:23,910
page tables work in this case well
are you uh you may be referring to

4534
01:25:23,910 --> 01:25:23,920
are you uh you may be referring to
 

4535
01:25:23,920 --> 01:25:26,390
are you uh you may be referring to
section 4.3 the dual space mistake oh

4536
01:25:26,390 --> 01:25:26,400
section 4.3 the dual space mistake oh
 

4537
01:25:26,400 --> 01:25:28,629
section 4.3 the dual space mistake oh
yes sorry 4.3

4538
01:25:28,629 --> 01:25:28,639
yes sorry 4.3
 

4539
01:25:28,639 --> 01:25:30,550
yes sorry 4.3
yeah that's a bit of a complicated story

4540
01:25:30,550 --> 01:25:30,560
yeah that's a bit of a complicated story
 

4541
01:25:30,560 --> 01:25:33,030
yeah that's a bit of a complicated story
but the um

4542
01:25:33,030 --> 01:25:33,040
but the um
 

4543
01:25:33,040 --> 01:25:36,149
but the um
uh let's see the the part of the

4544
01:25:36,149 --> 01:25:36,159
uh let's see the the part of the
 

4545
01:25:36,159 --> 01:25:38,070
uh let's see the the part of the
background is the way that linux worked

4546
01:25:38,070 --> 01:25:38,080
background is the way that linux worked
 

4547
01:25:38,080 --> 01:25:40,790
background is the way that linux worked
in those days and indeed until recently

4548
01:25:40,790 --> 01:25:40,800
in those days and indeed until recently
 

4549
01:25:40,800 --> 01:25:43,910
in those days and indeed until recently
is that the when you're running at user

4550
01:25:43,910 --> 01:25:43,920
is that the when you're running at user
 

4551
01:25:43,920 --> 01:25:44,870
is that the when you're running at user
level

4552
01:25:44,870 --> 01:25:44,880
level
 

4553
01:25:44,880 --> 01:25:47,350
level
um the page table that's active has both

4554
01:25:47,350 --> 01:25:47,360
um the page table that's active has both
 

4555
01:25:47,360 --> 01:25:48,550
um the page table that's active has both
the processes pages

4556
01:25:48,550 --> 01:25:48,560
the processes pages
 

4557
01:25:48,560 --> 01:25:50,550
the processes pages
user level pages mapped in and all of

4558
01:25:50,550 --> 01:25:50,560
user level pages mapped in and all of
 

4559
01:25:50,560 --> 01:25:52,149
user level pages mapped in and all of
the kernel mapped into that one page

4560
01:25:52,149 --> 01:25:52,159
the kernel mapped into that one page
 

4561
01:25:52,159 --> 01:25:53,430
the kernel mapped into that one page
table

4562
01:25:53,430 --> 01:25:53,440
table
 

4563
01:25:53,440 --> 01:25:56,390
table
on the x86 anyway so when you made a

4564
01:25:56,390 --> 01:25:56,400
on the x86 anyway so when you made a
 

4565
01:25:56,400 --> 01:25:58,149
on the x86 anyway so when you made a
system call

4566
01:25:58,149 --> 01:25:58,159
system call
 

4567
01:25:58,159 --> 01:26:00,550
system call
and jumped into the kernel the kernel

4568
01:26:00,550 --> 01:26:00,560
and jumped into the kernel the kernel
 

4569
01:26:00,560 --> 01:26:02,629
and jumped into the kernel the kernel
was already mapped into the page table

4570
01:26:02,629 --> 01:26:02,639
was already mapped into the page table
 

4571
01:26:02,639 --> 01:26:04,390
was already mapped into the page table
and therefore no page table switch was

4572
01:26:04,390 --> 01:26:04,400
and therefore no page table switch was
 

4573
01:26:04,400 --> 01:26:06,550
and therefore no page table switch was
required so when you make a system call

4574
01:26:06,550 --> 01:26:06,560
required so when you make a system call
 

4575
01:26:06,560 --> 01:26:06,950
required so when you make a system call
it's

4576
01:26:06,950 --> 01:26:06,960
it's
 

4577
01:26:06,960 --> 01:26:08,310
it's
that much more expensive and much more

4578
01:26:08,310 --> 01:26:08,320
that much more expensive and much more
 

4579
01:26:08,320 --> 01:26:10,470
that much more expensive and much more
cheaper because there was no page table

4580
01:26:10,470 --> 01:26:10,480
cheaper because there was no page table
 

4581
01:26:10,480 --> 01:26:11,910
cheaper because there was no page table
switch if you're calling xv6

4582
01:26:11,910 --> 01:26:11,920
switch if you're calling xv6
 

4583
01:26:11,920 --> 01:26:13,430
switch if you're calling xv6
you know the trampoline code switches

4584
01:26:13,430 --> 01:26:13,440
you know the trampoline code switches
 

4585
01:26:13,440 --> 01:26:15,830
you know the trampoline code switches
page tables which

4586
01:26:15,830 --> 01:26:15,840
page tables which
 

4587
01:26:15,840 --> 01:26:17,990
page tables which
is an expensive thing to do because it

4588
01:26:17,990 --> 01:26:18,000
is an expensive thing to do because it
 

4589
01:26:18,000 --> 01:26:19,669
is an expensive thing to do because it
flushes the tlb

4590
01:26:19,669 --> 01:26:19,679
flushes the tlb
 

4591
01:26:19,679 --> 01:26:22,709
flushes the tlb
cache of virtual to physical mappings

4592
01:26:22,709 --> 01:26:22,719
cache of virtual to physical mappings
 

4593
01:26:22,719 --> 01:26:25,350
cache of virtual to physical mappings
anyway so for efficiency linux used to

4594
01:26:25,350 --> 01:26:25,360
anyway so for efficiency linux used to
 

4595
01:26:25,360 --> 01:26:26,950
anyway so for efficiency linux used to
map kernel and user space in the same

4596
01:26:26,950 --> 01:26:26,960
map kernel and user space in the same
 

4597
01:26:26,960 --> 01:26:27,990
map kernel and user space in the same
page table and

4598
01:26:27,990 --> 01:26:28,000
page table and
 

4599
01:26:28,000 --> 01:26:32,470
page table and
had fast system calls as a result

4600
01:26:32,470 --> 01:26:32,480

 

4601
01:26:32,480 --> 01:26:36,790

so they um for reasons that aren't very

4602
01:26:36,790 --> 01:26:36,800
so they um for reasons that aren't very
 

4603
01:26:36,800 --> 01:26:38,390
so they um for reasons that aren't very
clear decided to

4604
01:26:38,390 --> 01:26:38,400
clear decided to
 

4605
01:26:38,400 --> 01:26:40,709
clear decided to
do this same thing to set up the

4606
01:26:40,709 --> 01:26:40,719
do this same thing to set up the
 

4607
01:26:40,719 --> 01:26:43,990
do this same thing to set up the
mappings in the unix server

4608
01:26:43,990 --> 01:26:44,000
mappings in the unix server
 

4609
01:26:44,000 --> 01:26:48,070
mappings in the unix server
well what they wanted was that when

4610
01:26:48,070 --> 01:26:48,080
well what they wanted was that when
 

4611
01:26:48,080 --> 01:26:50,550
well what they wanted was that when
vi when a process sent a system call

4612
01:26:50,550 --> 01:26:50,560
vi when a process sent a system call
 

4613
01:26:50,560 --> 01:26:51,430
vi when a process sent a system call
over here

4614
01:26:51,430 --> 01:26:51,440
over here
 

4615
01:26:51,440 --> 01:26:53,110
over here
they wanted to have the page table that

4616
01:26:53,110 --> 01:26:53,120
they wanted to have the page table that
 

4617
01:26:53,120 --> 01:26:54,790
they wanted to have the page table that
was active while

4618
01:26:54,790 --> 01:26:54,800
was active while
 

4619
01:26:54,800 --> 01:26:57,590
was active while
in the linux server while processing

4620
01:26:57,590 --> 01:26:57,600
in the linux server while processing
 

4621
01:26:57,600 --> 01:26:58,629
in the linux server while processing
that system call

4622
01:26:58,629 --> 01:26:58,639
that system call
 

4623
01:26:58,639 --> 01:27:01,350
that system call
include all the virtual memory mappings

4624
01:27:01,350 --> 01:27:01,360
include all the virtual memory mappings
 

4625
01:27:01,360 --> 01:27:02,790
include all the virtual memory mappings
mappings for the

4626
01:27:02,790 --> 01:27:02,800
mappings for the
 

4627
01:27:02,800 --> 01:27:06,870
mappings for the
process that sent the system call

4628
01:27:06,870 --> 01:27:06,880

 

4629
01:27:06,880 --> 01:27:09,750

and that at least would make it simpler

4630
01:27:09,750 --> 01:27:09,760
and that at least would make it simpler
 

4631
01:27:09,760 --> 01:27:10,790
and that at least would make it simpler
to look up

4632
01:27:10,790 --> 01:27:10,800
to look up
 

4633
01:27:10,800 --> 01:27:13,270
to look up
virtual addresses passed as system call

4634
01:27:13,270 --> 01:27:13,280
virtual addresses passed as system call
 

4635
01:27:13,280 --> 01:27:14,070
virtual addresses passed as system call
arguments like

4636
01:27:14,070 --> 01:27:14,080
arguments like
 

4637
01:27:14,080 --> 01:27:17,189
arguments like
past or bead the reason why this

4638
01:27:17,189 --> 01:27:17,199
past or bead the reason why this
 

4639
01:27:17,199 --> 01:27:18,629
past or bead the reason why this
worked out poorly there were a bunch of

4640
01:27:18,629 --> 01:27:18,639
worked out poorly there were a bunch of
 

4641
01:27:18,639 --> 01:27:20,390
worked out poorly there were a bunch of
reasons one is that

4642
01:27:20,390 --> 01:27:20,400
reasons one is that
 

4643
01:27:20,400 --> 01:27:23,990
reasons one is that
um l4 which doesn't know anything about

4644
01:27:23,990 --> 01:27:24,000
um l4 which doesn't know anything about
 

4645
01:27:24,000 --> 01:27:25,110
um l4 which doesn't know anything about
any of this stuff

4646
01:27:25,110 --> 01:27:25,120
any of this stuff
 

4647
01:27:25,120 --> 01:27:27,510
any of this stuff
l4 just knows there's two processes and

4648
01:27:27,510 --> 01:27:27,520
l4 just knows there's two processes and
 

4649
01:27:27,520 --> 01:27:28,550
l4 just knows there's two processes and
so when you

4650
01:27:28,550 --> 01:27:28,560
so when you
 

4651
01:27:28,560 --> 01:27:30,470
so when you
send an ipc from one press to another l4

4652
01:27:30,470 --> 01:27:30,480
send an ipc from one press to another l4
 

4653
01:27:30,480 --> 01:27:32,310
send an ipc from one press to another l4
just switches page tables

4654
01:27:32,310 --> 01:27:32,320
just switches page tables
 

4655
01:27:32,320 --> 01:27:33,830
just switches page tables
it always just switches page tables this

4656
01:27:33,830 --> 01:27:33,840
it always just switches page tables this
 

4657
01:27:33,840 --> 01:27:36,790
it always just switches page tables this
guy had a page the vi at a page table

4658
01:27:36,790 --> 01:27:36,800
guy had a page the vi at a page table
 

4659
01:27:36,800 --> 01:27:38,709
guy had a page the vi at a page table
l4 associates a page table with a linux

4660
01:27:38,709 --> 01:27:38,719
l4 associates a page table with a linux
 

4661
01:27:38,719 --> 01:27:40,149
l4 associates a page table with a linux
kernel it just always switches page

4662
01:27:40,149 --> 01:27:40,159
kernel it just always switches page
 

4663
01:27:40,159 --> 01:27:40,709
kernel it just always switches page
tables

4664
01:27:40,709 --> 01:27:40,719
tables
 

4665
01:27:40,719 --> 01:27:44,310
tables
so you couldn't even due to l4 due to

4666
01:27:44,310 --> 01:27:44,320
so you couldn't even due to l4 due to
 

4667
01:27:44,320 --> 01:27:45,430
so you couldn't even due to l4 due to
the different way system calls were

4668
01:27:45,430 --> 01:27:45,440
the different way system calls were
 

4669
01:27:45,440 --> 01:27:47,590
the different way system calls were
implemented and the fact that l4 was

4670
01:27:47,590 --> 01:27:47,600
implemented and the fact that l4 was
 

4671
01:27:47,600 --> 01:27:48,149
implemented and the fact that l4 was
involved

4672
01:27:48,149 --> 01:27:48,159
involved
 

4673
01:27:48,159 --> 01:27:49,990
involved
there was no way to preserve the page

4674
01:27:49,990 --> 01:27:50,000
there was no way to preserve the page
 

4675
01:27:50,000 --> 01:27:52,070
there was no way to preserve the page
table during a system call

4676
01:27:52,070 --> 01:27:52,080
table during a system call
 

4677
01:27:52,080 --> 01:27:54,870
table during a system call
that just wasn't possible because it o4

4678
01:27:54,870 --> 01:27:54,880
that just wasn't possible because it o4
 

4679
01:27:54,880 --> 01:27:56,790
that just wasn't possible because it o4
always switched page tables

4680
01:27:56,790 --> 01:27:56,800
always switched page tables
 

4681
01:27:56,800 --> 01:27:58,229
always switched page tables
when it switched from one process to

4682
01:27:58,229 --> 01:27:58,239
when it switched from one process to
 

4683
01:27:58,239 --> 01:27:59,830
when it switched from one process to
another so they were never going to get

4684
01:27:59,830 --> 01:27:59,840
another so they were never going to get
 

4685
01:27:59,840 --> 01:28:01,110
another so they were never going to get
the efficiency win

4686
01:28:01,110 --> 01:28:01,120
the efficiency win
 

4687
01:28:01,120 --> 01:28:04,390
the efficiency win
of not having to switch page tables when

4688
01:28:04,390 --> 01:28:04,400
of not having to switch page tables when
 

4689
01:28:04,400 --> 01:28:06,310
of not having to switch page tables when
uh did when sort of crossing from

4690
01:28:06,310 --> 01:28:06,320
uh did when sort of crossing from
 

4691
01:28:06,320 --> 01:28:07,590
uh did when sort of crossing from
process from user to

4692
01:28:07,590 --> 01:28:07,600
process from user to
 

4693
01:28:07,600 --> 01:28:11,110
process from user to
kernel but i think they

4694
01:28:11,110 --> 01:28:11,120
kernel but i think they
 

4695
01:28:11,120 --> 01:28:13,270
kernel but i think they
wanted the convenience of being able to

4696
01:28:13,270 --> 01:28:13,280
wanted the convenience of being able to
 

4697
01:28:13,280 --> 01:28:15,110
wanted the convenience of being able to
directly use

4698
01:28:15,110 --> 01:28:15,120
directly use
 

4699
01:28:15,120 --> 01:28:17,910
directly use
users applied virtual addresses but that

4700
01:28:17,910 --> 01:28:17,920
users applied virtual addresses but that
 

4701
01:28:17,920 --> 01:28:19,270
users applied virtual addresses but that
meant that

4702
01:28:19,270 --> 01:28:19,280
meant that
 

4703
01:28:19,280 --> 01:28:21,830
meant that
the mappings they needed to be active

4704
01:28:21,830 --> 01:28:21,840
the mappings they needed to be active
 

4705
01:28:21,840 --> 01:28:23,030
the mappings they needed to be active
depended on which

4706
01:28:23,030 --> 01:28:23,040
depended on which
 

4707
01:28:23,040 --> 01:28:25,910
depended on which
process they were executing a a system

4708
01:28:25,910 --> 01:28:25,920
process they were executing a a system
 

4709
01:28:25,920 --> 01:28:27,030
process they were executing a a system
call on behalf of

4710
01:28:27,030 --> 01:28:27,040
call on behalf of
 

4711
01:28:27,040 --> 01:28:29,030
call on behalf of
so there couldn't be any one page table

4712
01:28:29,030 --> 01:28:29,040
so there couldn't be any one page table
 

4713
01:28:29,040 --> 01:28:30,550
so there couldn't be any one page table
for linux

4714
01:28:30,550 --> 01:28:30,560
for linux
 

4715
01:28:30,560 --> 01:28:31,669
for linux
they would have you know the page table

4716
01:28:31,669 --> 01:28:31,679
they would have you know the page table
 

4717
01:28:31,679 --> 01:28:33,350
they would have you know the page table
linux server wanted to use depend on

4718
01:28:33,350 --> 01:28:33,360
linux server wanted to use depend on
 

4719
01:28:33,360 --> 01:28:34,070
linux server wanted to use depend on
what process

4720
01:28:34,070 --> 01:28:34,080
what process
 

4721
01:28:34,080 --> 01:28:38,149
what process
sent the system call rpc but l4

4722
01:28:38,149 --> 01:28:38,159
sent the system call rpc but l4
 

4723
01:28:38,159 --> 01:28:40,149
sent the system call rpc but l4
did not know how to play that game l4

4724
01:28:40,149 --> 01:28:40,159
did not know how to play that game l4
 

4725
01:28:40,159 --> 01:28:41,430
did not know how to play that game l4
associated a single

4726
01:28:41,430 --> 01:28:41,440
associated a single
 

4727
01:28:41,440 --> 01:28:43,830
associated a single
page table with each process with each

4728
01:28:43,830 --> 01:28:43,840
page table with each process with each
 

4729
01:28:43,840 --> 01:28:44,709
page table with each process with each
task

4730
01:28:44,709 --> 01:28:44,719
task
 

4731
01:28:44,719 --> 01:28:47,110
task
and so in order and it would just switch

4732
01:28:47,110 --> 01:28:47,120
and so in order and it would just switch
 

4733
01:28:47,120 --> 01:28:48,629
and so in order and it would just switch
to that page table so tough luck

4734
01:28:48,629 --> 01:28:48,639
to that page table so tough luck
 

4735
01:28:48,639 --> 01:28:51,830
to that page table so tough luck
linux didn't have any way to cause the

4736
01:28:51,830 --> 01:28:51,840
linux didn't have any way to cause the
 

4737
01:28:51,840 --> 01:28:53,430
linux didn't have any way to cause the
page table to differ depending on who

4738
01:28:53,430 --> 01:28:53,440
page table to differ depending on who
 

4739
01:28:53,440 --> 01:28:54,310
page table to differ depending on who
had sent

4740
01:28:54,310 --> 01:28:54,320
had sent
 

4741
01:28:54,320 --> 01:28:57,030
had sent
the system call in order to deal with

4742
01:28:57,030 --> 01:28:57,040
the system call in order to deal with
 

4743
01:28:57,040 --> 01:28:57,830
the system call in order to deal with
that

4744
01:28:57,830 --> 01:28:57,840
that
 

4745
01:28:57,840 --> 01:29:00,950
that
apparently they made a bunch of

4746
01:29:00,950 --> 01:29:00,960
apparently they made a bunch of
 

4747
01:29:00,960 --> 01:29:04,709
apparently they made a bunch of
shared memory copies of the kernel one

4748
01:29:04,709 --> 01:29:04,719
shared memory copies of the kernel one
 

4749
01:29:04,719 --> 01:29:07,030
shared memory copies of the kernel one
for each process and so each of these

4750
01:29:07,030 --> 01:29:07,040
for each process and so each of these
 

4751
01:29:07,040 --> 01:29:09,350
for each process and so each of these
shared memory copies of the kernel

4752
01:29:09,350 --> 01:29:09,360
shared memory copies of the kernel
 

4753
01:29:09,360 --> 01:29:11,990
shared memory copies of the kernel
had exact had all of the kernel memory

4754
01:29:11,990 --> 01:29:12,000
had exact had all of the kernel memory
 

4755
01:29:12,000 --> 01:29:14,070
had exact had all of the kernel memory
mapped into it so they were all

4756
01:29:14,070 --> 01:29:14,080
mapped into it so they were all
 

4757
01:29:14,080 --> 01:29:16,629
mapped into it so they were all
the same kernel data structures but each

4758
01:29:16,629 --> 01:29:16,639
the same kernel data structures but each
 

4759
01:29:16,639 --> 01:29:17,430
the same kernel data structures but each
process

4760
01:29:17,430 --> 01:29:17,440
process
 

4761
01:29:17,440 --> 01:29:21,110
process
had a dedicated uh

4762
01:29:21,110 --> 01:29:21,120
had a dedicated uh
 

4763
01:29:21,120 --> 01:29:22,830
had a dedicated uh
kernel task associated with it and

4764
01:29:22,830 --> 01:29:22,840
kernel task associated with it and
 

4765
01:29:22,840 --> 01:29:24,950
kernel task associated with it and
therefore that basically

4766
01:29:24,950 --> 01:29:24,960
therefore that basically
 

4767
01:29:24,960 --> 01:29:26,629
therefore that basically
allowed them to trick l4 and to switch

4768
01:29:26,629 --> 01:29:26,639
allowed them to trick l4 and to switch
 

4769
01:29:26,639 --> 01:29:28,229
allowed them to trick l4 and to switch
into the appropriate page table that

4770
01:29:28,229 --> 01:29:28,239
into the appropriate page table that
 

4771
01:29:28,239 --> 01:29:29,030
into the appropriate page table that
included

4772
01:29:29,030 --> 01:29:29,040
included
 

4773
01:29:29,040 --> 01:29:31,590
included
that process plus the kernel you know

4774
01:29:31,590 --> 01:29:31,600
that process plus the kernel you know
 

4775
01:29:31,600 --> 01:29:32,950
that process plus the kernel you know
depending on which process sent the

4776
01:29:32,950 --> 01:29:32,960
depending on which process sent the
 

4777
01:29:32,960 --> 01:29:34,709
depending on which process sent the
system call request

4778
01:29:34,709 --> 01:29:34,719
system call request
 

4779
01:29:34,719 --> 01:29:37,669
system call request
and you know i think that kind of worked

4780
01:29:37,669 --> 01:29:37,679
and you know i think that kind of worked
 

4781
01:29:37,679 --> 01:29:38,470
and you know i think that kind of worked
but

4782
01:29:38,470 --> 01:29:38,480
but
 

4783
01:29:38,480 --> 01:29:39,750
but
or i don't forget what they said that

4784
01:29:39,750 --> 01:29:39,760
or i don't forget what they said that
 

4785
01:29:39,760 --> 01:29:42,310
or i don't forget what they said that
worked but it was slow or something

4786
01:29:42,310 --> 01:29:42,320
worked but it was slow or something
 

4787
01:29:42,320 --> 01:29:45,030
worked but it was slow or something
because it had there were a lot of tasks

4788
01:29:45,030 --> 01:29:45,040
because it had there were a lot of tasks
 

4789
01:29:45,040 --> 01:29:46,709
because it had there were a lot of tasks
um

4790
01:29:46,709 --> 01:29:46,719
um
 

4791
01:29:46,719 --> 01:29:48,310
um
anyway it's like a complicated story and

4792
01:29:48,310 --> 01:29:48,320
anyway it's like a complicated story and
 

4793
01:29:48,320 --> 01:29:49,510
anyway it's like a complicated story and
i think it didn't work out very well for

4794
01:29:49,510 --> 01:29:49,520
i think it didn't work out very well for
 

4795
01:29:49,520 --> 01:29:50,790
i think it didn't work out very well for
them

4796
01:29:50,790 --> 01:29:50,800
them
 

4797
01:29:50,800 --> 01:29:53,350
them
okay okay i see i think i think that

4798
01:29:53,350 --> 01:29:53,360
okay okay i see i think i think that
 

4799
01:29:53,360 --> 01:29:54,149
okay okay i see i think i think that
explains

4800
01:29:54,149 --> 01:29:54,159
explains
 

4801
01:29:54,159 --> 01:29:57,189
explains
oh well why this thing is harder to do

4802
01:29:57,189 --> 01:29:57,199
oh well why this thing is harder to do
 

4803
01:29:57,199 --> 01:29:58,070
oh well why this thing is harder to do
than

4804
01:29:58,070 --> 01:29:58,080
than
 

4805
01:29:58,080 --> 01:30:01,430
than
oh what we do in xv6 okay yeah yeah this

4806
01:30:01,430 --> 01:30:01,440
oh what we do in xv6 okay yeah yeah this
 

4807
01:30:01,440 --> 01:30:01,830
oh what we do in xv6 okay yeah yeah this
would be

4808
01:30:01,830 --> 01:30:01,840
would be
 

4809
01:30:01,840 --> 01:30:04,149
would be
because there's not yet this picture in

4810
01:30:04,149 --> 01:30:04,159
because there's not yet this picture in
 

4811
01:30:04,159 --> 01:30:05,990
because there's not yet this picture in
xv6 or even standard linux is

4812
01:30:05,990 --> 01:30:06,000
xv6 or even standard linux is
 

4813
01:30:06,000 --> 01:30:07,750
xv6 or even standard linux is
much simpler than this because you're

4814
01:30:07,750 --> 01:30:07,760
much simpler than this because you're
 

4815
01:30:07,760 --> 01:30:09,669
much simpler than this because you're
just jumping directly

4816
01:30:09,669 --> 01:30:09,679
just jumping directly
 

4817
01:30:09,679 --> 01:30:11,110
just jumping directly
into the kernel and the kernel has

4818
01:30:11,110 --> 01:30:11,120
into the kernel and the kernel has
 

4819
01:30:11,120 --> 01:30:13,030
into the kernel and the kernel has
control over direct control over all the

4820
01:30:13,030 --> 01:30:13,040
control over direct control over all the
 

4821
01:30:13,040 --> 01:30:14,070
control over direct control over all the
paging hardware

4822
01:30:14,070 --> 01:30:14,080
paging hardware
 

4823
01:30:14,080 --> 01:30:15,990
paging hardware
which it doesn't have when it runs that

4824
01:30:15,990 --> 01:30:16,000
which it doesn't have when it runs that
 

4825
01:30:16,000 --> 01:30:17,590
which it doesn't have when it runs that
note right

4826
01:30:17,590 --> 01:30:17,600
note right
 

4827
01:30:17,600 --> 01:30:21,110
note right
okay i see thank you thank you

4828
01:30:21,110 --> 01:30:21,120
okay i see thank you thank you
 

4829
01:30:21,120 --> 01:30:24,709
okay i see thank you thank you
we're going to ask um why um

4830
01:30:24,709 --> 01:30:24,719
we're going to ask um why um
 

4831
01:30:24,719 --> 01:30:27,590
we're going to ask um why um
it seems like um some some tasks are

4832
01:30:27,590 --> 01:30:27,600
it seems like um some some tasks are
 

4833
01:30:27,600 --> 01:30:29,110
it seems like um some some tasks are
more appropriate to be

4834
01:30:29,110 --> 01:30:29,120
more appropriate to be
 

4835
01:30:29,120 --> 01:30:31,590
more appropriate to be
put outside the kernel than others but

4836
01:30:31,590 --> 01:30:31,600
put outside the kernel than others but
 

4837
01:30:31,600 --> 01:30:32,310
put outside the kernel than others but
this

4838
01:30:32,310 --> 01:30:32,320
this
 

4839
01:30:32,320 --> 01:30:34,470
this
elf like the approach with micro kernels

4840
01:30:34,470 --> 01:30:34,480
elf like the approach with micro kernels
 

4841
01:30:34,480 --> 01:30:36,310
elf like the approach with micro kernels
always seems to be either everything or

4842
01:30:36,310 --> 01:30:36,320
always seems to be either everything or
 

4843
01:30:36,320 --> 01:30:37,910
always seems to be either everything or
nothing or like either

4844
01:30:37,910 --> 01:30:37,920
nothing or like either
 

4845
01:30:37,920 --> 01:30:39,750
nothing or like either
you have a monolithic kernel doing

4846
01:30:39,750 --> 01:30:39,760
you have a monolithic kernel doing
 

4847
01:30:39,760 --> 01:30:41,270
you have a monolithic kernel doing
everything or nothing

4848
01:30:41,270 --> 01:30:41,280
everything or nothing
 

4849
01:30:41,280 --> 01:30:44,310
everything or nothing
just like i feel like paging and some

4850
01:30:44,310 --> 01:30:44,320
just like i feel like paging and some
 

4851
01:30:44,320 --> 01:30:46,070
just like i feel like paging and some
other things could be very efficient

4852
01:30:46,070 --> 01:30:46,080
other things could be very efficient
 

4853
01:30:46,080 --> 01:30:47,590
other things could be very efficient
inside the kernel and then

4854
01:30:47,590 --> 01:30:47,600
inside the kernel and then
 

4855
01:30:47,600 --> 01:30:49,669
inside the kernel and then
maybe like file systems that things that

4856
01:30:49,669 --> 01:30:49,679
maybe like file systems that things that
 

4857
01:30:49,679 --> 01:30:52,390
maybe like file systems that things that
need to be swappable could be outside

4858
01:30:52,390 --> 01:30:52,400
need to be swappable could be outside
 

4859
01:30:52,400 --> 01:30:54,470
need to be swappable could be outside
uh and then even like you could maybe

4860
01:30:54,470 --> 01:30:54,480
uh and then even like you could maybe
 

4861
01:30:54,480 --> 01:30:55,990
uh and then even like you could maybe
even have a kernel that has some

4862
01:30:55,990 --> 01:30:56,000
even have a kernel that has some
 

4863
01:30:56,000 --> 01:30:57,750
even have a kernel that has some
functionality but you can opt

4864
01:30:57,750 --> 01:30:57,760
functionality but you can opt
 

4865
01:30:57,760 --> 01:31:00,629
functionality but you can opt
to not use it and provide your own is

4866
01:31:00,629 --> 01:31:00,639
to not use it and provide your own is
 

4867
01:31:00,639 --> 01:31:02,709
to not use it and provide your own is
there any everything you say

4868
01:31:02,709 --> 01:31:02,719
there any everything you say
 

4869
01:31:02,719 --> 01:31:05,910
there any everything you say
is absolutely well taken and

4870
01:31:05,910 --> 01:31:05,920
is absolutely well taken and
 

4871
01:31:05,920 --> 01:31:08,390
is absolutely well taken and
indeed there were a lot of micro kernel

4872
01:31:08,390 --> 01:31:08,400
indeed there were a lot of micro kernel
 

4873
01:31:08,400 --> 01:31:10,390
indeed there were a lot of micro kernel
or micro kernel related projects

4874
01:31:10,390 --> 01:31:10,400
or micro kernel related projects
 

4875
01:31:10,400 --> 01:31:13,110
or micro kernel related projects
um and many of them built various kinds

4876
01:31:13,110 --> 01:31:13,120
um and many of them built various kinds
 

4877
01:31:13,120 --> 01:31:14,070
um and many of them built various kinds
of hybrids

4878
01:31:14,070 --> 01:31:14,080
of hybrids
 

4879
01:31:14,080 --> 01:31:15,590
of hybrids
um like there were actually a couple

4880
01:31:15,590 --> 01:31:15,600
um like there were actually a couple
 

4881
01:31:15,600 --> 01:31:17,189
um like there were actually a couple
different versions of mock and some of

4882
01:31:17,189 --> 01:31:17,199
different versions of mock and some of
 

4883
01:31:17,199 --> 01:31:18,470
different versions of mock and some of
them

4884
01:31:18,470 --> 01:31:18,480
them
 

4885
01:31:18,480 --> 01:31:19,990
them
were sort of hybrid kernels in which

4886
01:31:19,990 --> 01:31:20,000
were sort of hybrid kernels in which
 

4887
01:31:20,000 --> 01:31:21,270
were sort of hybrid kernels in which
yeah there was this micro kernel that

4888
01:31:21,270 --> 01:31:21,280
yeah there was this micro kernel that
 

4889
01:31:21,280 --> 01:31:21,830
yeah there was this micro kernel that
knew about

4890
01:31:21,830 --> 01:31:21,840
knew about
 

4891
01:31:21,840 --> 01:31:24,870
knew about
ipc but also in the kernel was a

4892
01:31:24,870 --> 01:31:24,880
ipc but also in the kernel was a
 

4893
01:31:24,880 --> 01:31:26,629
ipc but also in the kernel was a
complete

4894
01:31:26,629 --> 01:31:26,639
complete
 

4895
01:31:26,639 --> 01:31:30,390
complete
unix so for instance mach 2.5

4896
01:31:30,390 --> 01:31:30,400
unix so for instance mach 2.5
 

4897
01:31:30,400 --> 01:31:33,430
unix so for instance mach 2.5
was this hybrid with it

4898
01:31:33,430 --> 01:31:33,440
was this hybrid with it
 

4899
01:31:33,440 --> 01:31:35,590
was this hybrid with it
but microkernel and unix all sort of in

4900
01:31:35,590 --> 01:31:35,600
but microkernel and unix all sort of in
 

4901
01:31:35,600 --> 01:31:36,950
but microkernel and unix all sort of in
the same kernel

4902
01:31:36,950 --> 01:31:36,960
the same kernel
 

4903
01:31:36,960 --> 01:31:38,629
the same kernel
and you could make system calls either

4904
01:31:38,629 --> 01:31:38,639
and you could make system calls either
 

4905
01:31:38,639 --> 01:31:40,709
and you could make system calls either
and some stuff was built in

4906
01:31:40,709 --> 01:31:40,719
and some stuff was built in
 

4907
01:31:40,719 --> 01:31:42,870
and some stuff was built in
the sort of microkernel way but some

4908
01:31:42,870 --> 01:31:42,880
the sort of microkernel way but some
 

4909
01:31:42,880 --> 01:31:44,390
the sort of microkernel way but some
things really they would just use

4910
01:31:44,390 --> 01:31:44,400
things really they would just use
 

4911
01:31:44,400 --> 01:31:46,390
things really they would just use
the kernel that was in mock that was

4912
01:31:46,390 --> 01:31:46,400
the kernel that was in mock that was
 

4913
01:31:46,400 --> 01:31:48,550
the kernel that was in mock that was
built into the mock kernel the unix

4914
01:31:48,550 --> 01:31:48,560
built into the mock kernel the unix
 

4915
01:31:48,560 --> 01:31:50,310
built into the mock kernel the unix
kernel was built into the mock kernel

4916
01:31:50,310 --> 01:31:50,320
kernel was built into the mock kernel
 

4917
01:31:50,320 --> 01:31:53,350
kernel was built into the mock kernel
um and modern you know mac os also

4918
01:31:53,350 --> 01:31:53,360
um and modern you know mac os also
 

4919
01:31:53,360 --> 01:31:55,590
um and modern you know mac os also
is built in a way that like the way you

4920
01:31:55,590 --> 01:31:55,600
is built in a way that like the way you
 

4921
01:31:55,600 --> 01:31:56,390
is built in a way that like the way you
describe you know

4922
01:31:56,390 --> 01:31:56,400
describe you know
 

4923
01:31:56,400 --> 01:31:59,430
describe you know
mac os that has a

4924
01:31:59,430 --> 01:31:59,440
mac os that has a
 

4925
01:31:59,440 --> 01:32:00,550
mac os that has a
all right it's a complete operating

4926
01:32:00,550 --> 01:32:00,560
all right it's a complete operating
 

4927
01:32:00,560 --> 01:32:01,910
all right it's a complete operating
system with a file system and everything

4928
01:32:01,910 --> 01:32:01,920
system with a file system and everything
 

4929
01:32:01,920 --> 01:32:03,669
system with a file system and everything
inside it but it also has good support

4930
01:32:03,669 --> 01:32:03,679
inside it but it also has good support
 

4931
01:32:03,679 --> 01:32:04,470
inside it but it also has good support
for

4932
01:32:04,470 --> 01:32:04,480
for
 

4933
01:32:04,480 --> 01:32:07,270
for
ipc and sort of mic threads or all the

4934
01:32:07,270 --> 01:32:07,280
ipc and sort of mic threads or all the
 

4935
01:32:07,280 --> 01:32:08,709
ipc and sort of mic threads or all the
stuff you would want to

4936
01:32:08,709 --> 01:32:08,719
stuff you would want to
 

4937
01:32:08,719 --> 01:32:13,430
stuff you would want to
build micro kernel style services

4938
01:32:13,430 --> 01:32:13,440
build micro kernel style services
 

4939
01:32:13,440 --> 01:32:15,750
build micro kernel style services
i think google's fuchsia i'm aware of

4940
01:32:15,750 --> 01:32:15,760
i think google's fuchsia i'm aware of
 

4941
01:32:15,760 --> 01:32:17,430
i think google's fuchsia i'm aware of
also implement some of these ideas now

4942
01:32:17,430 --> 01:32:17,440
also implement some of these ideas now
 

4943
01:32:17,440 --> 01:32:18,390
also implement some of these ideas now
as well

4944
01:32:18,390 --> 01:32:18,400
as well
 

4945
01:32:18,400 --> 01:32:22,070
as well
oh i'll bet yeah

4946
01:32:22,070 --> 01:32:22,080

 

4947
01:32:22,080 --> 01:32:24,709

so anyway you know there's no one way

4948
01:32:24,709 --> 01:32:24,719
so anyway you know there's no one way
 

4949
01:32:24,719 --> 01:32:26,070
so anyway you know there's no one way
there were people who were sort of

4950
01:32:26,070 --> 01:32:26,080
there were people who were sort of
 

4951
01:32:26,080 --> 01:32:30,790
there were people who were sort of
hoping that a pure a very pure

4952
01:32:30,790 --> 01:32:30,800
hoping that a pure a very pure
 

4953
01:32:30,800 --> 01:32:35,510
hoping that a pure a very pure
scheme could be made to work

4954
01:32:35,510 --> 01:32:35,520

 

4955
01:32:35,520 --> 01:32:38,830

but was not the only possible way

4956
01:32:38,830 --> 01:32:38,840
but was not the only possible way
 

4957
01:32:38,840 --> 01:32:41,110
but was not the only possible way
forward

4958
01:32:41,110 --> 01:32:41,120
forward
 

4959
01:32:41,120 --> 01:32:42,950
forward
all right thanks uh got around to my

4960
01:32:42,950 --> 01:32:42,960
all right thanks uh got around to my
 

4961
01:32:42,960 --> 01:32:44,229
all right thanks uh got around to my
next lecture but

4962
01:32:44,229 --> 01:32:44,239
next lecture but
 

4963
01:32:44,239 --> 01:32:48,629
next lecture but
i'll see you guys see you later

4964
01:32:48,629 --> 01:32:48,639

 

4965
01:32:48,639 --> 01:32:52,470

thank you you're welcome

4966
01:32:52,470 --> 01:32:52,480

 

4967
01:32:52,480 --> 01:32:54,550

oh i i didn't have a i haven't just a

4968
01:32:54,550 --> 01:32:54,560
oh i i didn't have a i haven't just a
 

4969
01:32:54,560 --> 01:32:55,830
oh i i didn't have a i haven't just a
remark i

4970
01:32:55,830 --> 01:32:55,840
remark i
 

4971
01:32:55,840 --> 01:32:58,629
remark i
i think it's fascinating that it it's

4972
01:32:58,629 --> 01:32:58,639
i think it's fascinating that it it's
 

4973
01:32:58,639 --> 01:32:59,669
i think it's fascinating that it it's
like

4974
01:32:59,669 --> 01:32:59,679
like
 

4975
01:32:59,679 --> 01:33:01,510
like
five percent slower but it does so much

4976
01:33:01,510 --> 01:33:01,520
five percent slower but it does so much
 

4977
01:33:01,520 --> 01:33:03,590
five percent slower but it does so much
more work yeah i was fascinating with

4978
01:33:03,590 --> 01:33:03,600
more work yeah i was fascinating with
 

4979
01:33:03,600 --> 01:33:06,070
more work yeah i was fascinating with
that

4980
01:33:06,070 --> 01:33:06,080

 

4981
01:33:06,080 --> 01:33:07,110

you mean that even though it's doing

4982
01:33:07,110 --> 01:33:07,120
you mean that even though it's doing
 

4983
01:33:07,120 --> 01:33:08,709
you mean that even though it's doing
much more work it's only slightly slower

4984
01:33:08,709 --> 01:33:08,719
much more work it's only slightly slower
 

4985
01:33:08,719 --> 01:33:10,070
much more work it's only slightly slower
yeah

4986
01:33:10,070 --> 01:33:10,080
yeah
 

4987
01:33:10,080 --> 01:33:13,910
yeah
well they really sweat blood over the

4988
01:33:13,910 --> 01:33:13,920
well they really sweat blood over the
 

4989
01:33:13,920 --> 01:33:17,030
well they really sweat blood over the
ipc performance and it's another thing

4990
01:33:17,030 --> 01:33:17,040
ipc performance and it's another thing
 

4991
01:33:17,040 --> 01:33:17,669
ipc performance and it's another thing
to remember

4992
01:33:17,669 --> 01:33:17,679
to remember
 

4993
01:33:17,679 --> 01:33:20,550
to remember
of course is that if you start doing if

4994
01:33:20,550 --> 01:33:20,560
of course is that if you start doing if
 

4995
01:33:20,560 --> 01:33:21,830
of course is that if you start doing if
you're doing a

4996
01:33:21,830 --> 01:33:21,840
you're doing a
 

4997
01:33:21,840 --> 01:33:23,910
you're doing a
significant amount of work per system

4998
01:33:23,910 --> 01:33:23,920
significant amount of work per system
 

4999
01:33:23,920 --> 01:33:24,950
significant amount of work per system
call

5000
01:33:24,950 --> 01:33:24,960
call
 

5001
01:33:24,960 --> 01:33:26,950
call
like you know looking at files and

5002
01:33:26,950 --> 01:33:26,960
like you know looking at files and
 

5003
01:33:26,960 --> 01:33:28,709
like you know looking at files and
directories or something

5004
01:33:28,709 --> 01:33:28,719
directories or something
 

5005
01:33:28,719 --> 01:33:30,390
directories or something
then the cost of the system called the

5006
01:33:30,390 --> 01:33:30,400
then the cost of the system called the
 

5007
01:33:30,400 --> 01:33:33,030
then the cost of the system called the
ipc itself starts to be less

5008
01:33:33,030 --> 01:33:33,040
ipc itself starts to be less
 

5009
01:33:33,040 --> 01:33:36,149
ipc itself starts to be less
important so the combination of faster

5010
01:33:36,149 --> 01:33:36,159
important so the combination of faster
 

5011
01:33:36,159 --> 01:33:38,149
important so the combination of faster
system calls plus real programs do

5012
01:33:38,149 --> 01:33:38,159
system calls plus real programs do
 

5013
01:33:38,159 --> 01:33:39,430
system calls plus real programs do
things other than

5014
01:33:39,430 --> 01:33:39,440
things other than
 

5015
01:33:39,440 --> 01:33:42,550
things other than
making system calls but it would also

5016
01:33:42,550 --> 01:33:42,560
making system calls but it would also
 

5017
01:33:42,560 --> 01:33:43,750
making system calls but it would also
like switch

5018
01:33:43,750 --> 01:33:43,760
like switch
 

5019
01:33:43,760 --> 01:33:47,270
like switch
page tables and oh yeah the others

5020
01:33:47,270 --> 01:33:47,280
page tables and oh yeah the others
 

5021
01:33:47,280 --> 01:33:49,030
page tables and oh yeah the others
yeah although the paper i did not talk

5022
01:33:49,030 --> 01:33:49,040
yeah although the paper i did not talk
 

5023
01:33:49,040 --> 01:33:50,790
yeah although the paper i did not talk
about it but the paper had some clever

5024
01:33:50,790 --> 01:33:50,800
about it but the paper had some clever
 

5025
01:33:50,800 --> 01:33:52,070
about it but the paper had some clever
tricks for

5026
01:33:52,070 --> 01:33:52,080
tricks for
 

5027
01:33:52,080 --> 01:33:54,390
tricks for
avoiding the cost of switching page

5028
01:33:54,390 --> 01:33:54,400
avoiding the cost of switching page
 

5029
01:33:54,400 --> 01:33:55,110
avoiding the cost of switching page
tables

5030
01:33:55,110 --> 01:33:55,120
tables
 

5031
01:33:55,120 --> 01:33:58,390
tables
i don't know if you remember for some

5032
01:33:58,390 --> 01:33:58,400
i don't know if you remember for some
 

5033
01:33:58,400 --> 01:33:59,990
i don't know if you remember for some
booths like on page six we're talking

5034
01:33:59,990 --> 01:34:00,000
booths like on page six we're talking
 

5035
01:34:00,000 --> 01:34:01,669
booths like on page six we're talking
about supporting tag

5036
01:34:01,669 --> 01:34:01,679
about supporting tag
 

5037
01:34:01,679 --> 01:34:04,149
about supporting tag
tobs or small spaces they had some

5038
01:34:04,149 --> 01:34:04,159
tobs or small spaces they had some
 

5039
01:34:04,159 --> 01:34:05,430
tobs or small spaces they had some
clever ideas for

5040
01:34:05,430 --> 01:34:05,440
clever ideas for
 

5041
01:34:05,440 --> 01:34:08,629
clever ideas for
not which page tables

5042
01:34:08,629 --> 01:34:08,639
not which page tables
 

5043
01:34:08,639 --> 01:34:10,229
not which page tables
which i had not heard of before i read

5044
01:34:10,229 --> 01:34:10,239
which i had not heard of before i read
 

5045
01:34:10,239 --> 01:34:12,229
which i had not heard of before i read
this paper so

5046
01:34:12,229 --> 01:34:12,239
this paper so
 

5047
01:34:12,239 --> 01:34:14,790
this paper so
this is pretty cool thank you so much

5048
01:34:14,790 --> 01:34:14,800
this is pretty cool thank you so much
 

5049
01:34:14,800 --> 01:34:16,830
this is pretty cool thank you so much
bye

5050
01:34:16,830 --> 01:34:16,840
bye
 

5051
01:34:16,840 --> 01:34:19,840
bye
bye

